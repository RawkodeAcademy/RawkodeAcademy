// src/index.ts for <%= name %>

console.log("Hello from service: <%= name %>!");

/**
 * Example function.
 * Replace with your actual service logic.
 */
export function getGreeting(serviceName: string = "<%= name %>"): string {
  return `Hello from the ${serviceName} (${<%= serviceClassName %>}) service!`;
}

// If this is a Cloudflare Worker, the entry point might look like:
// export default {
//   async fetch(
//     request: Request,
//     env: unknown, // Define your Env interface based on wrangler.toml bindings
//     ctx: ExecutionContext,
//   ): Promise<Response> {
//     console.log(`Request for: ${request.url}`);
//     const greeting = getGreeting("<%= name %>");
//     return new Response(`${greeting}\nRequest URL: ${request.url}`);
//   },
// };

// Or if using Hono.js (a common choice for Bun/Cloudflare Workers):
/*
import { Hono } from 'hono';

const app = new Hono();

app.get('/', (c) => {
  return c.text(`Hello from <%= name %>!`);
});

// Example of using a parameter from the path
app.get('/greet/:message', (c) => {
  const message = c.req.param('message');
  return c.text(`You said: ${message}, and <%= name %> says hello back!`);
});

export default app;
*/

// Initialize and log greeting (for non-worker/non-serverless contexts if applicable)
// For typical serverless functions, the export default object is the entry point.
if (typeof Bun !== 'undefined' && Bun.main === import.meta.path) {
  // This block runs if the file is executed directly with Bun
  // (not when imported as a module or run as a CF Worker)
  console.log(getGreeting());
}
