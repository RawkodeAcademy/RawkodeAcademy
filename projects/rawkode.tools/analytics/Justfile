api_url := "https://5820a033-analytics-event-collector.rawkodeacademy.workers.dev"
api_token := "ukw9pt1u1f7nvbvarxmcq794"
compactor_url := "https://analytics-compaction-worker.rawkodeacademy.workers.dev"

# Deploy compaction worker
deploy-compactor:
    cd pipeline/compaction-worker && wrangler deploy

default:
  just --list

# Test health endpoint
test-health:
    curl -i {{api_url}}/health

# Test sending a single CloudEvent
test-single-event:
    #!/usr/bin/env bash
    curl -i -X POST {{api_url}}/events \
        -H "Authorization: Bearer {{api_token}}" \
        -H "Content-Type: application/json" \
        -d "{
            \"specversion\": \"1.0\",
            \"type\": \"com.example.test\",
            \"source\": \"justfile-test\",
            \"id\": \"test-event-$(date +%s)\",
            \"time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"data\": {
                \"message\": \"Test event from Justfile\",
                \"timestamp\": \"$(date +%s)\"
            }
        }"

# Test sending batch events
test-batch-events:
    #!/usr/bin/env bash
    curl -i -X POST {{api_url}}/events/batch \
        -H "Authorization: Bearer {{api_token}}" \
        -H "Content-Type: application/json" \
        -d "{
            \"events\": [
                {
                    \"specversion\": \"1.0\",
                    \"type\": \"com.example.batch.test\",
                    \"source\": \"justfile-batch-test\",
                    \"id\": \"batch-event-1-$(date +%s)\",
                    \"time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                    \"data\": {
                        \"message\": \"Batch event 1\",
                        \"index\": 1
                    }
                },
                {
                    \"specversion\": \"1.0\",
                    \"type\": \"com.example.batch.test\",
                    \"source\": \"justfile-batch-test\",
                    \"id\": \"batch-event-2-$(date +%s)\",
                    \"time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
                    \"data\": {
                        \"message\": \"Batch event 2\",
                        \"index\": 2
                    }
                }
            ]
        }"

# Test unauthorized request (should fail)
test-unauthorized:
    curl -i -X POST {{api_url}}/events \
        -H "Content-Type: application/json" \
        -d '{"specversion": "1.0", "type": "com.example.test", "source": "unauthorized-test", "id": "test-event-unauthorized"}'

# Run all tests
test-all: test-health test-unauthorized test-single-event test-batch-events
    @echo "All tests completed"

# Run event-collector locally with wrangler
dev:
    cd pipeline/event-collector && wrangler dev

# Deploy event-collector
deploy:
    cd pipeline/event-collector && wrangler deploy

# Deploy all services
deploy-all: deploy deploy-compactor
    cd monitoring/health-checker && wrangler deploy
    cd api && wrangler deploy
    cd pipeline/catalog-worker && wrangler deploy
    @echo "All services deployed"

# Run TypeScript unit tests
test-ts:
    bunx vitest run --exclude="**/integration/**" --exclude="**/e2e/**"

# Run TypeScript integration tests
test-integration:
    bunx vitest run tests/integration

# Run E2E tests
test-e2e:
    bunx vitest run tests/e2e

# Run Rust tests for a specific worker
test-rust worker:
    cd pipeline/{{worker}} && cargo test

# Run all Rust tests
test-rust-all:
    cd pipeline/event-collector && cargo test
    cd pipeline/compaction-worker && cargo test
    cd pipeline/catalog-worker && cargo test

# Run all tests
test-complete: test-ts test-rust-all
    @echo "All unit tests completed"

# Run health check monitoring
test-monitoring:
    cd monitoring/health-checker && wrangler dev

# Lint TypeScript code
lint:
    bunx eslint . --ext .ts,.tsx

# Type check TypeScript code
typecheck:
    bunx tsc --noEmit

# Format code
format:
    bunx prettier --write .
