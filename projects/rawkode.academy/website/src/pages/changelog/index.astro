---
import { getCollection, getEntry } from "astro:content";
import Button from "@/components/common/Button.vue";
import PageHero from "@/components/common/PageHero.vue";
import { marked } from "marked";
import PageWrapper from "../../wrappers/page.astro";

// Configure marked for better GitLab-style rendering
marked.setOptions({
	breaks: true,
	gfm: true,
	pedantic: false,
});

// Get all changelog entries from the content collection
const changelogEntries = await getCollection("changelog");

// Helper function to fetch GitHub user data
async function fetchGitHubUser(username: string) {
	try {
		const response = await fetch(`https://api.github.com/users/${username}`);
		if (response.ok) {
			const data: { name?: string; avatar_url: string } = await response.json();
			return {
				name: data.name || username,
				avatar_url: data.avatar_url,
			};
		}
	} catch (error) {
		console.error(`Failed to fetch GitHub user data for ${username}:`, error);
	}
	// Fallback values
	return {
		name: username,
		avatar_url: `https://avatars.githubusercontent.com/${username}`,
	};
}

// Sort by date (newest first)
const sortedChangelog = changelogEntries.sort((a, b) => {
	return b.data.date.getTime() - a.data.date.getTime();
});

// Process entries to render markdown and fetch author data
const processedChangelog = await Promise.all(
	sortedChangelog.map(async (entry) => {
		const renderedContent = marked(entry.body || "");
		const authorEntry = await getEntry(entry.data.author);
		const authorData = await fetchGitHubUser(
			authorEntry?.data.handle || "unknown",
		);

		return {
			...entry.data,
			id: entry.id,
			renderedContent: String(renderedContent),
			author: authorData,
		};
	}),
);

const typeColors = {
	feature: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300",
	fix: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
	chore: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
	docs: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
	breaking:
		"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300",
};
---

<PageWrapper
	title="Changelog"
	description="Stay up to date with the latest changes and improvements to Rawkode Academy."
>
	<!-- Hero Section -->
	<PageHero
		title="Changelog"
		subtitle="Stay up to date with the latest updates, features, and improvements to Rawkode Academy."
		badge="What's New"
		stats={[
			{ label: `${changelogEntries.length} Updates` },
			{ label: 'Weekly Releases' },
			{ label: 'Open Source' }
		]}
	>
		<Fragment slot="actions">
			<Button href="#latest" variant="primary" size="lg">View Latest</Button>
			<Button href="https://github.com/RawkodeAcademy" variant="ghost" size="lg">GitHub</Button>
		</Fragment>
	</PageHero>

	<div id="latest" class="max-w-4xl mx-auto px-4 py-8">

		{
			processedChangelog.length === 0 ? (
				<div class="text-center py-12">
					<p class="text-gray-500 dark:text-gray-400">
						No changelog entries found.
					</p>
				</div>
			) : (
				<div class="space-y-8">
					{processedChangelog.map((entry) => (
						<article class="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 border border-gray-200 dark:border-gray-700">
							<div class="flex items-start justify-between mb-4">
								<div class="flex-1">
									<div class="flex items-center gap-3 mb-2">
										<span
											class={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${typeColors[entry.type as keyof typeof typeColors] || typeColors.chore}`}
										>
											{entry.type}
										</span>
									</div>
									<h2 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
										{entry.title}
									</h2>
									<div
										class="text-gray-600 dark:text-gray-300 mb-3 prose prose-sm dark:prose-invert max-w-none [&>p]:mb-4 [&>p:last-child]:mb-0 [&>ul]:list-disc [&>ul]:ml-6 [&>ul]:mb-4 [&>ol]:list-decimal [&>ol]:ml-6 [&>ol]:mb-4 [&>li]:mb-1"
										set:html={entry.renderedContent}
									/>
								</div>
							</div>

							<div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400">
								<div class="flex items-center gap-4">
									<time datetime={entry.date.toISOString()}>
										{entry.date.toLocaleDateString("en-US", {
											year: "numeric",
											month: "long",
											day: "numeric",
										})}
									</time>
									<div class="flex items-center gap-2">
										<img
											src={entry.author.avatar_url}
											alt={entry.author.name}
											class="w-5 h-5 rounded-full"
										/>
										<span>by {entry.author.name}</span>
									</div>
								</div>
							</div>
						</article>
					))}
				</div>
			)
		}
	</div>
</PageWrapper>