---
import Page from "@/wrappers/page.astro";
import VideoPlayer from "@/components/video/player.vue";
import VideoReactions from "@/components/video/reactions.vue";
import VideoContentTabs from "@/components/video/video-content-tabs.vue";
import VideoMetadata from "@/components/html/video-metadata.astro";
import { getCollection } from "astro:content";
import { Marked } from "marked";
import { gql, GraphQLClient } from "graphql-request";

export const prerender = false;

// Get the slug from URL params
const { slug } = Astro.params;

// First, try to get video from the collection (build-time data)
const videos = await getCollection("videos");
let video: typeof videos[0] | undefined = videos.find(v => v.data.slug === slug);

// If not found in collection, fetch from API directly
if (!video) {
	const graphQLClient = new GraphQLClient("https://api.rawkode.academy/graphql");
	
	const query = gql`
		query GetVideoBySlug($slug: String!) {
			video: getVideoBySlug(slug: $slug) {
				id
				slug
				title
				subtitle
				description
				publishedAt
				streamUrl
				thumbnailUrl
				duration
				technologies {
					id
					name
					logo
				}
			}
		}
	`;
	
	interface VideoResponse {
		video: {
			id: string;
			slug: string;
			title: string;
			subtitle?: string;
			description: string;
			publishedAt: string;
			streamUrl: string;
			thumbnailUrl: string;
			duration: number;
			technologies: Array<{
				id: string;
				name: string;
				logo: string;
			}>;
		};
	}
	
	try {
		const response = await graphQLClient.request<VideoResponse>(query, { slug });
		if (response.video) {
			// Transform to match the collection format
			video = {
				id: response.video.slug,
				collection: 'videos' as const,
				data: response.video
			};
		}
	} catch (error) {
		console.error('Failed to fetch video from API:', error);
	}
}

// Handle 404 case
if (!video) {
	return Astro.redirect("/404");
}

// Set cache headers for ISR
// Individual video pages can cache longer since they change less frequently
// Client cache: 10 minutes, Edge cache: 2 hours, Serve stale for 48 hours
Astro.response.headers.set('Cache-Control', 'public, max-age=600, s-maxage=7200, stale-while-revalidate=172800');
Astro.response.headers.set('CDN-Cache-Control', 'public, max-age=7200');

// Add cache tags for targeted invalidation
// Use video-specific tag to purge individual videos
Astro.response.headers.set('Cache-Tag', `video-${video.data.slug}, videos-page, video-detail`);

// Add build timestamp for debugging
Astro.response.headers.set('X-Build-Time', new Date().toISOString());

// Configure Marked to handle single newlines as breaks
const marked = new Marked({ 
	breaks: true, 
	gfm: true
});
// Convert literal \n escape sequences to actual newlines before processing
const processedDescription = video.data.description.replace(/\\n/g, '\n');
const renderedDescriptionHtml = marked.parse(processedDescription);

// Format date to readable format
const formatDate = (dateString: string) => {
	const date = new Date(dateString);
	return date.toLocaleDateString('en-US', {
		year: 'numeric',
		month: 'long',
		day: 'numeric'
	});
};
---

<Page
	title={video.data.title}
	description={video.data.description}
	useImageDirectly={true}
	image={{ image: new URL(video.data.thumbnailUrl) }}
>
	<VideoMetadata
		slot="extra-head"
		title={video.data.title}
		description={video.data.description}
		thumbnailUrl={video.data.thumbnailUrl}
		publishedAt={video.data.publishedAt}
		duration={video.data.duration}
		streamUrl={video.data.streamUrl}
	/>
	<div class="min-h-screen bg-gray-50 dark:bg-gray-950">
		<div class="container mx-auto px-4 py-6 lg:py-8 max-w-screen-2xl">
			{/* Hero Section with Title */}
			<div class="mb-8">
				<h1 class="text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-4 tracking-tight">{video.data.title}</h1>
				<div class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400">
					<time datetime={video.data.publishedAt} class="flex items-center gap-2">
						<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
						</svg>
						{formatDate(video.data.publishedAt)}
					</time>
					<span class="text-gray-400 dark:text-gray-600">â€¢</span>
					<span>{Math.floor(video.data.duration / 60)} min watch</span>
				</div>
			</div>

			{/* Main Content - Single Column */}
			<div class="max-w-4xl mx-auto">
				{/* Video Player */}
				<div class="relative w-full aspect-video rounded-xl overflow-hidden bg-black shadow-2xl">
					<VideoPlayer
						client:only="vue"
						video={video.data.id}
						thumbnailUrl={video.data.thumbnailUrl}
					/>
				</div>
				
				{/* Video Controls & Social Features */}
				<div class="mt-4">
					<VideoReactions client:load videoId={video.data.id} />
				</div>

				{/* Tabbed Content: Description & Transcript */}
				<div class="mt-6">
					<VideoContentTabs
						client:load
						descriptionHtml={renderedDescriptionHtml}
						videoId={video.data.id}
					/>
				</div>
				
				{/* Technologies Section */}
				{
					video.data.technologies && video.data.technologies.length > 0 && (
						<div class="mt-6">
							<h3 class="text-base font-medium text-gray-700 dark:text-gray-300 mb-3">Technologies used in this video</h3>
							<div class="flex flex-wrap gap-2">
								{video.data.technologies.map((technology) => (
									<a
										Astro.key={technology.name}
										href={`/technology/${technology.id}`}
										class="inline-flex items-center gap-2 px-3 py-2 bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition-all duration-200 group"
									>
										<div class="w-6 h-6 relative overflow-hidden rounded">
											<img
												src={technology.logo}
												alt={technology.name}
												class="w-full h-full object-contain"
											/>
										</div>
										<span class="text-sm font-medium text-gray-700 dark:text-gray-300 group-hover:text-gray-900 dark:group-hover:text-white">
											{technology.name}
										</span>
										<svg class="w-4 h-4 text-gray-400 group-hover:text-gray-600 dark:group-hover:text-gray-200 transition-colors" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
										</svg>
									</a>
								))}
							</div>
						</div>
					)
				}
				
			</div>
			</div>
		</div>
	</div>
</Page>

<style>
	/* Professional typography for prose content */
	.prose {
		line-height: 1.75;
		color: rgb(55 65 81);
	}
	
	.dark .prose {
		color: rgb(209 213 219);
	}
	
	.prose :global(p) {
		margin-bottom: 1.5rem;
	}
	
	/* Clean, professional link styles */
	.prose :global(a) {
		color: rgb(59 130 246);
		text-decoration: underline;
		text-underline-offset: 2px;
		text-decoration-thickness: 1px;
		transition: all 0.2s ease;
	}

	.prose :global(a:hover) {
		color: rgb(37 99 235);
		text-decoration-thickness: 2px;
	}

	.dark .prose :global(a) {
		color: rgb(96 165 250);
	}

	.dark .prose :global(a:hover) {
		color: rgb(147 197 253);
	}
</style>