---
import Page from "@/wrappers/page.astro";
import VideoPlayer from "@/components/video/player.vue";
import VideoMetadata from "@/components/html/video-metadata.astro";
import type { GetStaticPaths } from "astro";
import { getCollection } from "astro:content";
import { Marked } from "marked";

export const prerender = true;

// Define the video data type explicitly
interface VideoData {
	id: string;
	slug: string;
	title: string;
	subtitle?: string;
	description: string;
	streamUrl: string;
	publishedAt: string;
	thumbnailUrl: string;
	duration: number;
	technologies: TechnologyData[];
}
interface TechnologyData {
	id: string;
	name: string;
	logo: string;
}

export const getStaticPaths = (async () => {
	try {
		const videos = await getCollection("videos");

		return videos.map((video: any) => ({
			params: { slug: video.data.slug },
			props: { video },
		}));
	} catch (error) {
		console.error("Error fetching videos:", error);
		return [];
	}
}) satisfies GetStaticPaths;

const { video } = Astro.props as { video: { data: VideoData } };

// Setting breaks to true doesn't handle multiple sequentiaal \n's
const marked = new Marked({ breaks: false, gfm: true });
const renderedDescription = marked.parse(
	video.data.description.replaceAll("\n", "</br>")
);
---

<Page
	title={video.data.title}
	description={video.data.description}
	useImageDirectly={true}
	image={{ image: new URL(video.data.thumbnailUrl) }}
>
	<VideoMetadata
		slot="extra-head"
		title={video.data.title}
		description={video.data.description}
		thumbnailUrl={video.data.thumbnailUrl}
		publishedAt={video.data.publishedAt}
		duration={video.data.duration}
		streamUrl={video.data.streamUrl}
	/>
	<div class="flex dark:bg-black dark:text-white min-h-screen">
		<div class="w-full lg:w-3/4 px-4 py-4">
			<div class="mt-4">
				<h1 class="text-xxl font-bold mb-2">{video.data.title}</h1>
				<div class="flex items-center text-gray-500 text-sm mb-2">
					<span class="mx-2">&bull;</span>
					<span>{video.data.publishedAt}</span>
				</div>
			</div>

			<div
				class="relative w-full aspect-video rounded-lg overflow-hidden bg-black"
			>
				<VideoPlayer
					client:only="vue"
					video={video.data.id}
					thumbnailUrl={video.data.thumbnailUrl}
				/>
			</div>

			{/* Technologies Section */}
			{
				video.data.technologies && video.data.technologies.length > 0 && (
					<div class="mt-4">
						<h3 class="font-semibold text-gray-900 dark:text-white mb-2">
							Technologies
						</h3>
						<div class="flex flex-wrap gap-2">
							{video.data.technologies.map((technology) => (
								<a
									Astro.key={technology.name}
									href={`/technology/${technology.id}`}
									class="inline-flex items-center rounded-md bg-indigo-50 px-2.5 py-0.5 text-sm font-medium text-indigo-800 hover:bg-indigo-100 dark:bg-indigo-900 dark:text-indigo-300 dark:hover:bg-indigo-700"
								>
									<img
										src={technology.logo}
										alt={technology.name}
										class="h-4 w-4 mr-1 rounded-full"
									/>
									{technology.name}
								</a>
							))}
						</div>
					</div>
				)
			}

			<!-- Video Description -->
			<div class="mt-4 bg-gray-100 dark:bg-gray-800 p-4 rounded-lg text-sm">
				<p class="prose">
					<p class="prose"><p set:html={renderedDescription} /></p>
					<hr class="my-6" />
				</p>
			</div>

			<hr class="my-6" />
		</div>
	</div>
</Page>
