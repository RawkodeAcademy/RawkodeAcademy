---
export const prerender = false;

import VideoMetadata from "@/components/html/video-metadata.astro";
import Page from "@/wrappers/page.astro";
import { GRAPHQL_ENDPOINT } from "astro:env/server";

// Set cache headers for ISR
// Client cache: 5 minutes, Edge cache: 1 hour, Serve stale content for 24 hours during revalidation
Astro.response.headers.set(
	"Cache-Control",
	"public, max-age=300, s-maxage=3600, stale-while-revalidate=86400",
);
Astro.response.headers.set("CDN-Cache-Control", "public, max-age=3600");

// Add cache tags for targeted invalidation
Astro.response.headers.set("Cache-Tag", "videos-latest");

// Add build timestamp for debugging
Astro.response.headers.set("X-Build-Time", new Date().toISOString());

const query = `
  query GetLatestVideos($limit: Int!, $offset: Int!) {
    getLatestVideos(limit: $limit, offset: $offset) {
      title
      thumbnailUrl
      duration
      slug
      publishedAt
      streamUrl
    }
  }
`;

interface Video {
	title: string;
	thumbnailUrl: string;
	duration: number;
	slug: string;
	publishedAt: string;
	streamUrl: string;
}

// Fetch all videos in batches of 100 to avoid SQL variable limits
const batchSize = 100;
const allVideos: Video[] = [];
let offset = 0;
let hasMoreVideos = true;

while (hasMoreVideos && GRAPHQL_ENDPOINT) {
	try {
		const response = await fetch(GRAPHQL_ENDPOINT, {
			method: "POST",
			headers: {
				"Content-Type": "application/json",
			},
			body: JSON.stringify({
				query,
				variables: { limit: batchSize, offset },
			}),
		});

		if (!response.ok) {
			console.error(`Failed to fetch videos batch at offset ${offset}:`, response.status);
			break;
		}

		const result = await response.json();
		const batchVideos = result.data?.getLatestVideos || [];
		
		if (batchVideos.length === 0) {
			hasMoreVideos = false;
		} else {
			allVideos.push(...batchVideos);
			offset += batchSize;
			
			// Safety check to prevent infinite loops
			if (offset > 10000) {
				console.warn('Reached maximum offset limit of 10000 videos');
				break;
			}
		}
	} catch (error) {
		console.error(`Error fetching videos batch at offset ${offset}:`, error);
		break;
	}
}

function formatDuration(seconds: number) {
	const hours = Math.floor(seconds / 3600);
	const minutes = Math.floor((seconds % 3600) / 60);
	const remainingSeconds = Math.floor(seconds % 60);

	if (hours > 0) {
		return `${hours}:${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
	}
	return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
}

function formatDate(dateString: string) {
	return new Date(dateString).toLocaleDateString("en-US", {
		year: "numeric",
		month: "short",
		day: "numeric",
	});
}
---

<Page title="All Videos">
  <VideoMetadata
    slot="extra-head"
    title="Rawkode Academy Videos"
    description="Browse our full collection of videos."
    isVideoList={true}
  />

  <section class="py-12">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <div class="text-center">
        <h2 class="text-3xl font-extrabold text-gray-900 dark:text-white sm:text-4xl">All Videos</h2>
        <p class="mt-4 text-lg text-gray-500 dark:text-gray-400">
          Explore every video we've published ({allVideos.length} videos)
        </p>
      </div>
      <div class="mt-12 grid gap-8 md:grid-cols-2 lg:grid-cols-4">
        {allVideos.map((video: Video) => (
          <a href={`/watch/${video.slug}`} class="group">
            <div class="relative aspect-video">
              <img
                src={video.thumbnailUrl}
                alt={video.title}
                class="w-full h-full object-cover rounded-lg shadow-md transition-transform group-hover:scale-105"
                loading="lazy"
              />
              <div class="absolute bottom-2 right-2 bg-black bg-opacity-75 text-white px-2 py-1 rounded text-sm">
                {formatDuration(video.duration)}
              </div>
            </div>
            <div class="mt-4">
              <h3 class="text-lg font-medium text-gray-900 dark:text-white group-hover:text-indigo-600 dark:group-hover:text-indigo-400 line-clamp-2">
                {video.title}
              </h3>
              <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
                {formatDate(video.publishedAt)}
              </p>
            </div>
          </a>
        ))}
      </div>
      
      {allVideos.length === 0 && (
        <div class="text-center mt-12">
          <p class="text-gray-500 dark:text-gray-400">No videos available at the moment.</p>
        </div>
      )}
    </div>
  </section>
</Page>
