---
import { getImage } from "astro:assets";
import {
	type CollectionEntry,
	getCollection,
	getEntries,
	render,
} from "astro:content";
import Breadcrumb from "@/components/breadcrumb/Breadcrumb.astro";
import CourseSignupForm from "@/components/courses/CourseSignupForm.astro";
import ResourceList from "@/components/courses/ResourceList.vue";
import VideoPlayer from "@/components/video/player.vue";
import Page from "@/wrappers/page.astro";
import type { GetStaticPaths, GetStaticPathsResult } from "astro";

export const prerender = true;

type Props = {
	module: CollectionEntry<"courseModules">;
	course: CollectionEntry<"courses">;
};

const computeImageUrl = async (
	module: CollectionEntry<"courseModules">,
): Promise<URL | undefined> => {
	if (module.data.cover) {
		const image = await getImage({ src: module.data.cover.image });

		return new URL(image.src, Astro.site);
	}

	return undefined;
};

export const getStaticPaths: GetStaticPaths =
	async (): Promise<GetStaticPathsResult> => {
		const courseModules = await getCollection("courseModules");
		const courses = await getCollection("courses");

		// Only generate pages for published modules
		const publishedModules = courseModules.filter(
			(module) => !module.data.isDraft,
		);

		return publishedModules.map((module: CollectionEntry<"courseModules">) => {
			const course = courses.find((c) => c.id === module.data.course.id);

			return {
				params: {
					course: module.data.course.id,
					slug: module.id,
				},
				props: {
					module,
					course,
				},
			};
		});
	};

const { module, course } = Astro.props;

// Prevent viewing draft modules
if (module.data.isDraft) {
	return Astro.redirect("/404");
}

const { Content } = await render(module);
const authors = await getEntries(module.data.authors);

// Process resources to load WebContainer files
import { loadWebContainerFiles } from '@/utils/webcontainer-loader';
import { join } from 'node:path';

// Define the Resource type to match ResourceList component expectations
type Resource = {
  title: string;
  description?: string;
  type: "url" | "file" | "embed";
  url?: string;
  filePath?: string;
  embedConfig?: {
    container: "stackblitz" | "codesandbox" | "codepen" | "iframe" | "webcontainer";
    src: string;
    height?: string;
    width?: string;
    startCommand?: string;
    files?: Record<string, string>;
  };
  category: "slides" | "code" | "documentation" | "demos" | "other";
};

// Helper function to ensure proper resource shape
function createResource(resource: any): Resource {
  const result: Resource = {
    title: resource.title,
    type: resource.type,
    category: resource.category || "other"
  };
  
  // Only add optional properties if they exist
  if (resource.description) result.description = resource.description;
  if (resource.url) result.url = resource.url;
  if (resource.filePath) result.filePath = resource.filePath;
  if (resource.embedConfig) result.embedConfig = resource.embedConfig;
  
  return result;
}

// Process both course and module resources
const allResources = [
	...(course.data.resources || []),
	...(module.data.resources || [])
];

const processedResources: Resource[] = await Promise.all(
	allResources.map(async (resource): Promise<Resource> => {
		if (resource.type === 'embed' && resource.embedConfig?.container === 'webcontainer' && resource.embedConfig.import?.localDir) {
			// Use the course reference ID from the module data
			const courseName = module.data.course.id;
			const importPath = join(process.cwd(), 'content', 'courses', courseName, resource.embedConfig.import.localDir.replace('./', ''));
			
			try {
				const importedFiles = await loadWebContainerFiles(importPath);
				return createResource({
					...resource,
					embedConfig: {
						...resource.embedConfig,
						files: { ...importedFiles, ...(resource.embedConfig.files || {}) }
					}
				});
			} catch (error) {
				console.error(`Failed to load files for ${resource.title}:`, error);
				return createResource(resource);
			}
		}
		return createResource(resource);
	})
);

const imageUrl = await computeImageUrl(module);

const breadcrumbElements = [
	{ title: "Home", link: "/" },
	{ title: "Courses", link: "/courses" },
	{ title: course.data.title, link: `/courses/${course.id}` },
	{
		title: module.data.title,
		link: `/courses/${course.id}/modules/${module.id}`,
	},
];

// Get all course modules for navigation
const allCourseModules = (await getCollection("courseModules"))
	.filter((m) => m.data.course.id === course.id)
	.filter((m) => !m.data.isDraft)
	.sort((a, b) => a.data.order - b.data.order);

const currentIndex = allCourseModules.findIndex((m) => m.id === module.id);
const previousModule =
	currentIndex > 0 ? allCourseModules[currentIndex - 1] : null;
const nextModule =
	currentIndex < allCourseModules.length - 1
		? allCourseModules[currentIndex + 1]
		: null;
---

<Page
	title={`${module.data.title} | ${course.data.title}`}
	description={module.data.description}
	image={imageUrl
		? {
				image: imageUrl,
				text: module.data.title,
				format: "png" as const,
			}
		: undefined}
	publishedAt={module.data.publishedAt}
	updatedAt={module.data.updatedAt}
	authors={authors}
>
	<div class="bg-white dark:bg-gray-900">
		<!-- Breadcrumb Section -->
		<div
			class="py-4 px-4 mx-auto max-w-screen-xl border-b border-gray-100 dark:border-gray-800"
		>
			<Breadcrumb elements={breadcrumbElements} />
		</div>

		<!-- Module Header -->
		<div
			class="bg-gradient-to-br from-gray-50 via-white to-gray-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900"
		>
			<div class="py-8 px-4 mx-auto max-w-screen-xl">
				<div class="max-w-5xl mx-auto">
					<!-- Module Meta -->
					<div class="flex flex-wrap items-center justify-between gap-4 mb-8">
						<div class="flex flex-wrap items-center gap-4">
							<span
								class="text-sm text-blue-700 dark:text-blue-300 bg-blue-100 dark:bg-blue-900/50 px-4 py-2 rounded-full"
							>
								{module.data.section && `${module.data.section} â€¢ `}Module {
									module.data.order
								}
							</span>
							<span
								class="text-sm text-gray-500 dark:text-gray-400 bg-gray-100 dark:bg-gray-800 px-4 py-2 rounded-full"
							>
								Published {
									new Intl.DateTimeFormat("en-US", {
										year: "numeric",
										month: "long",
										day: "numeric",
									}).format(module.data.publishedAt)
								}
							</span>
						</div>

						<!-- Author -->
						<div class="flex items-center gap-3">
							<span class="text-sm text-gray-500 dark:text-gray-400"
								>Author:</span
							>
							<div class="flex items-center gap-3">
								{
									authors.map((author) => (
										<div class="flex items-center gap-2">
											<img
												class="w-8 h-8 rounded-full object-cover border-2 border-purple-200 dark:border-purple-700"
												src={`https://github.com/${author.data.handle}.png`}
												alt={`Profile picture of ${author.data.name}`}
											/>
											<div class="text-sm">
												<div class="font-medium text-gray-900 dark:text-white">
													{author.data.name}
												</div>
												<div class="text-xs text-gray-500 dark:text-gray-400">
													@{author.data.handle}
												</div>
											</div>
										</div>
									))
								}
							</div>
						</div>
					</div>

					<!-- Title and Description -->
					<div>
						<h1
							class="text-4xl lg:text-6xl font-bold tracking-tight text-gray-900 dark:text-white mb-6 leading-tight"
						>
							{module.data.title}
						</h1>

						<p
							class="text-xl lg:text-2xl text-gray-600 dark:text-gray-300 leading-relaxed max-w-4xl"
						>
							{module.data.description}
						</p>
					</div>
				</div>
			</div>
		</div>

		<!-- Video Section -->
		{module.data.video && (
			<div class="py-12 px-4 mx-auto max-w-screen-xl">
				<div class="max-w-5xl mx-auto">
					<div class="relative w-full aspect-video rounded-xl overflow-hidden bg-black shadow-2xl">
						<VideoPlayer
							client:only="vue"
							video={module.data.video.id}
							thumbnailUrl={module.data.video.thumbnailUrl || `https://content.rawkode.academy/videos/${module.data.video.id}/thumbnail.jpg`}
						/>
					</div>
				</div>
			</div>
		)}

		<!-- Main Content and Resources -->
		<div class="py-8 px-4 mx-auto max-w-screen-xl">
			<div class="max-w-7xl mx-auto">
				{processedResources && processedResources.length > 0 ? (
					<!-- Layout with sidebar for resources -->
					<div class="lg:grid lg:grid-cols-12 lg:gap-8">
						<!-- Main Content -->
						<div class="lg:col-span-8">
							<article
								class="format prose lg:prose-xl dark:format-invert max-w-none mb-16"
							>
								<Content />
							</article>
						</div>

						<!-- Resources Sidebar -->
						<aside class="lg:col-span-4">
							<div class="sticky top-24">
								<ResourceList resources={processedResources} client:load />
							</div>
						</aside>
					</div>
				) : (
					<!-- Full width content when no resources -->
					<article
						class="format prose lg:prose-xl dark:format-invert max-w-none mb-16 mx-auto"
					>
						<Content />
					</article>
				)}

			<!-- Sign up for updates -->
			{course.data.signupConfig && (
				<CourseSignupForm 
					courseId={course.id}
					courseTitle={course.data.title}
					signupConfig={course.data.signupConfig}
					server:defer 
				/>
			)}

			<!-- Navigation -->
			<div
				class="flex items-center justify-between pt-8 border-t border-gray-200 dark:border-gray-700"
			>
				<div class="flex-1">
					{
						previousModule && (
							<a
								href={`/courses/${course.id}/modules/${previousModule.id}`}
								class="inline-flex items-center text-sm font-medium text-primary hover:text-primary/80 transition-colors"
							>
								<svg
									class="w-4 h-4 mr-2"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M15 19l-7-7 7-7"
									/>
								</svg>
								<div class="text-left">
									<div class="text-xs text-gray-500 dark:text-gray-400">
										Previous
									</div>
									<div>{previousModule.data.title}</div>
								</div>
							</a>
						)
					}
				</div>

				<div class="flex-1 text-center">
					<a
						href={`/courses/${course.id}`}
						class="inline-flex items-center text-sm font-medium text-gray-600 dark:text-gray-400 hover:text-primary transition-colors"
					>
						<svg
							class="w-4 h-4 mr-2"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 11H5m14 0l-4-4m4 4l-4 4"></path>
						</svg>
						Back to Course
					</a>
				</div>

				<div class="flex-1 text-right">
					{
						nextModule && (
							<a
								href={`/courses/${course.id}/modules/${nextModule.id}`}
								class="inline-flex items-center text-sm font-medium text-primary hover:text-primary/80 transition-colors"
							>
								<div class="text-right">
									<div class="text-xs text-gray-500 dark:text-gray-400">
										Next
									</div>
									<div>{nextModule.data.title}</div>
								</div>
								<svg
									class="w-4 h-4 ml-2"
									fill="none"
									stroke="currentColor"
									viewBox="0 0 24 24"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M9 5l7 7-7 7"
									/>
								</svg>
							</a>
						)
					}
				</div>
			</div>
		</div>
	</div>
</Page>
