---
export const prerender = false;

import { GRAPHQL_ENDPOINT } from "astro:env/server";
import { ClientError, request } from "graphql-request";
import ShowCard from "@/components/show/ShowCard.astro";
import Page from "@/wrappers/page.astro";
import type { ShowSummary } from "@/types/show";

interface AllShowsResponse {
        allShows?: (ShowSummary | null)[] | null;
}

const showsQuery = /* GraphQL */ `
        query AllShows {
                allShows {
                        id
                        name
                        hosts {
                                forename
                                surname
                        }
                        episodes {
                                video {
                                        title
                                        thumbnailUrl
                                        publishedAt
                                }
                        }
                }
        }
`;

Astro.response.headers.set(
        "Cache-Control",
        "public, max-age=300, s-maxage=3600, stale-while-revalidate=86400",
);
Astro.response.headers.set("CDN-Cache-Control", "public, max-age=3600");
Astro.response.headers.set("Cache-Tag", "shows-page, shows-list");
Astro.response.headers.set("X-Build-Time", new Date().toISOString());

let shows: ShowSummary[] | null = null;
let errorMessage: string | null = null;

if (!GRAPHQL_ENDPOINT) {
        errorMessage = "GraphQL endpoint is not configured.";
} else {
        try {
                const data = await request<AllShowsResponse>(GRAPHQL_ENDPOINT, showsQuery);
                shows = (data.allShows ?? []).filter((show): show is ShowSummary => Boolean(show?.id && show?.name));
        } catch (error) {
                console.error("Failed to fetch shows for /shows:", error);

                if (error instanceof ClientError && error.response.errors?.[0]?.message) {
                        errorMessage = error.response.errors[0].message;
                } else if (error instanceof Error) {
                        errorMessage = error.message;
                } else if (typeof error === "string") {
                        errorMessage = error;
                } else {
                        errorMessage = "Unable to load shows.";
                }
        }
}

const hasShows = Array.isArray(shows) && shows.length > 0;
const isEmpty = Array.isArray(shows) && shows.length === 0;
const isLoading = !errorMessage && shows === null;
const placeholderTiles = Array.from({ length: 6 }, (_, index) => index);
const showsToRender: ShowSummary[] = hasShows && shows ? shows : [];
---

<Page title="Shows">
        <section class="relative overflow-hidden py-16 sm:py-20">
                <!-- Background gradient -->
                <div class="absolute inset-0 bg-gradient-to-b from-primary/5 via-transparent to-transparent dark:from-primary/10" aria-hidden="true"></div>

                <div class="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                        <!-- Header -->
                        <div class="mb-12 text-center">
                                <div class="mb-4 inline-flex items-center justify-center rounded-full bg-primary/10 px-4 py-2 dark:bg-primary/20">
                                        <svg
                                                class="mr-2 h-5 w-5 text-primary dark:text-primary-300"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                                aria-hidden="true"
                                        >
                                                <path
                                                        stroke-linecap="round"
                                                        stroke-linejoin="round"
                                                        stroke-width="2"
                                                        d="M6 20.25h12m-7.5-3v3m3-3v3m-10.125-3h17.25c.621 0 1.125-.504 1.125-1.125V4.875c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125z"
                                                />
                                        </svg>
                                        <span class="text-sm font-semibold text-primary dark:text-primary-300">Original Series</span>
                                </div>
                                <h1 class="text-4xl font-extrabold tracking-tight text-gray-900 dark:text-white sm:text-5xl lg:text-6xl">
                                        Shows
                                </h1>
                                <p class="mx-auto mt-6 max-w-2xl text-lg leading-relaxed text-gray-600 dark:text-gray-300">
                                        Discover our collection of shows, each bringing you in-depth content and expert insights from passionate hosts.
                                </p>
                        </div>

                        <!-- Content -->
                        <div class="mt-16">
                                {isLoading && (
                                        <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
                                                {placeholderTiles.map((placeholder) => (
                                                        <div
                                                                data-placeholder-index={placeholder}
                                                                class="aspect-[4/3] animate-pulse rounded-xl border border-gray-200 bg-gray-100 dark:border-gray-800 dark:bg-gray-800"
                                                                aria-hidden="true"
                                                        />
                                                ))}
                                        </div>
                                )}

                                {errorMessage && (
                                        <div class="mx-auto max-w-2xl rounded-2xl border-2 border-red-200 bg-red-50 p-8 text-center shadow-sm dark:border-red-900/60 dark:bg-red-900/30">
                                                <svg
                                                        class="mx-auto h-12 w-12 text-red-400 dark:text-red-500"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                        stroke="currentColor"
                                                        aria-hidden="true"
                                                >
                                                        <path
                                                                stroke-linecap="round"
                                                                stroke-linejoin="round"
                                                                stroke-width="2"
                                                                d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
                                                        />
                                                </svg>
                                                <p class="mt-4 text-base font-semibold text-red-700 dark:text-red-300">
                                                        We couldn&apos;t load the shows right now
                                                </p>
                                                <p class="mt-2 text-sm text-red-600 dark:text-red-200">
                                                        {errorMessage}
                                                </p>
                                        </div>
                                )}

                                {isEmpty && (
                                        <div class="mx-auto max-w-2xl rounded-2xl border border-gray-200 bg-gradient-to-br from-gray-50 to-white p-12 text-center shadow-sm dark:border-gray-800 dark:from-gray-900/40 dark:to-gray-900/20">
                                                <svg
                                                        class="mx-auto h-16 w-16 text-gray-300 dark:text-gray-600"
                                                        fill="none"
                                                        viewBox="0 0 24 24"
                                                        stroke="currentColor"
                                                        aria-hidden="true"
                                                >
                                                        <path
                                                                stroke-linecap="round"
                                                                stroke-linejoin="round"
                                                                stroke-width="1.5"
                                                                d="M6 20.25h12m-7.5-3v3m3-3v3m-10.125-3h17.25c.621 0 1.125-.504 1.125-1.125V4.875c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v11.25c0 .621.504 1.125 1.125 1.125z"
                                                        />
                                                </svg>
                                                <p class="mt-4 text-lg font-medium text-gray-700 dark:text-gray-300">
                                                        No shows available yet
                                                </p>
                                                <p class="mt-2 text-sm text-gray-500 dark:text-gray-400">
                                                        We're working on bringing you exciting new content. Check back soon!
                                                </p>
                                        </div>
                                )}

                                {hasShows && (
                                        <div class="grid gap-8 sm:grid-cols-2 lg:grid-cols-3">
                                                {showsToRender.map((show) => (
                                                        <ShowCard show={show} />
                                                ))}
                                        </div>
                                )}
                        </div>
                </div>
        </section>
</Page>
