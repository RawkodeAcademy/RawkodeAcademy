---
import { getImage } from "astro:assets";
import { getEntry } from "astro:content";
import {
	type CollectionEntry,
	getCollection,
	getEntries,
	render,
} from "astro:content";
import TableOfContents from "@/components/articles/TableOfContents.astro";
import Updates from "@/components/articles/Updates.astro";
import SeriesLink from "@/components/series/SeriesLink.astro";
import Page from "@/wrappers/page.astro";
import type { GetStaticPaths, GetStaticPathsResult } from "astro";

export const prerender = true;

type Props = {
	article: CollectionEntry<"articles">;
};

const computeImageUrl = async (
	article: CollectionEntry<"articles">,
): Promise<URL | undefined> => {
	if (article.data.cover) {
		const image = await getImage({ src: article.data.cover.image });

		return new URL(image.src, Astro.site);
	}

	return undefined;
};

export const getStaticPaths: GetStaticPaths =
	async (): Promise<GetStaticPathsResult> => {
		const articles = await getCollection("articles");

		return articles.map((article: CollectionEntry<"articles">) => {
			return {
				params: {
					slug: article.id,
				},
				props: {
					article,
				},
			};
		});
	};

const { article } = Astro.props;
const { Content, headings } = await render(article);
const authors = await getEntries(article.data.authors);
const maybeSeries =
	article.data.series && (await getEntry("series", article.data.series.id));

const imageUrl = await computeImageUrl(article);
---

<Page
	title={`${article.data.openGraph.title}`}
	subtitle={article.data.openGraph.subtitle}
	description={article.data.description}
	image={imageUrl ? {
		image: imageUrl,
		text: article.data.title,
		format: "png" as const
	} : undefined}
	isArticle={true}
	publishedAt={article.data.publishedAt}
	updatedAt={article.data.updatedAt}
	authors={authors}
>
	<h1 class="text-5xl font-extrabold dark:text-white">
		{article.data.title}
	</h1>

	<div class="relative max-w-full overflow-x-hidden">
		<article class="format prose dark:format-invert w-full max-w-full">
			<!-- TOC for all screen sizes -->
			<div class="hidden md:block">
				<TableOfContents
					headings={headings}
					class="fixed top-24 right-4 h-[calc(80vh-6rem)] w-8 hover:w-48 transition-all duration-300 ease-in-out overflow-hidden z-10"
				/>
			</div>
			<header class="mb-8 lg:mb-10 not-format">
				<!-- Author and metadata card with glass morphism effect -->
				<div
					class="relative backdrop-blur-sm bg-white/30 dark:bg-gray-800/30 rounded-xl p-6 border border-gray-200 dark:border-gray-700 shadow-lg"
				>
					<div class="flex flex-col md:flex-row md:items-start gap-6">
						<!-- Author section -->
						<div class="flex flex-col">
							<div class="flex flex-wrap gap-2 mb-2">
								{authors.length > 0 && (
									<div class="flex -space-x-4">
										{authors.slice(0, 4).map((author, index) => (
											<div class="relative" style={`z-index: ${10 - index}`}>
												<img
													class="w-16 h-16 min-w-16 rounded-full object-cover border-2 border-purple-500 bg-white"
													src={`https://github.com/${author.data.handle}.png`}
													alt={`Profile picture of ${author.data.name}`}
												/>
												{index === 0 && (
													<span class="absolute bottom-0 right-0 h-4 w-4 bg-green-400 rounded-full border-2 border-white dark:border-gray-800"></span>
												)}
											</div>
										))}
										{authors.length > 4 && (
											<div class="relative z-0">
												<div class="w-16 h-16 rounded-full bg-purple-100 border-2 border-purple-500 bg-white flex items-center justify-center text-sm text-purple-800 font-medium">
													+{authors.length - 4}
												</div>
											</div>
										)}
									</div>
								)}
							</div>
							<div class="flex flex-wrap gap-2 mt-2">
								{authors.map((author) => (
									<div class="inline-flex items-center bg-purple-50 dark:bg-gray-700 rounded-full px-3 py-1">
										<a
											href={`https://github.com/${author.data.handle}`}
											target="_blank"
											rel="author noopener noreferrer"
											class="text-sm font-medium text-purple-700 dark:text-purple-300 hover:text-purple-900 dark:hover:text-purple-100 transition-colors"
										>
											{author.data.name}
										</a>
										<span class="mx-1 text-purple-400 dark:text-purple-500">â€¢</span>
										<span class="text-xs text-purple-500 dark:text-purple-400">@{author.data.handle}</span>
									</div>
								))}
							</div>
						</div>

						<!-- Divider for mobile -->
						<div
							class="md:hidden w-full h-px bg-gray-200 dark:bg-gray-700 my-2"
						>
						</div>

						<!-- Vertical divider for desktop -->
						<div class="hidden md:block h-auto w-px bg-gray-200 dark:bg-gray-700">
						</div>

						<!-- Metadata section -->
						<div class="flex flex-col gap-2 md:ml-4">
							<!-- Published date with icon -->
							<div class="flex items-center">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="h-5 w-5 text-purple-500"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
									></path>
								</svg>
								<span class="ml-2 text-sm text-gray-600 dark:text-gray-300">
									Published: <time
										itemprop="datePublished"
										datetime={article.data.publishedAt.toString()}
									>
										{
											new Intl.DateTimeFormat("en-US", {
												year: "numeric",
												month: "long",
												day: "numeric",
											}).format(article.data.publishedAt)
										}
									</time>
								</span>
							</div>

							<!-- Updated date with icon (if available) -->
							{
								article.data.updatedAt && (
									<div class="flex items-center">
										<svg
											xmlns="http://www.w3.org/2000/svg"
											class="h-5 w-5 text-green-500"
											fill="none"
											viewBox="0 0 24 24"
											stroke="currentColor"
										>
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2"
												d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
											/>
										</svg>
										<span class="ml-2 text-sm text-gray-600 dark:text-gray-300">
											Updated:{" "}
											<time
												itemprop="dateUpdated"
												datetime={article.data.updatedAt.toString()}
											>
												{new Intl.DateTimeFormat("en-US", {
													year: "numeric",
													month: "long",
													day: "numeric",
												}).format(article.data.updatedAt)}
											</time>
										</span>
									</div>
								)
							}

							<!-- Estimated reading time -->
							<div class="flex items-center">
								<svg
									xmlns="http://www.w3.org/2000/svg"
									class="h-5 w-5 text-blue-500"
									fill="none"
									viewBox="0 0 24 24"
									stroke="currentColor"
								>
									<path
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
								<span class="ml-2 text-sm text-gray-600 dark:text-gray-300">
									{Math.ceil((article.body?.length || 0) / 1000) || 1} min read
								</span>
							</div>
						</div>
					</div>

					<!-- Series link if available -->
					{
						maybeSeries && (
							<div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
								<SeriesLink series={maybeSeries} />
							</div>
						)
					}
				</div>
			</header>

			<Updates updates={article.data.updates} />

			<Content />
		</article>
	</div>
</Page>

<style>
	/* Base article styles */
	article {
		width: 100%;
		box-sizing: border-box;
		padding-right: 0;
		margin-bottom: 12rem;
	}

	/* Medium screens - add padding for TOC and constrain width */
	@media (min-width: 768px) and (max-width: 1023px) {
		article {
			padding-right: 3.5rem;
			max-width: calc(100vw - 64px); /* Account for sidebar and some padding */
		}

		div.relative {
			max-width: 100%;
			overflow-x: hidden;
		}
	}

	/* Large screens */
	@media (min-width: 1024px) {
		article {
			padding-right: 5rem;
		}
	}

	/* Ensure content elements don't overflow */
	:global(.prose pre),
	:global(.prose code),
	:global(.prose table),
	:global(.prose img),
	:global(.prose iframe) {
		max-width: 100%;
		overflow-x: auto;
	}

	/* Medium screen specific content adjustments */
	@media (min-width: 768px) and (max-width: 1023px) {
		:global(.prose img),
		:global(.prose pre),
		:global(.prose table) {
			max-width: calc(100% - 3.5rem);
		}
	}

	/* Ensure long words break properly */
	:global(.prose p),
	:global(.prose li),
	:global(.prose h1),
	:global(.prose h2),
	:global(.prose h3),
	:global(.prose h4),
	:global(.prose h5),
	:global(.prose h6) {
		overflow-wrap: break-word;
		word-wrap: break-word;
		word-break: break-word;
		hyphens: auto;
	}

	/* Fix for code blocks */
	:global(.prose pre) {
		white-space: pre-wrap;
	}
</style>