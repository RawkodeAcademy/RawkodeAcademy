---
import { getImage } from "astro:assets";
import { getEntry } from "astro:content";
import {
	type CollectionEntry,
	getCollection,
	getEntries,
	render,
} from "astro:content";
import RelatedArticles from "@/components/articles/RelatedArticles.astro";
import TableOfContents from "@/components/articles/TableOfContents.astro";
import Updates from "@/components/articles/Updates.astro";
import Breadcrumb from "@/components/breadcrumb/Breadcrumb.astro";
import SeriesLink from "@/components/series/SeriesLink.astro";
import Page from "@/wrappers/page.astro";
import type { GetStaticPaths, GetStaticPathsResult } from "astro";
import { calculateReadingTime } from "@/utils/reading-time";

export const prerender = true;

type Props = {
	article: CollectionEntry<"articles">;
};

const computeImageUrl = async (
	article: CollectionEntry<"articles">,
): Promise<URL | undefined> => {
	if (article.data.cover) {
		const image = await getImage({ src: article.data.cover.image });

		return new URL(image.src, Astro.site);
	}

	return undefined;
};

export const getStaticPaths: GetStaticPaths =
	async (): Promise<GetStaticPathsResult> => {
		const articles = await getCollection("articles");

		return articles.map((article: CollectionEntry<"articles">) => {
			return {
				params: {
					slug: article.id,
				},
				props: {
					article,
				},
			};
		});
	};

const { article } = Astro.props;
const { Content, headings } = await render(article);
const authors = await getEntries(article.data.authors);
const maybeSeries =
	article.data.series && (await getEntry("series", article.data.series.id));

const imageUrl = await computeImageUrl(article);
const readingTime = calculateReadingTime(article.body || "");

const breadcrumbElements = [
	{ title: "Home", link: "/" },
	{ title: "Articles", link: "/read" },
	{ title: article.data.title, link: `/read/${article.id}` },
];
---

<Page
	title={`${article.data.openGraph.title}`}
	subtitle={article.data.openGraph.subtitle}
	description={article.data.description}
	image={imageUrl ? {
		image: imageUrl,
		text: article.data.title,
		format: "png" as const
	} : undefined}
	isArticle={true}
	publishedAt={article.data.publishedAt}
	updatedAt={article.data.updatedAt}
	authors={authors}
>
	<!-- Breadcrumb Section -->
	<div class="mb-6">
		<Breadcrumb elements={breadcrumbElements} />
	</div>

	<h1 class="text-3xl md:text-4xl font-extrabold dark:text-white mb-6">
		{article.data.title}
	</h1>

	<div class="relative max-w-full overflow-x-hidden">
		<article class="prose w-full max-w-full">
			<!-- TOC for all screen sizes -->
			<div class="hidden md:block">
				<TableOfContents
					headings={headings}
					class="fixed top-24 right-4 h-[calc(80vh-6rem)] w-8 hover:w-48 transition-all duration-300 ease-in-out overflow-hidden z-10"
				/>
			</div>
			<header class="mb-6">
				<!-- Author and metadata card - compact modern design -->
				<div
					class="flex flex-wrap items-center gap-4 text-sm text-gray-600 dark:text-gray-400"
				>
					<!-- Author avatars and names -->
					<div class="flex items-center gap-3">
						{authors.length > 0 && (
							<div class="flex -space-x-2">
								{authors.slice(0, 3).map((author, index) => (
									<img
										class="w-10 h-10 rounded-full object-cover border-2 border-white dark:border-gray-900 shadow-sm"
										src={`https://github.com/${author.data.handle}.png`}
										alt={`Profile picture of ${author.data.name}`}
										style={`z-index: ${3 - index}`}
									/>
								))}
								{authors.length > 3 && (
									<div class="w-10 h-10 rounded-full bg-gray-200 dark:bg-gray-700 border-2 border-white dark:border-gray-900 flex items-center justify-center text-xs font-medium text-gray-600 dark:text-gray-300">
										+{authors.length - 3}
									</div>
								)}
							</div>
						)}
						<div>
							<div class="flex flex-wrap items-center gap-2">
								{authors.map((author, index) => (
									<>
										<a
											href={`https://github.com/${author.data.handle}`}
											target="_blank"
											rel="author noopener noreferrer"
											class="font-medium text-gray-900 dark:text-white hover:text-primary transition-colors"
										>
											{author.data.name}
										</a>
										{index < authors.length - 1 && (
											index === authors.length - 2 ?
											<span class="text-gray-400 dark:text-gray-600">&</span> :
											<span class="text-gray-400 dark:text-gray-600">,</span>
										)}
									</>
								))}
							</div>
							{authors.length > 1 && (
								<div class="text-xs text-gray-500 dark:text-gray-500 mt-1">
									{authors.map(author => `@${author.data.handle}`).join(' 路 ')}
								</div>
							)}
						</div>
					</div>

					<!-- Separator -->
					<span class="text-gray-400 dark:text-gray-600">路</span>

					<!-- Metadata items -->
					<div class="flex flex-wrap items-center gap-3">
						<!-- Published date -->
						<div class="flex items-center gap-1">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-4 w-4"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
								></path>
							</svg>
							<time
								itemprop="datePublished"
								datetime={article.data.publishedAt.toString()}
							>
								{
									new Intl.DateTimeFormat("en-US", {
										year: "numeric",
										month: "short",
										day: "numeric",
									}).format(article.data.publishedAt)
								}
							</time>
						</div>

						<!-- Updated date (if available) -->
						{
							article.data.updatedAt && (
								<>
									<span class="text-gray-400 dark:text-gray-600">路</span>
									<div class="flex items-center gap-1">
										<svg
											xmlns="http://www.w3.org/2000/svg"
											class="h-4 w-4"
											fill="none"
											viewBox="0 0 24 24"
											stroke="currentColor"
										>
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2"
												d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"
											/>
										</svg>
										<span>Updated {new Intl.DateTimeFormat("en-US", {
											year: "numeric",
											month: "short",
											day: "numeric",
										}).format(article.data.updatedAt)}</span>
									</div>
								</>
							)
						}

						<!-- Reading time -->
						<span class="text-gray-400 dark:text-gray-600">路</span>
						<div class="flex items-center gap-1">
							<svg
								xmlns="http://www.w3.org/2000/svg"
								class="h-4 w-4"
								fill="none"
								viewBox="0 0 24 24"
								stroke="currentColor"
							>
								<path
									stroke-linecap="round"
									stroke-linejoin="round"
									stroke-width="2"
									d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							<span>{readingTime.text}</span>
						</div>
					</div>
				</div>

				<!-- Series link if available -->
				{
					maybeSeries && (
						<div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-700">
							<SeriesLink series={maybeSeries} />
						</div>
					)
				}
			</header>

			<Updates updates={article.data.updates} />

			<Content />

			<!-- Related Articles -->
			<RelatedArticles currentArticle={article} limit={3} />
		</article>
	</div>
</Page>

<style>
	/* Base article styles */
	article {
		width: 100%;
		box-sizing: border-box;
		padding-right: 0;
		margin-bottom: 12rem;
	}

	/* Medium screens - add padding for TOC and constrain width */
	@media (min-width: 768px) and (max-width: 1023px) {
		article {
			padding-right: 3.5rem;
			max-width: calc(100vw - 64px); /* Account for sidebar and some padding */
		}

		div.relative {
			max-width: 100%;
			overflow-x: hidden;
		}
	}

	/* Large screens */
	@media (min-width: 1024px) {
		article {
			padding-right: 5rem;
		}
	}

	/* Ensure content elements don't overflow */
	:global(.prose pre),
	:global(.prose code),
	:global(.prose table),
	:global(.prose img),
	:global(.prose iframe) {
		max-width: 100%;
		overflow-x: auto;
	}

	/* Medium screen specific content adjustments */
	@media (min-width: 768px) and (max-width: 1023px) {
		:global(.prose img),
		:global(.prose pre),
		:global(.prose table) {
			max-width: calc(100% - 3.5rem);
		}
	}

	/* Ensure long words break properly */
	:global(.prose p),
	:global(.prose li),
	:global(.prose h1),
	:global(.prose h2),
	:global(.prose h3),
	:global(.prose h4),
	:global(.prose h5),
	:global(.prose h6) {
		overflow-wrap: break-word;
		word-wrap: break-word;
		word-break: break-word;
		hyphens: auto;
	}

	/* Fix for code blocks */
	:global(.prose pre) {
		white-space: pre-wrap;
	}
</style>
