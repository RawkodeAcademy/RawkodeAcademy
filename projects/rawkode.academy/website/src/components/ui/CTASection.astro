---
interface Props {
  title: string;
  description: string;
  primaryButton?: {
    text: string;
    href: string;
    variant?: 'primary' | 'secondary';
  };
  secondaryButton?: {
    text: string;
    href: string;
    variant?: 'outline' | 'ghost';
  };
  icon?: string;
  variant?: 'default' | 'gradient' | 'dark';
  class?: string;
}

const {
  title,
  description,
  primaryButton,
  secondaryButton,
  icon,
  variant = 'default',
  class: className = '',
} = Astro.props;

const variantClasses = {
  default: 'bg-white dark:bg-gray-800',
  gradient: 'bg-gradient-to-br from-primary/5 via-transparent to-secondary/5',
  dark: 'bg-gray-900 dark:bg-black',
};

const textColorClasses = {
  default: 'text-gray-900 dark:text-white',
  gradient: 'text-gray-900 dark:text-white',
  dark: 'text-white',
};

const descriptionColorClasses = {
  default: 'text-gray-600 dark:text-gray-300',
  gradient: 'text-gray-600 dark:text-gray-300',
  dark: 'text-gray-300',
};

import Icon from './Icon.astro';
import Button from './Button.astro';
---

<section class={`section-separator ${variantClasses[variant]} ${className}`.trim()}>
  <div class="mx-auto max-w-4xl text-center py-16 px-4 lg:py-20 lg:px-6">
    {icon && (
      <div class="mb-6">
        <div class="inline-flex items-center justify-center w-16 h-16 bg-primary/10 rounded-full">
          <Icon name={icon} size="xl" class="text-primary" />
        </div>
      </div>
    )}
    
    <h2 class={`text-3xl font-bold tracking-tight lg:text-4xl mb-4 ${textColorClasses[variant]}`}>
      {title}
    </h2>
    
    <p class={`text-lg mb-8 max-w-2xl mx-auto ${descriptionColorClasses[variant]}`}>
      {description}
    </p>
    
    <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
      {primaryButton && (
        <Button
          variant={primaryButton.variant || 'primary'}
          size="lg"
          href={primaryButton.href}
        >
          {primaryButton.text}
        </Button>
      )}
      
      {secondaryButton && (
        <Button
          variant={secondaryButton.variant || 'outline'}
          size="lg"
          href={secondaryButton.href}
        >
          {secondaryButton.text}
        </Button>
      )}
    </div>
    
    <slot />
  </div>
</section>