---
interface Feature {
  icon: string;
  title: string;
  description: string;
  href?: string;
}

interface Props {
  features: Feature[];
  columns?: 2 | 3 | 4;
  iconColor?: 'primary' | 'secondary' | 'tertiary' | 'quaternary';
  variant?: 'cards' | 'minimal';
  class?: string;
}

const {
  features,
  columns = 3,
  iconColor = 'primary',
  variant = 'cards',
  class: className = '',
} = Astro.props;

const gridClasses = {
  2: 'grid md:grid-cols-2 gap-6',
  3: 'grid md:grid-cols-3 gap-6',
  4: 'grid md:grid-cols-2 lg:grid-cols-4 gap-6',
};

const iconColorClasses = {
  primary: 'bg-primary/10 text-primary',
  secondary: 'bg-secondary/10 text-secondary',
  tertiary: 'bg-tertiary/10 text-tertiary',
  quaternary: 'bg-quaternary/10 text-quaternary',
};

const variantClasses = {
  cards: 'bg-white dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700 hover:shadow-md transition-all duration-300',
  minimal: 'p-4',
};

import Icon from './Icon.astro';
---

<div class={`${gridClasses[columns]} ${className}`.trim()}>
  {features.map((feature) => {
    const FeatureContent = (
      <div class={variantClasses[variant]}>
        <div class={`${iconColorClasses[iconColor]} p-3 rounded-full mb-4 w-fit`}>
          <Icon name={feature.icon} size="lg" />
        </div>
        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">
          {feature.title}
        </h3>
        <p class="text-gray-600 dark:text-gray-300">
          {feature.description}
        </p>
      </div>
    );
    
    return feature.href ? (
      <a 
        href={feature.href}
        class="block transition-transform duration-200 hover:scale-105"
      >
        {FeatureContent}
      </a>
    ) : (
      <div>
        {FeatureContent}
      </div>
    );
  })}
</div>