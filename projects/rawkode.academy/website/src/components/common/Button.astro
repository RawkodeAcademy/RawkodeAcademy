---
type Props = {
	variant?: "primary" | "secondary" | "ghost" | "danger";
	size?: "sm" | "md" | "lg";
	href?: string;
	type?: "button" | "submit" | "reset";
	class?: string;
	disabled?: boolean;
	fullWidth?: boolean;
};

const {
	variant = "primary",
	size = "md",
	href,
	type = "button",
	class: className = "",
	disabled = false,
	fullWidth = false,
} = Astro.props;

const baseClasses = "inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-4";

const variantClasses = {
	primary: "text-white bg-blue-700 hover:bg-blue-800 focus:ring-blue-300 dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800",
	secondary: "text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 focus:ring-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700",
	ghost: "text-gray-700 hover:text-gray-900 hover:bg-gray-100 focus:ring-gray-200 dark:text-gray-300 dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-gray-700",
	danger: "text-white bg-red-600 hover:bg-red-700 focus:ring-red-300 dark:bg-red-500 dark:hover:bg-red-600 dark:focus:ring-red-800",
};

const sizeClasses = {
	sm: "text-sm px-3 py-2",
	md: "text-base px-5 py-2.5",
	lg: "text-lg px-6 py-3",
};

const disabledClasses = disabled ? "opacity-50 cursor-not-allowed" : "";
const widthClasses = fullWidth ? "w-full" : "";

const classes = [
	baseClasses,
	variantClasses[variant],
	sizeClasses[size],
	disabledClasses,
	widthClasses,
	className,
].filter(Boolean).join(" ");

const Tag = href ? "a" : "button";
const props = href ? { href, class: classes } : { type, disabled, class: classes };
---

<Tag {...props}>
	<slot name="icon-left" />
	<slot />
	<slot name="icon-right" />
</Tag>