---
import { Image } from "astro:assets";
import Button from "./Button.vue";
import { getTypeBadgeConfig } from "@/utils/article-types";

interface Props {
	type: "article" | "video";
	title: string;
	description?: string | undefined;
	thumbnailUrl: string;
	thumbnailAlt: string;
	author?: string | undefined;
	date: string;
	duration?: string | undefined;
	readTime?: string | undefined;
	href: string;
	ctaText: string;
	articleType?:
		| "tutorial"
		| "architecture"
		| "tools"
		| "practices"
		| "features"
		| "news"
		| "case-study"
		| "editorial";
}

const {
	type,
	title,
	description,
	thumbnailUrl,
	thumbnailAlt,
	author,
	date,
	duration,
	readTime,
	href,
	ctaText,
	articleType,
} = Astro.props;

const badgeConfig = articleType && getTypeBadgeConfig(articleType);

function formatDate(dateString: string): string {
	return new Date(dateString).toLocaleDateString("en-US", {
		year: "numeric",
		month: "short",
		day: "numeric",
	});
}

function formatDuration(seconds: string | undefined): string | undefined {
	if (!seconds) return undefined;
	const totalSeconds = parseInt(seconds);
	if (isNaN(totalSeconds)) return seconds; // fallback if it's already formatted

	const hours = Math.floor(totalSeconds / 3600);
	const minutes = Math.floor((totalSeconds % 3600) / 60);
	const remainingSeconds = totalSeconds % 60;

	if (hours > 0) {
		return `${hours}:${minutes.toString().padStart(2, "0")}:${remainingSeconds.toString().padStart(2, "0")}`;
	} else {
		return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
	}
}

function truncateDescription(
	text: string | undefined,
	maxLength = 150,
): string | undefined {
	if (!text) return undefined;
	if (text.length <= maxLength) return text;
	return `${text.substring(0, maxLength).trim()}...`;
}

const displayDate = formatDate(date);
const isVideo = type === "video";
const formattedDuration = formatDuration(duration);
const truncatedDescription = truncateDescription(
	description,
	isVideo ? 120 : 160,
);
---

<section class="py-8 bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
  <div class="container mx-auto px-4 md:px-6">
    <div class="max-w-4xl mx-auto space-y-6">
      
      <!-- Thumbnail -->
      <div class="relative">
        <div class="block group">
          <div class="relative aspect-video rounded-xl overflow-hidden shadow-2xl transition-all duration-300 group-hover:shadow-3xl group-hover:-translate-y-2">
            <a href={href} class="block">
              {typeof thumbnailUrl === 'string' ? (
                <img
                  src={thumbnailUrl}
                  alt={thumbnailAlt}
                  class="w-full h-full object-cover"
                />
              ) : (
                <Image
                  src={thumbnailUrl}
                  alt={thumbnailAlt}
                  class="w-full h-full object-cover"
                />
              )}
            </a>
            
            <div class="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/80 to-transparent p-6">
              <div class="flex items-center justify-between">
                <div class="flex-1">
                  <Button 
                    href={href} 
                    variant="primary" 
                    size="md" 
                    class:list={["group bg-white hover:bg-gray-100 text-gray-900 shadow-lg hover:shadow-xl transition-all duration-300"]}
                  >
                    {isVideo ? (
                      <svg slot="icon-left" class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                      </svg>
                    ) : (
                      <svg slot="icon-left" class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"/>
                      </svg>
                    )}
                    {ctaText}
                  </Button>
                </div>
              </div>
            </div>
            
            {formattedDuration && (
              <div class="absolute bottom-4 right-4 bg-black/80 backdrop-blur-sm text-white px-3 py-1 rounded-lg text-sm font-medium">
                {formattedDuration}
              </div>
            )}
            
            {/* Article type badge */}
            {type === "article" && badgeConfig && (
              <div class="absolute top-4 left-4">
                <span class={`${badgeConfig.bg} ${badgeConfig.text} text-xs font-semibold px-2.5 py-1 rounded-full backdrop-blur-sm shadow-md`}>
                  {badgeConfig.label}
                </span>
              </div>
            )}
          </div>
        </div>
      </div>

      <!-- Content -->
      <div class="text-center space-y-4">
        <!-- Title -->
        <h1 class="text-2xl md:text-3xl lg:text-4xl font-bold text-gray-900 dark:text-white leading-tight">
          <a href={href} class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
            {title}
          </a>
        </h1>

        {truncatedDescription && (
          <p class="text-lg text-gray-600 dark:text-gray-300 leading-relaxed max-w-2xl mx-auto">
            {truncatedDescription}
          </p>
        )}

        <!-- Metadata -->
        <div class="flex flex-wrap items-center justify-center gap-6 text-sm text-gray-500 dark:text-gray-400">
          {author && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
              </svg>
              <span class="font-medium">{author}</span>
            </div>
          )}
          
          <div class="flex items-center gap-2">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <span>{displayDate}</span>
          </div>

          {formattedDuration && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{formattedDuration}</span>
            </div>
          )}

          {readTime && (
            <div class="flex items-center gap-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <span>{readTime}</span>
            </div>
          )}
        </div>
      </div>
    </div>
  </div>
</section>