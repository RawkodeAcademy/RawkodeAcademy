---
import type { OpenGraphProps } from "@/types/opengraph";
import * as utf64 from "utf64";

type Props = OpenGraphProps;

const {
  title,
  description,
  image,
  useImageDirectly = false,
  isArticle = false,
  publishedAt,
  updatedAt
} = Astro.props;

const openGraphUrl = new URL(Astro.url.pathname, Astro.site);

const openGraphDescription =
	description ??
	"The Rawkode Academy provides educational, entertaining, and cutting-edge learning paths for you, or your developers, to keep up with the fast-paced, ever-evolving, and extremely volatile Cloud Native landscape.";

// Dynamic OpenGraph Image Generation
const openGraphImagePayload = image
	? { ...image, text: title, format: "png" }
	: { text: title, format: "png" };
const openGraphImageUrl = `https://image.rawkode.academy/image?payload=${utf64.encode(
	JSON.stringify(openGraphImagePayload)
)}`;

// Determine if we should show article specific meta tags
const isPath = (path: string) => Astro.url.pathname.startsWith(path);
const isBlogOrSeriesPath = isPath("/blog/") || isPath("/series/");
const shouldShowArticleMeta = isArticle || isBlogOrSeriesPath;
---

<meta property="og:type" content={shouldShowArticleMeta ? "article" : "website"} />
<meta property="og:title" content={title} />
<meta property="og:description" content={openGraphDescription} />
<meta property="og:url" content={openGraphUrl} />
<meta
	property="og:image"
	content={useImageDirectly ? image?.image : openGraphImageUrl}
/>

<!-- Article specific Open Graph meta tags -->
{shouldShowArticleMeta && publishedAt && (
  <meta property="article:published_time" content={publishedAt.toISOString()} />
)}
{shouldShowArticleMeta && updatedAt && (
  <meta property="article:modified_time" content={updatedAt.toISOString()} />
)}
{shouldShowArticleMeta && (
  <meta property="article:publisher" content="https://rawkode.academy" />
)}

<meta name="twitter:card" content="summary_large_image" />
<meta property="twitter:domain" content={openGraphUrl.hostname} />
<meta property="twitter:url" content={openGraphUrl} />
<meta name="twitter:title" content={title} />
<meta name="twitter:description" content={openGraphDescription} />
<meta
	name="twitter:image"
	content={useImageDirectly ? image?.image : openGraphImageUrl}
/>

<!-- JSON-LD structured data for breadcrumbs -->
<script is:inline type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [
    {
      "@type": "ListItem",
      "position": 1,
      "name": "Home",
      "item": "https://rawkode.academy"
    }
    {Astro.url.pathname !== "/" &&
      `,{
        "@type": "ListItem",
        "position": 2,
        "name": "${Astro.url.pathname.split('/')[1].charAt(0).toUpperCase() + Astro.url.pathname.split('/')[1].slice(1)}",
        "item": "https://rawkode.academy${Astro.url.pathname.split('/').slice(0, 2).join('/')}"
      }`
    }
    {Astro.url.pathname.split('/').length > 2 && Astro.url.pathname !== "/" &&
      `,{
        "@type": "ListItem",
        "position": 3,
        "name": "${title}",
        "item": "https://rawkode.academy${Astro.url.pathname}"
      }`
    }
  ]
}
</script>
