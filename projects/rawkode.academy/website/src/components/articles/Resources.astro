---
import type { CollectionEntry } from "astro:content";

type Resource = NonNullable<
	CollectionEntry<"articles">["data"]["resources"]
>[number];

interface Props {
	resources?: Resource[] | undefined;
}

const { resources } = Astro.props;

const getCategoryIcon = (category: string) => {
	switch (category) {
		case "documentation":
			return "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z";
		case "code":
			return "M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4";
		case "slides":
			return "M7 4v16M17 4v16M3 12h18M8 12h8";
		case "demos":
			return "M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z";
		default:
			return "M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1";
	}
};

const groupResourcesByCategory = (resources: Resource[]) => {
	const grouped: Record<string, Resource[]> = {};
	resources.forEach((resource) => {
		const category = resource.category || "other";
		if (!grouped[category]) {
			grouped[category] = [];
		}
		grouped[category].push(resource);
	});
	return grouped;
};

const getCategoryLabel = (category: string) => {
	switch (category) {
		case "documentation":
			return "Documentation";
		case "code":
			return "Code";
		case "slides":
			return "Slides";
		case "demos":
			return "Demos";
		default:
			return "Additional Resources";
	}
};
---

{
	resources && resources.length > 0 && (
		<div class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
			<h2 class="text-xl font-bold text-gray-900 dark:text-white mb-6">Resources & References</h2>
			
			<style>
				@keyframes highlight-pulse {
					0% {
						background-color: rgb(99 102 241 / 0.2);
						transform: scale(1);
					}
					30% {
						background-color: rgb(99 102 241 / 0.3);
						transform: scale(1.005);
					}
					70% {
						background-color: rgb(99 102 241 / 0.2);
						transform: scale(1.002);
					}
					100% {
						background-color: rgb(99 102 241 / 0);
						transform: scale(1);
					}
				}
				
				.resource-link {
					text-decoration: none !important;
				}
				
				.resource-wrapper:target .resource-link {
					animation: highlight-pulse 3s ease-out;
				}
				
				.resource-wrapper {
					scroll-margin-top: 6rem;
				}
			</style>
			
			<div class="space-y-6">
				{Object.entries(groupResourcesByCategory(resources)).map(([category, categoryResources]) => (
					<div>
						<h3 class="text-sm font-semibold text-gray-600 dark:text-gray-400 uppercase tracking-wider mb-3">
							{getCategoryLabel(category)}
						</h3>
						<div class="grid gap-3">
							{categoryResources.map(resource => {
								// Find the original index of this resource in the flat array
								const resourceIndex = resources.findIndex(r => r === resource) + 1;
								// Use explicit ID if available, otherwise use index
								const resourceId = resource.id || `${resourceIndex}`;
								return (
									<div id={`resource-${resourceId}`} class="resource-wrapper">
										<a
											href={resource.url || resource.filePath || "#"}
											target={resource.type === "url" ? "_blank" : undefined}
											rel={resource.type === "url" ? "noopener noreferrer" : undefined}
											class="resource-link flex items-start gap-3 p-3 rounded-lg bg-gray-50 dark:bg-gray-800/50 hover:bg-gray-100 dark:hover:bg-gray-800 transition-all duration-200 group"
										>
									<svg
										class="w-5 h-5 mt-0.5 text-gray-400 dark:text-gray-500 group-hover:text-primary flex-shrink-0"
										fill="none"
										stroke="currentColor"
										viewBox="0 0 24 24"
									>
										<path
											stroke-linecap="round"
											stroke-linejoin="round"
											stroke-width="2"
											d={getCategoryIcon(category)}
										/>
									</svg>
									<div class="flex-1 min-w-0">
										<div class="font-medium text-gray-900 dark:text-white group-hover:text-primary">
											{resource.title}
										</div>
										{resource.description && (
											<div class="text-sm text-gray-600 dark:text-gray-400 mt-0.5">
												{resource.description}
											</div>
										)}
									</div>
									{resource.type === "url" && (
										<svg
											class="w-4 h-4 mt-1 text-gray-400 dark:text-gray-500 group-hover:text-primary flex-shrink-0"
											fill="none"
											stroke="currentColor"
											viewBox="0 0 24 24"
										>
											<path
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2"
												d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
											/>
										</svg>
									)}
								</a>
								</div>
								);
							})}
						</div>
					</div>
				))}
			</div>
		</div>
	)
}