---
import { Image } from "astro:assets";
import { getEntries, type CollectionEntry } from "astro:content";

type Props = {
	article: CollectionEntry<"articles">;
};

const { article } = Astro.props;
const authors = await getEntries(article.data.authors);
---

<a href={`/read/${article.id}`} class="h-full">
	<article
		class="p-0 bg-white rounded-xl overflow-hidden shadow-lg dark:bg-gray-800 dark:border-gray-700 h-full flex flex-col transition-all duration-300 border border-gray-100 dark:border-gray-700"
	>
		<div class="relative">
			<div class="absolute inset-0 bg-gradient-to-tr from-purple-600/30 to-indigo-600/30 mix-blend-multiply z-10"></div>
			{
				article.data.cover ? (
					<Image
						class="w-full h-52 object-cover"
						src={article.data.cover.image}
						alt={article.data.cover.alt}
					/>
				) : (
					<img
						class="w-full h-52 object-cover"
						src="https://flowbite.s3.amazonaws.com/blocks/marketing-ui/blog/office-laptops.png"
						alt="office laptop working"
					/>
				)
			}
			<div class="absolute top-3 left-3 z-20">
				<span
					class="bg-purple-100 text-purple-800 text-xs font-semibold px-2.5 py-1 rounded-full dark:bg-purple-200 dark:text-purple-900 backdrop-blur-sm shadow-md"
				>
					Article
				</span>
			</div>
		</div>
		<div class="p-6 flex flex-col flex-grow">
			<h2
				class="mb-3 text-xl font-bold tracking-tight text-gray-900 dark:text-white line-clamp-2"
			>
				{article.data.title}
			</h2>
			{
				article.data.subtitle && (
					<p class="mb-4 font-light text-gray-500 dark:text-gray-400 line-clamp-3">
						{article.data.subtitle}
					</p>
				)
			}
			<div class="mt-auto pt-4 border-t border-gray-100 dark:border-gray-700">
				<div class="flex items-center justify-between">
					<div class="flex items-center space-x-3">
						<div class="flex -space-x-3">
							{authors.slice(0, 3).map((author, index) => (
								<div class="relative" style={`z-index: ${10 - index}`}>
									<img
										class="w-10 h-10 rounded-full object-cover border-2 border-purple-500 p-0.5 bg-white"
										src={`https://github.com/${author.data.handle}.png`}
										alt={`Profile picture of ${author.data.name}`}
									/>
									{index === 0 && (
										<span class="absolute bottom-0 right-0 h-2.5 w-2.5 bg-green-400 rounded-full border-2 border-white dark:border-gray-800"></span>
									)}
								</div>
							))}
							{authors.length > 3 && (
								<div class="relative" style="z-index: 0;">
									<div class="w-10 h-10 rounded-full bg-purple-100 border-2 border-purple-500 p-0.5 bg-white flex items-center justify-center text-xs text-purple-800 font-medium">
										+{authors.length - 3}
									</div>
								</div>
							)}
						</div>
						<div class="font-medium dark:text-white">
							<div class="text-sm">{authors.map((author: CollectionEntry<"people">) => author.data.name).join(", ")}</div>
						</div>
					</div>
					<div class="flex items-center space-x-2">
						<svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
						</svg>
						<div class="text-xs font-normal text-gray-500 dark:text-gray-400">
							{new Intl.DateTimeFormat('en-US', {
								year: 'numeric',
								month: 'short',
								day: 'numeric'
							}).format(article.data.publishedAt)}
						</div>
					</div>
				</div>
			</div>
		</div>
	</article>
</a>