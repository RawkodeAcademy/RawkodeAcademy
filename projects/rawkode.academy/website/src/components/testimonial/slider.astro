---
interface Testimonial {
  quote: string;
  author: {
    name: string;
    title: string;
    image: string;
    link?: string;
  };
}

interface Props {
  testimonials: Testimonial[];
}

const { testimonials } = Astro.props;
---

<section class="bg-white dark:bg-gray-900">
  <div class="max-w-screen-xl px-4 mx-auto text-center py-4 lg:py-8 lg:px-6">
    <div class="mx-auto mb-8 max-w-screen-md text-center md:mb-16">
      <h2
        class="text-3xl tracking-tight font-extrabold text-gray-900 md:text-4xl dark:text-white"
      >
        Don't just take our word for it ...
      </h2>
    </div>

    <div class="testimonial-slider relative">
      <div class="testimonial-container overflow-hidden">
        <div class="testimonial-track flex transition-transform duration-500 ease-in-out">
          {testimonials.map((testimonial) => (
            <div class="testimonial-slide w-full flex-shrink-0">
              <figure class="max-w-screen-md mx-auto">
                <svg
                  class="h-12 mx-auto mb-3 text-gray-400 dark:text-gray-600"
                  viewBox="0 0 24 27"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M14.017 18L14.017 10.609C14.017 4.905 17.748 1.039 23 0L23.995 2.151C21.563 3.068 20 5.789 20 8H24V18H14.017ZM0 18V10.609C0 4.905 3.748 1.038 9 0L9.996 2.151C7.563 3.068 6 5.789 6 8H9.983L9.983 18L0 18Z"
                    fill="currentColor"></path>
                </svg>
                <blockquote>
                  <p class="text-2xl text-gray-900 dark:text-white">
                    "{testimonial.quote}"
                  </p>
                </blockquote>
                <figcaption class="flex items-center justify-center mt-6 space-x-3">
                  <img
                    class="w-6 h-6 rounded-full"
                    src={testimonial.author.image}
                    alt={`${testimonial.author.name} profile picture`}
                  />
                  {testimonial.author.link ? (
                    <a target="_blank" href={testimonial.author.link}>
                      <div
                        class="flex items-center divide-x-2 divide-gray-500 dark:divide-gray-700"
                      >
                        <div class="pr-3 font-medium text-gray-900 dark:text-white">
                          <p>{testimonial.author.name}</p>
                        </div>
                        <div
                          class="pl-3 text-sm font-light text-gray-500 dark:text-gray-400"
                        >
                          {testimonial.author.title}
                        </div>
                      </div>
                    </a>
                  ) : (
                    <div
                      class="flex items-center divide-x-2 divide-gray-500 dark:divide-gray-700"
                    >
                      <div class="pr-3 font-medium text-gray-900 dark:text-white">
                        <p>{testimonial.author.name}</p>
                      </div>
                      <div
                        class="pl-3 text-sm font-light text-gray-500 dark:text-gray-400"
                      >
                        {testimonial.author.title}
                      </div>
                    </div>
                  )}
                </figcaption>
              </figure>
            </div>
          ))}
        </div>
      </div>

      <!-- Navigation Buttons -->
      <button
        class="testimonial-prev absolute left-0 top-1/2 transform -translate-y-1/2 bg-gray-800 text-white p-2 rounded-full opacity-70 hover:opacity-100 focus:outline-none z-10"
        aria-label="Previous testimonial"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
        </svg>
      </button>

      <button
        class="testimonial-next absolute right-0 top-1/2 transform -translate-y-1/2 bg-gray-800 text-white p-2 rounded-full opacity-70 hover:opacity-100 focus:outline-none z-10"
        aria-label="Next testimonial"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>

      <!-- Indicators -->
      <div class="testimonial-indicators flex justify-center mt-6 space-x-2">
        {testimonials.map((_, index) => (
          <button
            class="testimonial-indicator w-3 h-3 rounded-full bg-gray-300 hover:bg-gray-500 focus:outline-none"
            data-index={index}
            aria-label={`Go to testimonial ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const track = document.querySelector('.testimonial-track') as HTMLElement;
    const slides = document.querySelectorAll('.testimonial-slide');
    const prevButton = document.querySelector('.testimonial-prev');
    const nextButton = document.querySelector('.testimonial-next');
    const indicators = document.querySelectorAll('.testimonial-indicator');

    if (!track || !slides.length || !prevButton || !nextButton) return;

    let currentIndex = 0;
    const slideCount = slides.length;

    // Set initial width for slides
    const setSlideWidth = () => {
      const parentElement = track.parentElement;
      if (!parentElement) return;

      const containerWidth = parentElement.offsetWidth;
      slides.forEach(slide => {
        (slide as HTMLElement).style.width = `${containerWidth}px`;
      });
      track.style.width = `${containerWidth * slideCount}px`;
      goToSlide(currentIndex);
    };

    // Update active indicator
    const updateIndicators = (index: number) => {
      indicators.forEach((indicator, i) => {
        if (i === index) {
          indicator.classList.add('bg-gray-700');
          indicator.classList.remove('bg-gray-300');
        } else {
          indicator.classList.remove('bg-gray-700');
          indicator.classList.add('bg-gray-300');
        }
      });
    };

    // Go to specific slide
    const goToSlide = (index: number) => {
      if (index < 0) index = slideCount - 1;
      if (index >= slideCount) index = 0;

      currentIndex = index;
      const firstSlide = slides[0] as HTMLElement;
      const offset = -currentIndex * firstSlide.offsetWidth;
      track.style.transform = `translateX(${offset}px)`;
      updateIndicators(currentIndex);
    };

    // Event listeners
    prevButton.addEventListener('click', () => goToSlide(currentIndex - 1));
    nextButton.addEventListener('click', () => goToSlide(currentIndex + 1));

    // Indicator clicks
    indicators.forEach((indicator, index) => {
      indicator.addEventListener('click', () => goToSlide(index));
    });

    // Set initial state
    setSlideWidth();
    updateIndicators(0);

    // Handle window resize
    window.addEventListener('resize', setSlideWidth);

    // Auto-advance slides every 5 seconds
    let autoplayInterval = setInterval(() => goToSlide(currentIndex + 1), 5000);

    // Pause autoplay on hover
    const sliderContainer = document.querySelector('.testimonial-slider');
    if (sliderContainer) {
      sliderContainer.addEventListener('mouseenter', () => {
        clearInterval(autoplayInterval);
      });

      sliderContainer.addEventListener('mouseleave', () => {
        autoplayInterval = setInterval(() => goToSlide(currentIndex + 1), 5000);
      });
    }
  });
</script>

<style>
  .testimonial-container {
    position: relative;
    width: 100%;
  }

  .testimonial-slide {
    padding: 0 1rem;
  }

  @media (max-width: 768px) {
    .testimonial-prev, .testimonial-next {
      display: none;
    }
  }
</style>
