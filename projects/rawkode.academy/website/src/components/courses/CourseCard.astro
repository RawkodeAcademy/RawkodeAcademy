---
import { Image } from "astro:assets";
import { getCollection, getEntries, type CollectionEntry } from "astro:content";

type Props = {
	course: CollectionEntry<"courses">;
};

const { course } = Astro.props;
const authors = await getEntries(course.data.authors);

// Get course modules count (including drafts)
const courseModules = (await getCollection("courseModules")).filter(
	(module) => module.data.course.id === course.id,
);

const totalModules = courseModules.length;

// Function to get difficulty badge color
function getDifficultyColor(difficulty: string) {
	switch (difficulty) {
		case "beginner":
			return "bg-green-100 text-green-800 dark:bg-green-200 dark:text-green-900";
		case "intermediate":
			return "bg-yellow-100 text-yellow-800 dark:bg-yellow-200 dark:text-yellow-900";
		case "advanced":
			return "bg-red-100 text-red-800 dark:bg-red-200 dark:text-red-900";
		default:
			return "bg-gray-100 text-gray-800 dark:bg-gray-200 dark:text-gray-900";
	}
}
---

<a href={`/courses/${course.id}`} class="h-full">
	<article
		class="p-0 bg-white rounded-xl overflow-hidden shadow-lg dark:bg-gray-800 dark:border-gray-700 h-full flex flex-col transition-all duration-300 border border-gray-100 dark:border-gray-700 hover:shadow-xl hover:scale-105"
	>
		<div class="relative">
			<div class="absolute inset-0 bg-linear-to-tr from-purple-600/30 to-indigo-600/30 mix-blend-multiply z-10"></div>
			{
				course.data.cover ? (
					<Image
						class="w-full h-52 object-cover"
						src={course.data.cover.image}
						alt={course.data.cover.alt}
					/>
				) : (
					<div class="w-full h-52 bg-gradient-to-br from-primary to-secondary flex items-center justify-center">
						<svg class="w-16 h-16 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
						</svg>
					</div>
				)
			}
			<div class="absolute top-3 left-3 right-3 z-20 flex justify-between">
				<span
					class={`text-xs font-semibold px-2.5 py-1 rounded-full backdrop-blur-sm shadow-md ${getDifficultyColor(course.data.difficulty)}`}
				>
					{course.data.difficulty.charAt(0).toUpperCase() + course.data.difficulty.slice(1)}
				</span>
				<span class="text-xs font-semibold px-2.5 py-1 rounded-full backdrop-blur-sm shadow-md bg-white/90 text-gray-800">
					{totalModules === 1 ? `${totalModules} module` : `${totalModules} modules`}
				</span>
			</div>

		</div>
		<div class="p-6 flex flex-col grow">
			<h2
				class="mb-3 text-xl font-bold tracking-tight text-gray-900 dark:text-white line-clamp-2"
			>
				{course.data.title}
			</h2>
			<p class="mb-4 font-light text-gray-500 dark:text-gray-400 line-clamp-3 flex-grow">
				{course.data.description}
			</p>



			<div class="mt-auto pt-4 border-t border-gray-100 dark:border-gray-700">
				<div class="flex items-center justify-between">
					<div class="flex items-center space-x-3">
						<div class="flex -space-x-3">
							{authors.slice(0, 3).map((author, index) => (
								<div class="relative" style={`z-index: ${10 - index}`}>
									<img
										class="w-8 h-8 rounded-full object-cover border-2 border-purple-500 p-0.5 bg-white"
										src={`https://github.com/${author.data.handle}.png`}
										alt={`Profile picture of ${author.data.name}`}
									/>
								</div>
							))}
							{authors.length > 3 && (
								<div class="relative" style="z-index: 0;">
									<div class="w-8 h-8 rounded-full bg-purple-100 border-2 border-purple-500 p-0.5 bg-white flex items-center justify-center text-xs text-purple-800 font-medium">
										+{authors.length - 3}
									</div>
								</div>
							)}
						</div>
						<div class="font-medium dark:text-white">
							<div class="text-sm">{authors.map((author: CollectionEntry<"people">) => author.data.name).join(", ")}</div>
						</div>
					</div>
					<div class="text-sm text-gray-500 dark:text-gray-400">
						{new Intl.DateTimeFormat('en-US', { month: 'short', year: 'numeric' }).format(course.data.publishedAt)}
					</div>
				</div>


			</div>
		</div>
	</article>
</a>
