directive @core(feature: String!) repeatable on SCHEMA

directive @join__owner(graph: join__Graph!) on OBJECT

directive @join__type(
    graph: join__Graph!
    key: String!
    resolvable: Boolean = true
) repeatable on OBJECT | INTERFACE

directive @join__field(
    graph: join__Graph
    requires: String
    provides: String
) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

enum join__Graph {
    PEOPLE @join__graph(name: "people", url: "https://plt-people-r.deno.dev/")
    SHOWS @join__graph(name: "shows", url: "https://plt-shows-r.deno.dev/")
    SHOW_HOSTS @join__graph(name: "show-hosts", url: "https://plt-show-hosts-r.deno.dev/")
}

type Person
    @join__type(graph: PEOPLE, key: "id")
    @join__type(graph: SHOW_HOSTS, key: "id", resolvable: false)
{
    forename: String! @join__field(graph: PEOPLE)
    id: ID!
    shows: [Show] @join__field(graph: SHOW_HOSTS)
    surname: String! @join__field(graph: PEOPLE)
}

type Show
    @join__type(graph: SHOWS, key: "id")
    @join__type(graph: SHOW_HOSTS, key: "id", resolvable: false)
{
    id: ID!
    name: String! @join__field(graph: SHOWS)
    people: [Person] @join__field(graph: SHOW_HOSTS)
}

type Query {
    people: [Person] @join__field(graph: PEOPLE)
    personById(id: ID!): Person @join__field(graph: PEOPLE)
    showById(id: ID!): Show @join__field(graph: SHOWS)
    shows: [Show] @join__field(graph: SHOWS)
}
