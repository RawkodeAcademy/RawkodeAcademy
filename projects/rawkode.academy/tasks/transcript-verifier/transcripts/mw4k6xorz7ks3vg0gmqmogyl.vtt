WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: a329f169-a8cc-48b6-a145-d1babbfb52f5
Created: 2025-06-05T21:57:13.785Z
Duration: 6369.75
Channels: 1

00:00:11.040 --> 00:00:12.639
<v Speaker 0>Clouds amaze

00:00:12.639 --> 00:00:14.320
<v Speaker 0>a tangled thread.

00:00:14.719 --> 00:00:16.640
<v Speaker 0>Servers spin

00:02:08.294 --> 00:02:11.575
<v Speaker 1>Hello, and welcome back to the Rawkode Academy.

00:02:11.575 --> 00:02:13.655
<v Speaker 1>I am your host, David Flanagan,

00:02:13.655 --> 00:02:16.535
<v Speaker 1>also known as Rawkode, and this is Rawkode

00:02:16.535 --> 00:02:17.335
<v Speaker 1>Live.

00:02:17.735 --> 00:02:19.255
<v Speaker 1>Rawkode Live is a show where we take

00:02:19.255 --> 00:02:21.819
<v Speaker 1>a look at emerging cloud native technologies, patterns,

00:02:21.819 --> 00:02:23.900
<v Speaker 1>architectures, and everything in between to show you

00:02:23.900 --> 00:02:25.180
<v Speaker 1>how to be successful.

00:02:25.260 --> 00:02:26.780
<v Speaker 1>And today, we're taking a look at a

00:02:26.780 --> 00:02:28.379
<v Speaker 1>project that is near and dear to my

00:02:28.379 --> 00:02:30.300
<v Speaker 1>heart, and that is Fermion Spin.

00:02:30.700 --> 00:02:32.219
<v Speaker 1>If you have met me at a conference

00:02:32.219 --> 00:02:34.459
<v Speaker 1>before, you know that I don't think enough

00:02:34.459 --> 00:02:36.780
<v Speaker 1>people are paying attention to WebAssembly and server

00:02:36.780 --> 00:02:37.875
<v Speaker 1>side Web Assembly.

00:02:38.115 --> 00:02:40.194
<v Speaker 1>And today, I'm joined by Thorsten Hans from

00:02:40.194 --> 00:02:42.435
<v Speaker 1>the Fermion team to show us what we're

00:02:42.435 --> 00:02:43.555
<v Speaker 1>missing out on.

00:02:45.875 --> 00:02:48.995
<v Speaker 1>Hello, Thorsten. How are you, man? Hey. Thanks

00:02:48.995 --> 00:02:51.530
<v Speaker 0>for having me, David. So first of all,

00:02:51.530 --> 00:02:53.370
<v Speaker 0>it's great to be here and talk about

00:02:53.370 --> 00:02:54.970
<v Speaker 0>Spin and WebAssembly.

00:02:56.090 --> 00:02:57.450
<v Speaker 1>Yeah. I mean, thank you so much for

00:02:57.450 --> 00:02:59.130
<v Speaker 1>taking time out of your day. I was

00:02:59.130 --> 00:03:01.370
<v Speaker 1>literally just watching you on an hour long

00:03:01.370 --> 00:03:03.290
<v Speaker 1>stream on your own channel, and here you

00:03:03.290 --> 00:03:05.955
<v Speaker 1>are signing up for another hour long stream

00:03:05.955 --> 00:03:07.955
<v Speaker 1>showing people how to do really cool things

00:03:07.955 --> 00:03:10.194
<v Speaker 1>with WebAssembly and spend. So I really appreciate

00:03:10.194 --> 00:03:12.035
<v Speaker 1>you going back to back today because that

00:03:12.035 --> 00:03:14.115
<v Speaker 1>that is no easy task at all.

00:03:15.155 --> 00:03:17.395
<v Speaker 0>Yeah. Yeah. You're right. So I just jumped

00:03:17.395 --> 00:03:19.400
<v Speaker 0>off the other stream. Right? So I had

00:03:19.400 --> 00:03:21.239
<v Speaker 0>a quick bio break for two minutes or

00:03:21.239 --> 00:03:24.440
<v Speaker 0>so and then jumped on on Rawkode Academy.

00:03:24.440 --> 00:03:26.200
<v Speaker 0>That's yeah. It is what it is. I

00:03:26.200 --> 00:03:29.400
<v Speaker 0>mean, it's intense, but we do, you know,

00:03:29.720 --> 00:03:31.239
<v Speaker 0>we do it because we love what we

00:03:31.239 --> 00:03:32.520
<v Speaker 0>do. Right. It's passion.

00:03:32.760 --> 00:03:35.495
<v Speaker 0>And so, you know, passion led us here.

00:03:35.495 --> 00:03:38.615
<v Speaker 0>So let's use that momentum and jump right

00:03:38.615 --> 00:03:39.575
<v Speaker 0>into spin.

00:03:40.135 --> 00:03:40.935
<v Speaker 0>Awesome.

00:03:40.935 --> 00:03:42.695
<v Speaker 0>All right. Well, hello to Ravi. Thank you

00:03:42.695 --> 00:03:44.135
<v Speaker 1>for saying hello in the chat.

00:03:44.935 --> 00:03:47.470
<v Speaker 1>Thurston, before we, you know, start showing people

00:03:47.470 --> 00:03:49.470
<v Speaker 1>some cool code and cool technology, can you

00:03:49.470 --> 00:03:51.230
<v Speaker 1>just take a moment to tell people a

00:03:51.230 --> 00:03:52.670
<v Speaker 1>little bit more about you and what you've

00:03:52.670 --> 00:03:53.390
<v Speaker 1>been up there?

00:03:54.030 --> 00:03:56.750
<v Speaker 0>Sure. So, yeah, as you already mentioned, my

00:03:56.750 --> 00:03:57.790
<v Speaker 0>name is Thorsten.

00:03:57.950 --> 00:03:58.670
<v Speaker 0>I'm

00:03:58.830 --> 00:03:59.629
<v Speaker 0>based in Germany,

00:04:01.474 --> 00:04:04.114
<v Speaker 0>and I work as a senior cloud advocate

00:04:04.114 --> 00:04:05.635
<v Speaker 0>with Fermion.

00:04:06.114 --> 00:04:08.835
<v Speaker 0>So my daily job, you know,

00:04:09.234 --> 00:04:11.635
<v Speaker 0>consists of creating samples,

00:04:11.635 --> 00:04:14.435
<v Speaker 0>writing blog posts, engaging with the community,

00:04:14.915 --> 00:04:15.875
<v Speaker 0>and also

00:04:16.760 --> 00:04:20.360
<v Speaker 0>meeting or sitting down with customers or developer

00:04:20.360 --> 00:04:23.400
<v Speaker 0>teams and help them to adopt

00:04:23.480 --> 00:04:24.680
<v Speaker 0>WebAssembly

00:04:24.680 --> 00:04:28.120
<v Speaker 0>and spin as a technology stack to build

00:04:28.425 --> 00:04:30.504
<v Speaker 0>serverless or reactive

00:04:30.504 --> 00:04:31.384
<v Speaker 0>application,

00:04:31.384 --> 00:04:32.745
<v Speaker 0>but applications,

00:04:32.745 --> 00:04:33.865
<v Speaker 0>but also,

00:04:34.185 --> 00:04:34.905
<v Speaker 0>you know,

00:04:36.504 --> 00:04:38.264
<v Speaker 0>like build the

00:04:38.504 --> 00:04:41.465
<v Speaker 0>or integrate spin and maybe

00:04:42.270 --> 00:04:44.750
<v Speaker 0>SpinCube as a open source

00:04:44.750 --> 00:04:48.430
<v Speaker 0>platform or runtime into their existing

00:04:48.909 --> 00:04:49.710
<v Speaker 0>workloads

00:04:49.710 --> 00:04:50.510
<v Speaker 0>or

00:04:51.229 --> 00:04:52.910
<v Speaker 0>environments. Right? Because,

00:04:53.550 --> 00:04:55.629
<v Speaker 0>you know, there are so many

00:04:56.585 --> 00:04:58.185
<v Speaker 0>distributed applications

00:04:58.185 --> 00:04:59.545
<v Speaker 0>out there and

00:04:59.785 --> 00:05:03.145
<v Speaker 0>it's pretty rare that people can just, you

00:05:03.145 --> 00:05:06.585
<v Speaker 0>know, wipe everything and start from scratch. Although

00:05:06.585 --> 00:05:08.905
<v Speaker 0>that would be great and from time to

00:05:08.905 --> 00:05:10.950
<v Speaker 0>time we as developers

00:05:11.030 --> 00:05:13.990
<v Speaker 0>have that opportunity, but it's it's seldom. So,

00:05:13.990 --> 00:05:14.550
<v Speaker 0>yeah,

00:05:14.950 --> 00:05:16.310
<v Speaker 0>job is really to

00:05:17.350 --> 00:05:21.430
<v Speaker 0>examine what's there and how could Spin and

00:05:21.430 --> 00:05:22.550
<v Speaker 0>WebAssembly

00:05:22.790 --> 00:05:26.285
<v Speaker 0>help teams to move forward fast

00:05:26.444 --> 00:05:29.164
<v Speaker 0>and to optimize

00:05:29.164 --> 00:05:30.604
<v Speaker 0>maybe their cloud

00:05:30.685 --> 00:05:32.845
<v Speaker 0>poster to lower

00:05:33.085 --> 00:05:36.285
<v Speaker 0>their cloud spendings to run more efficiently.

00:05:36.604 --> 00:05:38.125
<v Speaker 0>Bringing

00:05:38.125 --> 00:05:39.004
<v Speaker 0>all those

00:05:39.400 --> 00:05:42.280
<v Speaker 0>value additions from WebAssembly

00:05:42.280 --> 00:05:45.480
<v Speaker 0>into a real world context. That's basically what

00:05:45.480 --> 00:05:45.960
<v Speaker 0>I

00:05:46.360 --> 00:05:48.600
<v Speaker 0>I do on a on a daily basis.

00:05:48.600 --> 00:05:49.080
<v Speaker 1>Yeah.

00:05:50.040 --> 00:05:52.120
<v Speaker 1>Awesome. Thank you so much for sharing all

00:05:51.945 --> 00:05:53.545
<v Speaker 1>that. Now you mentioned a couple of things

00:05:53.545 --> 00:05:55.065
<v Speaker 1>there that I think would be good to

00:05:55.065 --> 00:05:57.865
<v Speaker 1>kinda just explain. So you mentioned SpinCube.

00:05:57.945 --> 00:06:01.465
<v Speaker 1>We've already mentioned Spin. These were both donated

00:06:01.465 --> 00:06:04.025
<v Speaker 1>to the CNCF within the last month. Right?

00:06:04.025 --> 00:06:07.065
<v Speaker 1>So these are now official CNCF sandbox

00:06:07.145 --> 00:06:07.465
<v Speaker 1>projects.

00:06:08.790 --> 00:06:11.110
<v Speaker 1>But I'm assuming some people may not know

00:06:11.110 --> 00:06:13.430
<v Speaker 1>what SpendKube is. So maybe we could stay

00:06:13.590 --> 00:06:14.790
<v Speaker 1>you know, just take a minute or two

00:06:14.790 --> 00:06:16.229
<v Speaker 1>to tell people and fill them in on

00:06:16.229 --> 00:06:16.630
<v Speaker 1>that.

00:06:17.190 --> 00:06:19.750
<v Speaker 0>Yeah. That's that's a great

00:06:20.455 --> 00:06:22.854
<v Speaker 0>maybe opening that discussion,

00:06:22.854 --> 00:06:23.335
<v Speaker 0>right?

00:06:24.375 --> 00:06:26.695
<v Speaker 0>Yes, so first and foremost,

00:06:26.854 --> 00:06:28.215
<v Speaker 0>Spin recently

00:06:28.215 --> 00:06:29.415
<v Speaker 0>got accepted

00:06:29.655 --> 00:06:32.740
<v Speaker 0>to be a CNCF sandbox project And we

00:06:32.740 --> 00:06:35.380
<v Speaker 0>are right now in that onboarding phase, you

00:06:35.380 --> 00:06:37.860
<v Speaker 0>know, where things have to have to be

00:06:37.860 --> 00:06:41.460
<v Speaker 0>moved around and, you know, we expect us

00:06:41.460 --> 00:06:43.860
<v Speaker 0>to, you know, be on that

00:06:45.615 --> 00:06:48.335
<v Speaker 0>small tiny CNCF landscape

00:06:48.335 --> 00:06:50.335
<v Speaker 0>soon, really soon.

00:06:50.655 --> 00:06:52.414
<v Speaker 0>So there there will be a spin logo

00:06:52.414 --> 00:06:53.615
<v Speaker 0>there, which is great.

00:06:54.095 --> 00:06:57.294
<v Speaker 0>And so spin is in essence is a

00:06:57.294 --> 00:06:58.495
<v Speaker 0>developer tool

00:06:59.160 --> 00:07:00.039
<v Speaker 0>allowing

00:07:00.039 --> 00:07:01.640
<v Speaker 0>developers to build

00:07:01.960 --> 00:07:02.840
<v Speaker 0>applications

00:07:02.840 --> 00:07:04.200
<v Speaker 0>using WebAssembly.

00:07:04.919 --> 00:07:05.560
<v Speaker 0>So

00:07:07.160 --> 00:07:09.080
<v Speaker 0>from a developer's point of view, you may

00:07:09.080 --> 00:07:12.200
<v Speaker 0>think of WebAssembly as a compilation target,

00:07:12.280 --> 00:07:12.919
<v Speaker 0>right? So

00:07:14.105 --> 00:07:16.425
<v Speaker 0>we can write code, compile it down to

00:07:16.425 --> 00:07:18.905
<v Speaker 0>WebAssembly, and then we leverage a so called

00:07:18.905 --> 00:07:20.585
<v Speaker 0>WebAssembly runtime

00:07:20.585 --> 00:07:22.665
<v Speaker 0>to execute our workloads.

00:07:23.385 --> 00:07:25.625
<v Speaker 0>And in contrast to like,

00:07:26.330 --> 00:07:29.770
<v Speaker 0>yeah, earlier like distribution formats, you know, WebAssembly

00:07:29.770 --> 00:07:31.130
<v Speaker 0>has some nice

00:07:31.449 --> 00:07:33.770
<v Speaker 0>features that we could participate

00:07:33.770 --> 00:07:38.090
<v Speaker 0>when building WebAssembly, which is their distributable format

00:07:38.090 --> 00:07:40.330
<v Speaker 0>is super tiny because we're just,

00:07:41.345 --> 00:07:45.185
<v Speaker 0>you know, sending, let's say, the WebAssembly

00:07:45.185 --> 00:07:48.145
<v Speaker 0>module to that whatever runtime

00:07:48.145 --> 00:07:50.384
<v Speaker 0>you decide to use in order to run

00:07:50.384 --> 00:07:53.664
<v Speaker 0>that app. Right? So in you could think

00:07:53.664 --> 00:07:55.025
<v Speaker 0>of a WebAssembly

00:07:55.025 --> 00:07:56.145
<v Speaker 0>distributable

00:07:58.240 --> 00:08:01.840
<v Speaker 0>or size wise, it relates to a container

00:08:01.840 --> 00:08:04.800
<v Speaker 0>as a container relates to a virtual machine.

00:08:05.120 --> 00:08:07.600
<v Speaker 0>Right? So it's maybe a hundred times smaller

00:08:07.600 --> 00:08:10.815
<v Speaker 0>than a container. That's one of the, big

00:08:10.815 --> 00:08:14.095
<v Speaker 0>benefits because pull times, especially in Kubernetes,

00:08:14.095 --> 00:08:15.615
<v Speaker 0>are like ridiculously

00:08:15.615 --> 00:08:16.655
<v Speaker 0>fast. Right?

00:08:17.055 --> 00:08:18.495
<v Speaker 0>And we have, you know,

00:08:19.134 --> 00:08:20.414
<v Speaker 0>strict isolation,

00:08:20.414 --> 00:08:21.615
<v Speaker 0>strict sandboxing.

00:08:21.615 --> 00:08:24.630
<v Speaker 0>So so the workloads are secure so you

00:08:24.630 --> 00:08:25.430
<v Speaker 0>can run

00:08:25.830 --> 00:08:28.630
<v Speaker 0>multi tenant run times and don't have to

00:08:28.630 --> 00:08:31.990
<v Speaker 0>fear one workload taking down another one.

00:08:33.030 --> 00:08:34.950
<v Speaker 0>But yes, so Spin is the tool

00:08:35.424 --> 00:08:35.905
<v Speaker 0>to,

00:08:36.785 --> 00:08:40.225
<v Speaker 0>simplify the development process. And it doesn't matter

00:08:40.225 --> 00:08:43.265
<v Speaker 0>if you're a TypeScript person, a JavaScript person,

00:08:43.265 --> 00:08:45.985
<v Speaker 0>a Python, a Go, a Rust person person,

00:08:45.985 --> 00:08:46.545
<v Speaker 0>right?

00:08:46.865 --> 00:08:50.350
<v Speaker 0>Spin is like a unified CLI giving you

00:08:50.350 --> 00:08:51.870
<v Speaker 0>a super simple

00:08:51.950 --> 00:08:54.750
<v Speaker 0>CLI workflow. And we will look at that,

00:08:54.750 --> 00:08:56.589
<v Speaker 0>right, by doing some hands on in a

00:08:56.589 --> 00:08:57.710
<v Speaker 0>in a few minutes.

00:08:59.790 --> 00:09:02.275
<v Speaker 0>So the Spin takes care of all those

00:09:02.275 --> 00:09:05.075
<v Speaker 0>developer day to day tasks

00:09:05.075 --> 00:09:05.875
<v Speaker 0>for you.

00:09:06.435 --> 00:09:09.315
<v Speaker 0>And then we mentioned SpinCube like two times

00:09:09.315 --> 00:09:10.115
<v Speaker 0>right now.

00:09:11.075 --> 00:09:12.595
<v Speaker 0>So SpinCube

00:09:12.595 --> 00:09:15.830
<v Speaker 0>is also an open source project. It's a

00:09:15.830 --> 00:09:18.630
<v Speaker 0>sub project under the spin project.

00:09:18.870 --> 00:09:19.910
<v Speaker 0>It's also

00:09:20.230 --> 00:09:22.230
<v Speaker 0>as part of our contribution

00:09:22.230 --> 00:09:23.750
<v Speaker 0>to CNCF.

00:09:24.070 --> 00:09:26.870
<v Speaker 0>It's also in CNCF as sent on the

00:09:26.870 --> 00:09:27.670
<v Speaker 0>sandbox layer.

00:09:28.225 --> 00:09:32.145
<v Speaker 0>And that's basically a way of running those

00:09:32.145 --> 00:09:33.265
<v Speaker 0>spin apps

00:09:33.665 --> 00:09:34.865
<v Speaker 0>in Kubernetes

00:09:35.665 --> 00:09:36.545
<v Speaker 0>without

00:09:37.265 --> 00:09:38.865
<v Speaker 0>leveraging containers

00:09:38.865 --> 00:09:39.345
<v Speaker 0>because,

00:09:40.140 --> 00:09:43.020
<v Speaker 0>you know, we wanna take or we wanna

00:09:43.020 --> 00:09:46.700
<v Speaker 0>make use of those values like small binary

00:09:46.700 --> 00:09:47.420
<v Speaker 0>size,

00:09:47.820 --> 00:09:48.860
<v Speaker 0>incredibly

00:09:48.940 --> 00:09:49.820
<v Speaker 0>fast

00:09:49.820 --> 00:09:50.940
<v Speaker 0>instantiation

00:09:50.940 --> 00:09:52.460
<v Speaker 0>and runtime performance.

00:09:53.245 --> 00:09:54.524
<v Speaker 0>So SpinTube,

00:09:54.605 --> 00:09:58.125
<v Speaker 0>again, to emphasize that is also open source,

00:09:58.125 --> 00:10:00.764
<v Speaker 0>is also part of the spin project, which

00:10:00.764 --> 00:10:03.805
<v Speaker 0>means it's part of the CNCF sandbox

00:10:04.605 --> 00:10:05.325
<v Speaker 0>tier

00:10:05.885 --> 00:10:06.605
<v Speaker 0>and

00:10:06.764 --> 00:10:10.260
<v Speaker 0>could be installed to like, any arbitrary

00:10:10.260 --> 00:10:11.700
<v Speaker 0>Kubernetes cluster.

00:10:12.260 --> 00:10:15.140
<v Speaker 0>And it's a I think as a final

00:10:15.140 --> 00:10:18.340
<v Speaker 0>statement to spin queue before looking at it,

00:10:19.060 --> 00:10:22.100
<v Speaker 0>I think it's a perfect example of how

00:10:22.845 --> 00:10:23.964
<v Speaker 0>versatile

00:10:24.204 --> 00:10:27.565
<v Speaker 0>WebAssembly run times could be. Right? There could

00:10:27.565 --> 00:10:29.325
<v Speaker 0>be like a way,

00:10:29.565 --> 00:10:31.805
<v Speaker 0>oh, SpinCube is the way of running it

00:10:31.805 --> 00:10:33.165
<v Speaker 0>in Kubernetes,

00:10:33.404 --> 00:10:36.910
<v Speaker 0>mimicking like ports and all those primitives that

00:10:36.910 --> 00:10:39.070
<v Speaker 0>we know and love from Kubernetes.

00:10:40.110 --> 00:10:42.350
<v Speaker 0>But maybe you're more onto,

00:10:42.750 --> 00:10:45.390
<v Speaker 0>I wanna just build a workload,

00:10:45.470 --> 00:10:47.390
<v Speaker 0>throw it over the wall and get it

00:10:47.390 --> 00:10:48.510
<v Speaker 0>executed somewhere.

00:10:48.815 --> 00:10:51.615
<v Speaker 0>That's for example, where a different runtime,

00:10:51.855 --> 00:10:54.815
<v Speaker 0>which is firming cloud hosted service

00:10:54.815 --> 00:10:56.015
<v Speaker 0>that we provide

00:10:56.255 --> 00:10:58.975
<v Speaker 0>enters the stage. That's just a different way

00:10:58.975 --> 00:11:02.095
<v Speaker 0>of how those WebAssembly modules are executed,

00:11:02.840 --> 00:11:04.120
<v Speaker 0>are managed

00:11:04.280 --> 00:11:05.000
<v Speaker 0>under

00:11:05.480 --> 00:11:07.400
<v Speaker 0>on that platform there.

00:11:08.920 --> 00:11:09.720
<v Speaker 1>Awesome.

00:11:09.880 --> 00:11:11.880
<v Speaker 1>Yeah. Great explanations. Thank you so much for

00:11:11.880 --> 00:11:15.320
<v Speaker 1>sharing that. We understand spin. We understand spin

00:11:15.320 --> 00:11:18.295
<v Speaker 1>queue. I'll add one little bonus nugget there,

00:11:18.295 --> 00:11:20.214
<v Speaker 1>and it is that, you know, I get

00:11:20.214 --> 00:11:22.055
<v Speaker 1>to sit and play with a lot of

00:11:22.055 --> 00:11:22.774
<v Speaker 1>technology.

00:11:23.095 --> 00:11:24.774
<v Speaker 1>Like, every day, I just I'm like a

00:11:24.774 --> 00:11:26.774
<v Speaker 1>technology magpie. Right? And if it's shiny, I

00:11:26.774 --> 00:11:28.375
<v Speaker 1>play with it. And I've gotta say, for

00:11:28.375 --> 00:11:30.840
<v Speaker 1>anyone watching this video, pay attention to the

00:11:30.840 --> 00:11:32.920
<v Speaker 1>developer experience as source them as part of

00:11:32.920 --> 00:11:34.600
<v Speaker 1>the first stuff. Because I really believe that

00:11:34.600 --> 00:11:37.480
<v Speaker 1>spend have just absolutely nailed it. The the

00:11:37.480 --> 00:11:39.800
<v Speaker 1>way that you build components and add components

00:11:39.800 --> 00:11:40.440
<v Speaker 1>and

00:11:40.840 --> 00:11:43.560
<v Speaker 1>iterate of building a real application. I I

00:11:43.560 --> 00:11:45.305
<v Speaker 1>I just think it's unmatched. I hope people

00:11:45.305 --> 00:11:47.625
<v Speaker 1>enjoy that and appreciate that as you're hacking

00:11:47.625 --> 00:11:48.505
<v Speaker 1>on your demo.

00:11:48.825 --> 00:11:50.505
<v Speaker 1>Now, with that being said,

00:11:50.825 --> 00:11:52.665
<v Speaker 1>what are we building today?

00:11:53.705 --> 00:11:54.345
<v Speaker 0>Well,

00:11:54.745 --> 00:11:57.145
<v Speaker 0>so, yeah, obviously, David and I were chatting

00:11:57.145 --> 00:11:59.145
<v Speaker 0>in advance of that stream a little bit

00:11:59.145 --> 00:12:01.430
<v Speaker 0>about how could we, you know,

00:12:02.070 --> 00:12:04.390
<v Speaker 0>provide most value for, like,

00:12:04.550 --> 00:12:07.590
<v Speaker 0>newcomers that have never experienced WebAssembly,

00:12:07.590 --> 00:12:09.030
<v Speaker 0>never experienced Spin,

00:12:09.110 --> 00:12:12.070
<v Speaker 0>and for those who may have already used

00:12:12.070 --> 00:12:12.550
<v Speaker 0>Spin.

00:12:13.295 --> 00:12:15.214
<v Speaker 0>So the idea is to start with a

00:12:15.214 --> 00:12:17.295
<v Speaker 0>Hello World to give you like, you know,

00:12:17.295 --> 00:12:18.255
<v Speaker 0>to make

00:12:18.574 --> 00:12:20.975
<v Speaker 0>the audience avail or

00:12:22.175 --> 00:12:25.214
<v Speaker 0>aware of like those the Spin workflow.

00:12:26.130 --> 00:12:29.010
<v Speaker 0>And from there, we start like implementing,

00:12:29.570 --> 00:12:31.730
<v Speaker 0>for example, an HTTP API.

00:12:32.210 --> 00:12:34.850
<v Speaker 0>And last but not least, there could be

00:12:34.850 --> 00:12:37.810
<v Speaker 0>no session without some AI. Right? So we

00:12:37.810 --> 00:12:40.370
<v Speaker 0>will bring in some AI capabilities

00:12:40.370 --> 00:12:40.930
<v Speaker 0>as well.

00:12:42.254 --> 00:12:44.894
<v Speaker 0>Just to give you a rough idea of

00:12:45.134 --> 00:12:45.935
<v Speaker 0>how

00:12:45.935 --> 00:12:49.454
<v Speaker 0>would I maybe integrate an upstream service that

00:12:49.454 --> 00:12:51.454
<v Speaker 0>I have already in my

00:12:51.615 --> 00:12:52.574
<v Speaker 0>environment

00:12:53.214 --> 00:12:55.935
<v Speaker 0>that I wanna use from within Spin.

00:12:57.100 --> 00:12:59.259
<v Speaker 0>So that's the idea.

00:13:00.139 --> 00:13:01.259
<v Speaker 1>Awesome.

00:13:01.420 --> 00:13:03.579
<v Speaker 1>Alright. I got a comment from Indigo VFX

00:13:03.579 --> 00:13:05.500
<v Speaker 1>saying that my volume is very low compared

00:13:05.500 --> 00:13:08.060
<v Speaker 1>to yours. So, hopefully, I fixed that. If

00:13:08.060 --> 00:13:10.060
<v Speaker 1>not, I will keep on tweaking. So please

00:13:10.060 --> 00:13:10.939
<v Speaker 1>let me know, Indigo.

00:13:11.834 --> 00:13:12.714
<v Speaker 1>Thorsten.

00:13:13.115 --> 00:13:14.714
<v Speaker 1>I I turned myself up, Thorsten. I I

00:13:14.714 --> 00:13:16.394
<v Speaker 1>think it's me that's the problem. It's always

00:13:16.394 --> 00:13:17.435
<v Speaker 1>me that's the problem.

00:13:18.714 --> 00:13:21.435
<v Speaker 1>Do you want to share your screen? We'll

00:13:21.435 --> 00:13:23.274
<v Speaker 1>move over there, and we'll start

00:13:23.675 --> 00:13:25.595
<v Speaker 1>having some fun that was spent.

00:13:26.315 --> 00:13:26.714
<v Speaker 0>Yes.

00:13:27.790 --> 00:13:29.310
<v Speaker 0>So I

00:13:30.910 --> 00:13:32.910
<v Speaker 0>now you should see my screen.

00:13:33.230 --> 00:13:35.230
<v Speaker 1>We do indeed. I see you. I see

00:13:35.230 --> 00:13:38.589
<v Speaker 1>the Fermion developer homepage. I am excited and

00:13:38.589 --> 00:13:40.269
<v Speaker 1>happy to let you take stage.

00:13:41.394 --> 00:13:42.115
<v Speaker 0>Awesome.

00:13:42.435 --> 00:13:44.675
<v Speaker 0>So let's get rid of the

00:13:45.075 --> 00:13:48.035
<v Speaker 0>notification from Chrome over here and let's

00:13:48.195 --> 00:13:50.675
<v Speaker 0>close that tab. And yeah, as you already

00:13:50.675 --> 00:13:52.915
<v Speaker 0>mentioned, we are looking at the Fermion Developer

00:13:52.915 --> 00:13:53.315
<v Speaker 0>Home

00:13:54.070 --> 00:13:56.550
<v Speaker 0>because I think that's a good like resource

00:13:56.550 --> 00:13:58.070
<v Speaker 0>to get started depending

00:13:59.269 --> 00:13:59.990
<v Speaker 0>on

00:14:00.389 --> 00:14:03.589
<v Speaker 0>whatever the preferred language is that you wanna

00:14:03.589 --> 00:14:05.829
<v Speaker 0>use to build WebAssembly

00:14:05.829 --> 00:14:08.230
<v Speaker 0>workloads or spin apps, how we call them.

00:14:08.825 --> 00:14:10.425
<v Speaker 0>So we have documentation

00:14:10.425 --> 00:14:12.025
<v Speaker 0>in place for Spin

00:14:12.105 --> 00:14:15.705
<v Speaker 0>guiding you through, okay, what is Spin?

00:14:15.865 --> 00:14:19.225
<v Speaker 0>How to install it on different operating systems?

00:14:19.225 --> 00:14:21.145
<v Speaker 0>And then we have language guides.

00:14:21.770 --> 00:14:23.930
<v Speaker 0>Right? Because there is like,

00:14:24.170 --> 00:14:26.650
<v Speaker 0>you know, there are so many languages that

00:14:26.650 --> 00:14:29.850
<v Speaker 0>you can use to build WebAssembly workloads.

00:14:30.330 --> 00:14:30.970
<v Speaker 0>We

00:14:31.930 --> 00:14:34.250
<v Speaker 0>have detailed information on, for example,

00:14:34.855 --> 00:14:37.655
<v Speaker 0>how I wanna use rust, right, for example.

00:14:37.735 --> 00:14:40.775
<v Speaker 0>So what do I have to install?

00:14:41.335 --> 00:14:43.495
<v Speaker 0>So you need rust, you need a

00:14:44.055 --> 00:14:46.775
<v Speaker 0>given target, the wasn't 32 was a p

00:14:46.775 --> 00:14:50.535
<v Speaker 0>one target. So there's documentation for like our

00:14:50.910 --> 00:14:52.510
<v Speaker 0>main languages,

00:14:52.510 --> 00:14:54.670
<v Speaker 0>but also for other languages that are that

00:14:54.670 --> 00:14:57.070
<v Speaker 0>you could take as of today and compile

00:14:57.070 --> 00:14:58.510
<v Speaker 0>down to WebAssembly.

00:14:59.870 --> 00:15:02.830
<v Speaker 0>But I think we should not spend time

00:15:02.990 --> 00:15:03.389
<v Speaker 0>on,

00:15:04.415 --> 00:15:07.135
<v Speaker 0>you know, telling people how to install Node.

00:15:07.135 --> 00:15:09.215
<v Speaker 0>Js in our example, because I think that's

00:15:09.215 --> 00:15:11.215
<v Speaker 0>a problem already solved out

00:15:11.855 --> 00:15:12.975
<v Speaker 0>solved and

00:15:13.535 --> 00:15:14.735
<v Speaker 0>we should

00:15:14.735 --> 00:15:15.935
<v Speaker 0>get started

00:15:16.095 --> 00:15:16.655
<v Speaker 0>by

00:15:16.940 --> 00:15:19.180
<v Speaker 0>taking Spin for a spin.

00:15:19.660 --> 00:15:21.020
<v Speaker 0>So I'm on

00:15:21.180 --> 00:15:24.459
<v Speaker 0>macOS and I'm a Homebrew user. So I

00:15:24.459 --> 00:15:25.980
<v Speaker 0>installed Spin

00:15:26.060 --> 00:15:27.420
<v Speaker 0>using Homebrew.

00:15:27.500 --> 00:15:30.380
<v Speaker 0>However, there's also install script that you can

00:15:30.380 --> 00:15:32.995
<v Speaker 0>just curl and execute on your machine

00:15:33.235 --> 00:15:34.915
<v Speaker 0>that works across

00:15:35.475 --> 00:15:37.875
<v Speaker 0>Linux, different Linux distributions

00:15:37.875 --> 00:15:40.915
<v Speaker 0>that works on Mac OS as well. And

00:15:40.915 --> 00:15:42.595
<v Speaker 0>obviously for Windows,

00:15:43.235 --> 00:15:46.250
<v Speaker 0>we provide binaries that you can download and

00:15:46.250 --> 00:15:48.730
<v Speaker 0>use on a on a Windows machine.

00:15:50.010 --> 00:15:51.610
<v Speaker 0>I haven't used Windows,

00:15:51.850 --> 00:15:53.290
<v Speaker 0>to be honest, in the last

00:15:53.690 --> 00:15:55.210
<v Speaker 0>ten years or so.

00:15:56.250 --> 00:15:58.425
<v Speaker 0>Looked into quite good these days. I mean

00:15:59.145 --> 00:16:02.185
<v Speaker 0>Yeah, it is. You know, I always struggle

00:16:02.185 --> 00:16:04.585
<v Speaker 0>with what I refer to as the device

00:16:04.585 --> 00:16:05.625
<v Speaker 0>romance.

00:16:05.865 --> 00:16:08.105
<v Speaker 0>That's like having like

00:16:09.065 --> 00:16:11.945
<v Speaker 0>a brick like my MacBook Pro with Windows.

00:16:11.945 --> 00:16:12.985
<v Speaker 0>Okay. Maybe

00:16:13.460 --> 00:16:16.020
<v Speaker 0>that could be an option that I could

00:16:16.020 --> 00:16:18.740
<v Speaker 0>could look into. But yeah, I'm always lacking

00:16:18.740 --> 00:16:20.820
<v Speaker 0>like those those those nice

00:16:21.060 --> 00:16:21.860
<v Speaker 0>capabilities

00:16:21.860 --> 00:16:25.220
<v Speaker 0>provided by Apple Silicon and their battery life.

00:16:26.365 --> 00:16:29.325
<v Speaker 0>Anyways, we're not here. So I run NextOS.

00:16:29.325 --> 00:16:31.165
<v Speaker 1>So for everyone else who's in that Next

00:16:31.165 --> 00:16:33.485
<v Speaker 1>ecosystem, there is a Next package for spin,

00:16:33.485 --> 00:16:34.925
<v Speaker 1>and it works great.

00:16:35.165 --> 00:16:37.005
<v Speaker 1>Unlike you Awesome. On your Apple device, I

00:16:37.005 --> 00:16:39.084
<v Speaker 1>get about three hours battery on my laptop

00:16:39.084 --> 00:16:41.779
<v Speaker 1>because it's Linux and x 86. So what

00:16:41.779 --> 00:16:42.500
<v Speaker 1>can you do?

00:16:44.339 --> 00:16:47.300
<v Speaker 0>Yeah. That's I think yeah. We could go

00:16:47.300 --> 00:16:49.220
<v Speaker 0>deep on recommending

00:16:49.220 --> 00:16:49.940
<v Speaker 0>different

00:16:50.339 --> 00:16:51.300
<v Speaker 0>recommending

00:16:51.300 --> 00:16:52.899
<v Speaker 0>different hardware

00:16:52.899 --> 00:16:54.180
<v Speaker 0>and operating systems.

00:16:54.805 --> 00:16:56.085
<v Speaker 0>But I think the

00:16:56.405 --> 00:16:57.685
<v Speaker 0>most important

00:16:57.765 --> 00:17:00.325
<v Speaker 0>takeaway over here is that Spin is available

00:17:00.325 --> 00:17:03.925
<v Speaker 0>for all those popular operating systems, for all

00:17:03.925 --> 00:17:04.724
<v Speaker 0>the

00:17:05.045 --> 00:17:05.925
<v Speaker 0>architectures

00:17:05.925 --> 00:17:08.724
<v Speaker 0>on those operating systems that

00:17:08.885 --> 00:17:11.819
<v Speaker 0>people ask for. Right? So for Windows, there's

00:17:11.819 --> 00:17:12.700
<v Speaker 0>an x

00:17:13.339 --> 00:17:16.460
<v Speaker 0>64 build for macOS. Obviously, have Intel ARM

00:17:16.460 --> 00:17:18.940
<v Speaker 0>builds for Linux. We have Intel ARM builds.

00:17:19.579 --> 00:17:20.539
<v Speaker 0>Yeah. So

00:17:21.180 --> 00:17:24.904
<v Speaker 0>choose your poison and then install Spin

00:17:25.464 --> 00:17:26.904
<v Speaker 0>using your preferred

00:17:27.065 --> 00:17:27.865
<v Speaker 0>way.

00:17:27.945 --> 00:17:29.865
<v Speaker 0>I know a few people that use Brew

00:17:29.865 --> 00:17:33.225
<v Speaker 0>on Linux, although that felt alien to me,

00:17:34.025 --> 00:17:34.985
<v Speaker 0>but that works as well.

00:17:35.880 --> 00:17:36.520
<v Speaker 0>Awesome.

00:17:37.160 --> 00:17:39.080
<v Speaker 0>Okay. So I obviously

00:17:39.080 --> 00:17:40.520
<v Speaker 0>have installed

00:17:41.480 --> 00:17:43.480
<v Speaker 0>Spin. Let me bump the font size. I

00:17:43.480 --> 00:17:44.520
<v Speaker 0>think this should work.

00:17:44.840 --> 00:17:46.440
<v Speaker 1>Yeah. I mean, that looks okay for me.

00:17:46.440 --> 00:17:48.200
<v Speaker 1>If anyone has any issues reading that, please

00:17:48.200 --> 00:17:49.765
<v Speaker 1>let us know in the comments and we

00:17:49.765 --> 00:17:51.685
<v Speaker 1>will increase it some more. But I think

00:17:51.685 --> 00:17:54.485
<v Speaker 1>it looks good, man. All good. Okay. Cool.

00:17:54.485 --> 00:17:57.044
<v Speaker 0>So I have installed Spin on my machine.

00:17:57.765 --> 00:18:00.085
<v Speaker 0>Let me quickly do a Witch,

00:18:00.405 --> 00:18:01.765
<v Speaker 0>Spin over here.

00:18:02.805 --> 00:18:05.179
<v Speaker 0>We also have a version manager for spin,

00:18:05.179 --> 00:18:07.420
<v Speaker 0>but I wouldn't go that deep into detail

00:18:07.420 --> 00:18:09.820
<v Speaker 0>of the different plugins that I'm running right

00:18:09.820 --> 00:18:10.299
<v Speaker 0>now.

00:18:10.620 --> 00:18:13.100
<v Speaker 0>I think most important takeaway is I have

00:18:13.100 --> 00:18:15.580
<v Speaker 0>a spin executable in my path

00:18:15.820 --> 00:18:19.100
<v Speaker 0>and I can use spin version to determine,

00:18:19.100 --> 00:18:21.865
<v Speaker 0>hey, I'm on a on a recent version

00:18:21.865 --> 00:18:22.825
<v Speaker 0>of Spin.

00:18:23.625 --> 00:18:26.024
<v Speaker 0>And I have installed NVM

00:18:26.185 --> 00:18:27.304
<v Speaker 0>as my

00:18:27.865 --> 00:18:30.425
<v Speaker 0>node manager. And right now I switched to

00:18:30.425 --> 00:18:34.105
<v Speaker 0>node 22. So I think that's the latest

00:18:33.660 --> 00:18:36.620
<v Speaker 0>LTS or the most recent LTS version.

00:18:37.260 --> 00:18:37.820
<v Speaker 0>So

00:18:39.180 --> 00:18:41.180
<v Speaker 0>the idea is to start from scratch, build

00:18:41.180 --> 00:18:42.940
<v Speaker 0>a hello world in the first place. So

00:18:42.940 --> 00:18:45.180
<v Speaker 0>the spin workflow is I have my language

00:18:45.180 --> 00:18:47.180
<v Speaker 0>specific tooling installed.

00:18:47.180 --> 00:18:49.925
<v Speaker 0>We're right now wearing the hat of a

00:18:49.925 --> 00:18:51.845
<v Speaker 0>JavaScriptTypeScript

00:18:51.845 --> 00:18:52.725
<v Speaker 0>developer,

00:18:53.045 --> 00:18:54.325
<v Speaker 0>right? So I

00:18:54.965 --> 00:18:57.525
<v Speaker 0>stumbled upon that spin new command in

00:18:57.925 --> 00:19:00.885
<v Speaker 0>the spin docs, curious about that. I execute

00:19:00.885 --> 00:19:01.365
<v Speaker 0>it

00:19:01.765 --> 00:19:05.710
<v Speaker 0>and I get asked by the CLI, hey,

00:19:06.030 --> 00:19:08.669
<v Speaker 0>just pick a template to start your application.

00:19:08.990 --> 00:19:12.030
<v Speaker 0>Right? So there we provide different templates. You

00:19:12.030 --> 00:19:14.830
<v Speaker 0>can roll your own. The community already created

00:19:14.830 --> 00:19:15.710
<v Speaker 0>several

00:19:15.710 --> 00:19:17.845
<v Speaker 0>templates that you can just install from a

00:19:17.845 --> 00:19:19.445
<v Speaker 0>git endpoint or so.

00:19:20.164 --> 00:19:20.724
<v Speaker 0>And

00:19:20.965 --> 00:19:23.364
<v Speaker 0>let's say we wanna roll with TypeScript

00:19:23.605 --> 00:19:25.684
<v Speaker 0>for the sake of this example.

00:19:26.804 --> 00:19:29.445
<v Speaker 0>So I choose the template. I provide a

00:19:29.445 --> 00:19:32.085
<v Speaker 0>name for my app. And as I promised,

00:19:32.085 --> 00:19:33.365
<v Speaker 0>we do a hello world

00:19:33.580 --> 00:19:36.140
<v Speaker 0>over here. We skip the description

00:19:36.300 --> 00:19:37.100
<v Speaker 0>for now.

00:19:37.820 --> 00:19:41.180
<v Speaker 0>And as I as I've chosen HTTP

00:19:41.180 --> 00:19:41.900
<v Speaker 0>TS,

00:19:42.220 --> 00:19:45.340
<v Speaker 0>so before the hyphen, there's the the kind

00:19:45.340 --> 00:19:48.625
<v Speaker 0>of trigger. So what will actually make my

00:19:48.625 --> 00:19:49.825
<v Speaker 0>workload run?

00:19:50.305 --> 00:19:54.225
<v Speaker 0>And it is obviously incoming HTTP requests in

00:19:54.225 --> 00:19:56.465
<v Speaker 0>that in the case of HTTP

00:19:56.465 --> 00:19:57.184
<v Speaker 0>dash.

00:19:57.505 --> 00:19:59.424
<v Speaker 0>So I have to tell

00:19:59.585 --> 00:20:00.225
<v Speaker 0>Spin

00:20:00.649 --> 00:20:03.450
<v Speaker 0>on which routes it should invoke

00:20:03.450 --> 00:20:05.609
<v Speaker 0>my WebAssembly application.

00:20:05.690 --> 00:20:09.370
<v Speaker 0>So forward slash and three dot basically

00:20:09.370 --> 00:20:10.329
<v Speaker 0>means

00:20:10.490 --> 00:20:11.450
<v Speaker 0>everything

00:20:12.090 --> 00:20:14.970
<v Speaker 0>starting from the root route and all its

00:20:14.970 --> 00:20:16.169
<v Speaker 0>children routes

00:20:16.845 --> 00:20:17.965
<v Speaker 0>below that.

00:20:18.525 --> 00:20:20.285
<v Speaker 0>But we could be more precise. We could,

00:20:20.285 --> 00:20:22.445
<v Speaker 0>for example, say I'm building an API

00:20:22.684 --> 00:20:25.325
<v Speaker 0>and I just want to respond to incoming

00:20:25.325 --> 00:20:28.365
<v Speaker 0>calls on my listener that is like a

00:20:28.365 --> 00:20:29.725
<v Speaker 0>port

00:20:29.390 --> 00:20:30.030
<v Speaker 0>or

00:20:30.430 --> 00:20:31.950
<v Speaker 0>a custom domain name,

00:20:32.990 --> 00:20:34.830
<v Speaker 0>followed by a forward slash,

00:20:35.150 --> 00:20:38.270
<v Speaker 0>followed by the API prefix and then everything

00:20:38.270 --> 00:20:39.470
<v Speaker 0>underneath that.

00:20:40.030 --> 00:20:40.590
<v Speaker 0>But

00:20:41.150 --> 00:20:42.910
<v Speaker 0>let's stick with the defaults for now.

00:20:43.945 --> 00:20:44.664
<v Speaker 0>Okay.

00:20:44.825 --> 00:20:47.065
<v Speaker 0>So what we got right now is we

00:20:47.065 --> 00:20:49.384
<v Speaker 0>got a new hello world folder. If we

00:20:49.384 --> 00:20:50.824
<v Speaker 0>move into that one

00:20:51.225 --> 00:20:54.345
<v Speaker 0>and explore that for a second, we see

00:20:54.345 --> 00:20:56.504
<v Speaker 0>a lot of familiar

00:20:56.680 --> 00:20:57.880
<v Speaker 0>file names

00:20:58.120 --> 00:20:59.160
<v Speaker 0>from

00:20:59.160 --> 00:21:01.880
<v Speaker 0>a typical TypeScript project. Right? We see a

00:21:01.880 --> 00:21:04.760
<v Speaker 0>package JSON like in every JavaScript project. We

00:21:04.760 --> 00:21:08.039
<v Speaker 0>see a TSConfig JSON, a Webpack config. So

00:21:08.200 --> 00:21:10.280
<v Speaker 0>it should look pretty familiar

00:21:10.774 --> 00:21:14.054
<v Speaker 0>for a JavaScript slash TypeScript developer

00:21:14.134 --> 00:21:17.255
<v Speaker 0>because we wanna align or our intention is

00:21:17.255 --> 00:21:19.254
<v Speaker 0>to align with the idioms

00:21:19.255 --> 00:21:21.174
<v Speaker 0>that are like,

00:21:21.575 --> 00:21:24.534
<v Speaker 0>you know, set in stone for whatever language

00:21:24.534 --> 00:21:28.040
<v Speaker 0>you choose. Right? Are there any plans to

00:21:28.040 --> 00:21:28.760
<v Speaker 1>support

00:21:29.000 --> 00:21:31.560
<v Speaker 1>you know, obviously, this is using node 22.

00:21:31.560 --> 00:21:33.560
<v Speaker 1>We've got the TS config. We see Webpack's

00:21:33.560 --> 00:21:35.240
<v Speaker 1>being used for the, you know, the bundling

00:21:35.240 --> 00:21:37.480
<v Speaker 1>aspect of it. Are there any plans to

00:21:37.480 --> 00:21:40.120
<v Speaker 1>support something like Deno or Bard an alternative

00:21:40.120 --> 00:21:42.655
<v Speaker 1>TypeScript runtimes in the Or is it kind

00:21:42.655 --> 00:21:44.495
<v Speaker 1>of tied to Webpack for the time being?

00:21:45.135 --> 00:21:45.935
<v Speaker 0>So

00:21:45.935 --> 00:21:50.415
<v Speaker 0>regarding bundling or packaging like those modules, we

00:21:50.655 --> 00:21:53.295
<v Speaker 0>I think there is no plan on replacing

00:21:53.295 --> 00:21:54.655
<v Speaker 0>Webpack right now.

00:21:56.420 --> 00:21:58.659
<v Speaker 0>Regarding the underlying runtime,

00:21:58.980 --> 00:21:59.620
<v Speaker 0>so

00:21:59.940 --> 00:22:00.740
<v Speaker 0>with

00:22:00.980 --> 00:22:03.460
<v Speaker 0>I think couple of months ago, we released

00:22:03.460 --> 00:22:06.020
<v Speaker 0>version three dot o of the Spin SDK

00:22:06.020 --> 00:22:06.980
<v Speaker 0>for JavaScript.

00:22:08.795 --> 00:22:12.875
<v Speaker 0>That relies on a runtime called StarlingMonkey.

00:22:14.875 --> 00:22:16.395
<v Speaker 0>So StarlingMonkey

00:22:16.395 --> 00:22:17.115
<v Speaker 0>is

00:22:17.915 --> 00:22:21.755
<v Speaker 0>like is a JavaScript runtime maintained by the

00:22:21.755 --> 00:22:22.875
<v Speaker 0>bytecode lines

00:22:24.070 --> 00:22:28.549
<v Speaker 0>that we package together with your application source

00:22:28.549 --> 00:22:29.269
<v Speaker 0>code

00:22:29.990 --> 00:22:32.709
<v Speaker 0>into the web web assembly binary

00:22:32.789 --> 00:22:34.230
<v Speaker 0>that you distribute

00:22:34.230 --> 00:22:35.109
<v Speaker 0>across

00:22:35.269 --> 00:22:38.575
<v Speaker 0>like boundaries across, you know, maybe you upload

00:22:38.575 --> 00:22:40.095
<v Speaker 0>it to Firmware Cloud.

00:22:40.415 --> 00:22:42.895
<v Speaker 0>So your app is fully functioning

00:22:43.135 --> 00:22:46.015
<v Speaker 0>and you don't need any kind of JavaScript

00:22:46.015 --> 00:22:47.294
<v Speaker 0>runtime on

00:22:47.615 --> 00:22:51.240
<v Speaker 0>this server or this serverless platform, right on

00:22:51.240 --> 00:22:52.600
<v Speaker 0>the on the target,

00:22:52.760 --> 00:22:53.480
<v Speaker 0>so to say.

00:22:54.600 --> 00:22:56.279
<v Speaker 0>So regarding runtimes,

00:22:56.280 --> 00:22:59.159
<v Speaker 0>we recently switched to StarlingMonkey

00:22:59.160 --> 00:23:02.520
<v Speaker 0>regarding bundling and tooling in the JavaScript

00:23:02.585 --> 00:23:03.625
<v Speaker 0>templates.

00:23:04.585 --> 00:23:06.264
<v Speaker 0>That's what we currently have.

00:23:06.825 --> 00:23:08.905
<v Speaker 0>I would love to, you know, chat about

00:23:08.905 --> 00:23:11.545
<v Speaker 0>what's the current state. Is Webpack still the

00:23:11.545 --> 00:23:12.825
<v Speaker 0>cool kit? Or

00:23:13.225 --> 00:23:16.185
<v Speaker 0>is everything is everyone moving away from that?

00:23:17.039 --> 00:23:18.880
<v Speaker 0>I will be super happy to to get

00:23:18.880 --> 00:23:21.519
<v Speaker 0>feedback on that one and to bring in

00:23:21.519 --> 00:23:22.719
<v Speaker 0>like a simple

00:23:22.880 --> 00:23:23.919
<v Speaker 0>variable.

00:23:24.000 --> 00:23:27.119
<v Speaker 0>Right? Those templates can ask questions.

00:23:27.679 --> 00:23:30.159
<v Speaker 0>So by default, we right now use NPM

00:23:30.159 --> 00:23:31.360
<v Speaker 0>as a package manager.

00:23:32.695 --> 00:23:35.655
<v Speaker 0>I've already created a PR to bring in

00:23:35.655 --> 00:23:38.695
<v Speaker 0>YARN and p and the other one p

00:23:38.695 --> 00:23:39.255
<v Speaker 0>n

00:23:39.815 --> 00:23:43.015
<v Speaker 0>p n, I guess, if I remember correct.

00:23:43.015 --> 00:23:43.495
<v Speaker 0>Yeah.

00:23:44.375 --> 00:23:45.895
<v Speaker 0>P n p m is still

00:23:46.780 --> 00:23:48.940
<v Speaker 0>We still have to file a PR for

00:23:48.940 --> 00:23:51.740
<v Speaker 0>that one. But yeah, we are continuously

00:23:51.740 --> 00:23:56.460
<v Speaker 0>improving those templates to meet the community where

00:23:56.700 --> 00:23:57.419
<v Speaker 0>it is.

00:23:58.059 --> 00:23:59.100
<v Speaker 1>All right. Thank you.

00:24:00.235 --> 00:24:02.475
<v Speaker 0>So there's one addition.

00:24:02.475 --> 00:24:04.794
<v Speaker 0>Oh, sorry, did I interrupt you?

00:24:05.915 --> 00:24:07.755
<v Speaker 1>No, no, no, you didn't. I was just

00:24:07.755 --> 00:24:09.595
<v Speaker 1>saying thank you. Okay.

00:24:10.955 --> 00:24:13.400
<v Speaker 0>Now I thought you were just taking

00:24:13.400 --> 00:24:16.840
<v Speaker 0>a break to ask another question. But anyways.

00:24:17.320 --> 00:24:18.359
<v Speaker 0>So this is,

00:24:18.760 --> 00:24:21.559
<v Speaker 0>as I said, should look familiar for JavaScript

00:24:21.559 --> 00:24:23.080
<v Speaker 0>or Node developers

00:24:23.320 --> 00:24:26.600
<v Speaker 0>with one exception that being spin dot toml.

00:24:26.955 --> 00:24:29.034
<v Speaker 0>So if we open up the folder in

00:24:29.034 --> 00:24:30.075
<v Speaker 0>in code,

00:24:30.475 --> 00:24:31.354
<v Speaker 0>for example,

00:24:31.355 --> 00:24:32.715
<v Speaker 0>to browser

00:24:32.715 --> 00:24:35.914
<v Speaker 0>to, you know, move around in those files.

00:24:36.235 --> 00:24:39.034
<v Speaker 0>So the spin toml, that's the application manifest

00:24:39.034 --> 00:24:41.434
<v Speaker 0>where all the things are pulled together.

00:24:42.010 --> 00:24:44.169
<v Speaker 0>So we have some fundamental

00:24:44.169 --> 00:24:46.169
<v Speaker 0>information about the application.

00:24:48.330 --> 00:24:49.690
<v Speaker 0>We have, okay,

00:24:50.090 --> 00:24:53.049
<v Speaker 0>configuration for the trigger. So what is basically

00:24:53.289 --> 00:24:56.250
<v Speaker 0>responsible for making my my app

00:24:56.975 --> 00:24:57.775
<v Speaker 0>run.

00:24:58.015 --> 00:25:02.015
<v Speaker 0>Right? That's incoming HTTP requests on all and

00:25:02.015 --> 00:25:03.215
<v Speaker 0>on all routes.

00:25:03.535 --> 00:25:06.415
<v Speaker 0>If we receive such an HTTP request, we

00:25:06.415 --> 00:25:07.695
<v Speaker 0>wanna invoke

00:25:07.695 --> 00:25:09.375
<v Speaker 0>the hello world component.

00:25:11.549 --> 00:25:15.950
<v Speaker 0>And for components, we always have two configuration

00:25:15.950 --> 00:25:16.830
<v Speaker 0>tables.

00:25:16.830 --> 00:25:17.869
<v Speaker 0>One is the

00:25:18.190 --> 00:25:19.070
<v Speaker 0>component

00:25:19.070 --> 00:25:19.870
<v Speaker 0>configuration

00:25:19.870 --> 00:25:21.390
<v Speaker 0>where we specify,

00:25:21.390 --> 00:25:21.950
<v Speaker 0>okay,

00:25:22.270 --> 00:25:25.630
<v Speaker 0>the wasm module is here and

00:25:25.085 --> 00:25:27.804
<v Speaker 0>please exclude the following files.

00:25:28.445 --> 00:25:30.605
<v Speaker 0>And we have build instructions.

00:25:31.085 --> 00:25:31.644
<v Speaker 0>Because

00:25:32.285 --> 00:25:35.165
<v Speaker 0>if you think about, you know, building more

00:25:35.165 --> 00:25:38.765
<v Speaker 0>complex systems with spin and maybe use Python

00:25:38.765 --> 00:25:41.490
<v Speaker 0>for one where Python makes most sense.

00:25:41.810 --> 00:25:44.130
<v Speaker 0>You use Rust for something where you wanna

00:25:44.130 --> 00:25:46.210
<v Speaker 0>get wanna have best performance

00:25:46.610 --> 00:25:49.570
<v Speaker 0>and you wanna use TypeScript for a different

00:25:49.570 --> 00:25:50.929
<v Speaker 0>component where you

00:25:51.170 --> 00:25:53.970
<v Speaker 0>wanna meet the developer or where your I

00:25:53.970 --> 00:25:55.330
<v Speaker 0>don't know, your teammates

00:25:55.425 --> 00:25:58.385
<v Speaker 0>are most confident in writing TypeScript. So you

00:25:58.385 --> 00:26:00.145
<v Speaker 0>may end up with a mixture

00:26:00.385 --> 00:26:01.665
<v Speaker 0>of languages.

00:26:02.305 --> 00:26:03.745
<v Speaker 0>However, we think

00:26:04.145 --> 00:26:06.945
<v Speaker 0>that the DX, the developer experience should be

00:26:06.945 --> 00:26:09.105
<v Speaker 0>consistent across those languages.

00:26:09.950 --> 00:26:11.070
<v Speaker 0>So spin

00:26:11.150 --> 00:26:13.790
<v Speaker 0>gives you a spin build command. Under the

00:26:13.790 --> 00:26:17.470
<v Speaker 0>covers, we execute whatever's mentioned over here for

00:26:17.470 --> 00:26:19.230
<v Speaker 0>this particular component.

00:26:20.510 --> 00:26:23.710
<v Speaker 0>We also have like a spin watch command

00:26:23.284 --> 00:26:26.245
<v Speaker 0>so that you can while you code behind

00:26:26.245 --> 00:26:29.205
<v Speaker 0>the scenes, the app gets recompiled

00:26:29.365 --> 00:26:32.724
<v Speaker 0>and you have like those hot reload capabilities.

00:26:33.445 --> 00:26:34.004
<v Speaker 0>So

00:26:34.325 --> 00:26:35.125
<v Speaker 0>whenever

00:26:35.125 --> 00:26:37.769
<v Speaker 0>you execute a spin watch, whatever is mentioned

00:26:37.769 --> 00:26:40.330
<v Speaker 0>in line 19 will be executed for the

00:26:40.330 --> 00:26:41.769
<v Speaker 0>sake of this component.

00:26:42.090 --> 00:26:44.969
<v Speaker 0>So basically, it's that, you know,

00:26:45.289 --> 00:26:49.370
<v Speaker 0>translating an agnostic workflow into a language specific

00:26:49.370 --> 00:26:50.249
<v Speaker 0>workflow.

00:26:50.250 --> 00:26:52.330
<v Speaker 0>That's basically what we have over here.

00:26:54.275 --> 00:26:57.315
<v Speaker 0>I think the component configuration is something we

00:26:57.315 --> 00:27:00.435
<v Speaker 0>will revisit for a more realistic

00:27:00.435 --> 00:27:02.195
<v Speaker 0>demo in a few minutes.

00:27:02.515 --> 00:27:05.635
<v Speaker 0>But for now, think of it as fundamental

00:27:05.635 --> 00:27:07.155
<v Speaker 0>or basic component

00:27:07.519 --> 00:27:08.639
<v Speaker 0>configuration.

00:27:09.759 --> 00:27:13.039
<v Speaker 0>So that's really the only special thing in

00:27:13.039 --> 00:27:14.720
<v Speaker 0>a spin application

00:27:14.720 --> 00:27:16.159
<v Speaker 0>is the spin

00:27:16.240 --> 00:27:17.440
<v Speaker 0>TOML file.

00:27:17.679 --> 00:27:20.000
<v Speaker 0>We have a source folder with an index

00:27:20.000 --> 00:27:21.999
<v Speaker 0>TS and we decided

00:27:22.159 --> 00:27:22.639
<v Speaker 0>to

00:27:23.815 --> 00:27:26.855
<v Speaker 0>provide or to use or to add IDRouter,

00:27:27.415 --> 00:27:29.495
<v Speaker 0>which is like a popular router in a

00:27:29.495 --> 00:27:31.175
<v Speaker 0>in a known ecosystem

00:27:31.175 --> 00:27:34.615
<v Speaker 0>that's not tied or tightly coupled to a

00:27:34.615 --> 00:27:37.640
<v Speaker 0>framework. We just wanna have a router over

00:27:37.640 --> 00:27:38.120
<v Speaker 0>here.

00:27:38.600 --> 00:27:41.160
<v Speaker 0>However, you could also use Hono, I think

00:27:41.160 --> 00:27:43.720
<v Speaker 0>is the other popular router in an old

00:27:43.720 --> 00:27:44.360
<v Speaker 0>world

00:27:44.920 --> 00:27:45.720
<v Speaker 0>to

00:27:46.200 --> 00:27:47.800
<v Speaker 0>create routing capabilities.

00:27:49.125 --> 00:27:51.765
<v Speaker 0>So this is basically the hello world example.

00:27:51.765 --> 00:27:54.645
<v Speaker 0>Right? So we register to get routes or

00:27:54.645 --> 00:27:57.605
<v Speaker 0>API will only respond to incoming get requests

00:27:57.605 --> 00:27:59.924
<v Speaker 0>at root route or at hello.

00:28:00.325 --> 00:28:01.700
<v Speaker 0>And as,

00:28:01.780 --> 00:28:03.860
<v Speaker 0>you know, you may already guess, there is

00:28:03.860 --> 00:28:06.100
<v Speaker 0>a route parameter called name.

00:28:06.340 --> 00:28:08.100
<v Speaker 0>So it does not matter if I if

00:28:08.100 --> 00:28:10.420
<v Speaker 0>I send a get request to hello David

00:28:10.420 --> 00:28:12.419
<v Speaker 0>or to hello slash torsten.

00:28:12.740 --> 00:28:16.500
<v Speaker 0>We expect that to be returned via HTTP.

00:28:16.635 --> 00:28:19.914
<v Speaker 0>So like a personalized greeting API

00:28:20.075 --> 00:28:21.355
<v Speaker 0>or personalized

00:28:21.355 --> 00:28:22.475
<v Speaker 0>hello world.

00:28:23.995 --> 00:28:25.435
<v Speaker 0>So let's do

00:28:25.435 --> 00:28:26.635
<v Speaker 0>some housekeeping

00:28:26.635 --> 00:28:28.635
<v Speaker 0>over here. We have some squiggly lines because

00:28:28.635 --> 00:28:29.115
<v Speaker 0>I haven't,

00:28:29.970 --> 00:28:33.169
<v Speaker 0>but because I did not run NPM install

00:28:33.490 --> 00:28:36.610
<v Speaker 0>so far. And we think that something that

00:28:36.610 --> 00:28:38.450
<v Speaker 0>should happen automatically.

00:28:39.010 --> 00:28:41.490
<v Speaker 0>So let me move back to the terminal

00:28:41.490 --> 00:28:42.529
<v Speaker 0>pretty quickly.

00:28:42.929 --> 00:28:44.929
<v Speaker 0>I'm in the hello world folder

00:28:45.265 --> 00:28:48.145
<v Speaker 0>again. So this is where SpinToma resists and

00:28:48.145 --> 00:28:49.904
<v Speaker 0>I'd simply do a spin build.

00:28:50.465 --> 00:28:53.265
<v Speaker 0>So right now it's double checking, oh, Torsten

00:28:53.265 --> 00:28:54.145
<v Speaker 0>decided

00:28:54.145 --> 00:28:56.945
<v Speaker 0>to use TypeScript and the build instruction

00:28:57.105 --> 00:28:58.544
<v Speaker 0>tells the tooling,

00:28:58.625 --> 00:29:00.544
<v Speaker 0>hey, run an NPM install.

00:29:01.820 --> 00:29:03.900
<v Speaker 0>That takes a while right now.

00:29:04.140 --> 00:29:04.860
<v Speaker 0>For that.

00:29:06.140 --> 00:29:08.700
<v Speaker 0>It's pulling down the dependencies.

00:29:08.780 --> 00:29:09.820
<v Speaker 0>And right now

00:29:10.300 --> 00:29:12.779
<v Speaker 0>it's executing the build instruction.

00:29:13.020 --> 00:29:14.860
<v Speaker 0>So there is a build command and let

00:29:14.860 --> 00:29:15.900
<v Speaker 0>me go back into

00:29:17.335 --> 00:29:19.735
<v Speaker 0>package JSON. So there is, you know, we

00:29:19.735 --> 00:29:23.735
<v Speaker 0>use some tooling that we created and again,

00:29:23.735 --> 00:29:26.614
<v Speaker 0>upstream tooling from the bytecode alliance

00:29:26.855 --> 00:29:28.455
<v Speaker 0>to take your

00:29:28.615 --> 00:29:32.369
<v Speaker 0>JavaScript source code that could just, you know,

00:29:32.529 --> 00:29:34.450
<v Speaker 0>be one file that could be like a

00:29:34.450 --> 00:29:36.609
<v Speaker 0>regular project layout. It doesn't matter.

00:29:37.010 --> 00:29:39.489
<v Speaker 0>And turn that into

00:29:39.890 --> 00:29:41.729
<v Speaker 0>a WebAssembly module.

00:29:41.730 --> 00:29:44.850
<v Speaker 0>So we end up by executing that spin

00:29:44.850 --> 00:29:45.649
<v Speaker 0>build

00:29:45.945 --> 00:29:48.904
<v Speaker 0>with a hello world dot wasm file.

00:29:50.345 --> 00:29:53.465
<v Speaker 0>If we now look at lsla

00:29:53.465 --> 00:29:55.464
<v Speaker 0>dist was the subfolder,

00:29:55.705 --> 00:29:57.784
<v Speaker 0>we can see, oh, let's add an h

00:29:57.784 --> 00:30:00.820
<v Speaker 0>over there. So that's 12 megabytes in size

00:30:00.820 --> 00:30:02.100
<v Speaker 0>for Hello World.

00:30:02.580 --> 00:30:03.220
<v Speaker 0>But

00:30:03.940 --> 00:30:07.620
<v Speaker 0>it's not just our application code. It's also

00:30:07.860 --> 00:30:08.580
<v Speaker 0>the

00:30:08.900 --> 00:30:12.340
<v Speaker 0>JavaScript runtime that I mentioned earlier. Starling Monkey

00:30:12.340 --> 00:30:14.260
<v Speaker 0>is part of this distributable.

00:30:15.275 --> 00:30:15.914
<v Speaker 0>Right?

00:30:16.395 --> 00:30:18.955
<v Speaker 0>So how does that work? Behind the scenes,

00:30:19.115 --> 00:30:20.634
<v Speaker 0>we take

00:30:20.794 --> 00:30:21.914
<v Speaker 0>and I think that's super

00:30:23.195 --> 00:30:25.674
<v Speaker 0>that's nothing, you know, people have to be

00:30:25.674 --> 00:30:28.700
<v Speaker 0>aware of when building their first applications.

00:30:28.700 --> 00:30:30.620
<v Speaker 0>But to me as a developer, I think

00:30:30.620 --> 00:30:31.739
<v Speaker 0>this is super

00:30:32.940 --> 00:30:35.740
<v Speaker 0>that's just awesome technology what happens on the

00:30:35.740 --> 00:30:39.179
<v Speaker 0>covers. Right? We have this as the user

00:30:39.179 --> 00:30:41.485
<v Speaker 0>code or we often refer to as the

00:30:41.485 --> 00:30:43.805
<v Speaker 0>guest code. So that will become the WebAssembly

00:30:43.805 --> 00:30:44.525
<v Speaker 0>module.

00:30:45.005 --> 00:30:46.205
<v Speaker 0>So we take

00:30:47.245 --> 00:30:48.045
<v Speaker 0>your,

00:30:48.285 --> 00:30:49.325
<v Speaker 0>that code.

00:30:50.765 --> 00:30:52.845
<v Speaker 0>We take that StarlingMonkey

00:30:52.845 --> 00:30:53.965
<v Speaker 0>JavaScript engine.

00:30:54.540 --> 00:30:57.420
<v Speaker 0>So we start that engine during the build.

00:30:57.900 --> 00:31:00.380
<v Speaker 0>We load the user code that loads, you

00:31:00.380 --> 00:31:01.340
<v Speaker 0>know, a

00:31:01.900 --> 00:31:04.460
<v Speaker 0>vast amount of node JS dependencies

00:31:04.460 --> 00:31:07.100
<v Speaker 0>the entire tree depending on what we import

00:31:08.065 --> 00:31:09.265
<v Speaker 0>and evaluate

00:31:09.265 --> 00:31:10.785
<v Speaker 0>the global scope.

00:31:12.145 --> 00:31:14.225
<v Speaker 0>And once we have evaluated

00:31:14.225 --> 00:31:15.745
<v Speaker 0>the global scope,

00:31:16.145 --> 00:31:18.065
<v Speaker 0>we take a memory snapshot

00:31:18.065 --> 00:31:20.385
<v Speaker 0>from that and write that to disk.

00:31:21.340 --> 00:31:24.619
<v Speaker 0>Meaning for every invocation of our app,

00:31:24.940 --> 00:31:27.019
<v Speaker 0>there is no bootstrapping

00:31:27.020 --> 00:31:30.619
<v Speaker 0>of the JavaScript runtime because it was bootstrapped.

00:31:31.179 --> 00:31:33.020
<v Speaker 0>The dependencies are evaluated.

00:31:33.020 --> 00:31:35.365
<v Speaker 0>The global scope of my custom code, of

00:31:35.365 --> 00:31:37.284
<v Speaker 0>my guest code is evaluated,

00:31:37.684 --> 00:31:39.684
<v Speaker 0>and the app is ready to

00:31:40.325 --> 00:31:42.004
<v Speaker 0>handle the request,

00:31:42.725 --> 00:31:44.725
<v Speaker 0>resulting in JavaScript

00:31:44.725 --> 00:31:47.684
<v Speaker 0>code compiled down to WebAssembly having a better

00:31:47.684 --> 00:31:50.325
<v Speaker 0>cold start performance than JavaScript code.

00:31:51.419 --> 00:31:54.539
<v Speaker 0>And that's just, you know, when I stumbled,

00:31:54.539 --> 00:31:58.140
<v Speaker 0>when I, you know, discovered all those internals

00:31:58.140 --> 00:32:00.779
<v Speaker 0>and what happens during build time for

00:32:01.020 --> 00:32:05.100
<v Speaker 0>interpreter or interpreter languages like JavaScript, Python, that's

00:32:05.100 --> 00:32:06.244
<v Speaker 0>just, yeah,

00:32:06.485 --> 00:32:09.845
<v Speaker 0>kind of mind blowing. It's super awesome to

00:32:09.845 --> 00:32:10.804
<v Speaker 0>see how far

00:32:11.284 --> 00:32:14.245
<v Speaker 0>we could push technology to optimize

00:32:14.245 --> 00:32:16.084
<v Speaker 0>for perf for performance.

00:32:17.044 --> 00:32:17.764
<v Speaker 1>That's pretty cool.

00:32:18.960 --> 00:32:22.400
<v Speaker 0>Okay. So we build we executed spin build,

00:32:22.400 --> 00:32:24.880
<v Speaker 0>tossed and got sidetracked, talked about all the

00:32:24.880 --> 00:32:25.919
<v Speaker 0>internals.

00:32:26.080 --> 00:32:27.440
<v Speaker 0>Sorry for that.

00:32:28.480 --> 00:32:30.399
<v Speaker 0>But now let's close the loop.

00:32:30.799 --> 00:32:33.664
<v Speaker 0>So we have spin up, which basically

00:32:34.705 --> 00:32:36.625
<v Speaker 0>takes your WebAssembly module

00:32:36.865 --> 00:32:39.825
<v Speaker 0>and starts a listener on your local machine

00:32:39.905 --> 00:32:42.305
<v Speaker 0>to, you know, serve as an inner loop

00:32:42.305 --> 00:32:44.145
<v Speaker 0>as a, you know, development

00:32:44.145 --> 00:32:44.865
<v Speaker 0>time

00:32:45.100 --> 00:32:46.219
<v Speaker 0>web server

00:32:46.779 --> 00:32:49.019
<v Speaker 0>and every invocation.

00:32:49.019 --> 00:32:50.700
<v Speaker 0>So for every time I will move to

00:32:50.700 --> 00:32:53.019
<v Speaker 0>the second to a new terminal instance over

00:32:53.019 --> 00:32:54.940
<v Speaker 0>here and I will do a curl

00:32:55.019 --> 00:32:56.299
<v Speaker 0>local local

00:32:56.299 --> 00:32:57.580
<v Speaker 0>local host

00:32:57.915 --> 00:32:59.115
<v Speaker 0>3,000.

00:32:59.115 --> 00:32:59.755
<v Speaker 0>Right?

00:33:00.235 --> 00:33:02.315
<v Speaker 0>And we get a hello universe and right

00:33:02.315 --> 00:33:03.835
<v Speaker 0>now let's say hello

00:33:03.995 --> 00:33:06.395
<v Speaker 0>David over there, we get a hello David.

00:33:07.115 --> 00:33:09.515
<v Speaker 0>So for every request

00:33:09.515 --> 00:33:10.555
<v Speaker 0>I sent

00:33:10.875 --> 00:33:12.955
<v Speaker 0>to localhost 3,000,

00:33:14.250 --> 00:33:16.810
<v Speaker 0>a cold start happens under the cover. So

00:33:16.810 --> 00:33:19.850
<v Speaker 0>every time the WebAssembly module is loaded,

00:33:20.650 --> 00:33:22.890
<v Speaker 0>first time it's loaded from disk, second time

00:33:22.890 --> 00:33:24.809
<v Speaker 0>it could be loaded from within,

00:33:24.970 --> 00:33:28.455
<v Speaker 0>you know, the the heap because we know

00:33:28.695 --> 00:33:31.655
<v Speaker 0>it was already there. Chances are high that

00:33:31.655 --> 00:33:33.414
<v Speaker 0>it will be requested again.

00:33:34.695 --> 00:33:38.135
<v Speaker 0>And then a clean instance is executed.

00:33:38.135 --> 00:33:41.655
<v Speaker 0>So there's no shared state. Right? Every invocation

00:33:41.655 --> 00:33:42.775
<v Speaker 0>is a cold start.

00:33:44.090 --> 00:33:44.730
<v Speaker 0>And

00:33:45.050 --> 00:33:46.410
<v Speaker 0>the the

00:33:47.130 --> 00:33:48.010
<v Speaker 0>amazing,

00:33:48.010 --> 00:33:50.570
<v Speaker 0>like, performance we can get out of that

00:33:50.570 --> 00:33:53.290
<v Speaker 0>is, for example, I think number of requests

00:33:53.290 --> 00:33:54.250
<v Speaker 0>is this

00:33:54.490 --> 00:33:56.570
<v Speaker 0>and this is concurrent threads.

00:33:57.255 --> 00:33:59.735
<v Speaker 0>And let's call yeah. Let's just invoke hello

00:33:59.735 --> 00:34:04.135
<v Speaker 0>universe over there with 100 concurrent threads 10

00:34:04.135 --> 00:34:04.775
<v Speaker 0>k.

00:34:05.175 --> 00:34:07.575
<v Speaker 0>So we are able to

00:34:08.135 --> 00:34:09.574
<v Speaker 0>I think we are we logging? No, we

00:34:09.574 --> 00:34:12.055
<v Speaker 0>are not logging. So we are able to

00:34:12.270 --> 00:34:15.710
<v Speaker 0>where's the histogram? A distribution there is 99%

00:34:15.710 --> 00:34:17.630
<v Speaker 0>of the request in less than o dot

00:34:17.630 --> 00:34:19.390
<v Speaker 0>o five six seconds

00:34:19.710 --> 00:34:20.510
<v Speaker 0>and

00:34:20.830 --> 00:34:22.190
<v Speaker 0>you know without,

00:34:22.909 --> 00:34:24.350
<v Speaker 0>putting pressure

00:34:24.429 --> 00:34:26.670
<v Speaker 0>on my machine at all because

00:34:27.764 --> 00:34:29.844
<v Speaker 0>those modules are so tiny

00:34:30.085 --> 00:34:31.925
<v Speaker 0>in size and could be

00:34:32.244 --> 00:34:33.045
<v Speaker 0>instantiated

00:34:33.045 --> 00:34:34.165
<v Speaker 0>and invoked

00:34:34.165 --> 00:34:35.284
<v Speaker 0>so fast.

00:34:36.645 --> 00:34:40.324
<v Speaker 0>So this is a pretty bare bones hello

00:34:40.324 --> 00:34:41.204
<v Speaker 0>world. Right?

00:34:41.730 --> 00:34:42.449
<v Speaker 0>Like

00:34:42.850 --> 00:34:44.050
<v Speaker 0>find new

00:34:44.449 --> 00:34:45.330
<v Speaker 0>TypeScript,

00:34:45.570 --> 00:34:49.010
<v Speaker 0>http TypeScript in this case, doing a spin

00:34:49.010 --> 00:34:51.090
<v Speaker 0>build, doing a spin up,

00:34:51.570 --> 00:34:53.010
<v Speaker 0>and then I can run it on my

00:34:53.010 --> 00:34:54.050
<v Speaker 0>local machine.

00:34:54.290 --> 00:34:57.325
<v Speaker 0>Or if you wanna deploy it to, for

00:34:57.325 --> 00:34:57.965
<v Speaker 0>example,

00:34:58.205 --> 00:35:01.085
<v Speaker 0>Fermion Cloud, we have Spin Cloud,

00:35:02.445 --> 00:35:03.085
<v Speaker 0>help.

00:35:03.325 --> 00:35:03.965
<v Speaker 0>So

00:35:04.205 --> 00:35:07.005
<v Speaker 0>everyone could register for free and run five

00:35:07.005 --> 00:35:08.845
<v Speaker 0>apps for free over there.

00:35:10.125 --> 00:35:11.405
<v Speaker 0>Or you may

00:35:12.260 --> 00:35:13.860
<v Speaker 0>wanna leverage

00:35:14.180 --> 00:35:15.060
<v Speaker 0>SpinCube.

00:35:15.060 --> 00:35:17.859
<v Speaker 0>Let me quickly bring up the website for

00:35:17.859 --> 00:35:18.980
<v Speaker 0>SpinCube.

00:35:20.579 --> 00:35:23.540
<v Speaker 0>This is again open source. You can deploy

00:35:23.540 --> 00:35:25.460
<v Speaker 0>that to your Kubernetes cluster.

00:35:26.175 --> 00:35:28.575
<v Speaker 0>So we have, you know, documentation on how

00:35:28.575 --> 00:35:30.575
<v Speaker 0>to install it with Helm, how to roll

00:35:30.575 --> 00:35:33.215
<v Speaker 0>it on Rancher Desktop on different like

00:35:33.295 --> 00:35:34.335
<v Speaker 0>Kubernetes

00:35:34.335 --> 00:35:35.375
<v Speaker 0>distributions,

00:35:35.375 --> 00:35:36.335
<v Speaker 0>so to say.

00:35:37.135 --> 00:35:38.095
<v Speaker 0>And

00:35:39.170 --> 00:35:41.010
<v Speaker 0>I think we shouldn't go down that path

00:35:41.010 --> 00:35:43.250
<v Speaker 0>of setting up SpinCube right now.

00:35:44.210 --> 00:35:46.050
<v Speaker 0>From a developer's perspective,

00:35:46.050 --> 00:35:48.530
<v Speaker 0>at some point we have to hand over

00:35:49.330 --> 00:35:51.010
<v Speaker 0>with operations

00:35:51.170 --> 00:35:52.930
<v Speaker 0>people or DevOps

00:35:52.930 --> 00:35:53.650
<v Speaker 0>teams.

00:35:54.905 --> 00:35:57.865
<v Speaker 0>Right? And we think as a developer,

00:35:58.585 --> 00:35:58.985
<v Speaker 0>there

00:35:59.464 --> 00:36:00.745
<v Speaker 0>should be like,

00:36:01.785 --> 00:36:03.385
<v Speaker 0>oh, we are responsible

00:36:03.385 --> 00:36:05.465
<v Speaker 0>to a certain degree of

00:36:05.705 --> 00:36:08.345
<v Speaker 0>for getting the app into an environment.

00:36:09.000 --> 00:36:11.400
<v Speaker 0>And in our cases, obviously we have to

00:36:11.400 --> 00:36:13.320
<v Speaker 0>somehow share the app.

00:36:13.640 --> 00:36:16.600
<v Speaker 0>So instead of reinventing the wheel, we decided,

00:36:16.600 --> 00:36:19.320
<v Speaker 0>hey, you we integrate with

00:36:20.040 --> 00:36:20.840
<v Speaker 0>TTL,

00:36:21.080 --> 00:36:23.480
<v Speaker 0>SH for example. We integrate with what's out

00:36:23.480 --> 00:36:25.005
<v Speaker 0>there which OCI.

00:36:25.645 --> 00:36:27.085
<v Speaker 0>So you can

00:36:27.405 --> 00:36:28.205
<v Speaker 0>simply

00:36:28.444 --> 00:36:29.885
<v Speaker 0>ask Spin to

00:36:30.285 --> 00:36:32.365
<v Speaker 0>create an OCI artifact

00:36:32.845 --> 00:36:33.405
<v Speaker 0>and

00:36:34.365 --> 00:36:36.525
<v Speaker 0>distribute that through registries

00:36:36.525 --> 00:36:40.010
<v Speaker 0>like Docker Hub or like Azure Container Registry

00:36:40.010 --> 00:36:41.770
<v Speaker 0>or TTLSH

00:36:41.770 --> 00:36:43.530
<v Speaker 0>which is like an anonymous

00:36:43.930 --> 00:36:45.530
<v Speaker 0>and ephemeral

00:36:45.850 --> 00:36:48.650
<v Speaker 0>registry that I use for demonstration purposes.

00:36:48.890 --> 00:36:51.450
<v Speaker 0>Right? So this right now takes the WASM

00:36:51.450 --> 00:36:53.555
<v Speaker 0>file and the SpinTML,

00:36:53.555 --> 00:36:54.994
<v Speaker 0>package that together

00:36:55.315 --> 00:36:58.355
<v Speaker 0>and uploads that as an old OCI artifact,

00:36:58.355 --> 00:37:00.355
<v Speaker 0>meaning that the Kubernetes cluster

00:37:00.515 --> 00:37:01.795
<v Speaker 0>with SpinCube

00:37:01.795 --> 00:37:03.954
<v Speaker 0>can pull that and run it.

00:37:05.730 --> 00:37:08.690
<v Speaker 0>So the overall end end to end, the

00:37:08.690 --> 00:37:09.970
<v Speaker 0>OCI artifact

00:37:09.970 --> 00:37:11.650
<v Speaker 0>will be 12 megabytes

00:37:11.650 --> 00:37:13.330
<v Speaker 0>in size plus

00:37:15.650 --> 00:37:17.010
<v Speaker 0>those 404

00:37:17.010 --> 00:37:18.850
<v Speaker 0>bytes for the SpinTML file.

00:37:19.715 --> 00:37:20.275
<v Speaker 0>And

00:37:20.675 --> 00:37:23.235
<v Speaker 0>yes, to be honest, JavaScript

00:37:23.235 --> 00:37:25.635
<v Speaker 0>due to the runtime and Python

00:37:26.115 --> 00:37:28.035
<v Speaker 0>are the biggest distributable.

00:37:28.115 --> 00:37:31.155
<v Speaker 0>So Rust, Go, those are obviously tinier in

00:37:31.155 --> 00:37:31.715
<v Speaker 0>size

00:37:32.040 --> 00:37:34.040
<v Speaker 0>because we don't have to ship an entire

00:37:34.040 --> 00:37:36.040
<v Speaker 0>runtime as part of the application.

00:37:36.360 --> 00:37:38.840
<v Speaker 0>So for Rust, with all optimizations,

00:37:38.920 --> 00:37:41.880
<v Speaker 0>we could go down to two digit kilobytes

00:37:41.880 --> 00:37:43.960
<v Speaker 0>in size for the distributable.

00:37:46.120 --> 00:37:47.800
<v Speaker 0>Okay. So

00:37:47.435 --> 00:37:48.955
<v Speaker 0>speaking about developers

00:37:48.955 --> 00:37:50.235
<v Speaker 0>responsibilities.

00:37:50.795 --> 00:37:53.515
<v Speaker 0>So we shared our app right now and

00:37:53.515 --> 00:37:56.955
<v Speaker 0>it is available under this tag, right? So

00:37:56.955 --> 00:37:59.275
<v Speaker 0>if people are following along right now, they

00:37:59.275 --> 00:38:01.035
<v Speaker 0>can do a spin

00:38:01.275 --> 00:38:03.350
<v Speaker 0>up dash dash from

00:38:03.670 --> 00:38:04.950
<v Speaker 0>pass in

00:38:05.510 --> 00:38:06.230
<v Speaker 0>that,

00:38:06.870 --> 00:38:09.430
<v Speaker 0>what is it, tag? No, no, repository

00:38:10.150 --> 00:38:12.310
<v Speaker 0>or the ref the OCI reference.

00:38:13.270 --> 00:38:15.990
<v Speaker 0>And then your spin CLI

00:38:16.070 --> 00:38:19.404
<v Speaker 0>goes, pulls that OCI artifact and spawns it

00:38:19.404 --> 00:38:21.645
<v Speaker 0>from that OCI artifact.

00:38:22.605 --> 00:38:24.845
<v Speaker 0>So how do we get into a platform

00:38:24.845 --> 00:38:26.045
<v Speaker 0>like Kubernetes?

00:38:26.605 --> 00:38:29.325
<v Speaker 0>So we think we should not reinvent that

00:38:29.325 --> 00:38:32.525
<v Speaker 0>wheel, however, provide a great developer experience.

00:38:33.260 --> 00:38:36.220
<v Speaker 0>So we that we say spin cube scaffold

00:38:36.220 --> 00:38:37.020
<v Speaker 0>from

00:38:38.140 --> 00:38:41.099
<v Speaker 0>t t l s h and without me

00:38:41.099 --> 00:38:43.900
<v Speaker 0>adding more flags to that command,

00:38:45.180 --> 00:38:46.060
<v Speaker 0>I get

00:38:46.355 --> 00:38:49.315
<v Speaker 0>a Kubernetes deployment manifest. So that may look

00:38:49.315 --> 00:38:51.635
<v Speaker 0>familiar for those viewers of,

00:38:52.035 --> 00:38:54.115
<v Speaker 0>or for you David as I know you

00:38:54.115 --> 00:38:56.595
<v Speaker 0>have like a like a whole lot of

00:38:56.595 --> 00:38:58.275
<v Speaker 0>Kubernetes experience.

00:38:58.595 --> 00:39:01.154
<v Speaker 0>So you could already guess some things from

00:39:01.154 --> 00:39:01.474
<v Speaker 0>this

00:39:02.890 --> 00:39:03.850
<v Speaker 0>this YAML.

00:39:04.170 --> 00:39:06.730
<v Speaker 0>There is a CRD that will be deployed

00:39:06.730 --> 00:39:07.930
<v Speaker 0>as part of

00:39:08.890 --> 00:39:09.850
<v Speaker 0>SpinCube

00:39:10.010 --> 00:39:11.850
<v Speaker 0>to your Kubernetes cluster.

00:39:13.690 --> 00:39:16.410
<v Speaker 0>We have a concept of a SpinApp executor.

00:39:17.095 --> 00:39:19.335
<v Speaker 0>So we are using a container, the shim

00:39:19.335 --> 00:39:20.135
<v Speaker 0>implementation

00:39:20.135 --> 00:39:21.415
<v Speaker 0>under the covers

00:39:21.575 --> 00:39:23.975
<v Speaker 0>to run those WebAssembly workloads

00:39:23.975 --> 00:39:26.535
<v Speaker 0>instead of running containers.

00:39:27.095 --> 00:39:29.815
<v Speaker 0>And we want to horizontally scale this to

00:39:29.815 --> 00:39:31.015
<v Speaker 0>have two replicas.

00:39:32.019 --> 00:39:33.140
<v Speaker 0>And we think

00:39:33.859 --> 00:39:37.539
<v Speaker 0>our story with deploying Spin apps into Kubernetes

00:39:37.539 --> 00:39:38.900
<v Speaker 0>should end here

00:39:39.059 --> 00:39:41.140
<v Speaker 0>and integrate seamlessly

00:39:41.380 --> 00:39:42.900
<v Speaker 0>what you're used to use.

00:39:43.059 --> 00:39:45.779
<v Speaker 0>Maybe you wanna or let me simply

00:39:47.115 --> 00:39:49.355
<v Speaker 0>switch to a Kubernetes cluster.

00:39:49.515 --> 00:39:52.555
<v Speaker 0>So maybe you're cool with kubectl

00:39:52.555 --> 00:39:53.355
<v Speaker 0>into

00:39:54.315 --> 00:39:55.675
<v Speaker 0>into your cluster.

00:39:55.995 --> 00:39:58.395
<v Speaker 0>Right? If you're cool with that, you can

00:39:58.475 --> 00:39:59.595
<v Speaker 0>oh, no. Apply.

00:39:59.995 --> 00:40:01.915
<v Speaker 0>I was missing apply. Oh, come on.

00:40:02.850 --> 00:40:04.450
<v Speaker 0>If you're cool with that, you can do

00:40:04.450 --> 00:40:06.770
<v Speaker 0>it. Right? If you wanna use GitOps,

00:40:07.170 --> 00:40:09.730
<v Speaker 0>cool. You can GitOps this

00:40:09.730 --> 00:40:10.610
<v Speaker 0>manifest

00:40:10.610 --> 00:40:11.330
<v Speaker 0>obviously.

00:40:11.890 --> 00:40:14.530
<v Speaker 0>If you wanna build a Helm chart around

00:40:14.530 --> 00:40:14.770
<v Speaker 0>it,

00:40:15.375 --> 00:40:16.655
<v Speaker 0>go for it. Right?

00:40:16.975 --> 00:40:19.295
<v Speaker 0>We think we should meet the developers where

00:40:19.295 --> 00:40:21.455
<v Speaker 0>they are or in that case, the integration,

00:40:21.455 --> 00:40:24.575
<v Speaker 0>the DevOps teams where they are and don't

00:40:24.575 --> 00:40:27.695
<v Speaker 0>try to come up with fancy ways of

00:40:28.150 --> 00:40:30.070
<v Speaker 0>bringing stuff into Kubernetes.

00:40:30.230 --> 00:40:33.110
<v Speaker 1>Can you run a command for me, please?

00:40:33.270 --> 00:40:33.990
<v Speaker 0>Sure.

00:40:35.030 --> 00:40:36.470
<v Speaker 1>Kubectl

00:40:36.630 --> 00:40:37.750
<v Speaker 1>explain

00:40:37.830 --> 00:40:39.750
<v Speaker 1>spinapp.spec.

00:40:39.945 --> 00:40:41.785
<v Speaker 1>Oh, yeah. You've already run before.

00:40:42.905 --> 00:40:46.185
<v Speaker 1>Yep. Yep. Yep. That's yep. That's That's how

00:40:46.745 --> 00:40:49.865
<v Speaker 1>much we can interact and and and play

00:40:49.865 --> 00:40:50.985
<v Speaker 1>with scheduling,

00:40:50.985 --> 00:40:52.985
<v Speaker 1>you know, the spin workload on Kubernetes. But

00:40:52.985 --> 00:40:55.225
<v Speaker 1>that that looks pretty comprehensive. That's that's pretty

00:40:55.225 --> 00:40:55.465
<v Speaker 1>cool.

00:40:56.360 --> 00:40:57.800
<v Speaker 0>Yeah. So we have

00:40:58.040 --> 00:40:59.960
<v Speaker 0>so with SpinCube,

00:40:59.960 --> 00:41:00.200
<v Speaker 0>what

00:41:00.920 --> 00:41:02.840
<v Speaker 0>so leverage

00:41:03.000 --> 00:41:03.960
<v Speaker 0>kWASM,

00:41:03.960 --> 00:41:06.600
<v Speaker 0>which is another open source project under the

00:41:06.600 --> 00:41:07.800
<v Speaker 0>SpinCube organization

00:41:08.475 --> 00:41:12.715
<v Speaker 0>that's basically deploying that containerd shim for spin

00:41:12.795 --> 00:41:14.715
<v Speaker 0>to the Kubernetes nodes.

00:41:15.435 --> 00:41:16.875
<v Speaker 0>And then we use

00:41:17.515 --> 00:41:19.035
<v Speaker 0>a SpinAppExecutor.

00:41:19.035 --> 00:41:22.155
<v Speaker 0>Right? I we saw that over here, Executor.

00:41:22.700 --> 00:41:24.380
<v Speaker 0>And a SpinAppExecutor

00:41:24.380 --> 00:41:26.299
<v Speaker 0>is basically another CRD

00:41:26.779 --> 00:41:30.859
<v Speaker 0>oh, let's let's go to get SpinAppExecutor.

00:41:31.660 --> 00:41:32.300
<v Speaker 0>So

00:41:32.460 --> 00:41:34.539
<v Speaker 0>I have my default,

00:41:34.779 --> 00:41:37.579
<v Speaker 0>and the SpinCube documentation guides you through that.

00:41:37.965 --> 00:41:40.205
<v Speaker 0>Right? And it's basically using

00:41:41.165 --> 00:41:44.685
<v Speaker 0>the runtime class concepts of Kubernetes telling

00:41:44.845 --> 00:41:47.885
<v Speaker 0>telling the scheduler, hey, instead of scheduling a

00:41:47.885 --> 00:41:49.325
<v Speaker 0>container workload,

00:41:49.405 --> 00:41:50.205
<v Speaker 0>schedule

00:41:50.205 --> 00:41:52.685
<v Speaker 0>a workload that's using the WasmTime

00:41:53.349 --> 00:41:56.950
<v Speaker 0>Spin v two runtime under the covers. So

00:41:56.950 --> 00:41:58.310
<v Speaker 0>it's loosely coupled

00:41:58.630 --> 00:42:00.230
<v Speaker 0>and allows you to,

00:42:01.349 --> 00:42:04.150
<v Speaker 0>yeah, to run SpinApps in Kubernetes. So we

00:42:04.150 --> 00:42:06.070
<v Speaker 0>can get a k get

00:42:06.470 --> 00:42:07.030
<v Speaker 0>SpinApp.

00:42:07.685 --> 00:42:08.725
<v Speaker 0>So you see

00:42:09.045 --> 00:42:11.285
<v Speaker 0>a couple of spin apps deployed there. One

00:42:11.285 --> 00:42:12.725
<v Speaker 0>is scaled to 20.

00:42:13.125 --> 00:42:13.685
<v Speaker 0>And

00:42:14.244 --> 00:42:16.645
<v Speaker 0>for every spin app in SpinCube, you get

00:42:16.645 --> 00:42:18.885
<v Speaker 0>a port. All ports are running.

00:42:19.525 --> 00:42:21.765
<v Speaker 0>And the nice thing about

00:42:22.670 --> 00:42:24.590
<v Speaker 0>let me k edit

00:42:24.990 --> 00:42:26.030
<v Speaker 0>spin app.

00:42:26.830 --> 00:42:28.430
<v Speaker 0>What is it? Hello spin.

00:42:28.670 --> 00:42:31.230
<v Speaker 0>So this is scaled to 20 replicas right

00:42:31.230 --> 00:42:31.790
<v Speaker 0>now.

00:42:32.190 --> 00:42:36.245
<v Speaker 0>Let's go there and scale it into two.

00:42:36.245 --> 00:42:38.645
<v Speaker 0>So this is manually scaling. Right? We integrate

00:42:38.645 --> 00:42:40.485
<v Speaker 0>with KEDA, HPA,

00:42:40.485 --> 00:42:43.045
<v Speaker 0>blah blah blah, you name it. Yeah. So

00:42:43.045 --> 00:42:44.805
<v Speaker 0>so we should be down

00:42:46.565 --> 00:42:47.925
<v Speaker 0>to way less ports.

00:42:49.089 --> 00:42:49.730
<v Speaker 0>And

00:42:50.369 --> 00:42:53.010
<v Speaker 0>the value of small binary

00:42:53.010 --> 00:42:54.290
<v Speaker 0>and ridiculously

00:42:54.290 --> 00:42:55.090
<v Speaker 0>fast

00:42:56.290 --> 00:42:58.210
<v Speaker 0>instantiation and invocation

00:42:58.369 --> 00:42:59.170
<v Speaker 0>is

00:42:59.650 --> 00:43:02.130
<v Speaker 0>gets visible when I do the when I

00:43:02.130 --> 00:43:04.035
<v Speaker 0>inverse it again. So if I do a

00:43:04.035 --> 00:43:05.955
<v Speaker 0>spin app, edit spin app again,

00:43:06.355 --> 00:43:08.915
<v Speaker 0>go over here and say, wanna have 20.

00:43:09.875 --> 00:43:12.675
<v Speaker 0>I save it, I do k get p

00:43:12.675 --> 00:43:13.155
<v Speaker 0>o

00:43:14.355 --> 00:43:15.234
<v Speaker 0>and there we are.

00:43:15.950 --> 00:43:17.950
<v Speaker 0>Within a fraction of a second they are

00:43:17.950 --> 00:43:19.950
<v Speaker 0>all up and running because

00:43:20.190 --> 00:43:23.470
<v Speaker 0>nothing happens. Right? The image gets pulled

00:43:23.630 --> 00:43:26.830
<v Speaker 0>and the manifest gets obviously interpreted.

00:43:26.830 --> 00:43:28.510
<v Speaker 0>Right? And things are checked

00:43:29.070 --> 00:43:31.150
<v Speaker 0>and the listener is already there.

00:43:31.985 --> 00:43:34.145
<v Speaker 0>Right? So we spawn a subprocess on the

00:43:34.145 --> 00:43:34.705
<v Speaker 0>note,

00:43:35.185 --> 00:43:38.225
<v Speaker 0>but the app is every invocation is a

00:43:38.225 --> 00:43:39.105
<v Speaker 0>cold start.

00:43:39.505 --> 00:43:42.305
<v Speaker 0>Right? So within a matter of seconds, we

00:43:42.305 --> 00:43:44.785
<v Speaker 0>are up and running with like 20 instances.

00:43:45.309 --> 00:43:48.109
<v Speaker 1>Yeah. So we consider the the scale that

00:43:48.109 --> 00:43:50.589
<v Speaker 1>we use for these pods as it's really

00:43:50.750 --> 00:43:52.430
<v Speaker 1>it it's a web server. Like, we just

00:43:52.589 --> 00:43:54.029
<v Speaker 1>it's like a proxy. I know it's not

00:43:54.029 --> 00:43:54.830
<v Speaker 1>technically,

00:43:55.230 --> 00:43:56.910
<v Speaker 1>but the requests are coming in, and then

00:43:56.910 --> 00:43:58.510
<v Speaker 1>it's CGI

00:43:58.829 --> 00:44:01.695
<v Speaker 1>CGI ing out to the spin application.

00:44:02.015 --> 00:44:03.855
<v Speaker 1>So that might help make sense for how

00:44:03.855 --> 00:44:05.454
<v Speaker 1>do we know when to run one of

00:44:05.454 --> 00:44:08.174
<v Speaker 1>these polytorsies 20. And it's if we just

00:44:08.174 --> 00:44:10.335
<v Speaker 1>pretend on our head, again, even though it's

00:44:10.335 --> 00:44:11.855
<v Speaker 1>not, that it's NGINX,

00:44:12.255 --> 00:44:13.934
<v Speaker 1>that might help make it easier for people

00:44:13.934 --> 00:44:14.575
<v Speaker 1>to understand.

00:44:15.510 --> 00:44:17.510
<v Speaker 1>We also have a few questions in the

00:44:17.670 --> 00:44:19.510
<v Speaker 1>Sure. The comment section if you're happy to

00:44:19.510 --> 00:44:22.310
<v Speaker 1>answer those. So Indigo VFX is asking,

00:44:22.710 --> 00:44:25.110
<v Speaker 1>is there a performance difference between the various

00:44:25.110 --> 00:44:27.590
<v Speaker 1>workload languages? So if I write something in

00:44:27.590 --> 00:44:29.750
<v Speaker 1>HTTP Rust versus HTTP JSON,

00:44:30.165 --> 00:44:32.405
<v Speaker 1>even though the WASM binaries are different sizes,

00:44:32.405 --> 00:44:34.165
<v Speaker 1>is there a runtime performance?

00:44:34.645 --> 00:44:36.645
<v Speaker 0>Yeah. So definitely,

00:44:36.645 --> 00:44:39.525
<v Speaker 0>definitely Rust is by far the

00:44:39.605 --> 00:44:40.565
<v Speaker 0>fastest

00:44:40.885 --> 00:44:43.045
<v Speaker 0>or resulting in the fastest

00:44:44.150 --> 00:44:46.070
<v Speaker 0>binary or application.

00:44:46.070 --> 00:44:47.030
<v Speaker 0>Right? Because

00:44:47.350 --> 00:44:48.550
<v Speaker 0>although we,

00:44:48.630 --> 00:44:52.310
<v Speaker 0>let's say, warmed up the JavaScript runtime, we

00:44:52.310 --> 00:44:53.110
<v Speaker 0>loaded

00:44:53.110 --> 00:44:55.270
<v Speaker 0>the dependencies, we evaluated

00:44:55.350 --> 00:44:56.710
<v Speaker 0>the global scope,

00:44:56.790 --> 00:44:59.190
<v Speaker 0>there is still the like

00:44:59.585 --> 00:45:01.345
<v Speaker 0>run time overhead

00:45:01.825 --> 00:45:05.265
<v Speaker 0>that's introduced by using a interpreted language like

00:45:05.265 --> 00:45:06.065
<v Speaker 0>JavaScript.

00:45:06.704 --> 00:45:07.265
<v Speaker 0>So

00:45:07.904 --> 00:45:08.705
<v Speaker 0>Rust,

00:45:08.785 --> 00:45:09.825
<v Speaker 0>Golang,

00:45:09.904 --> 00:45:13.825
<v Speaker 0>like non interpreted languages will always be faster.

00:45:14.829 --> 00:45:15.950
<v Speaker 0>Also because

00:45:15.950 --> 00:45:18.829
<v Speaker 0>distributable size is smaller and at some point

00:45:18.829 --> 00:45:19.710
<v Speaker 0>especially

00:45:19.710 --> 00:45:20.430
<v Speaker 0>with

00:45:20.990 --> 00:45:22.670
<v Speaker 0>when using Kubernetes

00:45:22.829 --> 00:45:24.590
<v Speaker 0>from cloud vendors,

00:45:24.829 --> 00:45:25.950
<v Speaker 0>disk IO

00:45:26.109 --> 00:45:28.665
<v Speaker 0>becomes also a problem because loading a 12

00:45:28.665 --> 00:45:31.785
<v Speaker 0>megabyte WASM file from disk is slower than

00:45:31.785 --> 00:45:34.185
<v Speaker 0>loading a 30 kilobyte or

00:45:34.185 --> 00:45:35.705
<v Speaker 0>hundred kilobyte

00:45:36.025 --> 00:45:38.105
<v Speaker 0>WASM file from disk.

00:45:39.065 --> 00:45:40.985
<v Speaker 0>So yes, there is a performance

00:45:42.185 --> 00:45:42.985
<v Speaker 0>difference

00:45:43.539 --> 00:45:46.099
<v Speaker 0>and we always treat it that way. If

00:45:46.099 --> 00:45:48.339
<v Speaker 0>you are looking for best performance,

00:45:48.740 --> 00:45:50.020
<v Speaker 0>go the Rust way.

00:45:50.180 --> 00:45:52.980
<v Speaker 0>If you're looking for a convenient developer

00:45:52.980 --> 00:45:54.019
<v Speaker 0>experience

00:45:54.019 --> 00:45:56.020
<v Speaker 0>and easy to adopt

00:45:56.099 --> 00:45:56.740
<v Speaker 0>like

00:45:57.025 --> 00:45:57.905
<v Speaker 0>SDKs

00:45:57.905 --> 00:46:00.945
<v Speaker 0>and stuff like that than TypeScript.

00:46:01.345 --> 00:46:03.265
<v Speaker 0>Maybe the smarter choice

00:46:03.425 --> 00:46:06.225
<v Speaker 0>and Go is the nice thing sitting exactly

00:46:06.225 --> 00:46:08.945
<v Speaker 0>in the middle giving you better performance but

00:46:08.945 --> 00:46:09.825
<v Speaker 0>still having a

00:46:11.060 --> 00:46:13.860
<v Speaker 0>a language that one could learn in like

00:46:13.860 --> 00:46:15.380
<v Speaker 0>a couple of days at least to get

00:46:15.380 --> 00:46:15.940
<v Speaker 0>going,

00:46:17.140 --> 00:46:19.540
<v Speaker 0>which is slightly different for Rust, if you

00:46:19.540 --> 00:46:20.340
<v Speaker 1>ask me.

00:46:21.300 --> 00:46:22.180
<v Speaker 1>No shit.

00:46:22.660 --> 00:46:23.300
<v Speaker 1>Alright.

00:46:23.595 --> 00:46:25.355
<v Speaker 1>Thank you for answering that question. I hope

00:46:25.355 --> 00:46:26.395
<v Speaker 1>that helps Indigo.

00:46:26.635 --> 00:46:29.275
<v Speaker 1>Ravi also has a question and is curious

00:46:29.275 --> 00:46:31.675
<v Speaker 1>if spend supports open telemetry.

00:46:31.675 --> 00:46:32.315
<v Speaker 1>So

00:46:33.355 --> 00:46:35.195
<v Speaker 1>Test off. We'd instrument

00:46:35.195 --> 00:46:37.675
<v Speaker 1>ourselves within the spend application,

00:46:37.675 --> 00:46:40.320
<v Speaker 1>or is this something that the SpinKube runtime

00:46:40.320 --> 00:46:42.000
<v Speaker 1>handles for us? Maybe you could shed some

00:46:42.000 --> 00:46:45.200
<v Speaker 1>light there. Yeah. That's that's a great question,

00:46:45.360 --> 00:46:47.280
<v Speaker 0>Ravi. Thanks for bringing that up.

00:46:47.600 --> 00:46:48.160
<v Speaker 0>So

00:46:48.560 --> 00:46:50.400
<v Speaker 0>Spin does automatic

00:46:50.400 --> 00:46:51.360
<v Speaker 0>telemetry

00:46:52.720 --> 00:46:54.720
<v Speaker 0>or Spin produces

00:46:55.415 --> 00:46:56.295
<v Speaker 0>telemetry.

00:46:56.615 --> 00:46:57.975
<v Speaker 0>And we integrate

00:46:58.215 --> 00:46:59.415
<v Speaker 0>seamlessly

00:46:59.815 --> 00:47:01.575
<v Speaker 0>with open telemetry

00:47:01.575 --> 00:47:02.375
<v Speaker 0>stacks

00:47:02.375 --> 00:47:05.415
<v Speaker 0>like for example, we have a plugin

00:47:05.415 --> 00:47:07.095
<v Speaker 0>that you could spin

00:47:07.734 --> 00:47:08.535
<v Speaker 0>auto

00:47:08.695 --> 00:47:11.560
<v Speaker 0>setup for example with Aspire

00:47:12.280 --> 00:47:15.000
<v Speaker 0>or with the default stack is I think

00:47:15.000 --> 00:47:16.440
<v Speaker 0>Jager Prometheus

00:47:16.600 --> 00:47:19.560
<v Speaker 0>or you know all the entire you know

00:47:19.560 --> 00:47:22.200
<v Speaker 0>the entire tool chain that

00:47:22.425 --> 00:47:24.105
<v Speaker 0>that's used to

00:47:24.345 --> 00:47:26.345
<v Speaker 0>to build the OTEL stack.

00:47:27.145 --> 00:47:29.545
<v Speaker 0>I like Aspire because it's like that single

00:47:29.545 --> 00:47:32.265
<v Speaker 0>container developer in a loop stack.

00:47:32.745 --> 00:47:33.385
<v Speaker 0>So

00:47:33.625 --> 00:47:35.145
<v Speaker 0>if I do a spin

00:47:35.465 --> 00:47:36.345
<v Speaker 0>OTEL

00:47:36.345 --> 00:47:36.905
<v Speaker 0>up,

00:47:38.079 --> 00:47:39.040
<v Speaker 0>I think,

00:47:40.079 --> 00:47:42.640
<v Speaker 0>and let me curl the app again

00:47:44.640 --> 00:47:45.440
<v Speaker 0>10,000

00:47:45.440 --> 00:47:48.720
<v Speaker 0>times and right now do a spin hotel

00:47:49.440 --> 00:47:50.480
<v Speaker 0>open aspire.

00:47:53.315 --> 00:47:55.155
<v Speaker 0>So we should see

00:47:56.115 --> 00:47:58.275
<v Speaker 0>automatic telemetry

00:47:58.275 --> 00:48:00.275
<v Speaker 0>automatically being populated.

00:48:01.155 --> 00:48:03.315
<v Speaker 0>Our app does nothing right now, so that's

00:48:03.315 --> 00:48:06.195
<v Speaker 0>why we only have two spans per invocation.

00:48:07.395 --> 00:48:08.355
<v Speaker 0>But we

00:48:08.990 --> 00:48:09.710
<v Speaker 0>add,

00:48:09.790 --> 00:48:12.829
<v Speaker 0>you know, interesting boundaries. So for example, if

00:48:12.829 --> 00:48:15.150
<v Speaker 0>you call a kv store, what we create

00:48:15.150 --> 00:48:15.950
<v Speaker 0>obviously

00:48:16.510 --> 00:48:20.030
<v Speaker 0>spends and correlate them up into that graph.

00:48:20.589 --> 00:48:23.150
<v Speaker 0>We provide fundamental metrics,

00:48:23.835 --> 00:48:25.835
<v Speaker 0>but that needs a couple of minutes to

00:48:25.835 --> 00:48:27.115
<v Speaker 0>be picked

00:48:27.115 --> 00:48:28.475
<v Speaker 0>up by Aspire.

00:48:28.875 --> 00:48:31.835
<v Speaker 0>So we will see like invocation count being

00:48:32.315 --> 00:48:33.035
<v Speaker 0>being

00:48:33.515 --> 00:48:35.195
<v Speaker 0>populated there in a few seconds.

00:48:36.420 --> 00:48:38.500
<v Speaker 0>And obviously, we also get

00:48:38.660 --> 00:48:41.220
<v Speaker 0>if we lock to console. Ly what we

00:48:41.220 --> 00:48:43.300
<v Speaker 0>don't do in Hello World right now, we

00:48:43.300 --> 00:48:45.940
<v Speaker 0>will see structured log output over there.

00:48:46.819 --> 00:48:47.460
<v Speaker 0>For

00:48:47.859 --> 00:48:51.595
<v Speaker 0>guest logging or guest telemetry, so basically you

00:48:51.595 --> 00:48:54.154
<v Speaker 0>as a developer creating your own traces and

00:48:54.154 --> 00:48:54.954
<v Speaker 0>spans.

00:48:56.075 --> 00:48:58.394
<v Speaker 0>A colleague of mine, so Caleb, will do

00:48:58.394 --> 00:49:01.515
<v Speaker 0>a talk next week at WASM.io,

00:49:01.515 --> 00:49:04.394
<v Speaker 0>1 of the biggest like WebAssembly conferences in

00:49:04.394 --> 00:49:06.599
<v Speaker 0>Europe. And I think that should be up

00:49:06.599 --> 00:49:08.840
<v Speaker 0>on YouTube in shortly

00:49:09.400 --> 00:49:10.840
<v Speaker 0>after the conference

00:49:12.280 --> 00:49:13.880
<v Speaker 0>because there are some

00:49:14.200 --> 00:49:16.200
<v Speaker 0>in WebAssembly world, is

00:49:16.839 --> 00:49:20.315
<v Speaker 0>WASI, the WebAssembly system interface. So there's a

00:49:20.315 --> 00:49:21.595
<v Speaker 0>lot of standardization

00:49:21.595 --> 00:49:22.635
<v Speaker 0>work happening

00:49:22.875 --> 00:49:25.115
<v Speaker 0>to ensure that you can build a spin

00:49:25.115 --> 00:49:27.515
<v Speaker 0>app with spin and run it on a

00:49:27.515 --> 00:49:29.035
<v Speaker 0>different runtime.

00:49:29.275 --> 00:49:29.915
<v Speaker 0>So

00:49:30.795 --> 00:49:32.474
<v Speaker 0>and the same thing is

00:49:32.840 --> 00:49:34.280
<v Speaker 0>in Wazi,

00:49:34.280 --> 00:49:35.720
<v Speaker 0>there is there

00:49:36.120 --> 00:49:39.000
<v Speaker 0>there are efforts to say, hey, across the

00:49:39.000 --> 00:49:39.640
<v Speaker 0>board,

00:49:40.440 --> 00:49:42.280
<v Speaker 0>these are the APIs

00:49:42.280 --> 00:49:43.080
<v Speaker 0>how

00:49:43.080 --> 00:49:44.360
<v Speaker 0>guest code

00:49:44.680 --> 00:49:48.515
<v Speaker 0>should do traces or should do metric populate

00:49:48.595 --> 00:49:49.475
<v Speaker 0>metrics.

00:49:50.035 --> 00:49:54.115
<v Speaker 0>And Caleb is somewhat leading in or in

00:49:54.115 --> 00:49:56.595
<v Speaker 0>the group of leaders when it comes to

00:49:56.595 --> 00:49:57.315
<v Speaker 0>how

00:49:57.630 --> 00:49:58.910
<v Speaker 0>OpenTelemetry

00:49:58.990 --> 00:50:01.230
<v Speaker 0>should or could work in Wasm.

00:50:01.549 --> 00:50:04.670
<v Speaker 0>And so I think that one is definitely

00:50:04.670 --> 00:50:06.270
<v Speaker 0>worth checking out.

00:50:07.230 --> 00:50:07.950
<v Speaker 0>For now,

00:50:08.510 --> 00:50:10.430
<v Speaker 0>you can, if you, for example, in JavaScript

00:50:10.430 --> 00:50:12.510
<v Speaker 0>do a console a log that becomes a

00:50:12.510 --> 00:50:14.984
<v Speaker 0>log that is, you know, sent to standard

00:50:14.984 --> 00:50:17.305
<v Speaker 0>out or standard error if you log to

00:50:17.305 --> 00:50:19.625
<v Speaker 0>that one and that those are sent to

00:50:19.625 --> 00:50:20.665
<v Speaker 0>the corresponding

00:50:20.665 --> 00:50:22.185
<v Speaker 0>log streams there.

00:50:22.505 --> 00:50:23.065
<v Speaker 0>But

00:50:23.305 --> 00:50:25.305
<v Speaker 0>we don't have support for

00:50:25.865 --> 00:50:26.665
<v Speaker 0>traces

00:50:26.665 --> 00:50:28.585
<v Speaker 0>or custom spans or metrics

00:50:28.960 --> 00:50:29.920
<v Speaker 0>besides

00:50:29.920 --> 00:50:30.720
<v Speaker 0>using

00:50:30.880 --> 00:50:35.200
<v Speaker 0>maybe Ravi if you have experience with Prometheus,

00:50:35.520 --> 00:50:38.000
<v Speaker 0>you can obviously use the push gateway, right,

00:50:38.000 --> 00:50:40.640
<v Speaker 0>to push metrics into your Prometheus.

00:50:40.880 --> 00:50:42.400
<v Speaker 0>That's definitely possible.

00:50:43.360 --> 00:50:44.080
<v Speaker 0>But we are,

00:50:44.735 --> 00:50:45.615
<v Speaker 0>you know,

00:50:46.015 --> 00:50:48.975
<v Speaker 0>moving forward and trying to come up with

00:50:48.975 --> 00:50:52.575
<v Speaker 0>a API that's that works across all the

00:50:52.575 --> 00:50:53.855
<v Speaker 0>different languages,

00:50:54.335 --> 00:50:57.855
<v Speaker 0>that's easy to understand and that allows developers

00:50:57.480 --> 00:51:00.840
<v Speaker 0>to generate all sorts of telemetry data.

00:51:01.800 --> 00:51:02.600
<v Speaker 1>Yep.

00:51:03.320 --> 00:51:06.280
<v Speaker 1>I hadn't seen that Aspire workflow before, but

00:51:06.280 --> 00:51:07.880
<v Speaker 1>that was that was pretty slick. So I

00:51:07.880 --> 00:51:09.480
<v Speaker 1>was really happy to see that and and

00:51:09.480 --> 00:51:10.119
<v Speaker 1>looking forward.

00:51:10.745 --> 00:51:12.985
<v Speaker 1>Now to Caleb's talk on how we do

00:51:12.985 --> 00:51:15.945
<v Speaker 1>guest and custom spans because that would be

00:51:15.945 --> 00:51:17.385
<v Speaker 1>very, very cool also.

00:51:17.545 --> 00:51:19.625
<v Speaker 1>So I hope that answers your question, Ravi.

00:51:19.865 --> 00:51:22.665
<v Speaker 0>Yeah. That's I think that's the next logical

00:51:22.665 --> 00:51:23.810
<v Speaker 0>step. And

00:51:24.290 --> 00:51:24.930
<v Speaker 0>for

00:51:25.250 --> 00:51:26.690
<v Speaker 0>for SpinCube,

00:51:27.330 --> 00:51:28.770
<v Speaker 0>you can obviously

00:51:28.930 --> 00:51:30.850
<v Speaker 0>I think there's a flag somewhere

00:51:31.170 --> 00:51:33.010
<v Speaker 0>that you can say, hotel

00:51:33.810 --> 00:51:35.970
<v Speaker 0>collect hotel collector exactly.

00:51:35.970 --> 00:51:38.450
<v Speaker 0>And you say, hey, there's my hotel collector.

00:51:38.895 --> 00:51:41.695
<v Speaker 0>And then the SpinCube runtime will forward all

00:51:41.695 --> 00:51:43.695
<v Speaker 0>those telemetry data to that.

00:51:46.255 --> 00:51:47.695
<v Speaker 0>Cool. So

00:51:48.095 --> 00:51:48.895
<v Speaker 0>next,

00:51:48.975 --> 00:51:51.215
<v Speaker 0>we created a Hello World. I think we

00:51:51.215 --> 00:51:53.869
<v Speaker 0>could take it one step further

00:51:53.950 --> 00:51:55.390
<v Speaker 0>with the JavaScript

00:51:55.390 --> 00:51:56.430
<v Speaker 0>API.

00:51:56.750 --> 00:51:57.230
<v Speaker 0>Also,

00:51:58.109 --> 00:51:59.390
<v Speaker 0>because I think,

00:52:00.029 --> 00:52:02.269
<v Speaker 0>David, you mentioned that you are you think

00:52:02.269 --> 00:52:04.190
<v Speaker 0>the SpinDX is great.

00:52:04.670 --> 00:52:06.190
<v Speaker 0>And I think we could,

00:52:06.589 --> 00:52:09.715
<v Speaker 0>you know, demonstrate a little more of the

00:52:09.715 --> 00:52:10.515
<v Speaker 0>SpinDX

00:52:10.515 --> 00:52:11.315
<v Speaker 0>to

00:52:11.555 --> 00:52:13.315
<v Speaker 0>make people aware of

00:52:13.955 --> 00:52:16.115
<v Speaker 0>that great developer experience.

00:52:18.115 --> 00:52:18.835
<v Speaker 0>So

00:52:19.235 --> 00:52:22.190
<v Speaker 0>let's do, this is super unscripted.

00:52:22.190 --> 00:52:23.790
<v Speaker 0>Let's do a spin you.

00:52:25.230 --> 00:52:25.870
<v Speaker 0>And

00:52:26.430 --> 00:52:27.870
<v Speaker 0>I think it's I always

00:52:28.430 --> 00:52:31.309
<v Speaker 0>try to get a sense of the community.

00:52:31.309 --> 00:52:34.109
<v Speaker 0>And by having a community that engages and

00:52:34.109 --> 00:52:37.035
<v Speaker 0>ask questions and is curious about perf and

00:52:37.035 --> 00:52:37.995
<v Speaker 0>stuff like that.

00:52:39.035 --> 00:52:41.435
<v Speaker 0>That gives me like the confidence. Okay. I

00:52:41.435 --> 00:52:44.955
<v Speaker 0>could bring in some more details and share

00:52:44.955 --> 00:52:45.915
<v Speaker 0>maybe some

00:52:46.555 --> 00:52:48.875
<v Speaker 0>not get best. I hate the term best

00:52:48.875 --> 00:52:49.675
<v Speaker 0>practices,

00:52:49.675 --> 00:52:50.875
<v Speaker 0>but let's say good practices.

00:52:52.920 --> 00:52:53.480
<v Speaker 0>So

00:52:54.280 --> 00:52:56.680
<v Speaker 0>I find it super valuable to have an

00:52:56.680 --> 00:52:59.800
<v Speaker 0>HTTP empty template. And let's say this is

00:52:59.800 --> 00:53:00.520
<v Speaker 0>crud.

00:53:01.960 --> 00:53:05.480
<v Speaker 0>The HTTP empty template is basically just splitting

00:53:05.480 --> 00:53:06.680
<v Speaker 0>out a spin TOML

00:53:07.295 --> 00:53:10.575
<v Speaker 0>with almost no content. So no trigger, no

00:53:10.575 --> 00:53:11.855
<v Speaker 0>component, nothing.

00:53:12.255 --> 00:53:14.895
<v Speaker 0>Because maybe you wanna build something that consists

00:53:14.895 --> 00:53:16.495
<v Speaker 0>of more than just

00:53:16.655 --> 00:53:18.015
<v Speaker 0>a single component.

00:53:18.015 --> 00:53:21.215
<v Speaker 0>And then the HTTP empty template is what

00:53:21.215 --> 00:53:23.650
<v Speaker 0>you what you're looking for. It's like

00:53:24.450 --> 00:53:26.370
<v Speaker 0>if people have experience

00:53:26.370 --> 00:53:27.650
<v Speaker 0>with Microsoft

00:53:27.890 --> 00:53:30.210
<v Speaker 0>or .net or in Visual Studio,

00:53:30.530 --> 00:53:32.130
<v Speaker 0>this is like a solution.

00:53:32.290 --> 00:53:34.690
<v Speaker 0>And now we are adding projects or different

00:53:34.690 --> 00:53:36.290
<v Speaker 0>workloads to our solution.

00:53:37.145 --> 00:53:39.305
<v Speaker 0>So we can simply say spin

00:53:40.025 --> 00:53:42.825
<v Speaker 0>at over here and let's say again, let's

00:53:42.825 --> 00:53:45.305
<v Speaker 0>start with TypeScript and let's say this is

00:53:45.305 --> 00:53:46.425
<v Speaker 0>my API

00:53:47.065 --> 00:53:49.625
<v Speaker 0>and I wanted that to respond to incoming

00:53:49.625 --> 00:53:50.345
<v Speaker 0>calls

00:53:50.505 --> 00:53:51.785
<v Speaker 0>underneath API.

00:53:51.785 --> 00:53:53.950
<v Speaker 0>So if we look at spin. Toml right

00:53:53.950 --> 00:53:54.430
<v Speaker 0>now,

00:53:54.830 --> 00:53:56.350
<v Speaker 0>we see, hey, right now we have a

00:53:56.350 --> 00:53:56.990
<v Speaker 0>trigger

00:53:57.390 --> 00:53:59.070
<v Speaker 0>and we have

00:53:59.390 --> 00:54:00.590
<v Speaker 0>build commands,

00:54:00.830 --> 00:54:02.190
<v Speaker 0>component configuration,

00:54:02.190 --> 00:54:04.030
<v Speaker 0>but all is pointing to work here.

00:54:05.075 --> 00:54:08.675
<v Speaker 0>So the folder structure oops. The folder structure

00:54:09.474 --> 00:54:11.954
<v Speaker 0>has right now an API subfolder. Right? So

00:54:11.954 --> 00:54:13.714
<v Speaker 0>we can organize different

00:54:13.954 --> 00:54:15.714
<v Speaker 0>workloads and subfolders

00:54:15.714 --> 00:54:19.600
<v Speaker 0>to to, you know, work seamlessly with mono

00:54:19.600 --> 00:54:20.400
<v Speaker 0>repo,

00:54:20.720 --> 00:54:23.520
<v Speaker 0>organize or mono repos or, you know, to

00:54:23.520 --> 00:54:27.520
<v Speaker 0>organize things in a more meaningful way.

00:54:27.520 --> 00:54:29.040
<v Speaker 0>So we may add

00:54:29.680 --> 00:54:32.135
<v Speaker 0>a front end for example. So how could

00:54:32.135 --> 00:54:32.935
<v Speaker 0>we do that?

00:54:33.895 --> 00:54:34.935
<v Speaker 0>We have

00:54:36.214 --> 00:54:38.135
<v Speaker 0>the static file server,

00:54:38.295 --> 00:54:40.935
<v Speaker 0>which is basically a web assembly module we

00:54:40.935 --> 00:54:41.815
<v Speaker 0>created

00:54:41.895 --> 00:54:44.930
<v Speaker 0>that's able to serve files from a predefined

00:54:44.930 --> 00:54:47.970
<v Speaker 0>folder and return them over HTTP.

00:54:48.289 --> 00:54:50.529
<v Speaker 0>So this is like a let's call it

00:54:50.529 --> 00:54:52.690
<v Speaker 0>a recipe, right? For

00:54:53.089 --> 00:54:55.329
<v Speaker 0>I have an idea, I wanna build an

00:54:55.329 --> 00:54:58.934
<v Speaker 0>app that app uses maybe Vue. Js, Angular,

00:54:58.934 --> 00:55:02.055
<v Speaker 0>React, whatever to build a for building a

00:55:02.055 --> 00:55:04.135
<v Speaker 0>SPA, a single page application.

00:55:04.615 --> 00:55:06.215
<v Speaker 0>And I wanna have an API

00:55:06.535 --> 00:55:09.470
<v Speaker 0>next to it so that the front end

00:55:09.470 --> 00:55:12.589
<v Speaker 0>can immediately talk to the API. So static

00:55:12.589 --> 00:55:14.589
<v Speaker 0>file servers what we are looking for, we

00:55:14.589 --> 00:55:15.710
<v Speaker 0>call this thing

00:55:16.109 --> 00:55:17.150
<v Speaker 0>front end.

00:55:18.109 --> 00:55:20.349
<v Speaker 0>And we say we wanna serve that on

00:55:20.349 --> 00:55:22.030
<v Speaker 0>the root of our

00:55:22.109 --> 00:55:23.309
<v Speaker 0>port

00:55:23.915 --> 00:55:25.595
<v Speaker 0>and we wanna have

00:55:25.915 --> 00:55:28.955
<v Speaker 0>all the files for the front end resist

00:55:28.955 --> 00:55:30.555
<v Speaker 0>in the front end folder. And now we

00:55:30.555 --> 00:55:31.355
<v Speaker 0>have a nice

00:55:31.755 --> 00:55:35.195
<v Speaker 0>structure again, let's open Oh, let's maybe do

00:55:35.589 --> 00:55:37.670
<v Speaker 0>this one and let's open

00:55:37.750 --> 00:55:39.670
<v Speaker 0>code in front end

00:55:39.990 --> 00:55:43.430
<v Speaker 0>and let's implement our single page application

00:55:43.589 --> 00:55:44.310
<v Speaker 0>and

00:55:44.630 --> 00:55:46.470
<v Speaker 0>at the beginning that should be as easy

00:55:46.470 --> 00:55:47.270
<v Speaker 0>as this.

00:55:47.750 --> 00:55:50.025
<v Speaker 0>So this is our front end, Right? It's

00:55:50.025 --> 00:55:50.905
<v Speaker 0>more about

00:55:51.464 --> 00:55:52.345
<v Speaker 0>orchestrating

00:55:52.345 --> 00:55:55.224
<v Speaker 0>the things and running them instead of me

00:55:55.224 --> 00:55:57.465
<v Speaker 0>implementing a single page application

00:55:57.944 --> 00:56:00.825
<v Speaker 0>because that will look not that great. I'm

00:56:00.825 --> 00:56:02.825
<v Speaker 0>not a UX guy. I'm not a CSS

00:56:02.825 --> 00:56:03.224
<v Speaker 0>guy.

00:56:03.990 --> 00:56:05.430
<v Speaker 0>Yeah. So bear with me.

00:56:07.350 --> 00:56:08.150
<v Speaker 0>But that's

00:56:08.550 --> 00:56:10.470
<v Speaker 0>Why is the close button not working? I

00:56:10.470 --> 00:56:11.110
<v Speaker 0>don't know.

00:56:11.590 --> 00:56:13.590
<v Speaker 0>So that's that's Let's say that's our front

00:56:13.590 --> 00:56:15.590
<v Speaker 0>end. Right? So we have

00:56:16.674 --> 00:56:19.395
<v Speaker 0>two folders, but still the workflow is the

00:56:19.395 --> 00:56:21.954
<v Speaker 0>same. We do a spin build. It iterates

00:56:21.954 --> 00:56:24.515
<v Speaker 0>over all our components. It checks, do we

00:56:24.515 --> 00:56:26.515
<v Speaker 0>have build instructions for that?

00:56:27.075 --> 00:56:30.275
<v Speaker 0>If so, I execute that for the API.

00:56:30.275 --> 00:56:31.555
<v Speaker 0>It's again doing an

00:56:32.300 --> 00:56:33.660
<v Speaker 0>NPM installing

00:56:33.660 --> 00:56:34.940
<v Speaker 0>all the dependencies.

00:56:34.940 --> 00:56:37.180
<v Speaker 0>That's what takes a second right now.

00:56:38.220 --> 00:56:41.740
<v Speaker 0>Then it's compiling the API down to WebAssembly.

00:56:42.380 --> 00:56:44.300
<v Speaker 0>Then it checks for the front end. I

00:56:44.300 --> 00:56:46.555
<v Speaker 0>don't have to do any build steps. So

00:56:46.555 --> 00:56:47.355
<v Speaker 0>I'm done.

00:56:47.995 --> 00:56:49.995
<v Speaker 0>If I do a spin up right now,

00:56:52.155 --> 00:56:54.475
<v Speaker 0>and I can see I have two available

00:56:54.475 --> 00:56:57.275
<v Speaker 0>routes. So I can immediately browse low close

00:56:57.275 --> 00:56:58.235
<v Speaker 0>3,000

00:56:58.395 --> 00:57:00.155
<v Speaker 0>and get back my

00:57:00.330 --> 00:57:02.890
<v Speaker 0>my document. Okay. Maybe it's worth

00:57:03.050 --> 00:57:06.490
<v Speaker 0>adding a little more content to our HTML

00:57:06.490 --> 00:57:09.130
<v Speaker 0>page. Right? But it is my

00:57:09.290 --> 00:57:11.930
<v Speaker 0>HTML I created a second ago.

00:57:12.570 --> 00:57:13.210
<v Speaker 0>And I have

00:57:13.865 --> 00:57:16.105
<v Speaker 0>a listener right on

00:57:16.105 --> 00:57:17.224
<v Speaker 0>the API

00:57:17.224 --> 00:57:18.425
<v Speaker 0>which returns

00:57:18.505 --> 00:57:20.905
<v Speaker 0>with a four zero four by default.

00:57:22.505 --> 00:57:24.825
<v Speaker 0>So now we can maybe spend a couple

00:57:24.825 --> 00:57:28.105
<v Speaker 0>of minutes in laying out a simple API

00:57:28.105 --> 00:57:30.025
<v Speaker 0>that's more than just

00:57:30.359 --> 00:57:31.960
<v Speaker 0>that's more than just

00:57:32.279 --> 00:57:34.760
<v Speaker 0>to get endpoints over here. Right?

00:57:36.520 --> 00:57:38.200
<v Speaker 0>It gave me a four zero four although

00:57:38.200 --> 00:57:40.440
<v Speaker 0>there is a root route registered.

00:57:40.440 --> 00:57:42.440
<v Speaker 0>But when adding the component,

00:57:42.440 --> 00:57:44.760
<v Speaker 0>I said it should listen to API

00:57:44.760 --> 00:57:46.015
<v Speaker 0>forward slash.

00:57:46.575 --> 00:57:49.135
<v Speaker 0>So I have to mimic that obviously over

00:57:49.135 --> 00:57:49.775
<v Speaker 0>here.

00:57:50.095 --> 00:57:52.975
<v Speaker 0>So this would make the app respond to

00:57:53.295 --> 00:57:56.895
<v Speaker 0>my port my assigned port forward slash API

00:57:56.975 --> 00:57:58.175
<v Speaker 0>and so on and so forth.

00:58:02.360 --> 00:58:03.000
<v Speaker 0>So

00:58:03.320 --> 00:58:06.600
<v Speaker 0>I said there are some more nuggets in

00:58:06.600 --> 00:58:07.800
<v Speaker 0>SpinCLI.

00:58:07.800 --> 00:58:09.000
<v Speaker 0>So for example,

00:58:09.240 --> 00:58:11.880
<v Speaker 0>we are so far we only talked about

00:58:11.960 --> 00:58:14.600
<v Speaker 0>the trigger, right? About things that,

00:58:15.395 --> 00:58:18.115
<v Speaker 0>you know, make our app run. But somehow

00:58:18.115 --> 00:58:21.155
<v Speaker 0>we have to store data, retrieve data,

00:58:21.315 --> 00:58:23.235
<v Speaker 0>and Spin has an SDK

00:58:23.474 --> 00:58:24.595
<v Speaker 0>for TypeScript,

00:58:24.595 --> 00:58:25.875
<v Speaker 0>for for Rust,

00:58:25.875 --> 00:58:27.315
<v Speaker 0>for Go, for Python,

00:58:27.635 --> 00:58:29.155
<v Speaker 0>that simplifies

00:58:29.030 --> 00:58:31.349
<v Speaker 0>things like that. So for example, let's say

00:58:31.349 --> 00:58:34.150
<v Speaker 0>we want to build an app to retrieve

00:58:34.710 --> 00:58:35.990
<v Speaker 0>to retrieve

00:58:35.990 --> 00:58:37.110
<v Speaker 0>values

00:58:39.190 --> 00:58:40.230
<v Speaker 0>and

00:58:40.230 --> 00:58:43.535
<v Speaker 0>want to retrieve values by a certain

00:58:43.694 --> 00:58:45.135
<v Speaker 0>value by key

00:58:45.375 --> 00:58:47.615
<v Speaker 0>and also we have a

00:58:48.015 --> 00:58:50.654
<v Speaker 0>post API to set a value. Let's get

00:58:50.654 --> 00:58:53.295
<v Speaker 0>rid of that. And that's what we basically

00:58:54.015 --> 00:58:54.815
<v Speaker 0>handle

00:58:55.855 --> 00:58:56.734
<v Speaker 0>set

00:58:57.600 --> 00:59:00.560
<v Speaker 0>and we will implement that handle

00:59:01.360 --> 00:59:02.800
<v Speaker 0>get by

00:59:03.600 --> 00:59:04.320
<v Speaker 0>key

00:59:05.840 --> 00:59:07.120
<v Speaker 0>and this is

00:59:08.400 --> 00:59:09.040
<v Speaker 0>handle

00:59:09.920 --> 00:59:12.160
<v Speaker 0>get all. Right. So that's what we're going

00:59:12.160 --> 00:59:12.800
<v Speaker 0>to implement.

00:59:13.515 --> 00:59:14.155
<v Speaker 0>So,

00:59:15.194 --> 00:59:17.914
<v Speaker 0>you know, you recognize there's a colon followed

00:59:17.914 --> 00:59:20.075
<v Speaker 0>by key, that's a route parameter.

00:59:20.395 --> 00:59:21.994
<v Speaker 0>So we can pull that

00:59:22.234 --> 00:59:25.355
<v Speaker 0>by saying, I'm not interested in the request.

00:59:25.520 --> 00:59:27.920
<v Speaker 0>So this gives me basically access to the

00:59:27.920 --> 00:59:29.839
<v Speaker 0>first argument gives me access to the incoming

00:59:29.839 --> 00:59:31.200
<v Speaker 0>request object.

00:59:31.359 --> 00:59:33.280
<v Speaker 0>And the second one allows me to pull

00:59:33.280 --> 00:59:34.000
<v Speaker 0>data,

00:59:34.560 --> 00:59:37.119
<v Speaker 0>for example, from the route parameters,

00:59:37.119 --> 00:59:38.079
<v Speaker 0>the key in that case.

00:59:38.825 --> 00:59:39.865
<v Speaker 0>So let me

00:59:40.105 --> 00:59:42.904
<v Speaker 0>come up with that. So right now TypeScript

00:59:42.904 --> 00:59:43.944
<v Speaker 0>TypeScript

00:59:43.944 --> 00:59:45.945
<v Speaker 0>compiler transpiler would

00:59:46.505 --> 00:59:49.545
<v Speaker 0>yell at me that I'm not using request.

00:59:49.625 --> 00:59:51.384
<v Speaker 0>So I can simply say

00:59:51.920 --> 00:59:54.800
<v Speaker 0>underscore to ignore it and pass in the

00:59:54.800 --> 00:59:56.480
<v Speaker 0>key into my handler.

00:59:57.360 --> 01:00:00.480
<v Speaker 0>And for this one, we will update that

01:00:00.480 --> 01:00:03.200
<v Speaker 0>one in a second because we wanna use

01:00:03.440 --> 01:00:05.040
<v Speaker 0>the request payload.

01:00:05.855 --> 01:00:08.974
<v Speaker 0>Right? Because user should send a post request

01:00:08.974 --> 01:00:10.095
<v Speaker 0>with JSON.

01:00:10.655 --> 01:00:12.815
<v Speaker 0>The the payload contains the value

01:00:13.055 --> 01:00:14.815
<v Speaker 0>and the key is part of the URL

01:00:14.815 --> 01:00:17.214
<v Speaker 0>and then we store that in key value

01:00:17.214 --> 01:00:19.855
<v Speaker 0>stores. Let me quickly create the stops for

01:00:19.855 --> 01:00:20.575
<v Speaker 0>those functions.

01:00:21.670 --> 01:00:23.270
<v Speaker 0>So let's say const,

01:00:23.430 --> 01:00:25.670
<v Speaker 0>I like that style of defining

01:00:27.590 --> 01:00:31.110
<v Speaker 0>JavaScript functions or TypeScript functions in that case.

01:00:32.710 --> 01:00:33.590
<v Speaker 0>Okay.

01:00:33.750 --> 01:00:35.270
<v Speaker 0>So this

01:00:35.350 --> 01:00:36.310
<v Speaker 0>and

01:00:36.855 --> 01:00:37.575
<v Speaker 0>this.

01:00:38.295 --> 01:00:40.375
<v Speaker 0>So here we get a key which is

01:00:40.375 --> 01:00:41.175
<v Speaker 0>a string.

01:00:41.735 --> 01:00:44.775
<v Speaker 0>Over there, we get the key which is

01:00:44.775 --> 01:00:47.175
<v Speaker 0>a string. But in addition to the key,

01:00:47.175 --> 01:00:48.295
<v Speaker 0>we wanna use

01:00:48.935 --> 01:00:50.055
<v Speaker 0>the request payload.

01:00:50.570 --> 01:00:52.810
<v Speaker 0>So let's let's call it the body and

01:00:52.810 --> 01:00:55.050
<v Speaker 0>that's of type array buffer.

01:00:56.010 --> 01:00:57.770
<v Speaker 0>And to get the array buffer,

01:00:58.570 --> 01:00:59.690
<v Speaker 0>that's a stream.

01:00:59.770 --> 01:01:01.930
<v Speaker 0>We can read the stream and we wanna

01:01:01.930 --> 01:01:02.970
<v Speaker 0>do that async.

01:01:04.875 --> 01:01:06.235
<v Speaker 0>So we can say

01:01:06.395 --> 01:01:07.275
<v Speaker 0>await

01:01:07.595 --> 01:01:08.555
<v Speaker 0>request

01:01:08.715 --> 01:01:09.835
<v Speaker 0>array buffer.

01:01:11.035 --> 01:01:13.115
<v Speaker 0>And now it's almost we are almost in

01:01:13.115 --> 01:01:16.075
<v Speaker 0>good shape, but we don't return anything back.

01:01:16.075 --> 01:01:18.555
<v Speaker 0>So let's make it happy over there by

01:01:18.555 --> 01:01:21.995
<v Speaker 0>saying return status

01:01:21.160 --> 01:01:21.960
<v Speaker 0>500

01:01:21.960 --> 01:01:23.400
<v Speaker 0>for now. So

01:01:23.960 --> 01:01:25.240
<v Speaker 0>this is basically

01:01:25.560 --> 01:01:27.560
<v Speaker 0>reminding me to implement it.

01:01:30.360 --> 01:01:31.960
<v Speaker 0>Okay. So this is the shape of the

01:01:31.960 --> 01:01:34.615
<v Speaker 0>API. So now the question is how?

01:01:34.935 --> 01:01:37.895
<v Speaker 0>How can we leverage like a data storage?

01:01:38.055 --> 01:01:39.095
<v Speaker 0>Right? And

01:01:39.335 --> 01:01:40.855
<v Speaker 0>with the Spin SDK,

01:01:41.255 --> 01:01:42.855
<v Speaker 0>give you like

01:01:43.175 --> 01:01:44.775
<v Speaker 0>super simple yet

01:01:45.655 --> 01:01:46.935
<v Speaker 0>valuable APIs

01:01:47.349 --> 01:01:49.670
<v Speaker 0>to achieve day to day tasks.

01:01:49.910 --> 01:01:52.069
<v Speaker 0>And one of them is, for example, using

01:01:52.069 --> 01:01:53.510
<v Speaker 0>key value stores.

01:01:53.990 --> 01:01:54.630
<v Speaker 0>So

01:01:55.109 --> 01:01:56.150
<v Speaker 0>WebAssembly

01:01:56.150 --> 01:01:59.670
<v Speaker 0>has a capability or strict sandbox, a capability

01:01:59.670 --> 01:02:01.030
<v Speaker 0>based security

01:02:01.030 --> 01:02:01.349
<v Speaker 0>model.

01:02:02.214 --> 01:02:03.575
<v Speaker 0>And by default,

01:02:03.575 --> 01:02:06.615
<v Speaker 0>your code is not allowed to use anything.

01:02:06.615 --> 01:02:09.335
<v Speaker 0>It's not allowed to do outbound HTTP.

01:02:09.335 --> 01:02:11.815
<v Speaker 0>It's not allowed to read environment

01:02:11.815 --> 01:02:12.775
<v Speaker 0>variables.

01:02:12.775 --> 01:02:15.095
<v Speaker 0>It's not allowed to do outbound TCP and

01:02:15.095 --> 01:02:18.040
<v Speaker 0>talk to key value store. So you have

01:02:18.040 --> 01:02:21.160
<v Speaker 0>to explicitly grant the permission. And this is

01:02:21.480 --> 01:02:23.960
<v Speaker 0>like, although it might sound

01:02:24.040 --> 01:02:26.520
<v Speaker 0>super tedious in the first place,

01:02:27.000 --> 01:02:29.800
<v Speaker 0>but it's giving you the confidence that your

01:02:29.800 --> 01:02:32.325
<v Speaker 0>code is only doing what you wanted it

01:02:32.325 --> 01:02:32.965
<v Speaker 0>to do.

01:02:33.925 --> 01:02:36.325
<v Speaker 0>And also for the teams

01:02:36.325 --> 01:02:39.605
<v Speaker 0>or for the people that run a platform

01:02:39.685 --> 01:02:42.725
<v Speaker 0>that runs workloads like that, they have the

01:02:42.725 --> 01:02:43.605
<v Speaker 0>confidence

01:02:44.005 --> 01:02:44.565
<v Speaker 0>that

01:02:45.549 --> 01:02:48.349
<v Speaker 0>no matter what the user code does, it

01:02:48.349 --> 01:02:50.750
<v Speaker 0>aligns with all the capabilities

01:02:51.150 --> 01:02:54.030
<v Speaker 0>that are specified in its manifest.

01:02:54.589 --> 01:02:56.829
<v Speaker 0>So that's one of the if you ask

01:02:56.829 --> 01:02:58.589
<v Speaker 0>me, that's one of the greatest

01:02:59.865 --> 01:03:00.665
<v Speaker 0>values

01:03:00.665 --> 01:03:02.665
<v Speaker 0>provided by WebAssembly.

01:03:03.625 --> 01:03:05.305
<v Speaker 0>Okay. So how do we do that? How

01:03:05.305 --> 01:03:07.945
<v Speaker 0>do we give our app access to Kivelli

01:03:07.945 --> 01:03:08.505
<v Speaker 0>store?

01:03:08.985 --> 01:03:11.625
<v Speaker 0>So again, in Spin, we try to simplify

01:03:11.625 --> 01:03:13.705
<v Speaker 0>that as much as possible.

01:03:13.705 --> 01:03:16.185
<v Speaker 0>So we open up the folder where our

01:03:15.600 --> 01:03:17.120
<v Speaker 0>spin toml resists

01:03:17.840 --> 01:03:21.040
<v Speaker 0>and we have that component configuration over here.

01:03:21.040 --> 01:03:22.880
<v Speaker 0>So allowed outbound host

01:03:23.520 --> 01:03:25.440
<v Speaker 0>is the property that you can use to,

01:03:25.440 --> 01:03:27.840
<v Speaker 0>for example, allow my API

01:03:27.920 --> 01:03:33.375
<v Speaker 0>to send requests to httpsapi.github.com.

01:03:33.375 --> 01:03:37.055
<v Speaker 0>Right? Without this being explicitly mentioned here,

01:03:37.535 --> 01:03:38.495
<v Speaker 0>outgoing

01:03:38.495 --> 01:03:39.295
<v Speaker 0>fetch

01:03:39.375 --> 01:03:42.815
<v Speaker 0>calls or HTTP requests to that origin

01:03:42.815 --> 01:03:43.535
<v Speaker 0>will fail.

01:03:44.650 --> 01:03:46.890
<v Speaker 0>And the same applies to key

01:03:47.130 --> 01:03:47.930
<v Speaker 0>value

01:03:48.170 --> 01:03:51.530
<v Speaker 0>stores and SQL lite databases

01:03:51.530 --> 01:03:53.050
<v Speaker 0>and so on and so forth. So there

01:03:53.050 --> 01:03:55.690
<v Speaker 0>are like they are all documented obviously.

01:03:57.464 --> 01:03:59.145
<v Speaker 0>So I wanna give

01:03:59.385 --> 01:04:01.785
<v Speaker 0>my app access to a named key value

01:04:01.785 --> 01:04:03.464
<v Speaker 0>store called default.

01:04:03.464 --> 01:04:05.545
<v Speaker 0>You can use different name,

01:04:05.625 --> 01:04:07.945
<v Speaker 0>but then you have to provide configuration

01:04:08.025 --> 01:04:10.664
<v Speaker 0>like connection string, where that resists.

01:04:11.670 --> 01:04:15.190
<v Speaker 0>But default is like a super convenient way

01:04:15.190 --> 01:04:16.230
<v Speaker 0>of doing that

01:04:16.710 --> 01:04:17.590
<v Speaker 0>because

01:04:17.670 --> 01:04:19.430
<v Speaker 0>if we do a spin

01:04:19.589 --> 01:04:21.430
<v Speaker 0>where are we? We are there. If we

01:04:21.430 --> 01:04:22.550
<v Speaker 0>do a spin build again,

01:04:26.525 --> 01:04:29.005
<v Speaker 0>it should still build everything as we saw

01:04:29.005 --> 01:04:29.805
<v Speaker 0>before.

01:04:29.805 --> 01:04:30.445
<v Speaker 0>Okay.

01:04:30.605 --> 01:04:33.005
<v Speaker 0>If we do a spin up right now,

01:04:33.724 --> 01:04:36.525
<v Speaker 0>you can see storing default key value data

01:04:36.525 --> 01:04:38.765
<v Speaker 0>to dot spin key value DB.

01:04:39.470 --> 01:04:41.230
<v Speaker 0>So the CLI

01:04:41.230 --> 01:04:43.549
<v Speaker 0>knows, hey, Torsten wants to use a key

01:04:43.549 --> 01:04:44.510
<v Speaker 0>value store,

01:04:44.990 --> 01:04:46.830
<v Speaker 0>instead of he

01:04:46.990 --> 01:04:49.230
<v Speaker 0>us asking him to run a key value

01:04:49.230 --> 01:04:51.230
<v Speaker 0>store in a container or something like that,

01:04:52.015 --> 01:04:54.415
<v Speaker 0>let's simply roll a SQLite

01:04:54.415 --> 01:04:56.735
<v Speaker 0>database for him that acts as a key

01:04:56.735 --> 01:04:57.615
<v Speaker 0>value store.

01:04:58.255 --> 01:05:00.494
<v Speaker 0>Right? If that if that's cool for me,

01:05:00.494 --> 01:05:02.575
<v Speaker 0>I can use that. If I wanna leverage

01:05:02.575 --> 01:05:05.375
<v Speaker 0>Redis that's out there in my cluster, I

01:05:05.375 --> 01:05:07.940
<v Speaker 0>just have to provide a configuration

01:05:08.500 --> 01:05:11.460
<v Speaker 0>aside or besides my app

01:05:11.780 --> 01:05:15.140
<v Speaker 0>and tell the Spin app to use a

01:05:15.140 --> 01:05:17.220
<v Speaker 0>runtime so called configuration

01:05:17.220 --> 01:05:19.059
<v Speaker 0>file. So I don't have to change my

01:05:19.059 --> 01:05:20.339
<v Speaker 0>code

01:05:20.035 --> 01:05:22.595
<v Speaker 0>to point to Redis instead of

01:05:22.915 --> 01:05:24.435
<v Speaker 0>the developer

01:05:24.675 --> 01:05:25.955
<v Speaker 0>key value store.

01:05:28.355 --> 01:05:29.155
<v Speaker 0>Alright.

01:05:29.155 --> 01:05:29.875
<v Speaker 0>This

01:05:29.955 --> 01:05:31.155
<v Speaker 0>is the SpinTML.

01:05:31.155 --> 01:05:32.675
<v Speaker 0>This is our implementation.

01:05:32.675 --> 01:05:34.515
<v Speaker 0>How could I right now

01:05:35.480 --> 01:05:37.560
<v Speaker 0>retrieve all the keys from the Key Value

01:05:37.560 --> 01:05:38.200
<v Speaker 0>Store?

01:05:38.680 --> 01:05:40.600
<v Speaker 0>So this is where we can use

01:05:41.400 --> 01:05:43.480
<v Speaker 0>the key the the Spin

01:05:44.040 --> 01:05:44.840
<v Speaker 0>SDK.

01:05:44.920 --> 01:05:47.720
<v Speaker 0>So there is a Spin SDK. Why is

01:05:47.720 --> 01:05:48.760
<v Speaker 0>that not okay.

01:05:49.635 --> 01:05:52.035
<v Speaker 0>Let's use KV and

01:05:53.395 --> 01:05:55.955
<v Speaker 0>then we can either open a named key

01:05:55.955 --> 01:05:58.515
<v Speaker 0>value store or we can say, I wanna

01:05:58.515 --> 01:06:01.395
<v Speaker 0>leverage the default key value store. So right,

01:06:02.300 --> 01:06:04.859
<v Speaker 0>on my machine default is right now using

01:06:04.859 --> 01:06:05.900
<v Speaker 0>SQLite.

01:06:06.060 --> 01:06:08.619
<v Speaker 0>I can override that and can say default

01:06:08.619 --> 01:06:10.780
<v Speaker 0>right now points to Redis. So it's just

01:06:10.780 --> 01:06:12.780
<v Speaker 0>a name to loosely couple

01:06:13.420 --> 01:06:15.099
<v Speaker 0>the application implementation

01:06:15.099 --> 01:06:16.940
<v Speaker 0>from its configuration.

01:06:17.955 --> 01:06:20.035
<v Speaker 0>And key value has

01:06:20.115 --> 01:06:21.315
<v Speaker 0>or exposes

01:06:21.315 --> 01:06:22.915
<v Speaker 0>like simple APIs.

01:06:23.235 --> 01:06:24.995
<v Speaker 0>So for example, get keys.

01:06:25.795 --> 01:06:27.475
<v Speaker 0>I can simply call that.

01:06:27.795 --> 01:06:29.475
<v Speaker 0>That gives me all keys.

01:06:31.160 --> 01:06:32.920
<v Speaker 0>And then I can say

01:06:33.080 --> 01:06:35.160
<v Speaker 0>const values

01:06:35.640 --> 01:06:36.520
<v Speaker 0>equals

01:06:37.080 --> 01:06:38.040
<v Speaker 0>all keys.

01:06:38.920 --> 01:06:41.320
<v Speaker 0>Let's say, now we can use a map,

01:06:41.320 --> 01:06:42.920
<v Speaker 0>so there's a key

01:06:43.315 --> 01:06:45.635
<v Speaker 0>and we take that key and then we

01:06:45.635 --> 01:06:46.515
<v Speaker 0>return

01:06:46.835 --> 01:06:49.875
<v Speaker 0>key being key and value being

01:06:49.875 --> 01:06:51.315
<v Speaker 0>k v get,

01:06:53.475 --> 01:06:54.755
<v Speaker 0>let's say get

01:06:54.835 --> 01:06:56.995
<v Speaker 0>JSON, no get JSON, that's like this.

01:06:57.590 --> 01:06:59.510
<v Speaker 0>That was rust. Sorry for that.

01:07:01.190 --> 01:07:03.110
<v Speaker 0>And then we return

01:07:03.110 --> 01:07:05.830
<v Speaker 0>like whatever is there in values

01:07:05.830 --> 01:07:08.470
<v Speaker 0>and instead of returning an HTTP 500,

01:07:10.005 --> 01:07:12.724
<v Speaker 0>we simply use the JSON helper from the

01:07:12.724 --> 01:07:14.724
<v Speaker 0>ET router to return

01:07:15.045 --> 01:07:16.645
<v Speaker 0>the entire contents

01:07:16.645 --> 01:07:18.484
<v Speaker 0>of our key value store.

01:07:19.045 --> 01:07:21.125
<v Speaker 0>Right? So again,

01:07:21.125 --> 01:07:22.885
<v Speaker 0>and I think this is super important. The

01:07:22.885 --> 01:07:25.240
<v Speaker 0>idea is from the Spin SDK to provide

01:07:25.240 --> 01:07:25.960
<v Speaker 0>simple

01:07:26.279 --> 01:07:28.440
<v Speaker 0>yet useful APIs

01:07:28.440 --> 01:07:30.599
<v Speaker 0>to speed up your developer,

01:07:31.000 --> 01:07:32.599
<v Speaker 0>performance when building,

01:07:33.079 --> 01:07:36.279
<v Speaker 0>applications for the cloud or for a serverless

01:07:36.279 --> 01:07:36.680
<v Speaker 0>platform.

01:07:38.145 --> 01:07:38.785
<v Speaker 0>Cool.

01:07:39.265 --> 01:07:42.145
<v Speaker 0>Let's quickly implement the other two's because that's

01:07:42.145 --> 01:07:42.945
<v Speaker 0>super easy.

01:07:43.665 --> 01:07:47.025
<v Speaker 0>We ah, maybe interesting thing, there could be

01:07:47.025 --> 01:07:49.025
<v Speaker 0>network in between our spin app and the

01:07:49.025 --> 01:07:50.305
<v Speaker 0>key value store. Right?

01:07:51.265 --> 01:07:51.985
<v Speaker 0>So

01:07:52.539 --> 01:07:55.660
<v Speaker 0>if something fails, if a error is thrown

01:07:55.660 --> 01:07:58.780
<v Speaker 0>and it's not caught by your guest code,

01:07:59.339 --> 01:08:01.180
<v Speaker 0>spin catches the error

01:08:01.660 --> 01:08:03.900
<v Speaker 0>and returns an h t p 500.

01:08:04.619 --> 01:08:08.175
<v Speaker 0>Right? So that's obviously that's that is and

01:08:08.175 --> 01:08:10.575
<v Speaker 0>should be used. You should use try catch

01:08:10.575 --> 01:08:13.215
<v Speaker 0>to catch errors and you know, handle them

01:08:13.215 --> 01:08:15.615
<v Speaker 0>with care and handle them correctly.

01:08:15.855 --> 01:08:18.814
<v Speaker 0>But in the worst case, the surrounding or

01:08:18.814 --> 01:08:21.854
<v Speaker 0>the underlying runtime catch the error and returns

01:08:21.854 --> 01:08:23.135
<v Speaker 0>an http 500.

01:08:26.300 --> 01:08:27.019
<v Speaker 0>Alright.

01:08:27.899 --> 01:08:30.939
<v Speaker 0>If the key is faulty,

01:08:30.939 --> 01:08:34.619
<v Speaker 0>meaning if it's empty, undefined, null, we return

01:08:34.619 --> 01:08:36.219
<v Speaker 0>a new response

01:08:36.219 --> 01:08:37.979
<v Speaker 0>and saying this is

01:08:38.145 --> 01:08:40.145
<v Speaker 0>a bad request

01:08:40.145 --> 01:08:43.024
<v Speaker 0>and setting the status to 400.

01:08:43.104 --> 01:08:43.744
<v Speaker 0>Okay.

01:08:44.064 --> 01:08:44.944
<v Speaker 0>Otherwise,

01:08:45.024 --> 01:08:47.024
<v Speaker 0>we say, hey, if

01:08:47.265 --> 01:08:49.585
<v Speaker 0>not KV exists

01:08:49.585 --> 01:08:51.185
<v Speaker 0>at position key,

01:08:51.585 --> 01:08:52.625
<v Speaker 0>we return,

01:08:52.625 --> 01:08:53.505
<v Speaker 0>let's copy that.

01:08:55.479 --> 01:08:58.920
<v Speaker 0>Nope, let's copy that and say, this is

01:08:58.920 --> 01:09:00.199
<v Speaker 0>a four zero four

01:09:01.080 --> 01:09:02.279
<v Speaker 0>not found.

01:09:03.000 --> 01:09:05.640
<v Speaker 0>And if it exists, we return

01:09:06.360 --> 01:09:09.000
<v Speaker 0>JSON

01:09:07.325 --> 01:09:08.364
<v Speaker 0>kv

01:09:08.524 --> 01:09:09.885
<v Speaker 0>get JSON

01:09:09.885 --> 01:09:11.165
<v Speaker 0>at key

01:09:12.045 --> 01:09:14.285
<v Speaker 0>and are done with implementing

01:09:14.285 --> 01:09:16.285
<v Speaker 0>the handle get by key.

01:09:17.725 --> 01:09:19.564
<v Speaker 0>Last but not least, they're set.

01:09:20.179 --> 01:09:22.659
<v Speaker 0>So we expect our code

01:09:23.300 --> 01:09:23.939
<v Speaker 0>to

01:09:24.500 --> 01:09:25.939
<v Speaker 0>provide a payload

01:09:26.179 --> 01:09:27.380
<v Speaker 0>once JSON

01:09:27.380 --> 01:09:28.340
<v Speaker 0>parse.

01:09:29.139 --> 01:09:31.859
<v Speaker 0>So this is a new int eight array

01:09:31.939 --> 01:09:33.699
<v Speaker 0>and we have to turn that into a

01:09:33.699 --> 01:09:35.699
<v Speaker 0>string. We can use a decoder,

01:09:36.635 --> 01:09:39.354
<v Speaker 0>new text decoder by default UTF eight which

01:09:39.354 --> 01:09:41.594
<v Speaker 0>is the right one. So we can say

01:09:41.594 --> 01:09:42.474
<v Speaker 0>decode

01:09:43.515 --> 01:09:44.314
<v Speaker 0>body.

01:09:44.715 --> 01:09:47.514
<v Speaker 0>So we end up with something turned

01:09:47.515 --> 01:09:50.660
<v Speaker 0>into an object by using JSON parse. This

01:09:50.820 --> 01:09:52.180
<v Speaker 0>could fail, right?

01:09:52.820 --> 01:09:53.540
<v Speaker 0>Error.

01:09:53.780 --> 01:09:55.860
<v Speaker 0>So we could again return

01:09:55.860 --> 01:09:56.980
<v Speaker 0>bad request.

01:10:01.220 --> 01:10:03.060
<v Speaker 0>Or let's do it like this.

01:10:09.835 --> 01:10:11.755
<v Speaker 0>No, no, let's do it, let's do it

01:10:11.755 --> 01:10:12.554
<v Speaker 0>like this.

01:10:12.955 --> 01:10:14.715
<v Speaker 0>Okay, so if

01:10:15.515 --> 01:10:17.595
<v Speaker 0>we get a payload, let's say if,

01:10:21.000 --> 01:10:23.239
<v Speaker 0>let's accept any payload for now. And let's

01:10:23.239 --> 01:10:25.559
<v Speaker 0>say, const kv equals

01:10:25.960 --> 01:10:28.119
<v Speaker 0>kv open default

01:10:28.360 --> 01:10:30.039
<v Speaker 0>and let's say kv

01:10:30.119 --> 01:10:31.879
<v Speaker 0>set at key,

01:10:32.520 --> 01:10:34.520
<v Speaker 0>our set JSON JSON.

01:10:36.795 --> 01:10:39.355
<v Speaker 0>At position key, we wanna set the entire

01:10:39.355 --> 01:10:41.675
<v Speaker 0>payload. So whatever the user sends over the

01:10:41.675 --> 01:10:44.075
<v Speaker 0>wire, this is not a good API, right?

01:10:44.075 --> 01:10:45.915
<v Speaker 0>Because we accept everything

01:10:45.915 --> 01:10:48.155
<v Speaker 0>from the user. So we have at least

01:10:48.315 --> 01:10:50.395
<v Speaker 0>we should at least do some housekeeping over

01:10:50.395 --> 01:10:50.635
<v Speaker 0>there.

01:10:51.730 --> 01:10:53.489
<v Speaker 0>Maybe if key

01:10:54.290 --> 01:10:56.850
<v Speaker 0>if not key return

01:10:56.850 --> 01:10:58.610
<v Speaker 0>new response

01:10:59.810 --> 01:11:00.610
<v Speaker 0>that

01:11:00.690 --> 01:11:02.929
<v Speaker 0>that request

01:11:03.730 --> 01:11:04.770
<v Speaker 0>status

01:11:05.090 --> 01:11:05.970
<v Speaker 0>400.

01:11:07.824 --> 01:11:09.905
<v Speaker 0>Maybe let's move that over there.

01:11:11.744 --> 01:11:12.945
<v Speaker 0>And let's say

01:11:14.065 --> 01:11:15.985
<v Speaker 0>or not payload

01:11:15.985 --> 01:11:16.864
<v Speaker 0>or

01:11:16.945 --> 01:11:18.145
<v Speaker 0>not payload

01:11:19.540 --> 01:11:22.020
<v Speaker 0>dot value. So at least some housekeeping, right?

01:11:22.020 --> 01:11:25.300
<v Speaker 0>We should not trust what arbitrary clients send

01:11:25.300 --> 01:11:27.059
<v Speaker 0>to our rest APIs.

01:11:27.540 --> 01:11:29.940
<v Speaker 0>And I hope that's somewhat,

01:11:29.940 --> 01:11:30.659
<v Speaker 0>you

01:11:30.820 --> 01:11:31.380
<v Speaker 0>know,

01:11:32.260 --> 01:11:33.140
<v Speaker 0>aligning with that.

01:11:34.035 --> 01:11:36.835
<v Speaker 0>So, but if everything works great, we wanna

01:11:36.835 --> 01:11:40.035
<v Speaker 0>return a new response and we simply say,

01:11:40.435 --> 01:11:43.075
<v Speaker 0>no, because we didn't wanna set something there

01:11:43.075 --> 01:11:45.395
<v Speaker 0>and we set two zero one or maybe

01:11:45.395 --> 01:11:47.075
<v Speaker 0>we set another header,

01:11:48.980 --> 01:11:49.860
<v Speaker 0>headers.

01:11:50.100 --> 01:11:51.220
<v Speaker 0>That's

01:11:51.220 --> 01:11:54.500
<v Speaker 0>the location header over there and we set

01:11:54.500 --> 01:11:56.660
<v Speaker 0>that to API,

01:11:57.140 --> 01:11:58.100
<v Speaker 0>what was it?

01:11:59.060 --> 01:11:59.620
<v Speaker 0>Values,

01:12:01.474 --> 01:12:02.275
<v Speaker 0>Values

01:12:02.275 --> 01:12:03.554
<v Speaker 0>at position

01:12:05.315 --> 01:12:05.874
<v Speaker 0>key.

01:12:06.994 --> 01:12:10.994
<v Speaker 0>And I'm messing up this one because

01:12:11.554 --> 01:12:11.954
<v Speaker 0>status.

01:12:13.410 --> 01:12:14.450
<v Speaker 0>That's correct.

01:12:14.930 --> 01:12:15.970
<v Speaker 0>That's correct.

01:12:18.210 --> 01:12:19.970
<v Speaker 0>This is that one. This is that one.

01:12:19.970 --> 01:12:21.970
<v Speaker 0>Okay. What's going on there?

01:12:23.570 --> 01:12:25.250
<v Speaker 0>Return new response.

01:12:25.250 --> 01:12:28.050
<v Speaker 0>I don't provide a body

01:12:27.655 --> 01:12:30.055
<v Speaker 0>and then I why is it green? It

01:12:30.055 --> 01:12:31.015
<v Speaker 0>looks weird.

01:12:35.495 --> 01:12:37.895
<v Speaker 0>Expression is not capable. Status,

01:12:37.895 --> 01:12:39.255
<v Speaker 0>I had there's

01:12:39.255 --> 01:12:40.055
<v Speaker 0>status

01:12:40.055 --> 01:12:41.975
<v Speaker 0>two zero one. Did I did I make

01:12:41.975 --> 01:12:42.775
<v Speaker 0>a typo? No.

01:12:43.870 --> 01:12:45.869
<v Speaker 0>Headers is an object. Object

01:12:46.030 --> 01:12:47.550
<v Speaker 0>gets if I do that.

01:12:49.470 --> 01:12:52.429
<v Speaker 1>Is Permanent location doesn't need wrapped in quotes.

01:12:52.830 --> 01:12:53.710
<v Speaker 0>Yeah.

01:12:53.710 --> 01:12:56.190
<v Speaker 0>No. I think it's not it doesn't want

01:12:56.190 --> 01:12:57.469
<v Speaker 0>backticks there.

01:12:57.710 --> 01:12:58.350
<v Speaker 0>That's weird.

01:13:00.165 --> 01:13:02.485
<v Speaker 1>Doesn't need anything, right? Like it's just the

01:13:02.485 --> 01:13:03.045
<v Speaker 1>location. Yeah,

01:13:04.965 --> 01:13:06.965
<v Speaker 0>you're right. You're right. It could be just

01:13:06.965 --> 01:13:08.324
<v Speaker 0>like that. Yeah.

01:13:08.965 --> 01:13:09.925
<v Speaker 0>Good call.

01:13:10.805 --> 01:13:11.525
<v Speaker 0>Yeah, that's good.

01:13:12.910 --> 01:13:15.470
<v Speaker 0>All right. So this would basically be a

01:13:15.470 --> 01:13:18.190
<v Speaker 0>simple CRUD API backed by

01:13:18.830 --> 01:13:20.190
<v Speaker 0>key value store.

01:13:21.630 --> 01:13:24.190
<v Speaker 0>Let's try it. Let's go there

01:13:24.805 --> 01:13:26.645
<v Speaker 0>and do a spin

01:13:26.885 --> 01:13:28.965
<v Speaker 0>up dash dash build.

01:13:29.365 --> 01:13:31.365
<v Speaker 0>So you also can, you know, save that

01:13:31.365 --> 01:13:34.085
<v Speaker 0>spin build command and run both in one.

01:13:35.125 --> 01:13:37.605
<v Speaker 0>And we should end up with, again, an

01:13:37.605 --> 01:13:39.365
<v Speaker 0>API running on 3,000.

01:13:40.340 --> 01:13:40.980
<v Speaker 0>Okay.

01:13:42.260 --> 01:13:43.460
<v Speaker 0>Let's

01:13:43.460 --> 01:13:44.659
<v Speaker 0>take this one.

01:13:45.060 --> 01:13:47.380
<v Speaker 0>Oh, no, let's go away.

01:13:47.940 --> 01:13:48.580
<v Speaker 0>Yeah.

01:13:49.140 --> 01:13:50.580
<v Speaker 0>Let's take this one

01:13:50.980 --> 01:13:54.340
<v Speaker 0>and do a curl I x get

01:13:55.635 --> 01:13:56.675
<v Speaker 0>values

01:13:56.755 --> 01:13:59.795
<v Speaker 0>and we expect an empty array. Okay, so

01:13:59.795 --> 01:14:00.755
<v Speaker 0>let's

01:14:01.315 --> 01:14:02.995
<v Speaker 0>do ix

01:14:03.795 --> 01:14:04.514
<v Speaker 0>post

01:14:05.155 --> 01:14:06.995
<v Speaker 0>and post in

01:14:09.040 --> 01:14:09.840
<v Speaker 0>content

01:14:09.920 --> 01:14:10.719
<v Speaker 0>type

01:14:11.040 --> 01:14:11.920
<v Speaker 0>application

01:14:12.160 --> 01:14:13.120
<v Speaker 0>JSON

01:14:13.120 --> 01:14:15.199
<v Speaker 0>and data being

01:14:17.840 --> 01:14:19.040
<v Speaker 0>value

01:14:20.255 --> 01:14:21.135
<v Speaker 0>value.

01:14:22.575 --> 01:14:23.375
<v Speaker 0>Hello.

01:14:26.095 --> 01:14:27.455
<v Speaker 0>And there is a

01:14:27.855 --> 01:14:29.135
<v Speaker 0>double quote missing.

01:14:29.375 --> 01:14:31.935
<v Speaker 0>Push post that to that end. Oh, 404.

01:14:32.420 --> 01:14:34.420
<v Speaker 1>You need a key in the URL, so

01:14:34.420 --> 01:14:37.380
<v Speaker 1>values slash. Thank you. Thank you. Thank you.

01:14:37.380 --> 01:14:38.020
<v Speaker 0>Foo.

01:14:38.420 --> 01:14:39.780
<v Speaker 0>That was a good one.

01:14:40.180 --> 01:14:40.900
<v Speaker 0>Oh.

01:14:41.140 --> 01:14:41.780
<v Speaker 0>Oh.

01:14:42.660 --> 01:14:45.994
<v Speaker 0>Destructed parameter is undefined. Oh. I think you

01:14:45.994 --> 01:14:47.994
<v Speaker 1>used dot values in the code instead of

01:14:47.994 --> 01:14:48.635
<v Speaker 1>value.

01:14:53.114 --> 01:14:55.594
<v Speaker 0>No. I think this is this is my

01:14:55.675 --> 01:14:56.715
<v Speaker 0>mistake.

01:14:57.034 --> 01:14:59.675
<v Speaker 0>And you said values and I used?

01:15:00.190 --> 01:15:03.789
<v Speaker 1>Yeah. Oh, no. But and your post handler.

01:15:04.270 --> 01:15:04.909
<v Speaker 0>Yeah.

01:15:05.469 --> 01:15:07.070
<v Speaker 0>In the post handler.

01:15:07.389 --> 01:15:08.909
<v Speaker 0>Handle set

01:15:08.909 --> 01:15:09.789
<v Speaker 0>over there.

01:15:10.670 --> 01:15:11.469
<v Speaker 0>Yeah.

01:15:11.630 --> 01:15:13.309
<v Speaker 0>Oh, no. You just passed the whole payload.

01:15:13.309 --> 01:15:15.875
<v Speaker 1>Okay. Never mind. Yeah. Okay. Let me let

01:15:15.875 --> 01:15:16.755
<v Speaker 0>me try.

01:15:16.915 --> 01:15:19.715
<v Speaker 0>Yeah. I think I messed up the parameter

01:15:22.035 --> 01:15:22.675
<v Speaker 0>thing.

01:15:26.835 --> 01:15:28.675
<v Speaker 0>No. I was I was looking at the

01:15:28.675 --> 01:15:30.195
<v Speaker 0>wrong I was looking at this one.

01:15:30.880 --> 01:15:32.320
<v Speaker 0>So async,

01:15:32.320 --> 01:15:33.840
<v Speaker 0>we get a request

01:15:34.080 --> 01:15:37.040
<v Speaker 0>and then it's using destruction over there.

01:15:39.760 --> 01:15:41.600
<v Speaker 0>And it'll set and then we grab the

01:15:41.600 --> 01:15:41.840
<v Speaker 0>key.

01:15:43.614 --> 01:15:44.655
<v Speaker 0>That's weird.

01:15:45.455 --> 01:15:48.175
<v Speaker 0>Let me try what happens if I curl

01:15:48.175 --> 01:15:49.855
<v Speaker 0>the get endpoint

01:15:49.855 --> 01:15:50.894
<v Speaker 0>at foo.

01:15:51.935 --> 01:15:53.454
<v Speaker 0>That works. Okay.

01:15:54.895 --> 01:15:56.255
<v Speaker 0>So if I don't do that,

01:15:59.750 --> 01:16:01.030
<v Speaker 0>what is it? Is it is it

01:16:01.750 --> 01:16:02.869
<v Speaker 0>It's a request.

01:16:03.430 --> 01:16:04.630
<v Speaker 0>Come on that.

01:16:05.030 --> 01:16:05.510
<v Speaker 0>That's

01:16:05.830 --> 01:16:07.750
<v Speaker 0>that looks wrong to me.

01:16:10.390 --> 01:16:11.830
<v Speaker 0>That looks wrong to me.

01:16:17.645 --> 01:16:20.045
<v Speaker 0>Ah, come on. It's it's telling me what

01:16:20.045 --> 01:16:22.285
<v Speaker 0>to do. Right? So I wanna get the

01:16:22.285 --> 01:16:24.844
<v Speaker 0>request. So if I then

01:16:25.245 --> 01:16:25.805
<v Speaker 0>args

01:16:27.180 --> 01:16:29.900
<v Speaker 0>and I'm expecting it exactly

01:16:30.540 --> 01:16:31.420
<v Speaker 0>this way,

01:16:31.820 --> 01:16:33.020
<v Speaker 0>it looks correct.

01:16:34.060 --> 01:16:36.860
<v Speaker 0>Let me try. Let me try once again.

01:16:36.860 --> 01:16:38.940
<v Speaker 0>Yeah. I think it's me messing up right

01:16:38.940 --> 01:16:39.980
<v Speaker 0>now the

01:16:40.355 --> 01:16:42.354
<v Speaker 0>syntax of the ET router.

01:16:42.835 --> 01:16:44.434
<v Speaker 0>I'm posting

01:16:45.395 --> 01:16:46.434
<v Speaker 0>some value

01:16:46.675 --> 01:16:49.394
<v Speaker 0>to API values for error.

01:16:51.155 --> 01:16:52.034
<v Speaker 0>Destructured

01:16:52.034 --> 01:16:53.954
<v Speaker 0>parameter is undefined.

01:16:53.955 --> 01:16:55.554
<v Speaker 0>So this has to happen over there.

01:16:57.079 --> 01:16:58.119
<v Speaker 0>Let's

01:16:58.119 --> 01:16:59.719
<v Speaker 0>call in extras

01:17:01.159 --> 01:17:04.840
<v Speaker 0>and let's pass in extras. Let's do the

01:17:05.159 --> 01:17:06.439
<v Speaker 0>JavaScript

01:17:06.679 --> 01:17:09.239
<v Speaker 0>trick over here. Extras is

01:17:09.480 --> 01:17:10.119
<v Speaker 0>any

01:17:10.745 --> 01:17:12.425
<v Speaker 0>and let's say console. Log

01:17:13.145 --> 01:17:13.945
<v Speaker 0>json

01:17:14.505 --> 01:17:18.585
<v Speaker 0>oops. This one, and then let's do json's

01:17:20.345 --> 01:17:21.305
<v Speaker 0>stringify

01:17:23.590 --> 01:17:24.550
<v Speaker 0>extras.

01:17:24.630 --> 01:17:26.550
<v Speaker 0>Sometimes you just got to do it.

01:17:28.950 --> 01:17:29.430
<v Speaker 0>It's just

01:17:32.150 --> 01:17:33.910
<v Speaker 0>I'm not seeing it right now and I

01:17:33.910 --> 01:17:35.915
<v Speaker 0>think this is the easiest way to get

01:17:35.915 --> 01:17:38.475
<v Speaker 0>some hint on what I hold wrong.

01:17:42.155 --> 01:17:42.875
<v Speaker 0>Okay.

01:17:46.235 --> 01:17:48.555
<v Speaker 0>So obviously Oh, now we get a bad

01:17:48.555 --> 01:17:49.355
<v Speaker 0>request. Okay.

01:17:50.190 --> 01:17:51.550
<v Speaker 0>And undefined.

01:17:52.030 --> 01:17:53.310
<v Speaker 0>That's interesting.

01:17:54.750 --> 01:17:56.190
<v Speaker 0>That's interesting.

01:17:56.750 --> 01:17:58.110
<v Speaker 0>We are

01:17:58.270 --> 01:18:01.230
<v Speaker 0>so okay. Let me pull well,

01:18:01.710 --> 01:18:02.910
<v Speaker 0>that's not me pulling.

01:18:03.345 --> 01:18:05.905
<v Speaker 0>Let's look at enterprise.

01:18:06.065 --> 01:18:09.345
<v Speaker 0>So I created a repository with like common

01:18:09.345 --> 01:18:11.825
<v Speaker 0>patterns and how to implement them in spin

01:18:11.825 --> 01:18:13.264
<v Speaker 0>with different languages.

01:18:13.745 --> 01:18:16.065
<v Speaker 0>And there is an http crud and I

01:18:16.065 --> 01:18:17.745
<v Speaker 0>just have to look up

01:18:18.750 --> 01:18:20.110
<v Speaker 0>this syntax.

01:18:20.110 --> 01:18:22.269
<v Speaker 0>Oh, it's the other way around. You see?

01:18:23.789 --> 01:18:24.590
<v Speaker 0>Okay.

01:18:24.989 --> 01:18:25.869
<v Speaker 0>That's

01:18:25.869 --> 01:18:28.829
<v Speaker 0>a pity. Okay. I have to memorize that.

01:18:29.150 --> 01:18:30.669
<v Speaker 0>Maybe it's too late today,

01:18:30.909 --> 01:18:33.755
<v Speaker 0>but let's fix that and get our app

01:18:33.755 --> 01:18:35.514
<v Speaker 0>in a in a working state.

01:18:35.915 --> 01:18:38.235
<v Speaker 1>It is seven almost 07:30PM

01:18:38.235 --> 01:18:39.915
<v Speaker 1>for you. Right? I mean, it's

01:18:39.915 --> 01:18:40.715
<v Speaker 1>been okay.

01:18:41.034 --> 01:18:43.835
<v Speaker 0>Yeah. Good call. So I'm I'm hurry hurrying

01:18:43.835 --> 01:18:44.554
<v Speaker 0>up right now.

01:18:45.620 --> 01:18:47.700
<v Speaker 0>I'm trying to find the right Versus Code

01:18:47.700 --> 01:18:50.020
<v Speaker 0>instance right now. This is it. Okay.

01:18:50.340 --> 01:18:52.340
<v Speaker 0>So it's the other way around. Sorry for

01:18:52.340 --> 01:18:54.260
<v Speaker 0>that. It's key. Yeah. It worked in the

01:18:54.260 --> 01:18:56.260
<v Speaker 0>get handler. So obviously, it's the other way

01:18:56.260 --> 01:18:56.820
<v Speaker 0>around. Right?

01:18:58.815 --> 01:19:00.494
<v Speaker 0>Explaining the error

01:19:00.655 --> 01:19:03.855
<v Speaker 0>makes it so obvious to see it works

01:19:03.855 --> 01:19:05.614
<v Speaker 0>here. So it had to be the other

01:19:05.614 --> 01:19:06.415
<v Speaker 0>way around.

01:19:06.975 --> 01:19:10.735
<v Speaker 0>Okay. So we can remove our little helper

01:19:10.815 --> 01:19:12.255
<v Speaker 0>over here again

01:19:14.240 --> 01:19:15.040
<v Speaker 0>and

01:19:15.760 --> 01:19:17.520
<v Speaker 0>say this is key

01:19:17.760 --> 01:19:20.080
<v Speaker 0>and we expect that to be a string.

01:19:20.240 --> 01:19:21.840
<v Speaker 0>So now we should be back to a

01:19:21.840 --> 01:19:23.200
<v Speaker 0>valid TypeScript.

01:19:23.200 --> 01:19:23.840
<v Speaker 0>Yep.

01:19:25.200 --> 01:19:28.400
<v Speaker 0>Let's go there, cycle through the workflow once

01:19:28.400 --> 01:19:28.640
<v Speaker 0>again.

01:19:35.085 --> 01:19:36.764
<v Speaker 0>So app is running

01:19:37.005 --> 01:19:38.925
<v Speaker 0>and let's look for the post request.

01:19:42.180 --> 01:19:44.179
<v Speaker 0>Now request is undefined.

01:19:44.260 --> 01:19:44.820
<v Speaker 0>This

01:19:46.340 --> 01:19:48.900
<v Speaker 0>is super weird. What's happening over here? Post

01:19:48.900 --> 01:19:49.699
<v Speaker 0>item.

01:19:49.700 --> 01:19:50.260
<v Speaker 0>It

01:19:51.860 --> 01:19:52.500
<v Speaker 0>looks

01:19:57.375 --> 01:19:59.934
<v Speaker 0>It looks pretty much the same, doesn't it?

01:20:01.775 --> 01:20:02.574
<v Speaker 0>Yeah.

01:20:03.135 --> 01:20:03.854
<v Speaker 0>Yep.

01:20:05.775 --> 01:20:09.054
<v Speaker 0>I'm

01:20:09.054 --> 01:20:09.534
<v Speaker 0>prepared.

01:20:10.520 --> 01:20:12.040
<v Speaker 0>Let me check.

01:20:13.000 --> 01:20:14.200
<v Speaker 0>Let me open this one.

01:20:23.025 --> 01:20:24.385
<v Speaker 0>Oh, I'm not pulling,

01:20:24.865 --> 01:20:27.025
<v Speaker 0>I'm not pulling things over there.

01:20:27.985 --> 01:20:29.745
<v Speaker 0>Okay. I don't see the error for the

01:20:29.745 --> 01:20:30.864
<v Speaker 0>CRUD right now.

01:20:31.825 --> 01:20:34.705
<v Speaker 0>Maybe given the the time and given how

01:20:34.705 --> 01:20:36.865
<v Speaker 0>how long we are already in the stream.

01:20:38.480 --> 01:20:40.640
<v Speaker 0>But but give me a sec. Key is

01:20:40.640 --> 01:20:43.680
<v Speaker 0>set. Request is not set. And it's complaining

01:20:43.680 --> 01:20:44.640
<v Speaker 0>about that

01:20:45.040 --> 01:20:48.240
<v Speaker 0>API post. So there is a fundamental error

01:20:48.240 --> 01:20:49.040
<v Speaker 0>somewhere.

01:20:51.280 --> 01:20:52.160
<v Speaker 0>I don't see it.

01:20:55.915 --> 01:20:57.835
<v Speaker 0>I don't see it. Hover over the dot

01:20:57.835 --> 01:21:00.235
<v Speaker 1>post, does it give us the signature for

01:21:00.235 --> 01:21:01.115
<v Speaker 1>the handler?

01:21:01.515 --> 01:21:03.675
<v Speaker 0>Oh, yeah. It's a request handler. I request

01:21:03.675 --> 01:21:05.355
<v Speaker 0>that takes an array.

01:21:07.250 --> 01:21:09.330
<v Speaker 0>Oh, no. Can I can I simply pull

01:21:09.330 --> 01:21:10.850
<v Speaker 0>it by over here?

01:21:11.650 --> 01:21:13.890
<v Speaker 0>So that's a re any

01:21:14.050 --> 01:21:15.170
<v Speaker 0>yeah. It could

01:21:18.370 --> 01:21:19.250
<v Speaker 0>handlers.

01:21:19.490 --> 01:21:20.930
<v Speaker 0>Okay. Request any.

01:21:22.635 --> 01:21:24.875
<v Speaker 0>I did that like a trillion times.

01:21:28.555 --> 01:21:30.795
<v Speaker 0>I'm not seeing it. Let me check.

01:21:31.355 --> 01:21:34.155
<v Speaker 0>Post items like this. Params.

01:21:34.155 --> 01:21:36.760
<v Speaker 0>Oh, yeah. It's here. It's not key. It's

01:21:36.760 --> 01:21:39.800
<v Speaker 0>not immediately. It's like this. It's params.

01:21:39.800 --> 01:21:41.480
<v Speaker 0>Maybe it's like that.

01:21:42.600 --> 01:21:44.920
<v Speaker 0>But that's weird. That means this should could

01:21:44.920 --> 01:21:46.200
<v Speaker 0>also not work.

01:21:50.145 --> 01:21:50.945
<v Speaker 0>Let

01:21:53.585 --> 01:21:54.385
<v Speaker 0>me try.

01:21:56.305 --> 01:21:58.385
<v Speaker 0>Let me try one more time. If not,

01:21:58.385 --> 01:21:59.105
<v Speaker 0>we move on.

01:22:02.949 --> 01:22:03.749
<v Speaker 0>Spin

01:22:03.909 --> 01:22:04.949
<v Speaker 0>up build.

01:22:10.790 --> 01:22:12.229
<v Speaker 0>And there we are.

01:22:14.230 --> 01:22:14.869
<v Speaker 0>So curling

01:22:15.804 --> 01:22:17.324
<v Speaker 0>the get endpoint

01:22:17.324 --> 01:22:20.045
<v Speaker 0>gives me a not found. Oh, let's do

01:22:20.204 --> 01:22:20.764
<v Speaker 0>Yeah.

01:22:21.005 --> 01:22:24.044
<v Speaker 0>Let's try the post endpoint over there.

01:22:26.605 --> 01:22:28.125
<v Speaker 0>Request is undefined.

01:22:29.070 --> 01:22:30.269
<v Speaker 0>That's so weird.

01:22:32.510 --> 01:22:35.790
<v Speaker 0>Am I posting to API values? Yeah. That's

01:22:35.790 --> 01:22:36.510
<v Speaker 0>correct.

01:22:38.670 --> 01:22:41.469
<v Speaker 0>I was super confident this being the the

01:22:41.469 --> 01:22:42.030
<v Speaker 0>signature.

01:22:44.585 --> 01:22:45.465
<v Speaker 0>Like that.

01:22:47.625 --> 01:22:49.385
<v Speaker 0>I have to try that once more because

01:22:49.385 --> 01:22:51.705
<v Speaker 0>that was almost almost what I had in

01:22:51.705 --> 01:22:52.665
<v Speaker 0>the first place.

01:22:53.705 --> 01:22:54.505
<v Speaker 0>Besides,

01:22:54.505 --> 01:22:57.520
<v Speaker 0>yeah, parameters. I I bet that's working right

01:22:57.520 --> 01:23:00.960
<v Speaker 0>now because parameters make sense. Otherwise, my key

01:23:00.960 --> 01:23:04.160
<v Speaker 0>could infer whatever's in that extras object.

01:23:04.720 --> 01:23:06.320
<v Speaker 0>Let me try.

01:23:06.560 --> 01:23:07.040
<v Speaker 0>So

01:23:08.320 --> 01:23:09.280
<v Speaker 0>Oh, come on.

01:23:12.764 --> 01:23:14.284
<v Speaker 0>That's super weird.

01:23:21.324 --> 01:23:24.125
<v Speaker 0>Now it's happy again with that but not

01:23:24.125 --> 01:23:26.390
<v Speaker 0>happy with my params.

01:23:28.950 --> 01:23:31.270
<v Speaker 0>I better had it working like a day.

01:23:31.270 --> 01:23:33.110
<v Speaker 0>Oh, let me check.

01:23:35.350 --> 01:23:36.230
<v Speaker 0>So

01:23:37.765 --> 01:23:40.485
<v Speaker 0>where am I? In my demos folder. Let

01:23:40.485 --> 01:23:41.445
<v Speaker 0>me check.

01:23:42.885 --> 01:23:44.885
<v Speaker 0>My IP, it's CDKV.

01:23:46.485 --> 01:23:48.165
<v Speaker 0>This is CDKV

01:23:48.165 --> 01:23:48.885
<v Speaker 0>two.

01:23:50.885 --> 01:23:52.005
<v Speaker 0>All Rust samples.

01:24:20.120 --> 01:24:22.120
<v Speaker 0>This looks pretty close to what we had,

01:24:22.120 --> 01:24:22.600
<v Speaker 0>right?

01:24:23.000 --> 01:24:25.320
<v Speaker 0>Besides that the parameter over here is called

01:24:25.320 --> 01:24:27.159
<v Speaker 0>ID instead of key.

01:24:27.560 --> 01:24:28.280
<v Speaker 0>Okay.

01:24:29.160 --> 01:24:32.040
<v Speaker 0>So I'm pretty confident that's exactly what we

01:24:32.040 --> 01:24:32.280
<v Speaker 0>had.

01:24:35.595 --> 01:24:37.595
<v Speaker 0>But I love to be proven wrong and

01:24:37.595 --> 01:24:38.955
<v Speaker 0>this thread not working.

01:24:40.795 --> 01:24:43.035
<v Speaker 0>How how to address that would basically e

01:24:43.035 --> 01:24:44.715
<v Speaker 0>d e d router

01:24:46.635 --> 01:24:51.115
<v Speaker 0>basically look at getting star

01:24:50.260 --> 01:24:52.580
<v Speaker 0>registering routes over there and they are pulling

01:24:52.580 --> 01:24:53.300
<v Speaker 0>this.

01:24:53.699 --> 01:24:54.739
<v Speaker 0>That's correct.

01:24:54.980 --> 01:24:55.539
<v Speaker 0>And

01:24:56.179 --> 01:24:58.980
<v Speaker 0>it's just a question of pulling

01:24:58.980 --> 01:25:00.659
<v Speaker 0>not just the parameter,

01:25:01.219 --> 01:25:03.425
<v Speaker 0>also complete example

01:25:05.105 --> 01:25:06.385
<v Speaker 0>pulling the

01:25:06.545 --> 01:25:07.824
<v Speaker 0>request in.

01:25:08.385 --> 01:25:10.545
<v Speaker 0>But I had that. I think that's exactly

01:25:10.545 --> 01:25:12.465
<v Speaker 0>the same as we had over there.

01:25:13.025 --> 01:25:13.664
<v Speaker 0>Yeah.

01:25:14.304 --> 01:25:14.784
<v Speaker 0>Oh,

01:25:16.500 --> 01:25:17.139
<v Speaker 0>Yeah.

01:25:17.380 --> 01:25:19.139
<v Speaker 0>Maybe we have to tell.

01:25:20.099 --> 01:25:22.500
<v Speaker 0>Maybe we have to tell, hey, you should

01:25:22.500 --> 01:25:23.939
<v Speaker 0>use the request.

01:25:24.099 --> 01:25:25.459
<v Speaker 0>Yeah. That's right.

01:25:26.500 --> 01:25:28.340
<v Speaker 0>Router fetch request

01:25:28.340 --> 01:25:29.940
<v Speaker 0>or router handler. Yeah.

01:25:32.595 --> 01:25:35.235
<v Speaker 0>I'm pretty confident that should be the right

01:25:35.475 --> 01:25:37.715
<v Speaker 1>So it looks like you just passed the

01:25:37.715 --> 01:25:38.675
<v Speaker 1>request,

01:25:39.075 --> 01:25:42.035
<v Speaker 1>and then we used request dot text to

01:25:42.035 --> 01:25:43.235
<v Speaker 1>get the array buffer.

01:25:44.980 --> 01:25:46.340
<v Speaker 1>So if you just get

01:25:50.739 --> 01:25:52.739
<v Speaker 0>Let me yeah. Okay.

01:25:52.900 --> 01:25:53.619
<v Speaker 0>But

01:25:53.860 --> 01:25:55.860
<v Speaker 1>let's So there's no function because there's no

01:25:55.860 --> 01:25:58.580
<v Speaker 1>request dot array buffer. It's request

01:25:58.580 --> 01:25:59.139
<v Speaker 1>dot text

01:25:59.955 --> 01:26:02.275
<v Speaker 1>according to one of the examples I found

01:26:02.275 --> 01:26:02.995
<v Speaker 1>online.

01:26:04.435 --> 01:26:05.955
<v Speaker 1>Mhmm. But I I don't know if that's

01:26:05.955 --> 01:26:06.995
<v Speaker 1>correct. Okay.

01:26:08.835 --> 01:26:11.155
<v Speaker 0>Let's do one thing to double check that.

01:26:11.155 --> 01:26:13.395
<v Speaker 0>So if we lock the key for the

01:26:13.395 --> 01:26:13.955
<v Speaker 0>get

01:26:14.430 --> 01:26:16.830
<v Speaker 0>and for, I think, the post action that

01:26:16.830 --> 01:26:19.949
<v Speaker 0>basically it it it throws over here already

01:26:19.949 --> 01:26:20.670
<v Speaker 0>in

01:26:20.830 --> 01:26:23.070
<v Speaker 0>that function that I'm calling.

01:26:23.469 --> 01:26:25.630
<v Speaker 0>Right? So if I do that and if

01:26:25.630 --> 01:26:27.309
<v Speaker 0>I do a console log

01:26:28.110 --> 01:26:29.150
<v Speaker 0>request,

01:26:29.395 --> 01:26:32.195
<v Speaker 0>so like this, and I guess it makes

01:26:32.195 --> 01:26:34.834
<v Speaker 0>sense to JSON stringify both,

01:26:35.315 --> 01:26:37.874
<v Speaker 0>and to see what's on the object.

01:26:38.034 --> 01:26:39.394
<v Speaker 0>Stringify.

01:26:40.915 --> 01:26:41.955
<v Speaker 0>Okay. So,

01:26:45.020 --> 01:26:45.900
<v Speaker 0>there.

01:26:50.780 --> 01:26:51.500
<v Speaker 0>F1.

01:26:55.905 --> 01:26:58.945
<v Speaker 0>Okay. So it's running. So let's do a

01:26:59.344 --> 01:27:00.465
<v Speaker 0>curl

01:27:01.425 --> 01:27:02.144
<v Speaker 0>to

01:27:02.864 --> 01:27:05.585
<v Speaker 0>this one. So we get a not found

01:27:05.585 --> 01:27:08.465
<v Speaker 0>and we expect now full being locked to

01:27:08.465 --> 01:27:09.425
<v Speaker 0>the terminal. Okay.

01:27:10.130 --> 01:27:10.769
<v Speaker 0>Meaning

01:27:11.010 --> 01:27:12.289
<v Speaker 0>this works,

01:27:12.369 --> 01:27:14.130
<v Speaker 0>pulling the key like that.

01:27:14.770 --> 01:27:18.290
<v Speaker 0>Okay. Next is calling the post endpoint and

01:27:18.290 --> 01:27:20.130
<v Speaker 0>we expect the key to be locked first

01:27:20.130 --> 01:27:22.210
<v Speaker 0>and the request to be locked second. Okay.

01:27:23.675 --> 01:27:26.875
<v Speaker 0>Curling the post endpoint, we get that error

01:27:26.875 --> 01:27:29.355
<v Speaker 0>and we see foo. Great.

01:27:30.235 --> 01:27:33.195
<v Speaker 0>Okay. So foo, it could either be

01:27:33.435 --> 01:27:34.074
<v Speaker 0>that

01:27:35.035 --> 01:27:35.995
<v Speaker 0>this is key.

01:27:37.380 --> 01:27:38.820
<v Speaker 0>You know, it could also be the case

01:27:38.820 --> 01:27:41.380
<v Speaker 0>that, right, not a second argument was logging

01:27:42.179 --> 01:27:43.619
<v Speaker 0>and the request

01:27:43.620 --> 01:27:45.139
<v Speaker 0>request being

01:27:45.540 --> 01:27:46.260
<v Speaker 0>this.

01:27:47.780 --> 01:27:49.940
<v Speaker 1>So let's just for before you run this

01:27:49.940 --> 01:27:51.620
<v Speaker 1>again to save as a step oh, I'm

01:27:51.620 --> 01:27:53.285
<v Speaker 1>sorry. I guess, why not change key to

01:27:53.285 --> 01:27:55.205
<v Speaker 1>params and just dump out the whole first

01:27:55.205 --> 01:27:57.605
<v Speaker 1>object as well? The the whole

01:27:58.325 --> 01:28:00.485
<v Speaker 0>This one? Yeah. Yeah. It makes sense.

01:28:02.005 --> 01:28:02.885
<v Speaker 0>Params

01:28:02.885 --> 01:28:04.085
<v Speaker 0>params

01:28:04.085 --> 01:28:04.485
<v Speaker 0>and

01:28:05.450 --> 01:28:06.970
<v Speaker 0>dump params,

01:28:06.970 --> 01:28:09.370
<v Speaker 0>and pass in params.

01:28:09.530 --> 01:28:10.170
<v Speaker 0>Let's

01:28:10.490 --> 01:28:12.570
<v Speaker 0>pretend there is a key. Yeah, yeah.

01:28:13.050 --> 01:28:13.770
<v Speaker 0>Okay.

01:28:15.370 --> 01:28:16.650
<v Speaker 0>Yeah, that's smarter.

01:28:21.535 --> 01:28:25.295
<v Speaker 0>All right, and let's curl it again. Oh,

01:28:25.295 --> 01:28:26.494
<v Speaker 0>cyclic object.

01:28:28.655 --> 01:28:30.175
<v Speaker 0>Is now undefined.

01:28:32.735 --> 01:28:33.935
<v Speaker 1>Params undefined.

01:28:35.260 --> 01:28:38.139
<v Speaker 0>So this was correct. This was key. If

01:28:38.139 --> 01:28:39.900
<v Speaker 0>we go back to key

01:28:41.900 --> 01:28:43.739
<v Speaker 1>But how can it be undefined and resolved

01:28:43.739 --> 01:28:44.619
<v Speaker 1>to key?

01:28:45.820 --> 01:28:48.460
<v Speaker 0>No, that was just key

01:28:49.915 --> 01:28:51.275
<v Speaker 0>being that string.

01:28:53.755 --> 01:28:55.355
<v Speaker 1>Okay. Let's try again.

01:28:56.555 --> 01:28:58.235
<v Speaker 1>I don't see how that could work.

01:29:00.795 --> 01:29:02.635
<v Speaker 0>Yeah. You're oh, because yeah.

01:29:04.890 --> 01:29:06.810
<v Speaker 0>It's an array. Right?

01:29:07.130 --> 01:29:08.570
<v Speaker 0>And I'm destructuring

01:29:08.570 --> 01:29:09.370
<v Speaker 0>now.

01:29:09.530 --> 01:29:11.370
<v Speaker 1>Is your quest and key just in the

01:29:11.370 --> 01:29:11.930
<v Speaker 1>same

01:29:12.570 --> 01:29:14.890
<v Speaker 1>object? Oh, you mean like this?

01:29:15.370 --> 01:29:17.210
<v Speaker 1>Yeah. Like this. Yeah.

01:29:19.425 --> 01:29:20.624
<v Speaker 1>Is it that simple?

01:29:21.425 --> 01:29:24.224
<v Speaker 0>Is it that simple? Yeah. Yeah.

01:29:24.864 --> 01:29:27.264
<v Speaker 0>Okay. Let's Did you build it? Alright. Yeah.

01:29:27.264 --> 01:29:28.304
<v Speaker 0>Have to clear that.

01:29:30.864 --> 01:29:31.744
<v Speaker 0>Destruction

01:29:31.744 --> 01:29:32.625
<v Speaker 0>parameters

01:29:32.625 --> 01:29:33.344
<v Speaker 0>on defined.

01:29:34.989 --> 01:29:37.070
<v Speaker 0>Okay. So it should be up and running.

01:29:37.070 --> 01:29:38.749
<v Speaker 0>It is. Let's try.

01:29:39.310 --> 01:29:40.590
<v Speaker 0>ArrayBufferRequest

01:29:40.590 --> 01:29:41.630
<v Speaker 0>is undefined.

01:29:41.949 --> 01:29:43.309
<v Speaker 0>That's super weird.

01:29:44.110 --> 01:29:46.429
<v Speaker 1>All right. Maybe we just skip the post

01:29:45.855 --> 01:29:48.735
<v Speaker 1>stuff and then Yeah. Yeah. Maybe it's worth

01:29:48.735 --> 01:29:51.695
<v Speaker 0>pulling like the working example there.

01:29:52.255 --> 01:29:55.775
<v Speaker 0>Right? Which is leading to, okay, there is

01:29:55.775 --> 01:29:57.295
<v Speaker 0>a post endpoint

01:29:57.295 --> 01:29:58.015
<v Speaker 0>like

01:29:58.530 --> 01:30:00.209
<v Speaker 0>personalize over here

01:30:01.250 --> 01:30:03.729
<v Speaker 0>that's using like a popular

01:30:05.329 --> 01:30:06.129
<v Speaker 0>NPM

01:30:06.210 --> 01:30:08.050
<v Speaker 0>module from the community

01:30:08.130 --> 01:30:10.449
<v Speaker 0>which is lang change js. So the idea

01:30:10.449 --> 01:30:11.570
<v Speaker 0>of this example

01:30:11.889 --> 01:30:15.095
<v Speaker 0>is to basically give us a front end

01:30:15.095 --> 01:30:16.215
<v Speaker 0>where

01:30:16.535 --> 01:30:18.455
<v Speaker 0>we can enter

01:30:18.535 --> 01:30:20.215
<v Speaker 0>like personal information

01:30:20.295 --> 01:30:22.695
<v Speaker 0>about the potential customer

01:30:23.655 --> 01:30:27.810
<v Speaker 0>and like a general product description and then

01:30:27.810 --> 01:30:30.130
<v Speaker 0>leverage a large language model

01:30:30.130 --> 01:30:32.930
<v Speaker 0>to come up with a personal product

01:30:32.930 --> 01:30:35.490
<v Speaker 0>description to make that super

01:30:35.490 --> 01:30:38.370
<v Speaker 0>engaging and the customer automatically wants to buy

01:30:38.370 --> 01:30:39.490
<v Speaker 0>that product. That's the idea.

01:30:42.554 --> 01:30:44.474
<v Speaker 0>As you can see, we use the router

01:30:45.114 --> 01:30:45.834
<v Speaker 0>and

01:30:46.635 --> 01:30:47.915
<v Speaker 0>we pull

01:30:47.915 --> 01:30:51.755
<v Speaker 0>the request array buffer that's get turned

01:30:51.755 --> 01:30:55.500
<v Speaker 0>into a JSON object that you know, matches

01:30:55.500 --> 01:30:56.700
<v Speaker 0>like my

01:30:56.700 --> 01:30:59.340
<v Speaker 0>interface over there. So again, we have the

01:30:59.340 --> 01:31:00.620
<v Speaker 0>product description,

01:31:00.620 --> 01:31:01.580
<v Speaker 0>we have some

01:31:01.740 --> 01:31:02.620
<v Speaker 0>fundamental

01:31:02.620 --> 01:31:05.180
<v Speaker 0>information about the customer, first name, last name,

01:31:05.180 --> 01:31:06.860
<v Speaker 0>age, gender, nationality,

01:31:06.860 --> 01:31:08.220
<v Speaker 0>and recent purchases.

01:31:11.545 --> 01:31:15.224
<v Speaker 0>Yeah. And then after checking everything,

01:31:15.224 --> 01:31:18.425
<v Speaker 0>we load some configuration data. So this is

01:31:18.425 --> 01:31:19.224
<v Speaker 0>basically,

01:31:19.304 --> 01:31:20.985
<v Speaker 0>you know, adding like

01:31:21.065 --> 01:31:22.505
<v Speaker 0>spin variables

01:31:22.824 --> 01:31:24.985
<v Speaker 0>to like what we use from spin.

01:31:25.840 --> 01:31:28.080
<v Speaker 0>And then we use OLAMA

01:31:28.960 --> 01:31:31.600
<v Speaker 0>as a as a large language model, you

01:31:31.600 --> 01:31:34.640
<v Speaker 0>know, through its lang chain package,

01:31:35.600 --> 01:31:36.880
<v Speaker 0>computer prompt

01:31:38.625 --> 01:31:39.744
<v Speaker 0>and basically

01:31:40.224 --> 01:31:43.585
<v Speaker 0>use chaining to say, hey, dear large language

01:31:43.585 --> 01:31:46.144
<v Speaker 0>model come up with a personalized

01:31:46.465 --> 01:31:48.065
<v Speaker 0>with a personalized

01:31:48.065 --> 01:31:49.585
<v Speaker 0>product description

01:31:50.310 --> 01:31:53.909
<v Speaker 0>whatever, for whatever I entered into the form.

01:31:54.469 --> 01:31:56.710
<v Speaker 0>And it's following the same pattern, right? So

01:31:56.710 --> 01:31:57.989
<v Speaker 0>I have an API

01:31:58.389 --> 01:32:00.469
<v Speaker 0>and I have a front end. However, in

01:32:00.469 --> 01:32:03.110
<v Speaker 0>that case, there's little more in the

01:32:06.605 --> 01:32:07.885
<v Speaker 0>index HTML.

01:32:08.525 --> 01:32:09.645
<v Speaker 0>There's also

01:32:09.805 --> 01:32:11.965
<v Speaker 0>like a minified version of Bootstrap

01:32:12.045 --> 01:32:14.364
<v Speaker 0>and some super simple

01:32:14.365 --> 01:32:17.520
<v Speaker 0>JavaScript because all I do from the front

01:32:17.520 --> 01:32:20.320
<v Speaker 0>end side is issuing a fetch call

01:32:20.640 --> 01:32:23.119
<v Speaker 0>to my post endpoint exposed

01:32:23.600 --> 01:32:24.880
<v Speaker 0>through the Spin app.

01:32:26.720 --> 01:32:27.440
<v Speaker 1>All right.

01:32:27.760 --> 01:32:30.880
<v Speaker 0>I think the interesting thing, interesting pieces

01:32:31.255 --> 01:32:33.975
<v Speaker 0>besides, okay, adding lang chain

01:32:34.055 --> 01:32:35.815
<v Speaker 0>using Olama,

01:32:36.615 --> 01:32:38.295
<v Speaker 0>the Olama LLM

01:32:38.615 --> 01:32:40.375
<v Speaker 0>are in SpinTML.

01:32:40.775 --> 01:32:42.375
<v Speaker 0>So we configure

01:32:42.455 --> 01:32:44.215
<v Speaker 0>three application variables.

01:32:44.620 --> 01:32:48.060
<v Speaker 0>Hey, where's my OLAMA service? OLAMA is open

01:32:48.060 --> 01:32:51.820
<v Speaker 0>source server that can run different large language

01:32:51.820 --> 01:32:52.460
<v Speaker 0>models.

01:32:52.940 --> 01:32:54.539
<v Speaker 0>So where's that API?

01:32:55.340 --> 01:32:57.739
<v Speaker 0>Which model do you wanna use? Because OLAMA

01:32:57.739 --> 01:33:00.525
<v Speaker 0>can run different things. LAMA,

01:33:01.085 --> 01:33:03.005
<v Speaker 0>LAMA free, Mistral,

01:33:03.325 --> 01:33:04.205
<v Speaker 0>DeepSeq,

01:33:04.205 --> 01:33:05.165
<v Speaker 0>whatever, right?

01:33:06.285 --> 01:33:07.725
<v Speaker 0>And what temperature?

01:33:07.725 --> 01:33:10.925
<v Speaker 0>So how how let's say

01:33:11.485 --> 01:33:12.845
<v Speaker 0>how creative

01:33:13.410 --> 01:33:16.690
<v Speaker 0>could the large language model become in generating

01:33:16.690 --> 01:33:19.250
<v Speaker 0>a response according to my question.

01:33:20.370 --> 01:33:21.010
<v Speaker 0>So

01:33:21.250 --> 01:33:23.250
<v Speaker 0>the there are three variables

01:33:23.250 --> 01:33:26.930
<v Speaker 0>and we use them to, for example, allow

01:33:27.090 --> 01:33:28.050
<v Speaker 0>the API

01:33:29.005 --> 01:33:31.485
<v Speaker 0>to do outbound HTTP

01:33:31.485 --> 01:33:33.565
<v Speaker 0>to our OLAMA server.

01:33:33.805 --> 01:33:36.125
<v Speaker 0>So we have to explicitly whitelist that.

01:33:36.605 --> 01:33:39.165
<v Speaker 0>But we also wanna tell the API to

01:33:39.165 --> 01:33:43.085
<v Speaker 0>make the the app itself, the API configurable

01:33:43.220 --> 01:33:46.020
<v Speaker 0>without us having to recompile again and again

01:33:46.020 --> 01:33:47.540
<v Speaker 0>if things change.

01:33:48.020 --> 01:33:50.340
<v Speaker 0>So we allow the very the

01:33:51.060 --> 01:33:52.500
<v Speaker 0>API component

01:33:52.740 --> 01:33:55.620
<v Speaker 0>to use the variables ola mappaseurl

01:33:55.620 --> 01:33:57.220
<v Speaker 0>model temperature.

01:33:58.085 --> 01:33:59.125
<v Speaker 0>In

01:33:59.125 --> 01:34:00.085
<v Speaker 0>contrast,

01:34:00.085 --> 01:34:02.324
<v Speaker 0>the front end neither

01:34:02.885 --> 01:34:05.364
<v Speaker 0>has to do outbound HTTP

01:34:05.364 --> 01:34:07.685
<v Speaker 0>because the API is served on the same

01:34:07.685 --> 01:34:08.565
<v Speaker 0>origin

01:34:09.730 --> 01:34:10.610
<v Speaker 0>nor

01:34:11.329 --> 01:34:14.209
<v Speaker 0>does it have to know about

01:34:15.329 --> 01:34:16.610
<v Speaker 0>the OLAMA

01:34:16.849 --> 01:34:17.729
<v Speaker 0>API

01:34:17.730 --> 01:34:19.649
<v Speaker 0>which model we wanna use.

01:34:19.969 --> 01:34:22.864
<v Speaker 0>This is just information that is only accessible

01:34:22.864 --> 01:34:25.505
<v Speaker 0>to the API component. So no matter what

01:34:25.505 --> 01:34:27.505
<v Speaker 0>the front end component does,

01:34:27.985 --> 01:34:29.105
<v Speaker 0>it is not

01:34:29.905 --> 01:34:32.785
<v Speaker 0>able to access those values. So I can

01:34:32.785 --> 01:34:34.465
<v Speaker 0>find granular pin

01:34:35.905 --> 01:34:37.025
<v Speaker 0>or

01:34:37.670 --> 01:34:40.150
<v Speaker 0>assign values to components. And I think that's

01:34:40.150 --> 01:34:42.469
<v Speaker 0>the most interesting part over here.

01:34:44.150 --> 01:34:46.950
<v Speaker 0>Okay, so how to assign them? So the

01:34:46.950 --> 01:34:50.470
<v Speaker 0>easiest way is you could specify environment variables

01:34:50.470 --> 01:34:52.150
<v Speaker 0>with a prefix

01:34:52.055 --> 01:34:54.054
<v Speaker 0>spin underscore variable

01:34:54.215 --> 01:34:56.535
<v Speaker 0>and then those are picked up. But you

01:34:56.535 --> 01:34:59.815
<v Speaker 0>can also load environment variables from things like

01:34:59.815 --> 01:35:01.975
<v Speaker 0>HashiCorp Vault for example,

01:35:02.535 --> 01:35:05.415
<v Speaker 0>or when deploying to Fermion Cloud, you can

01:35:05.415 --> 01:35:07.015
<v Speaker 0>specify those variables

01:35:07.220 --> 01:35:11.220
<v Speaker 0>during deployment time and they are securely stored

01:35:11.220 --> 01:35:14.020
<v Speaker 0>encrypted at rest in Fermion Cloud.

01:35:14.740 --> 01:35:15.460
<v Speaker 0>In

01:35:15.940 --> 01:35:16.900
<v Speaker 0>SpinCube,

01:35:16.980 --> 01:35:19.940
<v Speaker 0>you could pull them from Kubernetes config maps,

01:35:19.940 --> 01:35:21.380
<v Speaker 0>from Kubernetes secrets,

01:35:21.380 --> 01:35:23.755
<v Speaker 0>so all the familiar places, right,

01:35:23.995 --> 01:35:25.355
<v Speaker 0>are supported.

01:35:26.475 --> 01:35:27.195
<v Speaker 0>Okay.

01:35:27.595 --> 01:35:28.555
<v Speaker 0>So now,

01:35:29.035 --> 01:35:29.835
<v Speaker 0>I'm,

01:35:30.235 --> 01:35:30.795
<v Speaker 0>mentally

01:35:31.355 --> 01:35:32.235
<v Speaker 0>doing

01:35:32.235 --> 01:35:32.715
<v Speaker 0>crossing

01:35:33.835 --> 01:35:35.835
<v Speaker 0>all the fingers that I have that this

01:35:35.835 --> 01:35:36.235
<v Speaker 0>works.

01:35:36.860 --> 01:35:39.179
<v Speaker 0>And I'm super confident it works but I

01:35:39.179 --> 01:35:40.940
<v Speaker 0>don't know why the previous demo did not

01:35:40.940 --> 01:35:43.260
<v Speaker 0>work. So I do a spin build, right,

01:35:43.260 --> 01:35:44.699
<v Speaker 0>to compile everything.

01:35:45.500 --> 01:35:47.500
<v Speaker 0>And let me cancel this one because I

01:35:47.500 --> 01:35:49.739
<v Speaker 0>wanna run the app on the same port.

01:35:50.300 --> 01:35:50.699
<v Speaker 0>Okay.

01:35:51.285 --> 01:35:52.645
<v Speaker 0>So I can

01:35:53.285 --> 01:35:55.765
<v Speaker 0>either go down the road and can say

01:35:55.765 --> 01:35:56.725
<v Speaker 0>spin

01:35:56.725 --> 01:35:59.125
<v Speaker 0>variable and specify it like that,

01:35:59.445 --> 01:36:00.565
<v Speaker 0>or I can

01:36:00.885 --> 01:36:01.845
<v Speaker 0>inline

01:36:02.005 --> 01:36:06.565
<v Speaker 0>specify the variables and I pre like

01:36:05.910 --> 01:36:07.349
<v Speaker 0>wrote that one.

01:36:07.750 --> 01:36:08.390
<v Speaker 0>So let me

01:36:09.350 --> 01:36:11.350
<v Speaker 0>I hope my terminal my terminal does not

01:36:11.350 --> 01:36:14.150
<v Speaker 0>support new line over there. So what I'm

01:36:14.150 --> 01:36:16.150
<v Speaker 0>basically doing and I'm saying, hey, there's a

01:36:16.150 --> 01:36:18.390
<v Speaker 0>spin variable called ollama

01:36:18.390 --> 01:36:19.750
<v Speaker 0>base URL. Set

01:36:20.265 --> 01:36:23.545
<v Speaker 0>their its value to this URL.

01:36:24.585 --> 01:36:26.104
<v Speaker 0>And there is a value

01:36:26.344 --> 01:36:28.665
<v Speaker 0>a variable called oLamaModel

01:36:28.665 --> 01:36:31.624
<v Speaker 0>set that to DeepSeek r one latest.

01:36:32.745 --> 01:36:34.745
<v Speaker 0>Cycling back to the spin TOML,

01:36:35.850 --> 01:36:37.449
<v Speaker 0>so those are required.

01:36:37.530 --> 01:36:40.570
<v Speaker 0>So the app won't start without me specifying

01:36:40.570 --> 01:36:41.209
<v Speaker 0>them.

01:36:41.530 --> 01:36:42.729
<v Speaker 0>For temperature,

01:36:42.730 --> 01:36:44.730
<v Speaker 0>I defined a default value of o dot

01:36:44.730 --> 01:36:47.370
<v Speaker 0>four. So I could override it, but I

01:36:47.370 --> 01:36:49.770
<v Speaker 0>don't have to specify it because there is

01:36:49.770 --> 01:36:50.730
<v Speaker 0>already a value.

01:36:51.565 --> 01:36:52.204
<v Speaker 0>Okay.

01:36:52.525 --> 01:36:55.644
<v Speaker 0>So now let me execute that.

01:36:56.764 --> 01:36:59.405
<v Speaker 0>Now click the link. This is my

01:37:00.764 --> 01:37:01.564
<v Speaker 0>super

01:37:01.565 --> 01:37:03.084
<v Speaker 0>like fancy,

01:37:03.165 --> 01:37:04.684
<v Speaker 0>let's call it fancy

01:37:04.925 --> 01:37:06.045
<v Speaker 0>UI over there.

01:37:07.140 --> 01:37:09.300
<v Speaker 0>As I told you, I'm not a I'm

01:37:09.300 --> 01:37:09.940
<v Speaker 0>not a

01:37:10.260 --> 01:37:11.380
<v Speaker 0>UX

01:37:11.699 --> 01:37:12.980
<v Speaker 0>CSS guy.

01:37:13.460 --> 01:37:14.980
<v Speaker 0>So let me do first

01:37:14.980 --> 01:37:16.739
<v Speaker 0>name, last name,

01:37:17.219 --> 01:37:17.940
<v Speaker 0>male,

01:37:18.500 --> 01:37:20.820
<v Speaker 0>age. Yes, I'm

01:37:20.494 --> 01:37:22.814
<v Speaker 0>42 years old, German.

01:37:23.375 --> 01:37:26.974
<v Speaker 0>I recently bought like the super awesome

01:37:27.775 --> 01:37:28.735
<v Speaker 0>hiking

01:37:29.855 --> 01:37:33.375
<v Speaker 0>shoe. Oh, hiking, sorry. Hiking shoe

01:37:34.520 --> 01:37:35.880
<v Speaker 0>44 whatever.

01:37:36.120 --> 01:37:38.520
<v Speaker 0>I bought a new iPhone

01:37:39.320 --> 01:37:40.200
<v Speaker 0>Pro

01:37:40.600 --> 01:37:43.240
<v Speaker 0>and the product description. Let's say we have

01:37:43.240 --> 01:37:43.880
<v Speaker 0>the

01:37:44.600 --> 01:37:45.960
<v Speaker 0>Nebulus

01:37:46.760 --> 01:37:47.480
<v Speaker 0>Smart

01:37:47.640 --> 01:37:48.440
<v Speaker 0>Speaker

01:37:48.600 --> 01:37:49.560
<v Speaker 0>3,000.

01:37:52.735 --> 01:37:54.655
<v Speaker 0>Or let's say the no.

01:37:55.695 --> 01:37:57.614
<v Speaker 0>Is Bluetooth

01:37:59.054 --> 01:37:59.695
<v Speaker 0>water

01:38:00.255 --> 01:38:03.775
<v Speaker 0>resistant

01:38:04.940 --> 01:38:05.900
<v Speaker 0>smart

01:38:06.620 --> 01:38:07.340
<v Speaker 0>speaker.

01:38:08.380 --> 01:38:10.540
<v Speaker 0>So, okay, let's say this is our product

01:38:10.540 --> 01:38:13.979
<v Speaker 0>description. And right now I have the Olama.

01:38:14.300 --> 01:38:15.499
<v Speaker 0>The Olama

01:38:15.980 --> 01:38:18.860
<v Speaker 0>server is running on Linode. So I created

01:38:18.860 --> 01:38:19.739
<v Speaker 0>like

01:38:19.775 --> 01:38:23.215
<v Speaker 0>a small Linode, deployed OLAMA according to their

01:38:23.215 --> 01:38:25.215
<v Speaker 0>guide, deployed DeepSeq.

01:38:25.534 --> 01:38:27.374
<v Speaker 0>And right now, it's not

01:38:27.614 --> 01:38:30.574
<v Speaker 0>it's not pre warmed, meaning this will take

01:38:30.574 --> 01:38:31.854
<v Speaker 0>a couple of seconds.

01:38:32.255 --> 01:38:34.494
<v Speaker 0>It's basically right now constructing

01:38:34.494 --> 01:38:35.454
<v Speaker 0>prompt,

01:38:35.830 --> 01:38:38.469
<v Speaker 0>calling into the OLAMA server.

01:38:38.949 --> 01:38:43.350
<v Speaker 0>And then it's just waiting for the LLM

01:38:43.350 --> 01:38:46.550
<v Speaker 0>to finish reasoning and giving us like a

01:38:46.550 --> 01:38:47.750
<v Speaker 0>super awesome

01:38:48.645 --> 01:38:50.324
<v Speaker 0>like product description

01:38:50.325 --> 01:38:53.605
<v Speaker 0>for the Nebulus Smart Speaker 3,000.

01:38:54.485 --> 01:38:55.364
<v Speaker 0>The thing

01:38:55.765 --> 01:38:58.804
<v Speaker 0>that I like about DeepSig is

01:38:59.365 --> 01:39:03.090
<v Speaker 0>how they expose the reasoning. You know, deepsake,

01:39:03.090 --> 01:39:05.489
<v Speaker 0>you know, there's a lot of discussions about

01:39:05.489 --> 01:39:07.729
<v Speaker 0>it. I don't wanna go down that road.

01:39:07.889 --> 01:39:08.929
<v Speaker 0>It's more like

01:39:09.489 --> 01:39:12.209
<v Speaker 0>it makes me it makes it so

01:39:12.530 --> 01:39:15.650
<v Speaker 0>easy to understand how the AI comes to

01:39:15.650 --> 01:39:16.130
<v Speaker 0>this

01:39:17.015 --> 01:39:19.975
<v Speaker 0>product description. Right? I'm a 42 year old

01:39:19.975 --> 01:39:21.895
<v Speaker 0>German guy who recently bought an iPhone Pro

01:39:21.895 --> 01:39:23.175
<v Speaker 0>and some hiking shoes.

01:39:23.415 --> 01:39:26.775
<v Speaker 0>So he's into tech, but also active outdoors.

01:39:26.775 --> 01:39:29.495
<v Speaker 0>Right? So and and, you know, reading through

01:39:29.495 --> 01:39:32.870
<v Speaker 0>that reasoning gives me also hints on how

01:39:32.870 --> 01:39:36.070
<v Speaker 0>I could improve my product engineering or how

01:39:36.070 --> 01:39:38.469
<v Speaker 0>I could tailor it even more into

01:39:38.710 --> 01:39:41.110
<v Speaker 0>a certain or particular direction.

01:39:42.310 --> 01:39:43.430
<v Speaker 0>But I

01:39:43.775 --> 01:39:47.535
<v Speaker 0>don't wanna go down that deep into AI.

01:39:47.535 --> 01:39:48.815
<v Speaker 0>I think the

01:39:49.375 --> 01:39:50.094
<v Speaker 0>super

01:39:50.335 --> 01:39:51.135
<v Speaker 0>interesting

01:39:51.135 --> 01:39:54.495
<v Speaker 0>thing why I've chosen this example is

01:39:54.655 --> 01:39:55.055
<v Speaker 0>a,

01:39:56.690 --> 01:39:59.650
<v Speaker 0>SpinApps are configurable from the outside.

01:39:59.730 --> 01:40:02.610
<v Speaker 0>B, if you don't mess up the syntax

01:40:02.610 --> 01:40:04.770
<v Speaker 0>of the router, like I did,

01:40:06.530 --> 01:40:07.330
<v Speaker 0>you can

01:40:08.130 --> 01:40:11.250
<v Speaker 0>with these create like Rust

01:40:11.465 --> 01:40:12.824
<v Speaker 0>TRUD APIs

01:40:13.385 --> 01:40:17.064
<v Speaker 0>and you can bring in like what's ever,

01:40:17.385 --> 01:40:20.184
<v Speaker 0>you know, out there in the ecosystem

01:40:20.664 --> 01:40:21.385
<v Speaker 0>and

01:40:21.545 --> 01:40:24.024
<v Speaker 0>use it. So in case of JavaScript,

01:40:24.025 --> 01:40:25.869
<v Speaker 0>I right now choose

01:40:26.110 --> 01:40:29.630
<v Speaker 0>langchain the core framework and langchain the OLAMA

01:40:29.630 --> 01:40:30.589
<v Speaker 0>LLM

01:40:30.829 --> 01:40:31.630
<v Speaker 0>configuration

01:40:31.630 --> 01:40:32.590
<v Speaker 0>classes

01:40:32.590 --> 01:40:34.589
<v Speaker 0>and functions they expose.

01:40:36.030 --> 01:40:38.590
<v Speaker 0>They wanna have a abort controller that's not

01:40:38.590 --> 01:40:41.985
<v Speaker 0>in the Starling run monkey runtime. So I

01:40:41.985 --> 01:40:44.305
<v Speaker 0>looked what's the most popular

01:40:44.305 --> 01:40:47.265
<v Speaker 0>polyfill for the airport controller in fetch

01:40:48.385 --> 01:40:51.985
<v Speaker 0>and added that. Right. And my app does

01:40:51.985 --> 01:40:55.505
<v Speaker 0>not look different from any other TypeScript app.

01:40:56.900 --> 01:40:57.940
<v Speaker 0>Right? Besides,

01:40:58.180 --> 01:40:59.700
<v Speaker 0>I mean, this one is not using the

01:40:59.700 --> 01:41:02.500
<v Speaker 0>Spin SDK. So it's one to one looking

01:41:02.500 --> 01:41:05.860
<v Speaker 0>like a regular TypeScript application. I can roll

01:41:05.860 --> 01:41:09.380
<v Speaker 0>my own TypeScript files, modules, bring them in

01:41:09.380 --> 01:41:11.540
<v Speaker 0>and use them as they are

01:41:12.155 --> 01:41:13.755
<v Speaker 0>and have configuration

01:41:13.755 --> 01:41:16.875
<v Speaker 0>values to make my app work in different

01:41:16.875 --> 01:41:20.075
<v Speaker 0>environments without having to change the code.

01:41:21.915 --> 01:41:22.635
<v Speaker 0>Yeah,

01:41:22.715 --> 01:41:26.070
<v Speaker 0>so that's basically the third example. And looking

01:41:26.070 --> 01:41:28.710
<v Speaker 0>at that, I'm still super angry.

01:41:30.550 --> 01:41:32.070
<v Speaker 0>And I don't see it. I don't see

01:41:32.070 --> 01:41:32.550
<v Speaker 0>it.

01:41:35.030 --> 01:41:36.790
<v Speaker 1>Let's don't worry about it. It's it's too

01:41:36.790 --> 01:41:38.390
<v Speaker 1>late for you. I don't want

01:41:40.324 --> 01:41:41.124
<v Speaker 1>Yeah. It is.

01:41:42.245 --> 01:41:43.525
<v Speaker 1>Be back over here.

01:41:43.925 --> 01:41:46.005
<v Speaker 1>So I'm gonna just recap that before we

01:41:46.005 --> 01:41:46.804
<v Speaker 1>finish up.

01:41:47.125 --> 01:41:48.885
<v Speaker 1>If anyone in the audience does have any

01:41:48.885 --> 01:41:50.485
<v Speaker 1>questions, you've got about one minute to drop

01:41:50.485 --> 01:41:51.605
<v Speaker 1>them in there, we'll do our best to

01:41:51.605 --> 01:41:53.685
<v Speaker 1>answer them before we we'll outsource and go

01:41:53.685 --> 01:41:56.760
<v Speaker 1>get these dinner. So Spend is an open

01:41:56.760 --> 01:41:59.400
<v Speaker 1>source project. It is now a CNCF sandbox

01:41:59.400 --> 01:42:00.199
<v Speaker 1>project.

01:42:00.280 --> 01:42:03.400
<v Speaker 1>It is a WebAssembly server side WebAssembly framework

01:42:03.400 --> 01:42:04.999
<v Speaker 1>that allows you to write applications

01:42:05.239 --> 01:42:07.719
<v Speaker 1>and HTTP endpoints and a whole bunch of

01:42:07.719 --> 01:42:08.199
<v Speaker 1>other stuff.

01:42:09.105 --> 01:42:11.744
<v Speaker 1>It focuses on a strong developer experience. As

01:42:11.744 --> 01:42:13.824
<v Speaker 1>we've seen, we could do spend new to

01:42:13.824 --> 01:42:16.304
<v Speaker 1>get an empty project, which give us, an

01:42:16.304 --> 01:42:18.545
<v Speaker 1>environment where we can add as many polyglot

01:42:18.545 --> 01:42:20.784
<v Speaker 1>components as we want. We can add Rust.

01:42:20.784 --> 01:42:22.304
<v Speaker 1>We can add Go. We could add Python,

01:42:22.304 --> 01:42:24.465
<v Speaker 1>and we've already seen that we can add

01:42:23.960 --> 01:42:24.840
<v Speaker 1>TypeScript.

01:42:25.080 --> 01:42:27.560
<v Speaker 1>These can be path based routing based on

01:42:27.560 --> 01:42:30.120
<v Speaker 1>HTTP with the ability to pull in any

01:42:30.120 --> 01:42:33.400
<v Speaker 1>of the packages from the language runtime. We

01:42:33.400 --> 01:42:33.959
<v Speaker 1>saw

01:42:34.679 --> 01:42:37.000
<v Speaker 1>Thorsten pulling in lang chain, a very popular

01:42:37.000 --> 01:42:38.360
<v Speaker 1>package

01:42:38.025 --> 01:42:41.385
<v Speaker 1>right now within the NPM node, etcetera worlds.

01:42:42.985 --> 01:42:46.185
<v Speaker 1>We've seen OpenTelemetry integration. We've seen OCI push

01:42:46.185 --> 01:42:46.985
<v Speaker 1>and pull.

01:42:47.304 --> 01:42:49.304
<v Speaker 1>And we've seen even the ability to use

01:42:49.304 --> 01:42:52.265
<v Speaker 1>CRDs and deploy WebAssembly applications on top of

01:42:52.265 --> 01:42:52.824
<v Speaker 1>Kubernetes.

01:42:53.140 --> 01:42:55.540
<v Speaker 1>And all of that in one hour and

01:42:55.540 --> 01:42:58.340
<v Speaker 1>forty two minutes. Bravo, Sorsen. That was a

01:42:58.340 --> 01:42:59.540
<v Speaker 1>a fantastic,

01:42:59.540 --> 01:43:00.579
<v Speaker 1>fantastic demo.

01:43:01.700 --> 01:43:05.220
<v Speaker 0>Yeah. Thanks once again for having me. Sorry

01:43:05.220 --> 01:43:07.380
<v Speaker 0>again for me messing up the second,

01:43:07.620 --> 01:43:09.875
<v Speaker 0>demo, but still I think

01:43:10.915 --> 01:43:13.315
<v Speaker 0>I think it's super ex we are in

01:43:13.315 --> 01:43:16.115
<v Speaker 0>a super exciting time, especially to, you know,

01:43:16.115 --> 01:43:17.795
<v Speaker 0>with all the movements in

01:43:18.115 --> 01:43:19.795
<v Speaker 0>the spin ecosystems,

01:43:19.795 --> 01:43:22.835
<v Speaker 0>been going to CNCF and WebAssembly

01:43:22.835 --> 01:43:26.500
<v Speaker 0>as a general tech evolving that that

01:43:26.580 --> 01:43:28.340
<v Speaker 0>quickly. Super exciting.

01:43:28.580 --> 01:43:31.940
<v Speaker 0>So thanks again for hosting this, David. And

01:43:32.739 --> 01:43:33.380
<v Speaker 0>yep.

01:43:33.780 --> 01:43:36.180
<v Speaker 1>Awesome. And thank you for, again, doing back

01:43:36.180 --> 01:43:37.540
<v Speaker 1>to back streams, taking time out of your

01:43:37.540 --> 01:43:39.664
<v Speaker 1>day, and, we hope that people that watch

01:43:39.664 --> 01:43:41.505
<v Speaker 1>this enjoy it. Please remember to give us

01:43:41.505 --> 01:43:43.264
<v Speaker 1>a thumbs up. There will be links in

01:43:43.264 --> 01:43:45.905
<v Speaker 1>the description afterwards to the examples repository, the

01:43:45.905 --> 01:43:48.784
<v Speaker 1>spin repository, and Thorsten's socials.

01:43:49.344 --> 01:43:49.905
<v Speaker 1>So

01:43:50.224 --> 01:43:52.520
<v Speaker 1>I think that's us for the day. And

01:43:52.520 --> 01:43:54.680
<v Speaker 1>thank you, Indigo. I appreciate the presentation and

01:43:54.680 --> 01:43:56.520
<v Speaker 1>the perseverance. I love a bit of live

01:43:56.520 --> 01:43:58.280
<v Speaker 1>debugging, and I hope that wasn't too stressful

01:43:58.280 --> 01:43:59.239
<v Speaker 1>for Thorsten.

01:44:00.600 --> 01:44:01.639
<v Speaker 1>So, yeah,

01:44:01.960 --> 01:44:03.239
<v Speaker 1>I'm gonna let you go. I'm not gonna

01:44:03.239 --> 01:44:04.920
<v Speaker 1>say anything else. I'm just gonna say thank

01:44:04.920 --> 01:44:06.360
<v Speaker 1>you. I hope to see you at KubeCon

01:44:06.360 --> 01:44:08.315
<v Speaker 1>in a couple of weeks. If anyone has

01:44:08.315 --> 01:44:09.995
<v Speaker 1>at KubeCon, make sure to pop by the

01:44:09.995 --> 01:44:12.315
<v Speaker 1>Project Pavilion where I assume Spend may or

01:44:12.315 --> 01:44:13.594
<v Speaker 1>may not have a booth, but I assume

01:44:13.594 --> 01:44:14.475
<v Speaker 1>will

01:44:14.475 --> 01:44:17.275
<v Speaker 1>either way. So let's go say hello.

01:44:17.915 --> 01:44:18.635
<v Speaker 0>Yeah. Definitely.

01:44:20.190 --> 01:44:21.950
<v Speaker 1>Alright. Well, have a great day. Have a

01:44:21.950 --> 01:44:23.230
<v Speaker 1>good evening. Have a good week. I'll see

01:44:23.230 --> 01:44:25.150
<v Speaker 1>you all next time. Thank you so much.

01:44:25.150 --> 01:44:26.350
<v Speaker 0>Thank you. Bye bye.
