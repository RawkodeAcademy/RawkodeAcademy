WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 6fcac28c-bd57-4dad-a630-a738eece6caf
Created: 2025-04-29T21:02:12.178Z
Duration: 6650.039
Channels: 1

00:00:55.920 --> 00:00:59.199
<v Speaker 0>Hello. And welcome to today's episode of Rawkode

00:00:59.199 --> 00:01:01.600
<v Speaker 0>live. I'm your host, Rawkode.

00:01:01.760 --> 00:01:03.519
<v Speaker 0>Before we get started, I just wanna say

00:01:03.519 --> 00:01:05.840
<v Speaker 0>thank you to my employer, Equinix Medal. They

00:01:05.840 --> 00:01:07.680
<v Speaker 0>provide the time and the resources for me

00:01:07.680 --> 00:01:09.440
<v Speaker 0>to invest and purchase in the show and

00:01:09.440 --> 00:01:11.195
<v Speaker 0>making sure we all have great cloud native

00:01:11.195 --> 00:01:12.875
<v Speaker 0>content to learn together.

00:01:13.355 --> 00:01:15.275
<v Speaker 0>If you wanna check out Equinix metal, there

00:01:15.275 --> 00:01:17.595
<v Speaker 0>is a code, Rawkode dash live, you can

00:01:17.595 --> 00:01:19.595
<v Speaker 0>use at metal.equinix.com.

00:01:19.595 --> 00:01:21.115
<v Speaker 0>Check it out. Have some fun.

00:01:21.595 --> 00:01:23.755
<v Speaker 0>Today, we're gonna take a look at the

00:01:23.755 --> 00:01:25.035
<v Speaker 0>captain project.

00:01:25.035 --> 00:01:28.670
<v Speaker 0>I have a great guest, Jurgen Esslsdorfer,

00:01:28.750 --> 00:01:31.070
<v Speaker 0>who is an engineer at Dynatrace and a

00:01:31.070 --> 00:01:33.790
<v Speaker 0>maintainer of the kptn project. Hello, Jurgen. How

00:01:33.790 --> 00:01:34.430
<v Speaker 0>are you?

00:01:35.070 --> 00:01:37.950
<v Speaker 1>Hi, David. Hi, everyone. Thanks. I'm good. How

00:01:37.950 --> 00:01:39.994
<v Speaker 1>are you? Yeah. Yeah. I'm very well. Thank

00:01:39.994 --> 00:01:41.994
<v Speaker 0>you. I'm looking forward to today's session and

00:01:41.994 --> 00:01:43.835
<v Speaker 0>and learning how I can use this really

00:01:43.835 --> 00:01:46.475
<v Speaker 0>cool project in my Kubernetes delivery pipeline.

00:01:47.435 --> 00:01:49.595
<v Speaker 0>I think the best way to get started

00:01:49.595 --> 00:01:51.674
<v Speaker 0>was why don't you take just thirty seconds

00:01:51.674 --> 00:01:53.195
<v Speaker 0>or a minute or, like, you know, take

00:01:53.195 --> 00:01:54.430
<v Speaker 0>as long as you want. But tell us

00:01:54.430 --> 00:01:56.510
<v Speaker 0>a little bit about you, about the project,

00:01:56.510 --> 00:01:58.030
<v Speaker 0>and then we'll we'll move on from there.

00:01:58.510 --> 00:01:59.549
<v Speaker 1>Okay. Cool.

00:02:00.190 --> 00:02:02.909
<v Speaker 1>Yeah. So my name is. I work for

00:02:02.909 --> 00:02:05.630
<v Speaker 1>a company called Dynatrace, and we started

00:02:06.030 --> 00:02:07.950
<v Speaker 1>or my role at Dynatrace, maybe I start

00:02:07.950 --> 00:02:09.324
<v Speaker 1>from there, is,

00:02:09.645 --> 00:02:11.645
<v Speaker 1>officially a technology strategist.

00:02:11.805 --> 00:02:14.445
<v Speaker 1>I joined the company about three years ago,

00:02:15.005 --> 00:02:16.205
<v Speaker 1>and I have been,

00:02:16.685 --> 00:02:19.085
<v Speaker 1>member of the Dynatrace Innovation Lab,

00:02:19.725 --> 00:02:22.670
<v Speaker 1>since then. And, yeah, a couple of years,

00:02:22.670 --> 00:02:24.269
<v Speaker 1>it maybe it was around two years ago,

00:02:24.269 --> 00:02:27.310
<v Speaker 1>we started this project. It was not called

00:02:27.310 --> 00:02:30.030
<v Speaker 1>kptn by then, but we found that we

00:02:30.030 --> 00:02:32.030
<v Speaker 1>have a lot of best practices that we

00:02:32.030 --> 00:02:32.829
<v Speaker 1>are using

00:02:33.605 --> 00:02:35.605
<v Speaker 1>when it comes to cloud native technologies, when

00:02:35.605 --> 00:02:37.125
<v Speaker 1>it comes to delivery, when it comes to

00:02:37.125 --> 00:02:38.405
<v Speaker 1>quality of software

00:02:38.885 --> 00:02:40.965
<v Speaker 1>that we are already using, and we try

00:02:40.965 --> 00:02:42.885
<v Speaker 1>to basically provide

00:02:42.885 --> 00:02:43.765
<v Speaker 1>everything

00:02:43.925 --> 00:02:45.045
<v Speaker 1>also to

00:02:45.285 --> 00:02:47.605
<v Speaker 1>to other organizations and also to our customers.

00:02:48.040 --> 00:02:50.760
<v Speaker 1>And this was the basic idea. Let's

00:02:50.760 --> 00:02:53.320
<v Speaker 1>start an open source project, and let's make

00:02:53.320 --> 00:02:55.640
<v Speaker 1>everything that we already know. Let's make it

00:02:55.640 --> 00:02:56.280
<v Speaker 1>available

00:02:56.440 --> 00:02:58.520
<v Speaker 1>for others, and let's make this

00:02:59.160 --> 00:02:59.720
<v Speaker 1>yeah.

00:03:00.600 --> 00:03:03.240
<v Speaker 1>Let let's make this a platform that everyone

00:03:03.240 --> 00:03:03.720
<v Speaker 1>can use.

00:03:04.575 --> 00:03:06.015
<v Speaker 1>And with this

00:03:06.815 --> 00:03:09.215
<v Speaker 1>project or with this idea, the kptn project

00:03:09.215 --> 00:03:10.095
<v Speaker 1>was born.

00:03:10.735 --> 00:03:12.894
<v Speaker 1>And it's now a CNCF

00:03:12.894 --> 00:03:16.415
<v Speaker 1>sandbox project, and we are pretty pretty excited

00:03:16.870 --> 00:03:19.110
<v Speaker 1>to have it. And I'm also pretty excited

00:03:19.110 --> 00:03:21.270
<v Speaker 1>to to show it or to take a

00:03:21.270 --> 00:03:24.070
<v Speaker 1>look at it today with you. Awesome. Nice.

00:03:24.550 --> 00:03:26.070
<v Speaker 0>So I believe you've got a a few

00:03:26.070 --> 00:03:27.910
<v Speaker 0>slides you wanna run us through first to

00:03:27.910 --> 00:03:29.270
<v Speaker 0>give us a little bit of a flavor,

00:03:29.270 --> 00:03:30.790
<v Speaker 0>and then we're gonna get hands on it

00:03:30.790 --> 00:03:33.175
<v Speaker 0>and kick the tires on this. So let's

00:03:34.055 --> 00:03:35.815
<v Speaker 0>pop that up. There we go.

00:03:36.534 --> 00:03:37.255
<v Speaker 1>Cool.

00:03:38.935 --> 00:03:41.495
<v Speaker 1>Okay. So let me just introduce

00:03:41.495 --> 00:03:42.295
<v Speaker 1>briefly

00:03:42.375 --> 00:03:45.015
<v Speaker 1>the kptn project, which use cases it solves

00:03:45.015 --> 00:03:47.894
<v Speaker 1>or, like, targets and which problem it solves.

00:03:49.610 --> 00:03:51.450
<v Speaker 1>If you want to take a look, there

00:03:51.530 --> 00:03:54.250
<v Speaker 1>it's captain. S h. We in Austria or

00:03:54.250 --> 00:03:56.410
<v Speaker 1>in German speaking countries, we say captain, like

00:03:56.410 --> 00:03:57.850
<v Speaker 1>the captain of a ship that was the

00:03:57.850 --> 00:03:58.490
<v Speaker 1>main

00:03:58.730 --> 00:04:02.010
<v Speaker 1>idea behind it, the the captain ship's applications.

00:04:03.485 --> 00:04:05.805
<v Speaker 1>So we will hear a couple of these

00:04:05.805 --> 00:04:09.485
<v Speaker 1>nautical terms like ship and the shipyard and

00:04:09.645 --> 00:04:11.485
<v Speaker 1>yeah. We will we will hear it anyway

00:04:11.645 --> 00:04:12.925
<v Speaker 1>in the rest of the show.

00:04:13.565 --> 00:04:16.365
<v Speaker 1>And, yeah, we also have Twitter. Yeah. So

00:04:17.660 --> 00:04:19.180
<v Speaker 1>what what is it actually,

00:04:19.820 --> 00:04:21.740
<v Speaker 1>and what what what does it do?

00:04:22.460 --> 00:04:24.220
<v Speaker 1>So we came up with this

00:04:24.860 --> 00:04:26.140
<v Speaker 1>figure here.

00:04:27.740 --> 00:04:30.460
<v Speaker 1>We we

00:04:29.514 --> 00:04:32.074
<v Speaker 1>actually target a couple of different use cases

00:04:32.074 --> 00:04:35.194
<v Speaker 1>from progressive delivery to quality gates as one

00:04:35.194 --> 00:04:37.755
<v Speaker 1>part of progressive delivery that you can use

00:04:37.755 --> 00:04:40.155
<v Speaker 1>maybe in other delivery frameworks that you might

00:04:40.155 --> 00:04:42.155
<v Speaker 1>already have in your organizations and you where

00:04:42.155 --> 00:04:44.610
<v Speaker 1>you don't want to use maybe kpten to

00:04:44.610 --> 00:04:47.410
<v Speaker 1>auto remediation when it comes to operating your

00:04:47.970 --> 00:04:49.570
<v Speaker 1>microservice applications.

00:04:50.530 --> 00:04:51.330
<v Speaker 1>These are

00:04:51.810 --> 00:04:54.050
<v Speaker 1>these fans are use cases.

00:04:54.370 --> 00:04:57.009
<v Speaker 1>And everything is built on a GitOps approach

00:04:57.009 --> 00:04:59.410
<v Speaker 1>where you just bring your configuration files, and

00:04:59.410 --> 00:05:01.625
<v Speaker 1>kpten will manage these configuration files

00:05:01.945 --> 00:05:05.225
<v Speaker 1>and will also connect to your tools. So

00:05:05.945 --> 00:05:08.185
<v Speaker 1>David already mentioned it's a control plane, a

00:05:08.185 --> 00:05:11.225
<v Speaker 1>cloud native control plane for continuous delivery and

00:05:11.225 --> 00:05:12.265
<v Speaker 1>automated operations,

00:05:13.080 --> 00:05:15.560
<v Speaker 1>and it's basically solving the problem of application

00:05:15.560 --> 00:05:17.960
<v Speaker 1>life cycle orchestration management.

00:05:18.520 --> 00:05:20.600
<v Speaker 1>So if you have health charts and if

00:05:20.600 --> 00:05:22.200
<v Speaker 1>you use helm for deployment, you can do

00:05:22.200 --> 00:05:24.120
<v Speaker 1>this with kpten as well. So kpten can

00:05:24.120 --> 00:05:25.960
<v Speaker 1>use your health charts and deploy

00:05:26.185 --> 00:05:26.825
<v Speaker 1>your

00:05:27.384 --> 00:05:29.625
<v Speaker 1>microservices for you. You can also connect it

00:05:29.625 --> 00:05:30.745
<v Speaker 1>to Argo.

00:05:30.824 --> 00:05:33.065
<v Speaker 1>You can connect it to Jenkins. We have

00:05:33.065 --> 00:05:34.345
<v Speaker 1>other integrations for

00:05:34.745 --> 00:05:38.345
<v Speaker 1>monitoring tools like Prometheus where you can use

00:05:38.345 --> 00:05:40.185
<v Speaker 1>this data for your quality checks.

00:05:40.710 --> 00:05:43.510
<v Speaker 1>You can connect it to JMeter for

00:05:43.510 --> 00:05:46.230
<v Speaker 1>load generation and performance testing. You can connect

00:05:46.230 --> 00:05:48.630
<v Speaker 1>it to Litmus KAOS for chaos engineering. So

00:05:48.630 --> 00:05:49.750
<v Speaker 1>you can connect it to a lot of

00:05:49.750 --> 00:05:50.550
<v Speaker 1>different tools.

00:05:51.270 --> 00:05:52.870
<v Speaker 1>Everything is event based.

00:05:53.270 --> 00:05:54.790
<v Speaker 1>And with this, we are very open to

00:05:54.790 --> 00:05:57.535
<v Speaker 1>to to broaden this ecosystem and to, open

00:05:57.535 --> 00:05:59.055
<v Speaker 1>up for tool integrations.

00:05:59.855 --> 00:06:00.415
<v Speaker 1>And

00:06:01.294 --> 00:06:05.215
<v Speaker 1>kpten really brings together the different tools

00:06:05.215 --> 00:06:07.455
<v Speaker 1>that you already have in your tool belt,

00:06:07.455 --> 00:06:08.175
<v Speaker 1>let's say,

00:06:08.655 --> 00:06:10.335
<v Speaker 1>and manages

00:06:10.639 --> 00:06:11.440
<v Speaker 1>continuous

00:06:11.440 --> 00:06:15.280
<v Speaker 1>or progressive delivery and automated operations for you.

00:06:15.840 --> 00:06:19.120
<v Speaker 1>So how is why did we actually start?

00:06:19.120 --> 00:06:21.680
<v Speaker 1>I said this in the beginning briefly

00:06:21.840 --> 00:06:23.835
<v Speaker 1>because we saw that a lot of different

00:06:23.835 --> 00:06:26.155
<v Speaker 1>organizations that we are working with, that we

00:06:26.155 --> 00:06:27.035
<v Speaker 1>have heard from,

00:06:27.275 --> 00:06:29.755
<v Speaker 1>they are doing a lot of manual

00:06:31.195 --> 00:06:32.555
<v Speaker 1>manual tasks

00:06:32.555 --> 00:06:33.915
<v Speaker 1>when it comes to

00:06:34.475 --> 00:06:37.115
<v Speaker 1>delivery of applications and new releases.

00:06:38.010 --> 00:06:41.050
<v Speaker 1>And these manual tasks are either in evaluating

00:06:41.210 --> 00:06:44.570
<v Speaker 1>test performances, evaluating if the new build is

00:06:44.570 --> 00:06:46.169
<v Speaker 1>actually better or if the new release is

00:06:46.169 --> 00:06:48.010
<v Speaker 1>actually better than the last one,

00:06:48.970 --> 00:06:51.290
<v Speaker 1>and also writing a lot of those pipelines.

00:06:51.290 --> 00:06:53.985
<v Speaker 1>And these pipelines, they have grown pretty large.

00:06:54.385 --> 00:06:55.825
<v Speaker 1>And, this is one

00:06:56.145 --> 00:06:58.625
<v Speaker 1>one, issue that we are also solving with

00:06:58.625 --> 00:06:59.425
<v Speaker 1>kpten.

00:06:59.425 --> 00:07:02.225
<v Speaker 1>There is no pipeline code anymore. Everything is

00:07:02.225 --> 00:07:04.465
<v Speaker 1>event based, and you just connect your different

00:07:04.465 --> 00:07:05.745
<v Speaker 1>tools, and you have very, very

00:07:06.510 --> 00:07:07.790
<v Speaker 1>small configuration

00:07:07.790 --> 00:07:10.830
<v Speaker 1>files that are for a very specific purpose.

00:07:10.830 --> 00:07:12.990
<v Speaker 1>And with this, it's very easy to change

00:07:12.990 --> 00:07:14.590
<v Speaker 1>them, update them, maintain them.

00:07:15.550 --> 00:07:17.630
<v Speaker 1>And one part is also a lot of

00:07:17.630 --> 00:07:19.150
<v Speaker 1>organizations, they spend a lot of time in

00:07:19.150 --> 00:07:22.155
<v Speaker 1>remediating the issues. They might already have some

00:07:22.155 --> 00:07:24.235
<v Speaker 1>playbooks in in place,

00:07:24.315 --> 00:07:24.955
<v Speaker 1>like,

00:07:25.354 --> 00:07:28.395
<v Speaker 1>say, Ansible playbooks or some it can be

00:07:28.395 --> 00:07:31.034
<v Speaker 1>shell scripts that just remediate an issue, but,

00:07:31.034 --> 00:07:32.955
<v Speaker 1>anyway, they have to be executed.

00:07:33.115 --> 00:07:34.715
<v Speaker 1>And here, we also bridge this gap

00:07:35.310 --> 00:07:38.270
<v Speaker 1>by from, let's say, Prometheus alert, we can

00:07:38.270 --> 00:07:39.070
<v Speaker 1>trigger

00:07:39.629 --> 00:07:41.229
<v Speaker 1>Ansible playbook or

00:07:41.710 --> 00:07:44.270
<v Speaker 1>or execute shell scripts or Python scripts

00:07:44.509 --> 00:07:47.469
<v Speaker 1>that already remediate or try to remediate issues.

00:07:47.469 --> 00:07:48.430
<v Speaker 1>So we are

00:07:48.909 --> 00:07:50.030
<v Speaker 1>with this event based

00:07:51.795 --> 00:07:52.755
<v Speaker 1>methodology,

00:07:52.755 --> 00:07:54.835
<v Speaker 1>let's say, we we can

00:07:55.315 --> 00:07:57.075
<v Speaker 1>we we can bridge these gaps.

00:07:57.635 --> 00:07:58.995
<v Speaker 1>So the first use case

00:07:59.315 --> 00:08:00.115
<v Speaker 1>yeah.

00:08:00.195 --> 00:08:00.915
<v Speaker 1>Thanks.

00:08:02.035 --> 00:08:04.755
<v Speaker 1>The first use case where I think kpten

00:08:04.755 --> 00:08:06.770
<v Speaker 1>already brings some value

00:08:06.930 --> 00:08:08.370
<v Speaker 1>is when you

00:08:09.330 --> 00:08:10.930
<v Speaker 1>start to manage

00:08:11.170 --> 00:08:13.170
<v Speaker 1>your applications with kptn.

00:08:13.730 --> 00:08:17.490
<v Speaker 1>Because kptn can already configure your monitoring, let's

00:08:17.490 --> 00:08:19.490
<v Speaker 1>say your Prometheus create the scrape jobs, create

00:08:19.490 --> 00:08:20.290
<v Speaker 1>alerting rules

00:08:21.195 --> 00:08:22.635
<v Speaker 1>in the alert manager,

00:08:23.035 --> 00:08:24.875
<v Speaker 1>create dashboards in Grafana.

00:08:25.995 --> 00:08:28.235
<v Speaker 1>We have not even yet deployed the application,

00:08:28.235 --> 00:08:30.715
<v Speaker 1>but we when we onboard the application, that's

00:08:30.715 --> 00:08:32.554
<v Speaker 1>also how we call it. It's a kpten

00:08:32.554 --> 00:08:33.515
<v Speaker 1>onboarding. It's

00:08:34.419 --> 00:08:36.100
<v Speaker 1>we have a lot of these these terms.

00:08:36.100 --> 00:08:37.860
<v Speaker 1>But when you onboard an application and you

00:08:37.860 --> 00:08:39.860
<v Speaker 1>were using Captain CLI,

00:08:40.019 --> 00:08:41.940
<v Speaker 1>that you can already use it to configure

00:08:41.940 --> 00:08:43.539
<v Speaker 1>your monitoring solutions,

00:08:44.339 --> 00:08:46.579
<v Speaker 1>set up alerts, create dashboards,

00:08:46.980 --> 00:08:48.740
<v Speaker 1>set up scrape jobs, these kind of things.

00:08:50.475 --> 00:08:52.555
<v Speaker 1>And as said, we have not even yet

00:08:52.555 --> 00:08:55.115
<v Speaker 1>started to to deploy the applications.

00:08:56.154 --> 00:08:58.154
<v Speaker 1>Yeah. I I think we'll see this later

00:08:58.154 --> 00:08:59.755
<v Speaker 1>on, so I'll just skip this one.

00:09:00.394 --> 00:09:02.680
<v Speaker 1>And the second part where it's really we

00:09:02.680 --> 00:09:03.560
<v Speaker 1>are bringing

00:09:03.720 --> 00:09:06.760
<v Speaker 1>we are bringing really a big benefit is

00:09:07.320 --> 00:09:12.519
<v Speaker 1>we have based our delivery pipelines on SRE

00:09:12.519 --> 00:09:13.320
<v Speaker 1>concepts,

00:09:13.560 --> 00:09:14.920
<v Speaker 1>SLIs and SLOs.

00:09:15.625 --> 00:09:18.584
<v Speaker 1>SLOs are short for a service level objective,

00:09:18.584 --> 00:09:19.305
<v Speaker 1>and you

00:09:19.785 --> 00:09:21.704
<v Speaker 1>or the the user of kpt and just

00:09:21.704 --> 00:09:23.705
<v Speaker 1>defines a service level objective

00:09:24.024 --> 00:09:26.345
<v Speaker 1>that can be based on response time, can

00:09:26.345 --> 00:09:27.545
<v Speaker 1>be based on the error rate,

00:09:28.180 --> 00:09:30.020
<v Speaker 1>CPU consumption, whatever.

00:09:30.500 --> 00:09:31.780
<v Speaker 1>Everything that's

00:09:31.940 --> 00:09:34.580
<v Speaker 1>queryable or that's a metric, let's say, and

00:09:34.580 --> 00:09:36.420
<v Speaker 1>you can query this from, for example, from

00:09:36.420 --> 00:09:37.300
<v Speaker 1>Prometheus,

00:09:37.460 --> 00:09:40.020
<v Speaker 1>you can define some service level objectives,

00:09:40.260 --> 00:09:43.274
<v Speaker 1>and kpten will will set up a multistage

00:09:43.274 --> 00:09:46.634
<v Speaker 1>delivery pipeline for you. And between each stage,

00:09:46.714 --> 00:09:49.514
<v Speaker 1>kptn makes sure that it evaluates

00:09:49.514 --> 00:09:51.355
<v Speaker 1>the quality of your microservice

00:09:51.355 --> 00:09:53.435
<v Speaker 1>based on the service level objective that you

00:09:53.435 --> 00:09:53.915
<v Speaker 1>have defined.

00:09:54.420 --> 00:09:56.339
<v Speaker 1>And you just define it in a YAML

00:09:56.339 --> 00:09:58.100
<v Speaker 1>file and the deployment

00:09:58.740 --> 00:10:00.660
<v Speaker 1>and the the triggering of the tests and

00:10:00.660 --> 00:10:01.620
<v Speaker 1>then the evaluation,

00:10:01.779 --> 00:10:03.940
<v Speaker 1>this is taken care of by kptn.

00:10:06.020 --> 00:10:07.779
<v Speaker 1>So for example, here, we have the shipyard

00:10:07.779 --> 00:10:09.845
<v Speaker 1>file, the SLO file, the Helm chart for

00:10:09.845 --> 00:10:10.645
<v Speaker 1>deployment,

00:10:11.125 --> 00:10:12.325
<v Speaker 1>and we can see that

00:10:12.805 --> 00:10:14.885
<v Speaker 1>the shipyard file actually, that's the it's the

00:10:14.885 --> 00:10:17.285
<v Speaker 1>complete shipyard file for a multistage pipeline. We

00:10:17.285 --> 00:10:18.725
<v Speaker 1>have dev staging production

00:10:19.125 --> 00:10:21.445
<v Speaker 1>with the quality gate. That's basically the whole

00:10:21.445 --> 00:10:23.045
<v Speaker 1>quality gates. It's the SLO file,

00:10:23.840 --> 00:10:26.080
<v Speaker 1>and you will get this automated quality gate

00:10:26.080 --> 00:10:29.200
<v Speaker 1>evaluations for each deployment that you're

00:10:29.520 --> 00:10:31.040
<v Speaker 1>triggering with kptn.

00:10:31.200 --> 00:10:34.000
<v Speaker 1>And the data is then gathered in this

00:10:34.000 --> 00:10:36.480
<v Speaker 1>example for from Prometheus,

00:10:36.885 --> 00:10:39.365
<v Speaker 1>and the tests have been executed by JMeter,

00:10:39.365 --> 00:10:40.005
<v Speaker 1>for example.

00:10:41.285 --> 00:10:42.645
<v Speaker 1>And in the

00:10:43.445 --> 00:10:44.805
<v Speaker 1>yeah. This is how it works in a

00:10:44.805 --> 00:10:46.645
<v Speaker 1>little bit more detail. We have these SLO

00:10:46.645 --> 00:10:48.965
<v Speaker 1>files and SLI files. These are you can

00:10:48.965 --> 00:10:51.525
<v Speaker 1>think of this as a library of indicators

00:10:51.525 --> 00:10:52.565
<v Speaker 1>and

00:10:52.329 --> 00:10:54.170
<v Speaker 1>how you can fetch this data,

00:10:54.889 --> 00:10:56.970
<v Speaker 1>with a PromQL query,

00:10:57.209 --> 00:10:59.930
<v Speaker 1>where you can, you you define your PromQL,

00:11:00.089 --> 00:11:02.490
<v Speaker 1>and, this is then executed when the captain

00:11:02.490 --> 00:11:05.445
<v Speaker 1>evaluates the quality gate. And you can just

00:11:05.445 --> 00:11:07.765
<v Speaker 1>reuse, let's say, the error rate here. We

00:11:07.765 --> 00:11:10.005
<v Speaker 1>just reuse the error rate in the objective

00:11:10.005 --> 00:11:12.084
<v Speaker 1>file, and we specify the error rate has

00:11:12.084 --> 00:11:15.285
<v Speaker 1>to stay lower or equal than 1%.

00:11:15.524 --> 00:11:16.165
<v Speaker 1>And

00:11:16.325 --> 00:11:18.805
<v Speaker 1>the time frame for the evaluation,

00:11:18.964 --> 00:11:21.990
<v Speaker 1>that's actually calculated by kptn since kptn can

00:11:21.990 --> 00:11:23.350
<v Speaker 1>also trigger the tests.

00:11:23.670 --> 00:11:25.750
<v Speaker 1>And kptn will trigger the tests, let's say,

00:11:25.830 --> 00:11:27.830
<v Speaker 1>g meter tests or neo load tests or

00:11:27.830 --> 00:11:29.510
<v Speaker 1>place meter, whatever you're using.

00:11:29.910 --> 00:11:31.830
<v Speaker 1>And, once the tests are finished, kptn will

00:11:31.830 --> 00:11:34.095
<v Speaker 1>be informed the tests are finished, and, it

00:11:34.095 --> 00:11:36.655
<v Speaker 1>can evaluate for this exact time frame of

00:11:36.655 --> 00:11:39.055
<v Speaker 1>the tests. We can evaluate the error rate,

00:11:39.055 --> 00:11:42.095
<v Speaker 1>response time, number of database calls. And from

00:11:42.095 --> 00:11:44.815
<v Speaker 1>this file, it will generate the total score.

00:11:46.130 --> 00:11:48.290
<v Speaker 1>Start the evaluation. It will generate the total

00:11:48.290 --> 00:11:48.930
<v Speaker 1>score

00:11:49.490 --> 00:11:51.490
<v Speaker 1>by by evaluating

00:11:51.890 --> 00:11:54.450
<v Speaker 1>this. And based on the total score, it

00:11:54.450 --> 00:11:56.370
<v Speaker 1>can then decide if it should be promoted

00:11:56.370 --> 00:11:58.130
<v Speaker 1>to the next stage or if it should

00:11:58.130 --> 00:11:59.890
<v Speaker 1>be rolled back, for example, to the previous

00:11:59.890 --> 00:12:01.650
<v Speaker 1>version if you have a blue green deployment.

00:12:02.824 --> 00:12:03.545
<v Speaker 0>Okay.

00:12:04.185 --> 00:12:05.945
<v Speaker 1>And for the third

00:12:06.264 --> 00:12:08.824
<v Speaker 1>major use case, of kptan,

00:12:09.384 --> 00:12:12.185
<v Speaker 1>this is where we, automate part of your

00:12:12.185 --> 00:12:12.985
<v Speaker 1>operations.

00:12:13.225 --> 00:12:15.380
<v Speaker 1>We call it by closed loop remediation. And

00:12:15.380 --> 00:12:17.700
<v Speaker 1>with closed loop remediation, what we really mean

00:12:17.700 --> 00:12:20.820
<v Speaker 1>is that we are constantly evaluating

00:12:20.980 --> 00:12:22.980
<v Speaker 1>if the remediation is actually

00:12:23.140 --> 00:12:24.420
<v Speaker 1>if it was successful.

00:12:24.740 --> 00:12:26.180
<v Speaker 1>So we've seen that,

00:12:26.660 --> 00:12:27.540
<v Speaker 1>organizations,

00:12:27.700 --> 00:12:29.605
<v Speaker 1>and also this is where where we started

00:12:29.605 --> 00:12:30.885
<v Speaker 1>also a couple of years.

00:12:31.685 --> 00:12:34.404
<v Speaker 1>Once there is problem or an alert coming

00:12:34.404 --> 00:12:36.485
<v Speaker 1>in, this can also be sent to kptn

00:12:36.485 --> 00:12:37.685
<v Speaker 1>as a cloud event.

00:12:38.324 --> 00:12:39.605
<v Speaker 1>Kptn can

00:12:39.845 --> 00:12:43.285
<v Speaker 1>execute remediation actions, trigger other tools, let's say,

00:12:43.560 --> 00:12:45.480
<v Speaker 1>toggling a feature flag or

00:12:46.600 --> 00:12:49.560
<v Speaker 1>triggering the rollback of a deployment or

00:12:50.200 --> 00:12:52.440
<v Speaker 1>executing some Ansible Tower playbooks.

00:12:52.920 --> 00:12:55.560
<v Speaker 1>So kpt kptr will trigger, let's say, an

00:12:55.560 --> 00:12:56.440
<v Speaker 1>Ansible Tower playbook.

00:12:57.105 --> 00:12:59.905
<v Speaker 1>Once it's finished, kpt will evaluate if this

00:12:59.905 --> 00:13:02.385
<v Speaker 1>action of Ansible Tower did actually resolve the

00:13:02.385 --> 00:13:05.425
<v Speaker 1>issue by reeval evaluating the quality gates,

00:13:06.225 --> 00:13:09.025
<v Speaker 1>reusing the SLO file that you already have

00:13:09.025 --> 00:13:09.745
<v Speaker 1>defined.

00:13:10.385 --> 00:13:11.585
<v Speaker 1>And if it's remediated,

00:13:11.960 --> 00:13:14.120
<v Speaker 1>job is basically done and alert,

00:13:14.440 --> 00:13:16.200
<v Speaker 1>can be, resolved

00:13:16.200 --> 00:13:18.680
<v Speaker 1>or the problem can be resolved. And if

00:13:18.680 --> 00:13:20.600
<v Speaker 1>it's not, remediated,

00:13:20.600 --> 00:13:22.520
<v Speaker 1>captain can take the next action, and it

00:13:22.520 --> 00:13:24.600
<v Speaker 1>can be a sequence of actions that can

00:13:24.600 --> 00:13:25.000
<v Speaker 1>be taken.

00:13:26.035 --> 00:13:28.835
<v Speaker 1>And all these actions, they are actually evaluated

00:13:28.835 --> 00:13:31.715
<v Speaker 1>if they if they remediate the issue or

00:13:31.715 --> 00:13:32.195
<v Speaker 1>not.

00:13:32.915 --> 00:13:34.595
<v Speaker 1>So for example, we have

00:13:35.395 --> 00:13:38.275
<v Speaker 1>we have one more demo application where we

00:13:38.275 --> 00:13:38.755
<v Speaker 1>send

00:13:39.600 --> 00:13:42.400
<v Speaker 1>an alert via the Prometheus alert manager.

00:13:42.960 --> 00:13:45.520
<v Speaker 1>And in the remediation file, we define two

00:13:45.520 --> 00:13:46.240
<v Speaker 1>different remediation

00:13:47.120 --> 00:13:48.080
<v Speaker 1>remediations

00:13:48.080 --> 00:13:50.960
<v Speaker 1>for one specific problem, and the problem in

00:13:50.960 --> 00:13:53.120
<v Speaker 1>this case is a response time degradation. That's

00:13:53.120 --> 00:13:55.084
<v Speaker 1>the name of the problem. This will map

00:13:55.084 --> 00:13:57.245
<v Speaker 1>to the alert of Prometheus.

00:13:57.644 --> 00:13:59.485
<v Speaker 1>So these these two, they basically have to

00:13:59.485 --> 00:14:01.565
<v Speaker 1>be they they will match.

00:14:01.805 --> 00:14:04.365
<v Speaker 1>And we'll then have a a number of

00:14:04.365 --> 00:14:07.260
<v Speaker 1>of actions. So in this case, two actions.

00:14:07.339 --> 00:14:09.899
<v Speaker 1>The first one will be executed. It's a

00:14:09.899 --> 00:14:10.620
<v Speaker 1>scaling.

00:14:10.700 --> 00:14:13.180
<v Speaker 1>Scaling is, is a built in functionality of

00:14:13.180 --> 00:14:14.460
<v Speaker 1>kptn, so we can,

00:14:15.899 --> 00:14:19.019
<v Speaker 1>basically change the values of the helm chart.

00:14:19.260 --> 00:14:21.420
<v Speaker 1>The the replica set values of the helm

00:14:21.420 --> 00:14:24.045
<v Speaker 1>chart will increase it, in this case, by

00:14:24.045 --> 00:14:25.805
<v Speaker 1>plus one or you can say by plus

00:14:25.805 --> 00:14:28.045
<v Speaker 1>10% or whatever is might be the right

00:14:28.045 --> 00:14:28.685
<v Speaker 1>action.

00:14:29.405 --> 00:14:31.165
<v Speaker 1>We'll then reevaluate

00:14:31.165 --> 00:14:33.005
<v Speaker 1>the SLO file.

00:14:33.485 --> 00:14:36.045
<v Speaker 1>We'll do this evaluation of the quality gate.

00:14:36.045 --> 00:14:36.925
<v Speaker 1>If it's remediated,

00:14:37.280 --> 00:14:39.600
<v Speaker 1>everything's fine. If not, it will go to

00:14:39.600 --> 00:14:42.000
<v Speaker 1>the next action. This is in this case,

00:14:42.000 --> 00:14:44.160
<v Speaker 1>it's the toggling of a feature flag. So

00:14:44.160 --> 00:14:46.240
<v Speaker 1>we in this case, we actually want to

00:14:46.240 --> 00:14:47.200
<v Speaker 1>disable

00:14:47.360 --> 00:14:50.400
<v Speaker 1>the a campaign of a specific campaign ID.

00:14:50.400 --> 00:14:52.480
<v Speaker 1>We can think of this like a promotional

00:14:52.055 --> 00:14:53.815
<v Speaker 1>campaign that has been initiated.

00:14:53.815 --> 00:14:55.334
<v Speaker 1>Maybe that's generating

00:14:56.615 --> 00:14:59.095
<v Speaker 1>a lot of problems for our response time.

00:14:59.095 --> 00:14:59.495
<v Speaker 1>Maybe it's

00:15:00.454 --> 00:15:02.214
<v Speaker 1>it has to has to do too much,

00:15:02.214 --> 00:15:04.695
<v Speaker 1>I don't know, database calls, for example.

00:15:05.334 --> 00:15:07.175
<v Speaker 1>So this can be also triggered.

00:15:08.050 --> 00:15:10.449
<v Speaker 1>We don't define the tooling in these files.

00:15:10.449 --> 00:15:12.290
<v Speaker 1>The tooling will be just listening for these

00:15:12.290 --> 00:15:13.970
<v Speaker 1>events. So if you want to move from

00:15:13.970 --> 00:15:16.529
<v Speaker 1>one feature flagging framework to another, you can

00:15:16.529 --> 00:15:19.410
<v Speaker 1>still use the same remediation files because what

00:15:19.410 --> 00:15:21.889
<v Speaker 1>you will do is you will just change

00:15:21.889 --> 00:15:26.105
<v Speaker 1>the the part which listens for for events

00:15:26.105 --> 00:15:27.145
<v Speaker 1>from captain.

00:15:28.265 --> 00:15:30.265
<v Speaker 1>And in this case, might be resolved or

00:15:30.265 --> 00:15:32.185
<v Speaker 1>not. We can then escalate it. We can

00:15:32.185 --> 00:15:34.345
<v Speaker 1>send all these everything that's going on, all

00:15:34.345 --> 00:15:36.345
<v Speaker 1>these cloud events also to to Slack, for

00:15:36.345 --> 00:15:38.800
<v Speaker 1>example, or just sending it to Slack when

00:15:38.800 --> 00:15:40.960
<v Speaker 1>it escalates and we could not resolve it.

00:15:43.680 --> 00:15:46.240
<v Speaker 1>Yeah. That's the that's the main or the

00:15:46.240 --> 00:15:47.760
<v Speaker 1>major three use cases.

00:15:48.080 --> 00:15:50.000
<v Speaker 1>And as said in the beginning, kpten is

00:15:50.000 --> 00:15:53.279
<v Speaker 1>built as an event based control plane

00:15:53.615 --> 00:15:56.014
<v Speaker 1>that lives in your Kubernetes cluster, and you

00:15:56.014 --> 00:15:58.415
<v Speaker 1>can send cloud events to this control plane,

00:15:58.415 --> 00:16:00.175
<v Speaker 1>and the control plane can also send

00:16:00.575 --> 00:16:02.815
<v Speaker 1>cloud events. So it re receives and sends

00:16:02.815 --> 00:16:05.774
<v Speaker 1>cloud events, and this is how the the

00:16:06.769 --> 00:16:09.730
<v Speaker 1>tool integrations are actually done. We already have

00:16:09.730 --> 00:16:11.250
<v Speaker 1>a couple of tool integrations,

00:16:11.490 --> 00:16:13.410
<v Speaker 1>and we see more and more

00:16:14.769 --> 00:16:16.690
<v Speaker 1>or we see this growing as more and

00:16:16.690 --> 00:16:20.495
<v Speaker 1>more organizations are contributing. For example, we received

00:16:20.495 --> 00:16:22.575
<v Speaker 1>a contribution for a Slack bot where you

00:16:22.575 --> 00:16:23.615
<v Speaker 1>can control

00:16:23.695 --> 00:16:25.695
<v Speaker 1>continuous delivery workflows

00:16:25.855 --> 00:16:27.695
<v Speaker 1>with a Slack bot. So you get the

00:16:27.695 --> 00:16:30.495
<v Speaker 1>whole evaluation of the quality gate directly into

00:16:30.495 --> 00:16:32.654
<v Speaker 1>Slack, and you can just accept or recheck

00:16:32.654 --> 00:16:33.135
<v Speaker 1>if

00:16:33.855 --> 00:16:34.815
<v Speaker 1>if this build

00:16:35.639 --> 00:16:38.600
<v Speaker 1>should move on to, let's say, from your

00:16:38.600 --> 00:16:41.160
<v Speaker 1>dev environment to preprode or even from preprode

00:16:41.160 --> 00:16:43.399
<v Speaker 1>to prod. So that's pretty cool.

00:16:43.800 --> 00:16:44.920
<v Speaker 1>We have a couple of

00:16:45.560 --> 00:16:49.399
<v Speaker 1>integrations here in our yeah. Contributed to to

00:16:49.399 --> 00:16:50.360
<v Speaker 1>the kpten ecosystem.

00:16:52.514 --> 00:16:53.875
<v Speaker 1>Yeah. That's

00:16:53.875 --> 00:16:56.355
<v Speaker 1>our our latest integrations,

00:16:56.435 --> 00:16:59.795
<v Speaker 1>I would say. And, yeah, maybe from this,

00:17:00.035 --> 00:17:02.035
<v Speaker 1>we already take it from there and take

00:17:02.035 --> 00:17:02.915
<v Speaker 1>a look at kptn.

00:17:04.429 --> 00:17:06.589
<v Speaker 1>If you want to also, afterwards, maybe take

00:17:06.589 --> 00:17:08.429
<v Speaker 1>a look at kptn's kptn dot s h.

00:17:08.429 --> 00:17:09.710
<v Speaker 1>That's our main website.

00:17:10.270 --> 00:17:10.829
<v Speaker 1>And,

00:17:11.309 --> 00:17:13.549
<v Speaker 1>yeah, I think we're good to Okay.

00:17:15.549 --> 00:17:16.190
<v Speaker 0>So

00:17:16.955 --> 00:17:18.075
<v Speaker 0>it does a lot.

00:17:18.714 --> 00:17:20.474
<v Speaker 0>There's there's a lot of things here. Right?

00:17:20.474 --> 00:17:22.635
<v Speaker 0>So, I mean, I'm very excited now. I

00:17:22.635 --> 00:17:24.234
<v Speaker 0>have a couple of questions. Before we get

00:17:24.234 --> 00:17:26.714
<v Speaker 0>to them, we got one from the chat.

00:17:26.714 --> 00:17:29.355
<v Speaker 0>So Adam has asked, is it possible to

00:17:29.355 --> 00:17:31.275
<v Speaker 0>use captain

00:17:30.780 --> 00:17:32.620
<v Speaker 0>outside of Kubernetes?

00:17:33.900 --> 00:17:34.860
<v Speaker 1>Yes.

00:17:35.180 --> 00:17:35.820
<v Speaker 1>So

00:17:37.740 --> 00:17:40.300
<v Speaker 1>the the when I read this question, I

00:17:40.300 --> 00:17:43.180
<v Speaker 1>can definitely answer with yes. Kptn

00:17:43.365 --> 00:17:46.005
<v Speaker 1>the applications that are managed by kpten, they

00:17:46.005 --> 00:17:47.684
<v Speaker 1>don't have to run-in Kubernetes.

00:17:47.765 --> 00:17:51.124
<v Speaker 1>But kpten itself is built to run-in Kubernetes.

00:17:51.605 --> 00:17:54.965
<v Speaker 1>But we've also built a kpten on k

00:17:54.965 --> 00:17:57.525
<v Speaker 1>three s, a very, very small kubernetes single

00:17:57.525 --> 00:17:59.900
<v Speaker 1>binary distribution that you can just run on

00:17:59.900 --> 00:18:01.659
<v Speaker 1>your small e c two instance,

00:18:01.980 --> 00:18:03.980
<v Speaker 1>and you just install kpten on k three

00:18:03.980 --> 00:18:05.820
<v Speaker 1>s there. And then it acts the control

00:18:05.820 --> 00:18:08.380
<v Speaker 1>plane acts on this e c two instance,

00:18:08.380 --> 00:18:10.220
<v Speaker 1>and you can send the cloud events to

00:18:10.220 --> 00:18:12.485
<v Speaker 1>kpten. It's just built as a couple of

00:18:12.485 --> 00:18:13.684
<v Speaker 1>microservices,

00:18:13.925 --> 00:18:14.885
<v Speaker 1>and they need

00:18:15.205 --> 00:18:17.205
<v Speaker 1>some kind of orchestration, and we we we

00:18:17.205 --> 00:18:18.725
<v Speaker 1>decided to go for Kubernetes.

00:18:20.245 --> 00:18:22.885
<v Speaker 1>But, yes, you can also use kpten for

00:18:22.885 --> 00:18:26.320
<v Speaker 1>traditional applications. It just it, I would assume

00:18:26.559 --> 00:18:28.000
<v Speaker 1>or I would just argue it works best

00:18:28.000 --> 00:18:30.399
<v Speaker 1>best with microservice architectures.

00:18:30.399 --> 00:18:31.759
<v Speaker 1>But we also see,

00:18:32.240 --> 00:18:33.919
<v Speaker 1>monolithic applications being,

00:18:34.799 --> 00:18:36.240
<v Speaker 1>quality gated by kpten.

00:18:38.174 --> 00:18:39.294
<v Speaker 0>Alright. Nice.

00:18:39.695 --> 00:18:41.455
<v Speaker 0>So on your

00:18:42.174 --> 00:18:43.615
<v Speaker 0>slide in fact, let me just pull that

00:18:43.615 --> 00:18:45.615
<v Speaker 0>back up. Let me can you go back?

00:18:45.615 --> 00:18:47.614
<v Speaker 0>Was it one slide, two slides maybe?

00:18:48.414 --> 00:18:50.975
<v Speaker 0>There. This one. Okay. So if I'm trying

00:18:50.975 --> 00:18:52.679
<v Speaker 0>to think and, you know, we'll get hands

00:18:52.679 --> 00:18:53.960
<v Speaker 0>on it in just a moment. And I'm

00:18:53.960 --> 00:18:55.480
<v Speaker 0>sure all my questions will be answered there,

00:18:55.480 --> 00:18:57.320
<v Speaker 0>but I'll throw them out anyway. It's like,

00:18:57.720 --> 00:19:00.520
<v Speaker 0>kptn runs as a control plane to monitor

00:19:00.520 --> 00:19:03.720
<v Speaker 0>pretty much everything after I get merged into

00:19:03.720 --> 00:19:06.985
<v Speaker 0>my main branch to application running in production.

00:19:06.985 --> 00:19:09.545
<v Speaker 0>Now you talk about environments and how it

00:19:09.545 --> 00:19:12.825
<v Speaker 0>can handle progressive delivery across those environments. Now

00:19:12.825 --> 00:19:14.505
<v Speaker 0>the example here is namespaces.

00:19:14.505 --> 00:19:17.305
<v Speaker 0>Could those be separate Kubernetes clusters? One for

00:19:17.305 --> 00:19:18.665
<v Speaker 0>dev staging and production?

00:19:19.880 --> 00:19:20.599
<v Speaker 0>Yes.

00:19:23.080 --> 00:19:25.240
<v Speaker 1>But only in the next version of kptn.

00:19:25.240 --> 00:19:26.999
<v Speaker 1>So we are working on this.

00:19:27.480 --> 00:19:29.799
<v Speaker 1>So today, we will we we have to

00:19:29.799 --> 00:19:30.839
<v Speaker 1>use kptn

00:19:30.840 --> 00:19:33.000
<v Speaker 1>zero dot seven dot three. That's the latest

00:19:33.000 --> 00:19:34.784
<v Speaker 1>version. And we are working on zero dot

00:19:34.784 --> 00:19:37.265
<v Speaker 1>eight. And with dot eight, it will be

00:19:37.265 --> 00:19:38.465
<v Speaker 1>possible to have

00:19:39.985 --> 00:19:42.304
<v Speaker 1>to manage different clusters in diff even in

00:19:42.304 --> 00:19:44.225
<v Speaker 1>different clouds. So then it doesn't really matter

00:19:44.225 --> 00:19:45.744
<v Speaker 1>where the cluster lives.

00:19:45.905 --> 00:19:48.930
<v Speaker 1>But right now, the control plane can manage

00:19:48.930 --> 00:19:51.490
<v Speaker 1>one cluster, and we are doing the separation

00:19:51.570 --> 00:19:52.690
<v Speaker 1>between the

00:19:53.490 --> 00:19:55.730
<v Speaker 1>the the control plane and the execution plane,

00:19:55.730 --> 00:19:57.090
<v Speaker 1>and then it will be easier.

00:19:57.490 --> 00:19:58.610
<v Speaker 0>Alright. Sweet.

00:19:58.930 --> 00:20:01.885
<v Speaker 0>Okay. Let's get started then. So if I

00:20:01.885 --> 00:20:03.485
<v Speaker 0>pull up my screen,

00:20:04.365 --> 00:20:05.325
<v Speaker 0>there we go.

00:20:06.045 --> 00:20:08.125
<v Speaker 0>We have the kptn website. People can check

00:20:08.125 --> 00:20:10.524
<v Speaker 0>that out at kptn.sh

00:20:11.485 --> 00:20:12.284
<v Speaker 0>and

00:20:12.765 --> 00:20:15.640
<v Speaker 0>there's documentation tutorials, etcetera. The tutorials, I believe,

00:20:15.640 --> 00:20:17.960
<v Speaker 0>is what we're gonna get started with today.

00:20:18.040 --> 00:20:18.600
<v Speaker 0>So

00:20:20.120 --> 00:20:22.440
<v Speaker 0>these are these just guides that anyone can

00:20:22.440 --> 00:20:23.320
<v Speaker 0>follow along

00:20:24.520 --> 00:20:25.720
<v Speaker 0>at their own time,

00:20:26.040 --> 00:20:27.640
<v Speaker 0>click star, and then you just guide it

00:20:27.640 --> 00:20:29.240
<v Speaker 0>through step by step. Right? So

00:20:29.785 --> 00:20:30.505
<v Speaker 0>are

00:20:30.745 --> 00:20:33.225
<v Speaker 0>we doing the captain filter?

00:20:33.385 --> 00:20:35.945
<v Speaker 0>It sounds exciting on Prometheus one. Right? That's

00:20:35.945 --> 00:20:37.945
<v Speaker 0>the one we're we're gonna check out. Yep.

00:20:37.945 --> 00:20:40.105
<v Speaker 1>That sounds good. And the other ones, they

00:20:40.105 --> 00:20:42.185
<v Speaker 1>are basically for different use cases.

00:20:42.769 --> 00:20:44.929
<v Speaker 1>They show you for example captain in the

00:20:44.929 --> 00:20:47.409
<v Speaker 1>box will use micro kubernetes. We also have

00:20:47.409 --> 00:20:49.409
<v Speaker 1>the guide for the captain installation on k3s

00:20:49.409 --> 00:20:51.330
<v Speaker 1>if you want to do that to connect

00:20:51.330 --> 00:20:52.529
<v Speaker 1>it to Argo CD.

00:20:52.929 --> 00:20:54.450
<v Speaker 1>So we decided to

00:20:54.850 --> 00:20:57.330
<v Speaker 1>go for tutorials. We also have a documentation

00:20:57.435 --> 00:20:59.035
<v Speaker 1>but tutorials are more

00:20:59.675 --> 00:21:01.195
<v Speaker 1>guiding you how to

00:21:01.835 --> 00:21:02.875
<v Speaker 1>to follow

00:21:03.275 --> 00:21:03.915
<v Speaker 1>the

00:21:04.075 --> 00:21:06.475
<v Speaker 1>the the concepts of kpt and how to

00:21:06.475 --> 00:21:07.435
<v Speaker 1>use them to

00:21:08.235 --> 00:21:09.195
<v Speaker 1>to the best.

00:21:09.435 --> 00:21:11.355
<v Speaker 0>So here's the branch I want then for

00:21:11.355 --> 00:21:14.149
<v Speaker 0>my multi cluster approach. Okay. Exactly.

00:21:14.870 --> 00:21:16.470
<v Speaker 0>We won't do that today. I won't I

00:21:16.470 --> 00:21:18.070
<v Speaker 0>won't put pressure on you. So

00:21:19.270 --> 00:21:21.350
<v Speaker 0>we get this kinda alright. Here we go.

00:21:21.350 --> 00:21:23.590
<v Speaker 0>We got step by step guidance through the

00:21:23.590 --> 00:21:26.070
<v Speaker 0>filter. So when it says the filter of

00:21:26.070 --> 00:21:28.025
<v Speaker 0>kpt, that's just going through all of the

00:21:28.025 --> 00:21:30.025
<v Speaker 0>components that you kinda listed on those slides.

00:21:30.025 --> 00:21:30.505
<v Speaker 0>Right?

00:21:31.225 --> 00:21:32.024
<v Speaker 1>Exactly.

00:21:32.425 --> 00:21:35.225
<v Speaker 1>That will will explain how to install it.

00:21:35.225 --> 00:21:37.065
<v Speaker 1>It will explain how to do

00:21:37.945 --> 00:21:39.065
<v Speaker 1>delivery

00:21:39.065 --> 00:21:42.105
<v Speaker 1>with kptn, quality gates with kptn, and

00:21:42.960 --> 00:21:44.559
<v Speaker 1>automated operations

00:21:44.640 --> 00:21:46.960
<v Speaker 1>or let's call it self healing with kptn.

00:21:47.040 --> 00:21:49.519
<v Speaker 1>And we'll bring also all the

00:21:49.920 --> 00:21:52.080
<v Speaker 1>the tools that you will need. So in

00:21:52.080 --> 00:21:53.600
<v Speaker 1>this case, yeah, we'll ask you to install

00:21:53.600 --> 00:21:56.720
<v Speaker 1>Istio because that's what we are using for

00:21:57.280 --> 00:21:58.160
<v Speaker 1>the route

00:21:58.985 --> 00:21:59.865
<v Speaker 1>generation

00:21:59.865 --> 00:22:02.105
<v Speaker 1>and the traffic shifting between the blue green

00:22:02.105 --> 00:22:02.905
<v Speaker 1>versions.

00:22:03.465 --> 00:22:05.545
<v Speaker 1>So this is the this is why we

00:22:05.545 --> 00:22:06.825
<v Speaker 1>need this deal in this case.

00:22:07.465 --> 00:22:10.265
<v Speaker 0>Alright. So as this is recommending that I

00:22:10.265 --> 00:22:12.185
<v Speaker 0>run s two one five.

00:22:12.919 --> 00:22:15.080
<v Speaker 0>I'll just check what I actually have.

00:22:17.880 --> 00:22:20.919
<v Speaker 0>Okay. So should I install this version? Does

00:22:20.919 --> 00:22:22.519
<v Speaker 0>the version matter?

00:22:24.039 --> 00:22:26.005
<v Speaker 1>We I have not tried with the with

00:22:26.005 --> 00:22:28.565
<v Speaker 1>the the latest versions. We just had that

00:22:28.565 --> 00:22:31.365
<v Speaker 1>the previous versions did not work pretty well,

00:22:31.365 --> 00:22:32.805
<v Speaker 1>so we just decided to go for this

00:22:32.805 --> 00:22:33.445
<v Speaker 1>version.

00:22:34.085 --> 00:22:36.965
<v Speaker 1>This is the most stable version in

00:22:37.845 --> 00:22:38.725
<v Speaker 1>for our

00:22:40.450 --> 00:22:41.490
<v Speaker 1>demos here.

00:22:41.730 --> 00:22:43.170
<v Speaker 0>Alright. That's fine.

00:22:45.650 --> 00:22:47.730
<v Speaker 0>Why did that not work?

00:22:47.970 --> 00:22:49.809
<v Speaker 0>Oh, because I put the path after.

00:22:50.770 --> 00:22:52.130
<v Speaker 0>Let's just do this.

00:22:58.075 --> 00:23:00.715
<v Speaker 0>Much better. Okay. So we have a steel

00:23:00.715 --> 00:23:02.395
<v Speaker 0>control one six five.

00:23:03.035 --> 00:23:05.675
<v Speaker 0>We're just gonna run and install against

00:23:05.675 --> 00:23:06.715
<v Speaker 0>our cluster.

00:23:11.220 --> 00:23:13.059
<v Speaker 0>Default profile, the correct one. Yep.

00:23:13.940 --> 00:23:15.860
<v Speaker 1>The default. Yes. That's cool.

00:23:17.140 --> 00:23:18.980
<v Speaker 0>It's just one of those things that I've

00:23:18.980 --> 00:23:20.580
<v Speaker 0>been putting off for so long to play

00:23:20.580 --> 00:23:22.820
<v Speaker 0>with that I really am gonna have to

00:23:22.820 --> 00:23:24.340
<v Speaker 0>start experimenting with it eventually.

00:23:27.415 --> 00:23:30.215
<v Speaker 1>Actually, when when you're using kptn, you won't

00:23:30.215 --> 00:23:31.895
<v Speaker 1>see a lot of Istio because we will

00:23:31.895 --> 00:23:33.735
<v Speaker 1>be the kptn is generating

00:23:34.135 --> 00:23:36.935
<v Speaker 1>the the virtual services and all the traffic

00:23:36.935 --> 00:23:38.535
<v Speaker 1>routes that you will need

00:23:39.095 --> 00:23:40.535
<v Speaker 1>for for Istio,

00:23:40.535 --> 00:23:42.929
<v Speaker 1>the ingress, these kind of things. So we

00:23:42.929 --> 00:23:44.610
<v Speaker 1>won't see a lot of Istio. It's just

00:23:44.610 --> 00:23:45.889
<v Speaker 1>used behind the scenes.

00:23:46.610 --> 00:23:48.929
<v Speaker 1>But it's definitely a very, very interesting project.

00:23:49.090 --> 00:23:52.450
<v Speaker 0>Is that something that kpting could, you know,

00:23:53.090 --> 00:23:55.730
<v Speaker 0>more have a dependency on the service mesh

00:23:55.515 --> 00:23:57.435
<v Speaker 0>interface rather than STO, or is there stuff

00:23:57.435 --> 00:23:59.675
<v Speaker 0>on STO specifically that's needed for a captain

00:23:59.675 --> 00:24:02.154
<v Speaker 0>to work beyond to the service mesh interface?

00:24:03.675 --> 00:24:04.555
<v Speaker 1>We only

00:24:05.355 --> 00:24:07.675
<v Speaker 1>so if we are not use if we're

00:24:07.675 --> 00:24:09.940
<v Speaker 1>not doing continuous delivery with kptan, if we

00:24:09.940 --> 00:24:13.060
<v Speaker 1>are using, let's say, Argo CD for continuous

00:24:13.060 --> 00:24:15.300
<v Speaker 1>delivery and we are just using kptan for

00:24:15.300 --> 00:24:17.700
<v Speaker 1>the quality gate part and the automated remediation

00:24:17.700 --> 00:24:19.860
<v Speaker 1>part, then we won't need Istio.

00:24:20.020 --> 00:24:21.860
<v Speaker 1>It's when we are going for the full

00:24:21.860 --> 00:24:24.075
<v Speaker 1>installation of and we want to do continuous

00:24:24.075 --> 00:24:25.914
<v Speaker 1>delivery, we need Istio.

00:24:26.475 --> 00:24:28.235
<v Speaker 1>We were thinking about also moving to the

00:24:28.235 --> 00:24:29.595
<v Speaker 1>service mesh interface,

00:24:29.595 --> 00:24:32.154
<v Speaker 1>then also supporting Linkerd and other service meshes.

00:24:32.795 --> 00:24:33.835
<v Speaker 1>But it's just

00:24:35.035 --> 00:24:37.435
<v Speaker 1>it was never the right time to to

00:24:38.549 --> 00:24:40.870
<v Speaker 1>broaden up for this because what what we

00:24:40.870 --> 00:24:41.989
<v Speaker 1>see is that

00:24:43.350 --> 00:24:45.829
<v Speaker 1>more reusing already existing

00:24:45.909 --> 00:24:49.349
<v Speaker 1>CD tools like Argo CD, Argo Rollouts,

00:24:49.350 --> 00:24:50.309
<v Speaker 1>Spinnaker,

00:24:50.710 --> 00:24:54.525
<v Speaker 1>and trying to integrate with them and actually

00:24:54.525 --> 00:24:56.124
<v Speaker 1>providing integration with them

00:24:56.605 --> 00:24:59.004
<v Speaker 1>seems like the better approach right now.

00:24:59.565 --> 00:25:01.164
<v Speaker 0>Alright. Makes sense.

00:25:02.605 --> 00:25:03.404
<v Speaker 0>Alright.

00:25:03.405 --> 00:25:04.044
<v Speaker 0>So,

00:25:04.605 --> 00:25:07.164
<v Speaker 0>yeah, we've got installation complete. We hit next,

00:25:07.720 --> 00:25:08.599
<v Speaker 0>And

00:25:08.600 --> 00:25:10.440
<v Speaker 0>I'm curling

00:25:11.559 --> 00:25:13.159
<v Speaker 0>for a captain c l I.

00:25:21.805 --> 00:25:22.765
<v Speaker 0>Here we go.

00:25:25.005 --> 00:25:25.885
<v Speaker 1>Okay.

00:25:26.205 --> 00:25:27.245
<v Speaker 1>That was fast.

00:25:28.445 --> 00:25:30.845
<v Speaker 0>My connection's pretty good. Well, we know when

00:25:30.845 --> 00:25:32.205
<v Speaker 0>it wants to be, of course. There are

00:25:32.205 --> 00:25:34.205
<v Speaker 0>definitely days where it's not good, but today

00:25:34.205 --> 00:25:35.005
<v Speaker 0>it's been pretty good.

00:25:36.110 --> 00:25:38.990
<v Speaker 0>So we have the kpten CLI. Nice. Okay.

00:25:39.070 --> 00:25:40.429
<v Speaker 1>That that's pretty good.

00:25:40.910 --> 00:25:41.549
<v Speaker 1>So

00:25:42.430 --> 00:25:44.910
<v Speaker 1>yeah. And now with the kpten CLI, we

00:25:44.910 --> 00:25:47.549
<v Speaker 1>can install kpten in our Kubernetes cluster.

00:25:48.350 --> 00:25:48.990
<v Speaker 1>And

00:25:49.230 --> 00:25:50.990
<v Speaker 1>as said, for our installation

00:25:51.645 --> 00:25:53.965
<v Speaker 1>type, we are going for this use case,

00:25:53.965 --> 00:25:55.085
<v Speaker 1>continuous delivery.

00:25:55.405 --> 00:25:57.645
<v Speaker 1>If we don't decide for this use case,

00:25:57.645 --> 00:25:59.565
<v Speaker 1>then it will be a smaller installation of

00:25:59.565 --> 00:26:01.645
<v Speaker 1>kpten without the services

00:26:01.645 --> 00:26:03.885
<v Speaker 1>to to do the full continuous delivery, but

00:26:03.885 --> 00:26:05.485
<v Speaker 1>then we have to take care of doing

00:26:05.485 --> 00:26:07.830
<v Speaker 1>continuous delivery by ourselves. So we just go

00:26:07.830 --> 00:26:09.590
<v Speaker 1>for full installation here.

00:26:12.309 --> 00:26:15.110
<v Speaker 0>Okay. So you want me to change continuous

00:26:15.110 --> 00:26:17.350
<v Speaker 0>delivery to fill or as continuous delivery that

00:26:17.350 --> 00:26:17.990
<v Speaker 0>fill installation?

00:26:19.205 --> 00:26:20.005
<v Speaker 1>That's

00:26:20.485 --> 00:26:21.845
<v Speaker 1>so we just leave it like it is.

00:26:21.845 --> 00:26:24.565
<v Speaker 1>Yeah. Alright. Okay. Yeah. Yeah. That's

00:26:24.565 --> 00:26:26.645
<v Speaker 1>the, like, let's say, the the full installation

00:26:26.645 --> 00:26:29.284
<v Speaker 1>with the continuous delivery use case included,

00:26:29.445 --> 00:26:31.445
<v Speaker 1>which just ask us if everything

00:26:31.605 --> 00:26:32.405
<v Speaker 1>correct. Yeah.

00:26:33.990 --> 00:26:35.910
<v Speaker 0>I'm just gonna keep clicking buttons when things

00:26:35.910 --> 00:26:37.190
<v Speaker 0>are presented. If I do it if I'm

00:26:37.190 --> 00:26:39.110
<v Speaker 0>wrong, just feel free to to yell at

00:26:39.110 --> 00:26:41.430
<v Speaker 0>me. But so this is gonna

00:26:42.390 --> 00:26:44.070
<v Speaker 0>oh, so it's installing captive. So I could

00:26:44.070 --> 00:26:45.510
<v Speaker 0>have done this for the the helm chart

00:26:45.510 --> 00:26:47.110
<v Speaker 0>as well. I'm assuming the CLI is just

00:26:47.110 --> 00:26:49.285
<v Speaker 0>a wrapper around that, provides some values for

00:26:49.285 --> 00:26:51.525
<v Speaker 0>the use cases that are are selected. Is

00:26:51.525 --> 00:26:52.804
<v Speaker 0>that roughly right?

00:26:53.525 --> 00:26:56.405
<v Speaker 1>Yes. Yes. Exactly. We had it differently

00:26:56.885 --> 00:26:59.205
<v Speaker 1>that we had a really it like, a

00:26:59.205 --> 00:27:01.605
<v Speaker 1>a a job that was really executing

00:27:01.845 --> 00:27:04.085
<v Speaker 1>step by step the capital installation, but we

00:27:04.140 --> 00:27:05.980
<v Speaker 1>we thought it's best to move to Helm

00:27:05.980 --> 00:27:08.620
<v Speaker 1>chart since it also provides possibility

00:27:08.620 --> 00:27:11.420
<v Speaker 1>to install it via a Helm chart without

00:27:11.420 --> 00:27:14.059
<v Speaker 1>the installer. That's what we also see.

00:27:15.180 --> 00:27:18.140
<v Speaker 1>Sometimes it's not allowed to install any software

00:27:18.140 --> 00:27:20.105
<v Speaker 1>with an installer script,

00:27:20.105 --> 00:27:22.825
<v Speaker 1>but just with helm charts so that organizations

00:27:22.825 --> 00:27:24.985
<v Speaker 1>have full control and can take a look

00:27:24.985 --> 00:27:27.065
<v Speaker 1>what is actually installed. In this case, it's

00:27:27.065 --> 00:27:28.825
<v Speaker 1>basically applying the helm chart,

00:27:29.785 --> 00:27:31.945
<v Speaker 1>and we will see a couple of pods

00:27:33.029 --> 00:27:35.190
<v Speaker 1>spinning up in the captain namespace. So we

00:27:35.190 --> 00:27:36.950
<v Speaker 1>install everything in one namespace,

00:27:37.830 --> 00:27:39.669
<v Speaker 1>and that's the captain namespace.

00:27:40.309 --> 00:27:41.909
<v Speaker 1>If we if if you want, we can

00:27:41.909 --> 00:27:44.630
<v Speaker 1>we can try kubectl get pods minus end

00:27:44.630 --> 00:27:45.750
<v Speaker 1>captain. We will see

00:27:46.695 --> 00:27:50.535
<v Speaker 1>the what it's actually creating here. Yeah. We'll

00:27:50.535 --> 00:27:51.975
<v Speaker 1>see. That's basically

00:27:52.695 --> 00:27:53.414
<v Speaker 1>the

00:27:53.895 --> 00:27:55.494
<v Speaker 1>the core of captain.

00:27:56.135 --> 00:27:58.054
<v Speaker 1>Couple of different services that talk to each

00:27:58.054 --> 00:27:58.215
<v Speaker 0>other.

00:27:59.300 --> 00:28:01.540
<v Speaker 0>Okay. So we've got engine x for the

00:28:01.540 --> 00:28:02.500
<v Speaker 0>gateway.

00:28:02.660 --> 00:28:04.100
<v Speaker 0>We've got bridge. I don't know what that

00:28:04.100 --> 00:28:06.580
<v Speaker 0>is yet. We've got config, and we've got

00:28:06.580 --> 00:28:09.380
<v Speaker 0>an event broker. Is is that NAT, sir?

00:28:09.380 --> 00:28:10.820
<v Speaker 0>Are you using something else there for the

00:28:10.820 --> 00:28:11.300
<v Speaker 0>event broker?

00:28:12.195 --> 00:28:14.115
<v Speaker 1>It's actually yeah. It's NATs. So you can

00:28:14.115 --> 00:28:15.794
<v Speaker 1>also see the captain nets cluster

00:28:16.115 --> 00:28:19.154
<v Speaker 1>that's deployed. Oh, yeah. Yeah. Then we the

00:28:19.154 --> 00:28:20.995
<v Speaker 1>the the bridge is actually the captain's bridge

00:28:20.995 --> 00:28:22.835
<v Speaker 1>is the, let's say, the control center of

00:28:22.835 --> 00:28:24.595
<v Speaker 1>captain. That's it, our UI.

00:28:24.835 --> 00:28:26.115
<v Speaker 1>We will see the UI later.

00:28:26.809 --> 00:28:29.289
<v Speaker 1>The lighthouse is the one component that

00:28:31.130 --> 00:28:33.370
<v Speaker 1>is responsible for reaching out to all these

00:28:33.370 --> 00:28:35.529
<v Speaker 1>SLI providers and doing the evaluation.

00:28:36.490 --> 00:28:39.690
<v Speaker 1>Yeah. The shipyard is responsible for creating the

00:28:39.690 --> 00:28:40.250
<v Speaker 1>environments.

00:28:40.774 --> 00:28:43.575
<v Speaker 0>Is gatekeeper open policy agent

00:28:44.215 --> 00:28:47.255
<v Speaker 0>or something else? It's it's our own internal

00:28:47.255 --> 00:28:49.575
<v Speaker 1>gatekeeper. It's the the one component that decides

00:28:49.575 --> 00:28:50.854
<v Speaker 1>if one

00:28:51.095 --> 00:28:53.095
<v Speaker 1>version of a microservice is allowed to move

00:28:53.095 --> 00:28:54.934
<v Speaker 1>on to the next stage or not. It's

00:28:54.934 --> 00:28:56.615
<v Speaker 1>it's doing this decision making.

00:28:57.230 --> 00:28:57.950
<v Speaker 0>Right.

00:28:58.110 --> 00:29:00.030
<v Speaker 0>I'm not seeing any puns here for walking

00:29:00.030 --> 00:29:01.630
<v Speaker 0>the plank. So I think we need a

00:29:01.630 --> 00:29:04.030
<v Speaker 0>a new service for that, for maybe infecting

00:29:04.030 --> 00:29:05.550
<v Speaker 0>other apps.

00:29:06.510 --> 00:29:07.230
<v Speaker 1>Alright.

00:29:07.310 --> 00:29:10.270
<v Speaker 0>I like the nautical same. It's always amusing.

00:29:10.270 --> 00:29:10.830
<v Speaker 0>Okay.

00:29:11.425 --> 00:29:12.784
<v Speaker 0>So let's

00:29:12.865 --> 00:29:14.385
<v Speaker 0>let's see what's next.

00:29:15.185 --> 00:29:16.225
<v Speaker 0>So we have to

00:29:16.945 --> 00:29:18.945
<v Speaker 0>configure STO and kpten.

00:29:21.665 --> 00:29:23.265
<v Speaker 0>I guess I just trust this and run

00:29:23.265 --> 00:29:23.505
<v Speaker 0>it.

00:29:24.490 --> 00:29:26.490
<v Speaker 1>You can yeah. It's actually this one is

00:29:26.490 --> 00:29:27.929
<v Speaker 1>just downloading,

00:29:27.929 --> 00:29:28.970
<v Speaker 1>and the next one is then

00:29:29.690 --> 00:29:32.010
<v Speaker 1>we will just run-in the next command. So

00:29:32.010 --> 00:29:33.529
<v Speaker 1>we would can take we can also take

00:29:33.529 --> 00:29:35.210
<v Speaker 1>a look here. It's

00:29:35.370 --> 00:29:37.690
<v Speaker 1>what what it's doing is it will create

00:29:37.690 --> 00:29:38.250
<v Speaker 1>the ingress,

00:29:39.705 --> 00:29:40.424
<v Speaker 1>and

00:29:41.225 --> 00:29:43.865
<v Speaker 1>it will create also a a gateway,

00:29:43.945 --> 00:29:45.304
<v Speaker 1>and it will restart

00:29:46.025 --> 00:29:46.744
<v Speaker 1>our

00:29:47.545 --> 00:29:50.025
<v Speaker 1>re restart one service of of kpten that

00:29:50.025 --> 00:29:51.624
<v Speaker 1>it can fetch this configuration.

00:29:52.825 --> 00:29:53.304
<v Speaker 0>Alright.

00:29:54.490 --> 00:29:55.210
<v Speaker 0>K.

00:29:56.170 --> 00:29:57.690
<v Speaker 0>So we're just gonna

00:29:58.170 --> 00:29:59.129
<v Speaker 0>run it.

00:30:00.250 --> 00:30:01.850
<v Speaker 0>Parameters. Nope. Okay. Good.

00:30:06.345 --> 00:30:08.985
<v Speaker 0>Alright. Let's give that a second.

00:30:09.465 --> 00:30:10.825
<v Speaker 0>Alright. And then it tells you what it's

00:30:10.825 --> 00:30:12.904
<v Speaker 0>doing anyway. Right. Cool. Got it.

00:30:13.945 --> 00:30:16.745
<v Speaker 0>And now we need to configure our CLI

00:30:16.745 --> 00:30:19.065
<v Speaker 0>to speak to the control plane.

00:30:20.105 --> 00:30:20.505
<v Speaker 1>Exactly.

00:30:25.520 --> 00:30:26.799
<v Speaker 0>Verify this.

00:30:31.039 --> 00:30:34.320
<v Speaker 1>Okay. So we already see where your Kubernetes

00:30:34.320 --> 00:30:36.320
<v Speaker 1>cluster lives. So we can take a look

00:30:36.320 --> 00:30:38.044
<v Speaker 1>at the API endpoint.

00:30:38.285 --> 00:30:40.685
<v Speaker 1>And there is also the the bridge that

00:30:40.685 --> 00:30:42.284
<v Speaker 1>will be exposed here.

00:30:43.565 --> 00:30:46.205
<v Speaker 1>I will just warn you. So whenever we

00:30:46.205 --> 00:30:47.405
<v Speaker 1>are doing the we

00:30:48.285 --> 00:30:50.365
<v Speaker 1>yeah. That's the the API of kptn. It

00:30:50.365 --> 00:30:52.445
<v Speaker 1>can be controlled via the

00:30:52.900 --> 00:30:54.100
<v Speaker 1>the CLI

00:30:54.100 --> 00:30:55.620
<v Speaker 1>or via the API.

00:30:55.780 --> 00:30:58.820
<v Speaker 1>And, yeah, you can imagine that when Citrix

00:30:58.820 --> 00:31:00.660
<v Speaker 1>built integration with the Slack bot, they were

00:31:00.660 --> 00:31:02.100
<v Speaker 1>more using the API.

00:31:03.060 --> 00:31:05.220
<v Speaker 1>Today, we will be more using the CLI

00:31:05.220 --> 00:31:07.140
<v Speaker 1>since it's easier instead of writing all these

00:31:07.140 --> 00:31:08.715
<v Speaker 1>cloud events and then sending them to the

00:31:08.715 --> 00:31:09.355
<v Speaker 1>API.

00:31:10.315 --> 00:31:10.955
<v Speaker 1>Yeah.

00:31:11.755 --> 00:31:14.794
<v Speaker 1>And yeah. So with this, we already installed

00:31:14.794 --> 00:31:17.355
<v Speaker 1>kptn. We have access to the kptn API,

00:31:17.355 --> 00:31:19.274
<v Speaker 1>so we know it's up and running. And

00:31:19.755 --> 00:31:21.434
<v Speaker 1>we could also already take a look at

00:31:21.434 --> 00:31:23.515
<v Speaker 1>the kptn's bridge, but it will be empty

00:31:23.515 --> 00:31:25.260
<v Speaker 1>anyway. So we can go ahead and create

00:31:25.260 --> 00:31:27.820
<v Speaker 1>our first project, onboard offered services, and then

00:31:27.820 --> 00:31:29.020
<v Speaker 1>take a look at the bridge.

00:31:31.180 --> 00:31:33.340
<v Speaker 0>Okay. So we're gonna clone.

00:31:34.540 --> 00:31:36.380
<v Speaker 0>Okay. So it's just an example repository.

00:31:37.875 --> 00:31:39.875
<v Speaker 0>And then we're gonna take a look at

00:31:40.035 --> 00:31:41.875
<v Speaker 0>onboarding karts.

00:31:43.795 --> 00:31:44.914
<v Speaker 0>I should just

00:31:47.555 --> 00:31:48.435
<v Speaker 0>pop open.

00:31:51.840 --> 00:31:53.119
<v Speaker 0>Okay.

00:31:53.120 --> 00:31:53.840
<v Speaker 0>Nice.

00:31:54.960 --> 00:31:56.399
<v Speaker 0>So I oh, wait.

00:31:57.360 --> 00:31:58.799
<v Speaker 0>So I still have to create the project.

00:31:58.799 --> 00:32:00.320
<v Speaker 0>Okay. I've just cloned it and opened it,

00:32:00.320 --> 00:32:02.960
<v Speaker 0>but it's Yes. And here we can go

00:32:03.040 --> 00:32:04.720
<v Speaker 1>if you want, we can link it to

00:32:04.720 --> 00:32:05.920
<v Speaker 1>a public Git repository

00:32:06.505 --> 00:32:09.705
<v Speaker 1>in GitHub or GitLab or wherever you might

00:32:09.705 --> 00:32:11.385
<v Speaker 1>run you might wanna run it. So we

00:32:11.385 --> 00:32:12.825
<v Speaker 1>can also take a look at all the

00:32:12.825 --> 00:32:13.465
<v Speaker 1>different

00:32:14.825 --> 00:32:16.985
<v Speaker 1>projects and all the on everything that has

00:32:16.985 --> 00:32:20.120
<v Speaker 1>been created by kpten, or we can just

00:32:20.120 --> 00:32:22.679
<v Speaker 1>assume that everything's fine and we just trust

00:32:22.679 --> 00:32:24.600
<v Speaker 1>that the kptn repository

00:32:24.600 --> 00:32:27.559
<v Speaker 1>that is managed by kptn in its in

00:32:27.559 --> 00:32:28.840
<v Speaker 1>its in the cluster

00:32:29.080 --> 00:32:31.400
<v Speaker 1>is will be fine. So we can go

00:32:31.400 --> 00:32:33.159
<v Speaker 1>with the git upstream or we can also

00:32:33.159 --> 00:32:34.865
<v Speaker 1>link it afterwards. So right now, we can

00:32:34.865 --> 00:32:37.345
<v Speaker 1>also go with the installation without the Git

00:32:37.345 --> 00:32:39.664
<v Speaker 1>upstream, and we can do the link ups

00:32:39.825 --> 00:32:42.065
<v Speaker 1>the the Git upstream afterwards if we want.

00:32:42.065 --> 00:32:44.144
<v Speaker 1>So that's just that's open to you.

00:32:44.465 --> 00:32:45.744
<v Speaker 0>Alright. So

00:32:46.144 --> 00:32:46.865
<v Speaker 0>let's see.

00:32:51.180 --> 00:32:53.020
<v Speaker 0>So I I could just create a an

00:32:53.020 --> 00:32:55.500
<v Speaker 0>empty repository and then fill in those variables.

00:32:55.500 --> 00:32:57.740
<v Speaker 0>Is that Yeah. So we we could you

00:32:57.740 --> 00:33:00.539
<v Speaker 1>can even create an empty organization,

00:33:01.180 --> 00:33:02.060
<v Speaker 1>and

00:33:02.385 --> 00:33:04.065
<v Speaker 1>you can have it there. So you afterwards,

00:33:04.065 --> 00:33:05.745
<v Speaker 1>you can delete the whole organization if you

00:33:05.745 --> 00:33:08.065
<v Speaker 1>want. It they're also for free organizations.

00:33:10.225 --> 00:33:10.945
<v Speaker 0>Okay.

00:33:12.865 --> 00:33:15.825
<v Speaker 0>Let's call Rawkode

00:33:16.065 --> 00:33:16.465
<v Speaker 0>captain.

00:33:19.179 --> 00:33:20.700
<v Speaker 0>I own email address.

00:33:21.500 --> 00:33:22.059
<v Speaker 0>Oh

00:33:22.380 --> 00:33:23.979
<v Speaker 0>oh, alright.

00:33:25.820 --> 00:33:26.619
<v Speaker 0>Skip.

00:33:26.940 --> 00:33:28.139
<v Speaker 0>Okay. So I have

00:33:28.380 --> 00:33:29.899
<v Speaker 0>an organization.

00:33:30.220 --> 00:33:32.700
<v Speaker 0>There we go. Yes. And we just need

00:33:33.265 --> 00:33:35.585
<v Speaker 1>one project in this organization.

00:33:35.745 --> 00:33:37.424
<v Speaker 0>Yep. Yep. And that.

00:33:38.304 --> 00:33:40.065
<v Speaker 1>Since we are going to onboard let's call

00:33:40.065 --> 00:33:41.585
<v Speaker 1>it sock shop since we are going to

00:33:41.585 --> 00:33:43.184
<v Speaker 1>onboard a shopping cart.

00:33:43.505 --> 00:33:45.265
<v Speaker 1>I think for captain,

00:33:46.429 --> 00:33:48.669
<v Speaker 1>please make it sock shop without the dash

00:33:48.910 --> 00:33:51.710
<v Speaker 1>because in previous versions, we had issues with

00:33:51.710 --> 00:33:54.350
<v Speaker 1>the dash and just make sure everything's fine

00:33:54.350 --> 00:33:54.990
<v Speaker 1>here.

00:33:55.150 --> 00:33:55.789
<v Speaker 1>Yeah.

00:33:57.870 --> 00:33:58.429
<v Speaker 0>There we go.

00:33:59.775 --> 00:34:02.415
<v Speaker 0>Okay. So then here, what we need is

00:34:02.415 --> 00:34:04.415
<v Speaker 0>just to expose these.

00:34:05.615 --> 00:34:07.535
<v Speaker 0>K. So let me just modify them here.

00:34:07.535 --> 00:34:09.614
<v Speaker 0>So is that my organization or my actual

00:34:09.614 --> 00:34:10.335
<v Speaker 0>username?

00:34:10.655 --> 00:34:12.175
<v Speaker 1>That's your actual username.

00:34:14.360 --> 00:34:17.480
<v Speaker 1>Then k. Yeah, we would need the

00:34:19.800 --> 00:34:21.080
<v Speaker 0>Rawkode.

00:34:21.080 --> 00:34:23.560
<v Speaker 0>Or you can just copy the

00:34:26.775 --> 00:34:29.494
<v Speaker 1>can you I'm not sure if it would

00:34:29.494 --> 00:34:31.094
<v Speaker 1>would work in this way.

00:34:31.975 --> 00:34:33.735
<v Speaker 1>Maybe we just need the,

00:34:34.375 --> 00:34:36.775
<v Speaker 1>the URL that gives that is given by

00:34:39.170 --> 00:34:39.970
<v Speaker 1>GitHub.

00:34:42.850 --> 00:34:46.290
<v Speaker 1>Oh, it's actually it's exactly this. Okay. Sorry.

00:34:46.290 --> 00:34:47.730
<v Speaker 1>Then it's is it?

00:34:48.770 --> 00:34:51.170
<v Speaker 1>Okay. I I always go for the HTTPS

00:34:51.170 --> 00:34:53.010
<v Speaker 1>version, so this is why I'm confused.

00:34:53.605 --> 00:34:54.405
<v Speaker 0>Alright.

00:34:55.685 --> 00:34:57.045
<v Speaker 1>Right. Yeah. Maybe we can go for the

00:34:57.045 --> 00:34:59.525
<v Speaker 1>HTTPS version. I think that is

00:35:00.965 --> 00:35:02.565
<v Speaker 1>actually the one that we

00:35:03.525 --> 00:35:04.325
<v Speaker 1>that we want.

00:35:09.130 --> 00:35:11.210
<v Speaker 0>I actually need a get token?

00:35:12.250 --> 00:35:14.490
<v Speaker 1>Yeah. And we might need this token, but

00:35:14.490 --> 00:35:16.250
<v Speaker 1>I'm not sure if we can share it

00:35:16.250 --> 00:35:17.770
<v Speaker 1>here on the screen or you would go

00:35:17.770 --> 00:35:20.650
<v Speaker 1>for a different display or monitor where where

00:35:20.650 --> 00:35:23.615
<v Speaker 1>you're going to set this. Yeah. I'm just

00:35:23.615 --> 00:35:25.375
<v Speaker 0>getting one over here.

00:35:25.694 --> 00:35:28.415
<v Speaker 0>So let me get token,

00:35:28.734 --> 00:35:29.935
<v Speaker 0>personal access.

00:35:31.375 --> 00:35:33.215
<v Speaker 0>Any specific

00:35:34.015 --> 00:35:35.055
<v Speaker 0>permissions it means?

00:35:36.440 --> 00:35:39.319
<v Speaker 1>Read write project will be just fine. So

00:35:39.319 --> 00:35:41.160
<v Speaker 1>I think that's the first two permissions.

00:35:43.720 --> 00:35:44.599
<v Speaker 0>K.

00:35:47.079 --> 00:35:50.200
<v Speaker 0>Let's see what happens then once that

00:35:53.435 --> 00:35:54.395
<v Speaker 0>done.

00:35:55.755 --> 00:35:58.075
<v Speaker 0>So what I'm gonna do is just move

00:35:58.075 --> 00:35:58.875
<v Speaker 0>this over here.

00:36:05.290 --> 00:36:06.330
<v Speaker 0>And that

00:36:08.650 --> 00:36:10.329
<v Speaker 0>and all the secrets on the stream is

00:36:10.329 --> 00:36:12.890
<v Speaker 0>always the fun bit. Okay. So

00:36:13.690 --> 00:36:15.290
<v Speaker 0>I can pull this back

00:36:16.809 --> 00:36:18.569
<v Speaker 0>and pull my terminal back.

00:36:20.465 --> 00:36:22.305
<v Speaker 1>Yeah. I I should have warned you warned

00:36:22.305 --> 00:36:23.585
<v Speaker 1>you earlier, but

00:36:23.985 --> 00:36:25.265
<v Speaker 1>I totally forgot.

00:36:26.145 --> 00:36:29.425
<v Speaker 0>Oh, yes. I need to export that variable.

00:36:29.425 --> 00:36:30.065
<v Speaker 0>So

00:36:30.625 --> 00:36:31.505
<v Speaker 0>get token.

00:36:34.940 --> 00:36:36.700
<v Speaker 0>See

00:36:43.019 --> 00:36:43.500
<v Speaker 0>what happens.

00:36:47.515 --> 00:36:48.395
<v Speaker 0>And

00:36:48.395 --> 00:36:49.355
<v Speaker 0>the

00:36:49.435 --> 00:36:50.235
<v Speaker 0>documentation

00:36:50.235 --> 00:36:51.835
<v Speaker 0>just wants me to run

00:36:52.075 --> 00:36:53.115
<v Speaker 0>this command

00:36:53.515 --> 00:36:53.835
<v Speaker 0>here.

00:37:00.789 --> 00:37:02.310
<v Speaker 0>Just didn't copy.

00:37:11.430 --> 00:37:12.710
<v Speaker 0>Alright. So we get.

00:37:14.965 --> 00:37:16.484
<v Speaker 0>So what's going on here? Do you wanna

00:37:16.484 --> 00:37:17.925
<v Speaker 0>fill this in a little bit?

00:37:18.565 --> 00:37:19.205
<v Speaker 1>So

00:37:19.525 --> 00:37:21.605
<v Speaker 1>what kpt will do is here, it will

00:37:21.605 --> 00:37:23.765
<v Speaker 1>start to create the project and it will

00:37:23.765 --> 00:37:25.925
<v Speaker 1>create different stages. And these stages will be

00:37:25.925 --> 00:37:26.805
<v Speaker 1>managed by branch.

00:37:27.240 --> 00:37:29.720
<v Speaker 1>So it is going to create the project

00:37:29.720 --> 00:37:30.680
<v Speaker 1>sock shop.

00:37:31.160 --> 00:37:32.280
<v Speaker 1>That also means

00:37:32.440 --> 00:37:35.800
<v Speaker 1>the folder in the git repository creating the

00:37:35.800 --> 00:37:38.120
<v Speaker 1>branches in the git repository, and it should

00:37:38.120 --> 00:37:40.280
<v Speaker 1>already be synced to your git upstream. So

00:37:40.280 --> 00:37:42.600
<v Speaker 1>it's always doing this

00:37:43.445 --> 00:37:44.885
<v Speaker 1>that it will sync it to a Git

00:37:44.885 --> 00:37:46.325
<v Speaker 1>upstream. So if you reload

00:37:46.965 --> 00:37:48.965
<v Speaker 1>it here, we can already see the shipyard

00:37:48.965 --> 00:37:49.685
<v Speaker 1>file,

00:37:49.845 --> 00:37:52.325
<v Speaker 1>and you will also see three different branches

00:37:52.325 --> 00:37:55.445
<v Speaker 1>for dev staging and production. So with this,

00:37:55.445 --> 00:37:58.130
<v Speaker 1>we have already created a, let's say, the

00:37:58.130 --> 00:38:00.530
<v Speaker 1>environment of a multistage pipeline,

00:38:00.690 --> 00:38:02.130
<v Speaker 1>dev staging production.

00:38:02.930 --> 00:38:04.690
<v Speaker 1>And, if we can take a look in

00:38:04.690 --> 00:38:06.050
<v Speaker 1>the shipyard file,

00:38:07.010 --> 00:38:08.050
<v Speaker 1>we will see

00:38:08.450 --> 00:38:10.530
<v Speaker 1>how this is configured.

00:38:11.005 --> 00:38:13.565
<v Speaker 1>So in our dev stage,

00:38:13.885 --> 00:38:16.045
<v Speaker 1>we do have a deployment strategy which is

00:38:16.045 --> 00:38:18.205
<v Speaker 1>direct, so no blue green deployments

00:38:18.525 --> 00:38:20.445
<v Speaker 1>for for our dev stage.

00:38:20.605 --> 00:38:23.005
<v Speaker 1>We just deploy directly into the dev stage,

00:38:23.005 --> 00:38:25.340
<v Speaker 1>and we execute some functional tests. That is

00:38:25.340 --> 00:38:28.220
<v Speaker 1>the instruction how this stage should be, should

00:38:28.220 --> 00:38:29.660
<v Speaker 1>be set up and is set up by

00:38:29.660 --> 00:38:31.660
<v Speaker 1>kptn. For staging,

00:38:32.220 --> 00:38:34.220
<v Speaker 1>we have a deployment strategy, which is a

00:38:34.220 --> 00:38:36.060
<v Speaker 1>blue green on the service level and the

00:38:36.060 --> 00:38:38.860
<v Speaker 1>test strategies performance tests. So the

00:38:39.505 --> 00:38:41.345
<v Speaker 1>test integrations,

00:38:41.425 --> 00:38:42.465
<v Speaker 1>they get the,

00:38:43.105 --> 00:38:46.145
<v Speaker 1>let's say, instructions to execute performance tests,

00:38:46.465 --> 00:38:49.265
<v Speaker 1>and an approval strategy is set to automatic

00:38:49.265 --> 00:38:51.505
<v Speaker 1>for for everything. That means

00:38:51.744 --> 00:38:54.410
<v Speaker 1>either or it doesn't really matter if the

00:38:54.410 --> 00:38:56.569
<v Speaker 1>quality gate gives us a warning or a

00:38:56.569 --> 00:38:57.369
<v Speaker 1>full pass,

00:38:57.690 --> 00:39:01.609
<v Speaker 1>we promote it automatically into this stage. For

00:39:01.609 --> 00:39:02.410
<v Speaker 1>production,

00:39:02.410 --> 00:39:04.329
<v Speaker 1>the approval strategy is a little bit different.

00:39:04.329 --> 00:39:06.490
<v Speaker 1>If it's a full pass, we we deploy

00:39:06.490 --> 00:39:08.715
<v Speaker 1>it automatically into production. If we get a

00:39:08.715 --> 00:39:11.355
<v Speaker 1>warning, we would have to click on or

00:39:11.355 --> 00:39:13.755
<v Speaker 1>approve it manually either by clicking in the

00:39:13.755 --> 00:39:15.835
<v Speaker 1>captain's bridge or doing this with the Slack

00:39:15.835 --> 00:39:18.395
<v Speaker 1>bot or with an API call. Just approving

00:39:18.395 --> 00:39:20.075
<v Speaker 1>this, you can have an integration with other

00:39:20.075 --> 00:39:22.730
<v Speaker 1>tools as well. And, we also have a

00:39:22.730 --> 00:39:24.810
<v Speaker 1>remediation strategy for production.

00:39:25.050 --> 00:39:28.250
<v Speaker 1>So that means if there's any issue,

00:39:28.970 --> 00:39:30.570
<v Speaker 1>any alert sent from,

00:39:30.970 --> 00:39:34.170
<v Speaker 1>let's say, the Prometheus alert manager in production,

00:39:34.170 --> 00:39:35.849
<v Speaker 1>kpt will trigger a remediation.

00:39:36.245 --> 00:39:39.285
<v Speaker 1>For other stages, kpt won't trigger remediation.

00:39:39.445 --> 00:39:42.005
<v Speaker 1>This is this is basically everything that we

00:39:42.005 --> 00:39:42.885
<v Speaker 1>have defined

00:39:42.965 --> 00:39:45.365
<v Speaker 1>in this, and this is how kpt will

00:39:45.365 --> 00:39:47.365
<v Speaker 1>behave in these different stages.

00:39:48.420 --> 00:39:49.940
<v Speaker 0>Alright. That makes sense.

00:39:51.460 --> 00:39:53.780
<v Speaker 0>Okay. So we have a a a question

00:39:53.780 --> 00:39:55.619
<v Speaker 0>as well, which we can tackle just now

00:39:55.619 --> 00:39:57.860
<v Speaker 0>before we move on. Is asking,

00:39:58.099 --> 00:40:01.220
<v Speaker 0>does captain expose any metrics that can be

00:40:01.220 --> 00:40:01.700
<v Speaker 0>consumed?

00:40:05.085 --> 00:40:08.685
<v Speaker 1>The kpten directly does not, right now expose

00:40:08.685 --> 00:40:11.885
<v Speaker 1>its own metrics, how the of the performance

00:40:11.885 --> 00:40:14.285
<v Speaker 1>of kpten, if if this is the questions.

00:40:15.325 --> 00:40:16.205
<v Speaker 1>Kpten,

00:40:16.765 --> 00:40:17.645
<v Speaker 1>can collect

00:40:18.050 --> 00:40:20.610
<v Speaker 1>different metrics from SLI providers.

00:40:21.170 --> 00:40:23.730
<v Speaker 1>And which metrics like a response

00:40:23.730 --> 00:40:26.770
<v Speaker 1>time or total amount of calls or what

00:40:26.930 --> 00:40:29.170
<v Speaker 1>whatever you you can think of, these are

00:40:29.170 --> 00:40:30.875
<v Speaker 1>just defined in the SLI file. So you

00:40:30.875 --> 00:40:32.474
<v Speaker 1>would just map it between the name of

00:40:32.474 --> 00:40:35.035
<v Speaker 1>the SLI and the prompt query, for example,

00:40:35.035 --> 00:40:37.194
<v Speaker 1>or if you're using other monitoring tools, the

00:40:37.194 --> 00:40:39.194
<v Speaker 1>name of the SLI and, let's say, an

00:40:39.194 --> 00:40:41.515
<v Speaker 1>API call how to to fetch this query.

00:40:42.940 --> 00:40:44.220
<v Speaker 0>Okay. Thank you.

00:40:44.620 --> 00:40:46.860
<v Speaker 0>So let me just make sure I understand

00:40:46.860 --> 00:40:48.620
<v Speaker 0>what's happened right now. So

00:40:49.420 --> 00:40:51.740
<v Speaker 0>we have this repository created.

00:40:52.380 --> 00:40:53.180
<v Speaker 0>I mean,

00:40:53.500 --> 00:40:55.100
<v Speaker 0>if I click on dev here,

00:40:55.685 --> 00:40:58.244
<v Speaker 0>we just got some metadata. So nothing's really

00:40:58.244 --> 00:41:00.565
<v Speaker 0>being deployed to our cluster yet.

00:41:00.565 --> 00:41:01.045
<v Speaker 0>Right?

00:41:01.525 --> 00:41:04.005
<v Speaker 1>Exactly. We just defined that there will there

00:41:04.005 --> 00:41:06.085
<v Speaker 1>is a project SOC shop, but we have

00:41:06.085 --> 00:41:08.885
<v Speaker 1>not onboarded the microservices yet. We can think

00:41:08.885 --> 00:41:11.540
<v Speaker 1>of, we have defined the the whole application

00:41:11.540 --> 00:41:14.020
<v Speaker 1>that we have a a container for this

00:41:14.020 --> 00:41:14.740
<v Speaker 1>application,

00:41:15.460 --> 00:41:18.340
<v Speaker 1>and a logical container, let's say. And now

00:41:18.340 --> 00:41:20.580
<v Speaker 1>we will onboard services.

00:41:20.580 --> 00:41:22.660
<v Speaker 1>So we could onboard a front end, a

00:41:22.660 --> 00:41:23.940
<v Speaker 1>database, a back end.

00:41:24.975 --> 00:41:26.735
<v Speaker 1>And what we will do is

00:41:27.695 --> 00:41:30.655
<v Speaker 1>the demo application comes with two microservices.

00:41:30.815 --> 00:41:32.895
<v Speaker 1>One is the database. It's not really a

00:41:32.895 --> 00:41:34.655
<v Speaker 1>microservice. It's a database, and the other one

00:41:34.655 --> 00:41:35.855
<v Speaker 1>is the microservice.

00:41:36.495 --> 00:41:40.630
<v Speaker 1>And we will then do different deployments with

00:41:40.630 --> 00:41:42.150
<v Speaker 1>with this demo application.

00:41:43.750 --> 00:41:46.950
<v Speaker 0>Okay. Let's jump back over to our tutorials.

00:41:46.950 --> 00:41:47.510
<v Speaker 0>So

00:41:48.230 --> 00:41:49.990
<v Speaker 0>we have

00:41:52.015 --> 00:41:55.135
<v Speaker 0>oh, that's alternatively. Okay. Yes. Okay. So if

00:41:55.135 --> 00:41:56.895
<v Speaker 1>you don't want to have this Git upstream,

00:41:56.895 --> 00:41:58.575
<v Speaker 1>if you just want to do it locally,

00:41:58.575 --> 00:42:00.975
<v Speaker 1>then it's totally fine. It's also working.

00:42:01.855 --> 00:42:03.855
<v Speaker 0>Okay. So now we can take a look

00:42:03.855 --> 00:42:06.880
<v Speaker 0>at the bridge. This one this one will

00:42:06.880 --> 00:42:10.080
<v Speaker 1>print an a token for the bridge since

00:42:10.080 --> 00:42:12.080
<v Speaker 1>it's just a demo environment. If you're fine

00:42:12.080 --> 00:42:13.440
<v Speaker 1>with the token to be exposed on the

00:42:13.440 --> 00:42:15.600
<v Speaker 1>stream, if you delete the installation afterwards, it's

00:42:15.600 --> 00:42:16.720
<v Speaker 1>totally fine. But just

00:42:19.994 --> 00:42:21.755
<v Speaker 0>Okay. Yeah. That's fine.

00:42:21.994 --> 00:42:23.994
<v Speaker 0>And then we're going to

00:42:26.635 --> 00:42:27.994
<v Speaker 0>render this.

00:42:28.234 --> 00:42:30.395
<v Speaker 0>What's that doing? Let's see. Echo,

00:42:30.474 --> 00:42:32.075
<v Speaker 0>get ingress. Alright. Okay.

00:42:33.620 --> 00:42:35.380
<v Speaker 0>So this is gonna print out a URL,

00:42:35.380 --> 00:42:37.460
<v Speaker 0>which we can click on this. Of course,

00:42:37.460 --> 00:42:38.820
<v Speaker 0>it went to the wrong tab.

00:42:42.740 --> 00:42:45.140
<v Speaker 1>Yeah. Just copy that. There we go.

00:42:46.674 --> 00:42:49.474
<v Speaker 0>And now I need our password here.

00:42:49.635 --> 00:42:52.994
<v Speaker 0>So let's see. And and go.

00:42:54.434 --> 00:42:55.075
<v Speaker 0>Yeah.

00:42:56.595 --> 00:42:59.154
<v Speaker 0>Alright. So this is the user interface.

00:43:00.500 --> 00:43:01.700
<v Speaker 0>I can select

00:43:02.500 --> 00:43:05.540
<v Speaker 0>application. I can see my three environments.

00:43:06.819 --> 00:43:09.780
<v Speaker 0>Not much going on just yet. Services and

00:43:09.780 --> 00:43:11.140
<v Speaker 0>okay. Some integrations.

00:43:11.220 --> 00:43:11.619
<v Speaker 0>Cool.

00:43:13.155 --> 00:43:14.035
<v Speaker 0>Let's

00:43:14.035 --> 00:43:15.475
<v Speaker 0>see what's next.

00:43:17.555 --> 00:43:20.115
<v Speaker 0>Now we have to onboard our first service.

00:43:20.995 --> 00:43:21.795
<v Speaker 1>Exactly.

00:43:22.515 --> 00:43:24.515
<v Speaker 1>And in the tutorial,

00:43:24.515 --> 00:43:26.830
<v Speaker 1>we have two services that we want to

00:43:26.830 --> 00:43:29.790
<v Speaker 1>onboard. The first one is the cart. It's

00:43:29.790 --> 00:43:31.790
<v Speaker 1>actually the application of the shopping cart.

00:43:32.190 --> 00:43:34.830
<v Speaker 1>And in the in step two,

00:43:35.150 --> 00:43:37.550
<v Speaker 1>what we also do directly here is that

00:43:37.550 --> 00:43:39.470
<v Speaker 1>we add test instructions

00:43:39.895 --> 00:43:43.175
<v Speaker 1>for, our different stages. So for dev, we

00:43:43.175 --> 00:43:45.655
<v Speaker 1>will test, we will add test instructions for

00:43:45.655 --> 00:43:47.895
<v Speaker 1>Chimida, which is just a functional test, basically

00:43:47.895 --> 00:43:49.655
<v Speaker 1>checking if the API is available,

00:43:50.215 --> 00:43:51.895
<v Speaker 1>of the cars microservice.

00:43:52.190 --> 00:43:54.190
<v Speaker 1>And for the performance test, it runs a

00:43:54.190 --> 00:43:56.350
<v Speaker 1>couple of thousand requests against the service. So

00:43:56.350 --> 00:43:58.430
<v Speaker 1>this is everything that we can see here,

00:43:58.910 --> 00:43:59.630
<v Speaker 1>is

00:44:00.430 --> 00:44:01.710
<v Speaker 1>creating the application,

00:44:02.990 --> 00:44:06.110
<v Speaker 1>and onboarding actually the Helm chart. So this

00:44:06.285 --> 00:44:08.845
<v Speaker 1>command will also upload the Helm chart that

00:44:08.845 --> 00:44:10.125
<v Speaker 1>lives in the carts

00:44:10.605 --> 00:44:11.405
<v Speaker 1>folder.

00:44:12.045 --> 00:44:14.845
<v Speaker 1>We'll upload this to the git repository.

00:44:15.484 --> 00:44:16.685
<v Speaker 0>Is

00:44:16.845 --> 00:44:18.365
<v Speaker 0>that a table, carts?

00:44:19.500 --> 00:44:20.460
<v Speaker 1>No.

00:44:20.460 --> 00:44:22.140
<v Speaker 1>That's actually correct. It's a it's a little

00:44:22.140 --> 00:44:23.500
<v Speaker 1>misleading

00:44:24.780 --> 00:44:27.340
<v Speaker 1>because it's the carts. It's a cart chart.

00:44:28.220 --> 00:44:29.980
<v Speaker 1>And it's a chart of the cart.

00:44:31.745 --> 00:44:35.025
<v Speaker 0>Alright. So let's onboard that then. Let's pop

00:44:35.025 --> 00:44:37.025
<v Speaker 0>over here after onboarding.

00:44:37.025 --> 00:44:39.025
<v Speaker 0>Okay. Yeah. Let's run that. Give

00:44:42.625 --> 00:44:43.265
<v Speaker 0>that a second.

00:44:48.000 --> 00:44:49.760
<v Speaker 1>And the cool thing here that you just

00:44:49.760 --> 00:44:51.519
<v Speaker 1>have to define your helm chart once, and

00:44:51.519 --> 00:44:54.079
<v Speaker 1>then you basically pass it on to captain.

00:44:54.079 --> 00:44:55.760
<v Speaker 1>And from this point, you don't have to

00:44:55.760 --> 00:44:57.680
<v Speaker 1>touch the helm chart. You can do most

00:44:57.680 --> 00:44:59.519
<v Speaker 1>of the things with, cloud events or with

00:44:59.519 --> 00:45:01.055
<v Speaker 1>the captain CLI,

00:45:01.454 --> 00:45:02.095
<v Speaker 1>and,

00:45:02.335 --> 00:45:04.815
<v Speaker 1>you don't have to, to maintain

00:45:05.775 --> 00:45:06.095
<v Speaker 1>it

00:45:06.575 --> 00:45:09.214
<v Speaker 1>they they will be managed in the captain

00:45:09.214 --> 00:45:10.415
<v Speaker 1>git repository,

00:45:10.734 --> 00:45:13.610
<v Speaker 1>and depending on the stage.

00:45:13.930 --> 00:45:17.050
<v Speaker 1>So what we've seen is for the staging

00:45:17.050 --> 00:45:19.450
<v Speaker 1>and the production environment, we have defined a

00:45:19.450 --> 00:45:20.890
<v Speaker 1>blue green deployment.

00:45:21.050 --> 00:45:22.330
<v Speaker 1>So there will be different

00:45:25.105 --> 00:45:28.625
<v Speaker 1>manifests Kubernetes manifests created for these different stages

00:45:28.625 --> 00:45:31.105
<v Speaker 1>because for blue green, we need virtual services

00:45:31.105 --> 00:45:32.225
<v Speaker 1>for Istio.

00:45:32.385 --> 00:45:34.625
<v Speaker 1>For direct deployments, we don't need this. We

00:45:34.625 --> 00:45:37.105
<v Speaker 1>can go with the standard Kubernetes

00:45:37.860 --> 00:45:38.740
<v Speaker 1>services.

00:45:38.900 --> 00:45:40.740
<v Speaker 1>So this is just how it's

00:45:41.620 --> 00:45:42.500
<v Speaker 1>how it's done.

00:45:44.020 --> 00:45:44.740
<v Speaker 1>Actually,

00:45:45.380 --> 00:45:47.140
<v Speaker 1>it should return

00:45:47.140 --> 00:45:48.500
<v Speaker 1>a little bit faster.

00:45:48.580 --> 00:45:49.860
<v Speaker 1>Maybe that's the

00:45:51.415 --> 00:45:54.135
<v Speaker 1>the git sync that it might take a

00:45:54.135 --> 00:45:55.015
<v Speaker 1>while, but,

00:45:55.335 --> 00:45:56.455
<v Speaker 1>yeah, we'll see.

00:45:57.174 --> 00:45:59.015
<v Speaker 0>So should we see anything

00:45:59.335 --> 00:45:59.975
<v Speaker 0>here?

00:46:00.375 --> 00:46:01.734
<v Speaker 0>Oh, yeah. It's had a push list a

00:46:01.734 --> 00:46:02.775
<v Speaker 0>minute ago. Okay.

00:46:03.095 --> 00:46:05.400
<v Speaker 0>So we can see that it's, yeah, it's

00:46:05.400 --> 00:46:07.320
<v Speaker 0>added all the chart stuff. Okay.

00:46:11.079 --> 00:46:11.319
<v Speaker 0>And

00:46:12.599 --> 00:46:13.400
<v Speaker 0>It's getting there.

00:46:21.165 --> 00:46:24.285
<v Speaker 0>Inject an STL into the thing.

00:46:28.365 --> 00:46:31.405
<v Speaker 0>I copy paste. It's a bit temperamental today.

00:46:31.405 --> 00:46:33.640
<v Speaker 0>Let's just try again.

00:46:41.800 --> 00:46:42.520
<v Speaker 0>What

00:46:42.760 --> 00:46:44.200
<v Speaker 0>does it mean by resource

00:46:44.200 --> 00:46:44.600
<v Speaker 0>here?

00:46:46.085 --> 00:46:48.885
<v Speaker 1>It means it will upload the basic check

00:46:48.885 --> 00:46:50.165
<v Speaker 1>dot JMX.

00:46:50.645 --> 00:46:53.125
<v Speaker 1>It's it's an instruction to

00:46:53.924 --> 00:46:55.365
<v Speaker 1>for a JMeter

00:46:55.365 --> 00:46:56.405
<v Speaker 1>execution,

00:46:56.885 --> 00:46:59.960
<v Speaker 1>and it will just add this resource to

00:46:59.960 --> 00:47:01.320
<v Speaker 1>the JMeter folder

00:47:01.400 --> 00:47:04.359
<v Speaker 1>for the service carts, so for the shopping

00:47:04.359 --> 00:47:05.080
<v Speaker 1>cart

00:47:05.400 --> 00:47:07.640
<v Speaker 1>in our dev stage.

00:47:07.720 --> 00:47:10.280
<v Speaker 1>And for staging, you've also just uploaded

00:47:10.280 --> 00:47:12.040
<v Speaker 1>a file. So if you go, for example,

00:47:12.040 --> 00:47:12.680
<v Speaker 1>yeah, in dev,

00:47:13.565 --> 00:47:16.525
<v Speaker 1>we will see in carts two folders,

00:47:16.765 --> 00:47:19.244
<v Speaker 1>one for helm and one for already.

00:47:19.484 --> 00:47:21.565
<v Speaker 1>And here, we just have the instructions which

00:47:21.565 --> 00:47:22.765
<v Speaker 1>tests to execute.

00:47:23.724 --> 00:47:26.285
<v Speaker 1>Is one service that is when you install

00:47:26.285 --> 00:47:28.045
<v Speaker 1>kpten with the continuous delivery

00:47:28.370 --> 00:47:31.090
<v Speaker 1>use case, g meter is installed with kpten

00:47:31.090 --> 00:47:33.010
<v Speaker 1>by default. You can, of course, remove it

00:47:33.010 --> 00:47:33.730
<v Speaker 1>afterwards,

00:47:33.810 --> 00:47:35.570
<v Speaker 1>but it's just one of those what we

00:47:35.570 --> 00:47:37.570
<v Speaker 1>call battery included services

00:47:37.970 --> 00:47:41.090
<v Speaker 1>since we see it's it's widely adopted that

00:47:41.090 --> 00:47:45.215
<v Speaker 1>organizations have g meter files and use JMeter

00:47:45.215 --> 00:47:48.415
<v Speaker 1>for their performance and load tests. And so

00:47:48.415 --> 00:47:50.575
<v Speaker 1>with this, you can just add the JMeter

00:47:50.575 --> 00:47:53.535
<v Speaker 1>file, and the JMeter service will then pick

00:47:53.535 --> 00:47:55.935
<v Speaker 1>up those files and will execute them.

00:47:56.790 --> 00:47:58.310
<v Speaker 1>We'll see this just in in in a

00:47:58.310 --> 00:47:58.870
<v Speaker 1>second.

00:47:59.430 --> 00:48:00.070
<v Speaker 0>So,

00:48:00.230 --> 00:48:01.430
<v Speaker 0>you know, if

00:48:01.670 --> 00:48:03.350
<v Speaker 0>I wanted to, could I

00:48:04.070 --> 00:48:06.630
<v Speaker 0>omit the captain at resource command and just

00:48:06.630 --> 00:48:08.870
<v Speaker 0>add the get add and push myself?

00:48:08.950 --> 00:48:10.310
<v Speaker 0>Would that still work, or is there gonna

00:48:10.310 --> 00:48:11.590
<v Speaker 0>be something missing from that?

00:48:14.425 --> 00:48:16.105
<v Speaker 1>You could actually

00:48:16.905 --> 00:48:19.225
<v Speaker 1>yeah. You can also do it with the

00:48:19.225 --> 00:48:21.065
<v Speaker 1>git add and git push.

00:48:21.705 --> 00:48:22.425
<v Speaker 1>That works

00:48:22.665 --> 00:48:25.545
<v Speaker 1>since kpten always

00:48:24.680 --> 00:48:27.240
<v Speaker 1>first takes a look at the remote branch,

00:48:27.320 --> 00:48:29.720
<v Speaker 1>syncs it to its internal git repository, and

00:48:29.720 --> 00:48:32.440
<v Speaker 1>then executes. So whenever there's new changes on

00:48:32.440 --> 00:48:33.560
<v Speaker 1>the remote branch,

00:48:34.200 --> 00:48:34.920
<v Speaker 1>it's

00:48:35.080 --> 00:48:36.120
<v Speaker 1>kptn will pick them up.

00:48:37.685 --> 00:48:40.005
<v Speaker 0>K. So now we're gonna onboard

00:48:40.005 --> 00:48:41.605
<v Speaker 0>our database.

00:48:41.605 --> 00:48:42.165
<v Speaker 0>Right?

00:48:43.205 --> 00:48:44.085
<v Speaker 0>Power safety.

00:48:45.285 --> 00:48:46.245
<v Speaker 1>For this,

00:48:46.485 --> 00:48:48.085
<v Speaker 1>we can also see it here as the

00:48:48.085 --> 00:48:50.725
<v Speaker 1>last parameter in the in in this line

00:48:50.820 --> 00:48:53.300
<v Speaker 1>that we are overriding here the deployment strategy.

00:48:53.300 --> 00:48:55.620
<v Speaker 1>So we have defined the deployment strategy

00:48:55.940 --> 00:48:57.620
<v Speaker 1>on the level of the project.

00:48:58.660 --> 00:48:59.860
<v Speaker 1>We defined for

00:49:00.340 --> 00:49:03.300
<v Speaker 1>it's in-depth, it's direct. In staging, it's blue

00:49:03.300 --> 00:49:04.740
<v Speaker 1>green, and in production,

00:49:04.820 --> 00:49:06.260
<v Speaker 1>it's also blue green.

00:49:07.375 --> 00:49:08.015
<v Speaker 1>For

00:49:08.175 --> 00:49:09.295
<v Speaker 1>the database,

00:49:09.295 --> 00:49:11.135
<v Speaker 1>we don't do blue green deployments in this

00:49:11.135 --> 00:49:12.735
<v Speaker 1>case, so we just go for

00:49:13.135 --> 00:49:14.895
<v Speaker 1>a direct deployment for the database.

00:49:15.215 --> 00:49:16.735
<v Speaker 1>We won't do a lot of deployments with

00:49:16.735 --> 00:49:18.815
<v Speaker 1>the database anyway, so it doesn't really

00:49:19.135 --> 00:49:19.535
<v Speaker 1>really matter.

00:49:20.640 --> 00:49:22.799
<v Speaker 0>Alright. Well, that finishes. Let's just tackle a

00:49:22.799 --> 00:49:25.039
<v Speaker 0>couple of questions we've received. So Bella has

00:49:25.039 --> 00:49:28.240
<v Speaker 0>asked, would kptim be suitable for deploying on

00:49:28.240 --> 00:49:29.599
<v Speaker 0>edge devices?

00:49:31.519 --> 00:49:33.040
<v Speaker 1>Yes.

00:49:33.839 --> 00:49:34.160
<v Speaker 1>So

00:49:36.355 --> 00:49:39.075
<v Speaker 1>it's if you have your

00:49:40.915 --> 00:49:42.835
<v Speaker 1>as I said, right now, kpten is doing

00:49:42.835 --> 00:49:45.235
<v Speaker 1>deployments on the same cluster where the kpten

00:49:45.235 --> 00:49:46.915
<v Speaker 1>control plane is also installed.

00:49:47.075 --> 00:49:48.675
<v Speaker 1>So I would not go right now for

00:49:48.675 --> 00:49:52.049
<v Speaker 1>edge devices here. But, with, the next version

00:49:52.049 --> 00:49:54.130
<v Speaker 1>of kpten, it's totally possible to do deployments

00:49:54.130 --> 00:49:56.769
<v Speaker 1>also to other clusters or to, to to

00:49:56.769 --> 00:49:57.730
<v Speaker 1>edge devices.

00:49:58.369 --> 00:50:00.050
<v Speaker 1>That's that's totally possible.

00:50:01.569 --> 00:50:01.890
<v Speaker 0>Yep.

00:50:03.385 --> 00:50:05.305
<v Speaker 0>Okay. I mean, I guess you could have,

00:50:05.545 --> 00:50:07.865
<v Speaker 0>like, depending on the edge setup. But if

00:50:07.865 --> 00:50:10.825
<v Speaker 0>those edge edge devices are all part of

00:50:10.825 --> 00:50:13.385
<v Speaker 0>Kubernetes cluster at a control plane centrally managed,

00:50:13.385 --> 00:50:14.985
<v Speaker 0>I mean, captain could also just run there

00:50:14.985 --> 00:50:17.465
<v Speaker 0>and still do deployment to those nodes even

00:50:17.465 --> 00:50:19.450
<v Speaker 0>though they're distributed, I would imagine. And you

00:50:19.450 --> 00:50:21.210
<v Speaker 0>also mentioned the captain runs on k c

00:50:21.210 --> 00:50:22.810
<v Speaker 0>s as a start of the stream, which

00:50:22.810 --> 00:50:24.170
<v Speaker 0>I guess may be a good fit for

00:50:24.170 --> 00:50:25.770
<v Speaker 0>those edge scenarios as well.

00:50:26.810 --> 00:50:28.250
<v Speaker 0>Okay. One more question.

00:50:28.650 --> 00:50:30.890
<v Speaker 0>Some pass is asking, is the ingress running

00:50:30.890 --> 00:50:33.130
<v Speaker 0>on the local host for the captain dashboard?

00:50:35.775 --> 00:50:37.295
<v Speaker 0>Ingress is running

00:50:37.935 --> 00:50:40.095
<v Speaker 0>on our cluster Kubernetes cluster is the same

00:50:40.095 --> 00:50:41.295
<v Speaker 0>one as captain.

00:50:43.775 --> 00:50:45.055
<v Speaker 0>I don't know. Have you provided a few

00:50:45.135 --> 00:50:46.095
<v Speaker 0>I don't know how to answer that just

00:50:46.095 --> 00:50:47.295
<v Speaker 0>now. I'm not sure if you do, Jorgen,

00:50:47.295 --> 00:50:48.975
<v Speaker 0>but maybe some path you could provide a

00:50:48.975 --> 00:50:50.800
<v Speaker 0>few extra details there.

00:50:52.319 --> 00:50:53.040
<v Speaker 0>Okay.

00:50:53.359 --> 00:50:55.839
<v Speaker 0>We've onboarded our cache DB. So now it's

00:50:55.839 --> 00:50:57.599
<v Speaker 0>telling me, hey, go look at the UI.

00:50:57.599 --> 00:50:58.640
<v Speaker 0>Let's do that.

00:51:01.040 --> 00:51:03.200
<v Speaker 0>Alright. We can see we have two services.

00:51:05.295 --> 00:51:06.735
<v Speaker 0>Not deployed yet, though.

00:51:07.935 --> 00:51:09.135
<v Speaker 1>Exactly. So

00:51:09.775 --> 00:51:10.255
<v Speaker 1>it's

00:51:10.815 --> 00:51:13.375
<v Speaker 1>everything that we have done until this point

00:51:13.375 --> 00:51:15.295
<v Speaker 1>is basically a one time setup. So we

00:51:15.295 --> 00:51:17.775
<v Speaker 1>have created the project. We've onboarded our services.

00:51:18.130 --> 00:51:20.450
<v Speaker 1>We've not yet deployed them, but they already

00:51:20.450 --> 00:51:23.650
<v Speaker 1>know which tests they have to execute once

00:51:23.650 --> 00:51:26.610
<v Speaker 1>we deploy them. They know if they

00:51:27.010 --> 00:51:29.650
<v Speaker 1>should be deployed in a blue green fashion

00:51:29.650 --> 00:51:32.290
<v Speaker 1>or if remediation should be executed for them.

00:51:32.475 --> 00:51:35.035
<v Speaker 1>So we have already provided all these instructions.

00:51:35.035 --> 00:51:37.115
<v Speaker 1>And in the next part, we now

00:51:37.275 --> 00:51:38.155
<v Speaker 1>deploy

00:51:38.475 --> 00:51:40.155
<v Speaker 1>the carts database

00:51:40.155 --> 00:51:42.235
<v Speaker 1>and the carts microservice.

00:51:43.595 --> 00:51:45.115
<v Speaker 1>So in the in the first part, we

00:51:45.115 --> 00:51:46.315
<v Speaker 1>deploy the the database.

00:51:47.570 --> 00:51:50.130
<v Speaker 1>And here, we can also see a little

00:51:50.130 --> 00:51:50.850
<v Speaker 1>bit of

00:51:51.650 --> 00:51:52.690
<v Speaker 1>the kptn

00:51:53.170 --> 00:51:54.210
<v Speaker 1>insights

00:51:54.690 --> 00:51:56.930
<v Speaker 1>and and details because we call it captain

00:51:56.930 --> 00:52:00.050
<v Speaker 1>sent event new artifact. That's a very

00:52:00.050 --> 00:52:03.404
<v Speaker 1>strong hint that kptn is event based. It's

00:52:03.404 --> 00:52:05.805
<v Speaker 1>not an operator living in a Kubernetes cluster

00:52:05.805 --> 00:52:08.765
<v Speaker 1>and and and doing things and looking for

00:52:08.765 --> 00:52:10.685
<v Speaker 1>changes on the Git repository,

00:52:11.164 --> 00:52:13.484
<v Speaker 1>but it's really an it's really event based.

00:52:13.484 --> 00:52:14.924
<v Speaker 1>So every time there is a new event,

00:52:15.210 --> 00:52:17.210
<v Speaker 1>captain will act upon this event.

00:52:17.530 --> 00:52:19.450
<v Speaker 1>And you send these events as a as

00:52:19.450 --> 00:52:21.690
<v Speaker 1>a as a cloud event to the captain

00:52:21.690 --> 00:52:24.010
<v Speaker 1>control plane. So is this something I would

00:52:24.010 --> 00:52:26.810
<v Speaker 0>use with Jenkins or GitHub actions? Every time

00:52:26.810 --> 00:52:28.570
<v Speaker 0>I have a successful build, I would maybe

00:52:28.570 --> 00:52:30.330
<v Speaker 0>send a captain event there.

00:52:31.345 --> 00:52:33.185
<v Speaker 1>Exactly. That's exactly what,

00:52:33.505 --> 00:52:35.025
<v Speaker 1>people that are using captain,

00:52:35.185 --> 00:52:36.305
<v Speaker 1>are doing.

00:52:37.265 --> 00:52:40.145
<v Speaker 1>Once you have a a container image,

00:52:40.545 --> 00:52:42.065
<v Speaker 1>then you trigger captain.

00:52:43.905 --> 00:52:45.985
<v Speaker 0>K. Let's just get both of these going

00:52:45.985 --> 00:52:46.305
<v Speaker 0>then.

00:52:52.830 --> 00:52:56.190
<v Speaker 0>Well, we've told that that the CartsDB service

00:52:57.550 --> 00:52:59.550
<v Speaker 0>has an image. So it's just gonna pull

00:52:59.550 --> 00:53:00.830
<v Speaker 0>it from the Docker Hub.

00:53:04.625 --> 00:53:07.265
<v Speaker 0>So that's just very synchronous right now with

00:53:07.265 --> 00:53:08.785
<v Speaker 0>the kpt and send event. Is there a

00:53:08.785 --> 00:53:09.985
<v Speaker 0>way I can just say send the event

00:53:09.985 --> 00:53:11.905
<v Speaker 0>and don't get me any feedback? Like, just,

00:53:11.905 --> 00:53:13.185
<v Speaker 0>you know, go and do it?

00:53:14.300 --> 00:53:16.300
<v Speaker 1>That's basically what what you will be doing

00:53:16.300 --> 00:53:17.580
<v Speaker 1>with the API.

00:53:17.820 --> 00:53:19.740
<v Speaker 1>The API will just respond

00:53:19.820 --> 00:53:21.420
<v Speaker 1>200 if the

00:53:22.300 --> 00:53:24.300
<v Speaker 1>the cloud event is okay.

00:53:25.420 --> 00:53:28.220
<v Speaker 1>This one is always opening up the the

00:53:28.220 --> 00:53:31.405
<v Speaker 1>WebSocket. Can also omit the WebSocket. It's I

00:53:31.405 --> 00:53:33.245
<v Speaker 1>think it's dash dash no

00:53:34.285 --> 00:53:36.525
<v Speaker 1>WebSocket or suppress WebSocket.

00:53:36.765 --> 00:53:38.605
<v Speaker 1>If you go to the kptn help,

00:53:39.165 --> 00:53:41.325
<v Speaker 1>then you you you will find it.

00:53:42.925 --> 00:53:44.125
<v Speaker 0>Press WebSocket. Okay.

00:53:46.180 --> 00:53:48.340
<v Speaker 1>Suppress WebSocket. Yeah. So

00:53:48.580 --> 00:53:51.060
<v Speaker 1>then it won't do the

00:53:52.260 --> 00:53:53.940
<v Speaker 1>the WebSocket communication.

00:53:54.420 --> 00:53:57.860
<v Speaker 1>And oh, it says unknown flag project. No.

00:53:57.860 --> 00:53:58.900
<v Speaker 0>This is a global flag.

00:54:00.125 --> 00:54:01.725
<v Speaker 0>Let me move that.

00:54:05.005 --> 00:54:05.645
<v Speaker 1>Oh, yeah.

00:54:13.180 --> 00:54:15.580
<v Speaker 0>I copy it wrong? No.

00:54:16.380 --> 00:54:17.580
<v Speaker 1>I think it looks good.

00:54:17.820 --> 00:54:19.580
<v Speaker 1>Maybe we can just put the suppressed WebSocket

00:54:19.580 --> 00:54:20.700
<v Speaker 1>at the very end.

00:54:22.460 --> 00:54:24.380
<v Speaker 0>Maybe Is this a COBRA application?

00:54:24.780 --> 00:54:25.180
<v Speaker 1>Yeah.

00:54:27.105 --> 00:54:28.945
<v Speaker 0>It's always weird.

00:54:28.945 --> 00:54:31.905
<v Speaker 0>Oh, no. Let's just remove it. Oh, artifact

00:54:31.905 --> 00:54:34.385
<v Speaker 1>is is is wrong. Our artifact, it says

00:54:34.385 --> 00:54:34.945
<v Speaker 1>here.

00:54:37.265 --> 00:54:40.225
<v Speaker 0>Always my fault. Always always is my fault.

00:54:40.625 --> 00:54:42.599
<v Speaker 0>There we go. Artifact fact.

00:54:44.680 --> 00:54:46.440
<v Speaker 0>User error. Okay. And that was very quick.

00:54:46.440 --> 00:54:48.599
<v Speaker 0>So I should set the event by suppressing

00:54:48.599 --> 00:54:50.279
<v Speaker 0>the WebSocket. I'm saying just go to wherever

00:54:50.279 --> 00:54:51.799
<v Speaker 0>you have to do in the background. So

00:54:51.880 --> 00:54:54.519
<v Speaker 1>Exactly. And but what you always get is

00:54:54.519 --> 00:54:55.880
<v Speaker 1>the captain context ID.

00:54:56.475 --> 00:54:58.475
<v Speaker 1>And with this captain context ID, you can

00:54:58.475 --> 00:55:01.115
<v Speaker 1>always query the events that belong to this

00:55:01.115 --> 00:55:03.355
<v Speaker 1>captain context. So in this case,

00:55:03.835 --> 00:55:06.555
<v Speaker 1>kpt would start the deployment. It will now

00:55:06.555 --> 00:55:09.115
<v Speaker 1>do the deployment in the Kubernetes cluster.

00:55:09.275 --> 00:55:10.955
<v Speaker 1>It will trigger the tests.

00:55:11.410 --> 00:55:13.410
<v Speaker 1>It will do the evaluation after the tests

00:55:13.410 --> 00:55:15.330
<v Speaker 1>have been finished, and it will decide if

00:55:15.330 --> 00:55:17.810
<v Speaker 1>should if it should be promoted to the

00:55:17.810 --> 00:55:20.050
<v Speaker 1>next stage or if we or if it

00:55:20.050 --> 00:55:20.850
<v Speaker 1>should stop.

00:55:21.170 --> 00:55:23.330
<v Speaker 1>So everything is done now

00:55:23.490 --> 00:55:24.450
<v Speaker 1>starting from here.

00:55:25.674 --> 00:55:27.755
<v Speaker 1>And in the Captain's Bridge, you can follow

00:55:27.755 --> 00:55:30.075
<v Speaker 1>the the sequence of events.

00:55:32.315 --> 00:55:34.714
<v Speaker 1>And it will just this demo application

00:55:35.194 --> 00:55:37.355
<v Speaker 1>is I think it's a spring boot application.

00:55:37.355 --> 00:55:37.994
<v Speaker 1>It's not

00:55:38.750 --> 00:55:39.470
<v Speaker 1>tweaked,

00:55:39.869 --> 00:55:41.230
<v Speaker 1>let's say, in any way, so it will

00:55:41.230 --> 00:55:44.190
<v Speaker 1>just take a while to to be deployed.

00:55:45.069 --> 00:55:46.990
<v Speaker 1>Here, we should already see actually the cards

00:55:46.990 --> 00:55:47.790
<v Speaker 1>to be.

00:55:48.510 --> 00:55:51.470
<v Speaker 1>Yes. So cards to be already says it's

00:55:51.470 --> 00:55:53.069
<v Speaker 1>Mongo four two two,

00:55:54.725 --> 00:55:56.565
<v Speaker 1>and we also have the configuration

00:55:58.725 --> 00:56:01.285
<v Speaker 1>for the first service. Yeah. It's not yet

00:56:01.285 --> 00:56:04.085
<v Speaker 1>finished with deployment, but that's not the problem

00:56:04.085 --> 00:56:06.085
<v Speaker 1>of the of of kpten that it's slow

00:56:06.085 --> 00:56:08.325
<v Speaker 1>with deployment. It's just that the demo application

00:56:08.325 --> 00:56:11.510
<v Speaker 1>or this carts application just takes a while

00:56:11.510 --> 00:56:12.150
<v Speaker 1>for

00:56:13.590 --> 00:56:16.150
<v Speaker 1>to come up and the for the first

00:56:16.310 --> 00:56:17.990
<v Speaker 1>readiness probe to be finished.

00:56:19.750 --> 00:56:20.550
<v Speaker 0>Awesome.

00:56:20.550 --> 00:56:22.710
<v Speaker 0>Okay. So has given us a little bit

00:56:22.710 --> 00:56:24.924
<v Speaker 0>of extra detail on their question. So what

00:56:24.924 --> 00:56:27.165
<v Speaker 0>they're saying is when we ran captain configure

00:56:27.165 --> 00:56:28.845
<v Speaker 0>bridge output

00:56:28.845 --> 00:56:32.045
<v Speaker 0>as does that command create a public load

00:56:32.045 --> 00:56:32.925
<v Speaker 0>balancer?

00:56:34.605 --> 00:56:36.045
<v Speaker 0>I think I know the answer to this,

00:56:36.045 --> 00:56:37.405
<v Speaker 0>so you can feel free to correct me

00:56:37.405 --> 00:56:38.125
<v Speaker 0>if I'm wrong.

00:56:39.440 --> 00:56:40.720
<v Speaker 0>But I I don't think it does. I

00:56:40.720 --> 00:56:43.120
<v Speaker 0>think it's just querying the IP addresses from

00:56:43.120 --> 00:56:45.520
<v Speaker 0>the services inside the clustered. When we installed

00:56:45.520 --> 00:56:48.880
<v Speaker 0>STL, it deployed the STL gateway, which then

00:56:48.880 --> 00:56:51.735
<v Speaker 0>requested a load balancer from the provider. So

00:56:51.735 --> 00:56:53.575
<v Speaker 0>that that was all set up with STO.

00:56:53.575 --> 00:56:55.015
<v Speaker 0>There is no ingress set up as far

00:56:55.015 --> 00:56:56.135
<v Speaker 0>as I'm I know

00:56:56.855 --> 00:56:58.775
<v Speaker 0>with that command. Is that right?

00:56:59.895 --> 00:57:02.135
<v Speaker 1>Yes. So the ingress was really part of

00:57:02.135 --> 00:57:02.695
<v Speaker 1>the

00:57:03.335 --> 00:57:04.935
<v Speaker 1>of of of the STO part.

00:57:06.160 --> 00:57:09.040
<v Speaker 0>Yeah. K. It was. Cool. And the configure

00:57:09.040 --> 00:57:10.880
<v Speaker 0>bridge, think, was just getting us a a

00:57:10.880 --> 00:57:12.560
<v Speaker 0>URL that we can use. So

00:57:13.040 --> 00:57:15.520
<v Speaker 1>Exactly. And if you're not familiar with the

00:57:15.520 --> 00:57:16.640
<v Speaker 0>NetIO,

00:57:16.640 --> 00:57:17.200
<v Speaker 0>it's just

00:57:18.595 --> 00:57:19.795
<v Speaker 0>a free service

00:57:19.875 --> 00:57:20.835
<v Speaker 0>where

00:57:20.835 --> 00:57:23.395
<v Speaker 0>you can put any IP address in their

00:57:23.395 --> 00:57:24.835
<v Speaker 0>format. Like, you can see here, if I

00:57:24.835 --> 00:57:26.355
<v Speaker 0>let me submit on that a little bit.

00:57:26.355 --> 00:57:28.035
<v Speaker 0>Really cool when you don't wanna have to

00:57:28.035 --> 00:57:30.435
<v Speaker 0>deal with DNS records at all, and and

00:57:30.435 --> 00:57:32.035
<v Speaker 0>it just maps back to the IP address,

00:57:32.035 --> 00:57:33.635
<v Speaker 0>which is part of the actual domain name.

00:57:33.635 --> 00:57:34.355
<v Speaker 0>A really cool service.

00:57:35.770 --> 00:57:37.050
<v Speaker 0>Okay. So

00:57:37.609 --> 00:57:39.849
<v Speaker 0>let's see what's coming up next. This is

00:57:39.849 --> 00:57:41.849
<v Speaker 0>fifty eight minutes remaining. There must be quite

00:57:41.849 --> 00:57:43.130
<v Speaker 0>a lot in this tutorial.

00:57:43.849 --> 00:57:46.730
<v Speaker 1>Yeah. It is. It is. But actually, it's

00:57:46.730 --> 00:57:49.035
<v Speaker 1>just a a wild guess of this fifty

00:57:49.035 --> 00:57:51.435
<v Speaker 1>eight minutes, so we we can always be

00:57:51.435 --> 00:57:52.475
<v Speaker 1>a little bit faster.

00:57:52.875 --> 00:57:55.355
<v Speaker 1>But let's see if the it's already

00:57:55.755 --> 00:57:58.795
<v Speaker 1>in stock shop dev cards is still

00:57:59.195 --> 00:58:01.355
<v Speaker 0>We have something pending. So let's just take

00:58:01.355 --> 00:58:03.275
<v Speaker 0>a look at that and see if we've

00:58:03.275 --> 00:58:05.869
<v Speaker 0>had any sort of challenge.

00:58:08.029 --> 00:58:09.550
<v Speaker 0>Insufficient CPU.

00:58:09.789 --> 00:58:10.589
<v Speaker 1>Okay.

00:58:14.670 --> 00:58:15.230
<v Speaker 0>Okay.

00:58:18.724 --> 00:58:20.885
<v Speaker 0>We got six notes. I mean, that

00:58:22.164 --> 00:58:23.685
<v Speaker 0>it should be alright. I

00:58:24.884 --> 00:58:26.724
<v Speaker 1>think that's just a problem that the demo

00:58:26.724 --> 00:58:28.164
<v Speaker 1>application, we have not tweaked the

00:58:28.920 --> 00:58:32.680
<v Speaker 1>the resource request. So maybe it's just looking

00:58:33.240 --> 00:58:34.760
<v Speaker 1>for a little bit too much.

00:58:37.160 --> 00:58:39.400
<v Speaker 0>Alright. Let's take a look at our resources.

00:58:42.555 --> 00:58:44.235
<v Speaker 0>Okay. Let's just

00:58:46.075 --> 00:58:48.234
<v Speaker 0>that's the limit, and then this is the

00:58:48.234 --> 00:58:49.115
<v Speaker 0>request.

00:58:53.275 --> 00:58:54.875
<v Speaker 0>If I modify that resource.

00:58:56.640 --> 00:58:58.800
<v Speaker 1>Yeah. Actually, I think easiest is that we

00:58:58.800 --> 00:59:01.520
<v Speaker 1>modify this in the public repository

00:59:01.599 --> 00:59:03.520
<v Speaker 1>that we that we did the

00:59:03.920 --> 00:59:05.440
<v Speaker 1>that we set up in the beginning.

00:59:07.855 --> 00:59:10.255
<v Speaker 0>Ah, right. Right. Right. Right. Right. Okay. So

00:59:10.335 --> 00:59:11.935
<v Speaker 0>back and back Because that will be synced

00:59:11.935 --> 00:59:12.575
<v Speaker 1>anyway,

00:59:13.055 --> 00:59:15.135
<v Speaker 1>so we should be able to see this.

00:59:15.535 --> 00:59:16.895
<v Speaker 1>But it will give us a hard time

00:59:16.895 --> 00:59:18.975
<v Speaker 1>because the Helm chart

00:59:19.470 --> 00:59:22.110
<v Speaker 1>okay. He here here comes the the thing.

00:59:22.670 --> 00:59:24.830
<v Speaker 1>The Helm chart is now you have it

00:59:24.830 --> 00:59:27.550
<v Speaker 1>in-depth in staging and in production. So we

00:59:27.550 --> 00:59:28.670
<v Speaker 1>wouldn't change

00:59:28.910 --> 00:59:30.190
<v Speaker 1>it three times

00:59:30.910 --> 00:59:32.109
<v Speaker 1>because

00:59:32.255 --> 00:59:34.255
<v Speaker 1>kpten is taking this helm chart and putting

00:59:34.255 --> 00:59:35.695
<v Speaker 1>it for each stage,

00:59:35.855 --> 00:59:38.415
<v Speaker 1>replicating this helm chart so you can have

00:59:38.415 --> 00:59:41.775
<v Speaker 1>it basically managed by each stage. So we

00:59:41.775 --> 00:59:44.015
<v Speaker 1>can try to tweak it here a bit

00:59:44.175 --> 00:59:45.935
<v Speaker 1>and go down with the

00:59:46.940 --> 00:59:48.539
<v Speaker 0>Alright. I mean, we can just remove it.

00:59:48.539 --> 00:59:50.059
<v Speaker 0>Right? We can just say we don't really

00:59:50.059 --> 00:59:50.619
<v Speaker 0>care.

00:59:51.099 --> 00:59:51.820
<v Speaker 1>Yep.

00:59:54.059 --> 00:59:55.660
<v Speaker 0>Where is the save button?

00:59:56.700 --> 00:59:58.539
<v Speaker 0>I know I should enter a better commit

00:59:58.539 --> 00:59:59.180
<v Speaker 0>message,

00:59:59.660 --> 00:59:59.900
<v Speaker 0>oh, well.

01:00:01.765 --> 01:00:03.845
<v Speaker 0>So what what happens when I do that?

01:00:03.845 --> 01:00:05.205
<v Speaker 0>Does anything happen?

01:00:06.245 --> 01:00:08.645
<v Speaker 1>Right now, nothing happens because we have not

01:00:08.645 --> 01:00:10.405
<v Speaker 1>yet sent an event to captain.

01:00:12.965 --> 01:00:15.800
<v Speaker 1>Yeah. So we've just changed the deployment file,

01:00:15.800 --> 01:00:18.200
<v Speaker 1>and what we should do is to send

01:00:18.200 --> 01:00:20.200
<v Speaker 1>the new event to captain to to do

01:00:20.200 --> 01:00:22.200
<v Speaker 1>the deployment. So, basically, the same command that

01:00:22.200 --> 01:00:24.280
<v Speaker 1>we had earlier. And we trigger a new

01:00:24.280 --> 01:00:27.160
<v Speaker 1>deployment, and captain will fetch this

01:00:29.325 --> 01:00:30.845
<v Speaker 1>will fetch this again.

01:00:35.245 --> 01:00:37.085
<v Speaker 0>K. Let's give that a minute, I guess.

01:00:39.830 --> 01:00:42.790
<v Speaker 0>And you're saying I should modify this in

01:00:42.790 --> 01:00:44.390
<v Speaker 0>staging and production as well?

01:00:45.510 --> 01:00:47.990
<v Speaker 1>Yes. But can you take a look in

01:00:47.990 --> 01:00:48.710
<v Speaker 1>the helm

01:00:50.790 --> 01:00:53.030
<v Speaker 1>there is also a there's a helm and

01:00:53.030 --> 01:00:55.110
<v Speaker 1>a helm generate or a cards and a

01:00:55.110 --> 01:00:56.635
<v Speaker 1>cards generated folder.

01:00:56.635 --> 01:00:58.154
<v Speaker 1>And here, we actually have to take a

01:00:58.154 --> 01:00:59.915
<v Speaker 1>look in the carts generated

01:01:00.954 --> 01:01:01.835
<v Speaker 1>since

01:01:01.835 --> 01:01:02.555
<v Speaker 1>these

01:01:02.635 --> 01:01:05.194
<v Speaker 1>the carts is the original one that we

01:01:05.194 --> 01:01:05.994
<v Speaker 1>onboarded,

01:01:06.395 --> 01:01:09.110
<v Speaker 1>and the carts generated is the one where

01:01:09.110 --> 01:01:10.870
<v Speaker 1>we also have the Istio

01:01:11.990 --> 01:01:12.870
<v Speaker 1>resources

01:01:12.870 --> 01:01:14.710
<v Speaker 1>that have been created by kpten.

01:01:16.390 --> 01:01:17.270
<v Speaker 0>I

01:01:17.670 --> 01:01:19.110
<v Speaker 0>I don't see anything.

01:01:19.510 --> 01:01:20.950
<v Speaker 1>And

01:01:20.950 --> 01:01:23.295
<v Speaker 1>in the dev stage

01:01:23.455 --> 01:01:24.575
<v Speaker 1>or in the dev branch

01:01:25.055 --> 01:01:26.975
<v Speaker 1>the staging, sorry, in the staging branch

01:01:27.375 --> 01:01:29.215
<v Speaker 0>Yep. We should see them.

01:01:30.255 --> 01:01:32.655
<v Speaker 1>No. Nothing. Okay. Then

01:01:35.420 --> 01:01:36.940
<v Speaker 1>then we have to take a look in

01:01:36.940 --> 01:01:38.860
<v Speaker 1>the carts. Yeah. Then maybe it's not in

01:01:38.860 --> 01:01:41.100
<v Speaker 1>a generated. Then I'm totally wrong.

01:01:43.660 --> 01:01:45.740
<v Speaker 1>So for dev, we already fixed it. That's

01:01:45.740 --> 01:01:47.660
<v Speaker 1>fine. We have to take a look in

01:01:47.660 --> 01:01:48.220
<v Speaker 1>the

01:01:49.545 --> 01:01:50.905
<v Speaker 0>Doesn't seem to be

01:01:51.224 --> 01:01:53.545
<v Speaker 0>doing anything. Okay. So let me try and

01:01:53.545 --> 01:01:55.785
<v Speaker 0>understand what's going on here. Is there a

01:01:55.785 --> 01:01:56.184
<v Speaker 0>way for me

01:01:56.905 --> 01:01:58.265
<v Speaker 0>can I subscribe

01:01:58.424 --> 01:02:00.105
<v Speaker 0>to the captain event? Can I see what

01:02:00.105 --> 01:02:01.944
<v Speaker 0>events have been happening? Can I how would

01:02:01.944 --> 01:02:02.984
<v Speaker 0>I debug this situation?

01:02:04.619 --> 01:02:05.980
<v Speaker 1>We can take a look in the captain's

01:02:05.980 --> 01:02:07.420
<v Speaker 1>bridge what is going on.

01:02:07.740 --> 01:02:10.059
<v Speaker 1>So we would see that there is a

01:02:10.059 --> 01:02:12.859
<v Speaker 1>new service sent or a new deployment

01:02:12.859 --> 01:02:13.660
<v Speaker 1>sent

01:02:14.539 --> 01:02:15.339
<v Speaker 1>in-depth.

01:02:16.745 --> 01:02:18.425
<v Speaker 0>Oh, did did did I send it to

01:02:18.425 --> 01:02:19.145
<v Speaker 0>the right

01:02:22.105 --> 01:02:23.945
<v Speaker 0>yeah. Yeah. Yeah. There's no environment there. So

01:02:23.945 --> 01:02:25.625
<v Speaker 0>that that command is okay, isn't it?

01:02:26.105 --> 01:02:27.945
<v Speaker 1>Yeah. That's that's fine. We can just remove

01:02:27.945 --> 01:02:29.945
<v Speaker 1>the the suppressed WebSocket so we can also

01:02:29.945 --> 01:02:31.945
<v Speaker 1>see the logging output because that's actually what

01:02:31.945 --> 01:02:33.785
<v Speaker 1>we are

01:02:33.220 --> 01:02:34.500
<v Speaker 1>we don't see right now.

01:02:35.380 --> 01:02:36.020
<v Speaker 1>But

01:02:36.180 --> 01:02:37.860
<v Speaker 1>we'll see starting updating

01:02:37.940 --> 01:02:40.740
<v Speaker 1>the chart cards of the stage dev.

01:02:41.220 --> 01:02:43.780
<v Speaker 0>There we go. And here we go. Has

01:02:43.780 --> 01:02:46.465
<v Speaker 1>no deployed releases. Okay. It failed in the

01:02:46.465 --> 01:02:49.585
<v Speaker 1>first time, so the Helm release is actually

01:02:49.585 --> 01:02:50.145
<v Speaker 1>not

01:02:51.025 --> 01:02:52.225
<v Speaker 1>working. So

01:02:52.545 --> 01:02:55.345
<v Speaker 1>now it's basically in the undefined state with

01:02:55.345 --> 01:02:57.825
<v Speaker 1>Helm. That's the I've had this so many

01:02:57.825 --> 01:02:59.744
<v Speaker 0>times with Helm where the first release fails

01:02:59.744 --> 01:03:01.390
<v Speaker 0>and then you get stuck in this limbo

01:03:01.390 --> 01:03:03.710
<v Speaker 0>land where you need to actually remove the

01:03:03.710 --> 01:03:04.910
<v Speaker 0>the old release.

01:03:05.310 --> 01:03:05.950
<v Speaker 0>So

01:03:06.270 --> 01:03:07.950
<v Speaker 0>if I I mean, will my standard Helm

01:03:07.950 --> 01:03:09.070
<v Speaker 0>tooling work here?

01:03:09.550 --> 01:03:10.110
<v Speaker 0>Oh.

01:03:11.150 --> 01:03:13.685
<v Speaker 1>Yeah. It it should work actually because helm

01:03:13.685 --> 01:03:15.525
<v Speaker 1>should also point to the same cluster.

01:03:16.485 --> 01:03:18.565
<v Speaker 1>And There we go. Okay. So Yeah. We

01:03:18.565 --> 01:03:19.365
<v Speaker 0>can do

01:03:21.205 --> 01:03:24.565
<v Speaker 0>a shop. It's SOC shop minus dev. This

01:03:24.565 --> 01:03:25.765
<v Speaker 1>is how the

01:03:27.490 --> 01:03:28.290
<v Speaker 0>Delete

01:03:28.450 --> 01:03:30.210
<v Speaker 0>and the release name.

01:03:34.289 --> 01:03:35.970
<v Speaker 0>That's no. That's d p.

01:03:36.450 --> 01:03:37.170
<v Speaker 0>The

01:03:39.355 --> 01:03:40.715
<v Speaker 0>I don't see it.

01:03:44.555 --> 01:03:46.635
<v Speaker 0>The event probably had it. Didn't say yeah.

01:03:46.635 --> 01:03:47.275
<v Speaker 0>Okay.

01:03:47.675 --> 01:03:48.235
<v Speaker 0>This one.

01:03:54.790 --> 01:03:57.590
<v Speaker 0>There we go. Okay. So we could we

01:03:57.590 --> 01:03:59.190
<v Speaker 0>should be able to to trigger that new

01:03:59.190 --> 01:04:00.870
<v Speaker 0>artifact again, and they should start from a

01:04:00.870 --> 01:04:01.750
<v Speaker 0>clean slate,

01:04:02.310 --> 01:04:04.710
<v Speaker 0>maybe? Yeah. But is there any chance that

01:04:04.710 --> 01:04:05.190
<v Speaker 1>we can,

01:04:06.435 --> 01:04:08.915
<v Speaker 1>like, bump the size of the cluster a

01:04:08.915 --> 01:04:10.835
<v Speaker 1>little bit? Because it will do the same

01:04:10.835 --> 01:04:11.395
<v Speaker 1>in

01:04:11.955 --> 01:04:12.835
<v Speaker 1>staging

01:04:13.075 --> 01:04:15.155
<v Speaker 1>and in production. But in staging and production,

01:04:15.155 --> 01:04:16.675
<v Speaker 1>we will do a blue green deployment. So

01:04:16.675 --> 01:04:18.915
<v Speaker 1>we have two versions of cards running.

01:04:19.820 --> 01:04:22.140
<v Speaker 1>So we might run out of space also

01:04:22.140 --> 01:04:24.540
<v Speaker 1>in staging and production because, like, we are

01:04:24.540 --> 01:04:25.260
<v Speaker 1>adding five

01:04:26.220 --> 01:04:27.500
<v Speaker 1>more containers

01:04:28.140 --> 01:04:29.180
<v Speaker 1>to the show.

01:04:29.740 --> 01:04:31.100
<v Speaker 0>Yep. No problem. Okay.

01:04:33.215 --> 01:04:33.855
<v Speaker 0>Go.

01:04:36.175 --> 01:04:38.335
<v Speaker 0>Alright. I've increased that size. There's a new

01:04:38.335 --> 01:04:40.655
<v Speaker 0>node pill being added now, which should give

01:04:40.655 --> 01:04:42.175
<v Speaker 0>us five more nodes.

01:04:42.895 --> 01:04:43.535
<v Speaker 0>So

01:04:44.575 --> 01:04:46.815
<v Speaker 0>let's see where status of that is.

01:05:00.540 --> 01:05:01.740
<v Speaker 0>Did I do that right?

01:05:02.775 --> 01:05:04.375
<v Speaker 1>And I think that gives me the the

01:05:04.375 --> 01:05:06.694
<v Speaker 1>chance to to rethink about our demo application

01:05:06.694 --> 01:05:08.375
<v Speaker 1>since it's a little bit too big for

01:05:08.375 --> 01:05:11.494
<v Speaker 1>very, very small shopping cart, and it takes,

01:05:11.654 --> 01:05:13.335
<v Speaker 1>just too much resources.

01:05:14.055 --> 01:05:14.454
<v Speaker 1>It's,

01:05:16.710 --> 01:05:18.790
<v Speaker 1>yeah, it's just that we we're going for

01:05:18.790 --> 01:05:20.150
<v Speaker 1>a database plus

01:05:20.470 --> 01:05:23.270
<v Speaker 1>a small a small UI and a little

01:05:23.270 --> 01:05:25.670
<v Speaker 1>bit of yeah. It's just a small microservice.

01:05:25.670 --> 01:05:27.910
<v Speaker 1>Maybe we should go with two small microservices

01:05:27.910 --> 01:05:29.830
<v Speaker 1>that talk to each other and are very,

01:05:29.830 --> 01:05:31.705
<v Speaker 1>very small, maybe just pinging each other, and

01:05:31.705 --> 01:05:33.145
<v Speaker 1>then we can also showcase

01:05:33.865 --> 01:05:35.225
<v Speaker 1>the capabilities.

01:05:37.224 --> 01:05:39.545
<v Speaker 0>Alright. Let's just see how far along that

01:05:39.545 --> 01:05:41.465
<v Speaker 0>is. It shouldn't take too long.

01:05:41.705 --> 01:05:42.265
<v Speaker 0>Let's see.

01:05:47.339 --> 01:05:49.580
<v Speaker 0>One, two, three, four, five, six.

01:05:54.220 --> 01:05:55.740
<v Speaker 0>I can see if you're adding my new

01:05:55.740 --> 01:05:57.180
<v Speaker 0>note pillow. Okay. I'm just gonna increase the

01:05:57.180 --> 01:05:59.339
<v Speaker 0>size of that. So I may lose

01:06:00.565 --> 01:06:02.645
<v Speaker 0>the API server for a few minutes, but

01:06:02.645 --> 01:06:03.845
<v Speaker 0>we can deal with that.

01:06:06.565 --> 01:06:09.205
<v Speaker 0>The joys of a livestream. Right? K.

01:06:09.365 --> 01:06:09.845
<v Speaker 0>Let's see.

01:06:12.099 --> 01:06:14.580
<v Speaker 1>Exactly. Yeah. Maybe we have more questions coming

01:06:14.580 --> 01:06:16.580
<v Speaker 1>in that we can also do a couple

01:06:16.580 --> 01:06:17.140
<v Speaker 1>of questions.

01:06:28.055 --> 01:06:28.935
<v Speaker 0>Let's see.

01:06:29.415 --> 01:06:30.695
<v Speaker 0>Happy now.

01:06:33.655 --> 01:06:35.655
<v Speaker 0>Yeah. Okay. And that should be spinning up

01:06:35.655 --> 01:06:36.775
<v Speaker 0>now. So let's see what happens. We'll give

01:06:36.775 --> 01:06:38.600
<v Speaker 0>that a second. Okay.

01:06:38.600 --> 01:06:40.200
<v Speaker 0>We do have one question just now we

01:06:40.200 --> 01:06:41.960
<v Speaker 0>can tackle, and then we'll cover a few

01:06:41.960 --> 01:06:43.960
<v Speaker 0>other things. So Bella asked, does the user

01:06:43.960 --> 01:06:46.040
<v Speaker 0>have to manually update STO to keep up

01:06:46.040 --> 01:06:47.320
<v Speaker 0>with their releases?

01:06:49.720 --> 01:06:53.045
<v Speaker 1>Yes. So Istio is not managed by kpten.

01:06:53.045 --> 01:06:54.244
<v Speaker 1>It's just for

01:06:54.244 --> 01:06:57.285
<v Speaker 1>blue green deployments right now. It's it's needed

01:06:57.285 --> 01:07:00.005
<v Speaker 1>by kpten, but it's not managed. So you

01:07:00.005 --> 01:07:02.245
<v Speaker 1>would just install it by yourself and

01:07:02.484 --> 01:07:04.645
<v Speaker 1>take care of the latest versions of Istio.

01:07:06.830 --> 01:07:09.550
<v Speaker 1>Maybe in this context, I can add that

01:07:09.710 --> 01:07:10.670
<v Speaker 1>upgrading

01:07:10.670 --> 01:07:12.350
<v Speaker 1>kpten is

01:07:12.590 --> 01:07:14.750
<v Speaker 1>usually done with the kpten CLI.

01:07:14.830 --> 01:07:16.990
<v Speaker 1>So we release

01:07:17.550 --> 01:07:19.230
<v Speaker 1>a new kpten version every

01:07:19.390 --> 01:07:20.910
<v Speaker 1>four to six weeks

01:07:22.005 --> 01:07:22.964
<v Speaker 1>approximately.

01:07:23.924 --> 01:07:24.484
<v Speaker 1>And

01:07:25.045 --> 01:07:27.285
<v Speaker 1>there you can usually, it's just a kptan

01:07:27.285 --> 01:07:28.005
<v Speaker 1>upgrade,

01:07:28.325 --> 01:07:31.285
<v Speaker 1>and it will just upgrade your kptan installation

01:07:31.285 --> 01:07:33.605
<v Speaker 1>and move all the the services

01:07:33.605 --> 01:07:35.525
<v Speaker 1>to its latest version. If there are new

01:07:35.525 --> 01:07:37.845
<v Speaker 1>versions of other depending services

01:07:39.700 --> 01:07:41.700
<v Speaker 1>released, then you would just have to take

01:07:41.700 --> 01:07:43.300
<v Speaker 1>care of of this yourself.

01:07:46.100 --> 01:07:49.380
<v Speaker 0>Cool. Thank you. Alright. Can I trigger

01:07:50.180 --> 01:07:53.140
<v Speaker 0>caption send event again, and we should see

01:07:54.155 --> 01:07:55.915
<v Speaker 0>that work this time? I won't suppress the

01:07:55.915 --> 01:07:58.075
<v Speaker 0>WebSocket. Let's follow along and see what happens.

01:07:58.075 --> 01:07:58.635
<v Speaker 1>Let's try.

01:08:05.960 --> 01:08:08.440
<v Speaker 0>So I guess that also explains the

01:08:09.000 --> 01:08:11.640
<v Speaker 0>weird situation then because you were expecting

01:08:12.119 --> 01:08:14.520
<v Speaker 0>this here to see the generated

01:08:15.000 --> 01:08:15.880
<v Speaker 0>YAML,

01:08:15.880 --> 01:08:18.199
<v Speaker 0>which I'm assuming isn't there maybe just because

01:08:18.199 --> 01:08:20.600
<v Speaker 0>that release wasn't successful the first time.

01:08:21.215 --> 01:08:23.215
<v Speaker 0>Is that right? Yes. Yep. There are a

01:08:23.215 --> 01:08:25.375
<v Speaker 1>couple of things going on. The Helm chart

01:08:25.375 --> 01:08:26.974
<v Speaker 1>will be generated,

01:08:26.974 --> 01:08:28.654
<v Speaker 1>and the Helm chart will be applied.

01:08:29.295 --> 01:08:32.894
<v Speaker 1>And the CLI will wait for the Helm

01:08:32.894 --> 01:08:35.694
<v Speaker 1>chart applied to for the Helm upgrade. Actually,

01:08:35.694 --> 01:08:38.160
<v Speaker 1>I think it's a command to be finished.

01:08:38.240 --> 01:08:40.160
<v Speaker 1>So in this case, it takes a while

01:08:40.160 --> 01:08:40.960
<v Speaker 1>since

01:08:41.200 --> 01:08:43.840
<v Speaker 1>just the the start of the container takes

01:08:43.840 --> 01:08:45.680
<v Speaker 1>a couple of seconds. So, normally,

01:08:45.920 --> 01:08:47.600
<v Speaker 1>it's this command if you have

01:08:48.800 --> 01:08:50.640
<v Speaker 1>I have a very small Go application that

01:08:50.640 --> 01:08:52.695
<v Speaker 1>I'm using sometimes. It's called the potato head.

01:08:52.695 --> 01:08:54.535
<v Speaker 1>It's a CNCF demo project.

01:08:54.854 --> 01:08:57.575
<v Speaker 1>And with the potato head, this command finishes

01:08:57.575 --> 01:09:00.215
<v Speaker 1>within, let's say, five seconds because it's very

01:09:00.215 --> 01:09:02.695
<v Speaker 1>small. It's start up it like, the start

01:09:02.695 --> 01:09:03.734
<v Speaker 1>up is really fast.

01:09:04.135 --> 01:09:05.975
<v Speaker 1>With the shopping cart, the start up is

01:09:05.975 --> 01:09:06.854
<v Speaker 1>a little bit longer

01:09:07.300 --> 01:09:10.179
<v Speaker 1>and and slower. So, also, this command just

01:09:10.179 --> 01:09:12.899
<v Speaker 1>waits for the first successful deployment in the

01:09:12.899 --> 01:09:13.939
<v Speaker 1>first stage.

01:09:14.020 --> 01:09:16.020
<v Speaker 1>So it won't wait until it's deployed into

01:09:16.020 --> 01:09:18.020
<v Speaker 1>production, but it will just give you the

01:09:18.020 --> 01:09:19.779
<v Speaker 1>feedback if it could be deployed in the

01:09:19.779 --> 01:09:23.124
<v Speaker 1>first stage. So it finished upgrading the chart.

01:09:23.925 --> 01:09:25.844
<v Speaker 1>That should be fine. And,

01:09:26.965 --> 01:09:29.844
<v Speaker 1>yeah, now it's writing the generated ones, and

01:09:29.844 --> 01:09:32.645
<v Speaker 1>now it's all good. There we go. There

01:09:32.645 --> 01:09:33.844
<v Speaker 1>we go. Finally.

01:09:36.170 --> 01:09:38.170
<v Speaker 0>Alright. So that what what it turns out

01:09:38.170 --> 01:09:40.250
<v Speaker 0>then is my wild idea of a suppressed

01:09:40.250 --> 01:09:42.810
<v Speaker 0>the WebSocket. We actually managed to tighten that

01:09:42.810 --> 01:09:44.250
<v Speaker 0>rate. I did it on the request that

01:09:44.250 --> 01:09:45.929
<v Speaker 0>failed. So go me. Thanks.

01:09:48.785 --> 01:09:50.784
<v Speaker 0>Alright. Let's go back to our tutorial.

01:09:50.785 --> 01:09:52.145
<v Speaker 0>So we

01:09:52.785 --> 01:09:54.545
<v Speaker 0>have done both of those,

01:09:55.105 --> 01:09:56.865
<v Speaker 0>and we should be able to verify all

01:09:56.865 --> 01:09:58.625
<v Speaker 0>this now. So let's try that one more

01:09:58.625 --> 01:09:59.265
<v Speaker 0>time.

01:09:59.745 --> 01:10:01.265
<v Speaker 0>Here we go. That looks much better. So

01:10:01.265 --> 01:10:03.025
<v Speaker 0>we got the staging. And now we can

01:10:03.025 --> 01:10:05.660
<v Speaker 1>also see it's, it's starting up already in

01:10:05.660 --> 01:10:06.460
<v Speaker 1>staging.

01:10:06.860 --> 01:10:08.300
<v Speaker 1>There is also difference,

01:10:08.380 --> 01:10:09.900
<v Speaker 1>when we take a look at the the

01:10:09.900 --> 01:10:11.740
<v Speaker 1>pods and the containers that are running in

01:10:11.740 --> 01:10:12.460
<v Speaker 1>the pods.

01:10:13.100 --> 01:10:13.900
<v Speaker 1>For,

01:10:15.020 --> 01:10:17.705
<v Speaker 1>dev, there is only one container running. For

01:10:17.705 --> 01:10:19.865
<v Speaker 1>staging and production, there will be two containers

01:10:19.865 --> 01:10:22.025
<v Speaker 1>because we will also have the Istio sidecar.

01:10:22.905 --> 01:10:25.625
<v Speaker 1>But for dev, we decided not to go

01:10:25.625 --> 01:10:26.185
<v Speaker 1>for

01:10:26.665 --> 01:10:29.225
<v Speaker 1>blue green deployment. So there is no need

01:10:29.225 --> 01:10:31.465
<v Speaker 1>to inject the Istio sidecar because we we

01:10:31.465 --> 01:10:34.820
<v Speaker 1>don't need this traffic shifting between blue and

01:10:34.820 --> 01:10:37.140
<v Speaker 1>green versions, and we're only going for this

01:10:37.140 --> 01:10:38.580
<v Speaker 1>in staging and in production.

01:10:39.620 --> 01:10:41.780
<v Speaker 1>We if we take a look in the

01:10:41.940 --> 01:10:43.140
<v Speaker 1>Captain's Bridge,

01:10:43.780 --> 01:10:45.060
<v Speaker 1>there should already be

01:10:45.545 --> 01:10:47.145
<v Speaker 1>the link to the service

01:10:47.545 --> 01:10:49.145
<v Speaker 1>available so we can also take a look

01:10:49.145 --> 01:10:50.985
<v Speaker 1>at the UI of this very beautiful

01:10:52.105 --> 01:10:53.145
<v Speaker 1>shopping cart.

01:10:53.705 --> 01:10:54.105
<v Speaker 1>Actually

01:10:55.945 --> 01:10:57.545
<v Speaker 1>yeah. It's

01:10:58.980 --> 01:11:01.460
<v Speaker 1>deaf. Yeah. Here we go. And that's our

01:11:01.460 --> 01:11:04.659
<v Speaker 1>shopping cart. Yeah. So it took a it

01:11:04.659 --> 01:11:06.820
<v Speaker 1>took a while to see this very nice

01:11:06.820 --> 01:11:07.619
<v Speaker 1>UI.

01:11:09.619 --> 01:11:10.260
<v Speaker 0>Cool.

01:11:11.300 --> 01:11:12.659
<v Speaker 0>So I'm just curious then.

01:11:14.105 --> 01:11:16.185
<v Speaker 0>If I come in here, take a look

01:11:16.185 --> 01:11:17.065
<v Speaker 0>at this.

01:11:19.945 --> 01:11:20.905
<v Speaker 0>The this one

01:11:21.705 --> 01:11:23.305
<v Speaker 0>get the change that I made in dev.

01:11:23.305 --> 01:11:24.505
<v Speaker 0>Right? This is something I would have to

01:11:24.505 --> 01:11:25.785
<v Speaker 0>manually update here.

01:11:27.630 --> 01:11:29.390
<v Speaker 0>Let's even get away with with those extra

01:11:29.390 --> 01:11:30.510
<v Speaker 0>notes. Okay.

01:11:31.390 --> 01:11:33.789
<v Speaker 0>So that's cool. Nice. So

01:11:34.429 --> 01:11:36.830
<v Speaker 0>it's we've already looked at that. I'm happy

01:11:36.830 --> 01:11:37.630
<v Speaker 0>with that. We

01:11:38.429 --> 01:11:40.429
<v Speaker 0>go to next. Now it wants to generate

01:11:40.429 --> 01:11:41.070
<v Speaker 0>some traffic.

01:11:43.985 --> 01:11:44.704
<v Speaker 0>Yep.

01:11:44.864 --> 01:11:46.145
<v Speaker 0>Do we want to do that or will

01:11:46.145 --> 01:11:49.104
<v Speaker 0>we We we can also skip this part

01:11:49.185 --> 01:11:50.064
<v Speaker 1>as we

01:11:50.705 --> 01:11:52.864
<v Speaker 1>I think what's really important to

01:11:53.425 --> 01:11:54.145
<v Speaker 1>where we

01:11:54.980 --> 01:11:56.980
<v Speaker 1>sorry. I think did I just lose you

01:11:56.980 --> 01:11:57.780
<v Speaker 1>for a second?

01:11:58.180 --> 01:11:59.460
<v Speaker 0>Oh, no. Okay.

01:12:01.300 --> 01:12:03.700
<v Speaker 1>So I think what what what will be

01:12:03.700 --> 01:12:05.860
<v Speaker 1>interesting to take a look at is how

01:12:05.860 --> 01:12:08.420
<v Speaker 1>we can connect kpten to Prometheus

01:12:08.765 --> 01:12:11.805
<v Speaker 1>and also run a quality gate evaluation with

01:12:11.805 --> 01:12:13.405
<v Speaker 1>data from Prometheus maybe.

01:12:14.125 --> 01:12:15.325
<v Speaker 1>I think we still have a couple of

01:12:15.325 --> 01:12:18.125
<v Speaker 1>more minutes left in the stream. Or, David,

01:12:18.605 --> 01:12:21.165
<v Speaker 1>how long is the stream scheduled for another

01:12:21.165 --> 01:12:21.725
<v Speaker 1>couple of minutes?

01:12:22.810 --> 01:12:23.449
<v Speaker 0>I

01:12:23.690 --> 01:12:26.010
<v Speaker 0>mean, it's scheduled for another fifteen minutes. If

01:12:26.010 --> 01:12:27.370
<v Speaker 0>you wanna go over that, I'm fine. As

01:12:27.370 --> 01:12:28.969
<v Speaker 0>long as you've got the time, we can

01:12:28.969 --> 01:12:30.650
<v Speaker 0>we can go until we get the Prometheus

01:12:30.650 --> 01:12:31.369
<v Speaker 0>stuff done.

01:12:32.090 --> 01:12:35.130
<v Speaker 1>Yeah. I I think if we just execute

01:12:35.130 --> 01:12:36.969
<v Speaker 1>the installation of Prometheus

01:12:36.969 --> 01:12:38.090
<v Speaker 1>and do the configuration,

01:12:38.415 --> 01:12:40.495
<v Speaker 1>should be quite fast, and we will get

01:12:40.495 --> 01:12:41.135
<v Speaker 1>the data.

01:12:41.775 --> 01:12:43.455
<v Speaker 0>Yeah. But now that you've said that, something

01:12:43.535 --> 01:12:45.375
<v Speaker 0>random is gonna happen. Right?

01:12:46.415 --> 01:12:48.095
<v Speaker 0>So we're deploying Prometheus.

01:12:48.095 --> 01:12:50.175
<v Speaker 0>We are gonna configure captain.

01:12:51.400 --> 01:12:53.320
<v Speaker 0>Okay. We're just telling that that Prometheus

01:12:53.640 --> 01:12:55.800
<v Speaker 0>yeah. Captain configure a module from Prometheus. So

01:12:55.800 --> 01:12:57.239
<v Speaker 0>this is a command that

01:12:58.280 --> 01:12:59.880
<v Speaker 0>you wanna tell me what that does?

01:13:00.520 --> 01:13:02.760
<v Speaker 1>Yeah. It it it also says here. So

01:13:02.760 --> 01:13:05.160
<v Speaker 1>what it does is it will set up

01:13:05.160 --> 01:13:05.880
<v Speaker 1>Prometheus,

01:13:06.345 --> 01:13:08.905
<v Speaker 1>and it will also, configure Prometheus in a

01:13:08.905 --> 01:13:11.945
<v Speaker 1>way that it will, generate the scrape jobs

01:13:11.945 --> 01:13:14.184
<v Speaker 1>for cards in dev staging production,

01:13:14.825 --> 01:13:16.744
<v Speaker 1>that we can use the data afterwards.

01:13:16.745 --> 01:13:18.825
<v Speaker 1>And if we would have set up already

01:13:18.825 --> 01:13:22.010
<v Speaker 1>the SLO files, the Qualitygate files, that it

01:13:22.010 --> 01:13:24.890
<v Speaker 1>would already set up the alert manager rules.

01:13:24.890 --> 01:13:26.810
<v Speaker 1>So right now, we have not added the

01:13:26.810 --> 01:13:29.770
<v Speaker 1>SLO files, so there is no alerting yet

01:13:30.170 --> 01:13:32.730
<v Speaker 1>since we have not defined the QualityGate yet,

01:13:32.730 --> 01:13:34.170
<v Speaker 1>but this will be the next part.

01:13:36.025 --> 01:13:37.545
<v Speaker 0>Okay. Got it. Yeah.

01:13:38.185 --> 01:13:40.905
<v Speaker 0>So this is using my local shipyard, right,

01:13:40.905 --> 01:13:43.305
<v Speaker 0>to kind of pieces together. When I run

01:13:43.305 --> 01:13:44.425
<v Speaker 0>this captain

01:13:44.505 --> 01:13:47.545
<v Speaker 0>configure monitor, it's looking in this the shipyard

01:13:47.545 --> 01:13:49.400
<v Speaker 0>fail here? Or no. It's sending the event

01:13:49.400 --> 01:13:51.240
<v Speaker 0>to the control plane. It's sending the event

01:13:51.240 --> 01:13:52.680
<v Speaker 1>to the control plane. It's taking a shipyard

01:13:52.680 --> 01:13:54.280
<v Speaker 1>file from the git repository.

01:13:54.680 --> 01:13:56.680
<v Speaker 0>Got it. Okay. That makes sense.

01:13:57.240 --> 01:13:59.400
<v Speaker 0>We don't need to browse to Prometheus. So

01:13:59.640 --> 01:14:01.160
<v Speaker 1>Yeah. We can go for the next.

01:14:02.185 --> 01:14:02.824
<v Speaker 1>And

01:14:03.065 --> 01:14:04.665
<v Speaker 1>here, sometimes I need a little bit of

01:14:04.665 --> 01:14:07.945
<v Speaker 1>explanation because it's the Prometheus service. That's the

01:14:07.945 --> 01:14:10.184
<v Speaker 1>one responsible for configuring Prometheus.

01:14:10.344 --> 01:14:12.344
<v Speaker 1>If you don't want to configure Prometheus with

01:14:12.344 --> 01:14:14.905
<v Speaker 1>kpten, then you just need the Prometheus SLI

01:14:14.905 --> 01:14:16.745
<v Speaker 1>service, service level indicators.

01:14:17.600 --> 01:14:19.280
<v Speaker 1>In our case, we want to do both,

01:14:19.280 --> 01:14:21.120
<v Speaker 1>so we have the Prometheus service and the

01:14:21.120 --> 01:14:23.600
<v Speaker 1>Prometheus SLI service. So this service we also

01:14:23.600 --> 01:14:26.800
<v Speaker 1>need, it's a service that we also deploy

01:14:27.840 --> 01:14:29.040
<v Speaker 1>into our

01:14:29.360 --> 01:14:30.320
<v Speaker 1>kpten namespace,

01:14:30.925 --> 01:14:34.525
<v Speaker 1>and it it's just responsible for querying Prometheus

01:14:34.525 --> 01:14:37.325
<v Speaker 1>and delivering the data from Prometheus to kptn.

01:14:38.045 --> 01:14:40.525
<v Speaker 1>And with that, we already set up Prometheus

01:14:40.525 --> 01:14:41.485
<v Speaker 1>and the integration.

01:14:42.285 --> 01:14:44.445
<v Speaker 1>And now we need the quality gate,

01:14:45.770 --> 01:14:48.010
<v Speaker 1>and the quality gate is our SLO file.

01:14:48.010 --> 01:14:50.170
<v Speaker 1>It's written here, and we can just use

01:14:50.170 --> 01:14:51.210
<v Speaker 1>it as it is.

01:14:52.570 --> 01:14:55.929
<v Speaker 1>And it will check basically for the

01:14:56.730 --> 01:14:57.370
<v Speaker 1>let's say

01:14:58.055 --> 01:14:59.975
<v Speaker 1>I think it's for the response time. We

01:14:59.975 --> 01:15:01.655
<v Speaker 1>were just checking for the response time of

01:15:01.655 --> 01:15:02.535
<v Speaker 1>phone service.

01:15:05.735 --> 01:15:09.335
<v Speaker 0>Okay. Yeah. So it's an an average across

01:15:09.335 --> 01:15:11.175
<v Speaker 0>response time, p 95.

01:15:11.175 --> 01:15:13.015
<v Speaker 0>Okay. And it's got some criteria. Excellent.

01:15:13.510 --> 01:15:14.390
<v Speaker 1>Exactly.

01:15:20.390 --> 01:15:21.110
<v Speaker 0>Okay.

01:15:21.350 --> 01:15:23.350
<v Speaker 0>So I can do this just from the

01:15:23.350 --> 01:15:24.390
<v Speaker 0>bridge. Right?

01:15:25.190 --> 01:15:26.710
<v Speaker 1>Yes. So we can take a look if

01:15:26.710 --> 01:15:28.230
<v Speaker 1>it's already deployed in

01:15:28.685 --> 01:15:30.285
<v Speaker 1>staging or in production.

01:15:33.325 --> 01:15:34.845
<v Speaker 0>Both service. Oh,

01:15:35.245 --> 01:15:36.605
<v Speaker 0>environment staging.

01:15:37.325 --> 01:15:38.525
<v Speaker 1>Cart.

01:15:38.525 --> 01:15:41.085
<v Speaker 1>It's here. That looks good.

01:15:41.405 --> 01:15:43.165
<v Speaker 1>I think in production, I have not seen

01:15:43.165 --> 01:15:43.645
<v Speaker 1>it yet.

01:15:47.500 --> 01:15:50.700
<v Speaker 1>Its cards is not yet deployed in production.

01:15:57.895 --> 01:16:00.455
<v Speaker 0>B b is there. Not yet there. Maybe

01:16:00.455 --> 01:16:02.054
<v Speaker 1>we can take a look in the bridge.

01:16:02.855 --> 01:16:04.375
<v Speaker 1>Normally, the bridge gives us

01:16:04.935 --> 01:16:06.295
<v Speaker 1>if we go to

01:16:07.975 --> 01:16:09.815
<v Speaker 1>on the left side, if we go to

01:16:09.815 --> 01:16:10.295
<v Speaker 1>services,

01:16:10.670 --> 01:16:12.349
<v Speaker 1>then we can take a look directly on

01:16:12.349 --> 01:16:13.789
<v Speaker 1>the service on the carts.

01:16:13.869 --> 01:16:15.869
<v Speaker 1>And if we click on the last configuration

01:16:15.869 --> 01:16:16.669
<v Speaker 1>changed,

01:16:17.230 --> 01:16:21.229
<v Speaker 1>we can see we the configuration changes is

01:16:21.230 --> 01:16:22.750
<v Speaker 1>usually the part

01:16:23.284 --> 01:16:24.485
<v Speaker 1>Oh, it's

01:16:24.965 --> 01:16:27.124
<v Speaker 1>trying to already fetch the SLIs.

01:16:28.244 --> 01:16:28.885
<v Speaker 1>Actually,

01:16:29.445 --> 01:16:31.604
<v Speaker 1>it's trying to fetch the SLIs.

01:16:32.085 --> 01:16:34.645
<v Speaker 1>And at the same time, we just deployed

01:16:34.645 --> 01:16:36.085
<v Speaker 1>Prometheus. So I think

01:16:38.080 --> 01:16:39.840
<v Speaker 1>there is a kind of a race condition

01:16:39.840 --> 01:16:40.719
<v Speaker 1>here because

01:16:41.040 --> 01:16:43.760
<v Speaker 1>this part would be skipped if Prometheus is

01:16:43.760 --> 01:16:45.920
<v Speaker 1>not installed. So normally, you install you can

01:16:45.920 --> 01:16:47.679
<v Speaker 1>do it without monitoring, and then it will

01:16:47.679 --> 01:16:48.640
<v Speaker 1>just just be skipped.

01:16:50.494 --> 01:16:53.295
<v Speaker 1>This time, we just we deployed Prometheus, but

01:16:53.295 --> 01:16:55.454
<v Speaker 1>we have not added already the the other

01:16:55.454 --> 01:16:57.295
<v Speaker 1>parts. So what we can do is we

01:16:57.295 --> 01:16:58.814
<v Speaker 1>can just do another

01:16:59.534 --> 01:17:00.494
<v Speaker 1>deployment

01:17:01.454 --> 01:17:04.014
<v Speaker 1>or trigger a new deployment of carts to

01:17:04.014 --> 01:17:05.695
<v Speaker 1>just rerun the the whole thing

01:17:06.180 --> 01:17:07.460
<v Speaker 1>with the same version,

01:17:07.780 --> 01:17:09.620
<v Speaker 1>and it will it will then fetch the

01:17:09.620 --> 01:17:10.179
<v Speaker 1>data.

01:17:10.820 --> 01:17:12.660
<v Speaker 0>Okay. So I just wanna make sure I

01:17:12.660 --> 01:17:15.860
<v Speaker 0>understood that correctly. So our production approval strategy

01:17:15.860 --> 01:17:18.900
<v Speaker 0>has some sort of performance monitoring before it

01:17:18.900 --> 01:17:21.540
<v Speaker 0>does an automatic rule out, and it just

01:17:20.655 --> 01:17:23.534
<v Speaker 0>managed to capture Prometheus existing and time for

01:17:23.534 --> 01:17:25.534
<v Speaker 0>it to try and check that the performance

01:17:25.534 --> 01:17:26.494
<v Speaker 0>was adequate,

01:17:27.454 --> 01:17:30.574
<v Speaker 0>roughly? Yes. So it's working in this way

01:17:30.574 --> 01:17:31.294
<v Speaker 1>that

01:17:33.160 --> 01:17:35.880
<v Speaker 1>with this command, we are deploying cards in

01:17:35.880 --> 01:17:36.760
<v Speaker 1>the dev

01:17:36.920 --> 01:17:37.880
<v Speaker 1>namespace.

01:17:38.360 --> 01:17:38.760
<v Speaker 1>Then,

01:17:39.240 --> 01:17:41.640
<v Speaker 1>kpten will trigger the tests. We have added

01:17:41.640 --> 01:17:44.040
<v Speaker 1>a JMeta file. This will be triggered.

01:17:44.520 --> 01:17:45.159
<v Speaker 1>Afterwards,

01:17:45.480 --> 01:17:47.480
<v Speaker 1>there will be an evaluation based on the

01:17:47.480 --> 01:17:50.435
<v Speaker 1>SLO file. We have not added the SLO

01:17:50.435 --> 01:17:52.675
<v Speaker 1>file for our dev environment.

01:17:52.835 --> 01:17:54.835
<v Speaker 1>We only added it for staging. So in

01:17:54.835 --> 01:17:57.875
<v Speaker 1>dev, it will just skip the quality evaluation.

01:17:58.195 --> 01:18:00.755
<v Speaker 1>For staging, it will deploy. It will trigger

01:18:00.755 --> 01:18:03.155
<v Speaker 1>the tests. We have added the load GMX

01:18:03.155 --> 01:18:05.700
<v Speaker 1>file, so we will add some performance tests

01:18:05.700 --> 01:18:07.780
<v Speaker 1>or, like, execute a couple of thousand requests

01:18:07.780 --> 01:18:09.219
<v Speaker 1>against this shopping cart,

01:18:09.940 --> 01:18:13.060
<v Speaker 1>and then it will do the evaluation. We

01:18:13.060 --> 01:18:14.580
<v Speaker 1>have defined the SLO file,

01:18:14.900 --> 01:18:17.219
<v Speaker 1>and we have defined the Prometheus SLI

01:18:17.220 --> 01:18:18.260
<v Speaker 1>provider.

01:18:18.340 --> 01:18:18.900
<v Speaker 1>So

01:18:19.305 --> 01:18:22.105
<v Speaker 1>this will actually query Prometheus

01:18:22.185 --> 01:18:24.264
<v Speaker 1>for the data of the testing

01:18:24.425 --> 01:18:24.985
<v Speaker 1>time

01:18:25.385 --> 01:18:27.625
<v Speaker 1>and then come back with the data, provide

01:18:27.625 --> 01:18:29.465
<v Speaker 1>this to kpten. Kpten will do the evaluation

01:18:29.465 --> 01:18:31.225
<v Speaker 1>based on the SLO file and then come

01:18:31.225 --> 01:18:33.385
<v Speaker 1>up with a total score. That is actually

01:18:33.610 --> 01:18:35.930
<v Speaker 1>everything that's going on in the background when

01:18:35.930 --> 01:18:38.970
<v Speaker 1>you just send this one command, kptn. And

01:18:39.450 --> 01:18:41.850
<v Speaker 1>I think at the beginning, mentioned that,

01:18:42.330 --> 01:18:45.290
<v Speaker 1>kptn access this control plane and the orchestrator

01:18:45.290 --> 01:18:48.010
<v Speaker 1>of these tools. So it connects a chain

01:18:48.010 --> 01:18:49.675
<v Speaker 1>meter, Prometheus.

01:18:50.155 --> 01:18:51.595
<v Speaker 1>Later on, it can connect

01:18:53.035 --> 01:18:55.915
<v Speaker 1>Unleash or Ansem Tower to trigger remediation actions.

01:18:55.915 --> 01:18:57.835
<v Speaker 1>So there's a lot of things that are

01:18:57.835 --> 01:18:58.555
<v Speaker 1>sent

01:18:59.035 --> 01:19:02.315
<v Speaker 1>that will receive events or send events.

01:19:02.955 --> 01:19:04.395
<v Speaker 1>So this

01:19:03.990 --> 01:19:05.190
<v Speaker 1>this is what we

01:19:05.990 --> 01:19:07.830
<v Speaker 1>this is what what what's going on here

01:19:07.830 --> 01:19:09.990
<v Speaker 1>in the background. Yeah. We can see

01:19:11.030 --> 01:19:12.470
<v Speaker 1>in this case, there is not a lot

01:19:12.470 --> 01:19:14.790
<v Speaker 1>of evaluation because we don't have the SLO

01:19:14.790 --> 01:19:17.110
<v Speaker 1>file. But if we add an SLO file

01:19:17.110 --> 01:19:20.605
<v Speaker 1>to to our dev state, dev environment,

01:19:20.605 --> 01:19:21.725
<v Speaker 1>they would would see it.

01:19:22.205 --> 01:19:24.205
<v Speaker 1>Actually, right now, it's quite fast.

01:19:24.925 --> 01:19:28.525
<v Speaker 1>The gatekeeper already decided that since we got

01:19:28.525 --> 01:19:29.885
<v Speaker 1>the let's say,

01:19:30.285 --> 01:19:32.685
<v Speaker 1>if there is no SLO file, kpt will

01:19:32.685 --> 01:19:34.205
<v Speaker 1>treat it as

01:19:34.620 --> 01:19:35.500
<v Speaker 1>as a,

01:19:37.260 --> 01:19:39.660
<v Speaker 1>let's say, a a past evaluation.

01:19:39.740 --> 01:19:41.980
<v Speaker 1>So it moved on, decided to promote

01:19:42.220 --> 01:19:44.380
<v Speaker 1>it to the next stage. For staging, we

01:19:44.380 --> 01:19:45.660
<v Speaker 1>have automated

01:19:46.620 --> 01:19:47.420
<v Speaker 1>deployment

01:19:47.660 --> 01:19:48.540
<v Speaker 1>activated,

01:19:48.860 --> 01:19:50.220
<v Speaker 1>so it already

01:19:50.595 --> 01:19:52.995
<v Speaker 1>started to deploy it in staging. And maybe

01:19:52.995 --> 01:19:55.955
<v Speaker 1>we already see that tests are executed in

01:19:55.955 --> 01:19:56.675
<v Speaker 1>staging.

01:19:56.995 --> 01:20:00.275
<v Speaker 1>But, yeah, we just need to to wait

01:20:00.355 --> 01:20:02.835
<v Speaker 1>a couple of seconds or minutes for the

01:20:02.835 --> 01:20:04.355
<v Speaker 1>the test to be finished.

01:20:07.220 --> 01:20:09.940
<v Speaker 0>Right. Okay. Okay. Gotcha. Yeah. So so so

01:20:09.940 --> 01:20:11.860
<v Speaker 1>we can see it here. Deployment finished, then

01:20:11.860 --> 01:20:13.540
<v Speaker 1>kpt was triggering the tests.

01:20:13.940 --> 01:20:15.380
<v Speaker 1>Kpt was also doing

01:20:16.980 --> 01:20:17.620
<v Speaker 1>the

01:20:17.780 --> 01:20:20.020
<v Speaker 1>was fetching then the SLIs,

01:20:20.180 --> 01:20:22.765
<v Speaker 1>evaluating the SLOs, and then deciding if to

01:20:22.765 --> 01:20:24.525
<v Speaker 1>promote it or not. So this is this

01:20:24.525 --> 01:20:25.804
<v Speaker 1>is how how it's going.

01:20:26.445 --> 01:20:28.284
<v Speaker 0>Alright. Nice. I like it.

01:20:29.965 --> 01:20:32.125
<v Speaker 0>So that's just gonna take another minute. Why

01:20:32.125 --> 01:20:33.885
<v Speaker 0>don't we tackle another quick question?

01:20:35.490 --> 01:20:37.250
<v Speaker 0>So the question is,

01:20:37.650 --> 01:20:39.970
<v Speaker 0>is the captain CLI using its own service

01:20:39.970 --> 01:20:42.050
<v Speaker 0>account and tokens when talking to the control

01:20:42.050 --> 01:20:43.409
<v Speaker 0>plane? I'm assuming

01:20:44.130 --> 01:20:45.810
<v Speaker 0>it may be just just using my cube

01:20:45.810 --> 01:20:46.850
<v Speaker 0>context. I'm not sure.

01:20:47.494 --> 01:20:47.815
<v Speaker 0>What

01:20:49.255 --> 01:20:50.614
<v Speaker 1>Yeah. We are

01:20:51.255 --> 01:20:54.135
<v Speaker 1>using our own service account. In the beginning,

01:20:54.135 --> 01:20:56.054
<v Speaker 1>we were just using the default service account,

01:20:56.054 --> 01:20:56.534
<v Speaker 1>but

01:20:56.934 --> 01:20:57.494
<v Speaker 1>that's

01:20:58.215 --> 01:21:01.735
<v Speaker 1>this was, I think, changed with

01:21:00.750 --> 01:21:02.910
<v Speaker 1>two versions ago, three versions ago. We changed,

01:21:02.910 --> 01:21:05.070
<v Speaker 1>and now we're using the captain service account.

01:21:05.230 --> 01:21:06.829
<v Speaker 1>So you have a little bit more

01:21:07.870 --> 01:21:10.510
<v Speaker 1>flexibility and control what captain is actually allowed

01:21:10.510 --> 01:21:11.070
<v Speaker 1>to do.

01:21:12.030 --> 01:21:12.830
<v Speaker 0>Alright. Nice.

01:21:14.585 --> 01:21:17.465
<v Speaker 0>Okay. So should I refresh this? It looks

01:21:17.465 --> 01:21:18.905
<v Speaker 0>like it's rolled out to dev and staging,

01:21:18.905 --> 01:21:21.145
<v Speaker 0>but I don't think we've had a production

01:21:21.705 --> 01:21:24.585
<v Speaker 0>deployed. It's still maybe we can take a

01:21:24.585 --> 01:21:26.025
<v Speaker 1>look in staging

01:21:26.025 --> 01:21:28.825
<v Speaker 1>if it's if the deployment has already finished.

01:21:29.610 --> 01:21:32.329
<v Speaker 1>Then if the deployment is already finished, then

01:21:32.810 --> 01:21:35.210
<v Speaker 1>we know that the tests are also executed

01:21:35.210 --> 01:21:36.170
<v Speaker 1>in the background.

01:21:37.449 --> 01:21:39.530
<v Speaker 0>Oh, we've had a CPU thing again.

01:21:39.850 --> 01:21:40.250
<v Speaker 1>Okay.

01:21:43.245 --> 01:21:45.085
<v Speaker 1>I'm assuming Okay. So we are we are

01:21:45.085 --> 01:21:46.845
<v Speaker 1>hitting another CPU limit.

01:21:47.725 --> 01:21:48.845
<v Speaker 1>Yeah. It's just the

01:21:49.725 --> 01:21:51.085
<v Speaker 1>I think the problem that we

01:21:52.365 --> 01:21:54.045
<v Speaker 0>Sorry. Let's just remove it, and then I'll

01:21:54.045 --> 01:21:55.325
<v Speaker 0>check it at another event, and we'll see

01:21:55.325 --> 01:21:56.925
<v Speaker 0>if we can get that to run through

01:21:57.325 --> 01:21:57.885
<v Speaker 0>a time.

01:21:58.820 --> 01:22:00.820
<v Speaker 0>So we can just say

01:22:01.460 --> 01:22:02.820
<v Speaker 0>in the CPU.

01:22:03.619 --> 01:22:05.699
<v Speaker 0>I'll just commit that to prod before doing

01:22:05.699 --> 01:22:07.379
<v Speaker 0>the new artifact as well.

01:22:09.619 --> 01:22:10.260
<v Speaker 0>Edit.

01:22:13.284 --> 01:22:15.204
<v Speaker 0>Yeah. This cluster has a lot of nodes,

01:22:15.204 --> 01:22:17.204
<v Speaker 0>but it's relatively small hardware.

01:22:18.565 --> 01:22:19.364
<v Speaker 0>I should have

01:22:20.085 --> 01:22:22.405
<v Speaker 0>and normally over provision out testing as well.

01:22:22.405 --> 01:22:24.324
<v Speaker 0>Like a billion course, but today I was

01:22:24.324 --> 01:22:25.125
<v Speaker 0>a bit more sensible.

01:22:28.100 --> 01:22:31.140
<v Speaker 0>So I'm gonna trigger this new event based

01:22:31.140 --> 01:22:34.020
<v Speaker 0>on those changes inside of the repository. So

01:22:34.340 --> 01:22:36.820
<v Speaker 0>yeah. Let's see what happens. I'm curious. So

01:22:38.100 --> 01:22:39.700
<v Speaker 0>would you say the bridge is the best

01:22:39.700 --> 01:22:42.075
<v Speaker 0>way to follow along a progressive rule out

01:22:42.075 --> 01:22:43.995
<v Speaker 0>of this application? Would you use the CLI?

01:22:43.995 --> 01:22:45.435
<v Speaker 0>I mean, what's your what's your preference as

01:22:45.435 --> 01:22:47.275
<v Speaker 0>someone that uses SDN, DOT?

01:22:48.555 --> 01:22:51.275
<v Speaker 1>I think the the bridge gives most details

01:22:51.275 --> 01:22:54.315
<v Speaker 1>because if for example, if we can take

01:22:54.315 --> 01:22:55.035
<v Speaker 1>a look in,

01:22:56.760 --> 01:22:58.760
<v Speaker 1>let's say, in the bridge

01:22:59.400 --> 01:23:00.280
<v Speaker 1>on

01:23:01.960 --> 01:23:03.880
<v Speaker 1>let's go for a previous run maybe, that

01:23:03.880 --> 01:23:05.399
<v Speaker 1>way we can see a little bit more,

01:23:05.960 --> 01:23:07.959
<v Speaker 1>and let's probably go for

01:23:08.280 --> 01:23:09.079
<v Speaker 1>some

01:23:10.325 --> 01:23:12.085
<v Speaker 1>okay. Maybe we don't see a lot of

01:23:12.085 --> 01:23:14.485
<v Speaker 1>data. Maybe go for an event

01:23:14.885 --> 01:23:15.525
<v Speaker 1>of

01:23:16.485 --> 01:23:18.725
<v Speaker 1>yeah. Anyway, go for go for any event.

01:23:18.725 --> 01:23:20.885
<v Speaker 1>On the very right hand side, there is

01:23:20.885 --> 01:23:22.325
<v Speaker 1>this computer icon

01:23:22.620 --> 01:23:24.139
<v Speaker 1>or laptop icon.

01:23:24.780 --> 01:23:27.420
<v Speaker 1>And here, it gives you the full cloud

01:23:27.420 --> 01:23:29.659
<v Speaker 1>event that was sent to kptn.

01:23:29.900 --> 01:23:30.539
<v Speaker 1>And

01:23:31.260 --> 01:23:34.060
<v Speaker 1>if you have a quality evaluation or a

01:23:34.060 --> 01:23:35.739
<v Speaker 1>SLI retrieval,

01:23:35.985 --> 01:23:38.304
<v Speaker 1>then these cloud events, they get a lot

01:23:38.304 --> 01:23:40.225
<v Speaker 1>of information. So usually, you have all this

01:23:40.225 --> 01:23:41.905
<v Speaker 1>information. You have also, if there is an

01:23:41.905 --> 01:23:42.784
<v Speaker 1>error message,

01:23:43.025 --> 01:23:44.784
<v Speaker 1>you should be able to see it there

01:23:44.784 --> 01:23:47.425
<v Speaker 1>if the SLI provider sends it. So

01:23:48.409 --> 01:23:48.969
<v Speaker 1>since

01:23:49.210 --> 01:23:49.769
<v Speaker 1>the

01:23:50.090 --> 01:23:51.929
<v Speaker 1>the reason that we are running out of

01:23:51.929 --> 01:23:54.809
<v Speaker 1>CPU is happening after the Helm upgrade,

01:23:55.449 --> 01:23:57.929
<v Speaker 1>we we don't see this exactly

01:23:58.170 --> 01:24:00.090
<v Speaker 1>because that would mean that we send another

01:24:00.090 --> 01:24:02.170
<v Speaker 1>event after we do the Helm upgrade.

01:24:04.565 --> 01:24:06.725
<v Speaker 1>But if there are, for example, if there

01:24:06.725 --> 01:24:09.205
<v Speaker 1>are any tests that are failing or if

01:24:09.205 --> 01:24:10.724
<v Speaker 1>there are some

01:24:10.804 --> 01:24:13.685
<v Speaker 1>service level indicators fetching, then we should be

01:24:13.685 --> 01:24:15.765
<v Speaker 1>able to see this we we should see

01:24:15.765 --> 01:24:18.079
<v Speaker 1>all this data here. Probably,

01:24:18.480 --> 01:24:20.880
<v Speaker 1>if we close this window and go to

01:24:20.880 --> 01:24:21.359
<v Speaker 1>the

01:24:21.840 --> 01:24:24.159
<v Speaker 1>test finished in our dev,

01:24:24.320 --> 01:24:27.599
<v Speaker 1>maybe in the previous run at 03:20,

01:24:28.559 --> 01:24:30.639
<v Speaker 1>there is a test finished event

01:24:31.375 --> 01:24:32.975
<v Speaker 1>on the in the dev stage. So it's

01:24:32.975 --> 01:24:33.775
<v Speaker 1>a little bit

01:24:34.094 --> 01:24:35.374
<v Speaker 1>on the top.

01:24:37.295 --> 01:24:39.135
<v Speaker 1>And maybe we can see here

01:24:40.175 --> 01:24:41.855
<v Speaker 1>yeah. It just says that it's coming from

01:24:41.855 --> 01:24:42.975
<v Speaker 1>the chain media service.

01:24:47.320 --> 01:24:49.960
<v Speaker 1>And, yeah, it doesn't bring a lot of

01:24:50.200 --> 01:24:51.880
<v Speaker 1>a lot of information. We just know that

01:24:51.880 --> 01:24:54.520
<v Speaker 1>the chain meter service sends a pass off

01:24:54.520 --> 01:24:56.600
<v Speaker 1>the tests. It just executed one test.

01:24:58.635 --> 01:25:00.074
<v Speaker 1>What we will see is

01:25:00.955 --> 01:25:03.195
<v Speaker 1>more in the in in staging. We have

01:25:03.195 --> 01:25:04.795
<v Speaker 1>added more tests, we should be able to

01:25:04.795 --> 01:25:05.915
<v Speaker 1>see this in staging.

01:25:06.315 --> 01:25:09.195
<v Speaker 0>Okay. So staging rollout is just about completed.

01:25:09.195 --> 01:25:10.955
<v Speaker 0>Looks like it's just waiting for the STL

01:25:10.955 --> 01:25:11.915
<v Speaker 0>sidecar maybe.

01:25:13.550 --> 01:25:16.510
<v Speaker 0>Well, you know, one container pending here. Yeah.

01:25:16.510 --> 01:25:18.110
<v Speaker 1>Well, it should pop up. Second.

01:25:18.910 --> 01:25:20.670
<v Speaker 0>I'm so impatient. I should just try to

01:25:20.670 --> 01:25:20.910
<v Speaker 0>watch.

01:25:25.675 --> 01:25:26.555
<v Speaker 1>That's

01:25:26.555 --> 01:25:29.035
<v Speaker 1>good. So one is coming up, and the

01:25:29.035 --> 01:25:31.595
<v Speaker 1>other one is, being terminated since we we

01:25:31.595 --> 01:25:32.715
<v Speaker 1>don't need it anymore.

01:25:33.115 --> 01:25:34.235
<v Speaker 1>That also means

01:25:34.475 --> 01:25:35.195
<v Speaker 1>that,

01:25:35.915 --> 01:25:36.955
<v Speaker 1>now the

01:25:37.115 --> 01:25:37.435
<v Speaker 1>tests

01:25:38.040 --> 01:25:40.199
<v Speaker 1>we have not made it yet to production

01:25:40.440 --> 01:25:42.760
<v Speaker 1>because the quality gate in staging never

01:25:43.000 --> 01:25:43.880
<v Speaker 1>was

01:25:43.880 --> 01:25:46.280
<v Speaker 1>not successful yet. So in in this case,

01:25:46.280 --> 01:25:48.360
<v Speaker 1>we could not we we cannot ship anything

01:25:48.360 --> 01:25:51.400
<v Speaker 1>to production as long as it's not validated

01:25:51.400 --> 01:25:52.040
<v Speaker 1>in staging.

01:25:52.655 --> 01:25:55.454
<v Speaker 1>Okay. So what we'll see is

01:25:56.094 --> 01:25:57.614
<v Speaker 1>the deployment finished.

01:25:57.935 --> 01:25:59.935
<v Speaker 1>And after the deployment is finished, right now,

01:25:59.935 --> 01:26:01.855
<v Speaker 1>the Chimida tests are being executed.

01:26:02.495 --> 01:26:04.895
<v Speaker 1>There is one improvement coming in the bridge

01:26:05.440 --> 01:26:08.400
<v Speaker 1>that we will indicate also that now tests

01:26:08.400 --> 01:26:09.600
<v Speaker 1>are being executed.

01:26:09.840 --> 01:26:12.160
<v Speaker 1>It's a little bit missing here, this information,

01:26:12.160 --> 01:26:14.320
<v Speaker 1>because we just see the deployment is finished,

01:26:14.640 --> 01:26:17.119
<v Speaker 1>and it needs some background,

01:26:17.520 --> 01:26:19.200
<v Speaker 1>in in kpten that we know, okay.

01:26:20.435 --> 01:26:22.915
<v Speaker 1>Every time the deployment is finished, captain will

01:26:22.915 --> 01:26:26.035
<v Speaker 1>trigger the tests. This information, unfortunately, is missing

01:26:26.035 --> 01:26:26.835
<v Speaker 1>in the bridge.

01:26:27.555 --> 01:26:30.595
<v Speaker 1>Yeah. We somehow missed to to also put

01:26:30.595 --> 01:26:32.275
<v Speaker 1>this information in the bridge, but we are

01:26:32.275 --> 01:26:33.475
<v Speaker 1>working on this to improve it.

01:26:37.210 --> 01:26:39.530
<v Speaker 0>Okay. So we just need to wait for

01:26:39.530 --> 01:26:41.530
<v Speaker 0>those tests. So does that take long?

01:26:42.650 --> 01:26:44.010
<v Speaker 1>Usually, about two minutes.

01:26:44.250 --> 01:26:46.650
<v Speaker 0>About two minutes. Couple of yeah. And then

01:26:46.650 --> 01:26:48.170
<v Speaker 1>I will just reach

01:26:48.810 --> 01:26:49.770
<v Speaker 1>out

01:26:51.085 --> 01:26:53.564
<v Speaker 1>to to move a couple of things.

01:26:59.405 --> 01:27:01.405
<v Speaker 0>Oh, have you got another call scheduled there?

01:27:03.250 --> 01:27:05.170
<v Speaker 1>Yeah. I think I can move it. So

01:27:05.489 --> 01:27:08.210
<v Speaker 1>I'm I'm I'm really excited here to to

01:27:08.210 --> 01:27:10.369
<v Speaker 1>get this into production.

01:27:11.010 --> 01:27:13.010
<v Speaker 1>You know, that that that's all we want

01:27:13.010 --> 01:27:15.810
<v Speaker 1>with kpt in the shipping applications to production

01:27:15.810 --> 01:27:18.465
<v Speaker 1>without breaking anything, and we are we are

01:27:18.465 --> 01:27:19.985
<v Speaker 1>good in breaking here. So

01:27:21.265 --> 01:27:22.785
<v Speaker 0>No. This this is this is look at

01:27:22.785 --> 01:27:24.145
<v Speaker 0>this. It's it's starting to click with me

01:27:24.145 --> 01:27:25.585
<v Speaker 0>now. I can see and I'm starting to

01:27:25.585 --> 01:27:27.665
<v Speaker 0>understand this UI kinda threw me at first.

01:27:27.665 --> 01:27:28.705
<v Speaker 0>But what, you know, what we can see

01:27:28.705 --> 01:27:31.425
<v Speaker 0>is the this config changed event here, and

01:27:31.425 --> 01:27:32.385
<v Speaker 0>then we're actually

01:27:32.920 --> 01:27:34.600
<v Speaker 0>it just I don't know how I missed

01:27:34.600 --> 01:27:36.600
<v Speaker 0>it, but we have the first event here

01:27:36.600 --> 01:27:38.440
<v Speaker 0>and then this is okay for development environment.

01:27:38.440 --> 01:27:40.040
<v Speaker 0>We're gonna do deploy. We're gonna run our

01:27:40.040 --> 01:27:42.280
<v Speaker 0>tests. You know, we get their SLI stuff

01:27:42.280 --> 01:27:44.360
<v Speaker 0>going on here. It does some evaluation and

01:27:44.360 --> 01:27:45.640
<v Speaker 0>you can actually see it move on to

01:27:45.640 --> 01:27:47.480
<v Speaker 0>staging. Like, I can actually start to see

01:27:48.445 --> 01:27:50.364
<v Speaker 0>how all this flows together now. It's starting

01:27:50.364 --> 01:27:51.725
<v Speaker 0>to make much more sense to me. In

01:27:51.725 --> 01:27:53.644
<v Speaker 0>fact, there we go. There's our production now.

01:27:55.165 --> 01:27:56.925
<v Speaker 0>Events kicking off. So

01:27:57.645 --> 01:27:59.405
<v Speaker 0>and I've had the light bulb moment. I

01:27:59.405 --> 01:28:01.165
<v Speaker 0>now understand what's going on.

01:28:03.930 --> 01:28:05.929
<v Speaker 0>This means if I pop over here okay.

01:28:07.450 --> 01:28:08.010
<v Speaker 1>So

01:28:09.130 --> 01:28:11.690
<v Speaker 1>we could see yeah. And the evaluation,

01:28:11.770 --> 01:28:13.530
<v Speaker 1>what what did it say? Could we did

01:28:13.530 --> 01:28:15.210
<v Speaker 1>we get a good score in the evaluation?

01:28:15.610 --> 01:28:17.050
<v Speaker 1>That's pretty,

01:28:17.050 --> 01:28:18.250
<v Speaker 1>pretty good. So we got,

01:28:19.915 --> 01:28:20.795
<v Speaker 1>basically

01:28:22.315 --> 01:28:22.715
<v Speaker 1>pass

01:28:23.435 --> 01:28:24.074
<v Speaker 1>with

01:28:24.395 --> 01:28:25.514
<v Speaker 1>90%,

01:28:27.355 --> 01:28:30.635
<v Speaker 1>which is no. Actually, with a %. So

01:28:33.480 --> 01:28:35.640
<v Speaker 1>what what we've done here is or what

01:28:35.640 --> 01:28:37.880
<v Speaker 1>kpten has done is it was triggering the

01:28:37.880 --> 01:28:38.599
<v Speaker 1>tests.

01:28:38.680 --> 01:28:40.440
<v Speaker 1>The tests have been finished. It was reaching

01:28:40.440 --> 01:28:41.800
<v Speaker 1>out to to

01:28:41.800 --> 01:28:44.760
<v Speaker 1>to query the data for the exact testing

01:28:44.760 --> 01:28:46.280
<v Speaker 1>time frame, and now we can see

01:28:47.385 --> 01:28:50.585
<v Speaker 1>that the response time is is meeting our

01:28:50.585 --> 01:28:52.665
<v Speaker 1>requirements. So that's that's pretty cool. And now

01:28:52.665 --> 01:28:54.024
<v Speaker 1>we're moving on to production.

01:28:54.505 --> 01:28:56.744
<v Speaker 1>And in production, it's doing the same the

01:28:56.744 --> 01:28:57.544
<v Speaker 1>same game

01:28:58.105 --> 01:28:58.824
<v Speaker 1>with

01:28:59.430 --> 01:29:00.470
<v Speaker 1>deploying,

01:29:01.190 --> 01:29:02.790
<v Speaker 1>trying to execute tests.

01:29:03.190 --> 01:29:05.110
<v Speaker 1>Actually, in production, we have not defined any

01:29:05.110 --> 01:29:08.150
<v Speaker 1>tests. Usually, it's our end users doing testing,

01:29:08.150 --> 01:29:09.910
<v Speaker 1>let's call it, for us in production.

01:29:11.430 --> 01:29:11.750
<v Speaker 1>But,

01:29:12.305 --> 01:29:15.025
<v Speaker 1>yeah, this is what we'll see. And with

01:29:15.025 --> 01:29:17.505
<v Speaker 1>a blue green deployment, we have prepared

01:29:17.505 --> 01:29:19.985
<v Speaker 1>a second version of this microservice,

01:29:20.145 --> 01:29:22.225
<v Speaker 1>which is a very slow version that will

01:29:22.225 --> 01:29:22.864
<v Speaker 1>break

01:29:23.105 --> 01:29:25.745
<v Speaker 1>the quality gate and that will not be

01:29:25.745 --> 01:29:28.290
<v Speaker 1>allowed to move on from staging to production.

01:29:28.290 --> 01:29:30.050
<v Speaker 1>I can already spoil this a little bit

01:29:30.050 --> 01:29:32.050
<v Speaker 1>because the tests are

01:29:32.690 --> 01:29:35.090
<v Speaker 1>yeah. I'm spoiling because the tests will be

01:29:35.090 --> 01:29:37.250
<v Speaker 1>running for a couple of more minutes since

01:29:37.250 --> 01:29:39.409
<v Speaker 1>we are sending the same amount of requests.

01:29:39.409 --> 01:29:41.615
<v Speaker 1>I think it's 5,000 or 10,000 requests against

01:29:41.615 --> 01:29:44.015
<v Speaker 1>the service. And instead of five instead of

01:29:44.015 --> 01:29:46.735
<v Speaker 1>two minutes, they will take about eight minutes.

01:29:47.215 --> 01:29:48.895
<v Speaker 1>And I'm not sure if we want to

01:29:48.895 --> 01:29:52.015
<v Speaker 1>wait these eight minutes to see this evaluation.

01:29:52.015 --> 01:29:54.095
<v Speaker 1>It will be red, and we'll be indicating

01:29:54.530 --> 01:29:57.010
<v Speaker 1>that the response time for the ninety fifth

01:29:57.010 --> 01:29:59.570
<v Speaker 1>percentile is not within the boundaries that we

01:29:59.570 --> 01:30:01.730
<v Speaker 1>defined. So this is this is what we

01:30:01.730 --> 01:30:02.370
<v Speaker 1>will see.

01:30:03.890 --> 01:30:04.530
<v Speaker 0>Okay.

01:30:05.490 --> 01:30:06.610
<v Speaker 0>So does

01:30:06.610 --> 01:30:08.915
<v Speaker 0>that does that change, and I mean, that

01:30:08.915 --> 01:30:10.435
<v Speaker 0>we have this deployed everywhere? I mean, if

01:30:10.435 --> 01:30:11.875
<v Speaker 0>I run get pods in production,

01:30:13.555 --> 01:30:15.475
<v Speaker 0>that's it. Oh, no. This is

01:30:16.355 --> 01:30:17.795
<v Speaker 0>so what's this primary

01:30:18.995 --> 01:30:20.915
<v Speaker 0>pod that's running? Is this more tests?

01:30:23.130 --> 01:30:24.570
<v Speaker 1>No. That's actually

01:30:25.929 --> 01:30:28.010
<v Speaker 1>since we're doing this blue green deployment, we

01:30:28.010 --> 01:30:30.010
<v Speaker 1>are spinning up the first version, and we

01:30:30.010 --> 01:30:32.330
<v Speaker 1>are spinning up also another version. So we

01:30:32.330 --> 01:30:35.130
<v Speaker 1>prepare the blue green, the traffic shift already.

01:30:35.130 --> 01:30:36.010
<v Speaker 1>This

01:30:36.010 --> 01:30:38.170
<v Speaker 1>time, it's the first deployment,

01:30:38.625 --> 01:30:41.345
<v Speaker 1>So we are bringing up two times the

01:30:41.345 --> 01:30:43.505
<v Speaker 1>same version, so we cannot really roll back

01:30:43.505 --> 01:30:45.585
<v Speaker 1>because there is no previous version. But if

01:30:45.585 --> 01:30:48.945
<v Speaker 1>we do more of those blue green deployments,

01:30:48.945 --> 01:30:51.105
<v Speaker 1>if we send the captain if we send

01:30:51.105 --> 01:30:53.905
<v Speaker 1>the shopping cart in version 11 dot three,

01:30:53.905 --> 01:30:56.860
<v Speaker 1>eleven dot or dot two, dot three

01:30:57.180 --> 01:31:00.380
<v Speaker 1>that are already prepared, then we can see

01:31:00.380 --> 01:31:02.380
<v Speaker 1>the primary is the one that's receiving the

01:31:02.380 --> 01:31:04.220
<v Speaker 1>traffic, and the other one is the one

01:31:04.220 --> 01:31:06.860
<v Speaker 1>that will go away. So in staging,

01:31:07.905 --> 01:31:10.145
<v Speaker 1>there is there are only there's only one

01:31:10.145 --> 01:31:12.545
<v Speaker 1>left, and in production, there are right now

01:31:12.545 --> 01:31:13.105
<v Speaker 1>two.

01:31:13.825 --> 01:31:15.585
<v Speaker 1>But if after some evaluation p

01:31:16.225 --> 01:31:16.945
<v Speaker 1>period,

01:31:17.345 --> 01:31:19.344
<v Speaker 1>if there is no rollback indicated,

01:31:19.425 --> 01:31:21.265
<v Speaker 1>then the other one will just be removed

01:31:21.265 --> 01:31:21.905
<v Speaker 1>from kpten.

01:31:23.719 --> 01:31:25.880
<v Speaker 0>Okay. I understand. Nice.

01:31:27.480 --> 01:31:30.840
<v Speaker 0>So is that my full rollout of karts

01:31:30.920 --> 01:31:34.039
<v Speaker 0>finished? In this case, yep. We are finished.

01:31:34.440 --> 01:31:36.840
<v Speaker 1>We it would have been possible to just

01:31:36.840 --> 01:31:37.880
<v Speaker 1>bring

01:31:38.235 --> 01:31:40.715
<v Speaker 1>cards on the on the on the browser

01:31:40.715 --> 01:31:41.354
<v Speaker 1>and

01:31:43.114 --> 01:31:45.195
<v Speaker 1>and take a look when there is the

01:31:45.195 --> 01:31:47.835
<v Speaker 1>traffic switch actually from one version to the

01:31:47.835 --> 01:31:48.394
<v Speaker 1>other.

01:31:49.195 --> 01:31:52.475
<v Speaker 1>We are doing the blue green deployments with

01:31:52.930 --> 01:31:55.410
<v Speaker 1>with Istio. So that means we are deploying

01:31:55.410 --> 01:31:57.490
<v Speaker 1>the new version. Once it's ready, we are

01:31:57.490 --> 01:31:59.890
<v Speaker 1>moving the traffic to this new version. And

01:31:59.890 --> 01:32:01.490
<v Speaker 1>we are if we're going back, then we

01:32:01.490 --> 01:32:04.210
<v Speaker 1>are first moving the traffic to the previous

01:32:04.210 --> 01:32:06.530
<v Speaker 1>version and removing this. So there's no downtime

01:32:06.530 --> 01:32:07.010
<v Speaker 1>or anything.

01:32:07.655 --> 01:32:10.375
<v Speaker 1>That's actually what we already know from Kubernetes,

01:32:10.375 --> 01:32:12.135
<v Speaker 1>but it's also in this this way we're

01:32:12.135 --> 01:32:12.375
<v Speaker 1>using

01:32:13.335 --> 01:32:15.495
<v Speaker 1>we are basically implementing a little bit by

01:32:15.495 --> 01:32:16.135
<v Speaker 1>ourselves,

01:32:16.775 --> 01:32:18.055
<v Speaker 1>but we made sure that there is no

01:32:18.055 --> 01:32:19.895
<v Speaker 1>downtime from switching from one version to the

01:32:19.895 --> 01:32:20.055
<v Speaker 1>other.

01:32:21.489 --> 01:32:22.849
<v Speaker 0>Alright. Cool.

01:32:23.969 --> 01:32:25.650
<v Speaker 0>Is there anything else you'd like to show

01:32:25.650 --> 01:32:26.449
<v Speaker 0>just now?

01:32:29.170 --> 01:32:31.570
<v Speaker 0>Pardon? Is there anything else you want to

01:32:31.570 --> 01:32:32.530
<v Speaker 0>go over?

01:32:33.730 --> 01:32:36.610
<v Speaker 1>So what what we've seen right now is

01:32:38.265 --> 01:32:40.344
<v Speaker 1>blue green deployment, the multistage

01:32:40.745 --> 01:32:42.585
<v Speaker 1>deployment with kpten,

01:32:43.705 --> 01:32:44.745
<v Speaker 1>with helm,

01:32:44.745 --> 01:32:47.545
<v Speaker 1>with using CloudEvents, with having Istio, with having

01:32:47.545 --> 01:32:49.785
<v Speaker 1>Prometheus. So I think we have installed a

01:32:49.785 --> 01:32:52.025
<v Speaker 1>lot and had a lot of technology.

01:32:52.780 --> 01:32:54.459
<v Speaker 1>Although the parts

01:32:54.620 --> 01:32:56.539
<v Speaker 1>that once set up,

01:32:57.020 --> 01:32:59.020
<v Speaker 1>it's basically just the kptn CLI that you

01:32:59.020 --> 01:33:01.900
<v Speaker 1>need with the kptn send event,

01:33:02.460 --> 01:33:04.860
<v Speaker 1>new artifact to trigger a new deployment, or

01:33:04.860 --> 01:33:06.300
<v Speaker 1>configure your monitoring

01:33:06.780 --> 01:33:08.060
<v Speaker 1>to to set this all up.

01:33:09.315 --> 01:33:10.195
<v Speaker 1>As said,

01:33:10.435 --> 01:33:12.995
<v Speaker 1>it just takes a while for the the

01:33:12.995 --> 01:33:15.475
<v Speaker 1>second version to run all its tests, but

01:33:15.475 --> 01:33:17.955
<v Speaker 1>we have also added the Chimida tests. I'm

01:33:17.955 --> 01:33:20.114
<v Speaker 1>I'm happy to to stay and then move

01:33:20.114 --> 01:33:22.195
<v Speaker 1>through all the other parts of the tutorial.

01:33:23.110 --> 01:33:23.750
<v Speaker 1>But,

01:33:24.070 --> 01:33:25.590
<v Speaker 1>yeah, if you want to wrap up here,

01:33:25.590 --> 01:33:27.990
<v Speaker 1>that's also totally fine. And maybe we can

01:33:27.990 --> 01:33:29.670
<v Speaker 1>do a follow-up and taking a look maybe

01:33:29.670 --> 01:33:30.390
<v Speaker 1>on the

01:33:31.350 --> 01:33:34.550
<v Speaker 1>auto remediation parts of kpten later on because

01:33:35.015 --> 01:33:36.295
<v Speaker 1>this is

01:33:36.615 --> 01:33:39.415
<v Speaker 1>basically, once we have things up and running

01:33:39.415 --> 01:33:40.534
<v Speaker 1>in production,

01:33:40.855 --> 01:33:43.495
<v Speaker 1>it's another use case of kptn to trigger

01:33:43.495 --> 01:33:46.535
<v Speaker 1>remediation actions and to evaluate these remediation actions.

01:33:49.060 --> 01:33:49.619
<v Speaker 0>Okay.

01:33:49.940 --> 01:33:51.780
<v Speaker 0>Okay. So let's let's

01:33:54.020 --> 01:33:56.100
<v Speaker 0>I have no idea. So let's just say

01:33:56.100 --> 01:33:57.620
<v Speaker 0>what we wanna do. I what I wanna

01:33:57.620 --> 01:33:58.980
<v Speaker 0>what I wanna be careful with is I

01:33:58.980 --> 01:33:59.940
<v Speaker 0>I I don't want to

01:34:00.875 --> 01:34:03.195
<v Speaker 0>rush anything that we show so that people

01:34:03.195 --> 01:34:04.635
<v Speaker 0>don't get a good understanding of it. But

01:34:04.635 --> 01:34:06.635
<v Speaker 0>at the same time, I'm I'm happy to

01:34:06.635 --> 01:34:08.475
<v Speaker 0>make sure that we, you know, we finish

01:34:08.475 --> 01:34:10.075
<v Speaker 0>off what we started now. So we can

01:34:10.075 --> 01:34:11.595
<v Speaker 0>definitely schedule something else and we can cover

01:34:11.595 --> 01:34:12.555
<v Speaker 0>more of the captain features.

01:34:13.640 --> 01:34:15.400
<v Speaker 0>You're saying if we deploy the slow one,

01:34:15.400 --> 01:34:17.560
<v Speaker 0>what that's gonna do is show us that

01:34:17.560 --> 01:34:19.720
<v Speaker 0>the tests fail on the staging phase, which

01:34:19.720 --> 01:34:21.560
<v Speaker 0>will block the deployment to production. So why

01:34:21.560 --> 01:34:23.080
<v Speaker 0>don't we trigger that now?

01:34:23.240 --> 01:34:24.840
<v Speaker 0>We'll see if anyone has any questions, and

01:34:24.840 --> 01:34:25.880
<v Speaker 0>we can do a little bit of a

01:34:25.880 --> 01:34:27.720
<v Speaker 0>summary while we wait for that to happen.

01:34:27.720 --> 01:34:29.320
<v Speaker 0>And then we can

01:34:30.175 --> 01:34:32.095
<v Speaker 0>schedule a follow-up, and we can dive even

01:34:32.095 --> 01:34:33.935
<v Speaker 0>deeper into anything that we haven't covered in

01:34:33.935 --> 01:34:34.815
<v Speaker 0>particular field.

01:34:35.535 --> 01:34:38.015
<v Speaker 1>Sounds good. Yeah. Let's let's deploy the slow

01:34:38.015 --> 01:34:38.575
<v Speaker 1>version

01:34:38.895 --> 01:34:41.935
<v Speaker 1>because it it will be quite nice to

01:34:41.935 --> 01:34:43.695
<v Speaker 1>see what what is going to happen.

01:34:44.560 --> 01:34:47.360
<v Speaker 1>That kpt will deploy it first, will trigger

01:34:47.360 --> 01:34:49.119
<v Speaker 1>the tests, then come back with,

01:34:49.440 --> 01:34:51.199
<v Speaker 1>like, the rollback

01:34:51.520 --> 01:34:53.840
<v Speaker 0>Yeah. Of this version. So that's what typically

01:34:53.840 --> 01:34:55.599
<v Speaker 0>happen in my CI system.

01:34:56.160 --> 01:34:57.760
<v Speaker 0>I said, hey. We have a new artifact.

01:34:57.760 --> 01:34:59.875
<v Speaker 0>We just built this new release. We tagged

01:34:59.875 --> 01:35:00.995
<v Speaker 0>it with 0112.

01:35:00.995 --> 01:35:02.594
<v Speaker 0>We send the event to captain.

01:35:03.074 --> 01:35:05.155
<v Speaker 0>What's happening here is that because captain has

01:35:05.155 --> 01:35:07.554
<v Speaker 0>an event driven system, it detects this change.

01:35:07.554 --> 01:35:08.835
<v Speaker 0>So let's yep. There we go. We can

01:35:08.835 --> 01:35:09.554
<v Speaker 0>we can see here.

01:35:11.230 --> 01:35:13.070
<v Speaker 0>And that's now gonna start to prepare the

01:35:13.070 --> 01:35:13.870
<v Speaker 0>deployment

01:35:13.950 --> 01:35:16.350
<v Speaker 0>to our development environment. And I just wanna

01:35:16.350 --> 01:35:18.270
<v Speaker 0>make sure we tile this together. If anyone

01:35:18.270 --> 01:35:19.950
<v Speaker 0>has questions, please drop them in the chat

01:35:19.950 --> 01:35:21.550
<v Speaker 0>and we'll we'll tackle that.

01:35:22.204 --> 01:35:23.804
<v Speaker 0>But if we come over to here

01:35:24.125 --> 01:35:25.565
<v Speaker 0>oops. Let's

01:35:25.565 --> 01:35:26.604
<v Speaker 0>go back to

01:35:29.085 --> 01:35:30.524
<v Speaker 0>the directories.

01:35:30.525 --> 01:35:32.524
<v Speaker 0>That's right. There we go.

01:35:33.644 --> 01:35:34.364
<v Speaker 0>This

01:35:34.800 --> 01:35:36.480
<v Speaker 0>this is like the entry point. This is

01:35:36.560 --> 01:35:38.959
<v Speaker 0>this describes all of our environments, the ship

01:35:39.440 --> 01:35:41.119
<v Speaker 0>shipyard.yaml.

01:35:41.599 --> 01:35:43.199
<v Speaker 0>And I just wanna make sure we we

01:35:43.199 --> 01:35:45.040
<v Speaker 0>cover this again. So we have a development

01:35:45.040 --> 01:35:47.679
<v Speaker 0>environment which has a deployment strategy of direct

01:35:47.655 --> 01:35:49.655
<v Speaker 0>and a test strategy of functional. So what

01:35:49.655 --> 01:35:50.854
<v Speaker 0>that means is

01:35:51.494 --> 01:35:53.974
<v Speaker 0>the deployment strategy will always deploy whenever there's

01:35:53.974 --> 01:35:56.534
<v Speaker 0>a new artifact. And the testing strategy means

01:35:56.534 --> 01:35:58.695
<v Speaker 0>it's gonna run the functional tests. And if

01:35:58.695 --> 01:35:59.255
<v Speaker 0>they pass,

01:36:01.820 --> 01:36:03.659
<v Speaker 0>it won't roll back the deployment.

01:36:03.980 --> 01:36:05.659
<v Speaker 0>Is my understanding of that correct?

01:36:06.300 --> 01:36:07.099
<v Speaker 1>Yes.

01:36:07.340 --> 01:36:07.979
<v Speaker 0>Okay.

01:36:08.380 --> 01:36:10.539
<v Speaker 0>So if my functional tests failed when I

01:36:10.539 --> 01:36:12.860
<v Speaker 0>built that new artifact, it would revert the

01:36:12.860 --> 01:36:14.539
<v Speaker 0>deployment back to the last working version.

01:36:15.425 --> 01:36:17.665
<v Speaker 0>And I get it wrong. Just interject.

01:36:17.665 --> 01:36:20.065
<v Speaker 1>In in this case, no. So if you

01:36:20.065 --> 01:36:22.305
<v Speaker 1>do a direct deployment, it won't roll back

01:36:22.305 --> 01:36:22.945
<v Speaker 1>anything.

01:36:23.665 --> 01:36:26.065
<v Speaker 1>What it will do is it will block

01:36:26.065 --> 01:36:26.705
<v Speaker 1>it from

01:36:27.180 --> 01:36:29.500
<v Speaker 1>from move on to the next stages, obviously.

01:36:29.500 --> 01:36:32.220
<v Speaker 1>So if, the functional tests fail or if

01:36:32.220 --> 01:36:33.020
<v Speaker 1>some

01:36:33.180 --> 01:36:36.380
<v Speaker 1>quality gate may be, responding on the or

01:36:36.620 --> 01:36:40.060
<v Speaker 1>checking the response time or the throughput or

01:36:40.060 --> 01:36:43.344
<v Speaker 1>the number of outgoing service calls or whatever.

01:36:43.425 --> 01:36:45.345
<v Speaker 1>If there is a quality gate that fails,

01:36:45.345 --> 01:36:47.185
<v Speaker 1>it will block it to move to the

01:36:47.185 --> 01:36:47.985
<v Speaker 1>next stage.

01:36:48.385 --> 01:36:51.345
<v Speaker 1>With a direct deployment, it will run rollback

01:36:51.345 --> 01:36:53.665
<v Speaker 1>is only supported in the in blue green

01:36:53.665 --> 01:36:55.940
<v Speaker 1>right now. Alright. Okay. Thank you. That makes

01:36:55.940 --> 01:36:56.820
<v Speaker 0>much more sense.

01:36:57.300 --> 01:36:59.460
<v Speaker 0>Then we have our staging environment. And this

01:36:59.460 --> 01:37:01.700
<v Speaker 0>time, we have an approval strategy of both

01:37:01.700 --> 01:37:04.100
<v Speaker 0>automatic on a pass and automatic on a

01:37:04.100 --> 01:37:05.460
<v Speaker 0>warning. So regardless,

01:37:05.460 --> 01:37:07.460
<v Speaker 0>it's gonna do its best. As long as

01:37:07.460 --> 01:37:09.620
<v Speaker 0>the test pass is gonna promote that

01:37:10.065 --> 01:37:11.585
<v Speaker 0>to the next stage.

01:37:11.665 --> 01:37:14.145
<v Speaker 0>And our testing strategy here isn't functional, but

01:37:14.145 --> 01:37:15.025
<v Speaker 0>performance.

01:37:15.265 --> 01:37:15.905
<v Speaker 0>Now

01:37:16.305 --> 01:37:18.625
<v Speaker 0>are these test strategies is this related to

01:37:18.625 --> 01:37:21.425
<v Speaker 0>the GMX configurations that we applied earlier?

01:37:22.145 --> 01:37:22.385
<v Speaker 1>Yes.

01:37:24.090 --> 01:37:26.730
<v Speaker 1>It's it's related also to the Chimera service.

01:37:26.730 --> 01:37:29.770
<v Speaker 1>So it's basically an indicator which kind of

01:37:29.770 --> 01:37:31.849
<v Speaker 1>test to execute.

01:37:32.090 --> 01:37:34.489
<v Speaker 1>The Chimera service, they also have a configuration

01:37:34.489 --> 01:37:37.395
<v Speaker 1>file, but it's not needed. There is no

01:37:37.395 --> 01:37:40.115
<v Speaker 1>additional configuration file needed. So we only added

01:37:40.115 --> 01:37:41.475
<v Speaker 1>the g m x file,

01:37:41.635 --> 01:37:44.675
<v Speaker 1>which was the basically already the test instructions.

01:37:44.835 --> 01:37:46.675
<v Speaker 1>The you can always add a little bit

01:37:46.675 --> 01:37:47.715
<v Speaker 1>more configuration

01:37:47.715 --> 01:37:50.890
<v Speaker 1>to configure the number of users and and

01:37:50.890 --> 01:37:54.010
<v Speaker 1>and concurrent users and number of requests to

01:37:54.010 --> 01:37:54.650
<v Speaker 1>be sent.

01:37:55.210 --> 01:37:58.490
<v Speaker 1>But the test strategy already indicates

01:37:58.490 --> 01:37:59.850
<v Speaker 1>which test

01:38:00.090 --> 01:38:02.895
<v Speaker 1>to execute. If it's just a functional test

01:38:02.895 --> 01:38:04.895
<v Speaker 1>that are usually a little bit faster or

01:38:04.895 --> 01:38:07.934
<v Speaker 1>performance test that hit more load. Yeah. Okay.

01:38:07.935 --> 01:38:11.534
<v Speaker 0>So these deployment strategy values, this this seem

01:38:11.534 --> 01:38:13.695
<v Speaker 0>kinda special. So we got direct. We got

01:38:13.695 --> 01:38:15.614
<v Speaker 0>blue green service. Is there like a Canadian?

01:38:15.614 --> 01:38:17.540
<v Speaker 0>Are there any other deployment strategies that we

01:38:17.540 --> 01:38:18.659
<v Speaker 0>haven't really looked at?

01:38:19.860 --> 01:38:22.020
<v Speaker 1>Canary is not yet supported.

01:38:22.660 --> 01:38:25.220
<v Speaker 1>Everything is prepared in the background. So with

01:38:25.220 --> 01:38:27.860
<v Speaker 1>Istio, it will be very easy to shift

01:38:27.860 --> 01:38:30.405
<v Speaker 1>the traffic not only from 100%

01:38:30.405 --> 01:38:31.525
<v Speaker 1>to 0%,

01:38:31.525 --> 01:38:33.284
<v Speaker 1>but doing, 100%,

01:38:33.364 --> 01:38:36.485
<v Speaker 1>then eighty twenty, 70 30, 50 50, whatever

01:38:36.485 --> 01:38:39.364
<v Speaker 1>you want to do. It's not yet implemented,

01:38:39.605 --> 01:38:42.085
<v Speaker 1>but this is something that's also coming in

01:38:42.085 --> 01:38:43.045
<v Speaker 1>the next stages.

01:38:43.870 --> 01:38:47.389
<v Speaker 1>It's interesting also that we have not received

01:38:48.030 --> 01:38:50.670
<v Speaker 1>or it's not the most common

01:38:50.989 --> 01:38:51.949
<v Speaker 1>thing that

01:38:52.590 --> 01:38:54.910
<v Speaker 1>that or not the most common request that

01:38:54.910 --> 01:38:57.150
<v Speaker 1>we get that we have to implement

01:38:57.230 --> 01:38:57.790
<v Speaker 1>Canary.

01:38:58.165 --> 01:39:00.645
<v Speaker 1>It's more the multi cluster support, actually, that

01:39:00.645 --> 01:39:02.885
<v Speaker 1>we already had in the stream that people

01:39:02.885 --> 01:39:05.764
<v Speaker 1>were asking. Yeah. Yeah. I can imagine why.

01:39:05.844 --> 01:39:06.244
<v Speaker 0>Okay.

01:39:06.885 --> 01:39:08.324
<v Speaker 0>And then the last part of our shipyard

01:39:08.324 --> 01:39:10.245
<v Speaker 0>demo, we define our production environment, has a

01:39:10.245 --> 01:39:13.489
<v Speaker 0>slightly different approval strategy of automatic slash manual

01:39:13.489 --> 01:39:15.250
<v Speaker 0>and then the remediation.

01:39:15.890 --> 01:39:16.449
<v Speaker 0>So

01:39:17.410 --> 01:39:18.930
<v Speaker 0>one of the things we've had at the

01:39:18.930 --> 01:39:20.370
<v Speaker 0>start, which was really subtle, but I think

01:39:20.370 --> 01:39:22.210
<v Speaker 0>it's also important, is that

01:39:23.010 --> 01:39:24.690
<v Speaker 0>I'm not gonna I better cut find the

01:39:24.690 --> 01:39:27.410
<v Speaker 0>commander. But when we onboard

01:39:27.410 --> 01:39:27.810
<v Speaker 0>it,

01:39:29.405 --> 01:39:31.645
<v Speaker 0>what did we all did we override

01:39:31.885 --> 01:39:32.525
<v Speaker 0>the

01:39:33.725 --> 01:39:35.805
<v Speaker 0>deployment strategy on one of these? Yeah. We

01:39:35.805 --> 01:39:37.645
<v Speaker 0>did here. Right? Yeah. Yeah. Yep.

01:39:38.845 --> 01:39:41.565
<v Speaker 0>So for individual services, I can actually say,

01:39:41.645 --> 01:39:44.400
<v Speaker 0>you know, I I don't want a blue

01:39:44.400 --> 01:39:46.560
<v Speaker 0>green deployment of this. Like, I guess the

01:39:46.560 --> 01:39:48.160
<v Speaker 0>database is a really good example and probably

01:39:48.160 --> 01:39:50.240
<v Speaker 0>why it's included in this tutorial. You you

01:39:50.240 --> 01:39:51.680
<v Speaker 0>don't want to run two different versions of

01:39:51.680 --> 01:39:53.360
<v Speaker 0>them at the same time. You may just

01:39:53.360 --> 01:39:54.960
<v Speaker 0>want to go ahead and pay the bill

01:39:54.960 --> 01:39:56.880
<v Speaker 0>and get that running as fast as possible.

01:39:56.880 --> 01:39:57.120
<v Speaker 0>So

01:39:58.265 --> 01:40:00.665
<v Speaker 0>is that reflected in the get repository somewhere?

01:40:00.665 --> 01:40:01.864
<v Speaker 0>If I take a look

01:40:02.425 --> 01:40:03.225
<v Speaker 0>something?

01:40:03.865 --> 01:40:04.505
<v Speaker 1>Mhmm.

01:40:05.545 --> 01:40:06.745
<v Speaker 0>So if I go to

01:40:07.465 --> 01:40:08.825
<v Speaker 0>oh, that there won't exist.

01:40:14.740 --> 01:40:15.860
<v Speaker 0>And

01:40:17.060 --> 01:40:18.580
<v Speaker 0>put it dev.

01:40:19.140 --> 01:40:21.060
<v Speaker 0>There we go. And take a look at

01:40:21.060 --> 01:40:21.780
<v Speaker 0>CarsDB

01:40:23.475 --> 01:40:25.155
<v Speaker 0>Is it metadata?

01:40:25.955 --> 01:40:29.155
<v Speaker 1>No. It's actually the way we will that

01:40:29.155 --> 01:40:30.034
<v Speaker 1>kptn

01:40:30.675 --> 01:40:33.315
<v Speaker 1>stores in the Helm chart. So kptn won't

01:40:33.315 --> 01:40:34.195
<v Speaker 1>create

01:40:34.195 --> 01:40:36.835
<v Speaker 1>this virtual services for Istio if we don't

01:40:36.835 --> 01:40:37.955
<v Speaker 1>need a blue green deployment.

01:40:39.030 --> 01:40:40.630
<v Speaker 1>This is how we can see if it's

01:40:40.630 --> 01:40:42.070
<v Speaker 1>a blue green deployment or not.

01:40:44.710 --> 01:40:46.949
<v Speaker 1>There is no in the metadata file, you

01:40:46.949 --> 01:40:48.389
<v Speaker 1>won't really see it.

01:40:48.630 --> 01:40:50.469
<v Speaker 1>We are planning to also include this when

01:40:50.469 --> 01:40:52.550
<v Speaker 1>you're doing a kpt and get services or

01:40:52.550 --> 01:40:55.590
<v Speaker 1>kpt and get projects in the CLI that

01:40:54.605 --> 01:40:56.844
<v Speaker 1>we're also including everything that's

01:40:57.085 --> 01:40:57.885
<v Speaker 1>that's really

01:40:59.165 --> 01:41:01.085
<v Speaker 1>running in the cluster that we provide all

01:41:01.085 --> 01:41:04.205
<v Speaker 1>this information directly with the CLI or with

01:41:04.205 --> 01:41:05.324
<v Speaker 1>the API.

01:41:05.405 --> 01:41:07.485
<v Speaker 1>With by the API, you can already query

01:41:07.670 --> 01:41:10.070
<v Speaker 1>all the events that are stored and running

01:41:10.070 --> 01:41:12.309
<v Speaker 1>through kptn and also stored in kptn.

01:41:12.869 --> 01:41:14.229
<v Speaker 1>With the CLI,

01:41:14.550 --> 01:41:15.349
<v Speaker 1>it's

01:41:15.830 --> 01:41:18.630
<v Speaker 1>we we have a couple of convenience functions

01:41:18.630 --> 01:41:21.030
<v Speaker 1>that you can, like, kptn get projects, and

01:41:21.030 --> 01:41:22.869
<v Speaker 1>it already lists the projects

01:41:23.215 --> 01:41:25.375
<v Speaker 1>in a human readable way instead of giving

01:41:25.375 --> 01:41:26.815
<v Speaker 1>you the whole cloud event with all the

01:41:26.815 --> 01:41:27.775
<v Speaker 1>projects. So

01:41:28.255 --> 01:41:28.735
<v Speaker 1>yeah.

01:41:29.135 --> 01:41:29.775
<v Speaker 0>Cool.

01:41:30.095 --> 01:41:32.335
<v Speaker 0>Alright. So it's getting there. It's all coming

01:41:32.335 --> 01:41:33.295
<v Speaker 0>together now.

01:41:33.775 --> 01:41:35.855
<v Speaker 0>Let's see what's going on over here then.

01:41:36.335 --> 01:41:39.510
<v Speaker 0>So our dev environment, the test finish, we

01:41:39.510 --> 01:41:41.430
<v Speaker 0>only run functional. We don't run performance, which

01:41:41.430 --> 01:41:43.270
<v Speaker 0>is why we're getting a green evaluation.

01:41:43.430 --> 01:41:45.670
<v Speaker 0>This is now being promoted to staging,

01:41:46.390 --> 01:41:46.870
<v Speaker 0>and

01:41:49.430 --> 01:41:51.510
<v Speaker 0>it's not run test yet. So that's running

01:41:51.510 --> 01:41:54.870
<v Speaker 0>our performance tests now against

01:41:54.435 --> 01:41:56.034
<v Speaker 0>this red version here.

01:41:56.275 --> 01:41:59.315
<v Speaker 1>Exactly. So we know it's already deployed,

01:41:59.315 --> 01:42:01.954
<v Speaker 1>the red version. Yep. And we know that

01:42:01.954 --> 01:42:04.114
<v Speaker 1>there are the tests running. As said, I

01:42:04.114 --> 01:42:06.355
<v Speaker 1>would assume they still take a couple of

01:42:06.355 --> 01:42:08.594
<v Speaker 1>minutes. So normally, it's around

01:42:08.870 --> 01:42:11.270
<v Speaker 1>five to ten minutes. Normally, it's, eight minutes.

01:42:11.670 --> 01:42:13.270
<v Speaker 1>So in a couple of minutes, we should

01:42:13.270 --> 01:42:13.830
<v Speaker 1>see

01:42:14.230 --> 01:42:17.350
<v Speaker 1>if the tests have been finished successfully.

01:42:17.350 --> 01:42:18.790
<v Speaker 1>So that's also one of the

01:42:19.590 --> 01:42:21.910
<v Speaker 1>of of the the nice parts of this

01:42:21.910 --> 01:42:24.470
<v Speaker 1>integration that the chain meter service is

01:42:25.005 --> 01:42:27.405
<v Speaker 1>also indicating if the tests have been finished

01:42:27.405 --> 01:42:28.204
<v Speaker 1>successfully.

01:42:28.284 --> 01:42:30.925
<v Speaker 1>So it might happen that the tests are

01:42:30.925 --> 01:42:31.804
<v Speaker 1>breaking,

01:42:32.205 --> 01:42:33.804
<v Speaker 1>and we don't even get,

01:42:34.284 --> 01:42:37.165
<v Speaker 1>let's say, a successful test result from Chainmeter

01:42:37.165 --> 01:42:39.550
<v Speaker 1>because maybe the service is not available, maybe

01:42:39.550 --> 01:42:41.150
<v Speaker 1>the service was crashing.

01:42:41.630 --> 01:42:44.270
<v Speaker 1>And this is also taken into consideration of

01:42:44.270 --> 01:42:45.070
<v Speaker 1>kpten,

01:42:45.230 --> 01:42:48.030
<v Speaker 1>not only the SLO file. So if the

01:42:48.110 --> 01:42:49.550
<v Speaker 1>Chimera file or NeoLoad

01:42:49.870 --> 01:42:52.110
<v Speaker 1>sorry. If the Chimera tests or the NeoLoad

01:42:52.110 --> 01:42:53.070
<v Speaker 1>tests or whatever

01:42:53.705 --> 01:42:56.905
<v Speaker 1>test integration you're using. If this is failing,

01:42:57.465 --> 01:43:00.345
<v Speaker 1>then kpten will get this information and will

01:43:00.345 --> 01:43:00.985
<v Speaker 1>also

01:43:02.025 --> 01:43:04.745
<v Speaker 1>mark the quality gate evaluation as failed since

01:43:04.745 --> 01:43:07.490
<v Speaker 1>it could not even execute the tests.

01:43:07.650 --> 01:43:09.970
<v Speaker 1>If the tests have been executed successfully,

01:43:09.970 --> 01:43:12.130
<v Speaker 1>then kpt will go ahead and evaluate the

01:43:12.130 --> 01:43:14.610
<v Speaker 1>quality gate. And our quality gate is very,

01:43:14.610 --> 01:43:15.410
<v Speaker 1>very small.

01:43:15.650 --> 01:43:17.570
<v Speaker 1>We only have the response time in the

01:43:17.570 --> 01:43:19.410
<v Speaker 1>ninety fifth percentile. You can add more and

01:43:19.410 --> 01:43:21.650
<v Speaker 1>more s l SLIs. So we have seen

01:43:22.045 --> 01:43:23.484
<v Speaker 1>quality gates with

01:43:23.965 --> 01:43:27.724
<v Speaker 1>50 SLIs that are combined together, the total

01:43:27.724 --> 01:43:29.164
<v Speaker 1>score is generated.

01:43:29.565 --> 01:43:32.364
<v Speaker 1>And they range from number of outgoing service

01:43:32.364 --> 01:43:36.045
<v Speaker 1>calls to memory consumption, CPU saturation, response time

01:43:36.045 --> 01:43:38.080
<v Speaker 1>throughput, all these different metrics,

01:43:38.400 --> 01:43:39.200
<v Speaker 1>they are used.

01:43:39.600 --> 01:43:41.200
<v Speaker 1>And you just define them once in the

01:43:41.200 --> 01:43:42.160
<v Speaker 1>SLO file.

01:43:42.560 --> 01:43:45.680
<v Speaker 1>And, in the SLO file, we've that we've

01:43:45.680 --> 01:43:46.800
<v Speaker 1>seen also earlier,

01:43:47.840 --> 01:43:49.760
<v Speaker 1>it doesn't say which service it belongs to.

01:43:50.284 --> 01:43:53.085
<v Speaker 1>So if you have an SLO file that

01:43:53.085 --> 01:43:54.204
<v Speaker 1>is like your

01:43:54.605 --> 01:43:56.284
<v Speaker 1>standard configuration

01:43:56.284 --> 01:43:58.044
<v Speaker 1>of your quality

01:43:58.284 --> 01:43:59.164
<v Speaker 1>objectives,

01:43:59.324 --> 01:44:01.485
<v Speaker 1>then you can reuse it for all of

01:44:01.485 --> 01:44:02.684
<v Speaker 1>your microservices.

01:44:03.005 --> 01:44:04.205
<v Speaker 1>And reusing

01:44:04.205 --> 01:44:07.150
<v Speaker 1>is is easy in this way since

01:44:07.310 --> 01:44:10.670
<v Speaker 1>you you can define absolute thresholds,

01:44:10.830 --> 01:44:12.909
<v Speaker 1>but you can also define relative ones.

01:44:13.070 --> 01:44:14.750
<v Speaker 1>And I always like to have a combination

01:44:14.750 --> 01:44:16.510
<v Speaker 1>of both that I say, okay.

01:44:18.345 --> 01:44:20.985
<v Speaker 1>It's the error rate has to stay lower

01:44:20.985 --> 01:44:22.184
<v Speaker 1>than 5%,

01:44:22.505 --> 01:44:24.585
<v Speaker 1>but it's also not allowed to increase more

01:44:24.585 --> 01:44:26.025
<v Speaker 1>than 25%

01:44:26.585 --> 01:44:29.305
<v Speaker 1>to the previous bills. So an increase of

01:44:29.305 --> 01:44:30.905
<v Speaker 1>the error rate by 25%

01:44:30.905 --> 01:44:33.530
<v Speaker 1>is, like, rather frustrating,

01:44:33.610 --> 01:44:34.330
<v Speaker 1>let's say.

01:44:35.770 --> 01:44:36.330
<v Speaker 1>But

01:44:36.650 --> 01:44:38.730
<v Speaker 1>so I can combine the relative and the

01:44:38.730 --> 01:44:39.850
<v Speaker 1>absolute value

01:44:40.410 --> 01:44:42.890
<v Speaker 1>same for for for all the other metrics.

01:44:43.370 --> 01:44:44.570
<v Speaker 1>And in this way,

01:44:45.485 --> 01:44:47.005
<v Speaker 1>I think it's it's

01:44:47.005 --> 01:44:49.244
<v Speaker 1>it's very easy to reuse it also for

01:44:49.244 --> 01:44:52.124
<v Speaker 1>other services since they they don't have the

01:44:52.204 --> 01:44:54.364
<v Speaker 1>name of the microservice or the the the

01:44:54.364 --> 01:44:57.085
<v Speaker 1>stage in the SLO file itself. It's just

01:44:57.085 --> 01:44:59.244
<v Speaker 1>how you edit them to to kpten via

01:44:59.244 --> 01:45:00.684
<v Speaker 1>the CLI or via the API.

01:45:02.980 --> 01:45:04.340
<v Speaker 0>Alright. Nice.

01:45:05.699 --> 01:45:08.579
<v Speaker 0>So this test has been running for

01:45:09.140 --> 01:45:11.219
<v Speaker 0>seven minutes. So we're expecting this to come

01:45:11.219 --> 01:45:13.300
<v Speaker 0>back and crash and burn very, very, very

01:45:13.300 --> 01:45:14.179
<v Speaker 0>soon. Right?

01:45:14.900 --> 01:45:15.620
<v Speaker 1>Yeah. Exactly.

01:45:16.955 --> 01:45:18.795
<v Speaker 1>The next event should be this

01:45:20.715 --> 01:45:24.555
<v Speaker 1>SLI retrieval. So and the SLI retrieval, as

01:45:24.555 --> 01:45:25.835
<v Speaker 1>we know from Prometheus,

01:45:25.995 --> 01:45:28.235
<v Speaker 1>it's it's very fast. Usually, you get this

01:45:28.235 --> 01:45:29.034
<v Speaker 1>data

01:45:29.035 --> 01:45:31.035
<v Speaker 1>close to real time from Prometheus. So

01:45:32.450 --> 01:45:33.170
<v Speaker 1>other

01:45:33.330 --> 01:45:35.330
<v Speaker 1>solutions, they take a little bit more time

01:45:35.330 --> 01:45:37.490
<v Speaker 1>to digest and to to operate on this

01:45:37.490 --> 01:45:40.210
<v Speaker 1>data. But if we ask Prometheus for for

01:45:40.210 --> 01:45:41.330
<v Speaker 1>data, we get it

01:45:41.970 --> 01:45:45.264
<v Speaker 1>we we retrieve it pretty fast, and then

01:45:45.264 --> 01:45:47.824
<v Speaker 1>we should see the slide retrieval, SLI retrieval

01:45:47.824 --> 01:45:50.304
<v Speaker 1>done, and the evaluation of the quality gate

01:45:50.545 --> 01:45:51.584
<v Speaker 1>pretty soon.

01:45:51.905 --> 01:45:54.304
<v Speaker 1>And we should also see then

01:45:54.625 --> 01:45:56.304
<v Speaker 1>the action that is

01:45:56.800 --> 01:46:00.000
<v Speaker 1>is taken by kptn upon this quality kit

01:46:00.000 --> 01:46:02.159
<v Speaker 1>evaluation. So if kptn allows you to promote

01:46:02.159 --> 01:46:03.920
<v Speaker 1>promote it to the next stage or if

01:46:03.920 --> 01:46:05.920
<v Speaker 1>it will be rolled back to the previous

01:46:05.920 --> 01:46:06.479
<v Speaker 1>version,

01:46:06.800 --> 01:46:09.120
<v Speaker 1>and we remember that the previous version was

01:46:09.120 --> 01:46:11.205
<v Speaker 1>the green version. So we will see what

01:46:11.205 --> 01:46:11.764
<v Speaker 1>happens.

01:46:13.125 --> 01:46:15.205
<v Speaker 0>And can I just I I guess if

01:46:15.205 --> 01:46:16.804
<v Speaker 0>I pull up the pods in the staging

01:46:16.804 --> 01:46:18.565
<v Speaker 0>namespace, will that show me the tests?

01:46:22.240 --> 01:46:24.400
<v Speaker 1>You won't see the tests here because they

01:46:24.400 --> 01:46:26.640
<v Speaker 1>are executed by the g meter service that

01:46:26.640 --> 01:46:29.280
<v Speaker 1>is running anyway. Right. Right. Right. Okay. In

01:46:29.280 --> 01:46:32.080
<v Speaker 1>in previous versions of Captain, we built upon

01:46:32.080 --> 01:46:33.120
<v Speaker 1>k native

01:46:33.280 --> 01:46:36.135
<v Speaker 1>to to allow scaling down to zero for

01:46:36.135 --> 01:46:37.895
<v Speaker 1>a couple of different services of kpten and

01:46:37.895 --> 01:46:39.495
<v Speaker 1>only react when there is a new events

01:46:39.495 --> 01:46:40.215
<v Speaker 1>coming in.

01:46:40.615 --> 01:46:43.175
<v Speaker 1>But, actually, Knative was

01:46:45.095 --> 01:46:46.855
<v Speaker 1>the the memory footprint

01:46:46.935 --> 01:46:49.415
<v Speaker 1>of Knative was already quite

01:46:50.520 --> 01:46:53.240
<v Speaker 1>quite demanding, so we decided to remove Knative

01:46:53.240 --> 01:46:55.400
<v Speaker 1>and just go for Kubernetes and and allow

01:46:55.400 --> 01:46:57.239
<v Speaker 1>all the services to just keep running.

01:46:58.120 --> 01:46:59.320
<v Speaker 0>Right. We have our failure.

01:47:02.785 --> 01:47:05.105
<v Speaker 1>That's actually what we wanted. Yeah. That's good.

01:47:05.905 --> 01:47:07.905
<v Speaker 0>Yes. So it says here that

01:47:08.305 --> 01:47:11.025
<v Speaker 0>our SLA retrieval started. It's done. We do

01:47:11.025 --> 01:47:12.065
<v Speaker 0>our evaluation.

01:47:12.225 --> 01:47:13.745
<v Speaker 0>We can see that we have quite a

01:47:13.745 --> 01:47:15.825
<v Speaker 0>large amount of red here, and we can

01:47:15.825 --> 01:47:18.430
<v Speaker 0>see the result was a fail, which means

01:47:18.430 --> 01:47:20.750
<v Speaker 0>that this change will not be propagated to

01:47:20.750 --> 01:47:22.670
<v Speaker 0>production, which is what we want.

01:47:23.230 --> 01:47:25.870
<v Speaker 1>Which is pretty cool. Maybe we can take

01:47:25.870 --> 01:47:28.270
<v Speaker 1>a look if it actually did the rollback.

01:47:29.150 --> 01:47:31.550
<v Speaker 1>There is the service in the deployment finished

01:47:31.550 --> 01:47:34.395
<v Speaker 1>event. We should see the the blue arrow

01:47:34.395 --> 01:47:36.474
<v Speaker 1>that we can open up the microservice, and

01:47:36.474 --> 01:47:37.675
<v Speaker 1>we can take a look, and it's rolled

01:47:37.675 --> 01:47:39.994
<v Speaker 1>back to green. Nice.

01:47:39.994 --> 01:47:40.954
<v Speaker 0>There we go.

01:47:42.315 --> 01:47:45.915
<v Speaker 1>We made it. Awesome. Very, very cool. I

01:47:45.915 --> 01:47:46.474
<v Speaker 0>like that.

01:47:48.750 --> 01:47:51.869
<v Speaker 0>We got there. Alright. Nice. Yeah. We we

01:47:51.869 --> 01:47:53.869
<v Speaker 1>we did it. We did it. Awesome.

01:47:54.190 --> 01:47:55.469
<v Speaker 0>Yeah. There's

01:47:55.469 --> 01:47:58.190
<v Speaker 0>there's just so much going on there, but

01:47:58.190 --> 01:48:00.030
<v Speaker 0>I think the flexibility

01:48:00.030 --> 01:48:02.190
<v Speaker 0>and the way that we can encode essentially,

01:48:02.190 --> 01:48:04.355
<v Speaker 0>which is, you know, actually, play books to

01:48:04.355 --> 01:48:06.275
<v Speaker 0>a certain degree of how we want our

01:48:06.275 --> 01:48:08.355
<v Speaker 0>applications to handle failures. How we wanna build

01:48:08.355 --> 01:48:11.075
<v Speaker 0>test them across environments and and have captain

01:48:11.075 --> 01:48:12.915
<v Speaker 0>orchestrate all of that for us is a

01:48:12.915 --> 01:48:14.114
<v Speaker 0>really, really cool thing.

01:48:14.675 --> 01:48:16.820
<v Speaker 0>Call me pretty much impressed with what we've

01:48:16.820 --> 01:48:17.699
<v Speaker 0>seen here today.

01:48:18.020 --> 01:48:19.619
<v Speaker 0>And based on what

01:48:19.780 --> 01:48:21.540
<v Speaker 0>we have in this tutorial, you know

01:48:22.500 --> 01:48:24.020
<v Speaker 0>let me pull that back up again. It's

01:48:24.020 --> 01:48:26.420
<v Speaker 0>my stupid testing. We started forty minutes worth

01:48:26.420 --> 01:48:28.020
<v Speaker 0>of other things we could be looking at

01:48:28.020 --> 01:48:29.540
<v Speaker 0>as part of the filter. So maybe if

01:48:29.540 --> 01:48:31.824
<v Speaker 0>you could just take, you know, a minute

01:48:31.985 --> 01:48:33.425
<v Speaker 0>or, in fact, maybe we should just reschedule

01:48:33.425 --> 01:48:34.945
<v Speaker 0>something and not do that. Yeah. Let's do

01:48:34.945 --> 01:48:35.425
<v Speaker 0>that.

01:48:36.385 --> 01:48:38.145
<v Speaker 0>I think we've covered so much today. Is

01:48:38.145 --> 01:48:39.665
<v Speaker 0>there any final thoughts you wanna leave us

01:48:39.665 --> 01:48:42.385
<v Speaker 0>with? And we'll come back to this another

01:48:42.385 --> 01:48:42.625
<v Speaker 0>day.

01:48:43.520 --> 01:48:44.480
<v Speaker 1>I

01:48:44.480 --> 01:48:46.640
<v Speaker 1>think it was a very amazing journey that

01:48:46.640 --> 01:48:48.719
<v Speaker 1>we actually we did a little bit of

01:48:48.719 --> 01:48:50.880
<v Speaker 1>debugging already, and we took a look at

01:48:50.880 --> 01:48:52.079
<v Speaker 1>the the DevOps

01:48:52.640 --> 01:48:54.239
<v Speaker 1>sorry, the the the GitOps

01:48:54.400 --> 01:48:56.080
<v Speaker 1>the GitOps approach of kpten.

01:48:57.005 --> 01:48:58.765
<v Speaker 1>I think that was very fascinating to also

01:48:58.925 --> 01:49:00.445
<v Speaker 1>also for me to see this

01:49:00.845 --> 01:49:03.805
<v Speaker 1>how how fast we we've done these changes

01:49:03.805 --> 01:49:06.605
<v Speaker 1>of the small hiccups in the helm charts.

01:49:07.805 --> 01:49:10.045
<v Speaker 1>And, yeah, it was really a pleasure to

01:49:10.045 --> 01:49:12.740
<v Speaker 1>to walk through kpten here with you and

01:49:12.740 --> 01:49:14.660
<v Speaker 1>also seeing this from the from the other

01:49:14.660 --> 01:49:15.380
<v Speaker 1>perspective.

01:49:16.340 --> 01:49:18.340
<v Speaker 1>Not normally, I I'm sitting on the keyboard

01:49:18.340 --> 01:49:19.300
<v Speaker 1>doing all this.

01:49:21.780 --> 01:49:24.260
<v Speaker 0>Awesome. Well, thank you for Sorry, Nico.

01:49:26.355 --> 01:49:28.115
<v Speaker 1>So so I I I would be happy

01:49:28.115 --> 01:49:29.555
<v Speaker 1>to to join you again and to take

01:49:29.555 --> 01:49:31.795
<v Speaker 1>a look at the auto remediation part of

01:49:31.795 --> 01:49:33.715
<v Speaker 1>kpt. And once we have everything up and

01:49:33.715 --> 01:49:36.195
<v Speaker 1>running, we could just do one deployment,

01:49:36.355 --> 01:49:37.795
<v Speaker 1>send it all the way through production,

01:49:38.950 --> 01:49:42.150
<v Speaker 1>and then play a little bit with the

01:49:42.150 --> 01:49:44.950
<v Speaker 1>auto remediation parts where kpten is triggering Ansible

01:49:44.950 --> 01:49:47.750
<v Speaker 1>playbooks or feature flagging frameworks and these kind

01:49:47.750 --> 01:49:50.310
<v Speaker 1>of things. So to also see once it's

01:49:50.310 --> 01:49:52.070
<v Speaker 1>in production how how kpten can help.

01:49:53.135 --> 01:49:56.495
<v Speaker 0>Yeah. Definitely. We'll we'll start after after this.

01:49:56.575 --> 01:49:58.175
<v Speaker 0>But I think what we've shown today is

01:49:58.175 --> 01:50:00.495
<v Speaker 0>just the progressive delivery stuff is really good.

01:50:00.495 --> 01:50:02.095
<v Speaker 0>I hope people get an opportunity to play

01:50:02.095 --> 01:50:03.615
<v Speaker 0>with us, and we'll come back with more

01:50:03.615 --> 01:50:06.030
<v Speaker 0>episodes then. And and we'll take a look

01:50:06.030 --> 01:50:07.710
<v Speaker 0>at all those other features as well. So

01:50:07.710 --> 01:50:09.389
<v Speaker 0>thank you, Juergen, for joining me today. It

01:50:09.389 --> 01:50:11.070
<v Speaker 0>was really fun to kinda walk through this

01:50:11.070 --> 01:50:12.429
<v Speaker 0>and see how it all clicks together and

01:50:12.429 --> 01:50:14.510
<v Speaker 0>how it works. It's really cool software and

01:50:14.670 --> 01:50:16.590
<v Speaker 0>thanks for your efforts. Keep it up. I

01:50:16.590 --> 01:50:18.190
<v Speaker 0>will speak to soon. Thanks, David. Have a

01:50:18.190 --> 01:50:18.510
<v Speaker 0>nice day.

01:50:19.594 --> 01:50:20.235
<v Speaker 1>Thanks, everyone.
