WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 905ef40f-6ec7-49f7-85bb-978602744419
Created: 2025-04-29T15:16:25.333Z
Duration: 3780.726
Channels: 1

00:02:42.424 --> 00:02:45.625
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:02:45.625 --> 00:02:47.840
<v Speaker 0>I am your host, David Flanagan,

00:02:47.840 --> 00:02:49.440
<v Speaker 0>also known as Rawkode.

00:02:49.920 --> 00:02:52.400
<v Speaker 0>Today, we're taking a look at an application

00:02:52.400 --> 00:02:53.680
<v Speaker 0>called DevStand.

00:02:53.680 --> 00:02:55.120
<v Speaker 0>We're gonna find out in just a moment

00:02:55.120 --> 00:02:56.959
<v Speaker 0>what that is, but before we talk about

00:02:56.959 --> 00:02:58.959
<v Speaker 0>it, we need to introduce its creator and

00:02:58.959 --> 00:02:59.599
<v Speaker 0>maintainer.

00:03:01.695 --> 00:03:03.295
<v Speaker 0>Welcome, Max. How's things?

00:03:04.495 --> 00:03:07.135
<v Speaker 1>Hi, everyone. How are you, David? Yeah. You

00:03:07.135 --> 00:03:08.735
<v Speaker 0>know what? I'm doing really well. I haven't

00:03:08.735 --> 00:03:11.535
<v Speaker 0>streamed much in the last week because of

00:03:11.535 --> 00:03:13.615
<v Speaker 0>speaking at an event in Oslo, and I

00:03:13.615 --> 00:03:15.695
<v Speaker 0>had my own conference this week. So I'm

00:03:15.695 --> 00:03:17.700
<v Speaker 0>really excited that I get to be back

00:03:17.700 --> 00:03:18.660
<v Speaker 0>in my office,

00:03:18.980 --> 00:03:20.420
<v Speaker 0>have a stream with you, and, like, a

00:03:20.420 --> 00:03:22.740
<v Speaker 0>really cool a really cool project. So thank

00:03:22.740 --> 00:03:24.100
<v Speaker 0>you so much for taking the time to

00:03:24.100 --> 00:03:25.460
<v Speaker 0>to join me this afternoon.

00:03:25.940 --> 00:03:26.980
<v Speaker 1>Well, nice.

00:03:27.220 --> 00:03:28.580
<v Speaker 1>Thank you for having me.

00:03:29.060 --> 00:03:29.780
<v Speaker 1>Yep.

00:03:30.820 --> 00:03:31.780
<v Speaker 1>My name is Max.

00:03:32.885 --> 00:03:35.045
<v Speaker 1>I'm a full stack developer, and I've been

00:03:35.045 --> 00:03:37.125
<v Speaker 1>a full stack developer for the recent like,

00:03:37.125 --> 00:03:38.405
<v Speaker 1>around fifteen years.

00:03:38.965 --> 00:03:40.805
<v Speaker 1>And it was just a couple of years

00:03:40.805 --> 00:03:43.445
<v Speaker 1>ago when I started working on a project

00:03:44.450 --> 00:03:46.450
<v Speaker 1>which is now called DevStand.

00:03:46.450 --> 00:03:47.730
<v Speaker 1>But, originally,

00:03:48.049 --> 00:03:49.170
<v Speaker 1>the project

00:03:49.650 --> 00:03:50.450
<v Speaker 1>came

00:03:51.010 --> 00:03:51.810
<v Speaker 1>when

00:03:51.810 --> 00:03:53.650
<v Speaker 1>I was working for a client, and the

00:03:53.650 --> 00:03:54.690
<v Speaker 1>client asked,

00:03:55.409 --> 00:03:57.569
<v Speaker 1>okay. Now your solution

00:03:57.569 --> 00:03:59.489
<v Speaker 1>have to be deployed in Kubernetes.

00:04:00.075 --> 00:04:02.155
<v Speaker 1>And nobody knew

00:04:02.395 --> 00:04:04.795
<v Speaker 1>what was that, how to work on that,

00:04:04.795 --> 00:04:07.675
<v Speaker 1>and I had lots of time figuring out

00:04:07.675 --> 00:04:09.595
<v Speaker 1>and wrapping my head around it.

00:04:10.555 --> 00:04:11.195
<v Speaker 1>And

00:04:11.835 --> 00:04:14.075
<v Speaker 1>during working with the Kubernetes,

00:04:14.560 --> 00:04:17.760
<v Speaker 1>I realized that it's quite difficult.

00:04:18.959 --> 00:04:21.279
<v Speaker 1>I mean, if you need to create a

00:04:21.279 --> 00:04:22.160
<v Speaker 1>Dockerfile,

00:04:22.160 --> 00:04:25.360
<v Speaker 1>it's usually like a script a bash script

00:04:25.360 --> 00:04:28.160
<v Speaker 1>for making a virtual machine, like, in the

00:04:28.320 --> 00:04:29.600
<v Speaker 1>like, roughly.

00:04:30.365 --> 00:04:32.205
<v Speaker 1>But Kubernetes brings

00:04:32.685 --> 00:04:35.325
<v Speaker 1>a whole lot of it's very custom

00:04:35.805 --> 00:04:36.925
<v Speaker 1>terminology,

00:04:36.925 --> 00:04:39.405
<v Speaker 1>and you have to understand it first and

00:04:39.405 --> 00:04:42.525
<v Speaker 1>then trace it back and realize, ah, in

00:04:42.525 --> 00:04:45.349
<v Speaker 1>order to do my thing, I have to

00:04:45.349 --> 00:04:47.990
<v Speaker 1>do this and that in Kubernetes to make

00:04:47.990 --> 00:04:49.750
<v Speaker 1>it work. And I

00:04:50.470 --> 00:04:52.550
<v Speaker 1>had a strong belief

00:04:52.949 --> 00:04:53.669
<v Speaker 1>that

00:04:54.629 --> 00:04:56.789
<v Speaker 1>the whole technology is awesome,

00:04:57.194 --> 00:05:00.074
<v Speaker 1>but it's quite difficult, and there must be

00:05:00.074 --> 00:05:00.875
<v Speaker 1>a way

00:05:01.354 --> 00:05:04.875
<v Speaker 1>to make it simpler for mere application developers.

00:05:04.875 --> 00:05:08.715
<v Speaker 1>Because, you know, those developers who spend lots

00:05:08.715 --> 00:05:10.960
<v Speaker 1>of their time working on

00:05:11.360 --> 00:05:12.560
<v Speaker 1>business logic,

00:05:12.720 --> 00:05:14.960
<v Speaker 1>database schema, interfaces,

00:05:15.680 --> 00:05:17.280
<v Speaker 1>negotiating features

00:05:17.840 --> 00:05:21.280
<v Speaker 1>with their clients, etcetera, and they have no

00:05:21.280 --> 00:05:23.200
<v Speaker 1>time and no

00:05:23.919 --> 00:05:24.479
<v Speaker 1>wish

00:05:24.724 --> 00:05:27.925
<v Speaker 1>to dive deep into that modern Kubernetes

00:05:28.164 --> 00:05:29.285
<v Speaker 1>cloud stack.

00:05:29.764 --> 00:05:31.365
<v Speaker 1>So DevStand

00:05:31.365 --> 00:05:33.044
<v Speaker 1>is a thing for

00:05:33.365 --> 00:05:35.285
<v Speaker 1>mere application developer

00:05:35.525 --> 00:05:36.164
<v Speaker 1>and

00:05:36.565 --> 00:05:40.004
<v Speaker 1>which lowers the barrier towards cloud deployments.

00:05:40.960 --> 00:05:44.480
<v Speaker 1>So this this is basically it. Awesome. Well,

00:05:44.480 --> 00:05:46.000
<v Speaker 0>thank you for sharing a little bit about

00:05:46.000 --> 00:05:48.000
<v Speaker 0>yourself and about the project too. It's it's

00:05:48.000 --> 00:05:49.840
<v Speaker 0>always nice to get that extra context and

00:05:49.840 --> 00:05:52.960
<v Speaker 0>history when we do these sessions. And I

00:05:52.960 --> 00:05:55.760
<v Speaker 0>love what you're saying. You're 100% correct. Like,

00:05:55.835 --> 00:05:58.315
<v Speaker 0>the lexicon that we need to understand what's

00:05:58.315 --> 00:06:00.315
<v Speaker 0>happening in a Kubernetes cluster is not something

00:06:00.315 --> 00:06:02.395
<v Speaker 0>that we have by default. It doesn't map

00:06:02.395 --> 00:06:04.475
<v Speaker 0>to to the real world or even things

00:06:04.475 --> 00:06:06.555
<v Speaker 0>in the past. You know, it could be

00:06:06.555 --> 00:06:08.395
<v Speaker 0>that maybe we called it an application and

00:06:08.395 --> 00:06:10.395
<v Speaker 0>people would understand Kubernetes a bit easier, but

00:06:10.395 --> 00:06:13.660
<v Speaker 0>we don't. We see pods, replicas, deployments, config

00:06:13.660 --> 00:06:16.380
<v Speaker 0>maps. Like, these are not terms that people

00:06:16.380 --> 00:06:18.300
<v Speaker 0>are familiar with by default. So

00:06:18.780 --> 00:06:19.340
<v Speaker 0>I

00:06:19.660 --> 00:06:21.500
<v Speaker 0>really love it. And I I

00:06:22.780 --> 00:06:24.380
<v Speaker 0>I think it's a really powerful thing when

00:06:24.380 --> 00:06:25.795
<v Speaker 0>we could take some of these things with

00:06:25.795 --> 00:06:28.035
<v Speaker 0>Kubernetes and make them easier to understand through

00:06:28.035 --> 00:06:30.755
<v Speaker 0>visualizations and other tools. So, yeah, I'm really

00:06:30.755 --> 00:06:32.835
<v Speaker 0>excited for for today's demo.

00:06:33.875 --> 00:06:35.955
<v Speaker 1>Okay. So now I'm going to share my

00:06:35.955 --> 00:06:36.515
<v Speaker 1>screen

00:06:37.075 --> 00:06:37.955
<v Speaker 1>and

00:06:38.520 --> 00:06:40.680
<v Speaker 1>start my Let's do it. My presentation.

00:06:44.040 --> 00:06:45.880
<v Speaker 0>Uh-huh. Your screen is now live with our

00:06:45.880 --> 00:06:48.120
<v Speaker 0>audience. I can see your slides. Please feel

00:06:48.120 --> 00:06:49.240
<v Speaker 0>free to take that away in your own

00:06:49.240 --> 00:06:49.800
<v Speaker 0>time.

00:06:50.200 --> 00:06:52.360
<v Speaker 1>Well, that's great. So

00:06:54.275 --> 00:06:57.314
<v Speaker 1>after several demos to fellow developers,

00:06:57.314 --> 00:07:00.275
<v Speaker 1>I realized that some of them think of

00:07:00.275 --> 00:07:03.235
<v Speaker 1>DevStand as a low code tool for cloud

00:07:03.235 --> 00:07:04.275
<v Speaker 1>infrastructure.

00:07:04.435 --> 00:07:06.995
<v Speaker 1>I personally believe that it's more about

00:07:07.530 --> 00:07:10.810
<v Speaker 1>platform as a service atop any Kubernetes cluster,

00:07:10.810 --> 00:07:13.690
<v Speaker 1>but you can see that both of these

00:07:13.690 --> 00:07:16.330
<v Speaker 1>names can be applied to the solution.

00:07:18.010 --> 00:07:20.330
<v Speaker 1>I wanna start with the

00:07:20.890 --> 00:07:22.330
<v Speaker 1>most well known

00:07:22.955 --> 00:07:25.835
<v Speaker 1>solution for branding developers'

00:07:25.835 --> 00:07:28.635
<v Speaker 1>code and shifting it to the cloud,

00:07:28.955 --> 00:07:32.155
<v Speaker 1>platform as a service. And every platform as

00:07:32.155 --> 00:07:35.195
<v Speaker 1>a service has two basic promises.

00:07:36.120 --> 00:07:38.200
<v Speaker 1>The first one is that it has to

00:07:38.200 --> 00:07:40.280
<v Speaker 1>be easy for developers,

00:07:40.600 --> 00:07:42.760
<v Speaker 1>and it's worth noting that

00:07:42.920 --> 00:07:46.040
<v Speaker 1>popular platforms as a service is they usually

00:07:46.040 --> 00:07:49.400
<v Speaker 1>deeply rooted, and they originate from developer community,

00:07:50.025 --> 00:07:51.865
<v Speaker 1>not infrastructure communities.

00:07:51.865 --> 00:07:54.665
<v Speaker 1>And they have to speak to developers in

00:07:54.665 --> 00:07:56.025
<v Speaker 1>their lexicon,

00:07:56.185 --> 00:07:58.825
<v Speaker 1>and they they didn't even sell

00:07:59.625 --> 00:08:01.945
<v Speaker 1>support for a specific programming language.

00:08:02.400 --> 00:08:06.000
<v Speaker 1>They usually sell support for a specific framework,

00:08:06.400 --> 00:08:07.440
<v Speaker 1>and they

00:08:07.920 --> 00:08:09.520
<v Speaker 1>gradually build

00:08:09.760 --> 00:08:13.520
<v Speaker 1>trust between them and developers. So developers

00:08:13.760 --> 00:08:16.400
<v Speaker 1>know they can rely on expertise of the

00:08:16.400 --> 00:08:18.755
<v Speaker 1>platform as a service to to jump and

00:08:18.755 --> 00:08:20.595
<v Speaker 1>to deploy their application.

00:08:21.235 --> 00:08:23.235
<v Speaker 1>The second core promise is

00:08:24.275 --> 00:08:25.395
<v Speaker 1>that infrastructure

00:08:25.395 --> 00:08:27.315
<v Speaker 1>is managed by the provider.

00:08:27.875 --> 00:08:30.275
<v Speaker 1>But in terms of platform as a services,

00:08:30.610 --> 00:08:33.650
<v Speaker 1>this infrastructure is not about networks,

00:08:34.290 --> 00:08:35.250
<v Speaker 1>gigabits,

00:08:36.210 --> 00:08:37.170
<v Speaker 1>gigahertz.

00:08:37.250 --> 00:08:38.130
<v Speaker 1>It's about

00:08:38.610 --> 00:08:40.130
<v Speaker 1>managed services,

00:08:40.370 --> 00:08:42.210
<v Speaker 1>like a database or

00:08:42.290 --> 00:08:43.970
<v Speaker 1>domain specific API

00:08:43.970 --> 00:08:45.730
<v Speaker 1>or some kind of

00:08:46.895 --> 00:08:48.495
<v Speaker 1>CICD automation.

00:08:49.135 --> 00:08:50.095
<v Speaker 1>And you

00:08:50.735 --> 00:08:53.455
<v Speaker 1>might think, what is the industry

00:08:53.535 --> 00:08:56.415
<v Speaker 1>response to that PaaS weeds part? Many

00:08:56.895 --> 00:09:00.540
<v Speaker 1>people think that Kubernetes is because bundle everything

00:09:00.540 --> 00:09:02.060
<v Speaker 1>in a container image,

00:09:02.300 --> 00:09:05.340
<v Speaker 1>throw it into Kubernetes, and Kubernetes is smart

00:09:05.340 --> 00:09:07.820
<v Speaker 1>enough to realize how to how to run

00:09:07.820 --> 00:09:08.380
<v Speaker 1>it.

00:09:08.620 --> 00:09:09.180
<v Speaker 1>But

00:09:09.660 --> 00:09:11.740
<v Speaker 1>well, actually, Kubernetes fails

00:09:12.425 --> 00:09:15.305
<v Speaker 1>to fulfill both of these core promises,

00:09:15.704 --> 00:09:17.384
<v Speaker 1>what I believe. The first of all, it's

00:09:17.384 --> 00:09:20.345
<v Speaker 1>not easy for developers because, as I've just

00:09:20.345 --> 00:09:22.425
<v Speaker 1>told, it forces you to

00:09:22.824 --> 00:09:23.704
<v Speaker 1>utilize

00:09:23.704 --> 00:09:24.985
<v Speaker 1>Kubernetes'

00:09:24.985 --> 00:09:26.425
<v Speaker 1>own terminology.

00:09:26.504 --> 00:09:29.839
<v Speaker 1>And it's weird, and it it doesn't speak

00:09:29.839 --> 00:09:33.360
<v Speaker 1>familiar obstructions for developers. And one of the

00:09:33.360 --> 00:09:35.839
<v Speaker 1>most beautiful features of Kubernetes,

00:09:35.839 --> 00:09:38.000
<v Speaker 1>that declarative configuration,

00:09:38.399 --> 00:09:40.639
<v Speaker 1>often ends up as a wall of YAML,

00:09:41.515 --> 00:09:45.035
<v Speaker 1>which is huge, and it's blindly copy pasted

00:09:45.035 --> 00:09:47.195
<v Speaker 1>from one repository to another.

00:09:47.595 --> 00:09:51.435
<v Speaker 1>And this wall of YAML that they still

00:09:51.834 --> 00:09:55.195
<v Speaker 1>do not speak in the language developers can

00:09:55.195 --> 00:09:55.675
<v Speaker 1>understand.

00:09:57.850 --> 00:09:58.490
<v Speaker 1>In

00:09:59.130 --> 00:10:01.769
<v Speaker 1>to continue comparison with the past, there are

00:10:01.769 --> 00:10:04.570
<v Speaker 1>no managed services in vanilla Kubernetes.

00:10:04.970 --> 00:10:08.410
<v Speaker 1>Even so called managed Kubernetes offered by a

00:10:08.410 --> 00:10:09.370
<v Speaker 1>variety of

00:10:09.850 --> 00:10:10.810
<v Speaker 1>cloud providers

00:10:11.105 --> 00:10:12.785
<v Speaker 1>are just bare bones.

00:10:13.025 --> 00:10:17.265
<v Speaker 1>And you have to hire professional DevOps people

00:10:17.745 --> 00:10:21.025
<v Speaker 1>to get anything specific and usable from your

00:10:21.025 --> 00:10:21.825
<v Speaker 1>cluster.

00:10:22.145 --> 00:10:25.425
<v Speaker 1>But be besides the hiring need, which would

00:10:25.425 --> 00:10:26.305
<v Speaker 1>better to avoid,

00:10:27.460 --> 00:10:30.660
<v Speaker 1>every custom Kubernetes cluster is unique.

00:10:31.300 --> 00:10:33.940
<v Speaker 1>There is no golden standard, like a packaged

00:10:33.940 --> 00:10:36.660
<v Speaker 1>Kubernetes packed with add ons,

00:10:36.980 --> 00:10:38.660
<v Speaker 1>and it means that

00:10:39.745 --> 00:10:40.865
<v Speaker 1>there is no

00:10:41.105 --> 00:10:42.144
<v Speaker 1>straightforward

00:10:42.144 --> 00:10:42.945
<v Speaker 1>path

00:10:43.185 --> 00:10:46.865
<v Speaker 1>from code to Kubernetes because every Kubernetes is

00:10:46.865 --> 00:10:48.385
<v Speaker 1>a little bit different.

00:10:49.105 --> 00:10:51.505
<v Speaker 1>And this is what DevStand is trying to

00:10:51.505 --> 00:10:51.824
<v Speaker 1>achieve.

00:10:54.540 --> 00:10:57.980
<v Speaker 1>I have three next slides in in steps

00:10:57.980 --> 00:11:00.940
<v Speaker 1>explaining how to come from that wall of

00:11:00.940 --> 00:11:01.660
<v Speaker 1>YAML

00:11:01.820 --> 00:11:05.100
<v Speaker 1>to DevStand. So imagine

00:11:06.584 --> 00:11:07.785
<v Speaker 1>a usual

00:11:08.024 --> 00:11:10.824
<v Speaker 1>or decent application. Like, you have a web

00:11:10.824 --> 00:11:12.985
<v Speaker 1>application, maybe a background worker,

00:11:13.945 --> 00:11:14.904
<v Speaker 1>a database,

00:11:14.985 --> 00:11:16.584
<v Speaker 1>maybe file storage,

00:11:16.745 --> 00:11:18.345
<v Speaker 1>or Redis cache,

00:11:18.985 --> 00:11:19.545
<v Speaker 1>and

00:11:20.960 --> 00:11:23.520
<v Speaker 1>all of that information of how that should

00:11:23.520 --> 00:11:25.440
<v Speaker 1>be deployed in Kubernetes

00:11:25.440 --> 00:11:26.880
<v Speaker 1>buried somewhere

00:11:27.200 --> 00:11:30.160
<v Speaker 1>between the lines of these huge YAML files.

00:11:30.320 --> 00:11:32.240
<v Speaker 1>But what if we can spot

00:11:32.720 --> 00:11:33.600
<v Speaker 1>reusable

00:11:33.600 --> 00:11:34.560
<v Speaker 1>templates,

00:11:34.560 --> 00:11:35.760
<v Speaker 1>reusable portions

00:11:36.095 --> 00:11:37.295
<v Speaker 1>within this

00:11:37.935 --> 00:11:39.535
<v Speaker 1>huge YAML files,

00:11:39.935 --> 00:11:43.215
<v Speaker 1>rub them in templates or functions,

00:11:43.775 --> 00:11:46.735
<v Speaker 1>and call these functions in a way developers

00:11:46.735 --> 00:11:47.455
<v Speaker 1>can understand.

00:11:48.990 --> 00:11:51.310
<v Speaker 1>And each of these function has to have

00:11:51.310 --> 00:11:52.910
<v Speaker 1>a set of parameters

00:11:53.470 --> 00:11:55.390
<v Speaker 1>to actually produce

00:11:55.630 --> 00:11:57.390
<v Speaker 1>this huge list of

00:11:57.870 --> 00:11:58.750
<v Speaker 1>Kubernetes

00:11:58.750 --> 00:12:01.390
<v Speaker 1>manifest. For example, in this code,

00:12:02.875 --> 00:12:04.555
<v Speaker 1>we have web application,

00:12:04.715 --> 00:12:07.275
<v Speaker 1>which accepts an image and port,

00:12:07.595 --> 00:12:10.075
<v Speaker 1>an optional domain. And for

00:12:10.635 --> 00:12:13.595
<v Speaker 1>image and port, by default, it creates deployment

00:12:13.595 --> 00:12:14.155
<v Speaker 1>and service.

00:12:14.970 --> 00:12:15.850
<v Speaker 1>And if

00:12:17.050 --> 00:12:19.290
<v Speaker 1>a domain is provided, it also creates an

00:12:19.290 --> 00:12:20.090
<v Speaker 1>ingress.

00:12:20.810 --> 00:12:24.250
<v Speaker 1>What I want to pinpoint here is that

00:12:24.250 --> 00:12:25.450
<v Speaker 1>just that

00:12:25.610 --> 00:12:27.290
<v Speaker 1>one line of that

00:12:27.450 --> 00:12:27.930
<v Speaker 1>code

00:12:28.405 --> 00:12:30.325
<v Speaker 1>is actually what developers

00:12:30.325 --> 00:12:31.125
<v Speaker 1>care,

00:12:31.525 --> 00:12:33.125
<v Speaker 1>is that PaaS

00:12:34.325 --> 00:12:37.285
<v Speaker 1>lexicon or that PaaS experience.

00:12:37.845 --> 00:12:40.485
<v Speaker 1>Developers just want to know, okay. That cluster

00:12:40.485 --> 00:12:43.110
<v Speaker 1>is capable of running web apps on a

00:12:43.110 --> 00:12:44.230
<v Speaker 1>specific domain.

00:12:44.550 --> 00:12:46.310
<v Speaker 1>Or think about a database.

00:12:47.110 --> 00:12:48.630
<v Speaker 1>A developer

00:12:48.710 --> 00:12:51.670
<v Speaker 1>who is not responsible for managing databases

00:12:52.070 --> 00:12:55.910
<v Speaker 1>just wants a host name, a username, password,

00:12:55.910 --> 00:12:57.910
<v Speaker 1>and the name of the database to use

00:12:57.910 --> 00:13:00.435
<v Speaker 1>it, and that's basically it.

00:13:00.675 --> 00:13:02.515
<v Speaker 1>But if you think of a

00:13:02.915 --> 00:13:05.955
<v Speaker 1>decent configuration in Kubernetes for a Postgres or

00:13:05.955 --> 00:13:06.835
<v Speaker 1>a MySQL,

00:13:06.995 --> 00:13:09.875
<v Speaker 1>it consists of lots of line of code,

00:13:09.875 --> 00:13:11.955
<v Speaker 1>and they make no sense for a mere

00:13:11.955 --> 00:13:15.920
<v Speaker 1>developer. So okay. First, the the output of

00:13:15.920 --> 00:13:19.200
<v Speaker 1>that slide is we have these named functions.

00:13:21.199 --> 00:13:22.080
<v Speaker 1>Then

00:13:22.160 --> 00:13:25.279
<v Speaker 1>it can allow us to create a single

00:13:25.279 --> 00:13:25.839
<v Speaker 1>file

00:13:26.265 --> 00:13:28.425
<v Speaker 1>and with a compact syntax where

00:13:29.225 --> 00:13:32.825
<v Speaker 1>you can list all of your microservices,

00:13:33.065 --> 00:13:36.985
<v Speaker 1>your app, your background worker database,

00:13:37.625 --> 00:13:38.185
<v Speaker 1>and

00:13:38.585 --> 00:13:39.945
<v Speaker 1>reference

00:13:41.260 --> 00:13:42.140
<v Speaker 1>these

00:13:42.300 --> 00:13:43.580
<v Speaker 1>function calls

00:13:44.140 --> 00:13:45.020
<v Speaker 1>within

00:13:45.180 --> 00:13:48.060
<v Speaker 1>within that file. So for example, in that

00:13:48.060 --> 00:13:50.380
<v Speaker 1>example, you have web application,

00:13:50.620 --> 00:13:54.620
<v Speaker 1>background worker for email delivery, and Postgres database.

00:13:56.074 --> 00:13:57.035
<v Speaker 1>For example,

00:13:58.875 --> 00:13:59.995
<v Speaker 1>a worker,

00:14:00.315 --> 00:14:02.475
<v Speaker 1>it's it's obvious that it has to work

00:14:02.475 --> 00:14:05.514
<v Speaker 1>from the very same image, so it's referenced

00:14:05.514 --> 00:14:06.954
<v Speaker 1>the very same image from

00:14:07.730 --> 00:14:09.649
<v Speaker 1>my app component,

00:14:09.889 --> 00:14:13.089
<v Speaker 1>and it shares all the environment configuration.

00:14:14.050 --> 00:14:16.130
<v Speaker 1>What's also interesting is that

00:14:16.450 --> 00:14:17.089
<v Speaker 1>in

00:14:17.570 --> 00:14:21.170
<v Speaker 1>any programming language to reference values, we use

00:14:21.250 --> 00:14:21.970
<v Speaker 1>variables,

00:14:22.835 --> 00:14:25.875
<v Speaker 1>And that code is written in JSON. It's

00:14:25.875 --> 00:14:28.435
<v Speaker 1>like JSON interpreter,

00:14:28.435 --> 00:14:30.195
<v Speaker 1>JSON with macros.

00:14:31.395 --> 00:14:31.955
<v Speaker 1>And

00:14:32.515 --> 00:14:33.075
<v Speaker 1>we can

00:14:34.860 --> 00:14:35.740
<v Speaker 1>observe

00:14:36.300 --> 00:14:40.060
<v Speaker 1>dependencies between these components just by looking at

00:14:40.060 --> 00:14:41.340
<v Speaker 1>which variables

00:14:41.340 --> 00:14:42.540
<v Speaker 1>are referenced.

00:14:43.420 --> 00:14:44.060
<v Speaker 1>And

00:14:45.500 --> 00:14:47.100
<v Speaker 1>you can wrap anything

00:14:47.340 --> 00:14:48.220
<v Speaker 1>within

00:14:48.904 --> 00:14:51.625
<v Speaker 1>building block within the template. Think of it

00:14:51.625 --> 00:14:52.425
<v Speaker 1>as a

00:14:52.824 --> 00:14:55.625
<v Speaker 1>managed service of a cloud provider. For example,

00:14:55.625 --> 00:14:57.464
<v Speaker 1>when you run integration tests,

00:14:57.625 --> 00:14:59.865
<v Speaker 1>you are fine to have a stateless Postgres

00:14:59.865 --> 00:15:00.665
<v Speaker 1>container

00:15:01.820 --> 00:15:02.380
<v Speaker 1>or

00:15:02.700 --> 00:15:07.260
<v Speaker 1>in internal Kubernetes cluster, your custom corporate cluster,

00:15:07.420 --> 00:15:09.660
<v Speaker 1>you have a a decent

00:15:10.460 --> 00:15:12.860
<v Speaker 1>claim into a database operator.

00:15:13.305 --> 00:15:16.185
<v Speaker 1>Or in public cloud, that Postgres can be

00:15:16.185 --> 00:15:17.465
<v Speaker 1>a claim for Azure

00:15:18.425 --> 00:15:19.705
<v Speaker 1>database or

00:15:19.865 --> 00:15:20.745
<v Speaker 1>AWS

00:15:20.745 --> 00:15:22.265
<v Speaker 1>managed database. So

00:15:22.985 --> 00:15:24.825
<v Speaker 1>it's quite

00:15:25.990 --> 00:15:28.070
<v Speaker 1>easy to swap things

00:15:28.389 --> 00:15:29.350
<v Speaker 1>underneath.

00:15:29.670 --> 00:15:31.350
<v Speaker 1>But for a developer,

00:15:31.589 --> 00:15:33.670
<v Speaker 1>we have the very same interface. It's just

00:15:33.670 --> 00:15:34.550
<v Speaker 1>a database.

00:15:35.190 --> 00:15:36.389
<v Speaker 1>It within

00:15:36.709 --> 00:15:38.149
<v Speaker 1>the template, it can be

00:15:38.555 --> 00:15:41.595
<v Speaker 1>a microservice developed by other team, or it

00:15:41.595 --> 00:15:43.834
<v Speaker 1>can be an off the shelf solution, like,

00:15:43.834 --> 00:15:47.035
<v Speaker 1>for example, a little WordPress install.

00:15:47.115 --> 00:15:50.394
<v Speaker 1>You can give your content managers. They they

00:15:50.394 --> 00:15:52.634
<v Speaker 1>use it to to write text, write code

00:15:52.634 --> 00:15:54.930
<v Speaker 1>writing, and you just consume that as an

00:15:54.930 --> 00:15:56.850
<v Speaker 1>API for your content. So

00:15:57.410 --> 00:16:01.010
<v Speaker 1>there are plenty of ways to encapsulate

00:16:01.010 --> 00:16:04.930
<v Speaker 1>your very specific things within these templates.

00:16:05.250 --> 00:16:06.770
<v Speaker 1>But in the end of the day, you

00:16:06.770 --> 00:16:08.050
<v Speaker 1>have a very short

00:16:09.464 --> 00:16:10.264
<v Speaker 1>file,

00:16:10.505 --> 00:16:12.745
<v Speaker 1>which is, by the way, backwards compatible with

00:16:12.745 --> 00:16:15.225
<v Speaker 1>all that all of YAML, and all the

00:16:15.225 --> 00:16:16.264
<v Speaker 1>syntax

00:16:16.425 --> 00:16:18.425
<v Speaker 1>within the that file

00:16:18.824 --> 00:16:21.785
<v Speaker 1>makes total sense for developers.

00:16:24.240 --> 00:16:25.920
<v Speaker 1>Why do I talk a lot about these

00:16:25.920 --> 00:16:27.520
<v Speaker 1>functions and interfaces?

00:16:27.840 --> 00:16:31.120
<v Speaker 1>The idea is that strictly typed code could

00:16:31.120 --> 00:16:32.400
<v Speaker 1>be visualized,

00:16:33.040 --> 00:16:35.520
<v Speaker 1>and this is actually the primary and the

00:16:35.520 --> 00:16:37.440
<v Speaker 1>core feature of DevStand.

00:16:38.415 --> 00:16:42.335
<v Speaker 1>It's an editor built into Visual Studio Code

00:16:42.335 --> 00:16:45.455
<v Speaker 1>to be as close to developers as possible,

00:16:46.015 --> 00:16:48.255
<v Speaker 1>and it allows visually

00:16:50.095 --> 00:16:54.060
<v Speaker 1>compose your solution architecture of these little building

00:16:54.060 --> 00:16:56.139
<v Speaker 1>blocks and interconnect

00:16:56.139 --> 00:16:56.860
<v Speaker 1>them

00:16:57.740 --> 00:16:58.779
<v Speaker 1>to each other.

00:16:59.500 --> 00:17:01.019
<v Speaker 1>And I have a

00:17:01.339 --> 00:17:02.380
<v Speaker 1>demo for it.

00:17:04.059 --> 00:17:05.099
<v Speaker 1>On our canvas,

00:17:05.744 --> 00:17:08.865
<v Speaker 1>we have add component button, and we see

00:17:08.865 --> 00:17:12.145
<v Speaker 1>a list of all the available components that

00:17:12.145 --> 00:17:13.665
<v Speaker 1>a developer

00:17:13.665 --> 00:17:15.904
<v Speaker 1>can utilize as a building block.

00:17:16.944 --> 00:17:17.665
<v Speaker 1>Oh, sorry.

00:17:18.400 --> 00:17:19.119
<v Speaker 1>Okay.

00:17:19.839 --> 00:17:22.399
<v Speaker 1>So we select web application,

00:17:22.480 --> 00:17:23.519
<v Speaker 1>give it a name.

00:17:24.400 --> 00:17:25.440
<v Speaker 1>Come on.

00:17:26.640 --> 00:17:27.519
<v Speaker 1>It

00:17:27.760 --> 00:17:28.800
<v Speaker 1>happens all the time.

00:17:30.495 --> 00:17:31.054
<v Speaker 1>So

00:17:32.575 --> 00:17:35.455
<v Speaker 1>once we have a new square put on

00:17:35.455 --> 00:17:36.655
<v Speaker 1>our canvas,

00:17:36.655 --> 00:17:38.015
<v Speaker 1>we have to fill

00:17:38.175 --> 00:17:39.615
<v Speaker 1>the these two

00:17:39.695 --> 00:17:42.095
<v Speaker 1>parameters of that web app function, the image

00:17:42.095 --> 00:17:42.575
<v Speaker 1>and port,

00:17:44.309 --> 00:17:45.909
<v Speaker 1>and we have a web app.

00:17:46.549 --> 00:17:48.149
<v Speaker 1>And at that

00:17:48.309 --> 00:17:51.190
<v Speaker 1>exact step, after a few clicks, we're already

00:17:51.190 --> 00:17:53.109
<v Speaker 1>capable of deploying

00:17:53.190 --> 00:17:55.990
<v Speaker 1>that image running with a web server, running

00:17:55.990 --> 00:17:57.830
<v Speaker 1>on that port to Kubernetes.

00:17:57.830 --> 00:18:01.014
<v Speaker 1>But let's look what's more possible here.

00:18:01.815 --> 00:18:04.215
<v Speaker 1>Let's create a database.

00:18:07.015 --> 00:18:09.014
<v Speaker 1>We also give a short

00:18:09.095 --> 00:18:12.374
<v Speaker 1>name for it and configure environment

00:18:12.455 --> 00:18:13.735
<v Speaker 1>for our application

00:18:14.480 --> 00:18:16.000
<v Speaker 1>with a drag and drop.

00:18:17.440 --> 00:18:18.480
<v Speaker 1>That was it.

00:18:18.960 --> 00:18:20.480
<v Speaker 1>So you just

00:18:20.480 --> 00:18:21.679
<v Speaker 1>referenced

00:18:21.680 --> 00:18:23.200
<v Speaker 1>and explicitly

00:18:23.520 --> 00:18:24.320
<v Speaker 1>declared

00:18:24.320 --> 00:18:25.600
<v Speaker 1>a dependency

00:18:26.240 --> 00:18:28.880
<v Speaker 1>between your web application and the database.

00:18:29.495 --> 00:18:32.775
<v Speaker 1>And since it's visual, it's really easy to

00:18:32.775 --> 00:18:36.135
<v Speaker 1>wrap your head around all the solution infrastructure.

00:18:37.815 --> 00:18:39.335
<v Speaker 1>Let's have a worker.

00:18:41.860 --> 00:18:43.700
<v Speaker 1>It has to run the very same image

00:18:43.700 --> 00:18:45.379
<v Speaker 1>as the primary application,

00:18:45.700 --> 00:18:47.379
<v Speaker 1>but with a different command

00:18:49.059 --> 00:18:50.899
<v Speaker 1>and also sharing

00:18:50.899 --> 00:18:52.019
<v Speaker 1>the very same

00:18:52.340 --> 00:18:53.379
<v Speaker 1>environment.

00:18:54.419 --> 00:18:55.220
<v Speaker 1>So

00:18:56.585 --> 00:18:58.505
<v Speaker 1>I think it's pretty simple

00:18:58.665 --> 00:19:00.345
<v Speaker 1>and easy to understand.

00:19:00.745 --> 00:19:02.265
<v Speaker 1>Like, what do you think?

00:19:03.625 --> 00:19:04.904
<v Speaker 0>Very impressed.

00:19:06.265 --> 00:19:08.985
<v Speaker 0>There's a few things here. It's like, I

00:19:08.985 --> 00:19:09.625
<v Speaker 0>haven't seen,

00:19:10.309 --> 00:19:13.030
<v Speaker 0>you know, JSON used in this way, but

00:19:13.030 --> 00:19:15.190
<v Speaker 0>it's it's really it's really clever because you

00:19:15.190 --> 00:19:16.630
<v Speaker 0>get a lot of composability

00:19:16.630 --> 00:19:20.070
<v Speaker 0>and flexibility by adopting JSON over just regular

00:19:20.070 --> 00:19:21.910
<v Speaker 0>YAML. Like you said, the ability

00:19:22.325 --> 00:19:24.565
<v Speaker 0>to define types, to create functions,

00:19:24.565 --> 00:19:26.325
<v Speaker 0>to have parameterization,

00:19:26.405 --> 00:19:27.524
<v Speaker 0>like all of these things

00:19:28.965 --> 00:19:30.405
<v Speaker 0>would have been cool on its own. But

00:19:30.405 --> 00:19:32.805
<v Speaker 0>the fact that you have this extension that

00:19:32.805 --> 00:19:34.325
<v Speaker 0>we can run and the tooling that we

00:19:34.325 --> 00:19:37.190
<v Speaker 0>use every day to work with our code

00:19:37.270 --> 00:19:39.750
<v Speaker 0>and give us drag and drop and visualization

00:19:39.750 --> 00:19:41.430
<v Speaker 0>to connect all those dots.

00:19:42.310 --> 00:19:44.630
<v Speaker 0>It's it's just too cool. That's that, like,

00:19:44.630 --> 00:19:45.590
<v Speaker 0>it's very

00:19:45.990 --> 00:19:47.830
<v Speaker 0>maybe we've got a wow for a from

00:19:48.544 --> 00:19:50.544
<v Speaker 0>Redeemna in the chat there. So there we

00:19:50.544 --> 00:19:51.024
<v Speaker 0>go.

00:19:51.745 --> 00:19:53.264
<v Speaker 0>You're impressing people.

00:19:53.664 --> 00:19:55.664
<v Speaker 0>But, yeah, like, you know, I I know

00:19:55.664 --> 00:19:56.624
<v Speaker 0>a lot of the time,

00:19:57.184 --> 00:19:58.625
<v Speaker 0>you know, we say, oh, we love the

00:19:58.625 --> 00:20:00.945
<v Speaker 0>command line and oh, yeah, we'll just break

00:20:00.945 --> 00:20:02.065
<v Speaker 0>code all day.

00:20:02.385 --> 00:20:04.145
<v Speaker 0>But these UI tools

00:20:04.600 --> 00:20:07.159
<v Speaker 0>are very convenient. They speed up our development

00:20:07.159 --> 00:20:09.240
<v Speaker 0>process. And you've always got the escape hatch

00:20:09.240 --> 00:20:10.759
<v Speaker 0>if you need to go through something else,

00:20:10.759 --> 00:20:13.000
<v Speaker 0>but there's a reason tools like from a

00:20:13.000 --> 00:20:15.159
<v Speaker 0>networking policy point of view, like the Cilium

00:20:15.159 --> 00:20:17.559
<v Speaker 0>editor and Hubble are so important because they

00:20:17.559 --> 00:20:19.934
<v Speaker 0>allow us to take complex things. Like you

00:20:19.934 --> 00:20:21.854
<v Speaker 0>said, the great wall of YAML and

00:20:22.495 --> 00:20:25.774
<v Speaker 0>that's not grokable, it's not understandable especially across

00:20:25.774 --> 00:20:28.735
<v Speaker 0>disparate files, many files, thousands of lines. You

00:20:28.735 --> 00:20:29.774
<v Speaker 0>have no idea

00:20:30.095 --> 00:20:32.414
<v Speaker 0>what the output of that is until you

00:20:32.414 --> 00:20:33.695
<v Speaker 0>have something like DevStand.

00:20:34.230 --> 00:20:37.029
<v Speaker 0>So I can't wait to see more. Exactly.

00:20:37.830 --> 00:20:38.470
<v Speaker 1>So

00:20:41.030 --> 00:20:44.470
<v Speaker 1>we have just tried to move our Kubernetes

00:20:44.470 --> 00:20:45.749
<v Speaker 1>closer to

00:20:46.150 --> 00:20:47.029
<v Speaker 1>PaaS,

00:20:47.670 --> 00:20:48.390
<v Speaker 1>but

00:20:49.515 --> 00:20:53.115
<v Speaker 1>I think DevStand is also beneficial in comparison

00:20:53.115 --> 00:20:54.075
<v Speaker 1>to PaaS.

00:20:54.395 --> 00:20:57.675
<v Speaker 1>Let's compare them in in terms of easiness

00:20:57.675 --> 00:20:58.795
<v Speaker 1>for developer

00:20:58.795 --> 00:20:59.915
<v Speaker 1>and control.

00:20:59.915 --> 00:21:01.435
<v Speaker 1>And I think DevStand is

00:21:01.940 --> 00:21:03.860
<v Speaker 1>a good balance

00:21:03.940 --> 00:21:06.899
<v Speaker 1>between low level and high level tooling

00:21:07.059 --> 00:21:07.860
<v Speaker 1>because

00:21:08.179 --> 00:21:11.140
<v Speaker 1>in Kubernetes, you can configure anything, but it

00:21:11.140 --> 00:21:14.420
<v Speaker 1>usually requires lots of low level plumbing,

00:21:14.995 --> 00:21:18.114
<v Speaker 1>and it results in bad developer experience and

00:21:18.195 --> 00:21:20.994
<v Speaker 1>difficulties to understand what you're actually doing.

00:21:22.755 --> 00:21:25.315
<v Speaker 1>In comparison to PaaS, it has great developer

00:21:25.315 --> 00:21:26.114
<v Speaker 1>experience,

00:21:26.115 --> 00:21:26.594
<v Speaker 1>but

00:21:27.154 --> 00:21:31.210
<v Speaker 1>you cannot usually escape that walled garden of

00:21:31.210 --> 00:21:33.370
<v Speaker 1>your cloud provider. And

00:21:33.450 --> 00:21:35.050
<v Speaker 1>once your solution

00:21:35.050 --> 00:21:36.890
<v Speaker 1>receives a decent traffic,

00:21:37.130 --> 00:21:38.250
<v Speaker 1>it can become

00:21:38.410 --> 00:21:41.210
<v Speaker 1>really, really expensive to continue working on

00:21:41.610 --> 00:21:42.810
<v Speaker 1>the same path.

00:21:42.970 --> 00:21:45.130
<v Speaker 1>But what's most important that

00:21:46.025 --> 00:21:47.384
<v Speaker 1>from time to time,

00:21:47.784 --> 00:21:49.065
<v Speaker 1>any developer

00:21:49.945 --> 00:21:52.184
<v Speaker 1>faces a situation when

00:21:52.825 --> 00:21:55.225
<v Speaker 1>they have to deviate somehow

00:21:55.225 --> 00:21:58.184
<v Speaker 1>from that golden path or so called paved

00:21:58.184 --> 00:21:58.825
<v Speaker 1>road

00:21:58.985 --> 00:22:00.184
<v Speaker 1>that the

00:22:00.809 --> 00:22:01.610
<v Speaker 1>provider

00:22:01.610 --> 00:22:05.450
<v Speaker 1>of the path had in mind while developing

00:22:05.450 --> 00:22:06.169
<v Speaker 1>that

00:22:06.250 --> 00:22:07.210
<v Speaker 1>platform.

00:22:08.090 --> 00:22:10.570
<v Speaker 1>The sometimes you just have

00:22:10.570 --> 00:22:11.849
<v Speaker 1>to tweak something

00:22:12.490 --> 00:22:14.730
<v Speaker 1>that it's not possible within a platform.

00:22:15.434 --> 00:22:18.955
<v Speaker 1>But with DevStand, you still retain control of

00:22:18.955 --> 00:22:20.075
<v Speaker 1>the underlying

00:22:20.475 --> 00:22:21.594
<v Speaker 1>configuration.

00:22:21.755 --> 00:22:22.634
<v Speaker 1>You can

00:22:24.955 --> 00:22:25.834
<v Speaker 1>pipe

00:22:25.914 --> 00:22:27.835
<v Speaker 1>the output of the DevStand

00:22:27.835 --> 00:22:29.115
<v Speaker 1>to customize

00:22:29.070 --> 00:22:30.829
<v Speaker 1>and do anything extra,

00:22:30.830 --> 00:22:33.789
<v Speaker 1>or you can write your own transformation

00:22:33.789 --> 00:22:37.309
<v Speaker 1>at in JSON at at top of that

00:22:37.710 --> 00:22:38.989
<v Speaker 1>breadboard file.

00:22:40.590 --> 00:22:41.149
<v Speaker 1>I

00:22:41.470 --> 00:22:42.029
<v Speaker 1>think

00:22:42.509 --> 00:22:46.065
<v Speaker 1>it it it there's something in it. Before

00:22:50.145 --> 00:22:53.825
<v Speaker 1>I talked about the primarily about the private

00:22:53.825 --> 00:22:57.585
<v Speaker 1>cloud, thinking of it's enterprise

00:22:57.585 --> 00:22:58.785
<v Speaker 1>or inner

00:22:58.785 --> 00:23:00.065
<v Speaker 1>inner source

00:23:00.230 --> 00:23:01.350
<v Speaker 1>solution

00:23:01.590 --> 00:23:02.790
<v Speaker 1>for developers

00:23:02.790 --> 00:23:04.710
<v Speaker 1>working within a company

00:23:05.430 --> 00:23:08.310
<v Speaker 1>brought by DevOps team also working in the

00:23:08.310 --> 00:23:11.350
<v Speaker 1>very same company for their fellow developers, for

00:23:11.350 --> 00:23:12.070
<v Speaker 1>their colleagues.

00:23:13.075 --> 00:23:13.715
<v Speaker 1>And

00:23:14.355 --> 00:23:17.235
<v Speaker 1>but I believe there has to be a

00:23:17.235 --> 00:23:18.355
<v Speaker 1>cloud solution

00:23:19.075 --> 00:23:20.115
<v Speaker 1>as well.

00:23:20.995 --> 00:23:22.035
<v Speaker 1>Think of

00:23:22.355 --> 00:23:22.995
<v Speaker 1>a

00:23:23.715 --> 00:23:26.280
<v Speaker 1>SaaS service when you can just create an

00:23:26.280 --> 00:23:29.240
<v Speaker 1>account, receive a freemium or trial,

00:23:29.880 --> 00:23:32.920
<v Speaker 1>can give credentials to your AWS

00:23:32.920 --> 00:23:35.800
<v Speaker 1>or Azure or DigitalOcean

00:23:35.800 --> 00:23:37.480
<v Speaker 1>account, the credentials.

00:23:37.800 --> 00:23:39.560
<v Speaker 1>And then that

00:23:40.360 --> 00:23:41.560
<v Speaker 1>SaaS

00:23:41.335 --> 00:23:43.735
<v Speaker 1>can create a new Kubernetes

00:23:43.735 --> 00:23:44.615
<v Speaker 1>cluster

00:23:44.695 --> 00:23:47.415
<v Speaker 1>and make it act as a path.

00:23:47.575 --> 00:23:49.815
<v Speaker 1>And once you need, for example, a database,

00:23:50.375 --> 00:23:52.375
<v Speaker 1>you can have a managed database

00:23:52.535 --> 00:23:55.815
<v Speaker 1>from a cloud provider like this serious thing

00:23:57.410 --> 00:23:59.410
<v Speaker 1>in the very same simple way as that

00:23:59.410 --> 00:24:01.490
<v Speaker 1>just little square on your

00:24:01.730 --> 00:24:02.610
<v Speaker 1>canvas.

00:24:03.490 --> 00:24:04.049
<v Speaker 1>And

00:24:05.570 --> 00:24:06.929
<v Speaker 1>what I see

00:24:07.250 --> 00:24:09.970
<v Speaker 1>for the future of DevStand is that

00:24:11.315 --> 00:24:12.514
<v Speaker 1>a couple of

00:24:12.995 --> 00:24:14.115
<v Speaker 1>products.

00:24:14.355 --> 00:24:16.835
<v Speaker 1>The first one is the open source edition

00:24:16.835 --> 00:24:18.274
<v Speaker 1>of DevStand for

00:24:19.155 --> 00:24:21.554
<v Speaker 1>in house development. It can improve

00:24:22.115 --> 00:24:23.235
<v Speaker 1>velocity

00:24:23.395 --> 00:24:26.590
<v Speaker 1>of internal developers. And since it's open source

00:24:26.590 --> 00:24:27.229
<v Speaker 1>and

00:24:27.710 --> 00:24:29.389
<v Speaker 1>and no fees required,

00:24:29.549 --> 00:24:30.989
<v Speaker 1>it can boost adoption,

00:24:30.990 --> 00:24:33.789
<v Speaker 1>and we can receive a lot of valuable

00:24:33.789 --> 00:24:36.590
<v Speaker 1>feedback from those early adopters.

00:24:36.669 --> 00:24:39.230
<v Speaker 1>But it also has to have something living

00:24:39.230 --> 00:24:42.134
<v Speaker 1>in the cloud that is just plain simple

00:24:42.695 --> 00:24:45.414
<v Speaker 1>that a mere developer can stumble upon that.

00:24:45.414 --> 00:24:48.374
<v Speaker 1>And once that developer lands in a company,

00:24:48.774 --> 00:24:51.014
<v Speaker 1>he can just say, well, I know a

00:24:51.014 --> 00:24:51.575
<v Speaker 1>thing

00:24:52.134 --> 00:24:54.774
<v Speaker 1>that helps save me lots of time,

00:24:55.490 --> 00:24:56.690
<v Speaker 1>and you can usually

00:24:56.850 --> 00:24:59.330
<v Speaker 1>utilize the very same thing within

00:24:59.570 --> 00:25:01.090
<v Speaker 1>a company infrastructure.

00:25:02.210 --> 00:25:02.929
<v Speaker 1>Like,

00:25:03.410 --> 00:25:05.010
<v Speaker 1>for example, you know,

00:25:05.730 --> 00:25:07.250
<v Speaker 1>GitLab is doing the same.

00:25:08.385 --> 00:25:11.184
<v Speaker 1>You can create your account at GitLab,

00:25:11.745 --> 00:25:13.825
<v Speaker 1>or you can have a self hosted GitLab.

00:25:13.825 --> 00:25:15.905
<v Speaker 1>It and it spreads

00:25:17.265 --> 00:25:20.145
<v Speaker 1>the GitLab across the world regardless if it's

00:25:20.145 --> 00:25:20.785
<v Speaker 1>paid

00:25:20.945 --> 00:25:23.380
<v Speaker 1>and cloud or it's unpaid

00:25:23.380 --> 00:25:24.100
<v Speaker 1>and

00:25:24.340 --> 00:25:25.460
<v Speaker 1>self hosted.

00:25:25.860 --> 00:25:26.419
<v Speaker 1>What

00:25:27.460 --> 00:25:28.420
<v Speaker 1>do you think is

00:25:29.860 --> 00:25:32.020
<v Speaker 1>what would you like to see more? More

00:25:32.020 --> 00:25:33.860
<v Speaker 1>of an open source thing? And do you

00:25:33.860 --> 00:25:35.380
<v Speaker 1>believe that SaaS

00:25:35.135 --> 00:25:38.015
<v Speaker 1>is really important, like, in in that product

00:25:38.015 --> 00:25:38.735
<v Speaker 1>mix?

00:25:40.815 --> 00:25:41.695
<v Speaker 0>Both.

00:25:42.015 --> 00:25:44.255
<v Speaker 0>I'll I'll be really partial. Like, you know,

00:25:44.255 --> 00:25:46.095
<v Speaker 0>I always love to see open source software

00:25:46.095 --> 00:25:46.895
<v Speaker 0>because,

00:25:46.975 --> 00:25:48.850
<v Speaker 0>you know, the more it allows you to

00:25:48.850 --> 00:25:51.890
<v Speaker 0>build a a sense of community and with

00:25:51.970 --> 00:25:54.369
<v Speaker 0>and, you know, onboarding new contributors,

00:25:54.690 --> 00:25:57.809
<v Speaker 0>helping them, allowing them to shift the direction

00:25:57.809 --> 00:26:00.610
<v Speaker 0>of the project, having a a common voice

00:26:00.965 --> 00:26:03.205
<v Speaker 0>that tries to push something forward and improve

00:26:03.205 --> 00:26:04.965
<v Speaker 0>adoption, I think, is really important.

00:26:05.365 --> 00:26:06.725
<v Speaker 0>But I also understand

00:26:07.285 --> 00:26:07.845
<v Speaker 0>that,

00:26:08.725 --> 00:26:10.405
<v Speaker 0>you know, open source isn't gonna pay our

00:26:10.405 --> 00:26:13.205
<v Speaker 0>bills. We all know that. Exactly. You know,

00:26:13.205 --> 00:26:14.965
<v Speaker 0>I I I think companies that go down

00:26:14.965 --> 00:26:15.685
<v Speaker 0>this Azure,

00:26:17.100 --> 00:26:19.260
<v Speaker 0>you know, they can be wildly successful. You

00:26:19.260 --> 00:26:20.540
<v Speaker 0>know, we see a lot of examples like

00:26:20.540 --> 00:26:24.299
<v Speaker 0>this. Grafana is the most ubiquitous dashboarding tool

00:26:24.299 --> 00:26:26.140
<v Speaker 0>in the world for observability

00:26:26.140 --> 00:26:28.139
<v Speaker 0>and monitoring and platform engineering,

00:26:28.299 --> 00:26:29.980
<v Speaker 0>but they have a hosted SaaS version because

00:26:29.980 --> 00:26:32.715
<v Speaker 0>sometimes people just need convenience. Maybe they need

00:26:32.715 --> 00:26:35.595
<v Speaker 0>enterprise features like, you know, SSO against SAML

00:26:35.595 --> 00:26:36.475
<v Speaker 0>or whatever.

00:26:36.635 --> 00:26:37.274
<v Speaker 0>So,

00:26:37.595 --> 00:26:40.075
<v Speaker 0>yeah. And FoxDB do the same. They have

00:26:40.075 --> 00:26:42.315
<v Speaker 0>their open source database and it's completely open

00:26:42.315 --> 00:26:42.875
<v Speaker 0>source.

00:26:43.195 --> 00:26:44.875
<v Speaker 0>But if you don't wanna roast host it

00:26:44.875 --> 00:26:46.900
<v Speaker 0>yourself or you want this couple of extra

00:26:46.900 --> 00:26:48.580
<v Speaker 0>features, then go with this as well.

00:26:48.980 --> 00:26:50.820
<v Speaker 0>I think as a model, we see it

00:26:50.820 --> 00:26:52.820
<v Speaker 0>work well. The last example I'll give is

00:26:52.820 --> 00:26:55.140
<v Speaker 0>Pulumi does this too. Everything Pulumi does is

00:26:55.140 --> 00:26:56.180
<v Speaker 0>open source.

00:26:56.660 --> 00:26:58.420
<v Speaker 0>But, you know, if you don't want to

00:26:58.420 --> 00:27:00.525
<v Speaker 0>manage your state files, you give me a

00:27:00.525 --> 00:27:01.725
<v Speaker 0>little bit of money and they do it

00:27:01.725 --> 00:27:04.205
<v Speaker 0>for you. So, yeah, I think the strategy

00:27:04.205 --> 00:27:06.685
<v Speaker 0>is is tried and proven to work. And

00:27:06.685 --> 00:27:08.445
<v Speaker 0>I love that it allows us to keep

00:27:08.445 --> 00:27:09.485
<v Speaker 0>things free,

00:27:09.725 --> 00:27:12.285
<v Speaker 0>allow developers to experiment, and help shape the

00:27:12.285 --> 00:27:13.325
<v Speaker 0>vision for the project.

00:27:14.660 --> 00:27:15.460
<v Speaker 1>Mhmm.

00:27:15.860 --> 00:27:18.100
<v Speaker 1>That's good. That makes total sense.

00:27:20.820 --> 00:27:23.860
<v Speaker 1>And for the demo, it's basically it.

00:27:27.555 --> 00:27:28.514
<v Speaker 1>I have

00:27:30.275 --> 00:27:31.794
<v Speaker 1>a video demo

00:27:32.275 --> 00:27:33.315
<v Speaker 1>explaining

00:27:33.475 --> 00:27:36.115
<v Speaker 1>and showing how that works a little bit

00:27:36.115 --> 00:27:36.835
<v Speaker 1>deeper.

00:27:37.075 --> 00:27:37.715
<v Speaker 1>But

00:27:38.035 --> 00:27:40.115
<v Speaker 1>maybe before diving

00:27:40.115 --> 00:27:40.595
<v Speaker 1>further,

00:27:41.299 --> 00:27:43.299
<v Speaker 1>you can have some questions or we have

00:27:43.299 --> 00:27:44.899
<v Speaker 1>some questions in the comments.

00:27:46.340 --> 00:27:49.059
<v Speaker 0>Just people saying that things sound interesting. There's

00:27:49.059 --> 00:27:50.980
<v Speaker 0>a comment there from Alina.

00:27:51.780 --> 00:27:52.499
<v Speaker 0>With,

00:27:52.660 --> 00:27:54.580
<v Speaker 0>oh, wow. That's interesting too.

00:27:55.585 --> 00:27:57.664
<v Speaker 0>So and for them that also said at

00:27:57.664 --> 00:27:58.945
<v Speaker 0>the start, but I forgot to show the

00:27:58.945 --> 00:28:01.585
<v Speaker 0>comment is that, yeah, for new people, Kubernetes

00:28:01.585 --> 00:28:04.144
<v Speaker 0>does sound scary. Although that is getting better.

00:28:04.144 --> 00:28:06.465
<v Speaker 0>But it's also getting better through improvements to

00:28:06.465 --> 00:28:08.945
<v Speaker 0>Kubernetes itself and new custom resources, but also

00:28:08.945 --> 00:28:10.760
<v Speaker 0>by tooling like this, which I think is

00:28:10.760 --> 00:28:11.559
<v Speaker 0>really cool.

00:28:13.559 --> 00:28:16.840
<v Speaker 1>You know, what I also noticed after several

00:28:16.840 --> 00:28:17.559
<v Speaker 1>demos,

00:28:17.880 --> 00:28:20.119
<v Speaker 1>there were no people saying

00:28:20.679 --> 00:28:21.880
<v Speaker 1>meh about

00:28:21.880 --> 00:28:24.919
<v Speaker 1>that solution. There were clearly two camps.

00:28:25.755 --> 00:28:28.235
<v Speaker 1>The first camp were people

00:28:28.875 --> 00:28:30.075
<v Speaker 1>quite enthusiastic

00:28:30.075 --> 00:28:31.195
<v Speaker 1>about that solution.

00:28:31.515 --> 00:28:34.555
<v Speaker 1>They told something like, yeah. That totally makes

00:28:34.555 --> 00:28:37.275
<v Speaker 1>sense. It would save time. It's it's good.

00:28:37.275 --> 00:28:39.035
<v Speaker 1>It's good. Can continue working on that.

00:28:40.180 --> 00:28:42.420
<v Speaker 1>But there were completely opposite

00:28:43.540 --> 00:28:44.420
<v Speaker 1>idea.

00:28:44.580 --> 00:28:45.140
<v Speaker 1>Like,

00:28:45.940 --> 00:28:48.660
<v Speaker 1>I don't know why you just developed that.

00:28:48.660 --> 00:28:50.020
<v Speaker 1>Like, Kubernetes

00:28:50.100 --> 00:28:52.980
<v Speaker 1>Kubernetes is sophisticated for a reason.

00:28:53.865 --> 00:28:56.184
<v Speaker 1>Like, it it just has to be

00:28:56.825 --> 00:28:57.625
<v Speaker 1>complicated

00:28:57.625 --> 00:28:59.865
<v Speaker 1>because it's a serious thing.

00:29:00.745 --> 00:29:01.225
<v Speaker 1>And

00:29:01.865 --> 00:29:04.184
<v Speaker 0>No. I don't agree with that whatsoever.

00:29:04.825 --> 00:29:06.985
<v Speaker 0>I think Kubernetes being complicated

00:29:07.150 --> 00:29:09.790
<v Speaker 0>is because the project is still young and

00:29:09.790 --> 00:29:11.870
<v Speaker 0>we haven't found the right abstractions

00:29:11.870 --> 00:29:13.630
<v Speaker 0>yet. And we still need to build these

00:29:13.630 --> 00:29:15.550
<v Speaker 0>abstractions. And I see DevStand as a tool

00:29:15.550 --> 00:29:18.190
<v Speaker 0>that can allow us to build these abstractions,

00:29:18.510 --> 00:29:20.804
<v Speaker 0>you know, by leveraging JSON on it. You

00:29:20.804 --> 00:29:22.884
<v Speaker 0>know, we allow we allow people to have

00:29:22.884 --> 00:29:25.445
<v Speaker 0>repositories where they contain these abstractions like a

00:29:25.445 --> 00:29:27.445
<v Speaker 0>web app or like a worker or like

00:29:27.445 --> 00:29:28.964
<v Speaker 0>a queue or like a

00:29:29.445 --> 00:29:32.004
<v Speaker 0>post grads database. Like, this is what Helm

00:29:32.004 --> 00:29:33.044
<v Speaker 0>does, but Helm

00:29:33.490 --> 00:29:35.330
<v Speaker 0>probably made a few mistakes. I don't know

00:29:35.330 --> 00:29:37.090
<v Speaker 0>many people that like Helm and the reason

00:29:37.090 --> 00:29:37.970
<v Speaker 0>is why.

00:29:38.210 --> 00:29:40.849
<v Speaker 0>Well, it uses Go template and syntax and

00:29:40.929 --> 00:29:43.730
<v Speaker 0>not every consumer of Kubernetes even uses Go

00:29:43.730 --> 00:29:45.330
<v Speaker 0>or writes and Go. So they have this

00:29:45.755 --> 00:29:48.075
<v Speaker 0>barrier to entry where they're looking at something

00:29:48.075 --> 00:29:49.595
<v Speaker 0>that just doesn't make sense. I mean, I

00:29:49.595 --> 00:29:51.515
<v Speaker 0>remember still looking at helm templates for the

00:29:51.515 --> 00:29:53.675
<v Speaker 0>first time and going at like, what is

00:29:53.675 --> 00:29:56.795
<v Speaker 0>this range dot syntax? Why is dot context?

00:29:56.795 --> 00:29:58.395
<v Speaker 0>What's a context? And it's like, have to

00:29:58.395 --> 00:30:01.330
<v Speaker 0>understand scoping and this is like, what's what's

00:30:01.330 --> 00:30:03.970
<v Speaker 0>wrong with mustache and handlebar syntax? Like And

00:30:03.970 --> 00:30:06.610
<v Speaker 1>and don't forget the right amount of offsets

00:30:06.610 --> 00:30:09.090
<v Speaker 1>in the beginning of line. Oh, yeah. And

00:30:09.090 --> 00:30:10.850
<v Speaker 0>having to end on things and and and

00:30:10.850 --> 00:30:12.929
<v Speaker 0>and how those work and new lines breaking

00:30:12.929 --> 00:30:13.970
<v Speaker 0>and empty object.

00:30:14.665 --> 00:30:16.825
<v Speaker 0>It's really tough. Right? And I'm not saying

00:30:16.825 --> 00:30:17.945
<v Speaker 0>JSON it is

00:30:18.585 --> 00:30:20.665
<v Speaker 0>better, but it but it is. It's more

00:30:20.665 --> 00:30:24.105
<v Speaker 0>familiar at least because it's JSON with some

00:30:24.105 --> 00:30:26.424
<v Speaker 0>extra tweaks on top of it. So

00:30:26.905 --> 00:30:27.065
<v Speaker 0>yeah.

00:30:28.230 --> 00:30:30.070
<v Speaker 0>So long way to say, I I disagree

00:30:30.070 --> 00:30:31.910
<v Speaker 0>with the people that made that comment. Kubernetes

00:30:31.910 --> 00:30:33.990
<v Speaker 0>does not need to be complex. That's what

00:30:33.990 --> 00:30:36.550
<v Speaker 0>people say that wanna protect their smarts. But

00:30:36.550 --> 00:30:37.190
<v Speaker 0>really,

00:30:37.429 --> 00:30:39.350
<v Speaker 0>we need to make Kubernetes available to to

00:30:39.350 --> 00:30:41.190
<v Speaker 0>everyone. We we need to make it simpler

00:30:41.190 --> 00:30:42.630
<v Speaker 0>to the right abstractions.

00:30:42.915 --> 00:30:44.755
<v Speaker 0>And it's only over time we can actually

00:30:44.755 --> 00:30:46.835
<v Speaker 0>understand what those abstractions should be.

00:30:47.715 --> 00:30:49.875
<v Speaker 0>Yep. We got a couple more comments there.

00:30:49.875 --> 00:30:52.995
<v Speaker 0>So, Pradumna's Oh, sure. In love the product.

00:30:53.875 --> 00:30:56.435
<v Speaker 0>We've got Kumaraju saying no image files and

00:30:56.435 --> 00:30:57.635
<v Speaker 0>YAML's. Great.

00:30:58.810 --> 00:31:00.810
<v Speaker 0>And we've got one from Russell's

00:31:00.810 --> 00:31:01.850
<v Speaker 0>in I

00:31:02.650 --> 00:31:05.290
<v Speaker 0>assume most business devs that have been responsible

00:31:05.290 --> 00:31:08.250
<v Speaker 0>for supporting and for dependencies, DB's, Kubernetes, etcetera.

00:31:08.570 --> 00:31:10.170
<v Speaker 0>Probably want to have it managed as a

00:31:10.170 --> 00:31:12.170
<v Speaker 0>service ops can be hard. So plus one

00:31:12.170 --> 00:31:14.165
<v Speaker 0>for SaaS. I know the comments are a

00:31:14.165 --> 00:31:15.605
<v Speaker 0>little bit off the screen there, but I

00:31:15.605 --> 00:31:16.885
<v Speaker 0>need to fix that later.

00:31:17.765 --> 00:31:20.485
<v Speaker 1>Well, that's great to hear such feedback.

00:31:20.805 --> 00:31:22.165
<v Speaker 1>I encourage

00:31:22.165 --> 00:31:26.085
<v Speaker 1>the listeners to go to the website DevStand.app.

00:31:26.600 --> 00:31:28.440
<v Speaker 1>And at the very bottom of the main

00:31:28.440 --> 00:31:29.799
<v Speaker 1>page, there is a

00:31:30.360 --> 00:31:31.320
<v Speaker 1>little

00:31:31.400 --> 00:31:32.680
<v Speaker 1>form when when you

00:31:33.480 --> 00:31:36.120
<v Speaker 1>where you can leave your email address and

00:31:36.120 --> 00:31:36.840
<v Speaker 1>receive

00:31:36.920 --> 00:31:37.880
<v Speaker 1>updates.

00:31:38.360 --> 00:31:41.755
<v Speaker 1>I haven't posted anything yet, but I believe

00:31:41.835 --> 00:31:44.395
<v Speaker 1>I would have some big updates

00:31:44.395 --> 00:31:47.275
<v Speaker 1>in the fourth in the forthcoming months.

00:31:47.515 --> 00:31:50.715
<v Speaker 1>So stay tuned. And even if you want

00:31:50.715 --> 00:31:51.195
<v Speaker 1>to

00:31:52.315 --> 00:31:55.390
<v Speaker 1>have a a deeper talk about the the

00:31:55.390 --> 00:31:58.350
<v Speaker 1>technology or you have an idea of how

00:31:58.350 --> 00:31:58.990
<v Speaker 1>to

00:31:59.310 --> 00:32:02.909
<v Speaker 1>fit DevStand into your very specific case,

00:32:03.310 --> 00:32:04.590
<v Speaker 1>also just

00:32:05.470 --> 00:32:07.790
<v Speaker 1>leave your email. I would

00:32:09.554 --> 00:32:12.034
<v Speaker 1>reply you back and we can talk. Or

00:32:12.034 --> 00:32:14.034
<v Speaker 1>you can directly send me an email at

00:32:14.034 --> 00:32:17.075
<v Speaker 1>max@DevStand.app.

00:32:18.115 --> 00:32:19.234
<v Speaker 0>Alright. Awesome.

00:32:20.034 --> 00:32:21.635
<v Speaker 0>I guess I've got a question then before

00:32:21.635 --> 00:32:23.475
<v Speaker 0>we dive straight in to the demo. Mhmm.

00:32:23.475 --> 00:32:24.115
<v Speaker 0>So

00:32:25.169 --> 00:32:27.330
<v Speaker 0>for anyone who's currently using

00:32:28.130 --> 00:32:31.490
<v Speaker 0>JSON to deploy their application, will that work

00:32:31.490 --> 00:32:33.250
<v Speaker 0>by default with DevStand? Will I be able

00:32:33.250 --> 00:32:34.369
<v Speaker 0>to visualize that?

00:32:34.770 --> 00:32:37.090
<v Speaker 0>Or to is there something slightly different to

00:32:37.090 --> 00:32:37.969
<v Speaker 0>the way

00:32:38.690 --> 00:32:39.570
<v Speaker 0>that things work?

00:32:40.875 --> 00:32:42.315
<v Speaker 1>I'm not sure on

00:32:42.395 --> 00:32:45.355
<v Speaker 1>on the studio question. Right? But we'll see.

00:32:45.355 --> 00:32:46.795
<v Speaker 0>I have a a micro service just now

00:32:46.795 --> 00:32:49.275
<v Speaker 0>that has a conflict map and a deployment.

00:32:49.355 --> 00:32:51.515
<v Speaker 0>And I I I I deploy it with

00:32:51.515 --> 00:32:54.250
<v Speaker 0>JSON. So I'm using JSON as a compiler,

00:32:54.250 --> 00:32:55.850
<v Speaker 0>and I'm typing it through to KubeControl apply,

00:32:55.850 --> 00:32:57.530
<v Speaker 0>but I don't have any DevStand.

00:32:57.770 --> 00:32:59.770
<v Speaker 0>Is there a way for me to visualize

00:32:59.770 --> 00:33:01.210
<v Speaker 0>that with DevStand?

00:33:02.170 --> 00:33:05.130
<v Speaker 1>Not. No. Okay. Because, yep, you have to

00:33:05.130 --> 00:33:07.370
<v Speaker 1>have these functions

00:33:08.404 --> 00:33:10.565
<v Speaker 1>quite strictly structured.

00:33:10.565 --> 00:33:13.284
<v Speaker 1>You have to provide JSON JSON

00:33:13.284 --> 00:33:14.325
<v Speaker 1>schema

00:33:14.725 --> 00:33:16.485
<v Speaker 1>for your configuration

00:33:16.485 --> 00:33:17.445
<v Speaker 1>parameters.

00:33:18.085 --> 00:33:19.205
<v Speaker 1>And so

00:33:19.924 --> 00:33:20.325
<v Speaker 1>your

00:33:21.044 --> 00:33:24.325
<v Speaker 1>so the plugin can understand

00:33:23.640 --> 00:33:24.760
<v Speaker 1>or read

00:33:25.400 --> 00:33:28.679
<v Speaker 1>your code and extract that information

00:33:29.000 --> 00:33:30.200
<v Speaker 1>from your code.

00:33:30.520 --> 00:33:33.559
<v Speaker 1>Because as I told, nothing is hardwired

00:33:33.720 --> 00:33:35.960
<v Speaker 1>to the plugin itself. Plugin is just a

00:33:35.960 --> 00:33:37.160
<v Speaker 1>visual visualization

00:33:38.164 --> 00:33:40.085
<v Speaker 1>of a very specific

00:33:40.085 --> 00:33:43.364
<v Speaker 1>way of coding this JSON and functions.

00:33:44.325 --> 00:33:46.804
<v Speaker 0>Okay. Alright. Let's see it in action then.

00:33:46.804 --> 00:33:48.164
<v Speaker 0>Let's have some fun. Good.

00:33:50.725 --> 00:33:51.924
<v Speaker 1>In order to

00:33:52.565 --> 00:33:55.299
<v Speaker 1>avoid any hiccups and to save time, this

00:33:55.299 --> 00:33:56.899
<v Speaker 1>is a recorded video.

00:33:58.820 --> 00:33:59.779
<v Speaker 1>So let's

00:34:00.580 --> 00:34:04.339
<v Speaker 1>so we have a very specific directory.

00:34:04.980 --> 00:34:07.005
<v Speaker 1>It doesn't have to, but for the demo

00:34:07.005 --> 00:34:09.805
<v Speaker 1>purposes, I have the directory dot DevStand.

00:34:10.445 --> 00:34:11.725
<v Speaker 1>And right clicking

00:34:12.765 --> 00:34:15.565
<v Speaker 1>on that directory in Visual Studio Code and

00:34:15.565 --> 00:34:17.885
<v Speaker 1>selecting Scaffold breadboard directory

00:34:18.045 --> 00:34:19.245
<v Speaker 1>will create

00:34:20.285 --> 00:34:22.045
<v Speaker 1>a new breadboard file

00:34:22.500 --> 00:34:24.500
<v Speaker 1>and immediately open it.

00:34:25.699 --> 00:34:26.420
<v Speaker 0>Nice.

00:34:26.820 --> 00:34:28.500
<v Speaker 1>I got add component,

00:34:29.860 --> 00:34:30.739
<v Speaker 1>web application.

00:34:37.565 --> 00:34:39.165
<v Speaker 1>Just set the

00:34:39.645 --> 00:34:40.364
<v Speaker 1>image,

00:34:46.284 --> 00:34:46.925
<v Speaker 1>the port.

00:34:50.410 --> 00:34:53.130
<v Speaker 1>And, yep, before piping into Kubernetes,

00:34:53.210 --> 00:34:56.010
<v Speaker 1>we can just select view manifests,

00:34:56.330 --> 00:34:59.290
<v Speaker 1>and a new editor opens in a separate

00:34:59.290 --> 00:35:01.930
<v Speaker 1>tab. When you have all the output

00:35:02.565 --> 00:35:05.045
<v Speaker 1>of that breadboard file,

00:35:05.285 --> 00:35:06.885
<v Speaker 1>you have all your ports

00:35:07.605 --> 00:35:09.205
<v Speaker 1>for the for the deployment

00:35:09.525 --> 00:35:10.805
<v Speaker 1>and specification

00:35:10.805 --> 00:35:12.485
<v Speaker 1>for the service itself.

00:35:13.845 --> 00:35:15.125
<v Speaker 1>We can add

00:35:15.925 --> 00:35:16.805
<v Speaker 1>ingress

00:35:16.805 --> 00:35:17.525
<v Speaker 1>over here.

00:35:31.135 --> 00:35:31.775
<v Speaker 1>And

00:35:32.095 --> 00:35:35.535
<v Speaker 1>just checking that the local host domain just

00:35:36.174 --> 00:35:37.055
<v Speaker 1>properly

00:35:37.055 --> 00:35:39.695
<v Speaker 1>is traced to the local host.

00:35:40.654 --> 00:35:43.375
<v Speaker 1>It's good because the demo was recorded on

00:35:43.375 --> 00:35:44.815
<v Speaker 1>the local

00:35:45.500 --> 00:35:46.460
<v Speaker 1>computer.

00:35:48.380 --> 00:35:51.260
<v Speaker 1>And among the manifests, we now have our

00:35:51.260 --> 00:35:52.540
<v Speaker 1>new ingress,

00:35:52.859 --> 00:35:54.220
<v Speaker 1>which references

00:35:55.740 --> 00:35:58.860
<v Speaker 1>the host name to our service

00:35:59.099 --> 00:35:59.900
<v Speaker 1>and port.

00:36:02.984 --> 00:36:03.705
<v Speaker 1>Okay.

00:36:04.905 --> 00:36:08.265
<v Speaker 1>So and once we are ready to deploy,

00:36:08.665 --> 00:36:11.065
<v Speaker 1>just click pipe to kubectl,

00:36:11.385 --> 00:36:13.385
<v Speaker 1>and a terminal opens up

00:36:13.910 --> 00:36:16.470
<v Speaker 1>with just that pipe command.

00:36:18.870 --> 00:36:19.590
<v Speaker 1>Okay.

00:36:19.670 --> 00:36:22.950
<v Speaker 1>We have created deployment ingress and service, and

00:36:23.190 --> 00:36:24.710
<v Speaker 1>this is this is a very

00:36:26.135 --> 00:36:29.095
<v Speaker 1>a few words about that demo application. This

00:36:29.095 --> 00:36:32.214
<v Speaker 1>is file manager that just uploads files. That's

00:36:32.214 --> 00:36:33.255
<v Speaker 1>a a

00:36:33.255 --> 00:36:35.815
<v Speaker 1>very basic feature to to show.

00:36:38.375 --> 00:36:39.015
<v Speaker 1>So

00:36:39.415 --> 00:36:41.255
<v Speaker 1>what if we can update our

00:36:42.190 --> 00:36:45.630
<v Speaker 1>domain right there within our breadboard?

00:36:46.270 --> 00:36:47.710
<v Speaker 1>And once we apply

00:36:48.910 --> 00:36:52.110
<v Speaker 1>to Kubernetes that breadboard again, we see that

00:36:52.110 --> 00:36:54.510
<v Speaker 1>nothing is unchanged except the ingress,

00:36:56.845 --> 00:36:58.445
<v Speaker 1>And the previous link

00:36:58.845 --> 00:37:00.125
<v Speaker 1>doesn't work now.

00:37:01.005 --> 00:37:03.485
<v Speaker 1>But once we visit a new address,

00:37:03.485 --> 00:37:04.365
<v Speaker 1>it works.

00:37:07.245 --> 00:37:07.805
<v Speaker 0>Alright.

00:37:09.660 --> 00:37:11.820
<v Speaker 1>So You happy to take questions as we

00:37:11.820 --> 00:37:13.260
<v Speaker 0>go? Sure.

00:37:13.980 --> 00:37:16.460
<v Speaker 0>So I'm curious now. Like,

00:37:17.980 --> 00:37:20.460
<v Speaker 0>is there the means with DevStand?

00:37:21.705 --> 00:37:23.225
<v Speaker 0>Like, okay. Let me try and set some

00:37:23.225 --> 00:37:24.585
<v Speaker 0>context first.

00:37:24.905 --> 00:37:27.065
<v Speaker 0>You know, I don't just deploy to one

00:37:27.065 --> 00:37:29.225
<v Speaker 0>cluster. It's likely I'll have some sort of

00:37:29.225 --> 00:37:31.785
<v Speaker 0>dev cluster at a production cluster. So for

00:37:31.785 --> 00:37:33.465
<v Speaker 0>the ingress, it may be that I wanna

00:37:33.465 --> 00:37:36.839
<v Speaker 0>pull that value externally or change it based

00:37:36.839 --> 00:37:38.280
<v Speaker 0>on where I'm deploying to.

00:37:38.680 --> 00:37:41.160
<v Speaker 0>Is there any way of pulling external

00:37:41.319 --> 00:37:43.560
<v Speaker 0>configuration? Sure. Well, I

00:37:44.200 --> 00:37:45.640
<v Speaker 1>mean, at the very

00:37:45.960 --> 00:37:46.760
<v Speaker 1>moment,

00:37:47.079 --> 00:37:49.935
<v Speaker 1>that's not developed yet. But, sure,

00:37:50.895 --> 00:37:52.975
<v Speaker 1>as you can see later, you can use

00:37:52.975 --> 00:37:54.095
<v Speaker 1>variables

00:37:55.215 --> 00:37:56.175
<v Speaker 0>Right. Okay.

00:37:56.655 --> 00:37:59.935
<v Speaker 1>Within your JSON, and you can have, like,

00:37:59.935 --> 00:38:01.695
<v Speaker 1>a top level configuration.

00:38:01.695 --> 00:38:03.535
<v Speaker 1>Like, this is my production

00:38:04.359 --> 00:38:04.839
<v Speaker 1>domain

00:38:06.280 --> 00:38:08.920
<v Speaker 1>top level domain. This is my development top

00:38:08.920 --> 00:38:10.520
<v Speaker 1>level domain. And, sure,

00:38:10.839 --> 00:38:12.840
<v Speaker 1>it's possible to use that

00:38:13.880 --> 00:38:15.400
<v Speaker 1>suffixes within

00:38:15.400 --> 00:38:17.080
<v Speaker 1>your JSON files.

00:38:17.640 --> 00:38:20.335
<v Speaker 0>Alright. Well, I'll I'll keep watching.

00:38:23.215 --> 00:38:24.735
<v Speaker 1>So just to have a look at it,

00:38:24.735 --> 00:38:26.255
<v Speaker 1>yep, we have our

00:38:27.215 --> 00:38:28.735
<v Speaker 1>application deployed,

00:38:29.295 --> 00:38:31.055
<v Speaker 1>and, well, we even can

00:38:31.410 --> 00:38:34.850
<v Speaker 1>see that the the container is actually running.

00:38:39.250 --> 00:38:40.050
<v Speaker 1>Let's

00:38:40.369 --> 00:38:41.170
<v Speaker 1>create

00:38:42.130 --> 00:38:43.650
<v Speaker 1>more components

00:38:43.730 --> 00:38:45.410
<v Speaker 1>and add a storage.

00:38:46.515 --> 00:38:48.835
<v Speaker 1>For s three compatible storage,

00:38:48.994 --> 00:38:50.595
<v Speaker 1>let's use Minio.

00:38:55.075 --> 00:38:57.155
<v Speaker 1>And in the very same fashion,

00:38:57.875 --> 00:38:58.994
<v Speaker 1>we create

00:38:59.310 --> 00:39:00.830
<v Speaker 1>extra configuration

00:39:01.230 --> 00:39:02.670
<v Speaker 1>for that storage.

00:39:07.790 --> 00:39:09.230
<v Speaker 1>And the

00:39:09.390 --> 00:39:10.430
<v Speaker 1>the application,

00:39:11.815 --> 00:39:14.775
<v Speaker 1>oh, while it's being deployed,

00:39:15.495 --> 00:39:18.455
<v Speaker 1>the that file manager application, that that demo

00:39:18.455 --> 00:39:22.535
<v Speaker 1>application is written in in PHP with Laravel

00:39:22.535 --> 00:39:23.015
<v Speaker 1>framework.

00:39:23.880 --> 00:39:27.160
<v Speaker 1>And Laravel framework has a built in feature,

00:39:27.400 --> 00:39:30.119
<v Speaker 1>the so called file system drivers. So

00:39:30.920 --> 00:39:31.640
<v Speaker 1>access

00:39:31.720 --> 00:39:33.000
<v Speaker 1>when your

00:39:33.160 --> 00:39:33.960
<v Speaker 1>application

00:39:33.960 --> 00:39:36.675
<v Speaker 1>wants to access a file system, it can

00:39:36.675 --> 00:39:40.115
<v Speaker 1>be either local file system or s three

00:39:40.115 --> 00:39:41.715
<v Speaker 1>file system or

00:39:42.355 --> 00:39:44.115
<v Speaker 1>FTP file system.

00:39:44.755 --> 00:39:47.955
<v Speaker 1>In order to configure our Laravel to use

00:39:47.955 --> 00:39:50.849
<v Speaker 1>that s three storage, we have to set

00:39:50.849 --> 00:39:53.650
<v Speaker 1>a file system driver equals to s three.

00:39:54.769 --> 00:39:57.250
<v Speaker 1>And now we have to

00:39:57.569 --> 00:39:59.089
<v Speaker 1>I can I can just

00:40:01.010 --> 00:40:01.730
<v Speaker 1>yep?

00:40:02.609 --> 00:40:03.329
<v Speaker 1>And, again,

00:40:04.994 --> 00:40:06.035
<v Speaker 1>since the

00:40:06.194 --> 00:40:08.435
<v Speaker 1>the software is very early,

00:40:10.194 --> 00:40:10.835
<v Speaker 1>it

00:40:10.994 --> 00:40:13.394
<v Speaker 1>should like, in in the way it it

00:40:13.394 --> 00:40:16.035
<v Speaker 1>is now, it it's not ready for production

00:40:16.035 --> 00:40:18.994
<v Speaker 1>because in ideal world, it would be something

00:40:18.994 --> 00:40:21.599
<v Speaker 1>like there is a secret associated

00:40:21.599 --> 00:40:23.440
<v Speaker 1>with that storage component.

00:40:23.760 --> 00:40:27.680
<v Speaker 1>So you can just drop the whole secret

00:40:27.760 --> 00:40:30.480
<v Speaker 1>into your application, and it will be mounted

00:40:30.480 --> 00:40:31.359
<v Speaker 1>as a file

00:40:31.695 --> 00:40:33.855
<v Speaker 1>or end file or

00:40:34.415 --> 00:40:37.535
<v Speaker 1>put inside your environment variables.

00:40:37.855 --> 00:40:40.735
<v Speaker 1>But for that demo purposes,

00:40:41.135 --> 00:40:44.575
<v Speaker 1>I think it's quite clear to to understand

00:40:44.735 --> 00:40:46.175
<v Speaker 1>how it works and

00:40:46.930 --> 00:40:50.130
<v Speaker 1>where is the value of of that solution.

00:40:50.130 --> 00:40:50.690
<v Speaker 1>So

00:40:51.490 --> 00:40:52.930
<v Speaker 1>once we have that

00:40:53.730 --> 00:40:55.490
<v Speaker 1>the whole configuration

00:40:58.464 --> 00:40:59.665
<v Speaker 1>and deploying.

00:41:06.305 --> 00:41:07.905
<v Speaker 1>So storage

00:41:07.905 --> 00:41:11.105
<v Speaker 1>wasn't changed because nothing has changed and just

00:41:11.105 --> 00:41:13.345
<v Speaker 1>the configuration of the web application was

00:41:14.400 --> 00:41:15.120
<v Speaker 1>updated.

00:41:16.400 --> 00:41:18.880
<v Speaker 1>And now for the demo time,

00:41:19.200 --> 00:41:20.079
<v Speaker 1>uploading

00:41:20.079 --> 00:41:21.840
<v Speaker 1>real files to that

00:41:23.119 --> 00:41:24.079
<v Speaker 1>file manager.

00:41:26.715 --> 00:41:29.995
<v Speaker 1>Yep. And our files appear in s three.

00:41:31.755 --> 00:41:32.555
<v Speaker 0>Nice.

00:41:34.235 --> 00:41:36.555
<v Speaker 1>So in the very same fashion, it will

00:41:36.555 --> 00:41:38.395
<v Speaker 1>work with databases

00:41:38.395 --> 00:41:39.915
<v Speaker 1>and any other

00:41:40.350 --> 00:41:41.310
<v Speaker 1>microservices

00:41:41.310 --> 00:41:44.270
<v Speaker 1>or domain specific APIs or any other thing

00:41:44.910 --> 00:41:48.110
<v Speaker 1>that works with standard protocols.

00:41:50.510 --> 00:41:51.870
<v Speaker 1>I have the

00:41:52.750 --> 00:41:54.590
<v Speaker 1>last piece of demo

00:41:56.115 --> 00:41:57.635
<v Speaker 1>trying to show

00:41:58.275 --> 00:42:00.515
<v Speaker 1>what are the relations between

00:42:01.555 --> 00:42:04.195
<v Speaker 1>the presentation and the file itself. So right

00:42:04.195 --> 00:42:06.435
<v Speaker 1>now, I'm going to open in Visual Studio

00:42:06.435 --> 00:42:08.435
<v Speaker 1>Code the same file

00:42:09.075 --> 00:42:09.795
<v Speaker 1>two times.

00:42:10.920 --> 00:42:13.720
<v Speaker 1>So on the upper side of the

00:42:13.960 --> 00:42:15.240
<v Speaker 1>Visual Studio Code,

00:42:15.480 --> 00:42:19.000
<v Speaker 1>you have the breadboard editor, that visual editor,

00:42:19.240 --> 00:42:22.200
<v Speaker 1>and underneath it, you can see that

00:42:22.920 --> 00:42:24.280
<v Speaker 1>plain text file,

00:42:24.680 --> 00:42:25.880
<v Speaker 1>which is actually

00:42:26.405 --> 00:42:27.605
<v Speaker 1>the source

00:42:27.605 --> 00:42:29.445
<v Speaker 1>for the visual visualization.

00:42:32.724 --> 00:42:35.285
<v Speaker 1>Here you see that you have my app,

00:42:37.285 --> 00:42:39.445
<v Speaker 1>which extends that web app function

00:42:39.685 --> 00:42:40.724
<v Speaker 1>and configuration.

00:42:41.940 --> 00:42:43.780
<v Speaker 1>You can update

00:42:46.339 --> 00:42:46.900
<v Speaker 1>either

00:42:47.140 --> 00:42:49.300
<v Speaker 1>for example, in your company,

00:42:50.020 --> 00:42:52.180
<v Speaker 1>you do not call web apps like web

00:42:52.180 --> 00:42:54.740
<v Speaker 1>apps. You develop APIs, and you call them

00:42:54.740 --> 00:42:55.460
<v Speaker 1>web service.

00:42:56.535 --> 00:42:58.375
<v Speaker 1>You can do that. And you as you

00:42:58.375 --> 00:43:02.295
<v Speaker 1>can see, once you update your text file,

00:43:02.775 --> 00:43:03.895
<v Speaker 1>the visual

00:43:03.974 --> 00:43:05.255
<v Speaker 1>designer

00:43:05.415 --> 00:43:07.494
<v Speaker 1>reflects all the changes immediately.

00:43:12.190 --> 00:43:12.830
<v Speaker 0>Nice.

00:43:13.150 --> 00:43:14.910
<v Speaker 1>You can update your

00:43:15.150 --> 00:43:17.070
<v Speaker 1>exact values, for example,

00:43:17.950 --> 00:43:19.790
<v Speaker 1>tag or report.

00:43:21.230 --> 00:43:24.590
<v Speaker 1>You can even rename it right into the

00:43:26.645 --> 00:43:27.845
<v Speaker 1>code editor,

00:43:28.325 --> 00:43:30.645
<v Speaker 1>or you can rename it in visual editor.

00:43:31.285 --> 00:43:33.125
<v Speaker 1>And since this is just

00:43:34.245 --> 00:43:35.445
<v Speaker 1>Visual Studio Code,

00:43:37.550 --> 00:43:40.670
<v Speaker 1>you just can hit your keyboard shortcut for

00:43:40.670 --> 00:43:44.190
<v Speaker 1>undoing or redoing actions. It it will automatically

00:43:44.190 --> 00:43:45.310
<v Speaker 1>redraw

00:43:45.390 --> 00:43:46.110
<v Speaker 1>both

00:43:46.350 --> 00:43:48.910
<v Speaker 1>plain text file and the visual editor.

00:43:51.550 --> 00:43:52.990
<v Speaker 1>But what's inside this

00:43:53.595 --> 00:43:54.955
<v Speaker 1>web app function?

00:43:55.835 --> 00:43:58.315
<v Speaker 1>This is actually a code

00:43:58.715 --> 00:44:01.035
<v Speaker 1>in JSON. I

00:44:03.755 --> 00:44:06.315
<v Speaker 1>won't say it's, like, very straightforward,

00:44:07.089 --> 00:44:09.650
<v Speaker 1>but this is the way how JSON and

00:44:09.650 --> 00:44:10.770
<v Speaker 1>code is written.

00:44:12.290 --> 00:44:13.970
<v Speaker 1>And the very last thing

00:44:15.730 --> 00:44:17.090
<v Speaker 1>oh, yeah. You

00:44:17.970 --> 00:44:19.170
<v Speaker 1>do not have to use

00:44:19.490 --> 00:44:20.849
<v Speaker 1>Visual Studio Code

00:44:21.245 --> 00:44:24.685
<v Speaker 1>to actually utilize DevStand, for example, within your

00:44:24.685 --> 00:44:26.205
<v Speaker 1>CICD pipeline.

00:44:26.365 --> 00:44:28.365
<v Speaker 1>You can have the just binary

00:44:29.085 --> 00:44:32.125
<v Speaker 1>and DevStand manifests and pass through that breadboard

00:44:32.125 --> 00:44:32.765
<v Speaker 1>file,

00:44:33.485 --> 00:44:34.525
<v Speaker 1>and you receive

00:44:34.890 --> 00:44:36.890
<v Speaker 1>your YAML. And you can

00:44:38.089 --> 00:44:41.530
<v Speaker 1>process that YAML further within your pipeline,

00:44:42.250 --> 00:44:44.650
<v Speaker 1>for example, with a customize at something at

00:44:44.650 --> 00:44:45.210
<v Speaker 1>top,

00:44:45.609 --> 00:44:48.010
<v Speaker 1>like your custom domain or

00:44:48.785 --> 00:44:50.145
<v Speaker 1>annotations,

00:44:50.865 --> 00:44:51.665
<v Speaker 1>labels.

00:44:54.385 --> 00:44:56.705
<v Speaker 1>And the last thing, and I think it's

00:44:56.705 --> 00:44:58.145
<v Speaker 1>really, really important,

00:44:58.385 --> 00:45:01.025
<v Speaker 1>since the underlying file is just a plain

00:45:01.025 --> 00:45:01.745
<v Speaker 1>text file,

00:45:02.690 --> 00:45:04.609
<v Speaker 1>it's ready for Git.

00:45:05.170 --> 00:45:07.810
<v Speaker 1>And within Visual Studio Code,

00:45:08.049 --> 00:45:09.730
<v Speaker 1>you can easily spot

00:45:10.210 --> 00:45:11.570
<v Speaker 1>what has been changed.

00:45:11.809 --> 00:45:13.650
<v Speaker 1>Yep. We just added

00:45:13.650 --> 00:45:14.450
<v Speaker 1>ingress.

00:45:15.410 --> 00:45:17.329
<v Speaker 1>It just feels natural

00:45:18.155 --> 00:45:18.955
<v Speaker 1>that

00:45:19.035 --> 00:45:20.235
<v Speaker 1>it's

00:45:20.555 --> 00:45:21.915
<v Speaker 1>so straightforward.

00:45:24.955 --> 00:45:25.515
<v Speaker 1>And

00:45:26.875 --> 00:45:28.635
<v Speaker 1>that's what that was it.

00:45:28.955 --> 00:45:30.490
<v Speaker 0>Nice. Awesome.

00:45:33.770 --> 00:45:35.050
<v Speaker 0>It's a cool project.

00:45:35.450 --> 00:45:37.850
<v Speaker 0>Let me pop this back over to there

00:45:37.850 --> 00:45:38.490
<v Speaker 0>we go.

00:45:39.690 --> 00:45:42.330
<v Speaker 0>Yeah. If anyone watching has any questions about

00:45:42.330 --> 00:45:43.975
<v Speaker 0>DevStand, now is a good time to drop

00:45:43.975 --> 00:45:45.655
<v Speaker 0>them into the comments, and we'll ask them

00:45:45.655 --> 00:45:47.655
<v Speaker 0>before we wrap up for today. So if

00:45:47.655 --> 00:45:49.415
<v Speaker 0>you wanna know more, you've got ideas for

00:45:49.415 --> 00:45:50.295
<v Speaker 0>new features,

00:45:51.015 --> 00:45:52.615
<v Speaker 0>feel free. Speak now.

00:45:53.655 --> 00:45:54.615
<v Speaker 0>Alright. So,

00:45:55.740 --> 00:45:57.100
<v Speaker 0>yeah, we've got to thank you for the

00:45:57.100 --> 00:45:58.460
<v Speaker 0>demo. There we go.

00:45:59.180 --> 00:46:01.180
<v Speaker 0>Yeah. So I I like this.

00:46:02.140 --> 00:46:03.260
<v Speaker 0>So we can take

00:46:03.660 --> 00:46:05.660
<v Speaker 0>the JSON on it. We build our own

00:46:05.660 --> 00:46:06.540
<v Speaker 0>abstractions.

00:46:06.540 --> 00:46:07.580
<v Speaker 0>We commit them to get

00:46:09.444 --> 00:46:10.244
<v Speaker 0>That is

00:46:11.365 --> 00:46:11.925
<v Speaker 0>what

00:46:12.325 --> 00:46:14.805
<v Speaker 0>losing my words today completely. What I like

00:46:14.805 --> 00:46:16.805
<v Speaker 0>here is that we can have people that

00:46:16.805 --> 00:46:18.805
<v Speaker 0>want to write JSON and bother with abstractions

00:46:18.805 --> 00:46:21.444
<v Speaker 0>go and do that. But you've created this

00:46:21.444 --> 00:46:24.260
<v Speaker 0>other area for just consumers. Like you said,

00:46:24.260 --> 00:46:26.260
<v Speaker 0>the Latterfield Developers out there, the people working

00:46:26.260 --> 00:46:28.100
<v Speaker 0>with Ruby on Rails, the people that are

00:46:28.100 --> 00:46:29.700
<v Speaker 0>building databases.

00:46:29.700 --> 00:46:30.100
<v Speaker 0>Whatever.

00:46:30.740 --> 00:46:33.380
<v Speaker 0>Like they have the option though to just

00:46:33.380 --> 00:46:36.020
<v Speaker 0>consume the abstractions made by other people

00:46:36.605 --> 00:46:39.085
<v Speaker 0>and a very visual way to connect the

00:46:39.085 --> 00:46:41.085
<v Speaker 0>dots with the variables that they need.

00:46:41.565 --> 00:46:43.565
<v Speaker 0>And the JSON is is there. They can

00:46:43.565 --> 00:46:44.845
<v Speaker 0>commit it to get they could push it

00:46:44.845 --> 00:46:47.085
<v Speaker 0>somewhere. CI can take over. But

00:46:47.645 --> 00:46:49.484
<v Speaker 0>it's a tool that enables people

00:46:50.280 --> 00:46:52.840
<v Speaker 0>to do things that they couldn't previously do.

00:46:53.640 --> 00:46:55.640
<v Speaker 0>And I think that's really important. We need

00:46:55.640 --> 00:46:58.280
<v Speaker 0>to make this easier for people to deploy

00:46:58.280 --> 00:46:59.240
<v Speaker 0>to Kubernetes.

00:47:00.200 --> 00:47:01.560
<v Speaker 0>And it's just a cherry on the top

00:47:01.560 --> 00:47:03.080
<v Speaker 0>that it runs in Versus Code. Like, I

00:47:03.080 --> 00:47:04.745
<v Speaker 0>love that. Like, it's not another tool. It's

00:47:04.745 --> 00:47:06.585
<v Speaker 0>not an electron application. It's not a web

00:47:06.585 --> 00:47:09.065
<v Speaker 0>application. I'm already in my editor, and I

00:47:09.065 --> 00:47:10.905
<v Speaker 0>just think that was a great decision that

00:47:10.905 --> 00:47:11.705
<v Speaker 0>you made there.

00:47:12.025 --> 00:47:13.305
<v Speaker 0>I mean, don't get me wrong. Have no

00:47:13.305 --> 00:47:15.945
<v Speaker 0>idea how you write Versus Code extension, and

00:47:15.945 --> 00:47:17.225
<v Speaker 0>I have no idea how you make it

00:47:17.225 --> 00:47:18.839
<v Speaker 0>actually, like, a drag and drop of a

00:47:18.839 --> 00:47:20.839
<v Speaker 0>board with little dots and connectors.

00:47:21.640 --> 00:47:23.160
<v Speaker 0>But yeah. Very cool.

00:47:23.400 --> 00:47:24.280
<v Speaker 0>You must

00:47:24.599 --> 00:47:25.160
<v Speaker 0>like,

00:47:25.799 --> 00:47:27.160
<v Speaker 0>I wanna know just

00:47:27.640 --> 00:47:29.880
<v Speaker 0>how like, were you a Versus code or

00:47:29.880 --> 00:47:32.440
<v Speaker 0>Node. Js developer before? Had you done graphics?

00:47:32.440 --> 00:47:34.735
<v Speaker 0>Like, I I I'd love to know more.

00:47:35.615 --> 00:47:36.255
<v Speaker 1>Well,

00:47:38.015 --> 00:47:39.615
<v Speaker 1>a Visual Studio Code

00:47:39.855 --> 00:47:40.495
<v Speaker 1>has

00:47:40.735 --> 00:47:42.415
<v Speaker 1>a notion of

00:47:42.895 --> 00:47:43.775
<v Speaker 1>editors.

00:47:44.735 --> 00:47:47.330
<v Speaker 1>And one of a way to create a

00:47:47.330 --> 00:47:49.730
<v Speaker 1>new editor within Visual Studio Code is to

00:47:49.730 --> 00:47:51.010
<v Speaker 1>make a WebView,

00:47:51.490 --> 00:47:53.810
<v Speaker 1>and the WebView has to

00:47:57.490 --> 00:48:00.050
<v Speaker 1>follow certain protocol

00:48:00.135 --> 00:48:02.135
<v Speaker 1>for intercommunicating

00:48:02.375 --> 00:48:04.375
<v Speaker 1>between Visual Studio Code

00:48:04.935 --> 00:48:06.935
<v Speaker 1>and your JavaScript

00:48:06.935 --> 00:48:09.015
<v Speaker 1>running within your

00:48:10.935 --> 00:48:11.575
<v Speaker 1>web view.

00:48:12.549 --> 00:48:15.590
<v Speaker 1>So the whole editor is basically a

00:48:15.670 --> 00:48:16.550
<v Speaker 1>web page.

00:48:17.750 --> 00:48:20.230
<v Speaker 1>Code is written in Svelte framework.

00:48:20.230 --> 00:48:23.349
<v Speaker 1>I picked that one because because it's has

00:48:24.549 --> 00:48:27.430
<v Speaker 1>the the least amount of RAM to be

00:48:27.430 --> 00:48:28.605
<v Speaker 1>used for

00:48:30.045 --> 00:48:31.565
<v Speaker 1>drawing dynamic

00:48:31.565 --> 00:48:32.765
<v Speaker 1>HTML.

00:48:33.725 --> 00:48:37.085
<v Speaker 1>So and there are two parts of the

00:48:37.085 --> 00:48:37.885
<v Speaker 1>extension.

00:48:37.885 --> 00:48:39.165
<v Speaker 1>The first one is that

00:48:39.405 --> 00:48:40.525
<v Speaker 1>web view thing,

00:48:41.250 --> 00:48:44.210
<v Speaker 1>and another part is the

00:48:44.690 --> 00:48:46.290
<v Speaker 1>actual code,

00:48:46.530 --> 00:48:47.010
<v Speaker 1>which

00:48:47.410 --> 00:48:49.650
<v Speaker 1>written in in TypeScript,

00:48:50.130 --> 00:48:50.690
<v Speaker 1>which

00:48:53.250 --> 00:48:55.090
<v Speaker 1>scans file system,

00:48:55.170 --> 00:48:58.325
<v Speaker 1>find files, update a specific file.

00:49:00.005 --> 00:49:02.725
<v Speaker 1>If an interesting thing is that

00:49:03.285 --> 00:49:04.565
<v Speaker 1>I can show you.

00:49:07.285 --> 00:49:08.484
<v Speaker 1>Is that

00:49:10.630 --> 00:49:11.430
<v Speaker 1>the

00:49:12.869 --> 00:49:13.830
<v Speaker 1>code

00:49:17.670 --> 00:49:19.910
<v Speaker 1>the extension actually treats

00:49:20.230 --> 00:49:20.950
<v Speaker 1>the

00:49:21.030 --> 00:49:24.550
<v Speaker 1>JSON file as code. And when you update

00:49:24.550 --> 00:49:25.030
<v Speaker 1>something,

00:49:26.285 --> 00:49:30.045
<v Speaker 1>it actually update that very specific line and

00:49:30.045 --> 00:49:32.605
<v Speaker 1>that very specific portion of code that you

00:49:32.605 --> 00:49:34.765
<v Speaker 1>reference. For example, if I have

00:49:35.165 --> 00:49:36.045
<v Speaker 1>this

00:49:37.405 --> 00:49:38.125
<v Speaker 1>as

00:49:38.205 --> 00:49:38.845
<v Speaker 1>my

00:49:39.165 --> 00:49:39.805
<v Speaker 1>comment.

00:49:40.205 --> 00:49:40.845
<v Speaker 1>For example,

00:49:42.820 --> 00:49:45.940
<v Speaker 1>a DevOps person or a developer left a

00:49:45.940 --> 00:49:46.500
<v Speaker 1>comment

00:49:46.900 --> 00:49:47.620
<v Speaker 1>for

00:49:48.339 --> 00:49:49.860
<v Speaker 1>for their colleague.

00:49:50.740 --> 00:49:52.260
<v Speaker 1>Once you update

00:49:52.420 --> 00:49:53.300
<v Speaker 1>something,

00:49:53.380 --> 00:49:53.540
<v Speaker 0>like,

00:49:58.475 --> 00:50:00.075
<v Speaker 1>We have your comment

00:50:00.235 --> 00:50:01.115
<v Speaker 1>preserved.

00:50:03.115 --> 00:50:04.235
<v Speaker 1>The I mean,

00:50:05.995 --> 00:50:06.635
<v Speaker 1>it

00:50:06.955 --> 00:50:08.475
<v Speaker 1>would be much easier

00:50:08.635 --> 00:50:11.355
<v Speaker 1>to just dump the whole configuration

00:50:11.810 --> 00:50:14.610
<v Speaker 1>and override the whole file. Yeah.

00:50:15.090 --> 00:50:15.650
<v Speaker 0>Yeah.

00:50:16.130 --> 00:50:17.490
<v Speaker 1>Or something like that.

00:50:17.970 --> 00:50:19.970
<v Speaker 0>Although, do I have a feature request? Like,

00:50:19.970 --> 00:50:21.810
<v Speaker 0>can we get those comments as little yellow

00:50:21.810 --> 00:50:23.890
<v Speaker 0>posters on the the breadboard?

00:50:25.685 --> 00:50:28.965
<v Speaker 1>I haven't thought of that. That that's a

00:50:29.365 --> 00:50:30.805
<v Speaker 1>that's quite a smart

00:50:31.525 --> 00:50:32.165
<v Speaker 1>thing.

00:50:32.405 --> 00:50:33.605
<v Speaker 1>It would be even

00:50:33.845 --> 00:50:35.125
<v Speaker 1>even simpler.

00:50:35.285 --> 00:50:37.125
<v Speaker 0>Yeah. And if we look at a comment

00:50:37.125 --> 00:50:40.220
<v Speaker 0>on, let's say, 17 for the image, then

00:50:40.220 --> 00:50:42.299
<v Speaker 0>that could be, like, a little annotation on

00:50:42.299 --> 00:50:44.059
<v Speaker 0>that property on the in the UI as

00:50:44.059 --> 00:50:45.180
<v Speaker 0>well. Like, you could take you could take

00:50:45.180 --> 00:50:47.020
<v Speaker 0>comments of first class citizen here. That would

00:50:47.020 --> 00:50:48.540
<v Speaker 0>be very, very cool.

00:50:49.819 --> 00:50:50.540
<v Speaker 1>Yeah.

00:50:50.700 --> 00:50:51.740
<v Speaker 1>Something like

00:50:52.140 --> 00:50:53.020
<v Speaker 1>just

00:50:53.819 --> 00:50:54.619
<v Speaker 1>this

00:50:55.455 --> 00:50:56.175
<v Speaker 1>cute

00:50:57.615 --> 00:51:00.095
<v Speaker 1>the other one. Yeah. Yeah. And then we

00:51:00.095 --> 00:51:01.775
<v Speaker 0>get a That's a great idea.

00:51:02.895 --> 00:51:03.695
<v Speaker 0>Alright.

00:51:03.935 --> 00:51:05.695
<v Speaker 0>We do have a question for Russell in

00:51:05.695 --> 00:51:07.695
<v Speaker 0>the chat. Russell is asking,

00:51:08.820 --> 00:51:11.460
<v Speaker 0>are there any plans on providing best practice

00:51:11.460 --> 00:51:14.660
<v Speaker 0>templates? So like, are you gonna release a

00:51:15.140 --> 00:51:17.940
<v Speaker 0>obstruction library with like API

00:51:17.940 --> 00:51:19.700
<v Speaker 0>or web app or

00:51:21.140 --> 00:51:23.565
<v Speaker 0>I don't know, Kafka deployment.

00:51:23.565 --> 00:51:25.405
<v Speaker 0>Like, you know what we see with Artifact

00:51:25.405 --> 00:51:27.885
<v Speaker 0>Hub and Helm? Do you see DevStand having

00:51:27.885 --> 00:51:30.045
<v Speaker 0>a space on Artifact Hub where people push

00:51:30.045 --> 00:51:31.085
<v Speaker 0>these obstructions

00:51:31.165 --> 00:51:32.765
<v Speaker 0>for reuse and sharing?

00:51:33.405 --> 00:51:33.965
<v Speaker 1>Sure.

00:51:36.200 --> 00:51:37.080
<v Speaker 1>Right now,

00:51:39.079 --> 00:51:40.359
<v Speaker 1>when you when

00:51:40.359 --> 00:51:42.680
<v Speaker 1>you scaffold

00:51:42.680 --> 00:51:43.640
<v Speaker 1>and you

00:51:43.800 --> 00:51:44.760
<v Speaker 1>breadboard,

00:51:45.000 --> 00:51:46.040
<v Speaker 1>it automatically

00:51:46.040 --> 00:51:47.080
<v Speaker 1>fetches

00:51:47.240 --> 00:51:47.560
<v Speaker 1>the

00:51:50.025 --> 00:51:51.305
<v Speaker 1>default templates.

00:51:51.705 --> 00:51:52.185
<v Speaker 1>Think

00:51:53.225 --> 00:51:56.105
<v Speaker 1>of them as provided by the the the

00:51:56.825 --> 00:51:58.185
<v Speaker 1>creator of DevStand.

00:51:58.585 --> 00:52:01.065
<v Speaker 1>You can throw them away and replace them

00:52:01.065 --> 00:52:04.120
<v Speaker 1>with yours, but there should be something, a

00:52:04.120 --> 00:52:05.640
<v Speaker 1>default to start with.

00:52:05.960 --> 00:52:07.320
<v Speaker 1>I think of

00:52:07.720 --> 00:52:09.320
<v Speaker 1>having templates

00:52:09.320 --> 00:52:12.040
<v Speaker 1>for usual stuff like web app or databases,

00:52:14.840 --> 00:52:17.160
<v Speaker 1>but it should also be

00:52:19.315 --> 00:52:22.995
<v Speaker 1>integrated with a popular Kubernetes operator.

00:52:23.395 --> 00:52:25.795
<v Speaker 1>For example, there is a Kubernetes operator for

00:52:25.795 --> 00:52:26.675
<v Speaker 1>Postgres,

00:52:26.675 --> 00:52:29.475
<v Speaker 1>or you have a Rook for many databases

00:52:29.475 --> 00:52:30.995
<v Speaker 1>or Redis operator.

00:52:31.390 --> 00:52:34.510
<v Speaker 1>And they have their very specific CRDs,

00:52:36.109 --> 00:52:38.350
<v Speaker 1>which you can you you you have to

00:52:38.350 --> 00:52:40.190
<v Speaker 1>follow that notation,

00:52:40.190 --> 00:52:42.350
<v Speaker 1>that syntax for claiming

00:52:42.350 --> 00:52:44.430
<v Speaker 1>a new Redis instance, for example.

00:52:45.065 --> 00:52:46.025
<v Speaker 1>And I think

00:52:46.665 --> 00:52:49.065
<v Speaker 1>that has to be provided out of the

00:52:49.065 --> 00:52:50.585
<v Speaker 1>box for

00:52:50.665 --> 00:52:52.105
<v Speaker 1>newcomers as well.

00:52:52.745 --> 00:52:55.305
<v Speaker 1>I see that that open source version of

00:52:55.305 --> 00:52:58.185
<v Speaker 1>DevStand will come with something like

00:52:58.585 --> 00:52:59.225
<v Speaker 1>a wizard

00:52:59.610 --> 00:53:01.210
<v Speaker 1>step by step. For example,

00:53:02.490 --> 00:53:05.450
<v Speaker 1>the first step, hi, your DevOps person.

00:53:06.170 --> 00:53:07.770
<v Speaker 1>DevStand provides

00:53:08.090 --> 00:53:09.930
<v Speaker 1>out of the box integrations

00:53:09.930 --> 00:53:11.450
<v Speaker 1>with these

00:53:11.690 --> 00:53:14.570
<v Speaker 1>20 popular Kubernetes operators,

00:53:15.115 --> 00:53:16.475
<v Speaker 1>a menu operator,

00:53:16.475 --> 00:53:19.595
<v Speaker 1>Postgres, Redis. You just click them,

00:53:20.635 --> 00:53:23.035
<v Speaker 1>selecting those operators that

00:53:25.035 --> 00:53:25.835
<v Speaker 1>existing

00:53:25.915 --> 00:53:28.315
<v Speaker 1>DevOps team already implemented

00:53:28.315 --> 00:53:30.235
<v Speaker 1>within their Kubernetes cluster,

00:53:31.420 --> 00:53:33.820
<v Speaker 1>and then just return, okay. You just have

00:53:33.820 --> 00:53:37.260
<v Speaker 1>to have these several functions to utilize.

00:53:39.500 --> 00:53:41.740
<v Speaker 1>A good question about distribution.

00:53:42.954 --> 00:53:44.635
<v Speaker 1>I had NPM

00:53:44.635 --> 00:53:47.195
<v Speaker 1>as a source of inspiration for it.

00:53:48.075 --> 00:53:48.715
<v Speaker 1>So,

00:53:48.875 --> 00:53:49.675
<v Speaker 1>basically,

00:53:50.875 --> 00:53:52.474
<v Speaker 1>it fetches

00:53:56.799 --> 00:53:58.160
<v Speaker 1>from GitHub,

00:53:59.279 --> 00:54:00.000
<v Speaker 1>either

00:54:00.160 --> 00:54:01.119
<v Speaker 1>GitLab

00:54:01.680 --> 00:54:02.400
<v Speaker 1>or

00:54:02.960 --> 00:54:04.000
<v Speaker 1>Bitbucket

00:54:05.119 --> 00:54:05.760
<v Speaker 1>or

00:54:05.920 --> 00:54:08.480
<v Speaker 1>just any Git repository.

00:54:08.559 --> 00:54:10.320
<v Speaker 1>It just fetch

00:54:10.400 --> 00:54:10.720
<v Speaker 1>these

00:54:12.165 --> 00:54:13.285
<v Speaker 1>repositories

00:54:13.285 --> 00:54:15.285
<v Speaker 1>and store them in this

00:54:15.605 --> 00:54:17.685
<v Speaker 1>JSON or PKG

00:54:18.165 --> 00:54:19.285
<v Speaker 1>directory.

00:54:20.245 --> 00:54:22.165
<v Speaker 1>It means that you can also

00:54:25.109 --> 00:54:26.230
<v Speaker 1>for example,

00:54:27.269 --> 00:54:28.950
<v Speaker 1>I'll just open.

00:54:34.069 --> 00:54:35.029
<v Speaker 1>So

00:54:37.235 --> 00:54:38.355
<v Speaker 1>that's code

00:54:38.515 --> 00:54:39.475
<v Speaker 1>for the

00:54:39.715 --> 00:54:40.995
<v Speaker 1>for the functions.

00:54:41.875 --> 00:54:42.595
<v Speaker 1>Mhmm.

00:54:43.075 --> 00:54:46.115
<v Speaker 1>And that's the schema for the properties that

00:54:46.115 --> 00:54:46.835
<v Speaker 1>you can

00:54:48.115 --> 00:54:49.955
<v Speaker 1>configure within within your

00:54:50.355 --> 00:54:51.315
<v Speaker 1>within the designer.

00:54:52.190 --> 00:54:53.710
<v Speaker 1>And if you have

00:54:53.870 --> 00:54:54.510
<v Speaker 1>that,

00:54:54.670 --> 00:54:56.430
<v Speaker 1>I mean, that specific

00:54:56.430 --> 00:54:59.870
<v Speaker 1>repository is public, so once you fetch it,

00:54:59.870 --> 00:55:01.310
<v Speaker 1>it's fetched as a

00:55:02.590 --> 00:55:04.990
<v Speaker 1>tar or a zip file and extracted.

00:55:06.095 --> 00:55:08.654
<v Speaker 1>But if it's a private repository,

00:55:08.654 --> 00:55:10.575
<v Speaker 1>it would be just git cloned

00:55:10.575 --> 00:55:12.895
<v Speaker 1>with your SSH key,

00:55:13.295 --> 00:55:16.015
<v Speaker 1>so it's safe to distribute

00:55:16.095 --> 00:55:17.454
<v Speaker 1>these libsonnet

00:55:17.694 --> 00:55:21.214
<v Speaker 1>these JSON functions or these DevStand templates

00:55:21.520 --> 00:55:24.240
<v Speaker 1>within your private Git repository.

00:55:25.360 --> 00:55:27.520
<v Speaker 0>Okay. We have a question kind of related

00:55:27.520 --> 00:55:29.280
<v Speaker 0>there from who

00:55:29.520 --> 00:55:31.920
<v Speaker 0>was asking, can we provide custom keys

00:55:32.160 --> 00:55:34.080
<v Speaker 0>and values? So I'm assuming he's asking how

00:55:34.080 --> 00:55:34.720
<v Speaker 0>do we

00:55:35.175 --> 00:55:35.975
<v Speaker 0>extend

00:55:35.975 --> 00:55:37.655
<v Speaker 0>that schema. So maybe we could take a

00:55:37.655 --> 00:55:39.655
<v Speaker 0>look at one of those functions and just

00:55:39.655 --> 00:55:41.335
<v Speaker 0>show a little bit of the JSON that

00:55:41.335 --> 00:55:43.255
<v Speaker 0>makes that work. Okay.

00:55:45.735 --> 00:55:47.895
<v Speaker 1>For example, this is for the web app.

00:55:48.369 --> 00:55:50.369
<v Speaker 0>Yeah. What if we wanted to maybe it's

00:55:50.369 --> 00:55:53.010
<v Speaker 0>already done, but what about requests for CPU

00:55:53.010 --> 00:55:55.090
<v Speaker 0>and memory? Is that part of your spec?

00:55:55.890 --> 00:55:58.690
<v Speaker 1>Well, right now, well, it is not. I

00:55:58.690 --> 00:55:59.490
<v Speaker 1>I

00:56:00.210 --> 00:56:01.170
<v Speaker 1>still have

00:56:01.570 --> 00:56:02.609
<v Speaker 1>that

00:56:03.495 --> 00:56:05.895
<v Speaker 1>on my on my list. Yeah.

00:56:07.015 --> 00:56:09.495
<v Speaker 1>But, yeah, right right right now,

00:56:10.055 --> 00:56:10.855
<v Speaker 1>it's

00:56:10.935 --> 00:56:13.495
<v Speaker 1>you either have to create your own function,

00:56:14.215 --> 00:56:14.775
<v Speaker 1>or

00:56:15.335 --> 00:56:17.895
<v Speaker 1>since this is just

00:56:20.910 --> 00:56:22.830
<v Speaker 1>this is just JSON, you

00:56:23.390 --> 00:56:23.950
<v Speaker 1>can

00:56:29.710 --> 00:56:32.750
<v Speaker 1>and I honestly, I can't remember how I

00:56:32.750 --> 00:56:34.670
<v Speaker 1>did that while prototyping,

00:56:34.670 --> 00:56:36.665
<v Speaker 1>but either you have to be able to

00:56:36.665 --> 00:56:37.625
<v Speaker 1>write something

00:56:40.345 --> 00:56:41.385
<v Speaker 1>over here.

00:56:41.625 --> 00:56:42.745
<v Speaker 1>It's like

00:56:43.545 --> 00:56:44.425
<v Speaker 1>cube

00:56:46.185 --> 00:56:46.745
<v Speaker 1>deployment.

00:56:51.359 --> 00:56:54.800
<v Speaker 1>You know, somewhere over here, you have this

00:56:56.000 --> 00:56:56.720
<v Speaker 0>Yeah.

00:56:57.119 --> 00:56:58.799
<v Speaker 0>Well, I don't know how this works in

00:56:58.799 --> 00:56:59.440
<v Speaker 0>JSON.

00:56:59.920 --> 00:57:01.680
<v Speaker 0>Are these structures closed?

00:57:01.759 --> 00:57:03.279
<v Speaker 0>Like, can you just add a b c

00:57:03.279 --> 00:57:05.920
<v Speaker 0>and the value of one underneath line 14?

00:57:06.385 --> 00:57:07.985
<v Speaker 0>What would happen if you do that to

00:57:07.985 --> 00:57:08.865
<v Speaker 0>the UI?

00:57:10.385 --> 00:57:11.745
<v Speaker 0>If you just do a b c pull

00:57:11.745 --> 00:57:13.185
<v Speaker 1>on one. That's that's for,

00:57:13.425 --> 00:57:14.305
<v Speaker 1>for example,

00:57:15.505 --> 00:57:16.225
<v Speaker 1>how

00:57:16.545 --> 00:57:16.945
<v Speaker 1>low

00:57:17.345 --> 00:57:17.665
<v Speaker 0>Yeah.

00:57:23.400 --> 00:57:24.600
<v Speaker 1>It is possible.

00:57:26.600 --> 00:57:27.400
<v Speaker 1>Hello,

00:57:29.320 --> 00:57:31.240
<v Speaker 0>world. Alright. Nice. Yeah. So those structures are

00:57:31.240 --> 00:57:33.400
<v Speaker 0>open. So you can start to you could

00:57:33.195 --> 00:57:34.475
<v Speaker 0>start to add your own. But you you

00:57:34.715 --> 00:57:37.115
<v Speaker 1>you yep. But it wouldn't be compiled to

00:57:37.115 --> 00:57:38.715
<v Speaker 0>anything. Right? That Well, you can you can

00:57:38.715 --> 00:57:41.115
<v Speaker 1>still edit them. Yeah. Okay.

00:57:42.155 --> 00:57:43.355
<v Speaker 0>Nice. Very cool.

00:57:45.435 --> 00:57:46.795
<v Speaker 0>Alright. Let me pop this back over.

00:57:48.130 --> 00:57:50.130
<v Speaker 0>Alright. Well, I don't think we have I

00:57:50.210 --> 00:57:52.290
<v Speaker 1>I remember how to do that. Oh, yeah.

00:57:52.290 --> 00:57:52.850
<v Speaker 0>Sure.

00:57:53.410 --> 00:57:54.290
<v Speaker 1>It has

00:57:54.530 --> 00:57:55.250
<v Speaker 1>to be

00:57:57.810 --> 00:57:58.850
<v Speaker 1>plus.

00:58:00.075 --> 00:58:02.795
<v Speaker 1>And here you have all your overrides over

00:58:02.795 --> 00:58:03.355
<v Speaker 1>here.

00:58:05.355 --> 00:58:06.955
<v Speaker 1>And for a developer,

00:58:07.035 --> 00:58:09.355
<v Speaker 1>it can be easy as okay.

00:58:10.075 --> 00:58:12.795
<v Speaker 1>That portion of code, this is what I'm

00:58:12.795 --> 00:58:13.755
<v Speaker 1>responsible for,

00:58:14.450 --> 00:58:17.170
<v Speaker 1>and the rest of the gibberish is that

00:58:17.170 --> 00:58:19.250
<v Speaker 1>what my DevOps people do.

00:58:21.569 --> 00:58:23.569
<v Speaker 0>Have often classified the work that I do

00:58:23.569 --> 00:58:25.890
<v Speaker 0>as as gibberish, so I appreciate that.

00:58:29.055 --> 00:58:30.735
<v Speaker 1>Yep. That that that

00:58:31.055 --> 00:58:32.335
<v Speaker 1>should definitely work,

00:58:32.575 --> 00:58:33.935
<v Speaker 1>that plus thing,

00:58:34.255 --> 00:58:36.655
<v Speaker 1>because this is a native feature of JSON.

00:58:38.255 --> 00:58:39.375
<v Speaker 0>Nice. It's a good question.

00:58:42.599 --> 00:58:44.280
<v Speaker 0>Alright. Well, I don't think we have any

00:58:44.280 --> 00:58:47.319
<v Speaker 0>more questions. So I'll just say thank you

00:58:47.319 --> 00:58:49.319
<v Speaker 0>for taking some time today to to sit

00:58:49.319 --> 00:58:52.920
<v Speaker 0>down with me and to show everybody DevStand.

00:58:53.559 --> 00:58:55.800
<v Speaker 0>I'll finish with the

00:58:56.325 --> 00:58:57.765
<v Speaker 0>the easiest question.

00:58:57.845 --> 00:59:00.085
<v Speaker 0>But, like, what's coming next then? What are

00:59:00.085 --> 00:59:01.365
<v Speaker 0>you working on right now?

00:59:02.645 --> 00:59:03.285
<v Speaker 1>Well,

00:59:03.605 --> 00:59:05.125
<v Speaker 1>right now, I'm

00:59:05.685 --> 00:59:06.405
<v Speaker 1>working

00:59:06.645 --> 00:59:09.125
<v Speaker 1>mostly on the commercial side of the project.

00:59:09.530 --> 00:59:10.650
<v Speaker 1>I'm trying to

00:59:10.970 --> 00:59:11.930
<v Speaker 1>rise

00:59:12.570 --> 00:59:13.370
<v Speaker 1>some

00:59:13.530 --> 00:59:15.530
<v Speaker 1>investments so I can

00:59:17.290 --> 00:59:18.090
<v Speaker 1>continue

00:59:18.650 --> 00:59:19.370
<v Speaker 1>working

00:59:20.170 --> 00:59:22.410
<v Speaker 1>on that project full time

00:59:23.075 --> 00:59:23.875
<v Speaker 1>because

00:59:25.555 --> 00:59:29.155
<v Speaker 1>it requires a a significant amount of time

00:59:29.555 --> 00:59:32.434
<v Speaker 1>to make it work to fix box and

00:59:32.434 --> 00:59:35.234
<v Speaker 1>to to push it forward because

00:59:35.394 --> 00:59:37.700
<v Speaker 1>I already have lots of features in my

00:59:37.700 --> 00:59:39.940
<v Speaker 1>wish list, but I just didn't have enough

00:59:39.940 --> 00:59:41.380
<v Speaker 1>time to implement them.

00:59:42.180 --> 00:59:42.820
<v Speaker 1>So

00:59:43.780 --> 00:59:46.980
<v Speaker 1>and as for the very first iteration,

00:59:46.980 --> 00:59:48.180
<v Speaker 1>I see it

00:59:49.145 --> 00:59:50.905
<v Speaker 1>something like works

00:59:50.905 --> 00:59:51.545
<v Speaker 1>with,

00:59:53.065 --> 00:59:54.665
<v Speaker 1>for example, DigitalOcean.

00:59:55.145 --> 00:59:56.265
<v Speaker 1>Like, every

00:59:56.505 --> 00:59:59.305
<v Speaker 1>like, most of developers, they have their account

00:59:59.305 --> 01:00:02.345
<v Speaker 1>in DigitalOcean, so it would be quite straightforward

01:00:02.345 --> 01:00:03.065
<v Speaker 1>to just

01:00:03.890 --> 01:00:05.810
<v Speaker 1>integrate that solution with

01:00:06.050 --> 01:00:08.530
<v Speaker 1>DigitalOcean managed Kubernetes to to

01:00:09.090 --> 01:00:11.010
<v Speaker 1>and to see how it works there.

01:00:11.650 --> 01:00:12.210
<v Speaker 1>And

01:00:12.690 --> 01:00:13.810
<v Speaker 1>maybe something

01:00:13.890 --> 01:00:16.770
<v Speaker 1>that SaaS version can be

01:00:17.545 --> 01:00:21.145
<v Speaker 1>obvious first step when you have just restrictions

01:00:21.145 --> 01:00:24.425
<v Speaker 1>for, okay, you can host either web apps

01:00:24.425 --> 01:00:28.025
<v Speaker 1>or background workers and manage databases from DigitalOcean

01:00:29.690 --> 01:00:32.970
<v Speaker 1>and just these three options. And to

01:00:34.570 --> 01:00:37.130
<v Speaker 1>I did and just

01:00:37.530 --> 01:00:40.330
<v Speaker 1>go through all the obstacles

01:00:40.570 --> 01:00:42.650
<v Speaker 1>required to to release

01:00:43.210 --> 01:00:44.250
<v Speaker 1>that first

01:00:44.490 --> 01:00:45.530
<v Speaker 1>working versions.

01:00:45.984 --> 01:00:47.745
<v Speaker 1>And then once I can

01:00:48.385 --> 01:00:51.425
<v Speaker 1>make it slick with just one single provider,

01:00:51.505 --> 01:00:54.464
<v Speaker 1>then I can bring all the features back

01:00:54.464 --> 01:00:55.985
<v Speaker 1>to the open source version.

01:00:56.945 --> 01:00:58.625
<v Speaker 1>But I definitely

01:00:58.625 --> 01:01:01.265
<v Speaker 1>will continue working on the open source version

01:01:01.265 --> 01:01:03.400
<v Speaker 1>because I truly believe

01:01:03.560 --> 01:01:04.920
<v Speaker 1>that Kubernetes

01:01:05.000 --> 01:01:06.920
<v Speaker 1>has to be simple.

01:01:07.560 --> 01:01:08.440
<v Speaker 0>Awesome.

01:01:08.920 --> 01:01:11.400
<v Speaker 0>Thank you again for your time.

01:01:12.040 --> 01:01:14.405
<v Speaker 0>I'll finish with, you know if you had

01:01:14.405 --> 01:01:16.724
<v Speaker 0>asked me six months ago what I thought

01:01:16.724 --> 01:01:18.165
<v Speaker 0>of JSON, I would have said it was

01:01:18.165 --> 01:01:20.325
<v Speaker 0>dead. And I I I genuinely believe that

01:01:20.325 --> 01:01:22.325
<v Speaker 0>DevStand may be the project that brings it

01:01:22.325 --> 01:01:24.325
<v Speaker 0>back to life. So I'm gonna wish you

01:01:24.325 --> 01:01:26.085
<v Speaker 0>the best of luck. I can't wait to

01:01:26.085 --> 01:01:27.445
<v Speaker 0>see what's next. So please get in touch

01:01:27.445 --> 01:01:28.244
<v Speaker 0>with the new version,

01:01:28.830 --> 01:01:30.830
<v Speaker 0>and I'll see you again next time. Have

01:01:30.830 --> 01:01:31.710
<v Speaker 0>your last words?

01:01:32.430 --> 01:01:34.750
<v Speaker 1>The well, thank you very much for having

01:01:34.750 --> 01:01:38.270
<v Speaker 1>me. I really appreciate your feedback,

01:01:38.270 --> 01:01:38.670
<v Speaker 1>and

01:01:39.070 --> 01:01:42.270
<v Speaker 1>kudos to our listeners for being engaged and

01:01:42.270 --> 01:01:43.310
<v Speaker 1>asking for questions.

01:01:44.904 --> 01:01:46.825
<v Speaker 1>There are still a lot on the tape

01:01:46.984 --> 01:01:47.945
<v Speaker 1>on the table,

01:01:48.904 --> 01:01:49.545
<v Speaker 1>and

01:01:49.944 --> 01:01:51.465
<v Speaker 1>thank you very much for

01:01:51.785 --> 01:01:52.825
<v Speaker 1>your time.

01:01:53.145 --> 01:01:53.785
<v Speaker 1>And

01:01:54.184 --> 01:01:56.744
<v Speaker 1>thank you for an opportunity to share

01:01:56.984 --> 01:01:58.825
<v Speaker 1>what I've been working on

01:01:59.150 --> 01:02:01.630
<v Speaker 1>for the recent, like, year and a half.

01:02:02.270 --> 01:02:04.990
<v Speaker 1>That that project is really important for me,

01:02:04.990 --> 01:02:06.750
<v Speaker 1>and I really wish it

01:02:07.230 --> 01:02:08.590
<v Speaker 1>finally takes off.

01:02:09.310 --> 01:02:11.470
<v Speaker 0>Alright. Well, we're all rooting for you. We'll

01:02:11.470 --> 01:02:14.045
<v Speaker 0>all contribute at help, and we'll see you

01:02:14.045 --> 01:02:15.885
<v Speaker 0>again soon. So thank you again. Have a

01:02:15.885 --> 01:02:16.525
<v Speaker 0>great day.

01:02:17.164 --> 01:02:19.165
<v Speaker 1>Thank very much. Have a good time.

01:02:20.365 --> 01:02:20.845
<v Speaker 0>Bye all.

01:02:37.740 --> 01:02:39.974
<v Speaker 1>Thank you for watching Rawkode Live.
