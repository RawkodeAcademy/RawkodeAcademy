WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: f5a4021d-a8aa-42ae-8c90-ffd967e64983
Created: 2025-04-29T16:51:34.157Z
Duration: 3473.0615
Channels: 1

00:00:03.600 --> 00:00:04.400
<v Speaker 0>Hello.

00:00:05.600 --> 00:00:07.520
<v Speaker 0>Welcome to our first workshop.

00:00:07.600 --> 00:00:10.480
<v Speaker 0>This is the complete guide to InfluxDB two.

00:00:11.200 --> 00:00:13.599
<v Speaker 0>Today's workshop, we're going to be exploring one

00:00:13.599 --> 00:00:15.920
<v Speaker 0>of the more challenging

00:00:15.405 --> 00:00:17.965
<v Speaker 0>parts of InfluxDB two for people that are

00:00:17.965 --> 00:00:19.965
<v Speaker 0>just not familiar

00:00:20.045 --> 00:00:21.965
<v Speaker 0>with creating with flux.

00:00:22.365 --> 00:00:23.644
<v Speaker 0>There are a few

00:00:24.205 --> 00:00:25.244
<v Speaker 0>challenges

00:00:25.645 --> 00:00:26.925
<v Speaker 0>and quirks

00:00:27.005 --> 00:00:29.430
<v Speaker 0>to this brand new equality language that you

00:00:29.430 --> 00:00:32.390
<v Speaker 0>only learn through guided tuition or

00:00:32.630 --> 00:00:34.710
<v Speaker 0>plenty of head banging against the wall.

00:00:35.030 --> 00:00:37.350
<v Speaker 0>So I'm glad you've chosen this approach.

00:00:38.550 --> 00:00:39.830
<v Speaker 0>Now, this is a

00:00:41.030 --> 00:00:42.710
<v Speaker 0>workshop. This is the first time that we've

00:00:42.710 --> 00:00:44.150
<v Speaker 0>done that in this course.

00:00:45.245 --> 00:00:46.605
<v Speaker 0>And the format will be,

00:00:47.085 --> 00:00:48.205
<v Speaker 0>there is a

00:00:48.925 --> 00:00:50.045
<v Speaker 0>README file

00:00:50.365 --> 00:00:51.485
<v Speaker 0>on GitHub

00:00:51.725 --> 00:00:53.805
<v Speaker 0>where you can read through

00:00:54.285 --> 00:00:55.565
<v Speaker 0>all the materials

00:00:56.205 --> 00:00:57.245
<v Speaker 0>and do the exercises.

00:00:59.360 --> 00:01:01.840
<v Speaker 0>What I'm gonna do today is read through

00:01:01.840 --> 00:01:04.000
<v Speaker 0>all the materials and do the exercises.

00:01:05.200 --> 00:01:07.280
<v Speaker 0>Now I'll give you plenty of warning before

00:01:07.280 --> 00:01:09.040
<v Speaker 0>I move on to the exercises, so I

00:01:09.040 --> 00:01:11.360
<v Speaker 0>would encourage you to follow along with me

00:01:11.360 --> 00:01:13.119
<v Speaker 0>as we go through the materials

00:01:13.440 --> 00:01:14.240
<v Speaker 0>and then

00:01:14.695 --> 00:01:16.615
<v Speaker 0>don't watch the exercises.

00:01:16.695 --> 00:01:17.975
<v Speaker 0>If you're watching live,

00:01:18.215 --> 00:01:19.255
<v Speaker 0>well, you know,

00:01:20.134 --> 00:01:22.295
<v Speaker 0>yes, please watch the exercises.

00:01:22.774 --> 00:01:24.375
<v Speaker 0>But if you're not watching live, pause it.

00:01:24.375 --> 00:01:25.814
<v Speaker 0>Use that as an opportunity to go and

00:01:25.814 --> 00:01:27.920
<v Speaker 0>test your own logic. Anyone who joins me

00:01:27.920 --> 00:01:29.439
<v Speaker 0>live today, we will try and make this

00:01:29.439 --> 00:01:31.840
<v Speaker 0>a little bit more interactive than previous sessions

00:01:31.840 --> 00:01:34.240
<v Speaker 0>via the tutorials and the lectures,

00:01:34.880 --> 00:01:36.880
<v Speaker 0>but we want this to be fun. So

00:01:38.640 --> 00:01:40.159
<v Speaker 0>we have our screen shared here.

00:01:41.995 --> 00:01:44.395
<v Speaker 0>You can find the resources for this course

00:01:44.395 --> 00:01:47.675
<v Speaker 0>at github dot com slash rockode academy.

00:01:48.315 --> 00:01:50.155
<v Speaker 0>I have started adding the materials to the

00:01:50.155 --> 00:01:51.355
<v Speaker 0>courses repository.

00:01:51.755 --> 00:01:53.915
<v Speaker 0>There is a InfluxDB complete guide,

00:01:54.400 --> 00:01:57.040
<v Speaker 0>and we are starting on part five today,

00:01:57.040 --> 00:01:59.439
<v Speaker 0>an introduction to Flux, the workshop.

00:02:00.479 --> 00:02:01.360
<v Speaker 0>Excuse me.

00:02:02.240 --> 00:02:02.880
<v Speaker 0>Now,

00:02:04.159 --> 00:02:06.640
<v Speaker 0>this course is a living course. This course

00:02:06.640 --> 00:02:08.800
<v Speaker 0>will be continuing to update week after week

00:02:08.800 --> 00:02:09.280
<v Speaker 0>and

00:02:10.145 --> 00:02:12.305
<v Speaker 0>possibly in the future as new features and

00:02:12.305 --> 00:02:15.345
<v Speaker 0>things come and change within InfluxDB too.

00:02:16.065 --> 00:02:19.025
<v Speaker 0>So I can't exactly go back and modify

00:02:19.425 --> 00:02:20.625
<v Speaker 0>a livestream,

00:02:21.025 --> 00:02:22.785
<v Speaker 0>so you may see a little bit of

00:02:22.785 --> 00:02:24.705
<v Speaker 0>variation and change from what is in the

00:02:24.705 --> 00:02:27.500
<v Speaker 0>readme during today's session, but I will do

00:02:27.500 --> 00:02:30.140
<v Speaker 0>my best to follow-up with more workshops as

00:02:30.140 --> 00:02:33.260
<v Speaker 0>required as the material evolves over time.

00:02:36.140 --> 00:02:36.860
<v Speaker 0>Okay.

00:02:37.659 --> 00:02:39.340
<v Speaker 0>Let's see. So

00:02:39.795 --> 00:02:42.594
<v Speaker 0>in order to dive into Flux today, we

00:02:42.594 --> 00:02:45.155
<v Speaker 0>do need to start collecting some

00:02:45.555 --> 00:02:47.394
<v Speaker 0>Oh, that's annoying. Well, let's get rid of

00:02:47.394 --> 00:02:47.955
<v Speaker 0>that.

00:02:50.194 --> 00:02:51.635
<v Speaker 0>Got to notice that early.

00:02:52.674 --> 00:02:54.435
<v Speaker 0>This is the watermark. That's what it is.

00:02:54.980 --> 00:02:57.220
<v Speaker 0>Okay. So in order to

00:02:58.260 --> 00:03:00.020
<v Speaker 0>explore Flux today,

00:03:00.099 --> 00:03:01.860
<v Speaker 0>we need some data.

00:03:01.860 --> 00:03:04.180
<v Speaker 0>So we're going to get InfluxDB to running

00:03:04.180 --> 00:03:05.220
<v Speaker 0>on my machine.

00:03:05.459 --> 00:03:08.340
<v Speaker 0>We're going to run with this configuration

00:03:08.925 --> 00:03:10.205
<v Speaker 0>from Telegraph.

00:03:11.805 --> 00:03:14.845
<v Speaker 0>I'll copy that. We will jump over here

00:03:15.805 --> 00:03:16.525
<v Speaker 0>and

00:03:17.645 --> 00:03:18.845
<v Speaker 0>we'll paste it in.

00:03:20.525 --> 00:03:23.490
<v Speaker 0>As the instructions note, you will need InfluxDB

00:03:23.490 --> 00:03:24.530
<v Speaker 0>to be running

00:03:24.690 --> 00:03:27.410
<v Speaker 0>an organization called Rawkode Academy with a bucket

00:03:27.410 --> 00:03:29.170
<v Speaker 0>called workshop. So I will

00:03:30.050 --> 00:03:32.050
<v Speaker 0>do that now also, and I'll just make

00:03:32.050 --> 00:03:34.050
<v Speaker 0>sure that I don't have any preexisting

00:03:35.730 --> 00:03:36.210
<v Speaker 0>data.

00:03:37.944 --> 00:03:39.785
<v Speaker 0>So we run InfluxDB,

00:03:41.545 --> 00:03:42.905
<v Speaker 0>and I'll get another

00:03:43.704 --> 00:03:45.065
<v Speaker 0>terminal here.

00:03:45.224 --> 00:03:46.665
<v Speaker 0>And we'll just give that a few seconds

00:03:46.665 --> 00:03:47.144
<v Speaker 0>to run.

00:03:50.970 --> 00:03:52.490
<v Speaker 0>I haven't worked out why it takes so

00:03:52.490 --> 00:03:54.410
<v Speaker 0>long on my Mac, but it just seems

00:03:54.410 --> 00:03:55.530
<v Speaker 0>to be on my Mac. And I'm assuming

00:03:55.530 --> 00:03:58.330
<v Speaker 0>it's because I'm on the latest beta

00:03:58.330 --> 00:04:00.569
<v Speaker 0>of Mac OS Monterey.

00:04:00.569 --> 00:04:01.210
<v Speaker 0>So

00:04:01.610 --> 00:04:03.209
<v Speaker 0>maybe something weird going on here.

00:04:08.565 --> 00:04:09.285
<v Speaker 0>Perfect.

00:04:09.925 --> 00:04:11.365
<v Speaker 0>And nice coffee.

00:04:12.165 --> 00:04:12.885
<v Speaker 0>Okay.

00:04:13.605 --> 00:04:16.324
<v Speaker 0>So let's get our InfluxDB cooking.

00:04:20.700 --> 00:04:21.820
<v Speaker 0>Loco Jose.

00:04:23.020 --> 00:04:24.620
<v Speaker 0>Close, but no cigar.

00:04:24.940 --> 00:04:25.820
<v Speaker 0>Loco https.

00:04:28.300 --> 00:04:29.340
<v Speaker 0>There we go.

00:04:30.540 --> 00:04:33.340
<v Speaker 0>So we're gonna click get started. My username,

00:04:33.735 --> 00:04:35.495
<v Speaker 0>I'll pick a password.

00:04:37.335 --> 00:04:39.014
<v Speaker 0>We want our organization

00:04:39.014 --> 00:04:40.694
<v Speaker 0>to be Rawkode Academy

00:04:40.694 --> 00:04:42.055
<v Speaker 0>and our bucket to

00:04:42.854 --> 00:04:44.455
<v Speaker 0>be workshop.

00:04:46.134 --> 00:04:49.495
<v Speaker 0>Zooming in on Influx UI is really difficult.

00:04:50.590 --> 00:04:51.310
<v Speaker 0>So

00:04:51.550 --> 00:04:52.910
<v Speaker 0>maybe we just have to try and make

00:04:52.910 --> 00:04:53.790
<v Speaker 0>do with this.

00:04:54.830 --> 00:04:56.430
<v Speaker 0>I'm gonna click configure later.

00:04:57.150 --> 00:04:59.870
<v Speaker 0>We'll go to data and tokens and we

00:04:59.870 --> 00:05:02.509
<v Speaker 0>get an admin token created for us, which

00:05:02.509 --> 00:05:03.229
<v Speaker 0>I will copy.

00:05:04.755 --> 00:05:07.395
<v Speaker 0>And we will export this as Influx

00:05:07.555 --> 00:05:08.355
<v Speaker 0>token.

00:05:08.915 --> 00:05:10.835
<v Speaker 0>We can then run telegraph

00:05:13.315 --> 00:05:14.195
<v Speaker 0>like so.

00:05:17.075 --> 00:05:18.515
<v Speaker 0>All right, let's close that.

00:05:21.400 --> 00:05:23.639
<v Speaker 0>And that's all these instructions here are also

00:05:23.639 --> 00:05:25.960
<v Speaker 0>saying. So we created our organisation,

00:05:26.360 --> 00:05:27.960
<v Speaker 0>we named our bucket workshop

00:05:28.199 --> 00:05:31.400
<v Speaker 0>and we exported our Influx token environment variable,

00:05:31.400 --> 00:05:33.240
<v Speaker 0>and this config will just work for you.

00:05:33.905 --> 00:05:36.385
<v Speaker 0>The configuration of Telegraph that we're using here

00:05:36.385 --> 00:05:38.065
<v Speaker 0>is just configured with a

00:05:38.785 --> 00:05:40.545
<v Speaker 0>high resolution or short

00:05:41.425 --> 00:05:42.945
<v Speaker 0>two second interval

00:05:43.105 --> 00:05:44.865
<v Speaker 0>so that we are collecting metrics every two

00:05:44.865 --> 00:05:47.505
<v Speaker 0>seconds. We wanna see data pretty fast here

00:05:47.505 --> 00:05:48.225
<v Speaker 0>today.

00:05:48.465 --> 00:05:49.800
<v Speaker 0>And we've got a flush interval of six

00:05:49.800 --> 00:05:52.680
<v Speaker 0>seconds. That just means that Telegraph will collect

00:05:52.680 --> 00:05:54.599
<v Speaker 0>metrics every two seconds. It will hold them

00:05:54.599 --> 00:05:56.520
<v Speaker 0>in memory, and every six seconds, it will

00:05:56.520 --> 00:05:57.800
<v Speaker 0>write them to the database.

00:05:58.680 --> 00:06:01.080
<v Speaker 0>Really, our flush interval would be higher in

00:06:01.080 --> 00:06:03.719
<v Speaker 0>normal circumstances, and we leverage batching and buffering

00:06:03.719 --> 00:06:06.495
<v Speaker 0>much more. However, we do want a pretty

00:06:06.495 --> 00:06:08.815
<v Speaker 0>quick feedback cycle as we query and work

00:06:08.815 --> 00:06:09.855
<v Speaker 0>with Flux today.

00:06:11.854 --> 00:06:15.055
<v Speaker 0>Now we are configuring Telegraph with the CPU

00:06:15.055 --> 00:06:17.775
<v Speaker 0>plugging, although I have disabled the total CPU

00:06:17.775 --> 00:06:18.495
<v Speaker 0>metric

00:06:18.970 --> 00:06:20.730
<v Speaker 0>just to force us to do that through

00:06:20.730 --> 00:06:23.530
<v Speaker 0>aggregation functions within Flux. And we'll talk about

00:06:23.530 --> 00:06:25.930
<v Speaker 0>that as we move through today's workshop.

00:06:26.890 --> 00:06:28.490
<v Speaker 0>I've then got it configured with all the

00:06:28.490 --> 00:06:30.970
<v Speaker 0>other system metrics. So we'll be looking at

00:06:30.970 --> 00:06:33.370
<v Speaker 0>this, this IO, memory, net, processing swap, and

00:06:33.370 --> 00:06:33.770
<v Speaker 0>system.

00:06:34.395 --> 00:06:36.395
<v Speaker 0>These are pretty much all the plugins that

00:06:36.395 --> 00:06:39.275
<v Speaker 0>work across all operating systems don't really require

00:06:39.275 --> 00:06:41.595
<v Speaker 0>any configuration and get you data pretty fast

00:06:41.595 --> 00:06:43.515
<v Speaker 0>that is variable and changes.

00:06:43.755 --> 00:06:45.995
<v Speaker 0>Again, important for what we're working on today

00:06:45.995 --> 00:06:46.875
<v Speaker 0>with this workshop.

00:06:48.830 --> 00:06:51.150
<v Speaker 0>Okay. So now we are going to write

00:06:51.150 --> 00:06:52.670
<v Speaker 0>our first Flux

00:06:52.670 --> 00:06:53.310
<v Speaker 0>query.

00:06:54.190 --> 00:06:54.750
<v Speaker 0>And

00:06:55.390 --> 00:06:57.870
<v Speaker 0>the markdown here will be great and it

00:06:57.870 --> 00:07:00.905
<v Speaker 0>is public, anyone can look at it, but

00:07:00.905 --> 00:07:03.225
<v Speaker 0>only Rawkode Academy members will get to see

00:07:03.225 --> 00:07:06.265
<v Speaker 0>this course and my wonderful added commentary and

00:07:06.265 --> 00:07:09.865
<v Speaker 0>flavor. So while there are things on well,

00:07:09.865 --> 00:07:10.585
<v Speaker 0>there's

00:07:10.905 --> 00:07:13.385
<v Speaker 0>little snippets of information in this markdown file,

00:07:13.500 --> 00:07:15.180
<v Speaker 0>I'm gonna be adding on a little bit

00:07:15.180 --> 00:07:16.940
<v Speaker 0>more and showing you some tips and tricks

00:07:16.940 --> 00:07:19.740
<v Speaker 0>from my usage of InfluxDB over the years.

00:07:20.780 --> 00:07:21.500
<v Speaker 0>Okay.

00:07:21.980 --> 00:07:24.140
<v Speaker 0>So there are two functions that are always

00:07:24.140 --> 00:07:26.540
<v Speaker 0>required before the flux engine will execute any

00:07:26.540 --> 00:07:28.220
<v Speaker 0>query against InfluxDB.

00:07:28.694 --> 00:07:29.655
<v Speaker 0>Excuse me.

00:07:30.775 --> 00:07:32.055
<v Speaker 0>Excuse me. Now,

00:07:33.014 --> 00:07:34.375
<v Speaker 0>you need a data source. You have to

00:07:34.375 --> 00:07:36.055
<v Speaker 0>tell it where to read the data from.

00:07:36.615 --> 00:07:38.775
<v Speaker 0>And secondly, you need a time window.

00:07:39.014 --> 00:07:40.535
<v Speaker 0>We'll see this as

00:07:40.935 --> 00:07:42.134
<v Speaker 0>from and range statements.

00:07:42.620 --> 00:07:44.699
<v Speaker 0>And there are multiple ways to actually execute

00:07:44.699 --> 00:07:46.860
<v Speaker 0>a query against InfluxDB.

00:07:47.259 --> 00:07:49.180
<v Speaker 0>So the first one is we can come

00:07:49.180 --> 00:07:51.100
<v Speaker 0>here to the explorer view where

00:07:51.740 --> 00:07:53.820
<v Speaker 0>we get this nice user interface,

00:07:54.300 --> 00:07:55.580
<v Speaker 0>where we select the bucket,

00:07:56.445 --> 00:07:58.445
<v Speaker 0>we can select the metric that we want,

00:07:58.605 --> 00:08:00.285
<v Speaker 0>we can select the fields that we care

00:08:00.285 --> 00:08:00.845
<v Speaker 0>about,

00:08:01.565 --> 00:08:02.845
<v Speaker 0>and we click submit.

00:08:03.405 --> 00:08:05.565
<v Speaker 0>And you'll see in the last five minutes,

00:08:05.565 --> 00:08:06.925
<v Speaker 0>we've got some data coming through.

00:08:10.240 --> 00:08:13.840
<v Speaker 0>This UI is great for exploring

00:08:13.840 --> 00:08:16.000
<v Speaker 0>when you're not really sure what you want

00:08:16.000 --> 00:08:17.840
<v Speaker 0>to be querying quite yet,

00:08:18.639 --> 00:08:20.639
<v Speaker 0>but it's quite restrictive if you wanna do

00:08:20.639 --> 00:08:23.120
<v Speaker 0>anything a bit more advanced or complicated.

00:08:24.025 --> 00:08:26.105
<v Speaker 0>Now you can switch from filters to grips

00:08:26.105 --> 00:08:28.905
<v Speaker 0>and begin to grip by, you know, the

00:08:29.465 --> 00:08:30.665
<v Speaker 0>values that are available.

00:08:31.305 --> 00:08:32.184
<v Speaker 0>But really,

00:08:32.505 --> 00:08:33.945
<v Speaker 0>what we want to do for the majority

00:08:33.945 --> 00:08:35.304
<v Speaker 0>of the time is to use the query

00:08:35.304 --> 00:08:37.465
<v Speaker 0>builder. So we click on query builder and

00:08:37.465 --> 00:08:39.890
<v Speaker 0>we can actually see the flux code itself.

00:08:41.010 --> 00:08:41.730
<v Speaker 0>So

00:08:43.089 --> 00:08:43.890
<v Speaker 0>another,

00:08:43.890 --> 00:08:45.010
<v Speaker 0>the

00:08:45.170 --> 00:08:47.170
<v Speaker 0>first step here then would be

00:08:47.730 --> 00:08:49.730
<v Speaker 0>use the query builder

00:08:50.610 --> 00:08:53.329
<v Speaker 0>whenever possible to at least bootstrap and start

00:08:53.329 --> 00:08:53.890
<v Speaker 0>your query.

00:08:54.435 --> 00:08:56.515
<v Speaker 0>It's a really great way to get that

00:08:56.515 --> 00:08:58.515
<v Speaker 0>from range and any filters

00:08:58.915 --> 00:09:00.755
<v Speaker 0>through a very visual means.

00:09:01.315 --> 00:09:03.155
<v Speaker 0>And then from here, can start to change

00:09:03.155 --> 00:09:04.835
<v Speaker 0>all of the query yourself.

00:09:05.795 --> 00:09:07.955
<v Speaker 0>We're not gonna use this because we're gonna

00:09:07.955 --> 00:09:09.635
<v Speaker 0>stick to what is available in the workshop.

00:09:10.589 --> 00:09:12.510
<v Speaker 0>And I'll also show you one more thing

00:09:12.510 --> 00:09:15.310
<v Speaker 0>in just a moment. So let's copy our

00:09:15.310 --> 00:09:17.870
<v Speaker 0>from statement. Okay. We'll just copy both of

00:09:17.870 --> 00:09:19.230
<v Speaker 0>these and then I'll I'll read over the

00:09:19.230 --> 00:09:19.470
<v Speaker 0>text.

00:09:26.285 --> 00:09:27.085
<v Speaker 0>There we go.

00:09:28.525 --> 00:09:29.165
<v Speaker 0>So,

00:09:29.485 --> 00:09:30.685
<v Speaker 0>what I've done here,

00:09:31.245 --> 00:09:32.845
<v Speaker 0>and then you'll see that it took a

00:09:32.845 --> 00:09:33.885
<v Speaker 0>little bit longer,

00:09:34.380 --> 00:09:35.820
<v Speaker 0>is that we have a from and a

00:09:35.820 --> 00:09:38.780
<v Speaker 0>range with no predicates, no filters, no nothing,

00:09:39.020 --> 00:09:41.420
<v Speaker 0>and it does return quite a lot of

00:09:41.420 --> 00:09:43.420
<v Speaker 0>data. And it's hard to tell, but there

00:09:43.420 --> 00:09:45.340
<v Speaker 0>is a probably a fair bit. If we

00:09:45.340 --> 00:09:47.660
<v Speaker 0>click on this view raw data tab here,

00:09:47.820 --> 00:09:49.825
<v Speaker 0>which is one of the most important tabs,

00:09:49.825 --> 00:09:51.905
<v Speaker 0>as you start to explore your data,

00:09:52.385 --> 00:09:54.705
<v Speaker 0>you'll see, yeah, I've got

00:09:55.185 --> 00:09:56.865
<v Speaker 0>a fair bit of information here.

00:09:57.825 --> 00:10:00.305
<v Speaker 0>Okay, so what's this data source? The from

00:10:00.305 --> 00:10:02.545
<v Speaker 0>function is how we select where to load

00:10:02.545 --> 00:10:05.639
<v Speaker 0>the data from. When you're creating against InfluxDB

00:10:05.639 --> 00:10:06.200
<v Speaker 0>two,

00:10:06.600 --> 00:10:08.680
<v Speaker 0>you can use from with a bucket name

00:10:08.680 --> 00:10:10.839
<v Speaker 0>and this will fetch data from that bucket.

00:10:11.480 --> 00:10:13.399
<v Speaker 0>Buckets have retention policies.

00:10:13.399 --> 00:10:15.480
<v Speaker 0>They're a very good way to

00:10:16.279 --> 00:10:18.464
<v Speaker 0>determine how long your data should live and

00:10:18.464 --> 00:10:20.865
<v Speaker 0>use them as a cascading strategy for your

00:10:20.865 --> 00:10:23.665
<v Speaker 0>data. We're gonna be talking about, done something

00:10:23.665 --> 00:10:24.625
<v Speaker 0>on Thursday,

00:10:24.785 --> 00:10:26.785
<v Speaker 0>where we will look at buckets and retention

00:10:26.785 --> 00:10:28.225
<v Speaker 0>periods in more detail,

00:10:28.785 --> 00:10:29.904
<v Speaker 0>but not today.

00:10:32.500 --> 00:10:34.100
<v Speaker 0>The other thing

00:10:34.660 --> 00:10:36.980
<v Speaker 0>that's worth noting here is that Flux,

00:10:37.700 --> 00:10:41.060
<v Speaker 0>well as embedded in InfluxDB two has always

00:10:41.060 --> 00:10:43.380
<v Speaker 0>been built with the intention of creating multiple

00:10:43.380 --> 00:10:44.020
<v Speaker 0>data sources.

00:10:44.514 --> 00:10:47.555
<v Speaker 0>So there are other functions besides from to

00:10:47.555 --> 00:10:50.195
<v Speaker 0>read from SQL compatible stores,

00:10:50.995 --> 00:10:51.955
<v Speaker 0>CSV,

00:10:52.115 --> 00:10:54.195
<v Speaker 0>HTTP endpoints and others,

00:10:54.595 --> 00:10:56.834
<v Speaker 0>but we'll only be working on InfluxDB two

00:10:56.834 --> 00:10:57.635
<v Speaker 0>for this function.

00:10:59.900 --> 00:11:02.220
<v Speaker 0>Next, we have to use a range statement.

00:11:02.940 --> 00:11:04.700
<v Speaker 0>An arranged statement has

00:11:05.340 --> 00:11:08.060
<v Speaker 0>accompanied with this little pipe forward operator, and

00:11:08.060 --> 00:11:09.820
<v Speaker 0>I've kind of done my best to explain

00:11:09.820 --> 00:11:11.100
<v Speaker 0>this here as well.

00:11:11.420 --> 00:11:11.660
<v Speaker 0>So

00:11:12.225 --> 00:11:14.704
<v Speaker 0>if you've written any Alexa or F sharp,

00:11:14.704 --> 00:11:16.785
<v Speaker 0>the pipe forward operator should be something you're

00:11:16.785 --> 00:11:17.584
<v Speaker 0>familiar with.

00:11:18.464 --> 00:11:20.865
<v Speaker 0>All it means is that we take

00:11:21.264 --> 00:11:22.144
<v Speaker 0>the output

00:11:22.625 --> 00:11:24.225
<v Speaker 0>from the first function

00:11:24.384 --> 00:11:26.225
<v Speaker 0>and we pass it as an input to

00:11:26.225 --> 00:11:27.105
<v Speaker 0>the second function.

00:11:27.830 --> 00:11:30.390
<v Speaker 0>So this from selects all data from that

00:11:30.390 --> 00:11:31.190
<v Speaker 0>bucket.

00:11:31.750 --> 00:11:33.830
<v Speaker 0>We then pass it into this, and this

00:11:33.830 --> 00:11:35.670
<v Speaker 0>is a range which will actually

00:11:36.950 --> 00:11:39.430
<v Speaker 0>filter the data to just the bits that

00:11:39.430 --> 00:11:41.510
<v Speaker 0>we need, which is the last fifteen minutes.

00:11:43.805 --> 00:11:44.524
<v Speaker 0>Okay.

00:11:44.845 --> 00:11:46.524
<v Speaker 0>So you always need a from and you

00:11:46.524 --> 00:11:47.725
<v Speaker 0>always need a range.

00:11:49.805 --> 00:11:52.285
<v Speaker 0>Alright. Something else that's cool about Flux, and

00:11:52.285 --> 00:11:54.125
<v Speaker 0>you've already seen that with our first query,

00:11:54.125 --> 00:11:55.565
<v Speaker 0>is that it has a concept of a

00:11:55.565 --> 00:11:56.845
<v Speaker 0>duration literal,

00:11:57.360 --> 00:11:59.520
<v Speaker 0>which just means that durations and times

00:12:00.160 --> 00:12:01.600
<v Speaker 0>are first class citizens.

00:12:01.760 --> 00:12:04.400
<v Speaker 0>You'll see here, we do a dash minus

00:12:04.400 --> 00:12:06.320
<v Speaker 0>15 ms to see if I need data

00:12:06.320 --> 00:12:08.320
<v Speaker 0>from now minus 15.

00:12:08.960 --> 00:12:11.040
<v Speaker 0>We have seconds available to us.

00:12:11.625 --> 00:12:14.105
<v Speaker 0>We have hours, we have days,

00:12:14.585 --> 00:12:16.345
<v Speaker 0>that's supposed to be weeks. I'll fix that.

00:12:16.345 --> 00:12:17.385
<v Speaker 0>So that's a W.

00:12:17.705 --> 00:12:18.985
<v Speaker 0>We have months,

00:12:19.145 --> 00:12:20.585
<v Speaker 0>then I see by MO,

00:12:20.745 --> 00:12:22.585
<v Speaker 0>and we have access to years.

00:12:22.745 --> 00:12:24.185
<v Speaker 0>So, you know, pretty flexible.

00:12:24.620 --> 00:12:27.100
<v Speaker 0>And there are sub seconds duration that rolls

00:12:27.100 --> 00:12:29.500
<v Speaker 0>too, you can do milliseconds and nanoseconds.

00:12:31.019 --> 00:12:32.140
<v Speaker 0>Time literals

00:12:32.540 --> 00:12:33.980
<v Speaker 0>work in multiple ways. You can use a

00:12:33.980 --> 00:12:35.660
<v Speaker 0>no function to get back to the current

00:12:35.660 --> 00:12:35.980
<v Speaker 0>time.

00:12:36.905 --> 00:12:39.385
<v Speaker 0>You can use just the year, month and

00:12:39.385 --> 00:12:41.545
<v Speaker 0>day, or you can use a fill ISO

00:12:41.545 --> 00:12:42.745
<v Speaker 0>8,601

00:12:42.745 --> 00:12:43.945
<v Speaker 0>time like so.

00:12:47.865 --> 00:12:48.585
<v Speaker 0>Now,

00:12:48.905 --> 00:12:51.065
<v Speaker 0>something that is implicit in the query that

00:12:51.065 --> 00:12:53.310
<v Speaker 0>we have used so far, is there was

00:12:53.310 --> 00:12:54.670
<v Speaker 0>no yield here.

00:12:55.630 --> 00:12:58.190
<v Speaker 0>And InfluxDB actually adds this yield to your

00:12:58.190 --> 00:12:59.950
<v Speaker 0>query automatically for you.

00:13:00.270 --> 00:13:02.190
<v Speaker 0>So you can always imagine that it's there

00:13:02.190 --> 00:13:04.270
<v Speaker 0>if you omit it. And when you do

00:13:04.270 --> 00:13:07.545
<v Speaker 0>more powerful queries across multiple datasets and you're

00:13:07.545 --> 00:13:10.425
<v Speaker 0>yielding multiple results, the yield will become much

00:13:10.425 --> 00:13:11.305
<v Speaker 0>more useful.

00:13:11.785 --> 00:13:13.305
<v Speaker 0>This will be something we look at throughout

00:13:13.305 --> 00:13:15.545
<v Speaker 0>the course, especially as we move into

00:13:15.705 --> 00:13:17.865
<v Speaker 0>monitoring real production systems.

00:13:18.745 --> 00:13:21.280
<v Speaker 0>So yield, you can omit, but you can

00:13:21.280 --> 00:13:23.840
<v Speaker 0>also name it as we do here. So

00:13:23.840 --> 00:13:26.400
<v Speaker 0>you'll see that we have a couple of

00:13:26.400 --> 00:13:28.960
<v Speaker 0>queries here. The first one is a from

00:13:28.960 --> 00:13:31.440
<v Speaker 0>range of fifteen minutes. We have a filter,

00:13:31.440 --> 00:13:33.520
<v Speaker 0>which we haven't really talked about yet, but

00:13:33.520 --> 00:13:35.200
<v Speaker 0>will be something that we talk about in

00:13:35.200 --> 00:13:35.760
<v Speaker 0>your course.

00:13:39.255 --> 00:13:41.895
<v Speaker 0>And then we yield that as that dataset

00:13:42.055 --> 00:13:43.495
<v Speaker 0>as CPU.

00:13:44.535 --> 00:13:46.775
<v Speaker 0>And then we do the same here, yielding

00:13:47.335 --> 00:13:50.135
<v Speaker 0>as memory of a different filter.

00:13:51.440 --> 00:13:53.520
<v Speaker 0>And we should be able to

00:14:05.745 --> 00:14:07.425
<v Speaker 0>What did I get wrong with Oh, I

00:14:07.425 --> 00:14:09.105
<v Speaker 0>forgot that. Is it V yield?

00:14:18.329 --> 00:14:19.850
<v Speaker 0>Here's another tip.

00:14:21.130 --> 00:14:22.089
<v Speaker 0>You can,

00:14:22.329 --> 00:14:24.010
<v Speaker 0>when you're using the UI,

00:14:24.170 --> 00:14:26.649
<v Speaker 0>you will get this list of functions on

00:14:26.649 --> 00:14:29.290
<v Speaker 0>the right hand side. This is invaluable, right?

00:14:29.290 --> 00:14:31.050
<v Speaker 0>You're never gonna remember the syntax for all

00:14:31.050 --> 00:14:32.490
<v Speaker 0>of them, just as I have forgotten.

00:14:33.115 --> 00:14:34.475
<v Speaker 0>You can type the name of the function

00:14:34.475 --> 00:14:37.035
<v Speaker 0>you need and literally just click inject.

00:14:37.755 --> 00:14:40.075
<v Speaker 0>And you'll see here, I just forgot the

00:14:42.075 --> 00:14:44.715
<v Speaker 0>name parameter. So that's a really good point.

00:14:46.660 --> 00:14:50.019
<v Speaker 0>All functions and flux take named parameters.

00:14:50.820 --> 00:14:53.060
<v Speaker 0>You'll see that with the range has a

00:14:53.060 --> 00:14:55.139
<v Speaker 0>parameter called start. It also has a parameter

00:14:55.139 --> 00:14:56.180
<v Speaker 0>called stop.

00:14:57.060 --> 00:14:57.940
<v Speaker 0>We could say,

00:14:58.755 --> 00:14:59.395
<v Speaker 0>give me

00:14:59.955 --> 00:15:01.475
<v Speaker 0>Last, well, give me ten minutes of data

00:15:01.475 --> 00:15:04.355
<v Speaker 0>starting fifteen minutes ago, like so. The filter

00:15:04.355 --> 00:15:05.075
<v Speaker 0>function

00:15:05.235 --> 00:15:07.475
<v Speaker 0>takes a function called fn, the property is

00:15:07.475 --> 00:15:09.235
<v Speaker 0>called fn, then it takes an anonymous function

00:15:09.235 --> 00:15:11.475
<v Speaker 0>inside. The yield takes a parameter called name.

00:15:11.475 --> 00:15:12.115
<v Speaker 0>So all

00:15:12.690 --> 00:15:15.890
<v Speaker 0>all functions in Flux take named parameters.

00:15:19.170 --> 00:15:19.730
<v Speaker 0>And

00:15:20.530 --> 00:15:21.570
<v Speaker 0>let's see,

00:15:22.930 --> 00:15:24.530
<v Speaker 0>we just maybe just look at this as

00:15:24.530 --> 00:15:25.170
<v Speaker 0>raw data,

00:15:28.615 --> 00:15:31.015
<v Speaker 0>We can see this is the CPU results.

00:15:31.735 --> 00:15:33.495
<v Speaker 0>And if we scroll down,

00:15:37.095 --> 00:15:39.415
<v Speaker 0>oops, still CPU. There'll be, where does this

00:15:39.415 --> 00:15:40.135
<v Speaker 0>memory start?

00:15:42.690 --> 00:15:43.890
<v Speaker 0>Oh, there we go.

00:15:45.410 --> 00:15:47.010
<v Speaker 0>Available up.

00:15:50.610 --> 00:15:51.490
<v Speaker 0>Where

00:15:51.490 --> 00:15:52.529
<v Speaker 0>are you?

00:15:53.649 --> 00:15:55.010
<v Speaker 0>Try and drag back up. It was a

00:15:55.010 --> 00:15:55.730
<v Speaker 0>bit finicky.

00:15:57.495 --> 00:16:00.215
<v Speaker 0>There's UC system at the end of CPU.

00:16:01.575 --> 00:16:02.695
<v Speaker 0>Too much data.

00:16:08.215 --> 00:16:10.900
<v Speaker 0>There we go. And there's our memory results

00:16:10.900 --> 00:16:12.420
<v Speaker 0>right here. You can see that's an active

00:16:12.420 --> 00:16:14.660
<v Speaker 0>channel. So, you can yield multiple things.

00:16:15.460 --> 00:16:17.220
<v Speaker 0>Really cool if you want to graph things

00:16:17.220 --> 00:16:19.140
<v Speaker 0>and build correlations and be able to look

00:16:19.140 --> 00:16:20.340
<v Speaker 0>at how your CPU

00:16:20.580 --> 00:16:22.875
<v Speaker 0>is affected with your memory. Like, is there

00:16:22.875 --> 00:16:24.955
<v Speaker 0>a correlation that as memory consumption goes up

00:16:24.955 --> 00:16:27.115
<v Speaker 0>or CPU issues going up, etcetera? Now, that's

00:16:27.115 --> 00:16:28.475
<v Speaker 0>a contrast example.

00:16:28.955 --> 00:16:31.435
<v Speaker 0>Your infrastructure, your applications, you'll know what you're

00:16:31.435 --> 00:16:33.035
<v Speaker 0>looking for and what you're trying to correlate.

00:16:36.040 --> 00:16:37.480
<v Speaker 0>Okay. So

00:16:38.280 --> 00:16:41.000
<v Speaker 0>that is our very first Flux query.

00:16:41.640 --> 00:16:44.680
<v Speaker 0>We've taken a look at from and range

00:16:44.680 --> 00:16:45.400
<v Speaker 0>and yield.

00:16:48.055 --> 00:16:49.975
<v Speaker 0>Those are just the things that are required

00:16:50.295 --> 00:16:52.775
<v Speaker 0>for everything you do. Filter is equally important,

00:16:52.775 --> 00:16:54.135
<v Speaker 0>but we're gonna talk about that in just

00:16:54.135 --> 00:16:54.695
<v Speaker 0>a moment.

00:16:55.815 --> 00:16:58.695
<v Speaker 0>I'm gonna run through the exercises

00:16:58.695 --> 00:16:59.815
<v Speaker 0>now. So

00:17:00.615 --> 00:17:03.740
<v Speaker 0>if you want to do the exercises on

00:17:03.740 --> 00:17:04.619
<v Speaker 0>your own time,

00:17:05.020 --> 00:17:06.140
<v Speaker 0>you want to do them now, or you

00:17:06.140 --> 00:17:07.980
<v Speaker 0>want to try them before I run through

00:17:07.980 --> 00:17:09.900
<v Speaker 0>them, now is the time to pause your

00:17:09.900 --> 00:17:12.139
<v Speaker 0>video and come back later.

00:17:13.260 --> 00:17:15.260
<v Speaker 0>I'll cut to 10 in my head while

00:17:15.260 --> 00:17:15.980
<v Speaker 0>staring intensely.

00:17:22.825 --> 00:17:24.345
<v Speaker 0>I stopped counting, I don't know when it

00:17:24.345 --> 00:17:24.984
<v Speaker 0>turns out.

00:17:25.545 --> 00:17:28.345
<v Speaker 0>Right, I'll do it. Okay, so the exercises

00:17:28.345 --> 00:17:30.345
<v Speaker 0>are nice and simple. We're gonna layer these

00:17:30.345 --> 00:17:31.865
<v Speaker 0>up week after week and add a more

00:17:31.865 --> 00:17:32.960
<v Speaker 0>complex examples,

00:17:32.960 --> 00:17:34.480
<v Speaker 0>but really we just wanna get you familiar

00:17:34.480 --> 00:17:36.320
<v Speaker 0>with entering the query into the UI, and

00:17:36.320 --> 00:17:38.080
<v Speaker 0>then we'll take a look at the Flux

00:17:38.080 --> 00:17:40.240
<v Speaker 0>CLI REPL as well. So

00:17:41.280 --> 00:17:43.760
<v Speaker 0>we want to fetch all metrics over the

00:17:43.760 --> 00:17:45.360
<v Speaker 0>last five minutes.

00:17:46.665 --> 00:17:48.105
<v Speaker 0>So we can say from

00:17:48.425 --> 00:17:49.305
<v Speaker 0>bucket

00:17:50.265 --> 00:17:51.465
<v Speaker 0>and InfluxDB

00:17:51.465 --> 00:17:52.985
<v Speaker 0>UI does use

00:17:53.305 --> 00:17:55.625
<v Speaker 0>language server protocol and Monaco with the Versus

00:17:55.625 --> 00:17:57.465
<v Speaker 0>Code Editor. So you will get relatively good

00:17:57.465 --> 00:17:58.585
<v Speaker 0>autocomplete.

00:18:00.585 --> 00:18:01.625
<v Speaker 0>Workshop

00:18:02.810 --> 00:18:03.770
<v Speaker 0>range

00:18:05.850 --> 00:18:08.010
<v Speaker 0>star dash five ms.

00:18:09.050 --> 00:18:11.370
<v Speaker 0>That's exercise one, really simple. In fact, we

00:18:11.370 --> 00:18:12.250
<v Speaker 0>already had a

00:18:12.810 --> 00:18:15.050
<v Speaker 0>variation of this right at the start as

00:18:15.050 --> 00:18:16.250
<v Speaker 0>we were copying and pasting.

00:18:17.044 --> 00:18:17.684
<v Speaker 0>So

00:18:18.404 --> 00:18:20.164
<v Speaker 0>really, you just wanna be familiar

00:18:20.965 --> 00:18:22.404
<v Speaker 0>with the pipe operator,

00:18:22.485 --> 00:18:24.485
<v Speaker 0>know that it's two characters instead of just

00:18:24.485 --> 00:18:26.005
<v Speaker 0>one that you may be familiar with from,

00:18:26.005 --> 00:18:27.205
<v Speaker 0>you know, shells,

00:18:27.365 --> 00:18:29.125
<v Speaker 0>you know, with bash scripting, you know. So

00:18:29.125 --> 00:18:30.244
<v Speaker 0>we do have the

00:18:30.565 --> 00:18:31.845
<v Speaker 0>the greater than same.

00:18:32.460 --> 00:18:34.780
<v Speaker 0>And it's important to remember, and hopefully you

00:18:34.780 --> 00:18:36.620
<v Speaker 0>get comfortable with the named parameters.

00:18:36.620 --> 00:18:38.140
<v Speaker 0>A lot of people trip up with that.

00:18:38.140 --> 00:18:40.059
<v Speaker 0>And then the duration laterals,

00:18:40.380 --> 00:18:41.820
<v Speaker 0>and what a lot of people do at

00:18:41.820 --> 00:18:43.820
<v Speaker 0>the start as they're writing their first tax

00:18:43.820 --> 00:18:44.539
<v Speaker 0>queries,

00:18:45.659 --> 00:18:48.380
<v Speaker 0>would be to forget the minus

00:18:48.475 --> 00:18:49.514
<v Speaker 0>and just

00:18:51.515 --> 00:18:54.315
<v Speaker 0>remember that you need to as a duration.

00:18:54.315 --> 00:18:55.835
<v Speaker 0>Right? So you have to go back five

00:18:55.835 --> 00:18:57.835
<v Speaker 0>minutes to get the actual time that you

00:18:57.835 --> 00:18:58.715
<v Speaker 0>want to query.

00:19:00.075 --> 00:19:01.515
<v Speaker 0>So we'll take a look at one more

00:19:01.515 --> 00:19:03.350
<v Speaker 0>thing from here.

00:19:04.790 --> 00:19:06.470
<v Speaker 0>I just opened a new tab.

00:19:09.110 --> 00:19:10.950
<v Speaker 0>And if we run Influx,

00:19:12.710 --> 00:19:14.870
<v Speaker 0>we can see there are a bunch of

00:19:15.190 --> 00:19:16.790
<v Speaker 0>Oh, what is going on with this terminal?

00:19:18.155 --> 00:19:19.835
<v Speaker 0>I've had problems with iTerm for a while

00:19:19.835 --> 00:19:20.874
<v Speaker 0>now, to be fair.

00:19:21.835 --> 00:19:23.195
<v Speaker 0>Okay.

00:19:25.275 --> 00:19:28.554
<v Speaker 0>So, we can execute flux queries

00:19:28.715 --> 00:19:30.315
<v Speaker 0>on the command line.

00:19:42.110 --> 00:19:44.190
<v Speaker 0>Guess all of my influx commands are gonna

00:19:44.190 --> 00:19:45.950
<v Speaker 0>be acting a little bit funny.

00:20:01.740 --> 00:20:03.820
<v Speaker 0>Alright. Why don't I open a new tab?

00:20:05.580 --> 00:20:07.020
<v Speaker 0>Let's just take a look at the help

00:20:07.020 --> 00:20:07.740
<v Speaker 0>on this.

00:20:08.860 --> 00:20:11.020
<v Speaker 0>So we can pass in a query that

00:20:11.020 --> 00:20:12.139
<v Speaker 0>we wish to run.

00:20:12.300 --> 00:20:14.380
<v Speaker 0>So we could say from

00:20:15.660 --> 00:20:16.620
<v Speaker 0>bucket

00:20:17.515 --> 00:20:18.634
<v Speaker 0>workshop

00:20:21.915 --> 00:20:22.955
<v Speaker 0>range

00:20:23.035 --> 00:20:23.914
<v Speaker 0>start

00:20:24.315 --> 00:20:25.355
<v Speaker 0>five ms.

00:20:27.595 --> 00:20:29.435
<v Speaker 0>Oh, and yeah, we will need a few

00:20:29.435 --> 00:20:32.470
<v Speaker 0>extra parameters as well. So when we do

00:20:32.470 --> 00:20:34.230
<v Speaker 0>this on the command line, we will need

00:20:34.230 --> 00:20:35.429
<v Speaker 0>to provide

00:20:36.390 --> 00:20:38.629
<v Speaker 0>our --org,

00:20:40.790 --> 00:20:42.230
<v Speaker 0>which is Rawkode

00:20:42.630 --> 00:20:43.110
<v Speaker 0>Academy.

00:20:44.225 --> 00:20:47.105
<v Speaker 0>And we need to export our token again.

00:20:47.905 --> 00:20:50.304
<v Speaker 0>And it should still be in my history.

00:20:52.465 --> 00:20:54.945
<v Speaker 0>That's a very old token then apparently. Let's

00:20:54.945 --> 00:20:55.825
<v Speaker 0>grab it from,

00:20:57.680 --> 00:20:59.679
<v Speaker 0>yeah, let's grab it from here again.

00:21:06.240 --> 00:21:07.120
<v Speaker 0>Export

00:21:07.120 --> 00:21:09.120
<v Speaker 0>info token.

00:21:11.040 --> 00:21:11.840
<v Speaker 0>Not the same.

00:21:15.255 --> 00:21:17.174
<v Speaker 0>Oh, wait. It's invalid expression.

00:21:17.735 --> 00:21:20.374
<v Speaker 0>Completion field, not authorization.

00:21:21.495 --> 00:21:21.815
<v Speaker 0>From

00:21:24.375 --> 00:21:27.015
<v Speaker 0>I can't remember actually if Flux cares about

00:21:27.015 --> 00:21:27.575
<v Speaker 0>the quote.

00:21:29.150 --> 00:21:30.269
<v Speaker 0>Let's do this.

00:21:33.070 --> 00:21:33.710
<v Speaker 0>From

00:21:33.950 --> 00:21:36.590
<v Speaker 0>bucket, pipe forward, range star,

00:21:37.150 --> 00:21:37.789
<v Speaker 0>go.

00:21:38.990 --> 00:21:41.230
<v Speaker 0>Oh, and fix the end one. There we

00:21:41.230 --> 00:21:41.390
<v Speaker 0>go.

00:21:42.615 --> 00:21:44.934
<v Speaker 0>So quite a lot of data there.

00:21:45.255 --> 00:21:46.934
<v Speaker 0>Yeah. An awful lot of data.

00:21:50.135 --> 00:21:50.855
<v Speaker 0>And

00:21:55.175 --> 00:21:56.455
<v Speaker 0>have to remove the Rackle.

00:22:07.000 --> 00:22:07.960
<v Speaker 0>Oh, that's a shame.

00:22:10.034 --> 00:22:12.355
<v Speaker 0>Oh, well, you could compile

00:22:12.355 --> 00:22:13.634
<v Speaker 0>Flux from

00:22:14.274 --> 00:22:16.914
<v Speaker 0>source and there is a REPL

00:22:17.154 --> 00:22:19.554
<v Speaker 0>that I think has been removed from the

00:22:19.554 --> 00:22:20.434
<v Speaker 0>InfluxDLA.

00:22:21.800 --> 00:22:23.960
<v Speaker 0>That's unfortunate. We won't be using that today.

00:22:24.920 --> 00:22:26.679
<v Speaker 0>This one is definitely broken.

00:22:27.800 --> 00:22:29.320
<v Speaker 0>That one's definitely broken.

00:22:29.640 --> 00:22:31.800
<v Speaker 0>Those two are happy. Alright, perfect.

00:22:37.945 --> 00:22:38.664
<v Speaker 0>So

00:22:40.665 --> 00:22:42.184
<v Speaker 0>we've seen the CLI.

00:22:42.825 --> 00:22:44.265
<v Speaker 0>We've seen the UI

00:22:45.145 --> 00:22:46.105
<v Speaker 0>one more,

00:22:47.640 --> 00:22:51.000
<v Speaker 0>and there is a Versus Code extension.

00:23:00.200 --> 00:23:01.720
<v Speaker 0>So, if we jump over here,

00:23:04.355 --> 00:23:05.634
<v Speaker 0>there's your flux.

00:23:07.315 --> 00:23:09.554
<v Speaker 0>You'll see that there is this

00:23:09.794 --> 00:23:12.355
<v Speaker 0>Versus code extension from InfluxData.

00:23:16.210 --> 00:23:18.129
<v Speaker 0>You can add connections,

00:23:20.690 --> 00:23:21.570
<v Speaker 0>local

00:23:23.250 --> 00:23:24.209
<v Speaker 0>HTTP

00:23:25.169 --> 00:23:26.369
<v Speaker 0>local host.

00:23:26.850 --> 00:23:28.289
<v Speaker 0>I've got my token

00:23:28.370 --> 00:23:29.889
<v Speaker 0>and my organization

00:23:30.370 --> 00:23:30.850
<v Speaker 0>name.

00:23:32.534 --> 00:23:34.614
<v Speaker 0>And you can see we get a success

00:23:34.695 --> 00:23:37.335
<v Speaker 0>down here when we test that connection.

00:23:39.255 --> 00:23:40.534
<v Speaker 0>So let's save this.

00:23:44.070 --> 00:23:45.990
<v Speaker 0>And that means that you can

00:23:46.230 --> 00:23:46.950
<v Speaker 0>run

00:23:47.110 --> 00:23:47.990
<v Speaker 0>flux

00:23:48.070 --> 00:23:48.789
<v Speaker 0>scripts.

00:23:51.830 --> 00:23:54.070
<v Speaker 0>So we can say run query.

00:23:54.630 --> 00:23:56.630
<v Speaker 0>We need a flux fail. Right.

00:24:01.475 --> 00:24:03.155
<v Speaker 0>Query Flux

00:24:04.035 --> 00:24:04.835
<v Speaker 0>from,

00:24:04.915 --> 00:24:07.315
<v Speaker 0>and we get awesome all complete from the

00:24:07.315 --> 00:24:08.195
<v Speaker 0>IDE.

00:24:08.195 --> 00:24:11.155
<v Speaker 0>Again, using the language server, which the team

00:24:11.155 --> 00:24:11.955
<v Speaker 0>have been working on.

00:24:21.190 --> 00:24:21.989
<v Speaker 0>Academy

00:24:25.190 --> 00:24:29.990
<v Speaker 0>range

00:24:26.924 --> 00:24:29.004
<v Speaker 0>star dash five m.

00:24:30.125 --> 00:24:31.404
<v Speaker 0>Yeah. Let's just run that.

00:24:40.320 --> 00:24:41.200
<v Speaker 0>Rawkode

00:24:41.200 --> 00:24:42.320
<v Speaker 0>Academy. Oh, workshop.

00:24:45.519 --> 00:24:46.159
<v Speaker 0>Work

00:24:46.799 --> 00:24:48.879
<v Speaker 0>show the organization

00:24:48.960 --> 00:24:50.159
<v Speaker 0>as the academy.

00:24:51.840 --> 00:24:52.960
<v Speaker 0>So we can run this query.

00:25:01.034 --> 00:25:03.595
<v Speaker 0>I think it's just loading all the data.

00:25:13.760 --> 00:25:14.639
<v Speaker 0>And there.

00:25:16.960 --> 00:25:18.480
<v Speaker 0>Really, I should have narrowed down that query

00:25:18.480 --> 00:25:19.120
<v Speaker 0>before running.

00:25:24.175 --> 00:25:27.295
<v Speaker 0>Alright. Let's do that. Let's just grab

00:25:27.935 --> 00:25:28.895
<v Speaker 0>ten seconds.

00:25:34.260 --> 00:25:35.220
<v Speaker 0>There we go.

00:25:37.380 --> 00:25:39.220
<v Speaker 0>And now we can query and look at

00:25:39.220 --> 00:25:41.140
<v Speaker 0>this data in our Versus Code. So it's

00:25:41.140 --> 00:25:42.980
<v Speaker 0>entirely up to you. It's still quite a

00:25:42.980 --> 00:25:44.260
<v Speaker 0>lot of data for ten seconds. Maybe I've

00:25:44.260 --> 00:25:45.539
<v Speaker 0>got my enter full too quick.

00:25:46.020 --> 00:25:48.820
<v Speaker 0>So it's up to you. I like

00:25:48.465 --> 00:25:49.184
<v Speaker 0>using

00:25:49.905 --> 00:25:51.664
<v Speaker 0>this for the auto complete

00:25:52.945 --> 00:25:55.424
<v Speaker 0>and functional complete and help text and other

00:25:55.424 --> 00:25:55.984
<v Speaker 0>stuff,

00:25:56.785 --> 00:25:59.585
<v Speaker 0>but the web UI has also equally as

00:25:59.585 --> 00:25:59.825
<v Speaker 0>good.

00:26:00.559 --> 00:26:02.160
<v Speaker 0>And then the CLI is there if you

00:26:02.160 --> 00:26:03.679
<v Speaker 0>wanna be able to automate or build scripts

00:26:03.679 --> 00:26:05.679
<v Speaker 0>or into any of this stuff as well.

00:26:06.000 --> 00:26:06.639
<v Speaker 0>Okay.

00:26:07.040 --> 00:26:09.840
<v Speaker 0>So that was exercise 1.1.

00:26:10.240 --> 00:26:12.400
<v Speaker 0>Now we want to fetch all metrics for

00:26:12.400 --> 00:26:13.440
<v Speaker 0>the last hour,

00:26:13.679 --> 00:26:15.200
<v Speaker 0>excluding the last five minutes.

00:26:16.245 --> 00:26:18.805
<v Speaker 0>So really, we're just coming back here in

00:26:18.805 --> 00:26:21.284
<v Speaker 0>one hour, only we're adding a stop

00:26:22.005 --> 00:26:23.845
<v Speaker 0>because we don't want the last five minutes

00:26:23.845 --> 00:26:24.645
<v Speaker 0>of data.

00:26:25.685 --> 00:26:27.525
<v Speaker 0>That's gonna be a large query as well,

00:26:27.525 --> 00:26:29.045
<v Speaker 0>but the UI should be able to handle

00:26:29.045 --> 00:26:29.845
<v Speaker 0>it. He says,

00:26:30.630 --> 00:26:31.429
<v Speaker 0>hopefully.

00:26:33.190 --> 00:26:34.630
<v Speaker 0>And then the last one

00:26:34.950 --> 00:26:37.029
<v Speaker 0>is we want to fetch all metrics

00:26:37.270 --> 00:26:39.910
<v Speaker 0>for the last three hours returned as multiple

00:26:39.910 --> 00:26:40.870
<v Speaker 0>datasets.

00:26:41.590 --> 00:26:42.230
<v Speaker 0>How are they?

00:26:45.195 --> 00:26:46.715
<v Speaker 0>Yeah, there we go. And

00:26:47.755 --> 00:26:49.195
<v Speaker 0>there's just one thing I really want you

00:26:49.195 --> 00:26:51.034
<v Speaker 0>to take away from this last

00:26:51.435 --> 00:26:52.315
<v Speaker 0>task

00:26:52.715 --> 00:26:54.635
<v Speaker 0>is that we want all metrics for the

00:26:54.635 --> 00:26:55.755
<v Speaker 0>last three hours

00:26:58.020 --> 00:27:00.179
<v Speaker 0>hourly. So what does that mean? Well,

00:27:01.860 --> 00:27:02.899
<v Speaker 0>we could do

00:27:03.220 --> 00:27:04.259
<v Speaker 0>three hours

00:27:05.700 --> 00:27:08.100
<v Speaker 0>dash two hours

00:27:10.085 --> 00:27:12.085
<v Speaker 0>and just copy and paste that where we

00:27:12.085 --> 00:27:14.245
<v Speaker 0>moved down to two hours and one hour,

00:27:14.485 --> 00:27:16.325
<v Speaker 0>and we moved down to one hour

00:27:17.605 --> 00:27:18.885
<v Speaker 0>without a stop.

00:27:19.925 --> 00:27:22.085
<v Speaker 0>And we can yield each of these.

00:27:23.125 --> 00:27:23.445
<v Speaker 0>Name,

00:27:25.150 --> 00:27:26.110
<v Speaker 0>one hour,

00:27:29.390 --> 00:27:31.630
<v Speaker 0>and we'll call this two hour

00:27:34.430 --> 00:27:35.630
<v Speaker 0>and three hour.

00:27:37.230 --> 00:27:38.670
<v Speaker 0>And that will work fine.

00:27:39.235 --> 00:27:41.714
<v Speaker 0>And something else you can actually do is

00:27:43.955 --> 00:27:45.634
<v Speaker 0>assign the output

00:27:45.794 --> 00:27:47.634
<v Speaker 0>and then reuse it.

00:27:48.115 --> 00:27:51.315
<v Speaker 0>It's not very useful in this case because

00:27:51.315 --> 00:27:53.475
<v Speaker 0>it's just a from statement. This time being

00:27:53.475 --> 00:27:54.835
<v Speaker 0>reused across multiple

00:27:55.370 --> 00:27:56.250
<v Speaker 0>ranges.

00:27:56.410 --> 00:27:59.370
<v Speaker 0>But as your queries become more sophisticated and

00:27:59.370 --> 00:28:01.450
<v Speaker 0>you're doing a lot more, you may have

00:28:01.450 --> 00:28:03.930
<v Speaker 0>a set of from range and filters that

00:28:03.930 --> 00:28:05.850
<v Speaker 0>you want to be able to reuse across

00:28:05.850 --> 00:28:07.210
<v Speaker 0>multiple yields

00:28:07.210 --> 00:28:09.735
<v Speaker 0>within a single Flux script, and that is

00:28:09.735 --> 00:28:10.774
<v Speaker 0>entirely possible.

00:28:11.255 --> 00:28:11.815
<v Speaker 0>And

00:28:12.135 --> 00:28:14.295
<v Speaker 0>we'll take a look at just how that

00:28:14.295 --> 00:28:16.775
<v Speaker 0>works next, because we're about to take a

00:28:16.775 --> 00:28:17.815
<v Speaker 0>look at

00:28:17.895 --> 00:28:19.975
<v Speaker 0>filtering windows and aggregations.

00:28:22.000 --> 00:28:22.720
<v Speaker 0>Cool.

00:28:22.880 --> 00:28:24.559
<v Speaker 0>Okay. So hopefully,

00:28:25.040 --> 00:28:27.200
<v Speaker 0>you know, that first thirty minutes

00:28:27.360 --> 00:28:28.639
<v Speaker 0>of this workshop

00:28:28.960 --> 00:28:31.600
<v Speaker 0>just gets you acquainted with right in flux.

00:28:31.679 --> 00:28:33.920
<v Speaker 0>The different interfaces that you can use for

00:28:33.920 --> 00:28:35.600
<v Speaker 0>submitting your queries and working with the data.

00:28:36.805 --> 00:28:38.805
<v Speaker 0>The UI is a great place to start.

00:28:38.805 --> 00:28:40.245
<v Speaker 0>Everyone should start there first

00:28:41.845 --> 00:28:43.605
<v Speaker 0>and then move in to

00:28:43.845 --> 00:28:46.325
<v Speaker 0>the CLI Versus Code, whatever, as you need.

00:28:46.885 --> 00:28:49.125
<v Speaker 0>The Versus Code option becomes much more appealing

00:28:49.540 --> 00:28:51.700
<v Speaker 0>as we start to play with Packager, which

00:28:51.700 --> 00:28:54.980
<v Speaker 0>is a manifest format for applying InfluxDB configurations

00:28:54.980 --> 00:28:56.260
<v Speaker 0>to InfluxDB.

00:28:56.260 --> 00:28:57.779
<v Speaker 0>Kinda like KubeControl

00:28:58.420 --> 00:29:00.500
<v Speaker 0>where, you know, YAML manifests, we can do

00:29:00.500 --> 00:29:02.500
<v Speaker 0>all of that within InfluxDB to manage everything

00:29:02.500 --> 00:29:03.780
<v Speaker 0>from a GitHub pattern.

00:29:04.635 --> 00:29:06.075
<v Speaker 0>So it's actually quite nice to be able

00:29:06.075 --> 00:29:07.595
<v Speaker 0>to work with that in Versus Code and

00:29:07.595 --> 00:29:09.435
<v Speaker 0>have all your queries saved on local Flux

00:29:09.435 --> 00:29:11.595
<v Speaker 0>scripts. So and we'll be doing more in

00:29:11.595 --> 00:29:12.635
<v Speaker 0>there. Okay.

00:29:14.475 --> 00:29:16.155
<v Speaker 0>So all of our creating has been extremely

00:29:16.155 --> 00:29:18.269
<v Speaker 0>superficial thus far, and that's because we aren't

00:29:18.269 --> 00:29:20.830
<v Speaker 0>doing anything useful. We're just pulling out raw

00:29:20.830 --> 00:29:23.549
<v Speaker 0>data and actually seeing that with the, you

00:29:23.549 --> 00:29:25.470
<v Speaker 0>know, thirty minutes of data that we're already

00:29:25.470 --> 00:29:28.350
<v Speaker 0>collecting and ranging over even a few minutes

00:29:28.350 --> 00:29:30.190
<v Speaker 0>of that can be quite intensive.

00:29:30.429 --> 00:29:32.110
<v Speaker 0>And it's just because we're collecting

00:29:32.775 --> 00:29:33.815
<v Speaker 0>relatively

00:29:33.895 --> 00:29:36.135
<v Speaker 0>a lot of metrics for this little MacBook

00:29:36.135 --> 00:29:38.055
<v Speaker 0>to handle. So we wanna be able to

00:29:38.055 --> 00:29:40.535
<v Speaker 0>make sure that we are using filtering and

00:29:40.535 --> 00:29:43.415
<v Speaker 0>using filtering effectively and efficiently when we query

00:29:43.415 --> 00:29:44.455
<v Speaker 0>InfluxDB,

00:29:44.535 --> 00:29:47.570
<v Speaker 0>the leveraging things that well, the actual tensor

00:29:47.570 --> 00:29:48.930
<v Speaker 0>did risk itself to help us with the

00:29:48.930 --> 00:29:49.970
<v Speaker 0>felt string so we don't have to do

00:29:49.970 --> 00:29:51.970
<v Speaker 0>all memory. And we talk about that in

00:29:51.970 --> 00:29:54.210
<v Speaker 0>this next this next section.

00:29:55.970 --> 00:29:57.650
<v Speaker 0>Alrighty.

00:29:57.890 --> 00:29:58.610
<v Speaker 0>So

00:29:59.835 --> 00:30:01.355
<v Speaker 0>what's important here

00:30:01.675 --> 00:30:02.475
<v Speaker 0>would be

00:30:03.755 --> 00:30:06.715
<v Speaker 0>this, right? So I'll read this verbatim and

00:30:06.715 --> 00:30:08.235
<v Speaker 0>talk about it.

00:30:10.555 --> 00:30:13.035
<v Speaker 0>The filter function can filter data on any

00:30:13.035 --> 00:30:13.995
<v Speaker 0>field and a dataset.

00:30:14.570 --> 00:30:16.170
<v Speaker 0>This means that you need to be particularly

00:30:16.170 --> 00:30:18.890
<v Speaker 0>careful when adding filters and assure that you

00:30:18.890 --> 00:30:20.970
<v Speaker 0>understand when filtering on a tag or a

00:30:20.970 --> 00:30:21.529
<v Speaker 0>field.

00:30:22.170 --> 00:30:23.770
<v Speaker 0>If you think back to the lecture we

00:30:23.770 --> 00:30:25.290
<v Speaker 0>had at the start of this course, lecture

00:30:25.290 --> 00:30:26.970
<v Speaker 0>one, an introduction to time series,

00:30:27.544 --> 00:30:30.184
<v Speaker 0>I talked about how tags are indexed within

00:30:30.184 --> 00:30:32.424
<v Speaker 0>the time series database and fields are not.

00:30:32.825 --> 00:30:35.225
<v Speaker 0>Now because fields are not indexed, if we

00:30:35.225 --> 00:30:37.465
<v Speaker 0>used a filter function to filter on a

00:30:37.465 --> 00:30:38.104
<v Speaker 0>field,

00:30:38.585 --> 00:30:40.585
<v Speaker 0>what actually happens is all of that is

00:30:40.585 --> 00:30:44.060
<v Speaker 0>loaded into memory and essentially looked over and

00:30:44.060 --> 00:30:45.420
<v Speaker 0>filtered as required.

00:30:46.140 --> 00:30:46.860
<v Speaker 0>However,

00:30:47.180 --> 00:30:49.260
<v Speaker 0>if we use filters against the tag values,

00:30:49.260 --> 00:30:51.340
<v Speaker 0>which are indexed in the time series database,

00:30:51.340 --> 00:30:52.620
<v Speaker 0>we can actually just

00:30:52.940 --> 00:30:55.180
<v Speaker 0>push most of that down to the TSDB

00:30:55.180 --> 00:30:56.620
<v Speaker 0>and say, don't give me this data or

00:30:56.620 --> 00:30:57.820
<v Speaker 0>only give me this data,

00:30:58.805 --> 00:30:59.925
<v Speaker 0>We're substantially

00:30:59.925 --> 00:31:02.885
<v Speaker 0>more efficient on memory and faster on CPU.

00:31:03.285 --> 00:31:05.925
<v Speaker 0>So make sure that you're constructing your queries

00:31:05.925 --> 00:31:06.565
<v Speaker 0>appropriately.

00:31:13.890 --> 00:31:15.490
<v Speaker 0>The filter function,

00:31:16.610 --> 00:31:18.130
<v Speaker 0>and we'll do this by here. The filter

00:31:18.130 --> 00:31:20.370
<v Speaker 0>function takes a parameter called FN.

00:31:20.370 --> 00:31:22.290
<v Speaker 0>FN is not a keyword. A lot of

00:31:22.290 --> 00:31:23.810
<v Speaker 0>people make this mistake when they first start

00:31:23.810 --> 00:31:27.054
<v Speaker 0>adopting Flux. Fn is just the named parameter

00:31:27.215 --> 00:31:29.535
<v Speaker 0>and it takes an anonymous function and that

00:31:29.535 --> 00:31:31.374
<v Speaker 0>anonymous function should

00:31:31.615 --> 00:31:34.415
<v Speaker 0>return a billion or must return

00:31:34.415 --> 00:31:36.815
<v Speaker 0>a billion value of true or false. If

00:31:36.815 --> 00:31:38.575
<v Speaker 0>it returns true, the data will be kept

00:31:38.575 --> 00:31:40.380
<v Speaker 0>in the dataset and if it's returned false,

00:31:40.380 --> 00:31:41.740
<v Speaker 0>the data will be omitted.

00:31:43.100 --> 00:31:45.179
<v Speaker 0>Now you've already seen me do this now,

00:31:45.260 --> 00:31:47.180
<v Speaker 0>but using the show data toggle is the

00:31:47.180 --> 00:31:49.340
<v Speaker 0>fastest way to really understand your data as

00:31:49.340 --> 00:31:51.100
<v Speaker 0>you start creating an Influx.

00:31:51.340 --> 00:31:51.900
<v Speaker 0>So,

00:31:53.500 --> 00:31:54.380
<v Speaker 0>we can,

00:31:56.195 --> 00:31:57.875
<v Speaker 0>we don't need that right now.

00:31:58.915 --> 00:32:00.755
<v Speaker 0>Definitely don't want an error.

00:32:00.915 --> 00:32:02.755
<v Speaker 0>Well, there isn't an error, but

00:32:03.395 --> 00:32:05.315
<v Speaker 0>let's just get a little bit of data.

00:32:06.675 --> 00:32:08.275
<v Speaker 0>We can remove the yield and use the

00:32:08.275 --> 00:32:08.675
<v Speaker 0>implicit.

00:32:12.190 --> 00:32:12.989
<v Speaker 0>And

00:32:16.030 --> 00:32:17.309
<v Speaker 0>I won't be able to choose that to

00:32:17.309 --> 00:32:18.669
<v Speaker 0>a minute. So you can kind of see

00:32:18.669 --> 00:32:20.669
<v Speaker 0>this Oh, no, you can't because of my

00:32:20.669 --> 00:32:21.309
<v Speaker 0>face.

00:32:22.270 --> 00:32:23.470
<v Speaker 0>There's

00:32:23.470 --> 00:32:25.870
<v Speaker 0>a little tiny bit of data here.

00:32:28.085 --> 00:32:28.804
<v Speaker 0>So

00:32:29.845 --> 00:32:32.084
<v Speaker 0>and that's just because we're trying to show,

00:32:34.005 --> 00:32:35.284
<v Speaker 0>you know, we've got that set to five

00:32:35.284 --> 00:32:36.885
<v Speaker 0>minutes, but we're only pulling back one minute.

00:32:43.380 --> 00:32:46.260
<v Speaker 0>There's not a lot of information here. Right?

00:32:46.260 --> 00:32:48.980
<v Speaker 0>Like, if I wanted to start filtering on

00:32:48.980 --> 00:32:51.220
<v Speaker 0>my data that lives in the workshop bucket,

00:32:52.144 --> 00:32:53.424
<v Speaker 0>I don't really know how to do that

00:32:53.424 --> 00:32:55.825
<v Speaker 0>without having substantial knowledge into how it works.

00:32:55.825 --> 00:32:57.904
<v Speaker 0>So you can use the show raw data

00:32:57.904 --> 00:32:58.624
<v Speaker 0>button,

00:32:59.105 --> 00:33:01.504
<v Speaker 0>and we'll kind of talk about how this

00:33:02.065 --> 00:33:05.105
<v Speaker 0>how to navigate this big blob of text

00:33:05.105 --> 00:33:07.570
<v Speaker 0>here. I'll bring my face back in, but

00:33:07.570 --> 00:33:10.610
<v Speaker 0>if it gets in the way, I'll

00:33:10.610 --> 00:33:11.409
<v Speaker 0>remove it.

00:33:12.290 --> 00:33:14.850
<v Speaker 0>So this raw data view that we have

00:33:14.850 --> 00:33:18.610
<v Speaker 0>in the UI is a annotated CSV

00:33:18.610 --> 00:33:19.090
<v Speaker 0>almost.

00:33:21.015 --> 00:33:24.215
<v Speaker 0>Now, what we have here is that

00:33:24.375 --> 00:33:26.935
<v Speaker 0>information on the data types for each of

00:33:26.935 --> 00:33:28.934
<v Speaker 0>the columns in CSV,

00:33:30.295 --> 00:33:32.775
<v Speaker 0>and we have some group key information, which

00:33:32.775 --> 00:33:34.215
<v Speaker 0>we'll be talking about as we talk about

00:33:34.215 --> 00:33:35.255
<v Speaker 0>groups moving forward.

00:33:35.980 --> 00:33:36.940
<v Speaker 0>We

00:33:36.940 --> 00:33:38.380
<v Speaker 0>have a result,

00:33:38.380 --> 00:33:39.259
<v Speaker 0>which is our

00:33:39.500 --> 00:33:40.299
<v Speaker 0>data.

00:33:41.019 --> 00:33:42.299
<v Speaker 0>We have tables.

00:33:42.860 --> 00:33:43.979
<v Speaker 0>We have value.

00:33:44.380 --> 00:33:46.619
<v Speaker 0>We have the start and stop period.

00:33:47.260 --> 00:33:48.860
<v Speaker 0>So this will tell us about a range

00:33:48.860 --> 00:33:51.155
<v Speaker 0>within the query. We have the time that

00:33:51.155 --> 00:33:53.475
<v Speaker 0>this point value was stored.

00:33:55.075 --> 00:33:57.075
<v Speaker 0>Now, all of this is stored in a

00:33:57.075 --> 00:33:58.355
<v Speaker 0>columnar fashion

00:33:58.355 --> 00:33:59.635
<v Speaker 0>and the TSDB,

00:33:59.635 --> 00:34:01.475
<v Speaker 0>which means all of the fields that we

00:34:01.475 --> 00:34:03.795
<v Speaker 0>store, we can actually, we'll need to pivot

00:34:03.795 --> 00:34:06.499
<v Speaker 0>them to see them as robust data. Again,

00:34:06.500 --> 00:34:08.500
<v Speaker 0>stuff we'll cover in subsequent videos, don't worry

00:34:08.500 --> 00:34:09.619
<v Speaker 0>about it if you don't understand what I

00:34:09.619 --> 00:34:11.060
<v Speaker 0>mean by pivot the data.

00:34:11.460 --> 00:34:13.219
<v Speaker 0>But because this is columnar, we have a

00:34:13.219 --> 00:34:15.460
<v Speaker 0>fields code underscore field, which has a value,

00:34:15.460 --> 00:34:16.980
<v Speaker 0>which tells us which field

00:34:17.139 --> 00:34:18.179
<v Speaker 0>we're creating against.

00:34:18.935 --> 00:34:20.215
<v Speaker 0>And we'll take a look at that as

00:34:20.215 --> 00:34:21.335
<v Speaker 0>we start to build up some of these

00:34:21.335 --> 00:34:22.695
<v Speaker 0>filter queries as well.

00:34:23.255 --> 00:34:25.335
<v Speaker 0>Fields belong to measurements. So this is our

00:34:25.335 --> 00:34:27.415
<v Speaker 0>CPU measurement, will also be a memory one,

00:34:27.415 --> 00:34:29.255
<v Speaker 0>a system one, a processes one, etcetera, down

00:34:29.255 --> 00:34:31.094
<v Speaker 0>here. And then we have some tags.

00:34:31.640 --> 00:34:33.719
<v Speaker 0>So this is a CPU zero that tells

00:34:33.719 --> 00:34:35.960
<v Speaker 0>us, you know, this is a 16 core

00:34:35.960 --> 00:34:38.280
<v Speaker 0>machines. We're gonna have CPU zero to 15,

00:34:38.440 --> 00:34:39.640
<v Speaker 0>and then the host of the data was

00:34:39.640 --> 00:34:40.360
<v Speaker 0>collected.

00:34:40.680 --> 00:34:42.520
<v Speaker 0>And this is just based on what telegraph

00:34:42.520 --> 00:34:43.880
<v Speaker 0>rates to our time series database.

00:34:44.465 --> 00:34:47.505
<v Speaker 0>But using the show raw data toggle is

00:34:47.505 --> 00:34:49.265
<v Speaker 0>the best way to understand how to build

00:34:49.265 --> 00:34:50.545
<v Speaker 0>and construct your query.

00:34:50.705 --> 00:34:52.465
<v Speaker 0>Unless you want to use a query builder,

00:34:52.545 --> 00:34:54.065
<v Speaker 0>of course, you can do that too.

00:34:54.864 --> 00:34:56.385
<v Speaker 0>But what I would see here

00:34:57.000 --> 00:34:59.560
<v Speaker 0>is that I could filter on measurement equals

00:34:59.560 --> 00:35:02.360
<v Speaker 0>CPU and field equals usage guessed

00:35:02.520 --> 00:35:04.840
<v Speaker 0>to really quickly break down the status of

00:35:04.840 --> 00:35:06.200
<v Speaker 0>just one or two things that I wanna

00:35:06.200 --> 00:35:06.840
<v Speaker 0>see.

00:35:08.760 --> 00:35:09.960
<v Speaker 0>So let's copy

00:35:10.440 --> 00:35:11.560
<v Speaker 0>this query

00:35:11.640 --> 00:35:12.040
<v Speaker 0>here.

00:35:15.105 --> 00:35:17.425
<v Speaker 0>So this is a from bucket workshop, range

00:35:17.425 --> 00:35:19.905
<v Speaker 0>of fifteen minutes, and we only care about

00:35:19.905 --> 00:35:21.265
<v Speaker 0>the CPU measurement.

00:35:21.745 --> 00:35:23.425
<v Speaker 0>That means we're saying goodbye

00:35:23.425 --> 00:35:24.305
<v Speaker 0>to

00:35:27.359 --> 00:35:28.160
<v Speaker 0>disk,

00:35:28.880 --> 00:35:31.040
<v Speaker 0>disk IO, memory, network,

00:35:34.480 --> 00:35:36.880
<v Speaker 0>processing system and swap. There we go. That

00:35:36.880 --> 00:35:37.680
<v Speaker 0>was a quick tour.

00:35:38.925 --> 00:35:40.285
<v Speaker 0>We run this.

00:35:43.725 --> 00:35:46.365
<v Speaker 0>And I know fifteen minutes seems seems

00:35:46.365 --> 00:35:48.525
<v Speaker 0>like a short window, but with that two

00:35:48.525 --> 00:35:49.645
<v Speaker 0>second resolution,

00:35:49.805 --> 00:35:51.325
<v Speaker 0>that has actually quite a lot of points.

00:35:51.650 --> 00:35:55.090
<v Speaker 0>So we're getting 30 points per minute times

00:35:55.090 --> 00:35:55.970
<v Speaker 0>15

00:35:56.450 --> 00:35:58.290
<v Speaker 0>across 16 cores.

00:35:58.530 --> 00:36:00.290
<v Speaker 0>Very quickly adds up. And you can see

00:36:00.290 --> 00:36:02.770
<v Speaker 0>just by scrolling on this, you know, we're

00:36:04.464 --> 00:36:06.145
<v Speaker 0>we've got at least a few hundred

00:36:07.585 --> 00:36:09.505
<v Speaker 0>tables going on there. So,

00:36:11.744 --> 00:36:13.025
<v Speaker 0>yeah, that's these filters.

00:36:13.825 --> 00:36:14.465
<v Speaker 0>Now,

00:36:14.705 --> 00:36:15.905
<v Speaker 0>you can add

00:36:16.945 --> 00:36:19.185
<v Speaker 0>many of these filters

00:36:19.630 --> 00:36:20.750
<v Speaker 0>as you like.

00:36:21.470 --> 00:36:23.470
<v Speaker 0>We don't wanna fill our measurement again. Let's

00:36:23.470 --> 00:36:25.070
<v Speaker 0>say we just want a single field.

00:36:25.950 --> 00:36:27.470
<v Speaker 0>We can do usage

00:36:27.630 --> 00:36:28.590
<v Speaker 0>guest.

00:36:31.390 --> 00:36:33.150
<v Speaker 0>That should be a pretty quick query.

00:36:35.505 --> 00:36:37.425
<v Speaker 0>And now we only get a single field

00:36:37.425 --> 00:36:39.185
<v Speaker 0>for each CPU. So we're still got the

00:36:39.185 --> 00:36:41.345
<v Speaker 0>16 CPUs, but the field for each.

00:36:41.984 --> 00:36:42.785
<v Speaker 0>I

00:36:43.744 --> 00:36:45.025
<v Speaker 0>think what

00:36:45.025 --> 00:36:48.450
<v Speaker 0>is important to take away from filtering

00:36:48.450 --> 00:36:52.290
<v Speaker 0>is that the database will work out optimization

00:36:52.290 --> 00:36:54.370
<v Speaker 0>to make that as fast as possible.

00:36:55.010 --> 00:36:56.450
<v Speaker 0>As long as

00:36:56.690 --> 00:36:59.090
<v Speaker 0>you keep all of your filters together

00:36:59.705 --> 00:37:02.185
<v Speaker 0>wherever possible. Of course, you're always gonna need

00:37:02.185 --> 00:37:04.345
<v Speaker 0>filters further down the stack and that's okay.

00:37:04.425 --> 00:37:06.425
<v Speaker 0>But anything that can you wanna reduce as

00:37:06.425 --> 00:37:08.185
<v Speaker 0>much of your dataset as possible

00:37:08.585 --> 00:37:09.945
<v Speaker 0>right after the range

00:37:10.105 --> 00:37:12.185
<v Speaker 0>because that as long as you're again, as

00:37:12.185 --> 00:37:14.140
<v Speaker 0>long as you're using tags, we'll push it

00:37:14.140 --> 00:37:15.980
<v Speaker 0>all down to the time series database.

00:37:16.380 --> 00:37:17.500
<v Speaker 0>So you don't need to load all of

00:37:17.500 --> 00:37:19.260
<v Speaker 0>that into memory. And that's just as good

00:37:19.260 --> 00:37:21.100
<v Speaker 0>increase your performance substantially.

00:37:22.140 --> 00:37:22.860
<v Speaker 0>If

00:37:23.180 --> 00:37:24.620
<v Speaker 0>we were to

00:37:25.955 --> 00:37:28.675
<v Speaker 0>call another function here, and I know you

00:37:28.675 --> 00:37:29.875
<v Speaker 0>don't know what window is yet, but that's

00:37:29.875 --> 00:37:30.515
<v Speaker 0>alright.

00:37:30.915 --> 00:37:32.915
<v Speaker 0>Those filters being broken up can no longer

00:37:32.915 --> 00:37:36.035
<v Speaker 0>be optimized because we have some logic that

00:37:36.035 --> 00:37:38.355
<v Speaker 0>has to happen in between, meaning the only

00:37:38.355 --> 00:37:39.875
<v Speaker 0>filter that will get pushed down to the

00:37:39.875 --> 00:37:42.410
<v Speaker 0>time series database is a measurement. We load

00:37:42.410 --> 00:37:44.810
<v Speaker 0>everything into memory to perform the window.

00:37:44.810 --> 00:37:46.170
<v Speaker 0>And then even if this is a tag,

00:37:46.170 --> 00:37:48.090
<v Speaker 0>it doesn't matter. We're still filtering it and

00:37:48.090 --> 00:37:48.810
<v Speaker 0>memory.

00:37:49.210 --> 00:37:51.850
<v Speaker 0>So really important to understand

00:37:52.330 --> 00:37:54.090
<v Speaker 0>and try to remember that if you can

00:37:54.090 --> 00:37:56.325
<v Speaker 0>keep your filters to the start, you're gonna

00:37:56.325 --> 00:37:58.965
<v Speaker 0>have a much better performing database.

00:38:01.925 --> 00:38:02.565
<v Speaker 0>Okay.

00:38:03.045 --> 00:38:03.685
<v Speaker 0>Now,

00:38:04.165 --> 00:38:07.365
<v Speaker 0>it's really your own personal preference now, whether

00:38:07.365 --> 00:38:09.125
<v Speaker 0>how you structure your filters.

00:38:09.570 --> 00:38:11.090
<v Speaker 0>And what a lot of people like to

00:38:11.090 --> 00:38:13.090
<v Speaker 0>do is use the android and

00:38:14.290 --> 00:38:16.690
<v Speaker 0>you can say usage.

00:38:17.650 --> 00:38:18.210
<v Speaker 0>K.

00:38:18.530 --> 00:38:20.130
<v Speaker 0>And do that as a single filter. You

00:38:20.130 --> 00:38:22.770
<v Speaker 0>can have them all as individual filters.

00:38:22.930 --> 00:38:25.755
<v Speaker 0>It does not matter. Personal preference, use whatever

00:38:25.755 --> 00:38:27.115
<v Speaker 0>you like. Me,

00:38:27.835 --> 00:38:29.115
<v Speaker 0>I kind of prefer

00:38:30.155 --> 00:38:32.235
<v Speaker 0>separate filter lines as much as possible

00:38:33.115 --> 00:38:35.355
<v Speaker 0>because I think it's a little bit cleaner.

00:38:35.994 --> 00:38:37.435
<v Speaker 0>Of course, if we get down to a

00:38:37.435 --> 00:38:38.954
<v Speaker 0>certain point here where I have others and

00:38:38.954 --> 00:38:40.155
<v Speaker 0>I have to do

00:38:41.010 --> 00:38:42.610
<v Speaker 0>a slightly later filter,

00:38:43.250 --> 00:38:45.170
<v Speaker 0>then in order to avoid looking over the

00:38:45.170 --> 00:38:47.330
<v Speaker 0>data twice, although there still are performance things

00:38:47.330 --> 00:38:49.010
<v Speaker 0>that happens with the runtime that we'll try

00:38:49.010 --> 00:38:51.090
<v Speaker 0>to avoid that. And I will use the

00:38:51.090 --> 00:38:52.050
<v Speaker 0>and syntax.

00:38:53.925 --> 00:38:55.685
<v Speaker 0>But as I said, for the first bunch

00:38:55.685 --> 00:38:57.445
<v Speaker 0>of filters, I do like to to put

00:38:57.445 --> 00:38:59.845
<v Speaker 0>them together. This is one filter in the

00:38:59.845 --> 00:39:01.365
<v Speaker 0>runtime, not two.

00:39:02.565 --> 00:39:03.365
<v Speaker 0>In fact,

00:39:03.685 --> 00:39:05.765
<v Speaker 0>that's also arbitrary. I could have as many

00:39:05.765 --> 00:39:07.605
<v Speaker 0>filters like this. These would all be filtered

00:39:07.605 --> 00:39:08.950
<v Speaker 0>at once and pushed down to the time

00:39:08.950 --> 00:39:11.830
<v Speaker 0>series database as long as their tags. And

00:39:11.830 --> 00:39:14.390
<v Speaker 0>that is always, always the caveat with querying

00:39:14.390 --> 00:39:16.870
<v Speaker 0>and FluxDB too. Stick to tags as much

00:39:16.870 --> 00:39:19.750
<v Speaker 0>as possible, push the field filtering

00:39:20.150 --> 00:39:22.150
<v Speaker 0>as late in the call or the script

00:39:22.150 --> 00:39:22.790
<v Speaker 0>as possible.

00:39:26.375 --> 00:39:27.015
<v Speaker 0>Okay.

00:39:27.655 --> 00:39:29.895
<v Speaker 0>Let's talk about these results that we've been

00:39:29.895 --> 00:39:30.455
<v Speaker 0>getting.

00:39:31.975 --> 00:39:33.815
<v Speaker 0>And to do that, we have to explain

00:39:33.815 --> 00:39:35.015
<v Speaker 0>tables and grouping. So

00:39:38.180 --> 00:39:40.660
<v Speaker 0>Flux returns all data from your queries as

00:39:40.660 --> 00:39:42.339
<v Speaker 0>a set of tables, which are grouped by

00:39:42.339 --> 00:39:43.380
<v Speaker 0>a group key.

00:39:43.700 --> 00:39:45.859
<v Speaker 0>This group key by default is each series

00:39:45.859 --> 00:39:48.180
<v Speaker 0>within your data where a series is a

00:39:48.180 --> 00:39:50.260
<v Speaker 0>unique combination of tag and values.

00:39:51.775 --> 00:39:53.775
<v Speaker 0>Definitely make sure you've checked out the first

00:39:53.775 --> 00:39:55.935
<v Speaker 0>lecture, an introduction to time series. I talk

00:39:55.935 --> 00:39:58.095
<v Speaker 0>about series, tags and keys.

00:40:00.495 --> 00:40:01.375
<v Speaker 0>But let's

00:40:03.135 --> 00:40:04.575
<v Speaker 0>take a visual representation

00:40:04.575 --> 00:40:06.735
<v Speaker 0>of this. I'm gonna remove this.

00:40:10.760 --> 00:40:13.400
<v Speaker 0>We will pull out six seconds of CPU.

00:40:15.640 --> 00:40:16.600
<v Speaker 0>Woah, what did do?

00:40:24.494 --> 00:40:26.015
<v Speaker 0>Okay. Thirty seconds.

00:40:28.175 --> 00:40:30.095
<v Speaker 0>Okay. Think that the six seconds work and

00:40:30.095 --> 00:40:30.815
<v Speaker 0>I just

00:40:33.214 --> 00:40:34.974
<v Speaker 0>Oh no, because my flush interval is six

00:40:34.974 --> 00:40:37.900
<v Speaker 0>seconds. There we go. Yeah. Okay. So, view

00:40:37.900 --> 00:40:39.900
<v Speaker 0>raw data. Okay. So,

00:40:40.380 --> 00:40:42.060
<v Speaker 0>we have got a from a range and

00:40:42.060 --> 00:40:44.060
<v Speaker 0>a filter, right? These are the basic constructs

00:40:44.060 --> 00:40:45.340
<v Speaker 0>of all flux queries.

00:40:45.820 --> 00:40:47.660
<v Speaker 0>You'll see that we have table zero,

00:40:47.980 --> 00:40:49.180
<v Speaker 0>we have table one,

00:40:49.340 --> 00:40:51.660
<v Speaker 0>we have table two, we have table three,

00:40:52.095 --> 00:40:53.215
<v Speaker 0>so forth,

00:40:53.615 --> 00:40:55.695
<v Speaker 0>all the way down the stack.

00:40:56.494 --> 00:40:59.455
<v Speaker 0>So a table is a series based on

00:40:59.455 --> 00:41:00.895
<v Speaker 0>the default group key.

00:41:01.295 --> 00:41:03.375
<v Speaker 0>The group key that's been used here

00:41:03.775 --> 00:41:04.655
<v Speaker 0>is

00:41:05.630 --> 00:41:08.990
<v Speaker 0>our field name of usage guest,

00:41:08.990 --> 00:41:10.750
<v Speaker 0>the measurement of CPU,

00:41:10.990 --> 00:41:12.510
<v Speaker 0>the CPU tag,

00:41:12.590 --> 00:41:14.830
<v Speaker 0>which is, you know, each CPU will become

00:41:14.830 --> 00:41:16.190
<v Speaker 0>its own series

00:41:16.430 --> 00:41:17.390
<v Speaker 0>and the host.

00:41:18.855 --> 00:41:21.255
<v Speaker 0>So what we have here is a set

00:41:21.255 --> 00:41:24.295
<v Speaker 0>of tables for every CPU core

00:41:24.535 --> 00:41:26.535
<v Speaker 0>on this machine and

00:41:27.015 --> 00:41:28.055
<v Speaker 0>for each

00:41:28.375 --> 00:41:29.175
<v Speaker 0>field

00:41:29.255 --> 00:41:31.095
<v Speaker 0>available in the dataset,

00:41:31.670 --> 00:41:33.270
<v Speaker 0>which I think is

00:41:35.190 --> 00:41:38.070
<v Speaker 0>anywhere from eight to nine, not entirely sure,

00:41:38.710 --> 00:41:41.430
<v Speaker 0>but let's try and make this more visual.

00:41:41.750 --> 00:41:43.750
<v Speaker 0>So if we add in a new filter,

00:41:45.745 --> 00:41:47.985
<v Speaker 0>and we do field

00:41:47.985 --> 00:41:50.305
<v Speaker 0>equals and we drop this down to one

00:41:50.305 --> 00:41:51.025
<v Speaker 0>field,

00:41:52.225 --> 00:41:54.385
<v Speaker 0>we should see one series

00:41:54.705 --> 00:41:56.785
<v Speaker 0>for each variation of the series,

00:41:57.200 --> 00:41:59.840
<v Speaker 0>which now because of we have constrained the

00:41:59.840 --> 00:42:01.760
<v Speaker 0>field to a single one will be the

00:42:01.760 --> 00:42:02.800
<v Speaker 0>CPU's,

00:42:02.960 --> 00:42:05.200
<v Speaker 0>meaning we should see 16

00:42:05.200 --> 00:42:06.000
<v Speaker 0>tables.

00:42:08.320 --> 00:42:09.760
<v Speaker 0>Okay. Table zero,

00:42:12.575 --> 00:42:13.375
<v Speaker 0>table

00:42:13.375 --> 00:42:15.135
<v Speaker 0>15

00:42:15.135 --> 00:42:16.895
<v Speaker 0>for fifteen, sixteen tables.

00:42:17.455 --> 00:42:19.535
<v Speaker 0>Tables are the thing that trip everybody up

00:42:19.535 --> 00:42:20.575
<v Speaker 0>at the start.

00:42:20.895 --> 00:42:22.815
<v Speaker 0>Trying to get the data out because it's

00:42:22.815 --> 00:42:25.250
<v Speaker 0>columnar and and, you know, not a lot

00:42:25.250 --> 00:42:27.650
<v Speaker 0>of people are familiar with creating against columnar

00:42:27.650 --> 00:42:29.970
<v Speaker 0>databases. It's really fast on the read path

00:42:29.970 --> 00:42:31.570
<v Speaker 0>and the write path, but

00:42:32.290 --> 00:42:33.730
<v Speaker 0>comes with a little bit of a cognitive

00:42:33.730 --> 00:42:36.050
<v Speaker 0>overload that people just aren't familiar with.

00:42:36.655 --> 00:42:37.375
<v Speaker 0>So,

00:42:37.535 --> 00:42:40.415
<v Speaker 0>I hope you understand tables. If not,

00:42:40.815 --> 00:42:42.815
<v Speaker 0>leave comments on the video, jump into the

00:42:42.815 --> 00:42:43.615
<v Speaker 0>Discord,

00:42:43.855 --> 00:42:45.375
<v Speaker 0>happy to spend more time on it. And

00:42:45.375 --> 00:42:46.575
<v Speaker 0>we'll be looking at it in a little

00:42:46.575 --> 00:42:47.855
<v Speaker 0>bit more detail as we run through this

00:42:47.855 --> 00:42:50.655
<v Speaker 0>too. But really, hopefully you have a good

00:42:50.655 --> 00:42:51.695
<v Speaker 0>grasp of it already.

00:42:54.560 --> 00:42:55.280
<v Speaker 0>Okay.

00:42:55.520 --> 00:42:57.280
<v Speaker 0>And we'll copy that just so I can

00:42:57.280 --> 00:42:58.800
<v Speaker 0>make sure that the query Oh, there's a

00:42:58.800 --> 00:43:00.320
<v Speaker 0>nice little copy button. I'm

00:43:02.240 --> 00:43:03.600
<v Speaker 0>not gonna do five minutes.

00:43:04.000 --> 00:43:05.680
<v Speaker 0>Let's just do thirty seconds.

00:43:08.425 --> 00:43:09.305
<v Speaker 0>There we go.

00:43:10.025 --> 00:43:10.745
<v Speaker 0>Now,

00:43:12.185 --> 00:43:14.105
<v Speaker 0>I think I ask a question here. Yeah,

00:43:14.105 --> 00:43:14.825
<v Speaker 0>I do.

00:43:15.145 --> 00:43:17.145
<v Speaker 0>So looking at this query,

00:43:17.464 --> 00:43:20.505
<v Speaker 0>how many tables do you expect this to

00:43:20.505 --> 00:43:20.984
<v Speaker 0>return?

00:43:22.310 --> 00:43:24.390
<v Speaker 0>Okay. So from and range,

00:43:25.430 --> 00:43:27.110
<v Speaker 0>we filter on the measurement

00:43:27.590 --> 00:43:29.430
<v Speaker 0>and we are requesting

00:43:29.750 --> 00:43:31.590
<v Speaker 0>three different fields.

00:43:34.914 --> 00:43:36.195
<v Speaker 0>I'll give you a moment

00:43:37.075 --> 00:43:38.515
<v Speaker 0>or you could pause it.

00:43:39.634 --> 00:43:40.994
<v Speaker 0>And the answer is here. In fact, I

00:43:40.994 --> 00:43:42.595
<v Speaker 0>wouldn't even read the answer.

00:43:43.234 --> 00:43:45.075
<v Speaker 0>Feel free to peruse that at your own

00:43:45.075 --> 00:43:46.595
<v Speaker 0>time, but hopefully you got it right.

00:43:49.230 --> 00:43:52.750
<v Speaker 0>Okay, so now we can change the group

00:43:52.750 --> 00:43:54.430
<v Speaker 0>key to get the data in a format

00:43:54.430 --> 00:43:56.430
<v Speaker 0>that we need. Again, once you have an

00:43:56.430 --> 00:43:58.430
<v Speaker 0>understanding of what values you wanna get from

00:43:58.430 --> 00:43:59.310
<v Speaker 0>your metric data,

00:43:59.795 --> 00:44:01.715
<v Speaker 0>alright, and your event data, you can start

00:44:01.715 --> 00:44:04.035
<v Speaker 0>to piece together your queries and you'll have

00:44:04.035 --> 00:44:06.195
<v Speaker 0>a better understanding of the group key that

00:44:06.195 --> 00:44:06.915
<v Speaker 0>you need.

00:44:08.275 --> 00:44:10.835
<v Speaker 0>So let's assume that we want data above

00:44:10.835 --> 00:44:13.635
<v Speaker 0>the group by metric, ignoring the different CPUs

00:44:13.635 --> 00:44:14.515
<v Speaker 0>altogether.

00:44:15.260 --> 00:44:17.180
<v Speaker 0>So, I don't want a table

00:44:17.900 --> 00:44:20.059
<v Speaker 0>for each CPU. What I want to know

00:44:20.059 --> 00:44:21.900
<v Speaker 0>is can I have an arbitrary number that

00:44:21.900 --> 00:44:24.300
<v Speaker 0>tells me of whether my CPU is saturated

00:44:25.099 --> 00:44:25.900
<v Speaker 0>or not?

00:44:27.740 --> 00:44:30.525
<v Speaker 0>So, we do a from range, we filter

00:44:30.525 --> 00:44:31.645
<v Speaker 0>on the measurement,

00:44:32.605 --> 00:44:34.525
<v Speaker 0>and then we filter on the three fields

00:44:34.525 --> 00:44:36.525
<v Speaker 0>that we want, usage system,

00:44:36.525 --> 00:44:39.085
<v Speaker 0>usage user, and usage guest.

00:44:39.964 --> 00:44:43.005
<v Speaker 0>Now we're introducing the group function where we

00:44:43.005 --> 00:44:45.005
<v Speaker 0>can provide the number of columns to use,

00:44:45.770 --> 00:44:48.329
<v Speaker 0>or which columns to use as a group

00:44:48.329 --> 00:44:49.050
<v Speaker 0>key.

00:44:49.770 --> 00:44:54.170
<v Speaker 0>Here, the measurement is actually superficial because we're

00:44:54.170 --> 00:44:55.610
<v Speaker 0>grouping on the field.

00:44:56.170 --> 00:44:59.369
<v Speaker 0>If we had multiple measurements with a field

00:44:59.369 --> 00:45:01.210
<v Speaker 0>name that

00:45:00.695 --> 00:45:03.015
<v Speaker 0>duplicated across them all, you would want to

00:45:03.015 --> 00:45:04.935
<v Speaker 0>make sure that you restrict it properly

00:45:05.335 --> 00:45:07.175
<v Speaker 0>and you don't have like a

00:45:07.975 --> 00:45:08.935
<v Speaker 0>response

00:45:08.935 --> 00:45:11.575
<v Speaker 0>time and multiple measurements

00:45:11.655 --> 00:45:13.415
<v Speaker 0>all get grouped together because it would skew

00:45:13.415 --> 00:45:15.630
<v Speaker 0>the values. But it's usually best to be

00:45:15.630 --> 00:45:17.550
<v Speaker 0>as constrained as possible.

00:45:17.869 --> 00:45:19.070
<v Speaker 0>So measurement

00:45:19.310 --> 00:45:21.390
<v Speaker 0>field and then the motor bag.

00:45:22.109 --> 00:45:23.710
<v Speaker 0>And then if we run this,

00:45:25.390 --> 00:45:27.630
<v Speaker 0>we'll see that we get all of the

00:45:27.630 --> 00:45:28.670
<v Speaker 0>CPU numbers.

00:45:34.485 --> 00:45:35.845
<v Speaker 0>And the same table.

00:45:39.205 --> 00:45:39.845
<v Speaker 0>Perfect.

00:45:40.245 --> 00:45:41.685
<v Speaker 0>And we'll have three tables.

00:45:43.010 --> 00:45:44.690
<v Speaker 0>You can see the two on the left

00:45:44.690 --> 00:45:47.170
<v Speaker 0>here, and that is for each of the

00:45:47.170 --> 00:45:47.970
<v Speaker 0>fields.

00:45:48.770 --> 00:45:51.170
<v Speaker 0>So now we have a table for each

00:45:51.170 --> 00:45:53.170
<v Speaker 0>field that we care about, and we can

00:45:53.170 --> 00:45:54.770
<v Speaker 0>actually do aggregations

00:45:54.770 --> 00:45:57.410
<v Speaker 0>across the values, across the CPUs

00:45:57.875 --> 00:45:59.235
<v Speaker 0>to understand

00:46:00.115 --> 00:46:02.995
<v Speaker 0>whether the system is under load or not.

00:46:05.155 --> 00:46:05.955
<v Speaker 0>Alright.

00:46:09.075 --> 00:46:10.595
<v Speaker 0>How many tables do you think we'll get

00:46:10.595 --> 00:46:13.790
<v Speaker 0>back now? I just answered that. Sorry. Spoiler.

00:46:15.310 --> 00:46:17.550
<v Speaker 0>Something else I like to share with people

00:46:17.550 --> 00:46:18.750
<v Speaker 0>because, again,

00:46:19.070 --> 00:46:20.670
<v Speaker 0>it's one of those first questions I get

00:46:20.670 --> 00:46:22.990
<v Speaker 0>all the time about Flux is, but what

00:46:22.990 --> 00:46:24.350
<v Speaker 0>if I don't want a group? What if

00:46:24.350 --> 00:46:26.270
<v Speaker 0>I I just want a single table?

00:46:27.135 --> 00:46:28.575
<v Speaker 0>And you can do that through an empty

00:46:28.575 --> 00:46:31.055
<v Speaker 0>group. I tend to call it a flatten,

00:46:31.055 --> 00:46:32.895
<v Speaker 0>flatten the data, single group.

00:46:33.135 --> 00:46:34.655
<v Speaker 0>I think that's just a term that maybe

00:46:34.655 --> 00:46:36.335
<v Speaker 0>I use. Haven't heard a lot of other

00:46:36.335 --> 00:46:37.455
<v Speaker 0>people use it, but

00:46:38.095 --> 00:46:40.175
<v Speaker 0>it's just basically no group. We want to

00:46:40.175 --> 00:46:42.140
<v Speaker 0>remove the group key.

00:46:43.180 --> 00:46:43.820
<v Speaker 0>So

00:46:43.980 --> 00:46:45.500
<v Speaker 0>if we jump in here,

00:46:46.620 --> 00:46:48.380
<v Speaker 0>we can call an empty group

00:46:48.700 --> 00:46:49.660
<v Speaker 0>like so.

00:46:52.860 --> 00:46:54.620
<v Speaker 0>And now the zeros

00:46:54.780 --> 00:46:56.805
<v Speaker 0>all the way down. That just gives us

00:46:56.805 --> 00:46:57.925
<v Speaker 0>one flat table.

00:46:58.724 --> 00:47:00.645
<v Speaker 0>And the the use case for that is

00:47:00.805 --> 00:47:03.285
<v Speaker 0>just having a a single series for graphing

00:47:03.285 --> 00:47:05.685
<v Speaker 0>or pulling out explicit values

00:47:05.685 --> 00:47:07.445
<v Speaker 0>and from a bunch of aggregations that you're

00:47:07.445 --> 00:47:08.405
<v Speaker 0>making across your data.

00:47:13.750 --> 00:47:15.190
<v Speaker 0>All right, let's

00:47:17.110 --> 00:47:19.590
<v Speaker 0>try and get through this last bit within

00:47:19.590 --> 00:47:20.390
<v Speaker 0>the hour.

00:47:21.110 --> 00:47:23.495
<v Speaker 0>And I'll be back on the next video

00:47:23.495 --> 00:47:25.015
<v Speaker 0>will drop in just a couple of days.

00:47:25.815 --> 00:47:27.815
<v Speaker 0>Okay, so windows and aggregations.

00:47:29.335 --> 00:47:30.935
<v Speaker 0>There's a little note here, I just want

00:47:30.935 --> 00:47:33.415
<v Speaker 0>people to be wary of is that MO

00:47:33.415 --> 00:47:35.015
<v Speaker 0>and Y behave slightly differently

00:47:35.480 --> 00:47:37.880
<v Speaker 0>when they're used in window operations than regards

00:47:37.880 --> 00:47:39.720
<v Speaker 0>to the from. So if you use one

00:47:39.720 --> 00:47:41.400
<v Speaker 0>month for one year and a from, it

00:47:41.400 --> 00:47:42.839
<v Speaker 0>will go back thirty one days or three

00:47:42.839 --> 00:47:44.040
<v Speaker 0>sixty five days.

00:47:44.839 --> 00:47:46.920
<v Speaker 0>However, in a window operation,

00:47:47.079 --> 00:47:48.599
<v Speaker 0>they are calendar aligned.

00:47:49.345 --> 00:47:52.785
<v Speaker 0>So if you see window that's data

00:47:53.185 --> 00:47:54.945
<v Speaker 0>by month, you will get the 1 the

00:47:54.945 --> 00:47:56.305
<v Speaker 0>month to the end of the month.

00:47:56.625 --> 00:47:58.145
<v Speaker 0>And the same for years, you will get

00:47:58.145 --> 00:48:00.785
<v Speaker 0>from January 1 to December 31.

00:48:01.105 --> 00:48:03.260
<v Speaker 0>So just keep that in mind. I think

00:48:03.260 --> 00:48:05.580
<v Speaker 0>that's intuitive, what people would expect.

00:48:06.380 --> 00:48:06.940
<v Speaker 0>However,

00:48:08.380 --> 00:48:09.820
<v Speaker 0>it doesn't have to reiterate

00:48:10.619 --> 00:48:11.580
<v Speaker 0>that, of course.

00:48:12.220 --> 00:48:14.540
<v Speaker 0>So what window functions allow us to do

00:48:14.905 --> 00:48:17.865
<v Speaker 0>are to divide the data that we're creating

00:48:17.865 --> 00:48:20.585
<v Speaker 0>into windows that we wanna build aggregations for.

00:48:20.585 --> 00:48:22.745
<v Speaker 0>So let's, as an example,

00:48:23.225 --> 00:48:25.865
<v Speaker 0>we are collecting our CPU data every

00:48:26.025 --> 00:48:29.010
<v Speaker 0>two seconds. That is quite high resolution for

00:48:29.010 --> 00:48:31.090
<v Speaker 0>CPU on a standard Linux machine. As you

00:48:31.090 --> 00:48:32.610
<v Speaker 0>can see by some of the queries have

00:48:32.610 --> 00:48:34.450
<v Speaker 0>already tickled the box a little bit.

00:48:35.410 --> 00:48:37.810
<v Speaker 0>So we probably don't want to understand the

00:48:37.810 --> 00:48:39.890
<v Speaker 0>load at two second intervals because

00:48:40.085 --> 00:48:41.845
<v Speaker 0>you know, there are gonna be bursts in

00:48:41.845 --> 00:48:44.404
<v Speaker 0>CPUs as applications are spinning up and down.

00:48:44.404 --> 00:48:46.085
<v Speaker 0>It send instructions to the CPU that cause

00:48:46.085 --> 00:48:47.445
<v Speaker 0>that number to artificially

00:48:48.085 --> 00:48:49.924
<v Speaker 0>Not artificially. It goes up, but it's just

00:48:49.924 --> 00:48:51.525
<v Speaker 0>not that important because it drops back down

00:48:51.525 --> 00:48:51.924
<v Speaker 0>very quickly.

00:48:53.480 --> 00:48:55.799
<v Speaker 0>So we It's very common with time series

00:48:55.799 --> 00:48:57.720
<v Speaker 0>data to say, okay, I have two second

00:48:57.720 --> 00:49:00.440
<v Speaker 0>resolution, but I actually wanna build an aggregation,

00:49:00.760 --> 00:49:02.359
<v Speaker 0>a one minute, five minute, and fifteen minute

00:49:02.359 --> 00:49:03.080
<v Speaker 0>intervals.

00:49:03.480 --> 00:49:05.559
<v Speaker 0>Hey, you may be familiar with that already,

00:49:05.559 --> 00:49:07.000
<v Speaker 0>right? Linux load averages.

00:49:08.039 --> 00:49:08.599
<v Speaker 0>So

00:49:09.045 --> 00:49:10.964
<v Speaker 0>here's a pop quiz. I'm about to run

00:49:10.964 --> 00:49:13.525
<v Speaker 0>this query. How many tables will it return?

00:49:14.405 --> 00:49:16.005
<v Speaker 0>So this does a filter

00:49:17.525 --> 00:49:18.725
<v Speaker 0>and a filter.

00:49:19.285 --> 00:49:21.605
<v Speaker 0>So we've got a single measurement, a single

00:49:21.605 --> 00:49:22.005
<v Speaker 0>field,

00:49:23.280 --> 00:49:24.640
<v Speaker 0>and we're windowing.

00:49:25.040 --> 00:49:26.960
<v Speaker 0>And we know that I have 16 CPUs

00:49:26.960 --> 00:49:28.080
<v Speaker 0>on my machine.

00:49:28.480 --> 00:49:30.880
<v Speaker 0>So keep that in mind, have a guess,

00:49:30.880 --> 00:49:32.160
<v Speaker 0>pause it if you wanna work it out

00:49:32.160 --> 00:49:34.320
<v Speaker 0>for a minute. I am gonna go run

00:49:34.320 --> 00:49:34.880
<v Speaker 0>this query.

00:49:37.265 --> 00:49:39.585
<v Speaker 0>So fifteen minutes of CPU data, windowed every

00:49:39.585 --> 00:49:40.465
<v Speaker 0>one minute.

00:49:41.425 --> 00:49:43.425
<v Speaker 0>I'm gonna window it. Oh, in fact, yeah,

00:49:43.425 --> 00:49:44.305
<v Speaker 0>I should run it as one because that's

00:49:44.305 --> 00:49:44.945
<v Speaker 0>what I said. Right?

00:49:51.940 --> 00:49:52.500
<v Speaker 0>Two

00:49:53.300 --> 00:49:54.900
<v Speaker 0>fifty six tables.

00:49:55.540 --> 00:49:56.740
<v Speaker 0>Is that what you got?

00:49:57.700 --> 00:49:58.420
<v Speaker 0>Okay.

00:49:58.900 --> 00:50:00.900
<v Speaker 0>If you want that explained, the answer is

00:50:00.900 --> 00:50:02.420
<v Speaker 0>here. So

00:50:02.660 --> 00:50:04.900
<v Speaker 0>depends on how many CPU's you have on

00:50:04.900 --> 00:50:07.435
<v Speaker 0>your system. My machine has 16 CPUs, so

00:50:07.435 --> 00:50:09.755
<v Speaker 0>it returns two fifty six tables.

00:50:10.075 --> 00:50:10.635
<v Speaker 0>Why?

00:50:10.875 --> 00:50:12.955
<v Speaker 0>Well, we have requested a single metric and

00:50:12.955 --> 00:50:14.555
<v Speaker 0>we have 16 CPUs,

00:50:14.875 --> 00:50:16.955
<v Speaker 0>so you may have guessed it, 16 tables

00:50:16.955 --> 00:50:17.755
<v Speaker 0>would be returned.

00:50:19.020 --> 00:50:20.940
<v Speaker 0>However, because we're modifying

00:50:21.820 --> 00:50:23.740
<v Speaker 0>the group key with our new window,

00:50:23.820 --> 00:50:26.140
<v Speaker 0>and that's important to remember, windowing data does

00:50:26.140 --> 00:50:27.660
<v Speaker 0>modify the group key.

00:50:28.300 --> 00:50:30.220
<v Speaker 0>What we're actually saying is that we want

00:50:30.220 --> 00:50:31.660
<v Speaker 0>one minute intervals.

00:50:32.235 --> 00:50:34.235
<v Speaker 0>And because our range

00:50:34.875 --> 00:50:36.155
<v Speaker 0>is 15,

00:50:36.635 --> 00:50:38.715
<v Speaker 0>we are actually multiplying the number of tables

00:50:38.715 --> 00:50:39.835
<v Speaker 0>by 16.

00:50:40.475 --> 00:50:42.475
<v Speaker 0>The reason why is that we get our

00:50:42.475 --> 00:50:44.475
<v Speaker 0>fifteen minute one minute

00:50:45.595 --> 00:50:46.235
<v Speaker 0>intervals,

00:50:46.690 --> 00:50:48.370
<v Speaker 0>plus the current interval

00:50:48.770 --> 00:50:51.010
<v Speaker 0>depending on how far into that we are.

00:50:52.610 --> 00:50:54.690
<v Speaker 0>So we can actually just take a look.

00:50:56.210 --> 00:50:58.290
<v Speaker 0>So let's try and start at the top.

00:50:59.735 --> 00:51:01.495
<v Speaker 0>You can see the windows on the start

00:51:01.495 --> 00:51:02.535
<v Speaker 0>and the stop.

00:51:03.255 --> 00:51:06.295
<v Speaker 0>So we have fourteen thirty five to fourteen

00:51:06.295 --> 00:51:08.535
<v Speaker 0>thirty six, and you see that is not

00:51:08.535 --> 00:51:11.095
<v Speaker 0>a complete minute because we are halfway through

00:51:11.095 --> 00:51:12.295
<v Speaker 0>this interval

00:51:12.660 --> 00:51:14.020
<v Speaker 0>approaching this.

00:51:16.099 --> 00:51:17.700
<v Speaker 0>Whereas the other intervals

00:51:18.339 --> 00:51:21.619
<v Speaker 0>are complete, fourteen forty four to fourteen forty

00:51:21.619 --> 00:51:21.859
<v Speaker 0>five.

00:51:24.695 --> 00:51:27.255
<v Speaker 0>So hopefully that makes sense. Window changes the

00:51:27.255 --> 00:51:30.215
<v Speaker 0>group key. We are building artificial series based

00:51:30.215 --> 00:51:32.215
<v Speaker 0>because we're seeing chop this data up. Right?

00:51:32.215 --> 00:51:34.375
<v Speaker 0>So we're getting unique series because we're bringing

00:51:34.375 --> 00:51:36.215
<v Speaker 0>a time into dimension of the window.

00:51:38.980 --> 00:51:41.140
<v Speaker 0>Something that's usually quite cool about doing that

00:51:41.140 --> 00:51:41.700
<v Speaker 0>though

00:51:42.740 --> 00:51:43.859
<v Speaker 0>is the colors.

00:51:44.420 --> 00:51:45.060
<v Speaker 0>So

00:51:45.299 --> 00:51:47.140
<v Speaker 0>let's take off the window

00:51:47.460 --> 00:51:49.299
<v Speaker 0>because I wanna show you this. This is

00:51:49.299 --> 00:51:49.539
<v Speaker 0>cool.

00:51:51.075 --> 00:51:53.395
<v Speaker 0>What we see here is consistent

00:51:53.395 --> 00:51:56.035
<v Speaker 0>colors for each series within data.

00:51:56.435 --> 00:51:58.595
<v Speaker 0>So each CPU core here gets its own

00:51:58.595 --> 00:52:00.915
<v Speaker 0>color as we can see in the

00:52:01.795 --> 00:52:03.155
<v Speaker 0>the legend.

00:52:04.755 --> 00:52:06.760
<v Speaker 0>So CPU zero, it's a very light blue,

00:52:06.760 --> 00:52:08.920
<v Speaker 0>CPU nine is very orange, and then we've

00:52:08.920 --> 00:52:09.560
<v Speaker 0>got this

00:52:10.280 --> 00:52:12.200
<v Speaker 0>cascading color changes through.

00:52:13.079 --> 00:52:14.359
<v Speaker 0>And that consistent is

00:52:14.839 --> 00:52:17.400
<v Speaker 0>the color the series color is consistent across

00:52:17.755 --> 00:52:19.515
<v Speaker 0>the x axis. Now,

00:52:20.234 --> 00:52:21.755
<v Speaker 0>when we window the data,

00:52:22.795 --> 00:52:25.595
<v Speaker 0>we are having a unique series for each

00:52:25.595 --> 00:52:27.355
<v Speaker 0>window within the data.

00:52:28.715 --> 00:52:31.435
<v Speaker 0>So actually, the colors now change

00:52:31.820 --> 00:52:32.700
<v Speaker 0>along

00:52:32.700 --> 00:52:34.220
<v Speaker 0>the x axis.

00:52:34.220 --> 00:52:36.060
<v Speaker 0>You can actually see that our first series

00:52:36.060 --> 00:52:37.820
<v Speaker 0>is this time window here.

00:52:38.060 --> 00:52:40.060
<v Speaker 0>Our second series is this time window here.

00:52:40.060 --> 00:52:41.900
<v Speaker 0>Our third series is this one here. Our

00:52:41.900 --> 00:52:44.540
<v Speaker 0>fourth series is here and so forth, all

00:52:44.540 --> 00:52:45.420
<v Speaker 0>the way across there.

00:52:46.245 --> 00:52:48.085
<v Speaker 0>I always like the colors when you do

00:52:48.085 --> 00:52:49.205
<v Speaker 0>that. Very cool.

00:52:50.965 --> 00:52:53.525
<v Speaker 0>Okay. Now we have bundled data,

00:52:55.525 --> 00:52:57.365
<v Speaker 0>which is great. We have

00:52:58.165 --> 00:53:00.005
<v Speaker 0>colors, but we actually need to do some

00:53:00.005 --> 00:53:02.470
<v Speaker 0>more. We wanna be able to aggregate that.

00:53:02.470 --> 00:53:04.950
<v Speaker 0>Right? We we have 16 values across each

00:53:04.950 --> 00:53:06.710
<v Speaker 0>one minute interval and we wanna under we

00:53:06.710 --> 00:53:08.470
<v Speaker 0>want one single value across each of those

00:53:08.470 --> 00:53:11.269
<v Speaker 0>intervals to understand the CPU total load, not

00:53:11.269 --> 00:53:11.910
<v Speaker 0>per CPU.

00:53:12.975 --> 00:53:14.495
<v Speaker 0>So, one of the things we could do

00:53:14.495 --> 00:53:17.055
<v Speaker 0>is use the aggregate functions.

00:53:17.135 --> 00:53:18.655
<v Speaker 0>The one we're using here is called the

00:53:18.655 --> 00:53:19.375
<v Speaker 0>mean.

00:53:19.855 --> 00:53:21.615
<v Speaker 0>So, we want to calculate the mean across

00:53:21.615 --> 00:53:22.335
<v Speaker 0>this window.

00:53:27.740 --> 00:53:29.740
<v Speaker 0>I'll remove that. So this is the same

00:53:29.740 --> 00:53:31.020
<v Speaker 0>query as before.

00:53:32.700 --> 00:53:33.980
<v Speaker 0>CPU filter,

00:53:33.980 --> 00:53:37.100
<v Speaker 0>usage user filter, window by one minute. In

00:53:37.100 --> 00:53:38.540
<v Speaker 0>fact, if I remove this,

00:53:40.335 --> 00:53:42.495
<v Speaker 0>I think it's just a range change, but

00:53:42.495 --> 00:53:43.775
<v Speaker 0>it's still the same data.

00:53:45.855 --> 00:53:46.815
<v Speaker 0>We can

00:53:50.975 --> 00:53:51.695
<v Speaker 0>I should think,

00:53:52.410 --> 00:53:55.050
<v Speaker 0>yeah, I'll spend some time? You're probably wondering

00:53:55.050 --> 00:53:56.410
<v Speaker 0>why all my data shows on the right

00:53:56.410 --> 00:53:57.690
<v Speaker 0>here. And it's just because I'm using a

00:53:57.690 --> 00:53:58.810
<v Speaker 0>fixed range here.

00:54:00.569 --> 00:54:03.290
<v Speaker 0>If we use the variables, time range start,

00:54:04.410 --> 00:54:06.329
<v Speaker 0>we'll use the whole thing

00:54:06.675 --> 00:54:09.075
<v Speaker 0>and then we control it through this here.

00:54:10.595 --> 00:54:12.595
<v Speaker 0>I should have explained that earlier.

00:54:14.915 --> 00:54:17.235
<v Speaker 0>I just tend to use dash minus five

00:54:17.235 --> 00:54:18.995
<v Speaker 0>ms so that I Because it's easier in

00:54:18.995 --> 00:54:20.755
<v Speaker 0>the markdown than saying click on this. So

00:54:20.755 --> 00:54:21.315
<v Speaker 0>there you go.

00:54:22.370 --> 00:54:24.050
<v Speaker 0>Now we can bring in the mean.

00:54:25.810 --> 00:54:27.650
<v Speaker 0>And if we view the raw data,

00:54:27.810 --> 00:54:29.890
<v Speaker 0>we're gonna get a single value

00:54:31.730 --> 00:54:33.090
<v Speaker 0>for each

00:54:33.425 --> 00:54:34.305
<v Speaker 0>series,

00:54:36.385 --> 00:54:38.224
<v Speaker 0>which can't be graphed because a single value

00:54:38.224 --> 00:54:40.705
<v Speaker 0>for each series is a point.

00:54:41.185 --> 00:54:43.665
<v Speaker 0>So you'll see the points along

00:54:44.625 --> 00:54:45.265
<v Speaker 0>the graph.

00:54:46.900 --> 00:54:47.620
<v Speaker 0>And

00:54:48.100 --> 00:54:50.020
<v Speaker 0>just to show you how this was working,

00:54:50.020 --> 00:54:51.940
<v Speaker 0>there was one line that I removed.

00:54:52.500 --> 00:54:54.740
<v Speaker 0>So let's copy that again. The one line

00:54:54.740 --> 00:54:56.340
<v Speaker 0>I removed was just drop us down to

00:54:56.340 --> 00:54:57.300
<v Speaker 0>a single

00:54:57.380 --> 00:54:57.940
<v Speaker 0>CPU,

00:54:58.825 --> 00:55:01.545
<v Speaker 0>run it again, we get a single point.

00:55:01.545 --> 00:55:03.225
<v Speaker 0>And if we view the raw data,

00:55:04.745 --> 00:55:06.745
<v Speaker 0>we just have one point per window.

00:55:07.225 --> 00:55:07.465
<v Speaker 0>Okay.

00:55:11.730 --> 00:55:12.450
<v Speaker 0>So

00:55:12.530 --> 00:55:14.609
<v Speaker 0>how many tables? Well, you can read the

00:55:14.609 --> 00:55:17.330
<v Speaker 0>explanation for that there if you wish.

00:55:18.290 --> 00:55:20.450
<v Speaker 0>What's important here is that this

00:55:21.490 --> 00:55:22.530
<v Speaker 0>combination

00:55:22.770 --> 00:55:24.130
<v Speaker 0>of how to add one to the group

00:55:24.130 --> 00:55:26.005
<v Speaker 0>there. Yeah. I do talk about the group

00:55:26.005 --> 00:55:26.485
<v Speaker 0>here.

00:55:27.605 --> 00:55:30.325
<v Speaker 0>So you can read that. Just in the

00:55:30.325 --> 00:55:31.605
<v Speaker 0>interest of time, there's only a few minutes

00:55:31.605 --> 00:55:32.565
<v Speaker 0>left. But

00:55:33.125 --> 00:55:35.445
<v Speaker 0>this is a very common operation to do

00:55:35.445 --> 00:55:37.205
<v Speaker 0>a window aggregation

00:55:37.205 --> 00:55:40.140
<v Speaker 0>and then flatten or regroup, changes the group

00:55:40.140 --> 00:55:40.780
<v Speaker 0>key.

00:55:41.420 --> 00:55:43.180
<v Speaker 0>It's one of the most common time series

00:55:43.180 --> 00:55:45.020
<v Speaker 0>queries that you're gonna do against your data.

00:55:45.020 --> 00:55:47.180
<v Speaker 0>So I show that there's a helper called

00:55:47.180 --> 00:55:49.820
<v Speaker 0>aggregate window to do this all for you.

00:55:50.540 --> 00:55:51.900
<v Speaker 0>So if we come over here,

00:55:52.695 --> 00:55:54.055
<v Speaker 0>we can just see,

00:55:54.855 --> 00:55:57.415
<v Speaker 0>I'll just remove this measurement CPU,

00:55:57.815 --> 00:56:01.255
<v Speaker 0>build usage user, window one minute, calculate mean,

00:56:01.255 --> 00:56:02.535
<v Speaker 0>click the go button,

00:56:03.655 --> 00:56:06.329
<v Speaker 0>and there we go. And we'll

00:56:06.329 --> 00:56:09.130
<v Speaker 0>remove, we'll use our time range start so

00:56:09.130 --> 00:56:10.330
<v Speaker 0>we can get the full graph.

00:56:10.650 --> 00:56:13.849
<v Speaker 0>And now we're starting to get nice graphs

00:56:13.849 --> 00:56:16.089
<v Speaker 0>that show the CPU load

00:56:16.089 --> 00:56:18.569
<v Speaker 0>over time on this machine at one minute

00:56:18.569 --> 00:56:19.130
<v Speaker 0>intervals.

00:56:20.125 --> 00:56:21.645
<v Speaker 0>If we wanna flatten this out a bit,

00:56:21.645 --> 00:56:23.245
<v Speaker 0>we'd probably do it at five.

00:56:23.885 --> 00:56:25.805
<v Speaker 0>Of course, I'm gonna need more data points,

00:56:25.805 --> 00:56:27.005
<v Speaker 0>so let's do this.

00:56:27.725 --> 00:56:30.285
<v Speaker 0>And now that is what we expect, right?

00:56:30.285 --> 00:56:32.685
<v Speaker 0>As you work with Grafana and InfluxDB,

00:56:32.685 --> 00:56:34.205
<v Speaker 0>Prometheus, all of these tools,

00:56:34.880 --> 00:56:37.280
<v Speaker 0>We just wanna be able to understand fluctuations

00:56:37.280 --> 00:56:39.440
<v Speaker 0>and values over time, our windows that we

00:56:39.440 --> 00:56:41.920
<v Speaker 0>decide the resolution that is important to us

00:56:41.920 --> 00:56:43.840
<v Speaker 0>so that we can have a graph that

00:56:43.840 --> 00:56:44.640
<v Speaker 0>represents

00:56:44.640 --> 00:56:45.520
<v Speaker 0>normal

00:56:45.680 --> 00:56:47.760
<v Speaker 0>so that we can alert on not normal.

00:56:48.805 --> 00:56:50.725
<v Speaker 0>And that is fundamental to what we're doing

00:56:50.725 --> 00:56:51.285
<v Speaker 0>today.

00:56:51.525 --> 00:56:52.965
<v Speaker 0>So aggregate windows,

00:56:53.445 --> 00:56:55.525
<v Speaker 0>you can do it manually. We have a

00:56:55.525 --> 00:56:57.525
<v Speaker 0>window, we have an aggregate function, we have

00:56:57.525 --> 00:56:58.485
<v Speaker 0>another group,

00:56:58.965 --> 00:57:01.760
<v Speaker 0>or just use their function. In fact, if

00:57:01.760 --> 00:57:03.440
<v Speaker 0>you pull up the InfluxDB docs,

00:57:03.760 --> 00:57:06.960
<v Speaker 0>the implementation of aggregate window is the window

00:57:07.760 --> 00:57:09.120
<v Speaker 0>function group,

00:57:09.359 --> 00:57:10.160
<v Speaker 0>like so.

00:57:11.920 --> 00:57:14.400
<v Speaker 0>So there are exercises here. I was hoping

00:57:14.400 --> 00:57:15.760
<v Speaker 0>I would have time to do them today,

00:57:15.760 --> 00:57:17.520
<v Speaker 0>but

00:57:16.725 --> 00:57:18.405
<v Speaker 0>I won't. What I will do is I

00:57:18.405 --> 00:57:21.765
<v Speaker 0>will schedule or I will record myself doing

00:57:21.845 --> 00:57:24.085
<v Speaker 0>each of these exercises and get that uploaded

00:57:24.165 --> 00:57:26.565
<v Speaker 0>as a tutorial session and the course.

00:57:26.965 --> 00:57:29.140
<v Speaker 0>Please go in and check out exercises two

00:57:29.140 --> 00:57:31.220
<v Speaker 0>in your own time. Use the Discord to

00:57:31.220 --> 00:57:32.820
<v Speaker 0>ask for help. Use the comments to ask

00:57:32.820 --> 00:57:34.340
<v Speaker 0>for help. I'm here.

00:57:34.580 --> 00:57:35.940
<v Speaker 0>I wanna be able to help you.

00:57:38.420 --> 00:57:40.900
<v Speaker 0>So that is workshop one, an introduction to

00:57:40.900 --> 00:57:42.775
<v Speaker 0>Flux. I hope you found that useful. Let

00:57:42.775 --> 00:57:44.055
<v Speaker 0>me know how you got on. I'll speak

00:57:44.055 --> 00:57:46.215
<v Speaker 0>to you all soon. Have a wonderful day.

00:57:47.415 --> 00:57:47.735
<v Speaker 0>Bye.
