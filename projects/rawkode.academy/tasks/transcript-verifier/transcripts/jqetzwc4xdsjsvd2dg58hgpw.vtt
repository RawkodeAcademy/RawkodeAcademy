WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 46693ac7-3a05-4c68-8459-361e9232ae3b
Created: 2025-04-29T15:07:26.279Z
Duration: 2980.52
Channels: 1

00:02:42.454 --> 00:02:45.174
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:02:45.360 --> 00:02:47.360
<v Speaker 0>My name is Dylan Flanagan. Although you may

00:02:47.360 --> 00:02:49.680
<v Speaker 0>know me from across the Internet as Rawkode.

00:02:50.240 --> 00:02:53.840
<v Speaker 0>Today is a solo hands on expedition

00:02:53.840 --> 00:02:57.040
<v Speaker 0>as I explore a product called Spin from

00:02:57.040 --> 00:02:58.480
<v Speaker 0>a company called Fermion.

00:02:59.015 --> 00:03:00.855
<v Speaker 0>Full disclosure, I have been doing some work

00:03:00.855 --> 00:03:02.295
<v Speaker 0>for Fermion recently,

00:03:02.375 --> 00:03:04.694
<v Speaker 0>helping them produce content to show the world

00:03:04.694 --> 00:03:06.935
<v Speaker 0>how cool WebAssembly could be. And we're gonna

00:03:06.935 --> 00:03:09.175
<v Speaker 0>run through a few of those examples that

00:03:09.175 --> 00:03:10.855
<v Speaker 0>I've been working on today, as well as

00:03:10.855 --> 00:03:13.175
<v Speaker 0>cover the basics about what Spin is, what

00:03:13.175 --> 00:03:15.620
<v Speaker 0>Fermion are trying to achieve, and of course,

00:03:15.620 --> 00:03:16.900
<v Speaker 0>writing some code.

00:03:17.460 --> 00:03:19.300
<v Speaker 0>Well, you know, I mean, we rely on

00:03:19.300 --> 00:03:21.540
<v Speaker 0>Copilot to do most of the heavy lifting.

00:03:22.020 --> 00:03:24.420
<v Speaker 0>So if you wanna keep me company, feel

00:03:24.420 --> 00:03:26.820
<v Speaker 0>free to say hello in the comment section.

00:03:26.820 --> 00:03:28.980
<v Speaker 0>Let me know if you have any questions

00:03:28.455 --> 00:03:29.735
<v Speaker 0>about Fermion,

00:03:29.735 --> 00:03:32.455
<v Speaker 0>Spin, or WebAssembly as we run through today's

00:03:32.455 --> 00:03:33.335
<v Speaker 0>exercises.

00:03:33.815 --> 00:03:35.815
<v Speaker 0>What I will do is since I'm wearing

00:03:35.815 --> 00:03:38.775
<v Speaker 0>a custard Kubernetes t shirt and the first

00:03:38.775 --> 00:03:40.055
<v Speaker 0>kind of question came in

00:03:40.940 --> 00:03:42.860
<v Speaker 0>during the holding screen.

00:03:43.020 --> 00:03:45.820
<v Speaker 0>Let's tackle that. So Russell says that he

00:03:45.820 --> 00:03:47.900
<v Speaker 0>is interested to hear what I think

00:03:48.460 --> 00:03:51.740
<v Speaker 0>about Spin as he's heard it is designed

00:03:51.740 --> 00:03:53.820
<v Speaker 0>for Nomads rather than Kubernetes.

00:03:54.425 --> 00:03:56.985
<v Speaker 0>So I don't have a link prepared now,

00:03:57.465 --> 00:03:58.985
<v Speaker 0>but the first piece of content I did

00:03:58.985 --> 00:04:01.625
<v Speaker 0>with Fermion was an interview with the two

00:04:01.625 --> 00:04:04.825
<v Speaker 0>co founders. So that's Rado, the CTO,

00:04:05.065 --> 00:04:06.345
<v Speaker 0>and Matt, the CEO.

00:04:07.410 --> 00:04:09.330
<v Speaker 0>They're both responsible for

00:04:09.650 --> 00:04:12.290
<v Speaker 0>or at least they were contributors and maybe

00:04:12.290 --> 00:04:12.850
<v Speaker 0>even

00:04:13.650 --> 00:04:16.529
<v Speaker 0>creators. I can't remember the exact specifics. Think

00:04:16.529 --> 00:04:18.130
<v Speaker 0>they were the creators and the maintainers and

00:04:18.130 --> 00:04:19.089
<v Speaker 0>the contributors

00:04:19.330 --> 00:04:22.985
<v Speaker 0>of a pro project called Crustlet, which was

00:04:24.345 --> 00:04:27.384
<v Speaker 0>a fake kubelet to allow you to run

00:04:27.384 --> 00:04:29.544
<v Speaker 0>WebAssembly workloads in Kubernetes.

00:04:29.625 --> 00:04:31.784
<v Speaker 0>This is a project I've actually covered multiple

00:04:31.784 --> 00:04:34.185
<v Speaker 0>times, maybe not on this channel directly, but

00:04:34.185 --> 00:04:35.465
<v Speaker 0>there may have been an episode or a

00:04:35.465 --> 00:04:37.450
<v Speaker 0>hack, but I have definitely played with it

00:04:37.450 --> 00:04:38.730
<v Speaker 0>and talked about it when I were to

00:04:38.730 --> 00:04:39.530
<v Speaker 0>Equinix

00:04:39.610 --> 00:04:40.250
<v Speaker 0>and

00:04:40.810 --> 00:04:43.290
<v Speaker 0>on my Discord channel once or twice. So

00:04:44.090 --> 00:04:45.450
<v Speaker 0>running WebAssembly

00:04:45.450 --> 00:04:47.050
<v Speaker 0>to me has always been interesting and doing

00:04:47.050 --> 00:04:49.050
<v Speaker 0>it in Kubernetes means that I can transfer

00:04:49.050 --> 00:04:51.210
<v Speaker 0>a lot of that knowledge and experience that

00:04:51.210 --> 00:04:53.514
<v Speaker 0>I already have. And, of course, I can

00:04:53.514 --> 00:04:55.275
<v Speaker 0>run workloads side by side. Like, there's no

00:04:55.275 --> 00:04:57.275
<v Speaker 0>reason I can't run container based workloads next

00:04:57.275 --> 00:04:59.194
<v Speaker 0>to web assembly workloads, next to virtual machine

00:04:59.194 --> 00:05:02.395
<v Speaker 0>workloads. And Kubernetes does give us a control

00:05:02.395 --> 00:05:04.235
<v Speaker 0>plane that is extensible enough to allow us

00:05:04.235 --> 00:05:04.634
<v Speaker 0>to do that.

00:05:05.540 --> 00:05:07.060
<v Speaker 0>Looking back to what I said about the

00:05:07.060 --> 00:05:08.340
<v Speaker 0>first piece of content I did to Fairbeam

00:05:08.340 --> 00:05:10.340
<v Speaker 0>was an interview with the two founders as

00:05:10.340 --> 00:05:12.180
<v Speaker 0>that one of the things that they shared

00:05:13.540 --> 00:05:15.940
<v Speaker 0>was that they really pushed

00:05:15.940 --> 00:05:18.580
<v Speaker 0>Trustlet, and it took a lot of effort

00:05:18.580 --> 00:05:21.895
<v Speaker 0>to get a system that kinda worked.

00:05:22.535 --> 00:05:23.975
<v Speaker 0>But what they found is they weren't really

00:05:23.975 --> 00:05:27.335
<v Speaker 0>getting the characteristics that they expected from pushing

00:05:27.895 --> 00:05:30.615
<v Speaker 0>that, you know, an alternative runtime into Kubernetes

00:05:30.615 --> 00:05:33.415
<v Speaker 0>that doesn't really conform to the CRI spec.

00:05:33.850 --> 00:05:36.250
<v Speaker 0>The container resource interface spec is is there

00:05:36.250 --> 00:05:39.450
<v Speaker 0>to run containers. You can run other things,

00:05:39.450 --> 00:05:41.930
<v Speaker 0>but Kubernetes and, you know, the and the

00:05:41.930 --> 00:05:43.450
<v Speaker 0>CRI make a lot of

00:05:43.930 --> 00:05:47.210
<v Speaker 0>assumptions about there always being a process within

00:05:47.210 --> 00:05:47.850
<v Speaker 0>namespaces.

00:05:48.615 --> 00:05:52.055
<v Speaker 0>And WebAssembly doesn't work that way. It's got

00:05:52.055 --> 00:05:53.335
<v Speaker 0>its own sandbox,

00:05:53.735 --> 00:05:55.175
<v Speaker 0>which is provided by

00:05:55.495 --> 00:05:56.375
<v Speaker 0>WasmTime

00:05:56.375 --> 00:05:57.095
<v Speaker 0>or

00:05:57.335 --> 00:05:59.895
<v Speaker 0>Node. Js isolates or whatever that runtime is

00:05:59.895 --> 00:06:00.295
<v Speaker 0>gonna be.

00:06:02.120 --> 00:06:04.520
<v Speaker 0>So it doesn't even have any concept of

00:06:04.520 --> 00:06:07.240
<v Speaker 0>of POSIX. Now while there's work with the

00:06:07.240 --> 00:06:09.960
<v Speaker 0>Wazi specification, it's gonna bring that to WebAssembly,

00:06:09.960 --> 00:06:11.400
<v Speaker 0>at least server side WebAssembly.

00:06:11.639 --> 00:06:13.000
<v Speaker 0>These are things that are being added through

00:06:13.000 --> 00:06:14.680
<v Speaker 0>something called the capability model,

00:06:15.125 --> 00:06:16.645
<v Speaker 0>which allows you to extend

00:06:17.045 --> 00:06:20.005
<v Speaker 0>the WebAssembly sandbox with new features by providing

00:06:20.005 --> 00:06:22.325
<v Speaker 0>the ability to either gRPC or HTTP call

00:06:22.325 --> 00:06:25.045
<v Speaker 0>out to alternative systems, which have again more

00:06:25.045 --> 00:06:26.485
<v Speaker 0>constraints in place. So

00:06:29.210 --> 00:06:30.810
<v Speaker 0>what they said in there, and I will

00:06:30.810 --> 00:06:32.570
<v Speaker 0>send the link to this interview. I'll stick

00:06:32.570 --> 00:06:33.770
<v Speaker 0>it into the show notes.

00:06:34.810 --> 00:06:36.730
<v Speaker 0>You just go to youtube.com

00:06:36.730 --> 00:06:38.570
<v Speaker 0>and search for Fermion, it's on their official

00:06:38.570 --> 00:06:40.490
<v Speaker 0>channel. It was the most recent video I

00:06:40.490 --> 00:06:41.050
<v Speaker 0>believe.

00:06:41.370 --> 00:06:44.175
<v Speaker 0>It's a really interesting interview, but I keep

00:06:44.175 --> 00:06:46.095
<v Speaker 0>it off topic. But the the thing that

00:06:46.095 --> 00:06:48.575
<v Speaker 0>really trying to drive home about why they

00:06:48.575 --> 00:06:51.135
<v Speaker 0>went with Nomad rather than continuing, you know,

00:06:51.135 --> 00:06:52.815
<v Speaker 0>they've got a lot of experience in Kubernetes

00:06:52.815 --> 00:06:55.375
<v Speaker 0>too. These are people that work on the

00:06:55.535 --> 00:06:58.570
<v Speaker 0>Azure cloud team pushing Kubernetes.

00:06:58.570 --> 00:07:00.810
<v Speaker 0>They are responsible for Helm. They're responsible for

00:07:00.810 --> 00:07:01.690
<v Speaker 0>Brigade.

00:07:01.770 --> 00:07:04.970
<v Speaker 0>They're responsible for Crustlet. Kubernetes was their bread

00:07:04.970 --> 00:07:07.370
<v Speaker 0>and butter. However, what they said was they

00:07:07.370 --> 00:07:08.650
<v Speaker 0>pushed it as far as they could get

00:07:08.650 --> 00:07:09.130
<v Speaker 0>it.

00:07:09.450 --> 00:07:11.850
<v Speaker 0>And the startup times for containers are slow.

00:07:12.395 --> 00:07:14.235
<v Speaker 0>If you need to run a new container,

00:07:14.235 --> 00:07:16.555
<v Speaker 0>you're talking hundreds of milliseconds,

00:07:16.635 --> 00:07:18.715
<v Speaker 0>potentially seconds depending on whether,

00:07:19.275 --> 00:07:21.435
<v Speaker 0>you know, network image is there, IP address

00:07:21.435 --> 00:07:23.115
<v Speaker 0>space, a whole bunch of other things.

00:07:23.915 --> 00:07:25.435
<v Speaker 0>Things they don't really need to worry about

00:07:25.435 --> 00:07:26.395
<v Speaker 0>with WebAssembly.

00:07:27.210 --> 00:07:28.650
<v Speaker 0>And one of the things that they kind

00:07:28.650 --> 00:07:31.450
<v Speaker 0>of affirmed in our interview was that Nomad

00:07:31.450 --> 00:07:34.970
<v Speaker 0>is built to run different types of workloads.

00:07:34.970 --> 00:07:36.490
<v Speaker 0>It runs containers,

00:07:36.970 --> 00:07:39.370
<v Speaker 0>but it can also run the JVM.

00:07:39.370 --> 00:07:39.930
<v Speaker 0>And, actually,

00:07:40.685 --> 00:07:43.085
<v Speaker 0>the JVM is much more compatible

00:07:43.405 --> 00:07:46.045
<v Speaker 0>as a runtime to WebAssembly than it is

00:07:46.045 --> 00:07:47.005
<v Speaker 0>to containers.

00:07:47.885 --> 00:07:48.445
<v Speaker 0>So

00:07:48.925 --> 00:07:50.845
<v Speaker 0>what they what they said in this I'm

00:07:50.845 --> 00:07:52.685
<v Speaker 0>just gonna kinda reveal the whole interview now

00:07:52.685 --> 00:07:54.365
<v Speaker 0>instead of making you go watch it. But

00:07:54.060 --> 00:07:55.820
<v Speaker 0>what they shared there is that with Nomad,

00:07:55.820 --> 00:07:57.500
<v Speaker 0>they have the ability to schedule new workloads

00:07:57.500 --> 00:08:00.460
<v Speaker 0>and have almost sub millisecond

00:08:00.540 --> 00:08:01.580
<v Speaker 0>initialization,

00:08:01.580 --> 00:08:02.780
<v Speaker 0>bootstrap, and start

00:08:02.940 --> 00:08:05.820
<v Speaker 0>of web assembly workloads on Nomad. Something that

00:08:05.820 --> 00:08:07.820
<v Speaker 0>just wasn't possible on Kubernetes.

00:08:09.735 --> 00:08:10.855
<v Speaker 0>A strong

00:08:11.015 --> 00:08:12.775
<v Speaker 0>proportion of our interview,

00:08:13.255 --> 00:08:15.815
<v Speaker 0>Matt and Raghu focus on WebAssembly is not

00:08:15.815 --> 00:08:17.895
<v Speaker 0>a all end situation.

00:08:17.895 --> 00:08:19.415
<v Speaker 0>You know, while we may have a future

00:08:19.415 --> 00:08:21.655
<v Speaker 0>where entire companies and applications are built on

00:08:21.655 --> 00:08:22.215
<v Speaker 0>WebAssembly,

00:08:22.760 --> 00:08:25.160
<v Speaker 0>they really see them as complementary

00:08:25.880 --> 00:08:28.600
<v Speaker 0>technologies. Like, you will always need containers. You

00:08:28.600 --> 00:08:30.520
<v Speaker 0>will still need VMs. We still need VMs

00:08:30.520 --> 00:08:32.200
<v Speaker 0>today even though we have containers.

00:08:32.600 --> 00:08:33.160
<v Speaker 0>So

00:08:33.400 --> 00:08:35.320
<v Speaker 0>web assembly is there to enrich and augment

00:08:35.320 --> 00:08:37.880
<v Speaker 0>those container based and virtual machine based or

00:08:37.455 --> 00:08:39.455
<v Speaker 0>or even bare metal workloads if that's how

00:08:39.455 --> 00:08:40.255
<v Speaker 0>you're operating.

00:08:41.215 --> 00:08:44.015
<v Speaker 0>But give us a development experience that works

00:08:44.015 --> 00:08:46.895
<v Speaker 0>locally and remotely just the same. And that's

00:08:46.895 --> 00:08:49.055
<v Speaker 0>really what I wanna show today is I

00:08:49.055 --> 00:08:50.735
<v Speaker 0>play with Spin and explore it. So

00:08:51.470 --> 00:08:54.350
<v Speaker 0>that was that a bit of a divergence

00:08:54.350 --> 00:08:56.110
<v Speaker 0>just to answer that first question, but I

00:08:56.110 --> 00:08:58.430
<v Speaker 0>hope that context, the history, that flavor is

00:08:58.430 --> 00:09:00.750
<v Speaker 0>useful to you. Russell, if you have any

00:09:00.750 --> 00:09:02.590
<v Speaker 0>more questions drop them straight into the chat.

00:09:03.824 --> 00:09:05.504
<v Speaker 0>I see we have a question from Moz

00:09:05.504 --> 00:09:07.185
<v Speaker 0>as well. So thank you for joining us,

00:09:07.185 --> 00:09:07.904
<v Speaker 0>Moz too.

00:09:08.625 --> 00:09:10.944
<v Speaker 0>The first time I saw WebAssembly when I

00:09:10.944 --> 00:09:12.545
<v Speaker 0>was trying to learn how to write on

00:09:12.545 --> 00:09:14.785
<v Speaker 0>voice filters using TinyGo.

00:09:15.264 --> 00:09:17.745
<v Speaker 0>That's the Spin project use TinyGo or something

00:09:17.745 --> 00:09:17.985
<v Speaker 0>else.

00:09:19.090 --> 00:09:21.810
<v Speaker 0>Excuse me. Okay. So spin

00:09:22.530 --> 00:09:24.050
<v Speaker 0>allows you to write

00:09:24.450 --> 00:09:27.570
<v Speaker 0>and develop micro services in almost any language.

00:09:27.570 --> 00:09:29.570
<v Speaker 0>And we'll cover a few of the constraints

00:09:29.570 --> 00:09:30.210
<v Speaker 0>there today.

00:09:30.785 --> 00:09:34.145
<v Speaker 0>If you write your spin application using their

00:09:34.145 --> 00:09:37.345
<v Speaker 0>Go SDK, it does use tiny go. Yes.

00:09:38.065 --> 00:09:40.945
<v Speaker 0>It also supports rust out of the box

00:09:41.425 --> 00:09:43.665
<v Speaker 0>and for that you're just using standard rust

00:09:44.030 --> 00:09:44.750
<v Speaker 0>with,

00:09:45.470 --> 00:09:47.710
<v Speaker 0>you know, was a target.

00:09:48.430 --> 00:09:48.990
<v Speaker 0>And

00:09:49.710 --> 00:09:52.910
<v Speaker 0>yeah, really rust makes it really really easy.

00:09:53.230 --> 00:09:54.750
<v Speaker 0>Put on to I go block someone in

00:09:54.750 --> 00:09:55.150
<v Speaker 0>the comment.

00:10:01.024 --> 00:10:02.865
<v Speaker 0>It's not quite made it onto live yet.

00:10:02.865 --> 00:10:04.065
<v Speaker 0>I could just see here.

00:10:04.705 --> 00:10:06.385
<v Speaker 0>I don't have the ability to block from

00:10:06.385 --> 00:10:06.945
<v Speaker 0>here.

00:10:08.705 --> 00:10:10.385
<v Speaker 0>Oh, they've built I think YouTube got them.

00:10:10.385 --> 00:10:12.065
<v Speaker 0>Alright. Thank you YouTube automation.

00:10:13.550 --> 00:10:15.630
<v Speaker 0>So, yeah. It uses technical Rust just uses

00:10:15.630 --> 00:10:18.030
<v Speaker 0>Rust and then any language that really compels

00:10:18.030 --> 00:10:20.030
<v Speaker 0>them to web assembly can be used.

00:10:20.350 --> 00:10:22.590
<v Speaker 0>You won't have access to the same abstractions

00:10:22.590 --> 00:10:24.590
<v Speaker 0>provided by Spin, but you can still do

00:10:24.590 --> 00:10:25.150
<v Speaker 0>a lot of things.

00:10:25.825 --> 00:10:27.584
<v Speaker 0>What I really loved about Spin is that

00:10:27.584 --> 00:10:29.985
<v Speaker 0>different modules can be written in different languages,

00:10:29.985 --> 00:10:31.745
<v Speaker 0>you can still just consume them because once

00:10:31.745 --> 00:10:34.945
<v Speaker 0>you've produced that artifact that target that small

00:10:34.945 --> 00:10:36.945
<v Speaker 0>wasm dot file, you just ship it to

00:10:36.945 --> 00:10:38.865
<v Speaker 0>OCI or somewhere else that can be consumed.

00:10:39.380 --> 00:10:41.380
<v Speaker 0>And I don't know if you're familiar, but

00:10:41.380 --> 00:10:43.700
<v Speaker 0>Docker desktop made a big announcement

00:10:44.020 --> 00:10:45.060
<v Speaker 0>two weeks ago.

00:10:46.180 --> 00:10:48.100
<v Speaker 0>That would be the November for anyone not

00:10:48.100 --> 00:10:50.500
<v Speaker 0>watching his life where they said that actually

00:10:50.500 --> 00:10:53.145
<v Speaker 0>now you can use Docker pull commands to

00:10:53.145 --> 00:10:56.105
<v Speaker 0>pull down WebAssembly boundaries from OCI registries.

00:10:56.425 --> 00:10:59.465
<v Speaker 0>And Docker Hub now supports OCI artifacts. So

00:10:59.465 --> 00:11:01.465
<v Speaker 0>all these things are coming together. And then

00:11:01.465 --> 00:11:04.345
<v Speaker 0>the special sauce from Docker is actually

00:11:04.505 --> 00:11:06.825
<v Speaker 0>you can run containers and WebAssembly side by

00:11:06.825 --> 00:11:08.960
<v Speaker 0>side. So I missed this in an announcement,

00:11:08.960 --> 00:11:10.640
<v Speaker 0>but someone pointed out to me just earlier

00:11:10.640 --> 00:11:11.920
<v Speaker 0>in the week. But you can write a

00:11:11.920 --> 00:11:14.080
<v Speaker 0>Docker Compose file that runs a bunch of

00:11:14.080 --> 00:11:15.760
<v Speaker 0>containers as you always have.

00:11:16.160 --> 00:11:18.720
<v Speaker 0>However, now one of those services could be

00:11:18.720 --> 00:11:20.160
<v Speaker 0>a Wasm binary,

00:11:21.035 --> 00:11:23.195
<v Speaker 0>And it just runs side by side, does

00:11:23.195 --> 00:11:25.675
<v Speaker 0>the thing, and communicate with the other services.

00:11:25.755 --> 00:11:27.595
<v Speaker 0>And I think that's pretty special. And I

00:11:27.595 --> 00:11:30.075
<v Speaker 0>I really I'm really excited now. And I

00:11:30.075 --> 00:11:31.915
<v Speaker 0>I mean, I've always been excited about WebAssembly.

00:11:31.915 --> 00:11:33.675
<v Speaker 0>If you're in my Discord server, you'll you'll

00:11:33.675 --> 00:11:35.835
<v Speaker 0>see many chats about WebAssembly and the things

00:11:35.835 --> 00:11:36.850
<v Speaker 0>that we want to do with it, like

00:11:36.850 --> 00:11:39.570
<v Speaker 0>a trial project and other things. But really

00:11:40.290 --> 00:11:42.530
<v Speaker 0>interesting being able to have a Docker Compose

00:11:42.530 --> 00:11:44.450
<v Speaker 0>file that we know we're comfortable with, we've

00:11:44.450 --> 00:11:46.370
<v Speaker 0>used before, we've been using for years

00:11:47.010 --> 00:11:49.730
<v Speaker 0>and just stick a WebAssembly service into there.

00:11:49.985 --> 00:11:52.305
<v Speaker 0>And that's something I definitely will be exploring

00:11:52.305 --> 00:11:53.825
<v Speaker 0>more on the channel and they come in

00:11:53.825 --> 00:11:55.345
<v Speaker 0>days, weeks, or months.

00:11:55.905 --> 00:11:57.905
<v Speaker 0>So, Mozz, yes. A lot of way of

00:11:57.905 --> 00:12:00.545
<v Speaker 0>saying tiny go is what it uses there.

00:12:01.185 --> 00:12:03.745
<v Speaker 0>Russell's saying thank you for the answer. My

00:12:03.745 --> 00:12:04.065
<v Speaker 0>pleasure.

00:12:04.840 --> 00:12:07.400
<v Speaker 0>And then Russell is saying, I wonder if

00:12:07.400 --> 00:12:09.320
<v Speaker 0>they will tell me team up with Nova.

00:12:10.120 --> 00:12:12.040
<v Speaker 0>Yeah. That project is really cool.

00:12:12.280 --> 00:12:12.520
<v Speaker 0>I'm

00:12:13.320 --> 00:12:14.440
<v Speaker 0>not sure. I've never said it out loud

00:12:14.440 --> 00:12:15.240
<v Speaker 0>before,

00:12:16.040 --> 00:12:18.120
<v Speaker 0>but definitely, you know, we're we're gonna see

00:12:18.120 --> 00:12:18.360
<v Speaker 0>more

00:12:18.995 --> 00:12:23.074
<v Speaker 0>innovation in this space with cohesive multi runtime

00:12:23.074 --> 00:12:25.635
<v Speaker 0>component things happening side by side.

00:12:25.954 --> 00:12:28.274
<v Speaker 0>And I think that's really interesting. So

00:12:30.115 --> 00:12:33.074
<v Speaker 0>let's let's get started. I don't expect to

00:12:33.074 --> 00:12:35.450
<v Speaker 0>do ten to fifteen minutes of questions, but

00:12:35.450 --> 00:12:36.410
<v Speaker 0>really,

00:12:36.410 --> 00:12:38.570
<v Speaker 0>really interesting ones. So thank you both for

00:12:38.570 --> 00:12:39.370
<v Speaker 0>answering

00:12:39.930 --> 00:12:40.730
<v Speaker 0>asking.

00:12:40.890 --> 00:12:43.050
<v Speaker 0>I had fun answering. And if anyone has

00:12:43.050 --> 00:12:44.890
<v Speaker 0>anything else, drop it straight into the comments.

00:12:44.890 --> 00:12:46.570
<v Speaker 0>I always love to kinda sit and talk.

00:12:48.215 --> 00:12:49.575
<v Speaker 0>What I'm gonna do now

00:12:49.735 --> 00:12:51.415
<v Speaker 0>is share my screen.

00:12:53.255 --> 00:12:53.975
<v Speaker 0>And

00:12:57.255 --> 00:12:59.575
<v Speaker 0>I'm gonna pull down our website as well

00:12:59.575 --> 00:13:00.695
<v Speaker 0>while I'm at it.

00:13:02.135 --> 00:13:02.775
<v Speaker 0>There we go.

00:13:04.019 --> 00:13:05.940
<v Speaker 0>So this is the the fermion website at

00:13:05.940 --> 00:13:07.060
<v Speaker 0>fermion.com.

00:13:07.459 --> 00:13:08.980
<v Speaker 0>We're gonna be taking a look at Spin

00:13:08.980 --> 00:13:11.220
<v Speaker 0>today, which is their web assembly framework. It

00:13:11.220 --> 00:13:13.300
<v Speaker 0>allows you to build web assembly applications and

00:13:13.300 --> 00:13:15.300
<v Speaker 0>provides all the craft, the boilerplate, the glue.

00:13:15.585 --> 00:13:18.145
<v Speaker 0>You just focus on that small little bit

00:13:18.145 --> 00:13:20.785
<v Speaker 0>of code that makes up your domain logic.

00:13:21.025 --> 00:13:22.945
<v Speaker 0>This is the promise that we got

00:13:23.265 --> 00:13:26.305
<v Speaker 0>from Lambda and serverless functions and fast,

00:13:26.785 --> 00:13:29.425
<v Speaker 0>but I've never really seen that backed up

00:13:29.425 --> 00:13:31.640
<v Speaker 0>with a strong developer experience like we're gonna

00:13:31.640 --> 00:13:33.000
<v Speaker 0>see with Spin today.

00:13:33.320 --> 00:13:34.600
<v Speaker 0>And this is

00:13:34.920 --> 00:13:37.320
<v Speaker 0>best developer experience about local and ship into

00:13:37.320 --> 00:13:39.480
<v Speaker 0>production is why I'm so interested in this

00:13:39.480 --> 00:13:40.120
<v Speaker 0>space.

00:13:41.480 --> 00:13:43.720
<v Speaker 0>So as we can see here, it is

00:13:43.720 --> 00:13:44.360
<v Speaker 0>a

00:13:44.955 --> 00:13:48.715
<v Speaker 0>framework for building event driven microservice applications with

00:13:48.715 --> 00:13:50.395
<v Speaker 0>web assembly component.

00:13:50.635 --> 00:13:53.355
<v Speaker 0>Now this day event driven and that is

00:13:53.355 --> 00:13:54.955
<v Speaker 0>very important because

00:13:55.595 --> 00:13:57.035
<v Speaker 0>the spin application,

00:13:57.035 --> 00:13:58.555
<v Speaker 0>and this comes back to the reason of

00:13:58.555 --> 00:14:02.150
<v Speaker 0>using Nomad. The Spin application is not just

00:14:02.470 --> 00:14:04.870
<v Speaker 0>a service that runs perpetually

00:14:05.190 --> 00:14:06.390
<v Speaker 0>and consistently.

00:14:07.110 --> 00:14:08.470
<v Speaker 0>A Spin application

00:14:08.790 --> 00:14:09.750
<v Speaker 0>responds

00:14:09.750 --> 00:14:12.630
<v Speaker 0>to either a Redis queue, something an end

00:14:12.630 --> 00:14:15.995
<v Speaker 0>to a Redis queue, or an HTTP request.

00:14:16.795 --> 00:14:18.635
<v Speaker 0>And, looking back to the interview that I

00:14:18.635 --> 00:14:20.555
<v Speaker 0>had, why Radu was so excited about this

00:14:20.555 --> 00:14:22.075
<v Speaker 0>model is that they can spin up a

00:14:22.075 --> 00:14:24.955
<v Speaker 0>WebAssembly module in under a millisecond, which means

00:14:25.435 --> 00:14:27.755
<v Speaker 0>they provide the HTTP interface, and they provide

00:14:27.755 --> 00:14:29.035
<v Speaker 0>the Redis interface.

00:14:29.730 --> 00:14:31.649
<v Speaker 0>And if you have either of those, and

00:14:31.649 --> 00:14:33.889
<v Speaker 0>under a millisecond, they can launch an entirely

00:14:33.889 --> 00:14:36.769
<v Speaker 0>new WebAssembly instance of the application,

00:14:37.250 --> 00:14:39.970
<v Speaker 0>pass in the request, the response, shut it

00:14:39.970 --> 00:14:42.209
<v Speaker 0>down, clean it up, garbage collect, and it's

00:14:42.209 --> 00:14:42.610
<v Speaker 0>just done.

00:14:44.115 --> 00:14:45.475
<v Speaker 0>This is really cool.

00:14:45.715 --> 00:14:48.355
<v Speaker 0>With FaaS built on top of containers, we've

00:14:48.355 --> 00:14:49.955
<v Speaker 0>always had to struggle and fight with the

00:14:49.955 --> 00:14:51.155
<v Speaker 0>cold start problem.

00:14:52.035 --> 00:14:53.795
<v Speaker 0>And the cold start problem again comes back

00:14:53.795 --> 00:14:55.795
<v Speaker 0>to it takes hundreds of milliseconds to start

00:14:55.795 --> 00:14:56.275
<v Speaker 0>a container.

00:14:57.000 --> 00:14:58.440
<v Speaker 0>So I either run

00:14:58.600 --> 00:15:00.200
<v Speaker 0>these serverless functions

00:15:00.520 --> 00:15:02.840
<v Speaker 0>on an endless loop and I scale them

00:15:02.840 --> 00:15:05.160
<v Speaker 0>to what I need and I reuse connections

00:15:05.160 --> 00:15:07.960
<v Speaker 0>whenever possible. Again, violating this

00:15:08.280 --> 00:15:10.120
<v Speaker 0>CGI model that we're trying to get to

00:15:10.120 --> 00:15:11.800
<v Speaker 0>a serverless where everything is handled by its

00:15:11.800 --> 00:15:12.120
<v Speaker 0>own

00:15:12.615 --> 00:15:13.575
<v Speaker 0>instant.

00:15:14.615 --> 00:15:16.214
<v Speaker 0>If that's there to solve that cold start

00:15:16.214 --> 00:15:19.175
<v Speaker 0>problem. And with WebAssembly, that goes away because

00:15:19.175 --> 00:15:21.334
<v Speaker 0>the runtime is just that fast. Then you

00:15:21.334 --> 00:15:23.415
<v Speaker 0>use this wasm time under the hood,

00:15:23.895 --> 00:15:26.375
<v Speaker 0>which is a WebAssembly runtime written in Rust.

00:15:28.060 --> 00:15:30.380
<v Speaker 0>So I've already installed Spin. The instructions are

00:15:30.380 --> 00:15:30.860
<v Speaker 0>here.

00:15:31.339 --> 00:15:32.620
<v Speaker 0>As far as the structure of a Spin

00:15:32.620 --> 00:15:34.779
<v Speaker 0>application goes, we do have a dot TOML,

00:15:34.779 --> 00:15:36.700
<v Speaker 0>and then we just have some Rust code.

00:15:36.700 --> 00:15:38.700
<v Speaker 0>And look at this handler. How nice is

00:15:38.700 --> 00:15:40.700
<v Speaker 0>this? Now I'm a huge fan of Rust.

00:15:40.700 --> 00:15:41.740
<v Speaker 0>I'm always talking about Rust,

00:15:42.665 --> 00:15:45.704
<v Speaker 0>But this is just cool because there's a

00:15:45.704 --> 00:15:47.625
<v Speaker 0>few things here that are very rusty.

00:15:48.824 --> 00:15:50.505
<v Speaker 0>Excuse me. I've got terrible cough today.

00:15:51.144 --> 00:15:53.785
<v Speaker 0>First, we have this macro that surrounds our

00:15:53.785 --> 00:15:54.105
<v Speaker 0>function.

00:15:55.379 --> 00:15:57.300
<v Speaker 0>Let's come back to that in a moment

00:15:57.300 --> 00:15:59.620
<v Speaker 0>and kinda understand what Rust is doing there.

00:16:00.259 --> 00:16:02.500
<v Speaker 0>But our function again has a very simple

00:16:02.579 --> 00:16:03.459
<v Speaker 0>interface

00:16:04.100 --> 00:16:06.180
<v Speaker 0>as well. It receives a request that returns

00:16:06.180 --> 00:16:07.139
<v Speaker 0>a result response.

00:16:07.655 --> 00:16:09.255
<v Speaker 0>Don't worry about the result if you're not

00:16:09.255 --> 00:16:11.095
<v Speaker 0>from the Rust ecosystem, it's just an okay

00:16:11.095 --> 00:16:11.815
<v Speaker 0>triple,

00:16:12.215 --> 00:16:13.815
<v Speaker 0>but it just takes a request and spits

00:16:13.815 --> 00:16:14.775
<v Speaker 0>out a response.

00:16:15.495 --> 00:16:17.975
<v Speaker 0>You know? HTTP in, HTTP out.

00:16:18.695 --> 00:16:21.095
<v Speaker 0>Then ignoring the okay, which is just again

00:16:21.095 --> 00:16:22.055
<v Speaker 0>our okay triple,

00:16:22.900 --> 00:16:25.140
<v Speaker 0>We just say here, wanna return an HTTP

00:16:25.140 --> 00:16:27.700
<v Speaker 0>response, Rust provides a builder for this. We

00:16:27.700 --> 00:16:29.620
<v Speaker 0>set the status to 200 and we return

00:16:29.620 --> 00:16:32.260
<v Speaker 0>hello fermion as a string. We use n

00:16:32.260 --> 00:16:33.860
<v Speaker 0>two just to cast it into an actual

00:16:33.860 --> 00:16:36.020
<v Speaker 0>string object instead of a Rust

00:16:36.785 --> 00:16:39.265
<v Speaker 0>more primitive string object regardless, you're gonna note

00:16:39.265 --> 00:16:41.105
<v Speaker 0>it. And then the question mark is just

00:16:41.105 --> 00:16:42.625
<v Speaker 0>to do some basic error handling in case

00:16:42.625 --> 00:16:44.225
<v Speaker 0>any of that fails, which it really shouldn't

00:16:44.225 --> 00:16:45.185
<v Speaker 0>in this case.

00:16:46.145 --> 00:16:49.185
<v Speaker 0>So we're only focusing on what we need

00:16:49.185 --> 00:16:50.545
<v Speaker 0>to relay to the user.

00:16:51.290 --> 00:16:54.010
<v Speaker 0>This macro is what provides all the boilerplate.

00:16:54.570 --> 00:16:56.890
<v Speaker 0>This is the procedural macro and injects all

00:16:56.890 --> 00:16:58.410
<v Speaker 0>the code into this function to make everything

00:16:58.410 --> 00:17:00.090
<v Speaker 0>work and make sure that the request and

00:17:00.090 --> 00:17:01.690
<v Speaker 0>response are handled appropriately.

00:17:01.770 --> 00:17:03.530
<v Speaker 0>Can't don't need to do anything. When we

00:17:03.530 --> 00:17:05.645
<v Speaker 0>have rust and the ability to do the

00:17:05.645 --> 00:17:07.565
<v Speaker 0>level of meta programming where we use macros

00:17:07.565 --> 00:17:09.405
<v Speaker 0>to define boilerplate and keep it out of

00:17:09.405 --> 00:17:11.244
<v Speaker 0>our domain logic applications, we get a very

00:17:11.244 --> 00:17:13.005
<v Speaker 0>clean interface to build application.

00:17:13.645 --> 00:17:15.165
<v Speaker 0>And our microservices

00:17:15.165 --> 00:17:16.605
<v Speaker 0>and the spin environment

00:17:16.765 --> 00:17:17.404
<v Speaker 0>are

00:17:18.045 --> 00:17:18.925
<v Speaker 0>many of these.

00:17:19.970 --> 00:17:22.369
<v Speaker 0>Every issue to be endpoint potentially

00:17:22.450 --> 00:17:24.210
<v Speaker 0>that we want to handle has an issue

00:17:24.210 --> 00:17:25.569
<v Speaker 0>to be component function.

00:17:25.890 --> 00:17:27.730
<v Speaker 0>We can register the path for all of

00:17:27.730 --> 00:17:28.690
<v Speaker 0>these functions

00:17:29.170 --> 00:17:31.410
<v Speaker 0>and the spin dot toml and away we

00:17:31.410 --> 00:17:31.570
<v Speaker 0>go.

00:17:32.295 --> 00:17:34.695
<v Speaker 0>The manifest itself for the spend dot toml

00:17:34.775 --> 00:17:37.255
<v Speaker 0>just needs a spend version, a name, and

00:17:37.255 --> 00:17:38.935
<v Speaker 0>then we can set up the trigger. So

00:17:38.935 --> 00:17:41.335
<v Speaker 0>the trigger at the moment can be HTTP

00:17:41.335 --> 00:17:42.295
<v Speaker 0>and Redis.

00:17:42.375 --> 00:17:44.135
<v Speaker 0>They are working on more support and I'm

00:17:44.135 --> 00:17:46.135
<v Speaker 0>pushing for some cron style scheduling so I

00:17:46.135 --> 00:17:47.415
<v Speaker 0>can do some weird and cool stuff as

00:17:47.415 --> 00:17:49.470
<v Speaker 0>well. And you can set a base if

00:17:49.470 --> 00:17:50.910
<v Speaker 0>you're gonna can, you know, if you wanna

00:17:50.910 --> 00:17:51.710
<v Speaker 0>compound

00:17:53.070 --> 00:17:54.910
<v Speaker 0>multiple spin applications together, they all have a

00:17:54.910 --> 00:17:56.030
<v Speaker 0>different base, but then they all have sub

00:17:56.030 --> 00:17:57.950
<v Speaker 0>pass within that, you know, the the architecture,

00:17:57.950 --> 00:17:59.550
<v Speaker 0>the flexibility, whatever you need to do, you

00:17:59.550 --> 00:18:00.030
<v Speaker 0>can really do.

00:18:00.855 --> 00:18:02.695
<v Speaker 0>From there, we specify the component and the

00:18:02.695 --> 00:18:04.774
<v Speaker 0>trigger and away we go.

00:18:07.575 --> 00:18:09.015
<v Speaker 0>Shouldn't talk so much when I have a

00:18:09.015 --> 00:18:11.095
<v Speaker 0>cough. This is why I have guests so

00:18:11.095 --> 00:18:12.455
<v Speaker 0>that I can sit in silence for a

00:18:12.455 --> 00:18:12.775
<v Speaker 0>little bit.

00:18:14.260 --> 00:18:16.180
<v Speaker 0>Alright. So that's gonna be the basics. If

00:18:16.180 --> 00:18:18.100
<v Speaker 0>we take a look at the language support,

00:18:18.260 --> 00:18:19.620
<v Speaker 0>we've got the Rust one which we kinda

00:18:19.620 --> 00:18:21.380
<v Speaker 0>covered. The only thing you really need to

00:18:21.380 --> 00:18:23.300
<v Speaker 0>do is Rust up at a target for

00:18:23.300 --> 00:18:24.820
<v Speaker 0>WASM 32 Wazi.

00:18:24.900 --> 00:18:26.340
<v Speaker 0>This is all you need to compile any

00:18:26.340 --> 00:18:29.995
<v Speaker 0>Rust program to VASI and to VASI spec.

00:18:30.075 --> 00:18:31.275
<v Speaker 0>It works really nice.

00:18:31.595 --> 00:18:33.035
<v Speaker 0>You can see the exact same code from

00:18:33.035 --> 00:18:34.315
<v Speaker 0>here, only this time we have to use

00:18:34.315 --> 00:18:36.235
<v Speaker 0>statements to show that we are pulling on

00:18:36.235 --> 00:18:39.115
<v Speaker 0>the Spin SDK, which provides the HTTP component

00:18:39.115 --> 00:18:39.915
<v Speaker 0>macro

00:18:40.155 --> 00:18:42.475
<v Speaker 0>and the request and the response types that

00:18:42.475 --> 00:18:44.580
<v Speaker 0>we are using within our application.

00:18:45.620 --> 00:18:47.860
<v Speaker 0>If we pop over to go, things are

00:18:47.860 --> 00:18:49.059
<v Speaker 0>a little bit similar.

00:18:50.820 --> 00:18:52.260
<v Speaker 0>Yep. Here we go. We pull in the

00:18:52.260 --> 00:18:54.740
<v Speaker 0>SDK and the go away way. We have

00:18:54.740 --> 00:18:56.580
<v Speaker 0>an edit function and a main function.

00:18:57.674 --> 00:18:59.274
<v Speaker 0>So this is just setting up. So guess

00:18:59.274 --> 00:18:59.595
<v Speaker 0>it's the

00:19:00.394 --> 00:19:02.394
<v Speaker 0>yeah. This is our actual

00:19:02.394 --> 00:19:04.154
<v Speaker 0>response and then the main would have the

00:19:04.154 --> 00:19:06.075
<v Speaker 0>boilerplate that you would need to handle it.

00:19:06.154 --> 00:19:07.434
<v Speaker 0>I wonder if that could be done with

00:19:07.434 --> 00:19:09.195
<v Speaker 0>go generate. I've not actually played with the

00:19:09.195 --> 00:19:10.794
<v Speaker 0>go SDK a whole

00:19:11.034 --> 00:19:11.674
<v Speaker 0>lot

00:19:12.570 --> 00:19:14.570
<v Speaker 0>because whenever I see Rust is available, I

00:19:14.570 --> 00:19:16.009
<v Speaker 0>generally just go straight for Rust.

00:19:16.410 --> 00:19:18.090
<v Speaker 0>The only time I don't go straight for

00:19:18.090 --> 00:19:19.770
<v Speaker 0>Rust would be if there was a TypeScript

00:19:19.770 --> 00:19:23.129
<v Speaker 0>SDK and you can't do spin applications and

00:19:23.130 --> 00:19:24.009
<v Speaker 0>TypeScript,

00:19:24.169 --> 00:19:25.605
<v Speaker 0>but I don't think the SDK is there

00:19:25.605 --> 00:19:27.605
<v Speaker 0>with the abstractions to make things simpler.

00:19:28.005 --> 00:19:29.605
<v Speaker 0>As far as other languages, they do have

00:19:29.605 --> 00:19:31.045
<v Speaker 0>a whole bunch of examples.

00:19:32.085 --> 00:19:33.445
<v Speaker 0>Where's the link?

00:19:36.430 --> 00:19:38.110
<v Speaker 0>You know what, I am just gonna

00:19:38.750 --> 00:19:41.070
<v Speaker 0>go get hub, fermions,

00:19:41.230 --> 00:19:41.789
<v Speaker 0>then

00:19:42.270 --> 00:19:44.350
<v Speaker 0>there's a examples directory,

00:19:44.350 --> 00:19:46.190
<v Speaker 0>I'm sure. There we go.

00:19:47.390 --> 00:19:48.830
<v Speaker 0>And here we can see if we wanna

00:19:48.830 --> 00:19:50.590
<v Speaker 0>take a look at watch.

00:19:52.355 --> 00:19:53.955
<v Speaker 0>Oh, no. That is just a rust and

00:19:53.955 --> 00:19:54.594
<v Speaker 0>things.

00:19:56.274 --> 00:19:58.594
<v Speaker 0>It shows there's a green example somewhere.

00:19:58.995 --> 00:20:01.315
<v Speaker 0>Yeah. Okay. Yeah. And templates then.

00:20:01.554 --> 00:20:02.754
<v Speaker 0>If you wanna use green,

00:20:04.320 --> 00:20:05.360
<v Speaker 0>then we can take a look at the

00:20:05.360 --> 00:20:05.999
<v Speaker 0>file.

00:20:06.320 --> 00:20:08.559
<v Speaker 0>We just do print, hello world, and that's

00:20:08.559 --> 00:20:11.120
<v Speaker 0>enough. If we wanna do something with Zig,

00:20:11.120 --> 00:20:13.120
<v Speaker 0>which is another really cool language that's coming

00:20:13.120 --> 00:20:15.120
<v Speaker 0>out in this kind of systems programming space,

00:20:15.705 --> 00:20:16.985
<v Speaker 0>And we can take a look at this

00:20:16.985 --> 00:20:18.345
<v Speaker 0>example here.

00:20:18.825 --> 00:20:20.265
<v Speaker 0>So all we're doing is we don't have

00:20:20.265 --> 00:20:21.624
<v Speaker 0>the SDK here

00:20:21.705 --> 00:20:22.744
<v Speaker 0>to mimic

00:20:22.904 --> 00:20:23.705
<v Speaker 0>the

00:20:24.105 --> 00:20:27.385
<v Speaker 0>response and request obstructions provided by Rust about

00:20:27.385 --> 00:20:28.985
<v Speaker 0>the the Go SDKs. However,

00:20:30.630 --> 00:20:32.070
<v Speaker 0>if we think about what a web server

00:20:32.070 --> 00:20:33.190
<v Speaker 0>is actually doing,

00:20:33.910 --> 00:20:35.910
<v Speaker 0>which is parsing a string that comes in,

00:20:35.910 --> 00:20:37.990
<v Speaker 0>which is an HTTP protocol string, which is

00:20:37.990 --> 00:20:40.870
<v Speaker 0>mostly text based unless it's it's not semantics.

00:20:40.870 --> 00:20:42.230
<v Speaker 0>I'm not going to right now. And then

00:20:42.230 --> 00:20:44.025
<v Speaker 0>we spent the text back out. So here

00:20:44.025 --> 00:20:45.945
<v Speaker 0>we're just saying here's the content header, here's

00:20:45.945 --> 00:20:47.785
<v Speaker 0>the hello world, and let it handle the

00:20:47.785 --> 00:20:49.385
<v Speaker 0>rest. So you can kinda do whatever you

00:20:49.385 --> 00:20:51.385
<v Speaker 0>want as long as your language does support

00:20:51.385 --> 00:20:54.185
<v Speaker 0>it, but it's probably best to stick to

00:20:54.185 --> 00:20:55.225
<v Speaker 0>the SDKs.

00:20:55.465 --> 00:20:57.465
<v Speaker 0>And I do think more SDKs will be

00:20:57.465 --> 00:20:58.665
<v Speaker 0>added into course.

00:20:59.400 --> 00:21:01.400
<v Speaker 0>And that's just our Swift example.

00:21:01.400 --> 00:21:02.040
<v Speaker 0>Nice.

00:21:03.400 --> 00:21:04.200
<v Speaker 0>Alright.

00:21:04.360 --> 00:21:06.040
<v Speaker 0>We got another question

00:21:06.520 --> 00:21:07.640
<v Speaker 0>from Russell.

00:21:13.135 --> 00:21:13.855
<v Speaker 0>Okay.

00:21:14.175 --> 00:21:15.615
<v Speaker 0>Is it either to have lots of functions

00:21:15.615 --> 00:21:17.055
<v Speaker 0>on one spin app rather than having lots

00:21:17.055 --> 00:21:19.135
<v Speaker 0>of spin apps? No. I don't think so.

00:21:20.335 --> 00:21:22.095
<v Speaker 0>That was just me yapping my mouth too

00:21:22.095 --> 00:21:23.855
<v Speaker 0>much. I would probably just have a spin

00:21:23.855 --> 00:21:26.495
<v Speaker 0>application for each endpoint because it's so easy

00:21:26.495 --> 00:21:26.895
<v Speaker 0>to do.

00:21:27.540 --> 00:21:29.620
<v Speaker 0>And then a mono repo environment where you

00:21:29.620 --> 00:21:30.980
<v Speaker 0>can share a

00:21:31.540 --> 00:21:33.700
<v Speaker 0>whole bunch of type descriptors whatever language they

00:21:33.700 --> 00:21:35.220
<v Speaker 0>happen to be, whether that

00:21:35.460 --> 00:21:37.700
<v Speaker 0>whether it's generating from Probus or JSON Schema

00:21:37.700 --> 00:21:39.300
<v Speaker 0>or whatever, I would just go down that

00:21:39.300 --> 00:21:41.855
<v Speaker 0>approach. Spin applications are so lightweight, They're very

00:21:41.855 --> 00:21:44.015
<v Speaker 0>easy to develop. I've I'd wanna be able

00:21:44.015 --> 00:21:44.975
<v Speaker 0>to test them

00:21:45.215 --> 00:21:47.055
<v Speaker 0>in a very easy manner, and I would

00:21:47.055 --> 00:21:48.495
<v Speaker 0>just have dozens

00:21:48.735 --> 00:21:50.175
<v Speaker 0>of spin applications

00:21:50.495 --> 00:21:52.575
<v Speaker 0>rather than lots of functions within a single

00:21:52.575 --> 00:21:53.215
<v Speaker 0>spin application.

00:21:54.730 --> 00:21:56.170
<v Speaker 0>It just means that you spin application is

00:21:56.170 --> 00:21:57.929
<v Speaker 0>gonna get us on different prefix

00:21:57.929 --> 00:21:58.730
<v Speaker 0>potentially,

00:21:58.730 --> 00:22:00.330
<v Speaker 0>but, yeah, that's fine.

00:22:01.850 --> 00:22:03.129
<v Speaker 0>Alright. So let's

00:22:03.610 --> 00:22:05.770
<v Speaker 0>just see the, you know, I I kinda

00:22:05.770 --> 00:22:07.370
<v Speaker 0>said at the start here, the developer experience

00:22:07.370 --> 00:22:09.135
<v Speaker 0>is what's really pushing me to do more

00:22:09.135 --> 00:22:10.735
<v Speaker 0>of a spin. So let's take a look

00:22:10.735 --> 00:22:13.135
<v Speaker 0>at that. We can run spin new.

00:22:14.335 --> 00:22:15.295
<v Speaker 0>Let me find

00:22:16.175 --> 00:22:17.135
<v Speaker 0>a bit bigger.

00:22:17.775 --> 00:22:19.695
<v Speaker 0>We see all the templates from the repository.

00:22:19.695 --> 00:22:21.215
<v Speaker 0>Now we've already looked at a few of

00:22:21.215 --> 00:22:21.455
<v Speaker 0>these.

00:22:22.500 --> 00:22:24.580
<v Speaker 0>So let's just say we're gonna do

00:22:26.660 --> 00:22:28.180
<v Speaker 0>we actually did look oh, we never looked

00:22:28.180 --> 00:22:29.860
<v Speaker 0>at c because why would you?

00:22:30.180 --> 00:22:31.540
<v Speaker 0>So we can just do h t p

00:22:31.540 --> 00:22:32.980
<v Speaker 0>c. You

00:22:33.540 --> 00:22:35.060
<v Speaker 0>can do it with spin new and then

00:22:35.060 --> 00:22:37.565
<v Speaker 0>just hit return or you can do

00:22:38.205 --> 00:22:40.765
<v Speaker 0>spin new and then the template name. Here,

00:22:40.765 --> 00:22:43.005
<v Speaker 0>I'll just say example c spin.

00:22:45.565 --> 00:22:46.845
<v Speaker 0>We do some stuff.

00:22:47.725 --> 00:22:48.765
<v Speaker 0>Get a directory.

00:22:49.980 --> 00:22:52.059
<v Speaker 0>We have our spend dot TOML.

00:22:52.940 --> 00:22:54.780
<v Speaker 0>So this is just the spin version, sets

00:22:54.780 --> 00:22:56.780
<v Speaker 0>up the offers and description, the h t

00:22:56.780 --> 00:22:59.419
<v Speaker 0>p trigger with base, and then here is

00:22:59.420 --> 00:23:00.460
<v Speaker 0>the component.

00:23:00.540 --> 00:23:02.460
<v Speaker 0>So we're gonna compile our c application to

00:23:02.460 --> 00:23:04.140
<v Speaker 0>provide something called main dot wasm.

00:23:04.605 --> 00:23:06.684
<v Speaker 0>We set up the more trigger stuff. Waggy

00:23:06.684 --> 00:23:07.725
<v Speaker 0>is a

00:23:09.165 --> 00:23:10.845
<v Speaker 0>is a predecessor

00:23:11.565 --> 00:23:13.884
<v Speaker 0>to the Fermion platform,

00:23:15.485 --> 00:23:17.725
<v Speaker 0>but Spin and the Fermion platform can still

00:23:17.725 --> 00:23:20.550
<v Speaker 0>run Waggy application just fine because the CGI

00:23:20.550 --> 00:23:22.789
<v Speaker 0>interface has not really changed that much.

00:23:23.430 --> 00:23:25.030
<v Speaker 0>And then we describe the command used to

00:23:25.030 --> 00:23:26.549
<v Speaker 0>build it. So again, any

00:23:27.030 --> 00:23:29.430
<v Speaker 0>language that can compile to WebAssembly, you can

00:23:29.430 --> 00:23:32.425
<v Speaker 0>set a component build command like so. And

00:23:32.425 --> 00:23:34.185
<v Speaker 0>here we're using Zig to actually compile the

00:23:34.185 --> 00:23:36.025
<v Speaker 0>c to web assembly, which is a cool

00:23:36.025 --> 00:23:37.865
<v Speaker 0>new trick. And we get the main dot

00:23:37.865 --> 00:23:39.065
<v Speaker 0>wasm and it works.

00:23:40.185 --> 00:23:41.385
<v Speaker 0>But that's

00:23:41.465 --> 00:23:44.185
<v Speaker 0>pretty boring. So I wanna run through something

00:23:44.185 --> 00:23:46.585
<v Speaker 0>that I have in playing with.

00:23:47.360 --> 00:23:48.000
<v Speaker 0>So

00:23:49.520 --> 00:23:51.760
<v Speaker 0>on the Fermion

00:23:52.560 --> 00:23:53.600
<v Speaker 0>documentation,

00:23:57.440 --> 00:24:00.320
<v Speaker 0>one directory too high. So let's go up.

00:24:00.480 --> 00:24:02.000
<v Speaker 0>Because there's more to this project than the

00:24:02.000 --> 00:24:04.505
<v Speaker 0>spin up. On the Fairmain documentation,

00:24:04.505 --> 00:24:06.825
<v Speaker 0>they run you through both my URL shortener.

00:24:06.905 --> 00:24:10.184
<v Speaker 0>And the URL shortener only accepts static routes.

00:24:10.184 --> 00:24:11.385
<v Speaker 0>And what I mean by that is it

00:24:11.385 --> 00:24:12.585
<v Speaker 0>only responds

00:24:12.985 --> 00:24:14.105
<v Speaker 0>to requests

00:24:14.665 --> 00:24:17.080
<v Speaker 0>with roots that are hard coded. The slash

00:24:17.080 --> 00:24:18.040
<v Speaker 0>hello

00:24:18.040 --> 00:24:20.360
<v Speaker 0>returns to here. And that's fine,

00:24:21.000 --> 00:24:21.639
<v Speaker 0>but

00:24:22.440 --> 00:24:24.040
<v Speaker 0>being very selfish, I have a use case

00:24:24.040 --> 00:24:25.080
<v Speaker 0>where I need

00:24:26.360 --> 00:24:27.080
<v Speaker 0>very

00:24:27.794 --> 00:24:30.115
<v Speaker 0>static length. Yes. But I also wanna be

00:24:30.115 --> 00:24:32.835
<v Speaker 0>able to use an API to programmatically create

00:24:32.835 --> 00:24:33.554
<v Speaker 0>links.

00:24:34.115 --> 00:24:35.715
<v Speaker 0>And I thought, well, why can't I do

00:24:35.715 --> 00:24:36.754
<v Speaker 0>this with Spin?

00:24:37.315 --> 00:24:38.835
<v Speaker 0>So that's what we're gonna take a look

00:24:38.835 --> 00:24:39.075
<v Speaker 0>at.

00:24:40.049 --> 00:24:41.409
<v Speaker 0>So the first thing I did because I

00:24:41.409 --> 00:24:43.169
<v Speaker 0>like to over engineer everything that I do

00:24:43.169 --> 00:24:45.169
<v Speaker 0>is I set up a Prisma project.

00:24:46.370 --> 00:24:47.649
<v Speaker 0>In fact, I probably shouldn't do it that

00:24:47.649 --> 00:24:49.010
<v Speaker 0>way. Should change the font size.

00:24:51.945 --> 00:24:54.184
<v Speaker 0>I was actually coding for a change, so

00:24:54.184 --> 00:24:55.544
<v Speaker 0>my settings are less

00:24:55.865 --> 00:24:57.224
<v Speaker 0>livestream ready.

00:24:58.345 --> 00:25:00.345
<v Speaker 0>I set up a Prisma because I love

00:25:00.345 --> 00:25:02.744
<v Speaker 0>Prisma. Prisma allows me to describe

00:25:02.904 --> 00:25:05.384
<v Speaker 0>my database tables and it manages all the

00:25:05.384 --> 00:25:07.225
<v Speaker 0>migrations for me, applies them to the remote

00:25:07.225 --> 00:25:07.625
<v Speaker 0>clusters.

00:25:08.250 --> 00:25:09.530
<v Speaker 0>This is set up to use a local

00:25:09.530 --> 00:25:12.809
<v Speaker 0>post res right now. However, I did experiment

00:25:13.370 --> 00:25:15.210
<v Speaker 0>with Prisma against CockroachDB,

00:25:15.210 --> 00:25:16.730
<v Speaker 0>and it just worked. So

00:25:17.210 --> 00:25:18.090
<v Speaker 0>we can

00:25:18.410 --> 00:25:20.490
<v Speaker 0>use Prisma to speak to our database.

00:25:20.650 --> 00:25:21.850
<v Speaker 0>We describe our models,

00:25:22.475 --> 00:25:24.555
<v Speaker 0>and it manages the migrations for us. If

00:25:24.555 --> 00:25:26.395
<v Speaker 0>I pop open the migrations folder,

00:25:27.675 --> 00:25:30.475
<v Speaker 0>we have an SQL statement that says, hey.

00:25:30.475 --> 00:25:32.635
<v Speaker 0>We're gonna create this redirect table with these

00:25:32.635 --> 00:25:35.195
<v Speaker 0>fields. And every time I change my Prisma

00:25:35.195 --> 00:25:37.220
<v Speaker 0>dot schema, I can have it generate a

00:25:37.220 --> 00:25:39.779
<v Speaker 0>new migration where it calculates what has changed

00:25:40.100 --> 00:25:42.580
<v Speaker 0>and then always has to kind of upscale

00:25:42.580 --> 00:25:44.339
<v Speaker 0>and modify your

00:25:45.139 --> 00:25:48.419
<v Speaker 0>remote database schema, thingy, cluster, postgres,

00:25:48.500 --> 00:25:50.979
<v Speaker 0>cockroach, whatever, to be the current version.

00:25:52.019 --> 00:25:53.595
<v Speaker 0>What What I've also been experiment with and

00:25:53.595 --> 00:25:54.955
<v Speaker 0>I haven't got working yet, but I'm gonna

00:25:54.955 --> 00:25:57.435
<v Speaker 0>keep hacking on this, is Prisma comes with

00:25:57.435 --> 00:25:59.035
<v Speaker 0>a concept of a generator.

00:25:59.675 --> 00:26:01.435
<v Speaker 0>And here, we're actually saying that we're gonna

00:26:01.435 --> 00:26:03.275
<v Speaker 0>just use the provider, which is a command.

00:26:03.275 --> 00:26:05.435
<v Speaker 0>We're gonna use a cargo command called Prisma,

00:26:05.435 --> 00:26:06.635
<v Speaker 0>which is actually an alias

00:26:06.980 --> 00:26:08.340
<v Speaker 0>to run a

00:26:08.660 --> 00:26:10.580
<v Speaker 0>main dot r s here, which is a

00:26:10.580 --> 00:26:12.340
<v Speaker 0>Prisma client CLI.

00:26:12.660 --> 00:26:13.700
<v Speaker 0>So there is

00:26:14.660 --> 00:26:16.580
<v Speaker 0>no. That's the generic code.

00:26:16.740 --> 00:26:17.460
<v Speaker 0>So

00:26:18.100 --> 00:26:21.220
<v Speaker 0>this generator is gonna generate a Rust client

00:26:21.220 --> 00:26:24.304
<v Speaker 0>to speak to our postgres database or our

00:26:24.304 --> 00:26:26.065
<v Speaker 0>cockroach DB cloud database.

00:26:26.705 --> 00:26:29.184
<v Speaker 0>I've had some problems getting it to compile

00:26:29.585 --> 00:26:31.504
<v Speaker 0>to the was a spec or to a

00:26:31.504 --> 00:26:32.544
<v Speaker 0>was a target

00:26:32.865 --> 00:26:35.904
<v Speaker 0>and that's because the Rust client is using

00:26:35.904 --> 00:26:39.159
<v Speaker 0>some features of Tokyo that aren't compatible yet

00:26:39.159 --> 00:26:41.559
<v Speaker 0>with the Wazi compilation target.

00:26:42.200 --> 00:26:43.960
<v Speaker 0>I think there's other ways to go around

00:26:43.960 --> 00:26:45.480
<v Speaker 0>this, but it's gonna require a little bit

00:26:45.480 --> 00:26:46.919
<v Speaker 0>more time and effort, but I'm gonna keep

00:26:46.919 --> 00:26:48.279
<v Speaker 0>working on it and hopefully I can share

00:26:48.279 --> 00:26:49.960
<v Speaker 0>some updates in the coming days and weeks.

00:26:50.935 --> 00:26:53.095
<v Speaker 0>But we can generate a client. So if

00:26:53.095 --> 00:26:54.935
<v Speaker 0>we pop open this Prisma.rs,

00:26:54.935 --> 00:26:55.895
<v Speaker 0>what we have here

00:26:56.375 --> 00:26:58.534
<v Speaker 0>is a bespoke generated

00:26:58.535 --> 00:27:01.175
<v Speaker 0>client in Rust to speak to my database

00:27:01.175 --> 00:27:02.294
<v Speaker 0>with that kind of

00:27:02.775 --> 00:27:04.690
<v Speaker 0>not like an active record model, but very

00:27:04.690 --> 00:27:06.450
<v Speaker 0>similar. It gives you the ability to find

00:27:06.450 --> 00:27:08.210
<v Speaker 0>things very quickly. It gives you the ability

00:27:08.210 --> 00:27:10.610
<v Speaker 0>to do upsets and inserts and deletes.

00:27:10.770 --> 00:27:12.690
<v Speaker 0>You just got a very good interface to

00:27:12.690 --> 00:27:14.530
<v Speaker 0>working with your cluster.

00:27:14.770 --> 00:27:16.705
<v Speaker 0>Here I can see, you know, equals or

00:27:16.705 --> 00:27:18.785
<v Speaker 0>maybe order something or is it in a

00:27:18.785 --> 00:27:19.985
<v Speaker 0>vector or is it not in a vector?

00:27:19.985 --> 00:27:22.545
<v Speaker 0>Is it less than? Exactly. This

00:27:22.785 --> 00:27:25.345
<v Speaker 0>functional based approach to communicate in a query

00:27:25.345 --> 00:27:27.505
<v Speaker 0>in a database is very nice. So hopefully

00:27:27.505 --> 00:27:28.465
<v Speaker 0>I get it working.

00:27:28.945 --> 00:27:29.665
<v Speaker 0>However,

00:27:29.905 --> 00:27:31.025
<v Speaker 0>I can run

00:27:31.740 --> 00:27:33.340
<v Speaker 0>back to my CLI,

00:27:35.100 --> 00:27:37.500
<v Speaker 0>Docker compose up first because I'm gonna need

00:27:37.500 --> 00:27:38.380
<v Speaker 0>a database.

00:27:38.860 --> 00:27:40.700
<v Speaker 0>And this is the very standard Docker compose

00:27:40.700 --> 00:27:42.380
<v Speaker 0>file. There's no web assembly or enough and

00:27:42.380 --> 00:27:44.700
<v Speaker 0>then that's the moment. This is just let's

00:27:44.700 --> 00:27:45.500
<v Speaker 0>run Postgres.

00:27:46.325 --> 00:27:49.205
<v Speaker 0>It's the most recent version, very secure password,

00:27:49.205 --> 00:27:50.804
<v Speaker 0>and I expose the port locally.

00:27:51.045 --> 00:27:51.924
<v Speaker 0>That's it.

00:27:53.845 --> 00:27:56.725
<v Speaker 0>Excuse me. I also have beekeeper,

00:27:57.285 --> 00:27:58.645
<v Speaker 0>which is a

00:27:59.570 --> 00:28:00.850
<v Speaker 0>GUI client.

00:28:01.810 --> 00:28:03.169
<v Speaker 0>Let's pick the databases.

00:28:05.810 --> 00:28:07.650
<v Speaker 0>And what I'm gonna do, if you can

00:28:07.650 --> 00:28:10.210
<v Speaker 0>see I already have one fake URL here,

00:28:10.850 --> 00:28:13.570
<v Speaker 0>is I can just delete all of this.

00:28:15.115 --> 00:28:17.115
<v Speaker 0>So I'll do it from

00:28:18.235 --> 00:28:19.914
<v Speaker 0>here. Oh, maybe I can.

00:28:21.595 --> 00:28:22.554
<v Speaker 0>Docker

00:28:24.635 --> 00:28:25.595
<v Speaker 0>compose

00:28:25.595 --> 00:28:27.995
<v Speaker 0>then dash v. This will delete everything and

00:28:27.995 --> 00:28:29.035
<v Speaker 0>then we'll spin it back up.

00:28:29.700 --> 00:28:31.780
<v Speaker 0>This should clear any persistence, remove all the

00:28:31.780 --> 00:28:33.539
<v Speaker 0>databases, and we should start from a clean

00:28:33.539 --> 00:28:35.860
<v Speaker 0>state just because actually, don't know how to

00:28:35.860 --> 00:28:37.139
<v Speaker 0>delete from beekeeper.

00:28:38.580 --> 00:28:40.659
<v Speaker 0>I come back here, password.

00:28:41.780 --> 00:28:42.820
<v Speaker 0>We now have

00:28:43.140 --> 00:28:43.380
<v Speaker 0>no

00:28:44.725 --> 00:28:47.284
<v Speaker 0>public and no read write table.

00:28:47.924 --> 00:28:48.644
<v Speaker 0>Perfect.

00:28:49.764 --> 00:28:52.484
<v Speaker 0>So from here, I can run PNPX

00:28:52.485 --> 00:28:55.684
<v Speaker 0>Prisma migrate dev. That just means run my

00:28:55.684 --> 00:28:58.990
<v Speaker 0>migrations against my dev environment, which is the

00:28:58.990 --> 00:29:00.190
<v Speaker 0>local postgres.

00:29:03.390 --> 00:29:04.669
<v Speaker 0>It's executed.

00:29:04.830 --> 00:29:06.990
<v Speaker 0>And if we jump back over to beekeeper

00:29:06.990 --> 00:29:08.510
<v Speaker 0>and we hit refresh

00:29:10.350 --> 00:29:11.710
<v Speaker 0>and we hit refresh,

00:29:18.005 --> 00:29:20.005
<v Speaker 0>Database is now in sync. Don't lie to

00:29:20.005 --> 00:29:20.565
<v Speaker 0>me.

00:29:21.365 --> 00:29:24.004
<v Speaker 0>Alright. Maybe the refresh button doesn't work.

00:29:26.725 --> 00:29:28.085
<v Speaker 0>Let's try one more time.

00:29:31.179 --> 00:29:33.580
<v Speaker 0>Hey. Yeah. Don't know why the ref oh,

00:29:33.740 --> 00:29:36.539
<v Speaker 0>there's another refresh. That refresh is the alright.

00:29:37.659 --> 00:29:39.659
<v Speaker 0>See, I don't use beekeeper much,

00:29:39.740 --> 00:29:41.260
<v Speaker 0>but it is a nice special way to

00:29:41.260 --> 00:29:43.019
<v Speaker 0>see this schema. So now we have a

00:29:43.019 --> 00:29:44.700
<v Speaker 0>reader rest table, which is empty.

00:29:45.295 --> 00:29:47.215
<v Speaker 0>So let's just add one.

00:29:48.015 --> 00:29:49.695
<v Speaker 0>And to do this, I do need an

00:29:49.695 --> 00:29:51.135
<v Speaker 0>ISO 8,601

00:29:51.135 --> 00:29:53.135
<v Speaker 0>timestamp because I haven't

00:29:53.215 --> 00:29:55.695
<v Speaker 0>set up a default

00:29:59.390 --> 00:30:01.310
<v Speaker 0>default value on the created and updated that

00:30:01.310 --> 00:30:02.990
<v Speaker 0>schemas, although I really should.

00:30:03.230 --> 00:30:05.870
<v Speaker 0>I'm just using UTC time dot now

00:30:06.830 --> 00:30:08.590
<v Speaker 0>where I'm gonna say, okay, fake. It could

00:30:08.590 --> 00:30:10.190
<v Speaker 0>be my livestream,

00:30:10.190 --> 00:30:14.915
<v Speaker 0>which is gonna redirect to Twitter.comRawkode.

00:30:14.915 --> 00:30:16.355
<v Speaker 0>I can see here we wanna do a

00:30:16.355 --> 00:30:18.515
<v Speaker 0>three zero one and I'm gonna paste in

00:30:18.515 --> 00:30:20.995
<v Speaker 0>my ISO a six zero one string and

00:30:20.995 --> 00:30:21.955
<v Speaker 0>hit apply.

00:30:22.595 --> 00:30:24.755
<v Speaker 0>Now we have one entry as part of

00:30:24.755 --> 00:30:27.440
<v Speaker 0>our dynamic URL shortener in which case that

00:30:27.440 --> 00:30:29.200
<v Speaker 0>the static words do not match, which I'll

00:30:29.200 --> 00:30:30.960
<v Speaker 0>show you in just a moment. Go look

00:30:30.960 --> 00:30:32.960
<v Speaker 0>up something and the postgres database and do

00:30:32.960 --> 00:30:34.480
<v Speaker 0>a dynamic written to there.

00:30:35.200 --> 00:30:37.680
<v Speaker 0>So does I need to use Prisma here?

00:30:37.920 --> 00:30:38.320
<v Speaker 0>No.

00:30:40.175 --> 00:30:41.534
<v Speaker 0>Is it nice and cool?

00:30:41.775 --> 00:30:43.135
<v Speaker 0>I mean, I think so.

00:30:44.015 --> 00:30:46.495
<v Speaker 0>What a couple more things about Prisma. There's

00:30:46.495 --> 00:30:48.415
<v Speaker 0>lots of generators. So if you wanna generate

00:30:48.415 --> 00:30:51.295
<v Speaker 0>Rust types, GraphQL schemas, anything like that, there's

00:30:51.295 --> 00:30:53.375
<v Speaker 0>probably a generator. You just add a little

00:30:53.375 --> 00:30:56.330
<v Speaker 0>bit of code. This becomes your your your

00:30:58.169 --> 00:31:00.330
<v Speaker 0>source of truth for what your models look

00:31:00.330 --> 00:31:02.010
<v Speaker 0>like, and then everything else gets generated off

00:31:02.010 --> 00:31:03.769
<v Speaker 0>the back of it. And I really wanna

00:31:03.769 --> 00:31:05.049
<v Speaker 0>be able to use this together with my

00:31:05.049 --> 00:31:05.849
<v Speaker 0>spin application.

00:31:07.769 --> 00:31:10.215
<v Speaker 0>Excuse me. Okay. So from here, we have

00:31:10.215 --> 00:31:11.335
<v Speaker 0>our spin application.

00:31:11.975 --> 00:31:14.375
<v Speaker 0>Here's my spin dot toml. So this is

00:31:14.375 --> 00:31:17.015
<v Speaker 0>my Rawkode Academy short links project, which hopefully

00:31:17.015 --> 00:31:18.935
<v Speaker 0>I'll get working and deployed very soon on

00:31:18.935 --> 00:31:20.215
<v Speaker 0>Fermion Cloud. I'll show you that in a

00:31:20.215 --> 00:31:20.375
<v Speaker 0>moment.

00:31:21.190 --> 00:31:23.190
<v Speaker 0>And we can see here, it got a

00:31:23.190 --> 00:31:24.550
<v Speaker 0>little bit of boilerplate to point it to

00:31:24.550 --> 00:31:27.510
<v Speaker 0>the target because I'm using cargo workspaces. This

00:31:27.510 --> 00:31:28.950
<v Speaker 0>has to go up a direction before we

00:31:28.950 --> 00:31:29.990
<v Speaker 0>go into target.

00:31:30.630 --> 00:31:32.630
<v Speaker 0>And then we just specify the build command,

00:31:32.630 --> 00:31:34.790
<v Speaker 0>which is just a cargo build target release.

00:31:34.995 --> 00:31:36.835
<v Speaker 0>Nice and simple, nothing

00:31:36.995 --> 00:31:39.395
<v Speaker 0>too strenuous about putting us together and if

00:31:39.395 --> 00:31:40.915
<v Speaker 0>you use one of their templates, it does

00:31:40.915 --> 00:31:42.115
<v Speaker 0>it all for you. You don't need to

00:31:42.115 --> 00:31:42.995
<v Speaker 0>worry about it.

00:31:44.115 --> 00:31:46.915
<v Speaker 0>From here, we have our lib. Rs. So

00:31:46.915 --> 00:31:49.309
<v Speaker 0>much like we've seen in the documentation, we're

00:31:49.309 --> 00:31:51.630
<v Speaker 0>gonna pull in the Spin SDK, which provides

00:31:51.630 --> 00:31:54.269
<v Speaker 0>request response and issue the component.

00:31:54.910 --> 00:31:57.309
<v Speaker 0>They also provide some other components, one of

00:31:57.309 --> 00:31:59.070
<v Speaker 0>them being the ability to speak to Redis

00:31:59.070 --> 00:32:00.510
<v Speaker 0>and the other one being the ability to

00:32:00.510 --> 00:32:02.725
<v Speaker 0>speak to Postgres. So we're pulling in this

00:32:02.725 --> 00:32:03.924
<v Speaker 0>p g library

00:32:04.005 --> 00:32:06.565
<v Speaker 0>so that we can send queries to Postgres.

00:32:07.205 --> 00:32:09.605
<v Speaker 0>We have our procedural macro that does all

00:32:09.605 --> 00:32:12.164
<v Speaker 0>the glue for us with this application.

00:32:12.645 --> 00:32:14.245
<v Speaker 0>We have our function to use as our

00:32:14.245 --> 00:32:14.804
<v Speaker 0>entry point,

00:32:15.420 --> 00:32:17.500
<v Speaker 0>and I've got some really crappy debugging on

00:32:17.500 --> 00:32:19.500
<v Speaker 0>here, which is the print line path, which

00:32:19.500 --> 00:32:21.180
<v Speaker 0>just tells me the path for each request

00:32:21.180 --> 00:32:22.620
<v Speaker 0>that comes out to the system.

00:32:23.900 --> 00:32:25.740
<v Speaker 0>Next, we do a match.

00:32:25.820 --> 00:32:28.855
<v Speaker 0>So I'm saying, okay. Let's just look at

00:32:28.855 --> 00:32:30.054
<v Speaker 0>what the path is.

00:32:30.695 --> 00:32:33.335
<v Speaker 0>And these two here are my static routes.

00:32:34.135 --> 00:32:35.254
<v Speaker 0>I can see

00:32:37.815 --> 00:32:40.215
<v Speaker 0>yeah. Why not Copilot? Let's do GitHub. What's

00:32:40.215 --> 00:32:40.934
<v Speaker 0>the name about the name?

00:32:42.299 --> 00:32:44.299
<v Speaker 0>Trust your thing here and we just do

00:32:44.299 --> 00:32:46.940
<v Speaker 0>a default redirect for that too. So

00:32:47.100 --> 00:32:49.019
<v Speaker 0>what is default redirect?

00:32:50.620 --> 00:32:52.859
<v Speaker 0>Well, let's copy it and do

00:32:53.179 --> 00:32:54.539
<v Speaker 0>redirect GitHub.

00:32:55.425 --> 00:32:57.345
<v Speaker 0>And instead of going to the Rawkode Academy

00:32:57.345 --> 00:32:59.825
<v Speaker 0>website, we're gonna go to github.com,

00:32:59.905 --> 00:33:00.865
<v Speaker 0>Rawkode

00:33:01.025 --> 00:33:01.905
<v Speaker 0>Academy.

00:33:02.705 --> 00:33:03.425
<v Speaker 0>And then

00:33:04.225 --> 00:33:07.105
<v Speaker 0>we'll change our static rules to be redirect

00:33:07.505 --> 00:33:08.465
<v Speaker 0>GitHub.

00:33:08.465 --> 00:33:09.985
<v Speaker 0>Now, of course, this is

00:33:11.080 --> 00:33:13.160
<v Speaker 0>probably not idiomatic Rust.

00:33:13.400 --> 00:33:15.720
<v Speaker 0>Would I create a redirect GitHub? No. I'd

00:33:15.720 --> 00:33:17.880
<v Speaker 0>probably just have a redirect static function that

00:33:17.880 --> 00:33:19.080
<v Speaker 0>takes a string

00:33:19.240 --> 00:33:21.480
<v Speaker 0>where I pass in the URL, probably a

00:33:21.480 --> 00:33:23.560
<v Speaker 0>bit cleaner, but just for the sake of

00:33:23.560 --> 00:33:25.400
<v Speaker 0>moving on with today's demo, we're not gonna

00:33:25.400 --> 00:33:26.280
<v Speaker 0>bother about that.

00:33:27.635 --> 00:33:29.395
<v Speaker 0>But what I wanted you to take away

00:33:29.395 --> 00:33:31.395
<v Speaker 0>is that we can add to this match

00:33:31.395 --> 00:33:33.395
<v Speaker 0>statement all the static paths that we want.

00:33:33.395 --> 00:33:35.315
<v Speaker 0>Any URLs that we always want to be

00:33:35.315 --> 00:33:37.395
<v Speaker 0>shortened in a particular way regardless of what's

00:33:37.395 --> 00:33:40.115
<v Speaker 0>in the dynamic configuration, which requires a database.

00:33:40.880 --> 00:33:43.040
<v Speaker 0>We wanna respond really fast and we put

00:33:43.040 --> 00:33:45.040
<v Speaker 0>them here. But of course we do it

00:33:45.040 --> 00:33:46.080
<v Speaker 0>in we don't.

00:33:46.480 --> 00:33:48.480
<v Speaker 0>Of course, we likely want dynamic.

00:33:49.280 --> 00:33:51.200
<v Speaker 0>So our last part of this match statement

00:33:51.200 --> 00:33:54.325
<v Speaker 0>says, okay. Whatever the other value is, let's

00:33:54.325 --> 00:33:55.525
<v Speaker 0>just call it path.

00:33:56.325 --> 00:33:58.165
<v Speaker 0>And when we get a path, we're gonna

00:33:58.165 --> 00:34:00.405
<v Speaker 0>do some more horrible debugging, which is the

00:34:00.405 --> 00:34:01.925
<v Speaker 0>exact same debug as the bottom. I'm actually

00:34:01.925 --> 00:34:03.045
<v Speaker 0>just gonna remove that.

00:34:03.765 --> 00:34:05.765
<v Speaker 0>I'm gonna trim the slash off of it

00:34:05.765 --> 00:34:07.445
<v Speaker 0>to make the match a little bit cleaner.

00:34:07.445 --> 00:34:09.045
<v Speaker 0>You know, we don't in our database

00:34:09.840 --> 00:34:12.640
<v Speaker 0>want this live to be slash live, we

00:34:12.640 --> 00:34:13.760
<v Speaker 0>just want it to be live.

00:34:14.160 --> 00:34:15.600
<v Speaker 0>So we'll just trim it off. So if

00:34:15.600 --> 00:34:17.520
<v Speaker 0>the string starts with a slash,

00:34:17.680 --> 00:34:18.320
<v Speaker 0>disappear.

00:34:19.280 --> 00:34:21.760
<v Speaker 0>Then we have a redirect lookup command. So

00:34:21.760 --> 00:34:23.440
<v Speaker 0>this is the function that goes and speaks

00:34:23.440 --> 00:34:24.080
<v Speaker 0>to postgres.

00:34:24.455 --> 00:34:26.935
<v Speaker 0>We pass in the trimmed path and whatever

00:34:26.935 --> 00:34:29.175
<v Speaker 0>it returned is what we finish with in

00:34:29.175 --> 00:34:29.895
<v Speaker 0>our function.

00:34:30.534 --> 00:34:32.695
<v Speaker 0>The fact that there's no colon here or

00:34:32.695 --> 00:34:33.655
<v Speaker 0>semicolon

00:34:33.815 --> 00:34:35.574
<v Speaker 0>just means that this is a return value

00:34:35.574 --> 00:34:37.415
<v Speaker 0>to the match and because the match doesn't

00:34:37.415 --> 00:34:39.415
<v Speaker 0>have a semicolon, this is just Rust logic

00:34:39.415 --> 00:34:42.299
<v Speaker 0>here. This is the last expression within the

00:34:42.299 --> 00:34:44.139
<v Speaker 0>function and it will be returned as our

00:34:44.139 --> 00:34:45.099
<v Speaker 0>response.

00:34:46.779 --> 00:34:49.099
<v Speaker 0>So let's pop down to redirect lookup.

00:34:50.779 --> 00:34:51.500
<v Speaker 0>Excuse me.

00:34:54.315 --> 00:34:56.075
<v Speaker 0>Now we

00:34:56.395 --> 00:34:58.715
<v Speaker 0>have a hard coded string here.

00:34:59.115 --> 00:35:00.635
<v Speaker 0>This is very crappy.

00:35:00.635 --> 00:35:01.595
<v Speaker 0>I get it.

00:35:02.795 --> 00:35:03.595
<v Speaker 0>Currently,

00:35:03.595 --> 00:35:04.395
<v Speaker 0>there's not

00:35:04.610 --> 00:35:07.490
<v Speaker 0>a great way to deploy

00:35:08.450 --> 00:35:11.570
<v Speaker 0>secrets to Fermion Cloud. However, they are working

00:35:11.570 --> 00:35:12.290
<v Speaker 0>on it.

00:35:12.690 --> 00:35:13.250
<v Speaker 0>So

00:35:13.650 --> 00:35:16.370
<v Speaker 0>just because that's not really there's no primitives

00:35:16.370 --> 00:35:18.704
<v Speaker 0>yet. There's some things in config I don't

00:35:18.704 --> 00:35:20.065
<v Speaker 0>wanna dive into just now. I'm gonna do

00:35:20.065 --> 00:35:21.265
<v Speaker 0>more on that next week.

00:35:21.505 --> 00:35:23.905
<v Speaker 0>But let's just get this example working. Let's

00:35:23.905 --> 00:35:25.984
<v Speaker 0>have hard code it and it'll be fine.

00:35:25.984 --> 00:35:27.505
<v Speaker 0>That was my logic. I hope that makes

00:35:27.505 --> 00:35:29.184
<v Speaker 0>sense and I'm gonna skip over it for

00:35:29.184 --> 00:35:30.224
<v Speaker 0>the rest of the session.

00:35:31.850 --> 00:35:35.130
<v Speaker 0>Then we configure our SQL statement. So how

00:35:35.130 --> 00:35:36.170
<v Speaker 0>do we find

00:35:36.570 --> 00:35:38.810
<v Speaker 0>a short link within our database? Well, we

00:35:38.810 --> 00:35:41.130
<v Speaker 0>select long. The only value we actually care

00:35:41.130 --> 00:35:43.610
<v Speaker 0>about is long and I probably should

00:35:44.465 --> 00:35:46.625
<v Speaker 0>Let's fix my code and pull back the

00:35:46.625 --> 00:35:47.585
<v Speaker 0>status code

00:35:47.905 --> 00:35:49.745
<v Speaker 0>since we have that in beekeeper.

00:35:49.825 --> 00:35:51.345
<v Speaker 0>Redirect code. Sorry.

00:35:52.705 --> 00:35:53.585
<v Speaker 0>Redirect

00:35:53.585 --> 00:35:54.225
<v Speaker 0>code.

00:35:55.105 --> 00:35:57.345
<v Speaker 0>From the redirect table where short,

00:35:57.740 --> 00:35:59.580
<v Speaker 0>so that is this key here

00:36:00.859 --> 00:36:01.740
<v Speaker 0>equals

00:36:01.740 --> 00:36:03.100
<v Speaker 0>and we're using

00:36:03.500 --> 00:36:04.619
<v Speaker 0>parameterized

00:36:05.260 --> 00:36:07.180
<v Speaker 0>SQL statements here, so that we're not vulnerable

00:36:07.180 --> 00:36:09.420
<v Speaker 0>to SQL or SQL injection attack.

00:36:10.535 --> 00:36:12.855
<v Speaker 0>And then we use the postgres

00:36:12.935 --> 00:36:15.095
<v Speaker 0>helper provided by the

00:36:15.735 --> 00:36:17.095
<v Speaker 0>Spin SDK

00:36:17.175 --> 00:36:19.655
<v Speaker 0>to query at the address, which we define

00:36:19.655 --> 00:36:20.695
<v Speaker 0>above the statement,

00:36:22.340 --> 00:36:23.780
<v Speaker 0>which is our SQL

00:36:24.020 --> 00:36:26.180
<v Speaker 0>and then any parameters. Now because we have

00:36:26.180 --> 00:36:27.380
<v Speaker 0>a dollar 1,

00:36:27.620 --> 00:36:29.940
<v Speaker 0>we need exactly one parameter here.

00:36:31.620 --> 00:36:33.300
<v Speaker 0>So we just use the Spin SDK to

00:36:33.300 --> 00:36:34.740
<v Speaker 0>say this is a string type

00:36:35.385 --> 00:36:37.465
<v Speaker 0>and then we pass on the path.

00:36:39.225 --> 00:36:40.905
<v Speaker 0>If there's an error, we map over there

00:36:40.905 --> 00:36:42.665
<v Speaker 0>and return that there was an error executing

00:36:42.665 --> 00:36:43.545
<v Speaker 0>the query.

00:36:43.785 --> 00:36:45.625
<v Speaker 0>Although we're assuming that it's going to just

00:36:45.625 --> 00:36:47.225
<v Speaker 0>work because it's a very simple

00:36:47.705 --> 00:36:48.185
<v Speaker 0>query.

00:36:48.950 --> 00:36:50.710
<v Speaker 0>Don't expect anything to go wrong.

00:36:51.910 --> 00:36:54.390
<v Speaker 0>We have one edge case or not really

00:36:54.390 --> 00:36:56.630
<v Speaker 0>an edge case. We have one case

00:36:56.870 --> 00:36:59.110
<v Speaker 0>where what if we don't have a URL

00:36:59.110 --> 00:37:01.190
<v Speaker 0>and a database for that? So for that,

00:37:01.190 --> 00:37:05.030
<v Speaker 0>we return a HTTP response builder status code

00:37:04.265 --> 00:37:05.465
<v Speaker 0>404.

00:37:06.665 --> 00:37:08.505
<v Speaker 0>Hopefully, filters by. Now

00:37:10.425 --> 00:37:12.585
<v Speaker 0>if we get past that point, we know

00:37:12.585 --> 00:37:15.305
<v Speaker 0>that we have at least one response.

00:37:15.625 --> 00:37:18.905
<v Speaker 0>Now at our schema, we actually do specify

00:37:19.660 --> 00:37:22.540
<v Speaker 0>that our short is an ID. This will

00:37:22.540 --> 00:37:24.460
<v Speaker 0>make it unique. I wonder if we can

00:37:24.460 --> 00:37:25.820
<v Speaker 0>see that in Beekeeper.

00:37:30.620 --> 00:37:31.420
<v Speaker 0>Structure,

00:37:33.335 --> 00:37:34.615
<v Speaker 0>primary key.

00:37:35.654 --> 00:37:37.335
<v Speaker 0>Oh, create that. Those have a default value.

00:37:37.335 --> 00:37:38.615
<v Speaker 0>Okay. It's just update that.

00:37:39.895 --> 00:37:41.895
<v Speaker 0>If we go to indexes, yep, we have

00:37:41.895 --> 00:37:44.855
<v Speaker 0>our unique primary key here. So we actually

00:37:44.855 --> 00:37:45.174
<v Speaker 0>can,

00:37:46.180 --> 00:37:47.060
<v Speaker 0>hopefully

00:37:47.140 --> 00:37:48.900
<v Speaker 0>be in a position where we can have

00:37:48.900 --> 00:37:51.140
<v Speaker 0>two short codes that match. However,

00:37:52.180 --> 00:37:53.940
<v Speaker 0>I just baked the end of the code.

00:37:54.980 --> 00:37:57.780
<v Speaker 0>So we always pull out zero base because

00:37:57.780 --> 00:37:59.645
<v Speaker 0>we have that guarantee from a database. That

00:37:59.645 --> 00:38:01.005
<v Speaker 0>we're never gonna have a one. We don't

00:38:01.005 --> 00:38:02.365
<v Speaker 0>need to do anything smart. We're just gonna

00:38:02.365 --> 00:38:04.365
<v Speaker 0>take the first one. We do rules that

00:38:04.365 --> 00:38:06.925
<v Speaker 0>rules get one at zero, unwrap it, get

00:38:06.925 --> 00:38:08.525
<v Speaker 0>the index again to get the first column

00:38:08.525 --> 00:38:10.925
<v Speaker 0>which is our link. We can actually get

00:38:11.165 --> 00:38:14.125
<v Speaker 0>all of this back and use the redirect

00:38:13.830 --> 00:38:14.630
<v Speaker 0>code.

00:38:15.030 --> 00:38:16.470
<v Speaker 0>If I'm feeling brave and we have enough

00:38:16.470 --> 00:38:19.270
<v Speaker 0>time after we do the DX workflow stuff,

00:38:19.270 --> 00:38:20.550
<v Speaker 0>maybe we'll do that.

00:38:21.670 --> 00:38:23.670
<v Speaker 0>If this is a string, we return it

00:38:23.670 --> 00:38:25.510
<v Speaker 0>and if so we do a redirect to

00:38:25.510 --> 00:38:26.070
<v Speaker 0>the location.

00:38:26.895 --> 00:38:28.495
<v Speaker 0>And then this is just a little bit

00:38:28.495 --> 00:38:30.975
<v Speaker 0>of boilerplate that is needed for working with

00:38:30.975 --> 00:38:31.615
<v Speaker 0>the

00:38:32.335 --> 00:38:33.135
<v Speaker 0>PG

00:38:33.135 --> 00:38:35.215
<v Speaker 0>spend SDK. I grab that straight from the

00:38:35.215 --> 00:38:35.855
<v Speaker 0>docs.

00:38:36.175 --> 00:38:37.615
<v Speaker 0>I'm just gonna trust that does what it

00:38:37.615 --> 00:38:39.855
<v Speaker 0>does. Trust that it does what it does.

00:38:40.400 --> 00:38:42.720
<v Speaker 0>It's just guaranteeing that that or trying to

00:38:42.720 --> 00:38:45.200
<v Speaker 0>guarantee that if we get column back and

00:38:45.200 --> 00:38:46.400
<v Speaker 0>we say that we want a string that

00:38:46.400 --> 00:38:47.840
<v Speaker 0>it is going to be a string and

00:38:47.840 --> 00:38:49.200
<v Speaker 0>not some other type.

00:38:50.240 --> 00:38:50.960
<v Speaker 0>Now

00:38:51.280 --> 00:38:53.724
<v Speaker 0>it's not a lot of code, 70 lines

00:38:53.724 --> 00:38:55.565
<v Speaker 0>of code. Most of that

00:38:55.885 --> 00:38:58.845
<v Speaker 0>could be cleaned up. I don't need redirect

00:38:58.845 --> 00:39:00.765
<v Speaker 0>get hub for a start which takes away

00:39:00.765 --> 00:39:02.285
<v Speaker 0>nearly 10 lines of code

00:39:03.244 --> 00:39:07.005
<v Speaker 0>and our lookup could be cleaned up as

00:39:06.020 --> 00:39:08.500
<v Speaker 0>well, but we're doing, you know, multiple lines

00:39:08.500 --> 00:39:10.660
<v Speaker 0>to kinda make it fluent and easy to

00:39:10.660 --> 00:39:11.220
<v Speaker 0>follow.

00:39:12.180 --> 00:39:14.180
<v Speaker 0>So let's jump over to the terminal.

00:39:15.780 --> 00:39:18.500
<v Speaker 0>We generated our migration. We run our database.

00:39:18.500 --> 00:39:21.385
<v Speaker 0>Now we can run spend build.

00:39:24.025 --> 00:39:25.785
<v Speaker 0>Oh, and the spend directory.

00:39:27.385 --> 00:39:29.464
<v Speaker 0>This will compile our Rust application,

00:39:29.464 --> 00:39:31.545
<v Speaker 0>and we will get our Wasm target.

00:39:32.105 --> 00:39:33.224
<v Speaker 0>If I do target,

00:39:36.430 --> 00:39:37.230
<v Speaker 0>release

00:39:40.830 --> 00:39:41.230
<v Speaker 0>oh,

00:39:42.030 --> 00:39:43.150
<v Speaker 0>no. Where's the

00:39:45.950 --> 00:39:49.070
<v Speaker 0>And here's somewhere. Oh, wasm

00:39:48.924 --> 00:39:49.805
<v Speaker 0>release.

00:39:50.525 --> 00:39:52.285
<v Speaker 0>And we have our short links dot wasm

00:39:52.285 --> 00:39:53.085
<v Speaker 0>file here.

00:39:53.325 --> 00:39:55.964
<v Speaker 0>We've successfully taken our Rust code, compiled it

00:39:55.964 --> 00:39:57.165
<v Speaker 0>down to web assembly.

00:39:57.244 --> 00:39:59.005
<v Speaker 0>And now we can run spin up.

00:40:00.365 --> 00:40:01.805
<v Speaker 0>Now, it's very fast.

00:40:03.300 --> 00:40:04.580
<v Speaker 0>And if I if I run spin up

00:40:04.580 --> 00:40:05.140
<v Speaker 0>again,

00:40:06.020 --> 00:40:07.540
<v Speaker 0>almost instantaneous.

00:40:07.780 --> 00:40:09.940
<v Speaker 0>We could probably use hyperfine

00:40:10.020 --> 00:40:12.260
<v Speaker 0>if this exit, which it doesn't.

00:40:12.500 --> 00:40:14.820
<v Speaker 0>But that would tell us it started

00:40:15.060 --> 00:40:15.940
<v Speaker 0>insanely fast.

00:40:16.725 --> 00:40:19.125
<v Speaker 0>We get a web server on logos 3,000

00:40:19.125 --> 00:40:21.125
<v Speaker 0>and it tells us the available routes. So

00:40:21.125 --> 00:40:22.965
<v Speaker 0>if we were to configure spend to do

00:40:22.965 --> 00:40:25.045
<v Speaker 0>multiple endpoints which you can, they would be

00:40:25.045 --> 00:40:25.925
<v Speaker 0>listed here.

00:40:26.805 --> 00:40:28.405
<v Speaker 0>But what I could do here is say

00:40:28.405 --> 00:40:29.445
<v Speaker 0>curl

00:40:30.450 --> 00:40:32.290
<v Speaker 0>on just a slash.

00:40:32.290 --> 00:40:33.730
<v Speaker 0>And I'll do that one more time without

00:40:33.730 --> 00:40:35.650
<v Speaker 0>the slash to both match to the same.

00:40:35.730 --> 00:40:37.090
<v Speaker 0>You get a three zero one to the

00:40:37.090 --> 00:40:38.210
<v Speaker 0>Rawkode Academy

00:40:38.609 --> 00:40:39.330
<v Speaker 0>and

00:40:39.650 --> 00:40:41.330
<v Speaker 0>a three zero one to the Rawkode Academy.

00:40:45.214 --> 00:40:47.455
<v Speaker 0>Let's see if they run hyperfane on this.

00:40:49.934 --> 00:40:51.535
<v Speaker 0>And I'll need to do

00:40:57.510 --> 00:41:00.790
<v Speaker 0>Yeah. We're getting our response time over HTTP.

00:41:00.790 --> 00:41:03.110
<v Speaker 0>Remember, even though it's local host so it's,

00:41:03.190 --> 00:41:05.030
<v Speaker 0>you know, we can know PEG related to

00:41:05.030 --> 00:41:06.550
<v Speaker 0>anything like that. But

00:41:06.950 --> 00:41:08.950
<v Speaker 0>this application is responding

00:41:09.065 --> 00:41:12.265
<v Speaker 0>with a deviation of about two milliseconds and

00:41:12.265 --> 00:41:13.385
<v Speaker 0>eight milliseconds.

00:41:13.465 --> 00:41:15.785
<v Speaker 0>So we're seeing responses anywhere from five point

00:41:15.785 --> 00:41:16.905
<v Speaker 0>six milliseconds.

00:41:18.345 --> 00:41:19.785
<v Speaker 0>Well, I should have been up to 19,

00:41:19.785 --> 00:41:22.185
<v Speaker 0>but, you know, the meantime is within two

00:41:22.185 --> 00:41:24.025
<v Speaker 0>milliseconds of 8.4. So

00:41:25.040 --> 00:41:27.280
<v Speaker 0>and roughly eight milliseconds we're getting a response

00:41:27.280 --> 00:41:28.720
<v Speaker 0>over 241

00:41:28.720 --> 00:41:31.120
<v Speaker 0>runs. This is on a local machine

00:41:32.800 --> 00:41:34.720
<v Speaker 0>and it's over a URL that hasn't had

00:41:34.720 --> 00:41:36.240
<v Speaker 0>in the database and a few other bits

00:41:36.240 --> 00:41:38.480
<v Speaker 0>of pieces. It's still kinda cool and very

00:41:38.480 --> 00:41:39.040
<v Speaker 0>very fast.

00:41:40.385 --> 00:41:41.825
<v Speaker 0>If we do curl

00:41:41.825 --> 00:41:44.705
<v Speaker 0>and we do blah, blah, blah, we're

00:41:44.705 --> 00:41:46.065
<v Speaker 0>gonna get an error.

00:41:46.945 --> 00:41:49.345
<v Speaker 0>Well, there's no complain about my redirect code.

00:41:49.345 --> 00:41:50.465
<v Speaker 0>And that's because

00:41:51.505 --> 00:41:53.185
<v Speaker 0>I was feeling too brave.

00:41:53.265 --> 00:41:54.145
<v Speaker 0>Let remove it.

00:41:57.779 --> 00:41:59.779
<v Speaker 0>And we just do a spin build and

00:41:59.779 --> 00:42:01.380
<v Speaker 0>I'm just gonna run a spin up.

00:42:03.140 --> 00:42:05.059
<v Speaker 0>Let's try that one more time. There we

00:42:05.059 --> 00:42:06.980
<v Speaker 0>go. We get our 404.

00:42:08.435 --> 00:42:11.315
<v Speaker 0>So what if we run this under hyperfade?

00:42:11.715 --> 00:42:14.435
<v Speaker 0>Remember this one does have a database lookup

00:42:14.435 --> 00:42:15.235
<v Speaker 0>because

00:42:16.435 --> 00:42:17.235
<v Speaker 0>it's

00:42:17.715 --> 00:42:19.795
<v Speaker 0>not doing a static match and then it

00:42:19.795 --> 00:42:21.475
<v Speaker 0>does have to speak to postgres to see

00:42:21.475 --> 00:42:22.995
<v Speaker 0>if there is any match that's still failing

00:42:22.995 --> 00:42:24.410
<v Speaker 0>and returning no rows.

00:42:24.890 --> 00:42:26.570
<v Speaker 0>And we can see we're getting a meantime

00:42:26.570 --> 00:42:28.490
<v Speaker 0>of about twenty five milliseconds.

00:42:28.730 --> 00:42:31.130
<v Speaker 0>Actually, a bit slower than I was expecting,

00:42:31.130 --> 00:42:33.370
<v Speaker 0>but still insanely fast for what is actually

00:42:33.370 --> 00:42:37.210
<v Speaker 0>happening here. So HTTP request, pick the database,

00:42:37.290 --> 00:42:38.010
<v Speaker 0>better response.

00:42:38.685 --> 00:42:39.805
<v Speaker 0>Not too shabby.

00:42:39.885 --> 00:42:41.885
<v Speaker 0>And this is that postgres running in a

00:42:41.885 --> 00:42:44.445
<v Speaker 0>local container on my machine, not optimized or

00:42:44.445 --> 00:42:46.845
<v Speaker 0>tuned or anything like that. So these numbers

00:42:46.845 --> 00:42:49.405
<v Speaker 0>are really, really cool. And again, pushing why

00:42:49.405 --> 00:42:50.765
<v Speaker 0>I am excited about assembly.

00:42:51.410 --> 00:42:54.050
<v Speaker 0>Let's make this work with our dynamic

00:42:54.050 --> 00:42:56.050
<v Speaker 0>link, which was live.

00:42:56.530 --> 00:42:57.890
<v Speaker 0>And we'll see here that we got a

00:42:57.890 --> 00:43:01.810
<v Speaker 0>three zero one going to twitter.com/Rawkode.

00:43:02.770 --> 00:43:04.130
<v Speaker 0>Well, I think this is

00:43:04.450 --> 00:43:05.810
<v Speaker 0>pretty cool, pretty neat.

00:43:08.335 --> 00:43:10.415
<v Speaker 0>Now for the eagle eyed amongst you,

00:43:10.894 --> 00:43:12.575
<v Speaker 0>there's one gotcha

00:43:13.934 --> 00:43:15.855
<v Speaker 0>that I kinda had to work out. And

00:43:15.855 --> 00:43:17.055
<v Speaker 0>and by work out, I mean, I just

00:43:17.055 --> 00:43:18.414
<v Speaker 0>have to run like a spin up dash

00:43:18.414 --> 00:43:21.214
<v Speaker 0>dash help. But my log output

00:43:21.840 --> 00:43:22.960
<v Speaker 0>that we have

00:43:23.440 --> 00:43:25.840
<v Speaker 0>on the URL match here

00:43:26.160 --> 00:43:27.600
<v Speaker 0>is nowhere to be seen.

00:43:28.160 --> 00:43:29.920
<v Speaker 0>So the way that we fix that is

00:43:29.920 --> 00:43:32.000
<v Speaker 0>to run a follow all on the spin

00:43:32.000 --> 00:43:32.880
<v Speaker 0>up command.

00:43:33.840 --> 00:43:35.600
<v Speaker 0>And now when we run our curl,

00:43:36.305 --> 00:43:38.625
<v Speaker 0>we see our path output here.

00:43:39.505 --> 00:43:41.265
<v Speaker 0>So as you

00:43:41.265 --> 00:43:44.065
<v Speaker 0>are working on your spin application locally, which

00:43:44.065 --> 00:43:45.265
<v Speaker 0>I assume you will be,

00:43:45.825 --> 00:43:46.945
<v Speaker 0>we can run

00:43:47.345 --> 00:43:49.985
<v Speaker 0>follow all to get logs to our local

00:43:49.985 --> 00:43:51.905
<v Speaker 0>terminal. And that's just makes your debugging

00:43:52.200 --> 00:43:53.880
<v Speaker 0>a lot easier. And you can see even

00:43:53.880 --> 00:43:56.200
<v Speaker 0>with the database, we're still getting twenty five

00:43:56.200 --> 00:43:58.040
<v Speaker 0>millisecond response time.

00:43:59.400 --> 00:44:01.320
<v Speaker 0>So what's that dev workflow again looks like

00:44:01.320 --> 00:44:02.360
<v Speaker 0>just to confirm.

00:44:02.440 --> 00:44:03.080
<v Speaker 0>Well,

00:44:03.560 --> 00:44:04.760
<v Speaker 0>we modify our code.

00:44:07.865 --> 00:44:08.825
<v Speaker 0>We run

00:44:09.945 --> 00:44:11.545
<v Speaker 0>spin build,

00:44:12.025 --> 00:44:12.905
<v Speaker 0>spin up,

00:44:13.704 --> 00:44:15.225
<v Speaker 0>and we run curl

00:44:15.545 --> 00:44:16.745
<v Speaker 0>to GitHub

00:44:17.385 --> 00:44:17.785
<v Speaker 0>too.

00:44:19.260 --> 00:44:21.180
<v Speaker 0>And we got our 240

00:44:21.180 --> 00:44:22.380
<v Speaker 0>odd responses.

00:44:22.380 --> 00:44:23.340
<v Speaker 0>266

00:44:23.340 --> 00:44:25.580
<v Speaker 0>this time. There we go. Static links in

00:44:25.580 --> 00:44:27.260
<v Speaker 0>eight milliseconds. That is pretty sweet.

00:44:27.900 --> 00:44:29.180
<v Speaker 0>So that's

00:44:29.180 --> 00:44:29.980
<v Speaker 0>the demo.

00:44:30.540 --> 00:44:31.820
<v Speaker 0>I like the dev experience.

00:44:32.415 --> 00:44:34.815
<v Speaker 0>I like the simplicity of the functions. We're

00:44:34.815 --> 00:44:37.295
<v Speaker 0>relying on Rust's procedural macros to mean that

00:44:37.295 --> 00:44:38.735
<v Speaker 0>I only write the code that I care

00:44:38.735 --> 00:44:39.295
<v Speaker 0>about.

00:44:39.775 --> 00:44:41.695
<v Speaker 0>I like that they provide libraries for speaking

00:44:41.695 --> 00:44:43.535
<v Speaker 0>to postgres and Redis. I wanna do more

00:44:43.535 --> 00:44:45.790
<v Speaker 0>with that. I'm really eager for them to

00:44:45.790 --> 00:44:47.150
<v Speaker 0>do some sort of

00:44:50.030 --> 00:44:51.950
<v Speaker 0>secrets management because

00:44:52.750 --> 00:44:55.230
<v Speaker 0>really what I wanna do is after I've

00:44:55.230 --> 00:44:57.630
<v Speaker 0>done my my spend build and spills up

00:44:57.790 --> 00:44:58.349
<v Speaker 0>spend up,

00:44:58.875 --> 00:45:00.395
<v Speaker 0>is we have the access to a spend

00:45:00.395 --> 00:45:01.115
<v Speaker 0>deployment,

00:45:01.515 --> 00:45:03.115
<v Speaker 0>and we just run this. And we get

00:45:03.115 --> 00:45:04.155
<v Speaker 0>a link back

00:45:04.555 --> 00:45:06.875
<v Speaker 0>with a production URL

00:45:07.355 --> 00:45:09.995
<v Speaker 0>for all of our traffic.

00:45:10.715 --> 00:45:11.275
<v Speaker 0>But here,

00:45:12.300 --> 00:45:14.220
<v Speaker 0>I have a fermion. App

00:45:14.540 --> 00:45:16.700
<v Speaker 0>and I'm gonna run hyperfine again,

00:45:16.860 --> 00:45:17.900
<v Speaker 0>but inject

00:45:17.980 --> 00:45:20.060
<v Speaker 0>my new URL,

00:45:20.300 --> 00:45:21.980
<v Speaker 0>which is delivered over

00:45:22.140 --> 00:45:23.180
<v Speaker 0>TLS

00:45:23.660 --> 00:45:24.220
<v Speaker 0>for free.

00:45:29.245 --> 00:45:32.045
<v Speaker 0>All those things don't look as good. However,

00:45:32.285 --> 00:45:34.285
<v Speaker 0>Fairmount Cloud is hosted in US East 1

00:45:34.285 --> 00:45:36.045
<v Speaker 0>and I am in Europe. So the latency

00:45:36.045 --> 00:45:38.045
<v Speaker 0>at minimum is probably gonna be about three

00:45:38.045 --> 00:45:38.845
<v Speaker 0>hundred millisecond.

00:45:40.349 --> 00:45:42.430
<v Speaker 0>But we had 10 requests to the remote

00:45:42.430 --> 00:45:43.869
<v Speaker 0>server that responded

00:45:44.510 --> 00:45:45.950
<v Speaker 0>and just to show this

00:45:47.390 --> 00:45:49.550
<v Speaker 0>oh, I copied that by mistake.

00:45:49.789 --> 00:45:52.030
<v Speaker 0>Just to show you the headers here

00:45:52.349 --> 00:45:53.390
<v Speaker 0>on the response.

00:45:57.145 --> 00:45:58.665
<v Speaker 0>There's why it's so slow.

00:45:59.385 --> 00:46:01.945
<v Speaker 0>Let's try it IPv6 first. So let's do

00:46:01.945 --> 00:46:02.745
<v Speaker 0>that again

00:46:03.065 --> 00:46:04.345
<v Speaker 0>with dash four.

00:46:05.224 --> 00:46:06.345
<v Speaker 0>Yeah. Much faster.

00:46:06.760 --> 00:46:08.040
<v Speaker 0>And we get

00:46:08.440 --> 00:46:11.320
<v Speaker 0>redirect to get hub Rawkode Academy. So

00:46:12.360 --> 00:46:14.120
<v Speaker 0>lots of really cool things here.

00:46:14.680 --> 00:46:17.240
<v Speaker 0>Spend build, edit code, spend build, spend up

00:46:17.240 --> 00:46:19.720
<v Speaker 0>for local development, spend deploy, throw it to

00:46:19.720 --> 00:46:22.835
<v Speaker 0>Fermion Cloud for free, get TLS, get custom

00:46:22.835 --> 00:46:24.915
<v Speaker 0>domain names, all this other cool stuff. I'm

00:46:24.915 --> 00:46:26.435
<v Speaker 0>gonna be doing a lot more with this

00:46:26.435 --> 00:46:29.234
<v Speaker 0>entire platform because I really wanna push this

00:46:29.234 --> 00:46:31.155
<v Speaker 0>URL shortener to do my own bedding

00:46:31.474 --> 00:46:32.275
<v Speaker 0>rather

00:46:32.275 --> 00:46:34.675
<v Speaker 0>than Ryan on relying on services with Bitly.

00:46:34.675 --> 00:46:36.280
<v Speaker 0>And another really cool idea I've got is

00:46:36.280 --> 00:46:38.119
<v Speaker 0>I wanna build my own analytics engine, like

00:46:38.119 --> 00:46:41.000
<v Speaker 0>Google Analytics, but using just WebAssembly

00:46:41.000 --> 00:46:43.480
<v Speaker 0>and request. Because I reckon we could do

00:46:43.480 --> 00:46:45.960
<v Speaker 0>some pretty neat stuff in the browser and

00:46:45.960 --> 00:46:48.145
<v Speaker 0>on the server get a really key piece

00:46:48.145 --> 00:46:50.065
<v Speaker 0>of analytic experience. And I'm gonna push that

00:46:50.065 --> 00:46:51.425
<v Speaker 0>as far as I can go.

00:46:52.545 --> 00:46:55.345
<v Speaker 0>I'm gonna jump back to monologue phase,

00:46:55.664 --> 00:46:57.424
<v Speaker 0>check for any questions, but I hope you

00:46:57.424 --> 00:46:59.345
<v Speaker 0>like what you've seen and hopefully

00:46:59.410 --> 00:47:01.170
<v Speaker 0>your interest is peaked and you can check

00:47:01.170 --> 00:47:03.330
<v Speaker 0>out Spin and WebAssembly.

00:47:03.970 --> 00:47:05.810
<v Speaker 0>You got a question from Moz. Does Rust

00:47:05.810 --> 00:47:07.490
<v Speaker 0>follow TypeScript syntax?

00:47:08.210 --> 00:47:10.690
<v Speaker 0>They have some similarities for sure.

00:47:10.930 --> 00:47:13.090
<v Speaker 0>They're both modern languages that have learned a

00:47:13.090 --> 00:47:15.565
<v Speaker 0>lot. They provide strict typing.

00:47:17.165 --> 00:47:19.245
<v Speaker 0>They have functional constructs,

00:47:19.645 --> 00:47:22.685
<v Speaker 0>you know, the ability to map, reduce, etcetera.

00:47:22.765 --> 00:47:24.845
<v Speaker 0>They have error handling. So there's a lot

00:47:24.845 --> 00:47:26.605
<v Speaker 0>of things that are very similar. But I'd

00:47:26.605 --> 00:47:28.925
<v Speaker 0>say the Rust syntax is more esoteric.

00:47:29.240 --> 00:47:31.560
<v Speaker 0>TypeScript is a lot more familiar to people.

00:47:31.960 --> 00:47:34.520
<v Speaker 0>Coming from Caesar relative languages and JavaScript, it'll

00:47:34.520 --> 00:47:35.320
<v Speaker 0>feel very

00:47:36.039 --> 00:47:38.599
<v Speaker 0>yeah. Or even Java, it will feel good

00:47:38.599 --> 00:47:40.680
<v Speaker 0>and easy to understand. TypeScript,

00:47:41.675 --> 00:47:43.355
<v Speaker 0>with procedural macros

00:47:44.475 --> 00:47:47.195
<v Speaker 0>the unwrapping of everything and lifetimes

00:47:47.915 --> 00:47:49.755
<v Speaker 0>takes a little bit more effort. But if

00:47:49.755 --> 00:47:51.915
<v Speaker 0>you see similarities with TypeScript, that's good. Don't

00:47:51.915 --> 00:47:53.595
<v Speaker 0>let the scary stuff scare you away.

00:47:56.049 --> 00:47:57.730
<v Speaker 0>So Russell said,

00:47:58.130 --> 00:47:59.730
<v Speaker 0>so was it created a new connection for

00:47:59.730 --> 00:48:01.170
<v Speaker 0>each request? I got a phone call so

00:48:01.170 --> 00:48:02.690
<v Speaker 0>missed them in the video and still responding

00:48:02.690 --> 00:48:04.290
<v Speaker 0>in only twenty five milliseconds.

00:48:05.329 --> 00:48:08.529
<v Speaker 0>Yeah. The span run time only launches the

00:48:08.529 --> 00:48:11.250
<v Speaker 0>wasm binary when a request comes in that

00:48:10.785 --> 00:48:12.224
<v Speaker 0>matches the endpoint,

00:48:12.224 --> 00:48:15.105
<v Speaker 0>the route that you have it configured to.

00:48:15.505 --> 00:48:18.545
<v Speaker 0>Everything that you're seeing is the spend run

00:48:18.545 --> 00:48:20.865
<v Speaker 0>time, the fermion platform, which is also open

00:48:20.865 --> 00:48:22.224
<v Speaker 0>source by the way. You can go to

00:48:22.224 --> 00:48:23.184
<v Speaker 0>fermion.

00:48:23.265 --> 00:48:24.865
<v Speaker 0>Github.com/fermion.

00:48:25.580 --> 00:48:28.060
<v Speaker 0>You'll find the platform open source repository. You

00:48:28.060 --> 00:48:29.660
<v Speaker 0>can run it yourself on a EC two

00:48:29.660 --> 00:48:31.660
<v Speaker 0>instance on Equinix metal or GCP, whatever you

00:48:31.660 --> 00:48:33.900
<v Speaker 0>want. Pass it some WASM files and away

00:48:33.900 --> 00:48:36.140
<v Speaker 0>it goes. And so, yeah, you're getting a

00:48:36.140 --> 00:48:38.700
<v Speaker 0>unique instance of that web that web assembly

00:48:38.700 --> 00:48:40.460
<v Speaker 0>application for every request

00:48:41.095 --> 00:48:43.575
<v Speaker 0>or every Redis message within the cluster.

00:48:44.535 --> 00:48:45.175
<v Speaker 0>Cool.

00:48:46.455 --> 00:48:47.255
<v Speaker 0>Alright.

00:48:47.255 --> 00:48:48.775
<v Speaker 0>It looks like there are no more questions.

00:48:48.775 --> 00:48:50.695
<v Speaker 0>Thank you for joining me today. As I

00:48:50.695 --> 00:48:52.135
<v Speaker 0>said, I'll be doing a lot more with

00:48:52.135 --> 00:48:52.775
<v Speaker 0>WebAssembly,

00:48:53.330 --> 00:48:55.090
<v Speaker 0>and make sure you tune in for the

00:48:55.090 --> 00:48:57.090
<v Speaker 0>next episode. Thank you again. Have a wonderful

00:48:57.090 --> 00:48:57.570
<v Speaker 0>evening.
