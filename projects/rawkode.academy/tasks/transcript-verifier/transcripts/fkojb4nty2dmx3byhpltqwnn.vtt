WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 6c6a5b67-d891-450d-bea5-43404fa24342
Created: 2025-04-29T18:25:50.834Z
Duration: 3296.613
Channels: 1

00:01:34.520 --> 00:01:37.960
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:01:37.960 --> 00:01:40.725
<v Speaker 0>live. I am your host Rawkode.

00:01:41.045 --> 00:01:44.165
<v Speaker 0>Today, we are taking a look at Litestream.

00:01:44.165 --> 00:01:45.685
<v Speaker 0>It is a replicated

00:01:45.685 --> 00:01:46.805
<v Speaker 0>SQLite

00:01:46.805 --> 00:01:48.965
<v Speaker 0>with a whole bunch of really cool use

00:01:48.965 --> 00:01:50.565
<v Speaker 0>cases that we're gonna explore a little bit

00:01:50.565 --> 00:01:52.485
<v Speaker 0>today with its creator and vendor.

00:01:53.150 --> 00:01:55.229
<v Speaker 0>Before we get started, there is just a

00:01:55.229 --> 00:01:56.670
<v Speaker 0>little bit of housekeeping.

00:01:57.070 --> 00:01:57.790
<v Speaker 0>First,

00:01:57.950 --> 00:01:59.310
<v Speaker 0>please subscribe

00:01:59.310 --> 00:02:01.790
<v Speaker 0>to the channel and also remember to click

00:02:01.790 --> 00:02:03.470
<v Speaker 0>the thumb on the video.

00:02:04.030 --> 00:02:06.510
<v Speaker 0>This will do magic things with YouTube's algorithm,

00:02:06.510 --> 00:02:08.350
<v Speaker 0>which will help other people find this content,

00:02:09.044 --> 00:02:09.764
<v Speaker 0>which is

00:02:10.645 --> 00:02:12.245
<v Speaker 0>the goal here. Right? We wanna provide cloud

00:02:12.245 --> 00:02:12.965
<v Speaker 0>native

00:02:13.125 --> 00:02:15.205
<v Speaker 0>learning resources for those all to learn this

00:02:15.205 --> 00:02:16.405
<v Speaker 0>fast landscape together.

00:02:17.205 --> 00:02:20.005
<v Speaker 0>Also, we've got a Discord server available at

00:02:20.005 --> 00:02:21.285
<v Speaker 0>rockwood.chat.

00:02:21.790 --> 00:02:23.550
<v Speaker 0>It's a really great place to come and

00:02:23.550 --> 00:02:26.030
<v Speaker 0>ask questions, ask for new different episodes on

00:02:26.030 --> 00:02:28.830
<v Speaker 0>new technologies, and generally just chat Kubernetes, cloud

00:02:28.830 --> 00:02:30.430
<v Speaker 0>native, go, and a whole bunch of other

00:02:30.430 --> 00:02:32.590
<v Speaker 0>things. So come and join us. Great place

00:02:32.590 --> 00:02:33.310
<v Speaker 0>to hang out.

00:02:34.270 --> 00:02:36.734
<v Speaker 0>That's it. Boling bet done. Now we can

00:02:36.734 --> 00:02:38.734
<v Speaker 0>get started with this session. And for that,

00:02:38.734 --> 00:02:40.575
<v Speaker 0>I am joined by Ben Johnson. Ben Johnson

00:02:40.575 --> 00:02:42.495
<v Speaker 0>is the creator of Litestream.

00:02:42.655 --> 00:02:44.335
<v Speaker 0>Hey, mate. How is it going?

00:02:45.375 --> 00:02:48.334
<v Speaker 1>Hey. How are doing, man? Yeah. Very well.

00:02:48.334 --> 00:02:48.734
<v Speaker 0>Thank you.

00:02:49.540 --> 00:02:51.620
<v Speaker 0>Do you wanna just take a moment and

00:02:51.620 --> 00:02:53.860
<v Speaker 0>give us the TLDR on Ben Johnson?

00:02:55.140 --> 00:02:55.860
<v Speaker 1>Yeah.

00:02:56.019 --> 00:02:58.579
<v Speaker 1>I am a good developer. I've been doing

00:02:58.579 --> 00:03:00.260
<v Speaker 1>it for eight years now,

00:03:01.140 --> 00:03:03.060
<v Speaker 1>and I kind of always work in the

00:03:03.060 --> 00:03:04.659
<v Speaker 1>world of databases for that time.

00:03:05.435 --> 00:03:08.715
<v Speaker 1>And I wrote BoltDB. That's kind of another

00:03:08.715 --> 00:03:10.475
<v Speaker 1>open source project I've done in the past.

00:03:10.555 --> 00:03:11.995
<v Speaker 1>Just kind of a key value store that

00:03:11.995 --> 00:03:14.475
<v Speaker 1>got pretty popular. It's actually in Kubernetes itself

00:03:14.475 --> 00:03:16.395
<v Speaker 1>as part of etcd.

00:03:16.955 --> 00:03:19.290
<v Speaker 1>And then, I don't know, just played around

00:03:19.290 --> 00:03:20.810
<v Speaker 1>with a bunch of different open source projects

00:03:20.810 --> 00:03:23.130
<v Speaker 1>over the years. And then one thing that

00:03:23.130 --> 00:03:24.569
<v Speaker 1>I've always kind of loved was just like

00:03:24.569 --> 00:03:26.890
<v Speaker 1>that, like, embedded databases. Like, they're just

00:03:27.610 --> 00:03:29.690
<v Speaker 1>they're so easy to use, like, kinda, like,

00:03:29.690 --> 00:03:31.209
<v Speaker 1>just be up and running. There's not a

00:03:31.209 --> 00:03:33.595
<v Speaker 1>lot of dependency issues. They're easy to debug

00:03:33.595 --> 00:03:36.235
<v Speaker 1>typically, but I wanted kinda, like, SQL support.

00:03:36.475 --> 00:03:38.075
<v Speaker 1>But I also wanted to kinda make it

00:03:38.075 --> 00:03:40.635
<v Speaker 1>kinda more robust and, like, production ready. So

00:03:40.715 --> 00:03:42.395
<v Speaker 1>that's kinda how I came down the the

00:03:42.395 --> 00:03:44.235
<v Speaker 1>Litestream path. So,

00:03:44.635 --> 00:03:46.155
<v Speaker 1>yeah, I've been working on Litestream for the

00:03:46.155 --> 00:03:46.955
<v Speaker 1>last

00:03:47.160 --> 00:03:48.680
<v Speaker 1>it's kind of been going on since the

00:03:48.680 --> 00:03:50.440
<v Speaker 1>last maybe year or two. Just trying to

00:03:50.440 --> 00:03:52.200
<v Speaker 1>figure out the ins and outs of SQLite

00:03:52.200 --> 00:03:53.640
<v Speaker 1>and figuring out how you can get this

00:03:53.640 --> 00:03:56.040
<v Speaker 1>all to kinda work in different iterations and

00:03:56.040 --> 00:03:57.720
<v Speaker 1>just trying to simplify it as much as

00:03:57.720 --> 00:03:57.960
<v Speaker 1>possible.

00:03:58.695 --> 00:03:59.495
<v Speaker 0>Nice.

00:04:00.455 --> 00:04:02.775
<v Speaker 0>Does it take a special kind of person

00:04:02.775 --> 00:04:04.615
<v Speaker 0>to work in databases? Like, these now worked

00:04:04.615 --> 00:04:06.775
<v Speaker 0>on numerous that I'm aware of. And, like,

00:04:06.775 --> 00:04:08.455
<v Speaker 0>these must be, like, the hardest thing in

00:04:08.455 --> 00:04:09.975
<v Speaker 0>the world to be working on. Like, do

00:04:09.975 --> 00:04:11.255
<v Speaker 0>you just like pain? Is that it?

00:04:12.320 --> 00:04:14.640
<v Speaker 0>Yeah. I think it's just masochism, really.

00:04:16.000 --> 00:04:17.680
<v Speaker 1>It's weird it's kind of a weird thing.

00:04:17.680 --> 00:04:18.880
<v Speaker 1>Like, I have people that I work with

00:04:18.880 --> 00:04:20.240
<v Speaker 1>that work in databases.

00:04:20.320 --> 00:04:22.000
<v Speaker 1>They always say, like, I am going back

00:04:22.000 --> 00:04:23.760
<v Speaker 1>to doing just, web apps. Like, I'm doing

00:04:23.760 --> 00:04:26.175
<v Speaker 1>something simple next time, and we always kinda

00:04:26.175 --> 00:04:27.695
<v Speaker 1>come back to databases.

00:04:27.695 --> 00:04:29.615
<v Speaker 1>But, like, it's a you think it's really

00:04:29.615 --> 00:04:31.615
<v Speaker 1>difficult, but it it's actually, like,

00:04:32.495 --> 00:04:34.655
<v Speaker 1>it's like a smaller problem space. Like, typically,

00:04:34.655 --> 00:04:35.775
<v Speaker 1>you only work at, you know, you work

00:04:35.775 --> 00:04:37.535
<v Speaker 1>with bytes and, like, it's very low level.

00:04:38.100 --> 00:04:39.460
<v Speaker 1>Whereas, you know, I used to work in,

00:04:39.460 --> 00:04:41.540
<v Speaker 1>like, web apps and front ends, and that's

00:04:41.540 --> 00:04:43.460
<v Speaker 1>all, like, I got four different browsers to

00:04:43.460 --> 00:04:45.460
<v Speaker 1>work in and different, you know, kind of

00:04:45.460 --> 00:04:47.780
<v Speaker 1>a things that, you know, CSS problems. Like,

00:04:47.780 --> 00:04:49.140
<v Speaker 1>I get in CSS now and I just

00:04:49.300 --> 00:04:51.380
<v Speaker 1>I get lost. So it's one of those

00:04:51.380 --> 00:04:52.900
<v Speaker 1>things that it seems really difficult from the

00:04:52.900 --> 00:04:54.405
<v Speaker 1>outside, but it just depends on where you're

00:04:54.405 --> 00:04:56.245
<v Speaker 1>coming from really. I guess it all comes

00:04:56.245 --> 00:04:58.485
<v Speaker 0>down to where you wanna focus your expertise

00:04:58.485 --> 00:05:00.325
<v Speaker 0>and your domains and like, I guess every

00:05:00.325 --> 00:05:02.885
<v Speaker 0>other domain is gonna appear challenging. I suffer

00:05:02.965 --> 00:05:04.725
<v Speaker 0>the same. Like, I tried to write CSS

00:05:04.725 --> 00:05:06.740
<v Speaker 0>a whole bunch of times. I've rewritten my

00:05:06.740 --> 00:05:09.140
<v Speaker 0>blog 14,000 times in the last month and

00:05:09.140 --> 00:05:11.780
<v Speaker 0>CSS is always trips me up. It's hard.

00:05:12.340 --> 00:05:15.220
<v Speaker 0>But Yeah. Yeah. So it's it's cool that

00:05:15.220 --> 00:05:17.300
<v Speaker 0>you're always working on databases. Maybe you can

00:05:17.300 --> 00:05:18.900
<v Speaker 0>kind of then tell us what drew you

00:05:18.900 --> 00:05:19.940
<v Speaker 0>to to SQLite.

00:05:21.544 --> 00:05:22.585
<v Speaker 1>Sure. Yeah.

00:05:22.905 --> 00:05:24.905
<v Speaker 1>I think as far as like, SQLite's kinda

00:05:24.905 --> 00:05:27.384
<v Speaker 1>known for just being super rock hard, stable.

00:05:27.384 --> 00:05:28.905
<v Speaker 1>Like, they put it in airplanes. They put

00:05:28.905 --> 00:05:30.905
<v Speaker 1>it in all kinds of devices, and it

00:05:30.905 --> 00:05:32.104
<v Speaker 1>just kinda works everywhere.

00:05:32.824 --> 00:05:35.630
<v Speaker 1>The team behind it is just super chill

00:05:35.630 --> 00:05:37.310
<v Speaker 1>and laid back. They're not always out, you

00:05:37.310 --> 00:05:39.550
<v Speaker 1>know, on social media, like, touting how amazing

00:05:39.550 --> 00:05:41.950
<v Speaker 1>they are and whatever stuff. It's kinda like

00:05:42.030 --> 00:05:43.310
<v Speaker 1>they just you know, I feel like,

00:05:43.630 --> 00:05:45.550
<v Speaker 1>like, people that are just, like, really database

00:05:45.550 --> 00:05:46.910
<v Speaker 1>nerds, like

00:05:47.389 --> 00:05:47.710
<v Speaker 1>or

00:05:48.805 --> 00:05:50.325
<v Speaker 1>they don't do all the marketing fluff. I

00:05:50.325 --> 00:05:51.445
<v Speaker 1>feel like I feel like that's kind of

00:05:51.445 --> 00:05:52.485
<v Speaker 1>a a good sign.

00:05:52.965 --> 00:05:55.365
<v Speaker 1>So as far as SQLite, like, it's it's

00:05:55.365 --> 00:05:57.445
<v Speaker 1>one of the few embedded databases that just

00:05:57.445 --> 00:05:58.885
<v Speaker 1>kind of is ubiquitous

00:05:58.965 --> 00:06:01.445
<v Speaker 1>and is has SQL support, like, strong SQL

00:06:01.445 --> 00:06:01.764
<v Speaker 1>support.

00:06:02.270 --> 00:06:03.550
<v Speaker 1>So you can do a lot of things

00:06:03.550 --> 00:06:05.070
<v Speaker 1>you can do in something like Postgres where

00:06:05.070 --> 00:06:06.830
<v Speaker 1>you get JSON support, you get,

00:06:07.630 --> 00:06:08.830
<v Speaker 1>like, CTEs,

00:06:08.830 --> 00:06:10.670
<v Speaker 1>like the recursive queries you can do in

00:06:10.670 --> 00:06:11.150
<v Speaker 1>there,

00:06:11.630 --> 00:06:13.790
<v Speaker 1>windowing. You get all kinds of functionality.

00:06:14.030 --> 00:06:14.830
<v Speaker 1>It's

00:06:14.830 --> 00:06:17.150
<v Speaker 1>kinda surprising for just a single small embedded

00:06:17.150 --> 00:06:17.550
<v Speaker 1>database.

00:06:18.345 --> 00:06:19.785
<v Speaker 1>That's kinda what drew me there.

00:06:20.585 --> 00:06:22.585
<v Speaker 0>Yeah. I think it was maybe shortly after

00:06:22.585 --> 00:06:24.985
<v Speaker 0>your livestream announcement. I it it kinda got

00:06:24.985 --> 00:06:26.985
<v Speaker 0>me thinking, like, I've never considered

00:06:27.065 --> 00:06:28.824
<v Speaker 0>and I think it's just my own ex

00:06:29.544 --> 00:06:30.985
<v Speaker 0>the way that I've worked with SQLite over

00:06:30.985 --> 00:06:32.664
<v Speaker 0>the years, it's always been used for

00:06:33.360 --> 00:06:34.240
<v Speaker 0>testing

00:06:34.240 --> 00:06:37.040
<v Speaker 0>environments and never never really considered chipping it

00:06:37.040 --> 00:06:38.800
<v Speaker 0>to prod. And I threw the question to

00:06:38.800 --> 00:06:40.400
<v Speaker 0>Twitter. I mean, like, when when I say

00:06:40.400 --> 00:06:42.800
<v Speaker 0>SQLite, what do you think of? Like, production,

00:06:42.800 --> 00:06:43.520
<v Speaker 0>testing,

00:06:44.160 --> 00:06:46.375
<v Speaker 0>embeddings, and stuff like that. And there were

00:06:46.375 --> 00:06:48.775
<v Speaker 0>a lot of production SQLite people that were

00:06:48.775 --> 00:06:50.455
<v Speaker 0>like, yeah. Like, definitely. And I I think

00:06:50.455 --> 00:06:52.534
<v Speaker 0>it was just my own mindset just wasn't

00:06:52.534 --> 00:06:54.694
<v Speaker 0>there and now I'm having to reevaluate that.

00:06:54.694 --> 00:06:57.014
<v Speaker 0>So is that something Yeah. That you do

00:06:57.014 --> 00:06:59.495
<v Speaker 0>yourself or receive other people that SQLite has

00:06:59.495 --> 00:07:02.590
<v Speaker 0>a strong contender for a production database.

00:07:03.949 --> 00:07:06.270
<v Speaker 1>Yeah. Honestly, I'm always surprised by how many

00:07:06.270 --> 00:07:08.270
<v Speaker 1>people out there actually use it.

00:07:08.750 --> 00:07:10.910
<v Speaker 1>And just like and it's just running stuff

00:07:10.910 --> 00:07:11.950
<v Speaker 1>all over the world.

00:07:12.349 --> 00:07:12.910
<v Speaker 1>And,

00:07:13.389 --> 00:07:14.985
<v Speaker 1>you know, there's there's kind of a range

00:07:14.985 --> 00:07:17.544
<v Speaker 1>of different applications even before Lightstream that you

00:07:17.544 --> 00:07:20.425
<v Speaker 1>could use SQLite for a production database. Like,

00:07:20.425 --> 00:07:22.104
<v Speaker 1>if you can do, you know, hourly or

00:07:22.104 --> 00:07:23.785
<v Speaker 1>daily backups with your data and, like, that

00:07:23.785 --> 00:07:25.545
<v Speaker 1>window of data loss isn't

00:07:25.705 --> 00:07:28.104
<v Speaker 1>gonna tank your company or your organization or

00:07:28.104 --> 00:07:30.070
<v Speaker 1>whatever you're doing, like, that's that's a great

00:07:30.070 --> 00:07:32.150
<v Speaker 1>approach. Just a simple replication.

00:07:32.310 --> 00:07:34.150
<v Speaker 1>There's simple simple backups.

00:07:34.950 --> 00:07:36.310
<v Speaker 1>So I think there's a lot of ways

00:07:36.310 --> 00:07:38.550
<v Speaker 1>you can use it and still get a

00:07:38.550 --> 00:07:40.710
<v Speaker 1>lot out of it. And it just it

00:07:40.710 --> 00:07:42.310
<v Speaker 1>reduces a lot of the ops overhead. So

00:07:42.310 --> 00:07:43.670
<v Speaker 1>if you're not an ops person, like, I'm

00:07:43.670 --> 00:07:44.630
<v Speaker 1>not a big ops person,

00:07:45.645 --> 00:07:46.764
<v Speaker 1>I think it goes a long way for

00:07:46.764 --> 00:07:47.485
<v Speaker 1>that too.

00:07:48.205 --> 00:07:50.365
<v Speaker 0>Okay. So maybe we can get a pivot

00:07:50.365 --> 00:07:52.125
<v Speaker 0>over to Litestream then. And, like, what does

00:07:52.125 --> 00:07:54.685
<v Speaker 0>Litestream bring to the SQLite world?

00:07:55.805 --> 00:07:56.284
<v Speaker 1>Sure. Yeah.

00:07:56.940 --> 00:07:57.900
<v Speaker 1>So

00:07:57.900 --> 00:08:00.380
<v Speaker 1>Litestream, it's a single file on your data

00:08:00.540 --> 00:08:01.420
<v Speaker 1>on your disk.

00:08:01.740 --> 00:08:04.620
<v Speaker 1>And if you're running your application and then

00:08:04.620 --> 00:08:06.780
<v Speaker 1>it just dies suddenly, your disks crash,

00:08:07.020 --> 00:08:09.020
<v Speaker 1>and you lose all your data, that sucks,

00:08:09.020 --> 00:08:10.460
<v Speaker 1>and, you know, hopefully, you have a backup.

00:08:11.245 --> 00:08:13.565
<v Speaker 1>But the problem with, you know, historical backup

00:08:13.565 --> 00:08:16.045
<v Speaker 1>solutions for SQLite is they are kind of

00:08:16.045 --> 00:08:17.085
<v Speaker 1>a big snapshot.

00:08:17.565 --> 00:08:19.165
<v Speaker 1>So you have to run them every hour,

00:08:19.165 --> 00:08:21.485
<v Speaker 1>every day, something like that. So you get

00:08:21.485 --> 00:08:23.485
<v Speaker 1>this huge window of data loss that, you

00:08:23.485 --> 00:08:24.605
<v Speaker 1>know, doesn't work for a lot of people.

00:08:25.030 --> 00:08:26.949
<v Speaker 1>So what LightStream does is it kind of

00:08:26.949 --> 00:08:29.030
<v Speaker 1>takes the changes that are written to

00:08:30.150 --> 00:08:31.590
<v Speaker 1>to SQLite

00:08:31.669 --> 00:08:33.990
<v Speaker 1>and then batches them up every second and

00:08:33.990 --> 00:08:36.150
<v Speaker 1>ship ships them up to s three or

00:08:36.150 --> 00:08:37.110
<v Speaker 1>some other replica.

00:08:38.245 --> 00:08:39.845
<v Speaker 0>So that means So it's a

00:08:40.644 --> 00:08:42.485
<v Speaker 1>go ahead. I see where it goes. So

00:08:42.485 --> 00:08:44.084
<v Speaker 0>does does that mean then if I'm running

00:08:44.084 --> 00:08:47.045
<v Speaker 0>Litestream against my SQL database that

00:08:47.125 --> 00:08:48.964
<v Speaker 0>in an ideal world, I'm only ever gonna

00:08:48.964 --> 00:08:51.444
<v Speaker 0>lose one second in the event that my

00:08:51.800 --> 00:08:54.439
<v Speaker 0>application crashes or the failed system has a

00:08:54.439 --> 00:08:55.800
<v Speaker 0>corruption or everything like that.

00:08:56.839 --> 00:08:59.160
<v Speaker 1>Yeah. So, ideally, it's one second of data

00:08:59.160 --> 00:09:01.639
<v Speaker 1>loss. You also get other benefits too where

00:09:01.720 --> 00:09:03.879
<v Speaker 1>if you did a drop table on your

00:09:03.720 --> 00:09:05.155
<v Speaker 1>or, you know, a bunch of drop tables

00:09:05.155 --> 00:09:06.435
<v Speaker 1>on your database and lost a bunch of

00:09:06.435 --> 00:09:08.595
<v Speaker 1>data, it will corrupt it somehow just through,

00:09:08.595 --> 00:09:10.195
<v Speaker 1>like, easier error.

00:09:10.675 --> 00:09:12.995
<v Speaker 1>You can actually replay the database back into

00:09:12.995 --> 00:09:14.995
<v Speaker 1>a previous point in time so you can

00:09:14.995 --> 00:09:16.835
<v Speaker 1>kind of recover from those scene or scenarios

00:09:16.835 --> 00:09:17.475
<v Speaker 1>as well.

00:09:18.115 --> 00:09:20.260
<v Speaker 0>Ah, I I So you get a multiple

00:09:20.260 --> 00:09:21.780
<v Speaker 1>level. Oh, go ahead.

00:09:22.180 --> 00:09:24.180
<v Speaker 0>I I had no idea that point in

00:09:24.180 --> 00:09:25.860
<v Speaker 0>time was a was an option when you

00:09:25.860 --> 00:09:28.500
<v Speaker 0>hook up Litestream. I I guess that makes

00:09:28.500 --> 00:09:30.260
<v Speaker 0>a lot of sense. Right? I think you've

00:09:30.260 --> 00:09:31.460
<v Speaker 0>got some slides to talk about how this

00:09:31.460 --> 00:09:32.900
<v Speaker 0>actually works under the hood. Do you wanna

00:09:32.900 --> 00:09:34.260
<v Speaker 0>pop them up and we can Sure. Yeah.

00:09:34.260 --> 00:09:35.460
<v Speaker 1>Can pop those up. Yeah.

00:09:36.445 --> 00:09:37.245
<v Speaker 1>Yeah.

00:09:40.205 --> 00:09:41.725
<v Speaker 1>Oh, there we go. Indeed.

00:09:43.565 --> 00:09:46.125
<v Speaker 1>Cool. Can you see my screen now? Yeah.

00:09:46.125 --> 00:09:47.565
<v Speaker 0>Yep. You are live. Go for a bit.

00:09:48.660 --> 00:09:50.500
<v Speaker 1>Cool. Awesome. So you got Litestream.

00:09:50.660 --> 00:09:53.459
<v Speaker 1>So you I'm sorry. Streaming, like, replication for

00:09:53.459 --> 00:09:54.260
<v Speaker 1>SQLite.

00:09:55.779 --> 00:09:58.899
<v Speaker 1>And just kinda this is how SQLite works

00:09:58.899 --> 00:10:01.220
<v Speaker 1>internally mostly, and then you can kinda see

00:10:01.220 --> 00:10:02.260
<v Speaker 1>how Litestream

00:10:02.315 --> 00:10:03.915
<v Speaker 1>kind of attaches onto that.

00:10:04.714 --> 00:10:07.834
<v Speaker 1>So SQLite and, honestly, like most databases honestly,

00:10:07.834 --> 00:10:09.675
<v Speaker 1>it's kinda ridiculous when you hear comparisons of,

00:10:09.675 --> 00:10:12.714
<v Speaker 1>like, SQLite to, like, maybe MySQL's faster or

00:10:12.714 --> 00:10:15.035
<v Speaker 1>Postgres is faster. Like, they're all gonna be

00:10:15.035 --> 00:10:18.180
<v Speaker 1>just b trees storage on your disk. Like,

00:10:18.180 --> 00:10:20.020
<v Speaker 1>they're mostly kind of structured the same. They

00:10:20.020 --> 00:10:22.180
<v Speaker 1>have a couple different features, but you're not

00:10:22.180 --> 00:10:24.900
<v Speaker 1>gonna get, like, wildly different performance from SQLite

00:10:24.900 --> 00:10:26.420
<v Speaker 1>versus Postgres or whatnot.

00:10:27.300 --> 00:10:28.740
<v Speaker 1>So this is what a table kinda looks

00:10:28.740 --> 00:10:29.540
<v Speaker 1>like on disk

00:10:29.955 --> 00:10:31.955
<v Speaker 1>or kinda looks like logically.

00:10:32.115 --> 00:10:33.555
<v Speaker 1>You have kind of a root node and

00:10:33.555 --> 00:10:36.115
<v Speaker 1>then it branches out. And then at the

00:10:36.115 --> 00:10:37.715
<v Speaker 1>very bottom, you have leaf nodes, which is

00:10:37.715 --> 00:10:39.635
<v Speaker 1>where your actual data is stored. But all

00:10:39.635 --> 00:10:40.355
<v Speaker 1>these different

00:10:41.635 --> 00:10:43.555
<v Speaker 1>parts of your data or chunks of data

00:10:43.555 --> 00:10:45.260
<v Speaker 1>are all stored in these pages, which are

00:10:45.260 --> 00:10:47.340
<v Speaker 1>usually about four kilobytes,

00:10:47.420 --> 00:10:49.340
<v Speaker 1>and they're structured as a a b tree.

00:10:50.860 --> 00:10:52.300
<v Speaker 1>So what happens this is kind of a

00:10:52.300 --> 00:10:54.700
<v Speaker 1>busy slide here. So the on the right

00:10:54.700 --> 00:10:58.060
<v Speaker 1>side, there's the logical rep sorry, representation

00:10:58.275 --> 00:10:59.795
<v Speaker 1>where you have this tree

00:11:00.355 --> 00:11:02.355
<v Speaker 1>of how your your data is stored on

00:11:02.355 --> 00:11:02.995
<v Speaker 1>disk,

00:11:03.315 --> 00:11:05.395
<v Speaker 1>but that actually gets stored as just a

00:11:05.395 --> 00:11:06.275
<v Speaker 1>sequential

00:11:07.155 --> 00:11:08.995
<v Speaker 1>list of pages, and they kind of reference

00:11:08.995 --> 00:11:10.755
<v Speaker 1>each other, but they're all these four kilobyte

00:11:10.755 --> 00:11:12.595
<v Speaker 1>blocks. That's kind of the important thing to

00:11:12.595 --> 00:11:14.680
<v Speaker 1>know, and they're all stored in this a

00:11:14.680 --> 00:11:15.959
<v Speaker 1>single database file.

00:11:17.880 --> 00:11:20.680
<v Speaker 1>So when you make a change to SQLite,

00:11:20.759 --> 00:11:22.279
<v Speaker 1>it has a couple different modes it can

00:11:22.279 --> 00:11:24.920
<v Speaker 1>work in. Lightstream only works when you're in

00:11:24.920 --> 00:11:27.079
<v Speaker 1>a SQLite to wall mode, which is usually

00:11:27.079 --> 00:11:29.480
<v Speaker 1>the kind of recommended one to use anyway.

00:11:30.315 --> 00:11:32.875
<v Speaker 1>Instead of overwriting the page on disk, it'll

00:11:32.875 --> 00:11:34.635
<v Speaker 1>actually write it it'll append it to another

00:11:34.635 --> 00:11:36.315
<v Speaker 1>file called the write ahead log,

00:11:36.795 --> 00:11:39.115
<v Speaker 1>and that write ahead log actually kind of

00:11:39.115 --> 00:11:39.755
<v Speaker 1>just

00:11:40.555 --> 00:11:43.035
<v Speaker 1>it references to the pages on the database

00:11:43.035 --> 00:11:44.910
<v Speaker 1>file. So in this example, we have a

00:11:44.910 --> 00:11:48.029
<v Speaker 1>database file that has pages zero through eight.

00:11:48.029 --> 00:11:50.269
<v Speaker 1>And then if we make a change to

00:11:50.269 --> 00:11:52.910
<v Speaker 1>something on page three, it'll copy or it

00:11:52.910 --> 00:11:54.910
<v Speaker 1>kinda make it'll write the whole page three

00:11:54.910 --> 00:11:56.430
<v Speaker 1>to the wall file. And then we make

00:11:56.430 --> 00:11:58.774
<v Speaker 1>a change to page one, and yes. You

00:11:58.774 --> 00:12:00.535
<v Speaker 1>see now you can't see my cursor. So

00:12:01.095 --> 00:12:02.615
<v Speaker 1>it makes a change to page one, it'll

00:12:02.615 --> 00:12:03.975
<v Speaker 1>pin that on. And then if it makes

00:12:03.975 --> 00:12:06.855
<v Speaker 1>another page change to page three, it'll pin

00:12:06.855 --> 00:12:08.695
<v Speaker 1>that on. So it kinda has this

00:12:09.495 --> 00:12:11.654
<v Speaker 1>this layering of the wall file on top

00:12:11.654 --> 00:12:14.180
<v Speaker 1>of the database file kind of while it's

00:12:14.180 --> 00:12:16.260
<v Speaker 1>running. Not sure if that makes sense. That's

00:12:16.260 --> 00:12:18.340
<v Speaker 1>kinda how a lot of databases work.

00:12:19.460 --> 00:12:20.100
<v Speaker 1>So,

00:12:20.900 --> 00:12:21.460
<v Speaker 1>eventually,

00:12:21.860 --> 00:12:23.540
<v Speaker 1>you know, this wall file gets bigger and

00:12:23.540 --> 00:12:26.420
<v Speaker 1>bigger, and it'll do something called checkpointing, where

00:12:26.420 --> 00:12:29.264
<v Speaker 1>checkpointing moves all those pages back into the

00:12:29.264 --> 00:12:31.504
<v Speaker 1>main database file and overwrites everything for all

00:12:31.504 --> 00:12:32.785
<v Speaker 1>those change pages.

00:12:33.504 --> 00:12:34.065
<v Speaker 1>And

00:12:34.625 --> 00:12:36.785
<v Speaker 1>then it'll kinda clear out that those pages

00:12:36.785 --> 00:12:37.904
<v Speaker 1>on the wall file,

00:12:38.065 --> 00:12:39.985
<v Speaker 1>and it'll restart from the beginning. So it's

00:12:39.985 --> 00:12:42.520
<v Speaker 1>it's basically kinda like a circular buffer where

00:12:42.520 --> 00:12:44.120
<v Speaker 1>it'll kinda fill it up and then restart

00:12:44.120 --> 00:12:45.560
<v Speaker 1>from the beginning and just kinda keep going

00:12:45.560 --> 00:12:46.440
<v Speaker 1>in a circle.

00:12:47.880 --> 00:12:48.440
<v Speaker 1>So

00:12:49.400 --> 00:12:50.040
<v Speaker 1>what,

00:12:50.360 --> 00:12:53.240
<v Speaker 1>Litestream does is we kind of unroll those

00:12:53.240 --> 00:12:54.760
<v Speaker 1>restarts of the wall file.

00:12:55.425 --> 00:12:57.905
<v Speaker 1>So your first wall file gets written out,

00:12:57.905 --> 00:12:59.185
<v Speaker 1>and when it restarts,

00:12:59.505 --> 00:13:00.545
<v Speaker 1>Litestream

00:13:00.545 --> 00:13:04.145
<v Speaker 1>basically is copying those wall pages to a

00:13:04.145 --> 00:13:05.505
<v Speaker 1>kind of station area.

00:13:06.225 --> 00:13:08.385
<v Speaker 1>And then once it restarts, it'll start a

00:13:08.385 --> 00:13:10.870
<v Speaker 1>new wall file with those new pages. So

00:13:10.870 --> 00:13:13.509
<v Speaker 1>it kind of incrementally keeps track of all

00:13:13.509 --> 00:13:15.430
<v Speaker 1>new rights to the wall even though that

00:13:15.430 --> 00:13:18.470
<v Speaker 1>the wall kind of gets restarted and reused.

00:13:19.189 --> 00:13:20.949
<v Speaker 1>So then we have the staging area with

00:13:20.949 --> 00:13:21.589
<v Speaker 1>Litestream,

00:13:23.185 --> 00:13:25.345
<v Speaker 1>and we start shipping out those

00:13:25.665 --> 00:13:28.065
<v Speaker 1>chunks of the wall out to either an

00:13:28.065 --> 00:13:30.145
<v Speaker 1>s three buckets. We can do Azure. We

00:13:30.145 --> 00:13:32.065
<v Speaker 1>can do Google Cloud Storage.

00:13:32.385 --> 00:13:34.545
<v Speaker 1>We can do you do NFS over, like,

00:13:34.545 --> 00:13:36.705
<v Speaker 1>a mount. You can do SFTP

00:13:37.230 --> 00:13:39.550
<v Speaker 1>and yeah. Yeah. All kinds of different little

00:13:39.550 --> 00:13:41.550
<v Speaker 1>replica destinations you can go to.

00:13:42.110 --> 00:13:44.110
<v Speaker 1>And, effectively, once you ship them out there,

00:13:44.110 --> 00:13:45.150
<v Speaker 1>if you wanna recreate

00:13:45.550 --> 00:13:47.870
<v Speaker 1>the state of your database, we just pull

00:13:47.870 --> 00:13:49.790
<v Speaker 1>down a snapshot, which is kind of your

00:13:49.790 --> 00:13:51.230
<v Speaker 1>whole database at a certain point in time,

00:13:51.825 --> 00:13:54.305
<v Speaker 1>and then replay all the wall pages that

00:13:54.305 --> 00:13:56.145
<v Speaker 1>occurred after that up to a certain point

00:13:56.145 --> 00:13:56.705
<v Speaker 1>in time.

00:13:57.345 --> 00:13:58.945
<v Speaker 1>So that's kind of the

00:13:59.265 --> 00:14:01.345
<v Speaker 1>the basics of how that works. Does that

00:14:01.345 --> 00:14:03.585
<v Speaker 1>make sense? It does make sense. Yeah.

00:14:04.480 --> 00:14:06.160
<v Speaker 1>So I know it gets a little technical

00:14:06.160 --> 00:14:07.680
<v Speaker 1>and nerdy with the

00:14:08.560 --> 00:14:11.360
<v Speaker 1>some of database pages and terminology, but

00:14:12.240 --> 00:14:14.160
<v Speaker 1>kinda really, the underlying structure is just kind

00:14:14.160 --> 00:14:15.600
<v Speaker 1>of this append only

00:14:17.245 --> 00:14:19.245
<v Speaker 1>set of data that Litestream keeps track of.

00:14:19.245 --> 00:14:21.165
<v Speaker 1>It's all those wall page changes.

00:14:22.445 --> 00:14:24.205
<v Speaker 0>So it kinda remain I don't know if

00:14:24.205 --> 00:14:26.205
<v Speaker 0>you're familiar with event sourcing, but it's a

00:14:26.205 --> 00:14:28.925
<v Speaker 0>really cool architecture that I've experimented with over

00:14:28.925 --> 00:14:30.700
<v Speaker 0>the years, and it kinda feels like that.

00:14:30.700 --> 00:14:32.460
<v Speaker 0>I got I never really correlated that to

00:14:32.460 --> 00:14:34.700
<v Speaker 0>write ahead logs in general, but maybe that

00:14:34.700 --> 00:14:36.620
<v Speaker 0>is a Yeah. I mean analogy?

00:14:37.980 --> 00:14:40.620
<v Speaker 1>Yeah. That's a decent analogy. I haven't actually

00:14:40.620 --> 00:14:42.140
<v Speaker 1>built anything with event sourcing, but I know

00:14:42.140 --> 00:14:42.700
<v Speaker 1>what you're talking about.

00:14:43.555 --> 00:14:45.555
<v Speaker 1>I kinda think of it also, like, Kafka

00:14:45.555 --> 00:14:47.155
<v Speaker 1>is pretty similar where it has this kind

00:14:47.155 --> 00:14:48.835
<v Speaker 1>of append only set of events.

00:14:49.155 --> 00:14:50.755
<v Speaker 1>You can replay all those events and get

00:14:50.755 --> 00:14:52.275
<v Speaker 1>the same final

00:14:52.355 --> 00:14:54.835
<v Speaker 1>state. So, yeah, very similar.

00:14:55.395 --> 00:14:58.115
<v Speaker 0>So but look. Based on what you just

00:14:58.115 --> 00:14:58.995
<v Speaker 0>showed, is there a rig?

00:14:59.930 --> 00:15:02.570
<v Speaker 0>I mean, Litestream is doing really what SQLite

00:15:02.570 --> 00:15:04.490
<v Speaker 0>is doing as well, which is, you know,

00:15:04.490 --> 00:15:06.010
<v Speaker 0>s right into the wall and then doing

00:15:06.010 --> 00:15:07.930
<v Speaker 0>the checkpoints and the snapshotting.

00:15:08.650 --> 00:15:11.130
<v Speaker 0>Does Litestream just forgo the

00:15:11.895 --> 00:15:14.615
<v Speaker 0>the checkpoints and always stores the different walls

00:15:14.615 --> 00:15:16.855
<v Speaker 0>in the different iterations or do you actually

00:15:17.495 --> 00:15:19.335
<v Speaker 0>merge them at some point? I'm wondering how

00:15:19.335 --> 00:15:21.895
<v Speaker 0>far back in time does the Justin, the

00:15:21.895 --> 00:15:24.135
<v Speaker 0>point in time recovery go with Litestream.

00:15:24.890 --> 00:15:26.810
<v Speaker 0>So they should take care that one. Yeah.

00:15:27.930 --> 00:15:29.850
<v Speaker 1>No. That's that's great. Yeah. So

00:15:30.010 --> 00:15:31.690
<v Speaker 1>what Litestream does is it has kind of

00:15:31.690 --> 00:15:34.490
<v Speaker 1>a retention policy on it. So by default,

00:15:34.490 --> 00:15:36.410
<v Speaker 1>it's about twenty four hours, and then it'll

00:15:36.410 --> 00:15:38.165
<v Speaker 1>do a new snapshot and kind of start

00:15:38.165 --> 00:15:39.925
<v Speaker 1>from there with the wall again.

00:15:40.564 --> 00:15:42.725
<v Speaker 1>And you can configure that snapshot more often,

00:15:42.725 --> 00:15:44.725
<v Speaker 1>but and then retain longer. So if you

00:15:44.725 --> 00:15:45.605
<v Speaker 1>want to retain,

00:15:45.845 --> 00:15:47.764
<v Speaker 1>you know, for seven days and maybe do

00:15:47.764 --> 00:15:49.925
<v Speaker 1>a snapshot every day or every hour, you

00:15:49.925 --> 00:15:50.324
<v Speaker 1>could do that.

00:15:51.230 --> 00:15:53.709
<v Speaker 1>So your your point in time recovery is

00:15:53.709 --> 00:15:56.750
<v Speaker 1>however long that retention period is. Okay. And,

00:15:56.750 --> 00:15:58.029
<v Speaker 1>you know, if you have stuff like s

00:15:58.029 --> 00:15:59.310
<v Speaker 1>three, like, three,

00:16:00.110 --> 00:16:02.990
<v Speaker 1>the way that AWS really makes money is

00:16:02.990 --> 00:16:05.404
<v Speaker 1>kind of when you download files, but for

00:16:05.404 --> 00:16:07.644
<v Speaker 1>replication, you really just upload files.

00:16:08.045 --> 00:16:10.764
<v Speaker 1>So it's actually super cheap to to replicate

00:16:10.764 --> 00:16:12.365
<v Speaker 1>up to s three, which is great.

00:16:12.925 --> 00:16:13.565
<v Speaker 0>Yeah.

00:16:13.964 --> 00:16:16.445
<v Speaker 0>Plus it supports is that any s three

00:16:16.445 --> 00:16:18.285
<v Speaker 0>compatible API, or is that like a a

00:16:18.285 --> 00:16:20.125
<v Speaker 0>subset that you've kind of just tested that

00:16:20.125 --> 00:16:20.445
<v Speaker 0>against?

00:16:21.750 --> 00:16:23.830
<v Speaker 1>So it's any s three compatible API.

00:16:23.830 --> 00:16:24.550
<v Speaker 1>The only

00:16:24.950 --> 00:16:27.029
<v Speaker 1>caveat I would say is that it did

00:16:27.029 --> 00:16:29.510
<v Speaker 1>not work on Google Cloud Storage, which has

00:16:29.830 --> 00:16:32.310
<v Speaker 1>a compatible API because it wasn't that compatible.

00:16:32.550 --> 00:16:34.310
<v Speaker 1>But we had a native support on the

00:16:34.310 --> 00:16:36.575
<v Speaker 1>last version. So it's works on there in

00:16:36.575 --> 00:16:37.455
<v Speaker 1>Azure as well.

00:16:38.335 --> 00:16:40.975
<v Speaker 0>Awesome. Alright. Alright. Your question is, can you

00:16:40.975 --> 00:16:43.295
<v Speaker 0>say more about why Litestream unrolls the wall

00:16:43.295 --> 00:16:44.895
<v Speaker 0>pages at checkpoint time?

00:16:45.214 --> 00:16:46.815
<v Speaker 0>Wouldn't you just need the most recent wall

00:16:46.815 --> 00:16:48.735
<v Speaker 0>pages plus a snapshot to replay or build

00:16:48.735 --> 00:16:49.135
<v Speaker 0>the database?

00:16:50.050 --> 00:16:52.050
<v Speaker 0>That makes sense to you? Well,

00:16:52.370 --> 00:16:54.290
<v Speaker 1>I know think. So

00:16:54.770 --> 00:16:55.490
<v Speaker 1>it's

00:16:56.290 --> 00:16:57.890
<v Speaker 1>would you only need the most recent wall

00:16:57.890 --> 00:17:00.530
<v Speaker 1>pages plus a snapshot to replay it? So

00:17:00.530 --> 00:17:02.690
<v Speaker 1>it it doesn't keep yeah. You could keep

00:17:02.690 --> 00:17:04.684
<v Speaker 1>a unique set of pages,

00:17:05.165 --> 00:17:06.365
<v Speaker 1>but I think that'd be difficult to track

00:17:06.365 --> 00:17:07.164
<v Speaker 1>over time.

00:17:08.205 --> 00:17:10.205
<v Speaker 1>Kind of the doing the unroll and pushing

00:17:10.205 --> 00:17:12.525
<v Speaker 1>up to s three makes everything immutable, which

00:17:12.525 --> 00:17:14.765
<v Speaker 1>kinda simplifies a lot of pieces too. We're

00:17:14.765 --> 00:17:16.445
<v Speaker 1>not trying to merge merge pages together.

00:17:18.330 --> 00:17:20.250
<v Speaker 1>If I understand your question correctly, you could

00:17:20.250 --> 00:17:21.770
<v Speaker 1>technically merge

00:17:22.890 --> 00:17:25.450
<v Speaker 1>those, but but, yeah, it could be for

00:17:25.450 --> 00:17:26.329
<v Speaker 1>future

00:17:26.890 --> 00:17:27.690
<v Speaker 1>feature.

00:17:28.250 --> 00:17:29.770
<v Speaker 0>Alright. Nice. Thank you.

00:17:30.170 --> 00:17:32.335
<v Speaker 0>So is it fair to say then that

00:17:32.335 --> 00:17:34.655
<v Speaker 0>the recovery time of Litestream is is pretty

00:17:34.655 --> 00:17:36.335
<v Speaker 0>fast depending on the size of your database,

00:17:36.335 --> 00:17:38.015
<v Speaker 0>of course? I'm assuming that you're just pulling

00:17:38.015 --> 00:17:38.654
<v Speaker 0>down

00:17:39.054 --> 00:17:41.375
<v Speaker 0>the snapshot, the wall, replaying it, and then

00:17:41.375 --> 00:17:43.375
<v Speaker 0>your application is is up and running again.

00:17:43.375 --> 00:17:43.615
<v Speaker 0>Right?

00:17:45.220 --> 00:17:48.179
<v Speaker 1>Yeah. So it definitely yeah. It definitely depends

00:17:48.179 --> 00:17:50.420
<v Speaker 1>on kind of your your length of time

00:17:50.420 --> 00:17:52.100
<v Speaker 1>between from your snapshot to where you wanna

00:17:52.100 --> 00:17:54.340
<v Speaker 1>replay to and how many pages you have.

00:17:54.740 --> 00:17:57.460
<v Speaker 1>It does pull down the the individual files

00:17:57.460 --> 00:17:58.100
<v Speaker 1>in parallel.

00:17:58.845 --> 00:18:00.445
<v Speaker 1>So it tries to fill up the pipe,

00:18:00.445 --> 00:18:01.804
<v Speaker 1>you know, your your bandwidth,

00:18:02.125 --> 00:18:04.605
<v Speaker 1>getting those down. And then the actual replays

00:18:04.605 --> 00:18:06.285
<v Speaker 1>of the walls is pretty fast depending on

00:18:06.285 --> 00:18:08.285
<v Speaker 1>your disk, but it's it's literally just copying

00:18:08.285 --> 00:18:09.485
<v Speaker 1>four k pages

00:18:09.645 --> 00:18:11.645
<v Speaker 1>from one file to another. So it's nothing

00:18:11.645 --> 00:18:12.605
<v Speaker 1>it's nothing too crazy.

00:18:13.360 --> 00:18:15.679
<v Speaker 0>Nice. And I I like I hadn't really

00:18:15.679 --> 00:18:17.919
<v Speaker 0>thought about the drop table scenario. I mean,

00:18:17.919 --> 00:18:18.960
<v Speaker 0>I think we've all done it at some

00:18:18.960 --> 00:18:20.880
<v Speaker 0>point in our careers, I would imagine. But

00:18:20.880 --> 00:18:22.400
<v Speaker 0>been able to have that point in time

00:18:22.400 --> 00:18:23.999
<v Speaker 0>recovery to revert that

00:18:24.559 --> 00:18:26.640
<v Speaker 0>would be

00:18:25.765 --> 00:18:27.684
<v Speaker 0>very, cool. Almost the same performance. I wish

00:18:27.684 --> 00:18:29.365
<v Speaker 0>wish I'd had that

00:18:29.605 --> 00:18:31.764
<v Speaker 0>at various points in my career. So

00:18:32.325 --> 00:18:33.124
<v Speaker 0>awesome.

00:18:34.245 --> 00:18:34.884
<v Speaker 0>Yeah.

00:18:35.285 --> 00:18:37.445
<v Speaker 0>Alright. Anything else you wanna share on Litestream

00:18:37.445 --> 00:18:39.125
<v Speaker 0>before we get hands on? Did we did

00:18:39.125 --> 00:18:40.645
<v Speaker 0>we touch on all the the major bits

00:18:40.645 --> 00:18:40.885
<v Speaker 0>there?

00:18:42.299 --> 00:18:43.980
<v Speaker 1>I would say that let's see. That's all

00:18:43.980 --> 00:18:45.500
<v Speaker 1>the major bits. One thing I would say

00:18:45.500 --> 00:18:47.580
<v Speaker 1>as far as some kind of some feature

00:18:47.580 --> 00:18:49.499
<v Speaker 1>work that's kind of coming up,

00:18:49.980 --> 00:18:52.299
<v Speaker 1>there's stuff we're looking at around doing live

00:18:52.299 --> 00:18:54.860
<v Speaker 1>replications. You can have multiple read

00:18:55.035 --> 00:18:57.835
<v Speaker 1>read replicas. So if you wanna start growing

00:18:57.835 --> 00:18:59.435
<v Speaker 1>out your kind of a cluster of SQL

00:18:59.435 --> 00:19:00.475
<v Speaker 1>like applications,

00:19:00.875 --> 00:19:02.475
<v Speaker 1>you can have you can scale your reads

00:19:02.475 --> 00:19:04.395
<v Speaker 1>for that. There's, you know, work being done

00:19:04.395 --> 00:19:06.715
<v Speaker 1>around looking at encryption, so you could replicate

00:19:06.715 --> 00:19:07.995
<v Speaker 1>up to an untrusted

00:19:08.155 --> 00:19:10.315
<v Speaker 1>data server, replicate destination,

00:19:10.650 --> 00:19:12.250
<v Speaker 1>things like that. So there's a lot of

00:19:12.250 --> 00:19:13.210
<v Speaker 1>cool stuff coming.

00:19:13.930 --> 00:19:14.650
<v Speaker 0>Awesome.

00:19:15.210 --> 00:19:17.610
<v Speaker 0>Alright. I believe you've got a a Slack

00:19:17.610 --> 00:19:19.130
<v Speaker 0>channel and stuff as well, so we can

00:19:19.130 --> 00:19:20.730
<v Speaker 0>drop links to that in the chat and

00:19:20.730 --> 00:19:22.650
<v Speaker 0>people can Oh, yeah. Get involved as well.

00:19:23.404 --> 00:19:25.725
<v Speaker 0>Let me pull up my my screen share

00:19:25.725 --> 00:19:29.884
<v Speaker 0>just now. So this is the Litestream homepage.

00:19:30.205 --> 00:19:33.325
<v Speaker 0>It is available at litestream.io.

00:19:34.445 --> 00:19:36.524
<v Speaker 0>And today, we're just gonna kinda

00:19:36.845 --> 00:19:38.605
<v Speaker 0>run through the

00:19:38.790 --> 00:19:40.790
<v Speaker 0>getting started guide to give you all of

00:19:40.790 --> 00:19:41.510
<v Speaker 0>idea

00:19:41.670 --> 00:19:43.510
<v Speaker 0>of how you can start using Litestream for

00:19:43.510 --> 00:19:46.150
<v Speaker 0>yourself. If you do have any questions, feel

00:19:46.150 --> 00:19:48.390
<v Speaker 0>free to drop them into the comments and

00:19:48.550 --> 00:19:50.150
<v Speaker 0>we will do our best to get them

00:19:50.150 --> 00:19:50.710
<v Speaker 0>answered.

00:19:52.565 --> 00:19:54.325
<v Speaker 0>Now you've already watched me do this once

00:19:54.325 --> 00:19:55.685
<v Speaker 0>before. You said that was a lot of

00:19:55.685 --> 00:19:56.405
<v Speaker 0>fun. Right?

00:19:58.645 --> 00:20:00.725
<v Speaker 1>You did a great job. I was impressed.

00:20:00.805 --> 00:20:02.565
<v Speaker 1>You got a q three s up.

00:20:02.885 --> 00:20:04.750
<v Speaker 0>Yeah. It was good fun. I really enjoyed

00:20:04.750 --> 00:20:06.510
<v Speaker 0>working on that. Working on that.

00:20:07.310 --> 00:20:09.230
<v Speaker 0>I'm gonna jump ahead first and just get

00:20:09.230 --> 00:20:12.270
<v Speaker 0>a manual running and a Docker container. So

00:20:12.270 --> 00:20:14.750
<v Speaker 0>this is the s g compatibility manual.

00:20:14.830 --> 00:20:16.590
<v Speaker 0>We can just run locally without ever having

00:20:16.590 --> 00:20:19.505
<v Speaker 0>to speak to Amazon s three, which I

00:20:19.505 --> 00:20:21.264
<v Speaker 0>am a Mhmm. Big fan of.

00:20:21.985 --> 00:20:23.184
<v Speaker 0>Really cool software.

00:20:24.065 --> 00:20:25.825
<v Speaker 1>I was used to use the AWS s

00:20:25.825 --> 00:20:27.664
<v Speaker 1>three for the getting started,

00:20:27.825 --> 00:20:29.585
<v Speaker 1>and just it was very confusing to anyone

00:20:29.585 --> 00:20:31.664
<v Speaker 1>that's never set up, you know, IAM accounts

00:20:31.664 --> 00:20:32.224
<v Speaker 1>and

00:20:32.465 --> 00:20:34.629
<v Speaker 1>AWS buckets and all that stuff. So

00:20:34.790 --> 00:20:37.030
<v Speaker 0>It's definitely one of big challenges.

00:20:37.030 --> 00:20:39.030
<v Speaker 0>I mean, I have set up IAM buckets

00:20:39.030 --> 00:20:41.190
<v Speaker 0>and roles and groups and all this before,

00:20:41.190 --> 00:20:43.830
<v Speaker 0>but and it's still complicated.

00:20:44.070 --> 00:20:44.710
<v Speaker 0>Just

00:20:44.950 --> 00:20:47.110
<v Speaker 1>Yeah. Oh, yeah. You do one wrong thing

00:20:47.110 --> 00:20:47.910
<v Speaker 1>and you just

00:20:48.345 --> 00:20:50.184
<v Speaker 0>gotta Yeah. See what happened now. Figure out

00:20:50.184 --> 00:20:51.304
<v Speaker 1>what you did. Super

00:20:51.784 --> 00:20:53.945
<v Speaker 0>painful. Yeah. Yeah. I do not recommend it.

00:20:54.905 --> 00:20:55.544
<v Speaker 0>Oh,

00:20:56.184 --> 00:20:57.945
<v Speaker 0>Was this here last time? I don't remember

00:20:57.945 --> 00:21:00.985
<v Speaker 0>a tap. Oh, yeah. Yep. Go tap on

00:21:00.985 --> 00:21:01.304
<v Speaker 1>there now.

00:21:02.920 --> 00:21:05.880
<v Speaker 0>Fancy. Alright. Let's split this terminal.

00:21:08.680 --> 00:21:11.240
<v Speaker 0>I don't even I'm obviously just gonna be

00:21:11.240 --> 00:21:12.760
<v Speaker 0>learning stuff today. I don't know you could

00:21:12.760 --> 00:21:15.000
<v Speaker 0>do brew install and then the tap and

00:21:15.000 --> 00:21:17.160
<v Speaker 0>then the package name. Does that automatically do

00:21:17.160 --> 00:21:18.120
<v Speaker 0>the brew tap for me?

00:21:19.375 --> 00:21:21.695
<v Speaker 1>Yeah. It automatically hooks it up. I can't

00:21:21.695 --> 00:21:23.615
<v Speaker 1>remember who told me about that, but, yeah,

00:21:23.615 --> 00:21:24.895
<v Speaker 1>I used to have the whole instruction of,

00:21:24.895 --> 00:21:26.095
<v Speaker 1>like, yeah, the tab and you do this

00:21:26.095 --> 00:21:28.575
<v Speaker 1>and update through, but, yeah, it's great. Just

00:21:28.575 --> 00:21:30.095
<v Speaker 1>one line. Awesome.

00:21:31.055 --> 00:21:31.455
<v Speaker 0>Yeah.

00:21:32.040 --> 00:21:33.560
<v Speaker 0>As long as I keep learning stuff with

00:21:33.560 --> 00:21:34.840
<v Speaker 0>this, I'm a happy person.

00:21:35.640 --> 00:21:36.680
<v Speaker 0>Oh,

00:21:37.160 --> 00:21:39.320
<v Speaker 0>where is all? Is this all is this

00:21:39.320 --> 00:21:40.280
<v Speaker 0>compiling

00:21:40.280 --> 00:21:41.720
<v Speaker 0>it from source?

00:21:42.840 --> 00:21:44.360
<v Speaker 0>Or is this just because I break my

00:21:44.360 --> 00:21:45.800
<v Speaker 0>machine last week and it now wants me

00:21:45.800 --> 00:21:47.255
<v Speaker 0>to do loads of silly stuff that I

00:21:47.255 --> 00:21:49.414
<v Speaker 0>haven't done in a while? Let's find out.

00:21:49.575 --> 00:21:51.495
<v Speaker 1>Yeah. It shouldn't be that's weird. It shouldn't

00:21:51.495 --> 00:21:51.974
<v Speaker 1>be

00:21:52.375 --> 00:21:54.455
<v Speaker 1>building anything. It should just be pulling down

00:21:54.455 --> 00:21:55.174
<v Speaker 1>the binary.

00:21:55.414 --> 00:21:57.015
<v Speaker 0>Yeah. Oh, it's just my machine.

00:21:58.740 --> 00:22:00.260
<v Speaker 0>I I said this to you prior, but

00:22:00.260 --> 00:22:00.980
<v Speaker 1>I was Yeah. Share

00:22:02.420 --> 00:22:04.580
<v Speaker 0>my stupidity with the audience. It's that I

00:22:04.580 --> 00:22:06.100
<v Speaker 0>installed the Mac OS 12

00:22:06.420 --> 00:22:09.220
<v Speaker 0>really early developer beta last week and nothing

00:22:09.220 --> 00:22:10.740
<v Speaker 0>on my machine worked and I had to

00:22:10.740 --> 00:22:11.780
<v Speaker 0>revert everything

00:22:12.455 --> 00:22:14.535
<v Speaker 0>back to the start. So, yeah, there's gonna

00:22:14.535 --> 00:22:16.215
<v Speaker 0>be loads of these little things over the

00:22:16.215 --> 00:22:17.654
<v Speaker 0>next couple of weeks, I would imagine. Yeah.

00:22:19.015 --> 00:22:20.295
<v Speaker 0>I guess I could always just grab the

00:22:20.295 --> 00:22:20.774
<v Speaker 0>from

00:22:21.655 --> 00:22:23.335
<v Speaker 0>get With a fast connection at least. That's

00:22:23.335 --> 00:22:23.495
<v Speaker 1>good.

00:22:24.480 --> 00:22:27.280
<v Speaker 0>I do. I got fiber with my ISP

00:22:27.280 --> 00:22:30.080
<v Speaker 0>recently and it's Nice. Pretty solid.

00:22:31.040 --> 00:22:33.119
<v Speaker 0>Yeah. I'll grab the binary just now.

00:22:33.520 --> 00:22:34.320
<v Speaker 1>Yeah. That works.

00:22:41.475 --> 00:22:43.395
<v Speaker 1>Actually, take out the dot io at the

00:22:43.395 --> 00:22:44.515
<v Speaker 1>top. Yep. You're On the

00:22:45.875 --> 00:22:46.595
<v Speaker 1>yeah.

00:22:50.115 --> 00:22:51.315
<v Speaker 1>We got a bunch of different

00:22:51.875 --> 00:22:54.890
<v Speaker 1>support for different operating systems and architectures too.

00:22:54.890 --> 00:22:55.690
<v Speaker 1>So we have

00:22:56.010 --> 00:22:58.250
<v Speaker 0>You feeling brave while I go with alpha?

00:22:58.730 --> 00:23:00.490
<v Speaker 1>No. No. Don't do that.

00:23:02.090 --> 00:23:04.090
<v Speaker 1>Or because some refactoring going on for dot

00:23:04.090 --> 00:23:05.050
<v Speaker 1>four, but

00:23:05.505 --> 00:23:07.185
<v Speaker 1>let's yeah. That's fine. I mean, I'm ready.

00:23:07.185 --> 00:23:07.985
<v Speaker 0>For a lot.

00:23:09.025 --> 00:23:11.265
<v Speaker 1>Yeah. We got, yeah, Mac, Linux. We got

00:23:11.265 --> 00:23:13.265
<v Speaker 1>Windows support on there, OpenBSD.

00:23:13.265 --> 00:23:15.265
<v Speaker 1>We do a bunch of different ARM

00:23:15.585 --> 00:23:17.905
<v Speaker 1>chip versions too. So you can go all

00:23:17.905 --> 00:23:19.105
<v Speaker 1>the way down to

00:23:19.399 --> 00:23:21.480
<v Speaker 1>what do they call it? Raspberry Pi zeros.

00:23:21.480 --> 00:23:23.720
<v Speaker 0>Yeah. Those tiny little $5 ones. You can

00:23:23.720 --> 00:23:25.799
<v Speaker 1>run Litestream on there if you want.

00:23:27.480 --> 00:23:30.120
<v Speaker 0>That's pretty nice. Okay. Let's see. What did

00:23:30.120 --> 00:23:31.719
<v Speaker 0>I grab there? Litestream,

00:23:32.279 --> 00:23:32.919
<v Speaker 0>zip,

00:23:39.555 --> 00:23:41.555
<v Speaker 0>Alright. There we go. I'll just let x

00:23:41.555 --> 00:23:43.235
<v Speaker 0>code do its thing in the background.

00:23:43.875 --> 00:23:44.595
<v Speaker 1>Okay.

00:23:44.835 --> 00:23:46.835
<v Speaker 0>And I'll get the brew tap version another

00:23:46.835 --> 00:23:49.039
<v Speaker 0>day. But it's nice that they exist. I

00:23:49.040 --> 00:23:50.000
<v Speaker 0>don't know if I missed that or I've

00:23:50.000 --> 00:23:51.600
<v Speaker 0>just forgotten that I used that. I'm pretty

00:23:51.600 --> 00:23:53.600
<v Speaker 0>sure I downloaded the binary last thing, but

00:23:53.680 --> 00:23:54.960
<v Speaker 0>brew tap should definitely Yeah. Think it's been

00:23:54.960 --> 00:23:55.919
<v Speaker 1>there for a little while.

00:23:56.320 --> 00:23:58.240
<v Speaker 0>Especially with the Linux support now, which I

00:23:58.240 --> 00:23:59.919
<v Speaker 0>haven't used a great deal

00:24:00.160 --> 00:24:02.000
<v Speaker 0>because I'm an arch user, so I use

00:24:02.000 --> 00:24:04.925
<v Speaker 0>arch for pretty much everything. But for real

00:24:05.005 --> 00:24:06.205
<v Speaker 0>analysis, it's pretty cool.

00:24:07.005 --> 00:24:08.525
<v Speaker 0>Alright. Litestream.

00:24:08.525 --> 00:24:09.645
<v Speaker 0>We've got Menio.

00:24:10.685 --> 00:24:13.005
<v Speaker 0>We've got our credentials without any IAM policies,

00:24:13.005 --> 00:24:15.245
<v Speaker 0>Menio admin and Menio admin. But I think

00:24:15.245 --> 00:24:17.429
<v Speaker 0>we are probably good to get started. Seven

00:24:17.429 --> 00:24:18.789
<v Speaker 0>minutes now. That was a minute a second

00:24:18.789 --> 00:24:19.429
<v Speaker 0>ago.

00:24:19.590 --> 00:24:20.629
<v Speaker 0>Alright. Okay.

00:24:22.309 --> 00:24:22.950
<v Speaker 0>So

00:24:23.110 --> 00:24:25.350
<v Speaker 0>we should be able to browse to menu

00:24:25.350 --> 00:24:26.709
<v Speaker 0>on the web interface.

00:24:27.429 --> 00:24:29.029
<v Speaker 0>I guess I'll just need to create a

00:24:29.029 --> 00:24:29.590
<v Speaker 0>bucket.

00:24:31.225 --> 00:24:32.744
<v Speaker 1>Yep. That's all I gotta do.

00:24:35.385 --> 00:24:36.985
<v Speaker 1>I will say the interface always throws me

00:24:36.985 --> 00:24:38.585
<v Speaker 1>off. I'm always looking everywhere but the lower

00:24:38.585 --> 00:24:39.624
<v Speaker 1>right hand corner.

00:24:40.424 --> 00:24:41.304
<v Speaker 0>Yes.

00:24:41.304 --> 00:24:43.304
<v Speaker 0>It's done that to me a few times.

00:24:43.940 --> 00:24:46.500
<v Speaker 0>Alright. I'll just call this bucket Litestream.

00:24:46.500 --> 00:24:48.100
<v Speaker 0>There we go. We've a bucket. Yeah. We've

00:24:48.100 --> 00:24:50.100
<v Speaker 0>got a comment from Russell in the chat

00:24:50.100 --> 00:24:53.460
<v Speaker 0>saying, kill product database backup save careers.

00:24:54.180 --> 00:24:55.540
<v Speaker 1>That indeed is true.

00:24:57.475 --> 00:24:59.315
<v Speaker 1>Also, hi to Jack Lindsay and some way

00:24:59.315 --> 00:25:00.034
<v Speaker 1>earlier.

00:25:00.674 --> 00:25:02.754
<v Speaker 0>Oh, yeah. We gotta we gotta wait to

00:25:03.955 --> 00:25:06.754
<v Speaker 0>okay. So we've created our bucket and now

00:25:06.754 --> 00:25:09.875
<v Speaker 0>we wanna create a SQL lite database.

00:25:10.960 --> 00:25:12.560
<v Speaker 0>Do you have any tips for the people

00:25:12.560 --> 00:25:14.560
<v Speaker 0>watching on tooling at you guys for working

00:25:14.560 --> 00:25:16.320
<v Speaker 0>with SQLite, or do just keep it pretty

00:25:16.320 --> 00:25:17.920
<v Speaker 0>generic with the CLI?

00:25:19.360 --> 00:25:20.800
<v Speaker 1>You know, I keep it pretty generic. We

00:25:20.800 --> 00:25:22.880
<v Speaker 1>do have, like, a tips and caveat section

00:25:22.880 --> 00:25:25.680
<v Speaker 1>inside of the Litestream website that gives some

00:25:25.680 --> 00:25:26.560
<v Speaker 1>tips for

00:25:27.735 --> 00:25:29.495
<v Speaker 1>just running it with different settings and how

00:25:29.495 --> 00:25:31.095
<v Speaker 1>they can kind of affect and help things

00:25:31.095 --> 00:25:33.735
<v Speaker 1>just from more of an application development standpoint

00:25:33.975 --> 00:25:36.054
<v Speaker 1>more than anything with Litestream.

00:25:37.015 --> 00:25:38.295
<v Speaker 1>But for the most part, it just kinda

00:25:38.295 --> 00:25:39.815
<v Speaker 1>works, especially if you're if you're in wall

00:25:39.815 --> 00:25:40.135
<v Speaker 1>mode.

00:25:41.030 --> 00:25:43.830
<v Speaker 1>That helps a ton. And you could create,

00:25:45.030 --> 00:25:47.429
<v Speaker 1>like, concurrency, like, reconurrency

00:25:47.590 --> 00:25:48.869
<v Speaker 1>with that. So

00:25:49.669 --> 00:25:52.710
<v Speaker 1>I've gotten just crazy performance, honestly, with just

00:25:52.710 --> 00:25:54.710
<v Speaker 1>writing I write everything Go, like web apps

00:25:54.710 --> 00:25:55.764
<v Speaker 1>and everything. Yeah.

00:25:55.925 --> 00:25:58.805
<v Speaker 1>Go web apps with SQLite back end. You

00:25:58.805 --> 00:26:00.565
<v Speaker 1>just you have no latency, like, per query

00:26:00.565 --> 00:26:01.365
<v Speaker 1>latency.

00:26:01.765 --> 00:26:03.365
<v Speaker 1>So I typically you know, I can run

00:26:03.365 --> 00:26:05.685
<v Speaker 1>several queries, render HTML,

00:26:05.685 --> 00:26:07.205
<v Speaker 1>and you get it all back in, you

00:26:07.205 --> 00:26:10.309
<v Speaker 1>know, fifty microseconds. So it's pretty snappy.

00:26:10.870 --> 00:26:12.710
<v Speaker 0>Yeah. I guess because of it's in wall

00:26:12.710 --> 00:26:14.630
<v Speaker 0>mode. Right? Ever does that mean everything runs

00:26:14.630 --> 00:26:16.950
<v Speaker 0>in memory to a certain degree, you're never

00:26:16.950 --> 00:26:19.350
<v Speaker 0>actually really touching the desk until snapshot?

00:26:20.710 --> 00:26:22.470
<v Speaker 1>Well, I mean, naturally get a lot of

00:26:22.470 --> 00:26:24.070
<v Speaker 1>memory stuff anyway. It has a bit of

00:26:24.070 --> 00:26:25.725
<v Speaker 1>a cache inside of SQLite. I think it

00:26:25.725 --> 00:26:27.565
<v Speaker 1>uses a map as well,

00:26:27.885 --> 00:26:29.725
<v Speaker 1>so you kinda get the OS page cache

00:26:29.725 --> 00:26:30.284
<v Speaker 1>as well.

00:26:30.845 --> 00:26:32.845
<v Speaker 1>But the wall stuff is

00:26:33.245 --> 00:26:35.325
<v Speaker 1>it it basically has different versions of your

00:26:35.325 --> 00:26:37.085
<v Speaker 1>data. You know, there's different pages, and I

00:26:37.085 --> 00:26:39.400
<v Speaker 1>have different versions. So, you know, a transaction

00:26:39.400 --> 00:26:40.200
<v Speaker 1>started,

00:26:40.360 --> 00:26:42.440
<v Speaker 1>you know, at first or at one point

00:26:42.440 --> 00:26:43.720
<v Speaker 1>in time has its own view of the

00:26:43.720 --> 00:26:46.360
<v Speaker 1>database, and another one can start later on

00:26:46.360 --> 00:26:48.040
<v Speaker 1>before that other one finishes and get a

00:26:48.040 --> 00:26:50.280
<v Speaker 1>different, you know, snapshot of the database. So

00:26:50.280 --> 00:26:51.320
<v Speaker 1>it really helps with that.

00:26:52.215 --> 00:26:53.014
<v Speaker 0>I

00:26:54.215 --> 00:26:56.295
<v Speaker 0>guess if you also throw some NVMe discs

00:26:56.295 --> 00:26:57.655
<v Speaker 0>on this, it's probably gonna give you a

00:26:57.655 --> 00:27:00.534
<v Speaker 0>nice performance. That can't hurt. Yeah. Yeah.

00:27:01.095 --> 00:27:03.095
<v Speaker 0>Alright. Let's export

00:27:04.135 --> 00:27:04.775
<v Speaker 0>variables.

00:27:07.070 --> 00:27:09.630
<v Speaker 1>Yeah. Also, also just to with the stuff

00:27:09.630 --> 00:27:10.990
<v Speaker 1>you're doing right now Yeah. You know, we're

00:27:10.990 --> 00:27:12.350
<v Speaker 1>just creating a database that has a list

00:27:12.350 --> 00:27:13.309
<v Speaker 1>of fruits in there.

00:27:13.710 --> 00:27:16.350
<v Speaker 1>And we basically wanna replicate this database out

00:27:16.350 --> 00:27:17.950
<v Speaker 1>to Litestream, and you can kinda see

00:27:18.705 --> 00:27:20.865
<v Speaker 1>how quickly it will give you the the

00:27:20.865 --> 00:27:22.945
<v Speaker 1>new version of that just kind of

00:27:23.905 --> 00:27:25.345
<v Speaker 1>in the background. You don't have really even

00:27:25.345 --> 00:27:27.184
<v Speaker 1>have to think about it, and then you

00:27:27.184 --> 00:27:29.184
<v Speaker 1>can kind of restore that easily as well.

00:27:29.585 --> 00:27:31.550
<v Speaker 0>Yeah. So we've just got a simple create

00:27:31.550 --> 00:27:33.390
<v Speaker 0>table and set a couple of through it.

00:27:33.390 --> 00:27:34.590
<v Speaker 0>I don't can I just drop out of

00:27:34.590 --> 00:27:35.950
<v Speaker 0>this now? Yeah. Okay.

00:27:36.510 --> 00:27:38.509
<v Speaker 0>Yeah. So we've got that.

00:27:38.830 --> 00:27:41.309
<v Speaker 1>Alright. Actually And there's a DB.

00:27:42.430 --> 00:27:44.590
<v Speaker 0>You see I I sensed that Yeah. In

00:27:44.590 --> 00:27:44.990
<v Speaker 0>your voice.

00:27:46.465 --> 00:27:48.625
<v Speaker 1>Oh, yeah. Sorry. Yeah. Stay in the the

00:27:48.625 --> 00:27:49.584
<v Speaker 1>database there.

00:27:49.745 --> 00:27:50.464
<v Speaker 1>One thing

00:27:50.865 --> 00:27:52.625
<v Speaker 1>is you can I mean, it should be

00:27:52.625 --> 00:27:53.904
<v Speaker 1>fine, actually, but you're gonna have to have

00:27:53.904 --> 00:27:56.864
<v Speaker 1>multiple windows running to kinda really see it?

00:27:59.264 --> 00:28:00.625
<v Speaker 0>How do I use the database?

00:28:02.270 --> 00:28:04.190
<v Speaker 1>I think

00:28:04.190 --> 00:28:05.549
<v Speaker 1>you you hit

00:28:05.870 --> 00:28:08.109
<v Speaker 1>command d. I think it'll exit you out.

00:28:09.630 --> 00:28:12.270
<v Speaker 0>So can I just select Control? Sorry. Control

00:28:12.270 --> 00:28:14.509
<v Speaker 1>d. Alright. Okay. Yeah. I just Oh, sorry.

00:28:14.990 --> 00:28:16.510
<v Speaker 1>Was sorry. I see what you're saying. There's

00:28:16.510 --> 00:28:19.044
<v Speaker 1>only one database SQLite. Because it's SQLite, and

00:28:19.044 --> 00:28:21.605
<v Speaker 0>it's a fail. I'd alright. Okay. Mhmm. I

00:28:21.605 --> 00:28:23.445
<v Speaker 1>will say one other nice thing about SQLite

00:28:23.445 --> 00:28:24.804
<v Speaker 1>that people don't think about is you can

00:28:24.804 --> 00:28:27.365
<v Speaker 1>get, like, actual tenant isolation.

00:28:27.365 --> 00:28:29.205
<v Speaker 1>Like, you can put a tenant per database

00:28:29.205 --> 00:28:32.080
<v Speaker 1>file, and that works totally fine. So there's

00:28:32.080 --> 00:28:33.120
<v Speaker 1>just there's a lot of cool little things

00:28:33.120 --> 00:28:35.040
<v Speaker 1>you can do that you wouldn't really think

00:28:35.040 --> 00:28:36.480
<v Speaker 1>of naturally, I would say.

00:28:37.360 --> 00:28:38.080
<v Speaker 0>Alright.

00:28:39.040 --> 00:28:41.840
<v Speaker 0>Let's get one more of these running

00:28:41.840 --> 00:28:44.000
<v Speaker 0>and we copy oh, no. I did copy

00:28:44.000 --> 00:28:45.840
<v Speaker 0>something, but I've lost it. Oh, yeah. The

00:28:46.065 --> 00:28:48.544
<v Speaker 0>token. Okay. Alright. Yes. Yeah.

00:28:49.904 --> 00:28:52.625
<v Speaker 0>Okay. So this is our Litestream. Let me

00:28:52.625 --> 00:28:53.825
<v Speaker 0>zoom in on that a bit more. Our

00:28:53.825 --> 00:28:54.945
<v Speaker 0>Litestream command.

00:28:55.504 --> 00:28:57.184
<v Speaker 0>We just call replicating. L.

00:28:59.600 --> 00:29:01.039
<v Speaker 1>You're missing the l at the beginning. There

00:29:01.039 --> 00:29:02.159
<v Speaker 1>you Just wanna make sure you copy the

00:29:02.159 --> 00:29:03.600
<v Speaker 1>whole thing. I I see. I think it's

00:29:03.600 --> 00:29:05.360
<v Speaker 1>little copy all buttons on the docs. It's

00:29:05.360 --> 00:29:06.159
<v Speaker 1>killing me.

00:29:06.480 --> 00:29:08.719
<v Speaker 0>Those really handy. Definitely.

00:29:09.200 --> 00:29:10.880
<v Speaker 0>Yeah. I always say that to everyone I

00:29:10.880 --> 00:29:12.880
<v Speaker 0>have on this show. Every time there's a

00:29:12.645 --> 00:29:14.805
<v Speaker 0>mistake, I guarantee you it is my fault

00:29:14.805 --> 00:29:16.565
<v Speaker 0>for some reason or not.

00:29:17.685 --> 00:29:20.005
<v Speaker 0>Oh, man. See, one of the other things

00:29:20.005 --> 00:29:21.125
<v Speaker 0>that I really do on the show that

00:29:21.125 --> 00:29:22.725
<v Speaker 0>I'm starting to hate myself for is that

00:29:22.725 --> 00:29:25.125
<v Speaker 0>I use temp directories for everything

00:29:25.285 --> 00:29:26.965
<v Speaker 0>and now I'm no longer in a temp

00:29:26.965 --> 00:29:27.445
<v Speaker 0>directory.

00:29:29.690 --> 00:29:32.170
<v Speaker 0>Now I can either download Litestream again or

00:29:32.170 --> 00:29:33.610
<v Speaker 0>if very quickly

00:29:34.730 --> 00:29:35.610
<v Speaker 0>that find it.

00:29:42.855 --> 00:29:44.455
<v Speaker 0>Yeah. This is one of those moments where

00:29:44.455 --> 00:29:46.534
<v Speaker 0>I need to stop using temp directory. Right.

00:29:46.535 --> 00:29:47.174
<v Speaker 0>There

00:29:48.135 --> 00:29:48.855
<v Speaker 0>we go.

00:29:51.015 --> 00:29:52.614
<v Speaker 0>Right. We still got our fruits.

00:29:52.934 --> 00:29:54.360
<v Speaker 0>I should still have my export. I also

00:29:54.920 --> 00:29:57.320
<v Speaker 0>use pair directory history, which I love and

00:29:57.320 --> 00:29:59.160
<v Speaker 0>then hate on the stream as well. So

00:29:59.400 --> 00:30:00.040
<v Speaker 0>Alright.

00:30:00.840 --> 00:30:02.520
<v Speaker 0>I'm just gonna type this from memory because

00:30:02.520 --> 00:30:04.440
<v Speaker 0>it's so intuitive and easy to use. But

00:30:04.440 --> 00:30:05.320
<v Speaker 0>replicate

00:30:05.320 --> 00:30:09.325
<v Speaker 0>through it dot dbs3

00:30:09.325 --> 00:30:10.605
<v Speaker 0>local host

00:30:11.645 --> 00:30:13.404
<v Speaker 0>three So we're actually gonna put

00:30:14.125 --> 00:30:15.485
<v Speaker 1>almost Litestream

00:30:15.485 --> 00:30:16.685
<v Speaker 1>dot local host. So you're gonna put the

00:30:16.685 --> 00:30:19.405
<v Speaker 1>bucket name before local host and dot.

00:30:20.080 --> 00:30:20.960
<v Speaker 0>You sure?

00:30:22.320 --> 00:30:24.400
<v Speaker 1>I don't think so. I could be wrong.

00:30:26.480 --> 00:30:28.240
<v Speaker 0>I think you're wrong. I know you're the

00:30:28.240 --> 00:30:29.680
<v Speaker 0>author of the software, but I'm just gonna

00:30:29.680 --> 00:30:31.200
<v Speaker 0>go out there and and say, I think

00:30:31.200 --> 00:30:31.600
<v Speaker 0>you're wrong.

00:30:33.355 --> 00:30:34.154
<v Speaker 0>Damn it.

00:30:37.195 --> 00:30:38.554
<v Speaker 0>So is that something Yeah. So there's two

00:30:38.554 --> 00:30:40.634
<v Speaker 1>parts. There's the what was that?

00:30:41.595 --> 00:30:44.235
<v Speaker 1>Go ahead. I mean, I've never seen, like,

00:30:44.235 --> 00:30:45.195
<v Speaker 0>wildcard

00:30:45.355 --> 00:30:47.835
<v Speaker 0>DNS aliases in that way for local host.

00:30:47.835 --> 00:30:48.394
<v Speaker 0>Is that a thing?

00:30:50.000 --> 00:30:52.639
<v Speaker 1>Yeah. I mean, we're just using the URL

00:30:52.880 --> 00:30:53.840
<v Speaker 1>kind of to

00:30:54.159 --> 00:30:55.760
<v Speaker 1>pull all the data together, kind of all

00:30:55.760 --> 00:30:58.240
<v Speaker 1>the the connection info together. It's really more

00:30:58.240 --> 00:30:59.760
<v Speaker 1>of a connection string than anything.

00:31:02.215 --> 00:31:04.455
<v Speaker 1>And, typically, it makes probably more sense when

00:31:04.455 --> 00:31:06.135
<v Speaker 1>you have, like, an actual s three bucket

00:31:06.135 --> 00:31:08.534
<v Speaker 1>where the s three buckets are typically referenced

00:31:08.534 --> 00:31:10.375
<v Speaker 1>as s three colon slash slash and then

00:31:10.375 --> 00:31:11.654
<v Speaker 1>just the name of the bucket.

00:31:12.615 --> 00:31:13.654
<v Speaker 1>So

00:31:13.895 --> 00:31:15.654
<v Speaker 1>it's a little bit hacky for Mineo, to

00:31:15.654 --> 00:31:16.054
<v Speaker 1>be honest.

00:31:18.700 --> 00:31:19.500
<v Speaker 0>Well, that

00:31:19.900 --> 00:31:20.779
<v Speaker 0>looks

00:31:21.660 --> 00:31:23.260
<v Speaker 0>successful. Looks yeah.

00:31:24.300 --> 00:31:26.620
<v Speaker 1>So it starts off I'm give you oh,

00:31:26.620 --> 00:31:28.060
<v Speaker 1>go ahead. No. It's okay. Go for it,

00:31:28.060 --> 00:31:28.220
<v Speaker 0>man.

00:31:29.554 --> 00:31:31.235
<v Speaker 1>Yeah. So it starts off to saying it's

00:31:31.235 --> 00:31:32.034
<v Speaker 1>replicating

00:31:32.035 --> 00:31:34.115
<v Speaker 1>and kinda gives you the database or databases

00:31:34.115 --> 00:31:35.315
<v Speaker 1>that you're replicating,

00:31:35.715 --> 00:31:37.554
<v Speaker 1>where they're going to, and then how often

00:31:37.554 --> 00:31:39.395
<v Speaker 1>it's gonna sync. So by default, it syncs

00:31:39.395 --> 00:31:40.355
<v Speaker 1>every one second.

00:31:41.075 --> 00:31:41.634
<v Speaker 1>And

00:31:42.035 --> 00:31:44.195
<v Speaker 1>the whole there's some talk about generation in

00:31:44.195 --> 00:31:46.480
<v Speaker 1>here. A generation is just basically when you

00:31:46.480 --> 00:31:48.000
<v Speaker 1>have a snapshot and then kind of a

00:31:48.000 --> 00:31:48.880
<v Speaker 1>contiguous

00:31:49.280 --> 00:31:52.400
<v Speaker 1>set of of wall pages after that. So

00:31:52.400 --> 00:31:54.640
<v Speaker 1>you can get in a situation where, say,

00:31:54.640 --> 00:31:55.919
<v Speaker 1>you you stop

00:31:56.320 --> 00:31:57.440
<v Speaker 1>your Litestream process,

00:31:57.955 --> 00:32:00.035
<v Speaker 1>your application keeps going and then you start

00:32:00.035 --> 00:32:01.075
<v Speaker 1>it back up again,

00:32:01.315 --> 00:32:03.475
<v Speaker 1>your your other process may have already checkpointed

00:32:03.475 --> 00:32:04.915
<v Speaker 1>that data and kind of gotten rid of

00:32:04.915 --> 00:32:07.395
<v Speaker 1>it and Litestream would have lost its place.

00:32:07.715 --> 00:32:09.955
<v Speaker 1>And Litestream will just detect that automatically, and

00:32:09.955 --> 00:32:11.475
<v Speaker 1>generations are just kind of where it can

00:32:11.475 --> 00:32:13.850
<v Speaker 1>kind of kinda start over. It'll restart re

00:32:13.850 --> 00:32:16.090
<v Speaker 1>snapshot and then just keep replicating from there.

00:32:17.290 --> 00:32:18.170
<v Speaker 0>Very cool.

00:32:18.730 --> 00:32:19.450
<v Speaker 0>So

00:32:20.170 --> 00:32:21.850
<v Speaker 0>let just go back to we've got our

00:32:21.850 --> 00:32:23.850
<v Speaker 0>manual browser open. So I just wanna kinda

00:32:23.850 --> 00:32:24.650
<v Speaker 0>see Mhmm.

00:32:26.434 --> 00:32:27.554
<v Speaker 0>See the thing.

00:32:29.635 --> 00:32:31.795
<v Speaker 0>There's the generations you were kinda talking about.

00:32:31.795 --> 00:32:33.235
<v Speaker 0>And we've got our snapshot. Yeah. We've got

00:32:33.235 --> 00:32:34.434
<v Speaker 0>our right ahead log.

00:32:35.155 --> 00:32:36.115
<v Speaker 1>So Mhmm.

00:32:36.275 --> 00:32:38.115
<v Speaker 0>I mean, we're we're pretty happy that this

00:32:38.115 --> 00:32:40.595
<v Speaker 0>is working. Alright? So Yeah. So far, so

00:32:40.595 --> 00:32:42.900
<v Speaker 1>good. If I insert more groups, we're gonna

00:32:42.900 --> 00:32:44.500
<v Speaker 0>see a bit of activity on the Litestream

00:32:44.500 --> 00:32:47.539
<v Speaker 0>side. Is that pushing more stuff? No.

00:32:48.100 --> 00:32:51.059
<v Speaker 1>It's not it doesn't log excessively. It typically

00:32:51.140 --> 00:32:53.140
<v Speaker 1>logs in kind of major events, you know,

00:32:53.140 --> 00:32:55.245
<v Speaker 1>like snapshots and then errors. Right. So it

00:32:55.245 --> 00:32:57.325
<v Speaker 1>tries to keep the log relatively light. Otherwise,

00:32:57.325 --> 00:33:00.044
<v Speaker 1>you probably get a lot of activity.

00:33:01.085 --> 00:33:03.085
<v Speaker 1>So but and it probably would be worth

00:33:03.085 --> 00:33:05.405
<v Speaker 1>adding an option to make it more verbose.

00:33:06.809 --> 00:33:08.329
<v Speaker 0>Well, I am going to

00:33:09.529 --> 00:33:11.529
<v Speaker 0>oh, my computer is not happy with me

00:33:11.529 --> 00:33:13.370
<v Speaker 0>today at all. There we go. You jumping

00:33:13.370 --> 00:33:13.929
<v Speaker 1>back?

00:33:15.370 --> 00:33:17.690
<v Speaker 0>I should just if I could choose Linux

00:33:17.690 --> 00:33:20.455
<v Speaker 0>for streaming, I totally would. Things just work

00:33:20.455 --> 00:33:21.895
<v Speaker 0>on Linux. So I never thought I'd say

00:33:21.895 --> 00:33:22.935
<v Speaker 0>that. But

00:33:23.335 --> 00:33:25.655
<v Speaker 0>alright. Let's add. Everyone agrees with you on

00:33:25.655 --> 00:33:26.135
<v Speaker 1>that.

00:33:27.255 --> 00:33:28.775
<v Speaker 0>No. Definitely not.

00:33:29.735 --> 00:33:32.135
<v Speaker 0>Peach. What color is a peach? Peach color?

00:33:32.135 --> 00:33:32.695
<v Speaker 0>Yeah.

00:33:33.255 --> 00:33:35.175
<v Speaker 1>Yeah. That sounds good. Like peach peach.

00:33:36.470 --> 00:33:37.430
<v Speaker 0>Okay. So

00:33:37.990 --> 00:33:40.870
<v Speaker 0>what is the the best way,

00:33:41.190 --> 00:33:42.790
<v Speaker 0>you know, for people that are playing with

00:33:42.790 --> 00:33:43.590
<v Speaker 0>livestream?

00:33:43.750 --> 00:33:45.430
<v Speaker 0>You've mentioned that there's not maybe a lot

00:33:45.430 --> 00:33:47.190
<v Speaker 0>of logging coming out here. Like, is there

00:33:47.190 --> 00:33:49.155
<v Speaker 0>any way for them to just check that

00:33:49.155 --> 00:33:51.315
<v Speaker 0>the replication is is happy and working? Or

00:33:51.315 --> 00:33:53.555
<v Speaker 0>if there's no errors, is that thumbs up?

00:33:53.555 --> 00:33:55.235
<v Speaker 0>You're good to go. Go have a beer

00:33:55.235 --> 00:33:57.955
<v Speaker 0>late. Yeah. So generally thumbs up if there's

00:33:57.955 --> 00:33:59.395
<v Speaker 1>nothing going on in there. It's it's kind

00:33:59.395 --> 00:34:01.315
<v Speaker 1>of come like a constant loop that's running.

00:34:01.715 --> 00:34:02.275
<v Speaker 1>That's

00:34:02.590 --> 00:34:04.590
<v Speaker 1>that's checking and kind of uploading stuff. One

00:34:04.590 --> 00:34:06.750
<v Speaker 1>thing you can do, there is a

00:34:07.070 --> 00:34:08.430
<v Speaker 1>some stuff from the

00:34:09.469 --> 00:34:11.469
<v Speaker 1>actually, if you jump in, I guess, another

00:34:11.469 --> 00:34:12.830
<v Speaker 1>window, I if you got room for one

00:34:12.830 --> 00:34:13.390
<v Speaker 1>more.

00:34:14.430 --> 00:34:16.350
<v Speaker 0>Always got room for more terminals.

00:34:16.590 --> 00:34:17.150
<v Speaker 1>There you go.

00:34:18.245 --> 00:34:19.844
<v Speaker 1>And then kinda have to go back at

00:34:19.844 --> 00:34:22.085
<v Speaker 1>the same temp directory that you were before.

00:34:24.725 --> 00:34:25.445
<v Speaker 0>Yep.

00:34:26.804 --> 00:34:27.845
<v Speaker 1>Alright. Cool.

00:34:28.245 --> 00:34:29.685
<v Speaker 1>So, yeah, if you just type Litestream and

00:34:29.685 --> 00:34:31.364
<v Speaker 1>hit enter, it'll show you some commands.

00:34:34.949 --> 00:34:36.630
<v Speaker 1>So, yeah, if you you

00:34:36.949 --> 00:34:38.870
<v Speaker 1>can so yeah. It's a little bit small,

00:34:38.870 --> 00:34:41.270
<v Speaker 1>but so there's kind of three basic commands

00:34:41.270 --> 00:34:43.350
<v Speaker 1>outside of so there's replicate and restore, which

00:34:43.350 --> 00:34:44.469
<v Speaker 1>is where you kind of push out your

00:34:44.469 --> 00:34:46.230
<v Speaker 1>data, and then restore brings it back and

00:34:46.230 --> 00:34:47.190
<v Speaker 1>kinda recreates it.

00:34:47.964 --> 00:34:50.045
<v Speaker 1>The other ones are databases,

00:34:50.045 --> 00:34:51.565
<v Speaker 1>generations, and snapshots.

00:34:52.045 --> 00:34:54.045
<v Speaker 1>Databases will list the databases you have if

00:34:54.045 --> 00:34:55.645
<v Speaker 1>you're using a config file or just kinda

00:34:55.645 --> 00:34:57.405
<v Speaker 1>more the recommended format, you know, just kind

00:34:57.405 --> 00:34:58.685
<v Speaker 1>of playing around with it.

00:34:59.405 --> 00:35:01.005
<v Speaker 1>And then generations

00:35:01.910 --> 00:35:03.990
<v Speaker 1>generation snapshots and wall

00:35:04.390 --> 00:35:06.150
<v Speaker 1>are the other ones that kinda see the

00:35:06.150 --> 00:35:08.790
<v Speaker 1>state of your actual replica information.

00:35:08.790 --> 00:35:10.550
<v Speaker 1>So if you do Litestream

00:35:11.750 --> 00:35:12.870
<v Speaker 1>generations

00:35:13.270 --> 00:35:14.470
<v Speaker 1>and then put in the name of your

00:35:14.470 --> 00:35:16.870
<v Speaker 1>database or just a local path there,

00:35:18.085 --> 00:35:19.365
<v Speaker 1>Yeah. Hit enter.

00:35:20.645 --> 00:35:21.685
<v Speaker 1>Oh, shoot. It's the

00:35:22.405 --> 00:35:24.725
<v Speaker 1>put in the Rawkode URL.

00:35:26.005 --> 00:35:27.205
<v Speaker 1>So the s3colon

00:35:27.205 --> 00:35:27.845
<v Speaker 1>slash slash.

00:35:30.400 --> 00:35:32.880
<v Speaker 1>Alright. Relate stream. And then Litestream. Yeah. Local

00:35:32.880 --> 00:35:34.480
<v Speaker 1>post 9,000.

00:35:35.360 --> 00:35:36.800
<v Speaker 1>And slide. Yep. Like that.

00:35:43.005 --> 00:35:44.605
<v Speaker 1>I don't know why it's taking so long.

00:35:45.404 --> 00:35:47.085
<v Speaker 1>It usually is pretty snappy.

00:35:48.684 --> 00:35:50.445
<v Speaker 1>Oh, that's because you don't have

00:35:51.244 --> 00:35:52.765
<v Speaker 1>credentials in there. That's right.

00:35:54.285 --> 00:35:54.845
<v Speaker 0>There you go.

00:35:56.070 --> 00:35:57.990
<v Speaker 1>There we go. Okay. So that'll show the

00:35:57.990 --> 00:35:59.830
<v Speaker 1>lag on there. So right now, it's two

00:35:59.830 --> 00:36:01.190
<v Speaker 1>minutes and nineteen seconds, which is the last

00:36:01.190 --> 00:36:02.390
<v Speaker 1>time you put that's when you put the

00:36:02.390 --> 00:36:04.790
<v Speaker 1>peach in peach bro in there. But if

00:36:04.790 --> 00:36:06.390
<v Speaker 1>you add another fruit in there and then

00:36:06.390 --> 00:36:07.110
<v Speaker 1>run

00:36:07.270 --> 00:36:09.030
<v Speaker 1>your generations command again,

00:36:09.190 --> 00:36:10.470
<v Speaker 1>then that lag should drop.

00:36:13.565 --> 00:36:15.165
<v Speaker 0>I mean, I'm feeling pressure.

00:36:15.325 --> 00:36:16.045
<v Speaker 0>Pineapple.

00:36:16.125 --> 00:36:16.925
<v Speaker 0>There we go.

00:36:17.724 --> 00:36:18.204
<v Speaker 0>And

00:36:18.845 --> 00:36:20.685
<v Speaker 1>And, actually, if you before you do that,

00:36:20.845 --> 00:36:22.605
<v Speaker 1>if you run it, you can run that

00:36:22.605 --> 00:36:25.050
<v Speaker 1>generations command on a watch if you wanna

00:36:25.050 --> 00:36:25.690
<v Speaker 1>see it

00:36:26.570 --> 00:36:27.770
<v Speaker 1>return immediately.

00:36:28.810 --> 00:36:30.730
<v Speaker 1>And you can even go pretty pretty low.

00:36:30.730 --> 00:36:31.770
<v Speaker 1>Oh, there you go.

00:36:32.730 --> 00:36:33.530
<v Speaker 0>Again.

00:36:33.530 --> 00:36:36.010
<v Speaker 1>Always gonna happen. My fault for not

00:36:37.315 --> 00:36:39.395
<v Speaker 0>For for breaking my computer. I'm gonna I'm

00:36:39.395 --> 00:36:41.235
<v Speaker 0>gonna honestly, I'm gonna That's right. Day for

00:36:41.235 --> 00:36:42.915
<v Speaker 0>the next month. I'm just always gonna think

00:36:42.915 --> 00:36:44.835
<v Speaker 0>that one little thing that never worked.

00:36:46.355 --> 00:36:48.355
<v Speaker 0>Yeah. No. I was happy with pineapple as

00:36:48.355 --> 00:36:49.235
<v Speaker 0>my choice there too.

00:36:52.280 --> 00:36:54.120
<v Speaker 0>What's your thoughts on pineapple on a pizza,

00:36:54.120 --> 00:36:57.720
<v Speaker 0>Ben? People wanna know. I know. That's sacrilege.

00:36:58.040 --> 00:36:59.800
<v Speaker 1>You know, I do cheese pizza. Like, I'm

00:36:59.800 --> 00:37:01.560
<v Speaker 1>vegetarian so I don't do meat, but

00:37:02.280 --> 00:37:03.640
<v Speaker 1>I'm pretty simple, to be honest.

00:37:04.245 --> 00:37:05.285
<v Speaker 0>Alright. Okay.

00:37:06.085 --> 00:37:09.205
<v Speaker 0>Cheese pizza. Alright. So Do you what's that?

00:37:09.205 --> 00:37:11.845
<v Speaker 0>Cheese pizza is oh, cheese. Alright.

00:37:12.805 --> 00:37:13.445
<v Speaker 1>Yeah.

00:37:13.605 --> 00:37:15.845
<v Speaker 1>So if you enter that in there, then

00:37:15.845 --> 00:37:17.045
<v Speaker 1>pretty quickly, it should

00:37:17.740 --> 00:37:19.660
<v Speaker 1>should lag that down. So now it's down

00:37:19.660 --> 00:37:21.420
<v Speaker 1>to, you know, one second, two seconds.

00:37:22.060 --> 00:37:24.140
<v Speaker 1>So that's it's grabbing the kind of the

00:37:24.140 --> 00:37:25.900
<v Speaker 1>last timing or time out of the wall

00:37:25.900 --> 00:37:27.100
<v Speaker 1>file that's up there

00:37:27.420 --> 00:37:28.300
<v Speaker 1>on menu.

00:37:29.260 --> 00:37:30.940
<v Speaker 0>Alright. I'm gonna pick the color first and

00:37:30.940 --> 00:37:32.300
<v Speaker 0>then try to think of it through.

00:37:32.540 --> 00:37:35.315
<v Speaker 1>Okay. Red. Damn it. It's what I do.

00:37:35.474 --> 00:37:36.275
<v Speaker 1>Cherry?

00:37:36.435 --> 00:37:37.875
<v Speaker 0>Cherry. Good catch.

00:37:40.115 --> 00:37:43.315
<v Speaker 1>It's probably fair. It's pretty quick. Like, I

00:37:43.315 --> 00:37:44.835
<v Speaker 0>mean No. Yeah. It's snappy. Yeah.

00:37:45.940 --> 00:37:47.460
<v Speaker 1>It's usually about a one second delay, so

00:37:47.460 --> 00:37:50.100
<v Speaker 1>you'll usually see it sub steps. I'm curious.

00:37:50.100 --> 00:37:51.860
<v Speaker 0>Is is that one second,

00:37:51.940 --> 00:37:52.660
<v Speaker 0>you know

00:37:53.780 --> 00:37:55.780
<v Speaker 0>is is that arbitrary? Is that something that

00:37:55.780 --> 00:37:57.620
<v Speaker 0>you've picked as part of the code? I

00:37:57.620 --> 00:37:59.220
<v Speaker 0>mean, could people get that lower if they

00:37:59.220 --> 00:38:01.905
<v Speaker 0>wanted, or is that just a sensible default?

00:38:01.905 --> 00:38:02.065
<v Speaker 0>Like

00:38:03.425 --> 00:38:05.185
<v Speaker 1>Yeah. There's kind of a trade off

00:38:06.145 --> 00:38:07.025
<v Speaker 1>between

00:38:07.265 --> 00:38:09.185
<v Speaker 1>kind of the time to push out. It's

00:38:09.185 --> 00:38:11.505
<v Speaker 1>not even a really performance issue for Litestream

00:38:11.505 --> 00:38:13.345
<v Speaker 1>because it can usually check pretty quickly about

00:38:13.345 --> 00:38:14.865
<v Speaker 1>the underlying data. You could drop it lower.

00:38:15.830 --> 00:38:18.230
<v Speaker 1>Usually, the issue is that you get charged,

00:38:18.230 --> 00:38:20.710
<v Speaker 1>I think, it's, $5.10

00:38:20.710 --> 00:38:22.950
<v Speaker 1>thousandths of a a cent or something like

00:38:22.950 --> 00:38:24.630
<v Speaker 1>that every time you do a post up

00:38:24.630 --> 00:38:26.950
<v Speaker 1>to s three Mhmm. Which is pretty cheap.

00:38:27.270 --> 00:38:30.385
<v Speaker 1>And if you're running just a constant stream

00:38:30.385 --> 00:38:31.745
<v Speaker 1>of rights to your database,

00:38:31.905 --> 00:38:34.224
<v Speaker 1>then dropping it below one second, you'd start

00:38:34.224 --> 00:38:35.185
<v Speaker 1>getting expensive.

00:38:36.224 --> 00:38:37.744
<v Speaker 1>It used to actually be ten seconds was

00:38:37.744 --> 00:38:39.744
<v Speaker 1>the default, but people usually don't have a

00:38:39.744 --> 00:38:40.545
<v Speaker 1>constant stream of

00:38:41.400 --> 00:38:43.079
<v Speaker 1>of rights to the database. So it seemed

00:38:43.079 --> 00:38:44.920
<v Speaker 1>like a sensible default dropping down to one.

00:38:45.400 --> 00:38:47.400
<v Speaker 0>And is that configurable if I wanted that

00:38:47.400 --> 00:38:49.319
<v Speaker 0>on a minute or even ten minutes or

00:38:49.319 --> 00:38:52.280
<v Speaker 0>whatever? Yeah. Yeah. Yep. That all that totally

00:38:52.280 --> 00:38:53.720
<v Speaker 1>works. Nice.

00:38:54.040 --> 00:38:56.360
<v Speaker 1>And that'll actually kind of stop your

00:38:56.760 --> 00:38:58.495
<v Speaker 1>it'll cut off your wall and kinda restart

00:38:58.495 --> 00:39:00.095
<v Speaker 1>it automatically every minute so you can get

00:39:00.095 --> 00:39:02.255
<v Speaker 1>that. Like, your your point in time

00:39:02.575 --> 00:39:03.535
<v Speaker 1>recovery

00:39:03.615 --> 00:39:05.855
<v Speaker 1>is kinda determined by that kind of how

00:39:05.855 --> 00:39:06.655
<v Speaker 1>often it

00:39:06.895 --> 00:39:08.095
<v Speaker 1>restarts that wall

00:39:08.495 --> 00:39:10.015
<v Speaker 1>just because you can only have a certain

00:39:10.015 --> 00:39:11.135
<v Speaker 1>granularity to

00:39:11.375 --> 00:39:12.095
<v Speaker 1>replay into.

00:39:13.080 --> 00:39:13.720
<v Speaker 0>Okay.

00:39:13.960 --> 00:39:15.720
<v Speaker 0>I also noticed If that makes any sense.

00:39:15.720 --> 00:39:16.120
<v Speaker 1>Yeah.

00:39:16.680 --> 00:39:19.640
<v Speaker 0>I think so. I'm getting curious, like, the

00:39:19.640 --> 00:39:22.280
<v Speaker 0>SQLite commands that I executed were just

00:39:23.480 --> 00:39:25.000
<v Speaker 0>there was nothing that told it to use

00:39:25.000 --> 00:39:26.975
<v Speaker 0>the wall. So is that something you get

00:39:26.975 --> 00:39:28.815
<v Speaker 0>for default? Or because you mentioned I think

00:39:28.815 --> 00:39:30.255
<v Speaker 0>you said at the start, like, it had

00:39:30.255 --> 00:39:31.855
<v Speaker 0>to be enabled that way. Can you maybe

00:39:31.855 --> 00:39:32.815
<v Speaker 0>elaborate on that?

00:39:33.775 --> 00:39:35.535
<v Speaker 1>Sure. Yeah. So, like, stream auto, think we'll

00:39:35.535 --> 00:39:37.295
<v Speaker 1>put it into wall mode if it's not

00:39:37.295 --> 00:39:38.255
<v Speaker 1>in the wall mode,

00:39:38.815 --> 00:39:41.055
<v Speaker 1>which was a decision I was kinda back

00:39:41.055 --> 00:39:41.615
<v Speaker 1>and forth on.

00:39:42.760 --> 00:39:45.080
<v Speaker 1>But, honestly, most like, it's usually the recommended

00:39:45.880 --> 00:39:48.520
<v Speaker 1>mode to run-in with a few exceptions. It's

00:39:48.520 --> 00:39:50.200
<v Speaker 1>usually if you have like, lot of people

00:39:50.200 --> 00:39:52.840
<v Speaker 1>will use lights or SQL lights as kind

00:39:52.840 --> 00:39:54.520
<v Speaker 1>of a file format. So because it stays

00:39:54.520 --> 00:39:56.555
<v Speaker 1>in a single file. If you really want

00:39:56.555 --> 00:39:58.234
<v Speaker 1>it to just be that single file, then

00:39:58.234 --> 00:40:01.275
<v Speaker 1>you can use their other journaling modes. But

00:40:01.275 --> 00:40:02.954
<v Speaker 1>wall will have kind of two separate files

00:40:02.954 --> 00:40:04.875
<v Speaker 1>that'll work with, but it just it provides

00:40:04.875 --> 00:40:06.075
<v Speaker 1>all the concurrency

00:40:06.154 --> 00:40:08.315
<v Speaker 1>support. It's way faster. There's a lot of

00:40:08.315 --> 00:40:09.595
<v Speaker 1>there's a lot of big benefits to it.

00:40:10.240 --> 00:40:12.640
<v Speaker 1>So it just automatically triggers it into wall

00:40:12.640 --> 00:40:15.200
<v Speaker 1>mode. And then that that persists across

00:40:15.600 --> 00:40:16.480
<v Speaker 1>processes.

00:40:16.480 --> 00:40:17.040
<v Speaker 1>Yeah.

00:40:17.360 --> 00:40:18.800
<v Speaker 0>So that means if I have

00:40:19.120 --> 00:40:21.440
<v Speaker 0>you know, an application that's been using SQLite

00:40:21.440 --> 00:40:22.080
<v Speaker 0>for

00:40:22.485 --> 00:40:23.445
<v Speaker 0>for years,

00:40:23.925 --> 00:40:25.605
<v Speaker 0>I don't really need to compare or do

00:40:25.605 --> 00:40:27.445
<v Speaker 0>anything. Like, when Litestream kicks in, it's just

00:40:27.445 --> 00:40:28.725
<v Speaker 0>gonna go, hey. You should be in wall

00:40:28.725 --> 00:40:30.965
<v Speaker 0>mode now, and it does the same thing.

00:40:30.965 --> 00:40:32.805
<v Speaker 1>Yeah. Yeah. And I've actually seen I've seen

00:40:32.805 --> 00:40:34.770
<v Speaker 1>a lot of people actually just put this

00:40:34.770 --> 00:40:35.570
<v Speaker 1>onto

00:40:35.650 --> 00:40:36.770
<v Speaker 1>all kinds of different

00:40:37.010 --> 00:40:39.970
<v Speaker 1>app like, existing applications without that application knowing

00:40:39.970 --> 00:40:42.050
<v Speaker 1>anything about it. So I've seen, like, ghost

00:40:42.050 --> 00:40:42.770
<v Speaker 1>blogs.

00:40:43.090 --> 00:40:44.610
<v Speaker 1>I've seen a bunch of people do that.

00:40:44.850 --> 00:40:46.370
<v Speaker 1>I think I just saw somebody do it

00:40:46.370 --> 00:40:48.450
<v Speaker 1>with WordPress. You know, they can use the

00:40:48.450 --> 00:40:51.464
<v Speaker 1>SQLite version, and it just kicks in. They've

00:40:51.464 --> 00:40:53.065
<v Speaker 1>deployed in, like, a little Docker container and

00:40:53.065 --> 00:40:53.625
<v Speaker 1>everything.

00:40:53.944 --> 00:40:55.785
<v Speaker 1>So it's kinda cool. Some people actually run

00:40:55.785 --> 00:40:57.944
<v Speaker 1>this. Like, I usually recommend running with a

00:40:57.944 --> 00:41:00.184
<v Speaker 1>persistent disk just to get, you know, add

00:41:00.265 --> 00:41:01.785
<v Speaker 1>additional durability

00:41:01.785 --> 00:41:02.345
<v Speaker 1>guarantees.

00:41:03.240 --> 00:41:05.560
<v Speaker 1>But some people run Litestream with no just

00:41:05.560 --> 00:41:08.200
<v Speaker 1>an ephemeral disk, and they just, you know,

00:41:08.200 --> 00:41:10.280
<v Speaker 1>go crazy, and it seems to work. So

00:41:11.320 --> 00:41:12.840
<v Speaker 1>I'm I'm not that brave.

00:41:13.880 --> 00:41:15.995
<v Speaker 0>Yeah. Lots of stuff to experiment with there.

00:41:15.995 --> 00:41:17.595
<v Speaker 0>I've already got a few ideas from my

00:41:17.595 --> 00:41:18.955
<v Speaker 0>head. Like, oh, I could just, a a

00:41:18.955 --> 00:41:20.395
<v Speaker 0>RAM disk and go a bit crazy with

00:41:20.395 --> 00:41:20.875
<v Speaker 0>that. But

00:41:21.835 --> 00:41:23.355
<v Speaker 1>No. Yeah. I mean, you can if you

00:41:23.355 --> 00:41:25.035
<v Speaker 1>want. I mean, again, there's, kind of that

00:41:25.035 --> 00:41:26.315
<v Speaker 1>window data loss

00:41:26.475 --> 00:41:28.155
<v Speaker 1>where if you had a persistent disk,

00:41:28.610 --> 00:41:30.290
<v Speaker 1>it would, you know, be fine. I mean,

00:41:30.290 --> 00:41:32.770
<v Speaker 1>technically, Litestream will flush out changes,

00:41:33.010 --> 00:41:34.530
<v Speaker 1>when it powers down or when it shuts

00:41:34.530 --> 00:41:37.170
<v Speaker 1>down cleanly. Mhmm. So, generally, it should've worked

00:41:37.170 --> 00:41:39.170
<v Speaker 1>actually to run on an ephemeral disk, but

00:41:39.570 --> 00:41:41.010
<v Speaker 1>I'm just super paranoid.

00:41:42.845 --> 00:41:44.925
<v Speaker 0>So we got one more question. We've got

00:41:44.925 --> 00:41:46.204
<v Speaker 0>a question on the chat. We'll tack on

00:41:46.204 --> 00:41:47.885
<v Speaker 0>a second, but something else popped in my

00:41:47.885 --> 00:41:48.845
<v Speaker 0>head and if I don't ask it now,

00:41:48.845 --> 00:41:50.045
<v Speaker 0>I forget. But

00:41:50.365 --> 00:41:52.845
<v Speaker 0>let's say I've got my application, it's using

00:41:52.845 --> 00:41:53.965
<v Speaker 0>SQLite,

00:41:54.045 --> 00:41:56.670
<v Speaker 0>I add Litestream, it does some stuff, I

00:41:56.670 --> 00:41:59.390
<v Speaker 0>shut down Litestream, forget to start it, erase

00:41:59.390 --> 00:42:01.630
<v Speaker 0>some data to my SQLite, and then restart

00:42:01.630 --> 00:42:02.830
<v Speaker 0>Litestream.

00:42:03.470 --> 00:42:05.390
<v Speaker 0>Is Litestream okay with that? Yeah.

00:42:06.670 --> 00:42:08.270
<v Speaker 1>That'll be great. It'll just pick up where

00:42:08.270 --> 00:42:11.309
<v Speaker 1>it it'll send it'll notice that the the

00:42:11.309 --> 00:42:11.950
<v Speaker 1>walls changed,

00:42:12.805 --> 00:42:14.085
<v Speaker 1>you know, especially if it's been running long

00:42:14.085 --> 00:42:15.685
<v Speaker 1>enough and enough rights go through.

00:42:16.565 --> 00:42:18.325
<v Speaker 1>Then it'll sense that, you know, that wall

00:42:18.325 --> 00:42:20.085
<v Speaker 1>is kinda restarted and it needs to start

00:42:20.085 --> 00:42:20.965
<v Speaker 1>a new generation.

00:42:21.365 --> 00:42:23.125
<v Speaker 1>Now it'll just pick that up automatically.

00:42:23.445 --> 00:42:25.365
<v Speaker 1>And it doesn't it cleans out the old

00:42:25.365 --> 00:42:28.200
<v Speaker 1>generations based on retention. So you actually still

00:42:28.200 --> 00:42:29.880
<v Speaker 1>have that old version of your data even

00:42:29.880 --> 00:42:31.800
<v Speaker 1>though there's kind of that went that gap

00:42:31.800 --> 00:42:32.440
<v Speaker 1>of

00:42:33.320 --> 00:42:35.560
<v Speaker 1>time where Litestream wasn't replicating up.

00:42:37.240 --> 00:42:40.200
<v Speaker 0>Nice. I like that a lot. Okay. Let's

00:42:40.200 --> 00:42:41.800
<v Speaker 0>tackle Riel's question then,

00:42:42.485 --> 00:42:44.405
<v Speaker 0>which I promise you I've not paid anyone

00:42:44.405 --> 00:42:46.165
<v Speaker 0>to ask. But Rio is asking, would this

00:42:46.165 --> 00:42:48.485
<v Speaker 0>work for SQL lite in case yes?

00:42:49.285 --> 00:42:51.845
<v Speaker 1>It was a fantastic question. It is a

00:42:51.845 --> 00:42:53.845
<v Speaker 0>fantastic question. Do you wanna tackle that? I'll

00:42:53.845 --> 00:42:55.365
<v Speaker 1>let you answer that one. Alright. Okay. No.

00:42:55.365 --> 00:42:56.565
<v Speaker 1>I think I think you're the expert on

00:42:56.565 --> 00:42:56.965
<v Speaker 1>this

00:42:57.460 --> 00:42:58.740
<v Speaker 0>I actually

00:42:59.060 --> 00:43:00.100
<v Speaker 0>Rio spent

00:43:00.500 --> 00:43:03.060
<v Speaker 0>a good few hours experiment with just that.

00:43:03.060 --> 00:43:04.980
<v Speaker 0>One of my fascinations at the moment is

00:43:04.980 --> 00:43:07.700
<v Speaker 0>cluster API, which uses Kubernetes in a weird

00:43:07.700 --> 00:43:10.340
<v Speaker 0>way, essentially like a database and KCS

00:43:10.340 --> 00:43:11.780
<v Speaker 0>with SQLite and Kane.

00:43:12.765 --> 00:43:13.885
<v Speaker 0>I thought it would be a really cool

00:43:13.885 --> 00:43:15.484
<v Speaker 0>way to hook Litestream up to that replicate

00:43:15.484 --> 00:43:17.565
<v Speaker 0>s three. So hopefully, the exact same use

00:43:17.565 --> 00:43:19.565
<v Speaker 0>case that you're talking about. And the answer

00:43:19.565 --> 00:43:21.885
<v Speaker 0>is yes. It worked perfectly. I didn't even

00:43:21.885 --> 00:43:23.565
<v Speaker 0>need to do anything other than read the

00:43:23.565 --> 00:43:24.365
<v Speaker 0>documentation,

00:43:24.365 --> 00:43:26.920
<v Speaker 0>run Litestream, and it just worked. I have

00:43:26.920 --> 00:43:29.560
<v Speaker 0>had cluster API running for days. I've shut

00:43:29.560 --> 00:43:31.320
<v Speaker 0>down the machines, spun it back up

00:43:32.200 --> 00:43:34.360
<v Speaker 0>and things just worked. So that is a

00:43:34.360 --> 00:43:37.160
<v Speaker 0>100% yes on KTS and Litestream.

00:43:39.555 --> 00:43:42.515
<v Speaker 0>Okay. Let's jump back over to our CLI.

00:43:43.395 --> 00:43:44.915
<v Speaker 0>We don't have too long left, so we'll

00:43:44.915 --> 00:43:46.515
<v Speaker 0>run through just a couple more things, I

00:43:46.515 --> 00:43:47.075
<v Speaker 0>think.

00:43:47.795 --> 00:43:48.435
<v Speaker 1>Sure.

00:43:50.115 --> 00:43:51.234
<v Speaker 1>I I guess you can run through the

00:43:51.234 --> 00:43:53.730
<v Speaker 1>restore. That probably makes sense. Yes.

00:43:53.730 --> 00:43:55.810
<v Speaker 0>Do you wanna cover anything else on these

00:43:56.290 --> 00:43:58.290
<v Speaker 0>subcommands? Because we were Yeah. Sure.

00:43:58.530 --> 00:43:59.250
<v Speaker 1>Sure.

00:43:59.890 --> 00:44:01.490
<v Speaker 1>Yeah. I mean, the snapshots in the wall

00:44:01.490 --> 00:44:03.090
<v Speaker 1>are just gonna list out the snap like,

00:44:03.090 --> 00:44:05.010
<v Speaker 1>the little snapshot up regularly,

00:44:05.410 --> 00:44:07.170
<v Speaker 1>just the full database at a certain point

00:44:07.170 --> 00:44:09.155
<v Speaker 1>in time. And then the wall, you know,

00:44:09.155 --> 00:44:11.475
<v Speaker 1>you can see all the little individual files

00:44:11.475 --> 00:44:13.395
<v Speaker 1>that have been pushed up. But, generally, you

00:44:13.395 --> 00:44:14.675
<v Speaker 1>only need those for

00:44:14.915 --> 00:44:16.995
<v Speaker 1>debugging if you have issues or just kinda

00:44:16.995 --> 00:44:18.355
<v Speaker 1>wanna see some stats. But

00:44:18.835 --> 00:44:20.435
<v Speaker 1>nine times out of 10, you're really looking

00:44:20.435 --> 00:44:21.795
<v Speaker 1>at restore and replicate

00:44:22.390 --> 00:44:24.390
<v Speaker 1>and then running generations if you just wanna

00:44:24.390 --> 00:44:25.830
<v Speaker 1>see the lag of

00:44:26.470 --> 00:44:27.350
<v Speaker 1>replication.

00:44:29.350 --> 00:44:32.790
<v Speaker 0>Okay. So let's do a restore. I'm assuming

00:44:32.790 --> 00:44:34.710
<v Speaker 0>the the getting started guide is probably going

00:44:34.710 --> 00:44:37.585
<v Speaker 0>there anyway. Right? So yeah. Yeah.

00:44:37.745 --> 00:44:38.785
<v Speaker 0>Restore. So

00:44:39.745 --> 00:44:40.945
<v Speaker 0>why don't we

00:44:43.425 --> 00:44:46.145
<v Speaker 0>I can just close Litestream,

00:44:46.145 --> 00:44:48.545
<v Speaker 0>delete the Fritz DB, and then trigger a

00:44:48.545 --> 00:44:49.025
<v Speaker 0>restore.

00:44:50.829 --> 00:44:52.910
<v Speaker 0>Just looking So you have to keep Lightstream

00:44:53.630 --> 00:44:55.550
<v Speaker 1>what's that? Keep keep Lightstream running

00:44:55.869 --> 00:44:56.750
<v Speaker 1>and then

00:44:57.230 --> 00:44:59.630
<v Speaker 1>run the restore on a separate window.

00:45:01.390 --> 00:45:02.109
<v Speaker 1>Is that what you're saying?

00:45:02.875 --> 00:45:04.715
<v Speaker 0>No. I was gonna delete the first dot

00:45:04.715 --> 00:45:06.795
<v Speaker 0>DB and then run our restore to pull

00:45:06.795 --> 00:45:09.195
<v Speaker 0>it back down. Are you suggesting something else?

00:45:09.195 --> 00:45:10.875
<v Speaker 1>I always see what you're saying. I was

00:45:10.875 --> 00:45:13.035
<v Speaker 1>suggesting restoring it to a different location.

00:45:13.035 --> 00:45:13.675
<v Speaker 0>Ah.

00:45:13.835 --> 00:45:14.235
<v Speaker 0>Okay.

00:45:16.050 --> 00:45:17.730
<v Speaker 0>Alright. Let's do it your way.

00:45:18.450 --> 00:45:21.010
<v Speaker 0>So we're gonna do a restore

00:45:21.970 --> 00:45:23.890
<v Speaker 0>oh, yeah. We've got this output flag, so

00:45:23.890 --> 00:45:24.770
<v Speaker 0>we can say,

00:45:24.930 --> 00:45:26.610
<v Speaker 0>fruits two dot d b.

00:45:27.570 --> 00:45:29.730
<v Speaker 0>My very imaginative naming.

00:45:30.050 --> 00:45:31.010
<v Speaker 0>And then

00:45:31.224 --> 00:45:32.185
<v Speaker 0>stream

00:45:34.505 --> 00:45:36.745
<v Speaker 0>local host. I mean,

00:45:38.984 --> 00:45:39.945
<v Speaker 0>this is

00:45:42.025 --> 00:45:44.185
<v Speaker 0>I'm confused. I always we we I need

00:45:44.185 --> 00:45:44.585
<v Speaker 0>to work this.

00:45:46.560 --> 00:45:47.600
<v Speaker 0>Litestream.local

00:45:47.600 --> 00:45:49.040
<v Speaker 0>host. I know I'm coming back to this,

00:45:49.040 --> 00:45:51.040
<v Speaker 0>but it's just it's not sitting right in

00:45:51.040 --> 00:45:51.680
<v Speaker 0>my head.

00:45:52.400 --> 00:45:54.880
<v Speaker 0>Is that something Litestream is doing to work

00:45:54.880 --> 00:45:56.800
<v Speaker 0>out the bucket name or is that actually

00:45:56.800 --> 00:45:59.840
<v Speaker 0>something that is a convention on computers? Because

00:45:59.840 --> 00:46:02.240
<v Speaker 0>I'm a little bit shocked. No. No. It's

00:46:02.375 --> 00:46:04.214
<v Speaker 1>no. It's just it's kind of a hacky

00:46:04.214 --> 00:46:05.175
<v Speaker 1>way of getting

00:46:05.415 --> 00:46:08.214
<v Speaker 1>many o to work on the command line

00:46:08.214 --> 00:46:10.215
<v Speaker 1>or, like, with a single URL.

00:46:10.454 --> 00:46:12.375
<v Speaker 1>So the URL references is kind of just

00:46:12.375 --> 00:46:13.575
<v Speaker 1>a a locator

00:46:13.655 --> 00:46:17.170
<v Speaker 1>for words replicating to. Okay. So it part

00:46:17.250 --> 00:46:19.090
<v Speaker 1>it it notices that there's local host reference

00:46:19.090 --> 00:46:21.330
<v Speaker 1>in there, and then it extracts everything before

00:46:21.330 --> 00:46:22.770
<v Speaker 1>that to get the bucket name.

00:46:23.090 --> 00:46:25.650
<v Speaker 0>Okay. Got it. I could I'm that means

00:46:25.650 --> 00:46:27.090
<v Speaker 0>I'm not gonna lose any sleep tonight now

00:46:27.090 --> 00:46:29.170
<v Speaker 0>because I was definitely worried about losing sleep.

00:46:29.170 --> 00:46:31.885
<v Speaker 1>No. Yeah. Because there's a couple of like,

00:46:31.885 --> 00:46:34.285
<v Speaker 1>other services like I think it's either Digital

00:46:34.285 --> 00:46:35.805
<v Speaker 1>Ocean or Linode or

00:46:36.765 --> 00:46:37.565
<v Speaker 1>Backblaze.

00:46:37.565 --> 00:46:39.885
<v Speaker 1>Like, they use some convention where they use

00:46:41.405 --> 00:46:42.845
<v Speaker 1>sub domains as your bucket.

00:46:43.610 --> 00:46:45.290
<v Speaker 1>So with that kind of stuff, kinda follows

00:46:45.290 --> 00:46:47.050
<v Speaker 1>that same convention, but here, it's really more

00:46:47.050 --> 00:46:48.250
<v Speaker 1>PAC. So

00:46:48.890 --> 00:46:49.530
<v Speaker 1>Okay.

00:46:50.570 --> 00:46:53.370
<v Speaker 0>So we can wrap Actually Sorry. I need

00:46:53.370 --> 00:46:55.370
<v Speaker 0>to go. Before you before you run that,

00:46:55.370 --> 00:46:56.650
<v Speaker 1>I would add a dash v

00:46:56.905 --> 00:46:58.025
<v Speaker 1>at the beginning.

00:47:02.905 --> 00:47:04.665
<v Speaker 1>Yeah. Just you can get a little more

00:47:04.665 --> 00:47:05.385
<v Speaker 1>information.

00:47:06.025 --> 00:47:08.105
<v Speaker 1>Just it's just for robust logging. So let's

00:47:08.105 --> 00:47:09.065
<v Speaker 1>see what's going on.

00:47:11.465 --> 00:47:12.745
<v Speaker 1>Yeah. So

00:47:13.440 --> 00:47:14.880
<v Speaker 1>runs pretty fast,

00:47:15.760 --> 00:47:17.920
<v Speaker 1>but, yeah, basically, it pulls a snapshot down

00:47:17.920 --> 00:47:19.920
<v Speaker 1>and puts it in, like, a temp location

00:47:19.920 --> 00:47:21.359
<v Speaker 1>next to the file where it's gonna go

00:47:21.359 --> 00:47:21.840
<v Speaker 1>to.

00:47:22.160 --> 00:47:23.520
<v Speaker 1>It'll download

00:47:24.080 --> 00:47:25.920
<v Speaker 1>the wall files in parallel and then apply

00:47:25.920 --> 00:47:27.359
<v Speaker 1>them in order as they come through.

00:47:28.275 --> 00:47:30.434
<v Speaker 1>And then finally, once everything's applied and the

00:47:30.434 --> 00:47:32.115
<v Speaker 1>database is in the state it's supposed to

00:47:32.115 --> 00:47:34.275
<v Speaker 1>be in, then is when it finally renames

00:47:34.275 --> 00:47:35.635
<v Speaker 1>it to the final destination

00:47:35.875 --> 00:47:37.474
<v Speaker 1>so you don't get it's

00:47:37.474 --> 00:47:39.234
<v Speaker 1>kinda like an atomic restore. So you're never

00:47:39.234 --> 00:47:40.914
<v Speaker 1>gonna get, like, a partially restored database

00:47:41.540 --> 00:47:43.300
<v Speaker 1>and your in the location you wanna go

00:47:43.300 --> 00:47:45.540
<v Speaker 1>to or the the destination path.

00:47:45.940 --> 00:47:47.380
<v Speaker 1>So that's what it's doing there.

00:47:48.580 --> 00:47:50.580
<v Speaker 0>Okay. So we should now have

00:47:51.780 --> 00:47:53.700
<v Speaker 0>first d b two. Yeah. Yeah. First two.

00:47:54.255 --> 00:47:55.775
<v Speaker 1>Yeah. So you can see the light into

00:47:55.775 --> 00:47:56.494
<v Speaker 1>that now.

00:47:58.575 --> 00:47:59.935
<v Speaker 1>Should be all there.

00:48:01.454 --> 00:48:04.174
<v Speaker 0>And there it is. Yeah. Cherry Road. There

00:48:04.174 --> 00:48:06.494
<v Speaker 1>you go. Software just shouldn't be this easy

00:48:06.494 --> 00:48:07.055
<v Speaker 0>to use.

00:48:09.130 --> 00:48:11.050
<v Speaker 1>I honestly, like, a big

00:48:11.290 --> 00:48:12.810
<v Speaker 1>like, I really try to focus on just

00:48:12.810 --> 00:48:15.770
<v Speaker 1>narrowing the the feature set to just, like,

00:48:15.770 --> 00:48:18.730
<v Speaker 1>the simplest. Like, if there's anything moderately complex,

00:48:19.130 --> 00:48:20.650
<v Speaker 1>I'd I'd just wait to try to implement

00:48:20.650 --> 00:48:21.770
<v Speaker 1>that until I can find a simple way

00:48:21.770 --> 00:48:22.730
<v Speaker 1>to do it. But

00:48:23.865 --> 00:48:24.985
<v Speaker 1>I don't want people to have to read

00:48:24.985 --> 00:48:26.745
<v Speaker 1>their, like, pages and pages of docs and,

00:48:26.745 --> 00:48:29.625
<v Speaker 1>like, figure out weird concepts or debug things.

00:48:29.625 --> 00:48:31.945
<v Speaker 1>It's mainly because I don't wanna debug issues.

00:48:33.305 --> 00:48:35.225
<v Speaker 1>But, really, it's just, you know essentially, it's

00:48:35.225 --> 00:48:37.145
<v Speaker 1>just a snapshot and there's a series of

00:48:38.079 --> 00:48:40.400
<v Speaker 1>wallpages that it's saving.

00:48:40.400 --> 00:48:42.400
<v Speaker 1>So right. If you think about it logically

00:48:42.400 --> 00:48:44.079
<v Speaker 1>like that, it's a lot easier to think

00:48:44.079 --> 00:48:44.560
<v Speaker 1>about.

00:48:45.200 --> 00:48:45.760
<v Speaker 0>Awesome.

00:48:46.960 --> 00:48:49.120
<v Speaker 0>No. I think that's that's pretty sweet. Like,

00:48:49.200 --> 00:48:51.040
<v Speaker 0>hopefully, you know, the peoples that are watching,

00:48:51.040 --> 00:48:52.800
<v Speaker 0>you can see just how easy it is

00:48:52.800 --> 00:48:55.065
<v Speaker 0>to to connect Litestream to SQLite.

00:48:55.065 --> 00:48:56.745
<v Speaker 0>The backup process,

00:48:57.385 --> 00:48:59.625
<v Speaker 0>because less than a few minutes, the restore

00:48:59.625 --> 00:49:01.385
<v Speaker 0>process was even faster.

00:49:01.785 --> 00:49:03.145
<v Speaker 0>And then I guess at that point, you

00:49:03.145 --> 00:49:04.185
<v Speaker 0>know, as long as you've got an s

00:49:04.185 --> 00:49:06.585
<v Speaker 0>three compatible storage that, you know, you trust,

00:49:06.585 --> 00:49:09.359
<v Speaker 0>like s three, GCS, something like that. Got

00:49:09.359 --> 00:49:13.759
<v Speaker 0>pretty sweet SQLite production resilient database setup. What

00:49:13.759 --> 00:49:15.040
<v Speaker 0>more can people ask for?

00:49:16.640 --> 00:49:18.320
<v Speaker 1>Exactly. That's what I'm always saying.

00:49:19.839 --> 00:49:21.359
<v Speaker 1>Alright. Yeah. No. I think it's a I

00:49:21.359 --> 00:49:23.519
<v Speaker 1>think it's a honestly, a great way, you

00:49:23.519 --> 00:49:24.400
<v Speaker 1>know, people can

00:49:24.720 --> 00:49:26.215
<v Speaker 1>I think I think SQLite is really a

00:49:26.215 --> 00:49:28.295
<v Speaker 1>great database? Like, I think people should definitely

00:49:28.295 --> 00:49:29.895
<v Speaker 1>consider production use cases.

00:49:30.135 --> 00:49:31.095
<v Speaker 1>And I think the way that I think

00:49:31.095 --> 00:49:32.135
<v Speaker 1>about it personally

00:49:32.295 --> 00:49:35.335
<v Speaker 1>isn't, like, should I use SQLite,

00:49:35.335 --> 00:49:36.375
<v Speaker 1>but more like,

00:49:36.615 --> 00:49:38.790
<v Speaker 1>should I use I kinda default with SQLite

00:49:38.790 --> 00:49:40.790
<v Speaker 1>as kind of the the database I wanna

00:49:40.790 --> 00:49:43.110
<v Speaker 1>use. It's just a lot easier to develop

00:49:43.110 --> 00:49:44.230
<v Speaker 1>with and test with.

00:49:45.030 --> 00:49:46.790
<v Speaker 1>And then I kind of if there's a

00:49:46.790 --> 00:49:49.190
<v Speaker 1>reason to use something different like Postgres, then

00:49:49.190 --> 00:49:51.435
<v Speaker 1>I'll I'll use that, but I kinda default

00:49:51.435 --> 00:49:52.635
<v Speaker 1>with SQLite personally.

00:49:53.675 --> 00:49:55.755
<v Speaker 0>Yeah. I I definitely something that's a lot

00:49:55.755 --> 00:49:57.675
<v Speaker 0>more appealing to me these days. You know,

00:49:57.675 --> 00:50:00.155
<v Speaker 0>I'm quite deep into the cloud native Kubernetes

00:50:00.155 --> 00:50:03.250
<v Speaker 0>ecosystem now and storage is still the the

00:50:03.250 --> 00:50:05.330
<v Speaker 0>biggest pain point there because

00:50:05.650 --> 00:50:08.130
<v Speaker 0>you're having to either learn new database technologies

00:50:08.130 --> 00:50:10.530
<v Speaker 0>that are built to be replicated by default

00:50:10.530 --> 00:50:12.850
<v Speaker 0>or, you know, you're trying to shoehorn this

00:50:12.850 --> 00:50:15.490
<v Speaker 0>kind of behavior and or really get that

00:50:15.490 --> 00:50:17.810
<v Speaker 0>tight feedback loop with backup and restore and

00:50:17.810 --> 00:50:20.025
<v Speaker 0>minimize that, you know, you talked about it,

00:50:20.025 --> 00:50:22.265
<v Speaker 0>the checkpoint snapshot in time, but minimize that

00:50:22.265 --> 00:50:24.745
<v Speaker 0>window of where really bad things can happen.

00:50:25.065 --> 00:50:26.825
<v Speaker 0>And SQLite's a really nice way where I

00:50:26.825 --> 00:50:29.225
<v Speaker 0>can just have a fail on a disk,

00:50:29.305 --> 00:50:31.464
<v Speaker 0>use Litestream as a sidecar container, have it

00:50:31.464 --> 00:50:33.385
<v Speaker 0>replicate and backing up to

00:50:33.680 --> 00:50:35.120
<v Speaker 0>somewhere that I trust and I don't have

00:50:35.120 --> 00:50:37.200
<v Speaker 0>to manage. I'm happy to pay whoever

00:50:37.200 --> 00:50:38.880
<v Speaker 0>sends it as per meg for that or

00:50:38.880 --> 00:50:39.520
<v Speaker 0>gig.

00:50:39.920 --> 00:50:41.520
<v Speaker 0>Yeah. It's just really And

00:50:41.920 --> 00:50:44.320
<v Speaker 0>then you talked about future stuff and you're

00:50:44.320 --> 00:50:45.600
<v Speaker 0>like, oh, well, you should be able to

00:50:45.600 --> 00:50:47.085
<v Speaker 0>have live

00:50:48.125 --> 00:50:50.445
<v Speaker 0>read only replicas of this data as well.

00:50:50.445 --> 00:50:52.525
<v Speaker 0>So not only if I got my application

00:50:52.525 --> 00:50:55.565
<v Speaker 0>run-in with SQLite, but I've got scalable copy

00:50:55.565 --> 00:50:57.165
<v Speaker 0>of it to a certain degree with the

00:50:57.165 --> 00:50:58.205
<v Speaker 0>read replicas.

00:50:59.085 --> 00:51:01.085
<v Speaker 0>Yeah. Yeah. And also on the, you know,

00:51:01.085 --> 00:51:03.540
<v Speaker 1>the replication side. Oh, sorry. On the replication

00:51:03.540 --> 00:51:05.380
<v Speaker 1>side, it's like it's not even just necessarily

00:51:05.380 --> 00:51:07.540
<v Speaker 1>have a ton of rights, but I don't

00:51:07.540 --> 00:51:08.980
<v Speaker 1>if you ever look at, like, JAMstack where

00:51:08.980 --> 00:51:11.060
<v Speaker 1>people will generate out all their pages instead

00:51:11.060 --> 00:51:12.900
<v Speaker 1>of content and put them on CDNs.

00:51:13.300 --> 00:51:15.060
<v Speaker 1>So you get super low latency at the

00:51:15.060 --> 00:51:16.820
<v Speaker 1>edge, but it really works well as, an

00:51:16.820 --> 00:51:19.165
<v Speaker 1>edge database if you wanna a server, you

00:51:19.165 --> 00:51:21.085
<v Speaker 1>know, The US, but you also have another

00:51:21.085 --> 00:51:23.885
<v Speaker 1>another replica in Europe and Asia, wherever you

00:51:23.885 --> 00:51:26.125
<v Speaker 1>want, where those you know, those people are

00:51:26.125 --> 00:51:28.685
<v Speaker 1>getting those super low latency queries as well.

00:51:29.325 --> 00:51:31.085
<v Speaker 0>I just have an idea, and you're gonna

00:51:31.085 --> 00:51:32.605
<v Speaker 0>hate it or maybe love it. I'm not

00:51:32.605 --> 00:51:33.085
<v Speaker 0>sure now.

00:51:33.570 --> 00:51:35.730
<v Speaker 0>But can Litestream compel to WASM?

00:51:38.370 --> 00:51:41.410
<v Speaker 1>I haven't tried it yet, but maybe. I'm

00:51:41.410 --> 00:51:43.010
<v Speaker 1>not sure what the SQL support is

00:51:43.330 --> 00:51:45.970
<v Speaker 1>and go for WASM, but we brought the

00:51:45.970 --> 00:51:48.455
<v Speaker 1>shot probably. Might be able swap out the

00:51:48.455 --> 00:51:50.215
<v Speaker 1>SQL lite or implementation

00:51:50.215 --> 00:51:52.775
<v Speaker 1>for, SQL JS or something. Yeah. I wonder

00:51:52.775 --> 00:51:54.695
<v Speaker 0>if you could compare this to WASM, have

00:51:54.695 --> 00:51:57.735
<v Speaker 0>a web interface for modifying static data that

00:51:57.735 --> 00:51:59.975
<v Speaker 0>actually replicates that in the browser to an

00:51:59.975 --> 00:52:01.815
<v Speaker 0>s s three compatible store. I think that

00:52:01.815 --> 00:52:02.615
<v Speaker 0>would be really nice.

00:52:04.820 --> 00:52:05.460
<v Speaker 1>Why?

00:52:05.620 --> 00:52:06.900
<v Speaker 1>Well, why not? Yeah.

00:52:08.180 --> 00:52:08.740
<v Speaker 1>Exactly.

00:52:09.700 --> 00:52:11.860
<v Speaker 0>Okay. We got a couple more comments from

00:52:11.860 --> 00:52:13.140
<v Speaker 0>Rio there. So

00:52:13.460 --> 00:52:15.220
<v Speaker 0>that was exactly my use case I was

00:52:15.220 --> 00:52:17.405
<v Speaker 0>thinking of. Hopefully, you mean cluster API. If

00:52:17.405 --> 00:52:19.725
<v Speaker 0>so, that's really cool. I'll share links to

00:52:19.725 --> 00:52:21.725
<v Speaker 0>the videos where I actually got that working.

00:52:22.445 --> 00:52:23.005
<v Speaker 0>And

00:52:23.565 --> 00:52:25.645
<v Speaker 0>another one about the local hosting.

00:52:25.885 --> 00:52:28.925
<v Speaker 0>Currently startup local host does work on Linux,

00:52:28.925 --> 00:52:30.765
<v Speaker 0>at least, they say on Fedora.

00:52:31.539 --> 00:52:33.220
<v Speaker 0>I could add an entries to host file

00:52:33.220 --> 00:52:35.619
<v Speaker 0>for no reason then for years. So I'm

00:52:35.619 --> 00:52:37.780
<v Speaker 0>I'm gonna be playing with that later.

00:52:38.819 --> 00:52:39.540
<v Speaker 0>Right.

00:52:39.859 --> 00:52:41.619
<v Speaker 0>And is there anything

00:52:41.619 --> 00:52:44.420
<v Speaker 0>that we didn't cover from a documentation that

00:52:44.420 --> 00:52:46.740
<v Speaker 0>you wanna run through before we we we

00:52:46.740 --> 00:52:47.915
<v Speaker 0>wrap up today?

00:52:49.035 --> 00:52:50.155
<v Speaker 1>No. I don't think so. The only thing

00:52:50.155 --> 00:52:51.355
<v Speaker 1>I would say is, yeah, we have a

00:52:51.355 --> 00:52:52.875
<v Speaker 1>a pretty active Slack community.

00:52:53.355 --> 00:52:55.515
<v Speaker 1>If everybody has questions and needs help getting

00:52:55.515 --> 00:52:57.195
<v Speaker 1>up and running, drop on there, and we're

00:52:57.195 --> 00:52:57.995
<v Speaker 1>happy to help.

00:52:58.555 --> 00:53:00.555
<v Speaker 1>Obviously, you know, GitHub if you wanna post

00:53:00.555 --> 00:53:00.955
<v Speaker 1>issues.

00:53:01.760 --> 00:53:03.760
<v Speaker 1>And then I do office hours every Friday

00:53:03.760 --> 00:53:05.440
<v Speaker 1>too. So if anybody ever wants to chat

00:53:05.440 --> 00:53:08.560
<v Speaker 1>live, I'm happy to chat. So just hit

00:53:08.560 --> 00:53:09.599
<v Speaker 1>me up. You can find the link on

00:53:09.599 --> 00:53:10.720
<v Speaker 1>the website as well.

00:53:11.200 --> 00:53:13.280
<v Speaker 0>Alright. And I'm ben b johnson on Twitter,

00:53:13.280 --> 00:53:15.575
<v Speaker 1>so you can usually find me there too.

00:53:16.135 --> 00:53:17.175
<v Speaker 0>Yes.

00:53:17.175 --> 00:53:19.815
<v Speaker 0>There is the Slack link here. Get involved

00:53:19.815 --> 00:53:21.815
<v Speaker 0>with this big button here too. Yeah. Go

00:53:21.815 --> 00:53:23.175
<v Speaker 0>do that. I have the office hours. I

00:53:23.175 --> 00:53:24.535
<v Speaker 1>know. I took out the the yeah. Anyway,

00:53:24.535 --> 00:53:25.974
<v Speaker 1>well, just hit me up. I'll we got

00:53:25.974 --> 00:53:26.454
<v Speaker 1>office hours.

00:53:27.140 --> 00:53:28.820
<v Speaker 0>We'll join the Slack, and Ben will share

00:53:28.820 --> 00:53:30.100
<v Speaker 0>the office hours link with you as well.

00:53:30.100 --> 00:53:32.100
<v Speaker 1>I'm sure. There you go. There you go.

00:53:32.100 --> 00:53:33.060
<v Speaker 0>Definitely.

00:53:33.060 --> 00:53:35.780
<v Speaker 0>Your Twitter handle is on the screen. Definitely

00:53:35.780 --> 00:53:37.540
<v Speaker 0>fun to follow you and see all the

00:53:37.540 --> 00:53:39.620
<v Speaker 0>weird, silly things you're doing with database.

00:53:40.100 --> 00:53:42.100
<v Speaker 0>I used to say silly. It's now it's

00:53:42.100 --> 00:53:44.474
<v Speaker 0>borderline genius, think, to a certain degree. Like

00:53:44.555 --> 00:53:44.955
<v Speaker 0>so

00:53:45.355 --> 00:53:47.195
<v Speaker 0>Thank you. It's a fine line, I think.

00:53:48.234 --> 00:53:50.075
<v Speaker 0>Alright. Well, thank you very much for working

00:53:50.075 --> 00:53:52.714
<v Speaker 0>on Litestream. I'm already seeing so many different

00:53:52.714 --> 00:53:55.194
<v Speaker 0>applications for cluster APIs. The the one I'm

00:53:55.194 --> 00:53:56.795
<v Speaker 0>really focused on right now, but I

00:53:57.275 --> 00:53:58.740
<v Speaker 0>maybe I'll get some time to stream some

00:53:58.740 --> 00:53:59.940
<v Speaker 0>Wasm stuff with it and see if we

00:53:59.940 --> 00:54:02.260
<v Speaker 0>can do something stupid there too. But thank

00:54:02.260 --> 00:54:04.500
<v Speaker 0>you so much for for joining me today,

00:54:04.500 --> 00:54:06.660
<v Speaker 0>getting us through this and sharing your experience.

00:54:06.900 --> 00:54:08.740
<v Speaker 0>Any last words? Yeah. Thanks for having me

00:54:08.740 --> 00:54:10.340
<v Speaker 1>on. No. Thanks for having me on. It's

00:54:10.340 --> 00:54:12.165
<v Speaker 1>been great. I'm glad everything that seemed to

00:54:12.165 --> 00:54:13.605
<v Speaker 1>just work, so that's awesome.

00:54:14.085 --> 00:54:14.965
<v Speaker 1>And, yeah,

00:54:15.685 --> 00:54:18.165
<v Speaker 1>happy to chat. Thanks. Awesome. Well, have a

00:54:18.165 --> 00:54:20.005
<v Speaker 0>great day. I'll speak to you again soon,

00:54:20.005 --> 00:54:21.605
<v Speaker 0>and thanks for watching everyone. Cool. Bye. Have

00:54:21.605 --> 00:54:22.005
<v Speaker 1>a good one.
