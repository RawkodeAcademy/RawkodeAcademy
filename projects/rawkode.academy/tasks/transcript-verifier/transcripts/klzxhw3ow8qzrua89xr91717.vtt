WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: ea6233f2-7c40-4150-af47-89b29dfd2167
Created: 2025-04-29T12:25:57.226Z
Duration: 1193.0826
Channels: 1

00:00:00.560 --> 00:00:02.560
<v Speaker 0>If you follow me in Twitter,

00:00:03.040 --> 00:00:04.799
<v Speaker 0>you no doubt will have seen that I

00:00:04.799 --> 00:00:08.080
<v Speaker 0>have some pretty spicy takes on infrastructure as

00:00:08.080 --> 00:00:08.799
<v Speaker 0>code.

00:00:09.679 --> 00:00:11.840
<v Speaker 0>And you know what? I feel like I

00:00:11.840 --> 00:00:12.559
<v Speaker 0>am allowed.

00:00:13.595 --> 00:00:16.075
<v Speaker 0>I've been doing infrastructure as code with pretty

00:00:16.075 --> 00:00:19.595
<v Speaker 0>much every tool there is since around 2015.

00:00:20.715 --> 00:00:23.595
<v Speaker 0>I even spent twelve months working

00:00:23.835 --> 00:00:25.114
<v Speaker 0>at Pulumi,

00:00:25.595 --> 00:00:28.314
<v Speaker 0>one of the many infrastructure code tools there

00:00:28.314 --> 00:00:28.555
<v Speaker 0>are.

00:00:30.120 --> 00:00:33.239
<v Speaker 0>And my specialty take is that while all

00:00:33.239 --> 00:00:34.200
<v Speaker 0>these tools

00:00:34.600 --> 00:00:36.600
<v Speaker 0>have gotten us so far,

00:00:37.480 --> 00:00:39.640
<v Speaker 0>they're not what we need to take the

00:00:39.640 --> 00:00:40.440
<v Speaker 0>next step.

00:00:41.315 --> 00:00:44.914
<v Speaker 0>And the problem is the TerraForm resource model.

00:00:46.594 --> 00:00:49.875
<v Speaker 0>It relies on individually managing resources

00:00:49.875 --> 00:00:52.434
<v Speaker 0>and polling to check for drift.

00:00:53.910 --> 00:00:56.230
<v Speaker 0>The Terraform resource model has

00:00:56.390 --> 00:00:58.230
<v Speaker 0>no understanding

00:00:58.230 --> 00:01:00.390
<v Speaker 0>of real time or event.

00:01:01.350 --> 00:01:03.510
<v Speaker 0>So what if that were to change?

00:01:04.950 --> 00:01:06.390
<v Speaker 0>We're gonna take a look at what the

00:01:06.390 --> 00:01:07.910
<v Speaker 0>future of IAC

00:01:07.910 --> 00:01:10.325
<v Speaker 0>could look like if we built a real

00:01:10.325 --> 00:01:14.805
<v Speaker 0>time event driven system to manage individual resources,

00:01:14.965 --> 00:01:17.045
<v Speaker 0>and not even just individual resources,

00:01:17.284 --> 00:01:20.085
<v Speaker 0>but build in the ability for actor based

00:01:20.085 --> 00:01:23.045
<v Speaker 0>resources where resources communicate with one another.

00:01:23.590 --> 00:01:25.350
<v Speaker 0>Now we can't dive into all of this

00:01:25.350 --> 00:01:27.670
<v Speaker 0>today because it just doesn't exist.

00:01:28.070 --> 00:01:30.390
<v Speaker 0>But I set a challenge for the team

00:01:30.390 --> 00:01:31.590
<v Speaker 0>at Guidepad.

00:01:32.310 --> 00:01:34.790
<v Speaker 0>Can you take us one step closer to

00:01:34.790 --> 00:01:36.150
<v Speaker 0>where we need to be?

00:01:37.604 --> 00:01:38.725
<v Speaker 0>Let's take a look.

00:01:39.205 --> 00:01:42.244
<v Speaker 0>So let's focus on the problem statement first.

00:01:42.565 --> 00:01:45.685
<v Speaker 0>Why is the Terraform resource model broken?

00:01:46.325 --> 00:01:48.565
<v Speaker 0>Well, maybe broken is a strong word, but

00:01:48.565 --> 00:01:49.604
<v Speaker 0>that set the scene.

00:01:50.720 --> 00:01:52.720
<v Speaker 0>You write enough HCL

00:01:53.119 --> 00:01:56.000
<v Speaker 0>to have Terraform create an s three bucket

00:01:56.000 --> 00:01:59.119
<v Speaker 0>with an ACL and access control list

00:01:59.439 --> 00:02:02.560
<v Speaker 0>that dictates whether it's public or private and

00:02:02.560 --> 00:02:03.119
<v Speaker 0>so forth.

00:02:05.155 --> 00:02:07.395
<v Speaker 0>You run Terraform plan and it tells you

00:02:07.395 --> 00:02:09.235
<v Speaker 0>that it wants to create a bucket and

00:02:09.235 --> 00:02:10.595
<v Speaker 0>set the ACL.

00:02:11.635 --> 00:02:13.315
<v Speaker 0>You do a Terraform apply

00:02:13.395 --> 00:02:14.835
<v Speaker 0>and the job is done.

00:02:15.795 --> 00:02:17.475
<v Speaker 0>Now, unfortunately,

00:02:17.795 --> 00:02:19.475
<v Speaker 0>that's not really enough.

00:02:20.530 --> 00:02:23.090
<v Speaker 0>There are still ways for people to modify

00:02:23.090 --> 00:02:25.170
<v Speaker 0>and tweak that resource,

00:02:25.170 --> 00:02:25.970
<v Speaker 0>notably,

00:02:26.130 --> 00:02:27.650
<v Speaker 0>the AWS portal.

00:02:27.890 --> 00:02:30.850
<v Speaker 0>And while I'm using AWS for the example,

00:02:31.410 --> 00:02:33.010
<v Speaker 0>this is not unique to them and is

00:02:33.010 --> 00:02:35.330
<v Speaker 0>a case for all cloud providers.

00:02:38.085 --> 00:02:41.365
<v Speaker 0>The challenge is someone can go into

00:02:41.365 --> 00:02:44.005
<v Speaker 0>the admin interface, the portal, whatever you wanna

00:02:44.005 --> 00:02:45.285
<v Speaker 0>call it, the console,

00:02:45.525 --> 00:02:48.565
<v Speaker 0>and start to make changes through the UI.

00:02:48.565 --> 00:02:51.829
<v Speaker 0>We sometimes call this click ops because you'd

00:02:51.829 --> 00:02:53.510
<v Speaker 0>make changes with a click.

00:02:54.790 --> 00:02:57.269
<v Speaker 0>The way that Terraform or any other infrastructure's

00:02:57.269 --> 00:02:59.510
<v Speaker 0>code tool will detect this change is to

00:02:59.510 --> 00:03:02.950
<v Speaker 0>then rerun a Terraform plan or apply to

00:03:02.950 --> 00:03:06.145
<v Speaker 0>detect that the desired state is different from

00:03:06.145 --> 00:03:07.665
<v Speaker 0>the current state.

00:03:08.545 --> 00:03:10.465
<v Speaker 0>This gives us a plan that may have

00:03:10.465 --> 00:03:13.585
<v Speaker 0>to recreate a bucket if it's been deleted

00:03:13.905 --> 00:03:15.745
<v Speaker 0>or fix the ACL.

00:03:16.530 --> 00:03:18.610
<v Speaker 0>And this is just a trivial case.

00:03:18.770 --> 00:03:20.930
<v Speaker 0>And even with this trivial case, there are

00:03:20.930 --> 00:03:22.290
<v Speaker 0>some huge problems.

00:03:22.530 --> 00:03:24.850
<v Speaker 0>What if the future of IAC can account

00:03:24.850 --> 00:03:26.530
<v Speaker 0>for all of these

00:03:26.930 --> 00:03:28.770
<v Speaker 0>external influences

00:03:29.235 --> 00:03:30.595
<v Speaker 0>on our resource.

00:03:31.395 --> 00:03:32.915
<v Speaker 0>Now how would that work?

00:03:33.555 --> 00:03:36.355
<v Speaker 0>Well, fortunately, with pretty much every cloud provider,

00:03:36.355 --> 00:03:38.515
<v Speaker 0>we have access to some sort of audit

00:03:38.515 --> 00:03:40.595
<v Speaker 0>log, which is a real time or near

00:03:40.595 --> 00:03:43.240
<v Speaker 0>real time depending on your cloud, set of

00:03:43.240 --> 00:03:43.880
<v Speaker 0>events

00:03:44.360 --> 00:03:46.760
<v Speaker 0>that tell us everything that happened within our

00:03:46.760 --> 00:03:47.560
<v Speaker 0>accounts.

00:03:48.520 --> 00:03:51.800
<v Speaker 0>So whatever IAC tool could detect a deleted

00:03:51.800 --> 00:03:53.880
<v Speaker 0>bucket or a change in ACL

00:03:54.360 --> 00:03:56.360
<v Speaker 0>and trigger the reconciliation

00:03:56.360 --> 00:03:56.920
<v Speaker 0>for us.

00:03:58.705 --> 00:04:00.465
<v Speaker 0>And that's what we're gonna try to demonstrate

00:04:00.465 --> 00:04:01.265
<v Speaker 0>today.

00:04:01.745 --> 00:04:03.505
<v Speaker 0>And not just that, I'm gonna show you

00:04:03.505 --> 00:04:05.985
<v Speaker 0>how to use Guidepad just to execute Terraform

00:04:05.985 --> 00:04:08.625
<v Speaker 0>on Guidepad because, well, why the hell not?

00:04:08.785 --> 00:04:11.025
<v Speaker 0>But Guidepad gives us the primitives to take

00:04:11.025 --> 00:04:13.580
<v Speaker 0>things up one step closer to where we

00:04:13.580 --> 00:04:15.500
<v Speaker 0>need to be. I hope you understand the

00:04:15.500 --> 00:04:17.420
<v Speaker 0>problem. I hope you're excited to see a

00:04:17.420 --> 00:04:18.460
<v Speaker 0>potential solution.

00:04:18.860 --> 00:04:20.940
<v Speaker 0>Let's have some fun. So let's do a

00:04:20.940 --> 00:04:23.740
<v Speaker 0>very quick recap about what Guidepad is and

00:04:23.740 --> 00:04:24.380
<v Speaker 0>how it works.

00:04:25.645 --> 00:04:26.525
<v Speaker 0>Guidepad

00:04:26.525 --> 00:04:29.724
<v Speaker 0>is a meta platform that helps you build

00:04:29.724 --> 00:04:30.685
<v Speaker 0>applications.

00:04:31.245 --> 00:04:32.604
<v Speaker 0>It's data driven,

00:04:32.685 --> 00:04:34.604
<v Speaker 0>meaning that you provide your data,

00:04:35.485 --> 00:04:36.604
<v Speaker 0>your values

00:04:37.164 --> 00:04:39.405
<v Speaker 0>using the Guidepad type system

00:04:39.990 --> 00:04:41.670
<v Speaker 0>in a declarative fashion,

00:04:41.910 --> 00:04:43.910
<v Speaker 0>and it makes magic happen.

00:04:46.390 --> 00:04:49.270
<v Speaker 0>Now what's actually happening under the hood is

00:04:49.270 --> 00:04:51.190
<v Speaker 0>that we could request for a service to

00:04:51.190 --> 00:04:51.670
<v Speaker 0>be running.

00:04:52.474 --> 00:04:53.275
<v Speaker 0>Guidepad

00:04:53.275 --> 00:04:56.074
<v Speaker 0>is composed of multiple environments which have control

00:04:56.074 --> 00:04:56.875
<v Speaker 0>planes,

00:04:56.875 --> 00:04:57.675
<v Speaker 0>classes.

00:04:57.754 --> 00:04:59.355
<v Speaker 0>We'll get into this in a second,

00:04:59.995 --> 00:05:01.035
<v Speaker 0>which will then

00:05:01.514 --> 00:05:04.555
<v Speaker 0>orchestrate and manage those services within those those

00:05:04.555 --> 00:05:06.875
<v Speaker 0>environments to have access to secrets,

00:05:07.500 --> 00:05:08.780
<v Speaker 0>load balancers,

00:05:09.819 --> 00:05:10.860
<v Speaker 0>ingress,

00:05:10.860 --> 00:05:12.460
<v Speaker 0>and all the bits that you need for

00:05:12.460 --> 00:05:15.020
<v Speaker 0>an application to be deployed to production.

00:05:16.300 --> 00:05:18.940
<v Speaker 0>If we run Guidepad entity list environments,

00:05:23.335 --> 00:05:24.294
<v Speaker 0>like so,

00:05:24.694 --> 00:05:27.335
<v Speaker 0>you will see that I have two environments

00:05:27.335 --> 00:05:29.895
<v Speaker 0>available on my Guidepad instance.

00:05:30.534 --> 00:05:32.775
<v Speaker 0>These are two environments I can use to

00:05:32.775 --> 00:05:34.055
<v Speaker 0>run Guidepad services.

00:05:34.879 --> 00:05:36.879
<v Speaker 0>Now you may have seen I deleted an

00:05:36.879 --> 00:05:39.280
<v Speaker 0>attribute where we were requesting the control plane

00:05:39.280 --> 00:05:40.080
<v Speaker 0>class.

00:05:40.240 --> 00:05:41.599
<v Speaker 0>And I just want to show this in

00:05:41.599 --> 00:05:44.000
<v Speaker 0>its full value so we can see what's

00:05:44.000 --> 00:05:46.639
<v Speaker 0>happening. But our AWS environment

00:05:47.615 --> 00:05:51.455
<v Speaker 0>is configured to specifically run Python code

00:05:52.175 --> 00:05:53.775
<v Speaker 0>as we can see by the control plane

00:05:53.775 --> 00:05:54.495
<v Speaker 0>class.

00:05:54.975 --> 00:05:57.695
<v Speaker 0>Now this control plane class could be Rust,

00:05:57.935 --> 00:05:58.655
<v Speaker 0>Go,

00:05:59.295 --> 00:06:00.095
<v Speaker 0>Kubernetes,

00:06:00.650 --> 00:06:01.530
<v Speaker 0>Ansible,

00:06:01.689 --> 00:06:02.729
<v Speaker 0>and so forth.

00:06:04.169 --> 00:06:07.129
<v Speaker 0>Guidepad already supports a bunch of different types

00:06:07.129 --> 00:06:09.050
<v Speaker 0>of environments off the bat that you can

00:06:09.050 --> 00:06:09.530
<v Speaker 0>use.

00:06:10.009 --> 00:06:12.490
<v Speaker 0>And, of course, based on today's video, one

00:06:12.490 --> 00:06:13.930
<v Speaker 0>of them is Terraform.

00:06:14.945 --> 00:06:16.945
<v Speaker 0>So what do these control plane classes look

00:06:16.945 --> 00:06:17.505
<v Speaker 0>like?

00:06:18.225 --> 00:06:20.305
<v Speaker 0>Let's go into the Guidepad source code

00:06:20.625 --> 00:06:22.385
<v Speaker 0>where we can open Guidepad,

00:06:22.545 --> 00:06:23.425
<v Speaker 0>environment,

00:06:24.865 --> 00:06:25.985
<v Speaker 0>and control planes.

00:06:26.849 --> 00:06:28.610
<v Speaker 0>If we pop open Terraform,

00:06:29.729 --> 00:06:31.169
<v Speaker 0>we will see the code.

00:06:32.129 --> 00:06:34.449
<v Speaker 0>Now all this does is give Guidepad enough

00:06:34.449 --> 00:06:37.250
<v Speaker 0>information to tell it how to execute Terraform

00:06:37.250 --> 00:06:38.130
<v Speaker 0>programs.

00:06:38.930 --> 00:06:40.689
<v Speaker 0>It knows it needs to do a Terraform

00:06:40.689 --> 00:06:41.250
<v Speaker 0>edit

00:06:41.604 --> 00:06:43.685
<v Speaker 0>followed by a Terraform apply.

00:06:43.925 --> 00:06:46.164
<v Speaker 0>Now because we're running this in an automated

00:06:46.164 --> 00:06:48.164
<v Speaker 0>fashion, of course, we need to auto approve

00:06:48.164 --> 00:06:49.844
<v Speaker 0>and there's not much point in running a

00:06:49.844 --> 00:06:50.405
<v Speaker 0>plan.

00:06:50.805 --> 00:06:52.805
<v Speaker 0>However, that doesn't mean you couldn't have a

00:06:52.805 --> 00:06:55.525
<v Speaker 0>bespoke control plane that executes the plan and

00:06:55.525 --> 00:06:56.965
<v Speaker 0>publishes it to a Slack channel,

00:06:57.740 --> 00:06:59.820
<v Speaker 0>where it then waits for another event before

00:06:59.820 --> 00:07:01.180
<v Speaker 0>executing the apply.

00:07:01.419 --> 00:07:03.740
<v Speaker 0>With Guidepad, anything is possible.

00:07:04.620 --> 00:07:07.900
<v Speaker 0>What's also very cool is that Guidepad handles

00:07:07.900 --> 00:07:11.635
<v Speaker 0>state management for you. It stores the outputted

00:07:11.635 --> 00:07:15.875
<v Speaker 0>state files as artifacts within the Guidepad system,

00:07:16.115 --> 00:07:17.795
<v Speaker 0>meaning you don't need to worry about where

00:07:17.795 --> 00:07:19.875
<v Speaker 0>to put it and so forth.

00:07:20.355 --> 00:07:23.395
<v Speaker 0>With this control plane, we could, in theory,

00:07:23.635 --> 00:07:24.835
<v Speaker 0>create a new service,

00:07:26.090 --> 00:07:27.530
<v Speaker 0>deploy it to Guidepad,

00:07:27.610 --> 00:07:29.210
<v Speaker 0>and all we'd have to do is provide

00:07:29.210 --> 00:07:30.410
<v Speaker 0>the HCL.

00:07:31.129 --> 00:07:33.449
<v Speaker 0>It would run Terraform on a loop based

00:07:33.449 --> 00:07:35.130
<v Speaker 0>on an interval that we configure,

00:07:35.849 --> 00:07:37.370
<v Speaker 0>and that would be job done.

00:07:38.569 --> 00:07:40.090
<v Speaker 0>But, of course, you can do that with

00:07:40.090 --> 00:07:41.370
<v Speaker 0>your CICD systems,

00:07:42.065 --> 00:07:43.825
<v Speaker 0>with a cron job interval,

00:07:44.625 --> 00:07:46.065
<v Speaker 0>and there wouldn't really be a lot of

00:07:46.065 --> 00:07:48.705
<v Speaker 0>value proposition other than a managed state file

00:07:48.705 --> 00:07:51.425
<v Speaker 0>and secrets being in a consolidated place. So,

00:07:51.425 --> 00:07:53.425
<v Speaker 0>yeah, there are some benefits. However,

00:07:53.665 --> 00:07:55.905
<v Speaker 0>we want to talk about the future of

00:07:55.905 --> 00:07:59.000
<v Speaker 0>infrastructure as code, And that means real time

00:07:59.000 --> 00:08:00.360
<v Speaker 0>and event driven.

00:08:00.760 --> 00:08:02.920
<v Speaker 0>So we're not gonna use the Terraform control

00:08:02.920 --> 00:08:04.600
<v Speaker 0>plane, although it exists.

00:08:05.640 --> 00:08:08.040
<v Speaker 0>We're going to try something different.

00:08:08.440 --> 00:08:10.040
<v Speaker 0>And as I said, I gave this challenge

00:08:10.040 --> 00:08:11.240
<v Speaker 0>to the Guidepad team.

00:08:12.665 --> 00:08:14.825
<v Speaker 0>And I wanna just highlight that when I

00:08:14.825 --> 00:08:16.825
<v Speaker 0>gave this to them, they came back to

00:08:16.825 --> 00:08:18.025
<v Speaker 0>me with a solution

00:08:18.425 --> 00:08:19.705
<v Speaker 0>and not months,

00:08:19.945 --> 00:08:20.665
<v Speaker 0>weeks,

00:08:21.625 --> 00:08:22.585
<v Speaker 0>but days.

00:08:22.745 --> 00:08:24.425
<v Speaker 0>Two days to be exact.

00:08:25.450 --> 00:08:27.290
<v Speaker 0>And we'll take a look at the code.

00:08:27.850 --> 00:08:29.290
<v Speaker 0>It's probably less

00:08:29.450 --> 00:08:31.690
<v Speaker 0>than 200 lines of Python.

00:08:32.809 --> 00:08:34.650
<v Speaker 0>Let's take a look. So let's take a

00:08:34.650 --> 00:08:36.250
<v Speaker 0>look at our service.

00:08:37.130 --> 00:08:39.850
<v Speaker 0>It is called s three provider, and it

00:08:39.850 --> 00:08:41.505
<v Speaker 0>is 105

00:08:41.505 --> 00:08:42.544
<v Speaker 0>lines long.

00:08:43.505 --> 00:08:45.105
<v Speaker 0>Now there's a lot of things that were

00:08:45.105 --> 00:08:47.505
<v Speaker 0>implemented here that were done just to keep

00:08:47.505 --> 00:08:50.865
<v Speaker 0>things simple and quick, like embedding Python code

00:08:50.865 --> 00:08:51.745
<v Speaker 0>into

00:08:51.904 --> 00:08:52.545
<v Speaker 0>a variable.

00:08:53.420 --> 00:08:55.980
<v Speaker 0>We could fetch us another way by using

00:08:55.980 --> 00:08:58.699
<v Speaker 0>a git repository that we pull in, loading

00:08:58.699 --> 00:09:01.660
<v Speaker 0>local files or remote files and so forth.

00:09:01.660 --> 00:09:02.300
<v Speaker 0>However,

00:09:02.860 --> 00:09:03.820
<v Speaker 0>for today,

00:09:04.060 --> 00:09:06.300
<v Speaker 0>we have a very simple Python program

00:09:06.875 --> 00:09:09.435
<v Speaker 0>This is the boto package to speak to

00:09:09.435 --> 00:09:11.115
<v Speaker 0>the AWS API.

00:09:12.154 --> 00:09:14.395
<v Speaker 0>The bucket name is just going to be

00:09:14.395 --> 00:09:16.555
<v Speaker 0>the name of the service. If we want

00:09:16.555 --> 00:09:19.115
<v Speaker 0>to manage more than one bucket, we deploy

00:09:19.115 --> 00:09:20.235
<v Speaker 0>more than one service.

00:09:21.160 --> 00:09:22.920
<v Speaker 0>We could take this a step further and

00:09:22.920 --> 00:09:25.720
<v Speaker 0>actually define a bucket type within Guidepad, and

00:09:25.720 --> 00:09:27.560
<v Speaker 0>then we're just creating a type that service

00:09:27.560 --> 00:09:28.840
<v Speaker 0>manages the resources.

00:09:29.640 --> 00:09:32.600
<v Speaker 0>But for today's demo, let's keep things simple.

00:09:34.135 --> 00:09:36.855
<v Speaker 0>This fetches our s three credentials from the

00:09:36.855 --> 00:09:37.575
<v Speaker 0>environment

00:09:38.615 --> 00:09:40.935
<v Speaker 0>and then does a list buckets.

00:09:42.295 --> 00:09:44.695
<v Speaker 0>If it doesn't find a bucket, it creates

00:09:44.695 --> 00:09:47.015
<v Speaker 0>a web or configured ACL.

00:09:48.149 --> 00:09:50.070
<v Speaker 0>And if it does find the bucket, it

00:09:50.070 --> 00:09:52.709
<v Speaker 0>just makes sure that the ACL is correct.

00:09:53.990 --> 00:09:55.670
<v Speaker 0>Now there's a few things I wanna point

00:09:55.670 --> 00:09:57.829
<v Speaker 0>out here because I'm sure you're staring at

00:09:57.829 --> 00:09:59.910
<v Speaker 0>this and yelling going, why are we doing

00:09:59.910 --> 00:10:00.630
<v Speaker 0>it this way?

00:10:01.915 --> 00:10:02.635
<v Speaker 0>Yes.

00:10:03.275 --> 00:10:04.635
<v Speaker 0>We are writing

00:10:04.715 --> 00:10:05.595
<v Speaker 0>handcrafted

00:10:05.595 --> 00:10:06.715
<v Speaker 0>Python code

00:10:06.875 --> 00:10:09.755
<v Speaker 0>to handle resource creation on a cloud provider.

00:10:10.795 --> 00:10:13.275
<v Speaker 0>But let me reiterate that the Terraform resource

00:10:13.275 --> 00:10:14.155
<v Speaker 0>model is broken.

00:10:15.000 --> 00:10:17.080
<v Speaker 0>It only understands CRUD,

00:10:17.240 --> 00:10:20.200
<v Speaker 0>create, read, update, and delete.

00:10:20.760 --> 00:10:23.560
<v Speaker 0>It understands that you can update some resources,

00:10:23.720 --> 00:10:25.560
<v Speaker 0>but there are times where it'll have to

00:10:25.560 --> 00:10:27.160
<v Speaker 0>do a delete and a recreate.

00:10:28.125 --> 00:10:30.765
<v Speaker 0>With the Python approach, we can build in

00:10:30.765 --> 00:10:32.605
<v Speaker 0>much more smarts.

00:10:33.325 --> 00:10:34.845
<v Speaker 0>At the start of this video, I talked

00:10:34.845 --> 00:10:36.605
<v Speaker 0>about renaming a bucket. And I'm sure a

00:10:36.605 --> 00:10:38.605
<v Speaker 0>few of you realized that, well, in most

00:10:38.605 --> 00:10:41.085
<v Speaker 0>cloud providers, you can't rename the buckets.

00:10:41.870 --> 00:10:43.950
<v Speaker 0>You have to actually create a new one

00:10:43.950 --> 00:10:46.029
<v Speaker 0>and copy over all the files and then

00:10:46.029 --> 00:10:47.470
<v Speaker 0>delete the old one.

00:10:48.270 --> 00:10:50.910
<v Speaker 0>And Terraform would delete the bucket. However, it

00:10:50.910 --> 00:10:52.670
<v Speaker 0>wouldn't copy over all your files.

00:10:53.645 --> 00:10:55.645
<v Speaker 0>With this approach, we could bake that in.

00:10:56.045 --> 00:10:57.965
<v Speaker 0>We could create a new bucket,

00:10:58.125 --> 00:10:59.805
<v Speaker 0>copy all the files, and delete the old

00:10:59.805 --> 00:11:02.285
<v Speaker 0>because we're right in the code. We get

00:11:02.285 --> 00:11:04.445
<v Speaker 0>to decide how this works.

00:11:05.690 --> 00:11:07.050
<v Speaker 0>For an undeploy,

00:11:08.330 --> 00:11:11.290
<v Speaker 0>all we're doing is deleting all the objects

00:11:11.290 --> 00:11:12.410
<v Speaker 0>and our bucket.

00:11:13.370 --> 00:11:16.010
<v Speaker 0>Again, for this, we could decide that we

00:11:16.010 --> 00:11:17.610
<v Speaker 0>want to keep it back up. Now, of

00:11:17.610 --> 00:11:19.690
<v Speaker 0>course, there are life cycle policies that we

00:11:19.690 --> 00:11:22.845
<v Speaker 0>could apply across AWS and other cloud providers.

00:11:23.165 --> 00:11:25.165
<v Speaker 0>But again, we're trying to keep things relatively

00:11:25.165 --> 00:11:27.565
<v Speaker 0>simple for today. The goal here is not

00:11:27.565 --> 00:11:29.485
<v Speaker 0>to show you a future complete solution,

00:11:30.045 --> 00:11:31.565
<v Speaker 0>but give you an idea of how you

00:11:31.565 --> 00:11:34.500
<v Speaker 0>could build up using Guidepad primitives, a future

00:11:34.500 --> 00:11:35.860
<v Speaker 0>facing infrastructure

00:11:35.860 --> 00:11:37.140
<v Speaker 0>as code tool.

00:11:37.940 --> 00:11:39.140
<v Speaker 0>So stay with me.

00:11:39.700 --> 00:11:42.900
<v Speaker 0>Now, we're using a state machine as part

00:11:42.900 --> 00:11:44.020
<v Speaker 0>of this service

00:11:44.180 --> 00:11:45.300
<v Speaker 0>to understand

00:11:46.100 --> 00:11:47.860
<v Speaker 0>what phases we go through.

00:11:49.345 --> 00:11:51.345
<v Speaker 0>Now we keep things simple in this demo

00:11:51.345 --> 00:11:53.105
<v Speaker 0>where we go from deployed state to deployed

00:11:53.105 --> 00:11:55.665
<v Speaker 0>state, just always running a Terraform apply.

00:11:55.824 --> 00:11:58.464
<v Speaker 0>But this could be elaborated on. And in

00:11:58.464 --> 00:12:00.225
<v Speaker 0>fact, I think I may spend a little

00:12:00.225 --> 00:12:02.490
<v Speaker 0>bit more time on a future video building

00:12:02.490 --> 00:12:04.570
<v Speaker 0>something a bit more feature complete.

00:12:05.210 --> 00:12:07.370
<v Speaker 0>But all we're doing is telling it to

00:12:07.370 --> 00:12:08.970
<v Speaker 0>run the deploy commands

00:12:09.610 --> 00:12:12.330
<v Speaker 0>for deploy and the undeploys for the not

00:12:12.330 --> 00:12:13.290
<v Speaker 0>deploy plan.

00:12:13.690 --> 00:12:14.090
<v Speaker 0>Simple.

00:12:15.205 --> 00:12:17.605
<v Speaker 0>We then configure the state plan with the

00:12:17.605 --> 00:12:18.965
<v Speaker 0>two different phases,

00:12:18.965 --> 00:12:20.645
<v Speaker 0>deployed and not deployed.

00:12:21.445 --> 00:12:22.565
<v Speaker 0>And job done.

00:12:24.085 --> 00:12:24.725
<v Speaker 0>So

00:12:25.445 --> 00:12:26.805
<v Speaker 0>let's deploy this

00:12:27.125 --> 00:12:28.325
<v Speaker 0>and then see what happens.

00:12:31.280 --> 00:12:33.520
<v Speaker 0>So the first thing we're going to do

00:12:33.920 --> 00:12:35.360
<v Speaker 0>is run AWS

00:12:35.680 --> 00:12:36.960
<v Speaker 0>s three API

00:12:37.360 --> 00:12:38.240
<v Speaker 0>get

00:12:39.440 --> 00:12:42.400
<v Speaker 0>ACL for our existing bucket.

00:12:45.165 --> 00:12:45.805
<v Speaker 0>Well,

00:12:46.605 --> 00:12:48.605
<v Speaker 0>we have a bucket. Now what?

00:12:48.925 --> 00:12:51.805
<v Speaker 0>Well, let's run our Guidepad service

00:12:52.524 --> 00:12:53.404
<v Speaker 0>like so.

00:12:55.885 --> 00:12:57.725
<v Speaker 0>We can then come down here

00:12:58.490 --> 00:13:00.250
<v Speaker 0>and using the AWS

00:13:00.250 --> 00:13:01.450
<v Speaker 0>SD API

00:13:01.529 --> 00:13:03.529
<v Speaker 0>on the command line, we're just going to

00:13:03.529 --> 00:13:04.330
<v Speaker 0>delete

00:13:05.050 --> 00:13:06.090
<v Speaker 0>our bucket,

00:13:08.810 --> 00:13:09.290
<v Speaker 0>like so.

00:13:11.195 --> 00:13:12.955
<v Speaker 0>And what's going to happen is our service

00:13:12.955 --> 00:13:15.035
<v Speaker 0>is going to start, realize the bucket doesn't

00:13:15.035 --> 00:13:16.475
<v Speaker 0>exist and create it.

00:13:16.715 --> 00:13:18.315
<v Speaker 0>We'll then delete it again.

00:13:18.715 --> 00:13:21.115
<v Speaker 0>This time where it's going to detect the

00:13:21.115 --> 00:13:22.315
<v Speaker 0>CloudTrail event

00:13:22.715 --> 00:13:24.075
<v Speaker 0>and then rerun

00:13:24.075 --> 00:13:25.195
<v Speaker 0>the create command.

00:13:32.399 --> 00:13:34.079
<v Speaker 0>And as we can see, the bucket has

00:13:34.079 --> 00:13:35.120
<v Speaker 0>been recreated.

00:13:35.600 --> 00:13:37.920
<v Speaker 0>Now, we can continue to delete this as

00:13:37.920 --> 00:13:39.360
<v Speaker 0>many times as we want and it will

00:13:39.360 --> 00:13:40.639
<v Speaker 0>continue to come back

00:13:40.964 --> 00:13:43.685
<v Speaker 0>because we have a long running process which

00:13:43.685 --> 00:13:46.084
<v Speaker 0>is pulling the AWS API as well as

00:13:46.084 --> 00:13:49.125
<v Speaker 0>subscribing to the CloudTrail log to monitor for

00:13:49.125 --> 00:13:49.925
<v Speaker 0>events.

00:13:51.125 --> 00:13:53.045
<v Speaker 0>So how do we make this work with

00:13:53.045 --> 00:13:53.925
<v Speaker 0>Guidepad?

00:13:54.165 --> 00:13:55.685
<v Speaker 0>Let's take a look at some code.

00:13:59.180 --> 00:14:02.220
<v Speaker 0>Inside of our plugin, we have requirements

00:14:02.699 --> 00:14:03.740
<v Speaker 0>dot py.

00:14:04.540 --> 00:14:06.699
<v Speaker 0>In this, we define a new class which

00:14:06.699 --> 00:14:09.339
<v Speaker 0>extend requirement called CloudTrail requirement.

00:14:10.134 --> 00:14:12.774
<v Speaker 0>All this requirement is doing is allowing us

00:14:12.774 --> 00:14:15.495
<v Speaker 0>to set a number of lookups and parameters

00:14:15.495 --> 00:14:18.135
<v Speaker 0>to filter the CloudTrail log

00:14:18.774 --> 00:14:21.334
<v Speaker 0>and then to trigger things within Guidepad. At

00:14:21.334 --> 00:14:23.975
<v Speaker 0>this case, we're using a state machine and

00:14:23.975 --> 00:14:24.855
<v Speaker 0>a state transition.

00:14:25.440 --> 00:14:29.120
<v Speaker 0>Our state transition has some CloudTrailer requirements that

00:14:29.120 --> 00:14:31.680
<v Speaker 0>if they become true, the transition will be

00:14:31.680 --> 00:14:34.000
<v Speaker 0>executed from deployed to deployed,

00:14:34.320 --> 00:14:36.240
<v Speaker 0>meaning reconciled.

00:14:36.800 --> 00:14:39.600
<v Speaker 0>Now we could have different handlers for each

00:14:39.600 --> 00:14:40.560
<v Speaker 0>type of event

00:14:41.205 --> 00:14:43.765
<v Speaker 0>and have an array of phases where we

00:14:43.765 --> 00:14:44.485
<v Speaker 0>handle

00:14:44.645 --> 00:14:46.965
<v Speaker 0>lots of specific scenarios,

00:14:47.605 --> 00:14:49.685
<v Speaker 0>but that would require me sitting here for

00:14:49.685 --> 00:14:52.005
<v Speaker 0>hours upon hours showing you all the amazing

00:14:52.005 --> 00:14:53.605
<v Speaker 0>stuff that we can do. And we want

00:14:53.605 --> 00:14:54.405
<v Speaker 0>to keep this brief.

00:14:56.120 --> 00:14:58.120
<v Speaker 0>So let's come over to Guidepad and we're

00:14:58.120 --> 00:14:59.720
<v Speaker 0>going to take a look at our state

00:14:59.720 --> 00:15:00.600
<v Speaker 0>transition.

00:15:02.680 --> 00:15:03.560
<v Speaker 0>Specifically,

00:15:03.560 --> 00:15:05.720
<v Speaker 0>want to see the requirements.

00:15:07.640 --> 00:15:09.720
<v Speaker 0>Now what we can see here is that

00:15:09.720 --> 00:15:11.240
<v Speaker 0>we have a logical or

00:15:11.615 --> 00:15:13.375
<v Speaker 0>and a list of requirements

00:15:13.774 --> 00:15:15.855
<v Speaker 0>with the first one being a type of

00:15:15.855 --> 00:15:17.454
<v Speaker 0>AWS CloudTrail

00:15:17.694 --> 00:15:21.134
<v Speaker 0>where is monitoring for an event name put

00:15:21.134 --> 00:15:22.495
<v Speaker 0>bucket public

00:15:22.495 --> 00:15:23.774
<v Speaker 0>access block.

00:15:25.490 --> 00:15:28.290
<v Speaker 0>We then have another AWS CloudTrail

00:15:29.250 --> 00:15:31.570
<v Speaker 0>where the event name is delete bucket.

00:15:32.050 --> 00:15:34.290
<v Speaker 0>So if any of these events come through,

00:15:34.290 --> 00:15:37.090
<v Speaker 0>satisfy our requirements, our state transition will be

00:15:37.090 --> 00:15:40.165
<v Speaker 0>executed and voila, everything that we want to

00:15:40.165 --> 00:15:41.925
<v Speaker 0>be true for our bucket remains to be

00:15:41.925 --> 00:15:42.485
<v Speaker 0>true.

00:15:43.445 --> 00:15:44.485
<v Speaker 0>Now, of course,

00:15:45.285 --> 00:15:48.325
<v Speaker 0>because everything in Guidepad is is data written

00:15:48.325 --> 00:15:50.325
<v Speaker 0>to a system, we can query in this

00:15:50.325 --> 00:15:50.565
<v Speaker 0>way.

00:15:51.410 --> 00:15:53.569
<v Speaker 0>You may be thinking, isn't there something a

00:15:53.569 --> 00:15:54.930
<v Speaker 0>little bit nicer when I don't have to

00:15:54.930 --> 00:15:57.250
<v Speaker 0>learn a ton of commands? And yes, there

00:15:57.250 --> 00:15:58.529
<v Speaker 0>is a UI.

00:15:59.089 --> 00:16:02.209
<v Speaker 0>From here, we can see my Guidepad dashboard.

00:16:02.769 --> 00:16:04.370
<v Speaker 0>We have lots of services,

00:16:04.370 --> 00:16:06.290
<v Speaker 0>lots of deployments, lots of events,

00:16:07.375 --> 00:16:10.575
<v Speaker 0>a pretty solid overview of everything happening at

00:16:10.575 --> 00:16:11.295
<v Speaker 0>the moment.

00:16:12.175 --> 00:16:13.935
<v Speaker 0>We can click on state machines

00:16:16.255 --> 00:16:17.695
<v Speaker 0>where we can take a look at our

00:16:17.695 --> 00:16:19.214
<v Speaker 0>s three provider

00:16:20.390 --> 00:16:21.990
<v Speaker 0>and we can see that it's a relatively

00:16:21.990 --> 00:16:24.470
<v Speaker 0>trivial state machine that just goes from deployed

00:16:24.470 --> 00:16:25.670
<v Speaker 0>to deployed.

00:16:26.790 --> 00:16:28.630
<v Speaker 0>But you can imagine as you build out

00:16:28.630 --> 00:16:31.270
<v Speaker 0>more complicated scenarios with lots of stages and

00:16:31.270 --> 00:16:33.830
<v Speaker 0>phases and transitions, that this diagram is a

00:16:33.830 --> 00:16:35.350
<v Speaker 0>very good visual representation

00:16:35.565 --> 00:16:38.125
<v Speaker 0>of what your provider is doing.

00:16:39.965 --> 00:16:42.205
<v Speaker 0>We could also dig into the state plan

00:16:43.965 --> 00:16:45.325
<v Speaker 0>where we can take a look at our

00:16:45.325 --> 00:16:46.445
<v Speaker 0>SV provider

00:16:47.405 --> 00:16:48.765
<v Speaker 0>and we can see

00:16:50.060 --> 00:16:52.460
<v Speaker 0>the code that we've seen earlier inside of

00:16:52.460 --> 00:16:54.780
<v Speaker 0>our plugin and the Python file.

00:16:56.380 --> 00:16:58.540
<v Speaker 0>And you can browse anything you want using

00:16:58.540 --> 00:16:59.420
<v Speaker 0>the UI.

00:16:59.980 --> 00:17:01.260
<v Speaker 0>I jump it over to types.

00:17:01.735 --> 00:17:03.735
<v Speaker 0>You can see the types available within my

00:17:03.735 --> 00:17:07.095
<v Speaker 0>plugin itself and the global Guidepad system.

00:17:09.255 --> 00:17:09.974
<v Speaker 0>Like so.

00:17:11.494 --> 00:17:13.335
<v Speaker 0>So that's a rough idea

00:17:13.415 --> 00:17:16.375
<v Speaker 0>of what we can do to improve infrastructure

00:17:16.375 --> 00:17:19.609
<v Speaker 0>as code using a system like Guidepad.

00:17:20.329 --> 00:17:23.049
<v Speaker 0>It provides a whole bunch of primitives

00:17:24.569 --> 00:17:26.569
<v Speaker 0>that allow you to build anything you can

00:17:26.569 --> 00:17:27.369
<v Speaker 0>dream up.

00:17:28.170 --> 00:17:30.890
<v Speaker 0>In this case, we took advantage of Guidepad

00:17:30.890 --> 00:17:32.650
<v Speaker 0>environment and control planes.

00:17:33.455 --> 00:17:35.535
<v Speaker 0>We used an AWS environment,

00:17:35.535 --> 00:17:38.255
<v Speaker 0>which means our service had the ability to

00:17:38.255 --> 00:17:40.255
<v Speaker 0>query the AWS API

00:17:40.415 --> 00:17:43.935
<v Speaker 0>because the environment provided secret credentials that could

00:17:43.935 --> 00:17:45.455
<v Speaker 0>be consumed at runtime.

00:17:46.759 --> 00:17:49.159
<v Speaker 0>We used a very specific control plane that

00:17:49.159 --> 00:17:51.159
<v Speaker 0>allowed us to execute Python.

00:17:51.559 --> 00:17:52.840
<v Speaker 0>And just as reminder,

00:17:52.840 --> 00:17:54.519
<v Speaker 0>that control plane could be written by you

00:17:54.519 --> 00:17:56.039
<v Speaker 0>in less than a hundred lines of code

00:17:56.039 --> 00:17:57.159
<v Speaker 0>to run Go,

00:17:57.480 --> 00:17:58.999
<v Speaker 0>Rust, Perl,

00:17:59.000 --> 00:18:01.000
<v Speaker 0>PHP, OCaml, whatever you want.

00:18:01.645 --> 00:18:04.605
<v Speaker 0>Then use the state machine and state transition

00:18:04.605 --> 00:18:06.445
<v Speaker 0>primitives from Guidepad,

00:18:08.045 --> 00:18:09.644
<v Speaker 0>which take requirements.

00:18:11.405 --> 00:18:13.565
<v Speaker 0>These requirements allow you to hook into any

00:18:13.565 --> 00:18:15.485
<v Speaker 0>system. That could be CloudTrail,

00:18:15.485 --> 00:18:16.605
<v Speaker 0>it could be Webhooks,

00:18:17.090 --> 00:18:18.450
<v Speaker 0>it could be Syslog,

00:18:18.690 --> 00:18:20.210
<v Speaker 0>it could be container logs.

00:18:21.090 --> 00:18:24.050
<v Speaker 0>You can filter and transform those events and

00:18:24.050 --> 00:18:26.049
<v Speaker 0>handle them to emit more events.

00:18:27.330 --> 00:18:29.250
<v Speaker 0>And when those requirements are satisfied,

00:18:29.905 --> 00:18:32.225
<v Speaker 0>you can execute a service or

00:18:32.305 --> 00:18:33.664
<v Speaker 0>a state transition.

00:18:35.025 --> 00:18:37.505
<v Speaker 0>That state transition is part of a state

00:18:37.505 --> 00:18:39.825
<v Speaker 0>machine that can have one, two, or more

00:18:39.825 --> 00:18:40.705
<v Speaker 0>phases

00:18:40.865 --> 00:18:43.665
<v Speaker 0>depending on the complexity of the reconciliation that

00:18:43.665 --> 00:18:46.920
<v Speaker 0>you want, allowing you to build in real

00:18:46.920 --> 00:18:48.760
<v Speaker 0>time or near time

00:18:49.720 --> 00:18:53.160
<v Speaker 0>event loops for handling events within your infrastructure.

00:18:55.160 --> 00:18:57.400
<v Speaker 0>CloudTrail and an s three bucket was just

00:18:57.400 --> 00:18:59.720
<v Speaker 0>the easiest implementation to show you for today's

00:18:59.720 --> 00:18:59.960
<v Speaker 0>video.

00:19:01.505 --> 00:19:04.385
<v Speaker 0>There's no reason those requirements couldn't hook into

00:19:04.385 --> 00:19:05.984
<v Speaker 0>the Kubernetes audit log,

00:19:06.465 --> 00:19:08.544
<v Speaker 0>allowing you to get information out of your

00:19:08.544 --> 00:19:09.904
<v Speaker 0>Kubernetes cluster

00:19:10.465 --> 00:19:12.385
<v Speaker 0>to detect potential bad actors.

00:19:13.360 --> 00:19:14.879
<v Speaker 0>You could also monitor

00:19:15.600 --> 00:19:16.879
<v Speaker 0>DNS records,

00:19:17.039 --> 00:19:19.359
<v Speaker 0>TLS certificate expiry times,

00:19:19.760 --> 00:19:22.000
<v Speaker 0>and anything else than your infrastructure through a

00:19:22.000 --> 00:19:23.440
<v Speaker 0>single control plane,

00:19:23.679 --> 00:19:25.519
<v Speaker 0>which allows you to use a command line

00:19:25.519 --> 00:19:28.240
<v Speaker 0>interface or a UI to build that understanding.

00:19:29.725 --> 00:19:32.445
<v Speaker 0>I've struggled to decide or describe

00:19:32.765 --> 00:19:34.684
<v Speaker 0>what Guidepad really is,

00:19:35.885 --> 00:19:37.645
<v Speaker 0>but I am confident that it is a

00:19:37.645 --> 00:19:40.764
<v Speaker 0>new platform for building sophisticated,

00:19:40.845 --> 00:19:42.605
<v Speaker 0>distributed event driven applications.

00:19:44.050 --> 00:19:46.210
<v Speaker 0>I hope you enjoyed this video. We'll see

00:19:46.210 --> 00:19:47.250
<v Speaker 0>you all next time.

00:19:47.570 --> 00:19:49.010
<v Speaker 0>And to the Guidepad team,

00:19:49.410 --> 00:19:51.090
<v Speaker 0>thank you for letting me play with this.

00:19:51.090 --> 00:19:52.210
<v Speaker 0>It's been a whole lot of fun.
