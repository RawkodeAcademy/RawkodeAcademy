WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 32a80b57-f516-4485-b6f3-b65eb68eaf8d
Created: 2025-04-29T12:26:22.925Z
Duration: 6263.3457
Channels: 1

00:01:57.145 --> 00:02:00.185
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:02:00.185 --> 00:02:02.505
<v Speaker 0>I'm your host, David Flanagan, also known across

00:02:02.505 --> 00:02:04.025
<v Speaker 0>the Internet as Rawkode.

00:02:04.425 --> 00:02:06.345
<v Speaker 0>Thank you for joining us today. Today, we

00:02:06.345 --> 00:02:09.385
<v Speaker 0>are continuing our exploration of cloud native and

00:02:09.385 --> 00:02:13.460
<v Speaker 0>advanced event driven architectures using any new forward

00:02:13.460 --> 00:02:15.460
<v Speaker 0>future facing software that we can get our

00:02:15.460 --> 00:02:18.020
<v Speaker 0>hands on, and today is no exception.

00:02:18.500 --> 00:02:20.340
<v Speaker 0>Now today, we're gonna take a look at

00:02:20.340 --> 00:02:22.340
<v Speaker 0>adding a new feature to Guidepad, and that

00:02:22.340 --> 00:02:24.020
<v Speaker 0>is a project that we have covered once

00:02:24.020 --> 00:02:25.380
<v Speaker 0>or twice on the channel before.

00:02:26.285 --> 00:02:28.285
<v Speaker 0>The secret about today's episode is is that

00:02:28.285 --> 00:02:30.125
<v Speaker 0>we are joined by both members of the

00:02:30.125 --> 00:02:31.325
<v Speaker 0>founding team.

00:02:32.125 --> 00:02:35.004
<v Speaker 0>Hello, Matthew and Reggie. How's it going? Hello.

00:02:35.004 --> 00:02:37.245
<v Speaker 1>Good. Thanks for having me. Great. Thanks for

00:02:37.245 --> 00:02:40.360
<v Speaker 2>having us. Really happy to be here. Absolutely.

00:02:40.360 --> 00:02:41.240
<v Speaker 0>My pleasure.

00:02:41.480 --> 00:02:43.160
<v Speaker 0>I think I've made my feelings about Guidepad

00:02:43.160 --> 00:02:45.800
<v Speaker 0>very clear to people over many sessions now,

00:02:45.800 --> 00:02:47.720
<v Speaker 0>but let's get back to that in a

00:02:47.720 --> 00:02:49.880
<v Speaker 0>minute. First things first. Can you both just

00:02:49.880 --> 00:02:51.480
<v Speaker 0>say hello? Tell us a little bit about

00:02:51.480 --> 00:02:53.495
<v Speaker 0>you and what you're up to. Yeah, Rich.

00:02:53.495 --> 00:02:55.015
<v Speaker 1>I'll defer to you. You go first, and

00:02:55.015 --> 00:02:56.455
<v Speaker 1>and I'll Sure. Pick it up a second.

00:02:56.455 --> 00:02:59.015
<v Speaker 2>Yeah. Yeah. I'm the cofounder and CEO of

00:02:59.015 --> 00:02:59.895
<v Speaker 2>Guidepad,

00:03:00.215 --> 00:03:02.775
<v Speaker 2>and my background is in consulting.

00:03:02.775 --> 00:03:04.375
<v Speaker 2>Did a little a a lot of work

00:03:04.375 --> 00:03:05.255
<v Speaker 2>at cloud

00:03:05.415 --> 00:03:06.455
<v Speaker 2>about ten years ago.

00:03:07.370 --> 00:03:10.410
<v Speaker 2>Really got interested in distributed systems, built a

00:03:10.410 --> 00:03:11.050
<v Speaker 2>platform,

00:03:11.290 --> 00:03:13.690
<v Speaker 2>sold some software to the government, and

00:03:14.010 --> 00:03:16.090
<v Speaker 2>met Matt about four or five years ago.

00:03:16.090 --> 00:03:18.970
<v Speaker 2>We got started building software, and we built

00:03:18.855 --> 00:03:22.534
<v Speaker 2>Guidepad as our own internal developer team, tool.

00:03:22.534 --> 00:03:25.015
<v Speaker 2>And, it's kinda taken us over the last

00:03:25.015 --> 00:03:26.775
<v Speaker 2>few years, and we're really excited about what

00:03:26.775 --> 00:03:28.295
<v Speaker 2>we built and where we're going.

00:03:28.694 --> 00:03:31.334
<v Speaker 2>We are a unified developer platform,

00:03:31.334 --> 00:03:33.440
<v Speaker 2>so we could cut across a few of

00:03:33.440 --> 00:03:35.760
<v Speaker 2>the main pieces of building, you know, software

00:03:35.760 --> 00:03:37.440
<v Speaker 2>such as DevOps,

00:03:37.440 --> 00:03:41.200
<v Speaker 2>AIML ops, data integration, and workflow automation.

00:03:41.440 --> 00:03:43.680
<v Speaker 2>And I'll let Matt introduce himself, and we'll

00:03:43.680 --> 00:03:44.480
<v Speaker 2>go from there.

00:03:44.879 --> 00:03:47.760
<v Speaker 1>Cool. Yeah. Thanks. So I'm Matt, CTO,

00:03:47.760 --> 00:03:48.239
<v Speaker 1>cofounder.

00:03:49.225 --> 00:03:51.145
<v Speaker 1>Yeah. Like Reggie said, we met, you know,

00:03:51.145 --> 00:03:53.385
<v Speaker 1>four or five years ago. My background is

00:03:53.385 --> 00:03:56.345
<v Speaker 1>a little different. I was in academia for

00:03:56.345 --> 00:03:58.585
<v Speaker 1>about seven years, did biotech for a bit,

00:03:58.585 --> 00:04:00.985
<v Speaker 1>bounced around in there, fell out into normal

00:04:00.985 --> 00:04:01.385
<v Speaker 1>tech,

00:04:02.060 --> 00:04:03.500
<v Speaker 1>and then, you know, met Reggie and the

00:04:03.500 --> 00:04:05.900
<v Speaker 1>rest is sort of history. So, yeah, Guidepad

00:04:05.900 --> 00:04:06.460
<v Speaker 1>is

00:04:06.860 --> 00:04:08.620
<v Speaker 1>sort of our attempt to

00:04:09.100 --> 00:04:09.980
<v Speaker 1>crystallize

00:04:09.980 --> 00:04:12.940
<v Speaker 1>all of our, like, experiences over our years,

00:04:13.020 --> 00:04:14.780
<v Speaker 1>our joint, you know, combined years, like building

00:04:14.780 --> 00:04:15.740
<v Speaker 1>these distributed systems.

00:04:16.714 --> 00:04:18.875
<v Speaker 1>You know, when building these sorts of systems,

00:04:18.875 --> 00:04:20.795
<v Speaker 1>it's it's hard to, like, standardize things. It's

00:04:20.795 --> 00:04:22.475
<v Speaker 1>hard to make things repeatable. It's hard to

00:04:22.475 --> 00:04:23.675
<v Speaker 1>make things observable.

00:04:24.075 --> 00:04:25.835
<v Speaker 1>And so Guidepad sort of takes all of

00:04:25.835 --> 00:04:27.595
<v Speaker 1>our learnings about how to do those things

00:04:27.595 --> 00:04:30.075
<v Speaker 1>well, bundles it up into a a platform,

00:04:30.075 --> 00:04:31.275
<v Speaker 1>and then tries to, you know, make it

00:04:31.275 --> 00:04:32.610
<v Speaker 1>available to other folks.

00:04:33.970 --> 00:04:34.930
<v Speaker 1>Awesome.

00:04:35.410 --> 00:04:38.610
<v Speaker 0>Alright. You said something that I hadn't heard

00:04:38.610 --> 00:04:39.970
<v Speaker 0>before, but made a lot of sense when

00:04:39.970 --> 00:04:42.210
<v Speaker 0>you said a unified developer platform.

00:04:42.290 --> 00:04:44.050
<v Speaker 0>So maybe the both of you can dive

00:04:44.050 --> 00:04:45.730
<v Speaker 0>into that a little bit and just help

00:04:45.730 --> 00:04:48.975
<v Speaker 0>the audience understand, like, what can Guidepad deliver

00:04:48.975 --> 00:04:50.575
<v Speaker 0>and what problem is it solving?

00:04:51.455 --> 00:04:52.895
<v Speaker 1>Sure. Yeah. So,

00:04:53.135 --> 00:04:55.055
<v Speaker 1>you know, when you think about building distributed

00:04:55.055 --> 00:04:57.615
<v Speaker 1>systems today, you're you're probably talking about, you

00:04:57.615 --> 00:04:59.855
<v Speaker 1>know, half a dozen tools off the bat.

00:04:59.855 --> 00:05:01.375
<v Speaker 1>Something for your your CICD,

00:05:01.375 --> 00:05:03.750
<v Speaker 1>something for your your back end, something for

00:05:03.750 --> 00:05:04.390
<v Speaker 1>your

00:05:04.710 --> 00:05:06.390
<v Speaker 1>logging, your issues tracking,

00:05:06.710 --> 00:05:08.230
<v Speaker 1>data engineering,

00:05:08.310 --> 00:05:08.950
<v Speaker 1>right,

00:05:09.670 --> 00:05:11.030
<v Speaker 1>managing your infrastructure.

00:05:11.590 --> 00:05:13.270
<v Speaker 1>So Guidepad has

00:05:13.270 --> 00:05:15.270
<v Speaker 1>the building blocks to put all of those

00:05:15.270 --> 00:05:16.390
<v Speaker 1>things into one tool.

00:05:17.235 --> 00:05:19.075
<v Speaker 1>And then whether you wanna do stuff at

00:05:19.235 --> 00:05:20.755
<v Speaker 1>in a user interface or at the command

00:05:20.755 --> 00:05:22.835
<v Speaker 1>line or in like an interactive coding session,

00:05:23.075 --> 00:05:26.275
<v Speaker 1>Guidepad has ways into all of those things

00:05:26.275 --> 00:05:27.475
<v Speaker 1>so that you can do what you need

00:05:27.475 --> 00:05:28.995
<v Speaker 1>to do without having to jump between a

00:05:28.995 --> 00:05:30.740
<v Speaker 1>bunch of different tools,

00:05:30.900 --> 00:05:31.460
<v Speaker 1>essentially.

00:05:31.860 --> 00:05:33.940
<v Speaker 1>But it's also, like, not that opinionated that

00:05:33.940 --> 00:05:36.100
<v Speaker 1>you couldn't sort of integrate Guidepad with stuff

00:05:36.100 --> 00:05:37.460
<v Speaker 1>that you're already using. So,

00:05:37.860 --> 00:05:39.780
<v Speaker 1>you know, if you have a preferred workflow

00:05:39.780 --> 00:05:40.900
<v Speaker 1>management system,

00:05:41.140 --> 00:05:43.860
<v Speaker 1>but you wanna use Guidepad for, like, generating

00:05:43.860 --> 00:05:46.675
<v Speaker 1>endpoints or managing like your units of work

00:05:46.675 --> 00:05:49.235
<v Speaker 1>that go into that that pipeline system, you

00:05:49.235 --> 00:05:50.035
<v Speaker 1>can do that.

00:05:50.435 --> 00:05:52.275
<v Speaker 1>If you don't have a workflow management system

00:05:52.275 --> 00:05:54.755
<v Speaker 1>but you do have maybe a CICD thing,

00:05:55.075 --> 00:05:58.030
<v Speaker 1>you can use Guidepad's work plan system to

00:05:58.030 --> 00:06:00.190
<v Speaker 1>automate, you know, the tasks that you're doing.

00:06:00.430 --> 00:06:02.270
<v Speaker 1>And sort of, like, as you get more

00:06:02.270 --> 00:06:04.110
<v Speaker 1>comfortable with the system, you can, you know,

00:06:04.110 --> 00:06:06.030
<v Speaker 1>you can put its tentacles out into more

00:06:06.030 --> 00:06:08.110
<v Speaker 1>of what you're you're doing. Yep.

00:06:09.550 --> 00:06:11.150
<v Speaker 0>Nice. Anything to add there, Roger?

00:06:12.175 --> 00:06:13.855
<v Speaker 2>No. I think I think he hit the

00:06:13.855 --> 00:06:15.295
<v Speaker 2>the nail on the head. You know, a

00:06:15.295 --> 00:06:17.455
<v Speaker 2>lot of our customers right now have come

00:06:17.455 --> 00:06:19.855
<v Speaker 2>have come to us. Some of the use

00:06:19.855 --> 00:06:22.255
<v Speaker 2>cases that we've seen, a lot of our

00:06:22.255 --> 00:06:25.615
<v Speaker 2>clients, larger enterprises are looking for, like, a

00:06:25.615 --> 00:06:29.610
<v Speaker 2>unified, like, cloud control plane. You know, most

00:06:29.610 --> 00:06:31.850
<v Speaker 2>most customers we talk to are hybrid in

00:06:31.850 --> 00:06:35.610
<v Speaker 2>nature. So they have workloads across AWS, Azure,

00:06:35.850 --> 00:06:38.170
<v Speaker 2>Google Cloud, and some still have workloads on

00:06:38.170 --> 00:06:40.250
<v Speaker 2>premise. And so having one tool that can

00:06:40.250 --> 00:06:40.570
<v Speaker 2>help

00:06:41.225 --> 00:06:44.105
<v Speaker 2>manage all of that, manage and control everything.

00:06:44.425 --> 00:06:46.905
<v Speaker 2>And then data engineering and workflow automation,

00:06:47.145 --> 00:06:49.305
<v Speaker 2>has has been another big thing for us.

00:06:49.305 --> 00:06:51.625
<v Speaker 2>So, you know, as as you'll see, once

00:06:51.625 --> 00:06:53.945
<v Speaker 2>once Matt goes into the demo, we start

00:06:54.100 --> 00:06:56.500
<v Speaker 2>diving into the tool, you know, very little

00:06:56.500 --> 00:06:58.420
<v Speaker 2>code that has to be written. We we

00:06:58.420 --> 00:07:00.420
<v Speaker 2>do things dynamically at Rawkode.

00:07:00.580 --> 00:07:01.300
<v Speaker 2>Yeah.

00:07:01.940 --> 00:07:02.580
<v Speaker 0>Yeah.

00:07:03.300 --> 00:07:04.980
<v Speaker 0>So we have covered this before, and the

00:07:04.980 --> 00:07:07.140
<v Speaker 0>very little code to be written really highlights

00:07:07.140 --> 00:07:09.060
<v Speaker 0>one of the key strengths of Guidepad. And

00:07:09.060 --> 00:07:10.575
<v Speaker 0>something that you promote on the website as

00:07:10.575 --> 00:07:12.015
<v Speaker 0>well is that you can build a platform

00:07:12.015 --> 00:07:13.935
<v Speaker 0>or software as data.

00:07:14.095 --> 00:07:16.255
<v Speaker 0>But for anyone that hasn't seen anything previously,

00:07:16.255 --> 00:07:17.375
<v Speaker 0>maybe we can go into that in a

00:07:17.375 --> 00:07:18.575
<v Speaker 0>little bit of detail just for a few

00:07:18.575 --> 00:07:20.575
<v Speaker 0>minutes before we go into the actual live

00:07:20.575 --> 00:07:22.830
<v Speaker 0>portion of this. But what does that mean?

00:07:22.830 --> 00:07:25.710
<v Speaker 0>How do people build their new pieces of

00:07:25.710 --> 00:07:28.350
<v Speaker 0>software and their platforms using Guidepad as that

00:07:28.350 --> 00:07:29.230
<v Speaker 0>substrate?

00:07:29.550 --> 00:07:31.070
<v Speaker 1>Sure. Yeah. So

00:07:31.550 --> 00:07:32.990
<v Speaker 1>it really you know, when we think about

00:07:32.990 --> 00:07:35.389
<v Speaker 1>like a platform as as data. Right? We're

00:07:35.389 --> 00:07:36.669
<v Speaker 1>we're talking about moving,

00:07:37.315 --> 00:07:39.235
<v Speaker 1>building a system from

00:07:40.514 --> 00:07:41.155
<v Speaker 1>sort of a

00:07:41.955 --> 00:07:43.635
<v Speaker 1>a build the system sort of thing where

00:07:43.635 --> 00:07:45.315
<v Speaker 1>you go in and you write code for

00:07:45.315 --> 00:07:46.675
<v Speaker 1>each of the pieces. This is sort of

00:07:46.675 --> 00:07:48.595
<v Speaker 1>like the old sort of infrastructure as code

00:07:48.595 --> 00:07:49.155
<v Speaker 1>thing. Right?

00:07:49.870 --> 00:07:51.470
<v Speaker 1>Where you have a bunch of files, they're

00:07:51.470 --> 00:07:53.710
<v Speaker 1>spread out. Maybe maybe you're good at organizing

00:07:53.710 --> 00:07:55.470
<v Speaker 1>them and they're in one repository. More likely

00:07:55.470 --> 00:07:57.150
<v Speaker 1>they're not in one repository. They're in many

00:07:57.150 --> 00:07:58.110
<v Speaker 1>repositories.

00:07:58.350 --> 00:08:00.910
<v Speaker 1>They all have distinct, you know, like ownership

00:08:00.990 --> 00:08:02.590
<v Speaker 1>and maybe, you know, maybe the folks that

00:08:02.590 --> 00:08:04.110
<v Speaker 1>own those things don't get along all the

00:08:04.110 --> 00:08:04.190
<v Speaker 1>time.

00:08:05.044 --> 00:08:06.724
<v Speaker 1>So there's a lot of there's a lot

00:08:06.724 --> 00:08:08.485
<v Speaker 1>of friction, right, when you're stuck sort of

00:08:08.485 --> 00:08:09.445
<v Speaker 1>in file land.

00:08:09.685 --> 00:08:10.805
<v Speaker 1>And so what we try to do with

00:08:10.805 --> 00:08:13.365
<v Speaker 1>Guidepad is move you out of file land

00:08:13.365 --> 00:08:15.044
<v Speaker 1>into data land

00:08:15.444 --> 00:08:17.205
<v Speaker 1>where you can be more collaborative.

00:08:17.590 --> 00:08:20.229
<v Speaker 1>It means that you're rather than writing, you

00:08:20.229 --> 00:08:20.710
<v Speaker 1>know,

00:08:21.110 --> 00:08:22.949
<v Speaker 1>scripts that orchestrate

00:08:22.949 --> 00:08:24.550
<v Speaker 1>your your software

00:08:24.870 --> 00:08:26.070
<v Speaker 1>and your applications,

00:08:26.070 --> 00:08:28.630
<v Speaker 1>you are writing specs, so configuration.

00:08:29.110 --> 00:08:32.325
<v Speaker 1>And then Guidepad takes those specs and produces

00:08:32.325 --> 00:08:35.525
<v Speaker 1>things for you. Right? Whether it's the the

00:08:35.525 --> 00:08:37.924
<v Speaker 1>commands that need to go out and deploy

00:08:37.924 --> 00:08:40.804
<v Speaker 1>a web server in your Kubernetes cluster,

00:08:40.965 --> 00:08:43.125
<v Speaker 1>or Guidepad needs to manage

00:08:43.365 --> 00:08:46.079
<v Speaker 1>an ingress for you or Guidepad needs to

00:08:46.079 --> 00:08:48.560
<v Speaker 1>create an s three bucket for you. Those

00:08:48.560 --> 00:08:50.079
<v Speaker 1>things become configuration

00:08:50.160 --> 00:08:53.920
<v Speaker 1>problems rather than sort of code problems.

00:08:54.639 --> 00:08:57.600
<v Speaker 1>And when you're in data,

00:08:58.000 --> 00:09:00.324
<v Speaker 1>you can sort of move the paradigm to

00:09:00.324 --> 00:09:02.245
<v Speaker 1>I'm not building a system, I'm programming a

00:09:02.245 --> 00:09:02.805
<v Speaker 1>system.

00:09:03.285 --> 00:09:05.764
<v Speaker 1>So things become more repeatable, things become more

00:09:05.764 --> 00:09:06.644
<v Speaker 1>observable.

00:09:06.884 --> 00:09:08.725
<v Speaker 1>You can write then the scripts that you're

00:09:08.725 --> 00:09:10.485
<v Speaker 1>writing are actually orchestrating

00:09:10.644 --> 00:09:12.245
<v Speaker 1>all of the components of your system that

00:09:12.245 --> 00:09:14.210
<v Speaker 1>are stored within some data store storage engine.

00:09:14.210 --> 00:09:15.410
<v Speaker 1>And we'll we'll talk about this more when

00:09:15.410 --> 00:09:17.570
<v Speaker 1>we go into the platform, but Guidepad is

00:09:17.570 --> 00:09:19.730
<v Speaker 1>sort of data storage agnostic.

00:09:20.130 --> 00:09:22.690
<v Speaker 1>It has what we call the type system,

00:09:22.690 --> 00:09:24.210
<v Speaker 1>which is a layer on top of what

00:09:24.210 --> 00:09:25.810
<v Speaker 1>you would consider to be like an ORM.

00:09:26.295 --> 00:09:28.135
<v Speaker 1>But that ORM, you know, allows us to

00:09:28.135 --> 00:09:30.214
<v Speaker 1>plug into, you know, different data storage things

00:09:30.214 --> 00:09:33.415
<v Speaker 1>whether that's a database, Postgres, you know, MongoDB.

00:09:34.055 --> 00:09:36.135
<v Speaker 1>You can do things you can actually store

00:09:36.135 --> 00:09:37.255
<v Speaker 1>parts of your system

00:09:37.575 --> 00:09:39.335
<v Speaker 1>in files if you want to. You can

00:09:39.335 --> 00:09:40.455
<v Speaker 1>have a data store that's an s three

00:09:40.455 --> 00:09:41.750
<v Speaker 1>bucket. You can have a data store that's

00:09:41.750 --> 00:09:42.550
<v Speaker 1>an API.

00:09:43.269 --> 00:09:44.870
<v Speaker 1>So there's a lot of flexibility as far

00:09:44.870 --> 00:09:45.670
<v Speaker 1>as like where

00:09:46.310 --> 00:09:48.470
<v Speaker 1>you store the parts of your system. And

00:09:48.470 --> 00:09:50.149
<v Speaker 1>what that what that allows you to do

00:09:50.149 --> 00:09:52.790
<v Speaker 1>is to tailor that storage to the performance

00:09:52.790 --> 00:09:54.550
<v Speaker 1>requirements of each sort of piece of your

00:09:54.550 --> 00:09:55.430
<v Speaker 1>system. So it's like,

00:09:56.274 --> 00:09:59.475
<v Speaker 1>this particular data structure works the best in

00:09:59.714 --> 00:10:01.795
<v Speaker 1>Postgres. So let's put it there. Well, this

00:10:01.795 --> 00:10:03.395
<v Speaker 1>part, we actually don't really care about the

00:10:03.395 --> 00:10:05.075
<v Speaker 1>structured stuff so much. We wanna be able

00:10:05.075 --> 00:10:06.834
<v Speaker 1>to store a bunch of disparate,

00:10:06.834 --> 00:10:09.235
<v Speaker 1>you know, polymorphic types of things. Let's put

00:10:09.235 --> 00:10:10.960
<v Speaker 1>that in MongoDB. It doesn't care so much

00:10:10.960 --> 00:10:12.960
<v Speaker 1>about the schema. There's less overhead about maintaining

00:10:12.960 --> 00:10:13.440
<v Speaker 1>stuff.

00:10:14.320 --> 00:10:16.240
<v Speaker 1>Yeah. I'm rambling now. So I'm gonna stop

00:10:16.240 --> 00:10:18.080
<v Speaker 1>doing that. And if you have a question,

00:10:18.080 --> 00:10:19.200
<v Speaker 1>have it answer it.

00:10:19.840 --> 00:10:21.840
<v Speaker 0>No. It's not rambling. You're, you know, you're

00:10:21.840 --> 00:10:23.760
<v Speaker 0>just sharing how the system works. I think

00:10:23.760 --> 00:10:25.464
<v Speaker 0>a lot of us be solidified for people

00:10:25.464 --> 00:10:27.704
<v Speaker 0>as they see us explore the platform, add

00:10:27.704 --> 00:10:29.464
<v Speaker 0>new features, and kinda show how to work

00:10:29.464 --> 00:10:30.105
<v Speaker 0>with it.

00:10:30.745 --> 00:10:32.185
<v Speaker 0>Maybe that should be a good time then

00:10:32.185 --> 00:10:34.185
<v Speaker 0>for you to discuss or share what is

00:10:34.185 --> 00:10:35.785
<v Speaker 0>our plan for today. What are we going

00:10:35.785 --> 00:10:36.105
<v Speaker 0>to do?

00:10:37.950 --> 00:10:39.470
<v Speaker 1>Let me should I share my screen now?

00:10:39.470 --> 00:10:40.910
<v Speaker 1>I can do that. Yeah. Go for talk

00:10:40.910 --> 00:10:41.470
<v Speaker 1>through.

00:10:41.870 --> 00:10:42.590
<v Speaker 1>Great.

00:10:43.150 --> 00:10:46.750
<v Speaker 1>Let me actually move the the call window

00:10:46.750 --> 00:10:47.390
<v Speaker 1>over

00:10:47.870 --> 00:10:50.590
<v Speaker 1>so that I'm not sharing all of us.

00:10:51.550 --> 00:10:52.430
<v Speaker 1>Here we go.

00:10:53.925 --> 00:10:54.565
<v Speaker 1>Great.

00:10:55.685 --> 00:10:58.725
<v Speaker 1>Okay. Perfect. So is it can you see

00:10:58.725 --> 00:10:59.205
<v Speaker 1>it?

00:11:00.245 --> 00:11:01.525
<v Speaker 0>Yep.

00:11:01.685 --> 00:11:02.485
<v Speaker 1>Awesome.

00:11:02.885 --> 00:11:05.045
<v Speaker 1>So I guess maybe before we get into

00:11:05.045 --> 00:11:07.045
<v Speaker 1>what we're gonna do today, I can spend

00:11:07.045 --> 00:11:08.885
<v Speaker 1>just a few moments talking about,

00:11:09.940 --> 00:11:12.260
<v Speaker 1>like, the high level concepts within the system.

00:11:12.740 --> 00:11:14.900
<v Speaker 1>That might help folks as we sort of

00:11:14.900 --> 00:11:16.900
<v Speaker 1>move through into the actual implementation.

00:11:17.540 --> 00:11:19.460
<v Speaker 1>So this is the

00:11:20.340 --> 00:11:21.220
<v Speaker 1>Guidepad UI.

00:11:21.904 --> 00:11:24.225
<v Speaker 1>This is the instance that I created just

00:11:24.225 --> 00:11:25.584
<v Speaker 1>for this,

00:11:26.464 --> 00:11:27.745
<v Speaker 1>you know, this livestream.

00:11:27.904 --> 00:11:30.944
<v Speaker 1>So every Guidepad installation we call an instance.

00:11:30.944 --> 00:11:33.105
<v Speaker 1>Typically, it's, you know, it's one per

00:11:33.824 --> 00:11:34.545
<v Speaker 1>customer.

00:11:34.944 --> 00:11:36.625
<v Speaker 1>They all get their own domain name.

00:11:37.300 --> 00:11:39.220
<v Speaker 1>You can we can host them or they

00:11:39.220 --> 00:11:41.220
<v Speaker 1>can be hosted on premise. We have an

00:11:41.220 --> 00:11:42.900
<v Speaker 1>installer that sort of stands one of these

00:11:42.900 --> 00:11:44.260
<v Speaker 1>up in like a couple minutes.

00:11:44.980 --> 00:11:47.540
<v Speaker 1>And with this installation, you get a what

00:11:47.540 --> 00:11:48.740
<v Speaker 1>we call an environment.

00:11:48.980 --> 00:11:51.380
<v Speaker 1>An environment is a bundle of resources.

00:11:51.875 --> 00:11:54.515
<v Speaker 1>So draw a logical box around like an

00:11:54.515 --> 00:11:57.475
<v Speaker 1>AWS account or Kubernetes cluster

00:11:57.635 --> 00:12:00.435
<v Speaker 1>or an Azure account. And that's an environment.

00:12:00.435 --> 00:12:02.675
<v Speaker 1>Right? Environments can be big or small. Just

00:12:02.675 --> 00:12:04.595
<v Speaker 1>depends on where you wanna draw the boundaries

00:12:04.595 --> 00:12:07.210
<v Speaker 1>around them. You can see in this particular

00:12:07.210 --> 00:12:09.130
<v Speaker 1>instance, we only have two right now. We

00:12:09.130 --> 00:12:09.610
<v Speaker 1>have,

00:12:10.010 --> 00:12:11.770
<v Speaker 1>a Kubernetes cluster here,

00:12:12.010 --> 00:12:13.610
<v Speaker 1>which is what is sort of hosting all

00:12:13.610 --> 00:12:15.690
<v Speaker 1>the infrastructure for this. And then we have

00:12:15.690 --> 00:12:17.610
<v Speaker 1>a build excuse me. We have a build

00:12:17.610 --> 00:12:19.610
<v Speaker 1>environment, and that uses the

00:12:19.944 --> 00:12:21.785
<v Speaker 1>packer from from Terraform.

00:12:22.985 --> 00:12:24.904
<v Speaker 1>We'll we'll actually use that as part of

00:12:24.904 --> 00:12:26.264
<v Speaker 1>part of the demo. So

00:12:26.824 --> 00:12:29.305
<v Speaker 1>environments are bundles of resources.

00:12:29.944 --> 00:12:32.824
<v Speaker 1>Into those environments, we put services.

00:12:32.985 --> 00:12:34.105
<v Speaker 1>Right? And so services

00:12:35.300 --> 00:12:37.780
<v Speaker 1>are the things that provide capabilities for your

00:12:37.780 --> 00:12:40.100
<v Speaker 1>they're actual, like, parts of your system. Right?

00:12:40.340 --> 00:12:44.020
<v Speaker 1>And so in this particular instance, we have

00:12:44.020 --> 00:12:47.460
<v Speaker 1>the things that come along with every Guidepad

00:12:47.325 --> 00:12:49.805
<v Speaker 1>installation. So we have the user interface, which

00:12:49.805 --> 00:12:51.005
<v Speaker 1>is what we're looking at now.

00:12:51.725 --> 00:12:53.965
<v Speaker 1>We have two things to manage work plans,

00:12:53.965 --> 00:12:55.485
<v Speaker 1>so the automation piece here.

00:12:56.365 --> 00:12:58.525
<v Speaker 1>We have an open search data store, which

00:12:58.525 --> 00:13:00.605
<v Speaker 1>is used to store the logs and the

00:13:00.605 --> 00:13:02.930
<v Speaker 1>events that go on in Guidepad. I think

00:13:03.170 --> 00:13:04.770
<v Speaker 1>No, not issues. Issues are stored in the

00:13:04.770 --> 00:13:06.610
<v Speaker 1>main system. Anyway, I'll get to that in

00:13:06.610 --> 00:13:08.450
<v Speaker 1>a second. And then we have

00:13:09.330 --> 00:13:12.450
<v Speaker 1>this thing, which basically just manages ECR credentials

00:13:12.450 --> 00:13:14.290
<v Speaker 1>so that this cluster can access all the

00:13:14.290 --> 00:13:16.475
<v Speaker 1>images that it needs. And then this one

00:13:16.475 --> 00:13:20.075
<v Speaker 1>here is the generative API, and not generative

00:13:20.075 --> 00:13:22.475
<v Speaker 1>in the Gen AI sense, but generative in

00:13:22.475 --> 00:13:25.515
<v Speaker 1>the I read a bunch of operation specifications

00:13:25.515 --> 00:13:26.795
<v Speaker 1>and make endpoints.

00:13:27.435 --> 00:13:28.760
<v Speaker 1>And it does that in all the frameworks

00:13:28.760 --> 00:13:30.360
<v Speaker 1>that we support, and that right now that

00:13:30.360 --> 00:13:31.640
<v Speaker 1>is REST, GraphQL,

00:13:32.199 --> 00:13:33.000
<v Speaker 1>and

00:13:33.959 --> 00:13:35.560
<v Speaker 1>I think we do it over message exchange.

00:13:35.560 --> 00:13:37.720
<v Speaker 1>Yeah. We have a it's not deployed in

00:13:37.720 --> 00:13:39.240
<v Speaker 1>this instance, but we could deploy wrapped in

00:13:39.240 --> 00:13:41.800
<v Speaker 1>queue server, and then that server would accept,

00:13:42.040 --> 00:13:43.079
<v Speaker 1>API requests

00:13:43.485 --> 00:13:45.085
<v Speaker 1>and give the results and all that good

00:13:45.085 --> 00:13:47.245
<v Speaker 1>stuff. So I talked about operations,

00:13:47.565 --> 00:13:49.725
<v Speaker 1>and we'll also use operations in our,

00:13:49.965 --> 00:13:52.205
<v Speaker 1>in the feature we're building today. So operations

00:13:52.205 --> 00:13:52.765
<v Speaker 1>are

00:13:53.085 --> 00:13:56.540
<v Speaker 1>portable, repeatable units of work that have predefined,

00:13:56.700 --> 00:13:58.940
<v Speaker 1>inputs and outputs, and a handler. So you

00:13:58.940 --> 00:14:00.380
<v Speaker 1>can think of them sort of as, portable

00:14:00.380 --> 00:14:01.020
<v Speaker 1>functions.

00:14:02.140 --> 00:14:04.460
<v Speaker 1>And those you know, these operations,

00:14:04.940 --> 00:14:06.540
<v Speaker 1>they're they're data records,

00:14:07.020 --> 00:14:08.615
<v Speaker 1>and then you can sort of summon them

00:14:08.615 --> 00:14:10.695
<v Speaker 1>up at will and and use them.

00:14:11.015 --> 00:14:13.415
<v Speaker 1>But the Guidepad API uses those definitions to

00:14:13.415 --> 00:14:15.735
<v Speaker 1>create the endpoints that I've I just I

00:14:15.735 --> 00:14:16.535
<v Speaker 1>just mentioned.

00:14:16.935 --> 00:14:19.495
<v Speaker 1>And the nice thing about operations is that

00:14:19.495 --> 00:14:21.735
<v Speaker 1>they can execute in any environment that you've

00:14:21.735 --> 00:14:24.750
<v Speaker 1>already set up for your instance. So for

00:14:24.750 --> 00:14:26.910
<v Speaker 1>this particular demonstration,

00:14:27.550 --> 00:14:29.550
<v Speaker 1>the operations that I run can either run

00:14:29.550 --> 00:14:31.150
<v Speaker 1>locally on the machine that I'm looking at

00:14:31.150 --> 00:14:33.150
<v Speaker 1>here, or they can run-in that Kubernetes cluster

00:14:33.150 --> 00:14:35.150
<v Speaker 1>that was in the environments list. And I'll

00:14:35.150 --> 00:14:36.510
<v Speaker 1>show you I'll show you an example of

00:14:36.510 --> 00:14:38.110
<v Speaker 1>that, like, as we as we get into

00:14:38.110 --> 00:14:38.270
<v Speaker 1>things.

00:14:39.025 --> 00:14:42.065
<v Speaker 1>Okay. So, we have environments. We have services.

00:14:42.385 --> 00:14:44.385
<v Speaker 1>How do you manage the services in the

00:14:44.385 --> 00:14:46.145
<v Speaker 1>environments? Well, we do that through what we

00:14:46.145 --> 00:14:47.905
<v Speaker 1>call state plans. Right? And so I'll go

00:14:47.905 --> 00:14:49.985
<v Speaker 1>into a state plan and sort of show

00:14:49.985 --> 00:14:50.545
<v Speaker 1>you how that works.

00:14:51.740 --> 00:14:54.380
<v Speaker 1>So state plans are the actual commands that

00:14:54.380 --> 00:14:56.620
<v Speaker 1>are used to get the service in that

00:14:56.620 --> 00:14:59.340
<v Speaker 1>particular state in a given environment.

00:14:59.740 --> 00:15:01.100
<v Speaker 1>And we'll take a look at this deployed

00:15:01.100 --> 00:15:02.460
<v Speaker 1>plan for for Kubernetes.

00:15:03.435 --> 00:15:05.355
<v Speaker 1>This is sort of the default one. Every

00:15:05.355 --> 00:15:07.595
<v Speaker 1>service when you create a service definition, if

00:15:07.595 --> 00:15:09.835
<v Speaker 1>it doesn't have state plans defined within that

00:15:09.835 --> 00:15:10.555
<v Speaker 1>definition,

00:15:11.355 --> 00:15:13.275
<v Speaker 1>it just uses the default ones, this is

00:15:13.275 --> 00:15:14.875
<v Speaker 1>one of them. You can see it's just

00:15:14.875 --> 00:15:16.650
<v Speaker 1>one one little node.

00:15:16.970 --> 00:15:18.890
<v Speaker 1>All of the state plans are DAGs, right,

00:15:18.890 --> 00:15:20.490
<v Speaker 1>just directly cyclic graphs.

00:15:21.530 --> 00:15:23.050
<v Speaker 1>They're made out of phases, so every node

00:15:23.050 --> 00:15:24.890
<v Speaker 1>is a phase. That's this box here.

00:15:25.290 --> 00:15:27.770
<v Speaker 1>And then inside a phase, you have, serially

00:15:27.770 --> 00:15:28.810
<v Speaker 1>ordered stages.

00:15:29.365 --> 00:15:31.365
<v Speaker 1>Right? So this one only has one stage,

00:15:31.365 --> 00:15:33.365
<v Speaker 1>I could add more, below it. And those

00:15:33.365 --> 00:15:35.205
<v Speaker 1>would op those would execute top to bottom

00:15:35.205 --> 00:15:37.445
<v Speaker 1>when this phase executes.

00:15:37.445 --> 00:15:39.125
<v Speaker 1>So if I click into the stage,

00:15:39.845 --> 00:15:42.005
<v Speaker 1>you can see there's actual commands in here.

00:15:42.005 --> 00:15:43.525
<v Speaker 1>I apologize. I have to, like, move stuff

00:15:43.525 --> 00:15:45.720
<v Speaker 1>around. I'm on my tiny laptop screen.

00:15:47.160 --> 00:15:49.000
<v Speaker 1>But yeah. So these are the actual commands.

00:15:49.160 --> 00:15:50.520
<v Speaker 1>You can see it runs,

00:15:50.840 --> 00:15:53.000
<v Speaker 1>a series of Ansible steps

00:15:53.240 --> 00:15:56.040
<v Speaker 1>when it executes to create a volume claim,

00:15:56.040 --> 00:15:56.920
<v Speaker 1>service definition,

00:15:57.375 --> 00:15:58.895
<v Speaker 1>and then a deployment.

00:15:59.135 --> 00:16:00.735
<v Speaker 1>They're parameterized.

00:16:00.735 --> 00:16:02.735
<v Speaker 1>You can see in here that we're doing

00:16:03.295 --> 00:16:06.015
<v Speaker 1>templating. Right? So this can pull information

00:16:06.495 --> 00:16:08.415
<v Speaker 1>from what we call the context

00:16:08.495 --> 00:16:11.135
<v Speaker 1>of the state plan's execution, and that context

00:16:11.135 --> 00:16:11.775
<v Speaker 1>includes

00:16:12.800 --> 00:16:15.040
<v Speaker 1>things like the service that you're deploying, the

00:16:15.040 --> 00:16:16.880
<v Speaker 1>environment it's being deployed into,

00:16:17.440 --> 00:16:18.720
<v Speaker 1>any requirements

00:16:18.800 --> 00:16:20.800
<v Speaker 1>for the service. And I'll talk about requirements

00:16:20.800 --> 00:16:21.920
<v Speaker 1>more later,

00:16:22.400 --> 00:16:24.480
<v Speaker 1>because they're they're a very flexible way of

00:16:24.480 --> 00:16:25.760
<v Speaker 1>specifying either

00:16:26.045 --> 00:16:29.085
<v Speaker 1>what a particular thing needs to to execute,

00:16:29.405 --> 00:16:32.605
<v Speaker 1>or individual pieces of data that a part

00:16:32.605 --> 00:16:35.005
<v Speaker 1>of the system needs, like at runtime, to

00:16:35.005 --> 00:16:36.205
<v Speaker 1>to do the thing.

00:16:37.405 --> 00:16:38.925
<v Speaker 1>So yeah. So, you know, you use state

00:16:38.925 --> 00:16:41.245
<v Speaker 1>plans, to put services into particular states.

00:16:41.960 --> 00:16:44.440
<v Speaker 1>If I go to the, environments,

00:16:45.240 --> 00:16:46.280
<v Speaker 1>over here,

00:16:51.640 --> 00:16:53.880
<v Speaker 1>you can see that I've been deploying things.

00:16:55.080 --> 00:16:57.055
<v Speaker 1>And I think I mentioned this, I might

00:16:57.055 --> 00:16:58.415
<v Speaker 1>not have, but the the UI is a

00:16:58.415 --> 00:17:00.895
<v Speaker 1>couple steps behind the the core capabilities of

00:17:00.895 --> 00:17:03.295
<v Speaker 1>the system and we're on a develop branch.

00:17:03.295 --> 00:17:06.255
<v Speaker 1>So, any visual bugs, you'll just have to

00:17:06.255 --> 00:17:08.175
<v Speaker 1>forgive me for where we are aware of

00:17:08.175 --> 00:17:09.855
<v Speaker 1>them. But I wanted to give you the

00:17:09.855 --> 00:17:11.710
<v Speaker 1>latest and greatest, so that's why this is

00:17:11.710 --> 00:17:13.309
<v Speaker 1>showing not a number.

00:17:14.429 --> 00:17:15.229
<v Speaker 1>Anyway,

00:17:15.470 --> 00:17:16.669
<v Speaker 1>Yeah. So you can see that,

00:17:17.309 --> 00:17:19.629
<v Speaker 1>these are these were all deployed earlier.

00:17:19.869 --> 00:17:22.109
<v Speaker 1>And so they went from transitioning to deployed,

00:17:22.109 --> 00:17:23.789
<v Speaker 1>transitioning to deployed, to deployed them a couple

00:17:23.789 --> 00:17:24.109
<v Speaker 1>times.

00:17:25.474 --> 00:17:26.915
<v Speaker 1>And then these are all the services that

00:17:26.915 --> 00:17:27.875
<v Speaker 1>are in the system.

00:17:28.275 --> 00:17:29.635
<v Speaker 1>Like, it shows you the ones that, like,

00:17:29.635 --> 00:17:31.635
<v Speaker 1>you've deployed into this environment and then these

00:17:31.635 --> 00:17:33.235
<v Speaker 1>are all of the ones that haven't you

00:17:33.235 --> 00:17:35.635
<v Speaker 1>sort of been haven't interacted with this environment

00:17:35.635 --> 00:17:36.755
<v Speaker 1>yet, but they could.

00:17:37.315 --> 00:17:41.180
<v Speaker 1>Yeah. Okay. So environments, services, state plans, state

00:17:41.180 --> 00:17:43.180
<v Speaker 1>machines. I haven't talked about state machines yet.

00:17:43.660 --> 00:17:45.100
<v Speaker 1>This view is broken, so I'm not gonna

00:17:45.100 --> 00:17:47.340
<v Speaker 1>click into it. But what state machines do

00:17:47.340 --> 00:17:50.380
<v Speaker 1>is they orchestrate state transitions. Right? So it's

00:17:50.380 --> 00:17:52.380
<v Speaker 1>a it is like the literal, you know,

00:17:52.380 --> 00:17:54.780
<v Speaker 1>computer science definition of a of a state

00:17:54.585 --> 00:17:56.504
<v Speaker 1>machine. Right? It's got states and transitions.

00:17:57.625 --> 00:17:59.625
<v Speaker 1>But what Guidepad can do is it can

00:17:59.625 --> 00:18:01.705
<v Speaker 1>use your state machine. I'll actually show you

00:18:01.705 --> 00:18:03.705
<v Speaker 1>this, like, in code form because I have

00:18:03.705 --> 00:18:05.544
<v Speaker 1>it there, when we we hop out of

00:18:05.544 --> 00:18:06.745
<v Speaker 1>this view and into a different one.

00:18:07.800 --> 00:18:10.040
<v Speaker 1>But the state machines are can be set

00:18:10.040 --> 00:18:12.440
<v Speaker 1>into autonomous mode. That's this little toggle here.

00:18:12.680 --> 00:18:14.760
<v Speaker 1>And when I do that, there's that service

00:18:14.760 --> 00:18:16.200
<v Speaker 1>called the orchestrator

00:18:16.200 --> 00:18:18.920
<v Speaker 1>that manages the state transitions for the state

00:18:18.920 --> 00:18:21.320
<v Speaker 1>machine and then uses the state plans autonomously

00:18:21.320 --> 00:18:23.505
<v Speaker 1>to move the the service that's attached to

00:18:23.505 --> 00:18:25.345
<v Speaker 1>the state machine from state to state when

00:18:25.345 --> 00:18:27.585
<v Speaker 1>the requirement conditions are are met.

00:18:28.305 --> 00:18:30.305
<v Speaker 1>And, David, we actually that's the thing that

00:18:30.305 --> 00:18:32.304
<v Speaker 1>we did for the, the s three bucket,

00:18:32.625 --> 00:18:34.385
<v Speaker 1>that we were managing autonomously.

00:18:34.385 --> 00:18:36.940
<v Speaker 1>So, like, enforcing that the permissions were set

00:18:36.940 --> 00:18:37.579
<v Speaker 1>properly.

00:18:37.899 --> 00:18:39.979
<v Speaker 1>If someone deleted it, it recreated it.

00:18:40.940 --> 00:18:43.659
<v Speaker 1>Yeah. So that was using state machine concept,

00:18:44.139 --> 00:18:46.700
<v Speaker 1>in that in that orchestrate, Barry, that I

00:18:46.700 --> 00:18:47.579
<v Speaker 1>that I mentioned.

00:18:47.820 --> 00:18:49.895
<v Speaker 0>Which is for anyone who hasn't seen the

00:18:49.895 --> 00:18:51.415
<v Speaker 0>previous videos. We've done a couple of cool

00:18:51.415 --> 00:18:53.255
<v Speaker 0>things with Guidepad to date to show the

00:18:53.255 --> 00:18:53.975
<v Speaker 0>kind of benefits

00:18:54.455 --> 00:18:55.895
<v Speaker 0>and power behind the platform. One of them

00:18:55.895 --> 00:18:58.695
<v Speaker 0>was we built an s three reconciler that

00:18:58.695 --> 00:19:00.455
<v Speaker 0>made sure that an s three state, like,

00:19:00.455 --> 00:19:03.330
<v Speaker 0>IAC, was always reconciled to the correct state.

00:19:03.330 --> 00:19:04.930
<v Speaker 0>Even if it was deleted, that was recreating

00:19:04.930 --> 00:19:07.250
<v Speaker 0>stuff. That was very cool. People should go

00:19:07.250 --> 00:19:08.530
<v Speaker 0>check out that video, and I'll put a

00:19:08.530 --> 00:19:11.090
<v Speaker 0>link to it after the the livestream.

00:19:11.410 --> 00:19:13.090
<v Speaker 0>And the other thing that we have built

00:19:13.090 --> 00:19:16.450
<v Speaker 0>before was the URL shortener was some generative

00:19:16.450 --> 00:19:20.025
<v Speaker 0>AI summarizing of the HTML components as well.

00:19:20.265 --> 00:19:22.585
<v Speaker 1>Yep. You can do a lot with Guidepad.

00:19:22.585 --> 00:19:23.785
<v Speaker 0>And you've kind of touched on a lot

00:19:23.785 --> 00:19:25.705
<v Speaker 0>of the primitives that are exposed to people.

00:19:25.945 --> 00:19:27.385
<v Speaker 0>Right. And then the way that you connect

00:19:27.385 --> 00:19:29.545
<v Speaker 0>these together with Guidepad that kinda

00:19:30.179 --> 00:19:31.700
<v Speaker 0>makes them kick in and and do the

00:19:31.700 --> 00:19:33.139
<v Speaker 0>thing that you need to do. So yeah.

00:19:33.139 --> 00:19:34.740
<v Speaker 1>Right. That's that's sort of the magic is

00:19:34.740 --> 00:19:35.379
<v Speaker 1>is,

00:19:35.860 --> 00:19:38.259
<v Speaker 1>you know, we we there's been a term

00:19:38.259 --> 00:19:40.179
<v Speaker 1>that sort of come into vogue recently, which

00:19:40.179 --> 00:19:43.059
<v Speaker 1>is like compositional systems and compositional software.

00:19:43.835 --> 00:19:45.195
<v Speaker 1>I think Guidepad

00:19:45.195 --> 00:19:47.755
<v Speaker 1>is sort of, just by its very nature,

00:19:47.755 --> 00:19:50.315
<v Speaker 1>like a system like that. Right? Because you

00:19:50.315 --> 00:19:52.315
<v Speaker 1>have these primitive entities.

00:19:52.875 --> 00:19:54.235
<v Speaker 1>You can extend them.

00:19:54.555 --> 00:19:55.835
<v Speaker 1>You can customize them.

00:19:56.419 --> 00:19:57.860
<v Speaker 1>And then you can put them together to

00:19:57.860 --> 00:20:00.820
<v Speaker 1>make basically anything that you want to make.

00:20:01.460 --> 00:20:02.900
<v Speaker 1>And I think maybe that's a good segue

00:20:02.900 --> 00:20:03.779
<v Speaker 1>into

00:20:03.860 --> 00:20:05.620
<v Speaker 1>talking about the architecture of the thing that

00:20:05.620 --> 00:20:06.499
<v Speaker 1>I wanna build

00:20:07.059 --> 00:20:09.539
<v Speaker 1>on the stream unless you have another question

00:20:09.539 --> 00:20:11.705
<v Speaker 1>or anything before I before I do that.

00:20:11.785 --> 00:20:14.265
<v Speaker 0>No. Take it away. That's great. Perfect. Okay.

00:20:14.265 --> 00:20:14.745
<v Speaker 1>So

00:20:16.105 --> 00:20:18.265
<v Speaker 1>what we're gonna do is we're going to

00:20:18.265 --> 00:20:19.145
<v Speaker 1>try to

00:20:19.625 --> 00:20:20.505
<v Speaker 1>build

00:20:20.505 --> 00:20:23.785
<v Speaker 1>an AWS Lambda replacement for node.

00:20:24.690 --> 00:20:27.970
<v Speaker 1>So the ability to run node code

00:20:28.690 --> 00:20:29.809
<v Speaker 1>serverlessly

00:20:30.289 --> 00:20:32.369
<v Speaker 1>through the Guidepad framework.

00:20:33.010 --> 00:20:34.929
<v Speaker 1>And so if we think about what

00:20:35.090 --> 00:20:37.315
<v Speaker 1>if we think about what Lambda is doing,

00:20:37.315 --> 00:20:40.195
<v Speaker 1>right, so you've got, AWS up here,

00:20:41.075 --> 00:20:42.514
<v Speaker 1>and then you've got,

00:20:42.995 --> 00:20:44.594
<v Speaker 1>you know, your Lambda function.

00:20:45.794 --> 00:20:47.075
<v Speaker 1>So this Lambda

00:20:47.475 --> 00:20:47.875
<v Speaker 1>function,

00:20:49.640 --> 00:20:51.240
<v Speaker 1>and that's a colon that should not be

00:20:51.240 --> 00:20:51.879
<v Speaker 1>in there.

00:20:53.559 --> 00:20:55.239
<v Speaker 1>So get your lambda function,

00:20:55.559 --> 00:20:57.000
<v Speaker 1>that, like, executes

00:20:57.240 --> 00:20:59.000
<v Speaker 1>I don't know. There's some black box. Right?

00:20:59.000 --> 00:21:00.120
<v Speaker 1>There's some containerized

00:21:00.120 --> 00:21:01.559
<v Speaker 1>black box over here

00:21:03.305 --> 00:21:04.745
<v Speaker 1>that they run

00:21:04.825 --> 00:21:06.905
<v Speaker 1>your function in because, know, you can attach

00:21:06.905 --> 00:21:08.905
<v Speaker 1>a particular, like, image to it.

00:21:09.625 --> 00:21:13.065
<v Speaker 1>So you need a Docker image that contains

00:21:14.265 --> 00:21:15.465
<v Speaker 1>contains the,

00:21:16.265 --> 00:21:17.385
<v Speaker 1>you know, your code

00:21:17.730 --> 00:21:19.730
<v Speaker 1>artifacts and all the requirements. That's, you know,

00:21:19.730 --> 00:21:21.250
<v Speaker 1>if you wanna use any packages that aren't

00:21:21.250 --> 00:21:23.730
<v Speaker 1>contained within Lambda's default runtime.

00:21:24.690 --> 00:21:27.010
<v Speaker 1>So then, you know, and then out here,

00:21:27.010 --> 00:21:28.370
<v Speaker 1>you maybe have a,

00:21:28.929 --> 00:21:30.625
<v Speaker 1>I don't know. Think they released a thing

00:21:30.625 --> 00:21:31.825
<v Speaker 1>back in 2022,

00:21:31.825 --> 00:21:34.304
<v Speaker 1>which is like, you know, Lambda URLs.

00:21:34.705 --> 00:21:35.345
<v Speaker 1>Right?

00:21:35.505 --> 00:21:36.945
<v Speaker 1>So you can have like a Lambda URL

00:21:36.945 --> 00:21:37.904
<v Speaker 1>in front of it.

00:21:39.185 --> 00:21:40.625
<v Speaker 1>And then you've got your little client over

00:21:40.625 --> 00:21:40.785
<v Speaker 1>here.

00:21:42.340 --> 00:21:44.179
<v Speaker 1>Let's find a

00:21:44.740 --> 00:21:46.339
<v Speaker 1>nice icon for

00:21:46.500 --> 00:21:47.459
<v Speaker 1>a client.

00:21:49.299 --> 00:21:51.380
<v Speaker 1>You know what? I hate the mirror changes.

00:21:51.380 --> 00:21:52.340
<v Speaker 1>Let me just find client.

00:21:55.725 --> 00:21:57.325
<v Speaker 1>No. You're not gonna help me out. Alright.

00:21:57.325 --> 00:21:59.245
<v Speaker 1>Fine. Whatever. I'll just use,

00:22:00.045 --> 00:22:01.245
<v Speaker 1>this again.

00:22:01.325 --> 00:22:03.245
<v Speaker 1>Okay. So you have your client here. Right?

00:22:03.645 --> 00:22:05.725
<v Speaker 1>And it's gonna send the requests,

00:22:06.525 --> 00:22:07.645
<v Speaker 1>to the Lambda URL.

00:22:09.149 --> 00:22:10.350
<v Speaker 1>I don't know why I made that so

00:22:10.350 --> 00:22:12.029
<v Speaker 1>big. Let's make that smaller.

00:22:12.110 --> 00:22:12.989
<v Speaker 1>Thank you.

00:22:13.549 --> 00:22:15.070
<v Speaker 1>So it's gonna send that over there.

00:22:15.630 --> 00:22:18.269
<v Speaker 1>And then Lambda URL is, you know, attached

00:22:18.269 --> 00:22:21.070
<v Speaker 1>to your thing and this is gonna use

00:22:20.475 --> 00:22:21.835
<v Speaker 1>your Docker image

00:22:23.515 --> 00:22:24.315
<v Speaker 1>to,

00:22:24.554 --> 00:22:25.835
<v Speaker 1>you know, start the thing in the black

00:22:25.835 --> 00:22:27.595
<v Speaker 1>box. And then when the black box is

00:22:27.595 --> 00:22:29.595
<v Speaker 1>done, it's like, oh, hey, here's the result.

00:22:29.595 --> 00:22:31.914
<v Speaker 1>So it's gonna go back to the client.

00:22:32.940 --> 00:22:34.700
<v Speaker 1>So, we're gonna try to build something like

00:22:34.700 --> 00:22:36.299
<v Speaker 1>this in Guidepad.

00:22:36.620 --> 00:22:38.059
<v Speaker 1>And what does that look like as far

00:22:38.059 --> 00:22:40.139
<v Speaker 1>as, like, Guidepad components?

00:22:41.740 --> 00:22:43.979
<v Speaker 1>So, what we're gonna do is

00:22:44.139 --> 00:22:46.460
<v Speaker 1>we will have our environment.

00:22:48.165 --> 00:22:50.325
<v Speaker 1>And I'm gonna draw that with a

00:22:50.965 --> 00:22:53.205
<v Speaker 1>dotted line. Alright? So this is our Guidepad

00:22:53.205 --> 00:22:54.005
<v Speaker 1>environment.

00:22:55.365 --> 00:22:56.885
<v Speaker 1>What's called the Rawkode

00:22:57.445 --> 00:22:58.885
<v Speaker 1>KDS environment?

00:22:59.365 --> 00:23:00.405
<v Speaker 1>So, we got this thing here.

00:23:01.670 --> 00:23:03.270
<v Speaker 1>And then inside there,

00:23:03.590 --> 00:23:05.270
<v Speaker 1>what we need to do is we have

00:23:05.270 --> 00:23:06.230
<v Speaker 1>to have some

00:23:06.390 --> 00:23:07.990
<v Speaker 1>we have to have two things. Right? We

00:23:07.990 --> 00:23:10.390
<v Speaker 1>have to have something to represent the code

00:23:10.390 --> 00:23:11.590
<v Speaker 1>that we wanna execute,

00:23:11.910 --> 00:23:13.270
<v Speaker 1>and we need to have a place to

00:23:13.270 --> 00:23:13.830
<v Speaker 1>execute it.

00:23:14.684 --> 00:23:16.684
<v Speaker 1>So the place that we're gonna execute it

00:23:16.684 --> 00:23:19.804
<v Speaker 1>is what we call a language executor.

00:23:20.845 --> 00:23:22.445
<v Speaker 1>Let me just draw one of those.

00:23:25.164 --> 00:23:27.804
<v Speaker 1>And full disclosure, I kinda already have this

00:23:27.804 --> 00:23:28.684
<v Speaker 1>for Python,

00:23:28.924 --> 00:23:31.030
<v Speaker 1>but we have a full stack engineer on

00:23:31.030 --> 00:23:33.190
<v Speaker 1>the team who isn't super well versed in

00:23:33.190 --> 00:23:35.270
<v Speaker 1>Python and would rather write stuff in JavaScript.

00:23:35.590 --> 00:23:37.510
<v Speaker 1>And so I'm trying to be nice to

00:23:37.510 --> 00:23:40.150
<v Speaker 1>him, and, you know, give him a way

00:23:40.150 --> 00:23:41.190
<v Speaker 1>to write the

00:23:41.430 --> 00:23:43.270
<v Speaker 1>operations in the way that he would wanna

00:23:43.270 --> 00:23:43.750
<v Speaker 1>write them.

00:23:45.145 --> 00:23:46.505
<v Speaker 1>Yeah. Okay. So,

00:23:46.905 --> 00:23:47.465
<v Speaker 1>I

00:23:48.265 --> 00:23:49.065
<v Speaker 1>got that.

00:23:49.305 --> 00:23:51.305
<v Speaker 1>It's a solid. And so this is gonna

00:23:51.305 --> 00:23:52.665
<v Speaker 1>be our node

00:23:52.905 --> 00:23:53.544
<v Speaker 1>I

00:23:53.705 --> 00:23:56.745
<v Speaker 1>don't know how that happened. Node JS language

00:23:56.240 --> 00:23:58.240
<v Speaker 1>exec Nobody can type when they're being watched.

00:23:58.240 --> 00:23:59.840
<v Speaker 0>It's just like an unwritten swear to I

00:23:59.840 --> 00:24:02.080
<v Speaker 1>swear. Like, my my TPM

00:24:02.400 --> 00:24:04.480
<v Speaker 1>oh, no. Yeah. My words per minute go

00:24:04.480 --> 00:24:05.600
<v Speaker 1>down to, like, 60.

00:24:06.000 --> 00:24:09.200
<v Speaker 1>Right? When, like, when I'm I'm being observed.

00:24:10.400 --> 00:24:10.560
<v Speaker 1>Yeah.

00:24:11.345 --> 00:24:14.385
<v Speaker 1>Yeah. It's Schrodinger's words per minute. Right? Like,

00:24:14.945 --> 00:24:16.865
<v Speaker 1>they're they're incredibly fast as long as no

00:24:16.865 --> 00:24:18.865
<v Speaker 1>one is looking at me. Okay. Yeah.

00:24:19.505 --> 00:24:20.785
<v Speaker 1>Okay. So

00:24:21.665 --> 00:24:23.025
<v Speaker 1>we have language executor,

00:24:23.620 --> 00:24:25.059
<v Speaker 1>and then the other part we need to

00:24:25.059 --> 00:24:27.059
<v Speaker 1>have is the operation.

00:24:27.059 --> 00:24:29.460
<v Speaker 1>Right? So we need a Node. Js operation.

00:24:30.100 --> 00:24:32.100
<v Speaker 1>And this Node. Js operation is going to

00:24:32.100 --> 00:24:34.179
<v Speaker 1>contain a couple things.

00:24:34.659 --> 00:24:36.659
<v Speaker 1>So, actually, let me let me delete this

00:24:36.659 --> 00:24:38.659
<v Speaker 1>internal label and I'll make it a little

00:24:38.659 --> 00:24:39.140
<v Speaker 1>bigger

00:24:39.835 --> 00:24:41.755
<v Speaker 1>so that I can put some stuff inside

00:24:41.755 --> 00:24:42.235
<v Speaker 1>it.

00:24:42.955 --> 00:24:44.395
<v Speaker 1>And and the stuff I'm putting inside it

00:24:44.395 --> 00:24:46.955
<v Speaker 1>are gonna be they're, like, represented by database

00:24:46.955 --> 00:24:49.755
<v Speaker 1>references, so they're not literally contained within

00:24:50.315 --> 00:24:51.355
<v Speaker 1>this object.

00:24:52.235 --> 00:24:53.870
<v Speaker 1>And I should say that these are objects.

00:24:53.870 --> 00:24:56.429
<v Speaker 1>Right? Like, in in a database somewhere. Right?

00:24:56.429 --> 00:24:58.590
<v Speaker 1>Like, we're gonna have a language executor

00:24:58.830 --> 00:25:00.990
<v Speaker 1>record that exists somewhere,

00:25:01.710 --> 00:25:04.110
<v Speaker 1>and then we're gonna have an operation,

00:25:04.510 --> 00:25:05.869
<v Speaker 1>that also exists.

00:25:05.870 --> 00:25:06.190
<v Speaker 1>So

00:25:07.534 --> 00:25:09.375
<v Speaker 1>we're gonna have the language

00:25:09.534 --> 00:25:11.374
<v Speaker 1>or sorry. We're gonna have the Node. Js.

00:25:12.335 --> 00:25:13.215
<v Speaker 1>Js

00:25:13.215 --> 00:25:14.095
<v Speaker 1>operation.

00:25:14.335 --> 00:25:14.974
<v Speaker 1>Right?

00:25:15.375 --> 00:25:17.855
<v Speaker 1>And within that operation, we're gonna have a

00:25:17.855 --> 00:25:18.654
<v Speaker 1>couple things.

00:25:18.895 --> 00:25:20.575
<v Speaker 1>We're gonna have the input type.

00:25:22.390 --> 00:25:23.909
<v Speaker 1>We're gonna have the

00:25:24.310 --> 00:25:25.350
<v Speaker 1>output type.

00:25:29.110 --> 00:25:31.269
<v Speaker 1>And we're going to have the,

00:25:32.710 --> 00:25:34.149
<v Speaker 1>the implementation,

00:25:34.230 --> 00:25:34.950
<v Speaker 1>basically.

00:25:35.430 --> 00:25:35.830
<v Speaker 1>Right?

00:25:39.405 --> 00:25:41.644
<v Speaker 1>So let me make this a little bigger.

00:25:42.605 --> 00:25:43.965
<v Speaker 1>This a little bigger.

00:25:46.205 --> 00:25:47.804
<v Speaker 1>Because I have to draw some other things.

00:25:50.205 --> 00:25:50.525
<v Speaker 1>K.

00:25:54.059 --> 00:25:56.940
<v Speaker 1>And Miro recently changed yeah. It recently changed

00:25:56.940 --> 00:25:59.820
<v Speaker 1>the thing where if you drag the highlight,

00:25:59.820 --> 00:26:01.500
<v Speaker 1>it also highlights the thing in the background.

00:26:01.500 --> 00:26:03.340
<v Speaker 1>So I can't just, like, select.

00:26:03.419 --> 00:26:04.539
<v Speaker 1>It's it's so annoying.

00:26:05.100 --> 00:26:07.465
<v Speaker 1>Anyway, so we've got this stuff here. The

00:26:07.465 --> 00:26:10.105
<v Speaker 1>implementation is interesting because in order to store

00:26:10.105 --> 00:26:11.865
<v Speaker 1>it right? So if you think about the

00:26:11.865 --> 00:26:13.704
<v Speaker 1>implementation, right, that's just a handler.

00:26:14.024 --> 00:26:16.345
<v Speaker 1>It's the code. But in order for it

00:26:16.345 --> 00:26:18.424
<v Speaker 1>to be portable, it needs to be stored

00:26:18.424 --> 00:26:19.144
<v Speaker 1>somewhere.

00:26:19.465 --> 00:26:20.985
<v Speaker 1>So what we do in Guidepad is we

00:26:20.985 --> 00:26:22.264
<v Speaker 1>have this notion of an artifact,

00:26:22.870 --> 00:26:24.950
<v Speaker 1>which is stored in what we you know,

00:26:25.270 --> 00:26:27.030
<v Speaker 1>I hate saying we call it because it's

00:26:27.030 --> 00:26:28.470
<v Speaker 1>such like a simple word of like, of

00:26:28.470 --> 00:26:29.750
<v Speaker 1>course, you would call it this, but we

00:26:29.750 --> 00:26:32.710
<v Speaker 1>have what we labeled storage back end.

00:26:33.030 --> 00:26:34.230
<v Speaker 1>And a storage back end is just an

00:26:34.230 --> 00:26:36.630
<v Speaker 1>abstraction layer on top of different, like, storage

00:26:36.630 --> 00:26:38.514
<v Speaker 1>things for file like stuff.

00:26:39.155 --> 00:26:41.555
<v Speaker 1>So for for data like stuff, things that

00:26:41.555 --> 00:26:44.195
<v Speaker 1>are either structured or semi structured, have types

00:26:44.195 --> 00:26:45.634
<v Speaker 1>and data stores.

00:26:46.035 --> 00:26:47.715
<v Speaker 1>For things that are unstructured,

00:26:47.715 --> 00:26:49.715
<v Speaker 1>we just like file blobs. Right? Those are

00:26:49.715 --> 00:26:51.955
<v Speaker 1>artifacts and those go in storage back ends.

00:26:52.919 --> 00:26:53.879
<v Speaker 1>So for

00:26:53.960 --> 00:26:55.000
<v Speaker 1>the implementation,

00:26:55.000 --> 00:26:56.200
<v Speaker 1>what we're gonna do is we're gonna store

00:26:56.200 --> 00:26:56.839
<v Speaker 1>that

00:26:57.000 --> 00:26:59.320
<v Speaker 1>in an artifact. Right? So we're gonna have

00:26:59.320 --> 00:27:00.679
<v Speaker 1>an implementation

00:27:01.399 --> 00:27:02.359
<v Speaker 1>artifact.

00:27:03.159 --> 00:27:05.080
<v Speaker 1>And this is gonna contain the code

00:27:07.235 --> 00:27:09.715
<v Speaker 1>of our little Node. Js execution.

00:27:09.715 --> 00:27:11.635
<v Speaker 1>Full disclosure, it'll probably be like console dot

00:27:11.635 --> 00:27:14.035
<v Speaker 1>log something, just to make things not not

00:27:14.035 --> 00:27:14.914
<v Speaker 1>that complicated.

00:27:15.315 --> 00:27:16.995
<v Speaker 1>But we can get more complicated later,

00:27:17.235 --> 00:27:19.554
<v Speaker 1>just just a proof of concept. Right? You're

00:27:19.554 --> 00:27:21.740
<v Speaker 1>gonna walk first, or crawl first and then

00:27:21.740 --> 00:27:22.299
<v Speaker 1>walk.

00:27:22.700 --> 00:27:24.299
<v Speaker 1>So you got that.

00:27:24.700 --> 00:27:27.100
<v Speaker 1>The other thing that might be obvious to

00:27:27.100 --> 00:27:29.020
<v Speaker 1>folks, like an obvious question, right, is like

00:27:29.020 --> 00:27:30.460
<v Speaker 1>you have this operation,

00:27:30.620 --> 00:27:32.700
<v Speaker 1>you have the executor, like this thing is

00:27:32.700 --> 00:27:35.179
<v Speaker 1>supposed to run the function. Like, does it

00:27:35.179 --> 00:27:36.805
<v Speaker 1>how does it do that? Right? Like, how

00:27:36.805 --> 00:27:38.405
<v Speaker 1>do you get from from here to to

00:27:38.405 --> 00:27:38.965
<v Speaker 1>here?

00:27:39.525 --> 00:27:41.045
<v Speaker 1>Well, the way we do that in Guidepad

00:27:41.045 --> 00:27:42.885
<v Speaker 1>is we have this idea of a service

00:27:42.885 --> 00:27:43.605
<v Speaker 1>exposure.

00:27:44.085 --> 00:27:47.285
<v Speaker 1>So service exposure typically sits on the boundary

00:27:47.285 --> 00:27:48.885
<v Speaker 1>of a environment.

00:27:48.885 --> 00:27:49.445
<v Speaker 1>Right?

00:27:50.725 --> 00:27:51.045
<v Speaker 1>Sorry.

00:27:52.900 --> 00:27:54.980
<v Speaker 1>I can close this. Right? Yes. Thank you.

00:27:54.980 --> 00:27:56.740
<v Speaker 1>Okay. Perfect. Yeah. You can just click paid

00:27:56.740 --> 00:27:58.500
<v Speaker 0>on that if you mock that. Oh, this

00:27:58.500 --> 00:28:00.660
<v Speaker 1>too. Perfect. Okay. Thank you. I wasn't sure

00:28:00.660 --> 00:28:02.500
<v Speaker 1>if that showed up to the viewers or

00:28:02.500 --> 00:28:02.820
<v Speaker 1>not,

00:28:03.300 --> 00:28:03.780
<v Speaker 1>but

00:28:04.155 --> 00:28:05.915
<v Speaker 1>I'm glad that I I had it. So,

00:28:05.915 --> 00:28:08.315
<v Speaker 1>anyway, so typically a surface exposure sits here,

00:28:08.315 --> 00:28:10.555
<v Speaker 1>like, this boundary. Right? And it allows traffic

00:28:10.555 --> 00:28:11.275
<v Speaker 1>into,

00:28:11.995 --> 00:28:13.115
<v Speaker 1>a particular,

00:28:14.395 --> 00:28:16.555
<v Speaker 1>service on a particular protocol.

00:28:17.340 --> 00:28:20.379
<v Speaker 1>And so Guidepad supports a couple different protocols,

00:28:20.460 --> 00:28:23.100
<v Speaker 1>the usual ones. Right? HTTP, HTTPS,

00:28:23.100 --> 00:28:24.379
<v Speaker 1>TCP, UDP.

00:28:24.540 --> 00:28:26.140
<v Speaker 1>You can make service exposures through all that

00:28:26.140 --> 00:28:28.380
<v Speaker 1>stuff and then point them at your services.

00:28:28.380 --> 00:28:30.620
<v Speaker 1>And then the environment that you're living that

00:28:30.620 --> 00:28:32.059
<v Speaker 1>that thing is living in is managed by

00:28:32.059 --> 00:28:34.495
<v Speaker 1>Guidepad will expose it in the way that

00:28:34.495 --> 00:28:36.255
<v Speaker 1>you want it to. Think of if you

00:28:36.255 --> 00:28:37.215
<v Speaker 1>think about, like,

00:28:37.615 --> 00:28:41.295
<v Speaker 1>the Kubernetes service concept, that's what this is

00:28:41.295 --> 00:28:43.535
<v Speaker 1>except one level up. Right? So it's not

00:28:43.535 --> 00:28:45.855
<v Speaker 1>just Does your exposure map to the executor,

00:28:45.855 --> 00:28:47.055
<v Speaker 0>or does it map to

00:28:48.019 --> 00:28:50.500
<v Speaker 0>something else first? It seems a bit weird

00:28:50.500 --> 00:28:52.659
<v Speaker 0>that it goes straight to an executor. Right?

00:28:52.899 --> 00:28:53.459
<v Speaker 1>Well,

00:28:53.700 --> 00:28:55.139
<v Speaker 1>so the way that it it does go

00:28:55.139 --> 00:28:56.499
<v Speaker 1>straight to an executor.

00:28:56.899 --> 00:28:58.659
<v Speaker 1>Because in the service exposure, what we have

00:28:58.659 --> 00:29:01.299
<v Speaker 1>is a reference to the exposed service

00:29:01.865 --> 00:29:03.785
<v Speaker 1>within the record. Right? And so that just

00:29:03.785 --> 00:29:05.145
<v Speaker 1>points right to it.

00:29:05.625 --> 00:29:07.865
<v Speaker 1>And then it's the job of the environment's

00:29:07.865 --> 00:29:10.345
<v Speaker 1>public interface, which is another entity,

00:29:11.065 --> 00:29:13.305
<v Speaker 1>to take the service exposure and then manipulate

00:29:13.305 --> 00:29:14.665
<v Speaker 1>the environment in the way that it needs

00:29:14.665 --> 00:29:16.505
<v Speaker 1>to to make sure traffic can be routed

00:29:16.505 --> 00:29:16.905
<v Speaker 1>properly.

00:29:18.419 --> 00:29:19.779
<v Speaker 1>But that's not what we're gonna use it

00:29:19.779 --> 00:29:22.419
<v Speaker 1>for here. What we're gonna do is link

00:29:22.419 --> 00:29:23.460
<v Speaker 1>the operation

00:29:23.700 --> 00:29:25.139
<v Speaker 1>to the service exposure.

00:29:26.740 --> 00:29:29.380
<v Speaker 1>Right? So Guidepad has the ability to say

00:29:29.380 --> 00:29:30.100
<v Speaker 1>this

00:29:31.465 --> 00:29:34.105
<v Speaker 1>operation is actually handled by

00:29:34.424 --> 00:29:37.065
<v Speaker 1>the service pointed to by the service exposure.

00:29:37.065 --> 00:29:38.664
<v Speaker 1>So when you call execute,

00:29:38.985 --> 00:29:40.905
<v Speaker 1>you don't hand like, because a node a

00:29:40.905 --> 00:29:43.544
<v Speaker 1>default operation in Guidepad has an execute method

00:29:43.544 --> 00:29:46.250
<v Speaker 1>attached to it. And that runs normally, takes

00:29:46.250 --> 00:29:48.809
<v Speaker 1>the input, calls the handler, produces the output,

00:29:48.809 --> 00:29:50.169
<v Speaker 1>and returns it to the caller.

00:29:50.970 --> 00:29:53.049
<v Speaker 1>When you link a an operation to a

00:29:53.049 --> 00:29:54.090
<v Speaker 1>service exposure,

00:29:54.570 --> 00:29:56.730
<v Speaker 1>it tries to see if Guidepad

00:29:56.809 --> 00:29:59.585
<v Speaker 1>knows the protocol of the service exposure and

00:29:59.585 --> 00:30:02.065
<v Speaker 1>then will opt then will handle the operation

00:30:02.065 --> 00:30:05.184
<v Speaker 1>over that protocol rather than call the internal

00:30:05.185 --> 00:30:06.465
<v Speaker 1>execute method.

00:30:07.105 --> 00:30:08.784
<v Speaker 1>And so that's what we're gonna do here.

00:30:08.785 --> 00:30:10.065
<v Speaker 1>Right? So that it,

00:30:11.025 --> 00:30:12.280
<v Speaker 1>you know, so so when this thing is

00:30:12.280 --> 00:30:13.880
<v Speaker 1>called, it's gonna be like, oh, hey. I'm,

00:30:13.880 --> 00:30:15.400
<v Speaker 1>like, actually linked to the service exposure which

00:30:15.400 --> 00:30:17.559
<v Speaker 1>is linked to this Node. Js executor.

00:30:17.640 --> 00:30:19.640
<v Speaker 1>I'm gonna send my request over there,

00:30:19.960 --> 00:30:22.360
<v Speaker 1>run, and then return the results.

00:30:23.160 --> 00:30:25.080
<v Speaker 1>And what it also does is sort of

00:30:25.080 --> 00:30:26.040
<v Speaker 1>shunts this

00:30:26.434 --> 00:30:28.674
<v Speaker 1>into here so that it can run.

00:30:28.995 --> 00:30:30.835
<v Speaker 1>Right? Like at run time. Like,

00:30:31.155 --> 00:30:32.434
<v Speaker 1>you know, transfer.

00:30:35.315 --> 00:30:36.674
<v Speaker 1>Right? So

00:30:37.715 --> 00:30:39.075
<v Speaker 1>say calls

00:30:39.890 --> 00:30:41.170
<v Speaker 1>and then calls

00:30:41.890 --> 00:30:43.890
<v Speaker 1>and then I guess this thing, yeah, this

00:30:43.890 --> 00:30:45.490
<v Speaker 1>thing uses that. So anyway, so this is

00:30:45.490 --> 00:30:47.650
<v Speaker 1>what we're gonna do, right, in order to

00:30:47.650 --> 00:30:49.490
<v Speaker 1>get it to to work. Does that make

00:30:49.490 --> 00:30:51.090
<v Speaker 1>sense or any questions or

00:30:51.250 --> 00:30:52.210
<v Speaker 1>things I should clarify?

00:30:55.815 --> 00:30:56.615
<v Speaker 0>Potentially.

00:30:56.935 --> 00:30:57.654
<v Speaker 1>Okay.

00:30:58.695 --> 00:31:00.535
<v Speaker 0>No. I think I think I'm definitely following

00:31:00.535 --> 00:31:01.815
<v Speaker 0>along. Right? We're

00:31:02.135 --> 00:31:03.895
<v Speaker 0>I I we're trying to repeat it back,

00:31:03.895 --> 00:31:05.175
<v Speaker 0>and you can tell me anything that I

00:31:05.175 --> 00:31:07.095
<v Speaker 0>get wrong. Sure. And we'll see where we

00:31:07.095 --> 00:31:07.495
<v Speaker 0>are. So

00:31:08.450 --> 00:31:10.050
<v Speaker 0>let's start with the easy part here. The

00:31:10.050 --> 00:31:13.570
<v Speaker 0>service exposure is some sort of domain name,

00:31:13.570 --> 00:31:14.769
<v Speaker 0>port mapping,

00:31:14.850 --> 00:31:17.009
<v Speaker 0>ingress to our environment.

00:31:17.250 --> 00:31:21.570
<v Speaker 0>Just a thing. Right? It could be Rawkode.ishere.com,

00:31:21.570 --> 00:31:24.274
<v Speaker 0>and then comes into the service exposure. That

00:31:24.274 --> 00:31:27.794
<v Speaker 0>service exposure has a direct link or relationship

00:31:27.794 --> 00:31:29.714
<v Speaker 0>with a Node. Js operation,

00:31:30.195 --> 00:31:32.595
<v Speaker 0>and that is all bundled together for the

00:31:32.595 --> 00:31:35.234
<v Speaker 0>executor to know what to execute, I'm assuming,

00:31:35.715 --> 00:31:38.434
<v Speaker 0>where the implementation is coming from artifact storage,

00:31:38.434 --> 00:31:40.700
<v Speaker 0>which could be, let's just say, SC compatible

00:31:40.700 --> 00:31:42.139
<v Speaker 0>API or something like that.

00:31:42.700 --> 00:31:44.620
<v Speaker 0>And then the executor takes all of that

00:31:44.620 --> 00:31:47.179
<v Speaker 0>information, the service exposure, the operation, and the

00:31:47.179 --> 00:31:47.979
<v Speaker 0>artifact

00:31:48.140 --> 00:31:49.019
<v Speaker 0>executes

00:31:49.020 --> 00:31:49.820
<v Speaker 0>the thing

00:31:50.220 --> 00:31:52.455
<v Speaker 0>and then returns our response. That's kind of

00:31:52.455 --> 00:31:53.815
<v Speaker 0>my understanding at the moment. I don't know

00:31:53.815 --> 00:31:55.255
<v Speaker 0>if I got any of that wrong. Yeah.

00:31:55.735 --> 00:31:57.415
<v Speaker 1>You got most of it. The only thing

00:31:57.415 --> 00:31:59.735
<v Speaker 1>is that it's the actual operation that handles

00:31:59.735 --> 00:32:01.174
<v Speaker 1>all of that negotiation

00:32:01.415 --> 00:32:02.054
<v Speaker 1>stuff,

00:32:03.415 --> 00:32:05.975
<v Speaker 1>and the executor is just dumb. Right? It

00:32:05.975 --> 00:32:07.174
<v Speaker 1>literally just takes a command.

00:32:08.180 --> 00:32:10.179
<v Speaker 1>So it's a it's a pretty stupid service.

00:32:10.900 --> 00:32:12.500
<v Speaker 1>I'll I'll show you I'll show you its

00:32:12.500 --> 00:32:13.299
<v Speaker 1>implementation.

00:32:14.100 --> 00:32:15.860
<v Speaker 1>But yeah. So that's that's the idea. Right?

00:32:15.860 --> 00:32:18.020
<v Speaker 1>I think you got it. Is Well, let

00:32:18.020 --> 00:32:19.220
<v Speaker 0>me ask you a couple more questions then.

00:32:19.220 --> 00:32:21.380
<v Speaker 1>Of course. Because, obviously, right now, are watching.

00:32:21.860 --> 00:32:22.660
<v Speaker 0>They get a

00:32:23.515 --> 00:32:26.394
<v Speaker 0>pretty deep insight into how Guidepad works.

00:32:27.595 --> 00:32:29.435
<v Speaker 0>Now we're doing this for Node. Js. You

00:32:29.435 --> 00:32:31.515
<v Speaker 0>mentioned the Python exists. But one of the

00:32:31.515 --> 00:32:34.154
<v Speaker 0>things that we have discussed before is that

00:32:34.155 --> 00:32:36.075
<v Speaker 0>Guidepad can make this work for any language.

00:32:36.030 --> 00:32:37.310
<v Speaker 0>I mean, it could be Go. It could

00:32:37.310 --> 00:32:38.830
<v Speaker 0>be Elixir. I'm assuming it could even be

00:32:38.830 --> 00:32:41.070
<v Speaker 0>a bash shell script. It's not really that

00:32:41.070 --> 00:32:44.190
<v Speaker 0>opinionated. If you can write an executor,

00:32:44.190 --> 00:32:47.390
<v Speaker 0>then Guidepad can do it. Right? Yep.

00:32:48.575 --> 00:32:51.135
<v Speaker 1>So, I mean And it's very small. I'll

00:32:51.135 --> 00:32:52.335
<v Speaker 1>show you the executor.

00:32:52.495 --> 00:32:53.855
<v Speaker 0>Yeah. Let's take a look. Let's go for

00:32:53.855 --> 00:32:54.335
<v Speaker 0>it.

00:32:56.095 --> 00:32:57.054
<v Speaker 1>There it is.

00:32:58.335 --> 00:32:59.375
<v Speaker 0>We only see.

00:32:59.695 --> 00:33:00.335
<v Speaker 1>Oh, no.

00:33:01.100 --> 00:33:01.980
<v Speaker 1>There you go.

00:33:03.020 --> 00:33:04.539
<v Speaker 1>I did it for suspense.

00:33:04.860 --> 00:33:06.140
<v Speaker 1>Here. Here it is.

00:33:09.100 --> 00:33:09.820
<v Speaker 0>Alright.

00:33:10.540 --> 00:33:11.260
<v Speaker 0>So

00:33:11.660 --> 00:33:13.980
<v Speaker 0>there's an attribute called service type. There's a

00:33:13.980 --> 00:33:14.700
<v Speaker 0>deep copy.

00:33:16.095 --> 00:33:17.374
<v Speaker 0>Where does it execute?

00:33:18.495 --> 00:33:20.414
<v Speaker 1>Yeah. That's a good question.

00:33:20.975 --> 00:33:21.614
<v Speaker 1>So

00:33:22.255 --> 00:33:25.615
<v Speaker 1>remember we have this operation. Right? Yes. Like,

00:33:25.615 --> 00:33:26.975
<v Speaker 1>this is the thing that actually does the

00:33:26.975 --> 00:33:27.375
<v Speaker 1>operating.

00:33:28.110 --> 00:33:29.870
<v Speaker 1>The service is just so you can have

00:33:29.870 --> 00:33:32.990
<v Speaker 1>something deployed that can handle the operation request.

00:33:33.070 --> 00:33:34.910
<v Speaker 1>Right? So that's why it's so small, is

00:33:34.910 --> 00:33:36.510
<v Speaker 1>it's just like, I need to have a

00:33:36.510 --> 00:33:38.510
<v Speaker 1>service that I can basically attach an an

00:33:38.510 --> 00:33:40.750
<v Speaker 1>image to so that when I deploy it,

00:33:40.750 --> 00:33:41.790
<v Speaker 1>the right image gets deployed.

00:33:42.514 --> 00:33:44.594
<v Speaker 1>And that's what the service is doing.

00:33:45.154 --> 00:33:47.315
<v Speaker 1>The operation I'll show you the operation,

00:33:47.875 --> 00:33:49.475
<v Speaker 1>and that is not in the plug oh,

00:33:49.475 --> 00:33:51.075
<v Speaker 1>sorry. I showed you a plug in and

00:33:51.075 --> 00:33:52.434
<v Speaker 1>I didn't mention plug ins.

00:33:52.995 --> 00:33:54.914
<v Speaker 1>So let me let me

00:33:54.950 --> 00:33:57.910
<v Speaker 1>do a quick aside on the plugin and

00:33:57.910 --> 00:33:59.669
<v Speaker 1>tell you what that is. So,

00:33:59.990 --> 00:34:02.150
<v Speaker 1>you can see this is a a repository.

00:34:02.150 --> 00:34:03.990
<v Speaker 1>Right? It's called Guidepad demo.

00:34:04.630 --> 00:34:07.110
<v Speaker 1>So Guidepad has the notion of plugins, and

00:34:07.110 --> 00:34:09.715
<v Speaker 1>plugins allow you to layer functionality on top

00:34:09.715 --> 00:34:11.475
<v Speaker 1>of the core system. And then what we

00:34:11.475 --> 00:34:13.074
<v Speaker 1>typically do with plug ins is that we'll

00:34:13.074 --> 00:34:15.475
<v Speaker 1>have one per sort of, like, industry vertical

00:34:15.475 --> 00:34:16.594
<v Speaker 1>that we run into.

00:34:16.915 --> 00:34:18.835
<v Speaker 1>So for example, we we have a services

00:34:18.835 --> 00:34:20.594
<v Speaker 1>division at at the company,

00:34:20.835 --> 00:34:23.554
<v Speaker 1>and we're doing something for, an emergency transport

00:34:24.090 --> 00:34:25.770
<v Speaker 1>company. They want us to make a, like,

00:34:25.770 --> 00:34:27.370
<v Speaker 1>a ride sharing thing.

00:34:27.930 --> 00:34:29.850
<v Speaker 1>And so what we did is we wrote

00:34:29.850 --> 00:34:31.290
<v Speaker 1>a plug in for

00:34:31.370 --> 00:34:34.170
<v Speaker 1>ride sharing on top of Guidepad, and then

00:34:34.170 --> 00:34:35.930
<v Speaker 1>we wrote another plug in on top of

00:34:35.930 --> 00:34:38.890
<v Speaker 1>that that is just for this particular customer.

00:34:39.305 --> 00:34:41.545
<v Speaker 1>Right? So we've specialized Guidepad in this in

00:34:41.545 --> 00:34:44.665
<v Speaker 1>their instance for transport related concepts,

00:34:44.825 --> 00:34:46.985
<v Speaker 1>and then we made more customizations just for

00:34:46.985 --> 00:34:48.505
<v Speaker 1>that particular customer. And then if we had

00:34:48.505 --> 00:34:51.145
<v Speaker 1>other customers in that vertical, we would customize

00:34:51.145 --> 00:34:51.865
<v Speaker 1>again.

00:34:52.185 --> 00:34:54.400
<v Speaker 1>But what I'm doing here with this demo

00:34:54.480 --> 00:34:56.960
<v Speaker 1>and every plugin is a repository. Right? It's

00:34:56.960 --> 00:34:58.800
<v Speaker 1>in Python at the moment, but, you know,

00:34:58.800 --> 00:35:00.400
<v Speaker 1>we have plans for SDKs,

00:35:01.120 --> 00:35:02.560
<v Speaker 1>for all the, you know, all the sort

00:35:02.560 --> 00:35:03.600
<v Speaker 1>of popular stuff.

00:35:04.640 --> 00:35:06.240
<v Speaker 1>It's in the road map. We'll see when

00:35:06.240 --> 00:35:06.640
<v Speaker 1>we get there.

00:35:07.385 --> 00:35:08.825
<v Speaker 1>But, anyway, so, you know, this is sort

00:35:08.825 --> 00:35:10.505
<v Speaker 1>of the structure of of a plugin. Right?

00:35:10.505 --> 00:35:12.745
<v Speaker 1>You have, like, the top level sub package.

00:35:12.905 --> 00:35:14.585
<v Speaker 1>You have a little entry point here called

00:35:14.585 --> 00:35:15.785
<v Speaker 1>plugin dot py.

00:35:16.265 --> 00:35:18.105
<v Speaker 1>This is sort of where everything gets exported

00:35:18.105 --> 00:35:18.905
<v Speaker 1>from your plugin,

00:35:19.650 --> 00:35:22.770
<v Speaker 1>And then you define, like, custom operations, custom

00:35:22.770 --> 00:35:23.490
<v Speaker 1>services,

00:35:23.650 --> 00:35:24.369
<v Speaker 1>like this

00:35:24.690 --> 00:35:26.369
<v Speaker 1>demo JS executor.

00:35:26.849 --> 00:35:28.690
<v Speaker 1>You can do custom types, which we actually

00:35:28.690 --> 00:35:30.530
<v Speaker 1>haven't talked about too much, we will. I

00:35:30.530 --> 00:35:32.210
<v Speaker 1>I promise. We'll get we'll get to everything.

00:35:33.285 --> 00:35:35.125
<v Speaker 1>And then work plans, if you wanna have

00:35:35.125 --> 00:35:36.245
<v Speaker 1>custom work plans.

00:35:36.645 --> 00:35:38.885
<v Speaker 1>And then at runtime, what Guidepad does is

00:35:38.885 --> 00:35:40.724
<v Speaker 1>it reads the plug ins that are configured

00:35:40.724 --> 00:35:41.605
<v Speaker 1>in your instance,

00:35:42.964 --> 00:35:45.045
<v Speaker 1>of reconciles if there are changes in the

00:35:45.045 --> 00:35:46.565
<v Speaker 1>remote that you don't have locally. If it

00:35:46.565 --> 00:35:48.590
<v Speaker 1>does, there are changes that pulls them,

00:35:49.470 --> 00:35:51.950
<v Speaker 1>installs all the requirements, and then adds everything

00:35:51.950 --> 00:35:53.950
<v Speaker 1>in the plug in to your runtime

00:35:53.950 --> 00:35:55.630
<v Speaker 1>environment so you have access to all this

00:35:55.630 --> 00:35:56.590
<v Speaker 1>all this stuff.

00:35:57.070 --> 00:35:58.750
<v Speaker 1>And so what we're doing with the, the

00:35:58.750 --> 00:36:00.190
<v Speaker 1>demo JS executor

00:36:00.385 --> 00:36:02.465
<v Speaker 1>is we're override we're extending

00:36:02.705 --> 00:36:03.425
<v Speaker 1>a,

00:36:04.305 --> 00:36:07.425
<v Speaker 1>service that comes from Vanilla Guidepad, right, here

00:36:07.425 --> 00:36:08.865
<v Speaker 1>at the language executor,

00:36:09.505 --> 00:36:11.425
<v Speaker 1>which is that's that's the the thing that

00:36:11.425 --> 00:36:13.345
<v Speaker 1>you were talking about, just a moment ago,

00:36:13.345 --> 00:36:14.785
<v Speaker 1>David, about, you know, if we wanna do

00:36:14.785 --> 00:36:15.585
<v Speaker 1>this for another language,

00:36:16.089 --> 00:36:17.609
<v Speaker 1>right, like, do you what would you need

00:36:17.609 --> 00:36:18.170
<v Speaker 1>to do?

00:36:18.650 --> 00:36:20.730
<v Speaker 1>Well, you would, you know, extend

00:36:20.970 --> 00:36:22.170
<v Speaker 1>this executor,

00:36:22.569 --> 00:36:23.850
<v Speaker 1>and then you would also,

00:36:24.890 --> 00:36:26.809
<v Speaker 1>go into I I don't have this in

00:36:26.809 --> 00:36:28.809
<v Speaker 1>the plugin yet. It's just a normal Guidepad.

00:36:30.215 --> 00:36:32.375
<v Speaker 1>But you would go and also extend the

00:36:32.375 --> 00:36:33.175
<v Speaker 1>operation.

00:36:37.895 --> 00:36:38.535
<v Speaker 1>Sorry.

00:36:39.975 --> 00:36:41.335
<v Speaker 1>Here. So

00:36:41.975 --> 00:36:43.815
<v Speaker 1>this is the language exec operation.

00:36:44.810 --> 00:36:45.450
<v Speaker 1>Right?

00:36:45.930 --> 00:36:48.090
<v Speaker 1>And we wanna know JS

00:36:48.170 --> 00:36:51.370
<v Speaker 1>one of that of this, basically. Right? So

00:36:51.610 --> 00:36:53.210
<v Speaker 1>Yeah. Luckily, I've already written it. You can

00:36:53.210 --> 00:36:54.250
<v Speaker 1>see it's also very small.

00:36:57.035 --> 00:36:59.035
<v Speaker 0>Okay. So now it's starting to click for

00:36:59.035 --> 00:37:00.715
<v Speaker 0>me. I didn't when you showed me the

00:37:00.715 --> 00:37:02.475
<v Speaker 0>class at first, I didn't realize the state

00:37:02.475 --> 00:37:04.315
<v Speaker 0>machine was above it where it's kinda defining

00:37:04.315 --> 00:37:06.395
<v Speaker 0>that it's gonna run inside the container.

00:37:06.555 --> 00:37:07.995
<v Speaker 0>Now we can see the command is no

00:37:07.995 --> 00:37:10.395
<v Speaker 0>word followed by the file name. Whatever.

00:37:11.370 --> 00:37:13.210
<v Speaker 0>So now it's starting to come together about

00:37:13.210 --> 00:37:14.810
<v Speaker 0>how this actually works. Can we take a

00:37:14.810 --> 00:37:16.250
<v Speaker 0>look at that state plan and the the

00:37:16.250 --> 00:37:16.890
<v Speaker 0>plugin?

00:37:17.130 --> 00:37:18.090
<v Speaker 1>Oh, yeah. Sure.

00:37:18.650 --> 00:37:21.530
<v Speaker 0>The The state machine. Sorry. Yeah. That's fine.

00:37:23.210 --> 00:37:25.610
<v Speaker 1>It's it doesn't work yet. So this is

00:37:25.610 --> 00:37:27.965
<v Speaker 1>this is gonna be part of the

00:37:28.445 --> 00:37:29.645
<v Speaker 1>maybe the advanced

00:37:29.725 --> 00:37:32.445
<v Speaker 1>session after this one, is getting this to

00:37:32.445 --> 00:37:33.965
<v Speaker 1>work because I thought This isn't the advanced

00:37:33.965 --> 00:37:35.965
<v Speaker 0>one because my brain is already fried. Come

00:37:35.965 --> 00:37:37.725
<v Speaker 0>on. Oh, no. Oh, no. I've I need

00:37:37.725 --> 00:37:38.205
<v Speaker 1>to slow down.

00:37:40.350 --> 00:37:42.670
<v Speaker 1>This is supposed to be yeah. This is

00:37:42.670 --> 00:37:45.550
<v Speaker 1>supposed to be like Guidepad, maybe maybe 102.

00:37:46.190 --> 00:37:49.070
<v Speaker 1>I I didn't realize I was giving, 602.

00:37:49.390 --> 00:37:51.950
<v Speaker 0>So I can I can maybe

00:37:52.430 --> 00:37:54.190
<v Speaker 1>tone it down a couple notches?

00:37:54.190 --> 00:37:54.750
<v Speaker 1>But anyway,

00:37:55.685 --> 00:37:57.045
<v Speaker 1>yeah. So this is this is the state

00:37:57.045 --> 00:37:58.965
<v Speaker 1>machine that that I wanna use to eventually

00:37:58.965 --> 00:38:00.565
<v Speaker 1>manage the executor.

00:38:00.565 --> 00:38:02.245
<v Speaker 1>Right? Because, like, if you think about

00:38:03.205 --> 00:38:04.005
<v Speaker 1>Lambda,

00:38:04.325 --> 00:38:06.645
<v Speaker 1>when you run a Lambda function, you don't

00:38:06.645 --> 00:38:08.085
<v Speaker 1>have to tell Lambda, like, hey. I'm about

00:38:08.085 --> 00:38:09.765
<v Speaker 1>to run my function. I also have to

00:38:09.765 --> 00:38:11.045
<v Speaker 1>go manually, like, deploy,

00:38:11.680 --> 00:38:14.080
<v Speaker 1>you know, the runtime for that function is

00:38:14.080 --> 00:38:15.360
<v Speaker 1>going to to execute.

00:38:15.680 --> 00:38:17.280
<v Speaker 1>So we'd want the same thing in our

00:38:17.280 --> 00:38:19.360
<v Speaker 1>Guidepad replacement. Right? And how would how would

00:38:19.360 --> 00:38:20.640
<v Speaker 1>you do that in Guidepad? Well, you would

00:38:20.640 --> 00:38:21.840
<v Speaker 1>do it with a state machine.

00:38:22.080 --> 00:38:23.520
<v Speaker 1>And what that state machine would do, I've

00:38:23.520 --> 00:38:24.720
<v Speaker 1>I've sort of started to to put it

00:38:24.720 --> 00:38:26.835
<v Speaker 1>in here, but I haven't I haven't fully

00:38:26.835 --> 00:38:27.955
<v Speaker 1>flushed it out yet.

00:38:28.435 --> 00:38:31.075
<v Speaker 1>You would use Guidepad's requirements system

00:38:31.155 --> 00:38:33.155
<v Speaker 1>to say, if there is

00:38:33.795 --> 00:38:36.275
<v Speaker 1>an operation that's trying to run, but it

00:38:36.275 --> 00:38:37.795
<v Speaker 1>can't, so it's in the pending state,

00:38:38.580 --> 00:38:41.460
<v Speaker 1>I need to take this service and rebuild

00:38:41.460 --> 00:38:43.380
<v Speaker 1>it and then redeploy it.

00:38:44.420 --> 00:38:46.500
<v Speaker 1>Yep. Right? And so that's what I'm hoping

00:38:46.500 --> 00:38:48.420
<v Speaker 1>to encode here in the state machine,

00:38:48.980 --> 00:38:50.260
<v Speaker 1>for each of these. So I have the

00:38:50.260 --> 00:38:52.340
<v Speaker 1>transitions built up. Right? So I I have

00:38:52.340 --> 00:38:55.425
<v Speaker 1>a a transition from not deployed to built.

00:38:55.585 --> 00:38:57.585
<v Speaker 1>Right? So this thing doesn't exist anywhere yet,

00:38:57.585 --> 00:38:58.945
<v Speaker 1>but you need to go build it.

00:38:59.424 --> 00:39:02.065
<v Speaker 1>And then the next thing is, oh, I

00:39:02.065 --> 00:39:03.505
<v Speaker 1>wanna be able to go from deployed to

00:39:03.505 --> 00:39:05.505
<v Speaker 1>not deployed. So after

00:39:05.170 --> 00:39:07.090
<v Speaker 1>maybe some cool down period, no one's used

00:39:07.090 --> 00:39:09.650
<v Speaker 1>the operation in a while, I'm gonna undeploy

00:39:09.890 --> 00:39:12.050
<v Speaker 1>the service to free up resources in my

00:39:12.050 --> 00:39:12.690
<v Speaker 1>cluster.

00:39:13.570 --> 00:39:15.410
<v Speaker 1>And then this one here is,

00:39:15.730 --> 00:39:18.130
<v Speaker 1>I'm gonna take this from deployed to built.

00:39:18.130 --> 00:39:20.725
<v Speaker 1>So this is the thing's already out there.

00:39:21.285 --> 00:39:25.045
<v Speaker 1>Someone has updated the configuration for my executor

00:39:25.045 --> 00:39:27.045
<v Speaker 1>to require additional packages.

00:39:28.165 --> 00:39:30.805
<v Speaker 1>So, you know, I've I've updated my handler.

00:39:30.805 --> 00:39:33.400
<v Speaker 1>I now use x y z package in

00:39:33.400 --> 00:39:35.320
<v Speaker 1>my little node script or whatever.

00:39:36.200 --> 00:39:37.800
<v Speaker 1>The thing's already out there. I'm gonna rebuild

00:39:37.800 --> 00:39:39.480
<v Speaker 1>it to include that package, and then I'm

00:39:39.480 --> 00:39:41.160
<v Speaker 1>gonna redeploy it right after.

00:39:41.800 --> 00:39:42.200
<v Speaker 1>And

00:39:42.760 --> 00:39:44.600
<v Speaker 1>then this one just goes from built to

00:39:44.600 --> 00:39:46.680
<v Speaker 1>deployed. So this is like, build's finished. I'm

00:39:46.680 --> 00:39:47.320
<v Speaker 1>gonna go deploy it.

00:39:48.615 --> 00:39:49.255
<v Speaker 1>Yeah.

00:39:49.895 --> 00:39:51.575
<v Speaker 1>But they're not wired up to all the

00:39:51.575 --> 00:39:53.575
<v Speaker 1>requirements yet, I can't actually use it.

00:39:54.455 --> 00:39:55.975
<v Speaker 1>But it at least it sort of lays

00:39:55.975 --> 00:39:56.935
<v Speaker 1>out conceptually,

00:39:57.895 --> 00:39:59.335
<v Speaker 1>this is you know? And if and if

00:39:59.335 --> 00:40:01.095
<v Speaker 1>the UI was working, you'd be able to

00:40:01.095 --> 00:40:03.460
<v Speaker 1>see these states, like, logically, sort of, like,

00:40:03.460 --> 00:40:05.540
<v Speaker 1>mapped out. Right? Like, these are all the

00:40:05.540 --> 00:40:08.180
<v Speaker 1>valid states for this type of service. This

00:40:08.180 --> 00:40:09.700
<v Speaker 1>is how it moves between them.

00:40:10.180 --> 00:40:12.420
<v Speaker 1>All that's missing are the conditions

00:40:12.500 --> 00:40:13.860
<v Speaker 1>for the transitions.

00:40:15.265 --> 00:40:16.465
<v Speaker 1>So Alright.

00:40:16.625 --> 00:40:17.345
<v Speaker 1>Okay.

00:40:18.065 --> 00:40:19.185
<v Speaker 1>More questions?

00:40:19.585 --> 00:40:21.345
<v Speaker 1>Here's the state plan. I'm fully up to

00:40:21.345 --> 00:40:23.665
<v Speaker 0>speed there. So Okay. Okay. Here's the state

00:40:23.665 --> 00:40:25.744
<v Speaker 0>plan. Right? So this is the actual commands

00:40:25.744 --> 00:40:27.585
<v Speaker 0>that happen as we move from phase to

00:40:27.585 --> 00:40:29.860
<v Speaker 0>phase. Right? Yeah. Yeah. So this is it

00:40:29.860 --> 00:40:31.700
<v Speaker 1>uses all the default ones, so that's what's

00:40:31.700 --> 00:40:33.300
<v Speaker 1>happening down here. I'm just pulling in the

00:40:33.300 --> 00:40:34.420
<v Speaker 1>defaults from,

00:40:34.660 --> 00:40:37.780
<v Speaker 1>you know, Vanilla Guidepad. I'm customizing the build

00:40:38.900 --> 00:40:40.420
<v Speaker 1>state plan here,

00:40:41.065 --> 00:40:41.945
<v Speaker 1>And

00:40:41.945 --> 00:40:43.465
<v Speaker 1>I'm adding build commands.

00:40:44.025 --> 00:40:46.585
<v Speaker 1>And you could put them in line. Like,

00:40:46.585 --> 00:40:47.785
<v Speaker 1>you put you could just put them in

00:40:47.785 --> 00:40:48.985
<v Speaker 1>the same module.

00:40:49.065 --> 00:40:50.665
<v Speaker 1>Right? But in order to do that, have

00:40:50.665 --> 00:40:51.705
<v Speaker 1>to kinda do something like this.

00:40:56.380 --> 00:40:57.740
<v Speaker 1>You know? And then

00:40:59.100 --> 00:41:00.620
<v Speaker 1>I don't really like doing that.

00:41:01.100 --> 00:41:02.619
<v Speaker 1>So what I tend to do is put

00:41:02.619 --> 00:41:04.540
<v Speaker 1>them in a file sort of next to

00:41:04.540 --> 00:41:05.740
<v Speaker 1>the service.

00:41:07.580 --> 00:41:09.100
<v Speaker 0>Yeah. That means And then

00:41:09.420 --> 00:41:10.380
<v Speaker 0>validate. Yeah. Yeah. Exactly.

00:41:11.795 --> 00:41:13.235
<v Speaker 1>So we can look at that.

00:41:16.515 --> 00:41:17.235
<v Speaker 1>Is this?

00:41:18.035 --> 00:41:20.275
<v Speaker 1>Of course, I've broken the syntax highlighting. I

00:41:20.275 --> 00:41:21.635
<v Speaker 1>did that after I wrote it the first

00:41:21.635 --> 00:41:22.115
<v Speaker 1>time.

00:41:22.755 --> 00:41:23.235
<v Speaker 1>But

00:41:23.875 --> 00:41:26.195
<v Speaker 1>I'm using templating, right, to only do this

00:41:26.195 --> 00:41:27.980
<v Speaker 1>when they're when certain things are defined. So

00:41:27.980 --> 00:41:29.580
<v Speaker 1>this uses like Guidepads.

00:41:29.740 --> 00:41:31.420
<v Speaker 1>It's using Ginger two under the hood, which

00:41:31.420 --> 00:41:33.180
<v Speaker 1>sort of everybody does if you're doing string

00:41:33.180 --> 00:41:33.980
<v Speaker 1>interpolation.

00:41:33.980 --> 00:41:34.540
<v Speaker 1>Right?

00:41:35.339 --> 00:41:37.020
<v Speaker 1>Maybe we'll write our own one day if

00:41:37.020 --> 00:41:40.135
<v Speaker 1>we ever ever make it big. But anyway,

00:41:40.375 --> 00:41:42.855
<v Speaker 1>so we just have custom block opens. Right?

00:41:42.855 --> 00:41:44.934
<v Speaker 1>So that if you're writing something in Ansible

00:41:44.934 --> 00:41:47.414
<v Speaker 1>or something else uses Jinja, there's no conflicts

00:41:47.414 --> 00:41:47.974
<v Speaker 1>there.

00:41:48.375 --> 00:41:49.974
<v Speaker 1>Because if you use the standard ones, it'll

00:41:49.974 --> 00:41:52.135
<v Speaker 1>just replace all your stuff or make you

00:41:52.135 --> 00:41:53.390
<v Speaker 1>write, you know,

00:41:54.030 --> 00:41:55.070
<v Speaker 1>curly bracket,

00:41:55.230 --> 00:41:58.190
<v Speaker 1>percent raw and then that. And then that's

00:41:58.190 --> 00:42:00.270
<v Speaker 1>also very annoying, so didn't, you know, didn't

00:42:00.270 --> 00:42:01.790
<v Speaker 1>wanna have to do that. But, anyway, what

00:42:01.790 --> 00:42:03.070
<v Speaker 1>this is doing is,

00:42:03.630 --> 00:42:06.510
<v Speaker 1>if there are any system package requirements defined

00:42:06.510 --> 00:42:08.805
<v Speaker 1>on your service or anywhere in the context

00:42:08.805 --> 00:42:11.205
<v Speaker 1>that the service is execute like, is in

00:42:11.205 --> 00:42:12.725
<v Speaker 1>when it enters that state,

00:42:13.125 --> 00:42:16.565
<v Speaker 1>it will install them here, which uses APK,

00:42:16.885 --> 00:42:19.045
<v Speaker 1>because we're using an output the node alpine,

00:42:19.525 --> 00:42:21.205
<v Speaker 1>image as the the starting point.

00:42:22.440 --> 00:42:23.640
<v Speaker 1>And then down here,

00:42:24.119 --> 00:42:25.319
<v Speaker 1>it installs

00:42:25.319 --> 00:42:26.200
<v Speaker 1>basically,

00:42:27.000 --> 00:42:28.600
<v Speaker 1>if you have NPM requirements.

00:42:29.079 --> 00:42:30.200
<v Speaker 0>Yep. Yeah.

00:42:30.680 --> 00:42:31.240
<v Speaker 1>So,

00:42:32.359 --> 00:42:33.000
<v Speaker 1>yeah.

00:42:33.319 --> 00:42:34.440
<v Speaker 1>That's that's what that does.

00:42:35.214 --> 00:42:37.295
<v Speaker 1>Oh, sorry. Yeah. System package. So, yeah. So

00:42:37.295 --> 00:42:39.375
<v Speaker 1>so APK for system packages and then NPM

00:42:39.375 --> 00:42:41.135
<v Speaker 1>for any node modules that you need.

00:42:41.615 --> 00:42:42.974
<v Speaker 1>And we can we can add some of

00:42:42.974 --> 00:42:43.935
<v Speaker 1>these and rebuild

00:42:44.095 --> 00:42:46.494
<v Speaker 1>when we feel like it. But let's,

00:42:47.310 --> 00:42:49.230
<v Speaker 1>yeah, let's not do that just yet. Sorry.

00:42:49.230 --> 00:42:50.830
<v Speaker 1>I I was just peeking at the time.

00:42:51.790 --> 00:42:54.590
<v Speaker 1>Okay. So more questions or are we we

00:42:54.590 --> 00:42:56.270
<v Speaker 1>good to start doing things

00:42:56.510 --> 00:42:57.630
<v Speaker 1>in the terminal?

00:42:57.870 --> 00:42:59.790
<v Speaker 0>Yeah. Let's go for it. Okay.

00:43:00.510 --> 00:43:01.230
<v Speaker 1>So

00:43:01.710 --> 00:43:03.855
<v Speaker 1>sorry. Gotta stretch. I

00:43:06.015 --> 00:43:08.175
<v Speaker 1>always debate, like, whether I want to do

00:43:08.175 --> 00:43:09.055
<v Speaker 1>this stuff

00:43:09.775 --> 00:43:10.495
<v Speaker 1>in,

00:43:11.295 --> 00:43:13.215
<v Speaker 1>you know, in a notebook. I like working

00:43:13.215 --> 00:43:14.335
<v Speaker 1>in notebooks a lot,

00:43:14.655 --> 00:43:16.415
<v Speaker 1>Jupyter notebooks, just because

00:43:16.839 --> 00:43:18.119
<v Speaker 1>it's sort of repeatable.

00:43:18.359 --> 00:43:20.119
<v Speaker 1>I can just kill the kernel and, like,

00:43:20.119 --> 00:43:21.160
<v Speaker 1>rerun everything.

00:43:21.720 --> 00:43:23.559
<v Speaker 1>If I'm in IPython and I'm making a

00:43:23.559 --> 00:43:24.360
<v Speaker 1>bunch of changes,

00:43:25.400 --> 00:43:27.079
<v Speaker 1>it's a little harder to, like, do it.

00:43:27.079 --> 00:43:28.680
<v Speaker 1>So I'll probably do it in here today.

00:43:29.480 --> 00:43:30.120
<v Speaker 1>So

00:43:30.335 --> 00:43:31.775
<v Speaker 1>okay. Let's let's go back to, like, our

00:43:31.775 --> 00:43:33.214
<v Speaker 1>diagram real quick and just think through, like,

00:43:33.214 --> 00:43:34.494
<v Speaker 1>what we what we need. So we need

00:43:34.494 --> 00:43:35.855
<v Speaker 1>a Node. Js operation.

00:43:36.974 --> 00:43:37.694
<v Speaker 1>We need,

00:43:38.015 --> 00:43:40.894
<v Speaker 1>this implementation artifact attached to it. We need

00:43:40.894 --> 00:43:42.255
<v Speaker 1>the Node. Js language executor,

00:43:43.040 --> 00:43:44.960
<v Speaker 1>and we need the the service exposure.

00:43:45.359 --> 00:43:47.119
<v Speaker 1>So I've shown you the class for the

00:43:47.119 --> 00:43:49.680
<v Speaker 1>Node. Js language executor, but I haven't shown

00:43:49.680 --> 00:43:52.240
<v Speaker 1>you the, the instance of it yet. And

00:43:52.240 --> 00:43:53.680
<v Speaker 1>I actually made that already. I know that's

00:43:53.680 --> 00:43:54.560
<v Speaker 1>kinda kinda cheating,

00:43:55.685 --> 00:43:58.165
<v Speaker 1>but I did. So I apologize,

00:43:58.245 --> 00:43:59.365
<v Speaker 1>for that. But,

00:43:59.685 --> 00:44:00.965
<v Speaker 1>here, let's take a peek at your in

00:44:01.125 --> 00:44:03.045
<v Speaker 1>let's let's go under the hood, because I

00:44:03.045 --> 00:44:04.645
<v Speaker 1>showed you all, like, the deployed stuff, like,

00:44:04.645 --> 00:44:07.365
<v Speaker 1>in the, user interface, but, like, let's actually

00:44:07.365 --> 00:44:08.485
<v Speaker 1>use kubectl,

00:44:08.965 --> 00:44:11.450
<v Speaker 1>to, like, look at the stuff, like, in,

00:44:11.450 --> 00:44:13.450
<v Speaker 1>you know, in your in your instance.

00:44:14.010 --> 00:44:15.930
<v Speaker 1>So you probably don't remember this, but in

00:44:15.930 --> 00:44:18.010
<v Speaker 1>the user interface, the actually,

00:44:18.410 --> 00:44:19.530
<v Speaker 1>I'll just go over there and I'll show

00:44:19.530 --> 00:44:20.010
<v Speaker 1>you.

00:44:21.530 --> 00:44:22.250
<v Speaker 1>Sorry.

00:44:22.809 --> 00:44:24.089
<v Speaker 1>So if you go back to the environment,

00:44:30.184 --> 00:44:31.545
<v Speaker 1>we go to the settings.

00:44:33.865 --> 00:44:36.265
<v Speaker 1>So this just so your audience knows, like,

00:44:36.265 --> 00:44:37.705
<v Speaker 1>this form is auto generated.

00:44:38.265 --> 00:44:39.630
<v Speaker 1>So what it does is it reads the

00:44:39.630 --> 00:44:42.269
<v Speaker 1>type definition for whatever type of thing you're

00:44:42.269 --> 00:44:43.950
<v Speaker 1>looking at and then generates

00:44:43.950 --> 00:44:46.829
<v Speaker 1>the the wizard, basically, off that type definition.

00:44:46.829 --> 00:44:48.109
<v Speaker 1>We haven't talked about types at all, but

00:44:48.109 --> 00:44:49.310
<v Speaker 1>but types are our

00:44:49.710 --> 00:44:52.829
<v Speaker 1>language agnostic database representation for for schemas.

00:44:53.655 --> 00:44:55.575
<v Speaker 1>And so everything that we've looked at so

00:44:55.575 --> 00:44:57.095
<v Speaker 1>far is a type at the end of

00:44:57.095 --> 00:44:58.935
<v Speaker 1>the day, and that's how it's stored in

00:44:58.935 --> 00:45:00.855
<v Speaker 1>a database. We have a type for environment.

00:45:00.855 --> 00:45:02.295
<v Speaker 1>Right? And we have a type for Kubernetes

00:45:02.295 --> 00:45:04.215
<v Speaker 1>environment, which is what this actual type of

00:45:04.215 --> 00:45:05.255
<v Speaker 1>environment is.

00:45:06.215 --> 00:45:07.619
<v Speaker 1>So we go through, there's sort of like

00:45:07.619 --> 00:45:09.780
<v Speaker 1>the vanilla, like, stuff, but then you get

00:45:09.780 --> 00:45:11.140
<v Speaker 1>to here. Right? And you can see, like,

00:45:11.140 --> 00:45:12.740
<v Speaker 1>oh, there's a Rawkode namespace.

00:45:13.300 --> 00:45:14.820
<v Speaker 1>And that means that everything

00:45:15.059 --> 00:45:17.619
<v Speaker 1>and this is only on Kubernetes environment types.

00:45:17.619 --> 00:45:19.140
<v Speaker 1>Right? Like, other environments don't care about a

00:45:19.140 --> 00:45:20.715
<v Speaker 1>namespace, so why would they why would they

00:45:20.715 --> 00:45:22.155
<v Speaker 1>have that? And

00:45:22.635 --> 00:45:24.715
<v Speaker 1>so this namespace

00:45:25.115 --> 00:45:27.515
<v Speaker 1>is actually in the cluster. Right? So if

00:45:27.515 --> 00:45:28.075
<v Speaker 1>I do k a

00:45:29.115 --> 00:45:30.875
<v Speaker 1>this too small? Should I increase this or

00:45:30.875 --> 00:45:32.795
<v Speaker 1>is this looking good? No. I think we're

00:45:32.795 --> 00:45:33.915
<v Speaker 0>okay. Okay. Great.

00:45:36.730 --> 00:45:38.010
<v Speaker 1>Let's get all the pods.

00:45:39.050 --> 00:45:39.930
<v Speaker 1>Here they are.

00:45:40.890 --> 00:45:42.730
<v Speaker 1>You can see this is from my,

00:45:43.290 --> 00:45:45.130
<v Speaker 1>setup last night. You can see how old

00:45:45.130 --> 00:45:45.770
<v Speaker 1>this

00:45:46.170 --> 00:45:48.090
<v Speaker 1>you can see how old this, project is.

00:45:48.090 --> 00:45:48.810
<v Speaker 1>It's about a day old.

00:45:49.644 --> 00:45:51.244
<v Speaker 1>That's when the stuff was that's when the

00:45:51.244 --> 00:45:52.285
<v Speaker 1>stuff was put in here.

00:45:53.644 --> 00:45:55.164
<v Speaker 1>Anyway, so these are all the things that

00:45:55.164 --> 00:45:57.244
<v Speaker 1>have been deployed. Right? Like Guidepad is managing

00:45:57.244 --> 00:45:58.365
<v Speaker 1>all of these bots,

00:45:58.684 --> 00:45:59.244
<v Speaker 1>essentially,

00:45:59.565 --> 00:46:01.484
<v Speaker 1>as part of the the deployments.

00:46:02.125 --> 00:46:03.404
<v Speaker 1>And we actually already have

00:46:05.030 --> 00:46:07.030
<v Speaker 1>a little Node. Js executor

00:46:07.270 --> 00:46:10.070
<v Speaker 1>in here. Yep. We'll come back to that.

00:46:10.230 --> 00:46:12.070
<v Speaker 1>But I just wanted to sort of show

00:46:12.070 --> 00:46:14.710
<v Speaker 1>you, like, here's some stuff. It exists.

00:46:15.829 --> 00:46:17.829
<v Speaker 1>And now we'll go back into that notebook

00:46:17.829 --> 00:46:19.109
<v Speaker 1>I was looking at, and I'll show you

00:46:19.109 --> 00:46:21.155
<v Speaker 1>the data record for the

00:46:24.115 --> 00:46:25.475
<v Speaker 1>for that service.

00:46:30.435 --> 00:46:31.875
<v Speaker 1>And, you know, this is sort of the

00:46:31.875 --> 00:46:33.875
<v Speaker 1>standard way that, like, we interface with Guidepad,

00:46:33.875 --> 00:46:35.715
<v Speaker 1>like, in an in in an interactive session.

00:46:36.650 --> 00:46:39.210
<v Speaker 1>You typically don't have to do this. I'm

00:46:39.210 --> 00:46:41.210
<v Speaker 1>just doing this because I might make changes

00:46:41.210 --> 00:46:42.090
<v Speaker 1>to my local

00:46:42.330 --> 00:46:43.770
<v Speaker 1>code without I don't wanna have to push

00:46:43.770 --> 00:46:45.690
<v Speaker 1>it up every time, basically, so I'm sort

00:46:45.690 --> 00:46:46.490
<v Speaker 1>of cheating,

00:46:46.890 --> 00:46:48.570
<v Speaker 1>and just setting my Python path.

00:46:48.810 --> 00:46:49.770
<v Speaker 1>If I remove this,

00:46:50.964 --> 00:46:53.685
<v Speaker 1>when this happens, Guidepad will pull down that

00:46:53.685 --> 00:46:56.085
<v Speaker 1>repository for the demo plug in and put

00:46:56.085 --> 00:46:57.605
<v Speaker 1>it on my Python path for me. So

00:46:57.605 --> 00:46:59.525
<v Speaker 1>I don't have to do that. I'm just

00:46:59.685 --> 00:47:00.725
<v Speaker 1>I just want to.

00:47:01.285 --> 00:47:03.605
<v Speaker 1>So I'll do that. It's gonna initialize Guidepad,

00:47:03.605 --> 00:47:04.645
<v Speaker 1>and we'll use it for the rest of

00:47:04.645 --> 00:47:04.885
<v Speaker 1>the

00:47:05.589 --> 00:47:06.710
<v Speaker 1>session here.

00:47:08.790 --> 00:47:10.790
<v Speaker 1>It's starting a kernel, so it's taking an

00:47:10.790 --> 00:47:11.670
<v Speaker 1>extra second.

00:47:13.349 --> 00:47:15.030
<v Speaker 1>Okay. Cool. So I guess we can walk

00:47:15.030 --> 00:47:16.950
<v Speaker 1>through what what what just happens because this

00:47:16.950 --> 00:47:19.815
<v Speaker 1>is probably your audience's first time seeing it.

00:47:20.615 --> 00:47:23.415
<v Speaker 1>So we load the connection details from a

00:47:23.415 --> 00:47:24.455
<v Speaker 1>local environment.

00:47:24.775 --> 00:47:27.175
<v Speaker 1>Guidepad can be configured either with a direct

00:47:27.175 --> 00:47:30.549
<v Speaker 1>connection to the primary data store that I'm

00:47:30.549 --> 00:47:32.710
<v Speaker 1>using and that's like super admin access.

00:47:33.109 --> 00:47:36.230
<v Speaker 1>Or you can use it in, API proxy

00:47:36.230 --> 00:47:37.670
<v Speaker 1>mode where you just have and this is

00:47:37.670 --> 00:47:38.630
<v Speaker 1>what we do for,

00:47:39.109 --> 00:47:41.349
<v Speaker 1>like, end users at at our customers. Like,

00:47:41.349 --> 00:47:42.950
<v Speaker 1>you just give them their username and password

00:47:42.950 --> 00:47:45.270
<v Speaker 1>and they you can actually use Guidepad

00:47:45.585 --> 00:47:48.305
<v Speaker 1>through our API. So it translates all of

00:47:48.305 --> 00:47:51.265
<v Speaker 1>the data store requests into API requests,

00:47:51.905 --> 00:47:54.224
<v Speaker 1>and then uses the RBAC, like, for that

00:47:54.224 --> 00:47:56.465
<v Speaker 1>user to sort of sandbox all their permissions

00:47:56.465 --> 00:47:56.785
<v Speaker 1>and stuff.

00:47:57.600 --> 00:47:59.920
<v Speaker 1>But since I'm me, I don't have to

00:47:59.920 --> 00:48:01.920
<v Speaker 1>do that, and I can just connect directly.

00:48:02.160 --> 00:48:03.760
<v Speaker 1>So that's what I did. So, let's take

00:48:03.760 --> 00:48:04.640
<v Speaker 1>a look at that

00:48:05.760 --> 00:48:07.520
<v Speaker 1>Node. Js executor thing,

00:48:07.840 --> 00:48:10.480
<v Speaker 1>that we had just talked about. So I'm

00:48:10.480 --> 00:48:11.760
<v Speaker 1>gonna import the type registry.

00:48:14.515 --> 00:48:17.075
<v Speaker 1>Types dot registry. Import the type registry.

00:48:17.475 --> 00:48:20.675
<v Speaker 1>So, the type registry is an object inside

00:48:20.675 --> 00:48:22.595
<v Speaker 1>Guidepad that knows everything about all the types

00:48:22.595 --> 00:48:23.955
<v Speaker 1>in your instance.

00:48:24.355 --> 00:48:26.035
<v Speaker 1>And the nice thing about the type registry

00:48:26.035 --> 00:48:27.955
<v Speaker 1>is you can ask for any type you

00:48:27.955 --> 00:48:29.579
<v Speaker 1>want from it.

00:48:32.539 --> 00:48:33.660
<v Speaker 1>So you can just give it the type

00:48:33.660 --> 00:48:35.420
<v Speaker 1>name or the class name.

00:48:36.140 --> 00:48:37.500
<v Speaker 1>I'll just do the type name to show

00:48:37.500 --> 00:48:39.259
<v Speaker 1>that you can do that. And then if

00:48:39.259 --> 00:48:40.540
<v Speaker 1>I were to look at the

00:48:41.420 --> 00:48:42.539
<v Speaker 1>variables that are set up,

00:48:43.625 --> 00:48:46.025
<v Speaker 1>you can see here that this service that

00:48:46.025 --> 00:48:49.065
<v Speaker 1>I just assigned is a fully fledged class

00:48:49.785 --> 00:48:52.345
<v Speaker 1>that was generated by Guidepad from the definition

00:48:52.345 --> 00:48:54.025
<v Speaker 1>of what it means to be a service.

00:48:56.810 --> 00:48:59.130
<v Speaker 0>Like a service container from OOP.

00:48:59.930 --> 00:49:00.570
<v Speaker 1>Yes.

00:49:01.290 --> 00:49:01.930
<v Speaker 1>Yep.

00:49:02.890 --> 00:49:04.330
<v Speaker 1>Yep. So here we go. We get all

00:49:04.330 --> 00:49:06.170
<v Speaker 1>the attributes that are defined on a service,

00:49:07.850 --> 00:49:09.130
<v Speaker 1>all that good stuff. But the other thing

00:49:09.130 --> 00:49:10.865
<v Speaker 1>you can do with a type once you

00:49:10.865 --> 00:49:12.545
<v Speaker 1>have it, right, is you can do CRUD

00:49:12.545 --> 00:49:13.345
<v Speaker 1>operations

00:49:13.345 --> 00:49:14.865
<v Speaker 1>on it. So I wanna find the Node

00:49:14.865 --> 00:49:17.105
<v Speaker 1>JS service that I made earlier so that

00:49:17.105 --> 00:49:18.305
<v Speaker 1>we can play with it.

00:49:18.704 --> 00:49:19.825
<v Speaker 1>So what I'm gonna do is I'm gonna

00:49:19.825 --> 00:49:22.785
<v Speaker 1>say Node JS is service.listsingle.

00:49:24.069 --> 00:49:25.829
<v Speaker 1>And I don't remember what the name of

00:49:25.829 --> 00:49:27.270
<v Speaker 1>that thing is. Actually, let me just get

00:49:27.270 --> 00:49:28.630
<v Speaker 1>all of them and then

00:49:29.589 --> 00:49:31.109
<v Speaker 1>I'll just find it in the list because

00:49:31.109 --> 00:49:33.270
<v Speaker 1>I don't I'm getting I turned 40 this

00:49:33.270 --> 00:49:34.070
<v Speaker 1>year, so

00:49:34.950 --> 00:49:36.550
<v Speaker 1>short term memory is no longer one of

00:49:36.550 --> 00:49:38.150
<v Speaker 1>my my strong my strong suits.

00:49:39.425 --> 00:49:40.705
<v Speaker 0>Yeah. I hear that.

00:49:42.705 --> 00:49:44.305
<v Speaker 1>So I'm just gonna grab them all, and

00:49:44.305 --> 00:49:45.585
<v Speaker 1>then we can take a peek and figure

00:49:45.585 --> 00:49:46.945
<v Speaker 1>out which one I actually want.

00:49:48.945 --> 00:49:50.145
<v Speaker 1>Why

00:49:50.785 --> 00:49:51.985
<v Speaker 1>don't you why don't you refresh?

00:49:52.670 --> 00:49:53.870
<v Speaker 1>Oh, you know what? It's because I'm in

00:49:53.870 --> 00:49:56.030
<v Speaker 1>the wrong one. No. I'm not.

00:49:56.990 --> 00:49:59.550
<v Speaker 1>Oh, there it is. Yep. Great.

00:50:00.590 --> 00:50:02.350
<v Speaker 1>I guess it just took a second. So,

00:50:02.990 --> 00:50:04.350
<v Speaker 1>let the the the

00:50:05.630 --> 00:50:06.510
<v Speaker 1>let's see here.

00:50:07.785 --> 00:50:08.505
<v Speaker 1>You.

00:50:08.585 --> 00:50:09.225
<v Speaker 1>You.

00:50:10.185 --> 00:50:11.065
<v Speaker 1>Perfect.

00:50:11.785 --> 00:50:13.464
<v Speaker 1>It's not coming back as the right service,

00:50:13.464 --> 00:50:15.065
<v Speaker 1>though, so that's a little troubling. Right? Like,

00:50:15.065 --> 00:50:16.985
<v Speaker 1>it should be coming back as the,

00:50:19.145 --> 00:50:21.369
<v Speaker 1>as, like, the class. Right? So you can

00:50:21.369 --> 00:50:23.370
<v Speaker 1>see the classes here, like, next to it.

00:50:23.690 --> 00:50:24.330
<v Speaker 1>Right?

00:50:24.490 --> 00:50:26.090
<v Speaker 1>Yep. And it should be coming back as

00:50:26.090 --> 00:50:27.210
<v Speaker 1>a Node JS,

00:50:27.530 --> 00:50:29.610
<v Speaker 1>like, executor service, but it's coming back as,

00:50:29.610 --> 00:50:31.130
<v Speaker 1>a bare service. So I need to figure

00:50:31.130 --> 00:50:32.090
<v Speaker 1>out, like, why

00:50:32.330 --> 00:50:33.530
<v Speaker 1>that is happening.

00:50:34.890 --> 00:50:36.330
<v Speaker 1>It might be

00:50:38.645 --> 00:50:40.405
<v Speaker 1>I'll just I'll just verify that.

00:50:40.965 --> 00:50:43.845
<v Speaker 1>So let's see. Node. Js is services minus

00:50:43.845 --> 00:50:44.645
<v Speaker 1>one,

00:50:45.845 --> 00:50:47.285
<v Speaker 1>and then Node. Js

00:50:49.839 --> 00:50:52.079
<v Speaker 1>Wasn't fast enough. Yeah. It's coming back as

00:50:52.079 --> 00:50:53.280
<v Speaker 1>a service. That's strange.

00:50:54.880 --> 00:50:56.640
<v Speaker 1>Well, it doesn't actually hurt us too much

00:50:56.640 --> 00:50:58.720
<v Speaker 1>as long as when we, like, do the

00:50:58.720 --> 00:51:00.240
<v Speaker 1>deployment and stuff, it's, like,

00:51:00.960 --> 00:51:02.079
<v Speaker 1>coming back to the right type.

00:51:03.734 --> 00:51:05.335
<v Speaker 1>But it's strange you know what? What usually

00:51:05.335 --> 00:51:07.815
<v Speaker 1>happens when this occurs is that Guidepad doesn't

00:51:07.815 --> 00:51:10.214
<v Speaker 1>have it doesn't know what that type of

00:51:10.214 --> 00:51:12.454
<v Speaker 1>thing is yet, and so it just returns

00:51:12.454 --> 00:51:15.255
<v Speaker 1>the default type. Right? So you can see

00:51:15.255 --> 00:51:15.734
<v Speaker 1>here,

00:51:16.295 --> 00:51:17.654
<v Speaker 1>it was able to find the

00:51:18.450 --> 00:51:20.849
<v Speaker 1>specific types for these, and so it returned

00:51:20.849 --> 00:51:23.570
<v Speaker 1>them. But, this is just a bare service.

00:51:24.130 --> 00:51:26.530
<v Speaker 1>And, you know, this one in particular,

00:51:26.930 --> 00:51:28.849
<v Speaker 1>that we're looking at now, like, can't find

00:51:28.849 --> 00:51:30.930
<v Speaker 1>the the subtype for it. So it just

00:51:30.930 --> 00:51:32.930
<v Speaker 1>returns, like, the the normal type so that

00:51:32.930 --> 00:51:34.965
<v Speaker 1>it doesn't, you know, completely throw up.

00:51:36.005 --> 00:51:38.164
<v Speaker 1>That's okay. We can we can still work

00:51:38.164 --> 00:51:39.125
<v Speaker 1>with this. So,

00:51:39.924 --> 00:51:42.005
<v Speaker 1>going back to our diagram, like, have this

00:51:42.005 --> 00:51:42.805
<v Speaker 1>service.

00:51:43.204 --> 00:51:43.765
<v Speaker 1>Right?

00:51:44.565 --> 00:51:45.525
<v Speaker 1>We have a service.

00:51:46.830 --> 00:51:48.190
<v Speaker 1>We need the operation,

00:51:48.510 --> 00:51:49.950
<v Speaker 1>and we need the implementation,

00:51:49.950 --> 00:51:52.190
<v Speaker 1>and we need a service exposure to to

00:51:52.190 --> 00:51:53.550
<v Speaker 1>point to it. So let's let's work on

00:51:53.550 --> 00:51:55.150
<v Speaker 1>those let's work on those pieces.

00:51:55.950 --> 00:51:57.790
<v Speaker 1>So let's pull in an operation.

00:51:58.510 --> 00:52:01.150
<v Speaker 1>So we said we wanna do a Node.

00:52:01.150 --> 00:52:01.790
<v Speaker 1>Js operation.

00:52:02.934 --> 00:52:04.615
<v Speaker 1>So we'll just import that real quick from

00:52:04.615 --> 00:52:07.895
<v Speaker 1>Guidepad dot operations built in language exec

00:52:08.135 --> 00:52:09.255
<v Speaker 1>Node. Js

00:52:09.655 --> 00:52:11.255
<v Speaker 1>Node. Js operation.

00:52:11.895 --> 00:52:14.775
<v Speaker 1>I could do this or I could do

00:52:18.000 --> 00:52:19.920
<v Speaker 1>I'm gonna make sure I capitalize it correctly.

00:52:24.880 --> 00:52:26.640
<v Speaker 1>As long as it's in Guidepad's

00:52:26.640 --> 00:52:28.400
<v Speaker 1>sort of like global context, it should come

00:52:28.400 --> 00:52:30.240
<v Speaker 1>back as the right thing. Yep.

00:52:30.480 --> 00:52:32.435
<v Speaker 1>Yep. We got it. There.

00:52:32.835 --> 00:52:34.355
<v Speaker 1>Oh, no. It's a string.

00:52:34.595 --> 00:52:37.635
<v Speaker 0>String. Yeah. Yeah. Boo. Okay. Here, let's fix

00:52:37.635 --> 00:52:37.955
<v Speaker 1>it.

00:52:38.675 --> 00:52:40.115
<v Speaker 1>So I think what happened is it's just

00:52:40.115 --> 00:52:41.315
<v Speaker 1>not in, the system,

00:52:42.355 --> 00:52:44.435
<v Speaker 1>like, scope. So what Guidepad does is when

00:52:44.435 --> 00:52:45.715
<v Speaker 1>it when it does the initialize,

00:52:46.140 --> 00:52:47.660
<v Speaker 1>it pulls all the types that have been

00:52:47.660 --> 00:52:49.180
<v Speaker 1>persisted to the data store and then also

00:52:49.180 --> 00:52:51.420
<v Speaker 1>it sort of merges that information with what

00:52:51.420 --> 00:52:53.099
<v Speaker 1>is defined, like, within the code.

00:52:53.660 --> 00:52:55.260
<v Speaker 1>So what that means that come came back

00:52:55.260 --> 00:52:56.700
<v Speaker 1>as a string is it's either not been

00:52:56.700 --> 00:52:59.579
<v Speaker 1>persisted into Guidepad's, like, centralized data storage

00:53:00.045 --> 00:53:02.605
<v Speaker 1>or it's not imported in the system level

00:53:02.605 --> 00:53:04.365
<v Speaker 1>packages the Guidepad maintains

00:53:04.444 --> 00:53:06.605
<v Speaker 1>to, like, make sure everything's in scope, like,

00:53:06.605 --> 00:53:08.125
<v Speaker 1>when when it starts up. So let let's

00:53:08.125 --> 00:53:09.805
<v Speaker 1>just make sure it's in scope, then I'll

00:53:09.805 --> 00:53:11.484
<v Speaker 1>refresh this, that should return

00:53:12.060 --> 00:53:13.420
<v Speaker 1>what I want it to return.

00:53:13.660 --> 00:53:15.180
<v Speaker 1>So we just have this thing, system types.

00:53:15.180 --> 00:53:16.540
<v Speaker 1>It's where everybody lives.

00:53:16.860 --> 00:53:18.140
<v Speaker 1>Very large.

00:53:20.700 --> 00:53:22.060
<v Speaker 1>So I'm guessing

00:53:23.660 --> 00:53:24.300
<v Speaker 1>yep.

00:53:24.700 --> 00:53:25.660
<v Speaker 1>Just gonna send it here.

00:53:26.705 --> 00:53:28.305
<v Speaker 0>And would that be why we got a

00:53:28.305 --> 00:53:32.145
<v Speaker 0>generic service type for the Node. J executor?

00:53:32.385 --> 00:53:33.105
<v Speaker 1>Probably.

00:53:34.145 --> 00:53:35.985
<v Speaker 1>And that one is a little

00:53:36.465 --> 00:53:38.385
<v Speaker 1>like, that shouldn't be important here because it's

00:53:38.385 --> 00:53:39.985
<v Speaker 1>defined in a plug in. Right? So the

00:53:39.985 --> 00:53:41.665
<v Speaker 1>plug in should be loading it for us.

00:53:41.910 --> 00:53:43.670
<v Speaker 1>But the reason the fact that it's not

00:53:44.069 --> 00:53:45.750
<v Speaker 1>and, actually, thank you. Just

00:53:46.230 --> 00:53:47.829
<v Speaker 1>talking through it, I now know why it's

00:53:47.829 --> 00:53:48.630
<v Speaker 1>not doing that.

00:53:49.030 --> 00:53:50.470
<v Speaker 1>It's because it didn't do this.

00:53:51.510 --> 00:53:53.670
<v Speaker 1>So I said there's a plugin entry point,

00:53:53.670 --> 00:53:56.395
<v Speaker 1>right, that, like, sort of exports everything that

00:53:56.395 --> 00:53:58.155
<v Speaker 1>the plug in defines, but I did not

00:53:58.315 --> 00:54:00.555
<v Speaker 1>I did not do that for my my

00:54:00.555 --> 00:54:02.315
<v Speaker 1>new my new shiny toy. So, that's why

00:54:02.315 --> 00:54:03.115
<v Speaker 1>it's not there.

00:54:04.875 --> 00:54:05.915
<v Speaker 1>And you can see I was I was

00:54:05.915 --> 00:54:08.075
<v Speaker 1>doing a dog walker demo before this. So,

00:54:08.369 --> 00:54:12.609
<v Speaker 1>that's why that stuff's in there. Let's

00:54:12.609 --> 00:54:13.089
<v Speaker 1>see.

00:54:13.410 --> 00:54:16.450
<v Speaker 1>Oh, it's demo node. Yes. Perfect. Okay. So

00:54:16.450 --> 00:54:17.570
<v Speaker 1>I'm gonna save that.

00:54:17.890 --> 00:54:19.970
<v Speaker 1>We're gonna save this over here once I

00:54:19.970 --> 00:54:20.530
<v Speaker 1>get

00:54:21.329 --> 00:54:22.450
<v Speaker 1>built in

00:54:23.505 --> 00:54:24.705
<v Speaker 1>language exec

00:54:24.944 --> 00:54:25.905
<v Speaker 1>node

00:54:26.545 --> 00:54:27.265
<v Speaker 1>node.

00:54:27.424 --> 00:54:28.305
<v Speaker 1>Perfect.

00:54:28.305 --> 00:54:29.025
<v Speaker 1>Okay.

00:54:29.904 --> 00:54:32.385
<v Speaker 1>So having done that, now I think I

00:54:32.385 --> 00:54:34.625
<v Speaker 1>can just, like, restart the kernel and rerun

00:54:34.625 --> 00:54:36.625
<v Speaker 1>all this good stuff, and then it should

00:54:36.625 --> 00:54:37.505
<v Speaker 1>come back the right way.

00:54:49.580 --> 00:54:49.900
<v Speaker 1>Yep.

00:54:53.225 --> 00:54:55.545
<v Speaker 1>Yeah. So everything's everything's happy. Right? Like, you

00:54:55.545 --> 00:54:57.465
<v Speaker 1>can find all the stuff now, and everything's

00:54:57.465 --> 00:54:58.185
<v Speaker 1>the right

00:54:58.665 --> 00:55:00.505
<v Speaker 1>everything's the right type of thing.

00:55:01.705 --> 00:55:03.145
<v Speaker 1>So what wanna do is wanna make an

00:55:03.145 --> 00:55:04.185
<v Speaker 1>instance of this operation.

00:55:04.760 --> 00:55:05.400
<v Speaker 1>Right?

00:55:06.040 --> 00:55:07.800
<v Speaker 1>And the Node. Js operation,

00:55:08.200 --> 00:55:10.040
<v Speaker 1>if you wanna know, like, what attributes it

00:55:10.040 --> 00:55:11.960
<v Speaker 1>takes, you can always find that defined on

00:55:11.960 --> 00:55:13.000
<v Speaker 1>the type itself.

00:55:14.520 --> 00:55:15.960
<v Speaker 1>Let's do keys.

00:55:17.960 --> 00:55:19.160
<v Speaker 1>And these are all the attributes.

00:55:20.035 --> 00:55:21.635
<v Speaker 1>If you do items instead,

00:55:24.195 --> 00:55:26.035
<v Speaker 1>it comes back names and

00:55:26.755 --> 00:55:27.795
<v Speaker 1>attribute types,

00:55:28.035 --> 00:55:29.955
<v Speaker 1>and they can introspect all the attribute types

00:55:29.955 --> 00:55:31.955
<v Speaker 1>to, like, find out what they are if

00:55:31.955 --> 00:55:32.355
<v Speaker 1>you want to.

00:55:33.010 --> 00:55:34.130
<v Speaker 1>So what we're gonna do is we're gonna

00:55:34.130 --> 00:55:36.370
<v Speaker 1>make an instance of this of this operation.

00:55:36.370 --> 00:55:36.930
<v Speaker 1>Right?

00:55:38.050 --> 00:55:40.050
<v Speaker 1>And I believe all we need to do

00:55:40.050 --> 00:55:43.170
<v Speaker 1>is say my node j s op

00:55:43.170 --> 00:55:44.130
<v Speaker 1>is this,

00:55:44.735 --> 00:55:47.535
<v Speaker 1>and the name is gonna be a demo

00:55:47.535 --> 00:55:48.975
<v Speaker 1>Node JS

00:55:49.695 --> 00:55:50.655
<v Speaker 1>operation.

00:55:52.575 --> 00:55:54.815
<v Speaker 1>And let me just I'm just gonna verify

00:55:54.815 --> 00:55:55.935
<v Speaker 1>that, like, there aren't any,

00:55:57.470 --> 00:55:59.070
<v Speaker 1>Of course, it does that. Yeah.

00:56:06.589 --> 00:56:08.589
<v Speaker 1>I mean, it's very straightforward. There's, like, nothing

00:56:08.589 --> 00:56:09.950
<v Speaker 1>crazy I need to set in here.

00:56:12.144 --> 00:56:13.505
<v Speaker 1>Same thing at this level.

00:56:14.704 --> 00:56:15.905
<v Speaker 1>It's just this,

00:56:16.545 --> 00:56:18.865
<v Speaker 1>but that's actually set. Okay. Great.

00:56:19.505 --> 00:56:20.945
<v Speaker 1>So go back to here

00:56:21.184 --> 00:56:23.265
<v Speaker 1>and then that. And then

00:56:23.505 --> 00:56:25.984
<v Speaker 1>the only other keyword is exec support

00:56:26.540 --> 00:56:27.820
<v Speaker 1>provided by,

00:56:30.300 --> 00:56:32.060
<v Speaker 1>like, Citibank or,

00:56:32.700 --> 00:56:33.820
<v Speaker 1>I don't know,

00:56:34.060 --> 00:56:34.780
<v Speaker 1>Publix.

00:56:35.260 --> 00:56:38.220
<v Speaker 1>No. It's provided by the, the Node. Js,

00:56:38.780 --> 00:56:40.140
<v Speaker 1>executor that we

00:56:40.700 --> 00:56:41.339
<v Speaker 1>got up there.

00:56:44.105 --> 00:56:45.865
<v Speaker 1>So all this is doing is telling to

00:56:45.865 --> 00:56:48.265
<v Speaker 1>this operation that, hey, when

00:56:48.825 --> 00:56:50.345
<v Speaker 1>you try to execute,

00:56:51.065 --> 00:56:52.825
<v Speaker 1>if you don't see that there is one

00:56:52.825 --> 00:56:54.345
<v Speaker 1>of these types of things because remember this

00:56:54.345 --> 00:56:54.905
<v Speaker 1>is a type.

00:56:55.550 --> 00:56:57.630
<v Speaker 1>I should have, like, named it better. Oh,

00:56:57.630 --> 00:56:59.070
<v Speaker 1>no. Sorry. That's the service.

00:56:59.230 --> 00:57:00.990
<v Speaker 1>It's not the type. Let's get the type

00:57:00.990 --> 00:57:01.390
<v Speaker 1>instead.

00:57:10.285 --> 00:57:13.885
<v Speaker 1>And we call that demo demo JS executor.

00:57:16.685 --> 00:57:17.645
<v Speaker 1>That's right.

00:57:19.485 --> 00:57:20.685
<v Speaker 1>You gonna update for me?

00:57:22.560 --> 00:57:24.000
<v Speaker 1>Oh, yeah. Okay.

00:57:24.080 --> 00:57:24.960
<v Speaker 1>That's good.

00:57:25.520 --> 00:57:26.320
<v Speaker 1>Perfect.

00:57:26.640 --> 00:57:28.400
<v Speaker 1>So then we can put that in here,

00:57:30.560 --> 00:57:32.080
<v Speaker 1>and then do that.

00:57:32.480 --> 00:57:34.560
<v Speaker 1>And so now we have this operation. You

00:57:34.560 --> 00:57:35.920
<v Speaker 1>can inspect it down here below.

00:57:37.945 --> 00:57:40.984
<v Speaker 1>It's active. It doesn't run-in async mode. That's

00:57:40.984 --> 00:57:41.545
<v Speaker 1>okay.

00:57:42.505 --> 00:57:44.265
<v Speaker 1>I'll talk about async mode later if you

00:57:44.265 --> 00:57:44.905
<v Speaker 1>want to.

00:57:45.625 --> 00:57:47.625
<v Speaker 1>It's got a bunch of options for, like,

00:57:47.865 --> 00:57:49.625
<v Speaker 1>you know, things that happen in the API,

00:57:49.625 --> 00:57:51.704
<v Speaker 1>like batch, or you can disable authorization if

00:57:51.704 --> 00:57:53.110
<v Speaker 1>this is just like a bare,

00:57:53.750 --> 00:57:56.470
<v Speaker 1>thing that anybody can hit. By default, Guidepad

00:57:56.470 --> 00:57:59.110
<v Speaker 1>puts all the operations behind our back on

00:57:59.190 --> 00:58:00.870
<v Speaker 1>all of the APIs that it that it

00:58:00.870 --> 00:58:01.430
<v Speaker 1>uses.

00:58:02.150 --> 00:58:03.830
<v Speaker 1>And so there's a whole way to, like,

00:58:03.885 --> 00:58:05.245
<v Speaker 1>link operations

00:58:05.245 --> 00:58:07.485
<v Speaker 1>to roles and then roles to users, and

00:58:07.485 --> 00:58:09.965
<v Speaker 1>then that's how you can control access to

00:58:09.965 --> 00:58:10.525
<v Speaker 1>them.

00:58:14.605 --> 00:58:15.885
<v Speaker 1>Sorry. I'm just going I'm just going through

00:58:15.885 --> 00:58:17.485
<v Speaker 1>here, making sure we have everything we need.

00:58:19.440 --> 00:58:20.960
<v Speaker 1>Provided by is the thing that we wanna

00:58:20.960 --> 00:58:23.040
<v Speaker 1>set. Right? So this is a link. If

00:58:23.040 --> 00:58:25.040
<v Speaker 1>you look at the it's a reference collection.

00:58:26.320 --> 00:58:27.200
<v Speaker 1>And the

00:58:27.599 --> 00:58:29.760
<v Speaker 1>reference to it, if I go and and

00:58:29.760 --> 00:58:30.800
<v Speaker 1>show you the actual, like,

00:58:31.515 --> 00:58:33.915
<v Speaker 1>type for this, if I go

00:58:34.875 --> 00:58:35.994
<v Speaker 1>Node. Js

00:58:36.395 --> 00:58:37.435
<v Speaker 1>executor,

00:58:38.154 --> 00:58:41.115
<v Speaker 1>and then we wanna look at, provided by.

00:58:41.914 --> 00:58:42.474
<v Speaker 1>You can see

00:58:44.820 --> 00:58:45.220
<v Speaker 1>oh,

00:58:47.460 --> 00:58:49.140
<v Speaker 1>you know what? That's an operation.

00:58:50.820 --> 00:58:53.700
<v Speaker 1>Node. Js operation. There we go. Thanks. It's

00:58:53.700 --> 00:58:55.220
<v Speaker 1>a reference. What's what is it a reference

00:58:55.220 --> 00:58:55.460
<v Speaker 1>to?

00:59:00.195 --> 00:59:02.355
<v Speaker 1>Oh my god. Reference object.

00:59:03.235 --> 00:59:03.955
<v Speaker 1>Shush.

00:59:04.035 --> 00:59:05.475
<v Speaker 1>Why why do you like this?

00:59:05.795 --> 00:59:07.315
<v Speaker 1>Nope. It's a one to one.

00:59:10.035 --> 00:59:10.915
<v Speaker 1>My bad.

00:59:12.035 --> 00:59:13.809
<v Speaker 1>I'm just gonna go to the definition. It

00:59:13.809 --> 00:59:15.970
<v Speaker 1>should be there. It should be there.

00:59:17.329 --> 00:59:19.170
<v Speaker 1>Okay. Yeah. Reference type. I don't know why

00:59:19.170 --> 00:59:22.290
<v Speaker 1>it's being so You typed a you referenced.

00:59:22.770 --> 00:59:24.450
<v Speaker 1>Oh, did I type did I type a?

00:59:27.645 --> 00:59:29.325
<v Speaker 1>Yeah. There we go. Perfect. Okay.

00:59:30.605 --> 00:59:32.445
<v Speaker 1>So, yeah. So, you can see before, like,

00:59:32.445 --> 00:59:34.845
<v Speaker 1>in the diagram, right, like, we want to

00:59:34.845 --> 00:59:35.485
<v Speaker 1>link

00:59:35.725 --> 00:59:38.365
<v Speaker 1>this operation to a surface exposure. Well, how

00:59:38.365 --> 00:59:39.405
<v Speaker 1>are gonna do that? We're gonna do that

00:59:39.405 --> 00:59:41.645
<v Speaker 1>through the provided by attribute because it's a

00:59:41.645 --> 00:59:43.405
<v Speaker 1>reference to a surface exposure.

00:59:44.420 --> 00:59:45.539
<v Speaker 1>So the next thing we're gonna do is

00:59:45.539 --> 00:59:48.099
<v Speaker 1>we're going to import the service exposure type.

00:59:48.099 --> 00:59:49.220
<v Speaker 1>So, exposure.

00:59:55.665 --> 00:59:57.745
<v Speaker 1>And then, so we have this thing and

00:59:57.745 --> 00:59:59.825
<v Speaker 1>we wanna make a surface exposure. So, what

00:59:59.825 --> 01:00:01.585
<v Speaker 1>are we gonna do? We're going to say

01:00:01.585 --> 01:00:03.345
<v Speaker 1>s as a surface exposure.

01:00:03.985 --> 01:00:05.585
<v Speaker 1>And if I show you the surface exposure

01:00:05.585 --> 01:00:06.065
<v Speaker 1>class,

01:00:08.180 --> 01:00:10.820
<v Speaker 1>again, it's defined like, that's the interesting one

01:00:10.820 --> 01:00:12.340
<v Speaker 1>of the interesting things about Guidepad is, like,

01:00:12.340 --> 01:00:13.940
<v Speaker 1>you can define types in code. You can

01:00:13.940 --> 01:00:15.860
<v Speaker 1>define them strictly in data or you can

01:00:15.860 --> 01:00:17.140
<v Speaker 1>do a hybrid thing where some of it

01:00:17.140 --> 01:00:19.620
<v Speaker 1>is in code and then you, like, add

01:00:19.620 --> 01:00:21.220
<v Speaker 1>stuff on from data storage.

01:00:21.915 --> 01:00:23.595
<v Speaker 1>But for all of, like, the core Guidepad

01:00:23.595 --> 01:00:26.795
<v Speaker 1>types, we just implement them as code, like,

01:00:26.795 --> 01:00:29.275
<v Speaker 1>in, you know, in the library. Right? So

01:00:29.755 --> 01:00:31.595
<v Speaker 1>this is a service exposure here.

01:00:32.555 --> 01:00:33.995
<v Speaker 1>The things that we're interested in on this

01:00:33.995 --> 01:00:36.075
<v Speaker 1>are the exposed service, which we're gonna link

01:00:36.075 --> 01:00:36.795
<v Speaker 1>to the

01:00:37.240 --> 01:00:38.840
<v Speaker 1>executor that we created.

01:00:39.960 --> 01:00:41.080
<v Speaker 1>We're going to

01:00:41.400 --> 01:00:43.800
<v Speaker 1>not care about the public interface ID or

01:00:43.800 --> 01:00:44.760
<v Speaker 1>the suffix

01:00:44.840 --> 01:00:46.840
<v Speaker 1>or the ports, but we are gonna care

01:00:46.840 --> 01:00:49.080
<v Speaker 1>about the protocol. Right? Because that's the thing

01:00:49.080 --> 01:00:51.320
<v Speaker 1>that knows how to communicate with the Node.

01:00:51.320 --> 01:00:53.175
<v Speaker 1>Js executor that we

01:00:53.415 --> 01:00:54.695
<v Speaker 1>have on hand.

01:00:55.015 --> 01:00:56.615
<v Speaker 1>We wanna make sure it's active.

01:00:57.175 --> 01:00:59.415
<v Speaker 1>And the other stuff doesn't doesn't matter a

01:00:59.415 --> 01:01:01.015
<v Speaker 1>whole bunch. Great. So,

01:01:01.495 --> 01:01:02.935
<v Speaker 1>so we're gonna make one. We're gonna call

01:01:02.935 --> 01:01:04.695
<v Speaker 1>this the demo

01:01:05.340 --> 01:01:07.500
<v Speaker 1>demo node JS,

01:01:08.860 --> 01:01:09.900
<v Speaker 1>executor

01:01:10.060 --> 01:01:11.180
<v Speaker 1>exposure.

01:01:11.500 --> 01:01:12.780
<v Speaker 1>And the protocol

01:01:14.140 --> 01:01:15.020
<v Speaker 1>is

01:01:15.820 --> 01:01:16.940
<v Speaker 1>going to be

01:01:17.500 --> 01:01:17.900
<v Speaker 1>sorry.

01:01:19.164 --> 01:01:19.964
<v Speaker 1>Cube

01:01:19.964 --> 01:01:20.765
<v Speaker 1>exec

01:01:22.204 --> 01:01:23.405
<v Speaker 1>without a minus.

01:01:24.765 --> 01:01:25.565
<v Speaker 1>So,

01:01:25.964 --> 01:01:27.484
<v Speaker 1>this is not a standard protocol.

01:01:27.645 --> 01:01:28.925
<v Speaker 1>Right? Obviously.

01:01:29.244 --> 01:01:30.845
<v Speaker 1>This is a protocol that we came up

01:01:30.845 --> 01:01:33.885
<v Speaker 1>with so that our operations can talk to

01:01:35.609 --> 01:01:38.330
<v Speaker 1>a pod, basically, running in Kubernetes.

01:01:38.730 --> 01:01:40.650
<v Speaker 1>But what that means, though, is that any

01:01:40.650 --> 01:01:43.210
<v Speaker 1>service that you want to use this

01:01:43.210 --> 01:01:45.690
<v Speaker 1>particular protocol we implemented, you you can as

01:01:45.690 --> 01:01:46.890
<v Speaker 1>long as you have Guidepad.

01:01:47.964 --> 01:01:49.964
<v Speaker 1>So we're gonna do that. We're gonna say

01:01:49.964 --> 01:01:51.245
<v Speaker 1>the exposed service

01:01:56.444 --> 01:01:58.925
<v Speaker 1>is our Node. Js

01:01:59.085 --> 01:02:00.525
<v Speaker 1>service. Let me just make sure I haven't

01:02:00.525 --> 01:02:02.204
<v Speaker 1>overwritten that with anything. Nope. Still the right

01:02:02.204 --> 01:02:02.925
<v Speaker 1>service. Great.

01:02:03.800 --> 01:02:04.760
<v Speaker 1>And do that.

01:02:05.480 --> 01:02:07.720
<v Speaker 1>And so, now, these objects just exist in

01:02:07.720 --> 01:02:10.360
<v Speaker 1>memory. Right? Like, they're not persisted anywhere. Guidepad,

01:02:10.360 --> 01:02:13.000
<v Speaker 1>like, has no, like, notion of them.

01:02:13.480 --> 01:02:15.640
<v Speaker 1>They're just locally on my on my machine.

01:02:16.455 --> 01:02:17.735
<v Speaker 1>So what we need to do is we

01:02:17.735 --> 01:02:19.175
<v Speaker 1>need to save them so that they get

01:02:19.175 --> 01:02:21.415
<v Speaker 1>persistent to Guidepads, data storage, and that we

01:02:21.415 --> 01:02:23.655
<v Speaker 1>can use them in, like, downstream

01:02:23.735 --> 01:02:24.295
<v Speaker 1>stuff.

01:02:25.095 --> 01:02:25.895
<v Speaker 1>So,

01:02:26.295 --> 01:02:28.055
<v Speaker 1>we're gonna do Node. Js,

01:02:29.175 --> 01:02:29.575
<v Speaker 1>save,

01:02:31.800 --> 01:02:33.480
<v Speaker 1>and s save.

01:02:34.920 --> 01:02:36.360
<v Speaker 1>And there's a lot that goes on when

01:02:36.360 --> 01:02:38.280
<v Speaker 1>I do this, so I I don't wanna

01:02:38.200 --> 01:02:39.160
<v Speaker 1>I don't want to

01:02:40.040 --> 01:02:41.480
<v Speaker 1>What's that? Do you not need to save

01:02:41.480 --> 01:02:42.360
<v Speaker 0>the operation as well?

01:02:43.464 --> 01:02:44.905
<v Speaker 1>We will in a moment.

01:02:45.305 --> 01:02:47.545
<v Speaker 1>Haven't linked those things together yet,

01:02:47.945 --> 01:02:49.625
<v Speaker 1>so that's why I'm not saving them. I'm

01:02:49.625 --> 01:02:51.704
<v Speaker 1>just saving these two, for now.

01:02:57.579 --> 01:03:00.059
<v Speaker 1>So it's gonna take a minute because the

01:03:00.059 --> 01:03:02.140
<v Speaker 1>Node well, I should say that we're connected

01:03:02.140 --> 01:03:05.819
<v Speaker 1>to a, a very small MongoDB instance. Very

01:03:05.819 --> 01:03:07.740
<v Speaker 1>small, meaning an eighth of a CPU.

01:03:08.059 --> 01:03:09.579
<v Speaker 1>So the fact that it works for me

01:03:09.579 --> 01:03:10.540
<v Speaker 1>at all is wonderful.

01:03:12.555 --> 01:03:13.675
<v Speaker 1>Yeah. Anyway,

01:03:14.475 --> 01:03:16.075
<v Speaker 1>so those are saved now. So, if I

01:03:16.075 --> 01:03:17.755
<v Speaker 1>wanted to, like, fetch them, right, I I

01:03:17.755 --> 01:03:19.275
<v Speaker 1>could. I could just do,

01:03:20.075 --> 01:03:21.355
<v Speaker 1>you know, my Node. Js.

01:03:23.559 --> 01:03:25.000
<v Speaker 1>Oh, you know what? No. I don't know

01:03:25.000 --> 01:03:26.200
<v Speaker 1>why I saved Node. Js. Oh, you know

01:03:26.200 --> 01:03:28.119
<v Speaker 1>why I saved Node. Js? Yeah. Because now

01:03:28.119 --> 01:03:30.039
<v Speaker 1>it's exposed. I didn't need to do that.

01:03:30.039 --> 01:03:31.400
<v Speaker 1>I've already fetched this, but now I can

01:03:31.400 --> 01:03:33.480
<v Speaker 1>fetch the exposure if I wanted to. So,

01:03:33.480 --> 01:03:35.000
<v Speaker 1>it's s is service exposure.

01:03:35.319 --> 01:03:36.599
<v Speaker 1>So, I just wanna make sure that, like,

01:03:36.599 --> 01:03:38.279
<v Speaker 1>it's saved properly, you know, so it's service

01:03:38.279 --> 01:03:39.079
<v Speaker 1>exposure list.

01:03:39.615 --> 01:03:41.455
<v Speaker 1>And it's a special by name.

01:03:50.095 --> 01:03:51.295
<v Speaker 1>Oh, sorry. List single.

01:03:53.319 --> 01:03:54.920
<v Speaker 1>List list without

01:03:54.920 --> 01:03:56.599
<v Speaker 1>the single on it is for many things.

01:03:56.599 --> 01:03:58.359
<v Speaker 1>It returns a generator. I I just want

01:03:58.359 --> 01:03:59.480
<v Speaker 1>a single one. So you can see it

01:03:59.480 --> 01:04:01.400
<v Speaker 1>down here. This is the exposure we just

01:04:01.400 --> 01:04:02.040
<v Speaker 1>created.

01:04:03.000 --> 01:04:05.720
<v Speaker 1>You can see its name, its protocol, cubics

01:04:05.720 --> 01:04:06.039
<v Speaker 1>deck.

01:04:07.185 --> 01:04:09.345
<v Speaker 1>It's attached to the right

01:04:09.425 --> 01:04:10.225
<v Speaker 1>service.

01:04:10.225 --> 01:04:11.425
<v Speaker 1>We can see that if we go through

01:04:11.425 --> 01:04:12.785
<v Speaker 1>here and here.

01:04:13.745 --> 01:04:16.705
<v Speaker 1>And the name is that executor that we

01:04:16.705 --> 01:04:18.705
<v Speaker 1>have. So, now we have completed

01:04:19.185 --> 01:04:21.910
<v Speaker 1>this step and linked it to this.

01:04:22.790 --> 01:04:25.270
<v Speaker 1>Now, we need to make our operation complete,

01:04:25.350 --> 01:04:25.990
<v Speaker 1>and then,

01:04:26.470 --> 01:04:28.950
<v Speaker 1>we should be almost ready to actually, like,

01:04:28.950 --> 01:04:29.750
<v Speaker 1>run the operation.

01:04:32.934 --> 01:04:33.975
<v Speaker 0>Alright. So

01:04:34.535 --> 01:04:36.454
<v Speaker 1>and and, obviously, I'm I'm taking a little

01:04:36.454 --> 01:04:38.295
<v Speaker 1>bit longer than normal because I I wanna

01:04:38.295 --> 01:04:39.575
<v Speaker 1>make sure this all makes sense.

01:04:40.295 --> 01:04:41.575
<v Speaker 0>Yeah. I appreciate it. Yeah.

01:04:43.494 --> 01:04:44.934
<v Speaker 1>Yeah. Okay. So

01:04:45.280 --> 01:04:47.120
<v Speaker 1>you have the Node JS operation. We wanna

01:04:47.120 --> 01:04:48.960
<v Speaker 1>link it to the service exposure so that

01:04:48.960 --> 01:04:50.480
<v Speaker 1>it can handle the requests on our on

01:04:50.480 --> 01:04:52.080
<v Speaker 1>our behalf. So we just do Node JS

01:04:52.080 --> 01:04:52.640
<v Speaker 1>op

01:04:53.600 --> 01:04:54.720
<v Speaker 1>provided by

01:04:57.360 --> 01:04:58.160
<v Speaker 1>is

01:04:58.160 --> 01:04:58.640
<v Speaker 1>s.

01:05:01.525 --> 01:05:02.485
<v Speaker 1>Okay.

01:05:03.845 --> 01:05:04.965
<v Speaker 1>And then if I go to the Node

01:05:04.965 --> 01:05:05.925
<v Speaker 1>JS op,

01:05:06.645 --> 01:05:08.885
<v Speaker 1>we can now see that the provided by

01:05:10.405 --> 01:05:12.165
<v Speaker 1>is linked to that service exposure, so I

01:05:12.165 --> 01:05:12.965
<v Speaker 1>can go ahead and save it.

01:05:15.760 --> 01:05:16.480
<v Speaker 1>Okay.

01:05:18.559 --> 01:05:19.200
<v Speaker 0>Cool.

01:05:20.559 --> 01:05:23.599
<v Speaker 0>So does that service exposure have an endpoint

01:05:23.599 --> 01:05:24.480
<v Speaker 0>we can

01:05:24.880 --> 01:05:26.880
<v Speaker 0>curl? Like, how do we interact with that

01:05:26.880 --> 01:05:28.240
<v Speaker 0>service exposure now?

01:05:28.400 --> 01:05:30.075
<v Speaker 1>So you won't actually need to. Right? Because

01:05:30.075 --> 01:05:31.435
<v Speaker 1>because the thing you wanna op you wanna

01:05:31.435 --> 01:05:33.195
<v Speaker 1>interface with is your operation.

01:05:34.795 --> 01:05:36.635
<v Speaker 1>So this will have an endpoint.

01:05:37.195 --> 01:05:39.435
<v Speaker 1>This will not. Okay. Okay. Because I haven't

01:05:39.435 --> 01:05:41.275
<v Speaker 1>I haven't, like, actually attached this to a

01:05:41.275 --> 01:05:42.955
<v Speaker 1>public interface anywhere. So it's sort of just

01:05:42.955 --> 01:05:45.910
<v Speaker 1>like an internal exposure that Guidepad can use.

01:05:46.870 --> 01:05:48.950
<v Speaker 0>Alright. Okay. So the service exposure is for

01:05:48.950 --> 01:05:51.270
<v Speaker 0>the executor and then the operation is what's

01:05:51.350 --> 01:05:53.350
<v Speaker 0>alright. Okay. This is what everybody wants to

01:05:53.350 --> 01:05:54.870
<v Speaker 1>use. Right? You want this portable thing that

01:05:54.870 --> 01:05:56.790
<v Speaker 1>can run, yeah, some node code.

01:05:57.935 --> 01:05:58.575
<v Speaker 1>Yep.

01:05:58.895 --> 01:06:01.215
<v Speaker 1>Okay. So we got all those bits and

01:06:01.215 --> 01:06:04.015
<v Speaker 1>pieces. Let's pretend that I hadn't deployed

01:06:04.095 --> 01:06:04.735
<v Speaker 1>the,

01:06:05.535 --> 01:06:06.655
<v Speaker 1>the executor.

01:06:06.734 --> 01:06:08.895
<v Speaker 1>Right? So let's let's build it and then,

01:06:08.895 --> 01:06:09.855
<v Speaker 1>like, deploy it,

01:06:10.255 --> 01:06:12.415
<v Speaker 1>just so we can see the magic happen.

01:06:13.400 --> 01:06:15.800
<v Speaker 1>So what we wanna do is I'm gonna

01:06:15.800 --> 01:06:17.160
<v Speaker 1>use the CLI for this.

01:06:18.760 --> 01:06:20.840
<v Speaker 1>And I know, David, we talked about, like,

01:06:20.840 --> 01:06:22.520
<v Speaker 1>me working on

01:06:22.760 --> 01:06:24.120
<v Speaker 1>the the cool text

01:06:24.280 --> 01:06:25.080
<v Speaker 1>UI.

01:06:25.880 --> 01:06:28.040
<v Speaker 1>That's still something I'm working on, but I

01:06:28.325 --> 01:06:30.325
<v Speaker 1>haven't gotten there yet. So we're I was

01:06:30.325 --> 01:06:32.085
<v Speaker 0>gonna ask about that, but, you know No.

01:06:32.085 --> 01:06:33.445
<v Speaker 1>It's not ready. It's not ready for prime

01:06:33.445 --> 01:06:35.605
<v Speaker 1>time. Maybe I can preview it, but, yeah,

01:06:36.325 --> 01:06:37.925
<v Speaker 1>we we still have to deal with the

01:06:37.925 --> 01:06:39.845
<v Speaker 1>the multiple connects every time we run a

01:06:39.845 --> 01:06:40.485
<v Speaker 1>command, unfortunately.

01:06:43.530 --> 01:06:45.130
<v Speaker 1>At least in this I mean, that's that's

01:06:45.130 --> 01:06:46.570
<v Speaker 1>sort of why I work over here. Right?

01:06:46.570 --> 01:06:47.370
<v Speaker 1>So that you only have to do, like,

01:06:47.370 --> 01:06:49.210
<v Speaker 1>one initialize and you can go nuts.

01:06:52.170 --> 01:06:54.570
<v Speaker 1>Service enter state. So, we're gonna use Guidepad

01:06:54.570 --> 01:06:56.890
<v Speaker 1>CLI to have the service enter a particular

01:06:56.565 --> 01:06:57.925
<v Speaker 1>state. What state do you wanna have it

01:06:57.925 --> 01:06:59.685
<v Speaker 1>enter? You wanna have it enter the built

01:06:59.685 --> 01:07:01.765
<v Speaker 1>state because we need to build the image

01:07:01.765 --> 01:07:02.645
<v Speaker 1>that the

01:07:03.125 --> 01:07:06.325
<v Speaker 1>executor is gonna use when it runs.

01:07:06.805 --> 01:07:08.405
<v Speaker 1>So, I'm just gonna pull the,

01:07:09.620 --> 01:07:12.180
<v Speaker 1>sorry. I'm gonna pull the name from here

01:07:12.260 --> 01:07:13.860
<v Speaker 1>again so I don't have to, like, type

01:07:13.860 --> 01:07:14.340
<v Speaker 1>it.

01:07:17.380 --> 01:07:17.860
<v Speaker 1>Great.

01:07:23.245 --> 01:07:25.085
<v Speaker 1>Why'd you put floats around it? Okay. So,

01:07:25.085 --> 01:07:26.445
<v Speaker 1>you need the name of the service, you

01:07:26.445 --> 01:07:27.725
<v Speaker 1>need the name of the environment, that's just

01:07:27.725 --> 01:07:28.605
<v Speaker 1>Rawkode.

01:07:30.285 --> 01:07:31.725
<v Speaker 1>And then you need the name of the,

01:07:33.165 --> 01:07:34.365
<v Speaker 1>the state that you want it to go

01:07:34.365 --> 01:07:35.965
<v Speaker 1>into. So, if I hit enter,

01:07:36.730 --> 01:07:38.730
<v Speaker 1>it's gonna connect to Guidepad.

01:07:38.810 --> 01:07:40.250
<v Speaker 1>It's gonna look up all the state plans

01:07:40.250 --> 01:07:41.850
<v Speaker 1>that this service has.

01:07:42.490 --> 01:07:44.090
<v Speaker 1>It's going to look at the environment and

01:07:44.090 --> 01:07:45.930
<v Speaker 1>be like, state plans do you have that

01:07:45.930 --> 01:07:47.930
<v Speaker 1>are compatible with the environment that you selected?

01:07:49.215 --> 01:07:51.455
<v Speaker 1>Well, there's this one. It is the build

01:07:51.455 --> 01:07:52.975
<v Speaker 1>Node. Js docker image,

01:07:53.295 --> 01:07:54.335
<v Speaker 1>and it will put it in the build

01:07:54.335 --> 01:07:55.855
<v Speaker 1>state. Do I wanna proceed?

01:07:56.175 --> 01:07:56.975
<v Speaker 1>Absolutely.

01:07:57.295 --> 01:07:58.575
<v Speaker 1>So I'm gonna hit yes,

01:07:58.815 --> 01:08:00.655
<v Speaker 1>and then it's gonna wait a tick. So

01:08:00.655 --> 01:08:02.015
<v Speaker 1>you can see it's actually, like, running the

01:08:02.015 --> 01:08:03.055
<v Speaker 1>state plan here.

01:08:08.880 --> 01:08:09.680
<v Speaker 1>Cool?

01:08:10.160 --> 01:08:10.880
<v Speaker 0>Nice.

01:08:12.080 --> 01:08:15.360
<v Speaker 1>That did not look right, though. That

01:08:16.000 --> 01:08:17.920
<v Speaker 1>was way too fast. That was way too

01:08:17.920 --> 01:08:18.800
<v Speaker 1>fast to build an image.

01:08:19.695 --> 01:08:22.175
<v Speaker 1>So I'm guessing something happened and I have

01:08:22.175 --> 01:08:24.335
<v Speaker 1>a good idea of what went wrong.

01:08:25.055 --> 01:08:28.095
<v Speaker 1>Is that somehow the state plan for deploy

01:08:28.095 --> 01:08:30.095
<v Speaker 1>has the build state attached to it. So

01:08:30.095 --> 01:08:31.695
<v Speaker 1>this was actually the the deploy plan because

01:08:31.695 --> 01:08:32.495
<v Speaker 1>you can see

01:08:34.000 --> 01:08:36.800
<v Speaker 1>yeah. It just, like, did something super super

01:08:36.800 --> 01:08:38.079
<v Speaker 1>fast. So

01:08:38.800 --> 01:08:39.999
<v Speaker 1>let's take a look.

01:08:40.399 --> 01:08:41.840
<v Speaker 1>We can peek under the hood

01:08:42.639 --> 01:08:44.399
<v Speaker 1>and see what happened

01:08:44.960 --> 01:08:46.479
<v Speaker 1>because there would be something new in here.

01:08:46.479 --> 01:08:47.760
<v Speaker 1>I need to delete those. Why haven't I

01:08:47.760 --> 01:08:49.279
<v Speaker 1>deleted those yet? Yeah. See, like, nothing

01:08:49.954 --> 01:08:51.635
<v Speaker 1>like, nothing happened.

01:08:52.034 --> 01:08:53.154
<v Speaker 1>Right? So

01:08:54.114 --> 01:08:56.114
<v Speaker 1>something really funky

01:08:57.154 --> 01:08:58.114
<v Speaker 1>went on here.

01:09:00.835 --> 01:09:02.114
<v Speaker 0>So does that mean we have to look

01:09:02.114 --> 01:09:03.875
<v Speaker 0>at the state plan? It does. Yeah. It

01:09:03.875 --> 01:09:06.000
<v Speaker 1>means we need to to debug what's actually

01:09:06.000 --> 01:09:06.959
<v Speaker 1>happening here.

01:09:07.599 --> 01:09:09.760
<v Speaker 1>So you can see it's using this stage.

01:09:12.000 --> 01:09:12.719
<v Speaker 0>Yep.

01:09:13.039 --> 01:09:13.760
<v Speaker 1>Right?

01:09:15.599 --> 01:09:16.319
<v Speaker 1>Oh,

01:09:18.000 --> 01:09:18.639
<v Speaker 1>user error.

01:09:20.094 --> 01:09:21.534
<v Speaker 1>It's not that environment.

01:09:22.494 --> 01:09:24.814
<v Speaker 1>That environment is a Kubernetes cluster. So, of

01:09:24.814 --> 01:09:25.294
<v Speaker 1>course,

01:09:25.774 --> 01:09:28.094
<v Speaker 1>it's going to try to, like,

01:09:28.494 --> 01:09:31.135
<v Speaker 1>run these Ansible commands against Kubernetes.

01:09:31.774 --> 01:09:33.374
<v Speaker 1>I want the build environment,

01:09:33.774 --> 01:09:34.175
<v Speaker 1>not

01:09:34.830 --> 01:09:37.470
<v Speaker 1>the like, not the production environment. Right? I

01:09:37.470 --> 01:09:39.630
<v Speaker 1>need to build this image in Packer. So

01:09:39.630 --> 01:09:41.710
<v Speaker 1>I need to use a different environment

01:09:41.710 --> 01:09:42.429
<v Speaker 1>name.

01:09:42.830 --> 01:09:44.189
<v Speaker 1>We'll go back over here.

01:09:48.590 --> 01:09:49.229
<v Speaker 1>It's this one.

01:09:50.085 --> 01:09:51.205
<v Speaker 0>Packer build.

01:09:51.525 --> 01:09:52.405
<v Speaker 1>Yes.

01:09:53.125 --> 01:09:55.925
<v Speaker 1>Guidepad default build. So, we're gonna do that

01:09:55.925 --> 01:09:56.245
<v Speaker 1>instead.

01:10:06.840 --> 01:10:08.360
<v Speaker 1>It's gonna do the connection stuff. It's gonna

01:10:08.360 --> 01:10:09.400
<v Speaker 1>ask me again.

01:10:09.880 --> 01:10:11.080
<v Speaker 1>I'm gonna hit yes.

01:10:14.440 --> 01:10:17.160
<v Speaker 1>Okay. Great. We're not seeing Ansible, which is

01:10:17.160 --> 01:10:18.200
<v Speaker 1>a great sign

01:10:18.600 --> 01:10:21.164
<v Speaker 1>because that means it's doing something

01:10:21.885 --> 01:10:22.685
<v Speaker 1>funkier,

01:10:22.685 --> 01:10:24.764
<v Speaker 1>which I'm very I'm both proud of and

01:10:24.764 --> 01:10:26.445
<v Speaker 1>not proud of what it's doing right now.

01:10:27.005 --> 01:10:27.885
<v Speaker 1>So,

01:10:29.724 --> 01:10:31.324
<v Speaker 1>here, what it's doing is this.

01:10:34.739 --> 01:10:35.539
<v Speaker 1>It's

01:10:35.699 --> 01:10:37.300
<v Speaker 1>gonna be making a pod over here in

01:10:37.300 --> 01:10:38.019
<v Speaker 1>a second.

01:10:43.540 --> 01:10:45.619
<v Speaker 1>I hope so. I sure hope so. Let's

01:10:45.619 --> 01:10:46.739
<v Speaker 1>check out the

01:10:47.195 --> 01:10:48.795
<v Speaker 1>let's check out the manager and see what

01:10:48.795 --> 01:10:50.715
<v Speaker 1>it's doing. Would it be in a different

01:10:50.715 --> 01:10:51.514
<v Speaker 0>namespace?

01:10:51.595 --> 01:10:52.635
<v Speaker 1>It shouldn't.

01:10:54.235 --> 01:10:55.675
<v Speaker 1>It should know better than that.

01:10:56.635 --> 01:10:57.915
<v Speaker 1>That's not that's not how I brought it

01:10:57.915 --> 01:10:59.595
<v Speaker 1>up. Oh, yeah. See, it's it's going now.

01:11:02.240 --> 01:11:04.080
<v Speaker 1>So, it should be it should be appearing

01:11:04.080 --> 01:11:05.040
<v Speaker 1>momentarily.

01:11:05.840 --> 01:11:08.960
<v Speaker 1>Yes. Perfect. Okay. So, it's here. Seconds ago.

01:11:08.960 --> 01:11:09.599
<v Speaker 0>Cool.

01:11:10.000 --> 01:11:12.320
<v Speaker 1>Okay. So, what happened there is

01:11:12.640 --> 01:11:13.600
<v Speaker 1>Guidepad

01:11:14.505 --> 01:11:17.145
<v Speaker 1>ran a state plan. It said, hey, I

01:11:17.145 --> 01:11:19.385
<v Speaker 1>wanna run the state plan against the Guidepad

01:11:19.385 --> 01:11:20.585
<v Speaker 1>build environment.

01:11:20.985 --> 01:11:23.465
<v Speaker 1>The Guidepad build environment has what we like,

01:11:23.465 --> 01:11:24.905
<v Speaker 1>each environment has what we call a control

01:11:24.905 --> 01:11:26.345
<v Speaker 1>plane, and that's the thing that takes the

01:11:26.345 --> 01:11:28.665
<v Speaker 1>state plan instructions and, like, executes it against

01:11:28.665 --> 01:11:29.545
<v Speaker 1>that environment type.

01:11:30.489 --> 01:11:32.650
<v Speaker 1>For the packer build environment, there is a

01:11:32.650 --> 01:11:33.530
<v Speaker 1>packer

01:11:33.610 --> 01:11:34.570
<v Speaker 1>control plane.

01:11:34.810 --> 01:11:37.210
<v Speaker 1>And what that does is it actually uses

01:11:37.210 --> 01:11:39.610
<v Speaker 1>Guidepad's work plan management system

01:11:39.770 --> 01:11:42.489
<v Speaker 1>to schedule a pod that knows how to

01:11:42.489 --> 01:11:44.889
<v Speaker 1>build the thing using the instructions in the

01:11:44.889 --> 01:11:45.369
<v Speaker 1>state plan.

01:11:45.985 --> 01:11:48.145
<v Speaker 1>So that's what's happening here. Right? Like, we're

01:11:48.145 --> 01:11:51.105
<v Speaker 1>using our internal automation tool to automatically run

01:11:51.105 --> 01:11:53.905
<v Speaker 1>and manage a build of an image using

01:11:53.905 --> 01:11:55.585
<v Speaker 1>Docker and Docker. Like, they have to use

01:11:55.585 --> 01:11:57.985
<v Speaker 1>Docker and Docker image to do that,

01:11:58.920 --> 01:12:01.080
<v Speaker 1>which is its own can of worms. But

01:12:01.080 --> 01:12:02.280
<v Speaker 1>we we take care of that can of

01:12:02.280 --> 01:12:03.560
<v Speaker 1>worms for you, so you don't have to

01:12:03.560 --> 01:12:04.119
<v Speaker 1>do that.

01:12:05.239 --> 01:12:06.679
<v Speaker 1>And then if you look at the logs,

01:12:06.679 --> 01:12:08.280
<v Speaker 1>you can probably see what packer's been up

01:12:08.280 --> 01:12:08.760
<v Speaker 1>to.

01:12:10.360 --> 01:12:12.120
<v Speaker 1>Unless I have debugging turned off, I might.

01:12:14.315 --> 01:12:15.434
<v Speaker 1>Yep. All done.

01:12:16.955 --> 01:12:18.635
<v Speaker 1>So this built a new image, and if

01:12:18.635 --> 01:12:19.835
<v Speaker 1>I go over the other thing,

01:12:20.475 --> 01:12:22.315
<v Speaker 1>you can see that it it said it

01:12:22.315 --> 01:12:24.955
<v Speaker 1>was successful. Right? So now we've we've built

01:12:24.955 --> 01:12:25.835
<v Speaker 1>an image,

01:12:26.395 --> 01:12:27.354
<v Speaker 1>for this,

01:12:28.540 --> 01:12:30.219
<v Speaker 1>for the service. And if I wanna look

01:12:30.219 --> 01:12:31.099
<v Speaker 1>at that image

01:12:32.380 --> 01:12:34.060
<v Speaker 1>remember, have the notion of artifacts. Right? So

01:12:34.060 --> 01:12:36.539
<v Speaker 1>artifacts are things that are file like.

01:12:36.940 --> 01:12:39.179
<v Speaker 1>Well, we considered Docker images to be file

01:12:39.179 --> 01:12:40.699
<v Speaker 1>like objects, so we put them in our

01:12:40.699 --> 01:12:41.900
<v Speaker 1>in our artifact storage.

01:12:42.614 --> 01:12:44.454
<v Speaker 1>So if we were to take the artifact

01:12:44.454 --> 01:12:45.175
<v Speaker 1>type

01:12:50.054 --> 01:12:51.734
<v Speaker 1>and get all my artifacts

01:12:53.894 --> 01:12:55.574
<v Speaker 1>you know what? Let me yeah. I'll I'll

01:12:55.574 --> 01:12:57.574
<v Speaker 1>just do a filter on it. Okay. Artifacts,

01:12:57.800 --> 01:12:59.080
<v Speaker 1>docker images.

01:13:07.800 --> 01:13:08.200
<v Speaker 1>Nope.

01:13:15.145 --> 01:13:17.784
<v Speaker 0>Right in the middle. Yep. List.

01:13:18.425 --> 01:13:20.505
<v Speaker 1>The generator. I have to, like, make it

01:13:20.505 --> 01:13:21.065
<v Speaker 1>real.

01:13:23.385 --> 01:13:24.905
<v Speaker 1>Perfect. So, you see there's three in there.

01:13:24.905 --> 01:13:24.985
<v Speaker 1>Right?

01:13:26.360 --> 01:13:29.239
<v Speaker 1>There is the default image for Guidepad's

01:13:29.239 --> 01:13:31.480
<v Speaker 1>API. There is the default image for the

01:13:31.480 --> 01:13:32.439
<v Speaker 1>user interface.

01:13:32.520 --> 01:13:34.119
<v Speaker 1>And then there is this one. And this

01:13:34.119 --> 01:13:35.800
<v Speaker 1>one is the

01:13:36.360 --> 01:13:37.239
<v Speaker 1>artifact

01:13:37.239 --> 01:13:38.359
<v Speaker 1>that was built

01:13:39.000 --> 01:13:41.079
<v Speaker 1>for the demo JS executor.

01:13:42.145 --> 01:13:44.705
<v Speaker 1>Right? Alright. And you can see it was

01:13:44.705 --> 01:13:45.825
<v Speaker 1>last uploaded

01:13:46.065 --> 01:13:46.945
<v Speaker 1>just now.

01:13:47.905 --> 01:13:50.305
<v Speaker 1>It's in this storage back end, which is

01:13:50.305 --> 01:13:50.864
<v Speaker 1>the

01:13:51.345 --> 01:13:52.865
<v Speaker 1>Uh-oh. Sorry. It doesn't have a storage back

01:13:52.865 --> 01:13:53.425
<v Speaker 1>end because

01:13:53.910 --> 01:13:55.990
<v Speaker 1>I'll I'll spare you the gory details. We

01:13:55.990 --> 01:13:57.350
<v Speaker 1>can see this is where this is where

01:13:57.350 --> 01:13:57.989
<v Speaker 1>it lives.

01:13:58.790 --> 01:14:00.310
<v Speaker 1>Right? It's in our UCR.

01:14:00.470 --> 01:14:01.510
<v Speaker 0>Yep. So,

01:14:02.550 --> 01:14:05.270
<v Speaker 1>having built the image, right, like, we can

01:14:05.270 --> 01:14:07.764
<v Speaker 1>deploy it. So now I wanna do I

01:14:07.764 --> 01:14:09.605
<v Speaker 1>want I do wanna use that other environment.

01:14:09.605 --> 01:14:10.965
<v Speaker 1>I wanna go into the deployed state.

01:14:33.875 --> 01:14:35.715
<v Speaker 1>So this is what we saw earlier,

01:14:35.955 --> 01:14:37.395
<v Speaker 1>and that was why it was so sort

01:14:37.395 --> 01:14:39.955
<v Speaker 1>of concerning for me Yeah. Because now it's

01:14:39.955 --> 01:14:41.955
<v Speaker 1>deploying the thing. So if we go back

01:14:41.955 --> 01:14:43.475
<v Speaker 1>into the into the cluster,

01:14:47.490 --> 01:14:49.409
<v Speaker 1>you can see the old one's terminating

01:14:49.570 --> 01:14:50.610
<v Speaker 1>Yep. Down there.

01:14:51.890 --> 01:14:53.489
<v Speaker 1>And we'll just let it come back up.

01:14:54.370 --> 01:14:55.650
<v Speaker 1>And then I'll just show you that it's,

01:14:55.650 --> 01:14:57.330
<v Speaker 1>like, using the right image just as, a

01:14:57.330 --> 01:14:59.895
<v Speaker 1>a sanity check. Right? And then we can

01:14:59.895 --> 01:15:01.415
<v Speaker 1>also see that it's node because that was

01:15:01.415 --> 01:15:03.335
<v Speaker 1>the idea. Right? That we built a, like,

01:15:03.335 --> 01:15:05.494
<v Speaker 1>a node image, right, like, the fly. So

01:15:05.494 --> 01:15:06.534
<v Speaker 1>I should be able to get in there

01:15:06.534 --> 01:15:08.695
<v Speaker 1>and run the node binary.

01:15:08.935 --> 01:15:09.974
<v Speaker 1>So we'll do that too.

01:15:21.159 --> 01:15:23.639
<v Speaker 1>Are you serious? Yeah. I'm so

01:15:24.760 --> 01:15:26.280
<v Speaker 1>oh my god.

01:15:26.520 --> 01:15:29.465
<v Speaker 1>I swear I'm confident. I promise. I promise.

01:15:31.385 --> 01:15:32.824
<v Speaker 0>Sorry. You've had to do a lot of

01:15:32.824 --> 01:15:35.145
<v Speaker 0>typing in front of a camera, which is

01:15:35.145 --> 01:15:36.504
<v Speaker 0>never an easy task.

01:15:36.744 --> 01:15:37.145
<v Speaker 1>Well,

01:15:37.625 --> 01:15:39.145
<v Speaker 1>that's very generous of you to say. I

01:15:39.145 --> 01:15:40.505
<v Speaker 1>I I appreciate that.

01:15:41.119 --> 01:15:42.880
<v Speaker 1>Okay. So let's just, like, make sure it's

01:15:42.880 --> 01:15:44.559
<v Speaker 1>not doing anything because I'm pretty sure it

01:15:44.559 --> 01:15:46.800
<v Speaker 1>just sleeps when it starts up.

01:15:47.679 --> 01:15:50.639
<v Speaker 1>So, yeah, nothing going on. Great. Let's describe

01:15:50.639 --> 01:15:50.880
<v Speaker 1>it.

01:15:55.764 --> 01:15:57.204
<v Speaker 1>You can see here oh, let's look down

01:15:57.204 --> 01:15:59.045
<v Speaker 1>here at the bottom. Yep. So, here's that

01:15:59.045 --> 01:16:00.724
<v Speaker 1>image we made. Yep.

01:16:01.125 --> 01:16:01.925
<v Speaker 1>Great.

01:16:02.565 --> 01:16:03.844
<v Speaker 1>And if I get into it,

01:16:11.880 --> 01:16:13.079
<v Speaker 1>does it have node?

01:16:14.360 --> 01:16:14.919
<v Speaker 1>No.

01:16:18.599 --> 01:16:21.239
<v Speaker 1>Wonderful. Maybe it's gonna maybe, maybe,

01:16:21.639 --> 01:16:22.119
<v Speaker 1>node?

01:16:22.975 --> 01:16:23.614
<v Speaker 1>Nope.

01:16:24.255 --> 01:16:24.895
<v Speaker 1>Okay.

01:16:25.135 --> 01:16:27.375
<v Speaker 1>Well, which image was it made off of?

01:16:31.614 --> 01:16:34.094
<v Speaker 1>That would be good to know. Okay. So

01:16:34.094 --> 01:16:35.535
<v Speaker 1>here's what we're gonna do. We're going to

01:16:35.535 --> 01:16:37.535
<v Speaker 1>run the operation that built this thing locally

01:16:37.535 --> 01:16:39.350
<v Speaker 1>so that we can watch it happen, and

01:16:39.350 --> 01:16:41.190
<v Speaker 1>then it's going to tell us which image

01:16:41.190 --> 01:16:43.430
<v Speaker 1>it used as the source. So maybe what's

01:16:43.430 --> 01:16:45.670
<v Speaker 1>happening is that it's using a different image

01:16:45.670 --> 01:16:47.590
<v Speaker 1>that I'm trying to tell it to use.

01:16:49.190 --> 01:16:49.909
<v Speaker 1>Actually,

01:16:50.230 --> 01:16:52.950
<v Speaker 1>I know that's what's happening because right before

01:16:52.950 --> 01:16:54.685
<v Speaker 1>this call, I fixed the bug and I

01:16:54.685 --> 01:16:55.565
<v Speaker 1>did not push

01:16:55.885 --> 01:16:56.764
<v Speaker 1>the

01:16:57.324 --> 01:17:00.284
<v Speaker 1>bug fix. You get push and fix these.

01:17:00.364 --> 01:17:01.244
<v Speaker 1>You shouldn't. Yeah.

01:17:01.885 --> 01:17:02.844
<v Speaker 1>I know.

01:17:04.925 --> 01:17:07.885
<v Speaker 1>I know. Well, the thing is I I

01:17:07.370 --> 01:17:09.930
<v Speaker 1>haven't set up a CICD pipeline for you

01:17:09.930 --> 01:17:10.730
<v Speaker 1>yet,

01:17:11.290 --> 01:17:12.970
<v Speaker 1>because your thing's only a day old. And

01:17:12.970 --> 01:17:14.650
<v Speaker 1>I I don't know. I

01:17:15.610 --> 01:17:17.530
<v Speaker 1>quote unquote grew up before a lot of

01:17:17.530 --> 01:17:19.610
<v Speaker 1>the the modern, like, CICD stuff. So when

01:17:19.610 --> 01:17:21.290
<v Speaker 1>I'm doing things myself, I like to have

01:17:21.290 --> 01:17:22.755
<v Speaker 1>a manual touch sometimes.

01:17:23.875 --> 01:17:24.675
<v Speaker 1>But

01:17:24.835 --> 01:17:26.835
<v Speaker 1>this this is my fault. I I will

01:17:26.835 --> 01:17:27.955
<v Speaker 1>I will own this,

01:17:28.755 --> 01:17:31.475
<v Speaker 1>this this problem and we'll fix it. So,

01:17:32.115 --> 01:17:34.114
<v Speaker 1>what happened is the thing,

01:17:35.155 --> 01:17:37.955
<v Speaker 1>built the wrong image. Right? And it's because

01:17:38.730 --> 01:17:41.289
<v Speaker 1>in the version of the code that your

01:17:41.289 --> 01:17:42.489
<v Speaker 1>instance is using,

01:17:43.530 --> 01:17:46.090
<v Speaker 1>it doesn't respect the requirements that I'm putting

01:17:46.090 --> 01:17:48.969
<v Speaker 1>on the stage entity. So you can say,

01:17:48.969 --> 01:17:51.449
<v Speaker 1>hey, stage, when you are run, I want

01:17:51.449 --> 01:17:52.969
<v Speaker 1>you to use this requirement. So what I

01:17:52.969 --> 01:17:55.014
<v Speaker 1>did is I used that harness,

01:17:55.815 --> 01:17:57.655
<v Speaker 1>to attach an image requirement

01:17:57.974 --> 01:17:58.614
<v Speaker 1>to

01:17:58.775 --> 01:18:00.775
<v Speaker 1>the build process so that it uses the

01:18:00.775 --> 01:18:02.054
<v Speaker 1>node the node image.

01:18:02.295 --> 01:18:03.494
<v Speaker 1>But the code that you have in your

01:18:03.494 --> 01:18:06.590
<v Speaker 1>instance isn't respecting that. Right? So I'll just

01:18:06.590 --> 01:18:07.550
<v Speaker 1>run it locally,

01:18:07.789 --> 01:18:09.389
<v Speaker 1>and then we should be be good to

01:18:09.389 --> 01:18:09.869
<v Speaker 1>go.

01:18:10.190 --> 01:18:11.309
<v Speaker 1>So the way I'm gonna do that is

01:18:11.309 --> 01:18:13.789
<v Speaker 1>I'm actually gonna take the, operation.

01:18:13.789 --> 01:18:15.229
<v Speaker 1>So if you remember,

01:18:17.949 --> 01:18:19.295
<v Speaker 1>this thing

01:18:20.095 --> 01:18:22.175
<v Speaker 1>that ran oh, this isn't the one that's

01:18:22.175 --> 01:18:24.975
<v Speaker 1>gone. But it was running an operation asynchronously.

01:18:24.975 --> 01:18:26.815
<v Speaker 1>Right? So it was running a particular, like,

01:18:26.815 --> 01:18:28.175
<v Speaker 1>build operation.

01:18:28.575 --> 01:18:31.295
<v Speaker 1>I can take the build operation instructions from

01:18:31.295 --> 01:18:32.015
<v Speaker 1>this pod

01:18:32.340 --> 01:18:34.820
<v Speaker 1>and then just run them locally using Guidepad.

01:18:34.820 --> 01:18:36.660
<v Speaker 1>It'll run the same operation locally using the

01:18:36.660 --> 01:18:38.020
<v Speaker 1>code that I have.

01:18:38.580 --> 01:18:39.620
<v Speaker 1>So I'm gonna do that.

01:18:40.340 --> 01:18:41.860
<v Speaker 1>I'm just gonna pull this over here so

01:18:41.860 --> 01:18:43.300
<v Speaker 1>that you don't see some stuff

01:18:43.860 --> 01:18:45.380
<v Speaker 1>that you're not supposed to see

01:18:45.994 --> 01:18:47.755
<v Speaker 1>as far as credentials and things because I

01:18:47.755 --> 01:18:49.675
<v Speaker 1>can't guarantee this pod doesn't have them in

01:18:49.675 --> 01:18:50.155
<v Speaker 1>it.

01:18:54.235 --> 01:18:55.754
<v Speaker 1>Give me just a moment.

01:18:56.155 --> 01:18:56.875
<v Speaker 0>Yeah. Of course.

01:19:03.860 --> 01:19:04.900
<v Speaker 1>K. Great.

01:19:13.140 --> 01:19:13.620
<v Speaker 1>Okay.

01:19:17.235 --> 01:19:19.315
<v Speaker 1>Yeah. We're gonna have to maybe,

01:19:21.235 --> 01:19:24.435
<v Speaker 1>scrub some stuff out of this later.

01:19:24.915 --> 01:19:26.035
<v Speaker 1>If you wanna make a note of the

01:19:26.035 --> 01:19:26.835
<v Speaker 1>timestamp.

01:19:27.715 --> 01:19:28.435
<v Speaker 1>I think I was.

01:19:29.210 --> 01:19:30.329
<v Speaker 1>Okay. Thanks.

01:19:31.449 --> 01:19:32.090
<v Speaker 1>So,

01:19:35.449 --> 01:19:36.650
<v Speaker 1>I thought I'd be able to make it

01:19:36.650 --> 01:19:38.330
<v Speaker 1>the whole the whole call without doing it.

01:19:38.330 --> 01:19:40.010
<v Speaker 1>And I I almost got there.

01:19:41.050 --> 01:19:42.890
<v Speaker 1>Almost got there. Anyway, so this is the

01:19:42.890 --> 01:19:44.170
<v Speaker 1>operation that the

01:19:44.635 --> 01:19:46.475
<v Speaker 1>that the work plan was running. Right? So

01:19:46.475 --> 01:19:49.034
<v Speaker 1>I can run it locally myself just by,

01:19:49.034 --> 01:19:50.235
<v Speaker 1>like, grabbing the,

01:19:51.195 --> 01:19:53.354
<v Speaker 1>the stuff. So I'm gonna do that now.

01:19:55.514 --> 01:19:57.034
<v Speaker 1>And I'll put it in log level debug

01:19:57.034 --> 01:19:58.315
<v Speaker 1>so we can see it do the right

01:19:58.315 --> 01:19:58.554
<v Speaker 1>thing.

01:20:15.495 --> 01:20:16.855
<v Speaker 1>So you can see it's actually, like, using

01:20:16.855 --> 01:20:18.775
<v Speaker 1>packer, right, to build the image.

01:20:20.535 --> 01:20:22.935
<v Speaker 1>And here, it's using node, which is what

01:20:22.935 --> 01:20:23.495
<v Speaker 1>we

01:20:23.815 --> 01:20:25.015
<v Speaker 1>wanted to do

01:20:27.015 --> 01:20:28.615
<v Speaker 1>up at the up at the top here.

01:20:34.489 --> 01:20:36.090
<v Speaker 1>And that's gonna do the push and all

01:20:36.090 --> 01:20:36.969
<v Speaker 1>that good stuff.

01:20:39.770 --> 01:20:42.250
<v Speaker 0>Alright. And we're good. So, now we're gonna

01:20:42.250 --> 01:20:43.770
<v Speaker 1>redeploy the service.

01:20:47.875 --> 01:20:49.155
<v Speaker 1>And it should use the right image and

01:20:49.155 --> 01:20:50.595
<v Speaker 1>I should be able to run node

01:20:51.075 --> 01:20:51.635
<v Speaker 1>on it.

01:21:14.315 --> 01:21:16.555
<v Speaker 1>Cool. Okay. So let's try that again. Get

01:21:16.555 --> 01:21:17.355
<v Speaker 1>pods.

01:21:19.755 --> 01:21:21.515
<v Speaker 1>Let's wait for that to come back up.

01:21:24.715 --> 01:21:26.875
<v Speaker 0>Just add a get dash w to your

01:21:26.875 --> 01:21:28.235
<v Speaker 0>command. Oh, thank you.

01:21:30.139 --> 01:21:32.060
<v Speaker 1>Thanks. And we'll just wait for it to

01:21:32.540 --> 01:21:34.699
<v Speaker 1>You can see how much I'm usually, like,

01:21:34.699 --> 01:21:37.979
<v Speaker 1>in another thing and not not in here.

01:21:40.620 --> 01:21:41.260
<v Speaker 1>Appreciate that.

01:21:42.775 --> 01:21:44.454
<v Speaker 0>Germany, and there we go.

01:21:44.935 --> 01:21:45.495
<v Speaker 1>Awesome.

01:21:59.640 --> 01:22:00.360
<v Speaker 1>K.

01:22:00.680 --> 01:22:01.480
<v Speaker 1>Right image.

01:22:11.175 --> 01:22:13.015
<v Speaker 0>Move a trif. Yay.

01:22:13.255 --> 01:22:14.135
<v Speaker 1>Excellent.

01:22:14.455 --> 01:22:16.455
<v Speaker 1>Okay. Great. So we have the executor out

01:22:16.455 --> 01:22:18.215
<v Speaker 1>there. It's it exists.

01:22:19.415 --> 01:22:20.695
<v Speaker 1>Control d. Thank you.

01:22:23.540 --> 01:22:25.460
<v Speaker 1>Okay. So exists.

01:22:25.780 --> 01:22:26.659
<v Speaker 1>We can now

01:22:27.220 --> 01:22:28.420
<v Speaker 1>because we have the

01:22:28.740 --> 01:22:31.060
<v Speaker 1>let's go back to our our diagram. Right?

01:22:31.060 --> 01:22:33.300
<v Speaker 1>We've got the operation.

01:22:33.300 --> 01:22:35.700
<v Speaker 1>We've got the surface exposure. We've got the

01:22:35.700 --> 01:22:39.175
<v Speaker 1>Node. Js executor deployed using a node image.

01:22:39.495 --> 01:22:40.534
<v Speaker 1>We don't have this.

01:22:41.735 --> 01:22:43.335
<v Speaker 1>So let's make that, and then we can

01:22:43.335 --> 01:22:45.815
<v Speaker 1>probably try to run the operation and then

01:22:45.975 --> 01:22:47.974
<v Speaker 1>debug its inevitable failure,

01:22:48.375 --> 01:22:49.895
<v Speaker 1>for the rest of the for the rest

01:22:49.895 --> 01:22:50.375
<v Speaker 1>of the call.

01:22:52.100 --> 01:22:52.739
<v Speaker 1>So

01:22:54.100 --> 01:22:55.380
<v Speaker 1>where do wanna do that? Me go back

01:22:55.380 --> 01:22:56.099
<v Speaker 1>over here.

01:22:57.060 --> 01:22:58.260
<v Speaker 1>We have the class.

01:22:59.060 --> 01:23:00.740
<v Speaker 1>I'm pretty sure. Yep. We have the Node.

01:23:00.740 --> 01:23:02.099
<v Speaker 1>Js operation type,

01:23:03.540 --> 01:23:05.460
<v Speaker 1>and we have the op itself.

01:23:05.940 --> 01:23:08.795
<v Speaker 1>So one thing that operations have is sort

01:23:08.795 --> 01:23:11.115
<v Speaker 1>of a, like, a helper. Right? If I

01:23:11.115 --> 01:23:12.235
<v Speaker 1>go to the operation

01:23:12.315 --> 01:23:13.114
<v Speaker 1>class,

01:23:15.035 --> 01:23:16.875
<v Speaker 1>is it had they all have this method

01:23:16.875 --> 01:23:17.835
<v Speaker 1>on them,

01:23:18.955 --> 01:23:19.755
<v Speaker 1>which is

01:23:20.955 --> 01:23:22.635
<v Speaker 1>register implementation.

01:23:23.755 --> 01:23:27.010
<v Speaker 1>And they also have register text implementation.

01:23:27.650 --> 01:23:29.730
<v Speaker 1>And those two those those two methods take

01:23:29.730 --> 01:23:31.490
<v Speaker 1>care of all the legwork of creating that

01:23:31.490 --> 01:23:34.450
<v Speaker 1>artifact that I was referencing in the,

01:23:34.930 --> 01:23:35.890
<v Speaker 1>diagram.

01:23:35.970 --> 01:23:37.890
<v Speaker 1>So because we have an operation instance, I

01:23:37.890 --> 01:23:39.090
<v Speaker 1>can just call this method on it

01:23:39.875 --> 01:23:41.394
<v Speaker 1>and provide it some text,

01:23:41.955 --> 01:23:43.555
<v Speaker 1>and a like a dumb like a dummy

01:23:43.555 --> 01:23:45.795
<v Speaker 1>function name and a dummy file name,

01:23:46.114 --> 01:23:47.954
<v Speaker 1>and then it's gonna go make the artifact,

01:23:47.955 --> 01:23:49.155
<v Speaker 1>and then we should be able to call

01:23:49.155 --> 01:23:50.114
<v Speaker 1>the operation.

01:23:50.435 --> 01:23:51.074
<v Speaker 1>Okay.

01:23:52.755 --> 01:23:54.915
<v Speaker 1>So, we'll do Node. Js op.

01:23:55.810 --> 01:23:56.929
<v Speaker 1>Actually sorry.

01:23:57.730 --> 01:23:58.530
<v Speaker 1>Command.

01:24:00.530 --> 01:24:02.289
<v Speaker 1>Yeah. We're just gonna do console. Log.

01:24:03.810 --> 01:24:04.050
<v Speaker 1>Yeah.

01:24:08.005 --> 01:24:10.565
<v Speaker 1>And then we're gonna say Node. Js

01:24:11.205 --> 01:24:12.645
<v Speaker 1>Node. Js op

01:24:12.965 --> 01:24:13.925
<v Speaker 1>register

01:24:13.925 --> 01:24:15.925
<v Speaker 1>text implementation

01:24:17.845 --> 01:24:18.645
<v Speaker 1>command.

01:24:18.805 --> 01:24:20.885
<v Speaker 1>And then the function name is gonna be

01:24:21.205 --> 01:24:21.765
<v Speaker 1>hello,

01:24:23.000 --> 01:24:24.760
<v Speaker 1>and the file name is going to be

01:24:24.760 --> 01:24:26.760
<v Speaker 1>hello dot j s.

01:24:27.880 --> 01:24:29.080
<v Speaker 1>And I don't think I need to provide

01:24:29.080 --> 01:24:30.280
<v Speaker 1>a storage back end

01:24:30.920 --> 01:24:32.440
<v Speaker 1>because it should just use the default one

01:24:32.440 --> 01:24:33.800
<v Speaker 1>configured in the system.

01:24:34.280 --> 01:24:36.280
<v Speaker 1>Let's test out that assumption, though, and hit

01:24:36.280 --> 01:24:36.600
<v Speaker 1>enter.

01:24:39.605 --> 01:24:41.685
<v Speaker 1>Hey, there you go. So now we have

01:24:41.685 --> 01:24:42.485
<v Speaker 1>an artifact,

01:24:43.525 --> 01:24:44.245
<v Speaker 1>that

01:24:44.405 --> 01:24:46.005
<v Speaker 1>should contain that,

01:24:47.285 --> 01:24:49.205
<v Speaker 1>our little function in it, basically.

01:24:51.250 --> 01:24:52.690
<v Speaker 1>So now the moment of truth. Right? So

01:24:52.690 --> 01:24:53.810
<v Speaker 1>we have the operation.

01:24:54.530 --> 01:24:57.010
<v Speaker 1>We could just call it and then see

01:24:57.170 --> 01:24:58.210
<v Speaker 1>what explodes.

01:24:58.610 --> 01:24:59.969
<v Speaker 1>So I think we should do that.

01:25:01.090 --> 01:25:02.210
<v Speaker 0>Some confidence.

01:25:02.370 --> 01:25:03.170
<v Speaker 0>I like

01:25:03.810 --> 01:25:05.224
<v Speaker 1>to I like to set my ex. I'm

01:25:05.224 --> 01:25:07.224
<v Speaker 1>never disappointed. Right? Because Moe is like, it's

01:25:07.224 --> 01:25:08.344
<v Speaker 1>gonna be a disaster.

01:25:08.824 --> 01:25:10.744
<v Speaker 1>And then if it works, great. If not,

01:25:10.744 --> 01:25:12.505
<v Speaker 1>I assumed it was gonna be a disaster.

01:25:12.505 --> 01:25:13.704
<v Speaker 1>So yeah.

01:25:14.025 --> 01:25:14.744
<v Speaker 1>Anyway,

01:25:16.025 --> 01:25:16.824
<v Speaker 1>here, let's hit go.

01:25:19.190 --> 01:25:19.909
<v Speaker 1>Nope.

01:25:20.230 --> 01:25:21.989
<v Speaker 1>Didn't like it. Okay. So

01:25:22.630 --> 01:25:24.789
<v Speaker 1>let's reconfigure some things

01:25:25.510 --> 01:25:26.869
<v Speaker 1>and get it to go.

01:25:29.110 --> 01:25:30.390
<v Speaker 0>Messaging environment?

01:25:31.175 --> 01:25:33.815
<v Speaker 1>I do need to make a public interface.

01:25:34.695 --> 01:25:37.575
<v Speaker 1>Right. That's that's the part that is is

01:25:37.575 --> 01:25:38.775
<v Speaker 1>missing. So,

01:25:39.575 --> 01:25:41.975
<v Speaker 1>I was wrong in my diagram.

01:25:42.615 --> 01:25:44.695
<v Speaker 1>You do have to map this to a

01:25:44.695 --> 01:25:45.415
<v Speaker 1>public interface.

01:25:46.500 --> 01:25:48.419
<v Speaker 1>And it needs to be the public interface

01:25:48.820 --> 01:25:51.460
<v Speaker 1>for your environment that you're in. Right? So,

01:25:51.460 --> 01:25:52.979
<v Speaker 1>we're gonna have a k eight s

01:25:53.619 --> 01:25:54.899
<v Speaker 1>public interface

01:25:55.940 --> 01:25:56.820
<v Speaker 1>here.

01:25:57.940 --> 01:25:59.539
<v Speaker 1>And the reason we need to do that

01:25:59.539 --> 01:26:01.155
<v Speaker 1>is that this

01:26:01.635 --> 01:26:02.594
<v Speaker 1>operation

01:26:02.915 --> 01:26:06.195
<v Speaker 1>and the service exposure need to know,

01:26:07.554 --> 01:26:09.074
<v Speaker 1>like, needs to be able to get at

01:26:09.074 --> 01:26:10.994
<v Speaker 1>how do I, like, actually run something on

01:26:10.994 --> 01:26:13.010
<v Speaker 1>this pod back here. The way that you

01:26:13.010 --> 01:26:14.850
<v Speaker 1>know how to do that is through your

01:26:14.850 --> 01:26:16.130
<v Speaker 1>kube config file.

01:26:16.290 --> 01:26:18.610
<v Speaker 1>Right? Because that contains, the service address and

01:26:18.610 --> 01:26:20.530
<v Speaker 1>your credentials and all that good stuff. And

01:26:20.530 --> 01:26:22.050
<v Speaker 1>we happen to have one attached to this

01:26:22.050 --> 01:26:22.690
<v Speaker 1>environment.

01:26:23.250 --> 01:26:25.090
<v Speaker 1>Because every time you create a Kubernetes environment

01:26:25.090 --> 01:26:26.210
<v Speaker 1>in Guidepad,

01:26:26.450 --> 01:26:29.325
<v Speaker 1>it creates a, you know, service account, attaches

01:26:29.325 --> 01:26:30.445
<v Speaker 1>the creds to it,

01:26:31.005 --> 01:26:33.485
<v Speaker 1>so that that service account can only manage

01:26:33.485 --> 01:26:35.885
<v Speaker 1>the stuff, like, in your the namespace attached

01:26:35.885 --> 01:26:37.405
<v Speaker 1>to that environment, basically.

01:26:38.285 --> 01:26:38.765
<v Speaker 1>Excuse me.

01:26:40.160 --> 01:26:40.640
<v Speaker 1>So,

01:26:41.200 --> 01:26:43.840
<v Speaker 1>yeah. So this is gonna be like this.

01:26:44.800 --> 01:26:48.000
<v Speaker 1>And what that does here is it, like,

01:26:48.080 --> 01:26:49.600
<v Speaker 1>gets credentials

01:26:50.880 --> 01:26:51.600
<v Speaker 1>and,

01:26:51.920 --> 01:26:53.120
<v Speaker 1>connection details.

01:26:57.555 --> 01:26:58.355
<v Speaker 1>Oops.

01:27:01.075 --> 01:27:01.955
<v Speaker 1>Okay.

01:27:02.675 --> 01:27:05.315
<v Speaker 1>Yeah. And let's, let's drag this down here

01:27:05.315 --> 01:27:06.515
<v Speaker 1>a little bit so you can, like, read

01:27:06.515 --> 01:27:06.755
<v Speaker 1>that.

01:27:09.739 --> 01:27:10.380
<v Speaker 1>Okay.

01:27:10.780 --> 01:27:12.619
<v Speaker 1>But it's, you know, it's this.

01:27:13.100 --> 01:27:15.500
<v Speaker 1>It's from this environment. So, we'll do that.

01:27:15.980 --> 01:27:16.780
<v Speaker 1>Great.

01:27:16.860 --> 01:27:17.500
<v Speaker 1>Okay.

01:27:19.340 --> 01:27:22.094
<v Speaker 1>Actually, this lives in here. This lives there.

01:27:22.415 --> 01:27:23.215
<v Speaker 1>Beautiful.

01:27:23.295 --> 01:27:24.735
<v Speaker 1>Alright. So, the only step we missed was

01:27:24.735 --> 01:27:26.575
<v Speaker 1>setting up the public interface on the service

01:27:26.575 --> 01:27:29.055
<v Speaker 1>exposure. It's just another attribute, so we can

01:27:29.055 --> 01:27:30.175
<v Speaker 1>do that pretty easily.

01:27:31.295 --> 01:27:33.135
<v Speaker 1>So, if I go through here and I

01:27:33.135 --> 01:27:34.975
<v Speaker 1>pull in let's go back to where we

01:27:34.975 --> 01:27:36.015
<v Speaker 1>made the service exposure.

01:27:42.820 --> 01:27:44.660
<v Speaker 1>You know what? Let me just, I'll just

01:27:44.660 --> 01:27:45.619
<v Speaker 1>do it down here.

01:27:47.060 --> 01:27:49.940
<v Speaker 0>Think it's still bound to s. Right? Yeah.

01:27:49.940 --> 01:27:50.660
<v Speaker 1>It is.

01:27:51.060 --> 01:27:52.820
<v Speaker 1>So I'm gonna

01:27:52.395 --> 01:27:54.075
<v Speaker 1>remove this. I'm gonna pull in the environment

01:27:54.075 --> 01:27:54.875
<v Speaker 1>real quick.

01:27:55.675 --> 01:27:56.395
<v Speaker 1>So,

01:27:57.115 --> 01:27:57.755
<v Speaker 1>environment.

01:28:01.995 --> 01:28:04.075
<v Speaker 1>And then

01:28:05.370 --> 01:28:11.450
<v Speaker 0>code.

01:28:21.405 --> 01:28:22.364
<v Speaker 1>Good. Good.

01:28:22.685 --> 01:28:24.285
<v Speaker 1>You can see it's a Kubernetes environment, so

01:28:24.285 --> 01:28:25.645
<v Speaker 1>it should have all the stuff that we

01:28:25.645 --> 01:28:27.165
<v Speaker 1>need. It should also have a public interface

01:28:27.165 --> 01:28:28.525
<v Speaker 1>attached to it, so let's just double check

01:28:28.525 --> 01:28:29.165
<v Speaker 1>that really quick.

01:28:32.929 --> 01:28:35.570
<v Speaker 1>Here we go. Yep. Public interface. So, what

01:28:35.570 --> 01:28:36.530
<v Speaker 1>we're gonna do is we're gonna take that

01:28:36.530 --> 01:28:38.449
<v Speaker 1>public interface, we're gonna link it to the

01:28:38.449 --> 01:28:40.530
<v Speaker 1>service exposure so that that

01:28:40.929 --> 01:28:43.650
<v Speaker 1>function I just ran will work. So, we've

01:28:43.650 --> 01:28:44.449
<v Speaker 1>got s,

01:28:44.929 --> 01:28:46.850
<v Speaker 1>then we have public interface ID.

01:28:47.405 --> 01:28:49.805
<v Speaker 1>I'm gonna say Rawkode public interface

01:28:51.245 --> 01:28:52.125
<v Speaker 1>first

01:28:52.365 --> 01:28:53.165
<v Speaker 1>ID.

01:28:53.885 --> 01:28:55.245
<v Speaker 1>And I'll just double check that it is

01:28:55.245 --> 01:28:56.765
<v Speaker 1>still down to s.

01:28:57.245 --> 01:28:58.685
<v Speaker 1>It is. Perfect.

01:28:59.805 --> 01:29:01.085
<v Speaker 1>And then we'll do s dot save.

01:29:07.840 --> 01:29:09.199
<v Speaker 0>The nice thing about you doing this is

01:29:09.199 --> 01:29:11.280
<v Speaker 0>the Jupyter Notebook is now you've got everything

01:29:11.280 --> 01:29:12.960
<v Speaker 0>saved as a re artifact of how you've

01:29:12.960 --> 01:29:15.625
<v Speaker 0>done it. Exactly. And I can show this

01:29:15.625 --> 01:29:16.985
<v Speaker 1>to people on my team. I can give

01:29:16.985 --> 01:29:19.225
<v Speaker 1>it to other folks. I can revisit this

01:29:19.225 --> 01:29:21.704
<v Speaker 1>when someone's like, how did you do that?

01:29:22.105 --> 01:29:22.905
<v Speaker 1>Yeah.

01:29:24.824 --> 01:29:26.585
<v Speaker 1>And we try to, as much as possible,

01:29:26.585 --> 01:29:28.264
<v Speaker 1>like, encourage our team to to do this.

01:29:28.264 --> 01:29:29.705
<v Speaker 1>I mean, that when we we have a

01:29:29.705 --> 01:29:32.000
<v Speaker 1>machine learning engineer write a bunch of blog

01:29:32.000 --> 01:29:33.520
<v Speaker 1>posts and he would just do all his

01:29:33.520 --> 01:29:35.760
<v Speaker 1>work here. Right? And then put the markdown

01:29:35.760 --> 01:29:37.680
<v Speaker 1>for the blog post, like, in line with

01:29:37.680 --> 01:29:40.719
<v Speaker 1>it. Mhmm. It's very, very convenient.

01:29:42.160 --> 01:29:43.920
<v Speaker 1>So yeah. Okay. So we have everything linked

01:29:43.920 --> 01:29:47.360
<v Speaker 1>up. That particular error shouldn't happen anymore. Let's

01:29:46.935 --> 01:29:48.375
<v Speaker 1>call the operation again,

01:29:48.935 --> 01:29:50.775
<v Speaker 1>and let's actually, like, save the result

01:29:51.175 --> 01:29:51.975
<v Speaker 1>too. Okay.

01:29:54.855 --> 01:29:55.495
<v Speaker 1>Okay.

01:29:55.895 --> 01:29:57.575
<v Speaker 1>I'm gonna be like that. I get it.

01:29:59.095 --> 01:30:02.055
<v Speaker 1>Public interface, surface exposure, public interface ID.

01:30:05.710 --> 01:30:06.830
<v Speaker 1>That's not right.

01:30:08.750 --> 01:30:11.150
<v Speaker 1>So the surface exposure should have that set.

01:30:15.895 --> 01:30:17.815
<v Speaker 1>Yep. And it should be doing that there.

01:30:17.815 --> 01:30:18.935
<v Speaker 1>So, let me just make sure. Maybe it

01:30:18.935 --> 01:30:20.215
<v Speaker 1>didn't get set properly.

01:30:21.975 --> 01:30:23.255
<v Speaker 1>No. That's set.

01:30:23.655 --> 01:30:24.855
<v Speaker 1>And if I look

01:30:25.095 --> 01:30:26.935
<v Speaker 1>for the public interface,

01:30:32.890 --> 01:30:33.850
<v Speaker 1>Gosh. Sorry.

01:30:34.650 --> 01:30:35.850
<v Speaker 1>Interface.

01:30:36.170 --> 01:30:36.810
<v Speaker 1>Interface.

01:30:42.885 --> 01:30:44.165
<v Speaker 1>I just wanna make sure, like, I can

01:30:44.165 --> 01:30:45.124
<v Speaker 1>find it myself.

01:30:49.525 --> 01:30:50.885
<v Speaker 1>Oh, and of course, it's gone now.

01:31:13.965 --> 01:31:15.485
<v Speaker 1>One thing I don't like about it is

01:31:15.485 --> 01:31:18.205
<v Speaker 1>that the copy key bindings, like, don't work

01:31:18.205 --> 01:31:20.125
<v Speaker 1>for stuff like in here. So, you have

01:31:20.125 --> 01:31:21.885
<v Speaker 1>to select

01:31:21.885 --> 01:31:24.445
<v Speaker 1>and then, like, copy and then paste.

01:31:24.990 --> 01:31:26.030
<v Speaker 1>Kind of annoying.

01:31:26.350 --> 01:31:27.790
<v Speaker 1>Okay. So we can find it when it

01:31:27.790 --> 01:31:28.670
<v Speaker 1>does it here,

01:31:29.070 --> 01:31:31.470
<v Speaker 1>and it's set properly on s.

01:31:33.710 --> 01:31:34.430
<v Speaker 1>Maybe

01:31:35.150 --> 01:31:36.510
<v Speaker 1>maybe it

01:31:36.510 --> 01:31:37.310
<v Speaker 1>didn't

01:31:38.110 --> 01:31:38.510
<v Speaker 1>take.

01:31:39.185 --> 01:31:41.025
<v Speaker 1>So let's pull it back out.

01:31:41.425 --> 01:31:42.784
<v Speaker 1>Let's inspect it.

01:31:46.705 --> 01:31:47.744
<v Speaker 1>Nope. It's there.

01:31:48.145 --> 01:31:50.545
<v Speaker 1>So we need do, like, some more digging.

01:31:50.545 --> 01:31:52.465
<v Speaker 1>Right? We need to, like, figure out where

01:31:52.545 --> 01:31:53.745
<v Speaker 1>somewhere in this

01:31:55.650 --> 01:31:57.890
<v Speaker 1>somewhere in this call chain, it's, like, not

01:31:57.890 --> 01:31:58.930
<v Speaker 1>getting the

01:31:59.570 --> 01:32:01.170
<v Speaker 1>public interface ID.

01:32:01.650 --> 01:32:04.370
<v Speaker 1>Okay. So let's go to the trace back.

01:32:05.010 --> 01:32:06.610
<v Speaker 1>It's here in

01:32:06.930 --> 01:32:07.650
<v Speaker 1>kube exec.

01:32:08.325 --> 01:32:11.285
<v Speaker 1>So this is the custom protocol implementation

01:32:11.285 --> 01:32:13.925
<v Speaker 1>for the KubeExec protocol that we did.

01:32:14.485 --> 01:32:17.445
<v Speaker 1>That's the whole backbone of this particular, like,

01:32:17.445 --> 01:32:21.125
<v Speaker 1>running stuff against a something deployed in Kubernetes.

01:32:21.765 --> 01:32:23.285
<v Speaker 1>So if we go to KubeExec

01:32:24.830 --> 01:32:25.790
<v Speaker 1>protocol,

01:32:26.510 --> 01:32:28.030
<v Speaker 1>we can see it's on

01:32:28.670 --> 01:32:29.869
<v Speaker 1>line 93,

01:32:30.430 --> 01:32:31.550
<v Speaker 1>which is right here.

01:32:33.230 --> 01:32:33.949
<v Speaker 1>No.

01:32:34.270 --> 01:32:35.070
<v Speaker 1>Not there.

01:32:37.715 --> 01:32:41.234
<v Speaker 1>I see. It's calling handle, cube exact exposure,

01:32:42.114 --> 01:32:44.195
<v Speaker 1>and then it's actually in handle cube mic.

01:32:44.195 --> 01:32:45.155
<v Speaker 1>Okay. Got it.

01:32:47.715 --> 01:32:48.834
<v Speaker 1>Yeah. Okay.

01:32:50.114 --> 01:32:51.795
<v Speaker 1>Public interface first. Oh,

01:32:52.880 --> 01:32:55.600
<v Speaker 1>okay. Well, it's saying you can't find that.

01:32:56.240 --> 01:32:58.159
<v Speaker 1>You know, keep this exposure.

01:33:01.280 --> 01:33:02.080
<v Speaker 1>Usages.

01:33:02.240 --> 01:33:05.200
<v Speaker 1>Okay. And so that happens in the operation.

01:33:08.385 --> 01:33:08.784
<v Speaker 1>Yep.

01:33:22.890 --> 01:33:24.650
<v Speaker 1>Sorry. I'm not sure if this is interesting

01:33:24.650 --> 01:33:25.370
<v Speaker 1>or not.

01:33:26.810 --> 01:33:28.890
<v Speaker 1>I'm just, so this is this is sort

01:33:28.890 --> 01:33:30.090
<v Speaker 1>of how you're getting to see how the

01:33:30.090 --> 01:33:31.610
<v Speaker 1>magic happens. Right? So,

01:33:32.170 --> 01:33:34.010
<v Speaker 1>when I call this operation,

01:33:34.090 --> 01:33:35.450
<v Speaker 1>right, like, when I do

01:33:37.050 --> 01:33:37.450
<v Speaker 1>this,

01:33:38.625 --> 01:33:41.024
<v Speaker 1>I'm basically doing the call,

01:33:41.264 --> 01:33:41.744
<v Speaker 1>like,

01:33:42.385 --> 01:33:45.425
<v Speaker 1>I'm I'm executing underscore underscore call on an

01:33:45.425 --> 01:33:46.224
<v Speaker 1>operation,

01:33:47.264 --> 01:33:49.425
<v Speaker 1>like, instance. Right? It's an instance of the

01:33:49.425 --> 01:33:50.945
<v Speaker 1>operation class. And so,

01:33:51.264 --> 01:33:52.704
<v Speaker 1>inside the operation,

01:33:53.370 --> 01:33:54.729
<v Speaker 1>there's an execute,

01:33:56.170 --> 01:33:57.690
<v Speaker 1>an execute method,

01:33:58.730 --> 01:33:59.610
<v Speaker 1>here.

01:34:01.050 --> 01:34:03.050
<v Speaker 1>And you can see this is another interesting

01:34:03.050 --> 01:34:05.770
<v Speaker 1>tidbit. It usually emits an event every time

01:34:05.145 --> 01:34:05.945
<v Speaker 1>it runs.

01:34:06.265 --> 01:34:07.465
<v Speaker 1>And so this helps us be a little

01:34:07.465 --> 01:34:08.665
<v Speaker 1>bit event driven. This is how we can,

01:34:08.665 --> 01:34:10.265
<v Speaker 1>like, wire things up to, like, when stuff

01:34:10.265 --> 01:34:12.105
<v Speaker 1>happens. Because you can set a requirement on

01:34:12.105 --> 01:34:13.625
<v Speaker 1>things, like your work plans and your state

01:34:13.625 --> 01:34:16.985
<v Speaker 1>plans that are conditional on a particular event

01:34:16.985 --> 01:34:17.545
<v Speaker 1>happening.

01:34:18.050 --> 01:34:20.530
<v Speaker 1>So those events could include,

01:34:20.530 --> 01:34:23.010
<v Speaker 1>like, an arbitrary operation firing,

01:34:23.250 --> 01:34:25.810
<v Speaker 1>right, or returning with a success or with

01:34:25.810 --> 01:34:26.530
<v Speaker 1>a failure,

01:34:27.090 --> 01:34:28.610
<v Speaker 1>or those things. And we we might see

01:34:28.610 --> 01:34:29.970
<v Speaker 1>that if we have another session where we

01:34:29.970 --> 01:34:31.970
<v Speaker 1>go into some other details.

01:34:31.970 --> 01:34:32.290
<v Speaker 1>But, anyway,

01:34:33.105 --> 01:34:35.425
<v Speaker 1>when you try to do execute though,

01:34:36.865 --> 01:34:37.744
<v Speaker 1>up in here,

01:34:38.705 --> 01:34:40.865
<v Speaker 1>it will do a couple things to figure

01:34:40.865 --> 01:34:43.825
<v Speaker 1>out like, oh, hey. Like, are you asynchronous?

01:34:43.825 --> 01:34:45.825
<v Speaker 1>Yes? No? Oh, I'm not asynchronous. I'm just

01:34:45.825 --> 01:34:46.945
<v Speaker 1>gonna do execute.

01:34:47.105 --> 01:34:48.225
<v Speaker 1>And then inside execute,

01:34:49.060 --> 01:34:50.739
<v Speaker 1>what's gonna happen is it tries to find

01:34:50.739 --> 01:34:51.780
<v Speaker 1>the implementation,

01:34:52.420 --> 01:34:53.699
<v Speaker 1>and the implementation,

01:34:54.260 --> 01:34:56.980
<v Speaker 1>could be one of three things. Right? It

01:34:56.980 --> 01:34:58.019
<v Speaker 1>could be either,

01:34:58.580 --> 01:35:00.420
<v Speaker 1>a surface exposure, which is what we're doing.

01:35:01.954 --> 01:35:02.594
<v Speaker 1>Right?

01:35:02.994 --> 01:35:04.274
<v Speaker 1>Or it could be,

01:35:04.755 --> 01:35:07.155
<v Speaker 1>handled in some remote artifact and you download

01:35:07.155 --> 01:35:09.235
<v Speaker 1>it and then compile the artifact and then

01:35:09.235 --> 01:35:10.835
<v Speaker 1>run it in the artifact or run it

01:35:10.835 --> 01:35:12.355
<v Speaker 1>from the artifact or you're just running a

01:35:12.355 --> 01:35:14.355
<v Speaker 1>local handler, which is what happens down here.

01:35:14.355 --> 01:35:15.950
<v Speaker 1>So we're up in the first case, right,

01:35:15.950 --> 01:35:16.670
<v Speaker 1>which is

01:35:17.390 --> 01:35:19.550
<v Speaker 1>we need to we're trying to execute this

01:35:19.550 --> 01:35:22.110
<v Speaker 1>operation through a service exposure, so we build

01:35:22.110 --> 01:35:24.830
<v Speaker 1>a partial function and return that.

01:35:26.350 --> 01:35:29.230
<v Speaker 1>And then we attach the target service exposure

01:35:30.255 --> 01:35:31.855
<v Speaker 1>as the first thing.

01:35:32.175 --> 01:35:34.574
<v Speaker 1>So the issue is you can see it's

01:35:34.574 --> 01:35:36.655
<v Speaker 1>trying to use provided by first,

01:35:38.495 --> 01:35:39.054
<v Speaker 1>and

01:35:39.614 --> 01:35:41.855
<v Speaker 1>what we've done is we've saved the public

01:35:41.855 --> 01:35:43.295
<v Speaker 1>interface on the service exposure,

01:35:44.610 --> 01:35:46.210
<v Speaker 1>but we haven't refreshed

01:35:46.210 --> 01:35:49.249
<v Speaker 1>the database definition of the operation.

01:35:49.489 --> 01:35:51.730
<v Speaker 1>Right. Right? So the operation is stale, and

01:35:51.730 --> 01:35:53.969
<v Speaker 1>so its service exposure pointer doesn't have the

01:35:53.969 --> 01:35:55.489
<v Speaker 1>public interface ID that we just set.

01:35:57.125 --> 01:35:59.364
<v Speaker 1>So one way to solve this within Guidepad

01:35:59.364 --> 01:36:01.045
<v Speaker 1>would be to have something like an instance

01:36:01.045 --> 01:36:03.285
<v Speaker 1>map where at the process level, we have

01:36:03.285 --> 01:36:04.965
<v Speaker 1>a map of all the objects that are

01:36:04.965 --> 01:36:06.005
<v Speaker 1>sort of in scope,

01:36:06.485 --> 01:36:08.725
<v Speaker 1>and then operations on one of them would

01:36:08.725 --> 01:36:10.165
<v Speaker 1>change it for everything that has a reference

01:36:10.165 --> 01:36:12.180
<v Speaker 1>to it. I haven't implemented that yet, but

01:36:12.180 --> 01:36:14.100
<v Speaker 1>it's on my sort of, like, internal mat

01:36:14.260 --> 01:36:16.020
<v Speaker 1>road map to do that one day.

01:36:16.740 --> 01:36:18.180
<v Speaker 1>Anyway, so what what that means we have

01:36:18.180 --> 01:36:19.780
<v Speaker 1>to do is just, like, we just have

01:36:19.780 --> 01:36:21.780
<v Speaker 1>to reload the we can either reload the

01:36:21.780 --> 01:36:22.500
<v Speaker 1>operation,

01:36:23.060 --> 01:36:25.140
<v Speaker 1>which will fetch the proper

01:36:26.625 --> 01:36:28.065
<v Speaker 1>which will fetch the proper,

01:36:28.785 --> 01:36:30.785
<v Speaker 1>service exposure details from the database or I

01:36:30.785 --> 01:36:32.145
<v Speaker 1>could just, like, reassign it.

01:36:32.625 --> 01:36:34.225
<v Speaker 1>We'll we'll do the former,

01:36:34.305 --> 01:36:36.225
<v Speaker 1>and just fetch it again from the database.

01:36:36.225 --> 01:36:36.864
<v Speaker 1>So

01:36:37.350 --> 01:36:38.710
<v Speaker 1>or fetch it for the first time because

01:36:38.710 --> 01:36:40.710
<v Speaker 1>we never we never fetched it after

01:36:42.070 --> 01:36:43.910
<v Speaker 1>creating it. So, let's do that.

01:36:47.750 --> 01:36:49.110
<v Speaker 1>So, we'll do that here.

01:36:49.990 --> 01:36:51.270
<v Speaker 1>You know what? Let me insert.

01:36:54.075 --> 01:36:55.675
<v Speaker 1>I know there's an insert above. I think

01:36:55.675 --> 01:36:57.595
<v Speaker 1>it's a right click operation. Yep.

01:36:59.835 --> 01:37:00.475
<v Speaker 1>No.

01:37:01.115 --> 01:37:01.915
<v Speaker 1>No.

01:37:03.355 --> 01:37:04.235
<v Speaker 1>Fair enough.

01:37:04.715 --> 01:37:05.595
<v Speaker 1>Can I drag you?

01:37:06.460 --> 01:37:08.300
<v Speaker 1>You can also see, like, I I don't

01:37:08.300 --> 01:37:09.579
<v Speaker 1>do this too much either.

01:37:10.619 --> 01:37:12.860
<v Speaker 1>So let's cut let's cut you, paste you,

01:37:12.860 --> 01:37:14.939
<v Speaker 1>and then we're going to take this guy,

01:37:15.260 --> 01:37:17.260
<v Speaker 1>and we're going to fetch it again.

01:37:19.995 --> 01:37:21.994
<v Speaker 1>Yeah. Perfect. Okay.

01:37:22.475 --> 01:37:23.195
<v Speaker 1>So

01:37:23.835 --> 01:37:24.875
<v Speaker 1>that's

01:37:24.875 --> 01:37:25.835
<v Speaker 1>done here.

01:37:26.235 --> 01:37:28.235
<v Speaker 1>And then we're gonna do a list single

01:37:28.235 --> 01:37:29.995
<v Speaker 1>instead of this creation.

01:37:36.080 --> 01:37:37.440
<v Speaker 1>I know I didn't need to do that,

01:37:37.440 --> 01:37:38.239
<v Speaker 1>but whatever.

01:37:40.080 --> 01:37:41.519
<v Speaker 1>Good. Good. Good.

01:37:42.159 --> 01:37:43.840
<v Speaker 1>Okay. Great. And so let's take a peek

01:37:43.840 --> 01:37:45.920
<v Speaker 1>at that service exposure thing just to make

01:37:45.920 --> 01:37:47.440
<v Speaker 1>sure that it's

01:37:48.465 --> 01:37:51.025
<v Speaker 1>wired all wired up properly. Should be.

01:37:52.065 --> 01:37:53.104
<v Speaker 1>Provided by

01:37:53.985 --> 01:37:55.184
<v Speaker 1>provided by

01:37:55.745 --> 01:37:56.704
<v Speaker 1>First. Yep.

01:37:57.985 --> 01:37:58.465
<v Speaker 1>And then,

01:38:00.540 --> 01:38:03.100
<v Speaker 1>there we go. Good oof. Should be good

01:38:03.100 --> 01:38:05.020
<v Speaker 1>now. Okay. Let's do it again

01:38:07.500 --> 01:38:08.940
<v Speaker 1>and see where we get.

01:38:10.460 --> 01:38:11.260
<v Speaker 1>It's

01:38:11.260 --> 01:38:13.580
<v Speaker 1>it's doing stuff. Stuff that's happening.

01:38:16.155 --> 01:38:17.594
<v Speaker 1>Okay. It returned

01:38:18.395 --> 01:38:19.195
<v Speaker 1>and

01:38:19.835 --> 01:38:22.395
<v Speaker 0>What should I say? Oh, hey.

01:38:22.635 --> 01:38:24.635
<v Speaker 1>Hey. It works. Great.

01:38:26.155 --> 01:38:26.635
<v Speaker 1>So,

01:38:27.520 --> 01:38:28.719
<v Speaker 1>yeah. Okay.

01:38:31.520 --> 01:38:33.280
<v Speaker 1>So now you could put arbitrary

01:38:33.360 --> 01:38:34.400
<v Speaker 1>JavaScript

01:38:34.400 --> 01:38:35.760
<v Speaker 1>inside that operation.

01:38:36.080 --> 01:38:39.360
<v Speaker 1>Right? And it would run inside the executor

01:38:39.360 --> 01:38:41.040
<v Speaker 1>just by, like, reregistering

01:38:41.040 --> 01:38:41.600
<v Speaker 1>the

01:38:42.255 --> 01:38:43.295
<v Speaker 1>implementation.

01:38:44.415 --> 01:38:46.735
<v Speaker 1>You could also so, like, you know, here.

01:38:46.735 --> 01:38:49.215
<v Speaker 1>Right? Like, you could register a different handler.

01:38:49.375 --> 01:38:51.375
<v Speaker 1>Right? And then rerun it. So, like, let's

01:38:51.375 --> 01:38:52.655
<v Speaker 1>do it. You know? Let's do

01:38:53.534 --> 01:38:54.255
<v Speaker 1>hi

01:38:54.910 --> 01:38:55.949
<v Speaker 1>instead of hello.

01:39:06.910 --> 01:39:08.990
<v Speaker 1>It's not optimized, so it's not the fastest

01:39:08.990 --> 01:39:10.030
<v Speaker 1>thing in the world, but

01:39:11.815 --> 01:39:13.494
<v Speaker 0>Very nice. Yes.

01:39:14.935 --> 01:39:17.175
<v Speaker 1>So, yeah. Should I re go over sort

01:39:17.175 --> 01:39:19.335
<v Speaker 1>of, like, what's happening there? Or, like, what

01:39:19.335 --> 01:39:21.415
<v Speaker 1>do you what what are you interested in

01:39:21.415 --> 01:39:23.175
<v Speaker 1>in taking away from that?

01:39:24.300 --> 01:39:25.820
<v Speaker 0>I mean, I think I need a nap

01:39:25.820 --> 01:39:27.100
<v Speaker 0>after that. Okay.

01:39:30.060 --> 01:39:31.660
<v Speaker 1>Lucky I mean, I have to go back

01:39:31.660 --> 01:39:34.140
<v Speaker 1>to work, but I have a nap too.

01:39:35.420 --> 01:39:36.620
<v Speaker 0>No. I think

01:39:37.340 --> 01:39:40.035
<v Speaker 0>the way that you've walked through that really

01:39:40.035 --> 01:39:42.115
<v Speaker 0>helps solidify all the ideas. You know, I

01:39:42.115 --> 01:39:43.955
<v Speaker 0>think if people are watching this, right, and

01:39:43.955 --> 01:39:46.275
<v Speaker 0>you've stayed for nearly two hours to understand

01:39:46.275 --> 01:39:47.235
<v Speaker 0>how this works,

01:39:47.875 --> 01:39:50.035
<v Speaker 0>what they're gonna take away is everything is

01:39:50.035 --> 01:39:51.475
<v Speaker 0>a type. And I I love the way

01:39:51.475 --> 01:39:53.520
<v Speaker 0>that Jupyter notebook reveals that as well. You've

01:39:53.520 --> 01:39:55.199
<v Speaker 0>been pulling things out of the registry. You've

01:39:55.199 --> 01:39:57.360
<v Speaker 0>been using the methods for less less single,

01:39:57.520 --> 01:39:59.199
<v Speaker 0>even creating some resources.

01:39:59.360 --> 01:40:00.880
<v Speaker 0>All of this is just stored

01:40:01.280 --> 01:40:03.280
<v Speaker 0>as a as as like JSON, right, and

01:40:03.280 --> 01:40:06.239
<v Speaker 0>your your backing store and register Yeah. You

01:40:06.239 --> 01:40:06.800
<v Speaker 1>wanna see it?

01:40:08.845 --> 01:40:09.804
<v Speaker 1>This is you.

01:40:10.605 --> 01:40:12.445
<v Speaker 1>This is your this is your instance.

01:40:12.765 --> 01:40:14.284
<v Speaker 1>Yep. It's MongoDB.

01:40:14.765 --> 01:40:15.324
<v Speaker 1>But,

01:40:15.725 --> 01:40:16.605
<v Speaker 1>if we,

01:40:17.085 --> 01:40:19.005
<v Speaker 1>take a peek at this and I know

01:40:19.005 --> 01:40:20.685
<v Speaker 1>you said you needed an app, I apologize

01:40:20.685 --> 01:40:23.969
<v Speaker 1>for, like, dragging this on. But if I

01:40:23.969 --> 01:40:25.409
<v Speaker 1>do this, so from

01:40:25.969 --> 01:40:28.209
<v Speaker 1>Guidepad import datastore.

01:40:28.289 --> 01:40:29.889
<v Speaker 1>Right? And do datastore,

01:40:30.130 --> 01:40:32.210
<v Speaker 1>session datastores, datastores by name.

01:40:34.765 --> 01:40:37.405
<v Speaker 1>It's not just the one. Right? There's three

01:40:37.405 --> 01:40:39.725
<v Speaker 1>in play here. There's one that stores your

01:40:39.725 --> 01:40:41.244
<v Speaker 1>secrets encrypted at rest.

01:40:42.205 --> 01:40:44.525
<v Speaker 1>There's one that stores all that data. That's

01:40:44.525 --> 01:40:45.645
<v Speaker 1>what this is what we were just looking

01:40:45.645 --> 01:40:48.760
<v Speaker 1>at. Right? And then there's this one which

01:40:48.760 --> 01:40:50.760
<v Speaker 1>we haven't looked at, but it stores only

01:40:50.760 --> 01:40:52.600
<v Speaker 1>two types in there right now, log and

01:40:52.920 --> 01:40:54.840
<v Speaker 1>an event. Those two types go in there.

01:40:54.840 --> 01:40:56.600
<v Speaker 1>But that's all transparent. Right? So, like, if

01:40:56.600 --> 01:40:58.760
<v Speaker 1>I were to import the log type and

01:40:58.760 --> 01:41:00.360
<v Speaker 1>then do log dot list, it would go

01:41:00.360 --> 01:41:01.880
<v Speaker 1>out to that data store.

01:41:03.605 --> 01:41:05.525
<v Speaker 1>But you wouldn't know that. Right? Unless you

01:41:05.525 --> 01:41:07.045
<v Speaker 1>cared about it, in which case you wouldn't

01:41:07.045 --> 01:41:08.245
<v Speaker 1>know about it. But yeah. So this is

01:41:08.245 --> 01:41:08.724
<v Speaker 1>all

01:41:09.685 --> 01:41:11.844
<v Speaker 1>all of it stored in here. Right? All

01:41:11.844 --> 01:41:13.284
<v Speaker 1>of those things that we were fetching.

01:41:13.844 --> 01:41:15.525
<v Speaker 1>Same thing that showed on the user interface,

01:41:15.525 --> 01:41:16.885
<v Speaker 1>same thing that we interfaced with on the

01:41:16.885 --> 01:41:17.605
<v Speaker 1>on the command line.

01:41:19.190 --> 01:41:21.110
<v Speaker 0>Yeah. I I just think this is super

01:41:21.110 --> 01:41:23.750
<v Speaker 0>cool the way it's all the keywords is

01:41:23.750 --> 01:41:25.749
<v Speaker 0>what you said earlier. Right? It's composition.

01:41:26.070 --> 01:41:28.390
<v Speaker 0>And all these types come together to provide

01:41:28.390 --> 01:41:29.269
<v Speaker 0>a very

01:41:29.715 --> 01:41:31.635
<v Speaker 0>I don't wanna say a cohesive system. Right?

01:41:31.635 --> 01:41:33.395
<v Speaker 0>But, you know, whatever system you're trying to

01:41:33.395 --> 01:41:35.554
<v Speaker 0>build, you can architect those types to do

01:41:35.554 --> 01:41:37.875
<v Speaker 0>the things that you want. And there there's

01:41:37.875 --> 01:41:40.034
<v Speaker 0>so many things we could dive into. I

01:41:40.034 --> 01:41:41.875
<v Speaker 0>mean, even the event driven stuff with the

01:41:41.875 --> 01:41:43.795
<v Speaker 0>annotation on the function was really cool, but

01:41:43.795 --> 01:41:45.074
<v Speaker 0>I think what we need to do

01:41:45.700 --> 01:41:49.140
<v Speaker 0>is schedule a follow-up Sure. Where we can

01:41:49.140 --> 01:41:50.900
<v Speaker 0>dive into some of these concepts in more

01:41:50.900 --> 01:41:51.540
<v Speaker 0>detail,

01:41:51.780 --> 01:41:54.020
<v Speaker 0>build something else, and just keep showing people

01:41:54.020 --> 01:41:56.500
<v Speaker 0>the power of the Guidepad the Guidepad framework

01:41:56.500 --> 01:41:58.420
<v Speaker 0>because there's a lot to digest here.

01:41:59.225 --> 01:42:01.305
<v Speaker 0>So I'm gonna say let's leave it there

01:42:01.305 --> 01:42:03.785
<v Speaker 0>for now. Okay. And a follow-up scheduled. And,

01:42:03.785 --> 01:42:05.785
<v Speaker 0>hopefully, you know, if you've watched us, please

01:42:05.785 --> 01:42:08.265
<v Speaker 0>leave comments in the comment section. Let us

01:42:08.265 --> 01:42:09.785
<v Speaker 0>know what you want us to build, what

01:42:09.785 --> 01:42:11.305
<v Speaker 0>you want us to dive deeper into, and

01:42:11.305 --> 01:42:12.745
<v Speaker 0>we'll make sure that we have a follow-up

01:42:12.745 --> 01:42:14.265
<v Speaker 0>where we go into this in much more

01:42:14.265 --> 01:42:14.665
<v Speaker 0>detail.

01:42:15.120 --> 01:42:17.200
<v Speaker 0>I'm gonna pop over just to our big

01:42:17.200 --> 01:42:18.800
<v Speaker 0>face mode now so we can Sure. Cool.

01:42:18.800 --> 01:42:19.440
<v Speaker 1>Up.

01:42:20.160 --> 01:42:22.320
<v Speaker 0>Just because I I also wanna get home

01:42:22.320 --> 01:42:24.080
<v Speaker 0>to do my daughter's bedtime. So that Oh,

01:42:24.080 --> 01:42:25.440
<v Speaker 1>yeah. Makes sense.

01:42:26.240 --> 01:42:28.240
<v Speaker 0>But that was fantastic. Thank you so much,

01:42:28.240 --> 01:42:30.045
<v Speaker 0>Matthew. Like Thanks for having me. And thanks

01:42:30.045 --> 01:42:32.925
<v Speaker 1>for many times. But What's that? You can

01:42:33.005 --> 01:42:34.685
<v Speaker 0>I've said this so many times to you,

01:42:34.685 --> 01:42:37.244
<v Speaker 0>to Reggie, and and on previous videos. Right?

01:42:37.245 --> 01:42:38.125
<v Speaker 0>The things

01:42:38.445 --> 01:42:39.965
<v Speaker 0>it's really as limitless, the things you can

01:42:39.965 --> 01:42:42.285
<v Speaker 0>do with Guidepad. Like, your own imagination is

01:42:42.285 --> 01:42:43.565
<v Speaker 0>the only limitation.

01:42:43.940 --> 01:42:45.619
<v Speaker 0>And I hope what people take away from

01:42:45.619 --> 01:42:46.900
<v Speaker 0>that is just, like,

01:42:47.699 --> 01:42:50.580
<v Speaker 0>understanding those atomic types, the primitives, how you

01:42:50.580 --> 01:42:51.699
<v Speaker 0>can pose them together.

01:42:51.940 --> 01:42:54.420
<v Speaker 0>You really can build anything on this. So,

01:42:54.420 --> 01:42:56.100
<v Speaker 0>you know, go to Guidepad.io,

01:42:56.100 --> 01:42:57.540
<v Speaker 0>check out the website, and get in touch

01:42:57.540 --> 01:42:58.260
<v Speaker 0>with the team and,

01:42:59.325 --> 01:43:01.565
<v Speaker 0>yeah, make some awesome things together.

01:43:01.965 --> 01:43:04.125
<v Speaker 1>Well, yeah, thanks for thanks for having us.

01:43:04.125 --> 01:43:05.725
<v Speaker 1>It's been a been a pleasure. Thanks for

01:43:05.725 --> 01:43:06.765
<v Speaker 1>putting up with my

01:43:07.165 --> 01:43:08.925
<v Speaker 1>my mind. I mean, because Guidepad is is

01:43:08.925 --> 01:43:11.565
<v Speaker 1>like it's my brain. So thanks for thanks

01:43:11.565 --> 01:43:13.085
<v Speaker 1>for living inside it for two hours. I

01:43:13.085 --> 01:43:15.930
<v Speaker 1>appreciate that. Definitely my pleasure. Was a whole

01:43:15.930 --> 01:43:17.449
<v Speaker 0>lot of fun. Any

01:43:17.690 --> 01:43:19.690
<v Speaker 0>last words before we we say goodbye to

01:43:19.690 --> 01:43:20.170
<v Speaker 0>people?

01:43:20.570 --> 01:43:22.490
<v Speaker 1>Oh, I think I've said enough. But looking

01:43:22.490 --> 01:43:24.090
<v Speaker 1>forward to looking forward to the next thing

01:43:24.090 --> 01:43:24.889
<v Speaker 1>we get to do.

01:43:25.690 --> 01:43:28.344
<v Speaker 1>Yeah. I had fun. So, again Me too.

01:43:28.185 --> 01:43:31.065
<v Speaker 1>Thanks for having me. Yep. Alright. To everyone

01:43:31.065 --> 01:43:32.985
<v Speaker 0>watching, thank you for joining us. And remember

01:43:32.985 --> 01:43:34.745
<v Speaker 0>to get your comments into the comment section.

01:43:34.745 --> 01:43:36.585
<v Speaker 0>Matthew and I will definitely be following up

01:43:36.585 --> 01:43:38.745
<v Speaker 0>again soon. And, Matthew, thank you again for

01:43:38.745 --> 01:43:40.905
<v Speaker 0>walking us through that. I'll speak to you

01:43:40.905 --> 01:43:43.389
<v Speaker 0>shortly. To everyone else, have a great evening.

01:43:44.429 --> 01:43:44.909
<v Speaker 1>Take care.

01:44:00.635 --> 01:44:02.875
<v Speaker 1>Thank you for watching Rawkode Live.
