WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 825b7b03-0fba-47b9-b43f-38b29220a8d5
Created: 2025-04-29T13:55:40.311Z
Duration: 899.0484
Channels: 1

00:00:00.000 --> 00:00:02.320
<v Speaker 0>Welcome back to the complete guide to Spin

00:00:02.320 --> 00:00:05.279
<v Speaker 0>here at the Rawkode Academy. In today's video,

00:00:05.279 --> 00:00:07.040
<v Speaker 0>we're going to carry on with our SDK

00:00:07.040 --> 00:00:10.320
<v Speaker 0>walkthroughs taking a look at the Python SDK.

00:00:10.320 --> 00:00:12.480
<v Speaker 0>Let's dive in. So in order to get

00:00:12.480 --> 00:00:14.719
<v Speaker 0>started with the Python SDK for Spin, you

00:00:14.719 --> 00:00:17.265
<v Speaker 0>will have to install the py to WASM

00:00:17.265 --> 00:00:19.585
<v Speaker 0>plugin. So to get started with the Python

00:00:19.585 --> 00:00:21.904
<v Speaker 0>SDK for Spin, the first thing you need

00:00:21.904 --> 00:00:23.345
<v Speaker 0>to do is make sure you are on

00:00:23.345 --> 00:00:24.785
<v Speaker 0>version 0.9

00:00:24.785 --> 00:00:27.105
<v Speaker 0>or greater. Once you have that version of

00:00:27.105 --> 00:00:27.744
<v Speaker 0>Spin available,

00:00:28.210 --> 00:00:31.089
<v Speaker 0>you can run Spin plugins update.

00:00:31.169 --> 00:00:33.809
<v Speaker 0>From there, you can install Spin plugins install

00:00:33.809 --> 00:00:34.850
<v Speaker 0>Pytorwasm.

00:00:34.850 --> 00:00:37.250
<v Speaker 0>And in order to generate a new Python

00:00:37.250 --> 00:00:40.050
<v Speaker 0>project with the Spin CLI, you will also

00:00:40.050 --> 00:00:42.850
<v Speaker 0>need to add with Spin template install

00:00:43.205 --> 00:00:44.805
<v Speaker 0>the Python SDK.

00:00:44.885 --> 00:00:47.605
<v Speaker 0>From there, you can generate a new Spin

00:00:47.605 --> 00:00:49.845
<v Speaker 0>project with Spin new and this will give

00:00:49.845 --> 00:00:52.325
<v Speaker 0>you a directory structure like so. We have

00:00:52.325 --> 00:00:55.125
<v Speaker 0>a pip file which has all of the

00:00:55.205 --> 00:00:57.950
<v Speaker 0>dependencies that we need, which for this example

00:00:57.950 --> 00:00:59.390
<v Speaker 0>is zero at the moment.

00:00:59.790 --> 00:01:02.270
<v Speaker 0>We also get an app dot py which

00:01:02.270 --> 00:01:04.830
<v Speaker 0>defines a handle request function and returns a

00:01:04.830 --> 00:01:06.350
<v Speaker 0>200 response.

00:01:06.430 --> 00:01:08.590
<v Speaker 0>We'll dive into the Python code in just

00:01:08.590 --> 00:01:10.910
<v Speaker 0>a moment. Lastly, we have to spin dot

00:01:10.910 --> 00:01:12.275
<v Speaker 0>toml. Here,

00:01:12.515 --> 00:01:14.674
<v Speaker 0>we can see the three components that we

00:01:14.674 --> 00:01:15.235
<v Speaker 0>expect

00:01:15.475 --> 00:01:19.075
<v Speaker 0>for all spin components. One, the build step,

00:01:19.075 --> 00:01:19.795
<v Speaker 0>two,

00:01:19.875 --> 00:01:22.515
<v Speaker 0>the trigger, and three, the ID and the

00:01:22.515 --> 00:01:24.899
<v Speaker 0>source simple. Now we can test that this

00:01:24.899 --> 00:01:28.420
<v Speaker 0>works as expected by running spin build.

00:01:29.700 --> 00:01:32.100
<v Speaker 0>From there, we can run spin up, and

00:01:32.100 --> 00:01:33.219
<v Speaker 0>this will show us that we have an

00:01:33.219 --> 00:01:36.740
<v Speaker 0>HTTP server running on local host 3,000.

00:01:37.455 --> 00:01:38.655
<v Speaker 0>Using curl,

00:01:40.494 --> 00:01:43.375
<v Speaker 0>we can confirm our endpoint works like so.

00:01:43.375 --> 00:01:46.015
<v Speaker 0>Perfect. So like the other SDK walk throughs,

00:01:46.015 --> 00:01:47.534
<v Speaker 0>what we're going to do is run through

00:01:47.534 --> 00:01:50.335
<v Speaker 0>some common tasks that are almost ubiquitous when

00:01:50.335 --> 00:01:52.575
<v Speaker 0>working with the Spin SDKs.

00:01:53.799 --> 00:01:56.439
<v Speaker 0>Our first endpoint, which we've already seen because

00:01:56.439 --> 00:01:59.720
<v Speaker 0>Spin new generated that all for us. We

00:01:59.720 --> 00:02:01.640
<v Speaker 0>have an endpoint that allows us to print

00:02:01.640 --> 00:02:02.759
<v Speaker 0>out hello world.

00:02:03.080 --> 00:02:05.399
<v Speaker 0>However, we'll make a small modification to this

00:02:05.585 --> 00:02:07.424
<v Speaker 0>and run through the build and run steps

00:02:07.424 --> 00:02:09.264
<v Speaker 0>one more time. From there, we're going to

00:02:09.264 --> 00:02:10.625
<v Speaker 0>take a look at how we work and

00:02:10.625 --> 00:02:12.385
<v Speaker 0>interact with HTTP

00:02:12.385 --> 00:02:13.665
<v Speaker 0>for Spin component.

00:02:13.665 --> 00:02:16.065
<v Speaker 0>We're going to get the headers, parse HTTP

00:02:16.065 --> 00:02:18.864
<v Speaker 0>body, and even parse and understand the query

00:02:18.864 --> 00:02:19.345
<v Speaker 0>parameters.

00:02:20.120 --> 00:02:21.880
<v Speaker 0>Lastly, we'll take a look and make an

00:02:21.880 --> 00:02:25.720
<v Speaker 0>outbound HTTP requests with the Spin SDK. So

00:02:25.720 --> 00:02:27.720
<v Speaker 0>let's make that first change to our Python

00:02:27.720 --> 00:02:28.440
<v Speaker 0>code.

00:02:28.520 --> 00:02:30.200
<v Speaker 0>What's important to note here is that this

00:02:30.200 --> 00:02:33.000
<v Speaker 0>is just any regular Python program like working

00:02:33.000 --> 00:02:34.680
<v Speaker 0>with any of the Spin SDKs.

00:02:35.075 --> 00:02:37.875
<v Speaker 0>You don't actually need to learn anything new

00:02:37.875 --> 00:02:40.435
<v Speaker 0>to start building web assembly components.

00:02:40.754 --> 00:02:44.035
<v Speaker 0>So let's show we can add hello world

00:02:44.275 --> 00:02:46.355
<v Speaker 0>on the CLI

00:02:47.315 --> 00:02:48.355
<v Speaker 0>minus

00:02:48.995 --> 00:02:51.540
<v Speaker 0>an extra quote. So let's modify

00:02:51.540 --> 00:02:53.060
<v Speaker 0>our simple generated

00:02:53.060 --> 00:02:55.780
<v Speaker 0>endpoint to return a JSON payload.

00:02:56.340 --> 00:02:59.220
<v Speaker 0>First, step one, make sure we're returning the

00:02:59.220 --> 00:03:00.900
<v Speaker 0>correct content header

00:03:00.980 --> 00:03:03.795
<v Speaker 0>or content type header as part of the

00:03:03.795 --> 00:03:05.075
<v Speaker 0>HTTP response.

00:03:06.115 --> 00:03:09.155
<v Speaker 0>Next, we're gonna import from JSON

00:03:10.995 --> 00:03:12.035
<v Speaker 0>dumps

00:03:12.275 --> 00:03:14.195
<v Speaker 0>assuming that I can remember how to type

00:03:14.195 --> 00:03:16.400
<v Speaker 0>any Python code. Next, we're going to remove

00:03:16.400 --> 00:03:18.959
<v Speaker 0>this f string and then use our dumps

00:03:18.959 --> 00:03:21.600
<v Speaker 0>function with a Python dictionary

00:03:21.760 --> 00:03:23.920
<v Speaker 0>where we will see that my name

00:03:24.720 --> 00:03:26.720
<v Speaker 0>is David. And I don't have a Python

00:03:26.720 --> 00:03:27.840
<v Speaker 0>format installed,

00:03:27.840 --> 00:03:29.280
<v Speaker 0>so I'll just do it the hard way.

00:03:30.805 --> 00:03:32.805
<v Speaker 0>Next, run spin build,

00:03:34.005 --> 00:03:34.885
<v Speaker 0>spin up

00:03:35.605 --> 00:03:37.765
<v Speaker 0>and we'll run a curl one more time.

00:03:38.325 --> 00:03:40.645
<v Speaker 0>Only this time, I'm feeling rather confident

00:03:40.965 --> 00:03:43.205
<v Speaker 0>and we're gonna pipe it straight to JQ.

00:03:44.050 --> 00:03:46.050
<v Speaker 0>And as you can see, we have the

00:03:46.050 --> 00:03:47.330
<v Speaker 0>print statement

00:03:47.569 --> 00:03:49.730
<v Speaker 0>running on our spin up here

00:03:49.970 --> 00:03:52.610
<v Speaker 0>as well as the JSON output from our

00:03:52.610 --> 00:03:54.050
<v Speaker 0>HTTP response.

00:03:54.130 --> 00:03:56.370
<v Speaker 0>So that is our first HTTP endpoint with

00:03:56.370 --> 00:03:58.690
<v Speaker 0>a simple modification to work with JSON.

00:03:59.365 --> 00:04:00.085
<v Speaker 0>Nice.

00:04:00.165 --> 00:04:02.645
<v Speaker 0>So let's talk about request headers.

00:04:02.965 --> 00:04:05.285
<v Speaker 0>How do we get the headers from HTTP

00:04:05.285 --> 00:04:08.405
<v Speaker 0>request being made? And before we dive straight

00:04:08.405 --> 00:04:10.085
<v Speaker 0>in to type in some code, I have

00:04:10.085 --> 00:04:12.379
<v Speaker 0>a confession to make. Unfortunately,

00:04:12.379 --> 00:04:14.700
<v Speaker 0>the LSP for Python is not going to

00:04:14.700 --> 00:04:16.860
<v Speaker 0>help us to auto complete our way to

00:04:16.860 --> 00:04:18.380
<v Speaker 0>victory in this code.

00:04:18.540 --> 00:04:20.620
<v Speaker 0>And there's some interesting reasons why.

00:04:21.339 --> 00:04:23.419
<v Speaker 0>So first, why am I telling you this?

00:04:23.665 --> 00:04:24.225
<v Speaker 0>Well,

00:04:24.865 --> 00:04:27.345
<v Speaker 0>normally, what we would do is provide enough

00:04:27.345 --> 00:04:29.505
<v Speaker 0>typing to our code like so to

00:04:30.225 --> 00:04:31.105
<v Speaker 0>autocomplete

00:04:31.105 --> 00:04:34.065
<v Speaker 0>on headers, methods available on headers,

00:04:34.465 --> 00:04:35.665
<v Speaker 0>on the body,

00:04:35.665 --> 00:04:38.310
<v Speaker 0>on the status, and so forth. However, as

00:04:38.310 --> 00:04:40.150
<v Speaker 0>you can see on the screen here, we

00:04:40.150 --> 00:04:41.830
<v Speaker 0>see unknown for request.

00:04:41.909 --> 00:04:44.310
<v Speaker 0>And this is because the Python SDK for

00:04:44.310 --> 00:04:47.110
<v Speaker 0>Fermion Spin is not written in Python. So

00:04:47.110 --> 00:04:49.990
<v Speaker 0>the traditional Python tooling for LSP

00:04:49.990 --> 00:04:51.830
<v Speaker 0>just isn't going to work.

00:04:52.229 --> 00:04:55.115
<v Speaker 0>And that's because the Python SDK for Fairbion

00:04:55.115 --> 00:04:56.235
<v Speaker 0>Spin is

00:04:56.235 --> 00:04:57.515
<v Speaker 0>written in Rust.

00:04:57.915 --> 00:05:00.875
<v Speaker 0>Now the team are actively working on getting

00:05:00.875 --> 00:05:02.555
<v Speaker 0>bindings for LSPs

00:05:02.555 --> 00:05:04.875
<v Speaker 0>available for the SDK, and hopefully that will

00:05:04.875 --> 00:05:06.315
<v Speaker 0>be available very, very soon.

00:05:06.830 --> 00:05:07.950
<v Speaker 0>But for today,

00:05:08.190 --> 00:05:10.270
<v Speaker 0>your best friend is the code.

00:05:11.550 --> 00:05:17.310
<v Speaker 0>So if you go to github.com/verimeon/spin-python-sdk,

00:05:17.550 --> 00:05:19.870
<v Speaker 0>you will find the crates directory, which has

00:05:19.870 --> 00:05:21.790
<v Speaker 0>the Spin Python engine directory.

00:05:22.455 --> 00:05:24.455
<v Speaker 0>Inside of that, you will find source and

00:05:24.455 --> 00:05:26.535
<v Speaker 0>a single lib dot r s.

00:05:27.014 --> 00:05:28.854
<v Speaker 0>Now you do not need to be able

00:05:28.854 --> 00:05:30.615
<v Speaker 0>to read Rust to get the help that

00:05:30.615 --> 00:05:32.215
<v Speaker 0>you need. As you can see here, we

00:05:32.215 --> 00:05:34.215
<v Speaker 0>have a struct. This is just a type

00:05:34.215 --> 00:05:36.134
<v Speaker 0>definition, and we can see all of the

00:05:36.134 --> 00:05:39.170
<v Speaker 0>properties available on the HTTP request.

00:05:39.490 --> 00:05:41.490
<v Speaker 0>We can see the method, the URI, the

00:05:41.490 --> 00:05:43.330
<v Speaker 0>headers, and the body. This works for all

00:05:43.330 --> 00:05:45.170
<v Speaker 0>the types you'll have to interact with as

00:05:45.170 --> 00:05:48.770
<v Speaker 0>you build your Python SDK, Fermion Spin applications.

00:05:49.090 --> 00:05:51.090
<v Speaker 0>What's important to note here is that the

00:05:51.090 --> 00:05:54.495
<v Speaker 0>headers are a vector, a vector of tuples,

00:05:54.975 --> 00:05:57.055
<v Speaker 0>where the tuple is a string string type

00:05:57.055 --> 00:05:58.495
<v Speaker 0>or a string string tuple.

00:05:58.575 --> 00:06:02.415
<v Speaker 0>Now Python supports tuples, doesn't have vectors, but

00:06:02.415 --> 00:06:04.815
<v Speaker 0>it has lists. If you're familiar with Python,

00:06:04.815 --> 00:06:06.255
<v Speaker 0>and I assume you are because you're watching

00:06:06.255 --> 00:06:06.655
<v Speaker 0>this video,

00:06:07.550 --> 00:06:10.830
<v Speaker 0>that means that we actually can't really do

00:06:10.910 --> 00:06:13.630
<v Speaker 0>headers dot get name with a default value

00:06:13.630 --> 00:06:14.430
<v Speaker 0>because

00:06:14.830 --> 00:06:17.229
<v Speaker 0>this get is working against the list, then

00:06:17.229 --> 00:06:19.229
<v Speaker 0>we'd have to destructure the tuple and so

00:06:19.229 --> 00:06:21.855
<v Speaker 0>forth and so forth. So what we actually

00:06:21.855 --> 00:06:23.535
<v Speaker 0>need to do is choose a nice little

00:06:23.535 --> 00:06:24.575
<v Speaker 0>Python trick,

00:06:24.975 --> 00:06:26.255
<v Speaker 0>which is to convert

00:06:26.575 --> 00:06:29.295
<v Speaker 0>our list of tuples to a dictionary like

00:06:29.295 --> 00:06:29.855
<v Speaker 0>so.

00:06:30.815 --> 00:06:32.015
<v Speaker 0>And this becomes

00:06:32.095 --> 00:06:34.140
<v Speaker 0>all headers. So now we're in a position

00:06:34.140 --> 00:06:35.580
<v Speaker 0>where we have an API.

00:06:35.740 --> 00:06:37.580
<v Speaker 0>And if you've seen the other SDK videos,

00:06:37.580 --> 00:06:39.260
<v Speaker 0>we should be familiar with this now,

00:06:39.500 --> 00:06:42.300
<v Speaker 0>where we can use a formatted entry point

00:06:42.300 --> 00:06:44.220
<v Speaker 0>to string or an f string in Python,

00:06:44.700 --> 00:06:45.500
<v Speaker 0>where we say hello.

00:06:46.265 --> 00:06:48.505
<v Speaker 0>And here, we'll do all headers,

00:06:48.825 --> 00:06:51.945
<v Speaker 0>and we'll just fetch out the name property.

00:06:52.105 --> 00:06:53.305
<v Speaker 0>And I'll call this

00:06:55.065 --> 00:06:58.025
<v Speaker 0>x name just because we're using an HTTP

00:06:58.025 --> 00:07:00.505
<v Speaker 0>header, and custom headers usually start with an

00:07:00.505 --> 00:07:03.210
<v Speaker 0>x dash. Now the case isn't important. It

00:07:03.210 --> 00:07:05.210
<v Speaker 0>will always be lower case when made available

00:07:05.210 --> 00:07:06.890
<v Speaker 0>to you within the SDKs.

00:07:06.890 --> 00:07:09.050
<v Speaker 0>But now that we've used our trick of

00:07:09.050 --> 00:07:12.170
<v Speaker 0>converting our list of tuples to a dictionary,

00:07:12.570 --> 00:07:14.170
<v Speaker 0>we've formatted our string,

00:07:14.330 --> 00:07:16.875
<v Speaker 0>we can pop over to the terminal,

00:07:17.595 --> 00:07:19.995
<v Speaker 0>do a spin build, and a spin up,

00:07:20.875 --> 00:07:22.955
<v Speaker 0>where we can now provide our x name

00:07:22.955 --> 00:07:23.675
<v Speaker 0>header

00:07:24.634 --> 00:07:25.835
<v Speaker 0>and curl

00:07:25.835 --> 00:07:26.955
<v Speaker 0>our local

00:07:27.275 --> 00:07:28.155
<v Speaker 0>endpoint.

00:07:29.354 --> 00:07:29.835
<v Speaker 0>Like so.

00:07:30.800 --> 00:07:32.560
<v Speaker 0>And, of course, just to show that this

00:07:32.560 --> 00:07:34.720
<v Speaker 0>is real, although I know you all trust

00:07:34.720 --> 00:07:36.560
<v Speaker 0>me by now, we can pass in the

00:07:36.560 --> 00:07:38.000
<v Speaker 0>value that we want, and it will be

00:07:38.000 --> 00:07:40.080
<v Speaker 0>formatted as part of the response.

00:07:40.240 --> 00:07:42.240
<v Speaker 0>So two things to take away here. Yes.

00:07:42.240 --> 00:07:44.000
<v Speaker 0>It's crappy. We don't have LSP,

00:07:44.254 --> 00:07:46.095
<v Speaker 0>but trust me, it's coming soon, and it's

00:07:46.095 --> 00:07:48.495
<v Speaker 0>gonna be amazing. Two, use the Rust code.

00:07:48.495 --> 00:07:49.775
<v Speaker 0>Again, you don't need to be able to

00:07:49.775 --> 00:07:52.895
<v Speaker 0>write Rust. Find the struct, get enough information

00:07:52.895 --> 00:07:53.935
<v Speaker 0>on the properties,

00:07:54.175 --> 00:07:56.175
<v Speaker 0>and the code will almost write itself.

00:07:56.740 --> 00:07:57.540
<v Speaker 0>Sweet.

00:07:57.620 --> 00:08:01.060
<v Speaker 0>Next up, issue to p request body.

00:08:01.539 --> 00:08:03.860
<v Speaker 0>This one, super simple.

00:08:04.099 --> 00:08:05.780
<v Speaker 0>You do body equals

00:08:06.659 --> 00:08:08.020
<v Speaker 0>request dot body,

00:08:09.060 --> 00:08:11.379
<v Speaker 0>and we'll print this to the CLI.

00:08:12.355 --> 00:08:13.555
<v Speaker 0>But while we're here,

00:08:13.875 --> 00:08:17.395
<v Speaker 0>let's change our from JSON import stump to

00:08:17.395 --> 00:08:19.635
<v Speaker 0>also pull in the loads function.

00:08:20.835 --> 00:08:23.074
<v Speaker 0>From here, we can say that our object

00:08:23.074 --> 00:08:23.875
<v Speaker 0>equals

00:08:23.875 --> 00:08:24.755
<v Speaker 0>loads

00:08:24.979 --> 00:08:27.540
<v Speaker 0>and this will parse the string of the

00:08:27.540 --> 00:08:30.820
<v Speaker 0>HTTP body as a JSON string.

00:08:31.620 --> 00:08:33.780
<v Speaker 0>Meaning, we can now do print

00:08:33.940 --> 00:08:34.820
<v Speaker 0>and say

00:08:35.059 --> 00:08:36.020
<v Speaker 0>f string

00:08:36.900 --> 00:08:38.260
<v Speaker 0>name is

00:08:38.855 --> 00:08:39.654
<v Speaker 0>object

00:08:40.214 --> 00:08:41.014
<v Speaker 0>name,

00:08:41.414 --> 00:08:43.654
<v Speaker 0>like so. So let's go back to our

00:08:43.654 --> 00:08:45.815
<v Speaker 0>CLI where we can build

00:08:46.134 --> 00:08:47.095
<v Speaker 0>and up.

00:08:48.375 --> 00:08:50.535
<v Speaker 0>Now we can do a curl to local

00:08:50.535 --> 00:08:51.975
<v Speaker 0>host 3,000,

00:08:52.694 --> 00:08:53.975
<v Speaker 0>only this time

00:08:54.649 --> 00:08:57.610
<v Speaker 0>we'll provide a JSON body where we'll set

00:08:57.610 --> 00:08:58.410
<v Speaker 0>the name

00:08:59.209 --> 00:09:00.010
<v Speaker 0>like so.

00:09:01.610 --> 00:09:05.449
<v Speaker 0>Now we're still getting the standard JSON response

00:09:05.449 --> 00:09:07.769
<v Speaker 0>that we set earlier, which just has hello

00:09:07.769 --> 00:09:10.065
<v Speaker 0>world of x name is not defined. But

00:09:10.065 --> 00:09:12.225
<v Speaker 0>as you'll see on the terminal output above,

00:09:12.705 --> 00:09:14.945
<v Speaker 0>the standard print of the body returns the

00:09:14.945 --> 00:09:17.665
<v Speaker 0>bytes with the JSON string followed by the

00:09:17.665 --> 00:09:21.105
<v Speaker 0>name as Rawkode after we've loaded the JSON

00:09:21.425 --> 00:09:24.065
<v Speaker 0>and consumed one of the properties. Sweet.

00:09:24.710 --> 00:09:25.510
<v Speaker 0>Okay.

00:09:25.670 --> 00:09:27.750
<v Speaker 0>Let's do the query string. And to make

00:09:27.750 --> 00:09:29.350
<v Speaker 0>our lives a little bit easier,

00:09:29.830 --> 00:09:33.110
<v Speaker 0>we're gonna hard code our response and remove

00:09:35.750 --> 00:09:38.275
<v Speaker 0>everything that we've done so far. Now much

00:09:38.275 --> 00:09:40.515
<v Speaker 0>like the body, the query string is available

00:09:40.515 --> 00:09:42.275
<v Speaker 0>as a single property,

00:09:42.515 --> 00:09:45.235
<v Speaker 0>but it's gonna need pars from that property.

00:09:46.035 --> 00:09:49.075
<v Speaker 0>We can grab the entire URI by asking

00:09:49.075 --> 00:09:50.435
<v Speaker 0>for request URI.

00:09:51.240 --> 00:09:52.920
<v Speaker 0>Now if we print this now, what we'll

00:09:52.920 --> 00:09:54.760
<v Speaker 0>see is we get a full string with

00:09:54.760 --> 00:09:55.960
<v Speaker 0>the protocol,

00:09:55.960 --> 00:09:58.680
<v Speaker 0>the host, the port if it exists, the

00:09:58.680 --> 00:10:01.080
<v Speaker 0>path, and then anything beyond the path such

00:10:01.080 --> 00:10:02.840
<v Speaker 0>as the query string or

00:10:03.080 --> 00:10:05.415
<v Speaker 0>fragments. But Python provides

00:10:05.495 --> 00:10:08.055
<v Speaker 0>some standard library components that allow us to

00:10:08.055 --> 00:10:09.095
<v Speaker 0>parse all this.

00:10:09.415 --> 00:10:11.575
<v Speaker 0>So we can see from URL

00:10:11.654 --> 00:10:12.455
<v Speaker 0>lib

00:10:13.255 --> 00:10:14.535
<v Speaker 0>dot parse

00:10:14.615 --> 00:10:15.654
<v Speaker 0>and port

00:10:16.214 --> 00:10:17.015
<v Speaker 0>URL

00:10:17.095 --> 00:10:17.575
<v Speaker 0>parse,

00:10:18.839 --> 00:10:20.760
<v Speaker 0>as well as parse

00:10:20.760 --> 00:10:24.040
<v Speaker 0>qs for query string. This means that we

00:10:24.040 --> 00:10:25.560
<v Speaker 0>can say the query string

00:10:25.720 --> 00:10:26.760
<v Speaker 0>equals

00:10:27.160 --> 00:10:28.760
<v Speaker 0>to URL parse

00:10:29.800 --> 00:10:31.000
<v Speaker 0>on the URI

00:10:31.400 --> 00:10:34.205
<v Speaker 0>and we want to create a component. Copilot

00:10:34.205 --> 00:10:37.245
<v Speaker 0>is always one step ahead. Next, we're going

00:10:37.245 --> 00:10:40.445
<v Speaker 0>to want to get to query string as

00:10:40.445 --> 00:10:41.565
<v Speaker 0>a dictionary.

00:10:41.725 --> 00:10:44.845
<v Speaker 0>And for this, we'll just call this params,

00:10:45.805 --> 00:10:47.085
<v Speaker 0>which is going to be equal

00:10:47.325 --> 00:10:50.000
<v Speaker 0>to parse the query string from above. So

00:10:50.000 --> 00:10:52.640
<v Speaker 0>let's do a pretty print of this to

00:10:52.640 --> 00:10:54.880
<v Speaker 0>our terminal. So as always, we do a

00:10:54.880 --> 00:10:55.840
<v Speaker 0>spin build

00:10:56.080 --> 00:10:57.680
<v Speaker 0>and a spin up where we can now

00:10:57.680 --> 00:11:00.800
<v Speaker 0>curl local host 3,000

00:11:01.360 --> 00:11:02.560
<v Speaker 0>and pass some parameters.

00:11:03.024 --> 00:11:04.865
<v Speaker 0>And here, we'll just say

00:11:05.105 --> 00:11:07.904
<v Speaker 0>that name equals and a b c equals

00:11:07.904 --> 00:11:10.464
<v Speaker 0>some values. You will have to quote this

00:11:10.464 --> 00:11:13.665
<v Speaker 0>to stop your terminal pulling out that ampersand

00:11:14.305 --> 00:11:16.610
<v Speaker 0>like so. We get the hard coded response

00:11:16.610 --> 00:11:18.610
<v Speaker 0>back which is fine, but in our CLI

00:11:18.610 --> 00:11:22.210
<v Speaker 0>output, we could see the query string and

00:11:22.290 --> 00:11:25.490
<v Speaker 0>the parsed keys and values. Now you can

00:11:25.490 --> 00:11:27.570
<v Speaker 0>do whatever you need with the query string.

00:11:27.675 --> 00:11:28.475
<v Speaker 0>Tada.

00:11:28.955 --> 00:11:31.595
<v Speaker 0>Now finally, we're going to make an outbound

00:11:31.595 --> 00:11:32.795
<v Speaker 0>HTTP

00:11:32.795 --> 00:11:37.115
<v Speaker 0>request. Let's pop open our simple generated app

00:11:37.115 --> 00:11:39.834
<v Speaker 0>dot py and we'll add request to the

00:11:39.834 --> 00:11:41.274
<v Speaker 0>spin HTTP

00:11:41.390 --> 00:11:44.029
<v Speaker 0>as well as HTTP

00:11:44.029 --> 00:11:44.990
<v Speaker 0>underscore

00:11:45.070 --> 00:11:47.470
<v Speaker 0>send. These function names are the same as

00:11:47.470 --> 00:11:49.470
<v Speaker 0>other SDKs and if you need to dig

00:11:49.470 --> 00:11:51.550
<v Speaker 0>into it, remember you can always check out

00:11:51.550 --> 00:11:54.345
<v Speaker 0>the Rust source code for the SDK that

00:11:54.345 --> 00:11:56.584
<v Speaker 0>you want to interact with. Now down here,

00:11:56.824 --> 00:11:59.305
<v Speaker 0>we can see response equals

00:11:59.305 --> 00:12:00.825
<v Speaker 0>HTTP send

00:12:00.985 --> 00:12:03.704
<v Speaker 0>where the send takes a request. Now the

00:12:03.704 --> 00:12:06.745
<v Speaker 0>structure of a request requires the method,

00:12:07.065 --> 00:12:07.785
<v Speaker 0>the URL,

00:12:09.570 --> 00:12:10.610
<v Speaker 0>parameters,

00:12:12.370 --> 00:12:14.530
<v Speaker 0>and throw on a none for good measure.

00:12:14.530 --> 00:12:16.290
<v Speaker 0>Now, of course, good measure is not always

00:12:16.290 --> 00:12:18.290
<v Speaker 0>a good reason to add arbitrary values to

00:12:18.290 --> 00:12:20.850
<v Speaker 0>function calls. Well, remember, check out the code.

00:12:20.850 --> 00:12:22.530
<v Speaker 0>And it should be request

00:12:22.644 --> 00:12:24.964
<v Speaker 0>takes a message, a URI,

00:12:24.964 --> 00:12:25.765
<v Speaker 0>headers,

00:12:25.765 --> 00:12:27.605
<v Speaker 0>and a body. As we can see from

00:12:27.605 --> 00:12:28.165
<v Speaker 0>here

00:12:28.565 --> 00:12:29.685
<v Speaker 0>and from here,

00:12:30.165 --> 00:12:32.485
<v Speaker 0>the body is an option type. So providing

00:12:32.485 --> 00:12:35.090
<v Speaker 0>none just means we want no body. I'm

00:12:35.090 --> 00:12:37.970
<v Speaker 0>not going to parse the HTTP response from

00:12:37.970 --> 00:12:38.930
<v Speaker 0>this request.

00:12:39.090 --> 00:12:41.490
<v Speaker 0>Instead, let's just pretty print it

00:12:42.130 --> 00:12:45.090
<v Speaker 0>and pull in the pretty print function

00:12:45.490 --> 00:12:47.170
<v Speaker 0>like so. Now we could jump back to

00:12:47.170 --> 00:12:47.810
<v Speaker 0>our terminal.

00:12:48.735 --> 00:12:50.175
<v Speaker 0>Uh-huh. Exactly.

00:12:50.335 --> 00:12:51.935
<v Speaker 0>And type in your curl.

00:12:54.735 --> 00:12:57.055
<v Speaker 0>Awesome. If you've seen any of the SDK

00:12:57.055 --> 00:12:59.535
<v Speaker 0>videos before, you'll know that 100%

00:12:59.535 --> 00:13:01.935
<v Speaker 0>we always expect destination

00:13:01.935 --> 00:13:02.575
<v Speaker 0>not allowed.

00:13:03.330 --> 00:13:03.970
<v Speaker 0>Why?

00:13:04.530 --> 00:13:06.210
<v Speaker 0>Rate and spin components,

00:13:06.290 --> 00:13:07.970
<v Speaker 0>you have to very explicitly

00:13:07.970 --> 00:13:11.170
<v Speaker 0>allow outbound request to the host that you

00:13:11.170 --> 00:13:13.570
<v Speaker 0>want to speak to. As such, we need

00:13:13.570 --> 00:13:16.530
<v Speaker 0>to add something to our spin.toml.

00:13:16.725 --> 00:13:18.084
<v Speaker 0>In your component,

00:13:18.485 --> 00:13:20.805
<v Speaker 0>you can see allowed HTTP

00:13:20.805 --> 00:13:21.685
<v Speaker 0>hosts

00:13:21.685 --> 00:13:22.725
<v Speaker 0>equals

00:13:22.725 --> 00:13:24.005
<v Speaker 0>google.com.

00:13:24.084 --> 00:13:25.285
<v Speaker 0>We can jump back,

00:13:25.605 --> 00:13:26.964
<v Speaker 0>spin up and build

00:13:27.925 --> 00:13:30.964
<v Speaker 0>like so. Now we've made our HTTP response

00:13:31.310 --> 00:13:33.230
<v Speaker 0>to Google.com.

00:13:33.230 --> 00:13:36.190
<v Speaker 0>However, you'll notice that we have a response

00:13:36.190 --> 00:13:39.149
<v Speaker 0>object with a funny value inside of our

00:13:39.149 --> 00:13:41.310
<v Speaker 0>terminal. So what do we do? We jump

00:13:41.310 --> 00:13:43.310
<v Speaker 0>back to the Rust source code. We can

00:13:43.310 --> 00:13:45.630
<v Speaker 0>see their HTTP response as a status,

00:13:46.134 --> 00:13:46.935
<v Speaker 0>headers,

00:13:47.014 --> 00:13:49.575
<v Speaker 0>and a body. So let's modify our code

00:13:51.255 --> 00:13:52.535
<v Speaker 0>for the status,

00:13:54.055 --> 00:13:55.014
<v Speaker 0>the body,

00:13:57.815 --> 00:13:58.694
<v Speaker 0>and the headers.

00:14:00.420 --> 00:14:03.700
<v Speaker 0>We'll spin build up and curl. Now we

00:14:03.700 --> 00:14:06.340
<v Speaker 0>can see lots of bytes for the body

00:14:06.340 --> 00:14:09.300
<v Speaker 0>at a status code somewhere at the top,

00:14:09.300 --> 00:14:11.540
<v Speaker 0>somewhere at the top, 200.

00:14:12.255 --> 00:14:13.935
<v Speaker 0>With our headers being at the very bottom

00:14:13.935 --> 00:14:15.535
<v Speaker 0>that we've we got them here. Don't you

00:14:15.535 --> 00:14:17.855
<v Speaker 0>worry. So that is the Spin

00:14:18.015 --> 00:14:21.135
<v Speaker 0>SDK for Python. So Python is your jam.

00:14:21.135 --> 00:14:24.655
<v Speaker 0>Start writing WebAssembly components using Fermion Spin today.

00:14:24.990 --> 00:14:27.550
<v Speaker 0>The developer experience with the language server protocol

00:14:27.550 --> 00:14:30.270
<v Speaker 0>type ins and easier documentation is all coming

00:14:30.270 --> 00:14:33.150
<v Speaker 0>very soon. Remember to check the description updates

00:14:33.150 --> 00:14:35.310
<v Speaker 0>will be coming soon. Of course, feel free

00:14:35.310 --> 00:14:37.470
<v Speaker 0>to just go check out the repository available

00:14:37.470 --> 00:14:42.755
<v Speaker 0>at github.com/fermion/spin-python-stk.

00:14:42.755 --> 00:14:44.915
<v Speaker 0>Watch it. Follow for new releases.

00:14:45.075 --> 00:14:47.635
<v Speaker 0>Fermion ship fast and changes will be coming

00:14:47.635 --> 00:14:50.293
<v Speaker 0>very very soon. That's the last time I'm

00:14:50.293 --> 00:14:52.613
<v Speaker 0>gonna see soon in this video. I'll see

00:14:52.613 --> 00:14:53.013
<v Speaker 0>you soon.
