WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 10cd6639-7f93-45de-82ac-6180edfefcc6
Created: 2025-04-29T13:00:13.496Z
Duration: 913.5639
Channels: 1

00:00:00.399 --> 00:00:02.080
<v Speaker 0>Hi, and welcome to AlphaBits.

00:00:02.399 --> 00:00:04.960
<v Speaker 0>AlphaBits is an outlet for our inquisitive minds.

00:00:04.960 --> 00:00:07.520
<v Speaker 0>We can't stop experimenting with new technology, and

00:00:07.520 --> 00:00:09.280
<v Speaker 0>we wanna share what we're playing with with

00:00:09.280 --> 00:00:13.175
<v Speaker 0>you. We're your hosts, Brian and David. Hi.

00:00:13.175 --> 00:00:15.655
<v Speaker 1>I'm David, defender of the Rawkode Academy. I'm

00:00:15.655 --> 00:00:18.455
<v Speaker 1>a perpetual learner, always playing with new cool

00:00:18.455 --> 00:00:20.055
<v Speaker 1>tools that I'm gonna share with you as

00:00:20.055 --> 00:00:22.215
<v Speaker 1>part of this podcast. And I'm Brian. I'm

00:00:22.215 --> 00:00:24.614
<v Speaker 0>a developer advocate at Amazon,

00:00:24.775 --> 00:00:27.335
<v Speaker 0>and I love all the shiny new toys

00:00:27.335 --> 00:00:27.895
<v Speaker 0>in tech.

00:00:28.590 --> 00:00:30.750
<v Speaker 0>It's kind of my passion is is testing

00:00:30.750 --> 00:00:32.190
<v Speaker 0>out the new stuff and,

00:00:32.830 --> 00:00:35.870
<v Speaker 0>seeing what's cool. Okay. So I'm in a

00:00:35.870 --> 00:00:38.430
<v Speaker 2>project that is a

00:00:38.590 --> 00:00:39.710
<v Speaker 2>Hugo blog.

00:00:40.110 --> 00:00:42.590
<v Speaker 2>And what I intend to do is

00:00:42.675 --> 00:00:44.675
<v Speaker 2>make Hugo available

00:00:44.675 --> 00:00:46.754
<v Speaker 2>in only in this directory. So, if I

00:00:46.754 --> 00:00:48.035
<v Speaker 2>ask which Hugo

00:00:48.515 --> 00:00:50.515
<v Speaker 2>see, don't have one. So, I'm gonna do

00:00:50.515 --> 00:00:51.715
<v Speaker 2>is aqua init

00:00:53.795 --> 00:00:55.715
<v Speaker 2>and that creates the YAML file.

00:01:01.020 --> 00:01:03.260
<v Speaker 2>Alright. So, it's it's set the registry. So,

00:01:03.260 --> 00:01:05.420
<v Speaker 2>this is a pin version of

00:01:05.820 --> 00:01:08.619
<v Speaker 2>the package registry that shows which packages are

00:01:08.619 --> 00:01:12.300
<v Speaker 2>available and what versions of those packages are

00:01:11.715 --> 00:01:13.554
<v Speaker 2>available. So, I'm gonna search for

00:01:13.715 --> 00:01:14.515
<v Speaker 2>Hugo.

00:01:16.835 --> 00:01:18.515
<v Speaker 2>And, it brings up a a fuzzy finder

00:01:18.515 --> 00:01:21.234
<v Speaker 2>like search interface. So, I'll type Hugo.

00:01:21.954 --> 00:01:23.395
<v Speaker 2>And, I get

00:01:23.554 --> 00:01:24.194
<v Speaker 2>two choices.

00:01:24.730 --> 00:01:26.970
<v Speaker 2>Basically, Hugo extended and Hugo.

00:01:27.210 --> 00:01:29.290
<v Speaker 2>So, I'll just pick Hugo

00:01:29.450 --> 00:01:31.290
<v Speaker 2>and it outputs this

00:01:31.450 --> 00:01:34.490
<v Speaker 2>item, array item for YAML. So, let's

00:01:34.970 --> 00:01:36.330
<v Speaker 2>mini our

00:01:36.330 --> 00:01:37.290
<v Speaker 2>aquapro thing.

00:01:42.215 --> 00:01:44.135
<v Speaker 2>And paste in the

00:01:44.695 --> 00:01:45.495
<v Speaker 2>output.

00:01:45.495 --> 00:01:48.375
<v Speaker 2>So Hugo version zero dot one one seven.

00:01:49.095 --> 00:01:49.975
<v Speaker 2>Save it.

00:01:50.535 --> 00:01:51.895
<v Speaker 2>The aqua

00:01:52.690 --> 00:01:55.010
<v Speaker 2>I. Now, type it Hugo.

00:01:55.970 --> 00:01:57.330
<v Speaker 2>I've got a Hugo.

00:01:57.970 --> 00:01:59.490
<v Speaker 2>I move up a directory.

00:02:02.210 --> 00:02:03.330
<v Speaker 2>Still there,

00:02:03.810 --> 00:02:06.290
<v Speaker 2>but I could choose a different version in

00:02:06.290 --> 00:02:07.730
<v Speaker 2>a different directory if I wanted to.

00:02:13.245 --> 00:02:14.845
<v Speaker 2>Now, PewDie, it works,

00:02:15.325 --> 00:02:16.525
<v Speaker 2>and I'm good to go.

00:02:17.565 --> 00:02:19.885
<v Speaker 2>You can include that vocab.

00:02:23.640 --> 00:02:25.960
<v Speaker 2>So you would include this in your

00:02:26.519 --> 00:02:28.200
<v Speaker 2>git repository

00:02:28.359 --> 00:02:30.120
<v Speaker 2>so that any person that was using this

00:02:30.120 --> 00:02:31.239
<v Speaker 2>would automatically

00:02:31.239 --> 00:02:33.080
<v Speaker 2>get the same configuration.

00:02:33.400 --> 00:02:35.159
<v Speaker 2>So that's at the project level.

00:02:35.625 --> 00:02:36.745
<v Speaker 2>At the

00:02:36.985 --> 00:02:38.105
<v Speaker 2>global level,

00:02:42.424 --> 00:02:44.905
<v Speaker 2>there's also another config file that you can

00:02:44.905 --> 00:02:46.825
<v Speaker 2>use for globally available tools.

00:02:48.610 --> 00:02:50.930
<v Speaker 2>So, if you look at my globally available

00:02:50.930 --> 00:02:52.450
<v Speaker 2>aqua yaml,

00:02:52.770 --> 00:02:55.650
<v Speaker 2>I have the git hub CLI, fuzzy finder,

00:02:55.650 --> 00:02:57.170
<v Speaker 2>and NeoGIMM installed.

00:02:57.330 --> 00:02:57.970
<v Speaker 2>So,

00:02:58.610 --> 00:03:01.010
<v Speaker 2>it's pretty wicked. I mean, you could use

00:03:01.010 --> 00:03:01.490
<v Speaker 2>this

00:03:01.885 --> 00:03:04.045
<v Speaker 2>to get a very repeatable

00:03:04.205 --> 00:03:05.085
<v Speaker 2>environment,

00:03:05.085 --> 00:03:08.205
<v Speaker 2>but it's it's very much focused on CLI

00:03:08.205 --> 00:03:10.845
<v Speaker 2>tools, CLI applications binaries

00:03:10.845 --> 00:03:12.765
<v Speaker 2>as opposed to libraries.

00:03:12.765 --> 00:03:15.085
<v Speaker 1>Nice. So it's pretty slick with let's say

00:03:15.085 --> 00:03:15.805
<v Speaker 2>I wanted to

00:03:17.190 --> 00:03:18.870
<v Speaker 2>search for cargo.

00:03:18.870 --> 00:03:22.230
<v Speaker 2>So I could just do aquaproj,

00:03:23.349 --> 00:03:25.910
<v Speaker 2>and there is no cargo in here. How

00:03:25.910 --> 00:03:26.870
<v Speaker 2>about Rust?

00:03:27.910 --> 00:03:29.830
<v Speaker 2>Rust analyzer. So I could add the the

00:03:29.830 --> 00:03:31.269
<v Speaker 2>Rust analyzer if I wanted,

00:03:31.975 --> 00:03:34.455
<v Speaker 2>probably because Rust itself is such a

00:03:34.855 --> 00:03:36.055
<v Speaker 2>large install.

00:03:36.215 --> 00:03:37.575
<v Speaker 1>Is there?

00:03:37.975 --> 00:03:38.935
<v Speaker 2>Let's see.

00:03:39.735 --> 00:03:40.855
<v Speaker 2>Yes. It is. So

00:03:42.215 --> 00:03:42.615
<v Speaker 2>try.

00:03:47.090 --> 00:03:48.290
<v Speaker 2>We can add it.

00:03:55.330 --> 00:03:57.170
<v Speaker 2>Because I'm at the global level, I have

00:03:57.170 --> 00:03:59.755
<v Speaker 2>to specify this dash a. So it will

00:03:59.755 --> 00:04:01.435
<v Speaker 2>be included in the global.

00:04:01.435 --> 00:04:03.675
<v Speaker 2>So now I can which I'll try it.

00:04:10.875 --> 00:04:11.675
<v Speaker 2>I could spell.

00:04:15.860 --> 00:04:18.100
<v Speaker 2>That's weird. I swear it said

00:04:18.660 --> 00:04:20.980
<v Speaker 2>085.

00:04:21.620 --> 00:04:23.460
<v Speaker 2>But come try reports

00:04:23.539 --> 00:04:24.660
<v Speaker 2>084.

00:04:28.835 --> 00:04:29.635
<v Speaker 2>Strange.

00:04:30.595 --> 00:04:32.755
<v Speaker 1>That's probably me. I probably forgot to update

00:04:32.755 --> 00:04:34.915
<v Speaker 1>version string somewhere, but I'll look into it.

00:04:34.915 --> 00:04:36.115
<v Speaker 2>Possibly.

00:04:36.115 --> 00:04:38.035
<v Speaker 2>Alright. So that's aquapro. It's

00:04:38.300 --> 00:04:40.700
<v Speaker 2>short and sweet, but pretty powerful if you

00:04:40.700 --> 00:04:41.500
<v Speaker 2>want to

00:04:41.980 --> 00:04:45.260
<v Speaker 2>do some version pinning of particular tools

00:04:45.260 --> 00:04:48.140
<v Speaker 2>at both the global and project level and

00:04:48.140 --> 00:04:49.340
<v Speaker 2>share that with your team.

00:04:50.060 --> 00:04:50.380
<v Speaker 1>Yeah.

00:04:51.275 --> 00:04:52.075
<v Speaker 1>Awesome.

00:04:52.155 --> 00:04:55.115
<v Speaker 1>I'm assuming their registry is just a GitHub

00:04:55.115 --> 00:04:57.595
<v Speaker 1>repository that anyone can go along and contribute

00:04:57.595 --> 00:04:59.275
<v Speaker 1>to. Is. Yes. So

00:05:00.955 --> 00:05:02.875
<v Speaker 2>if you go to aquaproj,

00:05:02.875 --> 00:05:05.435
<v Speaker 2>let's stop this screen, add a different.

00:05:06.740 --> 00:05:08.260
<v Speaker 2>Alright. So here's their

00:05:09.620 --> 00:05:12.580
<v Speaker 2>GitHub org. You can see the aquaproj thing

00:05:12.580 --> 00:05:14.420
<v Speaker 2>itself. It's got an installer

00:05:14.580 --> 00:05:15.860
<v Speaker 2>and the registry,

00:05:16.580 --> 00:05:18.500
<v Speaker 2>and the registry has

00:05:19.115 --> 00:05:20.875
<v Speaker 2>all of the package definitions.

00:05:20.875 --> 00:05:22.955
<v Speaker 2>And and when I first looked at aquapro

00:05:22.955 --> 00:05:25.195
<v Speaker 2>roughly a year ago, it had 30 or

00:05:25.195 --> 00:05:25.835
<v Speaker 2>40.

00:05:26.075 --> 00:05:28.795
<v Speaker 2>But now it's it's gotta be well into

00:05:28.795 --> 00:05:29.675
<v Speaker 2>the thousands.

00:05:30.315 --> 00:05:32.315
<v Speaker 2>So they have pretty much anything you need

00:05:33.000 --> 00:05:35.480
<v Speaker 2>in terms of binary. So you can see

00:05:35.480 --> 00:05:36.440
<v Speaker 2>the definition,

00:05:37.400 --> 00:05:39.160
<v Speaker 2>the registry metadata,

00:05:40.040 --> 00:05:40.600
<v Speaker 2>and

00:05:41.639 --> 00:05:43.160
<v Speaker 2>this is how it knows how to get

00:05:43.160 --> 00:05:44.440
<v Speaker 2>things out of GitHub.

00:05:45.320 --> 00:05:47.160
<v Speaker 2>And then the package metadata.

00:05:47.560 --> 00:05:51.725
<v Speaker 2>That's Starship version one dot 16 dot zero.

00:05:51.725 --> 00:05:52.365
<v Speaker 1>Nice.

00:05:52.525 --> 00:05:55.165
<v Speaker 1>Very cool. So that's what I got. Alright.

00:05:55.165 --> 00:05:56.205
<v Speaker 1>So this is

00:05:57.885 --> 00:06:01.085
<v Speaker 1>a rather contrived application of a build pipeline.

00:06:01.805 --> 00:06:03.565
<v Speaker 1>It's a back end go app.

00:06:04.540 --> 00:06:07.259
<v Speaker 1>It just has, like, some really simple endpoints,

00:06:07.259 --> 00:06:10.780
<v Speaker 1>like slash ping slash ask, which speaks to,

00:06:10.860 --> 00:06:13.660
<v Speaker 1>you know, the OpenAI chat GPT.

00:06:14.139 --> 00:06:15.740
<v Speaker 1>You place in a question, it gives you

00:06:15.740 --> 00:06:17.419
<v Speaker 1>a response. That's it. Nice and simple.

00:06:18.895 --> 00:06:20.414
<v Speaker 1>Reason I set up like this is because

00:06:20.414 --> 00:06:21.935
<v Speaker 1>I wanted it to use an API token

00:06:21.935 --> 00:06:23.455
<v Speaker 1>and a secret to show how that worked

00:06:23.455 --> 00:06:25.615
<v Speaker 1>with the Dagger build pipeline. So it doesn't

00:06:25.615 --> 00:06:27.615
<v Speaker 1>need this environment variable to exist, and we'll

00:06:27.615 --> 00:06:29.215
<v Speaker 1>see how we make that work or at

00:06:29.215 --> 00:06:31.134
<v Speaker 1>least how we satisfy that with the Dagger

00:06:31.134 --> 00:06:31.534
<v Speaker 1>pipeline.

00:06:32.380 --> 00:06:33.100
<v Speaker 1>I'm always

00:06:33.580 --> 00:06:36.460
<v Speaker 1>making sure that I have my build instructions

00:06:36.460 --> 00:06:38.699
<v Speaker 1>as close to my application as possible. So

00:06:38.699 --> 00:06:40.220
<v Speaker 1>you'll see here that in the back end

00:06:40.220 --> 00:06:41.979
<v Speaker 1>directory and I know the sidebar is always

00:06:41.979 --> 00:06:43.740
<v Speaker 1>really small and the s code, but, you

00:06:43.740 --> 00:06:46.139
<v Speaker 1>know, we have a build directory with a

00:06:46.139 --> 00:06:48.975
<v Speaker 1>Google some Google code called build.com.

00:06:49.455 --> 00:06:52.335
<v Speaker 1>And this is our Dagger pipeline.

00:06:52.815 --> 00:06:55.935
<v Speaker 1>So all of these publicly exported functions

00:06:56.175 --> 00:06:58.655
<v Speaker 1>are things that can be consumed or used

00:06:58.655 --> 00:07:01.055
<v Speaker 1>by a general purpose build tool.

00:07:01.680 --> 00:07:03.520
<v Speaker 1>And and we'll see the general purpose part

00:07:03.520 --> 00:07:04.400
<v Speaker 1>in a moment.

00:07:04.800 --> 00:07:06.720
<v Speaker 1>But we see here that we have export,

00:07:06.720 --> 00:07:09.120
<v Speaker 1>which is gonna call another step, build container

00:07:09.120 --> 00:07:12.320
<v Speaker 1>image, and then publish it to my GitHub

00:07:12.320 --> 00:07:12.960
<v Speaker 1>registry.

00:07:13.955 --> 00:07:15.635
<v Speaker 1>The build thing itself,

00:07:16.195 --> 00:07:18.115
<v Speaker 1>we can ignore the runtime caller. This is

00:07:18.115 --> 00:07:20.595
<v Speaker 1>just me doing some weird directory juggling.

00:07:21.635 --> 00:07:24.035
<v Speaker 1>But we get this Dagger client where we

00:07:24.035 --> 00:07:26.035
<v Speaker 1>say that we want a container.

00:07:26.355 --> 00:07:28.355
<v Speaker 1>Remember, we're gonna use Golang latest as a

00:07:28.355 --> 00:07:28.675
<v Speaker 1>base.

00:07:29.820 --> 00:07:33.260
<v Speaker 1>And we add our current directory

00:07:33.340 --> 00:07:35.580
<v Speaker 1>to slash source within the container.

00:07:35.980 --> 00:07:38.140
<v Speaker 1>We set our work there, and then we

00:07:38.140 --> 00:07:40.140
<v Speaker 1>say web exec. So we don't execute the

00:07:40.140 --> 00:07:41.820
<v Speaker 1>command inside of this container.

00:07:42.780 --> 00:07:43.980
<v Speaker 1>These five instructions

00:07:44.495 --> 00:07:46.415
<v Speaker 1>are pretty much just a Docker file. Right?

00:07:46.415 --> 00:07:47.295
<v Speaker 1>I'm building

00:07:47.615 --> 00:07:49.535
<v Speaker 1>Yeah. Container image or potentially it could be

00:07:49.535 --> 00:07:50.895
<v Speaker 1>building a container image.

00:07:51.935 --> 00:07:53.775
<v Speaker 1>All I'm doing is running go build,

00:07:54.015 --> 00:07:55.935
<v Speaker 1>outputting a binary code back end and telling

00:07:55.935 --> 00:07:57.535
<v Speaker 1>that that the source is main dot go.

00:07:58.259 --> 00:08:00.979
<v Speaker 1>So now I've taken the instructions to build

00:08:00.979 --> 00:08:02.819
<v Speaker 1>my application and made them available as a

00:08:02.819 --> 00:08:04.500
<v Speaker 1>function within a Dagger pipeline.

00:08:05.620 --> 00:08:08.259
<v Speaker 1>We then actually build the container. So this

00:08:08.259 --> 00:08:10.259
<v Speaker 1>is like a multi stage container file or

00:08:10.259 --> 00:08:10.819
<v Speaker 1>Docker file.

00:08:11.755 --> 00:08:13.275
<v Speaker 1>Only this time when we ship it to

00:08:13.275 --> 00:08:13.835
<v Speaker 1>prod,

00:08:14.235 --> 00:08:16.795
<v Speaker 1>yeah, I wouldn't normally use Ubuntu 22, but,

00:08:16.795 --> 00:08:18.635
<v Speaker 1>you know, whatever. Let's ignore that for now.

00:08:19.035 --> 00:08:20.795
<v Speaker 1>We do an app update. We install the

00:08:20.795 --> 00:08:21.915
<v Speaker 1>CA certificates.

00:08:22.075 --> 00:08:24.395
<v Speaker 1>We grab a file from an alternative build

00:08:24.395 --> 00:08:26.830
<v Speaker 1>step. So here, we're actually using the output

00:08:26.830 --> 00:08:29.870
<v Speaker 1>of this build as a variable and

00:08:29.950 --> 00:08:31.950
<v Speaker 1>grabbing a file from anywhere inside of the

00:08:31.950 --> 00:08:33.870
<v Speaker 1>container, which is just our source back end

00:08:33.870 --> 00:08:34.590
<v Speaker 1>binary.

00:08:34.990 --> 00:08:36.830
<v Speaker 1>We set an entry point and then that's

00:08:36.830 --> 00:08:37.870
<v Speaker 1>just got a container image.

00:08:38.825 --> 00:08:39.465
<v Speaker 1>And

00:08:39.945 --> 00:08:42.345
<v Speaker 1>that's it. You don't know this GraphQL. You

00:08:42.345 --> 00:08:43.865
<v Speaker 1>don't know that it's a container based build

00:08:43.865 --> 00:08:45.865
<v Speaker 1>plane. You don't really know that it's Dagger

00:08:45.865 --> 00:08:47.305
<v Speaker 1>other than that, you know, we have an

00:08:47.305 --> 00:08:49.145
<v Speaker 1>import for some Dagger stuff.

00:08:50.105 --> 00:08:52.185
<v Speaker 1>So I just find this a really nice

00:08:52.185 --> 00:08:54.745
<v Speaker 1>API to define how to build any application.

00:08:55.519 --> 00:08:57.680
<v Speaker 1>Now I could run this with go run,

00:08:57.680 --> 00:08:59.519
<v Speaker 1>but because it's a model repository, least it's

00:08:59.519 --> 00:09:01.440
<v Speaker 1>a thick, can try it model repository in

00:09:01.440 --> 00:09:03.040
<v Speaker 1>this case. I wanted to have, like, a

00:09:03.040 --> 00:09:05.440
<v Speaker 1>centralized build instruction. So I've got the choice.

00:09:05.440 --> 00:09:07.360
<v Speaker 1>Right? As a developer, I can build a

00:09:07.360 --> 00:09:09.440
<v Speaker 1>small isolated part, which is just the back

00:09:09.440 --> 00:09:11.445
<v Speaker 1>end, or I could just say go run

00:09:11.445 --> 00:09:13.605
<v Speaker 1>everything and build the things that have changed.

00:09:13.605 --> 00:09:15.925
<v Speaker 1>Because this is build cut under the hood

00:09:16.245 --> 00:09:19.205
<v Speaker 1>and we're only mounting end specific things to

00:09:19.205 --> 00:09:21.445
<v Speaker 1>each step, I can really take advantage of

00:09:21.445 --> 00:09:23.365
<v Speaker 1>the way that build cut and container caching

00:09:23.365 --> 00:09:23.765
<v Speaker 1>works.

00:09:24.300 --> 00:09:25.900
<v Speaker 1>So I could point it down the time

00:09:25.900 --> 00:09:27.820
<v Speaker 1>on a repository with thousands of projects, but

00:09:27.820 --> 00:09:29.660
<v Speaker 1>if one file is changed, it'll build to

00:09:29.660 --> 00:09:31.820
<v Speaker 1>one thing, the thing has changed then and

00:09:31.820 --> 00:09:35.100
<v Speaker 1>any dependence thereof. Okay. Which is very neat.

00:09:35.180 --> 00:09:38.380
<v Speaker 1>So this build directory at the top level

00:09:38.380 --> 00:09:39.820
<v Speaker 1>now, so outside of back end

00:09:40.514 --> 00:09:42.595
<v Speaker 1>It's configured using a go workspace,

00:09:43.315 --> 00:09:44.915
<v Speaker 1>which is my new favorite feature in a

00:09:44.915 --> 00:09:47.235
<v Speaker 1>go, which means I can do local references.

00:09:47.235 --> 00:09:48.755
<v Speaker 1>So I've got some helpers here.

00:09:49.315 --> 00:09:51.555
<v Speaker 1>We have a function called get database with

00:09:51.555 --> 00:09:52.754
<v Speaker 1>config and get database.

00:09:53.540 --> 00:09:55.940
<v Speaker 1>So this is the explicit one that does

00:09:55.940 --> 00:09:57.860
<v Speaker 1>some configuration, and this is one that just

00:09:57.860 --> 00:09:59.620
<v Speaker 1>injects a little bit of an override. So

00:09:59.620 --> 00:10:01.620
<v Speaker 1>here, I'm just saying we default to d

00:10:01.620 --> 00:10:04.019
<v Speaker 1>b 15 or postgres 15,

00:10:04.420 --> 00:10:06.579
<v Speaker 1>but you can't provide the full config if

00:10:06.579 --> 00:10:08.205
<v Speaker 1>you want. And then we just set it

00:10:08.205 --> 00:10:09.885
<v Speaker 1>up so that we can access Postgres as

00:10:09.885 --> 00:10:12.125
<v Speaker 1>the user Postgres with the password Postgres.

00:10:12.605 --> 00:10:14.445
<v Speaker 1>This function isn't available for me to use

00:10:14.445 --> 00:10:16.045
<v Speaker 1>anywhere. Same with secrets.

00:10:16.445 --> 00:10:18.045
<v Speaker 1>This is actually just gonna do a local

00:10:18.045 --> 00:10:20.045
<v Speaker 1>exec where it uses the one password CLI

00:10:20.045 --> 00:10:21.485
<v Speaker 1>to grab a secret and then spits it

00:10:21.485 --> 00:10:22.605
<v Speaker 1>back as a secret value.

00:10:23.350 --> 00:10:25.270
<v Speaker 1>And then we have our different entry points.

00:10:25.270 --> 00:10:27.590
<v Speaker 1>In this case, test is orchestrated with main

00:10:27.590 --> 00:10:30.310
<v Speaker 1>dot go, which uses go workspaces to build

00:10:30.310 --> 00:10:31.590
<v Speaker 1>in the back end builder,

00:10:32.870 --> 00:10:34.790
<v Speaker 1>set up to Dagger client. So now we

00:10:34.790 --> 00:10:36.070
<v Speaker 1>do know that Dagger's a thing.

00:10:36.775 --> 00:10:39.255
<v Speaker 1>We use our Google Workspace dev tool project

00:10:39.255 --> 00:10:40.535
<v Speaker 1>to grab the secret.

00:10:41.095 --> 00:10:42.375
<v Speaker 1>We get our database

00:10:42.855 --> 00:10:44.535
<v Speaker 1>and then we just call a few more

00:10:44.535 --> 00:10:46.695
<v Speaker 1>things. Right? So I'm saying here's the build

00:10:46.695 --> 00:10:48.855
<v Speaker 1>container image that we've seen. Well, with this

00:10:48.855 --> 00:10:50.295
<v Speaker 1>time, I'm gonna change a few things. I'm

00:10:50.295 --> 00:10:52.000
<v Speaker 1>gonna pass in the environment variable for the

00:10:52.000 --> 00:10:54.400
<v Speaker 1>database. I'm gonna pass in the secret token,

00:10:54.880 --> 00:10:57.440
<v Speaker 1>some port information. We can do service bindings

00:10:57.440 --> 00:10:59.360
<v Speaker 1>so that the different containers

00:10:59.360 --> 00:11:01.200
<v Speaker 1>can speak to each other if you want.

00:11:01.280 --> 00:11:02.720
<v Speaker 1>So in a way, you can actually use

00:11:02.720 --> 00:11:05.675
<v Speaker 1>Dagger just to replace Docker Compose completely, which

00:11:05.675 --> 00:11:07.834
<v Speaker 1>is very cool as well. Now there's a

00:11:07.834 --> 00:11:10.074
<v Speaker 1>small hurl test suite here. So once we

00:11:10.074 --> 00:11:12.555
<v Speaker 1>built the image, we actually just run it

00:11:12.634 --> 00:11:14.235
<v Speaker 1>or at least we use a surface binding

00:11:14.235 --> 00:11:16.235
<v Speaker 1>in this case. And then we run another

00:11:16.235 --> 00:11:18.394
<v Speaker 1>container that has hurl available, which is like

00:11:18.394 --> 00:11:18.954
<v Speaker 1>a

00:11:19.450 --> 00:11:21.930
<v Speaker 1>HTTP testing framework because it's a really simple

00:11:21.930 --> 00:11:22.730
<v Speaker 1>syntax.

00:11:22.970 --> 00:11:24.490
<v Speaker 1>And then we run the test against it,

00:11:24.490 --> 00:11:26.089
<v Speaker 1>and then we can inspect the output of

00:11:26.089 --> 00:11:28.570
<v Speaker 1>that and say, hey, this passed or this

00:11:28.570 --> 00:11:30.170
<v Speaker 1>failed and then show you why it failed.

00:11:31.545 --> 00:11:34.105
<v Speaker 1>The HARL file looks like this. Sorry. HARL

00:11:34.105 --> 00:11:35.785
<v Speaker 1>file looks like this. We wanna have the

00:11:35.785 --> 00:11:37.305
<v Speaker 1>ping endpoint and then we have the ask

00:11:37.305 --> 00:11:39.625
<v Speaker 1>endpoint, which will actually go and speak chat

00:11:39.625 --> 00:11:40.505
<v Speaker 1>GPT.

00:11:40.745 --> 00:11:42.025
<v Speaker 1>So there's a lot of code and fed

00:11:42.025 --> 00:11:43.865
<v Speaker 1>over that really, really quickly. I'm gonna show

00:11:43.865 --> 00:11:45.625
<v Speaker 1>you it running and you have any questions,

00:11:45.625 --> 00:11:48.910
<v Speaker 1>I'll I'll take them. So there's two ways

00:11:48.910 --> 00:11:50.510
<v Speaker 1>to do this. One is, as a go

00:11:50.510 --> 00:11:53.149
<v Speaker 1>developer, you could just do go run where

00:11:53.149 --> 00:11:55.470
<v Speaker 1>we do build test main.

00:11:55.950 --> 00:11:57.470
<v Speaker 1>We get that a few seconds.

00:11:58.350 --> 00:11:59.550
<v Speaker 1>One password prompt.

00:12:00.024 --> 00:12:01.705
<v Speaker 1>That was an error. Of course, that was

00:12:01.705 --> 00:12:02.745
<v Speaker 1>gonna happen. Right?

00:12:05.625 --> 00:12:07.385
<v Speaker 1>Make sure I'm on the right account.

00:12:07.625 --> 00:12:08.505
<v Speaker 1>That's fair.

00:12:09.545 --> 00:12:11.705
<v Speaker 2>Oh, here we go. Okay. And my test

00:12:11.705 --> 00:12:12.105
<v Speaker 1>passed.

00:12:13.760 --> 00:12:15.760
<v Speaker 1>Of course, never trust the passing test. So

00:12:15.760 --> 00:12:18.079
<v Speaker 1>let's see. We change this to Brian. Run

00:12:18.079 --> 00:12:18.800
<v Speaker 1>that again.

00:12:19.519 --> 00:12:20.800
<v Speaker 1>So let's see if it fails, it'll tell

00:12:20.800 --> 00:12:22.480
<v Speaker 1>us why it failed. We'll that output from

00:12:22.480 --> 00:12:24.079
<v Speaker 1>Huddl. And then there's one last thing I'll

00:12:24.079 --> 00:12:26.355
<v Speaker 1>show you and we'll wrap this up. Alright.

00:12:26.355 --> 00:12:28.915
<v Speaker 1>Now it's saying we got back hello in

00:12:28.915 --> 00:12:30.595
<v Speaker 1>German. It's hello. I couldn't tag and we

00:12:30.595 --> 00:12:32.755
<v Speaker 1>expected to find Brian. So let's change that

00:12:32.755 --> 00:12:34.915
<v Speaker 1>back. Now I have to remove an alias

00:12:34.915 --> 00:12:36.755
<v Speaker 1>because this is a very experimental feature of

00:12:36.755 --> 00:12:40.195
<v Speaker 1>Dagger where they now provide an experimental UI

00:12:41.069 --> 00:12:43.069
<v Speaker 1>where you could do Dagger run and then

00:12:43.069 --> 00:12:44.269
<v Speaker 1>see go run

00:12:44.589 --> 00:12:47.630
<v Speaker 1>build test main. Now what this does

00:12:48.029 --> 00:12:51.870
<v Speaker 1>is it will actually run a Dagger client

00:12:51.949 --> 00:12:54.445
<v Speaker 1>for you, which executes your command, but allows

00:12:54.445 --> 00:12:57.485
<v Speaker 1>you to visualize the entire graph of containers

00:12:57.485 --> 00:13:00.445
<v Speaker 1>and commands are running within the build instance.

00:13:00.765 --> 00:13:02.205
<v Speaker 1>So here, we'll actually be able to see

00:13:02.205 --> 00:13:04.285
<v Speaker 1>that most things are probably cached. I've run

00:13:04.285 --> 00:13:04.925
<v Speaker 1>it a few times,

00:13:05.520 --> 00:13:07.040
<v Speaker 1>but we can see all of the jobs

00:13:07.040 --> 00:13:09.440
<v Speaker 1>spawning and the output as we progress.

00:13:09.840 --> 00:13:11.680
<v Speaker 1>So you got all these, like, fancy get

00:13:11.680 --> 00:13:15.120
<v Speaker 1>branch symbols. Let's say, okay. Here's your directory.

00:13:15.680 --> 00:13:18.714
<v Speaker 1>Now we gotta pull an image. Here's Golang,

00:13:18.714 --> 00:13:20.235
<v Speaker 1>and you can see all these adults jumping

00:13:20.235 --> 00:13:22.875
<v Speaker 1>about. But it really gives you good visibility

00:13:22.875 --> 00:13:25.195
<v Speaker 1>into what's happening within your build pipeline.

00:13:26.235 --> 00:13:28.074
<v Speaker 1>Yeah. So that's Dagger. Nice.

00:13:28.314 --> 00:13:28.555
<v Speaker 2>So

00:13:29.940 --> 00:13:32.420
<v Speaker 2>where is where's the passing?

00:13:33.540 --> 00:13:34.900
<v Speaker 2>How do you know it passed?

00:13:35.460 --> 00:13:36.980
<v Speaker 2>It isn't obvious that

00:13:37.460 --> 00:13:39.220
<v Speaker 1>Well, it's all cash. What's it look like?

00:13:39.220 --> 00:13:42.020
<v Speaker 2>Well, it's

00:13:42.020 --> 00:13:43.860
<v Speaker 1>it's cached right now. It's somewhere in Oh,

00:13:43.860 --> 00:13:45.060
<v Speaker 2>it it was way at the top. I

00:13:45.060 --> 00:13:46.395
<v Speaker 2>see it. Was it?

00:13:46.875 --> 00:13:49.755
<v Speaker 1>Oh, yeah. Okay. Right. Okay. Right. But this

00:13:49.755 --> 00:13:52.235
<v Speaker 1>is all have been cached. So cached, cached,

00:13:52.235 --> 00:13:54.714
<v Speaker 1>cached, cached, cached, cached, cached, cached, the way

00:13:54.714 --> 00:13:57.755
<v Speaker 1>down. So actually, it really didn't execute anything

00:13:57.755 --> 00:13:59.800
<v Speaker 1>because nothing had changed.

00:14:00.280 --> 00:14:01.720
<v Speaker 1>If we change this again,

00:14:03.000 --> 00:14:06.680
<v Speaker 1>hello, blah blah blah, whatever. Something just invalidate

00:14:06.680 --> 00:14:07.560
<v Speaker 1>the cache.

00:14:07.720 --> 00:14:09.160
<v Speaker 1>And we'll actually see that one of the

00:14:09.160 --> 00:14:10.760
<v Speaker 1>steps is no longer cached and that'll be

00:14:10.760 --> 00:14:12.360
<v Speaker 1>the hurl test suite itself.

00:14:13.325 --> 00:14:15.005
<v Speaker 1>Because that's what we changed. Right? We changed

00:14:15.005 --> 00:14:16.685
<v Speaker 1>the hurl test file. Yeah. There we go.

00:14:16.685 --> 00:14:19.085
<v Speaker 1>This one actually executed this time and then

00:14:19.085 --> 00:14:22.125
<v Speaker 1>we got our failure. Oh, wow. Alright. I'm

00:14:22.125 --> 00:14:24.925
<v Speaker 2>impressed. Yeah. It's nice that you can raise

00:14:24.925 --> 00:14:27.260
<v Speaker 1>some go code, some TypeScript code, some Python

00:14:27.260 --> 00:14:29.260
<v Speaker 1>code, some Rust code, some Alexa codes, you

00:14:29.260 --> 00:14:31.740
<v Speaker 1>know, and theory could support any language.

00:14:32.300 --> 00:14:34.620
<v Speaker 1>Some languages are obviously better suited than than

00:14:34.620 --> 00:14:35.260
<v Speaker 1>others.

00:14:35.660 --> 00:14:36.779
<v Speaker 1>First of the most

00:14:37.180 --> 00:14:38.860
<v Speaker 1>first and most importantly, pick one that you're

00:14:38.860 --> 00:14:40.380
<v Speaker 1>comfortable with, but then after that, try and

00:14:40.380 --> 00:14:42.105
<v Speaker 1>pick the one that's gonna give you the

00:14:42.105 --> 00:14:44.745
<v Speaker 1>the best pipeline. Like, been able to reuse

00:14:44.745 --> 00:14:46.905
<v Speaker 1>functions across a mono repository is a really

00:14:46.905 --> 00:14:49.625
<v Speaker 1>important skill, but not every language actually supports

00:14:49.625 --> 00:14:50.905
<v Speaker 1>that terribly well,

00:14:51.385 --> 00:14:52.985
<v Speaker 1>like, no JS, unfortunately.

00:14:53.305 --> 00:14:55.625
<v Speaker 1>The Go with Go Workspace does enable that

00:14:55.625 --> 00:14:57.839
<v Speaker 1>kind of per user pipeline.

00:14:58.240 --> 00:15:00.240
<v Speaker 2>Very impressive. I could think of a few

00:15:00.240 --> 00:15:03.199
<v Speaker 2>uses for Dagger. Alright. Well, hopefully people enjoyed

00:15:03.199 --> 00:15:05.268
<v Speaker 1>this episode. We'll see you all next week.

00:15:05.268 --> 00:15:07.268
<v Speaker 1>Cheers. If you wanna hear why we showed

00:15:07.268 --> 00:15:09.508
<v Speaker 1>off these tools, check out the podcast available

00:15:09.508 --> 00:15:11.588
<v Speaker 1>at alphabets.fm.

00:15:11.748 --> 00:15:13.348
<v Speaker 1>Until next week. See you soon.
