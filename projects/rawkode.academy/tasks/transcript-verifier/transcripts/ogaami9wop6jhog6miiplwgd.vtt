WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 1dd52bab-b2d7-4d49-abc0-4586647f8213
Created: 2025-06-05T21:57:55.389Z
Duration: 7580.0815
Channels: 1

00:00:09.760 --> 00:00:10.480
<v Speaker 0>Cool.

00:00:11.840 --> 00:00:14.240
<v Speaker 0>Maybe let me just send a message.

00:00:21.305 --> 00:00:22.824
<v Speaker 0>But we are now on YouTube. So don't

00:00:22.824 --> 00:00:25.305
<v Speaker 0>say anything about me that says I'm unprofessional

00:00:25.305 --> 00:00:27.465
<v Speaker 0>or rubbish. Alright? Let's save that for afterwards.

00:00:34.690 --> 00:00:40.290
<v Speaker 0>It's

00:00:40.290 --> 00:00:42.450
<v Speaker 0>really frustrating, but we are live. We're on

00:00:42.450 --> 00:00:44.610
<v Speaker 0>YouTube. We'll get started in just a moment.

00:01:32.690 --> 00:01:35.090
<v Speaker 0>Alright, everyone has been emailed. Let's see what

00:01:35.090 --> 00:01:35.729
<v Speaker 0>happens.

00:01:37.090 --> 00:01:39.170
<v Speaker 0>Sorry about that, but we are

00:01:39.490 --> 00:01:40.930
<v Speaker 0>now gonna get started.

00:01:41.090 --> 00:01:42.770
<v Speaker 0>So let's say hello in the chat.

00:01:45.305 --> 00:01:46.025
<v Speaker 0>Alright.

00:01:48.104 --> 00:01:48.744
<v Speaker 0>Well,

00:01:49.064 --> 00:01:49.784
<v Speaker 0>Stefan.

00:01:49.865 --> 00:01:51.384
<v Speaker 0>Thank you for taking time out of your

00:01:51.384 --> 00:01:53.225
<v Speaker 0>day to join me on the session,

00:01:53.545 --> 00:01:56.905
<v Speaker 0>talk about Timoni and work on a live

00:01:56.905 --> 00:01:57.384
<v Speaker 0>demo.

00:01:57.760 --> 00:02:00.000
<v Speaker 0>So could you please take a few moments

00:02:00.000 --> 00:02:02.320
<v Speaker 0>just to let people know who you are,

00:02:02.320 --> 00:02:04.000
<v Speaker 0>what you're up to, and then we'll kick

00:02:04.000 --> 00:02:04.799
<v Speaker 0>things off.

00:02:05.360 --> 00:02:06.479
<v Speaker 1>Sure.

00:02:06.560 --> 00:02:08.560
<v Speaker 1>Hi, folks. I'm Stefan.

00:02:09.695 --> 00:02:11.055
<v Speaker 1>I'm a

00:02:11.375 --> 00:02:11.935
<v Speaker 1>long

00:02:12.175 --> 00:02:13.855
<v Speaker 1>term Flux maintainer.

00:02:13.855 --> 00:02:16.335
<v Speaker 1>If you don't know Flux, it's a CNC

00:02:16.335 --> 00:02:19.455
<v Speaker 1>project that does GitOps thingies.

00:02:20.175 --> 00:02:20.415
<v Speaker 1>And,

00:02:21.930 --> 00:02:23.290
<v Speaker 1>yeah, roughly

00:02:23.370 --> 00:02:26.810
<v Speaker 1>nine months ago, I started a new site

00:02:26.810 --> 00:02:27.530
<v Speaker 1>project

00:02:30.569 --> 00:02:31.770
<v Speaker 1>called Timoni,

00:02:32.250 --> 00:02:33.210
<v Speaker 1>which is

00:02:33.769 --> 00:02:35.530
<v Speaker 1>like Helm, but not Helm.

00:02:37.825 --> 00:02:39.905
<v Speaker 1>Doesn't do YAMLs,

00:02:40.065 --> 00:02:41.265
<v Speaker 1>but QLang.

00:02:41.665 --> 00:02:42.625
<v Speaker 1>And yeah,

00:02:42.944 --> 00:02:45.265
<v Speaker 1>works quite nicely with Kubernetes.

00:02:45.265 --> 00:02:48.224
<v Speaker 1>Uses all the new shiny things in the

00:02:48.224 --> 00:02:49.345
<v Speaker 1>Kubernetes API

00:02:50.290 --> 00:02:51.810
<v Speaker 1>that I've been,

00:02:52.210 --> 00:02:52.850
<v Speaker 1>yeah,

00:02:54.690 --> 00:02:57.090
<v Speaker 1>working with inside the Flux project for the

00:02:57.090 --> 00:02:58.290
<v Speaker 1>last two years.

00:02:59.330 --> 00:02:59.970
<v Speaker 1>So,

00:03:00.370 --> 00:03:03.490
<v Speaker 1>yeah, I'm very happy to share with you

00:03:04.050 --> 00:03:04.770
<v Speaker 1>my project.

00:03:06.385 --> 00:03:09.505
<v Speaker 1>And, yeah, hopefully, people will get excited about

00:03:09.505 --> 00:03:09.985
<v Speaker 1>it.

00:03:11.265 --> 00:03:13.345
<v Speaker 0>Awesome. Well, I do have lots of questions,

00:03:13.345 --> 00:03:15.025
<v Speaker 0>but I know you've got some slides. So

00:03:15.025 --> 00:03:16.865
<v Speaker 0>why don't you share your screen? We'll start

00:03:16.865 --> 00:03:18.385
<v Speaker 0>with that, and I'll throw my questions at

00:03:18.385 --> 00:03:19.905
<v Speaker 0>you as we work our way through that.

00:03:20.300 --> 00:03:22.860
<v Speaker 0>And then for everyone watching us on YouTube,

00:03:22.860 --> 00:03:25.100
<v Speaker 0>the demo will follow shortly after the slides.

00:03:25.100 --> 00:03:26.540
<v Speaker 0>So we will be getting hands on and

00:03:26.540 --> 00:03:29.020
<v Speaker 0>showing you how Timoni works in practice.

00:03:29.900 --> 00:03:30.540
<v Speaker 0>Cool.

00:03:31.420 --> 00:03:32.300
<v Speaker 1>Yeah. So,

00:03:34.345 --> 00:03:35.385
<v Speaker 1>Timoni.

00:03:36.584 --> 00:03:38.825
<v Speaker 1>I called it a package manager. And we

00:03:38.825 --> 00:03:40.985
<v Speaker 1>are going to see through the slides what

00:03:40.985 --> 00:03:44.185
<v Speaker 1>makes Timoni a package manager. But before I'm

00:03:44.185 --> 00:03:45.225
<v Speaker 1>getting there,

00:03:46.025 --> 00:03:48.985
<v Speaker 1>I wanted to frame a little bit

00:03:50.710 --> 00:03:53.990
<v Speaker 1>how I'm thinking about Timoni. And I basically

00:03:54.310 --> 00:03:54.950
<v Speaker 1>put

00:03:55.830 --> 00:03:57.350
<v Speaker 1>people in two categories.

00:03:57.750 --> 00:03:59.590
<v Speaker 1>The first category is

00:03:59.990 --> 00:04:01.270
<v Speaker 1>software makers,

00:04:01.270 --> 00:04:03.705
<v Speaker 1>like, I don't know, software vendors

00:04:03.705 --> 00:04:04.825
<v Speaker 1>that are

00:04:05.385 --> 00:04:07.225
<v Speaker 1>trying to ship their

00:04:09.225 --> 00:04:11.225
<v Speaker 1>cloud native apps onto

00:04:11.225 --> 00:04:12.585
<v Speaker 1>clients' clusters,

00:04:13.865 --> 00:04:15.385
<v Speaker 1>and of course, open

00:04:15.385 --> 00:04:16.345
<v Speaker 1>source maintainers.

00:04:16.970 --> 00:04:19.450
<v Speaker 1>There are so many open source projects out

00:04:19.450 --> 00:04:20.410
<v Speaker 1>there for

00:04:21.050 --> 00:04:22.490
<v Speaker 1>extending Kubernetes,

00:04:22.490 --> 00:04:25.050
<v Speaker 1>like CID controllers and so on.

00:04:26.730 --> 00:04:29.930
<v Speaker 1>And also platform engineers. So this group of

00:04:30.250 --> 00:04:32.315
<v Speaker 1>people and organizations

00:04:32.315 --> 00:04:36.074
<v Speaker 1>will want to, you know, distribute applications

00:04:36.074 --> 00:04:37.115
<v Speaker 1>onto

00:04:38.315 --> 00:04:40.955
<v Speaker 1>end users' clusters or environments.

00:04:41.035 --> 00:04:44.555
<v Speaker 1>So that's one category that Timoni tries to,

00:04:46.760 --> 00:04:47.720
<v Speaker 1>improve

00:04:47.720 --> 00:04:50.200
<v Speaker 1>their workflow there, how you

00:04:50.360 --> 00:04:51.320
<v Speaker 1>alter

00:04:53.000 --> 00:04:55.240
<v Speaker 1>your app definition

00:04:55.240 --> 00:04:58.120
<v Speaker 1>and how you distribute that to everybody.

00:04:58.920 --> 00:05:03.800
<v Speaker 1>And the second group are

00:05:01.855 --> 00:05:04.095
<v Speaker 1>end users, Kubernetes users,

00:05:04.415 --> 00:05:05.855
<v Speaker 1>can be developers,

00:05:05.855 --> 00:05:06.735
<v Speaker 1>operators,

00:05:07.695 --> 00:05:09.615
<v Speaker 1>people that want to use

00:05:11.375 --> 00:05:15.135
<v Speaker 1>well known defined upstream packages for a particular

00:05:15.375 --> 00:05:17.535
<v Speaker 1>app or controller or

00:05:18.819 --> 00:05:21.060
<v Speaker 1>complex systems. And they want to

00:05:21.620 --> 00:05:23.780
<v Speaker 1>make use of that to deploy it on

00:05:23.780 --> 00:05:25.300
<v Speaker 1>their own infrastructure.

00:05:26.500 --> 00:05:27.220
<v Speaker 1>So

00:05:28.020 --> 00:05:28.900
<v Speaker 1>I think

00:05:29.585 --> 00:05:30.545
<v Speaker 1>these two

00:05:31.265 --> 00:05:34.305
<v Speaker 1>thinking of users in this way, it's quite

00:05:34.305 --> 00:05:37.825
<v Speaker 1>common for any package manager out there. Someone

00:05:37.825 --> 00:05:40.545
<v Speaker 1>creates the package for an application and someone

00:05:40.545 --> 00:05:41.345
<v Speaker 1>else uses it.

00:05:42.330 --> 00:05:45.210
<v Speaker 1>But with Kubernetes, it's not always

00:05:45.210 --> 00:05:46.729
<v Speaker 1>like that. Usually,

00:05:48.250 --> 00:05:50.330
<v Speaker 1>these two groups can be a single group.

00:05:50.729 --> 00:05:51.289
<v Speaker 1>If

00:05:51.930 --> 00:05:52.570
<v Speaker 1>you

00:05:54.729 --> 00:05:55.689
<v Speaker 1>are

00:05:56.265 --> 00:05:58.185
<v Speaker 1>a platform engineer or if you are a

00:05:58.185 --> 00:06:00.505
<v Speaker 1>developer in your own organization,

00:06:00.665 --> 00:06:02.025
<v Speaker 1>you may

00:06:02.505 --> 00:06:04.665
<v Speaker 1>have to create a distribution for your own

00:06:04.665 --> 00:06:08.505
<v Speaker 1>app. And sometimes you also manage that app.

00:06:08.505 --> 00:06:10.425
<v Speaker 1>You deploy it on different clusters.

00:06:11.120 --> 00:06:12.160
<v Speaker 1>So

00:06:13.440 --> 00:06:15.360
<v Speaker 1>this group can be one.

00:06:16.880 --> 00:06:18.320
<v Speaker 1>Okay. So

00:06:18.560 --> 00:06:20.480
<v Speaker 1>what is Timoni? As I said, it's a

00:06:20.480 --> 00:06:22.240
<v Speaker 1>package manager. It's

00:06:22.639 --> 00:06:24.080
<v Speaker 1>basically a command line tool.

00:06:25.505 --> 00:06:27.745
<v Speaker 1>It's written in Golang.

00:06:28.545 --> 00:06:31.425
<v Speaker 1>It's a static binary built for Mac OS,

00:06:31.425 --> 00:06:35.025
<v Speaker 1>Linux, Windows. And it has no dependencies

00:06:35.025 --> 00:06:37.585
<v Speaker 1>on anything on your operating system.

00:06:38.865 --> 00:06:40.785
<v Speaker 1>And it embeds

00:06:40.530 --> 00:06:42.290
<v Speaker 1>three core technologies.

00:06:43.090 --> 00:06:43.970
<v Speaker 1>QLANK.

00:06:43.970 --> 00:06:45.090
<v Speaker 1>So basically,

00:06:45.170 --> 00:06:48.930
<v Speaker 1>Timoni comes, built with the Q engine inside.

00:06:51.090 --> 00:06:54.450
<v Speaker 1>So it heavily relies on QLANK for

00:06:54.935 --> 00:06:56.055
<v Speaker 1>when

00:06:56.055 --> 00:06:56.615
<v Speaker 1>you

00:06:57.095 --> 00:06:59.255
<v Speaker 1>write your app definition, you'll be writing it

00:06:59.255 --> 00:07:01.735
<v Speaker 1>in queue. When you want to deploy

00:07:02.055 --> 00:07:04.535
<v Speaker 1>that particular app, you can also

00:07:04.775 --> 00:07:07.495
<v Speaker 1>write the deployment, how you configure it, and

00:07:07.495 --> 00:07:10.910
<v Speaker 1>so on in queue. But for end users,

00:07:10.910 --> 00:07:14.030
<v Speaker 1>CUE is not a hard requirement. You can

00:07:14.030 --> 00:07:14.670
<v Speaker 1>also

00:07:14.910 --> 00:07:17.470
<v Speaker 1>write the configuration in a YAML file or

00:07:17.470 --> 00:07:19.070
<v Speaker 1>a JSON file and so on.

00:07:19.710 --> 00:07:20.590
<v Speaker 1>So

00:07:20.590 --> 00:07:21.470
<v Speaker 1>that's

00:07:21.870 --> 00:07:23.710
<v Speaker 1>one thing that powers Timoni,

00:07:24.215 --> 00:07:25.014
<v Speaker 1>Keylang.

00:07:25.414 --> 00:07:26.615
<v Speaker 1>The second one

00:07:27.175 --> 00:07:28.375
<v Speaker 1>is the

00:07:30.775 --> 00:07:32.615
<v Speaker 1>Open Container Initiative

00:07:32.615 --> 00:07:33.415
<v Speaker 1>standards.

00:07:33.495 --> 00:07:37.095
<v Speaker 1>And what standard Timoni heavily relies on are

00:07:37.095 --> 00:07:40.080
<v Speaker 1>OCI artifacts. So what are OCI artifacts? There

00:07:40.080 --> 00:07:42.960
<v Speaker 1>are these things that look like a container

00:07:42.960 --> 00:07:43.680
<v Speaker 1>image,

00:07:44.000 --> 00:07:46.800
<v Speaker 1>but inside is not a container image, can

00:07:46.800 --> 00:07:47.360
<v Speaker 1>be

00:07:49.200 --> 00:07:49.760
<v Speaker 1>custom

00:07:50.685 --> 00:07:51.565
<v Speaker 1>configuration.

00:07:51.565 --> 00:07:55.085
<v Speaker 1>In Timoni's case, what's in the OCI artifact

00:07:55.085 --> 00:07:55.965
<v Speaker 1>are

00:07:56.365 --> 00:07:57.565
<v Speaker 1>CUE definitions.

00:07:59.325 --> 00:08:01.725
<v Speaker 1>Timoni has its own OCI

00:08:01.805 --> 00:08:03.165
<v Speaker 1>artifact type

00:08:03.805 --> 00:08:04.765
<v Speaker 1>and

00:08:04.845 --> 00:08:06.639
<v Speaker 1>is compatible

00:08:06.639 --> 00:08:10.480
<v Speaker 1>with almost all container registries out there.

00:08:10.880 --> 00:08:13.840
<v Speaker 1>They got to a point where OCI artifacts

00:08:13.840 --> 00:08:14.400
<v Speaker 1>are

00:08:15.040 --> 00:08:17.360
<v Speaker 1>are the standard, and they are accepted almost

00:08:17.360 --> 00:08:17.760
<v Speaker 1>everywhere.

00:08:18.415 --> 00:08:21.055
<v Speaker 1>And third, of course, is Kubernetes.

00:08:21.055 --> 00:08:22.415
<v Speaker 1>Timoni

00:08:22.575 --> 00:08:24.495
<v Speaker 1>deploys everything on Kubernetes.

00:08:24.495 --> 00:08:27.535
<v Speaker 1>I didn't get Timoni to Lambdas or anything

00:08:27.535 --> 00:08:28.095
<v Speaker 1>else.

00:08:30.655 --> 00:08:33.669
<v Speaker 0>Get. You mean get. Yeah. Yeah.

00:08:34.150 --> 00:08:35.190
<v Speaker 1>Never know.

00:08:37.270 --> 00:08:39.510
<v Speaker 1>The idea here is that Timoni

00:08:40.309 --> 00:08:42.230
<v Speaker 1>tried to use this Kubernetes

00:08:43.029 --> 00:08:44.070
<v Speaker 1>API

00:08:44.805 --> 00:08:49.045
<v Speaker 1>using the latest and greatest innovation inside Kubernetes.

00:08:49.045 --> 00:08:52.725
<v Speaker 1>And more specifically, Timoni relies on Kubernetes server

00:08:52.725 --> 00:08:53.685
<v Speaker 1>side applied,

00:08:54.005 --> 00:08:57.205
<v Speaker 1>which is a thing that it's generally available

00:08:57.205 --> 00:08:58.725
<v Speaker 1>in Kubernetes

00:08:58.725 --> 00:09:00.485
<v Speaker 1>since

00:08:59.660 --> 00:09:02.060
<v Speaker 1>two years now. So you shouldn't have an

00:09:02.060 --> 00:09:03.420
<v Speaker 1>issue using Timoni.

00:09:03.420 --> 00:09:05.020
<v Speaker 1>You're probably running

00:09:06.140 --> 00:09:08.780
<v Speaker 1>a Kubernetes version that understands

00:09:08.780 --> 00:09:10.860
<v Speaker 1>this type of operations. So

00:09:11.420 --> 00:09:14.140
<v Speaker 1>how this makes Timoni different to

00:09:14.945 --> 00:09:15.665
<v Speaker 1>other

00:09:17.025 --> 00:09:19.105
<v Speaker 1>tools out there is the fact that

00:09:19.585 --> 00:09:20.545
<v Speaker 1>Timoni,

00:09:20.545 --> 00:09:23.265
<v Speaker 1>every time it tries to deploy an app,

00:09:23.905 --> 00:09:25.825
<v Speaker 1>it will ask the cluster

00:09:27.585 --> 00:09:29.665
<v Speaker 1>it will ask the cluster for the

00:09:30.089 --> 00:09:31.290
<v Speaker 1>parent state

00:09:31.449 --> 00:09:34.250
<v Speaker 1>and it will compare the cluster state with

00:09:34.250 --> 00:09:36.250
<v Speaker 1>the desired state to what's in the app

00:09:36.250 --> 00:09:37.050
<v Speaker 1>definition.

00:09:37.370 --> 00:09:39.050
<v Speaker 1>And it will only apply

00:09:39.690 --> 00:09:40.649
<v Speaker 1>changes

00:09:40.730 --> 00:09:43.209
<v Speaker 1>by correcting the state. So you have like

00:09:43.695 --> 00:09:45.375
<v Speaker 1>hundreds of deployments,

00:09:45.375 --> 00:09:47.295
<v Speaker 1>but you only change one of it,

00:09:47.695 --> 00:09:50.895
<v Speaker 1>unlike Helm and other tools, Timoni will only

00:09:50.975 --> 00:09:54.015
<v Speaker 1>apply that change. So it will be very,

00:09:54.015 --> 00:09:55.375
<v Speaker 1>very fast if you

00:09:55.775 --> 00:09:57.935
<v Speaker 1>do small changes and frequent changes.

00:10:01.070 --> 00:10:02.590
<v Speaker 1>Okay. Next. So

00:10:03.390 --> 00:10:05.150
<v Speaker 1>what makes Timoni a

00:10:06.030 --> 00:10:08.030
<v Speaker 1>package manager are

00:10:08.750 --> 00:10:10.030
<v Speaker 1>these four

00:10:10.764 --> 00:10:12.524
<v Speaker 1>core concepts around

00:10:12.685 --> 00:10:16.045
<v Speaker 1>applications. So first, it allows you to define

00:10:16.045 --> 00:10:16.845
<v Speaker 1>an app.

00:10:17.725 --> 00:10:19.805
<v Speaker 1>You distribute that definition.

00:10:20.125 --> 00:10:21.005
<v Speaker 1>You can

00:10:21.245 --> 00:10:22.205
<v Speaker 1>compose

00:10:22.685 --> 00:10:25.379
<v Speaker 1>an app from multiple definitions. For example, you

00:10:25.379 --> 00:10:26.740
<v Speaker 1>have microservices.

00:10:26.899 --> 00:10:28.899
<v Speaker 1>The app concept is

00:10:29.060 --> 00:10:31.300
<v Speaker 1>a bundle of all these microservices.

00:10:31.620 --> 00:10:34.259
<v Speaker 1>Maybe you have a distributed monolith. It's also

00:10:34.259 --> 00:10:35.379
<v Speaker 1>a composition of things.

00:10:36.375 --> 00:10:38.855
<v Speaker 1>So it has this feature of allowing you

00:10:38.855 --> 00:10:41.415
<v Speaker 1>to compose things and that's how your app

00:10:41.415 --> 00:10:45.175
<v Speaker 1>comes into being. And finally, lifecycle management,

00:10:45.175 --> 00:10:47.655
<v Speaker 1>which is the core thing that any

00:10:48.550 --> 00:10:51.029
<v Speaker 1>package manager should do. Should be able to

00:10:51.029 --> 00:10:54.149
<v Speaker 1>install things, upgrade things, uninstall it,

00:10:54.870 --> 00:10:57.510
<v Speaker 1>roll back, and and all these things which

00:10:57.990 --> 00:11:00.230
<v Speaker 1>we can call lifecycle management.

00:11:02.015 --> 00:11:04.815
<v Speaker 1>Okay, so let's do a deep dive into

00:11:04.815 --> 00:11:05.455
<v Speaker 1>those.

00:11:07.855 --> 00:11:09.535
<v Speaker 1>So app definition,

00:11:09.535 --> 00:11:10.095
<v Speaker 1>what

00:11:10.575 --> 00:11:11.214
<v Speaker 1>that means.

00:11:15.149 --> 00:11:17.790
<v Speaker 1>How do you define an app for Kubernetes

00:11:17.790 --> 00:11:21.550
<v Speaker 1>in most cases, normal cases, right? You'll have

00:11:21.630 --> 00:11:23.950
<v Speaker 1>a bunch of YAML files on the disk

00:11:24.190 --> 00:11:26.910
<v Speaker 1>with all sorts of settings in there, like

00:11:27.265 --> 00:11:30.145
<v Speaker 1>Kubernetes deployment, the service and so on. But

00:11:31.265 --> 00:11:32.545
<v Speaker 1>that representation,

00:11:33.665 --> 00:11:36.305
<v Speaker 1>all these YAMLs on a disk are

00:11:36.865 --> 00:11:40.305
<v Speaker 1>one way of how that app can be

00:11:39.780 --> 00:11:41.380
<v Speaker 1>deployed on a cluster. You need to change

00:11:41.380 --> 00:11:43.460
<v Speaker 1>things. You need to allow your end users

00:11:43.460 --> 00:11:45.540
<v Speaker 1>to fiddle

00:11:45.540 --> 00:11:47.700
<v Speaker 1>with limits or enable

00:11:47.700 --> 00:11:49.860
<v Speaker 1>some feature in your app in

00:11:50.340 --> 00:11:52.660
<v Speaker 1>the config map or things like that.

00:11:53.305 --> 00:11:55.625
<v Speaker 1>So how do you achieve it in our

00:11:55.705 --> 00:11:58.105
<v Speaker 1>current day? You have to have some kind

00:11:58.105 --> 00:12:01.225
<v Speaker 1>of templating engine. Right? Or you can use

00:12:01.225 --> 00:12:02.665
<v Speaker 1>customizing

00:12:02.665 --> 00:12:05.465
<v Speaker 1>and ship a bunch of overlays to your

00:12:05.465 --> 00:12:08.810
<v Speaker 1>end users, which I haven't seen it done

00:12:08.810 --> 00:12:09.690
<v Speaker 1>that much.

00:12:11.370 --> 00:12:12.170
<v Speaker 1>So it

00:12:12.490 --> 00:12:13.850
<v Speaker 1>boils down to

00:12:14.330 --> 00:12:15.370
<v Speaker 1>be able to

00:12:16.010 --> 00:12:18.170
<v Speaker 1>have a good app definition engine, you need

00:12:18.170 --> 00:12:19.370
<v Speaker 1>a templating engine.

00:12:19.930 --> 00:12:22.170
<v Speaker 1>And the templating engine that

00:12:22.704 --> 00:12:26.785
<v Speaker 1>Timoni chose and is built inside is QLang.

00:12:26.785 --> 00:12:29.745
<v Speaker 1>And what that brings to Timoni's

00:12:30.144 --> 00:12:34.464
<v Speaker 1>Timoni's users is having type safe Kubernetes templates.

00:12:34.785 --> 00:12:37.210
<v Speaker 1>I'm going to explain a little bit what

00:12:37.210 --> 00:12:39.130
<v Speaker 1>that means later on.

00:12:39.450 --> 00:12:40.010
<v Speaker 1>So

00:12:41.050 --> 00:12:44.810
<v Speaker 1>you define your app with typesafe Kubernetes templates,

00:12:44.810 --> 00:12:47.210
<v Speaker 1>then you allow your users to

00:12:48.105 --> 00:12:51.145
<v Speaker 1>customize it in all possible ways. But you

00:12:51.145 --> 00:12:54.904
<v Speaker 1>have total control of what the end user

00:12:55.065 --> 00:12:56.904
<v Speaker 1>can change to your app.

00:12:57.464 --> 00:12:59.945
<v Speaker 1>You control what you expose,

00:12:59.945 --> 00:13:01.865
<v Speaker 1>what you allow them to do. And more

00:13:01.865 --> 00:13:05.050
<v Speaker 1>importantly, you also can configure defaults,

00:13:05.050 --> 00:13:06.170
<v Speaker 1>good defaults

00:13:06.170 --> 00:13:08.570
<v Speaker 1>for your app and so on. So have

00:13:08.570 --> 00:13:10.650
<v Speaker 1>the app definition then

00:13:11.050 --> 00:13:14.650
<v Speaker 1>of course, how are end users going to

00:13:14.890 --> 00:13:18.025
<v Speaker 1>use that app definition? Well, the package manager

00:13:18.025 --> 00:13:20.665
<v Speaker 1>has to have some kind of distribution mechanism.

00:13:20.665 --> 00:13:23.625
<v Speaker 1>The distribution mechanism for Timoni are

00:13:24.585 --> 00:13:25.945
<v Speaker 1>container registries.

00:13:26.265 --> 00:13:29.305
<v Speaker 1>And I think it's kind of natural

00:13:29.305 --> 00:13:30.825
<v Speaker 1>these days because

00:13:31.910 --> 00:13:34.470
<v Speaker 1>any app that runs on Kubernetes

00:13:34.790 --> 00:13:37.670
<v Speaker 1>in a way has to is composed out

00:13:37.670 --> 00:13:40.310
<v Speaker 1>of one or multiple container images.

00:13:40.950 --> 00:13:43.110
<v Speaker 1>The app runs in a container, that runs

00:13:43.110 --> 00:13:44.230
<v Speaker 1>in a pod, and so

00:13:44.875 --> 00:13:45.435
<v Speaker 1>So

00:13:45.834 --> 00:13:49.195
<v Speaker 1>all software vendors out there already have a

00:13:49.195 --> 00:13:50.475
<v Speaker 1>container registry,

00:13:51.195 --> 00:13:53.595
<v Speaker 1>or they are pushing their apps to the

00:13:53.595 --> 00:13:55.035
<v Speaker 1>client container registry.

00:13:55.355 --> 00:13:58.394
<v Speaker 1>So in order to distribute

00:13:58.959 --> 00:14:00.240
<v Speaker 1>app definitions,

00:14:00.320 --> 00:14:02.880
<v Speaker 1>you can reuse that registry, which is already

00:14:02.880 --> 00:14:05.680
<v Speaker 1>there. You have figured it out how to

00:14:05.920 --> 00:14:07.760
<v Speaker 1>scale it, how to run it, and so

00:14:07.760 --> 00:14:10.320
<v Speaker 1>on. Right? So you can push to the

00:14:10.320 --> 00:14:13.760
<v Speaker 1>same container registry where your app images are,

00:14:14.595 --> 00:14:16.195
<v Speaker 1>the Timoni packages.

00:14:17.154 --> 00:14:20.515
<v Speaker 1>And Timoni packages have two

00:14:20.675 --> 00:14:21.635
<v Speaker 1>properties.

00:14:23.075 --> 00:14:24.435
<v Speaker 1>Timoni modules

00:14:24.675 --> 00:14:26.355
<v Speaker 1>are semantically versioned.

00:14:26.810 --> 00:14:29.209
<v Speaker 1>And this is enforced by the system. Timoni

00:14:29.209 --> 00:14:30.810
<v Speaker 1>will not allow you to

00:14:31.449 --> 00:14:33.690
<v Speaker 1>publish a new app definition

00:14:33.690 --> 00:14:36.170
<v Speaker 1>without having a valid Sembr

00:14:36.810 --> 00:14:38.970
<v Speaker 1>for it. And why Sembr is important

00:14:39.555 --> 00:14:40.835
<v Speaker 1>is not because

00:14:42.195 --> 00:14:44.515
<v Speaker 1>people have figured out Sambr. No, it's not

00:14:44.515 --> 00:14:45.795
<v Speaker 1>that. For

00:14:46.515 --> 00:14:49.075
<v Speaker 1>me, Sambr is more about ordering

00:14:49.075 --> 00:14:50.035
<v Speaker 1>than anything else.

00:14:51.450 --> 00:14:54.490
<v Speaker 1>You can determine what's the latest version by

00:14:54.490 --> 00:14:56.170
<v Speaker 1>just looking at

00:14:56.410 --> 00:14:57.770
<v Speaker 1>and it's quite easy.

00:14:58.090 --> 00:14:58.730
<v Speaker 1>Now,

00:15:00.650 --> 00:15:03.770
<v Speaker 1>using SemVol the right way, you, oh, I'm

00:15:03.770 --> 00:15:06.730
<v Speaker 1>making a breaking change. I'm bumping the major

00:15:06.730 --> 00:15:09.105
<v Speaker 1>version. Version. Well, not many people do it.

00:15:09.105 --> 00:15:12.065
<v Speaker 1>I mean, doesn't. It's on one point something,

00:15:12.065 --> 00:15:14.465
<v Speaker 1>and any final release comes with some breaking

00:15:14.465 --> 00:15:15.025
<v Speaker 1>change.

00:15:15.345 --> 00:15:15.905
<v Speaker 1>But

00:15:16.625 --> 00:15:19.505
<v Speaker 1>still, server as a means of

00:15:19.825 --> 00:15:22.145
<v Speaker 1>telling your user, this is a release candidate

00:15:22.145 --> 00:15:24.600
<v Speaker 1>or this is a stable version, it's quite

00:15:25.160 --> 00:15:27.720
<v Speaker 1>important that I went with that.

00:15:31.399 --> 00:15:34.520
<v Speaker 1>Timoni also wants to ensure immutability

00:15:34.600 --> 00:15:36.120
<v Speaker 1>and a container registry

00:15:36.985 --> 00:15:39.305
<v Speaker 1>does not enforce that by default. If you

00:15:39.305 --> 00:15:41.785
<v Speaker 1>use, like Timoni uses the version to set

00:15:41.785 --> 00:15:43.705
<v Speaker 1>the image tag in the registry.

00:15:43.865 --> 00:15:46.345
<v Speaker 1>And you can override it. You can push

00:15:46.345 --> 00:15:48.505
<v Speaker 1>now version 1.0.0

00:15:48.505 --> 00:15:50.830
<v Speaker 1>and later on say, oh, going to push

00:15:50.830 --> 00:15:52.670
<v Speaker 1>again 1.0.0.

00:15:53.070 --> 00:15:53.950
<v Speaker 1>This

00:15:55.310 --> 00:15:58.590
<v Speaker 1>is also an issue with Helm and container

00:15:58.590 --> 00:16:00.110
<v Speaker 1>images in general.

00:16:00.350 --> 00:16:02.510
<v Speaker 1>So how Timoni tries to solve this, it

00:16:02.510 --> 00:16:04.430
<v Speaker 1>allows the end user

00:16:05.395 --> 00:16:09.315
<v Speaker 1>to specify the version, but also the digest.

00:16:09.395 --> 00:16:11.555
<v Speaker 1>And the digest in a container registry is

00:16:11.555 --> 00:16:14.675
<v Speaker 1>immutable. And what Timoni will do, will compare

00:16:14.675 --> 00:16:17.555
<v Speaker 1>the version with the digest that the user

00:16:17.555 --> 00:16:18.115
<v Speaker 1>expects.

00:16:18.600 --> 00:16:19.399
<v Speaker 1>And if

00:16:19.720 --> 00:16:22.519
<v Speaker 1>that doesn't match it, it will not deploy

00:16:22.519 --> 00:16:24.600
<v Speaker 1>that modulator and it will say to the

00:16:24.600 --> 00:16:26.920
<v Speaker 1>end user, hey, you wanted this version

00:16:27.959 --> 00:16:30.519
<v Speaker 1>with this digest, but this is they are

00:16:30.519 --> 00:16:32.600
<v Speaker 1>no longer matching. So it can just delete

00:16:32.600 --> 00:16:35.154
<v Speaker 1>the version from there and work with Timoni

00:16:35.154 --> 00:16:37.635
<v Speaker 1>just to digest. I know this is not

00:16:38.194 --> 00:16:39.315
<v Speaker 1>human friendly.

00:16:39.315 --> 00:16:41.315
<v Speaker 1>You can't just look at the digest and

00:16:41.315 --> 00:16:43.795
<v Speaker 1>understand it, but for machine is really great

00:16:43.795 --> 00:16:46.915
<v Speaker 1>and you should be pinning things using digest

00:16:46.915 --> 00:16:49.555
<v Speaker 1>and Timoni tries to make that

00:16:49.890 --> 00:16:52.370
<v Speaker 1>not also for modules, but also for container

00:16:52.370 --> 00:16:55.490
<v Speaker 1>images. And I'll mention that later on. Yeah,

00:16:55.490 --> 00:16:57.730
<v Speaker 1>and also modules can be cryptographically

00:16:57.730 --> 00:17:00.290
<v Speaker 1>signed. That's also very important and you can

00:17:00.290 --> 00:17:03.010
<v Speaker 1>verify it. Timoni fully integrates

00:17:03.125 --> 00:17:05.284
<v Speaker 1>right now with cosign

00:17:06.405 --> 00:17:09.125
<v Speaker 1>keyless or with static keys.

00:17:11.525 --> 00:17:14.005
<v Speaker 1>So how does a bundle look like? How

00:17:14.005 --> 00:17:16.819
<v Speaker 1>does a module look like? What What the

00:17:17.700 --> 00:17:19.539
<v Speaker 1>software vendor, what the

00:17:20.180 --> 00:17:23.540
<v Speaker 1>open source maintainer has to create inside the

00:17:23.540 --> 00:17:25.060
<v Speaker 1>repo? So you'll

00:17:25.060 --> 00:17:26.820
<v Speaker 1>have this kind of structure. It is a

00:17:26.820 --> 00:17:27.619
<v Speaker 1>directory.

00:17:28.260 --> 00:17:28.820
<v Speaker 1>You can

00:17:29.475 --> 00:17:30.275
<v Speaker 1>initialize

00:17:30.275 --> 00:17:32.195
<v Speaker 1>all of this with a simple command,

00:17:32.355 --> 00:17:33.955
<v Speaker 1>Timoni Mode in it.

00:17:34.355 --> 00:17:36.755
<v Speaker 1>Creates this kind of structure. And if you

00:17:36.755 --> 00:17:37.715
<v Speaker 1>look at it, it

00:17:38.115 --> 00:17:40.195
<v Speaker 1>resembles a little bit with Helm. I tried

00:17:40.195 --> 00:17:40.754
<v Speaker 1>to

00:17:40.995 --> 00:17:41.875
<v Speaker 1>preserve

00:17:41.875 --> 00:17:43.235
<v Speaker 1>the templates directory,

00:17:44.180 --> 00:17:46.100
<v Speaker 1>but that is the only resemblance.

00:17:47.780 --> 00:17:49.620
<v Speaker 1>And of course, it has a README where

00:17:49.620 --> 00:17:52.260
<v Speaker 1>you should definitely put in there all the

00:17:52.260 --> 00:17:53.220
<v Speaker 1>documentation

00:17:53.220 --> 00:17:54.820
<v Speaker 1>around your module.

00:17:54.820 --> 00:17:56.260
<v Speaker 1>And the structure here

00:17:56.775 --> 00:17:59.335
<v Speaker 1>is very specific to QLAN. What

00:17:59.415 --> 00:18:01.495
<v Speaker 1>is a Timoni module is, in fact, a

00:18:01.495 --> 00:18:03.895
<v Speaker 1>QLAN module with a

00:18:05.495 --> 00:18:07.335
<v Speaker 1>more open ended structure.

00:18:08.375 --> 00:18:09.255
<v Speaker 1>QLAN is,

00:18:10.340 --> 00:18:12.820
<v Speaker 1>if you're not familiar with it, is this

00:18:13.460 --> 00:18:16.100
<v Speaker 1>language that tries to unify all types of

00:18:16.100 --> 00:18:18.660
<v Speaker 1>configuration. You can generate configuration, you can

00:18:19.140 --> 00:18:20.500
<v Speaker 1>validate configuration,

00:18:20.500 --> 00:18:22.179
<v Speaker 1>you can also generate code.

00:18:23.220 --> 00:18:24.820
<v Speaker 1>You can do even scripting with it.

00:18:26.705 --> 00:18:27.424
<v Speaker 1>So

00:18:27.745 --> 00:18:29.745
<v Speaker 1>it's very flexible. It allows you to do

00:18:29.745 --> 00:18:30.704
<v Speaker 1>a bunch of things.

00:18:31.904 --> 00:18:33.985
<v Speaker 1>But this kind of flexibility

00:18:33.985 --> 00:18:35.984
<v Speaker 1>also means that,

00:18:36.465 --> 00:18:39.105
<v Speaker 1>you know, it's quite hard to get started

00:18:39.105 --> 00:18:42.120
<v Speaker 1>and figure it out and so on. So

00:18:42.120 --> 00:18:45.400
<v Speaker 1>Timoni comes with very strict ways of how

00:18:45.400 --> 00:18:48.359
<v Speaker 1>modules are defined, how they are structured. So

00:18:48.600 --> 00:18:50.519
<v Speaker 1>it brings some kind of

00:18:51.159 --> 00:18:51.960
<v Speaker 1>it's uniform.

00:18:52.505 --> 00:18:53.545
<v Speaker 1>No

00:18:53.545 --> 00:18:55.465
<v Speaker 1>matter what repo you'll be looking at that

00:18:55.465 --> 00:18:57.305
<v Speaker 1>has a Timoni module, have to have this

00:18:57.305 --> 00:18:59.305
<v Speaker 1>structure and it will have to have

00:18:59.545 --> 00:19:02.905
<v Speaker 1>particular files with different functions. For example,

00:19:04.549 --> 00:19:06.710
<v Speaker 1>you need to have a templates directory

00:19:06.710 --> 00:19:09.110
<v Speaker 1>and in every templates directory, you have a

00:19:09.110 --> 00:19:10.070
<v Speaker 1>config.

00:19:10.230 --> 00:19:12.149
<v Speaker 1>Q, which contains

00:19:13.350 --> 00:19:16.549
<v Speaker 1>a Q definition of what type of configuration

00:19:16.549 --> 00:19:17.509
<v Speaker 1>your app

00:19:17.990 --> 00:19:18.470
<v Speaker 1>allows.

00:19:19.065 --> 00:19:21.945
<v Speaker 1>And it also contains the schema and the

00:19:21.945 --> 00:19:22.904
<v Speaker 1>constraints.

00:19:23.385 --> 00:19:26.024
<v Speaker 1>And all of that is put in there.

00:19:26.424 --> 00:19:29.304
<v Speaker 1>And then you have Timoni ignore and so

00:19:29.304 --> 00:19:29.784
<v Speaker 1>on,

00:19:30.264 --> 00:19:31.304
<v Speaker 1>all these things

00:19:31.784 --> 00:19:32.585
<v Speaker 1>that are here.

00:19:34.169 --> 00:19:34.809
<v Speaker 1>But

00:19:35.049 --> 00:19:36.570
<v Speaker 1>the idea is that

00:19:36.730 --> 00:19:38.570
<v Speaker 1>your module will contain

00:19:38.570 --> 00:19:39.449
<v Speaker 1>schemas.

00:19:39.610 --> 00:19:42.570
<v Speaker 1>For example, all the Kubernetes API schemas.

00:19:42.570 --> 00:19:44.329
<v Speaker 1>So if you

00:19:44.970 --> 00:19:47.850
<v Speaker 1>want to define a Kubernetes deployment, you'll be

00:19:47.850 --> 00:19:50.504
<v Speaker 1>using the upstream Kubernetes deployment

00:19:50.505 --> 00:19:51.304
<v Speaker 1>schema,

00:19:51.625 --> 00:19:53.304
<v Speaker 1>which is very different from

00:19:53.705 --> 00:19:55.465
<v Speaker 1>other templating engines.

00:19:55.465 --> 00:19:58.344
<v Speaker 1>Why is it different? Because once you

00:19:58.585 --> 00:19:59.945
<v Speaker 1>use a schema,

00:20:00.345 --> 00:20:03.225
<v Speaker 1>then you know that template is type safe.

00:20:03.820 --> 00:20:07.020
<v Speaker 1>You can you can add there a field,

00:20:07.340 --> 00:20:08.540
<v Speaker 1>let's say replicas,

00:20:08.540 --> 00:20:10.140
<v Speaker 1>and you make a typo and you don't

00:20:10.140 --> 00:20:11.260
<v Speaker 1>type, last

00:20:12.060 --> 00:20:12.860
<v Speaker 1>test.

00:20:14.460 --> 00:20:16.955
<v Speaker 1>Running a Timoni vet, Timoni will tell you,

00:20:16.955 --> 00:20:19.915
<v Speaker 1>hey, this field is not in deployment. You

00:20:19.915 --> 00:20:21.355
<v Speaker 1>can't set this field.

00:20:21.595 --> 00:20:22.475
<v Speaker 1>So

00:20:22.475 --> 00:20:23.515
<v Speaker 1>all those

00:20:23.675 --> 00:20:26.235
<v Speaker 1>problems where you are just

00:20:26.635 --> 00:20:27.995
<v Speaker 1>templating over

00:20:28.240 --> 00:20:30.799
<v Speaker 1>a text, which is some kind of YAML,

00:20:31.440 --> 00:20:32.639
<v Speaker 1>are quite gone.

00:20:34.000 --> 00:20:34.639
<v Speaker 1>Are

00:20:35.279 --> 00:20:38.399
<v Speaker 1>way safer using schemas because they are strict

00:20:38.399 --> 00:20:41.759
<v Speaker 1>and all these fields are validated without

00:20:41.840 --> 00:20:43.200
<v Speaker 1>you having to

00:20:43.945 --> 00:20:46.585
<v Speaker 1>apply all the time to Kubernetes cluster and

00:20:46.585 --> 00:20:49.865
<v Speaker 1>test if these things are okay or not.

00:20:50.105 --> 00:20:52.184
<v Speaker 1>And Timoni goes even further

00:20:52.745 --> 00:20:53.865
<v Speaker 1>than just

00:20:54.105 --> 00:20:55.065
<v Speaker 1>offering

00:20:55.065 --> 00:20:57.225
<v Speaker 1>type safe

00:20:56.690 --> 00:20:58.130
<v Speaker 1>schemas and

00:20:58.130 --> 00:20:59.809
<v Speaker 1>templates for Kubernetes

00:20:59.809 --> 00:21:01.889
<v Speaker 1>native objects. You can also

00:21:03.170 --> 00:21:05.970
<v Speaker 1>embed in your modules Kubernetes CRDs.

00:21:06.450 --> 00:21:09.425
<v Speaker 1>And Timoni has a command where you give

00:21:09.425 --> 00:21:10.225
<v Speaker 1>it a

00:21:10.865 --> 00:21:13.505
<v Speaker 1>CRD definition, let's say, I don't know, certificate

00:21:13.505 --> 00:21:14.784
<v Speaker 1>from cert manager.

00:21:15.025 --> 00:21:17.585
<v Speaker 1>And it will generate a schema for you.

00:21:17.585 --> 00:21:19.905
<v Speaker 1>And when you define a certificate, it will

00:21:19.905 --> 00:21:21.505
<v Speaker 1>have the same validation

00:21:21.745 --> 00:21:23.905
<v Speaker 1>to know all the fields, all the possible

00:21:24.320 --> 00:21:26.639
<v Speaker 1>values of those fields and so on.

00:21:28.240 --> 00:21:30.159
<v Speaker 1>So this is like a

00:21:31.040 --> 00:21:33.679
<v Speaker 1>major step in the direction where

00:21:33.840 --> 00:21:36.559
<v Speaker 1>more and more controllers are there and

00:21:37.515 --> 00:21:41.035
<v Speaker 1>now it's quite common to ship your application,

00:21:41.035 --> 00:21:42.795
<v Speaker 1>not only with Kubernetes

00:21:42.875 --> 00:21:45.835
<v Speaker 1>standard APIs, but also making

00:21:47.275 --> 00:21:49.675
<v Speaker 1>use of all these extensions, all these custom

00:21:49.675 --> 00:21:50.555
<v Speaker 1>resource definitions.

00:21:51.870 --> 00:21:54.830
<v Speaker 1>So yeah, that's how a module looks like.

00:21:56.270 --> 00:21:57.950
<v Speaker 1>Timoni comes with the

00:21:59.070 --> 00:22:01.710
<v Speaker 1>whole set of commands for creating

00:22:01.710 --> 00:22:03.550
<v Speaker 1>a module from scratch, that's in it,

00:22:04.315 --> 00:22:06.395
<v Speaker 1>verifying the module web.

00:22:06.795 --> 00:22:08.395
<v Speaker 1>You can build it and see the final

00:22:08.395 --> 00:22:10.235
<v Speaker 1>YAML or the final JSON.

00:22:10.715 --> 00:22:11.595
<v Speaker 1>You can

00:22:12.155 --> 00:22:12.955
<v Speaker 1>import

00:22:13.355 --> 00:22:14.955
<v Speaker 1>Kubernetes schemas

00:22:14.955 --> 00:22:18.395
<v Speaker 1>by just setting the Kubernetes version, and these

00:22:18.395 --> 00:22:20.340
<v Speaker 1>are curated schemas

00:22:20.820 --> 00:22:23.220
<v Speaker 1>that I've published on GitHub. And you can

00:22:23.220 --> 00:22:26.340
<v Speaker 1>also, as I said, vendor any CRD you

00:22:26.340 --> 00:22:28.740
<v Speaker 1>have there by just giving Timoni the

00:22:29.220 --> 00:22:32.180
<v Speaker 1>YAML of that CRD or the URL of

00:22:32.180 --> 00:22:32.900
<v Speaker 1>that CRD.

00:22:34.835 --> 00:22:36.914
<v Speaker 1>And of course it comes with commands for

00:22:36.914 --> 00:22:38.914
<v Speaker 1>you to actually run end to end tests

00:22:38.914 --> 00:22:41.475
<v Speaker 1>like is my deployment. Okay, my deployment is

00:22:41.475 --> 00:22:43.475
<v Speaker 1>valid. It has all these things, but what

00:22:43.475 --> 00:22:45.394
<v Speaker 1>about will it work on a cluster?

00:22:47.050 --> 00:22:50.010
<v Speaker 1>So it has the supply command. You can,

00:22:50.010 --> 00:22:50.490
<v Speaker 1>that

00:22:51.050 --> 00:22:52.650
<v Speaker 1>works with local

00:22:52.650 --> 00:22:54.410
<v Speaker 1>modules. You don't have to push them to

00:22:54.410 --> 00:22:56.330
<v Speaker 1>a container registry and you can do all

00:22:56.330 --> 00:22:58.730
<v Speaker 1>sorts of tests and create our own end

00:22:58.730 --> 00:23:02.010
<v Speaker 1>to end test grid in CI and so

00:23:02.010 --> 00:23:02.170
<v Speaker 1>on.

00:23:05.575 --> 00:23:06.934
<v Speaker 1>For distributions,

00:23:07.095 --> 00:23:11.095
<v Speaker 1>there are also dedicated commands like module push,

00:23:11.095 --> 00:23:13.975
<v Speaker 1>module pull, module ls, which will query the

00:23:13.975 --> 00:23:16.695
<v Speaker 1>container register, gives you all the versions, all

00:23:16.695 --> 00:23:17.655
<v Speaker 1>their digests.

00:23:18.670 --> 00:23:21.550
<v Speaker 1>It also comes with some helper functions like

00:23:21.550 --> 00:23:24.030
<v Speaker 1>registry login and logout in case you don't

00:23:24.030 --> 00:23:24.830
<v Speaker 1>have a

00:23:25.230 --> 00:23:28.110
<v Speaker 1>Docker CLI or a Crane CLI locally.

00:23:29.870 --> 00:23:32.590
<v Speaker 1>And it also allows you to sign and

00:23:32.590 --> 00:23:33.150
<v Speaker 1>verify

00:23:33.825 --> 00:23:34.784
<v Speaker 1>modules

00:23:34.784 --> 00:23:36.544
<v Speaker 1>when you do a push and when you

00:23:36.544 --> 00:23:37.825
<v Speaker 1>do a pull.

00:23:39.505 --> 00:23:40.224
<v Speaker 1>Nice.

00:23:41.024 --> 00:23:41.664
<v Speaker 1>Any

00:23:43.105 --> 00:23:44.705
<v Speaker 1>ideas, David, so far?

00:23:45.345 --> 00:23:46.465
<v Speaker 1>How do you like it?

00:23:47.860 --> 00:23:49.460
<v Speaker 0>I mean, it takes all the boxes for

00:23:49.460 --> 00:23:51.700
<v Speaker 0>me. Right? Because let's go back to everything

00:23:51.700 --> 00:23:52.899
<v Speaker 0>you've covered so far.

00:23:54.100 --> 00:23:56.179
<v Speaker 0>I've not made it a secret on my

00:23:56.179 --> 00:23:57.779
<v Speaker 0>YouTube channel. Right? I'm not a fan of

00:23:57.779 --> 00:23:59.700
<v Speaker 0>Helm. And it's not because Helm

00:24:00.179 --> 00:24:02.259
<v Speaker 0>does any one thing particularly

00:24:02.260 --> 00:24:02.500
<v Speaker 0>bad.

00:24:03.115 --> 00:24:06.235
<v Speaker 0>It's because it's YAML and because Go templating,

00:24:06.235 --> 00:24:09.034
<v Speaker 0>in my opinion, just isn't good enough. It's

00:24:09.034 --> 00:24:11.434
<v Speaker 0>a horrible syntax unless you've written a lot

00:24:11.434 --> 00:24:13.115
<v Speaker 0>of Go code before, which used to be

00:24:13.115 --> 00:24:15.434
<v Speaker 0>true, right, in Kubernetes ecosystem. Everyone that was

00:24:15.434 --> 00:24:17.034
<v Speaker 0>in the Kubernetes space had written a plenty

00:24:17.034 --> 00:24:19.179
<v Speaker 0>of Go code, probably used the template and

00:24:19.179 --> 00:24:21.340
<v Speaker 0>language. They were fine. But as more people

00:24:21.340 --> 00:24:21.979
<v Speaker 0>came,

00:24:22.220 --> 00:24:23.820
<v Speaker 0>I spent a lot of my time helping

00:24:23.820 --> 00:24:26.459
<v Speaker 0>people understand Go templates rather than just

00:24:26.860 --> 00:24:28.779
<v Speaker 0>and, hey. Use this or to, like, Ginger

00:24:28.779 --> 00:24:31.659
<v Speaker 0>or handlebar syntax. Everybody's familiar with this now.

00:24:32.164 --> 00:24:33.205
<v Speaker 0>Go templates

00:24:33.284 --> 00:24:35.924
<v Speaker 0>resemble a little bit until it doesn't. Like,

00:24:35.924 --> 00:24:37.924
<v Speaker 0>the special dot syntax and the way that,

00:24:37.924 --> 00:24:39.924
<v Speaker 0>you know, trimming white spaces. There's loads of

00:24:39.924 --> 00:24:42.245
<v Speaker 0>weird quirks. However, I'm not gonna bash about

00:24:42.245 --> 00:24:43.844
<v Speaker 0>Helm because Helm has also

00:24:44.404 --> 00:24:45.924
<v Speaker 0>helped us get to where we are today.

00:24:46.490 --> 00:24:48.010
<v Speaker 1>Of course. I I feel that there has

00:24:48.010 --> 00:24:49.850
<v Speaker 0>to be something better. And the minute I

00:24:49.850 --> 00:24:50.890
<v Speaker 0>seen Timoni

00:24:50.970 --> 00:24:52.570
<v Speaker 0>and I saw that it is CUE and

00:24:52.570 --> 00:24:54.010
<v Speaker 0>it was used in OCI,

00:24:54.330 --> 00:24:56.490
<v Speaker 0>like it's just like stars in my eyes.

00:24:56.490 --> 00:24:57.610
<v Speaker 0>I was like, this is this is what

00:24:57.610 --> 00:24:59.130
<v Speaker 0>I wanted. This is this is like if

00:24:59.130 --> 00:25:00.810
<v Speaker 0>I could build something and I had the

00:25:01.065 --> 00:25:02.585
<v Speaker 0>the well to set and do it, this

00:25:02.585 --> 00:25:04.264
<v Speaker 0>is exactly what I wanna see and what

00:25:04.264 --> 00:25:05.465
<v Speaker 0>I want to see. So I was very

00:25:05.465 --> 00:25:06.024
<v Speaker 0>happy.

00:25:08.105 --> 00:25:11.225
<v Speaker 0>I came into this knowing the problem space,

00:25:11.225 --> 00:25:12.585
<v Speaker 0>knowing that I like CUE

00:25:14.010 --> 00:25:16.410
<v Speaker 0>and knowing that OCI is where we need

00:25:16.410 --> 00:25:18.410
<v Speaker 0>to be for the, you know, future facing

00:25:18.410 --> 00:25:19.929
<v Speaker 0>get ups delivery pipelines.

00:25:20.330 --> 00:25:22.330
<v Speaker 0>But let's assume there are people watching that

00:25:22.330 --> 00:25:24.570
<v Speaker 0>are interested in Timoni, they haven't maybe got

00:25:24.570 --> 00:25:26.330
<v Speaker 0>that experience with CUE. I would love to

00:25:26.330 --> 00:25:26.890
<v Speaker 0>know from you,

00:25:27.705 --> 00:25:29.145
<v Speaker 0>you being the person that made all of

00:25:29.145 --> 00:25:31.705
<v Speaker 0>these decisions as one, why did you say

00:25:31.705 --> 00:25:33.465
<v Speaker 0>that you had to write a new tool?

00:25:33.465 --> 00:25:35.465
<v Speaker 0>And why did you just say that CUE

00:25:35.465 --> 00:25:37.544
<v Speaker 0>would be the substrate or the, you know,

00:25:37.544 --> 00:25:40.025
<v Speaker 0>the the primitive for building that new tool?

00:25:44.220 --> 00:25:45.659
<v Speaker 1>Yeah. I mean,

00:25:46.299 --> 00:25:49.260
<v Speaker 1>I I got to queue out of frustration

00:25:49.260 --> 00:25:49.979
<v Speaker 1>or

00:25:50.779 --> 00:25:53.419
<v Speaker 1>writing Helm Chats, and I wrote a lot

00:25:53.419 --> 00:25:55.260
<v Speaker 1>of them. And I still maintain a lot

00:25:55.260 --> 00:25:55.580
<v Speaker 1>of them.

00:25:56.355 --> 00:25:58.835
<v Speaker 1>Hell will not go away anytime soon.

00:25:59.155 --> 00:25:59.955
<v Speaker 1>And

00:26:02.115 --> 00:26:03.235
<v Speaker 1>I tried

00:26:04.515 --> 00:26:05.875
<v Speaker 1>over the years

00:26:06.595 --> 00:26:08.195
<v Speaker 1>several technologies that

00:26:11.059 --> 00:26:13.700
<v Speaker 1>tried to enter this space and of failed.

00:26:13.700 --> 00:26:16.900
<v Speaker 1>I think JSONED was the closest one. And

00:26:16.900 --> 00:26:17.700
<v Speaker 1>there

00:26:18.100 --> 00:26:19.779
<v Speaker 1>were different projects

00:26:19.940 --> 00:26:23.075
<v Speaker 1>back in the day that are dead right

00:26:23.075 --> 00:26:25.875
<v Speaker 1>now. I think the only one still alive

00:26:25.875 --> 00:26:28.834
<v Speaker 1>and kicking is from Grafana,

00:26:29.475 --> 00:26:30.195
<v Speaker 1>Tanga.

00:26:32.835 --> 00:26:33.714
<v Speaker 1>Yeah. I

00:26:34.355 --> 00:26:35.715
<v Speaker 1>JSON didn't stick with me.

00:26:37.910 --> 00:26:40.549
<v Speaker 1>I'm frank. I mean, it's powerful. It's nice.

00:26:40.549 --> 00:26:42.789
<v Speaker 1>But I don't know. I couldn't deal with

00:26:43.590 --> 00:26:46.470
<v Speaker 1>JSON schemas on top of JSON and other

00:26:46.470 --> 00:26:47.270
<v Speaker 1>JSONs.

00:26:47.270 --> 00:26:48.470
<v Speaker 1>And so, yeah. It was like

00:26:49.615 --> 00:26:51.215
<v Speaker 1>I think what yeah. You're you're right. Like,

00:26:51.215 --> 00:26:52.975
<v Speaker 0>I think one of the challenges with JSON

00:26:52.975 --> 00:26:54.255
<v Speaker 0>at JSON, I don't even know how to

00:26:54.255 --> 00:26:55.854
<v Speaker 0>pronounce it right. But

00:26:56.174 --> 00:26:56.575
<v Speaker 0>it

00:26:57.054 --> 00:27:00.174
<v Speaker 0>was familiar enough if you didn't do anything

00:27:00.174 --> 00:27:01.934
<v Speaker 0>JSON at ish and you just talk to

00:27:01.934 --> 00:27:03.720
<v Speaker 0>JSON. But the minute you wanted to start

00:27:03.720 --> 00:27:05.960
<v Speaker 0>using their functions and the other features that

00:27:05.960 --> 00:27:08.039
<v Speaker 0>made it as powerful as it it was,

00:27:08.280 --> 00:27:10.840
<v Speaker 0>it became so alien so quickly that you

00:27:10.840 --> 00:27:12.840
<v Speaker 0>just really, oh, this this node doesn't feel

00:27:12.840 --> 00:27:15.080
<v Speaker 0>like something I'm comfortable with anymore. And that

00:27:15.080 --> 00:27:16.520
<v Speaker 0>was always one of my struggles been trying

00:27:16.520 --> 00:27:17.400
<v Speaker 0>to work with it for sure.

00:27:18.315 --> 00:27:19.595
<v Speaker 1>Yeah. For

00:27:19.595 --> 00:27:20.794
<v Speaker 1>me it was like,

00:27:20.955 --> 00:27:23.514
<v Speaker 1>okay, who uses it right now? And I

00:27:23.595 --> 00:27:25.835
<v Speaker 1>I've seen that the Prometheus team is a

00:27:25.835 --> 00:27:28.075
<v Speaker 1>big fan of of JSON. And I looked

00:27:28.075 --> 00:27:28.955
<v Speaker 1>at JSON

00:27:29.195 --> 00:27:29.995
<v Speaker 1>for

00:27:30.630 --> 00:27:34.710
<v Speaker 1>deploying Prometheus operator and some Grafana dashboards. I

00:27:36.070 --> 00:27:39.030
<v Speaker 1>yeah, I said, what? It wasn't for me.

00:27:39.030 --> 00:27:41.350
<v Speaker 1>I don't know. I don't want to say

00:27:41.350 --> 00:27:43.350
<v Speaker 1>it's not for everybody. Lots of people use

00:27:43.350 --> 00:27:44.790
<v Speaker 1>it and love it, but

00:27:45.695 --> 00:27:48.015
<v Speaker 1>it didn't stick with me. Then,

00:27:49.375 --> 00:27:51.294
<v Speaker 1>I don't know, years later,

00:27:51.775 --> 00:27:55.135
<v Speaker 1>two years ago, I was at KubeCon Valencia.

00:27:55.135 --> 00:27:57.375
<v Speaker 1>Someone came to me at the Flux booth

00:27:57.375 --> 00:28:00.299
<v Speaker 1>and said, hey, we migrated all our charts

00:28:00.299 --> 00:28:01.339
<v Speaker 1>and all our

00:28:01.740 --> 00:28:04.940
<v Speaker 1>customized overlay to Keylang. I said, Okay,

00:28:05.419 --> 00:28:07.980
<v Speaker 1>I knew about Keylang. I went to their

00:28:07.980 --> 00:28:08.859
<v Speaker 1>website,

00:28:09.259 --> 00:28:11.019
<v Speaker 1>I don't know, maybe two years, three years

00:28:11.019 --> 00:28:11.820
<v Speaker 1>and a half ago.

00:28:14.795 --> 00:28:17.914
<v Speaker 1>It looked very similar to Go with J.

00:28:18.235 --> 00:28:21.434
<v Speaker 1>Wow, I do Go, I don't know, eight

00:28:21.434 --> 00:28:22.394
<v Speaker 1>years now.

00:28:23.355 --> 00:28:25.355
<v Speaker 1>But then when I looked at their docs,

00:28:25.355 --> 00:28:28.235
<v Speaker 1>it felt like, I don't know, the docs

00:28:28.235 --> 00:28:29.275
<v Speaker 1>were written for

00:28:30.539 --> 00:28:31.979
<v Speaker 1>language authors,

00:28:32.059 --> 00:28:35.419
<v Speaker 1>for academic people. And I looked at that.

00:28:36.220 --> 00:28:37.339
<v Speaker 1>And I yeah,

00:28:38.380 --> 00:28:39.579
<v Speaker 1>I didn't continue.

00:28:39.899 --> 00:28:41.500
<v Speaker 1>I almost forgot about it.

00:28:44.115 --> 00:28:46.514
<v Speaker 1>Then this person that came to me, Varesha,

00:28:46.514 --> 00:28:48.115
<v Speaker 1>we talked a lot. I think we talked

00:28:48.115 --> 00:28:49.234
<v Speaker 1>about half

00:28:49.235 --> 00:28:52.034
<v Speaker 1>an hour or something. And he really convinced

00:28:52.034 --> 00:28:53.954
<v Speaker 1>me to go back home and

00:28:54.115 --> 00:28:55.955
<v Speaker 1>give it another shot. And

00:28:58.080 --> 00:28:59.359
<v Speaker 1>it took a while

00:28:59.679 --> 00:29:00.559
<v Speaker 1>for

00:29:00.720 --> 00:29:02.159
<v Speaker 1>me to really

00:29:02.640 --> 00:29:04.479
<v Speaker 1>like CUE. And

00:29:05.279 --> 00:29:08.159
<v Speaker 1>because that person was so convincing, like, was,

00:29:08.159 --> 00:29:09.919
<v Speaker 1>like, so enthusiastic about it,

00:29:11.375 --> 00:29:13.055
<v Speaker 1>Every time I said, Okay, I'm going to

00:29:13.055 --> 00:29:14.895
<v Speaker 1>close this and go back to Flux doing

00:29:14.895 --> 00:29:16.735
<v Speaker 1>my customized controller

00:29:16.735 --> 00:29:18.975
<v Speaker 1>or whatever, I said, Okay, but maybe I

00:29:18.975 --> 00:29:22.335
<v Speaker 1>should try more. And yeah, after a while,

00:29:22.655 --> 00:29:24.670
<v Speaker 1>really clicked at some point.

00:29:25.390 --> 00:29:26.830
<v Speaker 1>And I started

00:29:26.830 --> 00:29:30.110
<v Speaker 1>doing more and more things in CUE, understand

00:29:30.110 --> 00:29:31.470
<v Speaker 1>better the language.

00:29:32.110 --> 00:29:33.310
<v Speaker 1>I think for me,

00:29:34.430 --> 00:29:37.095
<v Speaker 1>advantage was that Q itself, the language and

00:29:37.095 --> 00:29:39.095
<v Speaker 1>the engine is written in Go. And if

00:29:39.095 --> 00:29:40.054
<v Speaker 1>I couldn't

00:29:40.055 --> 00:29:42.535
<v Speaker 1>quite figure out why is this happening, would

00:29:42.775 --> 00:29:44.295
<v Speaker 1>I could just go in the source code

00:29:44.295 --> 00:29:45.414
<v Speaker 1>and read it. And

00:29:47.175 --> 00:29:49.575
<v Speaker 1>read their unit test, which was very, very

00:29:49.575 --> 00:29:52.055
<v Speaker 1>helpful. Like

00:29:51.220 --> 00:29:54.179
<v Speaker 1>even if the documentation wasn't great back then,

00:29:54.659 --> 00:29:55.619
<v Speaker 1>they had like

00:29:56.179 --> 00:29:58.820
<v Speaker 1>really good test coverage. I could really understand

00:29:58.820 --> 00:30:01.460
<v Speaker 1>what's going on. And I'm that type of

00:30:01.460 --> 00:30:02.659
<v Speaker 1>person that

00:30:03.095 --> 00:30:05.255
<v Speaker 1>likes to read code to understand the tool.

00:30:05.255 --> 00:30:06.135
<v Speaker 1>I know

00:30:08.135 --> 00:30:11.495
<v Speaker 1>not everybody should even think about that. It's

00:30:11.495 --> 00:30:13.575
<v Speaker 1>not good for your health, but anyway.

00:30:15.080 --> 00:30:17.720
<v Speaker 1>That's me, yeah. And what I really liked

00:30:17.720 --> 00:30:18.279
<v Speaker 1>about

00:30:18.760 --> 00:30:20.680
<v Speaker 1>CUE, and I'm

00:30:20.680 --> 00:30:23.800
<v Speaker 1>very fond of it, is the immutability part,

00:30:23.800 --> 00:30:25.320
<v Speaker 1>which I really, really

00:30:25.560 --> 00:30:27.000
<v Speaker 1>dislike around

00:30:27.645 --> 00:30:31.325
<v Speaker 1>how Helm, Customize and all these other templating

00:30:31.325 --> 00:30:32.845
<v Speaker 1>languages are

00:30:32.925 --> 00:30:35.565
<v Speaker 1>running. Like you can set a value

00:30:35.965 --> 00:30:39.085
<v Speaker 1>in base, you set replicas one. Then in

00:30:39.085 --> 00:30:41.005
<v Speaker 1>some other template you do an if and

00:30:41.005 --> 00:30:43.700
<v Speaker 1>you say, oh, replicas here are three. And

00:30:43.700 --> 00:30:46.260
<v Speaker 1>some later on in your logic, at some

00:30:46.260 --> 00:30:48.419
<v Speaker 1>point you remove replicas altogether,

00:30:48.580 --> 00:30:49.539
<v Speaker 1>stuff like that.

00:30:51.220 --> 00:30:54.260
<v Speaker 1>Which is fun because you have so much

00:30:54.260 --> 00:30:55.700
<v Speaker 1>freedom,

00:30:55.700 --> 00:30:56.500
<v Speaker 1>you can do whatever,

00:30:57.235 --> 00:30:59.634
<v Speaker 1>but when you need to debug this stuff,

00:31:01.235 --> 00:31:03.794
<v Speaker 1>it's a nightmare, right? Well, CUE is not

00:31:03.794 --> 00:31:06.195
<v Speaker 1>like that. Once you set a field,

00:31:07.475 --> 00:31:09.635
<v Speaker 1>that's it. If you try to remove it

00:31:09.635 --> 00:31:11.394
<v Speaker 1>or set it to another value, it will

00:31:11.394 --> 00:31:11.875
<v Speaker 1>say, hey,

00:31:13.290 --> 00:31:15.210
<v Speaker 1>this field is already set. It has this

00:31:15.210 --> 00:31:15.850
<v Speaker 1>value.

00:31:16.250 --> 00:31:18.810
<v Speaker 1>So in a way, even if at first

00:31:18.810 --> 00:31:21.450
<v Speaker 1>I felt really mad about it, like

00:31:21.610 --> 00:31:24.410
<v Speaker 1>why couldn't I just override this field? How

00:31:24.970 --> 00:31:28.010
<v Speaker 1>can this be a template

00:31:27.325 --> 00:31:29.565
<v Speaker 1>engine if I can't override things?

00:31:31.405 --> 00:31:33.725
<v Speaker 1>And then I understood why this is good,

00:31:33.725 --> 00:31:36.365
<v Speaker 1>right? Because it makes you for

00:31:36.445 --> 00:31:39.725
<v Speaker 1>a Timoni module, right? You really need to

00:31:39.725 --> 00:31:42.285
<v Speaker 1>define all the things in your options in

00:31:42.285 --> 00:31:44.420
<v Speaker 1>the config file, and you can only set

00:31:44.420 --> 00:31:46.820
<v Speaker 1>defaults to them. You can set

00:31:46.900 --> 00:31:48.580
<v Speaker 1>replicas to interdeployment

00:31:48.580 --> 00:31:50.980
<v Speaker 1>queue file, and then in the config set

00:31:50.980 --> 00:31:53.540
<v Speaker 1>a default to five, and somewhere else, like

00:31:53.540 --> 00:31:55.780
<v Speaker 1>if something, set it to seven and so

00:31:56.435 --> 00:31:58.835
<v Speaker 1>And even if it's annoying at first, it

00:31:58.835 --> 00:31:59.635
<v Speaker 1>forces

00:31:59.635 --> 00:32:02.275
<v Speaker 1>you to create a good structure and expose

00:32:02.275 --> 00:32:04.674
<v Speaker 1>only the right things to the end users.

00:32:04.675 --> 00:32:07.235
<v Speaker 1>And also for them, it's easier to configure

00:32:07.235 --> 00:32:09.840
<v Speaker 1>your app because there is one way to

00:32:09.840 --> 00:32:12.559
<v Speaker 1>do it, not 1,000,000 ways.

00:32:13.920 --> 00:32:16.800
<v Speaker 1>And of course, customized patches, right? You have

00:32:16.800 --> 00:32:18.800
<v Speaker 1>a base, you have an overlay, but then

00:32:18.800 --> 00:32:20.159
<v Speaker 1>you can create another

00:32:20.480 --> 00:32:22.560
<v Speaker 1>overlay on top of that overlay, and so

00:32:22.560 --> 00:32:22.720
<v Speaker 1>on.

00:32:23.855 --> 00:32:25.455
<v Speaker 1>Even if it's flexible,

00:32:25.455 --> 00:32:26.495
<v Speaker 1>this type of

00:32:27.855 --> 00:32:30.655
<v Speaker 1>hacking almost with all these objects

00:32:30.735 --> 00:32:32.975
<v Speaker 1>becomes really, really hard to debug in the

00:32:32.975 --> 00:32:33.775
<v Speaker 1>end. And

00:32:34.495 --> 00:32:38.015
<v Speaker 1>with CUE, you have these constraints, so

00:32:38.330 --> 00:32:40.410
<v Speaker 1>you need to understand the constraints. You need

00:32:40.410 --> 00:32:40.970
<v Speaker 1>to

00:32:41.770 --> 00:32:44.169
<v Speaker 1>be Okay with them. And afterwards,

00:32:45.050 --> 00:32:46.570
<v Speaker 1>things will look better.

00:32:47.290 --> 00:32:49.370
<v Speaker 1>The end result will be better, if you

00:32:49.370 --> 00:32:49.850
<v Speaker 1>want.

00:32:51.370 --> 00:32:51.930
<v Speaker 1>So yeah,

00:32:54.085 --> 00:32:56.725
<v Speaker 1>I'm not saying getting started with Timoni is

00:32:56.725 --> 00:32:57.924
<v Speaker 1>hard, but

00:33:00.005 --> 00:33:03.284
<v Speaker 1>it can be a challenge coming from

00:33:03.525 --> 00:33:04.725
<v Speaker 1>customizing

00:33:04.725 --> 00:33:07.020
<v Speaker 1>role because you'll try to apply the same

00:33:07.020 --> 00:33:09.499
<v Speaker 1>principles, and in there it will not work.

00:33:10.220 --> 00:33:10.860
<v Speaker 1>So

00:33:11.420 --> 00:33:13.500
<v Speaker 1>yeah, it has a steep

00:33:13.500 --> 00:33:16.540
<v Speaker 1>learning curve, but more about you need to

00:33:16.540 --> 00:33:18.540
<v Speaker 1>change a little bit how you think about

00:33:18.540 --> 00:33:19.980
<v Speaker 1>configuration and templates.

00:33:21.434 --> 00:33:22.234
<v Speaker 0>Awesome.

00:33:22.235 --> 00:33:24.315
<v Speaker 0>Yeah. That was a great description

00:33:25.195 --> 00:33:27.195
<v Speaker 0>of CUE and some of its challenges. Right?

00:33:27.195 --> 00:33:28.715
<v Speaker 0>You you said the word academic,

00:33:28.715 --> 00:33:30.475
<v Speaker 0>which was was spot on. I remember the

00:33:30.475 --> 00:33:31.835
<v Speaker 0>first time I looked at the CUE documentation

00:33:31.835 --> 00:33:33.434
<v Speaker 0>and I was like, isn't for me because

00:33:33.790 --> 00:33:36.110
<v Speaker 0>don't understand all this terminology. The lexicon is

00:33:36.110 --> 00:33:38.190
<v Speaker 0>just above my pay grade at some capacity.

00:33:38.190 --> 00:33:40.030
<v Speaker 0>Like, I need to know what that disjunction

00:33:40.030 --> 00:33:42.110
<v Speaker 0>is to understand the unification model of the

00:33:42.110 --> 00:33:44.750
<v Speaker 0>CUE block. Like like, sorry. I just wanted

00:33:44.750 --> 00:33:46.350
<v Speaker 0>to describe some Kubernetes resources.

00:33:47.555 --> 00:33:49.635
<v Speaker 0>And I think they're getting better there. You

00:33:49.635 --> 00:33:51.555
<v Speaker 0>know, it was a very academic project and

00:33:51.555 --> 00:33:53.155
<v Speaker 0>I think now it's starting to find a

00:33:53.155 --> 00:33:55.235
<v Speaker 0>bit more traction and they are trying to

00:33:55.235 --> 00:33:57.395
<v Speaker 0>sand off these rough edges, make it easier

00:33:57.395 --> 00:33:59.315
<v Speaker 0>to consume and just use it as what

00:33:59.315 --> 00:34:01.475
<v Speaker 0>it's used for without understanding what's going on

00:34:01.760 --> 00:34:04.480
<v Speaker 0>under the hood. And I do completely agree

00:34:04.480 --> 00:34:07.120
<v Speaker 0>with what you said. It forces you to

00:34:07.120 --> 00:34:09.040
<v Speaker 0>understand where things become

00:34:09.199 --> 00:34:11.040
<v Speaker 0>options or configuration

00:34:11.040 --> 00:34:13.280
<v Speaker 0>for your CUE value object and you have

00:34:13.280 --> 00:34:14.320
<v Speaker 0>to explicitly

00:34:14.560 --> 00:34:16.800
<v Speaker 0>make these things that people can consume via

00:34:16.985 --> 00:34:20.185
<v Speaker 0>definitions, private fields, whatever. And you never

00:34:20.425 --> 00:34:22.585
<v Speaker 0>said this directly, but I think it's important

00:34:22.585 --> 00:34:24.665
<v Speaker 0>and that kind of underpins everything that you

00:34:24.665 --> 00:34:26.105
<v Speaker 0>said you liked about CUE.

00:34:26.905 --> 00:34:29.304
<v Speaker 0>The schema definition live right next to the

00:34:29.304 --> 00:34:31.469
<v Speaker 0>values themselves. That's where the unification comes in.

00:34:31.469 --> 00:34:33.390
<v Speaker 0>Like, the schema all gets merged together to

00:34:33.390 --> 00:34:35.070
<v Speaker 0>give you some sort of concrete value.

00:34:35.790 --> 00:34:37.550
<v Speaker 0>And I I think that is something that

00:34:37.550 --> 00:34:39.070
<v Speaker 0>could throw people off at first, but then

00:34:39.070 --> 00:34:40.909
<v Speaker 0>once you understand that dynamic, it becomes a

00:34:40.909 --> 00:34:43.114
<v Speaker 0>bit of a superpower too because you can

00:34:43.114 --> 00:34:45.755
<v Speaker 0>arbitrarily throw around definitions and expose them to

00:34:45.755 --> 00:34:47.994
<v Speaker 0>people and then take an input objects and

00:34:47.994 --> 00:34:49.675
<v Speaker 0>all this other wonderful stuff. So people will

00:34:49.675 --> 00:34:50.795
<v Speaker 0>see when we get to the hands on

00:34:50.795 --> 00:34:53.594
<v Speaker 0>bit for sure but Yeah. Yeah. I mean

00:34:55.929 --> 00:34:57.370
<v Speaker 1>having schemas,

00:34:57.370 --> 00:34:58.330
<v Speaker 1>constraints,

00:34:58.570 --> 00:35:01.130
<v Speaker 1>and values all in one thing

00:35:02.410 --> 00:35:04.010
<v Speaker 1>is clearly overwhelming

00:35:04.010 --> 00:35:06.810
<v Speaker 1>for someone that starts today,

00:35:06.890 --> 00:35:07.450
<v Speaker 1>and

00:35:08.090 --> 00:35:09.290
<v Speaker 1>for Timoni,

00:35:09.975 --> 00:35:12.855
<v Speaker 1>you need to get into this as a

00:35:12.855 --> 00:35:13.495
<v Speaker 1>module

00:35:14.375 --> 00:35:16.455
<v Speaker 1>author when you write your

00:35:17.655 --> 00:35:20.775
<v Speaker 1>app package as a Timoni module. But for

00:35:20.775 --> 00:35:21.415
<v Speaker 1>end users,

00:35:21.910 --> 00:35:24.550
<v Speaker 1>I'm not exposing them to this type of

00:35:24.550 --> 00:35:25.350
<v Speaker 1>complexity.

00:35:25.590 --> 00:35:27.670
<v Speaker 1>For end user, when you configure the app

00:35:27.670 --> 00:35:28.710
<v Speaker 1>to deploy it,

00:35:28.950 --> 00:35:29.910
<v Speaker 1>you don't

00:35:29.990 --> 00:35:31.510
<v Speaker 1>write any schemas,

00:35:31.670 --> 00:35:33.510
<v Speaker 1>you don't deal with defaults, you don't deal

00:35:33.510 --> 00:35:34.950
<v Speaker 1>with constants, you just

00:35:35.295 --> 00:35:37.375
<v Speaker 1>give Timoni concrete

00:35:37.375 --> 00:35:38.255
<v Speaker 1>values,

00:35:38.255 --> 00:35:40.175
<v Speaker 1>like I want replicas two,

00:35:41.055 --> 00:35:43.855
<v Speaker 1>horizontal pod autoscaler max five and so on.

00:35:43.855 --> 00:35:46.335
<v Speaker 1>And then Timoni injects the schemas,

00:35:46.815 --> 00:35:48.974
<v Speaker 1>runs the constraints and it will say,

00:35:49.660 --> 00:35:52.140
<v Speaker 1>hey, you are setting replicas two,

00:35:53.900 --> 00:35:56.060
<v Speaker 1>max replicas

00:35:56.060 --> 00:35:58.220
<v Speaker 1>five and max replicas three. This is not

00:35:58.220 --> 00:35:58.860
<v Speaker 1>okay.

00:35:59.420 --> 00:36:00.140
<v Speaker 1>So

00:36:00.620 --> 00:36:02.300
<v Speaker 1>I'm trying to

00:36:02.620 --> 00:36:02.860
<v Speaker 1>not

00:36:03.565 --> 00:36:06.365
<v Speaker 1>expose the end user to all this complexity

00:36:06.365 --> 00:36:08.845
<v Speaker 1>because all this complexity is really needed on

00:36:08.845 --> 00:36:11.005
<v Speaker 1>the other side when you compose your app

00:36:11.005 --> 00:36:12.845
<v Speaker 1>definition, not when you use it. When you

00:36:12.845 --> 00:36:15.085
<v Speaker 1>use it, it should be very, very simple.

00:36:15.565 --> 00:36:15.965
<v Speaker 1>And

00:36:16.445 --> 00:36:18.125
<v Speaker 1>yeah, we'll see

00:36:18.160 --> 00:36:19.520
<v Speaker 1>how easy it is when you do the

00:36:19.520 --> 00:36:20.400
<v Speaker 1>kickstart.

00:36:20.640 --> 00:36:21.280
<v Speaker 1>Okay.

00:36:23.920 --> 00:36:26.160
<v Speaker 1>Last two things about package management. So we

00:36:26.160 --> 00:36:29.120
<v Speaker 1>see that, okay, Timoni allows you to define

00:36:29.440 --> 00:36:31.120
<v Speaker 1>your app with Q templates.

00:36:31.845 --> 00:36:34.484
<v Speaker 1>You can distribute those to container registries with

00:36:34.484 --> 00:36:35.925
<v Speaker 1>OCR artifacts.

00:36:36.165 --> 00:36:36.725
<v Speaker 1>But

00:36:37.045 --> 00:36:40.085
<v Speaker 1>how would end users, how would Kubernetes users,

00:36:40.085 --> 00:36:43.045
<v Speaker 1>developers, you know, everybody that has to do

00:36:43.045 --> 00:36:44.005
<v Speaker 1>something in

00:36:44.484 --> 00:36:45.285
<v Speaker 1>Kubernetes,

00:36:45.285 --> 00:36:47.859
<v Speaker 1>how are they going to consume it? And

00:36:47.859 --> 00:36:49.620
<v Speaker 1>there are two major

00:36:50.900 --> 00:36:53.220
<v Speaker 1>cracks here. One is app composition

00:36:53.460 --> 00:36:54.180
<v Speaker 1>where

00:36:54.740 --> 00:36:57.380
<v Speaker 1>you basically never deploy something alone. Maybe it

00:36:57.380 --> 00:37:00.420
<v Speaker 1>has a dependency. Maybe your app needs a

00:37:00.420 --> 00:37:02.900
<v Speaker 1>Redis server for the caching or

00:37:03.645 --> 00:37:05.325
<v Speaker 1>the app that you are deploying is made

00:37:05.325 --> 00:37:06.765
<v Speaker 1>out of multiple

00:37:07.005 --> 00:37:08.125
<v Speaker 1>microservices.

00:37:08.125 --> 00:37:10.605
<v Speaker 1>Some are optional, some are not, right? So

00:37:11.165 --> 00:37:14.205
<v Speaker 1>with Helm, we have these umbrella charts and

00:37:14.205 --> 00:37:15.805
<v Speaker 1>so on. I want

00:37:16.285 --> 00:37:18.925
<v Speaker 1>to build that into Timoni at all.

00:37:21.539 --> 00:37:24.180
<v Speaker 1>In Timoni, there is a different approach on

00:37:24.180 --> 00:37:26.740
<v Speaker 1>how you do app compositions and it's not

00:37:26.740 --> 00:37:29.700
<v Speaker 1>about writing modules. And we'll see how that

00:37:29.700 --> 00:37:32.019
<v Speaker 1>works. It's called Timoni bundle. But the idea

00:37:32.019 --> 00:37:33.779
<v Speaker 1>is you can bundle multiple things

00:37:34.925 --> 00:37:36.365
<v Speaker 1>to have your

00:37:36.685 --> 00:37:39.245
<v Speaker 1>app as you want it. And

00:37:40.285 --> 00:37:41.245
<v Speaker 1>another

00:37:42.765 --> 00:37:44.365
<v Speaker 1>important feature of

00:37:44.685 --> 00:37:47.645
<v Speaker 1>package management and what Timoni also does is

00:37:47.645 --> 00:37:49.005
<v Speaker 1>lifecycle management.

00:37:49.005 --> 00:37:49.165
<v Speaker 1>You

00:37:50.010 --> 00:37:52.090
<v Speaker 1>can install it, you can upgrade it, you

00:37:52.090 --> 00:37:54.970
<v Speaker 1>can roll it back, you can reconfigure it,

00:37:56.010 --> 00:37:58.170
<v Speaker 1>you can run end to end tests after

00:37:58.170 --> 00:38:00.410
<v Speaker 1>an upgrade or after an install,

00:38:01.130 --> 00:38:03.130
<v Speaker 1>and all of these things have to be

00:38:03.130 --> 00:38:03.610
<v Speaker 1>like

00:38:03.945 --> 00:38:05.305
<v Speaker 1>straightforward,

00:38:05.385 --> 00:38:06.665
<v Speaker 1>easy to use, and

00:38:07.465 --> 00:38:08.585
<v Speaker 1>we'll see

00:38:09.225 --> 00:38:10.505
<v Speaker 1>how that goes.

00:38:11.385 --> 00:38:13.945
<v Speaker 1>So how do you compose things?

00:38:14.025 --> 00:38:16.425
<v Speaker 1>How do you, you as an end user,

00:38:16.425 --> 00:38:17.545
<v Speaker 1>how you add

00:38:18.720 --> 00:38:19.920
<v Speaker 1>configuration,

00:38:20.000 --> 00:38:22.240
<v Speaker 1>how you specify modules and so on.

00:38:22.960 --> 00:38:25.840
<v Speaker 1>This is done through a Timoni bundle definition,

00:38:25.840 --> 00:38:27.360
<v Speaker 1>which is a CUE file.

00:38:27.680 --> 00:38:30.160
<v Speaker 1>The same representation can be done with a

00:38:30.160 --> 00:38:31.280
<v Speaker 1>YAML file or JSON.

00:38:33.105 --> 00:38:35.425
<v Speaker 1>But yeah, I definitely

00:38:35.425 --> 00:38:38.625
<v Speaker 1>prefer CUE also on this side because Timoni

00:38:38.625 --> 00:38:40.385
<v Speaker 1>comes with some nice

00:38:41.505 --> 00:38:44.625
<v Speaker 1>features when you use CUE for definitions.

00:38:45.585 --> 00:38:47.905
<v Speaker 1>So what is a bundle? A bundle is

00:38:48.270 --> 00:38:50.670
<v Speaker 1>a file where you list instances.

00:38:51.150 --> 00:38:53.230
<v Speaker 1>What is an instance? You can think of

00:38:53.230 --> 00:38:55.550
<v Speaker 1>an instance as a for

00:38:55.550 --> 00:38:57.870
<v Speaker 1>example. It's an instantiation

00:38:57.870 --> 00:38:59.790
<v Speaker 1>of a module on your cluster.

00:38:59.950 --> 00:39:01.914
<v Speaker 1>So a bundle is made out of one

00:39:01.914 --> 00:39:03.914
<v Speaker 1>instance. If you deploy a single app with

00:39:03.914 --> 00:39:06.474
<v Speaker 1>no dependency or nothing, or a bundle can

00:39:06.474 --> 00:39:08.714
<v Speaker 1>be made out of multiple instances.

00:39:09.035 --> 00:39:10.955
<v Speaker 1>And here the example is

00:39:11.355 --> 00:39:12.875
<v Speaker 1>I'm deploying Podinfo,

00:39:12.875 --> 00:39:13.515
<v Speaker 1>which is

00:39:14.070 --> 00:39:15.670
<v Speaker 1>a toy app that I made a long

00:39:15.670 --> 00:39:16.470
<v Speaker 1>time ago.

00:39:16.790 --> 00:39:19.670
<v Speaker 1>And this app needs a cache server, which

00:39:19.670 --> 00:39:21.590
<v Speaker 1>is optional, but you can also deploy to

00:39:21.590 --> 00:39:25.190
<v Speaker 1>the cache server. So instead of having Redis

00:39:25.190 --> 00:39:25.990
<v Speaker 1>as

00:39:26.630 --> 00:39:28.630
<v Speaker 1>embedded in the Podinfo module,

00:39:30.305 --> 00:39:33.665
<v Speaker 1>you would deploy Redis from its own module,

00:39:34.065 --> 00:39:34.865
<v Speaker 1>deploy

00:39:34.865 --> 00:39:36.785
<v Speaker 1>pod info from its own module, and then

00:39:36.785 --> 00:39:38.865
<v Speaker 1>you can have shared configuration

00:39:38.865 --> 00:39:41.790
<v Speaker 1>between them. In this case, I want to

00:39:41.790 --> 00:39:43.150
<v Speaker 1>pass the password

00:39:44.030 --> 00:39:45.310
<v Speaker 1>from the runtime

00:39:45.310 --> 00:39:47.470
<v Speaker 1>because I don't want to hard code here

00:39:47.470 --> 00:39:48.110
<v Speaker 1>in

00:39:48.270 --> 00:39:51.230
<v Speaker 1>CUE files, any kind of sensitive information. So

00:39:51.230 --> 00:39:52.350
<v Speaker 1>I'm defining

00:39:52.590 --> 00:39:54.830
<v Speaker 1>and you can define any type of input.

00:39:56.265 --> 00:40:00.025
<v Speaker 1>Here is just a simple string password comes

00:40:00.025 --> 00:40:02.505
<v Speaker 1>from the runtime. Then I'm using this in

00:40:02.505 --> 00:40:05.305
<v Speaker 1>string interpolation to set up the Redis URL

00:40:05.305 --> 00:40:07.785
<v Speaker 1>for the info. And I'm also using it

00:40:08.120 --> 00:40:11.080
<v Speaker 1>in the Redis configuration where I explicitly

00:40:11.080 --> 00:40:13.800
<v Speaker 1>set up the password. Here is the value

00:40:13.800 --> 00:40:14.520
<v Speaker 1>of it.

00:40:15.160 --> 00:40:15.640
<v Speaker 1>And

00:40:16.120 --> 00:40:18.120
<v Speaker 1>another thing to notice here,

00:40:19.560 --> 00:40:23.080
<v Speaker 1>modules are referenced by an URL which is

00:40:23.755 --> 00:40:26.234
<v Speaker 1>like a container image in Kubernetes,

00:40:26.234 --> 00:40:28.875
<v Speaker 1>but has an OCI prefix. So it's clear

00:40:28.875 --> 00:40:29.915
<v Speaker 1>that it's an

00:40:30.395 --> 00:40:32.875
<v Speaker 1>address to a container registry.

00:40:33.115 --> 00:40:36.740
<v Speaker 1>And you can reference a particular version. If

00:40:36.740 --> 00:40:39.460
<v Speaker 1>you don't specify the version at all, Timoni

00:40:39.460 --> 00:40:40.660
<v Speaker 1>will use latest.

00:40:41.859 --> 00:40:42.500
<v Speaker 1>But

00:40:43.059 --> 00:40:45.540
<v Speaker 1>as I said before, you can also refer

00:40:45.540 --> 00:40:46.660
<v Speaker 1>to modules

00:40:47.220 --> 00:40:50.579
<v Speaker 1>by upstream digest, so you ensure that no

00:40:50.579 --> 00:40:51.220
<v Speaker 1>matter how,

00:40:51.835 --> 00:40:54.955
<v Speaker 1>when you run this bundle, it will always

00:40:54.955 --> 00:40:58.955
<v Speaker 1>use that particular version, even if tags

00:40:58.955 --> 00:40:59.595
<v Speaker 1>are

00:40:59.995 --> 00:41:01.835
<v Speaker 1>mutable in the registry, you can refer it

00:41:01.835 --> 00:41:02.795
<v Speaker 1>by digest.

00:41:03.595 --> 00:41:04.795
<v Speaker 1>So yeah, this is how

00:41:05.600 --> 00:41:07.920
<v Speaker 1>you would be using Timoni. You'll create these

00:41:07.920 --> 00:41:11.440
<v Speaker 1>bundle files and you'll apply them and yeah,

00:41:11.440 --> 00:41:13.600
<v Speaker 1>and Timoni will do all the deployment for

00:41:13.600 --> 00:41:14.640
<v Speaker 1>you and so on.

00:41:15.600 --> 00:41:18.880
<v Speaker 1>So Timoni has commands

00:41:18.145 --> 00:41:19.185
<v Speaker 1>specifically

00:41:19.185 --> 00:41:20.465
<v Speaker 1>for bundles.

00:41:20.545 --> 00:41:23.505
<v Speaker 1>They start with Timoni bundle something. You

00:41:24.145 --> 00:41:26.705
<v Speaker 1>can verify them, you can build them, you

00:41:26.705 --> 00:41:27.905
<v Speaker 1>can apply them,

00:41:29.505 --> 00:41:30.065
<v Speaker 1>you can

00:41:31.050 --> 00:41:33.450
<v Speaker 1>do dry runs and diffs

00:41:33.770 --> 00:41:35.610
<v Speaker 1>every time you do an upgrade. Maybe you

00:41:35.610 --> 00:41:38.010
<v Speaker 1>are not sure what things will change on

00:41:38.010 --> 00:41:38.890
<v Speaker 1>the cluster

00:41:39.050 --> 00:41:41.130
<v Speaker 1>with that upgrade, so you should do a

00:41:41.130 --> 00:41:43.850
<v Speaker 1>bundle apply with minus minus diff. I want

00:41:43.850 --> 00:41:44.810
<v Speaker 1>to show you a nice

00:41:45.525 --> 00:41:48.405
<v Speaker 1>diff of the Kubernetes objects, only the fields

00:41:48.405 --> 00:41:50.005
<v Speaker 1>that are changing,

00:41:51.845 --> 00:41:53.845
<v Speaker 1>and you can query the status. Of course,

00:41:53.845 --> 00:41:54.885
<v Speaker 1>you can delete it.

00:41:55.444 --> 00:41:56.725
<v Speaker 1>And you can also

00:41:57.204 --> 00:41:58.645
<v Speaker 1>distribute bundles,

00:41:58.645 --> 00:42:01.619
<v Speaker 1>which are Q files and other things through

00:42:01.700 --> 00:42:03.140
<v Speaker 1>a container registry.

00:42:03.140 --> 00:42:04.740
<v Speaker 1>As a platform admin,

00:42:06.099 --> 00:42:07.940
<v Speaker 1>maybe you want to create

00:42:08.980 --> 00:42:10.420
<v Speaker 1>bundles for

00:42:10.579 --> 00:42:13.140
<v Speaker 1>cluster add ons, and those look the same

00:42:13.140 --> 00:42:16.020
<v Speaker 1>everywhere, maybe the password or whatever input is

00:42:16.020 --> 00:42:16.339
<v Speaker 1>different,

00:42:16.855 --> 00:42:19.975
<v Speaker 1>But if you want to share with other

00:42:20.135 --> 00:42:20.935
<v Speaker 1>well

00:42:20.935 --> 00:42:22.215
<v Speaker 1>known configurations,

00:42:22.375 --> 00:42:24.855
<v Speaker 1>you can also push bundles

00:42:25.335 --> 00:42:28.215
<v Speaker 1>and any type of Qt definition

00:42:29.070 --> 00:42:31.390
<v Speaker 1>to a container registry. And there is this

00:42:31.390 --> 00:42:33.150
<v Speaker 1>Timoni artifact command,

00:42:33.390 --> 00:42:35.950
<v Speaker 1>which has pull, push, list, and so on,

00:42:35.950 --> 00:42:38.910
<v Speaker 1>like modules. But the main difference here is

00:42:39.230 --> 00:42:40.750
<v Speaker 1>that if modules,

00:42:41.150 --> 00:42:41.870
<v Speaker 1>for modules,

00:42:42.675 --> 00:42:44.755
<v Speaker 1>you need to use SAMLER, and they are

00:42:44.755 --> 00:42:45.635
<v Speaker 1>SAMLERD

00:42:45.635 --> 00:42:47.715
<v Speaker 1>artifacts,

00:42:48.115 --> 00:42:49.955
<v Speaker 1>it's free for all. You can do whatever

00:42:49.955 --> 00:42:52.835
<v Speaker 1>you want here because these are snippets

00:42:52.835 --> 00:42:53.955
<v Speaker 1>that you'll be sharing,

00:42:55.590 --> 00:42:57.190
<v Speaker 1>So it's up to you if you want

00:42:57.190 --> 00:42:59.670
<v Speaker 1>to use a mutable tag and so on.

00:42:59.990 --> 00:43:01.590
<v Speaker 1>In any case, you can also do a

00:43:01.590 --> 00:43:03.670
<v Speaker 1>pull using a digest and so on. But

00:43:03.670 --> 00:43:04.310
<v Speaker 1>yeah,

00:43:04.950 --> 00:43:06.070
<v Speaker 1>the artifacts

00:43:06.070 --> 00:43:07.190
<v Speaker 1>commands are

00:43:08.565 --> 00:43:11.605
<v Speaker 1>a way right now to work around

00:43:11.685 --> 00:43:13.205
<v Speaker 1>the lack of

00:43:14.085 --> 00:43:17.285
<v Speaker 1>package management in the queue language itself.

00:43:18.484 --> 00:43:19.125
<v Speaker 1>And

00:43:19.285 --> 00:43:21.285
<v Speaker 1>I want to explain a little bit what

00:43:21.285 --> 00:43:22.005
<v Speaker 1>this means.

00:43:24.599 --> 00:43:26.600
<v Speaker 1>Timoni has, for example,

00:43:27.480 --> 00:43:28.440
<v Speaker 1>helpers.

00:43:29.079 --> 00:43:30.360
<v Speaker 1>There are some

00:43:31.000 --> 00:43:34.839
<v Speaker 1>Q schemas, for example, for defining container images,

00:43:35.055 --> 00:43:38.815
<v Speaker 1>for defining Kubernetes metadata with the right labels,

00:43:38.815 --> 00:43:41.535
<v Speaker 1>with app Kubernetes labels. So you

00:43:42.575 --> 00:43:45.214
<v Speaker 1>want to ensure some kind of good defaults

00:43:45.214 --> 00:43:48.095
<v Speaker 1>and you want to have helpers so you

00:43:48.095 --> 00:43:49.855
<v Speaker 1>don't have to type all this Q code

00:43:49.855 --> 00:43:52.360
<v Speaker 1>on your own. So you build your

00:43:52.600 --> 00:43:53.400
<v Speaker 1>little

00:43:53.480 --> 00:43:54.920
<v Speaker 1>CUE library. Now,

00:43:55.240 --> 00:43:55.880
<v Speaker 1>if

00:43:56.040 --> 00:43:59.000
<v Speaker 1>someone makes a different bundle on their own

00:43:59.000 --> 00:43:59.880
<v Speaker 1>repo,

00:44:00.120 --> 00:44:02.360
<v Speaker 1>the only way right now with CUE is

00:44:02.360 --> 00:44:04.520
<v Speaker 1>they need to copy paste all the files

00:44:04.520 --> 00:44:05.640
<v Speaker 1>or do

00:44:06.555 --> 00:44:09.115
<v Speaker 1>some magic with git and symlinks.

00:44:09.515 --> 00:44:10.555
<v Speaker 1>I don't want that.

00:44:11.195 --> 00:44:11.835
<v Speaker 1>So

00:44:12.955 --> 00:44:15.435
<v Speaker 1>this is where Timoni Artifact Push and Pull

00:44:15.435 --> 00:44:18.555
<v Speaker 1>comes into place. You can share

00:44:18.875 --> 00:44:22.550
<v Speaker 1>snippets of CUE code packages and so on.

00:44:22.550 --> 00:44:24.630
<v Speaker 1>But the CUE team is actively

00:44:24.710 --> 00:44:26.550
<v Speaker 1>working on shipping

00:44:27.350 --> 00:44:30.150
<v Speaker 1>package management inside CUE for

00:44:31.910 --> 00:44:33.350
<v Speaker 1>the language itself. And

00:44:34.715 --> 00:44:36.795
<v Speaker 1>I'm very happy with it. They went with

00:44:36.795 --> 00:44:39.515
<v Speaker 1>OCI as well. So at some point you'll,

00:44:39.515 --> 00:44:40.635
<v Speaker 1>the future will

00:44:40.875 --> 00:44:43.435
<v Speaker 1>not have to use the Timoni artifact push

00:44:43.435 --> 00:44:44.155
<v Speaker 1>command.

00:44:44.635 --> 00:44:45.355
<v Speaker 1>Will

00:44:45.755 --> 00:44:48.475
<v Speaker 1>able to do this with Q alone and

00:44:48.475 --> 00:44:48.955
<v Speaker 1>share

00:44:49.790 --> 00:44:51.390
<v Speaker 1>code between

00:44:51.630 --> 00:44:55.390
<v Speaker 1>modules like that. But until then, this command

00:44:55.390 --> 00:44:56.030
<v Speaker 1>that

00:44:56.670 --> 00:44:59.310
<v Speaker 1>you can definitely use it today.

00:45:00.990 --> 00:45:01.869
<v Speaker 0>So I'm curious.

00:45:02.475 --> 00:45:03.755
<v Speaker 0>I know I I don't wanna ask too

00:45:03.755 --> 00:45:05.435
<v Speaker 0>many questions before we get the terminal open

00:45:05.435 --> 00:45:07.275
<v Speaker 0>and get hands on and stuff. But, you

00:45:07.275 --> 00:45:07.755
<v Speaker 0>know,

00:45:08.235 --> 00:45:09.515
<v Speaker 0>the CUE modules

00:45:09.755 --> 00:45:11.195
<v Speaker 0>the the the CUE module stuff that the

00:45:11.195 --> 00:45:12.875
<v Speaker 0>CUE team are working on would be to

00:45:12.875 --> 00:45:13.435
<v Speaker 0>push

00:45:13.675 --> 00:45:14.795
<v Speaker 0>arbitrary

00:45:14.795 --> 00:45:16.555
<v Speaker 0>CUE to an OCI and then be able

00:45:16.555 --> 00:45:17.675
<v Speaker 0>to pull that down and

00:45:18.359 --> 00:45:19.240
<v Speaker 0>build,

00:45:19.559 --> 00:45:21.160
<v Speaker 0>you know, queue values based on all of

00:45:21.160 --> 00:45:22.040
<v Speaker 0>that stuff together.

00:45:22.359 --> 00:45:24.759
<v Speaker 0>I mean, with the Timoni artifacts be different

00:45:24.759 --> 00:45:27.000
<v Speaker 0>from that with different metadata, different

00:45:27.079 --> 00:45:28.920
<v Speaker 0>configuration or would it are you just gonna

00:45:28.920 --> 00:45:31.724
<v Speaker 0>use directly what the CUE team build? Like,

00:45:31.724 --> 00:45:34.125
<v Speaker 0>it feels like they're different, but maybe similar.

00:45:35.724 --> 00:45:36.684
<v Speaker 1>So Timoni

00:45:36.924 --> 00:45:39.724
<v Speaker 1>the Timoni artifacts command can be used to

00:45:39.724 --> 00:45:40.605
<v Speaker 1>distribute

00:45:41.964 --> 00:45:43.005
<v Speaker 1>reusable

00:45:44.045 --> 00:45:45.404
<v Speaker 1>CUE packages.

00:45:46.119 --> 00:45:48.360
<v Speaker 0>Right. Okay. And that part,

00:45:49.000 --> 00:45:49.880
<v Speaker 1>I hope,

00:45:50.119 --> 00:45:51.880
<v Speaker 1>can be totally replaced

00:45:52.119 --> 00:45:52.920
<v Speaker 1>upstream

00:45:52.920 --> 00:45:53.640
<v Speaker 1>using

00:45:54.280 --> 00:45:55.400
<v Speaker 1>QGET,

00:45:55.640 --> 00:45:56.920
<v Speaker 1>like GoGET,

00:45:57.320 --> 00:45:58.760
<v Speaker 1>and that part will be

00:45:59.645 --> 00:46:00.445
<v Speaker 1>will work

00:46:01.244 --> 00:46:03.245
<v Speaker 1>with the CUE toolchain

00:46:03.405 --> 00:46:04.285
<v Speaker 1>itself.

00:46:04.285 --> 00:46:04.845
<v Speaker 1>But

00:46:05.165 --> 00:46:07.964
<v Speaker 1>Timoni Artifact will still be useful if you

00:46:07.964 --> 00:46:10.125
<v Speaker 1>want to distribute Timoni

00:46:10.125 --> 00:46:14.125
<v Speaker 1>bundles and runtimes as well on configuration everywhere,

00:46:14.650 --> 00:46:16.490
<v Speaker 1>because then you can pipe you can do

00:46:16.490 --> 00:46:17.930
<v Speaker 1>Timoni artifact

00:46:18.330 --> 00:46:19.690
<v Speaker 1>pool pipe

00:46:20.250 --> 00:46:21.770
<v Speaker 1>Timoni bundle

00:46:21.770 --> 00:46:22.730
<v Speaker 1>apply

00:46:23.290 --> 00:46:25.050
<v Speaker 1>from standard in, right? So

00:46:27.585 --> 00:46:30.065
<v Speaker 1>it's a hacky way of using artifacts now

00:46:30.065 --> 00:46:33.185
<v Speaker 1>to distribute things that CUE itself should distribute,

00:46:33.185 --> 00:46:36.224
<v Speaker 1>but I made these commands for distributing

00:46:36.224 --> 00:46:38.545
<v Speaker 1>well known configuration of bundles

00:46:38.705 --> 00:46:40.224
<v Speaker 1>in the same way as you do with

00:46:40.224 --> 00:46:40.945
<v Speaker 1>modules.

00:46:41.025 --> 00:46:44.420
<v Speaker 1>The idea is you push your container image,

00:46:45.300 --> 00:46:48.260
<v Speaker 1>the code that's running to the container registry.

00:46:48.260 --> 00:46:50.180
<v Speaker 1>You push the module, which is

00:46:51.859 --> 00:46:53.940
<v Speaker 1>how that app can be installed. And then

00:46:53.940 --> 00:46:55.700
<v Speaker 1>you can push a bundle with

00:46:56.744 --> 00:46:58.585
<v Speaker 1>secure first defaults.

00:46:59.224 --> 00:47:00.905
<v Speaker 1>This is how it should be run,

00:47:01.625 --> 00:47:04.905
<v Speaker 1>or examples of best known configuration.

00:47:06.585 --> 00:47:07.464
<v Speaker 0>Got it. Thank you.

00:47:09.360 --> 00:47:11.520
<v Speaker 1>Okay, and the last thing that

00:47:12.400 --> 00:47:13.440
<v Speaker 1>bundle

00:47:13.920 --> 00:47:15.280
<v Speaker 1>supports are

00:47:16.240 --> 00:47:17.760
<v Speaker 1>multi cluster

00:47:17.760 --> 00:47:20.000
<v Speaker 1>deployments. And this is something that

00:47:21.200 --> 00:47:24.155
<v Speaker 1>right now is supported as I'm presenting it

00:47:24.155 --> 00:47:26.315
<v Speaker 1>here. But there is a proposal on the

00:47:26.315 --> 00:47:27.195
<v Speaker 1>Timoni

00:47:27.915 --> 00:47:30.715
<v Speaker 1>repo on how I'm seeing this in the

00:47:30.715 --> 00:47:32.475
<v Speaker 1>future, how I want to improve it.

00:47:33.515 --> 00:47:36.075
<v Speaker 1>The idea behind this is that

00:47:37.250 --> 00:47:38.290
<v Speaker 1>a bundle

00:47:38.290 --> 00:47:39.410
<v Speaker 1>can express

00:47:39.650 --> 00:47:42.290
<v Speaker 1>all the different configurations

00:47:43.010 --> 00:47:43.810
<v Speaker 1>of

00:47:44.450 --> 00:47:45.890
<v Speaker 1>one app across

00:47:45.890 --> 00:47:48.849
<v Speaker 1>your whole cluster, Philippe. And you don't have

00:47:48.849 --> 00:47:51.410
<v Speaker 1>to have different bundle files or something like

00:47:51.410 --> 00:47:53.625
<v Speaker 1>that. You can write a little program in

00:47:53.625 --> 00:47:54.505
<v Speaker 1>CUE where

00:47:55.065 --> 00:47:56.985
<v Speaker 1>all the different configurations,

00:47:56.985 --> 00:48:00.265
<v Speaker 1>all the differences between how an app

00:48:01.625 --> 00:48:04.505
<v Speaker 1>must be configured across environments can be embedded

00:48:04.505 --> 00:48:05.785
<v Speaker 1>in a single file.

00:48:06.265 --> 00:48:06.505
<v Speaker 1>And

00:48:08.420 --> 00:48:11.140
<v Speaker 1>with customize, for example, this type of

00:48:11.460 --> 00:48:12.579
<v Speaker 1>customization

00:48:12.579 --> 00:48:14.020
<v Speaker 1>means you'll need

00:48:14.900 --> 00:48:16.339
<v Speaker 1>three overlays,

00:48:16.339 --> 00:48:19.299
<v Speaker 1>the base one, staging one production. Oh, if

00:48:19.299 --> 00:48:22.135
<v Speaker 1>you want to do customization based on cluster

00:48:22.135 --> 00:48:23.575
<v Speaker 1>name, then you'll

00:48:23.815 --> 00:48:24.855
<v Speaker 1>have

00:48:25.095 --> 00:48:28.455
<v Speaker 1>other overlays for each cluster that

00:48:28.615 --> 00:48:31.494
<v Speaker 1>import the production overlay and it gets to

00:48:31.494 --> 00:48:31.895
<v Speaker 1>this,

00:48:32.730 --> 00:48:33.850
<v Speaker 1>very

00:48:34.250 --> 00:48:35.290
<v Speaker 1>messy

00:48:39.450 --> 00:48:40.570
<v Speaker 1>file distribution.

00:48:40.570 --> 00:48:44.090
<v Speaker 1>You need directories with files inside, other files,

00:48:44.410 --> 00:48:46.330
<v Speaker 1>directories on top of directories.

00:48:46.570 --> 00:48:49.244
<v Speaker 1>And this is what Flux does today with

00:48:49.244 --> 00:48:50.045
<v Speaker 1>Customize.

00:48:50.045 --> 00:48:52.365
<v Speaker 1>This is what everybody does with Customize. It

00:48:52.365 --> 00:48:55.165
<v Speaker 1>works. It's great. It's pure declarative. You have

00:48:55.165 --> 00:48:58.125
<v Speaker 1>all these directories on top of those.

00:48:59.005 --> 00:49:01.085
<v Speaker 1>You have the overlay system. But

00:49:02.090 --> 00:49:03.930
<v Speaker 1>with Timoni, I want to

00:49:04.730 --> 00:49:07.370
<v Speaker 1>give people a way to write this in

00:49:07.370 --> 00:49:09.450
<v Speaker 1>a more compact form

00:49:11.370 --> 00:49:12.730
<v Speaker 1>and

00:49:14.214 --> 00:49:15.734
<v Speaker 1>have the expression

00:49:15.734 --> 00:49:17.335
<v Speaker 1>of your app across

00:49:17.655 --> 00:49:20.214
<v Speaker 1>environments in a single file. Of course, you

00:49:20.214 --> 00:49:23.495
<v Speaker 1>can split this bundle into different files and

00:49:23.575 --> 00:49:26.135
<v Speaker 1>Timoni will do a CUE unify of all

00:49:26.135 --> 00:49:28.440
<v Speaker 1>these files so you can have these overlays

00:49:28.440 --> 00:49:29.960
<v Speaker 1>if you want, but if you don't and

00:49:29.960 --> 00:49:31.160
<v Speaker 1>if you want to have

00:49:31.560 --> 00:49:33.800
<v Speaker 1>everything expressed in a single file, can do

00:49:33.800 --> 00:49:37.480
<v Speaker 1>it because CUE allows it. You can write

00:49:38.200 --> 00:49:39.400
<v Speaker 1>if conditions,

00:49:39.400 --> 00:49:39.720
<v Speaker 1>you can

00:49:40.494 --> 00:49:44.095
<v Speaker 1>with Timoni runtime environments, can take input from

00:49:44.095 --> 00:49:46.175
<v Speaker 1>outside, from other clusters,

00:49:46.255 --> 00:49:48.974
<v Speaker 1>from your local environment. And based on that,

00:49:48.974 --> 00:49:49.935
<v Speaker 1>you can create

00:49:50.335 --> 00:49:52.335
<v Speaker 1>this little program that

00:49:52.415 --> 00:49:54.335
<v Speaker 1>knows how to deploy your app everywhere.

00:49:55.100 --> 00:49:56.620
<v Speaker 1>And what

00:49:57.420 --> 00:49:59.900
<v Speaker 1>I'm trying to do next is,

00:50:00.700 --> 00:50:01.580
<v Speaker 1>based on

00:50:02.220 --> 00:50:03.900
<v Speaker 1>this, is allowing

00:50:03.900 --> 00:50:05.260
<v Speaker 1>people to have

00:50:05.580 --> 00:50:06.540
<v Speaker 1>in a

00:50:06.700 --> 00:50:09.180
<v Speaker 1>different CUE file, which is called a runtime

00:50:09.180 --> 00:50:09.580
<v Speaker 1>file,

00:50:10.285 --> 00:50:12.925
<v Speaker 1>where you can list all your clusters along

00:50:12.925 --> 00:50:15.565
<v Speaker 1>with the CUE context for each cluster. So

00:50:15.565 --> 00:50:16.925
<v Speaker 1>you don't have to do

00:50:17.245 --> 00:50:20.605
<v Speaker 1>Timoni apply bundle minus minus context production,

00:50:20.845 --> 00:50:21.565
<v Speaker 1>because

00:50:21.965 --> 00:50:23.805
<v Speaker 1>this is how it works today. And the

00:50:23.805 --> 00:50:25.085
<v Speaker 1>problem with this is,

00:50:26.700 --> 00:50:29.580
<v Speaker 1>if you mess up your context, you'll end

00:50:29.580 --> 00:50:30.620
<v Speaker 1>up applying

00:50:31.900 --> 00:50:32.620
<v Speaker 1>the

00:50:33.340 --> 00:50:34.540
<v Speaker 1>dev configuration

00:50:34.540 --> 00:50:37.740
<v Speaker 1>on the production cluster or something like that.

00:50:37.740 --> 00:50:40.859
<v Speaker 1>Right? There are many tools to switch context.

00:50:40.859 --> 00:50:42.985
<v Speaker 1>You can put the context in a CUE

00:50:42.985 --> 00:50:43.385
<v Speaker 1>environment

00:50:44.825 --> 00:50:46.585
<v Speaker 1>variable and so on. And it's

00:50:46.985 --> 00:50:48.665
<v Speaker 1>quite easy to mess it up. So I

00:50:48.665 --> 00:50:51.305
<v Speaker 1>want to add to Timoni a way of

00:50:51.305 --> 00:50:53.545
<v Speaker 1>you to declare all the clusters that you

00:50:53.545 --> 00:50:56.960
<v Speaker 1>have and specify there the context. So you'll

00:50:56.960 --> 00:50:58.720
<v Speaker 1>only do apply

00:50:58.880 --> 00:51:01.600
<v Speaker 1>-f this file and Timoni will know, oh,

00:51:01.600 --> 00:51:03.040
<v Speaker 1>these are all the clusters I need to

00:51:03.040 --> 00:51:05.360
<v Speaker 1>execute them with this particular order,

00:51:05.520 --> 00:51:08.195
<v Speaker 1>dev first, if that goes Okay, go to

00:51:08.195 --> 00:51:11.155
<v Speaker 1>staging, go to production finally. And do this

00:51:11.155 --> 00:51:12.195
<v Speaker 1>progressive

00:51:12.995 --> 00:51:13.955
<v Speaker 1>deployment

00:51:13.955 --> 00:51:16.915
<v Speaker 1>of the bundle across the cluster fleet. And

00:51:16.915 --> 00:51:20.035
<v Speaker 1>yeah, if anyone is interested in how this

00:51:20.035 --> 00:51:21.875
<v Speaker 1>will shape out, there is an issue

00:51:22.359 --> 00:51:23.000
<v Speaker 1>on

00:51:23.800 --> 00:51:25.160
<v Speaker 1>the Timoni repo.

00:51:26.920 --> 00:51:29.000
<v Speaker 1>Okay. Timoni versus Helm.

00:51:29.560 --> 00:51:30.440
<v Speaker 1>We've

00:51:30.760 --> 00:51:33.160
<v Speaker 1>touched a little bit around this.

00:51:33.880 --> 00:51:36.200
<v Speaker 1>There is also a dedicated page on the

00:51:36.200 --> 00:51:39.135
<v Speaker 1>Timoni website, Comparison Help, where

00:51:40.095 --> 00:51:42.495
<v Speaker 1>it's quite a big list there of all

00:51:42.495 --> 00:51:43.455
<v Speaker 1>the differences.

00:51:44.095 --> 00:51:47.215
<v Speaker 1>I wanted here to just showcase

00:51:47.215 --> 00:51:48.735
<v Speaker 1>some of the performance

00:51:48.735 --> 00:51:50.015
<v Speaker 1>differences and

00:51:51.830 --> 00:51:53.110
<v Speaker 1>how Timoni

00:51:53.590 --> 00:51:54.950
<v Speaker 1>is, let's say,

00:51:55.190 --> 00:51:58.070
<v Speaker 1>more performant, more efficient than Helm just because

00:51:58.070 --> 00:51:59.190
<v Speaker 1>it uses

00:51:59.830 --> 00:52:01.990
<v Speaker 1>the technology in a different way. For example,

00:52:01.990 --> 00:52:03.190
<v Speaker 1>Timoni does not

00:52:03.915 --> 00:52:05.755
<v Speaker 1>store all your

00:52:06.075 --> 00:52:08.635
<v Speaker 1>YAMLs in Kubernetes secrets.

00:52:08.875 --> 00:52:10.875
<v Speaker 1>What Helm does every time you do a

00:52:10.875 --> 00:52:12.235
<v Speaker 1>Helm upgrade,

00:52:13.755 --> 00:52:16.395
<v Speaker 1>even if the upgrade modifies just a tiny

00:52:18.240 --> 00:52:19.440
<v Speaker 1>bit of YAML,

00:52:19.680 --> 00:52:21.600
<v Speaker 1>what Helm will do, it will

00:52:23.120 --> 00:52:25.360
<v Speaker 1>get all your YAMLs in your chart, and

00:52:25.360 --> 00:52:27.280
<v Speaker 1>it will store that in a new secret.

00:52:27.280 --> 00:52:28.800
<v Speaker 1>And you end up with, I don't know,

00:52:29.465 --> 00:52:32.585
<v Speaker 1>ten, twenty, one hundred secrets, whatever you can

00:52:33.545 --> 00:52:35.305
<v Speaker 1>set the limit for those as well. But

00:52:35.305 --> 00:52:37.385
<v Speaker 1>the idea is you always have

00:52:38.505 --> 00:52:39.145
<v Speaker 1>the

00:52:40.265 --> 00:52:42.745
<v Speaker 1>manifest twice. Once in ETCD

00:52:43.390 --> 00:52:44.110
<v Speaker 1>and

00:52:44.190 --> 00:52:46.190
<v Speaker 1>yet again in a secret. And if you

00:52:46.190 --> 00:52:49.070
<v Speaker 1>version it, you do multiple upgrades, you'll end

00:52:49.070 --> 00:52:51.230
<v Speaker 1>up with all these things. And

00:52:51.550 --> 00:52:54.510
<v Speaker 1>if you do a simple load test, let's

00:52:54.510 --> 00:52:56.910
<v Speaker 1>say you do a Helm upgrade in a

00:52:56.910 --> 00:52:57.950
<v Speaker 1>loop 100 times,

00:52:58.855 --> 00:52:59.815
<v Speaker 1>you'll see

00:53:00.695 --> 00:53:03.655
<v Speaker 1>gigabytes of data going between the CLI, the

00:53:03.655 --> 00:53:06.135
<v Speaker 1>Helm CLI, and the Kube API. And you

00:53:06.455 --> 00:53:09.095
<v Speaker 1>can see the amount of pressure Helm puts

00:53:09.095 --> 00:53:10.455
<v Speaker 1>on the Kubernetes API.

00:53:11.030 --> 00:53:11.670
<v Speaker 1>And

00:53:13.030 --> 00:53:13.910
<v Speaker 1>yeah, my

00:53:17.670 --> 00:53:19.270
<v Speaker 1>approach to this is

00:53:19.510 --> 00:53:21.270
<v Speaker 1>I don't want to store

00:53:21.430 --> 00:53:22.470
<v Speaker 1>all these

00:53:22.710 --> 00:53:24.390
<v Speaker 1>things twice in the cluster,

00:53:24.945 --> 00:53:25.745
<v Speaker 1>because

00:53:25.745 --> 00:53:26.945
<v Speaker 1>the module

00:53:27.265 --> 00:53:28.305
<v Speaker 1>definition

00:53:28.385 --> 00:53:31.345
<v Speaker 1>is already in your repository,

00:53:31.345 --> 00:53:33.105
<v Speaker 1>in your container repository.

00:53:33.825 --> 00:53:36.465
<v Speaker 1>And what Timoni does when it creates an

00:53:36.465 --> 00:53:36.865
<v Speaker 1>instance,

00:53:37.490 --> 00:53:38.690
<v Speaker 1>it stores

00:53:38.690 --> 00:53:42.130
<v Speaker 1>in the cluster your custom values, because those

00:53:42.130 --> 00:53:43.330
<v Speaker 1>really matter,

00:53:43.890 --> 00:53:46.609
<v Speaker 1>and the digest and the URL to the

00:53:46.609 --> 00:53:48.450
<v Speaker 1>module. So if you need to roll back,

00:53:48.450 --> 00:53:50.609
<v Speaker 1>if you need to apply an earlier version,

00:53:50.609 --> 00:53:51.809
<v Speaker 1>you can just reference

00:53:52.715 --> 00:53:53.995
<v Speaker 1>that digest.

00:53:54.315 --> 00:53:56.715
<v Speaker 1>Of course, it's

00:53:56.715 --> 00:53:57.835
<v Speaker 1>not the same as

00:53:58.235 --> 00:54:01.035
<v Speaker 1>does it, because even if you delete a

00:54:01.035 --> 00:54:01.355
<v Speaker 1>chart,

00:54:06.369 --> 00:54:07.010
<v Speaker 1>the

00:54:07.650 --> 00:54:09.970
<v Speaker 1>YAMLs in that chart are already stored in

00:54:09.970 --> 00:54:11.490
<v Speaker 1>a cluster. So you can do a restore

00:54:11.490 --> 00:54:13.490
<v Speaker 1>without having to pull the chart.

00:54:14.690 --> 00:54:16.770
<v Speaker 1>But if the chart goes away and the

00:54:16.770 --> 00:54:19.730
<v Speaker 1>container images go away, you delete the container

00:54:19.730 --> 00:54:20.290
<v Speaker 1>repo.

00:54:21.165 --> 00:54:21.965
<v Speaker 1>Then

00:54:21.965 --> 00:54:24.365
<v Speaker 1>the rollback will still fail because the images

00:54:24.365 --> 00:54:25.165
<v Speaker 1>are gone.

00:54:25.805 --> 00:54:26.765
<v Speaker 1>Right? So

00:54:27.245 --> 00:54:29.885
<v Speaker 1>why the hell doesn't even make a copy

00:54:29.885 --> 00:54:32.285
<v Speaker 1>of all the images, right? That's a real

00:54:32.285 --> 00:54:34.205
<v Speaker 1>rollback. You need to copy everything in a

00:54:34.205 --> 00:54:37.430
<v Speaker 1>way. So my approach to this is Timoni

00:54:37.430 --> 00:54:39.829
<v Speaker 1>also creates a secret as a storage. It

00:54:39.829 --> 00:54:41.190
<v Speaker 1>doesn't store there.

00:54:41.510 --> 00:54:44.150
<v Speaker 1>It doesn't store there YAML. It only stores

00:54:44.150 --> 00:54:47.750
<v Speaker 1>the Q values that the end user created.

00:54:48.710 --> 00:54:50.150
<v Speaker 1>And a list of

00:54:50.585 --> 00:54:51.625
<v Speaker 1>references,

00:54:51.704 --> 00:54:55.545
<v Speaker 1>which is kind, name, namespace, API version, to

00:54:55.545 --> 00:54:57.305
<v Speaker 1>all the things that it manages. So this

00:54:57.305 --> 00:55:00.185
<v Speaker 1>is like a tiny bit of data

00:55:01.224 --> 00:55:03.305
<v Speaker 1>so Timoni can do all things.

00:55:04.105 --> 00:55:05.464
<v Speaker 1>You can see

00:55:06.119 --> 00:55:07.880
<v Speaker 1>what resources it manages,

00:55:08.119 --> 00:55:09.400
<v Speaker 1>what's their status.

00:55:09.640 --> 00:55:10.760
<v Speaker 1>If you want to

00:55:11.480 --> 00:55:14.119
<v Speaker 1>go back, restore the current version, if you

00:55:14.119 --> 00:55:17.079
<v Speaker 1>do a kubectl editor or something, you have

00:55:17.079 --> 00:55:17.640
<v Speaker 1>the

00:55:17.960 --> 00:55:20.359
<v Speaker 1>module digest there so you can reapply it.

00:55:21.155 --> 00:55:24.435
<v Speaker 1>So that's one main difference between how

00:55:24.595 --> 00:55:26.755
<v Speaker 1>Timoni and Helm works around

00:55:26.994 --> 00:55:28.275
<v Speaker 1>state persistence.

00:55:29.234 --> 00:55:30.435
<v Speaker 1>Another difference

00:55:30.994 --> 00:55:33.235
<v Speaker 1>in regards to performance is

00:55:33.474 --> 00:55:34.915
<v Speaker 1>what I mentioned before.

00:55:35.770 --> 00:55:37.290
<v Speaker 1>You have huge

00:55:37.770 --> 00:55:39.850
<v Speaker 1>app definitions with hundreds

00:55:40.650 --> 00:55:41.370
<v Speaker 1>thousands

00:55:41.610 --> 00:55:42.250
<v Speaker 1>of

00:55:42.570 --> 00:55:44.410
<v Speaker 1>manifests in there. And if you do an

00:55:44.410 --> 00:55:46.090
<v Speaker 1>upgrade which only changes

00:55:46.410 --> 00:55:49.610
<v Speaker 1>one deployment, Timoni will only apply that change.

00:55:49.905 --> 00:55:52.945
<v Speaker 1>While on every upgrade, it will apply everything.

00:55:54.305 --> 00:55:56.145
<v Speaker 1>And you can see how that can be

00:55:56.145 --> 00:55:59.425
<v Speaker 1>really impactful for your Kubernetes API.

00:55:59.425 --> 00:56:01.265
<v Speaker 1>Okay. If you want to find out more,

00:56:01.265 --> 00:56:02.625
<v Speaker 1>there are many, many differences.

00:56:03.450 --> 00:56:05.930
<v Speaker 1>I try to keep this list up to

00:56:05.930 --> 00:56:08.250
<v Speaker 1>date. And it's on comparison

00:56:09.130 --> 00:56:10.410
<v Speaker 1>on the website.

00:56:12.410 --> 00:56:13.369
<v Speaker 1>Some resources.

00:56:16.715 --> 00:56:19.915
<v Speaker 1>How can you contribute Timoni? Well, Timoni is

00:56:19.915 --> 00:56:21.275
<v Speaker 1>Apache two point zero

00:56:22.155 --> 00:56:23.275
<v Speaker 1>licensed.

00:56:23.515 --> 00:56:24.635
<v Speaker 1>It accepts

00:56:25.595 --> 00:56:26.395
<v Speaker 1>contributions

00:56:26.395 --> 00:56:28.155
<v Speaker 1>on GitHub with pull requests.

00:56:30.539 --> 00:56:31.900
<v Speaker 1>But I think

00:56:33.900 --> 00:56:35.019
<v Speaker 1>code contributions

00:56:35.019 --> 00:56:37.260
<v Speaker 1>are great, but they are not

00:56:39.660 --> 00:56:42.299
<v Speaker 1>the most valuable thing you can contribute. I

00:56:42.299 --> 00:56:42.779
<v Speaker 1>think

00:56:43.135 --> 00:56:45.535
<v Speaker 1>at this point, the most valuable thing is

00:56:45.535 --> 00:56:47.535
<v Speaker 1>trying it out. Try to write your own

00:56:47.535 --> 00:56:48.335
<v Speaker 1>modules

00:56:48.975 --> 00:56:51.295
<v Speaker 1>and give feedback on that. And if

00:56:51.935 --> 00:56:54.495
<v Speaker 1>you create some modules, share it with others.

00:56:54.655 --> 00:56:57.240
<v Speaker 1>They are like, I'm not going to translate

00:56:57.240 --> 00:57:00.440
<v Speaker 1>all the 1,000,000 Helm charts out there. I'm

00:57:00.440 --> 00:57:02.520
<v Speaker 1>not going to do that because Timoni is

00:57:02.520 --> 00:57:03.800
<v Speaker 1>just a side project.

00:57:04.120 --> 00:57:05.880
<v Speaker 1>I work on it ten nights and weekends.

00:57:05.880 --> 00:57:07.560
<v Speaker 1>I don't have time to do all of

00:57:07.560 --> 00:57:09.960
<v Speaker 1>that. And I know there are Timoni users

00:57:09.960 --> 00:57:11.160
<v Speaker 1>right now which have

00:57:12.325 --> 00:57:15.365
<v Speaker 1>fully migrated from the inherent charts to Timoni

00:57:15.365 --> 00:57:16.165
<v Speaker 1>modules.

00:57:17.125 --> 00:57:20.085
<v Speaker 1>But yeah, there are so many things

00:57:20.725 --> 00:57:22.885
<v Speaker 1>out there that could be

00:57:23.445 --> 00:57:26.245
<v Speaker 1>distributed as modules. And I think that's the

00:57:26.245 --> 00:57:28.830
<v Speaker 1>most important thing. Feedback on that,

00:57:29.630 --> 00:57:31.230
<v Speaker 1>how hard it is to

00:57:31.630 --> 00:57:32.510
<v Speaker 1>create

00:57:32.510 --> 00:57:34.990
<v Speaker 1>a module. I'm quite sure there are so

00:57:34.990 --> 00:57:37.870
<v Speaker 1>many UX improvements around authoring

00:57:38.030 --> 00:57:39.150
<v Speaker 1>and helping people

00:57:40.665 --> 00:57:43.385
<v Speaker 1>write CUE, generate all this code. CUE is

00:57:43.385 --> 00:57:44.825
<v Speaker 1>quite challenging

00:57:45.625 --> 00:57:47.625
<v Speaker 1>when you have schemas and all the things

00:57:47.625 --> 00:57:49.945
<v Speaker 1>that we said. I'm

00:57:49.945 --> 00:57:51.145
<v Speaker 1>also considering having

00:57:52.040 --> 00:57:52.840
<v Speaker 1>dedicated

00:57:52.840 --> 00:57:56.200
<v Speaker 1>docs in the Timoni website around modules,

00:57:56.440 --> 00:57:57.880
<v Speaker 1>and maybe

00:57:59.000 --> 00:58:01.560
<v Speaker 1>have a get started with CUE as well.

00:58:02.520 --> 00:58:05.560
<v Speaker 1>Specifically for Kubernetes, not all the configuration out

00:58:05.560 --> 00:58:07.320
<v Speaker 1>there, right? And

00:58:07.845 --> 00:58:10.165
<v Speaker 1>I would really appreciate help from

00:58:10.325 --> 00:58:11.765
<v Speaker 1>anyone who can

00:58:12.885 --> 00:58:15.605
<v Speaker 1>build a get started with QNT money guide

00:58:15.605 --> 00:58:17.045
<v Speaker 1>or something like that.

00:58:17.365 --> 00:58:18.405
<v Speaker 1>I think it's

00:58:18.885 --> 00:58:21.445
<v Speaker 1>quite more important than someone

00:58:23.609 --> 00:58:25.290
<v Speaker 1>hardcore code contributions,

00:58:25.290 --> 00:58:27.130
<v Speaker 1>which are nice, but

00:58:28.250 --> 00:58:30.490
<v Speaker 1>it's not the only way you can contribute.

00:58:31.690 --> 00:58:34.410
<v Speaker 1>Okay. That was it, presentation.

00:58:34.410 --> 00:58:35.690
<v Speaker 1>It took some time.

00:58:36.329 --> 00:58:36.810
<v Speaker 1>Let's

00:58:39.130 --> 00:58:40.065
<v Speaker 1>get the hands on.

00:58:40.385 --> 00:58:41.025
<v Speaker 0>Exactly.

00:58:41.185 --> 00:58:43.185
<v Speaker 0>Alright. So thank you so much for for

00:58:43.185 --> 00:58:45.185
<v Speaker 0>walking through that. We have a couple of

00:58:45.185 --> 00:58:45.825
<v Speaker 0>questions

00:58:46.145 --> 00:58:47.905
<v Speaker 0>from YouTube. However,

00:58:48.945 --> 00:58:50.945
<v Speaker 0>I think those questions will be best answered

00:58:50.945 --> 00:58:52.705
<v Speaker 0>by us just getting the terminal open and

00:58:52.705 --> 00:58:54.180
<v Speaker 0>actually showing it. So

00:58:54.820 --> 00:58:57.700
<v Speaker 0>to Stefan and to YMO,

00:58:57.700 --> 00:59:00.099
<v Speaker 0>your questions are great and I'd rather show

00:59:00.099 --> 00:59:02.580
<v Speaker 0>you the answers as we play with

00:59:02.900 --> 00:59:05.140
<v Speaker 0>Timoni. However, I'm gonna be really selfish and

00:59:05.140 --> 00:59:07.325
<v Speaker 0>ask one of my own questions because, you

00:59:07.325 --> 00:59:07.805
<v Speaker 0>know, that's

00:59:08.845 --> 00:59:10.045
<v Speaker 0>because you talked about

00:59:11.005 --> 00:59:13.565
<v Speaker 0>valuable contributions that are gonna come from people

00:59:13.565 --> 00:59:15.645
<v Speaker 0>writing Timoni modules and making it easier for

00:59:15.645 --> 00:59:17.805
<v Speaker 0>other people to onboard to Timoni without having

00:59:17.805 --> 00:59:20.970
<v Speaker 0>to write everything themselves. Right? The first question

00:59:20.970 --> 00:59:22.490
<v Speaker 0>that pops into my head the minute you

00:59:22.490 --> 00:59:23.930
<v Speaker 0>said that was, well, first,

00:59:24.090 --> 00:59:26.650
<v Speaker 0>yes, let's get people doing that. But what's

00:59:26.650 --> 00:59:28.250
<v Speaker 0>the discovery mechanism?

00:59:28.730 --> 00:59:31.530
<v Speaker 0>Are you currently talking to anyone at like

00:59:31.530 --> 00:59:33.930
<v Speaker 0>the the CNCF or Artifact Hub in order

00:59:33.930 --> 00:59:35.845
<v Speaker 0>to get Timoni listed there? Has it already

00:59:35.845 --> 00:59:37.525
<v Speaker 0>listed there and I missed it? Like how

00:59:37.525 --> 00:59:39.125
<v Speaker 0>do people find these modules when they do

00:59:39.125 --> 00:59:39.765
<v Speaker 0>exist?

00:59:40.645 --> 00:59:42.005
<v Speaker 1>Yeah. That's a

00:59:42.165 --> 00:59:44.085
<v Speaker 1>a great question. I have an issue about

00:59:44.325 --> 00:59:44.885
<v Speaker 1>so

00:59:45.525 --> 00:59:47.525
<v Speaker 1>Artificial Hub is definitely

00:59:47.845 --> 00:59:50.085
<v Speaker 1>a great way of

00:59:51.160 --> 00:59:54.440
<v Speaker 1>being able to discover things without locking people

00:59:54.440 --> 00:59:55.320
<v Speaker 1>into

00:59:57.160 --> 00:59:59.640
<v Speaker 1>a unique registry or

01:00:00.120 --> 01:00:02.120
<v Speaker 1>my own registry or something. I don't want

01:00:02.120 --> 01:00:05.880
<v Speaker 1>to have Timoni as NPM. I don't want

01:00:05.880 --> 01:00:08.535
<v Speaker 1>to be the person that runs

01:00:09.335 --> 01:00:10.055
<v Speaker 1>the

01:00:10.375 --> 01:00:13.335
<v Speaker 1>authorized registry and everybody has to push there

01:00:13.335 --> 01:00:16.855
<v Speaker 1>and so on. The whole idea of distributing

01:00:17.415 --> 01:00:20.930
<v Speaker 1>Timoni modules with OCI artifacts is the idea

01:00:20.930 --> 01:00:23.650
<v Speaker 1>that you will be pushing your modules next

01:00:23.650 --> 01:00:25.410
<v Speaker 1>to your app image. I don't

01:00:25.810 --> 01:00:27.970
<v Speaker 1>want to host your app images, right?

01:00:29.410 --> 01:00:32.130
<v Speaker 1>And it also makes it very easy to

01:00:32.130 --> 01:00:36.035
<v Speaker 1>replicate it. Like for example, AWS has public

01:00:36.035 --> 01:00:36.915
<v Speaker 1>ECR,

01:00:36.994 --> 01:00:39.395
<v Speaker 1>which mirrors a bunch of things from Docker

01:00:39.395 --> 01:00:41.875
<v Speaker 1>Hub. When Docker Hub goes down, you can

01:00:41.875 --> 01:00:44.994
<v Speaker 1>switch to that, right? This could, you could

01:00:44.994 --> 01:00:46.970
<v Speaker 1>apply the same thing to Timoni modules. You

01:00:46.970 --> 01:00:48.890
<v Speaker 1>push the Timoni modules to Docker Hub, and

01:00:48.890 --> 01:00:50.970
<v Speaker 1>you can push it to ECR public, to

01:00:50.970 --> 01:00:52.410
<v Speaker 1>GCR, and so on.

01:00:53.450 --> 01:00:54.970
<v Speaker 1>I use

01:00:56.010 --> 01:00:58.650
<v Speaker 1>GitHub Container Registry because it's so easy for

01:00:58.650 --> 01:01:01.289
<v Speaker 1>me to publish there from GitHub itself.

01:01:01.674 --> 01:01:03.195
<v Speaker 1>But it works everywhere.

01:01:03.275 --> 01:01:06.234
<v Speaker 1>And the discovery part is quite challenging when

01:01:06.234 --> 01:01:09.194
<v Speaker 1>you have all these modules everywhere distributed and

01:01:09.194 --> 01:01:12.474
<v Speaker 1>so on. And I will definitely need some

01:01:12.474 --> 01:01:16.140
<v Speaker 1>help for someone which is intimate with, has

01:01:16.140 --> 01:01:18.540
<v Speaker 1>some knowledge about Artifact Hub.

01:01:19.099 --> 01:01:22.460
<v Speaker 1>I see that Tecton and other projects have

01:01:22.460 --> 01:01:23.900
<v Speaker 1>registered their

01:01:24.300 --> 01:01:26.860
<v Speaker 1>OCI type. It's no different than that.

01:01:27.420 --> 01:01:30.060
<v Speaker 1>Timoni has its own OCI, artifact type,

01:01:30.605 --> 01:01:32.045
<v Speaker 1>and layer type.

01:01:33.565 --> 01:01:35.005
<v Speaker 1>Standard annotations,

01:01:35.005 --> 01:01:36.365
<v Speaker 1>which are all from

01:01:36.525 --> 01:01:38.605
<v Speaker 1>OCI standard annotations.

01:01:38.765 --> 01:01:40.845
<v Speaker 1>I didn't come up with anything

01:01:41.325 --> 01:01:42.365
<v Speaker 1>special there.

01:01:43.484 --> 01:01:44.365
<v Speaker 1>So yeah,

01:01:44.605 --> 01:01:46.370
<v Speaker 1>Artifact Hub is

01:01:46.770 --> 01:01:48.930
<v Speaker 1>one way of doing it, and I will

01:01:48.930 --> 01:01:51.410
<v Speaker 1>really need some help there. Another idea that

01:01:51.410 --> 01:01:52.450
<v Speaker 1>I had is

01:01:54.210 --> 01:01:55.250
<v Speaker 1>run

01:01:55.810 --> 01:01:59.515
<v Speaker 1>a public instance, a different instance of Artify

01:01:59.515 --> 01:02:01.595
<v Speaker 1>Hub only with Timoni

01:02:01.835 --> 01:02:03.755
<v Speaker 1>OCI artifact in there

01:02:03.995 --> 01:02:07.115
<v Speaker 1>and use that UI to only search Timoni

01:02:07.115 --> 01:02:07.915
<v Speaker 1>things.

01:02:08.315 --> 01:02:11.035
<v Speaker 1>Who knows? But yeah, Artify Hub will be

01:02:11.035 --> 01:02:11.915
<v Speaker 1>a first

01:02:12.075 --> 01:02:13.035
<v Speaker 1>good step forward.

01:02:15.100 --> 01:02:15.660
<v Speaker 1>Yeah.

01:02:16.860 --> 01:02:17.580
<v Speaker 0>Alright.

01:02:18.060 --> 01:02:20.460
<v Speaker 0>Well, I'm going to share my screen and

01:02:20.460 --> 01:02:21.900
<v Speaker 0>let's start kicking the tires.

01:02:26.645 --> 01:02:28.244
<v Speaker 0>Alright. You should be able to see my

01:02:28.244 --> 01:02:30.965
<v Speaker 0>web browser now. This is the Timoni homepage.

01:02:31.205 --> 01:02:32.485
<v Speaker 0>If you wanna check this out and play

01:02:32.485 --> 01:02:35.685
<v Speaker 0>with it yourself, you go to tonomi.sh.

01:02:36.645 --> 01:02:37.925
<v Speaker 0>As always,

01:02:38.005 --> 01:02:40.485
<v Speaker 0>we first need to install the tool.

01:02:40.565 --> 01:02:42.790
<v Speaker 0>So I'm just going to grab the brew

01:02:42.790 --> 01:02:43.590
<v Speaker 0>command

01:02:45.990 --> 01:02:48.230
<v Speaker 0>jump over to my terminal and get this

01:02:48.230 --> 01:02:49.190
<v Speaker 0>kicked off.

01:02:50.630 --> 01:02:52.950
<v Speaker 0>But we're gonna do two things today if

01:02:52.950 --> 01:02:55.510
<v Speaker 0>I remember correctly, Stefan. We are going to

01:02:55.510 --> 01:02:57.385
<v Speaker 0>work through the quick start gate

01:02:57.785 --> 01:02:59.545
<v Speaker 0>and then after we get through to the

01:02:59.545 --> 01:03:01.545
<v Speaker 0>end, hopefully get people answers to all of

01:03:01.545 --> 01:03:04.105
<v Speaker 0>their questions. We're gonna try and show more

01:03:04.105 --> 01:03:04.744
<v Speaker 0>of

01:03:05.065 --> 01:03:07.625
<v Speaker 0>production use case by making this work with

01:03:07.625 --> 01:03:10.369
<v Speaker 0>like, you know, secrets and other things that

01:03:10.369 --> 01:03:11.569
<v Speaker 0>become important

01:03:11.569 --> 01:03:13.329
<v Speaker 0>when you stop playing with the tool and

01:03:13.329 --> 01:03:15.089
<v Speaker 0>start deploying with the tool.

01:03:15.809 --> 01:03:17.490
<v Speaker 0>Oh, I don't even realize the brookie man

01:03:17.490 --> 01:03:18.849
<v Speaker 0>was right here in front of me too.

01:03:18.849 --> 01:03:19.250
<v Speaker 0>Oh, well.

01:03:21.965 --> 01:03:23.725
<v Speaker 1>Yeah. In the install page,

01:03:24.285 --> 01:03:26.045
<v Speaker 1>there are many other ways

01:03:26.365 --> 01:03:29.565
<v Speaker 1>outside Brew. I discovered, for example, that Open

01:03:29.565 --> 01:03:30.445
<v Speaker 1>SUSE

01:03:30.445 --> 01:03:33.485
<v Speaker 1>team has published a Timoni module for

01:03:34.420 --> 01:03:35.620
<v Speaker 1>an RPM

01:03:37.860 --> 01:03:39.460
<v Speaker 1>package on their

01:03:41.140 --> 01:03:44.180
<v Speaker 1>repository and so on. So, yeah, I've Nice.

01:03:44.260 --> 01:03:45.540
<v Speaker 1>There is a mix

01:03:45.700 --> 01:03:46.580
<v Speaker 1>package,

01:03:46.580 --> 01:03:47.860
<v Speaker 1>a YI package,

01:03:50.405 --> 01:03:52.005
<v Speaker 1>an arcade package,

01:03:52.085 --> 01:03:52.805
<v Speaker 1>Alex,

01:03:52.885 --> 01:03:55.605
<v Speaker 1>from Open Files added to arcade.

01:03:56.965 --> 01:04:00.085
<v Speaker 1>Hopefully, at some point, someone will contribute it

01:04:00.085 --> 01:04:00.645
<v Speaker 1>to

01:04:01.045 --> 01:04:02.245
<v Speaker 1>the Windows

01:04:02.245 --> 01:04:04.619
<v Speaker 1>ecosystem. It works on Windows, but you have

01:04:04.619 --> 01:04:06.700
<v Speaker 1>to download the binary now. I know Windows

01:04:06.700 --> 01:04:07.660
<v Speaker 1>has its own

01:04:08.059 --> 01:04:09.580
<v Speaker 1>package management.

01:04:10.299 --> 01:04:12.779
<v Speaker 1>I'm not sure how to do that. Yeah.

01:04:12.779 --> 01:04:13.339
<v Speaker 0>Alright.

01:04:14.220 --> 01:04:15.740
<v Speaker 0>And just because I see that there, I'll

01:04:15.740 --> 01:04:17.099
<v Speaker 0>even get my completions

01:04:17.099 --> 01:04:17.500
<v Speaker 0>running.

01:04:18.855 --> 01:04:21.095
<v Speaker 1>Bruce should have done that automatically.

01:04:21.415 --> 01:04:22.615
<v Speaker 0>Alright. Okay. Cool.

01:04:23.415 --> 01:04:24.295
<v Speaker 0>Alright.

01:04:24.775 --> 01:04:26.535
<v Speaker 0>So the first thing we need to do

01:04:26.535 --> 01:04:29.415
<v Speaker 0>is install a Timoni module.

01:04:29.655 --> 01:04:30.135
<v Speaker 0>So

01:04:30.620 --> 01:04:33.260
<v Speaker 0>let's just make sure I understand exactly what's

01:04:33.260 --> 01:04:34.700
<v Speaker 0>gonna happen here and just kind of share

01:04:34.700 --> 01:04:36.140
<v Speaker 0>this with the people that are watching.

01:04:36.380 --> 01:04:38.300
<v Speaker 0>When we say install a module, what we're

01:04:38.300 --> 01:04:40.300
<v Speaker 0>suggesting is that there's somebody

01:04:40.780 --> 01:04:43.260
<v Speaker 0>out there, you in this case has written

01:04:43.260 --> 01:04:45.995
<v Speaker 0>a Timoni module, thrown it to OCI, and

01:04:45.995 --> 01:04:47.995
<v Speaker 0>we can just consume that without doing anything

01:04:47.995 --> 01:04:49.355
<v Speaker 0>right off the bat. We could just say,

01:04:49.355 --> 01:04:50.555
<v Speaker 0>Timoni apply,

01:04:50.715 --> 01:04:52.315
<v Speaker 0>point it to it, and it's gonna throw

01:04:52.315 --> 01:04:55.435
<v Speaker 0>something into our Kubernetes cluster. Is that correct?

01:04:55.515 --> 01:04:58.555
<v Speaker 1>Yeah. You also need to specify the namespace

01:04:58.555 --> 01:04:59.835
<v Speaker 1>where that thing is.

01:05:02.670 --> 01:05:05.310
<v Speaker 0>Where that's oh, sorry. No. Where that's going

01:05:05.310 --> 01:05:06.990
<v Speaker 0>to deploy to in the cluster, right? Yes.

01:05:06.990 --> 01:05:09.710
<v Speaker 0>Yes. Does that use the context namespace,

01:05:09.710 --> 01:05:12.510
<v Speaker 0>or does it actually enforce that we specify

01:05:12.510 --> 01:05:14.234
<v Speaker 0>at runtime? No.

01:05:14.714 --> 01:05:15.355
<v Speaker 1>If

01:05:15.674 --> 01:05:17.515
<v Speaker 1>you don't specify it, it goes to default,

01:05:17.515 --> 01:05:19.755
<v Speaker 1>but if you have changed your default context,

01:05:19.755 --> 01:05:21.595
<v Speaker 1>it will use that. So Timoni,

01:05:22.875 --> 01:05:24.795
<v Speaker 1>CLI is built on top of

01:05:26.394 --> 01:05:27.115
<v Speaker 1>the

01:05:27.434 --> 01:05:28.474
<v Speaker 1>kubectl

01:05:28.474 --> 01:05:29.275
<v Speaker 1>runtime

01:05:29.610 --> 01:05:31.050
<v Speaker 1>package,

01:05:31.050 --> 01:05:33.770
<v Speaker 1>the CLI runtime, I think. So it has

01:05:33.770 --> 01:05:35.130
<v Speaker 1>all the flags from

01:05:35.770 --> 01:05:36.570
<v Speaker 1>kubectl

01:05:36.570 --> 01:05:40.090
<v Speaker 1>and knows all things that kubectl knows.

01:05:40.730 --> 01:05:41.690
<v Speaker 1>Default context,

01:05:42.204 --> 01:05:43.965
<v Speaker 1>default namespace, and so on.

01:05:44.444 --> 01:05:45.165
<v Speaker 0>Cool.

01:05:45.405 --> 01:05:47.244
<v Speaker 0>Alright. Well, let's just do a deploy to

01:05:47.244 --> 01:05:48.525
<v Speaker 0>the default namespace.

01:05:49.085 --> 01:05:51.484
<v Speaker 0>And just because I'm always curious, right, if

01:05:51.484 --> 01:05:53.484
<v Speaker 0>I remove dash dash version latest, does it

01:05:53.484 --> 01:05:54.684
<v Speaker 0>default to latest?

01:05:55.380 --> 01:05:56.099
<v Speaker 1>Sure.

01:05:56.819 --> 01:05:57.780
<v Speaker 1>Let's see.

01:05:58.180 --> 01:05:59.859
<v Speaker 1>Maybe to let her out and say, hey.

01:05:59.859 --> 01:06:01.859
<v Speaker 1>You you really need to specify Adam.

01:06:02.500 --> 01:06:02.819
<v Speaker 0>Think

01:06:03.700 --> 01:06:05.540
<v Speaker 0>Why? But I don't see your

01:06:07.700 --> 01:06:08.099
<v Speaker 1>console.

01:06:10.835 --> 01:06:11.475
<v Speaker 0>Oh,

01:06:14.035 --> 01:06:15.315
<v Speaker 1>I shut my whole window.

01:06:25.040 --> 01:06:26.000
<v Speaker 0>What happened?

01:06:27.520 --> 01:06:28.080
<v Speaker 0>Window.

01:06:28.400 --> 01:06:30.560
<v Speaker 0>Oh, I shared window not screen.

01:06:32.880 --> 01:06:33.920
<v Speaker 0>There we go.

01:06:34.480 --> 01:06:35.680
<v Speaker 0>Alright. So

01:06:36.480 --> 01:06:39.535
<v Speaker 0>yeah, I just did the Timoni apply, I

01:06:39.535 --> 01:06:41.935
<v Speaker 0>removed the namespace, I removed the latest,

01:06:42.095 --> 01:06:43.775
<v Speaker 0>my key chain is

01:06:45.375 --> 01:06:46.735
<v Speaker 0>asking for stuff

01:06:49.215 --> 01:06:50.175
<v Speaker 0>and there we go.

01:06:52.520 --> 01:06:55.080
<v Speaker 0>So it's applying this to my cluster.

01:06:55.640 --> 01:06:57.480
<v Speaker 0>So we could run kubectl,

01:06:57.480 --> 01:06:58.680
<v Speaker 0>get pods,

01:06:59.320 --> 01:06:59.960
<v Speaker 0>watch,

01:07:01.160 --> 01:07:02.760
<v Speaker 0>and it kinda beat me, but we do

01:07:02.760 --> 01:07:05.240
<v Speaker 0>have a pod and full deployed 10 ago.

01:07:07.935 --> 01:07:09.855
<v Speaker 1>Also, Timoni does a watch

01:07:10.095 --> 01:07:12.575
<v Speaker 1>and when you apply it. And it waits

01:07:12.575 --> 01:07:15.695
<v Speaker 1>for all the pods to be healthy.

01:07:16.655 --> 01:07:19.455
<v Speaker 0>Yeah. So if I run this again, I'm

01:07:19.455 --> 01:07:21.615
<v Speaker 0>assuming it's just gonna say there's nothing to

01:07:21.615 --> 01:07:21.775
<v Speaker 0>do.

01:07:23.529 --> 01:07:25.369
<v Speaker 0>Unchanged, unchanged, unchanged.

01:07:25.450 --> 01:07:26.730
<v Speaker 0>Yeah. You

01:07:27.289 --> 01:07:29.290
<v Speaker 0>also mentioned during your talk

01:07:29.529 --> 01:07:31.050
<v Speaker 0>that we could run a

01:07:31.450 --> 01:07:32.170
<v Speaker 0>diff.

01:07:34.010 --> 01:07:36.089
<v Speaker 0>Gonna say unchanged. So that's doing a server

01:07:36.089 --> 01:07:38.465
<v Speaker 0>side apply dry run. Cool.

01:07:39.825 --> 01:07:41.425
<v Speaker 0>Alright. I like it when things

01:07:41.905 --> 01:07:43.425
<v Speaker 0>just work the way I expect them to

01:07:43.425 --> 01:07:45.265
<v Speaker 0>work. It's always an absolute bonus.

01:07:47.665 --> 01:07:52.065
<v Speaker 0>Okay. So yeah, that's just a Timoni module

01:07:50.880 --> 01:07:53.119
<v Speaker 0>deployed to our cluster. So now we can

01:07:53.119 --> 01:07:55.359
<v Speaker 0>use Timoni to inspect our cluster to work

01:07:55.359 --> 01:07:57.440
<v Speaker 0>out what Timoni has deployed.

01:07:58.640 --> 01:08:01.519
<v Speaker 0>Now you said during your presentation that this

01:08:01.519 --> 01:08:03.119
<v Speaker 0>is not storing secrets.

01:08:03.119 --> 01:08:04.160
<v Speaker 0>So is this using,

01:08:05.685 --> 01:08:07.445
<v Speaker 0>No. That's not in cluster. This is actually

01:08:07.445 --> 01:08:08.645
<v Speaker 0>inspecting the module.

01:08:08.965 --> 01:08:11.685
<v Speaker 0>Okay. So it has the secret. It creates

01:08:11.685 --> 01:08:14.085
<v Speaker 1>a secret. And it doesn't store inside the

01:08:14.085 --> 01:08:15.365
<v Speaker 1>secret any

01:08:16.325 --> 01:08:20.219
<v Speaker 1>Kubernetes resources. Ah, Okay. Okay. I misunderstood that.

01:08:20.219 --> 01:08:21.819
<v Speaker 0>So if we run get secrets

01:08:22.540 --> 01:08:24.539
<v Speaker 0>or we do have a Timoni deployment secret.

01:08:25.579 --> 01:08:28.300
<v Speaker 1>Yeah. And it's a custom secret type

01:08:28.540 --> 01:08:29.179
<v Speaker 1>instance.

01:08:32.895 --> 01:08:33.614
<v Speaker 0>Okay.

01:08:34.575 --> 01:08:36.175
<v Speaker 0>And if I look at this, we just

01:08:36.175 --> 01:08:36.814
<v Speaker 0>get

01:08:37.135 --> 01:08:38.335
<v Speaker 0>the instance

01:08:38.655 --> 01:08:40.255
<v Speaker 0>base 64 encoding.

01:08:42.015 --> 01:08:42.655
<v Speaker 0>And this is,

01:08:44.170 --> 01:08:46.410
<v Speaker 0>again, I'm super curious. I always wanna know.

01:08:46.410 --> 01:08:48.090
<v Speaker 0>So I'm just gonna decode it.

01:08:50.090 --> 01:08:51.770
<v Speaker 0>Did I copy too much?

01:08:55.530 --> 01:08:56.010
<v Speaker 0>Again.

01:09:03.804 --> 01:09:04.684
<v Speaker 0>Hey.

01:09:07.484 --> 01:09:08.764
<v Speaker 0>Why is it doing that?

01:09:10.604 --> 01:09:11.244
<v Speaker 0>Copy.

01:09:12.900 --> 01:09:14.740
<v Speaker 0>Do it twice because that always fixes it.

01:09:14.740 --> 01:09:15.140
<v Speaker 0>Right?

01:09:16.340 --> 01:09:17.060
<v Speaker 0>Yeah.

01:09:17.460 --> 01:09:19.460
<v Speaker 0>Oh, no. I think it's actually just decoding

01:09:19.460 --> 01:09:21.779
<v Speaker 0>it in line, isn't it? There we go.

01:09:22.420 --> 01:09:24.020
<v Speaker 0>Yeah. So this is

01:09:24.900 --> 01:09:27.204
<v Speaker 0>a JSON instance, the CR. All right. Okay.

01:09:27.204 --> 01:09:28.644
<v Speaker 0>Got it. So

01:09:33.045 --> 01:09:35.204
<v Speaker 0>this is not a custom resource deployed to

01:09:35.204 --> 01:09:37.045
<v Speaker 0>my cluster because we haven't deployed anything to

01:09:37.045 --> 01:09:39.204
<v Speaker 0>money specific to my cluster. This is just

01:09:39.204 --> 01:09:42.899
<v Speaker 0>a CRD like object that Timoni understands for

01:09:42.899 --> 01:09:45.539
<v Speaker 0>what it has deployed to the cluster. Yeah.

01:09:45.859 --> 01:09:48.260
<v Speaker 1>Cool. Alright. Yeah. I was I was

01:09:49.619 --> 01:09:50.179
<v Speaker 1>I I

01:09:52.435 --> 01:09:54.194
<v Speaker 1>my first instinct was,

01:09:54.515 --> 01:09:56.995
<v Speaker 1>I should have a CRD and CR instead

01:09:56.995 --> 01:09:59.074
<v Speaker 1>of creating a secret. I should create a

01:09:59.074 --> 01:10:00.195
<v Speaker 1>custom resource.

01:10:00.515 --> 01:10:02.114
<v Speaker 1>But that would

01:10:03.235 --> 01:10:05.074
<v Speaker 1>kind of beat the purpose of creating a

01:10:05.074 --> 01:10:07.750
<v Speaker 1>CLI. A CLI should just work. So then

01:10:07.750 --> 01:10:08.710
<v Speaker 1>if you would,

01:10:09.030 --> 01:10:10.790
<v Speaker 1>if I would store this information in a

01:10:10.790 --> 01:10:11.909
<v Speaker 1>custom resource,

01:10:12.150 --> 01:10:15.110
<v Speaker 1>then you have to initialize Timoni on every

01:10:15.110 --> 01:10:17.670
<v Speaker 1>cluster, so register the CRDs and so on.

01:10:19.225 --> 01:10:21.705
<v Speaker 1>So I reserve that for a time where

01:10:21.705 --> 01:10:23.625
<v Speaker 1>there will be a Timoni controller

01:10:25.465 --> 01:10:27.465
<v Speaker 1>serializing this as a JSON and put it

01:10:27.465 --> 01:10:29.625
<v Speaker 1>in a secret for now, I think. It

01:10:29.625 --> 01:10:31.945
<v Speaker 1>does the job, and the UX is better.

01:10:32.330 --> 01:10:35.770
<v Speaker 1>You just don't apply and delete no initialization

01:10:35.770 --> 01:10:38.090
<v Speaker 1>of versioning of CIDs and so on.

01:10:39.370 --> 01:10:41.610
<v Speaker 1>But you can inspect what's inside the secret

01:10:41.610 --> 01:10:42.409
<v Speaker 1>with

01:10:42.570 --> 01:10:45.690
<v Speaker 1>with the inspect command. And it will it

01:10:45.690 --> 01:10:48.970
<v Speaker 1>will show you different things from what serialized

01:10:48.225 --> 01:10:48.864
<v Speaker 1>there.

01:10:50.305 --> 01:10:52.385
<v Speaker 0>Alright. Let's take a look at that then.

01:10:54.305 --> 01:10:55.185
<v Speaker 0>I

01:10:59.425 --> 01:11:01.985
<v Speaker 0>can't copy and paste today whatsoever.

01:11:04.610 --> 01:11:06.610
<v Speaker 0>Alright. So let's remove the namespace just because

01:11:06.610 --> 01:11:08.130
<v Speaker 0>I didn't use one to make my life

01:11:08.130 --> 01:11:09.329
<v Speaker 0>more complicated.

01:11:10.130 --> 01:11:12.130
<v Speaker 0>And we see the digest, the name, the

01:11:12.130 --> 01:11:14.209
<v Speaker 0>repository, and the version that was deployed.

01:11:14.449 --> 01:11:15.090
<v Speaker 1>Nice.

01:11:15.730 --> 01:11:19.090
<v Speaker 1>Yeah. And if you do inspect values

01:11:20.715 --> 01:11:23.995
<v Speaker 1>values for the info, you haven't set any

01:11:23.995 --> 01:11:24.875
<v Speaker 1>values,

01:11:24.875 --> 01:11:28.075
<v Speaker 1>and it gives you the default values.

01:11:29.035 --> 01:11:31.915
<v Speaker 0>Alright. I have put in the module as

01:11:31.915 --> 01:11:32.315
<v Speaker 1>default.

01:11:32.860 --> 01:11:33.900
<v Speaker 1>And

01:11:34.620 --> 01:11:35.900
<v Speaker 1>here is what

01:11:36.860 --> 01:11:37.739
<v Speaker 1>characteristic

01:11:37.739 --> 01:11:39.260
<v Speaker 1>of Timoni modules

01:11:40.380 --> 01:11:42.780
<v Speaker 1>compared to hand charts and everything. It comes

01:11:42.780 --> 01:11:44.940
<v Speaker 1>with a specification

01:11:44.940 --> 01:11:46.540
<v Speaker 1>for container images.

01:11:48.225 --> 01:11:51.185
<v Speaker 1>So Timoni is aware of what images are

01:11:51.185 --> 01:11:52.144
<v Speaker 1>in a module,

01:11:52.625 --> 01:11:55.185
<v Speaker 1>what tags are there, and if you specify

01:11:55.185 --> 01:11:57.665
<v Speaker 1>digest, it will use digest everywhere.

01:11:57.665 --> 01:11:58.304
<v Speaker 1>And

01:11:59.344 --> 01:12:02.090
<v Speaker 1>the vet command of a module will actually

01:12:02.090 --> 01:12:03.289
<v Speaker 1>tell modulators,

01:12:03.289 --> 01:12:05.689
<v Speaker 1>hey, you should set the digest. It's empty.

01:12:07.770 --> 01:12:10.250
<v Speaker 1>And you can also do, for example, Timoni

01:12:10.250 --> 01:12:11.209
<v Speaker 1>status

01:12:11.369 --> 01:12:12.090
<v Speaker 1>for the info.

01:12:18.105 --> 01:12:20.505
<v Speaker 1>And this will also list the images. So

01:12:20.505 --> 01:12:22.585
<v Speaker 1>when you do a status, it's about, Okay,

01:12:22.585 --> 01:12:25.065
<v Speaker 1>what things I have deployed? Is my deployment

01:12:25.065 --> 01:12:28.024
<v Speaker 1>available? Whatever, whatever. This is very different from

01:12:30.400 --> 01:12:33.680
<v Speaker 1>For Helm, a status of a release is

01:12:34.080 --> 01:12:34.960
<v Speaker 1>stored

01:12:35.120 --> 01:12:38.800
<v Speaker 1>after the upgrade or install is done.

01:12:39.360 --> 01:12:42.320
<v Speaker 1>Timoni does not do that because I think

01:12:42.480 --> 01:12:43.600
<v Speaker 1>an app is

01:12:44.095 --> 01:12:46.575
<v Speaker 1>alive on the cluster. It can fail after

01:12:46.575 --> 01:12:47.534
<v Speaker 1>an upgrade.

01:12:47.775 --> 01:12:50.094
<v Speaker 1>So what Timoni status does

01:12:50.575 --> 01:12:53.455
<v Speaker 1>is it queries the live cluster and does

01:12:53.455 --> 01:12:55.775
<v Speaker 1>a health check for everything at this moment.

01:12:56.449 --> 01:12:58.850
<v Speaker 1>Even if the upgrade worked like one hour

01:12:58.850 --> 01:13:01.489
<v Speaker 1>ago, maybe now you are out of capacity

01:13:01.969 --> 01:13:04.770
<v Speaker 1>and the things that you thought are ready

01:13:04.770 --> 01:13:07.170
<v Speaker 1>at upgrade time, now they are failing. So

01:13:07.170 --> 01:13:09.090
<v Speaker 1>status is a live command

01:13:09.875 --> 01:13:12.755
<v Speaker 1>that goes through every single resource and

01:13:12.995 --> 01:13:15.875
<v Speaker 1>uses a thing from the Kubernetes project, which

01:13:15.875 --> 01:13:17.394
<v Speaker 1>is called kstatus.

01:13:17.715 --> 01:13:19.875
<v Speaker 1>We also use it in Flux,

01:13:19.955 --> 01:13:22.755
<v Speaker 1>which knows how to help check

01:13:24.980 --> 01:13:27.460
<v Speaker 1>built in resources like deployment spots and so

01:13:27.460 --> 01:13:30.420
<v Speaker 1>on, but also custom resources which have already

01:13:30.420 --> 01:13:31.700
<v Speaker 1>status condition.

01:13:33.780 --> 01:13:34.900
<v Speaker 0>Okay.

01:13:34.900 --> 01:13:35.460
<v Speaker 0>So

01:13:36.260 --> 01:13:38.340
<v Speaker 0>this tells us the deployment is available in

01:13:38.340 --> 01:13:40.405
<v Speaker 0>the replicas as one. If I change the

01:13:40.405 --> 01:13:42.324
<v Speaker 0>replicas on the deployment to two, does it

01:13:42.324 --> 01:13:44.485
<v Speaker 0>just say deployment is available replicas two, or

01:13:44.485 --> 01:13:46.725
<v Speaker 0>does it tell us that there's draft from

01:13:46.725 --> 01:13:47.844
<v Speaker 0>what we applied?

01:13:49.364 --> 01:13:50.405
<v Speaker 1>Let's

01:13:50.405 --> 01:13:51.364
<v Speaker 1>configure

01:13:51.525 --> 01:13:53.765
<v Speaker 1>now podinfo and make it

01:13:54.630 --> 01:13:57.590
<v Speaker 1>change the configuration for it from the

01:13:58.630 --> 01:14:00.710
<v Speaker 1>Oh, you want to change it here? Yeah,

01:14:00.710 --> 01:14:02.469
<v Speaker 1>of course. It will just delete

01:14:02.550 --> 01:14:03.829
<v Speaker 1>replicas too.

01:14:04.630 --> 01:14:06.070
<v Speaker 1>Right? Status does not

01:14:07.045 --> 01:14:09.925
<v Speaker 1>do a dry run or Alright. Okay. K.

01:14:09.925 --> 01:14:11.684
<v Speaker 0>That's what I was curious. Okay. Yeah. Yeah.

01:14:11.684 --> 01:14:13.204
<v Speaker 0>Got it. Alright.

01:14:14.164 --> 01:14:14.804
<v Speaker 0>Sweet.

01:14:15.204 --> 01:14:16.405
<v Speaker 0>Okay. So

01:14:17.364 --> 01:14:19.605
<v Speaker 0>where's our status command? We've already kind of

01:14:19.605 --> 01:14:21.440
<v Speaker 0>done that now. So then we have the

01:14:21.440 --> 01:14:24.000
<v Speaker 0>ability to begin to configure our module by

01:14:24.000 --> 01:14:26.559
<v Speaker 0>providing our own queue value.

01:14:27.120 --> 01:14:29.840
<v Speaker 0>So to do that, we have a queue

01:14:30.800 --> 01:14:33.600
<v Speaker 0>blob like this, and then we're just running

01:14:33.600 --> 01:14:36.065
<v Speaker 0>our apply command again. However, we can specify

01:14:36.065 --> 01:14:37.745
<v Speaker 0>dash dash values and point it to a

01:14:37.745 --> 01:14:38.785
<v Speaker 0>CUE file.

01:14:39.265 --> 01:14:39.825
<v Speaker 0>So

01:14:41.025 --> 01:14:42.705
<v Speaker 0>greater values on CUE.

01:14:43.665 --> 01:14:44.225
<v Speaker 0>And

01:14:47.025 --> 01:14:47.985
<v Speaker 0>we can

01:14:49.050 --> 01:14:50.570
<v Speaker 0>see what's going on here. So this is

01:14:50.570 --> 01:14:53.929
<v Speaker 0>configured under resource requests, CPU and memory,

01:14:54.250 --> 01:14:55.929
<v Speaker 0>and then setting the limits to be the

01:14:55.929 --> 01:14:58.809
<v Speaker 0>exact same. I'm assuming we could also do

01:14:58.809 --> 01:14:59.690
<v Speaker 0>replicas

01:14:59.690 --> 01:15:00.730
<v Speaker 0>three like so.

01:15:02.485 --> 01:15:04.165
<v Speaker 1>You have to look in the readme. I

01:15:04.165 --> 01:15:05.765
<v Speaker 1>don't know if it's replicas.

01:15:08.165 --> 01:15:10.245
<v Speaker 0>Is that am I jumping ahead of something

01:15:10.245 --> 01:15:12.005
<v Speaker 0>that's already in this? No.

01:15:12.645 --> 01:15:13.685
<v Speaker 0>No. No. No.

01:15:14.325 --> 01:15:16.085
<v Speaker 0>Alright. Well, I mean, even if I break

01:15:16.085 --> 01:15:18.159
<v Speaker 0>it, it's fine because Timoni will tell me,

01:15:18.159 --> 01:15:19.360
<v Speaker 0>right? Yeah.

01:15:20.239 --> 01:15:22.159
<v Speaker 0>So I can just say we wanna run

01:15:22.159 --> 01:15:24.400
<v Speaker 0>a test, let's do a server side, apply

01:15:24.400 --> 01:15:26.639
<v Speaker 0>with a test and specify the values to

01:15:26.639 --> 01:15:27.360
<v Speaker 0>be my values.

01:15:32.445 --> 01:15:34.765
<v Speaker 0>So we've got a value change. The metadata

01:15:34.765 --> 01:15:37.565
<v Speaker 0>generation obviously changed. The spec replicas changed just

01:15:37.565 --> 01:15:39.165
<v Speaker 0>like I was hoping it would.

01:15:39.485 --> 01:15:41.885
<v Speaker 0>And we get this as a resources here.

01:15:41.885 --> 01:15:44.440
<v Speaker 0>I love this visual output as well. This

01:15:44.440 --> 01:15:47.400
<v Speaker 0>is very clear exactly what is changing. And

01:15:47.400 --> 01:15:49.400
<v Speaker 0>this is really difficult to get with other

01:15:49.400 --> 01:15:51.719
<v Speaker 0>tools in this space. So that's very nice.

01:15:52.200 --> 01:15:55.800
<v Speaker 1>Hey. Did you actually saved value skew? I

01:15:55.800 --> 01:15:56.360
<v Speaker 0>did. Yeah.

01:16:03.445 --> 01:16:04.965
<v Speaker 0>Why? What can what

01:16:05.605 --> 01:16:06.885
<v Speaker 0>why were you curious?

01:16:09.445 --> 01:16:09.845
<v Speaker 1>Okay.

01:16:10.580 --> 01:16:13.460
<v Speaker 1>Yeah. I I didn't see save it. Okay.

01:16:13.540 --> 01:16:15.380
<v Speaker 1>You can apply

01:16:15.380 --> 01:16:16.500
<v Speaker 1>now. Yes.

01:16:19.940 --> 01:16:20.980
<v Speaker 0>Worse that could happen.

01:16:22.995 --> 01:16:23.715
<v Speaker 0>Oh,

01:16:23.875 --> 01:16:25.875
<v Speaker 0>no. I forgot my my okay. I shouldn't

01:16:25.875 --> 01:16:26.835
<v Speaker 0>have removed

01:16:27.315 --> 01:16:28.594
<v Speaker 0>It's myself there.

01:16:31.635 --> 01:16:32.435
<v Speaker 0>Sweet.

01:16:32.595 --> 01:16:34.435
<v Speaker 0>And now it's waiting for our three pods

01:16:34.435 --> 01:16:35.235
<v Speaker 0>to become ready.

01:16:39.159 --> 01:16:39.879
<v Speaker 1>Yep.

01:16:40.119 --> 01:16:40.760
<v Speaker 1>And

01:16:41.320 --> 01:16:42.119
<v Speaker 1>if you

01:16:42.760 --> 01:16:44.519
<v Speaker 1>stop this and you

01:16:45.079 --> 01:16:48.360
<v Speaker 1>do a status, the status should say progressing

01:16:48.360 --> 01:16:50.439
<v Speaker 1>in rollout gives you more

01:16:51.239 --> 01:16:52.920
<v Speaker 1>details basically

01:16:53.435 --> 01:16:54.955
<v Speaker 1>about what's happening.

01:16:56.075 --> 01:16:58.475
<v Speaker 0>Right. Let's do that. So I'll make this

01:16:58.475 --> 01:17:00.315
<v Speaker 0>a bit more challenging for the cluster.

01:17:01.915 --> 01:17:03.595
<v Speaker 0>We'll do the apply.

01:17:06.400 --> 01:17:08.480
<v Speaker 0>I think get to this point and then

01:17:08.480 --> 01:17:09.920
<v Speaker 0>run our status.

01:17:12.320 --> 01:17:14.960
<v Speaker 0>Tounding enough because it did it already.

01:17:16.560 --> 01:17:18.480
<v Speaker 1>Yeah. Put info is very fast. It's tiny.

01:17:19.655 --> 01:17:21.815
<v Speaker 0>Plus it's a local Kubernetes customer where damage

01:17:21.815 --> 01:17:23.575
<v Speaker 0>is already built. So really, we're not gonna

01:17:23.415 --> 01:17:26.295
<v Speaker 0>They need to scan the single node. Yeah.

01:17:26.375 --> 01:17:28.535
<v Speaker 0>Alright. Well, because I always

01:17:28.695 --> 01:17:31.095
<v Speaker 0>am perpetually

01:17:31.095 --> 01:17:31.495
<v Speaker 0>curious,

01:17:32.990 --> 01:17:36.110
<v Speaker 0>Let's do something else. Right? So

01:17:36.910 --> 01:17:38.110
<v Speaker 0>I don't know if it's in the the

01:17:38.110 --> 01:17:39.710
<v Speaker 0>documentation here. I don't want us to drift

01:17:39.710 --> 01:17:41.630
<v Speaker 0>off course too much. Right? But if I

01:17:41.630 --> 01:17:43.230
<v Speaker 0>want to overwrite the image that is used

01:17:43.230 --> 01:17:45.070
<v Speaker 0>for pod info, how would I do that?

01:17:45.870 --> 01:17:47.965
<v Speaker 0>Can I do that for the values? Of

01:17:47.965 --> 01:17:49.324
<v Speaker 1>course. Alright.

01:17:50.045 --> 01:17:52.684
<v Speaker 0>So walk me through that because

01:17:53.005 --> 01:17:55.644
<v Speaker 0>I don't know. Do I just do containers?

01:17:56.525 --> 01:17:57.324
<v Speaker 0>No.

01:17:57.805 --> 01:17:58.364
<v Speaker 0>Alright.

01:17:59.005 --> 01:18:01.405
<v Speaker 0>No. Let's

01:18:01.405 --> 01:18:02.844
<v Speaker 1>look at the default values.

01:18:05.590 --> 01:18:07.349
<v Speaker 0>Okay. We got that from

01:18:07.750 --> 01:18:10.789
<v Speaker 0>inspect values and specter. Right? Yeah.

01:18:12.230 --> 01:18:15.270
<v Speaker 0>Okay. I gotcha. So we can say

01:18:15.844 --> 01:18:16.804
<v Speaker 0>image

01:18:17.284 --> 01:18:19.125
<v Speaker 0>repose in fact, let's change the image tag

01:18:19.125 --> 01:18:21.364
<v Speaker 0>to be a value that doesn't exist. Right?

01:18:24.725 --> 01:18:25.445
<v Speaker 0>So image

01:18:25.925 --> 01:18:26.885
<v Speaker 0>tag

01:18:27.125 --> 01:18:28.005
<v Speaker 0>v

01:18:28.005 --> 01:18:30.989
<v Speaker 0>twelve point one point two point three. Okay,

01:18:30.989 --> 01:18:31.949
<v Speaker 0>so it has to be

01:18:36.590 --> 01:18:38.109
<v Speaker 0>I suspect here,

01:18:39.710 --> 01:18:41.309
<v Speaker 0>let's do it at first, let's not suspect

01:18:41.309 --> 01:18:42.030
<v Speaker 0>anything.

01:18:42.590 --> 01:18:44.269
<v Speaker 0>Once I update the image and it's gonna

01:18:44.269 --> 01:18:45.149
<v Speaker 0>downgrade

01:18:45.150 --> 01:18:47.469
<v Speaker 0>our

01:18:45.965 --> 01:18:48.445
<v Speaker 0>replicas back to two. And now we can

01:18:48.445 --> 01:18:49.644
<v Speaker 0>do an apply,

01:18:50.684 --> 01:18:51.964
<v Speaker 0>set the test.

01:18:53.804 --> 01:18:55.644
<v Speaker 0>This is gonna say that the image can

01:18:55.644 --> 01:18:57.804
<v Speaker 0>come, but I wanna see this from

01:18:58.684 --> 01:18:59.405
<v Speaker 0>it is

01:19:01.110 --> 01:19:03.510
<v Speaker 0>an m progress pending termination.

01:19:04.870 --> 01:19:06.630
<v Speaker 0>Can I do a status? Is there, like,

01:19:06.630 --> 01:19:08.150
<v Speaker 0>a watch or something on this?

01:19:12.390 --> 01:19:14.310
<v Speaker 1>No. The the apply would

01:19:15.045 --> 01:19:17.845
<v Speaker 1>would have waited and report that

01:19:18.325 --> 01:19:19.845
<v Speaker 1>it can move forward.

01:19:20.565 --> 01:19:23.045
<v Speaker 1>And this is not Timoni's

01:19:23.045 --> 01:19:25.125
<v Speaker 1>future. As I said, it's case status, which

01:19:25.125 --> 01:19:25.925
<v Speaker 1>determines, oh,

01:19:26.870 --> 01:19:30.710
<v Speaker 1>the progress deadline for Podinfo is sixty seconds.

01:19:30.710 --> 01:19:32.950
<v Speaker 1>So after one need to say, I'm not

01:19:32.950 --> 01:19:35.429
<v Speaker 1>waiting anymore because, you know, there

01:19:36.790 --> 01:19:39.670
<v Speaker 1>isn't much to to wait for, it's it's

01:19:39.670 --> 01:19:41.110
<v Speaker 1>gone. It can move forward.

01:19:42.715 --> 01:19:44.315
<v Speaker 1>And it yeah, it basically

01:19:44.875 --> 01:19:47.275
<v Speaker 1>depends on the progress deadline that you set

01:19:47.275 --> 01:19:50.875
<v Speaker 1>on your deployments. Right? Also, Timoni apply has

01:19:50.875 --> 01:19:52.235
<v Speaker 1>a timeout

01:19:53.114 --> 01:19:53.594
<v Speaker 1>flag.

01:19:55.010 --> 01:19:56.850
<v Speaker 1>I think I set the default to five

01:19:56.850 --> 01:19:59.730
<v Speaker 1>minutes. But if you are you're deploying

01:19:59.890 --> 01:20:02.290
<v Speaker 1>stateful sets that are taking half hour, you

01:20:02.290 --> 01:20:05.010
<v Speaker 1>should set timeout half hour and just wait

01:20:05.010 --> 01:20:05.890
<v Speaker 1>for it. Right? It's

01:20:06.610 --> 01:20:08.864
<v Speaker 0>Yeah. I guess what I was curious about

01:20:08.864 --> 01:20:10.385
<v Speaker 0>is is this going to surface the image

01:20:10.385 --> 01:20:12.864
<v Speaker 0>peel back off? But I

01:20:14.065 --> 01:20:14.945
<v Speaker 0>guess not.

01:20:15.985 --> 01:20:17.024
<v Speaker 1>Not because

01:20:17.505 --> 01:20:20.545
<v Speaker 1>for now, it's because the replica set,

01:20:21.230 --> 01:20:24.110
<v Speaker 1>the deployment has not yet given up on

01:20:24.110 --> 01:20:26.270
<v Speaker 1>the replica set. Okay.

01:20:26.270 --> 01:20:28.750
<v Speaker 1>Right? It's initial back off.

01:20:29.070 --> 01:20:30.750
<v Speaker 1>So it does a

01:20:31.230 --> 01:20:32.989
<v Speaker 1>back off for, I think

01:20:33.755 --> 01:20:36.474
<v Speaker 1>yeah. It also depends on what your deadline

01:20:36.474 --> 01:20:38.395
<v Speaker 1>is set in a deployment. I think I've

01:20:38.395 --> 01:20:40.875
<v Speaker 1>set it to sixty seconds or ten ten

01:20:40.875 --> 01:20:42.474
<v Speaker 1>minutes for Podinfo.

01:20:42.635 --> 01:20:44.875
<v Speaker 1>Yeah. It's okay. I'll stop taking this off

01:20:44.875 --> 01:20:47.275
<v Speaker 0>course with my my sassy kudos. No. It's

01:20:47.275 --> 01:20:47.914
<v Speaker 0>great.

01:20:48.395 --> 01:20:49.920
<v Speaker 0>So I I set it back. I removed

01:20:49.920 --> 01:20:52.000
<v Speaker 0>it. I removed my customization,

01:20:53.600 --> 01:20:56.000
<v Speaker 0>and we're now running the standard version. So

01:20:56.239 --> 01:20:57.680
<v Speaker 0>we can run through the rest of the

01:20:57.680 --> 01:20:59.520
<v Speaker 0>tutorial, see if there's any questions from the

01:20:59.520 --> 01:21:01.200
<v Speaker 0>audience, and then I can go roll, give

01:21:01.200 --> 01:21:02.800
<v Speaker 0>you one, and say, okay. Oh, you can

01:21:02.800 --> 01:21:03.920
<v Speaker 1>you can do something

01:21:05.205 --> 01:21:07.365
<v Speaker 1>interesting here. Let's

01:21:07.365 --> 01:21:10.085
<v Speaker 1>see with Helm. If you have Helm values,

01:21:10.085 --> 01:21:12.725
<v Speaker 1>you can set some random thing that doesn't

01:21:12.725 --> 01:21:14.965
<v Speaker 1>exist in the chart, then Helm will apply

01:21:14.965 --> 01:21:16.005
<v Speaker 1>it, right?

01:21:16.970 --> 01:21:18.010
<v Speaker 1>Let's specify

01:21:18.810 --> 01:21:21.610
<v Speaker 1>a random field in the values that's not

01:21:21.610 --> 01:21:23.050
<v Speaker 1>in the module at all.

01:21:24.410 --> 01:21:24.970
<v Speaker 0>All right.

01:21:31.165 --> 01:21:31.805
<v Speaker 1>Okay.

01:21:34.845 --> 01:21:36.125
<v Speaker 0>Let's do this.

01:21:40.285 --> 01:21:42.205
<v Speaker 0>Ah, values Rawkode field not allowed.

01:21:43.400 --> 01:21:44.119
<v Speaker 0>So

01:21:46.040 --> 01:21:49.080
<v Speaker 1>what these things does is basically you as

01:21:49.080 --> 01:21:49.719
<v Speaker 1>the

01:21:50.440 --> 01:21:52.520
<v Speaker 1>owner of the app, the author of the

01:21:52.520 --> 01:21:53.239
<v Speaker 1>module,

01:21:53.480 --> 01:21:54.919
<v Speaker 1>when you define

01:21:55.000 --> 01:21:56.039
<v Speaker 1>what things

01:21:56.360 --> 01:21:57.560
<v Speaker 1>end users

01:21:58.245 --> 01:22:01.445
<v Speaker 1>can fiddle with with your app, the options,

01:22:01.685 --> 01:22:03.685
<v Speaker 1>also the users have this

01:22:05.045 --> 01:22:06.725
<v Speaker 1>error in front of them. Hey, you are

01:22:06.725 --> 01:22:09.365
<v Speaker 1>setting something that wasn't configured

01:22:10.179 --> 01:22:14.020
<v Speaker 1>is not allowed because that type of configuration

01:22:14.020 --> 01:22:17.059
<v Speaker 1>is not something that the module knows about.

01:22:17.539 --> 01:22:20.340
<v Speaker 1>So there is no point in going forward.

01:22:21.059 --> 01:22:24.355
<v Speaker 1>Other tools like Customize or whatever, specify a

01:22:24.355 --> 01:22:26.594
<v Speaker 1>patch to something that doesn't exist, to just

01:22:26.594 --> 01:22:29.074
<v Speaker 1>move and do its thing.

01:22:29.955 --> 01:22:30.994
<v Speaker 1>What I think

01:22:31.395 --> 01:22:33.235
<v Speaker 1>when you distribute applications,

01:22:33.395 --> 01:22:34.114
<v Speaker 1>you should

01:22:34.530 --> 01:22:35.969
<v Speaker 1>you know, ensure

01:22:36.130 --> 01:22:38.930
<v Speaker 1>correctness of the configuration, not let the user

01:22:38.930 --> 01:22:41.570
<v Speaker 1>think it has set something and it has

01:22:41.570 --> 01:22:44.530
<v Speaker 1>actually changed, while in fact there's not even

01:22:44.530 --> 01:22:46.610
<v Speaker 1>allowed. And that saves you from typos,

01:22:47.175 --> 01:22:48.375
<v Speaker 1>bad indentation,

01:22:48.375 --> 01:22:50.295
<v Speaker 1>and all of that. This is the power

01:22:50.295 --> 01:22:52.855
<v Speaker 1>of CUE in a way. It's Timoni just

01:22:52.855 --> 01:22:53.335
<v Speaker 1>surface

01:22:54.135 --> 01:22:57.414
<v Speaker 1>surfaces that as errors be applied.

01:22:58.695 --> 01:22:59.094
<v Speaker 0>Nice.

01:22:59.540 --> 01:23:01.139
<v Speaker 0>So I noticed that

01:23:01.620 --> 01:23:03.460
<v Speaker 0>nothing in my directory at this point in

01:23:03.460 --> 01:23:06.420
<v Speaker 0>time, because we're working with an OCI artifact.

01:23:07.860 --> 01:23:08.980
<v Speaker 0>Like, these

01:23:09.460 --> 01:23:11.619
<v Speaker 0>you know, we we can use the status

01:23:11.940 --> 01:23:15.664
<v Speaker 0>and the values command. Right? Inspect values. And

01:23:15.664 --> 01:23:17.184
<v Speaker 0>we can see what these values are.

01:23:17.585 --> 01:23:19.905
<v Speaker 0>It's it's cached on a disk somewhere, like

01:23:19.905 --> 01:23:21.744
<v Speaker 0>the queue definitions that people can look at

01:23:21.744 --> 01:23:23.344
<v Speaker 0>if they want to, or is that where

01:23:23.344 --> 01:23:24.945
<v Speaker 0>the bundles come in and where things start

01:23:24.945 --> 01:23:27.184
<v Speaker 0>to get vendored into package or etcetera?

01:23:27.530 --> 01:23:28.410
<v Speaker 0>If

01:23:29.610 --> 01:23:31.370
<v Speaker 1>you want to see the default values, you

01:23:31.370 --> 01:23:31.930
<v Speaker 1>say?

01:23:32.170 --> 01:23:34.330
<v Speaker 0>Well, yeah. If I wanted to

01:23:36.410 --> 01:23:38.170
<v Speaker 0>see the actual definition

01:23:38.570 --> 01:23:40.090
<v Speaker 0>for this to see

01:23:41.210 --> 01:23:42.090
<v Speaker 0>what is allowed.

01:23:43.285 --> 01:23:46.804
<v Speaker 0>Yeah. Or you can do Timoni mod pool.

01:23:50.805 --> 01:23:52.324
<v Speaker 0>And I'm gonna need that

01:23:53.125 --> 01:23:53.764
<v Speaker 0>string.

01:23:54.325 --> 01:23:54.725
<v Speaker 0>Yep.

01:23:58.440 --> 01:23:59.880
<v Speaker 0>Oh, I put path.

01:24:02.760 --> 01:24:03.880
<v Speaker 0>Yes there.

01:24:05.880 --> 01:24:06.600
<v Speaker 0>It's a

01:24:08.199 --> 01:24:09.639
<v Speaker 1>Oh, yeah. It's okay.

01:24:10.360 --> 01:24:10.840
<v Speaker 0>Help.

01:24:12.335 --> 01:24:14.175
<v Speaker 0>Did I set the output path?

01:24:16.815 --> 01:24:17.215
<v Speaker 0>Output.

01:24:17.775 --> 01:24:18.414
<v Speaker 0>Okay.

01:24:21.455 --> 01:24:23.695
<v Speaker 1>It should work with minus one.

01:24:25.790 --> 01:24:27.869
<v Speaker 0>Because the directory just has to exist.

01:24:30.110 --> 01:24:31.310
<v Speaker 1>If you put

01:24:32.590 --> 01:24:34.590
<v Speaker 0>Ah, there we go. Yeah. The directory just

01:24:34.590 --> 01:24:35.389
<v Speaker 0>have to exist.

01:24:37.550 --> 01:24:39.915
<v Speaker 1>Yeah. This actually someone

01:24:40.155 --> 01:24:42.795
<v Speaker 1>opened a pull request today to fix this.

01:24:43.355 --> 01:24:45.435
<v Speaker 1>You can create a directory if it doesn't

01:24:45.435 --> 01:24:46.155
<v Speaker 1>exist.

01:24:47.755 --> 01:24:48.715
<v Speaker 1>Right? So

01:24:49.755 --> 01:24:52.490
<v Speaker 1>now you can see the source. And usually

01:24:52.490 --> 01:24:54.810
<v Speaker 1>what you should do is look at the

01:24:54.810 --> 01:24:55.610
<v Speaker 1>Readme

01:24:55.770 --> 01:24:58.410
<v Speaker 1>markdown. We don't need Readme's.

01:24:58.410 --> 01:25:00.810
<v Speaker 1>Right? You don't need Readme's.

01:25:01.210 --> 01:25:01.690
<v Speaker 1>There

01:25:02.730 --> 01:25:04.810
<v Speaker 1>is a table there, like for hand charts

01:25:04.810 --> 01:25:07.050
<v Speaker 1>with all the possible configurations

01:25:07.825 --> 01:25:08.705
<v Speaker 1>and whatever.

01:25:09.425 --> 01:25:11.745
<v Speaker 1>But let's say you don't want to look

01:25:11.745 --> 01:25:14.545
<v Speaker 1>at it. It means you have two things

01:25:15.025 --> 01:25:16.545
<v Speaker 1>where you can

01:25:16.705 --> 01:25:19.265
<v Speaker 1>see how the values are. So the default

01:25:19.265 --> 01:25:22.305
<v Speaker 1>values are in values. Queuing the root of

01:25:22.305 --> 01:25:23.860
<v Speaker 1>the module. Yep.

01:25:24.900 --> 01:25:26.739
<v Speaker 1>And here are just images

01:25:26.820 --> 01:25:27.619
<v Speaker 1>normally.

01:25:28.820 --> 01:25:30.980
<v Speaker 1>If you want to see the whole schema

01:25:30.980 --> 01:25:34.100
<v Speaker 1>of the values, you go templates config dot

01:25:34.100 --> 01:25:34.420
<v Speaker 1>queue.

01:25:35.844 --> 01:25:38.405
<v Speaker 1>It's the first file. And here you see

01:25:38.405 --> 01:25:40.324
<v Speaker 1>all the things that you can set with

01:25:40.324 --> 01:25:41.445
<v Speaker 1>some defaults,

01:25:41.925 --> 01:25:43.044
<v Speaker 1>with types.

01:25:44.085 --> 01:25:46.005
<v Speaker 1>Right? So you have affinity,

01:25:46.005 --> 01:25:48.005
<v Speaker 1>you have pull secrets, all the things that

01:25:48.005 --> 01:25:50.005
<v Speaker 1>you would expect from, I don't know,

01:25:51.679 --> 01:25:54.400
<v Speaker 1>Kubernetes is most relevant. Right? You need to

01:25:54.400 --> 01:25:56.880
<v Speaker 1>specify all things and understand all things about

01:25:56.880 --> 01:25:57.439
<v Speaker 1>it.

01:25:59.600 --> 01:26:02.000
<v Speaker 1>So yeah, I don't think this should actually

01:26:02.000 --> 01:26:04.800
<v Speaker 1>be the way people should write modules.

01:26:05.815 --> 01:26:06.774
<v Speaker 1>I think

01:26:07.175 --> 01:26:08.215
<v Speaker 1>you should expose

01:26:08.614 --> 01:26:09.494
<v Speaker 1>you should

01:26:10.054 --> 01:26:12.054
<v Speaker 1>put in there good defaults,

01:26:12.614 --> 01:26:15.254
<v Speaker 1>and they should just toggle some

01:26:15.494 --> 01:26:16.215
<v Speaker 1>things,

01:26:16.295 --> 01:26:19.255
<v Speaker 1>like auto scaling enabled. And all default should

01:26:19.255 --> 01:26:21.170
<v Speaker 1>be good. I don't know. 99

01:26:21.170 --> 01:26:22.690
<v Speaker 1>CPU or whatever.

01:26:23.250 --> 01:26:23.409
<v Speaker 1>Would

01:26:25.170 --> 01:26:27.090
<v Speaker 1>I think the fact that we

01:26:27.330 --> 01:26:28.289
<v Speaker 1>ship

01:26:29.330 --> 01:26:30.769
<v Speaker 1>app configurations

01:26:30.850 --> 01:26:31.409
<v Speaker 1>without

01:26:31.875 --> 01:26:32.994
<v Speaker 1>good defaults,

01:26:33.955 --> 01:26:36.115
<v Speaker 1>people are now accustomed to do a deep

01:26:36.115 --> 01:26:37.315
<v Speaker 1>dive there and

01:26:38.115 --> 01:26:40.435
<v Speaker 1>set half of the fields in all the

01:26:40.435 --> 01:26:42.195
<v Speaker 1>Kubernetes things, it's like

01:26:42.995 --> 01:26:45.155
<v Speaker 1>we put too much pressure on the engine.

01:26:45.155 --> 01:26:47.955
<v Speaker 1>We should at least have a default

01:26:48.170 --> 01:26:51.610
<v Speaker 1>secure first configuration with all things in there

01:26:51.610 --> 01:26:54.890
<v Speaker 1>or production configuration and so on. And only

01:26:54.890 --> 01:26:56.250
<v Speaker 1>request people

01:26:56.570 --> 01:26:59.290
<v Speaker 1>what they really need to add as inputs,

01:26:59.290 --> 01:26:59.770
<v Speaker 1>passwords,

01:27:00.330 --> 01:27:01.210
<v Speaker 1>certificates,

01:27:01.210 --> 01:27:02.010
<v Speaker 1>all these things.

01:27:04.745 --> 01:27:07.144
<v Speaker 1>But yeah, the podinfo

01:27:07.225 --> 01:27:08.824
<v Speaker 1>Timoni module is

01:27:09.304 --> 01:27:11.624
<v Speaker 1>a replica of the podinfo

01:27:11.864 --> 01:27:12.664
<v Speaker 1>chart.

01:27:12.665 --> 01:27:14.824
<v Speaker 1>And that's why it doesn't have all defaults.

01:27:14.824 --> 01:27:16.905
<v Speaker 1>But I wanted to have this exercise like,

01:27:16.905 --> 01:27:19.200
<v Speaker 1>Okay, I have this M chart. It's been

01:27:19.200 --> 01:27:21.360
<v Speaker 1>used by, don't know. It has like millions

01:27:21.360 --> 01:27:24.159
<v Speaker 1>deployments. Let me just replicate it and see

01:27:24.400 --> 01:27:27.920
<v Speaker 1>how I can do this with Timoni.

01:27:27.920 --> 01:27:28.559
<v Speaker 1>Yeah.

01:27:29.840 --> 01:27:32.425
<v Speaker 0>Yeah. So let me clarify my thinking then

01:27:32.425 --> 01:27:34.585
<v Speaker 0>just to provide a bit more context about

01:27:34.585 --> 01:27:36.585
<v Speaker 0>why I was asking this. There's two reasons

01:27:36.585 --> 01:27:38.185
<v Speaker 0>I was asking this. Right? Because I think

01:27:38.185 --> 01:27:40.985
<v Speaker 0>it really surfaces why Timoni is so powerful

01:27:40.985 --> 01:27:42.425
<v Speaker 0>and so good. Right? Is one,

01:27:42.824 --> 01:27:45.305
<v Speaker 0>the CUE team are working on a language

01:27:45.305 --> 01:27:48.050
<v Speaker 0>server protocol, an LSP. So the author and

01:27:48.050 --> 01:27:49.969
<v Speaker 0>experience can become a lot better when you

01:27:49.969 --> 01:27:50.610
<v Speaker 0>pull

01:27:51.090 --> 01:27:53.409
<v Speaker 0>the module locally or vendor it into your

01:27:53.409 --> 01:27:54.050
<v Speaker 0>bundle.

01:27:54.449 --> 01:27:55.730
<v Speaker 0>Because then when you're in Versus Code, it

01:27:55.730 --> 01:27:58.050
<v Speaker 0>can auto complete all the types based on

01:27:58.535 --> 01:28:02.054
<v Speaker 0>the CUE definitions generated from the Timoni,

01:28:02.135 --> 01:28:03.655
<v Speaker 0>I can't remember the command. I think it

01:28:03.655 --> 01:28:05.095
<v Speaker 0>was just vendor CRD,

01:28:05.095 --> 01:28:06.614
<v Speaker 0>right? Which is very nice.

01:28:07.575 --> 01:28:09.815
<v Speaker 0>But also one of the superpowers now that

01:28:09.815 --> 01:28:11.815
<v Speaker 0>we're invested into the CUE

01:28:13.210 --> 01:28:14.010
<v Speaker 0>ecosystem

01:28:14.090 --> 01:28:16.810
<v Speaker 0>programme community, whatever you wanna call that there

01:28:16.970 --> 01:28:18.890
<v Speaker 0>is that as we start to build out

01:28:18.890 --> 01:28:21.449
<v Speaker 0>Timoni bundles that consume multiple

01:28:21.610 --> 01:28:23.290
<v Speaker 0>modules from across

01:28:24.085 --> 01:28:26.564
<v Speaker 0>anywhere, right? Where we're in a position here.

01:28:26.965 --> 01:28:28.724
<v Speaker 0>We can now use CUE and say, well,

01:28:28.724 --> 01:28:30.004
<v Speaker 0>our org

01:28:30.885 --> 01:28:32.724
<v Speaker 0>pod security policy,

01:28:33.764 --> 01:28:35.364
<v Speaker 0>maybe you just wanna make this

01:28:35.844 --> 01:28:39.580
<v Speaker 0>value like this, Could be blah blah blah,

01:28:39.580 --> 01:28:41.660
<v Speaker 0>not that important. And then as we consume

01:28:41.660 --> 01:28:43.980
<v Speaker 0>other modules, we can then just say pod

01:28:43.980 --> 01:28:44.860
<v Speaker 0>security

01:28:45.180 --> 01:28:45.980
<v Speaker 0>policy.

01:28:46.620 --> 01:28:48.220
<v Speaker 0>It's our org one, but when you need

01:28:48.220 --> 01:28:50.780
<v Speaker 0>to override it, you can do that. So

01:28:50.405 --> 01:28:52.085
<v Speaker 0>you don't have like one of the huge

01:28:52.085 --> 01:28:54.245
<v Speaker 0>problems with Helm is trying to apply policy

01:28:54.245 --> 01:28:55.045
<v Speaker 0>across

01:28:56.245 --> 01:28:57.685
<v Speaker 0>whale amount of

01:28:58.485 --> 01:29:01.445
<v Speaker 0>third party external charts for deploying Postgres,

01:29:01.445 --> 01:29:04.805
<v Speaker 0>MariaDB, MongoDB, operators here, controllers here,

01:29:04.965 --> 01:29:05.125
<v Speaker 0>whatever.

01:29:06.120 --> 01:29:08.600
<v Speaker 0>It just requires so much YAML duplication and

01:29:08.600 --> 01:29:11.640
<v Speaker 0>pain, but we actually have with CUE the

01:29:11.640 --> 01:29:13.880
<v Speaker 0>ability to tidy up and make things actually

01:29:13.880 --> 01:29:16.760
<v Speaker 0>consumable. And I'm sure Timoni has other layers

01:29:16.760 --> 01:29:18.920
<v Speaker 0>into that, but we've not even covered yet.

01:29:18.920 --> 01:29:20.824
<v Speaker 0>So again, I don't wanna take us too

01:29:20.824 --> 01:29:22.265
<v Speaker 0>far off where we're supposed to be going

01:29:22.265 --> 01:29:24.344
<v Speaker 0>through because we are running way over where

01:29:24.344 --> 01:29:25.785
<v Speaker 0>we wanted to be time wise. So I

01:29:25.785 --> 01:29:27.465
<v Speaker 0>just wanna check that you're okay for us

01:29:27.465 --> 01:29:29.945
<v Speaker 0>to continue through the quick start and finish.

01:29:30.185 --> 01:29:33.139
<v Speaker 0>Are you okay for time? Yeah. Yeah. Okay.

01:29:33.380 --> 01:29:35.860
<v Speaker 0>Cool. Sorry. Me going off road is always

01:29:35.860 --> 01:29:36.820
<v Speaker 0>gonna be a challenge.

01:29:37.380 --> 01:29:37.780
<v Speaker 0>So

01:29:38.420 --> 01:29:40.420
<v Speaker 0>this is really cool. I'm I'm loving what

01:29:40.420 --> 01:29:42.340
<v Speaker 0>we're seeing. So let's let's let's finish the

01:29:42.340 --> 01:29:43.460
<v Speaker 0>quick start and take a look at the

01:29:43.460 --> 01:29:46.085
<v Speaker 0>secret stuff in the production application of Right?

01:29:46.085 --> 01:29:47.445
<v Speaker 0>And then I've not looked at the questions

01:29:47.445 --> 01:29:49.685
<v Speaker 0>in ages, I'm sorry, in live viewers, but

01:29:49.685 --> 01:29:51.045
<v Speaker 0>I'll check it in just a moment.

01:29:51.525 --> 01:29:53.925
<v Speaker 0>But we're let's do our delete. It's all

01:29:53.925 --> 01:29:54.565
<v Speaker 0>gone.

01:29:54.725 --> 01:29:55.844
<v Speaker 0>Come back to our tutorial

01:29:56.885 --> 01:29:58.485
<v Speaker 0>and now we can start to play with

01:29:58.485 --> 01:30:00.005
<v Speaker 0>bundling instances together.

01:30:01.280 --> 01:30:03.680
<v Speaker 0>And I'm gonna copy this because we're going

01:30:03.680 --> 01:30:04.960
<v Speaker 0>to do a bundle

01:30:05.360 --> 01:30:06.480
<v Speaker 0>apply.

01:30:06.560 --> 01:30:08.320
<v Speaker 0>So let's close all this

01:30:09.360 --> 01:30:10.079
<v Speaker 0>bundle

01:30:11.360 --> 01:30:12.159
<v Speaker 0>here.

01:30:12.880 --> 01:30:14.640
<v Speaker 0>What this is doing is saying we wanna

01:30:14.640 --> 01:30:15.600
<v Speaker 0>bundle

01:30:16.815 --> 01:30:19.055
<v Speaker 0>going to call this pod info V one

01:30:19.055 --> 01:30:21.615
<v Speaker 0>alpha one, where we're going to deploy a

01:30:21.615 --> 01:30:22.815
<v Speaker 0>Redis

01:30:22.815 --> 01:30:25.535
<v Speaker 0>module and the same pod info bundle that

01:30:25.535 --> 01:30:28.735
<v Speaker 0>we've already deployed. However, this time we are

01:30:28.735 --> 01:30:31.055
<v Speaker 0>going to enable caching and point at this.

01:30:35.720 --> 01:30:37.000
<v Speaker 0>And we got this.

01:30:41.400 --> 01:30:43.719
<v Speaker 0>And call mains the same as yours because

01:30:43.880 --> 01:30:45.239
<v Speaker 0>terrible person.

01:30:45.640 --> 01:30:46.280
<v Speaker 0>There we go.

01:30:51.844 --> 01:30:53.604
<v Speaker 0>So let's handle like

01:30:54.405 --> 01:30:56.565
<v Speaker 0>one of the practical questions that I'm sure

01:30:56.565 --> 01:30:58.244
<v Speaker 0>it's gonna come from audience and this even

01:30:58.244 --> 01:30:59.445
<v Speaker 0>in my head. Right? It's like

01:31:00.040 --> 01:31:02.199
<v Speaker 0>people watch this, but they're holy shit. This

01:31:02.199 --> 01:31:04.600
<v Speaker 0>is amazing. I'm convinced. I'm their team Timoni.

01:31:04.600 --> 01:31:05.880
<v Speaker 0>That's it. Let's go.

01:31:07.400 --> 01:31:09.400
<v Speaker 0>Are they working with Timoni modules? Are they

01:31:09.400 --> 01:31:11.719
<v Speaker 0>always working with bundles? Are they always writing

01:31:11.719 --> 01:31:14.574
<v Speaker 0>their own bundles that consume modules? Like, I

01:31:14.574 --> 01:31:16.335
<v Speaker 0>am dual blogs developer.

01:31:16.335 --> 01:31:18.335
<v Speaker 0>I turn up to work tomorrow. I say,

01:31:18.335 --> 01:31:20.334
<v Speaker 0>hey team, this is what we do now.

01:31:21.614 --> 01:31:23.614
<v Speaker 0>Do they start writing their own bundle right

01:31:23.614 --> 01:31:26.255
<v Speaker 0>away and consume third party modules or do

01:31:26.255 --> 01:31:28.574
<v Speaker 0>they just deploy modules? Like how do you

01:31:28.574 --> 01:31:29.375
<v Speaker 0>see that working?

01:31:30.030 --> 01:31:31.390
<v Speaker 0>Let me give you a concrete example because

01:31:31.390 --> 01:31:34.190
<v Speaker 0>that's that's very abstract. Right? I'm Dropbox developer.

01:31:34.190 --> 01:31:36.110
<v Speaker 0>I'm going to work tomorrow. I wanna deploy

01:31:36.350 --> 01:31:37.389
<v Speaker 0>MongoDB

01:31:37.710 --> 01:31:39.150
<v Speaker 0>and a web application.

01:31:39.550 --> 01:31:40.989
<v Speaker 0>What's the first thing I do?

01:31:41.630 --> 01:31:44.765
<v Speaker 1>Well, there is no Timoni module for MongoDB.

01:31:44.765 --> 01:31:47.085
<v Speaker 1>So you could spend a lot of time

01:31:47.085 --> 01:31:48.685
<v Speaker 1>writing that from zero.

01:31:49.325 --> 01:31:51.805
<v Speaker 1>Then you have to write the module for

01:31:51.805 --> 01:31:54.365
<v Speaker 1>your own app, and you should definitely publish

01:31:54.365 --> 01:31:57.245
<v Speaker 1>those to

01:31:55.580 --> 01:31:58.460
<v Speaker 1>Container Registry and use bundles and not rely

01:31:58.460 --> 01:31:59.900
<v Speaker 1>on best scripts

01:32:00.300 --> 01:32:01.579
<v Speaker 1>that are calling

01:32:01.820 --> 01:32:04.540
<v Speaker 1>setting values to this file and so on.

01:32:04.540 --> 01:32:07.580
<v Speaker 1>You should definitely use bundles and do a

01:32:07.580 --> 01:32:09.500
<v Speaker 1>simple apply of that and have in the

01:32:09.500 --> 01:32:10.220
<v Speaker 1>bundle everything.

01:32:12.695 --> 01:32:16.055
<v Speaker 1>I'm guessing the PVC is failing because maybe

01:32:16.055 --> 01:32:18.455
<v Speaker 1>your cluster does not have it. We knew

01:32:18.455 --> 01:32:20.775
<v Speaker 0>that was gonna I assured you it would

01:32:20.775 --> 01:32:21.574
<v Speaker 0>be okay,

01:32:21.815 --> 01:32:22.295
<v Speaker 0>and

01:32:22.615 --> 01:32:23.495
<v Speaker 0>now I feel bad.

01:32:27.520 --> 01:32:28.560
<v Speaker 0>I

01:32:28.560 --> 01:32:29.519
<v Speaker 0>don't have

01:32:30.560 --> 01:32:33.440
<v Speaker 1>Let's look at the pod info namespace and

01:32:33.440 --> 01:32:34.880
<v Speaker 1>see what's happening there.

01:32:35.280 --> 01:32:37.440
<v Speaker 0>Hey. I didn't specify a namespace to the

01:32:37.440 --> 01:32:39.360
<v Speaker 0>bundle. You did in the bundle. Mhmm.

01:32:40.855 --> 01:32:43.014
<v Speaker 0>Ah, right. Gotcha. Okay.

01:32:45.014 --> 01:32:46.774
<v Speaker 0>Yeah.

01:32:48.935 --> 01:32:49.894
<v Speaker 0>Okay. Yeah.

01:32:50.454 --> 01:32:51.094
<v Speaker 0>So

01:32:52.614 --> 01:32:53.895
<v Speaker 0>we do have one though.

01:32:54.990 --> 01:32:56.429
<v Speaker 0>Why is the claim

01:32:57.790 --> 01:32:58.830
<v Speaker 0>pending?

01:32:59.790 --> 01:33:02.349
<v Speaker 0>Because you're not using the default storage class.

01:33:02.350 --> 01:33:04.910
<v Speaker 0>It's not you, but, you know, it's looking

01:33:04.910 --> 01:33:07.230
<v Speaker 0>for a standard default class rather than the

01:33:07.230 --> 01:33:10.015
<v Speaker 0>default default class. Yeah. Okay. So we can

01:33:10.015 --> 01:33:10.815
<v Speaker 1>actually

01:33:11.775 --> 01:33:12.895
<v Speaker 1>change it.

01:33:16.255 --> 01:33:18.975
<v Speaker 0>Oh, I'm gonna can I pull a bundle?

01:33:21.370 --> 01:33:23.610
<v Speaker 0>What? I would pull the module. Right? I

01:33:23.610 --> 01:33:24.889
<v Speaker 0>do a module pull.

01:33:27.210 --> 01:33:28.889
<v Speaker 0>Pull the reddest module.

01:33:28.970 --> 01:33:30.330
<v Speaker 0>I wanna I wanna see if I can

01:33:30.330 --> 01:33:31.050
<v Speaker 0>do this.

01:33:31.850 --> 01:33:32.730
<v Speaker 1>Okay.

01:33:33.050 --> 01:33:34.170
<v Speaker 0>So Timoni

01:33:34.565 --> 01:33:35.525
<v Speaker 0>module

01:33:35.605 --> 01:33:36.564
<v Speaker 0>tool.

01:33:38.725 --> 01:33:40.244
<v Speaker 0>I don't know what's buying my my copy

01:33:40.244 --> 01:33:42.324
<v Speaker 0>and paste just hits me today. Right?

01:33:44.324 --> 01:33:45.204
<v Speaker 0>Output,

01:33:45.284 --> 01:33:47.045
<v Speaker 0>Redis. And we know that this now needs

01:33:47.045 --> 01:33:49.125
<v Speaker 0>to exist first. So make sure

01:33:49.720 --> 01:33:50.520
<v Speaker 0>is

01:33:53.160 --> 01:33:54.760
<v Speaker 0>not module pool.

01:33:54.920 --> 01:33:55.320
<v Speaker 1>Mod.

01:34:02.345 --> 01:34:04.425
<v Speaker 0>Alright. So let's go back to Versus Code.

01:34:05.305 --> 01:34:07.465
<v Speaker 0>Then I open something else. That's okay.

01:34:09.705 --> 01:34:13.145
<v Speaker 0>Templates config. So now I know Oh, don't

01:34:13.145 --> 01:34:15.639
<v Speaker 1>have to scroll much. Yeah. So I can

01:34:15.639 --> 01:34:18.119
<v Speaker 0>just set persistence storage class.

01:34:18.840 --> 01:34:21.079
<v Speaker 0>So let's do this

01:34:23.639 --> 01:34:24.439
<v Speaker 0>up.

01:34:26.520 --> 01:34:28.119
<v Speaker 1>I can tell you no queue

01:34:29.115 --> 01:34:32.715
<v Speaker 1>because most people wouldn't know to, you know,

01:34:33.195 --> 01:34:35.035
<v Speaker 1>wrap it in values.

01:34:35.755 --> 01:34:38.075
<v Speaker 0>I have done a lot with CUE. I

01:34:38.075 --> 01:34:39.915
<v Speaker 0>actually have a couple of tools I built

01:34:39.915 --> 01:34:41.995
<v Speaker 0>on top of CUE myself, so I'm very

01:34:41.995 --> 01:34:42.795
<v Speaker 0>familiar with it.

01:34:43.850 --> 01:34:46.810
<v Speaker 0>Now my storage class is called local path.

01:34:47.050 --> 01:34:49.050
<v Speaker 0>Now I could just leave this as blank,

01:34:49.050 --> 01:34:51.130
<v Speaker 0>which would pull the default, but

01:34:52.090 --> 01:34:53.530
<v Speaker 0>we'll do it this way.

01:34:54.090 --> 01:34:56.970
<v Speaker 1>No. It should be oh, that's that's the

01:34:56.970 --> 01:34:57.450
<v Speaker 1>name. Okay.

01:34:58.275 --> 01:34:59.875
<v Speaker 0>Yeah. That's the name. But I mean, we

01:34:59.875 --> 01:35:01.635
<v Speaker 0>could just force it to blank, which would

01:35:01.635 --> 01:35:03.395
<v Speaker 0>tell the cluster to use the default storage

01:35:03.395 --> 01:35:05.795
<v Speaker 0>class. Let's let's let's try it. Right? Yeah.

01:35:06.675 --> 01:35:07.635
<v Speaker 0>So let's just

01:35:08.115 --> 01:35:09.075
<v Speaker 0>pull that

01:35:09.395 --> 01:35:11.875
<v Speaker 0>and then we'll do our 20 bundle apply.

01:35:13.369 --> 01:35:15.449
<v Speaker 0>And if we just come down here,

01:35:19.849 --> 01:35:21.130
<v Speaker 0>oh, it's immutable.

01:35:23.929 --> 01:35:24.489
<v Speaker 1>Yeah.

01:35:24.810 --> 01:35:26.810
<v Speaker 1>Let's do a force apply.

01:35:32.105 --> 01:35:34.264
<v Speaker 0>I was going to just delete the claim,

01:35:34.264 --> 01:35:35.864
<v Speaker 0>but I guess this also works.

01:35:36.505 --> 01:35:38.184
<v Speaker 0>And then if we do a GET

01:35:38.425 --> 01:35:38.905
<v Speaker 0>PVC.

01:35:42.040 --> 01:35:43.080
<v Speaker 1>So

01:35:43.640 --> 01:35:44.600
<v Speaker 1>Timoni

01:35:44.600 --> 01:35:48.600
<v Speaker 1>does, it has code that detects immutable errors

01:35:49.080 --> 01:35:51.880
<v Speaker 1>returned by the Kubernetes API. And when you

01:35:51.880 --> 01:35:53.400
<v Speaker 1>set it to force or you can also

01:35:53.400 --> 01:35:54.840
<v Speaker 1>add annotations

01:35:54.615 --> 01:35:57.255
<v Speaker 1>for those objects, it will recreate them. But

01:35:57.255 --> 01:35:58.535
<v Speaker 1>force tells

01:35:59.735 --> 01:36:02.455
<v Speaker 1>Timoni, hey, look for immutable errors. And if

01:36:02.455 --> 01:36:05.335
<v Speaker 1>there are any immutables, only then recreate the

01:36:05.335 --> 01:36:07.575
<v Speaker 1>object. Don't destroy objects which

01:36:08.050 --> 01:36:11.889
<v Speaker 1>don't have immutable changes to immutable fields inside.

01:36:14.929 --> 01:36:16.210
<v Speaker 1>Force is quite

01:36:17.650 --> 01:36:18.130
<v Speaker 1>special.

01:36:19.935 --> 01:36:22.175
<v Speaker 0>Yeah. Well, even when I set the storage

01:36:22.175 --> 01:36:24.735
<v Speaker 0>class, it's still failing, so that's my bad.

01:36:27.295 --> 01:36:29.614
<v Speaker 0>But it's okay. We planned for this. I

01:36:29.614 --> 01:36:30.655
<v Speaker 0>planned for this.

01:36:31.454 --> 01:36:32.334
<v Speaker 0>And my

01:36:33.430 --> 01:36:35.190
<v Speaker 0>that's a lot of downloads.

01:36:35.750 --> 01:36:37.750
<v Speaker 0>And my downloads folder, I'll check the name

01:36:37.750 --> 01:36:39.670
<v Speaker 0>over here to spare everybody the mess of

01:36:39.670 --> 01:36:42.070
<v Speaker 0>my downloads folder. I have a CUE config

01:36:42.070 --> 01:36:45.270
<v Speaker 0>file, which we will nicely put here where

01:36:45.270 --> 01:36:47.990
<v Speaker 0>I will export CUE config equals

01:36:49.125 --> 01:36:51.364
<v Speaker 0>EWTKC.

01:36:51.925 --> 01:36:53.045
<v Speaker 0>And we will do

01:36:54.645 --> 01:36:56.485
<v Speaker 0>that actually worked. Worked. And

01:36:58.165 --> 01:37:00.165
<v Speaker 0>I was gonna go to my backup cube.

01:37:04.070 --> 01:37:06.070
<v Speaker 0>So get PVC.

01:37:07.990 --> 01:37:09.590
<v Speaker 0>So it's just a slow

01:37:09.990 --> 01:37:12.150
<v Speaker 0>oh, we got it. Nice. Awesome.

01:37:18.335 --> 01:37:19.695
<v Speaker 0>And it

01:37:23.375 --> 01:37:25.935
<v Speaker 1>also has end to end tests. So if

01:37:25.935 --> 01:37:28.415
<v Speaker 1>we look a little bit at what the

01:37:28.415 --> 01:37:30.655
<v Speaker 1>output of the bundle applies,

01:37:31.340 --> 01:37:32.619
<v Speaker 1>you'll see that

01:37:33.020 --> 01:37:35.179
<v Speaker 1>it goes into stages.

01:37:35.500 --> 01:37:37.340
<v Speaker 1>And the module creators,

01:37:37.340 --> 01:37:39.099
<v Speaker 1>the software vendors,

01:37:39.420 --> 01:37:40.699
<v Speaker 1>they have

01:37:41.020 --> 01:37:42.699
<v Speaker 1>control over stages.

01:37:43.020 --> 01:37:44.060
<v Speaker 1>And they can

01:37:44.695 --> 01:37:47.495
<v Speaker 1>instruct Timoni how to apply things in stages,

01:37:47.495 --> 01:37:49.495
<v Speaker 1>do health checks, run end to end tests,

01:37:49.495 --> 01:37:51.494
<v Speaker 1>then move to another thing. For example,

01:37:52.054 --> 01:37:54.614
<v Speaker 1>orchestrating a Redis deployment, in my case, is

01:37:54.614 --> 01:37:56.295
<v Speaker 1>first you create a masternode

01:37:57.349 --> 01:37:59.750
<v Speaker 1>with a persistent claim. You wait for that

01:37:59.750 --> 01:38:00.709
<v Speaker 1>to be healthy.

01:38:01.190 --> 01:38:03.030
<v Speaker 1>Then you create a replica

01:38:03.429 --> 01:38:05.110
<v Speaker 1>set, the Redis

01:38:05.110 --> 01:38:06.149
<v Speaker 1>replicas.

01:38:06.949 --> 01:38:08.710
<v Speaker 1>And at the end, you run an end

01:38:08.710 --> 01:38:10.815
<v Speaker 1>to end test to make sure that the

01:38:10.815 --> 01:38:12.895
<v Speaker 1>cluster is in good shape and only then

01:38:12.895 --> 01:38:15.454
<v Speaker 1>move to the app that uses

01:38:15.455 --> 01:38:16.335
<v Speaker 1>what it is.

01:38:16.815 --> 01:38:18.975
<v Speaker 0>Ah, that was so subtle. I didn't notice

01:38:18.975 --> 01:38:20.655
<v Speaker 0>that, but you're right. Look, we have

01:38:22.340 --> 01:38:24.579
<v Speaker 0>service icon config map and register.

01:38:25.619 --> 01:38:26.419
<v Speaker 0>Then

01:38:27.300 --> 01:38:29.300
<v Speaker 0>it has the replicas. And then I I

01:38:29.300 --> 01:38:31.139
<v Speaker 0>I just didn't even notice the job with

01:38:31.139 --> 01:38:32.820
<v Speaker 0>the registers. Nice.

01:38:33.460 --> 01:38:36.260
<v Speaker 0>Yeah. So what does that look like in

01:38:36.260 --> 01:38:36.980
<v Speaker 0>TimoniQ?

01:38:40.015 --> 01:38:41.855
<v Speaker 0>Is that in the this here?

01:38:42.175 --> 01:38:42.975
<v Speaker 1>Yeah.

01:38:43.375 --> 01:38:46.415
<v Speaker 0>Ah, so you can have multiple apply steps

01:38:47.455 --> 01:38:48.335
<v Speaker 0>like so.

01:38:48.575 --> 01:38:50.014
<v Speaker 1>Then you have conditions.

01:38:50.015 --> 01:38:50.735
<v Speaker 1>If

01:38:51.120 --> 01:38:53.280
<v Speaker 1>the end user wants to run the test

01:38:53.280 --> 01:38:56.239
<v Speaker 1>and the test is enabling values only then

01:38:56.480 --> 01:38:57.360
<v Speaker 1>do the

01:38:58.000 --> 01:38:58.959
<v Speaker 1>test jobs.

01:38:59.280 --> 01:38:59.840
<v Speaker 1>And

01:39:00.159 --> 01:39:04.000
<v Speaker 1>how Timoni treats tests is yet very different

01:39:04.000 --> 01:39:07.185
<v Speaker 1>from what Helm does. For Timoni,

01:39:07.185 --> 01:39:08.864
<v Speaker 1>tests are part

01:39:09.025 --> 01:39:10.385
<v Speaker 1>of the desired state.

01:39:10.625 --> 01:39:12.065
<v Speaker 1>They are not some

01:39:12.145 --> 01:39:14.784
<v Speaker 1>afterthought that they can exist. There is no

01:39:14.784 --> 01:39:17.344
<v Speaker 1>test command. You don't run tests out of

01:39:17.665 --> 01:39:17.985
<v Speaker 1>nothing.

01:39:19.790 --> 01:39:22.750
<v Speaker 1>How tests are part of the desired state,

01:39:22.750 --> 01:39:23.630
<v Speaker 1>and every time,

01:39:24.030 --> 01:39:26.910
<v Speaker 1>if you run now again the apply, there

01:39:26.910 --> 01:39:28.349
<v Speaker 1>will be no test run,

01:39:28.670 --> 01:39:31.230
<v Speaker 1>because the desired state didn't change. But if

01:39:31.230 --> 01:39:32.110
<v Speaker 1>you change a value,

01:39:33.025 --> 01:39:35.104
<v Speaker 1>then Timoni will regenerate

01:39:35.184 --> 01:39:37.985
<v Speaker 1>the job and run the test because you

01:39:37.985 --> 01:39:39.584
<v Speaker 1>want to run tests

01:39:39.824 --> 01:39:41.905
<v Speaker 1>only when things change.

01:39:42.385 --> 01:39:44.945
<v Speaker 1>So that's also a big

01:39:45.105 --> 01:39:45.985
<v Speaker 1>difference

01:39:47.160 --> 01:39:48.600
<v Speaker 1>in how it does it.

01:39:51.320 --> 01:39:54.440
<v Speaker 0>Oh yeah. It's unchanged, right? But if you

01:39:54.440 --> 01:39:57.160
<v Speaker 1>change something in your Redis configuration,

01:39:59.495 --> 01:40:01.895
<v Speaker 1>the computed checks some of the desired set

01:40:01.895 --> 01:40:03.574
<v Speaker 1>changes. And that

01:40:05.175 --> 01:40:07.335
<v Speaker 1>tells Timoni, hey, I have to wipe out

01:40:07.335 --> 01:40:08.855
<v Speaker 1>the old job,

01:40:09.335 --> 01:40:10.375
<v Speaker 1>clear it out

01:40:11.700 --> 01:40:14.660
<v Speaker 1>also along with all the pods, and run

01:40:14.660 --> 01:40:17.860
<v Speaker 1>a new test. So yeah, tests are quite

01:40:17.860 --> 01:40:18.420
<v Speaker 1>different.

01:40:18.900 --> 01:40:20.820
<v Speaker 1>Here in TimoniQ,

01:40:20.820 --> 01:40:23.780
<v Speaker 1>where the module authors have the whole power

01:40:23.780 --> 01:40:25.975
<v Speaker 1>of defining how the apply works, you can

01:40:25.975 --> 01:40:26.695
<v Speaker 1>also

01:40:28.055 --> 01:40:29.175
<v Speaker 1>set here

01:40:30.615 --> 01:40:33.895
<v Speaker 1>things like, I want to apply this only

01:40:33.975 --> 01:40:34.695
<v Speaker 1>if

01:40:35.895 --> 01:40:37.975
<v Speaker 1>an object does not exist on the cluster.

01:40:37.975 --> 01:40:39.975
<v Speaker 1>And this is how you can do the

01:40:39.975 --> 01:40:41.869
<v Speaker 1>same stuff as have

01:40:42.829 --> 01:40:44.349
<v Speaker 1>pre installed hooks.

01:40:45.150 --> 01:40:47.550
<v Speaker 1>Because Timoni has no hooks. It's always an

01:40:47.550 --> 01:40:48.909
<v Speaker 1>apply. There is

01:40:51.150 --> 01:40:53.310
<v Speaker 1>no install. There is no upgrade. It's apply,

01:40:53.310 --> 01:40:55.070
<v Speaker 1>right? But you can

01:40:55.310 --> 01:40:56.190
<v Speaker 1>have

01:40:59.514 --> 01:41:02.074
<v Speaker 1>same Timoni, apply this only if it doesn't

01:41:02.074 --> 01:41:04.875
<v Speaker 1>exist or apply it anytime or clean it

01:41:04.875 --> 01:41:06.394
<v Speaker 1>up after you applied it.

01:41:07.034 --> 01:41:07.914
<v Speaker 1>So

01:41:07.994 --> 01:41:10.155
<v Speaker 1>that's how we can do prerequisites

01:41:10.155 --> 01:41:13.010
<v Speaker 1>for an installation or prerequisites only for upgrades

01:41:13.010 --> 01:41:14.449
<v Speaker 1>and so on.

01:41:15.890 --> 01:41:16.610
<v Speaker 0>Alright.

01:41:17.489 --> 01:41:18.770
<v Speaker 0>Quick question then.

01:41:19.969 --> 01:41:20.690
<v Speaker 0>This

01:41:22.370 --> 01:41:23.570
<v Speaker 0>I'm

01:41:23.730 --> 01:41:26.050
<v Speaker 0>just curious how you look over these stages.

01:41:26.050 --> 01:41:26.850
<v Speaker 0>Right? Because

01:41:27.285 --> 01:41:30.405
<v Speaker 0>there's no specific ordering other than the order

01:41:30.405 --> 01:41:32.965
<v Speaker 0>that you've put them inside of this file.

01:41:33.765 --> 01:41:34.645
<v Speaker 1>And so does

01:41:35.605 --> 01:41:37.364
<v Speaker 0>CUE maintain that order?

01:41:37.525 --> 01:41:39.845
<v Speaker 1>Well, yeah, of course. Uh-huh. I actually didn't

01:41:39.845 --> 01:41:42.660
<v Speaker 0>know that. Nice. Okay. Very cool. So I'm

01:41:42.660 --> 01:41:44.980
<v Speaker 1>using the AST to work

01:41:45.060 --> 01:41:46.179
<v Speaker 1>the CUE files.

01:41:46.740 --> 01:41:49.380
<v Speaker 1>So if the file is one and the

01:41:49.380 --> 01:41:51.380
<v Speaker 1>other, why wouldn't I execute it in that

01:41:51.380 --> 01:41:51.700
<v Speaker 1>direction?

01:41:53.005 --> 01:41:53.805
<v Speaker 0>Okay.

01:41:53.805 --> 01:41:56.045
<v Speaker 0>So you're not actually just rendering out the

01:41:56.045 --> 01:41:58.445
<v Speaker 0>concrete value. You're working with the queue value

01:41:58.445 --> 01:42:00.125
<v Speaker 0>itself as part of Timoni.

01:42:00.205 --> 01:42:03.725
<v Speaker 0>So Yeah. There are many, many things that

01:42:03.725 --> 01:42:06.765
<v Speaker 1>Timoni does around queue files. It's that

01:42:07.610 --> 01:42:10.489
<v Speaker 1>Some files get directly compiled

01:42:10.650 --> 01:42:13.289
<v Speaker 1>for other files. I'm working DST from other

01:42:13.289 --> 01:42:14.889
<v Speaker 1>files. I'm doing unifying.

01:42:14.889 --> 01:42:15.449
<v Speaker 1>Yeah. It's

01:42:16.730 --> 01:42:18.489
<v Speaker 1>it was quite an adventure, but I like

01:42:18.489 --> 01:42:20.090
<v Speaker 1>it in a way. Yeah. I learned a

01:42:20.090 --> 01:42:21.369
<v Speaker 1>lot a lot of queuing.

01:42:23.335 --> 01:42:24.054
<v Speaker 0>Alright.

01:42:24.375 --> 01:42:25.415
<v Speaker 0>Let's

01:42:25.415 --> 01:42:26.935
<v Speaker 0>tackle the question and then we'll do the

01:42:26.935 --> 01:42:28.534
<v Speaker 0>secret stuff and then we'll finish up for

01:42:28.534 --> 01:42:30.135
<v Speaker 0>today's session. So

01:42:31.094 --> 01:42:34.614
<v Speaker 0>Daniel says, this looks so good. Awesome. We

01:42:34.614 --> 01:42:36.969
<v Speaker 0>glad you like this, Daniel. Why I'm always

01:42:36.969 --> 01:42:39.210
<v Speaker 0>asking if we can touch on and I'll

01:42:39.210 --> 01:42:41.050
<v Speaker 0>say we, but I mean you, Stefan.

01:42:41.369 --> 01:42:43.290
<v Speaker 0>Could you touch on what this looks like

01:42:43.290 --> 01:42:45.130
<v Speaker 0>for working with two separate teams,

01:42:45.369 --> 01:42:47.849
<v Speaker 0>like a platform team and a dev team

01:42:48.675 --> 01:42:50.675
<v Speaker 0>working with bundles

01:42:50.675 --> 01:42:53.074
<v Speaker 0>as in maybe two separate repos managed by

01:42:53.074 --> 01:42:55.074
<v Speaker 0>the same app from two separate teams with

01:42:55.074 --> 01:42:56.354
<v Speaker 0>different concerns.

01:42:57.155 --> 01:42:58.994
<v Speaker 0>Let's see if I can put that sentence

01:42:58.994 --> 01:43:00.915
<v Speaker 0>together in a way that I understand. Do

01:43:00.915 --> 01:43:02.514
<v Speaker 0>you know what why I'm always asking there,

01:43:02.514 --> 01:43:02.755
<v Speaker 0>Stefan?

01:43:05.270 --> 01:43:09.270
<v Speaker 1>So from a platform team perspective and dev

01:43:09.270 --> 01:43:12.149
<v Speaker 1>teams or operations team, right Yeah. There are

01:43:12.469 --> 01:43:15.670
<v Speaker 1>several approaches here. I imagine the platform team

01:43:15.670 --> 01:43:17.829
<v Speaker 1>will want to design Timoni modules

01:43:18.245 --> 01:43:18.965
<v Speaker 1>for

01:43:19.205 --> 01:43:22.085
<v Speaker 1>generic modules for node GS apps

01:43:22.405 --> 01:43:24.725
<v Speaker 1>that have the right, I don't know, NGINX,

01:43:24.725 --> 01:43:25.685
<v Speaker 1>sidecar,

01:43:26.885 --> 01:43:28.405
<v Speaker 1>that exposes metrics,

01:43:28.565 --> 01:43:29.205
<v Speaker 1>the

01:43:29.525 --> 01:43:30.244
<v Speaker 1>node

01:43:30.405 --> 01:43:31.285
<v Speaker 1>GS

01:43:31.285 --> 01:43:33.525
<v Speaker 1>app container

01:43:33.690 --> 01:43:34.650
<v Speaker 1>limits,

01:43:34.650 --> 01:43:37.130
<v Speaker 1>all things in there. Right? Then

01:43:39.050 --> 01:43:41.370
<v Speaker 1>dev team, when they want to deploy their

01:43:41.370 --> 01:43:41.929
<v Speaker 1>own

01:43:42.890 --> 01:43:43.850
<v Speaker 1>NGINX

01:43:43.850 --> 01:43:44.650
<v Speaker 1>app,

01:43:44.810 --> 01:43:46.489
<v Speaker 1>they will use a bundle. They will set

01:43:46.489 --> 01:43:48.915
<v Speaker 1>their own images. Maybe they will do some

01:43:48.915 --> 01:43:51.474
<v Speaker 1>little configuration of that deployment, but they will

01:43:51.474 --> 01:43:53.155
<v Speaker 1>use in the bundle those

01:43:54.355 --> 01:43:58.994
<v Speaker 1>standard modules created by platform teams. That's one

01:43:58.994 --> 01:44:00.970
<v Speaker 1>way to do it, and you don't need

01:44:00.970 --> 01:44:02.490
<v Speaker 1>the repo. You don't need to look in

01:44:02.490 --> 01:44:04.970
<v Speaker 1>the repo. The platform team will publish all

01:44:04.970 --> 01:44:08.250
<v Speaker 1>these modules to the internal Container Registry.

01:44:09.370 --> 01:44:12.330
<v Speaker 1>Right? And app developers, app teams will just

01:44:12.330 --> 01:44:13.850
<v Speaker 1>use those modules

01:44:14.205 --> 01:44:17.005
<v Speaker 1>from there. That's one approach. And maybe it's

01:44:17.005 --> 01:44:18.604
<v Speaker 1>too strict. Maybe

01:44:19.085 --> 01:44:22.044
<v Speaker 1>app teams want to develop their own modules,

01:44:22.045 --> 01:44:24.445
<v Speaker 1>so maybe the platform team will only create

01:44:24.445 --> 01:44:25.565
<v Speaker 1>these CUE libraries,

01:44:26.890 --> 01:44:28.730
<v Speaker 1>which abstract away a

01:44:29.050 --> 01:44:30.970
<v Speaker 1>bunch of stuff in Kubernetes, and they will

01:44:30.970 --> 01:44:35.050
<v Speaker 1>do Timoni artifact push of that particular

01:44:35.370 --> 01:44:37.290
<v Speaker 1>CUE library. And when

01:44:38.010 --> 01:44:40.250
<v Speaker 1>the app team creates their own modules, they

01:44:40.250 --> 01:44:42.925
<v Speaker 1>will do artifact pool. Okay, I want to

01:44:42.925 --> 01:44:45.805
<v Speaker 1>use all these components and I'm writing my

01:44:45.805 --> 01:44:48.445
<v Speaker 1>own module because I know best how to

01:44:49.085 --> 01:44:52.445
<v Speaker 1>configure, how to expose my app configuration.

01:44:52.844 --> 01:44:53.405
<v Speaker 1>Then

01:44:53.880 --> 01:44:56.520
<v Speaker 1>the operation team will create a bundle using

01:44:56.520 --> 01:44:59.240
<v Speaker 1>either modules created by the platform team or

01:44:59.240 --> 01:45:01.480
<v Speaker 1>the app team or the app team themselves.

01:45:01.480 --> 01:45:02.200
<v Speaker 1>They will

01:45:02.600 --> 01:45:05.800
<v Speaker 1>have good bundles for everybody to deploy and

01:45:05.800 --> 01:45:07.400
<v Speaker 1>they'll publish those and

01:45:07.705 --> 01:45:10.744
<v Speaker 1>operations team can use those bundles. It's like,

01:45:11.864 --> 01:45:15.864
<v Speaker 1>it really depends on your organization structure and

01:45:15.864 --> 01:45:18.344
<v Speaker 1>how teams are collaborating between them.

01:45:18.985 --> 01:45:22.599
<v Speaker 1>I think Timoni and and and CUE modules

01:45:22.599 --> 01:45:24.679
<v Speaker 1>themselves offer a lot of

01:45:26.760 --> 01:45:28.039
<v Speaker 1>flexibility here.

01:45:30.199 --> 01:45:32.119
<v Speaker 1>So, yeah, I don't think there is one

01:45:32.119 --> 01:45:34.439
<v Speaker 1>way of doing it, but it's quite flexible.

01:45:34.679 --> 01:45:36.755
<v Speaker 1>The idea is that at the end, someone

01:45:36.755 --> 01:45:39.394
<v Speaker 1>will create a bundle that will use

01:45:39.715 --> 01:45:42.355
<v Speaker 1>all these modules created by someone else or

01:45:42.355 --> 01:45:43.074
<v Speaker 1>themselves.

01:45:44.355 --> 01:45:46.195
<v Speaker 0>Yeah. I'm gonna touch on that with my

01:45:46.195 --> 01:45:47.955
<v Speaker 0>own opinion just a little bit as well,

01:45:47.955 --> 01:45:49.395
<v Speaker 0>which is very much in line with what

01:45:49.395 --> 01:45:51.550
<v Speaker 0>you were saying, but just for why it

01:45:51.550 --> 01:45:54.510
<v Speaker 0>was a question. Right? It's like, there's two

01:45:54.510 --> 01:45:56.670
<v Speaker 0>things that when you're talking about working with

01:45:56.670 --> 01:45:58.510
<v Speaker 0>platform teams and dev teams. Right? There's two

01:45:58.510 --> 01:46:00.350
<v Speaker 0>different constraints that are important here. One, the

01:46:00.350 --> 01:46:02.750
<v Speaker 0>platform team is gonna say to deploy to

01:46:02.750 --> 01:46:04.190
<v Speaker 0>our cluster, you must

01:46:04.715 --> 01:46:07.675
<v Speaker 0>do this. Right? There's policies, there's enforcement.

01:46:07.675 --> 01:46:09.755
<v Speaker 0>And that's always gonna happen in the cluster

01:46:09.755 --> 01:46:12.474
<v Speaker 0>via admission controllers of some variety and they

01:46:12.474 --> 01:46:14.715
<v Speaker 0>will enforce that there. However, what I think

01:46:14.715 --> 01:46:16.394
<v Speaker 0>why I'm always also touching on is that

01:46:16.394 --> 01:46:17.675
<v Speaker 0>you may be in a position where if

01:46:17.675 --> 01:46:18.954
<v Speaker 0>you can get buy in where the dev

01:46:18.954 --> 01:46:21.320
<v Speaker 0>teams and the platform teams are using Timoni,

01:46:21.400 --> 01:46:23.559
<v Speaker 0>the platform team for cluster add ons and

01:46:23.559 --> 01:46:25.079
<v Speaker 0>the dev teams for their applications.

01:46:25.320 --> 01:46:26.920
<v Speaker 0>You might get to a point where maybe

01:46:26.920 --> 01:46:29.320
<v Speaker 0>the platform teams are building some best practices

01:46:29.320 --> 01:46:30.679
<v Speaker 0>that people can consume.

01:46:30.920 --> 01:46:32.760
<v Speaker 0>And I think those could be Timoni modules

01:46:32.760 --> 01:46:34.474
<v Speaker 0>that are versioned and you can opt end

01:46:34.474 --> 01:46:37.755
<v Speaker 0>to those defaulting behaviors for security context and

01:46:37.755 --> 01:46:39.514
<v Speaker 0>policies and so forth. Even though there would

01:46:39.514 --> 01:46:41.675
<v Speaker 0>be a higher level of mission control somewhere.

01:46:41.755 --> 01:46:44.795
<v Speaker 0>So I think you you can just the

01:46:44.795 --> 01:46:46.395
<v Speaker 0>platform team or even the dev teams maybe

01:46:46.395 --> 01:46:49.150
<v Speaker 0>they do it, right? Maybe you're Amazon

01:46:49.150 --> 01:46:51.469
<v Speaker 0>and there's 5,000 dev teams working on 10,000

01:46:51.469 --> 01:46:52.270
<v Speaker 0>microservices

01:46:52.270 --> 01:46:54.510
<v Speaker 0>and you write out Timoni modules. This is

01:46:54.510 --> 01:46:56.590
<v Speaker 0>a good deployment strategy for our customers and

01:46:56.590 --> 01:46:58.110
<v Speaker 0>you can opt in to using that behavior

01:46:58.110 --> 01:47:00.750
<v Speaker 0>if you want. And because everything's versions and

01:47:00.750 --> 01:47:01.630
<v Speaker 0>there's digests,

01:47:02.315 --> 01:47:04.235
<v Speaker 0>yeah, you can opt into that. So

01:47:04.635 --> 01:47:06.074
<v Speaker 0>from an opt in perspective,

01:47:06.235 --> 01:47:08.955
<v Speaker 0>use the module system for any enforcement. I

01:47:08.955 --> 01:47:10.395
<v Speaker 0>think it has to be admission control. I

01:47:10.395 --> 01:47:12.315
<v Speaker 0>don't think Timoni would set in that pipeline

01:47:12.315 --> 01:47:13.195
<v Speaker 0>whatsoever.

01:47:13.915 --> 01:47:14.955
<v Speaker 0>Would you agree with that?

01:47:17.260 --> 01:47:17.900
<v Speaker 1>Yeah. I

01:47:19.660 --> 01:47:22.140
<v Speaker 1>no matter how much policy you you can

01:47:22.140 --> 01:47:23.740
<v Speaker 1>put on a client side,

01:47:25.020 --> 01:47:27.260
<v Speaker 1>Indian someone can do a KubeCatulated

01:47:27.660 --> 01:47:29.820
<v Speaker 1>right on the cluster. So you actually need,

01:47:30.375 --> 01:47:33.175
<v Speaker 1>unless you go full on GitOps, no one

01:47:33.175 --> 01:47:35.254
<v Speaker 1>connects to the cluster at all.

01:47:35.894 --> 01:47:37.974
<v Speaker 1>There is no way to

01:47:38.454 --> 01:47:41.974
<v Speaker 1>work around having webhooks. And webhooks are like

01:47:42.215 --> 01:47:42.614
<v Speaker 1>evil.

01:47:43.370 --> 01:47:45.610
<v Speaker 1>They will bring down your whole cluster, are

01:47:45.610 --> 01:47:48.170
<v Speaker 1>single point of failure for Kubernetes API. The

01:47:48.170 --> 01:47:51.130
<v Speaker 1>more webhooks you have, the slower everything gets.

01:47:51.530 --> 01:47:54.650
<v Speaker 1>Dry runs are really, really crazy hard to

01:47:54.650 --> 01:47:57.715
<v Speaker 1>do with webhooks and so on. But that's

01:47:57.715 --> 01:48:02.435
<v Speaker 1>where we are. That's the reality. Right? Sadly,

01:48:02.675 --> 01:48:05.155
<v Speaker 1>yeah, we need to run these webhooks,

01:48:05.155 --> 01:48:07.715
<v Speaker 1>and when they go down, they take everything

01:48:07.715 --> 01:48:10.435
<v Speaker 1>down. And good luck saving a cluster

01:48:10.675 --> 01:48:13.070
<v Speaker 1>if your webhooks are are in the crash

01:48:13.070 --> 01:48:13.630

01:48:15.630 --> 01:48:17.230
<v Speaker 0>Yes. We've all been there.

01:48:17.630 --> 01:48:19.950
<v Speaker 0>Why I wanted follow-up on our question. So

01:48:19.950 --> 01:48:22.030
<v Speaker 0>they said they didn't think about sharing via

01:48:22.030 --> 01:48:24.590
<v Speaker 0>bundles, but I hope that is interesting path

01:48:24.590 --> 01:48:24.750
<v Speaker 0>two.

01:48:25.455 --> 01:48:27.375
<v Speaker 0>But they have said, how do we guarantee

01:48:27.375 --> 01:48:29.455
<v Speaker 0>that the dev team always use the latest

01:48:29.455 --> 01:48:31.695
<v Speaker 0>bundles from the platform team?

01:48:32.255 --> 01:48:33.454
<v Speaker 0>Is that possible?

01:48:34.014 --> 01:48:35.934
<v Speaker 1>The latest modules maybe.

01:48:36.094 --> 01:48:37.935
<v Speaker 0>Yeah. The latest modules. So, you know, if

01:48:37.935 --> 01:48:39.775
<v Speaker 0>the platform team does provide a module, is

01:48:39.775 --> 01:48:41.130
<v Speaker 0>there any way for them to make sure

01:48:41.130 --> 01:48:42.810
<v Speaker 0>the dev teams are always upgrading to the

01:48:42.810 --> 01:48:43.770
<v Speaker 0>latest and greatest?

01:48:44.490 --> 01:48:45.130
<v Speaker 0>No.

01:48:45.370 --> 01:48:46.010
<v Speaker 0>No.

01:48:46.970 --> 01:48:49.450
<v Speaker 0>Yeah. Unless you don't specify a version in

01:48:49.450 --> 01:48:51.290
<v Speaker 1>the bundle. And every time you do an

01:48:51.290 --> 01:48:53.530
<v Speaker 1>apply, Timoni will look which is the latest

01:48:53.530 --> 01:48:55.690
<v Speaker 1>and and it will pull latest. But if

01:48:55.690 --> 01:48:58.525
<v Speaker 1>you use a digest or a version, you

01:48:58.525 --> 01:48:59.645
<v Speaker 1>pin that

01:48:59.965 --> 01:49:01.965
<v Speaker 1>module to a particular version.

01:49:02.605 --> 01:49:04.445
<v Speaker 1>Of course, we can roll out with latest

01:49:04.445 --> 01:49:05.324
<v Speaker 1>everywhere,

01:49:05.405 --> 01:49:07.245
<v Speaker 1>every time you don't apply, it will be

01:49:07.245 --> 01:49:08.125
<v Speaker 1>latest. But,

01:49:09.580 --> 01:49:12.060
<v Speaker 1>yeah, I'm not sure is that the best

01:49:12.060 --> 01:49:13.739
<v Speaker 1>approach. No. I I I don't I don't

01:49:13.739 --> 01:49:15.500
<v Speaker 0>think that's a good pattern. I'll go back

01:49:15.500 --> 01:49:16.780
<v Speaker 0>to what I said. Like, it's

01:49:17.660 --> 01:49:19.580
<v Speaker 0>when you're using these Timoni module, I I

01:49:19.580 --> 01:49:21.179
<v Speaker 0>feel like you opt in to the latest

01:49:21.179 --> 01:49:23.100
<v Speaker 0>version because you're comfortable, you've tested it, you're

01:49:23.100 --> 01:49:25.105
<v Speaker 0>happy with it. If any enforcement has to

01:49:25.105 --> 01:49:26.864
<v Speaker 0>happen, it has to be in mission control.

01:49:27.265 --> 01:49:28.864
<v Speaker 0>So I wouldn't do that this way.

01:49:29.665 --> 01:49:31.905
<v Speaker 0>But we hope that helps. Alright. We've got

01:49:31.905 --> 01:49:33.985
<v Speaker 0>one more thing to show, I I believe,

01:49:33.985 --> 01:49:35.425
<v Speaker 0>which is let's

01:49:35.505 --> 01:49:36.865
<v Speaker 0>mildly productionize

01:49:36.870 --> 01:49:37.910
<v Speaker 0>this bundle

01:49:38.150 --> 01:49:40.710
<v Speaker 0>and do some sort of secret injection. So

01:49:40.710 --> 01:49:42.310
<v Speaker 0>you did share with me

01:49:42.790 --> 01:49:43.750
<v Speaker 0>a guest,

01:49:44.630 --> 01:49:45.510
<v Speaker 0>which is here,

01:49:46.310 --> 01:49:48.950
<v Speaker 0>which let's just copy and paste it first,

01:49:48.950 --> 01:49:51.030
<v Speaker 0>and then we can run through on why

01:49:51.030 --> 01:49:53.265
<v Speaker 0>or how this is different. And this actually

01:49:53.265 --> 01:49:56.065
<v Speaker 0>also correlates to another question, the why I'm

01:49:56.065 --> 01:49:58.145
<v Speaker 0>all asked at the start of this session.

01:49:58.145 --> 01:49:59.905
<v Speaker 0>So we will tackle that too.

01:50:00.864 --> 01:50:03.105
<v Speaker 0>So my bundle. Queue, that's in the right

01:50:03.105 --> 01:50:03.344
<v Speaker 0>one.

01:50:04.860 --> 01:50:05.980
<v Speaker 0>Now here

01:50:06.380 --> 01:50:09.180
<v Speaker 0>you were specifying that we have some value

01:50:09.180 --> 01:50:10.219
<v Speaker 0>for a password

01:50:10.540 --> 01:50:13.020
<v Speaker 0>using the queue attribute where we're saying that

01:50:13.020 --> 01:50:15.420
<v Speaker 0>this password will come from a runtime string,

01:50:15.420 --> 01:50:15.900
<v Speaker 0>which is

01:50:16.554 --> 01:50:19.355
<v Speaker 0>assuming either a flag or an environment variable

01:50:19.355 --> 01:50:20.954
<v Speaker 0>on the Timoni CLI.

01:50:21.275 --> 01:50:22.874
<v Speaker 0>And this is then used

01:50:22.954 --> 01:50:25.114
<v Speaker 0>just to augment the values.

01:50:26.395 --> 01:50:28.315
<v Speaker 0>And it's also interpreted down here to the

01:50:28.315 --> 01:50:29.275
<v Speaker 0>Redis URL.

01:50:29.690 --> 01:50:31.689
<v Speaker 0>Is that the only changes in this file?

01:50:32.889 --> 01:50:34.090
<v Speaker 0>Yeah. Yeah.

01:50:34.409 --> 01:50:36.010
<v Speaker 1>I think there are more

01:50:36.409 --> 01:50:37.689
<v Speaker 1>more things.

01:50:38.010 --> 01:50:40.650
<v Speaker 1>Yeah. You can delete test enabled

01:50:40.810 --> 01:50:42.730
<v Speaker 1>through. I don't think that was in the

01:50:42.730 --> 01:50:45.775
<v Speaker 1>original one. Yeah. Delete that's the test for

01:50:45.775 --> 01:50:46.815
<v Speaker 1>Timoni for

01:50:47.375 --> 01:50:48.895
<v Speaker 1>you could disable

01:50:50.575 --> 01:50:52.415
<v Speaker 1>test for Redis.

01:50:52.655 --> 01:50:53.614
<v Speaker 1>So we only

01:50:54.335 --> 01:50:56.175
<v Speaker 0>Yeah. So what's important here is

01:50:56.760 --> 01:50:59.080
<v Speaker 0>there's a secret value that you wanna inject

01:50:59.080 --> 01:50:59.960
<v Speaker 0>into

01:50:59.960 --> 01:51:01.719
<v Speaker 0>your Timoni application.

01:51:02.840 --> 01:51:04.680
<v Speaker 0>We're saying let's get it from runtime. That's

01:51:04.680 --> 01:51:06.280
<v Speaker 0>all that's important here. And then we use

01:51:06.280 --> 01:51:08.280
<v Speaker 0>that to set the value on the Redis

01:51:08.280 --> 01:51:11.000
<v Speaker 0>deploy and interpolate it into the connection string

01:51:11.000 --> 01:51:14.225
<v Speaker 0>for the pod info. So let's copy the

01:51:14.225 --> 01:51:14.864
<v Speaker 0>command

01:51:16.225 --> 01:51:18.465
<v Speaker 0>just down here. And I think there are

01:51:18.465 --> 01:51:20.304
<v Speaker 0>multiple ways to do this, but

01:51:21.425 --> 01:51:23.665
<v Speaker 0>I'm I'm guessing right now. So let's check.

01:51:23.665 --> 01:51:23.905
<v Speaker 0>Right?

01:51:24.680 --> 01:51:27.160
<v Speaker 0>So if we paste this, what we're seeing

01:51:27.160 --> 01:51:29.480
<v Speaker 0>here is the reddest password is test,

01:51:29.800 --> 01:51:31.560
<v Speaker 0>and we're doing a bundle that

01:51:32.440 --> 01:51:35.239
<v Speaker 0>on bundle dot queue and run time from

01:51:35.480 --> 01:51:36.040
<v Speaker 0>env.

01:51:36.520 --> 01:51:38.120
<v Speaker 0>So

01:51:37.405 --> 01:51:39.965
<v Speaker 0>are there multiple ways to provide runtime values

01:51:39.965 --> 01:51:42.925
<v Speaker 0>beyond the environment? That's my first question.

01:51:43.405 --> 01:51:45.085
<v Speaker 1>Yeah. You want to do

01:51:45.645 --> 01:51:48.445
<v Speaker 1>yeah. That is for very dynamic. You want

01:51:48.445 --> 01:51:50.525
<v Speaker 1>to do an apply instead of that.

01:51:51.980 --> 01:51:54.860
<v Speaker 1>Yeah, so what we have here is

01:51:55.740 --> 01:51:56.940
<v Speaker 1>typically for

01:51:57.420 --> 01:52:00.060
<v Speaker 1>a CI system, right? You have some

01:52:01.580 --> 01:52:03.020
<v Speaker 0>I claim.

01:52:04.780 --> 01:52:05.500
<v Speaker 1>Claim. Yes.

01:52:12.725 --> 01:52:14.565
<v Speaker 1>Yeah, so in

01:52:15.365 --> 01:52:18.165
<v Speaker 1>a CI system, right, you can have these

01:52:18.165 --> 01:52:19.285
<v Speaker 1>secret stores.

01:52:19.560 --> 01:52:22.760
<v Speaker 1>I know, GitHub has one. GitLab, everybody has

01:52:22.760 --> 01:52:24.040
<v Speaker 1>it. Right? And

01:52:24.680 --> 01:52:27.080
<v Speaker 1>what you can do is read

01:52:27.080 --> 01:52:29.159
<v Speaker 1>from the CI secret source,

01:52:30.440 --> 01:52:34.145
<v Speaker 1>set an environment variable from that thing, and

01:52:34.145 --> 01:52:37.345
<v Speaker 1>then pass that through the environment variable to

01:52:37.345 --> 01:52:39.425
<v Speaker 1>the Timoni apply command.

01:52:40.225 --> 01:52:43.505
<v Speaker 1>And Timoni does not read environment variables by

01:52:43.505 --> 01:52:46.225
<v Speaker 1>default, so you need to actually tell Timoni,

01:52:46.225 --> 01:52:48.305
<v Speaker 1>hey, use the runtime from the environment,

01:52:48.720 --> 01:52:49.360
<v Speaker 1>because

01:52:50.000 --> 01:52:52.960
<v Speaker 1>this is something specific to local testing.

01:52:55.040 --> 01:52:57.840
<v Speaker 1>Say, read this password equals something, Timoni apply,

01:52:57.840 --> 01:53:01.040
<v Speaker 1>which that's just an environment variable setting, right?

01:53:02.005 --> 01:53:04.245
<v Speaker 1>It's not something specific to me that's

01:53:05.125 --> 01:53:07.045
<v Speaker 1>from the command line. Or we can do

01:53:07.045 --> 01:53:08.005
<v Speaker 1>an export

01:53:08.645 --> 01:53:09.525
<v Speaker 1>and so on.

01:53:11.845 --> 01:53:13.365
<v Speaker 1>But if you are

01:53:14.210 --> 01:53:16.850
<v Speaker 1>applying from CI, you can pass in this

01:53:16.850 --> 01:53:18.850
<v Speaker 1>way secrets through the environment

01:53:19.170 --> 01:53:21.890
<v Speaker 1>and inject them in the bundles.

01:53:21.890 --> 01:53:24.370
<v Speaker 1>Because the bundles usually where they are stored

01:53:24.370 --> 01:53:26.290
<v Speaker 1>in the Git repo, you shouldn't be placing

01:53:26.290 --> 01:53:28.530
<v Speaker 1>any sensitive information in there

01:53:29.205 --> 01:53:31.045
<v Speaker 1>if there is a way around it.

01:53:32.005 --> 01:53:34.165
<v Speaker 1>If you want to place sensitive information in

01:53:34.165 --> 01:53:34.885
<v Speaker 1>there, there

01:53:35.525 --> 01:53:37.925
<v Speaker 1>is documentation on Timoni website how you can

01:53:37.925 --> 01:53:38.885
<v Speaker 1>use SOPS,

01:53:39.365 --> 01:53:40.245
<v Speaker 1>the CLI,

01:53:40.820 --> 01:53:44.180
<v Speaker 1>encrypt some JSON or YAML file. And then

01:53:44.180 --> 01:53:46.580
<v Speaker 1>when you do a bundle apply besides the

01:53:46.580 --> 01:53:48.980
<v Speaker 1>CUE file, you can also tell Timoni, hey,

01:53:48.980 --> 01:53:50.100
<v Speaker 1>read from this

01:53:51.460 --> 01:53:54.660
<v Speaker 1>YAML file that's decrypted there in place by

01:53:54.660 --> 01:53:57.675
<v Speaker 1>SOPS and then removed and goes through the

01:53:57.675 --> 01:53:59.434
<v Speaker 1>memory and all the SOPS

01:54:00.554 --> 01:54:01.755
<v Speaker 1>operation model.

01:54:02.074 --> 01:54:03.835
<v Speaker 1>So this is one way of doing it,

01:54:03.835 --> 01:54:04.794
<v Speaker 1>right? But

01:54:05.594 --> 01:54:06.155
<v Speaker 1>when

01:54:06.554 --> 01:54:09.675
<v Speaker 1>secrets are in CI. But usually with Kubernetes,

01:54:09.675 --> 01:54:10.795
<v Speaker 1>you'd have some

01:54:11.650 --> 01:54:13.169
<v Speaker 1>external secret

01:54:13.329 --> 01:54:14.289
<v Speaker 1>controller,

01:54:14.289 --> 01:54:16.129
<v Speaker 1>or secrets are

01:54:16.690 --> 01:54:19.650
<v Speaker 1>arrived into NTCD from Vault, or stuff like

01:54:19.650 --> 01:54:22.050
<v Speaker 1>that. So in most cases, you will have

01:54:22.050 --> 01:54:22.369
<v Speaker 1>these

01:54:23.295 --> 01:54:25.615
<v Speaker 1>secret values in some

01:54:26.895 --> 01:54:28.975
<v Speaker 1>resource inside the cluster.

01:54:31.535 --> 01:54:34.015
<v Speaker 1>How there is a way with

01:54:34.815 --> 01:54:36.015
<v Speaker 1>Timoni runtimes

01:54:36.550 --> 01:54:39.270
<v Speaker 1>to tell Timoni, hey, query the cluster for

01:54:39.270 --> 01:54:42.949
<v Speaker 1>a Kubernetes secret, extract this field from here,

01:54:43.030 --> 01:54:45.590
<v Speaker 1>then use this field as the runtime value

01:54:45.590 --> 01:54:46.789
<v Speaker 1>inside the bundle.

01:54:47.270 --> 01:54:48.230
<v Speaker 1>Right? And

01:54:50.195 --> 01:54:53.475
<v Speaker 1>we can actually set the the password now

01:54:53.475 --> 01:54:55.395
<v Speaker 1>from from the cluster. So you should go

01:54:55.395 --> 01:54:57.074
<v Speaker 1>back to the gist. You will

01:54:58.195 --> 01:55:00.115
<v Speaker 1>have to create a Kubernetes secret.

01:55:08.890 --> 01:55:11.449
<v Speaker 1>So this has created a secret in

01:55:13.770 --> 01:55:15.930
<v Speaker 1>the default namespace. Now we have to create

01:55:15.930 --> 01:55:17.770
<v Speaker 1>this other file, which is a runtime.

01:55:23.054 --> 01:55:25.854
<v Speaker 1>Runtime definition. Why is this different? Because

01:55:26.094 --> 01:55:29.375
<v Speaker 1>runtimes can be reused across bundles. If you

01:55:29.375 --> 01:55:31.135
<v Speaker 1>have many bundles which have to connect to

01:55:31.135 --> 01:55:33.810
<v Speaker 1>the same Redis cluster or whatever, use same

01:55:33.810 --> 01:55:34.769
<v Speaker 1>thing.

01:55:35.010 --> 01:55:37.570
<v Speaker 1>You can reuse the runtime to not write

01:55:37.570 --> 01:55:38.530
<v Speaker 1>the query

01:55:38.770 --> 01:55:39.409
<v Speaker 1>every time.

01:56:02.390 --> 01:56:05.510
<v Speaker 1>Yeah. There is an error because diff does

01:56:05.510 --> 01:56:07.429
<v Speaker 1>not work on immutable

01:56:07.989 --> 01:56:09.110
<v Speaker 1>things, but

01:56:10.390 --> 01:56:12.630
<v Speaker 1>it has changed the

01:56:13.335 --> 01:56:15.815
<v Speaker 1>password here. And also, if you go up,

01:56:15.815 --> 01:56:17.815
<v Speaker 1>you will see the new password for the

01:56:17.815 --> 01:56:18.614
<v Speaker 1>Redis

01:56:21.015 --> 01:56:22.775
<v Speaker 1>replicas and the master

01:56:23.255 --> 01:56:24.135
<v Speaker 1>things.

01:56:25.495 --> 01:56:26.775
<v Speaker 0>Nice. And

01:56:27.175 --> 01:56:30.270
<v Speaker 1>this basically has queried the cluster for the

01:56:30.270 --> 01:56:32.110
<v Speaker 1>secret. It went to the secret and this

01:56:32.110 --> 01:56:34.270
<v Speaker 1>is how you can specify that query.

01:56:35.150 --> 01:56:37.310
<v Speaker 0>Yeah. This is one of my my favorite

01:56:37.310 --> 01:56:39.630
<v Speaker 0>features. Like, coming back to that whole platform

01:56:39.630 --> 01:56:42.110
<v Speaker 0>dev thing from the question earlier, you know,

01:56:42.110 --> 01:56:44.574
<v Speaker 0>like the platform team goes on to hopefully

01:56:44.574 --> 01:56:46.415
<v Speaker 0>puts out a lot of effort to provide

01:56:46.415 --> 01:56:48.414
<v Speaker 0>in the platform with all of the

01:56:48.655 --> 01:56:50.655
<v Speaker 0>end cluster add ons that you need, the

01:56:50.655 --> 01:56:53.534
<v Speaker 0>external secrets operator hooked up to KMSs or

01:56:53.534 --> 01:56:54.175
<v Speaker 0>vaults,

01:56:54.574 --> 01:56:57.614
<v Speaker 0>you know, DNS records, all those external bulbs

01:56:57.614 --> 01:56:59.295
<v Speaker 0>that you need for your application to actually

01:56:59.295 --> 01:57:01.160
<v Speaker 0>run successfully and being able to do this

01:57:01.160 --> 01:57:02.840
<v Speaker 0>sort of dynamic lookup

01:57:03.240 --> 01:57:05.880
<v Speaker 0>and inject this into this money runtime. I

01:57:05.880 --> 01:57:07.560
<v Speaker 0>think it just

01:57:07.880 --> 01:57:10.200
<v Speaker 0>simplifies a whole lot of what we're trying

01:57:10.200 --> 01:57:10.760
<v Speaker 0>to do,

01:57:11.240 --> 01:57:12.840
<v Speaker 0>especially when you start getting into get ups

01:57:12.840 --> 01:57:14.520
<v Speaker 0>and you've got controllers and things like that

01:57:14.520 --> 01:57:16.605
<v Speaker 0>there. Because I mean there is a Timoni

01:57:16.605 --> 01:57:19.005
<v Speaker 0>controller right? That runs all of this in

01:57:19.005 --> 01:57:22.125
<v Speaker 0>cluster for you. No. No, I thought there

01:57:22.125 --> 01:57:22.685
<v Speaker 0>was.

01:57:24.205 --> 01:57:26.125
<v Speaker 0>Alright. That's next week's mission Stefan.

01:57:30.870 --> 01:57:33.749
<v Speaker 0>All right, this is awesome. Very, very cool.

01:57:34.150 --> 01:57:34.869
<v Speaker 0>So

01:57:35.030 --> 01:57:37.510
<v Speaker 0>I think we're showing everything right? I'll stop

01:57:37.510 --> 01:57:39.830
<v Speaker 0>sharing my screen. Right, cool. So if anyone

01:57:39.830 --> 01:57:41.909
<v Speaker 0>has any last minute questions now is your

01:57:41.909 --> 01:57:43.590
<v Speaker 0>time to get them in for Stefan before

01:57:43.590 --> 01:57:45.395
<v Speaker 0>we wrap up. This session has gone on

01:57:45.395 --> 01:57:47.395
<v Speaker 0>a little bit longer than we did anticipate,

01:57:47.555 --> 01:57:49.155
<v Speaker 0>but I've had a whole lot of fun.

01:57:49.155 --> 01:57:51.075
<v Speaker 0>So just, thank you so much Stefan for

01:57:51.075 --> 01:57:53.235
<v Speaker 0>joining me and guiding us through this. If

01:57:54.435 --> 01:57:55.795
<v Speaker 0>you're happy to, well, we just wait a

01:57:55.795 --> 01:57:58.199
<v Speaker 0>few minutes for any last minute questions. Sure.

01:57:58.200 --> 01:58:00.360
<v Speaker 0>What what's next? Like, what's what's on your

01:58:00.360 --> 01:58:02.280
<v Speaker 0>roadmap for for Timoni?

01:58:04.040 --> 01:58:06.520
<v Speaker 1>So I have this proposal around

01:58:06.920 --> 01:58:10.280
<v Speaker 1>multi cluster deployments where the runtime definition that

01:58:10.280 --> 01:58:11.080
<v Speaker 1>you've played with,

01:58:12.365 --> 01:58:15.405
<v Speaker 1>the size values will also have a list

01:58:15.405 --> 01:58:16.364
<v Speaker 1>of clusters.

01:58:18.205 --> 01:58:20.765
<v Speaker 1>So you can run a single apply command

01:58:20.765 --> 01:58:23.005
<v Speaker 1>that will target all these clusters, and it

01:58:23.005 --> 01:58:24.765
<v Speaker 1>will get values from each cluster,

01:58:25.420 --> 01:58:26.459
<v Speaker 1>and so on.

01:58:27.659 --> 01:58:29.899
<v Speaker 1>That's that's one of my

01:58:31.019 --> 01:58:33.099
<v Speaker 1>things that I would like to do,

01:58:33.659 --> 01:58:36.300
<v Speaker 1>next when I have the time to work

01:58:36.300 --> 01:58:36.780
<v Speaker 1>on it.

01:58:39.895 --> 01:58:41.814
<v Speaker 1>Yeah. And slowly, want to

01:58:42.375 --> 01:58:43.014
<v Speaker 1>know

01:58:43.574 --> 01:58:45.815
<v Speaker 1>it all depends in the end on the

01:58:45.815 --> 01:58:47.975
<v Speaker 1>amount of people using it and the feedback

01:58:47.975 --> 01:58:49.014
<v Speaker 1>I'm getting

01:58:49.494 --> 01:58:51.735
<v Speaker 1>for it. But I would be like, I

01:58:51.735 --> 01:58:54.110
<v Speaker 1>don't know, Q1 next year to stabilize the

01:58:54.110 --> 01:58:57.469
<v Speaker 1>API. Everything is V1 alpha one right now.

01:58:57.469 --> 01:58:58.830
<v Speaker 1>I think I have a good

01:59:00.190 --> 01:59:02.110
<v Speaker 1>I have some good concepts

01:59:03.070 --> 01:59:04.110
<v Speaker 1>implemented there.

01:59:05.150 --> 01:59:06.670
<v Speaker 1>Could just label it

01:59:07.185 --> 01:59:09.664
<v Speaker 1>v one, beta one, but I I

01:59:10.385 --> 01:59:12.945
<v Speaker 1>yeah. It took us three years to make

01:59:12.945 --> 01:59:15.425
<v Speaker 1>Flux version two GA, and I'm not the

01:59:15.425 --> 01:59:17.744
<v Speaker 1>type of person that rushes into

01:59:17.985 --> 01:59:19.665
<v Speaker 1>labeling things GA

01:59:19.940 --> 01:59:21.219
<v Speaker 1>or stable.

01:59:21.460 --> 01:59:22.900
<v Speaker 1>So I think I will

01:59:24.500 --> 01:59:26.260
<v Speaker 1>wait more before

01:59:26.580 --> 01:59:29.139
<v Speaker 1>getting more and more users, more feedback, and

01:59:29.139 --> 01:59:30.979
<v Speaker 1>and stabilize the API.

01:59:31.219 --> 01:59:35.060
<v Speaker 1>Only after the API is in stable shape

01:59:37.855 --> 01:59:40.255
<v Speaker 1>can be a discussion around the Timoni controller

01:59:40.255 --> 01:59:42.255
<v Speaker 1>for Flux, the Timoni controller on its own

01:59:42.255 --> 01:59:43.855
<v Speaker 1>or whatever whatever

01:59:44.575 --> 01:59:45.935
<v Speaker 1>the options are.

01:59:46.335 --> 01:59:48.095
<v Speaker 1>Also, around controllers,

01:59:48.095 --> 01:59:48.495
<v Speaker 1>I

01:59:49.215 --> 01:59:49.615
<v Speaker 1>I

01:59:50.530 --> 01:59:52.690
<v Speaker 1>really don't like the idea that you would

01:59:52.690 --> 01:59:54.850
<v Speaker 1>be you'll have to write the bundle in

01:59:54.850 --> 01:59:56.050
<v Speaker 1>a YAML file

01:59:57.010 --> 01:59:57.810
<v Speaker 1>because

01:59:58.050 --> 02:00:01.170
<v Speaker 1>KubeCTL apply or the API server does not

02:00:01.170 --> 02:00:03.650
<v Speaker 1>understand CUE. It only understands YAML

02:00:03.975 --> 02:00:06.614
<v Speaker 1>or JSON or Kubernetes

02:00:06.614 --> 02:00:07.494
<v Speaker 1>objects.

02:00:07.975 --> 02:00:11.574
<v Speaker 1>So maybe I'll write my Kubernetes API server

02:00:11.574 --> 02:00:12.455
<v Speaker 1>extension

02:00:12.455 --> 02:00:15.415
<v Speaker 1>that you can do on that. It actually

02:00:15.415 --> 02:00:17.895
<v Speaker 1>understands CUE, and you don't need to

02:00:18.870 --> 02:00:20.470
<v Speaker 1>write YAML at all

02:00:21.030 --> 02:00:22.950
<v Speaker 1>to receive

02:00:24.230 --> 02:00:26.950
<v Speaker 1>the CUE and do the things there. I'm

02:00:26.950 --> 02:00:27.670
<v Speaker 1>not sure.

02:00:28.390 --> 02:00:30.390
<v Speaker 1>There are so many ideas floating around.

02:00:32.485 --> 02:00:34.005
<v Speaker 1>But yeah, at some point there will be

02:00:34.005 --> 02:00:34.885
<v Speaker 1>a controller.

02:00:35.445 --> 02:00:37.685
<v Speaker 1>How it will look? What I know for

02:00:37.685 --> 02:00:39.445
<v Speaker 1>sure is that I don't want

02:00:40.725 --> 02:00:43.285
<v Speaker 1>for the custom resource to be a representation

02:00:43.285 --> 02:00:45.285
<v Speaker 1>of an instance. I want the custom resource

02:00:45.285 --> 02:00:47.710
<v Speaker 1>to be a representation of a bundle, because

02:00:47.710 --> 02:00:50.750
<v Speaker 1>that's a proper app definition made out of

02:00:50.750 --> 02:00:52.510
<v Speaker 1>many pieces with things,

02:00:52.989 --> 02:00:55.389
<v Speaker 1>inputs from the cluster, and so on. So

02:00:55.469 --> 02:00:57.149
<v Speaker 1>I think that would be,

02:00:58.670 --> 02:01:02.305
<v Speaker 1>the API object that that Kubernetes will will

02:01:02.305 --> 02:01:03.105
<v Speaker 1>deal with.

02:01:04.305 --> 02:01:05.025
<v Speaker 0>Yeah.

02:01:07.105 --> 02:01:08.304
<v Speaker 0>I know not

02:01:08.705 --> 02:01:10.305
<v Speaker 0>to go too far off track. Right? But

02:01:10.305 --> 02:01:11.905
<v Speaker 0>going over to the Flex CT stage of

02:01:11.905 --> 02:01:13.905
<v Speaker 0>things, there was a discussion, I think, some

02:01:13.905 --> 02:01:14.545
<v Speaker 0>point last year

02:01:15.280 --> 02:01:18.480
<v Speaker 0>about potentially allowing the customized controller to duct

02:01:18.480 --> 02:01:20.560
<v Speaker 0>tape the sources. Is that something that's still

02:01:20.560 --> 02:01:21.440
<v Speaker 0>being considered?

02:01:22.080 --> 02:01:23.040
<v Speaker 0>Do you know what I mean by that

02:01:23.040 --> 02:01:25.120
<v Speaker 0>or should I wouldn't worry Duct tape. The

02:01:25.120 --> 02:01:27.520
<v Speaker 1>source. Duct tape. Sorry. It's my Scottish accent.

02:01:27.985 --> 02:01:30.225
<v Speaker 0>So you know how the customized controller has

02:01:30.225 --> 02:01:32.465
<v Speaker 0>got hard coded references to like the OCI

02:01:32.465 --> 02:01:35.345
<v Speaker 0>repository, the GET repository, etcetera. Like if we

02:01:35.345 --> 02:01:37.425
<v Speaker 0>could just say it accepts anything that has

02:01:37.425 --> 02:01:39.665
<v Speaker 0>these sets of fields on this on the

02:01:39.665 --> 02:01:41.585
<v Speaker 0>status or spec and it doesn't have to

02:01:41.585 --> 02:01:43.520
<v Speaker 0>be one of those, you know, duct typing.

02:01:43.520 --> 02:01:45.360
<v Speaker 0>Right? It just it looks like a source

02:01:45.360 --> 02:01:47.040
<v Speaker 0>provider, but it does it's not one that

02:01:47.040 --> 02:01:48.000
<v Speaker 0>we know of.

02:01:48.640 --> 02:01:50.960
<v Speaker 0>Would that simplify things for a Timoni controller

02:01:50.960 --> 02:01:52.000
<v Speaker 0>where you could have

02:01:52.640 --> 02:01:55.520
<v Speaker 0>a simple controller that monitored the OCI repository,

02:01:55.520 --> 02:01:57.280
<v Speaker 0>run the Timoni command in the cluster and

02:01:57.280 --> 02:01:59.465
<v Speaker 0>spy out a new source? Like, that that

02:01:59.465 --> 02:02:01.144
<v Speaker 0>seems like it would be a nice approach.

02:02:01.625 --> 02:02:02.824
<v Speaker 1>No. No?

02:02:03.065 --> 02:02:04.344
<v Speaker 1>Definitely not.

02:02:04.585 --> 02:02:06.505
<v Speaker 0>Alright. I'll show that. That's quite something that's

02:02:06.505 --> 02:02:08.744
<v Speaker 1>about customized. It does patches,

02:02:08.744 --> 02:02:12.130
<v Speaker 1>which shouldn't be in any way something that

02:02:12.130 --> 02:02:14.690
<v Speaker 1>you deal with Timoni. Right? Timoni has the

02:02:14.690 --> 02:02:15.969
<v Speaker 1>stage apply,

02:02:17.250 --> 02:02:19.490
<v Speaker 1>all of that. Right? It should be the

02:02:19.490 --> 02:02:21.489
<v Speaker 1>Timoni reconciler that

02:02:21.650 --> 02:02:23.810
<v Speaker 1>sets the cluster state,

02:02:23.890 --> 02:02:27.865
<v Speaker 1>not customized controller, which does customized things. And

02:02:27.865 --> 02:02:30.425
<v Speaker 0>also those plain Kubernetes YAML manifest was the

02:02:30.425 --> 02:02:32.105
<v Speaker 0>part I was thinking about hooking into. Right?

02:02:32.105 --> 02:02:34.345
<v Speaker 0>It's just have a Timoni

02:02:34.665 --> 02:02:36.985
<v Speaker 0>controller that just spits out the the YAML

02:02:36.985 --> 02:02:40.070
<v Speaker 0>for the customized controller to apply. That's already

02:02:40.070 --> 02:02:41.830
<v Speaker 1>how you can do it. You do

02:02:42.790 --> 02:02:44.150
<v Speaker 0>I can't do it in cluster, right? I

02:02:44.150 --> 02:02:45.670
<v Speaker 0>would have to I would have to run

02:02:45.670 --> 02:02:47.350
<v Speaker 0>it locally, generate the YAML, and push it

02:02:47.350 --> 02:02:48.869
<v Speaker 0>somewhere, right? Yeah.

02:02:49.430 --> 02:02:51.685
<v Speaker 1>Yeah. You can run a registry in cluster.

02:02:51.685 --> 02:02:53.925
<v Speaker 1>Very tiny. There are many registries out there

02:02:53.925 --> 02:02:56.565
<v Speaker 1>that can run-in cluster. But I think a

02:02:56.565 --> 02:02:58.725
<v Speaker 1>Timoni controller should be an applier

02:03:00.085 --> 02:03:02.965
<v Speaker 1>before anything because it has its own

02:03:03.365 --> 02:03:04.325
<v Speaker 1>mechanisms

02:03:04.320 --> 02:03:07.280
<v Speaker 1>which are very different from Flux customized controller

02:03:07.280 --> 02:03:08.800
<v Speaker 1>or Flux Helm controller.

02:03:10.320 --> 02:03:11.199
<v Speaker 0>Yeah.

02:03:11.199 --> 02:03:12.800
<v Speaker 0>Well, we can schedule a livestream for how

02:03:12.800 --> 02:03:14.239
<v Speaker 0>long do you need to write that? Two

02:03:14.239 --> 02:03:14.880
<v Speaker 0>weeks? Three weeks?

02:03:17.145 --> 02:03:17.864
<v Speaker 1>Don't know.

02:03:18.744 --> 02:03:20.104
<v Speaker 1>Yeah, maybe.

02:03:22.264 --> 02:03:23.945
<v Speaker 1>The API is all set,

02:03:25.465 --> 02:03:27.864
<v Speaker 1>which is the most important thing right now.

02:03:27.864 --> 02:03:30.264
<v Speaker 1>And I also like to get

02:03:31.369 --> 02:03:34.329
<v Speaker 1>good feeling of is the user experience for

02:03:34.329 --> 02:03:36.249
<v Speaker 1>authoring CUE modules

02:03:37.449 --> 02:03:38.169
<v Speaker 1>good?

02:03:38.409 --> 02:03:40.889
<v Speaker 1>Are going people are people going to write

02:03:40.889 --> 02:03:43.449
<v Speaker 1>modules? If if they aren't and

02:03:43.770 --> 02:03:45.369
<v Speaker 1>CUE is not appealing to them,

02:03:46.605 --> 02:03:48.685
<v Speaker 1>why would I continue this project? I'll just

02:03:48.685 --> 02:03:51.405
<v Speaker 1>archive it and move move forward. It's

02:03:52.045 --> 02:03:53.485
<v Speaker 1>very tied to the language.

02:03:53.805 --> 02:03:54.445
<v Speaker 1>Alright.

02:03:55.405 --> 02:03:57.405
<v Speaker 0>Yeah. I'd be very sad to see that.

02:03:57.405 --> 02:03:59.645
<v Speaker 0>I know the CUE team are actively working

02:03:59.850 --> 02:04:01.850
<v Speaker 0>on their language server implementation.

02:04:01.850 --> 02:04:03.930
<v Speaker 0>I know I spoke to Paul Jolley recently,

02:04:03.930 --> 02:04:05.370
<v Speaker 0>and he said that that was his next

02:04:05.370 --> 02:04:05.850
<v Speaker 0>job

02:04:06.330 --> 02:04:09.050
<v Speaker 0>is to improve that authoring experience for people

02:04:09.050 --> 02:04:12.090
<v Speaker 0>actually rating CUE. I know they're also handling

02:04:12.090 --> 02:04:13.930
<v Speaker 0>the module stuff, but you covered that earlier

02:04:13.930 --> 02:04:15.895
<v Speaker 0>on in the session. So. Yeah. I I

02:04:15.895 --> 02:04:18.375
<v Speaker 1>mean, for me, the fact that you can

02:04:18.375 --> 02:04:19.175
<v Speaker 1>share,

02:04:19.655 --> 02:04:22.535
<v Speaker 1>bits of CUE easily is

02:04:22.935 --> 02:04:25.815
<v Speaker 1>not the top problem for me with CUE.

02:04:25.815 --> 02:04:26.775
<v Speaker 1>My my my

02:04:27.095 --> 02:04:31.175
<v Speaker 1>major issue with CUE is definitely a lack

02:04:30.240 --> 02:04:32.720
<v Speaker 1>of a language server. I cannot do go

02:04:32.720 --> 02:04:34.880
<v Speaker 1>to definition. I don't have auto completion. I

02:04:34.880 --> 02:04:37.600
<v Speaker 1>don't have anything. It's all the things that

02:04:37.680 --> 02:04:40.080
<v Speaker 1>are supposed to have because everything is type

02:04:40.080 --> 02:04:42.560
<v Speaker 1>safe. Everything is so nice. Like when it

02:04:42.560 --> 02:04:43.600
<v Speaker 1>comes to the editor,

02:04:44.265 --> 02:04:46.745
<v Speaker 1>you are in V mode with nothing else,

02:04:46.745 --> 02:04:48.344
<v Speaker 1>right? Not even

02:04:48.585 --> 02:04:51.065
<v Speaker 1>yeah, I don't know. Even

02:04:51.385 --> 02:04:52.585
<v Speaker 1>writing YAML

02:04:52.824 --> 02:04:55.465
<v Speaker 1>has auto completion now for Kubernetes in Versus

02:04:55.465 --> 02:04:56.505
<v Speaker 1>Code and IntelliJ.

02:04:57.159 --> 02:04:59.719
<v Speaker 1>CUE doesn't even have that. So, yeah, unless

02:04:59.719 --> 02:05:02.039
<v Speaker 1>they get there, I don't see how people

02:05:02.039 --> 02:05:02.679
<v Speaker 1>will

02:05:04.119 --> 02:05:05.719
<v Speaker 1>enjoy writing CUE.

02:05:06.599 --> 02:05:09.559
<v Speaker 1>Yeah. Also, Copilot does not understand CUE, which

02:05:09.559 --> 02:05:10.360
<v Speaker 1>is kind of fun.

02:05:13.135 --> 02:05:15.374
<v Speaker 0>It'll get there. These are all easy things

02:05:15.614 --> 02:05:17.695
<v Speaker 0>to fix. I hope. Right? And I I

02:05:17.695 --> 02:05:19.695
<v Speaker 0>hope these will be fixed quickly and in

02:05:19.695 --> 02:05:21.375
<v Speaker 0>six months time at the next CUE con

02:05:21.375 --> 02:05:23.215
<v Speaker 0>in Paris, can all Yeah. Have a laugh

02:05:23.215 --> 02:05:25.215
<v Speaker 0>and see things are much better now.

02:05:25.375 --> 02:05:27.775
<v Speaker 1>But but but we'll see, you know. Yeah.

02:05:28.255 --> 02:05:29.810
<v Speaker 0>I think we have any more questions from

02:05:29.810 --> 02:05:32.050
<v Speaker 0>the audience. So I'll just say again, thank

02:05:32.050 --> 02:05:33.650
<v Speaker 0>you so much. Like, I I think that's

02:05:33.650 --> 02:05:35.570
<v Speaker 0>one of the most interesting projects in the

02:05:35.570 --> 02:05:37.730
<v Speaker 0>CNCF landscape right now. I hope people,

02:05:38.290 --> 02:05:38.929
<v Speaker 0>one,

02:05:39.330 --> 02:05:41.970
<v Speaker 0>like what they're seeing and two, start going

02:05:41.970 --> 02:05:45.505
<v Speaker 0>out there doing tutorials, blogs, videos and contributing

02:05:45.505 --> 02:05:48.304
<v Speaker 0>wherever possible because you know, these open source

02:05:48.304 --> 02:05:51.104
<v Speaker 0>projects need momentum to keep it interesting

02:05:51.264 --> 02:05:52.864
<v Speaker 0>for you to be doing all the heavy

02:05:52.864 --> 02:05:54.304
<v Speaker 0>lifting and hard work. And I hope that

02:05:54.304 --> 02:05:55.505
<v Speaker 0>other people come along to help you with

02:05:55.505 --> 02:05:57.720
<v Speaker 0>that as well. Thank you again. Thank you

02:05:57.720 --> 02:05:59.480
<v Speaker 1>very much, David for inviting me. It was

02:05:59.480 --> 02:06:02.040
<v Speaker 1>like, this was my first ever talk on

02:06:02.040 --> 02:06:04.040
<v Speaker 1>Timoni and I really enjoyed it.

02:06:04.680 --> 02:06:07.080
<v Speaker 0>Awesome. Well, thank you all and feel free

02:06:07.080 --> 02:06:08.840
<v Speaker 0>to leave comments after the fact. I'll do

02:06:08.840 --> 02:06:10.600
<v Speaker 0>my best to route them to Stefan as

02:06:10.600 --> 02:06:12.040
<v Speaker 0>they come in and we'll see you all

02:06:12.040 --> 02:06:14.317
<v Speaker 0>next time. Have a wonderful weekend.
