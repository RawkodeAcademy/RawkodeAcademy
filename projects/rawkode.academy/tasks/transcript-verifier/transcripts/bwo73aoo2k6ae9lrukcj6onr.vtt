WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 980fb024-749c-4314-a4d7-476f638e12b7
Created: 2025-04-29T13:30:29.000Z
Duration: 754.3532
Channels: 1

00:00:00.000 --> 00:00:02.639
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:00:02.639 --> 00:00:05.279
<v Speaker 0>I'm your host, David Flanagan. Today, we are

00:00:05.279 --> 00:00:07.680
<v Speaker 0>taking a look at a real world application

00:00:07.680 --> 00:00:09.280
<v Speaker 0>using Fermion Spin.

00:00:09.519 --> 00:00:11.440
<v Speaker 0>Why am I saying real world?

00:00:11.840 --> 00:00:14.480
<v Speaker 0>Well, I wanted to build something that was

00:00:14.480 --> 00:00:17.315
<v Speaker 0>topical and that being some sort of AI

00:00:17.315 --> 00:00:19.875
<v Speaker 0>integration that shows you how to build real

00:00:19.875 --> 00:00:22.435
<v Speaker 0>applications with Fermion Spin. We're going to do

00:00:22.435 --> 00:00:24.515
<v Speaker 0>this with a multi component application.

00:00:24.835 --> 00:00:27.794
<v Speaker 0>We'll be using Spin's static file server to

00:00:27.794 --> 00:00:28.755
<v Speaker 0>serve HTML.

00:00:29.120 --> 00:00:31.360
<v Speaker 0>The simple HTML we're using today is just

00:00:31.360 --> 00:00:33.440
<v Speaker 0>a very simple form that will allow you

00:00:33.440 --> 00:00:35.520
<v Speaker 0>to submit a request to the back end

00:00:35.520 --> 00:00:38.320
<v Speaker 0>API. The second component on our Spin application

00:00:38.320 --> 00:00:40.960
<v Speaker 0>is a JavaScript back end component,

00:00:41.200 --> 00:00:43.760
<v Speaker 0>which will actually make an HTTP request

00:00:44.105 --> 00:00:47.305
<v Speaker 0>with authenticated secure credentials to the open API

00:00:47.305 --> 00:00:50.105
<v Speaker 0>service and give us a response which we

00:00:50.105 --> 00:00:52.585
<v Speaker 0>will display on the screen. Now this is

00:00:52.585 --> 00:00:55.065
<v Speaker 0>real world and that this would hopefully mimic

00:00:55.065 --> 00:00:57.065
<v Speaker 0>what you would want to do with Fermion

00:00:57.065 --> 00:00:59.660
<v Speaker 0>Spin and your real jobs, your day, your

00:00:59.660 --> 00:01:02.220
<v Speaker 0>real hobbies, your real side projects and so

00:01:02.220 --> 00:01:02.780
<v Speaker 0>forth.

00:01:03.180 --> 00:01:05.660
<v Speaker 0>Spin is great allowing you to componentize

00:01:05.660 --> 00:01:08.620
<v Speaker 0>multiple facets of your application. Here API and

00:01:08.620 --> 00:01:10.540
<v Speaker 0>front end, but that could be micro service

00:01:10.540 --> 00:01:14.095
<v Speaker 0>architectures where you have ten, twenty, 50 different

00:01:14.095 --> 00:01:17.215
<v Speaker 0>components all working together as one cohesive unit.

00:01:17.295 --> 00:01:19.215
<v Speaker 0>We're working with a third party service which

00:01:19.215 --> 00:01:21.135
<v Speaker 0>means that we have secure credentials we need

00:01:21.135 --> 00:01:23.295
<v Speaker 0>to inject in to our application.

00:01:23.855 --> 00:01:26.335
<v Speaker 0>And like most applications that have users and

00:01:26.335 --> 00:01:28.710
<v Speaker 0>growth, you're probably going to need a front

00:01:28.710 --> 00:01:30.710
<v Speaker 0>end. And Fairway on Spin allows us to

00:01:30.710 --> 00:01:33.270
<v Speaker 0>keep this very simple by just putting HTML

00:01:33.270 --> 00:01:35.990
<v Speaker 0>into a static file server. Of course, it

00:01:35.990 --> 00:01:38.470
<v Speaker 0>doesn't just have to be static HTML.

00:01:38.710 --> 00:01:39.830
<v Speaker 0>You could use Next.

00:01:40.655 --> 00:01:43.935
<v Speaker 0>Astro or any other static site generating capability

00:01:43.935 --> 00:01:45.135
<v Speaker 0>front end framework.

00:01:45.295 --> 00:01:46.655
<v Speaker 0>As long as this spits out a build

00:01:46.655 --> 00:01:49.215
<v Speaker 0>directory, you can serve it with Fermion Spin.

00:01:49.615 --> 00:01:51.695
<v Speaker 0>And in fact, in this video today, we're

00:01:51.695 --> 00:01:54.095
<v Speaker 0>going to take my crude HTML and deliver

00:01:54.095 --> 00:01:55.134
<v Speaker 0>it with Astro.

00:01:55.510 --> 00:01:58.150
<v Speaker 0>So let's dive right in. So let's set

00:01:58.150 --> 00:02:00.070
<v Speaker 0>the scene and see where we are right

00:02:00.070 --> 00:02:03.190
<v Speaker 0>now. Currently, we have a spin application which

00:02:03.190 --> 00:02:05.110
<v Speaker 0>has the two components I mentioned on the

00:02:05.110 --> 00:02:07.990
<v Speaker 0>introduction. The first component as our real app

00:02:07.990 --> 00:02:11.795
<v Speaker 0>OpenAI language guesser. That's right. We're gonna allow

00:02:11.795 --> 00:02:15.155
<v Speaker 0>the user to input any arbitrary language text.

00:02:15.315 --> 00:02:17.635
<v Speaker 0>We're gonna send that to OpenAI and ask

00:02:17.635 --> 00:02:20.194
<v Speaker 0>it to qualify it, to tell us which

00:02:20.194 --> 00:02:22.194
<v Speaker 0>language it thinks it is. We will then

00:02:22.194 --> 00:02:24.460
<v Speaker 0>return this to the user. We're building this

00:02:24.460 --> 00:02:26.140
<v Speaker 0>in JavaScript and we'll take a look at

00:02:26.140 --> 00:02:27.660
<v Speaker 0>the tool chain for doing that in just

00:02:27.660 --> 00:02:29.740
<v Speaker 0>a moment. As with all Spin applications and

00:02:29.740 --> 00:02:31.420
<v Speaker 0>if you haven't seen one before,

00:02:31.740 --> 00:02:33.420
<v Speaker 0>check out the rest of this course on

00:02:33.420 --> 00:02:35.820
<v Speaker 0>my YouTube channel. There's over five hours of

00:02:35.820 --> 00:02:37.865
<v Speaker 0>content to show you how to build Spin

00:02:37.865 --> 00:02:39.305
<v Speaker 0>applications in Rust,

00:02:39.545 --> 00:02:40.265
<v Speaker 0>Python,

00:02:40.345 --> 00:02:41.865
<v Speaker 0>dot net, JavaScript

00:02:41.865 --> 00:02:44.105
<v Speaker 0>and more. Now because we need to use

00:02:44.105 --> 00:02:46.505
<v Speaker 0>a secure secret and actually I shouldn't have

00:02:46.505 --> 00:02:47.945
<v Speaker 0>ever quoted that, this is a real secure

00:02:47.945 --> 00:02:50.185
<v Speaker 0>secret. This is a real API token for

00:02:50.185 --> 00:02:51.145
<v Speaker 0>my OpenAI

00:02:51.145 --> 00:02:53.440
<v Speaker 0>account. So we say that we expect some

00:02:53.440 --> 00:02:55.440
<v Speaker 0>piece of configuration and our component,

00:02:55.680 --> 00:02:58.720
<v Speaker 0>notably, we expect the OpenAI token. Now we're

00:02:58.720 --> 00:03:00.960
<v Speaker 0>going to render this from a variable

00:03:01.280 --> 00:03:02.560
<v Speaker 0>and we'll come back to that in just

00:03:02.560 --> 00:03:04.800
<v Speaker 0>a second. Because Spin allows us to have

00:03:04.800 --> 00:03:06.240
<v Speaker 0>multi component applications,

00:03:06.495 --> 00:03:08.495
<v Speaker 0>we have to set up a rip or

00:03:08.495 --> 00:03:10.655
<v Speaker 0>a rip prefix that tells it to send

00:03:10.655 --> 00:03:13.535
<v Speaker 0>all the requests from that to this component.

00:03:13.614 --> 00:03:15.455
<v Speaker 0>We're gonna keep our API simple and see

00:03:15.455 --> 00:03:17.935
<v Speaker 0>the anything that matches slash API will go

00:03:17.935 --> 00:03:20.520
<v Speaker 0>to the JavaScript component. Next, we're going to

00:03:20.520 --> 00:03:23.160
<v Speaker 0>use our build step. For our build step,

00:03:23.160 --> 00:03:25.880
<v Speaker 0>we're telling to run NPM run build.

00:03:25.880 --> 00:03:28.040
<v Speaker 0>If we pop open our package dot JSON,

00:03:28.040 --> 00:03:30.200
<v Speaker 0>we'll see here that we use a webpack

00:03:30.200 --> 00:03:31.240
<v Speaker 0>in production mode

00:03:31.815 --> 00:03:34.535
<v Speaker 0>and spend a JS to Wasm plugin to

00:03:34.535 --> 00:03:38.055
<v Speaker 0>compile our JavaScript application to a WebAssembly

00:03:38.055 --> 00:03:39.415
<v Speaker 0>Wasm binary.

00:03:39.495 --> 00:03:41.335
<v Speaker 0>As such, this is the same binary that

00:03:41.335 --> 00:03:43.255
<v Speaker 0>we provide as a component source.

00:03:43.620 --> 00:03:45.940
<v Speaker 0>Next, we have to tell the spin application

00:03:45.940 --> 00:03:48.740
<v Speaker 0>that we have one required variable or this

00:03:48.740 --> 00:03:50.900
<v Speaker 0>application will not work. Here, I'm just in

00:03:50.900 --> 00:03:54.260
<v Speaker 0>open a I underscore token is required.

00:03:54.340 --> 00:03:56.420
<v Speaker 0>Okay. Let's take a look at our last

00:03:56.420 --> 00:03:58.875
<v Speaker 0>component. This is the static file server that

00:03:58.875 --> 00:04:00.235
<v Speaker 0>will serve our assets.

00:04:00.315 --> 00:04:03.035
<v Speaker 0>Currently, a single HTML file. We use this

00:04:03.035 --> 00:04:05.995
<v Speaker 0>long line source here because Spin has the

00:04:05.995 --> 00:04:09.275
<v Speaker 0>ability to consume Wasm Spin modules anywhere on

00:04:09.275 --> 00:04:12.450
<v Speaker 0>the Internet. We're pulling this from a GitHub

00:04:12.450 --> 00:04:16.209
<v Speaker 0>release artifact on the spin fail server repository.

00:04:16.930 --> 00:04:18.850
<v Speaker 0>We can give this an ID, notably we

00:04:18.850 --> 00:04:21.250
<v Speaker 0>call this one front end. Novel,

00:04:21.410 --> 00:04:23.565
<v Speaker 0>not so much. Then we configure the files

00:04:23.565 --> 00:04:25.085
<v Speaker 0>that we want to serve and in this

00:04:25.085 --> 00:04:26.845
<v Speaker 0>case, we're going to serve the front end

00:04:26.845 --> 00:04:30.445
<v Speaker 0>directory, which has a single index dot HTML.

00:04:31.005 --> 00:04:33.645
<v Speaker 0>Here, we just take the text, submit,

00:04:33.885 --> 00:04:36.045
<v Speaker 0>and send it to the API endpoint.

00:04:36.365 --> 00:04:37.245
<v Speaker 0>Nothing fancy,

00:04:37.720 --> 00:04:39.320
<v Speaker 0>but we're going to change that in a

00:04:39.320 --> 00:04:42.200
<v Speaker 0>moment. Next, we can configure the fail server

00:04:42.280 --> 00:04:45.560
<v Speaker 0>to fall back to another path if required.

00:04:46.040 --> 00:04:47.960
<v Speaker 0>Here we're saying that the fallback path is

00:04:47.960 --> 00:04:49.320
<v Speaker 0>index dot HTML.

00:04:49.480 --> 00:04:51.880
<v Speaker 0>This just means that on our component which

00:04:51.880 --> 00:04:54.655
<v Speaker 0>has a root prefix of slash, meaning anything

00:04:54.655 --> 00:04:56.735
<v Speaker 0>slash except API

00:04:56.815 --> 00:04:59.055
<v Speaker 0>will go to our static file server component.

00:04:59.375 --> 00:05:01.855
<v Speaker 0>If that file doesn't exist, we just return

00:05:01.855 --> 00:05:02.975
<v Speaker 0>the index.

00:05:02.975 --> 00:05:04.655
<v Speaker 0>It just means that we can hit local

00:05:04.655 --> 00:05:07.590
<v Speaker 0>host port 2,000 with nothing and get the

00:05:07.590 --> 00:05:09.110
<v Speaker 0>correct page. So

00:05:09.350 --> 00:05:12.150
<v Speaker 0>does it work? Well, it does. On our

00:05:12.150 --> 00:05:15.670
<v Speaker 0>command line, we're currently running our spin build

00:05:16.710 --> 00:05:19.510
<v Speaker 0>dash dash up command, which will build this

00:05:19.510 --> 00:05:21.685
<v Speaker 0>and spin up our project. We can pop

00:05:21.685 --> 00:05:23.285
<v Speaker 0>off into our browser where I have a

00:05:23.285 --> 00:05:25.764
<v Speaker 0>split tab configured. On the top, we have

00:05:25.764 --> 00:05:28.164
<v Speaker 0>our spin and front end application. Well, at

00:05:28.164 --> 00:05:30.005
<v Speaker 0>least our front end application, which will talk

00:05:30.005 --> 00:05:31.605
<v Speaker 0>to our back end application.

00:05:31.764 --> 00:05:34.199
<v Speaker 0>And we have Google Translate. Here, I've asked

00:05:34.199 --> 00:05:35.400
<v Speaker 0>it to to

00:05:36.199 --> 00:05:37.880
<v Speaker 0>hello to Estonian,

00:05:37.880 --> 00:05:39.960
<v Speaker 0>which we can copy and paste. And if

00:05:39.960 --> 00:05:41.400
<v Speaker 0>we had determined language,

00:05:41.400 --> 00:05:42.360
<v Speaker 0>our application,

00:05:42.680 --> 00:05:45.080
<v Speaker 0>after speaking to OpenAI, tells us that this

00:05:45.080 --> 00:05:48.245
<v Speaker 0>is Estonian word meaning hello or hi. Let's

00:05:48.245 --> 00:05:51.044
<v Speaker 0>choose one more language. This time, we'll pick

00:05:51.044 --> 00:05:51.925
<v Speaker 0>Italian

00:05:52.485 --> 00:05:54.005
<v Speaker 0>where we'll copy ciao,

00:05:54.164 --> 00:05:55.764
<v Speaker 0>paste, and determine.

00:05:56.085 --> 00:05:57.764
<v Speaker 0>And it tells us Italian.

00:05:57.764 --> 00:05:59.604
<v Speaker 0>Perfect. So let's take a look at the

00:05:59.604 --> 00:06:01.444
<v Speaker 0>back end and then we'll look at upgrading

00:06:01.444 --> 00:06:03.750
<v Speaker 0>the front end. If we pop open Versus

00:06:03.750 --> 00:06:05.990
<v Speaker 0>Code, we'll have our index dot j s

00:06:05.990 --> 00:06:07.750
<v Speaker 0>for the back end service.

00:06:07.910 --> 00:06:10.230
<v Speaker 0>Here, we have an asynchronous function called handle

00:06:10.230 --> 00:06:11.030
<v Speaker 0>request

00:06:11.190 --> 00:06:14.310
<v Speaker 0>where we consume through the Spin SDK config

00:06:14.310 --> 00:06:16.895
<v Speaker 0>object our OpenAI token.

00:06:16.974 --> 00:06:20.254
<v Speaker 0>This is provided through Spin config. Spin config

00:06:20.254 --> 00:06:22.574
<v Speaker 0>just means any environment variable on a host

00:06:22.574 --> 00:06:26.014
<v Speaker 0>that starts with Spin underscore config underscore

00:06:26.014 --> 00:06:28.940
<v Speaker 0>the config key will be projected into the

00:06:28.940 --> 00:06:30.860
<v Speaker 0>spin runtime. If I jump to the command

00:06:30.860 --> 00:06:34.060
<v Speaker 0>line and run dart n hello, you'll see

00:06:34.060 --> 00:06:35.900
<v Speaker 0>that my ENVRC

00:06:35.979 --> 00:06:38.699
<v Speaker 0>has a spin underscore config underscore open a

00:06:38.699 --> 00:06:41.595
<v Speaker 0>I underscore token. The spend runtime collects this

00:06:41.595 --> 00:06:43.915
<v Speaker 0>and makes it available on the config object,

00:06:44.075 --> 00:06:45.355
<v Speaker 0>all because of the things that we've seen

00:06:45.355 --> 00:06:47.675
<v Speaker 0>earlier in the spend dot toml. Now because

00:06:47.675 --> 00:06:50.315
<v Speaker 0>currently our front end application is just using

00:06:50.315 --> 00:06:53.479
<v Speaker 0>a very simple form with a method post.

00:06:53.479 --> 00:06:55.720
<v Speaker 0>We're going to receive that as a URL

00:06:55.720 --> 00:06:56.920
<v Speaker 0>search param on

00:06:57.400 --> 00:06:59.880
<v Speaker 0>the body object. So we can consume the

00:06:59.880 --> 00:07:02.039
<v Speaker 0>request dot text, which means get the body

00:07:02.039 --> 00:07:04.680
<v Speaker 0>as text and store as query string.

00:07:05.465 --> 00:07:07.865
<v Speaker 0>We can then use URL search params to

00:07:07.865 --> 00:07:10.025
<v Speaker 0>parse that to get our form data. From

00:07:10.025 --> 00:07:12.745
<v Speaker 0>here, we're just using the standard fetch API

00:07:12.745 --> 00:07:14.985
<v Speaker 0>where we send a request to OpenAI.

00:07:15.065 --> 00:07:17.865
<v Speaker 0>Method post with the correct headers for authentication

00:07:17.865 --> 00:07:18.824
<v Speaker 0>and content

00:07:19.030 --> 00:07:21.910
<v Speaker 0>followed by a JSON string for our body.

00:07:22.150 --> 00:07:24.070
<v Speaker 0>Here, we provide to the model that we

00:07:24.070 --> 00:07:26.389
<v Speaker 0>want to use, the message which contains a

00:07:26.389 --> 00:07:27.750
<v Speaker 0>role and content.

00:07:28.070 --> 00:07:29.910
<v Speaker 0>For us, the role is user and the

00:07:29.910 --> 00:07:32.815
<v Speaker 0>content is just a prefix that says what

00:07:32.815 --> 00:07:33.855
<v Speaker 0>language is this?

00:07:34.175 --> 00:07:37.775
<v Speaker 0>Followed by end quotes, farm data get text.

00:07:37.855 --> 00:07:39.375
<v Speaker 0>You can set the temperature to adjust the

00:07:39.375 --> 00:07:41.295
<v Speaker 0>way that OpenAI handles the request.

00:07:41.455 --> 00:07:43.055
<v Speaker 0>This is not a video in OpenAI, so

00:07:43.055 --> 00:07:44.175
<v Speaker 0>I'm not going to go in that in

00:07:44.175 --> 00:07:46.860
<v Speaker 0>any further detail today. Next, we can await

00:07:46.860 --> 00:07:49.580
<v Speaker 0>the response and parse it as JSON, meaning

00:07:49.580 --> 00:07:51.580
<v Speaker 0>we can send a response with an HTTP

00:07:51.580 --> 00:07:54.540
<v Speaker 0>200 and our body where we encode data

00:07:54.540 --> 00:07:55.420
<v Speaker 0>choices,

00:07:55.500 --> 00:07:58.525
<v Speaker 0>first result message content. That might seem a

00:07:58.525 --> 00:08:00.525
<v Speaker 0>bit complicated. It's just because OpenAI

00:08:00.764 --> 00:08:02.125
<v Speaker 0>returns multiple

00:08:02.205 --> 00:08:04.845
<v Speaker 0>choices or options for you to select from.

00:08:05.085 --> 00:08:06.925
<v Speaker 0>We're always going to select the first. We're

00:08:06.925 --> 00:08:08.525
<v Speaker 0>always going to select the message and the

00:08:08.525 --> 00:08:10.444
<v Speaker 0>content. We're not worried about the role, the

00:08:10.444 --> 00:08:12.980
<v Speaker 0>temperature or anything else that OpenAI returns. And

00:08:12.980 --> 00:08:15.140
<v Speaker 0>we have to encode this because this is

00:08:15.140 --> 00:08:16.020
<v Speaker 0>WebAssembly

00:08:16.020 --> 00:08:17.540
<v Speaker 0>and we have to spit it back out

00:08:17.540 --> 00:08:20.740
<v Speaker 0>correctly for the consuming browser. And that's it.

00:08:20.740 --> 00:08:22.820
<v Speaker 0>So hopefully this gives you a taste of

00:08:22.820 --> 00:08:25.300
<v Speaker 0>something that you can build with Spin, with

00:08:25.300 --> 00:08:29.135
<v Speaker 0>multiple components, with third party services and secret

00:08:29.135 --> 00:08:33.054
<v Speaker 0>tokens. But let's improve our vanilla HTML.

00:08:33.615 --> 00:08:34.735
<v Speaker 0>Here, I'm going to do a p n

00:08:34.735 --> 00:08:36.495
<v Speaker 0>p m create astro

00:08:36.495 --> 00:08:38.655
<v Speaker 0>at latest. This is gonna guide us through

00:08:38.655 --> 00:08:40.815
<v Speaker 0>the astro website creation process.

00:08:41.270 --> 00:08:42.789
<v Speaker 0>From here, we get this a name for

00:08:42.789 --> 00:08:44.470
<v Speaker 0>our project and I'm going to call this

00:08:44.470 --> 00:08:46.470
<v Speaker 0>front end v two. I'm going to use

00:08:46.470 --> 00:08:48.550
<v Speaker 0>the blog template just so that you can

00:08:48.550 --> 00:08:50.950
<v Speaker 0>see all the astro stuff just works even

00:08:50.950 --> 00:08:53.190
<v Speaker 0>though we're pushing in our own piece of

00:08:53.190 --> 00:08:53.990
<v Speaker 0>HTML.

00:08:54.150 --> 00:08:56.135
<v Speaker 0>So let's just give that a moment. We'll

00:08:56.135 --> 00:08:57.655
<v Speaker 0>install the dependencies

00:08:57.655 --> 00:08:59.175
<v Speaker 0>and if you want, you can choose to

00:08:59.175 --> 00:09:01.815
<v Speaker 0>use JavaScript or TypeScript. So let's say yes

00:09:01.815 --> 00:09:02.935
<v Speaker 0>to TypeScript,

00:09:02.935 --> 00:09:05.655
<v Speaker 0>restrict to statin and no, we don't need

00:09:05.655 --> 00:09:07.735
<v Speaker 0>a GET repository. So let's pop in to

00:09:07.735 --> 00:09:09.895
<v Speaker 0>front end v two where we can run

00:09:09.895 --> 00:09:12.540
<v Speaker 0>a PMPM run build. This is gonna create

00:09:12.540 --> 00:09:13.900
<v Speaker 0>a dist directory

00:09:14.620 --> 00:09:17.420
<v Speaker 0>with all of our front end assets, HTML,

00:09:17.420 --> 00:09:19.340
<v Speaker 0>JavaScript, and so forth. So let's pop back

00:09:19.340 --> 00:09:21.980
<v Speaker 0>here and pop open our spin dot toml.

00:09:21.980 --> 00:09:24.220
<v Speaker 0>We can modify our source to be front

00:09:24.220 --> 00:09:25.660
<v Speaker 0>end v two dist,

00:09:26.225 --> 00:09:28.945
<v Speaker 0>which will serve our correct assets.

00:09:28.945 --> 00:09:31.025
<v Speaker 0>If we pop back over to the terminal,

00:09:31.025 --> 00:09:32.865
<v Speaker 0>we can run spin build

00:09:33.105 --> 00:09:33.905
<v Speaker 0>up.

00:09:33.985 --> 00:09:36.225
<v Speaker 0>Let's pop open our browser

00:09:37.985 --> 00:09:40.470
<v Speaker 0>and refresh the top. And now we have

00:09:40.470 --> 00:09:42.230
<v Speaker 0>our ASTRO website,

00:09:42.470 --> 00:09:44.470
<v Speaker 0>which is very zoomed in, but here we

00:09:44.470 --> 00:09:46.550
<v Speaker 0>go. So let's make a change to the

00:09:46.550 --> 00:09:47.830
<v Speaker 0>ASTRO homepage.

00:09:48.310 --> 00:09:50.550
<v Speaker 0>So let's open index.ASTRO.

00:09:50.550 --> 00:09:52.390
<v Speaker 0>From here, we can change hello astronaut to

00:09:52.390 --> 00:09:54.845
<v Speaker 0>be hello spin fans. You now do more

00:09:54.845 --> 00:09:57.725
<v Speaker 0>astro like stuff such as including style tags.

00:09:57.964 --> 00:10:00.125
<v Speaker 0>The reason you're probably wanting to use some

00:10:00.125 --> 00:10:01.725
<v Speaker 0>sort of front end framework is to make

00:10:01.725 --> 00:10:03.084
<v Speaker 0>your front end life easier.

00:10:03.565 --> 00:10:05.644
<v Speaker 0>So just let it do that. Here, we

00:10:05.644 --> 00:10:09.170
<v Speaker 0>can say color red and we'll add Rawkode

00:10:09.170 --> 00:10:11.650
<v Speaker 0>where the color is blue. We can now

00:10:11.650 --> 00:10:14.210
<v Speaker 0>come down to here and see that we

00:10:14.210 --> 00:10:17.170
<v Speaker 0>don't have an h two. So let's create

00:10:17.170 --> 00:10:17.730
<v Speaker 0>one.

00:10:18.450 --> 00:10:20.450
<v Speaker 0>This should be red.

00:10:21.165 --> 00:10:22.605
<v Speaker 0>And we'll also add

00:10:23.084 --> 00:10:25.404
<v Speaker 0>class equals Rawkode.

00:10:26.125 --> 00:10:28.845
<v Speaker 0>Two, that this template comes with a few

00:10:28.845 --> 00:10:30.125
<v Speaker 0>integrations line.

00:10:30.605 --> 00:10:32.524
<v Speaker 0>Now, if we're emphasizing here that we're just

00:10:32.524 --> 00:10:35.090
<v Speaker 0>working on Astral land doing Astral things. So

00:10:35.090 --> 00:10:38.130
<v Speaker 0>let's go back and we'll build our Astro

00:10:38.130 --> 00:10:41.010
<v Speaker 0>site one more time. This compiles it and

00:10:41.010 --> 00:10:44.050
<v Speaker 0>creates our static HTML inside the desk directory.

00:10:44.210 --> 00:10:47.410
<v Speaker 0>We can then relaunch our Spin application

00:10:47.570 --> 00:10:49.490
<v Speaker 0>and give that just a moment to become

00:10:49.490 --> 00:10:51.585
<v Speaker 0>healthy. Now if we pop back over here

00:10:51.585 --> 00:10:52.705
<v Speaker 0>and refresh,

00:10:52.945 --> 00:10:56.065
<v Speaker 0>we have spin fans, red and blue. This

00:10:56.065 --> 00:10:57.985
<v Speaker 0>is just to show you that when you

00:10:57.985 --> 00:11:00.705
<v Speaker 0>work with front end frameworks

00:11:00.705 --> 00:11:02.065
<v Speaker 0>and spin applications,

00:11:02.145 --> 00:11:04.385
<v Speaker 0>you don't need to compromise. You can take

00:11:04.385 --> 00:11:06.380
<v Speaker 0>advantage of React, Fail,

00:11:06.460 --> 00:11:09.180
<v Speaker 0>Astro, whatever you like. Build a workflow that

00:11:09.180 --> 00:11:11.420
<v Speaker 0>works for you and consume it with the

00:11:11.420 --> 00:11:13.900
<v Speaker 0>Spin Fail server. But of course now,

00:11:14.140 --> 00:11:16.460
<v Speaker 0>we wanna hook this back up to

00:11:16.540 --> 00:11:17.660
<v Speaker 0>our API.

00:11:17.740 --> 00:11:19.420
<v Speaker 0>So let's go back to Versus Code

00:11:19.745 --> 00:11:21.345
<v Speaker 0>and we'll go into our front end and

00:11:21.345 --> 00:11:22.385
<v Speaker 0>just copy

00:11:22.625 --> 00:11:24.865
<v Speaker 0>the form that we had before. And we're

00:11:24.865 --> 00:11:27.505
<v Speaker 0>just gonna replace our h two and drop

00:11:27.505 --> 00:11:29.185
<v Speaker 0>it straight in like so.

00:11:29.665 --> 00:11:32.384
<v Speaker 0>Now this should just work because it's just

00:11:32.384 --> 00:11:34.945
<v Speaker 0>a simple form that sends a post request

00:11:34.470 --> 00:11:36.070
<v Speaker 0>to the API endpoint.

00:11:36.149 --> 00:11:38.149
<v Speaker 0>But we do need to run build one

00:11:38.149 --> 00:11:40.389
<v Speaker 0>more time followed by spin

00:11:40.550 --> 00:11:41.269
<v Speaker 0>up.

00:11:41.910 --> 00:11:43.190
<v Speaker 0>And now we can come back.

00:11:43.589 --> 00:11:44.790
<v Speaker 0>We have refresh

00:11:44.870 --> 00:11:47.029
<v Speaker 0>and we have our form. We can select

00:11:47.029 --> 00:11:49.545
<v Speaker 0>a new language. Let's go with Thai. We

00:11:49.545 --> 00:11:50.345
<v Speaker 0>can copy,

00:11:50.824 --> 00:11:51.464
<v Speaker 0>paste,

00:11:51.704 --> 00:11:52.584
<v Speaker 0>and determine.

00:11:52.745 --> 00:11:55.705
<v Speaker 0>And this is the Thai language. Perfect.

00:11:55.945 --> 00:11:58.024
<v Speaker 0>And that's it for today's short tutorial. You

00:11:58.024 --> 00:12:00.264
<v Speaker 0>can write spin applications in your language of

00:12:00.264 --> 00:12:02.940
<v Speaker 0>choice. They get compelled to WebAssembly. They're easy

00:12:02.940 --> 00:12:05.019
<v Speaker 0>to run locally and you could deploy to

00:12:05.019 --> 00:12:07.019
<v Speaker 0>Fermion Cloud. You don't need to throw away

00:12:07.019 --> 00:12:08.860
<v Speaker 0>all your favorite front end frameworks or other

00:12:08.860 --> 00:12:11.500
<v Speaker 0>tools because they're quite easy to integrate web

00:12:11.500 --> 00:12:14.139
<v Speaker 0>the spin framework. By just modifying one or

00:12:14.139 --> 00:12:15.820
<v Speaker 0>two lines in the spin.toml,

00:12:15.820 --> 00:12:18.255
<v Speaker 0>you can grab your statically generated site,

00:12:18.415 --> 00:12:21.295
<v Speaker 0>serve it via WebAssembly module directly to your

00:12:21.295 --> 00:12:23.615
<v Speaker 0>customers. I hope this gives you some inspiration

00:12:23.615 --> 00:12:25.535
<v Speaker 0>for things you can try out with Fermion

00:12:25.535 --> 00:12:27.535
<v Speaker 0>Spin. So go do that and let me

00:12:27.535 --> 00:12:28.815
<v Speaker 0>know in the comments what you get up

00:12:28.815 --> 00:12:29.855
<v Speaker 0>to. Have a great day.
