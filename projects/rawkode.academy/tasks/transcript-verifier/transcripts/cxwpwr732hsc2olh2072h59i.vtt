WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: baa46b8e-c486-49f9-9088-429a60fe255b
Created: 2025-04-29T13:00:25.902Z
Duration: 1919.5073
Channels: 1

00:00:00.000 --> 00:00:02.000
<v Speaker 0>Welcome to Cloud Native Compass,

00:00:02.240 --> 00:00:04.799
<v Speaker 0>a podcast to help you navigate the vast

00:00:04.799 --> 00:00:07.040
<v Speaker 0>landscape of the cloud native ecosystem.

00:00:07.040 --> 00:00:09.840
<v Speaker 1>We're your hosts. I'm David Flanagan, a technology

00:00:09.840 --> 00:00:12.320
<v Speaker 1>magpie that can't stop playing with new shiny

00:00:12.320 --> 00:00:15.434
<v Speaker 1>things. I'm Laura Santa Maria, a forever learner

00:00:15.434 --> 00:00:18.315
<v Speaker 0>who is constantly breaking production. EBPF

00:00:18.315 --> 00:00:20.635
<v Speaker 1>is Turing complete and can be written in

00:00:20.635 --> 00:00:24.075
<v Speaker 1>Rust. So, obviously, I'm sold. That's just two

00:00:24.075 --> 00:00:26.395
<v Speaker 1>of the things we learned on today's episode.

00:00:26.635 --> 00:00:28.990
<v Speaker 1>Want to learn more? Contrary to not so

00:00:28.990 --> 00:00:32.189
<v Speaker 0>popular belief, eBPF is not some secret Berkeley

00:00:32.189 --> 00:00:34.190
<v Speaker 0>green project that's out there to eat your

00:00:34.190 --> 00:00:34.989
<v Speaker 0>refrigerator,

00:00:35.230 --> 00:00:37.470
<v Speaker 0>but it is a gateway to becoming a

00:00:37.470 --> 00:00:39.149
<v Speaker 0>Linux kernel maintainer.

00:00:39.550 --> 00:00:42.110
<v Speaker 0>If you're curious about what e p eBPF

00:00:42.110 --> 00:00:45.055
<v Speaker 0>is, why it matters, how to pronounce it,

00:00:45.055 --> 00:00:46.895
<v Speaker 0>and how badly you can break your kernel

00:00:46.895 --> 00:00:48.815
<v Speaker 0>when trying to learn it, this is the

00:00:48.815 --> 00:00:51.055
<v Speaker 0>episode for you as we talk with Liz

00:00:51.055 --> 00:00:51.695
<v Speaker 0>Rice,

00:00:51.935 --> 00:00:54.415
<v Speaker 0>the author of Learning eBPF

00:00:54.415 --> 00:00:57.660
<v Speaker 0>and Chief Open Source Officer at ISOVAILENT.

00:00:57.660 --> 00:01:00.379
<v Speaker 1>Alright. Thank you. Les, could you please say

00:01:00.379 --> 00:01:01.739
<v Speaker 1>hello and tell us a little bit more

00:01:01.739 --> 00:01:02.539
<v Speaker 1>about you?

00:01:03.100 --> 00:01:05.180
<v Speaker 2>Hi. Yeah. So my name is Liz Rice.

00:01:05.180 --> 00:01:08.619
<v Speaker 2>I am chief open source officer at ISOVAILENT,

00:01:08.619 --> 00:01:11.180
<v Speaker 2>which is the company that originally created Cilium.

00:01:11.935 --> 00:01:12.494
<v Speaker 2>And,

00:01:12.814 --> 00:01:14.174
<v Speaker 2>a lot of people will have heard of

00:01:14.174 --> 00:01:15.134
<v Speaker 2>Cilium

00:01:15.375 --> 00:01:17.534
<v Speaker 2>being based on eBPF.

00:01:17.854 --> 00:01:19.774
<v Speaker 2>And earlier this year, I published a book

00:01:19.774 --> 00:01:22.015
<v Speaker 2>about eBPF called learning eBPF.

00:01:23.620 --> 00:01:25.060
<v Speaker 2>I feel like I may have answered more

00:01:25.060 --> 00:01:26.740
<v Speaker 2>than one question in one go there.

00:01:27.540 --> 00:01:29.940
<v Speaker 0>Hey. No. That's fine. That's fine. Little bit

00:01:29.940 --> 00:01:32.900
<v Speaker 0>of context. Just us perfect. Yeah. Good context.

00:01:32.900 --> 00:01:34.420
<v Speaker 1>Because I'm doing we're about to talk about

00:01:34.420 --> 00:01:35.220
<v Speaker 1>eBPF

00:01:35.220 --> 00:01:36.979
<v Speaker 1>and go into a little bit more detail

00:01:36.979 --> 00:01:38.259
<v Speaker 1>there. So yeah. Awesome.

00:01:39.065 --> 00:01:41.305
<v Speaker 1>Alright. Well, let's just start. You know, not

00:01:41.305 --> 00:01:42.425
<v Speaker 1>everyone is

00:01:42.745 --> 00:01:45.225
<v Speaker 1>familiar with eBPF. So could you give us

00:01:45.225 --> 00:01:46.905
<v Speaker 1>the the TLDR? What do people need to

00:01:46.905 --> 00:01:48.585
<v Speaker 1>know to understand the rest of the conversation

00:01:48.585 --> 00:01:49.225
<v Speaker 1>today?

00:01:49.545 --> 00:01:51.145
<v Speaker 2>So they don't need to know what it

00:01:51.145 --> 00:01:51.545
<v Speaker 2>stands for.

00:01:52.540 --> 00:01:55.260
<v Speaker 2>It stands for extended Berkeley packet filter. But,

00:01:55.260 --> 00:01:55.900
<v Speaker 2>honestly,

00:01:56.140 --> 00:01:59.260
<v Speaker 2>forget that. It doesn't really help because it

00:01:59.260 --> 00:02:01.340
<v Speaker 2>does a lot more than packet filtering now.

00:02:01.340 --> 00:02:03.580
<v Speaker 2>So we tend to say the acronym doesn't

00:02:03.580 --> 00:02:04.780
<v Speaker 2>really mean anything anymore.

00:02:05.395 --> 00:02:08.595
<v Speaker 2>And what it really is is the ability

00:02:08.595 --> 00:02:10.675
<v Speaker 2>to run programs

00:02:10.675 --> 00:02:13.315
<v Speaker 2>within the within the kernel, within the operating

00:02:13.315 --> 00:02:15.955
<v Speaker 2>system kernel. So we can dynamically

00:02:15.955 --> 00:02:18.435
<v Speaker 2>change the way that the kernel behaves

00:02:18.515 --> 00:02:18.915
<v Speaker 2>by

00:02:19.550 --> 00:02:21.870
<v Speaker 2>loading these eBPF programs.

00:02:22.590 --> 00:02:24.270
<v Speaker 2>And I think when I say that, I

00:02:24.270 --> 00:02:26.270
<v Speaker 2>have to make sure that people really know

00:02:26.270 --> 00:02:27.310
<v Speaker 2>what I mean

00:02:27.550 --> 00:02:28.990
<v Speaker 2>when I say the kernel.

00:02:29.310 --> 00:02:31.070
<v Speaker 2>The kernel is the part of the operating

00:02:31.070 --> 00:02:32.990
<v Speaker 2>system that interfaces

00:02:32.990 --> 00:02:34.270
<v Speaker 2>between our applications

00:02:34.795 --> 00:02:36.075
<v Speaker 2>and the hardware

00:02:36.314 --> 00:02:39.034
<v Speaker 2>that the, you know, processor and and its

00:02:39.034 --> 00:02:39.835
<v Speaker 2>peripherals.

00:02:40.075 --> 00:02:43.355
<v Speaker 2>So if you are writing to a file,

00:02:43.355 --> 00:02:46.474
<v Speaker 2>you're doing anything over the network, writing anything

00:02:46.474 --> 00:02:47.034
<v Speaker 2>to screen,

00:02:47.560 --> 00:02:49.320
<v Speaker 2>even allocating memory,

00:02:49.400 --> 00:02:52.200
<v Speaker 2>the kernel has to get involved. Your application

00:02:52.200 --> 00:02:54.360
<v Speaker 2>can't do it directly. It has to ask

00:02:54.360 --> 00:02:55.800
<v Speaker 2>the kernel for help.

00:02:56.280 --> 00:02:58.280
<v Speaker 2>And the kernel is also coordinating

00:02:58.280 --> 00:03:00.040
<v Speaker 2>all the different processes that might be running

00:03:00.040 --> 00:03:02.325
<v Speaker 2>on the machine. And that means the kernel

00:03:02.325 --> 00:03:05.445
<v Speaker 2>is involved whenever you're doing anything interesting,

00:03:05.605 --> 00:03:06.245
<v Speaker 2>really.

00:03:06.485 --> 00:03:09.364
<v Speaker 2>So it's a really great place to write

00:03:09.364 --> 00:03:11.125
<v Speaker 2>things like observability

00:03:11.125 --> 00:03:14.004
<v Speaker 2>tools and security tools, and we can do

00:03:14.004 --> 00:03:15.605
<v Speaker 2>that with eBPF.

00:03:15.880 --> 00:03:17.640
<v Speaker 2>And we also get to customize the way

00:03:17.640 --> 00:03:19.880
<v Speaker 2>that the kernel behaves for the things that

00:03:19.880 --> 00:03:22.760
<v Speaker 2>it takes on, things like the networking stack.

00:03:22.760 --> 00:03:25.160
<v Speaker 2>We can modify the way that behaves with

00:03:25.160 --> 00:03:28.200
<v Speaker 2>eBPF. So it's really powerful and a really

00:03:28.200 --> 00:03:29.720
<v Speaker 2>interesting way to

00:03:30.280 --> 00:03:31.160
<v Speaker 2>instrument

00:03:31.565 --> 00:03:33.405
<v Speaker 2>all of your different applications

00:03:33.805 --> 00:03:35.885
<v Speaker 2>that are running on that one kernel.

00:03:36.925 --> 00:03:37.725
<v Speaker 2>Nice.

00:03:37.965 --> 00:03:40.045
<v Speaker 0>And here I was hoping you could I

00:03:40.045 --> 00:03:41.325
<v Speaker 0>was gonna say, here I was hoping you

00:03:41.325 --> 00:03:43.165
<v Speaker 0>could actually explain why it said Berkeley in

00:03:43.165 --> 00:03:45.080
<v Speaker 0>the middle of all of it, but that's

00:03:45.080 --> 00:03:47.080
<v Speaker 0>a whole another thing, guess, more than anything

00:03:47.080 --> 00:03:48.360
<v Speaker 0>else. The original

00:03:48.519 --> 00:03:49.240
<v Speaker 2>bucket

00:03:49.560 --> 00:03:50.599
<v Speaker 2>filter

00:03:50.599 --> 00:03:51.400
<v Speaker 2>paper

00:03:52.280 --> 00:03:53.560
<v Speaker 2>was written by

00:03:54.280 --> 00:03:56.280
<v Speaker 2>two people whose names I can't quite remember

00:03:56.280 --> 00:03:57.080
<v Speaker 2>right now,

00:03:57.480 --> 00:04:00.165
<v Speaker 2>but they were at Berkeley at the time.

00:04:00.165 --> 00:04:02.325
<v Speaker 2>So it was Okay. You know, the Okay.

00:04:02.325 --> 00:04:04.245
<v Speaker 0>That makes me recite now. That it all

00:04:04.245 --> 00:04:05.685
<v Speaker 2>originates from says,

00:04:05.845 --> 00:04:08.325
<v Speaker 2>like Lawrence Berkeley Lab or however you say

00:04:08.325 --> 00:04:10.885
<v Speaker 2>that's called. Yeah. You know, just for fun

00:04:10.885 --> 00:04:13.445
<v Speaker 0>for somebody like me who's like, why does

00:04:13.445 --> 00:04:14.880
<v Speaker 0>it say Berkeley?

00:04:15.120 --> 00:04:15.760
<v Speaker 0>Okay.

00:04:16.160 --> 00:04:16.959
<v Speaker 0>Anyway.

00:04:18.639 --> 00:04:21.040
<v Speaker 1>So I I'm curious then. Did

00:04:21.200 --> 00:04:23.680
<v Speaker 1>you join eBPF because you were really interested

00:04:23.680 --> 00:04:25.520
<v Speaker 1>in eBPF, or are you now really interested

00:04:25.520 --> 00:04:27.760
<v Speaker 1>in eBPF because you've joined eBPF?

00:04:27.760 --> 00:04:29.855
<v Speaker 1>Like, what came first? No.

00:04:29.855 --> 00:04:32.255
<v Speaker 2>I really got interested in eBPF.

00:04:32.335 --> 00:04:34.495
<v Speaker 2>The first time I heard of it, I

00:04:34.495 --> 00:04:37.295
<v Speaker 2>saw Thomas Graff, who is the CTO of

00:04:37.295 --> 00:04:38.335
<v Speaker 2>eBPF,

00:04:38.895 --> 00:04:41.935
<v Speaker 2>talking about psyllium and eBPF at back

00:04:42.015 --> 00:04:43.215
<v Speaker 2>in 2017.

00:04:43.215 --> 00:04:45.455
<v Speaker 2>And at the time, I thought, well, that's

00:04:45.180 --> 00:04:47.020
<v Speaker 2>pretty interesting technology.

00:04:47.260 --> 00:04:49.660
<v Speaker 2>And at that point, it was really cutting

00:04:49.660 --> 00:04:51.900
<v Speaker 2>edge in the kernel. You needed you know,

00:04:51.980 --> 00:04:54.220
<v Speaker 2>it wasn't available to most people in production.

00:04:54.220 --> 00:04:56.460
<v Speaker 2>It wasn't available to hardly anybody in

00:04:56.700 --> 00:04:59.420
<v Speaker 2>the Linux distributions that they were using back

00:04:59.420 --> 00:04:59.660
<v Speaker 2>then.

00:05:00.275 --> 00:05:02.755
<v Speaker 2>But I thought this is a really interesting

00:05:02.835 --> 00:05:03.875
<v Speaker 2>technology,

00:05:04.035 --> 00:05:04.435
<v Speaker 2>and,

00:05:05.075 --> 00:05:06.675
<v Speaker 2>I kinda kept an eye on it. A

00:05:06.675 --> 00:05:08.435
<v Speaker 2>couple of years later, I started working on

00:05:08.435 --> 00:05:09.395
<v Speaker 2>a project that was,

00:05:09.955 --> 00:05:11.715
<v Speaker 2>sort of using eBPF.

00:05:11.955 --> 00:05:14.435
<v Speaker 2>And I was also as part of learning

00:05:14.435 --> 00:05:16.890
<v Speaker 2>about it myself, I was going out and

00:05:16.890 --> 00:05:18.570
<v Speaker 2>doing talks. I I find that, you know,

00:05:18.570 --> 00:05:19.930
<v Speaker 2>the best way to make sure you really

00:05:19.930 --> 00:05:22.490
<v Speaker 2>understand it is to try and explain something

00:05:22.490 --> 00:05:23.770
<v Speaker 2>to somebody else.

00:05:24.090 --> 00:05:24.730
<v Speaker 2>So,

00:05:25.690 --> 00:05:28.250
<v Speaker 2>yeah, I've started doing talks about eBPF as

00:05:28.250 --> 00:05:30.090
<v Speaker 2>well. And through that,

00:05:30.965 --> 00:05:33.685
<v Speaker 2>actually got invited back to the eBPF

00:05:33.685 --> 00:05:36.725
<v Speaker 2>summit in, I guess, 2020,

00:05:37.604 --> 00:05:40.884
<v Speaker 2>which, iSurveillance put on sort of on behalf

00:05:40.884 --> 00:05:42.965
<v Speaker 2>of the eBPF community.

00:05:43.205 --> 00:05:45.205
<v Speaker 2>And there was so much really cool stuff

00:05:45.205 --> 00:05:45.604
<v Speaker 2>going on,

00:05:46.280 --> 00:05:48.840
<v Speaker 2>you know, in the world of eBPF and

00:05:48.919 --> 00:05:50.440
<v Speaker 2>particularly at iSurveillance.

00:05:50.440 --> 00:05:52.360
<v Speaker 2>It turns out I hadn't realized before that

00:05:52.360 --> 00:05:53.880
<v Speaker 2>summit just how much

00:05:54.280 --> 00:05:56.919
<v Speaker 2>iSurveillance had been involved with eBPF right from

00:05:56.919 --> 00:05:59.319
<v Speaker 2>the get go. So Daniel Borkman, who's one

00:05:59.319 --> 00:06:02.435
<v Speaker 2>of the three maintainers of eBPF in the

00:06:02.435 --> 00:06:04.354
<v Speaker 2>kernel, was, you know, one of the early

00:06:04.354 --> 00:06:06.995
<v Speaker 2>engineers at ISOvalent, and he's still there. So,

00:06:06.995 --> 00:06:07.634
<v Speaker 2>you know,

00:06:08.034 --> 00:06:09.555
<v Speaker 2>we're so embedded

00:06:10.435 --> 00:06:13.235
<v Speaker 2>in the way that eBPF has developed over

00:06:13.235 --> 00:06:15.050
<v Speaker 2>the years. It's it's, you know, I I

00:06:15.050 --> 00:06:17.210
<v Speaker 2>really do get to work with the

00:06:17.450 --> 00:06:19.290
<v Speaker 2>the people who created it and the people

00:06:19.290 --> 00:06:21.770
<v Speaker 2>who've been using it and had the vision

00:06:21.770 --> 00:06:23.530
<v Speaker 2>for building things like Cilium.

00:06:23.770 --> 00:06:25.930
<v Speaker 2>You know? So, yeah, I joined ISA Bayland

00:06:25.930 --> 00:06:26.970
<v Speaker 2>because it's

00:06:27.194 --> 00:06:30.235
<v Speaker 2>just absolutely full of really cool people doing

00:06:30.235 --> 00:06:31.995
<v Speaker 2>really fun things with eBPF.

00:06:33.034 --> 00:06:37.194
<v Speaker 0>Awesome. Makes sense. So you started experimenting with

00:06:37.194 --> 00:06:40.150
<v Speaker 1>eBPF in in 2017. We're now in the

00:06:40.150 --> 00:06:42.230
<v Speaker 1>latter half of 2023,

00:06:42.230 --> 00:06:44.310
<v Speaker 1>which just seems absurd to me now. But,

00:06:44.310 --> 00:06:46.950
<v Speaker 1>like, over those years, you've seen the adoption

00:06:46.950 --> 00:06:48.950
<v Speaker 1>grow as we all have, especially across the

00:06:48.950 --> 00:06:51.430
<v Speaker 1>the industry and even the CNCF with projects

00:06:51.430 --> 00:06:53.510
<v Speaker 1>like PEXA and Falco and, of course, Cilium

00:06:53.510 --> 00:06:55.425
<v Speaker 1>as well. Why

00:06:55.425 --> 00:06:56.465
<v Speaker 1>has that adoption

00:06:57.025 --> 00:06:59.425
<v Speaker 1>grown so quickly for a relatively niche? I

00:06:59.425 --> 00:07:00.784
<v Speaker 1>don't know. Is that a niche technology? I

00:07:00.784 --> 00:07:01.824
<v Speaker 1>think it is. Like,

00:07:02.465 --> 00:07:04.544
<v Speaker 1>why are people point, I don't know. I

00:07:04.544 --> 00:07:06.305
<v Speaker 0>don't know. It seems like it's kinda everywhere.

00:07:06.305 --> 00:07:08.384
<v Speaker 0>So Yeah. It's one of those things that,

00:07:09.530 --> 00:07:10.570
<v Speaker 2>I I guess,

00:07:10.970 --> 00:07:13.130
<v Speaker 2>expertise in it is pretty niche, but a

00:07:13.130 --> 00:07:14.970
<v Speaker 2>lot of people are using it without really

00:07:14.970 --> 00:07:17.770
<v Speaker 2>even knowing that they're using it. I mean,

00:07:17.770 --> 00:07:20.090
<v Speaker 2>there's probably people using Cilium who don't realize

00:07:20.090 --> 00:07:22.170
<v Speaker 2>that it's based on eBPF.

00:07:22.170 --> 00:07:23.690
<v Speaker 2>Certainly, a lot of people will be using

00:07:23.690 --> 00:07:25.805
<v Speaker 2>things like TCP dump and

00:07:26.045 --> 00:07:28.365
<v Speaker 2>never really sort of thought about eBPF, but

00:07:28.525 --> 00:07:31.085
<v Speaker 2>and that that's fine. That's you know, there's

00:07:31.085 --> 00:07:32.525
<v Speaker 2>so many really

00:07:32.845 --> 00:07:34.765
<v Speaker 2>powerful tools that have been built.

00:07:36.285 --> 00:07:37.805
<v Speaker 2>I I think, you know,

00:07:38.365 --> 00:07:40.125
<v Speaker 2>things that Brendan and Greg

00:07:40.910 --> 00:07:42.669
<v Speaker 2>have popularized,

00:07:43.470 --> 00:07:46.110
<v Speaker 2>you know, in the kind of 2017

00:07:46.110 --> 00:07:47.790
<v Speaker 2>period, you know, he was already out there

00:07:47.790 --> 00:07:51.310
<v Speaker 2>talking about how Netflix were using eBPF for,

00:07:52.190 --> 00:07:56.065
<v Speaker 2>observability purposes, for tracing, for, you know, diagnosing

00:07:56.065 --> 00:07:57.585
<v Speaker 2>and then improving

00:07:57.585 --> 00:07:58.545
<v Speaker 2>performance

00:07:58.865 --> 00:07:59.505
<v Speaker 2>issues

00:07:59.825 --> 00:08:00.545
<v Speaker 2>and,

00:08:01.185 --> 00:08:02.705
<v Speaker 2>you know, really popularizing

00:08:02.705 --> 00:08:03.425
<v Speaker 2>the

00:08:04.065 --> 00:08:05.985
<v Speaker 2>power of eBPF.

00:08:08.360 --> 00:08:10.040
<v Speaker 2>The reason why I think there was that

00:08:10.040 --> 00:08:10.760
<v Speaker 2>kind of

00:08:11.400 --> 00:08:12.919
<v Speaker 2>sudden upturn

00:08:12.919 --> 00:08:14.600
<v Speaker 2>in adoption

00:08:14.600 --> 00:08:15.320
<v Speaker 2>is

00:08:15.800 --> 00:08:16.920
<v Speaker 2>the fact that

00:08:17.800 --> 00:08:20.360
<v Speaker 2>the the level of eBPF support in the

00:08:20.360 --> 00:08:22.520
<v Speaker 2>kernel had reached a a point,

00:08:22.965 --> 00:08:24.885
<v Speaker 2>I think, around the 04/2018

00:08:25.045 --> 00:08:27.365
<v Speaker 2>kernel version around that kind of time frame

00:08:27.365 --> 00:08:30.645
<v Speaker 2>is where you really start getting sufficient eBPF

00:08:30.645 --> 00:08:33.765
<v Speaker 2>support to do really interesting things. The more

00:08:33.765 --> 00:08:36.885
<v Speaker 2>modern your kernel is, the more additional capabilities

00:08:36.885 --> 00:08:39.780
<v Speaker 2>in eBPF and probably lots of other areas

00:08:39.780 --> 00:08:41.060
<v Speaker 2>of the kernel as well.

00:08:41.940 --> 00:08:44.100
<v Speaker 2>And but there was this real turning point

00:08:44.100 --> 00:08:44.660
<v Speaker 2>when,

00:08:45.780 --> 00:08:48.100
<v Speaker 2>I would say, particularly when RHEL was probably

00:08:48.100 --> 00:08:50.740
<v Speaker 2>the last of the distributions to, kind of

00:08:50.900 --> 00:08:53.935
<v Speaker 2>it it's it's always, you know, relatively cautious

00:08:53.935 --> 00:08:56.175
<v Speaker 2>about upgrading to to new versions of the

00:08:56.175 --> 00:08:56.815
<v Speaker 2>kernel.

00:08:56.975 --> 00:08:59.055
<v Speaker 2>And at the point where really all of

00:08:59.055 --> 00:09:01.295
<v Speaker 2>the distributions were using a modern enough kernel,

00:09:01.295 --> 00:09:02.015
<v Speaker 2>that meant

00:09:02.735 --> 00:09:05.695
<v Speaker 2>you could just deploy these eBPF based tools

00:09:05.775 --> 00:09:08.540
<v Speaker 2>in production regardless of your distro, and I

00:09:08.540 --> 00:09:10.220
<v Speaker 2>think that really made a huge difference to

00:09:10.220 --> 00:09:11.020
<v Speaker 2>the adoption.

00:09:11.420 --> 00:09:12.620
<v Speaker 1>Yeah. Awesome.

00:09:13.180 --> 00:09:15.980
<v Speaker 1>So you mentioned the Berkeley packet filter. And

00:09:15.980 --> 00:09:18.060
<v Speaker 1>for the people that are not aware, it's

00:09:18.060 --> 00:09:19.900
<v Speaker 1>like a networking thing that allows you to

00:09:19.900 --> 00:09:22.140
<v Speaker 1>do IP tables like stuff and okay. I

00:09:22.300 --> 00:09:23.714
<v Speaker 1>I'm not trying gonna go into it in

00:09:23.714 --> 00:09:25.315
<v Speaker 1>any more detail next. I'll I'll make an

00:09:25.315 --> 00:09:27.315
<v Speaker 1>absolute best of it. But it does network

00:09:27.315 --> 00:09:29.395
<v Speaker 1>unique stuff. Right? It blocks packets. It rewrites

00:09:29.395 --> 00:09:31.555
<v Speaker 1>packets. It does all the stuff. But eBPF

00:09:31.555 --> 00:09:32.435
<v Speaker 1>has kind of

00:09:32.995 --> 00:09:34.995
<v Speaker 1>grown beyond that now. We're seeing it used

00:09:34.995 --> 00:09:37.555
<v Speaker 1>for a whole variety of different technologies like

00:09:37.555 --> 00:09:38.595
<v Speaker 1>Falco and PEXY.

00:09:39.420 --> 00:09:41.580
<v Speaker 1>Is there, like what's the right way to

00:09:41.580 --> 00:09:42.940
<v Speaker 1>phrase this question? Really, I should have it

00:09:42.940 --> 00:09:45.740
<v Speaker 1>prepared, but why has it extended beyond this?

00:09:45.740 --> 00:09:47.580
<v Speaker 1>Why does it have these new capabilities? What

00:09:47.580 --> 00:09:49.500
<v Speaker 1>is it enabling within the kernel for people?

00:09:49.500 --> 00:09:51.420
<v Speaker 1>Why is it interesting to you and to

00:09:51.420 --> 00:09:53.975
<v Speaker 1>others? I know that's a very broad question.

00:09:53.975 --> 00:09:55.735
<v Speaker 1>But Yeah. So so I think the the

00:09:55.735 --> 00:09:56.454
<v Speaker 2>original

00:09:56.935 --> 00:09:59.495
<v Speaker 2>idea of packet filtering was to be able

00:09:59.495 --> 00:10:01.735
<v Speaker 2>to look at each incoming packet and say,

00:10:01.735 --> 00:10:03.334
<v Speaker 2>you know, make decisions about what to do

00:10:03.334 --> 00:10:04.454
<v Speaker 2>with it with that packet.

00:10:05.870 --> 00:10:08.110
<v Speaker 2>And I think in the very first place,

00:10:08.110 --> 00:10:09.870
<v Speaker 2>it was really just do am I interested

00:10:09.870 --> 00:10:12.110
<v Speaker 2>in sort of seeing this packet? I maybe

00:10:12.110 --> 00:10:14.269
<v Speaker 2>I want to filter, you know, packets that

00:10:14.269 --> 00:10:15.790
<v Speaker 2>are going to a particular port so that

00:10:15.790 --> 00:10:17.950
<v Speaker 2>I can count them or something like that.

00:10:19.505 --> 00:10:21.825
<v Speaker 2>So it was making fairly simple

00:10:21.825 --> 00:10:22.705
<v Speaker 2>decisions

00:10:22.705 --> 00:10:23.425
<v Speaker 2>about,

00:10:24.545 --> 00:10:26.305
<v Speaker 2>you know, what kind of what to do

00:10:26.305 --> 00:10:28.145
<v Speaker 2>with these with these packet filters.

00:10:28.545 --> 00:10:30.305
<v Speaker 2>The extended part

00:10:30.464 --> 00:10:31.105
<v Speaker 2>involved,

00:10:32.540 --> 00:10:34.459
<v Speaker 2>think, a few different trains of thought. One

00:10:34.459 --> 00:10:36.620
<v Speaker 2>was the idea that if you

00:10:37.660 --> 00:10:40.620
<v Speaker 2>extended this sort of relatively small instruction set

00:10:40.620 --> 00:10:43.180
<v Speaker 2>that could be used to to examine

00:10:44.465 --> 00:10:45.425
<v Speaker 2>packets.

00:10:45.745 --> 00:10:48.385
<v Speaker 2>If you turn that into something a bit

00:10:48.385 --> 00:10:49.585
<v Speaker 2>more kind of

00:10:49.905 --> 00:10:52.865
<v Speaker 2>like a virtual machine instruction set,

00:10:53.025 --> 00:10:54.865
<v Speaker 2>you know, when if you look at BPF

00:10:54.865 --> 00:10:58.625
<v Speaker 2>bytecode, it's very reminiscent of, like, machine code.

00:10:59.420 --> 00:11:00.700
<v Speaker 2>You know, it's all about

00:11:01.420 --> 00:11:04.140
<v Speaker 2>registers and loading values into registers and and

00:11:04.140 --> 00:11:06.860
<v Speaker 2>comparing them and and jumping to other instructions.

00:11:06.860 --> 00:11:07.660
<v Speaker 2>It's very,

00:11:07.980 --> 00:11:10.300
<v Speaker 2>very similar to to machine code. So there

00:11:10.300 --> 00:11:12.620
<v Speaker 2>was this idea that having a

00:11:13.825 --> 00:11:15.745
<v Speaker 2>a virtual machine in the kernel

00:11:16.145 --> 00:11:17.665
<v Speaker 2>could allow you to do all sorts of

00:11:17.665 --> 00:11:18.705
<v Speaker 2>interesting things.

00:11:19.025 --> 00:11:20.945
<v Speaker 2>There was the idea that maybe you could

00:11:20.945 --> 00:11:23.265
<v Speaker 2>attach these programs to other points in the

00:11:23.265 --> 00:11:26.065
<v Speaker 2>kernel, not just to incoming packets, but you

00:11:26.065 --> 00:11:26.625
<v Speaker 2>could make

00:11:27.110 --> 00:11:30.390
<v Speaker 2>decisions or change the behavior at other points

00:11:30.390 --> 00:11:31.430
<v Speaker 2>in the kernel.

00:11:32.630 --> 00:11:34.790
<v Speaker 2>And I think the last major thing that

00:11:34.790 --> 00:11:35.670
<v Speaker 2>distinguished

00:11:35.670 --> 00:11:39.110
<v Speaker 2>extended from from its predecessors is what's called

00:11:39.110 --> 00:11:40.230
<v Speaker 2>eBPF maps.

00:11:40.855 --> 00:11:43.175
<v Speaker 2>And maps are these data structures that you

00:11:43.175 --> 00:11:44.455
<v Speaker 2>can access from

00:11:44.935 --> 00:11:47.335
<v Speaker 2>within an eBPF program, and you can share

00:11:47.335 --> 00:11:49.815
<v Speaker 2>them between eBPF programs, and you can also

00:11:49.815 --> 00:11:53.800
<v Speaker 2>access them using system calls from user space.

00:11:53.800 --> 00:11:56.519
<v Speaker 2>So it's it's a way of exchanging information

00:11:56.519 --> 00:12:00.440
<v Speaker 2>between user space and eBPF programs or between

00:12:00.680 --> 00:12:02.760
<v Speaker 2>multiple different eBPF programs.

00:12:03.320 --> 00:12:05.079
<v Speaker 2>And all those things kinda combined

00:12:05.855 --> 00:12:08.735
<v Speaker 2>has turned out to be really powerful to

00:12:08.735 --> 00:12:11.215
<v Speaker 2>the extent that one of my colleagues recently

00:12:11.215 --> 00:12:12.895
<v Speaker 2>did a talk

00:12:13.215 --> 00:12:15.295
<v Speaker 2>at one of the kind of Linux kernel

00:12:15.295 --> 00:12:18.575
<v Speaker 2>developer conferences where he showed that eBPF is

00:12:18.575 --> 00:12:20.735
<v Speaker 2>now Turing complete, which is

00:12:21.510 --> 00:12:22.470
<v Speaker 2>pretty cool.

00:12:23.350 --> 00:12:25.750
<v Speaker 1>A question just on that. Right? Because, you

00:12:25.750 --> 00:12:27.510
<v Speaker 1>know, the talks I've seen, you know, from

00:12:27.510 --> 00:12:29.110
<v Speaker 1>yourself and others in this space when you

00:12:29.110 --> 00:12:31.190
<v Speaker 1>talk about eBPF, one of the the things

00:12:31.190 --> 00:12:32.710
<v Speaker 1>that's always mentioned is the fact that the

00:12:32.710 --> 00:12:34.710
<v Speaker 1>eBPF sandbox, the virtual machine

00:12:35.274 --> 00:12:37.515
<v Speaker 1>can and should never crash.

00:12:37.675 --> 00:12:40.395
<v Speaker 2>Mhmm. Is that is that still true even

00:12:40.395 --> 00:12:42.714
<v Speaker 1>with the ability for the eBPF programs to

00:12:42.714 --> 00:12:44.955
<v Speaker 1>communicate with each other and with user space

00:12:44.955 --> 00:12:45.675
<v Speaker 1>programs?

00:12:45.834 --> 00:12:47.675
<v Speaker 2>Yeah. Exactly. So the

00:12:48.029 --> 00:12:50.110
<v Speaker 2>reason we're able to make that claim is

00:12:50.110 --> 00:12:51.230
<v Speaker 2>because of a

00:12:52.589 --> 00:12:55.230
<v Speaker 2>thing in the kernel called the eBPF verifier.

00:12:55.630 --> 00:12:57.389
<v Speaker 2>So as you load a program into the

00:12:57.389 --> 00:13:00.430
<v Speaker 2>kernel, it goes through this verification process, which

00:13:00.430 --> 00:13:02.589
<v Speaker 2>is really analyzing all the possible paths through

00:13:02.589 --> 00:13:03.389
<v Speaker 2>the program

00:13:03.855 --> 00:13:04.575
<v Speaker 2>and

00:13:06.415 --> 00:13:08.255
<v Speaker 2>ensuring that well, first of all, it will

00:13:08.255 --> 00:13:09.455
<v Speaker 2>run to completion.

00:13:10.095 --> 00:13:10.495
<v Speaker 2>So this

00:13:11.615 --> 00:13:13.295
<v Speaker 2>a long time ago, that used to mean

00:13:13.295 --> 00:13:16.175
<v Speaker 2>no loops at all. Now that's been, kind

00:13:16.175 --> 00:13:18.255
<v Speaker 2>of improved and optimized and you can have

00:13:18.255 --> 00:13:18.575
<v Speaker 2>loops.

00:13:20.470 --> 00:13:21.110
<v Speaker 2>It's,

00:13:21.350 --> 00:13:24.150
<v Speaker 2>checking for things like, there's only a limited

00:13:24.150 --> 00:13:26.630
<v Speaker 2>set of what's called helper functions that you

00:13:26.630 --> 00:13:28.470
<v Speaker 2>can make from an eBPF program,

00:13:28.710 --> 00:13:30.390
<v Speaker 2>and the set that you can call depend

00:13:30.390 --> 00:13:33.355
<v Speaker 2>on really the event that triggered it. So

00:13:33.355 --> 00:13:34.235
<v Speaker 2>if you

00:13:34.634 --> 00:13:37.514
<v Speaker 2>were being triggered because a network packet arrived,

00:13:37.834 --> 00:13:40.154
<v Speaker 2>then you can call helper functions that are

00:13:40.154 --> 00:13:42.555
<v Speaker 2>related to looking at that network packet.

00:13:42.714 --> 00:13:43.435
<v Speaker 2>But you can't,

00:13:43.980 --> 00:13:47.260
<v Speaker 2>for example, ask for what's the user space

00:13:47.260 --> 00:13:49.820
<v Speaker 2>process associated with this packet because there is

00:13:49.820 --> 00:13:51.899
<v Speaker 2>no user space process associated

00:13:51.899 --> 00:13:53.260
<v Speaker 2>at that time.

00:13:53.580 --> 00:13:54.940
<v Speaker 2>Whereas if you were in

00:13:55.500 --> 00:13:57.500
<v Speaker 2>an eBPF program attached to

00:13:57.795 --> 00:14:00.675
<v Speaker 2>a user space program making a system call,

00:14:00.915 --> 00:14:03.315
<v Speaker 2>then you absolutely could ask

00:14:04.435 --> 00:14:06.035
<v Speaker 2>a helper function to give you the the

00:14:06.035 --> 00:14:08.595
<v Speaker 2>process ID. So the verifier is checking that

00:14:08.595 --> 00:14:10.195
<v Speaker 2>all this sort of contextual

00:14:11.200 --> 00:14:13.680
<v Speaker 2>helper functions are being used appropriately

00:14:13.840 --> 00:14:16.480
<v Speaker 2>and that memory access is safe,

00:14:16.800 --> 00:14:19.600
<v Speaker 2>that if you're gonna dereference a pointer, you

00:14:19.600 --> 00:14:22.895
<v Speaker 2>have to explicitly check that it's not nil

00:14:22.895 --> 00:14:25.615
<v Speaker 2>before you do so because dereferencing a nil

00:14:25.615 --> 00:14:28.095
<v Speaker 2>pointer, if, you know, anybody has ever written

00:14:28.095 --> 00:14:29.855
<v Speaker 2>a c program, they will have crashed their

00:14:29.855 --> 00:14:31.935
<v Speaker 2>c program by dereferencing a nil pointer. I

00:14:31.935 --> 00:14:32.815
<v Speaker 2>guarantee it.

00:14:33.375 --> 00:14:33.615
<v Speaker 2>Mhmm.

00:14:34.350 --> 00:14:36.509
<v Speaker 2>Yeah. So the the verify is really just

00:14:36.509 --> 00:14:39.949
<v Speaker 2>checking that that program is safe to run.

00:14:39.949 --> 00:14:41.630
<v Speaker 2>Safe in the sense that it can't crash

00:14:41.630 --> 00:14:43.870
<v Speaker 2>the machine, that memory access is safe.

00:14:45.310 --> 00:14:47.470
<v Speaker 2>Because it can't tell the difference between,

00:14:48.605 --> 00:14:51.725
<v Speaker 2>you know, maybe I'm a legitimate networking packet

00:14:51.725 --> 00:14:52.205
<v Speaker 2>that's,

00:14:52.765 --> 00:14:53.885
<v Speaker 2>an legitimate

00:14:53.885 --> 00:14:56.605
<v Speaker 2>eBPF program that's filtering network packets.

00:14:57.085 --> 00:15:00.445
<v Speaker 2>You know, maybe I'm protecting against DDoS attacks,

00:15:00.605 --> 00:15:03.165
<v Speaker 2>or maybe I'm a malicious eBPF program, and

00:15:03.165 --> 00:15:04.710
<v Speaker 2>I am just

00:15:05.110 --> 00:15:08.230
<v Speaker 2>throwing away packets for fun. Yeah. The verifier

00:15:08.230 --> 00:15:10.470
<v Speaker 2>can't tell the difference between those two things.

00:15:10.630 --> 00:15:12.150
<v Speaker 2>But when we talk about being safe to

00:15:12.150 --> 00:15:14.870
<v Speaker 2>run-in this context, we really mean it's not

00:15:14.870 --> 00:15:16.230
<v Speaker 2>gonna crash or hang the machine.

00:15:16.735 --> 00:15:17.375
<v Speaker 1>Okay.

00:15:17.535 --> 00:15:20.015
<v Speaker 1>Cool. And I think worth pointing thinking face

00:15:20.015 --> 00:15:22.095
<v Speaker 1>on this. Yeah. I've got my thinking face

00:15:22.095 --> 00:15:23.375
<v Speaker 0>on. Sorry.

00:15:24.015 --> 00:15:26.015
<v Speaker 0>Go ahead. Go ahead, Liz. No. Keep going.

00:15:26.015 --> 00:15:26.655
<v Speaker 0>Keep going.

00:15:27.135 --> 00:15:27.695
<v Speaker 2>Well,

00:15:28.095 --> 00:15:31.260
<v Speaker 2>it's the the thing that really distinguishes eBPF

00:15:31.260 --> 00:15:34.620
<v Speaker 2>from writing a kernel module. So you always

00:15:34.620 --> 00:15:36.940
<v Speaker 2>could extend the kernel, always,

00:15:37.100 --> 00:15:38.779
<v Speaker 2>for a very long time. You've been able

00:15:38.779 --> 00:15:41.100
<v Speaker 2>to extend the kernel by writing kernel modules,

00:15:41.694 --> 00:15:42.255
<v Speaker 2>but

00:15:42.574 --> 00:15:45.774
<v Speaker 2>people are pretty reluctant to install kernel modules

00:15:45.774 --> 00:15:46.574
<v Speaker 2>because

00:15:47.214 --> 00:15:48.014
<v Speaker 2>it's

00:15:48.495 --> 00:15:50.254
<v Speaker 2>if if there is some kind of bug

00:15:50.254 --> 00:15:51.855
<v Speaker 2>in it, if it does crash, it's gonna

00:15:51.855 --> 00:15:53.935
<v Speaker 2>bring down the whole machine and there's no

00:15:54.490 --> 00:15:57.050
<v Speaker 2>kind of safety net like what the eBPF

00:15:57.050 --> 00:15:59.290
<v Speaker 2>verifier is bringing. Makes sense.

00:15:59.610 --> 00:16:01.370
<v Speaker 0>So out of curiosity,

00:16:01.370 --> 00:16:03.930
<v Speaker 0>like, obviously, we're talking a lot more in-depth

00:16:03.930 --> 00:16:07.625
<v Speaker 0>kernel kind of things. And, obviously, you referenced

00:16:07.625 --> 00:16:09.465
<v Speaker 0>if you've ever developed a c program, you

00:16:09.465 --> 00:16:10.585
<v Speaker 0>know what this is like in a machine

00:16:10.585 --> 00:16:13.065
<v Speaker 0>code and things like that. Who would you

00:16:13.065 --> 00:16:14.505
<v Speaker 0>say are probably the

00:16:14.905 --> 00:16:18.025
<v Speaker 0>most common user that you encounter or, like,

00:16:18.025 --> 00:16:20.425
<v Speaker 0>the the people who are really using this

00:16:20.425 --> 00:16:22.210
<v Speaker 0>the most? Who do you think this is

00:16:22.210 --> 00:16:24.210
<v Speaker 0>the most relevant for, I guess, right now?

00:16:24.690 --> 00:16:25.330
<v Speaker 2>So

00:16:25.810 --> 00:16:29.090
<v Speaker 2>lots of people will use eBPF

00:16:29.250 --> 00:16:29.970
<v Speaker 2>through

00:16:30.450 --> 00:16:33.330
<v Speaker 2>tooling that's built on it. So, I mean,

00:16:33.330 --> 00:16:35.810
<v Speaker 2>David mentioned, you know, there's various different projects

00:16:35.810 --> 00:16:36.770
<v Speaker 2>in the CNCF.

00:16:37.165 --> 00:16:37.965
<v Speaker 2>There's

00:16:37.965 --> 00:16:38.685
<v Speaker 2>all the,

00:16:39.485 --> 00:16:41.325
<v Speaker 2>BPF trace and and,

00:16:41.645 --> 00:16:43.805
<v Speaker 2>the BCC family of tools that people can

00:16:43.805 --> 00:16:46.605
<v Speaker 2>use on the command line to do observability.

00:16:46.605 --> 00:16:48.685
<v Speaker 2>There's there's lots of different

00:16:48.925 --> 00:16:51.005
<v Speaker 2>tools that have been built on

00:16:51.390 --> 00:16:53.550
<v Speaker 2>eBPF as a platform. And I think for

00:16:53.550 --> 00:16:56.190
<v Speaker 2>the vast majority of people, that's how they'll

00:16:56.190 --> 00:16:59.950
<v Speaker 2>really experience it. They'll use things like Cilium

00:17:00.110 --> 00:17:00.830
<v Speaker 2>or,

00:17:01.470 --> 00:17:04.589
<v Speaker 2>you know, Falco or Pixi, and they

00:17:04.829 --> 00:17:05.230
<v Speaker 2>may

00:17:05.804 --> 00:17:08.284
<v Speaker 2>be interested in the fact that it's using

00:17:08.284 --> 00:17:10.524
<v Speaker 2>eBPF, but they don't actually have to get

00:17:10.524 --> 00:17:12.124
<v Speaker 2>involved in the details,

00:17:12.764 --> 00:17:14.125
<v Speaker 2>which turns out to be a really good

00:17:14.125 --> 00:17:16.444
<v Speaker 2>thing because, I mean, I'm I'm the sort

00:17:16.444 --> 00:17:18.044
<v Speaker 2>of person who really wants to understand, you

00:17:18.044 --> 00:17:19.964
<v Speaker 2>know, like, how the sausage is made. I

00:17:19.964 --> 00:17:22.529
<v Speaker 2>I I I wanna kinda get inside and

00:17:22.529 --> 00:17:24.049
<v Speaker 2>get a feel for, like, how is this

00:17:24.049 --> 00:17:25.009
<v Speaker 2>really working?

00:17:25.730 --> 00:17:26.769
<v Speaker 2>You can

00:17:27.010 --> 00:17:29.489
<v Speaker 2>learn about eBPF programming.

00:17:29.890 --> 00:17:32.450
<v Speaker 2>You know, it's relatively easy to get, you

00:17:32.450 --> 00:17:34.529
<v Speaker 2>know, things like a hello world or or,

00:17:34.529 --> 00:17:37.595
<v Speaker 2>you know, some basic networking capabilities

00:17:38.635 --> 00:17:41.434
<v Speaker 2>running in eBPF programs that you've written yourself.

00:17:42.554 --> 00:17:44.955
<v Speaker 2>But you do quite quickly start hitting

00:17:45.115 --> 00:17:46.475
<v Speaker 2>the point where

00:17:46.635 --> 00:17:49.515
<v Speaker 2>you're interacting with kernel data structures. And at

00:17:49.515 --> 00:17:51.440
<v Speaker 2>that point, you kinda need to understand what

00:17:51.440 --> 00:17:53.920
<v Speaker 2>those data structures represent and what the effect

00:17:53.920 --> 00:17:56.480
<v Speaker 2>of you changing them might have.

00:17:56.880 --> 00:17:59.120
<v Speaker 2>So it it does quite quickly turn into

00:17:59.120 --> 00:18:00.320
<v Speaker 2>kernel programming.

00:18:00.400 --> 00:18:02.480
<v Speaker 2>So I kinda say that on the one

00:18:02.480 --> 00:18:04.480
<v Speaker 2>hand, most people just don't need to know

00:18:04.480 --> 00:18:06.855
<v Speaker 2>anything about the details of it at all.

00:18:06.855 --> 00:18:08.934
<v Speaker 2>But if they're interested, it's

00:18:09.655 --> 00:18:12.615
<v Speaker 2>relatively accessible for people who are comfortable with

00:18:12.615 --> 00:18:14.935
<v Speaker 2>programming to to kind of dip your toe

00:18:14.935 --> 00:18:15.495
<v Speaker 2>in.

00:18:16.375 --> 00:18:18.935
<v Speaker 2>And then if you really wanna become an

00:18:18.935 --> 00:18:20.775
<v Speaker 2>expert eBPF programmer,

00:18:20.775 --> 00:18:23.440
<v Speaker 2>which I, by no means, consider myself at

00:18:23.440 --> 00:18:23.919
<v Speaker 2>all,

00:18:24.480 --> 00:18:26.799
<v Speaker 2>that really does start to require

00:18:26.880 --> 00:18:28.480
<v Speaker 2>kind of kernel expertise.

00:18:29.040 --> 00:18:30.880
<v Speaker 2>But, fortunately, I work with lots of people,

00:18:30.880 --> 00:18:32.480
<v Speaker 2>I said, I don't who have that kernel

00:18:32.480 --> 00:18:33.040
<v Speaker 2>expertise.

00:18:34.225 --> 00:18:35.985
<v Speaker 0>So would you say this is the the

00:18:35.985 --> 00:18:39.184
<v Speaker 0>gateway to actually becoming a Linux maintainer?

00:18:39.264 --> 00:18:41.104
<v Speaker 2>Honestly, yes. Yes.

00:18:44.544 --> 00:18:45.664
<v Speaker 2>I

00:18:45.745 --> 00:18:47.664
<v Speaker 2>I've not done it, but it never crossed

00:18:47.664 --> 00:18:49.850
<v Speaker 2>my mind that I would ever make a

00:18:49.850 --> 00:18:51.850
<v Speaker 2>contribution to the Linux kernel. But now I've

00:18:51.850 --> 00:18:53.050
<v Speaker 2>kind of in that world, I sort of

00:18:53.050 --> 00:18:54.970
<v Speaker 2>start to think, you know, if if I

00:18:54.970 --> 00:18:56.809
<v Speaker 2>had another twenty five hours in the day,

00:18:56.890 --> 00:18:58.490
<v Speaker 2>that would come of there.

00:19:01.130 --> 00:19:03.290
<v Speaker 0>The temptation is high to go get involved.

00:19:03.875 --> 00:19:04.915
<v Speaker 0>I understand.

00:19:06.595 --> 00:19:08.995
<v Speaker 0>I've asked my one obligatory question, David. Now

00:19:08.995 --> 00:19:09.875
<v Speaker 0>it's your turn.

00:19:11.795 --> 00:19:12.835
<v Speaker 1>Thanks. No.

00:19:13.955 --> 00:19:15.475
<v Speaker 1>I'd like I'd like that I like that

00:19:15.475 --> 00:19:17.395
<v Speaker 1>discussion. Right? Because it's it's one of those

00:19:17.395 --> 00:19:20.110
<v Speaker 1>questions. Like, I do a couple of talks

00:19:20.110 --> 00:19:21.870
<v Speaker 1>on that touch on eBPF. Right? I don't

00:19:21.870 --> 00:19:23.070
<v Speaker 1>go deep on it because I'm not that

00:19:23.070 --> 00:19:25.230
<v Speaker 1>smart. But I always do the same demos.

00:19:25.230 --> 00:19:26.669
<v Speaker 1>And this is iovisor

00:19:26.830 --> 00:19:27.710
<v Speaker 1>bPFCC

00:19:27.710 --> 00:19:29.309
<v Speaker 1>tools demo.

00:19:29.630 --> 00:19:31.950
<v Speaker 1>Mhmm. Specifically, I show off exact snip

00:19:32.865 --> 00:19:34.784
<v Speaker 1>and open snip because,

00:19:34.865 --> 00:19:37.904
<v Speaker 1>you know, in the SRE platform, DevOps world,

00:19:38.385 --> 00:19:41.105
<v Speaker 1>it's quite interesting and important from a security

00:19:41.105 --> 00:19:43.105
<v Speaker 1>perspective and an automation perspective to be able

00:19:43.105 --> 00:19:45.025
<v Speaker 1>to show when certain sensitive files are opened

00:19:45.025 --> 00:19:47.440
<v Speaker 1>on a desk. And eBPF makes that really,

00:19:47.440 --> 00:19:49.680
<v Speaker 1>really simple. And another really cool demo is

00:19:49.680 --> 00:19:51.280
<v Speaker 1>just by using execsnoop,

00:19:51.280 --> 00:19:53.520
<v Speaker 1>you can actually monitor for sudo and site

00:19:53.520 --> 00:19:56.160
<v Speaker 1>UID bit one binaries on the machine. And

00:19:56.160 --> 00:19:58.080
<v Speaker 1>so when people elevate their privileges, you can

00:19:58.080 --> 00:19:59.920
<v Speaker 1>get notifications for that kind of stuff too.

00:20:00.080 --> 00:20:02.235
<v Speaker 1>And the question is always like, how much

00:20:02.235 --> 00:20:03.595
<v Speaker 1>do I need to know about eBPF to

00:20:03.595 --> 00:20:06.395
<v Speaker 1>then start doing tools similar to that? And

00:20:06.395 --> 00:20:08.235
<v Speaker 1>then you show them the source code and

00:20:08.235 --> 00:20:09.915
<v Speaker 1>there's like 20 lines of Python. It's not

00:20:09.915 --> 00:20:11.995
<v Speaker 1>a lot to do these kind of things.

00:20:11.995 --> 00:20:13.035
<v Speaker 1>And I think that's because

00:20:13.810 --> 00:20:16.210
<v Speaker 1>I feel that people can start to build

00:20:16.210 --> 00:20:19.010
<v Speaker 1>eBPF programs just in traces without going deep

00:20:19.010 --> 00:20:20.370
<v Speaker 1>into it. In the same way that with

00:20:20.370 --> 00:20:21.169
<v Speaker 1>containers,

00:20:21.410 --> 00:20:23.010
<v Speaker 1>we can all run containers on our machine,

00:20:23.010 --> 00:20:24.370
<v Speaker 1>but you don't really need to understand what

00:20:24.370 --> 00:20:26.290
<v Speaker 1>a control group as our namespaces anymore.

00:20:26.845 --> 00:20:28.925
<v Speaker 1>I feel like eBPF may make that same

00:20:28.925 --> 00:20:31.885
<v Speaker 1>transition probably already has made that same transition.

00:20:32.045 --> 00:20:33.805
<v Speaker 1>So I'm gonna flip that around a little

00:20:33.805 --> 00:20:35.405
<v Speaker 1>bit and throw the question to Liz.

00:20:35.885 --> 00:20:38.045
<v Speaker 1>If people do see these demos, they listen

00:20:38.045 --> 00:20:39.725
<v Speaker 1>to this and they're like, okay. EBPF is

00:20:39.725 --> 00:20:40.125
<v Speaker 1>really cool.

00:20:40.950 --> 00:20:42.870
<v Speaker 1>What are the languages and the SDKs that

00:20:42.870 --> 00:20:44.230
<v Speaker 1>they can go and start to work with

00:20:44.230 --> 00:20:46.630
<v Speaker 1>right away to experiment with the the new

00:20:46.630 --> 00:20:49.350
<v Speaker 1>tech? Yeah. So you kinda have to answer

00:20:49.350 --> 00:20:51.509
<v Speaker 2>that question in two parts. There's

00:20:51.750 --> 00:20:52.389
<v Speaker 2>the

00:20:52.710 --> 00:20:55.510
<v Speaker 2>actual eBPF program itself that's gonna run-in the

00:20:55.510 --> 00:20:57.905
<v Speaker 2>kernel, and then there's the user space part

00:20:57.905 --> 00:21:00.625
<v Speaker 2>that might interact with it. There are some

00:21:00.625 --> 00:21:02.545
<v Speaker 2>occasions where you don't even need a user

00:21:02.545 --> 00:21:05.745
<v Speaker 2>space part. So, for example, if you're doing

00:21:05.745 --> 00:21:06.705
<v Speaker 2>networking

00:21:07.425 --> 00:21:08.785
<v Speaker 2>functions,

00:21:10.850 --> 00:21:13.410
<v Speaker 2>sometimes they don't need any kind of user

00:21:13.410 --> 00:21:15.490
<v Speaker 2>space interaction because you can just load them

00:21:15.490 --> 00:21:17.090
<v Speaker 2>into the kernel and they can they can

00:21:17.090 --> 00:21:19.570
<v Speaker 2>do what they need to do. But, usually,

00:21:19.570 --> 00:21:22.690
<v Speaker 2>we're gonna have both these parts.

00:21:23.250 --> 00:21:24.370
<v Speaker 2>For the kernel,

00:21:25.225 --> 00:21:27.224
<v Speaker 2>the program's gonna be in

00:21:27.705 --> 00:21:30.345
<v Speaker 2>ultimately, it's going to be in eBPF byte

00:21:30.345 --> 00:21:33.144
<v Speaker 2>court byte code form talked about. There being

00:21:33.144 --> 00:21:35.225
<v Speaker 2>these byte code instructions that look like machine

00:21:35.225 --> 00:21:35.544
<v Speaker 2>code.

00:21:37.320 --> 00:21:39.159
<v Speaker 2>You could just write the machine code by

00:21:39.159 --> 00:21:41.240
<v Speaker 2>hand. Apparently, there are people who do that.

00:21:42.919 --> 00:21:43.159
<v Speaker 2>But,

00:21:43.720 --> 00:21:45.799
<v Speaker 2>you know, for for for me, I I

00:21:45.799 --> 00:21:48.200
<v Speaker 2>would rather write in a in a slightly

00:21:48.200 --> 00:21:51.294
<v Speaker 2>higher language than that. And the languages

00:21:51.294 --> 00:21:53.374
<v Speaker 2>are restricted by being

00:21:53.534 --> 00:21:55.455
<v Speaker 2>they have to be able to compile down

00:21:55.455 --> 00:21:56.654
<v Speaker 2>to bytecode.

00:21:56.654 --> 00:21:57.214
<v Speaker 2>So,

00:21:58.095 --> 00:22:00.975
<v Speaker 2>the compilers that support it right now are

00:22:00.975 --> 00:22:01.854
<v Speaker 2>Clang,

00:22:01.855 --> 00:22:04.414
<v Speaker 2>GCC with both of which can compile c

00:22:04.440 --> 00:22:06.440
<v Speaker 2>and also the Rust compiler.

00:22:07.960 --> 00:22:10.199
<v Speaker 2>I'm not aware of there being other

00:22:10.279 --> 00:22:13.479
<v Speaker 2>programs that support BPF bytecode as a

00:22:13.879 --> 00:22:14.599
<v Speaker 2>target.

00:22:15.799 --> 00:22:16.279
<v Speaker 2>So,

00:22:16.600 --> 00:22:18.519
<v Speaker 2>yeah, c or

00:22:18.725 --> 00:22:21.044
<v Speaker 2>rust really become your choice there.

00:22:22.005 --> 00:22:23.925
<v Speaker 2>There is a little bit of a caveat

00:22:23.925 --> 00:22:27.445
<v Speaker 2>in that. There is this project called Iovisor

00:22:27.445 --> 00:22:28.404
<v Speaker 2>BCC.

00:22:28.405 --> 00:22:30.645
<v Speaker 2>David mentioned the the tools and and things

00:22:30.645 --> 00:22:33.445
<v Speaker 2>like OpenSnoop and ExecSnoop that come from that

00:22:33.809 --> 00:22:34.369
<v Speaker 2>project.

00:22:35.090 --> 00:22:35.729
<v Speaker 2>And

00:22:35.890 --> 00:22:36.769
<v Speaker 2>BCC

00:22:36.769 --> 00:22:37.649
<v Speaker 2>gives you

00:22:37.890 --> 00:22:38.609
<v Speaker 2>some

00:22:38.769 --> 00:22:39.730
<v Speaker 2>friendly

00:22:39.730 --> 00:22:41.090
<v Speaker 2>kind of macros

00:22:41.090 --> 00:22:43.250
<v Speaker 2>such that you can write your code in

00:22:43.250 --> 00:22:46.049
<v Speaker 2>a sort of hybrid of Python and c,

00:22:46.049 --> 00:22:47.409
<v Speaker 2>and it and it takes cares of a

00:22:47.409 --> 00:22:49.355
<v Speaker 2>few takes care of a few things for

00:22:49.355 --> 00:22:49.835
<v Speaker 2>you,

00:22:50.395 --> 00:22:52.634
<v Speaker 2>from your from your c programs.

00:22:53.195 --> 00:22:55.515
<v Speaker 2>But then there's this the user space side

00:22:55.515 --> 00:22:56.234
<v Speaker 2>of things,

00:22:56.635 --> 00:22:58.475
<v Speaker 2>and there you have a much wider choice.

00:22:58.475 --> 00:22:58.794
<v Speaker 2>I mean,

00:22:59.610 --> 00:23:00.410
<v Speaker 2>really,

00:23:00.410 --> 00:23:01.530
<v Speaker 2>you're you're

00:23:01.530 --> 00:23:04.330
<v Speaker 2>not restricted at all except that you probably

00:23:04.330 --> 00:23:06.330
<v Speaker 2>want some SDKs that will make system calls

00:23:06.330 --> 00:23:08.090
<v Speaker 2>for you and make it easier for you

00:23:08.090 --> 00:23:10.010
<v Speaker 2>to interact

00:23:10.010 --> 00:23:10.649
<v Speaker 2>with

00:23:11.290 --> 00:23:13.929
<v Speaker 2>the eBPF program through that syscall interface.

00:23:15.634 --> 00:23:16.834
<v Speaker 2>There are

00:23:16.995 --> 00:23:18.274
<v Speaker 2>there's a Go

00:23:18.434 --> 00:23:20.434
<v Speaker 2>SDK. There's a Rust

00:23:20.674 --> 00:23:21.874
<v Speaker 2>SDK.

00:23:22.115 --> 00:23:23.954
<v Speaker 2>In fact, there's a couple of Go ones.

00:23:24.595 --> 00:23:27.475
<v Speaker 2>And there's a c one, which is probably,

00:23:27.475 --> 00:23:29.715
<v Speaker 2>I would say, today, the most widely used

00:23:29.715 --> 00:23:30.835
<v Speaker 2>called LibBPF.

00:23:31.960 --> 00:23:33.479
<v Speaker 2>It Cillium uses

00:23:33.880 --> 00:23:36.200
<v Speaker 2>Go. We have a a Go eBPF

00:23:36.279 --> 00:23:37.159
<v Speaker 2>library,

00:23:37.159 --> 00:23:38.919
<v Speaker 2>but I think a lot of the projects

00:23:38.919 --> 00:23:42.759
<v Speaker 2>outside outside of that probably directly using LibBPF.

00:23:43.320 --> 00:23:44.840
<v Speaker 1>Yeah. You said one thing there that I

00:23:44.840 --> 00:23:47.799
<v Speaker 1>completely disagree with, and it's you said you

00:23:46.894 --> 00:23:49.294
<v Speaker 1>have a choice between Rust and Sea. That's

00:23:49.294 --> 00:23:50.735
<v Speaker 1>not a choice. I knew this was coming.

00:23:50.735 --> 00:23:51.454
<v Speaker 0>I knew

00:23:52.335 --> 00:23:52.815
<v Speaker 0>it.

00:23:56.095 --> 00:23:58.095
<v Speaker 0>Of course, David's gonna talk about Rust. I'm

00:23:58.095 --> 00:23:59.774
<v Speaker 0>gonna just break in before he gets going

00:23:59.774 --> 00:24:00.095
<v Speaker 0>on it.

00:24:01.930 --> 00:24:03.610
<v Speaker 0>It occurs to me there

00:24:03.770 --> 00:24:05.370
<v Speaker 0>was the mention of when

00:24:06.890 --> 00:24:09.210
<v Speaker 0>containers came around and things like that, things

00:24:09.210 --> 00:24:10.170
<v Speaker 0>kind of changed.

00:24:10.650 --> 00:24:12.730
<v Speaker 0>And as there are more and more languages

00:24:12.730 --> 00:24:14.410
<v Speaker 0>that people are familiar with that you can

00:24:14.410 --> 00:24:17.924
<v Speaker 0>compile down to the eBPF bytecode.

00:24:18.565 --> 00:24:20.725
<v Speaker 0>How often do you find people getting into

00:24:20.725 --> 00:24:22.885
<v Speaker 0>trouble like they used to do when containers

00:24:22.885 --> 00:24:23.924
<v Speaker 0>first came around?

00:24:24.405 --> 00:24:25.765
<v Speaker 0>Because they didn't quite know what they were

00:24:25.765 --> 00:24:27.365
<v Speaker 0>doing but they kind of got it enough

00:24:27.365 --> 00:24:29.220
<v Speaker 0>to get away with it. So how often

00:24:29.220 --> 00:24:30.660
<v Speaker 0>do you find people getting in trouble and

00:24:30.660 --> 00:24:32.820
<v Speaker 0>like, how do you get them out? Like,

00:24:32.820 --> 00:24:34.340
<v Speaker 0>that's always my question. It's like, how do

00:24:34.340 --> 00:24:35.700
<v Speaker 0>you troubleshoot this thing?

00:24:36.020 --> 00:24:38.740
<v Speaker 0>Especially when this is like kernel level and

00:24:38.740 --> 00:24:40.820
<v Speaker 0>you can really, really mess things up fast.

00:24:41.695 --> 00:24:42.415
<v Speaker 2>Yeah.

00:24:42.815 --> 00:24:44.975
<v Speaker 2>I I would say that there's probably two

00:24:45.135 --> 00:24:47.934
<v Speaker 2>major ways that people get caught out.

00:24:48.735 --> 00:24:51.135
<v Speaker 2>One of them is around the kind of

00:24:51.135 --> 00:24:54.095
<v Speaker 2>the tool chain and installing things that are

00:24:54.095 --> 00:24:57.120
<v Speaker 2>compatible with each other because Got it. You

00:24:57.120 --> 00:25:00.160
<v Speaker 2>know, every kernel version has different eBPF support,

00:25:00.160 --> 00:25:02.080
<v Speaker 2>and then you need, you know, maybe your

00:25:02.080 --> 00:25:05.200
<v Speaker 2>user space libraries that maybe are or aren't

00:25:05.200 --> 00:25:08.240
<v Speaker 2>compatible and different distributions of Linux might have

00:25:08.240 --> 00:25:08.560
<v Speaker 2>different,

00:25:10.274 --> 00:25:12.434
<v Speaker 2>you know, versions of different,

00:25:12.755 --> 00:25:15.955
<v Speaker 2>either libBPF or or tools, things like the

00:25:15.955 --> 00:25:18.195
<v Speaker 2>the BCC tools or,

00:25:18.674 --> 00:25:19.474
<v Speaker 2>particularly,

00:25:19.635 --> 00:25:21.235
<v Speaker 2>there's a thing called tool that you can

00:25:21.235 --> 00:25:22.195
<v Speaker 2>use for managing

00:25:23.610 --> 00:25:26.730
<v Speaker 2>BPF programs and making

00:25:26.730 --> 00:25:29.530
<v Speaker 2>sure that you've got a compatible

00:25:29.530 --> 00:25:30.649
<v Speaker 2>set of

00:25:31.930 --> 00:25:34.970
<v Speaker 2>the packages, the source code, the kernel, the

00:25:34.970 --> 00:25:38.010
<v Speaker 2>tools that you want can trip you up

00:25:38.305 --> 00:25:40.065
<v Speaker 2>in numerous different ways.

00:25:41.105 --> 00:25:43.105
<v Speaker 2>And the other thing that catches people out,

00:25:43.105 --> 00:25:45.345
<v Speaker 2>once they got everything installed and everything seems

00:25:45.345 --> 00:25:47.505
<v Speaker 2>to be compatible and they've started compiling some

00:25:47.505 --> 00:25:48.865
<v Speaker 2>code and then they go to load it

00:25:48.865 --> 00:25:52.544
<v Speaker 2>into the kernel and they hit verification

00:25:52.705 --> 00:25:53.105
<v Speaker 2>errors.

00:25:54.070 --> 00:25:54.790
<v Speaker 2>And,

00:25:55.990 --> 00:25:57.830
<v Speaker 2>I I would say over over the last

00:25:57.830 --> 00:26:00.070
<v Speaker 2>few years, there's been a lot of improvement

00:26:00.070 --> 00:26:00.790
<v Speaker 2>in

00:26:00.950 --> 00:26:03.510
<v Speaker 2>the kind of information that the verifier gives

00:26:03.510 --> 00:26:06.470
<v Speaker 2>you about why it's objecting to whatever it

00:26:06.470 --> 00:26:09.595
<v Speaker 2>is it's objecting to. But, I have certainly

00:26:09.755 --> 00:26:11.435
<v Speaker 2>there there's a blog post somewhere that describes

00:26:11.435 --> 00:26:13.195
<v Speaker 2>the verifier as a fickle

00:26:13.275 --> 00:26:15.355
<v Speaker 2>fickle beast, I think it is.

00:26:18.555 --> 00:26:19.274
<v Speaker 0>Nice.

00:26:19.515 --> 00:26:20.315
<v Speaker 1>Alright.

00:26:20.395 --> 00:26:20.635
<v Speaker 1>So,

00:26:21.470 --> 00:26:23.470
<v Speaker 1>you know, we've covered a lot about eBPF

00:26:23.470 --> 00:26:24.110
<v Speaker 1>so far,

00:26:24.830 --> 00:26:27.150
<v Speaker 1>and just kinda to understand the landscape right

00:26:27.150 --> 00:26:29.470
<v Speaker 1>now. Like, it's heavily used for networking. Selium

00:26:29.470 --> 00:26:31.870
<v Speaker 1>has gone all in on eBPF

00:26:31.870 --> 00:26:33.950
<v Speaker 1>even towards the service mesh angle now.

00:26:34.755 --> 00:26:36.835
<v Speaker 1>As a villain even though have Tetragon going

00:26:36.835 --> 00:26:38.595
<v Speaker 1>for the security angle and trying to help

00:26:38.595 --> 00:26:39.475
<v Speaker 1>people with that.

00:26:39.875 --> 00:26:42.035
<v Speaker 1>And, you know, we're seeing, like, PEXA and

00:26:42.035 --> 00:26:45.155
<v Speaker 1>Falco to do more security and monitoring automated

00:26:45.155 --> 00:26:46.035
<v Speaker 1>observability,

00:26:46.035 --> 00:26:46.914
<v Speaker 1>all of this stuff.

00:26:47.235 --> 00:26:48.195
<v Speaker 1>Is there

00:26:48.870 --> 00:26:50.310
<v Speaker 1>as I I don't know if, like, there's

00:26:50.310 --> 00:26:52.790
<v Speaker 1>an eBPF maturity curve. Right? But as people

00:26:52.790 --> 00:26:54.150
<v Speaker 1>start to do more of it and the

00:26:54.150 --> 00:26:57.030
<v Speaker 1>skills become more aware or people are using

00:26:57.030 --> 00:27:00.150
<v Speaker 1>it more, will eBPF creep into, like, our

00:27:00.150 --> 00:27:01.990
<v Speaker 1>day to day application code? Do you see

00:27:01.990 --> 00:27:04.070
<v Speaker 1>people using eBPF to write,

00:27:04.765 --> 00:27:06.285
<v Speaker 1>you know, their CMSs

00:27:06.285 --> 00:27:09.005
<v Speaker 1>or their, you know, proprietary applications? Like, I

00:27:09.005 --> 00:27:10.365
<v Speaker 1>I don't know what those use cases are.

00:27:10.365 --> 00:27:11.565
<v Speaker 1>I don't know if they exist. But will

00:27:11.565 --> 00:27:13.965
<v Speaker 1>eBPF become more than what it is today?

00:27:13.965 --> 00:27:15.164
<v Speaker 1>Which is a bit of a

00:27:15.405 --> 00:27:17.565
<v Speaker 1>forward thinking question, but maybe there's some thoughts.

00:27:17.840 --> 00:27:20.400
<v Speaker 2>It's really interesting to sort of speculate about

00:27:20.400 --> 00:27:22.560
<v Speaker 2>what you could do and also what would

00:27:22.560 --> 00:27:25.120
<v Speaker 2>be useful. But I think one interesting parallel

00:27:25.120 --> 00:27:26.559
<v Speaker 2>is the way that

00:27:28.160 --> 00:27:29.680
<v Speaker 2>networking capabilities

00:27:29.680 --> 00:27:31.760
<v Speaker 2>that used to be in user space

00:27:32.595 --> 00:27:34.674
<v Speaker 2>have migrated into the kernel.

00:27:35.155 --> 00:27:37.794
<v Speaker 2>TCP stack, you know, I am old enough

00:27:37.794 --> 00:27:40.434
<v Speaker 2>to remember when that was more commonly in

00:27:40.434 --> 00:27:43.155
<v Speaker 2>user space, you know, that you'd you'd use

00:27:43.155 --> 00:27:44.355
<v Speaker 2>a TCP library.

00:27:46.159 --> 00:27:48.320
<v Speaker 2>And now we we just expect the kernel

00:27:48.320 --> 00:27:49.519
<v Speaker 2>to take care of that.

00:27:49.919 --> 00:27:52.399
<v Speaker 2>And I think what eBPF will allow us

00:27:52.399 --> 00:27:54.399
<v Speaker 2>to do is to gradually

00:27:54.880 --> 00:27:57.600
<v Speaker 2>move more of that kind of functionality

00:27:57.600 --> 00:27:58.879
<v Speaker 2>into the kernel,

00:27:59.039 --> 00:28:01.120
<v Speaker 2>but in a way that doesn't require everybody

00:28:01.120 --> 00:28:03.085
<v Speaker 2>to take the the leap at the same

00:28:03.085 --> 00:28:04.124
<v Speaker 2>time because

00:28:04.365 --> 00:28:05.804
<v Speaker 2>we don't all have to be running the

00:28:05.804 --> 00:28:07.244
<v Speaker 2>same eBPF programs.

00:28:08.205 --> 00:28:10.765
<v Speaker 2>So I think something like service mesh is

00:28:10.765 --> 00:28:12.845
<v Speaker 2>a really great example where,

00:28:14.765 --> 00:28:18.190
<v Speaker 2>Cilium as a as a CNI networking component

00:28:18.190 --> 00:28:20.350
<v Speaker 2>for for Kubernetes is in this really great

00:28:20.350 --> 00:28:22.510
<v Speaker 2>sort of position in the kernel to be

00:28:22.510 --> 00:28:24.910
<v Speaker 2>able to, you know, pick up network packets

00:28:24.910 --> 00:28:26.669
<v Speaker 2>and put them where they need to be

00:28:26.830 --> 00:28:27.470
<v Speaker 2>and

00:28:27.630 --> 00:28:30.110
<v Speaker 2>observe them and report on them and do

00:28:30.110 --> 00:28:33.705
<v Speaker 2>kind of security related operations on them,

00:28:34.105 --> 00:28:35.625
<v Speaker 2>all of which are very much the kind

00:28:35.625 --> 00:28:37.225
<v Speaker 2>of things that we expect from a service

00:28:37.225 --> 00:28:37.864
<v Speaker 2>mesh.

00:28:38.424 --> 00:28:39.144
<v Speaker 2>Today,

00:28:39.544 --> 00:28:42.184
<v Speaker 2>we can't do everything in the kernel. I

00:28:42.184 --> 00:28:43.784
<v Speaker 2>I mean, theoretically,

00:28:43.784 --> 00:28:45.864
<v Speaker 2>I think we could, but in practice,

00:28:46.024 --> 00:28:47.950
<v Speaker 2>I think all the kind of layer seven

00:28:47.950 --> 00:28:48.990
<v Speaker 2>operations,

00:28:48.990 --> 00:28:51.150
<v Speaker 2>we're using a user space proxy to do

00:28:51.150 --> 00:28:52.909
<v Speaker 2>that. We're using Envoy to do that.

00:28:54.510 --> 00:28:55.549
<v Speaker 2>I think

00:28:55.870 --> 00:28:58.510
<v Speaker 2>over time, you know, I expect that in,

00:28:58.510 --> 00:29:00.990
<v Speaker 2>you know, some number of years time, we

00:29:01.230 --> 00:29:03.675
<v Speaker 2>all of that code will be in the

00:29:03.675 --> 00:29:06.235
<v Speaker 2>kernel. But maybe the you know, Kubernetes will

00:29:06.235 --> 00:29:08.075
<v Speaker 2>be in the kernel too. Who knows? Maybe

00:29:08.075 --> 00:29:09.754
<v Speaker 2>that's kind of future

00:29:10.315 --> 00:29:14.075
<v Speaker 2>Yeah. Why not? You know? So fancy rewriting

00:29:14.075 --> 00:29:15.035
<v Speaker 2>Kubernetes.

00:29:15.035 --> 00:29:16.395
<v Speaker 2>Perhaps we should all do it in Rust

00:29:16.395 --> 00:29:17.355
<v Speaker 2>in in eBPF.

00:29:20.990 --> 00:29:23.550
<v Speaker 2>David's looking like he might actually do that.

00:29:24.910 --> 00:29:26.750
<v Speaker 0>Yeah. No. He might. He might.

00:29:27.470 --> 00:29:30.270
<v Speaker 1>I mean, I am not personally writing any

00:29:30.270 --> 00:29:33.684
<v Speaker 1>Kubernetes components in Rust, but people are exploring

00:29:33.685 --> 00:29:35.044
<v Speaker 1>that these days.

00:29:35.685 --> 00:29:37.605
<v Speaker 1>So you never you never know. Right?

00:29:38.645 --> 00:29:40.485
<v Speaker 0>I don't trust that statement that you're not

00:29:40.485 --> 00:29:41.445
<v Speaker 0>doing it yet.

00:29:42.565 --> 00:29:43.445
<v Speaker 1>No.

00:29:43.445 --> 00:29:44.805
<v Speaker 1>I I I know. I don't have time.

00:29:44.805 --> 00:29:45.925
<v Speaker 1>I'm too busy talking to you.

00:29:49.350 --> 00:29:50.470
<v Speaker 1>Alright. Well,

00:29:51.429 --> 00:29:53.350
<v Speaker 1>is there anything else, Liz, you would like

00:29:53.350 --> 00:29:54.950
<v Speaker 1>us to throw at you to ask before

00:29:54.950 --> 00:29:56.630
<v Speaker 1>we we wrap this up? And if it

00:29:56.630 --> 00:29:57.830
<v Speaker 1>is just sitting on the top of your

00:29:57.830 --> 00:29:59.774
<v Speaker 1>tongue waiting to be said. Sorry. Yeah. No.

00:29:59.774 --> 00:30:01.134
<v Speaker 2>There is one thing I would like to

00:30:01.134 --> 00:30:03.854
<v Speaker 2>mention, which is the upcoming eBPF summit.

00:30:04.254 --> 00:30:07.774
<v Speaker 2>Because if people are interested in, you know,

00:30:07.774 --> 00:30:09.615
<v Speaker 2>hearing more about what's going on in in

00:30:09.615 --> 00:30:10.975
<v Speaker 2>the kind of eBPF community,

00:30:11.840 --> 00:30:14.720
<v Speaker 2>learning more about how it's being used, seeing

00:30:14.720 --> 00:30:16.559
<v Speaker 2>some of the kind of interesting

00:30:17.040 --> 00:30:18.960
<v Speaker 2>directions that people are going with it, and

00:30:18.960 --> 00:30:22.240
<v Speaker 2>learning more about the future of eBPF itself.

00:30:22.560 --> 00:30:25.520
<v Speaker 2>EBPF summit, it's online. It's free.

00:30:25.680 --> 00:30:26.480
<v Speaker 2>You know, it's a virtual

00:30:27.205 --> 00:30:28.965
<v Speaker 2>conference. This is gonna be, I think, the

00:30:28.965 --> 00:30:30.725
<v Speaker 2>fourth time that we've held it.

00:30:31.685 --> 00:30:33.605
<v Speaker 2>It's on September.

00:30:33.845 --> 00:30:36.165
<v Speaker 2>And, yeah, come come join in. If you'll

00:30:36.165 --> 00:30:38.325
<v Speaker 2>go to eBPF.io,

00:30:38.405 --> 00:30:40.919
<v Speaker 2>you'll find a link to the summit there.

00:30:40.919 --> 00:30:44.279
<v Speaker 2>And, yeah, it's it's always been a really

00:30:44.279 --> 00:30:46.760
<v Speaker 2>nice kind of community feel event,

00:30:46.760 --> 00:30:49.159
<v Speaker 2>so I'm really looking forward to it. Excellent.

00:30:49.639 --> 00:30:53.320
<v Speaker 1>Alright. Have you want to shamelessly plug anything

00:30:53.320 --> 00:30:54.565
<v Speaker 1>else yourself,

00:30:55.285 --> 00:30:57.685
<v Speaker 1>anything else, feel free to mention it now

00:30:57.685 --> 00:30:59.605
<v Speaker 1>or forever hold your peace. We'll make sure

00:30:59.605 --> 00:31:01.045
<v Speaker 1>all the links end up in the show

00:31:01.045 --> 00:31:03.205
<v Speaker 1>notes as well. I guess it would be

00:31:03.205 --> 00:31:05.925
<v Speaker 2>remiss of me not to mention learning eBPF.

00:31:07.860 --> 00:31:10.260
<v Speaker 2>There you go. Available either for you know,

00:31:10.260 --> 00:31:11.780
<v Speaker 2>if you want the PDF version, you can

00:31:11.780 --> 00:31:14.260
<v Speaker 2>download that from isavailant.com,

00:31:14.660 --> 00:31:15.780
<v Speaker 2>or you can,

00:31:16.100 --> 00:31:17.940
<v Speaker 2>you know, order it from your favorite local

00:31:17.940 --> 00:31:18.660
<v Speaker 2>bookseller

00:31:18.875 --> 00:31:20.635
<v Speaker 2>or get it from Amazon if that's your

00:31:20.635 --> 00:31:21.355
<v Speaker 0>bag.

00:31:23.035 --> 00:31:24.235
<v Speaker 0>Shop local.

00:31:24.395 --> 00:31:25.275
<v Speaker 0>Exactly.

00:31:26.075 --> 00:31:27.915
<v Speaker 1>Alright. Well, thank you so much for your

00:31:27.915 --> 00:31:30.555
<v Speaker 1>time. Pleasure. Thank you, Liz. Thanks for joining

00:31:30.555 --> 00:31:32.480
<v Speaker 0>us. If you wanna keep up with us,

00:31:32.480 --> 00:31:35.120
<v Speaker 1>consider subscribing to the podcast on your favorite

00:31:35.120 --> 00:31:39.119
<v Speaker 1>podcasting app or even go to cloudnativecompass.fm.

00:31:39.279 --> 00:31:40.640
<v Speaker 0>And if you want us to talk with

00:31:40.640 --> 00:31:43.519
<v Speaker 0>someone specific or cover a specific topic,

00:31:43.760 --> 00:31:45.840
<v Speaker 0>reach out to us on any social media

00:31:45.840 --> 00:31:48.725
<v Speaker 0>platform. Until next time when exploring the cloud

00:31:48.725 --> 00:31:52.565
<v Speaker 1>native landscape on 3. On three. One,

00:31:52.804 --> 00:31:53.365
<v Speaker 1>two,

00:31:53.605 --> 00:31:54.244
<v Speaker 1>three.

00:31:54.885 --> 00:31:56.485
<v Speaker 1>Forget your compass. Forget your compass.
