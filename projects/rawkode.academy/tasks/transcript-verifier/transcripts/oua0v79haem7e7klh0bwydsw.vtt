WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: d76bd3a7-663b-433c-9285-957b4b388ea9
Created: 2025-04-29T19:47:36.303Z
Duration: 5350.0933
Channels: 1

00:00:52.310 --> 00:00:53.190
<v Speaker 0>Hello,

00:00:53.270 --> 00:00:55.989
<v Speaker 0>and welcome to today's episode of Rawkode live.

00:00:55.989 --> 00:00:57.750
<v Speaker 0>I'm your host Rawkode. Today,

00:00:58.550 --> 00:01:00.630
<v Speaker 0>we're gonna be taking a look at Litmus,

00:01:00.630 --> 00:01:03.430
<v Speaker 0>a chaos engineering project that aims to bring

00:01:03.430 --> 00:01:05.910
<v Speaker 0>chaos engineering to Kubernetes in a cloud native

00:01:05.910 --> 00:01:06.710
<v Speaker 0>and Kubernetes

00:01:07.034 --> 00:01:09.034
<v Speaker 0>Kubernetes native fashion.

00:01:09.595 --> 00:01:11.755
<v Speaker 0>Now, before we get started on taking a

00:01:11.755 --> 00:01:13.195
<v Speaker 0>look at that project, I also just want

00:01:13.195 --> 00:01:15.274
<v Speaker 0>to encourage you to please subscribe to the

00:01:15.274 --> 00:01:17.674
<v Speaker 0>YouTube channel and click the bell, and also

00:01:17.674 --> 00:01:20.075
<v Speaker 0>join our Discord community where we have lots

00:01:20.075 --> 00:01:22.155
<v Speaker 0>of conversation during the show and after the

00:01:22.155 --> 00:01:23.910
<v Speaker 0>show to discuss all the projects that we

00:01:23.910 --> 00:01:24.470
<v Speaker 0>cover.

00:01:25.110 --> 00:01:27.590
<v Speaker 0>Now joining me today to discuss Litmus

00:01:27.670 --> 00:01:29.270
<v Speaker 0>are members

00:01:29.270 --> 00:01:31.990
<v Speaker 0>of the Chaos Native team, Ooma and Kartik.

00:01:31.990 --> 00:01:33.190
<v Speaker 0>Hi there. How are you both?

00:01:34.550 --> 00:01:35.590
<v Speaker 1>Doing great,

00:01:35.830 --> 00:01:38.715
<v Speaker 1>David. Thanks for inviting us here. Happy to

00:01:38.715 --> 00:01:40.715
<v Speaker 1>be here. Looking forward to this

00:01:40.955 --> 00:01:41.835
<v Speaker 1>live session.

00:01:42.155 --> 00:01:44.875
<v Speaker 0>Yeah. I think chaos engineering is is getting

00:01:44.875 --> 00:01:46.235
<v Speaker 0>a lot more traction. I see a lot

00:01:46.235 --> 00:01:47.995
<v Speaker 0>more people talking about it day after day,

00:01:47.995 --> 00:01:49.835
<v Speaker 0>month after month, and I'm really excited to

00:01:49.835 --> 00:01:51.380
<v Speaker 0>be able to just

00:01:51.700 --> 00:01:53.620
<v Speaker 0>get a taste for what Litmus can do

00:01:53.620 --> 00:01:56.020
<v Speaker 0>to my Kubernetes cluster, both good and bad.

00:01:56.020 --> 00:01:57.780
<v Speaker 0>And then also worried about what is gonna

00:01:57.780 --> 00:02:00.180
<v Speaker 0>uncover in some of my actual production clusters.

00:02:00.180 --> 00:02:00.660
<v Speaker 0>But

00:02:00.980 --> 00:02:02.420
<v Speaker 0>I guess that's a problem that we all

00:02:02.420 --> 00:02:03.380
<v Speaker 0>have to tackle eventually.

00:02:04.215 --> 00:02:06.375
<v Speaker 0>Do you both wanna just, take a a

00:02:06.375 --> 00:02:08.215
<v Speaker 0>few moments to kind of introduce yourself, tell

00:02:08.215 --> 00:02:09.495
<v Speaker 0>us a little bit about you, and then

00:02:09.495 --> 00:02:10.935
<v Speaker 0>we'll start talking about Litmus.

00:02:11.495 --> 00:02:12.375
<v Speaker 0>Sure.

00:02:12.775 --> 00:02:14.935
<v Speaker 1>Again, thank you, and happy to be here.

00:02:15.255 --> 00:02:19.370
<v Speaker 1>I'm Omar Mukhara, CEO of Chaos Native, also

00:02:19.370 --> 00:02:21.850
<v Speaker 1>I'm, a maintainer on the Litmus

00:02:22.010 --> 00:02:23.450
<v Speaker 1>Chaos project,

00:02:23.450 --> 00:02:26.010
<v Speaker 1>which is now in, CNCF sandbox.

00:02:26.570 --> 00:02:28.730
<v Speaker 1>To tell a little bit, more about me,

00:02:28.730 --> 00:02:30.170
<v Speaker 1>I live in Bangalore,

00:02:30.410 --> 00:02:32.890
<v Speaker 1>with my two sons and my wife.

00:02:33.290 --> 00:02:33.690
<v Speaker 1>Basically

00:02:34.525 --> 00:02:37.085
<v Speaker 1>have been a technology architect in the past.

00:02:37.085 --> 00:02:40.685
<v Speaker 1>About ten years ago, I jumped into entrepreneurship

00:02:40.685 --> 00:02:41.165
<v Speaker 1>with,

00:02:41.965 --> 00:02:44.765
<v Speaker 1>starting CloudByte storage company,

00:02:45.245 --> 00:02:46.285
<v Speaker 1>which then we,

00:02:46.685 --> 00:02:50.340
<v Speaker 1>pivoted into Open EBS to write storage for

00:02:50.340 --> 00:02:51.220
<v Speaker 1>Kubernetes,

00:02:51.220 --> 00:02:52.420
<v Speaker 1>which is, still,

00:02:52.980 --> 00:02:56.020
<v Speaker 1>one of, the popular projects in CNCF.

00:02:56.340 --> 00:02:57.780
<v Speaker 1>And then while I was doing,

00:02:58.099 --> 00:03:00.500
<v Speaker 1>Open EBS project, we tried to do chaos

00:03:00.500 --> 00:03:03.635
<v Speaker 1>engineering for Open EBS. That's when Rawkode and

00:03:03.635 --> 00:03:04.755
<v Speaker 1>I started writing,

00:03:04.995 --> 00:03:05.795
<v Speaker 1>Litmus,

00:03:05.795 --> 00:03:08.035
<v Speaker 1>which became a CNCO project,

00:03:08.115 --> 00:03:10.675
<v Speaker 1>and then we recently spun off, the project

00:03:10.675 --> 00:03:12.515
<v Speaker 1>from MyData into

00:03:12.595 --> 00:03:13.875
<v Speaker 1>a company for,

00:03:14.115 --> 00:03:16.675
<v Speaker 1>its own development. The projects are to focus

00:03:16.675 --> 00:03:19.470
<v Speaker 1>on this project, and it's chaos, native.

00:03:19.870 --> 00:03:21.310
<v Speaker 1>We also have launched,

00:03:21.630 --> 00:03:24.830
<v Speaker 1>a chaos conference called Chaos Carnival,

00:03:25.230 --> 00:03:28.110
<v Speaker 1>to focus, more on cloud native chaos engineering

00:03:28.110 --> 00:03:30.590
<v Speaker 1>and also a little bit more open and,

00:03:31.230 --> 00:03:33.474
<v Speaker 1>open for everyone kind of a thing. So

00:03:33.474 --> 00:03:35.395
<v Speaker 1>that's a bit of my introduction. Looking forward

00:03:35.395 --> 00:03:37.235
<v Speaker 1>to, this session here.

00:03:39.795 --> 00:03:42.435
<v Speaker 2>Cool. Let me go ahead and introduce myself.

00:03:42.435 --> 00:03:43.475
<v Speaker 2>Hello, everyone.

00:03:43.795 --> 00:03:44.754
<v Speaker 2>I'm Kartik.

00:03:45.600 --> 00:03:48.240
<v Speaker 2>I'm a lead maintainer of the Litmus Chaos

00:03:48.240 --> 00:03:49.040
<v Speaker 2>project,

00:03:49.440 --> 00:03:50.880
<v Speaker 2>also from Chaos Native.

00:03:51.200 --> 00:03:52.080
<v Speaker 2>So

00:03:52.800 --> 00:03:54.800
<v Speaker 2>I have a shared history with Ooma.

00:03:55.120 --> 00:03:56.400
<v Speaker 2>We worked on

00:03:56.640 --> 00:03:57.680
<v Speaker 2>Open ABS,

00:03:57.920 --> 00:03:58.800
<v Speaker 2>MyData,

00:03:58.800 --> 00:03:59.360
<v Speaker 2>and

00:03:59.680 --> 00:04:01.315
<v Speaker 2>he came up with Litmus as a way

00:04:01.315 --> 00:04:03.795
<v Speaker 2>to test the resilience of OpenEBS over a

00:04:03.795 --> 00:04:04.675
<v Speaker 2>period of time

00:04:04.995 --> 00:04:07.555
<v Speaker 2>while it's useful for everyone else and if

00:04:07.555 --> 00:04:08.915
<v Speaker 2>you had separate project.

00:04:09.715 --> 00:04:12.915
<v Speaker 2>I'm having a blast maintaining Litmus and interacting

00:04:12.915 --> 00:04:13.715
<v Speaker 2>with the community,

00:04:14.330 --> 00:04:16.570
<v Speaker 2>and I'm really looking forward to this session.

00:04:17.130 --> 00:04:18.890
<v Speaker 2>Yeah. Glad to be here.

00:04:19.370 --> 00:04:22.729
<v Speaker 0>Awesome. Thank you very much. So I believe

00:04:22.729 --> 00:04:24.650
<v Speaker 0>we've got some slides where we're gonna just

00:04:24.650 --> 00:04:25.610
<v Speaker 0>kinda cover

00:04:26.010 --> 00:04:28.010
<v Speaker 0>what that message and give everybody a little

00:04:28.010 --> 00:04:29.915
<v Speaker 0>bit extra flavor. So if we can get

00:04:29.915 --> 00:04:32.155
<v Speaker 0>that screen shared, we'll jump through to the

00:04:32.155 --> 00:04:33.515
<v Speaker 0>slides, and then we'll move on to the

00:04:33.515 --> 00:04:35.115
<v Speaker 0>hands on component afterwards.

00:04:36.235 --> 00:04:37.915
<v Speaker 0>Awesome. Thank you very much.

00:04:39.915 --> 00:04:40.395
<v Speaker 1>Alright.

00:04:41.400 --> 00:04:42.120
<v Speaker 1>You, David.

00:04:42.520 --> 00:04:43.320
<v Speaker 1>So

00:04:43.640 --> 00:04:44.920
<v Speaker 1>with that introduction,

00:04:44.920 --> 00:04:46.600
<v Speaker 1>I just want to take about ten to

00:04:46.600 --> 00:04:47.560
<v Speaker 1>fifteen minutes.

00:04:47.880 --> 00:04:50.520
<v Speaker 1>After that, I think David has plenty of

00:04:50.520 --> 00:04:51.640
<v Speaker 1>a live session,

00:04:52.280 --> 00:04:53.080
<v Speaker 1>with Litmus.

00:04:53.735 --> 00:04:54.455
<v Speaker 1>So

00:04:54.855 --> 00:04:57.575
<v Speaker 1>what I want to do here really is

00:04:58.375 --> 00:05:01.095
<v Speaker 1>talk very briefly about chaos engineering that we

00:05:01.095 --> 00:05:02.135
<v Speaker 1>all know of

00:05:02.615 --> 00:05:06.455
<v Speaker 1>and the the new cloud native chaos engineering

00:05:06.455 --> 00:05:09.700
<v Speaker 1>and then introduce the project, why we started

00:05:09.700 --> 00:05:11.140
<v Speaker 1>Litmus, really.

00:05:11.780 --> 00:05:14.420
<v Speaker 1>So quickly, chaos engineering is all about

00:05:14.740 --> 00:05:15.540
<v Speaker 1>avoiding

00:05:15.700 --> 00:05:16.660
<v Speaker 1>downtimes.

00:05:17.380 --> 00:05:20.180
<v Speaker 1>Unplanned downtimes are always expensive.

00:05:20.420 --> 00:05:22.180
<v Speaker 1>Right? So you don't want to be that

00:05:22.835 --> 00:05:24.435
<v Speaker 1>doing that. So

00:05:24.675 --> 00:05:26.275
<v Speaker 1>what we are seeing so far in the

00:05:26.275 --> 00:05:27.555
<v Speaker 1>last decade is

00:05:27.794 --> 00:05:30.435
<v Speaker 1>test, don't wait. Right? So you do the

00:05:30.435 --> 00:05:32.755
<v Speaker 1>testing on the operation

00:05:32.755 --> 00:05:35.770
<v Speaker 1>side of your DevOps loop and then find

00:05:35.770 --> 00:05:38.330
<v Speaker 1>the issues or tunables that are needed,

00:05:38.889 --> 00:05:41.050
<v Speaker 1>and get back into the shape. Right? So

00:05:41.050 --> 00:05:43.050
<v Speaker 1>this is, we know that.

00:05:43.610 --> 00:05:46.010
<v Speaker 1>So so far, it's all about,

00:05:46.889 --> 00:05:49.530
<v Speaker 1>trying to do it on demand or

00:05:49.795 --> 00:05:51.475
<v Speaker 1>you do chaos engineering

00:05:51.795 --> 00:05:52.915
<v Speaker 1>after you

00:05:53.315 --> 00:05:56.595
<v Speaker 1>burn your hands with, some expensive downtime, that's

00:05:56.595 --> 00:05:57.155
<v Speaker 1>really

00:05:57.395 --> 00:05:59.155
<v Speaker 1>been the case. And,

00:05:59.635 --> 00:06:01.395
<v Speaker 1>proactive chaos engineering

00:06:01.909 --> 00:06:04.870
<v Speaker 1>is slowly catching up. The reason why so

00:06:04.870 --> 00:06:05.990
<v Speaker 1>many things are,

00:06:06.310 --> 00:06:08.870
<v Speaker 1>happening around chaos engineering is there is a

00:06:08.870 --> 00:06:12.629
<v Speaker 1>real push, from the new ecosystem around cloud

00:06:12.629 --> 00:06:13.270
<v Speaker 1>native.

00:06:13.509 --> 00:06:16.905
<v Speaker 1>I'll get to that. But, so far, how

00:06:16.905 --> 00:06:18.185
<v Speaker 1>it's been done is,

00:06:18.585 --> 00:06:21.225
<v Speaker 1>you know, it's it's done based on a

00:06:21.225 --> 00:06:25.145
<v Speaker 1>need, and it is generally done by SREs

00:06:25.145 --> 00:06:26.745
<v Speaker 1>on the operation side of it.

00:06:27.310 --> 00:06:29.389
<v Speaker 1>You don't have a very tight integration of

00:06:29.389 --> 00:06:32.190
<v Speaker 1>kiosk engineering itself in CA and CD.

00:06:32.430 --> 00:06:36.350
<v Speaker 1>And, generally, observability is not a a preplanned

00:06:36.350 --> 00:06:38.910
<v Speaker 1>thought, rather it is an afterthought.

00:06:39.150 --> 00:06:40.110
<v Speaker 1>And

00:06:40.425 --> 00:06:41.384
<v Speaker 1>communicating

00:06:41.384 --> 00:06:44.985
<v Speaker 1>with management, convincing the management is all based

00:06:44.985 --> 00:06:48.025
<v Speaker 1>on the need. Right? So chaos engineering is

00:06:48.025 --> 00:06:50.264
<v Speaker 1>a great practice. That is a proven practice,

00:06:50.264 --> 00:06:52.264
<v Speaker 1>but it is not like a science where

00:06:52.264 --> 00:06:54.930
<v Speaker 1>everybody knows how to do it. Or it's

00:06:54.930 --> 00:06:56.770
<v Speaker 1>not as easy as, you know I know

00:06:56.770 --> 00:06:59.410
<v Speaker 1>Kubernetes, but I also know how to do

00:06:59.410 --> 00:07:02.770
<v Speaker 1>chaos engineering on Kubernetes. Right? So that's that's

00:07:02.770 --> 00:07:05.410
<v Speaker 1>not how it's been till recently.

00:07:06.130 --> 00:07:08.215
<v Speaker 1>But chaos engineering

00:07:08.215 --> 00:07:10.775
<v Speaker 1>is starting to begin. We all know that

00:07:10.775 --> 00:07:11.895
<v Speaker 1>Kubernetes

00:07:11.895 --> 00:07:14.775
<v Speaker 1>itself is, you know, has crossed the chasm.

00:07:14.855 --> 00:07:15.975
<v Speaker 1>Everyone is

00:07:16.455 --> 00:07:18.615
<v Speaker 1>in the middle of adopting it or already

00:07:18.615 --> 00:07:22.060
<v Speaker 1>adopting it adopted it. But the chaos engineering

00:07:22.060 --> 00:07:25.180
<v Speaker 1>for Kubernetes is still only market, I would

00:07:25.180 --> 00:07:27.660
<v Speaker 1>say. That really means that there are new

00:07:27.660 --> 00:07:28.940
<v Speaker 1>tools being available.

00:07:29.259 --> 00:07:30.540
<v Speaker 1>People are beginning

00:07:30.620 --> 00:07:33.419
<v Speaker 1>to think that we need chaos engineering now

00:07:33.419 --> 00:07:35.340
<v Speaker 1>that they adopted, Kubernetes.

00:07:35.340 --> 00:07:37.005
<v Speaker 1>Right? So we are going to see a

00:07:37.005 --> 00:07:37.725
<v Speaker 1>lot of,

00:07:38.925 --> 00:07:39.805
<v Speaker 1>innovation.

00:07:40.604 --> 00:07:43.805
<v Speaker 1>Peep people like us trying to put chaos

00:07:43.805 --> 00:07:45.325
<v Speaker 1>engineering into mainstream,

00:07:45.965 --> 00:07:48.285
<v Speaker 1>for bringing resilience into Kubernetes.

00:07:48.820 --> 00:07:51.540
<v Speaker 1>Right? So now let me talk a little

00:07:51.540 --> 00:07:53.940
<v Speaker 1>bit about cloud native chaos engineering.

00:07:54.180 --> 00:07:55.460
<v Speaker 1>It's really about,

00:07:55.940 --> 00:07:59.140
<v Speaker 1>you know, trying to do chaos engineering specifically

00:07:59.140 --> 00:08:01.140
<v Speaker 1>for cloud native environments.

00:08:01.300 --> 00:08:03.060
<v Speaker 1>I would call it as a cloud native

00:08:03.060 --> 00:08:03.860
<v Speaker 1>chaos engineering.

00:08:04.215 --> 00:08:06.855
<v Speaker 1>So what's so different about it? Right?

00:08:07.095 --> 00:08:07.735
<v Speaker 1>So,

00:08:08.455 --> 00:08:11.895
<v Speaker 1>these are the five principles that we think,

00:08:12.215 --> 00:08:15.335
<v Speaker 1>should be different about chaos engineering.

00:08:15.415 --> 00:08:17.095
<v Speaker 1>Right? Kubernetes

00:08:17.330 --> 00:08:20.450
<v Speaker 1>and the regular cloud native ecosystem would not

00:08:20.450 --> 00:08:22.770
<v Speaker 1>be as popular as it is today if

00:08:22.770 --> 00:08:25.410
<v Speaker 1>it is not for open source. Right? So

00:08:25.410 --> 00:08:28.370
<v Speaker 1>chaos engineering should also be built,

00:08:28.530 --> 00:08:29.410
<v Speaker 1>maintained

00:08:29.650 --> 00:08:32.135
<v Speaker 1>in open source. Right? So that's that's one

00:08:32.135 --> 00:08:33.255
<v Speaker 1>thing that we see.

00:08:33.735 --> 00:08:36.215
<v Speaker 1>And, also, it should be community collaborated.

00:08:36.375 --> 00:08:38.855
<v Speaker 1>Like, all the helm charts, chaos charts, chaos

00:08:38.855 --> 00:08:40.775
<v Speaker 1>experiments, chaos workflows

00:08:40.855 --> 00:08:41.815
<v Speaker 1>should be,

00:08:42.375 --> 00:08:43.334
<v Speaker 1>you know, developed

00:08:43.799 --> 00:08:45.880
<v Speaker 1>in collaboration with the community.

00:08:46.200 --> 00:08:48.120
<v Speaker 1>Then it becomes much easier. There are going

00:08:48.120 --> 00:08:48.920
<v Speaker 1>to be much,

00:08:49.880 --> 00:08:52.360
<v Speaker 1>you know, resilient, the test itself.

00:08:52.600 --> 00:08:54.840
<v Speaker 1>There's less chance of false alarms and all.

00:08:54.840 --> 00:08:56.360
<v Speaker 1>And then chaos engineering,

00:08:56.440 --> 00:08:58.520
<v Speaker 1>you start, and then you end up maintaining

00:08:58.520 --> 00:09:00.395
<v Speaker 1>all your scripts. So there is going to

00:09:00.395 --> 00:09:02.555
<v Speaker 1>be an operator of its own, versioning of

00:09:02.555 --> 00:09:03.834
<v Speaker 1>the chaos experiments.

00:09:03.834 --> 00:09:06.235
<v Speaker 1>So you need to have custom resources, open

00:09:06.235 --> 00:09:07.595
<v Speaker 1>API around that.

00:09:07.915 --> 00:09:10.235
<v Speaker 1>Then comes how do you scale it? How

00:09:10.235 --> 00:09:13.610
<v Speaker 1>do you scale your chaos experiments for a

00:09:13.610 --> 00:09:16.650
<v Speaker 1>system that's got hundreds and thousands of nodes,

00:09:16.650 --> 00:09:19.610
<v Speaker 1>multiple clusters, cross cloud, all this stuff?

00:09:20.010 --> 00:09:21.770
<v Speaker 1>We just need to be able to manage

00:09:21.770 --> 00:09:24.730
<v Speaker 1>chaos engineering just the way how you've been

00:09:25.485 --> 00:09:28.605
<v Speaker 1>managing your Kubernetes configuration itself.

00:09:28.845 --> 00:09:30.205
<v Speaker 1>That is through GitOps.

00:09:30.285 --> 00:09:32.685
<v Speaker 1>Right? So GitOps should be applied for chaos

00:09:32.685 --> 00:09:33.885
<v Speaker 1>engineering also.

00:09:34.205 --> 00:09:34.925
<v Speaker 1>And

00:09:35.085 --> 00:09:37.005
<v Speaker 1>the last one, but they're not the least,

00:09:37.520 --> 00:09:39.360
<v Speaker 1>how do you actually

00:09:39.680 --> 00:09:42.160
<v Speaker 1>know that a fault has happened?

00:09:42.880 --> 00:09:45.200
<v Speaker 1>Because you introduced it or there was an

00:09:45.200 --> 00:09:47.520
<v Speaker 1>actual fault. Obviously, when we introduce

00:09:47.920 --> 00:09:49.600
<v Speaker 1>a fault or multiple faults,

00:09:50.185 --> 00:09:52.665
<v Speaker 1>you're going to have some description, and you

00:09:52.665 --> 00:09:55.065
<v Speaker 1>want to understand what's going on there. Oh,

00:09:55.065 --> 00:09:57.865
<v Speaker 1>okay. This is still alright because I introduced

00:09:57.865 --> 00:09:59.705
<v Speaker 1>it. Now I exactly know where to look

00:09:59.705 --> 00:10:01.705
<v Speaker 1>at. So that's called observability.

00:10:01.865 --> 00:10:05.069
<v Speaker 1>Observability is a super key thing. We call

00:10:05.069 --> 00:10:07.069
<v Speaker 1>it as open observability. You don't want to

00:10:07.069 --> 00:10:09.310
<v Speaker 1>get logged in into some of the observability

00:10:09.310 --> 00:10:12.269
<v Speaker 1>tools. You basically try to keep open standards

00:10:12.269 --> 00:10:14.750
<v Speaker 1>around that. So this is what

00:10:15.790 --> 00:10:18.095
<v Speaker 1>I call as a set of

00:10:18.655 --> 00:10:22.095
<v Speaker 1>chaos engineering principles for cloud native environment.

00:10:22.735 --> 00:10:23.455
<v Speaker 1>And

00:10:23.775 --> 00:10:25.935
<v Speaker 1>we built Litmus project

00:10:25.935 --> 00:10:28.095
<v Speaker 1>exactly around these principles.

00:10:28.175 --> 00:10:30.095
<v Speaker 1>Right? We started about

00:10:31.310 --> 00:10:34.590
<v Speaker 1>around thirty months ago starting to build the

00:10:34.590 --> 00:10:36.910
<v Speaker 1>first Litmus project or a little bit more

00:10:36.910 --> 00:10:39.310
<v Speaker 1>than that. And we started in open source.

00:10:39.310 --> 00:10:42.110
<v Speaker 1>We built a chaos hub, chaos operators,

00:10:42.350 --> 00:10:44.510
<v Speaker 1>and then now we built a cross cloud

00:10:44.715 --> 00:10:47.275
<v Speaker 1>control plane for chaos engineering

00:10:47.515 --> 00:10:51.275
<v Speaker 1>where you can run, chaos engineering on Kubernetes,

00:10:51.275 --> 00:10:53.755
<v Speaker 1>off Kubernetes in the same fashion. You can

00:10:53.755 --> 00:10:55.435
<v Speaker 1>scale them up using GitOps.

00:10:55.515 --> 00:10:56.955
<v Speaker 1>You can do the observability.

00:10:57.510 --> 00:10:59.670
<v Speaker 1>So we're almost there with the two dot

00:10:59.670 --> 00:11:02.790
<v Speaker 1>zero coming out, you know, soon. We're announcing

00:11:02.950 --> 00:11:05.190
<v Speaker 1>we just announced the beta is coming on

00:11:05.190 --> 00:11:06.550
<v Speaker 1>March 15.

00:11:06.710 --> 00:11:09.910
<v Speaker 1>So I'm looking forward to, having more feedback,

00:11:10.150 --> 00:11:11.190
<v Speaker 1>coming from the community.

00:11:12.565 --> 00:11:14.805
<v Speaker 1>So the status of the project itself,

00:11:15.605 --> 00:11:19.045
<v Speaker 1>it's pretty wide event. I would say even

00:11:19.045 --> 00:11:21.045
<v Speaker 1>the chaos native or we are known as

00:11:21.045 --> 00:11:23.365
<v Speaker 1>the team was under my data.

00:11:23.605 --> 00:11:26.324
<v Speaker 1>We are the prime sponsors or maintenance.

00:11:26.970 --> 00:11:29.770
<v Speaker 1>There are a lot of contributions coming in

00:11:29.770 --> 00:11:31.210
<v Speaker 1>from all over the places.

00:11:31.529 --> 00:11:33.690
<v Speaker 1>Right? You can see some of these guys,

00:11:33.690 --> 00:11:36.890
<v Speaker 1>the number in the brackets are a combination

00:11:36.890 --> 00:11:41.130
<v Speaker 1>of either PR submitted, review previews, and

00:11:41.345 --> 00:11:43.105
<v Speaker 1>a number of issues created and so on

00:11:43.105 --> 00:11:43.985
<v Speaker 1>and so forth.

00:11:44.225 --> 00:11:47.345
<v Speaker 1>But we are also happy to say that

00:11:47.345 --> 00:11:50.465
<v Speaker 1>we are now closer to 50,000 installations of

00:11:50.465 --> 00:11:52.385
<v Speaker 1>this, and we are pretty soon going to

00:11:52.385 --> 00:11:53.265
<v Speaker 1>go into

00:11:53.505 --> 00:11:55.825
<v Speaker 1>at least the application for incubation is already

00:11:55.825 --> 00:11:58.100
<v Speaker 1>out there. Hopefully, in the next few months,

00:11:58.340 --> 00:12:00.020
<v Speaker 1>we'll get to that state.

00:12:00.820 --> 00:12:03.300
<v Speaker 1>And a lot of traction from various,

00:12:03.780 --> 00:12:04.420
<v Speaker 1>companies

00:12:04.660 --> 00:12:06.260
<v Speaker 1>apart from Chaos Native.

00:12:06.420 --> 00:12:08.100
<v Speaker 1>You know, we would I would say more

00:12:08.100 --> 00:12:09.380
<v Speaker 1>than thousand,

00:12:09.780 --> 00:12:12.260
<v Speaker 1>users in various forms are there, but

00:12:13.195 --> 00:12:15.915
<v Speaker 1>these are some of the primary users that

00:12:15.915 --> 00:12:18.315
<v Speaker 1>we've been seeing, either contributing

00:12:18.395 --> 00:12:19.515
<v Speaker 1>or using

00:12:20.395 --> 00:12:22.075
<v Speaker 1>in some form.

00:12:22.395 --> 00:12:25.755
<v Speaker 1>Right? And, primarily, the use cases for Litmus

00:12:25.755 --> 00:12:26.955
<v Speaker 1>is pretty straightforward.

00:12:27.370 --> 00:12:29.770
<v Speaker 1>You can use them in CA pipelines

00:12:30.010 --> 00:12:32.090
<v Speaker 1>when you're testing your code. You can do

00:12:32.090 --> 00:12:33.130
<v Speaker 1>chaos testing.

00:12:33.530 --> 00:12:36.090
<v Speaker 1>And you can also use Litmus as a

00:12:36.090 --> 00:12:38.570
<v Speaker 1>trigger for your CD

00:12:39.210 --> 00:12:40.410
<v Speaker 1>that you

00:12:40.650 --> 00:12:41.690
<v Speaker 1>your code is good.

00:12:42.335 --> 00:12:45.295
<v Speaker 1>Now it can be deployed in production.

00:12:45.855 --> 00:12:47.215
<v Speaker 1>And later,

00:12:47.215 --> 00:12:49.135
<v Speaker 1>you can also

00:12:50.335 --> 00:12:52.975
<v Speaker 1>kick start chaos engineering once the deployment is

00:12:52.975 --> 00:12:55.775
<v Speaker 1>done. Right? And you can also use it

00:12:55.775 --> 00:12:57.680
<v Speaker 1>along with GitOps. And,

00:12:59.200 --> 00:13:01.920
<v Speaker 1>you know, in general, CSED is, one of

00:13:01.920 --> 00:13:03.360
<v Speaker 1>the, main reasons.

00:13:03.600 --> 00:13:04.640
<v Speaker 1>And then, obviously,

00:13:05.360 --> 00:13:07.600
<v Speaker 1>you use chaos engineering in production,

00:13:07.760 --> 00:13:10.400
<v Speaker 1>start with, staging, and then move on into

00:13:10.400 --> 00:13:14.625
<v Speaker 1>production, etcetera, etcetera. Right? So at the outset,

00:13:14.625 --> 00:13:16.545
<v Speaker 1>it's pretty simple. Litmus is,

00:13:16.865 --> 00:13:19.185
<v Speaker 1>one installation for the entire enterprise kind of

00:13:19.185 --> 00:13:20.785
<v Speaker 1>a thing. You have an helm chart. You

00:13:20.785 --> 00:13:23.105
<v Speaker 1>get Litmus portal. You bring in,

00:13:23.584 --> 00:13:25.840
<v Speaker 1>the experiments from the chaos hub. You can

00:13:25.840 --> 00:13:27.920
<v Speaker 1>also set up a private chaos hub to

00:13:27.920 --> 00:13:29.280
<v Speaker 1>manage the experiments,

00:13:29.280 --> 00:13:31.600
<v Speaker 1>maintain the experiments among your team members or

00:13:31.600 --> 00:13:33.920
<v Speaker 1>set of teams. It's like how you manage

00:13:33.920 --> 00:13:36.080
<v Speaker 1>any other infrastructure code

00:13:36.080 --> 00:13:38.685
<v Speaker 1>or the code itself. Right? So once you

00:13:38.685 --> 00:13:40.524
<v Speaker 1>set up, Litmus,

00:13:40.524 --> 00:13:42.444
<v Speaker 1>you get a Litmus portal, and then you

00:13:42.444 --> 00:13:45.884
<v Speaker 1>run chaos workloads on any Kubernetes cluster as

00:13:45.884 --> 00:13:48.685
<v Speaker 1>a target. Or now it is also possible

00:13:48.685 --> 00:13:51.805
<v Speaker 1>to set VMs or bare metal as a

00:13:51.805 --> 00:13:55.029
<v Speaker 1>target also. Right? And then you can, put

00:13:55.029 --> 00:13:58.310
<v Speaker 1>all this configuration into any other, CD tool,

00:13:58.310 --> 00:14:00.070
<v Speaker 1>like Argo CD, Plug CD,

00:14:00.470 --> 00:14:00.870
<v Speaker 1>or,

00:14:01.350 --> 00:14:03.029
<v Speaker 1>Spinnaker or Jenkins

00:14:03.190 --> 00:14:05.269
<v Speaker 1>x, and then, you know, move forward with

00:14:05.269 --> 00:14:09.075
<v Speaker 1>that. So in a nutshell, Litmus is one,

00:14:09.315 --> 00:14:11.555
<v Speaker 1>distributed chaos engineering tool,

00:14:12.115 --> 00:14:15.315
<v Speaker 1>where you can manage all your chaos engineering

00:14:15.315 --> 00:14:16.115
<v Speaker 1>needs

00:14:16.195 --> 00:14:17.875
<v Speaker 1>for all of your team members

00:14:18.129 --> 00:14:20.930
<v Speaker 1>and then run your chaos workflows or experiments

00:14:20.930 --> 00:14:22.290
<v Speaker 1>at various targets

00:14:22.370 --> 00:14:24.449
<v Speaker 1>and then have all the results,

00:14:24.850 --> 00:14:26.129
<v Speaker 1>pushed back into,

00:14:26.370 --> 00:14:27.250
<v Speaker 1>Prometheus,

00:14:27.250 --> 00:14:28.850
<v Speaker 1>and you have a single pane of

00:14:29.329 --> 00:14:30.370
<v Speaker 1>observability

00:14:30.370 --> 00:14:31.009
<v Speaker 1>for,

00:14:31.329 --> 00:14:34.495
<v Speaker 1>knowing what's going on. Right? So one of

00:14:34.495 --> 00:14:36.335
<v Speaker 1>the innovations that we did to achieve the

00:14:36.335 --> 00:14:38.335
<v Speaker 1>scale and, flexibility

00:14:38.335 --> 00:14:41.295
<v Speaker 1>is to integrate with our goal. Right? So

00:14:43.615 --> 00:14:46.175
<v Speaker 1>now at the at the lower levels, it

00:14:46.175 --> 00:14:48.335
<v Speaker 1>has its own operator chaos experiments.

00:14:48.710 --> 00:14:51.270
<v Speaker 1>But at the upper level, it is integrated

00:14:51.270 --> 00:14:53.030
<v Speaker 1>into other workflow.

00:14:53.030 --> 00:14:55.270
<v Speaker 1>It is not an Argo workflow by itself,

00:14:55.270 --> 00:14:58.710
<v Speaker 1>but Argo workflow plus some intelligence to consolidate,

00:14:59.030 --> 00:15:02.915
<v Speaker 1>the status of, the experiments and results. And

00:15:02.915 --> 00:15:04.915
<v Speaker 1>then this is how we actually do,

00:15:05.394 --> 00:15:08.115
<v Speaker 1>GitOps and chaos engineering together. Right?

00:15:08.435 --> 00:15:09.954
<v Speaker 1>So this is a little bit of a

00:15:09.954 --> 00:15:10.595
<v Speaker 1>details.

00:15:10.995 --> 00:15:13.235
<v Speaker 1>You will write a chaos workflow,

00:15:13.475 --> 00:15:16.194
<v Speaker 1>and then, you write, within that, you'll have

00:15:16.370 --> 00:15:18.449
<v Speaker 1>a chaos engine. The moment you write a

00:15:18.449 --> 00:15:21.170
<v Speaker 1>chaos engine, the operator picks it up, runs

00:15:21.170 --> 00:15:23.170
<v Speaker 1>the experiments, and then we push the result

00:15:23.170 --> 00:15:24.850
<v Speaker 1>and metrics back into,

00:15:26.130 --> 00:15:27.970
<v Speaker 1>Prometheus metrics or,

00:15:28.209 --> 00:15:30.449
<v Speaker 1>any other observability tool that we support.

00:15:31.035 --> 00:15:34.075
<v Speaker 1>And, we keep these experiments either in a

00:15:34.075 --> 00:15:34.714
<v Speaker 1>hub,

00:15:35.035 --> 00:15:37.435
<v Speaker 1>in public hub, or you can also pull

00:15:37.435 --> 00:15:38.955
<v Speaker 1>them into private hub.

00:15:39.435 --> 00:15:41.595
<v Speaker 1>It's nothing but a private gate repository where

00:15:41.595 --> 00:15:43.675
<v Speaker 1>you manage your experiments, and the workflows can

00:15:43.675 --> 00:15:45.514
<v Speaker 1>use a mix of experiments from both the

00:15:45.514 --> 00:15:48.279
<v Speaker 1>hubs or many other hubs as well. Right?

00:15:48.279 --> 00:15:50.360
<v Speaker 1>So we do have a lot of experiments

00:15:50.360 --> 00:15:51.560
<v Speaker 1>that are required.

00:15:51.959 --> 00:15:54.120
<v Speaker 1>I think we have about 40 plus experiments

00:15:54.120 --> 00:15:55.000
<v Speaker 1>today,

00:15:55.480 --> 00:15:58.519
<v Speaker 1>which are generally sufficient enough,

00:15:58.680 --> 00:16:00.519
<v Speaker 1>to do the basic chaos engineering,

00:16:01.495 --> 00:16:05.334
<v Speaker 1>advanced chaos engineering if needed. And, obviously, this

00:16:05.334 --> 00:16:07.175
<v Speaker 1>is an open source project that is going

00:16:07.175 --> 00:16:10.454
<v Speaker 1>to grow more and more. So, there's always

00:16:10.454 --> 00:16:13.095
<v Speaker 1>some new experiment that's coming. So we do

00:16:13.095 --> 00:16:16.615
<v Speaker 1>have, some fantastic experiments new experiments that are

00:16:16.020 --> 00:16:18.100
<v Speaker 1>going to come out in the next, three

00:16:18.100 --> 00:16:19.060
<v Speaker 1>to six months.

00:16:19.780 --> 00:16:23.780
<v Speaker 1>We also do, have a built in, observability

00:16:23.780 --> 00:16:24.900
<v Speaker 1>analytics,

00:16:25.060 --> 00:16:26.260
<v Speaker 1>within Litmus.

00:16:26.820 --> 00:16:30.180
<v Speaker 1>And, also, you can use the chaos annotations

00:16:30.180 --> 00:16:31.380
<v Speaker 1>and metrics

00:16:32.005 --> 00:16:34.404
<v Speaker 1>to put chaos indicators

00:16:34.644 --> 00:16:36.725
<v Speaker 1>in your regular drop on the charts as

00:16:36.725 --> 00:16:39.365
<v Speaker 1>well. So observability is an important piece for

00:16:39.365 --> 00:16:41.205
<v Speaker 1>us, and we continue to improve

00:16:41.524 --> 00:16:42.964
<v Speaker 1>that part of the area.

00:16:43.285 --> 00:16:45.125
<v Speaker 1>And when it comes to the integrations,

00:16:45.125 --> 00:16:47.524
<v Speaker 1>we are doing more and more with the

00:16:47.524 --> 00:16:48.700
<v Speaker 1>help from community.

00:16:48.940 --> 00:16:52.540
<v Speaker 1>Currently, we have integrations into GitLab, GitHub actions,

00:16:53.100 --> 00:16:56.700
<v Speaker 1>Spinnaker. Recently, we did fantastic integrations into another

00:16:56.700 --> 00:16:58.860
<v Speaker 1>sincere project, called Captain.

00:16:59.740 --> 00:17:03.095
<v Speaker 1>So, basically, what happens is you can introduce

00:17:03.095 --> 00:17:05.654
<v Speaker 1>chaos stages into those respective tools,

00:17:05.974 --> 00:17:07.335
<v Speaker 1>which uses

00:17:07.575 --> 00:17:09.494
<v Speaker 1>a CI library from Litmus,

00:17:09.655 --> 00:17:11.175
<v Speaker 1>which underneath

00:17:11.175 --> 00:17:14.214
<v Speaker 1>will invoke the regular CI Litmus experiments.

00:17:14.470 --> 00:17:16.550
<v Speaker 1>So it's pretty easy to integrate.

00:17:16.950 --> 00:17:19.910
<v Speaker 1>And we are also having architecture to introduce,

00:17:20.390 --> 00:17:23.910
<v Speaker 1>chaos onto non Kubernetes targets. In this case,

00:17:23.990 --> 00:17:26.069
<v Speaker 1>the experiments itself will run,

00:17:26.630 --> 00:17:27.990
<v Speaker 1>on Kubernetes,

00:17:28.150 --> 00:17:30.665
<v Speaker 1>as an agent, And then using the remote

00:17:30.665 --> 00:17:31.865
<v Speaker 1>network APIs,

00:17:32.345 --> 00:17:33.865
<v Speaker 1>of the respective target,

00:17:34.025 --> 00:17:36.345
<v Speaker 1>we'll be introducing chaos. So it's a little

00:17:36.345 --> 00:17:38.585
<v Speaker 1>bit early right now, but we do have

00:17:38.585 --> 00:17:39.225
<v Speaker 1>experiments,

00:17:39.465 --> 00:17:43.320
<v Speaker 1>for a few experiments for Amazon and Google,

00:17:43.320 --> 00:17:44.919
<v Speaker 1>but a lot more are coming.

00:17:45.320 --> 00:17:47.240
<v Speaker 1>And we see this area

00:17:47.240 --> 00:17:48.279
<v Speaker 1>is a great

00:17:49.880 --> 00:17:52.200
<v Speaker 1>area for collaborating with the with the community

00:17:52.200 --> 00:17:53.080
<v Speaker 1>at large.

00:17:53.480 --> 00:17:55.720
<v Speaker 1>So we're also having a lot of plans

00:17:55.720 --> 00:17:56.360
<v Speaker 1>to integrate

00:17:56.835 --> 00:17:58.914
<v Speaker 1>with the CNC of projects,

00:17:59.155 --> 00:18:02.595
<v Speaker 1>plus cross plane, OPA. We people keep coming.

00:18:02.595 --> 00:18:05.075
<v Speaker 1>Okay. We are using OPA for security and

00:18:05.075 --> 00:18:06.835
<v Speaker 1>policy control reasons.

00:18:06.914 --> 00:18:09.475
<v Speaker 1>Chaos engineering also should be integrated into it.

00:18:09.475 --> 00:18:10.835
<v Speaker 1>Why not? I think, you know, there is

00:18:10.835 --> 00:18:11.955
<v Speaker 1>some work that's coming up.

00:18:13.160 --> 00:18:15.720
<v Speaker 1>So before I leave it back to demo,

00:18:15.720 --> 00:18:18.200
<v Speaker 1>you know, Chaos Native, it's it's about,

00:18:18.680 --> 00:18:20.840
<v Speaker 1>you know, we continue to provide,

00:18:21.080 --> 00:18:21.720
<v Speaker 1>free

00:18:22.120 --> 00:18:22.759
<v Speaker 1>support,

00:18:23.240 --> 00:18:25.665
<v Speaker 1>ad code, you to the project, but we

00:18:25.665 --> 00:18:27.905
<v Speaker 1>are also starting to the purpose of Kiosk

00:18:27.905 --> 00:18:29.185
<v Speaker 1>need to also use to,

00:18:29.665 --> 00:18:31.505
<v Speaker 1>increase the adoption of Litmus,

00:18:31.745 --> 00:18:34.625
<v Speaker 1>in the enterprises where they expect, the enterprise

00:18:34.625 --> 00:18:35.265
<v Speaker 1>support

00:18:35.505 --> 00:18:38.340
<v Speaker 1>and many services. So we have started,

00:18:38.660 --> 00:18:39.700
<v Speaker 1>these services,

00:18:39.940 --> 00:18:41.620
<v Speaker 1>in some form already.

00:18:41.620 --> 00:18:44.740
<v Speaker 1>I took few users. Looking forward to, hearing

00:18:44.740 --> 00:18:46.980
<v Speaker 1>more on this from the users and,

00:18:47.780 --> 00:18:48.899
<v Speaker 1>and the community

00:18:49.620 --> 00:18:50.580
<v Speaker 1>and enterprises,

00:18:50.820 --> 00:18:51.220
<v Speaker 1>themselves.

00:18:51.784 --> 00:18:54.424
<v Speaker 1>With that, I would like to say thank

00:18:54.424 --> 00:18:57.145
<v Speaker 1>you very much for giving this opportunity. We'll

00:18:57.145 --> 00:18:59.625
<v Speaker 1>turn it back on on to,

00:19:00.664 --> 00:19:02.985
<v Speaker 1>the live session now. David, back to you.

00:19:05.260 --> 00:19:07.419
<v Speaker 0>Alright. Thank you very much. I

00:19:08.220 --> 00:19:10.539
<v Speaker 0>guess maybe we could just take a

00:19:10.940 --> 00:19:12.540
<v Speaker 0>before we jump straight into the hands on

00:19:12.540 --> 00:19:14.380
<v Speaker 0>section, why don't we kinda tackle a few

00:19:14.380 --> 00:19:16.779
<v Speaker 0>questions there? Like, I think you made it

00:19:16.860 --> 00:19:19.580
<v Speaker 0>very clear that, you know, in order to

00:19:19.580 --> 00:19:20.139
<v Speaker 0>do,

00:19:20.780 --> 00:19:22.595
<v Speaker 0>you you know, any sort of chaos within

00:19:22.595 --> 00:19:25.794
<v Speaker 0>a cluster is that monitoring and observability

00:19:25.794 --> 00:19:27.474
<v Speaker 0>are almost paramount.

00:19:27.875 --> 00:19:28.434
<v Speaker 0>What

00:19:29.315 --> 00:19:30.995
<v Speaker 0>would happen, you know, if I don't have

00:19:30.995 --> 00:19:33.235
<v Speaker 0>very good monitoring observability and I let let

00:19:33.235 --> 00:19:35.075
<v Speaker 0>miss loosen my cluster? I mean, is that

00:19:35.075 --> 00:19:36.355
<v Speaker 0>just gonna all go bad?

00:19:37.710 --> 00:19:38.350
<v Speaker 1>I

00:19:39.150 --> 00:19:42.590
<v Speaker 1>mean, like, basically, chaos itself is you're disrupting

00:19:42.590 --> 00:19:46.269
<v Speaker 1>something that's working. Right? So the idea is

00:19:46.750 --> 00:19:50.275
<v Speaker 1>you disrupt something which you expect might happen,

00:19:50.355 --> 00:19:52.275
<v Speaker 1>and then you see whether my service are

00:19:52.275 --> 00:19:53.554
<v Speaker 1>up or light. Right?

00:19:53.795 --> 00:19:56.435
<v Speaker 1>So what happens to your cluster really depends

00:19:56.435 --> 00:19:58.275
<v Speaker 1>on what is the chaos that you are

00:19:58.275 --> 00:19:59.235
<v Speaker 1>introducing.

00:19:59.475 --> 00:20:00.115
<v Speaker 1>And,

00:20:00.355 --> 00:20:01.955
<v Speaker 1>yeah, you know, you could

00:20:03.040 --> 00:20:04.480
<v Speaker 1>use a node

00:20:05.120 --> 00:20:06.320
<v Speaker 1>kill experiment

00:20:06.320 --> 00:20:08.720
<v Speaker 1>and then kill all the nodes, then, yeah,

00:20:08.720 --> 00:20:11.280
<v Speaker 1>you can bring it down. Right? That's very

00:20:11.280 --> 00:20:13.680
<v Speaker 1>much possible. But the idea of observability

00:20:13.680 --> 00:20:16.400
<v Speaker 1>is somebody knows that they are doing it.

00:20:16.654 --> 00:20:18.575
<v Speaker 1>Right? That they're doing chaos.

00:20:18.815 --> 00:20:19.455
<v Speaker 1>So

00:20:19.774 --> 00:20:22.735
<v Speaker 1>the blast radius could be huge or could

00:20:22.735 --> 00:20:23.455
<v Speaker 1>be low,

00:20:23.695 --> 00:20:24.734
<v Speaker 1>but sometimes

00:20:24.735 --> 00:20:25.534
<v Speaker 1>you

00:20:25.615 --> 00:20:28.414
<v Speaker 1>have to have an eye on

00:20:29.370 --> 00:20:30.409
<v Speaker 1>what's happening

00:20:30.570 --> 00:20:34.170
<v Speaker 1>with chaos as a perspective in it. Right?

00:20:34.170 --> 00:20:34.970
<v Speaker 1>For example,

00:20:36.010 --> 00:20:37.450
<v Speaker 1>I have my Graphana

00:20:37.450 --> 00:20:40.570
<v Speaker 1>chart or any other chart showing

00:20:40.730 --> 00:20:43.610
<v Speaker 1>the CPU usage of all my services on

00:20:43.610 --> 00:20:44.170
<v Speaker 1>my cluster.

00:20:44.725 --> 00:20:45.684
<v Speaker 1>And now

00:20:45.845 --> 00:20:47.924
<v Speaker 1>for a certain amount of time,

00:20:48.804 --> 00:20:50.244
<v Speaker 1>couple of hours ago,

00:20:50.485 --> 00:20:52.324
<v Speaker 1>there was disruptions everywhere.

00:20:52.804 --> 00:20:55.605
<v Speaker 1>And was it the time that chaos was

00:20:55.605 --> 00:20:57.605
<v Speaker 1>introduced, and what was the chaos that was

00:20:57.605 --> 00:20:59.845
<v Speaker 1>introduced, in which namespace it was introduced?

00:21:00.420 --> 00:21:02.900
<v Speaker 1>That perspective, when you have it within your

00:21:02.900 --> 00:21:03.700
<v Speaker 1>observability

00:21:03.700 --> 00:21:06.580
<v Speaker 1>tool, it makes hundred times easier for whoever

00:21:06.580 --> 00:21:09.220
<v Speaker 1>it is looking at to debug. Otherwise, you

00:21:09.220 --> 00:21:10.740
<v Speaker 1>know, you are just throwing

00:21:10.980 --> 00:21:11.540
<v Speaker 1>more,

00:21:11.940 --> 00:21:13.220
<v Speaker 1>disturbance into the system,

00:21:13.795 --> 00:21:15.555
<v Speaker 1>And you know that something is wrong, we

00:21:15.555 --> 00:21:17.875
<v Speaker 1>are debugging. The purpose of chaos engineering itself

00:21:17.875 --> 00:21:20.115
<v Speaker 1>is to find what's wrong with the service.

00:21:20.115 --> 00:21:22.675
<v Speaker 1>You debug and you fix it. So observability

00:21:22.675 --> 00:21:25.155
<v Speaker 1>is is pretty important in that. At this

00:21:25.155 --> 00:21:26.995
<v Speaker 1>marking that this is the chaos

00:21:27.540 --> 00:21:30.100
<v Speaker 1>that I introduced during this period, having that

00:21:30.100 --> 00:21:32.820
<v Speaker 1>available for the users is is very important.

00:21:33.940 --> 00:21:35.860
<v Speaker 0>Yeah. Definitely. I think that makes a lot

00:21:35.860 --> 00:21:37.140
<v Speaker 0>of a lot of sense.

00:21:37.300 --> 00:21:39.140
<v Speaker 0>I think, you know, I like to think

00:21:39.140 --> 00:21:40.900
<v Speaker 0>of this as, like, you know, we write

00:21:40.980 --> 00:21:41.460
<v Speaker 0>code

00:21:41.785 --> 00:21:43.705
<v Speaker 0>based on assumptions that we think this is

00:21:43.705 --> 00:21:45.465
<v Speaker 0>what the code is doing. And then we

00:21:45.465 --> 00:21:47.705
<v Speaker 0>correct that or we test that with tests.

00:21:48.105 --> 00:21:49.465
<v Speaker 0>And I feel like this is a good

00:21:49.465 --> 00:21:51.945
<v Speaker 0>application of that to our production infrastructure or

00:21:51.945 --> 00:21:54.105
<v Speaker 0>I guess any of our environments and that,

00:21:54.409 --> 00:21:56.249
<v Speaker 0>you know, we run these

00:21:56.409 --> 00:21:57.210
<v Speaker 0>applications

00:21:57.210 --> 00:22:00.169
<v Speaker 0>that are horizontally scalable and fault tolerant.

00:22:01.450 --> 00:22:02.649
<v Speaker 0>At least that's what it says on the

00:22:02.649 --> 00:22:04.409
<v Speaker 0>box. But how often do we actually ever

00:22:04.409 --> 00:22:06.490
<v Speaker 0>test that? How do we know that if

00:22:06.490 --> 00:22:08.010
<v Speaker 0>I lose a node or if I lose

00:22:08.010 --> 00:22:10.745
<v Speaker 0>a Kafka consumer that that is gonna be

00:22:10.745 --> 00:22:12.904
<v Speaker 0>moved over to another machine or picked up

00:22:12.904 --> 00:22:16.025
<v Speaker 0>by another horizontally scalable pod. And Litmus is

00:22:16.025 --> 00:22:18.345
<v Speaker 0>the way for us to take those assumptions

00:22:18.345 --> 00:22:20.904
<v Speaker 0>and actually make them assertions that actually confirm

00:22:20.904 --> 00:22:22.745
<v Speaker 0>that the behavior works the way that we

00:22:22.745 --> 00:22:24.184
<v Speaker 0>want. And I think that

00:22:24.590 --> 00:22:26.110
<v Speaker 0>is is really powerful.

00:22:27.390 --> 00:22:28.510
<v Speaker 0>Is this something

00:22:29.070 --> 00:22:31.150
<v Speaker 0>you know, based on the experience of you

00:22:31.150 --> 00:22:33.310
<v Speaker 0>using this yourself in OpenEPS and and the

00:22:33.310 --> 00:22:35.549
<v Speaker 0>customers that you're speaking or spoken to,

00:22:36.110 --> 00:22:38.030
<v Speaker 0>do people run this in production, or do

00:22:38.030 --> 00:22:39.710
<v Speaker 0>they run it in preproduction environments?

00:22:41.804 --> 00:22:42.925
<v Speaker 1>Our experience

00:22:43.165 --> 00:22:44.605
<v Speaker 1>I mean, nobody starts,

00:22:44.925 --> 00:22:47.405
<v Speaker 1>not just Litmus or any other chaos engineering

00:22:47.405 --> 00:22:48.845
<v Speaker 1>directly in production.

00:22:50.205 --> 00:22:52.765
<v Speaker 1>One of the challenges always for the SREs

00:22:52.765 --> 00:22:54.764
<v Speaker 1>that, we keep hearing is,

00:22:55.399 --> 00:22:58.039
<v Speaker 1>you know, I finally determined that chaos engineering

00:22:58.039 --> 00:23:00.600
<v Speaker 1>is going to help me make my systems

00:23:00.600 --> 00:23:01.399
<v Speaker 1>better,

00:23:01.720 --> 00:23:02.599
<v Speaker 1>but my

00:23:03.000 --> 00:23:07.159
<v Speaker 1>management is not yet approved. Right? So how

00:23:07.159 --> 00:23:09.240
<v Speaker 1>they do typically is

00:23:09.945 --> 00:23:12.424
<v Speaker 1>they don't even go into preproduction. They go

00:23:12.424 --> 00:23:15.624
<v Speaker 1>into a little bit of a staged environment

00:23:15.945 --> 00:23:17.065
<v Speaker 1>and always

00:23:17.705 --> 00:23:19.384
<v Speaker 1>I mean, nowadays, the

00:23:20.105 --> 00:23:21.705
<v Speaker 1>the upgrade environments

00:23:22.105 --> 00:23:23.304
<v Speaker 1>are pretty

00:23:23.945 --> 00:23:24.585
<v Speaker 1>robust,

00:23:25.510 --> 00:23:28.470
<v Speaker 1>and people invest in a chain of the

00:23:28.470 --> 00:23:30.710
<v Speaker 1>stages. You go with the development

00:23:30.870 --> 00:23:33.029
<v Speaker 1>and then staging, preproduction,

00:23:34.550 --> 00:23:36.470
<v Speaker 1>and then production. These are at least the

00:23:36.470 --> 00:23:39.110
<v Speaker 1>four stages that we know of, and some

00:23:39.110 --> 00:23:40.855
<v Speaker 1>people may have even

00:23:41.174 --> 00:23:43.335
<v Speaker 1>more stages than that. Right? So

00:23:43.895 --> 00:23:46.775
<v Speaker 1>it is okay to start with the development

00:23:46.775 --> 00:23:47.735
<v Speaker 1>itself.

00:23:47.735 --> 00:23:48.695
<v Speaker 1>Right? So

00:23:49.015 --> 00:23:51.655
<v Speaker 1>chaos engineering should be thought of as a

00:23:51.655 --> 00:23:53.815
<v Speaker 1>next step to the development if possible. Right?

00:23:53.815 --> 00:23:54.695
<v Speaker 1>So that's how

00:23:55.270 --> 00:23:58.230
<v Speaker 1>at least our project makes it totally declarative

00:23:58.470 --> 00:24:02.309
<v Speaker 1>where however you write a code to deploy

00:24:02.870 --> 00:24:04.470
<v Speaker 1>a Kubernetes resource,

00:24:04.790 --> 00:24:07.430
<v Speaker 1>you write one more declarative interface

00:24:07.430 --> 00:24:10.405
<v Speaker 1>to do some testing around it. Right? So

00:24:10.405 --> 00:24:12.405
<v Speaker 1>it's very easy, and it comes as an

00:24:12.405 --> 00:24:14.725
<v Speaker 1>extension to your development process. So you can

00:24:14.725 --> 00:24:15.605
<v Speaker 1>start with

00:24:16.165 --> 00:24:16.725
<v Speaker 1>that

00:24:17.045 --> 00:24:19.845
<v Speaker 1>and then into CI pipelines. Right? You introduce

00:24:19.845 --> 00:24:21.044
<v Speaker 1>a chaos stage,

00:24:21.285 --> 00:24:23.765
<v Speaker 1>and then you start with very small tests.

00:24:24.800 --> 00:24:27.600
<v Speaker 1>You have nothing to lose if your CI

00:24:27.600 --> 00:24:30.160
<v Speaker 1>pipeline breaks totally. In fact, it's a good

00:24:30.160 --> 00:24:31.840
<v Speaker 1>thing that you're breaking right now.

00:24:32.320 --> 00:24:34.560
<v Speaker 1>And then we go into the staging and

00:24:34.560 --> 00:24:36.960
<v Speaker 1>then run it for a few months. You

00:24:36.960 --> 00:24:39.075
<v Speaker 1>see value in it. You get a chance

00:24:39.075 --> 00:24:41.475
<v Speaker 1>to convince both your developers,

00:24:41.554 --> 00:24:43.794
<v Speaker 1>your own teammates, and your management,

00:24:43.875 --> 00:24:45.795
<v Speaker 1>and then run a game day on your

00:24:45.795 --> 00:24:46.595
<v Speaker 1>staging

00:24:46.675 --> 00:24:49.554
<v Speaker 1>and then go into production. Right? So that's

00:24:49.554 --> 00:24:51.730
<v Speaker 1>typically how it's done, and

00:24:52.370 --> 00:24:55.330
<v Speaker 1>we have seen significant results being produced in

00:24:55.330 --> 00:24:56.129
<v Speaker 1>that fashion.

00:24:56.770 --> 00:24:59.410
<v Speaker 0>Alright. Thank you very much. We have a

00:24:59.410 --> 00:25:01.570
<v Speaker 0>couple of questions from the audience, so let

00:25:01.570 --> 00:25:02.770
<v Speaker 0>me pop the first one up there.

00:25:03.385 --> 00:25:05.304
<v Speaker 0>And, Mozz, welcome back. Nice to see you

00:25:05.304 --> 00:25:08.345
<v Speaker 0>again. Has asked how big of a hardware

00:25:08.345 --> 00:25:10.745
<v Speaker 0>network and resources that Litmus requires to be

00:25:10.745 --> 00:25:12.264
<v Speaker 0>running inside of our cluster?

00:25:14.184 --> 00:25:15.705
<v Speaker 1>Right. The new

00:25:16.309 --> 00:25:17.190
<v Speaker 1>Litmus,

00:25:17.190 --> 00:25:19.510
<v Speaker 1>we are talking about two dot zero. Right?

00:25:19.510 --> 00:25:21.749
<v Speaker 1>The Litmus so far, one dot x,

00:25:22.230 --> 00:25:24.790
<v Speaker 1>till a couple of months ago is you

00:25:24.790 --> 00:25:27.990
<v Speaker 1>need to install Litmus on every Kubernetes cluster

00:25:27.990 --> 00:25:30.685
<v Speaker 1>wherever you're going to run. Right? Now we

00:25:30.685 --> 00:25:33.725
<v Speaker 1>are trying to make Litmus into more of

00:25:33.725 --> 00:25:35.885
<v Speaker 1>an infrastructure tool set

00:25:36.205 --> 00:25:38.285
<v Speaker 1>for your entire Kubernetes,

00:25:38.605 --> 00:25:40.925
<v Speaker 1>ecosystem, not just one cluster,

00:25:41.325 --> 00:25:43.805
<v Speaker 1>but for a set of team members. Right?

00:25:44.520 --> 00:25:45.080
<v Speaker 1>So,

00:25:45.640 --> 00:25:48.679
<v Speaker 1>for that, you need to install Litmus application.

00:25:48.840 --> 00:25:51.080
<v Speaker 1>And to begin with, it is, you know,

00:25:51.880 --> 00:25:54.760
<v Speaker 1>the amount of resources are of a mega

00:25:54.760 --> 00:25:57.800
<v Speaker 1>of, memory and, of a CPU is good

00:25:57.800 --> 00:26:00.605
<v Speaker 1>enough. But it is a Kubernetes application.

00:26:00.605 --> 00:26:01.965
<v Speaker 1>It is highly scalable.

00:26:02.365 --> 00:26:03.165
<v Speaker 1>And the more,

00:26:03.485 --> 00:26:05.245
<v Speaker 1>experiments that you run,

00:26:05.645 --> 00:26:07.965
<v Speaker 1>it just can take up, more resources as

00:26:07.965 --> 00:26:09.965
<v Speaker 1>you need. But we try to keep it,

00:26:10.125 --> 00:26:11.165
<v Speaker 1>as thin as possible,

00:26:12.490 --> 00:26:15.049
<v Speaker 1>And it's about op mega of RAM and

00:26:15.049 --> 00:26:17.129
<v Speaker 1>the op of CPU should be good enough.

00:26:17.130 --> 00:26:18.970
<v Speaker 1>Kartik, you want to add something more to

00:26:18.970 --> 00:26:20.730
<v Speaker 1>that, please? Go ahead.

00:26:21.850 --> 00:26:24.169
<v Speaker 2>Yep. I think you have answered it. Having

00:26:24.809 --> 00:26:27.850
<v Speaker 2>said that, the chaos

00:26:26.995 --> 00:26:28.195
<v Speaker 2>control plane

00:26:28.515 --> 00:26:31.155
<v Speaker 2>and the chaos parts that are launched from

00:26:31.155 --> 00:26:32.195
<v Speaker 2>the experiments

00:26:32.835 --> 00:26:35.155
<v Speaker 2>can have the resources defined for them in

00:26:35.155 --> 00:26:37.235
<v Speaker 2>a declarative way. So we'll talk about that

00:26:37.235 --> 00:26:40.034
<v Speaker 2>when we see the chaos engine custom resource.

00:26:40.115 --> 00:26:42.519
<v Speaker 2>So you can define the requirements,

00:26:42.600 --> 00:26:44.919
<v Speaker 2>the limits that you want there in case

00:26:44.919 --> 00:26:46.519
<v Speaker 2>you are running a lot of experiments in

00:26:46.519 --> 00:26:49.159
<v Speaker 2>parallel, etcetera. You you could control that.

00:26:49.559 --> 00:26:52.279
<v Speaker 2>The minimum requirements, as Omar said, are low,

00:26:53.845 --> 00:26:55.364
<v Speaker 2>But they may

00:26:56.164 --> 00:26:57.524
<v Speaker 2>add up to more when you're running a

00:26:57.524 --> 00:26:59.205
<v Speaker 2>lot of experiments in parallel, but you can

00:26:59.205 --> 00:27:00.084
<v Speaker 2>control them.

00:27:01.284 --> 00:27:03.684
<v Speaker 0>Yeah. So it's it's pretty lightweight. But if

00:27:03.684 --> 00:27:06.245
<v Speaker 0>you go if you wanna cause absolute carnage

00:27:06.245 --> 00:27:08.245
<v Speaker 0>in your cluster, of course, the resource consumption

00:27:08.310 --> 00:27:10.150
<v Speaker 0>is gonna grow within a number of experiments

00:27:10.150 --> 00:27:11.590
<v Speaker 0>that you wanna deploy. So, I think that

00:27:11.590 --> 00:27:12.710
<v Speaker 0>makes a lot of sense.

00:27:13.270 --> 00:27:15.110
<v Speaker 0>And I guess the answer was there is,

00:27:15.110 --> 00:27:16.870
<v Speaker 0>whatever you wanna throw at it.

00:27:17.270 --> 00:27:20.150
<v Speaker 0>Okay. We got another question from Vishal.

00:27:20.470 --> 00:27:23.265
<v Speaker 0>Does Litmus allow us to schedule chaos? I

00:27:23.265 --> 00:27:25.185
<v Speaker 0>mean, like, if I want to I'm assuming

00:27:25.345 --> 00:27:26.945
<v Speaker 0>and I'll I'll throw some extra words in

00:27:26.945 --> 00:27:28.705
<v Speaker 0>there. Is that if I want to see

00:27:28.705 --> 00:27:31.265
<v Speaker 0>next week at 3AM, I wanna run some

00:27:31.265 --> 00:27:31.985
<v Speaker 0>sort of

00:27:32.465 --> 00:27:34.785
<v Speaker 0>availability zone failure scenario. Is that something that

00:27:34.785 --> 00:27:35.985
<v Speaker 0>is possible with Litmus?

00:27:36.750 --> 00:27:37.390
<v Speaker 1>Yep.

00:27:37.790 --> 00:27:41.230
<v Speaker 1>Yeah. Scheduling is one of the core features

00:27:41.230 --> 00:27:41.870
<v Speaker 1>of

00:27:42.190 --> 00:27:43.149
<v Speaker 1>the project.

00:27:43.870 --> 00:27:47.630
<v Speaker 1>We allow it in various forms,

00:27:48.030 --> 00:27:49.630
<v Speaker 1>and you can run it instantly. You can

00:27:49.630 --> 00:27:51.790
<v Speaker 1>schedule it, and you can

00:27:52.245 --> 00:27:55.285
<v Speaker 1>rerun a previous one, many forms of it,

00:27:55.285 --> 00:27:56.644
<v Speaker 1>right, every hour,

00:27:57.125 --> 00:27:59.605
<v Speaker 1>every day, every week, and you can do

00:27:59.605 --> 00:28:01.205
<v Speaker 1>multiple combinations of that.

00:28:01.845 --> 00:28:05.000
<v Speaker 0>Nice. Well, I think that's plenty of of

00:28:05.000 --> 00:28:07.639
<v Speaker 0>chitchat as hopefully people interest has peaked. I

00:28:07.639 --> 00:28:09.240
<v Speaker 0>think we've said a lot of really interesting

00:28:09.240 --> 00:28:11.799
<v Speaker 0>stuff. I'm really I I really wanna see

00:28:11.799 --> 00:28:13.960
<v Speaker 0>this in action. So I believe are

00:28:13.960 --> 00:28:16.119
<v Speaker 0>gonna walk us through and guide us through

00:28:16.919 --> 00:28:19.080
<v Speaker 0>the installation and then some more advanced demos

00:28:19.080 --> 00:28:20.615
<v Speaker 0>as well on top of So I'm very

00:28:20.615 --> 00:28:22.614
<v Speaker 0>excited, and I will hand over to you.

00:28:26.215 --> 00:28:27.974
<v Speaker 0>You're on mute, I'm afraid.

00:28:29.495 --> 00:28:32.374
<v Speaker 2>Sorry about that. Let me share my screen.

00:28:32.375 --> 00:28:33.414
<v Speaker 0>Awesome. Thank you.

00:28:36.890 --> 00:28:39.850
<v Speaker 2>I hope my screen is visible.

00:28:40.330 --> 00:28:42.970
<v Speaker 0>It is. You are live. Please take it

00:28:42.970 --> 00:28:43.450
<v Speaker 0>away.

00:28:44.330 --> 00:28:45.130
<v Speaker 2>Alright.

00:28:45.610 --> 00:28:47.930
<v Speaker 2>So this is the agenda we have for

00:28:47.930 --> 00:28:48.490
<v Speaker 2>today.

00:28:49.335 --> 00:28:50.934
<v Speaker 2>We'll do a quick run through of the

00:28:50.934 --> 00:28:52.134
<v Speaker 2>Litmus installation.

00:28:53.174 --> 00:28:55.654
<v Speaker 2>What you'll see on the documentation today

00:28:55.815 --> 00:28:58.294
<v Speaker 2>involves installation of the Litmus operator,

00:28:58.294 --> 00:29:01.014
<v Speaker 2>pulling the experiments from the chaos hub,

00:29:01.255 --> 00:29:03.095
<v Speaker 2>and then running the actual chaos.

00:29:04.290 --> 00:29:05.970
<v Speaker 2>What we'll do today is

00:29:06.690 --> 00:29:09.650
<v Speaker 2>install the Litmus version that is upcoming.

00:29:10.130 --> 00:29:13.010
<v Speaker 2>We have it already in beta. So we

00:29:13.010 --> 00:29:15.170
<v Speaker 2>have a component called the portal,

00:29:15.410 --> 00:29:17.170
<v Speaker 2>which is essentially a web UI which will

00:29:17.170 --> 00:29:19.495
<v Speaker 2>help you orchestrate chaos. So we'll do a

00:29:19.495 --> 00:29:21.174
<v Speaker 2>quick installation on Litmus.

00:29:22.054 --> 00:29:23.735
<v Speaker 2>After that, we have,

00:29:24.135 --> 00:29:27.335
<v Speaker 2>a real world chaos scenario. We've taken,

00:29:27.495 --> 00:29:28.375
<v Speaker 2>Kafka

00:29:28.375 --> 00:29:29.335
<v Speaker 2>workload,

00:29:29.335 --> 00:29:31.015
<v Speaker 2>a stateful set Kafka cluster,

00:29:31.510 --> 00:29:33.830
<v Speaker 2>upon which we will run some test load

00:29:33.830 --> 00:29:35.429
<v Speaker 2>and kill one of the brokers,

00:29:35.830 --> 00:29:38.230
<v Speaker 2>and we'll see what happens. And, we'll see

00:29:38.230 --> 00:29:39.510
<v Speaker 2>how you can hypothesize

00:29:39.510 --> 00:29:40.070
<v Speaker 2>about

00:29:40.470 --> 00:29:42.870
<v Speaker 2>the behavior of Kafka when you inject this

00:29:42.870 --> 00:29:45.865
<v Speaker 2>chaos, how you can place that hypothesis in

00:29:45.865 --> 00:29:49.385
<v Speaker 2>a declarative way in, like, Kubernetes custom resource,

00:29:49.865 --> 00:29:51.545
<v Speaker 2>called the Litmus Chaos Engine.

00:29:52.105 --> 00:29:54.585
<v Speaker 2>And after that, if we have some time,

00:29:54.585 --> 00:29:56.905
<v Speaker 2>we'll do chaos on AWS,

00:29:57.145 --> 00:29:59.550
<v Speaker 2>cloud. We'll do a kill of an easy

00:29:59.550 --> 00:30:02.030
<v Speaker 2>two instance and verify the health of the

00:30:02.030 --> 00:30:03.950
<v Speaker 2>application that is going to be impacted by

00:30:03.950 --> 00:30:06.110
<v Speaker 2>it. So this is how we this is

00:30:06.110 --> 00:30:08.750
<v Speaker 2>what we have for the agenda and the

00:30:08.750 --> 00:30:09.390
<v Speaker 2>more objectives.

00:30:10.165 --> 00:30:12.325
<v Speaker 2>I'll very quickly go ahead and show you

00:30:12.325 --> 00:30:15.044
<v Speaker 2>the procedure to install Litmus.

00:30:15.045 --> 00:30:18.005
<v Speaker 2>So we have the Litmus chaos slash Litmus.

00:30:18.005 --> 00:30:20.005
<v Speaker 2>This is the repository,

00:30:20.005 --> 00:30:21.845
<v Speaker 2>and I am inside a folder called as

00:30:21.845 --> 00:30:22.805
<v Speaker 2>Litmus portal.

00:30:24.710 --> 00:30:27.510
<v Speaker 2>You could install it via Kubernetes manifest like

00:30:27.510 --> 00:30:28.070
<v Speaker 2>this,

00:30:28.390 --> 00:30:29.270
<v Speaker 2>a standard

00:30:29.750 --> 00:30:30.950
<v Speaker 2>YAML file,

00:30:31.350 --> 00:30:32.790
<v Speaker 2>or you can also do it via Helm

00:30:32.790 --> 00:30:34.630
<v Speaker 2>chart. We have a help repository

00:30:34.630 --> 00:30:37.805
<v Speaker 2>at Litmus chaos slash Litmus help. So you

00:30:37.805 --> 00:30:40.284
<v Speaker 2>can pick your, bundles from there.

00:30:40.605 --> 00:30:43.164
<v Speaker 2>For now, I'm just going to use my

00:30:43.405 --> 00:30:44.365
<v Speaker 2>manifest.

00:30:45.005 --> 00:30:47.004
<v Speaker 2>I've got two clusters with me,

00:30:47.405 --> 00:30:50.205
<v Speaker 2>cluster one and cluster two, both around GKE.

00:30:50.730 --> 00:30:53.370
<v Speaker 2>I'm going to install the Litmus portal on

00:30:53.370 --> 00:30:54.409
<v Speaker 2>cluster two.

00:30:54.730 --> 00:30:57.129
<v Speaker 2>And while that is going to come up,

00:30:57.450 --> 00:30:59.929
<v Speaker 2>we'll move to do the app chaos demo

00:30:59.929 --> 00:31:02.090
<v Speaker 2>on cluster one in which I have already

00:31:02.090 --> 00:31:04.490
<v Speaker 2>installed the Litmus Litmus components.

00:31:05.455 --> 00:31:07.055
<v Speaker 2>And before we get on to doing the

00:31:07.055 --> 00:31:09.615
<v Speaker 2>app chaos, I'll also show you another slide

00:31:09.615 --> 00:31:11.695
<v Speaker 2>which talks about the demo setup and the

00:31:11.695 --> 00:31:13.375
<v Speaker 2>use case and the hypothesis,

00:31:13.535 --> 00:31:15.615
<v Speaker 2>all that. For now, let's just

00:31:16.095 --> 00:31:18.015
<v Speaker 2>install Litmus. I have

00:31:19.990 --> 00:31:21.590
<v Speaker 2>a VM instance here,

00:31:21.830 --> 00:31:23.350
<v Speaker 2>which I can use

00:31:23.590 --> 00:31:24.629
<v Speaker 2>to install

00:31:24.950 --> 00:31:26.950
<v Speaker 2>resources on my Kubernetes

00:31:26.950 --> 00:31:27.909
<v Speaker 2>cluster.

00:31:28.630 --> 00:31:31.110
<v Speaker 2>So it creates Litmus namespace.

00:31:31.110 --> 00:31:32.950
<v Speaker 2>As you can see, I have executed a

00:31:32.950 --> 00:31:36.085
<v Speaker 2>command before where there is no Litmus namespace.

00:31:36.565 --> 00:31:39.205
<v Speaker 2>We create a Litmus namespace. We create some

00:31:39.205 --> 00:31:40.085
<v Speaker 2>dependencies

00:31:40.085 --> 00:31:42.245
<v Speaker 2>like the config maps

00:31:42.405 --> 00:31:44.005
<v Speaker 2>and persistent volumes,

00:31:44.405 --> 00:31:46.005
<v Speaker 2>and then we actually deploy

00:31:46.005 --> 00:31:48.404
<v Speaker 2>the Litmus microservices.

00:31:48.565 --> 00:31:51.300
<v Speaker 2>So Litmus has a control plane that consists

00:31:51.300 --> 00:31:52.660
<v Speaker 2>of the

00:31:52.820 --> 00:31:54.340
<v Speaker 2>a GraphQL server.

00:31:54.580 --> 00:31:56.740
<v Speaker 2>It has a MongoDB to store the state

00:31:56.740 --> 00:31:57.700
<v Speaker 2>of chaos,

00:31:58.100 --> 00:31:59.380
<v Speaker 2>and it also has

00:31:59.940 --> 00:32:02.820
<v Speaker 2>a few other RBAC related resources that get

00:32:02.820 --> 00:32:03.300
<v Speaker 2>installed

00:32:03.664 --> 00:32:05.104
<v Speaker 2>when you do the installation.

00:32:07.184 --> 00:32:08.065
<v Speaker 2>Oops.

00:32:11.265 --> 00:32:12.065
<v Speaker 2>Alright.

00:32:12.625 --> 00:32:14.544
<v Speaker 2>Now you can see I have the three

00:32:14.544 --> 00:32:16.544
<v Speaker 2>part running with the front end, which is

00:32:16.544 --> 00:32:19.040
<v Speaker 2>actually the UI, this GraphQL server, and then

00:32:19.040 --> 00:32:19.919
<v Speaker 2>this MongoDB.

00:32:20.240 --> 00:32:22.559
<v Speaker 2>I'm going to try and access this,

00:32:23.360 --> 00:32:24.640
<v Speaker 2>right, and

00:32:24.800 --> 00:32:26.799
<v Speaker 2>bring up the UI on my

00:32:27.040 --> 00:32:28.000
<v Speaker 2>browser.

00:32:28.560 --> 00:32:30.640
<v Speaker 2>As we do this, if there are any

00:32:30.640 --> 00:32:33.120
<v Speaker 2>questions, David, please feel free to interrupt me.

00:32:34.105 --> 00:32:36.184
<v Speaker 2>I can take those questions as we go

00:32:36.184 --> 00:32:38.585
<v Speaker 2>along. Yeah. Definitely. Using NodePort,

00:32:38.585 --> 00:32:40.985
<v Speaker 2>as you can see by default here, let

00:32:40.985 --> 00:32:41.945
<v Speaker 2>me find out

00:32:42.825 --> 00:32:43.465
<v Speaker 2>the

00:32:43.865 --> 00:32:46.985
<v Speaker 2>external IPs of one of my nodes,

00:32:47.860 --> 00:32:50.419
<v Speaker 2>and I'll use that to bring up the

00:32:50.659 --> 00:32:51.700
<v Speaker 2>portal.

00:32:52.980 --> 00:32:55.940
<v Speaker 2>So this is the IP, and I've got

00:32:55.940 --> 00:32:57.539
<v Speaker 2>32527.

00:32:58.020 --> 00:33:00.499
<v Speaker 2>I've already exposed these ports

00:33:01.140 --> 00:33:02.179
<v Speaker 2>on my firewall.

00:33:04.515 --> 00:33:05.955
<v Speaker 2>I hope that's right.

00:33:07.875 --> 00:33:08.594
<v Speaker 2>Okay.

00:33:09.875 --> 00:33:11.955
<v Speaker 2>Yeah. You can see the portal is now

00:33:11.955 --> 00:33:13.154
<v Speaker 2>opening up.

00:33:14.595 --> 00:33:18.060
<v Speaker 2>By default, it takes admin and admin as

00:33:18.060 --> 00:33:20.059
<v Speaker 2>the username and password.

00:33:21.180 --> 00:33:22.539
<v Speaker 2>I think so.

00:33:23.820 --> 00:33:25.900
<v Speaker 2>Okay. What's wrong? It is admin and Litmus.

00:33:30.414 --> 00:33:32.255
<v Speaker 2>So once I get into the portal,

00:33:32.495 --> 00:33:34.335
<v Speaker 2>I have the option to set up my

00:33:34.335 --> 00:33:37.054
<v Speaker 2>project. So the Litmus portal allows you to,

00:33:38.255 --> 00:33:41.054
<v Speaker 2>create your own project. Is each user is

00:33:41.054 --> 00:33:43.215
<v Speaker 2>allowed to create his own project,

00:33:43.549 --> 00:33:45.789
<v Speaker 2>his or her own project into which they

00:33:45.789 --> 00:33:47.710
<v Speaker 2>can invite other team members,

00:33:48.909 --> 00:33:50.510
<v Speaker 2>and they can invite team members in different

00:33:50.510 --> 00:33:52.590
<v Speaker 2>roles as view admins

00:33:52.669 --> 00:33:53.389
<v Speaker 2>or

00:33:54.429 --> 00:33:56.350
<v Speaker 2>as people who have edit access and can

00:33:56.350 --> 00:33:57.389
<v Speaker 2>run chaos.

00:33:57.470 --> 00:33:59.424
<v Speaker 2>You we could do different things.

00:33:59.585 --> 00:34:01.424
<v Speaker 2>I'm just going to create a different project

00:34:01.424 --> 00:34:03.344
<v Speaker 2>called Rawkode.

00:34:04.225 --> 00:34:06.304
<v Speaker 2>I'm just going to fill in some details

00:34:06.304 --> 00:34:06.705
<v Speaker 2>here.

00:34:15.489 --> 00:34:17.810
<v Speaker 2>It's going to provide some information.

00:34:25.205 --> 00:34:28.485
<v Speaker 2>Alright. So it has updated the details.

00:34:29.605 --> 00:34:32.405
<v Speaker 2>I'll just navigate on this browser

00:34:32.885 --> 00:34:35.285
<v Speaker 2>and just show you the different options that

00:34:35.285 --> 00:34:37.364
<v Speaker 2>you have for a few minutes before we

00:34:37.364 --> 00:34:39.920
<v Speaker 2>go ahead and do some experiments.

00:34:40.480 --> 00:34:43.520
<v Speaker 2>Like, Uma was mentioning, in case of Litmus,

00:34:43.920 --> 00:34:47.440
<v Speaker 2>the unit of execution of chaos is workflows.

00:34:47.920 --> 00:34:50.719
<v Speaker 2>So your workflow could be just one chaos

00:34:50.719 --> 00:34:51.520
<v Speaker 2>injection,

00:34:51.599 --> 00:34:53.835
<v Speaker 2>or it could be a set of chaos

00:34:53.835 --> 00:34:54.715
<v Speaker 2>injections

00:34:54.715 --> 00:34:57.114
<v Speaker 2>ordered in a particular manner in sequence or

00:34:57.114 --> 00:34:57.995
<v Speaker 2>in parallel.

00:34:58.235 --> 00:35:00.875
<v Speaker 2>You could also use workflows to run some

00:35:00.875 --> 00:35:03.195
<v Speaker 2>kind of a benchmark load or some other,

00:35:03.515 --> 00:35:05.995
<v Speaker 2>test workloads along with chaos just to see

00:35:05.995 --> 00:35:09.100
<v Speaker 2>how it behaves under stress. So workflows are

00:35:09.100 --> 00:35:11.580
<v Speaker 2>pretty flexible. You can construct them using the

00:35:11.580 --> 00:35:13.500
<v Speaker 2>browser, the the portal,

00:35:14.060 --> 00:35:16.860
<v Speaker 2>browser, or you can actually create them on

00:35:16.860 --> 00:35:18.940
<v Speaker 2>Git, source them into your,

00:35:19.740 --> 00:35:21.900
<v Speaker 2>both portal instance and execute it as well.

00:35:21.900 --> 00:35:23.500
<v Speaker 2>You can create predefined workflows.

00:35:24.325 --> 00:35:27.205
<v Speaker 2>We also ship what's called as the my

00:35:27.205 --> 00:35:29.205
<v Speaker 2>hub. That is a chaos hub

00:35:29.445 --> 00:35:32.645
<v Speaker 2>inside the the request portal. The chaos hub

00:35:32.645 --> 00:35:34.645
<v Speaker 2>that you see here is the same as

00:35:34.645 --> 00:35:36.565
<v Speaker 2>the one you notice,

00:35:36.885 --> 00:35:37.205
<v Speaker 2>in

00:35:37.740 --> 00:35:41.660
<v Speaker 2>public here at, up. It was chaos.io.

00:35:41.740 --> 00:35:43.260
<v Speaker 2>So this is some kind of an open

00:35:43.260 --> 00:35:44.140
<v Speaker 2>marketplace

00:35:44.140 --> 00:35:45.820
<v Speaker 2>you can think for chaos.

00:35:46.460 --> 00:35:48.540
<v Speaker 2>So this is where our community is focused

00:35:48.540 --> 00:35:51.660
<v Speaker 2>on contributing experiments into on picking experiments from.

00:35:52.135 --> 00:35:54.535
<v Speaker 2>There are some categories of experiments here. The

00:35:54.535 --> 00:35:55.735
<v Speaker 2>most used ones

00:35:55.815 --> 00:35:57.655
<v Speaker 2>or the most used experiments are from the

00:35:57.655 --> 00:36:00.375
<v Speaker 2>generic category. Most of the standard Kubernetes,

00:36:00.615 --> 00:36:03.175
<v Speaker 2>fault injections are available here. But there are

00:36:03.175 --> 00:36:04.295
<v Speaker 2>also experiments

00:36:04.455 --> 00:36:05.655
<v Speaker 2>of other categories.

00:36:06.050 --> 00:36:08.050
<v Speaker 2>For example, we have open APS and some

00:36:08.050 --> 00:36:10.050
<v Speaker 2>Kafka and some Cassandra experiments.

00:36:10.210 --> 00:36:12.450
<v Speaker 2>These are essentially the same faults as you

00:36:12.450 --> 00:36:14.690
<v Speaker 2>would see in the genetic experiments along with

00:36:14.690 --> 00:36:15.890
<v Speaker 2>some native

00:36:15.970 --> 00:36:17.010
<v Speaker 2>checks that are,

00:36:17.570 --> 00:36:19.730
<v Speaker 2>very specific to these applications. And they can

00:36:19.730 --> 00:36:21.250
<v Speaker 2>also consist of experiments

00:36:21.575 --> 00:36:24.375
<v Speaker 2>that are related on specifically to that app

00:36:24.375 --> 00:36:27.415
<v Speaker 2>and they're not general Kubernetes for failures or,

00:36:27.895 --> 00:36:29.175
<v Speaker 2>those kind of things.

00:36:29.655 --> 00:36:32.135
<v Speaker 2>So you have an instance of the hub

00:36:32.215 --> 00:36:34.375
<v Speaker 2>embedded in your request portal.

00:36:34.615 --> 00:36:37.330
<v Speaker 2>So you can construct workflows by picking experiments

00:36:37.330 --> 00:36:38.530
<v Speaker 2>off the hub.

00:36:38.770 --> 00:36:40.930
<v Speaker 2>But it's also possible for you to connect

00:36:40.930 --> 00:36:43.490
<v Speaker 2>your own kiosk hub. Let's say,

00:36:43.970 --> 00:36:46.690
<v Speaker 2>you have your own downstream

00:36:46.690 --> 00:36:49.635
<v Speaker 2>implementation of request experiments and you have that

00:36:49.635 --> 00:36:51.075
<v Speaker 2>in a private hub.

00:36:51.155 --> 00:36:52.595
<v Speaker 2>You can actually pull that,

00:36:53.235 --> 00:36:54.995
<v Speaker 2>where it has some access tokens and use

00:36:54.995 --> 00:36:56.675
<v Speaker 2>that for creating workflows.

00:36:56.915 --> 00:36:59.315
<v Speaker 2>As of now, I have a workflow which

00:36:59.315 --> 00:37:01.235
<v Speaker 2>is already constructed, so I'm going to use

00:37:01.235 --> 00:37:01.395
<v Speaker 2>that.

00:37:02.430 --> 00:37:04.830
<v Speaker 2>Let me move to the target section.

00:37:05.150 --> 00:37:07.790
<v Speaker 2>So the target is how we call

00:37:09.230 --> 00:37:11.230
<v Speaker 2>chaos execution environment.

00:37:11.550 --> 00:37:13.390
<v Speaker 2>So in this case,

00:37:14.270 --> 00:37:17.115
<v Speaker 2>the same cluster that has this particular portal

00:37:17.115 --> 00:37:17.915
<v Speaker 2>installed

00:37:17.915 --> 00:37:20.155
<v Speaker 2>is also the target, which is also called

00:37:20.155 --> 00:37:22.155
<v Speaker 2>self cluster and Litmus terminology,

00:37:22.395 --> 00:37:24.235
<v Speaker 2>and it shows that it is active.

00:37:24.875 --> 00:37:27.675
<v Speaker 2>But I could also connect other Kubernetes clusters

00:37:27.675 --> 00:37:29.195
<v Speaker 2>here. I can connect a target,

00:37:29.870 --> 00:37:30.190
<v Speaker 2>and,

00:37:30.910 --> 00:37:33.310
<v Speaker 2>request portal will actually communicate,

00:37:33.710 --> 00:37:36.350
<v Speaker 2>with that cluster and inject chaos there via

00:37:36.350 --> 00:37:37.310
<v Speaker 2>some agents.

00:37:38.030 --> 00:37:41.950
<v Speaker 2>So I have this local cluster self registered.

00:37:41.950 --> 00:37:44.525
<v Speaker 2>That is the portal is installed on this

00:37:44.525 --> 00:37:46.365
<v Speaker 2>cluster, and it is also an object of

00:37:46.365 --> 00:37:47.005
<v Speaker 2>chaos.

00:37:47.565 --> 00:37:49.724
<v Speaker 2>And once that happens, you will actually see

00:37:49.724 --> 00:37:53.005
<v Speaker 2>a few more parts being spun up here.

00:37:54.204 --> 00:37:56.444
<v Speaker 2>You can see something called, like, a subscriber.

00:37:56.444 --> 00:37:59.240
<v Speaker 2>You're doing essentially the agent. Which is actually

00:37:59.240 --> 00:38:01.640
<v Speaker 2>going to relay instructions from your portal onto

00:38:01.640 --> 00:38:03.400
<v Speaker 2>your cluster target.

00:38:03.640 --> 00:38:05.560
<v Speaker 2>And there are some workflow controllers,

00:38:05.560 --> 00:38:06.920
<v Speaker 2>the chaos operator,

00:38:06.920 --> 00:38:09.640
<v Speaker 2>and a few other other micro services, which

00:38:09.640 --> 00:38:11.080
<v Speaker 2>we can talk about later,

00:38:11.160 --> 00:38:13.240
<v Speaker 2>which help you to do chaos in a

00:38:13.240 --> 00:38:13.800
<v Speaker 2>better manner.

00:38:14.915 --> 00:38:16.115
<v Speaker 2>So with this,

00:38:17.475 --> 00:38:20.115
<v Speaker 2>I can go ahead and quickly jump to

00:38:20.115 --> 00:38:21.635
<v Speaker 2>the demo environment

00:38:21.635 --> 00:38:23.795
<v Speaker 2>that I actually wanted to show you and

00:38:23.795 --> 00:38:25.875
<v Speaker 2>do chaos on. So we are done with

00:38:25.875 --> 00:38:27.315
<v Speaker 2>the installations

00:38:26.960 --> 00:38:29.680
<v Speaker 2>part of Litmus. The portal has been installed.

00:38:29.680 --> 00:38:31.119
<v Speaker 2>It's as simple as this.

00:38:31.440 --> 00:38:33.839
<v Speaker 2>And I can go ahead and run new

00:38:33.839 --> 00:38:34.720
<v Speaker 2>experiments

00:38:34.960 --> 00:38:37.359
<v Speaker 2>by creating a new workflow. I can schedule

00:38:37.359 --> 00:38:38.320
<v Speaker 2>a workflow,

00:38:39.039 --> 00:38:40.559
<v Speaker 2>and I can

00:38:41.214 --> 00:38:43.135
<v Speaker 2>select the target on which I want to

00:38:43.135 --> 00:38:44.015
<v Speaker 2>do chaos.

00:38:44.335 --> 00:38:46.175
<v Speaker 2>There are some predefined workflows

00:38:46.255 --> 00:38:48.974
<v Speaker 2>just for illustrative purposes that we've created. You

00:38:48.974 --> 00:38:51.135
<v Speaker 2>can feel free to use them, or you

00:38:51.135 --> 00:38:52.815
<v Speaker 2>could create your own workflow.

00:38:53.710 --> 00:38:55.630
<v Speaker 2>And when you create your own workflow, you

00:38:55.630 --> 00:38:56.910
<v Speaker 2>have a few options.

00:38:57.390 --> 00:38:59.950
<v Speaker 2>You can select them from the chaos hub,

00:38:59.950 --> 00:39:02.030
<v Speaker 2>like I said. You can select the experiment

00:39:02.030 --> 00:39:02.670
<v Speaker 2>here,

00:39:03.390 --> 00:39:03.870
<v Speaker 2>and

00:39:05.150 --> 00:39:07.070
<v Speaker 2>you could choose to go ahead and add

00:39:07.070 --> 00:39:08.910
<v Speaker 2>tunables for a particular experiment.

00:39:09.605 --> 00:39:11.365
<v Speaker 2>This will eventually give you

00:39:12.164 --> 00:39:14.005
<v Speaker 2>a chaos engine manifest,

00:39:14.404 --> 00:39:16.165
<v Speaker 2>which looks something like this.

00:39:16.724 --> 00:39:18.645
<v Speaker 2>I can show you that once I finished

00:39:18.645 --> 00:39:19.845
<v Speaker 2>adding more experiments.

00:39:22.970 --> 00:39:24.810
<v Speaker 2>So this will actually open up a browser,

00:39:24.810 --> 00:39:26.330
<v Speaker 2>which is going to show you

00:39:26.810 --> 00:39:29.050
<v Speaker 2>the manifest that is actually going to be

00:39:29.050 --> 00:39:31.050
<v Speaker 2>created on your target cluster when you run

00:39:31.050 --> 00:39:31.770
<v Speaker 2>chaos.

00:39:32.010 --> 00:39:34.089
<v Speaker 2>This looks very similar to an Rawkode workflow,

00:39:34.089 --> 00:39:35.609
<v Speaker 2>like Paul mentioned, but it has

00:39:36.005 --> 00:39:37.685
<v Speaker 2>a few other characteristics.

00:39:37.685 --> 00:39:40.805
<v Speaker 2>The steps are executed by a specific image

00:39:40.805 --> 00:39:42.885
<v Speaker 2>which understands Litmus API.

00:39:43.445 --> 00:39:45.765
<v Speaker 2>And this is called the chaos engine,

00:39:46.085 --> 00:39:46.725
<v Speaker 2>which is

00:39:47.205 --> 00:39:50.245
<v Speaker 2>essentially how you define your chaos experiment to

00:39:50.245 --> 00:39:50.645
<v Speaker 2>be like.

00:39:51.270 --> 00:39:51.670
<v Speaker 2>And,

00:39:53.350 --> 00:39:55.110
<v Speaker 2>this is a very quick snapshot.

00:39:55.110 --> 00:39:55.990
<v Speaker 2>It has,

00:39:56.150 --> 00:39:59.030
<v Speaker 2>some references about what application you want to

00:39:59.030 --> 00:40:00.310
<v Speaker 2>do chaos on

00:40:00.710 --> 00:40:03.510
<v Speaker 2>and what experiment you actually want to perform

00:40:03.750 --> 00:40:05.924
<v Speaker 2>and and what are some of the tunables

00:40:05.924 --> 00:40:08.085
<v Speaker 2>or options you want to run the experiment

00:40:08.085 --> 00:40:08.724
<v Speaker 2>with.

00:40:08.885 --> 00:40:10.325
<v Speaker 2>That's what the engine,

00:40:11.285 --> 00:40:12.405
<v Speaker 2>exemplifies.

00:40:12.484 --> 00:40:13.685
<v Speaker 2>It is essentially,

00:40:14.005 --> 00:40:15.924
<v Speaker 2>a definition of how you want to do

00:40:15.924 --> 00:40:18.300
<v Speaker 2>your chaos, what chaos you want to do,

00:40:18.300 --> 00:40:19.660
<v Speaker 2>how you want to do it, and what

00:40:19.660 --> 00:40:21.260
<v Speaker 2>application you want to do, what are the

00:40:21.260 --> 00:40:23.500
<v Speaker 2>run properties you would associate with the chaos

00:40:23.500 --> 00:40:24.300
<v Speaker 2>experiment.

00:40:24.380 --> 00:40:25.900
<v Speaker 2>All that can be defined here.

00:40:26.540 --> 00:40:28.940
<v Speaker 2>And, the workflow embeds this chaos in in

00:40:28.940 --> 00:40:30.300
<v Speaker 2>a long way. If you are the steps

00:40:30.300 --> 00:40:31.900
<v Speaker 2>that are setting up dependencies,

00:40:32.375 --> 00:40:34.375
<v Speaker 2>then you go ahead and run this. I

00:40:34.375 --> 00:40:36.214
<v Speaker 2>don't have an application right now in this

00:40:36.214 --> 00:40:38.615
<v Speaker 2>cluster to do my chaos on. So I'll

00:40:38.615 --> 00:40:40.535
<v Speaker 2>just stop at this point,

00:40:41.174 --> 00:40:42.295
<v Speaker 2>and I'll

00:40:42.295 --> 00:40:45.174
<v Speaker 2>probably go ahead and show you the demo

00:40:45.174 --> 00:40:48.135
<v Speaker 2>environment where we'll do the actual chaos today.

00:40:48.609 --> 00:40:50.930
<v Speaker 2>Before we go there, I just wanted to

00:40:50.930 --> 00:40:53.570
<v Speaker 2>know if there are any questions

00:40:54.210 --> 00:40:56.050
<v Speaker 2>around the installation process.

00:40:57.170 --> 00:41:00.450
<v Speaker 0>Yes. I think the the installation looked really

00:41:00.450 --> 00:41:02.050
<v Speaker 0>simple, which is great. There were a couple

00:41:02.050 --> 00:41:05.010
<v Speaker 0>of things that popped into my head as

00:41:03.585 --> 00:41:05.265
<v Speaker 0>as you were working through that. Yeah.

00:41:05.905 --> 00:41:06.625
<v Speaker 0>Like,

00:41:08.865 --> 00:41:11.265
<v Speaker 0>it's using it's actually using Argo under the

00:41:11.265 --> 00:41:13.105
<v Speaker 0>hood to do this to do this. Right?

00:41:13.105 --> 00:41:14.545
<v Speaker 0>So it's kinda working hand in hand with

00:41:14.545 --> 00:41:15.025
<v Speaker 0>that project,

00:41:16.140 --> 00:41:18.380
<v Speaker 0>which I thought was That's true. Yeah. Really

00:41:18.380 --> 00:41:19.020
<v Speaker 0>nice

00:41:19.339 --> 00:41:21.339
<v Speaker 0>rather, you know, reinventing the wheel and doing

00:41:21.339 --> 00:41:24.460
<v Speaker 0>something completely bespoke. So I like that. We

00:41:24.460 --> 00:41:26.700
<v Speaker 0>also had a a question from Miles who

00:41:26.700 --> 00:41:29.295
<v Speaker 0>asked, is it possible to target a specific

00:41:29.295 --> 00:41:30.974
<v Speaker 0>workload in deployment? And I think you just

00:41:30.974 --> 00:41:32.175
<v Speaker 0>kind of showed that if you could pull

00:41:32.175 --> 00:41:33.535
<v Speaker 0>that YAML back up.

00:41:35.055 --> 00:41:37.135
<v Speaker 2>Yeah. I think that's a great question.

00:41:37.615 --> 00:41:39.455
<v Speaker 2>Thanks for asking that, Miles.

00:41:40.175 --> 00:41:40.494
<v Speaker 2>Yeah.

00:41:41.100 --> 00:41:41.900
<v Speaker 2>Litmus,

00:41:42.060 --> 00:41:44.220
<v Speaker 2>one of the crucial differentiators of Litmus is

00:41:44.220 --> 00:41:45.500
<v Speaker 2>the fact that

00:41:45.580 --> 00:41:46.380
<v Speaker 2>we

00:41:46.620 --> 00:41:48.060
<v Speaker 2>can isolate,

00:41:48.860 --> 00:41:51.420
<v Speaker 2>the chaos targets to the workload.

00:41:51.740 --> 00:41:53.820
<v Speaker 2>For example, if you have a deployment

00:41:53.820 --> 00:41:56.395
<v Speaker 2>that you want to do chaos on and

00:41:56.395 --> 00:41:58.475
<v Speaker 2>you don't want chaos to be

00:41:59.195 --> 00:42:00.795
<v Speaker 2>you you want to just restrict the blast

00:42:00.795 --> 00:42:03.675
<v Speaker 2>radius to that deployment alone and or maybe

00:42:03.675 --> 00:42:06.075
<v Speaker 2>any other downstream application that's depending on that

00:42:06.075 --> 00:42:08.315
<v Speaker 2>deployment, but not any other application.

00:42:08.750 --> 00:42:10.430
<v Speaker 2>You could choose to do that in the

00:42:10.430 --> 00:42:12.350
<v Speaker 2>way you construct your chaos engine.

00:42:12.670 --> 00:42:13.390
<v Speaker 2>There are,

00:42:13.710 --> 00:42:16.030
<v Speaker 2>some annotation checks that you can do. You

00:42:16.030 --> 00:42:17.710
<v Speaker 2>can turn on in Litmus, and it's going

00:42:17.710 --> 00:42:20.750
<v Speaker 2>to look for chaos annotation on a particular

00:42:20.750 --> 00:42:21.390
<v Speaker 2>workload,

00:42:22.025 --> 00:42:25.065
<v Speaker 2>and it's going to filter only those applications

00:42:25.145 --> 00:42:26.105
<v Speaker 2>that has

00:42:26.265 --> 00:42:29.385
<v Speaker 2>those annotations and also has the label selectors

00:42:29.385 --> 00:42:30.425
<v Speaker 2>that you mentioned,

00:42:30.745 --> 00:42:32.425
<v Speaker 2>and it's going to kill only that.

00:42:33.225 --> 00:42:35.625
<v Speaker 2>I I will show that chaos engine in

00:42:35.625 --> 00:42:37.705
<v Speaker 2>slightly more detail

00:42:37.350 --> 00:42:39.830
<v Speaker 2>when we do the Kafka demonstration.

00:42:40.630 --> 00:42:42.070
<v Speaker 2>But I'd also like to

00:42:42.310 --> 00:42:43.750
<v Speaker 2>just augment what

00:42:43.830 --> 00:42:46.150
<v Speaker 2>David said about the workflows.

00:42:46.150 --> 00:42:47.670
<v Speaker 2>I think you made a great point about

00:42:47.670 --> 00:42:49.590
<v Speaker 2>not reinventing the wheel,

00:42:49.830 --> 00:42:52.545
<v Speaker 2>David. So when we started off Litmus, and

00:42:52.545 --> 00:42:53.744
<v Speaker 2>this is how you'll find it in the

00:42:53.744 --> 00:42:55.505
<v Speaker 2>current documentation as well,

00:42:56.065 --> 00:42:58.705
<v Speaker 2>the custom resources that were brought up for

00:42:58.705 --> 00:43:01.185
<v Speaker 2>Litmus were capable of doing experiments in a

00:43:01.185 --> 00:43:03.265
<v Speaker 2>particular way, individual experiments.

00:43:03.810 --> 00:43:05.730
<v Speaker 2>But we thought there's a lot of value

00:43:05.730 --> 00:43:08.690
<v Speaker 2>in allowing users to run complex scenarios

00:43:08.850 --> 00:43:09.570
<v Speaker 2>because,

00:43:09.650 --> 00:43:12.850
<v Speaker 2>you know, misfortune doesn't come singly. Sometimes it

00:43:12.850 --> 00:43:14.050
<v Speaker 2>comes in clusters.

00:43:14.050 --> 00:43:15.890
<v Speaker 2>So you have more than one failure occurring

00:43:15.890 --> 00:43:17.010
<v Speaker 2>at a given point of time.

00:43:18.005 --> 00:43:19.685
<v Speaker 2>All the same, a lot of people want

00:43:19.685 --> 00:43:22.085
<v Speaker 2>to do failure testing when they're running performance

00:43:22.085 --> 00:43:22.965
<v Speaker 2>workloads.

00:43:22.965 --> 00:43:24.805
<v Speaker 2>When they're doing performance testing, they also want

00:43:24.805 --> 00:43:26.245
<v Speaker 2>to do some chaos and see how things

00:43:26.245 --> 00:43:27.045
<v Speaker 2>are behaving.

00:43:27.285 --> 00:43:29.125
<v Speaker 2>We found Argo as

00:43:29.605 --> 00:43:32.109
<v Speaker 2>workloads as a way to enable that. And

00:43:32.109 --> 00:43:34.589
<v Speaker 2>in fact, the idea was brought on board

00:43:34.589 --> 00:43:37.230
<v Speaker 2>by one of our engineers from Intuit,

00:43:37.550 --> 00:43:40.670
<v Speaker 2>Sumit, who was using Litmus that way and

00:43:40.670 --> 00:43:42.830
<v Speaker 2>then suggested, why don't you actually make it

00:43:42.830 --> 00:43:44.830
<v Speaker 2>the unit of execution within Litmus?

00:43:45.714 --> 00:43:48.035
<v Speaker 2>So I think that that that's the backstory

00:43:48.035 --> 00:43:49.635
<v Speaker 2>behind using

00:43:49.635 --> 00:43:50.435
<v Speaker 2>Argo.

00:43:51.395 --> 00:43:52.115
<v Speaker 0>Okay.

00:43:52.195 --> 00:43:54.915
<v Speaker 0>I'm curious as well. You showed the, like,

00:43:54.915 --> 00:43:56.435
<v Speaker 0>the chaos hub.

00:43:56.675 --> 00:43:58.675
<v Speaker 0>I mean, are there any plans to use

00:43:58.675 --> 00:44:00.435
<v Speaker 0>the artifact hub as a way to store

00:44:00.435 --> 00:44:01.850
<v Speaker 0>these chaos experiments?

00:44:03.850 --> 00:44:05.370
<v Speaker 2>That that's a great question.

00:44:05.930 --> 00:44:08.410
<v Speaker 2>We have had this we have touched upon

00:44:08.410 --> 00:44:09.530
<v Speaker 2>this in the past,

00:44:10.410 --> 00:44:12.890
<v Speaker 2>specifically when we contributed

00:44:12.970 --> 00:44:15.930
<v Speaker 2>Litmus to CNCF as a sandbox project.

00:44:17.165 --> 00:44:19.645
<v Speaker 2>Right now, the hub lives as it as

00:44:19.645 --> 00:44:20.845
<v Speaker 2>its individual

00:44:20.845 --> 00:44:21.725
<v Speaker 2>entity,

00:44:21.725 --> 00:44:22.205
<v Speaker 2>and

00:44:22.605 --> 00:44:26.685
<v Speaker 2>the artifact hub has the artifacts for deploying

00:44:26.685 --> 00:44:27.565
<v Speaker 2>Litmus.

00:44:27.565 --> 00:44:30.580
<v Speaker 2>Both the the Litmus control plane, and you

00:44:30.580 --> 00:44:33.540
<v Speaker 2>can also have the Litmus experiments being installed

00:44:33.540 --> 00:44:34.340
<v Speaker 2>via,

00:44:34.660 --> 00:44:37.300
<v Speaker 2>manifest that you pull from the artifact hub.

00:44:37.460 --> 00:44:39.940
<v Speaker 2>So the Litmus experiments that you see here,

00:44:40.260 --> 00:44:43.619
<v Speaker 2>you can actually install them via manifest,

00:44:43.925 --> 00:44:46.405
<v Speaker 2>And the the hub provides you more context

00:44:46.405 --> 00:44:48.645
<v Speaker 2>and metadata about a given experiment,

00:44:48.885 --> 00:44:50.885
<v Speaker 2>what it's going to do, and why it's

00:44:50.885 --> 00:44:52.645
<v Speaker 2>useful, and what are the

00:44:53.285 --> 00:44:56.565
<v Speaker 2>artifacts associated with that. There's an experiment CR.

00:44:57.430 --> 00:45:00.230
<v Speaker 2>Then there's a recommended service account that you

00:45:00.230 --> 00:45:02.790
<v Speaker 2>run your experiment with. So in Litmus, each

00:45:02.790 --> 00:45:05.190
<v Speaker 2>experiment is associated with the service account which

00:45:05.190 --> 00:45:06.470
<v Speaker 2>you could choose to use

00:45:07.270 --> 00:45:08.070
<v Speaker 2>because

00:45:09.190 --> 00:45:11.510
<v Speaker 2>we felt that in a multi tenant environment

00:45:11.510 --> 00:45:14.745
<v Speaker 2>when people are running in a self-service model,

00:45:15.065 --> 00:45:17.065
<v Speaker 2>each running their own experiments, you don't really

00:45:17.065 --> 00:45:19.145
<v Speaker 2>want them to run experiments with

00:45:19.385 --> 00:45:21.305
<v Speaker 2>all the permissions that they can get.

00:45:21.785 --> 00:45:24.105
<v Speaker 2>We just defined a minimum set of permissions

00:45:24.105 --> 00:45:24.984
<v Speaker 2>for each experiment.

00:45:25.740 --> 00:45:27.980
<v Speaker 2>We are recommending users to use that, but

00:45:27.980 --> 00:45:30.140
<v Speaker 2>it's not necessary. If you're if you have

00:45:30.140 --> 00:45:32.460
<v Speaker 2>autonomy over the cluster, you can have an

00:45:32.460 --> 00:45:34.700
<v Speaker 2>all encompassing service account that does all the

00:45:34.700 --> 00:45:35.340
<v Speaker 2>experiment.

00:45:35.740 --> 00:45:38.300
<v Speaker 2>But we have all that information around what

00:45:38.300 --> 00:45:40.140
<v Speaker 2>this experiment does and what are the, you

00:45:40.140 --> 00:45:41.340
<v Speaker 2>know, associated

00:45:41.475 --> 00:45:43.475
<v Speaker 2>manifest, all that in the hub.

00:45:43.715 --> 00:45:44.195
<v Speaker 2>Whereas

00:45:44.675 --> 00:45:46.595
<v Speaker 2>in the artifact hub, you will find the

00:45:46.595 --> 00:45:49.395
<v Speaker 2>same experiments available for installation as a helm

00:45:49.395 --> 00:45:50.035
<v Speaker 2>chart.

00:45:50.275 --> 00:45:50.835
<v Speaker 2>So

00:45:51.475 --> 00:45:54.515
<v Speaker 2>we have a space for both to coexist,

00:45:55.040 --> 00:45:56.480
<v Speaker 2>but it is a possibility.

00:45:57.280 --> 00:45:59.520
<v Speaker 2>We really don't know what holds for the

00:45:59.520 --> 00:46:00.240
<v Speaker 2>future.

00:46:00.400 --> 00:46:02.560
<v Speaker 2>As the project grows, we can see and

00:46:02.560 --> 00:46:05.040
<v Speaker 2>see if we might probably revisit

00:46:05.040 --> 00:46:05.920
<v Speaker 2>this

00:46:06.975 --> 00:46:08.895
<v Speaker 2>this topic and this discussion to see how

00:46:08.895 --> 00:46:11.615
<v Speaker 2>this hub can go on, whether it can

00:46:11.615 --> 00:46:13.535
<v Speaker 2>run individually or whether

00:46:13.535 --> 00:46:15.695
<v Speaker 2>it goes and gets merged into Artifact Hub.

00:46:15.935 --> 00:46:18.175
<v Speaker 2>For now, I think Artifact Hub and the

00:46:18.175 --> 00:46:20.830
<v Speaker 2>chaos hub both provide you options to pick

00:46:20.830 --> 00:46:23.550
<v Speaker 2>experiments from. Okay. I'm gonna ask you a

00:46:23.550 --> 00:46:25.390
<v Speaker 0>very difficult question now, but I think the

00:46:25.390 --> 00:46:27.790
<v Speaker 0>most important one of the day, like, does

00:46:27.790 --> 00:46:29.150
<v Speaker 0>the mascot have a name?

00:46:32.670 --> 00:46:34.830
<v Speaker 2>We call it the chaos bird.

00:46:35.525 --> 00:46:37.765
<v Speaker 2>There's a very interesting blog.

00:46:37.765 --> 00:46:40.085
<v Speaker 2>I can probably share that on the

00:46:40.725 --> 00:46:42.485
<v Speaker 2>livestream comments later.

00:46:42.645 --> 00:46:44.165
<v Speaker 2>As to how this came about,

00:46:46.565 --> 00:46:48.165
<v Speaker 2>we've we wanted to,

00:46:48.485 --> 00:46:50.645
<v Speaker 2>you know, make it a very restless

00:46:50.950 --> 00:46:53.350
<v Speaker 2>sort of little thing, which always does experiments

00:46:53.350 --> 00:46:54.630
<v Speaker 2>so you can see it wearing some kind

00:46:54.630 --> 00:46:57.270
<v Speaker 2>of a coat Yep. Always going about a

00:46:57.270 --> 00:46:58.150
<v Speaker 2>a lab,

00:46:58.390 --> 00:47:00.150
<v Speaker 2>trying to do some experiments.

00:47:00.710 --> 00:47:03.110
<v Speaker 2>So that was the general idea, and you

00:47:03.110 --> 00:47:04.950
<v Speaker 2>will you'll find a lot of the mascot

00:47:05.115 --> 00:47:07.915
<v Speaker 2>in the Litmus website as well in different,

00:47:08.155 --> 00:47:08.955
<v Speaker 2>pauses.

00:47:09.275 --> 00:47:10.555
<v Speaker 2>So, yeah, I think it's,

00:47:11.515 --> 00:47:13.675
<v Speaker 2>something we got positive feedback on.

00:47:13.915 --> 00:47:15.355
<v Speaker 2>People like the

00:47:15.595 --> 00:47:16.555
<v Speaker 2>the chaos bird.

00:47:17.280 --> 00:47:19.680
<v Speaker 2>So yeah. Yeah. Definitely 10 out of 10.

00:47:19.680 --> 00:47:21.200
<v Speaker 0>In fact, I've gotta say, like, the design

00:47:21.200 --> 00:47:23.280
<v Speaker 0>and aesthetic of the dashboards as well and

00:47:23.280 --> 00:47:25.920
<v Speaker 0>the logo, like, it it's all just really

00:47:25.920 --> 00:47:27.760
<v Speaker 0>polished and cool, and I definitely need to

00:47:27.760 --> 00:47:30.240
<v Speaker 0>get some chaos bird stickers now. Like, definitely

00:47:30.240 --> 00:47:32.000
<v Speaker 0>one of my favorite cloud native mascots.

00:47:32.815 --> 00:47:34.735
<v Speaker 0>Anyways, that's a small segue but I just

00:47:34.735 --> 00:47:36.655
<v Speaker 0>had to see that was awesome. I really

00:47:36.655 --> 00:47:38.495
<v Speaker 0>like it. So,

00:47:38.815 --> 00:47:40.015
<v Speaker 0>you know, I I know we're about to

00:47:40.015 --> 00:47:41.615
<v Speaker 0>do a more advanced demo and maybe you'll

00:47:41.615 --> 00:47:43.695
<v Speaker 0>tackle this here but there's something that's kinda

00:47:43.695 --> 00:47:45.215
<v Speaker 0>popped into my mind, you know. I can

00:47:45.215 --> 00:47:47.960
<v Speaker 0>imagine me running this in mean, I'm

00:47:48.040 --> 00:47:49.799
<v Speaker 0>a little bit crazy at times and I

00:47:49.799 --> 00:47:51.160
<v Speaker 0>will run this in production. I know I

00:47:51.160 --> 00:47:52.760
<v Speaker 0>will because I wanna really test this in

00:47:52.760 --> 00:47:53.960
<v Speaker 0>a real world situation.

00:47:54.760 --> 00:47:57.000
<v Speaker 0>If things are going badly with an experiment,

00:47:57.000 --> 00:47:59.880
<v Speaker 0>is there a way to revert, undo, delete,

00:47:59.880 --> 00:48:00.200
<v Speaker 0>stop?

00:48:01.085 --> 00:48:03.164
<v Speaker 0>Am I committed to the chaos, or can

00:48:03.164 --> 00:48:04.845
<v Speaker 0>I pull out of the chaos?

00:48:06.204 --> 00:48:07.244
<v Speaker 2>You could.

00:48:08.365 --> 00:48:10.445
<v Speaker 2>So the Litmus supports

00:48:11.565 --> 00:48:13.565
<v Speaker 2>an ability to abort experiments.

00:48:14.130 --> 00:48:14.849
<v Speaker 2>So

00:48:14.930 --> 00:48:17.410
<v Speaker 2>each chaos resource in Litmus

00:48:17.490 --> 00:48:19.170
<v Speaker 2>has an engine state,

00:48:19.569 --> 00:48:21.410
<v Speaker 2>which is essentially reflective of

00:48:22.369 --> 00:48:25.250
<v Speaker 2>the current state of your experiment.

00:48:25.329 --> 00:48:27.650
<v Speaker 2>It is always set to active by default.

00:48:27.730 --> 00:48:30.345
<v Speaker 2>You can go patch it to stop something

00:48:30.345 --> 00:48:32.105
<v Speaker 2>that is going to be made available in

00:48:32.105 --> 00:48:34.105
<v Speaker 2>the portal. You could disable portals for the

00:48:34.105 --> 00:48:36.105
<v Speaker 2>portal today. I mean, you could disable the

00:48:36.105 --> 00:48:37.625
<v Speaker 2>workflow in the portal today.

00:48:38.265 --> 00:48:40.505
<v Speaker 2>That's essentially going to stop it from getting

00:48:40.505 --> 00:48:44.345
<v Speaker 2>picked and stop the kiosk from getting rescheduled.

00:48:44.730 --> 00:48:46.170
<v Speaker 2>We also have

00:48:47.210 --> 00:48:49.290
<v Speaker 2>the about feature coming up on the portal.

00:48:49.290 --> 00:48:50.810
<v Speaker 2>It's already supported by the back end if

00:48:50.810 --> 00:48:52.890
<v Speaker 2>you're doing things by hand. You just need

00:48:52.890 --> 00:48:53.770
<v Speaker 2>to patch

00:48:54.730 --> 00:48:57.770
<v Speaker 2>your chaos resource with a particular state, and

00:48:57.770 --> 00:49:00.775
<v Speaker 2>it's going to revert all the existing,

00:49:01.015 --> 00:49:03.815
<v Speaker 2>chaos processes that have been started. Let's say

00:49:03.815 --> 00:49:05.735
<v Speaker 2>I'm doing some kind of network chaos

00:49:05.895 --> 00:49:08.215
<v Speaker 2>where I've gone and injected some

00:49:08.215 --> 00:49:10.935
<v Speaker 2>rules network rules on the network namespace of

00:49:10.935 --> 00:49:12.695
<v Speaker 2>the remote container targets.

00:49:13.380 --> 00:49:14.020
<v Speaker 2>By

00:49:14.260 --> 00:49:15.619
<v Speaker 2>botting the experiment,

00:49:15.779 --> 00:49:18.260
<v Speaker 2>those processes are going to be rolled back.

00:49:18.339 --> 00:49:20.579
<v Speaker 2>And all the kiosk pods that were brought

00:49:20.579 --> 00:49:22.980
<v Speaker 2>up to do the experiment to validate the

00:49:22.980 --> 00:49:23.859
<v Speaker 2>hypothesis,

00:49:23.859 --> 00:49:25.940
<v Speaker 2>etcetera, they are going to be removed as

00:49:25.940 --> 00:49:27.625
<v Speaker 2>well. And there is something called as a

00:49:27.625 --> 00:49:28.904
<v Speaker 2>chaos result.

00:49:28.904 --> 00:49:31.065
<v Speaker 2>That's another custom resource. It is an artifact

00:49:31.065 --> 00:49:32.825
<v Speaker 2>that's generated at runtime,

00:49:33.464 --> 00:49:35.224
<v Speaker 2>which is going to have information of what

00:49:35.224 --> 00:49:37.865
<v Speaker 2>happened thus far in your experiment and the

00:49:37.865 --> 00:49:39.305
<v Speaker 2>current state that it was aborted.

00:49:39.700 --> 00:49:41.540
<v Speaker 2>You know a future that, okay, this was

00:49:41.540 --> 00:49:43.300
<v Speaker 2>a run that was stopped. I can either

00:49:43.300 --> 00:49:45.700
<v Speaker 2>restart it, or I can clear everything and

00:49:45.700 --> 00:49:47.860
<v Speaker 2>start fresh again with the new hypothesis.

00:49:48.180 --> 00:49:50.260
<v Speaker 2>So that's an option you could do. And

00:49:50.260 --> 00:49:51.540
<v Speaker 2>it is something that

00:49:51.905 --> 00:49:54.305
<v Speaker 2>we got a lot of feedback on early

00:49:54.305 --> 00:49:55.825
<v Speaker 2>when we started the project

00:49:57.425 --> 00:49:59.265
<v Speaker 2>about a couple of years back. So we

00:49:59.265 --> 00:50:02.465
<v Speaker 2>said, we want to use Litmus in production.

00:50:02.545 --> 00:50:04.145
<v Speaker 2>We really want it to be able to

00:50:04.145 --> 00:50:04.785
<v Speaker 2>roll back

00:50:05.430 --> 00:50:08.150
<v Speaker 2>the chaos and stop things immediately.

00:50:09.109 --> 00:50:12.310
<v Speaker 2>And, yes, we recently, we're able to demonstrate

00:50:12.310 --> 00:50:13.990
<v Speaker 2>that we could you could do this at

00:50:13.990 --> 00:50:16.630
<v Speaker 2>scale as well. Let's say you're doing chaos

00:50:16.630 --> 00:50:17.109
<v Speaker 2>on

00:50:18.155 --> 00:50:20.155
<v Speaker 2>hundreds of replicas at a given point of

00:50:20.155 --> 00:50:20.635
<v Speaker 2>time,

00:50:21.115 --> 00:50:22.555
<v Speaker 2>so you need to be able to stop

00:50:22.555 --> 00:50:24.955
<v Speaker 2>chaos in all of them. So that's something

00:50:24.955 --> 00:50:26.875
<v Speaker 2>that we we already support on a per

00:50:26.875 --> 00:50:28.075
<v Speaker 2>experiment basis.

00:50:28.234 --> 00:50:30.240
<v Speaker 2>The portal is going to enable that to

00:50:30.240 --> 00:50:32.320
<v Speaker 2>be done for a workflow basis. I think

00:50:32.320 --> 00:50:34.160
<v Speaker 2>that should be available very soon.

00:50:34.640 --> 00:50:35.280
<v Speaker 0>Nice.

00:50:35.440 --> 00:50:37.440
<v Speaker 0>Okay. Let's tackle one more question, and then

00:50:37.440 --> 00:50:39.120
<v Speaker 0>I'll let you get back to your demo.

00:50:39.520 --> 00:50:42.080
<v Speaker 0>Boss has asked a great question here. And

00:50:42.080 --> 00:50:44.234
<v Speaker 0>what he's asking is, can I configure the

00:50:44.234 --> 00:50:46.234
<v Speaker 0>signal sent to my application so that I

00:50:46.234 --> 00:50:48.875
<v Speaker 0>can handle maybe a graceful termination rather than

00:50:48.875 --> 00:50:50.474
<v Speaker 0>a sec, which would be more of an

00:50:50.474 --> 00:50:52.395
<v Speaker 0>abrupt termination of my application?

00:50:54.234 --> 00:50:54.875
<v Speaker 2>Sure.

00:50:55.915 --> 00:50:57.915
<v Speaker 2>There are a couple of

00:50:59.240 --> 00:51:01.560
<v Speaker 2>experiments that you would see on the the

00:51:01.560 --> 00:51:03.160
<v Speaker 2>chaos hub.

00:51:03.640 --> 00:51:05.800
<v Speaker 2>I hope my the chaos hub is visible.

00:51:05.800 --> 00:51:07.800
<v Speaker 0>It is. So you could you

00:51:07.800 --> 00:51:10.200
<v Speaker 2>could see there is a bar delete experiment,

00:51:10.200 --> 00:51:12.119
<v Speaker 2>something we also conducted a little earlier,

00:51:12.545 --> 00:51:13.585
<v Speaker 2>And it has,

00:51:14.945 --> 00:51:16.225
<v Speaker 2>a few options

00:51:16.225 --> 00:51:18.865
<v Speaker 2>for you to define the nature of

00:51:19.185 --> 00:51:20.785
<v Speaker 2>the kill.

00:51:20.945 --> 00:51:22.785
<v Speaker 2>For example, nature of the delete, you could

00:51:22.785 --> 00:51:24.305
<v Speaker 2>do it with force. You could do it

00:51:24.305 --> 00:51:25.345
<v Speaker 2>without force

00:51:25.620 --> 00:51:27.620
<v Speaker 2>Flags, if you do it with force flags,

00:51:27.700 --> 00:51:29.460
<v Speaker 2>you're going to have a zero termination

00:51:29.700 --> 00:51:31.780
<v Speaker 2>grace period seconds, and it's going to immediately

00:51:31.780 --> 00:51:33.060
<v Speaker 2>remove your part.

00:51:33.620 --> 00:51:35.700
<v Speaker 2>That's about the part delete, an API driven

00:51:35.700 --> 00:51:37.780
<v Speaker 2>part delete. There's also another experiment,

00:51:38.205 --> 00:51:41.245
<v Speaker 2>an interesting one called container kill experiment,

00:51:41.245 --> 00:51:43.885
<v Speaker 2>which is a lot to do with signals,

00:51:44.285 --> 00:51:46.525
<v Speaker 2>the nature of the signals that you can

00:51:46.525 --> 00:51:47.885
<v Speaker 2>push to your

00:51:48.925 --> 00:51:49.885
<v Speaker 2>application.

00:51:49.965 --> 00:51:50.845
<v Speaker 2>So by default,

00:51:52.430 --> 00:51:53.470
<v Speaker 2>Kubernetes

00:51:53.470 --> 00:51:56.110
<v Speaker 2>sends the the sit down. And if you

00:51:56.110 --> 00:51:58.350
<v Speaker 2>if you do have hooks that you already

00:51:58.350 --> 00:51:58.830
<v Speaker 2>have,

00:51:59.630 --> 00:52:01.870
<v Speaker 2>some kind of pre stop hooks,

00:52:01.950 --> 00:52:02.590
<v Speaker 2>then

00:52:03.150 --> 00:52:06.645
<v Speaker 2>you will allow those to gracefully complete before

00:52:06.645 --> 00:52:08.485
<v Speaker 2>actually going and killing it off at the

00:52:08.485 --> 00:52:09.365
<v Speaker 2>end of the,

00:52:09.845 --> 00:52:12.405
<v Speaker 2>period termination grace period seconds that you might

00:52:12.405 --> 00:52:13.925
<v Speaker 2>have defined for your application.

00:52:14.485 --> 00:52:17.285
<v Speaker 2>But container kill experiment allows you to specify

00:52:17.285 --> 00:52:18.245
<v Speaker 2>the nature of

00:52:18.810 --> 00:52:19.370
<v Speaker 2>the,

00:52:19.690 --> 00:52:22.090
<v Speaker 2>the termination that you pass your app containers.

00:52:22.090 --> 00:52:24.010
<v Speaker 2>You can send sit downs, sit kills, all

00:52:24.010 --> 00:52:26.410
<v Speaker 2>those kind of things. It's something that is,

00:52:27.130 --> 00:52:29.050
<v Speaker 2>this is an experiment that is more of

00:52:29.050 --> 00:52:32.075
<v Speaker 2>a remnant of the previous era before Kubernetes

00:52:32.075 --> 00:52:34.395
<v Speaker 2>where Docker and Docker Swarm used to rule

00:52:34.395 --> 00:52:35.035
<v Speaker 2>the rules,

00:52:35.515 --> 00:52:36.075
<v Speaker 2>and

00:52:36.315 --> 00:52:37.915
<v Speaker 2>it could do a Docker kill.

00:52:38.075 --> 00:52:40.395
<v Speaker 2>Right? That work. But it's something that you

00:52:40.395 --> 00:52:42.234
<v Speaker 2>don't see too much in the Kubernetes world

00:52:42.234 --> 00:52:44.315
<v Speaker 2>today. You generally go and sit down, and

00:52:44.315 --> 00:52:47.370
<v Speaker 2>then you can provide some grace period seconds

00:52:47.849 --> 00:52:49.290
<v Speaker 2>for your application.

00:52:49.609 --> 00:52:51.450
<v Speaker 2>And you can factor in how long you

00:52:51.450 --> 00:52:54.250
<v Speaker 2>want to wait for your application to recover

00:52:54.250 --> 00:52:55.370
<v Speaker 2>before you

00:52:55.770 --> 00:52:58.170
<v Speaker 2>validate your hypothesis or come to the final

00:52:58.170 --> 00:53:00.650
<v Speaker 2>conclusion around what happened to your app.

00:53:01.125 --> 00:53:02.805
<v Speaker 2>By that, let me elaborate.

00:53:03.205 --> 00:53:07.045
<v Speaker 2>Litmus allows you to provide something called as

00:53:07.685 --> 00:53:08.965
<v Speaker 2>status check

00:53:08.965 --> 00:53:12.725
<v Speaker 2>timeouts. I'm just opening up the API specification

00:53:12.725 --> 00:53:15.285
<v Speaker 2>for Litmus or rather what all you can

00:53:15.285 --> 00:53:17.520
<v Speaker 2>provide in the Litmus Chaos engine

00:53:18.400 --> 00:53:21.440
<v Speaker 2>resource, the Chaos custom resource. There is something

00:53:21.440 --> 00:53:23.280
<v Speaker 2>called as the

00:53:23.600 --> 00:53:24.480
<v Speaker 2>status

00:53:24.480 --> 00:53:25.760
<v Speaker 2>check timeout.

00:53:26.640 --> 00:53:28.640
<v Speaker 2>It's essentially how long do you want for

00:53:28.640 --> 00:53:31.040
<v Speaker 2>your application wait for your application to recover

00:53:31.525 --> 00:53:32.325
<v Speaker 2>before

00:53:32.325 --> 00:53:34.485
<v Speaker 2>you actually call out the experiment as a

00:53:34.485 --> 00:53:36.645
<v Speaker 2>failure or as a success. So these are

00:53:36.645 --> 00:53:37.845
<v Speaker 2>things that you can,

00:53:38.885 --> 00:53:42.005
<v Speaker 2>tune where actually running your experiment depending upon

00:53:42.005 --> 00:53:44.005
<v Speaker 2>your use case. What is the nature of

00:53:44.005 --> 00:53:46.645
<v Speaker 2>your application? What are its dependencies? For example,

00:53:46.645 --> 00:53:48.940
<v Speaker 2>sometimes you stateful applications which

00:53:49.260 --> 00:53:50.540
<v Speaker 2>need more TVs.

00:53:50.700 --> 00:53:53.180
<v Speaker 2>So you might delete them on one node.

00:53:53.180 --> 00:53:55.340
<v Speaker 2>It has to get rescheduled on another node,

00:53:55.340 --> 00:53:56.700
<v Speaker 2>but it has to mount the TV before

00:53:56.700 --> 00:53:59.100
<v Speaker 2>it actually comes up. How much time does

00:53:59.100 --> 00:54:01.660
<v Speaker 2>that typically take depends upon your stateful

00:54:01.660 --> 00:54:03.180
<v Speaker 2>storage solution provider.

00:54:03.555 --> 00:54:06.035
<v Speaker 2>There are so many variables depending upon your

00:54:06.035 --> 00:54:09.235
<v Speaker 2>app type and your experiment use case itself.

00:54:09.315 --> 00:54:11.474
<v Speaker 2>So you could choose a lot of things,

00:54:11.474 --> 00:54:12.355
<v Speaker 2>a lot of

00:54:13.395 --> 00:54:16.275
<v Speaker 2>hooks and Litmus to help you arrive at,

00:54:16.435 --> 00:54:17.555
<v Speaker 2>you know, the correct

00:54:18.690 --> 00:54:19.490
<v Speaker 2>result,

00:54:19.490 --> 00:54:21.410
<v Speaker 2>so to say. As far as the injection

00:54:21.410 --> 00:54:23.650
<v Speaker 2>is concerned, with the bot delete experiment, you

00:54:23.650 --> 00:54:25.810
<v Speaker 2>could do force and non you could do

00:54:25.810 --> 00:54:28.609
<v Speaker 2>force deletes and the graceful deletes. We also

00:54:28.609 --> 00:54:30.690
<v Speaker 2>have the container kill experiment where you can

00:54:30.690 --> 00:54:32.609
<v Speaker 2>send the desired signal to see how your

00:54:32.609 --> 00:54:34.325
<v Speaker 2>app or abstracts behave.

00:54:35.045 --> 00:54:36.325
<v Speaker 0>Perfect. Thank you.

00:54:37.204 --> 00:54:39.365
<v Speaker 0>Alright. I'll let you get back to your

00:54:39.365 --> 00:54:40.245
<v Speaker 0>demo now.

00:54:42.005 --> 00:54:44.405
<v Speaker 2>Sure. So this is the demo setup that

00:54:44.405 --> 00:54:46.405
<v Speaker 2>I have. I just wanted to explain it

00:54:47.010 --> 00:54:48.450
<v Speaker 2>for a second before

00:54:48.930 --> 00:54:51.250
<v Speaker 2>delving into the demo itself.

00:54:51.650 --> 00:54:53.570
<v Speaker 2>So I have a cluster in which

00:54:53.810 --> 00:54:55.810
<v Speaker 2>the portal has already been installed,

00:54:56.370 --> 00:54:58.610
<v Speaker 2>and it comes with all the Litmus microservices.

00:54:59.205 --> 00:55:00.965
<v Speaker 2>We have the Litmus agents,

00:55:00.965 --> 00:55:03.285
<v Speaker 2>workflow controller, the kiosk operator,

00:55:03.445 --> 00:55:05.125
<v Speaker 2>and I have a metrics exporter

00:55:05.205 --> 00:55:08.645
<v Speaker 2>and the actual kiosk experiment CRM artifacts.

00:55:09.205 --> 00:55:11.045
<v Speaker 2>There's also monitoring namespace.

00:55:11.045 --> 00:55:13.690
<v Speaker 2>So I'm monitoring the Kafka cluster here, and

00:55:13.690 --> 00:55:16.250
<v Speaker 2>this is also where we'll observe the request

00:55:16.250 --> 00:55:17.370
<v Speaker 2>metrics and

00:55:17.690 --> 00:55:20.570
<v Speaker 2>do what we call as chaos interleaved Grafana

00:55:20.570 --> 00:55:23.210
<v Speaker 2>dashboards. That is it's essentially a Kafka dashboard

00:55:23.210 --> 00:55:26.810
<v Speaker 2>that's also annotated with chaos metrics so you

00:55:26.810 --> 00:55:28.925
<v Speaker 2>know happening to your app when kiosk is

00:55:28.925 --> 00:55:31.005
<v Speaker 2>going on. And coming to the main workload

00:55:31.005 --> 00:55:31.725
<v Speaker 2>itself,

00:55:31.965 --> 00:55:34.525
<v Speaker 2>it's a Kafka cluster. I have three brokers.

00:55:34.525 --> 00:55:36.845
<v Speaker 2>This image actually shows five. I actually have

00:55:36.845 --> 00:55:37.325
<v Speaker 2>three

00:55:37.645 --> 00:55:39.805
<v Speaker 2>along with Zookeeper to maintain state.

00:55:40.329 --> 00:55:42.089
<v Speaker 2>And as

00:55:42.089 --> 00:55:43.770
<v Speaker 2>part of this experiment,

00:55:43.770 --> 00:55:46.170
<v Speaker 2>we are going to create some test load.

00:55:46.170 --> 00:55:48.490
<v Speaker 2>I'm going to set up a very simple

00:55:48.490 --> 00:55:52.250
<v Speaker 2>Kafka producer consumer pair running as two different

00:55:52.250 --> 00:55:53.609
<v Speaker 2>containers in a single pod.

00:55:54.924 --> 00:55:57.565
<v Speaker 2>And we are going to create a message

00:55:57.565 --> 00:55:59.805
<v Speaker 2>stream that has one topic

00:55:59.964 --> 00:56:01.645
<v Speaker 2>with just a single partition,

00:56:01.724 --> 00:56:03.645
<v Speaker 2>but we are going to replicate that partition

00:56:03.645 --> 00:56:05.405
<v Speaker 2>across three brokers.

00:56:06.125 --> 00:56:08.920
<v Speaker 2>So you might all know that going to

00:56:08.920 --> 00:56:11.720
<v Speaker 2>be a partition leader amongst those three brokers.

00:56:11.880 --> 00:56:14.680
<v Speaker 2>It's actually going to handle the data traffic,

00:56:14.680 --> 00:56:15.480
<v Speaker 2>the rights.

00:56:16.200 --> 00:56:18.520
<v Speaker 2>So we are going to identify

00:56:19.000 --> 00:56:19.720
<v Speaker 2>the

00:56:19.960 --> 00:56:23.240
<v Speaker 2>partition leader amongst those three brokers, and we're

00:56:23.240 --> 00:56:23.880
<v Speaker 2>going to kill them.

00:56:24.734 --> 00:56:26.414
<v Speaker 2>Once we kill that, there's going to be

00:56:26.414 --> 00:56:27.375
<v Speaker 2>a failover.

00:56:27.615 --> 00:56:29.375
<v Speaker 2>There's going to be a partition

00:56:30.335 --> 00:56:32.095
<v Speaker 2>a partition leadership

00:56:32.575 --> 00:56:34.414
<v Speaker 2>failover. So there's going to be another broker

00:56:34.414 --> 00:56:36.015
<v Speaker 2>which is going to take up the leadership

00:56:36.015 --> 00:56:36.815
<v Speaker 2>of that partition.

00:56:37.510 --> 00:56:39.750
<v Speaker 2>And the broker that we kill might happen

00:56:39.750 --> 00:56:40.710
<v Speaker 2>to be just

00:56:40.870 --> 00:56:42.710
<v Speaker 2>a partition leader, or it can also be

00:56:42.710 --> 00:56:45.350
<v Speaker 2>the active controller or the controller broker,

00:56:45.510 --> 00:56:47.110
<v Speaker 2>which is actually keeping this

00:56:47.350 --> 00:56:48.950
<v Speaker 2>Kafka cluster together,

00:56:49.030 --> 00:56:51.750
<v Speaker 2>orchestrating failovers, speaking to zookeeper, and all that.

00:56:52.175 --> 00:56:54.815
<v Speaker 2>So depending upon which of those you kill,

00:56:54.895 --> 00:56:56.974
<v Speaker 2>you will will probably see a slight difference

00:56:56.974 --> 00:56:58.895
<v Speaker 2>in the in the experiment execution.

00:56:59.375 --> 00:57:01.615
<v Speaker 2>And what happens when we kill is, of

00:57:01.615 --> 00:57:04.175
<v Speaker 2>course, the failover happens, but the consumer that

00:57:04.175 --> 00:57:05.535
<v Speaker 2>we've created

00:57:05.535 --> 00:57:07.695
<v Speaker 2>here as part of the test load setup

00:57:08.240 --> 00:57:10.960
<v Speaker 2>is configured with a message time out. So

00:57:10.960 --> 00:57:13.520
<v Speaker 2>it has a time out on how

00:57:14.079 --> 00:57:16.080
<v Speaker 2>much time it can wait for before

00:57:16.880 --> 00:57:19.280
<v Speaker 2>it stops receiving IO or data.

00:57:19.599 --> 00:57:22.160
<v Speaker 2>And if there's no data received within the

00:57:22.160 --> 00:57:24.240
<v Speaker 2>time out, it's going to give up and

00:57:23.375 --> 00:57:25.215
<v Speaker 2>the board is actually going to fail.

00:57:26.095 --> 00:57:28.255
<v Speaker 2>And if at all, the failover happened quickly

00:57:28.255 --> 00:57:28.895
<v Speaker 2>enough

00:57:29.295 --> 00:57:32.335
<v Speaker 2>and your your timeout was set correctly for

00:57:32.335 --> 00:57:34.335
<v Speaker 2>this environment, and it depends lot on the

00:57:34.335 --> 00:57:36.320
<v Speaker 2>environment you are running this in. Depends upon

00:57:36.320 --> 00:57:38.720
<v Speaker 2>the storage classes you're using, the network, the

00:57:38.720 --> 00:57:40.800
<v Speaker 2>CNI provider, and so many things like that.

00:57:40.800 --> 00:57:42.960
<v Speaker 2>So we are going to hypothesize about what's

00:57:42.960 --> 00:57:45.040
<v Speaker 2>the right time out. We're going to start

00:57:45.040 --> 00:57:47.040
<v Speaker 2>off with something that's small. We're going to

00:57:47.040 --> 00:57:48.960
<v Speaker 2>we're going to see how the experiment fails

00:57:49.205 --> 00:57:51.445
<v Speaker 2>and what are the information we collect as

00:57:51.445 --> 00:57:52.645
<v Speaker 2>part of the failure.

00:57:52.885 --> 00:57:54.165
<v Speaker 2>And then we are going to do the

00:57:54.165 --> 00:57:56.565
<v Speaker 2>same experiment with the larger time out and

00:57:56.565 --> 00:57:57.525
<v Speaker 2>verify

00:57:57.525 --> 00:58:00.485
<v Speaker 2>our hypothesis of an unbroken message stream.

00:58:01.125 --> 00:58:02.325
<v Speaker 2>Right? And

00:58:02.670 --> 00:58:05.710
<v Speaker 2>the experiment should just continue. The message stream

00:58:05.710 --> 00:58:08.030
<v Speaker 2>should continue. It should not be broken, all

00:58:08.030 --> 00:58:08.590
<v Speaker 2>that.

00:58:09.470 --> 00:58:11.630
<v Speaker 2>But but as we do this experiment, this

00:58:11.630 --> 00:58:13.790
<v Speaker 2>is essentially the use case that I'm going

00:58:13.790 --> 00:58:14.510
<v Speaker 2>to demonstrate.

00:58:15.195 --> 00:58:18.075
<v Speaker 2>Many times, when you do your experiments, it's

00:58:18.075 --> 00:58:20.075
<v Speaker 2>not just your core

00:58:20.475 --> 00:58:22.955
<v Speaker 2>application behavior that you're going to check. You

00:58:22.955 --> 00:58:24.635
<v Speaker 2>may have that as one of your main

00:58:24.635 --> 00:58:25.595
<v Speaker 2>constraints,

00:58:25.675 --> 00:58:27.755
<v Speaker 2>but you also have a few other things

00:58:27.755 --> 00:58:29.835
<v Speaker 2>you want to observe as part of your

00:58:29.835 --> 00:58:30.635
<v Speaker 2>experiment.

00:58:30.635 --> 00:58:33.000
<v Speaker 2>So this is where observability is very important.

00:58:34.040 --> 00:58:36.600
<v Speaker 2>You want to know what's happening to different

00:58:36.600 --> 00:58:38.520
<v Speaker 2>services when you do your experiment,

00:58:38.760 --> 00:58:41.160
<v Speaker 2>and you should be able to visualize that.

00:58:41.400 --> 00:58:43.320
<v Speaker 2>And that's why without observability,

00:58:43.320 --> 00:58:45.974
<v Speaker 2>chaos is like shooting you know, trying to

00:58:45.974 --> 00:58:47.655
<v Speaker 2>shoot a dark cat in a dark room

00:58:47.655 --> 00:58:50.215
<v Speaker 2>kind of a thing. So you need observability.

00:58:50.375 --> 00:58:52.775
<v Speaker 2>What Litmus also provides is the ability to

00:58:52.775 --> 00:58:54.295
<v Speaker 2>consume observability

00:58:54.295 --> 00:58:56.694
<v Speaker 2>information from the outside. That is you could

00:58:57.420 --> 00:58:59.900
<v Speaker 2>look Litmus has the ability to look for

00:58:59.900 --> 00:59:01.980
<v Speaker 2>from it is metrics or the like. For

00:59:01.980 --> 00:59:03.420
<v Speaker 2>example, you could basically

00:59:03.500 --> 00:59:05.660
<v Speaker 2>say, during this experiment

00:59:07.180 --> 00:59:09.180
<v Speaker 2>when I start this experiment and when I

00:59:09.180 --> 00:59:11.260
<v Speaker 2>end this experiment, I expect that there are

00:59:11.260 --> 00:59:14.305
<v Speaker 2>no offline partitions or under replicated partitions.

00:59:14.305 --> 00:59:17.025
<v Speaker 2>During the experiment, when I kill the part,

00:59:17.025 --> 00:59:19.105
<v Speaker 2>the broker, it's possible that I may have

00:59:19.105 --> 00:59:20.065
<v Speaker 2>under replicated

00:59:20.305 --> 00:59:22.705
<v Speaker 2>partitions because one of them is down. But

00:59:22.705 --> 00:59:24.545
<v Speaker 2>when I begin and when I end eventually,

00:59:24.545 --> 00:59:25.905
<v Speaker 2>I want things to be fine. I should

00:59:25.905 --> 00:59:28.180
<v Speaker 2>not have any problems, and I should never

00:59:28.180 --> 00:59:29.940
<v Speaker 2>experience data loss,

00:59:30.660 --> 00:59:32.660
<v Speaker 2>or the data integrity should be maintained. I

00:59:32.660 --> 00:59:34.260
<v Speaker 2>should not have offline partitions.

00:59:34.420 --> 00:59:35.780
<v Speaker 2>All those things are

00:59:36.180 --> 00:59:38.420
<v Speaker 2>auxiliary checks you want to make,

00:59:39.220 --> 00:59:40.820
<v Speaker 2>while the primary constraint is they want to

00:59:40.820 --> 00:59:42.420
<v Speaker 2>see my message stream to be unbroken.

00:59:42.924 --> 00:59:45.005
<v Speaker 2>So these are things you want to factor

00:59:45.005 --> 00:59:46.924
<v Speaker 2>in into your experiment, something that we call

00:59:46.924 --> 00:59:48.925
<v Speaker 2>as declarative hypothesis.

00:59:49.085 --> 00:59:51.484
<v Speaker 2>Many times, you run your experiment as automated

00:59:51.484 --> 00:59:53.565
<v Speaker 2>drums. So you might not be at hand

00:59:53.565 --> 00:59:55.990
<v Speaker 2>always to see what's happened. So you want

00:59:55.990 --> 00:59:57.990
<v Speaker 2>some things to be automated, some checks to

00:59:57.990 --> 01:00:00.390
<v Speaker 2>be automated as well. So we'll do that

01:00:00.390 --> 01:00:01.110
<v Speaker 2>in

01:00:01.510 --> 01:00:02.310
<v Speaker 2>Litmus.

01:00:02.550 --> 01:00:03.670
<v Speaker 2>I will show you how to do that

01:00:03.670 --> 01:00:04.550
<v Speaker 2>in the experiment.

01:00:05.270 --> 01:00:07.350
<v Speaker 2>And all these steps that I mentioned,

01:00:08.265 --> 01:00:10.424
<v Speaker 2>all about the experiment, the prerequisites to set

01:00:10.424 --> 01:00:11.385
<v Speaker 2>up the cluster,

01:00:11.865 --> 01:00:14.345
<v Speaker 2>what the use cases is about, what's our

01:00:14.345 --> 01:00:15.305
<v Speaker 2>hypothesis,

01:00:15.625 --> 01:00:17.385
<v Speaker 2>and what are what are the demo steps,

01:00:17.385 --> 01:00:19.305
<v Speaker 2>all that has been documented

01:00:19.305 --> 01:00:19.944
<v Speaker 2>in

01:00:21.230 --> 01:00:23.310
<v Speaker 2>in here. We we recently ran this as

01:00:23.310 --> 01:00:25.150
<v Speaker 2>a boot one of the boot camp sessions

01:00:25.150 --> 01:00:27.069
<v Speaker 2>during kiosk carnival. So we have all that

01:00:27.069 --> 01:00:29.069
<v Speaker 2>information here, so please feel free to take

01:00:29.069 --> 01:00:30.750
<v Speaker 2>a look at this after we are done.

01:00:31.150 --> 01:00:31.630
<v Speaker 2>Okay.

01:00:32.430 --> 01:00:35.714
<v Speaker 2>So without much more discussion, let me just

01:00:35.714 --> 01:00:36.675
<v Speaker 2>go ahead

01:00:37.075 --> 01:00:37.795
<v Speaker 2>and

01:00:38.994 --> 01:00:41.474
<v Speaker 2>wait. Let me go ahead. I have lost

01:00:41.474 --> 01:00:44.835
<v Speaker 2>my cluster instance here, but don't really mind

01:00:44.835 --> 01:00:48.674
<v Speaker 2>because I have my lens set up

01:00:49.250 --> 01:00:50.930
<v Speaker 2>for the same cluster. So you can see

01:00:50.930 --> 01:00:51.730
<v Speaker 2>I have

01:00:52.770 --> 01:00:54.130
<v Speaker 2>Kafka clusters.

01:00:54.770 --> 01:00:56.130
<v Speaker 2>There's three brokers.

01:00:56.290 --> 01:00:58.130
<v Speaker 2>I have the Kafka exporter already set up

01:00:58.130 --> 01:00:59.250
<v Speaker 2>along with Zookeeper.

01:00:59.970 --> 01:01:02.530
<v Speaker 2>And then I also have the Litmus microservices

01:01:02.530 --> 01:01:03.809
<v Speaker 2>that I mentioned are running.

01:01:04.535 --> 01:01:06.455
<v Speaker 2>And I have a portal here,

01:01:07.095 --> 01:01:09.815
<v Speaker 2>in which I have already done several workflows

01:01:09.815 --> 01:01:11.495
<v Speaker 2>before this. I'm just going to make use

01:01:11.495 --> 01:01:12.615
<v Speaker 2>of the same setup.

01:01:13.735 --> 01:01:15.335
<v Speaker 2>So let me schedule

01:01:15.335 --> 01:01:16.215
<v Speaker 2>this

01:01:16.295 --> 01:01:17.335
<v Speaker 2>experiment around.

01:01:18.170 --> 01:01:19.450
<v Speaker 2>I'm going to select,

01:01:19.930 --> 01:01:22.090
<v Speaker 2>the self clusters. That is we're going to

01:01:22.090 --> 01:01:23.850
<v Speaker 2>do this experiment on the same cluster where

01:01:23.850 --> 01:01:25.370
<v Speaker 2>the portal has been installed.

01:01:26.010 --> 01:01:28.890
<v Speaker 2>I already have my workflow manifest in my

01:01:28.890 --> 01:01:29.690
<v Speaker 2>workspace,

01:01:29.690 --> 01:01:31.845
<v Speaker 2>and I'm going to say that I'm going

01:01:31.845 --> 01:01:33.445
<v Speaker 2>to create my own workflow.

01:01:33.765 --> 01:01:35.205
<v Speaker 2>I'm going to upload

01:01:35.285 --> 01:01:36.245
<v Speaker 2>my YAML.

01:01:39.925 --> 01:01:43.045
<v Speaker 2>So there is a a workflow manifest

01:01:43.125 --> 01:01:45.365
<v Speaker 2>called Kafka WF Multipro.

01:01:45.365 --> 01:01:46.565
<v Speaker 2>I've selected that.

01:01:48.300 --> 01:01:49.740
<v Speaker 2>So here is where

01:01:51.260 --> 01:01:54.620
<v Speaker 2>you see the big manifest. Right? I'll take

01:01:54.620 --> 01:01:56.540
<v Speaker 2>a few seconds to describe this. There was

01:01:56.540 --> 01:01:59.340
<v Speaker 2>a good question sometime back around, can I

01:01:59.340 --> 01:02:02.214
<v Speaker 2>isolate my experiment to particular workflow? So this

01:02:02.214 --> 01:02:03.895
<v Speaker 2>is the section where you do it.

01:02:04.214 --> 01:02:07.015
<v Speaker 2>You provide the namespace of the workflow of

01:02:07.015 --> 01:02:08.135
<v Speaker 2>the workflow,

01:02:08.535 --> 01:02:09.335
<v Speaker 2>some

01:02:09.415 --> 01:02:10.375
<v Speaker 2>filter

01:02:10.375 --> 01:02:11.895
<v Speaker 2>such as the label,

01:02:12.295 --> 01:02:13.575
<v Speaker 2>and what is the app kind.

01:02:14.870 --> 01:02:16.950
<v Speaker 2>Then there's something interesting. It's called as the

01:02:16.950 --> 01:02:19.190
<v Speaker 2>annotation check. I've set it to false here,

01:02:19.190 --> 01:02:20.470
<v Speaker 2>but you can actually turn it on. So

01:02:20.470 --> 01:02:22.710
<v Speaker 2>what this does is, let's say, there were

01:02:22.710 --> 01:02:23.510
<v Speaker 2>multiple

01:02:23.510 --> 01:02:24.550
<v Speaker 2>deployments

01:02:24.550 --> 01:02:27.684
<v Speaker 2>or multiple stateful sets rather, which share the

01:02:27.684 --> 01:02:29.285
<v Speaker 2>same details such as

01:02:29.765 --> 01:02:30.485
<v Speaker 2>a alpha.

01:02:30.885 --> 01:02:32.325
<v Speaker 2>Maybe one of them was

01:02:33.125 --> 01:02:35.445
<v Speaker 2>running with dev image, one was running with

01:02:36.085 --> 01:02:37.125
<v Speaker 2>production image,

01:02:37.684 --> 01:02:39.845
<v Speaker 2>it's running with, you know, a different fix,

01:02:39.845 --> 01:02:40.724
<v Speaker 2>different instrumentation.

01:02:41.070 --> 01:02:43.630
<v Speaker 2>You want to target a specific workload. So

01:02:43.630 --> 01:02:45.550
<v Speaker 2>I can choose to do a second level

01:02:45.550 --> 01:02:48.590
<v Speaker 2>filtering by adding an annotation on the stateful

01:02:48.590 --> 01:02:51.390
<v Speaker 2>set called Litmus chaos dot I o slash

01:02:51.390 --> 01:02:53.950
<v Speaker 2>chaos set to true. And I can set

01:02:53.950 --> 01:02:56.025
<v Speaker 2>this to true. So it's actually going to

01:02:56.025 --> 01:02:56.825
<v Speaker 2>find out

01:02:57.145 --> 01:02:59.865
<v Speaker 2>all these stateful sets that match this criteria,

01:02:59.865 --> 01:03:01.224
<v Speaker 2>but it's also going to check which of

01:03:01.224 --> 01:03:02.585
<v Speaker 2>them has the annotation.

01:03:02.825 --> 01:03:04.585
<v Speaker 2>And then it's only going to target that

01:03:04.585 --> 01:03:05.865
<v Speaker 2>particular app.

01:03:06.425 --> 01:03:08.665
<v Speaker 2>And, I'm using the service account, call it

01:03:08.665 --> 01:03:10.990
<v Speaker 2>as admin, to run this experiment.

01:03:11.870 --> 01:03:15.070
<v Speaker 2>And the chaos engine, which is, what I'm

01:03:15.070 --> 01:03:17.550
<v Speaker 2>talking about, also has a way for you

01:03:17.550 --> 01:03:19.870
<v Speaker 2>to specify whether you want monitoring turned on

01:03:19.870 --> 01:03:21.070
<v Speaker 2>or turned off.

01:03:21.470 --> 01:03:22.910
<v Speaker 2>So I have a Kafka

01:03:23.214 --> 01:03:25.775
<v Speaker 2>cluster dashboard here on my Grafana. I have

01:03:25.775 --> 01:03:28.335
<v Speaker 2>used the standard JMX exporter dashboard,

01:03:28.415 --> 01:03:31.295
<v Speaker 2>and we've just instrumented it with Litmus annotations.

01:03:31.295 --> 01:03:33.535
<v Speaker 2>So whenever chaos happens, you will see,

01:03:34.015 --> 01:03:35.535
<v Speaker 2>those annotations appearing here.

01:03:36.260 --> 01:03:37.940
<v Speaker 2>And, if I want,

01:03:38.260 --> 01:03:40.099
<v Speaker 2>this monitoring to be enabled on a per

01:03:40.099 --> 01:03:42.180
<v Speaker 2>experiment basis, I can choose to send the

01:03:42.180 --> 01:03:43.540
<v Speaker 2>monitoring through,

01:03:43.540 --> 01:03:45.060
<v Speaker 2>or I can turn it off.

01:03:45.940 --> 01:03:48.339
<v Speaker 2>And you can see this is the hypothesis

01:03:48.339 --> 01:03:51.855
<v Speaker 2>I mentioned. So right at the beginning and

01:03:51.855 --> 01:03:53.375
<v Speaker 2>at the end of the experiment,

01:03:53.535 --> 01:03:56.095
<v Speaker 2>we don't want any under replicated partitions.

01:03:56.095 --> 01:03:58.255
<v Speaker 2>So I'm querying a Prometheus

01:03:58.255 --> 01:04:00.815
<v Speaker 2>server, which is at this endpoint, and this

01:04:00.815 --> 01:04:02.415
<v Speaker 2>is the query that I'm going to run.

01:04:02.920 --> 01:04:05.560
<v Speaker 2>And I'm, going to do some comparison. I'm

01:04:05.560 --> 01:04:07.240
<v Speaker 2>going to check the deviation.

01:04:07.240 --> 01:04:09.160
<v Speaker 2>I'm going to look for the desired status

01:04:09.160 --> 01:04:09.720
<v Speaker 2>here.

01:04:10.040 --> 01:04:12.280
<v Speaker 2>Edge mode for a probe, and we call

01:04:12.280 --> 01:04:15.480
<v Speaker 2>these probes on the, declarative hypothesis.

01:04:15.480 --> 01:04:16.680
<v Speaker 2>Probes are called probes.

01:04:17.244 --> 01:04:20.685
<v Speaker 2>Probes can run-in different modes. Edge indicates that

01:04:20.685 --> 01:04:22.605
<v Speaker 2>it is going from the beginning and end

01:04:22.605 --> 01:04:23.565
<v Speaker 2>of the experiment.

01:04:24.445 --> 01:04:26.685
<v Speaker 2>And we have another probe.

01:04:26.925 --> 01:04:28.925
<v Speaker 2>It's the same Prometheus probe. I have a

01:04:28.925 --> 01:04:29.724
<v Speaker 2>different metric here,

01:04:30.460 --> 01:04:32.060
<v Speaker 2>not just at the beginning and at the

01:04:32.060 --> 01:04:33.980
<v Speaker 2>end, but through the experiment duration, I don't

01:04:33.980 --> 01:04:35.580
<v Speaker 2>want any offline partitions.

01:04:35.820 --> 01:04:37.580
<v Speaker 2>And this is going to be continuous more.

01:04:37.580 --> 01:04:39.020
<v Speaker 2>So even as the chaos occurs, we are

01:04:39.020 --> 01:04:41.020
<v Speaker 2>going to validate this. There are some run

01:04:41.020 --> 01:04:42.700
<v Speaker 2>properties as you can see, as you could

01:04:42.700 --> 01:04:43.420
<v Speaker 2>imagine.

01:04:43.580 --> 01:04:46.205
<v Speaker 2>These are the polling intervals for this probe

01:04:46.205 --> 01:04:47.565
<v Speaker 2>to get executed

01:04:47.725 --> 01:04:49.085
<v Speaker 2>and characteristics

01:04:49.085 --> 01:04:51.565
<v Speaker 2>for retrying that if there's a failure.

01:04:52.525 --> 01:04:54.605
<v Speaker 2>There's also an other probe, which is called

01:04:54.605 --> 01:04:56.525
<v Speaker 2>as a command probe, where you can see

01:04:56.525 --> 01:04:58.605
<v Speaker 2>I'm running a cube CTL command,

01:04:58.845 --> 01:05:01.670
<v Speaker 2>which is something that is telling you that

01:05:02.390 --> 01:05:05.510
<v Speaker 2>a pod which has this label, Kafka liveness,

01:05:05.510 --> 01:05:07.670
<v Speaker 2>which is essentially the load pod which is

01:05:07.670 --> 01:05:10.790
<v Speaker 2>being brought up, should have the consumer

01:05:10.790 --> 01:05:14.310
<v Speaker 2>container always ready through the experiment duration

01:05:14.715 --> 01:05:16.555
<v Speaker 2>during the chaos period.

01:05:17.035 --> 01:05:17.675
<v Speaker 2>And

01:05:17.835 --> 01:05:18.635
<v Speaker 2>that's

01:05:18.715 --> 01:05:21.035
<v Speaker 2>the indication that the message stream is unbroken

01:05:21.035 --> 01:05:22.955
<v Speaker 2>for me. So I have all these probes

01:05:22.955 --> 01:05:25.835
<v Speaker 2>set up. Then I have some information about

01:05:25.835 --> 01:05:28.715
<v Speaker 2>the Kafka deployment itself, what's the service name,

01:05:28.715 --> 01:05:29.915
<v Speaker 2>what's the Zookeeper details,

01:05:30.810 --> 01:05:32.570
<v Speaker 2>how do I want to kill, all that

01:05:32.570 --> 01:05:35.290
<v Speaker 2>information is provided here in the chaos engine.

01:05:35.930 --> 01:05:37.930
<v Speaker 2>So this is the chaos engine.

01:05:38.650 --> 01:05:40.650
<v Speaker 2>Once I'm happy with what I have, I'll

01:05:40.650 --> 01:05:41.850
<v Speaker 2>go to the next step.

01:05:42.330 --> 01:05:43.370
<v Speaker 2>So in Litmus,

01:05:43.775 --> 01:05:44.815
<v Speaker 2>we define

01:05:45.455 --> 01:05:48.015
<v Speaker 2>or we enable what's called as resiliency

01:05:48.015 --> 01:05:48.895
<v Speaker 2>grading.

01:05:49.135 --> 01:05:51.295
<v Speaker 2>So this workflow just has one experiment, but

01:05:51.295 --> 01:05:52.895
<v Speaker 2>I could choose to have more than one

01:05:52.895 --> 01:05:53.695
<v Speaker 2>experiment,

01:05:54.335 --> 01:05:56.575
<v Speaker 2>in which case, I can assign some criticality

01:05:56.575 --> 01:05:58.740
<v Speaker 2>to those experiments. For example, I'm doing the

01:05:58.740 --> 01:06:00.660
<v Speaker 2>part failure with 10 points, but I might

01:06:00.660 --> 01:06:02.340
<v Speaker 2>just be doing a network loss with seven

01:06:02.340 --> 01:06:02.900
<v Speaker 2>points.

01:06:03.140 --> 01:06:05.060
<v Speaker 2>Depends upon how much the experiment means to

01:06:05.060 --> 01:06:07.700
<v Speaker 2>you, which is also reflective of how much

01:06:07.700 --> 01:06:10.340
<v Speaker 2>your application is already in place already mature

01:06:10.340 --> 01:06:11.940
<v Speaker 2>to take those experiments.

01:06:12.355 --> 01:06:14.515
<v Speaker 2>So I could choose the weights for the

01:06:14.515 --> 01:06:15.635
<v Speaker 2>individual experiments.

01:06:16.035 --> 01:06:17.715
<v Speaker 2>And, eventually, this will help me get a

01:06:17.715 --> 01:06:20.755
<v Speaker 2>resilience score for this workflow,

01:06:20.755 --> 01:06:23.155
<v Speaker 2>which is essentially a ratio of

01:06:23.395 --> 01:06:26.835
<v Speaker 2>weight into the experiment success points divided by

01:06:26.835 --> 01:06:27.795
<v Speaker 2>the total points.

01:06:28.400 --> 01:06:30.560
<v Speaker 2>Right? And that is something you can compare,

01:06:30.560 --> 01:06:32.480
<v Speaker 2>release on release, build on build to see

01:06:32.480 --> 01:06:34.720
<v Speaker 2>what's happening with your application and how much

01:06:34.720 --> 01:06:36.480
<v Speaker 2>you are becoming more resilient.

01:06:36.960 --> 01:06:38.960
<v Speaker 2>I just have one experiment, so I'm going

01:06:38.960 --> 01:06:40.080
<v Speaker 2>to select all points.

01:06:41.325 --> 01:06:43.325
<v Speaker 2>Have an option to schedule experiment

01:06:43.405 --> 01:06:44.205
<v Speaker 2>once

01:06:44.205 --> 01:06:47.085
<v Speaker 2>or repeat it multiple times according to a

01:06:47.085 --> 01:06:47.725
<v Speaker 2>schedule.

01:06:48.045 --> 01:06:49.725
<v Speaker 2>I'm going to just do it once.

01:06:50.925 --> 01:06:51.565
<v Speaker 2>And,

01:06:51.805 --> 01:06:53.645
<v Speaker 2>yeah, that's it. And

01:06:54.365 --> 01:06:56.125
<v Speaker 2>if I did not show it to you

01:06:56.125 --> 01:06:56.525
<v Speaker 2>clearly,

01:06:57.150 --> 01:07:00.270
<v Speaker 2>this experiment is now being run with,

01:07:02.990 --> 01:07:05.550
<v Speaker 2>I think, something like seventy five seconds,

01:07:05.950 --> 01:07:07.150
<v Speaker 2>if I'm not wrong.

01:07:08.990 --> 01:07:11.789
<v Speaker 2>Yeah. So this is something that works on

01:07:11.789 --> 01:07:12.510
<v Speaker 2>this cluster.

01:07:13.445 --> 01:07:15.765
<v Speaker 2>I can repeat this experiment. I actually wanted

01:07:15.765 --> 01:07:17.285
<v Speaker 2>to do this experiment with a lesser time

01:07:17.285 --> 01:07:19.285
<v Speaker 2>out, but I just got started.

01:07:20.085 --> 01:07:22.725
<v Speaker 2>This time out is actually good enough in

01:07:22.725 --> 01:07:23.445
<v Speaker 2>this case

01:07:24.005 --> 01:07:26.085
<v Speaker 2>on this Google cluster that I'm running. So

01:07:26.085 --> 01:07:28.085
<v Speaker 2>the experiment is expected to pass, and we'll

01:07:28.085 --> 01:07:30.860
<v Speaker 2>see how that success is reflected in the

01:07:30.860 --> 01:07:33.260
<v Speaker 2>different resources, kiosk resources.

01:07:33.900 --> 01:07:35.900
<v Speaker 2>But if you lower that time, it's actually

01:07:35.900 --> 01:07:38.140
<v Speaker 2>going to fail. So I think let's take

01:07:38.140 --> 01:07:40.140
<v Speaker 2>a look at the success case first today.

01:07:40.540 --> 01:07:42.060
<v Speaker 2>Once your workflow is running,

01:07:42.935 --> 01:07:45.095
<v Speaker 2>you can see the visualization,

01:07:45.095 --> 01:07:45.975
<v Speaker 2>the progress.

01:07:46.535 --> 01:07:48.935
<v Speaker 2>So we just pull the chaos experiment here,

01:07:48.935 --> 01:07:51.095
<v Speaker 2>and then it started doing the chaos.

01:07:51.335 --> 01:07:53.095
<v Speaker 2>If you go to this lens setup, you

01:07:53.095 --> 01:07:55.095
<v Speaker 2>can see some parts being brought up. So

01:07:55.095 --> 01:07:57.095
<v Speaker 2>the Kafka broker part for you that you

01:07:57.095 --> 01:08:00.290
<v Speaker 2>see here is actually the experiment part that

01:08:00.290 --> 01:08:02.690
<v Speaker 2>has been brought up to run the chaos

01:08:02.690 --> 01:08:03.810
<v Speaker 2>business logic.

01:08:04.370 --> 01:08:07.250
<v Speaker 2>Right? And it actually started a liveness part

01:08:07.250 --> 01:08:09.170
<v Speaker 2>here, which is the test flow.

01:08:09.490 --> 01:08:10.370
<v Speaker 2>And

01:08:10.755 --> 01:08:13.155
<v Speaker 2>I can basically show you what

01:08:13.315 --> 01:08:15.555
<v Speaker 2>that is going to throw out. There are

01:08:15.555 --> 01:08:18.114
<v Speaker 2>three containers. I'm just going to show the

01:08:18.114 --> 01:08:19.074
<v Speaker 2>Kafka consumer.

01:08:23.760 --> 01:08:26.560
<v Speaker 2>It's basically a very, very simple message stream.

01:08:26.560 --> 01:08:28.240
<v Speaker 2>You can see that it is just going

01:08:28.240 --> 01:08:30.720
<v Speaker 2>to print a string and with and time

01:08:30.720 --> 01:08:31.439
<v Speaker 2>stamp.

01:08:31.600 --> 01:08:34.640
<v Speaker 2>It identified the leader broker, the partition leader

01:08:34.640 --> 01:08:36.080
<v Speaker 2>to be Kafka one, so you can actually

01:08:36.080 --> 01:08:37.520
<v Speaker 2>see that this is going down.

01:08:38.345 --> 01:08:40.585
<v Speaker 2>And it has a readiness probe, so it's

01:08:40.585 --> 01:08:42.104
<v Speaker 2>actually going to take some time before it

01:08:42.104 --> 01:08:43.225
<v Speaker 2>actually comes up.

01:08:43.625 --> 01:08:45.705
<v Speaker 2>Right? In that period, we want we don't

01:08:45.705 --> 01:08:47.465
<v Speaker 2>we don't want this container

01:08:47.465 --> 01:08:49.145
<v Speaker 2>to give up. We don't want the consumer

01:08:49.145 --> 01:08:50.825
<v Speaker 2>to give up and throw an exception saying

01:08:50.825 --> 01:08:52.505
<v Speaker 2>the timeout has been exceeded. It has to

01:08:52.505 --> 01:08:53.625
<v Speaker 2>pause and then continue.

01:08:54.079 --> 01:08:55.439
<v Speaker 2>That's our hypothesis.

01:08:55.760 --> 01:08:57.760
<v Speaker 2>And along the way, verify a host of

01:08:57.760 --> 01:09:00.399
<v Speaker 2>other things, offline partitions, and particular partitions, and

01:09:00.399 --> 01:09:02.479
<v Speaker 2>all that. You can see seventy five seconds

01:09:02.479 --> 01:09:04.800
<v Speaker 2>was good enough. So it's a pretty slow

01:09:04.800 --> 01:09:06.399
<v Speaker 2>setup. That's why I had to give a

01:09:06.399 --> 01:09:09.594
<v Speaker 2>bigger timeout. The message stream is actually continuing.

01:09:09.594 --> 01:09:11.434
<v Speaker 2>As you can see, it's not broken.

01:09:11.515 --> 01:09:14.635
<v Speaker 2>So that's good news because you got your

01:09:15.034 --> 01:09:16.715
<v Speaker 2>time out right in your first chart. The

01:09:16.715 --> 01:09:19.194
<v Speaker 2>hypothesis was validated, but often, it doesn't happen

01:09:19.194 --> 01:09:22.234
<v Speaker 2>like this. You have to play around a

01:09:22.234 --> 01:09:24.950
<v Speaker 2>little bit in order to actually come to

01:09:24.950 --> 01:09:25.990
<v Speaker 2>the right conclusion.

01:09:26.390 --> 01:09:28.229
<v Speaker 2>So I'm talking in the perspective of you

01:09:28.229 --> 01:09:30.310
<v Speaker 2>running chaos experiments to identify what is a

01:09:30.310 --> 01:09:32.470
<v Speaker 2>good deployment attribute. But just if you just

01:09:32.470 --> 01:09:33.590
<v Speaker 2>flip this logic,

01:09:34.150 --> 01:09:35.990
<v Speaker 2>you could you could run this on production,

01:09:35.990 --> 01:09:38.055
<v Speaker 2>and you could just to find out if

01:09:38.055 --> 01:09:40.295
<v Speaker 2>the things are all working good, what worked

01:09:40.295 --> 01:09:42.534
<v Speaker 2>earlier, and does it continue to work today,

01:09:42.694 --> 01:09:44.694
<v Speaker 2>all of that stuff. So

01:09:45.255 --> 01:09:47.494
<v Speaker 2>you can see the Kafka

01:09:47.654 --> 01:09:49.335
<v Speaker 2>pods here. The

01:09:49.495 --> 01:09:51.415
<v Speaker 2>the pod is going to come up. It

01:09:51.050 --> 01:09:53.130
<v Speaker 2>has been restored its original state.

01:09:53.690 --> 01:09:55.450
<v Speaker 2>And while all this is happening,

01:09:55.930 --> 01:09:57.610
<v Speaker 2>if you take a look at the the

01:09:57.610 --> 01:09:58.490
<v Speaker 2>Kafka

01:10:00.170 --> 01:10:02.890
<v Speaker 2>Grafana dashboard, you can see this red area

01:10:02.890 --> 01:10:05.450
<v Speaker 2>here. It is actually indicating the period of

01:10:05.450 --> 01:10:05.850
<v Speaker 2>chaos.

01:10:06.465 --> 01:10:09.105
<v Speaker 2>So while chaos is happening, you just have

01:10:09.505 --> 01:10:11.585
<v Speaker 2>two brokers. You don't have three. So you

01:10:11.585 --> 01:10:13.745
<v Speaker 2>have some other replicated partitions,

01:10:13.905 --> 01:10:16.305
<v Speaker 2>which will and did eventually recover when you

01:10:16.305 --> 01:10:17.425
<v Speaker 2>have all the brokers.

01:10:18.305 --> 01:10:19.985
<v Speaker 2>And you could see the

01:10:20.440 --> 01:10:22.920
<v Speaker 2>the broker count. It assumed the the broker

01:10:22.920 --> 01:10:25.400
<v Speaker 2>that was killed probably happened to be the

01:10:25.400 --> 01:10:27.400
<v Speaker 2>active controllers. We did not get a broker

01:10:27.400 --> 01:10:29.719
<v Speaker 2>count value here, but it's resumed after that.

01:10:29.880 --> 01:10:32.360
<v Speaker 2>You can also get these annotations on all

01:10:32.360 --> 01:10:34.360
<v Speaker 2>your panels if you do it as a

01:10:34.360 --> 01:10:35.160
<v Speaker 2>refund annotation.

01:10:36.005 --> 01:10:38.885
<v Speaker 2>So you you can identify what happened during

01:10:38.885 --> 01:10:40.405
<v Speaker 2>your your chaos,

01:10:41.125 --> 01:10:41.844
<v Speaker 2>what

01:10:42.645 --> 01:10:45.845
<v Speaker 2>metric did, what increased, all that information, you

01:10:45.845 --> 01:10:46.804
<v Speaker 2>can find it.

01:10:47.125 --> 01:10:49.525
<v Speaker 2>Right? And we have done this a few

01:10:49.525 --> 01:10:50.804
<v Speaker 2>times over the

01:10:51.125 --> 01:10:53.940
<v Speaker 2>last few hours, so you can actually see

01:10:53.940 --> 01:10:54.500
<v Speaker 2>that

01:10:55.060 --> 01:10:57.460
<v Speaker 2>done across multiple times. So if you have

01:10:57.460 --> 01:10:59.060
<v Speaker 2>not been on your system or you've you've

01:10:59.060 --> 01:11:00.980
<v Speaker 2>been away and want to find out what

01:11:00.980 --> 01:11:01.540
<v Speaker 2>happened

01:11:02.020 --> 01:11:04.180
<v Speaker 2>when you went away and when chaos was

01:11:04.180 --> 01:11:04.980
<v Speaker 2>executed,

01:11:05.060 --> 01:11:06.500
<v Speaker 2>what were the metrics? You can you can

01:11:06.500 --> 01:11:09.145
<v Speaker 2>use this. This is what we call as

01:11:10.185 --> 01:11:13.305
<v Speaker 2>interleaved dashboards, chaos interleaved app dashboards.

01:11:13.625 --> 01:11:14.585
<v Speaker 2>And the

01:11:14.985 --> 01:11:17.065
<v Speaker 2>metrics are something that you can find. There

01:11:17.065 --> 01:11:18.505
<v Speaker 2>are a host of other metric. I just

01:11:18.505 --> 01:11:20.745
<v Speaker 2>use the request chaos experiments to obtain this

01:11:20.745 --> 01:11:23.270
<v Speaker 2>annotations, but there are also other experiments that

01:11:23.270 --> 01:11:26.310
<v Speaker 2>you could make use of to construct dashboards

01:11:26.310 --> 01:11:27.670
<v Speaker 2>of your choice. And

01:11:29.030 --> 01:11:31.190
<v Speaker 2>with that, let's take a quick look at

01:11:31.190 --> 01:11:33.910
<v Speaker 2>what happened to the experiment part. So the

01:11:33.910 --> 01:11:36.310
<v Speaker 2>experiment part is here. It's actually completed.

01:11:37.245 --> 01:11:37.804
<v Speaker 2>And

01:11:38.605 --> 01:11:39.724
<v Speaker 2>I used

01:11:40.045 --> 01:11:42.925
<v Speaker 2>a job cleanup policy of retain. So I

01:11:42.925 --> 01:11:44.204
<v Speaker 2>I can choose the

01:11:44.925 --> 01:11:47.005
<v Speaker 2>choose for Litmus parts to be removed at

01:11:47.005 --> 01:11:48.925
<v Speaker 2>the end of chaos, or I can choose

01:11:48.925 --> 01:11:51.645
<v Speaker 2>for them to remain in completed state for

01:11:51.220 --> 01:11:53.219
<v Speaker 2>me to go and check what has happened.

01:11:53.380 --> 01:11:54.980
<v Speaker 2>So these are the pods. And if you

01:11:54.980 --> 01:11:57.140
<v Speaker 2>just scroll up, you will actually see that

01:11:57.140 --> 01:11:59.460
<v Speaker 2>it look for some default checks whether the

01:11:59.460 --> 01:12:02.260
<v Speaker 2>application is alive before starting the chaos.

01:12:02.500 --> 01:12:05.835
<v Speaker 2>And after doing the chaos or doing chaos,

01:12:05.835 --> 01:12:08.155
<v Speaker 2>it checked several of these metrics that we

01:12:08.155 --> 01:12:10.155
<v Speaker 2>wanted it to with what we're defined in

01:12:10.155 --> 01:12:13.594
<v Speaker 2>the probes. The lep replicated partitions failed in

01:12:13.594 --> 01:12:16.074
<v Speaker 2>the first check, but we provided some retries

01:12:16.074 --> 01:12:17.114
<v Speaker 2>and timeouts.

01:12:17.114 --> 01:12:17.514
<v Speaker 2>Eventually,

01:12:18.560 --> 01:12:19.679
<v Speaker 2>it succeeded.

01:12:20.000 --> 01:12:22.240
<v Speaker 2>If you want it a more stringent kind

01:12:22.240 --> 01:12:23.840
<v Speaker 2>of a check, you can reduce the timeouts

01:12:23.840 --> 01:12:24.880
<v Speaker 2>and retries.

01:12:25.200 --> 01:12:27.680
<v Speaker 2>And there were no offline partitions. It was

01:12:27.680 --> 01:12:29.040
<v Speaker 2>always available.

01:12:29.600 --> 01:12:30.560
<v Speaker 2>And finally,

01:12:30.720 --> 01:12:33.925
<v Speaker 2>the message stream continuity check probe

01:12:34.965 --> 01:12:36.965
<v Speaker 2>did did succeed eventually.

01:12:37.285 --> 01:12:38.565
<v Speaker 2>So there was

01:12:39.045 --> 01:12:41.285
<v Speaker 2>the consumer part, which it always found to

01:12:41.285 --> 01:12:43.445
<v Speaker 2>be running. So this is something that

01:12:44.085 --> 01:12:44.965
<v Speaker 2>determines

01:12:44.965 --> 01:12:46.405
<v Speaker 2>the the hypothesis.

01:12:47.940 --> 01:12:49.620
<v Speaker 2>So you can run your experiment,

01:12:50.260 --> 01:12:51.940
<v Speaker 2>see what has happened during the course of

01:12:51.940 --> 01:12:55.140
<v Speaker 2>your experiment using the the request portal. So

01:12:55.140 --> 01:12:57.860
<v Speaker 2>request portal is a a cool way to

01:12:57.860 --> 01:13:00.615
<v Speaker 2>see what's happening. Experiments still shows us running

01:13:00.615 --> 01:13:02.935
<v Speaker 2>because it is doing a few post chaos

01:13:02.935 --> 01:13:05.335
<v Speaker 2>checks for post processing operations

01:13:05.895 --> 01:13:08.215
<v Speaker 2>and filling in details into your logs, which

01:13:08.215 --> 01:13:10.534
<v Speaker 2>you will eventually be able to notice.

01:13:10.695 --> 01:13:12.935
<v Speaker 2>So once this ends, you can actually go

01:13:12.935 --> 01:13:15.760
<v Speaker 2>and view your logs. So you have a

01:13:16.720 --> 01:13:19.200
<v Speaker 2>logs button here, which you can always use

01:13:19.200 --> 01:13:21.360
<v Speaker 2>to see the same information similarly to the

01:13:21.360 --> 01:13:23.760
<v Speaker 2>way that you saw the information on Lends.

01:13:24.160 --> 01:13:25.840
<v Speaker 2>So this was about

01:13:26.480 --> 01:13:29.520
<v Speaker 2>how we run the Kafka experiment for a

01:13:29.520 --> 01:13:30.080
<v Speaker 2>success case.

01:13:30.695 --> 01:13:32.375
<v Speaker 2>And I mentioned that

01:13:32.935 --> 01:13:34.855
<v Speaker 2>there is something called the results.

01:13:35.735 --> 01:13:37.895
<v Speaker 2>Let me show that very quickly.

01:13:47.199 --> 01:13:49.520
<v Speaker 2>This actually gets created. Okay. I'm on a

01:13:49.520 --> 01:13:50.559
<v Speaker 2>different setup.

01:13:50.800 --> 01:13:54.159
<v Speaker 2>Let me do this on my actual console.

01:13:55.040 --> 01:13:56.880
<v Speaker 2>Okay. You can do it on Lens as

01:13:56.880 --> 01:13:58.960
<v Speaker 2>well. So there's something called custom resources.

01:13:59.995 --> 01:14:01.675
<v Speaker 2>It was chaos.ivo

01:14:01.675 --> 01:14:04.235
<v Speaker 2>and chaos the result. Yeah. So here it

01:14:04.235 --> 01:14:04.715
<v Speaker 2>is.

01:14:06.235 --> 01:14:07.835
<v Speaker 2>So you can see there's

01:14:08.315 --> 01:14:10.715
<v Speaker 2>the customer source. It has information about what

01:14:10.715 --> 01:14:12.475
<v Speaker 2>happened to your individual probes

01:14:12.900 --> 01:14:15.540
<v Speaker 2>and what happened eventually to your experiment. It

01:14:15.540 --> 01:14:17.060
<v Speaker 2>has the status of

01:14:17.300 --> 01:14:18.820
<v Speaker 2>the experiment currently,

01:14:19.700 --> 01:14:20.340
<v Speaker 2>and

01:14:20.900 --> 01:14:22.740
<v Speaker 2>you will be able to use this information

01:14:22.740 --> 01:14:24.180
<v Speaker 2>to generate some useful

01:14:24.420 --> 01:14:25.300
<v Speaker 2>reports

01:14:25.985 --> 01:14:27.665
<v Speaker 2>to see what has happened with your different

01:14:27.665 --> 01:14:30.064
<v Speaker 2>chaos arms. It has some metadata as well,

01:14:30.145 --> 01:14:32.465
<v Speaker 2>what experiment is running, and what chaos engine

01:14:32.465 --> 01:14:33.584
<v Speaker 2>it belong to.

01:14:33.824 --> 01:14:35.664
<v Speaker 2>All that information is available here.

01:14:36.065 --> 01:14:39.184
<v Speaker 2>So this was about the chaos result,

01:14:39.850 --> 01:14:41.850
<v Speaker 2>and this is how we went ahead and

01:14:41.850 --> 01:14:43.130
<v Speaker 2>ran an experiment.

01:14:43.850 --> 01:14:46.730
<v Speaker 2>So I just can take some questions here

01:14:46.810 --> 01:14:49.210
<v Speaker 2>before I move on to the next part

01:14:49.210 --> 01:14:50.810
<v Speaker 2>of the demo. I can do the failure

01:14:50.810 --> 01:14:52.410
<v Speaker 2>on for this, but it's going to be

01:14:52.410 --> 01:14:54.055
<v Speaker 2>the same. A couple of probes are going

01:14:54.055 --> 01:14:55.815
<v Speaker 2>to fail, and the chaos result is going

01:14:55.815 --> 01:14:58.215
<v Speaker 2>to show up as fail instead of fast.

01:14:59.575 --> 01:15:02.775
<v Speaker 2>So that's about how you can run a

01:15:02.775 --> 01:15:03.895
<v Speaker 2>chaos experiment

01:15:04.695 --> 01:15:07.095
<v Speaker 2>using the portal. This is how you can

01:15:07.095 --> 01:15:09.969
<v Speaker 2>define your hypothesis using probes and how you

01:15:09.969 --> 01:15:12.210
<v Speaker 2>can visualize things using the portal.

01:15:13.170 --> 01:15:13.809
<v Speaker 2>And

01:15:14.530 --> 01:15:16.770
<v Speaker 2>you also saw the kiosk result. Yeah. That's

01:15:16.770 --> 01:15:18.929
<v Speaker 2>all I had to show as part of

01:15:18.929 --> 01:15:20.130
<v Speaker 2>this demonstration.

01:15:20.935 --> 01:15:23.575
<v Speaker 2>And I can actually go ahead and show

01:15:23.575 --> 01:15:24.135
<v Speaker 2>the

01:15:24.615 --> 01:15:25.335
<v Speaker 2>next

01:15:25.895 --> 01:15:27.255
<v Speaker 2>chaos experiment,

01:15:27.335 --> 01:15:30.615
<v Speaker 2>is going to do chaos not on Kubernetes

01:15:30.615 --> 01:15:31.415
<v Speaker 2>pod,

01:15:31.735 --> 01:15:33.095
<v Speaker 2>but instead on

01:15:33.575 --> 01:15:34.695
<v Speaker 2>an easy to instance,

01:15:35.440 --> 01:15:38.560
<v Speaker 2>right, on Amazon Cloud. So Omar mentioned during

01:15:38.560 --> 01:15:39.679
<v Speaker 2>his talk that

01:15:40.080 --> 01:15:43.600
<v Speaker 2>you could provide details of your cloud,

01:15:43.600 --> 01:15:45.840
<v Speaker 2>the credentials, and it's going to use the

01:15:45.840 --> 01:15:48.560
<v Speaker 2>API provided by the cloud provider and go

01:15:48.560 --> 01:15:50.994
<v Speaker 2>ahead and inject some chaos. Getting started on

01:15:50.994 --> 01:15:51.954
<v Speaker 2>this stream,

01:15:52.434 --> 01:15:54.675
<v Speaker 2>not Kubernetes chaos, but we do have a

01:15:54.675 --> 01:15:56.914
<v Speaker 2>few useful experiments that you can already start.

01:15:57.155 --> 01:15:59.155
<v Speaker 2>But before I actually go ahead and show

01:15:59.155 --> 01:16:00.675
<v Speaker 2>that, I just wanted to,

01:16:01.235 --> 01:16:03.074
<v Speaker 2>you know, take some questions if

01:16:03.795 --> 01:16:05.554
<v Speaker 2>there are any around what we just discussed.

01:16:07.770 --> 01:16:09.050
<v Speaker 2>Yeah. So we have

01:16:09.210 --> 01:16:10.809
<v Speaker 2>the launch, like I mentioned.

01:16:12.409 --> 01:16:14.170
<v Speaker 0>Yeah. I guess there's a a few things

01:16:14.170 --> 01:16:16.570
<v Speaker 0>kind of floating around my head. Like, what's

01:16:16.570 --> 01:16:21.530
<v Speaker 0>in involved in protecting support for additional probes

01:16:20.745 --> 01:16:22.825
<v Speaker 0>beyond, like, the, you know, the Prometheus probe,

01:16:22.825 --> 01:16:24.505
<v Speaker 0>the command probe. Like, you know, if I

01:16:24.505 --> 01:16:25.545
<v Speaker 0>wanted to support,

01:16:26.745 --> 01:16:29.385
<v Speaker 0>maybe taking a look at some logs in

01:16:29.385 --> 01:16:31.785
<v Speaker 0>low key or creating influx DB or even

01:16:31.785 --> 01:16:34.825
<v Speaker 0>reaching out to external systems to understand maybe,

01:16:36.700 --> 01:16:38.380
<v Speaker 0>fee actual user

01:16:38.940 --> 01:16:42.300
<v Speaker 0>feedback or request. Like, are the probes complicated,

01:16:42.300 --> 01:16:43.500
<v Speaker 0>or is there something I can throw together

01:16:43.500 --> 01:16:44.460
<v Speaker 0>pretty quickly?

01:16:46.940 --> 01:16:50.060
<v Speaker 2>Yeah. So the probe documentation is available here.

01:16:50.220 --> 01:16:51.580
<v Speaker 2>You can take a look at the different

01:16:51.580 --> 01:16:52.380
<v Speaker 2>kind of probes.

01:16:52.915 --> 01:16:54.915
<v Speaker 2>We use the Prometheus probe and the command

01:16:54.915 --> 01:16:56.835
<v Speaker 2>probe in our current experiment.

01:16:57.155 --> 01:16:58.755
<v Speaker 2>There are also a few others. There's a

01:16:58.755 --> 01:17:01.315
<v Speaker 2>HTTP probe, which can which you can use

01:17:01.315 --> 01:17:04.115
<v Speaker 2>to get the availability of some downstream applications.

01:17:05.550 --> 01:17:07.629
<v Speaker 2>You could provide the response code,

01:17:07.949 --> 01:17:10.110
<v Speaker 2>and you could do get post

01:17:10.110 --> 01:17:12.349
<v Speaker 2>different kind of HTTP commands.

01:17:12.750 --> 01:17:15.869
<v Speaker 2>And verify if things are good here, there's

01:17:15.869 --> 01:17:17.630
<v Speaker 2>something called as a KTSPRO,

01:17:17.630 --> 01:17:19.630
<v Speaker 2>which is essentially trying to

01:17:20.615 --> 01:17:23.015
<v Speaker 2>get information about Kubernetes resources.

01:17:23.095 --> 01:17:24.375
<v Speaker 2>So there are a lot of custom and

01:17:24.375 --> 01:17:27.335
<v Speaker 2>native resources on your cluster whose status you

01:17:27.335 --> 01:17:29.015
<v Speaker 2>might want to observe,

01:17:29.335 --> 01:17:30.855
<v Speaker 2>especially in the age of,

01:17:31.895 --> 01:17:33.255
<v Speaker 2>you know, operators.

01:17:33.335 --> 01:17:35.150
<v Speaker 2>There are a lot of applications that are

01:17:35.150 --> 01:17:37.790
<v Speaker 2>being managed by operators,

01:17:38.270 --> 01:17:39.710
<v Speaker 2>and you will find a lot of information

01:17:39.710 --> 01:17:42.830
<v Speaker 2>about the health of those applications in CRs

01:17:42.830 --> 01:17:44.510
<v Speaker 2>pertaining to them. So if you want to

01:17:44.510 --> 01:17:45.070
<v Speaker 2>get information

01:17:46.284 --> 01:17:47.804
<v Speaker 2>about those, you can also use

01:17:48.204 --> 01:17:50.604
<v Speaker 2>KTIS probes. But it is a great point,

01:17:50.684 --> 01:17:51.484
<v Speaker 2>David.

01:17:51.724 --> 01:17:54.045
<v Speaker 2>We can always extend these probes. The way

01:17:54.045 --> 01:17:55.644
<v Speaker 2>they are being written is

01:17:56.045 --> 01:17:57.724
<v Speaker 2>we're trying to make it a modular thing

01:17:57.724 --> 01:17:59.724
<v Speaker 2>so you can actually fit in more probes.

01:18:00.290 --> 01:18:03.250
<v Speaker 2>You can have more probe sources or probe

01:18:03.250 --> 01:18:03.970
<v Speaker 2>types.

01:18:04.210 --> 01:18:06.770
<v Speaker 2>You can have probes that are specific

01:18:06.770 --> 01:18:09.410
<v Speaker 2>to some service measures. Say, for example, you

01:18:09.410 --> 01:18:11.570
<v Speaker 2>can have something related to Thanos or Loki.

01:18:12.514 --> 01:18:14.274
<v Speaker 2>Yeah. You you you can create

01:18:14.435 --> 01:18:16.354
<v Speaker 2>probes like that, and

01:18:17.474 --> 01:18:18.835
<v Speaker 2>there there there has been a lot of

01:18:18.835 --> 01:18:21.474
<v Speaker 2>interest in creating new type of probes as

01:18:21.474 --> 01:18:24.034
<v Speaker 2>well as trying to extend this probe framework

01:18:24.034 --> 01:18:24.915
<v Speaker 2>to

01:18:25.449 --> 01:18:27.610
<v Speaker 2>do things like chain the probes and conditional

01:18:27.610 --> 01:18:28.409
<v Speaker 2>probes,

01:18:28.650 --> 01:18:30.809
<v Speaker 2>running some probes on it depending upon the

01:18:30.809 --> 01:18:31.929
<v Speaker 2>result of others,

01:18:32.250 --> 01:18:34.650
<v Speaker 2>and trying to use the output of one

01:18:34.650 --> 01:18:36.650
<v Speaker 2>probe as input in another, which is what

01:18:36.650 --> 01:18:37.690
<v Speaker 2>we're calling as chaining.

01:18:38.325 --> 01:18:41.284
<v Speaker 2>All that is something we are working towards

01:18:41.685 --> 01:18:44.965
<v Speaker 2>to improve this hypothesis validation framework.

01:18:45.445 --> 01:18:46.324
<v Speaker 2>Definitely,

01:18:47.125 --> 01:18:48.565
<v Speaker 2>something to consider,

01:18:48.645 --> 01:18:50.645
<v Speaker 2>and we'll be really happy to take more

01:18:50.645 --> 01:18:51.925
<v Speaker 2>user feedback about this.

01:18:52.710 --> 01:18:55.110
<v Speaker 2>An issue on GitHub would be great.

01:18:55.670 --> 01:18:57.830
<v Speaker 0>Yeah. I think that part of it really

01:18:57.830 --> 01:18:59.910
<v Speaker 0>interesting. You know? I you know, I because

01:18:59.910 --> 01:19:01.670
<v Speaker 0>it's a cloud native project and people are

01:19:01.670 --> 01:19:03.350
<v Speaker 0>running Kubernetes, you know, there are a lot

01:19:03.350 --> 01:19:05.110
<v Speaker 0>of people that are using Prometheus. Right? That

01:19:05.110 --> 01:19:06.790
<v Speaker 0>makes a lot of sense. And why that

01:19:06.790 --> 01:19:08.225
<v Speaker 0>exists as a, you know, one of the

01:19:08.225 --> 01:19:09.344
<v Speaker 0>first set of groups.

01:19:09.905 --> 01:19:12.545
<v Speaker 0>Being with the rise of OpenTelemetry

01:19:12.545 --> 01:19:15.745
<v Speaker 0>and that agnostic layer to where we store

01:19:15.745 --> 01:19:18.065
<v Speaker 0>metrics, you know, a lot more people are

01:19:18.065 --> 01:19:20.480
<v Speaker 0>now starting to look at like, data

01:19:20.480 --> 01:19:22.880
<v Speaker 0>Datadog or Honeycomb and been able to query

01:19:22.880 --> 01:19:25.280
<v Speaker 0>those as part of that probe, think, would

01:19:25.280 --> 01:19:26.480
<v Speaker 0>be really important.

01:19:27.680 --> 01:19:29.440
<v Speaker 0>Okay. Absolutely. What

01:19:29.760 --> 01:19:31.840
<v Speaker 0>if I wanna get rather destructive

01:19:31.875 --> 01:19:34.675
<v Speaker 0>using Litmus skills? Like, actually attacking the Kubernetes

01:19:34.675 --> 01:19:36.515
<v Speaker 0>API server to see what happens to my

01:19:36.515 --> 01:19:37.315
<v Speaker 0>cluster.

01:19:37.395 --> 01:19:39.555
<v Speaker 0>Is that ill advised, or is that something

01:19:39.555 --> 01:19:42.594
<v Speaker 0>that is potentially possible? And I'm curious about

01:19:42.755 --> 01:19:45.315
<v Speaker 0>the way that things are reconciled when if

01:19:45.315 --> 01:19:46.595
<v Speaker 0>I do break the API server.

01:19:48.380 --> 01:19:50.780
<v Speaker 2>Yeah. We've had people try few things like

01:19:50.780 --> 01:19:51.260
<v Speaker 2>that.

01:19:51.739 --> 01:19:52.939
<v Speaker 2>So what happens

01:19:53.260 --> 01:19:55.579
<v Speaker 2>if it's something that's a transient error, like

01:19:55.579 --> 01:19:56.219
<v Speaker 2>you said,

01:19:57.099 --> 01:19:59.900
<v Speaker 2>destroying the I mean, filling the API server

01:19:59.900 --> 01:20:02.219
<v Speaker 2>part for a few seconds or minutes before

01:20:02.219 --> 01:20:04.235
<v Speaker 2>it actually comes back. I think it's something

01:20:04.235 --> 01:20:07.035
<v Speaker 2>that's doable. You might see things sort of

01:20:07.035 --> 01:20:09.595
<v Speaker 2>getting stalled for some time. You might not

01:20:09.595 --> 01:20:10.155
<v Speaker 2>see

01:20:10.795 --> 01:20:13.355
<v Speaker 2>outputs and logs and things like that, but

01:20:13.355 --> 01:20:14.475
<v Speaker 2>they'll eventually

01:20:14.955 --> 01:20:16.955
<v Speaker 2>get filled back once the

01:20:17.910 --> 01:20:20.870
<v Speaker 2>Litmus the Kubernetes control when component is back

01:20:20.870 --> 01:20:22.790
<v Speaker 2>up. So we've had people doing that kind

01:20:22.790 --> 01:20:23.989
<v Speaker 2>of case. But if we want to do

01:20:23.989 --> 01:20:24.630
<v Speaker 2>something

01:20:25.270 --> 01:20:28.070
<v Speaker 2>larger scale, something more destructive for a longer

01:20:28.070 --> 01:20:29.110
<v Speaker 2>period of time,

01:20:29.510 --> 01:20:32.870
<v Speaker 2>something that is being discussed in Litmus circles

01:20:32.870 --> 01:20:33.510
<v Speaker 2>by

01:20:34.225 --> 01:20:36.225
<v Speaker 2>we will be able to or we will

01:20:36.225 --> 01:20:40.145
<v Speaker 2>enable doing chaos on Kubernetes control plane itself

01:20:40.305 --> 01:20:43.344
<v Speaker 2>by staying outside the cluster. The Litmus experiment

01:20:43.344 --> 01:20:45.185
<v Speaker 2>business logic allows you to do that.

01:20:46.140 --> 01:20:47.900
<v Speaker 2>But today, it runs as a pod. There

01:20:47.900 --> 01:20:50.780
<v Speaker 2>are also plans of running it as via

01:20:50.780 --> 01:20:53.020
<v Speaker 2>CLI where you sort of effectively outside the

01:20:53.020 --> 01:20:54.780
<v Speaker 2>cluster. You don't really run as pod,

01:20:55.100 --> 01:20:57.020
<v Speaker 2>but you're still able to go kill things.

01:20:57.020 --> 01:20:58.620
<v Speaker 2>You're using k this API,

01:20:59.265 --> 01:21:01.185
<v Speaker 2>you also have other checks to see if

01:21:01.185 --> 01:21:03.105
<v Speaker 2>your API is not responsive, how how long

01:21:03.105 --> 01:21:05.105
<v Speaker 2>you can wait for the experiment to continue

01:21:05.105 --> 01:21:07.745
<v Speaker 2>to run, then check the status and things

01:21:07.745 --> 01:21:08.385
<v Speaker 2>like that.

01:21:09.025 --> 01:21:11.025
<v Speaker 2>So so you could do it today, but

01:21:11.025 --> 01:21:13.110
<v Speaker 2>only for transient errors. But if you want

01:21:13.110 --> 01:21:14.870
<v Speaker 2>to do it for longer periods of time

01:21:14.870 --> 01:21:17.590
<v Speaker 2>in a much more destructive way, clean Kubernetes

01:21:17.590 --> 01:21:18.469
<v Speaker 2>itself,

01:21:18.950 --> 01:21:21.350
<v Speaker 2>I think that's something that we will enable

01:21:21.350 --> 01:21:23.910
<v Speaker 2>over time. Having said that, there are a

01:21:23.910 --> 01:21:26.950
<v Speaker 2>lot of add ons that people run-in Kubernetes,

01:21:27.275 --> 01:21:28.875
<v Speaker 2>something that you you also you could also

01:21:28.875 --> 01:21:31.354
<v Speaker 2>see on the portal. There's there is a

01:21:31.915 --> 01:21:35.034
<v Speaker 2>category of experiments called SQ components

01:21:35.275 --> 01:21:37.514
<v Speaker 2>or something that the Intuit folks have been

01:21:37.514 --> 01:21:38.394
<v Speaker 2>driving in

01:21:38.875 --> 01:21:42.200
<v Speaker 2>for some for some time, which is essentially

01:21:42.200 --> 01:21:43.960
<v Speaker 2>some add ons that they have in their

01:21:43.960 --> 01:21:45.000
<v Speaker 2>Kubernetes

01:21:45.960 --> 01:21:46.840
<v Speaker 2>clusters.

01:21:46.840 --> 01:21:48.360
<v Speaker 2>So there's some Prometheus

01:21:48.360 --> 01:21:51.640
<v Speaker 2>and some Ingress controllers and Qproxy and few

01:21:51.640 --> 01:21:54.275
<v Speaker 2>things different controller, few things like that. So

01:21:54.275 --> 01:21:55.315
<v Speaker 2>you could actually

01:21:56.435 --> 01:21:59.075
<v Speaker 2>you wouldn't call them as most important, of

01:21:59.075 --> 01:22:00.195
<v Speaker 2>course, queue proxies,

01:22:00.355 --> 01:22:00.995
<v Speaker 2>but

01:22:01.155 --> 01:22:03.475
<v Speaker 2>there are a lot of supportive tools when

01:22:03.475 --> 01:22:05.235
<v Speaker 2>you run your Kubernetes

01:22:05.715 --> 01:22:06.515
<v Speaker 2>workloads,

01:22:06.515 --> 01:22:08.675
<v Speaker 2>when you're bringing up your staging or your

01:22:08.675 --> 01:22:09.315
<v Speaker 2>production.

01:22:09.875 --> 01:22:12.140
<v Speaker 2>It's not only going to contain Kubernetes and

01:22:12.140 --> 01:22:14.780
<v Speaker 2>your business applications, but as a host of

01:22:14.780 --> 01:22:17.340
<v Speaker 2>other things from the CNCF ecosystem that

01:22:17.580 --> 01:22:18.780
<v Speaker 2>form your

01:22:18.940 --> 01:22:21.580
<v Speaker 2>overall framework. It could be observability. It could

01:22:21.580 --> 01:22:23.659
<v Speaker 2>be compliance things. It could be databases. It

01:22:23.659 --> 01:22:26.185
<v Speaker 2>could be so many things. So you could

01:22:26.185 --> 01:22:29.465
<v Speaker 2>use Litmus not just for your core application,

01:22:30.105 --> 01:22:31.385
<v Speaker 2>but you will use it for other infra

01:22:31.385 --> 01:22:33.545
<v Speaker 2>components as well. And if that infra component

01:22:33.545 --> 01:22:36.105
<v Speaker 2>happens to be the Kubernetes control plane itself,

01:22:36.425 --> 01:22:38.105
<v Speaker 2>some of it is possible today, and some

01:22:38.105 --> 01:22:39.545
<v Speaker 2>of it is going to be enabled in

01:22:39.545 --> 01:22:40.105
<v Speaker 2>the future.

01:22:41.350 --> 01:22:44.550
<v Speaker 0>Yeah. Okay. I think that's a really interesting

01:22:44.550 --> 01:22:46.070
<v Speaker 0>thing, like, when there is a component that

01:22:46.070 --> 01:22:48.230
<v Speaker 0>runs as state of of Kubernetes. Because I

01:22:48.230 --> 01:22:50.710
<v Speaker 0>can imagine bringing in, you know, maybe pro

01:22:50.710 --> 01:22:53.270
<v Speaker 0>to even chaos experiments themselves to integrate or

01:22:53.270 --> 01:22:55.954
<v Speaker 0>work with eBPF and really start to do

01:22:55.954 --> 01:22:57.554
<v Speaker 0>some crazy stuff there would be a lot

01:22:57.554 --> 01:22:59.394
<v Speaker 0>of I I don't wanna say fun, but

01:22:59.394 --> 01:23:01.394
<v Speaker 0>it does kinda sound like fun. So

01:23:02.275 --> 01:23:04.114
<v Speaker 2>Yeah. Alright. I think that's the only questions

01:23:04.114 --> 01:23:05.795
<v Speaker 0>I have right now. If you wanna do

01:23:05.795 --> 01:23:07.795
<v Speaker 0>this, the failure demo, and then we can

01:23:08.330 --> 01:23:10.250
<v Speaker 0>we can do a quick demo. I think

01:23:10.250 --> 01:23:11.610
<v Speaker 2>there's

01:23:11.610 --> 01:23:14.650
<v Speaker 2>just one small thing about doing chaos on

01:23:14.650 --> 01:23:16.090
<v Speaker 2>easy two instances.

01:23:16.490 --> 01:23:19.050
<v Speaker 2>I can probably just share that.

01:23:21.455 --> 01:23:23.535
<v Speaker 2>It's probably not going to take too much

01:23:23.535 --> 01:23:24.094
<v Speaker 2>time.

01:23:25.135 --> 01:23:27.615
<v Speaker 2>It's very sim simple, very similar to what

01:23:27.615 --> 01:23:29.935
<v Speaker 2>we did with the Kafka experiment. I'm just

01:23:29.935 --> 01:23:31.775
<v Speaker 2>going to schedule a workflow,

01:23:32.415 --> 01:23:32.975
<v Speaker 2>and

01:23:33.535 --> 01:23:35.055
<v Speaker 2>I create my own workflow.

01:23:39.130 --> 01:23:42.489
<v Speaker 2>And I can upload my YAML that has

01:23:42.490 --> 01:23:44.890
<v Speaker 2>the easy to terminate stuff

01:23:45.450 --> 01:23:45.850
<v Speaker 2>here.

01:23:49.245 --> 01:23:49.885
<v Speaker 2>And

01:23:51.005 --> 01:23:53.085
<v Speaker 2>you can see that this chaos engine is

01:23:53.085 --> 01:23:55.965
<v Speaker 2>basically trying to kill an instance which has

01:23:55.965 --> 01:23:57.965
<v Speaker 2>this ID. It can also kill instances randomly

01:23:57.965 --> 01:24:00.765
<v Speaker 2>if you choose to. Has some details here.

01:24:00.925 --> 01:24:03.420
<v Speaker 2>And this particular experiment also uses a cloud

01:24:03.420 --> 01:24:04.219
<v Speaker 2>secret,

01:24:04.380 --> 01:24:07.099
<v Speaker 2>which I already have on my cluster.

01:24:07.420 --> 01:24:10.139
<v Speaker 2>So there are some secrets that I created

01:24:10.139 --> 01:24:10.780
<v Speaker 2>here

01:24:10.940 --> 01:24:11.739
<v Speaker 2>for

01:24:11.820 --> 01:24:14.059
<v Speaker 2>holding information about my

01:24:14.300 --> 01:24:16.380
<v Speaker 2>and this is on next cluster, I think.

01:24:16.905 --> 01:24:18.665
<v Speaker 2>Alright. I think it's the same one. Yeah.

01:24:18.665 --> 01:24:20.985
<v Speaker 2>So there is a secret which holds information

01:24:20.985 --> 01:24:22.585
<v Speaker 2>about my AWS

01:24:22.665 --> 01:24:23.465
<v Speaker 2>access.

01:24:23.705 --> 01:24:25.465
<v Speaker 2>So I'm just going to go ahead and

01:24:25.465 --> 01:24:26.425
<v Speaker 2>run this,

01:24:26.825 --> 01:24:28.665
<v Speaker 2>and you know about the residency scores.

01:24:31.510 --> 01:24:33.350
<v Speaker 2>Yeah. And it's going to run a new

01:24:33.350 --> 01:24:34.150
<v Speaker 2>experiment.

01:24:35.030 --> 01:24:37.190
<v Speaker 2>And the idea for that is one of

01:24:37.190 --> 01:24:40.230
<v Speaker 2>these plus instance IDs, this one, to be

01:24:40.230 --> 01:24:42.630
<v Speaker 2>precise, is actually going to be stopped for

01:24:42.630 --> 01:24:43.030
<v Speaker 2>some time.

01:24:43.925 --> 01:24:46.325
<v Speaker 2>And this node happens to be a worker

01:24:46.325 --> 01:24:48.885
<v Speaker 2>node of the Kubernetes plus the Kubernetes, Kubernetes

01:24:48.885 --> 01:24:50.325
<v Speaker 2>plus the AWS.

01:24:50.485 --> 01:24:52.085
<v Speaker 2>So in case you want to do something

01:24:52.085 --> 01:24:53.045
<v Speaker 2>more disruptive

01:24:53.525 --> 01:24:55.285
<v Speaker 2>at a workload level, you have

01:24:56.165 --> 01:24:59.125
<v Speaker 2>you do have node related experiments in Litmus,

01:24:59.205 --> 01:25:01.659
<v Speaker 2>which are only using KTAS API, like, we

01:25:01.659 --> 01:25:02.860
<v Speaker 2>have node drain.

01:25:03.179 --> 01:25:05.260
<v Speaker 2>You basically create eviction

01:25:05.420 --> 01:25:07.820
<v Speaker 2>things and push out all the parts to

01:25:07.820 --> 01:25:09.019
<v Speaker 2>effectively simulate

01:25:09.580 --> 01:25:10.539
<v Speaker 2>node shutdown,

01:25:10.699 --> 01:25:12.300
<v Speaker 2>things like that. But if you want to

01:25:12.300 --> 01:25:14.139
<v Speaker 2>go and do something hard resets

01:25:14.275 --> 01:25:16.595
<v Speaker 2>like that at the provider level, you could

01:25:16.595 --> 01:25:17.395
<v Speaker 2>still do that.

01:25:17.795 --> 01:25:18.435
<v Speaker 2>And

01:25:18.915 --> 01:25:20.915
<v Speaker 2>these are experiments that will help you to

01:25:20.915 --> 01:25:21.555
<v Speaker 2>do that.

01:25:22.515 --> 01:25:24.595
<v Speaker 2>So this experiment is going to be in

01:25:24.595 --> 01:25:24.995
<v Speaker 2>progress.

01:25:26.370 --> 01:25:28.050
<v Speaker 2>You could you can see that there are

01:25:28.050 --> 01:25:28.610
<v Speaker 2>some

01:25:28.850 --> 01:25:31.730
<v Speaker 2>easy to terminate experiment parts that have come

01:25:31.730 --> 01:25:33.810
<v Speaker 2>up here, which are actually going to do

01:25:33.810 --> 01:25:35.249
<v Speaker 2>this experiment.

01:25:35.489 --> 01:25:37.250
<v Speaker 2>And in this experiment, the hypothesis is very

01:25:37.250 --> 01:25:39.010
<v Speaker 2>simple. It is going to kill a node.

01:25:39.010 --> 01:25:41.175
<v Speaker 2>I want to see a part, an engine

01:25:41.175 --> 01:25:43.895
<v Speaker 2>x part. This is scheduled successfully, and it

01:25:43.895 --> 01:25:45.735
<v Speaker 2>is coming back to running state.

01:25:45.895 --> 01:25:47.255
<v Speaker 2>More like a vanilla

01:25:49.495 --> 01:25:51.655
<v Speaker 2>vanilla case of a chaos experiment.

01:25:51.895 --> 01:25:52.535
<v Speaker 2>So

01:25:52.935 --> 01:25:55.015
<v Speaker 0>let me go ahead and

01:25:55.920 --> 01:25:58.719
<v Speaker 2>show you my easy to instances.

01:25:58.719 --> 01:26:00.239
<v Speaker 2>I think I need to do this.

01:26:01.520 --> 01:26:03.120
<v Speaker 2>Yeah. You can see that it has been

01:26:03.120 --> 01:26:03.840
<v Speaker 2>stopped,

01:26:04.640 --> 01:26:06.160
<v Speaker 2>and it's going to come back to running

01:26:06.160 --> 01:26:08.719
<v Speaker 2>state. The hypothesis also includes

01:26:08.800 --> 01:26:12.880
<v Speaker 2>to includes to check on whether all the

01:26:11.385 --> 01:26:13.545
<v Speaker 2>all the nodes in this cluster are back

01:26:13.545 --> 01:26:14.985
<v Speaker 2>to running states. We want to leave the

01:26:14.985 --> 01:26:15.624
<v Speaker 2>cluster

01:26:15.945 --> 01:26:18.264
<v Speaker 2>in a similar state as we started it.

01:26:18.264 --> 01:26:20.105
<v Speaker 2>So it's going to check whether things are

01:26:20.105 --> 01:26:21.144
<v Speaker 2>all online

01:26:21.864 --> 01:26:23.465
<v Speaker 2>after it gets back.

01:26:24.010 --> 01:26:24.650
<v Speaker 2>So

01:26:24.889 --> 01:26:28.090
<v Speaker 2>that's essentially what this experiment does. And, yeah,

01:26:28.090 --> 01:26:30.249
<v Speaker 2>you can see that it was brought back.

01:26:30.810 --> 01:26:32.729
<v Speaker 2>So that's very quickly how

01:26:34.090 --> 01:26:36.889
<v Speaker 2>you could run experiments on AWS instances. You

01:26:36.889 --> 01:26:39.395
<v Speaker 2>can also do EBS detach, do something similar

01:26:39.395 --> 01:26:41.155
<v Speaker 2>on Google Cloud as well.

01:26:41.475 --> 01:26:43.795
<v Speaker 2>So yeah. So that's about how you can

01:26:43.795 --> 01:26:46.434
<v Speaker 2>run different guest experience using the portal.

01:26:47.315 --> 01:26:49.074
<v Speaker 2>A lot of these workflows

01:26:49.395 --> 01:26:50.195
<v Speaker 2>and

01:26:50.860 --> 01:26:52.460
<v Speaker 2>the information on how you can set up

01:26:52.460 --> 01:26:54.460
<v Speaker 2>clusters and how you can run these experiments

01:26:54.460 --> 01:26:57.420
<v Speaker 2>are available here. You can share that on

01:26:57.420 --> 01:27:01.340
<v Speaker 2>the chat or on the YouTube, like, video

01:27:01.500 --> 01:27:02.220
<v Speaker 2>comments.

01:27:02.380 --> 01:27:04.780
<v Speaker 2>So please feel free to take a look

01:27:04.780 --> 01:27:05.100
<v Speaker 2>at that.

01:27:06.415 --> 01:27:09.455
<v Speaker 2>That's pretty much what I had done, David,

01:27:09.535 --> 01:27:11.055
<v Speaker 2>in terms of installation

01:27:11.055 --> 01:27:12.975
<v Speaker 2>and then how you can run experiments.

01:27:13.615 --> 01:27:16.895
<v Speaker 0>Awesome. We covered an awful lot there. Really

01:27:16.895 --> 01:27:19.730
<v Speaker 0>interesting stuff. I hope other people kind of

01:27:19.730 --> 01:27:21.250
<v Speaker 0>enjoyed what they see and they go and

01:27:21.250 --> 01:27:23.490
<v Speaker 0>give Litmus a a play in their own.

01:27:25.410 --> 01:27:28.130
<v Speaker 0>Alright. We've gone a little bit over, but

01:27:28.130 --> 01:27:29.650
<v Speaker 0>I'll just give you both the opportunity. Is

01:27:29.650 --> 01:27:31.315
<v Speaker 0>there anything you would to finish on just

01:27:31.315 --> 01:27:33.075
<v Speaker 0>now? Anything you'd like to say before we

01:27:33.075 --> 01:27:35.315
<v Speaker 0>say goodbye to our audience and leave some

01:27:35.315 --> 01:27:35.955
<v Speaker 0>of that?

01:27:39.155 --> 01:27:41.475
<v Speaker 2>Yeah. I think we can stick around for

01:27:41.475 --> 01:27:43.875
<v Speaker 2>a few minutes and take any questions.

01:27:44.995 --> 01:27:45.795
<v Speaker 0>Alright.

01:27:46.035 --> 01:27:47.860
<v Speaker 0>If everyone has any questions, you got thirty

01:27:47.860 --> 01:27:49.620
<v Speaker 0>seconds. Drop them in the chat or forever

01:27:49.620 --> 01:27:52.020
<v Speaker 0>hold your peace. The show notes will include

01:27:52.020 --> 01:27:53.620
<v Speaker 0>all of the links that were covered by

01:27:53.620 --> 01:27:55.540
<v Speaker 0>both Ooma and Kartik. They will be available

01:27:55.540 --> 01:27:57.060
<v Speaker 0>in the YouTube description.

01:27:57.460 --> 01:27:57.620
<v Speaker 0>And,

01:27:59.955 --> 01:28:02.675
<v Speaker 0>yeah, I hope people enjoy Plymouth Tuckness.

01:28:04.755 --> 01:28:06.355
<v Speaker 0>Alright. I don't think we're gonna get any

01:28:06.355 --> 01:28:07.795
<v Speaker 0>more questions. Alright. I just wanna say thank

01:28:07.795 --> 01:28:09.875
<v Speaker 0>you both for joining me today. Really interesting

01:28:09.875 --> 01:28:12.034
<v Speaker 0>project. Lots of really exciting stuff there for

01:28:12.034 --> 01:28:13.990
<v Speaker 0>people to do and play with. The demos

01:28:13.990 --> 01:28:15.910
<v Speaker 0>were were great. It was good to see,

01:28:16.150 --> 01:28:17.990
<v Speaker 0>you know, that, you know, some of those

01:28:17.990 --> 01:28:20.390
<v Speaker 0>experiments can resolve nicely, which I hope we

01:28:20.390 --> 01:28:21.830
<v Speaker 0>all hope. But of course, when they go

01:28:21.830 --> 01:28:23.590
<v Speaker 0>bad, at least we have the visibility of

01:28:23.590 --> 01:28:25.590
<v Speaker 0>the margin and observability. All those other tools

01:28:25.590 --> 01:28:27.605
<v Speaker 0>that we really people to do. Do not

01:28:27.605 --> 01:28:30.005
<v Speaker 0>go unleashing chaos into your clusters when you're

01:28:30.005 --> 01:28:32.005
<v Speaker 0>not ready. Right? Very dangerous.

01:28:32.405 --> 01:28:34.165
<v Speaker 0>Alright. Thank you both again. I hope you

01:28:34.165 --> 01:28:35.605
<v Speaker 0>have a great day,

01:28:35.925 --> 01:28:37.845
<v Speaker 0>and I'll speak to Austin. You too. Cheers.

01:28:37.845 --> 01:28:39.445
<v Speaker 0>Bye. Thank you. Cheers.
