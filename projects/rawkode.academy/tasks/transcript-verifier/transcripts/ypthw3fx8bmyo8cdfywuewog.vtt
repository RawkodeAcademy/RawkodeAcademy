WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 220be2e0-429c-4d18-8190-a793f87be359
Created: 2025-04-29T13:45:50.430Z
Duration: 2975.1096
Channels: 1

00:00:00.560 --> 00:00:03.120
<v Speaker 0>Okay. Thank you everyone for joining me. This

00:00:03.120 --> 00:00:05.440
<v Speaker 0>is a new podcast that we're launching called

00:00:05.440 --> 00:00:08.320
<v Speaker 0>the Cloud Native Compass, which focuses on containers,

00:00:08.320 --> 00:00:11.200
<v Speaker 0>Kubernetes, WebAssembly, and everything in between.

00:00:11.440 --> 00:00:14.160
<v Speaker 0>And today's episode, we are talking about WebAssembly

00:00:14.160 --> 00:00:15.599
<v Speaker 0>and server side WebAssembly.

00:00:16.145 --> 00:00:18.065
<v Speaker 0>I have three wonderful guests who will each

00:00:18.065 --> 00:00:20.705
<v Speaker 0>introduce themselves now, and we'll start with you,

00:00:20.705 --> 00:00:21.345
<v Speaker 0>Kevin.

00:00:21.664 --> 00:00:25.105
<v Speaker 1>So I'm Kevin Hoffman, CTO of Cosmic.

00:00:25.825 --> 00:00:28.625
<v Speaker 1>Created the WasmCloud open source project,

00:00:30.130 --> 00:00:32.130
<v Speaker 1>wrote a book called programming web assembly with

00:00:32.130 --> 00:00:32.770
<v Speaker 1>Rust,

00:00:33.330 --> 00:00:33.890
<v Speaker 1>and

00:00:34.290 --> 00:00:37.810
<v Speaker 1>just in general have been using and experimenting

00:00:37.810 --> 00:00:39.489
<v Speaker 1>with web assembly since,

00:00:40.690 --> 00:00:43.730
<v Speaker 1>well, since before the standards were fully baked.

00:00:44.690 --> 00:00:46.645
<v Speaker 0>Thank you very much. Connor.

00:00:46.805 --> 00:00:47.525
<v Speaker 2>Hello.

00:00:48.085 --> 00:00:51.925
<v Speaker 2>I'm Connor Hicks. I'm the founder CEO of

00:00:51.925 --> 00:00:52.805
<v Speaker 2>Suborbital.

00:00:52.805 --> 00:00:56.325
<v Speaker 2>We focus on using server side WebAssembly for

00:00:56.325 --> 00:00:58.165
<v Speaker 2>the purposes of building

00:00:58.560 --> 00:00:59.600
<v Speaker 2>extensibility

00:00:59.600 --> 00:01:01.680
<v Speaker 2>into SaaS applications.

00:01:02.400 --> 00:01:03.600
<v Speaker 2>We build effectively

00:01:03.680 --> 00:01:05.600
<v Speaker 2>a plug in system for

00:01:05.680 --> 00:01:06.320
<v Speaker 2>SaaS,

00:01:06.560 --> 00:01:08.400
<v Speaker 2>cloud based apps. And

00:01:09.360 --> 00:01:12.080
<v Speaker 2>I was experimenting with WebAssembly for probably two

00:01:12.080 --> 00:01:13.760
<v Speaker 2>or three years before that, so I've

00:01:14.245 --> 00:01:16.405
<v Speaker 2>seen a little bit, but don't think I've

00:01:16.405 --> 00:01:18.244
<v Speaker 2>been around quite as long as Kevin.

00:01:18.565 --> 00:01:20.725
<v Speaker 3>Hi, everyone. My name is Kate Goldenring.

00:01:20.965 --> 00:01:23.525
<v Speaker 3>I'm a senior software engineer at Fermion where

00:01:23.525 --> 00:01:26.564
<v Speaker 3>we're excited about serverless WebAssembly applications.

00:01:26.645 --> 00:01:29.950
<v Speaker 3>And previously, I came from a Kubernetes background.

00:01:29.950 --> 00:01:31.630
<v Speaker 3>So I'm still a co chair of the

00:01:31.630 --> 00:01:34.430
<v Speaker 3>IoT Edge working group and the CNCF. So

00:01:34.430 --> 00:01:36.510
<v Speaker 3>still enjoy the Kubernetes space

00:01:36.910 --> 00:01:39.790
<v Speaker 3>and currently have moved into this new WebAssembly

00:01:39.790 --> 00:01:41.790
<v Speaker 3>world, excited about the serverless side of it.

00:01:41.995 --> 00:01:43.275
<v Speaker 0>Alright. Thank you.

00:01:43.674 --> 00:01:45.595
<v Speaker 0>So as part of your introduction, as you've

00:01:45.595 --> 00:01:47.195
<v Speaker 0>all obviously shared a little bit about how

00:01:47.195 --> 00:01:48.795
<v Speaker 0>you got into WebAssembly, but I'm hoping we

00:01:48.795 --> 00:01:50.315
<v Speaker 0>can dive into that a little bit more

00:01:50.315 --> 00:01:52.955
<v Speaker 0>and just kinda understand not just

00:01:53.195 --> 00:01:54.875
<v Speaker 0>why you're here, but, like, what your path

00:01:54.875 --> 00:01:56.810
<v Speaker 0>was to get to WebAssembly. What did you

00:01:56.810 --> 00:01:59.450
<v Speaker 0>find interesting? What feature like, what really got

00:01:59.450 --> 00:02:00.970
<v Speaker 0>you on that road to join in this

00:02:00.970 --> 00:02:02.250
<v Speaker 0>in the WebAssembly landscape?

00:02:02.729 --> 00:02:05.210
<v Speaker 0>So there's no right order here. If anyone

00:02:05.210 --> 00:02:06.970
<v Speaker 0>wants to tackle that question first, please feel

00:02:06.970 --> 00:02:08.970
<v Speaker 0>free to blink twice, put up your hand,

00:02:08.970 --> 00:02:09.610
<v Speaker 0>anything you wish.

00:02:10.255 --> 00:02:10.895
<v Speaker 1>So

00:02:11.535 --> 00:02:15.055
<v Speaker 1>a while ago, and this was, you know,

00:02:15.055 --> 00:02:16.975
<v Speaker 1>when we were all riding to the office

00:02:16.975 --> 00:02:18.495
<v Speaker 1>on the backs of dinosaurs,

00:02:18.815 --> 00:02:20.815
<v Speaker 1>I was trying to solve a

00:02:21.055 --> 00:02:22.415
<v Speaker 1>enterprise problem

00:02:22.415 --> 00:02:24.920
<v Speaker 1>where I had a number of teams that

00:02:24.920 --> 00:02:26.520
<v Speaker 1>were all trying to contribute

00:02:26.600 --> 00:02:28.280
<v Speaker 1>business logic to

00:02:29.080 --> 00:02:30.600
<v Speaker 1>a shared portal.

00:02:31.080 --> 00:02:32.760
<v Speaker 1>And so one of the problems I was

00:02:32.760 --> 00:02:34.200
<v Speaker 1>trying to fix was

00:02:34.600 --> 00:02:36.200
<v Speaker 1>how do I make it so that these

00:02:36.200 --> 00:02:38.364
<v Speaker 1>teams can all work in the environments that

00:02:38.364 --> 00:02:39.645
<v Speaker 1>they're comfortable in

00:02:39.965 --> 00:02:42.685
<v Speaker 1>and still and the languages that they're comfortable

00:02:42.685 --> 00:02:45.004
<v Speaker 1>with and still be able to contribute to

00:02:45.004 --> 00:02:45.805
<v Speaker 1>this,

00:02:45.805 --> 00:02:47.965
<v Speaker 1>you know, shared target platform.

00:02:48.605 --> 00:02:50.765
<v Speaker 1>And so

00:02:49.920 --> 00:02:52.080
<v Speaker 1>one of the many thousands of rabbit holes

00:02:52.080 --> 00:02:53.040
<v Speaker 1>I went down

00:02:53.680 --> 00:02:54.880
<v Speaker 1>took me to

00:02:55.040 --> 00:02:56.240
<v Speaker 1>AsmJS.

00:02:56.640 --> 00:02:57.440
<v Speaker 1>And then

00:02:57.760 --> 00:03:00.160
<v Speaker 1>I also did some experimenting with

00:03:00.720 --> 00:03:02.800
<v Speaker 1>this thing called CloudAVI,

00:03:02.880 --> 00:03:05.165
<v Speaker 1>which to me feels like a sort of

00:03:05.165 --> 00:03:06.205
<v Speaker 1>a spiritual

00:03:06.205 --> 00:03:08.205
<v Speaker 1>ancestor to Wazzy.

00:03:09.005 --> 00:03:09.645
<v Speaker 1>And

00:03:10.285 --> 00:03:12.765
<v Speaker 1>from there, the rabbit hole just grew bigger

00:03:12.765 --> 00:03:13.965
<v Speaker 1>and bigger until

00:03:14.365 --> 00:03:15.565
<v Speaker 1>I found

00:03:15.565 --> 00:03:17.325
<v Speaker 1>my way to web assembly and,

00:03:18.159 --> 00:03:20.640
<v Speaker 1>you know, wrote my first Hello World in

00:03:20.640 --> 00:03:22.320
<v Speaker 1>in c. And then,

00:03:23.519 --> 00:03:24.959
<v Speaker 1>you know, once I figured out how to

00:03:24.959 --> 00:03:26.720
<v Speaker 1>do it in Rust, it was pretty much

00:03:26.720 --> 00:03:27.760
<v Speaker 1>all downhill from there.

00:03:31.295 --> 00:03:32.655
<v Speaker 1>And the

00:03:33.615 --> 00:03:36.975
<v Speaker 1>the technology that ended up helping these various

00:03:36.975 --> 00:03:38.815
<v Speaker 1>teams do what they needed to do

00:03:39.215 --> 00:03:42.015
<v Speaker 1>is what ultimately ended up as part of

00:03:42.015 --> 00:03:44.495
<v Speaker 1>the open source Wasm cloud project. Okay.

00:03:46.250 --> 00:03:47.610
<v Speaker 2>For me, it was

00:03:48.650 --> 00:03:49.450
<v Speaker 2>a

00:03:49.610 --> 00:03:50.490
<v Speaker 2>COVID,

00:03:50.569 --> 00:03:53.290
<v Speaker 2>you know, playing on my own open source

00:03:53.290 --> 00:03:55.770
<v Speaker 2>projects type thing where I got frustrated

00:03:56.250 --> 00:03:56.970
<v Speaker 2>with

00:03:57.130 --> 00:03:59.930
<v Speaker 2>how containers were behaving in a particular project

00:03:59.930 --> 00:04:03.095
<v Speaker 2>that I've been playing with on the weekends

00:04:03.095 --> 00:04:04.455
<v Speaker 2>while we were in lockdown.

00:04:05.735 --> 00:04:06.455
<v Speaker 2>And

00:04:06.535 --> 00:04:09.015
<v Speaker 2>I had kinda filled around with WebAssembly

00:04:09.015 --> 00:04:11.415
<v Speaker 2>before that, but I

00:04:11.575 --> 00:04:13.415
<v Speaker 2>decided to try to pull it into this

00:04:13.415 --> 00:04:15.175
<v Speaker 2>project I was working on to try to

00:04:15.175 --> 00:04:16.500
<v Speaker 2>get faster

00:04:16.979 --> 00:04:18.420
<v Speaker 2>startup times for

00:04:19.139 --> 00:04:21.300
<v Speaker 2>basically a job processing

00:04:22.259 --> 00:04:24.420
<v Speaker 2>framework that I was building.

00:04:24.740 --> 00:04:25.380
<v Speaker 2>And

00:04:26.100 --> 00:04:28.820
<v Speaker 2>I pulled it in. It was

00:04:28.820 --> 00:04:31.940
<v Speaker 2>a very rudimentary Rust

00:04:31.195 --> 00:04:32.235
<v Speaker 2>implementation

00:04:32.794 --> 00:04:35.675
<v Speaker 2>with a couple of very basic bindings to

00:04:35.675 --> 00:04:38.315
<v Speaker 2>be able to, you know, just read system

00:04:38.315 --> 00:04:40.955
<v Speaker 2>stuff. This was while Wazy was still a

00:04:40.955 --> 00:04:41.755
<v Speaker 2>little bit,

00:04:42.074 --> 00:04:43.275
<v Speaker 2>you know, in its early days.

00:04:44.000 --> 00:04:44.640
<v Speaker 2>And

00:04:44.960 --> 00:04:47.120
<v Speaker 2>the thing that really got me hooked was

00:04:47.120 --> 00:04:49.840
<v Speaker 2>that that performance that I was able to

00:04:49.840 --> 00:04:53.040
<v Speaker 2>pull out of the, the job scheduling

00:04:53.680 --> 00:04:56.880
<v Speaker 2>system that I was building compared to the

00:04:55.925 --> 00:04:58.005
<v Speaker 2>previous implementation of it that was based on

00:04:58.005 --> 00:04:58.885
<v Speaker 2>containers.

00:04:59.285 --> 00:05:02.245
<v Speaker 2>And so, you know, that that one weekend

00:05:02.245 --> 00:05:04.325
<v Speaker 2>of hacking was enough to convince me that

00:05:04.325 --> 00:05:07.525
<v Speaker 2>there is some real utility for WebAssembly,

00:05:07.525 --> 00:05:09.045
<v Speaker 2>and then that was about three years ago.

00:05:09.045 --> 00:05:11.200
<v Speaker 2>So now I've been working on it full

00:05:11.200 --> 00:05:12.160
<v Speaker 2>time since then.

00:05:12.720 --> 00:05:14.320
<v Speaker 3>Yeah. I mentioned in

00:05:14.480 --> 00:05:16.400
<v Speaker 3>my intro that I kind of came from

00:05:16.400 --> 00:05:18.800
<v Speaker 3>the Kubernetes ecosystem. That's exactly what brought me

00:05:18.800 --> 00:05:20.240
<v Speaker 3>into the WebAssembly space,

00:05:20.480 --> 00:05:23.280
<v Speaker 3>which is a bit unusual. But I was

00:05:23.280 --> 00:05:24.160
<v Speaker 3>maintaining

00:05:24.160 --> 00:05:26.345
<v Speaker 3>and still am a project called Aukri, which

00:05:26.345 --> 00:05:29.065
<v Speaker 3>is a CNCF sandbox project. And while I

00:05:29.065 --> 00:05:30.824
<v Speaker 3>was at Microsoft and we were trying to

00:05:30.905 --> 00:05:32.425
<v Speaker 3>we were wondering what would it look like

00:05:32.425 --> 00:05:34.585
<v Speaker 3>to port this application to being a WebAssembly

00:05:34.585 --> 00:05:35.385
<v Speaker 3>application.

00:05:35.865 --> 00:05:37.465
<v Speaker 3>And we had a sister team, which is

00:05:37.465 --> 00:05:39.465
<v Speaker 3>the Dais Labs team, of which many of

00:05:39.465 --> 00:05:42.190
<v Speaker 3>those people now came and founded Fermion that

00:05:42.190 --> 00:05:44.190
<v Speaker 3>was working on a project called Crestlet,

00:05:44.590 --> 00:05:46.750
<v Speaker 3>which was basically a a first attempt at

00:05:46.750 --> 00:05:48.670
<v Speaker 3>what does it look like to run WebAssembly

00:05:48.670 --> 00:05:50.590
<v Speaker 3>instead of containers on Kubernetes.

00:05:50.910 --> 00:05:52.830
<v Speaker 3>And so I jumped into that effort and

00:05:53.314 --> 00:05:54.194
<v Speaker 3>implemented,

00:05:54.435 --> 00:05:58.115
<v Speaker 3>the device plug in manager in that Kubernetes

00:05:58.115 --> 00:05:58.835
<v Speaker 3>kubelet,

00:05:59.074 --> 00:06:00.675
<v Speaker 3>written in Rust, which is why it's called

00:06:00.675 --> 00:06:01.475
<v Speaker 3>Crestlet,

00:06:02.034 --> 00:06:03.634
<v Speaker 3>and kind of saw some of the issues

00:06:03.634 --> 00:06:04.914
<v Speaker 3>we were having around

00:06:05.250 --> 00:06:07.970
<v Speaker 3>using a new kubelet implementation as the way

00:06:07.970 --> 00:06:10.610
<v Speaker 3>of running WebAssembly on Kubernetes and how just

00:06:10.610 --> 00:06:11.970
<v Speaker 3>the load of what we needed to do

00:06:11.970 --> 00:06:13.810
<v Speaker 3>kept getting bigger and bigger because it was

00:06:13.810 --> 00:06:15.170
<v Speaker 3>a full kubelet. And

00:06:15.890 --> 00:06:18.655
<v Speaker 3>at that point, many people had switched to

00:06:18.655 --> 00:06:21.135
<v Speaker 3>moving on to Fermion, and I kinda got

00:06:21.135 --> 00:06:23.775
<v Speaker 3>hooked on WebAssembly seeing all the benefits on

00:06:23.775 --> 00:06:25.455
<v Speaker 3>the server side that originally

00:06:25.535 --> 00:06:27.135
<v Speaker 3>were those benefits that were made for the

00:06:27.135 --> 00:06:30.015
<v Speaker 3>browser. So that made me also join

00:06:30.335 --> 00:06:32.255
<v Speaker 3>on with Fermion and keep going in the

00:06:32.255 --> 00:06:33.055
<v Speaker 3>WebAssembly space.

00:06:33.710 --> 00:06:36.030
<v Speaker 0>Thank you. So, you know, all three of

00:06:36.030 --> 00:06:37.710
<v Speaker 0>you mentioned server side,

00:06:38.110 --> 00:06:38.910
<v Speaker 0>Wazi,

00:06:38.990 --> 00:06:41.550
<v Speaker 0>for people that aren't that familiar with what

00:06:41.550 --> 00:06:42.590
<v Speaker 0>the Wazi

00:06:42.910 --> 00:06:45.150
<v Speaker 0>as a as a spec yeah. Specification. Right?

00:06:45.150 --> 00:06:46.975
<v Speaker 0>What that is? Maybe we can give them

00:06:46.975 --> 00:06:48.815
<v Speaker 0>a bit more context on why that's important

00:06:48.815 --> 00:06:50.095
<v Speaker 0>for today's discussion.

00:06:50.415 --> 00:06:52.095
<v Speaker 1>So I guess I'll start with the hard

00:06:52.095 --> 00:06:54.575
<v Speaker 1>part, which is that Wazi is

00:06:54.815 --> 00:06:55.615
<v Speaker 1>influx

00:06:55.615 --> 00:06:57.855
<v Speaker 1>and it's one of those things that

00:06:58.415 --> 00:07:00.975
<v Speaker 1>means something different to different people even though,

00:07:01.350 --> 00:07:03.590
<v Speaker 1>you know, it's it's an official standard. Right?

00:07:03.590 --> 00:07:05.670
<v Speaker 1>So when when you look at

00:07:06.710 --> 00:07:07.990
<v Speaker 1>WASI, some people

00:07:08.630 --> 00:07:10.470
<v Speaker 1>and again, the documentation

00:07:10.710 --> 00:07:12.790
<v Speaker 1>in different places treats it this way is

00:07:12.790 --> 00:07:15.525
<v Speaker 1>they feel like they treat WASI as though

00:07:15.525 --> 00:07:16.245
<v Speaker 1>it's

00:07:16.405 --> 00:07:20.325
<v Speaker 1>like a POSIX replacement but for web assembly.

00:07:20.965 --> 00:07:21.685
<v Speaker 1>And

00:07:22.885 --> 00:07:25.445
<v Speaker 1>it may have originated

00:07:25.445 --> 00:07:28.165
<v Speaker 1>that way and with that goal in mind,

00:07:28.165 --> 00:07:28.565
<v Speaker 1>but

00:07:30.320 --> 00:07:32.480
<v Speaker 1>the way things are going today, it seems

00:07:32.480 --> 00:07:34.880
<v Speaker 1>more like the WASI is

00:07:36.480 --> 00:07:38.320
<v Speaker 1>more along the lines of

00:07:39.680 --> 00:07:40.400
<v Speaker 1>the

00:07:40.640 --> 00:07:43.775
<v Speaker 1>the implementation technology that's enabling things like the

00:07:43.775 --> 00:07:44.895
<v Speaker 1>component model.

00:07:45.375 --> 00:07:46.495
<v Speaker 1>And so

00:07:47.375 --> 00:07:49.694
<v Speaker 1>I guess the the short version is that

00:07:49.694 --> 00:07:50.655
<v Speaker 1>WASI

00:07:50.814 --> 00:07:53.294
<v Speaker 1>was originally created as a way to give

00:07:53.455 --> 00:07:56.094
<v Speaker 1>WebAssembly modules access to

00:07:56.350 --> 00:07:59.710
<v Speaker 1>external services, but those external services were

00:07:59.950 --> 00:08:02.910
<v Speaker 1>low level, like being able to read from

00:08:02.910 --> 00:08:06.030
<v Speaker 1>a file descriptor or being able to write

00:08:06.030 --> 00:08:07.870
<v Speaker 1>to standard out and things like that.

00:08:08.350 --> 00:08:09.070
<v Speaker 1>And

00:08:09.870 --> 00:08:12.030
<v Speaker 1>that

00:08:11.565 --> 00:08:14.685
<v Speaker 1>seems to be evolving towards the component model

00:08:14.685 --> 00:08:15.405
<v Speaker 1>where

00:08:15.645 --> 00:08:16.445
<v Speaker 1>now

00:08:16.685 --> 00:08:19.405
<v Speaker 1>the idea is that the the external services

00:08:19.405 --> 00:08:20.125
<v Speaker 1>are

00:08:21.245 --> 00:08:24.765
<v Speaker 1>high level abstractions like web client, web server,

00:08:25.680 --> 00:08:28.240
<v Speaker 1>key value store, things like that. Oh, I

00:08:28.240 --> 00:08:29.919
<v Speaker 3>was just gonna add just because I don't

00:08:29.919 --> 00:08:31.759
<v Speaker 3>know if we've said it yet. WASI stands

00:08:31.759 --> 00:08:34.480
<v Speaker 3>for the web assembly systems interface. So it's

00:08:34.480 --> 00:08:37.120
<v Speaker 3>what Kevin's mentioning. It's those interfaces that are

00:08:37.120 --> 00:08:39.679
<v Speaker 3>allowing a guest or a web assembly module

00:08:39.679 --> 00:08:41.714
<v Speaker 3>or soon to be component to talk to

00:08:41.714 --> 00:08:43.794
<v Speaker 3>a host and use those resources from the

00:08:43.794 --> 00:08:46.755
<v Speaker 3>host. And it's essentially just a wit or

00:08:46.915 --> 00:08:48.835
<v Speaker 3>that type of file where you're defining all

00:08:48.835 --> 00:08:51.315
<v Speaker 3>these functions that give access to your guest

00:08:51.315 --> 00:08:53.395
<v Speaker 3>code, those resources on the host.

00:08:53.875 --> 00:08:56.115
<v Speaker 3>And as Kevin mentioned, it's been evolving to

00:08:56.589 --> 00:08:59.310
<v Speaker 3>from providing just the bare minimum of what

00:08:59.310 --> 00:09:01.710
<v Speaker 3>you may need to run an application directly

00:09:01.710 --> 00:09:04.270
<v Speaker 3>on the server into more of this idea

00:09:04.270 --> 00:09:06.190
<v Speaker 3>of what is what does a cloud look

00:09:06.190 --> 00:09:08.350
<v Speaker 3>like that is made up of web assembly

00:09:08.685 --> 00:09:10.845
<v Speaker 3>functions. And so we're getting those key value

00:09:10.845 --> 00:09:12.685
<v Speaker 3>services and other kinds of services that you

00:09:12.685 --> 00:09:14.605
<v Speaker 3>would expect from the cloud, and all that's

00:09:14.605 --> 00:09:17.085
<v Speaker 3>being defined by these WIT interfaces

00:09:17.165 --> 00:09:19.805
<v Speaker 3>that give access to host resources or other

00:09:19.805 --> 00:09:21.965
<v Speaker 3>resources that the host can

00:09:22.205 --> 00:09:23.325
<v Speaker 3>point out control to.

00:09:23.950 --> 00:09:25.470
<v Speaker 2>Yeah. Another way I like to look at

00:09:25.470 --> 00:09:26.270
<v Speaker 2>it is

00:09:26.990 --> 00:09:30.430
<v Speaker 2>think of an interface in a programming language,

00:09:30.589 --> 00:09:32.990
<v Speaker 2>being able to define an abstract set of

00:09:32.990 --> 00:09:34.029
<v Speaker 2>methods or

00:09:34.990 --> 00:09:38.670
<v Speaker 2>behaviors for an object and then having multiple

00:09:37.855 --> 00:09:40.335
<v Speaker 2>implementations of that within that language.

00:09:40.575 --> 00:09:42.735
<v Speaker 2>You can think of Wazee and the associated

00:09:42.735 --> 00:09:45.775
<v Speaker 2>component model as a generalized version of that

00:09:45.775 --> 00:09:47.935
<v Speaker 2>where you can define a set of interfaces.

00:09:48.415 --> 00:09:49.375
<v Speaker 2>Some of them will be

00:09:50.190 --> 00:09:52.510
<v Speaker 2>common and and set by a standards body

00:09:52.510 --> 00:09:54.110
<v Speaker 2>as, you know, the things that you need

00:09:54.110 --> 00:09:56.750
<v Speaker 2>every day, like accessing randomness and the clocks

00:09:56.750 --> 00:09:58.750
<v Speaker 2>and stuff like that. But some of them

00:09:58.750 --> 00:10:00.750
<v Speaker 2>will be user generated, and at the end

00:10:00.750 --> 00:10:02.270
<v Speaker 2>of the day, you result in

00:10:02.625 --> 00:10:05.025
<v Speaker 2>a shape, a an external,

00:10:05.905 --> 00:10:08.385
<v Speaker 2>set of inputs and outputs that any module

00:10:08.385 --> 00:10:11.265
<v Speaker 2>written in theoretically any language could conform to.

00:10:11.665 --> 00:10:14.785
<v Speaker 2>And if you load a module that conforms

00:10:14.785 --> 00:10:17.470
<v Speaker 2>to that interface, it will theoretically satisfy the

00:10:17.470 --> 00:10:18.990
<v Speaker 2>requirements of your program.

00:10:19.630 --> 00:10:21.230
<v Speaker 2>And that's, I think, where we wanna get

00:10:21.230 --> 00:10:21.790
<v Speaker 2>to,

00:10:22.030 --> 00:10:24.670
<v Speaker 2>and it's just a matter of working through

00:10:24.670 --> 00:10:27.390
<v Speaker 2>that very complicated problem in the standards body,

00:10:27.390 --> 00:10:28.830
<v Speaker 2>and that's what's happening right now.

00:10:29.555 --> 00:10:31.795
<v Speaker 0>Okay. So what I'm gonna try and do

00:10:31.795 --> 00:10:33.395
<v Speaker 0>is repeat all of that back in a

00:10:33.395 --> 00:10:35.315
<v Speaker 0>summary fashion and hopefully not get too much

00:10:35.315 --> 00:10:36.755
<v Speaker 0>of it wrong, but feel free just to

00:10:36.755 --> 00:10:38.595
<v Speaker 0>let me know. I I'm I'll make some

00:10:38.595 --> 00:10:40.595
<v Speaker 0>assumptions as I go. But, you know, I

00:10:40.595 --> 00:10:42.435
<v Speaker 0>think what I heard from Kevin is if

00:10:42.435 --> 00:10:44.515
<v Speaker 0>we could take a Wazee something like POSIX,

00:10:44.515 --> 00:10:46.250
<v Speaker 0>but not directly like POSIX, then it allows

00:10:46.250 --> 00:10:48.250
<v Speaker 0>us to be able to speak to the

00:10:48.250 --> 00:10:50.170
<v Speaker 0>host fail system, to the networking stack, and

00:10:50.170 --> 00:10:50.890
<v Speaker 0>so forth.

00:10:51.450 --> 00:10:53.770
<v Speaker 0>It feels like it was said that the

00:10:53.770 --> 00:10:55.450
<v Speaker 0>component model was an evolution of this or

00:10:55.450 --> 00:10:57.130
<v Speaker 0>an implementation of this. I'm not sure which,

00:10:57.130 --> 00:10:59.585
<v Speaker 0>but maybe someone can clarify that. But what

00:10:59.585 --> 00:11:01.185
<v Speaker 0>that means is both.

00:11:01.505 --> 00:11:03.505
<v Speaker 0>Yeah. Yeah. We'll go with both or it

00:11:03.505 --> 00:11:04.865
<v Speaker 0>depends. I like the answer to

00:11:05.745 --> 00:11:07.345
<v Speaker 0>depends what we use to squint your eyes.

00:11:07.345 --> 00:11:07.825
<v Speaker 0>But,

00:11:08.545 --> 00:11:10.225
<v Speaker 0>you know, we have the component model there

00:11:10.225 --> 00:11:11.985
<v Speaker 0>and we the reason that we need this,

00:11:11.985 --> 00:11:13.105
<v Speaker 0>right, even if we go back a little

00:11:13.105 --> 00:11:16.690
<v Speaker 0>bit more is that WebAssembly as a runtime

00:11:16.690 --> 00:11:19.490
<v Speaker 0>is a really strict sandbox. Right? Is it

00:11:19.490 --> 00:11:21.089
<v Speaker 0>safe to assume that it has no concept

00:11:21.089 --> 00:11:22.690
<v Speaker 0>of a file system. Right? Because it runs

00:11:22.690 --> 00:11:25.330
<v Speaker 0>in the browser. It has no concept of

00:11:26.450 --> 00:11:27.970
<v Speaker 0>I don't know. I mean, it has networking.

00:11:27.970 --> 00:11:29.089
<v Speaker 0>Right? But does it understand

00:11:29.875 --> 00:11:31.395
<v Speaker 0>layer seven? Is it just l four? Does

00:11:31.395 --> 00:11:32.435
<v Speaker 0>it have none of that? I'm not even

00:11:32.435 --> 00:11:35.155
<v Speaker 0>entirely sure myself. But these sorts of primitives

00:11:35.155 --> 00:11:36.995
<v Speaker 0>that don't exist in the sandbox and the

00:11:36.995 --> 00:11:37.955
<v Speaker 0>component model

00:11:38.275 --> 00:11:41.235
<v Speaker 0>enriches that with some of these common interfaces

00:11:41.235 --> 00:11:43.650
<v Speaker 0>like Kate and Connor were saying. I think

00:11:43.650 --> 00:11:45.730
<v Speaker 0>Kate, your example was k v storage.

00:11:45.890 --> 00:11:47.730
<v Speaker 0>If we provide an interface, the k v

00:11:47.730 --> 00:11:49.410
<v Speaker 0>get and k v set It depends. Yeah.

00:11:49.490 --> 00:11:51.170
<v Speaker 0>Does that mean the component model can drop

00:11:51.170 --> 00:11:54.530
<v Speaker 0>in a Redis component, a MySQL component,

00:11:54.610 --> 00:11:56.985
<v Speaker 0>a, you know, a simple file component that

00:11:56.985 --> 00:11:58.905
<v Speaker 0>does, you know, files as the best TV.

00:11:58.985 --> 00:12:01.065
<v Speaker 0>And then as a consumer within

00:12:01.145 --> 00:12:02.585
<v Speaker 0>your WebAssembly program,

00:12:03.305 --> 00:12:04.665
<v Speaker 0>you don't care.

00:12:04.985 --> 00:12:06.745
<v Speaker 0>Is that is that right? Yeah. I think

00:12:06.745 --> 00:12:08.585
<v Speaker 1>the main so there were two things that

00:12:08.585 --> 00:12:09.225
<v Speaker 1>I I

00:12:09.959 --> 00:12:12.440
<v Speaker 1>wanted to point out. So one is,

00:12:13.640 --> 00:12:16.600
<v Speaker 1>again, depending on what you're using it as

00:12:16.600 --> 00:12:19.080
<v Speaker 1>your your definition of WebAssembly.

00:12:19.160 --> 00:12:22.360
<v Speaker 1>WebAssembly on its own, so the the standard,

00:12:22.360 --> 00:12:23.959
<v Speaker 1>the one dot o freestanding

00:12:24.524 --> 00:12:27.805
<v Speaker 1>web assembly has no concept of networking. So

00:12:27.805 --> 00:12:30.524
<v Speaker 1>there's no networking. There's no file system access.

00:12:31.004 --> 00:12:34.845
<v Speaker 1>There's no IO at all. There's just the

00:12:34.845 --> 00:12:35.805
<v Speaker 1>ability to

00:12:36.125 --> 00:12:38.925
<v Speaker 1>take in numbers and give back numbers.

00:12:39.769 --> 00:12:40.490
<v Speaker 1>And

00:12:40.730 --> 00:12:41.610
<v Speaker 1>that's

00:12:41.769 --> 00:12:43.130
<v Speaker 1>essentially a direct

00:12:45.209 --> 00:12:47.610
<v Speaker 1>result of the sandbox that you're working in.

00:12:47.610 --> 00:12:50.170
<v Speaker 1>The only thing that WebAssembly on its own

00:12:50.329 --> 00:12:52.889
<v Speaker 1>without the assistance of a host can do

00:12:53.325 --> 00:12:55.965
<v Speaker 1>is just pure functional compute

00:12:56.125 --> 00:12:56.925
<v Speaker 1>and

00:12:58.205 --> 00:13:00.365
<v Speaker 1>access a shared

00:13:00.365 --> 00:13:02.285
<v Speaker 1>sandbox piece of memory.

00:13:02.685 --> 00:13:04.845
<v Speaker 1>And that's all it can do. So the

00:13:04.845 --> 00:13:07.400
<v Speaker 1>first thing that people run into when they

00:13:07.400 --> 00:13:08.440
<v Speaker 1>do that is

00:13:08.680 --> 00:13:09.560
<v Speaker 1>they need

00:13:10.280 --> 00:13:12.520
<v Speaker 1>they need access to more than just pure

00:13:12.520 --> 00:13:13.400
<v Speaker 1>compute.

00:13:13.560 --> 00:13:15.720
<v Speaker 1>And so how do you do that? The

00:13:15.720 --> 00:13:17.800
<v Speaker 1>the first thing that enabled people to do

00:13:17.800 --> 00:13:19.160
<v Speaker 1>that was Wazee

00:13:19.735 --> 00:13:22.695
<v Speaker 1>And they were able to then access,

00:13:22.775 --> 00:13:25.255
<v Speaker 1>you know, sandboxed file systems.

00:13:25.815 --> 00:13:26.455
<v Speaker 1>And

00:13:26.615 --> 00:13:29.255
<v Speaker 1>what we're talking about as the evolution

00:13:29.735 --> 00:13:32.215
<v Speaker 1>of that is what you were saying where

00:13:32.215 --> 00:13:34.070
<v Speaker 1>the next step is

00:13:34.790 --> 00:13:36.390
<v Speaker 1>to grant abilities

00:13:36.790 --> 00:13:38.550
<v Speaker 1>or to grant these

00:13:39.110 --> 00:13:42.390
<v Speaker 1>interfaces to the guest modules to the components.

00:13:43.190 --> 00:13:45.829
<v Speaker 1>So moving moving forward from

00:13:46.790 --> 00:13:48.230
<v Speaker 1>Wazee's low level

00:13:49.805 --> 00:13:50.765
<v Speaker 1>capabilities

00:13:50.765 --> 00:13:53.805
<v Speaker 1>to the next level up. So, you know,

00:13:53.805 --> 00:13:56.525
<v Speaker 1>high level cloud services. And just to follow-up

00:13:56.525 --> 00:13:59.405
<v Speaker 3>on your question, David, I think you mentioned

00:13:59.405 --> 00:14:02.125
<v Speaker 3>there that, yeah, you can have your guest

00:14:02.285 --> 00:14:04.365
<v Speaker 3>then point to multiple

00:14:04.740 --> 00:14:07.940
<v Speaker 3>use different hosts over this interface. So in

00:14:07.940 --> 00:14:09.460
<v Speaker 3>the key value scenario,

00:14:09.540 --> 00:14:11.300
<v Speaker 3>you're saying you can do a series of

00:14:11.300 --> 00:14:12.580
<v Speaker 3>gets and sets.

00:14:13.459 --> 00:14:16.420
<v Speaker 3>The interesting part about this isn't one, like

00:14:16.420 --> 00:14:17.779
<v Speaker 3>you said, that as

00:14:18.065 --> 00:14:20.865
<v Speaker 3>a developer, I don't need to care about

00:14:20.865 --> 00:14:24.225
<v Speaker 3>what the host implementation is or whether I

00:14:24.225 --> 00:14:26.385
<v Speaker 3>use Redis or DynamoDB,

00:14:26.385 --> 00:14:28.464
<v Speaker 3>for example. But another part of it is

00:14:28.464 --> 00:14:29.505
<v Speaker 3>that I could change my mind.

00:14:30.410 --> 00:14:32.410
<v Speaker 3>So I can have the same web assembly

00:14:32.410 --> 00:14:33.210
<v Speaker 3>module,

00:14:34.170 --> 00:14:36.570
<v Speaker 3>and keep that constant. And then maybe later,

00:14:36.570 --> 00:14:38.570
<v Speaker 3>I want to switch to Redis.

00:14:38.890 --> 00:14:40.890
<v Speaker 3>Then I don't need to rewrite that that

00:14:40.890 --> 00:14:42.890
<v Speaker 3>application. I just need to change the host

00:14:42.890 --> 00:14:43.370
<v Speaker 3>side of it.

00:14:44.215 --> 00:14:45.735
<v Speaker 3>And then one other point I wanted to

00:14:45.735 --> 00:14:47.735
<v Speaker 3>make is I think Wazee and the component

00:14:47.735 --> 00:14:49.575
<v Speaker 3>model, I personally see them as

00:14:50.215 --> 00:14:53.015
<v Speaker 3>very related because the specification is moving towards

00:14:53.015 --> 00:14:54.775
<v Speaker 3>the component model. But I think it's easy

00:14:54.775 --> 00:14:57.015
<v Speaker 3>to think of them as separate in the

00:14:57.015 --> 00:14:58.950
<v Speaker 3>sense of I think of the component model

00:14:58.950 --> 00:15:01.350
<v Speaker 3>as a new way of envisioning applications

00:15:01.350 --> 00:15:03.430
<v Speaker 3>and the way that we see applications and

00:15:03.430 --> 00:15:04.870
<v Speaker 3>making them composable

00:15:05.110 --> 00:15:05.590
<v Speaker 3>and,

00:15:06.150 --> 00:15:06.870
<v Speaker 3>making

00:15:07.110 --> 00:15:08.710
<v Speaker 3>essentially dependencies.

00:15:09.350 --> 00:15:11.190
<v Speaker 3>You can click them in place and swap

00:15:11.190 --> 00:15:12.070
<v Speaker 3>them out more easily.

00:15:12.915 --> 00:15:15.154
<v Speaker 3>But I think of Wazee as this evolution

00:15:15.154 --> 00:15:17.635
<v Speaker 3>that enabled us to run WebAssembly

00:15:17.875 --> 00:15:19.315
<v Speaker 3>outside of the browser

00:15:19.635 --> 00:15:21.955
<v Speaker 3>that has now decided that a really good

00:15:21.955 --> 00:15:24.035
<v Speaker 3>way we wanna do this even more so

00:15:24.035 --> 00:15:26.195
<v Speaker 3>is with this new way of making applications

00:15:26.195 --> 00:15:27.154
<v Speaker 3>with the component model.

00:15:27.640 --> 00:15:28.760
<v Speaker 1>Yeah. I think

00:15:29.160 --> 00:15:29.960
<v Speaker 1>what's

00:15:30.279 --> 00:15:33.399
<v Speaker 1>what's important that Kate was mentioning that I

00:15:33.399 --> 00:15:33.960
<v Speaker 1>think

00:15:34.440 --> 00:15:36.520
<v Speaker 1>it's it's subtle and a lot of people

00:15:36.520 --> 00:15:37.400
<v Speaker 1>don't really

00:15:38.360 --> 00:15:40.279
<v Speaker 1>see the impact that it's going to have

00:15:40.279 --> 00:15:42.695
<v Speaker 1>right away, but the idea that you can

00:15:42.695 --> 00:15:43.815
<v Speaker 1>change your mind

00:15:44.214 --> 00:15:45.495
<v Speaker 1>at run time

00:15:45.894 --> 00:15:46.855
<v Speaker 1>between

00:15:46.855 --> 00:15:49.095
<v Speaker 1>implementations of these contracts

00:15:49.415 --> 00:15:50.214
<v Speaker 1>is

00:15:50.295 --> 00:15:52.375
<v Speaker 1>way more enabling than

00:15:52.535 --> 00:15:54.535
<v Speaker 1>some of the technologies that have come before

00:15:54.535 --> 00:15:55.334
<v Speaker 1>it. So

00:15:55.889 --> 00:15:58.129
<v Speaker 1>in addition to me being able to change

00:15:58.129 --> 00:16:00.370
<v Speaker 1>my mind about which implementation

00:16:00.370 --> 00:16:03.490
<v Speaker 1>of a key value store I'm I'm dealing

00:16:03.490 --> 00:16:03.970
<v Speaker 1>with,

00:16:04.850 --> 00:16:06.130
<v Speaker 1>I can change that

00:16:06.370 --> 00:16:07.410
<v Speaker 1>at run time.

00:16:08.655 --> 00:16:10.495
<v Speaker 1>I mean, depending on the host, obviously, but

00:16:10.495 --> 00:16:12.895
<v Speaker 1>I can change that without having to rebuild

00:16:12.895 --> 00:16:15.135
<v Speaker 1>my code. My code is now

00:16:16.415 --> 00:16:19.455
<v Speaker 1>no longer tightly coupled to the shape and

00:16:19.455 --> 00:16:20.495
<v Speaker 1>scale of my deployment.

00:16:21.270 --> 00:16:23.430
<v Speaker 0>Yeah. And and a kind of adjacent benefit

00:16:23.430 --> 00:16:25.670
<v Speaker 2>that you would get that I don't think

00:16:25.670 --> 00:16:29.430
<v Speaker 2>we've really seen with any other technologies is

00:16:29.430 --> 00:16:33.030
<v Speaker 2>the ability to not only change out implementations

00:16:33.270 --> 00:16:34.310
<v Speaker 2>at runtime,

00:16:34.310 --> 00:16:36.745
<v Speaker 2>which will be extremely awesome in its own

00:16:36.745 --> 00:16:38.505
<v Speaker 2>right, but then also the ability to move

00:16:38.505 --> 00:16:39.225
<v Speaker 2>code

00:16:39.545 --> 00:16:41.305
<v Speaker 2>to different layers

00:16:41.945 --> 00:16:42.985
<v Speaker 2>of the,

00:16:43.385 --> 00:16:45.625
<v Speaker 2>excuse me, the network stack, I guess, one

00:16:45.945 --> 00:16:47.065
<v Speaker 2>way to look at it. Like, you can

00:16:47.065 --> 00:16:50.580
<v Speaker 2>move code from executing in a central AWS

00:16:50.580 --> 00:16:53.300
<v Speaker 2>region out to, like, an edge worker style

00:16:53.300 --> 00:16:53.940
<v Speaker 2>region

00:16:54.180 --> 00:16:56.100
<v Speaker 2>and not have to change it at all

00:16:56.100 --> 00:16:58.020
<v Speaker 2>because maybe in your central cloud, you use

00:16:58.020 --> 00:17:01.025
<v Speaker 2>DynamoDB for KV, but then on the edge,

00:17:01.025 --> 00:17:04.145
<v Speaker 2>use the Cloudflare Workers cache or something like

00:17:04.145 --> 00:17:07.025
<v Speaker 2>that. And you would be able to either

00:17:07.025 --> 00:17:09.345
<v Speaker 2>manual or maybe even one day automatically depending

00:17:09.345 --> 00:17:10.625
<v Speaker 2>on load or whatever,

00:17:10.785 --> 00:17:12.464
<v Speaker 2>you could move the execution of that code

00:17:12.464 --> 00:17:15.400
<v Speaker 2>around, and it could just figure out how

00:17:15.400 --> 00:17:17.720
<v Speaker 2>to make your business logic work with the

00:17:17.720 --> 00:17:19.079
<v Speaker 2>dependencies that it needs.

00:17:19.560 --> 00:17:22.280
<v Speaker 0>Okay. Thank you for that. So there's a

00:17:22.280 --> 00:17:24.440
<v Speaker 0>few different interesting things here. Right? It's like

00:17:24.440 --> 00:17:26.520
<v Speaker 0>we've mentioned containers a couple of times now.

00:17:26.520 --> 00:17:28.119
<v Speaker 0>And, like, this containers would be, like, what

00:17:28.119 --> 00:17:31.125
<v Speaker 0>we consider almost the standard developer experience for

00:17:31.125 --> 00:17:32.325
<v Speaker 0>a lot of what we're talking about right

00:17:32.325 --> 00:17:34.565
<v Speaker 0>now is the ability to use different backing

00:17:34.565 --> 00:17:35.765
<v Speaker 0>services. Right?

00:17:36.245 --> 00:17:38.885
<v Speaker 0>But how is WebAssembly changing that? Now we've

00:17:38.885 --> 00:17:40.405
<v Speaker 0>got a component model and this is runtime

00:17:40.405 --> 00:17:41.605
<v Speaker 0>thing that we can swap out and the

00:17:41.605 --> 00:17:43.205
<v Speaker 0>code doesn't change a lot. That's all very

00:17:43.205 --> 00:17:44.005
<v Speaker 0>nice. But like,

00:17:44.960 --> 00:17:46.880
<v Speaker 0>how does WebAssembly

00:17:46.960 --> 00:17:49.760
<v Speaker 0>really continue to improve that developer experience for

00:17:49.760 --> 00:17:52.400
<v Speaker 0>developers? Like, why are we seeing what started

00:17:52.400 --> 00:17:54.320
<v Speaker 0>off as this browser based technology for doing

00:17:54.320 --> 00:17:57.200
<v Speaker 0>computation now being used for functions and service

00:17:57.200 --> 00:17:59.760
<v Speaker 0>within game engines even on mobile phones and,

00:18:00.304 --> 00:18:02.865
<v Speaker 0>you know, desktop extensibility is another one. Like,

00:18:02.865 --> 00:18:04.625
<v Speaker 0>Versus Code is probably gonna have a plug

00:18:04.625 --> 00:18:06.705
<v Speaker 0>in system that's mostly web assembly based at

00:18:06.705 --> 00:18:07.264
<v Speaker 0>some point.

00:18:08.225 --> 00:18:09.905
<v Speaker 0>Why are so many people being drawn to

00:18:09.905 --> 00:18:13.105
<v Speaker 0>this versus the status quo of like containers?

00:18:13.265 --> 00:18:15.070
<v Speaker 2>Yeah. I think the

00:18:15.230 --> 00:18:18.590
<v Speaker 2>there's two or three main points depending on

00:18:18.590 --> 00:18:20.190
<v Speaker 2>who you are and what you care about.

00:18:20.990 --> 00:18:22.830
<v Speaker 2>One of them is the fact that web

00:18:22.830 --> 00:18:25.389
<v Speaker 2>assembly modules are often far more lightweight than

00:18:25.389 --> 00:18:28.905
<v Speaker 2>your average container. That's not always 100% true,

00:18:28.905 --> 00:18:30.905
<v Speaker 2>but on the average case, that is that

00:18:30.905 --> 00:18:34.024
<v Speaker 2>is true. And so, therefore, storing them,

00:18:34.425 --> 00:18:35.625
<v Speaker 2>downloading them,

00:18:35.865 --> 00:18:37.865
<v Speaker 2>starting the execution of them is often much

00:18:37.865 --> 00:18:38.504
<v Speaker 2>faster.

00:18:38.825 --> 00:18:41.420
<v Speaker 2>The second is the security posture. A lot

00:18:41.420 --> 00:18:42.059
<v Speaker 2>of people

00:18:42.540 --> 00:18:45.020
<v Speaker 2>see you know, since WebAssembly was an evolution

00:18:45.020 --> 00:18:46.460
<v Speaker 2>of something that came out of a web

00:18:46.460 --> 00:18:49.179
<v Speaker 2>browser and web browsers run untrusted code all

00:18:49.179 --> 00:18:51.179
<v Speaker 2>day long safely on your laptop,

00:18:51.740 --> 00:18:54.035
<v Speaker 2>since WebAssembly was born from that, it could

00:18:54.035 --> 00:18:57.154
<v Speaker 2>bring some real security improvements to cloud,

00:18:57.395 --> 00:18:58.835
<v Speaker 2>execution as well,

00:18:59.235 --> 00:19:01.475
<v Speaker 2>both in terms of, like, you know, third

00:19:01.475 --> 00:19:03.315
<v Speaker 2>party dependency vulnerabilities

00:19:03.315 --> 00:19:03.874
<v Speaker 2>and

00:19:04.195 --> 00:19:05.554
<v Speaker 2>just malicious

00:19:05.554 --> 00:19:07.715
<v Speaker 2>stuff that makes it into your your sort

00:19:07.715 --> 00:19:09.539
<v Speaker 2>of source code, but also

00:19:09.860 --> 00:19:12.339
<v Speaker 2>intentionally running untrusted code.

00:19:12.820 --> 00:19:15.219
<v Speaker 2>And then the third is just a common

00:19:15.700 --> 00:19:18.499
<v Speaker 2>target for multiple programming languages.

00:19:18.899 --> 00:19:19.779
<v Speaker 2>Containers

00:19:19.779 --> 00:19:21.379
<v Speaker 2>somewhat satisfy that,

00:19:22.179 --> 00:19:25.005
<v Speaker 2>but the ability to, as we just talked

00:19:25.005 --> 00:19:27.005
<v Speaker 2>about in the last few minutes, like, have

00:19:27.005 --> 00:19:29.485
<v Speaker 2>a common set of interfaces,

00:19:29.485 --> 00:19:32.125
<v Speaker 2>capabilities, APIs available to you, and then being

00:19:32.125 --> 00:19:34.525
<v Speaker 2>able to have all the different programming languages

00:19:34.525 --> 00:19:36.605
<v Speaker 2>that you care about target that exact same

00:19:36.605 --> 00:19:37.165
<v Speaker 2>environment

00:19:37.559 --> 00:19:38.200
<v Speaker 2>and

00:19:38.519 --> 00:19:40.919
<v Speaker 2>not have the overhead of a Linux like

00:19:40.919 --> 00:19:41.959
<v Speaker 2>environment

00:19:41.960 --> 00:19:44.279
<v Speaker 2>to go along with it has a a

00:19:44.279 --> 00:19:46.440
<v Speaker 2>couple of really great benefits. Yeah. There's a

00:19:46.440 --> 00:19:48.519
<v Speaker 1>there's a couple of things that I think

00:19:48.519 --> 00:19:49.480
<v Speaker 1>people take for granted.

00:19:50.765 --> 00:19:51.644
<v Speaker 1>So

00:19:52.605 --> 00:19:55.565
<v Speaker 1>one is that the the idea that containers

00:19:55.565 --> 00:19:57.085
<v Speaker 1>are portable is

00:19:57.485 --> 00:19:58.445
<v Speaker 1>untrue.

00:19:58.684 --> 00:20:01.645
<v Speaker 1>Right? Containers aren't actually portable. There are,

00:20:02.600 --> 00:20:03.960
<v Speaker 1>you know, there's a whole

00:20:04.440 --> 00:20:06.679
<v Speaker 1>cottage industry of tools to help

00:20:07.080 --> 00:20:07.960
<v Speaker 1>compensate

00:20:07.960 --> 00:20:10.760
<v Speaker 1>for the lack of portability around containers.

00:20:10.840 --> 00:20:11.400
<v Speaker 1>And

00:20:12.840 --> 00:20:15.000
<v Speaker 1>the there's a a saying

00:20:15.735 --> 00:20:17.735
<v Speaker 1>I'm not sure where the quote came from

00:20:17.735 --> 00:20:18.374
<v Speaker 1>but

00:20:18.695 --> 00:20:20.374
<v Speaker 1>you own what you deploy.

00:20:20.775 --> 00:20:23.894
<v Speaker 1>So your unit of deployment is

00:20:24.375 --> 00:20:26.215
<v Speaker 1>something is everything that you own.

00:20:26.615 --> 00:20:28.455
<v Speaker 1>And so the larger the thing that you

00:20:28.455 --> 00:20:32.830
<v Speaker 1>deploy, the larger your ownership burden is. Right?

00:20:32.830 --> 00:20:34.429
<v Speaker 1>So we started off

00:20:34.669 --> 00:20:38.509
<v Speaker 1>deploying in virtual machines an entire operating system

00:20:38.990 --> 00:20:41.230
<v Speaker 1>plus the application that we needed to deploy.

00:20:41.865 --> 00:20:44.665
<v Speaker 1>And so we own basically everything from top

00:20:44.665 --> 00:20:47.625
<v Speaker 1>to bottom. Then with containers,

00:20:47.705 --> 00:20:48.505
<v Speaker 1>we own

00:20:49.065 --> 00:20:49.625
<v Speaker 1>a

00:20:50.265 --> 00:20:52.105
<v Speaker 1>slice of an operating system

00:20:52.825 --> 00:20:55.785
<v Speaker 1>and our application and all the application dependencies.

00:20:56.480 --> 00:20:57.760
<v Speaker 1>But with

00:20:58.320 --> 00:20:59.360
<v Speaker 1>WebAssembly,

00:20:59.840 --> 00:21:01.600
<v Speaker 1>all we own theoretically

00:21:01.600 --> 00:21:04.400
<v Speaker 1>is our business logic. We don't own the

00:21:04.400 --> 00:21:07.920
<v Speaker 1>external dependencies anymore because we're no longer shipping

00:21:07.920 --> 00:21:09.520
<v Speaker 1>them with our WebAssembly modules.

00:21:10.095 --> 00:21:13.615
<v Speaker 1>Right? Assuming that the future with this component

00:21:13.615 --> 00:21:14.335
<v Speaker 1>model

00:21:15.215 --> 00:21:17.054
<v Speaker 1>turns out the way we all want it

00:21:17.054 --> 00:21:17.614
<v Speaker 1>to,

00:21:18.815 --> 00:21:20.014
<v Speaker 1>I don't own

00:21:20.335 --> 00:21:21.934
<v Speaker 1>the implementation

00:21:21.934 --> 00:21:23.695
<v Speaker 1>of the key value store

00:21:24.110 --> 00:21:26.670
<v Speaker 1>that I that for my

00:21:26.990 --> 00:21:29.070
<v Speaker 1>WebAssembly component that I'm shipping.

00:21:29.390 --> 00:21:31.710
<v Speaker 1>I can ship that somewhere and then the

00:21:31.710 --> 00:21:33.870
<v Speaker 1>environment is the thing that owns

00:21:34.430 --> 00:21:35.310
<v Speaker 1>that database.

00:21:36.005 --> 00:21:38.565
<v Speaker 1>So I may still care about it and

00:21:39.205 --> 00:21:41.525
<v Speaker 1>because I may, you know, have multiple hats,

00:21:41.525 --> 00:21:43.525
<v Speaker 1>I may still be the one who's, you

00:21:43.525 --> 00:21:45.125
<v Speaker 1>know, dealing with the

00:21:45.845 --> 00:21:48.725
<v Speaker 1>the implementation and the installation and configuration of

00:21:48.725 --> 00:21:50.085
<v Speaker 1>all that stuff. But

00:21:50.570 --> 00:21:51.769
<v Speaker 1>in terms of

00:21:52.570 --> 00:21:55.210
<v Speaker 1>the developer working on

00:21:55.530 --> 00:21:57.370
<v Speaker 1>just that module,

00:21:57.930 --> 00:21:59.610
<v Speaker 1>they don't have to worry about owning that

00:21:59.610 --> 00:22:01.930
<v Speaker 1>full full stack anymore. All they own is

00:22:01.930 --> 00:22:03.769
<v Speaker 1>their use of the abstraction.

00:22:04.090 --> 00:22:06.465
<v Speaker 0>Okay. So thank you for saying that containers

00:22:06.465 --> 00:22:07.505
<v Speaker 0>are not portable.

00:22:07.745 --> 00:22:09.585
<v Speaker 0>As a developer working on an m one

00:22:09.585 --> 00:22:12.065
<v Speaker 0>Mac, I guarantee you containers are not build

00:22:12.065 --> 00:22:13.184
<v Speaker 0>once run everywhere.

00:22:14.225 --> 00:22:16.225
<v Speaker 0>And I think the tooling there is

00:22:17.105 --> 00:22:19.025
<v Speaker 0>is really painful right now. That's one of

00:22:19.025 --> 00:22:21.520
<v Speaker 0>the draws for me personally with web assembly.

00:22:21.520 --> 00:22:23.360
<v Speaker 0>It's that you do just you you build

00:22:23.360 --> 00:22:25.200
<v Speaker 0>it once you get the web assembly

00:22:25.520 --> 00:22:27.680
<v Speaker 0>binary artifact, whatever that is, and it it

00:22:27.680 --> 00:22:30.160
<v Speaker 0>does run everywhere, which is really cool. But

00:22:30.160 --> 00:22:31.680
<v Speaker 0>I'm gonna take that that question that I

00:22:31.680 --> 00:22:33.840
<v Speaker 0>asked. I'm gonna flip it around a little

00:22:33.840 --> 00:22:35.360
<v Speaker 0>bit and see

00:22:36.875 --> 00:22:38.634
<v Speaker 0>if people are listening

00:22:38.875 --> 00:22:41.434
<v Speaker 0>and they like the idea of web assembly.

00:22:41.434 --> 00:22:42.954
<v Speaker 0>They like the idea of

00:22:43.835 --> 00:22:46.154
<v Speaker 0>working in random languages. We've already said rust

00:22:46.154 --> 00:22:47.434
<v Speaker 0>three times now, so let's get that up

00:22:47.434 --> 00:22:48.634
<v Speaker 0>to at least 12 before the end of

00:22:48.634 --> 00:22:51.350
<v Speaker 0>the episode. But they wanna explore those languages.

00:22:51.350 --> 00:22:53.909
<v Speaker 0>They wanna compel to us a common ubiquitous

00:22:53.909 --> 00:22:56.070
<v Speaker 0>target that does run anywhere.

00:22:57.190 --> 00:22:58.629
<v Speaker 0>What kind of applications

00:22:59.110 --> 00:23:00.950
<v Speaker 0>does the current state of the component model

00:23:00.950 --> 00:23:04.115
<v Speaker 0>and was it really excel with? Like and

00:23:04.115 --> 00:23:07.235
<v Speaker 0>I'm assuming rewrite in Postgres is not the

00:23:07.235 --> 00:23:08.675
<v Speaker 0>answer there. So what

00:23:10.115 --> 00:23:11.315
<v Speaker 0>can we do today?

00:23:11.715 --> 00:23:14.835
<v Speaker 3>Yeah. I think you pointed out where well,

00:23:14.835 --> 00:23:17.870
<v Speaker 3>they're of saying a long running daemon style

00:23:17.870 --> 00:23:21.070
<v Speaker 3>application like a database is not what you

00:23:21.070 --> 00:23:23.710
<v Speaker 3>probably wanna target for Wazee WebAssembly at the

00:23:23.710 --> 00:23:24.269
<v Speaker 3>moment.

00:23:25.230 --> 00:23:27.390
<v Speaker 3>What seems to be a really good use

00:23:27.390 --> 00:23:29.870
<v Speaker 3>case for WebAssembly right now is serverless. If

00:23:29.870 --> 00:23:30.669
<v Speaker 3>you think about

00:23:31.075 --> 00:23:31.795
<v Speaker 3>the

00:23:31.955 --> 00:23:34.355
<v Speaker 3>previous unit for serverless or

00:23:35.395 --> 00:23:37.795
<v Speaker 3>maybe micro VMs is a common one for

00:23:37.795 --> 00:23:41.155
<v Speaker 3>AWS Lambda, Firecracker micro VMs, those take about

00:23:41.155 --> 00:23:43.635
<v Speaker 3>a hundred and twenty five milliseconds for

00:23:43.875 --> 00:23:46.435
<v Speaker 3>cold starts, while WebAssembly is sub millisecond.

00:23:46.760 --> 00:23:48.760
<v Speaker 3>And so you can really see event driven

00:23:48.760 --> 00:23:51.400
<v Speaker 3>applications that need to run from a cold

00:23:51.400 --> 00:23:52.040
<v Speaker 3>start,

00:23:52.600 --> 00:23:55.240
<v Speaker 3>execute, and go down in millisecond or sub

00:23:55.240 --> 00:23:57.880
<v Speaker 3>millisecond time. WebAssembly is a really good use

00:23:57.880 --> 00:23:59.974
<v Speaker 3>case for that. Yeah. I'm

00:24:00.534 --> 00:24:03.654
<v Speaker 1>I wanna I I don't remember who brought

00:24:03.654 --> 00:24:04.934
<v Speaker 1>it up, but the

00:24:06.774 --> 00:24:10.294
<v Speaker 1>ability to change your mind also extends to

00:24:12.370 --> 00:24:13.970
<v Speaker 1>this type of thing. So

00:24:15.330 --> 00:24:17.490
<v Speaker 1>Kate's point is excellent in that, you know,

00:24:17.490 --> 00:24:19.730
<v Speaker 1>WebAssembly is great at serverless,

00:24:20.049 --> 00:24:22.529
<v Speaker 1>but I think what's even more important

00:24:22.770 --> 00:24:25.650
<v Speaker 1>is that you're not locked into serverless

00:24:25.650 --> 00:24:27.010
<v Speaker 1>with WebAssembly.

00:24:27.010 --> 00:24:27.250
<v Speaker 1>So,

00:24:27.865 --> 00:24:31.224
<v Speaker 1>you know, you can run a WebAssembly component

00:24:31.465 --> 00:24:32.825
<v Speaker 1>as a

00:24:33.225 --> 00:24:34.104
<v Speaker 1>stateless

00:24:34.664 --> 00:24:36.504
<v Speaker 1>wake on demand function

00:24:37.465 --> 00:24:39.544
<v Speaker 1>or you could leave it running

00:24:40.600 --> 00:24:41.399
<v Speaker 1>and

00:24:41.880 --> 00:24:45.080
<v Speaker 1>have it, you know, have 500 instances of

00:24:45.080 --> 00:24:47.799
<v Speaker 1>your WebAssembly module distributed across,

00:24:48.280 --> 00:24:50.679
<v Speaker 1>you know, hundreds of different servers.

00:24:51.080 --> 00:24:51.720
<v Speaker 1>And

00:24:53.155 --> 00:24:55.715
<v Speaker 1>your decision at that point is just a

00:24:55.715 --> 00:24:58.275
<v Speaker 1>choice of which runtime or which host you

00:24:58.275 --> 00:25:00.995
<v Speaker 1>wanna deploy your your component into.

00:25:01.475 --> 00:25:02.115
<v Speaker 1>And

00:25:02.275 --> 00:25:02.995
<v Speaker 1>your

00:25:03.235 --> 00:25:06.515
<v Speaker 1>your choice of using serverless or a micro

00:25:06.515 --> 00:25:06.915
<v Speaker 1>service

00:25:07.420 --> 00:25:09.260
<v Speaker 1>or some other hybrid

00:25:09.420 --> 00:25:11.419
<v Speaker 1>is no longer a

00:25:11.980 --> 00:25:14.540
<v Speaker 1>design once and live with the consequences forever

00:25:14.540 --> 00:25:15.500
<v Speaker 1>decision,

00:25:15.740 --> 00:25:17.580
<v Speaker 1>you can actually change your mind. You can

00:25:17.580 --> 00:25:18.539
<v Speaker 1>go from

00:25:18.940 --> 00:25:21.794
<v Speaker 1>running it serverless in a test environment on

00:25:21.794 --> 00:25:25.235
<v Speaker 1>your laptop to running it distributed across

00:25:25.475 --> 00:25:29.475
<v Speaker 1>multiple clouds in production without having to rebuild

00:25:29.475 --> 00:25:30.434
<v Speaker 1>your modules.

00:25:30.674 --> 00:25:33.235
<v Speaker 0>Okay. I'm gonna ask the hard question now.

00:25:33.620 --> 00:25:35.220
<v Speaker 0>And it's like, you know, the the what's

00:25:35.220 --> 00:25:37.460
<v Speaker 0>missing, like, the I I I don't even

00:25:37.460 --> 00:25:38.260
<v Speaker 0>know how to phrase it in a way

00:25:38.260 --> 00:25:40.020
<v Speaker 0>that's gonna even help you answer it. But

00:25:40.020 --> 00:25:42.420
<v Speaker 0>let's assume we have a world ten years

00:25:42.420 --> 00:25:45.380
<v Speaker 0>from now where all applications are written as

00:25:45.380 --> 00:25:46.020
<v Speaker 0>WebAssembly.

00:25:47.135 --> 00:25:49.534
<v Speaker 0>What are we doing to push into these

00:25:49.534 --> 00:25:51.135
<v Speaker 0>things where we quite missed the mark right

00:25:51.135 --> 00:25:52.815
<v Speaker 0>now? Like, how do we write long run

00:25:52.815 --> 00:25:54.495
<v Speaker 0>and doing processes for purpose? Like, how do

00:25:54.495 --> 00:25:56.414
<v Speaker 0>we have databases that are purely written in

00:25:56.414 --> 00:25:57.215
<v Speaker 0>WebAssembly?

00:25:57.215 --> 00:25:59.135
<v Speaker 0>Is it just a maturity thing? Is there

00:25:59.135 --> 00:26:01.670
<v Speaker 0>a tooling thing? Is it the component model?

00:26:01.670 --> 00:26:03.750
<v Speaker 0>We need a v two. Like, what what's

00:26:03.750 --> 00:26:05.670
<v Speaker 0>the trajectory there? What's the path forward to

00:26:05.670 --> 00:26:08.390
<v Speaker 0>being fully Wasm? We we need a v

00:26:08.390 --> 00:26:09.909
<v Speaker 2>one before we need a v two.

00:26:11.910 --> 00:26:13.910
<v Speaker 2>Yeah. There's a couple of things that come

00:26:13.910 --> 00:26:14.390
<v Speaker 2>to mind.

00:26:15.295 --> 00:26:16.495
<v Speaker 2>One is,

00:26:16.655 --> 00:26:18.735
<v Speaker 2>you know, debugging and observability.

00:26:18.975 --> 00:26:20.575
<v Speaker 2>This is something where we've seen a bunch

00:26:20.575 --> 00:26:23.535
<v Speaker 2>of prototypes. We've seen a bunch of projects

00:26:23.615 --> 00:26:26.095
<v Speaker 2>working towards being able to easily debug and

00:26:26.095 --> 00:26:28.335
<v Speaker 2>observe WebAssembly execution.

00:26:28.335 --> 00:26:28.655
<v Speaker 2>But

00:26:29.250 --> 00:26:31.250
<v Speaker 2>just like the component model, they're in flux.

00:26:31.250 --> 00:26:33.490
<v Speaker 2>People are still trying to agree upon the

00:26:33.490 --> 00:26:34.850
<v Speaker 2>best way to do it, and the tools

00:26:34.850 --> 00:26:36.370
<v Speaker 2>aren't fully baked yet.

00:26:37.490 --> 00:26:39.090
<v Speaker 2>The component model itself, like I said, we're

00:26:39.090 --> 00:26:40.289
<v Speaker 2>not even at v one yet.

00:26:40.770 --> 00:26:42.895
<v Speaker 2>So getting to something that we all agree

00:26:42.895 --> 00:26:44.095
<v Speaker 2>on, and we can say, okay. This is

00:26:44.095 --> 00:26:46.575
<v Speaker 2>going to be stable for the foreseeable future.

00:26:46.735 --> 00:26:49.855
<v Speaker 2>And, you know, future updates will require breaking

00:26:49.855 --> 00:26:51.855
<v Speaker 2>or migration or whatever. Like, that is going

00:26:51.855 --> 00:26:54.575
<v Speaker 2>to be an an important inflection point for

00:26:54.575 --> 00:26:55.215
<v Speaker 2>the whole industry.

00:26:56.720 --> 00:27:00.560
<v Speaker 2>And then I think just having the different

00:27:00.560 --> 00:27:03.920
<v Speaker 2>language tool chains catch up to that. Once

00:27:03.920 --> 00:27:06.080
<v Speaker 2>we have that v one of the component

00:27:06.080 --> 00:27:08.320
<v Speaker 2>model, we then have more work to do.

00:27:08.320 --> 00:27:10.855
<v Speaker 2>Right? Having just the spec isn't enough. Rust

00:27:10.855 --> 00:27:12.374
<v Speaker 2>will obviously get there quickly,

00:27:12.855 --> 00:27:13.575
<v Speaker 2>but then

00:27:14.054 --> 00:27:15.414
<v Speaker 2>all the other languages

00:27:15.654 --> 00:27:19.094
<v Speaker 2>need to integrate the component model tooling,

00:27:19.335 --> 00:27:21.094
<v Speaker 2>be compliant with the spec.

00:27:21.735 --> 00:27:23.575
<v Speaker 2>And there's an additional layer of complexity for

00:27:23.575 --> 00:27:25.654
<v Speaker 2>the interpreted languages like JavaScript and Python

00:27:26.220 --> 00:27:26.940
<v Speaker 2>to

00:27:27.179 --> 00:27:28.780
<v Speaker 2>for for all of those things, the component

00:27:28.780 --> 00:27:31.580
<v Speaker 2>model and debugging and and the tooling. So

00:27:31.660 --> 00:27:33.660
<v Speaker 2>there's just a couple of steps I think

00:27:33.660 --> 00:27:35.340
<v Speaker 2>we need. All of those things,

00:27:35.900 --> 00:27:37.580
<v Speaker 2>we're we're seeing progress on them.

00:27:37.980 --> 00:27:39.580
<v Speaker 2>And if we

00:27:40.140 --> 00:27:42.025
<v Speaker 2>kind of get to this point of coalescing

00:27:42.025 --> 00:27:43.705
<v Speaker 2>on the standards and the tooling and the

00:27:43.705 --> 00:27:44.665
<v Speaker 2>tool chains,

00:27:45.065 --> 00:27:46.345
<v Speaker 2>then we should

00:27:47.385 --> 00:27:49.705
<v Speaker 2>be able to see that future pretty clearly.

00:27:49.785 --> 00:27:50.585
<v Speaker 1>I think

00:27:51.065 --> 00:27:52.265
<v Speaker 1>at a really high level,

00:27:53.010 --> 00:27:55.410
<v Speaker 1>so Connor mentioned a bunch of different types

00:27:55.410 --> 00:27:57.650
<v Speaker 1>of tooling, but in general, the tooling is

00:27:57.650 --> 00:27:59.650
<v Speaker 1>just not there yet. There are some languages

00:27:59.650 --> 00:28:02.210
<v Speaker 1>with better tooling than others, so I think

00:28:02.850 --> 00:28:05.010
<v Speaker 1>we would all agree that Rust probably has

00:28:05.010 --> 00:28:06.929
<v Speaker 1>the best tooling ecosystem right now.

00:28:07.650 --> 00:28:08.210
<v Speaker 1>But

00:28:08.524 --> 00:28:11.404
<v Speaker 1>so the the tooling obviously needs to evolve,

00:28:11.404 --> 00:28:13.005
<v Speaker 1>but I think even at a higher level

00:28:13.005 --> 00:28:14.205
<v Speaker 1>is WebAssembly

00:28:14.205 --> 00:28:16.284
<v Speaker 1>is not yet a boring technology.

00:28:16.845 --> 00:28:17.404
<v Speaker 1>So

00:28:18.125 --> 00:28:21.085
<v Speaker 1>part of the giant hype cycle around WebAssembly

00:28:21.085 --> 00:28:22.924
<v Speaker 1>is that everybody is trying to

00:28:24.470 --> 00:28:25.750
<v Speaker 1>get into the space

00:28:26.310 --> 00:28:27.030
<v Speaker 1>and

00:28:27.590 --> 00:28:30.310
<v Speaker 1>the the difference between now and

00:28:30.790 --> 00:28:32.950
<v Speaker 1>the ideal future is

00:28:33.350 --> 00:28:35.110
<v Speaker 1>WebAssembly becomes boring.

00:28:35.270 --> 00:28:38.070
<v Speaker 1>It no longer is an end goal and

00:28:38.070 --> 00:28:41.285
<v Speaker 1>is just a checkbox that you tick when

00:28:41.605 --> 00:28:44.245
<v Speaker 1>building something. You write your code. It comes

00:28:44.245 --> 00:28:45.525
<v Speaker 1>out as a component.

00:28:46.485 --> 00:28:48.245
<v Speaker 1>All the tooling knows how to deal with

00:28:48.245 --> 00:28:49.045
<v Speaker 1>components.

00:28:49.685 --> 00:28:52.565
<v Speaker 1>You have tooling that stitch components together, and

00:28:52.565 --> 00:28:53.605
<v Speaker 1>it's all just

00:28:54.510 --> 00:28:56.750
<v Speaker 1>part of the day to day routine.

00:28:56.830 --> 00:28:58.990
<v Speaker 1>When when WebAssembly is

00:28:59.390 --> 00:29:02.110
<v Speaker 1>as easy to produce as an ELF binary,

00:29:02.350 --> 00:29:03.630
<v Speaker 1>then that's when

00:29:04.830 --> 00:29:07.390
<v Speaker 1>the you know, that's part of the tipping

00:29:07.390 --> 00:29:08.430
<v Speaker 1>point when

00:29:08.674 --> 00:29:10.034
<v Speaker 1>things go from

00:29:10.674 --> 00:29:11.394
<v Speaker 1>the

00:29:11.955 --> 00:29:14.674
<v Speaker 1>the dangerous part of the adoption curve to

00:29:14.674 --> 00:29:16.515
<v Speaker 1>everybody's using it even if they don't know

00:29:16.515 --> 00:29:19.155
<v Speaker 1>about it. Yeah. Just if I think Kevin's

00:29:19.155 --> 00:29:20.995
<v Speaker 2>exactly correct in that. If we get to

00:29:20.995 --> 00:29:22.355
<v Speaker 2>a point where WebAssembly

00:29:22.590 --> 00:29:24.110
<v Speaker 2>fades in the background in the same way

00:29:24.110 --> 00:29:26.349
<v Speaker 2>that a lot of developers don't even know

00:29:26.669 --> 00:29:29.950
<v Speaker 2>that they are interacting with POSIX or whatever.

00:29:29.950 --> 00:29:31.630
<v Speaker 2>Like, it should proceed

00:29:31.630 --> 00:29:33.470
<v Speaker 2>to a similar level of

00:29:33.950 --> 00:29:36.990
<v Speaker 2>so boring and so reliable that it just

00:29:36.990 --> 00:29:37.789
<v Speaker 2>is a standard,

00:29:38.425 --> 00:29:39.304
<v Speaker 2>then

00:29:39.385 --> 00:29:40.985
<v Speaker 2>we will have succeeded.

00:29:40.985 --> 00:29:42.505
<v Speaker 3>And just to add on to the comment

00:29:42.505 --> 00:29:44.345
<v Speaker 3>about it being a standard, it is a

00:29:44.345 --> 00:29:46.585
<v Speaker 3>standard, and it's community driven. So there is

00:29:46.585 --> 00:29:48.265
<v Speaker 3>a pace at which things move,

00:29:48.985 --> 00:29:49.544
<v Speaker 3>and

00:29:50.185 --> 00:29:51.785
<v Speaker 3>that does require that

00:29:52.490 --> 00:29:56.170
<v Speaker 3>we get certain interfaces in place. Recently,

00:29:56.570 --> 00:29:57.930
<v Speaker 3>we got threads.

00:29:58.010 --> 00:30:00.570
<v Speaker 3>We got socket accept. But without those things,

00:30:00.570 --> 00:30:02.970
<v Speaker 3>you can't even imagine a long living Daemon

00:30:02.970 --> 00:30:05.370
<v Speaker 3>application. So you can see we're moving forward,

00:30:05.370 --> 00:30:07.130
<v Speaker 3>but there are other proposals that still need

00:30:07.130 --> 00:30:07.450
<v Speaker 3>to happen.

00:30:08.385 --> 00:30:09.825
<v Speaker 3>And the other thing that we need is

00:30:09.825 --> 00:30:12.785
<v Speaker 3>a registry for all of these different components.

00:30:12.785 --> 00:30:14.545
<v Speaker 3>So if you Warg is what it's called.

00:30:14.545 --> 00:30:16.465
<v Speaker 3>But if you can imagine one place where

00:30:16.465 --> 00:30:19.585
<v Speaker 3>you can centralized use other people's components

00:30:19.905 --> 00:30:22.390
<v Speaker 3>and make a composable application. So a developer

00:30:22.390 --> 00:30:24.550
<v Speaker 3>experience that's easier around that too. So I

00:30:24.550 --> 00:30:26.630
<v Speaker 3>don't need to know how to make every

00:30:26.630 --> 00:30:27.350
<v Speaker 3>component,

00:30:27.510 --> 00:30:30.710
<v Speaker 3>or even understand the low level WebAssembly tooling.

00:30:30.790 --> 00:30:32.309
<v Speaker 2>Yeah. I think the day

00:30:32.710 --> 00:30:34.070
<v Speaker 2>will come when

00:30:34.150 --> 00:30:35.590
<v Speaker 2>we'll have a

00:30:36.285 --> 00:30:38.685
<v Speaker 2>nearly universal package registry.

00:30:38.845 --> 00:30:41.485
<v Speaker 2>Like Kate's point about work and having

00:30:41.885 --> 00:30:44.365
<v Speaker 2>this, this library of components you could pull

00:30:44.365 --> 00:30:46.445
<v Speaker 2>from. Like, that is one of the big

00:30:46.445 --> 00:30:48.125
<v Speaker 2>dreams, I think, of WebAssembly is that I

00:30:48.125 --> 00:30:49.645
<v Speaker 2>could be writing a Python program.

00:30:49.725 --> 00:30:52.670
<v Speaker 2>I need a library to do some hashing

00:30:52.670 --> 00:30:54.350
<v Speaker 2>algorithm that I don't know how to implement

00:30:54.350 --> 00:30:55.149
<v Speaker 2>in Python.

00:30:55.390 --> 00:30:57.149
<v Speaker 2>I could pull down a package

00:30:57.710 --> 00:31:00.030
<v Speaker 2>that implements that algorithm, and I might not

00:31:00.030 --> 00:31:02.110
<v Speaker 2>even have any idea what programming language that

00:31:02.110 --> 00:31:03.630
<v Speaker 2>algorithm was written in. It could be c.

00:31:03.630 --> 00:31:05.715
<v Speaker 2>It could be rust. And I won't know

00:31:05.715 --> 00:31:06.514
<v Speaker 2>or care

00:31:06.835 --> 00:31:08.595
<v Speaker 2>what language that came from because the tooling

00:31:08.595 --> 00:31:10.755
<v Speaker 2>will just understand that, hey. This is a

00:31:10.755 --> 00:31:11.394
<v Speaker 2>component.

00:31:12.115 --> 00:31:14.195
<v Speaker 2>I can understand how to load and run

00:31:14.195 --> 00:31:16.115
<v Speaker 2>a component or compile it into my larger

00:31:16.115 --> 00:31:16.835
<v Speaker 2>program or whatever,

00:31:17.710 --> 00:31:19.870
<v Speaker 2>and we just continue on. Yeah. I think

00:31:19.870 --> 00:31:21.309
<v Speaker 1>that's a subtle and

00:31:22.510 --> 00:31:25.230
<v Speaker 1>often overlooked point is that when we when

00:31:25.230 --> 00:31:26.910
<v Speaker 1>we switch to the component model,

00:31:27.390 --> 00:31:30.350
<v Speaker 1>the the size of the the LEGO bricks

00:31:30.350 --> 00:31:32.990
<v Speaker 1>that we're using to compose our applications is

00:31:32.990 --> 00:31:33.550
<v Speaker 1>much smaller.

00:31:34.085 --> 00:31:34.885
<v Speaker 1>And so

00:31:35.205 --> 00:31:37.605
<v Speaker 1>when we talk about how, you know,

00:31:38.165 --> 00:31:40.725
<v Speaker 1>it's WebAssembly is language agnostic

00:31:40.725 --> 00:31:42.725
<v Speaker 1>or you can use any language,

00:31:43.445 --> 00:31:45.205
<v Speaker 1>a lot of people immediately think, well, I

00:31:45.205 --> 00:31:47.365
<v Speaker 1>can that just means I can choose one

00:31:47.365 --> 00:31:49.820
<v Speaker 1>language to build my application in

00:31:50.060 --> 00:31:53.740
<v Speaker 1>and another team can choose another language.

00:31:54.220 --> 00:31:56.460
<v Speaker 1>And while that's true, I think some of

00:31:56.460 --> 00:31:57.100
<v Speaker 1>the real

00:31:57.420 --> 00:31:59.340
<v Speaker 1>underrated power comes from

00:31:59.740 --> 00:32:02.380
<v Speaker 1>what Connor was mentioning, which is if I

00:32:02.380 --> 00:32:03.100
<v Speaker 1>have

00:32:04.325 --> 00:32:05.765
<v Speaker 1>if I am am trying to build an

00:32:05.765 --> 00:32:08.245
<v Speaker 1>application and let's say I need to do

00:32:08.245 --> 00:32:08.965
<v Speaker 1>some,

00:32:09.205 --> 00:32:12.645
<v Speaker 1>you know, heavy duty cryptography type stuff and

00:32:13.605 --> 00:32:16.565
<v Speaker 1>there's a different language where

00:32:17.720 --> 00:32:20.520
<v Speaker 1>that's easy to do in its WebAssembly targeting

00:32:20.520 --> 00:32:21.240
<v Speaker 1>form.

00:32:21.480 --> 00:32:23.720
<v Speaker 1>And so I could

00:32:24.040 --> 00:32:26.760
<v Speaker 1>write my business logic in Go,

00:32:27.480 --> 00:32:29.400
<v Speaker 1>build a WebAssembly

00:32:29.400 --> 00:32:31.720
<v Speaker 1>component out of that and utilize

00:32:32.404 --> 00:32:35.125
<v Speaker 1>another component that does the quote unquote hard

00:32:35.125 --> 00:32:36.244
<v Speaker 1>stuff for me

00:32:36.485 --> 00:32:38.965
<v Speaker 1>and the component that I I've

00:32:39.524 --> 00:32:42.164
<v Speaker 1>that I link with at compile time or

00:32:42.164 --> 00:32:42.965
<v Speaker 1>run time,

00:32:43.605 --> 00:32:45.125
<v Speaker 1>that could do that stuff for me and

00:32:45.125 --> 00:32:46.645
<v Speaker 1>I don't care what language it's written in.

00:32:46.880 --> 00:32:48.960
<v Speaker 1>All I care is that it satisfies the

00:32:48.960 --> 00:32:50.960
<v Speaker 1>contract. So that

00:32:51.360 --> 00:32:54.560
<v Speaker 1>the idea that I have these contracts

00:32:54.560 --> 00:32:56.960
<v Speaker 1>and interfaces that are being satisfied

00:32:57.200 --> 00:32:59.120
<v Speaker 1>at a high level, that means that I

00:32:59.120 --> 00:33:02.320
<v Speaker 1>can interchange things like my database or my

00:33:02.320 --> 00:33:04.495
<v Speaker 1>web server and things like that. But at

00:33:04.495 --> 00:33:06.495
<v Speaker 1>a low level, it means that I can

00:33:06.495 --> 00:33:07.535
<v Speaker 1>actually build

00:33:07.855 --> 00:33:08.735
<v Speaker 1>applications

00:33:08.735 --> 00:33:09.535
<v Speaker 1>out of

00:33:10.015 --> 00:33:12.175
<v Speaker 1>units of compute that are smaller than what

00:33:12.175 --> 00:33:14.414
<v Speaker 1>we think of today as traditional libraries.

00:33:14.415 --> 00:33:17.240
<v Speaker 1>And that's super powerful, I think. Yeah. I

00:33:17.240 --> 00:33:19.320
<v Speaker 0>think that's one of the often understated powers

00:33:19.320 --> 00:33:21.159
<v Speaker 0>of WebAssembly. And I hadn't really thought about

00:33:21.159 --> 00:33:22.599
<v Speaker 0>it directly like this.

00:33:22.919 --> 00:33:24.919
<v Speaker 0>And, you know, there is no WebAssembly package

00:33:24.919 --> 00:33:27.879
<v Speaker 0>package thing yet. But using NPM as an

00:33:27.879 --> 00:33:29.799
<v Speaker 0>example, if I'm working on a an application

00:33:29.799 --> 00:33:31.695
<v Speaker 0>and I just do NPM install three different

00:33:31.695 --> 00:33:33.695
<v Speaker 0>packages that are running three different languages, but

00:33:33.695 --> 00:33:35.215
<v Speaker 0>I'll get billed to WebAssembly and I'm able

00:33:35.215 --> 00:33:36.335
<v Speaker 0>to consume them

00:33:36.655 --> 00:33:39.774
<v Speaker 0>in a really strong developer experience fashion.

00:33:40.015 --> 00:33:42.015
<v Speaker 0>That's really powerful to a lot of people,

00:33:42.095 --> 00:33:44.410
<v Speaker 0>you know, especially if you're have a data

00:33:44.410 --> 00:33:46.170
<v Speaker 0>science team that wanna work in Python. You've

00:33:46.170 --> 00:33:47.690
<v Speaker 0>got your web dev team that wanna work

00:33:47.690 --> 00:33:49.610
<v Speaker 0>in Ruby. You've got, you know, your infrastructure

00:33:49.610 --> 00:33:51.290
<v Speaker 0>team here all go and rust and then

00:33:51.290 --> 00:33:52.890
<v Speaker 0>it doesn't matter at this point in time

00:33:52.890 --> 00:33:56.090
<v Speaker 0>anymore. We're just consuming each other's interfaces, abstractions,

00:33:56.090 --> 00:33:58.295
<v Speaker 0>and components, which very,

00:33:58.855 --> 00:34:00.455
<v Speaker 0>I like I like that feature. That's the

00:34:00.455 --> 00:34:02.135
<v Speaker 0>future I'm here for. I want that one.

00:34:02.135 --> 00:34:02.375
<v Speaker 2>So

00:34:03.095 --> 00:34:04.695
<v Speaker 2>Alright.

00:34:07.255 --> 00:34:09.415
<v Speaker 0>Well, I know two of you, Kevin and

00:34:09.415 --> 00:34:11.335
<v Speaker 0>Kate, you were both at KubeCon. I'm not

00:34:11.335 --> 00:34:13.260
<v Speaker 0>sure if you were there, Connor. Right? No.

00:34:13.260 --> 00:34:15.100
<v Speaker 0>Okay. But I'm assuming

00:34:15.420 --> 00:34:17.260
<v Speaker 0>that's not the only conference on the circuit.

00:34:17.260 --> 00:34:18.940
<v Speaker 0>You've all been to many conferences over the

00:34:18.940 --> 00:34:20.780
<v Speaker 0>last twelve or twenty four months or whatever.

00:34:21.020 --> 00:34:23.420
<v Speaker 0>Like, I'm I'm curious just when you speak

00:34:23.420 --> 00:34:25.100
<v Speaker 0>to people and you say WebAssembly,

00:34:25.100 --> 00:34:27.245
<v Speaker 0>is there an instant acknowledgement? We had a

00:34:27.245 --> 00:34:28.925
<v Speaker 0>phase where people are like, oh, WebAssembly. Or

00:34:28.925 --> 00:34:30.685
<v Speaker 0>is it like a, oh, what's that? Tell

00:34:30.685 --> 00:34:33.005
<v Speaker 0>me more. Like, what's that like these days?

00:34:33.805 --> 00:34:36.045
<v Speaker 3>I think the way that I have seen

00:34:36.045 --> 00:34:37.965
<v Speaker 3>that evolve is just standing in front of

00:34:37.965 --> 00:34:40.205
<v Speaker 3>our Fermion booth at KubeCons.

00:34:40.205 --> 00:34:40.445
<v Speaker 3>And

00:34:41.049 --> 00:34:44.409
<v Speaker 3>just a year ago at, KubeCon North America,

00:34:44.409 --> 00:34:45.929
<v Speaker 3>so I guess less than a year ago,

00:34:46.409 --> 00:34:48.650
<v Speaker 3>the first initial question of, hey. Do you

00:34:48.650 --> 00:34:49.929
<v Speaker 3>wanna learn about WebAssembly?

00:34:50.089 --> 00:34:51.690
<v Speaker 3>There was immediate what?

00:34:52.650 --> 00:34:54.650
<v Speaker 3>And now it's evolving to

00:34:55.045 --> 00:34:57.205
<v Speaker 3>people already know what that is a lot

00:34:57.205 --> 00:34:59.685
<v Speaker 3>of times, and that's been really interesting to

00:34:59.685 --> 00:35:02.565
<v Speaker 3>see in just eight months or so how

00:35:02.565 --> 00:35:04.005
<v Speaker 3>the just that

00:35:04.405 --> 00:35:06.725
<v Speaker 3>experience of people walking by, they already know

00:35:06.725 --> 00:35:08.885
<v Speaker 3>that. And oftentimes, they want to hear more

00:35:08.885 --> 00:35:12.020
<v Speaker 3>and learn more. And we had several WebAssembly

00:35:12.020 --> 00:35:14.420
<v Speaker 3>workshops at KubeCon. We had one about spin

00:35:14.420 --> 00:35:16.020
<v Speaker 3>on AKS, and then

00:35:16.500 --> 00:35:18.980
<v Speaker 3>WASM Edge had another one. And there were,

00:35:18.980 --> 00:35:20.100
<v Speaker 3>like, 350

00:35:20.100 --> 00:35:22.420
<v Speaker 3>people at our session for this workshop hands

00:35:22.420 --> 00:35:24.475
<v Speaker 3>on with WebAssembly.

00:35:24.555 --> 00:35:26.955
<v Speaker 3>And then there seemed to be around, like,

00:35:26.955 --> 00:35:28.635
<v Speaker 3>200 or so at the Wasm Edge 1.

00:35:28.635 --> 00:35:30.955
<v Speaker 3>So people not only are hearing about it

00:35:30.955 --> 00:35:32.715
<v Speaker 3>and interested in it, but also wanting to

00:35:32.715 --> 00:35:34.715
<v Speaker 3>get hands on with it. And it seemed

00:35:34.715 --> 00:35:36.315
<v Speaker 3>like that's happened fairly quickly.

00:35:36.840 --> 00:35:40.120
<v Speaker 1>Yeah. The session that I gave at KubeCon,

00:35:41.080 --> 00:35:42.840
<v Speaker 1>like you said, I've I've presented at a

00:35:42.840 --> 00:35:45.320
<v Speaker 1>couple of conferences and have been for a

00:35:45.320 --> 00:35:46.120
<v Speaker 1>while now.

00:35:46.600 --> 00:35:49.960
<v Speaker 1>And I can distinctly remember, you know, giving

00:35:49.960 --> 00:35:51.960
<v Speaker 1>presentations when there were, like, three people in

00:35:51.960 --> 00:35:52.280
<v Speaker 1>the room

00:35:52.965 --> 00:35:54.325
<v Speaker 1>a total,

00:35:54.725 --> 00:35:56.805
<v Speaker 1>and those three people didn't know what WebAssembly

00:35:56.805 --> 00:35:57.445
<v Speaker 1>was.

00:35:57.765 --> 00:36:00.165
<v Speaker 1>And then there was a a next step

00:36:00.165 --> 00:36:01.605
<v Speaker 1>where there were more

00:36:01.605 --> 00:36:03.605
<v Speaker 1>interested people in the room, but none of

00:36:03.605 --> 00:36:06.710
<v Speaker 1>them had really experimented with WebAssembly yet. And

00:36:06.710 --> 00:36:09.430
<v Speaker 1>at this most recent cube con, the room

00:36:09.430 --> 00:36:12.150
<v Speaker 1>was completely full which is a a totally

00:36:12.150 --> 00:36:14.070
<v Speaker 1>new experience for WebAssembly

00:36:14.789 --> 00:36:16.470
<v Speaker 1>for the WebAssembly community.

00:36:17.349 --> 00:36:17.910
<v Speaker 1>And

00:36:18.935 --> 00:36:21.815
<v Speaker 1>in addition to be there being people that

00:36:21.815 --> 00:36:24.135
<v Speaker 1>were just interested in the technology, there were

00:36:24.135 --> 00:36:26.295
<v Speaker 1>actually people who raised their hand for

00:36:26.535 --> 00:36:28.935
<v Speaker 1>people who'd used WebAssembly in anger and had

00:36:28.935 --> 00:36:31.895
<v Speaker 1>been building real things and deploying real things

00:36:31.895 --> 00:36:34.375
<v Speaker 1>with it, not using a browser, which,

00:36:35.310 --> 00:36:36.750
<v Speaker 1>you know, I'm

00:36:37.310 --> 00:36:39.230
<v Speaker 1>actively trying to make that in the future

00:36:39.230 --> 00:36:42.190
<v Speaker 1>and that completely surprised me. I just had

00:36:42.190 --> 00:36:43.230
<v Speaker 1>no idea that

00:36:43.630 --> 00:36:45.790
<v Speaker 1>it was catching on that quickly. And,

00:36:47.055 --> 00:36:50.575
<v Speaker 1>from the WASM clock booth and Cosmonic booth

00:36:50.575 --> 00:36:52.974
<v Speaker 1>and just sort of walking around and talking

00:36:52.974 --> 00:36:53.695
<v Speaker 1>to people,

00:36:54.974 --> 00:36:57.615
<v Speaker 1>people generally seem to know not only what

00:36:57.615 --> 00:36:58.895
<v Speaker 1>web assembly is

00:36:59.295 --> 00:36:59.934
<v Speaker 1>but

00:37:00.590 --> 00:37:03.230
<v Speaker 1>it's no longer a really really hard sell

00:37:03.230 --> 00:37:05.550
<v Speaker 1>trying to tell people that WebAssembly has a

00:37:05.550 --> 00:37:07.230
<v Speaker 1>place outside the browser.

00:37:08.030 --> 00:37:10.030
<v Speaker 1>I think we're we're starting to get to

00:37:10.030 --> 00:37:11.950
<v Speaker 1>the point where the early adopters

00:37:12.590 --> 00:37:16.030
<v Speaker 1>and the innovation curve now includes people that

00:37:17.645 --> 00:37:20.045
<v Speaker 1>don't just assume that WebAssembly is a browser

00:37:20.045 --> 00:37:22.605
<v Speaker 1>only technology. And I think that's a that's

00:37:22.605 --> 00:37:24.445
<v Speaker 1>a huge milestone for the community.

00:37:24.765 --> 00:37:26.205
<v Speaker 2>Yeah. I think it's it speaks a lot

00:37:26.205 --> 00:37:29.165
<v Speaker 2>that a first edition of a new WebAssembly

00:37:29.165 --> 00:37:31.885
<v Speaker 2>conference, WASM.io, that happened a couple weeks ago

00:37:31.460 --> 00:37:34.099
<v Speaker 2>was able to draw such a great crowd.

00:37:34.099 --> 00:37:36.579
<v Speaker 2>And this was something that was not attached

00:37:36.579 --> 00:37:38.500
<v Speaker 2>to a larger conference like the WASM days

00:37:38.500 --> 00:37:39.380
<v Speaker 2>at KubeCon.

00:37:39.460 --> 00:37:42.180
<v Speaker 2>Those ones have been steadily getting bigger. Like

00:37:42.180 --> 00:37:44.500
<v Speaker 2>Kevin said, we've had full rooms and whatnot.

00:37:44.579 --> 00:37:46.535
<v Speaker 2>But even a brand new conference was able

00:37:46.535 --> 00:37:48.855
<v Speaker 2>to pull in enough people to to, be

00:37:48.855 --> 00:37:51.175
<v Speaker 2>extremely successful and and also, you know, the

00:37:51.175 --> 00:37:53.975
<v Speaker 2>quality of speakers does is, I think, a

00:37:53.975 --> 00:37:56.055
<v Speaker 2>given because everybody in this community is very

00:37:56.055 --> 00:37:57.335
<v Speaker 2>friendly and talented. But,

00:37:58.375 --> 00:38:00.695
<v Speaker 2>yeah, it's been a steady increase,

00:38:00.695 --> 00:38:02.880
<v Speaker 2>and I think the the rate of change

00:38:02.880 --> 00:38:05.760
<v Speaker 2>is is increasing as well as people see

00:38:05.760 --> 00:38:07.760
<v Speaker 2>things getting a bit more mature. They see

00:38:07.760 --> 00:38:10.480
<v Speaker 2>examples of real word real world usage,

00:38:10.880 --> 00:38:12.720
<v Speaker 2>and they start to

00:38:13.040 --> 00:38:13.599
<v Speaker 2>realize

00:38:14.105 --> 00:38:16.345
<v Speaker 2>where the use cases are,

00:38:16.744 --> 00:38:20.025
<v Speaker 2>you know, filtering out to. It's definitely becoming,

00:38:21.224 --> 00:38:22.425
<v Speaker 2>easier to

00:38:22.904 --> 00:38:24.984
<v Speaker 2>talk about, easier to

00:38:25.385 --> 00:38:28.345
<v Speaker 2>convince people of its utility, and you're finding

00:38:28.345 --> 00:38:31.120
<v Speaker 2>a larger percentage of people just inherently

00:38:31.120 --> 00:38:33.680
<v Speaker 2>already knowing it, which is great. And on

00:38:33.680 --> 00:38:35.200
<v Speaker 3>the note of Wazamayo

00:38:35.200 --> 00:38:37.360
<v Speaker 3>and great speakers, I just wanted to shout

00:38:37.360 --> 00:38:39.120
<v Speaker 3>out PJ Laskowitz,

00:38:39.440 --> 00:38:40.480
<v Speaker 3>talk on

00:38:40.640 --> 00:38:43.120
<v Speaker 3>basically all these different production scenarios.

00:38:43.360 --> 00:38:45.040
<v Speaker 3>He's with the Omnify Foundation,

00:38:45.040 --> 00:38:47.705
<v Speaker 3>and I was so excited by the end

00:38:47.705 --> 00:38:49.225
<v Speaker 3>of his talk. He was mentioning how it's

00:38:49.225 --> 00:38:51.785
<v Speaker 3>being used in production in medical devices, automotive,

00:38:51.785 --> 00:38:53.705
<v Speaker 3>the edge. I it was just stuff that

00:38:53.705 --> 00:38:55.385
<v Speaker 3>I had no clue was already happening in

00:38:55.385 --> 00:38:56.025
<v Speaker 3>production.

00:38:56.745 --> 00:38:58.665
<v Speaker 3>So if you wanna get excited about it

00:38:58.665 --> 00:39:00.265
<v Speaker 3>as well, that's definitely a really,

00:39:00.745 --> 00:39:03.040
<v Speaker 3>interesting talk to watch. Nice.

00:39:03.440 --> 00:39:04.080
<v Speaker 0>So

00:39:04.320 --> 00:39:06.640
<v Speaker 0>Kevin said something that kinda made me smile

00:39:06.640 --> 00:39:08.480
<v Speaker 0>a little bit. And he said that WebAssembly

00:39:08.480 --> 00:39:09.920
<v Speaker 0>isn't just a thing that we run-in a

00:39:09.920 --> 00:39:10.480
<v Speaker 0>browser.

00:39:10.800 --> 00:39:12.640
<v Speaker 0>From my perspective, and I'm not a front

00:39:12.640 --> 00:39:13.920
<v Speaker 0>end dev. Right? So I've got a lot

00:39:13.920 --> 00:39:16.325
<v Speaker 0>of bias here. But the Wazi server side

00:39:16.325 --> 00:39:19.204
<v Speaker 0>WebAssembly stuff is probably being used much more

00:39:19.204 --> 00:39:21.045
<v Speaker 0>than WebAssembly in the browser. And I don't

00:39:21.045 --> 00:39:22.885
<v Speaker 0>know if that's just because I'm not in

00:39:22.885 --> 00:39:23.925
<v Speaker 0>the front end world,

00:39:24.165 --> 00:39:26.964
<v Speaker 0>but I have tried to write WebAssembly to

00:39:26.964 --> 00:39:29.100
<v Speaker 0>run an browser from my website. And I

00:39:29.100 --> 00:39:30.940
<v Speaker 0>just didn't think the tooling was as mature

00:39:30.940 --> 00:39:33.180
<v Speaker 0>or good as what we have on server

00:39:33.180 --> 00:39:34.300
<v Speaker 0>side WebAssembly.

00:39:34.460 --> 00:39:36.780
<v Speaker 0>But I again, just from my perspective, I

00:39:36.780 --> 00:39:39.100
<v Speaker 0>think server side WebAssembly is moving faster and

00:39:39.100 --> 00:39:39.740
<v Speaker 0>better

00:39:39.900 --> 00:39:41.500
<v Speaker 0>than in browser WebAssembly.

00:39:41.740 --> 00:39:44.495
<v Speaker 2>Yeah. I think I think people got to

00:39:44.495 --> 00:39:45.375
<v Speaker 2>production

00:39:45.375 --> 00:39:47.135
<v Speaker 2>with browser

00:39:47.135 --> 00:39:48.735
<v Speaker 2>based WebAssembly

00:39:48.735 --> 00:39:51.455
<v Speaker 2>first, like Figma, for example, and and Adobe

00:39:51.455 --> 00:39:52.175
<v Speaker 2>and others.

00:39:52.975 --> 00:39:55.869
<v Speaker 2>But I have just a is purely just

00:39:55.869 --> 00:39:58.590
<v Speaker 2>observational on my part. Like, there are more

00:39:59.150 --> 00:40:00.670
<v Speaker 2>startups and companies

00:40:00.750 --> 00:40:02.510
<v Speaker 2>that have been formed around the server side

00:40:02.510 --> 00:40:04.590
<v Speaker 2>of things, whereas the web browser side of

00:40:04.590 --> 00:40:06.110
<v Speaker 2>things has been more just

00:40:07.085 --> 00:40:09.644
<v Speaker 2>purely community and and, like, open source and

00:40:09.644 --> 00:40:12.444
<v Speaker 2>not driven by companies and startups. So I

00:40:12.444 --> 00:40:14.845
<v Speaker 2>think that could be contributing to why it

00:40:14.845 --> 00:40:17.164
<v Speaker 2>seems like the Wazee and server side part

00:40:17.164 --> 00:40:18.125
<v Speaker 2>of it has been

00:40:19.005 --> 00:40:21.644
<v Speaker 2>progressing faster or maybe there's just more noise

00:40:21.644 --> 00:40:23.960
<v Speaker 2>about it. That's that could be at least

00:40:23.960 --> 00:40:25.880
<v Speaker 2>from my side, that's what I've been observing.

00:40:25.880 --> 00:40:27.800
<v Speaker 1>I think it depends on the metric you're

00:40:27.800 --> 00:40:28.760
<v Speaker 1>using to

00:40:29.000 --> 00:40:30.920
<v Speaker 1>to measure size. So,

00:40:31.480 --> 00:40:32.120
<v Speaker 1>you know,

00:40:32.680 --> 00:40:35.640
<v Speaker 1>WebAssembly in the browser has probably reached more

00:40:35.640 --> 00:40:36.200
<v Speaker 1>people

00:40:37.965 --> 00:40:40.365
<v Speaker 1>because it's in the browser. It's probably reached

00:40:40.365 --> 00:40:41.805
<v Speaker 1>more people than

00:40:42.685 --> 00:40:44.445
<v Speaker 1>you know, people don't know that they're using

00:40:44.445 --> 00:40:46.605
<v Speaker 1>it. So, you know, Conor brought up Figma.

00:40:46.605 --> 00:40:47.245
<v Speaker 1>There's

00:40:47.965 --> 00:40:48.685
<v Speaker 1>it's

00:40:48.925 --> 00:40:49.725
<v Speaker 1>it's

00:40:49.885 --> 00:40:52.690
<v Speaker 1>making its way into all kinds of web

00:40:52.690 --> 00:40:55.250
<v Speaker 1>based applications and it's just sort of a

00:40:55.730 --> 00:40:58.930
<v Speaker 1>an understood thing now. Adobe has applications

00:40:58.930 --> 00:41:01.570
<v Speaker 1>on on the web that use the that

00:41:01.570 --> 00:41:02.690
<v Speaker 1>use WebAssembly.

00:41:02.690 --> 00:41:03.090
<v Speaker 1>So

00:41:04.370 --> 00:41:06.370
<v Speaker 1>sheer number of people who,

00:41:06.770 --> 00:41:08.795
<v Speaker 1>you know, have have hit a web page

00:41:08.795 --> 00:41:10.955
<v Speaker 1>that's using WebAssembly is

00:41:11.115 --> 00:41:12.474
<v Speaker 1>probably pretty high.

00:41:12.954 --> 00:41:15.515
<v Speaker 1>But to Connor's point, I think the

00:41:16.315 --> 00:41:17.115
<v Speaker 1>the

00:41:18.875 --> 00:41:19.675
<v Speaker 1>real

00:41:20.234 --> 00:41:21.835
<v Speaker 1>developer ecosystem

00:41:21.914 --> 00:41:23.434
<v Speaker 1>growth

00:41:22.880 --> 00:41:25.680
<v Speaker 1>right now is definitely happening on the server

00:41:25.680 --> 00:41:26.320
<v Speaker 1>side.

00:41:27.040 --> 00:41:30.560
<v Speaker 0>Yeah. I'm sure there's probably a Cloudflare report

00:41:30.800 --> 00:41:32.560
<v Speaker 0>because they do these reports every year that

00:41:32.560 --> 00:41:35.120
<v Speaker 0>talks about traffic and distribution and technologies being

00:41:35.120 --> 00:41:36.880
<v Speaker 0>used. I'm sure web assemblies in there somewhere

00:41:36.880 --> 00:41:38.080
<v Speaker 0>is a number, and we just have to

00:41:38.080 --> 00:41:39.925
<v Speaker 0>find it. But I imagine those numbers are

00:41:39.925 --> 00:41:40.725
<v Speaker 0>pretty huge.

00:41:41.045 --> 00:41:42.645
<v Speaker 0>But we are approaching the end of our

00:41:42.645 --> 00:41:44.244
<v Speaker 0>session, and I I wanna just kinda throw

00:41:44.244 --> 00:41:46.565
<v Speaker 0>out and talk about Docker's recent announcement and

00:41:46.565 --> 00:41:48.484
<v Speaker 0>what that means for web to back end

00:41:48.484 --> 00:41:51.525
<v Speaker 0>developers and WebAssembly and hybrid architectures.

00:41:52.130 --> 00:41:54.610
<v Speaker 0>But, you know, Docker and container d, a

00:41:54.610 --> 00:41:56.450
<v Speaker 0>couple of weeks ago, announced that

00:41:56.930 --> 00:41:59.890
<v Speaker 0>we can now use container d to distribute

00:41:59.890 --> 00:42:00.930
<v Speaker 0>and pull

00:42:00.930 --> 00:42:02.450
<v Speaker 0>OCI images,

00:42:02.450 --> 00:42:03.250
<v Speaker 0>which contain

00:42:03.410 --> 00:42:04.610
<v Speaker 0>Wasm binaries.

00:42:05.095 --> 00:42:06.695
<v Speaker 0>These can be run side by side with

00:42:06.695 --> 00:42:09.015
<v Speaker 0>containers using something like Docker Compose and the

00:42:09.015 --> 00:42:11.175
<v Speaker 0>container these shims even allow us to we've

00:42:11.175 --> 00:42:13.975
<v Speaker 0>run Wasi to run these workloads in Kubernetes.

00:42:14.615 --> 00:42:15.975
<v Speaker 0>So we're seeing

00:42:16.215 --> 00:42:18.455
<v Speaker 0>and what I'm excited about personally has been

00:42:18.455 --> 00:42:20.570
<v Speaker 0>able to do a Docker Compose up and

00:42:20.570 --> 00:42:22.490
<v Speaker 0>have, like, a Postgres or a Redis or

00:42:22.490 --> 00:42:23.130
<v Speaker 0>whatever.

00:42:23.610 --> 00:42:26.090
<v Speaker 0>My WebAssembly application running

00:42:26.250 --> 00:42:27.770
<v Speaker 0>and all speaking to each other with no

00:42:27.770 --> 00:42:29.610
<v Speaker 0>effort and being able to ship that to

00:42:29.610 --> 00:42:30.410
<v Speaker 0>Kubernetes.

00:42:30.490 --> 00:42:32.815
<v Speaker 0>And I'm curious what your thoughts are. Do

00:42:32.815 --> 00:42:35.055
<v Speaker 0>we think that hybrid architectures with containers and

00:42:35.055 --> 00:42:37.375
<v Speaker 0>WebAssembly side by side is gonna be the

00:42:37.375 --> 00:42:39.455
<v Speaker 0>next big thing over the next, what, five

00:42:39.455 --> 00:42:40.575
<v Speaker 0>years, let's call it?

00:42:41.295 --> 00:42:43.135
<v Speaker 1>I don't know if it's the next big

00:42:43.135 --> 00:42:43.775
<v Speaker 1>thing

00:42:43.935 --> 00:42:46.895
<v Speaker 1>as much it is a a necessary step

00:42:46.895 --> 00:42:47.695
<v Speaker 1>in bridge building.

00:42:48.390 --> 00:42:49.030
<v Speaker 1>So,

00:42:49.430 --> 00:42:52.310
<v Speaker 1>you know, right now, like, we said,

00:42:52.630 --> 00:42:54.549
<v Speaker 1>we all pretty much agree that the ideal

00:42:54.549 --> 00:42:55.750
<v Speaker 1>future is

00:42:56.150 --> 00:42:59.109
<v Speaker 1>one where you just build a WebAssembly component

00:42:59.109 --> 00:43:00.710
<v Speaker 1>and then you choose where to deploy it

00:43:00.710 --> 00:43:02.630
<v Speaker 1>based on the features of the host runtime

00:43:02.630 --> 00:43:04.805
<v Speaker 1>you're deploying it to. It's no longer a

00:43:04.805 --> 00:43:06.885
<v Speaker 1>technical concern. It's more, you know,

00:43:07.444 --> 00:43:09.365
<v Speaker 1>just shopping for features.

00:43:09.765 --> 00:43:10.405
<v Speaker 1>And

00:43:11.204 --> 00:43:14.325
<v Speaker 1>to get there, we need to bridge between

00:43:14.484 --> 00:43:17.684
<v Speaker 1>people's legacy code today and

00:43:17.360 --> 00:43:20.160
<v Speaker 1>people writing greenfield WebAssembly components.

00:43:20.560 --> 00:43:22.640
<v Speaker 1>And so one of those steps is to

00:43:22.640 --> 00:43:24.960
<v Speaker 1>make it so that people can run

00:43:25.360 --> 00:43:29.360
<v Speaker 1>certain types of WebAssembly workloads in Docker and,

00:43:29.840 --> 00:43:31.840
<v Speaker 1>you know, with run Wazy and things like

00:43:31.840 --> 00:43:32.000
<v Speaker 1>that.

00:43:33.265 --> 00:43:36.145
<v Speaker 1>I think it's a little misleading because there's

00:43:36.145 --> 00:43:38.225
<v Speaker 1>only a certain type of WebAssembly

00:43:38.465 --> 00:43:40.705
<v Speaker 1>modules that you can run-in these things.

00:43:41.985 --> 00:43:43.985
<v Speaker 1>You know, if you're if you're building a

00:43:43.985 --> 00:43:48.200
<v Speaker 1>WebAssembly module that uses a very specific subset

00:43:48.200 --> 00:43:49.720
<v Speaker 1>of WASI, then

00:43:50.520 --> 00:43:52.040
<v Speaker 1>it sort of just works.

00:43:52.280 --> 00:43:55.080
<v Speaker 1>But if you need access to other types

00:43:55.080 --> 00:43:56.600
<v Speaker 1>of runtime services,

00:43:56.680 --> 00:43:58.599
<v Speaker 1>you know, maybe ones that

00:43:59.335 --> 00:44:01.735
<v Speaker 1>you need access to through the component model

00:44:01.735 --> 00:44:03.895
<v Speaker 1>or through proprietary interfaces.

00:44:04.135 --> 00:44:05.895
<v Speaker 1>You can't get those in

00:44:06.215 --> 00:44:07.335
<v Speaker 1>the Docker

00:44:07.655 --> 00:44:08.615
<v Speaker 1>environment.

00:44:08.615 --> 00:44:10.855
<v Speaker 1>So there's still a lot of work to

00:44:10.855 --> 00:44:11.990
<v Speaker 1>do, but

00:44:12.310 --> 00:44:14.230
<v Speaker 1>it's a it's a foot in the door

00:44:14.230 --> 00:44:15.990
<v Speaker 1>and a step in the right direction to

00:44:15.990 --> 00:44:16.470
<v Speaker 1>get

00:44:17.190 --> 00:44:18.950
<v Speaker 1>adoption going. So

00:44:19.829 --> 00:44:22.710
<v Speaker 1>we start out with hybrid architectures and then,

00:44:23.270 --> 00:44:25.750
<v Speaker 1>you know, eventually, we move to the the

00:44:25.750 --> 00:44:29.325
<v Speaker 1>the pure electric model, right, where now

00:44:29.485 --> 00:44:31.965
<v Speaker 1>we're not using we're not tethered to any

00:44:31.965 --> 00:44:34.285
<v Speaker 1>of the legacy stuff. Our our greenfield stuff

00:44:34.285 --> 00:44:35.325
<v Speaker 1>works just fine.

00:44:35.725 --> 00:44:37.965
<v Speaker 0>I'm gonna do some more hyperbole here. You

00:44:37.965 --> 00:44:39.980
<v Speaker 0>start your sentence with, yes, this is the

00:44:39.980 --> 00:44:41.740
<v Speaker 0>next big thing. If you're not writing WebAssembly

00:44:41.740 --> 00:44:43.579
<v Speaker 0>next to your containers, you're gonna lose your

00:44:43.579 --> 00:44:44.780
<v Speaker 0>job and you're not gonna be a developer

00:44:44.780 --> 00:44:46.780
<v Speaker 0>anymore. That's what we need to tell people.

00:44:46.780 --> 00:44:47.260
<v Speaker 0>Right?

00:44:47.660 --> 00:44:49.660
<v Speaker 0>But that was your answer was too balanced.

00:44:50.059 --> 00:44:51.260
<v Speaker 0>I'll I'll add it to the up. It's

00:44:51.260 --> 00:44:52.380
<v Speaker 0>fine. Don't worry about it.

00:44:53.260 --> 00:44:55.325
<v Speaker 0>Any thoughts, Kate or Connor?

00:44:55.885 --> 00:44:57.645
<v Speaker 3>I would just say as a short answer,

00:44:57.645 --> 00:44:58.525
<v Speaker 3>I do think

00:44:58.765 --> 00:45:01.405
<v Speaker 3>containers and WebAssembly will live next to each

00:45:01.405 --> 00:45:01.885
<v Speaker 3>other.

00:45:02.365 --> 00:45:05.085
<v Speaker 3>And that will probably happen for a long,

00:45:05.085 --> 00:45:05.725
<v Speaker 3>long time,

00:45:05.964 --> 00:45:06.845
<v Speaker 3>if not forever.

00:45:08.690 --> 00:45:09.650
<v Speaker 3>Because

00:45:09.730 --> 00:45:12.210
<v Speaker 3>people might not wanna move their legacy code

00:45:12.210 --> 00:45:14.850
<v Speaker 3>to WebAssembly. And, also, some things do are

00:45:14.850 --> 00:45:16.530
<v Speaker 3>suited well for containers,

00:45:16.770 --> 00:45:19.250
<v Speaker 3>like we said, those databases that maybe your

00:45:19.250 --> 00:45:20.050
<v Speaker 3>WebAssembly

00:45:20.050 --> 00:45:23.565
<v Speaker 3>module still communicates with. Whether Kubernetes

00:45:23.565 --> 00:45:25.485
<v Speaker 3>or Docker is the way you want to

00:45:25.485 --> 00:45:27.325
<v Speaker 3>orchestrate or run WebAssembly,

00:45:27.325 --> 00:45:29.485
<v Speaker 3>right now, it is a great stepping stone.

00:45:30.125 --> 00:45:32.685
<v Speaker 3>Like Kevin mentioned, it might not be fully

00:45:32.685 --> 00:45:34.925
<v Speaker 3>featured, and maybe it will become fully featured,

00:45:34.925 --> 00:45:36.285
<v Speaker 3>or maybe there will be something else that

00:45:36.285 --> 00:45:40.160
<v Speaker 3>will better suit running and orchestrating WebAssembly.

00:45:40.560 --> 00:45:42.160
<v Speaker 2>Yeah. I think

00:45:42.400 --> 00:45:44.320
<v Speaker 2>Docker is

00:45:45.040 --> 00:45:46.800
<v Speaker 2>a very common

00:45:47.119 --> 00:45:48.400
<v Speaker 2>tool for

00:45:48.720 --> 00:45:50.720
<v Speaker 2>developers to have in their toolkit these days.

00:45:50.720 --> 00:45:53.040
<v Speaker 2>They probably already have Docker desktop installed.

00:45:53.735 --> 00:45:54.375
<v Speaker 2>And

00:45:55.255 --> 00:45:59.015
<v Speaker 2>so Docker is essentially giving the WebAssembly community

00:45:59.015 --> 00:46:01.175
<v Speaker 2>a bit of a a boost here where

00:46:01.255 --> 00:46:02.455
<v Speaker 2>if a developer

00:46:02.615 --> 00:46:05.255
<v Speaker 2>comes across WebAssembly, they're interested in trying it

00:46:05.255 --> 00:46:08.140
<v Speaker 2>out. Docker just lowered the bar in in

00:46:08.140 --> 00:46:10.860
<v Speaker 2>terms of complexity to get started and try

00:46:10.860 --> 00:46:13.740
<v Speaker 2>it out, which is undeniably

00:46:13.740 --> 00:46:15.100
<v Speaker 2>a very important thing.

00:46:15.420 --> 00:46:16.780
<v Speaker 2>Whether or not

00:46:17.260 --> 00:46:19.425
<v Speaker 2>the, you know, Docker Compose

00:46:19.425 --> 00:46:22.385
<v Speaker 2>method of combining containers and WebAssembly will be

00:46:22.385 --> 00:46:26.145
<v Speaker 2>the thing that is, you know, shipped to

00:46:26.865 --> 00:46:29.585
<v Speaker 2>production environments or whether it's even the paradigm

00:46:29.585 --> 00:46:32.099
<v Speaker 2>that we use going forward, I don't know.

00:46:32.500 --> 00:46:34.980
<v Speaker 2>And whether Kubernetes is involved or not, I

00:46:34.980 --> 00:46:37.059
<v Speaker 2>don't know. There's obviously you can find tons

00:46:37.059 --> 00:46:38.900
<v Speaker 2>of think pieces about that around the Internet,

00:46:38.900 --> 00:46:40.660
<v Speaker 2>and I won't go into it. But I

00:46:40.660 --> 00:46:41.140
<v Speaker 2>think,

00:46:42.099 --> 00:46:45.185
<v Speaker 2>Docker is just such a well understood tool

00:46:45.185 --> 00:46:46.705
<v Speaker 2>for a lot of people at this point,

00:46:47.025 --> 00:46:48.625
<v Speaker 2>and it's going to be

00:46:48.945 --> 00:46:50.065
<v Speaker 2>as both,

00:46:50.305 --> 00:46:51.985
<v Speaker 2>Kate and Kevin said, it's going to be

00:46:51.985 --> 00:46:53.105
<v Speaker 2>a stepping stone. It's gonna be a bridge.

00:46:53.105 --> 00:46:55.345
<v Speaker 2>It's going to be a step towards

00:46:55.869 --> 00:46:58.910
<v Speaker 2>getting us to that next evolution where

00:47:00.030 --> 00:47:03.150
<v Speaker 2>WebAssembly is just a fact of everyday life.

00:47:03.550 --> 00:47:04.270
<v Speaker 2>We'll

00:47:04.430 --> 00:47:06.830
<v Speaker 2>sometimes use it, sometimes not. Maybe we won't

00:47:06.830 --> 00:47:07.470
<v Speaker 2>even know,

00:47:08.349 --> 00:47:11.375
<v Speaker 2>and this is a good step. Awesome. Well,

00:47:11.375 --> 00:47:13.215
<v Speaker 0>thank you all so much. It's been an

00:47:13.215 --> 00:47:15.855
<v Speaker 0>honor speaking with you all. I'm now gonna

00:47:15.855 --> 00:47:17.695
<v Speaker 0>allow you all just to have some shameless

00:47:17.695 --> 00:47:18.335
<v Speaker 0>plugs.

00:47:18.495 --> 00:47:21.375
<v Speaker 0>Feel free to share links, Twitter handles, websites,

00:47:21.375 --> 00:47:23.150
<v Speaker 0>anything that you want of the audience, and

00:47:23.150 --> 00:47:24.510
<v Speaker 0>I'll make sure that they are all in

00:47:24.510 --> 00:47:26.750
<v Speaker 0>the show notes too. So we will work

00:47:26.750 --> 00:47:27.550
<v Speaker 0>in reverse.

00:47:27.710 --> 00:47:29.310
<v Speaker 0>We'll go with you, Kate, first, if you

00:47:29.310 --> 00:47:30.430
<v Speaker 0>wanna start and

00:47:30.670 --> 00:47:32.510
<v Speaker 0>take it away. Okay. Well,

00:47:33.230 --> 00:47:35.310
<v Speaker 3>I guess you can find me on Kate

00:47:35.310 --> 00:47:37.550
<v Speaker 3>Golden Ring at Twitter, but on Twitter. But

00:47:38.165 --> 00:47:40.244
<v Speaker 3>for anything, if you're curious about Fermion and

00:47:40.244 --> 00:47:42.485
<v Speaker 3>on how it does serverless web assembly,

00:47:42.645 --> 00:47:44.565
<v Speaker 3>that's simply fermion.com.

00:47:45.285 --> 00:47:48.405
<v Speaker 3>And you can get started deploying serverless applications

00:47:48.405 --> 00:47:50.805
<v Speaker 3>to Fermion cloud, and we say sixty six

00:47:50.805 --> 00:47:52.405
<v Speaker 3>seconds or less. So we're really about that.

00:47:52.405 --> 00:47:54.880
<v Speaker 3>Web assembly, easy to get started,

00:47:55.280 --> 00:47:56.640
<v Speaker 3>developer experience.

00:47:57.760 --> 00:47:58.480
<v Speaker 3>And that's,

00:47:58.720 --> 00:48:00.640
<v Speaker 3>we mentioned key value a lot. And in

00:48:00.640 --> 00:48:02.240
<v Speaker 3>part, we just launched key value support in

00:48:02.240 --> 00:48:04.160
<v Speaker 3>the cloud. So if you're excited to see

00:48:04.160 --> 00:48:06.400
<v Speaker 3>what that looks like right now, you can

00:48:06.400 --> 00:48:08.515
<v Speaker 3>go ahead and try that out. Yeah. You

00:48:08.515 --> 00:48:10.275
<v Speaker 2>can find me on

00:48:10.515 --> 00:48:13.075
<v Speaker 2>pretty much anything at cohix, c o h

00:48:13.075 --> 00:48:15.875
<v Speaker 2>I x, the hacky derm server on Mastodon,

00:48:15.875 --> 00:48:16.515
<v Speaker 2>Twitter,

00:48:16.915 --> 00:48:18.675
<v Speaker 2>blue sky, but I haven't logged into that

00:48:18.675 --> 00:48:19.955
<v Speaker 2>more than one time so far.

00:48:21.009 --> 00:48:23.009
<v Speaker 2>As for suborbital, like I said at the

00:48:23.009 --> 00:48:25.410
<v Speaker 2>beginning, we help you integrate a plug in

00:48:25.410 --> 00:48:27.890
<v Speaker 2>system into your SaaS application,

00:48:28.210 --> 00:48:29.410
<v Speaker 2>uses our

00:48:29.569 --> 00:48:32.049
<v Speaker 2>globally distributed edge network to execute

00:48:32.385 --> 00:48:35.665
<v Speaker 2>these untrusted plug ins, and the

00:48:35.985 --> 00:48:38.785
<v Speaker 2>developers can write plug ins using a completely

00:48:38.785 --> 00:48:41.185
<v Speaker 2>web browser based code editor.

00:48:41.425 --> 00:48:43.185
<v Speaker 2>No local installs needed,

00:48:43.585 --> 00:48:44.065
<v Speaker 2>and

00:48:44.625 --> 00:48:46.625
<v Speaker 2>you can check all of that out at

00:48:46.625 --> 00:48:47.905
<v Speaker 2>suborbital.dev.

00:48:48.450 --> 00:48:49.170
<v Speaker 1>So

00:48:49.410 --> 00:48:50.850
<v Speaker 1>Cosmonic is

00:48:51.250 --> 00:48:54.370
<v Speaker 1>that's my product, and we provide a

00:48:54.690 --> 00:48:57.090
<v Speaker 1>managed hosting environment for

00:48:57.570 --> 00:48:59.090
<v Speaker 1>WebAssembly applications.

00:48:59.250 --> 00:48:59.810
<v Speaker 1>And

00:49:00.245 --> 00:49:01.605
<v Speaker 1>so you can

00:49:02.485 --> 00:49:03.365
<v Speaker 1>deploy

00:49:03.925 --> 00:49:06.005
<v Speaker 1>components. You can deploy modules.

00:49:06.165 --> 00:49:08.805
<v Speaker 1>We have key value store up and running.

00:49:08.805 --> 00:49:09.445
<v Speaker 1>We have

00:49:10.245 --> 00:49:14.005
<v Speaker 1>what you deploy can have public web endpoints.

00:49:14.780 --> 00:49:16.940
<v Speaker 1>And so we talked earlier about the need

00:49:16.940 --> 00:49:18.780
<v Speaker 1>to orchestrate applications

00:49:18.780 --> 00:49:19.420
<v Speaker 1>and

00:49:20.859 --> 00:49:23.020
<v Speaker 1>you can orchestrate a WebAssembly

00:49:23.260 --> 00:49:24.700
<v Speaker 1>a distributed WebAssembly

00:49:24.700 --> 00:49:27.820
<v Speaker 1>application in Cosmonic with no need for Docker.

00:49:27.904 --> 00:49:29.264
<v Speaker 1>And, you know, the website

00:49:29.824 --> 00:49:31.504
<v Speaker 1>is just cosmonic.com,

00:49:31.504 --> 00:49:33.744
<v Speaker 1>and there's a there's a launch button in

00:49:33.744 --> 00:49:34.864
<v Speaker 1>there for our free trial.
