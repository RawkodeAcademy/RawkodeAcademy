WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 84827f81-dc4d-4253-a331-7c7dfa89aa18
Created: 2025-04-29T13:45:08.533Z
Duration: 633.9345
Channels: 1

00:00:00.000 --> 00:00:02.560
<v Speaker 0>Supply chain security is all the rage in

00:00:02.560 --> 00:00:03.439
<v Speaker 0>2022

00:00:03.439 --> 00:00:05.280
<v Speaker 0>moving into 2023.

00:00:05.359 --> 00:00:07.600
<v Speaker 0>The reason being, there have been some pretty

00:00:07.600 --> 00:00:08.960
<v Speaker 0>huge attacks

00:00:08.960 --> 00:00:11.679
<v Speaker 0>on well known software that we all use

00:00:11.679 --> 00:00:14.480
<v Speaker 0>every single day. Google introduced us to the

00:00:14.480 --> 00:00:17.925
<v Speaker 0>Salsa framework for supply chain security and integrity

00:00:17.925 --> 00:00:20.085
<v Speaker 0>validation back in 2021.

00:00:20.164 --> 00:00:20.884
<v Speaker 0>However,

00:00:21.045 --> 00:00:24.404
<v Speaker 0>most people just aren't aware of their coverage

00:00:24.404 --> 00:00:25.525
<v Speaker 0>and compatibility

00:00:25.525 --> 00:00:26.645
<v Speaker 0>and compliance

00:00:26.884 --> 00:00:29.685
<v Speaker 0>with the framework. End to end security doesn't

00:00:29.685 --> 00:00:31.860
<v Speaker 0>need to be hard. And today, I'm going

00:00:31.860 --> 00:00:34.020
<v Speaker 0>to show you how to get started with

00:00:34.020 --> 00:00:35.380
<v Speaker 0>Scribe security.

00:00:35.380 --> 00:00:37.700
<v Speaker 0>Scribe security is a framework that you can

00:00:37.700 --> 00:00:40.980
<v Speaker 0>use by hooking up a small CICD pipeline

00:00:40.980 --> 00:00:43.700
<v Speaker 0>probably with GitHub actions that gives you all

00:00:43.700 --> 00:00:45.380
<v Speaker 0>the details that you need to know to

00:00:45.380 --> 00:00:47.835
<v Speaker 0>know how compliant with the SASSA framework you

00:00:47.835 --> 00:00:50.315
<v Speaker 0>are and how close you may be to

00:00:50.315 --> 00:00:53.515
<v Speaker 0>that next level. Scryb security is free for

00:00:53.515 --> 00:00:54.795
<v Speaker 0>many organizations.

00:00:54.875 --> 00:00:57.114
<v Speaker 0>Free for one seat and up to 100

00:00:57.114 --> 00:00:59.675
<v Speaker 0>bills per month. So it's easy for organizations

00:00:59.675 --> 00:01:03.140
<v Speaker 0>to get started and understand their compliance across

00:01:03.140 --> 00:01:06.020
<v Speaker 0>however many products they have. If you want

00:01:06.020 --> 00:01:08.980
<v Speaker 0>to give more people access to your results,

00:01:09.300 --> 00:01:11.140
<v Speaker 0>then you will have to adopt one of

00:01:11.140 --> 00:01:12.500
<v Speaker 0>their paid tiers.

00:01:12.740 --> 00:01:14.580
<v Speaker 0>So go check out the pricing page for

00:01:14.580 --> 00:01:17.045
<v Speaker 0>more information. Everything I am doing on the

00:01:17.045 --> 00:01:18.885
<v Speaker 0>video today is 100%

00:01:18.885 --> 00:01:21.605
<v Speaker 0>under the free plan. And also this video

00:01:21.605 --> 00:01:24.405
<v Speaker 0>is sponsored by Scribes Security. They sponsored my

00:01:24.405 --> 00:01:26.725
<v Speaker 0>time to take a look at their framework

00:01:26.725 --> 00:01:29.180
<v Speaker 0>and show people how to get started. So

00:01:29.180 --> 00:01:31.660
<v Speaker 0>without further ado, let's dive in. So let's

00:01:31.660 --> 00:01:34.140
<v Speaker 0>start with what I've scanned so far. When

00:01:34.140 --> 00:01:36.140
<v Speaker 0>you sign up for Scribe Security, you will

00:01:36.140 --> 00:01:39.020
<v Speaker 0>get the demo product which scans a Mongo

00:01:39.020 --> 00:01:40.220
<v Speaker 0>Express server.

00:01:40.300 --> 00:01:42.300
<v Speaker 0>We can see that the integrity is validated,

00:01:42.525 --> 00:01:44.045
<v Speaker 0>and we'll get into that in a moment.

00:01:44.045 --> 00:01:45.885
<v Speaker 0>We can see the scan date and time,

00:01:45.965 --> 00:01:47.325
<v Speaker 0>number of components,

00:01:47.965 --> 00:01:49.405
<v Speaker 0>number of vulnerabilities,

00:01:49.485 --> 00:01:51.565
<v Speaker 0>and salsa level and compliance,

00:01:51.965 --> 00:01:54.205
<v Speaker 0>as well as the nest score. I've also

00:01:54.205 --> 00:01:55.005
<v Speaker 0>forked

00:01:55.005 --> 00:01:57.725
<v Speaker 0>a real open source project called Directus,

00:01:57.970 --> 00:02:01.090
<v Speaker 0>which is a headless CMS that powers data

00:02:01.090 --> 00:02:04.049
<v Speaker 0>frameworks with their Studio UI. I've forked this

00:02:04.049 --> 00:02:06.049
<v Speaker 0>instead of using any of my own repositories

00:02:06.049 --> 00:02:08.610
<v Speaker 0>just because it is a complete product that

00:02:08.610 --> 00:02:10.544
<v Speaker 0>you can use today. A lot of the

00:02:10.544 --> 00:02:12.465
<v Speaker 0>code that I have in my repository is

00:02:12.465 --> 00:02:13.745
<v Speaker 0>for automation,

00:02:13.825 --> 00:02:14.625
<v Speaker 0>platform,

00:02:14.705 --> 00:02:15.825
<v Speaker 0>and even clustered,

00:02:15.985 --> 00:02:18.705
<v Speaker 0>not something that I would specifically ship to

00:02:18.705 --> 00:02:20.705
<v Speaker 0>an end user. So I wasn't getting the

00:02:20.705 --> 00:02:23.040
<v Speaker 0>full value from the scans. So for this

00:02:23.040 --> 00:02:25.440
<v Speaker 0>demo, let's focus on Directus.

00:02:25.680 --> 00:02:27.200
<v Speaker 0>When we click on it, we can see

00:02:27.200 --> 00:02:29.840
<v Speaker 0>all of the versions. Every time you push

00:02:29.840 --> 00:02:31.840
<v Speaker 0>to the main branch or cut a release

00:02:31.840 --> 00:02:32.800
<v Speaker 0>with a tag,

00:02:33.120 --> 00:02:35.840
<v Speaker 0>you can have the CICD workflows run against

00:02:35.840 --> 00:02:38.735
<v Speaker 0>your software, giving you a new version.

00:02:38.815 --> 00:02:40.415
<v Speaker 0>What I like about this, and I'm gonna

00:02:40.415 --> 00:02:42.175
<v Speaker 0>show you before we even dive into any

00:02:42.175 --> 00:02:44.415
<v Speaker 0>of the result, is that we can publish

00:02:44.415 --> 00:02:45.455
<v Speaker 0>these results,

00:02:45.695 --> 00:02:48.575
<v Speaker 0>giving access to our customers or our partners

00:02:48.575 --> 00:02:50.655
<v Speaker 0>who maybe want assurances

00:02:50.655 --> 00:02:52.415
<v Speaker 0>to our security compliance.

00:02:52.710 --> 00:02:54.390
<v Speaker 0>When we click on a version,

00:02:54.870 --> 00:02:56.710
<v Speaker 0>we get a nice overview

00:02:56.710 --> 00:02:59.030
<v Speaker 0>of all of the scans that Scrape Security

00:02:59.030 --> 00:03:01.270
<v Speaker 0>has done against our repository

00:03:01.270 --> 00:03:03.190
<v Speaker 0>and our build artifacts.

00:03:03.270 --> 00:03:04.950
<v Speaker 0>And you can see that Directus

00:03:04.950 --> 00:03:07.350
<v Speaker 0>is already Salsa level two compliant.

00:03:07.955 --> 00:03:08.755
<v Speaker 0>Hey.

00:03:08.835 --> 00:03:11.635
<v Speaker 0>For salsa level three, there are two tasks

00:03:11.635 --> 00:03:14.435
<v Speaker 0>out of 12 that need to be completed.

00:03:14.435 --> 00:03:17.635
<v Speaker 0>And for this NIST secure software development framework,

00:03:17.635 --> 00:03:20.515
<v Speaker 0>we have nine pending tasks or controls that

00:03:20.515 --> 00:03:23.170
<v Speaker 0>we need to bring under compliance. On the

00:03:23.170 --> 00:03:25.570
<v Speaker 0>right hand side, we have the integrity validation.

00:03:25.730 --> 00:03:28.130
<v Speaker 0>This shows us how many open source packages

00:03:28.130 --> 00:03:31.330
<v Speaker 0>Directus is consuming under the hood. A whopping

00:03:31.330 --> 00:03:33.250
<v Speaker 0>1,071.

00:03:33.410 --> 00:03:35.970
<v Speaker 0>Of course, this is a TypeScript project using

00:03:35.970 --> 00:03:39.145
<v Speaker 0>NPM and Nodes. Of course, there's gonna be

00:03:39.145 --> 00:03:40.425
<v Speaker 0>a lot of dependencies.

00:03:40.585 --> 00:03:42.025
<v Speaker 0>We can also see the number of source

00:03:42.025 --> 00:03:45.225
<v Speaker 0>files that were scanned. The directors project itself,

00:03:45.385 --> 00:03:46.745
<v Speaker 0>almost 2,000

00:03:46.745 --> 00:03:49.305
<v Speaker 0>pieces of code. On the bottom, we have

00:03:49.305 --> 00:03:51.944
<v Speaker 0>an overview of the vulnerabilities against the container

00:03:51.944 --> 00:03:54.025
<v Speaker 0>image that was built for this project.

00:03:54.560 --> 00:03:56.160
<v Speaker 0>Right now, we can see that there's one

00:03:56.160 --> 00:03:58.000
<v Speaker 0>critical, 16 high,

00:03:58.080 --> 00:04:01.040
<v Speaker 0>and then a 80 medium and 49 low.

00:04:01.360 --> 00:04:03.440
<v Speaker 0>And again, we'll dive into that in just

00:04:03.440 --> 00:04:05.520
<v Speaker 0>a moment. So let's take a look at

00:04:05.520 --> 00:04:07.985
<v Speaker 0>our Salsa compliance. You can click on this

00:04:07.985 --> 00:04:10.705
<v Speaker 0>compliance tab here, and we'll see the two

00:04:10.705 --> 00:04:13.585
<v Speaker 0>controls that have failed that would allow us

00:04:13.585 --> 00:04:16.705
<v Speaker 0>to adopt Salsa level three or at least

00:04:16.705 --> 00:04:19.745
<v Speaker 0>broadcast and publish that we are Salsa level

00:04:19.745 --> 00:04:20.464
<v Speaker 0>three compliant.

00:04:20.810 --> 00:04:24.730
<v Speaker 0>Control number one is source history verified.

00:04:24.810 --> 00:04:28.090
<v Speaker 0>Assigned commits are not required on this branch,

00:04:28.090 --> 00:04:31.130
<v Speaker 0>which is a critical control in Salsa level

00:04:31.130 --> 00:04:34.010
<v Speaker 0>three. And also there are no branch protection

00:04:34.010 --> 00:04:36.010
<v Speaker 0>rules stopping from force

00:04:36.245 --> 00:04:37.285
<v Speaker 0>commits, changing

00:04:37.925 --> 00:04:40.885
<v Speaker 0>the history on this branch. That just means

00:04:40.885 --> 00:04:42.245
<v Speaker 0>that in theory,

00:04:42.405 --> 00:04:44.805
<v Speaker 0>someone with the right level of access could

00:04:44.805 --> 00:04:48.405
<v Speaker 0>modify the branch history losing the provenance that

00:04:48.405 --> 00:04:50.850
<v Speaker 0>we need that proves the history is what

00:04:50.850 --> 00:04:53.570
<v Speaker 0>it claims to be. Now besides the fields,

00:04:53.570 --> 00:04:55.970
<v Speaker 0>we can see all of the Salsa controls

00:04:55.970 --> 00:04:57.090
<v Speaker 0>that were passed.

00:04:57.250 --> 00:04:59.490
<v Speaker 0>Our build was defined as code

00:04:59.570 --> 00:05:01.250
<v Speaker 0>using GitHub workflows.

00:05:01.625 --> 00:05:03.465
<v Speaker 0>Providence cannot be falsified.

00:05:03.465 --> 00:05:05.705
<v Speaker 0>Awesome. The build was executed

00:05:05.785 --> 00:05:08.505
<v Speaker 0>by a build service here, GitHub actions.

00:05:08.585 --> 00:05:09.785
<v Speaker 0>We have signatures.

00:05:09.945 --> 00:05:11.625
<v Speaker 0>The environment is isolated.

00:05:11.865 --> 00:05:14.025
<v Speaker 0>The providence is available, which we can click

00:05:14.025 --> 00:05:16.600
<v Speaker 0>on and view, which we are viewing. And

00:05:16.600 --> 00:05:19.320
<v Speaker 0>all of our code is in version control.

00:05:19.320 --> 00:05:21.080
<v Speaker 0>We can then see the nest field controls

00:05:21.080 --> 00:05:23.000
<v Speaker 0>below. We can see that we don't have

00:05:23.000 --> 00:05:25.640
<v Speaker 0>automatic package scanning for license implications,

00:05:26.040 --> 00:05:29.080
<v Speaker 0>the organization's domains, and a secure verified next

00:05:29.080 --> 00:05:31.664
<v Speaker 0>to his name and so forth. Now it's

00:05:31.664 --> 00:05:33.504
<v Speaker 0>up to you as an organization and as

00:05:33.504 --> 00:05:35.504
<v Speaker 0>a team to understand the level of compliance

00:05:35.504 --> 00:05:37.264
<v Speaker 0>that you want for your software and you

00:05:37.264 --> 00:05:39.505
<v Speaker 0>want to give assurances to your customers.

00:05:39.585 --> 00:05:42.944
<v Speaker 0>So really take these controls as a gate.

00:05:43.189 --> 00:05:45.030
<v Speaker 0>If you want to get to SANSA level

00:05:45.030 --> 00:05:48.949
<v Speaker 0>three, start configuring the GitHub permissions that give

00:05:48.949 --> 00:05:50.150
<v Speaker 0>you those assurances.

00:05:50.389 --> 00:05:52.150
<v Speaker 0>What I like about some of these controls

00:05:52.150 --> 00:05:54.789
<v Speaker 0>is that Scrape Security isn't just taking a

00:05:54.789 --> 00:05:57.030
<v Speaker 0>look at my repository and and the artifact.

00:05:57.195 --> 00:05:58.955
<v Speaker 0>It's actually taking a look at the GitHub

00:05:58.955 --> 00:05:59.835
<v Speaker 0>settings

00:06:00.075 --> 00:06:02.715
<v Speaker 0>like these two here. It understands that the

00:06:02.715 --> 00:06:05.195
<v Speaker 0>branch protection rules are available, but they're just

00:06:05.195 --> 00:06:07.195
<v Speaker 0>not configured the way that we need. So

00:06:07.195 --> 00:06:09.675
<v Speaker 0>that's pretty neat. Moving over to vulnerabilities,

00:06:09.780 --> 00:06:12.100
<v Speaker 0>we actually get a no understanding

00:06:12.100 --> 00:06:14.740
<v Speaker 0>of the packages being consumed by our software.

00:06:14.820 --> 00:06:16.500
<v Speaker 0>And we can see the one critical,

00:06:16.580 --> 00:06:19.300
<v Speaker 0>which was updated on January 24, which is

00:06:19.300 --> 00:06:21.220
<v Speaker 0>for this CVE here,

00:06:21.380 --> 00:06:23.975
<v Speaker 0>like so. So it's always great when things

00:06:23.975 --> 00:06:26.695
<v Speaker 0>are doing security scanning, link you back to

00:06:26.695 --> 00:06:29.175
<v Speaker 0>the source material. Tells you the database that

00:06:29.175 --> 00:06:31.895
<v Speaker 0>it came from, the CVSS score, which we

00:06:31.895 --> 00:06:33.975
<v Speaker 0>all know is how our mess again is

00:06:33.975 --> 00:06:35.975
<v Speaker 0>there to give you more information

00:06:36.055 --> 00:06:37.255
<v Speaker 0>and context

00:06:37.230 --> 00:06:39.790
<v Speaker 0>to make the sessions yourself. We can see

00:06:39.790 --> 00:06:41.950
<v Speaker 0>the affected version of the package

00:06:42.270 --> 00:06:44.590
<v Speaker 0>and now we have an understanding that maybe

00:06:44.590 --> 00:06:46.110
<v Speaker 0>there is an update and we can go

00:06:46.110 --> 00:06:47.550
<v Speaker 0>take a look at that to see if

00:06:47.550 --> 00:06:49.950
<v Speaker 0>the CV has been rectified upstream.

00:06:50.110 --> 00:06:52.190
<v Speaker 0>If you want to sort by any of

00:06:52.190 --> 00:06:54.625
<v Speaker 0>these, you just click the headers much like

00:06:54.625 --> 00:06:57.745
<v Speaker 0>we would expect with any UI like so.

00:06:57.745 --> 00:07:00.225
<v Speaker 0>Next, we have a software bill of materials

00:07:00.225 --> 00:07:01.265
<v Speaker 0>generated

00:07:01.265 --> 00:07:02.705
<v Speaker 0>for our application,

00:07:02.945 --> 00:07:05.425
<v Speaker 0>and we even can see if the integrity

00:07:05.425 --> 00:07:06.465
<v Speaker 0>is validated

00:07:06.690 --> 00:07:09.010
<v Speaker 0>across each of these dependencies.

00:07:09.090 --> 00:07:11.090
<v Speaker 0>This uses an open source tool that we

00:07:11.090 --> 00:07:14.770
<v Speaker 0>covered just recently on Rawkode Academy called GitGap.

00:07:14.770 --> 00:07:16.850
<v Speaker 0>If you're curious about that project and how

00:07:16.850 --> 00:07:18.850
<v Speaker 0>it works, go click the link in the

00:07:18.850 --> 00:07:20.965
<v Speaker 0>description after this video. So we can see

00:07:20.965 --> 00:07:23.925
<v Speaker 0>which packages have their integrity validated

00:07:24.005 --> 00:07:25.685
<v Speaker 0>when some are not covered. And to be

00:07:25.685 --> 00:07:27.605
<v Speaker 0>honest, that is okay. It just means that

00:07:27.605 --> 00:07:29.205
<v Speaker 0>they don't have all the same controls in

00:07:29.205 --> 00:07:31.845
<v Speaker 0>place on their repository to protect the assurances

00:07:31.845 --> 00:07:34.020
<v Speaker 0>that we need with the framework. You see

00:07:34.020 --> 00:07:35.780
<v Speaker 0>the package manager used for all of these

00:07:35.780 --> 00:07:38.100
<v Speaker 0>and given that this is a TypeScript project,

00:07:38.340 --> 00:07:41.460
<v Speaker 0>of course, it's NPM all the way down.

00:07:41.460 --> 00:07:43.380
<v Speaker 0>Then we can click on licenses. From here,

00:07:43.380 --> 00:07:44.980
<v Speaker 0>we can see all of the licenses,

00:07:44.980 --> 00:07:47.365
<v Speaker 0>all of the dependencies to understand

00:07:47.445 --> 00:07:50.085
<v Speaker 0>what the coverage is across them all. This

00:07:50.085 --> 00:07:51.685
<v Speaker 0>is something that we often don't even think

00:07:51.685 --> 00:07:54.885
<v Speaker 0>about as we'd NPM install new packages into

00:07:54.885 --> 00:07:55.925
<v Speaker 0>our projects.

00:07:56.085 --> 00:07:58.485
<v Speaker 0>Are we governed by any licenses that we

00:07:58.485 --> 00:08:00.580
<v Speaker 0>didn't know? This is probably where your legal

00:08:00.580 --> 00:08:02.340
<v Speaker 0>team may want to spend some time. If

00:08:02.340 --> 00:08:04.580
<v Speaker 0>your application is not open sourced, you may

00:08:04.580 --> 00:08:06.660
<v Speaker 0>have to make sure that you are adhering

00:08:06.660 --> 00:08:08.740
<v Speaker 0>to the license and the rights given to

00:08:08.740 --> 00:08:12.020
<v Speaker 0>you permitted by the upstream open source license

00:08:12.020 --> 00:08:14.485
<v Speaker 0>available. Then we have our context. This just

00:08:14.485 --> 00:08:16.965
<v Speaker 0>tells us the GET repository and everything else

00:08:16.965 --> 00:08:18.405
<v Speaker 0>from the build system that we need to

00:08:18.405 --> 00:08:22.005
<v Speaker 0>understand how all this information was generated.

00:08:22.085 --> 00:08:24.165
<v Speaker 0>So how did we get all of this

00:08:24.165 --> 00:08:25.365
<v Speaker 0>wonderful information

00:08:25.445 --> 00:08:27.285
<v Speaker 0>about our repository

00:08:27.285 --> 00:08:29.930
<v Speaker 0>and our container image? Let's pop open the

00:08:29.930 --> 00:08:32.010
<v Speaker 0>GitHub action. I've given it a name called

00:08:32.010 --> 00:08:34.089
<v Speaker 0>scrape security and have asked it to run

00:08:34.089 --> 00:08:36.330
<v Speaker 0>on all pushes to the main branch. As

00:08:36.330 --> 00:08:38.570
<v Speaker 0>with all GitHub actions, we check out the

00:08:38.570 --> 00:08:40.250
<v Speaker 0>source code of the repository.

00:08:40.409 --> 00:08:43.690
<v Speaker 0>And then we're using the scrape security

00:08:43.865 --> 00:08:46.904
<v Speaker 0>GitHub actions themselves. Here, we're seeing use Scrape

00:08:46.904 --> 00:08:47.785
<v Speaker 0>security

00:08:47.944 --> 00:08:48.745
<v Speaker 0>action

00:08:48.745 --> 00:08:50.824
<v Speaker 0>bomb. We give this an ID so that

00:08:50.824 --> 00:08:52.824
<v Speaker 0>we can reference the output of it later,

00:08:53.144 --> 00:08:54.985
<v Speaker 0>and we're telling it to scan the current

00:08:54.985 --> 00:08:57.770
<v Speaker 0>working directory. You can generate the artifacts without

00:08:57.770 --> 00:08:59.690
<v Speaker 0>uploading them to Scrape if you want, but

00:08:59.690 --> 00:09:02.330
<v Speaker 0>you can enable the Scrape integration and provide

00:09:02.330 --> 00:09:04.890
<v Speaker 0>a client ID and client secret. You can

00:09:04.890 --> 00:09:07.450
<v Speaker 0>also provide a product key, which means that

00:09:07.450 --> 00:09:09.610
<v Speaker 0>you can name what the product is in

00:09:09.610 --> 00:09:11.615
<v Speaker 0>the Scrape UI. Now how do we get

00:09:11.615 --> 00:09:14.255
<v Speaker 0>the client ID and the client secret? Well,

00:09:14.255 --> 00:09:16.895
<v Speaker 0>from the Scrape page, click on integrations,

00:09:16.895 --> 00:09:18.815
<v Speaker 0>where you will see the client ID here

00:09:19.055 --> 00:09:21.375
<v Speaker 0>and a sophisticated version of the secret which

00:09:21.375 --> 00:09:23.695
<v Speaker 0>you can copy and make available to get

00:09:23.695 --> 00:09:26.510
<v Speaker 0>hub actions. Next, we can scan the container

00:09:26.510 --> 00:09:28.990
<v Speaker 0>image that is produced by our build system.

00:09:29.070 --> 00:09:31.870
<v Speaker 0>Here again, we're using the action bomb action

00:09:31.870 --> 00:09:34.910
<v Speaker 0>with the target set to a docker hub

00:09:34.910 --> 00:09:37.950
<v Speaker 0>container image. This also works just fine with

00:09:37.950 --> 00:09:40.030
<v Speaker 0>g h c r dot I o. Next,

00:09:40.265 --> 00:09:43.385
<v Speaker 0>we ask it to upload the two outputs

00:09:43.385 --> 00:09:46.025
<v Speaker 0>from our first two scans. Then we do

00:09:46.025 --> 00:09:48.825
<v Speaker 0>a salsa statement verification or generation.

00:09:49.065 --> 00:09:51.465
<v Speaker 0>We were just asking action bomb to run

00:09:51.465 --> 00:09:54.185
<v Speaker 0>one more time. This time, we're asking for

00:09:54.185 --> 00:09:55.625
<v Speaker 0>a format

00:09:55.400 --> 00:09:57.880
<v Speaker 0>as a salsa statement and then we ask

00:09:57.880 --> 00:09:59.960
<v Speaker 0>for the provenance to be uploaded as an

00:09:59.960 --> 00:10:03.160
<v Speaker 0>artifact on the build. So in under 55

00:10:03.160 --> 00:10:05.720
<v Speaker 0>lines of YAML, we can generate our bill

00:10:05.720 --> 00:10:09.080
<v Speaker 0>of materials, scan our container images, upload all

00:10:09.080 --> 00:10:10.925
<v Speaker 0>of our artifacts, to scribe,

00:10:11.165 --> 00:10:13.005
<v Speaker 0>and get a UI that gives us all

00:10:13.005 --> 00:10:15.805
<v Speaker 0>the information that we need to understand our

00:10:15.805 --> 00:10:19.485
<v Speaker 0>Salsa compliance, the vulnerabilities within our container images,

00:10:19.485 --> 00:10:21.965
<v Speaker 0>and even share them with our customers and

00:10:21.965 --> 00:10:24.250
<v Speaker 0>partners. So go check out Scryb. As I

00:10:24.250 --> 00:10:26.410
<v Speaker 0>said, for a single seat, 100 builds per

00:10:26.410 --> 00:10:28.730
<v Speaker 0>month, you can get started for free. Enjoy.
