WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 9c552967-84a3-491b-b0c5-c8e41bb4e564
Created: 2025-04-29T15:27:15.419Z
Duration: 5261.3926
Channels: 1

00:00:40.954 --> 00:00:43.995
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:00:43.995 --> 00:00:45.914
<v Speaker 0>I'm your host, David Flanagan,

00:00:45.914 --> 00:00:48.394
<v Speaker 0>also known as Rawkode across the Internet.

00:00:48.635 --> 00:00:50.475
<v Speaker 0>Today, we are taking a look at Docker

00:00:50.475 --> 00:00:52.555
<v Speaker 0>Slim, and we have two great guests joining

00:00:52.555 --> 00:00:53.114
<v Speaker 0>us today.

00:00:53.980 --> 00:00:55.500
<v Speaker 0>Now I do apologize for it's been a

00:00:55.500 --> 00:00:57.260
<v Speaker 0>little bit late today. I had a skill

00:00:57.260 --> 00:00:58.540
<v Speaker 0>run that I had to do, and not

00:00:58.540 --> 00:00:59.820
<v Speaker 0>only was I picking up my own kids,

00:00:59.820 --> 00:01:01.900
<v Speaker 0>I had to pick up the cousins too.

00:01:02.060 --> 00:01:03.820
<v Speaker 0>It's been a hectic day, but I'm really

00:01:03.820 --> 00:01:05.820
<v Speaker 0>looking forward to sitting down and chilling out

00:01:05.820 --> 00:01:07.020
<v Speaker 0>with some cool technology.

00:01:07.815 --> 00:01:09.655
<v Speaker 0>So feel free to say hello in the

00:01:09.655 --> 00:01:13.015
<v Speaker 0>chat. This is a livestream. We ask questions.

00:01:13.174 --> 00:01:15.174
<v Speaker 0>If there's anything that you're wondering, others may

00:01:15.174 --> 00:01:16.615
<v Speaker 0>be wondering it too. So type it into

00:01:16.615 --> 00:01:17.895
<v Speaker 0>the chat, and we'll do our best to

00:01:17.895 --> 00:01:18.615
<v Speaker 0>answer as we go.

00:01:19.430 --> 00:01:21.189
<v Speaker 0>Now, guiding us today in our journey of

00:01:21.189 --> 00:01:23.430
<v Speaker 0>Docker Slim is two fantastic guests. I am

00:01:23.430 --> 00:01:26.310
<v Speaker 0>joined by Martin and Ivan from the Slim

00:01:26.310 --> 00:01:28.549
<v Speaker 0>AI team. Hello. How's it going?

00:01:28.950 --> 00:01:30.950
<v Speaker 1>Hello there. Very well.

00:01:31.590 --> 00:01:33.110
<v Speaker 2>Hi. Doing great.

00:01:33.775 --> 00:01:36.095
<v Speaker 0>You know, I've done over a hundred episodes

00:01:36.095 --> 00:01:37.615
<v Speaker 0>now and you think I would learn. But

00:01:37.615 --> 00:01:38.975
<v Speaker 0>whenever I have more than one guest, I

00:01:38.975 --> 00:01:40.174
<v Speaker 0>don't know why, but I just say, hey.

00:01:40.174 --> 00:01:41.695
<v Speaker 0>How's it going? And then expect two people

00:01:41.695 --> 00:01:43.215
<v Speaker 0>to try and work out how to sequence

00:01:43.215 --> 00:01:45.375
<v Speaker 0>themselves. I really I just I need to

00:01:45.375 --> 00:01:47.295
<v Speaker 0>do that better. But thank you both for

00:01:47.295 --> 00:01:50.174
<v Speaker 0>joining me. Let's start with you, Martin. Can

00:01:49.670 --> 00:01:51.189
<v Speaker 0>you say hello and give us that brief

00:01:51.189 --> 00:01:54.229
<v Speaker 0>introduction into you, please? Sure. Hello. My name

00:01:54.229 --> 00:01:56.469
<v Speaker 1>is Martin Winpress. I lead

00:01:56.630 --> 00:01:59.909
<v Speaker 1>developer relations and community at Slim AI.

00:02:00.149 --> 00:02:00.549
<v Speaker 1>And

00:02:01.670 --> 00:02:04.445
<v Speaker 1>my background is, well, I'm a a longtime

00:02:04.445 --> 00:02:07.645
<v Speaker 1>Linux nerd. And prior to joining Slim,

00:02:07.805 --> 00:02:09.005
<v Speaker 1>I was a canonical,

00:02:09.245 --> 00:02:11.405
<v Speaker 1>engineering director for Ubuntu.

00:02:11.565 --> 00:02:14.125
<v Speaker 1>And prior to that, working on large compute

00:02:14.125 --> 00:02:15.245
<v Speaker 1>clusters for

00:02:16.480 --> 00:02:17.600
<v Speaker 1>black box,

00:02:18.000 --> 00:02:21.440
<v Speaker 1>aircraft aviation flight safety analysis for ten years

00:02:21.440 --> 00:02:23.520
<v Speaker 1>or so. So my container

00:02:23.520 --> 00:02:25.600
<v Speaker 1>background comes from sort of that that world

00:02:25.600 --> 00:02:26.800
<v Speaker 1>predominantly.

00:02:28.640 --> 00:02:30.240
<v Speaker 0>Awesome. And Ivan?

00:02:31.605 --> 00:02:34.805
<v Speaker 2>Yeah. Well, I'm just a long time software

00:02:34.805 --> 00:02:38.405
<v Speaker 2>engineer with a passion to infrastructure stuff

00:02:38.885 --> 00:02:41.285
<v Speaker 2>and then with a little bit of software

00:02:41.765 --> 00:02:44.405
<v Speaker 2>what's this? Like, site reliability experience

00:02:44.405 --> 00:02:47.420
<v Speaker 2>as well. And I've been, like, moving from

00:02:47.420 --> 00:02:49.819
<v Speaker 2>being a user, like, a long time user

00:02:49.819 --> 00:02:53.099
<v Speaker 2>of containers to a finally, a developer of

00:02:53.099 --> 00:02:55.020
<v Speaker 2>a container related technology.

00:02:55.340 --> 00:02:57.260
<v Speaker 2>So since May, I am

00:02:57.659 --> 00:03:00.299
<v Speaker 2>a part of the Slim AI engineering team

00:03:00.834 --> 00:03:02.755
<v Speaker 2>while doing all things containers.

00:03:04.435 --> 00:03:06.435
<v Speaker 0>Awesome. Thank you very much. And we've had

00:03:06.435 --> 00:03:08.194
<v Speaker 0>lots of hellos in the chat, and I

00:03:08.194 --> 00:03:09.795
<v Speaker 0>believe one of your colleagues, we did have

00:03:09.795 --> 00:03:11.235
<v Speaker 0>a low from BigPod.

00:03:11.235 --> 00:03:13.850
<v Speaker 0>And I'm loving the icon, the BGP. So

00:03:13.850 --> 00:03:15.530
<v Speaker 0>I am a bit of a networking BGP

00:03:15.530 --> 00:03:17.530
<v Speaker 0>nerd, so I appreciate that all the time.

00:03:19.209 --> 00:03:21.370
<v Speaker 0>Alright. Well, thank you for introducing yourself and

00:03:21.370 --> 00:03:22.810
<v Speaker 0>sharing a bit more about you.

00:03:23.050 --> 00:03:24.970
<v Speaker 0>Can we maybe start by just telling our

00:03:24.970 --> 00:03:26.330
<v Speaker 0>audience what

00:03:26.330 --> 00:03:27.610
<v Speaker 0>is Docker Slim?

00:03:28.145 --> 00:03:29.585
<v Speaker 0>Who wants to tackle that?

00:03:30.224 --> 00:03:32.144
<v Speaker 1>Shall I start with the origin story? And

00:03:32.144 --> 00:03:34.305
<v Speaker 1>then maybe, Ivan, you can get in sort

00:03:34.305 --> 00:03:36.065
<v Speaker 1>of the technical nuts and bolts.

00:03:36.625 --> 00:03:37.185
<v Speaker 1>So

00:03:37.425 --> 00:03:40.705
<v Speaker 1>Docker Slim was created by our CTO,

00:03:40.785 --> 00:03:43.185
<v Speaker 1>Kyle Quest, about seven years ago now.

00:03:43.910 --> 00:03:46.870
<v Speaker 1>Actually, a Docker sort of hack fest event,

00:03:46.870 --> 00:03:48.390
<v Speaker 1>and it it won I think it was

00:03:48.390 --> 00:03:50.550
<v Speaker 1>second place at that event. So that was

00:03:50.629 --> 00:03:51.750
<v Speaker 1>where it emerged.

00:03:51.989 --> 00:03:54.230
<v Speaker 1>And really what Kyle the problem that Kyle

00:03:54.230 --> 00:03:56.629
<v Speaker 1>was trying to solve back

00:03:56.075 --> 00:03:59.355
<v Speaker 1>then was how do you make containers smaller

00:03:59.355 --> 00:04:01.435
<v Speaker 1>without changing your workflow?

00:04:01.595 --> 00:04:05.035
<v Speaker 1>So you're already producing your your Docker files.

00:04:05.115 --> 00:04:07.515
<v Speaker 1>You're already producing your containers,

00:04:07.595 --> 00:04:09.195
<v Speaker 1>and you want them to be smaller, but

00:04:09.195 --> 00:04:12.290
<v Speaker 1>you don't necessarily want to move to another

00:04:12.290 --> 00:04:13.330
<v Speaker 1>distribution

00:04:13.489 --> 00:04:15.650
<v Speaker 1>in order to get the outcome that you're

00:04:15.650 --> 00:04:17.810
<v Speaker 1>seeking. So the idea is is that Docker

00:04:17.810 --> 00:04:20.209
<v Speaker 1>Slim is a post processing

00:04:20.449 --> 00:04:22.050
<v Speaker 1>capability.

00:04:22.130 --> 00:04:24.210
<v Speaker 1>So you produce your containers in the normal

00:04:24.210 --> 00:04:27.165
<v Speaker 1>way, and then you can produce these optimized

00:04:27.165 --> 00:04:29.805
<v Speaker 1>containers as sort of a a follow on,

00:04:30.125 --> 00:04:33.405
<v Speaker 1>event and and produce a separate art artifact.

00:04:33.805 --> 00:04:36.125
<v Speaker 1>So in that in that sort of early

00:04:36.125 --> 00:04:36.365
<v Speaker 1>time,

00:04:36.979 --> 00:04:39.460
<v Speaker 1>the purpose of Docker Slim was to take

00:04:39.460 --> 00:04:42.979
<v Speaker 1>your original container as an input and then

00:04:42.979 --> 00:04:43.860
<v Speaker 1>create

00:04:43.940 --> 00:04:46.020
<v Speaker 1>a smaller container

00:04:46.180 --> 00:04:49.060
<v Speaker 1>based on the artifacts in that original container

00:04:49.535 --> 00:04:52.574
<v Speaker 1>that has everything inside it that can actually

00:04:52.574 --> 00:04:54.655
<v Speaker 1>run your app, you know, be it a

00:04:54.655 --> 00:04:56.975
<v Speaker 1>service or a web app or even a

00:04:56.975 --> 00:04:58.415
<v Speaker 1>command line utility.

00:04:58.735 --> 00:05:00.895
<v Speaker 1>So that's sort of the origin story on

00:05:00.895 --> 00:05:01.615
<v Speaker 1>why

00:05:02.440 --> 00:05:04.120
<v Speaker 1>Docker Slim does what it does in the

00:05:04.120 --> 00:05:06.759
<v Speaker 1>way that it does it. But Yvonne can

00:05:06.759 --> 00:05:09.080
<v Speaker 1>give you much more insight into sort of,

00:05:09.080 --> 00:05:11.240
<v Speaker 1>you know, how it actually works internally

00:05:11.240 --> 00:05:13.639
<v Speaker 1>and some of the other capabilities that it's

00:05:13.639 --> 00:05:15.319
<v Speaker 1>grown over those seven years.

00:05:18.655 --> 00:05:19.695
<v Speaker 2>Yeah. So

00:05:20.495 --> 00:05:22.895
<v Speaker 2>the thing is that that, like, I'm myself

00:05:22.895 --> 00:05:24.335
<v Speaker 2>being a developer.

00:05:25.535 --> 00:05:28.415
<v Speaker 2>I've been struggling with this, like, bloated container

00:05:28.415 --> 00:05:29.750
<v Speaker 2>images. Like,

00:05:30.230 --> 00:05:33.270
<v Speaker 2>not because of security reasons. Like, security stuff,

00:05:33.270 --> 00:05:35.750
<v Speaker 2>it became popular only, like, a few years

00:05:35.750 --> 00:05:36.310
<v Speaker 2>ago.

00:05:36.870 --> 00:05:39.750
<v Speaker 2>But, like, even five years ago, it was,

00:05:39.830 --> 00:05:42.765
<v Speaker 2>like, a constant journey how to make images

00:05:42.765 --> 00:05:43.645
<v Speaker 2>smaller.

00:05:43.805 --> 00:05:45.645
<v Speaker 2>And for me, it always used to be,

00:05:45.645 --> 00:05:47.405
<v Speaker 2>okay. I just need to

00:05:47.805 --> 00:05:50.765
<v Speaker 2>be, I don't know, a wizard. I I

00:05:50.765 --> 00:05:52.845
<v Speaker 2>I need to understand all these,

00:05:53.085 --> 00:05:54.365
<v Speaker 2>like, distros,

00:05:54.605 --> 00:05:57.300
<v Speaker 2>which are smaller, which are, like, bigger. Like,

00:05:57.300 --> 00:05:59.780
<v Speaker 2>what what packages should I install? What what

00:05:59.780 --> 00:06:01.780
<v Speaker 2>should I avoid? And I should not forget

00:06:01.780 --> 00:06:04.260
<v Speaker 2>to clean up caches after doing some, like,

00:06:04.260 --> 00:06:04.980
<v Speaker 2>you know,

00:06:05.940 --> 00:06:08.740
<v Speaker 2>APT get installed and stuff like that. And,

00:06:08.740 --> 00:06:10.500
<v Speaker 2>like, it was, like, a craft and and,

00:06:10.500 --> 00:06:11.780
<v Speaker 2>like, a hard earned skill.

00:06:13.245 --> 00:06:14.525
<v Speaker 2>But then I

00:06:14.685 --> 00:06:15.405
<v Speaker 2>just

00:06:15.645 --> 00:06:18.205
<v Speaker 2>well, quite recently, I realized that that's not

00:06:18.205 --> 00:06:19.165
<v Speaker 2>the only way.

00:06:21.405 --> 00:06:23.165
<v Speaker 2>My actual my actual

00:06:23.485 --> 00:06:26.604
<v Speaker 2>acquaintance with Slim Eye, it started from slightly

00:06:26.604 --> 00:06:29.500
<v Speaker 2>different angle. I I was a long time

00:06:29.580 --> 00:06:31.980
<v Speaker 2>fan of the portal of the SaaS portal

00:06:31.980 --> 00:06:32.700
<v Speaker 2>we had.

00:06:33.100 --> 00:06:35.260
<v Speaker 2>And only later, I learned that there is

00:06:35.260 --> 00:06:37.020
<v Speaker 2>a tool behind it, and this tool is

00:06:37.020 --> 00:06:37.980
<v Speaker 2>Docker Slim.

00:06:38.220 --> 00:06:39.980
<v Speaker 2>And Docker Slim is well,

00:06:40.645 --> 00:06:43.044
<v Speaker 2>it's kind of a magical tool.

00:06:43.525 --> 00:06:44.324
<v Speaker 2>It's

00:06:45.205 --> 00:06:47.845
<v Speaker 2>doing all this image modification for you,

00:06:48.245 --> 00:06:49.445
<v Speaker 2>well, automatically.

00:06:49.925 --> 00:06:50.965
<v Speaker 2>And the

00:06:52.405 --> 00:06:53.925
<v Speaker 2>trick is that

00:06:55.050 --> 00:06:57.130
<v Speaker 2>it does a runtime analysis

00:06:57.130 --> 00:06:59.210
<v Speaker 2>of your containers.

00:06:59.450 --> 00:07:02.090
<v Speaker 2>So instead of now following some

00:07:02.810 --> 00:07:05.930
<v Speaker 2>elaborate techniques to build an image,

00:07:06.250 --> 00:07:09.985
<v Speaker 2>I could just kind of, go carelessly

00:07:10.385 --> 00:07:13.345
<v Speaker 2>go with my favorite Linux distro and

00:07:13.345 --> 00:07:15.665
<v Speaker 2>put there are all the packages I need

00:07:15.665 --> 00:07:18.385
<v Speaker 2>for my application to run, all the development

00:07:18.385 --> 00:07:20.065
<v Speaker 2>packet, all, like, the

00:07:20.945 --> 00:07:22.705
<v Speaker 2>source code dependencies I need,

00:07:23.490 --> 00:07:25.890
<v Speaker 2>get, like, a one, two gigabyte

00:07:25.970 --> 00:07:27.250
<v Speaker 2>big image,

00:07:28.050 --> 00:07:30.210
<v Speaker 2>then give it to Docker Slim.

00:07:30.770 --> 00:07:32.130
<v Speaker 2>It will run it,

00:07:32.610 --> 00:07:35.810
<v Speaker 2>analyze it, and produce a minified version of

00:07:35.810 --> 00:07:36.290
<v Speaker 2>this image,

00:07:36.945 --> 00:07:39.025
<v Speaker 2>which will be, like, 10 times smaller,

00:07:39.665 --> 00:07:41.185
<v Speaker 2>and it will still work.

00:07:42.065 --> 00:07:44.065
<v Speaker 2>But, of course, we need to be careful.

00:07:44.065 --> 00:07:44.705
<v Speaker 2>Like,

00:07:45.025 --> 00:07:47.665
<v Speaker 2>we shouldn't be trusting this tool blindly.

00:07:47.824 --> 00:07:50.625
<v Speaker 2>Much like with any other with any addition

00:07:51.000 --> 00:07:52.520
<v Speaker 2>to your Dockerfile,

00:07:52.600 --> 00:07:54.440
<v Speaker 2>you wouldn't add, you know, like, a line

00:07:54.440 --> 00:07:56.520
<v Speaker 2>to drop some caches and then don't check

00:07:56.520 --> 00:07:59.400
<v Speaker 2>your final image one more time.

00:07:59.800 --> 00:08:02.520
<v Speaker 2>Same with the Docker Slim. Like, once you

00:08:02.520 --> 00:08:05.160
<v Speaker 2>minify your image, you still have to be,

00:08:05.160 --> 00:08:08.275
<v Speaker 2>like, testing it as as a very final

00:08:08.275 --> 00:08:08.995
<v Speaker 2>step.

00:08:10.835 --> 00:08:12.355
<v Speaker 2>Yeah. That's how my

00:08:13.395 --> 00:08:17.315
<v Speaker 2>kind of Awesome. Journey with Docker Slim started.

00:08:17.555 --> 00:08:20.960
<v Speaker 0>Alright. I definitely have questions there. One, because

00:08:20.960 --> 00:08:23.440
<v Speaker 0>you said automatic. Whenever I hear automatic, I

00:08:23.440 --> 00:08:25.360
<v Speaker 0>have lots of questions that I wanna ask.

00:08:25.520 --> 00:08:27.040
<v Speaker 0>But before we get to that, I really

00:08:27.040 --> 00:08:29.280
<v Speaker 0>wanna focus on why this is so important.

00:08:29.280 --> 00:08:30.000
<v Speaker 0>Right? Like,

00:08:30.895 --> 00:08:32.895
<v Speaker 0>if we think back to the earlier container

00:08:32.895 --> 00:08:33.615
<v Speaker 0>days,

00:08:33.855 --> 00:08:36.255
<v Speaker 0>something I seen, I was a consultant, so

00:08:36.255 --> 00:08:37.775
<v Speaker 0>I never actually did any real work back

00:08:37.775 --> 00:08:40.575
<v Speaker 0>then, but I was helping people adopt containers.

00:08:40.575 --> 00:08:42.575
<v Speaker 0>And what I often seen is they were

00:08:42.575 --> 00:08:43.135
<v Speaker 0>taking

00:08:43.490 --> 00:08:47.170
<v Speaker 0>these very complex vagrant style builds and just

00:08:47.170 --> 00:08:49.649
<v Speaker 0>decking them straight into a container image. Like,

00:08:49.649 --> 00:08:51.570
<v Speaker 0>it was not rare to see people

00:08:51.889 --> 00:08:55.730
<v Speaker 0>with seven, eight, 30 gig container images back

00:08:55.730 --> 00:08:56.850
<v Speaker 0>in 2015,

00:08:56.850 --> 00:08:57.410
<v Speaker 0>'20 '16.

00:08:58.355 --> 00:08:59.635
<v Speaker 0>I've seen a lot of them. So much

00:08:59.635 --> 00:09:01.155
<v Speaker 0>so, I I I wrote an article on

00:09:01.155 --> 00:09:03.795
<v Speaker 0>how to debug and make them slimmer using

00:09:03.795 --> 00:09:05.795
<v Speaker 0>really crude tools. Nothing as cool as what

00:09:05.795 --> 00:09:08.355
<v Speaker 0>we're gonna see today. But literally running

00:09:08.515 --> 00:09:11.649
<v Speaker 0>an interactive container, running a command, doing a

00:09:11.649 --> 00:09:14.130
<v Speaker 0>Docker dev, seeing what changed, and then tidying

00:09:14.130 --> 00:09:15.490
<v Speaker 0>up and then trying to

00:09:15.810 --> 00:09:17.970
<v Speaker 0>wrap everything together into these little concrete run

00:09:17.970 --> 00:09:19.410
<v Speaker 0>steps. That was painful,

00:09:20.370 --> 00:09:22.050
<v Speaker 0>but effective once you got the hang of

00:09:22.050 --> 00:09:22.610
<v Speaker 0>it.

00:09:22.930 --> 00:09:23.329
<v Speaker 0>Now

00:09:24.465 --> 00:09:26.465
<v Speaker 0>what was interesting about what you said there

00:09:26.465 --> 00:09:28.385
<v Speaker 0>is you says, I can just build my

00:09:28.385 --> 00:09:30.545
<v Speaker 0>image without worrying about that size.

00:09:31.105 --> 00:09:33.585
<v Speaker 0>Point Docker Slim to it and it does

00:09:33.585 --> 00:09:34.865
<v Speaker 0>some automatic

00:09:34.865 --> 00:09:35.825
<v Speaker 0>analysis.

00:09:35.825 --> 00:09:37.665
<v Speaker 0>So if we're gonna dig into this in

00:09:37.665 --> 00:09:39.185
<v Speaker 0>any of the demos, we can defer it

00:09:39.185 --> 00:09:40.930
<v Speaker 0>to LEN, but can we maybe try and

00:09:40.930 --> 00:09:43.650
<v Speaker 0>understand what that automatic or what that analysis

00:09:43.650 --> 00:09:45.570
<v Speaker 0>looks like? How does it work out, runtime

00:09:45.570 --> 00:09:46.530
<v Speaker 0>dependencies?

00:09:46.690 --> 00:09:47.650
<v Speaker 0>I'm assuming

00:09:48.370 --> 00:09:50.450
<v Speaker 0>there may be some sort of syscalls or

00:09:50.450 --> 00:09:53.490
<v Speaker 0>EBPF or something in there. So I'd love

00:09:53.490 --> 00:09:53.970
<v Speaker 0>to know more.

00:09:55.515 --> 00:09:56.395
<v Speaker 2>Definitely.

00:09:56.635 --> 00:09:58.635
<v Speaker 2>I I think I have, like, a tiny

00:09:58.635 --> 00:10:01.435
<v Speaker 2>diagram to show, like, the high level idea.

00:10:02.154 --> 00:10:03.435
<v Speaker 2>You could open it,

00:10:04.555 --> 00:10:06.395
<v Speaker 2>or I can share my screen with that.

00:10:06.395 --> 00:10:07.995
<v Speaker 0>No. Is that on the HackMD, or do

00:10:07.995 --> 00:10:08.875
<v Speaker 0>you want me to go to the Slim

00:10:08.875 --> 00:10:10.930
<v Speaker 0>AI website? What you Yeah. In the doc.

00:10:10.930 --> 00:10:12.690
<v Speaker 2>It's the first. It's Slim.

00:10:13.170 --> 00:10:15.490
<v Speaker 2>In the HackMD, it's there, but it's also

00:10:15.490 --> 00:10:17.090
<v Speaker 2>now GitHub repository,

00:10:17.090 --> 00:10:19.090
<v Speaker 2>which is, like, Docker Slim dash Docker Slim

00:10:19.090 --> 00:10:20.530
<v Speaker 2>or slash Docker Slim.

00:10:20.930 --> 00:10:23.090
<v Speaker 0>Alright. Docker Slim

00:10:23.090 --> 00:10:23.650
<v Speaker 0>Docker.

00:10:26.245 --> 00:10:27.845
<v Speaker 0>Me make sure I've not got a oh,

00:10:27.845 --> 00:10:29.525
<v Speaker 0>I got a four zero four. Github dot

00:10:29.525 --> 00:10:33.445
<v Speaker 0>com slash docker slim? Docker dash slim slash

00:10:33.445 --> 00:10:34.725
<v Speaker 2>docker dash slim.

00:10:35.285 --> 00:10:36.805
<v Speaker 0>The pepcack.

00:10:37.285 --> 00:10:37.765
<v Speaker 0>So

00:10:38.490 --> 00:10:40.490
<v Speaker 0>Alright. I have it. So I'm gonna share

00:10:40.490 --> 00:10:41.370
<v Speaker 0>my screen.

00:10:42.730 --> 00:10:45.050
<v Speaker 0>So this is your GitHub repository for the

00:10:45.050 --> 00:10:46.490
<v Speaker 0>Docker Slim projects.

00:10:47.050 --> 00:10:48.650
<v Speaker 0>Am I gonna say images or the read

00:10:48.650 --> 00:10:51.530
<v Speaker 0>me? Just scroll down. Just scroll down a

00:10:51.530 --> 00:10:54.305
<v Speaker 2>bit. There we go. Sure. Here we go.

00:10:55.745 --> 00:10:56.785
<v Speaker 2>Yeah. So

00:10:59.505 --> 00:11:00.625
<v Speaker 2>as I already

00:11:00.785 --> 00:11:02.945
<v Speaker 2>said, it's a runtime analysis.

00:11:03.265 --> 00:11:06.625
<v Speaker 2>And by runtime analysis, I literally mean running

00:11:06.625 --> 00:11:07.745
<v Speaker 2>the target image.

00:11:08.279 --> 00:11:10.440
<v Speaker 2>So it's not like we will be

00:11:10.839 --> 00:11:11.640
<v Speaker 2>examining

00:11:11.800 --> 00:11:13.640
<v Speaker 2>the images content

00:11:13.720 --> 00:11:16.920
<v Speaker 2>or the Dockerfile or whatever. No. Instead, we'll

00:11:16.920 --> 00:11:19.160
<v Speaker 2>just I mean, Docker stream will just spin

00:11:19.160 --> 00:11:22.200
<v Speaker 2>out this container using the so called fat

00:11:22.200 --> 00:11:24.725
<v Speaker 2>image. I'm not sure how appropriate is this

00:11:24.725 --> 00:11:25.445
<v Speaker 2>language

00:11:25.685 --> 00:11:27.685
<v Speaker 2>for our auditory, but

00:11:29.045 --> 00:11:30.884
<v Speaker 2>that's what it's called internally.

00:11:30.884 --> 00:11:33.444
<v Speaker 2>Like, we take the original fat image, and

00:11:33.444 --> 00:11:34.565
<v Speaker 2>we just run it.

00:11:35.045 --> 00:11:35.365
<v Speaker 2>And

00:11:37.450 --> 00:11:39.450
<v Speaker 2>and Docker Slim, it's like a two

00:11:41.210 --> 00:11:42.650
<v Speaker 2>two fold

00:11:43.050 --> 00:11:43.930
<v Speaker 2>thingy.

00:11:44.010 --> 00:11:46.490
<v Speaker 2>It's a driver app, the one you actually

00:11:46.490 --> 00:11:47.530
<v Speaker 2>interact with,

00:11:47.930 --> 00:11:49.530
<v Speaker 2>the app called Docker Slim.

00:11:50.125 --> 00:11:52.125
<v Speaker 2>And the second part is a Docker Slim

00:11:52.125 --> 00:11:53.005
<v Speaker 2>sensor.

00:11:53.084 --> 00:11:54.445
<v Speaker 2>It's also a binary,

00:11:54.685 --> 00:11:56.045
<v Speaker 2>and it's get injected

00:11:56.125 --> 00:11:57.964
<v Speaker 2>into the target container

00:11:58.524 --> 00:11:59.884
<v Speaker 2>as a volume.

00:12:01.899 --> 00:12:03.900
<v Speaker 2>And then it becomes the

00:12:04.220 --> 00:12:05.820
<v Speaker 2>pid one in this

00:12:06.940 --> 00:12:07.900
<v Speaker 2>container.

00:12:08.220 --> 00:12:08.779
<v Speaker 2>And

00:12:09.260 --> 00:12:10.700
<v Speaker 2>it's like the thing

00:12:11.180 --> 00:12:11.900
<v Speaker 2>that

00:12:12.060 --> 00:12:13.980
<v Speaker 2>is actually doing the

00:12:14.860 --> 00:12:16.459
<v Speaker 2>well, we call it monitoring.

00:12:16.935 --> 00:12:19.335
<v Speaker 2>But, actually, it's some sort of of a

00:12:19.335 --> 00:12:20.295
<v Speaker 2>a tracing.

00:12:20.535 --> 00:12:23.015
<v Speaker 2>So it's literally a p trace call,

00:12:23.735 --> 00:12:25.575
<v Speaker 2>like, in a loop in a huge loop,

00:12:25.815 --> 00:12:28.935
<v Speaker 2>and it takes the used to be entry

00:12:28.935 --> 00:12:31.895
<v Speaker 2>point of the container, and it starts profiling

00:12:31.895 --> 00:12:32.135
<v Speaker 2>it.

00:12:32.770 --> 00:12:35.250
<v Speaker 2>And while doing this, it just keeps all

00:12:35.250 --> 00:12:37.330
<v Speaker 2>the system calls that were made,

00:12:37.970 --> 00:12:40.530
<v Speaker 2>analyzes them, and extracts

00:12:41.010 --> 00:12:44.050
<v Speaker 2>the any path related parameters.

00:12:45.215 --> 00:12:48.415
<v Speaker 2>However, this is not the only thing the

00:12:48.415 --> 00:12:51.615
<v Speaker 2>sensor does. Sensor actually is pretty sophisticated

00:12:51.615 --> 00:12:52.815
<v Speaker 2>piece of software.

00:12:53.055 --> 00:12:54.655
<v Speaker 2>It has a lot of

00:12:55.215 --> 00:12:56.255
<v Speaker 2>heuristics

00:12:56.335 --> 00:12:57.295
<v Speaker 2>and

00:12:58.350 --> 00:12:59.070
<v Speaker 2>different,

00:12:59.950 --> 00:13:01.230
<v Speaker 2>well, sort of

00:13:01.950 --> 00:13:03.470
<v Speaker 2>know hows about

00:13:03.870 --> 00:13:05.230
<v Speaker 2>various, like,

00:13:05.630 --> 00:13:08.670
<v Speaker 2>execution environments, like Python, for instance.

00:13:08.910 --> 00:13:12.590
<v Speaker 2>Because Python, it's a good example. It has

00:13:14.555 --> 00:13:16.635
<v Speaker 2>some sort of of a optimization

00:13:16.635 --> 00:13:18.475
<v Speaker 2>with this, you know, like, pi

00:13:18.714 --> 00:13:21.435
<v Speaker 2>c files that are, like, compiled

00:13:21.915 --> 00:13:22.955
<v Speaker 2>Python modules.

00:13:23.274 --> 00:13:25.675
<v Speaker 2>And when a new module is imported,

00:13:25.915 --> 00:13:26.795
<v Speaker 2>apparently,

00:13:26.795 --> 00:13:27.514
<v Speaker 2>only the

00:13:28.399 --> 00:13:31.440
<v Speaker 2>this PYC file will be accessed

00:13:31.440 --> 00:13:33.440
<v Speaker 2>by the Python in interpreter.

00:13:33.920 --> 00:13:36.319
<v Speaker 2>And the sensor actually knows that if it

00:13:36.319 --> 00:13:37.279
<v Speaker 2>detects

00:13:37.519 --> 00:13:38.240
<v Speaker 2>a

00:13:38.399 --> 00:13:39.360
<v Speaker 2>file read

00:13:40.405 --> 00:13:43.045
<v Speaker 2>that ends with a PYC extension,

00:13:43.365 --> 00:13:45.205
<v Speaker 2>it should go and look up a corresponding

00:13:45.205 --> 00:13:46.245
<v Speaker 2>source file.

00:13:46.885 --> 00:13:49.365
<v Speaker 2>And it's full of such heuristics for, like,

00:13:49.445 --> 00:13:50.885
<v Speaker 2>various languages.

00:13:51.925 --> 00:13:54.245
<v Speaker 2>Well, another good example probably is

00:13:54.950 --> 00:13:57.910
<v Speaker 2>when a sensor detects a binary file.

00:13:58.310 --> 00:14:00.550
<v Speaker 2>And if this file is a binary execution

00:14:00.550 --> 00:14:02.950
<v Speaker 2>file or a shared object,

00:14:03.270 --> 00:14:05.430
<v Speaker 2>it would just go and check the l

00:14:05.590 --> 00:14:08.470
<v Speaker 2>LDD for this file and see all its

00:14:08.470 --> 00:14:09.750
<v Speaker 2>dynamic dependencies

00:14:10.105 --> 00:14:12.585
<v Speaker 2>to also look them up even

00:14:12.745 --> 00:14:15.225
<v Speaker 2>though they might not be accessed during the

00:14:15.225 --> 00:14:16.025
<v Speaker 2>execution.

00:14:16.345 --> 00:14:17.705
<v Speaker 2>So in the end,

00:14:18.825 --> 00:14:20.665
<v Speaker 2>when the underlying

00:14:20.665 --> 00:14:21.465
<v Speaker 2>containerized

00:14:21.465 --> 00:14:24.800
<v Speaker 2>application is done or we decided to stop

00:14:24.800 --> 00:14:25.440
<v Speaker 2>actually

00:14:25.760 --> 00:14:28.400
<v Speaker 2>probing it, we will have, like, a huge

00:14:28.400 --> 00:14:29.440
<v Speaker 2>list of

00:14:30.080 --> 00:14:31.200
<v Speaker 2>all the files

00:14:31.600 --> 00:14:34.960
<v Speaker 2>or potential files that are actually needed for

00:14:34.960 --> 00:14:36.400
<v Speaker 2>the execution of this application.

00:14:37.134 --> 00:14:37.774
<v Speaker 2>And,

00:14:38.095 --> 00:14:40.894
<v Speaker 2>yeah, that's how the runtime analysis actually looks.

00:14:41.935 --> 00:14:44.495
<v Speaker 0>Okay. Yeah. Now one of the things you

00:14:44.495 --> 00:14:47.295
<v Speaker 1>touched on earlier was your nervousness about things

00:14:47.295 --> 00:14:48.815
<v Speaker 1>that do things automatically.

00:14:49.230 --> 00:14:51.630
<v Speaker 1>And whilst there is some sophistication

00:14:51.630 --> 00:14:53.710
<v Speaker 1>and as Yvonne has just described,

00:14:54.029 --> 00:14:55.630
<v Speaker 1>a lot of sort of heuristics,

00:14:55.630 --> 00:14:56.590
<v Speaker 1>the AI

00:14:56.830 --> 00:14:59.709
<v Speaker 1>in our, you know, company name, it is

00:14:59.709 --> 00:15:03.310
<v Speaker 1>application intelligence rather than artificial intelligence. It's this

00:15:03.584 --> 00:15:07.264
<v Speaker 1>knowledge of different language ecosystems and frameworks that's

00:15:07.264 --> 00:15:08.545
<v Speaker 1>that's baked in.

00:15:08.944 --> 00:15:09.345
<v Speaker 1>But

00:15:10.064 --> 00:15:13.425
<v Speaker 1>you're quite right to suggest that, you know,

00:15:13.504 --> 00:15:14.305
<v Speaker 1>purely

00:15:14.305 --> 00:15:15.185
<v Speaker 1>automatic

00:15:15.185 --> 00:15:16.064
<v Speaker 1>systems

00:15:16.509 --> 00:15:18.670
<v Speaker 1>can be prone to error. And one of

00:15:18.670 --> 00:15:20.670
<v Speaker 1>the examples we're gonna show when we actually

00:15:20.670 --> 00:15:22.750
<v Speaker 1>get into the sort of the hands on

00:15:22.750 --> 00:15:24.110
<v Speaker 1>examples later

00:15:24.269 --> 00:15:26.510
<v Speaker 1>is how you can feed

00:15:26.829 --> 00:15:28.750
<v Speaker 1>the Docker Slim process

00:15:29.545 --> 00:15:32.905
<v Speaker 1>additional hints about where it should go and

00:15:32.905 --> 00:15:35.145
<v Speaker 1>look and probe the application.

00:15:35.625 --> 00:15:36.265
<v Speaker 1>So

00:15:36.825 --> 00:15:38.665
<v Speaker 1>I I'm not gonna I'm not gonna talk

00:15:38.665 --> 00:15:40.425
<v Speaker 1>about that example specifically,

00:15:40.425 --> 00:15:41.865
<v Speaker 1>but sort of one of the best things

00:15:41.865 --> 00:15:43.385
<v Speaker 1>that you can do is if you've got

00:15:43.385 --> 00:15:46.800
<v Speaker 1>integration tests for your application. So you produce

00:15:46.800 --> 00:15:49.680
<v Speaker 1>your container image and you have integration tests.

00:15:49.760 --> 00:15:51.200
<v Speaker 1>One of the best things you can do

00:15:51.200 --> 00:15:54.240
<v Speaker 1>is when you produce your Slim container with

00:15:54.240 --> 00:15:55.280
<v Speaker 1>Docker Slim

00:15:55.360 --> 00:15:58.960
<v Speaker 1>is instruct Docker Slim to run those integration

00:15:58.960 --> 00:15:59.520
<v Speaker 1>tests

00:15:59.865 --> 00:16:03.945
<v Speaker 1>whilst it's observing the application because that should

00:16:04.025 --> 00:16:05.945
<v Speaker 1>exercise the application

00:16:05.945 --> 00:16:06.825
<v Speaker 1>broadly,

00:16:06.825 --> 00:16:09.865
<v Speaker 1>hit all of the different execution paths,

00:16:09.945 --> 00:16:12.585
<v Speaker 1>and gather all of that application knowledge in

00:16:12.585 --> 00:16:14.025
<v Speaker 1>order to produce

00:16:14.265 --> 00:16:15.465
<v Speaker 1>a minimized

00:16:15.680 --> 00:16:17.440
<v Speaker 1>optimized container

00:16:17.440 --> 00:16:19.920
<v Speaker 1>that actually has everything inside it that the

00:16:19.920 --> 00:16:21.760
<v Speaker 1>application requires to run.

00:16:22.079 --> 00:16:25.680
<v Speaker 1>Now there are examples where that doesn't work.

00:16:25.680 --> 00:16:26.480
<v Speaker 1>For example,

00:16:27.120 --> 00:16:29.200
<v Speaker 1>we we did an example recently where we

00:16:29.200 --> 00:16:32.785
<v Speaker 1>created the world's best image carousel app because

00:16:32.785 --> 00:16:36.065
<v Speaker 1>we were experimenting with different technologies. And we

00:16:36.065 --> 00:16:37.825
<v Speaker 1>did that on a livestream, and one of

00:16:37.825 --> 00:16:40.705
<v Speaker 1>the things we discovered with that is because,

00:16:40.945 --> 00:16:43.265
<v Speaker 1>the images weren't precached in the carousel,

00:16:43.970 --> 00:16:44.690
<v Speaker 1>the

00:16:44.850 --> 00:16:47.090
<v Speaker 1>container that was produced didn't have all of

00:16:47.090 --> 00:16:49.170
<v Speaker 1>the images that should have been inside the

00:16:49.170 --> 00:16:50.050
<v Speaker 1>carousel.

00:16:50.210 --> 00:16:51.810
<v Speaker 1>So one of the things you can do

00:16:51.810 --> 00:16:54.210
<v Speaker 1>is you can tell Docker Slim, actually, I

00:16:54.210 --> 00:16:56.690
<v Speaker 1>know I have static assets in this app.

00:16:57.615 --> 00:17:00.895
<v Speaker 1>So in this path are my static assets.

00:17:00.895 --> 00:17:03.935
<v Speaker 1>You should always include everything in this directory

00:17:04.335 --> 00:17:06.655
<v Speaker 1>when you're minifying the container because I know

00:17:06.655 --> 00:17:08.494
<v Speaker 1>everything in there you're going it the the

00:17:08.494 --> 00:17:10.575
<v Speaker 1>application is going to require whether or not

00:17:10.575 --> 00:17:13.619
<v Speaker 1>it got hit during the the the censoring

00:17:13.619 --> 00:17:16.099
<v Speaker 1>and observation that that Docker Slim does.

00:17:16.500 --> 00:17:17.539
<v Speaker 0>Awesome.

00:17:18.179 --> 00:17:20.339
<v Speaker 0>Thank you for all of that context.

00:17:20.740 --> 00:17:22.419
<v Speaker 0>I wanna make sure that I understood it,

00:17:22.419 --> 00:17:24.179
<v Speaker 0>so I'm gonna try and surmise that all

00:17:24.179 --> 00:17:25.539
<v Speaker 0>in, like, two sentences.

00:17:25.859 --> 00:17:26.339
<v Speaker 0>But

00:17:26.954 --> 00:17:27.994
<v Speaker 0>Docker Slim

00:17:28.155 --> 00:17:30.234
<v Speaker 0>will run my container image,

00:17:30.635 --> 00:17:32.715
<v Speaker 0>inject in a PID one, which then subsequently

00:17:32.715 --> 00:17:34.635
<v Speaker 0>runs the command that my container image is

00:17:34.635 --> 00:17:35.434
<v Speaker 0>built to run.

00:17:35.995 --> 00:17:38.235
<v Speaker 0>It does Cisco monitoring, which means it's looking

00:17:38.235 --> 00:17:40.510
<v Speaker 0>for things like f open for

00:17:40.510 --> 00:17:42.909
<v Speaker 0>any file that is opened on that machine.

00:17:43.070 --> 00:17:44.429
<v Speaker 0>It keeps track of some

00:17:44.910 --> 00:17:47.390
<v Speaker 0>sort of graph or table, and then those

00:17:47.390 --> 00:17:48.990
<v Speaker 0>are the files that are propagated down to

00:17:48.990 --> 00:17:50.270
<v Speaker 0>the Slim image.

00:17:50.590 --> 00:17:52.845
<v Speaker 0>This makes sense. Now I have a question

00:17:52.845 --> 00:17:54.285
<v Speaker 0>about that Slim image, but I'll come back

00:17:54.285 --> 00:17:55.164
<v Speaker 0>to that in a moment.

00:17:55.725 --> 00:17:58.205
<v Speaker 0>You also mentioned you've got some smarts application

00:17:58.205 --> 00:17:59.965
<v Speaker 0>intelligence, and I love that use of AI.

00:17:59.965 --> 00:18:02.125
<v Speaker 0>Actually, that's that's probably the only valuable use

00:18:02.125 --> 00:18:04.220
<v Speaker 0>of AI I've ever heard. Now

00:18:05.020 --> 00:18:06.220
<v Speaker 0>and what it's doing

00:18:07.740 --> 00:18:09.740
<v Speaker 0>what it's doing is you understand Python. I

00:18:09.740 --> 00:18:10.940
<v Speaker 0>mean, that's a it's just a problem for

00:18:10.940 --> 00:18:13.420
<v Speaker 0>interpreted languages rather than compiled languages, right, where

00:18:13.420 --> 00:18:15.180
<v Speaker 0>they have these different dynamics where they're trying

00:18:15.180 --> 00:18:16.860
<v Speaker 0>to speed up that interpreter as much as

00:18:16.860 --> 00:18:19.825
<v Speaker 0>possible by doing binary cache in some layer.

00:18:19.825 --> 00:18:21.985
<v Speaker 0>So, yeah, you've got knowledge for Python. I'm

00:18:21.985 --> 00:18:24.305
<v Speaker 0>assuming maybe Ruby, PHP, other things like that

00:18:24.305 --> 00:18:26.145
<v Speaker 0>so that that just works as best as

00:18:26.145 --> 00:18:26.784
<v Speaker 0>it can.

00:18:27.985 --> 00:18:29.105
<v Speaker 0>You've also told me that I need to

00:18:29.105 --> 00:18:31.665
<v Speaker 0>write tests, so I'm I'm obviously guilty of

00:18:31.680 --> 00:18:32.080
<v Speaker 0>taking

00:18:32.480 --> 00:18:34.400
<v Speaker 0>a little bit lax on the integration test,

00:18:34.400 --> 00:18:36.480
<v Speaker 0>but I can understand their You don't need

00:18:36.480 --> 00:18:38.640
<v Speaker 1>to, but it will be beneficial.

00:18:38.720 --> 00:18:40.560
<v Speaker 0>Because it increases the coverage of the code

00:18:40.560 --> 00:18:42.480
<v Speaker 0>path for the Slim AI intelligence,

00:18:42.480 --> 00:18:43.360
<v Speaker 0>which I get. Okay.

00:18:44.035 --> 00:18:45.634
<v Speaker 0>So I understand the collection.

00:18:45.795 --> 00:18:47.235
<v Speaker 0>I understand what it's doing.

00:18:47.635 --> 00:18:49.715
<v Speaker 0>I see here on this image, which I

00:18:49.715 --> 00:18:52.035
<v Speaker 0>love, is generate security profiles. The fact that

00:18:52.035 --> 00:18:54.675
<v Speaker 0>you're doing, I'm assuming, seccomp and Cisco stuff

00:18:54.675 --> 00:18:56.515
<v Speaker 0>is you can help build that seccomp profile.

00:18:56.515 --> 00:18:57.635
<v Speaker 0>I don't know if that's true, but we

00:18:57.635 --> 00:18:58.515
<v Speaker 0>can talk about that later.

00:18:59.690 --> 00:19:01.370
<v Speaker 0>My main question right now is about that

00:19:01.370 --> 00:19:03.450
<v Speaker 0>image that comes out the other end. Now

00:19:03.450 --> 00:19:06.090
<v Speaker 0>are you taking all those files from the

00:19:06.090 --> 00:19:08.250
<v Speaker 0>table graph and then putting them into a

00:19:08.250 --> 00:19:10.410
<v Speaker 0>scratch image, or are you using a small

00:19:10.410 --> 00:19:12.490
<v Speaker 0>base layer that Slim AI has approved with

00:19:12.490 --> 00:19:14.955
<v Speaker 0>some tooling or substrate? Like, what what does

00:19:14.955 --> 00:19:16.794
<v Speaker 0>that output look like?

00:19:18.235 --> 00:19:19.355
<v Speaker 2>It's a scratch.

00:19:20.075 --> 00:19:22.235
<v Speaker 2>Like, literally a scratch. And the

00:19:22.955 --> 00:19:24.875
<v Speaker 2>well, we will actually see it. If if

00:19:24.875 --> 00:19:26.875
<v Speaker 2>you go through this tiny little demo,

00:19:28.150 --> 00:19:30.070
<v Speaker 2>the very first one on our list,

00:19:30.630 --> 00:19:33.030
<v Speaker 2>we will see exactly how the unified image

00:19:33.030 --> 00:19:33.830
<v Speaker 2>looks like.

00:19:34.230 --> 00:19:36.470
<v Speaker 0>Yeah. Alright. Well yeah. Go for it. What

00:19:36.470 --> 00:19:39.190
<v Speaker 1>you'll what you'll get is a single layer

00:19:39.190 --> 00:19:42.485
<v Speaker 1>container image that only contains the assets that

00:19:42.485 --> 00:19:44.725
<v Speaker 1>are required to run your application

00:19:44.965 --> 00:19:46.965
<v Speaker 1>that came from the original image.

00:19:47.445 --> 00:19:49.765
<v Speaker 0>Okay. So, yeah, it's scratch image where you

00:19:49.765 --> 00:19:51.125
<v Speaker 0>just throw a lot of stuff at Okay.

00:19:51.765 --> 00:19:52.644
<v Speaker 0>Nice. Yep.

00:19:53.045 --> 00:19:53.605
<v Speaker 0>I

00:19:53.990 --> 00:19:56.230
<v Speaker 0>think we should run through the first demo

00:19:56.230 --> 00:19:57.670
<v Speaker 0>then when we move on to the the

00:19:57.670 --> 00:19:59.590
<v Speaker 0>hands on component. And then if anyone in

00:19:59.590 --> 00:20:01.270
<v Speaker 0>the audience has questions, please feel free to

00:20:01.270 --> 00:20:02.390
<v Speaker 0>put them in the chat, and I'll keep

00:20:02.390 --> 00:20:04.630
<v Speaker 0>any questions that I have coming as well.

00:20:05.670 --> 00:20:05.910
<v Speaker 0>So

00:20:06.664 --> 00:20:09.065
<v Speaker 0>I have a nice small machine here for

00:20:09.065 --> 00:20:11.065
<v Speaker 0>us to work with today. I

00:20:11.465 --> 00:20:12.985
<v Speaker 0>I just love typing h top in this

00:20:12.985 --> 00:20:14.025
<v Speaker 0>machine, so I'm gonna do it one more

00:20:14.025 --> 00:20:15.784
<v Speaker 0>time. I mean, I can even type.

00:20:20.580 --> 00:20:22.660
<v Speaker 0>No. My terminal died.

00:20:26.900 --> 00:20:27.380
<v Speaker 0>Uh-oh.

00:20:36.905 --> 00:20:38.424
<v Speaker 0>I know what I've done.

00:20:38.905 --> 00:20:41.865
<v Speaker 2>Oh, should I help you? Yeah. I've when

00:20:41.865 --> 00:20:43.065
<v Speaker 0>I've added your

00:20:43.305 --> 00:20:46.505
<v Speaker 0>public key, I've removed my public key.

00:20:47.305 --> 00:20:47.625
<v Speaker 0>I'm gonna

00:20:49.600 --> 00:20:50.639
<v Speaker 0>I'm gonna sit.

00:20:51.200 --> 00:20:52.080
<v Speaker 2>Sit. That

00:20:53.360 --> 00:20:54.480
<v Speaker 1>gets repaired,

00:20:54.720 --> 00:20:56.960
<v Speaker 1>I I can I can give

00:20:57.200 --> 00:20:59.920
<v Speaker 1>an example of a use case of Docker

00:20:59.920 --> 00:21:02.080
<v Speaker 1>Slim that we see from our customers to

00:21:02.080 --> 00:21:02.560
<v Speaker 1>sort of

00:21:03.184 --> 00:21:06.544
<v Speaker 1>fill fill this space whilst you recover your

00:21:06.545 --> 00:21:09.825
<v Speaker 1>access? Alright. Well, just quick quickly, Ivan, I

00:21:09.825 --> 00:21:11.105
<v Speaker 0>have sent you my public key in the

00:21:11.105 --> 00:21:12.785
<v Speaker 0>private chat. Could you add it? Yeah. Thank

00:21:12.785 --> 00:21:14.384
<v Speaker 0>you. Alright. Martin, take it away.

00:21:14.865 --> 00:21:15.424
<v Speaker 1>So,

00:21:15.665 --> 00:21:17.505
<v Speaker 1>one of the use cases that this is

00:21:17.505 --> 00:21:19.320
<v Speaker 1>not the exclusive use case. One of the

00:21:19.320 --> 00:21:21.640
<v Speaker 1>use cases we see for Docker Slim is

00:21:21.640 --> 00:21:22.200
<v Speaker 1>this.

00:21:22.520 --> 00:21:25.799
<v Speaker 1>Because you can take literally any image and

00:21:25.799 --> 00:21:27.639
<v Speaker 1>make it small and optimized,

00:21:28.200 --> 00:21:30.760
<v Speaker 1>and there is we're seeing a trend. So

00:21:30.760 --> 00:21:31.960
<v Speaker 1>one of our colleagues,

00:21:32.120 --> 00:21:32.840
<v Speaker 1>Aisha, did

00:21:33.955 --> 00:21:36.195
<v Speaker 1>a she looked at over a hundred of

00:21:36.195 --> 00:21:38.115
<v Speaker 1>the most popular containers at the end of

00:21:38.115 --> 00:21:40.274
<v Speaker 1>last year that are published in Docker Hub

00:21:40.514 --> 00:21:43.634
<v Speaker 1>and produced a report, a container report, sort

00:21:43.634 --> 00:21:46.115
<v Speaker 1>of the the state of the container ecosystem.

00:21:46.610 --> 00:21:48.610
<v Speaker 1>And one of the things that we spotted

00:21:48.610 --> 00:21:50.610
<v Speaker 1>in that is the proliferation

00:21:50.610 --> 00:21:51.169
<v Speaker 1>of

00:21:51.810 --> 00:21:54.610
<v Speaker 1>test QA and infrastructure infrastructure

00:21:54.610 --> 00:21:55.490
<v Speaker 1>tooling

00:21:55.650 --> 00:21:58.210
<v Speaker 1>that makes its way into containers that are

00:21:58.210 --> 00:22:00.770
<v Speaker 1>considered production ready that are published in Docker

00:22:00.770 --> 00:22:02.445
<v Speaker 1>Hub authoritatively

00:22:02.445 --> 00:22:04.764
<v Speaker 1>by the various projects and what have you.

00:22:04.845 --> 00:22:06.764
<v Speaker 1>And it's also something we see,

00:22:07.485 --> 00:22:08.764
<v Speaker 1>you know, software

00:22:09.085 --> 00:22:10.684
<v Speaker 1>houses doing as well.

00:22:11.245 --> 00:22:13.830
<v Speaker 1>So one of the uses is this. You

00:22:13.830 --> 00:22:15.590
<v Speaker 1>can have large,

00:22:15.669 --> 00:22:18.389
<v Speaker 1>well instrumented containers that are

00:22:19.910 --> 00:22:22.950
<v Speaker 1>suitable for developers to use for local iterative

00:22:22.950 --> 00:22:25.350
<v Speaker 1>development that have all of your tooling baked

00:22:25.350 --> 00:22:27.894
<v Speaker 1>in. But then when you want to ship

00:22:27.894 --> 00:22:29.654
<v Speaker 1>those containers to production,

00:22:30.054 --> 00:22:33.174
<v Speaker 1>you can run them through Docker Slim as

00:22:33.174 --> 00:22:34.615
<v Speaker 1>part of your CICD

00:22:34.615 --> 00:22:35.494
<v Speaker 1>pipeline

00:22:35.575 --> 00:22:38.215
<v Speaker 1>in order to take that sort of dev

00:22:38.215 --> 00:22:38.774
<v Speaker 1>environment

00:22:39.169 --> 00:22:42.609
<v Speaker 1>and transform it into a production ready container

00:22:43.090 --> 00:22:45.249
<v Speaker 1>suitable for deploying in the cloud,

00:22:45.570 --> 00:22:48.210
<v Speaker 1>which has the shells and utilities

00:22:48.210 --> 00:22:50.609
<v Speaker 1>and infrastructure tooling removed

00:22:50.770 --> 00:22:53.725
<v Speaker 1>such that if there is unfortunate bug in

00:22:53.725 --> 00:22:55.725
<v Speaker 1>the application that you're writing

00:22:55.885 --> 00:22:58.445
<v Speaker 1>and that somebody is able to compromise that

00:22:58.445 --> 00:23:00.445
<v Speaker 1>and land inside your container,

00:23:00.684 --> 00:23:02.445
<v Speaker 1>they're now inside

00:23:02.445 --> 00:23:04.605
<v Speaker 1>a sort of a barren wasteland

00:23:04.684 --> 00:23:07.370
<v Speaker 1>where they have no tooling that they can

00:23:07.370 --> 00:23:10.970
<v Speaker 1>use against your infrastructure to disrupt your operations

00:23:10.970 --> 00:23:14.010
<v Speaker 1>as opposed to landing inside sort of a

00:23:14.010 --> 00:23:16.730
<v Speaker 1>richly instrumented container, which has all of the

00:23:16.730 --> 00:23:19.405
<v Speaker 1>necessary tooling inside it for them to potentially

00:23:19.405 --> 00:23:21.645
<v Speaker 1>island hop and disrupt the rest of your

00:23:21.645 --> 00:23:22.445
<v Speaker 1>operations.

00:23:22.605 --> 00:23:25.085
<v Speaker 1>So that's one use case we see. Transform

00:23:25.165 --> 00:23:27.005
<v Speaker 1>your dev test,

00:23:27.965 --> 00:23:31.245
<v Speaker 1>sort of well instrumented containers for iterative development

00:23:31.245 --> 00:23:32.925
<v Speaker 1>into production ready containers.

00:23:34.300 --> 00:23:35.500
<v Speaker 0>Alright. Awesome.

00:23:36.620 --> 00:23:37.340
<v Speaker 0>Okay.

00:23:37.420 --> 00:23:39.100
<v Speaker 0>Let's try this again then.

00:23:39.500 --> 00:23:40.140
<v Speaker 0>So

00:23:41.100 --> 00:23:43.100
<v Speaker 0>finally, I can run htop.

00:23:43.740 --> 00:23:46.195
<v Speaker 0>So I spun up a pretty fun machine

00:23:46.195 --> 00:23:48.195
<v Speaker 0>on Equinix metal just because I thought it

00:23:48.195 --> 00:23:49.715
<v Speaker 0>would be fun. So we have a terabyte

00:23:49.715 --> 00:23:51.955
<v Speaker 0>of RAM, which I'm excited to start using

00:23:51.955 --> 00:23:54.195
<v Speaker 0>because, you know, sometimes you need a terabyte

00:23:54.195 --> 00:23:56.195
<v Speaker 0>of RAM and we have a 28 cores

00:23:56.195 --> 00:23:57.475
<v Speaker 0>or threads at least.

00:23:58.940 --> 00:24:01.580
<v Speaker 0>The only thing I've done Just a tiny

00:24:01.580 --> 00:24:04.379
<v Speaker 2>note. It's not a requirement for the.

00:24:08.059 --> 00:24:10.379
<v Speaker 0>No. It def it's definitely not a requirement.

00:24:10.540 --> 00:24:12.700
<v Speaker 0>I I I I just wanted to have

00:24:12.700 --> 00:24:13.100
<v Speaker 0>some fun.

00:24:13.925 --> 00:24:16.245
<v Speaker 2>Usually, use twice bigger machines.

00:24:19.045 --> 00:24:20.965
<v Speaker 0>Okay. So what have we done to this

00:24:20.965 --> 00:24:23.445
<v Speaker 0>machine in preparation for today's demo? The answer

00:24:23.445 --> 00:24:26.165
<v Speaker 0>is not a lot. I have installed Docker.

00:24:27.460 --> 00:24:29.219
<v Speaker 0>We have kind available.

00:24:29.220 --> 00:24:31.700
<v Speaker 0>We have not spun up any Kubernetes cluster,

00:24:31.940 --> 00:24:33.860
<v Speaker 0>and I was also requested to make sure

00:24:33.860 --> 00:24:36.259
<v Speaker 0>that we had make and get available.

00:24:36.580 --> 00:24:38.820
<v Speaker 0>I believe that was all the prerequisites.

00:24:38.980 --> 00:24:39.460
<v Speaker 0>So

00:24:39.784 --> 00:24:41.945
<v Speaker 0>pretty much just a basic into install with

00:24:41.945 --> 00:24:43.864
<v Speaker 0>a couple of little tools on the top.

00:24:45.385 --> 00:24:47.865
<v Speaker 0>Last question then. Ivan, am I allowed to

00:24:47.945 --> 00:24:48.424
<v Speaker 0>is

00:24:48.904 --> 00:24:50.904
<v Speaker 0>this the HackMD public? Is this something I

00:24:50.904 --> 00:24:52.024
<v Speaker 0>can put in the show notes so people

00:24:52.024 --> 00:24:53.065
<v Speaker 0>can follow along on their own time?

00:24:53.880 --> 00:24:55.880
<v Speaker 2>Yeah. Pretty much, sir. It's nothing secret.

00:24:56.440 --> 00:24:57.159
<v Speaker 0>Alright.

00:24:57.640 --> 00:24:59.000
<v Speaker 0>And what I will do is I will

00:24:59.000 --> 00:25:00.440
<v Speaker 0>just open it here as well so that

00:25:00.440 --> 00:25:02.440
<v Speaker 0>people can follow along as we work through

00:25:02.440 --> 00:25:03.320
<v Speaker 0>it. So

00:25:04.200 --> 00:25:06.360
<v Speaker 0>there's that diagram, and we're gonna work through

00:25:06.360 --> 00:25:09.455
<v Speaker 0>demo one basics. So I'm I'm gonna work

00:25:09.455 --> 00:25:10.815
<v Speaker 0>through a couple of these ones

00:25:11.215 --> 00:25:12.654
<v Speaker 0>to get a feel for it. You just

00:25:12.654 --> 00:25:14.495
<v Speaker 0>took and please feel free to add context

00:25:14.495 --> 00:25:16.894
<v Speaker 0>and history and all that other good knowledge,

00:25:16.894 --> 00:25:18.495
<v Speaker 0>and then Ivan is gonna do something bit

00:25:18.495 --> 00:25:19.774
<v Speaker 0>more fun as well for us.

00:25:20.750 --> 00:25:22.029
<v Speaker 0>I'll try.

00:25:23.470 --> 00:25:25.309
<v Speaker 0>I've got a lot of confidence in you.

00:25:25.309 --> 00:25:25.950
<v Speaker 0>Don't worry.

00:25:26.269 --> 00:25:28.349
<v Speaker 0>So first thing we need the OC.

00:25:29.870 --> 00:25:31.309
<v Speaker 0>First thing we need to do is pull

00:25:31.309 --> 00:25:34.184
<v Speaker 0>the CentOS image. So this demo one is

00:25:34.184 --> 00:25:36.265
<v Speaker 0>going to make a curl only image from

00:25:36.265 --> 00:25:38.585
<v Speaker 0>a full blown CentOS distribution.

00:25:38.665 --> 00:25:40.665
<v Speaker 0>So this is that case where you have

00:25:40.665 --> 00:25:42.425
<v Speaker 0>this chunky image, but when you go to

00:25:42.425 --> 00:25:44.345
<v Speaker 0>prod, you wanna minimize that as much as

00:25:44.345 --> 00:25:44.985
<v Speaker 0>possible.

00:25:45.385 --> 00:25:47.145
<v Speaker 0>And so we we just want a Slim

00:25:47.145 --> 00:25:47.545
<v Speaker 0>image.

00:25:48.740 --> 00:25:50.740
<v Speaker 0>Yeah. That was pretty fast, which is good.

00:25:50.820 --> 00:25:52.500
<v Speaker 0>So now we're gonna Slim it. And for

00:25:52.500 --> 00:25:53.940
<v Speaker 0>that, we need Docker Slim. So I haven't

00:25:53.940 --> 00:25:55.940
<v Speaker 0>installed that upfront. I rarely like to do

00:25:55.940 --> 00:25:57.300
<v Speaker 0>that upfront. So we're gonna go through the

00:25:57.300 --> 00:25:58.660
<v Speaker 0>install process too.

00:25:59.380 --> 00:26:01.940
<v Speaker 0>Let me jump back to that GitHub repository.

00:26:01.940 --> 00:26:03.780
<v Speaker 0>I'm assuming I just pull a binary from

00:26:03.780 --> 00:26:04.340
<v Speaker 0>the releases.

00:26:07.045 --> 00:26:08.164
<v Speaker 0>Is there a prepared

00:26:08.485 --> 00:26:10.405
<v Speaker 0>I can. Okay. Is there a nicer way?

00:26:10.485 --> 00:26:12.725
<v Speaker 1>Can do that. There's also there's also a

00:26:12.725 --> 00:26:15.125
<v Speaker 1>simple script which will do all the magic

00:26:15.125 --> 00:26:16.804
<v Speaker 1>and grab the latest version. It's all in

00:26:16.804 --> 00:26:19.205
<v Speaker 1>the read me and the in the installation

00:26:19.170 --> 00:26:21.809
<v Speaker 1>section. I don't read read mes. Come on.

00:26:22.450 --> 00:26:23.809
<v Speaker 1>Oh, I know.

00:26:24.210 --> 00:26:25.330
<v Speaker 1>How tedious.

00:26:25.730 --> 00:26:26.610
<v Speaker 0>Alright.

00:26:26.610 --> 00:26:27.490
<v Speaker 0>Installation.

00:26:28.610 --> 00:26:30.130
<v Speaker 0>So if you scroll down, there we go.

00:26:30.130 --> 00:26:32.725
<v Speaker 1>Scripted install. If you just grab that, that

00:26:32.725 --> 00:26:34.164
<v Speaker 1>will that will do what you need. Oh,

00:26:34.164 --> 00:26:36.085
<v Speaker 0>there's a homebrew as well for people on

00:26:36.085 --> 00:26:38.484
<v Speaker 0>Linux or Mac with brew available. Right?

00:26:38.804 --> 00:26:40.325
<v Speaker 0>And a Docker image.

00:26:40.565 --> 00:26:41.205
<v Speaker 0>Alright.

00:26:41.365 --> 00:26:43.605
<v Speaker 0>I will trust your scripts, which I'm assuming

00:26:43.605 --> 00:26:46.440
<v Speaker 0>is curl and pipe into bash. So Don't.

00:26:46.440 --> 00:26:47.080
<v Speaker 2>Don't.

00:26:47.320 --> 00:26:50.200
<v Speaker 2>Yeah. Yeah. Well, essentially, it's just like two

00:26:50.200 --> 00:26:51.000
<v Speaker 2>binaries,

00:26:51.000 --> 00:26:53.559
<v Speaker 2>the Docker Slim itself and the Docker Slim

00:26:53.559 --> 00:26:56.360
<v Speaker 2>sensor, and a move of these binaries to

00:26:56.360 --> 00:26:56.919
<v Speaker 2>the,

00:26:57.320 --> 00:26:59.320
<v Speaker 2>well, USR local bin, I guess.

00:27:00.395 --> 00:27:01.274
<v Speaker 0>Awesome.

00:27:01.674 --> 00:27:03.835
<v Speaker 0>Alright. So we've run the script. It was

00:27:03.835 --> 00:27:06.075
<v Speaker 0>successful. We jump back to our tutorial.

00:27:06.235 --> 00:27:07.914
<v Speaker 0>So now we're going to run Docker Slim,

00:27:07.914 --> 00:27:09.355
<v Speaker 0>and we're saying that we want to build

00:27:09.355 --> 00:27:10.154
<v Speaker 0>an image.

00:27:11.434 --> 00:27:12.554
<v Speaker 0>We have a target,

00:27:14.380 --> 00:27:16.460
<v Speaker 0>which is our base layer, I guess, and

00:27:16.460 --> 00:27:18.220
<v Speaker 0>then the tag, which is what our small

00:27:18.220 --> 00:27:20.780
<v Speaker 0>image is going to be called. Yes. I'm

00:27:20.780 --> 00:27:22.059
<v Speaker 0>not sure what the issue to be probe

00:27:22.059 --> 00:27:23.740
<v Speaker 0>is. We can come back to that, but

00:27:23.740 --> 00:27:26.860
<v Speaker 0>we do have a command to execute. So

00:27:26.860 --> 00:27:27.580
<v Speaker 0>I'm assuming

00:27:27.915 --> 00:27:29.675
<v Speaker 0>this is what is run for the intelligence

00:27:29.675 --> 00:27:31.435
<v Speaker 0>to kick in, understand the files that are

00:27:31.435 --> 00:27:33.355
<v Speaker 0>being used, and then spits out the small

00:27:33.355 --> 00:27:34.155
<v Speaker 0>image.

00:27:35.435 --> 00:27:37.035
<v Speaker 0>So let's kick that off.

00:27:39.835 --> 00:27:41.530
<v Speaker 0>And I'm curious. You wanna give me a

00:27:41.530 --> 00:27:43.690
<v Speaker 0>bit more information on the HTTP

00:27:43.690 --> 00:27:44.490
<v Speaker 0>probe?

00:27:45.050 --> 00:27:46.970
<v Speaker 2>Yeah. Of course. So

00:27:48.010 --> 00:27:51.210
<v Speaker 2>one thing that haven't been that hasn't been

00:27:51.290 --> 00:27:53.850
<v Speaker 2>specifically mentioned is this probing.

00:27:53.930 --> 00:27:55.130
<v Speaker 2>So while doing

00:27:55.845 --> 00:27:57.365
<v Speaker 2>the runtime analysis,

00:27:57.525 --> 00:28:00.485
<v Speaker 2>we have an idea that the target image

00:28:00.485 --> 00:28:02.004
<v Speaker 2>or the target container,

00:28:02.085 --> 00:28:03.365
<v Speaker 2>it should be probed.

00:28:03.684 --> 00:28:07.045
<v Speaker 2>And probing could be, like, done in different

00:28:07.045 --> 00:28:07.285
<v Speaker 2>ways.

00:28:08.390 --> 00:28:10.710
<v Speaker 2>Probably the more since most of the time,

00:28:10.710 --> 00:28:13.509
<v Speaker 2>we are trying to minimize our, like,

00:28:13.990 --> 00:28:14.869
<v Speaker 2>services,

00:28:14.870 --> 00:28:16.710
<v Speaker 2>like, web services images,

00:28:17.429 --> 00:28:20.230
<v Speaker 2>the problem would be calling the HTTP API,

00:28:20.230 --> 00:28:23.029
<v Speaker 2>and that's where the HTTP probe comes in.

00:28:23.715 --> 00:28:26.595
<v Speaker 2>But you can also try to minify a

00:28:26.674 --> 00:28:29.394
<v Speaker 2>an image for a CLI application,

00:28:29.635 --> 00:28:31.715
<v Speaker 2>like in this example, where we just take

00:28:31.715 --> 00:28:32.274
<v Speaker 2>the

00:28:32.914 --> 00:28:34.355
<v Speaker 2>base

00:28:34.355 --> 00:28:36.835
<v Speaker 2>image and try to minify it to keep

00:28:36.835 --> 00:28:40.020
<v Speaker 2>only the curl executable in it. So in

00:28:40.020 --> 00:28:42.420
<v Speaker 2>this case, we don't need HTTP probe, which

00:28:42.420 --> 00:28:44.740
<v Speaker 2>is enabled by default, so we are disabling

00:28:44.740 --> 00:28:47.700
<v Speaker 2>it. Otherwise, the will start complaining.

00:28:48.020 --> 00:28:50.740
<v Speaker 2>And instead, we use another probe, which is

00:28:50.740 --> 00:28:53.780
<v Speaker 2>an exec probe. And the exec probe means

00:28:53.975 --> 00:28:55.495
<v Speaker 2>run a certain,

00:28:55.655 --> 00:28:56.935
<v Speaker 2>well, executable

00:28:56.935 --> 00:28:59.015
<v Speaker 2>inside of the target container.

00:29:00.455 --> 00:29:01.255
<v Speaker 0>Okay.

00:29:01.495 --> 00:29:04.615
<v Speaker 0>I'm just Yeah. Skimming the output here.

00:29:07.100 --> 00:29:08.860
<v Speaker 1>One of the things to look for there

00:29:08.860 --> 00:29:09.500
<v Speaker 1>is,

00:29:10.460 --> 00:29:12.860
<v Speaker 1>in caps, it says minified. So it shows

00:29:12.860 --> 00:29:15.820
<v Speaker 1>you the size of the original image and

00:29:15.820 --> 00:29:18.220
<v Speaker 1>then the optimized image so you can see

00:29:18.220 --> 00:29:20.460
<v Speaker 1>what the reduction looks like straight away.

00:29:21.085 --> 00:29:23.405
<v Speaker 0>Wow. So we've taken a base CentOS image,

00:29:23.405 --> 00:29:25.085
<v Speaker 0>which is 231

00:29:25.085 --> 00:29:26.045
<v Speaker 0>megs,

00:29:26.045 --> 00:29:28.205
<v Speaker 0>and we've optimized that down to just 13

00:29:28.205 --> 00:29:31.165
<v Speaker 0>meg of an image. That's quite an improvement.

00:29:31.325 --> 00:29:32.205
<v Speaker 0>That's actually

00:29:32.525 --> 00:29:35.245
<v Speaker 0>much larger than I much more of a

00:29:35.245 --> 00:29:37.460
<v Speaker 0>compression than I expected, to be honest.

00:29:38.500 --> 00:29:41.700
<v Speaker 1>And remember, these are the that compression point

00:29:41.700 --> 00:29:43.380
<v Speaker 1>is in is is important.

00:29:43.700 --> 00:29:45.700
<v Speaker 1>We used to get asked quite a lot,

00:29:45.700 --> 00:29:48.340
<v Speaker 1>you know, are you just compressing the images?

00:29:48.500 --> 00:29:51.140
<v Speaker 1>These are not compressed images. So this is

00:29:51.140 --> 00:29:51.460
<v Speaker 1>just

00:29:52.435 --> 00:29:54.515
<v Speaker 1>a raw image versus a raw image.

00:29:54.995 --> 00:29:57.715
<v Speaker 0>Yeah. Maybe I just compressed there in the

00:29:57.715 --> 00:30:00.675
<v Speaker 0>slightly wrong context. I'm I'm not I'm not

00:30:00.675 --> 00:30:01.475
<v Speaker 1>criticizing.

00:30:01.475 --> 00:30:03.555
<v Speaker 1>It's just that, you know, sometimes people think

00:30:03.555 --> 00:30:05.475
<v Speaker 1>that all we do is compress images, and

00:30:05.475 --> 00:30:07.315
<v Speaker 1>that's absolutely not what we do at all.

00:30:07.910 --> 00:30:08.629
<v Speaker 0>Yeah. Okay.

00:30:10.630 --> 00:30:12.870
<v Speaker 0>So the things I think are interesting here,

00:30:12.870 --> 00:30:13.989
<v Speaker 0>obviously, the size

00:30:14.470 --> 00:30:17.750
<v Speaker 0>is dramatically smaller, which is nice. We have

00:30:17.750 --> 00:30:19.669
<v Speaker 0>some sort of report dot JSON. I'm not

00:30:19.669 --> 00:30:20.710
<v Speaker 0>sure what that is yet.

00:30:21.145 --> 00:30:23.225
<v Speaker 0>We have something called X-ray if we want

00:30:23.225 --> 00:30:25.304
<v Speaker 0>to learn more about the optimized image.

00:30:25.545 --> 00:30:27.065
<v Speaker 0>Now we could take into each of those,

00:30:27.065 --> 00:30:28.904
<v Speaker 0>but I think first, I should just

00:30:29.225 --> 00:30:30.905
<v Speaker 0>run the image and make sure it still

00:30:30.905 --> 00:30:31.465
<v Speaker 0>works.

00:30:32.745 --> 00:30:34.585
<v Speaker 2>Yeah. You can you could probably go with

00:30:34.585 --> 00:30:36.745
<v Speaker 2>the docker images first to

00:30:37.080 --> 00:30:38.840
<v Speaker 2>really see the difference

00:30:39.559 --> 00:30:40.679
<v Speaker 2>in size, I mean.

00:30:42.120 --> 00:30:44.360
<v Speaker 0>Yep. So here is my curl image, the

00:30:44.360 --> 00:30:46.840
<v Speaker 0>13 meg versus the latest,

00:30:46.840 --> 00:30:48.120
<v Speaker 0>which was two thirty one.

00:30:49.195 --> 00:30:51.355
<v Speaker 0>We can do a Docker container run r

00:30:51.355 --> 00:30:53.515
<v Speaker 0>m cuntos curl.

00:30:54.315 --> 00:30:56.395
<v Speaker 0>I can't remember. Does it modify any of

00:30:56.395 --> 00:30:58.315
<v Speaker 0>the metadata, like the entry point, the command,

00:30:58.315 --> 00:31:00.395
<v Speaker 0>the labels, the environments? Are are those all

00:31:00.395 --> 00:31:01.115
<v Speaker 0>persistent?

00:31:01.195 --> 00:31:01.595
<v Speaker 0>Is this

00:31:02.630 --> 00:31:05.350
<v Speaker 2>Yeah. The entry point is persistent. So the

00:31:05.350 --> 00:31:06.630
<v Speaker 2>shell is there,

00:31:06.710 --> 00:31:09.510
<v Speaker 2>which is not something you usually would do.

00:31:10.630 --> 00:31:13.110
<v Speaker 1>And the environment is persisted as well.

00:31:14.710 --> 00:31:15.910
<v Speaker 0>And we still can curl.

00:31:16.355 --> 00:31:17.315
<v Speaker 0>There we go.

00:31:17.715 --> 00:31:19.875
<v Speaker 0>That's pretty cool. I like this.

00:31:20.435 --> 00:31:21.075
<v Speaker 0>So

00:31:21.395 --> 00:31:22.515
<v Speaker 0>if we run

00:31:24.275 --> 00:31:25.635
<v Speaker 0>history on it,

00:31:26.115 --> 00:31:27.554
<v Speaker 0>what will we see?

00:31:30.035 --> 00:31:32.275
<v Speaker 0>The same metadata

00:31:32.250 --> 00:31:34.490
<v Speaker 0>and then just a blob ad for that.

00:31:34.490 --> 00:31:35.130
<v Speaker 0>Okay.

00:31:39.530 --> 00:31:40.090
<v Speaker 0>Okay. Let

00:31:41.050 --> 00:31:42.250
<v Speaker 0>damage works.

00:31:42.410 --> 00:31:44.170
<v Speaker 0>The history, I can see you've added the

00:31:44.170 --> 00:31:45.930
<v Speaker 0>30 meg blobs. There's a single layer.

00:31:46.995 --> 00:31:48.755
<v Speaker 0>We have a report, and we have an

00:31:48.755 --> 00:31:49.794
<v Speaker 0>X-ray command.

00:31:50.435 --> 00:31:52.755
<v Speaker 0>What's the report? What would I use that

00:31:52.755 --> 00:31:53.315
<v Speaker 0>for?

00:31:54.435 --> 00:31:55.075
<v Speaker 2>Well,

00:31:55.555 --> 00:31:57.235
<v Speaker 2>for the report, we can touch up on

00:31:57.235 --> 00:31:57.715
<v Speaker 2>it

00:31:58.195 --> 00:31:58.755
<v Speaker 2>later.

00:32:00.070 --> 00:32:04.070
<v Speaker 2>Essentially, it's the information about the Cisco made

00:32:04.470 --> 00:32:06.070
<v Speaker 2>and files

00:32:06.070 --> 00:32:08.870
<v Speaker 2>accessed and maybe some extra stuff, like what

00:32:08.870 --> 00:32:10.389
<v Speaker 2>was the architecture,

00:32:10.389 --> 00:32:13.269
<v Speaker 2>like what was the detected Linux distribution,

00:32:13.350 --> 00:32:16.845
<v Speaker 2>and what was, like, a language runtime environment.

00:32:16.845 --> 00:32:18.845
<v Speaker 2>It's not something you check usually. Like, it's

00:32:18.845 --> 00:32:19.884
<v Speaker 2>more for us.

00:32:20.845 --> 00:32:21.325
<v Speaker 2>But,

00:32:22.445 --> 00:32:23.244
<v Speaker 2>usually,

00:32:23.885 --> 00:32:24.604
<v Speaker 2>like,

00:32:25.005 --> 00:32:27.645
<v Speaker 2>alongside with this report, you may also find

00:32:27.645 --> 00:32:28.605
<v Speaker 2>other artifacts,

00:32:29.000 --> 00:32:33.080
<v Speaker 2>like like auto generated seccomp profile or FRR

00:32:33.080 --> 00:32:33.880
<v Speaker 2>profile.

00:32:34.600 --> 00:32:38.440
<v Speaker 2>So the concept of these artifacts,

00:32:38.840 --> 00:32:39.320
<v Speaker 2>like

00:32:40.440 --> 00:32:44.680
<v Speaker 2>monitoring artifacts or, like, intelligence artifacts being shipped

00:32:45.055 --> 00:32:48.415
<v Speaker 2>from inside of your target container back to

00:32:48.415 --> 00:32:50.975
<v Speaker 2>your host machine is an important one,

00:32:51.775 --> 00:32:54.255
<v Speaker 2>but report is probably not something you are

00:32:54.255 --> 00:32:55.375
<v Speaker 2>interested in at the moment.

00:32:57.190 --> 00:32:59.350
<v Speaker 2>X-ray is, like, a more

00:33:00.070 --> 00:33:02.390
<v Speaker 2>valuable thing to show.

00:33:03.190 --> 00:33:05.910
<v Speaker 2>X-ray is for analyzing images.

00:33:05.910 --> 00:33:06.790
<v Speaker 2>It's a

00:33:07.670 --> 00:33:08.870
<v Speaker 2>command of the.

00:33:09.430 --> 00:33:10.390
<v Speaker 2>And

00:33:10.835 --> 00:33:12.835
<v Speaker 2>you can actually use it for any image,

00:33:12.835 --> 00:33:15.395
<v Speaker 2>not just a slimmed image like anyone.

00:33:16.115 --> 00:33:19.715
<v Speaker 2>If you wanna investigate what's inside of a

00:33:20.035 --> 00:33:23.395
<v Speaker 2>well, your production image or of some public

00:33:23.395 --> 00:33:25.315
<v Speaker 2>image from Docker Hub or whatever,

00:33:25.800 --> 00:33:28.520
<v Speaker 2>you can just run Docker Slim X-ray,

00:33:29.080 --> 00:33:30.280
<v Speaker 2>the target image,

00:33:30.600 --> 00:33:31.800
<v Speaker 2>and we'll show you

00:33:32.680 --> 00:33:35.800
<v Speaker 2>some intelligence about it. Let's try it for

00:33:35.800 --> 00:33:37.240
<v Speaker 2>the image.

00:33:37.640 --> 00:33:40.120
<v Speaker 0>Yeah. I think we have a command here.

00:33:40.120 --> 00:33:43.825
<v Speaker 0>Yeah. So Yeah. It's pretty simple. X-ray target

00:33:43.825 --> 00:33:46.865
<v Speaker 0>and then export all data artifact.

00:33:47.825 --> 00:33:49.905
<v Speaker 2>Well, the second part is not mandatory, but

00:33:49.905 --> 00:33:50.785
<v Speaker 2>let's

00:33:50.785 --> 00:33:51.505
<v Speaker 2>keep it.

00:33:52.465 --> 00:33:53.665
<v Speaker 0>Okay. So

00:33:54.960 --> 00:33:56.640
<v Speaker 0>is this just a list of all the

00:33:56.640 --> 00:33:57.360
<v Speaker 0>files?

00:33:58.720 --> 00:34:03.280
<v Speaker 2>By layers and also with some extreme information

00:34:03.280 --> 00:34:04.399
<v Speaker 2>about the layers.

00:34:06.080 --> 00:34:07.200
<v Speaker 2>Yeah. It's kind of

00:34:08.054 --> 00:34:11.094
<v Speaker 2>important information if you wanna understand your images.

00:34:11.574 --> 00:34:14.295
<v Speaker 2>The problem with it is that it's not

00:34:14.454 --> 00:34:16.054
<v Speaker 2>really presented

00:34:16.054 --> 00:34:16.775
<v Speaker 2>well.

00:34:16.855 --> 00:34:19.014
<v Speaker 2>It's not really human readable as you can

00:34:19.014 --> 00:34:19.734
<v Speaker 2>clearly see.

00:34:21.380 --> 00:34:24.180
<v Speaker 2>And that's why there is this second flag.

00:34:25.780 --> 00:34:27.540
<v Speaker 2>Now since you used it,

00:34:28.100 --> 00:34:29.460
<v Speaker 2>it also saved

00:34:29.540 --> 00:34:30.900
<v Speaker 2>the same information

00:34:31.060 --> 00:34:32.020
<v Speaker 2>in the entire archive.

00:34:32.985 --> 00:34:35.225
<v Speaker 2>And we have a tool to actually visual

00:34:35.465 --> 00:34:36.665
<v Speaker 2>visualize these

00:34:37.145 --> 00:34:38.665
<v Speaker 2>X-ray reports.

00:34:38.825 --> 00:34:41.545
<v Speaker 2>So it's for, like, savvy, Docker steam users.

00:34:42.505 --> 00:34:43.705
<v Speaker 2>They can upload

00:34:43.945 --> 00:34:44.745
<v Speaker 2>this

00:34:45.465 --> 00:34:48.290
<v Speaker 2>tar archive to our SaaS portal,

00:34:48.690 --> 00:34:50.130
<v Speaker 2>and it will show

00:34:50.449 --> 00:34:52.690
<v Speaker 2>the same information but in a much,

00:34:53.170 --> 00:34:53.810
<v Speaker 2>like,

00:34:54.210 --> 00:34:55.810
<v Speaker 2>more need representation.

00:34:57.890 --> 00:34:58.290
<v Speaker 0>Okay.

00:34:59.095 --> 00:35:01.655
<v Speaker 2>So if you wanna see it, you could

00:35:01.655 --> 00:35:03.815
<v Speaker 2>SCP this archive to your

00:35:04.775 --> 00:35:07.255
<v Speaker 2>machine and just open the SaaS in the

00:35:07.255 --> 00:35:08.055
<v Speaker 2>browser

00:35:09.335 --> 00:35:12.050
<v Speaker 2>just to give an impression of the contents

00:35:12.050 --> 00:35:14.369
<v Speaker 2>of this image of, like, the layers and

00:35:14.369 --> 00:35:15.250
<v Speaker 2>to the

00:35:16.210 --> 00:35:17.330
<v Speaker 2>meta information.

00:35:18.450 --> 00:35:20.369
<v Speaker 0>Okay. So let me pull that down, and

00:35:20.369 --> 00:35:21.730
<v Speaker 0>then we've got a couple of questions in

00:35:21.730 --> 00:35:22.530
<v Speaker 0>the chat

00:35:23.410 --> 00:35:25.410
<v Speaker 0>that we'll tackle. So let me do s

00:35:25.410 --> 00:35:26.930
<v Speaker 0>v p. We're at

00:35:27.465 --> 00:35:28.345
<v Speaker 0>data

00:35:28.985 --> 00:35:30.985
<v Speaker 0>artifact. Okay. I can I

00:35:31.225 --> 00:35:34.105
<v Speaker 1>can feel the question from from Russell who

00:35:34.105 --> 00:35:36.505
<v Speaker 1>asks, so is X-ray

00:35:36.665 --> 00:35:38.265
<v Speaker 1>a bit like Dive?

00:35:38.585 --> 00:35:39.465
<v Speaker 1>Certainly,

00:35:39.625 --> 00:35:41.225
<v Speaker 1>the content of X-ray

00:35:42.450 --> 00:35:43.250
<v Speaker 1>exposes

00:35:43.250 --> 00:35:46.050
<v Speaker 1>the kind of information that you would need

00:35:46.210 --> 00:35:48.370
<v Speaker 1>to get that sort of

00:35:48.610 --> 00:35:50.290
<v Speaker 1>dive like experience.

00:35:50.610 --> 00:35:53.010
<v Speaker 1>But what we're about to show you now

00:35:53.250 --> 00:35:55.330
<v Speaker 1>is the Slim AI portal.

00:35:55.974 --> 00:35:59.255
<v Speaker 1>So you can upload this tar of the

00:35:59.255 --> 00:36:00.214
<v Speaker 1>artifacts,

00:36:00.214 --> 00:36:03.095
<v Speaker 1>and you will get a visual representation

00:36:03.255 --> 00:36:05.255
<v Speaker 1>of what just happened.

00:36:05.575 --> 00:36:06.615
<v Speaker 1>And in fact,

00:36:07.335 --> 00:36:10.535
<v Speaker 1>when we started at Slim, we started implementing

00:36:10.535 --> 00:36:12.910
<v Speaker 1>all of this doing the optimization in the

00:36:12.910 --> 00:36:13.950
<v Speaker 1>SaaS platform,

00:36:14.510 --> 00:36:15.230
<v Speaker 1>and

00:36:15.390 --> 00:36:17.470
<v Speaker 1>the overwhelming feedback was

00:36:17.710 --> 00:36:19.790
<v Speaker 1>what the heck just happened? What happened to

00:36:19.790 --> 00:36:20.830
<v Speaker 1>my container?

00:36:20.910 --> 00:36:23.310
<v Speaker 1>So, actually, we rolled all the way back,

00:36:23.390 --> 00:36:26.110
<v Speaker 1>and the first thing we properly implemented in

00:36:26.110 --> 00:36:27.150
<v Speaker 1>the SaaS platform

00:36:27.365 --> 00:36:30.325
<v Speaker 1>was really deep sort of introspection

00:36:30.325 --> 00:36:31.525
<v Speaker 1>and exploration

00:36:31.525 --> 00:36:33.125
<v Speaker 1>of container images

00:36:33.204 --> 00:36:36.565
<v Speaker 1>wherever they might be. So the SaaS platform

00:36:36.565 --> 00:36:39.205
<v Speaker 1>is a bit like Google for container images.

00:36:39.444 --> 00:36:41.940
<v Speaker 1>You you can connect to all of your

00:36:41.940 --> 00:36:44.740
<v Speaker 1>public and private registries. You can search them.

00:36:44.820 --> 00:36:46.820
<v Speaker 1>You can access your containers, and you can

00:36:46.820 --> 00:36:48.820
<v Speaker 1>do deep introspection

00:36:48.820 --> 00:36:52.100
<v Speaker 1>and security analysis of those container images.

00:36:52.340 --> 00:36:54.820
<v Speaker 1>And what we're about to see is just

00:36:55.005 --> 00:36:57.644
<v Speaker 1>a tiny bit of what you can actually

00:36:57.644 --> 00:37:00.685
<v Speaker 1>visualize with the container images by

00:37:00.924 --> 00:37:03.964
<v Speaker 1>using Docker Slim to upload, you know, these

00:37:03.964 --> 00:37:07.244
<v Speaker 1>artifacts into the into the visualization tool.

00:37:08.845 --> 00:37:09.325
<v Speaker 0>Alright.

00:37:10.560 --> 00:37:12.240
<v Speaker 0>And we have one more question

00:37:12.480 --> 00:37:14.240
<v Speaker 0>from who

00:37:14.240 --> 00:37:16.640
<v Speaker 0>is asking if Docker Slim works on the

00:37:16.640 --> 00:37:18.800
<v Speaker 0>m one Mac and if that's something that's

00:37:18.800 --> 00:37:19.360
<v Speaker 0>coming.

00:37:19.760 --> 00:37:21.760
<v Speaker 2>Yeah. I I have I have

00:37:22.365 --> 00:37:23.485
<v Speaker 2>something to share.

00:37:24.045 --> 00:37:24.605
<v Speaker 2>So

00:37:25.005 --> 00:37:27.005
<v Speaker 2>there is a known problem with it. So

00:37:27.005 --> 00:37:28.045
<v Speaker 2>it does work.

00:37:28.845 --> 00:37:30.125
<v Speaker 2>Like, there is nothing

00:37:30.685 --> 00:37:32.925
<v Speaker 2>unsupported currently for m ones.

00:37:33.325 --> 00:37:34.925
<v Speaker 2>But when you are on when you are

00:37:34.925 --> 00:37:36.125
<v Speaker 2>on an m one mug,

00:37:36.780 --> 00:37:38.780
<v Speaker 2>you actually can have two

00:37:39.100 --> 00:37:39.820
<v Speaker 2>different

00:37:40.300 --> 00:37:42.700
<v Speaker 2>modes of container execution.

00:37:42.860 --> 00:37:44.380
<v Speaker 2>If it's an R built,

00:37:46.860 --> 00:37:48.700
<v Speaker 2>then it will be like a native run,

00:37:49.194 --> 00:37:52.234
<v Speaker 2>But it could be an, like, a traditional

00:37:52.234 --> 00:37:53.675
<v Speaker 2>inter Intel

00:37:54.315 --> 00:37:55.035
<v Speaker 2>x

00:37:55.595 --> 00:37:56.395
<v Speaker 2>86

00:37:56.395 --> 00:37:57.275
<v Speaker 2>run

00:37:57.355 --> 00:37:59.195
<v Speaker 2>on an ARM processor.

00:37:59.434 --> 00:38:01.915
<v Speaker 2>So we will have to use emulation for

00:38:01.915 --> 00:38:05.420
<v Speaker 2>that. Like, what whatever Docker desktop on

00:38:05.660 --> 00:38:07.260
<v Speaker 2>Mac OS actually uses.

00:38:07.740 --> 00:38:10.540
<v Speaker 2>And in this case, the sensor has to

00:38:10.540 --> 00:38:12.060
<v Speaker 2>be all the same architectures,

00:38:12.060 --> 00:38:12.860
<v Speaker 2>of course.

00:38:13.340 --> 00:38:16.220
<v Speaker 2>But the traditional or, like, the default installation

00:38:16.220 --> 00:38:19.055
<v Speaker 2>method, it just pulls in two binaries, the

00:38:19.055 --> 00:38:20.335
<v Speaker 2>Docker Slim itself

00:38:20.494 --> 00:38:23.935
<v Speaker 2>for ARM and the sensor also for ARM.

00:38:23.935 --> 00:38:25.775
<v Speaker 2>So if you try to run a non

00:38:25.775 --> 00:38:26.495
<v Speaker 2>ARM

00:38:26.655 --> 00:38:27.615
<v Speaker 2>container

00:38:27.775 --> 00:38:28.815
<v Speaker 2>on an ARM

00:38:29.630 --> 00:38:30.510
<v Speaker 2>machine,

00:38:31.070 --> 00:38:31.870
<v Speaker 2>will

00:38:31.870 --> 00:38:33.870
<v Speaker 2>inject an ARM sensor into it. And, of

00:38:33.870 --> 00:38:35.790
<v Speaker 2>course, it will not work. But,

00:38:37.230 --> 00:38:39.790
<v Speaker 2>yeah, but you can be smart enough and

00:38:39.790 --> 00:38:41.950
<v Speaker 2>just download the right version of the sensor

00:38:41.950 --> 00:38:44.904
<v Speaker 2>from our GitHub and replace it on your

00:38:44.904 --> 00:38:47.305
<v Speaker 2>machine, and then it will inject the. It

00:38:47.305 --> 00:38:49.305
<v Speaker 2>will inject it, and everything will work.

00:38:49.944 --> 00:38:50.505
<v Speaker 2>So

00:38:50.904 --> 00:38:52.984
<v Speaker 2>it does work, but we have to fix

00:38:52.984 --> 00:38:54.345
<v Speaker 2>the installation procedure.

00:38:54.505 --> 00:38:56.904
<v Speaker 2>We have to be, like, smart and understand

00:38:56.904 --> 00:38:59.224
<v Speaker 2>the target architecture of the container and inject

00:38:59.224 --> 00:39:01.460
<v Speaker 2>the right sensor. And this is something

00:39:01.780 --> 00:39:03.780
<v Speaker 2>well, if someone wants to contribute, we will

00:39:03.780 --> 00:39:05.700
<v Speaker 2>just love this, but

00:39:06.339 --> 00:39:07.860
<v Speaker 2>it's open source.

00:39:08.420 --> 00:39:08.980
<v Speaker 2>But

00:39:09.619 --> 00:39:11.380
<v Speaker 2>this is on our list, definitely.

00:39:12.020 --> 00:39:14.915
<v Speaker 0>Awesome. Thank you for tackling that question. Hope

00:39:14.915 --> 00:39:17.235
<v Speaker 0>that helps. In fact in fact, to dive

00:39:17.235 --> 00:39:20.035
<v Speaker 1>into this particular sort of thorny issue,

00:39:20.195 --> 00:39:22.995
<v Speaker 1>we did a couple of livestreams recently where,

00:39:23.075 --> 00:39:25.315
<v Speaker 1>first of all, we created our own

00:39:27.510 --> 00:39:31.190
<v Speaker 1>derivative OS for the Raspberry Pi specifically. So

00:39:31.190 --> 00:39:33.830
<v Speaker 1>we created a a container

00:39:33.830 --> 00:39:34.230
<v Speaker 1>operate

00:39:35.270 --> 00:39:38.390
<v Speaker 1>a a a of Ubuntu derived operating system

00:39:38.390 --> 00:39:39.270
<v Speaker 1>specifically

00:39:39.270 --> 00:39:40.150
<v Speaker 1>designed

00:39:40.150 --> 00:39:41.270
<v Speaker 1>to run containers.

00:39:41.505 --> 00:39:44.464
<v Speaker 1>So that ran in just 98 91 megabytes

00:39:44.464 --> 00:39:45.744
<v Speaker 1>of of memory.

00:39:45.825 --> 00:39:48.865
<v Speaker 1>And then we created our own optimized base

00:39:48.865 --> 00:39:49.585
<v Speaker 1>images

00:39:49.744 --> 00:39:51.825
<v Speaker 1>to then build our apps on top of

00:39:51.825 --> 00:39:54.144
<v Speaker 1>as well. And then we were generating a

00:39:54.144 --> 00:39:55.664
<v Speaker 1>whole bunch of different applications

00:39:56.900 --> 00:39:59.540
<v Speaker 1>in containers using that, you know, because it's

00:39:59.540 --> 00:40:01.780
<v Speaker 1>ARM 64 and ARM 32,

00:40:01.860 --> 00:40:04.580
<v Speaker 1>and then uploading those into our

00:40:05.620 --> 00:40:08.420
<v Speaker 1>our platform and using Docker Slim to see

00:40:08.420 --> 00:40:10.100
<v Speaker 1>where all of the rough edges were to

00:40:10.100 --> 00:40:12.494
<v Speaker 1>sort of document where where the issues are,

00:40:12.494 --> 00:40:14.175
<v Speaker 1>where we where we need to improve.

00:40:15.214 --> 00:40:15.855
<v Speaker 0>K.

00:40:16.734 --> 00:40:19.214
<v Speaker 0>Alright. So we should probably, like, speed up

00:40:19.214 --> 00:40:21.375
<v Speaker 2>a bit if you wanna see some more

00:40:21.375 --> 00:40:22.655
<v Speaker 2>advanced use cases. Yeah.

00:40:23.580 --> 00:40:25.820
<v Speaker 0>Alright. We'll we'll tackle one more question very

00:40:25.820 --> 00:40:27.340
<v Speaker 0>quickly, and then we'll we'll get back to

00:40:27.340 --> 00:40:29.980
<v Speaker 0>the the terminal. So George Castro is at

00:40:29.980 --> 00:40:31.020
<v Speaker 0>the chat saying,

00:40:31.420 --> 00:40:33.260
<v Speaker 0>very big long comment. It's not gonna affect

00:40:33.260 --> 00:40:35.020
<v Speaker 0>my screen. But it would be neat to

00:40:35.020 --> 00:40:37.260
<v Speaker 0>see Slim containers on something like a large

00:40:37.260 --> 00:40:39.575
<v Speaker 0>Kubernetes cluster. I imagine there would be lots

00:40:39.575 --> 00:40:41.414
<v Speaker 0>of bandwidth saving implications,

00:40:41.414 --> 00:40:42.295
<v Speaker 0>especially

00:40:42.295 --> 00:40:43.815
<v Speaker 0>when you have a cluster with lots of

00:40:43.815 --> 00:40:44.535
<v Speaker 0>nodes.

00:40:44.855 --> 00:40:46.934
<v Speaker 0>Is that like, what are the main drivers

00:40:46.934 --> 00:40:49.335
<v Speaker 0>you see people adopting this kind of technology?

00:40:49.575 --> 00:40:51.974
<v Speaker 1>That is a use case for sure.

00:40:52.694 --> 00:40:54.134
<v Speaker 1>When we were at KubeCon,

00:40:54.579 --> 00:40:56.420
<v Speaker 1>there are a number of people stopping by

00:40:56.420 --> 00:40:59.140
<v Speaker 1>that were already using either Docker Slim or

00:40:59.140 --> 00:41:00.260
<v Speaker 1>Slim AI

00:41:00.579 --> 00:41:02.420
<v Speaker 1>specifically to address

00:41:02.660 --> 00:41:05.140
<v Speaker 1>either sort of, you know, savings in bandwidth

00:41:05.140 --> 00:41:06.900
<v Speaker 1>costs or in some cases,

00:41:07.220 --> 00:41:09.460
<v Speaker 1>just being able to deploy their containers in

00:41:09.460 --> 00:41:12.005
<v Speaker 1>the first place. When you look at AIML

00:41:12.005 --> 00:41:12.885
<v Speaker 1>containers,

00:41:12.885 --> 00:41:14.965
<v Speaker 1>they can be multi gigabyte containers.

00:41:14.965 --> 00:41:17.365
<v Speaker 1>They they sort of grow and grow. And

00:41:17.365 --> 00:41:20.565
<v Speaker 1>Docker Slim can really help, you know, get

00:41:20.565 --> 00:41:23.670
<v Speaker 1>those under control, get those into a manageable

00:41:23.670 --> 00:41:26.710
<v Speaker 1>size so that deployments aren't just quicker,

00:41:26.869 --> 00:41:28.230
<v Speaker 1>they're actually reliable.

00:41:28.230 --> 00:41:30.390
<v Speaker 1>And also, you know, when you're pushing them

00:41:30.390 --> 00:41:30.950
<v Speaker 1>around

00:41:31.349 --> 00:41:34.710
<v Speaker 1>multi cloud environments, for example, can really save

00:41:34.710 --> 00:41:36.230
<v Speaker 1>some sort of transit costs.

00:41:37.015 --> 00:41:38.855
<v Speaker 0>Alright. Awesome. Thank you.

00:41:39.335 --> 00:41:41.335
<v Speaker 0>Alright. Let's get back to the terminal so

00:41:41.335 --> 00:41:42.455
<v Speaker 0>we can get through some more of these

00:41:42.455 --> 00:41:44.935
<v Speaker 0>demos. So we've taken a look at Slimming

00:41:44.935 --> 00:41:45.975
<v Speaker 0>down an image.

00:41:46.375 --> 00:41:49.415
<v Speaker 0>Demo two is something called advanced HTTP

00:41:49.415 --> 00:41:49.815
<v Speaker 0>probing,

00:41:50.270 --> 00:41:52.589
<v Speaker 0>where it's a more real scenario to modify

00:41:52.589 --> 00:41:54.270
<v Speaker 0>the image of a Node. Js server with

00:41:54.270 --> 00:41:56.350
<v Speaker 0>a nontrivial HTTP API.

00:41:56.910 --> 00:41:58.750
<v Speaker 2>Yeah. Quick question. I I will look into

00:41:58.750 --> 00:42:01.230
<v Speaker 2>the contents of the minified image first or

00:42:01.230 --> 00:42:01.790
<v Speaker 2>not,

00:42:02.109 --> 00:42:03.630
<v Speaker 2>which is fine also. We can just skip

00:42:03.630 --> 00:42:06.155
<v Speaker 2>it because I think everyone already understood that

00:42:06.155 --> 00:42:08.795
<v Speaker 2>that is, like, a one single layer image.

00:42:12.635 --> 00:42:13.355
<v Speaker 0>Yeah.

00:42:14.955 --> 00:42:16.315
<v Speaker 0>Yeah. We can do that if you want,

00:42:16.315 --> 00:42:17.275
<v Speaker 0>or we can move on to the next

00:42:17.275 --> 00:42:18.635
<v Speaker 0>demo. Which which you think is more fun?

00:42:22.160 --> 00:42:24.320
<v Speaker 2>I mean, real quick. Let's I think because

00:42:24.320 --> 00:42:26.000
<v Speaker 2>there was a question about Dive.

00:42:27.119 --> 00:42:28.960
<v Speaker 1>Yeah. Yeah. So do you want me to

00:42:28.960 --> 00:42:30.800
<v Speaker 0>export it and then open it, or is

00:42:30.800 --> 00:42:31.920
<v Speaker 0>this what the artifacts are?

00:42:32.825 --> 00:42:34.904
<v Speaker 2>Let's upload it to the It's take that

00:42:34.904 --> 00:42:37.305
<v Speaker 1>artifact to the portal. Of course. Yeah. Sorry.

00:42:37.305 --> 00:42:37.785
<v Speaker 0>Alright.

00:42:39.305 --> 00:42:41.224
<v Speaker 0>Let's go to the Slim AI portal.

00:42:45.359 --> 00:42:47.200
<v Speaker 0>So what am I doing here? I haven't

00:42:47.200 --> 00:42:48.160
<v Speaker 0>done this before.

00:42:48.799 --> 00:42:50.640
<v Speaker 2>Yeah. Just you see this

00:42:50.880 --> 00:42:54.400
<v Speaker 2>X-ray mentioning under under the search box.

00:42:54.799 --> 00:42:55.520
<v Speaker 2>Mhmm.

00:42:55.599 --> 00:42:58.000
<v Speaker 2>It's exact specifically for

00:42:58.240 --> 00:42:59.359
<v Speaker 2>Docker Slim users.

00:43:01.415 --> 00:43:02.215
<v Speaker 0>Alright.

00:43:02.295 --> 00:43:03.095
<v Speaker 0>So

00:43:03.895 --> 00:43:05.735
<v Speaker 0>where did I download that to? That's the

00:43:05.735 --> 00:43:06.935
<v Speaker 0>question. There we go.

00:43:07.895 --> 00:43:08.615
<v Speaker 0>Okay.

00:43:12.695 --> 00:43:13.575
<v Speaker 0>Oh, shiny.

00:43:17.900 --> 00:43:21.420
<v Speaker 1>So Russell was asking about Dive. This is,

00:43:21.579 --> 00:43:24.140
<v Speaker 1>you know, a visualization

00:43:24.220 --> 00:43:26.539
<v Speaker 1>of, you know, what the container now looks

00:43:26.539 --> 00:43:27.099
<v Speaker 1>like.

00:43:28.220 --> 00:43:29.180
<v Speaker 0>Okay. So

00:43:30.635 --> 00:43:33.675
<v Speaker 2>you can see essentially clicks through the stuff

00:43:33.675 --> 00:43:36.954
<v Speaker 2>or click on the filter, and it will

00:43:36.954 --> 00:43:39.435
<v Speaker 2>show you some, like, brief information about the

00:43:39.435 --> 00:43:41.355
<v Speaker 2>number of binary files or a number of

00:43:41.355 --> 00:43:41.835
<v Speaker 2>the

00:43:43.089 --> 00:43:45.090
<v Speaker 2>other type of files. Yeah.

00:43:45.890 --> 00:43:46.610
<v Speaker 2>Yeah.

00:43:46.690 --> 00:43:50.609
<v Speaker 2>Remember, it was a center as distro,

00:43:50.609 --> 00:43:53.250
<v Speaker 2>and we tried to extract just curl out

00:43:53.250 --> 00:43:55.410
<v Speaker 2>of it. So if you go to the

00:43:55.410 --> 00:43:57.250
<v Speaker 2>filter and filter it by

00:43:57.569 --> 00:44:00.665
<v Speaker 2>binary files, you will see actually how many

00:44:00.985 --> 00:44:02.185
<v Speaker 2>dependencies

00:44:02.505 --> 00:44:04.425
<v Speaker 2>a curl binary has.

00:44:06.585 --> 00:44:09.545
<v Speaker 0>Yep. There's all the dynamically linked files there.

00:44:09.545 --> 00:44:10.185
<v Speaker 0>Yep. Yep.

00:44:11.030 --> 00:44:12.950
<v Speaker 1>And if you look at the overview

00:44:13.750 --> 00:44:16.230
<v Speaker 1>on the on the left there.

00:44:17.030 --> 00:44:18.630
<v Speaker 1>So this is quite useful.

00:44:18.869 --> 00:44:20.470
<v Speaker 1>You know, one of the things what you

00:44:20.470 --> 00:44:22.790
<v Speaker 1>can do on the platform when you're actually

00:44:22.950 --> 00:44:26.125
<v Speaker 1>using this platform directly is you can have

00:44:26.125 --> 00:44:28.765
<v Speaker 1>a look at your containers in your registry

00:44:28.765 --> 00:44:30.925
<v Speaker 1>and your Slim containers in your registry, and

00:44:30.925 --> 00:44:32.925
<v Speaker 1>you can compare them side by side.

00:44:33.244 --> 00:44:35.405
<v Speaker 1>So if you want to see exactly what

00:44:35.405 --> 00:44:38.204
<v Speaker 1>happened as a result of optimizing your container,

00:44:38.510 --> 00:44:40.589
<v Speaker 1>You can see a side by side view

00:44:40.589 --> 00:44:42.750
<v Speaker 1>of this is what was removed.

00:44:43.069 --> 00:44:43.869
<v Speaker 1>This

00:44:43.869 --> 00:44:46.670
<v Speaker 1>is the security profile as a result of

00:44:46.670 --> 00:44:48.590
<v Speaker 1>the the minification process.

00:44:48.829 --> 00:44:51.309
<v Speaker 1>For example, there are no shells in this

00:44:51.309 --> 00:44:54.205
<v Speaker 1>container, and you see there files with special

00:44:54.205 --> 00:44:55.724
<v Speaker 1>permissions. If you were to look at the

00:44:55.724 --> 00:44:56.605
<v Speaker 1>CentOS

00:44:57.645 --> 00:45:00.045
<v Speaker 1>base image, you would find, like any Linux

00:45:00.045 --> 00:45:02.125
<v Speaker 1>distro, there's a bunch of files with set

00:45:02.125 --> 00:45:04.045
<v Speaker 1>UID and set GID,

00:45:04.365 --> 00:45:07.650
<v Speaker 1>you know, stickies on various binaries, and those

00:45:07.650 --> 00:45:10.130
<v Speaker 1>are gone. So you at a glance, you

00:45:10.130 --> 00:45:11.730
<v Speaker 1>can see sort of the changes that are

00:45:11.730 --> 00:45:13.810
<v Speaker 1>made here. There was a shell in this

00:45:13.810 --> 00:45:16.369
<v Speaker 0>image. Yeah. Because it was an entry point.

00:45:16.369 --> 00:45:18.930
<v Speaker 2>So it's it's not like you execute curl.

00:45:18.930 --> 00:45:20.850
<v Speaker 2>You do it through, like, a Sage

00:45:21.885 --> 00:45:22.925
<v Speaker 2>run curl.

00:45:22.925 --> 00:45:24.765
<v Speaker 0>Yeah. Because I when we filter this by

00:45:24.765 --> 00:45:26.045
<v Speaker 0>the binaries,

00:45:27.405 --> 00:45:29.245
<v Speaker 0>there was user Ben Bash

00:45:30.045 --> 00:45:30.845
<v Speaker 0>here.

00:45:32.445 --> 00:45:33.165
<v Speaker 2>Yeah.

00:45:33.645 --> 00:45:36.525
<v Speaker 2>It's not expected behavior because

00:45:36.190 --> 00:45:38.670
<v Speaker 2>that's what's part of the entry point, which

00:45:38.670 --> 00:45:40.990
<v Speaker 2>also could be changed if you are, like,

00:45:40.990 --> 00:45:44.190
<v Speaker 2>careful enough. You can use the array version

00:45:44.270 --> 00:45:46.030
<v Speaker 2>of the entry point, and then the shell

00:45:46.030 --> 00:45:47.470
<v Speaker 2>is not mandatory.

00:45:48.350 --> 00:45:48.830
<v Speaker 0>Got it.

00:45:49.605 --> 00:45:52.244
<v Speaker 0>Cool. Very nice tone. Good for seeing what

00:45:52.244 --> 00:45:54.005
<v Speaker 0>we have. I love the filters as well.

00:45:54.005 --> 00:45:55.205
<v Speaker 0>I've been able to break that down to

00:45:55.205 --> 00:45:58.325
<v Speaker 0>binaries and text. Very The idea the idea

00:45:58.325 --> 00:46:00.165
<v Speaker 2>here is to provide the same kind of

00:46:00.165 --> 00:46:01.365
<v Speaker 2>user experience

00:46:01.685 --> 00:46:03.445
<v Speaker 2>for your minimized images

00:46:03.880 --> 00:46:05.640
<v Speaker 2>and for any other image.

00:46:05.960 --> 00:46:08.120
<v Speaker 2>I don't really wanna feature the portal here.

00:46:08.200 --> 00:46:09.960
<v Speaker 2>But if you can go if you go

00:46:09.960 --> 00:46:11.800
<v Speaker 2>to the search, don't do it now. If

00:46:11.800 --> 00:46:13.160
<v Speaker 2>you go to the search, you can actually

00:46:13.160 --> 00:46:16.359
<v Speaker 2>search images, like, from any other public registry

00:46:16.365 --> 00:46:18.205
<v Speaker 2>and then see exactly the same in the

00:46:18.205 --> 00:46:19.565
<v Speaker 2>exactly the same UI

00:46:19.805 --> 00:46:21.485
<v Speaker 2>on the same kind of information.

00:46:21.725 --> 00:46:23.885
<v Speaker 2>Yeah. Let's get back to the more real

00:46:23.885 --> 00:46:24.605
<v Speaker 2>demo.

00:46:25.965 --> 00:46:28.045
<v Speaker 0>Okay. So step two is we're gonna take

00:46:28.045 --> 00:46:31.750
<v Speaker 0>a Node. Js a Node. Js HTTP API,

00:46:31.750 --> 00:46:33.430
<v Speaker 0>and we're gonna slim that down.

00:46:34.310 --> 00:46:36.550
<v Speaker 0>So I'm just gonna clone your Docker Slim

00:46:36.550 --> 00:46:39.349
<v Speaker 0>examples here. Yeah. So the thing is that

00:46:39.349 --> 00:46:41.110
<v Speaker 2>the previous demo,

00:46:41.190 --> 00:46:44.310
<v Speaker 2>it wasn't really well, it was rather artificial.

00:46:44.310 --> 00:46:44.550
<v Speaker 2>Like,

00:46:45.325 --> 00:46:47.405
<v Speaker 2>I I don't think there are many people

00:46:47.805 --> 00:46:49.725
<v Speaker 2>out there taking,

00:46:49.725 --> 00:46:50.285
<v Speaker 2>like,

00:46:50.605 --> 00:46:54.365
<v Speaker 2>vanilla Linux distro and trying to make it,

00:46:54.365 --> 00:46:57.805
<v Speaker 2>like, I don't know, one tool image

00:46:58.280 --> 00:46:59.320
<v Speaker 2>out of it.

00:46:59.960 --> 00:47:03.000
<v Speaker 2>But this is much more real example. So

00:47:03.160 --> 00:47:04.200
<v Speaker 2>this image

00:47:05.000 --> 00:47:05.720
<v Speaker 2>is

00:47:05.960 --> 00:47:08.360
<v Speaker 2>just a typical Node. Js

00:47:09.160 --> 00:47:10.200
<v Speaker 2>web service

00:47:10.985 --> 00:47:14.345
<v Speaker 2>with a nontrivial HTTP API surface. So it

00:47:14.345 --> 00:47:15.945
<v Speaker 2>has, like, a bunch of methods.

00:47:18.425 --> 00:47:20.345
<v Speaker 2>The thing is that

00:47:20.425 --> 00:47:21.865
<v Speaker 2>we would like to

00:47:22.025 --> 00:47:23.705
<v Speaker 2>make to

00:47:23.865 --> 00:47:24.825
<v Speaker 2>probe it

00:47:25.299 --> 00:47:25.940
<v Speaker 2>not

00:47:26.180 --> 00:47:26.980
<v Speaker 2>trivially

00:47:26.980 --> 00:47:30.020
<v Speaker 2>by just calling, like, you know, the slash

00:47:30.579 --> 00:47:31.380
<v Speaker 2>endpoint,

00:47:31.619 --> 00:47:34.740
<v Speaker 2>but instead to go over all the exposed

00:47:34.740 --> 00:47:36.020
<v Speaker 2>API endpoints.

00:47:36.339 --> 00:47:38.180
<v Speaker 2>And we don't want to do this manually.

00:47:38.664 --> 00:47:39.305
<v Speaker 2>Like,

00:47:39.464 --> 00:47:41.545
<v Speaker 2>I'm not in, like, in in the mood

00:47:41.545 --> 00:47:43.385
<v Speaker 2>to actually list all the endpoints.

00:47:43.625 --> 00:47:44.665
<v Speaker 2>So instead,

00:47:44.904 --> 00:47:46.105
<v Speaker 2>Docker Slim has

00:47:47.224 --> 00:47:49.785
<v Speaker 2>one of its built in capabilities.

00:47:50.265 --> 00:47:51.944
<v Speaker 2>It understands

00:47:52.610 --> 00:47:54.850
<v Speaker 2>API specs. Like, if you go with an

00:47:54.850 --> 00:47:56.930
<v Speaker 2>open API with the spec

00:47:57.090 --> 00:47:58.690
<v Speaker 2>and point to

00:47:59.090 --> 00:47:59.650
<v Speaker 2>it,

00:47:59.890 --> 00:48:03.090
<v Speaker 2>it will actually understand all the available endpoints,

00:48:03.090 --> 00:48:04.770
<v Speaker 2>and they'll try to probe them one by

00:48:04.770 --> 00:48:08.565
<v Speaker 2>one. So let's try to run this example.

00:48:10.165 --> 00:48:12.405
<v Speaker 2>Of course, first, we need to make to

00:48:12.405 --> 00:48:14.805
<v Speaker 2>build the fat version of the image.

00:48:16.165 --> 00:48:17.845
<v Speaker 2>Then it just ran make,

00:48:18.220 --> 00:48:20.780
<v Speaker 2>but make is not a part of of

00:48:20.780 --> 00:48:23.180
<v Speaker 2>Docker Slim in any way. You can see

00:48:23.180 --> 00:48:25.900
<v Speaker 2>that, actually, this make resulted in a very

00:48:25.900 --> 00:48:27.580
<v Speaker 2>simple Docker build command.

00:48:29.260 --> 00:48:29.660
<v Speaker 0>Okay.

00:48:30.714 --> 00:48:32.475
<v Speaker 0>So we're currently doing this.

00:48:35.755 --> 00:48:37.915
<v Speaker 0>And then you want me to do a

00:48:37.915 --> 00:48:40.155
<v Speaker 0>run and a curl?

00:48:40.714 --> 00:48:42.954
<v Speaker 2>Oh, yeah. Just do them one one by

00:48:42.954 --> 00:48:45.770
<v Speaker 2>one one by one because the like, what

00:48:45.770 --> 00:48:47.690
<v Speaker 2>what you're actually doing now, you are

00:48:49.050 --> 00:48:51.770
<v Speaker 2>running one of our examples. So Docker Slim

00:48:51.770 --> 00:48:53.370
<v Speaker 2>in a separate repository.

00:48:53.450 --> 00:48:57.130
<v Speaker 2>It has a, like, tens of examples how

00:48:57.130 --> 00:48:57.930
<v Speaker 2>to minify

00:48:58.755 --> 00:49:00.675
<v Speaker 2>different images and how to,

00:49:01.234 --> 00:49:04.595
<v Speaker 2>like, go from these trivial scenario to more

00:49:04.595 --> 00:49:05.555
<v Speaker 2>advanced one.

00:49:06.515 --> 00:49:07.155
<v Speaker 2>So

00:49:07.714 --> 00:49:09.555
<v Speaker 2>but all of these or most of these

00:49:09.555 --> 00:49:12.355
<v Speaker 2>examples, they follow the same pattern. Just build

00:49:12.355 --> 00:49:13.875
<v Speaker 2>the fat version of the image,

00:49:15.610 --> 00:49:17.530
<v Speaker 2>run, see that it works,

00:49:18.090 --> 00:49:20.810
<v Speaker 2>go build the Slim version, and run it

00:49:20.810 --> 00:49:22.730
<v Speaker 2>and see that it works. So we are

00:49:22.730 --> 00:49:25.370
<v Speaker 2>just trying to follow it. Okay. So we've

00:49:25.370 --> 00:49:27.210
<v Speaker 0>run all those commands. We can see the

00:49:27.210 --> 00:49:30.125
<v Speaker 0>build has built a one gig image from

00:49:30.125 --> 00:49:31.245
<v Speaker 0>this application.

00:49:31.645 --> 00:49:33.885
<v Speaker 0>And we ran it. I curled it, passed

00:49:33.885 --> 00:49:36.125
<v Speaker 0>it through j q. Things are good. I

00:49:36.125 --> 00:49:37.245
<v Speaker 0>shut it back down.

00:49:37.724 --> 00:49:39.244
<v Speaker 0>So the fun part is gonna be the

00:49:39.244 --> 00:49:40.925
<v Speaker 0>make Slim build. Right?

00:49:41.244 --> 00:49:42.045
<v Speaker 2>Right.

00:49:42.045 --> 00:49:44.289
<v Speaker 0>And if I just take a look at

00:49:44.289 --> 00:49:47.330
<v Speaker 0>what Oh, no. Please don't. No.

00:49:49.250 --> 00:49:51.970
<v Speaker 2>Just run it and see the command. Yeah.

00:49:51.970 --> 00:49:53.890
<v Speaker 2>Well, okay. And just try to find the

00:49:53.890 --> 00:49:57.089
<v Speaker 2>very first command, yeah, after the after the

00:49:57.089 --> 00:49:57.890
<v Speaker 2>make

00:49:58.049 --> 00:49:58.369
<v Speaker 2>call.

00:49:59.484 --> 00:50:02.445
<v Speaker 0>Yeah. So Docker Slim build, HTTP probe, and

00:50:02.445 --> 00:50:04.205
<v Speaker 0>we point it to the spec YAML, which

00:50:04.205 --> 00:50:05.645
<v Speaker 0>must have been as where the open API

00:50:05.645 --> 00:50:06.525
<v Speaker 0>spec is.

00:50:06.845 --> 00:50:08.365
<v Speaker 0>We tell it to crawl,

00:50:08.605 --> 00:50:09.405
<v Speaker 0>and

00:50:09.484 --> 00:50:10.845
<v Speaker 0>then we tell it the image that we

00:50:10.845 --> 00:50:12.045
<v Speaker 0>want to crawl again.

00:50:14.400 --> 00:50:17.760
<v Speaker 1>And in the in in the chat that

00:50:17.760 --> 00:50:19.360
<v Speaker 1>we share, I've

00:50:19.680 --> 00:50:21.839
<v Speaker 1>shared a link to an article that I

00:50:21.839 --> 00:50:23.520
<v Speaker 1>wrote that explains

00:50:23.520 --> 00:50:24.640
<v Speaker 1>how to use

00:50:25.040 --> 00:50:26.640
<v Speaker 1>probes and includes

00:50:27.155 --> 00:50:29.714
<v Speaker 1>and what, you know, what they're used for

00:50:29.714 --> 00:50:31.635
<v Speaker 1>and how to use them to achieve, you

00:50:31.635 --> 00:50:32.835
<v Speaker 1>know, different results.

00:50:33.155 --> 00:50:34.755
<v Speaker 1>So if you want to share that in

00:50:34.755 --> 00:50:37.475
<v Speaker 1>the chat, then there's a a reference there

00:50:37.555 --> 00:50:39.395
<v Speaker 1>that people can dig into to sort of

00:50:39.395 --> 00:50:40.915
<v Speaker 1>look at how these things

00:50:41.155 --> 00:50:42.195
<v Speaker 1>can be utilized.

00:50:43.950 --> 00:50:45.310
<v Speaker 0>Okay. I

00:50:46.030 --> 00:50:47.390
<v Speaker 0>will put this in the show notes for

00:50:47.390 --> 00:50:50.270
<v Speaker 0>people to read as well. There. Lots there.

00:50:50.270 --> 00:50:50.990
<v Speaker 1>Thank you.

00:50:52.270 --> 00:50:54.110
<v Speaker 0>Okay. So we did get a question in

00:50:54.110 --> 00:50:55.550
<v Speaker 0>the chat, but I think, like, Paul just

00:50:55.550 --> 00:50:56.110
<v Speaker 0>handled it.

00:50:56.865 --> 00:50:58.705
<v Speaker 0>Russell was asking,

00:50:59.185 --> 00:51:01.265
<v Speaker 0>so if your archive uploads to the portal

00:51:01.265 --> 00:51:03.425
<v Speaker 0>private to the uploader, I e, if I

00:51:03.425 --> 00:51:04.945
<v Speaker 0>had a private container, can I still use

00:51:04.945 --> 00:51:06.865
<v Speaker 0>the Slim portal to analyze it, or would

00:51:06.865 --> 00:51:07.905
<v Speaker 0>it make my image public?

00:51:10.000 --> 00:51:14.880
<v Speaker 2>Well, we don't make anything public. It's

00:51:14.880 --> 00:51:16.160
<v Speaker 1>just the metadata

00:51:16.160 --> 00:51:17.280
<v Speaker 1>to describe

00:51:17.600 --> 00:51:20.480
<v Speaker 1>the container that has been produced through the

00:51:20.480 --> 00:51:21.680
<v Speaker 1>Slimming process,

00:51:21.840 --> 00:51:23.040
<v Speaker 1>not the container itself.

00:51:23.525 --> 00:51:25.445
<v Speaker 0>Yeah. That I think that's really important. We

00:51:25.445 --> 00:51:27.285
<v Speaker 0>did not upload a container image to the

00:51:27.285 --> 00:51:30.485
<v Speaker 0>portal. We uploaded metadata about the container image

00:51:30.485 --> 00:51:32.165
<v Speaker 2>to the portal. Right. But it also will

00:51:32.165 --> 00:51:34.165
<v Speaker 2>stay available only for you.

00:51:34.805 --> 00:51:35.125
<v Speaker 1>Yeah.

00:51:36.030 --> 00:51:37.230
<v Speaker 1>Now

00:51:37.230 --> 00:51:38.350
<v Speaker 1>that said,

00:51:38.590 --> 00:51:40.670
<v Speaker 1>if you want to use the portal and

00:51:40.670 --> 00:51:42.590
<v Speaker 1>you have private registries,

00:51:42.910 --> 00:51:45.550
<v Speaker 1>you can connect to private registries

00:51:45.550 --> 00:51:49.285
<v Speaker 1>and do those comparisons on the portal using,

00:51:49.365 --> 00:51:50.645
<v Speaker 1>you know, authenticated

00:51:50.645 --> 00:51:54.325
<v Speaker 1>sessions for either individuals or teams within your

00:51:54.325 --> 00:51:55.205
<v Speaker 1>organization.

00:51:55.285 --> 00:51:57.605
<v Speaker 1>But what we've just shown you, it didn't

00:51:57.605 --> 00:51:59.205
<v Speaker 1>expose anything private

00:51:59.845 --> 00:52:01.445
<v Speaker 1>to the world.

00:52:02.405 --> 00:52:02.885
<v Speaker 0>Alright.

00:52:03.830 --> 00:52:06.150
<v Speaker 0>Okay. Let's talk about less compression then. So

00:52:06.150 --> 00:52:08.150
<v Speaker 0>we went from a one gig

00:52:08.310 --> 00:52:09.190
<v Speaker 0>image,

00:52:09.430 --> 00:52:11.830
<v Speaker 0>and this is telling us that we spout

00:52:11.830 --> 00:52:13.990
<v Speaker 0>out something that is 91

00:52:13.990 --> 00:52:14.870
<v Speaker 0>meg.

00:52:15.430 --> 00:52:16.070
<v Speaker 0>Again

00:52:16.695 --> 00:52:19.255
<v Speaker 0>okay. Just over 91 meg. That is a

00:52:19.255 --> 00:52:19.975
<v Speaker 0>huge

00:52:20.135 --> 00:52:21.015
<v Speaker 0>difference.

00:52:22.135 --> 00:52:23.575
<v Speaker 0>I mean, that's massive.

00:52:25.095 --> 00:52:28.055
<v Speaker 1>Yeah. That's a 10 times reduction right there.

00:52:29.030 --> 00:52:32.150
<v Speaker 0>Yeah. Very, very cool. I like that. Yeah.

00:52:32.150 --> 00:52:35.430
<v Speaker 2>We could probably achieve, like, a comparable result

00:52:35.589 --> 00:52:38.070
<v Speaker 2>if we just go and carefully

00:52:38.070 --> 00:52:39.510
<v Speaker 2>craft this

00:52:39.750 --> 00:52:41.510
<v Speaker 2>production version of this image,

00:52:42.005 --> 00:52:44.645
<v Speaker 2>like, using, I don't know, distroless

00:52:45.685 --> 00:52:47.765
<v Speaker 2>Yeah. You know, like, this node. Js distroless

00:52:47.765 --> 00:52:48.725
<v Speaker 2>from Google

00:52:48.885 --> 00:52:50.965
<v Speaker 2>and, like, carefully copying

00:52:51.365 --> 00:52:54.645
<v Speaker 2>all the needed packages and, like, doing the

00:52:54.990 --> 00:52:55.870
<v Speaker 2>staged

00:52:56.190 --> 00:52:57.310
<v Speaker 2>Docker build,

00:52:57.470 --> 00:52:58.110
<v Speaker 2>whatever,

00:52:58.990 --> 00:53:00.990
<v Speaker 2>will would be pretty much the same in

00:53:00.990 --> 00:53:01.630
<v Speaker 2>the end,

00:53:02.030 --> 00:53:03.870
<v Speaker 2>like, on the same order.

00:53:04.190 --> 00:53:04.750
<v Speaker 2>But

00:53:05.070 --> 00:53:06.270
<v Speaker 2>it would take us,

00:53:06.990 --> 00:53:09.310
<v Speaker 2>like, a lot of time to actually learn

00:53:09.310 --> 00:53:09.710
<v Speaker 2>this,

00:53:10.345 --> 00:53:12.425
<v Speaker 2>how to do this, and also then to

00:53:12.425 --> 00:53:13.545
<v Speaker 2>to prepare

00:53:14.185 --> 00:53:14.825
<v Speaker 2>the,

00:53:15.065 --> 00:53:16.905
<v Speaker 2>like, accurate

00:53:16.905 --> 00:53:19.465
<v Speaker 2>version of the image. And with Docker Slim,

00:53:19.465 --> 00:53:21.545
<v Speaker 2>you just actually saw it took us, like,

00:53:21.545 --> 00:53:23.849
<v Speaker 2>I don't know, less than a minute to

00:53:23.849 --> 00:53:25.290
<v Speaker 2>produce the end result.

00:53:26.250 --> 00:53:28.329
<v Speaker 1>And that that speaks to the origins of

00:53:28.329 --> 00:53:31.530
<v Speaker 1>Docker Slim. You know? Keep your existing workflows

00:53:31.530 --> 00:53:32.570
<v Speaker 1>and add

00:53:32.650 --> 00:53:35.994
<v Speaker 1>this process on the end that does the

00:53:35.994 --> 00:53:36.795
<v Speaker 1>optimization

00:53:36.795 --> 00:53:40.075
<v Speaker 1>for you. If you're using something like Distroless,

00:53:40.075 --> 00:53:42.315
<v Speaker 1>then now it's you need to,

00:53:43.035 --> 00:53:45.595
<v Speaker 1>learn the process of doing multistage builds, for

00:53:45.595 --> 00:53:47.915
<v Speaker 1>example. If you're using Alpine,

00:53:48.400 --> 00:53:51.440
<v Speaker 1>you need to learn the process of the

00:53:52.160 --> 00:53:54.000
<v Speaker 1>sort of additive packages.

00:53:54.160 --> 00:53:57.040
<v Speaker 1>I'm starting with something very small, and now

00:53:57.040 --> 00:53:59.040
<v Speaker 1>I'm a distro maintainer because I need to

00:53:59.040 --> 00:54:00.880
<v Speaker 1>know what are the packages that I require

00:54:00.800 --> 00:54:02.160
<v Speaker 1>application requires

00:54:02.255 --> 00:54:04.815
<v Speaker 1>in order to build up from almost nothing

00:54:04.815 --> 00:54:07.295
<v Speaker 1>to something that supports my application.

00:54:07.695 --> 00:54:09.375
<v Speaker 1>Whereas what we're doing is tipping things on

00:54:09.375 --> 00:54:10.095
<v Speaker 1>their head.

00:54:10.415 --> 00:54:13.295
<v Speaker 1>Start with something large that fully supports your

00:54:13.295 --> 00:54:15.535
<v Speaker 1>application that you're probably familiar with or your

00:54:15.535 --> 00:54:17.215
<v Speaker 1>teams are familiar with. In this case,

00:54:18.510 --> 00:54:21.630
<v Speaker 1>I think this is an Ubuntu based container,

00:54:21.630 --> 00:54:24.190
<v Speaker 1>and I know you're using Ubuntu in the

00:54:24.430 --> 00:54:25.790
<v Speaker 1>on this server here,

00:54:26.110 --> 00:54:27.550
<v Speaker 1>and reduce that down.

00:54:27.790 --> 00:54:28.430
<v Speaker 1>Now

00:54:28.590 --> 00:54:31.355
<v Speaker 1>I've been recently experimenting

00:54:31.355 --> 00:54:34.315
<v Speaker 1>with things like Alpine and Distroless

00:54:34.555 --> 00:54:35.995
<v Speaker 1>and and also

00:54:36.955 --> 00:54:40.395
<v Speaker 1>containers that do conform to best practice that

00:54:40.395 --> 00:54:42.660
<v Speaker 1>are built on top of, you know, Debian

00:54:42.660 --> 00:54:44.420
<v Speaker 1>and sent well, not sent to us these

00:54:44.420 --> 00:54:45.940
<v Speaker 1>days, but, you know, Alma and

00:54:47.060 --> 00:54:48.100
<v Speaker 1>Ubuntu.

00:54:49.060 --> 00:54:51.380
<v Speaker 1>And seeing, well, if I take an Alpine

00:54:51.380 --> 00:54:54.020
<v Speaker 1>and a distroless container, can I still optimize

00:54:54.020 --> 00:54:55.780
<v Speaker 1>those with Docker Slim? And the answer is,

00:54:55.780 --> 00:54:56.820
<v Speaker 1>well, yes, you can.

00:54:57.515 --> 00:55:00.155
<v Speaker 1>And in the examples that I've been working

00:55:00.155 --> 00:55:00.715
<v Speaker 1>with,

00:55:00.955 --> 00:55:03.435
<v Speaker 1>I end up with container images that have

00:55:03.435 --> 00:55:05.835
<v Speaker 1>gone through the the reductive process.

00:55:06.555 --> 00:55:08.635
<v Speaker 1>Starting with Ubuntu, for example,

00:55:08.955 --> 00:55:11.595
<v Speaker 1>I get something that is 25 megabytes. This

00:55:11.595 --> 00:55:14.300
<v Speaker 1>was a simple Python application that implemented a

00:55:14.300 --> 00:55:16.700
<v Speaker 1>RESTful API. And I put the same app

00:55:16.700 --> 00:55:17.420
<v Speaker 1>inside

00:55:17.740 --> 00:55:20.220
<v Speaker 1>an Alpine base image and a distroless base

00:55:20.220 --> 00:55:20.780
<v Speaker 1>image.

00:55:21.180 --> 00:55:23.500
<v Speaker 1>And within one or two megabytes,

00:55:23.820 --> 00:55:26.780
<v Speaker 1>the optimized containers were the same size.

00:55:27.020 --> 00:55:29.245
<v Speaker 1>So you can optimize

00:55:29.245 --> 00:55:32.365
<v Speaker 1>Alpine and Distroless as well even if you've

00:55:32.365 --> 00:55:35.325
<v Speaker 1>well prepared those Alpine and Distroless containers

00:55:35.325 --> 00:55:37.725
<v Speaker 1>because there will be things inside them that

00:55:37.725 --> 00:55:40.539
<v Speaker 1>your application doesn't require. I did this last

00:55:40.539 --> 00:55:43.099
<v Speaker 1>week with the team at Influx looking at

00:55:43.099 --> 00:55:44.460
<v Speaker 1>some of their containers,

00:55:44.460 --> 00:55:45.099
<v Speaker 1>which are

00:55:45.339 --> 00:55:49.260
<v Speaker 1>statically compiled go binaries inside container images,

00:55:49.740 --> 00:55:52.380
<v Speaker 1>some of which are using Debian based images,

00:55:52.380 --> 00:55:54.539
<v Speaker 1>some of which are using Alpine based images.

00:55:54.905 --> 00:55:56.905
<v Speaker 1>And even on the Alpine base images, we

00:55:56.905 --> 00:55:58.825
<v Speaker 1>were looking at a 20 megabyte

00:55:58.825 --> 00:55:59.704
<v Speaker 1>reduction

00:55:59.704 --> 00:56:03.224
<v Speaker 1>on the optimized container going through Docker Slim.

00:56:03.224 --> 00:56:05.065
<v Speaker 1>And on the Debian side of things, it's

00:56:05.065 --> 00:56:06.505
<v Speaker 1>a bit like what we're looking at here.

00:56:06.505 --> 00:56:08.745
<v Speaker 1>It was, you know, hundreds of megabytes smaller.

00:56:09.945 --> 00:56:10.425
<v Speaker 0>Nice.

00:56:11.330 --> 00:56:13.330
<v Speaker 0>This seems like one of those things that's

00:56:13.330 --> 00:56:13.890
<v Speaker 0>just

00:56:14.290 --> 00:56:16.450
<v Speaker 0>almost a no a no brainer. Like, I

00:56:16.450 --> 00:56:17.970
<v Speaker 0>I meet a lot of people that are

00:56:17.970 --> 00:56:19.810
<v Speaker 0>adopting containers and Kubernetes,

00:56:19.810 --> 00:56:21.730
<v Speaker 0>and, you know, they don't know how to

00:56:21.730 --> 00:56:24.245
<v Speaker 0>make their images smaller and optimize them. Really,

00:56:24.245 --> 00:56:25.925
<v Speaker 0>they just wanna get shit done. They just

00:56:25.925 --> 00:56:28.165
<v Speaker 0>wanna build an image and deploy their application

00:56:28.165 --> 00:56:30.245
<v Speaker 0>and not worry about this. They're not container

00:56:30.245 --> 00:56:31.845
<v Speaker 0>experts. They've not been doing this for six

00:56:31.845 --> 00:56:33.365
<v Speaker 0>years. Sometimes they've been doing it for six

00:56:33.365 --> 00:56:35.605
<v Speaker 0>weeks. And they've been able to say, hey.

00:56:35.605 --> 00:56:37.605
<v Speaker 0>Just use this Doppler slim thing in your

00:56:37.605 --> 00:56:40.750
<v Speaker 0>CI pipeline and then, you know, push through

00:56:40.750 --> 00:56:42.910
<v Speaker 0>your image to a registry and then jump

00:56:42.910 --> 00:56:43.790
<v Speaker 0>that. Like,

00:56:44.190 --> 00:56:45.710
<v Speaker 0>I I I've struggled to see why more

00:56:45.710 --> 00:56:48.030
<v Speaker 0>people just would use this by default.

00:56:49.230 --> 00:56:51.470
<v Speaker 2>Let let's let's be careful here. So

00:56:52.415 --> 00:56:54.494
<v Speaker 2>so and, you know, like, every magic, it

00:56:54.494 --> 00:56:55.775
<v Speaker 2>comes at a price.

00:56:56.895 --> 00:56:57.455
<v Speaker 2>So,

00:56:58.895 --> 00:57:00.255
<v Speaker 2>like, first of all, I

00:57:00.734 --> 00:57:01.775
<v Speaker 2>have to be, like,

00:57:02.175 --> 00:57:05.375
<v Speaker 2>fair and and just say it out loud

00:57:05.375 --> 00:57:08.530
<v Speaker 2>that I used to be skeptical about Docker

00:57:08.530 --> 00:57:09.890
<v Speaker 2>Slim s two,

00:57:10.369 --> 00:57:13.010
<v Speaker 2>not because of its value, like, not because

00:57:13.010 --> 00:57:15.090
<v Speaker 2>of the like, it's the value is huge.

00:57:15.090 --> 00:57:16.930
<v Speaker 2>Like, if I can reduce, like, a one

00:57:16.930 --> 00:57:19.250
<v Speaker 2>gig to 50 megabytes in no time, well,

00:57:19.535 --> 00:57:22.175
<v Speaker 2>the value is huge for me. But I

00:57:22.175 --> 00:57:24.575
<v Speaker 2>was skeptical about the quality of the results

00:57:24.895 --> 00:57:25.695
<v Speaker 2>because,

00:57:25.775 --> 00:57:28.015
<v Speaker 2>well, I just don't believe a tool that

00:57:28.015 --> 00:57:28.815
<v Speaker 2>removes

00:57:28.815 --> 00:57:32.015
<v Speaker 2>90% of my image and claims the end

00:57:32.015 --> 00:57:33.775
<v Speaker 2>result, like, workable.

00:57:33.775 --> 00:57:35.260
<v Speaker 2>Well, no way.

00:57:35.579 --> 00:57:36.220
<v Speaker 2>But

00:57:36.700 --> 00:57:38.540
<v Speaker 2>after learning how much

00:57:39.900 --> 00:57:42.940
<v Speaker 2>of the intelligence is actually there is inside

00:57:42.940 --> 00:57:45.660
<v Speaker 2>and and through how many different use cases

00:57:45.660 --> 00:57:46.299
<v Speaker 2>we already

00:57:47.500 --> 00:57:49.579
<v Speaker 2>over this past seven year been through,

00:57:51.625 --> 00:57:53.625
<v Speaker 2>the success rate

00:57:53.865 --> 00:57:55.224
<v Speaker 2>of the produced

00:57:55.464 --> 00:57:56.744
<v Speaker 2>Slim images,

00:57:56.744 --> 00:57:58.425
<v Speaker 2>like, to be functional

00:57:58.505 --> 00:57:59.465
<v Speaker 2>is actually

00:58:00.184 --> 00:58:03.385
<v Speaker 2>extremely high. I wouldn't expect this to be

00:58:03.385 --> 00:58:05.780
<v Speaker 2>that high, But the number of stories we

00:58:05.780 --> 00:58:06.980
<v Speaker 2>have on GitHub,

00:58:07.060 --> 00:58:08.660
<v Speaker 2>the number of users we have in my

00:58:08.820 --> 00:58:09.780
<v Speaker 2>our, like,

00:58:10.420 --> 00:58:11.220
<v Speaker 2>cumulative

00:58:11.220 --> 00:58:12.100
<v Speaker 2>community,

00:58:12.340 --> 00:58:14.020
<v Speaker 2>and the number of reported

00:58:14.020 --> 00:58:15.300
<v Speaker 2>success stories,

00:58:15.700 --> 00:58:18.420
<v Speaker 2>well, I still don't like, cannot believe in

00:58:18.420 --> 00:58:19.620
<v Speaker 2>it, but it's it's,

00:58:19.974 --> 00:58:21.415
<v Speaker 2>well, it works.

00:58:22.055 --> 00:58:22.615
<v Speaker 2>But

00:58:23.095 --> 00:58:23.735
<v Speaker 2>even

00:58:24.775 --> 00:58:27.735
<v Speaker 2>with all this pretty high success rate,

00:58:28.375 --> 00:58:29.655
<v Speaker 2>I would not advise

00:58:30.055 --> 00:58:32.935
<v Speaker 2>anyone to put a Slim image in production

00:58:33.780 --> 00:58:36.820
<v Speaker 2>without putting it through as thorough testing first.

00:58:36.820 --> 00:58:38.580
<v Speaker 0>Right. Like, probably,

00:58:38.660 --> 00:58:39.540
<v Speaker 2>the the

00:58:40.020 --> 00:58:41.380
<v Speaker 2>very first step,

00:58:41.780 --> 00:58:44.580
<v Speaker 2>and this is another motor of our, like,

00:58:44.580 --> 00:58:45.300
<v Speaker 2>company,

00:58:45.620 --> 00:58:47.540
<v Speaker 2>is you need to understand what's inside of

00:58:47.540 --> 00:58:50.974
<v Speaker 2>your images. So not just slim them down,

00:58:51.134 --> 00:58:53.375
<v Speaker 2>but also understand what's inside.

00:58:53.454 --> 00:58:54.015
<v Speaker 2>So

00:58:54.734 --> 00:58:58.174
<v Speaker 2>whatever your preferred way, that way, dive or

00:58:58.174 --> 00:58:59.695
<v Speaker 2>Docker Slim X-ray

00:58:59.775 --> 00:59:02.380
<v Speaker 2>and then upload it to the portal or

00:59:02.380 --> 00:59:05.660
<v Speaker 2>some like, I don't know, Docker Docker extract

00:59:06.460 --> 00:59:09.820
<v Speaker 2>command. Whatever. Just go and see what's inside.

00:59:10.220 --> 00:59:13.020
<v Speaker 2>Because you, as an application developer, probably know

00:59:13.020 --> 00:59:15.734
<v Speaker 2>that, okay. I have this or I the

00:59:15.974 --> 00:59:17.974
<v Speaker 2>this static assets folder. It should have been

00:59:17.974 --> 00:59:20.375
<v Speaker 2>there, but it's not there. So probably the

00:59:20.375 --> 00:59:22.375
<v Speaker 2>optimization wasn't smart enough.

00:59:23.335 --> 00:59:26.055
<v Speaker 2>Well, you have to kind of be careful

00:59:26.055 --> 00:59:27.734
<v Speaker 2>about the produced results.

00:59:28.580 --> 00:59:31.140
<v Speaker 2>And if you detected something like that, Docker

00:59:31.140 --> 00:59:33.940
<v Speaker 2>Slimming has, like, just tremendous amount of of

00:59:33.940 --> 00:59:35.540
<v Speaker 2>knobs to actually

00:59:35.780 --> 00:59:37.780
<v Speaker 2>configure these extra

00:59:37.780 --> 00:59:38.660
<v Speaker 2>included

00:59:38.660 --> 00:59:41.620
<v Speaker 2>files or some excluded files or, like, changed

00:59:41.620 --> 00:59:43.460
<v Speaker 2>permissions, whatever. Like, it has a lot of

00:59:43.460 --> 00:59:45.855
<v Speaker 2>knobs. So you see, by default, the build

00:59:45.855 --> 00:59:48.575
<v Speaker 2>command, it just accepts, like, two parameters,

00:59:48.815 --> 00:59:50.175
<v Speaker 2>but you can go up to, like, a

00:59:50.175 --> 00:59:52.655
<v Speaker 2>hundred to fine tune the end result.

00:59:53.855 --> 00:59:56.175
<v Speaker 2>That's one thing. And another one,

00:59:56.815 --> 01:00:00.570
<v Speaker 2>go like, push this image through testing phase.

01:00:00.650 --> 01:00:02.730
<v Speaker 2>Like, if Docker Slim is a part of

01:00:02.730 --> 01:00:04.490
<v Speaker 2>your CICD pipeline,

01:00:05.050 --> 01:00:07.530
<v Speaker 2>it cannot be the last one before actually

01:00:07.530 --> 01:00:09.369
<v Speaker 2>shipping the image. It should be, like, the

01:00:09.369 --> 01:00:10.170
<v Speaker 2>penultimate

01:00:10.170 --> 01:00:10.810
<v Speaker 2>one

01:00:11.050 --> 01:00:11.609
<v Speaker 2>before

01:00:11.955 --> 01:00:14.515
<v Speaker 2>pushing this image to acceptance testing.

01:00:14.755 --> 01:00:16.515
<v Speaker 2>And then once it's tested,

01:00:16.755 --> 01:00:18.435
<v Speaker 2>then you can go to production.

01:00:18.515 --> 01:00:19.315
<v Speaker 2>That's,

01:00:19.795 --> 01:00:20.995
<v Speaker 2>like, an important

01:00:21.875 --> 01:00:25.155
<v Speaker 2>kind of, I don't know, point to to

01:00:25.155 --> 01:00:26.195
<v Speaker 2>focus on.

01:00:26.995 --> 01:00:27.475
<v Speaker 0>Awesome.

01:00:27.980 --> 01:00:30.380
<v Speaker 0>I mean, those points are also just good

01:00:30.380 --> 01:00:32.539
<v Speaker 0>container hygiene as well, though. Like, people should

01:00:32.539 --> 01:00:34.460
<v Speaker 0>be testing their images regardless of the tooling

01:00:34.460 --> 01:00:36.059
<v Speaker 0>that they're using before it goes to prod.

01:00:36.059 --> 01:00:37.579
<v Speaker 0>So it's good that you're kinda doubling down

01:00:37.579 --> 01:00:38.859
<v Speaker 0>on that and just saying, like, you know,

01:00:38.859 --> 01:00:39.580
<v Speaker 0>seriously,

01:00:40.059 --> 01:00:42.539
<v Speaker 0>run tests against this container image because you

01:00:42.539 --> 01:00:43.180
<v Speaker 0>just never know.

01:00:43.825 --> 01:00:46.385
<v Speaker 2>And testing, it doesn't literally mean that you

01:00:46.385 --> 01:00:49.665
<v Speaker 2>have to write tests and execute them. Testing

01:00:49.665 --> 01:00:51.185
<v Speaker 2>could be done in production.

01:00:52.145 --> 01:00:53.665
<v Speaker 2>Well, like, I've been

01:00:54.305 --> 01:00:56.385
<v Speaker 2>doing it myself, like, in different setups.

01:00:57.430 --> 01:00:59.990
<v Speaker 2>If you can limit the amount of traffic

01:00:59.990 --> 01:01:01.430
<v Speaker 2>that you send to this

01:01:01.830 --> 01:01:03.510
<v Speaker 2>new version of the image, like, do the

01:01:03.510 --> 01:01:06.710
<v Speaker 2>standard canary thing, you can minimize the image.

01:01:06.790 --> 01:01:09.030
<v Speaker 2>You can deploy it and just either mirror

01:01:09.030 --> 01:01:12.085
<v Speaker 2>traffic to it or shed some minimal amount

01:01:12.085 --> 01:01:14.325
<v Speaker 2>of of traffic to it and see,

01:01:14.484 --> 01:01:17.045
<v Speaker 2>like, your metrics if you don't have enough

01:01:17.045 --> 01:01:19.525
<v Speaker 2>test coverage, which is also fine.

01:01:20.325 --> 01:01:20.964
<v Speaker 0>Yeah.

01:01:21.204 --> 01:01:23.365
<v Speaker 0>A good project for that is the captain

01:01:23.365 --> 01:01:24.805
<v Speaker 0>project from the CNCF,

01:01:25.150 --> 01:01:28.270
<v Speaker 0>which does auto remediation based on header header

01:01:28.270 --> 01:01:28.990
<v Speaker 0>rates.

01:01:29.230 --> 01:01:30.670
<v Speaker 0>Yeah, that would be a good a good

01:01:30.670 --> 01:01:31.550
<v Speaker 0>partner there.

01:01:32.430 --> 01:01:34.830
<v Speaker 0>Okay. We we we've been talking a lot.

01:01:34.830 --> 01:01:36.270
<v Speaker 0>So let's get back to our demos here.

01:01:36.270 --> 01:01:37.470
<v Speaker 0>Let's take some commands.

01:01:38.590 --> 01:01:38.910
<v Speaker 2>Yeah.

01:01:40.345 --> 01:01:42.665
<v Speaker 2>So We could we could probably skip so

01:01:42.665 --> 01:01:44.825
<v Speaker 2>let let's decide. We have two more.

01:01:45.305 --> 01:01:47.225
<v Speaker 2>We probably don't have time for both.

01:01:48.025 --> 01:01:49.465
<v Speaker 2>Like, one is

01:01:49.945 --> 01:01:51.705
<v Speaker 2>auto generated second profiles.

01:01:52.240 --> 01:01:52.960
<v Speaker 2>Since

01:01:53.040 --> 01:01:54.080
<v Speaker 2>Docker Slim actually

01:01:55.120 --> 01:01:57.520
<v Speaker 2>part of its intelligence is the graph of

01:01:57.520 --> 01:01:58.480
<v Speaker 2>system calls,

01:01:59.200 --> 01:02:02.320
<v Speaker 2>we can just leverage this data to produce

01:02:03.040 --> 01:02:05.520
<v Speaker 2>a second profile to auto generate a second

01:02:05.520 --> 01:02:06.800
<v Speaker 2>profile

01:02:06.335 --> 01:02:09.214
<v Speaker 2>that would be a good starting point. I

01:02:09.214 --> 01:02:11.535
<v Speaker 2>would not say it's the,

01:02:11.535 --> 01:02:12.255
<v Speaker 2>like,

01:02:12.654 --> 01:02:15.375
<v Speaker 2>second profile you would put into production,

01:02:16.414 --> 01:02:18.869
<v Speaker 2>but it's a good starting point. And you

01:02:18.869 --> 01:02:21.670
<v Speaker 2>can just fine fine tune it further and

01:02:21.670 --> 01:02:22.710
<v Speaker 2>then ship it.

01:02:23.510 --> 01:02:25.750
<v Speaker 2>That's one example we can see.

01:02:25.990 --> 01:02:28.230
<v Speaker 2>Or we have something

01:02:28.390 --> 01:02:29.830
<v Speaker 2>rather secret that

01:02:30.470 --> 01:02:31.750
<v Speaker 2>hasn't been announced yet.

01:02:32.355 --> 01:02:34.915
<v Speaker 2>It's Kubernetes support for

01:02:35.235 --> 01:02:36.275
<v Speaker 2>Docker Slim.

01:02:36.755 --> 01:02:39.155
<v Speaker 2>Despite the name, Docker Slim,

01:02:39.875 --> 01:02:41.075
<v Speaker 2>we understand

01:02:41.235 --> 01:02:43.635
<v Speaker 2>that there are different run times at the

01:02:43.635 --> 01:02:45.430
<v Speaker 2>moment to run containers,

01:02:45.430 --> 01:02:47.990
<v Speaker 2>and probably the most popular one is Kubernetes.

01:02:48.390 --> 01:02:51.030
<v Speaker 2>So we are starting adding more run times,

01:02:51.030 --> 01:02:53.750
<v Speaker 2>and Kubernetes is the first one. So which

01:02:53.750 --> 01:02:54.310
<v Speaker 2>one?

01:02:55.510 --> 01:02:57.190
<v Speaker 0>Well, I mean, you saw that Kubernetes one

01:02:57.190 --> 01:02:58.630
<v Speaker 0>pretty well, so I feel that we're gonna

01:02:58.630 --> 01:02:59.590
<v Speaker 0>have to do that. Right?

01:03:01.685 --> 01:03:03.685
<v Speaker 0>Plus, it sounds like the riskiest one. So,

01:03:03.685 --> 01:03:05.205
<v Speaker 0>you know, I do love a challenge.

01:03:06.005 --> 01:03:07.365
<v Speaker 0>I mean, especially when I'm not doing the

01:03:07.365 --> 01:03:08.085
<v Speaker 0>typing.

01:03:09.365 --> 01:03:11.925
<v Speaker 2>Okay. Let's let's go for Kubernetes then.

01:03:13.310 --> 01:03:14.030
<v Speaker 2>Alright.

01:03:14.510 --> 01:03:17.310
<v Speaker 2>Shall I share my screen? Yeah. Let's do

01:03:17.310 --> 01:03:17.870
<v Speaker 0>it.

01:03:23.390 --> 01:03:24.110
<v Speaker 2>Window.

01:03:27.625 --> 01:03:28.265
<v Speaker 2>Yeah.

01:03:28.665 --> 01:03:29.465
<v Speaker 2>Works.

01:03:29.944 --> 01:03:32.105
<v Speaker 0>It does? I'm just popping it up now.

01:03:32.425 --> 01:03:35.145
<v Speaker 0>Alright. You're on the oh, can you

01:03:35.785 --> 01:03:37.465
<v Speaker 0>hold on. Your window's a

01:03:38.345 --> 01:03:39.464
<v Speaker 0>different size.

01:03:40.550 --> 01:03:42.710
<v Speaker 0>Yeah. Can you I think your terminal's a

01:03:42.710 --> 01:03:44.150
<v Speaker 0>bit tall. Can you

01:03:46.150 --> 01:03:47.590
<v Speaker 2>Yeah. It's better now.

01:03:48.230 --> 01:03:49.670
<v Speaker 2>I can see I can see the

01:03:50.470 --> 01:03:51.590
<v Speaker 0>I don't know if I can see the

01:03:51.590 --> 01:03:52.630
<v Speaker 0>the bottom, though.

01:03:54.035 --> 01:03:55.715
<v Speaker 2>That's fine because I'm not at the bottom.

01:03:55.715 --> 01:03:58.115
<v Speaker 0>Ah, okay. Yeah. Perfect. Yeah. Thank you. Yeah.

01:04:00.115 --> 01:04:02.755
<v Speaker 2>So before we we jump to to the

01:04:02.915 --> 01:04:03.955
<v Speaker 2>to typing,

01:04:05.955 --> 01:04:07.955
<v Speaker 2>as I just mentioned, like,

01:04:08.515 --> 01:04:09.475
<v Speaker 2>Duckers Slim,

01:04:09.980 --> 01:04:13.020
<v Speaker 2>it does runtime analysis of images to minify

01:04:13.020 --> 01:04:13.660
<v Speaker 2>them.

01:04:15.500 --> 01:04:17.340
<v Speaker 2>Like, in 2021,

01:04:17.980 --> 01:04:20.059
<v Speaker 2>I think there is very few people who

01:04:20.059 --> 01:04:22.299
<v Speaker 2>actually run their production images,

01:04:23.315 --> 01:04:25.155
<v Speaker 2>like, in standalone mode.

01:04:25.555 --> 01:04:27.875
<v Speaker 2>Most likely, your service has, like, I don't

01:04:27.875 --> 01:04:30.115
<v Speaker 2>know, a bunch of sidecars

01:04:31.075 --> 01:04:31.635
<v Speaker 2>and,

01:04:32.115 --> 01:04:35.474
<v Speaker 2>like, several external API dependencies and maybe a

01:04:35.474 --> 01:04:35.954
<v Speaker 2>database.

01:04:38.369 --> 01:04:40.770
<v Speaker 2>Like, it's gonna be hard to

01:04:41.329 --> 01:04:42.130
<v Speaker 2>optimize,

01:04:42.130 --> 01:04:44.769
<v Speaker 2>like, to slim down such an image that

01:04:44.769 --> 01:04:45.890
<v Speaker 2>actually requires

01:04:45.890 --> 01:04:49.170
<v Speaker 2>five different other endpoints to be available.

01:04:49.569 --> 01:04:52.049
<v Speaker 2>So the first thing we implemented for Docker

01:04:52.049 --> 01:04:55.695
<v Speaker 2>Slim was Docker Compose mode support

01:04:55.855 --> 01:04:58.415
<v Speaker 2>because this is much more realistic scenario when

01:04:58.415 --> 01:05:00.255
<v Speaker 2>you have your image

01:05:00.415 --> 01:05:02.815
<v Speaker 2>surrounded by all your dependencies.

01:05:04.175 --> 01:05:04.815
<v Speaker 2>So

01:05:05.619 --> 01:05:08.020
<v Speaker 2>one of the things Docker Slim can do

01:05:08.020 --> 01:05:09.859
<v Speaker 2>now is actually take

01:05:09.940 --> 01:05:12.580
<v Speaker 2>instead of target image, take the whole

01:05:12.740 --> 01:05:15.540
<v Speaker 2>Docker Docker Compose file, like the YAML file

01:05:15.540 --> 01:05:17.060
<v Speaker 2>you you, like, normally write,

01:05:18.125 --> 01:05:20.525
<v Speaker 2>And then you just tell it what image

01:05:20.605 --> 01:05:23.565
<v Speaker 2>out of the all images mentioned there are

01:05:23.565 --> 01:05:24.605
<v Speaker 2>to optimize,

01:05:24.605 --> 01:05:27.805
<v Speaker 2>and it will start much like Docker Compose

01:05:27.805 --> 01:05:28.445
<v Speaker 2>up

01:05:28.765 --> 01:05:29.645
<v Speaker 2>the whole

01:05:30.045 --> 01:05:30.444
<v Speaker 2>scenario

01:05:31.040 --> 01:05:33.680
<v Speaker 2>and just go and do the probing for

01:05:33.680 --> 01:05:36.480
<v Speaker 2>the target image out of these

01:05:37.280 --> 01:05:39.760
<v Speaker 2>images specified in this YARL file.

01:05:40.960 --> 01:05:43.599
<v Speaker 2>But I wanted to show something slightly different.

01:05:46.825 --> 01:05:48.985
<v Speaker 2>Pretty much the same thing could be done

01:05:48.985 --> 01:05:50.745
<v Speaker 2>for Kubernetes.

01:05:52.105 --> 01:05:53.465
<v Speaker 2>So what we can do,

01:05:53.785 --> 01:05:55.625
<v Speaker 2>we can try injecting

01:05:55.865 --> 01:05:56.905
<v Speaker 2>the sensor,

01:05:56.985 --> 01:05:58.985
<v Speaker 2>this tiny little sensor of Docker Slim

01:05:59.609 --> 01:06:02.410
<v Speaker 2>a workload that actually runs as a Kubernetes

01:06:02.410 --> 01:06:04.810
<v Speaker 2>deployment or as a Kubernetes

01:06:05.210 --> 01:06:08.250
<v Speaker 2>replica set or, like, daemon set, whatever you

01:06:08.250 --> 01:06:09.130
<v Speaker 2>you want,

01:06:10.970 --> 01:06:11.609
<v Speaker 2>and

01:06:12.490 --> 01:06:14.295
<v Speaker 2>start probing it using

01:06:14.375 --> 01:06:15.415
<v Speaker 2>well, whatever.

01:06:17.175 --> 01:06:19.335
<v Speaker 2>And once we have all this intelligence

01:06:19.494 --> 01:06:21.655
<v Speaker 2>in an artifact file generated,

01:06:21.734 --> 01:06:24.055
<v Speaker 2>we just should ship it back from the

01:06:24.055 --> 01:06:24.935
<v Speaker 2>cluster

01:06:25.175 --> 01:06:27.815
<v Speaker 2>to your main driver app, which is like

01:06:27.815 --> 01:06:29.095
<v Speaker 2>the CLI itself.

01:06:30.000 --> 01:06:31.920
<v Speaker 2>And then the rest is exactly the same

01:06:31.920 --> 01:06:34.640
<v Speaker 2>as for any other scenario here, as for

01:06:34.640 --> 01:06:37.120
<v Speaker 2>the stand alone mode, for instance. So we

01:06:37.120 --> 01:06:38.080
<v Speaker 2>will produce

01:06:38.320 --> 01:06:39.520
<v Speaker 2>a slim version

01:06:40.000 --> 01:06:40.640
<v Speaker 2>for

01:06:41.200 --> 01:06:43.440
<v Speaker 2>a workload that actually runs on Kubernetes.

01:06:44.565 --> 01:06:48.005
<v Speaker 2>But once we get into the Kubernetes world,

01:06:49.045 --> 01:06:50.085
<v Speaker 2>like, the

01:06:50.405 --> 01:06:52.485
<v Speaker 2>possibilities become just endless.

01:06:52.724 --> 01:06:54.325
<v Speaker 2>Because in Kubernetes,

01:06:54.484 --> 01:06:55.285
<v Speaker 2>we can

01:06:56.005 --> 01:06:57.845
<v Speaker 2>start doing, like, traffic shifting

01:06:58.329 --> 01:07:00.730
<v Speaker 2>right in your cluster. Why not? Like, you

01:07:00.730 --> 01:07:02.650
<v Speaker 2>you you if you have a deployment of

01:07:02.650 --> 01:07:05.930
<v Speaker 2>10 different port of 10 ports,

01:07:07.290 --> 01:07:10.329
<v Speaker 2>you can actually try slimming it down right

01:07:10.329 --> 01:07:12.410
<v Speaker 2>in production. Just start up

01:07:12.650 --> 01:07:13.849
<v Speaker 2>the eleventh port,

01:07:15.185 --> 01:07:16.625
<v Speaker 2>send some traffic to it,

01:07:17.025 --> 01:07:19.105
<v Speaker 2>optimize it, and slim it down.

01:07:19.825 --> 01:07:21.505
<v Speaker 2>So let's see how it works.

01:07:22.785 --> 01:07:25.425
<v Speaker 2>What I did here while we were talking,

01:07:25.425 --> 01:07:26.945
<v Speaker 2>I cloned our

01:07:27.585 --> 01:07:29.345
<v Speaker 2>main repository

01:07:29.520 --> 01:07:30.160
<v Speaker 2>and

01:07:30.880 --> 01:07:31.680
<v Speaker 2>built

01:07:33.760 --> 01:07:34.640
<v Speaker 2>from

01:07:34.640 --> 01:07:36.960
<v Speaker 2>the main branch because it's

01:07:37.120 --> 01:07:39.840
<v Speaker 2>something that hasn't been released yet, but it

01:07:39.840 --> 01:07:40.320
<v Speaker 2>already

01:07:41.280 --> 01:07:42.480
<v Speaker 2>it's already been merged.

01:07:44.055 --> 01:07:47.335
<v Speaker 2>So, like, nothing fancy here. Just go build.

01:07:47.815 --> 01:07:49.975
<v Speaker 2>So now we have the

01:08:03.560 --> 01:08:05.720
<v Speaker 2>Yeah. I think it's in the dist.

01:08:06.760 --> 01:08:08.600
<v Speaker 2>And this is not on our machine. Right?

01:08:10.944 --> 01:08:13.265
<v Speaker 0>No. No. No. This is that Intel machine.

01:08:13.585 --> 01:08:15.825
<v Speaker 2>Okay. So now let's let's do

01:08:16.305 --> 01:08:17.664
<v Speaker 2>a nasty thing.

01:08:19.585 --> 01:08:20.465
<v Speaker 2>Let's

01:08:21.425 --> 01:08:22.864
<v Speaker 2>move this

01:08:28.770 --> 01:08:30.529
<v Speaker 2>this binaries to the

01:08:31.090 --> 01:08:33.250
<v Speaker 2>to place where they will be reachable.

01:08:51.449 --> 01:08:53.129
<v Speaker 2>I think it's a fresh one.

01:08:53.369 --> 01:08:54.010
<v Speaker 2>So

01:08:54.329 --> 01:08:56.729
<v Speaker 2>if we now get back to these examples

01:08:57.130 --> 01:08:58.010
<v Speaker 2>folder,

01:08:58.889 --> 01:09:00.649
<v Speaker 2>there is a new example

01:09:00.729 --> 01:09:02.969
<v Speaker 2>mentioning Kubernetes deployment optimization.

01:09:03.965 --> 01:09:04.604
<v Speaker 2>So

01:09:05.085 --> 01:09:07.244
<v Speaker 2>first, we have to create a

01:09:07.404 --> 01:09:08.124
<v Speaker 2>cluster,

01:09:08.764 --> 01:09:09.644
<v Speaker 2>and we have

01:09:11.724 --> 01:09:14.204
<v Speaker 2>a kind already preinstalled on this machine, so

01:09:14.204 --> 01:09:15.164
<v Speaker 2>this should be

01:09:16.045 --> 01:09:16.925
<v Speaker 2>done

01:09:17.450 --> 01:09:18.649
<v Speaker 2>in no time.

01:09:19.530 --> 01:09:22.090
<v Speaker 2>But the cluster is not really a requirement.

01:09:22.090 --> 01:09:24.010
<v Speaker 2>So you can use, like, any cluster. Remote

01:09:24.010 --> 01:09:26.250
<v Speaker 2>one is also fine as long as you

01:09:26.250 --> 01:09:29.370
<v Speaker 2>can run images on it and to to,

01:09:29.610 --> 01:09:31.530
<v Speaker 2>like, keep still CP like things.

01:09:33.345 --> 01:09:33.984
<v Speaker 2>So

01:09:34.465 --> 01:09:36.064
<v Speaker 2>when the cluster will be up,

01:09:37.345 --> 01:09:38.865
<v Speaker 2>we will just deploy

01:09:41.985 --> 01:09:43.185
<v Speaker 2>an application

01:09:43.745 --> 01:09:46.465
<v Speaker 2>which consists of two

01:09:46.849 --> 01:09:48.129
<v Speaker 2>of two components.

01:09:48.529 --> 01:09:51.409
<v Speaker 2>The one is a deployment. It's like a

01:09:51.409 --> 01:09:51.809
<v Speaker 2>regular

01:09:53.649 --> 01:09:55.169
<v Speaker 2>Node. Js service

01:09:55.409 --> 01:09:57.729
<v Speaker 2>that runs as a Kubernetes deployment.

01:09:58.210 --> 01:09:59.809
<v Speaker 2>And another one is

01:10:00.585 --> 01:10:01.545
<v Speaker 2>a Redis

01:10:02.105 --> 01:10:02.744
<v Speaker 2>deployment.

01:10:03.065 --> 01:10:05.385
<v Speaker 2>So we assume that this

01:10:05.545 --> 01:10:09.145
<v Speaker 2>Node. Js application to run, it needs to

01:10:09.145 --> 01:10:10.344
<v Speaker 2>call Redis

01:10:10.265 --> 01:10:12.505
<v Speaker 2>well, to store some data or, I don't

01:10:12.505 --> 01:10:14.265
<v Speaker 2>know, retrieve some data. It doesn't doesn't really

01:10:14.265 --> 01:10:14.585
<v Speaker 2>matter.

01:10:16.639 --> 01:10:19.040
<v Speaker 2>The idea is that you won't wouldn't be

01:10:19.040 --> 01:10:19.920
<v Speaker 2>able to

01:10:21.120 --> 01:10:23.999
<v Speaker 2>do a runtime analysis of such an application

01:10:24.000 --> 01:10:26.480
<v Speaker 2>without having a radius running around.

01:10:27.005 --> 01:10:28.925
<v Speaker 2>So let's review the

01:10:29.324 --> 01:10:30.604
<v Speaker 2>application itself.

01:10:30.844 --> 01:10:31.885
<v Speaker 2>So we have,

01:10:32.125 --> 01:10:33.804
<v Speaker 2>like, a server,

01:10:36.284 --> 01:10:38.284
<v Speaker 2>which is, like, trivial.

01:10:38.284 --> 01:10:39.084
<v Speaker 2>It's

01:10:39.405 --> 01:10:40.764
<v Speaker 2>a API

01:10:41.480 --> 01:10:44.520
<v Speaker 2>for the server part, and it has Redis

01:10:45.000 --> 01:10:48.200
<v Speaker 2>package installed, and it creates a client.

01:10:48.600 --> 01:10:49.560
<v Speaker 2>And then

01:10:49.880 --> 01:10:51.560
<v Speaker 2>upon a get request,

01:10:52.200 --> 01:10:55.240
<v Speaker 2>it goes and calls Redis and reports success.

01:10:55.895 --> 01:10:57.415
<v Speaker 2>That's pretty much it.

01:10:58.215 --> 01:10:58.855
<v Speaker 2>So

01:11:01.575 --> 01:11:02.295
<v Speaker 2>it's

01:11:02.615 --> 01:11:03.335
<v Speaker 2>packaged

01:11:03.495 --> 01:11:05.095
<v Speaker 2>as a Kubernetes

01:11:05.095 --> 01:11:06.375
<v Speaker 2>deployment.

01:11:08.570 --> 01:11:10.970
<v Speaker 2>Like, nothing fancy here. Just a

01:11:11.930 --> 01:11:13.370
<v Speaker 2>simplistic deployment

01:11:13.610 --> 01:11:14.890
<v Speaker 2>that exposes

01:11:16.490 --> 01:11:17.450
<v Speaker 2>a port.

01:11:18.090 --> 01:11:19.770
<v Speaker 2>Like, this place called, there are such as

01:11:19.770 --> 01:11:22.250
<v Speaker 2>to make these examples reusable, but, essentially, you

01:11:22.250 --> 01:11:24.705
<v Speaker 2>can just put app names there, like, literally.

01:11:25.265 --> 01:11:28.145
<v Speaker 2>And the well, it's fronted by a service.

01:11:28.465 --> 01:11:30.385
<v Speaker 2>Again, create standard.

01:11:32.385 --> 01:11:32.945
<v Speaker 2>And

01:11:33.425 --> 01:11:36.225
<v Speaker 2>a very similar thing for Redis.

01:11:38.220 --> 01:11:38.860
<v Speaker 2>Again,

01:11:39.180 --> 01:11:40.460
<v Speaker 2>trivial deployment

01:11:41.739 --> 01:11:44.940
<v Speaker 2>running a vanilla server Redis image,

01:11:44.940 --> 01:11:46.940
<v Speaker 2>and it's exposed

01:11:47.260 --> 01:11:48.460
<v Speaker 2>via service.

01:11:48.940 --> 01:11:49.739
<v Speaker 2>So

01:11:50.380 --> 01:11:51.179
<v Speaker 2>we can

01:11:51.580 --> 01:11:52.219
<v Speaker 2>make

01:11:53.915 --> 01:11:56.875
<v Speaker 2>build the fat version of the image. And,

01:11:56.875 --> 01:11:57.355
<v Speaker 2>again,

01:11:57.915 --> 01:11:58.555
<v Speaker 2>this

01:11:59.115 --> 01:11:59.835
<v Speaker 2>I hear you,

01:12:00.555 --> 01:12:03.755
<v Speaker 2>I I know you hate the way the

01:12:03.915 --> 01:12:05.915
<v Speaker 2>make files are made because they are full

01:12:05.915 --> 01:12:06.475
<v Speaker 2>of includes,

01:12:06.940 --> 01:12:09.739
<v Speaker 2>but in the end, they generate super simple

01:12:09.739 --> 01:12:10.699
<v Speaker 2>commands.

01:12:11.099 --> 01:12:12.780
<v Speaker 2>So, like, you see, it was just a

01:12:12.780 --> 01:12:14.699
<v Speaker 2>regular Docker build. Yep.

01:12:16.139 --> 01:12:17.659
<v Speaker 2>And now we can

01:12:18.795 --> 01:12:19.835
<v Speaker 2>run it.

01:12:22.155 --> 01:12:25.755
<v Speaker 2>And oops. No. Before running, we have to

01:12:25.755 --> 01:12:28.715
<v Speaker 2>somehow deliver this image to the Kubernetes cluster.

01:12:28.715 --> 01:12:30.875
<v Speaker 2>Otherwise, it will not be able to

01:12:32.750 --> 01:12:34.590
<v Speaker 2>Oh, we don't have kubectl.

01:12:34.590 --> 01:12:36.110
<v Speaker 0>Yeah. I'm grabbing it now.

01:12:36.350 --> 01:12:39.470
<v Speaker 0>Yeah. I've I've used many kubectl

01:12:39.470 --> 01:12:40.190
<v Speaker 0>for

01:12:40.590 --> 01:12:41.389
<v Speaker 0>everything,

01:12:41.390 --> 01:12:42.270
<v Speaker 0>and I never thought.

01:12:51.005 --> 01:12:52.445
<v Speaker 0>Alright. Download.

01:12:54.844 --> 01:12:56.685
<v Speaker 2>While we are waiting,

01:12:56.685 --> 01:13:00.229
<v Speaker 2>just notice how long it takes to actually

01:13:01.670 --> 01:13:03.909
<v Speaker 2>inject this local image

01:13:04.150 --> 01:13:05.590
<v Speaker 2>to a local

01:13:06.150 --> 01:13:07.749
<v Speaker 2>Kubernetes cluster

01:13:08.230 --> 01:13:11.909
<v Speaker 2>just simply because of its size. Like, these

01:13:11.175 --> 01:13:13.254
<v Speaker 2>fat images, they are insane.

01:13:13.815 --> 01:13:15.735
<v Speaker 0>Yeah. I thought you were gonna hit the

01:13:15.735 --> 01:13:16.934
<v Speaker 0>test there and say, look how long it

01:13:16.934 --> 01:13:18.695
<v Speaker 0>takes them to copy and paste some commands,

01:13:18.695 --> 01:13:20.454
<v Speaker 0>but I'm glad you didn't. Alright.

01:13:22.295 --> 01:13:23.815
<v Speaker 0>You should have kept control now. Sorry about

01:13:23.815 --> 01:13:24.374
<v Speaker 0>that.

01:13:25.335 --> 01:13:26.855
<v Speaker 2>And we are still copying the image.

01:13:34.750 --> 01:13:36.909
<v Speaker 0>How big? Yeah. We're done.

01:13:39.550 --> 01:13:42.350
<v Speaker 2>Oh, yeah. If you if you're on

01:13:42.615 --> 01:13:44.855
<v Speaker 2>and just see what's

01:13:45.815 --> 01:13:46.935
<v Speaker 2>what's in there,

01:13:47.335 --> 01:13:48.054
<v Speaker 2>like,

01:13:48.535 --> 01:13:51.335
<v Speaker 2>we all know how Kubernetes deployment looks like.

01:13:51.335 --> 01:13:51.815
<v Speaker 2>Right?

01:13:52.375 --> 01:13:53.655
<v Speaker 2>Just a regular

01:13:54.000 --> 01:13:55.280
<v Speaker 2>app deployment,

01:13:55.280 --> 01:13:56.000
<v Speaker 2>a

01:13:56.160 --> 01:13:58.080
<v Speaker 2>regular radius deployment,

01:13:58.080 --> 01:13:58.719
<v Speaker 2>like,

01:14:00.400 --> 01:14:01.360
<v Speaker 2>should

01:14:01.520 --> 01:14:02.800
<v Speaker 2>be working.

01:14:06.880 --> 01:14:08.480
<v Speaker 2>Yeah. We're trying to

01:14:08.985 --> 01:14:10.665
<v Speaker 2>do some port forwarding

01:14:11.785 --> 01:14:13.065
<v Speaker 2>and calling it

01:14:14.105 --> 01:14:15.225
<v Speaker 2>with curl.

01:14:16.505 --> 01:14:19.385
<v Speaker 2>And as a result, we get, like, a

01:14:19.385 --> 01:14:22.025
<v Speaker 2>response. So okay. The fit version works.

01:14:22.960 --> 01:14:25.360
<v Speaker 2>So let's try to minimize

01:14:26.720 --> 01:14:27.600
<v Speaker 2>this

01:14:27.760 --> 01:14:30.800
<v Speaker 2>image that actually runs right now in a

01:14:30.800 --> 01:14:31.920
<v Speaker 2>Kubernetes cluster.

01:14:32.880 --> 01:14:33.520
<v Speaker 2>So

01:14:34.725 --> 01:14:36.725
<v Speaker 2>we have a command,

01:14:37.605 --> 01:14:39.205
<v Speaker 2>a make target, actually,

01:14:39.845 --> 01:14:40.885
<v Speaker 2>and it says,

01:14:41.845 --> 01:14:45.445
<v Speaker 2>make me a slim version of the image

01:14:45.525 --> 01:14:47.605
<v Speaker 2>from the running version.

01:14:47.845 --> 01:14:48.885
<v Speaker 2>So if you run it,

01:14:50.290 --> 01:14:53.330
<v Speaker 2>you'll see what what's actually happening here. A

01:14:53.330 --> 01:14:55.889
<v Speaker 2>familiar already familiar

01:14:56.050 --> 01:14:57.729
<v Speaker 2>Docker Slim build command,

01:14:58.690 --> 01:15:01.409
<v Speaker 2>but the target this time is not an

01:15:01.409 --> 01:15:03.664
<v Speaker 2>image. Is not the local one. Like, remember,

01:15:03.664 --> 01:15:06.304
<v Speaker 2>during the very first demo, you pulled

01:15:07.585 --> 01:15:08.784
<v Speaker 2>the center's

01:15:08.784 --> 01:15:10.784
<v Speaker 2>image first to your machine.

01:15:11.025 --> 01:15:13.344
<v Speaker 2>But in this case, we're not pulling anything.

01:15:14.465 --> 01:15:15.905
<v Speaker 2>We are just targeting

01:15:16.650 --> 01:15:17.850
<v Speaker 2>a workload,

01:15:17.850 --> 01:15:19.930
<v Speaker 2>which could be, like, a deployment or a

01:15:19.930 --> 01:15:22.650
<v Speaker 2>daemon set or a replica set and

01:15:23.530 --> 01:15:25.530
<v Speaker 2>maybe even Cruncher. I don't remember.

01:15:26.330 --> 01:15:27.850
<v Speaker 2>That that runs

01:15:28.090 --> 01:15:29.290
<v Speaker 2>in Kubernetes.

01:15:29.770 --> 01:15:31.930
<v Speaker 2>And we just say what tech to use

01:15:32.465 --> 01:15:34.144
<v Speaker 2>the Slim version of the image.

01:15:35.184 --> 01:15:36.945
<v Speaker 2>Like, we have this beautiful

01:15:37.824 --> 01:15:40.144
<v Speaker 2>colorful output as as always.

01:15:40.625 --> 01:15:42.224
<v Speaker 2>There was some probing

01:15:42.784 --> 01:15:45.184
<v Speaker 2>in the middle, so it also

01:15:45.900 --> 01:15:46.620
<v Speaker 2>port

01:15:46.780 --> 01:15:49.340
<v Speaker 2>did like, Docker Slim driver app, it also

01:15:49.340 --> 01:15:51.020
<v Speaker 2>did some port forwarding

01:15:51.180 --> 01:15:54.060
<v Speaker 2>and probed. In this case, the probing was

01:15:54.700 --> 01:15:56.540
<v Speaker 2>the standard one, which is

01:15:57.275 --> 01:16:00.395
<v Speaker 2>quite simplistic. It's just a plain HTTP get

01:16:00.395 --> 01:16:02.235
<v Speaker 2>request to the slash endpoint,

01:16:02.635 --> 01:16:03.755
<v Speaker 2>but it was done.

01:16:04.315 --> 01:16:05.114
<v Speaker 2>And then

01:16:05.355 --> 01:16:05.994
<v Speaker 2>the

01:16:06.795 --> 01:16:07.514
<v Speaker 2>the

01:16:07.835 --> 01:16:08.635
<v Speaker 2>paged

01:16:08.795 --> 01:16:10.715
<v Speaker 2>port actually was

01:16:10.715 --> 01:16:11.114
<v Speaker 2>killed,

01:16:11.790 --> 01:16:14.910
<v Speaker 2>and we and we got a minified version

01:16:14.910 --> 01:16:17.310
<v Speaker 2>of the image. And it says it's 93

01:16:17.310 --> 01:16:18.190
<v Speaker 2>megabytes.

01:16:18.830 --> 01:16:20.110
<v Speaker 2>So we can now

01:16:20.510 --> 01:16:21.310
<v Speaker 2>do

01:16:21.710 --> 01:16:22.909
<v Speaker 2>docker images.

01:16:24.190 --> 01:16:25.950
<v Speaker 2>We should see that the

01:16:26.745 --> 01:16:28.985
<v Speaker 2>original version of the image was also around

01:16:28.985 --> 01:16:31.625
<v Speaker 2>one gigabyte one gigabyte. Yeah. Right.

01:16:32.345 --> 01:16:35.385
<v Speaker 2>And the minified version is 10 times smaller,

01:16:36.985 --> 01:16:39.465
<v Speaker 2>and it was done inside of a Kubernetes

01:16:39.465 --> 01:16:39.945
<v Speaker 2>cluster.

01:16:40.449 --> 01:16:41.889
<v Speaker 2>So if you now

01:16:42.210 --> 01:16:43.010
<v Speaker 2>stop

01:16:43.889 --> 01:16:45.169
<v Speaker 2>the fed version

01:16:47.329 --> 01:16:48.449
<v Speaker 2>and instead

01:16:50.530 --> 01:16:51.809
<v Speaker 2>load the

01:16:52.290 --> 01:16:54.849
<v Speaker 2>Slim version into the cluster, it should be

01:16:54.849 --> 01:16:55.489
<v Speaker 2>much faster.

01:16:57.275 --> 01:16:58.715
<v Speaker 2>And try to run it.

01:16:59.594 --> 01:17:01.114
<v Speaker 2>I hope it will work.

01:17:02.315 --> 01:17:02.874
<v Speaker 2>So,

01:17:05.594 --> 01:17:07.915
<v Speaker 2>again, to run it, we just apply these

01:17:07.915 --> 01:17:08.554
<v Speaker 2>manifests.

01:17:11.420 --> 01:17:12.940
<v Speaker 2>So what do we have here?

01:17:14.380 --> 01:17:17.420
<v Speaker 2>The fat one is still being terminated,

01:17:17.739 --> 01:17:19.820
<v Speaker 2>and we have something for the Slim one.

01:17:19.980 --> 01:17:22.219
<v Speaker 2>So if we if we just look at

01:17:22.219 --> 01:17:26.014
<v Speaker 2>this port, we should see probably we

01:17:29.775 --> 01:17:31.054
<v Speaker 2>should see probably

01:17:32.574 --> 01:17:34.494
<v Speaker 2>the Slim version of the image

01:17:34.735 --> 01:17:35.375
<v Speaker 2>in use.

01:17:38.050 --> 01:17:38.690
<v Speaker 2>So,

01:17:39.010 --> 01:17:39.570
<v Speaker 2>yep,

01:17:40.930 --> 01:17:42.289
<v Speaker 2>it's a slim one.

01:17:42.930 --> 01:17:45.409
<v Speaker 0>Nice. But does but does it work?

01:17:47.890 --> 01:17:49.010
<v Speaker 2>That's, I guess.

01:17:50.610 --> 01:17:51.410
<v Speaker 2>Yes. It does.

01:17:52.615 --> 01:17:53.495
<v Speaker 2>Magic.

01:17:55.015 --> 01:17:55.815
<v Speaker 0>Very cool.

01:17:56.615 --> 01:17:59.015
<v Speaker 2>Yep. This is not something that

01:17:59.495 --> 01:18:00.695
<v Speaker 2>has been released,

01:18:01.735 --> 01:18:04.135
<v Speaker 2>but it's already in in master. So it

01:18:04.135 --> 01:18:05.255
<v Speaker 2>gives me some hope.

01:18:07.440 --> 01:18:09.520
<v Speaker 0>Very cool. I like that a lot.

01:18:11.440 --> 01:18:12.080
<v Speaker 0>So

01:18:12.800 --> 01:18:16.000
<v Speaker 0>what's the the plan around the Kubernetes

01:18:16.000 --> 01:18:18.560
<v Speaker 0>support? Is there, like, a broader mission that

01:18:18.560 --> 01:18:21.360
<v Speaker 0>you have as Slim AI to bring more

01:18:20.915 --> 01:18:23.875
<v Speaker 0>automation with that inside of the cluster? Like,

01:18:23.875 --> 01:18:25.155
<v Speaker 0>what I'm trying to understand in my head

01:18:25.155 --> 01:18:28.035
<v Speaker 0>right now is, like, should I adopt Docker

01:18:28.035 --> 01:18:30.355
<v Speaker 0>Slim at a CICD layer and build images

01:18:30.355 --> 01:18:31.875
<v Speaker 0>and push the registry?

01:18:32.195 --> 01:18:33.795
<v Speaker 0>Or is there gonna be, like, a secret

01:18:33.795 --> 01:18:35.395
<v Speaker 0>sauce and cluster

01:18:35.980 --> 01:18:36.780
<v Speaker 0>thing

01:18:36.860 --> 01:18:37.660
<v Speaker 0>happening

01:18:37.660 --> 01:18:39.740
<v Speaker 0>at some point? Like, how do you see

01:18:39.740 --> 01:18:43.260
<v Speaker 0>these two different paths for Slimmington images differing?

01:18:46.860 --> 01:18:48.860
<v Speaker 2>I don't Martin, do you have something to

01:18:48.860 --> 01:18:49.180
<v Speaker 2>share?

01:18:52.495 --> 01:18:55.054
<v Speaker 1>Yeah. So I think there's room for both.

01:18:55.695 --> 01:18:58.094
<v Speaker 1>You know, the the original

01:18:58.095 --> 01:18:59.375
<v Speaker 1>process of

01:18:59.615 --> 01:19:02.655
<v Speaker 1>running something through CICD and producing a unified

01:19:02.655 --> 01:19:05.615
<v Speaker 1>image that you run through validation and acceptance

01:19:05.615 --> 01:19:06.095
<v Speaker 1>testing,

01:19:06.490 --> 01:19:08.570
<v Speaker 1>that's all well and good. But one of

01:19:08.570 --> 01:19:10.650
<v Speaker 1>the use cases that was presented to us

01:19:10.650 --> 01:19:12.650
<v Speaker 1>talking to people at KubeCon

01:19:13.130 --> 01:19:14.570
<v Speaker 1>earlier in the year

01:19:14.890 --> 01:19:18.490
<v Speaker 1>was they wanted to deploy the fat containers

01:19:18.490 --> 01:19:19.450
<v Speaker 1>into their clusters.

01:19:20.035 --> 01:19:24.675
<v Speaker 1>They wanted to have Slim containers automatically generated.

01:19:25.075 --> 01:19:28.275
<v Speaker 1>They wanted to roll those Slim containers into

01:19:28.275 --> 01:19:30.755
<v Speaker 1>the service requests automatically,

01:19:31.235 --> 01:19:32.515
<v Speaker 1>then use observability

01:19:32.515 --> 01:19:35.475
<v Speaker 1>to determine if they were successfully handling

01:19:35.830 --> 01:19:38.070
<v Speaker 1>the load or not. If they were not,

01:19:38.070 --> 01:19:40.469
<v Speaker 1>they wanted to fall back to the original

01:19:40.469 --> 01:19:41.349
<v Speaker 1>containers

01:19:41.510 --> 01:19:43.989
<v Speaker 1>and then report back the status of those

01:19:43.989 --> 01:19:45.110
<v Speaker 1>observability

01:19:45.110 --> 01:19:48.150
<v Speaker 1>reports in order to inform what needed to

01:19:48.150 --> 01:19:51.510
<v Speaker 1>be changed or improved about the minification process

01:19:51.755 --> 01:19:53.675
<v Speaker 1>that those minified containers,

01:19:53.675 --> 01:19:56.315
<v Speaker 1>the next time they they get automatically generated

01:19:56.315 --> 01:19:57.435
<v Speaker 1>in the cluster,

01:19:57.755 --> 01:19:58.315
<v Speaker 1>succeed

01:19:58.555 --> 01:20:01.275
<v Speaker 1>with what they needed to do. So

01:20:01.755 --> 01:20:03.435
<v Speaker 1>I think that was a very

01:20:03.800 --> 01:20:04.680
<v Speaker 1>Kubernetes

01:20:04.680 --> 01:20:07.320
<v Speaker 1>take on, like, how to do, you know,

01:20:07.320 --> 01:20:10.040
<v Speaker 1>the minification. I've got this massive cluster of

01:20:10.040 --> 01:20:10.920
<v Speaker 1>computers,

01:20:10.920 --> 01:20:12.840
<v Speaker 1>and computers can automate

01:20:12.840 --> 01:20:15.080
<v Speaker 1>away a lot of this for me and

01:20:15.080 --> 01:20:16.120
<v Speaker 1>just tell me

01:20:16.680 --> 01:20:18.840
<v Speaker 1>where stuff is broken, if things are broken

01:20:18.840 --> 01:20:19.240
<v Speaker 1>indeed,

01:20:20.175 --> 01:20:22.415
<v Speaker 1>and how to how to remedy that. So

01:20:22.415 --> 01:20:24.735
<v Speaker 1>I I think there's there's there's a place

01:20:24.735 --> 01:20:25.454
<v Speaker 1>for both,

01:20:25.855 --> 01:20:28.494
<v Speaker 1>and I think the Kubernetes solution is very

01:20:28.494 --> 01:20:31.375
<v Speaker 1>much talking to those people that just love

01:20:31.375 --> 01:20:34.494
<v Speaker 1>to use clusters to solve problems at scale.

01:20:35.989 --> 01:20:37.429
<v Speaker 0>Yeah. I think another

01:20:37.750 --> 01:20:40.949
<v Speaker 0>cool effect from doing it within the cluster.

01:20:41.510 --> 01:20:43.030
<v Speaker 0>You know, I think I I my my

01:20:43.030 --> 01:20:44.949
<v Speaker 0>own personal way here would be to Slim

01:20:44.949 --> 01:20:47.030
<v Speaker 0>and CICD push to production, but I still

01:20:47.030 --> 01:20:49.110
<v Speaker 0>think bringing Docker Slim into the cluster is

01:20:49.110 --> 01:20:49.989
<v Speaker 0>good from

01:20:50.265 --> 01:20:52.505
<v Speaker 0>the seccomp part of it as well.

01:20:52.825 --> 01:20:55.065
<v Speaker 0>They've been able to do a continuous profiling

01:20:55.065 --> 01:20:57.625
<v Speaker 0>of those test calls in my application and

01:20:57.625 --> 01:20:59.865
<v Speaker 0>update the seccomp profiles in real time could

01:20:59.865 --> 01:21:02.185
<v Speaker 0>be a shit. Those security challenges there because

01:21:02.185 --> 01:21:04.105
<v Speaker 0>what's a real request versus what's a fake

01:21:04.105 --> 01:21:04.825
<v Speaker 0>request? I don't know.

01:21:05.550 --> 01:21:07.869
<v Speaker 0>But, yeah, there's definitely some interesting stuff here,

01:21:07.869 --> 01:21:10.030
<v Speaker 0>I think, for for playing around with it.

01:21:10.030 --> 01:21:13.310
<v Speaker 0>So yeah. Yeah. Like, you know, like, not

01:21:13.310 --> 01:21:15.150
<v Speaker 2>not everyone is on Kubernetes,

01:21:15.150 --> 01:21:16.829
<v Speaker 2>and not everyone should be on Kubernetes.

01:21:18.034 --> 01:21:18.755
<v Speaker 2>Yeah.

01:21:19.554 --> 01:21:22.355
<v Speaker 2>Sorry. I'm sorry. I don't use Kubernetes. I

01:21:22.355 --> 01:21:24.275
<v Speaker 2>don't run my blog on Kubernetes.

01:21:25.155 --> 01:21:27.394
<v Speaker 2>I know I should be, but no. Sorry.

01:21:29.074 --> 01:21:32.034
<v Speaker 2>Yeah. But so we have to support people

01:21:32.034 --> 01:21:34.594
<v Speaker 2>who is not on Kubernetes

01:21:33.850 --> 01:21:36.250
<v Speaker 2>yet or who want to be ever. So

01:21:36.250 --> 01:21:38.890
<v Speaker 2>we have to target, like, all the other

01:21:38.890 --> 01:21:39.929
<v Speaker 2>scenarios.

01:21:40.489 --> 01:21:43.690
<v Speaker 2>But for people who is on Kubernetes,

01:21:43.770 --> 01:21:44.809
<v Speaker 2>they are probably

01:21:45.290 --> 01:21:47.210
<v Speaker 2>like, they probably know what they are doing.

01:21:47.615 --> 01:21:50.095
<v Speaker 2>So for them, we could provide, like, a

01:21:50.095 --> 01:21:50.895
<v Speaker 2>much more

01:21:51.135 --> 01:21:53.855
<v Speaker 2>sophisticated solution. Like, it could be an operator.

01:21:53.855 --> 01:21:56.095
<v Speaker 2>It's not something that we, like, really have

01:21:56.095 --> 01:21:57.855
<v Speaker 2>on on the road map. I'm just, like,

01:21:57.855 --> 01:22:00.015
<v Speaker 2>thinking out loud as an engineer and as

01:22:00.015 --> 01:22:02.640
<v Speaker 2>someone who actually have been operating

01:22:03.200 --> 01:22:04.880
<v Speaker 2>Kubernetes services.

01:22:05.040 --> 01:22:07.200
<v Speaker 2>Like, we could ship an operator

01:22:07.280 --> 01:22:09.840
<v Speaker 2>that would be doing this image optimization,

01:22:10.080 --> 01:22:12.320
<v Speaker 2>leveraging Docker Slim under the hood

01:22:12.720 --> 01:22:14.865
<v Speaker 2>right in your cluster. So So you could,

01:22:14.865 --> 01:22:17.985
<v Speaker 2>I don't know, annotate your services, like your

01:22:17.985 --> 01:22:19.905
<v Speaker 2>deployment that you would like to see

01:22:20.225 --> 01:22:22.545
<v Speaker 2>slimmed down. And the separator would be watching

01:22:22.545 --> 01:22:25.824
<v Speaker 2>from all the new deployments having this annotation.

01:22:25.985 --> 01:22:27.585
<v Speaker 2>And then do this optimization

01:22:27.890 --> 01:22:30.610
<v Speaker 2>right on production cluster by spinning up, like,

01:22:30.610 --> 01:22:33.330
<v Speaker 2>one extra port for every deployment and sharing

01:22:33.330 --> 01:22:35.970
<v Speaker 2>some traffic to it, removing it if it

01:22:35.970 --> 01:22:36.690
<v Speaker 2>produces,

01:22:36.930 --> 01:22:39.570
<v Speaker 2>like, too much noise and, like, stuff like

01:22:39.570 --> 01:22:41.915
<v Speaker 2>that, and then generating an image for you,

01:22:41.915 --> 01:22:44.155
<v Speaker 2>pushing it to your registry,

01:22:44.155 --> 01:22:46.475
<v Speaker 2>and triggering another CI pipeline

01:22:46.875 --> 01:22:49.755
<v Speaker 2>to actually ship a Canary deployment of this

01:22:49.755 --> 01:22:52.395
<v Speaker 2>slim version of the service and see if

01:22:52.395 --> 01:22:54.475
<v Speaker 2>it's not noisy. Like, if it's not too

01:22:54.475 --> 01:22:57.160
<v Speaker 2>noisy, maybe just continue to the full on

01:22:57.160 --> 01:22:58.520
<v Speaker 2>rollout. So,

01:22:58.680 --> 01:23:01.960
<v Speaker 2>like, as I already mentioned, like, possibilities are

01:23:01.960 --> 01:23:04.360
<v Speaker 2>endless once you get into this Kubernetes world

01:23:04.360 --> 01:23:05.080
<v Speaker 2>because,

01:23:05.480 --> 01:23:07.640
<v Speaker 2>like, you all can automate everything.

01:23:07.640 --> 01:23:09.720
<v Speaker 2>And that's just why I love Kubernetes,

01:23:09.965 --> 01:23:12.364
<v Speaker 2>like, because of its API and automation

01:23:12.445 --> 01:23:13.644
<v Speaker 2>capabilities.

01:23:14.925 --> 01:23:17.164
<v Speaker 0>You've started the Kubernetes trolling now in the

01:23:17.164 --> 01:23:17.965
<v Speaker 0>comments. So

01:23:18.605 --> 01:23:19.244
<v Speaker 1>I

01:23:19.485 --> 01:23:21.965
<v Speaker 1>love the group that's going on with case

01:23:21.965 --> 01:23:22.605
<v Speaker 1>at the moment.

01:23:24.230 --> 01:23:26.070
<v Speaker 0>Yeah. I've been using Kubernetes a long time,

01:23:26.070 --> 01:23:27.270
<v Speaker 0>and I still have no idea what the

01:23:27.270 --> 01:23:29.989
<v Speaker 0>fuck I'm doing either. So there was a

01:23:31.030 --> 01:23:32.469
<v Speaker 0>in line with what Ivan was saying, a

01:23:32.469 --> 01:23:33.989
<v Speaker 0>big pod left a comment as well to

01:23:33.989 --> 01:23:35.110
<v Speaker 0>saying that, actually,

01:23:35.350 --> 01:23:37.350
<v Speaker 0>the complicated images where the probing could be

01:23:37.350 --> 01:23:39.110
<v Speaker 0>tough, bringing us into the cluster and doing

01:23:39.110 --> 01:23:41.055
<v Speaker 0>it over a certain period of time with

01:23:41.055 --> 01:23:43.935
<v Speaker 0>real user traffic. That's a really good avenue

01:23:43.935 --> 01:23:46.255
<v Speaker 0>as well. And another one I thought of

01:23:46.255 --> 01:23:47.935
<v Speaker 0>as you were kind of talking is, like,

01:23:47.935 --> 01:23:50.575
<v Speaker 0>third party images as well. Like, you know,

01:23:50.575 --> 01:23:52.815
<v Speaker 0>I I don't really build NGINX even though

01:23:52.815 --> 01:23:53.935
<v Speaker 0>I know I can make it smaller. I

01:23:53.935 --> 01:23:56.539
<v Speaker 0>don't really build Redis and Kafka

01:23:56.699 --> 01:23:59.820
<v Speaker 0>or all these other post queries, MariaDB's, etcetera.

01:24:00.300 --> 01:24:02.219
<v Speaker 0>Because the images are built and they're official.

01:24:02.219 --> 01:24:03.900
<v Speaker 0>And, yeah, they could be smaller. So I

01:24:03.900 --> 01:24:06.460
<v Speaker 0>wonder if bringing for third party images that

01:24:06.460 --> 01:24:08.460
<v Speaker 0>may cluster, bringing Docker Slim into the cluster

01:24:08.460 --> 01:24:10.219
<v Speaker 0>actually is quite an interesting way to do

01:24:10.219 --> 01:24:12.034
<v Speaker 0>it as well. And because I don't I

01:24:12.034 --> 01:24:13.635
<v Speaker 0>don't have a build pipeline for them, and

01:24:13.635 --> 01:24:15.235
<v Speaker 0>I don't want one for them either.

01:24:16.755 --> 01:24:18.034
<v Speaker 1>If I had

01:24:18.034 --> 01:24:19.795
<v Speaker 1>that demo well, in fact, you you did

01:24:19.795 --> 01:24:22.275
<v Speaker 1>it, which was the the curl example at

01:24:22.275 --> 01:24:24.700
<v Speaker 1>the very beginning. We have another example which

01:24:24.700 --> 01:24:27.740
<v Speaker 1>uses the NGINX official image, which does exactly

01:24:27.740 --> 01:24:29.500
<v Speaker 1>the same thing for NGINX.

01:24:29.580 --> 01:24:32.300
<v Speaker 1>So if you're using NGINX in production as

01:24:32.300 --> 01:24:33.580
<v Speaker 1>a reverse proxy,

01:24:33.820 --> 01:24:36.060
<v Speaker 1>you can automatically generate, you know, a much

01:24:36.060 --> 01:24:38.385
<v Speaker 1>smaller image that's in there much faster to

01:24:38.385 --> 01:24:40.545
<v Speaker 1>deploy and push around your infrastructure.

01:24:41.185 --> 01:24:43.665
<v Speaker 1>Yeah. That's that's And the the reduction in

01:24:43.665 --> 01:24:45.185
<v Speaker 1>size was similar. It was a 10 x

01:24:45.185 --> 01:24:45.824
<v Speaker 1>reduction.

01:24:46.465 --> 01:24:48.145
<v Speaker 0>Yeah. I think all the reductions we've done

01:24:48.145 --> 01:24:49.665
<v Speaker 0>today seem to have been around 10 x.

01:24:49.665 --> 01:24:51.425
<v Speaker 0>That's your magic number, and it's a good

01:24:51.425 --> 01:24:52.909
<v Speaker 0>one to have as well for for me

01:24:52.909 --> 01:24:55.630
<v Speaker 1>to starting point. Ten ten to 30 times

01:24:55.630 --> 01:24:58.030
<v Speaker 1>is usually what we see depending on the

01:24:58.030 --> 01:24:58.749
<v Speaker 1>sort of

01:24:59.310 --> 01:25:01.150
<v Speaker 1>application language framework.

01:25:01.949 --> 01:25:02.749
<v Speaker 0>Awesome.

01:25:03.310 --> 01:25:05.389
<v Speaker 0>Alright. Well, I mean, I'm happy for people

01:25:05.389 --> 01:25:07.975
<v Speaker 0>to keep trolling Kubernetes in the comments section,

01:25:07.975 --> 01:25:09.895
<v Speaker 0>but I think we should probably

01:25:10.055 --> 01:25:10.775
<v Speaker 0>see

01:25:10.935 --> 01:25:13.175
<v Speaker 0>any last words, any last questions. If you

01:25:13.175 --> 01:25:14.775
<v Speaker 0>wanna get them in now, audience, now is

01:25:14.775 --> 01:25:16.855
<v Speaker 0>your last chance to get questions for Martin

01:25:16.855 --> 01:25:17.895
<v Speaker 0>and Ivan.

01:25:18.135 --> 01:25:19.895
<v Speaker 0>Do either of you have anything else you

01:25:19.895 --> 01:25:21.495
<v Speaker 0>wanna share before we finish up for today?

01:25:24.000 --> 01:25:26.480
<v Speaker 1>No. Other than to encourage people to if

01:25:26.480 --> 01:25:28.240
<v Speaker 1>they if they like what they've seen and

01:25:28.240 --> 01:25:30.480
<v Speaker 1>and that and they see some benefit for

01:25:30.480 --> 01:25:32.400
<v Speaker 1>using it in their own environments, give it

01:25:32.400 --> 01:25:35.760
<v Speaker 1>a try. Docker Slim is fully open source.

01:25:35.760 --> 01:25:38.035
<v Speaker 1>It's available on GitHub. Just come and grab

01:25:38.035 --> 01:25:40.275
<v Speaker 1>it and test it. Have a play with

01:25:40.275 --> 01:25:42.435
<v Speaker 1>it. We're always interested to hear new and

01:25:42.435 --> 01:25:43.235
<v Speaker 1>interesting

01:25:43.475 --> 01:25:45.635
<v Speaker 1>and unusual use cases. So if you find

01:25:45.635 --> 01:25:47.715
<v Speaker 1>an edge case, tell us about that as

01:25:47.715 --> 01:25:49.795
<v Speaker 1>well. So hey, Nuno. It's good to see

01:25:49.795 --> 01:25:49.955
<v Speaker 1>you.

01:25:53.930 --> 01:25:57.050
<v Speaker 1>So, yeah, try Docker Slim. And, also, the

01:25:57.050 --> 01:25:59.850
<v Speaker 1>Slim SaaS platform is also free to use

01:25:59.850 --> 01:26:00.489
<v Speaker 1>as well,

01:26:00.970 --> 01:26:02.730
<v Speaker 1>which can do all of the things that

01:26:02.730 --> 01:26:05.290
<v Speaker 1>we've just demonstrated to you in a web

01:26:05.290 --> 01:26:07.935
<v Speaker 1>platform and connect all of your public and

01:26:07.935 --> 01:26:10.494
<v Speaker 1>private registries. So give a try. And if

01:26:10.494 --> 01:26:12.895
<v Speaker 1>if you have success there, then maybe take

01:26:12.895 --> 01:26:14.655
<v Speaker 1>a look at the SlimSaaS platform as well

01:26:14.655 --> 01:26:16.895
<v Speaker 1>and see what additional insight you can get

01:26:16.895 --> 01:26:19.294
<v Speaker 1>about your container images, including

01:26:19.935 --> 01:26:21.775
<v Speaker 1>security analysis, for example.

01:26:24.969 --> 01:26:25.690
<v Speaker 0>Alright.

01:26:26.330 --> 01:26:29.130
<v Speaker 2>And, of course, like, if you have any

01:26:29.130 --> 01:26:32.249
<v Speaker 2>further questions, like, just join join our Discord.

01:26:32.409 --> 01:26:34.810
<v Speaker 2>Like, we are always happy to to chat

01:26:34.810 --> 01:26:36.975
<v Speaker 2>about this. Even if it's not a question,

01:26:36.975 --> 01:26:40.175
<v Speaker 2>just just you feel like talking about containers,

01:26:40.495 --> 01:26:41.775
<v Speaker 2>join our Discord.

01:26:42.415 --> 01:26:45.055
<v Speaker 0>Alright. Awesome. Well, thank you so much for

01:26:45.055 --> 01:26:46.815
<v Speaker 0>for joining me both of you. It's been

01:26:46.815 --> 01:26:49.190
<v Speaker 0>an absolute pleasure learning more about Docker Slim.

01:26:49.190 --> 01:26:50.870
<v Speaker 0>All of the demos work as well, except

01:26:50.870 --> 01:26:52.070
<v Speaker 0>for the stuff that I broke by not

01:26:52.070 --> 01:26:53.910
<v Speaker 0>having control available, but, you know, we got

01:26:53.910 --> 01:26:56.630
<v Speaker 0>past that. And so, hopefully, we'll speak again

01:26:56.630 --> 01:26:59.270
<v Speaker 0>soon. Have a a great day. And to

01:26:59.270 --> 01:27:01.110
<v Speaker 0>everyone watching, thank you. We'll see you next

01:27:01.110 --> 01:27:01.590
<v Speaker 0>time.

01:27:01.990 --> 01:27:03.190
<v Speaker 0>Thank you very much.
