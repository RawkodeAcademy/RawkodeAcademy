WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: ca15d2d0-b04c-42fa-a0cb-0bd237f2ab19
Created: 2025-04-29T19:57:18.750Z
Duration: 4695.0815
Channels: 1

00:00:35.050 --> 00:00:37.450
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:00:37.450 --> 00:00:39.585
<v Speaker 0>live. I am your host Rawk ode.

00:00:39.825 --> 00:00:41.665
<v Speaker 0>Today we're gonna be taking a look at

00:00:41.665 --> 00:00:42.625
<v Speaker 0>Kyverno,

00:00:42.625 --> 00:00:46.225
<v Speaker 0>a CNCF sandbox project that aims to bring

00:00:46.225 --> 00:00:49.425
<v Speaker 0>policy management to Kubernetes clusters in a Kubernetes

00:00:49.425 --> 00:00:50.145
<v Speaker 0>way.

00:00:50.865 --> 00:00:52.945
<v Speaker 0>Today I am joined by Jim and shooting

00:00:52.945 --> 00:00:55.340
<v Speaker 0>from the Kyverno team. Hi there both, how

00:00:55.340 --> 00:00:55.900
<v Speaker 0>are you?

00:00:57.260 --> 00:00:58.860
<v Speaker 1>Doing great. Thank you.

00:00:59.580 --> 00:01:00.220
<v Speaker 2>Awesome.

00:01:01.820 --> 00:01:03.900
<v Speaker 0>Before we begin, let's just take a moment

00:01:03.900 --> 00:01:06.460
<v Speaker 0>to have you both introduce yourself. We'll start

00:01:06.460 --> 00:01:07.740
<v Speaker 0>with Jim since you're next to me there

00:01:07.740 --> 00:01:09.274
<v Speaker 0>on the screen and then we'll move over

00:01:09.274 --> 00:01:10.554
<v Speaker 0>and take it away.

00:01:11.354 --> 00:01:14.314
<v Speaker 1>Alright. Hi everyone. I'm Jim Beglaudia, co founder

00:01:14.314 --> 00:01:16.075
<v Speaker 1>and CEO at Nirmata and one of the

00:01:16.075 --> 00:01:17.835
<v Speaker 1>maintainers on Kyverno.

00:01:20.554 --> 00:01:21.354
<v Speaker 2>Alright.

00:01:21.354 --> 00:01:24.075
<v Speaker 2>Hi everyone. This is Xu Lin Zhao. I'm

00:01:24.075 --> 00:01:27.190
<v Speaker 2>a software engineer at the and

00:01:27.430 --> 00:01:29.430
<v Speaker 2>I helped quit Kyverno

00:01:29.510 --> 00:01:31.270
<v Speaker 2>and now I'm one of the maintainer of

00:01:31.270 --> 00:01:32.150
<v Speaker 2>this project.

00:01:33.030 --> 00:01:34.710
<v Speaker 0>Awesome. Thank you very much.

00:01:35.430 --> 00:01:37.909
<v Speaker 0>So today we're taking a look at Kyverno

00:01:37.909 --> 00:01:40.174
<v Speaker 0>and I think if we can just maybe

00:01:40.174 --> 00:01:42.494
<v Speaker 0>start with, you know, what is it, what

00:01:42.494 --> 00:01:43.854
<v Speaker 0>problem does it solve

00:01:44.015 --> 00:01:45.375
<v Speaker 0>and give people a bit of a flavor

00:01:45.375 --> 00:01:47.134
<v Speaker 0>and a history of why this is important

00:01:47.134 --> 00:01:48.895
<v Speaker 0>to them and the way that Kyverno solves

00:01:48.895 --> 00:01:50.975
<v Speaker 0>it. And to do that, I believe we've

00:01:50.975 --> 00:01:52.820
<v Speaker 0>got a few slides so we can get

00:01:52.820 --> 00:01:54.659
<v Speaker 0>them up on the screen and we'll get

00:01:54.659 --> 00:01:55.299
<v Speaker 0>started.

00:01:56.580 --> 00:01:57.540
<v Speaker 1>Sounds good.

00:01:58.420 --> 00:02:00.740
<v Speaker 1>Yeah, so yeah, just a little bit about

00:02:00.740 --> 00:02:02.580
<v Speaker 1>the, like you said, like the history of

00:02:02.580 --> 00:02:03.060
<v Speaker 1>the

00:02:03.460 --> 00:02:05.060
<v Speaker 1>project, what problem it solves,

00:02:06.425 --> 00:02:09.225
<v Speaker 1>why some decisions were made and how it

00:02:09.225 --> 00:02:12.265
<v Speaker 1>was designed, right? So first off, Kyverno,

00:02:12.265 --> 00:02:14.265
<v Speaker 1>as you mentioned as a policy engine, it's

00:02:14.265 --> 00:02:16.585
<v Speaker 1>designed specifically for Kubernetes.

00:02:17.065 --> 00:02:17.625
<v Speaker 1>So

00:02:18.425 --> 00:02:20.025
<v Speaker 1>unlike

00:02:19.720 --> 00:02:20.520
<v Speaker 1>OPA,

00:02:20.520 --> 00:02:22.840
<v Speaker 1>which is a general purpose policy engine and

00:02:22.840 --> 00:02:24.440
<v Speaker 1>can work with other systems,

00:02:24.760 --> 00:02:27.800
<v Speaker 1>Kyverno is specifically designed to work with Kubernetes

00:02:27.800 --> 00:02:28.600
<v Speaker 1>itself.

00:02:29.160 --> 00:02:31.240
<v Speaker 1>And that has some trade offs, right, which

00:02:31.240 --> 00:02:32.280
<v Speaker 1>are important to consider.

00:02:32.695 --> 00:02:33.815
<v Speaker 1>The the

00:02:33.975 --> 00:02:34.615
<v Speaker 1>advantage

00:02:34.775 --> 00:02:37.495
<v Speaker 1>being Kyverno can take it, you know, sort

00:02:37.495 --> 00:02:38.375
<v Speaker 1>of leverage

00:02:38.775 --> 00:02:41.255
<v Speaker 1>all of the Kubernetes ways of doing things.

00:02:41.255 --> 00:02:44.615
<v Speaker 1>Right? So it can deeply understand Kubernetes patterns,

00:02:44.615 --> 00:02:46.375
<v Speaker 1>it can plug in into other things

00:02:47.250 --> 00:02:50.610
<v Speaker 1>and leverage some of those design ideas, concepts,

00:02:50.770 --> 00:02:53.250
<v Speaker 1>and just the way how Kubernetes does things.

00:02:53.730 --> 00:02:54.290
<v Speaker 1>And

00:02:54.770 --> 00:02:56.930
<v Speaker 1>the end goal is to be very familiar

00:02:56.930 --> 00:02:58.450
<v Speaker 1>to Kubernetes users.

00:02:58.530 --> 00:03:00.130
<v Speaker 1>And we'll look at some of these examples

00:03:00.130 --> 00:03:01.010
<v Speaker 1>as we go through.

00:03:02.525 --> 00:03:05.245
<v Speaker 1>But stepping back and thinking why policies, right?

00:03:05.245 --> 00:03:07.405
<v Speaker 1>So Kubernetes is fantastic, has

00:03:07.805 --> 00:03:09.405
<v Speaker 1>a lot of power, why do we need

00:03:09.405 --> 00:03:10.845
<v Speaker 1>policies at all?

00:03:11.325 --> 00:03:13.965
<v Speaker 1>So one of the aspects of Kubernetes,

00:03:14.430 --> 00:03:16.750
<v Speaker 1>I'm sure folks have heard is the

00:03:17.069 --> 00:03:17.870
<v Speaker 1>declarative

00:03:17.870 --> 00:03:18.750
<v Speaker 1>configuration

00:03:18.750 --> 00:03:20.750
<v Speaker 1>nature of Kubernetes itself,

00:03:20.750 --> 00:03:23.469
<v Speaker 1>right? So you declare the end state you

00:03:23.469 --> 00:03:25.790
<v Speaker 1>want and then the Kubernetes controllers

00:03:25.950 --> 00:03:27.870
<v Speaker 1>work hard on your behalf to achieve that

00:03:27.870 --> 00:03:28.670
<v Speaker 1>end state

00:03:29.125 --> 00:03:31.685
<v Speaker 1>based on whatever task they're trying to perform.

00:03:32.165 --> 00:03:34.325
<v Speaker 1>But this also sort of has the side

00:03:34.325 --> 00:03:35.205
<v Speaker 1>effect of

00:03:35.445 --> 00:03:38.565
<v Speaker 1>creating a lot of configuration options, right? Everything

00:03:38.565 --> 00:03:40.245
<v Speaker 1>you want to specify

00:03:40.405 --> 00:03:42.165
<v Speaker 1>or every state you might desire,

00:03:42.590 --> 00:03:44.990
<v Speaker 1>you can now declare in the configuration.

00:03:45.470 --> 00:03:48.270
<v Speaker 1>And often what happens is within a resource,

00:03:48.670 --> 00:03:49.470
<v Speaker 1>there's some

00:03:49.709 --> 00:03:52.750
<v Speaker 1>sort of lack of separation of concerns because

00:03:52.909 --> 00:03:56.349
<v Speaker 1>you might have certain configurations that your operators

00:03:56.349 --> 00:03:57.150
<v Speaker 1>care about

00:03:57.585 --> 00:03:59.345
<v Speaker 1>while other configurations

00:04:00.545 --> 00:04:03.025
<v Speaker 1>options which your developers care about, but they're

00:04:03.025 --> 00:04:04.945
<v Speaker 1>all sort of within that same resource.

00:04:05.265 --> 00:04:07.025
<v Speaker 1>So these are the sort of challenges that

00:04:07.025 --> 00:04:10.305
<v Speaker 1>policies address very well. And regardless of which

00:04:10.305 --> 00:04:11.585
<v Speaker 1>policy choose your tool,

00:04:12.500 --> 00:04:15.380
<v Speaker 1>the idea is to be able to validate

00:04:16.100 --> 00:04:17.700
<v Speaker 1>and increasingly,

00:04:17.700 --> 00:04:20.580
<v Speaker 1>well, Kyverno has always support mutate, but now

00:04:20.580 --> 00:04:23.540
<v Speaker 1>gatekeeper also supports that. So these type of

00:04:23.540 --> 00:04:25.700
<v Speaker 1>options you can make very easy and then

00:04:25.700 --> 00:04:27.625
<v Speaker 1>also do advanced operations.

00:04:27.865 --> 00:04:30.425
<v Speaker 1>Kyverno supports like dynamic configurations,

00:04:30.425 --> 00:04:31.225
<v Speaker 1>generation,

00:04:31.465 --> 00:04:32.505
<v Speaker 1>things like that.

00:04:33.065 --> 00:04:33.625
<v Speaker 1>So

00:04:34.265 --> 00:04:36.985
<v Speaker 1>the whole idea behind Kyverno was to make

00:04:36.985 --> 00:04:39.465
<v Speaker 1>policy management Kubernetes native,

00:04:39.919 --> 00:04:42.480
<v Speaker 1>to make policies declarative themselves.

00:04:42.720 --> 00:04:44.800
<v Speaker 1>So you're really expressing what you want to

00:04:44.800 --> 00:04:46.960
<v Speaker 1>achieve and then Kyverno does that on your

00:04:46.960 --> 00:04:47.600
<v Speaker 1>behalf

00:04:47.840 --> 00:04:49.840
<v Speaker 1>rather than having to program

00:04:50.000 --> 00:04:53.280
<v Speaker 1>and write imperative logic to create these policies.

00:04:53.995 --> 00:04:56.075
<v Speaker 1>So that's one of the kind of trade

00:04:56.075 --> 00:04:58.955
<v Speaker 1>offs to think about as you're evaluating solutions.

00:04:59.195 --> 00:05:01.035
<v Speaker 1>And then like I mentioned, being able to

00:05:01.035 --> 00:05:02.395
<v Speaker 1>just plug in

00:05:02.875 --> 00:05:05.675
<v Speaker 1>leverage patterns like things like whether it's label

00:05:05.675 --> 00:05:06.635
<v Speaker 1>selectors,

00:05:06.955 --> 00:05:08.235
<v Speaker 1>owner references,

00:05:08.235 --> 00:05:09.115
<v Speaker 1>pod controllers,

00:05:09.569 --> 00:05:10.689
<v Speaker 1>Kyverno

00:05:10.689 --> 00:05:13.569
<v Speaker 1>is able to leverage all of these types

00:05:13.569 --> 00:05:15.570
<v Speaker 1>of things built into Kubernetes

00:05:15.970 --> 00:05:17.810
<v Speaker 1>to just be

00:05:17.810 --> 00:05:20.849
<v Speaker 1>a bit more intelligent and simple to use

00:05:20.849 --> 00:05:22.449
<v Speaker 1>in terms of what it does

00:05:23.205 --> 00:05:23.604
<v Speaker 1>policies.

00:05:24.724 --> 00:05:26.645
<v Speaker 1>So just a quick comparison

00:05:26.645 --> 00:05:29.125
<v Speaker 1>of languages and we'll see several examples.

00:05:31.844 --> 00:05:34.645
<v Speaker 1>On the left side of the screen is

00:05:34.645 --> 00:05:36.485
<v Speaker 1>OPA policy which

00:05:37.125 --> 00:05:37.685
<v Speaker 1>says

00:05:38.639 --> 00:05:41.919
<v Speaker 1>pods should have read only file systems, right?

00:05:41.919 --> 00:05:43.440
<v Speaker 1>And on the right side of the screen

00:05:43.440 --> 00:05:45.120
<v Speaker 1>is the same way you would declare this

00:05:45.120 --> 00:05:46.240
<v Speaker 1>in Kyverno.

00:05:46.400 --> 00:05:48.320
<v Speaker 1>And as you can see the pattern over

00:05:48.320 --> 00:05:51.485
<v Speaker 1>here, if you look at the bottom side

00:05:51.485 --> 00:05:52.445
<v Speaker 1>of the example,

00:05:53.005 --> 00:05:55.565
<v Speaker 1>it is very similar to what you would

00:05:55.565 --> 00:05:56.925
<v Speaker 1>see in a pod spec.

00:05:57.485 --> 00:05:59.165
<v Speaker 1>In fact, it's the same, right? So it's

00:05:59.165 --> 00:06:01.485
<v Speaker 1>using the spec containers,

00:06:01.485 --> 00:06:03.965
<v Speaker 1>security context, things which are very familiar.

00:06:04.365 --> 00:06:06.479
<v Speaker 1>And that's how you would declare what you

00:06:06.479 --> 00:06:09.440
<v Speaker 1>want to happen and then the engine will

00:06:09.440 --> 00:06:10.240
<v Speaker 1>make that,

00:06:11.039 --> 00:06:13.840
<v Speaker 1>validate that or enforce that on your behalf.

00:06:15.039 --> 00:06:18.400
<v Speaker 1>So just a general structure of Kyverno policies

00:06:18.400 --> 00:06:20.535
<v Speaker 1>and rules and again, as we go through

00:06:20.535 --> 00:06:22.854
<v Speaker 1>examples, we'll revisit a lot of these, but

00:06:22.854 --> 00:06:23.975
<v Speaker 1>at a high level,

00:06:24.375 --> 00:06:25.175
<v Speaker 1>policies

00:06:25.335 --> 00:06:28.055
<v Speaker 1>have multiple rules. Each rule has a match

00:06:28.055 --> 00:06:29.014
<v Speaker 1>or exclude,

00:06:29.255 --> 00:06:32.294
<v Speaker 1>and there's several criteria you can use to

00:06:32.775 --> 00:06:34.215
<v Speaker 1>match or exclude resources.

00:06:34.840 --> 00:06:37.800
<v Speaker 1>Now, Kyverno works as an admission controller.

00:06:37.800 --> 00:06:38.280
<v Speaker 1>So

00:06:39.080 --> 00:06:39.960
<v Speaker 1>when

00:06:39.960 --> 00:06:43.240
<v Speaker 1>it receives a request, an admission review request

00:06:43.320 --> 00:06:45.000
<v Speaker 1>from the API server,

00:06:45.080 --> 00:06:46.840
<v Speaker 1>it can apply some of these conditions,

00:06:47.294 --> 00:06:48.975
<v Speaker 1>But it can also look up

00:06:49.615 --> 00:06:52.655
<v Speaker 1>the existing namespace for example for the resource.

00:06:52.815 --> 00:06:55.535
<v Speaker 1>So the namespace selector will do that, but

00:06:55.535 --> 00:06:57.375
<v Speaker 1>some of these other criteria

00:06:58.014 --> 00:07:00.014
<v Speaker 1>will apply to the data in the admission

00:07:00.014 --> 00:07:01.220
<v Speaker 1>request itself.

00:07:01.540 --> 00:07:02.580
<v Speaker 1>And then once

00:07:02.900 --> 00:07:05.700
<v Speaker 1>the engine decides which rules applies,

00:07:06.180 --> 00:07:08.340
<v Speaker 1>each rule can either be a mutate, a

00:07:08.340 --> 00:07:09.940
<v Speaker 1>validate or a generate

00:07:10.820 --> 00:07:13.220
<v Speaker 1>rule and based on that there's more details

00:07:13.220 --> 00:07:16.414
<v Speaker 1>and logic that you can or declarations

00:07:16.414 --> 00:07:19.375
<v Speaker 1>you can have within that rule to

00:07:19.615 --> 00:07:21.135
<v Speaker 1>enforce your policies.

00:07:21.534 --> 00:07:24.735
<v Speaker 1>So fairly simple but powerful structure in terms

00:07:24.735 --> 00:07:26.175
<v Speaker 1>of how policies are organized.

00:07:26.620 --> 00:07:28.539
<v Speaker 1>And all of this is again because you

00:07:28.539 --> 00:07:30.060
<v Speaker 1>can write this in YAML,

00:07:30.300 --> 00:07:32.780
<v Speaker 1>you can leverage best practices like

00:07:33.180 --> 00:07:35.740
<v Speaker 1>GitOps, you can use customized,

00:07:35.740 --> 00:07:36.860
<v Speaker 1>kubectl,

00:07:37.740 --> 00:07:39.580
<v Speaker 1>just works very

00:07:39.900 --> 00:07:40.380
<v Speaker 1>well

00:07:42.005 --> 00:07:43.365
<v Speaker 1>with Kyverno itself.

00:07:44.245 --> 00:07:46.005
<v Speaker 1>So this is like I was mentioning earlier,

00:07:46.005 --> 00:07:48.325
<v Speaker 1>how Kyverno runs and the idea is that

00:07:48.325 --> 00:07:49.685
<v Speaker 1>the engine will cache

00:07:49.845 --> 00:07:52.005
<v Speaker 1>all of the policies that you have declared.

00:07:52.005 --> 00:07:52.965
<v Speaker 1>It also uses

00:07:53.810 --> 00:07:55.250
<v Speaker 1>Kubernetes machinery

00:07:55.250 --> 00:07:58.850
<v Speaker 1>to look up objects of course and match

00:07:58.850 --> 00:08:01.890
<v Speaker 1>against those resources as policies are being processed.

00:08:02.450 --> 00:08:05.330
<v Speaker 1>And then it produces the other interesting thing

00:08:05.330 --> 00:08:06.130
<v Speaker 1>about Kyverno,

00:08:06.535 --> 00:08:09.655
<v Speaker 1>policy reports are also fairly straightforward. I mean,

00:08:09.655 --> 00:08:12.135
<v Speaker 1>are custom resources as well. So

00:08:12.455 --> 00:08:14.775
<v Speaker 1>in fact, the policy report standard

00:08:15.015 --> 00:08:16.375
<v Speaker 1>is something being

00:08:16.615 --> 00:08:20.140
<v Speaker 1>driven in the policy working group with the

00:08:20.140 --> 00:08:22.700
<v Speaker 1>idea that other tools can also adopt the

00:08:22.700 --> 00:08:24.140
<v Speaker 1>same reporting standard.

00:08:24.620 --> 00:08:26.780
<v Speaker 1>So if you have like tools like KubeBench

00:08:26.780 --> 00:08:28.620
<v Speaker 1>or even Falco and others,

00:08:28.940 --> 00:08:31.180
<v Speaker 1>and perhaps even Gatekeeper in the future,

00:08:31.580 --> 00:08:33.980
<v Speaker 1>if they choose to, they can produce

00:08:33.980 --> 00:08:36.125
<v Speaker 1>policy reports in the same format,

00:08:37.245 --> 00:08:40.044
<v Speaker 1>which of course makes things much easier

00:08:40.284 --> 00:08:43.404
<v Speaker 1>for admins who have multiple tools running in

00:08:43.404 --> 00:08:46.764
<v Speaker 1>their cluster. And then Kyverno also updates, produces

00:08:46.764 --> 00:08:51.130
<v Speaker 1>events, produces and updates resources as it's applying

00:08:51.130 --> 00:08:52.730
<v Speaker 1>policies, things like that.

00:08:54.010 --> 00:08:56.970
<v Speaker 1>Yeah, so that's a general overview and I

00:08:56.970 --> 00:08:59.450
<v Speaker 1>can continue a little bit further or happy

00:08:59.450 --> 00:09:00.490
<v Speaker 1>to maybe

00:09:00.490 --> 00:09:01.850
<v Speaker 1>we can also go

00:09:02.250 --> 00:09:06.330
<v Speaker 1>bit hands on if this is enough content

00:09:05.305 --> 00:09:07.225
<v Speaker 1>or context at this point?

00:09:09.065 --> 00:09:11.385
<v Speaker 0>Yeah, we can switch to a conversation now

00:09:11.385 --> 00:09:13.545
<v Speaker 0>before we get hands on and just take

00:09:13.545 --> 00:09:15.145
<v Speaker 0>see if we can encourage a few questions.

00:09:15.145 --> 00:09:15.305
<v Speaker 0>Okay.

00:09:17.160 --> 00:09:18.600
<v Speaker 0>Okay. So

00:09:20.199 --> 00:09:22.839
<v Speaker 0>it's really, I guess it was good timing,

00:09:22.839 --> 00:09:24.760
<v Speaker 0>right? For this episodes.

00:09:24.920 --> 00:09:28.040
<v Speaker 0>Just yesterday I was on the Kubernetes office

00:09:28.040 --> 00:09:29.879
<v Speaker 0>hours and there was a lot of conversations

00:09:29.879 --> 00:09:32.964
<v Speaker 0>around pod security policies and then being deprecated

00:09:32.964 --> 00:09:35.685
<v Speaker 0>in the either 01/19 or 01/20 version of

00:09:35.685 --> 00:09:36.485
<v Speaker 0>Kubernetes.

00:09:37.045 --> 00:09:37.685
<v Speaker 0>Now,

00:09:38.885 --> 00:09:41.764
<v Speaker 0>you know why that is and is Kyverno

00:09:41.764 --> 00:09:42.324
<v Speaker 0>the answer?

00:09:45.850 --> 00:09:48.970
<v Speaker 1>Possibly, right? It's one of the solutions certainly

00:09:48.970 --> 00:09:50.570
<v Speaker 1>or potential

00:09:51.050 --> 00:09:52.570
<v Speaker 1>ways of managing

00:09:53.130 --> 00:09:54.330
<v Speaker 1>pod security.

00:09:54.490 --> 00:09:57.290
<v Speaker 1>So I think just a quick backgrounder there,

00:09:57.495 --> 00:10:00.375
<v Speaker 1>right? So pods of course being the fundamental

00:10:00.375 --> 00:10:02.535
<v Speaker 1>unit of execution of control,

00:10:03.415 --> 00:10:06.055
<v Speaker 1>each pod has a security context as part

00:10:06.055 --> 00:10:07.335
<v Speaker 1>of its declaration.

00:10:07.654 --> 00:10:10.775
<v Speaker 1>And then each container can further refine

00:10:11.015 --> 00:10:11.575
<v Speaker 1>or

00:10:11.895 --> 00:10:14.980
<v Speaker 1>over write certain settings in the container security

00:10:14.980 --> 00:10:15.780
<v Speaker 1>context.

00:10:16.020 --> 00:10:18.500
<v Speaker 1>So pod security policies control

00:10:18.820 --> 00:10:19.779
<v Speaker 1>what

00:10:19.779 --> 00:10:21.300
<v Speaker 1>can be specified

00:10:21.300 --> 00:10:23.540
<v Speaker 1>in that security context

00:10:23.779 --> 00:10:25.779
<v Speaker 1>within pods and within containers.

00:10:27.465 --> 00:10:30.105
<v Speaker 1>The reason why they're being deprecated, there's several

00:10:30.105 --> 00:10:33.065
<v Speaker 1>reasons, but the main reason is just the

00:10:33.705 --> 00:10:35.385
<v Speaker 1>usability of them

00:10:35.865 --> 00:10:37.785
<v Speaker 1>was somewhat questionable

00:10:38.265 --> 00:10:39.305
<v Speaker 1>because

00:10:40.185 --> 00:10:42.180
<v Speaker 1>one of the challenges was that, so first

00:10:42.180 --> 00:10:44.580
<v Speaker 1>off pod security policies to associate them to

00:10:44.580 --> 00:10:45.540
<v Speaker 1>a workload,

00:10:45.860 --> 00:10:47.300
<v Speaker 1>they leveraged

00:10:48.340 --> 00:10:51.220
<v Speaker 1>just the Kubernetes RBAC and authentication,

00:10:51.700 --> 00:10:53.460
<v Speaker 1>which is a very

00:10:55.220 --> 00:10:56.580
<v Speaker 1>nice way of doing things.

00:10:57.305 --> 00:10:58.985
<v Speaker 1>But it also meant that it was a

00:10:58.985 --> 00:11:01.384
<v Speaker 1>bit difficult to set up because now each

00:11:01.384 --> 00:11:02.505
<v Speaker 1>workload

00:11:02.665 --> 00:11:05.704
<v Speaker 1>requires an identity, that identity that's a little

00:11:05.704 --> 00:11:07.545
<v Speaker 1>bit fine grained, you have to map that

00:11:07.545 --> 00:11:10.505
<v Speaker 1>and then associate it to the right PSP

00:11:10.810 --> 00:11:11.850
<v Speaker 1>in

00:11:11.850 --> 00:11:14.570
<v Speaker 1>order to enforce that. The other challenge with

00:11:14.570 --> 00:11:16.570
<v Speaker 1>pod security policies is if you wanted to

00:11:16.570 --> 00:11:18.570
<v Speaker 1>roll this out, there was actually no real

00:11:18.570 --> 00:11:20.810
<v Speaker 1>good way to roll it out on an

00:11:20.810 --> 00:11:22.330
<v Speaker 1>existing cluster.

00:11:22.970 --> 00:11:24.925
<v Speaker 1>And there was no way to also test

00:11:24.925 --> 00:11:26.444
<v Speaker 1>it, so it was either an all or

00:11:26.444 --> 00:11:27.084
<v Speaker 1>nothing.

00:11:27.485 --> 00:11:29.964
<v Speaker 1>And there was a potential because of the

00:11:29.964 --> 00:11:32.524
<v Speaker 1>impacts of this that you might end up

00:11:32.524 --> 00:11:35.245
<v Speaker 1>enabling it in a cluster which causes

00:11:37.320 --> 00:11:37.960
<v Speaker 1>consequences.

00:11:38.600 --> 00:11:41.000
<v Speaker 1>So all in all and from some of

00:11:41.000 --> 00:11:43.720
<v Speaker 1>the, I think I'd seen an AWS

00:11:43.720 --> 00:11:45.720
<v Speaker 1>survey, a security survey,

00:11:46.920 --> 00:11:48.840
<v Speaker 1>which stated that about,

00:11:49.640 --> 00:11:52.115
<v Speaker 1>although pod security policies have been around for

00:11:52.115 --> 00:11:52.675
<v Speaker 1>a while,

00:11:53.635 --> 00:11:56.355
<v Speaker 1>think about 30 or 40% of users actually

00:11:56.355 --> 00:11:57.555
<v Speaker 1>even tried that.

00:11:57.955 --> 00:12:00.035
<v Speaker 1>And I think what we've seen in

00:12:00.995 --> 00:12:04.035
<v Speaker 1>a lot of scenarios is they're enabled but

00:12:04.035 --> 00:12:07.315
<v Speaker 1>not really bound to any workload, right, which

00:12:06.750 --> 00:12:09.710
<v Speaker 1>does nothing really to enforce security.

00:12:10.430 --> 00:12:12.670
<v Speaker 1>So those kind of challenges

00:12:13.870 --> 00:12:16.590
<v Speaker 1>is what the community is trying to address.

00:12:16.910 --> 00:12:17.630
<v Speaker 1>So there

00:12:18.110 --> 00:12:20.685
<v Speaker 1>are efforts with the Kubernetes,

00:12:22.525 --> 00:12:25.085
<v Speaker 1>SIG security as well as SIG auth.

00:12:25.565 --> 00:12:27.405
<v Speaker 1>There are a lot of folks working on

00:12:27.405 --> 00:12:30.525
<v Speaker 1>a potential replacement for pod security policies.

00:12:30.845 --> 00:12:34.120
<v Speaker 1>So the idea being that I think everyone

00:12:34.120 --> 00:12:35.080
<v Speaker 1>can agree,

00:12:35.320 --> 00:12:38.200
<v Speaker 1>it would be great to have something native,

00:12:38.760 --> 00:12:40.280
<v Speaker 1>which makes Kubernetes

00:12:40.280 --> 00:12:42.760
<v Speaker 1>as secure by default as possible,

00:12:43.240 --> 00:12:44.760
<v Speaker 1>but still allows flexibility.

00:12:45.545 --> 00:12:48.505
<v Speaker 1>So there will be some level of and

00:12:48.505 --> 00:12:49.385
<v Speaker 1>so

00:12:49.704 --> 00:12:50.904
<v Speaker 1>the PSPs

00:12:50.904 --> 00:12:52.745
<v Speaker 1>are being marked for deprecation

00:12:53.065 --> 00:12:55.225
<v Speaker 1>in version 1.21,

00:12:55.385 --> 00:12:57.065
<v Speaker 1>which will be I think it's in the

00:12:57.065 --> 00:12:59.705
<v Speaker 1>March timeframe when that will be released.

00:12:59.945 --> 00:13:03.630
<v Speaker 1>But the actual removal will happen in version

00:13:03.630 --> 00:13:04.990
<v Speaker 1>1.25.

00:13:05.310 --> 00:13:06.990
<v Speaker 1>So in that interval,

00:13:07.550 --> 00:13:10.270
<v Speaker 1>the SIGs and other folks working in the

00:13:10.270 --> 00:13:11.070
<v Speaker 1>community

00:13:11.390 --> 00:13:12.110
<v Speaker 1>are

00:13:12.990 --> 00:13:14.910
<v Speaker 1>reviewing

00:13:14.375 --> 00:13:17.255
<v Speaker 1>proposals for potential replacements

00:13:17.654 --> 00:13:20.135
<v Speaker 1>and also kind of trying to better

00:13:20.375 --> 00:13:21.334
<v Speaker 1>articulate

00:13:21.334 --> 00:13:24.695
<v Speaker 1>where other policy engines like Kyverno

00:13:25.014 --> 00:13:26.695
<v Speaker 1>or OPA Gatekeeper

00:13:26.695 --> 00:13:28.855
<v Speaker 1>can plug in. And what else would you

00:13:28.855 --> 00:13:31.520
<v Speaker 1>want to do with those, right? So the

00:13:31.520 --> 00:13:34.000
<v Speaker 1>good news is there will be hopefully something

00:13:34.000 --> 00:13:36.240
<v Speaker 1>better than PSPs that we end up with

00:13:36.240 --> 00:13:36.960
<v Speaker 1>natively.

00:13:37.360 --> 00:13:38.560
<v Speaker 1>And also

00:13:38.800 --> 00:13:41.680
<v Speaker 1>for more flexibility then you can lean on

00:13:42.080 --> 00:13:44.560
<v Speaker 1>things like Kyverno and OPA Gatekeeper.

00:13:45.195 --> 00:13:47.435
<v Speaker 1>Now in between and if you're a new

00:13:47.435 --> 00:13:48.795
<v Speaker 1>user getting started,

00:13:49.835 --> 00:13:51.595
<v Speaker 1>we believe of course that

00:13:52.315 --> 00:13:54.955
<v Speaker 1>most users should consider a policy engine for

00:13:54.955 --> 00:13:56.635
<v Speaker 1>a lot of the reasons we're talking about.

00:13:57.500 --> 00:13:59.740
<v Speaker 1>And it just both

00:14:00.540 --> 00:14:02.540
<v Speaker 1>policy engines we're discussing

00:14:02.780 --> 00:14:06.460
<v Speaker 1>make it fairly easy to get the equivalent

00:14:06.460 --> 00:14:07.900
<v Speaker 1>of bot securities

00:14:08.220 --> 00:14:11.980
<v Speaker 1>and they make these very configurable by namespace,

00:14:11.980 --> 00:14:13.035
<v Speaker 1>by workload,

00:14:13.115 --> 00:14:14.795
<v Speaker 1>so you get a lot of flexibility.

00:14:15.195 --> 00:14:18.235
<v Speaker 1>So it's definitely worth if you're starting with

00:14:18.235 --> 00:14:20.555
<v Speaker 1>the new cluster or going into production with

00:14:20.555 --> 00:14:21.355
<v Speaker 1>clusters,

00:14:21.755 --> 00:14:23.595
<v Speaker 1>check out Kyverno,

00:14:23.595 --> 00:14:26.395
<v Speaker 1>check out the OPA gatekeeper and evaluate both

00:14:26.395 --> 00:14:26.955
<v Speaker 1>of them

00:14:27.400 --> 00:14:30.200
<v Speaker 1>and pick one, right? Because it'll definitely help

00:14:30.200 --> 00:14:32.920
<v Speaker 1>with your security posture and there's just so

00:14:32.920 --> 00:14:35.720
<v Speaker 1>many things they can help solve with these

00:14:35.720 --> 00:14:36.600
<v Speaker 1>engines.

00:14:38.040 --> 00:14:40.440
<v Speaker 0>Awesome, that was a lot of great context

00:14:40.440 --> 00:14:42.405
<v Speaker 0>and history. I think that's, it's really important

00:14:42.405 --> 00:14:44.165
<v Speaker 0>for people to understand that.

00:14:44.485 --> 00:14:46.645
<v Speaker 0>And you know, I think I'm definitely on

00:14:46.645 --> 00:14:48.405
<v Speaker 0>the side that is favoring

00:14:48.405 --> 00:14:51.125
<v Speaker 0>more of this functionality being extracted from the

00:14:51.125 --> 00:14:53.685
<v Speaker 0>Kubernetes project and being spun out into other

00:14:53.685 --> 00:14:56.005
<v Speaker 0>projects or, you know, raising other projects up

00:14:56.005 --> 00:14:58.050
<v Speaker 0>to take place because there's a lot of

00:14:58.050 --> 00:15:01.089
<v Speaker 0>conversations in the Kubernetes community that the releases

00:15:01.089 --> 00:15:03.170
<v Speaker 0>are too fast for operations teams to even

00:15:03.170 --> 00:15:03.730
<v Speaker 0>go and

00:15:04.529 --> 00:15:06.050
<v Speaker 0>the one thing we don't want to slow

00:15:06.050 --> 00:15:07.890
<v Speaker 0>down if we slow down the Kubernetes release

00:15:07.890 --> 00:15:11.089
<v Speaker 0>is surrounding projects that focus on policy and

00:15:10.125 --> 00:15:12.365
<v Speaker 0>security and auditability and all of that and

00:15:12.365 --> 00:15:14.925
<v Speaker 0>I think it's really great that this kind

00:15:14.925 --> 00:15:17.725
<v Speaker 0>of trend is hopefully happening. So awesome.

00:15:18.845 --> 00:15:19.485
<v Speaker 0>Okay,

00:15:19.725 --> 00:15:21.325
<v Speaker 0>think we spoke a lot, so I think

00:15:21.325 --> 00:15:23.405
<v Speaker 0>why don't we get this screen shared, we'll

00:15:23.405 --> 00:15:25.085
<v Speaker 0>get Kyverno installed

00:15:25.245 --> 00:15:26.990
<v Speaker 0>and let's see what this thing can do.

00:15:28.110 --> 00:15:29.630
<v Speaker 0>So there

00:15:29.710 --> 00:15:31.310
<v Speaker 0>we go. Nice.

00:15:32.270 --> 00:15:34.750
<v Speaker 0>So in order to get started today, I'm

00:15:34.750 --> 00:15:38.430
<v Speaker 0>not using a, you know, real production

00:15:38.385 --> 00:15:41.345
<v Speaker 0>Kubernetes cluster. I'm using Docker for Mac and

00:15:42.065 --> 00:15:44.145
<v Speaker 0>we're just going to try and get Kyverno

00:15:44.145 --> 00:15:47.265
<v Speaker 0>deployed and then see how the policies happen.

00:15:47.265 --> 00:15:49.025
<v Speaker 0>So I'm going to click my favorite button

00:15:49.025 --> 00:15:51.825
<v Speaker 0>and every website is getting started.

00:15:53.585 --> 00:15:55.399
<v Speaker 0>Let's see, so the first thing we need

00:15:55.399 --> 00:15:56.600
<v Speaker 0>to do is just

00:15:57.800 --> 00:15:59.640
<v Speaker 0>because this is all Kubernetes,

00:15:59.640 --> 00:16:01.240
<v Speaker 0>it's just apply some YAML.

00:16:01.959 --> 00:16:04.680
<v Speaker 0>I'm gonna be very trusting and just throw

00:16:04.680 --> 00:16:06.600
<v Speaker 0>this straight at my Kubernetes cluster.

00:16:13.925 --> 00:16:16.325
<v Speaker 0>Do we think that kubectl dash f and

00:16:16.325 --> 00:16:18.245
<v Speaker 0>a remote URL is the same as curl

00:16:18.245 --> 00:16:18.965
<v Speaker 0>bash?

00:16:20.085 --> 00:16:21.765
<v Speaker 0>Is something I should be avoiding?

00:16:22.805 --> 00:16:24.320
<v Speaker 0>I seem to do a lot, I'm getting

00:16:24.320 --> 00:16:25.360
<v Speaker 0>a bit worried now.

00:16:26.400 --> 00:16:28.240
<v Speaker 1>Yes, so there is a Helm chart too

00:16:28.240 --> 00:16:30.800
<v Speaker 1>in our quick start. I think we have

00:16:30.880 --> 00:16:34.560
<v Speaker 1>given the example of just pulling the YAMLs

00:16:34.880 --> 00:16:37.200
<v Speaker 1>but I think definitely for

00:16:37.360 --> 00:16:39.735
<v Speaker 1>production clusters as a Helm chart option in

00:16:39.735 --> 00:16:41.255
<v Speaker 1>the installation section.

00:16:42.214 --> 00:16:43.815
<v Speaker 0>Oh yeah, definitely. I mean Helm, it's always

00:16:43.815 --> 00:16:45.415
<v Speaker 0>good to have a Helm option, but I

00:16:46.055 --> 00:16:48.135
<v Speaker 0>am more partial to just keep control, apply

00:16:48.774 --> 00:16:49.895
<v Speaker 0>most of the things.

00:16:51.335 --> 00:16:52.535
<v Speaker 0>Let's see what do we actually got? We

00:16:52.535 --> 00:16:55.070
<v Speaker 0>got a Kyverno namespace, we got some custom

00:16:55.070 --> 00:16:56.430
<v Speaker 0>resource definitions,

00:16:56.910 --> 00:16:59.470
<v Speaker 0>service account and some RBAC stuff and then

00:16:59.470 --> 00:17:01.230
<v Speaker 0>we got, I'm assuming which is the actual

00:17:01.230 --> 00:17:02.430
<v Speaker 0>Kyverno deployment,

00:17:02.670 --> 00:17:06.030
<v Speaker 0>service and a conflict map. So all pretty

00:17:06.030 --> 00:17:07.484
<v Speaker 0>much self explanatory.

00:17:08.445 --> 00:17:10.285
<v Speaker 0>And I guess we should expect to see

00:17:10.285 --> 00:17:10.845
<v Speaker 0>this

00:17:11.325 --> 00:17:12.765
<v Speaker 0>running at healthy.

00:17:13.085 --> 00:17:16.285
<v Speaker 0>So this Kyverno deployment that we got, this

00:17:16.285 --> 00:17:18.990
<v Speaker 0>is just, is this registering itself as the

00:17:18.990 --> 00:17:21.069
<v Speaker 0>admission controller that you kind of covered in

00:17:21.069 --> 00:17:22.109
<v Speaker 0>your slides?

00:17:24.829 --> 00:17:25.869
<v Speaker 1>Yes, it does.

00:17:26.270 --> 00:17:30.110
<v Speaker 1>So it will, once the pod gets deployed,

00:17:30.270 --> 00:17:32.835
<v Speaker 1>the deployment and service also get installed,

00:17:33.155 --> 00:17:36.275
<v Speaker 1>it will bootstrap itself as an admission controller.

00:17:36.275 --> 00:17:38.195
<v Speaker 1>It also generates a certificate.

00:17:38.515 --> 00:17:40.275
<v Speaker 1>All of this of course can be overridden

00:17:40.275 --> 00:17:42.675
<v Speaker 1>and configured with options if you wanna provide

00:17:42.675 --> 00:17:44.210
<v Speaker 1>your own certs, etcetera.

00:17:44.530 --> 00:17:46.850
<v Speaker 1>But the defaults, it'll just take care of

00:17:46.850 --> 00:17:47.330
<v Speaker 1>it.

00:17:47.650 --> 00:17:49.330
<v Speaker 0>So does that just generate its own self

00:17:49.330 --> 00:17:51.570
<v Speaker 0>same certificate and pass the bundle into the

00:17:51.570 --> 00:17:52.450
<v Speaker 0>registration,

00:17:53.570 --> 00:17:54.290
<v Speaker 1>Exactly.

00:17:54.690 --> 00:17:57.005
<v Speaker 1>You can also yeah. If you check for

00:17:57.005 --> 00:17:59.725
<v Speaker 1>the validating webhooks, you'll see that there's a

00:17:59.725 --> 00:18:01.805
<v Speaker 1>few configured registered.

00:18:01.805 --> 00:18:04.365
<v Speaker 1>There's also mutating webhook or I think a

00:18:04.365 --> 00:18:05.805
<v Speaker 1>couple right shooting?

00:18:07.165 --> 00:18:08.605
<v Speaker 2>Yeah. It's actually

00:18:08.779 --> 00:18:11.179
<v Speaker 2>validating web bug configurations.

00:18:12.220 --> 00:18:13.019
<v Speaker 1>Yeah.

00:18:14.700 --> 00:18:16.219
<v Speaker 1>There you go. I

00:18:17.340 --> 00:18:18.620
<v Speaker 0>don't know how I got that little bit

00:18:18.620 --> 00:18:20.059
<v Speaker 0>on the end, but there we go.

00:18:20.700 --> 00:18:22.380
<v Speaker 0>Yeah. So we've got Kyverno

00:18:22.425 --> 00:18:25.225
<v Speaker 0>policy validating and then a resource validating.

00:18:25.865 --> 00:18:26.345
<v Speaker 0>And

00:18:28.265 --> 00:18:30.025
<v Speaker 0>then it looks like the getting starting guide

00:18:30.025 --> 00:18:32.185
<v Speaker 0>is just gonna throw me straight into the,

00:18:32.185 --> 00:18:33.225
<v Speaker 0>I don't know if it's the deep end

00:18:33.225 --> 00:18:34.505
<v Speaker 0>or the shallow end but we're just creating

00:18:34.505 --> 00:18:36.505
<v Speaker 0>our first cluster policy

00:18:37.070 --> 00:18:37.710
<v Speaker 0>And

00:18:38.270 --> 00:18:39.710
<v Speaker 0>it looks familiar to what you showed in

00:18:39.710 --> 00:18:40.510
<v Speaker 0>the slides.

00:18:40.990 --> 00:18:42.670
<v Speaker 0>And it just seems to,

00:18:43.070 --> 00:18:44.750
<v Speaker 0>sorry, I minced my words here.

00:18:45.390 --> 00:18:47.790
<v Speaker 0>Is the idea with the policies to mimic

00:18:47.790 --> 00:18:49.790
<v Speaker 0>the objects in which you're applying the policy

00:18:49.455 --> 00:18:50.735
<v Speaker 0>to. I've seen when you were doing the

00:18:50.735 --> 00:18:52.575
<v Speaker 0>pod one is that I could probably have

00:18:52.575 --> 00:18:54.575
<v Speaker 0>just ran like some sort of YAML merge

00:18:54.575 --> 00:18:56.414
<v Speaker 0>with my actual pod and then

00:18:57.294 --> 00:18:59.054
<v Speaker 0>done some sort of assertion against it. Is

00:18:59.054 --> 00:19:00.335
<v Speaker 0>that common throughout?

00:19:01.855 --> 00:19:04.014
<v Speaker 1>Yes. So for validate policies,

00:19:04.174 --> 00:19:07.270
<v Speaker 1>one style that supported is this just using

00:19:07.270 --> 00:19:09.350
<v Speaker 1>this pattern block, which

00:19:09.670 --> 00:19:12.710
<v Speaker 1>will match the structure of the resource you're

00:19:12.710 --> 00:19:13.750
<v Speaker 1>trying to validate.

00:19:14.630 --> 00:19:15.190
<v Speaker 1>There

00:19:15.750 --> 00:19:18.070
<v Speaker 1>are a few other sort of things you

00:19:18.070 --> 00:19:19.350
<v Speaker 1>can do like you can use,

00:19:20.434 --> 00:19:22.835
<v Speaker 1>you know, there's a deny rules as well

00:19:22.835 --> 00:19:24.995
<v Speaker 1>as you know preconditions etcetera,

00:19:24.995 --> 00:19:27.154
<v Speaker 1>but the most the simple policies

00:19:27.635 --> 00:19:30.195
<v Speaker 1>are just mimic the structure of the resource.

00:19:31.395 --> 00:19:33.075
<v Speaker 0>And is it fair for me to assume

00:19:33.075 --> 00:19:35.235
<v Speaker 0>that with the existence of a cluster policy,

00:19:35.235 --> 00:19:37.340
<v Speaker 0>there's also some sort of names based policy

00:19:37.340 --> 00:19:39.419
<v Speaker 0>or is always just a cluster policy?

00:19:41.419 --> 00:19:43.019
<v Speaker 1>Is a names based policy.

00:19:43.340 --> 00:19:44.139
<v Speaker 2>Right.

00:19:44.299 --> 00:19:45.580
<v Speaker 1>Go ahead at checking.

00:19:46.539 --> 00:19:48.299
<v Speaker 2>Yeah. I'm just about to say the same

00:19:48.299 --> 00:19:50.655
<v Speaker 2>thing. We have cluster policy and names based

00:19:50.655 --> 00:19:51.375
<v Speaker 2>policy.

00:19:52.495 --> 00:19:54.255
<v Speaker 0>I like it and it's one of my

00:19:54.255 --> 00:19:55.935
<v Speaker 0>favorite things when I play with software, see

00:19:55.935 --> 00:19:57.935
<v Speaker 0>even my intuition can answer questions and I

00:19:57.935 --> 00:20:00.015
<v Speaker 0>don't need to have any knowledge

00:20:00.015 --> 00:20:02.015
<v Speaker 0>upfront. Always think that's great.

00:20:02.575 --> 00:20:04.335
<v Speaker 0>Okay. What did I get wrong here?

00:20:08.990 --> 00:20:11.070
<v Speaker 0>Oh, it's just is that a backtick?

00:20:14.190 --> 00:20:16.990
<v Speaker 2>I saw the policy is created. Yeah. Think

00:20:16.990 --> 00:20:18.590
<v Speaker 0>it's just the back the shell was expanding

00:20:18.830 --> 00:20:19.630
<v Speaker 0>Okay. This.

00:20:23.845 --> 00:20:24.965
<v Speaker 0>Okay.

00:20:25.445 --> 00:20:27.045
<v Speaker 0>Created that way. Okay. So let's just take

00:20:27.045 --> 00:20:29.045
<v Speaker 0>a look at this. I can run cluster

00:20:29.045 --> 00:20:30.004
<v Speaker 0>policies.

00:20:31.445 --> 00:20:35.044
<v Speaker 0>Yeah. And if I get our require labels

00:20:37.480 --> 00:20:38.200
<v Speaker 0>Alright.

00:20:39.880 --> 00:20:40.440
<v Speaker 0>So

00:20:41.080 --> 00:20:42.519
<v Speaker 0>let's see if I can look at this

00:20:42.519 --> 00:20:44.039
<v Speaker 0>and work out what it's doing.

00:20:44.279 --> 00:20:46.440
<v Speaker 0>So I'm assuming the name is going to

00:20:46.440 --> 00:20:49.080
<v Speaker 0>give most of that away but still we

00:20:49.080 --> 00:20:49.719
<v Speaker 0>are,

00:20:50.600 --> 00:20:51.845
<v Speaker 0>so we have some sort of match that

00:20:51.845 --> 00:20:53.924
<v Speaker 0>says only work on a pod resource type

00:20:53.924 --> 00:20:57.125
<v Speaker 0>with the validation that we expect for app

00:20:57.125 --> 00:20:59.524
<v Speaker 0>Kubernetes IO dash name label to exist and

00:20:59.524 --> 00:21:01.125
<v Speaker 0>we don't really have any constraints on what

00:21:01.125 --> 00:21:02.004
<v Speaker 0>the value should be.

00:21:04.450 --> 00:21:06.130
<v Speaker 0>Is this just regex? I mean it looks

00:21:06.130 --> 00:21:08.450
<v Speaker 0>like regex but not regex.

00:21:10.769 --> 00:21:11.570
<v Speaker 1>It's

00:21:11.809 --> 00:21:14.210
<v Speaker 1>it supports you know star

00:21:14.210 --> 00:21:16.769
<v Speaker 1>like so the splat and the question mark

00:21:17.250 --> 00:21:17.649
<v Speaker 1>characters.

00:21:18.154 --> 00:21:19.034
<v Speaker 1>So it

00:21:19.355 --> 00:21:22.794
<v Speaker 1>that's it's not full regex but just those

00:21:22.794 --> 00:21:23.754
<v Speaker 1>two characters.

00:21:24.235 --> 00:21:26.955
<v Speaker 1>So for either, you know, wildcarding parts of

00:21:26.955 --> 00:21:28.234
<v Speaker 1>your name or

00:21:28.715 --> 00:21:30.715
<v Speaker 1>allowing some variables in there.

00:21:32.270 --> 00:21:32.990
<v Speaker 0>Okay.

00:21:34.110 --> 00:21:36.270
<v Speaker 0>And now we're just gonna create a deployment

00:21:36.270 --> 00:21:39.070
<v Speaker 0>and we should see this fail because

00:21:40.830 --> 00:21:44.590
<v Speaker 0>this cluster policy mandates that we need that

00:21:43.905 --> 00:21:44.544
<v Speaker 0>label.

00:21:45.745 --> 00:21:47.265
<v Speaker 0>And I guess is that what the validation

00:21:47.265 --> 00:21:49.345
<v Speaker 0>failure action is? So we have enforced what

00:21:49.345 --> 00:21:51.424
<v Speaker 0>what else is the the options here?

00:21:53.505 --> 00:21:56.705
<v Speaker 2>We also have audit mode. So in enforcement,

00:21:57.210 --> 00:22:00.250
<v Speaker 2>if your results violate the policy, the creation

00:22:00.250 --> 00:22:03.690
<v Speaker 2>will be blocked and otherwise it just reported

00:22:03.690 --> 00:22:05.049
<v Speaker 2>as a violation.

00:22:06.409 --> 00:22:07.690
<v Speaker 0>Okay. Cool.

00:22:09.450 --> 00:22:11.210
<v Speaker 0>Alright. So my deployment

00:22:11.210 --> 00:22:11.690
<v Speaker 0>failed.

00:22:13.155 --> 00:22:14.995
<v Speaker 0>We can see what caused it to fail

00:22:14.995 --> 00:22:16.755
<v Speaker 0>and that the label is required.

00:22:19.075 --> 00:22:21.475
<v Speaker 0>Alright. Let's see. Let's add our label.

00:22:30.669 --> 00:22:31.469
<v Speaker 0>Simple.

00:22:32.750 --> 00:22:33.469
<v Speaker 0>Cool.

00:22:33.710 --> 00:22:34.509
<v Speaker 0>Alright.

00:22:36.350 --> 00:22:38.429
<v Speaker 0>That was yeah, let's just delete all this

00:22:38.429 --> 00:22:39.549
<v Speaker 0>then. That was good.

00:22:40.190 --> 00:22:43.035
<v Speaker 0>Nice and simple, easy to reason about, I

00:22:43.035 --> 00:22:45.915
<v Speaker 0>didn't have to go digging into documentation to

00:22:45.915 --> 00:22:47.514
<v Speaker 0>try and understand anything,

00:22:47.674 --> 00:22:49.034
<v Speaker 0>again that's really,

00:22:49.674 --> 00:22:51.195
<v Speaker 0>that's the way things should be with software,

00:22:51.195 --> 00:22:52.554
<v Speaker 0>right? It's supposed to make our lives easier,

00:22:52.554 --> 00:22:53.915
<v Speaker 0>it's not supposed to burden us with all

00:22:53.915 --> 00:22:55.850
<v Speaker 0>this new stuff that we really need to

00:22:55.850 --> 00:22:56.729
<v Speaker 0>go and learn.

00:22:57.450 --> 00:22:58.090
<v Speaker 0>Cool.

00:22:58.570 --> 00:22:59.210
<v Speaker 1>Great.

00:23:00.570 --> 00:23:02.730
<v Speaker 0>Alright, so that's Kyverno

00:23:02.730 --> 00:23:04.489
<v Speaker 0>one zero one, our first policy

00:23:04.650 --> 00:23:06.730
<v Speaker 0>looking for labels and denying it if it

00:23:06.730 --> 00:23:07.289
<v Speaker 0>doesn't have it.

00:23:08.625 --> 00:23:11.105
<v Speaker 0>Now should we jump into the writing policies?

00:23:11.105 --> 00:23:12.145
<v Speaker 0>Are we gonna take a look at some

00:23:12.145 --> 00:23:15.184
<v Speaker 0>more advanced examples? Maybe we could discuss

00:23:15.505 --> 00:23:16.305
<v Speaker 0>what

00:23:16.305 --> 00:23:18.065
<v Speaker 0>are the common use cases that you see

00:23:18.065 --> 00:23:20.705
<v Speaker 0>people using policy for within a Kubernetes environment?

00:23:23.029 --> 00:23:25.029
<v Speaker 1>Yeah. You you mentioned and we were talking

00:23:25.029 --> 00:23:26.230
<v Speaker 1>about PSPs.

00:23:26.230 --> 00:23:27.590
<v Speaker 1>So that would be a good thing to

00:23:27.590 --> 00:23:28.229
<v Speaker 1>explore.

00:23:28.710 --> 00:23:29.989
<v Speaker 1>Shooting. What do you think?

00:23:31.029 --> 00:23:33.590
<v Speaker 2>Yeah. Yeah. We can explore PSP.

00:23:36.070 --> 00:23:36.789
<v Speaker 0>Sorry, Igo.

00:23:37.735 --> 00:23:40.374
<v Speaker 2>Yeah. I mean, we have all the policy,

00:23:40.375 --> 00:23:41.414
<v Speaker 2>like, secure

00:23:42.375 --> 00:23:44.135
<v Speaker 2>pod security standards

00:23:44.135 --> 00:23:46.934
<v Speaker 2>available on our website. If you look up,

00:23:47.735 --> 00:23:49.414
<v Speaker 2>there is a policies

00:23:49.414 --> 00:23:50.215
<v Speaker 2>button

00:23:50.510 --> 00:23:51.630
<v Speaker 2>on the top.

00:23:53.230 --> 00:23:56.190
<v Speaker 2>The blue bar. Oh yeah. The third one.

00:23:56.190 --> 00:23:58.750
<v Speaker 2>Yeah. So it says prepackaged policies that people

00:23:58.750 --> 00:24:01.150
<v Speaker 0>can just come in and get. Yeah. So

00:24:01.150 --> 00:24:03.630
<v Speaker 0>I guess here's the question then like, know,

00:24:03.630 --> 00:24:06.030
<v Speaker 0>as far as Kubernetes clusters go and adoption

00:24:06.030 --> 00:24:08.325
<v Speaker 0>across different teams, organizations,

00:24:08.405 --> 00:24:11.205
<v Speaker 0>etcetera, like are the policies that people are

00:24:11.205 --> 00:24:12.005
<v Speaker 0>applying

00:24:12.805 --> 00:24:15.365
<v Speaker 0>Snowflakes, are they unique or is it fair

00:24:15.365 --> 00:24:17.205
<v Speaker 0>to say that the majority of people probably

00:24:17.205 --> 00:24:19.525
<v Speaker 0>want the same standards of templates or policies

00:24:19.525 --> 00:24:20.805
<v Speaker 0>to enforce the same things?

00:24:22.620 --> 00:24:24.940
<v Speaker 1>That's a good question, right? So we,

00:24:25.180 --> 00:24:25.820
<v Speaker 1>it tends

00:24:26.540 --> 00:24:27.260
<v Speaker 1>to be

00:24:27.740 --> 00:24:30.940
<v Speaker 1>that for things which are well

00:24:30.940 --> 00:24:33.820
<v Speaker 1>defined enough by the community like pod security

00:24:34.460 --> 00:24:36.445
<v Speaker 1>and I think as there a link up

00:24:36.445 --> 00:24:39.085
<v Speaker 1>here, if you click on pod security,

00:24:39.325 --> 00:24:42.845
<v Speaker 1>Kubernetes actually has a page which

00:24:43.245 --> 00:24:44.205
<v Speaker 1>defines

00:24:44.205 --> 00:24:45.965
<v Speaker 1>pod security standards

00:24:46.205 --> 00:24:48.445
<v Speaker 1>and different levels of pod security.

00:24:49.220 --> 00:24:49.940
<v Speaker 1>So

00:24:50.500 --> 00:24:52.980
<v Speaker 1>for something like this, it definitely makes sense

00:24:52.980 --> 00:24:55.860
<v Speaker 1>to just use the policies as is and

00:24:56.020 --> 00:24:58.740
<v Speaker 1>every cluster should have some implementation

00:24:59.140 --> 00:25:01.059
<v Speaker 1>of these pod security standards.

00:25:01.540 --> 00:25:02.820
<v Speaker 1>One implementation

00:25:02.820 --> 00:25:05.835
<v Speaker 1>of course is PSPs which we talked about

00:25:06.715 --> 00:25:08.795
<v Speaker 1>Kyverno and OPA Gatekeeper,

00:25:08.795 --> 00:25:10.235
<v Speaker 1>two other implementations

00:25:10.235 --> 00:25:12.395
<v Speaker 1>of these Pod Security Standards.

00:25:13.035 --> 00:25:13.595
<v Speaker 1>So

00:25:14.235 --> 00:25:17.035
<v Speaker 1>for something like that, it's definitely makes sense.

00:25:17.035 --> 00:25:20.030
<v Speaker 1>But the tricky piece comes in where like

00:25:20.030 --> 00:25:21.710
<v Speaker 1>so now if you have a workload, like

00:25:21.710 --> 00:25:24.110
<v Speaker 1>let's say you're running whether it's Prometheus or

00:25:24.110 --> 00:25:27.230
<v Speaker 1>NGINX and sometimes pods require

00:25:27.230 --> 00:25:29.710
<v Speaker 1>access let's say to a host directory.

00:25:30.270 --> 00:25:32.670
<v Speaker 1>And one of the rules in the

00:25:33.310 --> 00:25:36.085
<v Speaker 1>I believe in the restricted standard or actually

00:25:36.085 --> 00:25:37.524
<v Speaker 1>it's in the default standard

00:25:37.685 --> 00:25:40.085
<v Speaker 1>says that host path should not be used,

00:25:40.085 --> 00:25:43.765
<v Speaker 1>right? Because that creates some potential

00:25:44.325 --> 00:25:46.645
<v Speaker 1>security holes where if you have pods running

00:25:46.645 --> 00:25:47.845
<v Speaker 1>with host path access,

00:25:48.840 --> 00:25:51.160
<v Speaker 1>it's possible that an intruder can use that

00:25:51.160 --> 00:25:52.919
<v Speaker 1>to get access to host.

00:25:53.480 --> 00:25:55.800
<v Speaker 1>And certainly if you're using host path in

00:25:55.800 --> 00:25:58.200
<v Speaker 1>combination with things like privilege pods,

00:25:58.360 --> 00:25:59.880
<v Speaker 1>bad things could happen, right?

00:26:01.804 --> 00:26:03.965
<v Speaker 1>So this is where some flexibility

00:26:03.965 --> 00:26:06.124
<v Speaker 1>now is required, right? Because

00:26:06.765 --> 00:26:09.085
<v Speaker 1>in a cluster you typically wanna exclude

00:26:09.485 --> 00:26:12.445
<v Speaker 1>certain things, you wanna allow privileges

00:26:12.445 --> 00:26:14.125
<v Speaker 1>for very select pods

00:26:15.050 --> 00:26:17.370
<v Speaker 1>as a small of a subset as possible.

00:26:17.690 --> 00:26:19.610
<v Speaker 1>And so this is where customization

00:26:19.610 --> 00:26:21.610
<v Speaker 1>and that flexibility is required.

00:26:22.090 --> 00:26:24.170
<v Speaker 1>And then there are policies like best practice

00:26:24.170 --> 00:26:26.330
<v Speaker 1>policies which are just

00:26:26.809 --> 00:26:29.635
<v Speaker 1>best practice, right? So those are not necessarily

00:26:29.955 --> 00:26:32.675
<v Speaker 1>helping secure your cluster etcetera, but they might

00:26:32.675 --> 00:26:35.075
<v Speaker 1>help with other things like requiring probes.

00:26:35.795 --> 00:26:36.915
<v Speaker 1>They

00:26:37.795 --> 00:26:40.115
<v Speaker 1>can solve problems like a noisy neighbor problem

00:26:40.115 --> 00:26:42.330
<v Speaker 1>if you have a multi tenant cluster.

00:26:42.650 --> 00:26:45.130
<v Speaker 1>So those we have put into like best

00:26:45.130 --> 00:26:46.010
<v Speaker 1>practices.

00:26:46.650 --> 00:26:48.169
<v Speaker 1>And then there's finally

00:26:48.250 --> 00:26:51.370
<v Speaker 1>in our policy library, there's other category

00:26:51.610 --> 00:26:54.570
<v Speaker 1>which just contains like different samples that

00:26:55.050 --> 00:26:57.565
<v Speaker 1>come up and some of which are shared

00:26:57.565 --> 00:27:00.845
<v Speaker 1>by the community and we're constantly adding more.

00:27:01.165 --> 00:27:03.645
<v Speaker 1>So that's how we're roughly organized, but the

00:27:03.645 --> 00:27:06.445
<v Speaker 1>pod security one seems like the standard one,

00:27:06.445 --> 00:27:07.805
<v Speaker 1>which everyone should have.

00:27:08.045 --> 00:27:11.330
<v Speaker 1>Others are more up to administrators.

00:27:12.530 --> 00:27:14.530
<v Speaker 0>And I guess this is where that's you

00:27:14.530 --> 00:27:16.050
<v Speaker 0>know, that's like that we've seen in the

00:27:16.050 --> 00:27:18.130
<v Speaker 0>first policy we created where we had enforced,

00:27:18.130 --> 00:27:19.810
<v Speaker 0>but there's also audit is that you may

00:27:19.810 --> 00:27:21.810
<v Speaker 0>want to enforce all of the basic essentials

00:27:21.810 --> 00:27:23.330
<v Speaker 0>and then audit the

00:27:23.570 --> 00:27:25.475
<v Speaker 0>things you're striving to reach, the things that

00:27:25.475 --> 00:27:27.075
<v Speaker 0>we want to get better but we're not

00:27:27.075 --> 00:27:28.915
<v Speaker 0>quite there yet and then track them over

00:27:28.915 --> 00:27:30.755
<v Speaker 0>time. That to me seems like a pretty

00:27:30.755 --> 00:27:32.195
<v Speaker 0>good adoption strategy.

00:27:32.515 --> 00:27:33.235
<v Speaker 1>Right.

00:27:34.195 --> 00:27:35.235
<v Speaker 1>Yeah and giving

00:27:35.475 --> 00:27:37.955
<v Speaker 1>teams a chance to kind of fix things,

00:27:37.955 --> 00:27:39.875
<v Speaker 1>right. So what we've found very effective

00:27:40.590 --> 00:27:44.190
<v Speaker 1>with some deployments is just showing a report

00:27:44.190 --> 00:27:46.269
<v Speaker 1>and the Kyverno

00:27:48.190 --> 00:27:49.070
<v Speaker 1>these

00:27:49.309 --> 00:27:51.549
<v Speaker 1>policy reports and we'll see some of that

00:27:51.870 --> 00:27:53.710
<v Speaker 1>once we apply pod security policies.

00:27:54.405 --> 00:27:56.405
<v Speaker 1>They show up in the namespace

00:27:56.405 --> 00:27:58.405
<v Speaker 1>of the workload itself.

00:27:58.645 --> 00:28:00.405
<v Speaker 1>And the reason why we designed it in

00:28:00.405 --> 00:28:03.125
<v Speaker 1>that manner is so that the workload owner

00:28:03.365 --> 00:28:04.804
<v Speaker 1>gets a chance to see

00:28:05.365 --> 00:28:06.645
<v Speaker 1>which policies

00:28:06.990 --> 00:28:09.310
<v Speaker 1>there are violations for and they can remediate

00:28:09.310 --> 00:28:11.550
<v Speaker 1>and fix that. So the idea is that

00:28:11.550 --> 00:28:13.550
<v Speaker 1>in a dev test or staging cluster, you

00:28:13.550 --> 00:28:16.270
<v Speaker 1>can run-in audit mode, but in production you

00:28:16.270 --> 00:28:18.669
<v Speaker 1>would kind of put the brakes on and

00:28:18.990 --> 00:28:21.790
<v Speaker 1>run-in enforced mode and just block any of

00:28:21.790 --> 00:28:22.975
<v Speaker 1>this. Right? So

00:28:23.215 --> 00:28:24.335
<v Speaker 1>those sort of

00:28:24.655 --> 00:28:27.455
<v Speaker 1>that flexibility is also really nice to have.

00:28:28.015 --> 00:28:29.854
<v Speaker 0>Yeah, definitely. I can see that.

00:28:30.575 --> 00:28:32.575
<v Speaker 0>Okay. Let's go back to our our kind

00:28:32.575 --> 00:28:34.895
<v Speaker 0>of introduction getting started gate here. I can

00:28:34.895 --> 00:28:37.549
<v Speaker 0>see we've got a whole bunch of examples

00:28:37.630 --> 00:28:40.510
<v Speaker 0>on writing policies. So I guess we'll pick

00:28:40.510 --> 00:28:41.870
<v Speaker 0>a few of these, we'll work through it,

00:28:41.870 --> 00:28:43.790
<v Speaker 0>we'll try and highlight what's new in each

00:28:43.790 --> 00:28:46.110
<v Speaker 0>one and we'll take it from there. So

00:28:47.550 --> 00:28:48.110
<v Speaker 0>let's see.

00:28:50.554 --> 00:28:52.554
<v Speaker 0>Oh, that's a bit chatty. Okay.

00:28:54.715 --> 00:28:56.554
<v Speaker 0>So Yeah. One thing if you wanna try

00:28:56.554 --> 00:28:57.434
<v Speaker 1>real quick,

00:28:57.914 --> 00:28:59.275
<v Speaker 1>you know, if you go back to the

00:28:59.275 --> 00:29:02.155
<v Speaker 1>policy library, there's a actually a one liner

00:29:02.155 --> 00:29:04.794
<v Speaker 1>to install pod security that may be

00:29:05.280 --> 00:29:06.960
<v Speaker 1>So just click on that.

00:29:07.440 --> 00:29:09.360
<v Speaker 1>If you wanna grab that. So if you

00:29:09.360 --> 00:29:10.480
<v Speaker 1>have customized

00:29:10.640 --> 00:29:13.360
<v Speaker 1>running or installed just as a standard. The

00:29:13.360 --> 00:29:15.760
<v Speaker 1>customized version with kubectl is a little bit

00:29:15.760 --> 00:29:18.320
<v Speaker 1>old so it doesn't work in this manner.

00:29:18.320 --> 00:29:20.015
<v Speaker 1>But if you have local customize you can

00:29:20.015 --> 00:29:21.695
<v Speaker 1>just grab that and run that.

00:29:23.535 --> 00:29:25.934
<v Speaker 0>No, but I'm sure I can quickly grab

00:29:25.934 --> 00:29:26.414
<v Speaker 0>it.

00:29:26.975 --> 00:29:28.014
<v Speaker 1>Okay, cool.

00:29:29.455 --> 00:29:31.695
<v Speaker 0>Yeah, I haven't really installed customize on its

00:29:31.695 --> 00:29:34.174
<v Speaker 0>own since it was added to KubeControl natively

00:29:34.830 --> 00:29:36.269
<v Speaker 0>but I have seen a lot of chatter

00:29:36.269 --> 00:29:38.269
<v Speaker 0>especially recently I think there was a major

00:29:38.269 --> 00:29:40.909
<v Speaker 0>release of Customize in the last week Right.

00:29:41.710 --> 00:29:43.309
<v Speaker 0>In fact there we go it's the four

00:29:43.309 --> 00:29:45.309
<v Speaker 0>point zero so and there was a lot

00:29:45.309 --> 00:29:46.509
<v Speaker 0>of chatter into then.

00:29:46.909 --> 00:29:48.785
<v Speaker 1>Oh I think you got four point o,

00:29:48.785 --> 00:29:50.465
<v Speaker 1>so let's see if this works.

00:29:51.424 --> 00:29:52.465
<v Speaker 0>Yeah.

00:29:53.985 --> 00:29:55.424
<v Speaker 0>Why don't I not build it then? Why

00:29:55.424 --> 00:29:56.144
<v Speaker 0>don't we

00:29:56.544 --> 00:29:58.065
<v Speaker 0>will we raise it to fail and take

00:29:58.065 --> 00:29:59.024
<v Speaker 0>a look at it?

00:30:00.225 --> 00:30:01.345
<v Speaker 1>Sure. Let's take a look.

00:30:05.559 --> 00:30:07.080
<v Speaker 0>No errors yet.

00:30:07.880 --> 00:30:09.239
<v Speaker 1>Okay. That looks

00:30:09.880 --> 00:30:11.799
<v Speaker 1>did we get a YAML or Yeah. We

00:30:11.799 --> 00:30:13.719
<v Speaker 0>got a YAML. Okay. Perfect.

00:30:14.039 --> 00:30:15.720
<v Speaker 0>Yeah. Just want to make sure figured we

00:30:15.720 --> 00:30:17.880
<v Speaker 0>pop open and code, get some syntax highlighting,

00:30:17.880 --> 00:30:19.639
<v Speaker 0>hopefully make it a little bit

00:30:19.615 --> 00:30:20.095
<v Speaker 0>So

00:30:22.015 --> 00:30:24.255
<v Speaker 1>Yeah. So as you can see what customized

00:30:24.255 --> 00:30:26.174
<v Speaker 1>data is it just bundled

00:30:26.654 --> 00:30:30.015
<v Speaker 1>all of the default and restricted policies.

00:30:30.015 --> 00:30:32.015
<v Speaker 1>So yeah, you can now apply this to

00:30:32.015 --> 00:30:32.575
<v Speaker 1>your cluster.

00:30:39.539 --> 00:30:41.700
<v Speaker 0>Alright, we have a whole bunch of pod

00:30:41.700 --> 00:30:43.700
<v Speaker 0>security policies applied.

00:30:44.100 --> 00:30:45.380
<v Speaker 0>Shall we take a look at some of

00:30:45.380 --> 00:30:45.700
<v Speaker 0>the,

00:30:46.815 --> 00:30:49.054
<v Speaker 0>you know the actual policies themselves and just

00:30:49.054 --> 00:30:50.894
<v Speaker 0>kinda help people understand

00:30:50.895 --> 00:30:52.095
<v Speaker 0>the constructs

00:30:52.095 --> 00:30:53.215
<v Speaker 0>and the way that the build these out

00:30:53.215 --> 00:30:54.414
<v Speaker 0>and what they mean.

00:30:55.535 --> 00:30:58.015
<v Speaker 0>So Yep. I mean I see some annotations

00:30:58.015 --> 00:31:00.014
<v Speaker 0>here on the first cluster policy,

00:31:00.015 --> 00:31:03.380
<v Speaker 0>is that purely for the reporting aspects

00:31:03.940 --> 00:31:05.700
<v Speaker 0>that allows them to group them together?

00:31:07.140 --> 00:31:09.460
<v Speaker 1>That's right. And it's just also this

00:31:09.620 --> 00:31:12.580
<v Speaker 1>is we use this to organize policies

00:31:12.580 --> 00:31:16.580
<v Speaker 1>in our policy library. Right? So it's

00:31:16.135 --> 00:31:16.934
<v Speaker 1>optional.

00:31:17.655 --> 00:31:20.615
<v Speaker 1>But we recommend like using these just category

00:31:20.615 --> 00:31:23.255
<v Speaker 1>description just to make it easier and it

00:31:23.255 --> 00:31:25.575
<v Speaker 1>does carry forward in the report as well.

00:31:26.455 --> 00:31:28.934
<v Speaker 0>Okay. And then similar to the first one

00:31:28.934 --> 00:31:30.375
<v Speaker 0>we applied, we can see that what we're

00:31:30.375 --> 00:31:32.500
<v Speaker 0>doing here is targeting pods and we do

00:31:32.500 --> 00:31:34.100
<v Speaker 0>have a question from the audience on that.

00:31:34.100 --> 00:31:35.380
<v Speaker 0>So why don't I pop that on the

00:31:35.380 --> 00:31:36.340
<v Speaker 0>screen just now?

00:31:37.540 --> 00:31:40.500
<v Speaker 0>Frank is asking is if I have a

00:31:40.500 --> 00:31:43.140
<v Speaker 0>policy that I'm enforcing on pods, do I

00:31:43.140 --> 00:31:45.140
<v Speaker 0>also need to do that for deploys jobs,

00:31:45.465 --> 00:31:47.624
<v Speaker 0>etcetera, or will the pod catch it all?

00:31:48.265 --> 00:31:49.705
<v Speaker 0>That's a great question.

00:31:50.265 --> 00:31:51.465
<v Speaker 1>Yeah. So as

00:31:52.025 --> 00:31:54.025
<v Speaker 1>you pointed out, all of these are on

00:31:54.025 --> 00:31:55.945
<v Speaker 1>pods. Right? Chuting, do you wanna

00:31:56.424 --> 00:31:58.600
<v Speaker 1>talk about what happened to the Sure. So

00:31:58.600 --> 00:32:00.679
<v Speaker 2>David, if you wanna go to your terminal

00:32:00.679 --> 00:32:03.320
<v Speaker 2>and grab one of the policies YAML,

00:32:03.639 --> 00:32:06.279
<v Speaker 2>we'll actually see there are more than one

00:32:06.279 --> 00:32:07.879
<v Speaker 2>rules defined per policy.

00:32:08.840 --> 00:32:11.164
<v Speaker 0>So you just want me to get a

00:32:11.164 --> 00:32:12.684
<v Speaker 0>cluster policies

00:32:12.684 --> 00:32:14.205
<v Speaker 0>and then pick one.

00:32:14.924 --> 00:32:17.404
<v Speaker 1>By the way, CPOL is the short form.

00:32:18.365 --> 00:32:19.644
<v Speaker 1>Oh. Yep.

00:32:22.684 --> 00:32:24.284
<v Speaker 0>Oh, no. It's got a it's using the

00:32:24.284 --> 00:32:25.645
<v Speaker 0>prefix approach. Okay. There we go.

00:32:29.860 --> 00:32:32.659
<v Speaker 2>Okay. So now you can see basically we

00:32:32.659 --> 00:32:34.019
<v Speaker 2>have three rules

00:32:34.100 --> 00:32:36.659
<v Speaker 2>in this policy, but in the definition, yeah,

00:32:36.659 --> 00:32:38.419
<v Speaker 2>but we only have one for pod.

00:32:38.580 --> 00:32:42.525
<v Speaker 2>So what Kyverno does here is it'll automatically

00:32:42.525 --> 00:32:45.165
<v Speaker 2>convert those pod rules to the rule of

00:32:45.165 --> 00:32:46.365
<v Speaker 2>pod controllers

00:32:46.685 --> 00:32:49.245
<v Speaker 2>so that you only taking you only take

00:32:49.245 --> 00:32:50.125
<v Speaker 2>care of the

00:32:50.445 --> 00:32:52.285
<v Speaker 2>all the rules that apply to pod and

00:32:52.285 --> 00:32:54.525
<v Speaker 2>then Kyverno will automatically convert

00:32:54.919 --> 00:32:55.639
<v Speaker 2>it.

00:32:57.240 --> 00:32:58.919
<v Speaker 0>So just So everything

00:32:59.799 --> 00:33:01.960
<v Speaker 2>you apply to POT that will be applied

00:33:01.960 --> 00:33:03.480
<v Speaker 2>to your POT controllers.

00:33:04.679 --> 00:33:07.000
<v Speaker 0>Okay. So Kyverno kind of understands that when

00:33:07.000 --> 00:33:08.785
<v Speaker 0>we say POT, we really mean kind of

00:33:08.785 --> 00:33:10.865
<v Speaker 0>anything that runs and just expands that scope

00:33:10.865 --> 00:33:13.425
<v Speaker 0>for us as a catchall. Right, yeah, you

00:33:13.425 --> 00:33:15.425
<v Speaker 1>go back to the docs for a second,

00:33:15.425 --> 00:33:18.945
<v Speaker 1>there's in writing policies there's something called AutoGen

00:33:19.185 --> 00:33:21.040
<v Speaker 1>and this can all be controlled. So you

00:33:21.040 --> 00:33:23.279
<v Speaker 1>can put annotations in your policy,

00:33:24.400 --> 00:33:28.000
<v Speaker 1>you can manage exactly which pod controllers you

00:33:28.000 --> 00:33:30.000
<v Speaker 1>wanna target. You can turn this off if

00:33:30.000 --> 00:33:31.120
<v Speaker 1>you don't want this.

00:33:31.920 --> 00:33:33.520
<v Speaker 1>But the whole idea is to,

00:33:33.840 --> 00:33:35.279
<v Speaker 1>just for usability,

00:33:35.280 --> 00:33:37.545
<v Speaker 1>you don't wanna silently fail. So this was

00:33:37.545 --> 00:33:38.345
<v Speaker 1>another

00:33:38.825 --> 00:33:42.025
<v Speaker 1>gripe or common complaint with PSPs that it

00:33:42.025 --> 00:33:44.025
<v Speaker 1>was really hard to see errors. Like when

00:33:44.025 --> 00:33:47.465
<v Speaker 1>something failed, it's hidden in events or,

00:33:47.785 --> 00:33:51.304
<v Speaker 1>you know, the logs which are not accessible

00:33:50.760 --> 00:33:51.640
<v Speaker 1>to users.

00:33:52.120 --> 00:33:55.240
<v Speaker 1>So with Kyverno, we designed this to just

00:33:55.240 --> 00:33:57.640
<v Speaker 1>translate these policies automatically.

00:34:00.520 --> 00:34:01.640
<v Speaker 0>Okay. So

00:34:03.135 --> 00:34:04.655
<v Speaker 0>is that I'm just trying to work out

00:34:04.655 --> 00:34:06.335
<v Speaker 0>what this page is saying. So this rule

00:34:06.335 --> 00:34:08.175
<v Speaker 0>says only target pods

00:34:08.255 --> 00:34:11.054
<v Speaker 0>but really that's expanded to include jobs, stateful

00:34:11.054 --> 00:34:12.735
<v Speaker 0>sets, deployments and daemon sets.

00:34:13.295 --> 00:34:13.935
<v Speaker 0>Okay.

00:34:15.775 --> 00:34:17.054
<v Speaker 0>And you said there was a way to

00:34:17.054 --> 00:34:18.940
<v Speaker 0>control that if that's not the behavior that

00:34:18.940 --> 00:34:19.580
<v Speaker 0>I want.

00:34:20.540 --> 00:34:23.100
<v Speaker 0>Oh yeah. Right. Is this it here? So

00:34:25.660 --> 00:34:27.980
<v Speaker 0>if I don't want that scope

00:34:27.980 --> 00:34:30.699
<v Speaker 0>wagering by default then I just use an

00:34:30.699 --> 00:34:33.695
<v Speaker 0>annotation on the cluster policy and I just

00:34:33.695 --> 00:34:35.135
<v Speaker 0>say auto gen controller

00:34:35.855 --> 00:34:36.335
<v Speaker 0>to

00:34:36.655 --> 00:34:39.054
<v Speaker 1>I think it's disabled or something like that.

00:34:39.054 --> 00:34:40.015
<v Speaker 1>Right? Yeah.

00:34:40.255 --> 00:34:41.614
<v Speaker 0>I'm sure it's in here somewhere and I'm

00:34:41.614 --> 00:34:43.534
<v Speaker 0>just too impatient to actually read, but there

00:34:43.534 --> 00:34:44.735
<v Speaker 0>we go. Value of none.

00:34:45.695 --> 00:34:46.335
<v Speaker 1>Yeah.

00:34:46.495 --> 00:34:49.190
<v Speaker 1>Oh, by the way, you can use kubectl

00:34:49.190 --> 00:34:49.989
<v Speaker 1>explain.

00:34:50.309 --> 00:34:52.150
<v Speaker 1>So all of the docs,

00:34:52.549 --> 00:34:55.109
<v Speaker 1>because Kyverno works with CRTs,

00:34:55.270 --> 00:34:57.349
<v Speaker 1>if you say kubectl explain

00:34:57.750 --> 00:34:58.630
<v Speaker 1>cpall.

00:34:58.710 --> 00:34:59.750
<v Speaker 1>Spec, you'll see,

00:35:00.954 --> 00:35:03.355
<v Speaker 1>you'll get help for any field directly

00:35:03.355 --> 00:35:04.875
<v Speaker 1>through kubectl itself.

00:35:07.915 --> 00:35:10.475
<v Speaker 2>It's cpal, just cpal.

00:35:12.075 --> 00:35:12.955
<v Speaker 0>Okay.

00:35:13.434 --> 00:35:15.195
<v Speaker 0>And I can just do spec.

00:35:15.755 --> 00:35:16.875
<v Speaker 2>Dot

00:35:16.560 --> 00:35:19.920
<v Speaker 2>spec, expand sapo dot spec. Yeah. There we

00:35:19.920 --> 00:35:20.400
<v Speaker 0>go.

00:35:21.120 --> 00:35:23.440
<v Speaker 0>K. Kubectl is one of the kubectl explain

00:35:23.440 --> 00:35:25.040
<v Speaker 0>is one of those commands that I really

00:35:25.040 --> 00:35:28.000
<v Speaker 0>should use but I always forget that it's

00:35:28.000 --> 00:35:29.225
<v Speaker 0>a thing. Today

00:35:30.425 --> 00:35:31.545
<v Speaker 0>I've learned something.

00:35:31.945 --> 00:35:34.425
<v Speaker 0>Alright, that's really cool, I like that. I

00:35:34.425 --> 00:35:35.785
<v Speaker 0>like that scope

00:35:35.785 --> 00:35:37.945
<v Speaker 0>widening by default. I think you know when

00:35:37.945 --> 00:35:39.705
<v Speaker 0>people say pod what they're really just meaning

00:35:39.705 --> 00:35:41.465
<v Speaker 0>is kind of they want to apply generically

00:35:41.465 --> 00:35:42.265
<v Speaker 0>to most things

00:35:42.970 --> 00:35:45.290
<v Speaker 0>but of course there are occasions where people

00:35:45.290 --> 00:35:47.050
<v Speaker 0>would want to disable that and the annotation

00:35:47.050 --> 00:35:48.890
<v Speaker 0>is there to do that as well so.

00:35:50.170 --> 00:35:50.810
<v Speaker 1>Right.

00:35:51.450 --> 00:35:53.370
<v Speaker 1>Yeah, so I think like Frank was asking

00:35:53.370 --> 00:35:56.330
<v Speaker 1>so he can write the policy or just

00:35:56.330 --> 00:35:58.535
<v Speaker 1>that you know at the pod level and

00:35:58.535 --> 00:36:01.655
<v Speaker 1>then, you know, target different controllers or let

00:36:01.655 --> 00:36:03.815
<v Speaker 1>Kyverno just generate the defaults.

00:36:05.495 --> 00:36:06.135
<v Speaker 0>Okay.

00:36:08.055 --> 00:36:08.535
<v Speaker 0>I get

00:36:09.415 --> 00:36:11.495
<v Speaker 0>should we go back to the pod security

00:36:11.340 --> 00:36:12.860
<v Speaker 0>stuff we were looking at or is there

00:36:12.860 --> 00:36:15.020
<v Speaker 1>more Yeah. So let's actually I I would

00:36:15.020 --> 00:36:17.100
<v Speaker 1>say I think, should we try one of

00:36:17.100 --> 00:36:18.140
<v Speaker 1>the bad pods?

00:36:18.460 --> 00:36:20.940
<v Speaker 1>That's a fun example. Yeah.

00:36:21.100 --> 00:36:23.260
<v Speaker 2>Yeah. If we wanna see the policy in

00:36:23.260 --> 00:36:23.900
<v Speaker 2>action,

00:36:24.060 --> 00:36:25.660
<v Speaker 2>so we can apply some workloads.

00:36:39.060 --> 00:36:41.940
<v Speaker 2>That. It's provided by another

00:36:42.100 --> 00:36:42.900
<v Speaker 2>repo.

00:36:44.500 --> 00:36:45.860
<v Speaker 2>Bad parts.

00:36:46.260 --> 00:36:47.060
<v Speaker 2>Kyverno

00:36:47.060 --> 00:36:47.780
<v Speaker 2>maybe

00:36:48.500 --> 00:36:50.580
<v Speaker 2>is it ready to share a link or

00:36:50.580 --> 00:36:53.380
<v Speaker 2>you can search for buy shop box?

00:36:56.305 --> 00:36:58.065
<v Speaker 0>Sorry. I didn't catch the last bit. Buy

00:36:58.065 --> 00:36:59.105
<v Speaker 0>who? Buy

00:36:59.745 --> 00:37:02.545
<v Speaker 2>shop, b I s h o p,

00:37:03.105 --> 00:37:03.905
<v Speaker 2>Fox,

00:37:03.985 --> 00:37:05.505
<v Speaker 2>f o x. Oh.

00:37:10.380 --> 00:37:11.339
<v Speaker 2>It's

00:37:11.339 --> 00:37:12.540
<v Speaker 2>f o x.

00:37:14.940 --> 00:37:16.140
<v Speaker 0>S o x?

00:37:16.859 --> 00:37:20.539
<v Speaker 2>F o x. F s Sorry. Like feature.

00:37:24.835 --> 00:37:26.434
<v Speaker 1>I think if you just search for bat

00:37:26.434 --> 00:37:29.954
<v Speaker 1>box by itself, will yeah. Just it should

00:37:29.954 --> 00:37:30.595
<v Speaker 1>pop up. It

00:37:33.795 --> 00:37:35.430
<v Speaker 1>yeah. There you go. The first

00:37:35.750 --> 00:37:36.470
<v Speaker 1>link.

00:37:36.950 --> 00:37:39.510
<v Speaker 1>Alright. Okay. So this is a security researcher.

00:37:39.510 --> 00:37:41.110
<v Speaker 1>It's a great resource,

00:37:41.349 --> 00:37:42.150
<v Speaker 1>by the way.

00:37:42.790 --> 00:37:43.270
<v Speaker 1>Think

00:37:43.830 --> 00:37:46.550
<v Speaker 1>so if you get to their GitHub, you'll

00:37:46.550 --> 00:37:47.910
<v Speaker 1>see all the pod definitions.

00:37:49.215 --> 00:37:51.535
<v Speaker 2>You wanna go back and the second one

00:37:51.535 --> 00:37:53.055
<v Speaker 2>is the GitHub.

00:37:53.855 --> 00:37:54.735
<v Speaker 2>There you go.

00:37:55.615 --> 00:37:59.055
<v Speaker 2>And here it provides the manifest for like

00:37:59.055 --> 00:38:01.775
<v Speaker 2>kind of kind of bad parts. It has

00:38:02.109 --> 00:38:04.830
<v Speaker 2>some of the like security field defined, for

00:38:04.830 --> 00:38:06.750
<v Speaker 2>example, host pass or

00:38:06.830 --> 00:38:09.550
<v Speaker 2>like adding other security context.

00:38:10.430 --> 00:38:12.030
<v Speaker 2>So we can use one of the manifest

00:38:12.030 --> 00:38:14.270
<v Speaker 2>here to test the Kyverno policies.

00:38:16.224 --> 00:38:18.545
<v Speaker 0>Right. Got So which one should we pick?

00:38:19.585 --> 00:38:21.744
<v Speaker 2>If you scroll up, I think we already

00:38:21.744 --> 00:38:23.665
<v Speaker 2>talked about the host paths. Right? I think

00:38:23.665 --> 00:38:24.465
<v Speaker 2>that's

00:38:24.625 --> 00:38:26.625
<v Speaker 2>probably the So bad part four? You wanna

00:38:26.625 --> 00:38:28.065
<v Speaker 2>wanna Host path a little bit? Yep.

00:38:28.464 --> 00:38:29.585
<v Speaker 0>Me zoom in a little bit.

00:38:35.400 --> 00:38:36.600
<v Speaker 2>Yeah. Just choose

00:38:36.760 --> 00:38:37.640
<v Speaker 2>whatever

00:38:37.640 --> 00:38:39.000
<v Speaker 2>the manifest one.

00:38:39.560 --> 00:38:41.160
<v Speaker 0>Okay. So if I just grab

00:38:41.800 --> 00:38:42.920
<v Speaker 0>one of these,

00:38:44.040 --> 00:38:45.240
<v Speaker 0>you can see

00:38:45.875 --> 00:38:47.395
<v Speaker 0>oh yeah. So this has got a volume

00:38:47.395 --> 00:38:49.875
<v Speaker 0>that's trying to mount the fail system into

00:38:49.875 --> 00:38:50.994
<v Speaker 0>the container.

00:38:51.555 --> 00:38:52.275
<v Speaker 0>Mhmm.

00:38:53.714 --> 00:38:55.875
<v Speaker 0>If I just copied the raw path.

00:38:56.595 --> 00:38:58.755
<v Speaker 0>Now we've just applied

00:38:59.954 --> 00:39:00.674
<v Speaker 0>the

00:39:00.840 --> 00:39:01.960
<v Speaker 0>default

00:39:01.960 --> 00:39:03.880
<v Speaker 0>security policies we applied?

00:39:04.360 --> 00:39:06.600
<v Speaker 2>Yes. So that should be we expect this

00:39:06.600 --> 00:39:07.800
<v Speaker 0>to be blocked. We're gonna get an error

00:39:07.800 --> 00:39:09.240
<v Speaker 0>here saying that I'm not allowed to do

00:39:09.240 --> 00:39:09.800
<v Speaker 0>this.

00:39:12.520 --> 00:39:13.160
<v Speaker 0>And we did.

00:39:16.005 --> 00:39:16.405
<v Speaker 0>Yeah,

00:39:18.325 --> 00:39:19.285
<v Speaker 1>there's some

00:39:19.925 --> 00:39:22.885
<v Speaker 1>I guess very bad parts which allow everything.

00:39:23.125 --> 00:39:24.725
<v Speaker 1>Yeah, I mean this is a fun thing

00:39:24.725 --> 00:39:26.245
<v Speaker 1>to play around with and

00:39:26.325 --> 00:39:27.205
<v Speaker 1>that

00:39:27.205 --> 00:39:28.890
<v Speaker 1>webpage gives a great

00:39:29.849 --> 00:39:30.730
<v Speaker 1>explanation

00:39:30.730 --> 00:39:33.770
<v Speaker 1>of why certain things could be dangerous and

00:39:33.770 --> 00:39:35.690
<v Speaker 1>even shows you how you could kind of

00:39:35.690 --> 00:39:37.290
<v Speaker 1>exploit those settings.

00:39:38.810 --> 00:39:41.785
<v Speaker 0>Okay. So this failed in multiple rules then,

00:39:41.785 --> 00:39:44.185
<v Speaker 0>or I guess multiple policies, the host path

00:39:44.185 --> 00:39:45.865
<v Speaker 0>and then there's the check container one, but

00:39:45.865 --> 00:39:47.145
<v Speaker 0>we're running that route

00:39:47.625 --> 00:39:49.705
<v Speaker 0>and all just failed. So

00:39:49.945 --> 00:39:50.665
<v Speaker 0>like,

00:39:50.905 --> 00:39:52.505
<v Speaker 0>I'm assuming we could apply more of these

00:39:52.505 --> 00:39:53.865
<v Speaker 0>and we're gonna see similar things where it

00:39:53.865 --> 00:39:55.850
<v Speaker 0>just goes through and blocking them. So.

00:39:56.410 --> 00:39:58.410
<v Speaker 1>Right. If we just take a look at

00:39:58.410 --> 00:40:00.090
<v Speaker 0>some of these default ones,

00:40:00.730 --> 00:40:02.170
<v Speaker 0>like what do you see are some of

00:40:02.170 --> 00:40:04.010
<v Speaker 0>the challenges people have with

00:40:04.170 --> 00:40:05.610
<v Speaker 0>writing these policies?

00:40:08.645 --> 00:40:11.285
<v Speaker 1>So with actually creating these policies,

00:40:11.685 --> 00:40:14.805
<v Speaker 1>it's you know, just first off, obviously,

00:40:14.805 --> 00:40:17.125
<v Speaker 1>like the syntax. Some so by the way,

00:40:17.125 --> 00:40:19.365
<v Speaker 1>I think you see like this is a

00:40:19.365 --> 00:40:21.045
<v Speaker 1>good example. Right? So there's a little bit

00:40:21.045 --> 00:40:22.085
<v Speaker 1>of decoration

00:40:22.085 --> 00:40:22.725
<v Speaker 1>around

00:40:23.150 --> 00:40:24.830
<v Speaker 1>some of these tags,

00:40:25.310 --> 00:40:27.390
<v Speaker 1>right? And it's probably good to explain what

00:40:27.390 --> 00:40:29.390
<v Speaker 1>that means and the docs go through those

00:40:29.390 --> 00:40:30.190
<v Speaker 1>in detail.

00:40:30.430 --> 00:40:32.350
<v Speaker 1>We call them internally in the code, we

00:40:32.350 --> 00:40:34.270
<v Speaker 1>just call these anchors. So

00:40:34.670 --> 00:40:35.630
<v Speaker 1>what

00:40:35.870 --> 00:40:38.350
<v Speaker 1>they do is they allow conditional logic.

00:40:38.745 --> 00:40:40.745
<v Speaker 1>So really it's saying that if

00:40:41.465 --> 00:40:43.625
<v Speaker 1>security context is defined

00:40:43.945 --> 00:40:46.265
<v Speaker 1>and if capabilities is defined,

00:40:46.265 --> 00:40:46.825
<v Speaker 1>then

00:40:47.225 --> 00:40:50.265
<v Speaker 1>you want to enforce a particular setting, right?

00:40:50.265 --> 00:40:51.545
<v Speaker 1>It has to be set to

00:40:52.089 --> 00:40:52.890
<v Speaker 1>or

00:40:53.369 --> 00:40:56.250
<v Speaker 1>the X means it should not be set,

00:40:56.490 --> 00:40:57.450
<v Speaker 1>right? So

00:40:57.690 --> 00:40:58.410
<v Speaker 1>there's

00:40:58.569 --> 00:41:00.810
<v Speaker 1>a little bit of logic like that, which

00:41:00.810 --> 00:41:03.130
<v Speaker 1>is just added sprinkled on top of the

00:41:03.130 --> 00:41:03.530
<v Speaker 1>YAML,

00:41:04.345 --> 00:41:06.185
<v Speaker 1>which makes Kyverno

00:41:06.185 --> 00:41:06.985
<v Speaker 1>handle

00:41:06.985 --> 00:41:08.025
<v Speaker 1>conditionals.

00:41:08.825 --> 00:41:10.905
<v Speaker 1>So that is something that needs to be

00:41:10.905 --> 00:41:13.465
<v Speaker 1>learned. Right? It's fairly straightforward.

00:41:13.705 --> 00:41:15.625
<v Speaker 1>In most cases you would use like the

00:41:15.625 --> 00:41:17.385
<v Speaker 1>equal to and the parentheses

00:41:17.880 --> 00:41:20.279
<v Speaker 1>to kind of mean that if that tag

00:41:20.279 --> 00:41:21.880
<v Speaker 1>is specified,

00:41:22.119 --> 00:41:24.519
<v Speaker 1>then further proceed and evaluate the rest of

00:41:24.519 --> 00:41:25.320
<v Speaker 1>the rules.

00:41:26.200 --> 00:41:27.799
<v Speaker 1>So I think that's one thing which you

00:41:27.799 --> 00:41:30.040
<v Speaker 1>know, does require some

00:41:30.519 --> 00:41:31.400
<v Speaker 1>reading up on.

00:41:34.065 --> 00:41:35.585
<v Speaker 1>There's more advanced

00:41:35.585 --> 00:41:36.385
<v Speaker 1>logic,

00:41:36.545 --> 00:41:39.345
<v Speaker 1>and advanced sort of rule definitions which can

00:41:39.345 --> 00:41:40.785
<v Speaker 1>be done and, you know, we can look

00:41:40.785 --> 00:41:42.465
<v Speaker 1>at some of those examples. If you go

00:41:42.465 --> 00:41:44.305
<v Speaker 1>back to like writing policies,

00:41:45.105 --> 00:41:48.110
<v Speaker 1>there's a number of different constructs in there

00:41:48.110 --> 00:41:49.790
<v Speaker 1>which you can use for more

00:41:50.750 --> 00:41:52.110
<v Speaker 1>advanced logic.

00:41:54.670 --> 00:41:56.990
<v Speaker 0>And I guess that's right in policies page

00:41:56.990 --> 00:41:58.990
<v Speaker 0>in the documentation for someone who's new to

00:41:58.990 --> 00:42:03.070
<v Speaker 0>Kyverno and wants to understand those little

00:42:02.625 --> 00:42:04.465
<v Speaker 0>constructs that are different to what they're familiar

00:42:04.465 --> 00:42:06.785
<v Speaker 0>with and just working through the links here

00:42:06.785 --> 00:42:08.545
<v Speaker 0>is, is that gonna introduce them to all

00:42:08.545 --> 00:42:10.145
<v Speaker 0>of those different quirks?

00:42:10.305 --> 00:42:10.865
<v Speaker 1>Yes.

00:42:11.665 --> 00:42:14.305
<v Speaker 1>Yeah, so it starts with validation and you

00:42:14.305 --> 00:42:17.279
<v Speaker 1>know this kind of conditional logic for validation,

00:42:17.279 --> 00:42:20.000
<v Speaker 1>right? And there's different ways. So of course

00:42:20.000 --> 00:42:22.080
<v Speaker 1>match and exclude and things like that

00:42:23.119 --> 00:42:24.160
<v Speaker 1>is

00:42:24.559 --> 00:42:25.760
<v Speaker 1>the first section,

00:42:26.079 --> 00:42:27.839
<v Speaker 1>then it's on validating resources.

00:42:28.555 --> 00:42:30.795
<v Speaker 1>The more advanced policies and what we've seen

00:42:30.795 --> 00:42:33.115
<v Speaker 1>folks in the community start doing is

00:42:33.915 --> 00:42:35.675
<v Speaker 1>everything from injecting

00:42:35.675 --> 00:42:36.635
<v Speaker 1>sidecars,

00:42:36.635 --> 00:42:37.915
<v Speaker 1>adding volumes,

00:42:38.795 --> 00:42:40.075
<v Speaker 1>adding standard labels.

00:42:40.740 --> 00:42:43.860
<v Speaker 1>And then the other interesting pattern that has

00:42:43.860 --> 00:42:45.060
<v Speaker 1>emerged is

00:42:45.300 --> 00:42:46.580
<v Speaker 1>using Kyverno

00:42:46.580 --> 00:42:49.380
<v Speaker 1>to to almost do like an IFTTT

00:42:49.380 --> 00:42:52.580
<v Speaker 1>for Kubernetes. Right? So if a namespace has

00:42:52.580 --> 00:42:53.780
<v Speaker 1>a certain label

00:42:53.925 --> 00:42:56.805
<v Speaker 1>and that namespace is created, then you want

00:42:56.805 --> 00:42:58.805
<v Speaker 1>to start adding some defaults.

00:42:59.925 --> 00:43:02.245
<v Speaker 1>And even like one of our community members

00:43:02.245 --> 00:43:02.965
<v Speaker 1>was

00:43:04.165 --> 00:43:05.925
<v Speaker 1>writing a policy where

00:43:06.325 --> 00:43:09.270
<v Speaker 1>if that namespace was tagged with PCI, then

00:43:09.270 --> 00:43:11.430
<v Speaker 1>they wanted to make sure workloads running in

00:43:11.430 --> 00:43:12.470
<v Speaker 1>that namespace

00:43:12.710 --> 00:43:15.670
<v Speaker 1>would have the right node selectors. So Kyverno

00:43:15.670 --> 00:43:18.390
<v Speaker 1>can automate those things through generate rules.

00:43:18.790 --> 00:43:20.550
<v Speaker 1>So there's some interesting

00:43:20.630 --> 00:43:22.710
<v Speaker 1>possibilities when you start combining

00:43:23.335 --> 00:43:25.255
<v Speaker 1>some of these policies together,

00:43:25.975 --> 00:43:27.735
<v Speaker 1>like you do a bit of validation

00:43:28.695 --> 00:43:31.735
<v Speaker 1>to enforce certain constraints and patterns,

00:43:31.975 --> 00:43:34.455
<v Speaker 1>but then you also mutate workloads and you

00:43:34.455 --> 00:43:35.895
<v Speaker 1>generate workloads or

00:43:36.609 --> 00:43:39.570
<v Speaker 1>generate other resources on the fly as required.

00:43:41.890 --> 00:43:44.690
<v Speaker 0>Okay, so I've got one question,

00:43:44.849 --> 00:43:46.930
<v Speaker 0>there's also one question from our audience which

00:43:46.930 --> 00:43:48.369
<v Speaker 0>I'll throw at you both now

00:43:48.995 --> 00:43:52.035
<v Speaker 0>and then curious then if we can do

00:43:52.035 --> 00:43:53.555
<v Speaker 0>a couple more hands on things where we

00:43:53.555 --> 00:43:56.515
<v Speaker 0>look at the auditing aspects and the mutation

00:43:56.515 --> 00:43:59.795
<v Speaker 0>aspects of it and then we, I think

00:43:59.795 --> 00:44:02.579
<v Speaker 0>that shooting has slightly more advanced demos that

00:44:02.579 --> 00:44:03.859
<v Speaker 0>may be interesting to take a look at

00:44:03.859 --> 00:44:05.220
<v Speaker 0>as well. So,

00:44:07.220 --> 00:44:08.339
<v Speaker 0>Are we good? Yeah.

00:44:08.579 --> 00:44:09.540
<v Speaker 0>All right. Yeah.

00:44:10.260 --> 00:44:10.820
<v Speaker 0>So

00:44:11.779 --> 00:44:13.140
<v Speaker 0>my question is just about,

00:44:14.065 --> 00:44:15.585
<v Speaker 0>you know, I can see all the power

00:44:15.585 --> 00:44:17.425
<v Speaker 0>and the flexibility and kind of why I

00:44:17.425 --> 00:44:18.625
<v Speaker 0>want this and what I wanna do, you

00:44:18.625 --> 00:44:20.225
<v Speaker 0>know, I've already got all these ideas and

00:44:20.225 --> 00:44:21.585
<v Speaker 0>the first thing that comes to my head

00:44:21.585 --> 00:44:22.305
<v Speaker 0>is like,

00:44:22.865 --> 00:44:24.065
<v Speaker 0>what is the right

00:44:24.465 --> 00:44:27.585
<v Speaker 0>level of grouping these policies together

00:44:28.420 --> 00:44:29.940
<v Speaker 0>that really makes sense as I haven't tried

00:44:29.940 --> 00:44:31.700
<v Speaker 0>and tested there and let me try and

00:44:31.700 --> 00:44:33.140
<v Speaker 0>ask that with an example.

00:44:33.540 --> 00:44:35.140
<v Speaker 0>You know as an operator of a Kubernetes

00:44:35.140 --> 00:44:37.300
<v Speaker 0>cluster, I wanna enforce that there's a team

00:44:37.300 --> 00:44:40.020
<v Speaker 0>annotation on our label on all resources so

00:44:40.020 --> 00:44:41.700
<v Speaker 0>that I know which team gets paged for

00:44:41.700 --> 00:44:43.845
<v Speaker 0>whatever resource. But I also want to make

00:44:43.845 --> 00:44:45.845
<v Speaker 0>sure that they have some security context there,

00:44:45.845 --> 00:44:47.205
<v Speaker 0>they don't run as root. I also wanna

00:44:47.205 --> 00:44:48.165
<v Speaker 0>make sure that

00:44:48.725 --> 00:44:50.245
<v Speaker 0>they all have liveness

00:44:50.245 --> 00:44:52.085
<v Speaker 0>probes. Would

00:44:52.085 --> 00:44:54.005
<v Speaker 0>would I just have one monster policy that

00:44:54.005 --> 00:44:55.605
<v Speaker 0>I apply and say this is the policy?

00:44:55.605 --> 00:44:57.605
<v Speaker 0>Do I have one policy per one check?

00:44:58.020 --> 00:44:59.860
<v Speaker 0>Do I group some checks together? Have you

00:44:59.860 --> 00:45:01.780
<v Speaker 0>found this is a right or wrong way

00:45:01.780 --> 00:45:02.660
<v Speaker 0>to do that?

00:45:05.780 --> 00:45:08.180
<v Speaker 1>So there certainly are some best practices, right,

00:45:08.180 --> 00:45:10.500
<v Speaker 1>and kind of tying it just into code

00:45:10.500 --> 00:45:11.300
<v Speaker 1>constructs,

00:45:11.904 --> 00:45:13.904
<v Speaker 1>You know in any programming language of your

00:45:13.904 --> 00:45:16.305
<v Speaker 1>choice, you typically have something like modules or

00:45:16.305 --> 00:45:17.105
<v Speaker 1>packages.

00:45:17.744 --> 00:45:20.545
<v Speaker 1>You have then within those packages you have

00:45:20.545 --> 00:45:22.305
<v Speaker 1>files and within the file you could have

00:45:22.305 --> 00:45:24.810
<v Speaker 1>like methods or declarations,

00:45:24.810 --> 00:45:28.170
<v Speaker 1>right? So similarly with Kyverno and kind of

00:45:28.170 --> 00:45:29.610
<v Speaker 1>just thinking treating

00:45:29.610 --> 00:45:31.850
<v Speaker 1>policies as code as much as possible, you

00:45:31.850 --> 00:45:34.570
<v Speaker 1>would probably wanna follow that similar type of

00:45:34.570 --> 00:45:35.530
<v Speaker 1>organization

00:45:35.690 --> 00:45:38.010
<v Speaker 1>where you could have several Git repos with

00:45:38.010 --> 00:45:38.490
<v Speaker 1>policies.

00:45:39.555 --> 00:45:41.555
<v Speaker 1>You could have different packages

00:45:41.555 --> 00:45:44.115
<v Speaker 1>in those or different folders with different

00:45:44.355 --> 00:45:45.555
<v Speaker 1>types of policies.

00:45:45.875 --> 00:45:47.875
<v Speaker 1>And within that you could then group together

00:45:47.875 --> 00:45:49.395
<v Speaker 1>similar constructs.

00:45:49.635 --> 00:45:51.075
<v Speaker 1>So you can kind of start thinking of

00:45:51.075 --> 00:45:53.474
<v Speaker 1>policies based on the unit of like, and

00:45:53.474 --> 00:45:55.280
<v Speaker 1>you can of course version all of this

00:45:55.280 --> 00:45:56.160
<v Speaker 1>too and

00:45:56.320 --> 00:45:59.840
<v Speaker 1>use policies with either Flux or Helm or

00:45:59.840 --> 00:46:02.480
<v Speaker 1>whatever is your favorite way of deploying

00:46:02.560 --> 00:46:04.320
<v Speaker 1>stuff into clusters, right?

00:46:04.960 --> 00:46:06.720
<v Speaker 1>So I think that's a reasonable

00:46:07.760 --> 00:46:10.720
<v Speaker 1>way of organizing and

00:46:10.055 --> 00:46:11.095
<v Speaker 1>approaching things.

00:46:11.335 --> 00:46:12.695
<v Speaker 1>Like as you saw in

00:46:13.335 --> 00:46:16.455
<v Speaker 1>the library, we have organized things as a

00:46:16.455 --> 00:46:19.255
<v Speaker 1>pod security policy, where you would choose your

00:46:19.255 --> 00:46:19.895
<v Speaker 1>level

00:46:20.375 --> 00:46:23.575
<v Speaker 1>of security that you want and then entire

00:46:23.815 --> 00:46:25.015
<v Speaker 1>policy gets

00:46:25.095 --> 00:46:27.100
<v Speaker 1>to customize will just get pulled as a

00:46:27.100 --> 00:46:28.140
<v Speaker 1>single YAML,

00:46:28.300 --> 00:46:29.820
<v Speaker 1>which is fine. But

00:46:30.220 --> 00:46:32.620
<v Speaker 1>if you're trying to maintain those policies, it's

00:46:32.620 --> 00:46:36.060
<v Speaker 1>much easier to do things as smaller units

00:46:36.860 --> 00:46:38.860
<v Speaker 1>and you're just changing that

00:46:39.505 --> 00:46:40.545
<v Speaker 1>one smaller

00:46:41.345 --> 00:46:42.785
<v Speaker 1>policy rather than

00:46:43.585 --> 00:46:45.825
<v Speaker 1>trying to manage all policies as a single

00:46:45.825 --> 00:46:46.465
<v Speaker 1>file.

00:46:46.865 --> 00:46:48.625
<v Speaker 1>So I think there's no, like you said,

00:46:48.625 --> 00:46:50.705
<v Speaker 1>there's no real right or wrong answer. It's

00:46:50.705 --> 00:46:52.305
<v Speaker 1>just organizing

00:46:52.305 --> 00:46:55.030
<v Speaker 1>it and using coding best practices to

00:46:55.670 --> 00:46:58.069
<v Speaker 1>you know, kind of organize things into groups

00:46:58.069 --> 00:46:59.109
<v Speaker 1>and packages

00:46:59.510 --> 00:47:02.070
<v Speaker 1>and then within that dividing up further.

00:47:02.789 --> 00:47:04.630
<v Speaker 0>So would it be fair to say then

00:47:04.630 --> 00:47:06.549
<v Speaker 0>that when I'm writing policies

00:47:06.765 --> 00:47:08.445
<v Speaker 0>is that the

00:47:08.605 --> 00:47:11.484
<v Speaker 0>grouping of them is a human a human

00:47:11.484 --> 00:47:13.405
<v Speaker 0>thing and not a technology

00:47:13.964 --> 00:47:16.125
<v Speaker 0>problem? Like is there a performance problem if

00:47:16.125 --> 00:47:17.885
<v Speaker 0>I have a thousand policies with one check

00:47:17.885 --> 00:47:19.885
<v Speaker 0>versus one policy with a thousand checks?

00:47:22.400 --> 00:47:24.640
<v Speaker 1>I don't I don't see I

00:47:25.200 --> 00:47:28.480
<v Speaker 1>think so internally and shooting correct me if

00:47:28.480 --> 00:47:30.800
<v Speaker 1>I'm wrong, but we like the engine just

00:47:30.800 --> 00:47:34.080
<v Speaker 1>explodes everything into rules anyways. Right? And we're

00:47:34.080 --> 00:47:34.960
<v Speaker 1>caching rules.

00:47:37.625 --> 00:47:39.705
<v Speaker 2>Yeah. We're caching policies

00:47:39.705 --> 00:47:42.425
<v Speaker 2>actually, but in the engine, we're evaluating

00:47:42.425 --> 00:47:44.985
<v Speaker 2>per rule. So whenever your rule matches, it

00:47:44.985 --> 00:47:47.705
<v Speaker 2>doesn't matter if it's defined in one policy

00:47:47.705 --> 00:47:49.670
<v Speaker 2>or in a thousand policies.

00:47:49.910 --> 00:47:51.589
<v Speaker 0>Right. Alright, perfect.

00:47:52.150 --> 00:47:55.269
<v Speaker 0>Okay, let's take our audience questions. So Mozz

00:47:55.269 --> 00:47:56.150
<v Speaker 0>has asked

00:47:56.630 --> 00:47:59.029
<v Speaker 0>if I wanna have a cluster level policy,

00:47:59.029 --> 00:47:59.510
<v Speaker 0>but

00:47:59.829 --> 00:48:02.869
<v Speaker 0>met or you know, have special provisions for

00:48:02.869 --> 00:48:04.865
<v Speaker 0>cube system and any other name space, is

00:48:04.865 --> 00:48:06.065
<v Speaker 0>that possible to do?

00:48:08.625 --> 00:48:09.265
<v Speaker 2>Yeah,

00:48:09.744 --> 00:48:12.704
<v Speaker 2>it is possible to configure that. We have

00:48:12.704 --> 00:48:15.665
<v Speaker 2>the exclude block in each in every pop

00:48:15.665 --> 00:48:18.305
<v Speaker 2>cluster policies and namespace policies.

00:48:18.670 --> 00:48:21.870
<v Speaker 2>And if we wanna exclude some resources like

00:48:21.870 --> 00:48:23.870
<v Speaker 2>namespaces or the kinds globally,

00:48:24.830 --> 00:48:27.150
<v Speaker 2>we also have a config map that is

00:48:27.150 --> 00:48:29.550
<v Speaker 2>available for you to configure

00:48:29.550 --> 00:48:30.270
<v Speaker 2>any

00:48:30.430 --> 00:48:32.750
<v Speaker 2>re excluded list globally.

00:48:33.924 --> 00:48:35.924
<v Speaker 0>Would it be right with my naive assumption

00:48:35.924 --> 00:48:37.684
<v Speaker 0>and to say that the exclude is the

00:48:37.684 --> 00:48:40.005
<v Speaker 0>same format as this match here

00:48:40.165 --> 00:48:42.405
<v Speaker 0>with just Exactly. Okay. Cool. So you could

00:48:42.405 --> 00:48:43.365
<v Speaker 0>just copy

00:48:43.365 --> 00:48:45.800
<v Speaker 0>this, have match switch to exclude and then

00:48:45.800 --> 00:48:47.720
<v Speaker 0>add the name of your namespace.

00:48:47.960 --> 00:48:49.000
<v Speaker 0>Magic. Right.

00:48:50.040 --> 00:48:52.760
<v Speaker 0>Okay. So let's

00:48:53.320 --> 00:48:55.560
<v Speaker 0>let's play with an audit policy to see

00:48:55.560 --> 00:48:57.960
<v Speaker 0>how that works. I'm also very curious about

00:48:57.960 --> 00:49:00.040
<v Speaker 0>the background parameter we've seen earlier. Could we

00:49:00.040 --> 00:49:01.240
<v Speaker 0>maybe touch on that a little bit?

00:49:02.815 --> 00:49:03.775
<v Speaker 2>Yep. Sure.

00:49:06.575 --> 00:49:09.135
<v Speaker 2>Think you already have a policy installed,

00:49:09.135 --> 00:49:11.855
<v Speaker 2>but in in false mode in this case.

00:49:12.815 --> 00:49:15.855
<v Speaker 0>So could we write a policy that's an

00:49:15.120 --> 00:49:17.280
<v Speaker 0>order only, like a really silly policy that

00:49:17.280 --> 00:49:19.200
<v Speaker 0>checks the existence of a of a label.

00:49:19.200 --> 00:49:20.800
<v Speaker 0>Why don't we modify that, run it in

00:49:20.800 --> 00:49:23.120
<v Speaker 0>audit mode, and then see how we interact

00:49:23.120 --> 00:49:23.760
<v Speaker 0>with that?

00:49:24.400 --> 00:49:26.240
<v Speaker 1>Yeah. Yeah. So one other yeah.

00:49:27.840 --> 00:49:28.720
<v Speaker 1>Go ahead. Sorry. Go ahead.

00:49:29.454 --> 00:49:32.015
<v Speaker 2>No, no, you go ahead. So yeah, one

00:49:32.015 --> 00:49:34.494
<v Speaker 1>other thing, so any of these pod security

00:49:34.494 --> 00:49:37.775
<v Speaker 1>policies you applied, like for existing resources, Kyverno

00:49:37.775 --> 00:49:39.935
<v Speaker 1>is designed not to impact them.

00:49:40.335 --> 00:49:42.015
<v Speaker 1>So if you go back to your cluster

00:49:42.015 --> 00:49:44.120
<v Speaker 1>and just do like a get

00:49:44.680 --> 00:49:46.600
<v Speaker 1>policy report or polr,

00:49:46.600 --> 00:49:47.960
<v Speaker 1>p o l r,

00:49:49.320 --> 00:49:50.840
<v Speaker 1>you know, and do a minus a at

00:49:50.840 --> 00:49:52.520
<v Speaker 1>the end, it should show you if it

00:49:52.520 --> 00:49:54.280
<v Speaker 1>picked up. So there you go. You already

00:49:54.280 --> 00:49:54.760
<v Speaker 1>have some

00:49:55.325 --> 00:49:58.445
<v Speaker 1>reports created for your existing workloads.

00:49:58.925 --> 00:50:01.405
<v Speaker 1>So because Kyverno typically operates as an admission

00:50:01.405 --> 00:50:03.965
<v Speaker 1>controller, like it blocked in a new

00:50:04.445 --> 00:50:05.885
<v Speaker 1>pods which violated.

00:50:05.965 --> 00:50:08.045
<v Speaker 1>But if you had a pod running which

00:50:08.045 --> 00:50:08.925
<v Speaker 1>had a problem,

00:50:10.320 --> 00:50:11.200
<v Speaker 1>it will

00:50:11.520 --> 00:50:14.400
<v Speaker 1>it will just create a report. It won't

00:50:14.400 --> 00:50:17.200
<v Speaker 1>take down that pod or impact your existing

00:50:17.200 --> 00:50:18.000
<v Speaker 1>workloads.

00:50:19.280 --> 00:50:21.360
<v Speaker 1>So so yeah, this is an example of

00:50:21.360 --> 00:50:23.040
<v Speaker 1>one or we could write a new one

00:50:23.040 --> 00:50:25.305
<v Speaker 1>and apply it and see, you know, you

00:50:25.305 --> 00:50:27.465
<v Speaker 1>should also, it will produce a report.

00:50:27.945 --> 00:50:30.025
<v Speaker 0>Okay, so when I have a policy in

00:50:30.025 --> 00:50:32.425
<v Speaker 0>my cluster, whereas on audit mode instead of

00:50:32.425 --> 00:50:33.225
<v Speaker 0>enforce

00:50:33.464 --> 00:50:35.704
<v Speaker 0>there, there's no log lines from the admission

00:50:35.704 --> 00:50:37.224
<v Speaker 0>controller or anything like that. It just goes

00:50:37.224 --> 00:50:39.065
<v Speaker 0>straight into a report, which I should be

00:50:39.065 --> 00:50:40.185
<v Speaker 0>reviewing

00:50:40.170 --> 00:50:40.810
<v Speaker 0>there.

00:50:42.089 --> 00:50:44.890
<v Speaker 0>So I can imagine now if I wanted

00:50:44.890 --> 00:50:46.730
<v Speaker 0>an audit policy that says,

00:50:47.530 --> 00:50:49.770
<v Speaker 0>you know, ideally container shouldn't run as a

00:50:49.770 --> 00:50:51.609
<v Speaker 0>root user. If I wanted to write that

00:50:51.609 --> 00:50:52.890
<v Speaker 0>report to my

00:50:53.210 --> 00:50:55.130
<v Speaker 0>my Slack channel every time there was a

00:50:55.130 --> 00:50:57.115
<v Speaker 0>violation of that, Is that something that would

00:50:57.115 --> 00:50:58.715
<v Speaker 0>be possible using Kyverno?

00:50:59.515 --> 00:51:03.195
<v Speaker 1>So Kyverno doesn't do that notification automatically,

00:51:03.195 --> 00:51:05.115
<v Speaker 1>but there are you know other tools which

00:51:05.115 --> 00:51:06.475
<v Speaker 1>can watch resources

00:51:07.195 --> 00:51:09.515
<v Speaker 1>and then you know push notifications.

00:51:09.675 --> 00:51:11.435
<v Speaker 1>So you could use any one of those

00:51:11.435 --> 00:51:11.675
<v Speaker 1>tools.

00:51:12.320 --> 00:51:15.120
<v Speaker 1>So, and Kyverno also produces in addition to

00:51:15.120 --> 00:51:17.680
<v Speaker 1>the report, there are events which are sent

00:51:17.680 --> 00:51:19.840
<v Speaker 1>out for policy violation,

00:51:20.880 --> 00:51:21.680
<v Speaker 1>as well as

00:51:22.080 --> 00:51:24.320
<v Speaker 1>what there is a feature request

00:51:24.960 --> 00:51:27.040
<v Speaker 1>that I believe it was one dot 19

00:51:27.040 --> 00:51:29.545
<v Speaker 1>or one dot 20 that the API server

00:51:29.545 --> 00:51:31.305
<v Speaker 1>can now return warnings,

00:51:31.625 --> 00:51:33.465
<v Speaker 1>right? So for violations,

00:51:33.545 --> 00:51:35.305
<v Speaker 1>there was a feature request to

00:51:36.105 --> 00:51:39.145
<v Speaker 1>return back warnings on API server but allow

00:51:39.145 --> 00:51:39.545
<v Speaker 1>the

00:51:40.280 --> 00:51:41.960
<v Speaker 1>configuration to go through.

00:51:42.359 --> 00:51:44.599
<v Speaker 1>Whereas if you have the enforced mode, it

00:51:44.599 --> 00:51:46.920
<v Speaker 1>will just block and reject the configuration.

00:51:47.400 --> 00:51:48.600
<v Speaker 0>Got it. Okay.

00:51:48.920 --> 00:51:51.400
<v Speaker 0>I'm curious. If if I describe this policy

00:51:51.400 --> 00:51:53.000
<v Speaker 0>report, will it show me the

00:51:53.720 --> 00:51:55.055
<v Speaker 0>Yeah. Violations?

00:51:55.375 --> 00:51:56.415
<v Speaker 1>Yes.

00:51:58.415 --> 00:51:59.135
<v Speaker 0>I

00:51:59.375 --> 00:52:00.895
<v Speaker 0>had no idea where that was gonna work,

00:52:00.895 --> 00:52:02.735
<v Speaker 0>but my intuition wanted it to, and I'm

00:52:02.735 --> 00:52:03.935
<v Speaker 0>so glad that it did.

00:52:04.415 --> 00:52:06.415
<v Speaker 1>Yeah. So in fact, there's a one liner.

00:52:06.415 --> 00:52:08.250
<v Speaker 1>It's somewhere in the docs, if you go

00:52:08.250 --> 00:52:10.570
<v Speaker 1>to policy report, there's a one line command

00:52:10.570 --> 00:52:12.810
<v Speaker 1>which is handy to use to just grab

00:52:13.130 --> 00:52:14.250
<v Speaker 1>the violations.

00:52:15.930 --> 00:52:18.010
<v Speaker 1>And I think scroll down a little bit.

00:52:18.010 --> 00:52:21.050
<v Speaker 1>It's like, yeah, viewing violations. So just grab

00:52:20.355 --> 00:52:21.395
<v Speaker 1>that command.

00:52:24.994 --> 00:52:25.715
<v Speaker 0>Perfect.

00:52:26.755 --> 00:52:29.235
<v Speaker 1>And yeah. That makes it simpler.

00:52:30.195 --> 00:52:31.715
<v Speaker 0>Yeah. So that that's quite a good way.

00:52:31.715 --> 00:52:33.395
<v Speaker 0>So I I could and I'm sure other

00:52:33.395 --> 00:52:35.795
<v Speaker 0>people have already written, but controllers that have

00:52:35.795 --> 00:52:38.890
<v Speaker 0>a watch on this policy reports like the

00:52:38.890 --> 00:52:41.050
<v Speaker 0>alerting and notifying and stuff like that.

00:52:42.170 --> 00:52:42.730
<v Speaker 0>Right.

00:52:43.930 --> 00:52:44.570
<v Speaker 0>Okay.

00:52:45.130 --> 00:52:46.410
<v Speaker 0>Now when we were

00:52:46.730 --> 00:52:47.930
<v Speaker 0>applying

00:52:48.090 --> 00:52:50.410
<v Speaker 0>one of those pod security policies, I'm sure

00:52:50.410 --> 00:52:51.955
<v Speaker 0>it was in here somewhere. There was something

00:52:51.955 --> 00:52:53.635
<v Speaker 0>that said background false.

00:52:54.755 --> 00:52:56.515
<v Speaker 0>Did we I don't think we covered background

00:52:56.515 --> 00:52:57.635
<v Speaker 0>scans, did we?

00:52:58.994 --> 00:53:01.795
<v Speaker 1>No. We have not. Shooting you wanna take

00:53:01.795 --> 00:53:01.955
<v Speaker 1>that?

00:53:03.460 --> 00:53:04.740
<v Speaker 2>The background

00:53:05.060 --> 00:53:05.540
<v Speaker 2>scans

00:53:05.860 --> 00:53:07.540
<v Speaker 2>actually, it's gonna

00:53:07.700 --> 00:53:10.420
<v Speaker 2>produce a policy report that we already showed.

00:53:10.420 --> 00:53:12.100
<v Speaker 2>We already see that. Alright.

00:53:12.260 --> 00:53:15.460
<v Speaker 2>So it is physically report the violations of

00:53:15.460 --> 00:53:16.500
<v Speaker 2>your existing

00:53:16.500 --> 00:53:17.140
<v Speaker 2>resources.

00:53:18.405 --> 00:53:21.125
<v Speaker 0>Okay. If you turn this background scan too

00:53:21.125 --> 00:53:23.925
<v Speaker 2>fast, then we will not do the audit

00:53:23.925 --> 00:53:26.725
<v Speaker 2>in the background, but it by default, is

00:53:26.725 --> 00:53:27.685
<v Speaker 2>set to true.

00:53:28.725 --> 00:53:31.220
<v Speaker 1>Yeah. So one constraint to also keep in

00:53:31.220 --> 00:53:32.420
<v Speaker 1>mind is,

00:53:33.540 --> 00:53:35.380
<v Speaker 1>you know, so to by the way, Kyverno

00:53:35.380 --> 00:53:37.859
<v Speaker 1>has a CLI, so you can apply policies

00:53:37.859 --> 00:53:41.780
<v Speaker 1>in your CICD pipeline, right, which, is fairly

00:53:41.780 --> 00:53:42.500
<v Speaker 1>handy

00:53:42.820 --> 00:53:45.395
<v Speaker 1>if you want to, you know, just block,

00:53:45.635 --> 00:53:48.515
<v Speaker 1>things from being promoted in a build, etcetera,

00:53:48.515 --> 00:53:49.875
<v Speaker 1>or in a GitHub action.

00:53:51.635 --> 00:53:52.195
<v Speaker 1>So

00:53:52.835 --> 00:53:54.755
<v Speaker 1>the the one of the things we do

00:53:54.755 --> 00:53:56.930
<v Speaker 1>with this background flag is,

00:53:57.730 --> 00:53:59.890
<v Speaker 1>for certain policies if, you know, you can

00:53:59.890 --> 00:54:00.930
<v Speaker 1>have variables,

00:54:01.730 --> 00:54:04.849
<v Speaker 1>which either those variables can be populated

00:54:04.849 --> 00:54:05.490
<v Speaker 1>through

00:54:06.289 --> 00:54:07.730
<v Speaker 1>admission request data

00:54:08.175 --> 00:54:10.175
<v Speaker 1>or ConfigMap lookups

00:54:11.055 --> 00:54:13.295
<v Speaker 1>or even, you know, calls to the API

00:54:13.295 --> 00:54:14.095
<v Speaker 1>server.

00:54:14.175 --> 00:54:16.495
<v Speaker 1>But obviously in your CICD pipeline, you may

00:54:16.495 --> 00:54:18.335
<v Speaker 1>not have the ability to call an API

00:54:18.335 --> 00:54:19.055
<v Speaker 1>server.

00:54:19.215 --> 00:54:20.735
<v Speaker 1>So for those policies,

00:54:20.815 --> 00:54:22.495
<v Speaker 1>Kyverno will enforce that background

00:54:23.140 --> 00:54:25.619
<v Speaker 1>has to be set to false because that

00:54:25.619 --> 00:54:27.300
<v Speaker 1>policy cannot apply,

00:54:27.780 --> 00:54:29.780
<v Speaker 1>you know, that you cannot apply it sort

00:54:29.780 --> 00:54:31.060
<v Speaker 1>of just given your

00:54:31.380 --> 00:54:34.260
<v Speaker 1>so sorry, I take that back. For variables

00:54:34.260 --> 00:54:36.660
<v Speaker 1>which are not coming from the admission request,

00:54:36.660 --> 00:54:38.775
<v Speaker 1>background has to be set to false

00:54:38.935 --> 00:54:42.055
<v Speaker 1>because you don't have the admission request data

00:54:42.135 --> 00:54:43.575
<v Speaker 1>at that point, right?

00:54:44.295 --> 00:54:45.815
<v Speaker 1>So that's enforced

00:54:46.375 --> 00:54:49.015
<v Speaker 1>by when the policy is validated itself.

00:54:50.135 --> 00:54:53.060
<v Speaker 1>And you can choose then which policies run-in

00:54:53.060 --> 00:54:54.180
<v Speaker 1>background mode

00:54:54.420 --> 00:54:56.260
<v Speaker 1>with that one constraint

00:54:56.820 --> 00:54:59.140
<v Speaker 1>of any admission request.

00:54:59.380 --> 00:55:02.020
<v Speaker 1>Data you want to use within your policies

00:55:02.020 --> 00:55:04.820
<v Speaker 1>can only be done in the webhook or

00:55:04.820 --> 00:55:06.660
<v Speaker 1>the admission control mode.

00:55:09.155 --> 00:55:10.995
<v Speaker 1>Okay. Does that yeah. Don't know if I

00:55:10.995 --> 00:55:13.475
<v Speaker 1>explained that well enough or hopefully

00:55:13.475 --> 00:55:15.315
<v Speaker 1>it makes sense. No. I I think I

00:55:15.315 --> 00:55:16.915
<v Speaker 0>got that. Yeah. I think that made sense

00:55:16.915 --> 00:55:17.475
<v Speaker 0>to me.

00:55:18.755 --> 00:55:19.475
<v Speaker 0>Does

00:55:19.635 --> 00:55:20.915
<v Speaker 0>Kyverno

00:55:21.789 --> 00:55:24.270
<v Speaker 0>do people publish policies to the artifact hub

00:55:24.270 --> 00:55:26.670
<v Speaker 0>or is that something that exists now or

00:55:26.670 --> 00:55:27.390
<v Speaker 0>is coming?

00:55:29.390 --> 00:55:32.190
<v Speaker 1>So we're working on a process to publish

00:55:32.190 --> 00:55:34.750
<v Speaker 1>policies into

00:55:33.585 --> 00:55:35.105
<v Speaker 1>Git repo itself.

00:55:35.345 --> 00:55:37.185
<v Speaker 1>So there's a kyverno

00:55:37.185 --> 00:55:39.745
<v Speaker 1>slash policies as the underlying Git repo.

00:55:40.145 --> 00:55:41.825
<v Speaker 1>And the reason why we're doing that right

00:55:41.825 --> 00:55:43.665
<v Speaker 1>now is because we automatically

00:55:43.665 --> 00:55:45.585
<v Speaker 1>generate these web pages.

00:55:45.905 --> 00:55:47.825
<v Speaker 1>If you click on like that policies link

00:55:47.825 --> 00:55:48.945
<v Speaker 1>and you saw those three

00:55:49.640 --> 00:55:50.440
<v Speaker 1>groups,

00:55:50.680 --> 00:55:52.840
<v Speaker 1>there is you know, one of our community

00:55:52.840 --> 00:55:55.560
<v Speaker 1>members, he's working on a better way to

00:55:55.560 --> 00:55:59.240
<v Speaker 1>index these using those annotations and search these

00:55:59.240 --> 00:56:00.120
<v Speaker 1>policies,

00:56:01.400 --> 00:56:03.075
<v Speaker 1>which will

00:56:03.155 --> 00:56:04.035
<v Speaker 1>make it

00:56:04.435 --> 00:56:06.515
<v Speaker 1>very easy to kind of search for different

00:56:06.515 --> 00:56:10.035
<v Speaker 1>criteria and different examples of policies

00:56:10.275 --> 00:56:11.235
<v Speaker 1>find them.

00:56:11.475 --> 00:56:14.435
<v Speaker 1>So that's what we're thinking right now. One

00:56:14.435 --> 00:56:16.355
<v Speaker 1>other thing to add is in the chart,

00:56:16.980 --> 00:56:18.740
<v Speaker 1>if you install the Helm chart, there is

00:56:18.740 --> 00:56:19.860
<v Speaker 1>an option to

00:56:20.260 --> 00:56:22.260
<v Speaker 1>by default it

00:56:22.580 --> 00:56:25.380
<v Speaker 1>installs the default pod security policies.

00:56:25.460 --> 00:56:27.460
<v Speaker 1>You can turn that off or you can

00:56:27.460 --> 00:56:29.940
<v Speaker 1>set custom policies which was also another

00:56:30.295 --> 00:56:32.775
<v Speaker 1>community contribution which came in recently.

00:56:33.335 --> 00:56:33.895
<v Speaker 1>So

00:56:34.135 --> 00:56:36.615
<v Speaker 1>that's how we're so we hadn't thought about

00:56:36.615 --> 00:56:37.895
<v Speaker 1>just

00:56:37.895 --> 00:56:39.335
<v Speaker 1>publishing policies

00:56:39.735 --> 00:56:43.175
<v Speaker 1>directly on Artifact Hub but we Kyverno itself

00:56:43.175 --> 00:56:45.290
<v Speaker 1>as a Hemp chart is available there.

00:56:46.490 --> 00:56:47.690
<v Speaker 0>Okay. Awesome.

00:56:48.090 --> 00:56:48.970
<v Speaker 0>Well, we

00:56:49.690 --> 00:56:52.170
<v Speaker 0>are approaching about the hour now. So shall

00:56:52.170 --> 00:56:54.490
<v Speaker 0>we take a look at the demo that

00:56:54.490 --> 00:56:55.610
<v Speaker 0>you have prepared, shooting?

00:56:57.755 --> 00:56:58.715
<v Speaker 2>No. Actually,

00:56:59.195 --> 00:57:01.435
<v Speaker 2>what I wanna demo is the PSP which

00:57:01.435 --> 00:57:03.515
<v Speaker 2>we already went through. Alright. And I think

00:57:03.515 --> 00:57:04.315
<v Speaker 2>there are two

00:57:05.275 --> 00:57:07.835
<v Speaker 2>there are other two interesting features that Kyverno

00:57:07.835 --> 00:57:10.875
<v Speaker 2>can do as the mutate and generate ability.

00:57:12.300 --> 00:57:14.540
<v Speaker 0>Can walk through an example of that? Sorry.

00:57:14.540 --> 00:57:15.900
<v Speaker 0>My dog is going to say, don't know

00:57:15.900 --> 00:57:16.780
<v Speaker 0>if you can hear me.

00:57:17.980 --> 00:57:19.740
<v Speaker 1>The dinner time or

00:57:20.620 --> 00:57:22.460
<v Speaker 0>think there's delivery at the door. I'm not

00:57:22.460 --> 00:57:25.695
<v Speaker 0>sure. Oh, okay. Alright. So yeah. In fact

00:57:25.695 --> 00:57:27.775
<v Speaker 0>I kind of skipped over this earlier because

00:57:27.775 --> 00:57:29.215
<v Speaker 0>I forgot to mention again, but I did

00:57:29.215 --> 00:57:31.055
<v Speaker 0>see the variables, we did mention them in

00:57:31.055 --> 00:57:32.495
<v Speaker 0>passing, but maybe if we could take a

00:57:32.495 --> 00:57:34.415
<v Speaker 0>look at generating variables and

00:57:35.055 --> 00:57:36.415
<v Speaker 0>I've had this whole bunch of stuff on

00:57:36.415 --> 00:57:37.690
<v Speaker 0>this sidebar. I could keep you here for

00:57:37.690 --> 00:57:39.290
<v Speaker 0>the next few hours if you really want.

00:57:39.290 --> 00:57:39.690
<v Speaker 0>But

00:57:40.570 --> 00:57:42.890
<v Speaker 0>why don't we talk about the generate rules

00:57:42.890 --> 00:57:45.290
<v Speaker 0>then? What what kind of functionality does this

00:57:45.290 --> 00:57:46.410
<v Speaker 0>enable for people?

00:57:48.330 --> 00:57:50.730
<v Speaker 2>Yeah. Yeah. I can take this one. The

00:57:50.730 --> 00:57:51.930
<v Speaker 2>generate policy,

00:57:52.185 --> 00:57:55.465
<v Speaker 2>so basically, you will trick it'll be triggered

00:57:55.465 --> 00:57:56.105
<v Speaker 2>as

00:57:56.265 --> 00:57:59.145
<v Speaker 2>if you have any admission webhook common.

00:57:59.305 --> 00:58:02.185
<v Speaker 2>And then the generate policy will triggered,

00:58:02.505 --> 00:58:02.985
<v Speaker 2>and

00:58:03.545 --> 00:58:04.585
<v Speaker 2>you can

00:58:05.000 --> 00:58:07.640
<v Speaker 2>physically define any kind of resource to be

00:58:07.640 --> 00:58:09.640
<v Speaker 2>generated to your cluster.

00:58:09.800 --> 00:58:12.839
<v Speaker 2>And this way, for example, you can automatically

00:58:12.839 --> 00:58:15.880
<v Speaker 2>build your default modification environment

00:58:16.280 --> 00:58:19.605
<v Speaker 2>if a new namespace is created or else

00:58:19.605 --> 00:58:21.845
<v Speaker 2>it can generate some of the defaults

00:58:22.325 --> 00:58:23.685
<v Speaker 2>like our resources.

00:58:24.085 --> 00:58:26.565
<v Speaker 2>For example, the network policies or the limit

00:58:26.565 --> 00:58:27.285
<v Speaker 2>range,

00:58:27.445 --> 00:58:28.165
<v Speaker 2>etcetera.

00:58:28.325 --> 00:58:30.645
<v Speaker 2>So that it does some kind of automation.

00:58:31.760 --> 00:58:33.599
<v Speaker 0>So that's with this like as then this

00:58:33.599 --> 00:58:35.760
<v Speaker 0>that functionality that Jim kind of mentioned earlier

00:58:35.760 --> 00:58:37.200
<v Speaker 0>that people are starting to kind of build

00:58:37.200 --> 00:58:38.240
<v Speaker 0>out using

00:58:38.480 --> 00:58:39.920
<v Speaker 0>kind of Verrno policies.

00:58:40.400 --> 00:58:42.560
<v Speaker 0>It's a really interesting use It's not something

00:58:42.560 --> 00:58:44.880
<v Speaker 0>I had even really thought about or considered

00:58:44.880 --> 00:58:47.680
<v Speaker 0>when I was, you know, about policy within

00:58:47.175 --> 00:58:48.055
<v Speaker 0>Kubernetes but

00:58:48.295 --> 00:58:50.295
<v Speaker 0>it does make a lot of sense and

00:58:50.295 --> 00:58:52.295
<v Speaker 0>I think namespace creation is the one that

00:58:52.295 --> 00:58:53.975
<v Speaker 0>makes a lot of sense, I can already

00:58:53.975 --> 00:58:55.575
<v Speaker 0>think oh there's a few things that I

00:58:55.575 --> 00:58:57.575
<v Speaker 0>would want to generate into that namespace right

00:58:57.575 --> 00:58:58.935
<v Speaker 0>away that would make a lot of sense

00:58:58.935 --> 00:58:59.495
<v Speaker 0>so.

00:59:00.455 --> 00:59:01.015
<v Speaker 2>Right.

00:59:01.415 --> 00:59:03.640
<v Speaker 0>And with regards, is there anything else in

00:59:03.640 --> 00:59:05.400
<v Speaker 0>generate that you want to show? Can we

00:59:05.400 --> 00:59:06.440
<v Speaker 0>show this working?

00:59:07.320 --> 00:59:08.360
<v Speaker 2>Yeah, sure.

00:59:08.520 --> 00:59:10.520
<v Speaker 2>And then I wanna just bring out that

00:59:10.520 --> 00:59:12.920
<v Speaker 2>besides of generate, you can also clone your

00:59:12.920 --> 00:59:13.800
<v Speaker 2>existing resource.

00:59:17.165 --> 00:59:20.685
<v Speaker 0>So clone another resource from another namespace

00:59:20.685 --> 00:59:22.925
<v Speaker 0>or any other resource, I guess.

00:59:25.244 --> 00:59:27.725
<v Speaker 1>Right. Oh, I think that we lose shooting.

00:59:31.410 --> 00:59:33.650
<v Speaker 0>Oh, maybe. Yeah. Maybe.

00:59:35.089 --> 00:59:37.010
<v Speaker 1>Yeah. So you can you can your data

00:59:37.010 --> 00:59:38.609
<v Speaker 1>source can either be

00:59:39.250 --> 00:59:41.410
<v Speaker 1>another resource or you can have a data

00:59:41.410 --> 00:59:43.410
<v Speaker 1>block directly in the policy like one of

00:59:43.410 --> 00:59:44.289
<v Speaker 1>the example shows.

00:59:44.964 --> 00:59:47.445
<v Speaker 1>So I think, both options are

00:59:47.605 --> 00:59:49.285
<v Speaker 1>so yeah, why don't we try one out?

00:59:49.285 --> 00:59:51.685
<v Speaker 1>Right? Like, so let's, if you know, if

00:59:51.685 --> 00:59:53.525
<v Speaker 1>you wanna try it out, we can walk

00:59:53.525 --> 00:59:54.165
<v Speaker 1>through.

00:59:54.885 --> 00:59:55.525
<v Speaker 1>And

00:59:55.845 --> 00:59:57.605
<v Speaker 1>the one other thing to point out with

00:59:57.605 --> 00:59:59.580
<v Speaker 1>the generate policies is,

01:00:00.380 --> 01:00:01.900
<v Speaker 1>you can also have,

01:00:02.460 --> 01:00:03.420
<v Speaker 1>shooting's

01:00:03.420 --> 01:00:03.980
<v Speaker 1>back.

01:00:04.300 --> 01:00:06.300
<v Speaker 1>Yeah. You can also kind of keep things

01:00:06.300 --> 01:00:07.180
<v Speaker 1>in sync.

01:00:07.740 --> 01:00:10.300
<v Speaker 1>So if you, you know, one interesting use

01:00:10.300 --> 01:00:12.140
<v Speaker 1>case is, let's say you have,

01:00:13.065 --> 01:00:15.465
<v Speaker 1>you wanna apply secrets,

01:00:15.865 --> 01:00:18.505
<v Speaker 1>you know, some default secrets for your registries.

01:00:18.505 --> 01:00:20.744
<v Speaker 1>That's a common thing that people try to

01:00:20.744 --> 01:00:22.345
<v Speaker 1>solve in in Kubernetes.

01:00:22.345 --> 01:00:25.320
<v Speaker 1>Right? So with this Kyverno generate policies, you

01:00:25.320 --> 01:00:28.120
<v Speaker 1>can you can store those secrets as a

01:00:28.200 --> 01:00:29.560
<v Speaker 1>in a central place,

01:00:29.800 --> 01:00:31.000
<v Speaker 1>and then you can kind of have a

01:00:31.000 --> 01:00:33.080
<v Speaker 1>generate and sync function.

01:00:33.400 --> 01:00:35.480
<v Speaker 1>And when you rotate or change those secrets,

01:00:35.480 --> 01:00:37.400
<v Speaker 1>you just change them in that one source

01:00:37.400 --> 01:00:38.200
<v Speaker 1>resource,

01:00:38.280 --> 01:00:41.585
<v Speaker 1>and Kyverno will automatically propagate that changes

01:00:41.744 --> 01:00:44.065
<v Speaker 1>to all the namespaces that are watching or

01:00:44.065 --> 01:00:44.865
<v Speaker 1>that are,

01:00:45.345 --> 01:00:47.585
<v Speaker 1>you know, that clone that one resource.

01:00:49.105 --> 01:00:50.305
<v Speaker 0>Okay. Yeah.

01:00:50.465 --> 01:00:52.065
<v Speaker 0>Yeah. I see that why that would be

01:00:52.065 --> 01:00:52.625
<v Speaker 0>really powerful.

01:00:53.960 --> 01:00:55.319
<v Speaker 0>And I think serendipitously

01:00:55.319 --> 01:00:57.319
<v Speaker 0>as well, this example that I've just kind

01:00:57.319 --> 01:00:59.720
<v Speaker 0>of stumbled upon in this documentation

01:00:59.720 --> 01:01:01.160
<v Speaker 0>about network policies.

01:01:01.319 --> 01:01:03.800
<v Speaker 0>Also just immediately clicked to me like,

01:01:04.119 --> 01:01:07.000
<v Speaker 0>right in network policies is a major pain

01:01:07.400 --> 01:01:08.200
<v Speaker 0>if I you

01:01:08.599 --> 01:01:09.400
<v Speaker 0>know, if I

01:01:09.815 --> 01:01:11.815
<v Speaker 0>like I'm curious now, I wanna see what

01:01:11.815 --> 01:01:13.255
<v Speaker 0>is this generate thing is going to do

01:01:13.255 --> 01:01:15.015
<v Speaker 0>what I want but if

01:01:15.015 --> 01:01:16.535
<v Speaker 0>I have an image based and then I

01:01:16.535 --> 01:01:19.495
<v Speaker 0>deploy a postgres ql cluster to it and

01:01:19.495 --> 01:01:21.655
<v Speaker 0>I detect that that image is a postgres

01:01:21.655 --> 01:01:24.030
<v Speaker 0>image based on the name or the, you

01:01:24.030 --> 01:01:25.390
<v Speaker 0>know, whatever,

01:01:25.870 --> 01:01:28.030
<v Speaker 0>I could just automatically generate a network positive

01:01:28.030 --> 01:01:30.110
<v Speaker 0>that allows all traffic within that namespace to

01:01:30.110 --> 01:01:32.030
<v Speaker 0>speak to that database cluster, which is probably

01:01:32.030 --> 01:01:33.790
<v Speaker 0>not something I would ever wanna do, but

01:01:33.950 --> 01:01:35.470
<v Speaker 0>I could, is that right?

01:01:36.955 --> 01:01:39.595
<v Speaker 1>You can, yeah. And there is one other

01:01:39.595 --> 01:01:41.195
<v Speaker 1>example that we're seeing.

01:01:42.555 --> 01:01:44.795
<v Speaker 1>So just to kind of clarify one thing.

01:01:44.795 --> 01:01:46.395
<v Speaker 1>So the triggers for generate can be the

01:01:46.395 --> 01:01:47.595
<v Speaker 1>namespace creation

01:01:47.675 --> 01:01:50.315
<v Speaker 1>or you can use labels or annotations

01:01:50.315 --> 01:01:51.755
<v Speaker 1>in the namespace

01:01:52.820 --> 01:01:55.220
<v Speaker 1>to generate certain things. So

01:01:55.700 --> 01:01:56.820
<v Speaker 1>based on those,

01:01:57.460 --> 01:02:00.180
<v Speaker 1>can, you know, some interesting use cases like

01:02:00.980 --> 01:02:03.220
<v Speaker 1>one of our team members, he

01:02:04.020 --> 01:02:04.820
<v Speaker 1>automated

01:02:05.860 --> 01:02:06.580
<v Speaker 1>self-service.

01:02:06.805 --> 01:02:10.245
<v Speaker 1>So Bolero is a fairly popular tool for

01:02:10.405 --> 01:02:13.205
<v Speaker 1>doing things like backups of namespaces

01:02:14.245 --> 01:02:17.525
<v Speaker 1>and even allowing like backups based on a

01:02:17.525 --> 01:02:18.165
<v Speaker 1>schedule.

01:02:18.405 --> 01:02:20.725
<v Speaker 1>But one of the challenges is those backups

01:02:20.430 --> 01:02:22.589
<v Speaker 1>are scheduled happen to be at the cluster

01:02:22.589 --> 01:02:23.150
<v Speaker 1>level.

01:02:23.470 --> 01:02:24.350
<v Speaker 1>So what

01:02:24.670 --> 01:02:27.309
<v Speaker 1>he solved with Kyverno was just allowing

01:02:27.309 --> 01:02:31.310
<v Speaker 1>self-service for that by simply adding a label

01:02:31.390 --> 01:02:32.270
<v Speaker 1>to a namespace.

01:02:32.755 --> 01:02:35.155
<v Speaker 1>So the idea would be for developer or

01:02:35.155 --> 01:02:38.115
<v Speaker 1>a workload owner wants, you know, backups,

01:02:38.115 --> 01:02:40.835
<v Speaker 1>they would add that label and now everything

01:02:40.835 --> 01:02:42.115
<v Speaker 1>else just automagically

01:02:42.115 --> 01:02:42.835
<v Speaker 1>happens

01:02:43.155 --> 01:02:46.755
<v Speaker 1>behind the scenes because Kyverno generates backup schedule

01:02:47.140 --> 01:02:49.940
<v Speaker 1>and then Valero does its thing and and

01:02:49.940 --> 01:02:51.700
<v Speaker 1>you know starts backing backing

01:02:52.100 --> 01:02:54.260
<v Speaker 1>up the namespace based on that schedule.

01:02:54.420 --> 01:02:57.220
<v Speaker 1>So things like that are fairly interesting use

01:02:57.220 --> 01:02:57.860
<v Speaker 1>cases

01:02:58.340 --> 01:02:59.619
<v Speaker 1>which can now be enabled.

01:03:00.435 --> 01:03:02.595
<v Speaker 0>And is namespace the only resource that these

01:03:02.595 --> 01:03:04.835
<v Speaker 0>events like I couldn't I guess a service?

01:03:07.795 --> 01:03:09.075
<v Speaker 1>For creation,

01:03:10.195 --> 01:03:10.835
<v Speaker 1>I

01:03:10.995 --> 01:03:11.635
<v Speaker 1>think

01:03:12.430 --> 01:03:15.310
<v Speaker 1>yeah, shooting that we didn't enable

01:03:15.310 --> 01:03:17.870
<v Speaker 1>any resource now. Right? So for in the

01:03:17.870 --> 01:03:19.870
<v Speaker 1>generate block or

01:03:20.990 --> 01:03:22.990
<v Speaker 1>like as we see or like you

01:03:23.230 --> 01:03:23.470
<v Speaker 2>Mhmm.

01:03:24.825 --> 01:03:25.465
<v Speaker 2>Okay.

01:03:25.705 --> 01:03:27.305
<v Speaker 2>I mean, in the match block, can match

01:03:27.305 --> 01:03:29.305
<v Speaker 2>to any trigger resources.

01:03:29.385 --> 01:03:31.065
<v Speaker 2>Like, it's the same syntax

01:03:31.145 --> 01:03:34.265
<v Speaker 2>and define whatever results and kinds. And whenever

01:03:34.265 --> 01:03:36.665
<v Speaker 2>we see that resource and the emission request,

01:03:36.744 --> 01:03:39.430
<v Speaker 2>we will trigger this policy, generate power line.

01:03:40.070 --> 01:03:41.270
<v Speaker 0>Very cool.

01:03:41.670 --> 01:03:43.830
<v Speaker 1>Yeah. Namespace just happens to be the sort

01:03:43.830 --> 01:03:45.350
<v Speaker 1>of that unit of

01:03:45.750 --> 01:03:46.550
<v Speaker 1>separation

01:03:46.550 --> 01:03:48.150
<v Speaker 1>which comes up commonly.

01:03:48.150 --> 01:03:50.630
<v Speaker 1>Yeah. Yeah. I think I can think of

01:03:50.630 --> 01:03:54.550
<v Speaker 0>a whole bunch of use cases. Namespaces are

01:03:53.655 --> 01:03:55.415
<v Speaker 0>definitely lots of things we could do there,

01:03:55.415 --> 01:03:57.895
<v Speaker 0>but then services themselves and network policies. Right.

01:03:57.895 --> 01:04:00.055
<v Speaker 0>It's all this boilerplate stuff that you really

01:04:00.055 --> 01:04:01.815
<v Speaker 0>need to put into a cluster that

01:04:02.135 --> 01:04:05.335
<v Speaker 0>is typically really standard or doesn't deviate too

01:04:05.335 --> 01:04:06.775
<v Speaker 0>much from cluster to cluster, at least just

01:04:06.775 --> 01:04:08.770
<v Speaker 0>in my experience. So it would be good,

01:04:08.849 --> 01:04:10.529
<v Speaker 0>you know, if I could define policies that

01:04:10.529 --> 01:04:12.450
<v Speaker 0>can be consumed by any of my clusters

01:04:12.450 --> 01:04:14.609
<v Speaker 0>just to do all that for me. So

01:04:14.609 --> 01:04:16.770
<v Speaker 0>that's a really cool feature.

01:04:17.970 --> 01:04:20.049
<v Speaker 1>Okay. I think we were about to walk

01:04:20.049 --> 01:04:21.835
<v Speaker 1>an example. Do we still have time to

01:04:21.835 --> 01:04:23.835
<v Speaker 1>do that? Do you wanna Yeah.

01:04:24.315 --> 01:04:24.955
<v Speaker 1>Either

01:04:25.355 --> 01:04:26.715
<v Speaker 1>drive or Yeah. You

01:04:27.355 --> 01:04:29.275
<v Speaker 2>can just go ahead and copy the

01:04:29.435 --> 01:04:32.075
<v Speaker 2>I mean, install the policy to your cluster

01:04:32.075 --> 01:04:35.195
<v Speaker 2>and then simply create a namespace. Yeah.

01:04:35.355 --> 01:04:35.995
<v Speaker 2>Yeah.

01:04:36.235 --> 01:04:37.115
<v Speaker 2>That'll do all.

01:04:40.040 --> 01:04:42.280
<v Speaker 0>Alright. Let's just save

01:04:42.920 --> 01:04:43.240
<v Speaker 0>this.

01:04:51.255 --> 01:04:52.935
<v Speaker 0>So if I apply this and then I

01:04:52.935 --> 01:04:54.375
<v Speaker 0>create a namespace,

01:04:54.615 --> 01:04:57.095
<v Speaker 0>it's gonna create a config map which has

01:04:57.095 --> 01:04:59.175
<v Speaker 0>a zookeeper address and Kafka address.

01:04:59.734 --> 01:05:00.695
<v Speaker 0>Mhmm. Okay.

01:05:03.430 --> 01:05:04.550
<v Speaker 0>Create

01:05:04.950 --> 01:05:05.990
<v Speaker 0>namespace

01:05:06.470 --> 01:05:07.510
<v Speaker 0>Rawkode.

01:05:09.430 --> 01:05:11.030
<v Speaker 0>And then if I do a get all.

01:05:17.375 --> 01:05:19.135
<v Speaker 2>Don't think conflict map is

01:05:19.935 --> 01:05:21.055
<v Speaker 2>shown by default.

01:05:21.855 --> 01:05:23.055
<v Speaker 0>Yep. You're right.

01:05:23.535 --> 01:05:25.295
<v Speaker 0>So now we have a conflict map generated

01:05:25.295 --> 01:05:27.135
<v Speaker 0>because the namespace was created

01:05:28.300 --> 01:05:30.380
<v Speaker 0>and if I just do a quick get

01:05:30.380 --> 01:05:31.260
<v Speaker 0>on that,

01:05:35.180 --> 01:05:36.460
<v Speaker 0>we have our

01:05:36.700 --> 01:05:38.619
<v Speaker 0>I'm looking forward to that change that removes

01:05:38.619 --> 01:05:40.455
<v Speaker 0>managed fields from us, but I don't if

01:05:40.455 --> 01:05:42.535
<v Speaker 0>you've seen that in the next release.

01:05:43.335 --> 01:05:44.935
<v Speaker 0>Yeah, we have our data. Is it removed

01:05:44.935 --> 01:05:47.815
<v Speaker 1>again? Okay. Yeah. There's a pull request which

01:05:47.815 --> 01:05:50.455
<v Speaker 0>I think got merged yesterday that stops cube

01:05:50.455 --> 01:05:53.015
<v Speaker 0>control get from showing managed fields which is

01:05:53.015 --> 01:05:53.815
<v Speaker 0>a welcome to change.

01:05:55.670 --> 01:05:58.710
<v Speaker 2>Actually there is a plugin of kubectl called

01:05:58.710 --> 01:06:00.310
<v Speaker 2>kubectl meet and

01:06:00.710 --> 01:06:02.789
<v Speaker 2>you can attach it to your kubectl command

01:06:02.789 --> 01:06:04.309
<v Speaker 2>and so that it will strip out all

01:06:04.309 --> 01:06:05.349
<v Speaker 2>the unnecessary

01:06:05.349 --> 01:06:05.829
<v Speaker 2>fields.

01:06:06.845 --> 01:06:09.244
<v Speaker 0>Yeah. That's a great tip for everybody watching.

01:06:09.244 --> 01:06:10.765
<v Speaker 0>Just remove some of the stuff that you

01:06:10.765 --> 01:06:12.525
<v Speaker 0>never need to see or worry about. So

01:06:12.525 --> 01:06:15.325
<v Speaker 0>cool. Keep control neat. I like it. Yeah.

01:06:16.365 --> 01:06:19.565
<v Speaker 1>Did we have synchronizing the policy? So yeah,

01:06:19.565 --> 01:06:21.940
<v Speaker 1>if we had synchronize, you could try updating

01:06:21.940 --> 01:06:25.060
<v Speaker 1>the config or actually just change the policy

01:06:25.060 --> 01:06:26.900
<v Speaker 1>and see if the config map also gets

01:06:26.900 --> 01:06:27.620
<v Speaker 1>updated.

01:06:28.740 --> 01:06:29.700
<v Speaker 0>Oh, really?

01:06:30.340 --> 01:06:31.700
<v Speaker 0>That's interesting.

01:06:32.420 --> 01:06:33.140
<v Speaker 0>So

01:06:33.620 --> 01:06:34.740
<v Speaker 0>I don't know. C Paul.

01:06:35.365 --> 01:06:36.725
<v Speaker 0>What did we call it?

01:06:39.045 --> 01:06:40.005
<v Speaker 0>Z k.

01:06:42.325 --> 01:06:43.525
<v Speaker 0>So if I

01:06:44.805 --> 01:06:46.005
<v Speaker 0>scroll down here

01:06:46.805 --> 01:06:49.509
<v Speaker 0>and modify this. I mean, this is just

01:06:49.509 --> 01:06:50.950
<v Speaker 0>a conflict map, it doesn't really need to

01:06:50.950 --> 01:06:52.070
<v Speaker 0>be real so.

01:06:52.950 --> 01:06:55.910
<v Speaker 0>Right. Before I start typing random IP addresses,

01:06:56.710 --> 01:06:57.670
<v Speaker 0>Kyverno

01:06:57.670 --> 01:06:58.310
<v Speaker 0>one.

01:07:00.230 --> 01:07:01.589
<v Speaker 0>So synchronize

01:07:01.589 --> 01:07:03.589
<v Speaker 0>is something that I can add

01:07:03.829 --> 01:07:05.454
<v Speaker 0>to a policy.

01:07:05.454 --> 01:07:07.535
<v Speaker 0>Is that just an oh yeah. Here's here.

01:07:07.695 --> 01:07:09.855
<v Speaker 0>On the generate. So anytime I change the

01:07:09.855 --> 01:07:12.895
<v Speaker 0>policy, it's gonna go back and retroactively modify

01:07:13.214 --> 01:07:15.535
<v Speaker 0>the conflict maps. Now is that all conflict

01:07:15.135 --> 01:07:15.535
<v Speaker 0>or

01:07:15.935 --> 01:07:18.080
<v Speaker 0>just the ones that were created through the

01:07:18.080 --> 01:07:18.800
<v Speaker 0>policy?

01:07:20.240 --> 01:07:21.680
<v Speaker 1>Just the ones. Okay.

01:07:22.240 --> 01:07:23.520
<v Speaker 0>So does that mean there's some sort of

01:07:23.520 --> 01:07:25.920
<v Speaker 0>label on the policy that identifies it as

01:07:25.920 --> 01:07:27.040
<v Speaker 0>generated

01:07:27.920 --> 01:07:30.000
<v Speaker 0>on a So I believe the labels on

01:07:30.000 --> 01:07:31.840
<v Speaker 1>the yeah. On the resource.

01:07:32.080 --> 01:07:34.005
<v Speaker 1>Yeah. You can we can check that too

01:07:34.005 --> 01:07:34.565
<v Speaker 1>and Right.

01:07:36.964 --> 01:07:40.085
<v Speaker 0>Okay. And we got our synchronized here as

01:07:40.085 --> 01:07:40.565
<v Speaker 0>well.

01:07:40.964 --> 01:07:42.244
<v Speaker 0>Cool. Cool.

01:07:42.964 --> 01:07:43.925
<v Speaker 0>Does

01:07:44.484 --> 01:07:46.404
<v Speaker 0>that mean Kyverno can fix the age old

01:07:46.404 --> 01:07:48.724
<v Speaker 0>problem of a ConfigMap changing and restarting the

01:07:48.724 --> 01:07:49.045
<v Speaker 0>pods?

01:07:51.490 --> 01:07:52.850
<v Speaker 1>Not quite because

01:07:53.089 --> 01:07:55.490
<v Speaker 1>well, so you can change the conflict map,

01:07:55.490 --> 01:07:57.410
<v Speaker 1>you would still need to yeah, we don't

01:07:57.410 --> 01:07:59.250
<v Speaker 1>have a restart action and

01:08:00.609 --> 01:08:01.410
<v Speaker 1>need to somehow.

01:08:01.955 --> 01:08:03.955
<v Speaker 0>The number one question I get from people

01:08:03.955 --> 01:08:06.035
<v Speaker 0>that you know, go through Kubernetes workshops that

01:08:06.035 --> 01:08:08.355
<v Speaker 0>I'm working on or just chat and say,

01:08:08.515 --> 01:08:09.875
<v Speaker 0>how do I restart the pods when I

01:08:09.875 --> 01:08:11.795
<v Speaker 0>modify the conflict map and then all the

01:08:11.795 --> 01:08:13.155
<v Speaker 0>hacks you have to give them to do

01:08:13.155 --> 01:08:14.835
<v Speaker 0>it are always painful. Right.

01:08:15.155 --> 01:08:17.050
<v Speaker 1>So there is, mean you could, if you

01:08:17.050 --> 01:08:19.770
<v Speaker 1>change like an annotation on the deployment it'll

01:08:19.770 --> 01:08:22.090
<v Speaker 1>restart the pod. So yeah, yeah I guess

01:08:22.090 --> 01:08:24.170
<v Speaker 1>you could do that through a mutate rule.

01:08:24.729 --> 01:08:26.569
<v Speaker 1>Right, so you can combine your generate with

01:08:26.569 --> 01:08:27.849
<v Speaker 1>the mutate and

01:08:29.130 --> 01:08:31.024
<v Speaker 0>Yeah, that's always the way is to generate

01:08:31.024 --> 01:08:32.465
<v Speaker 0>a hash of the conflict map and sort

01:08:32.465 --> 01:08:34.385
<v Speaker 0>of some annotation Right. And things and

01:08:35.264 --> 01:08:38.304
<v Speaker 0>That works. But there's there's a problem for

01:08:38.304 --> 01:08:39.585
<v Speaker 0>us to solve another day. We don't need

01:08:39.585 --> 01:08:40.705
<v Speaker 0>to do that now in the next few

01:08:40.705 --> 01:08:42.624
<v Speaker 0>minutes. I wouldn't expect it.

01:08:42.944 --> 01:08:43.744
<v Speaker 0>Okay. So,

01:08:44.689 --> 01:08:46.369
<v Speaker 0>you know, we're kind of approaching the end

01:08:46.369 --> 01:08:47.649
<v Speaker 0>now and I don't wanna keep you all

01:08:47.649 --> 01:08:49.090
<v Speaker 0>much more, so maybe we could just have

01:08:49.090 --> 01:08:51.489
<v Speaker 0>a quick conversation for a minute around the

01:08:51.489 --> 01:08:54.050
<v Speaker 0>variables and external data sources. Is there anything

01:08:54.050 --> 01:08:56.449
<v Speaker 0>there that the audience should understand and how

01:08:56.449 --> 01:08:57.569
<v Speaker 0>those work or what they're for?

01:08:59.565 --> 01:09:02.205
<v Speaker 1>Yeah, those are certainly in a bit more

01:09:02.205 --> 01:09:05.085
<v Speaker 1>advanced but very useful features. So variables

01:09:05.565 --> 01:09:08.045
<v Speaker 1>you know can come, I think I mentioned

01:09:08.045 --> 01:09:11.085
<v Speaker 1>also previously through the request data.

01:09:11.245 --> 01:09:13.725
<v Speaker 1>So there's several examples of how, like for

01:09:13.725 --> 01:09:15.165
<v Speaker 1>one simple thing is

01:09:15.609 --> 01:09:16.729
<v Speaker 1>if you want,

01:09:17.130 --> 01:09:19.609
<v Speaker 1>if you're using like the namespace

01:09:19.689 --> 01:09:21.689
<v Speaker 1>or you're trying to look up things from

01:09:21.689 --> 01:09:24.489
<v Speaker 1>the namespace or in your message, even in

01:09:24.489 --> 01:09:26.489
<v Speaker 1>your output message, you wanna use that,

01:09:27.130 --> 01:09:30.335
<v Speaker 1>you can have variables coming from the admission

01:09:30.335 --> 01:09:32.014
<v Speaker 1>review request. Right?

01:09:32.654 --> 01:09:35.455
<v Speaker 1>So that's one example. Like just there, we're

01:09:35.455 --> 01:09:37.135
<v Speaker 1>showing the user info,

01:09:37.295 --> 01:09:38.654
<v Speaker 1>which is also super,

01:09:39.135 --> 01:09:41.215
<v Speaker 1>handy, right, if you want to apply policies

01:09:41.215 --> 01:09:44.620
<v Speaker 1>based on user roles, user names, things like

01:09:44.620 --> 01:09:45.100
<v Speaker 1>that.

01:09:46.140 --> 01:09:48.780
<v Speaker 1>The other source of variables could be config

01:09:48.780 --> 01:09:50.859
<v Speaker 1>maps. So with Kyverno,

01:09:51.020 --> 01:09:54.940
<v Speaker 1>we don't allow calls to any arbitrary external

01:09:54.940 --> 01:09:57.915
<v Speaker 1>system, Right? So you can't call like some

01:09:58.795 --> 01:10:01.275
<v Speaker 1>service running, you know, externally,

01:10:02.075 --> 01:10:04.315
<v Speaker 1>just to keep things bounded.

01:10:04.555 --> 01:10:06.715
<v Speaker 1>But what you can do is, you know,

01:10:06.715 --> 01:10:09.115
<v Speaker 1>you can have a separate controller which writes

01:10:09.115 --> 01:10:12.040
<v Speaker 1>to a config map and then Kyverno can

01:10:12.040 --> 01:10:14.920
<v Speaker 1>use that ConfigMap as a variable within a

01:10:14.920 --> 01:10:15.639
<v Speaker 1>policy.

01:10:15.960 --> 01:10:17.800
<v Speaker 1>So this is a way to create more

01:10:17.800 --> 01:10:19.320
<v Speaker 1>data driven policies

01:10:20.040 --> 01:10:22.520
<v Speaker 1>and ConfigMaps are fantastic

01:10:22.520 --> 01:10:24.280
<v Speaker 1>pattern in Kubernetes of course,

01:10:25.155 --> 01:10:28.514
<v Speaker 1>which Kyverno just embraces and and uses to

01:10:28.515 --> 01:10:30.835
<v Speaker 1>make policies more data driven.

01:10:31.715 --> 01:10:34.115
<v Speaker 1>The other interesting use case is,

01:10:34.435 --> 01:10:36.515
<v Speaker 1>if you, you know, go into the external

01:10:36.515 --> 01:10:37.235
<v Speaker 1>data,

01:10:37.555 --> 01:10:39.075
<v Speaker 1>there's a there's

01:10:39.540 --> 01:10:42.099
<v Speaker 1>ability and this was a recent feature we

01:10:42.099 --> 01:10:44.579
<v Speaker 1>added to do API calls. Yeah. So this

01:10:44.579 --> 01:10:46.659
<v Speaker 1>is explaining the config map feature.

01:10:48.579 --> 01:10:51.219
<v Speaker 1>And then, you know, further down is if

01:10:51.219 --> 01:10:51.460
<v Speaker 1>you,

01:10:53.505 --> 01:10:55.505
<v Speaker 1>yeah, want to look up things from the

01:10:55.505 --> 01:10:56.705
<v Speaker 1>API server.

01:10:56.945 --> 01:10:58.145
<v Speaker 1>So for example,

01:10:58.385 --> 01:11:00.065
<v Speaker 1>you know, if you want to do things

01:11:00.065 --> 01:11:02.864
<v Speaker 1>like, I think this example is talking about

01:11:03.105 --> 01:11:04.145
<v Speaker 1>oh, wait.

01:11:04.945 --> 01:11:06.785
<v Speaker 1>This is the yeah. Like, is that a

01:11:06.785 --> 01:11:08.705
<v Speaker 1>config map example? I think so.

01:11:09.750 --> 01:11:11.909
<v Speaker 2>Yeah. Yeah, so here we're,

01:11:12.630 --> 01:11:14.630
<v Speaker 1>yeah, just looking up, you know, using a

01:11:14.630 --> 01:11:17.429
<v Speaker 1>ConfigMap as a dictionary and based on certain

01:11:17.429 --> 01:11:20.070
<v Speaker 1>things we're restricting or allowing.

01:11:20.630 --> 01:11:22.469
<v Speaker 1>The other cool thing and you know, this

01:11:22.469 --> 01:11:23.030
<v Speaker 1>is,

01:11:23.270 --> 01:11:23.670
<v Speaker 1>you know,

01:11:24.735 --> 01:11:27.374
<v Speaker 1>I guess Jamie Spath or James Spath,

01:11:28.895 --> 01:11:31.695
<v Speaker 1>you know, is a fairly powerful free way

01:11:31.695 --> 01:11:32.815
<v Speaker 1>of processing

01:11:33.855 --> 01:11:35.454
<v Speaker 1>in a JSON and

01:11:35.614 --> 01:11:37.375
<v Speaker 1>it's also supported with group cuddle.

01:11:38.210 --> 01:11:40.130
<v Speaker 1>So one thing you could do with Kyverno

01:11:40.130 --> 01:11:42.050
<v Speaker 1>now is you can if you want to

01:11:42.050 --> 01:11:42.690
<v Speaker 1>call

01:11:43.730 --> 01:11:46.210
<v Speaker 1>let's say, know, this I believe this example

01:11:46.210 --> 01:11:48.770
<v Speaker 1>is just, you know, counting pods in a

01:11:48.770 --> 01:11:50.635
<v Speaker 1>in a namespace, but you could do things

01:11:50.635 --> 01:11:52.795
<v Speaker 1>like if you wanna make sure that you

01:11:52.795 --> 01:11:55.995
<v Speaker 1>only have a single load balancer type service

01:11:56.155 --> 01:11:57.675
<v Speaker 1>within the namespace,

01:11:58.475 --> 01:11:59.755
<v Speaker 1>you can make a call

01:12:00.315 --> 01:12:02.235
<v Speaker 1>through the API server, get all the load

01:12:02.235 --> 01:12:03.469
<v Speaker 1>balance services,

01:12:04.110 --> 01:12:04.829
<v Speaker 1>apply,

01:12:04.910 --> 01:12:05.469
<v Speaker 1>you know,

01:12:06.030 --> 01:12:07.230
<v Speaker 1>this JMUSPAT

01:12:07.230 --> 01:12:08.429
<v Speaker 1>expression

01:12:08.590 --> 01:12:09.630
<v Speaker 1>to count

01:12:10.350 --> 01:12:12.590
<v Speaker 1>how many instances you got and then allow

01:12:12.590 --> 01:12:13.550
<v Speaker 1>or restrict,

01:12:14.429 --> 01:12:16.590
<v Speaker 1>you know, the admission of another

01:12:17.215 --> 01:12:19.135
<v Speaker 1>service of type load balancer.

01:12:19.695 --> 01:12:21.615
<v Speaker 1>So things like that can be

01:12:22.175 --> 01:12:24.895
<v Speaker 1>done fairly easily and nice thing is you

01:12:24.895 --> 01:12:26.735
<v Speaker 1>can test all of this even with kubectl,

01:12:26.735 --> 01:12:29.215
<v Speaker 1>so you could take that same command almost

01:12:29.215 --> 01:12:32.335
<v Speaker 1>and of course replace request dot namespace with

01:12:32.335 --> 01:12:33.055
<v Speaker 1>your namespace.

01:12:34.230 --> 01:12:36.949
<v Speaker 1>Use kubectl raw to run that same command.

01:12:37.349 --> 01:12:39.829
<v Speaker 1>And you will see the output which will

01:12:39.829 --> 01:12:41.349
<v Speaker 1>be a bunch of JSON and then you

01:12:41.349 --> 01:12:43.269
<v Speaker 1>can apply if you have JP

01:12:43.429 --> 01:12:45.989
<v Speaker 1>install, which is the command line for James

01:12:45.989 --> 01:12:46.309
<v Speaker 1>path.

01:12:47.335 --> 01:12:48.935
<v Speaker 1>You can apply that and you will see

01:12:48.935 --> 01:12:51.735
<v Speaker 1>the exact pretty much everything that Kyverno is

01:12:51.735 --> 01:12:52.774
<v Speaker 1>doing internally,

01:12:52.935 --> 01:12:55.494
<v Speaker 1>programmatically you can try out and test.

01:12:56.614 --> 01:12:59.014
<v Speaker 0>Alright. That's a pretty advanced

01:12:59.655 --> 01:13:01.550
<v Speaker 0>feature but I can see definitely a few

01:13:01.550 --> 01:13:02.909
<v Speaker 0>use cases there for that.

01:13:03.550 --> 01:13:05.310
<v Speaker 0>One thing that struck me during the variables

01:13:05.310 --> 01:13:08.110
<v Speaker 0>one, you know, with you mentioned the user

01:13:08.110 --> 01:13:09.949
<v Speaker 0>that is creating the resource,

01:13:10.110 --> 01:13:12.350
<v Speaker 0>you know something that's quite common and get

01:13:12.350 --> 01:13:13.790
<v Speaker 0>ups environments is that

01:13:14.430 --> 01:13:17.710
<v Speaker 0>you don't necessarily want to block people from

01:13:17.225 --> 01:13:19.545
<v Speaker 0>applying stuff but because debugging has to happen

01:13:19.545 --> 01:13:20.744
<v Speaker 0>but at the same time

01:13:21.225 --> 01:13:22.585
<v Speaker 0>I would still like to be able to

01:13:22.585 --> 01:13:25.065
<v Speaker 0>audit or notify like would I

01:13:26.585 --> 01:13:29.465
<v Speaker 0>can I use the user that's applying the

01:13:29.465 --> 01:13:31.465
<v Speaker 0>resource to have one of those audit events

01:13:31.465 --> 01:13:33.145
<v Speaker 0>that says someone who is not the GitOps

01:13:33.120 --> 01:13:35.440
<v Speaker 0>service account tried to apply a resource?

01:13:36.080 --> 01:13:37.120
<v Speaker 0>Would that work?

01:13:39.440 --> 01:13:42.000
<v Speaker 1>So based on the user or the service

01:13:42.000 --> 01:13:44.239
<v Speaker 1>account, you would want to enforce

01:13:45.680 --> 01:13:47.600
<v Speaker 1>you would want to apply a policy? Is

01:13:47.600 --> 01:13:49.915
<v Speaker 1>that? Yeah, so in the policy and the

01:13:49.915 --> 01:13:52.395
<v Speaker 0>match statement, can I match against the user

01:13:52.395 --> 01:13:54.315
<v Speaker 0>that is applying the resource?

01:13:54.955 --> 01:13:55.675
<v Speaker 1>Yes.

01:13:55.995 --> 01:13:57.515
<v Speaker 1>Nice. Yes, so if you,

01:13:58.555 --> 01:14:00.635
<v Speaker 1>yeah, so in I think

01:14:00.955 --> 01:14:02.475
<v Speaker 1>in the selecting resources,

01:14:03.600 --> 01:14:05.760
<v Speaker 1>I believe we have an example of that.

01:14:05.760 --> 01:14:06.239
<v Speaker 1>Yeah.

01:14:08.239 --> 01:14:09.760
<v Speaker 1>So you could do it based on the

01:14:09.760 --> 01:14:10.560
<v Speaker 1>exact

01:14:10.560 --> 01:14:13.999
<v Speaker 1>user, the service account or even the group,

01:14:14.480 --> 01:14:15.840
<v Speaker 1>the user group that you want.

01:14:17.685 --> 01:14:20.405
<v Speaker 0>Okay, I'll take into the spec for that.

01:14:20.485 --> 01:14:22.485
<v Speaker 0>I just, there's something there that I think

01:14:22.485 --> 01:14:24.005
<v Speaker 0>I wanna play with at some point.

01:14:25.205 --> 01:14:25.685
<v Speaker 0>Sorry,

01:14:27.125 --> 01:14:27.845
<v Speaker 0>we're gonna say something?

01:14:29.250 --> 01:14:31.329
<v Speaker 0>Okay. So we have

01:14:31.810 --> 01:14:34.290
<v Speaker 0>one more question from the audience and then

01:14:34.690 --> 01:14:36.450
<v Speaker 0>I'll let you both get back to your

01:14:36.450 --> 01:14:38.850
<v Speaker 0>day. But this has been really really interesting.

01:14:38.850 --> 01:14:40.210
<v Speaker 0>I can already see loads of things that

01:14:40.210 --> 01:14:42.690
<v Speaker 0>I wanna start using Kyverno for and play

01:14:42.105 --> 01:14:44.105
<v Speaker 0>with. I'm really looking forward to continuing my

01:14:44.105 --> 01:14:44.905
<v Speaker 0>exploration.

01:14:46.265 --> 01:14:48.905
<v Speaker 0>First, we have a question from Frank. Frank

01:14:48.905 --> 01:14:51.625
<v Speaker 0>wonders if he can use Kyverno audit reports

01:14:51.625 --> 01:14:52.264
<v Speaker 0>or

01:14:52.665 --> 01:14:55.065
<v Speaker 0>met them as Kubernetes audit events

01:14:55.225 --> 01:14:57.385
<v Speaker 0>because he would like to consume them with

01:14:57.385 --> 01:14:57.945
<v Speaker 0>Falco.

01:14:58.640 --> 01:15:00.880
<v Speaker 0>Is that something that's possible? No.

01:15:02.640 --> 01:15:03.600
<v Speaker 1>So currently,

01:15:03.680 --> 01:15:07.040
<v Speaker 1>these reports are custom resources, so they are,

01:15:07.040 --> 01:15:08.239
<v Speaker 1>you know, created,

01:15:10.000 --> 01:15:12.320
<v Speaker 1>well, so you could the creation of the

01:15:12.320 --> 01:15:15.745
<v Speaker 1>report would go to the audit logs. Right?

01:15:15.745 --> 01:15:18.225
<v Speaker 1>So depending on how you've configured the

01:15:18.465 --> 01:15:21.265
<v Speaker 1>audit reports, whenever a new report is created

01:15:21.265 --> 01:15:23.344
<v Speaker 1>or the report is updated,

01:15:23.905 --> 01:15:25.665
<v Speaker 1>that will be audited and will show up

01:15:25.665 --> 01:15:26.545
<v Speaker 1>in the audit logs.

01:15:28.159 --> 01:15:30.960
<v Speaker 1>And you could configure perhaps more details so

01:15:30.960 --> 01:15:32.480
<v Speaker 1>you could have the entire body of the

01:15:32.480 --> 01:15:35.520
<v Speaker 1>report also show up there. So from that

01:15:35.520 --> 01:15:38.320
<v Speaker 1>point of view, yes, it will be it

01:15:38.320 --> 01:15:39.280
<v Speaker 1>is possible.

01:15:40.000 --> 01:15:41.760
<v Speaker 1>Kyverno doesn't directly,

01:15:42.320 --> 01:15:43.760
<v Speaker 1>write to the audit logs.

01:15:44.215 --> 01:15:45.895
<v Speaker 1>I know there was some discussion or there

01:15:45.895 --> 01:15:48.295
<v Speaker 1>was a proposal or cap for

01:15:48.695 --> 01:15:49.975
<v Speaker 1>allowing extensibility

01:15:49.975 --> 01:15:52.775
<v Speaker 1>and allowing external controllers to even write to

01:15:52.775 --> 01:15:53.815
<v Speaker 1>audit logs,

01:15:54.375 --> 01:15:57.520
<v Speaker 1>but that's not something that's supported today.

01:15:58.000 --> 01:16:00.320
<v Speaker 1>But you will receive again the the full

01:16:00.560 --> 01:16:02.320
<v Speaker 1>because it's a custom resource,

01:16:02.720 --> 01:16:04.480
<v Speaker 1>one of the value points is everything that

01:16:04.480 --> 01:16:07.200
<v Speaker 1>works for Kubernetes resources will show up,

01:16:07.600 --> 01:16:09.520
<v Speaker 1>in the audit logs and you'll see

01:16:09.840 --> 01:16:12.320
<v Speaker 1>when Kyverno is updating or changing

01:16:12.855 --> 01:16:15.255
<v Speaker 1>or you know creating a new report.

01:16:16.615 --> 01:16:17.495
<v Speaker 0>Awesome,

01:16:17.495 --> 01:16:18.215
<v Speaker 0>thank you.

01:16:18.695 --> 01:16:19.895
<v Speaker 0>Is there anything

01:16:20.215 --> 01:16:22.535
<v Speaker 0>either of you would like to say or

01:16:22.535 --> 01:16:24.215
<v Speaker 0>finish on before we wrap up for today?

01:16:24.215 --> 01:16:25.590
<v Speaker 0>Is there anything that we haven't covered that

01:16:25.590 --> 01:16:27.429
<v Speaker 0>you think would be useful for people?

01:16:29.590 --> 01:16:31.429
<v Speaker 1>So I think we covered or touched on

01:16:31.429 --> 01:16:34.309
<v Speaker 1>all of the most of the core topics.

01:16:34.710 --> 01:16:37.190
<v Speaker 1>Just kind of one thing to mention our

01:16:37.190 --> 01:16:40.150
<v Speaker 1>Slack channel and the Kubernetes Slack is fairly

01:16:40.035 --> 01:16:40.995
<v Speaker 1>active. We're

01:16:41.235 --> 01:16:43.155
<v Speaker 1>always on, so feel

01:16:43.155 --> 01:16:45.555
<v Speaker 1>free to reach out with any more questions,

01:16:45.555 --> 01:16:46.755
<v Speaker 1>thoughts, ideas.

01:16:48.115 --> 01:16:51.235
<v Speaker 1>And there's a growing and very active community

01:16:52.275 --> 01:16:54.995
<v Speaker 1>of folks and it's great that

01:16:56.500 --> 01:16:58.340
<v Speaker 1>there's a lot of people who are who

01:16:58.340 --> 01:17:00.420
<v Speaker 1>have been using Kyverno now for

01:17:01.380 --> 01:17:04.100
<v Speaker 1>some time and they're also very helpful on

01:17:04.100 --> 01:17:06.739
<v Speaker 1>there. So definitely would love to hear more

01:17:06.739 --> 01:17:09.060
<v Speaker 1>ideas and just to have people say hello

01:17:09.060 --> 01:17:09.300
<v Speaker 1>there.

01:17:11.755 --> 01:17:13.675
<v Speaker 0>All right, awesome. Well,

01:17:14.795 --> 01:17:16.395
<v Speaker 0>I had a lot of fun playing with

01:17:16.395 --> 01:17:18.555
<v Speaker 0>Kyverno. I wanna thank you both for coming

01:17:18.555 --> 01:17:20.715
<v Speaker 0>on today and sharing your knowledge with us

01:17:20.715 --> 01:17:22.715
<v Speaker 0>and guiding me through this exploration.

01:17:23.355 --> 01:17:25.880
<v Speaker 0>It's just such a cool tool and policy

01:17:25.880 --> 01:17:28.280
<v Speaker 0>is such an important aspect of Kubernetes customers

01:17:28.280 --> 01:17:29.960
<v Speaker 0>these days and I'm excited to see tools

01:17:29.960 --> 01:17:31.640
<v Speaker 0>like this coming into the space and solving

01:17:31.640 --> 01:17:33.640
<v Speaker 0>all of these problems so that we can

01:17:33.640 --> 01:17:36.040
<v Speaker 0>all write this code hopefully. That's my plan

01:17:36.040 --> 01:17:38.415
<v Speaker 0>at least anyway. So thank you again, it's

01:17:38.415 --> 01:17:39.775
<v Speaker 0>been an absolute pleasure, I hope you have

01:17:39.775 --> 01:17:40.974
<v Speaker 0>a great day and I'll speak to you

01:17:40.974 --> 01:17:41.695
<v Speaker 0>both soon.

01:17:42.815 --> 01:17:45.295
<v Speaker 2>You. Bye bye. You. Bye.
