WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 576077e5-ee86-4f89-81aa-bbae33f68f3a
Created: 2025-04-29T21:26:15.257Z
Duration: 3590.0012
Channels: 1

00:01:20.310 --> 00:01:23.590
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:01:23.590 --> 00:01:25.750
<v Speaker 0>live. I am your host Rawkode

00:01:25.750 --> 00:01:26.310
<v Speaker 0>and

00:01:26.630 --> 00:01:28.869
<v Speaker 0>today we are gonna be taking a look

00:01:28.869 --> 00:01:30.469
<v Speaker 0>at a CNCF

00:01:30.469 --> 00:01:31.189
<v Speaker 0>project,

00:01:31.509 --> 00:01:32.069
<v Speaker 0>CoreDNS.

00:01:33.065 --> 00:01:34.505
<v Speaker 0>Before we move on to that, I just

00:01:34.505 --> 00:01:36.025
<v Speaker 0>wanna take a moment to say thank you

00:01:36.025 --> 00:01:38.265
<v Speaker 0>to my employer. They provide me the time

00:01:38.585 --> 00:01:41.625
<v Speaker 0>to invest and help produce these episodes that

00:01:41.625 --> 00:01:43.225
<v Speaker 0>we can take a look at the modern

00:01:43.225 --> 00:01:45.545
<v Speaker 0>cloud native landscape and purchase learning materials for

00:01:45.545 --> 00:01:47.065
<v Speaker 0>us all to learn together. So thank you

00:01:47.065 --> 00:01:50.150
<v Speaker 0>Equinix metal. There is a code, Rawkode Live.

00:01:50.150 --> 00:01:51.830
<v Speaker 0>You can use that when signing up or

00:01:51.830 --> 00:01:53.350
<v Speaker 0>even if you're already a customer, you can

00:01:53.350 --> 00:01:55.030
<v Speaker 0>still use this coupon. It will get you

00:01:55.030 --> 00:01:57.430
<v Speaker 0>50 US dollars in credits, which you can

00:01:57.430 --> 00:01:58.950
<v Speaker 0>use in a couple of hours with some

00:01:58.950 --> 00:02:01.030
<v Speaker 0>beefy machines or spread out over longer term

00:02:01.030 --> 00:02:03.495
<v Speaker 0>with some smaller machines. Either way, the choice

00:02:03.495 --> 00:02:04.455
<v Speaker 0>is yours.

00:02:05.015 --> 00:02:07.575
<v Speaker 0>If you want to have a conversation afterwards,

00:02:07.575 --> 00:02:09.495
<v Speaker 0>there is a Discord server. You can come

00:02:09.495 --> 00:02:11.495
<v Speaker 0>and join and ask questions or just ask

00:02:11.495 --> 00:02:13.495
<v Speaker 0>for news show suggestions. I am open to

00:02:13.495 --> 00:02:15.335
<v Speaker 0>anything and if you're not watching live, this

00:02:15.335 --> 00:02:16.935
<v Speaker 0>is the best way to interact.

00:02:18.069 --> 00:02:19.830
<v Speaker 0>Now, we're gonna take a look at CoreDNS

00:02:19.830 --> 00:02:23.030
<v Speaker 0>and for that I have the founder,

00:02:23.830 --> 00:02:26.630
<v Speaker 0>Mick Haven. How are you Mick? Hello. I'm

00:02:26.630 --> 00:02:28.390
<v Speaker 1>fine. Thanks. Thanks for asking me.

00:02:28.790 --> 00:02:30.630
<v Speaker 0>No. This is awesome. I'm really looking forward

00:02:30.630 --> 00:02:32.709
<v Speaker 0>to learning more about CoreDNS and who better

00:02:32.709 --> 00:02:34.765
<v Speaker 0>to do it than you. So this is

00:02:34.765 --> 00:02:35.805
<v Speaker 0>gonna be fantastic.

00:02:36.205 --> 00:02:37.965
<v Speaker 0>Do you wanna just take a moment to

00:02:37.965 --> 00:02:39.485
<v Speaker 0>introduce yourself and tell us a little bit

00:02:39.485 --> 00:02:41.165
<v Speaker 0>about you and the and the project?

00:02:41.565 --> 00:02:43.005
<v Speaker 1>Yeah. We've been

00:02:44.285 --> 00:02:46.605
<v Speaker 1>in London for a couple of years. Moved

00:02:46.605 --> 00:02:48.605
<v Speaker 1>back recently to The Netherlands where I live

00:02:48.605 --> 00:02:48.925
<v Speaker 1>now.

00:02:51.610 --> 00:02:54.329
<v Speaker 1>And I have been doing DNS for a

00:02:54.329 --> 00:02:55.130
<v Speaker 1>long time.

00:02:55.609 --> 00:02:58.490
<v Speaker 1>Involved in DNSSEC in in February.

00:02:59.209 --> 00:03:00.730
<v Speaker 1>At some point, I

00:03:01.965 --> 00:03:04.364
<v Speaker 1>got involved in SkyDNS,

00:03:04.364 --> 00:03:07.005
<v Speaker 1>which was the thing that got used in

00:03:07.485 --> 00:03:08.445
<v Speaker 1>Kubernetes.

00:03:09.805 --> 00:03:12.364
<v Speaker 1>Via via some ideas, this led to me

00:03:12.364 --> 00:03:14.445
<v Speaker 1>actually writing a new DNS server,

00:03:14.525 --> 00:03:16.765
<v Speaker 1>which is CoreDNS, which we're gonna talk about

00:03:16.765 --> 00:03:17.084
<v Speaker 1>tonight.

00:03:18.540 --> 00:03:20.380
<v Speaker 0>Okay. Great. So

00:03:20.380 --> 00:03:22.700
<v Speaker 0>let me start with a couple of questions

00:03:22.700 --> 00:03:24.620
<v Speaker 0>that I kind of prepared in advance then.

00:03:24.620 --> 00:03:26.780
<v Speaker 0>So when I think of DNS, you know,

00:03:26.780 --> 00:03:29.740
<v Speaker 0>I've been doing operational work for nearly twenty

00:03:29.740 --> 00:03:31.915
<v Speaker 0>years now, and Bind was just always that

00:03:31.915 --> 00:03:33.515
<v Speaker 0>one thing that I had installed on my

00:03:33.515 --> 00:03:34.075
<v Speaker 0>server.

00:03:35.435 --> 00:03:37.435
<v Speaker 0>Why did we need to change the status

00:03:37.435 --> 00:03:38.795
<v Speaker 0>quo there? Why did we have to bring

00:03:38.795 --> 00:03:39.835
<v Speaker 0>in something new?

00:03:40.475 --> 00:03:43.115
<v Speaker 1>Yeah. Note that there is Bind, there is

00:03:42.540 --> 00:03:44.540
<v Speaker 1>NSD, there is PowerDNS,

00:03:44.540 --> 00:03:46.780
<v Speaker 1>there's a couple of DNS servers and and

00:03:46.780 --> 00:03:47.740
<v Speaker 1>precursors.

00:03:49.579 --> 00:03:52.700
<v Speaker 1>Mostly, you don't need a new DNS server

00:03:53.019 --> 00:03:54.060
<v Speaker 1>off the bat.

00:03:54.379 --> 00:03:56.780
<v Speaker 1>The interesting thing here is that I wanted

00:03:56.780 --> 00:03:59.265
<v Speaker 1>a new DNS server, and I was capable

00:03:59.265 --> 00:04:00.945
<v Speaker 1>enough to actually write one.

00:04:01.425 --> 00:04:02.944
<v Speaker 1>And it's one of the few that's not

00:04:02.944 --> 00:04:04.705
<v Speaker 1>written in a c language.

00:04:05.185 --> 00:04:06.705
<v Speaker 1>So off the bat, there are a couple

00:04:06.705 --> 00:04:09.425
<v Speaker 1>of things that are better. It just crashes.

00:04:09.425 --> 00:04:11.185
<v Speaker 1>There are no buffer overflow and that kind

00:04:11.185 --> 00:04:14.020
<v Speaker 1>of stuff. So that that's a big difference

00:04:14.020 --> 00:04:16.980
<v Speaker 1>from the current crop of of DNS servers.

00:04:17.060 --> 00:04:19.060
<v Speaker 1>Being written in Go, you have GCs, so

00:04:19.060 --> 00:04:20.899
<v Speaker 1>there might be more overhead, so speed might

00:04:20.899 --> 00:04:22.580
<v Speaker 1>be an issue.

00:04:22.820 --> 00:04:25.460
<v Speaker 1>But, yeah, in general, I would recommend against

00:04:25.460 --> 00:04:26.580
<v Speaker 1>writing a DNS server,

00:04:27.345 --> 00:04:30.065
<v Speaker 1>But to just break the molds and have

00:04:30.065 --> 00:04:32.465
<v Speaker 1>something new in the ecosystem, I think CoreDNS

00:04:32.465 --> 00:04:34.145
<v Speaker 1>is a very good good idea.

00:04:34.785 --> 00:04:36.625
<v Speaker 1>Also, if you look at DNS, the protocol

00:04:36.625 --> 00:04:38.465
<v Speaker 1>is is fairly complex nowadays,

00:04:39.200 --> 00:04:41.680
<v Speaker 1>and I don't know from the top of

00:04:41.680 --> 00:04:44.400
<v Speaker 1>my head any new DNS servers that have

00:04:44.400 --> 00:04:47.040
<v Speaker 1>grown, like, CoreDNS did in the past year.

00:04:47.120 --> 00:04:49.840
<v Speaker 1>Like, it's it's bind is from

00:04:50.080 --> 00:04:50.720
<v Speaker 1>the eighties.

00:04:52.015 --> 00:04:55.615
<v Speaker 1>LSD is almost twenty year old now. PowerDNS

00:04:55.615 --> 00:04:57.295
<v Speaker 1>has also been around for a long time.

00:04:57.295 --> 00:04:59.215
<v Speaker 1>I don't know exactly how long, but there

00:04:59.215 --> 00:05:01.455
<v Speaker 1>hasn't been any new DNS software

00:05:02.255 --> 00:05:04.415
<v Speaker 1>in the last decade, I think, except for

00:05:04.415 --> 00:05:04.975
<v Speaker 1>CoreDNS.

00:05:06.010 --> 00:05:08.090
<v Speaker 0>So just something kinda popped in my head

00:05:08.090 --> 00:05:09.930
<v Speaker 0>there as you were talking. Like, I guess,

00:05:09.930 --> 00:05:11.690
<v Speaker 0>you know, DNS is as old as the

00:05:11.690 --> 00:05:13.450
<v Speaker 0>Internet. Right? At least as as what we

00:05:13.450 --> 00:05:16.010
<v Speaker 0>think of. Is it is that protocol still

00:05:16.250 --> 00:05:17.930
<v Speaker 0>evolving? Is it still changing, or is it

00:05:17.930 --> 00:05:18.730
<v Speaker 0>relatively static?

00:05:20.295 --> 00:05:22.215
<v Speaker 1>So the core of the protocol has been

00:05:22.215 --> 00:05:25.335
<v Speaker 1>static since nineteen eighty four ish,

00:05:26.215 --> 00:05:28.055
<v Speaker 1>but a lot of stuff has happened. I

00:05:28.055 --> 00:05:29.975
<v Speaker 1>mean, it's called plain text. It's easy to

00:05:29.975 --> 00:05:31.815
<v Speaker 1>spoof. So there was this effort in a

00:05:31.815 --> 00:05:33.335
<v Speaker 1>sec that actually made it more secure.

00:05:34.070 --> 00:05:36.310
<v Speaker 1>That made a protocol way more complex, and

00:05:36.310 --> 00:05:38.470
<v Speaker 1>not everybody is actually using it. So it's

00:05:38.470 --> 00:05:41.270
<v Speaker 1>it's questionable if that was a good idea.

00:05:42.470 --> 00:05:44.550
<v Speaker 1>And and because it's all like, it runs

00:05:44.550 --> 00:05:45.430
<v Speaker 1>on UDP

00:05:46.125 --> 00:05:48.205
<v Speaker 1>and having to do your own networking with

00:05:48.205 --> 00:05:50.205
<v Speaker 1>UDP is is pretty hard.

00:05:50.525 --> 00:05:53.005
<v Speaker 1>So you see new things popping up, which

00:05:53.005 --> 00:05:55.165
<v Speaker 1>actually are in the presentation. The protocol called

00:05:55.165 --> 00:05:57.725
<v Speaker 1>Do is DNS over HTTP,

00:05:58.470 --> 00:06:01.030
<v Speaker 1>which is interesting. And, QUIC is a new

00:06:01.030 --> 00:06:02.230
<v Speaker 1>protocol being

00:06:02.390 --> 00:06:04.950
<v Speaker 1>finalized, I think, by the ITF. So DOC

00:06:04.950 --> 00:06:07.270
<v Speaker 1>is another thing that's coming along, which means

00:06:07.270 --> 00:06:09.670
<v Speaker 1>we're gonna do DNS over QUIC. So there's

00:06:09.670 --> 00:06:11.190
<v Speaker 1>a lot of stuff happening in that that

00:06:11.190 --> 00:06:13.190
<v Speaker 1>area as well. And

00:06:13.495 --> 00:06:15.815
<v Speaker 1>corner cases are still being found, and they

00:06:15.815 --> 00:06:18.535
<v Speaker 1>need an RC to to detail them and

00:06:18.535 --> 00:06:19.255
<v Speaker 1>how that

00:06:19.655 --> 00:06:22.055
<v Speaker 1>actually properly works. So even though it's an

00:06:22.055 --> 00:06:22.935
<v Speaker 1>old protocol,

00:06:23.495 --> 00:06:25.255
<v Speaker 1>a lot of new things are happening in

00:06:25.255 --> 00:06:27.600
<v Speaker 1>in that space. The core protocol has been

00:06:27.600 --> 00:06:30.000
<v Speaker 1>static as I said for for decades now.

00:06:30.480 --> 00:06:32.320
<v Speaker 0>That's pretty cool. Okay.

00:06:32.720 --> 00:06:35.120
<v Speaker 0>So, again, I mean, DNS sec, you you've

00:06:35.120 --> 00:06:36.560
<v Speaker 0>mentioned that twice now, and it's one of

00:06:36.560 --> 00:06:37.920
<v Speaker 0>those things that I know I'm supposed to

00:06:37.920 --> 00:06:39.520
<v Speaker 0>enable on my domains, and then I just

00:06:39.520 --> 00:06:42.000
<v Speaker 0>never actually do. So

00:06:42.255 --> 00:06:44.495
<v Speaker 0>I'm sure I should. I probably will try

00:06:44.495 --> 00:06:46.335
<v Speaker 0>it one day, but I'm I'll skip it

00:06:46.335 --> 00:06:49.135
<v Speaker 0>for now. It it's it's complex. Although I

00:06:49.135 --> 00:06:51.135
<v Speaker 1>wrote thing for that in CoreDNS because we

00:06:51.135 --> 00:06:52.895
<v Speaker 1>got annoyed with it as well. And and

00:06:52.895 --> 00:06:54.495
<v Speaker 0>why are you just getting better and even

00:06:54.495 --> 00:06:56.815
<v Speaker 1>as the EmpowerDNS have a good tuning for

00:06:56.815 --> 00:06:59.319
<v Speaker 1>that as well. But, no, you do it

00:06:59.319 --> 00:07:02.280
<v Speaker 1>on your server and nobody validates those signatures

00:07:02.280 --> 00:07:04.520
<v Speaker 1>you're adding, it don't add any value.

00:07:04.840 --> 00:07:07.479
<v Speaker 0>Ah, okay. It sounds like you're kinda scratching

00:07:07.479 --> 00:07:09.160
<v Speaker 0>a lot of your own edges or pain

00:07:09.160 --> 00:07:11.479
<v Speaker 0>points with CoreDNS. It's like you're getting frustrated

00:07:11.479 --> 00:07:12.615
<v Speaker 0>with things and you're going, right. I can

00:07:12.615 --> 00:07:14.295
<v Speaker 0>do this better. Is is that a fair

00:07:14.295 --> 00:07:15.575
<v Speaker 0>guess or assumption?

00:07:16.455 --> 00:07:18.455
<v Speaker 1>Yeah. Well, that's how it started because I

00:07:18.455 --> 00:07:21.014
<v Speaker 1>wanna make a few metrics from bind, and

00:07:21.014 --> 00:07:22.535
<v Speaker 1>bind doesn't do this out of the box.

00:07:22.535 --> 00:07:24.855
<v Speaker 1>So you have intermediate binary which compiles some

00:07:24.855 --> 00:07:25.495
<v Speaker 1>stuff from

00:07:26.490 --> 00:07:27.370
<v Speaker 1>XML,

00:07:27.370 --> 00:07:29.530
<v Speaker 1>but bind output it at a time. So

00:07:29.530 --> 00:07:31.050
<v Speaker 1>that led to me thinking

00:07:31.289 --> 00:07:33.610
<v Speaker 1>I have this Go DNS library, which is

00:07:33.610 --> 00:07:34.410
<v Speaker 1>pretty okay.

00:07:35.050 --> 00:07:36.889
<v Speaker 1>How hard can it be to actually write

00:07:36.889 --> 00:07:37.690
<v Speaker 1>a DNS server?

00:07:38.635 --> 00:07:39.275
<v Speaker 1>And

00:07:39.675 --> 00:07:40.955
<v Speaker 1>at the time, I was looking at a

00:07:40.955 --> 00:07:43.115
<v Speaker 1>new web server for the whole lesson group

00:07:43.115 --> 00:07:44.635
<v Speaker 1>stuff. And, Gedi,

00:07:45.195 --> 00:07:48.475
<v Speaker 1>a Go server written by Matt Holt, did

00:07:48.475 --> 00:07:50.235
<v Speaker 1>all that stuff, and that looked pretty amazing.

00:07:50.659 --> 00:07:52.340
<v Speaker 1>And that got me thinking, like, maybe I

00:07:52.340 --> 00:07:53.939
<v Speaker 1>can use the same model that Kelly is

00:07:53.939 --> 00:07:55.780
<v Speaker 1>using and just run the NSR.

00:07:56.180 --> 00:07:59.379
<v Speaker 1>And that's actually I forked Kelly and basically

00:07:59.379 --> 00:08:02.259
<v Speaker 1>replaced HTTP with DNS and the source code

00:08:02.875 --> 00:08:04.795
<v Speaker 1>after two weeks of failure.

00:08:05.115 --> 00:08:07.995
<v Speaker 1>Compile it, and it was resembling a DNS

00:08:07.995 --> 00:08:10.555
<v Speaker 1>server. So that was pretty much my own

00:08:10.555 --> 00:08:12.555
<v Speaker 1>itch to and it did, of course, for

00:08:12.555 --> 00:08:13.355
<v Speaker 1>metrics.

00:08:13.835 --> 00:08:15.595
<v Speaker 1>So that was my own itch that I

00:08:15.595 --> 00:08:19.160
<v Speaker 1>scratched and that wasn't into into CoreDNS.

00:08:19.640 --> 00:08:21.160
<v Speaker 1>Amazing. And

00:08:21.720 --> 00:08:23.480
<v Speaker 0>that's great that you had the CADI project

00:08:23.480 --> 00:08:25.000
<v Speaker 0>there or something you could just kinda use

00:08:25.000 --> 00:08:28.280
<v Speaker 0>as, I guess, the server boilerplate and then

00:08:28.280 --> 00:08:30.120
<v Speaker 0>work in all the DNS logic and stuff

00:08:30.120 --> 00:08:31.845
<v Speaker 0>like that. Yep. Yep. Yeah. The whole web

00:08:31.845 --> 00:08:34.085
<v Speaker 1>API here is is is copied from. Okay?

00:08:34.885 --> 00:08:35.924
<v Speaker 0>Very cool.

00:08:36.485 --> 00:08:39.924
<v Speaker 0>So I believe we're gonna start today's session

00:08:40.725 --> 00:08:42.885
<v Speaker 0>with a little bit of a introduction and

00:08:42.885 --> 00:08:43.684
<v Speaker 0>some slides.

00:08:44.049 --> 00:08:45.890
<v Speaker 0>So I'll get your

00:08:47.090 --> 00:08:49.890
<v Speaker 0>Yep. There we go. Your slides are now

00:08:49.890 --> 00:08:50.530
<v Speaker 0>live.

00:08:51.090 --> 00:08:51.890
<v Speaker 1>Thank you.

00:08:52.450 --> 00:08:55.250
<v Speaker 1>Yeah. So as we just discussed, like, CoreDNS,

00:08:55.330 --> 00:08:56.210
<v Speaker 1>very

00:08:56.210 --> 00:08:58.370
<v Speaker 1>much emphasis on on a flexible server.

00:08:59.785 --> 00:09:01.785
<v Speaker 1>The the the the plug in idea that

00:09:01.785 --> 00:09:03.704
<v Speaker 1>we briefly touched upon

00:09:04.105 --> 00:09:06.825
<v Speaker 1>makes it easy to add stuff in CoreDNS,

00:09:07.225 --> 00:09:08.345
<v Speaker 1>so you don't need to be a full

00:09:08.345 --> 00:09:09.785
<v Speaker 1>expert to add stuff

00:09:10.345 --> 00:09:11.305
<v Speaker 1>working in your server.

00:09:12.850 --> 00:09:15.490
<v Speaker 1>And also discuss DNS looks like a very

00:09:15.490 --> 00:09:18.370
<v Speaker 1>simple protocol, but there's many corner cases which

00:09:18.370 --> 00:09:21.089
<v Speaker 1>makes it really, really tricky to to deal

00:09:21.089 --> 00:09:23.170
<v Speaker 1>with. And also people expect speed, so it

00:09:23.170 --> 00:09:26.055
<v Speaker 1>also needs to be blazingly fast. Otherwise, you

00:09:26.055 --> 00:09:28.295
<v Speaker 1>get latencies in in all your application.

00:09:31.175 --> 00:09:33.255
<v Speaker 1>So let's talk about the plug ins.

00:09:34.775 --> 00:09:37.415
<v Speaker 1>Without plug ins, CoreDNS basically doesn't do anything,

00:09:38.339 --> 00:09:38.980
<v Speaker 1>and

00:09:39.459 --> 00:09:41.380
<v Speaker 1>a a plugin is similar to

00:09:41.620 --> 00:09:43.779
<v Speaker 1>a web server spec middleware.

00:09:43.779 --> 00:09:47.060
<v Speaker 1>The original word in CoreDNS was even middleware,

00:09:47.140 --> 00:09:51.779
<v Speaker 1>which at the time used middleware and plugins.

00:09:51.779 --> 00:09:53.620
<v Speaker 1>We settled on plugins at some point.

00:09:54.635 --> 00:09:55.915
<v Speaker 1>We have quite a bit,

00:09:56.715 --> 00:09:58.315
<v Speaker 1>I think 30 ish,

00:09:58.875 --> 00:10:02.315
<v Speaker 1>and they are all configured compile time.

00:10:02.555 --> 00:10:04.155
<v Speaker 1>And we have a file called plug in

00:10:04.155 --> 00:10:06.315
<v Speaker 1>dot config, which tells you what plug ins

00:10:06.315 --> 00:10:08.155
<v Speaker 1>are available in in CoreDNS.

00:10:08.829 --> 00:10:10.589
<v Speaker 1>Here you see a couple of them.

00:10:11.149 --> 00:10:11.950
<v Speaker 1>Metadata,

00:10:11.950 --> 00:10:13.470
<v Speaker 1>that's a plug in that adds some a

00:10:13.470 --> 00:10:14.990
<v Speaker 1>little bit of metadata like

00:10:15.310 --> 00:10:17.310
<v Speaker 1>MAC address. You can add that if you

00:10:17.310 --> 00:10:17.870
<v Speaker 1>want.

00:10:18.430 --> 00:10:20.510
<v Speaker 1>Cancel is to cancel a context

00:10:20.510 --> 00:10:21.470
<v Speaker 1>on the

00:10:21.815 --> 00:10:24.295
<v Speaker 1>on the query. TLS is to set up

00:10:24.295 --> 00:10:27.255
<v Speaker 1>TLS, which is useful for DNS of HTTP,

00:10:27.255 --> 00:10:29.255
<v Speaker 1>for instance, or or gRPC.

00:10:30.135 --> 00:10:32.774
<v Speaker 1>Reload will reload the CoreDNS process

00:10:33.015 --> 00:10:35.015
<v Speaker 1>if it sees changes in its config file.

00:10:35.015 --> 00:10:37.150
<v Speaker 1>So there's a whole range of what plugins

00:10:37.150 --> 00:10:37.870
<v Speaker 1>can do,

00:10:38.510 --> 00:10:40.990
<v Speaker 1>but it's all implemented as as a plugin.

00:10:41.310 --> 00:10:44.190
<v Speaker 1>NSID stands for name server ID. It's a

00:10:44.190 --> 00:10:45.950
<v Speaker 1>little tag you could add to a DNS

00:10:45.950 --> 00:10:46.910
<v Speaker 1>request,

00:10:47.310 --> 00:10:49.755
<v Speaker 1>that tells you when you hit an Anycast

00:10:49.755 --> 00:10:52.955
<v Speaker 1>server, which server actually responded to your request.

00:10:52.955 --> 00:10:54.875
<v Speaker 1>So that could be useful for debugging. So

00:10:54.875 --> 00:10:56.715
<v Speaker 1>there's a whole range of stuff that we

00:10:57.355 --> 00:10:59.435
<v Speaker 1>have in in in CoreDNS.

00:10:59.595 --> 00:11:01.195
<v Speaker 1>So one of the things that people struggle

00:11:01.195 --> 00:11:02.635
<v Speaker 1>with is

00:11:03.160 --> 00:11:04.600
<v Speaker 1>in which order

00:11:05.000 --> 00:11:07.960
<v Speaker 1>are the plugins processed when the CoreDNS sees

00:11:07.960 --> 00:11:08.680
<v Speaker 1>a query.

00:11:09.400 --> 00:11:11.400
<v Speaker 1>And the order is

00:11:13.000 --> 00:11:15.320
<v Speaker 1>done compile time, and the order is what

00:11:15.320 --> 00:11:17.000
<v Speaker 1>the order is in plugin dot config.

00:11:17.585 --> 00:11:19.985
<v Speaker 1>So it doesn't matter how your config looks.

00:11:19.985 --> 00:11:22.305
<v Speaker 1>The order is already predetermined

00:11:22.865 --> 00:11:23.505
<v Speaker 1>by

00:11:23.985 --> 00:11:26.785
<v Speaker 1>compiling this file into CoreDNS, so to speak.

00:11:27.265 --> 00:11:27.585
<v Speaker 1>So

00:11:29.360 --> 00:11:32.160
<v Speaker 1>looking at config special specifies with weapons you

00:11:32.160 --> 00:11:34.000
<v Speaker 1>have and then which order they will be

00:11:34.000 --> 00:11:34.960
<v Speaker 1>executed.

00:11:35.280 --> 00:11:37.360
<v Speaker 1>And the core file, which is the config

00:11:37.360 --> 00:11:38.480
<v Speaker 1>file for CoreDNS,

00:11:38.720 --> 00:11:41.440
<v Speaker 1>specifies the plug in usage for your specific

00:11:41.440 --> 00:11:41.760
<v Speaker 1>server.

00:11:43.075 --> 00:11:44.675
<v Speaker 1>It would be nice if this was all

00:11:44.675 --> 00:11:45.635
<v Speaker 1>dynamic.

00:11:45.875 --> 00:11:48.275
<v Speaker 1>Go doesn't do this yet. Maybe in some

00:11:48.275 --> 00:11:50.435
<v Speaker 1>future rewrite, we will revisit this whole idea

00:11:50.435 --> 00:11:52.675
<v Speaker 1>and it becomes more natural.

00:11:52.755 --> 00:11:54.915
<v Speaker 1>For now, this is how we do things.

00:11:57.500 --> 00:11:59.100
<v Speaker 1>So to look specifically,

00:11:59.260 --> 00:12:01.260
<v Speaker 1>if I have a config file, a core

00:12:01.260 --> 00:12:01.900
<v Speaker 1>file

00:12:02.620 --> 00:12:03.100
<v Speaker 1>with,

00:12:03.420 --> 00:12:05.180
<v Speaker 1>the following plugins,

00:12:05.420 --> 00:12:06.060
<v Speaker 1>cache,

00:12:06.300 --> 00:12:07.580
<v Speaker 1>where am I, log,

00:12:08.995 --> 00:12:11.555
<v Speaker 1>Then if I get a query from from

00:12:11.555 --> 00:12:13.075
<v Speaker 1>the outside to CoreDNS,

00:12:13.155 --> 00:12:15.075
<v Speaker 1>I need to look into the plug in

00:12:15.075 --> 00:12:16.995
<v Speaker 1>of config and see where these plug ins

00:12:16.995 --> 00:12:18.275
<v Speaker 1>are actually configured.

00:12:18.595 --> 00:12:20.435
<v Speaker 1>So cache is on line 44,

00:12:20.675 --> 00:12:22.755
<v Speaker 1>where am I is on line 64, and

00:12:22.755 --> 00:12:24.595
<v Speaker 1>log is on line 37.

00:12:25.090 --> 00:12:27.570
<v Speaker 1>Meaning log will be seen first,

00:12:27.810 --> 00:12:29.890
<v Speaker 1>then cash will see the query, and then

00:12:29.890 --> 00:12:31.970
<v Speaker 1>who am I? We'll see the query, and

00:12:31.970 --> 00:12:33.170
<v Speaker 1>then you can reply.

00:12:33.650 --> 00:12:35.250
<v Speaker 1>So the ordering

00:12:35.570 --> 00:12:37.650
<v Speaker 1>here in the core file doesn't

00:12:37.650 --> 00:12:39.650
<v Speaker 1>matter on how this query is being processed.

00:12:43.685 --> 00:12:44.964
<v Speaker 0>So can I ask a question about that

00:12:44.964 --> 00:12:46.805
<v Speaker 0>if you're happy to take them at all?

00:12:46.805 --> 00:12:49.045
<v Speaker 0>Yeah. I just I I guess

00:12:49.524 --> 00:12:51.204
<v Speaker 0>That's a good thing, though. Right? I'm assuming

00:12:51.204 --> 00:12:53.365
<v Speaker 0>that the the plug in developers and yourself

00:12:53.365 --> 00:12:55.365
<v Speaker 0>and the other contributors, you you understand the

00:12:55.365 --> 00:12:57.340
<v Speaker 0>order and semantics that sense for each of

00:12:57.340 --> 00:12:59.180
<v Speaker 0>these plugins rather than leaving it into the

00:12:59.180 --> 00:13:00.780
<v Speaker 0>hands of the person right in their own

00:13:00.780 --> 00:13:02.540
<v Speaker 0>core file where they could have

00:13:02.860 --> 00:13:04.460
<v Speaker 0>cash at the very end and then never

00:13:04.460 --> 00:13:06.700
<v Speaker 0>actually being used at all. So I guess

00:13:06.700 --> 00:13:08.460
<v Speaker 0>this this is a good feature and I

00:13:08.460 --> 00:13:09.820
<v Speaker 0>guess something that people just need to be

00:13:09.820 --> 00:13:10.140
<v Speaker 0>aware of.

00:13:11.084 --> 00:13:13.325
<v Speaker 1>Yes or no. So we get we'll get

00:13:13.325 --> 00:13:15.805
<v Speaker 1>bug reports by people saying, like, my plug

00:13:15.805 --> 00:13:17.085
<v Speaker 1>in is not executed,

00:13:17.325 --> 00:13:18.925
<v Speaker 1>and that's, like, where it is, where do

00:13:18.925 --> 00:13:20.125
<v Speaker 1>do you put the plug in in your

00:13:20.125 --> 00:13:22.205
<v Speaker 1>plug in config, which is, like, I put

00:13:22.205 --> 00:13:23.885
<v Speaker 1>it last, which is, yeah, then it won't

00:13:23.885 --> 00:13:24.845
<v Speaker 1>get seen probably.

00:13:26.580 --> 00:13:28.420
<v Speaker 1>But sometimes you have two plug ins that

00:13:28.420 --> 00:13:30.580
<v Speaker 1>need to be on precision five, for instance.

00:13:31.140 --> 00:13:32.420
<v Speaker 1>And then you need to make a decision

00:13:32.420 --> 00:13:33.780
<v Speaker 1>which one goes first,

00:13:34.340 --> 00:13:36.820
<v Speaker 1>which if you could just revert the order

00:13:36.820 --> 00:13:37.540
<v Speaker 1>in the

00:13:38.020 --> 00:13:39.860
<v Speaker 1>core file, you wouldn't have that problem.

00:13:40.675 --> 00:13:41.315
<v Speaker 0>Okay.

00:13:41.475 --> 00:13:44.515
<v Speaker 1>So yeah. It's yeah. It is what it

00:13:44.515 --> 00:13:45.075
<v Speaker 1>is.

00:13:45.715 --> 00:13:47.635
<v Speaker 1>Could could be better. I quite like this

00:13:47.635 --> 00:13:49.395
<v Speaker 1>because it's really too too realistic, and you

00:13:49.395 --> 00:13:50.995
<v Speaker 1>can just see what what's happening.

00:13:52.435 --> 00:13:53.875
<v Speaker 1>On those plug ins, we have a whole

00:13:53.875 --> 00:13:55.795
<v Speaker 1>range of them. We are discussing,

00:13:56.459 --> 00:13:58.860
<v Speaker 1>do we need to make this an official

00:13:58.860 --> 00:14:01.420
<v Speaker 1>type of plugin? But there are so many,

00:14:01.420 --> 00:14:03.019
<v Speaker 1>and it's so liberal what you can do

00:14:03.019 --> 00:14:04.620
<v Speaker 1>in the plugin. It's it's pretty hard to

00:14:04.620 --> 00:14:06.220
<v Speaker 1>do this properly.

00:14:06.620 --> 00:14:09.660
<v Speaker 1>But we have plugins that generate some

00:14:09.740 --> 00:14:10.379
<v Speaker 1>response.

00:14:11.215 --> 00:14:13.775
<v Speaker 1>Who am I forward, which goes to another

00:14:13.775 --> 00:14:16.015
<v Speaker 1>server to fetch response and return it.

00:14:16.335 --> 00:14:18.015
<v Speaker 1>Kubernetes plugin,

00:14:18.015 --> 00:14:20.815
<v Speaker 1>which gets its data from the Kubernetes API.

00:14:21.695 --> 00:14:24.255
<v Speaker 1>Other things are queries that are inspected.

00:14:25.769 --> 00:14:28.410
<v Speaker 1>A lock is such a thing. It doesn't

00:14:28.410 --> 00:14:30.170
<v Speaker 1>really inspect it, but it it looks at

00:14:30.170 --> 00:14:33.050
<v Speaker 1>the query and then partnership unlocks what what

00:14:33.050 --> 00:14:33.850
<v Speaker 1>it sees.

00:14:34.490 --> 00:14:35.370
<v Speaker 1>Cache,

00:14:35.449 --> 00:14:37.290
<v Speaker 1>obviously, will catch the query, so it will

00:14:37.290 --> 00:14:39.050
<v Speaker 1>see the query, put it in its cache

00:14:39.050 --> 00:14:40.889
<v Speaker 1>if the response isn't there yet.

00:14:42.135 --> 00:14:44.295
<v Speaker 1>You can inspect the query and change it,

00:14:44.295 --> 00:14:47.575
<v Speaker 1>rewrite template, both sides, all do this. MSID

00:14:47.575 --> 00:14:48.935
<v Speaker 1>is one of those as well.

00:14:49.815 --> 00:14:51.495
<v Speaker 1>You have plug ins that affect the whole

00:14:51.495 --> 00:14:52.214
<v Speaker 1>process.

00:14:52.774 --> 00:14:53.255
<v Speaker 1>Health

00:14:53.620 --> 00:14:56.020
<v Speaker 1>used in in Kubernetes to report

00:14:56.260 --> 00:14:57.540
<v Speaker 1>health endpoint.

00:14:58.340 --> 00:15:01.540
<v Speaker 1>Ready readiness, another thing used in Kubernetes.

00:15:01.700 --> 00:15:03.220
<v Speaker 1>Reload, we saw this.

00:15:04.500 --> 00:15:06.580
<v Speaker 1>All you can do if you reload a

00:15:06.580 --> 00:15:09.904
<v Speaker 1>config file, sorry, you can actually do the

00:15:10.065 --> 00:15:11.904
<v Speaker 1>a a binary on this

00:15:14.144 --> 00:15:16.384
<v Speaker 1>and metrics that actually exports

00:15:16.384 --> 00:15:17.825
<v Speaker 1>Prometheus metrics.

00:15:17.904 --> 00:15:19.345
<v Speaker 1>It's one of the reasons that I actually

00:15:19.345 --> 00:15:20.785
<v Speaker 1>wanted coordinates for purpose.

00:15:22.810 --> 00:15:25.370
<v Speaker 1>And for Core file hamper helpers, you can

00:15:25.370 --> 00:15:26.090
<v Speaker 1>import

00:15:26.890 --> 00:15:29.370
<v Speaker 1>another file or a snippet to make your

00:15:29.370 --> 00:15:31.050
<v Speaker 1>Core file readable.

00:15:32.010 --> 00:15:33.930
<v Speaker 1>Each of these has a readme.

00:15:34.010 --> 00:15:36.410
<v Speaker 1>They're all published on CoreDNS.io.

00:15:37.445 --> 00:15:39.605
<v Speaker 1>I made a W package where our package

00:15:39.605 --> 00:15:42.085
<v Speaker 1>is all as manual pages as well. So

00:15:42.085 --> 00:15:44.245
<v Speaker 1>that that's a good set of documentation.

00:15:44.725 --> 00:15:47.205
<v Speaker 1>It mostly tells you how to use

00:15:48.645 --> 00:15:49.285
<v Speaker 1>a plugin.

00:15:49.700 --> 00:15:53.060
<v Speaker 1>Becomes interesting if there's interaction between different plugins

00:15:53.060 --> 00:15:55.540
<v Speaker 1>and and how you debug stuff, which is

00:15:55.540 --> 00:15:58.580
<v Speaker 1>something we will see, later in this presentation

00:15:58.580 --> 00:16:00.740
<v Speaker 1>on on plugins that might help you there.

00:16:05.285 --> 00:16:06.964
<v Speaker 1>Okay. Let's delve into

00:16:09.444 --> 00:16:12.165
<v Speaker 1>not to work. Into a a config and

00:16:12.165 --> 00:16:13.524
<v Speaker 1>see how this works.

00:16:13.845 --> 00:16:16.084
<v Speaker 1>So we have two config files.

00:16:17.339 --> 00:16:19.740
<v Speaker 1>This one is plain DNS, and what does

00:16:19.740 --> 00:16:20.460
<v Speaker 1>it say?

00:16:20.860 --> 00:16:23.580
<v Speaker 1>I am authoritative for the root zone, which

00:16:23.580 --> 00:16:26.300
<v Speaker 1>is basically the entirety of of DNS.

00:16:27.339 --> 00:16:29.580
<v Speaker 1>And I will run on this port number,

00:16:31.025 --> 00:16:33.745
<v Speaker 1>and this server will have a whoever plug

00:16:33.745 --> 00:16:35.585
<v Speaker 1>in and a log plug in.

00:16:35.985 --> 00:16:37.825
<v Speaker 1>Meaning, it will respond to it, and it

00:16:37.825 --> 00:16:38.705
<v Speaker 1>will log this.

00:16:39.585 --> 00:16:42.945
<v Speaker 1>The new protocol, though, DNS over HTTP,

00:16:43.520 --> 00:16:45.920
<v Speaker 1>similar thing except you just prefix

00:16:47.600 --> 00:16:48.880
<v Speaker 1>the domain

00:16:48.960 --> 00:16:50.240
<v Speaker 1>with HTTPS

00:16:50.240 --> 00:16:54.320
<v Speaker 1>colon slash slash. I'm not sure what Quick

00:16:54.320 --> 00:16:56.960
<v Speaker 1>will do, but it

00:16:56.305 --> 00:16:58.545
<v Speaker 1>probably also gonna be HTTPS. I'm not sure

00:16:58.545 --> 00:17:01.665
<v Speaker 1>how we're gonna make that different in in

00:17:02.225 --> 00:17:03.185
<v Speaker 1>a core file.

00:17:03.505 --> 00:17:05.984
<v Speaker 1>It needs to run on a different port

00:17:05.984 --> 00:17:07.665
<v Speaker 1>in this case, so we do this one.

00:17:08.190 --> 00:17:09.549
<v Speaker 1>Also, this plugin,

00:17:10.029 --> 00:17:12.669
<v Speaker 1>log plugin, and I need TLS

00:17:12.909 --> 00:17:15.309
<v Speaker 1>configured for though it doesn't work if you

00:17:15.309 --> 00:17:16.429
<v Speaker 1>don't have TLS.

00:17:18.429 --> 00:17:19.549
<v Speaker 1>This this is interesting,

00:17:20.884 --> 00:17:23.204
<v Speaker 1>especially if you look at, for instance, and

00:17:23.204 --> 00:17:24.324
<v Speaker 1>let's encrypt.

00:17:24.484 --> 00:17:26.164
<v Speaker 1>It would be cool if we could automate

00:17:26.164 --> 00:17:28.085
<v Speaker 1>this in a similar way, but being a

00:17:28.085 --> 00:17:29.604
<v Speaker 1>DNS server has some

00:17:29.845 --> 00:17:30.884
<v Speaker 1>interesting

00:17:31.845 --> 00:17:33.044
<v Speaker 1>things that we need to look at.

00:17:35.610 --> 00:17:38.090
<v Speaker 1>Let's let's see how this work. Let's shift

00:17:38.090 --> 00:17:38.730
<v Speaker 1>to

00:17:39.850 --> 00:17:40.650
<v Speaker 1>my terminal.

00:17:51.945 --> 00:17:52.745
<v Speaker 1>So

00:17:53.785 --> 00:17:55.544
<v Speaker 1>I have a couple of things here.

00:17:56.585 --> 00:17:59.065
<v Speaker 1>I found a parking utility called Homer, which

00:17:59.065 --> 00:18:01.625
<v Speaker 1>actually speaks DNS over HTTP

00:18:01.625 --> 00:18:04.100
<v Speaker 1>because because my go to utility deck doesn't

00:18:04.100 --> 00:18:04.980
<v Speaker 1>do it yet.

00:18:05.540 --> 00:18:07.620
<v Speaker 1>So I have a

00:18:07.940 --> 00:18:09.780
<v Speaker 1>core file here, which is basically the thing

00:18:09.780 --> 00:18:10.980
<v Speaker 1>I just shown you.

00:18:11.700 --> 00:18:13.860
<v Speaker 1>It's one core file. So this core file

00:18:13.860 --> 00:18:15.940
<v Speaker 1>will start two internal servers,

00:18:16.495 --> 00:18:18.494
<v Speaker 1>one those server and one

00:18:19.054 --> 00:18:20.335
<v Speaker 1>a normal one.

00:18:20.975 --> 00:18:23.215
<v Speaker 1>And there's not so much to it. I

00:18:23.215 --> 00:18:25.534
<v Speaker 1>can just according as my score is core

00:18:25.534 --> 00:18:26.174
<v Speaker 1>file.

00:18:26.735 --> 00:18:29.135
<v Speaker 1>Port numbers are already specified in the core

00:18:29.135 --> 00:18:30.655
<v Speaker 1>file, so this should just start.

00:18:31.990 --> 00:18:34.789
<v Speaker 1>It does we have the server starting for

00:18:34.789 --> 00:18:37.110
<v Speaker 1>the root zone and the those server also

00:18:37.110 --> 00:18:38.789
<v Speaker 1>for the root zone on this port.

00:18:40.870 --> 00:18:42.629
<v Speaker 1>Skip to this.

00:18:45.190 --> 00:18:47.029
<v Speaker 1>So big, like, local host,

00:18:49.035 --> 00:18:50.955
<v Speaker 1>any record, who am I?

00:18:54.475 --> 00:18:55.994
<v Speaker 1>This will give me a reply.

00:18:56.875 --> 00:18:57.914
<v Speaker 1>And you see

00:18:58.475 --> 00:19:01.515
<v Speaker 1>where am I replied to me. I got

00:19:00.890 --> 00:19:03.690
<v Speaker 1>this data back, which is a bit nonsensical.

00:19:03.930 --> 00:19:06.170
<v Speaker 1>It tells who am I, which is my

00:19:06.170 --> 00:19:09.290
<v Speaker 1>IP address and port number I was asking

00:19:09.290 --> 00:19:11.530
<v Speaker 1>the question on and the protocol.

00:19:13.575 --> 00:19:15.174
<v Speaker 1>It's a bit silly, but it's a nice

00:19:15.174 --> 00:19:17.894
<v Speaker 1>tool for debug things and demos like this.

00:19:18.934 --> 00:19:21.334
<v Speaker 1>Nice. You also see it it's locked,

00:19:22.215 --> 00:19:23.735
<v Speaker 1>which is what the lock plug in do

00:19:23.815 --> 00:19:24.374
<v Speaker 1>does.

00:19:26.294 --> 00:19:27.414
<v Speaker 1>So

00:19:30.040 --> 00:19:31.799
<v Speaker 1>I prepared

00:19:32.280 --> 00:19:33.480
<v Speaker 1>little shell script.

00:19:33.800 --> 00:19:36.040
<v Speaker 1>This goes to the other port fourteen forty

00:19:36.040 --> 00:19:36.600
<v Speaker 1>three,

00:19:38.120 --> 00:19:40.440
<v Speaker 1>and it asks the same question over

00:19:40.520 --> 00:19:41.160
<v Speaker 1>HPS.

00:19:43.145 --> 00:19:44.424
<v Speaker 1>It's a bit silly.

00:19:44.665 --> 00:19:45.304
<v Speaker 1>The

00:19:45.545 --> 00:19:48.184
<v Speaker 1>actual ID is always zero, which is

00:19:48.505 --> 00:19:51.305
<v Speaker 1>not how it should be. The buffer size,

00:19:51.305 --> 00:19:53.065
<v Speaker 1>because we are asking of TCP

00:19:53.145 --> 00:19:55.545
<v Speaker 1>defaults to this value, that's all

00:19:56.650 --> 00:19:57.450
<v Speaker 1>details.

00:19:59.130 --> 00:20:01.610
<v Speaker 1>But you see here that we actually query

00:20:01.690 --> 00:20:02.649
<v Speaker 1>CoreDNS

00:20:02.890 --> 00:20:05.690
<v Speaker 1>on this URL because it's it's PS,

00:20:05.770 --> 00:20:07.210
<v Speaker 1>and we got a similar answer.

00:20:08.935 --> 00:20:10.054
<v Speaker 1>You see here,

00:20:10.295 --> 00:20:12.695
<v Speaker 1>it's TCP because of HTTPS.

00:20:12.855 --> 00:20:14.855
<v Speaker 1>Different ports, but we're still coming from local

00:20:14.855 --> 00:20:17.575
<v Speaker 1>host. So this works. You can just use

00:20:17.575 --> 00:20:18.934
<v Speaker 1>CoreDNS

00:20:19.095 --> 00:20:21.415
<v Speaker 1>as a server that does go.

00:20:22.370 --> 00:20:24.210
<v Speaker 1>A quick will be added once that's fully

00:20:24.210 --> 00:20:25.090
<v Speaker 1>specified.

00:20:25.570 --> 00:20:27.650
<v Speaker 1>One thing we're not doing yet is we

00:20:27.650 --> 00:20:29.570
<v Speaker 1>can't forward queries to

00:20:29.890 --> 00:20:31.650
<v Speaker 1>DNS over HTTP server.

00:20:32.050 --> 00:20:33.890
<v Speaker 1>We are missing a plug in that does

00:20:33.890 --> 00:20:34.050
<v Speaker 1>that.

00:20:38.805 --> 00:20:39.445
<v Speaker 1>Cool.

00:20:41.365 --> 00:20:42.005
<v Speaker 1>Do

00:20:43.845 --> 00:20:44.645
<v Speaker 0>you see

00:20:44.885 --> 00:20:46.965
<v Speaker 0>DNS over HTTPS?

00:20:47.525 --> 00:20:49.445
<v Speaker 0>Just is that the new standard now? Would

00:20:49.445 --> 00:20:51.285
<v Speaker 0>you say always default to that if possible?

00:20:51.285 --> 00:20:53.080
<v Speaker 0>I mean, are there any considerations that people

00:20:53.080 --> 00:20:55.480
<v Speaker 0>should be making with, like you know, start

00:20:55.480 --> 00:20:57.960
<v Speaker 0>with the UDP approach and then bring it

00:20:57.960 --> 00:20:59.400
<v Speaker 0>and phase it in? Like, what what's your

00:20:59.400 --> 00:21:00.200
<v Speaker 0>thoughts on that?

00:21:00.760 --> 00:21:01.399
<v Speaker 1>So

00:21:02.280 --> 00:21:03.559
<v Speaker 1>with dough,

00:21:03.720 --> 00:21:05.160
<v Speaker 1>browser's good is now native.

00:21:06.175 --> 00:21:09.295
<v Speaker 1>Meaning the whole DNS ecosystem was always you

00:21:09.295 --> 00:21:11.375
<v Speaker 1>need to upgrade every box on Earth to

00:21:11.375 --> 00:21:13.375
<v Speaker 1>actually have your code being deployed

00:21:13.615 --> 00:21:15.455
<v Speaker 1>in the resolve of all the machines.

00:21:15.775 --> 00:21:17.855
<v Speaker 1>And now Google just pushes out a new

00:21:17.855 --> 00:21:19.535
<v Speaker 1>version of Chrome, and everybody is using an

00:21:19.535 --> 00:21:22.490
<v Speaker 1>upgraded version of of DNS or HPS.

00:21:22.970 --> 00:21:24.890
<v Speaker 1>And there's this whole thing, what I said,

00:21:24.890 --> 00:21:25.450
<v Speaker 1>like,

00:21:25.850 --> 00:21:27.450
<v Speaker 1>DNS was plain text.

00:21:27.929 --> 00:21:30.809
<v Speaker 1>DNSSEC didn't change that. It just added signatures.

00:21:31.610 --> 00:21:33.610
<v Speaker 1>So with DOE, for the first time, you

00:21:33.610 --> 00:21:35.530
<v Speaker 1>actually can't inspect DNS traffic,

00:21:36.315 --> 00:21:37.434
<v Speaker 1>which is

00:21:37.595 --> 00:21:38.554
<v Speaker 1>interesting

00:21:38.554 --> 00:21:41.034
<v Speaker 1>in certain parts of the world or maybe

00:21:41.034 --> 00:21:43.674
<v Speaker 1>all of them, but that's a whole whole

00:21:44.075 --> 00:21:45.274
<v Speaker 1>different discussion.

00:21:46.235 --> 00:21:48.315
<v Speaker 1>So that's that's one of the main drivers

00:21:48.315 --> 00:21:50.475
<v Speaker 1>for for DNS of HTTPS.

00:21:52.110 --> 00:21:54.350
<v Speaker 0>I I I don't wanna divert too much,

00:21:54.350 --> 00:21:56.190
<v Speaker 0>but I'll ask one more question. Does the

00:21:56.190 --> 00:21:58.590
<v Speaker 0>metrics, the CoreDNS exposed, does that give me

00:21:58.590 --> 00:22:00.430
<v Speaker 0>a breakdown over the quest the protocol that

00:22:00.430 --> 00:22:01.630
<v Speaker 0>was handled? Will it tell me if it

00:22:01.630 --> 00:22:03.310
<v Speaker 0>was DNS or HTTPS or whether it was

00:22:03.310 --> 00:22:03.950
<v Speaker 0>plain DNS?

00:22:05.504 --> 00:22:08.144
<v Speaker 1>No. I think we only do UDP TCP,

00:22:08.384 --> 00:22:10.384
<v Speaker 1>which which might be an interesting thing to

00:22:10.544 --> 00:22:11.584
<v Speaker 1>to add.

00:22:12.544 --> 00:22:14.864
<v Speaker 0>Okay. Cool. I'll play around with that.

00:22:15.664 --> 00:22:15.985
<v Speaker 1>Yeah.

00:22:16.900 --> 00:22:18.660
<v Speaker 1>We see? Yeah. We can definitely see how

00:22:18.660 --> 00:22:20.100
<v Speaker 1>it comes in. So it might actually be

00:22:20.100 --> 00:22:21.139
<v Speaker 1>a nice thing to

00:22:22.340 --> 00:22:25.860
<v Speaker 1>to have. Running both UDP service and HPS

00:22:25.860 --> 00:22:28.820
<v Speaker 1>service is kind of strange because then you

00:22:28.820 --> 00:22:30.900
<v Speaker 1>don't have nobody can see my queries because

00:22:30.900 --> 00:22:33.414
<v Speaker 1>you're still doing the the plain old QDP.

00:22:33.495 --> 00:22:35.414
<v Speaker 1>But a fair point.

00:22:37.575 --> 00:22:38.294
<v Speaker 1>Oh,

00:22:38.375 --> 00:22:40.294
<v Speaker 1>scrolling the wrong wrong window.

00:22:42.934 --> 00:22:44.054
<v Speaker 1>On those multiple servers

00:22:45.300 --> 00:22:47.380
<v Speaker 1>so this is a a core file

00:22:47.860 --> 00:22:49.060
<v Speaker 1>that defines

00:22:49.380 --> 00:22:52.660
<v Speaker 1>two servers, basically, two internal coordinate servers.

00:22:53.620 --> 00:22:55.780
<v Speaker 1>One serves the example of our domain on

00:22:55.780 --> 00:22:57.620
<v Speaker 1>port 53,

00:22:57.825 --> 00:23:00.065
<v Speaker 1>and the other one serves the example.net

00:23:00.065 --> 00:23:02.304
<v Speaker 1>domain on 53.

00:23:02.865 --> 00:23:03.984
<v Speaker 1>So these are

00:23:04.784 --> 00:23:07.585
<v Speaker 1>the same listener, but internally, this means there

00:23:07.585 --> 00:23:09.585
<v Speaker 1>are two servers in CoreDNS

00:23:10.010 --> 00:23:12.570
<v Speaker 1>responding to queries for these two

00:23:13.450 --> 00:23:14.330
<v Speaker 1>domains.

00:23:14.330 --> 00:23:15.690
<v Speaker 1>And you can see the difference, which I

00:23:15.690 --> 00:23:16.410
<v Speaker 1>will show.

00:23:16.810 --> 00:23:19.290
<v Speaker 1>One of the servers will lock because it

00:23:19.290 --> 00:23:20.410
<v Speaker 1>has the lock

00:23:20.490 --> 00:23:22.330
<v Speaker 1>plug in, and the other one will stay

00:23:22.330 --> 00:23:23.690
<v Speaker 1>silent and won't do anything.

00:23:24.304 --> 00:23:26.304
<v Speaker 1>Now that if you enable

00:23:26.625 --> 00:23:27.904
<v Speaker 1>the log plug in,

00:23:28.865 --> 00:23:31.025
<v Speaker 1>if you have a busy server and you

00:23:31.025 --> 00:23:32.865
<v Speaker 1>are logging a lot, that will

00:23:33.985 --> 00:23:35.184
<v Speaker 1>take away some performance.

00:23:37.950 --> 00:23:40.830
<v Speaker 1>I'm not going back to my terminal.

00:23:42.750 --> 00:23:43.790
<v Speaker 1>I'll stop this.

00:23:51.005 --> 00:23:52.685
<v Speaker 1>So this is the core file

00:23:54.365 --> 00:23:55.485
<v Speaker 1>from the slides.

00:23:56.845 --> 00:23:59.165
<v Speaker 1>Same here. I populated all these directories with

00:23:59.165 --> 00:24:01.085
<v Speaker 1>the CoreDNS part of me, so to make

00:24:01.085 --> 00:24:02.285
<v Speaker 1>it nice and easy.

00:24:03.450 --> 00:24:06.890
<v Speaker 1>We started, it prints out, all this the

00:24:06.890 --> 00:24:09.929
<v Speaker 1>mini servers that's running. So those are those

00:24:09.929 --> 00:24:10.970
<v Speaker 1>those two.

00:24:12.169 --> 00:24:13.690
<v Speaker 1>We can do the same thing as as

00:24:13.690 --> 00:24:14.889
<v Speaker 1>just now.

00:24:15.770 --> 00:24:16.650
<v Speaker 1>I have a deck,

00:24:17.665 --> 00:24:21.025
<v Speaker 1>for example, .net. So this shouldn't show anything

00:24:21.025 --> 00:24:23.665
<v Speaker 1>on the CoreDNS site, which it didn't because

00:24:23.665 --> 00:24:25.904
<v Speaker 1>it didn't have the log, plugin.

00:24:26.465 --> 00:24:28.625
<v Speaker 1>But if I'll ask one for org,

00:24:30.840 --> 00:24:32.920
<v Speaker 1>it does give a logline because it has

00:24:32.920 --> 00:24:34.039
<v Speaker 1>a login

00:24:34.040 --> 00:24:36.600
<v Speaker 1>that says it does must do so.

00:24:37.240 --> 00:24:39.480
<v Speaker 1>All all what you see here is it's

00:24:39.480 --> 00:24:40.360
<v Speaker 1>pretty basic.

00:24:41.559 --> 00:24:42.759
<v Speaker 1>This is the

00:24:43.160 --> 00:24:45.240
<v Speaker 1>remote address, so the reason for asking.

00:24:46.865 --> 00:24:49.105
<v Speaker 1>I can't actually remember what this was, but

00:24:49.105 --> 00:24:50.305
<v Speaker 1>this is what the

00:24:50.545 --> 00:24:51.585
<v Speaker 1>question was.

00:24:51.745 --> 00:24:52.705
<v Speaker 1>Protocol

00:24:53.265 --> 00:24:55.505
<v Speaker 1>size of the incoming request.

00:24:57.185 --> 00:24:58.865
<v Speaker 1>Do I want DNSSEC

00:24:58.865 --> 00:24:59.745
<v Speaker 1>or not?

00:24:59.985 --> 00:25:01.825
<v Speaker 1>And what my UDP buffer is?

00:25:02.970 --> 00:25:05.529
<v Speaker 1>And then this stuff is the actual answer.

00:25:05.610 --> 00:25:07.289
<v Speaker 1>So we didn't see an error.

00:25:10.410 --> 00:25:12.890
<v Speaker 1>The answer was a 12 bytes, and it

00:25:12.890 --> 00:25:14.730
<v Speaker 1>took this amount of time to actually generate

00:25:14.730 --> 00:25:15.050
<v Speaker 1>it.

00:25:15.905 --> 00:25:17.585
<v Speaker 1>And some of this stuff is also in

00:25:17.585 --> 00:25:19.905
<v Speaker 1>the in the metrics if you have metrics

00:25:19.905 --> 00:25:20.705
<v Speaker 1>enabled.

00:25:23.105 --> 00:25:23.505
<v Speaker 0>K.

00:25:28.350 --> 00:25:31.630
<v Speaker 0>So is it a standard practice for like

00:25:31.950 --> 00:25:34.190
<v Speaker 0>looking at that conflict, I mean, and now

00:25:34.190 --> 00:25:36.110
<v Speaker 0>knowing that it came from the caddy

00:25:36.190 --> 00:25:38.590
<v Speaker 0>kind of background. So those are essentially like

00:25:38.590 --> 00:25:40.845
<v Speaker 0>virtual hosts and then you're just gonna using

00:25:40.845 --> 00:25:43.485
<v Speaker 0>that some Yep. For that the Genesys response.

00:25:44.525 --> 00:25:46.605
<v Speaker 0>Would you run them on different ports, or

00:25:46.605 --> 00:25:49.085
<v Speaker 0>would that just always be the same port?

00:25:49.165 --> 00:25:50.445
<v Speaker 1>No. You can also run them on different

00:25:50.445 --> 00:25:52.525
<v Speaker 1>port. Then you actually get multiple listeners in

00:25:52.525 --> 00:25:55.085
<v Speaker 1>the CoreDNS process to pick those up. But

00:25:55.165 --> 00:25:55.245
<v Speaker 1>yes.

00:25:56.180 --> 00:25:58.180
<v Speaker 0>Okay. Cool. Yeah. I can change the port,

00:25:58.180 --> 00:25:59.620
<v Speaker 1>and then I need to change the ports

00:25:59.620 --> 00:26:00.900
<v Speaker 1>and then they come on as well. There's

00:26:00.900 --> 00:26:01.700
<v Speaker 1>no difference.

00:26:02.180 --> 00:26:03.539
<v Speaker 0>Alright. Just curious.

00:26:07.220 --> 00:26:09.460
<v Speaker 1>So one of the big things in in

00:26:09.460 --> 00:26:11.934
<v Speaker 1>DNS is that it's super hard to debug,

00:26:12.255 --> 00:26:14.735
<v Speaker 1>and I will not claim that these following

00:26:14.735 --> 00:26:17.375
<v Speaker 1>slides will make you a debug expert because

00:26:17.375 --> 00:26:18.414
<v Speaker 1>it's still hard.

00:26:18.815 --> 00:26:20.735
<v Speaker 1>Couple of reasons why this is hard, mostly

00:26:20.735 --> 00:26:23.215
<v Speaker 1>because the volume of DNS queries are probably

00:26:23.215 --> 00:26:23.774
<v Speaker 1>large.

00:26:24.289 --> 00:26:26.850
<v Speaker 1>So if one or in a thousand queries

00:26:26.850 --> 00:26:30.049
<v Speaker 1>fails, how do you see this one query

00:26:30.049 --> 00:26:30.849
<v Speaker 1>failing

00:26:30.850 --> 00:26:32.850
<v Speaker 1>even though somebody actually had a problem with

00:26:32.850 --> 00:26:34.850
<v Speaker 1>the application because that one query timed out

00:26:34.850 --> 00:26:35.649
<v Speaker 1>or whatever?

00:26:35.970 --> 00:26:37.330
<v Speaker 1>So that's that's

00:26:38.294 --> 00:26:39.494
<v Speaker 1>a thing. And,

00:26:40.695 --> 00:26:41.974
<v Speaker 1>but I said logging

00:26:42.855 --> 00:26:45.174
<v Speaker 1>on on scale is hard to do. So

00:26:45.174 --> 00:26:47.335
<v Speaker 1>it's it's really hard to just find, like,

00:26:47.335 --> 00:26:49.975
<v Speaker 1>one in a million queries that timed out

00:26:49.975 --> 00:26:50.695
<v Speaker 1>for some reason,

00:26:51.460 --> 00:26:53.700
<v Speaker 1>which is why and because CoreDNS is lower

00:26:53.700 --> 00:26:56.740
<v Speaker 1>in the stack, anything that that fails to,

00:26:56.980 --> 00:27:00.180
<v Speaker 1>properly work here has repercussions,

00:27:00.580 --> 00:27:02.820
<v Speaker 1>higher up, which means things

00:27:03.300 --> 00:27:05.460
<v Speaker 1>don't work or have a humongous amount of

00:27:05.460 --> 00:27:05.940
<v Speaker 1>latency.

00:27:10.175 --> 00:27:11.934
<v Speaker 1>So couple of plug ins. We have the

00:27:11.934 --> 00:27:12.975
<v Speaker 1>debug plug in.

00:27:13.375 --> 00:27:15.134
<v Speaker 1>That's a fairly new thing.

00:27:15.855 --> 00:27:17.855
<v Speaker 1>You can lock debug from within a plug

00:27:17.855 --> 00:27:18.015
<v Speaker 1>in.

00:27:18.700 --> 00:27:20.620
<v Speaker 1>And if you enable the debug plugin, that

00:27:20.620 --> 00:27:22.780
<v Speaker 1>actually shows up in your outputs

00:27:23.100 --> 00:27:24.460
<v Speaker 1>in standard output.

00:27:25.660 --> 00:27:29.020
<v Speaker 1>It also stops CoreDNS recovering from panics.

00:27:29.980 --> 00:27:32.700
<v Speaker 1>Panics are both thing. If CoreDNS has out

00:27:32.700 --> 00:27:34.300
<v Speaker 1>of bounds read, it will crash.

00:27:35.555 --> 00:27:37.715
<v Speaker 1>By default, it will then just restart.

00:27:38.115 --> 00:27:40.115
<v Speaker 1>I will not actually crash. It will intercept

00:27:40.115 --> 00:27:42.914
<v Speaker 1>the panic and will just continue running.

00:27:43.955 --> 00:27:47.395
<v Speaker 1>Furthermore, there's pprof. So there is for go

00:27:47.475 --> 00:27:48.355
<v Speaker 1>pprofing.

00:27:48.355 --> 00:27:50.240
<v Speaker 1>You could just enable a plug in, connect

00:27:50.240 --> 00:27:51.519
<v Speaker 1>to the remote port,

00:27:51.760 --> 00:27:53.919
<v Speaker 1>and get a pprof of the binary.

00:27:54.480 --> 00:27:58.559
<v Speaker 1>Prometheus already talked about adding metrics,

00:27:58.559 --> 00:27:59.840
<v Speaker 1>which you always should,

00:28:01.135 --> 00:28:02.174
<v Speaker 1>and trace

00:28:02.175 --> 00:28:05.455
<v Speaker 1>those actual open tracing of a request within

00:28:05.455 --> 00:28:06.414
<v Speaker 1>CoreDNS.

00:28:06.815 --> 00:28:09.375
<v Speaker 1>Those are all useful things to to have,

00:28:09.934 --> 00:28:12.575
<v Speaker 1>especially tracing can be can be handy

00:28:12.780 --> 00:28:15.100
<v Speaker 1>to just see what's happening. Although it's not

00:28:15.100 --> 00:28:17.260
<v Speaker 1>too interesting because usually according as future query

00:28:17.260 --> 00:28:20.220
<v Speaker 1>forwards, it's too extreme and then gives back

00:28:20.220 --> 00:28:22.060
<v Speaker 1>an answer, which it may or may not

00:28:22.060 --> 00:28:22.620
<v Speaker 1>get.

00:28:23.580 --> 00:28:25.980
<v Speaker 1>Another thing that we have is DNS step,

00:28:25.980 --> 00:28:28.540
<v Speaker 1>which is a gRPC protocol

00:28:28.835 --> 00:28:32.514
<v Speaker 1>which forwards all generated queries to a DNS

00:28:32.595 --> 00:28:33.875
<v Speaker 1>step endpoint

00:28:34.195 --> 00:28:36.115
<v Speaker 1>and will allow you to see

00:28:36.515 --> 00:28:39.955
<v Speaker 1>what queries are received by CoreDNS and what

00:28:39.955 --> 00:28:42.115
<v Speaker 1>queries CoreDNS itself also does.

00:28:43.929 --> 00:28:44.570
<v Speaker 1>And

00:28:47.210 --> 00:28:49.850
<v Speaker 1>as with always, it's just enabling a a

00:28:49.850 --> 00:28:52.730
<v Speaker 1>plugin. So this stands out of a core

00:28:52.730 --> 00:28:55.130
<v Speaker 1>file. We run a server for the root

00:28:55.130 --> 00:28:57.610
<v Speaker 1>domain, so we capture all incoming queries.

00:28:58.054 --> 00:28:59.894
<v Speaker 1>We will forward them to Google.

00:29:00.215 --> 00:29:02.375
<v Speaker 1>We will lock the queries, but we'll also

00:29:02.375 --> 00:29:05.254
<v Speaker 1>DNS step the queries to, the socket.

00:29:05.735 --> 00:29:07.495
<v Speaker 1>And on the other side, that socket needs

00:29:07.495 --> 00:29:10.215
<v Speaker 1>to be running, DNS step binary, which will

00:29:10.215 --> 00:29:13.070
<v Speaker 1>show you the queries, being received and the

00:29:13.070 --> 00:29:15.630
<v Speaker 1>queries being forward to to Google.

00:29:15.790 --> 00:29:17.710
<v Speaker 1>So this can be really, really powerful

00:29:17.790 --> 00:29:20.190
<v Speaker 1>in actually seeing and and capturing what is

00:29:20.190 --> 00:29:22.110
<v Speaker 1>happening with with this process.

00:29:24.190 --> 00:29:26.030
<v Speaker 1>Note that a lot of stuff, especially in

00:29:26.030 --> 00:29:26.750
<v Speaker 1>Kubernetes,

00:29:28.365 --> 00:29:30.125
<v Speaker 1>we've seen issues where

00:29:30.605 --> 00:29:33.005
<v Speaker 1>IP tables are filling up.

00:29:33.565 --> 00:29:36.765
<v Speaker 1>So if the query doesn't reach CoreDNS,

00:29:37.085 --> 00:29:38.365
<v Speaker 1>this will be useless.

00:29:38.685 --> 00:29:40.125
<v Speaker 1>Then you will need to do a step

00:29:40.125 --> 00:29:42.525
<v Speaker 1>on your note to actually see where

00:29:42.850 --> 00:29:45.169
<v Speaker 1>is the traffic going. And, usually, it's it's

00:29:45.169 --> 00:29:47.090
<v Speaker 1>dropped. We've seen it quite a lot of

00:29:47.090 --> 00:29:48.049
<v Speaker 1>times in

00:29:49.570 --> 00:29:50.370
<v Speaker 1>Kubernetes,

00:29:50.370 --> 00:29:50.929
<v Speaker 1>for instance.

00:29:52.210 --> 00:29:53.889
<v Speaker 1>Okay. I prepared a demo for this as

00:29:53.889 --> 00:29:56.369
<v Speaker 1>well, so I will switch to

00:29:56.370 --> 00:29:57.169
<v Speaker 1>my terminal.

00:30:01.695 --> 00:30:02.495
<v Speaker 1>Quit.

00:30:12.940 --> 00:30:14.540
<v Speaker 1>The core file oh, I've had a debug

00:30:14.540 --> 00:30:16.220
<v Speaker 1>for good measure here, which is which is

00:30:16.220 --> 00:30:16.860
<v Speaker 1>fine.

00:30:17.260 --> 00:30:19.020
<v Speaker 1>So this is the same core file I've

00:30:19.020 --> 00:30:19.980
<v Speaker 1>just shown.

00:30:20.460 --> 00:30:22.220
<v Speaker 1>Let me start my

00:30:23.020 --> 00:30:24.620
<v Speaker 1>DNS test binary.

00:30:27.265 --> 00:30:29.825
<v Speaker 1>So this open the sockets unit sockets on

00:30:29.825 --> 00:30:31.825
<v Speaker 1>temp unit tap dot sock.

00:30:32.945 --> 00:30:33.745
<v Speaker 1>It

00:30:34.065 --> 00:30:36.225
<v Speaker 1>will, I think, barf out YAML.

00:30:36.785 --> 00:30:39.025
<v Speaker 1>So we should see some YAML if I

00:30:39.025 --> 00:30:39.825
<v Speaker 1>start CoreDNS.

00:30:42.080 --> 00:30:43.440
<v Speaker 0>We all love YAML.

00:30:43.760 --> 00:30:44.720
<v Speaker 0>Yeah.

00:30:45.520 --> 00:30:47.200
<v Speaker 1>Yeah. It's also JSON, so maybe I should

00:30:47.200 --> 00:30:48.080
<v Speaker 1>have done it.

00:30:49.680 --> 00:30:50.960
<v Speaker 1>Let's query this

00:30:51.920 --> 00:30:54.560
<v Speaker 1>and allow us for the MX records of

00:30:54.560 --> 00:30:55.120
<v Speaker 1>example.

00:30:56.425 --> 00:30:57.225
<v Speaker 1>Oh,

00:30:57.865 --> 00:30:58.904
<v Speaker 1>dot net.

00:31:01.145 --> 00:31:02.664
<v Speaker 1>I'm seeing a bunch of things.

00:31:02.985 --> 00:31:04.825
<v Speaker 1>Of course, this is the answer that I

00:31:04.825 --> 00:31:06.184
<v Speaker 1>got from CoreDNS.

00:31:07.225 --> 00:31:09.065
<v Speaker 1>Don't look at how this looks, but this

00:31:09.065 --> 00:31:10.185
<v Speaker 1>is

00:31:10.390 --> 00:31:12.470
<v Speaker 1>a valid answer that basically says we don't

00:31:12.470 --> 00:31:13.830
<v Speaker 1>have any MXs.

00:31:14.230 --> 00:31:16.070
<v Speaker 1>We have a logline because we enable that

00:31:16.070 --> 00:31:16.710
<v Speaker 1>as well,

00:31:17.350 --> 00:31:20.230
<v Speaker 1>and we all have our DNS step data.

00:31:20.790 --> 00:31:21.990
<v Speaker 1>And this is interesting

00:31:23.645 --> 00:31:24.285
<v Speaker 1>because,

00:31:24.525 --> 00:31:26.845
<v Speaker 1>what you didn't see in the logline is

00:31:26.845 --> 00:31:28.364
<v Speaker 1>that we are also

00:31:28.765 --> 00:31:30.605
<v Speaker 1>forwarding this to

00:31:31.645 --> 00:31:32.684
<v Speaker 1>the server,

00:31:33.245 --> 00:31:35.245
<v Speaker 1>and we are asking the same questions, so

00:31:35.245 --> 00:31:38.445
<v Speaker 1>that's good. The MX records for example .net.

00:31:39.220 --> 00:31:40.419
<v Speaker 1>And then responded.

00:31:41.620 --> 00:31:43.700
<v Speaker 1>So we got a forward response,

00:31:46.260 --> 00:31:47.539
<v Speaker 1>and you see it here,

00:31:49.059 --> 00:31:50.899
<v Speaker 1>which is right now, we see the original

00:31:50.899 --> 00:31:52.340
<v Speaker 1>query coming in, so it's a bit of

00:31:52.340 --> 00:31:54.265
<v Speaker 1>ordering. It it makes sense if you know

00:31:54.265 --> 00:31:56.025
<v Speaker 1>what's happened, but this is the query going

00:31:56.025 --> 00:31:57.065
<v Speaker 1>into CoreDNS,

00:31:57.065 --> 00:31:58.184
<v Speaker 1>which is indeed

00:31:58.665 --> 00:31:59.784
<v Speaker 1>asking for this.

00:32:01.545 --> 00:32:03.385
<v Speaker 1>And this is the actual response that we

00:32:03.385 --> 00:32:06.025
<v Speaker 1>sent back, which is the forward message we

00:32:06.025 --> 00:32:06.425
<v Speaker 1>received.

00:32:07.470 --> 00:32:10.190
<v Speaker 1>So these are four data points, two queries

00:32:10.190 --> 00:32:12.429
<v Speaker 1>sent and two queries received, which you don't

00:32:12.429 --> 00:32:14.270
<v Speaker 1>get from the logs and you also don't

00:32:14.270 --> 00:32:16.429
<v Speaker 1>see from the date, obviously, because that's just

00:32:16.429 --> 00:32:17.950
<v Speaker 1>the the client.

00:32:18.830 --> 00:32:20.750
<v Speaker 1>K. And note that the protocol itself is

00:32:20.750 --> 00:32:23.644
<v Speaker 1>not UDP based. It's gRPC based.

00:32:24.845 --> 00:32:25.965
<v Speaker 1>So it it

00:32:26.365 --> 00:32:28.524
<v Speaker 1>it's not as as efficient.

00:32:29.245 --> 00:32:31.085
<v Speaker 1>So it might block

00:32:31.725 --> 00:32:33.645
<v Speaker 1>or it might build up if you have

00:32:33.645 --> 00:32:36.870
<v Speaker 1>a large number of queries getting coordinates. Although,

00:32:36.870 --> 00:32:38.630
<v Speaker 1>I don't know what the specific number would

00:32:38.630 --> 00:32:39.109
<v Speaker 1>be,

00:32:39.669 --> 00:32:40.150
<v Speaker 1>but it's

00:32:40.630 --> 00:32:42.630
<v Speaker 1>especially, you can also do DNS step over

00:32:42.630 --> 00:32:43.429
<v Speaker 1>TSP.

00:32:44.390 --> 00:32:45.590
<v Speaker 1>So there might be

00:32:46.070 --> 00:32:48.390
<v Speaker 1>some slowness there. By default, if you can't

00:32:48.390 --> 00:32:49.429
<v Speaker 1>DNS step

00:32:49.669 --> 00:32:52.164
<v Speaker 1>a message, we will drop it because we

00:32:52.164 --> 00:32:54.164
<v Speaker 1>can't wait for DNISTEP to

00:32:54.804 --> 00:32:56.084
<v Speaker 1>be ready for us.

00:32:57.125 --> 00:32:59.605
<v Speaker 1>But this is a very useful debugging tool

00:32:59.605 --> 00:33:01.044
<v Speaker 1>that I don't think a lot of people

00:33:01.044 --> 00:33:01.445
<v Speaker 1>know about.

00:33:02.670 --> 00:33:04.750
<v Speaker 0>Yeah. I mean, there's this obviously, there's this

00:33:04.750 --> 00:33:06.590
<v Speaker 0>meme. Right? Every time something goes wrong, it's

00:33:06.590 --> 00:33:09.630
<v Speaker 0>always DNS. And I think the visibility here

00:33:09.630 --> 00:33:11.630
<v Speaker 0>that I can see DNS tap given people

00:33:11.630 --> 00:33:13.790
<v Speaker 0>would probably help them debug those things

00:33:14.270 --> 00:33:15.310
<v Speaker 0>so much quicker

00:33:15.664 --> 00:33:17.585
<v Speaker 0>than the long drawn out way that I

00:33:17.585 --> 00:33:19.664
<v Speaker 0>I can say from experience I've spent looking

00:33:19.664 --> 00:33:21.585
<v Speaker 0>at DNS problems. So I wish I had

00:33:21.585 --> 00:33:24.144
<v Speaker 0>known this existed a long time ago.

00:33:25.424 --> 00:33:27.505
<v Speaker 1>Yeah. But you have to have the bandwidth

00:33:27.505 --> 00:33:29.345
<v Speaker 1>to actually get all this data. You have

00:33:29.345 --> 00:33:30.705
<v Speaker 1>to store it maybe for a couple of

00:33:30.705 --> 00:33:30.945
<v Speaker 1>days.

00:33:32.170 --> 00:33:34.730
<v Speaker 1>In this format, it's it's pretty voluminous, so

00:33:34.730 --> 00:33:36.250
<v Speaker 1>it's it's it might be a lot of

00:33:36.250 --> 00:33:37.530
<v Speaker 1>data that you need to catch. But, yes,

00:33:37.530 --> 00:33:39.850
<v Speaker 1>it totally doable with with But it has

00:33:39.850 --> 00:33:42.010
<v Speaker 0>that output format. Right? You chose YAML, but

00:33:42.010 --> 00:33:43.530
<v Speaker 0>I could have chose JSON. So I'm assuming

00:33:43.530 --> 00:33:44.810
<v Speaker 0>I could, you know, hook in a little

00:33:44.810 --> 00:33:46.184
<v Speaker 0>bit of tooling to pull out the fields

00:33:46.184 --> 00:33:47.945
<v Speaker 0>I need and store them in, you know,

00:33:47.945 --> 00:33:49.945
<v Speaker 0>a TSDB or some other DB and then

00:33:50.105 --> 00:33:52.105
<v Speaker 0>Yep. Yep. You know, delete them after seventy

00:33:52.105 --> 00:33:54.265
<v Speaker 0>two hours. That's not there when I have

00:33:54.265 --> 00:33:55.625
<v Speaker 0>a problem and I wanna fix it. So

00:33:55.625 --> 00:33:57.705
<v Speaker 0>I Yep. Yeah. Exactly. And you can actually

00:33:57.705 --> 00:33:59.865
<v Speaker 1>look back time stamps for there. So it's

00:33:59.865 --> 00:34:00.505
<v Speaker 1>a it's

00:34:01.550 --> 00:34:03.230
<v Speaker 1>yep. We can't do this

00:34:03.390 --> 00:34:05.310
<v Speaker 1>in our logging for instance because that just

00:34:05.310 --> 00:34:07.070
<v Speaker 1>wouldn't scale. So this is a good good

00:34:07.070 --> 00:34:07.950
<v Speaker 1>in between.

00:34:08.110 --> 00:34:08.989
<v Speaker 0>Oh, yeah. Definitely.

00:34:09.230 --> 00:34:11.469
<v Speaker 0>See the the forwarding? So right now,

00:34:11.790 --> 00:34:12.510
<v Speaker 0>this

00:34:12.750 --> 00:34:14.989
<v Speaker 0>CoreDNS is saying, have I

00:34:15.915 --> 00:34:18.155
<v Speaker 0>so I'm a is that say forward the

00:34:18.155 --> 00:34:19.835
<v Speaker 0>dot means anything and then if we can't

00:34:19.835 --> 00:34:21.675
<v Speaker 0>answer it, to a to a. If I

00:34:21.675 --> 00:34:24.075
<v Speaker 0>have another domain in there, like,

00:34:24.475 --> 00:34:26.395
<v Speaker 0>can you help me understand how that works?

00:34:26.395 --> 00:34:28.155
<v Speaker 0>So let me phrase that question in a

00:34:28.155 --> 00:34:29.035
<v Speaker 0>way that makes sense to you.

00:34:30.500 --> 00:34:32.260
<v Speaker 0>If I add another

00:34:32.260 --> 00:34:33.859
<v Speaker 0>domain, like example.net

00:34:33.859 --> 00:34:36.020
<v Speaker 0>to this core file and it doesn't have

00:34:36.020 --> 00:34:37.940
<v Speaker 0>a forward, that dot is a wild card.

00:34:37.940 --> 00:34:39.859
<v Speaker 0>Is that is my understanding? Oh, yeah. So

00:34:39.859 --> 00:34:40.900
<v Speaker 1>basically, what you can do,

00:34:44.264 --> 00:34:45.945
<v Speaker 1>let's say you have this,

00:34:46.905 --> 00:34:48.025
<v Speaker 1>and you can say

00:34:51.464 --> 00:34:53.385
<v Speaker 1>so now you are authoritative,

00:34:53.385 --> 00:34:54.585
<v Speaker 1>for example, .org,

00:34:54.744 --> 00:34:57.200
<v Speaker 1>but anything on the org, wanna forward. The

00:34:57.200 --> 00:34:59.599
<v Speaker 1>rest you wanna handle locally in this

00:35:00.240 --> 00:35:01.440
<v Speaker 1>CoreDNS query.

00:35:03.200 --> 00:35:03.920
<v Speaker 0>Okay.

00:35:04.079 --> 00:35:05.839
<v Speaker 0>And maybe that's just something that you're gonna

00:35:05.839 --> 00:35:07.440
<v Speaker 0>cover later, and I'm just jumping the gun

00:35:07.440 --> 00:35:08.240
<v Speaker 0>a little bit.

00:35:08.720 --> 00:35:09.359
<v Speaker 0>About

00:35:10.240 --> 00:35:13.345
<v Speaker 0>can I also have any number of

00:35:13.905 --> 00:35:14.785
<v Speaker 0>entries for the

00:35:15.424 --> 00:35:16.865
<v Speaker 0>if I want each sub domain on my

00:35:16.865 --> 00:35:18.225
<v Speaker 0>domain to be its own

00:35:18.385 --> 00:35:20.785
<v Speaker 0>resolver, is that possible too just by adding

00:35:20.785 --> 00:35:22.065
<v Speaker 0>extra sub domains?

00:35:22.305 --> 00:35:24.145
<v Speaker 0>Does that make sense? Yeah. So you want,

00:35:24.145 --> 00:35:25.070
<v Speaker 1>like, you

00:35:25.550 --> 00:35:26.830
<v Speaker 1>what do you mean? Like, reload

00:35:27.470 --> 00:35:29.230
<v Speaker 0>If I wanted david.example.org

00:35:29.230 --> 00:35:31.470
<v Speaker 0>to have its own name server, that's just

00:35:31.470 --> 00:35:33.950
<v Speaker 0>a case of doing that. Right? Or Yes.

00:35:33.950 --> 00:35:36.350
<v Speaker 1>Although doing this locally in the core file

00:35:36.350 --> 00:35:38.345
<v Speaker 1>just makes CoreDNS know about it. If you

00:35:38.345 --> 00:35:40.505
<v Speaker 1>wanna do the proper delegation, you need somebody

00:35:40.505 --> 00:35:42.185
<v Speaker 1>else actually pointing your

00:35:42.905 --> 00:35:44.905
<v Speaker 1>well, you need to buy domain and go

00:35:44.905 --> 00:35:46.505
<v Speaker 1>through all those things. But, yes,

00:35:46.984 --> 00:35:48.825
<v Speaker 1>once you've done that, you can just add

00:35:48.825 --> 00:35:49.385
<v Speaker 1>the name here.

00:35:50.380 --> 00:35:52.460
<v Speaker 0>Okay. I'm just gonna keep these questions coming

00:35:52.460 --> 00:35:53.900
<v Speaker 0>until you tell me to show up now.

00:35:53.900 --> 00:35:56.140
<v Speaker 0>But it says the forward use the same

00:35:56.140 --> 00:35:58.140
<v Speaker 0>protocol that I query. So if I query

00:35:58.140 --> 00:35:58.860
<v Speaker 0>over

00:35:59.260 --> 00:36:01.820
<v Speaker 0>DNS over HTTPS, does it forward in the

00:36:01.820 --> 00:36:03.580
<v Speaker 0>same protocol, or does it forward over UDP

00:36:03.580 --> 00:36:04.140
<v Speaker 0>to my default?

00:36:05.085 --> 00:36:07.245
<v Speaker 1>By default, this is UDP.

00:36:07.325 --> 00:36:08.605
<v Speaker 1>There are options.

00:36:09.085 --> 00:36:11.405
<v Speaker 1>I think force TCP,

00:36:11.405 --> 00:36:13.405
<v Speaker 1>which will force a TCP connection to the

00:36:13.405 --> 00:36:14.205
<v Speaker 1>upstream.

00:36:15.005 --> 00:36:16.925
<v Speaker 1>The one thing that we did implement, because

00:36:16.925 --> 00:36:19.910
<v Speaker 1>it was fairly easy, is we leave this

00:36:19.910 --> 00:36:20.710
<v Speaker 1>syntax,

00:36:20.950 --> 00:36:21.510
<v Speaker 1>which

00:36:22.309 --> 00:36:23.990
<v Speaker 1>should actually work nowadays,

00:36:24.390 --> 00:36:26.310
<v Speaker 1>means use DNS over

00:36:26.630 --> 00:36:27.670
<v Speaker 1>TCP.

00:36:28.230 --> 00:36:30.470
<v Speaker 1>I don't know. Use DNS over TLS,

00:36:30.905 --> 00:36:33.625
<v Speaker 1>which is a different protocol than DNS over

00:36:33.625 --> 00:36:34.985
<v Speaker 1>HTTPS.

00:36:35.625 --> 00:36:36.425
<v Speaker 1>Basically,

00:36:36.425 --> 00:36:38.825
<v Speaker 1>this is a raw TCP connection and you

00:36:38.825 --> 00:36:41.065
<v Speaker 1>do TLS handshake on it.

00:36:42.585 --> 00:36:44.745
<v Speaker 1>So this is supported. We have

00:36:45.065 --> 00:36:46.345
<v Speaker 1>a gRPC plugin,

00:36:47.040 --> 00:36:50.000
<v Speaker 1>which is similar to forward, but uses gRPC

00:36:50.480 --> 00:36:52.400
<v Speaker 1>in a protocol we invented

00:36:52.480 --> 00:36:53.920
<v Speaker 1>to talk to an upstream.

00:36:54.320 --> 00:36:56.080
<v Speaker 1>What we don't have is

00:36:56.160 --> 00:36:57.360
<v Speaker 1>an HTTPS

00:36:57.360 --> 00:37:00.800
<v Speaker 1>forwarder that actually talks DOE to an upstream

00:37:00.800 --> 00:37:01.840
<v Speaker 1>that doesn't exist.

00:37:03.055 --> 00:37:03.775
<v Speaker 0>Okay.

00:37:04.255 --> 00:37:06.575
<v Speaker 1>So we can do though on the, like,

00:37:06.575 --> 00:37:09.135
<v Speaker 1>the the the entrance side into CoreDNS,

00:37:09.215 --> 00:37:10.895
<v Speaker 1>but we can't speak it to an upstream

00:37:10.895 --> 00:37:11.535
<v Speaker 1>yet.

00:37:13.775 --> 00:37:14.895
<v Speaker 0>Okay. Cool.

00:37:19.340 --> 00:37:21.740
<v Speaker 1>Okay. Let me switch back now.

00:37:29.900 --> 00:37:31.855
<v Speaker 1>Yeah. What I said, If this doesn't give

00:37:31.855 --> 00:37:33.535
<v Speaker 1>you the data you want, you definitely need

00:37:33.535 --> 00:37:35.695
<v Speaker 1>to teach speed ups. That's also useful for

00:37:35.695 --> 00:37:38.495
<v Speaker 1>book reporting on the CoreDNS repo.

00:37:38.655 --> 00:37:40.815
<v Speaker 1>If you have a really strange case, I

00:37:40.815 --> 00:37:43.215
<v Speaker 1>will probably ask teach speed up or account

00:37:43.215 --> 00:37:43.615
<v Speaker 1>debug.

00:37:47.180 --> 00:37:50.300
<v Speaker 1>Now a slight detour on from operational to

00:37:50.300 --> 00:37:51.500
<v Speaker 1>some go code.

00:37:51.740 --> 00:37:53.980
<v Speaker 1>I will show you an actual plugin, which

00:37:53.980 --> 00:37:54.460
<v Speaker 1>is

00:37:55.180 --> 00:37:55.980
<v Speaker 1>fairly

00:37:57.020 --> 00:37:57.820
<v Speaker 1>fairly simple.

00:37:58.925 --> 00:38:01.085
<v Speaker 1>As said, we are using the go language.

00:38:01.085 --> 00:38:03.165
<v Speaker 1>So a plugin is

00:38:03.325 --> 00:38:06.365
<v Speaker 1>a thing that implements the plugin plugin interface,

00:38:06.845 --> 00:38:08.925
<v Speaker 1>which means in in our case that you

00:38:08.925 --> 00:38:10.685
<v Speaker 1>need to implement the serve DNS,

00:38:11.490 --> 00:38:13.170
<v Speaker 1>which is the meat of the plug in

00:38:13.330 --> 00:38:14.690
<v Speaker 1>and the name method.

00:38:15.570 --> 00:38:17.650
<v Speaker 1>And we have an example plug in, which

00:38:17.650 --> 00:38:19.330
<v Speaker 1>is on CoreDNS

00:38:19.330 --> 00:38:20.930
<v Speaker 1>slash example repo,

00:38:21.650 --> 00:38:24.850
<v Speaker 1>which prints the words example on every query

00:38:24.850 --> 00:38:26.130
<v Speaker 1>it sees, so it doesn't do a lot.

00:38:27.185 --> 00:38:29.185
<v Speaker 1>But the code is is basically here.

00:38:29.345 --> 00:38:30.625
<v Speaker 1>We have our

00:38:31.025 --> 00:38:33.745
<v Speaker 1>structure that we defined. Example, in this case,

00:38:34.225 --> 00:38:36.545
<v Speaker 1>we have a serve DNS method,

00:38:37.105 --> 00:38:37.905
<v Speaker 1>catch a context,

00:38:39.039 --> 00:38:41.920
<v Speaker 1>a DNS response writer. If you've ever programmed

00:38:41.920 --> 00:38:44.800
<v Speaker 1>with the a net HP package,

00:38:44.960 --> 00:38:47.359
<v Speaker 1>this looks simple similar except

00:38:47.599 --> 00:38:49.599
<v Speaker 1>it's DNS instead of HP,

00:38:50.799 --> 00:38:51.920
<v Speaker 1>and the request

00:38:52.000 --> 00:38:53.119
<v Speaker 1>the incoming request.

00:38:54.295 --> 00:38:56.375
<v Speaker 1>The thing does something, it returns a status

00:38:56.375 --> 00:38:57.735
<v Speaker 1>code and error.

00:38:58.215 --> 00:39:00.535
<v Speaker 1>And in this case, we make a new

00:39:00.535 --> 00:39:01.735
<v Speaker 1>response rider,

00:39:01.815 --> 00:39:03.655
<v Speaker 1>which we will see in the next slide,

00:39:04.455 --> 00:39:08.055
<v Speaker 1>and we call into our plug in chain

00:39:08.609 --> 00:39:10.609
<v Speaker 1>to further handle

00:39:11.009 --> 00:39:12.050
<v Speaker 1>the request.

00:39:12.609 --> 00:39:14.609
<v Speaker 1>Or if nothing is to be done, we

00:39:14.609 --> 00:39:16.530
<v Speaker 1>are done and we will return on.

00:39:19.329 --> 00:39:22.849
<v Speaker 1>So the new response printer thing

00:39:23.865 --> 00:39:24.905
<v Speaker 1>that is here,

00:39:26.105 --> 00:39:28.265
<v Speaker 1>and, the meat of this

00:39:30.265 --> 00:39:31.545
<v Speaker 1>is this bit.

00:39:32.265 --> 00:39:34.185
<v Speaker 1>Once we are done, we will call write

00:39:34.185 --> 00:39:36.265
<v Speaker 1>message, which will write the message back to

00:39:36.265 --> 00:39:37.560
<v Speaker 1>the client asking,

00:39:37.960 --> 00:39:39.240
<v Speaker 1>for a response.

00:39:39.640 --> 00:39:40.920
<v Speaker 1>We have a response,

00:39:41.800 --> 00:39:44.360
<v Speaker 1>which is, either forwarded or whatever. We don't

00:39:44.360 --> 00:39:45.560
<v Speaker 1>know at this point. We have just a

00:39:45.560 --> 00:39:47.160
<v Speaker 1>response that we need to write back.

00:39:47.480 --> 00:39:48.600
<v Speaker 1>So this is

00:39:49.320 --> 00:39:50.760
<v Speaker 1>printing out

00:39:51.795 --> 00:39:52.675
<v Speaker 1>example,

00:39:52.755 --> 00:39:54.515
<v Speaker 1>which is what this plug in does,

00:39:54.755 --> 00:39:56.195
<v Speaker 1>and then it just writes

00:39:56.355 --> 00:39:59.395
<v Speaker 1>calls the underlying response writer, calls its right

00:39:59.395 --> 00:40:00.995
<v Speaker 1>message method,

00:40:01.075 --> 00:40:02.515
<v Speaker 1>and they'll write the method.

00:40:02.675 --> 00:40:05.390
<v Speaker 1>We will write the response back to the

00:40:05.390 --> 00:40:05.950
<v Speaker 1>client.

00:40:06.510 --> 00:40:08.030
<v Speaker 1>And these can be wrapped, so this can

00:40:08.030 --> 00:40:10.110
<v Speaker 1>be, calling into caching,

00:40:10.430 --> 00:40:12.110
<v Speaker 1>which you can call into logging, and it

00:40:12.110 --> 00:40:14.270
<v Speaker 1>just unwraps the whole thing until the client

00:40:14.270 --> 00:40:16.830
<v Speaker 1>actually sees the bytes, being returned.

00:40:18.030 --> 00:40:18.670
<v Speaker 1>And that's it.

00:40:19.505 --> 00:40:21.345
<v Speaker 1>And in this case, you don't need to

00:40:21.345 --> 00:40:23.185
<v Speaker 1>know anything about DNS. You just write a

00:40:23.185 --> 00:40:25.025
<v Speaker 1>couple of lines of go, and you have

00:40:25.025 --> 00:40:25.825
<v Speaker 1>a plug in.

00:40:26.465 --> 00:40:27.825
<v Speaker 1>It's not always that easy.

00:40:31.520 --> 00:40:33.920
<v Speaker 0>That's pretty simple, actually. To be honest, I

00:40:33.920 --> 00:40:35.359
<v Speaker 0>was just I figured the plug ins would

00:40:35.359 --> 00:40:37.440
<v Speaker 0>have a little bit I guess there's more

00:40:37.440 --> 00:40:38.960
<v Speaker 0>to it than that, but the the base

00:40:38.960 --> 00:40:41.840
<v Speaker 0>skeleton actually is not that daunting at all.

00:40:42.240 --> 00:40:44.735
<v Speaker 1>Yeah. Yeah. And we're trying actively to to

00:40:44.735 --> 00:40:47.135
<v Speaker 1>make, like, the core of CoreDNS to do

00:40:47.135 --> 00:40:49.615
<v Speaker 1>most of the the DNS stuff. So you

00:40:49.615 --> 00:40:51.695
<v Speaker 1>can actually focus on just writing Go code,

00:40:51.695 --> 00:40:53.535
<v Speaker 1>and you just hook it in, and it

00:40:53.535 --> 00:40:54.575
<v Speaker 1>works.

00:40:55.135 --> 00:40:57.135
<v Speaker 1>Sadly, there are many core cases in the

00:40:57.135 --> 00:40:58.720
<v Speaker 1>DNS which you need to think about. But,

00:40:58.720 --> 00:41:00.800
<v Speaker 1>yeah, in in essence, we wanna make

00:41:01.280 --> 00:41:03.840
<v Speaker 1>open up DNS for for people to just

00:41:03.840 --> 00:41:05.680
<v Speaker 1>use this. So one of the things we're

00:41:05.680 --> 00:41:08.560
<v Speaker 1>seeing is that the crypto people,

00:41:09.360 --> 00:41:10.240
<v Speaker 1>there's like

00:41:10.560 --> 00:41:12.960
<v Speaker 1>some naming scheme they have on the

00:41:13.440 --> 00:41:13.840
<v Speaker 1>in

00:41:14.615 --> 00:41:16.375
<v Speaker 1>some bit Bitcoin coin,

00:41:16.855 --> 00:41:18.535
<v Speaker 1>and they wrote a plug in in CoreDNS

00:41:18.535 --> 00:41:21.575
<v Speaker 1>that works on the on the blockchain and

00:41:21.575 --> 00:41:22.615
<v Speaker 1>does some naming.

00:41:23.414 --> 00:41:24.775
<v Speaker 0>Yeah. I was going through the plug in

00:41:24.775 --> 00:41:25.734
<v Speaker 0>list earlier,

00:41:26.055 --> 00:41:28.670
<v Speaker 0>and I noticed the the Ethereum DNS server

00:41:28.670 --> 00:41:30.590
<v Speaker 0>plug in, which is kind of sitting there,

00:41:30.590 --> 00:41:32.830
<v Speaker 0>and I found that, you know, quite interesting

00:41:32.830 --> 00:41:35.550
<v Speaker 0>that quite it's not just the Kubernetes community

00:41:35.550 --> 00:41:36.990
<v Speaker 0>and the cloud native community, but, you know,

00:41:36.990 --> 00:41:39.230
<v Speaker 0>the brighter technology community is is now coming

00:41:39.230 --> 00:41:41.310
<v Speaker 0>to CoreDNS and adding their their own plug

00:41:41.310 --> 00:41:42.590
<v Speaker 0>ins to it, I thought was really cool.

00:41:42.945 --> 00:41:44.865
<v Speaker 1>Yep. Yep. No. I think so too. I

00:41:44.865 --> 00:41:46.385
<v Speaker 1>have no idea what a thing actually does,

00:41:46.385 --> 00:41:47.905
<v Speaker 1>but it's just not you know, that pro

00:41:48.065 --> 00:41:49.985
<v Speaker 1>prototype and just make the thing

00:41:50.305 --> 00:41:52.065
<v Speaker 1>easily work in in CoreDNS.

00:41:52.465 --> 00:41:55.505
<v Speaker 1>Much harder than doing it in mind, for

00:41:55.505 --> 00:41:57.745
<v Speaker 1>instance, or or MSB. I don't know about

00:41:57.745 --> 00:41:58.465
<v Speaker 1>PowerDNS.

00:41:59.860 --> 00:42:02.660
<v Speaker 1>So so that's it. So yeah. We, of

00:42:02.660 --> 00:42:05.060
<v Speaker 1>course, use CoreDNS ourselves to host

00:42:05.300 --> 00:42:07.060
<v Speaker 1>CoreDNS.io,

00:42:08.100 --> 00:42:09.380
<v Speaker 1>which is one of the things we wanna

00:42:09.380 --> 00:42:11.140
<v Speaker 1>move to another fly, but they don't do

00:42:11.140 --> 00:42:11.940
<v Speaker 1>IPv6

00:42:11.940 --> 00:42:13.380
<v Speaker 1>and

00:42:13.035 --> 00:42:15.595
<v Speaker 1>hosting our own DNS there is is

00:42:15.994 --> 00:42:18.155
<v Speaker 1>more interesting. So for now, we just host

00:42:18.155 --> 00:42:19.115
<v Speaker 1>this on a

00:42:19.595 --> 00:42:21.035
<v Speaker 1>on a Linux machine.

00:42:21.355 --> 00:42:23.674
<v Speaker 1>And the core file that we have for

00:42:23.674 --> 00:42:24.555
<v Speaker 1>CoreDNS,

00:42:24.555 --> 00:42:25.835
<v Speaker 1>the buyer, looks like this.

00:42:27.250 --> 00:42:29.730
<v Speaker 1>So we have a snippet as it's called,

00:42:29.970 --> 00:42:32.290
<v Speaker 1>because I'm using this to serve more

00:42:33.010 --> 00:42:33.890
<v Speaker 1>domains.

00:42:35.250 --> 00:42:37.810
<v Speaker 1>So this this defines that we have Prometheus

00:42:37.810 --> 00:42:39.170
<v Speaker 1>errors debug

00:42:39.335 --> 00:42:40.454
<v Speaker 1>and any.

00:42:40.775 --> 00:42:42.295
<v Speaker 1>Any is another small

00:42:43.015 --> 00:42:43.815
<v Speaker 1>plugin

00:42:43.815 --> 00:42:44.454
<v Speaker 1>that

00:42:44.694 --> 00:42:47.655
<v Speaker 1>replies to any queries with the h info.

00:42:48.055 --> 00:42:50.375
<v Speaker 1>Any replies can be really, really big, so

00:42:50.375 --> 00:42:52.134
<v Speaker 1>they are used for amplification attacks.

00:42:52.520 --> 00:42:55.079
<v Speaker 1>With any plugin, you just sidestep the whole

00:42:55.079 --> 00:42:55.720
<v Speaker 1>problem.

00:42:57.000 --> 00:42:59.160
<v Speaker 1>And then for CoreDNS.io,

00:42:59.960 --> 00:43:01.720
<v Speaker 1>it's a domain we serve, so we spell

00:43:01.720 --> 00:43:03.160
<v Speaker 1>it out in the core file.

00:43:03.880 --> 00:43:05.079
<v Speaker 1>And we have a couple of things here.

00:43:06.625 --> 00:43:09.025
<v Speaker 1>We use the sign plug in

00:43:09.665 --> 00:43:10.785
<v Speaker 1>to DNSSEC

00:43:10.785 --> 00:43:11.505
<v Speaker 1>sign

00:43:11.745 --> 00:43:12.945
<v Speaker 1>CoreDNS.io

00:43:12.945 --> 00:43:13.505
<v Speaker 1>because

00:43:14.465 --> 00:43:16.945
<v Speaker 1>I've done DNSSEC. I thought it should be

00:43:16.945 --> 00:43:17.905
<v Speaker 1>signed with

00:43:18.145 --> 00:43:19.585
<v Speaker 1>should be using DNSSEC.

00:43:21.110 --> 00:43:23.510
<v Speaker 1>We have some keys on system that just

00:43:23.510 --> 00:43:24.630
<v Speaker 1>signs this stuff.

00:43:25.030 --> 00:43:27.030
<v Speaker 1>Then we use the file plug in

00:43:27.670 --> 00:43:29.910
<v Speaker 1>to pick up this sign zone,

00:43:30.150 --> 00:43:30.710
<v Speaker 1>which

00:43:31.670 --> 00:43:34.390
<v Speaker 1>is created by the sign plug in and

00:43:34.390 --> 00:43:35.350
<v Speaker 1>serve the contents.

00:43:37.454 --> 00:43:39.615
<v Speaker 1>Then we have the transfer plug in that

00:43:39.615 --> 00:43:42.655
<v Speaker 1>tells you if, the zone has changed,

00:43:42.894 --> 00:43:45.055
<v Speaker 1>ping those other servers because we need them

00:43:45.055 --> 00:43:47.135
<v Speaker 1>to pick up the new contents that we

00:43:47.135 --> 00:43:47.695
<v Speaker 1>have.

00:43:48.894 --> 00:43:50.734
<v Speaker 1>And then we import base,

00:43:51.320 --> 00:43:52.920
<v Speaker 1>which means we also have the plug ins

00:43:52.920 --> 00:43:54.520
<v Speaker 1>that we have on the on the left

00:43:54.520 --> 00:43:55.320
<v Speaker 1>side here.

00:44:00.680 --> 00:44:02.200
<v Speaker 1>These things make

00:44:03.640 --> 00:44:04.680
<v Speaker 1>DNS access zones

00:44:06.655 --> 00:44:08.815
<v Speaker 1>hassle free. It will just resign

00:44:08.815 --> 00:44:10.255
<v Speaker 1>and will do the right thing.

00:44:11.055 --> 00:44:12.734
<v Speaker 1>And you can see this from logging.

00:44:13.135 --> 00:44:14.575
<v Speaker 1>So the logs from

00:44:14.734 --> 00:44:16.655
<v Speaker 1>according the s and o, I grabbed this,

00:44:16.655 --> 00:44:18.335
<v Speaker 1>like, yeah, a couple of days ago.

00:44:20.800 --> 00:44:22.160
<v Speaker 1>The sign plug in

00:44:22.640 --> 00:44:25.040
<v Speaker 1>is telling me that it's just resigned

00:44:25.359 --> 00:44:28.480
<v Speaker 1>CoreDNS IO because the signatures are too old,

00:44:28.640 --> 00:44:30.160
<v Speaker 1>and they have a lifetime because a bit

00:44:30.160 --> 00:44:31.839
<v Speaker 1>deeper what DNSSEC is. But they have a

00:44:31.839 --> 00:44:33.760
<v Speaker 1>lifetime, so you have to resign those things

00:44:33.965 --> 00:44:35.485
<v Speaker 1>every so often. Otherwise,

00:44:36.525 --> 00:44:37.805
<v Speaker 1>your zone will go bad.

00:44:39.245 --> 00:44:41.485
<v Speaker 1>So, thankfully, this worked.

00:44:41.805 --> 00:44:44.205
<v Speaker 1>It will save some more bits, like when

00:44:44.205 --> 00:44:45.485
<v Speaker 1>I'm gonna sign again.

00:44:45.965 --> 00:44:48.125
<v Speaker 1>A super small zone, so the signing

00:44:48.205 --> 00:44:49.405
<v Speaker 1>took no time at all.

00:44:50.720 --> 00:44:52.960
<v Speaker 1>But then you see that the file plugin

00:44:53.839 --> 00:44:56.480
<v Speaker 1>sees that the CoreDNS IO zone had been

00:44:56.480 --> 00:44:58.800
<v Speaker 1>reassigned or changed in that file, and it

00:44:58.800 --> 00:45:00.160
<v Speaker 1>picks up the new file

00:45:00.480 --> 00:45:01.839
<v Speaker 1>and serves the new data.

00:45:03.414 --> 00:45:05.575
<v Speaker 1>When file that does this, it will then

00:45:05.575 --> 00:45:07.415
<v Speaker 1>ping the transfer plugin,

00:45:07.815 --> 00:45:08.855
<v Speaker 1>which will send

00:45:09.015 --> 00:45:11.494
<v Speaker 1>notifies as they are called to the other

00:45:11.494 --> 00:45:13.975
<v Speaker 1>servers like you guys. I have a new

00:45:14.454 --> 00:45:16.230
<v Speaker 1>a new zone. You need to pick it

00:45:16.230 --> 00:45:17.830
<v Speaker 1>up, and you need to get the new

00:45:17.830 --> 00:45:18.870
<v Speaker 1>data from me.

00:45:19.270 --> 00:45:21.590
<v Speaker 1>So here you see all the plugins, like,

00:45:21.590 --> 00:45:23.990
<v Speaker 1>in the actual plugin chain, just ticking those

00:45:23.990 --> 00:45:26.870
<v Speaker 1>boxes one by one and just, have the

00:45:26.870 --> 00:45:27.990
<v Speaker 1>whole thing automated

00:45:28.390 --> 00:45:29.670
<v Speaker 1>without me doing anything,

00:45:31.755 --> 00:45:33.835
<v Speaker 1>which is why I wanted to sign plug

00:45:33.835 --> 00:45:36.075
<v Speaker 1>in because before this, had a Chrome job,

00:45:36.154 --> 00:45:37.515
<v Speaker 1>which was a bit crummy.

00:45:39.115 --> 00:45:41.115
<v Speaker 0>So I'm curious about that

00:45:42.395 --> 00:45:45.674
<v Speaker 0>transfer plug in whereas notifying another IP address.

00:45:45.690 --> 00:45:47.690
<v Speaker 0>Like, as our is this, like

00:45:48.089 --> 00:45:50.570
<v Speaker 0>is CoreDNS horizontally scalable?

00:45:50.810 --> 00:45:52.570
<v Speaker 0>Is that my misunderstanding?

00:45:53.690 --> 00:45:55.930
<v Speaker 1>This this is a yeah. That's

00:45:56.890 --> 00:45:58.650
<v Speaker 1>an old feature of DNS servers.

00:45:59.165 --> 00:46:01.005
<v Speaker 1>But, yeah, the the proper term now would

00:46:01.005 --> 00:46:02.765
<v Speaker 1>be horizontal to each cable. Yes.

00:46:03.244 --> 00:46:05.645
<v Speaker 0>So that is that just two core fails

00:46:05.645 --> 00:46:07.244
<v Speaker 0>that are the same being run by the

00:46:07.244 --> 00:46:09.085
<v Speaker 0>binary but on different machines? Is that is

00:46:09.085 --> 00:46:09.965
<v Speaker 0>that all I do?

00:46:10.445 --> 00:46:12.925
<v Speaker 1>Yep. Yep. Well, preferably, you will run that

00:46:12.925 --> 00:46:15.160
<v Speaker 1>somebody else runs a different binary in a

00:46:15.160 --> 00:46:16.040
<v Speaker 1>different org.

00:46:16.360 --> 00:46:17.800
<v Speaker 1>So these are a couple of old friends

00:46:17.800 --> 00:46:20.520
<v Speaker 1>of mine who actually run a different DNS

00:46:20.520 --> 00:46:21.240
<v Speaker 1>server,

00:46:21.400 --> 00:46:23.560
<v Speaker 1>but it it serves the same day.

00:46:23.880 --> 00:46:24.840
<v Speaker 0>Okay. Cool.

00:46:25.240 --> 00:46:28.280
<v Speaker 1>I'm contemplating making a thing that uses bit

00:46:28.280 --> 00:46:29.480
<v Speaker 1>current to do this,

00:46:30.155 --> 00:46:32.635
<v Speaker 1>but it turned out to be somewhat complex.

00:46:35.515 --> 00:46:37.115
<v Speaker 1>That's all. I mean, as long as we

00:46:37.115 --> 00:46:39.115
<v Speaker 1>control both ends, so you're both

00:46:39.515 --> 00:46:41.595
<v Speaker 1>ends with the coordinates, we are super free

00:46:41.595 --> 00:46:42.234
<v Speaker 1>in what we can do.

00:46:43.440 --> 00:46:46.240
<v Speaker 1>But this the notifies and the transfer is

00:46:46.240 --> 00:46:50.240
<v Speaker 1>the standard DNS protocol. Alright. Okay. Cool. Which

00:46:50.240 --> 00:46:52.880
<v Speaker 1>is a different protocol than normal query and

00:46:52.880 --> 00:46:53.520
<v Speaker 1>also protocol.

00:46:56.934 --> 00:46:57.335
<v Speaker 1>Cool.

00:46:57.815 --> 00:47:00.215
<v Speaker 1>This is my last slide.

00:47:01.255 --> 00:47:03.414
<v Speaker 1>So what are we gonna do in in

00:47:03.414 --> 00:47:04.295
<v Speaker 1>CoreDNS?

00:47:04.615 --> 00:47:05.255
<v Speaker 1>Well,

00:47:05.655 --> 00:47:07.895
<v Speaker 1>the usual bug fixing and and keeping up

00:47:07.895 --> 00:47:09.575
<v Speaker 1>to date with with Kubernetes,

00:47:09.575 --> 00:47:10.615
<v Speaker 1>which is moving fast,

00:47:11.100 --> 00:47:13.660
<v Speaker 1>adding dual stack support, which is super nice

00:47:13.660 --> 00:47:15.740
<v Speaker 1>and some other API stuff that's that's been

00:47:15.740 --> 00:47:16.460
<v Speaker 1>done there.

00:47:17.260 --> 00:47:19.820
<v Speaker 1>Furthermore, a couple of couple of new plug

00:47:19.820 --> 00:47:22.140
<v Speaker 1>ins that are core to DNS.

00:47:22.700 --> 00:47:24.380
<v Speaker 1>There is one to minimize

00:47:24.380 --> 00:47:25.260
<v Speaker 1>responses,

00:47:25.340 --> 00:47:28.875
<v Speaker 1>which is saves bandwidth and application attacks.

00:47:29.355 --> 00:47:32.154
<v Speaker 1>DNS cookies is a thing to actually make

00:47:32.154 --> 00:47:34.315
<v Speaker 1>sure you're talking to the right server, which

00:47:34.315 --> 00:47:36.234
<v Speaker 1>you might implement as a plug in.

00:47:37.595 --> 00:47:40.154
<v Speaker 1>One thing that I've been pushing back is

00:47:40.154 --> 00:47:41.595
<v Speaker 1>new storage plug ins

00:47:42.390 --> 00:47:45.030
<v Speaker 1>because, a, they are quite complex and they

00:47:45.030 --> 00:47:47.750
<v Speaker 1>vendor the entire world. So I think we

00:47:47.910 --> 00:47:49.750
<v Speaker 1>we we have a lot of stuff that

00:47:49.750 --> 00:47:50.310
<v Speaker 1>we

00:47:50.950 --> 00:47:52.869
<v Speaker 1>need to pull down to compile according to

00:47:52.869 --> 00:47:56.470
<v Speaker 1>us mostly because of we're using actually

00:47:56.035 --> 00:47:57.155
<v Speaker 1>cloud DNS

00:47:57.235 --> 00:47:58.515
<v Speaker 1>route 53

00:47:58.515 --> 00:47:59.475
<v Speaker 1>Azure,

00:47:59.715 --> 00:48:01.395
<v Speaker 1>a whole bunch of these, and all those

00:48:01.395 --> 00:48:02.675
<v Speaker 1>plugins look similar.

00:48:02.915 --> 00:48:05.395
<v Speaker 1>So we need some kind of generic plugin

00:48:05.395 --> 00:48:07.235
<v Speaker 1>where you can hook in all these to

00:48:07.235 --> 00:48:09.849
<v Speaker 1>to make that scale again, I think. So

00:48:09.849 --> 00:48:12.490
<v Speaker 1>for now, I I I've had enough of

00:48:12.490 --> 00:48:14.810
<v Speaker 1>adding identical code to go to a slightly

00:48:14.810 --> 00:48:16.810
<v Speaker 1>better one. So I'm putting

00:48:17.210 --> 00:48:18.810
<v Speaker 1>my foot down unless there's a good reason

00:48:18.810 --> 00:48:19.930
<v Speaker 1>to actually include

00:48:20.170 --> 00:48:21.930
<v Speaker 1>something super new and novel.

00:48:25.095 --> 00:48:27.335
<v Speaker 0>Okay. So we got it from my side.

00:48:28.215 --> 00:48:30.935
<v Speaker 0>Alright. So if anyone watching has any questions,

00:48:30.935 --> 00:48:32.215
<v Speaker 0>feel free to drop them in the comment

00:48:32.215 --> 00:48:34.055
<v Speaker 0>section now. I have a a few that

00:48:34.055 --> 00:48:35.975
<v Speaker 0>I prepared that I'll I'll run over just

00:48:35.975 --> 00:48:36.455
<v Speaker 0>now then.

00:48:37.080 --> 00:48:39.480
<v Speaker 0>And I think my first question actually very

00:48:39.480 --> 00:48:41.400
<v Speaker 0>luckily ended on this a similar note to

00:48:41.400 --> 00:48:42.760
<v Speaker 0>what you're talking about there like,

00:48:43.400 --> 00:48:44.760
<v Speaker 0>what when I was looking at the website

00:48:44.760 --> 00:48:46.600
<v Speaker 0>earlier and I realized there's plugins and external

00:48:46.600 --> 00:48:48.680
<v Speaker 0>plugins, it kinda reminded me of a problem

00:48:48.680 --> 00:48:50.200
<v Speaker 0>we had on the telegraph project.

00:48:51.505 --> 00:48:53.905
<v Speaker 0>The telegraph project is a collection agent for

00:48:53.905 --> 00:48:54.625
<v Speaker 0>metrics.

00:48:54.865 --> 00:48:57.025
<v Speaker 0>But they started off as a plugin based

00:48:57.025 --> 00:48:59.025
<v Speaker 0>thing, but all the plugins were compelled in.

00:48:59.025 --> 00:49:00.945
<v Speaker 0>The the telegraph project today has like over

00:49:00.945 --> 00:49:01.905
<v Speaker 0>220

00:49:01.905 --> 00:49:04.305
<v Speaker 0>plugins. The project size, the binary is huge,

00:49:04.305 --> 00:49:06.960
<v Speaker 0>the vendor, wow, the vendors like

00:49:07.280 --> 00:49:09.440
<v Speaker 0>and I think that's a very goal problem.

00:49:09.440 --> 00:49:12.160
<v Speaker 0>Right? Like goal problem there's not a good

00:49:12.160 --> 00:49:13.360
<v Speaker 0>plugin mechanism

00:49:13.520 --> 00:49:14.880
<v Speaker 0>that works with goal.

00:49:15.200 --> 00:49:17.120
<v Speaker 0>And I'm curious about external plugins and how

00:49:17.120 --> 00:49:20.080
<v Speaker 0>that works in CoreDNS. It's a gRPC, http,

00:49:20.080 --> 00:49:21.855
<v Speaker 0>something else. Maybe you could help me understand

00:49:21.855 --> 00:49:23.695
<v Speaker 0>that a little bit. So so what is

00:49:23.695 --> 00:49:25.135
<v Speaker 1>your exact question? Like, how do you get

00:49:25.135 --> 00:49:26.495
<v Speaker 1>them in, or how do we deal with

00:49:26.495 --> 00:49:29.775
<v Speaker 1>the like, value move from external to internal?

00:49:30.255 --> 00:49:31.935
<v Speaker 0>So as the external plugin is just not

00:49:31.935 --> 00:49:33.935
<v Speaker 0>hosted in the CoreDNS repository, but it's still

00:49:33.935 --> 00:49:36.250
<v Speaker 0>compiled in, or are you doing some magic

00:49:36.250 --> 00:49:38.330
<v Speaker 0>at runtime to pull an external plugins as

00:49:38.490 --> 00:49:40.250
<v Speaker 0>No. No. So

00:49:40.250 --> 00:49:42.170
<v Speaker 1>if you wanna have an external plugin, you

00:49:42.170 --> 00:49:42.810
<v Speaker 1>need to

00:49:44.250 --> 00:49:45.210
<v Speaker 1>exchange

00:49:45.210 --> 00:49:47.850
<v Speaker 1>plugin dot config to actually add the lines

00:49:47.850 --> 00:49:49.770
<v Speaker 1>to point to the external plugin,

00:49:50.235 --> 00:49:52.315
<v Speaker 1>then I go generate and then I go

00:49:52.315 --> 00:49:52.875
<v Speaker 1>build.

00:49:53.275 --> 00:49:55.275
<v Speaker 0>Ah, okay. So that's the understanding problem then

00:49:55.275 --> 00:49:57.035
<v Speaker 0>for Go projects is how how do we

00:49:57.035 --> 00:49:58.795
<v Speaker 0>have external plug ins that could be dynamically

00:49:58.795 --> 00:50:00.795
<v Speaker 0>linked or something like that? Yeah. There's this

00:50:00.795 --> 00:50:03.515
<v Speaker 1>plug in interface, but I haven't dealt looked

00:50:03.515 --> 00:50:05.620
<v Speaker 1>into that. So if if we're gonna go

00:50:05.620 --> 00:50:07.380
<v Speaker 1>that route, that would be a a massive

00:50:07.380 --> 00:50:09.380
<v Speaker 1>rewrite, which means we can also look in

00:50:09.380 --> 00:50:11.220
<v Speaker 1>in the plugin ordering because we lose the

00:50:11.220 --> 00:50:12.980
<v Speaker 1>plugin with config file probably.

00:50:13.300 --> 00:50:15.620
<v Speaker 1>But, yeah, I I'm I'm happy enough with

00:50:15.620 --> 00:50:17.860
<v Speaker 1>CoreDNS as is that I don't consider this

00:50:17.860 --> 00:50:19.700
<v Speaker 1>personally a big big thing that I need

00:50:19.700 --> 00:50:21.355
<v Speaker 1>to fix in in CoreDNS.

00:50:22.075 --> 00:50:23.115
<v Speaker 0>Okay. Cool.

00:50:23.515 --> 00:50:25.675
<v Speaker 0>So I'm curious also about, you know, we

00:50:25.675 --> 00:50:28.715
<v Speaker 0>we touched on I kind of misinterpreted the

00:50:28.715 --> 00:50:30.635
<v Speaker 0>transfer plug in for something to do with,

00:50:30.635 --> 00:50:32.475
<v Speaker 0>you know, scaling a DNS server. But I'm

00:50:32.475 --> 00:50:35.115
<v Speaker 0>also curious about the the bad actor side

00:50:35.115 --> 00:50:37.970
<v Speaker 0>of that. Like, you know, DNS attacking DNS

00:50:37.970 --> 00:50:39.490
<v Speaker 0>servers can be a

00:50:41.010 --> 00:50:43.090
<v Speaker 0>popular vector, I guess, for people that want

00:50:43.090 --> 00:50:43.970
<v Speaker 0>to bring down

00:50:44.290 --> 00:50:46.369
<v Speaker 0>or take over DNS zones and stuff like

00:50:46.369 --> 00:50:48.530
<v Speaker 0>that. Does CoreDNS have plugins or anything that

00:50:48.530 --> 00:50:50.609
<v Speaker 0>allows me to do to to try and

00:50:50.609 --> 00:50:51.250
<v Speaker 0>protect myself?

00:50:53.545 --> 00:50:56.025
<v Speaker 1>There is an external plug in called response

00:50:56.025 --> 00:50:56.985
<v Speaker 1>rate limiting,

00:50:57.305 --> 00:50:59.545
<v Speaker 1>which means that if we see a lot

00:50:59.545 --> 00:51:00.025
<v Speaker 1>of

00:51:00.825 --> 00:51:02.585
<v Speaker 1>queries from same IP,

00:51:02.825 --> 00:51:05.625
<v Speaker 1>we will will do some blocking. That's not

00:51:05.625 --> 00:51:06.425
<v Speaker 1>a default plug in.

00:51:08.130 --> 00:51:09.089
<v Speaker 1>Usually,

00:51:09.089 --> 00:51:10.849
<v Speaker 1>if you there's several ways. Like, if you

00:51:10.849 --> 00:51:11.490
<v Speaker 1>wanna

00:51:12.049 --> 00:51:14.049
<v Speaker 1>interact with with the registration and the current

00:51:14.049 --> 00:51:14.690
<v Speaker 1>stuff,

00:51:14.849 --> 00:51:17.250
<v Speaker 1>that's not something CoreDNS itself can help with.

00:51:17.250 --> 00:51:19.089
<v Speaker 1>I mean, it just serves whatever is in

00:51:19.089 --> 00:51:21.010
<v Speaker 1>the core file. So if if somebody gets

00:51:21.010 --> 00:51:22.529
<v Speaker 1>into that trajectory,

00:51:23.184 --> 00:51:23.984
<v Speaker 1>then

00:51:24.065 --> 00:51:25.105
<v Speaker 1>so be it.

00:51:25.825 --> 00:51:28.625
<v Speaker 1>The transfer itself, there is some very limited

00:51:28.625 --> 00:51:30.625
<v Speaker 1>things you can do to securities,

00:51:31.105 --> 00:51:33.025
<v Speaker 1>which also shows the age of of

00:51:33.424 --> 00:51:34.785
<v Speaker 1>DNS protocol.

00:51:35.184 --> 00:51:37.744
<v Speaker 1>There's a a symmetric key you can configure,

00:51:39.420 --> 00:51:41.820
<v Speaker 1>IP white listing, that kind of stuff, which

00:51:41.820 --> 00:51:42.620
<v Speaker 1>is all,

00:51:43.180 --> 00:51:45.180
<v Speaker 1>in my book, pretty old school things to

00:51:45.180 --> 00:51:48.220
<v Speaker 1>actually make sure you receive the correct data.

00:51:49.740 --> 00:51:52.705
<v Speaker 1>The best way to make a DNS server

00:51:52.705 --> 00:51:54.385
<v Speaker 1>not responsive is just

00:51:55.105 --> 00:51:57.425
<v Speaker 1>DDoSs and then fill the pipe,

00:51:57.665 --> 00:51:59.984
<v Speaker 1>and there's not much you can do at

00:51:59.984 --> 00:52:00.785
<v Speaker 1>that point.

00:52:01.585 --> 00:52:02.305
<v Speaker 0>Okay.

00:52:02.545 --> 00:52:03.825
<v Speaker 0>I'm I'm assuming

00:52:03.905 --> 00:52:04.385
<v Speaker 0>your

00:52:04.730 --> 00:52:07.450
<v Speaker 0>personal domains are all hosted by CoreDNS.

00:52:07.450 --> 00:52:09.130
<v Speaker 0>Is is that a correct assumption?

00:52:09.369 --> 00:52:11.609
<v Speaker 1>Yeah. Yeah. Yeah. Yeah. Yep. Yeah. The snippet

00:52:11.609 --> 00:52:13.450
<v Speaker 1>that I showed you on the recording that

00:52:13.450 --> 00:52:15.049
<v Speaker 1>showed, that's why all the domains there as

00:52:15.049 --> 00:52:15.530
<v Speaker 1>well.

00:52:16.250 --> 00:52:18.605
<v Speaker 0>Of course. Alright. I'll give you two proper

00:52:18.605 --> 00:52:20.765
<v Speaker 0>questions though instead of that. So,

00:52:21.405 --> 00:52:22.685
<v Speaker 0>you know, obviously,

00:52:22.845 --> 00:52:24.445
<v Speaker 0>I think a lot of people are familiar

00:52:24.445 --> 00:52:27.325
<v Speaker 0>with CoreDNS because of the adoption of of

00:52:27.325 --> 00:52:30.490
<v Speaker 0>Kubernetes and CoreDNS into that project. Like, with

00:52:30.490 --> 00:52:32.410
<v Speaker 0>the whole advent of cloud native architectures and

00:52:32.410 --> 00:52:35.290
<v Speaker 0>micro services becoming a new norm for teams

00:52:35.290 --> 00:52:36.410
<v Speaker 0>and organizations,

00:52:36.410 --> 00:52:39.290
<v Speaker 0>does that allow or afford DNS to play

00:52:39.930 --> 00:52:42.250
<v Speaker 0>a newer role in those architectures or take

00:52:42.250 --> 00:52:43.290
<v Speaker 0>on new responsibilities?

00:52:45.305 --> 00:52:47.305
<v Speaker 1>So, yeah, there was a

00:52:47.625 --> 00:52:50.345
<v Speaker 1>massive influx of popularity once we got into

00:52:50.345 --> 00:52:51.465
<v Speaker 1>the CNCF.

00:52:52.345 --> 00:52:54.184
<v Speaker 1>Although, a humongous amount of bugs that we

00:52:54.184 --> 00:52:56.665
<v Speaker 1>fixed because people were were not actually using

00:52:56.665 --> 00:52:56.905
<v Speaker 1>it.

00:52:58.320 --> 00:53:00.160
<v Speaker 1>So one of the things we try to

00:53:00.160 --> 00:53:01.680
<v Speaker 1>do with gRPC

00:53:02.000 --> 00:53:04.800
<v Speaker 1>is we can probably move away from UDP

00:53:04.800 --> 00:53:06.000
<v Speaker 1>if everything is

00:53:06.960 --> 00:53:07.920
<v Speaker 1>courting us,

00:53:08.480 --> 00:53:10.640
<v Speaker 1>which means we can use new protocols and

00:53:10.640 --> 00:53:12.720
<v Speaker 1>can do interesting things. One of the things

00:53:12.720 --> 00:53:14.355
<v Speaker 1>we have with gRPC

00:53:14.515 --> 00:53:16.755
<v Speaker 1>was that you could watch names to be

00:53:16.755 --> 00:53:17.315
<v Speaker 1>changed.

00:53:17.955 --> 00:53:19.315
<v Speaker 1>In the DNS right now, you have to

00:53:19.315 --> 00:53:21.075
<v Speaker 1>wait until the TTL expires and that kind

00:53:21.075 --> 00:53:23.235
<v Speaker 1>of stuff. But the gRPC, we could just

00:53:23.235 --> 00:53:25.235
<v Speaker 1>kinda watch back like this name has changed.

00:53:25.235 --> 00:53:27.170
<v Speaker 1>You need to update it, which would mean

00:53:27.170 --> 00:53:28.930
<v Speaker 1>that the updates

00:53:29.010 --> 00:53:32.050
<v Speaker 1>in Kubernetes, for instance, would be instantaneously

00:53:32.050 --> 00:53:33.650
<v Speaker 1>instead of just waiting for it to deal

00:53:33.650 --> 00:53:34.530
<v Speaker 1>to time out.

00:53:35.650 --> 00:53:37.970
<v Speaker 1>So that would be interesting, but then

00:53:38.210 --> 00:53:40.765
<v Speaker 1>this all falls flat because you also need

00:53:40.765 --> 00:53:43.005
<v Speaker 1>to change the clients to actually use your

00:53:43.005 --> 00:53:44.365
<v Speaker 1>new Fangled protocol.

00:53:45.085 --> 00:53:45.805
<v Speaker 1>Meaning,

00:53:45.885 --> 00:53:46.925
<v Speaker 1>at the time,

00:53:47.405 --> 00:53:47.965
<v Speaker 1>local

00:53:48.285 --> 00:53:50.445
<v Speaker 1>DNS node node local

00:53:50.605 --> 00:53:51.165
<v Speaker 1>what is it?

00:53:52.380 --> 00:53:54.380
<v Speaker 1>Node DNS local, whatever the hell they have

00:53:54.380 --> 00:53:55.500
<v Speaker 1>right now. Every

00:53:55.660 --> 00:53:57.819
<v Speaker 1>node in the DNS in the Kubernetes cluster

00:53:57.819 --> 00:53:58.859
<v Speaker 1>runs CoreDNS.

00:53:58.859 --> 00:54:00.619
<v Speaker 1>So we can all potentially actually do this.

00:54:00.619 --> 00:54:03.099
<v Speaker 1>We could probably switch to gRPC

00:54:03.500 --> 00:54:05.980
<v Speaker 1>and have some other protocol than

00:54:06.215 --> 00:54:07.175
<v Speaker 1>DNS

00:54:07.655 --> 00:54:09.815
<v Speaker 1>doing the naming in those clusters.

00:54:11.095 --> 00:54:13.815
<v Speaker 0>Alright. Cool. That actually kinda leads on. We

00:54:13.815 --> 00:54:17.175
<v Speaker 0>we had a a viewer question, and the

00:54:17.335 --> 00:54:19.735
<v Speaker 0>the question was, are there any best practices

00:54:19.735 --> 00:54:21.255
<v Speaker 0>for using DNS in Kubernetes?

00:54:22.180 --> 00:54:24.100
<v Speaker 0>And I'd also like to kind of just

00:54:24.180 --> 00:54:26.740
<v Speaker 0>throw something else into there like, you mentioned

00:54:26.740 --> 00:54:28.580
<v Speaker 0>that you previously worked on SkyDNS,

00:54:28.580 --> 00:54:31.060
<v Speaker 0>which I think was the original cube DNS

00:54:31.060 --> 00:54:32.820
<v Speaker 0>like Yep. Yep. What

00:54:33.700 --> 00:54:37.855
<v Speaker 0>why was that deprecated in favor of CoreDNS?

00:54:37.855 --> 00:54:39.535
<v Speaker 0>Like, what were some of the differences changes?

00:54:39.535 --> 00:54:41.135
<v Speaker 0>What lessons did we learn from that kind

00:54:41.135 --> 00:54:42.575
<v Speaker 0>of older approach?

00:54:43.214 --> 00:54:45.855
<v Speaker 1>So to start with that, so SkyDNS was

00:54:46.655 --> 00:54:48.895
<v Speaker 1>the SkyDNS binary combined with

00:54:49.295 --> 00:54:50.095
<v Speaker 1>DNS mask,

00:54:50.950 --> 00:54:52.630
<v Speaker 1>which was another c

00:54:53.350 --> 00:54:54.150
<v Speaker 1>DNS

00:54:54.630 --> 00:54:55.510
<v Speaker 1>binary.

00:54:56.710 --> 00:54:57.990
<v Speaker 1>And there was

00:54:58.070 --> 00:54:59.990
<v Speaker 1>at some moment, couple of years back,

00:55:00.230 --> 00:55:01.350
<v Speaker 1>where they had

00:55:01.590 --> 00:55:02.790
<v Speaker 1>eight

00:55:03.744 --> 00:55:06.145
<v Speaker 1>CFEs in DNS mask. So that was a

00:55:06.145 --> 00:55:08.065
<v Speaker 1>a thing they needed to upgrade. Also, the

00:55:08.065 --> 00:55:09.825
<v Speaker 1>interaction between the two because you have two

00:55:09.825 --> 00:55:13.185
<v Speaker 1>boundaries getting more complex. So so CoreDNS

00:55:13.265 --> 00:55:16.619
<v Speaker 1>basically unified at all, gave problem metrics, all

00:55:16.619 --> 00:55:18.059
<v Speaker 1>that kind of stuff. So it's it's easier

00:55:18.059 --> 00:55:19.740
<v Speaker 1>to deploy one CoreDNS

00:55:19.740 --> 00:55:22.140
<v Speaker 1>than it is to have SkyDNS and DNS

00:55:22.140 --> 00:55:22.780
<v Speaker 1>Mask.

00:55:23.019 --> 00:55:24.380
<v Speaker 1>So that was a bit of the impetus

00:55:24.380 --> 00:55:26.140
<v Speaker 1>on on why moving to,

00:55:26.700 --> 00:55:27.980
<v Speaker 1>CoreDNS.

00:55:28.619 --> 00:55:31.579
<v Speaker 1>Doing DNS in Kubernetes clusters is tricky

00:55:32.135 --> 00:55:33.655
<v Speaker 1>for a couple of reasons.

00:55:34.615 --> 00:55:36.695
<v Speaker 1>There's a thing called the search path

00:55:37.015 --> 00:55:38.855
<v Speaker 1>and the kind of options

00:55:38.855 --> 00:55:39.735
<v Speaker 1>you can have,

00:55:40.055 --> 00:55:40.935
<v Speaker 1>which means

00:55:41.175 --> 00:55:42.455
<v Speaker 1>if you have

00:55:43.734 --> 00:55:45.815
<v Speaker 1>a domain like ...google.com,

00:55:46.560 --> 00:55:49.440
<v Speaker 1>the entire search path will be searched before

00:55:49.440 --> 00:55:52.240
<v Speaker 1>it will actually try wwwgoogle.com.

00:55:52.640 --> 00:55:55.360
<v Speaker 1>Meaning, every query that is done in the

00:55:55.360 --> 00:55:56.560
<v Speaker 1>Kubernetes cluster

00:55:56.720 --> 00:55:58.880
<v Speaker 1>leads to a five x amplification of the

00:55:58.880 --> 00:56:00.560
<v Speaker 1>number of queries we see in CoreDNS.

00:56:01.795 --> 00:56:03.875
<v Speaker 1>So that alone is

00:56:05.315 --> 00:56:06.275
<v Speaker 1>horrendous

00:56:06.355 --> 00:56:08.035
<v Speaker 1>and should be fixed, although it can't be

00:56:08.035 --> 00:56:09.475
<v Speaker 1>fixed anymore. So the number of queries that

00:56:09.475 --> 00:56:11.555
<v Speaker 1>we see is is way more than need

00:56:11.555 --> 00:56:13.475
<v Speaker 1>to be done, which means you need to

00:56:13.475 --> 00:56:14.675
<v Speaker 1>scale CoreDNS

00:56:14.675 --> 00:56:15.875
<v Speaker 1>aggressively

00:56:15.630 --> 00:56:18.029
<v Speaker 1>or your DNS and and process aggressively to

00:56:18.029 --> 00:56:19.950
<v Speaker 1>actually be able to respond to all those

00:56:19.950 --> 00:56:20.589
<v Speaker 1>queries.

00:56:21.069 --> 00:56:23.230
<v Speaker 1>We have a couple of text that's

00:56:23.470 --> 00:56:25.310
<v Speaker 1>sidestep this. There is

00:56:26.349 --> 00:56:29.585
<v Speaker 1>auto path, which makes this this it shortcuts

00:56:29.585 --> 00:56:31.984
<v Speaker 1>your search path because we know what you're

00:56:31.984 --> 00:56:33.905
<v Speaker 1>looking for, so we will tell you what

00:56:33.905 --> 00:56:36.224
<v Speaker 1>the actual answer is. But that's quite a

00:56:36.224 --> 00:56:36.785
<v Speaker 1>hack.

00:56:37.984 --> 00:56:39.744
<v Speaker 1>So if you wanna know if things are

00:56:39.744 --> 00:56:42.040
<v Speaker 1>performing well, use metrics.

00:56:42.200 --> 00:56:44.599
<v Speaker 1>The health plug in has an internal loop

00:56:44.599 --> 00:56:46.839
<v Speaker 1>that tells you how busy the core and

00:56:46.839 --> 00:56:48.920
<v Speaker 1>that's binary is. So you can use that

00:56:48.920 --> 00:56:50.920
<v Speaker 1>for for latency. If that goes through the

00:56:50.920 --> 00:56:52.440
<v Speaker 1>roof, then something is clearly wrong.

00:56:53.295 --> 00:56:55.775
<v Speaker 1>Latency on on DNS request is also good

00:56:55.775 --> 00:56:58.494
<v Speaker 1>to track. Sysdig had an article yesterday

00:56:58.494 --> 00:57:00.655
<v Speaker 1>on exactly that. So you need to be

00:57:00.655 --> 00:57:02.255
<v Speaker 1>on top of things to see see what's

00:57:02.255 --> 00:57:03.694
<v Speaker 1>happening. And if you look at the metrics,

00:57:03.694 --> 00:57:07.055
<v Speaker 1>you see that non existing domains is 9%

00:57:07.055 --> 00:57:07.775
<v Speaker 1>of all periods.

00:57:09.770 --> 00:57:12.490
<v Speaker 0>Yeah. The many you said that search path

00:57:12.490 --> 00:57:15.050
<v Speaker 0>thing, like, got innocent flashbacks. Like,

00:57:15.210 --> 00:57:17.130
<v Speaker 0>when Kubes DNS was the default at our

00:57:17.130 --> 00:57:17.770
<v Speaker 0>clusters,

00:57:18.170 --> 00:57:18.890
<v Speaker 0>we

00:57:19.450 --> 00:57:21.530
<v Speaker 0>we pretty much dead denial of service attacker

00:57:21.530 --> 00:57:22.810
<v Speaker 0>entire infrastructure

00:57:22.810 --> 00:57:24.245
<v Speaker 0>with them and a request that we're going

00:57:24.245 --> 00:57:26.165
<v Speaker 0>through. And the the configuration is that's it

00:57:26.165 --> 00:57:27.685
<v Speaker 0>was the end of its problem. Right? I

00:57:27.685 --> 00:57:29.365
<v Speaker 0>think by default end of its set to

00:57:29.365 --> 00:57:31.925
<v Speaker 0>like five or something like that. Yeah. Cousin

00:57:31.925 --> 00:57:34.245
<v Speaker 0>five x number of lookups that we actually

00:57:34.245 --> 00:57:35.125
<v Speaker 0>want to do. I mean, you have a

00:57:35.125 --> 00:57:36.005
<v Speaker 0>high number of lookups,

00:57:36.460 --> 00:57:38.620
<v Speaker 0>The whole thing was found out. Yeah. Yeah.

00:57:38.620 --> 00:57:40.300
<v Speaker 1>The default on your Linux box is to

00:57:40.380 --> 00:57:43.180
<v Speaker 1>for handles to give a sense of how

00:57:43.180 --> 00:57:45.740
<v Speaker 1>how far along they they were. Another thing

00:57:45.740 --> 00:57:46.460
<v Speaker 1>that's

00:57:46.620 --> 00:57:48.860
<v Speaker 1>you should probably do in your Kubernetes cluster

00:57:49.115 --> 00:57:51.994
<v Speaker 1>is normally you have two DNS servers that

00:57:51.994 --> 00:57:53.755
<v Speaker 1>are useful for clients.

00:57:53.994 --> 00:57:57.435
<v Speaker 1>In Kubernetes clusters, there's one service IP and

00:57:57.674 --> 00:58:00.315
<v Speaker 1>all clients go to this. So if that's

00:58:00.315 --> 00:58:01.195
<v Speaker 1>overloaded,

00:58:01.515 --> 00:58:03.910
<v Speaker 1>a client will just need a degree. So

00:58:03.910 --> 00:58:07.110
<v Speaker 1>once you have a cascading failure, it's there's

00:58:07.110 --> 00:58:09.030
<v Speaker 1>no way we can come out of this.

00:58:09.030 --> 00:58:11.590
<v Speaker 1>So what you should have is have two

00:58:11.590 --> 00:58:12.950
<v Speaker 1>sets of core DNS

00:58:13.270 --> 00:58:14.870
<v Speaker 1>serving two different

00:58:14.950 --> 00:58:15.990
<v Speaker 1>service IPs

00:58:16.475 --> 00:58:19.115
<v Speaker 1>and then updating all your notes to have

00:58:19.115 --> 00:58:21.435
<v Speaker 1>those two IPs in the result of the

00:58:21.435 --> 00:58:21.995
<v Speaker 1>comp.

00:58:22.395 --> 00:58:24.795
<v Speaker 1>And then at least client can move to

00:58:24.795 --> 00:58:26.555
<v Speaker 1>the other one, which is maybe

00:58:26.875 --> 00:58:28.555
<v Speaker 1>less loaded than the previous one.

00:58:29.630 --> 00:58:32.110
<v Speaker 0>Yeah. That's a great tip, actually. That's nice.

00:58:32.590 --> 00:58:34.990
<v Speaker 1>I wish I was involved in these decisions

00:58:34.990 --> 00:58:36.670
<v Speaker 1>when they were made in Kubernetes,

00:58:36.670 --> 00:58:37.390
<v Speaker 1>but yeah.

00:58:38.190 --> 00:58:40.270
<v Speaker 0>There there's tough time. It's not it's you

00:58:40.270 --> 00:58:41.710
<v Speaker 0>can, you know, fail the cat. We can

00:58:41.710 --> 00:58:42.990
<v Speaker 0>get that changed. We can make it better.

00:58:43.155 --> 00:58:44.675
<v Speaker 0>I mean, think it's the

00:58:45.235 --> 00:58:47.715
<v Speaker 1>first part that's that will never change.

00:58:49.795 --> 00:58:52.035
<v Speaker 0>Alright. I don't think we have any more

00:58:52.035 --> 00:58:54.755
<v Speaker 0>questions. So with that, I'll just say, you

00:58:54.755 --> 00:58:56.035
<v Speaker 0>know, thank you for

00:58:56.500 --> 00:58:59.380
<v Speaker 0>joining me today. That was really insightful and

00:58:59.380 --> 00:59:00.100
<v Speaker 0>you know, getting

00:59:00.580 --> 00:59:02.660
<v Speaker 0>your experience and your understanding of the project

00:59:02.660 --> 00:59:04.260
<v Speaker 0>and the demos and just getting a good

00:59:04.260 --> 00:59:06.580
<v Speaker 0>look into how CoreDNS functions and how the

00:59:06.580 --> 00:59:07.940
<v Speaker 0>plug ins work like all of that was

00:59:07.940 --> 00:59:09.460
<v Speaker 0>great. So thank you for taking the time

00:59:09.460 --> 00:59:11.365
<v Speaker 0>to join me today. Cool. Thanks for having

00:59:11.365 --> 00:59:13.285
<v Speaker 1>me. Alright. Well, you have a a great

00:59:13.285 --> 00:59:14.725
<v Speaker 0>evening. I know it's getting late where you

00:59:14.725 --> 00:59:16.645
<v Speaker 0>are, so I won't keep you much longer.

00:59:16.645 --> 00:59:18.165
<v Speaker 0>But again, a pleasure and I'll speak to

00:59:18.165 --> 00:59:20.165
<v Speaker 0>you soon. Cool. Great. Thanks. Bye bye.
