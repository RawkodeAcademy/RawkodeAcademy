WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 71ce2f30-846a-4fd7-86cf-148afe6aa899
Created: 2025-04-29T12:45:22.783Z
Duration: 485.14105
Channels: 1

00:00:00.080 --> 00:00:02.879
<v Speaker 0>Hello and welcome back to the Rawkode Academy.

00:00:02.879 --> 00:00:04.640
<v Speaker 0>I'm your host David Flanagan,

00:00:04.720 --> 00:00:06.640
<v Speaker 0>although you can find me across the Internet

00:00:06.640 --> 00:00:07.680
<v Speaker 0>as Rawkode.

00:00:07.680 --> 00:00:09.440
<v Speaker 0>Today we're taking a look at a new

00:00:09.440 --> 00:00:11.599
<v Speaker 0>ngrok controller for Kubernetes.

00:00:12.000 --> 00:00:14.799
<v Speaker 0>This ngrok controller is different from all the

00:00:14.799 --> 00:00:17.335
<v Speaker 0>other ngrok controllers And you'll find out why

00:00:17.335 --> 00:00:19.735
<v Speaker 0>in just a few moments. This ngrok controller

00:00:19.735 --> 00:00:22.455
<v Speaker 0>is from a company called ngrok.

00:00:22.455 --> 00:00:23.175
<v Speaker 0>Yes.

00:00:23.415 --> 00:00:25.975
<v Speaker 0>The company that provides a CLI that tunnels

00:00:25.975 --> 00:00:28.455
<v Speaker 0>your local development environment onto the Internet for

00:00:28.455 --> 00:00:30.380
<v Speaker 0>you to share with anyone you want. They're

00:00:30.380 --> 00:00:33.180
<v Speaker 0>now entering the Kubernetes ngrok space and like

00:00:33.180 --> 00:00:35.020
<v Speaker 0>I said, it's a little bit different.

00:00:35.340 --> 00:00:37.420
<v Speaker 0>So before we dive in to what's different

00:00:37.420 --> 00:00:39.500
<v Speaker 0>with ngrok, let's take a look at this

00:00:39.500 --> 00:00:40.379
<v Speaker 0>traditional

00:00:40.460 --> 00:00:42.460
<v Speaker 0>load balancer approach on EKS,

00:00:42.725 --> 00:00:45.365
<v Speaker 0>the managed Kubernetes service from AWS.

00:00:46.405 --> 00:00:47.045
<v Speaker 0>First,

00:00:47.445 --> 00:00:48.165
<v Speaker 0>we have

00:00:48.805 --> 00:00:51.205
<v Speaker 0>some pods and a service. We have the

00:00:51.205 --> 00:00:53.364
<v Speaker 0>clustered v one application, which is just a

00:00:53.364 --> 00:00:54.885
<v Speaker 0>video of me tapping my watch.

00:00:55.530 --> 00:00:58.410
<v Speaker 0>It's exposed currently only within the cluster as

00:00:58.410 --> 00:01:01.370
<v Speaker 0>a cluster IP service called clustered v one.

00:01:01.449 --> 00:01:03.210
<v Speaker 0>Now if I want to expose this to

00:01:03.210 --> 00:01:04.090
<v Speaker 0>the Internet,

00:01:04.409 --> 00:01:06.010
<v Speaker 0>I would go to Versus Code,

00:01:06.810 --> 00:01:08.090
<v Speaker 0>open the v one YAML,

00:01:08.735 --> 00:01:10.815
<v Speaker 0>and change cluster IP

00:01:10.815 --> 00:01:11.535
<v Speaker 0>to

00:01:12.175 --> 00:01:13.455
<v Speaker 0>a load balancer.

00:01:14.655 --> 00:01:17.055
<v Speaker 0>We would then come back and reapply our

00:01:17.055 --> 00:01:17.935
<v Speaker 0>configuration

00:01:17.935 --> 00:01:19.055
<v Speaker 0>for v one.

00:01:20.015 --> 00:01:22.255
<v Speaker 0>Now when we run get service

00:01:22.740 --> 00:01:25.300
<v Speaker 0>in the background, AWS has something called a

00:01:25.300 --> 00:01:27.380
<v Speaker 0>cloud controller manager. And in fact, this is

00:01:27.380 --> 00:01:29.460
<v Speaker 0>true for all cloud providers.

00:01:29.700 --> 00:01:32.260
<v Speaker 0>It monitors for load balancer services and provisions

00:01:32.260 --> 00:01:34.660
<v Speaker 0>a cloud load balancer. In this case, a

00:01:34.660 --> 00:01:36.260
<v Speaker 0>classic load balancer on AWS.

00:01:36.625 --> 00:01:38.865
<v Speaker 0>This gives us a domain name that we

00:01:38.865 --> 00:01:41.185
<v Speaker 0>can then curl on the right port.

00:01:41.664 --> 00:01:44.304
<v Speaker 0>Now these take time. Cloud load balancers typically

00:01:44.304 --> 00:01:46.465
<v Speaker 0>take anywhere from two to three minutes before

00:01:46.465 --> 00:01:48.225
<v Speaker 0>they'll start serving traffic.

00:01:48.625 --> 00:01:50.545
<v Speaker 0>Not only that, they're quite expensive.

00:01:51.000 --> 00:01:53.400
<v Speaker 0>So a classic load balancer as provisioned this

00:01:53.400 --> 00:01:55.800
<v Speaker 0>way by requesting a load balancer service will

00:01:55.800 --> 00:01:58.760
<v Speaker 0>typically run around 18 to $20 per month

00:01:58.760 --> 00:02:01.479
<v Speaker 0>per load balancer. So if you go down

00:02:01.479 --> 00:02:03.000
<v Speaker 0>this path and do this for all of

00:02:03.000 --> 00:02:04.845
<v Speaker 0>your services that you need to expose, you

00:02:04.845 --> 00:02:06.765
<v Speaker 0>can end up paying more load balancers than

00:02:06.765 --> 00:02:09.324
<v Speaker 0>anything else. And let's not forget, you've also

00:02:09.324 --> 00:02:11.885
<v Speaker 0>got to pay the gigabytes of traffic submitted

00:02:11.885 --> 00:02:14.845
<v Speaker 0>over the network too. Okay. So let's run

00:02:14.845 --> 00:02:17.325
<v Speaker 0>it again. And now we have our exposed

00:02:17.325 --> 00:02:19.725
<v Speaker 0>service via the expensive ELB.

00:02:21.010 --> 00:02:23.010
<v Speaker 0>But we don't wanna go that route. So

00:02:23.010 --> 00:02:25.250
<v Speaker 0>let's revert this to cluster IP

00:02:25.250 --> 00:02:27.330
<v Speaker 0>and reapply our v one YAML.

00:02:27.490 --> 00:02:29.410
<v Speaker 0>Now I said the ngrok's approach was a

00:02:29.410 --> 00:02:31.170
<v Speaker 0>little bit different. So if you want to

00:02:31.170 --> 00:02:33.730
<v Speaker 0>learn more, well, watch this video, but also

00:02:33.730 --> 00:02:36.335
<v Speaker 0>check out the release blog on ngrok.com.

00:02:36.415 --> 00:02:38.174
<v Speaker 0>If you scroll down just a little bit,

00:02:38.174 --> 00:02:40.415
<v Speaker 0>you'll find an architecture diagram for how this

00:02:40.415 --> 00:02:43.775
<v Speaker 0>works. Now ngrok ngrok controller does not use

00:02:43.775 --> 00:02:46.974
<v Speaker 0>in cloud provider load balancer at all, meaning

00:02:46.974 --> 00:02:48.254
<v Speaker 0>you don't need to pay for one.

00:02:49.090 --> 00:02:51.010
<v Speaker 0>What actually happens is that they have the

00:02:51.010 --> 00:02:54.450
<v Speaker 0>ngrok ngrok service, which sits between your cluster

00:02:54.450 --> 00:02:55.410
<v Speaker 0>and the Internet.

00:02:56.129 --> 00:02:58.290
<v Speaker 0>As your quest comes in, it hits the

00:02:58.290 --> 00:02:59.410
<v Speaker 0>ngrok service,

00:02:59.569 --> 00:03:01.330
<v Speaker 0>which will tunnel the traffic through to your

00:03:01.330 --> 00:03:04.129
<v Speaker 0>ngrok's controller and through to your application.

00:03:04.505 --> 00:03:06.985
<v Speaker 0>There's also a little bit of magic sauce,

00:03:07.385 --> 00:03:09.065
<v Speaker 0>and that is that when you go through

00:03:09.065 --> 00:03:10.745
<v Speaker 0>the ngrok ngrok service,

00:03:10.905 --> 00:03:12.905
<v Speaker 0>you can also take advantage of all of

00:03:12.905 --> 00:03:13.945
<v Speaker 0>their middlewares.

00:03:14.265 --> 00:03:16.745
<v Speaker 0>So on today's demo, we're going to deploy

00:03:16.745 --> 00:03:18.585
<v Speaker 0>the ngrok ngrok controller,

00:03:19.310 --> 00:03:21.550
<v Speaker 0>attach a middleware for authentication

00:03:21.550 --> 00:03:23.390
<v Speaker 0>to protect our application,

00:03:23.629 --> 00:03:26.190
<v Speaker 0>and it's gonna be faster than the ELB.

00:03:26.349 --> 00:03:28.110
<v Speaker 0>Let's take a look. So let's go back

00:03:28.110 --> 00:03:30.590
<v Speaker 0>to code and open ngrok ngrok dot yaml.

00:03:31.245 --> 00:03:33.325
<v Speaker 0>Here, we have a standard networking v one

00:03:33.325 --> 00:03:35.565
<v Speaker 0>ngrok object where I've set the ngrok class

00:03:35.565 --> 00:03:36.924
<v Speaker 0>name to be ngrok.

00:03:36.924 --> 00:03:39.084
<v Speaker 0>We have the back end configured to root

00:03:39.084 --> 00:03:42.205
<v Speaker 0>everything on slash as a prefix to clustered

00:03:42.205 --> 00:03:43.565
<v Speaker 0>v one on the correct port.

00:03:44.360 --> 00:03:45.160
<v Speaker 0>However,

00:03:45.480 --> 00:03:47.320
<v Speaker 0>we need a host.

00:03:48.359 --> 00:03:50.920
<v Speaker 0>So we're gonna go to the ngrok portal

00:03:51.079 --> 00:03:53.480
<v Speaker 0>where we can ask for a new domain.

00:03:53.879 --> 00:03:55.560
<v Speaker 0>Now everything I'm doing today is on the

00:03:55.560 --> 00:03:58.520
<v Speaker 0>ngrok free plan, which gives you access to

00:03:58.599 --> 00:03:59.239
<v Speaker 0>one domain.

00:04:00.525 --> 00:04:02.605
<v Speaker 0>We paste this in as the host and

00:04:02.605 --> 00:04:04.925
<v Speaker 0>remove the ngrok CLI stuff.

00:04:07.085 --> 00:04:09.405
<v Speaker 0>Like so. Now I also have a just

00:04:09.405 --> 00:04:11.645
<v Speaker 0>file here that has a helm upgrade install

00:04:11.645 --> 00:04:15.085
<v Speaker 0>command. This installs the ngrok ngrok ngrok controller.

00:04:15.860 --> 00:04:17.699
<v Speaker 0>For more details on how to install the

00:04:17.699 --> 00:04:18.820
<v Speaker 0>ngrok controller,

00:04:19.220 --> 00:04:25.060
<v Speaker 0>you can go github.com/ngrok/kubernetes-ngrok-controller,

00:04:25.220 --> 00:04:27.539
<v Speaker 0>where the instructions to add the repository and

00:04:27.539 --> 00:04:29.620
<v Speaker 0>configure the installation are all available.

00:04:30.325 --> 00:04:32.085
<v Speaker 0>But for us, we're just going to run

00:04:32.085 --> 00:04:34.725
<v Speaker 0>just ngrok to run the helm upgrade command,

00:04:34.725 --> 00:04:37.845
<v Speaker 0>which consumes my API token and authentication token

00:04:37.845 --> 00:04:39.285
<v Speaker 0>from my environment.

00:04:40.405 --> 00:04:42.885
<v Speaker 0>We can now do a kubectl apply

00:04:42.885 --> 00:04:43.605
<v Speaker 0>on

00:04:43.925 --> 00:04:45.365
<v Speaker 0>my ngrok resource.

00:04:47.260 --> 00:04:49.820
<v Speaker 0>Now we can run kubectl get pods

00:04:49.900 --> 00:04:50.860
<v Speaker 0>service

00:04:50.860 --> 00:04:51.660
<v Speaker 0>ing.

00:04:52.860 --> 00:04:55.260
<v Speaker 0>We'll see the ingress controller is running. We

00:04:55.260 --> 00:04:57.580
<v Speaker 0>still only have a cluster IP service and

00:04:57.580 --> 00:04:59.420
<v Speaker 0>no other load balancer service available,

00:05:00.014 --> 00:05:01.855
<v Speaker 0>and our ngrok is here.

00:05:02.095 --> 00:05:04.095
<v Speaker 0>So let's head back to the ngrok portal

00:05:04.495 --> 00:05:06.895
<v Speaker 0>where we're now on the endpoints page. We'll

00:05:06.895 --> 00:05:08.415
<v Speaker 0>give that a quick refresh,

00:05:09.055 --> 00:05:11.215
<v Speaker 0>and we now see an endpoint created by

00:05:11.215 --> 00:05:12.975
<v Speaker 0>the ngrok ngrok controller.

00:05:13.320 --> 00:05:14.680
<v Speaker 0>We can click on this and we see

00:05:14.680 --> 00:05:16.920
<v Speaker 0>it's configured to the edge. This just means

00:05:16.920 --> 00:05:19.400
<v Speaker 0>that our back end is available for the

00:05:19.400 --> 00:05:19.960
<v Speaker 0>app.

00:05:20.600 --> 00:05:21.720
<v Speaker 0>So let's click,

00:05:22.200 --> 00:05:25.160
<v Speaker 0>and right away, we have the video where

00:05:25.160 --> 00:05:28.535
<v Speaker 0>I'll tap on my watch. Now ngrok metalwares

00:05:28.535 --> 00:05:31.255
<v Speaker 0>can be configured through this portal too.

00:05:31.415 --> 00:05:33.175
<v Speaker 0>If you want to enable MTLS,

00:05:33.175 --> 00:05:37.575
<v Speaker 0>you can. TLS termination, sure. Circuit breakers, yes.

00:05:37.815 --> 00:05:38.295
<v Speaker 0>Compression,

00:05:38.640 --> 00:05:42.320
<v Speaker 0>IP restrictions, OAuth, OIDC, request headers, response headers,

00:05:42.320 --> 00:05:44.320
<v Speaker 0>SAML, and webhook verification.

00:05:44.560 --> 00:05:46.400
<v Speaker 0>But, of course, we don't want to configure

00:05:46.400 --> 00:05:48.640
<v Speaker 0>this through the ngrok UI. As nice as

00:05:48.640 --> 00:05:51.360
<v Speaker 0>that is, let's keep this Kubernetes native.

00:05:52.455 --> 00:05:55.175
<v Speaker 0>So let's go back to Versus Code where

00:05:55.175 --> 00:05:56.935
<v Speaker 0>I have a google.yaml.

00:05:57.335 --> 00:05:59.814
<v Speaker 0>Here, we're going to create a custom resource.

00:05:59.814 --> 00:06:01.974
<v Speaker 0>This is an ngrok module set. We're gonna

00:06:01.974 --> 00:06:04.294
<v Speaker 0>call this Google auth and what we're saying

00:06:04.294 --> 00:06:07.730
<v Speaker 0>is enable the auth module, the Google provider,

00:06:07.810 --> 00:06:09.729
<v Speaker 0>and only allow access

00:06:09.729 --> 00:06:14.690
<v Speaker 0>to this application with the email address david@rawkode.academy.

00:06:15.650 --> 00:06:17.970
<v Speaker 0>We can also update our ingress to take

00:06:17.970 --> 00:06:19.810
<v Speaker 0>advantage of this module set.

00:06:20.505 --> 00:06:22.985
<v Speaker 0>We do this via annotations where we set

00:06:22.985 --> 00:06:26.025
<v Speaker 0>case.ngrok.com/modules

00:06:26.025 --> 00:06:27.865
<v Speaker 0>and we say apply

00:06:27.945 --> 00:06:28.985
<v Speaker 0>Google off.

00:06:29.225 --> 00:06:31.145
<v Speaker 0>Now I've called this Google off because it

00:06:31.145 --> 00:06:33.465
<v Speaker 0>has a single module, but you can enable

00:06:33.465 --> 00:06:34.505
<v Speaker 0>multiple modules

00:06:34.600 --> 00:06:35.720
<v Speaker 0>at the same time.

00:06:36.200 --> 00:06:37.480
<v Speaker 0>So now we can go back to our

00:06:37.480 --> 00:06:39.320
<v Speaker 0>terminal and we can apply

00:06:40.760 --> 00:06:43.160
<v Speaker 0>a Google authentication module set.

00:06:44.040 --> 00:06:45.400
<v Speaker 0>We can reapply

00:06:45.400 --> 00:06:48.440
<v Speaker 0>our ngrok with the new annotation.

00:06:48.520 --> 00:06:50.575
<v Speaker 0>So let's head back to the portal and

00:06:50.575 --> 00:06:52.415
<v Speaker 0>click on our application again.

00:06:52.815 --> 00:06:55.455
<v Speaker 0>This time, we get presented with a Google

00:06:55.455 --> 00:06:57.775
<v Speaker 0>OAuth flow using ngrok.com

00:06:57.775 --> 00:06:59.455
<v Speaker 0>as OAuth application.

00:06:59.775 --> 00:07:00.815
<v Speaker 0>We click login

00:07:01.135 --> 00:07:03.455
<v Speaker 0>and there's the video. Let's go to OAuth

00:07:03.455 --> 00:07:05.850
<v Speaker 0>and hit refresh. You can see here it's

00:07:05.850 --> 00:07:08.009
<v Speaker 0>configured on the back end using a managed

00:07:08.009 --> 00:07:09.290
<v Speaker 0>ngrok application.

00:07:09.770 --> 00:07:11.449
<v Speaker 0>Of course, if you want to bring your

00:07:11.449 --> 00:07:12.970
<v Speaker 0>own OAuth application,

00:07:13.289 --> 00:07:14.970
<v Speaker 0>all you need do is add a client

00:07:14.970 --> 00:07:18.325
<v Speaker 0>ID and client secret to the CRD.

00:07:19.044 --> 00:07:20.725
<v Speaker 0>You can get all the details you need

00:07:20.725 --> 00:07:27.925
<v Speaker 0>from kubectl explainngrokmoduleset.modules.0auth.

00:07:28.805 --> 00:07:31.044
<v Speaker 0>You can then add to Google and you'll

00:07:31.044 --> 00:07:33.690
<v Speaker 0>see everything you need is documented.

00:07:33.930 --> 00:07:36.090
<v Speaker 0>So let's just try that again from another

00:07:36.090 --> 00:07:36.810
<v Speaker 0>browser.

00:07:37.450 --> 00:07:39.530
<v Speaker 0>This time I'll switch to my personal profile

00:07:39.530 --> 00:07:41.690
<v Speaker 0>which has a different Google account. We click

00:07:41.690 --> 00:07:43.690
<v Speaker 0>login and we get access denied.

00:07:44.625 --> 00:07:47.185
<v Speaker 0>So that's pretty sweet. You can expose an

00:07:47.185 --> 00:07:50.545
<v Speaker 0>application in Kubernetes with the ngrok ingress controller,

00:07:50.545 --> 00:07:53.585
<v Speaker 0>take advantage of their middlewares and avoid load

00:07:53.585 --> 00:07:56.065
<v Speaker 0>balance or fees with your cloud provider. So

00:07:56.065 --> 00:07:58.065
<v Speaker 0>go check out ngrok ingress and get started

00:07:58.065 --> 00:08:00.096
<v Speaker 0>today for free. Go have some fun.
