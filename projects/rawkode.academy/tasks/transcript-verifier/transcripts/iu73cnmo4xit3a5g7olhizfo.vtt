WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 0a33b973-e378-4c9e-b4a4-b6af669e2cd9
Created: 2025-04-29T15:40:49.225Z
Duration: 4433.2417
Channels: 1

00:02:44.205 --> 00:02:45.005
<v Speaker 0>Hello,

00:02:45.005 --> 00:02:47.725
<v Speaker 0>and welcome back to the Rawkode Academy.

00:02:47.725 --> 00:02:50.045
<v Speaker 0>I am your host, David Flanagan.

00:02:50.260 --> 00:02:52.260
<v Speaker 0>Although, hopefully, you know me from across the

00:02:52.260 --> 00:02:53.700
<v Speaker 0>Internet as Rawkode.

00:02:54.420 --> 00:02:56.820
<v Speaker 0>Today, we're taking a look at another open

00:02:56.820 --> 00:02:59.140
<v Speaker 0>source project. This one is Kamaji.

00:02:59.140 --> 00:03:00.980
<v Speaker 0>It's going to simplify

00:03:01.380 --> 00:03:03.460
<v Speaker 0>your Kubernetes control plane life.

00:03:04.215 --> 00:03:05.735
<v Speaker 0>We're gonna dive into that in much more

00:03:05.735 --> 00:03:07.495
<v Speaker 0>detail in just a moment. But first, I

00:03:07.495 --> 00:03:09.655
<v Speaker 0>wanna introduce our guest who's gonna guide us

00:03:09.655 --> 00:03:11.415
<v Speaker 0>through the Kamaji journey,

00:03:12.135 --> 00:03:12.855
<v Speaker 0>Daniel.

00:03:13.015 --> 00:03:15.735
<v Speaker 0>Hello, Daniel. How are you? Hey. Everything is

00:03:15.735 --> 00:03:17.575
<v Speaker 1>fine. Hope the same for you. Nice to

00:03:17.575 --> 00:03:18.055
<v Speaker 1>meet you all.

00:03:18.860 --> 00:03:21.180
<v Speaker 0>Thank you very much. Yeah. I'm doing good.

00:03:21.180 --> 00:03:23.260
<v Speaker 0>I'm always excited to take a look at

00:03:23.260 --> 00:03:24.220
<v Speaker 0>a new

00:03:24.459 --> 00:03:27.099
<v Speaker 0>open source tool, especially within the Kubernetes space.

00:03:27.099 --> 00:03:29.340
<v Speaker 0>I like playing with Kubernetes, and I like

00:03:29.340 --> 00:03:30.780
<v Speaker 0>my Kubernetes to be easier.

00:03:31.225 --> 00:03:33.305
<v Speaker 0>And I I'm pretty sure you're gonna show

00:03:33.305 --> 00:03:34.985
<v Speaker 0>me some really cool things today to make

00:03:34.985 --> 00:03:37.305
<v Speaker 0>my life happier and better. And if I

00:03:37.305 --> 00:03:39.545
<v Speaker 0>get more sleep, I'm a happy man. And

00:03:39.545 --> 00:03:42.185
<v Speaker 0>we've already had a comment in the chat

00:03:42.185 --> 00:03:42.985
<v Speaker 0>from engine

00:03:43.280 --> 00:03:45.599
<v Speaker 0>who is very curious about the claim with

00:03:45.599 --> 00:03:48.320
<v Speaker 0>a fraction of the operational burden.

00:03:48.720 --> 00:03:50.640
<v Speaker 0>So, yes, we are going to make your

00:03:50.640 --> 00:03:53.120
<v Speaker 0>Kubernetes lives easier today. But before we do

00:03:53.120 --> 00:03:55.120
<v Speaker 0>that, can you please tell us a little

00:03:55.120 --> 00:03:59.105
<v Speaker 0>bit about about yourself, please? Sure. Sure. Absolutely.

00:03:59.105 --> 00:04:01.505
<v Speaker 1>So my name is Dario. The surname is,

00:04:02.065 --> 00:04:03.745
<v Speaker 1>but I know that it's really hard, especially

00:04:03.745 --> 00:04:04.385
<v Speaker 1>because

00:04:04.545 --> 00:04:07.105
<v Speaker 1>from abroad, it's really hard to pronounce in

00:04:07.105 --> 00:04:08.865
<v Speaker 1>the correct pronunciation in Italian.

00:04:09.025 --> 00:04:11.585
<v Speaker 1>And I'm based in the North Of Italy

00:04:11.825 --> 00:04:15.020
<v Speaker 1>near Turin, and I'm software engineer. I fell

00:04:15.020 --> 00:04:16.860
<v Speaker 1>in love with containers

00:04:17.100 --> 00:04:19.260
<v Speaker 1>since a sizable amount of years. Honestly, I

00:04:19.260 --> 00:04:20.060
<v Speaker 1>don't remember.

00:04:20.300 --> 00:04:23.180
<v Speaker 1>And I was a developer, a web developer,

00:04:23.260 --> 00:04:25.340
<v Speaker 1>and I faced the issue to scale my

00:04:25.340 --> 00:04:28.695
<v Speaker 1>applications across the cloud and to the Infinite

00:04:28.695 --> 00:04:29.495
<v Speaker 1>and beyond.

00:04:30.134 --> 00:04:33.574
<v Speaker 1>And I fell in love with Docker and

00:04:33.574 --> 00:04:35.015
<v Speaker 1>then OpenShift.

00:04:35.414 --> 00:04:37.815
<v Speaker 1>I use also MesoFacebook.c0s,

00:04:37.815 --> 00:04:38.935
<v Speaker 1>and it was really

00:04:39.280 --> 00:04:42.400
<v Speaker 1>a tough job. And then I started working

00:04:42.400 --> 00:04:43.840
<v Speaker 1>on Kubernetes.

00:04:43.840 --> 00:04:45.040
<v Speaker 1>I started working

00:04:45.520 --> 00:04:47.120
<v Speaker 1>in a cloud provider,

00:04:47.520 --> 00:04:50.160
<v Speaker 1>and I was responsible for the cyber liability

00:04:50.160 --> 00:04:53.600
<v Speaker 1>engineering stuff. And I started developing operators, controller

00:04:53.600 --> 00:04:56.535
<v Speaker 1>times. And I had the time to starting

00:04:56.535 --> 00:04:59.815
<v Speaker 1>the code base and especially trying to combine

00:04:59.815 --> 00:05:03.175
<v Speaker 1>my software skills, my software development skills with

00:05:03.175 --> 00:05:04.215
<v Speaker 1>the systems.

00:05:04.615 --> 00:05:06.775
<v Speaker 1>And starting from 2020,

00:05:06.935 --> 00:05:09.895
<v Speaker 1>I joined Classics as a technical adviser,

00:05:10.479 --> 00:05:12.320
<v Speaker 1>and I'm doing

00:05:13.039 --> 00:05:16.639
<v Speaker 1>the technical stuff. So I write software.

00:05:16.879 --> 00:05:18.639
<v Speaker 1>I do demos and so on and so

00:05:18.639 --> 00:05:21.120
<v Speaker 1>forth, and it's really fun. I'm enjoying this

00:05:21.120 --> 00:05:21.439
<v Speaker 1>job.

00:05:22.815 --> 00:05:23.375
<v Speaker 0>Awesome.

00:05:23.775 --> 00:05:26.255
<v Speaker 0>So this is the the first Kubernetes

00:05:26.255 --> 00:05:28.735
<v Speaker 0>open source project from Clastics. Right? You also

00:05:28.735 --> 00:05:31.935
<v Speaker 0>helped maintain Captule, I believe? Yeah. Yeah. It's

00:05:31.935 --> 00:05:34.575
<v Speaker 1>the second one. We started with Captule because

00:05:34.974 --> 00:05:37.775
<v Speaker 1>we noticed that there is a missing gap

00:05:37.939 --> 00:05:40.900
<v Speaker 1>in Kubernetes ecosystem, especially regarding the multi tenancy.

00:05:41.379 --> 00:05:45.060
<v Speaker 1>So instead of spawning several Kubernetes clusters,

00:05:45.060 --> 00:05:46.979
<v Speaker 1>you can use just a single one, and

00:05:46.979 --> 00:05:49.860
<v Speaker 1>you can isolate the namespaces into a tenant

00:05:49.860 --> 00:05:53.125
<v Speaker 1>abstraction. So the tenant abstraction is pretty common

00:05:53.685 --> 00:05:54.485
<v Speaker 1>because

00:05:54.565 --> 00:05:56.885
<v Speaker 1>when you got multiple namespaces, you're ending up

00:05:56.885 --> 00:05:59.365
<v Speaker 1>grouping them into this abstraction.

00:05:59.365 --> 00:06:01.205
<v Speaker 1>It's a layer that is a collection of

00:06:01.205 --> 00:06:04.085
<v Speaker 1>namespaces. But sometimes you have to spin up

00:06:04.085 --> 00:06:07.400
<v Speaker 1>multiple clusters for various reasons, maybe because you

00:06:07.400 --> 00:06:09.800
<v Speaker 1>would like to avoid at all the

00:06:10.440 --> 00:06:12.600
<v Speaker 1>noise enabler effects, or you would like to

00:06:12.600 --> 00:06:15.720
<v Speaker 1>use different API versions, different Kubernetes clusters, and

00:06:15.720 --> 00:06:18.995
<v Speaker 1>so forth. So we started thinking, how to

00:06:18.995 --> 00:06:22.355
<v Speaker 1>address the real hard multi tenancy because casual

00:06:22.675 --> 00:06:24.755
<v Speaker 1>is addressing the soft one. So just name

00:06:24.755 --> 00:06:26.915
<v Speaker 1>spaces. But I would like to bring my

00:06:26.915 --> 00:06:30.035
<v Speaker 1>real own nodes and having a real control

00:06:30.035 --> 00:06:31.875
<v Speaker 1>plane that I can use. So I can

00:06:32.010 --> 00:06:32.890
<v Speaker 1>toggle

00:06:33.290 --> 00:06:36.810
<v Speaker 1>dynamic admission controllers. I can fine tune parameters

00:06:36.810 --> 00:06:38.650
<v Speaker 1>and so on and so forth. And

00:06:38.970 --> 00:06:42.090
<v Speaker 1>this drove us in drafting Kamaji that I'm

00:06:42.090 --> 00:06:42.810
<v Speaker 1>going to present today.

00:06:44.025 --> 00:06:46.185
<v Speaker 0>Yeah. You seem to be quite fond of

00:06:46.185 --> 00:06:49.384
<v Speaker 0>solving the hard problems with Kubernetes, like multitenancy

00:06:49.384 --> 00:06:51.465
<v Speaker 0>and control plane commoditization.

00:06:51.465 --> 00:06:53.384
<v Speaker 0>Like Yeah. Yeah. I guess as if you

00:06:53.384 --> 00:06:54.824
<v Speaker 0>just woken up about how can I make

00:06:54.824 --> 00:06:56.720
<v Speaker 0>my life a little harder today, but at

00:06:56.720 --> 00:06:58.400
<v Speaker 0>the same time, help everyone else? So I

00:06:58.400 --> 00:07:00.160
<v Speaker 0>I really appreciate that you are working on

00:07:00.160 --> 00:07:01.600
<v Speaker 0>these hard problems because

00:07:02.000 --> 00:07:04.160
<v Speaker 0>multitenancy is hard and

00:07:04.960 --> 00:07:07.440
<v Speaker 0>yeah. But it's it's good that there's

00:07:07.440 --> 00:07:10.080
<v Speaker 0>much more sophisticated and better tooling coming out

00:07:10.080 --> 00:07:11.759
<v Speaker 0>to kinda help people with that.

00:07:12.565 --> 00:07:14.485
<v Speaker 1>Yeah. Totally. Totally agree.

00:07:14.805 --> 00:07:16.565
<v Speaker 0>So with that being said, why don't you

00:07:16.565 --> 00:07:18.725
<v Speaker 0>kinda touched on it there about what Kamaji

00:07:18.725 --> 00:07:20.165
<v Speaker 0>is, but do you wanna give us a

00:07:20.165 --> 00:07:23.445
<v Speaker 0>slightly longer description? What what is Kamaji for,

00:07:23.445 --> 00:07:25.045
<v Speaker 0>and what problems does it solve for people?

00:07:26.310 --> 00:07:27.590
<v Speaker 1>Well, you know,

00:07:28.550 --> 00:07:31.190
<v Speaker 1>I started using Kubernetes starting from

00:07:31.510 --> 00:07:32.790
<v Speaker 1>02/2016.

00:07:33.190 --> 00:07:34.949
<v Speaker 1>And at the time, I don't remember, but

00:07:34.949 --> 00:07:37.030
<v Speaker 1>I'm pretty sure that there was a huge

00:07:37.030 --> 00:07:39.525
<v Speaker 1>bash script that was used to install a

00:07:39.525 --> 00:07:40.725
<v Speaker 1>Kubernetes cluster.

00:07:41.445 --> 00:07:43.765
<v Speaker 1>It was create cluster or something like that,

00:07:43.765 --> 00:07:45.685
<v Speaker 1>and it was a pain to manage that.

00:07:45.685 --> 00:07:48.165
<v Speaker 1>I remember that all the people that I

00:07:48.165 --> 00:07:51.525
<v Speaker 1>was meeting in Italy, they were using Kubernetes,

00:07:51.525 --> 00:07:54.860
<v Speaker 1>but using the managed services by GKE,

00:07:54.860 --> 00:07:56.940
<v Speaker 1>so by Google Cloud Platform

00:07:57.180 --> 00:07:58.700
<v Speaker 1>or by Azure.

00:07:59.020 --> 00:07:59.580
<v Speaker 1>So

00:07:59.980 --> 00:08:01.420
<v Speaker 1>it was really hard to set up a

00:08:01.420 --> 00:08:05.020
<v Speaker 1>Kubernetes cluster, but the community addresses that

00:08:05.900 --> 00:08:09.625
<v Speaker 1>problem and started developing nice projects. And the

00:08:09.625 --> 00:08:12.265
<v Speaker 1>most satisfying one is obviously KubeAdam,

00:08:12.265 --> 00:08:13.545
<v Speaker 1>because with KubeAdam,

00:08:13.545 --> 00:08:14.265
<v Speaker 1>we can

00:08:14.825 --> 00:08:17.545
<v Speaker 1>configure the worker nodes, the control plane. So

00:08:17.545 --> 00:08:18.905
<v Speaker 1>we got all the building

00:08:19.465 --> 00:08:21.100
<v Speaker 1>blocks to create

00:08:21.340 --> 00:08:24.780
<v Speaker 1>a full fledged installation of cluster of a

00:08:24.780 --> 00:08:25.900
<v Speaker 1>Kubernetes cluster.

00:08:26.300 --> 00:08:29.580
<v Speaker 1>And after that, we ended up also with

00:08:29.660 --> 00:08:32.220
<v Speaker 1>cluster API, and it's really great because in

00:08:32.220 --> 00:08:33.179
<v Speaker 1>the end, it's a sort

00:08:34.054 --> 00:08:36.774
<v Speaker 1>it's not a wrapper. Sorry if I'm saying

00:08:36.774 --> 00:08:39.095
<v Speaker 1>something that is not entirely correct, but it's

00:08:39.095 --> 00:08:40.855
<v Speaker 1>wrapping around kubeadm,

00:08:40.855 --> 00:08:42.214
<v Speaker 1>although you can specify

00:08:43.014 --> 00:08:43.735
<v Speaker 1>different

00:08:43.894 --> 00:08:45.095
<v Speaker 1>bootstrap options.

00:08:45.334 --> 00:08:48.214
<v Speaker 1>But with cluster API, you're ending up spawning

00:08:48.214 --> 00:08:49.175
<v Speaker 1>multiple clusters.

00:08:49.610 --> 00:08:52.570
<v Speaker 1>And with that said, I noticed that a

00:08:52.570 --> 00:08:55.290
<v Speaker 1>lot of people, instead of trying to solve

00:08:55.290 --> 00:08:57.850
<v Speaker 1>the multi tenancy issue in the Kubernetes ecosystem,

00:08:57.930 --> 00:09:00.010
<v Speaker 1>they start spawning multiple clusters.

00:09:00.329 --> 00:09:01.930
<v Speaker 1>And the first one, the second one, the

00:09:01.930 --> 00:09:04.125
<v Speaker 1>third one, and you're ending up with dozen

00:09:04.125 --> 00:09:07.965
<v Speaker 1>or thousand or hundred of clusters according to

00:09:07.965 --> 00:09:10.045
<v Speaker 1>your dimension of your company and so on

00:09:10.045 --> 00:09:12.285
<v Speaker 1>and so forth. And I've been there because

00:09:12.285 --> 00:09:14.365
<v Speaker 1>I was working for this cloud provider.

00:09:14.445 --> 00:09:15.885
<v Speaker 1>And I remember that

00:09:16.125 --> 00:09:17.085
<v Speaker 1>the size

00:09:17.485 --> 00:09:18.045
<v Speaker 1>was

00:09:18.440 --> 00:09:20.760
<v Speaker 1>bit impressive to me at that time because

00:09:20.760 --> 00:09:23.560
<v Speaker 1>I was managing five production clusters

00:09:23.880 --> 00:09:25.080
<v Speaker 1>on bare metal,

00:09:25.560 --> 00:09:27.560
<v Speaker 1>and the overall amount

00:09:28.120 --> 00:09:29.880
<v Speaker 1>of virtual machines was

00:09:30.360 --> 00:09:32.200
<v Speaker 1>2,500

00:09:32.200 --> 00:09:35.745
<v Speaker 1>nodes, virtual machines, but on bare metal. So

00:09:35.745 --> 00:09:37.985
<v Speaker 1>you can understand that I was getting pager

00:09:37.985 --> 00:09:40.945
<v Speaker 1>duty during the night, and I didn't enjoy

00:09:40.945 --> 00:09:43.505
<v Speaker 1>that job, honestly, so much because it was

00:09:43.505 --> 00:09:45.505
<v Speaker 1>really cumbersome to manage. You know, we are

00:09:45.505 --> 00:09:48.150
<v Speaker 1>ending up saying, okay. You can manage Kubernetes

00:09:48.150 --> 00:09:50.550
<v Speaker 1>scale. You can have multiple cluster,

00:09:50.950 --> 00:09:52.310
<v Speaker 1>and you can do everything

00:09:53.190 --> 00:09:56.230
<v Speaker 1>so perfect, but you're ending up obviously with

00:09:56.230 --> 00:09:58.950
<v Speaker 1>some side effects. So although you're trying to

00:09:58.950 --> 00:09:59.670
<v Speaker 1>automate everything,

00:10:01.285 --> 00:10:03.605
<v Speaker 1>you are ending up with some alerts or

00:10:03.605 --> 00:10:05.765
<v Speaker 1>some tasks to perform

00:10:06.485 --> 00:10:10.005
<v Speaker 1>according to the timing. So rotate certificates

00:10:10.005 --> 00:10:11.525
<v Speaker 1>or eventually

00:10:11.605 --> 00:10:13.524
<v Speaker 1>controlling the notice of duration and so on

00:10:13.524 --> 00:10:15.470
<v Speaker 1>and so forth. And at that time, I

00:10:15.470 --> 00:10:17.390
<v Speaker 1>was developing a lot of operators, a lot

00:10:17.390 --> 00:10:18.590
<v Speaker 1>of custom controllers,

00:10:18.830 --> 00:10:20.510
<v Speaker 1>and I then end up saying,

00:10:20.670 --> 00:10:21.870
<v Speaker 1>we got operators.

00:10:22.110 --> 00:10:23.310
<v Speaker 1>Operators are

00:10:23.470 --> 00:10:25.230
<v Speaker 1>translating the human knowledge,

00:10:25.470 --> 00:10:27.070
<v Speaker 1>the operator,

00:10:27.150 --> 00:10:29.470
<v Speaker 1>the human operator knowledge into code.

00:10:30.065 --> 00:10:32.145
<v Speaker 1>And in the end, I'm doing a lot

00:10:32.145 --> 00:10:33.585
<v Speaker 1>of repetitive task,

00:10:33.904 --> 00:10:36.065
<v Speaker 1>taking care of a Kubernetes cluster. So why

00:10:36.065 --> 00:10:38.145
<v Speaker 1>cannot create an operator

00:10:38.145 --> 00:10:40.705
<v Speaker 1>that is taking care of all these activities?

00:10:41.345 --> 00:10:43.940
<v Speaker 1>I was thinking about this project for a

00:10:43.940 --> 00:10:46.180
<v Speaker 1>long time, then I joined Classics.

00:10:46.180 --> 00:10:49.140
<v Speaker 1>I was on the same line with Adriano,

00:10:49.620 --> 00:10:50.820
<v Speaker 1>my business partner.

00:10:51.220 --> 00:10:53.780
<v Speaker 1>And with that said, we decided to start

00:10:53.780 --> 00:10:55.060
<v Speaker 1>developing Kamaji.

00:10:55.060 --> 00:10:56.420
<v Speaker 1>And right now, we got

00:10:56.745 --> 00:10:59.145
<v Speaker 1>this it's not a proof of concept because

00:10:59.145 --> 00:11:00.185
<v Speaker 1>it's working,

00:11:00.585 --> 00:11:02.425
<v Speaker 1>and we got customers that are already using

00:11:02.425 --> 00:11:04.985
<v Speaker 1>that. We are really happy for that.

00:11:05.385 --> 00:11:06.425
<v Speaker 1>And, yeah,

00:11:06.904 --> 00:11:09.320
<v Speaker 1>that's the reason why I'm here. I started

00:11:09.320 --> 00:11:11.480
<v Speaker 1>with multitenancy, and now I'm doing

00:11:12.120 --> 00:11:15.080
<v Speaker 1>deep Kubernetes stuff, the cube inception. You know?

00:11:16.120 --> 00:11:16.920
<v Speaker 0>Nice.

00:11:17.080 --> 00:11:19.720
<v Speaker 0>Yeah. I mean, you said that, you know,

00:11:19.720 --> 00:11:22.040
<v Speaker 0>you've you've done bare metal Kubernetes, and that's

00:11:22.040 --> 00:11:24.040
<v Speaker 0>something that I'm really passionate about as well.

00:11:24.040 --> 00:11:25.685
<v Speaker 0>I I like to run my Kubernetes as

00:11:25.685 --> 00:11:27.605
<v Speaker 0>close to the metal as possible, but I

00:11:27.605 --> 00:11:29.445
<v Speaker 0>think the pattern that that I've seen, I'm

00:11:29.445 --> 00:11:30.565
<v Speaker 0>sure you've seen it too,

00:11:30.805 --> 00:11:32.405
<v Speaker 0>we're seeing loads of other projects kind of

00:11:32.405 --> 00:11:34.885
<v Speaker 0>follows it here, is that for the worker

00:11:34.885 --> 00:11:37.230
<v Speaker 0>pool, yes, you want to be running on

00:11:37.230 --> 00:11:39.550
<v Speaker 0>the metal. But the control plane, you probably

00:11:39.550 --> 00:11:41.150
<v Speaker 0>wanna virtualize it. Like,

00:11:41.950 --> 00:11:44.190
<v Speaker 0>control planes aren't really doing a lot of

00:11:44.190 --> 00:11:46.990
<v Speaker 0>heavy lifting. They're really just right into entity

00:11:46.990 --> 00:11:49.765
<v Speaker 0>and answer some API request. And to run

00:11:49.765 --> 00:11:51.765
<v Speaker 0>them on metal is usually a waste of

00:11:51.765 --> 00:11:53.365
<v Speaker 0>CPU memory.

00:11:54.005 --> 00:11:55.445
<v Speaker 0>And plus, we need to be able to

00:11:55.445 --> 00:11:58.085
<v Speaker 0>handle the upgrade path for these control player

00:11:58.085 --> 00:12:00.245
<v Speaker 0>nodes in a pretty safe manner, and

00:12:01.010 --> 00:12:03.970
<v Speaker 0>bare metal is very, very, very slow to

00:12:03.970 --> 00:12:04.610
<v Speaker 0>reboot.

00:12:04.850 --> 00:12:06.770
<v Speaker 0>So that brings a whole bunch of other

00:12:06.770 --> 00:12:08.690
<v Speaker 0>challenges to it. And I think this is

00:12:08.690 --> 00:12:10.610
<v Speaker 0>why we're seeing this virtualization

00:12:10.610 --> 00:12:12.690
<v Speaker 0>of the control plane become,

00:12:13.330 --> 00:12:14.690
<v Speaker 0>a more popular pattern.

00:12:15.175 --> 00:12:17.255
<v Speaker 0>Then with an interesting one I've seen recently

00:12:17.255 --> 00:12:19.575
<v Speaker 0>was, you know, we've worked for pushing firecracker

00:12:19.575 --> 00:12:21.175
<v Speaker 0>for the control plane, but then bare metal

00:12:21.175 --> 00:12:23.895
<v Speaker 0>worker nodes. And I think Kamaji really comes

00:12:23.895 --> 00:12:25.575
<v Speaker 0>into this space as well and is that,

00:12:25.575 --> 00:12:28.535
<v Speaker 0>yeah, like, we can virtualize this and then

00:12:28.535 --> 00:12:30.215
<v Speaker 0>run all your work bring your own worker

00:12:30.215 --> 00:12:32.270
<v Speaker 0>pool bare metal or not. And I think

00:12:32.670 --> 00:12:35.550
<v Speaker 0>this pattern will become even more prominent as

00:12:35.550 --> 00:12:36.990
<v Speaker 0>time kinda progresses.

00:12:37.710 --> 00:12:40.190
<v Speaker 1>Yeah. Yeah. Absolutely. Anyway, I would like also

00:12:40.190 --> 00:12:41.310
<v Speaker 1>to thank you because

00:12:41.870 --> 00:12:43.870
<v Speaker 1>while we were talking about Kamaji,

00:12:43.870 --> 00:12:46.025
<v Speaker 1>I told you about the cube inception, and

00:12:46.025 --> 00:12:48.025
<v Speaker 1>you used this term, the Kubeception.

00:12:48.185 --> 00:12:49.625
<v Speaker 1>And I tried to create

00:12:50.505 --> 00:12:53.305
<v Speaker 1>a set of slides about these topics of

00:12:53.305 --> 00:12:55.865
<v Speaker 1>the Kubeception. I hope that you enjoy my

00:12:55.865 --> 00:12:57.625
<v Speaker 1>memes because I really love

00:12:58.505 --> 00:13:00.585
<v Speaker 1>crafting memes about Kubernetes.

00:13:01.950 --> 00:13:04.350
<v Speaker 0>Yeah. I thought that Kubeception was a really

00:13:05.070 --> 00:13:08.350
<v Speaker 0>was a really good kind of prominent capture

00:13:08.350 --> 00:13:10.270
<v Speaker 0>word play on what we're gonna be looking

00:13:10.270 --> 00:13:12.190
<v Speaker 0>at today. I I I really wanted that

00:13:12.190 --> 00:13:13.149
<v Speaker 0>to be there. And in fact, we have

00:13:13.149 --> 00:13:14.670
<v Speaker 0>a comment from Russell on the chat as

00:13:14.670 --> 00:13:14.830
<v Speaker 0>well.

00:13:15.524 --> 00:13:18.245
<v Speaker 0>So is this Kubernetes inception, many Kubernetes clusters,

00:13:18.245 --> 00:13:20.165
<v Speaker 0>and say the one Kubernetes cluster?

00:13:22.245 --> 00:13:23.764
<v Speaker 0>Kind of. I think we'll see in just

00:13:23.764 --> 00:13:25.925
<v Speaker 0>a minute. I'm gonna let Adi present some

00:13:25.925 --> 00:13:27.285
<v Speaker 0>slides, and we'll take it from there.

00:13:28.600 --> 00:13:30.759
<v Speaker 0>Engine does ask a question as well. I

00:13:30.759 --> 00:13:31.720
<v Speaker 0>don't know if you wanna tackle it now

00:13:31.720 --> 00:13:33.160
<v Speaker 0>or wait till after your slides, but he

00:13:33.160 --> 00:13:35.560
<v Speaker 0>says, is this similar to SAP

00:13:35.560 --> 00:13:37.639
<v Speaker 0>Gardener in a way to handle the control

00:13:37.639 --> 00:13:38.279
<v Speaker 0>plane?

00:13:38.759 --> 00:13:40.839
<v Speaker 1>Yeah. It's pretty similar, but we will show

00:13:40.839 --> 00:13:42.199
<v Speaker 1>you. I don't want to spoil the plot.

00:13:42.515 --> 00:13:43.235
<v Speaker 0>Alright.

00:13:43.555 --> 00:13:45.075
<v Speaker 0>Well, you are sharing your screen, so I'm

00:13:45.075 --> 00:13:46.595
<v Speaker 0>gonna pop over there.

00:13:46.595 --> 00:13:48.355
<v Speaker 0>Feel free to take it away. And if

00:13:48.355 --> 00:13:49.715
<v Speaker 0>I have any questions, I'll throw them at

00:13:49.715 --> 00:13:50.675
<v Speaker 0>you as we go.

00:13:51.075 --> 00:13:54.035
<v Speaker 1>Sure. Sure. Great. Thank you so much. So

00:13:54.035 --> 00:13:56.515
<v Speaker 1>welcome here, and I would like to present

00:13:56.515 --> 00:13:57.315
<v Speaker 1>you Kamaji.

00:13:58.130 --> 00:14:01.410
<v Speaker 1>And as David said, this is the exception

00:14:01.410 --> 00:14:04.050
<v Speaker 1>because we are doing something really weird,

00:14:04.210 --> 00:14:04.930
<v Speaker 1>at least

00:14:05.250 --> 00:14:07.330
<v Speaker 1>according to the majority of people.

00:14:07.970 --> 00:14:09.890
<v Speaker 1>But I would like to start from the

00:14:09.890 --> 00:14:12.370
<v Speaker 1>beginning because I've been a developer.

00:14:12.825 --> 00:14:14.905
<v Speaker 1>I've been on the other side, and I

00:14:14.905 --> 00:14:15.545
<v Speaker 1>was

00:14:16.505 --> 00:14:18.185
<v Speaker 1>one of the people asking, would like to

00:14:18.185 --> 00:14:19.145
<v Speaker 1>use Kubernetes.

00:14:19.385 --> 00:14:21.065
<v Speaker 1>But I don't want to mention that.

00:14:21.385 --> 00:14:23.465
<v Speaker 1>And right now, in 2022,

00:14:23.465 --> 00:14:25.305
<v Speaker 1>a lot of people is using Kubernetes. I

00:14:25.305 --> 00:14:25.625
<v Speaker 1>say

00:14:26.180 --> 00:14:28.339
<v Speaker 1>most of the companies around the world are

00:14:28.339 --> 00:14:30.100
<v Speaker 1>using Kubernetes because

00:14:30.500 --> 00:14:32.899
<v Speaker 1>it's used to create your software and service

00:14:32.899 --> 00:14:33.620
<v Speaker 1>solutions.

00:14:33.940 --> 00:14:37.060
<v Speaker 1>It's used by AI, machine learning, or analytics

00:14:37.060 --> 00:14:37.779
<v Speaker 1>applications.

00:14:38.295 --> 00:14:41.415
<v Speaker 1>And also on the edge, next to the

00:14:41.415 --> 00:14:42.775
<v Speaker 1>Internet of Things.

00:14:43.175 --> 00:14:45.415
<v Speaker 1>And as I said, I've been there.

00:14:45.895 --> 00:14:47.735
<v Speaker 1>I can say that's shameless.

00:14:48.935 --> 00:14:50.615
<v Speaker 1>Sometimes we feel

00:14:50.774 --> 00:14:54.120
<v Speaker 1>the burden of the complexity of Kubernetes. So

00:14:54.120 --> 00:14:56.040
<v Speaker 1>we would like to offload everything

00:14:56.519 --> 00:14:58.360
<v Speaker 1>to managed providers,

00:14:58.600 --> 00:15:01.160
<v Speaker 1>or if we can, also to the infrastructure

00:15:01.160 --> 00:15:04.600
<v Speaker 1>team if we if we have an organization

00:15:04.600 --> 00:15:05.079
<v Speaker 1>like that.

00:15:05.815 --> 00:15:08.135
<v Speaker 1>So why we need that? Because in the

00:15:08.135 --> 00:15:09.815
<v Speaker 1>end, we are developers. We would like to

00:15:09.815 --> 00:15:12.375
<v Speaker 1>focus on the applications, and we don't want

00:15:12.375 --> 00:15:14.775
<v Speaker 1>to manage a Kubernetes cluster. I don't know.

00:15:14.775 --> 00:15:15.815
<v Speaker 1>Maybe there is people

00:15:16.695 --> 00:15:19.095
<v Speaker 1>around the world that are excited to get

00:15:19.095 --> 00:15:22.250
<v Speaker 1>pages during the night. I wasn't, so I

00:15:22.250 --> 00:15:24.570
<v Speaker 1>would like to get something that is solving

00:15:24.570 --> 00:15:25.770
<v Speaker 1>all the problems.

00:15:26.330 --> 00:15:28.650
<v Speaker 1>So this is the reason why I started

00:15:28.730 --> 00:15:30.410
<v Speaker 1>developing Kamaji.

00:15:30.890 --> 00:15:34.010
<v Speaker 1>And what are the challenges? Because with Kamaji,

00:15:34.010 --> 00:15:36.285
<v Speaker 1>we are aiming to build a sort of

00:15:36.285 --> 00:15:38.525
<v Speaker 1>building block. It's not a product.

00:15:39.005 --> 00:15:40.125
<v Speaker 1>I'd say it's

00:15:40.685 --> 00:15:42.285
<v Speaker 1>just one of the tools

00:15:42.524 --> 00:15:45.085
<v Speaker 1>to create multiple Kubernetes clusters.

00:15:45.404 --> 00:15:47.725
<v Speaker 1>And there is a huge lack of tools,

00:15:47.725 --> 00:15:49.245
<v Speaker 1>especially in the open source.

00:15:50.880 --> 00:15:53.920
<v Speaker 1>We know that there are some players that

00:15:53.920 --> 00:15:56.320
<v Speaker 1>are already providing multicluster management.

00:15:56.480 --> 00:15:57.680
<v Speaker 1>For example, there is

00:15:58.080 --> 00:16:01.040
<v Speaker 1>OCP, OpenShift Container Platform, by Red Hat. There

00:16:01.040 --> 00:16:02.560
<v Speaker 1>is also SUSI that

00:16:03.040 --> 00:16:05.705
<v Speaker 1>acquired Ranger a few years ago. We got

00:16:05.705 --> 00:16:07.145
<v Speaker 1>also VMware Tanzu.

00:16:07.545 --> 00:16:11.145
<v Speaker 1>And they're absolutely great developer experience on top

00:16:11.145 --> 00:16:14.105
<v Speaker 1>of that. It's absolutely mesmerizing because I also

00:16:14.105 --> 00:16:16.505
<v Speaker 1>work with OpenShift Container Platform.

00:16:16.665 --> 00:16:18.265
<v Speaker 1>And for developers, it's great.

00:16:18.990 --> 00:16:21.150
<v Speaker 1>But there is a there are some downsides,

00:16:21.150 --> 00:16:23.630
<v Speaker 1>I'd say, because all these tools

00:16:23.950 --> 00:16:26.110
<v Speaker 1>are designed for enterprises.

00:16:26.270 --> 00:16:27.630
<v Speaker 1>So it means that

00:16:27.950 --> 00:16:30.830
<v Speaker 1>you have to stick to their way of

00:16:30.830 --> 00:16:31.390
<v Speaker 1>doing stuff.

00:16:32.045 --> 00:16:34.605
<v Speaker 1>And besides that, there is also a high

00:16:34.605 --> 00:16:37.485
<v Speaker 1>total cost of ownership. You got licenses. You

00:16:37.485 --> 00:16:39.325
<v Speaker 1>got operations. It's not straightforward.

00:16:39.565 --> 00:16:42.125
<v Speaker 1>I say it's not real Kubernetes because in

00:16:42.125 --> 00:16:45.005
<v Speaker 1>the end, are using Ranger. You're using Tanzu.

00:16:45.240 --> 00:16:48.840
<v Speaker 1>You're using OpenShift, and all these solutions

00:16:49.160 --> 00:16:51.160
<v Speaker 1>are built on top of Kubernetes.

00:16:51.160 --> 00:16:51.800
<v Speaker 1>Although,

00:16:52.920 --> 00:16:55.240
<v Speaker 1>pretty sure that the API server is the

00:16:55.240 --> 00:16:57.240
<v Speaker 1>same, but I hope that you're getting the

00:16:57.240 --> 00:16:59.080
<v Speaker 1>point. It's not clear Kubernetes.

00:16:59.080 --> 00:17:00.360
<v Speaker 1>It's a opinionated

00:17:00.504 --> 00:17:02.505
<v Speaker 1>way of managing Kubernetes.

00:17:02.584 --> 00:17:04.105
<v Speaker 1>And last but not least,

00:17:04.424 --> 00:17:05.624
<v Speaker 1>all these solutions

00:17:05.865 --> 00:17:07.384
<v Speaker 1>are pushing

00:17:07.625 --> 00:17:08.664
<v Speaker 1>on the

00:17:09.145 --> 00:17:10.825
<v Speaker 1>way to manage your clusters

00:17:10.905 --> 00:17:12.905
<v Speaker 1>by spinning up multiple clusters.

00:17:13.369 --> 00:17:15.930
<v Speaker 1>So you're ending up, or you could end

00:17:15.930 --> 00:17:17.770
<v Speaker 1>up, in the cluster sprawl.

00:17:17.930 --> 00:17:20.170
<v Speaker 1>And what's the cluster sprawl? It's a nice

00:17:20.170 --> 00:17:21.450
<v Speaker 1>term that has been

00:17:22.730 --> 00:17:24.410
<v Speaker 1>inherited by the

00:17:25.050 --> 00:17:27.210
<v Speaker 1>city sprawl, by

00:17:27.685 --> 00:17:29.845
<v Speaker 1>the sprawl of neighbors

00:17:30.245 --> 00:17:32.245
<v Speaker 1>when the city, when a city,

00:17:32.645 --> 00:17:34.485
<v Speaker 1>is growing a lot.

00:17:35.045 --> 00:17:37.765
<v Speaker 1>And this is the first reference to inception

00:17:37.765 --> 00:17:40.085
<v Speaker 1>because this is the cluster sprawl because we

00:17:40.085 --> 00:17:41.765
<v Speaker 1>are in the gap with a lot of

00:17:41.765 --> 00:17:42.245
<v Speaker 1>clusters,

00:17:43.710 --> 00:17:45.150
<v Speaker 1>a lot of skyscrapers,

00:17:45.150 --> 00:17:46.350
<v Speaker 1>a lot of houses, and so on and

00:17:46.350 --> 00:17:49.549
<v Speaker 1>so forth. So it's really hard to maintain.

00:17:50.270 --> 00:17:52.749
<v Speaker 1>I've been there, as I told you before,

00:17:53.230 --> 00:17:54.669
<v Speaker 1>just few clusters,

00:17:54.750 --> 00:17:56.990
<v Speaker 1>but it was really cumbersome. And you can

00:17:56.990 --> 00:17:58.750
<v Speaker 1>imagine what it could be

00:17:59.325 --> 00:18:01.325
<v Speaker 1>with huge organizations

00:18:01.325 --> 00:18:04.924
<v Speaker 1>where you have to manage and keep care

00:18:04.924 --> 00:18:06.524
<v Speaker 1>of multiple clusters.

00:18:07.245 --> 00:18:07.965
<v Speaker 1>Anyway,

00:18:08.125 --> 00:18:10.284
<v Speaker 1>there is another meme. And

00:18:10.605 --> 00:18:12.524
<v Speaker 1>why we started this project?

00:18:12.684 --> 00:18:13.085
<v Speaker 1>Because

00:18:14.429 --> 00:18:16.909
<v Speaker 1>I love complex stuff, to be honest, especially

00:18:16.909 --> 00:18:18.909
<v Speaker 1>when you have to write when you have

00:18:18.909 --> 00:18:20.669
<v Speaker 1>to write code for complex stuff.

00:18:21.149 --> 00:18:24.029
<v Speaker 1>And I remember the first time that I

00:18:24.029 --> 00:18:26.909
<v Speaker 1>saw Docker in Docker, user used by GitLab.

00:18:27.325 --> 00:18:29.725
<v Speaker 1>And it was really interesting because you're ending

00:18:29.725 --> 00:18:32.685
<v Speaker 1>up with Docker inside a Docker container, and

00:18:32.685 --> 00:18:34.045
<v Speaker 1>you can do a lot of stuff.

00:18:34.285 --> 00:18:36.765
<v Speaker 1>Essentially, GitLab pipelines

00:18:36.765 --> 00:18:38.205
<v Speaker 1>is built on top of that.

00:18:38.765 --> 00:18:41.965
<v Speaker 1>And then suddenly, I discovered the operators that

00:18:41.965 --> 00:18:43.165
<v Speaker 1>are really great because

00:18:43.620 --> 00:18:44.580
<v Speaker 1>in the end,

00:18:44.820 --> 00:18:46.980
<v Speaker 1>you are floating all the

00:18:47.540 --> 00:18:48.580
<v Speaker 1>SIL task

00:18:48.660 --> 00:18:51.140
<v Speaker 1>to a software, to a binary. This is

00:18:51.140 --> 00:18:52.419
<v Speaker 1>running inside the cluster.

00:18:52.740 --> 00:18:53.220
<v Speaker 1>And

00:18:53.700 --> 00:18:55.220
<v Speaker 1>it's a binary. It's a software.

00:18:55.715 --> 00:18:58.674
<v Speaker 1>It doesn't have bugs. Well, I'm just joking.

00:18:58.675 --> 00:19:00.915
<v Speaker 1>But, you know, you can do whatever you

00:19:00.915 --> 00:19:03.955
<v Speaker 1>want and focusing on your infrastructure or your

00:19:03.955 --> 00:19:05.715
<v Speaker 1>code and so on and so forth. And

00:19:05.715 --> 00:19:09.154
<v Speaker 1>then I saw also, I'd say together,

00:19:09.395 --> 00:19:10.755
<v Speaker 1>the database on Kubernetes,

00:19:11.309 --> 00:19:14.110
<v Speaker 1>the rise of databases on Kubernetes. And I

00:19:14.110 --> 00:19:16.109
<v Speaker 1>remember that a lot of people were saying,

00:19:16.269 --> 00:19:18.110
<v Speaker 1>no, no, no. We cannot use databases on

00:19:18.110 --> 00:19:20.110
<v Speaker 1>Kubernetes. It's too much complicated. We can not

00:19:20.269 --> 00:19:22.509
<v Speaker 1>we can we can't do that.

00:19:22.830 --> 00:19:24.750
<v Speaker 1>And in the end, we saw a lot

00:19:24.750 --> 00:19:27.554
<v Speaker 1>of vendors starting developing operators,

00:19:27.875 --> 00:19:29.394
<v Speaker 1>starting offering

00:19:29.635 --> 00:19:33.315
<v Speaker 1>database as a service backed by Kubernetes itself.

00:19:33.315 --> 00:19:36.034
<v Speaker 1>So it means that it could be done.

00:19:36.195 --> 00:19:37.235
<v Speaker 1>And lastly,

00:19:37.715 --> 00:19:39.740
<v Speaker 1>I ended up also with Kind that is

00:19:39.740 --> 00:19:43.260
<v Speaker 1>Kubernetes in Docker. So it's inception inside inception.

00:19:43.260 --> 00:19:45.020
<v Speaker 1>So we are ending up with a Docker

00:19:45.020 --> 00:19:47.580
<v Speaker 1>container that is a Kubernetes cluster that you

00:19:47.580 --> 00:19:48.140
<v Speaker 1>can use

00:19:48.540 --> 00:19:51.260
<v Speaker 1>for testing, for CI, for development. For example,

00:19:51.260 --> 00:19:53.100
<v Speaker 1>I'm using Kind a lot for the development.

00:19:53.644 --> 00:19:55.404
<v Speaker 1>So it's 2022,

00:19:55.404 --> 00:19:57.404
<v Speaker 1>and we can do that. But while I

00:19:57.404 --> 00:20:00.204
<v Speaker 1>was thinking about that, I started asking myself,

00:20:00.605 --> 00:20:03.245
<v Speaker 1>I cannot really do that because we know

00:20:03.245 --> 00:20:05.965
<v Speaker 1>that in the end, Kubernetes cluster is pretty

00:20:05.965 --> 00:20:08.300
<v Speaker 1>complex. I'd say we got a lot of

00:20:08.300 --> 00:20:09.020
<v Speaker 1>components,

00:20:09.260 --> 00:20:11.340
<v Speaker 1>a lot of business logic. I mean, it's

00:20:11.340 --> 00:20:14.060
<v Speaker 1>not like a classic web page where you

00:20:14.060 --> 00:20:15.100
<v Speaker 1>got the database,

00:20:15.100 --> 00:20:16.380
<v Speaker 1>you got the front end, you got the

00:20:16.380 --> 00:20:18.059
<v Speaker 1>back end, end of the story.

00:20:18.300 --> 00:20:20.700
<v Speaker 1>But with Kubernetes, obviously, we got a lot

00:20:20.700 --> 00:20:23.595
<v Speaker 1>of components involved. We got the certificate authority.

00:20:23.595 --> 00:20:25.275
<v Speaker 1>We got certificates

00:20:25.675 --> 00:20:26.475
<v Speaker 1>management.

00:20:26.715 --> 00:20:28.795
<v Speaker 1>We got the back end storage, and so

00:20:28.795 --> 00:20:30.235
<v Speaker 1>on and so forth. So

00:20:30.795 --> 00:20:32.875
<v Speaker 1>I started asking myself, how can I do

00:20:32.875 --> 00:20:33.355
<v Speaker 1>that?

00:20:33.995 --> 00:20:34.475
<v Speaker 1>And

00:20:34.810 --> 00:20:36.490
<v Speaker 1>I started trying

00:20:36.730 --> 00:20:39.290
<v Speaker 1>to define the pillars of Kamaji

00:20:39.290 --> 00:20:42.409
<v Speaker 1>because our idea is saying, okay, we got

00:20:42.570 --> 00:20:44.890
<v Speaker 1>applications that are running in Kubernetes

00:20:44.890 --> 00:20:46.490
<v Speaker 1>that got a back end storage.

00:20:46.730 --> 00:20:47.610
<v Speaker 1>In the end, Kubernetes

00:20:48.725 --> 00:20:50.804
<v Speaker 1>is made of several components.

00:20:50.805 --> 00:20:53.045
<v Speaker 1>I'd say the first one is the stateless

00:20:53.045 --> 00:20:55.125
<v Speaker 1>one, because we got the API server that

00:20:55.125 --> 00:20:56.005
<v Speaker 1>is connecting

00:20:56.485 --> 00:20:57.685
<v Speaker 1>to AdCity.

00:20:57.685 --> 00:20:59.925
<v Speaker 1>Then we got the controller manager and the

00:20:59.925 --> 00:21:02.965
<v Speaker 1>scheduler that are connecting using the kube config

00:21:02.965 --> 00:21:05.740
<v Speaker 1>for their own component using the API server.

00:21:05.740 --> 00:21:08.300
<v Speaker 1>So API server is absolutely stateless. All the

00:21:08.300 --> 00:21:10.700
<v Speaker 1>state is stored in ad cd.

00:21:10.860 --> 00:21:13.100
<v Speaker 1>So the idea was to say,

00:21:13.500 --> 00:21:16.380
<v Speaker 1>let's try to move the multitenancy

00:21:16.540 --> 00:21:18.940
<v Speaker 1>from the infrastructure level, so from the virtual

00:21:18.940 --> 00:21:19.420
<v Speaker 1>machines,

00:21:19.915 --> 00:21:21.914
<v Speaker 1>to the containers,

00:21:21.995 --> 00:21:23.835
<v Speaker 1>as we are doing with the applications.

00:21:24.315 --> 00:21:27.035
<v Speaker 1>But multi tenancy must be moved into the

00:21:27.035 --> 00:21:28.075
<v Speaker 1>data store.

00:21:28.715 --> 00:21:31.435
<v Speaker 1>So you know all that. Etcd is the

00:21:31.435 --> 00:21:32.955
<v Speaker 1>key value store that we are using for

00:21:32.955 --> 00:21:33.595
<v Speaker 1>Kubernetes.

00:21:34.180 --> 00:21:36.020
<v Speaker 1>And starting from version

00:21:36.020 --> 00:21:37.940
<v Speaker 1>3.5,

00:21:38.660 --> 00:21:40.900
<v Speaker 1>it has been introduced a new feature that

00:21:40.900 --> 00:21:42.980
<v Speaker 1>is named the add cd namespaces,

00:21:43.140 --> 00:21:45.060
<v Speaker 1>and too long didn't rent. It's a sort

00:21:45.060 --> 00:21:47.620
<v Speaker 1>of schema of the databases. So in MySQL

00:21:47.620 --> 00:21:48.580
<v Speaker 1>or PostgreSQL

00:21:48.580 --> 00:21:50.014
<v Speaker 1>or whatever

00:21:50.015 --> 00:21:52.095
<v Speaker 1>database you would like to use, you got

00:21:52.095 --> 00:21:52.974
<v Speaker 1>the schemes,

00:21:53.215 --> 00:21:56.015
<v Speaker 1>and essentially it's the same stuff. So in

00:21:56.015 --> 00:21:57.054
<v Speaker 1>the etcd,

00:21:57.054 --> 00:21:59.215
<v Speaker 1>you know, to be honest, you're ending up

00:21:59.215 --> 00:22:01.375
<v Speaker 1>just with a prefix of the keys, but

00:22:01.490 --> 00:22:02.930
<v Speaker 1>you can use certificates,

00:22:02.930 --> 00:22:05.810
<v Speaker 1>user roles, just to segregate this data, and

00:22:05.810 --> 00:22:08.130
<v Speaker 1>you're ending up with namespaces

00:22:08.130 --> 00:22:10.530
<v Speaker 1>like the ones of Kubernetes.

00:22:11.410 --> 00:22:12.929
<v Speaker 1>And after that,

00:22:13.970 --> 00:22:16.165
<v Speaker 1>as I told you all before, it's kube

00:22:16.165 --> 00:22:18.405
<v Speaker 1>inception kubeception because in the end, we are

00:22:18.405 --> 00:22:21.365
<v Speaker 1>using Kubernetes to manage Kubernetes itself.

00:22:21.925 --> 00:22:24.565
<v Speaker 1>So our Kamaji is orchestrating

00:22:24.565 --> 00:22:26.885
<v Speaker 1>the pods that will be the virtual control

00:22:26.885 --> 00:22:27.605
<v Speaker 1>plane

00:22:27.765 --> 00:22:31.080
<v Speaker 1>and it's going to manage also the shared

00:22:31.080 --> 00:22:32.199
<v Speaker 1>data store.

00:22:32.600 --> 00:22:35.080
<v Speaker 1>But I guess that also a picture is

00:22:35.080 --> 00:22:37.079
<v Speaker 1>more worth than a thousand of words.

00:22:37.320 --> 00:22:39.639
<v Speaker 1>So here it is, the architecture,

00:22:39.879 --> 00:22:41.960
<v Speaker 1>and I'll try to describe it

00:22:42.315 --> 00:22:44.074
<v Speaker 1>in the best way possible.

00:22:44.154 --> 00:22:45.914
<v Speaker 1>So Kamaji

00:22:46.154 --> 00:22:48.234
<v Speaker 1>needs a Kubernetes cluster,

00:22:48.554 --> 00:22:51.034
<v Speaker 1>because otherwise that will be a next chicken

00:22:51.034 --> 00:22:54.154
<v Speaker 1>problem. Because we have to manage multiple clusters,

00:22:54.154 --> 00:22:55.754
<v Speaker 1>but we need a cluster. So the cluster

00:22:55.754 --> 00:22:58.669
<v Speaker 1>must be created in advance. It means that

00:22:58.750 --> 00:23:01.390
<v Speaker 1>we need an admin cluster,

00:23:01.390 --> 00:23:04.350
<v Speaker 1>something that will be named a management cluster.

00:23:04.350 --> 00:23:07.310
<v Speaker 1>And this could be any Kubernetes compliant cluster.

00:23:07.310 --> 00:23:10.190
<v Speaker 1>It could be whatever version you will like.

00:23:10.190 --> 00:23:11.950
<v Speaker 1>For our demo, we are going to use

00:23:11.950 --> 00:23:12.350
<v Speaker 1>one

00:23:13.365 --> 00:23:15.605
<v Speaker 1>twenty one or one twenty two. I don't

00:23:15.605 --> 00:23:16.245
<v Speaker 1>remember.

00:23:16.485 --> 00:23:17.764
<v Speaker 1>We're in this cluster.

00:23:17.925 --> 00:23:20.005
<v Speaker 1>And inside this cluster, I we are going

00:23:20.005 --> 00:23:21.764
<v Speaker 1>to install also Kamaji

00:23:21.765 --> 00:23:23.764
<v Speaker 1>through an Elm chart,

00:23:24.085 --> 00:23:26.405
<v Speaker 1>and this Elm chart is installing the CRDs.

00:23:26.870 --> 00:23:30.950
<v Speaker 1>We got the Tenant Control Plane CRD

00:23:31.110 --> 00:23:35.030
<v Speaker 1>that will spawn these pods that are the

00:23:35.030 --> 00:23:35.990
<v Speaker 1>virtual

00:23:36.150 --> 00:23:37.510
<v Speaker 1>control planes.

00:23:38.230 --> 00:23:39.190
<v Speaker 1>But how

00:23:39.394 --> 00:23:42.034
<v Speaker 1>these pods are connecting to the AdCity?

00:23:42.034 --> 00:23:44.514
<v Speaker 1>Obviously, we got a multi tenant AdCity that,

00:23:44.835 --> 00:23:47.394
<v Speaker 1>for the sake of simplicity, has been deployed

00:23:47.394 --> 00:23:49.315
<v Speaker 1>inside the admin cluster,

00:23:49.475 --> 00:23:51.394
<v Speaker 1>but it could be also outside of your

00:23:51.394 --> 00:23:54.034
<v Speaker 1>cluster. It's not a prerequisite. It's up to

00:23:54.034 --> 00:23:56.029
<v Speaker 1>you to manage etcd.

00:23:57.309 --> 00:23:59.470
<v Speaker 1>We developed the ham chart, and the ham

00:23:59.470 --> 00:24:01.630
<v Speaker 1>chart is taking care of setting up the

00:24:01.630 --> 00:24:04.830
<v Speaker 1>etcd, enabling the feature for the multi tenancy,

00:24:04.830 --> 00:24:07.230
<v Speaker 1>generating the certificates, and so on and so

00:24:07.230 --> 00:24:07.789
<v Speaker 1>forth.

00:24:08.110 --> 00:24:08.670
<v Speaker 1>So

00:24:09.274 --> 00:24:11.115
<v Speaker 1>with that said, when we are creating a

00:24:11.115 --> 00:24:13.995
<v Speaker 1>tenant control plane using Kamaji, we are ending

00:24:13.995 --> 00:24:16.554
<v Speaker 1>up with a pod. And this pod is

00:24:16.554 --> 00:24:18.474
<v Speaker 1>exposed using a node port,

00:24:18.635 --> 00:24:21.994
<v Speaker 1>an ingress, exposed using a load balancer service.

00:24:22.315 --> 00:24:23.034
<v Speaker 1>And obviously,

00:24:23.590 --> 00:24:24.630
<v Speaker 1>those pods

00:24:24.870 --> 00:24:26.630
<v Speaker 1>are a cluster,

00:24:26.870 --> 00:24:29.430
<v Speaker 1>but they are missing the nodes. Because Kamaji

00:24:29.430 --> 00:24:30.710
<v Speaker 1>is not using

00:24:30.710 --> 00:24:33.190
<v Speaker 1>the nodes of the admin cluster,

00:24:33.510 --> 00:24:34.950
<v Speaker 1>but is exposing

00:24:35.030 --> 00:24:35.590
<v Speaker 1>all the,

00:24:36.485 --> 00:24:38.725
<v Speaker 1>I would say that, the endpoints, all the

00:24:38.725 --> 00:24:42.085
<v Speaker 1>information required to perform the bootstrap

00:24:42.085 --> 00:24:44.405
<v Speaker 1>of nodes to join that cluster.

00:24:44.645 --> 00:24:46.245
<v Speaker 1>So in the end, we are ending up

00:24:46.245 --> 00:24:48.325
<v Speaker 1>with the definition of the tenant node pools.

00:24:48.960 --> 00:24:50.720
<v Speaker 1>So it means that

00:24:50.960 --> 00:24:53.279
<v Speaker 1>these are worker nodes,

00:24:53.679 --> 00:24:56.159
<v Speaker 1>and they could be also containers. They could

00:24:56.159 --> 00:24:58.720
<v Speaker 1>be Firecracker virtual machines. They could be virtual

00:24:58.720 --> 00:25:01.039
<v Speaker 1>machines or bare metal instances.

00:25:01.120 --> 00:25:03.440
<v Speaker 1>They just need to join the cluster using

00:25:03.440 --> 00:25:04.320
<v Speaker 1>kubeadm.

00:25:05.435 --> 00:25:06.635
<v Speaker 1>And another

00:25:06.875 --> 00:25:09.835
<v Speaker 1>meme, because I'm really in love with meme,

00:25:10.235 --> 00:25:12.395
<v Speaker 1>because you can understand there are so many

00:25:12.395 --> 00:25:14.715
<v Speaker 1>components that are moving together. Because

00:25:15.195 --> 00:25:17.115
<v Speaker 1>when we are dealing with the API server,

00:25:17.115 --> 00:25:17.995
<v Speaker 1>we need certificates,

00:25:18.210 --> 00:25:20.450
<v Speaker 1>we need the kube config, we need the

00:25:20.450 --> 00:25:22.849
<v Speaker 1>config map with the kube adm configuration.

00:25:24.049 --> 00:25:26.210
<v Speaker 1>There is also a spoiler alert down there.

00:25:26.210 --> 00:25:27.809
<v Speaker 1>We got also connectivity.

00:25:28.130 --> 00:25:29.490
<v Speaker 1>So Kamaji

00:25:29.490 --> 00:25:30.769
<v Speaker 1>is trying to

00:25:31.250 --> 00:25:34.130
<v Speaker 1>simplify the management of all these

00:25:35.065 --> 00:25:36.425
<v Speaker 1>silly task

00:25:36.585 --> 00:25:38.105
<v Speaker 1>in an automated way.

00:25:38.825 --> 00:25:40.745
<v Speaker 1>So I'd say that

00:25:41.305 --> 00:25:43.865
<v Speaker 1>the next the next step is starting the

00:25:43.865 --> 00:25:46.985
<v Speaker 1>demo time. And, obviously, I have to summon

00:25:46.985 --> 00:25:49.820
<v Speaker 1>the demo god because I tried several times

00:25:49.820 --> 00:25:52.220
<v Speaker 1>the demo. It's working, but, you know, it's

00:25:52.220 --> 00:25:54.619
<v Speaker 1>also Murphy's Law, so fingers crossed.

00:25:54.700 --> 00:25:56.620
<v Speaker 0>Yeah. Now that we're all looking at a

00:25:56.620 --> 00:25:59.019
<v Speaker 0>whole different ballgame. But we do have a

00:25:59.019 --> 00:26:00.299
<v Speaker 0>question on the chat if you're happy to

00:26:00.299 --> 00:26:01.820
<v Speaker 0>answer that just before you jump into the

00:26:01.820 --> 00:26:04.855
<v Speaker 0>demo. Sure. Sure. So Russell says,

00:26:05.175 --> 00:26:08.535
<v Speaker 0>is the admin cluster etcd also the etcd

00:26:08.535 --> 00:26:11.175
<v Speaker 0>used by each tenant cluster, or do we

00:26:11.175 --> 00:26:12.294
<v Speaker 0>need separate ones?

00:26:13.575 --> 00:26:15.895
<v Speaker 1>Yeah. I'd say that, you know,

00:26:18.350 --> 00:26:19.630
<v Speaker 1>it really depends.

00:26:20.190 --> 00:26:23.710
<v Speaker 1>But, honestly, I would avoid the single point

00:26:23.710 --> 00:26:27.310
<v Speaker 1>of failure because in the end, what happens

00:26:27.310 --> 00:26:28.350
<v Speaker 1>if you

00:26:29.550 --> 00:26:32.794
<v Speaker 1>break the ad cd using Kamaji or something

00:26:32.794 --> 00:26:33.994
<v Speaker 1>like that. So

00:26:35.115 --> 00:26:36.794
<v Speaker 1>you can do that. You can use the

00:26:36.794 --> 00:26:37.434
<v Speaker 1>same

00:26:37.674 --> 00:26:40.554
<v Speaker 1>ad cd, but honestly, I will avoid that

00:26:40.635 --> 00:26:43.274
<v Speaker 1>just to be sure to decrease

00:26:43.995 --> 00:26:46.769
<v Speaker 1>the point of failures. So having add cd

00:26:46.769 --> 00:26:48.369
<v Speaker 1>for the tenant clusters

00:26:48.610 --> 00:26:51.970
<v Speaker 1>will be much better. So you're decoupling from

00:26:51.970 --> 00:26:54.529
<v Speaker 1>the admin cluster one. Okay. You know, you're

00:26:54.529 --> 00:26:56.130
<v Speaker 1>you're not putting all the eggs in the

00:26:56.130 --> 00:26:56.609
<v Speaker 1>same

00:26:57.330 --> 00:26:58.049
<v Speaker 1>how to say that?

00:26:58.735 --> 00:27:00.414
<v Speaker 0>Basket. Basket.

00:27:00.414 --> 00:27:02.735
<v Speaker 1>Yeah. Sorry. Yeah. I was speaking Italian. You

00:27:02.735 --> 00:27:04.094
<v Speaker 1>know? So

00:27:04.335 --> 00:27:06.014
<v Speaker 0>yeah. So I was just gonna

00:27:07.215 --> 00:27:09.054
<v Speaker 0>continue with that a little bit. So you

00:27:09.054 --> 00:27:10.495
<v Speaker 0>can have one entity cluster.

00:27:11.070 --> 00:27:13.309
<v Speaker 0>And using entity namespaces.

00:27:13.309 --> 00:27:15.390
<v Speaker 0>You can have the admin cluster, one namespace,

00:27:15.390 --> 00:27:17.549
<v Speaker 0>and all the tenants on another. But in

00:27:17.549 --> 00:27:18.349
<v Speaker 0>production,

00:27:18.590 --> 00:27:21.230
<v Speaker 0>you probably want one entity for

00:27:21.230 --> 00:27:24.269
<v Speaker 0>the admin cluster and then one entity shared

00:27:24.269 --> 00:27:26.235
<v Speaker 0>amongst your tenant. Is that what you would

00:27:26.235 --> 00:27:27.195
<v Speaker 0>kind of promote?

00:27:27.515 --> 00:27:29.435
<v Speaker 1>Yeah. Yeah. Absolutely. Also, keep in mind that

00:27:29.435 --> 00:27:30.875
<v Speaker 1>I don't want to spoil it, but I

00:27:30.875 --> 00:27:32.794
<v Speaker 1>will I haven't used

00:27:32.955 --> 00:27:35.275
<v Speaker 1>entity in production. But I don't want to

00:27:35.275 --> 00:27:37.835
<v Speaker 1>spoil that, like, because it's really interesting. I'll

00:27:37.835 --> 00:27:38.794
<v Speaker 1>show you later.

00:27:39.355 --> 00:27:39.675
<v Speaker 1>Okay.

00:27:40.170 --> 00:27:43.050
<v Speaker 1>Anyway Yeah. Carry on. Carry on. On. Carry

00:27:43.050 --> 00:27:43.450
<v Speaker 1>on.

00:27:43.850 --> 00:27:45.050
<v Speaker 1>Keep in mind that

00:27:45.290 --> 00:27:47.290
<v Speaker 1>we need Kubernetes cluster.

00:27:47.450 --> 00:27:50.250
<v Speaker 1>So what I did is to install

00:27:50.410 --> 00:27:53.770
<v Speaker 1>well, not install it, but creating Kubernetes cluster

00:27:53.850 --> 00:27:54.890
<v Speaker 1>on AKS.

00:27:55.695 --> 00:27:57.534
<v Speaker 1>So I'm on Azure

00:27:58.015 --> 00:27:59.374
<v Speaker 1>cluster info,

00:27:59.775 --> 00:28:02.575
<v Speaker 1>as you can see here. So we create

00:28:02.575 --> 00:28:03.934
<v Speaker 1>a Kamaji

00:28:04.255 --> 00:28:05.774
<v Speaker 1>in the zone

00:28:05.775 --> 00:28:08.734
<v Speaker 1>of AKS. It was West Europe.

00:28:09.215 --> 00:28:09.695
<v Speaker 1>And

00:28:10.030 --> 00:28:13.070
<v Speaker 1>this management cluster, this admin cluster, as you

00:28:13.070 --> 00:28:15.549
<v Speaker 1>can see, is 1221,

00:28:16.030 --> 00:28:16.909
<v Speaker 1>will,

00:28:17.230 --> 00:28:19.710
<v Speaker 1>get installed with Kamaji.

00:28:20.030 --> 00:28:22.030
<v Speaker 1>So how can I install Kamaji? It's pretty

00:28:22.030 --> 00:28:25.309
<v Speaker 1>straightforward because I have to use Helm upgrade

00:28:26.804 --> 00:28:27.764
<v Speaker 1>install.

00:28:27.765 --> 00:28:30.004
<v Speaker 1>I don't remember the order

00:28:30.405 --> 00:28:32.085
<v Speaker 1>of the arguments,

00:28:32.485 --> 00:28:34.885
<v Speaker 1>but I got my history with me. So

00:28:34.885 --> 00:28:36.644
<v Speaker 1>I'm installing Kamaji

00:28:36.645 --> 00:28:38.565
<v Speaker 1>from the chart that I got

00:28:38.850 --> 00:28:42.130
<v Speaker 1>in my local directory, so Ham Kamaji,

00:28:42.130 --> 00:28:45.170
<v Speaker 1>in the namespace Kamaji system, and creating the

00:28:45.170 --> 00:28:46.049
<v Speaker 1>namespace.

00:28:47.090 --> 00:28:48.049
<v Speaker 1>That's great.

00:28:48.530 --> 00:28:51.570
<v Speaker 1>And now in the other pane, I'm going

00:28:51.570 --> 00:28:52.289
<v Speaker 1>to watch

00:28:53.330 --> 00:28:55.225
<v Speaker 1>all the pods that are going to be

00:28:55.225 --> 00:28:57.865
<v Speaker 1>created. So using KubeNS, I am switching the

00:28:57.865 --> 00:28:59.864
<v Speaker 1>namespace in Kamaji system

00:29:00.424 --> 00:29:04.024
<v Speaker 1>and performing with my beloved aliases.

00:29:04.184 --> 00:29:06.904
<v Speaker 1>Kubectl get pods minus w.

00:29:07.145 --> 00:29:08.585
<v Speaker 1>So I am watching the pods.

00:29:09.520 --> 00:29:11.200
<v Speaker 1>When you're installing Kamaji,

00:29:11.200 --> 00:29:12.240
<v Speaker 1>by default,

00:29:12.400 --> 00:29:14.639
<v Speaker 1>you're getting up with a net CD

00:29:14.880 --> 00:29:16.639
<v Speaker 1>in and

00:29:17.120 --> 00:29:19.679
<v Speaker 1>we are taking care of generating certificates,

00:29:19.679 --> 00:29:21.360
<v Speaker 1>enabling all the features, and so on and

00:29:21.360 --> 00:29:23.934
<v Speaker 1>so forth. So right now we have to

00:29:23.934 --> 00:29:25.934
<v Speaker 1>wait a few minutes, I'd say,

00:29:28.174 --> 00:29:30.014
<v Speaker 1>for the free replicas,

00:29:30.415 --> 00:29:34.015
<v Speaker 1>and we should end up with everything installed.

00:29:34.015 --> 00:29:36.655
<v Speaker 1>Yeah. So in the end, as you can

00:29:36.655 --> 00:29:37.215
<v Speaker 1>see here,

00:29:38.780 --> 00:29:42.539
<v Speaker 1>we got etcd, free replicas, and Kamaji.

00:29:43.820 --> 00:29:46.460
<v Speaker 1>And we got also our CRD

00:29:46.460 --> 00:29:47.259
<v Speaker 1>deployed,

00:29:47.260 --> 00:29:49.820
<v Speaker 1>and it's the tenant control planes Kamaji

00:29:49.820 --> 00:29:51.179
<v Speaker 1>Classics IO.

00:29:51.580 --> 00:29:52.300
<v Speaker 1>And also,

00:29:53.005 --> 00:29:55.485
<v Speaker 1>our operator has been deployed, and I can

00:29:55.485 --> 00:29:58.524
<v Speaker 1>check the logs using kubectl logs minus n

00:29:59.164 --> 00:30:00.445
<v Speaker 1>Kamaji

00:30:01.005 --> 00:30:01.804
<v Speaker 1>system.

00:30:02.205 --> 00:30:04.284
<v Speaker 1>I don't remember. So, yeah, I go to

00:30:04.284 --> 00:30:06.690
<v Speaker 1>this three. I love this three. Minus l,

00:30:06.690 --> 00:30:10.130
<v Speaker 1>Kubernetes IO component controller manager, minus c manager

00:30:10.130 --> 00:30:10.850
<v Speaker 1>follow.

00:30:11.090 --> 00:30:13.809
<v Speaker 1>Just to be sure that the controller is

00:30:13.809 --> 00:30:16.929
<v Speaker 1>up and running, is watching all the events,

00:30:16.929 --> 00:30:17.970
<v Speaker 1>and is starting

00:30:18.130 --> 00:30:18.850
<v Speaker 1>the workers.

00:30:20.024 --> 00:30:22.664
<v Speaker 1>That's great. And now what we have is

00:30:22.664 --> 00:30:23.704
<v Speaker 1>to deploy

00:30:25.784 --> 00:30:28.424
<v Speaker 1>a manifest of the talent control plane.

00:30:28.664 --> 00:30:30.904
<v Speaker 1>So I am entering in classics,

00:30:30.904 --> 00:30:31.544
<v Speaker 1>Kamaji,

00:30:32.220 --> 00:30:33.820
<v Speaker 1>And for this demo,

00:30:34.220 --> 00:30:36.700
<v Speaker 1>I already have a sample

00:30:37.179 --> 00:30:39.820
<v Speaker 1>that I'm showing with you. So

00:30:40.059 --> 00:30:43.419
<v Speaker 1>this is the API definition of the CRD,

00:30:43.419 --> 00:30:47.100
<v Speaker 1>and the name is Rawkode.

00:30:47.515 --> 00:30:50.235
<v Speaker 1>Keep in mind that all these resources of

00:30:50.235 --> 00:30:52.715
<v Speaker 1>the tenant control plane, since our spawning

00:30:52.875 --> 00:30:53.434
<v Speaker 1>pod

00:30:53.835 --> 00:30:55.515
<v Speaker 1>secrets, config map,

00:30:55.755 --> 00:30:57.355
<v Speaker 1>services, and so on and so forth,

00:30:57.755 --> 00:31:00.794
<v Speaker 1>are names is is a namespace scope resource.

00:31:00.794 --> 00:31:03.035
<v Speaker 1>So we can specify the namespace to default.

00:31:04.150 --> 00:31:05.590
<v Speaker 1>And we can define

00:31:06.070 --> 00:31:06.870
<v Speaker 1>also

00:31:08.470 --> 00:31:11.270
<v Speaker 1>various options. So we can define the options

00:31:11.270 --> 00:31:14.230
<v Speaker 1>for the control plane and managing the deployment,

00:31:14.310 --> 00:31:16.790
<v Speaker 1>the service, and also the ingress.

00:31:18.005 --> 00:31:21.685
<v Speaker 1>Well, with the ingress, it's really hard because

00:31:21.685 --> 00:31:24.005
<v Speaker 1>Kubernetes has not been designed to use to

00:31:24.005 --> 00:31:25.925
<v Speaker 1>get exposed using an ingress.

00:31:26.325 --> 00:31:29.525
<v Speaker 1>So you are not barely using fully qualified

00:31:29.525 --> 00:31:32.029
<v Speaker 1>domain names. Just for the sake of simplicity,

00:31:32.030 --> 00:31:33.870
<v Speaker 1>I'm going to use a load balancer.

00:31:33.950 --> 00:31:35.070
<v Speaker 1>So AKS

00:31:35.310 --> 00:31:38.270
<v Speaker 1>well, Azure is going to deploy a service

00:31:38.270 --> 00:31:41.070
<v Speaker 1>of load balancer type and giving me an

00:31:41.070 --> 00:31:43.885
<v Speaker 1>API, a public and routable IP

00:31:44.685 --> 00:31:47.165
<v Speaker 1>address. Not API, IP address.

00:31:47.485 --> 00:31:49.885
<v Speaker 1>Then I'm defining also the deployments up to

00:31:49.885 --> 00:31:51.885
<v Speaker 1>two replicas. And why two replicas? Because in

00:31:51.885 --> 00:31:53.565
<v Speaker 1>the end, if you think about that, we

00:31:53.565 --> 00:31:55.885
<v Speaker 1>are just managing the API server, control manager,

00:31:55.885 --> 00:31:58.019
<v Speaker 1>and the scheduler because all the state would

00:31:58.019 --> 00:32:00.499
<v Speaker 1>be managed by etcd.

00:32:00.740 --> 00:32:03.140
<v Speaker 1>And now here comes the really important stuff

00:32:03.140 --> 00:32:06.100
<v Speaker 1>because we can define all the information regarding

00:32:06.100 --> 00:32:08.500
<v Speaker 1>all the information regarding Kubernetes. So I'm saying

00:32:08.500 --> 00:32:10.179
<v Speaker 1>I would like to deploy one, two, two,

00:32:10.179 --> 00:32:12.625
<v Speaker 1>three, And I can set also a configuration

00:32:12.625 --> 00:32:14.705
<v Speaker 1>for the cubelet, for the nodes that are

00:32:14.705 --> 00:32:16.545
<v Speaker 1>going to join my new cluster.

00:32:16.705 --> 00:32:18.225
<v Speaker 1>I'm going to say that I would like

00:32:18.225 --> 00:32:19.505
<v Speaker 1>to use the cgroupfs

00:32:19.505 --> 00:32:20.465
<v Speaker 1>systemd,

00:32:20.625 --> 00:32:22.465
<v Speaker 1>defining some admission controllers,

00:32:22.705 --> 00:32:24.065
<v Speaker 1>and I can say also

00:32:24.625 --> 00:32:25.825
<v Speaker 1>extra parameters,

00:32:26.130 --> 00:32:28.530
<v Speaker 1>extra arcs for all the components of the

00:32:28.530 --> 00:32:30.210
<v Speaker 1>control plane. So if you would like to

00:32:30.210 --> 00:32:31.010
<v Speaker 1>enable

00:32:31.010 --> 00:32:32.049
<v Speaker 1>some specific

00:32:32.690 --> 00:32:35.730
<v Speaker 1>cloud integrations or specific flags, you can do

00:32:35.730 --> 00:32:37.490
<v Speaker 1>that. So we don't have to create a

00:32:37.490 --> 00:32:38.290
<v Speaker 1>mapping

00:32:38.644 --> 00:32:40.804
<v Speaker 1>with all the possible informations,

00:32:41.205 --> 00:32:44.004
<v Speaker 1>all all possible settings of the API server,

00:32:44.004 --> 00:32:45.445
<v Speaker 1>the scheduler, and so on and so forth.

00:32:45.684 --> 00:32:48.085
<v Speaker 1>Just the most important ones. Okay. I'm just

00:32:48.085 --> 00:32:50.164
<v Speaker 0>gonna interject very quickly, just because you answered

00:32:50.164 --> 00:32:52.004
<v Speaker 0>a question there. So engine did ask in

00:32:52.004 --> 00:32:54.320
<v Speaker 0>the comment. Can we set feature flags? So

00:32:54.320 --> 00:32:55.680
<v Speaker 0>the answer is, as you asked, using the

00:32:55.680 --> 00:32:58.560
<v Speaker 0>extra Yeah. Yeah. The extra. Yeah. Absolutely. Absolutely.

00:32:58.560 --> 00:32:59.360
<v Speaker 1>Because otherwise,

00:32:59.600 --> 00:33:02.400
<v Speaker 1>it will be really hard to follow everything.

00:33:02.720 --> 00:33:03.120
<v Speaker 1>And

00:33:04.080 --> 00:33:06.565
<v Speaker 1>then we got also network profile, And network

00:33:06.565 --> 00:33:09.525
<v Speaker 1>profile is really interesting because we can set

00:33:09.685 --> 00:33:12.645
<v Speaker 1>the address if we already know the address,

00:33:12.645 --> 00:33:14.725
<v Speaker 1>or otherwise, we can set the port that

00:33:14.725 --> 00:33:15.845
<v Speaker 1>we are expecting

00:33:15.925 --> 00:33:17.045
<v Speaker 1>to get connections.

00:33:18.100 --> 00:33:19.700
<v Speaker 1>This example, we are going to use the

00:33:19.700 --> 00:33:20.979
<v Speaker 1>sixty four forty

00:33:21.299 --> 00:33:23.940
<v Speaker 1>three, the default one. So I am going

00:33:23.940 --> 00:33:27.059
<v Speaker 1>to get my load balancer with my public

00:33:27.059 --> 00:33:29.379
<v Speaker 1>IP, and it will be the internal control

00:33:29.379 --> 00:33:30.179
<v Speaker 1>plane will be

00:33:30.945 --> 00:33:33.984
<v Speaker 1>reachable using that IP on this port.

00:33:34.225 --> 00:33:36.465
<v Speaker 1>And then I got also the add ons.

00:33:36.465 --> 00:33:39.504
<v Speaker 1>So if you are familiar with kubeadm, obviously,

00:33:39.505 --> 00:33:40.784
<v Speaker 1>we are following

00:33:41.184 --> 00:33:44.225
<v Speaker 1>the same structure. So with kubeadm

00:33:44.225 --> 00:33:44.705
<v Speaker 1>in it,

00:33:45.630 --> 00:33:48.350
<v Speaker 1>I don't remember, but pretty sure just need

00:33:48.350 --> 00:33:49.470
<v Speaker 1>to read the docs.

00:33:49.870 --> 00:33:51.310
<v Speaker 1>There is the add ons, so you can

00:33:51.310 --> 00:33:53.710
<v Speaker 1>configure the core DNS and kubeproxy.

00:33:54.430 --> 00:33:56.590
<v Speaker 1>It's optional, kubeproxy, because if you would like

00:33:56.590 --> 00:33:58.350
<v Speaker 1>to use, I don't know, maybe Cilium,

00:33:58.670 --> 00:34:00.670
<v Speaker 1>I don't want to use kubeproxy, you can

00:34:00.670 --> 00:34:00.910
<v Speaker 1>do that.

00:34:02.585 --> 00:34:03.545
<v Speaker 1>For information.

00:34:04.025 --> 00:34:06.025
<v Speaker 1>Sure. Sure. So can you

00:34:06.665 --> 00:34:08.985
<v Speaker 0>can we specify our own CNI here, or

00:34:08.985 --> 00:34:11.145
<v Speaker 0>are we bound by by admin cluster?

00:34:11.385 --> 00:34:13.705
<v Speaker 1>No. No. It's up to the admin cluster.

00:34:13.705 --> 00:34:15.225
<v Speaker 0>Oh, yeah. Okay. Cool. That's what I Not

00:34:15.225 --> 00:34:17.305
<v Speaker 1>the admin cluster, but I'd say the

00:34:18.080 --> 00:34:19.840
<v Speaker 1>10 the cluster owner,

00:34:20.080 --> 00:34:22.480
<v Speaker 1>so who's going to use Rawkode.

00:34:22.640 --> 00:34:24.080
<v Speaker 1>In this case, I can show also the

00:34:24.080 --> 00:34:26.239
<v Speaker 1>cube copy to you so you can type

00:34:26.239 --> 00:34:28.719
<v Speaker 1>from your local machine interacting with the cluster

00:34:28.719 --> 00:34:30.955
<v Speaker 1>if you want. Will be great. Yeah. I

00:34:30.955 --> 00:34:32.474
<v Speaker 1>wasn't I wasn't thinking about that. I'm going

00:34:32.474 --> 00:34:34.795
<v Speaker 1>to share with you also configs,

00:34:34.795 --> 00:34:36.554
<v Speaker 1>you're interacting with the cluster.

00:34:36.795 --> 00:34:37.755
<v Speaker 1>Anyway, yeah,

00:34:38.875 --> 00:34:41.594
<v Speaker 1>we had a discussion internal and classics if

00:34:41.594 --> 00:34:43.994
<v Speaker 1>we will like to provide also installation of

00:34:43.994 --> 00:34:44.474
<v Speaker 1>the CNI,

00:34:44.889 --> 00:34:46.969
<v Speaker 1>but we try to stick to the

00:34:49.449 --> 00:34:50.489
<v Speaker 1>to the

00:34:52.330 --> 00:34:55.449
<v Speaker 1>convention of kubeadm and cluster API. So when

00:34:55.449 --> 00:34:57.050
<v Speaker 1>you're spinning up a cluster using q

00:34:57.609 --> 00:34:59.130
<v Speaker 1>a cluster using cluster API,

00:34:59.615 --> 00:35:01.695
<v Speaker 1>the CNI must be installed

00:35:01.855 --> 00:35:02.575
<v Speaker 1>after

00:35:02.734 --> 00:35:05.775
<v Speaker 1>Yeah. The extra provision. Yeah. Because I could

00:35:05.775 --> 00:35:06.415
<v Speaker 1>use

00:35:06.734 --> 00:35:09.295
<v Speaker 1>different CNI for each cluster. So

00:35:09.694 --> 00:35:11.535
<v Speaker 1>we don't want to be opinionated,

00:35:11.775 --> 00:35:13.615
<v Speaker 1>but we can talk about that. Don't worry.

00:35:13.615 --> 00:35:14.734
<v Speaker 1>We are looking for feedback.

00:35:15.460 --> 00:35:18.340
<v Speaker 1>So this is our definition. That's great.

00:35:18.660 --> 00:35:20.820
<v Speaker 1>So what I would like to do now

00:35:20.820 --> 00:35:22.420
<v Speaker 1>is to apply that.

00:35:22.740 --> 00:35:24.420
<v Speaker 1>So just to be sure

00:35:25.620 --> 00:35:26.420
<v Speaker 1>oh,

00:35:26.580 --> 00:35:28.420
<v Speaker 1>it's Friday also for me.

00:35:29.220 --> 00:35:30.260
<v Speaker 1>When as default,

00:35:32.265 --> 00:35:35.065
<v Speaker 1>kubectl apply minus f config

00:35:35.065 --> 00:35:36.185
<v Speaker 1>samples,

00:35:36.984 --> 00:35:39.865
<v Speaker 1>Kamaji v one alpha one, then a control

00:35:39.865 --> 00:35:40.585
<v Speaker 1>plane.

00:35:40.905 --> 00:35:42.665
<v Speaker 1>And I'll open also

00:35:43.560 --> 00:35:44.840
<v Speaker 1>another tab

00:35:44.920 --> 00:35:47.560
<v Speaker 1>watching for kubectl

00:35:48.120 --> 00:35:51.080
<v Speaker 1>get tenant control plane. Yeah. The short name

00:35:51.080 --> 00:35:52.280
<v Speaker 1>is pretty

00:35:52.680 --> 00:35:53.560
<v Speaker 1>misleading,

00:35:53.560 --> 00:35:54.520
<v Speaker 1>TCP,

00:35:54.600 --> 00:35:56.120
<v Speaker 1>but, you know, we

00:35:56.355 --> 00:35:57.555
<v Speaker 1>we do love

00:35:58.035 --> 00:36:01.075
<v Speaker 1>doing jokes. So TCP is standalone control plane.

00:36:01.955 --> 00:36:05.155
<v Speaker 1>So now I can create create it. Fingers

00:36:05.155 --> 00:36:05.955
<v Speaker 1>crossed.

00:36:06.275 --> 00:36:08.355
<v Speaker 1>I'll watch again for the logs.

00:36:08.890 --> 00:36:10.570
<v Speaker 1>And as you can see here,

00:36:10.970 --> 00:36:13.530
<v Speaker 1>the logs are polluting us, saying, I I

00:36:13.530 --> 00:36:14.570
<v Speaker 1>don't have an address.

00:36:15.210 --> 00:36:17.050
<v Speaker 1>We have to wait for the address. In

00:36:17.050 --> 00:36:18.810
<v Speaker 1>fact, as you can see here now,

00:36:19.290 --> 00:36:21.905
<v Speaker 1>in the get TCP, in the watch, we

00:36:21.905 --> 00:36:24.145
<v Speaker 1>are ending up with a control plane endpoint.

00:36:24.145 --> 00:36:26.464
<v Speaker 1>So this is the routable IP that we

00:36:26.464 --> 00:36:27.425
<v Speaker 1>are going to use

00:36:27.744 --> 00:36:28.465
<v Speaker 1>for

00:36:29.025 --> 00:36:31.665
<v Speaker 1>connecting to the cluster using this port,

00:36:31.905 --> 00:36:33.345
<v Speaker 1>using this kube config,

00:36:33.910 --> 00:36:36.230
<v Speaker 1>and the status saying that it's in provisioning

00:36:36.230 --> 00:36:38.470
<v Speaker 1>state. And in a matter of seconds, I'd

00:36:38.470 --> 00:36:39.030
<v Speaker 1>say,

00:36:39.590 --> 00:36:43.270
<v Speaker 1>yeah, just now, after forty five seconds, we

00:36:43.270 --> 00:36:45.590
<v Speaker 1>got a cluster that is ready.

00:36:45.990 --> 00:36:48.695
<v Speaker 1>In fact, if I try to issue Carl

00:36:48.695 --> 00:36:49.975
<v Speaker 1>minus k,

00:36:51.735 --> 00:36:53.975
<v Speaker 1>this control plane endpoint,

00:36:54.775 --> 00:36:57.095
<v Speaker 1>we are getting our cluster. Right.

00:36:58.375 --> 00:37:00.535
<v Speaker 1>But, obviously, I cannot use Carl.

00:37:00.890 --> 00:37:02.410
<v Speaker 1>If I would like to interact with the

00:37:02.410 --> 00:37:03.930
<v Speaker 1>Kubernetes cluster, I would like to use a

00:37:03.930 --> 00:37:04.810
<v Speaker 1>kubeconfig.

00:37:04.970 --> 00:37:08.410
<v Speaker 1>That's fair. In fact, Kamaji is also generating

00:37:08.410 --> 00:37:08.890
<v Speaker 1>the

00:37:09.530 --> 00:37:10.650
<v Speaker 1>admin kubeconfig

00:37:10.650 --> 00:37:11.930
<v Speaker 1>that is stored

00:37:12.250 --> 00:37:14.775
<v Speaker 1>in a secret named Rawkode

00:37:14.775 --> 00:37:15.974
<v Speaker 1>admin kubeconfig.

00:37:15.974 --> 00:37:19.015
<v Speaker 1>Rawkode is the name of my tenant control

00:37:19.015 --> 00:37:19.735
<v Speaker 1>plane.

00:37:20.055 --> 00:37:21.494
<v Speaker 1>So what I have to do is to

00:37:21.494 --> 00:37:24.295
<v Speaker 1>search on my history,

00:37:25.255 --> 00:37:26.535
<v Speaker 1>and kubectl

00:37:26.535 --> 00:37:30.319
<v Speaker 1>gets secret Rawkode admin q config, output JSON,

00:37:30.319 --> 00:37:32.160
<v Speaker 1>j q minus r

00:37:32.319 --> 00:37:35.680
<v Speaker 1>data admin config, base 64 decoding,

00:37:35.920 --> 00:37:38.720
<v Speaker 1>and piping to TMP Rawkode,

00:37:38.960 --> 00:37:40.799
<v Speaker 1>which will write a bash code or a

00:37:40.799 --> 00:37:42.755
<v Speaker 1>plug in to do that because

00:37:43.395 --> 00:37:46.355
<v Speaker 1>it's pretty cumbersome. I always use the history.

00:37:46.995 --> 00:37:49.395
<v Speaker 1>Okay. We got our kube config.

00:37:49.715 --> 00:37:50.835
<v Speaker 1>I'll show you

00:37:52.115 --> 00:37:52.835
<v Speaker 1>just

00:37:53.635 --> 00:37:54.835
<v Speaker 1>for the sake

00:37:55.715 --> 00:37:56.435
<v Speaker 1>of sharing.

00:37:57.590 --> 00:37:59.110
<v Speaker 1>And as you can see here, we got

00:37:59.110 --> 00:38:02.070
<v Speaker 1>our certificate authority data. We got our server,

00:38:02.230 --> 00:38:03.430
<v Speaker 1>our context,

00:38:03.590 --> 00:38:06.710
<v Speaker 1>and, obviously, also the certificate to interact with

00:38:06.710 --> 00:38:07.510
<v Speaker 1>the class.

00:38:09.030 --> 00:38:10.150
<v Speaker 1>With that said,

00:38:11.085 --> 00:38:13.885
<v Speaker 1>I just need to override the kube config

00:38:13.965 --> 00:38:15.005
<v Speaker 1>config

00:38:15.325 --> 00:38:16.525
<v Speaker 1>to TMP

00:38:16.525 --> 00:38:17.725
<v Speaker 1>Rawkode

00:38:19.325 --> 00:38:20.205
<v Speaker 1>Rawkode,

00:38:20.285 --> 00:38:21.485
<v Speaker 1>kubectl

00:38:21.565 --> 00:38:22.205
<v Speaker 1>version.

00:38:22.610 --> 00:38:24.290
<v Speaker 1>And as you can see here, we got

00:38:24.290 --> 00:38:27.250
<v Speaker 1>our CLASA because it's 01/23,

00:38:27.250 --> 00:38:30.770
<v Speaker 1>and it's the same version that we saw

00:38:31.650 --> 00:38:33.970
<v Speaker 1>in the tenant control plane definition.

00:38:34.290 --> 00:38:36.850
<v Speaker 1>So '1 '20 '3 and '1 '20 '3.

00:38:37.515 --> 00:38:39.195
<v Speaker 1>If I try to issue again

00:38:39.355 --> 00:38:40.315
<v Speaker 1>kubectl

00:38:40.315 --> 00:38:41.515
<v Speaker 1>get nodes,

00:38:41.914 --> 00:38:42.714
<v Speaker 1>obviously,

00:38:42.714 --> 00:38:44.155
<v Speaker 1>we don't have any node.

00:38:44.555 --> 00:38:47.674
<v Speaker 1>Why this? Because we just provisioned the control

00:38:47.674 --> 00:38:48.315
<v Speaker 1>plane.

00:38:48.555 --> 00:38:51.194
<v Speaker 1>And we will like to use Kamaji

00:38:50.930 --> 00:38:53.650
<v Speaker 1>just for the control plane pods, the virtualized

00:38:53.650 --> 00:38:55.810
<v Speaker 1>control plane, because the nodes

00:38:56.050 --> 00:38:57.810
<v Speaker 1>will be in another region.

00:38:58.050 --> 00:39:00.850
<v Speaker 1>And for this demo, I'd

00:39:00.850 --> 00:39:03.810
<v Speaker 1>say that the nodes are not on AKS,

00:39:03.810 --> 00:39:06.945
<v Speaker 1>well, are not on Azure, but rather they

00:39:06.945 --> 00:39:07.745
<v Speaker 1>are on

00:39:07.985 --> 00:39:08.865
<v Speaker 1>AWS.

00:39:09.185 --> 00:39:10.705
<v Speaker 1>So with that said,

00:39:12.145 --> 00:39:14.785
<v Speaker 1>I already prepared also on AWS

00:39:14.945 --> 00:39:16.545
<v Speaker 1>a launch template.

00:39:17.105 --> 00:39:18.465
<v Speaker 1>This launch template

00:39:18.705 --> 00:39:20.620
<v Speaker 1>is using Cloud Init to

00:39:21.340 --> 00:39:23.660
<v Speaker 1>install all the root power components. Let me

00:39:23.660 --> 00:39:25.820
<v Speaker 1>check because I'm not so much familiar with

00:39:27.660 --> 00:39:28.540
<v Speaker 1>AWS,

00:39:28.540 --> 00:39:30.540
<v Speaker 1>especially using the UI. Yeah. As you can

00:39:30.540 --> 00:39:32.940
<v Speaker 1>see here, we got the cloud config, the

00:39:32.940 --> 00:39:36.385
<v Speaker 1>Cloud Init configuration. So we are installing containerd,

00:39:36.464 --> 00:39:37.185
<v Speaker 1>car,

00:39:38.065 --> 00:39:40.865
<v Speaker 1>performing all the well, all the

00:39:41.345 --> 00:39:43.905
<v Speaker 1>obvious task that we have to do to

00:39:43.905 --> 00:39:44.705
<v Speaker 1>set up

00:39:46.305 --> 00:39:50.260
<v Speaker 1>Kubernetes cluster. So installing the kubelet, kubeadm,

00:39:50.260 --> 00:39:52.339
<v Speaker 1>containerd, and so on and so forth.

00:39:52.579 --> 00:39:53.220
<v Speaker 1>Okay?

00:39:53.619 --> 00:39:55.779
<v Speaker 1>And we should have also the configuration for

00:39:55.779 --> 00:39:56.660
<v Speaker 1>containerd.

00:39:56.660 --> 00:39:58.579
<v Speaker 1>I'm a bit worried because I see that

00:39:58.579 --> 00:40:01.700
<v Speaker 1>it's missing a parameter, but ah, yeah. Because

00:40:01.700 --> 00:40:04.025
<v Speaker 1>I have to use the latest version.

00:40:04.345 --> 00:40:04.905
<v Speaker 1>Yeah.

00:40:05.224 --> 00:40:07.305
<v Speaker 1>We have to use the system DC group

00:40:07.384 --> 00:40:10.105
<v Speaker 1>driver because otherwise we will end up with

00:40:10.105 --> 00:40:10.905
<v Speaker 1>some issues.

00:40:11.625 --> 00:40:12.345
<v Speaker 1>Anyway,

00:40:12.825 --> 00:40:14.585
<v Speaker 1>from this launch template,

00:40:14.664 --> 00:40:16.744
<v Speaker 1>I would like to create some set of

00:40:16.744 --> 00:40:20.130
<v Speaker 1>nodes. And these nodes that are on AWS

00:40:20.130 --> 00:40:24.050
<v Speaker 1>will join the virtual control plane deployed by

00:40:24.050 --> 00:40:24.930
<v Speaker 1>Kamaji

00:40:25.089 --> 00:40:26.370
<v Speaker 1>that is deployed

00:40:26.530 --> 00:40:27.810
<v Speaker 1>on Azure.

00:40:28.130 --> 00:40:28.770
<v Speaker 1>So

00:40:29.650 --> 00:40:30.450
<v Speaker 1>Rawkode

00:40:31.375 --> 00:40:32.735
<v Speaker 1>worker nodes,

00:40:33.535 --> 00:40:34.815
<v Speaker 1>I'm going to use,

00:40:36.095 --> 00:40:38.335
<v Speaker 1>the template description. No. I don't want that.

00:40:38.655 --> 00:40:40.575
<v Speaker 1>Auto scaling guidance, no.

00:40:40.975 --> 00:40:42.815
<v Speaker 1>Template tags, source template.

00:40:43.820 --> 00:40:46.619
<v Speaker 1>I would like to use this one with

00:40:46.619 --> 00:40:48.380
<v Speaker 1>the latest version.

00:40:49.500 --> 00:40:51.180
<v Speaker 1>I don't I don't need to use the

00:40:51.420 --> 00:40:52.860
<v Speaker 1>oh, my bad. Sorry.

00:40:53.500 --> 00:40:55.500
<v Speaker 1>I don't have to create a launch template,

00:40:55.500 --> 00:40:57.340
<v Speaker 1>but I have to start

00:40:58.619 --> 00:41:01.155
<v Speaker 1>note screening group from this template.

00:41:01.315 --> 00:41:02.995
<v Speaker 1>My bad. So

00:41:03.875 --> 00:41:04.835
<v Speaker 1>Rawkode

00:41:05.955 --> 00:41:07.555
<v Speaker 1>oh, Kamaji

00:41:07.955 --> 00:41:09.155
<v Speaker 1>Rawkode

00:41:10.355 --> 00:41:11.795
<v Speaker 1>worker nodes

00:41:12.530 --> 00:41:14.450
<v Speaker 1>using my launch template,

00:41:14.530 --> 00:41:15.650
<v Speaker 1>the latest version.

00:41:15.810 --> 00:41:17.410
<v Speaker 1>That's great. We are going to spin up

00:41:17.410 --> 00:41:19.570
<v Speaker 1>t free medium machines.

00:41:20.609 --> 00:41:23.170
<v Speaker 1>I'm saying in my VPC,

00:41:23.970 --> 00:41:25.010
<v Speaker 1>all of these,

00:41:25.890 --> 00:41:28.745
<v Speaker 1>t free medium, it's okay. Let's go for

00:41:28.745 --> 00:41:31.625
<v Speaker 1>next. No load balancer. No monitoring. Not at

00:41:31.625 --> 00:41:33.305
<v Speaker 1>all. We just need some

00:41:34.265 --> 00:41:35.145
<v Speaker 1>machines.

00:41:35.145 --> 00:41:38.265
<v Speaker 1>So desired capacity, let's start with one. Maximum

00:41:38.265 --> 00:41:38.985
<v Speaker 1>capacity,

00:41:39.545 --> 00:41:40.185
<v Speaker 1>10.

00:41:41.225 --> 00:41:43.865
<v Speaker 1>And now

00:41:42.780 --> 00:41:44.380
<v Speaker 1>I'm going to

00:41:45.020 --> 00:41:45.740
<v Speaker 1>create

00:41:45.820 --> 00:41:46.620
<v Speaker 1>everything.

00:41:47.180 --> 00:41:47.820
<v Speaker 1>Okay.

00:41:48.380 --> 00:41:50.780
<v Speaker 1>VPC settings, create auto screening groups.

00:41:51.260 --> 00:41:52.700
<v Speaker 1>And in the meanwhile,

00:41:52.860 --> 00:41:55.260
<v Speaker 1>I'm going to share with you, David,

00:41:56.855 --> 00:41:57.815
<v Speaker 1>the file

00:41:57.974 --> 00:41:59.494
<v Speaker 1>of the kube config.

00:42:02.535 --> 00:42:05.095
<v Speaker 1>And I think that I can use the

00:42:06.454 --> 00:42:07.255
<v Speaker 1>commands.

00:42:07.255 --> 00:42:08.535
<v Speaker 1>I'll share with you

00:42:08.855 --> 00:42:11.174
<v Speaker 1>via email, if you don't mind. Okay? Yeah.

00:42:11.174 --> 00:42:12.055
<v Speaker 0>Yeah. Sure. Go for it.

00:42:12.700 --> 00:42:14.700
<v Speaker 1>In the meanwhile, we can wait for

00:42:15.260 --> 00:42:17.020
<v Speaker 1>the node to get provision.

00:42:18.220 --> 00:42:20.060
<v Speaker 0>Yep. Can I ask a couple of questions

00:42:20.060 --> 00:42:23.180
<v Speaker 0>as well? Absolutely. Absolutely. Yeah. So you haven't

00:42:23.180 --> 00:42:26.060
<v Speaker 0>specified the KubeConfig for the worker nodes. Are

00:42:26.060 --> 00:42:27.820
<v Speaker 0>we gonna be doing that interactively?

00:42:30.755 --> 00:42:32.115
<v Speaker 1>No.

00:42:32.115 --> 00:42:33.954
<v Speaker 1>No. No. There are some default values. We

00:42:33.954 --> 00:42:35.474
<v Speaker 1>are using just the default values for the

00:42:35.474 --> 00:42:37.155
<v Speaker 1>sake of simplicity. Okay.

00:42:37.555 --> 00:42:39.395
<v Speaker 0>And see if the control plane

00:42:39.395 --> 00:42:40.194
<v Speaker 0>containers,

00:42:40.599 --> 00:42:42.440
<v Speaker 0>like I mean, that was pretty fast. Like,

00:42:42.440 --> 00:42:44.280
<v Speaker 0>thirty seconds, and we had a control plane.

00:42:44.280 --> 00:42:47.240
<v Speaker 0>Are those images that you're building and publishing?

00:42:47.240 --> 00:42:48.520
<v Speaker 0>Are those being

00:42:49.160 --> 00:42:51.800
<v Speaker 0>like, how do you The images were already

00:42:51.800 --> 00:42:53.000
<v Speaker 1>cached, so

00:42:53.424 --> 00:42:56.385
<v Speaker 1>it really depends also because I already tested

00:42:56.385 --> 00:42:56.945
<v Speaker 1>that

00:42:57.664 --> 00:42:58.385
<v Speaker 1>before

00:42:58.545 --> 00:43:01.424
<v Speaker 1>the video stream. But, yeah, you have to

00:43:01.424 --> 00:43:03.984
<v Speaker 1>think also about the pooling

00:43:03.984 --> 00:43:06.690
<v Speaker 1>of the container images. But But what images

00:43:06.690 --> 00:43:08.690
<v Speaker 0>are told? What imagery are you using for

00:43:08.690 --> 00:43:10.930
<v Speaker 0>the Absolutely. I can show you that. So

00:43:11.170 --> 00:43:13.730
<v Speaker 1>let's edit the Rawkode deployment

00:43:14.369 --> 00:43:15.890
<v Speaker 1>so we can also take a look to

00:43:15.890 --> 00:43:17.330
<v Speaker 1>the internals of Kamaji.

00:43:17.410 --> 00:43:20.575
<v Speaker 1>So, obviously, we got the owner reference control

00:43:20.895 --> 00:43:22.655
<v Speaker 1>well, we got the owner reference to the

00:43:22.655 --> 00:43:24.975
<v Speaker 1>time control plane resource that is used for

00:43:24.975 --> 00:43:26.735
<v Speaker 1>the operator pattern,

00:43:27.295 --> 00:43:29.375
<v Speaker 1>and then we got our containers.

00:43:30.015 --> 00:43:31.535
<v Speaker 1>And in the containers,

00:43:31.775 --> 00:43:34.335
<v Speaker 1>we are defining all the arguments for the

00:43:34.335 --> 00:43:35.295
<v Speaker 1>API server.

00:43:35.640 --> 00:43:37.880
<v Speaker 1>So we are defining the etcd servers.

00:43:37.880 --> 00:43:39.240
<v Speaker 1>And as you can see here, we can

00:43:39.240 --> 00:43:41.320
<v Speaker 1>define also the etcd prefix.

00:43:41.480 --> 00:43:43.480
<v Speaker 1>So this is the namespace that we are

00:43:43.480 --> 00:43:46.119
<v Speaker 1>going to use in the multi term etcd.

00:43:46.440 --> 00:43:48.920
<v Speaker 1>And then we got the etcd key file

00:43:49.000 --> 00:43:51.079
<v Speaker 1>and blah blah blah, all the informations.

00:43:52.415 --> 00:43:54.735
<v Speaker 1>Then we got also

00:43:57.455 --> 00:43:58.735
<v Speaker 1>the following one

00:43:58.815 --> 00:44:00.335
<v Speaker 1>that is going to be

00:44:02.575 --> 00:44:03.615
<v Speaker 1>Schedula.

00:44:04.095 --> 00:44:05.455
<v Speaker 1>And as you can see here, we are

00:44:05.455 --> 00:44:08.990
<v Speaker 1>using the k eight s VCR IO images.

00:44:09.230 --> 00:44:11.390
<v Speaker 0>Yeah. These are just the standard upstream This

00:44:11.390 --> 00:44:13.710
<v Speaker 1>is one. Control plane images. Perfect. Alright. Cool.

00:44:13.710 --> 00:44:14.430
<v Speaker 1>Absolutely.

00:44:14.590 --> 00:44:17.070
<v Speaker 1>And also for for the controller manager.

00:44:19.525 --> 00:44:21.605
<v Speaker 1>Obviously, are wanting all the certificates,

00:44:21.605 --> 00:44:23.205
<v Speaker 1>the CA, and so on and so forth

00:44:23.205 --> 00:44:26.005
<v Speaker 1>because all the communication, although, is living inside

00:44:26.165 --> 00:44:28.405
<v Speaker 1>all the components are inside the same pod.

00:44:29.125 --> 00:44:30.165
<v Speaker 1>We were thinking about

00:44:31.290 --> 00:44:33.290
<v Speaker 1>ending up with multiple deployments.

00:44:33.530 --> 00:44:34.890
<v Speaker 1>So as you can see here, we got

00:44:34.890 --> 00:44:35.930
<v Speaker 1>a deployment,

00:44:36.170 --> 00:44:37.290
<v Speaker 1>two replicas,

00:44:38.010 --> 00:44:39.530
<v Speaker 1>and three containers.

00:44:39.850 --> 00:44:42.170
<v Speaker 1>And the reason for that is that

00:44:42.570 --> 00:44:43.450
<v Speaker 1>in the end,

00:44:44.225 --> 00:44:46.545
<v Speaker 1>we would like to use the loopback interface

00:44:46.865 --> 00:44:48.465
<v Speaker 1>for faster connection

00:44:48.545 --> 00:44:50.945
<v Speaker 1>between the controller manager and the scheduler.

00:44:51.425 --> 00:44:53.345
<v Speaker 1>So in the end, we don't need a

00:44:53.345 --> 00:44:54.465
<v Speaker 1>leader election.

00:44:54.625 --> 00:44:57.025
<v Speaker 1>We don't need to scale differently the controller

00:44:57.025 --> 00:44:58.305
<v Speaker 1>manager or the scheduler.

00:44:58.625 --> 00:45:00.770
<v Speaker 1>Or we could potentially

00:45:00.770 --> 00:45:01.970
<v Speaker 1>have that need,

00:45:02.370 --> 00:45:04.210
<v Speaker 1>but we are open for discussion for that.

00:45:04.210 --> 00:45:05.570
<v Speaker 1>Keep in mind that it's an open source

00:45:05.570 --> 00:45:07.490
<v Speaker 1>project, so the governance

00:45:07.650 --> 00:45:10.770
<v Speaker 1>must be managed by the community. So we

00:45:10.770 --> 00:45:13.090
<v Speaker 1>are really hoping to get your point, your

00:45:13.090 --> 00:45:14.130
<v Speaker 1>feedback about that.

00:45:14.815 --> 00:45:16.975
<v Speaker 1>From the beginning, it was much easier

00:45:17.135 --> 00:45:19.775
<v Speaker 1>using a single container well, a single pod

00:45:19.775 --> 00:45:21.135
<v Speaker 1>with multiple containers.

00:45:21.615 --> 00:45:24.335
<v Speaker 1>So let's see also what the community think

00:45:24.335 --> 00:45:25.055
<v Speaker 1>about that.

00:45:25.935 --> 00:45:26.735
<v Speaker 1>Anyway,

00:45:27.135 --> 00:45:29.055
<v Speaker 1>we should have now,

00:45:29.135 --> 00:45:29.935
<v Speaker 1>fingers crossed,

00:45:30.680 --> 00:45:31.800
<v Speaker 1>our instances.

00:45:32.040 --> 00:45:34.200
<v Speaker 1>Yeah. We got our instance.

00:45:35.160 --> 00:45:36.920
<v Speaker 1>Now I'm connecting to it

00:45:37.160 --> 00:45:38.840
<v Speaker 1>just to be sure that everything has been

00:45:38.840 --> 00:45:40.120
<v Speaker 1>configured properly.

00:45:41.720 --> 00:45:42.440
<v Speaker 1>So

00:45:44.484 --> 00:45:45.685
<v Speaker 1>Ubuntu,

00:45:45.925 --> 00:45:47.125
<v Speaker 1>that machine,

00:45:49.045 --> 00:45:50.565
<v Speaker 1>and let me check

00:45:54.805 --> 00:45:57.605
<v Speaker 1>if Cloud init has been completed or not.

00:45:58.520 --> 00:46:01.400
<v Speaker 1>I'd say so because we got kubelet, kubeadm,

00:46:01.400 --> 00:46:02.440
<v Speaker 1>kubectl,

00:46:02.760 --> 00:46:04.120
<v Speaker 1>and just to be sure,

00:46:04.440 --> 00:46:06.040
<v Speaker 1>I like to play safe

00:46:06.520 --> 00:46:09.000
<v Speaker 1>container d config tamag.

00:46:09.240 --> 00:46:09.800
<v Speaker 1>Oh,

00:46:10.200 --> 00:46:12.525
<v Speaker 1>it's not my laptop. Okay.

00:46:12.925 --> 00:46:15.325
<v Speaker 1>System d c group true.

00:46:15.325 --> 00:46:16.765
<v Speaker 1>That's perfect. Okay.

00:46:17.244 --> 00:46:19.725
<v Speaker 1>So now that we got our node,

00:46:20.125 --> 00:46:21.405
<v Speaker 1>what we have to do?

00:46:21.645 --> 00:46:22.925
<v Speaker 1>Well, obviously,

00:46:23.964 --> 00:46:26.685
<v Speaker 1>we have to extract the token for QADM

00:46:26.720 --> 00:46:27.599
<v Speaker 1>to let,

00:46:28.400 --> 00:46:29.920
<v Speaker 1>to let the node

00:46:30.240 --> 00:46:31.680
<v Speaker 1>join the cluster.

00:46:31.760 --> 00:46:34.720
<v Speaker 1>So with that said, I export the kube

00:46:34.720 --> 00:46:36.480
<v Speaker 1>config to Rawkode.

00:46:37.760 --> 00:46:39.440
<v Speaker 1>We don't have any node,

00:46:39.760 --> 00:46:41.519
<v Speaker 1>and what I have to issue is kube

00:46:41.519 --> 00:46:42.640
<v Speaker 1>ADM

00:46:43.425 --> 00:46:44.785
<v Speaker 1>token create

00:46:44.865 --> 00:46:46.305
<v Speaker 1>print join command.

00:46:46.945 --> 00:46:47.585
<v Speaker 1>So

00:46:47.985 --> 00:46:49.585
<v Speaker 1>in the end, it means that we are

00:46:49.585 --> 00:46:51.585
<v Speaker 1>going to use the exposed

00:46:51.825 --> 00:46:52.705
<v Speaker 1>IP

00:46:52.705 --> 00:46:55.745
<v Speaker 1>address on the port with this token, with

00:46:55.745 --> 00:46:57.745
<v Speaker 1>this discovery token CA cert

00:46:58.440 --> 00:47:01.800
<v Speaker 1>hash that is used for the CA.

00:47:02.200 --> 00:47:03.960
<v Speaker 1>So with that said,

00:47:05.320 --> 00:47:06.200
<v Speaker 1>in the

00:47:06.680 --> 00:47:09.400
<v Speaker 1>pane that is SSHed

00:47:09.400 --> 00:47:12.040
<v Speaker 1>to the node, I am passing the command

00:47:12.040 --> 00:47:13.960
<v Speaker 1>and adding b three

00:47:14.175 --> 00:47:15.215
<v Speaker 1>just because

00:47:15.855 --> 00:47:18.655
<v Speaker 1>the guard has been really good for to

00:47:18.655 --> 00:47:21.215
<v Speaker 1>me. Everything is working, but, you know, I

00:47:21.215 --> 00:47:22.495
<v Speaker 1>just want to be sure.

00:47:23.215 --> 00:47:24.575
<v Speaker 1>And in the meanwhile,

00:47:25.055 --> 00:47:27.455
<v Speaker 1>I'm going to look at

00:47:31.040 --> 00:47:32.320
<v Speaker 1>two nodes

00:47:32.960 --> 00:47:34.240
<v Speaker 1>and pods.

00:47:35.920 --> 00:47:38.080
<v Speaker 1>Obviously, keep in mind that we don't have

00:47:38.080 --> 00:47:39.040
<v Speaker 1>any node,

00:47:39.280 --> 00:47:41.120
<v Speaker 1>and obviously we've got Kubernetes,

00:47:41.120 --> 00:47:44.080
<v Speaker 1>Kube proxy that has not been deployed.

00:47:45.654 --> 00:47:48.135
<v Speaker 1>It's not a big problem. So now in

00:47:48.135 --> 00:47:50.215
<v Speaker 1>the node, in the AWS node,

00:47:50.535 --> 00:47:53.815
<v Speaker 1>I'll issue kubectm join, and the node will

00:47:53.815 --> 00:47:54.455
<v Speaker 1>join

00:47:54.694 --> 00:47:55.335
<v Speaker 1>the

00:47:55.575 --> 00:47:58.535
<v Speaker 1>virtual control plane that is deployed on AKS.

00:47:59.190 --> 00:48:01.190
<v Speaker 1>We just need to wait for the TLS

00:48:01.190 --> 00:48:02.310
<v Speaker 1>bootstrap,

00:48:02.310 --> 00:48:03.510
<v Speaker 1>but here it is.

00:48:04.390 --> 00:48:05.990
<v Speaker 1>As you can see here, we got our

00:48:05.990 --> 00:48:06.710
<v Speaker 1>node,

00:48:06.869 --> 00:48:08.950
<v Speaker 1>100.280.98,

00:48:09.430 --> 00:48:11.955
<v Speaker 1>1 0 0 2 8 9 8, and

00:48:11.955 --> 00:48:14.755
<v Speaker 1>we got our kube proxy, our cover DNS,

00:48:14.755 --> 00:48:16.995
<v Speaker 1>and so on and so forth. But, obviously,

00:48:17.235 --> 00:48:19.075
<v Speaker 1>there is something that is not working because

00:48:19.075 --> 00:48:21.315
<v Speaker 1>the node is not is

00:48:21.315 --> 00:48:22.995
<v Speaker 1>is not ready.

00:48:23.155 --> 00:48:25.380
<v Speaker 1>So what we have to do is to

00:48:25.380 --> 00:48:28.180
<v Speaker 1>export again our Rawkode

00:48:28.980 --> 00:48:30.740
<v Speaker 1>and apply the manifest

00:48:31.140 --> 00:48:32.420
<v Speaker 1>of Calico.

00:48:32.420 --> 00:48:34.500
<v Speaker 1>At CNI, you can solve whatever you want.

00:48:34.500 --> 00:48:37.220
<v Speaker 1>It was working for me with Calico, so

00:48:36.785 --> 00:48:38.545
<v Speaker 1>don't want to test with another one because

00:48:38.545 --> 00:48:41.345
<v Speaker 1>everything is so perfect right now, so I

00:48:41.345 --> 00:48:43.265
<v Speaker 1>don't want to waste everything.

00:48:43.505 --> 00:48:45.345
<v Speaker 1>So installing Calico,

00:48:46.465 --> 00:48:47.985
<v Speaker 1>it has been installed.

00:48:48.305 --> 00:48:49.825
<v Speaker 1>And as you can see here, we are

00:48:49.825 --> 00:48:51.105
<v Speaker 1>ending up with the

00:48:51.579 --> 00:48:53.819
<v Speaker 1>Calico node that will install all the CAE

00:48:53.819 --> 00:48:55.980
<v Speaker 1>and all the binaries and configurations.

00:48:56.300 --> 00:48:59.420
<v Speaker 1>And our node should be marked as ready

00:48:59.420 --> 00:49:01.100
<v Speaker 1>in a matter of seconds,

00:49:01.980 --> 00:49:03.740
<v Speaker 1>or at least I hope so.

00:49:04.375 --> 00:49:06.775
<v Speaker 1>Yeah, you know, that's been marketed as ready.

00:49:06.935 --> 00:49:09.255
<v Speaker 1>So we are ending up with CoreDNS.

00:49:09.415 --> 00:49:12.375
<v Speaker 1>We are ending up with Kalicoke, KubeControllers,

00:49:12.695 --> 00:49:14.455
<v Speaker 1>and all the containers that we are going

00:49:14.455 --> 00:49:17.575
<v Speaker 1>to deploy inside of our cluster.

00:49:17.815 --> 00:49:19.095
<v Speaker 1>So just to recap,

00:49:19.720 --> 00:49:21.240
<v Speaker 1>we got Kamaji

00:49:21.240 --> 00:49:22.200
<v Speaker 1>installed

00:49:22.760 --> 00:49:25.800
<v Speaker 1>in a Kubernetes cluster also on Azure.

00:49:26.200 --> 00:49:28.520
<v Speaker 1>This control plane is exposed using a load

00:49:28.520 --> 00:49:29.400
<v Speaker 1>balancer.

00:49:29.880 --> 00:49:32.280
<v Speaker 1>The pods are on Azure,

00:49:32.360 --> 00:49:33.400
<v Speaker 1>and the nodes

00:49:37.000 --> 00:49:37.240
<v Speaker 1>are

00:49:37.240 --> 00:49:38.755
<v Speaker 1>joining using the nodes are joining from AWS.

00:49:39.154 --> 00:49:39.714
<v Speaker 1>So

00:49:40.115 --> 00:49:41.075
<v Speaker 1>you can

00:49:41.714 --> 00:49:43.875
<v Speaker 1>use whatever you want. You can do that

00:49:43.875 --> 00:49:45.555
<v Speaker 1>on bare metal. You can do on your

00:49:45.714 --> 00:49:47.954
<v Speaker 1>even even on your virtual machines using KVM,

00:49:47.954 --> 00:49:51.369
<v Speaker 1>virtual machines, or Firecracker VMs, whatever you want.

00:49:51.369 --> 00:49:54.810
<v Speaker 1>And that's great because in the end, it's

00:49:55.290 --> 00:49:58.490
<v Speaker 1>I'd say obviously, I'm I'm saying that's shameless

00:49:58.490 --> 00:50:00.170
<v Speaker 1>because this is a project I work to

00:50:00.330 --> 00:50:03.050
<v Speaker 1>I work and contribute to. But getting point,

00:50:03.984 --> 00:50:05.585
<v Speaker 1>you can use Kamaji

00:50:05.585 --> 00:50:07.585
<v Speaker 1>to create as a building block

00:50:07.905 --> 00:50:08.705
<v Speaker 1>for

00:50:09.025 --> 00:50:12.865
<v Speaker 1>a truly managed Kubernetes service. You can imagine

00:50:12.865 --> 00:50:14.225
<v Speaker 1>maybe a portal,

00:50:14.785 --> 00:50:15.745
<v Speaker 1>an application,

00:50:15.984 --> 00:50:17.744
<v Speaker 1>where you're telling your developers,

00:50:18.330 --> 00:50:20.650
<v Speaker 1>click here to create your Kubernetes cluster.

00:50:20.970 --> 00:50:24.170
<v Speaker 1>Give me your credentials for the AWS

00:50:24.410 --> 00:50:25.130
<v Speaker 1>account

00:50:25.290 --> 00:50:27.770
<v Speaker 1>so you are accountable for the cost of

00:50:27.770 --> 00:50:29.770
<v Speaker 1>the control of the worker nodes.

00:50:30.405 --> 00:50:32.725
<v Speaker 1>I'll send you the kube config and so

00:50:32.725 --> 00:50:34.805
<v Speaker 1>on and so forth. I will install everything

00:50:34.805 --> 00:50:36.005
<v Speaker 1>on your behalf.

00:50:36.245 --> 00:50:38.005
<v Speaker 1>So in the end,

00:50:38.965 --> 00:50:40.405
<v Speaker 1>it's a sort of framework

00:50:40.485 --> 00:50:42.325
<v Speaker 1>to build whatever you want.

00:50:43.560 --> 00:50:44.440
<v Speaker 1>But now,

00:50:45.720 --> 00:50:47.640
<v Speaker 1>there is something that is not working,

00:50:48.920 --> 00:50:51.560
<v Speaker 1>and it's the following one. So everything is

00:50:51.560 --> 00:50:53.560
<v Speaker 1>working. So I'm really happy for that. We

00:50:53.560 --> 00:50:56.680
<v Speaker 1>don't have pods that are in restart mode.

00:50:57.000 --> 00:50:57.640
<v Speaker 1>But

00:50:59.005 --> 00:51:00.605
<v Speaker 1>let's imagine I would like to take a

00:51:00.605 --> 00:51:01.165
<v Speaker 1>look

00:51:01.485 --> 00:51:04.045
<v Speaker 1>to the kube proxy logs.

00:51:04.205 --> 00:51:06.685
<v Speaker 1>Obviously, I can do that from the machine.

00:51:07.405 --> 00:51:09.245
<v Speaker 1>Try CTL ps.

00:51:09.645 --> 00:51:12.285
<v Speaker 1>Try CTL where is? Kube proxy. It's the

00:51:12.285 --> 00:51:15.320
<v Speaker 1>latest it's the last one. Try CTL

00:51:16.040 --> 00:51:17.480
<v Speaker 1>logs minus f.

00:51:18.200 --> 00:51:19.560
<v Speaker 1>So everything is fine,

00:51:20.040 --> 00:51:20.680
<v Speaker 1>but

00:51:21.000 --> 00:51:23.240
<v Speaker 1>I don't have access to that machine because

00:51:23.240 --> 00:51:25.000
<v Speaker 1>that machine has been installed

00:51:25.080 --> 00:51:25.960
<v Speaker 1>by the developer.

00:51:26.395 --> 00:51:28.315
<v Speaker 1>I have the credentials, obviously, but

00:51:28.715 --> 00:51:30.715
<v Speaker 1>I will try to extract them,

00:51:31.195 --> 00:51:32.155
<v Speaker 1>connect

00:51:32.155 --> 00:51:34.075
<v Speaker 1>to the AWS, and blah blah blah. It's

00:51:34.075 --> 00:51:36.475
<v Speaker 1>a pain. Also, maybe I couldn't have also

00:51:36.475 --> 00:51:38.955
<v Speaker 1>the SSH key to connect to the node.

00:51:39.420 --> 00:51:42.540
<v Speaker 1>So as an administrator of the cluster,

00:51:42.619 --> 00:51:44.460
<v Speaker 1>I could say, kubectl

00:51:44.460 --> 00:51:46.220
<v Speaker 1>minus n, kubectl, log,

00:51:47.740 --> 00:51:49.260
<v Speaker 1>minus f,

00:51:49.500 --> 00:51:50.300
<v Speaker 1>kubectl,

00:51:52.300 --> 00:51:53.420
<v Speaker 1>it's not working.

00:51:54.645 --> 00:51:55.285
<v Speaker 1>Why?

00:51:56.885 --> 00:51:57.605
<v Speaker 1>Because

00:51:57.765 --> 00:52:02.245
<v Speaker 1>the node is IP 1002898,

00:52:02.485 --> 00:52:04.725
<v Speaker 1>and it's trying to connect to the cubelet

00:52:04.725 --> 00:52:05.365
<v Speaker 1>port.

00:52:06.405 --> 00:52:08.005
<v Speaker 1>And here comes the troubles,

00:52:08.799 --> 00:52:10.000
<v Speaker 1>because obviously,

00:52:10.000 --> 00:52:12.160
<v Speaker 1>if you think about that, Kamaji is on

00:52:12.160 --> 00:52:13.200
<v Speaker 1>AKS,

00:52:13.200 --> 00:52:15.119
<v Speaker 1>is on the Azure network,

00:52:15.520 --> 00:52:18.960
<v Speaker 1>and the worker nodes are on AWS.

00:52:20.079 --> 00:52:21.839
<v Speaker 1>Obviously, I can say

00:52:22.055 --> 00:52:24.855
<v Speaker 1>all the worker nodes must be must have

00:52:24.935 --> 00:52:28.535
<v Speaker 1>a routable public IP. I'm letting join the

00:52:28.535 --> 00:52:31.015
<v Speaker 1>nodes using their public IP,

00:52:31.255 --> 00:52:33.175
<v Speaker 1>but that will be recumbersome also because it

00:52:33.175 --> 00:52:35.415
<v Speaker 1>means that from the security perspective and also

00:52:35.415 --> 00:52:37.750
<v Speaker 1>from the security assessment, you can imagine, for

00:52:37.750 --> 00:52:40.390
<v Speaker 1>bigger organization, it will be terrible, I say.

00:52:40.390 --> 00:52:42.630
<v Speaker 1>You have to open the ports, all the

00:52:42.630 --> 00:52:43.590
<v Speaker 1>firewall,

00:52:44.070 --> 00:52:45.510
<v Speaker 1>the WAF, and so on and so forth.

00:52:45.510 --> 00:52:47.270
<v Speaker 1>So it's not manageable.

00:52:47.510 --> 00:52:48.070
<v Speaker 1>Okay?

00:52:48.710 --> 00:52:49.590
<v Speaker 1>We noticed that.

00:52:50.345 --> 00:52:52.744
<v Speaker 1>So there is a nice feature

00:52:52.744 --> 00:52:54.665
<v Speaker 1>that I would like to show you.

00:52:55.145 --> 00:52:55.785
<v Speaker 1>And

00:52:56.265 --> 00:52:58.425
<v Speaker 1>let me unset the kubeconfig,

00:52:59.464 --> 00:53:01.465
<v Speaker 1>and I'm going to change

00:53:01.545 --> 00:53:02.345
<v Speaker 1>the definition

00:53:02.880 --> 00:53:04.800
<v Speaker 1>of the tenant control plane.

00:53:07.119 --> 00:53:09.200
<v Speaker 1>As you remember, we got the add ons.

00:53:09.200 --> 00:53:11.359
<v Speaker 1>And with add ons, we can configure coordinates

00:53:11.359 --> 00:53:12.400
<v Speaker 1>and kube proxy.

00:53:12.720 --> 00:53:14.000
<v Speaker 1>But there is also

00:53:14.160 --> 00:53:15.359
<v Speaker 1>another component,

00:53:15.525 --> 00:53:17.924
<v Speaker 1>I'd say an add on that unfortunately is

00:53:17.924 --> 00:53:19.365
<v Speaker 1>not managed by kubeadm,

00:53:19.365 --> 00:53:21.525
<v Speaker 1>and I'm saying that because trying to wire

00:53:21.525 --> 00:53:24.325
<v Speaker 1>everything in Kamaji has been a pain due

00:53:24.325 --> 00:53:26.325
<v Speaker 1>to that, and it's connectivity.

00:53:28.180 --> 00:53:29.140
<v Speaker 1>Connectivity,

00:53:30.180 --> 00:53:33.220
<v Speaker 1>I'll try to say that using the terms

00:53:33.220 --> 00:53:34.500
<v Speaker 1>from the documentation.

00:53:34.900 --> 00:53:36.020
<v Speaker 1>It's a

00:53:36.340 --> 00:53:39.940
<v Speaker 1>reverse proxy for the control plane communications to

00:53:39.940 --> 00:53:42.420
<v Speaker 1>the worker nodes and vice versa, or vice

00:53:42.420 --> 00:53:42.740
<v Speaker 1>versa.

00:53:43.925 --> 00:53:46.165
<v Speaker 1>But I prefer to say that it's

00:53:47.685 --> 00:53:50.005
<v Speaker 1>a reverse exploit tunnel.

00:53:50.645 --> 00:53:51.925
<v Speaker 1>Because in the end,

00:53:52.325 --> 00:53:54.245
<v Speaker 1>what's going to happen is that we are

00:53:54.245 --> 00:53:55.845
<v Speaker 1>ending up with two components.

00:53:56.005 --> 00:53:57.605
<v Speaker 1>The connectivity server

00:53:57.770 --> 00:54:00.810
<v Speaker 1>that is on the control plane, so on

00:54:00.810 --> 00:54:01.690
<v Speaker 1>Kamaji,

00:54:01.849 --> 00:54:03.770
<v Speaker 1>and the connectivity agent.

00:54:03.770 --> 00:54:05.290
<v Speaker 1>So the connectivity agent

00:54:05.690 --> 00:54:06.890
<v Speaker 1>is launched

00:54:06.890 --> 00:54:10.010
<v Speaker 1>as a pod inside the worker nodes. The

00:54:10.010 --> 00:54:10.970
<v Speaker 1>worker nodes, obviously,

00:54:11.515 --> 00:54:14.555
<v Speaker 1>they can connect to the Kamaji

00:54:14.555 --> 00:54:15.995
<v Speaker 1>tenant control plane.

00:54:16.315 --> 00:54:19.275
<v Speaker 1>They establish a connection, and using this connection,

00:54:19.515 --> 00:54:20.795
<v Speaker 1>they are starting a

00:54:21.195 --> 00:54:24.315
<v Speaker 1>bidirectional communication from the cubelet to the API

00:54:24.315 --> 00:54:25.275
<v Speaker 1>server and

00:54:25.710 --> 00:54:27.230
<v Speaker 1>vice versa. So

00:54:28.349 --> 00:54:30.510
<v Speaker 1>with that said, I also just set the

00:54:30.510 --> 00:54:31.870
<v Speaker 1>connectivity port,

00:54:32.030 --> 00:54:34.430
<v Speaker 1>or rather the proxy port.

00:54:34.510 --> 00:54:36.030
<v Speaker 1>And I'm going to say eighty one forty

00:54:36.030 --> 00:54:36.270
<v Speaker 1>two.

00:54:38.135 --> 00:54:39.095
<v Speaker 1>That's great.

00:54:39.815 --> 00:54:41.974
<v Speaker 1>Now what I would like to do is

00:54:41.974 --> 00:54:43.735
<v Speaker 1>to create another tab,

00:54:43.974 --> 00:54:46.855
<v Speaker 1>and I will show you with watch

00:54:47.415 --> 00:54:49.575
<v Speaker 1>minus n heap CTL get

00:54:49.655 --> 00:54:50.535
<v Speaker 1>pods

00:54:52.295 --> 00:54:53.175
<v Speaker 1>secrets

00:54:55.580 --> 00:54:56.620
<v Speaker 1>service.

00:54:58.460 --> 00:54:59.820
<v Speaker 1>Maybe this one. Yeah.

00:55:00.220 --> 00:55:01.500
<v Speaker 1>What's going to happen?

00:55:03.340 --> 00:55:04.060
<v Speaker 1>So

00:55:05.020 --> 00:55:06.460
<v Speaker 1>I can enter

00:55:07.095 --> 00:55:09.095
<v Speaker 1>the path where I got my

00:55:09.494 --> 00:55:10.455
<v Speaker 1>manifest,

00:55:11.335 --> 00:55:12.455
<v Speaker 1>Kamaji,

00:55:12.775 --> 00:55:14.375
<v Speaker 1>apply my Nuxt config,

00:55:14.535 --> 00:55:15.575
<v Speaker 1>samples,

00:55:16.135 --> 00:55:17.495
<v Speaker 1>and a control plane.

00:55:17.734 --> 00:55:19.095
<v Speaker 1>And here comes the pane.

00:55:20.500 --> 00:55:22.340
<v Speaker 1>Because as you can see here now, we

00:55:22.340 --> 00:55:25.700
<v Speaker 1>got a new certificate. That's the connectivity certificate.

00:55:26.180 --> 00:55:29.300
<v Speaker 1>And we are spinning up a new deployment.

00:55:29.700 --> 00:55:31.380
<v Speaker 1>It means a new pod.

00:55:31.540 --> 00:55:33.300
<v Speaker 1>Why that? Because

00:55:33.380 --> 00:55:34.100
<v Speaker 1>we need

00:55:34.674 --> 00:55:36.994
<v Speaker 1>to get the proxy agent.

00:55:37.394 --> 00:55:38.835
<v Speaker 1>Well, the proxy server

00:55:39.075 --> 00:55:39.955
<v Speaker 1>sitting

00:55:40.755 --> 00:55:42.675
<v Speaker 1>beside the API server,

00:55:42.835 --> 00:55:44.355
<v Speaker 1>because the API server

00:55:44.674 --> 00:55:46.675
<v Speaker 1>is aware that there is the

00:55:47.315 --> 00:55:48.194
<v Speaker 1>connectivity

00:55:48.194 --> 00:55:49.075
<v Speaker 1>server

00:55:49.480 --> 00:55:50.760
<v Speaker 1>that will be

00:55:51.160 --> 00:55:52.280
<v Speaker 1>the tunnel

00:55:52.280 --> 00:55:54.840
<v Speaker 1>to communicate with the worker nodes.

00:55:55.400 --> 00:55:57.480
<v Speaker 1>So let's wait now

00:55:58.920 --> 00:56:00.120
<v Speaker 1>for the reconciliation.

00:56:02.455 --> 00:56:03.815
<v Speaker 1>But as you can see also from the

00:56:03.815 --> 00:56:06.775
<v Speaker 1>logs, we got Rawkode, so our instance of

00:56:06.775 --> 00:56:09.415
<v Speaker 1>the time control plane has been reconciled.

00:56:09.895 --> 00:56:10.535
<v Speaker 1>So

00:56:10.775 --> 00:56:12.695
<v Speaker 1>if we take a look here, we got

00:56:12.695 --> 00:56:13.974
<v Speaker 1>our service Rawkode,

00:56:14.270 --> 00:56:16.590
<v Speaker 1>our load balancer on Azure

00:56:16.750 --> 00:56:18.110
<v Speaker 1>with this IP,

00:56:18.349 --> 00:56:21.150
<v Speaker 1>and now we got also 8142.

00:56:21.150 --> 00:56:24.190
<v Speaker 1>So the connectivity port, so far so good.

00:56:24.750 --> 00:56:26.829
<v Speaker 1>So now we can switch again

00:56:27.255 --> 00:56:29.494
<v Speaker 1>on our tenant control plane.

00:56:29.734 --> 00:56:32.214
<v Speaker 1>Well, yeah, on our tenant cluster.

00:56:32.615 --> 00:56:34.454
<v Speaker 1>And as you can see here, now we

00:56:34.454 --> 00:56:35.734
<v Speaker 1>got a new port.

00:56:36.214 --> 00:56:37.894
<v Speaker 1>Well, it's not a port, it's a demo

00:56:37.894 --> 00:56:38.455
<v Speaker 1>set.

00:56:38.775 --> 00:56:40.135
<v Speaker 1>And it's connectivity

00:56:40.135 --> 00:56:43.109
<v Speaker 1>agent that has been spin up eighty seconds

00:56:43.109 --> 00:56:43.750
<v Speaker 1>ago.

00:56:44.470 --> 00:56:45.030
<v Speaker 1>And

00:56:45.349 --> 00:56:46.470
<v Speaker 1>since I know

00:56:46.710 --> 00:56:49.270
<v Speaker 1>that things can go wrong, I just want

00:56:49.270 --> 00:56:51.350
<v Speaker 1>to be sure that the connectivity

00:56:52.309 --> 00:56:54.950
<v Speaker 1>the connectivity, yeah, of the load balancer is

00:56:54.950 --> 00:56:57.109
<v Speaker 1>good enough. So let me check from the

00:56:57.109 --> 00:56:57.510
<v Speaker 1>logs.

00:56:58.285 --> 00:56:59.805
<v Speaker 1>Price CTL

00:57:01.085 --> 00:57:03.165
<v Speaker 1>logs minus f is one.

00:57:03.485 --> 00:57:05.325
<v Speaker 1>Yeah. Start serving.

00:57:06.365 --> 00:57:08.605
<v Speaker 1>So with that said, remember

00:57:08.925 --> 00:57:12.770
<v Speaker 1>that the AWS node has been announced using

00:57:12.770 --> 00:57:14.450
<v Speaker 1>a non routable IP,

00:57:14.930 --> 00:57:17.970
<v Speaker 1>so the API server cannot connect

00:57:17.970 --> 00:57:20.290
<v Speaker 1>to the internal cluster network

00:57:20.530 --> 00:57:21.330
<v Speaker 1>because

00:57:21.410 --> 00:57:23.570
<v Speaker 1>they don't have the same CNI. So it

00:57:23.570 --> 00:57:26.575
<v Speaker 1>means that webhooks, validating webhooks, mutating webhooks, or

00:57:26.575 --> 00:57:29.055
<v Speaker 1>whatever it is, it shouldn't work.

00:57:29.695 --> 00:57:31.775
<v Speaker 1>Now what I have to do is to

00:57:31.775 --> 00:57:34.815
<v Speaker 1>export again the kube config for the parent

00:57:34.815 --> 00:57:35.615
<v Speaker 1>cluster,

00:57:35.855 --> 00:57:37.695
<v Speaker 1>and I can issue kubectl

00:57:37.695 --> 00:57:41.680
<v Speaker 1>minus n, kube system logs minus f, cube

00:57:41.680 --> 00:57:42.560
<v Speaker 1>proxy,

00:57:43.280 --> 00:57:44.720
<v Speaker 1>and here comes the magic.

00:57:46.080 --> 00:57:46.800
<v Speaker 0>Nice.

00:57:47.120 --> 00:57:49.120
<v Speaker 1>So it means that our connection

00:57:49.600 --> 00:57:51.520
<v Speaker 1>is getting processed by the

00:57:52.160 --> 00:57:53.840
<v Speaker 1>Tenon control plane API server,

00:57:54.845 --> 00:57:56.525
<v Speaker 1>is going to be forwarded

00:57:57.005 --> 00:58:00.045
<v Speaker 1>to the Unix domain socket of connectivity agent

00:58:00.684 --> 00:58:02.845
<v Speaker 1>that is connected to the node where the

00:58:02.845 --> 00:58:03.964
<v Speaker 1>pod is running

00:58:04.285 --> 00:58:07.165
<v Speaker 1>and can interact with the local cubelet.

00:58:07.565 --> 00:58:09.325
<v Speaker 1>And with that said, it means that

00:58:09.760 --> 00:58:11.280
<v Speaker 1>we can retrieve logs.

00:58:11.840 --> 00:58:14.400
<v Speaker 1>We can install, obviously, our CRDs because in

00:58:14.400 --> 00:58:16.320
<v Speaker 1>the end we got our a different schema.

00:58:16.400 --> 00:58:18.240
<v Speaker 1>For example, now what I can do is

00:58:18.240 --> 00:58:21.200
<v Speaker 1>to say, m upgrade install capsule.

00:58:21.615 --> 00:58:24.495
<v Speaker 1>It's our shameless self promotion. Sorry for that,

00:58:24.495 --> 00:58:28.095
<v Speaker 1>Daniel. But I can install custom CRDs.

00:58:28.735 --> 00:58:31.295
<v Speaker 1>And these CRDs are interacting with

00:58:32.175 --> 00:58:33.695
<v Speaker 1>validation webhooks,

00:58:34.735 --> 00:58:37.490
<v Speaker 1>conversion webhooks. So it means that we are

00:58:37.490 --> 00:58:38.610
<v Speaker 1>ending up with

00:58:38.770 --> 00:58:40.690
<v Speaker 1>a lot of stuff, a lot of moving

00:58:40.690 --> 00:58:41.250
<v Speaker 1>stuff.

00:58:41.490 --> 00:58:43.329
<v Speaker 1>And in a matter of seconds, are ending

00:58:43.329 --> 00:58:46.370
<v Speaker 1>up with capture that has been installed properly.

00:58:46.770 --> 00:58:49.970
<v Speaker 1>So you're ending up with multi cluster management

00:58:50.085 --> 00:58:52.885
<v Speaker 1>made possible by Kamaji with the multi tenancy

00:58:52.885 --> 00:58:54.325
<v Speaker 1>inside that cluster

00:58:54.325 --> 00:58:56.085
<v Speaker 1>made possible by Capture.

00:58:57.925 --> 00:58:59.285
<v Speaker 1>We just need to wait.

00:59:01.125 --> 00:59:02.885
<v Speaker 1>But it should be okay.

00:59:03.125 --> 00:59:03.925
<v Speaker 1>Fingers crossed.

00:59:06.400 --> 00:59:08.400
<v Speaker 0>It was working. I think I tried that.

00:59:08.800 --> 00:59:10.480
<v Speaker 0>Everything has worked so far. It's not gonna

00:59:10.480 --> 00:59:12.080
<v Speaker 0>stop now. I think you're good.

00:59:12.640 --> 00:59:14.720
<v Speaker 1>Yeah. Come on, Cap. It's a it's a

00:59:14.720 --> 00:59:17.280
<v Speaker 1>matter of resources. I remember that. It's a

00:59:17.280 --> 00:59:18.320
<v Speaker 1>matter of resource. So

00:59:20.025 --> 00:59:21.305
<v Speaker 1>just to be sure,

00:59:21.625 --> 00:59:23.225
<v Speaker 1>captured system,

00:59:24.025 --> 00:59:25.545
<v Speaker 1>capture control manager,

00:59:26.265 --> 00:59:29.385
<v Speaker 1>limits because I'm not using so powerful machines.

00:59:29.385 --> 00:59:30.025
<v Speaker 1>That's the reason.

00:59:34.270 --> 00:59:35.870
<v Speaker 1>Bug in in production.

00:59:39.390 --> 00:59:40.190
<v Speaker 1>Okay.

00:59:46.590 --> 00:59:49.115
<v Speaker 1>Yeah. It has been solved. So Captual has

00:59:49.115 --> 00:59:52.315
<v Speaker 1>been installed. So custom resource definitions inside the

00:59:52.315 --> 00:59:53.195
<v Speaker 1>ad c d,

00:59:53.595 --> 00:59:55.195
<v Speaker 1>and everything is working.

00:59:56.474 --> 00:59:57.355
<v Speaker 0>Very cool.

00:59:58.954 --> 01:00:01.435
<v Speaker 1>And with that said, I think that

01:00:01.730 --> 01:00:03.490
<v Speaker 1>we finished our demo.

01:00:03.650 --> 01:00:06.450
<v Speaker 0>Well, how brave are you feeling? Because Yeah.

01:00:06.529 --> 01:00:08.050
<v Speaker 0>Yeah. Got an idea.

01:00:09.970 --> 01:00:12.849
<v Speaker 1>And that's all. So Do you wanna jump

01:00:12.849 --> 01:00:13.730
<v Speaker 0>back to your terminal?

01:00:14.345 --> 01:00:15.705
<v Speaker 1>Yeah. Absolutely. Absolutely.

01:00:16.025 --> 01:00:16.744
<v Speaker 0>Well,

01:00:16.825 --> 01:00:19.785
<v Speaker 0>our control plane here, can you run kubectl

01:00:19.785 --> 01:00:21.065
<v Speaker 0>get TCP?

01:00:22.265 --> 01:00:23.865
<v Speaker 0>So the kubectl control

01:00:24.265 --> 01:00:24.825
<v Speaker 0>plane.

01:00:25.305 --> 01:00:26.025
<v Speaker 1>You

01:00:26.664 --> 01:00:27.945
<v Speaker 1>in this pane,

01:00:28.825 --> 01:00:29.704
<v Speaker 1>I can do that.

01:00:30.400 --> 01:00:31.520
<v Speaker 0>Yes. So

01:00:31.520 --> 01:00:33.200
<v Speaker 0>that is Kubernetes

01:00:33.200 --> 01:00:35.520
<v Speaker 0>version one twenty three dot zero. Can we

01:00:35.520 --> 01:00:38.480
<v Speaker 0>upgrade that to one twenty four? Absolutely. Sure.

01:00:38.480 --> 01:00:38.960
<v Speaker 1>Sure.

01:00:39.440 --> 01:00:42.000
<v Speaker 1>So let me disconnect from here,

01:00:42.240 --> 01:00:45.095
<v Speaker 1>and let's go for watch minus n. Kube

01:00:45.095 --> 01:00:47.095
<v Speaker 1>CTL get panel control plane.

01:00:47.655 --> 01:00:50.775
<v Speaker 1>I'm going to edit panel control plane, Rawkode,

01:00:51.494 --> 01:00:53.255
<v Speaker 1>and let's search for the version.

01:00:57.410 --> 01:00:58.690
<v Speaker 1>Like a free one.

01:01:01.650 --> 01:01:03.170
<v Speaker 1>And as you can see here, we are

01:01:03.170 --> 01:01:04.930
<v Speaker 1>entering the upgrading state.

01:01:06.450 --> 01:01:08.130
<v Speaker 1>And in a matter of

01:01:08.370 --> 01:01:09.570
<v Speaker 1>waiting for

01:01:09.730 --> 01:01:11.650
<v Speaker 1>the images getting downloaded

01:01:12.085 --> 01:01:12.885
<v Speaker 1>and

01:01:13.125 --> 01:01:15.365
<v Speaker 1>placed in the in the notes,

01:01:15.525 --> 01:01:18.245
<v Speaker 1>we should ending up with the status upgraded

01:01:18.245 --> 01:01:19.365
<v Speaker 1>and so ready.

01:01:19.605 --> 01:01:22.165
<v Speaker 1>So it's just a matter of twelve seconds.

01:01:22.565 --> 01:01:24.245
<v Speaker 1>But, obviously, keep in mind that we just

01:01:24.245 --> 01:01:25.125
<v Speaker 1>upgraded

01:01:25.125 --> 01:01:26.245
<v Speaker 1>the control plane.

01:01:27.030 --> 01:01:29.830
<v Speaker 1>So you have to manage everything

01:01:30.950 --> 01:01:32.710
<v Speaker 1>on your own, like

01:01:33.910 --> 01:01:35.030
<v Speaker 1>cluster API,

01:01:35.430 --> 01:01:36.310
<v Speaker 1>Terraform,

01:01:36.390 --> 01:01:38.870
<v Speaker 1>Ansible, or whatever it is because we just

01:01:38.870 --> 01:01:41.455
<v Speaker 1>upgraded the control plane. And it's okay. I

01:01:41.455 --> 01:01:43.535
<v Speaker 1>mean, you upgrade the control plane and then

01:01:43.535 --> 01:01:45.055
<v Speaker 1>you upgrade the nodes.

01:01:45.615 --> 01:01:47.775
<v Speaker 1>There is no problem with the version skew

01:01:47.775 --> 01:01:50.175
<v Speaker 1>between worker nodes and control plane nodes.

01:01:50.494 --> 01:01:51.935
<v Speaker 0>Nice. I like that a lot.

01:01:53.750 --> 01:01:56.150
<v Speaker 0>And engine says he had that question too.

01:01:56.150 --> 01:01:58.710
<v Speaker 0>But engine does have one more question. He

01:01:59.589 --> 01:02:01.349
<v Speaker 0>was asking if we would be able to

01:02:01.349 --> 01:02:04.230
<v Speaker 0>add kilo to the mix, which is a

01:02:04.790 --> 01:02:06.869
<v Speaker 0>WireGuard based cross

01:02:07.375 --> 01:02:08.495
<v Speaker 0>multi cloud

01:02:08.735 --> 01:02:09.375
<v Speaker 0>component.

01:02:10.095 --> 01:02:12.015
<v Speaker 1>Kilo. I I don't know what is kilo.

01:02:12.255 --> 01:02:13.695
<v Speaker 1>Never heard about that.

01:02:14.895 --> 01:02:16.735
<v Speaker 0>Yeah. I I think it would work. I

01:02:16.735 --> 01:02:17.935
<v Speaker 0>mean, we don't need to dive into that

01:02:17.935 --> 01:02:19.615
<v Speaker 0>right now, but there's something to experiment with

01:02:19.615 --> 01:02:22.840
<v Speaker 0>another day. So Yeah. Yeah. Absolutely. Alright. Well,

01:02:22.840 --> 01:02:24.680
<v Speaker 0>that sorry. On you go, if if you

01:02:24.680 --> 01:02:24.920
<v Speaker 0>wanna

01:02:25.560 --> 01:02:27.640
<v Speaker 1>Yeah. Yeah. I was missing this slide. My

01:02:27.640 --> 01:02:30.760
<v Speaker 1>bad. Because I fucked up the order. So

01:02:30.760 --> 01:02:33.080
<v Speaker 1>we got also a roadmap for that because

01:02:33.080 --> 01:02:35.800
<v Speaker 1>we know that this project is pretty young.

01:02:35.985 --> 01:02:37.105
<v Speaker 1>It has been

01:02:37.265 --> 01:02:38.545
<v Speaker 1>open sourced

01:02:39.265 --> 01:02:41.025
<v Speaker 1>during the KubeCon in Europe,

01:02:41.825 --> 01:02:43.745
<v Speaker 1>in Valencia in 2022.

01:02:43.745 --> 01:02:46.145
<v Speaker 1>So it's really, really, really young.

01:02:46.465 --> 01:02:48.865
<v Speaker 1>And we are looking to get some benchmarking

01:02:48.865 --> 01:02:51.025
<v Speaker 1>and stress tests. So please

01:02:51.309 --> 01:02:53.789
<v Speaker 1>try to destroy Kamaji. We are looking for

01:02:53.789 --> 01:02:55.869
<v Speaker 1>that, and we are really happy for that.

01:02:56.190 --> 01:02:58.350
<v Speaker 1>But obviously, we know that we

01:02:58.589 --> 01:03:02.030
<v Speaker 1>have still a lot to do, especially with

01:03:03.495 --> 01:03:05.815
<v Speaker 1>that kubeadm is the right tool to manage

01:03:05.815 --> 01:03:07.335
<v Speaker 1>Kubernetes cluster integrations,

01:03:08.375 --> 01:03:10.215
<v Speaker 1>we would like to go in that path.

01:03:10.215 --> 01:03:12.295
<v Speaker 1>And if you think that's the not correct

01:03:12.295 --> 01:03:15.095
<v Speaker 1>one, please share that. We got the discussion

01:03:15.095 --> 01:03:16.135
<v Speaker 1>on GitHub

01:03:16.280 --> 01:03:17.960
<v Speaker 1>in the Kamaji repository.

01:03:17.960 --> 01:03:20.040
<v Speaker 1>Start discussion. We got also,

01:03:20.280 --> 01:03:23.480
<v Speaker 1>I forgot to say that, the channel hashtag

01:03:23.480 --> 01:03:26.200
<v Speaker 1>Kamaji in the Kubernetes Slack channel. So join

01:03:26.200 --> 01:03:27.800
<v Speaker 1>there so we can talk about that.

01:03:29.055 --> 01:03:32.575
<v Speaker 1>We will be really happy for that. But,

01:03:33.454 --> 01:03:36.255
<v Speaker 1>obviously, my demo was totally focused on the

01:03:36.255 --> 01:03:38.974
<v Speaker 1>click ops. So I connected to AWS. I

01:03:38.974 --> 01:03:41.295
<v Speaker 1>clicked the ear down, blah blah blah blah.

01:03:41.454 --> 01:03:44.335
<v Speaker 1>And, obviously, it's just for the demo because

01:03:44.650 --> 01:03:45.690
<v Speaker 1>having

01:03:45.690 --> 01:03:48.250
<v Speaker 1>everything automated will be absolutely great,

01:03:48.490 --> 01:03:50.490
<v Speaker 1>but you will miss all the moving pieces

01:03:50.570 --> 01:03:53.450
<v Speaker 1>behind that. So we are working with the

01:03:53.450 --> 01:03:56.010
<v Speaker 1>cluster API integration. We are working also with

01:03:56.010 --> 01:03:56.730
<v Speaker 1>the Terraform

01:03:57.174 --> 01:03:59.494
<v Speaker 1>because a lot of people wouldn't they don't

01:03:59.494 --> 01:04:01.015
<v Speaker 1>want to use cluster API because they are

01:04:01.015 --> 01:04:03.494
<v Speaker 1>managing Terraform for the whole infrastructure. And in

01:04:03.494 --> 01:04:04.855
<v Speaker 1>the end, the TerraControl plane is going to

01:04:04.855 --> 01:04:05.815
<v Speaker 1>be considered

01:04:05.815 --> 01:04:07.974
<v Speaker 1>as a component of the infrastructure.

01:04:08.295 --> 01:04:10.615
<v Speaker 1>And, honestly, also with cross plane.

01:04:11.015 --> 01:04:11.575
<v Speaker 1>But

01:04:12.240 --> 01:04:14.880
<v Speaker 1>since I got this heritage from cyber mobility

01:04:14.880 --> 01:04:15.760
<v Speaker 1>engineering,

01:04:16.240 --> 01:04:19.200
<v Speaker 1>I'm working also and I'm really happy. I

01:04:19.200 --> 01:04:21.600
<v Speaker 1>will be really happy also having had to

01:04:21.600 --> 01:04:23.840
<v Speaker 1>achieve that. We are working with the Prometheus

01:04:24.875 --> 01:04:26.315
<v Speaker 1>metrics because

01:04:26.474 --> 01:04:30.155
<v Speaker 1>we need to get monitoring and alerting. Obviously,

01:04:31.195 --> 01:04:32.315
<v Speaker 1>you can install

01:04:32.635 --> 01:04:35.595
<v Speaker 1>the metrics server in the time control plane,

01:04:35.675 --> 01:04:38.635
<v Speaker 1>but we would like to get also

01:04:37.940 --> 01:04:38.820
<v Speaker 1>overview

01:04:38.820 --> 01:04:40.340
<v Speaker 1>of all the clusters.

01:04:40.500 --> 01:04:42.500
<v Speaker 1>So getting know

01:04:42.660 --> 01:04:45.380
<v Speaker 1>how many clusters are performing the upgrade,

01:04:45.460 --> 01:04:48.100
<v Speaker 1>how many clusters, for example, they got

01:04:49.140 --> 01:04:51.795
<v Speaker 1>CA that is near the end of the

01:04:51.795 --> 01:04:54.275
<v Speaker 1>validity and so on and so forth. Or

01:04:54.995 --> 01:04:58.115
<v Speaker 1>eventually, how many tenant control planes have been

01:04:58.115 --> 01:04:58.915
<v Speaker 1>restarted

01:04:58.915 --> 01:05:00.115
<v Speaker 1>for any reason?

01:05:00.355 --> 01:05:01.955
<v Speaker 1>And last but not least,

01:05:02.755 --> 01:05:03.235
<v Speaker 1>it's

01:05:05.555 --> 01:05:07.040
<v Speaker 1>my it's really interesting, this one, is the

01:05:07.040 --> 01:05:08.160
<v Speaker 1>Kine integration.

01:05:08.720 --> 01:05:11.120
<v Speaker 1>Kine is a nice project. And if you

01:05:11.120 --> 01:05:11.760
<v Speaker 1>recall,

01:05:12.000 --> 01:05:14.080
<v Speaker 1>I told you all, if I will use

01:05:14.080 --> 01:05:16.480
<v Speaker 1>Kamaji production, I will never use Acd.

01:05:17.055 --> 01:05:18.655
<v Speaker 1>And someone will say,

01:05:18.815 --> 01:05:21.214
<v Speaker 1>starting raising an eyebrow, how can I use

01:05:21.214 --> 01:05:22.495
<v Speaker 1>Kubernetes without

01:05:22.734 --> 01:05:23.535
<v Speaker 1>etcd?

01:05:23.694 --> 01:05:26.575
<v Speaker 1>I need that. And that's true. But this

01:05:26.575 --> 01:05:29.055
<v Speaker 1>project that has been formally

01:05:29.055 --> 01:05:30.895
<v Speaker 1>developed by Ranger people

01:05:31.270 --> 01:05:33.590
<v Speaker 1>and right now is in process of getting

01:05:33.590 --> 01:05:36.150
<v Speaker 1>donated to the CMCF. It's in the

01:05:36.550 --> 01:05:38.070
<v Speaker 1>incubating or staging

01:05:38.230 --> 01:05:41.590
<v Speaker 1>phase, I don't remember. Anyway, with KINE, you

01:05:41.590 --> 01:05:42.710
<v Speaker 1>are using

01:05:43.110 --> 01:05:44.230
<v Speaker 1>an adapter.

01:05:44.310 --> 01:05:46.230
<v Speaker 1>So it means that there is adapter

01:05:46.605 --> 01:05:47.565
<v Speaker 1>that is,

01:05:49.325 --> 01:05:51.885
<v Speaker 1>how to say that, is is conformed, is

01:05:51.885 --> 01:05:54.605
<v Speaker 1>using the same signatures of the HCD.

01:05:54.765 --> 01:05:56.445
<v Speaker 1>So you got this endpoint,

01:05:56.765 --> 01:05:58.685
<v Speaker 1>and these HCD endpoints

01:05:58.685 --> 01:06:01.165
<v Speaker 1>are the same signature of a real HCD.

01:06:01.720 --> 01:06:03.640
<v Speaker 1>And you can use a driver

01:06:04.200 --> 01:06:06.280
<v Speaker 1>to say all the rights

01:06:06.600 --> 01:06:08.280
<v Speaker 1>shouldn't be forwarded

01:06:08.680 --> 01:06:12.440
<v Speaker 1>towards an etcd, but rather against a MySQL,

01:06:13.080 --> 01:06:14.440
<v Speaker 1>a PostgreSQL,

01:06:15.245 --> 01:06:17.565
<v Speaker 1>or eventually also SQLite

01:06:17.565 --> 01:06:18.605
<v Speaker 1>database.

01:06:18.845 --> 01:06:19.565
<v Speaker 1>Obviously,

01:06:19.805 --> 01:06:20.365
<v Speaker 1>I

01:06:20.685 --> 01:06:21.725
<v Speaker 1>will use

01:06:22.125 --> 01:06:23.405
<v Speaker 1>a database

01:06:23.805 --> 01:06:25.965
<v Speaker 1>as SQLite for production.

01:06:26.525 --> 01:06:29.085
<v Speaker 1>It really depends on this. You know so

01:06:29.085 --> 01:06:29.965
<v Speaker 1>with that said,

01:06:30.900 --> 01:06:33.780
<v Speaker 1>I truly believe that Kubernetes is great,

01:06:33.940 --> 01:06:36.819
<v Speaker 1>although sometimes I feel the pressure of the

01:06:36.819 --> 01:06:38.260
<v Speaker 1>complexity behind that.

01:06:38.900 --> 01:06:39.460
<v Speaker 1>But

01:06:40.099 --> 01:06:41.059
<v Speaker 1>operators

01:06:41.059 --> 01:06:42.339
<v Speaker 1>are saving our lives.

01:06:42.965 --> 01:06:43.765
<v Speaker 1>I mean,

01:06:45.285 --> 01:06:46.405
<v Speaker 1>with the operators,

01:06:46.405 --> 01:06:49.045
<v Speaker 1>we are removing the toil of managing complex

01:06:49.045 --> 01:06:49.925
<v Speaker 1>infrastructure.

01:06:49.925 --> 01:06:52.805
<v Speaker 1>Kubernetes itself is solving a lot of problems.

01:06:53.045 --> 01:06:54.965
<v Speaker 1>So if we can use an operator to

01:06:54.965 --> 01:06:57.365
<v Speaker 1>spawn multiple Kubernetes control planes,

01:06:57.980 --> 01:06:58.940
<v Speaker 1>And then

01:06:59.339 --> 01:07:01.500
<v Speaker 1>these control planes, obviously,

01:07:01.740 --> 01:07:03.420
<v Speaker 1>they need to scale out

01:07:03.660 --> 01:07:06.380
<v Speaker 1>because SSD got too many limitations.

01:07:06.619 --> 01:07:08.380
<v Speaker 1>The first one is regarding

01:07:08.460 --> 01:07:09.580
<v Speaker 1>its size.

01:07:09.740 --> 01:07:13.845
<v Speaker 1>You cannot exceed the eight gigabyte of storage.

01:07:14.325 --> 01:07:14.885
<v Speaker 1>Otherwise,

01:07:15.685 --> 01:07:17.365
<v Speaker 1>You know, I'm Italian. I use a lot

01:07:17.365 --> 01:07:18.405
<v Speaker 1>of Latin words.

01:07:18.565 --> 01:07:18.965
<v Speaker 1>So

01:07:20.485 --> 01:07:22.565
<v Speaker 1>It means that here comes the dragons. So

01:07:22.565 --> 01:07:24.165
<v Speaker 1>you don't know what could happen.

01:07:24.565 --> 01:07:27.045
<v Speaker 1>And I don't want to deal again

01:07:27.320 --> 01:07:30.760
<v Speaker 1>with split brain of etcd or unrecoverable

01:07:30.760 --> 01:07:33.400
<v Speaker 1>data from etcd. And with that said,

01:07:34.360 --> 01:07:36.680
<v Speaker 1>we are also working with kind integration.

01:07:36.680 --> 01:07:39.800
<v Speaker 1>We already have MySQL one. We are working

01:07:39.800 --> 01:07:42.200
<v Speaker 1>with the Postgres SQL one. And that's great

01:07:42.200 --> 01:07:42.840
<v Speaker 1>because

01:07:43.085 --> 01:07:45.404
<v Speaker 1>with the operators, there is a nice project

01:07:45.404 --> 01:07:47.405
<v Speaker 1>by EDB, EnterpriseDB,

01:07:47.805 --> 01:07:50.444
<v Speaker 1>that developed the CloudNetIPG.

01:07:50.444 --> 01:07:53.085
<v Speaker 1>So it's an operator that we are defining

01:07:53.325 --> 01:07:54.684
<v Speaker 1>a custom resource.

01:07:55.110 --> 01:07:57.110
<v Speaker 1>And from that custom resource, you're ending up

01:07:57.110 --> 01:07:59.430
<v Speaker 1>with the CA, with the certificates.

01:07:59.910 --> 01:08:02.710
<v Speaker 1>So it's just a matter of connecting all

01:08:02.710 --> 01:08:03.990
<v Speaker 1>the things together.

01:08:04.470 --> 01:08:06.550
<v Speaker 1>And with PostgreSQL

01:08:06.550 --> 01:08:09.270
<v Speaker 1>managed by Kubernetes itself that can auto scale,

01:08:09.845 --> 01:08:13.125
<v Speaker 1>your ending up of managing a Kubernetes cluster

01:08:13.125 --> 01:08:13.925
<v Speaker 1>at scale

01:08:14.644 --> 01:08:16.965
<v Speaker 1>like an hyperscaler, I'd say. I'm not saying

01:08:16.965 --> 01:08:20.165
<v Speaker 1>that Kamaji could replace AKS. Obviously, no. Neither

01:08:20.165 --> 01:08:21.124
<v Speaker 1>EKS.

01:08:21.444 --> 01:08:23.925
<v Speaker 1>But it could be used by your organizations,

01:08:24.370 --> 01:08:26.930
<v Speaker 1>also by your company when you are selling

01:08:26.930 --> 01:08:29.090
<v Speaker 1>or providing Kubernetes as a service to your

01:08:29.090 --> 01:08:31.010
<v Speaker 1>developers or other teams.

01:08:31.489 --> 01:08:34.290
<v Speaker 1>And I think that's really great because it's

01:08:34.290 --> 01:08:36.450
<v Speaker 1>the power of the open source.

01:08:36.925 --> 01:08:39.965
<v Speaker 1>So you don't need to rely on companies.

01:08:39.965 --> 01:08:42.765
<v Speaker 1>Obviously, they need to build. They need to

01:08:42.845 --> 01:08:45.005
<v Speaker 1>pay the salaries for all the software engineers

01:08:45.005 --> 01:08:47.085
<v Speaker 1>employed by AWS, Azure, and so on and

01:08:47.085 --> 01:08:49.245
<v Speaker 1>so forth. But you can do that on

01:08:49.245 --> 01:08:51.005
<v Speaker 1>your home, at home,

01:08:51.325 --> 01:08:53.770
<v Speaker 1>with a shared governance from the open source

01:08:53.770 --> 01:08:57.370
<v Speaker 1>community. And I think that's more interesting rather

01:08:57.370 --> 01:08:58.809
<v Speaker 1>than, okay, by

01:08:59.130 --> 01:09:01.769
<v Speaker 1>AWS or by Azure. End of the story.

01:09:01.770 --> 01:09:04.569
<v Speaker 1>I can say a word about the direction

01:09:04.569 --> 01:09:06.569
<v Speaker 1>of the project. I don't even know the

01:09:06.569 --> 01:09:10.324
<v Speaker 1>internals of AKS or EKS. With Kamaji instead,

01:09:10.404 --> 01:09:12.645
<v Speaker 1>you just need to issue the discussion.

01:09:12.885 --> 01:09:14.484
<v Speaker 1>With the discussion, we're starting

01:09:15.125 --> 01:09:17.685
<v Speaker 1>a discussion with the whole team members, with

01:09:17.685 --> 01:09:18.645
<v Speaker 1>all the community,

01:09:19.125 --> 01:09:22.005
<v Speaker 1>and we are just committed to deliver

01:09:22.340 --> 01:09:23.939
<v Speaker 1>our reliable software.

01:09:24.420 --> 01:09:26.739
<v Speaker 1>End of the story. So these are the

01:09:26.739 --> 01:09:29.380
<v Speaker 1>links, and I don't know. Maybe I talk

01:09:29.380 --> 01:09:31.779
<v Speaker 1>too much. My bad. No. No. I I

01:09:31.779 --> 01:09:33.460
<v Speaker 0>I love what you're saying, and it's all

01:09:33.460 --> 01:09:35.699
<v Speaker 0>useful context around what's going on here and

01:09:35.699 --> 01:09:37.965
<v Speaker 0>how cool this is. I think we have

01:09:37.965 --> 01:09:39.564
<v Speaker 0>one more question on the chat. What I'll

01:09:39.564 --> 01:09:41.805
<v Speaker 0>say is before I pass that question on,

01:09:41.805 --> 01:09:43.965
<v Speaker 0>if anyone else watching has any questions before

01:09:43.965 --> 01:09:45.725
<v Speaker 0>we finish up, please drop them into the

01:09:45.725 --> 01:09:47.085
<v Speaker 0>comment section now.

01:09:47.805 --> 01:09:49.965
<v Speaker 0>The question that we have is from engine.

01:09:49.965 --> 01:09:52.710
<v Speaker 0>Again, engine is asking, like, do you plan

01:09:52.710 --> 01:09:56.070
<v Speaker 0>on supporting other Kubernetes distribution? Could we use

01:09:56.070 --> 01:09:57.670
<v Speaker 0>Kamaji for KCS

01:09:57.670 --> 01:10:00.070
<v Speaker 0>or k zeros or etcetera?

01:10:00.230 --> 01:10:02.950
<v Speaker 1>Oh, that's a nice question, honestly.

01:10:03.990 --> 01:10:06.445
<v Speaker 1>We can think about that. Yeah, yeah. I

01:10:06.445 --> 01:10:08.445
<v Speaker 1>don't think there is any downside about that.

01:10:08.445 --> 01:10:10.445
<v Speaker 1>Keep in mind that we are just using

01:10:10.445 --> 01:10:11.005
<v Speaker 1>the

01:10:11.885 --> 01:10:15.085
<v Speaker 1>default images because in the end, if you

01:10:15.085 --> 01:10:17.805
<v Speaker 1>would like to use multiple clusters, you're ending

01:10:17.805 --> 01:10:20.200
<v Speaker 1>up using products by K3S,

01:10:20.200 --> 01:10:22.520
<v Speaker 1>by Muralantis, or K3S by Ranger, and so

01:10:22.520 --> 01:10:25.320
<v Speaker 1>on and so forth. So we just we

01:10:25.320 --> 01:10:27.239
<v Speaker 1>were trying to commit to the

01:10:28.280 --> 01:10:29.080
<v Speaker 1>vanilla

01:10:29.240 --> 01:10:30.040
<v Speaker 1>solution.

01:10:30.280 --> 01:10:31.960
<v Speaker 1>But, yeah, we can think about that. I

01:10:31.960 --> 01:10:33.565
<v Speaker 1>don't know. Maybe we are

01:10:34.125 --> 01:10:36.525
<v Speaker 1>but, yeah, k three s is CNCF compliant

01:10:36.525 --> 01:10:39.244
<v Speaker 1>CLASA. Yeah. So it's a compliance.

01:10:39.485 --> 01:10:41.165
<v Speaker 1>So I think that also the signature of

01:10:41.165 --> 01:10:43.084
<v Speaker 1>the CLI flags

01:10:43.165 --> 01:10:44.445
<v Speaker 1>are the same. So

01:10:45.760 --> 01:10:48.160
<v Speaker 1>open an issue, open a feature request. Let's

01:10:48.160 --> 01:10:50.240
<v Speaker 1>try to discuss that, and we can think

01:10:50.240 --> 01:10:51.360
<v Speaker 1>about that. Absolutely.

01:10:51.920 --> 01:10:53.840
<v Speaker 1>I will lie. I I will I will

01:10:53.840 --> 01:10:55.280
<v Speaker 1>love that. Yeah. Absolutely.

01:10:56.160 --> 01:10:56.800
<v Speaker 0>Very cool.

01:10:57.614 --> 01:10:59.614
<v Speaker 0>Alright. I don't think we have any more

01:10:59.614 --> 01:11:01.534
<v Speaker 0>questions. So with that, I will say, Dario,

01:11:01.534 --> 01:11:02.974
<v Speaker 0>thank you so much for taking time out

01:11:02.974 --> 01:11:05.375
<v Speaker 0>of your day and showing us Kamaji. It's

01:11:05.375 --> 01:11:07.054
<v Speaker 0>a really interesting project.

01:11:07.215 --> 01:11:08.974
<v Speaker 0>I'm really I I think it's something I'm

01:11:08.974 --> 01:11:11.280
<v Speaker 0>gonna have to experiment with on my bare

01:11:11.280 --> 01:11:13.599
<v Speaker 0>metal clusters and try and get more more

01:11:13.599 --> 01:11:15.760
<v Speaker 0>utilization of those control plane notes and bring

01:11:15.760 --> 01:11:17.840
<v Speaker 0>my own worker notes. So I'll definitely kick

01:11:17.840 --> 01:11:19.440
<v Speaker 0>the tires on it a bit more and,

01:11:19.599 --> 01:11:21.679
<v Speaker 0>open any issues, but I'm excited. I think

01:11:21.679 --> 01:11:22.959
<v Speaker 0>this is very, very cool.

01:11:23.440 --> 01:11:25.725
<v Speaker 1>Yeah. Thank you so much. Engine is saying,

01:11:25.725 --> 01:11:28.765
<v Speaker 0>I see Kamaji in the edge IoT context.

01:11:30.205 --> 01:11:32.525
<v Speaker 0>Feel free to share more on that. Like,

01:11:32.845 --> 01:11:34.364
<v Speaker 0>is that something you had considered?

01:11:35.325 --> 01:11:36.685
<v Speaker 1>Well, in the end, if you think about

01:11:36.685 --> 01:11:39.130
<v Speaker 1>that, I saw well, it's not my field,

01:11:39.130 --> 01:11:41.369
<v Speaker 1>honestly, because I've been a

01:11:41.690 --> 01:11:44.570
<v Speaker 1>web developer now playing with containers. So

01:11:45.050 --> 01:11:47.610
<v Speaker 1>the edge is really hard, also the bare

01:11:47.610 --> 01:11:48.729
<v Speaker 1>metal, to be honest.

01:11:49.210 --> 01:11:51.864
<v Speaker 1>But I remember that the great problem of

01:11:51.864 --> 01:11:53.385
<v Speaker 1>the edge is the fact that you're ending

01:11:53.385 --> 01:11:55.385
<v Speaker 1>up with a control plane on the edge.

01:11:55.784 --> 01:11:58.185
<v Speaker 1>You need a control plane on the edge

01:11:58.185 --> 01:12:01.225
<v Speaker 1>because otherwise, it's not like Docker's wall. Okay?

01:12:01.225 --> 01:12:03.040
<v Speaker 1>With Docker's wall, I remember that you were

01:12:03.040 --> 01:12:05.280
<v Speaker 1>ending up with multiple nodes that were acting

01:12:05.280 --> 01:12:08.720
<v Speaker 1>as control plane and also as workers, but

01:12:08.720 --> 01:12:10.000
<v Speaker 1>it was really

01:12:10.240 --> 01:12:12.000
<v Speaker 1>a bad pattern, I'd say,

01:12:12.240 --> 01:12:12.800
<v Speaker 1>because

01:12:13.600 --> 01:12:16.320
<v Speaker 1>you're mixing up the roles. So what happens

01:12:16.320 --> 01:12:17.920
<v Speaker 1>if an application is

01:12:18.475 --> 01:12:21.035
<v Speaker 1>killing the control plane components?

01:12:21.515 --> 01:12:23.755
<v Speaker 1>Instead, with Kamaji, in the end, you just

01:12:23.755 --> 01:12:26.235
<v Speaker 1>need, this sort of connection

01:12:26.395 --> 01:12:27.995
<v Speaker 1>with the control plane,

01:12:28.315 --> 01:12:30.235
<v Speaker 1>and you don't need to deploy the control

01:12:30.235 --> 01:12:32.155
<v Speaker 1>plane on the same edge location.

01:12:32.630 --> 01:12:35.429
<v Speaker 1>But, yeah, it's something that will be absolutely

01:12:35.429 --> 01:12:38.710
<v Speaker 1>interesting. To be honest, I'm missing the overall

01:12:38.710 --> 01:12:41.190
<v Speaker 1>picture of the edge because it's a different

01:12:41.190 --> 01:12:41.829
<v Speaker 1>word

01:12:42.150 --> 01:12:45.750
<v Speaker 1>word than me from my usual one. But,

01:12:45.750 --> 01:12:47.030
<v Speaker 1>yeah, I think so.

01:12:47.775 --> 01:12:50.335
<v Speaker 1>And if I'm wrong, tell me that. No

01:12:50.335 --> 01:12:51.215
<v Speaker 1>offense at all.

01:12:52.095 --> 01:12:52.895
<v Speaker 0>Alright.

01:12:53.215 --> 01:12:55.135
<v Speaker 0>Well, I think we'll leave that there. Thank

01:12:55.135 --> 01:12:57.215
<v Speaker 0>you again for joining me and for sharing.

01:12:57.535 --> 01:12:59.215
<v Speaker 0>I hope you have a wonderful day and

01:12:59.215 --> 01:13:01.215
<v Speaker 0>a wonderful weekend. To everyone watching, thank you

01:13:01.215 --> 01:13:04.040
<v Speaker 0>for your questions and for joining us today,

01:13:04.040 --> 01:13:06.040
<v Speaker 0>and we'll be back soon for more Rawkode

01:13:06.040 --> 01:13:07.239
<v Speaker 0>Live later.

01:13:07.560 --> 01:13:09.400
<v Speaker 0>Alright, Daniel. Have a good one. I'll see

01:13:09.400 --> 01:13:11.400
<v Speaker 0>you later on. Thanks. Bye.

01:13:11.800 --> 01:13:12.120
<v Speaker 1>Bye.
