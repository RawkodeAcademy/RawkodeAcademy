WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 4205ef7d-e0c9-41b5-bb5b-c86ad49ef757
Created: 2025-04-29T17:56:51.662Z
Duration: 3037.9543
Channels: 1

00:00:16.895 --> 00:00:17.615
<v Speaker 0>Hello,

00:00:18.015 --> 00:00:21.055
<v Speaker 0>and welcome to lecture one of the complete

00:00:21.055 --> 00:00:23.215
<v Speaker 0>guide of InfluxDB

00:00:23.215 --> 00:00:23.615
<v Speaker 0>two.

00:00:26.110 --> 00:00:27.070
<v Speaker 0>My name is

00:00:28.430 --> 00:00:29.630
<v Speaker 0>wow, confusing.

00:00:29.630 --> 00:00:31.870
<v Speaker 0>My name is David Flanagan. I will be

00:00:31.870 --> 00:00:34.830
<v Speaker 0>your guide to InfluxDB two. And I just

00:00:34.830 --> 00:00:37.630
<v Speaker 0>want to start these sessions by talking a

00:00:37.630 --> 00:00:39.710
<v Speaker 0>little bit about how they're gonna work

00:00:40.105 --> 00:00:42.265
<v Speaker 0>and other future sessions that will be coming

00:00:42.265 --> 00:00:42.825
<v Speaker 0>soon.

00:00:43.625 --> 00:00:46.585
<v Speaker 0>So live courses on the Rawkode Academy are

00:00:46.585 --> 00:00:49.945
<v Speaker 0>a mixture of live streams just like this,

00:00:50.265 --> 00:00:52.985
<v Speaker 0>which will be driven by some live coding,

00:00:52.985 --> 00:00:54.504
<v Speaker 0>some slides like we'll see today,

00:00:55.110 --> 00:00:57.430
<v Speaker 0>and live q and a's. We'll be doing

00:00:57.430 --> 00:00:59.670
<v Speaker 0>these multiple times per week to just try

00:00:59.670 --> 00:01:01.430
<v Speaker 0>and engage and make sure that the course

00:01:01.430 --> 00:01:04.629
<v Speaker 0>material is being absorbed and consumed and, you

00:01:04.629 --> 00:01:05.750
<v Speaker 0>know, we're all learning.

00:01:06.965 --> 00:01:08.085
<v Speaker 0>Will also be

00:01:08.725 --> 00:01:11.365
<v Speaker 0>prerecorded videos which accompany

00:01:11.365 --> 00:01:13.045
<v Speaker 0>each of these live sessions,

00:01:13.365 --> 00:01:15.925
<v Speaker 0>which will break down into smaller components each

00:01:15.925 --> 00:01:18.165
<v Speaker 0>of the each of the sections of the

00:01:18.165 --> 00:01:20.485
<v Speaker 0>workshops that we'll be tackling and and playing

00:01:20.485 --> 00:01:22.085
<v Speaker 0>with over the next days and weeks.

00:01:22.880 --> 00:01:24.400
<v Speaker 0>So they're multifaceted.

00:01:24.560 --> 00:01:26.240
<v Speaker 0>I really hope you enjoy them. I would

00:01:26.240 --> 00:01:29.520
<v Speaker 0>love any feedback that you as incubating members

00:01:29.520 --> 00:01:31.680
<v Speaker 0>are happy to give to me. So jump

00:01:31.680 --> 00:01:34.240
<v Speaker 0>into the Discord. Don't forget, Rawkode. Chat is

00:01:34.240 --> 00:01:35.680
<v Speaker 0>the best place to come in. There is

00:01:35.680 --> 00:01:38.535
<v Speaker 0>the incubating lounge. If you're not already added

00:01:38.535 --> 00:01:40.055
<v Speaker 0>to the incubating lounge and there are a

00:01:40.055 --> 00:01:41.175
<v Speaker 0>few of you that I know are not

00:01:41.175 --> 00:01:43.975
<v Speaker 0>in there, then remember to connect your YouTube

00:01:43.975 --> 00:01:45.895
<v Speaker 0>and your Discords together

00:01:46.135 --> 00:01:47.815
<v Speaker 0>so you can join the other members and

00:01:47.815 --> 00:01:48.935
<v Speaker 0>chat about these courses.

00:01:49.450 --> 00:01:51.690
<v Speaker 0>And also please make suggestions for other courses

00:01:51.690 --> 00:01:53.210
<v Speaker 0>you're going to see coming along at the

00:01:53.210 --> 00:01:54.250
<v Speaker 0>Rawkode Academy.

00:01:54.570 --> 00:01:56.090
<v Speaker 0>I will do my best to make that

00:01:56.090 --> 00:01:59.610
<v Speaker 0>happen either guided by myself or guided by

00:01:59.610 --> 00:02:02.170
<v Speaker 0>friends that I've got in the community, a

00:02:02.170 --> 00:02:03.050
<v Speaker 0>cloud native community.

00:02:04.145 --> 00:02:06.385
<v Speaker 0>Okay. That being said, we're gonna start today's

00:02:06.385 --> 00:02:08.305
<v Speaker 0>first live session. This should be around thirty

00:02:08.305 --> 00:02:10.544
<v Speaker 0>to forty minutes long. We're gonna talk about

00:02:10.544 --> 00:02:12.465
<v Speaker 0>the history of time series, and then I'll

00:02:12.465 --> 00:02:14.065
<v Speaker 0>give you a little bit of information on

00:02:14.065 --> 00:02:15.905
<v Speaker 0>what is coming next week.

00:02:16.570 --> 00:02:17.690
<v Speaker 0>Let's get started.

00:02:19.370 --> 00:02:22.570
<v Speaker 0>This is an introduction to time series, lecture

00:02:22.570 --> 00:02:24.090
<v Speaker 0>one in this course.

00:02:24.650 --> 00:02:26.090
<v Speaker 0>Let me get my mouse in the right

00:02:26.090 --> 00:02:26.650
<v Speaker 0>place.

00:02:28.330 --> 00:02:29.530
<v Speaker 0>Mouse mouse. There we go.

00:02:32.295 --> 00:02:34.935
<v Speaker 0>Well, I'm gonna start with a little bit

00:02:34.935 --> 00:02:37.254
<v Speaker 0>of a pop quiz. I don't just want

00:02:37.254 --> 00:02:37.815
<v Speaker 0>to

00:02:38.055 --> 00:02:39.894
<v Speaker 0>throw the time series at you and be

00:02:39.894 --> 00:02:42.454
<v Speaker 0>like, hey, this is time series. Like, let's

00:02:42.454 --> 00:02:43.974
<v Speaker 0>make it a little bit fun along the

00:02:43.974 --> 00:02:45.254
<v Speaker 0>way. So we're gonna start with a little

00:02:45.254 --> 00:02:46.454
<v Speaker 0>bit of a pop quiz

00:02:46.740 --> 00:02:48.820
<v Speaker 0>just to talk about the history of computing

00:02:48.820 --> 00:02:50.820
<v Speaker 0>and time series side by side,

00:02:51.620 --> 00:02:53.220
<v Speaker 0>and we'll see how we got. Now I

00:02:53.220 --> 00:02:55.460
<v Speaker 0>know I can't receive any of your answers

00:02:55.620 --> 00:02:56.420
<v Speaker 0>because

00:02:56.580 --> 00:02:58.500
<v Speaker 0>of the what is that annoying thing in

00:02:58.500 --> 00:02:58.900
<v Speaker 0>the corner?

00:03:00.095 --> 00:03:02.095
<v Speaker 0>I know I can't take any questions from

00:03:02.095 --> 00:03:04.655
<v Speaker 0>you right now, but that's okay. Feel free

00:03:04.655 --> 00:03:05.775
<v Speaker 0>to leave them in the comments. I will

00:03:05.775 --> 00:03:07.215
<v Speaker 0>do my best to tackle them.

00:03:08.255 --> 00:03:09.215
<v Speaker 0>Encoding.

00:03:09.215 --> 00:03:11.135
<v Speaker 0>Now when I talk about encoding, I'm talking

00:03:11.135 --> 00:03:14.095
<v Speaker 0>about as, you know, computer scientists and engineers,

00:03:14.829 --> 00:03:16.990
<v Speaker 0>programmers, whatever you want to call yourself,

00:03:18.349 --> 00:03:21.230
<v Speaker 0>is our ability to transfer

00:03:21.790 --> 00:03:23.390
<v Speaker 0>some piece of information

00:03:23.469 --> 00:03:26.110
<v Speaker 0>in a format that isn't the raw format.

00:03:26.269 --> 00:03:28.030
<v Speaker 0>You know, base 64 would be an example

00:03:28.030 --> 00:03:30.835
<v Speaker 0>of encoding our ability to translate messages into

00:03:30.835 --> 00:03:31.795
<v Speaker 0>other formats.

00:03:32.035 --> 00:03:33.475
<v Speaker 0>And when we think about this,

00:03:33.795 --> 00:03:36.835
<v Speaker 0>you probably think that's relatively new.

00:03:37.715 --> 00:03:39.555
<v Speaker 0>I'll give you two seconds to pack your

00:03:39.555 --> 00:03:40.995
<v Speaker 0>numbers in your head and see if you're

00:03:40.995 --> 00:03:41.795
<v Speaker 0>close.

00:03:41.795 --> 00:03:42.595
<v Speaker 0>One, two.

00:03:44.040 --> 00:03:45.880
<v Speaker 0>And the answer is no. Encoding

00:03:46.440 --> 00:03:48.680
<v Speaker 0>well, not specifically to do with computers, of

00:03:48.680 --> 00:03:51.720
<v Speaker 0>course, but encoding goes back many, many, many

00:03:51.720 --> 00:03:52.600
<v Speaker 0>years.

00:03:53.400 --> 00:03:55.000
<v Speaker 0>First used, at least as far as I

00:03:55.000 --> 00:03:56.840
<v Speaker 0>could see, in April.

00:03:58.435 --> 00:04:00.755
<v Speaker 0>An eyephant is documented in The Lies of

00:04:00.755 --> 00:04:03.235
<v Speaker 0>the Noble Grecians and Romans by Roman historian

00:04:03.235 --> 00:04:04.115
<v Speaker 0>Plutarch,

00:04:04.355 --> 00:04:06.195
<v Speaker 0>where Plutarch is telling us about the story

00:04:06.195 --> 00:04:07.315
<v Speaker 0>of Alcibiades.

00:04:07.555 --> 00:04:10.435
<v Speaker 0>Alcibiades was a mercenary who had a fleet

00:04:10.435 --> 00:04:12.515
<v Speaker 0>of ships and people by his side, and

00:04:12.780 --> 00:04:15.420
<v Speaker 0>he didn't really have allegiance to anyone

00:04:15.500 --> 00:04:16.700
<v Speaker 0>except himself.

00:04:17.420 --> 00:04:20.700
<v Speaker 0>So when Alkabates would show up to

00:04:21.579 --> 00:04:23.020
<v Speaker 0>a war in the seas,

00:04:23.340 --> 00:04:25.740
<v Speaker 0>it wasn't until he raised the seine

00:04:26.085 --> 00:04:28.965
<v Speaker 0>that people knew which side of that battle

00:04:28.965 --> 00:04:30.725
<v Speaker 0>Alkabates was gonna be on.

00:04:32.005 --> 00:04:35.285
<v Speaker 0>So that's encoding a message of support

00:04:36.085 --> 00:04:38.005
<v Speaker 0>through a flag on a ship.

00:04:39.810 --> 00:04:41.170
<v Speaker 0>Now, of course,

00:04:41.730 --> 00:04:43.650
<v Speaker 0>it took a long time before this system

00:04:43.650 --> 00:04:44.610
<v Speaker 0>really changed.

00:04:45.330 --> 00:04:47.330
<v Speaker 0>Know, according to everything I can find online

00:04:47.330 --> 00:04:49.010
<v Speaker 0>about flag systems,

00:04:49.170 --> 00:04:51.410
<v Speaker 0>it wasn't until the fourteenth century

00:04:51.490 --> 00:04:53.330
<v Speaker 0>that they actually evolved to have, like, two

00:04:53.330 --> 00:04:55.170
<v Speaker 0>signals, and that was, like, one or two

00:04:55.170 --> 00:04:56.825
<v Speaker 0>flags. And this is from the Black Book

00:04:56.825 --> 00:04:57.865
<v Speaker 0>of Admiralty.

00:04:58.665 --> 00:05:01.145
<v Speaker 0>Although just a hundred years after that, things

00:05:01.145 --> 00:05:03.705
<v Speaker 0>did evolve much quicker. I think people realized

00:05:03.705 --> 00:05:05.145
<v Speaker 0>maybe there was a flaw in their one

00:05:05.145 --> 00:05:06.265
<v Speaker 0>and two flag system.

00:05:06.585 --> 00:05:09.145
<v Speaker 0>But by the fifteenth century, it had 15

00:05:08.820 --> 00:05:11.540
<v Speaker 0>flags and each flag had a different encoding

00:05:11.540 --> 00:05:12.900
<v Speaker 0>or message,

00:05:13.300 --> 00:05:16.260
<v Speaker 0>symbol, etcetera on the flag, which all had

00:05:16.260 --> 00:05:18.340
<v Speaker 0>different meanings. So you have to understand what

00:05:18.340 --> 00:05:20.660
<v Speaker 0>each of the flags meant to know which

00:05:20.660 --> 00:05:22.340
<v Speaker 0>message was being passed.

00:05:23.955 --> 00:05:26.275
<v Speaker 0>And then a few hundred years later, we

00:05:26.275 --> 00:05:29.074
<v Speaker 0>have the French system, which I will fail

00:05:29.074 --> 00:05:29.955
<v Speaker 0>to pronounce,

00:05:30.275 --> 00:05:33.715
<v Speaker 0>which has 10 coloured flags each representing zero

00:05:33.715 --> 00:05:36.630
<v Speaker 0>to nine, and generally these chips would have

00:05:36.630 --> 00:05:38.470
<v Speaker 0>three sets of those flags being able to

00:05:38.470 --> 00:05:41.030
<v Speaker 0>transfer tuples of information to the other chips

00:05:41.030 --> 00:05:43.270
<v Speaker 0>with a big book to look up which

00:05:43.270 --> 00:05:44.870
<v Speaker 0>each system means.

00:05:46.949 --> 00:05:48.870
<v Speaker 0>Now I'll do one more of these, of

00:05:48.784 --> 00:05:50.544
<v Speaker 0>course, based on the encoding one, you know

00:05:50.544 --> 00:05:52.784
<v Speaker 0>that I'm using the term encoding loosely. The

00:05:52.784 --> 00:05:54.625
<v Speaker 0>same will be true for sharding. So I'll

00:05:54.625 --> 00:05:56.145
<v Speaker 0>give you a few seconds to guess. Where

00:05:56.145 --> 00:05:58.224
<v Speaker 0>do you think sharding or what was the

00:05:58.224 --> 00:06:00.945
<v Speaker 0>oldest reference to anything I could find

00:06:01.185 --> 00:06:02.384
<v Speaker 0>that resembled sharding?

00:06:05.320 --> 00:06:07.480
<v Speaker 0>And I'm going back to January

00:06:07.480 --> 00:06:08.440
<v Speaker 0>this time.

00:06:08.680 --> 00:06:10.840
<v Speaker 0>The first documented

00:06:11.560 --> 00:06:13.640
<v Speaker 0>example of charting I found

00:06:14.040 --> 00:06:16.360
<v Speaker 0>was actually described by Polybius,

00:06:16.735 --> 00:06:18.735
<v Speaker 0>and this is talking about the way that

00:06:18.735 --> 00:06:22.495
<v Speaker 0>the ancient Romans transferred messages on the battlefield.

00:06:22.975 --> 00:06:25.615
<v Speaker 0>Common theme, but not important to today's conversation,

00:06:25.615 --> 00:06:28.735
<v Speaker 0>is that ancient battles drive the innovation of

00:06:28.735 --> 00:06:29.215
<v Speaker 0>their time.

00:06:30.409 --> 00:06:32.090
<v Speaker 0>Now what the ancient Romans

00:06:32.330 --> 00:06:35.530
<v Speaker 0>were doing was splitting their alphabet into five

00:06:35.530 --> 00:06:36.330
<v Speaker 0>parts

00:06:36.810 --> 00:06:37.530
<v Speaker 0>and

00:06:38.250 --> 00:06:39.449
<v Speaker 0>using tablets.

00:06:39.849 --> 00:06:40.490
<v Speaker 0>So

00:06:41.050 --> 00:06:43.050
<v Speaker 0>they would have five tablets

00:06:43.705 --> 00:06:46.905
<v Speaker 0>and they would use these to transfer messages

00:06:46.905 --> 00:06:48.905
<v Speaker 0>really, really quickly or at least yeah, they

00:06:48.905 --> 00:06:50.585
<v Speaker 0>would be used as a translation tool for

00:06:50.585 --> 00:06:52.105
<v Speaker 0>them to translate the message.

00:06:52.505 --> 00:06:54.425
<v Speaker 0>And each tablet would have five letters on

00:06:54.425 --> 00:06:54.585
<v Speaker 0>it.

00:06:55.590 --> 00:06:58.550
<v Speaker 0>Here's a photo from ancient Rome, so they

00:06:58.550 --> 00:07:00.470
<v Speaker 0>were using fire to actually

00:07:00.710 --> 00:07:03.750
<v Speaker 0>send these messages many, many distances.

00:07:04.470 --> 00:07:06.630
<v Speaker 0>But what this system would do, it'd say,

00:07:06.630 --> 00:07:08.710
<v Speaker 0>okay, we've got two flames on the left,

00:07:08.710 --> 00:07:10.310
<v Speaker 0>that means we want to look at the

00:07:10.310 --> 00:07:12.634
<v Speaker 0>second tablet, and then the five flames on

00:07:12.634 --> 00:07:14.395
<v Speaker 0>the right means look at the use the

00:07:14.395 --> 00:07:16.794
<v Speaker 0>fifth letter on that tablet. And you can

00:07:16.794 --> 00:07:19.035
<v Speaker 0>imagine the reason these fire flames are super

00:07:19.035 --> 00:07:19.995
<v Speaker 0>super quick,

00:07:20.235 --> 00:07:22.715
<v Speaker 0>they can translate and send those messages hundreds

00:07:22.715 --> 00:07:24.074
<v Speaker 0>of miles depending on how

00:07:25.050 --> 00:07:26.570
<v Speaker 0>depending on what they're using to burn and

00:07:26.570 --> 00:07:28.889
<v Speaker 0>what kind of smoke they're getting. But this

00:07:28.889 --> 00:07:31.290
<v Speaker 0>was the way that they won wars.

00:07:32.010 --> 00:07:32.890
<v Speaker 0>Very cool.

00:07:33.690 --> 00:07:35.210
<v Speaker 0>A lot of these tidbits came from the

00:07:35.210 --> 00:07:37.050
<v Speaker 0>early history of data networks. You can go

00:07:37.050 --> 00:07:39.195
<v Speaker 0>and buy this book. It is quite expensive,

00:07:39.435 --> 00:07:41.035
<v Speaker 0>but from start to finish, it is just

00:07:41.035 --> 00:07:43.355
<v Speaker 0>such a fun read and I couldn't recommend

00:07:43.355 --> 00:07:44.475
<v Speaker 0>it more to people.

00:07:46.395 --> 00:07:49.035
<v Speaker 0>Okay. So let's get on track. This is

00:07:49.035 --> 00:07:50.555
<v Speaker 0>the talk about InfluxDB,

00:07:50.555 --> 00:07:52.235
<v Speaker 0>and we wanna understand

00:07:51.910 --> 00:07:53.910
<v Speaker 0>use cases for InfluxDB. And the best way

00:07:53.910 --> 00:07:55.670
<v Speaker 0>to do that is to quickly take a

00:07:55.670 --> 00:07:57.190
<v Speaker 0>look at the history of time series before

00:07:57.190 --> 00:08:00.710
<v Speaker 0>we break down what time series actually is.

00:08:01.750 --> 00:08:02.390
<v Speaker 0>So

00:08:02.630 --> 00:08:03.430
<v Speaker 0>let's

00:08:03.910 --> 00:08:04.070
<v Speaker 0>see.

00:08:05.835 --> 00:08:08.235
<v Speaker 0>I guess, you know, having that pop quiz

00:08:08.235 --> 00:08:11.435
<v Speaker 0>at the start, we see that, you know,

00:08:11.435 --> 00:08:13.835
<v Speaker 0>the ancient Romans did drive a lot of

00:08:13.835 --> 00:08:14.395
<v Speaker 0>this

00:08:14.955 --> 00:08:17.914
<v Speaker 0>or at least some familiarity of these concepts

00:08:17.914 --> 00:08:19.194
<v Speaker 0>that we have in modern times is that

00:08:19.194 --> 00:08:21.310
<v Speaker 0>when it comes to when it comes to

00:08:21.310 --> 00:08:22.350
<v Speaker 0>time series,

00:08:22.670 --> 00:08:24.430
<v Speaker 0>the Romans did that first too.

00:08:24.910 --> 00:08:25.870
<v Speaker 0>And in fact,

00:08:26.510 --> 00:08:28.110
<v Speaker 0>there's this great paragraph

00:08:28.430 --> 00:08:31.150
<v Speaker 0>that says I wouldn't read it verbatim, but,

00:08:31.150 --> 00:08:32.590
<v Speaker 0>you know, the things that are highlighted here

00:08:32.590 --> 00:08:33.790
<v Speaker 0>are legal bodies

00:08:34.164 --> 00:08:37.285
<v Speaker 0>sold to public investors and traded,

00:08:37.845 --> 00:08:40.165
<v Speaker 0>and the values of these shares

00:08:40.245 --> 00:08:41.125
<v Speaker 0>fluctuated

00:08:41.125 --> 00:08:42.085
<v Speaker 0>over time.

00:08:43.205 --> 00:08:47.150
<v Speaker 0>Now it doesn't say time series here, but

00:08:47.150 --> 00:08:50.190
<v Speaker 0>of course the Romans must have had a

00:08:50.270 --> 00:08:53.070
<v Speaker 0>way of tracking the value of the fluctuations

00:08:53.070 --> 00:08:54.350
<v Speaker 0>of these commodities

00:08:54.590 --> 00:08:56.430
<v Speaker 0>over time to understand

00:08:56.750 --> 00:08:57.790
<v Speaker 0>as the

00:08:57.950 --> 00:09:00.430
<v Speaker 0>organization or the legal body doing well is

00:09:00.430 --> 00:09:02.925
<v Speaker 0>going down, etcetera, and been able pay out

00:09:02.925 --> 00:09:05.405
<v Speaker 0>those dividends to the public investors.

00:09:06.685 --> 00:09:09.885
<v Speaker 0>So yeah, time series is old even though

00:09:09.885 --> 00:09:11.645
<v Speaker 0>it seems to be like something we can

00:09:11.645 --> 00:09:12.365
<v Speaker 0>consider

00:09:12.765 --> 00:09:13.565
<v Speaker 0>pretty modern.

00:09:15.740 --> 00:09:17.820
<v Speaker 0>Some little facts for you is that the

00:09:17.820 --> 00:09:19.820
<v Speaker 0>first ever IPO was the Dutch East India

00:09:19.820 --> 00:09:22.140
<v Speaker 0>Company in sixteen o two, the first US

00:09:22.140 --> 00:09:24.780
<v Speaker 0>IPO wasn't until 1873,

00:09:24.780 --> 00:09:26.460
<v Speaker 0>and that was the Bank of North America,

00:09:27.285 --> 00:09:30.404
<v Speaker 0>And then it wasn't until 1984

00:09:30.404 --> 00:09:32.884
<v Speaker 0>someone asked a question about the price of

00:09:32.884 --> 00:09:33.605
<v Speaker 0>wheat.

00:09:34.165 --> 00:09:36.324
<v Speaker 0>Why is this important? Well,

00:09:36.644 --> 00:09:38.725
<v Speaker 0>this is the first documented

00:09:38.725 --> 00:09:41.685
<v Speaker 0>usage of the actual term time series that

00:09:41.685 --> 00:09:42.725
<v Speaker 0>I could find.

00:09:43.204 --> 00:09:44.640
<v Speaker 0>So this is the first time anyone had

00:09:44.640 --> 00:09:46.320
<v Speaker 0>ever put those two words together that was

00:09:46.320 --> 00:09:48.560
<v Speaker 0>in some sort of logged and written form

00:09:48.560 --> 00:09:49.360
<v Speaker 0>that could

00:09:50.400 --> 00:09:52.000
<v Speaker 0>travel the years to today.

00:09:52.480 --> 00:09:54.160
<v Speaker 0>But in 1884,

00:09:54.480 --> 00:09:56.800
<v Speaker 0>this paper was published in the Journal of

00:09:56.800 --> 00:10:00.155
<v Speaker 0>Statistical Society of Lending, which was building comparisons

00:10:00.155 --> 00:10:02.395
<v Speaker 0>and looking at the fluctuations of the price

00:10:02.395 --> 00:10:03.195
<v Speaker 0>of wheat

00:10:03.595 --> 00:10:07.035
<v Speaker 0>correlated with the value or the import price

00:10:07.035 --> 00:10:09.355
<v Speaker 0>of cotton and silk into Great Britain.

00:10:10.075 --> 00:10:12.180
<v Speaker 0>We're trying to work out if we are

00:10:12.180 --> 00:10:14.339
<v Speaker 0>importing more cotton and silk, the price of

00:10:14.339 --> 00:10:15.540
<v Speaker 0>wheat can up or down,

00:10:15.860 --> 00:10:17.060
<v Speaker 0>etcetera, etcetera.

00:10:17.379 --> 00:10:19.300
<v Speaker 0>Now it's not a paper I would encourage

00:10:19.300 --> 00:10:20.820
<v Speaker 0>you to go and read.

00:10:21.060 --> 00:10:22.660
<v Speaker 0>Of course, it's not that long, so feel

00:10:22.660 --> 00:10:23.699
<v Speaker 0>free, but it's just

00:10:24.345 --> 00:10:27.385
<v Speaker 0>that was a very nice find to see

00:10:27.385 --> 00:10:29.385
<v Speaker 0>time series mentioned in this way.

00:10:30.505 --> 00:10:32.584
<v Speaker 0>And, of course, just having

00:10:32.584 --> 00:10:34.584
<v Speaker 0>that paper, at least the first one I

00:10:34.584 --> 00:10:39.225
<v Speaker 0>could find that was applying the statistical mathematics

00:10:38.850 --> 00:10:41.410
<v Speaker 0>to the dimension of time I found really

00:10:41.410 --> 00:10:42.209
<v Speaker 0>interesting.

00:10:44.449 --> 00:10:45.649
<v Speaker 0>Okay, so

00:10:47.170 --> 00:10:49.889
<v Speaker 0>my former boss, Paul Dicks, the CTO of

00:10:49.889 --> 00:10:52.370
<v Speaker 0>InfluxDB once said that most data is best

00:10:52.370 --> 00:10:55.545
<v Speaker 0>understood in the dimension of time. And I

00:10:55.545 --> 00:10:57.705
<v Speaker 0>think that is one of the truest things

00:10:57.705 --> 00:10:59.145
<v Speaker 0>that I ever said.

00:10:59.385 --> 00:11:00.985
<v Speaker 0>And I'm looking forward to taking you on

00:11:00.985 --> 00:11:03.385
<v Speaker 0>this journey of time series and InfluxDB too,

00:11:03.385 --> 00:11:05.145
<v Speaker 0>and helping you understand

00:11:05.305 --> 00:11:07.465
<v Speaker 0>your time series, your data and your systems.

00:11:09.060 --> 00:11:11.700
<v Speaker 0>Okay. With that being said, what is time

00:11:11.700 --> 00:11:12.740
<v Speaker 0>series data?

00:11:13.540 --> 00:11:15.540
<v Speaker 0>Well, we're going to cover that. We're going

00:11:15.540 --> 00:11:16.740
<v Speaker 0>to take a look at

00:11:17.380 --> 00:11:19.460
<v Speaker 0>what are time series databases. Some of you

00:11:19.460 --> 00:11:20.820
<v Speaker 0>may be familiar with, some you may not

00:11:20.820 --> 00:11:23.524
<v Speaker 0>be not. I will get you acquainted with

00:11:23.524 --> 00:11:24.805
<v Speaker 0>the vocabulary

00:11:24.805 --> 00:11:26.565
<v Speaker 0>of InfluxDB.

00:11:27.365 --> 00:11:29.125
<v Speaker 0>And I really want to talk about the

00:11:29.125 --> 00:11:31.444
<v Speaker 0>value of time series data. When we talk

00:11:31.444 --> 00:11:33.444
<v Speaker 0>about time series data, it's very simple to

00:11:33.444 --> 00:11:36.750
<v Speaker 0>talk about the collecting and storing and querying

00:11:36.750 --> 00:11:39.149
<v Speaker 0>of that data. But there's something much more

00:11:39.149 --> 00:11:41.790
<v Speaker 0>important as we understood, and it's grasping the

00:11:41.790 --> 00:11:43.790
<v Speaker 0>value and longevity of that data and being

00:11:43.790 --> 00:11:45.310
<v Speaker 0>able to work with it accordingly.

00:11:45.949 --> 00:11:47.630
<v Speaker 0>And then we'll talk about a little bit

00:11:47.630 --> 00:11:49.795
<v Speaker 0>of those more advanced use cases for time

00:11:49.795 --> 00:11:51.475
<v Speaker 0>series, and that's all this is some of

00:11:51.475 --> 00:11:53.155
<v Speaker 0>the stuff that we will be covering over

00:11:53.155 --> 00:11:55.075
<v Speaker 0>the next couple of weeks on this course.

00:11:57.155 --> 00:11:58.835
<v Speaker 0>Okay. So what is time series data? I'm

00:11:58.835 --> 00:12:00.195
<v Speaker 0>gonna keep it simple, and it is any

00:12:00.195 --> 00:12:01.555
<v Speaker 0>piece of data with a timestamp.

00:12:01.970 --> 00:12:04.530
<v Speaker 0>That is it. It's really, really that simple.

00:12:04.530 --> 00:12:05.970
<v Speaker 0>If you have a value

00:12:06.290 --> 00:12:09.010
<v Speaker 0>and a timestamp, you can track the change

00:12:09.010 --> 00:12:11.170
<v Speaker 0>of that value over time and that is

00:12:11.170 --> 00:12:12.450
<v Speaker 0>time series data.

00:12:14.334 --> 00:12:16.015
<v Speaker 0>Gonna try and do this through an example,

00:12:16.015 --> 00:12:18.095
<v Speaker 0>and I'll try and move my face out

00:12:18.015 --> 00:12:19.695
<v Speaker 0>the way a little bit. What

00:12:22.095 --> 00:12:23.055
<v Speaker 0>we have here

00:12:23.535 --> 00:12:26.334
<v Speaker 0>are events, things that could happen in your

00:12:26.334 --> 00:12:26.975
<v Speaker 0>infrastructure.

00:12:27.750 --> 00:12:29.430
<v Speaker 0>Here we can see that the memory is

00:12:29.430 --> 00:12:30.710
<v Speaker 0>100%.

00:12:30.790 --> 00:12:32.630
<v Speaker 0>We can see a health check field. We

00:12:32.630 --> 00:12:35.190
<v Speaker 0>can see a database migration has been run

00:12:35.190 --> 00:12:36.950
<v Speaker 0>and a whole bunch of other things.

00:12:37.670 --> 00:12:40.230
<v Speaker 0>But they don't mean much in this form.

00:12:41.030 --> 00:12:41.910
<v Speaker 0>Get my eyes back.

00:12:44.475 --> 00:12:46.475
<v Speaker 0>But what we can do is try to

00:12:46.475 --> 00:12:47.435
<v Speaker 0>identify

00:12:48.875 --> 00:12:51.595
<v Speaker 0>what these events potentially represent.

00:12:52.555 --> 00:12:54.235
<v Speaker 0>And what we can represent, or at least

00:12:54.235 --> 00:12:55.995
<v Speaker 0>what we can try to infer from these

00:12:55.995 --> 00:12:58.395
<v Speaker 0>events, are reddy pinky color,

00:12:59.570 --> 00:13:02.130
<v Speaker 0>is that these are cause for concern.

00:13:02.930 --> 00:13:05.650
<v Speaker 0>These are events that maybe I would want

00:13:05.650 --> 00:13:08.610
<v Speaker 0>some alerting on. Like if a health check

00:13:08.610 --> 00:13:09.490
<v Speaker 0>failed,

00:13:09.890 --> 00:13:11.970
<v Speaker 0>I probably wanna know about it, depending on

00:13:11.970 --> 00:13:13.250
<v Speaker 0>how many of them happened and what space

00:13:13.250 --> 00:13:13.650
<v Speaker 0>of time.

00:13:14.605 --> 00:13:15.725
<v Speaker 0>More on that next

00:13:16.365 --> 00:13:16.845
<v Speaker 0>week.

00:13:17.405 --> 00:13:19.965
<v Speaker 0>Memory hit a %. Yeah. I probably definitely

00:13:19.965 --> 00:13:21.885
<v Speaker 0>want to know about that. That seems quite

00:13:21.885 --> 00:13:24.445
<v Speaker 0>dangerous. And pods being killed by the arm?

00:13:24.445 --> 00:13:26.765
<v Speaker 0>Yeah. Of course. Right? These are important events

00:13:26.765 --> 00:13:27.805
<v Speaker 0>I wanna understand.

00:13:29.410 --> 00:13:31.009
<v Speaker 0>Now in the yellow color, what we see

00:13:31.009 --> 00:13:32.769
<v Speaker 0>here is potential causality.

00:13:33.649 --> 00:13:34.930
<v Speaker 0>So a database

00:13:35.649 --> 00:13:37.010
<v Speaker 0>migration ran,

00:13:37.089 --> 00:13:38.370
<v Speaker 0>pod restarted,

00:13:38.769 --> 00:13:41.329
<v Speaker 0>a new version of our container was deployed,

00:13:41.685 --> 00:13:44.725
<v Speaker 0>and we have CI passed and started.

00:13:45.365 --> 00:13:48.725
<v Speaker 0>Now these events are not particularly malicious themselves

00:13:48.725 --> 00:13:51.525
<v Speaker 0>but they do have the ability to mutate

00:13:51.525 --> 00:13:52.325
<v Speaker 0>state.

00:13:52.485 --> 00:13:54.805
<v Speaker 0>Something in the system has changed

00:13:55.450 --> 00:13:58.890
<v Speaker 0>And change is always the cause of one

00:13:58.890 --> 00:14:00.410
<v Speaker 0>of the red ones. Something

00:14:00.890 --> 00:14:03.450
<v Speaker 0>has to happen for bad things to happen.

00:14:05.209 --> 00:14:07.209
<v Speaker 0>Purple, what do we see in purple? In

00:14:07.209 --> 00:14:08.170
<v Speaker 0>purple, see nothing.

00:14:08.774 --> 00:14:10.774
<v Speaker 0>Really, these are events that we probably just

00:14:10.774 --> 00:14:13.415
<v Speaker 0>want to discard. We would not consider these

00:14:13.415 --> 00:14:15.735
<v Speaker 0>things that could cause too much change or

00:14:15.735 --> 00:14:17.654
<v Speaker 0>too many problems within our system.

00:14:17.894 --> 00:14:19.735
<v Speaker 0>And of course, the red heading in pink,

00:14:19.735 --> 00:14:21.815
<v Speaker 0>it's Scotland qualifying for the World Cup.

00:14:22.295 --> 00:14:23.495
<v Speaker 0>Never gonna happen.

00:14:25.150 --> 00:14:28.110
<v Speaker 0>Now these events, while we can infer what

00:14:28.110 --> 00:14:30.590
<v Speaker 0>they mean and we can try to guess

00:14:30.590 --> 00:14:32.910
<v Speaker 0>what is happening in the system and its

00:14:32.910 --> 00:14:36.110
<v Speaker 0>current state and its current visualization,

00:14:36.110 --> 00:14:38.590
<v Speaker 0>we just have no idea. We are flying

00:14:38.590 --> 00:14:39.070
<v Speaker 0>blind.

00:14:39.995 --> 00:14:40.795
<v Speaker 0>However,

00:14:41.195 --> 00:14:43.915
<v Speaker 0>if we apply the dimension of time,

00:14:44.954 --> 00:14:47.035
<v Speaker 0>move me back down. If we apply the

00:14:47.035 --> 00:14:49.435
<v Speaker 0>dimension of time to these events, we actually

00:14:49.435 --> 00:14:50.954
<v Speaker 0>get a really strong understand

00:14:51.355 --> 00:14:52.394
<v Speaker 0>understanding

00:14:52.555 --> 00:14:53.995
<v Speaker 0>of what happened in the system.

00:14:54.630 --> 00:14:55.990
<v Speaker 0>We can actually see

00:14:56.630 --> 00:14:57.190
<v Speaker 0>that

00:14:57.910 --> 00:14:59.830
<v Speaker 0>the memory hit a %.

00:15:00.710 --> 00:15:02.390
<v Speaker 0>We then see that the ARM killed the

00:15:02.390 --> 00:15:03.030
<v Speaker 0>pod.

00:15:03.270 --> 00:15:05.830
<v Speaker 0>We were probably using the latest tag which

00:15:05.830 --> 00:15:08.405
<v Speaker 0>triggered a new deployment of our application, application,

00:15:08.405 --> 00:15:10.645
<v Speaker 0>maybe one we weren't ready to deploy just

00:15:10.645 --> 00:15:11.285
<v Speaker 0>yet.

00:15:11.925 --> 00:15:14.325
<v Speaker 0>That caused a migration to run-in our system

00:15:14.325 --> 00:15:16.885
<v Speaker 0>again, which we were not expecting and now

00:15:16.885 --> 00:15:18.485
<v Speaker 0>our health check is failing.

00:15:18.725 --> 00:15:20.885
<v Speaker 0>We now know what happened and all we

00:15:20.885 --> 00:15:22.325
<v Speaker 0>did was

00:15:23.029 --> 00:15:25.269
<v Speaker 0>replay these events in the order that they

00:15:25.269 --> 00:15:26.949
<v Speaker 0>happened, or at least visualize them in the

00:15:26.949 --> 00:15:29.029
<v Speaker 0>order that they happened to build the understanding.

00:15:29.029 --> 00:15:30.470
<v Speaker 0>So most data

00:15:30.709 --> 00:15:33.509
<v Speaker 0>and data as events with points in time

00:15:34.230 --> 00:15:36.545
<v Speaker 0>are always best understood in this fashion. And

00:15:36.545 --> 00:15:38.785
<v Speaker 0>that is why time series is so important

00:15:38.785 --> 00:15:42.464
<v Speaker 0>and why we're putting this course together on

00:15:42.464 --> 00:15:43.904
<v Speaker 0>InfluxDB two.

00:15:46.785 --> 00:15:47.985
<v Speaker 0>There we go.

00:15:50.029 --> 00:15:52.670
<v Speaker 0>Now, you may already be familiar and have

00:15:52.670 --> 00:15:54.990
<v Speaker 0>lots and lots of time series data.

00:15:55.230 --> 00:15:57.470
<v Speaker 0>This is the screen that where the words

00:15:57.470 --> 00:15:59.390
<v Speaker 0>may not be familiar right away nor even

00:15:59.390 --> 00:16:01.630
<v Speaker 0>probably visible to you depending on your screen,

00:16:02.355 --> 00:16:04.514
<v Speaker 0>But we've all really familiar with this, right?

00:16:04.514 --> 00:16:06.755
<v Speaker 0>This is some log being tailed.

00:16:07.795 --> 00:16:09.795
<v Speaker 0>Now, what is the first thing that we

00:16:09.795 --> 00:16:12.355
<v Speaker 0>always get at the start of a logline?

00:16:12.915 --> 00:16:14.595
<v Speaker 0>It is typically a timestamp.

00:16:15.209 --> 00:16:18.569
<v Speaker 0>Logs are classical time series data. These are

00:16:18.569 --> 00:16:21.529
<v Speaker 0>events that happen over time that can be

00:16:21.529 --> 00:16:23.529
<v Speaker 0>aggregated into metrics.

00:16:23.850 --> 00:16:25.610
<v Speaker 0>And I want to make that last little

00:16:25.610 --> 00:16:26.569
<v Speaker 0>point really clear.

00:16:27.545 --> 00:16:28.745
<v Speaker 0>All metrics,

00:16:28.824 --> 00:16:31.225
<v Speaker 0>every single metric in the world, and you

00:16:31.225 --> 00:16:32.824
<v Speaker 0>can bring me all the metrics you want

00:16:32.824 --> 00:16:33.945
<v Speaker 0>to the Discord.

00:16:34.185 --> 00:16:37.625
<v Speaker 0>Every metric is an aggregation of some series

00:16:37.625 --> 00:16:38.584
<v Speaker 0>of raw events.

00:16:39.760 --> 00:16:41.360
<v Speaker 0>Challenge accepted.

00:16:41.600 --> 00:16:43.600
<v Speaker 0>Bring me a metric that isn't. I will

00:16:43.600 --> 00:16:45.279
<v Speaker 0>concede, but it's not gonna happen.

00:16:45.839 --> 00:16:47.760
<v Speaker 0>What we really want to understand here

00:16:48.079 --> 00:16:51.200
<v Speaker 0>is metrics or aggregations always

00:16:51.835 --> 00:16:53.675
<v Speaker 0>events of the raw form,

00:16:53.995 --> 00:16:55.835
<v Speaker 0>and we have to make trade offs and

00:16:55.835 --> 00:16:58.235
<v Speaker 0>understandings of when to store which.

00:16:58.555 --> 00:17:00.075
<v Speaker 0>That will also be covered

00:17:00.475 --> 00:17:02.235
<v Speaker 0>either next week or the following week as

00:17:02.235 --> 00:17:03.835
<v Speaker 0>we dive into InfluxDB

00:17:03.835 --> 00:17:04.315
<v Speaker 0>more.

00:17:06.470 --> 00:17:07.109
<v Speaker 0>Okay.

00:17:07.430 --> 00:17:09.190
<v Speaker 0>So what is time series data?

00:17:09.750 --> 00:17:12.070
<v Speaker 0>Well, there are two different types of time

00:17:12.070 --> 00:17:13.910
<v Speaker 0>series data as I just kind of covered

00:17:13.910 --> 00:17:15.589
<v Speaker 0>in that log back there, but I really

00:17:15.589 --> 00:17:17.669
<v Speaker 0>wanna make sure that we understand the difference.

00:17:18.230 --> 00:17:21.349
<v Speaker 0>The regular time series, these are aggregated

00:17:22.195 --> 00:17:23.555
<v Speaker 0>events or metrics,

00:17:24.035 --> 00:17:26.355
<v Speaker 0>are predictable and evenly distributed.

00:17:26.915 --> 00:17:28.675
<v Speaker 0>Now what I mean by that is that

00:17:28.675 --> 00:17:30.675
<v Speaker 0>I should be able to get the value

00:17:30.675 --> 00:17:33.315
<v Speaker 0>for a metric at any given interval and

00:17:33.315 --> 00:17:34.675
<v Speaker 0>it should be consistently

00:17:34.675 --> 00:17:35.155
<v Speaker 0>available.

00:17:36.150 --> 00:17:38.630
<v Speaker 0>If we think about the CPU load average

00:17:38.630 --> 00:17:40.710
<v Speaker 0>of a Linux system, as I can request

00:17:40.710 --> 00:17:43.429
<v Speaker 0>that value from the kernel every one second,

00:17:43.430 --> 00:17:46.070
<v Speaker 0>every five seconds, every minute, entirely up to

00:17:46.070 --> 00:17:47.670
<v Speaker 0>me, but there will always be a value.

00:17:48.605 --> 00:17:51.165
<v Speaker 0>Much like the temperature, I can always use

00:17:51.165 --> 00:17:52.924
<v Speaker 0>the thermometer to get a temperature.

00:17:53.885 --> 00:17:56.365
<v Speaker 0>Every regular time series or the raw form

00:17:56.365 --> 00:17:58.924
<v Speaker 0>slash events are unpredictable

00:17:58.925 --> 00:18:00.285
<v Speaker 0>and very inconsistent.

00:18:01.220 --> 00:18:03.460
<v Speaker 0>An example here would be if I am

00:18:03.460 --> 00:18:06.340
<v Speaker 0>working on a ticketing system for a football

00:18:06.340 --> 00:18:08.660
<v Speaker 0>stadium, I don't know when the next person

00:18:08.660 --> 00:18:10.100
<v Speaker 0>is gonna scan their ticket,

00:18:10.980 --> 00:18:12.260
<v Speaker 0>but I can tell you how many people

00:18:12.260 --> 00:18:14.260
<v Speaker 0>are in the stadium through an aggregation of

00:18:14.260 --> 00:18:16.100
<v Speaker 0>the ticket scans over a certain window.

00:18:17.495 --> 00:18:19.334
<v Speaker 0>We'll dive into more,

00:18:20.375 --> 00:18:22.855
<v Speaker 0>and from probably here on end, will always

00:18:22.855 --> 00:18:25.095
<v Speaker 0>reference them as metrics and events rather than

00:18:25.095 --> 00:18:26.695
<v Speaker 0>regular and irregular

00:18:26.695 --> 00:18:28.855
<v Speaker 0>because it's the vocabulary that you're probably more

00:18:28.855 --> 00:18:30.294
<v Speaker 0>familiar with and that we all use every

00:18:30.294 --> 00:18:32.455
<v Speaker 0>day in the software and technology world.

00:18:36.110 --> 00:18:36.750
<v Speaker 0>Now,

00:18:36.990 --> 00:18:39.630
<v Speaker 0>good examples of metrics are CPUs. So you

00:18:39.630 --> 00:18:40.910
<v Speaker 0>know I cover this and I mention that

00:18:40.910 --> 00:18:42.590
<v Speaker 0>all the time because it's the one that

00:18:42.590 --> 00:18:44.990
<v Speaker 0>we're all really familiar with. Memory usage is

00:18:44.990 --> 00:18:46.910
<v Speaker 0>another one. I can always get a value

00:18:46.910 --> 00:18:48.510
<v Speaker 0>for how much memory is being consumed.

00:18:49.285 --> 00:18:50.885
<v Speaker 0>I can always get a ping time for

00:18:50.885 --> 00:18:51.685
<v Speaker 0>google.com

00:18:51.685 --> 00:18:54.965
<v Speaker 0>even if it's indefinite because it's not up.

00:18:55.445 --> 00:18:56.965
<v Speaker 0>And I can always get the number of

00:18:56.965 --> 00:18:59.205
<v Speaker 0>processes from a kernel as well.

00:18:59.685 --> 00:19:01.925
<v Speaker 0>So these are metrics. These are values that

00:19:01.925 --> 00:19:02.725
<v Speaker 0>change over time.

00:19:04.850 --> 00:19:07.409
<v Speaker 0>Great examples of events. You cannot predict when

00:19:07.409 --> 00:19:08.690
<v Speaker 0>a user is going to click the login

00:19:08.690 --> 00:19:11.010
<v Speaker 0>button no matter how hard you try. You

00:19:11.010 --> 00:19:12.929
<v Speaker 0>cannot predict when someone is going to get

00:19:12.929 --> 00:19:13.729
<v Speaker 0>their

00:19:13.890 --> 00:19:16.130
<v Speaker 0>password or username wrong to log into your

00:19:16.130 --> 00:19:16.690
<v Speaker 0>system.

00:19:17.169 --> 00:19:18.935
<v Speaker 0>You have no idea when an XCI build

00:19:18.935 --> 00:19:20.855
<v Speaker 0>is going be published and you definitely

00:19:20.855 --> 00:19:23.255
<v Speaker 0>have no idea when a network engineer is

00:19:23.255 --> 00:19:24.935
<v Speaker 0>going to trip over a rack and pull

00:19:24.935 --> 00:19:25.815
<v Speaker 0>out a cable.

00:19:26.295 --> 00:19:28.375
<v Speaker 0>Now, these are still important events and we

00:19:28.375 --> 00:19:29.735
<v Speaker 0>can build aggregated

00:19:29.735 --> 00:19:33.360
<v Speaker 0>metrics from it, but they are irregular and

00:19:33.360 --> 00:19:34.399
<v Speaker 0>unpredictable.

00:19:36.880 --> 00:19:38.880
<v Speaker 0>Now I'm not gonna sit on the screen

00:19:38.880 --> 00:19:40.640
<v Speaker 0>for too long, but I always like people

00:19:40.640 --> 00:19:42.880
<v Speaker 0>to really try and cement their knowledge of

00:19:42.880 --> 00:19:45.625
<v Speaker 0>what are metrics and what are events by

00:19:45.625 --> 00:19:47.864
<v Speaker 0>looking at a very common example.

00:19:48.025 --> 00:19:49.945
<v Speaker 0>If you're a sports fan, I don't even

00:19:49.945 --> 00:19:51.065
<v Speaker 0>watch football, I don't know why I keep

00:19:51.065 --> 00:19:52.664
<v Speaker 0>using this, but a lot of people do

00:19:52.664 --> 00:19:53.784
<v Speaker 0>watch football.

00:19:54.664 --> 00:19:56.664
<v Speaker 0>And just by looking at this, there are

00:19:56.664 --> 00:20:00.025
<v Speaker 0>so many examples of metrics and events just

00:20:00.025 --> 00:20:00.985
<v Speaker 0>in this screenshot.

00:20:02.240 --> 00:20:05.200
<v Speaker 0>So I'll pick a couple, but if you

00:20:05.200 --> 00:20:06.960
<v Speaker 0>want to try it yourself, feel free to

00:20:06.960 --> 00:20:08.320
<v Speaker 0>pause the video now

00:20:08.960 --> 00:20:10.399
<v Speaker 0>and see how many you can come up

00:20:10.399 --> 00:20:10.879
<v Speaker 0>with.

00:20:12.960 --> 00:20:13.519
<v Speaker 0>Now

00:20:13.885 --> 00:20:15.965
<v Speaker 0>the metrics that we have available to us,

00:20:15.965 --> 00:20:18.124
<v Speaker 0>we can kind of already see.

00:20:18.525 --> 00:20:20.924
<v Speaker 0>We have a score. Right? We can see

00:20:20.924 --> 00:20:23.565
<v Speaker 0>that Liverpool are beating Barcelona two nil, and

00:20:23.565 --> 00:20:25.485
<v Speaker 0>that is three two on aggregate. Those are

00:20:25.485 --> 00:20:26.525
<v Speaker 0>two different metrics.

00:20:27.210 --> 00:20:29.289
<v Speaker 0>But we also have the raw form of

00:20:29.289 --> 00:20:32.009
<v Speaker 0>that, the events that contributed to the score.

00:20:32.570 --> 00:20:34.169
<v Speaker 0>We can see that

00:20:34.730 --> 00:20:36.490
<v Speaker 0>those two players scored at seven minutes and

00:20:36.490 --> 00:20:38.570
<v Speaker 0>fifty four minutes, and that gives us an

00:20:38.570 --> 00:20:39.850
<v Speaker 0>aggregated score of two nil.

00:20:40.655 --> 00:20:42.895
<v Speaker 0>If we had well, I'm sure someone has

00:20:42.895 --> 00:20:44.255
<v Speaker 0>the event data, but we can also see

00:20:44.255 --> 00:20:45.695
<v Speaker 0>the other three goals are first one on

00:20:45.695 --> 00:20:47.375
<v Speaker 0>the first leg of the match. So those

00:20:47.375 --> 00:20:48.494
<v Speaker 0>are the events.

00:20:49.934 --> 00:20:52.255
<v Speaker 0>If there were any corners, freeze kicks, red

00:20:52.255 --> 00:20:54.815
<v Speaker 0>cards, yellow cards, those are more events that

00:20:54.815 --> 00:20:57.179
<v Speaker 0>happened in the game that could be tracked.

00:20:57.740 --> 00:20:59.420
<v Speaker 0>The number of people in the stadium is

00:20:59.420 --> 00:21:00.140
<v Speaker 0>a metric.

00:21:00.700 --> 00:21:02.780
<v Speaker 0>The events are the people scanning in and

00:21:02.780 --> 00:21:04.779
<v Speaker 0>out of the stadium and so forth.

00:21:05.020 --> 00:21:06.700
<v Speaker 0>But there's a lot of time series data

00:21:06.700 --> 00:21:09.580
<v Speaker 0>all around you, everywhere you go, every day

00:21:09.580 --> 00:21:11.894
<v Speaker 0>of life. Time series data cannot

00:21:13.174 --> 00:21:15.014
<v Speaker 0>unsee it when you know that it's there.

00:21:17.495 --> 00:21:20.215
<v Speaker 0>So again, think it's just super important all

00:21:20.215 --> 00:21:21.975
<v Speaker 0>metrics are aggregations of events

00:21:23.200 --> 00:21:25.200
<v Speaker 0>And it just that should hopefully help your

00:21:25.200 --> 00:21:27.360
<v Speaker 0>understanding of this as we move forward.

00:21:29.840 --> 00:21:31.680
<v Speaker 0>So the next thing that we want to

00:21:31.680 --> 00:21:33.520
<v Speaker 0>get comfortable with when we're doing this in

00:21:33.520 --> 00:21:36.400
<v Speaker 0>action on the next video is collecting

00:21:36.400 --> 00:21:37.440
<v Speaker 0>time series data.

00:21:37.915 --> 00:21:40.475
<v Speaker 0>Now you can do this through Prometheus exporters,

00:21:40.475 --> 00:21:42.235
<v Speaker 0>which you may be familiar with if you're

00:21:42.235 --> 00:21:43.674
<v Speaker 0>already working with Kubernetes,

00:21:43.755 --> 00:21:45.435
<v Speaker 0>or you can use a tool like Telegraph.

00:21:45.435 --> 00:21:47.915
<v Speaker 0>It's entirely up to you. They're all great.

00:21:47.915 --> 00:21:49.595
<v Speaker 0>They all do a wonderful job. It just

00:21:49.595 --> 00:21:50.875
<v Speaker 0>depends on where you're going to be storing

00:21:50.875 --> 00:21:51.115
<v Speaker 0>them.

00:21:52.430 --> 00:21:54.110
<v Speaker 0>Because this course is going to focus on

00:21:54.110 --> 00:21:54.910
<v Speaker 0>InfluxDB

00:21:54.910 --> 00:21:57.390
<v Speaker 0>two, we will be using Telegraph for the

00:21:57.390 --> 00:21:59.149
<v Speaker 0>majority of our metric collection.

00:22:00.910 --> 00:22:02.750
<v Speaker 0>Telegraph is a really cool tool because it

00:22:02.750 --> 00:22:06.670
<v Speaker 0>has inputs for almost everything. It's got

00:22:08.815 --> 00:22:11.294
<v Speaker 0>at least a few hundred input plugins

00:22:11.455 --> 00:22:13.535
<v Speaker 0>where it can read metrics

00:22:13.535 --> 00:22:16.735
<v Speaker 0>from, you know, Kafka, Kubernetes, Linux, Puppet, TLS

00:22:16.735 --> 00:22:18.895
<v Speaker 0>certificates is a really cool one. It has

00:22:18.895 --> 00:22:23.050
<v Speaker 0>remote support for HTTP endpoints, gRPC endpoints, etcetera.

00:22:23.050 --> 00:22:25.290
<v Speaker 0>It can write metrics to anywhere. Again, we'll

00:22:25.290 --> 00:22:27.770
<v Speaker 0>be using InfluxDB two for this course. And

00:22:27.770 --> 00:22:28.810
<v Speaker 0>from Prometheus,

00:22:28.810 --> 00:22:31.770
<v Speaker 0>there's always or generally always an exporter equivalent

00:22:31.770 --> 00:22:32.809
<v Speaker 0>to the plugin,

00:22:33.850 --> 00:22:36.410
<v Speaker 0>which always brings us to the wonderful debate,

00:22:37.095 --> 00:22:38.855
<v Speaker 0>push versus pull.

00:22:39.495 --> 00:22:40.134
<v Speaker 0>Now

00:22:40.375 --> 00:22:41.815
<v Speaker 0>for metrics,

00:22:42.135 --> 00:22:43.815
<v Speaker 0>pulling them is fine.

00:22:44.535 --> 00:22:46.614
<v Speaker 0>Why? Because they're always available.

00:22:47.015 --> 00:22:49.575
<v Speaker 0>They are consistently and predictably available. If I

00:22:49.575 --> 00:22:51.335
<v Speaker 0>want to pull metrics on a ten second,

00:22:51.335 --> 00:22:53.389
<v Speaker 0>twenty second, one minute, hour

00:22:53.950 --> 00:22:54.830
<v Speaker 0>basis,

00:22:55.150 --> 00:22:56.269
<v Speaker 0>then that works.

00:22:56.990 --> 00:22:58.830
<v Speaker 0>You cannot pull

00:22:58.830 --> 00:22:59.710
<v Speaker 0>events.

00:22:59.710 --> 00:23:02.110
<v Speaker 0>You cannot pull the raw form because they're

00:23:02.110 --> 00:23:03.549
<v Speaker 0>unpredictable.

00:23:04.429 --> 00:23:06.909
<v Speaker 0>So you actually need a combination of both,

00:23:07.144 --> 00:23:09.225
<v Speaker 0>which is why I always push people in

00:23:09.225 --> 00:23:13.065
<v Speaker 0>favor of tools like Telegraph because it can

00:23:13.065 --> 00:23:14.744
<v Speaker 0>handle both scenarios.

00:23:16.264 --> 00:23:19.144
<v Speaker 0>So you definitely need both. Understand that for

00:23:19.144 --> 00:23:21.384
<v Speaker 0>metrics, it's okay to pull, it's encouraged to

00:23:21.384 --> 00:23:21.705
<v Speaker 0>pull.

00:23:22.470 --> 00:23:25.030
<v Speaker 0>For events, you definitely need push based system

00:23:25.030 --> 00:23:26.629
<v Speaker 0>regardless of what you choose.

00:23:27.830 --> 00:23:29.750
<v Speaker 0>Now use cases for time series data, why

00:23:29.750 --> 00:23:31.429
<v Speaker 0>is this course going to be important to

00:23:31.429 --> 00:23:33.429
<v Speaker 0>you? Well, if you're coming from a cloud

00:23:33.429 --> 00:23:35.669
<v Speaker 0>native or Kubernetes background, you probably want to

00:23:35.669 --> 00:23:36.309
<v Speaker 0>do monitoring.

00:23:38.025 --> 00:23:41.145
<v Speaker 0>Infrastructure. You're probably writing applications. You're probably consuming

00:23:41.145 --> 00:23:42.424
<v Speaker 0>third party services.

00:23:42.665 --> 00:23:44.585
<v Speaker 0>You need to understand how well they're functioning

00:23:44.585 --> 00:23:47.545
<v Speaker 0>and where problems arise from good, strong root

00:23:47.545 --> 00:23:48.664
<v Speaker 0>cause analysis.

00:23:49.545 --> 00:23:51.870
<v Speaker 0>If you're into IoT and centrifugation of the

00:23:51.870 --> 00:23:53.790
<v Speaker 0>real world, then you maybe have too many

00:23:53.790 --> 00:23:56.590
<v Speaker 0>ZigBee, Raspberry Pis, and other devices around your

00:23:56.590 --> 00:23:58.990
<v Speaker 0>home, and you can do so much cool

00:23:58.990 --> 00:24:00.510
<v Speaker 0>stuff with all of the metrics that those

00:24:00.510 --> 00:24:02.350
<v Speaker 0>are meant day in and day out.

00:24:02.910 --> 00:24:04.430
<v Speaker 0>And if

00:24:04.755 --> 00:24:06.595
<v Speaker 0>you know, you have your own website, your

00:24:06.595 --> 00:24:08.995
<v Speaker 0>own blog, you track your Twitter performance, your

00:24:08.995 --> 00:24:11.635
<v Speaker 0>YouTube performance, things that are important to me,

00:24:11.795 --> 00:24:13.715
<v Speaker 0>then real time analytics from all of these

00:24:13.715 --> 00:24:16.195
<v Speaker 0>services provide really fantastic

00:24:16.515 --> 00:24:17.315
<v Speaker 0>time series data.

00:24:19.230 --> 00:24:21.070
<v Speaker 0>Okay. Now when it comes to the TSDBs

00:24:21.070 --> 00:24:23.390
<v Speaker 0>of choice, this course is focused on InfluxDB

00:24:23.390 --> 00:24:24.029
<v Speaker 0>two,

00:24:24.750 --> 00:24:26.669
<v Speaker 0>but there are others. But

00:24:27.150 --> 00:24:29.470
<v Speaker 0>the thing that I think is important for

00:24:29.470 --> 00:24:30.990
<v Speaker 0>right now is

00:24:31.515 --> 00:24:33.675
<v Speaker 0>a lot of people do sort their time

00:24:33.675 --> 00:24:35.755
<v Speaker 0>series data in general purpose databases.

00:24:35.995 --> 00:24:37.275
<v Speaker 0>And there are a few reasons that that's

00:24:37.275 --> 00:24:38.154
<v Speaker 0>not gonna work.

00:24:38.635 --> 00:24:41.515
<v Speaker 0>Firstly, time series data is generally high rate

00:24:41.515 --> 00:24:42.315
<v Speaker 0>frequency.

00:24:42.315 --> 00:24:44.875
<v Speaker 0>Right? Especially with IoT and sensorification.

00:24:45.180 --> 00:24:47.100
<v Speaker 0>Is that we are writing these

00:24:47.100 --> 00:24:48.620
<v Speaker 0>real world metrics

00:24:48.860 --> 00:24:49.820
<v Speaker 0>at

00:24:49.820 --> 00:24:50.780
<v Speaker 0>milliseconds,

00:24:50.780 --> 00:24:51.980
<v Speaker 0>sometimes nanosecond

00:24:51.980 --> 00:24:54.860
<v Speaker 0>frequencies or resolution, particularly with

00:24:56.540 --> 00:24:58.860
<v Speaker 0>high velocity, high frequency trading in the financial

00:24:58.860 --> 00:24:59.180
<v Speaker 0>market.

00:25:00.265 --> 00:25:02.185
<v Speaker 0>The way that we read data from a

00:25:02.185 --> 00:25:04.105
<v Speaker 0>time series data is also wildly different from

00:25:04.105 --> 00:25:07.065
<v Speaker 0>a general purpose database. We're generally scanning large

00:25:07.065 --> 00:25:09.705
<v Speaker 0>chunks of data over a particular time window,

00:25:10.185 --> 00:25:11.705
<v Speaker 0>so you really want a database that is

00:25:11.705 --> 00:25:12.825
<v Speaker 0>built for that purpose.

00:25:13.980 --> 00:25:15.900
<v Speaker 0>And then the last part of this session

00:25:15.900 --> 00:25:17.260
<v Speaker 0>today is going to be talking about the

00:25:17.260 --> 00:25:20.059
<v Speaker 0>value of time series data and time to

00:25:20.059 --> 00:25:22.860
<v Speaker 0>live and life cycle management and time sensitivity

00:25:22.860 --> 00:25:23.899
<v Speaker 0>of that data

00:25:24.140 --> 00:25:26.220
<v Speaker 0>is really, really important and something that you

00:25:26.220 --> 00:25:28.380
<v Speaker 0>wouldn't get through a general purpose database.

00:25:31.125 --> 00:25:31.685
<v Speaker 0>So,

00:25:32.245 --> 00:25:32.645
<v Speaker 0>again,

00:25:33.205 --> 00:25:35.205
<v Speaker 0>why is this course important? Well, we take

00:25:35.205 --> 00:25:37.365
<v Speaker 0>a look at the trend over the last,

00:25:37.365 --> 00:25:39.445
<v Speaker 0>I think, twenty four months. In fact, that

00:25:39.445 --> 00:25:41.125
<v Speaker 0>was this is last year's graph. I really

00:25:41.125 --> 00:25:41.845
<v Speaker 0>need to update this.

00:25:42.840 --> 00:25:44.679
<v Speaker 0>We can see that time series databases are

00:25:44.679 --> 00:25:46.999
<v Speaker 0>the fastest growing database category.

00:25:47.159 --> 00:25:49.799
<v Speaker 0>And that's because of this migration to cloud

00:25:49.799 --> 00:25:51.559
<v Speaker 0>native and Kubernetes.

00:25:51.799 --> 00:25:54.200
<v Speaker 0>As we build more and more distributed systems,

00:25:54.200 --> 00:25:55.799
<v Speaker 0>we need the tools, the knowledge and the

00:25:55.799 --> 00:25:58.360
<v Speaker 0>understanding to be able to operate them efficiently.

00:25:58.975 --> 00:26:00.734
<v Speaker 0>Time series databases do that.

00:26:02.575 --> 00:26:04.734
<v Speaker 0>Now, there was a really cool

00:26:05.294 --> 00:26:07.375
<v Speaker 0>poll that was done by the news stack

00:26:07.375 --> 00:26:09.375
<v Speaker 0>that was asking, do you store your time

00:26:09.375 --> 00:26:11.054
<v Speaker 0>series data in a time series database?

00:26:11.899 --> 00:26:14.619
<v Speaker 0>And only 12% of those people said yes.

00:26:15.740 --> 00:26:17.500
<v Speaker 0>So I'm here to see if that is

00:26:17.500 --> 00:26:19.019
<v Speaker 0>true. And if not, I want to show

00:26:19.019 --> 00:26:20.779
<v Speaker 0>you the truth. Plus, I just really like

00:26:20.779 --> 00:26:21.739
<v Speaker 0>Rick and Morty.

00:26:22.620 --> 00:26:25.820
<v Speaker 0>Now, you're probably all familiar with New Relic.

00:26:26.195 --> 00:26:27.554
<v Speaker 0>It's expensive,

00:26:27.635 --> 00:26:30.034
<v Speaker 0>so if you work for a larger organisations,

00:26:30.035 --> 00:26:31.795
<v Speaker 0>you may be familiar with it, otherwise you

00:26:31.795 --> 00:26:33.554
<v Speaker 0>may not. And if you're not in a

00:26:33.554 --> 00:26:35.795
<v Speaker 0>large organisation, you're probably more familiar with Datadog

00:26:35.795 --> 00:26:36.274
<v Speaker 0>and

00:26:37.075 --> 00:26:38.995
<v Speaker 0>even to some degree, Google Analytics.

00:26:39.730 --> 00:26:41.649
<v Speaker 0>These are all time to use databases as

00:26:41.649 --> 00:26:43.009
<v Speaker 0>well. Sometimes

00:26:43.009 --> 00:26:44.529
<v Speaker 0>we don't really think of them in that

00:26:44.529 --> 00:26:46.769
<v Speaker 0>way, but they are tracking metrics and events

00:26:46.769 --> 00:26:49.249
<v Speaker 0>that change or happen over time.

00:26:50.210 --> 00:26:52.049
<v Speaker 0>So I'm not entirely sure that the NewsDesk

00:26:52.049 --> 00:26:53.970
<v Speaker 0>survey took that into account, and I don't

00:26:53.970 --> 00:26:56.184
<v Speaker 0>think it's I think more than 12 people

00:26:56.505 --> 00:26:58.745
<v Speaker 0>more 12 12 people. I think more than

00:26:58.745 --> 00:27:00.825
<v Speaker 0>12% of people are using time series databases

00:27:00.825 --> 00:27:02.264
<v Speaker 0>for their time series data.

00:27:02.985 --> 00:27:05.385
<v Speaker 0>Here's a question I threw on Twitter a

00:27:05.385 --> 00:27:08.024
<v Speaker 0>long time ago, but still has resonated and

00:27:08.024 --> 00:27:10.889
<v Speaker 0>stuck with me ever since. But I asked,

00:27:11.130 --> 00:27:12.970
<v Speaker 0>you know, I run Kubernetes in production and

00:27:12.970 --> 00:27:14.249
<v Speaker 0>I monitor it with.

00:27:15.130 --> 00:27:18.169
<v Speaker 0>And there's like a thousand responses to this.

00:27:18.490 --> 00:27:19.690
<v Speaker 0>And 74%

00:27:19.690 --> 00:27:21.850
<v Speaker 0>of people said Prometheus, which I thought was

00:27:21.850 --> 00:27:24.005
<v Speaker 0>great. 3% used in FluxDB.

00:27:24.005 --> 00:27:25.445
<v Speaker 0>Yep. That's all good too.

00:27:25.765 --> 00:27:28.005
<v Speaker 0>There was some new relic and Datadogs, but

00:27:28.005 --> 00:27:28.885
<v Speaker 0>13%

00:27:28.885 --> 00:27:30.404
<v Speaker 0>of these people said nothing.

00:27:32.405 --> 00:27:33.365
<v Speaker 0>13%

00:27:33.365 --> 00:27:35.525
<v Speaker 0>of people are not monitoring their Kubernetes.

00:27:36.540 --> 00:27:37.980
<v Speaker 0>That is really scary.

00:27:38.460 --> 00:27:40.300
<v Speaker 0>So I hope if you're in that 13%,

00:27:40.300 --> 00:27:41.580
<v Speaker 0>you're watching this course,

00:27:41.740 --> 00:27:43.980
<v Speaker 0>and you're gonna learn how to monitor Kubernetes

00:27:43.980 --> 00:27:46.780
<v Speaker 0>with InfluxDB two. That is our goal. That

00:27:46.780 --> 00:27:48.780
<v Speaker 0>is one of the end achievements of this

00:27:48.780 --> 00:27:51.375
<v Speaker 0>course, is you will have pitch perfect monitoring

00:27:51.375 --> 00:27:52.975
<v Speaker 0>of your Kubernetes system.

00:27:54.415 --> 00:27:56.015
<v Speaker 0>Okay. So it's not too late. Let's take

00:27:56.015 --> 00:27:57.375
<v Speaker 0>a look at InfluxDB.

00:27:57.375 --> 00:27:59.615
<v Speaker 0>Now, none of this is unique to InfluxDB.

00:27:59.615 --> 00:28:02.895
<v Speaker 0>This time series introduction thing will probably be

00:28:02.895 --> 00:28:04.735
<v Speaker 0>the same introduction to time series that I

00:28:04.735 --> 00:28:07.410
<v Speaker 0>give as there is a Prometheus course down

00:28:07.410 --> 00:28:08.049
<v Speaker 0>the line.

00:28:08.290 --> 00:28:09.809
<v Speaker 0>So this is widely

00:28:10.690 --> 00:28:13.649
<v Speaker 0>translatable to any time series database. So please,

00:28:13.650 --> 00:28:15.650
<v Speaker 0>even if you're not that interested in using

00:28:15.650 --> 00:28:17.570
<v Speaker 0>InfluxDB, you want to use Prometheus or you

00:28:17.570 --> 00:28:19.330
<v Speaker 0>want to use M3 or you want to

00:28:19.330 --> 00:28:20.130
<v Speaker 0>use Thanos,

00:28:20.855 --> 00:28:23.335
<v Speaker 0>all of this is still completely relevant, at

00:28:23.335 --> 00:28:25.414
<v Speaker 0>least this one particular episode.

00:28:26.615 --> 00:28:28.375
<v Speaker 0>So as far as the introductions go, it's

00:28:28.375 --> 00:28:30.775
<v Speaker 0>a time series database. It is completely open

00:28:30.775 --> 00:28:33.255
<v Speaker 0>source. They're currently under second version

00:28:33.690 --> 00:28:35.929
<v Speaker 0>and FluxDB can set itself full stack and

00:28:35.929 --> 00:28:38.649
<v Speaker 0>it has a UI, it has a stream

00:28:38.889 --> 00:28:40.730
<v Speaker 0>ability to work on the stream of data

00:28:40.730 --> 00:28:42.169
<v Speaker 0>and a whole bunch of other things.

00:28:43.450 --> 00:28:46.250
<v Speaker 0>The vocabulary when working with time series data

00:28:46.250 --> 00:28:48.725
<v Speaker 0>is typically that we talk about points. So

00:28:48.725 --> 00:28:51.285
<v Speaker 0>at any point in time this

00:28:52.005 --> 00:28:53.365
<v Speaker 0>being context

00:28:53.605 --> 00:28:55.044
<v Speaker 0>was value n.

00:28:56.085 --> 00:28:57.445
<v Speaker 0>And if we look at an example of

00:28:57.445 --> 00:28:59.045
<v Speaker 0>this, then we can see that the load

00:28:59.045 --> 00:29:01.205
<v Speaker 0>average on the machine VM1

00:29:01.850 --> 00:29:02.650
<v Speaker 0>was

00:29:02.730 --> 00:29:03.690
<v Speaker 0>6.32

00:29:03.690 --> 00:29:04.809
<v Speaker 0>at one minutes.

00:29:05.770 --> 00:29:07.050
<v Speaker 0>As you know, if we're talking about load

00:29:07.050 --> 00:29:08.730
<v Speaker 0>average, it would be 1.515.

00:29:08.970 --> 00:29:10.890
<v Speaker 0>Eight point two on five and nine point

00:29:10.890 --> 00:29:12.169
<v Speaker 0>five five on 15.

00:29:12.490 --> 00:29:14.890
<v Speaker 0>We also have a timestamp in orange. We

00:29:14.890 --> 00:29:16.570
<v Speaker 0>have to track the time this value was

00:29:16.570 --> 00:29:18.865
<v Speaker 0>recorded otherwise not time series data.

00:29:19.585 --> 00:29:21.985
<v Speaker 0>And as far as InfluxDB is concerned,

00:29:22.465 --> 00:29:24.065
<v Speaker 0>values are fields

00:29:24.225 --> 00:29:25.664
<v Speaker 0>and the context,

00:29:25.665 --> 00:29:27.985
<v Speaker 0>the tags, the series is the bit on

00:29:27.985 --> 00:29:28.625
<v Speaker 0>green.

00:29:29.025 --> 00:29:31.345
<v Speaker 0>Typically we would call the load to be

00:29:31.345 --> 00:29:33.960
<v Speaker 0>the measurement, host would be a tag key,

00:29:33.960 --> 00:29:35.799
<v Speaker 0>and VM one would be a tag value,

00:29:36.040 --> 00:29:37.720
<v Speaker 0>and we break that down here too.

00:29:38.280 --> 00:29:40.440
<v Speaker 0>So we have the name or the measurement

00:29:40.440 --> 00:29:42.120
<v Speaker 0>name at least in yellow,

00:29:42.360 --> 00:29:45.320
<v Speaker 0>tag keys in green, and tag values in

00:29:45.320 --> 00:29:45.640
<v Speaker 0>blue.

00:29:46.445 --> 00:29:49.405
<v Speaker 0>Now tags are indexed, so it's really important

00:29:49.405 --> 00:29:51.165
<v Speaker 0>to make sure you get that distinction as

00:29:51.165 --> 00:29:52.124
<v Speaker 0>correct

00:29:52.365 --> 00:29:54.525
<v Speaker 0>as soon as possible when you start storing

00:29:54.525 --> 00:29:55.884
<v Speaker 0>your time series data.

00:29:57.165 --> 00:30:00.125
<v Speaker 0>Here's another example where we could see that

00:30:00.125 --> 00:30:02.650
<v Speaker 0>the series changes. Even though the market is

00:30:02.650 --> 00:30:05.690
<v Speaker 0>the same, the ticker is different. The series

00:30:05.690 --> 00:30:08.330
<v Speaker 0>is actually a triple of the measurement name

00:30:08.330 --> 00:30:10.570
<v Speaker 0>and the tag keys and the tag values,

00:30:10.570 --> 00:30:11.850
<v Speaker 0>and that's important too,

00:30:12.170 --> 00:30:12.730
<v Speaker 0>especially

00:30:12.970 --> 00:30:14.170
<v Speaker 0>in around

00:30:14.235 --> 00:30:16.155
<v Speaker 0>We'll touch on a little bit next week,

00:30:16.155 --> 00:30:17.674
<v Speaker 0>but more so the following week when we

00:30:17.674 --> 00:30:19.434
<v Speaker 0>start to really understand how to use Flux

00:30:19.434 --> 00:30:20.315
<v Speaker 0>to query

00:30:20.475 --> 00:30:23.434
<v Speaker 0>and build dashboards with this time series data,

00:30:23.515 --> 00:30:26.395
<v Speaker 0>understanding what a series is particularly

00:30:26.395 --> 00:30:27.115
<v Speaker 0>important.

00:30:29.600 --> 00:30:31.280
<v Speaker 0>Now, when you're trying to decide what to

00:30:31.280 --> 00:30:32.960
<v Speaker 0>do with your time series data, what to

00:30:32.960 --> 00:30:35.120
<v Speaker 0>store as tags and fields, remember tags are

00:30:35.120 --> 00:30:37.760
<v Speaker 0>indexed and always strings because of that constraint,

00:30:37.760 --> 00:30:39.919
<v Speaker 0>whereas fields are not indexed and you can

00:30:39.919 --> 00:30:41.440
<v Speaker 0>use multiple data types.

00:30:43.434 --> 00:30:44.154
<v Speaker 0>Now

00:30:44.875 --> 00:30:47.514
<v Speaker 0>I think the value of series is the

00:30:47.514 --> 00:30:50.715
<v Speaker 0>most important part of today's session. Yes, everything

00:30:50.715 --> 00:30:52.554
<v Speaker 0>we've covered so far from the fun to

00:30:52.554 --> 00:30:53.114
<v Speaker 0>the

00:30:53.434 --> 00:30:57.309
<v Speaker 0>intricacies of time series is hopefully really relevant

00:30:57.309 --> 00:30:58.669
<v Speaker 0>and I hope you enjoy it. But I

00:30:58.669 --> 00:31:00.029
<v Speaker 0>think this part here

00:31:00.429 --> 00:31:03.870
<v Speaker 0>is super important to understand because as

00:31:03.870 --> 00:31:06.990
<v Speaker 0>you come from your development engineering, the SAP

00:31:06.990 --> 00:31:07.870
<v Speaker 0>background,

00:31:07.870 --> 00:31:09.470
<v Speaker 0>and if you haven't worked with time series

00:31:09.470 --> 00:31:11.575
<v Speaker 0>before, you may fall into the trap of

00:31:11.575 --> 00:31:13.655
<v Speaker 0>storing a data forever, and it's really important

00:31:13.655 --> 00:31:15.815
<v Speaker 0>that you don't do that because it's really

00:31:15.815 --> 00:31:16.534
<v Speaker 0>expensive.

00:31:16.775 --> 00:31:19.975
<v Speaker 0>Very, very, very, very, very expensive.

00:31:21.975 --> 00:31:23.895
<v Speaker 0>Maybe my cursor back. There we go.

00:31:25.700 --> 00:31:27.540
<v Speaker 0>So when we talk about time series data,

00:31:27.540 --> 00:31:29.860
<v Speaker 0>we'll talk about frequency and resolution.

00:31:30.820 --> 00:31:33.540
<v Speaker 0>Language is interchangeable almost, but I prefer to

00:31:33.540 --> 00:31:34.020
<v Speaker 0>use

00:31:35.780 --> 00:31:37.060
<v Speaker 0>high and low resolution.

00:31:37.755 --> 00:31:39.675
<v Speaker 0>When we talk about resolution, we're talking about

00:31:39.675 --> 00:31:42.475
<v Speaker 0>the interval, that predictable interval of the metrics

00:31:42.475 --> 00:31:44.875
<v Speaker 0>and how often we collect that data.

00:31:45.355 --> 00:31:47.515
<v Speaker 0>So a ten second resolution means we collect

00:31:47.515 --> 00:31:51.035
<v Speaker 0>the values every ten seconds. Ten nanosecond resolutions,

00:31:51.035 --> 00:31:52.955
<v Speaker 0>then we collect that every ten nanoseconds and

00:31:52.955 --> 00:31:55.779
<v Speaker 0>so forth. A one error resolution is a

00:31:55.779 --> 00:31:59.299
<v Speaker 0>lower resolution than ten seconds, which is higher

00:31:59.299 --> 00:32:02.739
<v Speaker 0>resolution because we collect the value more frequently.

00:32:05.299 --> 00:32:06.019
<v Speaker 0>The

00:32:06.100 --> 00:32:08.340
<v Speaker 0>value of the time series data that we

00:32:08.340 --> 00:32:10.565
<v Speaker 0>collect is directly correlated

00:32:10.565 --> 00:32:13.205
<v Speaker 0>with the resolution that the data is available

00:32:13.205 --> 00:32:14.244
<v Speaker 0>or collected.

00:32:15.605 --> 00:32:16.324
<v Speaker 0>Meaning,

00:32:17.845 --> 00:32:18.724
<v Speaker 0>storing

00:32:19.524 --> 00:32:21.924
<v Speaker 0>time series data at ten second resolution

00:32:21.810 --> 00:32:24.690
<v Speaker 0>is potentially or definitely more valuable to you

00:32:24.690 --> 00:32:26.690
<v Speaker 0>than collecting it at an hour because

00:32:27.250 --> 00:32:27.970
<v Speaker 0>you

00:32:28.050 --> 00:32:30.930
<v Speaker 0>will have much finer understanding

00:32:30.930 --> 00:32:33.410
<v Speaker 0>of those values changing over time to be

00:32:33.410 --> 00:32:35.170
<v Speaker 0>able to do predictive analytics,

00:32:35.625 --> 00:32:37.785
<v Speaker 0>anomaly detection, and a whole bunch of other

00:32:37.785 --> 00:32:39.705
<v Speaker 0>things on it. If you only collect the

00:32:39.705 --> 00:32:42.184
<v Speaker 0>value every hour or even like every day,

00:32:42.585 --> 00:32:44.265
<v Speaker 0>it's not as valuable to you anymore. Think

00:32:44.265 --> 00:32:46.585
<v Speaker 0>about the weather patterns and your region.

00:32:47.225 --> 00:32:49.225
<v Speaker 0>If you check the value every day at

00:32:49.225 --> 00:32:52.360
<v Speaker 0>noon and see that it's 25 degrees Celsius,

00:32:52.840 --> 00:32:54.920
<v Speaker 0>it doesn't tell you anything else about that

00:32:54.920 --> 00:32:55.559
<v Speaker 0>day.

00:32:56.120 --> 00:32:58.279
<v Speaker 0>If you click the temperature

00:32:58.920 --> 00:32:59.720
<v Speaker 0>every

00:33:00.200 --> 00:33:02.200
<v Speaker 0>ten minutes, every fifteen minutes,

00:33:02.520 --> 00:33:04.760
<v Speaker 0>you then have a much better picture

00:33:04.975 --> 00:33:07.695
<v Speaker 0>of the daily cadence or

00:33:08.654 --> 00:33:10.654
<v Speaker 0>patterns of that temperature

00:33:10.815 --> 00:33:12.815
<v Speaker 0>over months, years,

00:33:12.894 --> 00:33:13.695
<v Speaker 0>decades,

00:33:13.695 --> 00:33:14.174
<v Speaker 0>and centuries.

00:33:18.220 --> 00:33:20.620
<v Speaker 0>So the cost of time series data is

00:33:20.620 --> 00:33:22.539
<v Speaker 0>installing that resolution.

00:33:23.419 --> 00:33:25.100
<v Speaker 0>I'm going to do this through example. Let

00:33:25.100 --> 00:33:26.459
<v Speaker 0>me drag my face again.

00:33:28.059 --> 00:33:28.779
<v Speaker 0>So

00:33:28.860 --> 00:33:29.500
<v Speaker 0>cursor,

00:33:30.965 --> 00:33:33.044
<v Speaker 0>very professional this course.

00:33:34.245 --> 00:33:36.005
<v Speaker 0>So here's an example. We're gonna use load

00:33:36.005 --> 00:33:38.085
<v Speaker 0>averages. I'm hoping that you're all familiar with

00:33:38.085 --> 00:33:40.165
<v Speaker 0>this. Over here we have a machine,

00:33:40.165 --> 00:33:42.085
<v Speaker 0>we have a single tag, machine equals ABC

00:33:42.085 --> 00:33:44.165
<v Speaker 0>one. We're collecting the CPU measurement.

00:33:44.880 --> 00:33:46.240
<v Speaker 0>Not gonna call it load average, we're not

00:33:46.240 --> 00:33:47.760
<v Speaker 0>gonna do one, five, and 15, we're just

00:33:47.760 --> 00:33:50.560
<v Speaker 0>doing single, single usage for now, and then

00:33:50.560 --> 00:33:51.600
<v Speaker 0>we have a timestamp.

00:33:52.800 --> 00:33:55.760
<v Speaker 0>Now for us to monitor this machine with

00:33:55.760 --> 00:33:57.600
<v Speaker 0>a single measurement, the CPU,

00:33:57.985 --> 00:34:00.705
<v Speaker 0>one series, which means one machine, at one

00:34:00.705 --> 00:34:03.825
<v Speaker 0>second resolution, which means collecting a CPU value

00:34:03.825 --> 00:34:05.104
<v Speaker 0>every one second,

00:34:05.345 --> 00:34:07.264
<v Speaker 0>that is 86,400

00:34:07.264 --> 00:34:08.465
<v Speaker 0>points per day.

00:34:09.984 --> 00:34:11.425
<v Speaker 0>Now

00:34:10.869 --> 00:34:12.710
<v Speaker 0>as we run through this scenario,

00:34:12.869 --> 00:34:14.390
<v Speaker 0>please, please try

00:34:14.710 --> 00:34:17.190
<v Speaker 0>and think about using a general purpose database,

00:34:17.190 --> 00:34:19.989
<v Speaker 0>your database of choice, whether it be MariaDB,

00:34:19.989 --> 00:34:22.949
<v Speaker 0>Postgres, MongoDB, Cassandra, whatever, and try to think

00:34:22.949 --> 00:34:25.635
<v Speaker 0>about how the burden or the tax you

00:34:25.635 --> 00:34:27.235
<v Speaker 0>would have to pay to store these values.

00:34:27.235 --> 00:34:28.675
<v Speaker 0>So 86,400

00:34:28.675 --> 00:34:31.315
<v Speaker 0>probably doesn't make you uncomfortable. You're probably okay

00:34:31.315 --> 00:34:32.675
<v Speaker 0>with that every day.

00:34:34.114 --> 00:34:35.555
<v Speaker 0>Now if we have two machines on our

00:34:35.555 --> 00:34:37.555
<v Speaker 0>infrastructure, because it's unlikely we have one machine,

00:34:37.860 --> 00:34:39.620
<v Speaker 0>so we have two CDs, we've still got

00:34:39.620 --> 00:34:41.620
<v Speaker 0>one measurement, we're only tracking the CPU, and

00:34:41.620 --> 00:34:43.460
<v Speaker 0>we're still doing one second resolution,

00:34:43.700 --> 00:34:46.660
<v Speaker 0>we double that value to a 72,800

00:34:46.660 --> 00:34:47.620
<v Speaker 0>points per day.

00:34:48.100 --> 00:34:50.580
<v Speaker 0>We're probably still okay with this regardless

00:34:50.580 --> 00:34:51.780
<v Speaker 0>of which database you're using.

00:34:53.755 --> 00:34:54.475
<v Speaker 0>Okay.

00:34:56.554 --> 00:34:58.315
<v Speaker 0>Let's assume we have 10 machines,

00:34:58.715 --> 00:35:01.355
<v Speaker 0>still one second resolution, only this time

00:35:02.235 --> 00:35:03.915
<v Speaker 0>we're a bit smarter. We know we don't

00:35:03.915 --> 00:35:04.235
<v Speaker 0>just

00:35:05.195 --> 00:35:07.115
<v Speaker 0>know that we're not just worried about the

00:35:07.115 --> 00:35:09.115
<v Speaker 0>CPU

00:35:08.210 --> 00:35:10.930
<v Speaker 0>of our machine. We're worried about the memory,

00:35:11.329 --> 00:35:13.250
<v Speaker 0>and we care about desks, and we care

00:35:13.250 --> 00:35:14.130
<v Speaker 0>about network,

00:35:14.450 --> 00:35:16.290
<v Speaker 0>and maybe there's something else on there.

00:35:16.849 --> 00:35:18.130
<v Speaker 0>But five measurements.

00:35:18.769 --> 00:35:20.369
<v Speaker 0>We're now at a much larger number

00:35:20.664 --> 00:35:22.825
<v Speaker 0>because we've got 10 machines and five measurements

00:35:22.825 --> 00:35:24.345
<v Speaker 0>at one second resolution.

00:35:24.904 --> 00:35:27.704
<v Speaker 0>So we're now tracking millions of points

00:35:28.664 --> 00:35:29.464
<v Speaker 0>per day.

00:35:30.744 --> 00:35:31.385
<v Speaker 0>And,

00:35:31.625 --> 00:35:33.065
<v Speaker 0>you know, infrastructure

00:35:33.065 --> 00:35:36.160
<v Speaker 0>is not typically 10 machines. Right? We probably

00:35:36.160 --> 00:35:37.600
<v Speaker 0>have a lot more than that, especially for

00:35:37.600 --> 00:35:39.520
<v Speaker 0>production. And we definitely have a lot more

00:35:39.520 --> 00:35:41.600
<v Speaker 0>than five measurements. We're not just tracking five

00:35:41.600 --> 00:35:44.400
<v Speaker 0>superficial metrics from a Linux host. Our applications

00:35:44.400 --> 00:35:45.840
<v Speaker 0>are met hundreds,

00:35:45.840 --> 00:35:47.040
<v Speaker 0>if not thousands of metrics.

00:35:48.894 --> 00:35:50.654
<v Speaker 0>But I don't know what your infrastructure looks

00:35:50.654 --> 00:35:52.894
<v Speaker 0>like, so I'm gonna use the Nasdaq as

00:35:52.894 --> 00:35:55.454
<v Speaker 0>an example instead. And we're just gonna track

00:35:55.454 --> 00:35:57.934
<v Speaker 0>one measurement, which is the cost or price,

00:35:57.934 --> 00:35:59.775
<v Speaker 0>the share price of a ticker

00:35:59.775 --> 00:36:04.015
<v Speaker 0>on the Nasdaq. The Nasdaq has 3,300

00:36:03.170 --> 00:36:04.370
<v Speaker 0>roughly companies,

00:36:04.770 --> 00:36:07.730
<v Speaker 0>and we're gonna do one millisecond resolution.

00:36:08.130 --> 00:36:10.930
<v Speaker 0>Because, you know, financial trading, we need these

00:36:10.930 --> 00:36:11.570
<v Speaker 0>values.

00:36:11.810 --> 00:36:13.570
<v Speaker 0>But look at that number. And that's I

00:36:13.570 --> 00:36:14.850
<v Speaker 0>I don't even know what that number is.

00:36:14.850 --> 00:36:15.970
<v Speaker 0>I'm not gonna try to guess. Let's just

00:36:15.970 --> 00:36:18.525
<v Speaker 0>say billions. That is definitely billions, but points

00:36:18.525 --> 00:36:21.085
<v Speaker 0>per day. Imagine storing this in your database

00:36:21.085 --> 00:36:21.885
<v Speaker 0>of choice.

00:36:22.125 --> 00:36:24.045
<v Speaker 0>But if that time series database,

00:36:24.605 --> 00:36:25.244
<v Speaker 0>yes,

00:36:25.405 --> 00:36:26.445
<v Speaker 0>it's a lot,

00:36:27.005 --> 00:36:28.125
<v Speaker 0>but it's manageable.

00:36:28.444 --> 00:36:29.725
<v Speaker 0>It's definitely doable

00:36:29.805 --> 00:36:33.030
<v Speaker 0>because time series databases are built to handle

00:36:33.030 --> 00:36:35.110
<v Speaker 0>this particular use case.

00:36:36.550 --> 00:36:38.390
<v Speaker 0>Now if we drop the resolution,

00:36:38.710 --> 00:36:40.390
<v Speaker 0>and this is the most important part now

00:36:40.390 --> 00:36:42.950
<v Speaker 0>is that we're talking about resolution change in

00:36:42.950 --> 00:36:43.910
<v Speaker 0>time series data.

00:36:44.405 --> 00:36:46.565
<v Speaker 0>So we've went from one millisecond to one

00:36:46.565 --> 00:36:47.285
<v Speaker 0>minute.

00:36:47.925 --> 00:36:50.244
<v Speaker 0>We're down to a very manageable number of

00:36:50.244 --> 00:36:51.285
<v Speaker 0>4,000,000 again.

00:36:51.685 --> 00:36:53.365
<v Speaker 0>And if we drop it again to one

00:36:53.365 --> 00:36:54.005
<v Speaker 0>hour,

00:36:54.244 --> 00:36:56.244
<v Speaker 0>we're into the thousands and we're looking at

00:36:56.244 --> 00:36:59.365
<v Speaker 0>this and we're comfortable regardless of database, restoring

00:36:59.365 --> 00:37:00.165
<v Speaker 0>this value again.

00:37:00.750 --> 00:37:03.790
<v Speaker 0>And that's concept of changing the resolution of

00:37:03.790 --> 00:37:06.910
<v Speaker 0>data is super important in time series.

00:37:07.070 --> 00:37:08.750
<v Speaker 0>At six hour resolution,

00:37:08.830 --> 00:37:10.910
<v Speaker 0>we could store this in any database.

00:37:11.230 --> 00:37:12.430
<v Speaker 0>We're

00:37:12.430 --> 00:37:14.590
<v Speaker 0>not gonna be worried about 13,000 points per

00:37:14.590 --> 00:37:14.750
<v Speaker 0>day.

00:37:16.494 --> 00:37:18.495
<v Speaker 0>Here's my wonderful diagram

00:37:18.655 --> 00:37:20.175
<v Speaker 0>trying to understand

00:37:20.255 --> 00:37:22.494
<v Speaker 0>and explain to you the value of time

00:37:22.494 --> 00:37:25.615
<v Speaker 0>series data. And I drew this myself, shocker,

00:37:26.015 --> 00:37:28.494
<v Speaker 0>very, very cool. Now what we have is

00:37:29.559 --> 00:37:31.560
<v Speaker 0>that for a certain point in time,

00:37:31.880 --> 00:37:33.880
<v Speaker 0>data at a ten second resolution

00:37:34.680 --> 00:37:36.360
<v Speaker 0>has value x.

00:37:37.800 --> 00:37:40.040
<v Speaker 0>However, there's a certain point in time

00:37:41.045 --> 00:37:43.285
<v Speaker 0>and who knows what that is, right? It's

00:37:43.285 --> 00:37:45.125
<v Speaker 0>very specific to the types of data you're

00:37:45.125 --> 00:37:46.805
<v Speaker 0>working with, and as we work through this

00:37:46.805 --> 00:37:49.125
<v Speaker 0>course, we will spend a lot of time

00:37:49.125 --> 00:37:50.725
<v Speaker 0>talking about the value of the metrics that

00:37:50.725 --> 00:37:52.805
<v Speaker 0>we collect. But for now, we're gonna keep

00:37:52.805 --> 00:37:53.445
<v Speaker 0>it superficial.

00:37:54.180 --> 00:37:55.940
<v Speaker 0>But this value, the value of this data

00:37:55.940 --> 00:37:58.099
<v Speaker 0>at ten second resolution is important until a

00:37:58.099 --> 00:38:00.020
<v Speaker 0>certain point when it isn't.

00:38:01.059 --> 00:38:01.700
<v Speaker 0>Now

00:38:02.020 --> 00:38:04.980
<v Speaker 0>there's normally a rather large cliff, whereas the

00:38:05.140 --> 00:38:06.180
<v Speaker 0>value just drops

00:38:06.515 --> 00:38:07.875
<v Speaker 0>and then it's valuable

00:38:08.675 --> 00:38:09.955
<v Speaker 0>for a little bit more time and drops

00:38:09.955 --> 00:38:11.075
<v Speaker 0>and then valuable for a little bit more

00:38:11.075 --> 00:38:12.995
<v Speaker 0>time and drops and valuable and so forth.

00:38:12.995 --> 00:38:14.915
<v Speaker 0>Until the data is just not viable at

00:38:14.915 --> 00:38:15.635
<v Speaker 0>all anymore.

00:38:15.875 --> 00:38:17.395
<v Speaker 0>And one of the things that we really

00:38:17.395 --> 00:38:19.795
<v Speaker 0>need to get good at and understand as

00:38:19.795 --> 00:38:22.260
<v Speaker 0>we store more and more metrics and raw

00:38:22.260 --> 00:38:24.100
<v Speaker 0>events and times of each data enter our

00:38:24.100 --> 00:38:24.740
<v Speaker 0>system

00:38:25.700 --> 00:38:27.780
<v Speaker 0>is being able to understand that if we

00:38:27.780 --> 00:38:29.060
<v Speaker 0>lower the resolution,

00:38:29.300 --> 00:38:31.460
<v Speaker 0>we minimize the drop in value.

00:38:31.620 --> 00:38:33.460
<v Speaker 0>The value of the data is gonna be

00:38:33.460 --> 00:38:34.020
<v Speaker 0>continually,

00:38:35.595 --> 00:38:38.155
<v Speaker 0>the value versus the resolution of the data

00:38:38.155 --> 00:38:39.755
<v Speaker 0>is gonna continue to be

00:38:40.395 --> 00:38:42.795
<v Speaker 0>It's gonna be valuable for longer. Wow.

00:38:43.995 --> 00:38:46.075
<v Speaker 0>So if we can actually take that those

00:38:46.075 --> 00:38:47.995
<v Speaker 0>values that we store at ten second resolution,

00:38:48.030 --> 00:38:50.830
<v Speaker 0>drop them to hourly resolution, you're calculating a

00:38:50.830 --> 00:38:52.110
<v Speaker 0>mean as an example

00:38:52.430 --> 00:38:53.950
<v Speaker 0>over the hour,

00:38:55.150 --> 00:38:59.310
<v Speaker 0>because we're storing less values, the value increases

00:38:59.310 --> 00:39:00.750
<v Speaker 0>and the resolution,

00:39:00.750 --> 00:39:02.990
<v Speaker 0>yes, we change it, but it's still valuable.

00:39:04.615 --> 00:39:05.975
<v Speaker 0>Then we do it again.

00:39:06.295 --> 00:39:08.135
<v Speaker 0>After a certain amount of time, we say,

00:39:08.135 --> 00:39:10.455
<v Speaker 0>okay, we don't need an hour resolution. Let's

00:39:10.455 --> 00:39:12.295
<v Speaker 0>calculate the mean over six hours.

00:39:12.455 --> 00:39:14.935
<v Speaker 0>We're storing less data, reducing the cost and

00:39:14.935 --> 00:39:17.095
<v Speaker 0>the burden of storing that data and increasing

00:39:17.095 --> 00:39:18.455
<v Speaker 0>the value of that data.

00:39:19.220 --> 00:39:20.740
<v Speaker 0>Even though the value will increase a little

00:39:20.740 --> 00:39:22.819
<v Speaker 0>bit because we lose a resolution, as we

00:39:22.819 --> 00:39:24.339
<v Speaker 0>go further away from the point in time

00:39:24.339 --> 00:39:25.780
<v Speaker 0>the value is stored,

00:39:26.099 --> 00:39:28.339
<v Speaker 0>actually works really well. Eventually, we'll have this

00:39:28.339 --> 00:39:31.585
<v Speaker 0>really nice cascading downsampling system where we take

00:39:31.585 --> 00:39:32.945
<v Speaker 0>all of our time series data from ten

00:39:32.945 --> 00:39:34.305
<v Speaker 0>seconds to one hour, to six hour, to

00:39:34.305 --> 00:39:35.745
<v Speaker 0>one day, to a week, to a month,

00:39:35.905 --> 00:39:37.905
<v Speaker 0>whatever. It comes down to the types of

00:39:37.905 --> 00:39:40.545
<v Speaker 0>data you're storing. Again, we will explore this

00:39:40.545 --> 00:39:41.825
<v Speaker 0>in a lot of detail

00:39:42.145 --> 00:39:44.465
<v Speaker 0>over the next episodes, the next lectures.

00:39:45.060 --> 00:39:46.900
<v Speaker 0>The time sampling is really important,

00:39:47.300 --> 00:39:49.220
<v Speaker 0>and we have to understand when to lower

00:39:49.220 --> 00:39:50.100
<v Speaker 0>the resolution

00:39:50.260 --> 00:39:52.020
<v Speaker 0>of each type of data that we store

00:39:52.020 --> 00:39:54.100
<v Speaker 0>in a system and understand the value that

00:39:54.100 --> 00:39:56.980
<v Speaker 0>we need from it. Some values, some data,

00:39:56.980 --> 00:39:59.505
<v Speaker 0>you will need to keep the higher resolution.

00:39:59.505 --> 00:40:01.265
<v Speaker 0>Some data, you will just bend because it's

00:40:01.265 --> 00:40:03.984
<v Speaker 0>no longer relevant at all, but really for

00:40:03.984 --> 00:40:06.704
<v Speaker 0>long term retrospective analysis of that data, you

00:40:06.704 --> 00:40:08.625
<v Speaker 0>will want it in some form.

00:40:12.630 --> 00:40:14.790
<v Speaker 0>Now, this is what a continuous query would

00:40:14.790 --> 00:40:16.150
<v Speaker 0>look like in InfluxDB

00:40:16.150 --> 00:40:18.550
<v Speaker 0>one. It uses a SQL like language.

00:40:19.349 --> 00:40:21.030
<v Speaker 0>This is a lot easier to understand than

00:40:21.030 --> 00:40:23.190
<v Speaker 0>Flux. We haven't really touched on Flux yet,

00:40:23.190 --> 00:40:25.589
<v Speaker 0>so I'm not gonna show you that, but

00:40:24.975 --> 00:40:26.815
<v Speaker 0>we will be diving into Flux and you

00:40:26.815 --> 00:40:28.175
<v Speaker 0>will see how to do this through Flux

00:40:28.175 --> 00:40:28.895
<v Speaker 0>tasks.

00:40:29.375 --> 00:40:30.815
<v Speaker 0>But really what I want you to understand

00:40:30.815 --> 00:40:33.615
<v Speaker 0>is how the semantics or the pseudo code

00:40:33.615 --> 00:40:36.015
<v Speaker 0>of a downsample or a rollup would

00:40:36.255 --> 00:40:36.815
<v Speaker 0>look.

00:40:37.375 --> 00:40:38.680
<v Speaker 0>So you can see here that we create

00:40:38.680 --> 00:40:40.360
<v Speaker 0>a roll up that runs on a certain

00:40:40.360 --> 00:40:42.280
<v Speaker 0>bucket or table or measurement.

00:40:42.920 --> 00:40:45.240
<v Speaker 0>We basically tell it how to calculate the

00:40:45.240 --> 00:40:46.920
<v Speaker 0>mean, and that could be a min or

00:40:46.920 --> 00:40:50.520
<v Speaker 0>max, mean, it could be whatever calculation you

00:40:50.520 --> 00:40:50.840
<v Speaker 0>want,

00:40:51.335 --> 00:40:52.775
<v Speaker 0>and we tell it how to group that

00:40:52.775 --> 00:40:54.855
<v Speaker 0>value. So if we have ten second resolution,

00:40:54.855 --> 00:40:56.295
<v Speaker 0>we can group by time of one hour

00:40:56.295 --> 00:40:58.615
<v Speaker 0>and calculate the mean. And we just let

00:40:58.615 --> 00:40:59.095
<v Speaker 0>that

00:40:59.894 --> 00:41:01.734
<v Speaker 0>downsample run forever

00:41:01.974 --> 00:41:04.230
<v Speaker 0>doing the thing we need. We chain these

00:41:04.230 --> 00:41:05.750
<v Speaker 0>together to go from one hour to six

00:41:05.750 --> 00:41:07.030
<v Speaker 0>hours, from six hours to a day and

00:41:07.030 --> 00:41:07.750
<v Speaker 0>so forth.

00:41:08.230 --> 00:41:11.030
<v Speaker 0>So I'm hoping that this InfluxQL version of

00:41:11.030 --> 00:41:11.510
<v Speaker 0>it

00:41:11.910 --> 00:41:15.030
<v Speaker 0>helps cement what a downsample will look like,

00:41:15.030 --> 00:41:17.430
<v Speaker 0>and we'll tackle the flux as we move

00:41:17.430 --> 00:41:18.710
<v Speaker 0>in to subsequent

00:41:18.710 --> 00:41:19.190
<v Speaker 0>lectures.

00:41:21.325 --> 00:41:24.045
<v Speaker 0>Now you cannot downsample events.

00:41:24.285 --> 00:41:26.685
<v Speaker 0>Feel free to Google anomaly detection with InfluxDB.

00:41:26.685 --> 00:41:28.125
<v Speaker 0>We will be doing a little bit of

00:41:28.125 --> 00:41:29.885
<v Speaker 0>it in this course as we try to

00:41:29.885 --> 00:41:31.965
<v Speaker 0>use HTTP queries to pull out,

00:41:32.680 --> 00:41:34.680
<v Speaker 0>you know, five hundreds, four hundreds, ones that

00:41:34.680 --> 00:41:36.360
<v Speaker 0>we didn't expect. So we'll do a little

00:41:36.360 --> 00:41:38.120
<v Speaker 0>bit of this, but there is a lot

00:41:38.120 --> 00:41:40.360
<v Speaker 0>of prior research on Google available if this

00:41:40.360 --> 00:41:41.880
<v Speaker 0>is one of your main drivers for this

00:41:41.880 --> 00:41:42.440
<v Speaker 0>course.

00:41:43.080 --> 00:41:44.840
<v Speaker 0>We'll do a little, but not a lot.

00:41:47.975 --> 00:41:48.695
<v Speaker 0>Excuse me.

00:41:49.895 --> 00:41:51.495
<v Speaker 0>Okay. So now that we have our time

00:41:51.495 --> 00:41:53.415
<v Speaker 0>series data, we're done sampling it. We've got

00:41:53.415 --> 00:41:55.335
<v Speaker 0>it in our InfluxDB database. We're starting to

00:41:55.335 --> 00:41:56.535
<v Speaker 0>put things together.

00:41:56.855 --> 00:41:58.135
<v Speaker 0>What are some of the things we're going

00:41:58.135 --> 00:41:59.815
<v Speaker 0>to cover on this course? Well,

00:42:00.640 --> 00:42:02.720
<v Speaker 0>let's do this by example again.

00:42:04.400 --> 00:42:06.400
<v Speaker 0>Let's assume you have an application that speaks

00:42:06.400 --> 00:42:07.360
<v Speaker 0>to a database.

00:42:07.680 --> 00:42:09.920
<v Speaker 0>I call this the simple days, the monolithic

00:42:09.920 --> 00:42:11.600
<v Speaker 0>days. You know, back in the early two

00:42:11.600 --> 00:42:13.119
<v Speaker 0>thousands where this is mostly how we built

00:42:13.119 --> 00:42:13.920
<v Speaker 0>applications,

00:42:14.080 --> 00:42:15.865
<v Speaker 0>and if you're still building applications like this,

00:42:15.865 --> 00:42:17.704
<v Speaker 0>you know what? For some scenarios, it works

00:42:17.704 --> 00:42:19.704
<v Speaker 0>great, good on you. Your monitoring is a

00:42:19.704 --> 00:42:21.705
<v Speaker 0>lot easier than cloud native monitoring.

00:42:22.585 --> 00:42:24.105
<v Speaker 0>Now, if we want to understand

00:42:24.744 --> 00:42:27.385
<v Speaker 0>what to monitor in this system, it's really,

00:42:27.385 --> 00:42:28.184
<v Speaker 0>really, really simple.

00:42:28.860 --> 00:42:31.100
<v Speaker 0>We typically wanna monitor the CPU to go

00:42:31.100 --> 00:42:33.020
<v Speaker 0>above a certain threshold. That means bad things

00:42:33.020 --> 00:42:35.500
<v Speaker 0>are gonna happen. We wanna monitor the memory

00:42:35.500 --> 00:42:36.300
<v Speaker 0>consumption.

00:42:36.380 --> 00:42:38.460
<v Speaker 0>Bad things are gonna happen. If our customers

00:42:38.460 --> 00:42:39.900
<v Speaker 0>have a response time greater than three hundred

00:42:39.900 --> 00:42:42.060
<v Speaker 0>milliseconds, bad things are happening. We need to

00:42:42.060 --> 00:42:45.145
<v Speaker 0>fix it. We may also have predictable

00:42:45.145 --> 00:42:46.025
<v Speaker 0>problems.

00:42:46.265 --> 00:42:48.905
<v Speaker 0>Black Friday and other holiday and seasonal items

00:42:48.905 --> 00:42:52.025
<v Speaker 0>and cadence and things that happen that you

00:42:52.025 --> 00:42:53.945
<v Speaker 0>will understand within your domain.

00:42:56.960 --> 00:42:57.600
<v Speaker 0>Okay,

00:42:58.160 --> 00:42:58.800
<v Speaker 0>so

00:42:59.520 --> 00:43:01.359
<v Speaker 0>how do we know when to send an

00:43:01.359 --> 00:43:03.200
<v Speaker 0>alert in this system?

00:43:04.000 --> 00:43:06.000
<v Speaker 0>Well, we can have an application health check

00:43:06.000 --> 00:43:07.520
<v Speaker 0>and if that begins to fail, we send

00:43:07.520 --> 00:43:09.305
<v Speaker 0>an alert and if any of those symptoms

00:43:09.305 --> 00:43:10.904
<v Speaker 0>that we've seen in the previous slide happened,

00:43:10.904 --> 00:43:12.025
<v Speaker 0>we can send an alert.

00:43:12.744 --> 00:43:14.585
<v Speaker 0>Really, really simple architecture,

00:43:14.585 --> 00:43:16.744
<v Speaker 0>really simple to work with. Time series data

00:43:16.744 --> 00:43:18.744
<v Speaker 0>does not have to be terribly complex.

00:43:20.120 --> 00:43:22.280
<v Speaker 0>As we start to bring horizontal scalability,

00:43:22.280 --> 00:43:23.800
<v Speaker 0>things get a little bit difficult, and this

00:43:23.800 --> 00:43:25.720
<v Speaker 0>is where time series data, you then need

00:43:25.720 --> 00:43:27.720
<v Speaker 0>to start manipulating it and working with it

00:43:27.720 --> 00:43:30.680
<v Speaker 0>in more sophisticated fashion, grouping and windowing and

00:43:30.680 --> 00:43:32.600
<v Speaker 0>other things. And we're gonna cover all of

00:43:32.600 --> 00:43:32.840
<v Speaker 0>this.

00:43:33.755 --> 00:43:35.355
<v Speaker 0>But the question here is how do I

00:43:35.355 --> 00:43:36.555
<v Speaker 0>know when to send

00:43:36.795 --> 00:43:38.475
<v Speaker 0>an alert with a system?

00:43:39.115 --> 00:43:40.475
<v Speaker 0>You know, we can't just use a health

00:43:40.475 --> 00:43:42.155
<v Speaker 0>check on a single node because we may

00:43:42.155 --> 00:43:44.715
<v Speaker 0>have two, seven, a hundred other of them

00:43:44.715 --> 00:43:46.715
<v Speaker 0>that are returned in a good health check.

00:43:47.840 --> 00:43:50.320
<v Speaker 0>Well, my face is always getting in the

00:43:50.320 --> 00:43:50.800
<v Speaker 0>way.

00:43:51.200 --> 00:43:52.320
<v Speaker 0>Please stand by.

00:43:56.160 --> 00:43:56.800
<v Speaker 0>So

00:43:57.360 --> 00:43:59.120
<v Speaker 0>what we could do is an aggregation of

00:43:59.120 --> 00:44:00.960
<v Speaker 0>our metrics, and we can actually look to

00:44:00.960 --> 00:44:04.855
<v Speaker 0>see if, you know, using service level indicators

00:44:04.934 --> 00:44:07.175
<v Speaker 0>or having a service level objective that we

00:44:07.175 --> 00:44:09.815
<v Speaker 0>have to meet, whether we have x number

00:44:09.815 --> 00:44:13.095
<v Speaker 0>of 500 exceptions within n window periods. So

00:44:13.095 --> 00:44:14.775
<v Speaker 0>whether I have more than 100, five hundred

00:44:14.775 --> 00:44:17.010
<v Speaker 0>exceptions within a five minute period, to me

00:44:17.010 --> 00:44:18.850
<v Speaker 0>that is a problem that goes against our

00:44:18.850 --> 00:44:20.290
<v Speaker 0>service level objective.

00:44:20.530 --> 00:44:22.930
<v Speaker 0>Yes, we definitely have to send an alert.

00:44:26.530 --> 00:44:27.330
<v Speaker 0>All right.

00:44:28.210 --> 00:44:29.650
<v Speaker 0>What about cloud native hell?

00:44:30.204 --> 00:44:32.444
<v Speaker 0>So this is the system we have now,

00:44:32.444 --> 00:44:34.285
<v Speaker 0>right? We've got service A that speaks to

00:44:34.285 --> 00:44:35.885
<v Speaker 0>database A, we've got service B that speaks

00:44:35.885 --> 00:44:37.645
<v Speaker 0>to database B, we've service B that speaks

00:44:37.645 --> 00:44:40.684
<v Speaker 0>to database B because it's horizontally scaled. We've

00:44:40.684 --> 00:44:42.845
<v Speaker 0>got service C, which speaks to database C,

00:44:42.845 --> 00:44:45.484
<v Speaker 0>which also has Canadian deployments and progressive deployments.

00:44:46.280 --> 00:44:48.680
<v Speaker 0>Of course, all of our networking is virtualized

00:44:48.680 --> 00:44:50.599
<v Speaker 0>because it's on Kubernetes and we're running through

00:44:50.599 --> 00:44:51.880
<v Speaker 0>the service mesh.

00:44:52.359 --> 00:44:52.760
<v Speaker 0>Help

00:44:53.320 --> 00:44:53.960
<v Speaker 0>me.

00:44:55.000 --> 00:44:56.680
<v Speaker 0>How do I know when this system is

00:44:56.680 --> 00:44:58.119
<v Speaker 0>healthy and how do I know when to

00:44:58.119 --> 00:44:58.760
<v Speaker 0>page someone?

00:44:59.785 --> 00:45:00.745
<v Speaker 0>Time

00:45:00.745 --> 00:45:02.585
<v Speaker 0>series data is the answer.

00:45:03.865 --> 00:45:04.505
<v Speaker 0>So

00:45:05.065 --> 00:45:06.185
<v Speaker 0>we're going to

00:45:06.585 --> 00:45:09.945
<v Speaker 0>specifically work on this example. We will have

00:45:09.945 --> 00:45:12.105
<v Speaker 0>a Kubernetes cluster. We're going to have InfluxDB

00:45:12.105 --> 00:45:13.785
<v Speaker 0>too. We're going to collect data from that

00:45:13.785 --> 00:45:14.665
<v Speaker 0>cluster

00:45:14.960 --> 00:45:17.040
<v Speaker 0>and we're gonna break the system,

00:45:17.200 --> 00:45:19.359
<v Speaker 0>get our alerting into place, and really try

00:45:19.359 --> 00:45:21.040
<v Speaker 0>to build as much understanding

00:45:21.680 --> 00:45:23.760
<v Speaker 0>through time series as we can.

00:45:25.519 --> 00:45:27.920
<v Speaker 0>Now this is the cloud native architecture, convenience

00:45:27.920 --> 00:45:30.475
<v Speaker 0>versus cost, So yes, you can still follow

00:45:30.475 --> 00:45:31.835
<v Speaker 0>along with this course and learn a lot

00:45:31.835 --> 00:45:33.835
<v Speaker 0>if you've got monolithic architectures. There's still a

00:45:33.835 --> 00:45:35.675
<v Speaker 0>lot of great knowledge here to understand. We

00:45:35.675 --> 00:45:39.675
<v Speaker 0>will be looking at microservices monitoring them using

00:45:39.675 --> 00:45:42.475
<v Speaker 0>the Prometheus exposition format with InfluxDB too.

00:45:46.530 --> 00:45:48.130
<v Speaker 0>Now, one of the things that we

00:45:48.850 --> 00:45:50.530
<v Speaker 0>want this course to help you do is

00:45:50.530 --> 00:45:53.810
<v Speaker 0>to root cause analysis and understand causality within

00:45:53.810 --> 00:45:54.610
<v Speaker 0>your system.

00:45:54.850 --> 00:45:56.530
<v Speaker 0>So we will be breaking into some of

00:45:56.530 --> 00:45:57.330
<v Speaker 0>the statistic.

00:45:58.425 --> 00:45:59.945
<v Speaker 0>We were exploring

00:45:59.945 --> 00:46:01.945
<v Speaker 0>the statistical functions

00:46:02.105 --> 00:46:03.945
<v Speaker 0>provided by InfluxDB.

00:46:04.025 --> 00:46:05.785
<v Speaker 0>We've able to analyse weeks, months and years

00:46:05.785 --> 00:46:08.185
<v Speaker 0>of data using tags to build correlation,

00:46:08.425 --> 00:46:10.185
<v Speaker 0>looking at how we can use linear prediction

00:46:10.185 --> 00:46:11.145
<v Speaker 0>derivatives,

00:46:11.625 --> 00:46:13.065
<v Speaker 0>median absolute deviations,

00:46:13.710 --> 00:46:15.790
<v Speaker 0>moving averages, whole winters,

00:46:16.270 --> 00:46:18.590
<v Speaker 0>not machine learning, but statistical

00:46:18.590 --> 00:46:21.710
<v Speaker 0>learning or statistical predictions based on previous data

00:46:21.710 --> 00:46:23.230
<v Speaker 0>and cyclic data structures.

00:46:23.630 --> 00:46:25.070
<v Speaker 0>So if you want to know how to

00:46:25.070 --> 00:46:26.270
<v Speaker 0>understand the data,

00:46:26.590 --> 00:46:27.950
<v Speaker 0>this is a really good way to do

00:46:27.950 --> 00:46:28.109
<v Speaker 0>it.

00:46:28.765 --> 00:46:30.525
<v Speaker 0>We'll be covering all of these functions at

00:46:30.525 --> 00:46:31.325
<v Speaker 0>InfluxDB

00:46:31.325 --> 00:46:33.165
<v Speaker 0>across the next couple of weeks.

00:46:34.285 --> 00:46:37.085
<v Speaker 0>And some examples here, I like to lean

00:46:37.085 --> 00:46:39.244
<v Speaker 0>on my own previous life as an SRE

00:46:39.244 --> 00:46:39.725
<v Speaker 0>here,

00:46:40.445 --> 00:46:41.805
<v Speaker 0>but

00:46:41.430 --> 00:46:43.670
<v Speaker 0>I have been paged at 4AM because a

00:46:43.670 --> 00:46:45.430
<v Speaker 0>disk usage of a machine went above a

00:46:45.430 --> 00:46:48.390
<v Speaker 0>certain threshold, would trigger PagerDuty alert and wake

00:46:48.390 --> 00:46:49.030
<v Speaker 0>me up.

00:46:49.670 --> 00:46:51.270
<v Speaker 0>Some of the things we'll explore in this

00:46:51.270 --> 00:46:53.109
<v Speaker 0>course is, but how can we actually try

00:46:53.109 --> 00:46:55.110
<v Speaker 0>and predict these outages

00:46:55.349 --> 00:46:56.470
<v Speaker 0>during office hours?

00:46:57.075 --> 00:46:59.395
<v Speaker 0>That is not always possible, of course. Bad

00:46:59.395 --> 00:47:01.395
<v Speaker 0>things happen and spikes happen and those are

00:47:01.395 --> 00:47:03.875
<v Speaker 0>very difficult to predict. But when we have

00:47:04.115 --> 00:47:06.675
<v Speaker 0>linear growth of a disk, yes, we want

00:47:06.675 --> 00:47:08.435
<v Speaker 0>to be able to learn that before

00:47:09.090 --> 00:47:10.210
<v Speaker 0>I go to sleep.

00:47:11.170 --> 00:47:12.530
<v Speaker 0>So we can do that.

00:47:13.170 --> 00:47:15.970
<v Speaker 0>We can also use, you know, we have

00:47:15.970 --> 00:47:17.490
<v Speaker 0>distributed applications,

00:47:17.490 --> 00:47:19.890
<v Speaker 0>distributed HTTP requests. We wanna be able to

00:47:19.890 --> 00:47:20.450
<v Speaker 0>use

00:47:20.690 --> 00:47:21.410
<v Speaker 0>histograms.

00:47:22.075 --> 00:47:23.915
<v Speaker 0>Now there are two ways to do histograms

00:47:23.915 --> 00:47:26.155
<v Speaker 0>in time series data. You can use histograms

00:47:26.155 --> 00:47:28.315
<v Speaker 0>of metrics where you preassign the buckets within

00:47:28.315 --> 00:47:29.195
<v Speaker 0>your code.

00:47:29.515 --> 00:47:32.155
<v Speaker 0>There's the slightly better format, but more expensive,

00:47:32.155 --> 00:47:33.835
<v Speaker 0>and we'll cover that trade off as well

00:47:33.835 --> 00:47:34.635
<v Speaker 0>in the coming weeks,

00:47:35.220 --> 00:47:36.820
<v Speaker 0>of where I can store the raw events

00:47:36.820 --> 00:47:38.900
<v Speaker 0>and how long every request took and build

00:47:38.900 --> 00:47:41.940
<v Speaker 0>dynamic histograms with dynamic bins to understand my

00:47:41.940 --> 00:47:42.660
<v Speaker 0>application.

00:47:43.220 --> 00:47:44.820
<v Speaker 0>And then some use cases, you may wish

00:47:44.820 --> 00:47:46.180
<v Speaker 0>to go down just the

00:47:46.755 --> 00:47:49.875
<v Speaker 0>pre allocated bin hardcoded in your code. Again,

00:47:49.875 --> 00:47:51.714
<v Speaker 0>trade offs. You have to understand them. You

00:47:51.714 --> 00:47:53.234
<v Speaker 0>have to understand the risk and the cost

00:47:53.234 --> 00:47:55.315
<v Speaker 0>with both, and we'll talk about that.

00:47:56.835 --> 00:47:59.634
<v Speaker 0>Here's an example of the Prometheus one. I'm

00:47:59.634 --> 00:48:02.250
<v Speaker 0>saying beware because it's really difficult change these

00:48:02.250 --> 00:48:03.690
<v Speaker 0>buckets retroactively,

00:48:03.690 --> 00:48:05.370
<v Speaker 0>and we'll have examples of this in the

00:48:05.370 --> 00:48:06.330
<v Speaker 0>next week or two.

00:48:07.850 --> 00:48:10.730
<v Speaker 0>Proactive operations. One of the really great things

00:48:10.730 --> 00:48:11.930
<v Speaker 0>I want us to try and take away

00:48:11.930 --> 00:48:13.770
<v Speaker 0>from this is some of those really cool

00:48:13.770 --> 00:48:16.525
<v Speaker 0>predictive things that InfluxDB offers, being able to

00:48:16.525 --> 00:48:18.445
<v Speaker 0>understand and make predictions

00:48:18.765 --> 00:48:19.325
<v Speaker 0>of

00:48:19.805 --> 00:48:22.605
<v Speaker 0>previous events. Now we'll probably use an example

00:48:22.605 --> 00:48:25.165
<v Speaker 0>like Black Friday and this course where we

00:48:25.165 --> 00:48:27.485
<v Speaker 0>take a look at artificial

00:48:27.725 --> 00:48:29.645
<v Speaker 0>data of three years of a store

00:48:30.369 --> 00:48:32.850
<v Speaker 0>and see if we can predict what the

00:48:32.850 --> 00:48:36.050
<v Speaker 0>utilisation of infrastructure will be the following year.

00:48:36.050 --> 00:48:38.210
<v Speaker 0>And we're going to do that through applying

00:48:38.210 --> 00:48:39.490
<v Speaker 0>the whole winters

00:48:39.490 --> 00:48:42.770
<v Speaker 0>to the machine to the time series data

00:48:42.770 --> 00:48:44.050
<v Speaker 0>that we have in our system.

00:48:46.495 --> 00:48:49.055
<v Speaker 0>Alright, let me pop back over here.

00:48:54.175 --> 00:48:55.615
<v Speaker 0>So that is our

00:48:55.695 --> 00:48:56.655
<v Speaker 0>introduction

00:48:57.215 --> 00:48:58.175
<v Speaker 0>to

00:48:58.990 --> 00:49:00.270
<v Speaker 0>time series data.

00:49:00.590 --> 00:49:03.070
<v Speaker 0>Now we haven't looked at InfluxDB two yet.

00:49:03.070 --> 00:49:05.550
<v Speaker 0>We haven't collected any time series data yet.

00:49:05.550 --> 00:49:07.470
<v Speaker 0>We haven't stored it, we haven't queried it,

00:49:07.470 --> 00:49:09.870
<v Speaker 0>we haven't built dashboards, we haven't built alerting,

00:49:09.870 --> 00:49:12.990
<v Speaker 0>and we haven't done downsampling and analysis of

00:49:12.990 --> 00:49:13.390
<v Speaker 0>our data.

00:49:14.234 --> 00:49:16.954
<v Speaker 0>This is the introduction. This is lecture one.

00:49:17.115 --> 00:49:19.275
<v Speaker 0>There will be many lectures in this course.

00:49:19.275 --> 00:49:20.395
<v Speaker 0>We will be doing

00:49:20.875 --> 00:49:23.595
<v Speaker 0>thirty minute to sixty minute videos multiple times

00:49:23.595 --> 00:49:25.674
<v Speaker 0>per week as we explore time series data

00:49:25.674 --> 00:49:26.795
<v Speaker 0>via InfluxDB two.

00:49:28.150 --> 00:49:30.230
<v Speaker 0>Hope this has been a pleasant and enjoyable

00:49:30.230 --> 00:49:31.830
<v Speaker 0>introduction to this course.

00:49:32.150 --> 00:49:35.110
<v Speaker 0>Please remember to, if you're not already, sign

00:49:35.110 --> 00:49:38.150
<v Speaker 0>up and become a Rawkode Academy

00:49:38.869 --> 00:49:41.830
<v Speaker 0>incubating member to see all future episodes on

00:49:41.830 --> 00:49:44.805
<v Speaker 0>this course. We also have new courses launching

00:49:44.805 --> 00:49:47.525
<v Speaker 0>in August. We have a course on eBPF

00:49:47.525 --> 00:49:49.925
<v Speaker 0>as we look at building and trace points

00:49:49.925 --> 00:49:52.085
<v Speaker 0>into the Linux kernel to do really cool

00:49:52.085 --> 00:49:55.045
<v Speaker 0>stuff. BPF is a very awesome technology, and

00:49:55.045 --> 00:49:56.645
<v Speaker 0>I'm very excited to share that with you.

00:49:57.250 --> 00:49:59.330
<v Speaker 0>We also have other courses coming,

00:49:59.570 --> 00:50:01.890
<v Speaker 0>and they will all be announced to incubating

00:50:01.890 --> 00:50:03.250
<v Speaker 0>members first.

00:50:04.050 --> 00:50:04.770
<v Speaker 0>I

00:50:05.010 --> 00:50:06.930
<v Speaker 0>hope you will join us on this journey.

00:50:07.090 --> 00:50:09.755
<v Speaker 0>Thank you for supporting this channel. I hope

00:50:09.755 --> 00:50:12.555
<v Speaker 0>you have a wonderful day, night, morning, whatever

00:50:12.555 --> 00:50:14.875
<v Speaker 0>time you're watching this. And remember

00:50:14.875 --> 00:50:16.155
<v Speaker 0>to stay tuned.

00:50:16.475 --> 00:50:18.555
<v Speaker 0>There will be Q and A sessions and

00:50:18.555 --> 00:50:21.195
<v Speaker 0>prerecorded videos coming that will guide you through

00:50:21.195 --> 00:50:22.155
<v Speaker 0>the workshop course.

00:50:22.720 --> 00:50:24.800
<v Speaker 0>If you do not have access to the

00:50:24.800 --> 00:50:27.760
<v Speaker 0>workshop course yet, it is available on GitHub.

00:50:27.760 --> 00:50:29.280
<v Speaker 0>The link will be in the show notes

00:50:29.280 --> 00:50:32.400
<v Speaker 0>as soon as possible, again, for incubating members.

00:50:32.960 --> 00:50:34.640
<v Speaker 0>Have a wonderful day. That's BT Elson.
