WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 7704ddd3-0833-40e0-9cdb-66b76b3ec086
Created: 2025-04-29T13:22:48.045Z
Duration: 5699.6113
Channels: 1

00:02:09.860 --> 00:02:13.140
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:02:13.140 --> 00:02:15.380
<v Speaker 0>I'm your host, David Flanagan, also known across

00:02:15.380 --> 00:02:16.980
<v Speaker 0>the Internet as Rawkode.

00:02:17.825 --> 00:02:19.585
<v Speaker 0>Today, we are gonna take a look at

00:02:19.585 --> 00:02:20.625
<v Speaker 0>Daggerizing.

00:02:20.625 --> 00:02:22.705
<v Speaker 0>And by Daggerizing, obviously, it's an old word.

00:02:22.705 --> 00:02:25.584
<v Speaker 0>We're gonna use Dagger to build or augment

00:02:25.584 --> 00:02:26.625
<v Speaker 0>or enrich

00:02:26.625 --> 00:02:29.665
<v Speaker 0>pipelines and existing open source projects to see

00:02:29.665 --> 00:02:31.105
<v Speaker 0>if we can make their lives a little

00:02:31.105 --> 00:02:33.540
<v Speaker 0>bit easier. And today, we're taking a look

00:02:33.540 --> 00:02:35.380
<v Speaker 0>at a project called Cargo, and I have

00:02:35.380 --> 00:02:37.060
<v Speaker 0>the pleasure to be joined by a friend

00:02:37.060 --> 00:02:38.340
<v Speaker 0>and a maintainer,

00:02:38.900 --> 00:02:39.620
<v Speaker 0>Kat.

00:02:39.940 --> 00:02:41.220
<v Speaker 0>Hey. How are you?

00:02:42.340 --> 00:02:43.220
<v Speaker 0>You're on mute.

00:02:46.864 --> 00:02:48.944
<v Speaker 1>See, you had that music playing, and I

00:02:48.944 --> 00:02:51.745
<v Speaker 1>was, like, jamming you. And I was like,

00:02:51.745 --> 00:02:53.185
<v Speaker 1>I gotta mute mute this, and now I

00:02:53.185 --> 00:02:55.985
<v Speaker 1>look like a fool. No. I'm super excited

00:02:55.985 --> 00:02:57.825
<v Speaker 1>to be on with you. I know we've

00:02:58.305 --> 00:02:59.265
<v Speaker 1>kind of been

00:02:59.909 --> 00:03:03.590
<v Speaker 1>running in parallel craft paths across the interwebs,

00:03:03.590 --> 00:03:05.750
<v Speaker 1>and we finally actually get to do something.

00:03:05.750 --> 00:03:08.310
<v Speaker 1>So that's cool. Yeah. We we both seem

00:03:08.310 --> 00:03:09.910
<v Speaker 0>to like a lot of the same

00:03:10.310 --> 00:03:11.189
<v Speaker 0>technological

00:03:11.189 --> 00:03:13.584
<v Speaker 0>stuff. So now we get to sit down

00:03:13.584 --> 00:03:15.905
<v Speaker 0>and actually experiment and have some fun together,

00:03:15.905 --> 00:03:17.265
<v Speaker 0>which is awesome.

00:03:17.745 --> 00:03:19.504
<v Speaker 0>And don't think we we streamed once before,

00:03:19.504 --> 00:03:21.265
<v Speaker 0>right, when I was at Equinix, I think.

00:03:25.290 --> 00:03:26.490
<v Speaker 1>I it

00:03:26.810 --> 00:03:29.130
<v Speaker 1>maybe. I have to go look. I My

00:03:29.130 --> 00:03:30.570
<v Speaker 0>feelings aren't hurt. That's okay. It's not a

00:03:30.570 --> 00:03:32.810
<v Speaker 0>tear. I was so sorry. I

00:03:34.010 --> 00:03:36.170
<v Speaker 1>swear I will remember this one. Like, you

00:03:36.170 --> 00:03:39.495
<v Speaker 1>you had music for, like, custom lyrics with

00:03:39.495 --> 00:03:41.815
<v Speaker 1>card how'd you do that? That's so cool.

00:03:42.375 --> 00:03:44.935
<v Speaker 0>I have been experimenting with AI music, and

00:03:44.935 --> 00:03:46.375
<v Speaker 0>I'm gonna do some videos on it because

00:03:46.375 --> 00:03:48.695
<v Speaker 0>it's so freaking cool right now.

00:03:49.495 --> 00:03:50.935
<v Speaker 0>And it's so inexpensive

00:03:50.935 --> 00:03:52.614
<v Speaker 0>to do and so quick. I can't believe

00:03:52.614 --> 00:03:54.260
<v Speaker 0>it. But, yeah, that was a nice that

00:03:54.260 --> 00:03:55.460
<v Speaker 0>was the first time we've ever used AI

00:03:55.460 --> 00:03:57.220
<v Speaker 0>and AI opening music, and it was customized

00:03:57.220 --> 00:03:59.700
<v Speaker 0>for Dagger, Cargo, and Jew, which was awesome.

00:04:00.420 --> 00:04:02.980
<v Speaker 1>I thought so. Thank you. Okay.

00:04:03.700 --> 00:04:04.340
<v Speaker 0>Alright.

00:04:04.500 --> 00:04:07.395
<v Speaker 0>Look. For anyone who is not familiar with

00:04:07.395 --> 00:04:08.675
<v Speaker 0>you, can you give us a little bit

00:04:08.675 --> 00:04:10.115
<v Speaker 0>of a TLDR on who you are and

00:04:10.115 --> 00:04:11.075
<v Speaker 0>what you've been up to?

00:04:11.475 --> 00:04:13.475
<v Speaker 1>Good god. Okay. So TLDR

00:04:13.475 --> 00:04:14.995
<v Speaker 1>version. I

00:04:16.755 --> 00:04:21.235
<v Speaker 1>am a nerd on the interwebs and

00:04:20.180 --> 00:04:22.820
<v Speaker 1>nerding out with everyone on platform engineering and

00:04:22.820 --> 00:04:26.260
<v Speaker 1>DevOps, GitOps, all those fun ops y things.

00:04:26.900 --> 00:04:29.380
<v Speaker 1>Kind of climbed through the ranks a little

00:04:29.380 --> 00:04:30.820
<v Speaker 1>bit at a time professionally,

00:04:30.820 --> 00:04:34.020
<v Speaker 1>just going from being a Linux nerd to

00:04:33.495 --> 00:04:35.975
<v Speaker 1>actually getting to apply that knowledge in support

00:04:35.975 --> 00:04:36.615
<v Speaker 1>roles.

00:04:37.175 --> 00:04:39.175
<v Speaker 1>And then kind of growing up from there

00:04:39.175 --> 00:04:40.055
<v Speaker 1>into

00:04:40.135 --> 00:04:41.975
<v Speaker 1>OpenStack and Kubernetes

00:04:41.975 --> 00:04:44.535
<v Speaker 1>from, you know, along the career path from

00:04:44.535 --> 00:04:45.175
<v Speaker 1>canonical,

00:04:45.590 --> 00:04:48.230
<v Speaker 1>well, Dell Canonical, and Red Hat there.

00:04:48.630 --> 00:04:51.190
<v Speaker 1>And then since leaving those larger companies, kind

00:04:51.190 --> 00:04:53.270
<v Speaker 1>of carrying those skill sets around to a

00:04:53.270 --> 00:04:54.870
<v Speaker 1>couple of few different startups,

00:04:55.190 --> 00:04:59.235
<v Speaker 1>including some professional work, in the space,

00:04:59.555 --> 00:05:00.995
<v Speaker 1>which we're going to be playing in a

00:05:00.995 --> 00:05:01.875
<v Speaker 1>little bit today.

00:05:02.435 --> 00:05:03.075
<v Speaker 1>So

00:05:04.115 --> 00:05:07.235
<v Speaker 1>and then, like, now we're full on in,

00:05:07.235 --> 00:05:10.995
<v Speaker 1>like, the the coding world with Dagger

00:05:10.995 --> 00:05:13.960
<v Speaker 1>and, you know, other code powered IAC tools

00:05:13.960 --> 00:05:15.560
<v Speaker 1>and things like that. So

00:05:16.760 --> 00:05:18.760
<v Speaker 1>kind of getting further into,

00:05:18.920 --> 00:05:21.800
<v Speaker 1>like, software dev like ops

00:05:21.880 --> 00:05:23.000
<v Speaker 1>work, which

00:05:23.640 --> 00:05:25.960
<v Speaker 1>I feel like is a really cool progression,

00:05:26.120 --> 00:05:28.565
<v Speaker 1>and we're probably gonna see that more and

00:05:28.565 --> 00:05:31.604
<v Speaker 1>more as AI lowers the barrier to entry

00:05:31.604 --> 00:05:33.285
<v Speaker 1>there. And so,

00:05:33.604 --> 00:05:37.365
<v Speaker 1>hopefully, today helps, you know, other supercharge other

00:05:37.365 --> 00:05:39.045
<v Speaker 1>people along their

00:05:39.525 --> 00:05:40.805
<v Speaker 1>their trajectory as well.

00:05:41.610 --> 00:05:44.090
<v Speaker 0>Awesome. Yeah. You're right. We are totally in

00:05:44.090 --> 00:05:46.490
<v Speaker 0>the of as code. You know? I write

00:05:46.490 --> 00:05:48.410
<v Speaker 0>my infrastructure in Terraform CDK,

00:05:48.650 --> 00:05:50.410
<v Speaker 0>deploy it with Open Tofu, which I'm not

00:05:50.410 --> 00:05:51.930
<v Speaker 0>sure if I'm even legally allowed to do,

00:05:51.930 --> 00:05:53.850
<v Speaker 0>but, you know, screw it. And

00:05:54.250 --> 00:05:56.250
<v Speaker 0>we've no good Dagger for pipelines.

00:05:56.250 --> 00:05:56.490
<v Speaker 0>Like,

00:05:57.345 --> 00:05:59.104
<v Speaker 0>these days, you never have to leave your

00:05:59.104 --> 00:06:01.264
<v Speaker 0>code editor or your your language servers. Like,

00:06:01.264 --> 00:06:02.544
<v Speaker 0>everything is just right there.

00:06:02.944 --> 00:06:05.985
<v Speaker 1>I have gotten so attached to Versus Code,

00:06:06.065 --> 00:06:07.185
<v Speaker 1>and it

00:06:07.345 --> 00:06:09.710
<v Speaker 1>still feels wild to me that, like, Versus

00:06:09.710 --> 00:06:13.550
<v Speaker 1>Code and GitHub are Microsoft things, and I'm

00:06:13.550 --> 00:06:15.390
<v Speaker 1>in love with it somehow.

00:06:16.190 --> 00:06:18.910
<v Speaker 1>Yeah. It's a different world now than when

00:06:18.910 --> 00:06:20.750
<v Speaker 1>I entered the tech scene for sure.

00:06:21.150 --> 00:06:22.509
<v Speaker 0>Yeah. If you had to ask 20 year

00:06:22.509 --> 00:06:25.175
<v Speaker 0>old me if I'd be using Microsoft developer

00:06:25.175 --> 00:06:27.495
<v Speaker 0>tools, I'd be like, fuck no. And here

00:06:27.495 --> 00:06:30.135
<v Speaker 0>we are. I'm using Copilot. It's got everything.

00:06:30.294 --> 00:06:31.175
<v Speaker 0>Unbelievable.

00:06:31.495 --> 00:06:33.574
<v Speaker 0>But I that's a testament to Microsoft. Right?

00:06:33.574 --> 00:06:35.815
<v Speaker 0>They're they've changed their whole mentality. They're doing

00:06:35.815 --> 00:06:37.655
<v Speaker 0>good things, and they're helping developers. Like, I

00:06:37.655 --> 00:06:39.335
<v Speaker 0>have good nothing but good things to say

00:06:39.335 --> 00:06:43.180
<v Speaker 0>about Microsoft in twenty twenty plus. So Exactly.

00:06:43.660 --> 00:06:45.660
<v Speaker 0>Alright. Anyway, we're not here to talk about

00:06:45.660 --> 00:06:48.540
<v Speaker 0>Microsoft or AI or cool music.

00:06:49.180 --> 00:06:50.780
<v Speaker 0>We're here to do some Dagger stuff, and

00:06:50.780 --> 00:06:52.700
<v Speaker 0>we're gonna be doing some Dagger pipelines for

00:06:52.700 --> 00:06:54.435
<v Speaker 0>cargo. So can you tell us a little

00:06:54.435 --> 00:06:56.514
<v Speaker 0>bit about what cargo is?

00:06:56.914 --> 00:06:59.315
<v Speaker 1>Sure. Okay. So cargo,

00:06:59.634 --> 00:07:02.435
<v Speaker 1>not to be confused with the Argo CD

00:07:02.435 --> 00:07:03.555
<v Speaker 1>land stuff,

00:07:04.194 --> 00:07:07.314
<v Speaker 1>was named several years ago before those products

00:07:07.314 --> 00:07:07.794
<v Speaker 1>came out.

00:07:08.419 --> 00:07:09.139
<v Speaker 1>And,

00:07:09.460 --> 00:07:10.259
<v Speaker 1>it's,

00:07:10.819 --> 00:07:14.340
<v Speaker 1>named after the concept of an aircraft carrier,

00:07:14.340 --> 00:07:15.060
<v Speaker 1>if you will.

00:07:15.460 --> 00:07:18.500
<v Speaker 1>I think in in French, cargo actually is

00:07:18.500 --> 00:07:21.555
<v Speaker 1>a word, that they use for that sometimes.

00:07:21.955 --> 00:07:25.075
<v Speaker 1>And the concept is we're building a platform

00:07:25.075 --> 00:07:28.595
<v Speaker 1>that is from from the ground up, a

00:07:28.595 --> 00:07:29.315
<v Speaker 1>pass

00:07:29.475 --> 00:07:31.235
<v Speaker 1>that's built on Kubernetes,

00:07:31.395 --> 00:07:32.755
<v Speaker 1>can run containers,

00:07:33.030 --> 00:07:36.710
<v Speaker 1>virtual machines, the works. We're looking at Wasm

00:07:36.710 --> 00:07:39.510
<v Speaker 1>in the future as well because that's definitely

00:07:39.510 --> 00:07:41.750
<v Speaker 1>a really hot item that is proving

00:07:42.230 --> 00:07:43.750
<v Speaker 1>to be really valuable.

00:07:44.550 --> 00:07:46.790
<v Speaker 1>I'm I'm I'm looking for that whole road

00:07:46.790 --> 00:07:47.030
<v Speaker 1>map.

00:07:47.775 --> 00:07:49.535
<v Speaker 1>And right now,

00:07:50.495 --> 00:07:53.215
<v Speaker 1>the whole deployment of the project is either,

00:07:53.215 --> 00:07:54.815
<v Speaker 1>you know, manual CLI

00:07:54.975 --> 00:07:56.175
<v Speaker 1>or really

00:07:56.495 --> 00:07:57.855
<v Speaker 1>rudimentary

00:07:58.575 --> 00:08:01.440
<v Speaker 1>GitHub actions with a lot of, like, bash

00:08:01.440 --> 00:08:03.600
<v Speaker 1>run and stuff like that in there. So

00:08:04.720 --> 00:08:08.080
<v Speaker 1>kind of excited to see what the Dagger

00:08:08.240 --> 00:08:10.160
<v Speaker 1>spin on all of this looks like.

00:08:11.919 --> 00:08:12.240
<v Speaker 0>Yeah.

00:08:13.445 --> 00:08:15.125
<v Speaker 0>I am a little bit worried about this

00:08:15.125 --> 00:08:16.965
<v Speaker 0>one just because there's so much container stuff

00:08:16.965 --> 00:08:19.445
<v Speaker 0>going on, but we're gonna give it our

00:08:19.445 --> 00:08:20.965
<v Speaker 0>best shot and see what we can do

00:08:20.965 --> 00:08:21.845
<v Speaker 0>with this.

00:08:22.645 --> 00:08:23.525
<v Speaker 0>Just because

00:08:24.565 --> 00:08:26.805
<v Speaker 0>yeah. It's an interesting project to play with,

00:08:26.880 --> 00:08:28.560
<v Speaker 0>but there's been some really good improvements with

00:08:28.560 --> 00:08:30.720
<v Speaker 0>Dagger recently. And Markoff,

00:08:30.960 --> 00:08:33.520
<v Speaker 0>one of the Dagger team members, has been

00:08:33.840 --> 00:08:35.679
<v Speaker 0>showing off how to run the KTS and

00:08:35.679 --> 00:08:37.120
<v Speaker 0>save up a Dagger pipeline and stuff like

00:08:37.120 --> 00:08:38.400
<v Speaker 0>that. So, like, if we need to hook

00:08:38.400 --> 00:08:40.815
<v Speaker 0>into any of that stuff, we're certainly gonna

00:08:40.815 --> 00:08:43.214
<v Speaker 0>go and grab those examples and steal them.

00:08:43.214 --> 00:08:43.934
<v Speaker 0>But

00:08:44.095 --> 00:08:46.574
<v Speaker 0>before we go to the code and share

00:08:46.574 --> 00:08:48.654
<v Speaker 0>my screen and all that, you mentioned that

00:08:48.654 --> 00:08:50.574
<v Speaker 0>you've got some GitHub actions. Right? I just

00:08:50.574 --> 00:08:51.615
<v Speaker 0>wanna understand

00:08:52.014 --> 00:08:54.014
<v Speaker 0>when we talk about Daggerizing a project, what

00:08:54.014 --> 00:08:54.815
<v Speaker 0>we're saying is

00:08:55.410 --> 00:08:57.810
<v Speaker 0>taking things that would typically live in a

00:08:57.810 --> 00:09:00.370
<v Speaker 0>Docker Compose dot YAML, a Just file, make

00:09:00.370 --> 00:09:04.130
<v Speaker 0>file, CI pipelines, whatever they're using, any task

00:09:04.130 --> 00:09:06.290
<v Speaker 0>associated with that

00:09:07.089 --> 00:09:09.649
<v Speaker 0>project or CI or CD or even local

00:09:09.649 --> 00:09:11.845
<v Speaker 0>development environments, we wanna be able to do

00:09:11.845 --> 00:09:13.524
<v Speaker 0>that as code. That's kind of what we

00:09:13.524 --> 00:09:15.444
<v Speaker 0>wanted to do today is cover a few

00:09:15.444 --> 00:09:17.045
<v Speaker 0>of those use cases, hopefully.

00:09:17.925 --> 00:09:20.245
<v Speaker 0>So beyond the GitHub actions and don't spend

00:09:20.245 --> 00:09:21.365
<v Speaker 0>too much time going into it because we

00:09:21.365 --> 00:09:22.404
<v Speaker 0>will look at the code in a minute.

00:09:22.404 --> 00:09:23.524
<v Speaker 0>But what else do we have? What kind

00:09:23.524 --> 00:09:25.125
<v Speaker 0>of tasks are you running with your day

00:09:25.125 --> 00:09:26.324
<v Speaker 0>to day working on Cargo?

00:09:26.900 --> 00:09:30.260
<v Speaker 1>Sure. I don't have CI tasks tests yet

00:09:30.260 --> 00:09:32.660
<v Speaker 1>on on this code base. I have some

00:09:32.660 --> 00:09:35.620
<v Speaker 1>in some related code bases that I intended

00:09:35.620 --> 00:09:36.660
<v Speaker 1>to pull in.

00:09:38.420 --> 00:09:40.740
<v Speaker 1>But, I mean, you're looking for being able

00:09:40.740 --> 00:09:40.980
<v Speaker 1>to

00:09:41.834 --> 00:09:43.995
<v Speaker 1>authenticate against your cluster.

00:09:43.995 --> 00:09:46.475
<v Speaker 1>In my case, that's actually a pretty weird

00:09:46.475 --> 00:09:48.475
<v Speaker 1>topology because I'm using

00:09:48.954 --> 00:09:50.795
<v Speaker 1>tallow stuff with Omni,

00:09:50.875 --> 00:09:52.634
<v Speaker 1>and it's all OIDC

00:09:52.634 --> 00:09:53.754
<v Speaker 1>powered. So

00:09:54.250 --> 00:09:56.569
<v Speaker 1>I don't even use my local network when

00:09:56.569 --> 00:09:59.449
<v Speaker 1>I'm in my IDE. I'm all working in

00:09:59.449 --> 00:10:01.130
<v Speaker 1>code spaces in the cloud, you know, a

00:10:01.130 --> 00:10:02.730
<v Speaker 1>VM somewhere in Azure.

00:10:04.329 --> 00:10:06.569
<v Speaker 1>We need all of that to work out

00:10:06.569 --> 00:10:09.595
<v Speaker 1>really well here. I'm not entirely sure how

00:10:09.595 --> 00:10:11.835
<v Speaker 1>we're going to set up the authentication

00:10:12.955 --> 00:10:13.835
<v Speaker 1>within

00:10:13.915 --> 00:10:16.715
<v Speaker 1>Dagger. I know that it's a few fairly

00:10:16.715 --> 00:10:19.675
<v Speaker 1>simple commands on the CLI, so worst case

00:10:19.675 --> 00:10:20.475
<v Speaker 1>scenario,

00:10:20.475 --> 00:10:21.275
<v Speaker 1>we can shell out.

00:10:23.030 --> 00:10:25.030
<v Speaker 1>But I definitely

00:10:25.030 --> 00:10:25.590
<v Speaker 1>have

00:10:25.990 --> 00:10:28.710
<v Speaker 1>a number of questions there myself that we're

00:10:28.710 --> 00:10:30.950
<v Speaker 1>just kinda kinda gonna unwrap and uncover.

00:10:31.430 --> 00:10:33.830
<v Speaker 0>Wow. Talk about striking fear to me. I

00:10:33.830 --> 00:10:36.390
<v Speaker 0>mean, normally on Rawkode Live, I just sit

00:10:36.390 --> 00:10:37.995
<v Speaker 0>here like this and go, yeah, show me

00:10:37.995 --> 00:10:39.435
<v Speaker 0>a cool check. And now today, I need

00:10:39.435 --> 00:10:41.834
<v Speaker 0>to type stuff. And you're mentioning OIDC and

00:10:41.834 --> 00:10:43.995
<v Speaker 0>Talos and Omni and I'm like, oh, fuck.

00:10:44.634 --> 00:10:45.675
<v Speaker 1>You

00:10:45.675 --> 00:10:46.875
<v Speaker 1>know what? I

00:10:47.194 --> 00:10:49.035
<v Speaker 1>for the record, I did not twist your

00:10:49.035 --> 00:10:49.995
<v Speaker 1>arm into this.

00:10:50.555 --> 00:10:51.435
<v Speaker 1>So I

00:10:51.860 --> 00:10:53.380
<v Speaker 1>this was voluntary,

00:10:53.620 --> 00:10:55.540
<v Speaker 1>and I I I'm not being

00:10:55.860 --> 00:10:58.900
<v Speaker 1>crazy or sadistic or anything here. Right? No.

00:10:58.900 --> 00:11:00.340
<v Speaker 0>I I I think we're gonna have some

00:11:00.340 --> 00:11:02.420
<v Speaker 0>fun, and we're gonna install some cool challenges

00:11:02.420 --> 00:11:04.340
<v Speaker 0>and have a look at Dagger and see

00:11:04.340 --> 00:11:06.260
<v Speaker 0>how we can use it. You know, we've

00:11:05.815 --> 00:11:07.975
<v Speaker 0>what we have is a a Python project,

00:11:07.975 --> 00:11:09.575
<v Speaker 0>and we can start to lay it in

00:11:09.735 --> 00:11:12.375
<v Speaker 0>our code or Dagger pipelines as Python, as

00:11:12.375 --> 00:11:14.295
<v Speaker 0>Go, as TypeScript, wherever we want, and we

00:11:14.295 --> 00:11:15.575
<v Speaker 0>can just see how far we can push

00:11:15.575 --> 00:11:16.295
<v Speaker 0>this thing.

00:11:16.615 --> 00:11:19.015
<v Speaker 0>So Yep. I think it's about time we

00:11:19.015 --> 00:11:20.455
<v Speaker 0>start taking a look at some code, don't

00:11:20.455 --> 00:11:22.510
<v Speaker 0>you? Yes. Let's dive in.

00:11:23.389 --> 00:11:26.110
<v Speaker 0>Ta ta da. Alright. So I have already

00:11:26.110 --> 00:11:27.949
<v Speaker 0>cloned the project. I have made a couple

00:11:27.949 --> 00:11:30.990
<v Speaker 0>of changes just because of my very weird

00:11:31.069 --> 00:11:33.629
<v Speaker 0>setup. I do run XOS, so I've had

00:11:33.629 --> 00:11:35.709
<v Speaker 0>to modify your ENVRC

00:11:36.565 --> 00:11:39.045
<v Speaker 0>and add a dev env environment just to

00:11:39.045 --> 00:11:40.725
<v Speaker 0>get Python to exist

00:11:41.125 --> 00:11:44.084
<v Speaker 0>in this thing. Yep. So I'm only going

00:11:44.084 --> 00:11:45.845
<v Speaker 0>to run a dev env share. I

00:11:45.845 --> 00:11:48.165
<v Speaker 1>use dev containers for all of this, which

00:11:48.165 --> 00:11:50.165
<v Speaker 1>supplies a a lot of the same tooling.

00:11:50.420 --> 00:11:51.700
<v Speaker 1>So if

00:11:52.180 --> 00:11:55.220
<v Speaker 1>we're if we're hunting around for environment and

00:11:55.220 --> 00:11:56.020
<v Speaker 1>integration,

00:11:56.740 --> 00:11:57.620
<v Speaker 1>there's

00:11:57.620 --> 00:11:59.940
<v Speaker 1>a big difference between how you're approaching it

00:11:59.940 --> 00:12:03.300
<v Speaker 1>and my go to. But that should actually

00:12:03.300 --> 00:12:05.964
<v Speaker 1>be a neat way to really actually understand

00:12:05.964 --> 00:12:08.204
<v Speaker 1>what's in the black box instead of

00:12:09.004 --> 00:12:13.644
<v Speaker 1>just blindly running from a prepackaged starting line.

00:12:14.285 --> 00:12:15.964
<v Speaker 0>Yeah. I'm I'm trying not to go straight

00:12:15.964 --> 00:12:18.285
<v Speaker 0>into containers because Dagger itself

00:12:18.524 --> 00:12:22.020
<v Speaker 0>uses BuildKit. So I'm not sure. Yeah. So

00:12:22.100 --> 00:12:24.500
<v Speaker 1>for for the container, the dev container that

00:12:24.500 --> 00:12:26.900
<v Speaker 1>I run, like I routinely run Docker commands

00:12:26.900 --> 00:12:29.540
<v Speaker 1>with it. I use kind Kubernetes for a

00:12:29.540 --> 00:12:31.860
<v Speaker 1>lot of the in development testing, things like

00:12:31.860 --> 00:12:32.340
<v Speaker 1>that.

00:12:32.820 --> 00:12:36.745
<v Speaker 1>So it's it's it's fully compatible and supports

00:12:36.745 --> 00:12:37.465
<v Speaker 1>that

00:12:38.025 --> 00:12:40.745
<v Speaker 1>Docker CLI from within the container itself.

00:12:41.065 --> 00:12:43.705
<v Speaker 1>I ran a couple Dagger commands

00:12:44.185 --> 00:12:44.905
<v Speaker 1>and

00:12:45.305 --> 00:12:47.305
<v Speaker 1>just kinda like the hello world stuff, which

00:12:47.305 --> 00:12:48.905
<v Speaker 1>is obviously not highly complex.

00:12:49.850 --> 00:12:51.529
<v Speaker 1>And things went well so far.

00:12:51.930 --> 00:12:54.970
<v Speaker 1>Conductor is that dev container. It also

00:12:55.130 --> 00:12:57.529
<v Speaker 1>is what I use to maintain Conductor. So

00:12:57.529 --> 00:13:00.490
<v Speaker 1>it's literally maintaining Conductor in Conductor.

00:13:00.889 --> 00:13:03.050
<v Speaker 1>So I think we should be have the

00:13:03.050 --> 00:13:04.654
<v Speaker 1>freedom to do all of that if we

00:13:04.654 --> 00:13:07.134
<v Speaker 1>need to go there. But I'm also really

00:13:07.134 --> 00:13:09.055
<v Speaker 1>curious how you set up all the the

00:13:09.855 --> 00:13:12.495
<v Speaker 1>I used her end and you added

00:13:12.654 --> 00:13:14.495
<v Speaker 1>some extra stuff. So I'm gonna

00:13:14.975 --> 00:13:17.580
<v Speaker 1>enjoy how that's all tied together. Yeah.

00:13:17.900 --> 00:13:19.820
<v Speaker 0>I only added one line, which is just

00:13:19.820 --> 00:13:21.020
<v Speaker 0>this path ad

00:13:21.340 --> 00:13:23.180
<v Speaker 1>Oh, okay. Which you see me tweet about

00:13:23.180 --> 00:13:25.420
<v Speaker 0>earlier because I it was infuriating

00:13:25.420 --> 00:13:27.340
<v Speaker 0>that this is a different mackerel.

00:13:28.780 --> 00:13:31.915
<v Speaker 0>So are both are both of those actual

00:13:31.915 --> 00:13:33.435
<v Speaker 1>functions or is it just

00:13:33.835 --> 00:13:34.955
<v Speaker 1>camel case

00:13:35.435 --> 00:13:36.155
<v Speaker 1>syntax?

00:13:36.555 --> 00:13:39.595
<v Speaker 0>Yeah. Path add lowercase is when you want

00:13:39.595 --> 00:13:41.675
<v Speaker 0>to specify a variable name. So maybe you've

00:13:41.675 --> 00:13:43.675
<v Speaker 0>got like an old path and then you

00:13:43.675 --> 00:13:46.220
<v Speaker 0>can add stuff to it. Wow.

00:13:48.140 --> 00:13:48.620
<v Speaker 0>That's

00:13:49.260 --> 00:13:50.140
<v Speaker 0>That is

00:13:50.860 --> 00:13:52.060
<v Speaker 1>not intuitive

00:13:52.060 --> 00:13:52.940
<v Speaker 1>at all.

00:13:53.420 --> 00:13:56.060
<v Speaker 0>No. I lost an hour on that. I

00:13:56.060 --> 00:13:57.260
<v Speaker 1>don't know if I would have figured it

00:13:57.260 --> 00:13:58.380
<v Speaker 1>out that fast. Bravo.

00:13:59.584 --> 00:14:01.345
<v Speaker 0>Yeah. So that's all I did. And that's

00:14:01.345 --> 00:14:03.185
<v Speaker 0>just because I have Dagger locally again, and

00:14:03.185 --> 00:14:05.505
<v Speaker 0>Dagger's not available in the next package repository,

00:14:05.505 --> 00:14:06.704
<v Speaker 0>and this is next to us. So it's

00:14:06.704 --> 00:14:08.865
<v Speaker 0>very hard for me to escape next, but

00:14:08.865 --> 00:14:10.385
<v Speaker 0>the dev container is there.

00:14:10.865 --> 00:14:12.464
<v Speaker 0>So if we need to open it, we

00:14:12.464 --> 00:14:14.545
<v Speaker 0>will. But let's just try and get things

00:14:15.050 --> 00:14:15.930
<v Speaker 0>started

00:14:16.570 --> 00:14:19.290
<v Speaker 0>and take it from there. So You're warming

00:14:19.290 --> 00:14:21.209
<v Speaker 1>up. I'm gonna read through we got a

00:14:21.209 --> 00:14:23.610
<v Speaker 1>bunch of hellos here. So we've got Ravi

00:14:23.610 --> 00:14:27.850
<v Speaker 1>from San Diego. We've got Marcos from Uruguay,

00:14:28.010 --> 00:14:29.675
<v Speaker 1>Pat, Felipe,

00:14:29.835 --> 00:14:33.195
<v Speaker 1>Jeremy, Sam, Russell. Hello, all of you.

00:14:34.875 --> 00:14:36.635
<v Speaker 0>Yeah. Oh, there's Marcos who I was talking

00:14:36.635 --> 00:14:38.315
<v Speaker 0>about as well. So, hey, thank you for

00:14:38.315 --> 00:14:40.235
<v Speaker 0>joining. That means we've got help when we

00:14:40.235 --> 00:14:40.635
<v Speaker 0>need it.

00:14:42.870 --> 00:14:44.630
<v Speaker 0>We can proceed with confidence.

00:14:45.350 --> 00:14:47.750
<v Speaker 0>And some Dagger team as well. Awesome. Hello,

00:14:47.750 --> 00:14:48.310
<v Speaker 0>everybody.

00:14:50.710 --> 00:14:53.830
<v Speaker 1>My voice level is low. Yeah. I'll turn

00:14:53.830 --> 00:14:55.995
<v Speaker 1>that up a bit. Hopefully, that helps.

00:14:57.355 --> 00:14:59.834
<v Speaker 0>Yeah. Russell says your bamboo print screens are

00:14:59.834 --> 00:15:02.235
<v Speaker 0>awesome. Yeah. They are awesome. I was enjoying

00:15:02.235 --> 00:15:04.315
<v Speaker 0>that. Was a lot of fun. It was

00:15:04.315 --> 00:15:06.635
<v Speaker 1>a desperate attempt to hide a bunch of

00:15:06.635 --> 00:15:08.555
<v Speaker 1>stuff when I was rearranging things in the

00:15:08.555 --> 00:15:10.400
<v Speaker 1>house one day, and then I was like,

00:15:10.400 --> 00:15:12.160
<v Speaker 1>I'm just keeping this. This is great.

00:15:14.240 --> 00:15:16.080
<v Speaker 0>Alright. There is all the hellos. Thank you

00:15:16.080 --> 00:15:17.200
<v Speaker 0>all for joining us,

00:15:17.760 --> 00:15:19.840
<v Speaker 0>and definitely glad to see some Dagger folks

00:15:19.840 --> 00:15:21.520
<v Speaker 0>in case the help is needed.

00:15:21.840 --> 00:15:22.480
<v Speaker 0>So

00:15:23.485 --> 00:15:25.324
<v Speaker 0>let's see. Now, you do have a make

00:15:25.324 --> 00:15:26.045
<v Speaker 0>file.

00:15:27.005 --> 00:15:28.765
<v Speaker 1>I I do. It is

00:15:29.885 --> 00:15:30.925
<v Speaker 0>It's gnarly.

00:15:31.404 --> 00:15:33.885
<v Speaker 1>It is not well maintained right now because

00:15:33.885 --> 00:15:36.910
<v Speaker 1>the project during the refactor has changed a

00:15:36.910 --> 00:15:39.230
<v Speaker 1>lot. So I was gonna wait for the

00:15:39.230 --> 00:15:40.270
<v Speaker 1>refactor

00:15:40.270 --> 00:15:41.150
<v Speaker 1>to kinda

00:15:41.790 --> 00:15:43.710
<v Speaker 1>tidy up and then

00:15:44.110 --> 00:15:45.790
<v Speaker 1>double check to make file, and I'm kinda

00:15:45.790 --> 00:15:48.190
<v Speaker 1>tempted to go into task files anyway.

00:15:48.670 --> 00:15:51.725
<v Speaker 1>But tell me, like, with the Dagger stuff,

00:15:51.725 --> 00:15:52.365
<v Speaker 1>like,

00:15:52.605 --> 00:15:55.165
<v Speaker 1>does Dagger end up replacing a lot of

00:15:55.165 --> 00:15:56.765
<v Speaker 1>the logic that I have to

00:15:57.325 --> 00:16:00.445
<v Speaker 1>painfully write in this makefile syntax?

00:16:00.445 --> 00:16:02.125
<v Speaker 1>Or what is the op what are our

00:16:02.125 --> 00:16:02.765
<v Speaker 1>options there?

00:16:03.600 --> 00:16:05.360
<v Speaker 0>Yeah. I mean, I found with my own

00:16:05.360 --> 00:16:07.440
<v Speaker 0>repositories and adopting Dagger,

00:16:08.080 --> 00:16:10.000
<v Speaker 0>I I don't even need just files, make

00:16:10.000 --> 00:16:12.240
<v Speaker 0>files. I'm not writing Bash scripts anymore. I'm

00:16:12.240 --> 00:16:13.520
<v Speaker 0>pretty much just writing

00:16:14.080 --> 00:16:17.384
<v Speaker 0>a Dagger task for everything because the nice

00:16:17.384 --> 00:16:19.865
<v Speaker 0>thing about it is is cached exceptionally well

00:16:19.865 --> 00:16:22.584
<v Speaker 0>at BuildKit via inputs and outputs, you know,

00:16:22.584 --> 00:16:24.745
<v Speaker 0>like, caching in any system.

00:16:25.144 --> 00:16:27.865
<v Speaker 0>Then they're composable. So, like, you know, dependencies

00:16:27.865 --> 00:16:30.105
<v Speaker 0>across tasks are very easy to tie together

00:16:30.105 --> 00:16:31.900
<v Speaker 0>because it's just a function call at the

00:16:31.900 --> 00:16:34.460
<v Speaker 0>end of the day. So applying that methodology

00:16:34.460 --> 00:16:36.700
<v Speaker 0>to my pipelines is really hard to go

00:16:36.700 --> 00:16:39.180
<v Speaker 0>backwards. And I started with repository to have

00:16:39.180 --> 00:16:40.140
<v Speaker 0>a just file,

00:16:40.460 --> 00:16:42.140
<v Speaker 0>but that's just because I've not got the

00:16:42.140 --> 00:16:43.420
<v Speaker 0>time to sit down and write more Dagger

00:16:43.420 --> 00:16:46.065
<v Speaker 0>right now. But I the more I write,

00:16:46.065 --> 00:16:48.145
<v Speaker 0>the the happier I get for sure. Well,

00:16:48.145 --> 00:16:50.545
<v Speaker 1>I mean, you mentioned Makefiles and the Bash

00:16:50.545 --> 00:16:52.545
<v Speaker 1>scripts. And one of the reasons that those

00:16:52.545 --> 00:16:55.905
<v Speaker 1>two go together so strongly is Makefiles have

00:16:55.905 --> 00:16:58.865
<v Speaker 1>very limited ability to maintain just

00:16:59.290 --> 00:17:02.090
<v Speaker 1>inputs and outputs from different tasks in a

00:17:02.090 --> 00:17:04.970
<v Speaker 1>make file. So that becomes like really really

00:17:04.970 --> 00:17:07.450
<v Speaker 1>difficult if you have to pass an output

00:17:07.450 --> 00:17:10.730
<v Speaker 1>into something so that you're dynamically assembling

00:17:10.730 --> 00:17:11.609
<v Speaker 1>the whole project.

00:17:13.925 --> 00:17:16.005
<v Speaker 1>So, yeah, I'm I I have I have

00:17:16.005 --> 00:17:18.645
<v Speaker 1>high hopes here that this will merge into

00:17:18.645 --> 00:17:21.445
<v Speaker 1>the product project and and and be a

00:17:21.445 --> 00:17:24.484
<v Speaker 1>a long lived bit of code. Yeah. Plus,

00:17:24.484 --> 00:17:26.405
<v Speaker 0>you also get to say goodbye to phony.

00:17:26.405 --> 00:17:27.765
<v Speaker 1>Like Oh my gosh.

00:17:28.670 --> 00:17:30.590
<v Speaker 0>I've had twenty odd years of phony. I'm

00:17:30.590 --> 00:17:31.950
<v Speaker 0>done with phony, so I don't want phony

00:17:31.950 --> 00:17:32.669
<v Speaker 0>anymore.

00:17:32.990 --> 00:17:35.309
<v Speaker 1>I I've had half that, and I'm still

00:17:35.309 --> 00:17:36.749
<v Speaker 1>ready to be done with it.

00:17:37.950 --> 00:17:40.270
<v Speaker 0>Alright. So you could that's wonderful help target.

00:17:40.270 --> 00:17:41.549
<v Speaker 0>And I think this would be the the

00:17:41.549 --> 00:17:43.150
<v Speaker 0>kind of starting point as we try to

00:17:43.150 --> 00:17:44.965
<v Speaker 0>work out what to start with first, what

00:17:44.965 --> 00:17:45.845
<v Speaker 0>to replace.

00:17:46.005 --> 00:17:46.484
<v Speaker 0>Yeah.

00:17:48.325 --> 00:17:51.205
<v Speaker 1>I think as far as the steps here,

00:17:51.205 --> 00:17:52.885
<v Speaker 1>the first thing we need to do is

00:17:52.885 --> 00:17:54.565
<v Speaker 1>figure out our authentication.

00:17:56.400 --> 00:17:59.360
<v Speaker 1>What we're doing in Cargo is using a

00:17:59.360 --> 00:18:01.200
<v Speaker 1>number of different cloud services.

00:18:01.600 --> 00:18:03.680
<v Speaker 1>At this point, it's starting to really add

00:18:03.680 --> 00:18:04.880
<v Speaker 1>up because

00:18:05.440 --> 00:18:08.240
<v Speaker 1>I am using Pulumi IAC for the project

00:18:08.240 --> 00:18:11.005
<v Speaker 1>at at the moment. I have secrets all

00:18:11.005 --> 00:18:12.924
<v Speaker 1>stored up in Pulumi.

00:18:13.085 --> 00:18:13.965
<v Speaker 1>I'm using

00:18:14.285 --> 00:18:17.725
<v Speaker 1>my Omni account over on the Sidero side

00:18:17.725 --> 00:18:18.525
<v Speaker 1>of the house,

00:18:19.485 --> 00:18:22.045
<v Speaker 1>and that's necessary for actually authenticating

00:18:22.045 --> 00:18:25.005
<v Speaker 1>to the Kubernetes API the way that I

00:18:24.640 --> 00:18:26.080
<v Speaker 1>use Talos.

00:18:26.960 --> 00:18:29.360
<v Speaker 1>And then now, if we're using Dagger, that

00:18:29.360 --> 00:18:31.360
<v Speaker 1>is another cloud account that we have to

00:18:31.360 --> 00:18:32.559
<v Speaker 1>authenticate against.

00:18:33.120 --> 00:18:34.720
<v Speaker 1>So I've

00:18:34.720 --> 00:18:35.279
<v Speaker 1>added

00:18:36.000 --> 00:18:39.154
<v Speaker 1>the token for Dagger to

00:18:39.235 --> 00:18:41.634
<v Speaker 1>my GitHub Actions environment

00:18:41.875 --> 00:18:43.794
<v Speaker 1>and my Codespaces environment.

00:18:44.434 --> 00:18:45.955
<v Speaker 1>So that authentication

00:18:45.955 --> 00:18:47.235
<v Speaker 1>should be an

00:18:47.395 --> 00:18:49.955
<v Speaker 1>environment variable, but I don't even know how

00:18:49.955 --> 00:18:52.570
<v Speaker 1>we go about just getting started to be

00:18:52.570 --> 00:18:55.530
<v Speaker 1>able to run those basic authentication

00:18:55.530 --> 00:18:57.929
<v Speaker 1>pieces if we wanna start there.

00:18:59.049 --> 00:19:02.409
<v Speaker 0>Yeah. Well, the Dagger token is 100% optional.

00:19:02.409 --> 00:19:04.570
<v Speaker 0>It's a value add with Dagger cloud. So

00:19:04.570 --> 00:19:06.169
<v Speaker 0>everything that we do, we're gonna start off

00:19:06.169 --> 00:19:06.490
<v Speaker 0>locally.

00:19:07.295 --> 00:19:08.815
<v Speaker 0>Okay. And then we'll start to work out

00:19:08.815 --> 00:19:11.135
<v Speaker 0>how we can bring in, you know, like,

00:19:11.135 --> 00:19:13.054
<v Speaker 0>spinning up a kind cluster for instance. Maybe

00:19:13.054 --> 00:19:14.095
<v Speaker 0>we can get that done.

00:19:14.655 --> 00:19:16.895
<v Speaker 0>For sure. Do you have any other tasks

00:19:16.895 --> 00:19:17.774
<v Speaker 0>that aren't

00:19:18.174 --> 00:19:19.695
<v Speaker 0>using for me in Telus?

00:19:20.250 --> 00:19:21.289
<v Speaker 1>Yeah. So

00:19:22.010 --> 00:19:24.250
<v Speaker 1>as far as the KIND testing goes,

00:19:24.570 --> 00:19:26.010
<v Speaker 1>we do have

00:19:27.530 --> 00:19:30.090
<v Speaker 1>support in the IAC for switching between KIND

00:19:30.090 --> 00:19:32.410
<v Speaker 1>and Talos. Both are a little bit different

00:19:32.410 --> 00:19:34.695
<v Speaker 1>in some of the components that they actually

00:19:34.695 --> 00:19:36.455
<v Speaker 1>roll out, how those variables

00:19:36.695 --> 00:19:37.494
<v Speaker 1>map.

00:19:37.495 --> 00:19:39.575
<v Speaker 1>So we can set

00:19:39.735 --> 00:19:40.455
<v Speaker 1>our

00:19:40.775 --> 00:19:42.855
<v Speaker 1>IAC config to include

00:19:43.015 --> 00:19:45.014
<v Speaker 1>that we are deploying the kind,

00:19:45.495 --> 00:19:46.855
<v Speaker 1>and then we just need to get the

00:19:46.855 --> 00:19:48.619
<v Speaker 1>kind cluster started.

00:19:48.620 --> 00:19:51.979
<v Speaker 1>I do have in the hack directory.

00:19:52.539 --> 00:19:54.859
<v Speaker 1>I have a kind config.

00:19:56.220 --> 00:19:58.379
<v Speaker 1>So if we want,

00:19:59.419 --> 00:20:01.684
<v Speaker 1>we can get that started.

00:20:02.165 --> 00:20:05.045
<v Speaker 1>The kind task in make file also creates

00:20:05.045 --> 00:20:06.965
<v Speaker 1>a couple of volumes that

00:20:07.525 --> 00:20:09.845
<v Speaker 1>the config mounts into

00:20:10.085 --> 00:20:12.485
<v Speaker 1>the kind cluster just for making it

00:20:12.885 --> 00:20:15.925
<v Speaker 1>easier to build and destroy kind clusters without

00:20:15.925 --> 00:20:17.525
<v Speaker 1>redownloading

00:20:16.940 --> 00:20:19.259
<v Speaker 1>tons of images every single cycle.

00:20:19.420 --> 00:20:20.059
<v Speaker 0>Mhmm.

00:20:20.460 --> 00:20:22.619
<v Speaker 1>So if we want to start there,

00:20:23.100 --> 00:20:24.379
<v Speaker 1>that is all local.

00:20:26.620 --> 00:20:27.340
<v Speaker 0>Okay.

00:20:29.260 --> 00:20:30.059
<v Speaker 0>Right.

00:20:30.460 --> 00:20:32.220
<v Speaker 0>So I'm I'm just trying to understand

00:20:32.725 --> 00:20:34.484
<v Speaker 0>the the flow here.

00:20:34.725 --> 00:20:35.284
<v Speaker 0>Yeah.

00:20:35.924 --> 00:20:38.085
<v Speaker 0>So you've got two different avenues when you

00:20:38.085 --> 00:20:41.125
<v Speaker 0>run your tests. One is against cloud infrastructure,

00:20:41.125 --> 00:20:43.204
<v Speaker 0>which Pulumi provisions, and the other is against

00:20:43.205 --> 00:20:44.325
<v Speaker 0>kind infrastructure,

00:20:44.325 --> 00:20:45.845
<v Speaker 0>which Pulumi provisions. Is that correct?

00:20:47.080 --> 00:20:49.879
<v Speaker 1>Kind infrastructure that the make file provisions.

00:20:49.960 --> 00:20:52.360
<v Speaker 0>Well, we provision kind, but does Pulumi still

00:20:52.360 --> 00:20:55.639
<v Speaker 0>deploy resources to that? Yes. Pulumi still deploys

00:20:55.639 --> 00:20:57.799
<v Speaker 1>to that based on the koop config.

00:21:00.905 --> 00:21:03.785
<v Speaker 0>Okay. Cool. Both paths work off of the

00:21:03.785 --> 00:21:05.865
<v Speaker 1>kube config locally. So

00:21:06.425 --> 00:21:08.105
<v Speaker 0>Yeah. So something we're gonna want to do

00:21:08.105 --> 00:21:09.945
<v Speaker 0>then is to

00:21:10.105 --> 00:21:11.785
<v Speaker 0>obviously get our Dagger

00:21:12.400 --> 00:21:14.560
<v Speaker 0>instantiated. Right? We need the boilerplate so we

00:21:14.560 --> 00:21:15.919
<v Speaker 0>can start putting things together.

00:21:16.960 --> 00:21:19.600
<v Speaker 0>We can then look at writing some Pulumi

00:21:20.960 --> 00:21:23.520
<v Speaker 0>tasks that can execute Pulumi commands. We'll start

00:21:23.520 --> 00:21:25.120
<v Speaker 0>with something really simple, which is just Pulumi

00:21:25.120 --> 00:21:27.035
<v Speaker 0>test dash version. Then we'll try and bring

00:21:27.035 --> 00:21:28.395
<v Speaker 0>in the cane component and see if we

00:21:28.395 --> 00:21:30.715
<v Speaker 0>can get Pulumi to actually run against that.

00:21:30.715 --> 00:21:33.515
<v Speaker 0>Now you mentioned secrets, which does have which

00:21:33.515 --> 00:21:34.875
<v Speaker 0>has me also a little bit worried. Do

00:21:34.875 --> 00:21:36.554
<v Speaker 0>we need secrets when working with the cane

00:21:36.554 --> 00:21:37.195
<v Speaker 0>setup?

00:21:38.955 --> 00:21:40.980
<v Speaker 1>You know what? I

00:21:41.940 --> 00:21:42.740
<v Speaker 1>don't

00:21:43.940 --> 00:21:45.220
<v Speaker 1>we do need to

00:21:45.700 --> 00:21:47.299
<v Speaker 1>open the

00:21:49.540 --> 00:21:51.140
<v Speaker 1>stack. Well, I mean, need to select the

00:21:51.140 --> 00:21:53.220
<v Speaker 1>stack that we're using. And Azure's in Pulumi

00:21:53.220 --> 00:21:53.780
<v Speaker 0>Cloud, is it?

00:21:55.415 --> 00:21:58.455
<v Speaker 1>My state is currently stored in Pulumi Cloud.

00:21:58.455 --> 00:22:01.815
<v Speaker 1>So Pulumi login and then Pulumi stack select

00:22:03.575 --> 00:22:06.135
<v Speaker 1>and kind create cluster. Those are the three

00:22:06.135 --> 00:22:07.575
<v Speaker 1>commands that we need to do before we

00:22:07.575 --> 00:22:09.015
<v Speaker 1>actually start deploying.

00:22:10.399 --> 00:22:13.200
<v Speaker 0>So can I let me just where's the

00:22:13.200 --> 00:22:15.759
<v Speaker 0>Pulumi code? Is that under no. Not stores.

00:22:16.320 --> 00:22:17.120
<v Speaker 1>Pulumi

00:22:17.120 --> 00:22:17.999
<v Speaker 1>directory.

00:22:18.960 --> 00:22:20.719
<v Speaker 0>I don't have a Pulumi directory.

00:22:21.120 --> 00:22:22.720
<v Speaker 1>What branch are we on?

00:22:23.695 --> 00:22:27.615
<v Speaker 1>You are on the reef the the ah,

00:22:27.615 --> 00:22:29.535
<v Speaker 1>actually, I don't have the right branch open

00:22:29.535 --> 00:22:30.335
<v Speaker 1>in my

00:22:33.775 --> 00:22:34.895
<v Speaker 1>Versus cup.

00:22:36.655 --> 00:22:37.295
<v Speaker 1>Hang on.

00:22:42.630 --> 00:22:44.070
<v Speaker 1>Git checkout.

00:22:44.630 --> 00:22:46.309
<v Speaker 1>Rawkode Dagger.

00:22:46.309 --> 00:22:48.149
<v Speaker 1>IO CICD.

00:22:49.429 --> 00:22:54.565
<v Speaker 1>Sweet. And the IAC is in the Pulumi

00:22:54.565 --> 00:22:57.125
<v Speaker 1>directory. Yeah. With the main dot py in

00:22:57.125 --> 00:22:58.565
<v Speaker 1>there. So if you look

00:22:59.365 --> 00:23:01.685
<v Speaker 1>I need to zoom in on the screen

00:23:01.685 --> 00:23:03.285
<v Speaker 1>a little bit, but I can see.

00:23:07.039 --> 00:23:09.039
<v Speaker 0>I've only got the main branch. Yeah. Yeah.

00:23:09.039 --> 00:23:12.559
<v Speaker 1>Yeah. Okay. So, there's a branch specifically for

00:23:12.559 --> 00:23:13.679
<v Speaker 1>you in here.

00:23:15.120 --> 00:23:15.679
<v Speaker 1>I

00:23:16.639 --> 00:23:18.239
<v Speaker 1>don't know if you want

00:23:18.880 --> 00:23:19.440
<v Speaker 1>to

00:23:20.575 --> 00:23:23.054
<v Speaker 1>how you wanna carry over the environment stuff

00:23:23.054 --> 00:23:24.335
<v Speaker 1>that you've done so far.

00:23:24.815 --> 00:23:26.254
<v Speaker 0>It it'll be okay.

00:23:26.654 --> 00:23:28.654
<v Speaker 1>Okay. Let's be If you do

00:23:29.534 --> 00:23:32.014
<v Speaker 1>git branch dash a,

00:23:32.095 --> 00:23:33.774
<v Speaker 1>you can copy paste the name of your

00:23:33.774 --> 00:23:34.414
<v Speaker 1>branch over.

00:23:36.960 --> 00:23:38.240
<v Speaker 0>This one. Okay.

00:23:38.480 --> 00:23:39.920
<v Speaker 1>Yep. There it is.

00:23:43.760 --> 00:23:44.640
<v Speaker 0>Okay.

00:23:44.800 --> 00:23:46.320
<v Speaker 0>So stash

00:23:46.400 --> 00:23:47.120
<v Speaker 0>switch.

00:23:49.404 --> 00:23:50.524
<v Speaker 0>Nice stash too.

00:23:54.205 --> 00:23:57.484
<v Speaker 1>Yeah. Main on this project is currently

00:23:59.325 --> 00:24:00.125
<v Speaker 1>hugely

00:24:00.125 --> 00:24:03.120
<v Speaker 1>behind the refactor. That was just instantiating

00:24:03.120 --> 00:24:05.280
<v Speaker 1>all the pieces in the most rudimentary way

00:24:05.280 --> 00:24:06.880
<v Speaker 1>so that I could see what I needed

00:24:06.880 --> 00:24:09.440
<v Speaker 1>to turn in for common patterns and simplify.

00:24:10.320 --> 00:24:13.280
<v Speaker 1>And now I'm I I've been refactoring the

00:24:13.280 --> 00:24:14.800
<v Speaker 1>whole code base to

00:24:15.445 --> 00:24:18.085
<v Speaker 1>actually apply some consistent design and stuff like

00:24:18.085 --> 00:24:18.645
<v Speaker 1>that.

00:24:20.085 --> 00:24:21.685
<v Speaker 1>More reusable code,

00:24:21.765 --> 00:24:23.845
<v Speaker 1>modular, all that. Alright.

00:24:23.845 --> 00:24:24.485
<v Speaker 1>So

00:24:25.765 --> 00:24:27.685
<v Speaker 0>I think the problem is

00:24:28.165 --> 00:24:29.525
<v Speaker 0>where did we get that? Yeah.

00:24:30.250 --> 00:24:31.690
<v Speaker 0>And nothing is staged.

00:24:35.049 --> 00:24:36.729
<v Speaker 0>Why is this a new fail?

00:24:39.130 --> 00:24:40.169
<v Speaker 0>Doesn't

00:24:40.169 --> 00:24:42.570
<v Speaker 0>matter. Okay. Let's go back to the switch

00:24:42.570 --> 00:24:43.049
<v Speaker 0>command.

00:24:44.275 --> 00:24:45.475
<v Speaker 0>Stash.

00:24:46.275 --> 00:24:47.794
<v Speaker 0>Good. Switch.

00:24:49.315 --> 00:24:50.835
<v Speaker 0>Find my path add

00:24:52.195 --> 00:24:53.875
<v Speaker 0>and pop back over.

00:24:55.315 --> 00:24:58.610
<v Speaker 1>Pulumi directory right there. Uh-huh. Cool.

00:24:58.770 --> 00:25:00.050
<v Speaker 1>Yay. Okay.

00:25:01.010 --> 00:25:04.530
<v Speaker 0>Alright. So this is Pulumi config stack.

00:25:04.610 --> 00:25:05.250
<v Speaker 0>Mhmm.

00:25:07.250 --> 00:25:08.050
<v Speaker 0>Alright.

00:25:08.050 --> 00:25:09.730
<v Speaker 1>Yeah. And a lot of the logic in

00:25:09.730 --> 00:25:11.490
<v Speaker 1>this IAC is

00:25:12.130 --> 00:25:15.945
<v Speaker 1>targeted to be replaced with a Golang operator.

00:25:15.945 --> 00:25:16.505
<v Speaker 1>So

00:25:16.985 --> 00:25:18.985
<v Speaker 1>way more way more code to come in

00:25:18.985 --> 00:25:19.705
<v Speaker 1>the future.

00:25:21.065 --> 00:25:22.025
<v Speaker 0>Alright.

00:25:22.505 --> 00:25:23.145
<v Speaker 0>So

00:25:24.025 --> 00:25:25.705
<v Speaker 0>let's actually try and run a Dagger command.

00:25:25.705 --> 00:25:27.065
<v Speaker 0>What are we? Twenty five minutes in and

00:25:27.065 --> 00:25:28.265
<v Speaker 0>we haven't run a Dagger command.

00:25:29.390 --> 00:25:31.070
<v Speaker 1>We can do a hello world if you

00:25:31.070 --> 00:25:31.870
<v Speaker 1>want. Or

00:25:32.750 --> 00:25:34.350
<v Speaker 0>Well, when we set up Dagger, we have

00:25:34.350 --> 00:25:36.350
<v Speaker 0>to provide which SDK we want and where

00:25:36.350 --> 00:25:38.270
<v Speaker 0>we want it to live. So we can

00:25:38.270 --> 00:25:39.869
<v Speaker 0>keep it in a Dagger directory.

00:25:40.429 --> 00:25:41.710
<v Speaker 0>Now SDK wise,

00:25:42.605 --> 00:25:45.885
<v Speaker 0>you wanting Golang, TypeScript, Python? Yeah.

00:25:45.885 --> 00:25:47.965
<v Speaker 1>Let's go with let's go with Python. That

00:25:47.965 --> 00:25:50.685
<v Speaker 1>is the language you're using for this generation

00:25:50.685 --> 00:25:51.645
<v Speaker 1>of the project.

00:25:52.525 --> 00:25:54.125
<v Speaker 1>Yeah. Let's keep it consistent.

00:25:55.240 --> 00:25:57.400
<v Speaker 0>You've never seen me write Python. That's the

00:25:57.400 --> 00:25:58.119
<v Speaker 0>challenge.

00:26:01.160 --> 00:26:02.679
<v Speaker 0>We'll give that a moment. So let's just

00:26:02.679 --> 00:26:04.600
<v Speaker 0>create an all the the boilerplate that we

00:26:04.600 --> 00:26:04.919
<v Speaker 0>need.

00:26:08.135 --> 00:26:10.295
<v Speaker 1>So a little dagger in it here. We

00:26:10.295 --> 00:26:10.855
<v Speaker 1>have

00:26:11.575 --> 00:26:12.615
<v Speaker 1>the SDK.

00:26:12.934 --> 00:26:13.975
<v Speaker 1>We have

00:26:14.295 --> 00:26:16.215
<v Speaker 1>I'm guessing we're getting a new directory out

00:26:16.215 --> 00:26:16.855
<v Speaker 1>of this.

00:26:17.815 --> 00:26:19.895
<v Speaker 0>Yeah. It's gonna create a dagger directory with

00:26:19.895 --> 00:26:22.740
<v Speaker 0>our first kind of Dagger function, Dagger task,

00:26:22.740 --> 00:26:23.219
<v Speaker 0>which,

00:26:24.019 --> 00:26:26.740
<v Speaker 0>you know, we can start to make modifications

00:26:26.740 --> 00:26:28.659
<v Speaker 0>to it. We can drop in some Pulumi

00:26:28.659 --> 00:26:29.460
<v Speaker 0>containers.

00:26:29.460 --> 00:26:31.059
<v Speaker 0>We can run Pulumi commands,

00:26:31.380 --> 00:26:33.460
<v Speaker 0>and then we'll just tackle the problems one

00:26:33.460 --> 00:26:34.340
<v Speaker 0>at a time as we go.

00:26:35.055 --> 00:26:37.855
<v Speaker 0>Sure. But we now have an initialized module.

00:26:37.855 --> 00:26:39.375
<v Speaker 0>So what does that mean?

00:26:40.095 --> 00:26:41.535
<v Speaker 0>Well, the first thing we get is just

00:26:41.535 --> 00:26:42.815
<v Speaker 0>a Dagger dot JSON,

00:26:43.375 --> 00:26:44.975
<v Speaker 0>which just tells us where the Dagger code

00:26:44.975 --> 00:26:47.055
<v Speaker 0>lives, which is in the Dagger directory

00:26:47.135 --> 00:26:48.975
<v Speaker 0>and the SDK that we're using.

00:26:50.390 --> 00:26:51.830
<v Speaker 0>We pop this open.

00:26:53.590 --> 00:26:56.710
<v Speaker 0>We have our init dot py where

00:26:58.630 --> 00:27:01.029
<v Speaker 0>we have a container echo function and a

00:27:01.029 --> 00:27:02.710
<v Speaker 0>grep dir function.

00:27:03.350 --> 00:27:05.924
<v Speaker 0>So that is the first two functions that

00:27:05.924 --> 00:27:08.484
<v Speaker 0>we can run with the the Dagger CLI.

00:27:08.725 --> 00:27:10.885
<v Speaker 1>Okay. So that with exec there on line

00:27:10.885 --> 00:27:11.764
<v Speaker 1>31

00:27:11.765 --> 00:27:12.404
<v Speaker 1>is,

00:27:13.125 --> 00:27:14.164
<v Speaker 1>for example,

00:27:14.404 --> 00:27:15.124
<v Speaker 1>just

00:27:15.605 --> 00:27:18.644
<v Speaker 1>basically shelling out running a bash command. Right?

00:27:21.360 --> 00:27:23.120
<v Speaker 0>Yeah. And a and a container.

00:27:23.600 --> 00:27:25.759
<v Speaker 1>That's true. That is in a container.

00:27:26.400 --> 00:27:29.680
<v Speaker 0>So everything that Dagger does starts with a

00:27:29.680 --> 00:27:32.240
<v Speaker 0>from statement, just like a Docker file. Yeah.

00:27:32.880 --> 00:27:34.400
<v Speaker 0>We can run from Alpine. We can run

00:27:34.400 --> 00:27:36.160
<v Speaker 0>from Ubuntu. We can run from Nexus. We

00:27:36.160 --> 00:27:37.264
<v Speaker 0>can run from Python,

00:27:37.424 --> 00:27:38.384
<v Speaker 0>whatever you want.

00:27:39.265 --> 00:27:40.144
<v Speaker 0>We then

00:27:40.945 --> 00:27:43.184
<v Speaker 0>add mounted directories. We add caches. We add

00:27:43.184 --> 00:27:45.505
<v Speaker 0>working directories. We can execute one or more

00:27:45.505 --> 00:27:46.304
<v Speaker 0>commands.

00:27:46.465 --> 00:27:48.385
<v Speaker 0>And all we're doing is just building up

00:27:49.010 --> 00:27:50.770
<v Speaker 0>all the steps that we've been typically put

00:27:50.770 --> 00:27:53.170
<v Speaker 0>in a bash or a makefile.

00:27:53.250 --> 00:27:55.330
<v Speaker 0>We're doing them in a containerized environment where

00:27:55.330 --> 00:27:57.890
<v Speaker 0>we have very strong inputs and outputs. Right?

00:27:57.890 --> 00:27:59.490
<v Speaker 0>We know what goes into the container.

00:27:59.890 --> 00:28:01.810
<v Speaker 0>And Yeah. It's in content addressable and we

00:28:01.810 --> 00:28:03.410
<v Speaker 0>know what comes out and we can reference

00:28:03.410 --> 00:28:04.290
<v Speaker 0>things from containers,

00:28:04.755 --> 00:28:06.755
<v Speaker 0>move them around, and do the juggly dance

00:28:06.755 --> 00:28:08.595
<v Speaker 0>and all that without ever doing anything on

00:28:08.595 --> 00:28:10.034
<v Speaker 0>the phone. That juggly dance.

00:28:10.355 --> 00:28:11.075
<v Speaker 1>K.

00:28:12.995 --> 00:28:14.515
<v Speaker 0>What is Marcus saying?

00:28:15.075 --> 00:28:17.075
<v Speaker 0>If you're using Python, you'd want to do

00:28:17.075 --> 00:28:17.875
<v Speaker 0>Python

00:28:17.955 --> 00:28:20.910
<v Speaker 0>v n. I already have a VMs. I

00:28:20.910 --> 00:28:22.590
<v Speaker 0>set it up with

00:28:22.670 --> 00:28:24.750
<v Speaker 0>dev env. So Yeah.

00:28:24.990 --> 00:28:27.710
<v Speaker 0>We've have a local Python virtual environment with

00:28:27.710 --> 00:28:31.630
<v Speaker 0>UV, which is also installed also requirements.text

00:28:30.885 --> 00:28:33.205
<v Speaker 0>that are part of the project. So

00:28:33.845 --> 00:28:34.485
<v Speaker 0>I

00:28:35.445 --> 00:28:38.164
<v Speaker 0>don't think we'll need to specifically

00:28:38.565 --> 00:28:41.125
<v Speaker 0>get its own VM for for Dagger.

00:28:42.405 --> 00:28:44.325
<v Speaker 0>Although, you are saying to run that in

00:28:44.325 --> 00:28:45.285
<v Speaker 0>my Dagger directory.

00:28:45.940 --> 00:28:47.540
<v Speaker 1>So I am curious.

00:28:47.700 --> 00:28:49.300
<v Speaker 1>I'm guessing we're gonna be able to set

00:28:49.300 --> 00:28:50.740
<v Speaker 1>environment variables

00:28:51.140 --> 00:28:52.580
<v Speaker 1>in these containers.

00:28:52.660 --> 00:28:53.940
<v Speaker 1>And I wonder

00:28:54.420 --> 00:28:56.740
<v Speaker 1>since we can do mounted directories and all

00:28:56.740 --> 00:28:57.940
<v Speaker 1>of that, it should be

00:28:59.645 --> 00:29:02.044
<v Speaker 1>reasonable to assemble everything

00:29:02.845 --> 00:29:05.004
<v Speaker 1>so that credentials,

00:29:05.005 --> 00:29:06.284
<v Speaker 1>coop configs,

00:29:08.365 --> 00:29:11.565
<v Speaker 1>all of that manages to cross the boundary

00:29:11.565 --> 00:29:13.164
<v Speaker 1>into the Dagger

00:29:13.325 --> 00:29:13.885
<v Speaker 1>containers.

00:29:16.029 --> 00:29:18.509
<v Speaker 1>But it might be just a tad tedious.

00:29:18.590 --> 00:29:20.350
<v Speaker 1>I'm trying to think through how that's all

00:29:20.350 --> 00:29:20.989
<v Speaker 1>gonna go.

00:29:21.789 --> 00:29:24.109
<v Speaker 0>So there are ways to get secrets in

00:29:24.190 --> 00:29:26.429
<v Speaker 0>to our Dagger containers in a secure fashion.

00:29:29.315 --> 00:29:31.554
<v Speaker 0>Let let's just start making some progress. Right?

00:29:31.554 --> 00:29:32.595
<v Speaker 0>Let's let's see if we can run our

00:29:32.595 --> 00:29:34.355
<v Speaker 0>first Dagger function. Alright. So we got a

00:29:34.355 --> 00:29:35.394
<v Speaker 0>Dagger CLI.

00:29:37.155 --> 00:29:38.995
<v Speaker 0>From here, we can call functions. We can

00:29:38.995 --> 00:29:39.955
<v Speaker 0>list functions,

00:29:40.115 --> 00:29:41.634
<v Speaker 0>you know, everything that we need.

00:29:42.115 --> 00:29:43.235
<v Speaker 0>If we do functions,

00:29:45.350 --> 00:29:46.789
<v Speaker 0>it does container

00:29:46.789 --> 00:29:48.710
<v Speaker 0>stuff, and then it should give us a

00:29:48.710 --> 00:29:49.669
<v Speaker 0>list of functions.

00:29:49.990 --> 00:29:52.710
<v Speaker 0>Marco says my editor seems happy. It's a

00:29:52.710 --> 00:29:54.630
<v Speaker 0>little bit happy. It's obviously it's not picking

00:29:54.630 --> 00:29:56.789
<v Speaker 0>up the DAG, so you're we may need

00:29:56.789 --> 00:29:58.950
<v Speaker 0>to do a virtual environment just for this,

00:29:58.950 --> 00:30:01.045
<v Speaker 0>but let's wait and see for now.

00:30:01.605 --> 00:30:02.485
<v Speaker 0>So this

00:30:02.805 --> 00:30:04.805
<v Speaker 0>this is what's kinda cool about Dagger is

00:30:04.805 --> 00:30:07.125
<v Speaker 0>that everything in our function here,

00:30:08.165 --> 00:30:11.205
<v Speaker 0>like, Dagger can run functions in any language.

00:30:11.205 --> 00:30:12.885
<v Speaker 0>So you can have functions in Python, we

00:30:12.885 --> 00:30:13.925
<v Speaker 0>could have some in Go, we could have

00:30:13.925 --> 00:30:14.645
<v Speaker 0>some in TypeScript,

00:30:15.070 --> 00:30:17.630
<v Speaker 0>It puts all into the container, builds it,

00:30:17.630 --> 00:30:19.630
<v Speaker 0>and then gives us access to it. So

00:30:19.630 --> 00:30:21.390
<v Speaker 0>now we could do Dagger call.

00:30:21.550 --> 00:30:23.150
<v Speaker 0>We could say container echo.

00:30:28.215 --> 00:30:30.055
<v Speaker 0>And it wants a string argument, so we'll

00:30:30.055 --> 00:30:30.855
<v Speaker 0>just say

00:30:31.015 --> 00:30:31.815
<v Speaker 0>Rawkode.

00:30:31.895 --> 00:30:33.095
<v Speaker 0>Well, I think I need to do dash

00:30:33.095 --> 00:30:33.975
<v Speaker 0>dash string. Alright.

00:30:35.655 --> 00:30:36.534
<v Speaker 0>Yeah.

00:30:37.655 --> 00:30:38.774
<v Speaker 0>Add string

00:30:38.935 --> 00:30:39.495
<v Speaker 0>back.

00:30:45.399 --> 00:30:47.480
<v Speaker 0>And you can see here that it's doing

00:30:47.480 --> 00:30:48.759
<v Speaker 0>our container echo

00:30:48.760 --> 00:30:49.479
<v Speaker 0>and,

00:30:51.720 --> 00:30:53.975
<v Speaker 0>I don't see my echo, but it it

00:30:53.975 --> 00:30:56.775
<v Speaker 0>ran. I'm happy with it. Cargo container echo

00:30:56.775 --> 00:30:58.215
<v Speaker 1>string Rawkode.

00:30:58.935 --> 00:30:59.575
<v Speaker 1>Yeah.

00:31:02.375 --> 00:31:03.015
<v Speaker 0>Levison.

00:31:06.970 --> 00:31:09.609
<v Speaker 0>Okay. So pip install dash e SDK.

00:31:10.409 --> 00:31:12.090
<v Speaker 0>Alright. We'll get to that. I mean, the

00:31:12.090 --> 00:31:13.929
<v Speaker 0>Dagger pipelines are running right now. Our editor

00:31:13.929 --> 00:31:15.769
<v Speaker 0>experience might not be ideal,

00:31:16.090 --> 00:31:18.089
<v Speaker 0>but we'll tell you up as we go.

00:31:18.250 --> 00:31:19.049
<v Speaker 0>Now

00:31:19.635 --> 00:31:21.154
<v Speaker 0>let's just make sure that

00:31:21.795 --> 00:31:24.115
<v Speaker 0>you're you're happy with what's actually happening here.

00:31:24.115 --> 00:31:25.554
<v Speaker 0>So I wanna just make sure

00:31:26.195 --> 00:31:27.875
<v Speaker 0>that we can tweak this, you can understand

00:31:27.875 --> 00:31:29.955
<v Speaker 0>what's happening. I'll take any questions along the

00:31:29.955 --> 00:31:31.154
<v Speaker 0>way. If anyone watching

00:31:32.595 --> 00:31:34.195
<v Speaker 0>has questions, fire away.

00:31:35.620 --> 00:31:37.300
<v Speaker 0>So the other thing we can do here

00:31:37.300 --> 00:31:40.100
<v Speaker 0>is we're just pulling our container echo is

00:31:40.100 --> 00:31:42.740
<v Speaker 0>just pulling from Alpine latest. Right? But we

00:31:42.740 --> 00:31:44.659
<v Speaker 0>could do Ubuntu

00:31:44.820 --> 00:31:47.380
<v Speaker 0>twenty two zero four because nobody ever updates

00:31:47.380 --> 00:31:48.180
<v Speaker 0>beyond that. Right?

00:31:49.035 --> 00:31:51.115
<v Speaker 1>So I'm curious if we want to do

00:31:51.115 --> 00:31:53.515
<v Speaker 1>that or if we want to do use

00:31:53.515 --> 00:31:56.795
<v Speaker 1>the conductor container that's specifically built for the

00:31:56.795 --> 00:31:59.675
<v Speaker 1>project that does have all of the dependencies

00:31:59.675 --> 00:32:01.515
<v Speaker 1>that might kind of speed us along.

00:32:02.380 --> 00:32:03.659
<v Speaker 0>Oh, I was just gonna make a change

00:32:03.659 --> 00:32:04.860
<v Speaker 0>to show you it. But you're right. Yeah.

00:32:04.860 --> 00:32:06.940
<v Speaker 0>We should be using Conductor too. Okay. But

00:32:06.940 --> 00:32:09.179
<v Speaker 0>I just wanna you know, we've got Ubuntu,

00:32:09.179 --> 00:32:11.100
<v Speaker 0>and I'm changing the command to apt. So

00:32:11.100 --> 00:32:12.299
<v Speaker 0>if we run this again,

00:32:12.700 --> 00:32:14.539
<v Speaker 0>apt raw code isn't gonna do anything, but

00:32:14.539 --> 00:32:15.580
<v Speaker 0>apt update

00:32:16.140 --> 00:32:18.335
<v Speaker 0>should be able to run some. Oh,

00:32:18.335 --> 00:32:21.535
<v Speaker 1>that's Dagger call lets you actually

00:32:22.415 --> 00:32:23.934
<v Speaker 1>append additional

00:32:23.935 --> 00:32:24.815
<v Speaker 1>command

00:32:25.375 --> 00:32:27.775
<v Speaker 1>arguments at that point? Because this one is

00:32:27.775 --> 00:32:31.135
<v Speaker 0>configured. This function has a string argument called

00:32:31.135 --> 00:32:31.775
<v Speaker 0>string arg.

00:32:32.530 --> 00:32:35.090
<v Speaker 1>Okay. So it it knows that it's looking

00:32:35.090 --> 00:32:35.649
<v Speaker 1>for

00:32:36.050 --> 00:32:37.010
<v Speaker 1>that argument.

00:32:37.330 --> 00:32:39.649
<v Speaker 0>Yeah. So there's our Cool. At update. Right?

00:32:39.650 --> 00:32:42.210
<v Speaker 0>Now if we change this to be at

00:32:44.930 --> 00:32:47.170
<v Speaker 0>trying to remember the Python underscores.

00:32:47.975 --> 00:32:49.895
<v Speaker 0>I usually do some TypeScript, so it's camel

00:32:49.895 --> 00:32:51.655
<v Speaker 0>case all the way, but we'll get there.

00:32:51.655 --> 00:32:53.575
<v Speaker 0>So we can change this to app command

00:32:53.575 --> 00:32:54.215
<v Speaker 0>now,

00:32:55.575 --> 00:32:58.055
<v Speaker 0>and let's

00:32:58.055 --> 00:32:59.975
<v Speaker 0>get standard out. We actually want to see

00:32:59.975 --> 00:33:02.695
<v Speaker 0>the output of this container. Oh, look at

00:33:02.695 --> 00:33:06.110
<v Speaker 1>that. Okay. So now string arg will fail.

00:33:06.110 --> 00:33:07.790
<v Speaker 0>It'll throw it into container and give us

00:33:07.790 --> 00:33:09.630
<v Speaker 0>an error message, but then we can add

00:33:09.630 --> 00:33:11.870
<v Speaker 0>the app command, and then we're starting to

00:33:11.870 --> 00:33:13.950
<v Speaker 0>piece together a function that does what we

00:33:13.950 --> 00:33:16.110
<v Speaker 0>wanted to do with the arguments that we

00:33:16.110 --> 00:33:18.110
<v Speaker 0>want and that makes sense from a consumer

00:33:18.110 --> 00:33:19.455
<v Speaker 0>point of view. So,

00:33:20.415 --> 00:33:21.934
<v Speaker 0>at command

00:33:22.895 --> 00:33:23.934
<v Speaker 0>update.

00:33:27.775 --> 00:33:29.615
<v Speaker 0>Fingers crossed. Looks good.

00:33:34.429 --> 00:33:36.669
<v Speaker 0>Should have picked a faster command, but still

00:33:36.510 --> 00:33:39.070
<v Speaker 1>I feel like Marcos is over here.

00:33:39.550 --> 00:33:41.870
<v Speaker 1>He's like the voice of Versus Code. He's

00:33:41.870 --> 00:33:42.990
<v Speaker 1>like, I'm

00:33:42.990 --> 00:33:43.870
<v Speaker 1>not happy.

00:33:44.429 --> 00:33:46.190
<v Speaker 1>This is your this is your code editor

00:33:46.190 --> 00:33:46.590
<v Speaker 1>speaking.

00:33:48.404 --> 00:33:49.124
<v Speaker 0>Alright.

00:33:49.845 --> 00:33:52.484
<v Speaker 0>Yes. Editor's not happy. Thank you, Marcus.

00:33:52.725 --> 00:33:54.804
<v Speaker 0>We're let's fix that now then. Now that

00:33:54.804 --> 00:33:56.164
<v Speaker 0>I've covered a little bit about how to

00:33:56.164 --> 00:33:58.085
<v Speaker 0>get started with Dagger and then Jean Luc

00:33:58.085 --> 00:34:00.164
<v Speaker 0>and C and website's looking good. Thanks, man.

00:34:00.164 --> 00:34:03.539
<v Speaker 0>Appreciate it. Yeah. That website's pretty cool. It's

00:34:03.539 --> 00:34:05.620
<v Speaker 1>it's like Yeah. It's making people feel really

00:34:05.620 --> 00:34:08.900
<v Speaker 0>insecure about my websites that are legitimately terrible.

00:34:09.380 --> 00:34:10.739
<v Speaker 0>Well, I mean, it's all a few months

00:34:10.739 --> 00:34:12.580
<v Speaker 0>ago. A website to me was, you know,

00:34:12.580 --> 00:34:14.659
<v Speaker 0>a white background with black text, but I'm

00:34:14.659 --> 00:34:15.540
<v Speaker 0>I'm learning. So

00:34:18.514 --> 00:34:20.594
<v Speaker 0>Lev earlier mentioned so let's go into our

00:34:20.594 --> 00:34:22.594
<v Speaker 0>Dagger directory. So this is his own Python

00:34:22.594 --> 00:34:24.994
<v Speaker 0>project. It was gonna show requirements dot lock

00:34:24.994 --> 00:34:27.394
<v Speaker 0>as py project. I'm not a Python person.

00:34:27.394 --> 00:34:29.474
<v Speaker 0>I'm really no idea what I'm doing.

00:34:31.240 --> 00:34:32.600
<v Speaker 0>I don't have pep.

00:34:32.760 --> 00:34:35.400
<v Speaker 0>So, Lev, based on your comment, you said

00:34:35.400 --> 00:34:37.400
<v Speaker 0>pep install dash e SDK.

00:34:37.800 --> 00:34:39.560
<v Speaker 0>Is that because the SDK has

00:34:39.720 --> 00:34:40.840
<v Speaker 0>its own requirements,

00:34:41.960 --> 00:34:43.560
<v Speaker 0>or am I installing that into my existing

00:34:43.560 --> 00:34:45.705
<v Speaker 0>VM? Do I need a new v n?

00:34:45.864 --> 00:34:47.705
<v Speaker 0>Maybe we should have used TypeScript.

00:34:49.464 --> 00:34:51.864
<v Speaker 0>Well, if I knew Python. Right? What what

00:34:51.864 --> 00:34:53.304
<v Speaker 0>would you do with a py project dot

00:34:53.304 --> 00:34:53.945
<v Speaker 0>toml?

00:34:54.424 --> 00:34:57.305
<v Speaker 1>Okay. So I I I I I I

00:34:57.305 --> 00:34:58.424
<v Speaker 1>know Python

00:34:59.020 --> 00:35:01.100
<v Speaker 1>in terms of IAC

00:35:02.060 --> 00:35:05.180
<v Speaker 1>and have not used pyproject toml configs

00:35:05.180 --> 00:35:05.980
<v Speaker 1>before.

00:35:06.300 --> 00:35:08.780
<v Speaker 0>Alright. So the blind are currently leading the

00:35:08.780 --> 00:35:09.100
<v Speaker 1>blind.

00:35:13.915 --> 00:35:16.955
<v Speaker 0>Okay. The SDK has the binding. So we

00:35:17.515 --> 00:35:18.875
<v Speaker 0>does that mean I can just go to

00:35:18.875 --> 00:35:19.915
<v Speaker 0>my requirements

00:35:19.915 --> 00:35:21.835
<v Speaker 0>dot text here? Can I just add a

00:35:21.835 --> 00:35:22.555
<v Speaker 0>local

00:35:23.035 --> 00:35:23.435
<v Speaker 0>Dagger?

00:35:24.740 --> 00:35:25.860
<v Speaker 0>Is that a thing?

00:35:26.819 --> 00:35:28.740
<v Speaker 0>I know that Not that I'm aware of,

00:35:29.380 --> 00:35:30.980
<v Speaker 1>but it would be cool if it was.

00:35:32.180 --> 00:35:34.579
<v Speaker 0>I'm waiting for a lever. Obviously, the Python

00:35:34.579 --> 00:35:35.780
<v Speaker 1>people are

00:35:36.420 --> 00:35:38.819
<v Speaker 1>not appreciating the genius that we bring.

00:35:39.995 --> 00:35:40.635
<v Speaker 0>Yeah.

00:35:41.195 --> 00:35:42.475
<v Speaker 0>I mean, I would love to do this

00:35:42.475 --> 00:35:44.315
<v Speaker 0>in Python for you, but I don't wanna

00:35:44.315 --> 00:35:45.835
<v Speaker 0>slow us down. I'm thinking maybe we should

00:35:45.835 --> 00:35:47.675
<v Speaker 0>go to a language that I'm comfortable with.

00:35:47.675 --> 00:35:48.955
<v Speaker 1>That's fine too.

00:35:49.915 --> 00:35:52.635
<v Speaker 1>If you wanna jump, if you wanna switch.

00:35:52.635 --> 00:35:54.750
<v Speaker 1>And then, I mean, when it comes to

00:35:54.750 --> 00:35:57.150
<v Speaker 1>transposing from one language to another, I just

00:35:57.150 --> 00:35:58.990
<v Speaker 1>need to see like the structure, what the

00:35:58.990 --> 00:36:01.390
<v Speaker 1>possibilities are, and then I can

00:36:01.950 --> 00:36:04.190
<v Speaker 1>transpose it myself later today.

00:36:04.510 --> 00:36:05.310
<v Speaker 0>Hey, it worked.

00:36:06.605 --> 00:36:07.805
<v Speaker 1>Holy cow.

00:36:08.285 --> 00:36:09.485
<v Speaker 0>I'm a genius.

00:36:09.724 --> 00:36:11.165
<v Speaker 1>You are. Clearly.

00:36:13.325 --> 00:36:15.805
<v Speaker 1>Twenty years paid off right in this moment.

00:36:15.805 --> 00:36:16.605
<v Speaker 1>You're done.

00:36:17.645 --> 00:36:18.045
<v Speaker 1>Retire.

00:36:19.310 --> 00:36:21.790
<v Speaker 0>Alright. Can I restart a pang a Python

00:36:21.790 --> 00:36:24.590
<v Speaker 0>language server? Of course, I can. Is it

00:36:24.590 --> 00:36:25.630
<v Speaker 0>gonna be happy?

00:36:26.590 --> 00:36:28.430
<v Speaker 0>Let's just pop it open again.

00:36:29.950 --> 00:36:30.670
<v Speaker 0>Happy.

00:36:31.630 --> 00:36:32.590
<v Speaker 0>Are you happy?

00:36:34.175 --> 00:36:34.975
<v Speaker 0>Yeah.

00:36:36.815 --> 00:36:39.535
<v Speaker 1>I I I've legitimately impressed right now. I'm

00:36:39.535 --> 00:36:40.975
<v Speaker 1>gonna have to like go back and watch

00:36:40.975 --> 00:36:41.935
<v Speaker 1>the recording

00:36:42.655 --> 00:36:44.495
<v Speaker 1>and I was here for the whole thing.

00:36:45.455 --> 00:36:46.335
<v Speaker 0>Alright.

00:36:46.335 --> 00:36:48.494
<v Speaker 0>So, I mean, that's my filled with my

00:36:48.494 --> 00:36:50.120
<v Speaker 0>standard out. So

00:36:50.520 --> 00:36:51.400
<v Speaker 0>let's

00:36:51.400 --> 00:36:51.960
<v Speaker 0>see.

00:36:52.440 --> 00:36:53.560
<v Speaker 0>Let's see if we can get that error

00:36:53.560 --> 00:36:55.800
<v Speaker 0>message again. So we run Dagger

00:36:55.880 --> 00:36:56.520
<v Speaker 0>call

00:36:56.760 --> 00:36:57.800
<v Speaker 0>container

00:36:57.800 --> 00:36:58.440
<v Speaker 0>echo.

00:37:01.734 --> 00:37:03.415
<v Speaker 0>That's interesting.

00:37:03.734 --> 00:37:05.095
<v Speaker 0>Oh, I haven't Okay.

00:37:08.615 --> 00:37:10.455
<v Speaker 1>Chat is blowing up over what you just

00:37:10.455 --> 00:37:11.095
<v Speaker 1>did right now.

00:37:15.780 --> 00:37:16.500
<v Speaker 0>Yeah.

00:37:16.580 --> 00:37:18.820
<v Speaker 0>I often say that the best developer experience

00:37:18.820 --> 00:37:20.660
<v Speaker 0>is one where you can be successful with

00:37:20.660 --> 00:37:23.300
<v Speaker 0>intuition rather than informed decisions. And that is

00:37:23.300 --> 00:37:25.060
<v Speaker 0>a key example of something that is a

00:37:25.060 --> 00:37:26.180
<v Speaker 0>good developer experience.

00:37:26.420 --> 00:37:29.620
<v Speaker 1>That I think that was the highlight of

00:37:28.974 --> 00:37:30.895
<v Speaker 1>the this livestream for me. Oh, we better

00:37:30.895 --> 00:37:32.655
<v Speaker 0>start to stop now. Right? Fuck it. Like,

00:37:32.655 --> 00:37:33.535
<v Speaker 0>we're done.

00:37:34.255 --> 00:37:35.535
<v Speaker 1>Quit on a high note.

00:37:37.535 --> 00:37:38.415
<v Speaker 0>Okay.

00:37:38.815 --> 00:37:40.175
<v Speaker 0>So now we need her at,

00:37:41.055 --> 00:37:42.015
<v Speaker 0>and

00:37:42.175 --> 00:37:43.214
<v Speaker 0>we'll do our updates.

00:37:43.660 --> 00:37:45.100
<v Speaker 0>I just want to see that So that

00:37:45.100 --> 00:37:48.300
<v Speaker 1>flag, explain the flag to me because I

00:37:48.300 --> 00:37:50.940
<v Speaker 1>wasn't actually expecting the flag to be apt

00:37:50.940 --> 00:37:51.660
<v Speaker 1>command.

00:37:51.900 --> 00:37:54.380
<v Speaker 1>That is that determined based on what you

00:37:54.380 --> 00:37:57.180
<v Speaker 1>call the argument in the code?

00:37:58.545 --> 00:37:59.105
<v Speaker 0>Yeah.

00:37:59.825 --> 00:38:01.105
<v Speaker 0>So there's a lot of

00:38:01.984 --> 00:38:04.224
<v Speaker 0>code generation happening behind the scenes here, a

00:38:04.224 --> 00:38:06.545
<v Speaker 0>lot of magic stuff. The way that Dagger

00:38:06.545 --> 00:38:08.705
<v Speaker 0>works is there's essentially build kit with a

00:38:08.705 --> 00:38:11.510
<v Speaker 0>GraphQL API in front of it. The GraphQL

00:38:11.510 --> 00:38:14.950
<v Speaker 0>API tells us, like, you know, container with

00:38:14.950 --> 00:38:17.030
<v Speaker 0>mount, blah blah blah, and they're nested all

00:38:17.030 --> 00:38:18.070
<v Speaker 0>the way down,

00:38:18.230 --> 00:38:19.590
<v Speaker 0>gets pretty gnarly.

00:38:20.230 --> 00:38:22.869
<v Speaker 0>But then they generate the SDKs on the

00:38:22.869 --> 00:38:24.390
<v Speaker 0>back of the GraphQL definition.

00:38:25.215 --> 00:38:27.375
<v Speaker 0>And and when we have a parameter to

00:38:27.375 --> 00:38:29.535
<v Speaker 0>a function, the name of that parameter becomes

00:38:29.535 --> 00:38:31.855
<v Speaker 0>a flag on the command line, and we

00:38:31.855 --> 00:38:33.455
<v Speaker 0>can also apply the types and stuff like

00:38:33.455 --> 00:38:34.815
<v Speaker 0>that. So you get all this.

00:38:35.535 --> 00:38:37.375
<v Speaker 0>There's the the they're

00:38:37.375 --> 00:38:39.135
<v Speaker 0>magical voodoo warriors. I don't know what they

00:38:39.135 --> 00:38:41.535
<v Speaker 0>do, but it works. I

00:38:40.820 --> 00:38:43.460
<v Speaker 1>I was impressed looking at the brochure

00:38:43.460 --> 00:38:46.100
<v Speaker 1>and and now I'm like, somebody needs to

00:38:46.100 --> 00:38:48.180
<v Speaker 1>rewrite the brochure because this is way better

00:38:48.180 --> 00:38:49.860
<v Speaker 1>than the brochure says it is.

00:38:51.220 --> 00:38:54.035
<v Speaker 0>Yeah. There's the and the pace they're moving

00:38:54.035 --> 00:38:55.635
<v Speaker 0>at is ridiculous as well. It's so much

00:38:55.635 --> 00:38:58.115
<v Speaker 0>cool stuff. Especially for the size, like,

00:38:58.434 --> 00:39:00.994
<v Speaker 1>Dagger team is. Like, the Right.

00:39:01.234 --> 00:39:03.474
<v Speaker 1>Impact per seat, they're killing it.

00:39:03.875 --> 00:39:05.474
<v Speaker 0>Yeah. We we need to stop catering to

00:39:05.474 --> 00:39:07.474
<v Speaker 0>their egos, We don't wanna, you know, let

00:39:07.474 --> 00:39:08.194
<v Speaker 0>them get too big.

00:39:08.859 --> 00:39:10.780
<v Speaker 0>So it's crap. I hate it. Why does

00:39:10.780 --> 00:39:13.180
<v Speaker 0>it all work? Fix it. I'm not getting

00:39:13.180 --> 00:39:15.099
<v Speaker 1>paid. So when I say things right now

00:39:15.099 --> 00:39:17.980
<v Speaker 1>about Dagger, it's legitimately just enthusiasm.

00:39:18.300 --> 00:39:21.260
<v Speaker 0>All of my enthusiasm is 100% legitimate. That's

00:39:21.260 --> 00:39:21.580
<v Speaker 0>for sure.

00:39:22.535 --> 00:39:25.255
<v Speaker 0>Right. Standard out. What's the error? Invalid selection

00:39:25.255 --> 00:39:27.895
<v Speaker 0>for command container echo response and query call

00:39:27.895 --> 00:39:28.535
<v Speaker 0>function.

00:39:29.655 --> 00:39:30.135
<v Speaker 1>Run

00:39:31.015 --> 00:39:33.335
<v Speaker 1>did not complete successfully.

00:39:33.495 --> 00:39:35.575
<v Speaker 0>That So this is this the return type

00:39:35.575 --> 00:39:38.695
<v Speaker 0>on this is it expects a container back

00:39:38.190 --> 00:39:41.150
<v Speaker 0>where it actually our standard out is returning

00:39:41.550 --> 00:39:43.950
<v Speaker 0>a string. A string. Yeah. So

00:39:44.910 --> 00:39:47.550
<v Speaker 0>if we modify this because who knew Python

00:39:47.550 --> 00:39:49.230
<v Speaker 0>could be typed in 2024?

00:39:49.230 --> 00:39:49.710
<v Speaker 0>Whatever.

00:39:50.109 --> 00:39:50.430
<v Speaker 0>So.

00:39:52.494 --> 00:39:55.695
<v Speaker 1>That yeah. That just was released as a

00:39:55.695 --> 00:39:58.255
<v Speaker 1>fairly new feature in Python. And I know

00:39:58.255 --> 00:39:58.815
<v Speaker 1>that

00:39:59.055 --> 00:40:00.015
<v Speaker 1>a lot of

00:40:00.655 --> 00:40:04.415
<v Speaker 1>early or bleeding edge type projects are still

00:40:04.415 --> 00:40:07.290
<v Speaker 1>working on adopting that. I wonder if Dagger's

00:40:07.290 --> 00:40:08.010
<v Speaker 1>already there.

00:40:08.650 --> 00:40:10.170
<v Speaker 0>Yeah. I mean, the type and stuff is

00:40:10.170 --> 00:40:12.250
<v Speaker 0>great. They're also, you know, using all of

00:40:12.250 --> 00:40:14.970
<v Speaker 0>these attribute annotation stuffs as well. It's all

00:40:14.970 --> 00:40:16.250
<v Speaker 0>very, very slick.

00:40:17.290 --> 00:40:18.490
<v Speaker 0>As you can see, we now get the

00:40:18.490 --> 00:40:18.810
<v Speaker 0>output.

00:40:19.555 --> 00:40:21.075
<v Speaker 0>So so that

00:40:21.315 --> 00:40:23.635
<v Speaker 0>is your first introduction to a Dagger function,

00:40:23.635 --> 00:40:24.915
<v Speaker 0>how we make changes.

00:40:25.395 --> 00:40:26.595
<v Speaker 0>Now we actually need to try and do

00:40:26.595 --> 00:40:27.715
<v Speaker 0>something useful.

00:40:28.195 --> 00:40:28.755
<v Speaker 0>So

00:40:30.275 --> 00:40:30.995
<v Speaker 0>next step.

00:40:31.809 --> 00:40:33.809
<v Speaker 0>I'm gonna get ready. Two minutes in. Let's

00:40:33.809 --> 00:40:34.930
<v Speaker 1>do something useful.

00:40:38.369 --> 00:40:39.570
<v Speaker 0>Don't tell people.

00:40:39.970 --> 00:40:40.770
<v Speaker 0>Alright.

00:40:41.970 --> 00:40:44.244
<v Speaker 0>So you were talking about conductor. There's a

00:40:44.244 --> 00:40:45.365
<v Speaker 0>conductor container.

00:40:45.605 --> 00:40:46.645
<v Speaker 0>Can you tell me a bit more about

00:40:46.645 --> 00:40:47.845
<v Speaker 0>that and how do we bring that into

00:40:47.845 --> 00:40:50.244
<v Speaker 0>this process? There is. I'm wondering, do I

00:40:50.244 --> 00:40:52.405
<v Speaker 1>actually get to write in chat or or

00:40:52.405 --> 00:40:54.325
<v Speaker 1>or am am I censored here?

00:40:55.950 --> 00:40:57.790
<v Speaker 0>There's a private chat between you and I.

00:40:57.790 --> 00:40:59.550
<v Speaker 0>If you wanna chat on YouTube, you have

00:40:59.550 --> 00:41:01.470
<v Speaker 0>to do that your your yourself. But you

00:41:01.470 --> 00:41:03.390
<v Speaker 0>can use Okay. Alright. So,

00:41:03.869 --> 00:41:06.750
<v Speaker 1>conductor container is the developer

00:41:06.750 --> 00:41:09.950
<v Speaker 1>environment for the project and the op operations

00:41:09.950 --> 00:41:10.750
<v Speaker 1>environment.

00:41:10.750 --> 00:41:13.375
<v Speaker 1>It has all the dependencies for

00:41:13.535 --> 00:41:15.615
<v Speaker 1>like Talos and Pulumi

00:41:15.615 --> 00:41:16.255
<v Speaker 1>and

00:41:16.655 --> 00:41:17.535
<v Speaker 1>Dagger

00:41:17.694 --> 00:41:20.174
<v Speaker 1>and all the Python bits and stuff like

00:41:20.174 --> 00:41:21.375
<v Speaker 1>that preconfigured

00:41:21.375 --> 00:41:23.615
<v Speaker 1>with durenf and nixes in there if you

00:41:23.615 --> 00:41:24.494
<v Speaker 1>use that yourself.

00:41:26.420 --> 00:41:28.820
<v Speaker 1>So I'm thinking that might be the easiest

00:41:28.820 --> 00:41:31.700
<v Speaker 1>container to run with. It's not small,

00:41:31.860 --> 00:41:32.980
<v Speaker 1>but no

00:41:33.060 --> 00:41:35.460
<v Speaker 1>mature Python container is.

00:41:35.620 --> 00:41:36.100
<v Speaker 1>So

00:41:38.740 --> 00:41:42.100
<v Speaker 1>it's g h c r dot I o

00:41:41.515 --> 00:41:44.395
<v Speaker 1>slash container craft slash conductor.

00:41:45.115 --> 00:41:47.435
<v Speaker 1>If we just wanna write that in.

00:41:49.355 --> 00:41:50.395
<v Speaker 0>With a k?

00:41:50.635 --> 00:41:51.355
<v Speaker 1>Uh-huh.

00:41:51.435 --> 00:41:54.234
<v Speaker 1>Yes, it Of course, because everything in Kubernetes

00:41:54.234 --> 00:41:55.835
<v Speaker 1>land has to start with a k. Right?

00:41:57.430 --> 00:41:58.550
<v Speaker 1>Like my name.

00:42:00.710 --> 00:42:03.430
<v Speaker 1>I started the trend Kubernetes just, you know,

00:42:03.750 --> 00:42:09.110
<v Speaker 1>got got there a little slow. Docs.

00:42:09.565 --> 00:42:11.725
<v Speaker 0>Alright. So we should be able to do

00:42:11.725 --> 00:42:12.685
<v Speaker 0>a dag

00:42:12.765 --> 00:42:14.445
<v Speaker 0>where we grab a container,

00:42:15.805 --> 00:42:21.165
<v Speaker 0>and it's ghcr.i0containercraft

00:42:21.485 --> 00:42:21.805
<v Speaker 1>Mhmm.

00:42:22.290 --> 00:42:22.930
<v Speaker 1>Call

00:42:23.090 --> 00:42:23.970
<v Speaker 1>it's

00:42:23.970 --> 00:42:25.090
<v Speaker 1>got it. Yeah.

00:42:25.570 --> 00:42:26.450
<v Speaker 1>Beautiful.

00:42:26.450 --> 00:42:30.210
<v Speaker 1>Copilot. Holy cow. Copilot. I love you. You're

00:42:30.210 --> 00:42:31.650
<v Speaker 1>recognizing my work.

00:42:32.850 --> 00:42:34.850
<v Speaker 0>No. Because I don't use the Python

00:42:35.010 --> 00:42:36.210
<v Speaker 0>language ever,

00:42:36.610 --> 00:42:37.650
<v Speaker 0>I've noticed that

00:42:38.184 --> 00:42:40.585
<v Speaker 0>it's from the keyword, so our function here

00:42:40.585 --> 00:42:42.265
<v Speaker 0>is actually from underscore.

00:42:47.464 --> 00:42:50.025
<v Speaker 0>Now you said this has got everything

00:42:50.025 --> 00:42:51.145
<v Speaker 0>in it. Right?

00:42:51.464 --> 00:42:53.065
<v Speaker 0>So that's the web exec

00:42:54.440 --> 00:42:55.400
<v Speaker 0>Pulumi

00:42:56.520 --> 00:42:57.720
<v Speaker 0>version,

00:42:58.599 --> 00:43:01.079
<v Speaker 0>and let's grab that standard out again just

00:43:01.079 --> 00:43:03.160
<v Speaker 0>so we can see that and update our

00:43:03.160 --> 00:43:03.960
<v Speaker 0>type.

00:43:05.160 --> 00:43:06.520
<v Speaker 0>Now what's cool here,

00:43:07.555 --> 00:43:09.955
<v Speaker 0>we've added a new Python function and annotated

00:43:09.955 --> 00:43:10.995
<v Speaker 0>it as a function.

00:43:11.475 --> 00:43:13.235
<v Speaker 0>The docs are our docs help string, which

00:43:13.235 --> 00:43:14.435
<v Speaker 0>we're gonna see in the CLI in a

00:43:14.435 --> 00:43:14.995
<v Speaker 0>moment.

00:43:15.395 --> 00:43:16.675
<v Speaker 0>And that's that's all we need to do

00:43:16.675 --> 00:43:18.115
<v Speaker 0>to register a new,

00:43:18.355 --> 00:43:19.955
<v Speaker 0>you know, like a make target or a

00:43:19.955 --> 00:43:21.795
<v Speaker 0>bash script of which you would typically do,

00:43:21.795 --> 00:43:23.395
<v Speaker 0>only we're doing it as a Dagger.

00:43:24.060 --> 00:43:25.340
<v Speaker 0>Sure. So the point now where if we

00:43:25.340 --> 00:43:28.380
<v Speaker 0>run Dagger functions, it should come back, rebuild

00:43:28.380 --> 00:43:30.300
<v Speaker 0>the SDK and all that and and build

00:43:30.300 --> 00:43:31.980
<v Speaker 0>kit, and then tell us that we have

00:43:31.980 --> 00:43:33.660
<v Speaker 0>this new function, and then we'll see my

00:43:33.660 --> 00:43:36.700
<v Speaker 0>horrendous documentation as a description for what that

00:43:36.700 --> 00:43:38.005
<v Speaker 0>task actually does.

00:43:38.245 --> 00:43:41.205
<v Speaker 1>Got it. The conductor container, again, is not

00:43:41.205 --> 00:43:44.325
<v Speaker 1>small. So do you have a solid download

00:43:44.565 --> 00:43:45.365
<v Speaker 1>pipe?

00:43:48.725 --> 00:43:50.325
<v Speaker 0>How big is that? Are we talking many

00:43:50.325 --> 00:43:50.645
<v Speaker 0>gig?

00:43:51.220 --> 00:43:52.500
<v Speaker 1>A few.

00:43:52.500 --> 00:43:53.060
<v Speaker 1>Yeah.

00:43:54.820 --> 00:43:57.300
<v Speaker 0>We may go a different route.

00:43:57.300 --> 00:43:59.460
<v Speaker 0>Because based based on what you're telling me

00:43:59.460 --> 00:44:00.500
<v Speaker 0>conductor does,

00:44:00.660 --> 00:44:02.900
<v Speaker 0>I actually think the need for conductor slowly

00:44:02.900 --> 00:44:03.780
<v Speaker 0>disappears

00:44:03.780 --> 00:44:04.820
<v Speaker 0>with the Dagger

00:44:05.195 --> 00:44:05.835
<v Speaker 0>approach.

00:44:06.075 --> 00:44:08.075
<v Speaker 0>You know, you don't need some monolithic be

00:44:08.075 --> 00:44:08.635
<v Speaker 1>interesting.

00:44:10.315 --> 00:44:10.955
<v Speaker 0>So

00:44:11.675 --> 00:44:14.155
<v Speaker 0>alright. Let's run our conductor function. So we're

00:44:14.155 --> 00:44:15.355
<v Speaker 0>gonna do a call

00:44:15.675 --> 00:44:16.635
<v Speaker 0>conductor.

00:44:16.875 --> 00:44:18.955
<v Speaker 0>Okay. We didn't add any parameters. This is

00:44:18.955 --> 00:44:21.220
<v Speaker 0>just gonna run. We should see the output

00:44:21.220 --> 00:44:23.860
<v Speaker 0>of Pulumi dash dash version as my connection

00:44:23.860 --> 00:44:26.100
<v Speaker 0>is able to handle the size of this

00:44:27.060 --> 00:44:27.940
<v Speaker 0>image.

00:44:28.660 --> 00:44:30.100
<v Speaker 1>Yeah. So

00:44:30.580 --> 00:44:32.500
<v Speaker 1>one thing that I'm curious about here,

00:44:32.980 --> 00:44:35.060
<v Speaker 1>we're running all of these different things in

00:44:35.060 --> 00:44:35.860
<v Speaker 1>containers.

00:44:36.215 --> 00:44:38.695
<v Speaker 1>And I know one of the plans is

00:44:38.695 --> 00:44:41.175
<v Speaker 1>to create a kind cluster.

00:44:41.815 --> 00:44:44.375
<v Speaker 1>How does that all work? Because I know

00:44:44.375 --> 00:44:46.935
<v Speaker 1>that kind results in, like, a kube config,

00:44:46.935 --> 00:44:48.695
<v Speaker 1>for example. So does that mean we have

00:44:48.695 --> 00:44:51.960
<v Speaker 1>to, like, volume mount the kube config

00:44:52.200 --> 00:44:54.280
<v Speaker 1>directory in so that it can write that

00:44:54.280 --> 00:44:56.040
<v Speaker 1>kube config and then we can carry it

00:44:56.040 --> 00:44:58.200
<v Speaker 1>on into other things? Or are we exporting

00:44:58.200 --> 00:45:01.080
<v Speaker 1>it as a string and carrying that around?

00:45:01.160 --> 00:45:02.360
<v Speaker 1>Or what's the plan?

00:45:03.160 --> 00:45:03.480
<v Speaker 0>So

00:45:04.115 --> 00:45:06.914
<v Speaker 0>this is where composition within Dagger becomes really

00:45:06.914 --> 00:45:08.355
<v Speaker 0>cool. So Okay.

00:45:08.674 --> 00:45:10.355
<v Speaker 0>What we're gonna do, we're gonna add some

00:45:10.355 --> 00:45:12.194
<v Speaker 0>more function. I'll I'll leave that pulling just

00:45:12.194 --> 00:45:13.474
<v Speaker 0>now. Right? But we'll do some other stuff

00:45:13.474 --> 00:45:15.555
<v Speaker 0>so we're not sat here in silence. Plus,

00:45:15.555 --> 00:45:17.714
<v Speaker 0>you asked a phenomenal question. So

00:45:18.470 --> 00:45:19.430
<v Speaker 0>let's have

00:45:20.309 --> 00:45:22.630
<v Speaker 1>I did ask a phenomenal question. Thank you

00:45:22.630 --> 00:45:25.190
<v Speaker 1>for recognizing it. Yeah. Of course.

00:45:25.589 --> 00:45:27.349
<v Speaker 0>I like to appreciate genius when I see

00:45:27.349 --> 00:45:27.829
<v Speaker 0>it. So

00:45:30.435 --> 00:45:32.515
<v Speaker 0>so I'm adding a new function. Right? And

00:45:32.515 --> 00:45:34.035
<v Speaker 0>we're gonna do this step by step as

00:45:34.035 --> 00:45:35.155
<v Speaker 0>if I was doing this in my own

00:45:35.155 --> 00:45:37.475
<v Speaker 0>project. And I'm not gonna pull this massive

00:45:37.475 --> 00:45:38.595
<v Speaker 0>image. Instead,

00:45:39.075 --> 00:45:40.355
<v Speaker 0>let's go back to that.

00:45:41.395 --> 00:45:43.635
<v Speaker 0>I'll paint later. Cat, find a better way.

00:45:45.770 --> 00:45:47.849
<v Speaker 0>And I'm gonna do a temp a b

00:45:47.849 --> 00:45:49.450
<v Speaker 0>c. Right? So the function is called touch

00:45:49.450 --> 00:45:50.810
<v Speaker 0>a b c, and we're creating a file

00:45:50.810 --> 00:45:52.010
<v Speaker 0>called a b c.

00:45:52.330 --> 00:45:52.810
<v Speaker 0>Right.

00:45:53.450 --> 00:45:55.210
<v Speaker 0>And we'll return this as a a Dagger

00:45:55.210 --> 00:45:55.930
<v Speaker 0>container

00:45:56.010 --> 00:45:57.690
<v Speaker 0>so that we can use it later on

00:45:57.690 --> 00:46:00.105
<v Speaker 0>as part of other pipelines, other functions, other

00:46:00.185 --> 00:46:01.545
<v Speaker 0>Interesting. Whatever. Okay.

00:46:02.905 --> 00:46:04.985
<v Speaker 0>Now here's where this is gonna is is

00:46:04.985 --> 00:46:06.185
<v Speaker 0>it gonna let me do two of these

00:46:06.185 --> 00:46:07.225
<v Speaker 0>at the same time?

00:46:08.265 --> 00:46:09.145
<v Speaker 0>Dagger

00:46:10.105 --> 00:46:10.905
<v Speaker 0>functions.

00:46:11.145 --> 00:46:12.585
<v Speaker 1>I like that spelling dagger.

00:46:13.480 --> 00:46:16.280
<v Speaker 0>Let's

00:46:16.280 --> 00:46:18.120
<v Speaker 0>see. Yeah. It looks like it's working, so

00:46:18.120 --> 00:46:18.920
<v Speaker 0>that's good.

00:46:22.760 --> 00:46:24.840
<v Speaker 0>My editor is happy, Marcos.

00:46:25.480 --> 00:46:25.720
<v Speaker 0>Well,

00:46:26.775 --> 00:46:28.935
<v Speaker 0>yeah, we have touch a b c. So

00:46:29.414 --> 00:46:30.295
<v Speaker 0>call

00:46:30.855 --> 00:46:32.055
<v Speaker 0>touch a b c.

00:46:32.934 --> 00:46:34.454
<v Speaker 0>Like so. And now this should be nice

00:46:34.454 --> 00:46:36.694
<v Speaker 0>and quick. There's no outputs. We're just returning

00:46:36.694 --> 00:46:37.575
<v Speaker 0>a container.

00:46:38.615 --> 00:46:41.815
<v Speaker 0>So blah blah blah. It's finished. There we

00:46:41.815 --> 00:46:44.030
<v Speaker 0>go. Perfect. So we have this container which

00:46:44.030 --> 00:46:45.150
<v Speaker 0>we can now use.

00:46:45.630 --> 00:46:47.390
<v Speaker 0>Yeah. My address? Now

00:46:49.310 --> 00:46:50.510
<v Speaker 0>we come along and go, know what? We

00:46:50.510 --> 00:46:52.670
<v Speaker 0>wanna do something here. So what I'm actually

00:46:52.670 --> 00:46:54.430
<v Speaker 0>gonna do is say, We we need a

00:46:54.430 --> 00:46:54.910
<v Speaker 0>new function.

00:46:55.625 --> 00:46:57.545
<v Speaker 0>We're gonna say read a b c. And

00:46:57.545 --> 00:47:00.105
<v Speaker 0>I know this is horribly horribly contrived.

00:47:00.825 --> 00:47:02.984
<v Speaker 1>No. I I this is the kind of

00:47:02.984 --> 00:47:05.305
<v Speaker 1>like iterative testing that I do when I'm

00:47:05.305 --> 00:47:07.385
<v Speaker 1>trying to understand something for the first time.

00:47:07.385 --> 00:47:09.944
<v Speaker 1>So you are perfectly in my lane for

00:47:09.944 --> 00:47:12.760
<v Speaker 1>how I learned. I appreciate this a lot.

00:47:13.079 --> 00:47:13.880
<v Speaker 0>Awesome.

00:47:14.440 --> 00:47:16.440
<v Speaker 0>And I'm gonna read it from a different

00:47:17.000 --> 00:47:18.200
<v Speaker 0>image. I'm not gonna use alpha

00:47:22.119 --> 00:47:23.880
<v Speaker 0>So we can do a web itching to

00:47:23.880 --> 00:47:25.079
<v Speaker 1>use that even to container.

00:47:25.745 --> 00:47:27.825
<v Speaker 0>Well, I've told it now. So, yeah, we

00:47:27.985 --> 00:47:30.225
<v Speaker 0>we're going through it. Now this isn't gonna

00:47:30.225 --> 00:47:32.625
<v Speaker 0>work just yet. Right? Because we have a

00:47:32.625 --> 00:47:33.825
<v Speaker 0>new base layer.

00:47:34.065 --> 00:47:36.385
<v Speaker 0>We haven't pulled down anything from anywhere else.

00:47:38.545 --> 00:47:40.865
<v Speaker 0>So let's run it and see that fail.

00:47:41.510 --> 00:47:43.110
<v Speaker 1>Yeah. Read

00:47:43.349 --> 00:47:44.550
<v Speaker 0>a b c.

00:47:45.030 --> 00:47:46.470
<v Speaker 0>And we'll check on

00:47:46.710 --> 00:47:47.829
<v Speaker 0>it's pulling.

00:47:53.285 --> 00:47:54.485
<v Speaker 1>Yep. It is.

00:47:54.805 --> 00:47:56.245
<v Speaker 0>My connection Codespaces

00:47:56.245 --> 00:47:58.005
<v Speaker 1>pulls the image pretty quick.

00:47:59.765 --> 00:48:02.325
<v Speaker 0>My connection is not gonna be fantastic when

00:48:02.325 --> 00:48:04.485
<v Speaker 0>I'm streaming, but we'll make it Right.

00:48:04.965 --> 00:48:06.565
<v Speaker 0>So now we get an error that fail

00:48:06.565 --> 00:48:07.840
<v Speaker 0>doesn't exist.

00:48:08.400 --> 00:48:09.920
<v Speaker 0>So what we could do here is you

00:48:09.920 --> 00:48:11.040
<v Speaker 0>can say, well, actually,

00:48:11.200 --> 00:48:12.640
<v Speaker 0>let's assign

00:48:14.480 --> 00:48:16.160
<v Speaker 0>horrible. I need a better name. I can't

00:48:16.160 --> 00:48:17.520
<v Speaker 0>do that. I can't do that to myself.

00:48:18.320 --> 00:48:20.400
<v Speaker 0>We'll just call this a t a b

00:48:20.400 --> 00:48:21.280
<v Speaker 0>c file

00:48:21.545 --> 00:48:23.865
<v Speaker 0>equals, and we're gonna do self touch a

00:48:23.865 --> 00:48:26.745
<v Speaker 0>b c. So we're gonna run that task.

00:48:26.985 --> 00:48:29.465
<v Speaker 0>Now these will be cached a lot because

00:48:30.265 --> 00:48:32.425
<v Speaker 1>Uh-huh. It's and puts and outputs with both

00:48:32.425 --> 00:48:34.185
<v Speaker 0>in in container. The same way a Dockerfile

00:48:34.185 --> 00:48:35.785
<v Speaker 0>works, so caching is very similar.

00:48:36.620 --> 00:48:38.940
<v Speaker 0>But we want to get a file from

00:48:38.940 --> 00:48:39.660
<v Speaker 0>this.

00:48:41.180 --> 00:48:41.820
<v Speaker 0>Okay.

00:48:42.860 --> 00:48:43.740
<v Speaker 0>And then

00:48:44.380 --> 00:48:45.660
<v Speaker 0>well, I mean, I could just write that

00:48:45.660 --> 00:48:47.740
<v Speaker 0>as is to the I I could just

00:48:47.740 --> 00:48:49.660
<v Speaker 0>take that and then print it, to be

00:48:49.660 --> 00:48:52.244
<v Speaker 0>honest. But we could mount it into this

00:48:52.244 --> 00:48:53.285
<v Speaker 0>other container.

00:48:53.605 --> 00:48:55.685
<v Speaker 0>So we could say with

00:48:55.925 --> 00:48:56.405
<v Speaker 0>file,

00:48:58.085 --> 00:49:00.565
<v Speaker 0>which needs a path and a source. So

00:49:00.565 --> 00:49:02.325
<v Speaker 0>I'm gonna put it in the same location,

00:49:02.964 --> 00:49:06.050
<v Speaker 0>and it is our a b c file,

00:49:06.050 --> 00:49:06.850
<v Speaker 0>like so.

00:49:07.330 --> 00:49:09.890
<v Speaker 1>I think I'm gonna now that we're doing

00:49:09.890 --> 00:49:11.650
<v Speaker 1>this part, I think I'm gonna have to

00:49:11.650 --> 00:49:13.890
<v Speaker 1>sleep on it for it to actually fully

00:49:13.890 --> 00:49:17.330
<v Speaker 1>sink in and then start thinking natively in

00:49:17.330 --> 00:49:18.050
<v Speaker 1>this paradigm.

00:49:19.155 --> 00:49:21.395
<v Speaker 1>Because that is a little bit, like

00:49:21.635 --> 00:49:23.555
<v Speaker 1>I mean, we're layering a lot of concepts

00:49:23.555 --> 00:49:25.715
<v Speaker 1>here. We're writing Python.

00:49:25.875 --> 00:49:28.595
<v Speaker 1>The Python runs a ton of stuff in

00:49:29.155 --> 00:49:29.955
<v Speaker 1>containers.

00:49:30.600 --> 00:49:33.240
<v Speaker 1>It's not normal Python because a ton of

00:49:33.240 --> 00:49:35.240
<v Speaker 1>things are happening in the background.

00:49:35.640 --> 00:49:37.640
<v Speaker 1>Like, there is a lot of

00:49:38.040 --> 00:49:40.120
<v Speaker 1>new neurons that you have to build in

00:49:40.120 --> 00:49:41.320
<v Speaker 1>your brain for this.

00:49:42.680 --> 00:49:43.240
<v Speaker 0>Yes.

00:49:45.535 --> 00:49:47.455
<v Speaker 0>Just a shame we don't have fourteen hours

00:49:47.455 --> 00:49:48.255
<v Speaker 0>otherwise.

00:49:48.255 --> 00:49:49.215
<v Speaker 0>We we just need to

00:49:50.335 --> 00:49:52.255
<v Speaker 1>Yeah. Yeah. I'm I'm gonna be playing with

00:49:52.255 --> 00:49:53.855
<v Speaker 1>this after this because

00:49:53.855 --> 00:49:54.735
<v Speaker 1>it very

00:49:55.295 --> 00:49:57.830
<v Speaker 1>intriguing, and I'm so glad to have this

00:49:57.830 --> 00:49:58.710
<v Speaker 1>introduction

00:49:58.710 --> 00:50:00.230
<v Speaker 1>to it. I don't I think it would

00:50:00.230 --> 00:50:01.990
<v Speaker 1>have taken me a couple months to catch

00:50:01.990 --> 00:50:02.950
<v Speaker 1>up to this

00:50:03.670 --> 00:50:05.590
<v Speaker 0>No. We're gonna do something useful with this

00:50:05.590 --> 00:50:06.470
<v Speaker 0>repository.

00:50:06.470 --> 00:50:08.550
<v Speaker 0>But I'm I'm glad that we're we're we're

00:50:08.550 --> 00:50:10.870
<v Speaker 0>we're making progress. Right? Yeah. So let's let's

00:50:10.870 --> 00:50:12.444
<v Speaker 0>touch on the thing that your question there.

00:50:12.444 --> 00:50:14.605
<v Speaker 0>Our touch a b c returns a container.

00:50:14.845 --> 00:50:16.925
<v Speaker 0>Yes. This then becomes a variable

00:50:17.484 --> 00:50:19.325
<v Speaker 0>that we can just use. Right? You know,

00:50:19.325 --> 00:50:20.445
<v Speaker 0>if you think about

00:50:20.925 --> 00:50:23.885
<v Speaker 0>building a container image. Right? Mhmm. If you

00:50:23.885 --> 00:50:25.325
<v Speaker 0>want to get something out of it, it's

00:50:25.325 --> 00:50:27.279
<v Speaker 0>actually very difficult to do because you have

00:50:27.279 --> 00:50:29.039
<v Speaker 0>to, like, exec into it with a local

00:50:29.039 --> 00:50:31.200
<v Speaker 0>volume out and copy it across. I think

00:50:31.200 --> 00:50:32.800
<v Speaker 0>it's been a little bit easier now,

00:50:32.960 --> 00:50:34.720
<v Speaker 0>but it's been a pain point for many,

00:50:34.720 --> 00:50:36.880
<v Speaker 0>many years. With this a question that I

00:50:36.880 --> 00:50:39.279
<v Speaker 1>had that, like, Dagger container isn't a concept.

00:50:39.279 --> 00:50:41.039
<v Speaker 1>It's literally an OCI container.

00:50:41.885 --> 00:50:43.724
<v Speaker 0>And when you do Dagger, it just becomes

00:50:43.724 --> 00:50:45.565
<v Speaker 0>a variable that we can introspect. I can

00:50:45.565 --> 00:50:48.125
<v Speaker 0>request files, I can request directories, I can

00:50:48.125 --> 00:50:50.204
<v Speaker 0>run more commands inside that container, I can

00:50:50.204 --> 00:50:52.685
<v Speaker 0>do whatever I want. And then it inherits

00:50:52.685 --> 00:50:55.109
<v Speaker 1>the name of the function itself is what

00:50:55.109 --> 00:50:55.750
<v Speaker 1>I'm seeing.

00:50:56.710 --> 00:50:58.390
<v Speaker 0>Oh, I do understand that statement.

00:50:59.029 --> 00:51:02.230
<v Speaker 1>Dag container from with file and then you

00:51:02.230 --> 00:51:04.950
<v Speaker 1>have the temp a b c and wait.

00:51:04.950 --> 00:51:07.670
<v Speaker 1>I'm sorry. No. The self touch a b

00:51:07.670 --> 00:51:09.255
<v Speaker 1>c dot file.

00:51:10.214 --> 00:51:10.855
<v Speaker 1>That

00:51:11.494 --> 00:51:12.215
<v Speaker 1>is

00:51:12.375 --> 00:51:14.695
<v Speaker 1>named based off of the

00:51:15.095 --> 00:51:16.454
<v Speaker 1>line 39

00:51:16.454 --> 00:51:18.934
<v Speaker 1>def touch a b c. Right? Or am

00:51:18.934 --> 00:51:22.070
<v Speaker 1>I Yeah. So we're calling this function, which

00:51:22.070 --> 00:51:23.990
<v Speaker 0>gives us back a container. We're gonna inside

00:51:23.990 --> 00:51:25.670
<v Speaker 0>the container to get a file, and we're

00:51:25.670 --> 00:51:27.270
<v Speaker 0>just attaching it to this variable here. And

00:51:27.270 --> 00:51:28.470
<v Speaker 0>from there, I could write it to my

00:51:28.470 --> 00:51:30.550
<v Speaker 0>local host if I want. But instead,

00:51:30.870 --> 00:51:32.470
<v Speaker 0>what's more like that you know, if you

00:51:32.470 --> 00:51:33.350
<v Speaker 0>think about a workflow,

00:51:35.115 --> 00:51:37.835
<v Speaker 0>say with Pulumi. Right? You run a Pulumi

00:51:37.835 --> 00:51:38.635
<v Speaker 0>plan,

00:51:39.195 --> 00:51:40.475
<v Speaker 0>and you wanna see if that plan to

00:51:40.475 --> 00:51:42.475
<v Speaker 0>fail so that you can guarantee that's what

00:51:42.475 --> 00:51:43.835
<v Speaker 0>runs on your next apply.

00:51:44.155 --> 00:51:45.595
<v Speaker 0>If you do that in Dagger, you could

00:51:45.595 --> 00:51:47.515
<v Speaker 0>pull that file out and store it somewhere,

00:51:47.570 --> 00:51:49.490
<v Speaker 0>and then your next function, which runs a

00:51:49.490 --> 00:51:51.410
<v Speaker 0>Bloomie apply with Mount Nab plan and and

00:51:51.410 --> 00:51:53.490
<v Speaker 0>run against it. And that's what we're doing

00:51:53.490 --> 00:51:55.570
<v Speaker 0>here. We're saying grab this a b c.

00:51:55.570 --> 00:51:57.330
<v Speaker 0>Now we haven't written anything to it. We

00:51:57.330 --> 00:51:58.610
<v Speaker 0>could change us to be an echo with

00:51:58.610 --> 00:51:59.730
<v Speaker 0>a redirect or whatever.

00:52:00.485 --> 00:52:02.565
<v Speaker 1>Sure. But we just want it to exist

00:52:02.565 --> 00:52:03.925
<v Speaker 0>to a point where we can see the

00:52:03.925 --> 00:52:06.245
<v Speaker 0>empty output here. So we're reaching into a

00:52:06.245 --> 00:52:07.845
<v Speaker 0>container. We're saying, give me that file. I

00:52:07.845 --> 00:52:09.605
<v Speaker 0>want to use it in this other container,

00:52:10.965 --> 00:52:12.565
<v Speaker 0>and then it runs. Another thing we could

00:52:12.565 --> 00:52:14.085
<v Speaker 0>do here, actually, maybe this is gonna be

00:52:14.085 --> 00:52:14.325
<v Speaker 0>a bit.

00:52:15.140 --> 00:52:16.900
<v Speaker 0>Let's run this first, and then we'll modify

00:52:16.900 --> 00:52:18.580
<v Speaker 0>it in a slightly different way.

00:52:18.980 --> 00:52:21.140
<v Speaker 1>Yeah. I'm I'm sitting on, like, a dozen

00:52:21.140 --> 00:52:23.380
<v Speaker 1>questions that I'm not asking so that I

00:52:23.380 --> 00:52:25.460
<v Speaker 1>don't continue to derail us.

00:52:26.660 --> 00:52:29.575
<v Speaker 0>All questions are good questions. It's less code

00:52:29.575 --> 00:52:30.935
<v Speaker 0>I have to write in Python.

00:52:34.695 --> 00:52:36.295
<v Speaker 0>Right. It works. The whole time. It's a

00:52:36.295 --> 00:52:38.455
<v Speaker 1>feature. This is great. We have all these

00:52:38.455 --> 00:52:39.175
<v Speaker 0>text.

00:52:39.255 --> 00:52:41.255
<v Speaker 0>No. It doesn't really do anything useful. So

00:52:41.255 --> 00:52:43.095
<v Speaker 0>let's change this. Right? Now what we're gonna

00:52:43.095 --> 00:52:44.930
<v Speaker 0>do is I'll paint, and I need to

00:52:44.930 --> 00:52:47.170
<v Speaker 0>be careful here actually because

00:52:47.170 --> 00:52:49.810
<v Speaker 0>we've got a muscle and glibc thing if

00:52:49.810 --> 00:52:52.050
<v Speaker 0>I try to do a command from Alpine.

00:52:52.690 --> 00:52:53.410
<v Speaker 0>Instead,

00:52:53.810 --> 00:52:54.690
<v Speaker 0>let's grab

00:52:56.770 --> 00:52:59.330
<v Speaker 0>is there an Arch Linux image? Surely.

00:53:00.174 --> 00:53:02.895
<v Speaker 0>Yeah. There there must be. Right? Sure. Surely.

00:53:03.135 --> 00:53:05.535
<v Speaker 1>You're you're gonna do another intuitive thing here

00:53:05.535 --> 00:53:07.295
<v Speaker 1>and it's gonna work flawlessly.

00:53:07.934 --> 00:53:09.295
<v Speaker 0>What I'm gonna do is I'm gonna grab

00:53:09.295 --> 00:53:11.615
<v Speaker 0>gold one. What's the latest version of gold?

00:53:11.615 --> 00:53:12.895
<v Speaker 0>One one twenty seven?

00:53:13.615 --> 00:53:14.175
<v Speaker 0>No.

00:53:14.494 --> 00:53:15.214
<v Speaker 1>Seven or eight?

00:53:19.140 --> 00:53:20.900
<v Speaker 0>Go one. So

00:53:22.820 --> 00:53:24.660
<v Speaker 0>to the point where I'm gonna run Go

00:53:24.820 --> 00:53:26.500
<v Speaker 1>I'm on 1.21.

00:53:26.580 --> 00:53:28.260
<v Speaker 0>One two one. Right. Okay. I thought Yeah.

00:53:28.340 --> 00:53:30.255
<v Speaker 0>2112

00:53:30.255 --> 00:53:32.414
<v Speaker 0>should work for Marcus. Okay. And we're gonna

00:53:32.414 --> 00:53:33.695
<v Speaker 0>run Go version here,

00:53:34.174 --> 00:53:36.095
<v Speaker 0>and we're gonna get back a container. But

00:53:36.095 --> 00:53:38.335
<v Speaker 0>what I'm actually gonna do what I'm actually

00:53:38.335 --> 00:53:38.974
<v Speaker 0>going to do,

00:53:41.850 --> 00:53:43.130
<v Speaker 0>we'll get the path for it so I

00:53:43.130 --> 00:53:44.330
<v Speaker 0>know where it lives. So I assume it's

00:53:44.330 --> 00:53:46.330
<v Speaker 0>gonna be used to bring Go. Yeah. So

00:53:46.330 --> 00:53:47.210
<v Speaker 0>let's

00:53:47.210 --> 00:53:49.050
<v Speaker 0>keep it more visual. Right? We wanna see

00:53:49.050 --> 00:53:51.770
<v Speaker 0>the version number. So let's grab the Go

00:53:51.770 --> 00:53:52.250
<v Speaker 0>binary,

00:53:56.055 --> 00:53:58.135
<v Speaker 0>which I believe is going to be here.

00:53:58.135 --> 00:53:59.335
<v Speaker 0>It may be wrong.

00:53:59.495 --> 00:54:01.335
<v Speaker 0>And we're gonna mount this in

00:54:04.615 --> 00:54:06.215
<v Speaker 0>to user

00:54:06.215 --> 00:54:07.095
<v Speaker 0>bin

00:54:07.255 --> 00:54:08.135
<v Speaker 0>Go

00:54:08.849 --> 00:54:10.369
<v Speaker 0>On the bin to a container, which has

00:54:10.369 --> 00:54:11.250
<v Speaker 0>no go.

00:54:11.490 --> 00:54:13.490
<v Speaker 0>And we're gonna run go version again.

00:54:13.970 --> 00:54:16.130
<v Speaker 1>Thing that I'm curious about here is you

00:54:16.130 --> 00:54:18.609
<v Speaker 1>could actually do which go and then use

00:54:18.609 --> 00:54:19.170
<v Speaker 1>that

00:54:20.130 --> 00:54:23.125
<v Speaker 1>output as a string to inform

00:54:23.365 --> 00:54:25.045
<v Speaker 1>the path that you

00:54:25.204 --> 00:54:27.444
<v Speaker 1>hard coded in on forty four and forty

00:54:27.444 --> 00:54:27.925
<v Speaker 1>five?

00:54:29.285 --> 00:54:31.205
<v Speaker 0>I totally could. Yes.

00:54:31.845 --> 00:54:32.565
<v Speaker 1>Okay.

00:54:33.125 --> 00:54:33.605
<v Speaker 1>Practicing

00:54:34.405 --> 00:54:35.845
<v Speaker 1>concepts here out loud.

00:54:36.860 --> 00:54:37.660
<v Speaker 0>Alright.

00:54:38.540 --> 00:54:40.700
<v Speaker 0>Let's get standardized first. One dot two doesn't

00:54:40.700 --> 00:54:42.140
<v Speaker 1>exist, so I think we need to drop

00:54:42.140 --> 00:54:44.140
<v Speaker 1>one dot two one. It looks like Marcos

00:54:44.140 --> 00:54:45.580
<v Speaker 1>is backing us up here.

00:54:47.180 --> 00:54:48.940
<v Speaker 0>Well, he says up for failure faster than

00:54:48.940 --> 00:54:49.900
<v Speaker 0>fixed it, so that's okay.

00:54:50.625 --> 00:54:52.625
<v Speaker 0>So let's run touch a b c.

00:54:53.585 --> 00:54:54.305
<v Speaker 0>Touch.

00:54:55.985 --> 00:54:57.905
<v Speaker 0>Hey. We've got conductor as well, so we

00:54:57.905 --> 00:54:59.585
<v Speaker 0>can make some progress on the the real

00:54:59.585 --> 00:55:00.145
<v Speaker 0>work.

00:55:01.105 --> 00:55:03.265
<v Speaker 0>But let's see the output of Go version,

00:55:03.265 --> 00:55:05.400
<v Speaker 0>and then we're gonna pull that binary out,

00:55:05.400 --> 00:55:07.240
<v Speaker 0>stick it into the Ubuntu container, and run

00:55:07.240 --> 00:55:08.440
<v Speaker 0>Go version again,

00:55:08.839 --> 00:55:11.160
<v Speaker 0>which I just think is very cool. Oh,

00:55:11.320 --> 00:55:13.000
<v Speaker 0>Go one doesn't exist.

00:55:14.119 --> 00:55:14.760
<v Speaker 1>Yeah.

00:55:15.720 --> 00:55:16.839
<v Speaker 1>You might

00:55:17.675 --> 00:55:18.715
<v Speaker 1>go latest.

00:55:23.355 --> 00:55:25.035
<v Speaker 0>I think go line. That's what it's gonna

00:55:25.035 --> 00:55:25.835
<v Speaker 0>be, isn't it?

00:55:26.235 --> 00:55:26.955
<v Speaker 1>Possibly.

00:55:27.675 --> 00:55:29.515
<v Speaker 0>Yeah. There we go. There it is.

00:55:30.910 --> 00:55:33.150
<v Speaker 0>You didn't catch that, Marcos. Come on.

00:55:34.030 --> 00:55:35.310
<v Speaker 0>Supposed to be a team.

00:55:38.190 --> 00:55:40.430
<v Speaker 1>He's not even here to defend himself, and

00:55:40.430 --> 00:55:40.910
<v Speaker 1>you're like

00:55:42.110 --> 00:55:43.550
<v Speaker 0>I know. He's trying to stick me on

00:55:43.550 --> 00:55:45.790
<v Speaker 0>one bookworm there. But, yeah, we're we're all

00:55:45.790 --> 00:55:46.030
<v Speaker 0>good.

00:55:46.645 --> 00:55:48.645
<v Speaker 0>He's also talking about really oh, I just

00:55:48.645 --> 00:55:50.165
<v Speaker 0>showed the wrong comment there. He's talking about

00:55:50.165 --> 00:55:51.205
<v Speaker 0>a really cool feature we could do with

00:55:51.205 --> 00:55:52.565
<v Speaker 0>Dagger. And, hopefully, we have time to get

00:55:52.565 --> 00:55:54.485
<v Speaker 0>into it. But we actually have the ability

00:55:54.485 --> 00:55:55.925
<v Speaker 0>to, like, go inside

00:55:56.005 --> 00:55:58.805
<v Speaker 0>of our build pipeline and debug things live.

00:55:58.805 --> 00:56:00.085
<v Speaker 1>I need to see that.

00:56:02.589 --> 00:56:05.070
<v Speaker 1>That is necessary for success.

00:56:06.670 --> 00:56:09.150
<v Speaker 0>Yeah. Debugging is a very important skill.

00:56:10.109 --> 00:56:12.190
<v Speaker 0>And that's one of the challenges You've

00:56:12.190 --> 00:56:15.710
<v Speaker 1>got Podman here. Are you Mhmm. Is Dagger

00:56:15.710 --> 00:56:18.510
<v Speaker 1>happy with Docker and Podman

00:56:19.365 --> 00:56:20.325
<v Speaker 1>interchangeably?

00:56:20.325 --> 00:56:23.125
<v Speaker 1>Like, is there anything unique there? You need

00:56:23.125 --> 00:56:25.525
<v Speaker 0>the alias. So under the hood,

00:56:26.725 --> 00:56:29.045
<v Speaker 0>at least when you run a Dagger in

00:56:29.045 --> 00:56:31.925
<v Speaker 0>it, when it creates that build kit engine,

00:56:32.310 --> 00:56:34.790
<v Speaker 0>the Dagger engine. I believe it does shell

00:56:34.790 --> 00:56:37.270
<v Speaker 0>out to to Docker to get that set

00:56:37.270 --> 00:56:39.510
<v Speaker 0>up. So I just have to alias that,

00:56:39.510 --> 00:56:41.350
<v Speaker 0>Podman to Docker for that to work. But

00:56:41.350 --> 00:56:42.870
<v Speaker 0>everything else is okay, and I do run

00:56:42.870 --> 00:56:43.750
<v Speaker 0>Podman

00:56:43.750 --> 00:56:46.595
<v Speaker 0>in compatibility mode with Docker. So I I

00:56:46.595 --> 00:56:48.435
<v Speaker 1>feel like our audience knows

00:56:48.515 --> 00:56:50.355
<v Speaker 1>as much, if not more than us right

00:56:50.355 --> 00:56:50.835
<v Speaker 1>now

00:56:51.474 --> 00:56:52.835
<v Speaker 1>because apparently,

00:56:52.835 --> 00:56:56.195
<v Speaker 1>they're telling us all they're speeding ahead

00:56:56.434 --> 00:56:58.195
<v Speaker 1>and and, like, answering

00:56:58.275 --> 00:57:00.115
<v Speaker 1>the stuff that we're gonna reveal here.

00:57:01.599 --> 00:57:03.120
<v Speaker 0>Right. Well, we got

00:57:03.760 --> 00:57:05.760
<v Speaker 0>oh, yeah. Because I didn't update my type.

00:57:06.319 --> 00:57:07.520
<v Speaker 0>I wonder if I can just leave that

00:57:07.520 --> 00:57:09.040
<v Speaker 0>off. No. Let's

00:57:09.040 --> 00:57:11.200
<v Speaker 0>be good citizens. Yeah. Think yeah.

00:57:12.560 --> 00:57:14.960
<v Speaker 0>And let's not fall back to the lazy

00:57:15.280 --> 00:57:16.320
<v Speaker 0>typing. Exactly.

00:57:16.480 --> 00:57:16.800
<v Speaker 0>Yes.

00:57:21.234 --> 00:57:22.755
<v Speaker 0>No. This should be pretty quick. It's just

00:57:22.755 --> 00:57:25.315
<v Speaker 0>regenerating the SDK because we changed the type.

00:57:25.714 --> 00:57:28.275
<v Speaker 0>And then we should see Go version one

00:57:28.275 --> 00:57:31.250
<v Speaker 0>twenty two. Perfect. Cool. Let's take off that

00:57:31.250 --> 00:57:32.210
<v Speaker 0>standard out.

00:57:33.170 --> 00:57:35.170
<v Speaker 0>Go back to a Dagger

00:57:35.330 --> 00:57:37.890
<v Speaker 0>container, which means that our second thing here

00:57:37.890 --> 00:57:40.130
<v Speaker 0>will work. If we returned a string, we

00:57:40.130 --> 00:57:41.810
<v Speaker 0>would no longer be able to query that

00:57:41.810 --> 00:57:42.930
<v Speaker 0>container itself,

00:57:43.170 --> 00:57:45.505
<v Speaker 0>which is when you really get into composition.

00:57:45.505 --> 00:57:46.705
<v Speaker 0>Right? This

00:57:46.865 --> 00:57:48.465
<v Speaker 0>is where I would just say, well, let's

00:57:48.465 --> 00:57:49.505
<v Speaker 0>have another function

00:57:49.905 --> 00:57:52.865
<v Speaker 0>where we say def touch a b c

00:57:53.265 --> 00:57:55.345
<v Speaker 0>output or something like that,

00:57:55.825 --> 00:57:57.425
<v Speaker 0>and that would just be returning

00:57:57.840 --> 00:57:59.200
<v Speaker 0>that. So now we have a new function

00:57:59.200 --> 00:58:00.640
<v Speaker 0>if we need to, but we always wanna

00:58:00.640 --> 00:58:03.120
<v Speaker 0>keep that container available for other things. The

00:58:03.120 --> 00:58:05.280
<v Speaker 0>good code hygiene becomes very important,

00:58:05.600 --> 00:58:08.720
<v Speaker 0>especially for composition. But let's not get too

00:58:08.720 --> 00:58:10.560
<v Speaker 0>too meta with the code right now.

00:58:11.525 --> 00:58:13.685
<v Speaker 0>So now we can do a read a

00:58:13.685 --> 00:58:15.765
<v Speaker 0>b c, which is going to execute Go

00:58:15.765 --> 00:58:17.765
<v Speaker 0>on an Ubuntu container, which has never seen

00:58:17.765 --> 00:58:19.045
<v Speaker 0>Go in its life.

00:58:19.925 --> 00:58:20.725
<v Speaker 0>Right.

00:58:20.885 --> 00:58:22.565
<v Speaker 0>Read a b c.

00:58:23.445 --> 00:58:24.565
<v Speaker 0>Does that make sense?

00:58:24.965 --> 00:58:26.560
<v Speaker 0>I know we're not really getting into anything

00:58:26.560 --> 00:58:28.000
<v Speaker 0>particularly useful,

00:58:28.080 --> 00:58:30.640
<v Speaker 0>but We are. Absolutely. I

00:58:31.440 --> 00:58:32.720
<v Speaker 1>mean, I know that

00:58:33.119 --> 00:58:34.000
<v Speaker 1>we

00:58:35.920 --> 00:58:38.400
<v Speaker 1>kind of suggested we would be doing

00:58:38.720 --> 00:58:40.480
<v Speaker 1>actual cargo

00:58:41.785 --> 00:58:43.225
<v Speaker 1>work here,

00:58:43.465 --> 00:58:43.945
<v Speaker 1>but

00:58:44.345 --> 00:58:45.945
<v Speaker 1>I feel like we both have to be

00:58:45.945 --> 00:58:47.785
<v Speaker 1>on the same page to actually make progress

00:58:47.785 --> 00:58:49.865
<v Speaker 1>there, and you are doing a phenomenal job

00:58:49.865 --> 00:58:50.585
<v Speaker 1>teaching.

00:58:51.465 --> 00:58:52.265
<v Speaker 0>Thank you.

00:58:53.559 --> 00:58:56.200
<v Speaker 0>So her container file failed. So that is

00:58:56.200 --> 00:58:57.640
<v Speaker 0>not the path of

00:58:57.640 --> 00:58:58.280
<v Speaker 0>Go.

00:58:58.599 --> 00:59:01.640
<v Speaker 0>So let's say, read Go or file. Let's

00:59:01.640 --> 00:59:02.760
<v Speaker 0>call it Witch Go,

00:59:03.319 --> 00:59:06.119
<v Speaker 0>where we're going to execute another command.

00:59:07.805 --> 00:59:09.165
<v Speaker 0>I love Copilot.

00:59:09.405 --> 00:59:10.205
<v Speaker 0>It's so good.

00:59:10.685 --> 00:59:11.245
<v Speaker 0>And

00:59:11.885 --> 00:59:13.405
<v Speaker 0>we'll run which go. And that will give

00:59:13.405 --> 00:59:15.085
<v Speaker 0>me the path for go, which will then

00:59:15.085 --> 00:59:17.405
<v Speaker 0>fix that main statement, and we'll see us

00:59:17.405 --> 00:59:19.805
<v Speaker 0>passing artifacts from job to job and a

00:59:19.805 --> 00:59:20.605
<v Speaker 0>code first fashion.

00:59:32.089 --> 00:59:34.089
<v Speaker 1>So it's user local go bingo.

00:59:35.724 --> 00:59:38.365
<v Speaker 0>I want the container to tell me. I

00:59:38.365 --> 00:59:42.125
<v Speaker 1>know. You're doing a brilliant job coding your

00:59:42.125 --> 00:59:43.165
<v Speaker 1>way to the and

00:59:43.405 --> 00:59:45.885
<v Speaker 1>I'm just like, docker run exec.

00:59:46.845 --> 00:59:48.605
<v Speaker 0>The Dagger team are yelling at me going,

00:59:48.605 --> 00:59:50.845
<v Speaker 0>just show terminal. And I'm like, yeah. But,

00:59:51.060 --> 00:59:52.580
<v Speaker 0>you know, composition

00:59:52.580 --> 00:59:55.380
<v Speaker 0>is important too. We wanna show people editors.

00:59:55.380 --> 00:59:56.900
<v Speaker 0>But, yeah, we should show terminal.

00:59:57.700 --> 00:59:59.220
<v Speaker 0>So let's just make sure we've put out

00:59:59.220 --> 01:00:00.500
<v Speaker 0>the right binary.

01:00:01.060 --> 01:00:03.540
<v Speaker 0>Let's go for read ABC, and then we

01:00:03.540 --> 01:00:04.340
<v Speaker 0>will use terminal.

01:00:05.984 --> 01:00:07.984
<v Speaker 1>So one of the nice things that I'm

01:00:07.984 --> 01:00:09.025
<v Speaker 1>seeing here about,

01:00:09.265 --> 01:00:10.225
<v Speaker 1>for example,

01:00:10.944 --> 01:00:13.105
<v Speaker 1>using the code itself to find the path

01:00:13.105 --> 01:00:13.744
<v Speaker 1>is

01:00:13.905 --> 01:00:15.585
<v Speaker 1>later on down the road, if you switch

01:00:15.585 --> 01:00:17.424
<v Speaker 1>out a container that has a different path,

01:00:18.039 --> 01:00:20.599
<v Speaker 1>that's just gonna, like, dynamically adjust itself, and

01:00:20.599 --> 01:00:21.559
<v Speaker 1>you don't have to go in and fix

01:00:21.559 --> 01:00:23.720
<v Speaker 1>a bunch of hard coded stuff. So that's

01:00:23.720 --> 01:00:25.000
<v Speaker 1>pretty cool all by itself.

01:00:25.559 --> 01:00:26.040
<v Speaker 0>Yeah.

01:00:26.440 --> 01:00:28.039
<v Speaker 0>I mean, that should have worked. I'm not

01:00:28.039 --> 01:00:29.480
<v Speaker 0>gonna fix that. I said, no. Just complete

01:00:29.480 --> 01:00:31.000
<v Speaker 0>it and the go route doesn't exist and

01:00:31.000 --> 01:00:31.559
<v Speaker 0>stuff.

01:00:31.905 --> 01:00:34.625
<v Speaker 0>We did get go into that container,

01:00:34.625 --> 01:00:36.625
<v Speaker 0>and it did attempt to run. To me,

01:00:36.625 --> 01:00:37.585
<v Speaker 0>that is good enough.

01:00:37.905 --> 01:00:38.545
<v Speaker 1>Okay.

01:00:38.865 --> 01:00:39.425
<v Speaker 0>So

01:00:40.865 --> 01:00:41.905
<v Speaker 0>let's do

01:00:42.225 --> 01:00:42.705
<v Speaker 0>terminal.

01:00:44.360 --> 01:00:46.760
<v Speaker 0>So when we have let's

01:00:49.880 --> 01:00:52.200
<v Speaker 0>this one returns a container. We have touch

01:00:52.200 --> 01:00:53.240
<v Speaker 0>a b c.

01:00:54.120 --> 01:00:55.880
<v Speaker 0>So if we do Dagger call, I will

01:00:55.880 --> 01:00:56.760
<v Speaker 0>look at the help here.

01:01:01.675 --> 01:01:03.595
<v Speaker 0>You'll see all of our functions, and we've

01:01:03.595 --> 01:01:06.075
<v Speaker 0>got all the parameters. Is terminal not documented?

01:01:08.715 --> 01:01:09.835
<v Speaker 0>Okay.

01:01:10.555 --> 01:01:12.635
<v Speaker 0>We'll go to touch a b c and

01:01:12.635 --> 01:01:13.195
<v Speaker 0>do

01:01:13.435 --> 01:01:13.994
<v Speaker 0>terminal.

01:01:16.500 --> 01:01:17.860
<v Speaker 1>Tribal knowledge.

01:01:17.860 --> 01:01:18.740
<v Speaker 1>So

01:01:21.780 --> 01:01:24.180
<v Speaker 0>what's actually happened here is that Dagger call

01:01:24.180 --> 01:01:26.500
<v Speaker 0>touch a b c returns a container.

01:01:26.900 --> 01:01:29.045
<v Speaker 0>So when we add terminal, that gives us

01:01:29.045 --> 01:01:31.045
<v Speaker 0>the ability to get a shell inside of

01:01:31.045 --> 01:01:32.964
<v Speaker 0>that returned container. If we return to anything

01:01:32.964 --> 01:01:33.525
<v Speaker 0>else,

01:01:34.404 --> 01:01:35.685
<v Speaker 0>it wouldn't happen.

01:01:35.924 --> 01:01:37.765
<v Speaker 1>So I wanna compare this to what I

01:01:37.765 --> 01:01:39.925
<v Speaker 1>have been using. I've been using

01:01:40.404 --> 01:01:43.125
<v Speaker 1>GitHub actions for a lot of my CICD,

01:01:43.900 --> 01:01:45.420
<v Speaker 1>and I use

01:01:45.740 --> 01:01:47.020
<v Speaker 1>Act CLI.

01:01:47.020 --> 01:01:50.220
<v Speaker 1>That's a little CLI that runs GitHub Actions

01:01:50.220 --> 01:01:51.820
<v Speaker 1>locally in a container.

01:01:53.500 --> 01:01:55.820
<v Speaker 1>When things go wrong and it's a very

01:01:55.820 --> 01:01:56.780
<v Speaker 1>long workflow,

01:01:57.425 --> 01:01:59.825
<v Speaker 1>you have to wait sometimes fifteen, twenty minutes

01:01:59.825 --> 01:02:01.984
<v Speaker 1>in between iterations to see if you actually

01:02:01.984 --> 01:02:05.185
<v Speaker 1>succeeded at fixing or enhancing

01:02:05.505 --> 01:02:07.025
<v Speaker 1>whatever you're doing correctly.

01:02:10.305 --> 01:02:12.810
<v Speaker 1>And it is not accessible for debugging.

01:02:12.890 --> 01:02:14.730
<v Speaker 1>So this actually lets you

01:02:15.609 --> 01:02:17.609
<v Speaker 1>jump into your pipeline at the point that

01:02:17.609 --> 01:02:20.810
<v Speaker 1>it's breaking and sort out the problems,

01:02:21.450 --> 01:02:21.930
<v Speaker 1>like,

01:02:22.250 --> 01:02:22.810
<v Speaker 1>hands on.

01:02:23.435 --> 01:02:23.995
<v Speaker 1>And

01:02:24.475 --> 01:02:26.715
<v Speaker 1>that is my style. Like, if I can't

01:02:26.715 --> 01:02:28.875
<v Speaker 1>get hands on with my own infrastructure

01:02:28.875 --> 01:02:29.675
<v Speaker 1>and

01:02:29.675 --> 01:02:32.075
<v Speaker 1>build and things like that, I feel

01:02:33.035 --> 01:02:34.475
<v Speaker 1>like my hands are tied.

01:02:35.440 --> 01:02:37.520
<v Speaker 1>I love this and I'm going to overuse

01:02:37.520 --> 01:02:38.640
<v Speaker 1>it and

01:02:39.360 --> 01:02:40.480
<v Speaker 1>that's so cool.

01:02:41.040 --> 01:02:43.280
<v Speaker 0>Yeah. I think, you know, the Dagger team

01:02:43.280 --> 01:02:45.360
<v Speaker 0>are using Dagger themselves, of course, and that

01:02:45.360 --> 01:02:48.160
<v Speaker 0>dog fitting comes a lot of strong developer

01:02:48.160 --> 01:02:50.965
<v Speaker 0>experience benefits with every release. Right? They're always

01:02:50.965 --> 01:02:52.725
<v Speaker 0>making things that little bit nicer, a little

01:02:52.725 --> 01:02:53.605
<v Speaker 0>bit easier.

01:02:54.005 --> 01:02:56.085
<v Speaker 0>Yep. But Marco says the problem with my

01:02:56.085 --> 01:02:58.805
<v Speaker 0>help was I needed the function first,

01:03:00.565 --> 01:03:02.960
<v Speaker 0>and that should have told me the terminal

01:03:02.960 --> 01:03:03.840
<v Speaker 0>extra.

01:03:04.799 --> 01:03:06.880
<v Speaker 0>Cool. You can actually run any of Dagger's

01:03:06.880 --> 01:03:09.440
<v Speaker 0>functions. So Got it. There is a lot

01:03:09.440 --> 01:03:11.200
<v Speaker 1>of help there to read and

01:03:12.880 --> 01:03:15.279
<v Speaker 1>I love that that generates all dynamically based

01:03:15.279 --> 01:03:16.000
<v Speaker 1>on your functions.

01:03:17.355 --> 01:03:19.355
<v Speaker 0>Yeah. It kind of insane.

01:03:19.675 --> 01:03:22.315
<v Speaker 0>Yeah. You can even retrieve the file. We

01:03:22.315 --> 01:03:23.675
<v Speaker 0>could do that just on the command line

01:03:23.675 --> 01:03:25.835
<v Speaker 0>if we wanted to. So Okay.

01:03:26.555 --> 01:03:27.355
<v Speaker 0>Okay.

01:03:27.675 --> 01:03:29.435
<v Speaker 0>I mean, I think that covers all of

01:03:29.435 --> 01:03:30.075
<v Speaker 0>the

01:03:30.650 --> 01:03:32.730
<v Speaker 0>the basics. Now there's a whole bunch of

01:03:32.730 --> 01:03:35.210
<v Speaker 0>other stuff that we're I mean, we've got

01:03:35.210 --> 01:03:36.890
<v Speaker 0>what? Twenty five minutes left of the time

01:03:36.890 --> 01:03:38.170
<v Speaker 0>that we can set aside for this. If

01:03:38.170 --> 01:03:40.170
<v Speaker 1>we can build the kind cluster,

01:03:40.890 --> 01:03:41.370
<v Speaker 1>then

01:03:41.930 --> 01:03:45.145
<v Speaker 1>that'll give me enough boilerplate to proceed from

01:03:45.145 --> 01:03:46.825
<v Speaker 1>there. And I'm I kind of have a

01:03:46.825 --> 01:03:48.985
<v Speaker 1>goal of seeing if I can get the

01:03:48.985 --> 01:03:49.625
<v Speaker 1>whole,

01:03:51.145 --> 01:03:51.705
<v Speaker 1>like,

01:03:51.945 --> 01:03:55.225
<v Speaker 1>build and deploy to run by, like, 01:00

01:03:55.225 --> 01:03:56.985
<v Speaker 1>my time. So that would give me something

01:03:56.985 --> 01:03:58.869
<v Speaker 1>like two and a half hours. So if

01:03:58.869 --> 01:04:00.950
<v Speaker 1>we can get a kind cluster built,

01:04:01.510 --> 01:04:04.550
<v Speaker 1>I can run with it from there solo.

01:04:05.350 --> 01:04:07.750
<v Speaker 0>Okay. So we're gonna have to work out

01:04:09.109 --> 01:04:11.350
<v Speaker 0>the container within the container part. So I'm

01:04:11.350 --> 01:04:13.830
<v Speaker 0>gonna ask Marcos, so I know he's been

01:04:13.335 --> 01:04:15.494
<v Speaker 0>doing the KCS stuff. I think it was

01:04:15.494 --> 01:04:17.335
<v Speaker 0>Marcos. Sorry, Marcos. I'm speaking

01:04:17.575 --> 01:04:20.055
<v Speaker 0>and assigning you something that you haven't done.

01:04:20.615 --> 01:04:22.535
<v Speaker 0>But let's get the the boilerplate for the

01:04:22.535 --> 01:04:24.935
<v Speaker 0>kind stuff working with your config.

01:04:25.335 --> 01:04:27.415
<v Speaker 0>And then, hopefully, Marcos can drop in some

01:04:27.415 --> 01:04:28.900
<v Speaker 0>context for how we make sure that that's

01:04:28.900 --> 01:04:30.900
<v Speaker 0>actually going to work. Sure. So So for

01:04:30.900 --> 01:04:32.980
<v Speaker 1>this, you might wanna open the makefile because

01:04:32.980 --> 01:04:35.780
<v Speaker 1>the makefile, I do use make kind

01:04:36.020 --> 01:04:36.900
<v Speaker 1>a lot.

01:04:39.060 --> 01:04:40.100
<v Speaker 1>And there's

01:04:40.340 --> 01:04:41.700
<v Speaker 1>a few commands in there.

01:04:48.735 --> 01:04:51.215
<v Speaker 1>Yep. There it is. Okay. So you're looking

01:04:51.215 --> 01:04:52.655
<v Speaker 1>at lines

01:04:53.535 --> 01:04:56.495
<v Speaker 1>one sixty three to one sixty six

01:04:56.495 --> 01:04:57.855
<v Speaker 1>is the important stuff.

01:05:01.710 --> 01:05:03.310
<v Speaker 0>Do we need the volumes?

01:05:04.590 --> 01:05:07.950
<v Speaker 1>If we comment out those volumes

01:05:07.950 --> 01:05:09.230
<v Speaker 1>from our

01:05:10.190 --> 01:05:11.230
<v Speaker 1>kind config,

01:05:11.630 --> 01:05:14.474
<v Speaker 1>then we don't. But as long as that's

01:05:14.474 --> 01:05:15.755
<v Speaker 1>the kind config, we do.

01:05:16.395 --> 01:05:19.115
<v Speaker 0>With Dagger, we wouldn't use Docker volumes.

01:05:19.194 --> 01:05:21.275
<v Speaker 0>We would use Dagger

01:05:21.275 --> 01:05:24.155
<v Speaker 0>volumes and put them into the containers as

01:05:24.155 --> 01:05:25.994
<v Speaker 0>required. Although then, they have to get in

01:05:26.270 --> 01:05:27.390
<v Speaker 0>propagated into.

01:05:27.790 --> 01:05:28.910
<v Speaker 0>Yeah. Let's yeah.

01:05:30.109 --> 01:05:31.950
<v Speaker 0>Let's work this out. So let's take a

01:05:31.950 --> 01:05:34.030
<v Speaker 0>look at your kind config first.

01:05:34.270 --> 01:05:35.790
<v Speaker 1>Mhmm. In the hack directory

01:05:35.950 --> 01:05:36.590
<v Speaker 1>because,

01:05:36.829 --> 01:05:38.430
<v Speaker 1>I mean, aptly named.

01:05:39.755 --> 01:05:41.355
<v Speaker 0>Yeah. That seems to be it's a ghost

01:05:41.355 --> 01:05:43.355
<v Speaker 0>thing. Right? The hack directory. It's it's never

01:05:43.355 --> 01:05:45.115
<v Speaker 0>something I've I've done a lot of, but

01:05:45.115 --> 01:05:47.595
<v Speaker 0>I know. I I I have them littered

01:05:47.595 --> 01:05:48.955
<v Speaker 1>around everywhere.

01:05:48.955 --> 01:05:52.235
<v Speaker 1>It's it's not it's probably not great hygiene.

01:05:54.720 --> 01:05:55.360
<v Speaker 0>Okay.

01:05:55.680 --> 01:05:56.400
<v Speaker 0>So

01:05:57.200 --> 01:05:58.880
<v Speaker 0>what do you use these mounts for? This

01:05:58.880 --> 01:06:00.880
<v Speaker 0>is just an image cache. Right? Yeah. I

01:06:00.880 --> 01:06:02.640
<v Speaker 1>I I was just using it to cache

01:06:02.640 --> 01:06:05.840
<v Speaker 1>images because it is a Kubernetes project with

01:06:05.840 --> 01:06:08.795
<v Speaker 1>a ton of different operators and helm charts

01:06:08.795 --> 01:06:09.915
<v Speaker 1>and things like that.

01:06:10.235 --> 01:06:13.355
<v Speaker 1>And building and destroying and building is a

01:06:13.355 --> 01:06:14.235
<v Speaker 1>lot

01:06:14.235 --> 01:06:15.915
<v Speaker 1>of work if

01:06:16.555 --> 01:06:18.795
<v Speaker 1>you're downloading images every single time.

01:06:19.035 --> 01:06:20.715
<v Speaker 1>So I was volume mounting

01:06:21.675 --> 01:06:24.920
<v Speaker 1>basically local file image caches so that it

01:06:24.920 --> 01:06:25.800
<v Speaker 1>can survive

01:06:26.039 --> 01:06:27.319
<v Speaker 1>multiple

01:06:27.319 --> 01:06:29.400
<v Speaker 1>cluster build and destroys.

01:06:30.920 --> 01:06:31.560
<v Speaker 0>Okay.

01:06:34.039 --> 01:06:36.119
<v Speaker 0>I'm gonna try something. Let's come back to

01:06:36.119 --> 01:06:38.735
<v Speaker 0>Kangen just a moment. Right? So I

01:06:39.695 --> 01:06:41.935
<v Speaker 0>don't know. Python, can I drop this down?

01:06:41.935 --> 01:06:43.775
<v Speaker 0>Is that valid Python? No.

01:06:45.455 --> 01:06:47.695
<v Speaker 1>You you should be able to do that

01:06:47.695 --> 01:06:48.575
<v Speaker 1>within

01:06:48.575 --> 01:06:49.455
<v Speaker 1>the

01:06:50.460 --> 01:06:53.340
<v Speaker 1>parentheses itself. So if you go yeah.

01:06:55.340 --> 01:06:56.780
<v Speaker 0>What? I have to do it that way?

01:06:56.780 --> 01:06:58.620
<v Speaker 1>Mhmm. Yeah. That would work.

01:06:59.980 --> 01:07:01.180
<v Speaker 0>But there must be a way for me

01:07:01.180 --> 01:07:02.540
<v Speaker 0>to do it. Wait.

01:07:04.540 --> 01:07:05.500
<v Speaker 1>Not that I know of.

01:07:09.785 --> 01:07:11.385
<v Speaker 0>Alright. We'll just deal with the really long

01:07:11.385 --> 01:07:12.025
<v Speaker 0>lanes.

01:07:12.744 --> 01:07:14.825
<v Speaker 0>What I wanna do is grab

01:07:15.145 --> 01:07:15.865
<v Speaker 1>says

01:07:16.265 --> 01:07:17.705
<v Speaker 1>kind will be a bit painful to make

01:07:17.705 --> 01:07:19.145
<v Speaker 1>work. So I'm really curious

01:07:20.280 --> 01:07:23.320
<v Speaker 1>how that really works out and

01:07:24.840 --> 01:07:26.920
<v Speaker 1>it requires Docker CLI. So I have Docker

01:07:26.920 --> 01:07:28.840
<v Speaker 1>CLI in the conductor container,

01:07:29.400 --> 01:07:32.360
<v Speaker 1>but actually running the conductor container

01:07:32.440 --> 01:07:33.160
<v Speaker 1>requires

01:07:34.845 --> 01:07:37.645
<v Speaker 1>a lot of extra flags and things that

01:07:37.645 --> 01:07:39.005
<v Speaker 1>I do have documented

01:07:39.005 --> 01:07:42.765
<v Speaker 1>if we want to figure that out. But

01:07:43.405 --> 01:07:45.405
<v Speaker 0>Well, was gonna try this first. Super pretty.

01:07:45.405 --> 01:07:46.765
<v Speaker 0>I was wondering if because if we can

01:07:46.765 --> 01:07:47.725
<v Speaker 0>get Dockerdams

01:07:47.725 --> 01:07:50.020
<v Speaker 0>to work, we could just stick say kind

01:07:50.020 --> 01:07:51.940
<v Speaker 0>go binary inside of that

01:07:52.339 --> 01:07:55.140
<v Speaker 0>from the kindest image and it should it

01:07:55.140 --> 01:07:56.500
<v Speaker 0>may work. So I'm gonna try if I

01:07:56.500 --> 01:07:57.780
<v Speaker 0>can see if I can run Docker hello

01:07:57.780 --> 01:07:58.500
<v Speaker 0>world

01:07:58.819 --> 01:08:00.980
<v Speaker 0>with Dines inside of our Dagger pipeline.

01:08:01.615 --> 01:08:04.015
<v Speaker 1>Okay. And see what happens. So

01:08:05.295 --> 01:08:07.375
<v Speaker 0>there's a lot of and see what happens

01:08:07.455 --> 01:08:08.735
<v Speaker 0>today. Apparently.

01:08:08.975 --> 01:08:11.135
<v Speaker 1>We are we are mastering the see what

01:08:11.135 --> 01:08:12.095
<v Speaker 1>happens today.

01:08:12.495 --> 01:08:12.815
<v Speaker 0>Yeah.

01:08:13.930 --> 01:08:15.770
<v Speaker 0>So let's see. I feel like we've been

01:08:15.770 --> 01:08:18.729
<v Speaker 1>like succeeding rather you've been succeeding

01:08:18.810 --> 01:08:21.130
<v Speaker 1>so well for an hour and ten minutes

01:08:21.130 --> 01:08:21.770
<v Speaker 1>now

01:08:22.170 --> 01:08:22.889
<v Speaker 1>and

01:08:23.529 --> 01:08:25.210
<v Speaker 1>we're gonna run out of luck at some

01:08:25.210 --> 01:08:25.370
<v Speaker 1>point.

01:08:27.735 --> 01:08:29.335
<v Speaker 1>We're really really

01:08:29.735 --> 01:08:31.415
<v Speaker 1>either that or you should go to a

01:08:31.415 --> 01:08:33.175
<v Speaker 1>casino after this if

01:08:33.255 --> 01:08:34.935
<v Speaker 1>if that's a thing you do.

01:08:37.255 --> 01:08:39.095
<v Speaker 0>Yeah. I'm not alone in casinos anymore.

01:08:41.070 --> 01:08:41.470
<v Speaker 0>Okay.

01:08:42.030 --> 01:08:43.070
<v Speaker 0>A

01:08:43.070 --> 01:08:45.870
<v Speaker 0>self imposed ban. They sell whiskey and they've

01:08:45.870 --> 01:08:47.870
<v Speaker 0>got poker. It's not it's not good.

01:08:48.350 --> 01:08:50.270
<v Speaker 1>They know that magic combination works.

01:09:09.250 --> 01:09:11.729
<v Speaker 0>Marco says, I may need privileged,

01:09:11.729 --> 01:09:13.409
<v Speaker 0>and he's got a point.

01:09:13.649 --> 01:09:14.369
<v Speaker 1>Mhmm.

01:09:14.450 --> 01:09:16.770
<v Speaker 1>Yeah. There's definitely some things.

01:09:20.785 --> 01:09:23.824
<v Speaker 0>Although that did say that it couldn't

01:09:24.865 --> 01:09:25.985
<v Speaker 0>get a socket.

01:09:31.729 --> 01:09:33.410
<v Speaker 0>And then that's just probably because I'm not

01:09:33.410 --> 01:09:34.849
<v Speaker 0>actually using Docker. Right?

01:09:35.890 --> 01:09:39.410
<v Speaker 1>Oh, yeah. Good god. We are, like, stacking

01:09:39.410 --> 01:09:40.849
<v Speaker 1>the unicorn,

01:09:41.890 --> 01:09:42.130
<v Speaker 1>yeah.

01:09:44.154 --> 01:09:46.234
<v Speaker 0>Is there a pod man

01:09:47.354 --> 01:09:48.635
<v Speaker 1>Oh my god.

01:09:49.114 --> 01:09:49.755
<v Speaker 1>Don't

01:09:51.835 --> 01:09:52.954
<v Speaker 0>Well, just

01:09:54.635 --> 01:09:57.355
<v Speaker 0>put my container around pod man

01:09:58.050 --> 01:09:59.410
<v Speaker 0>Podman.

01:10:01.810 --> 01:10:03.730
<v Speaker 0>Let's yeah. There is. Oh gosh.

01:10:04.850 --> 01:10:05.890
<v Speaker 1>The the

01:10:06.050 --> 01:10:08.450
<v Speaker 1>insanity inception going on at the moment.

01:10:10.445 --> 01:10:11.244
<v Speaker 1>I feel

01:10:11.644 --> 01:10:13.804
<v Speaker 1>like this is proof that the internet should

01:10:13.804 --> 01:10:15.564
<v Speaker 1>not work and somehow does.

01:10:20.364 --> 01:10:21.164
<v Speaker 0>So

01:10:21.324 --> 01:10:23.324
<v Speaker 0>Marco's saying we have to start that first.

01:10:23.400 --> 01:10:25.239
<v Speaker 0>So we have to start Docker daemon.

01:10:25.560 --> 01:10:27.639
<v Speaker 0>Hey, I've got an idea. Right. Right.

01:10:28.199 --> 01:10:29.960
<v Speaker 0>This is gonna be awesome. So

01:10:31.159 --> 01:10:32.119
<v Speaker 0>I hope.

01:10:33.640 --> 01:10:35.800
<v Speaker 1>David said, hey, I've got an idea.

01:10:38.795 --> 01:10:41.275
<v Speaker 0>So we need to start Docker d. Right?

01:10:41.995 --> 01:10:43.995
<v Speaker 0>And I spelled privilege wrong. Let's just ignore

01:10:43.995 --> 01:10:44.555
<v Speaker 0>that.

01:10:47.755 --> 01:10:48.635
<v Speaker 0>As a service,

01:10:50.599 --> 01:10:53.080
<v Speaker 0>This might be just absolutely crazy, but I'm

01:10:53.080 --> 01:10:54.679
<v Speaker 0>gonna go for it anyway.

01:10:55.239 --> 01:10:56.119
<v Speaker 1>Insane.

01:10:56.440 --> 01:10:59.080
<v Speaker 0>Create so Dagger has this other really cool

01:10:59.080 --> 01:11:01.000
<v Speaker 0>thing where you can run things as services,

01:11:01.000 --> 01:11:02.760
<v Speaker 0>and then you can launch other containers that

01:11:02.760 --> 01:11:04.199
<v Speaker 0>can then consume them and speak to them,

01:11:04.335 --> 01:11:06.414
<v Speaker 0>allowing you to replace Docker Compose.

01:11:07.215 --> 01:11:09.375
<v Speaker 1>Marcus is getting excited. Okay. Yeah. There's a

01:11:09.375 --> 01:11:11.455
<v Speaker 1>similar thing in GitHub Actions, of course, where

01:11:11.455 --> 01:11:13.215
<v Speaker 1>you can start, like, what if you need,

01:11:13.215 --> 01:11:15.375
<v Speaker 1>like, a database or something like that for

01:11:15.375 --> 01:11:16.335
<v Speaker 1>your pipeline to run,

01:11:17.080 --> 01:11:19.240
<v Speaker 1>it it it has the concept of starting

01:11:19.240 --> 01:11:20.040
<v Speaker 1>service

01:11:20.120 --> 01:11:21.000
<v Speaker 1>containers

01:11:21.000 --> 01:11:21.880
<v Speaker 1>as well.

01:11:25.080 --> 01:11:26.600
<v Speaker 0>So now we could see

01:11:27.240 --> 01:11:29.480
<v Speaker 0>we could just run down again. Only this

01:11:29.480 --> 01:11:31.320
<v Speaker 0>time, what we actually want to do is

01:11:31.320 --> 01:11:33.240
<v Speaker 0>a docker

01:11:33.534 --> 01:11:34.335
<v Speaker 0>run.

01:11:34.335 --> 01:11:36.735
<v Speaker 0>Ugh. I hate using that shorthand since that.

01:11:36.735 --> 01:11:39.054
<v Speaker 0>It bugs me. Container run

01:11:40.255 --> 01:11:42.014
<v Speaker 0>dash dash r m

01:11:42.735 --> 01:11:44.735
<v Speaker 0>a little world. Right? So that should give

01:11:44.735 --> 01:11:44.974
<v Speaker 0>us,

01:11:45.930 --> 01:11:47.850
<v Speaker 0>and we don't need the thing. Right? But

01:11:47.850 --> 01:11:49.290
<v Speaker 0>we have to tell it where that Docker

01:11:49.290 --> 01:11:50.250
<v Speaker 0>host is.

01:11:50.570 --> 01:11:52.970
<v Speaker 0>So if we do web environment variable,

01:11:54.090 --> 01:11:54.810
<v Speaker 0>Docker

01:11:55.210 --> 01:11:56.170
<v Speaker 0>host,

01:11:56.170 --> 01:11:56.970
<v Speaker 0>and then

01:11:57.210 --> 01:11:58.330
<v Speaker 0>we need to grab

01:11:58.925 --> 01:12:02.045
<v Speaker 0>the service endpoint by doing

01:12:03.245 --> 01:12:05.645
<v Speaker 0>self stock create endpoint.

01:12:11.719 --> 01:12:14.920
<v Speaker 1>Okay. And apparently, we're gonna need elevated Dagger

01:12:14.920 --> 01:12:17.080
<v Speaker 1>privileges on line 53.

01:12:17.080 --> 01:12:19.159
<v Speaker 0>Yeah. I'm gonna So I'm actually curious what

01:12:19.159 --> 01:12:19.800
<v Speaker 1>that

01:12:20.199 --> 01:12:23.719
<v Speaker 1>means. If that means, like, Dagger has pseudo

01:12:23.719 --> 01:12:26.600
<v Speaker 1>or something within our current environment.

01:12:28.015 --> 01:12:33.535
<v Speaker 0>What's

01:12:33.535 --> 01:12:34.655
<v Speaker 0>the Docker port?

01:12:36.335 --> 01:12:37.055
<v Speaker 0>Two.

01:12:49.430 --> 01:12:51.750
<v Speaker 0>Oh, come on. 2376?

01:12:51.989 --> 01:12:53.430
<v Speaker 0>That sounds right. Thank you.

01:12:54.395 --> 01:12:56.875
<v Speaker 0>I was hoping to drop in. Alright. That

01:12:56.875 --> 01:12:58.875
<v Speaker 0>should give us an endpoint. 75.

01:12:59.115 --> 01:13:00.715
<v Speaker 0>2 C 7 5. Alright.

01:13:01.515 --> 01:13:02.475
<v Speaker 0>Okay. So

01:13:02.795 --> 01:13:04.715
<v Speaker 0>this is gonna create a service running the

01:13:04.715 --> 01:13:07.115
<v Speaker 0>Docker daemon. We're then going to add an

01:13:07.115 --> 01:13:09.090
<v Speaker 0>environment variable, set in our Docker host to

01:13:09.090 --> 01:13:10.130
<v Speaker 0>that endpoint

01:13:10.370 --> 01:13:11.410
<v Speaker 0>and run

01:13:11.890 --> 01:13:12.770
<v Speaker 0>Docker.

01:13:12.850 --> 01:13:13.489
<v Speaker 0>And

01:13:14.690 --> 01:13:16.210
<v Speaker 0>I'm totally making up this up as I

01:13:16.210 --> 01:13:17.490
<v Speaker 0>go along. So I am gonna check the

01:13:17.490 --> 01:13:18.530
<v Speaker 0>chat to see.

01:13:20.770 --> 01:13:22.210
<v Speaker 0>Oh, okay. WebExec.

01:13:22.210 --> 01:13:24.130
<v Speaker 0>So the Docker d

01:13:24.485 --> 01:13:26.564
<v Speaker 0>needs some sort of parameter.

01:13:27.445 --> 01:13:28.484
<v Speaker 0>So let's just

01:13:29.125 --> 01:13:30.885
<v Speaker 0>and secure root capabilities.

01:13:30.885 --> 01:13:31.684
<v Speaker 0>Thank you.

01:13:32.485 --> 01:13:34.005
<v Speaker 0>And the one that we're setting here, so

01:13:34.005 --> 01:13:36.724
<v Speaker 0>we're not using positionals. It's just args. So

01:13:36.724 --> 01:13:37.764
<v Speaker 0>args,

01:13:38.405 --> 01:13:41.125
<v Speaker 0>and then we can also do in

01:13:41.659 --> 01:13:42.300
<v Speaker 0>true.

01:13:42.699 --> 01:13:43.979
<v Speaker 0>Is that right, Marcos?

01:13:49.340 --> 01:13:51.340
<v Speaker 0>Well, I mean, let's try it.

01:13:52.060 --> 01:13:53.900
<v Speaker 0>He can he can fix my terrible code

01:13:53.900 --> 01:13:54.459
<v Speaker 0>layer.

01:13:55.020 --> 01:13:56.355
<v Speaker 0>So now we should be able to run

01:13:56.355 --> 01:13:57.715
<v Speaker 0>create king cluster.

01:14:00.195 --> 01:14:02.514
<v Speaker 0>Dagger called create king cluster.

01:14:03.715 --> 01:14:06.034
<v Speaker 0>So now we're actually gonna see multiple containers

01:14:06.034 --> 01:14:08.530
<v Speaker 0>happening with our Dagger output here. So it's

01:14:08.530 --> 01:14:10.690
<v Speaker 0>gonna compile that, generate the new SDK because,

01:14:10.690 --> 01:14:12.289
<v Speaker 0>obviously, lots of things have changed.

01:14:12.929 --> 01:14:14.530
<v Speaker 0>And we should see it spin up that

01:14:14.530 --> 01:14:17.010
<v Speaker 0>service for us running Docker

01:14:17.010 --> 01:14:17.809
<v Speaker 0>d.

01:14:18.050 --> 01:14:18.770
<v Speaker 0>Oh, no.

01:14:22.635 --> 01:14:23.514
<v Speaker 1>Class.

01:14:23.515 --> 01:14:24.635
<v Speaker 1>So

01:14:25.115 --> 01:14:26.955
<v Speaker 1>we didn't get a string. We got something

01:14:26.955 --> 01:14:28.235
<v Speaker 0>else. What's the endpoint then?

01:14:35.960 --> 01:14:36.600
<v Speaker 0>What have I

01:14:37.240 --> 01:14:39.320
<v Speaker 0>what is a a coroutine?

01:14:39.960 --> 01:14:41.480
<v Speaker 0>Any any string.

01:14:45.000 --> 01:14:46.760
<v Speaker 0>Where do they go here? Is there, like,

01:14:46.760 --> 01:14:49.080
<v Speaker 0>a two string or something? Quotes.

01:14:49.365 --> 01:14:50.885
<v Speaker 1>Wait. Are we missing

01:14:52.245 --> 01:14:53.925
<v Speaker 1>wrap Oh, wait. Does this need to be

01:14:53.925 --> 01:14:55.605
<v Speaker 0>a string? Supposed to be a string? Ah,

01:14:55.605 --> 01:14:57.445
<v Speaker 1>okay. No. It's a nim. No. It's a

01:14:57.445 --> 01:14:57.925
<v Speaker 1>nim.

01:14:58.405 --> 01:15:00.405
<v Speaker 0>It's async. Oh, I don't know how to

01:15:00.405 --> 01:15:02.645
<v Speaker 0>do async await in Python. Can I just

01:15:02.645 --> 01:15:03.205
<v Speaker 0>do await?

01:15:06.000 --> 01:15:08.320
<v Speaker 0>And then set an async function. How do

01:15:08.320 --> 01:15:10.479
<v Speaker 0>you do async functions? Deaf async?

01:15:10.480 --> 01:15:11.199
<v Speaker 0>Nope.

01:15:15.280 --> 01:15:16.559
<v Speaker 1>Alright. Save us, chat.

01:15:19.135 --> 01:15:19.855
<v Speaker 0>Or

01:15:22.175 --> 01:15:24.574
<v Speaker 1>you might pull the away off of

01:15:25.215 --> 01:15:28.094
<v Speaker 1>I don't know. Deaf, async.

01:15:29.135 --> 01:15:31.535
<v Speaker 1>Oh, it's async deaf, not deaf async.

01:15:32.410 --> 01:15:35.130
<v Speaker 0>Yeah. Copilot's getting me there. Alright. Thank you,

01:15:35.130 --> 01:15:36.570
<v Speaker 0>chat and Copilot.

01:15:38.090 --> 01:15:38.810
<v Speaker 0>Sweet.

01:15:38.970 --> 01:15:40.329
<v Speaker 1>And then No errors.

01:15:43.530 --> 01:15:44.010
<v Speaker 0>Thank you,

01:15:44.765 --> 01:15:47.405
<v Speaker 0>Jeremy and Lev. I'll jump it in there.

01:15:56.205 --> 01:15:56.765
<v Speaker 0>Oh.

01:15:58.570 --> 01:15:59.369
<v Speaker 0>Alright.

01:15:59.770 --> 01:16:00.570
<v Speaker 0>So

01:16:04.810 --> 01:16:06.409
<v Speaker 1>Create kind cluster.

01:16:07.530 --> 01:16:08.890
<v Speaker 0>But I think I've got,

01:16:15.954 --> 01:16:17.715
<v Speaker 0>Yeah. That looks okay.

01:16:18.915 --> 01:16:20.514
<v Speaker 0>Redeemed endpoint.

01:16:27.090 --> 01:16:28.530
<v Speaker 1>From address.

01:16:29.410 --> 01:16:31.410
<v Speaker 0>Where's the standard out coming from? I don't

01:16:31.410 --> 01:16:32.770
<v Speaker 0>think we're oh, here.

01:16:34.450 --> 01:16:35.170
<v Speaker 0>Oh.

01:16:35.330 --> 01:16:37.490
<v Speaker 0>Oh, because we've got an async function there.

01:16:37.490 --> 01:16:39.010
<v Speaker 0>So we're gonna have to await this one

01:16:39.010 --> 01:16:39.490
<v Speaker 0>too. Right?

01:16:43.255 --> 01:16:44.614
<v Speaker 0>And he also said we may have to

01:16:44.614 --> 01:16:46.375
<v Speaker 0>make this one async. So let's just make

01:16:46.375 --> 01:16:47.735
<v Speaker 0>everything async. Right?

01:16:51.175 --> 01:16:52.375
<v Speaker 0>Should've used TypeScript.

01:16:55.739 --> 01:16:57.420
<v Speaker 0>Actually, I'm quite enjoying the pie. I mean,

01:16:57.420 --> 01:16:58.940
<v Speaker 0>I'm not enjoying these really long lines, and

01:16:58.940 --> 01:17:00.780
<v Speaker 0>I wish I knew how to format these.

01:17:01.179 --> 01:17:02.699
<v Speaker 0>I don't have a a Python form. Yeah.

01:17:02.699 --> 01:17:03.899
<v Speaker 1>I'm gonna I'm gonna get

01:17:04.699 --> 01:17:07.179
<v Speaker 1>really obsessive with formatting and

01:17:08.539 --> 01:17:10.059
<v Speaker 1>apply that on my own time. But

01:17:11.415 --> 01:17:12.855
<v Speaker 0>Alright. So

01:17:12.855 --> 01:17:13.655
<v Speaker 0>no

01:17:13.735 --> 01:17:14.695
<v Speaker 0>end point.

01:17:15.014 --> 01:17:17.334
<v Speaker 0>So that returns the service.

01:17:17.335 --> 01:17:19.335
<v Speaker 0>Oh, I'm gonna have to await await. Right?

01:17:19.335 --> 01:17:21.815
<v Speaker 0>Because we just made the other one async.

01:17:23.360 --> 01:17:24.239
<v Speaker 0>And then

01:17:24.559 --> 01:17:26.159
<v Speaker 0>await await.

01:17:36.719 --> 01:17:38.800
<v Speaker 0>I think async causes more problems than it's

01:17:38.800 --> 01:17:39.039
<v Speaker 0>solving.

01:17:42.105 --> 01:17:44.185
<v Speaker 0>Service can't be used in an area. Alright.

01:17:44.185 --> 01:17:46.265
<v Speaker 0>Okay. Which one are we? I'm gonna ask

01:17:46.265 --> 01:17:47.545
<v Speaker 0>you to retype now.

01:17:50.905 --> 01:17:51.465
<v Speaker 0>Endpoint.

01:17:52.010 --> 01:17:54.330
<v Speaker 0>So create things returns

01:17:54.330 --> 01:17:56.090
<v Speaker 0>a core routine. So we do have to

01:17:56.090 --> 01:17:58.010
<v Speaker 0>await this, and that's because we made this

01:17:58.010 --> 01:17:59.290
<v Speaker 0>one async. Right?

01:18:00.170 --> 01:18:01.850
<v Speaker 0>An endpoint returns one.

01:18:04.475 --> 01:18:07.355
<v Speaker 1>Let's see. Jeremy dropped an example.

01:18:08.555 --> 01:18:11.515
<v Speaker 1>Return that container Alpine directory

01:18:11.515 --> 01:18:13.435
<v Speaker 1>with exact bash.

01:18:14.955 --> 01:18:15.835
<v Speaker 0>Jeremy,

01:18:15.835 --> 01:18:16.635
<v Speaker 0>let's have a look.

01:18:22.060 --> 01:18:23.020
<v Speaker 0>I'm not sure what that

01:18:24.220 --> 01:18:27.020
<v Speaker 0>that doesn't solve our async thing. Right? Yeah.

01:18:27.020 --> 01:18:28.940
<v Speaker 1>It's not grokking with what's in my head

01:18:28.940 --> 01:18:29.260
<v Speaker 1>yet.

01:18:34.125 --> 01:18:36.125
<v Speaker 0>Oh, you're showing me the formatting thing. Right?

01:18:36.125 --> 01:18:37.165
<v Speaker 0>Right. Right. Okay.

01:18:43.885 --> 01:18:45.885
<v Speaker 0>Okay. Create was never awaited.

01:18:47.000 --> 01:18:48.199
<v Speaker 0>I do awaited.

01:18:49.400 --> 01:18:50.280
<v Speaker 0>Oh, wait.

01:18:51.160 --> 01:18:51.880
<v Speaker 0>Wait.

01:18:53.480 --> 01:18:55.400
<v Speaker 0>Oh, wait. Alright. What

01:18:56.440 --> 01:18:58.440
<v Speaker 0>we have here is a parenthesis problem.

01:19:09.835 --> 01:19:12.860
<v Speaker 0>Service can't be used. Right. I'm I Marco

01:19:12.860 --> 01:19:14.780
<v Speaker 0>says this doesn't need to be oh, let's

01:19:14.940 --> 01:19:16.940
<v Speaker 0>I think we're making this difficult for ourselves

01:19:16.940 --> 01:19:17.579
<v Speaker 0>now.

01:19:18.940 --> 01:19:21.020
<v Speaker 0>Create things is fine, and we just want

01:19:21.020 --> 01:19:22.459
<v Speaker 0>to await the endpoint.

01:19:24.540 --> 01:19:25.179
<v Speaker 0>Cool.

01:19:25.739 --> 01:19:27.420
<v Speaker 0>I mean, that shouldn't be needed. Right?

01:19:29.175 --> 01:19:31.015
<v Speaker 0>But I'm sure we tried this first. That

01:19:31.015 --> 01:19:32.215
<v Speaker 0>just that didn't work.

01:19:41.680 --> 01:19:44.000
<v Speaker 1>There's gotta be some prior art floating around

01:19:44.000 --> 01:19:46.400
<v Speaker 1>somewhere on creating a kind cluster with Dagger.

01:19:46.400 --> 01:19:48.480
<v Speaker 0>Oh. Look, things things and stuff.

01:19:53.885 --> 01:19:55.805
<v Speaker 0>So he I tried to speak to Docker

01:19:55.805 --> 01:19:58.844
<v Speaker 0>or Dain. That's amazing. But it says,

01:20:00.445 --> 01:20:02.284
<v Speaker 0>no such host.

01:20:04.685 --> 01:20:06.844
<v Speaker 0>So it got our endpoint. It resolved it

01:20:06.844 --> 01:20:08.765
<v Speaker 0>to an IP address and then failed.

01:20:11.330 --> 01:20:13.090
<v Speaker 0>Now this shouldn't just be

01:20:15.969 --> 01:20:18.369
<v Speaker 0>So there in something

01:20:19.730 --> 01:20:23.570
<v Speaker 1>in the Daggerverse specific for creating

01:20:22.935 --> 01:20:25.095
<v Speaker 1>cluster. Is this where we get to show

01:20:25.095 --> 01:20:26.455
<v Speaker 1>off some of the

01:20:27.815 --> 01:20:28.775
<v Speaker 1>ecosystem?

01:20:32.215 --> 01:20:33.415
<v Speaker 0>Yes.

01:20:39.520 --> 01:20:41.360
<v Speaker 1>And that looks like there's quite a few

01:20:41.360 --> 01:20:44.880
<v Speaker 1>parameters that we can run with. Oh,

01:20:46.000 --> 01:20:48.320
<v Speaker 0>yeah. I I'm being silly. We've created a

01:20:48.320 --> 01:20:50.560
<v Speaker 0>service, but we haven't given desk container access

01:20:50.560 --> 01:20:50.960
<v Speaker 0>to it.

01:20:51.844 --> 01:20:52.724
<v Speaker 0>Okay.

01:20:54.324 --> 01:20:55.204
<v Speaker 0>There we go.

01:20:57.445 --> 01:20:58.804
<v Speaker 0>Oh, yeah. And we can alias it. We

01:20:58.804 --> 01:21:00.005
<v Speaker 0>can just call it down,

01:21:00.324 --> 01:21:02.485
<v Speaker 0>and then we provide the service, not the

01:21:02.485 --> 01:21:02.965
<v Speaker 0>endpoint.

01:21:14.099 --> 01:21:14.500
<v Speaker 1>Okay.

01:21:16.575 --> 01:21:17.534
<v Speaker 0>Like so.

01:21:22.655 --> 01:21:24.495
<v Speaker 0>They're trying to fix all my all my

01:21:24.495 --> 01:21:25.614
<v Speaker 0>bugs for me.

01:21:26.415 --> 01:21:28.175
<v Speaker 0>So here, we could do

01:21:28.815 --> 01:21:30.255
<v Speaker 0>two,

01:21:30.255 --> 01:21:31.775
<v Speaker 0>three was it seven five?

01:21:33.250 --> 01:21:33.809
<v Speaker 1>Yeah.

01:21:36.210 --> 01:21:38.130
<v Speaker 0>Alright. Let's give that a bash.

01:21:38.210 --> 01:21:39.969
<v Speaker 0>And you're right. There is the Daggerverse. We

01:21:39.969 --> 01:21:41.650
<v Speaker 0>should definitely take a look at that, but

01:21:41.650 --> 01:21:43.650
<v Speaker 0>I really wanna get this cluster working.

01:21:45.695 --> 01:21:47.374
<v Speaker 0>Really, really wanna get it working.

01:21:49.695 --> 01:21:50.735
<v Speaker 1>I

01:21:51.375 --> 01:21:54.014
<v Speaker 1>actually like this because it looks like

01:21:54.974 --> 01:21:57.775
<v Speaker 1>I I'm interested in deprecating the project support

01:21:57.775 --> 01:21:58.415
<v Speaker 1>for kind

01:21:58.950 --> 01:22:00.310
<v Speaker 1>in favor of

01:22:01.910 --> 01:22:04.710
<v Speaker 1>the equivalent with Talos where you're running Talos

01:22:04.710 --> 01:22:07.190
<v Speaker 1>either in containers or virtual machines locally.

01:22:07.510 --> 01:22:08.870
<v Speaker 1>And I'm seeing how

01:22:10.310 --> 01:22:12.390
<v Speaker 1>even though there's not like a built in

01:22:12.390 --> 01:22:16.455
<v Speaker 1>feature that plays completely nice with starting a

01:22:16.455 --> 01:22:18.375
<v Speaker 1>kind cluster locally without

01:22:19.735 --> 01:22:21.975
<v Speaker 1>like kube proxy and things like that so

01:22:21.975 --> 01:22:24.055
<v Speaker 1>that I can CI all of my Cilium

01:22:24.055 --> 01:22:24.775
<v Speaker 1>integration.

01:22:25.735 --> 01:22:27.255
<v Speaker 1>But I feel like Dagger

01:22:28.070 --> 01:22:29.990
<v Speaker 0>I thought we had it. I don't know.

01:22:29.990 --> 01:22:31.670
<v Speaker 1>Lets me cover those bases

01:22:32.070 --> 01:22:34.710
<v Speaker 1>and accommodate some of the conditions.

01:22:36.470 --> 01:22:37.990
<v Speaker 0>Sorry. I didn't mean to yell over you

01:22:37.990 --> 01:22:41.030
<v Speaker 0>there. No. You're fine. I excitement excitement is

01:22:41.030 --> 01:22:42.070
<v Speaker 1>always welcome.

01:22:43.110 --> 01:22:43.590
<v Speaker 0>Alright.

01:22:43.965 --> 01:22:46.045
<v Speaker 0>Let's go back to service

01:22:46.045 --> 01:22:47.005
<v Speaker 0>endpoint

01:22:47.165 --> 01:22:50.125
<v Speaker 0>four two three seven five. And this needs

01:22:50.125 --> 01:22:50.844
<v Speaker 0>a week.

01:22:52.364 --> 01:22:54.205
<v Speaker 0>So you wanted to have to get kind

01:22:54.205 --> 01:22:55.165
<v Speaker 0>and do it another way.

01:22:55.980 --> 01:22:57.739
<v Speaker 0>That's what you're saying before. I really interrupted

01:22:57.739 --> 01:22:59.739
<v Speaker 0>you. Sorry. It's yeah. It's gonna be the

01:22:59.739 --> 01:23:01.420
<v Speaker 1>the same the same thing.

01:23:01.739 --> 01:23:04.300
<v Speaker 1>Like, it's Kubernetes and Docker, but it's Talos

01:23:04.300 --> 01:23:05.179
<v Speaker 1>specifically.

01:23:05.420 --> 01:23:07.739
<v Speaker 1>And that will simplify my code base a

01:23:07.739 --> 01:23:09.980
<v Speaker 1>lot because right now, I'm accommodating

01:23:10.300 --> 01:23:10.620
<v Speaker 1>different,

01:23:11.545 --> 01:23:12.344
<v Speaker 1>like,

01:23:12.905 --> 01:23:15.545
<v Speaker 1>helm values and things like that depending

01:23:15.545 --> 01:23:16.264
<v Speaker 1>on

01:23:16.745 --> 01:23:18.425
<v Speaker 1>which Kubernetes

01:23:18.425 --> 01:23:19.545
<v Speaker 1>I'm targeting.

01:23:21.705 --> 01:23:22.425
<v Speaker 0>Nice.

01:23:24.025 --> 01:23:26.425
<v Speaker 0>Alright. Well, Marco says I was almost there,

01:23:27.070 --> 01:23:29.790
<v Speaker 0>but I need a web exposed port because

01:23:29.790 --> 01:23:32.429
<v Speaker 0>Dagger uses that for the health check. Alright.

01:23:32.429 --> 01:23:33.630
<v Speaker 0>So that's how it knows whether it's to

01:23:33.630 --> 01:23:35.230
<v Speaker 0>restart that service or not.

01:23:43.145 --> 01:23:44.184
<v Speaker 0>We'll get there.

01:23:45.304 --> 01:23:46.824
<v Speaker 0>I'm I really want to make this work

01:23:46.824 --> 01:23:47.544
<v Speaker 0>just

01:23:48.264 --> 01:23:50.344
<v Speaker 0>so that we have a very cool Kubernetes

01:23:50.344 --> 01:23:52.025
<v Speaker 0>cluster thing where you can start to then

01:23:52.025 --> 01:23:53.465
<v Speaker 0>experiment and play with. And I know you

01:23:53.465 --> 01:23:54.664
<v Speaker 0>said you were gonna maybe get rid of

01:23:54.664 --> 01:23:54.905
<v Speaker 0>King.

01:23:56.139 --> 01:23:59.979
<v Speaker 1>Well, it all of this will probably transpose

01:23:59.980 --> 01:24:01.659
<v Speaker 1>pretty closely to

01:24:02.219 --> 01:24:05.419
<v Speaker 1>the Talos version because again, it is Kubernetes

01:24:05.500 --> 01:24:08.219
<v Speaker 1>in Docker. It's just slightly different than Kine.

01:24:25.680 --> 01:24:27.680
<v Speaker 1>Alright. We only got four minutes to save

01:24:27.680 --> 01:24:29.360
<v Speaker 1>the world. I mean, create a kind cluster.

01:24:38.994 --> 01:24:40.994
<v Speaker 0>I'm missing a parameter for Docker d, aren't

01:24:40.994 --> 01:24:41.474
<v Speaker 0>I?

01:24:45.715 --> 01:24:47.314
<v Speaker 0>Let me pop open a

01:24:49.395 --> 01:24:50.195
<v Speaker 0>Docker d.

01:24:55.090 --> 01:24:56.689
<v Speaker 1>Cut the red wire.

01:25:03.489 --> 01:25:05.409
<v Speaker 0>Apparently, you need a config fail.

01:25:05.745 --> 01:25:07.105
<v Speaker 1>It

01:25:07.105 --> 01:25:09.425
<v Speaker 1>looks like Marcos is pointing out that we

01:25:09.425 --> 01:25:11.745
<v Speaker 1>need to set the address to,

01:25:12.465 --> 01:25:14.705
<v Speaker 1>like, zero zero zero zero would work.

01:25:17.425 --> 01:25:18.625
<v Speaker 0>Oh, thank you, Marcos.

01:25:24.650 --> 01:25:25.849
<v Speaker 0>Dash dash code.

01:25:26.969 --> 01:25:27.610
<v Speaker 1>Host. So

01:25:37.255 --> 01:25:38.455
<v Speaker 0>Is this the one?

01:25:40.695 --> 01:25:41.415
<v Speaker 1>I have hope.

01:25:49.330 --> 01:25:51.170
<v Speaker 1>Marco says it's the one. We will all

01:25:51.170 --> 01:25:52.770
<v Speaker 1>be wrong together. So

01:25:57.330 --> 01:25:58.690
<v Speaker 0>the service worked.

01:25:59.090 --> 01:25:59.490
<v Speaker 1>Yep.

01:26:01.035 --> 01:26:01.914
<v Speaker 1>Alias

01:26:01.995 --> 01:26:02.715
<v Speaker 1>as

01:26:03.355 --> 01:26:05.035
<v Speaker 1>d I n d exited.

01:26:05.035 --> 01:26:06.955
<v Speaker 1>We have response

01:26:06.955 --> 01:26:08.715
<v Speaker 1>from query input.

01:26:08.955 --> 01:26:09.514
<v Speaker 1>Blah.

01:26:11.275 --> 01:26:13.515
<v Speaker 0>Is that just my command did it wrong?

01:26:14.440 --> 01:26:16.360
<v Speaker 0>Let's get standard error. I think we're actually

01:26:16.360 --> 01:26:18.840
<v Speaker 0>getting a real error message from the docker

01:26:18.840 --> 01:26:20.600
<v Speaker 0>trying to execute that container.

01:26:27.395 --> 01:26:29.315
<v Speaker 1>This is when we could hit the terminal

01:26:29.315 --> 01:26:30.195
<v Speaker 1>command.

01:26:30.595 --> 01:26:32.195
<v Speaker 0>Yeah. Totally, actually.

01:26:38.675 --> 01:26:40.515
<v Speaker 0>Alright. Let's get in there. So

01:26:43.520 --> 01:26:44.880
<v Speaker 0>let's just return

01:26:46.720 --> 01:26:49.040
<v Speaker 0>a Dagger container. Now this should give us

01:26:49.040 --> 01:26:50.159
<v Speaker 0>a container

01:26:51.360 --> 01:26:53.040
<v Speaker 0>with the Docker CLI

01:26:53.040 --> 01:26:55.520
<v Speaker 0>and an environment variable pointing it to our

01:26:55.520 --> 01:26:56.560
<v Speaker 0>Docker

01:26:56.925 --> 01:26:57.885
<v Speaker 0>service.

01:26:58.844 --> 01:27:01.005
<v Speaker 0>I've never never used a terminal command with

01:27:01.005 --> 01:27:02.764
<v Speaker 0>back end services. So I'm assuming this is

01:27:02.764 --> 01:27:04.044
<v Speaker 0>just gonna work well.

01:27:09.965 --> 01:27:11.005
<v Speaker 1>Spoke too soon.

01:27:14.340 --> 01:27:16.100
<v Speaker 1>Why did we have to pick a difficult

01:27:16.100 --> 01:27:17.140
<v Speaker 1>starting line?

01:27:18.580 --> 01:27:20.420
<v Speaker 0>Yeah. I don't know why that one's failing.

01:27:20.420 --> 01:27:22.980
<v Speaker 1>You can blame me. And violation for command

01:27:22.980 --> 01:27:24.980
<v Speaker 0>terminal response. Oh,

01:27:25.300 --> 01:27:27.875
<v Speaker 1>actually, I I didn't even catch this and

01:27:27.875 --> 01:27:29.955
<v Speaker 1>I probably should have Marcos said we have

01:27:29.955 --> 01:27:32.275
<v Speaker 1>hosts. Plural? There we go.

01:27:32.995 --> 01:27:34.755
<v Speaker 0>Yeah. But I I I mean, I should

01:27:34.755 --> 01:27:37.395
<v Speaker 0>still got this. Given us a terminal.

01:27:38.195 --> 01:27:41.235
<v Speaker 1>Unless I mean, Docker wouldn't like a

01:27:42.360 --> 01:27:43.960
<v Speaker 1>flag that's not real.

01:27:46.040 --> 01:27:47.719
<v Speaker 0>It was the service was happy. It was

01:27:47.719 --> 01:27:49.559
<v Speaker 0>passing itself to said so. One

01:27:55.560 --> 01:27:55.960
<v Speaker 0>minute.

01:27:57.304 --> 01:27:59.144
<v Speaker 0>And I'm running terminal.

01:28:09.625 --> 01:28:11.784
<v Speaker 0>We were closer with hosts, aren't we?

01:28:16.480 --> 01:28:20.640
<v Speaker 1>Oh, it doesn't like the insecure access

01:28:20.640 --> 01:28:21.200
<v Speaker 1>right now.

01:28:27.054 --> 01:28:28.175
<v Speaker 0>Oh, it's working.

01:28:31.135 --> 01:28:32.014
<v Speaker 1>Holy

01:28:32.014 --> 01:28:32.814
<v Speaker 1>moly.

01:28:36.494 --> 01:28:38.494
<v Speaker 0>And I'm pulling the standard error.

01:28:38.735 --> 01:28:40.815
<v Speaker 0>Although, we'll now see that this should be

01:28:41.510 --> 01:28:43.590
<v Speaker 0>nice and quick because most of this is

01:28:43.590 --> 01:28:44.710
<v Speaker 0>gonna be cached.

01:28:46.870 --> 01:28:49.190
<v Speaker 0>Right on 06:30.

01:28:50.790 --> 01:28:52.469
<v Speaker 0>Right when we said we'd finish.

01:28:52.790 --> 01:28:54.230
<v Speaker 0>But we didn't really that will work.

01:28:55.145 --> 01:28:56.985
<v Speaker 0>Yeah. We didn't

01:28:58.105 --> 01:28:59.785
<v Speaker 0>we didn't do the things that we, you

01:28:59.785 --> 01:29:01.385
<v Speaker 0>know, we said we were going to do.

01:29:01.385 --> 01:29:03.945
<v Speaker 0>But I do think that we have hopefully

01:29:03.945 --> 01:29:05.385
<v Speaker 0>taken you on a bit of a Dagger

01:29:05.385 --> 01:29:08.105
<v Speaker 0>journey and showed you the power, flexibility

01:29:08.665 --> 01:29:10.700
<v Speaker 0>of having Will be the power.

01:29:11.980 --> 01:29:13.900
<v Speaker 0>All of this as code.

01:29:14.140 --> 01:29:16.620
<v Speaker 0>So I'm pretty chuffed with that. There we

01:29:16.620 --> 01:29:19.020
<v Speaker 0>go. Look at that. Holy cow.

01:29:19.340 --> 01:29:21.420
<v Speaker 0>We just spun up a cane cluster inside

01:29:21.420 --> 01:29:22.140
<v Speaker 0>of a dagger

01:29:23.115 --> 01:29:25.755
<v Speaker 0>function. Okay. This is this is like a

01:29:25.755 --> 01:29:28.554
<v Speaker 1>Internet high five here. Yes.

01:29:30.875 --> 01:29:32.075
<v Speaker 0>I'm

01:29:32.075 --> 01:29:33.675
<v Speaker 0>gonna leave you with that to play with

01:29:33.675 --> 01:29:35.755
<v Speaker 0>it. If you were to have to that.

01:29:37.540 --> 01:29:39.540
<v Speaker 0>Pick this back up in a few weeks

01:29:39.540 --> 01:29:41.860
<v Speaker 0>and then Yeah. Make make that next step

01:29:41.860 --> 01:29:43.940
<v Speaker 0>and to run-in the Pulumi as part and

01:29:43.940 --> 01:29:47.219
<v Speaker 0>provisioning to that kind cluster. Well, might be

01:29:47.219 --> 01:29:49.385
<v Speaker 1>that, like, I push this code a little

01:29:49.385 --> 01:29:52.025
<v Speaker 1>bit further because I'm very motivated to drop

01:29:52.025 --> 01:29:53.864
<v Speaker 1>that make file stuff and I have to

01:29:53.864 --> 01:29:56.105
<v Speaker 1>rewrite the make file or replace it before

01:29:56.105 --> 01:29:57.545
<v Speaker 1>I merge back in the main.

01:29:57.945 --> 01:29:58.505
<v Speaker 1>Yeah.

01:29:59.225 --> 01:30:01.305
<v Speaker 1>So it might be that I push this

01:30:01.305 --> 01:30:02.185
<v Speaker 1>a bit further

01:30:02.640 --> 01:30:05.040
<v Speaker 1>and then we just spend a while roasting

01:30:05.040 --> 01:30:07.360
<v Speaker 1>my Dagger code and you're like, Pat, how

01:30:07.360 --> 01:30:09.040
<v Speaker 1>much did you use ChatGPT

01:30:09.040 --> 01:30:10.960
<v Speaker 1>because you're looking like a trench coat right

01:30:10.960 --> 01:30:11.440
<v Speaker 1>now.

01:30:13.600 --> 01:30:15.935
<v Speaker 0>Alright. I am gonna get that pushed. We

01:30:15.935 --> 01:30:17.055
<v Speaker 0>will reconvene

01:30:17.055 --> 01:30:19.055
<v Speaker 0>once you've pushed it a little bit further

01:30:19.055 --> 01:30:21.535
<v Speaker 0>forward, and maybe what we'll do, depending on

01:30:21.535 --> 01:30:22.815
<v Speaker 0>how far you get, is we'll be looking

01:30:22.815 --> 01:30:25.055
<v Speaker 0>at refactoring. How do we clean it up?

01:30:25.055 --> 01:30:26.335
<v Speaker 0>How do we make it shareable? How do

01:30:26.335 --> 01:30:27.855
<v Speaker 0>we publish it to the Dagger first? Because

01:30:27.855 --> 01:30:29.560
<v Speaker 0>you know what? People are gonna want a

01:30:29.560 --> 01:30:31.800
<v Speaker 0>kind cluster in their Dagger pipeline. We can

01:30:31.800 --> 01:30:33.159
<v Speaker 0>share that. Absolutely. Awesome.

01:30:33.960 --> 01:30:35.320
<v Speaker 0>Thank you so much for your time today.

01:30:35.320 --> 01:30:37.880
<v Speaker 0>Thank you to everyone who watched. Any final

01:30:37.880 --> 01:30:39.239
<v Speaker 0>words before I say goodbye?

01:30:39.880 --> 01:30:40.360
<v Speaker 1>Bravo.

01:30:40.855 --> 01:30:43.415
<v Speaker 1>I I feel like that was a great

01:30:43.415 --> 01:30:45.974
<v Speaker 1>way to show off your skill and

01:30:46.454 --> 01:30:48.774
<v Speaker 1>do more than talking on a livestream.

01:30:48.775 --> 01:30:51.415
<v Speaker 1>So really, you you went in into it

01:30:51.415 --> 01:30:53.175
<v Speaker 1>with a lot of blind faith, and I

01:30:53.175 --> 01:30:55.255
<v Speaker 1>feel like you're coming out of it victorious.

01:30:55.320 --> 01:30:57.639
<v Speaker 1>So round of applause from everybody.

01:30:58.040 --> 01:30:58.679
<v Speaker 0>Thank

01:30:59.320 --> 01:31:01.159
<v Speaker 0>you so much. Alright. Thank you for having

01:31:01.320 --> 01:31:04.119
<v Speaker 0>chat soon. Yeah. Awesome. Speak to you soon.

01:31:04.119 --> 01:31:06.199
<v Speaker 0>Everyone else, have a wonderful day. We'll see

01:31:06.199 --> 01:31:07.719
<v Speaker 0>you all next time. Bye.

01:34:02.985 --> 01:34:04.104
<v Speaker 0>Rawkode.

01:34:08.344 --> 01:34:08.905
<v Speaker 0>Rawkode.

01:34:09.864 --> 01:34:12.505
<v Speaker 0>Miss you for a little while. Never fear

01:34:12.505 --> 01:34:15.150
<v Speaker 0>the return. Rocket with a smile. Join the

01:34:15.150 --> 01:34:17.390
<v Speaker 0>crew again. Don't you take the fall. Stand

01:34:17.390 --> 01:34:19.710
<v Speaker 0>tall. Raise your voice. Let's conquer it out.
