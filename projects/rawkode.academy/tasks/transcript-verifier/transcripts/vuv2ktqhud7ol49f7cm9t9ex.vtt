WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: cdcc434f-c4eb-4626-b75f-d9266361fbdb
Created: 2025-04-29T18:47:45.082Z
Duration: 5280.224
Channels: 1

00:00:53.500 --> 00:00:56.219
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:00:56.219 --> 00:00:58.699
<v Speaker 0>live. I am your host, Rawkode.

00:00:58.940 --> 00:01:02.140
<v Speaker 0>Today, we're gonna do some dabbling and experimentation

00:01:02.140 --> 00:01:04.860
<v Speaker 0>with some new Pulumi features that enable multi

00:01:04.860 --> 00:01:05.900
<v Speaker 0>language packages.

00:01:06.545 --> 00:01:08.225
<v Speaker 0>Before we get started with that, there's just

00:01:08.225 --> 00:01:10.545
<v Speaker 0>a little bit of housekeeping. But first, if

00:01:10.545 --> 00:01:12.625
<v Speaker 0>you're not subscribed to the channel, please do

00:01:12.625 --> 00:01:14.225
<v Speaker 0>so now and remember to click the bell

00:01:14.225 --> 00:01:16.065
<v Speaker 0>so you get loads of notifications for all

00:01:16.065 --> 00:01:17.104
<v Speaker 0>new episodes

00:01:17.185 --> 00:01:19.024
<v Speaker 0>as we explore the vast cloud native landscape

00:01:19.024 --> 00:01:19.424
<v Speaker 0>together.

00:01:20.189 --> 00:01:22.270
<v Speaker 0>And if you wanna chat and talk cloud

00:01:22.270 --> 00:01:24.350
<v Speaker 0>native Kubernetes and NFN in between, we have

00:01:24.350 --> 00:01:26.509
<v Speaker 0>a very active Discord server. Feel free to

00:01:26.509 --> 00:01:28.189
<v Speaker 0>pop in there, say hello, and I look

00:01:28.189 --> 00:01:29.310
<v Speaker 0>forward to meeting you.

00:01:30.030 --> 00:01:32.429
<v Speaker 0>Alright. Now joining me today to introduce me

00:01:32.429 --> 00:01:34.350
<v Speaker 0>to this wonderful Pulumi awesomeness

00:01:34.509 --> 00:01:36.965
<v Speaker 0>is a returning guest, Lee Briggs, man. How's

00:01:36.965 --> 00:01:37.525
<v Speaker 0>it going?

00:01:38.005 --> 00:01:40.005
<v Speaker 1>Not so bad. How are you? Yeah. I'm

00:01:40.005 --> 00:01:42.485
<v Speaker 0>I'm doing well. I'm looking forward to seeing

00:01:42.485 --> 00:01:44.405
<v Speaker 0>what new shiny stuff you've got kicked up

00:01:44.405 --> 00:01:45.285
<v Speaker 0>for us today.

00:01:45.925 --> 00:01:47.605
<v Speaker 1>Yeah. This is really

00:01:47.605 --> 00:01:49.810
<v Speaker 1>new, so really, really on the cutting edge.

00:01:49.810 --> 00:01:52.369
<v Speaker 1>I'm really excited about it. And I think

00:01:52.369 --> 00:01:54.610
<v Speaker 1>probably best first step is to talk a

00:01:54.610 --> 00:01:56.130
<v Speaker 1>little bit about what we're gonna be doing.

00:01:56.930 --> 00:01:59.090
<v Speaker 0>Yeah. Well, why don't just for anyone who's

00:01:59.090 --> 00:02:00.369
<v Speaker 0>not aware of you, you tell us a

00:02:00.369 --> 00:02:01.729
<v Speaker 0>little bit about you, and then we'll talk

00:02:01.729 --> 00:02:02.770
<v Speaker 0>about the the thing.

00:02:03.565 --> 00:02:04.125
<v Speaker 1>Sure.

00:02:04.845 --> 00:02:07.085
<v Speaker 1>My name is Lee Briggs. I work at

00:02:07.085 --> 00:02:10.285
<v Speaker 1>Pulumi as a developer advocate and formerly in

00:02:10.285 --> 00:02:11.565
<v Speaker 1>the engineering team.

00:02:12.365 --> 00:02:14.845
<v Speaker 1>I originally from The UK living here in

00:02:14.845 --> 00:02:17.084
<v Speaker 1>Seattle in the West Coast Of The US.

00:02:17.660 --> 00:02:19.580
<v Speaker 1>So it's good to hear a familiar British

00:02:19.580 --> 00:02:20.300
<v Speaker 1>accent.

00:02:20.860 --> 00:02:23.500
<v Speaker 0>Alright. Thank you for sharing. Okay. Now enlighten

00:02:23.500 --> 00:02:25.500
<v Speaker 0>us. What awesome thing are we doing today?

00:02:25.900 --> 00:02:27.500
<v Speaker 1>So we need to provide a bit of

00:02:27.500 --> 00:02:29.500
<v Speaker 1>context here, especially if you've never kinda used

00:02:29.500 --> 00:02:30.060
<v Speaker 1>Pulumi.

00:02:31.395 --> 00:02:34.355
<v Speaker 1>Pulumi is obviously an infrastructure as code tool

00:02:34.355 --> 00:02:36.195
<v Speaker 1>that allows you to use what I like

00:02:36.195 --> 00:02:38.835
<v Speaker 1>to sell call cheering complete languages. So

00:02:39.155 --> 00:02:41.875
<v Speaker 1>instead of using declarative languages like YAML, you

00:02:41.875 --> 00:02:45.155
<v Speaker 1>can use imperative languages, but we declare

00:02:45.930 --> 00:02:48.810
<v Speaker 1>the imperative language pushes towards a declarative

00:02:48.810 --> 00:02:50.010
<v Speaker 1>state, which

00:02:50.170 --> 00:02:52.409
<v Speaker 1>is super powerful. And, you know, our customers

00:02:52.409 --> 00:02:54.810
<v Speaker 1>love it because it means their front end

00:02:54.810 --> 00:02:57.049
<v Speaker 1>engineers who are familiar with TypeScript or their

00:02:57.049 --> 00:02:58.810
<v Speaker 1>back end engineers who are maybe writing stuff

00:02:58.810 --> 00:03:00.855
<v Speaker 1>in Go, they can use those same languages

00:03:00.855 --> 00:03:03.254
<v Speaker 1>that they're using their application life cycle to

00:03:03.254 --> 00:03:05.415
<v Speaker 1>actually define infrastructure as well.

00:03:07.575 --> 00:03:09.974
<v Speaker 1>You we have a mechanism within Pulumi that

00:03:09.974 --> 00:03:11.174
<v Speaker 1>allows you to group

00:03:11.540 --> 00:03:13.940
<v Speaker 1>all of the different infrastructure resources that you

00:03:13.940 --> 00:03:15.620
<v Speaker 1>are defining into,

00:03:15.860 --> 00:03:17.220
<v Speaker 1>what we call a component.

00:03:17.700 --> 00:03:20.340
<v Speaker 1>And if you're familiar with stuff like Terraform,

00:03:20.340 --> 00:03:22.500
<v Speaker 1>you might have might know of a module

00:03:22.500 --> 00:03:25.140
<v Speaker 1>or if you are familiar with the CDK,

00:03:25.140 --> 00:03:26.740
<v Speaker 1>you might be familiar with constructs.

00:03:27.425 --> 00:03:29.825
<v Speaker 1>Components are our mechanism for,

00:03:30.145 --> 00:03:31.425
<v Speaker 1>you know, creating

00:03:31.665 --> 00:03:33.425
<v Speaker 1>reusable infrastructure.

00:03:33.425 --> 00:03:35.585
<v Speaker 1>And what we usually see is the

00:03:36.225 --> 00:03:38.465
<v Speaker 1>companies like to define like best practices in

00:03:38.465 --> 00:03:40.305
<v Speaker 1>these components and then share them out within

00:03:40.305 --> 00:03:41.105
<v Speaker 1>their organization.

00:03:42.540 --> 00:03:45.260
<v Speaker 1>The problem with that is that up until

00:03:45.260 --> 00:03:47.580
<v Speaker 1>now, when you've defined your component

00:03:47.739 --> 00:03:49.579
<v Speaker 1>and let's say you've written it in our

00:03:49.579 --> 00:03:50.860
<v Speaker 1>TypeScript SDK,

00:03:51.739 --> 00:03:53.420
<v Speaker 1>you can only really share that with other

00:03:53.420 --> 00:03:56.765
<v Speaker 1>people using the TypeScript SDK. So, like, your

00:03:56.925 --> 00:04:00.045
<v Speaker 1>ability to kind of like create community modules

00:04:00.285 --> 00:04:02.525
<v Speaker 1>or maybe in large enterprises where you have

00:04:02.525 --> 00:04:05.165
<v Speaker 1>multiple programming languages and you stack, you've had

00:04:05.165 --> 00:04:07.165
<v Speaker 1>to rewrite it multiple times.

00:04:07.405 --> 00:04:08.925
<v Speaker 1>And there's been a there's a couple of

00:04:08.925 --> 00:04:09.965
<v Speaker 1>really great examples which,

00:04:11.090 --> 00:04:12.930
<v Speaker 1>you know, where people have gone to the

00:04:12.930 --> 00:04:15.890
<v Speaker 1>trouble of writing their their component SDK

00:04:15.890 --> 00:04:18.529
<v Speaker 1>in Go and then TypeScript and then Python.

00:04:18.529 --> 00:04:20.610
<v Speaker 1>But the maintenance overhead just kinda gets away

00:04:20.610 --> 00:04:22.050
<v Speaker 1>from you really quickly because you happen to

00:04:22.050 --> 00:04:23.570
<v Speaker 1>write things in three languages and you might

00:04:23.570 --> 00:04:24.530
<v Speaker 1>not know three languages.

00:04:26.105 --> 00:04:27.705
<v Speaker 1>So a few weeks ago at our three

00:04:27.705 --> 00:04:29.385
<v Speaker 1>point o launch event, we announced what we

00:04:29.385 --> 00:04:31.465
<v Speaker 1>call multi language components, which

00:04:31.865 --> 00:04:33.945
<v Speaker 1>quite honestly as a technical fee is so

00:04:33.945 --> 00:04:36.265
<v Speaker 1>amazing. I don't fully understand like how it's

00:04:36.265 --> 00:04:38.425
<v Speaker 1>possible. I mean, I understand the technical

00:04:38.920 --> 00:04:40.920
<v Speaker 1>ability of it, but I'm still, like, blown

00:04:40.920 --> 00:04:43.320
<v Speaker 1>away that we're basically able to do this.

00:04:44.120 --> 00:04:46.120
<v Speaker 1>But what it means is that you can

00:04:46.120 --> 00:04:49.480
<v Speaker 1>create a shareable component in one language, and

00:04:49.480 --> 00:04:52.120
<v Speaker 1>it will generate the SDK for Pulumi in

00:04:52.120 --> 00:04:53.800
<v Speaker 1>all of our supported languages.

00:04:54.040 --> 00:04:56.094
<v Speaker 1>So that's what we're gonna be doing today.

00:04:56.094 --> 00:04:58.895
<v Speaker 1>We're gonna write a example component

00:04:59.694 --> 00:05:02.814
<v Speaker 1>that will allow you to, like, define the

00:05:02.814 --> 00:05:05.055
<v Speaker 1>best practices for a deployment. And I think

00:05:05.055 --> 00:05:06.735
<v Speaker 1>we decided that the best way to kinda

00:05:06.735 --> 00:05:07.615
<v Speaker 1>show this off is

00:05:08.320 --> 00:05:10.720
<v Speaker 1>in the Kubernetes world where, like, if you

00:05:10.720 --> 00:05:12.880
<v Speaker 1>have an internal Kubernetes platform, you probably wanna

00:05:12.880 --> 00:05:15.040
<v Speaker 1>define best practices for

00:05:15.200 --> 00:05:18.080
<v Speaker 1>a deployment within your organization, like the the

00:05:18.080 --> 00:05:20.720
<v Speaker 1>required number of replicas and then just allow

00:05:20.720 --> 00:05:22.480
<v Speaker 1>it to be configurable with just the image

00:05:22.480 --> 00:05:23.040
<v Speaker 1>you wanna run.

00:05:23.755 --> 00:05:25.355
<v Speaker 1>So we're gonna define that. We're gonna write

00:05:25.355 --> 00:05:27.755
<v Speaker 1>it in go, and then we're gonna show

00:05:28.155 --> 00:05:30.395
<v Speaker 1>how that that generates an SDK in four

00:05:30.395 --> 00:05:32.555
<v Speaker 1>different languages and see an example of deploying

00:05:32.555 --> 00:05:34.635
<v Speaker 1>it in TypeScript. And if we have time,

00:05:34.635 --> 00:05:36.729
<v Speaker 1>we'll do a Python example as well. So,

00:05:36.970 --> 00:05:38.090
<v Speaker 1>it's gonna be a bit of a journey.

00:05:38.090 --> 00:05:39.930
<v Speaker 1>I've written like two of these so far,

00:05:40.169 --> 00:05:42.410
<v Speaker 1>and I'm still finding some of the, you

00:05:42.410 --> 00:05:43.690
<v Speaker 1>know, some intricacies.

00:05:43.930 --> 00:05:46.090
<v Speaker 1>But hopefully, we'll be able to kinda show

00:05:46.090 --> 00:05:48.330
<v Speaker 1>off what the capabilities of this are,

00:05:48.570 --> 00:05:51.235
<v Speaker 1>and we'll get an idea of how powerful

00:05:51.235 --> 00:05:51.875
<v Speaker 1>it is.

00:05:52.915 --> 00:05:53.635
<v Speaker 0>Awesome.

00:05:54.675 --> 00:05:56.915
<v Speaker 0>The timing could could just generally couldn't be

00:05:56.915 --> 00:05:59.715
<v Speaker 0>better because I've actually been working on something

00:05:59.715 --> 00:06:01.794
<v Speaker 0>that could really leverage this. Like the cluster

00:06:01.794 --> 00:06:03.740
<v Speaker 0>API bindings that I've been working on. We're

00:06:03.740 --> 00:06:06.300
<v Speaker 0>actually deploying Kubernetes clusters are all all done

00:06:06.300 --> 00:06:08.140
<v Speaker 0>in TypeScript just because that's the language that

00:06:08.140 --> 00:06:10.380
<v Speaker 0>I prefer to go. But the cloud native

00:06:10.380 --> 00:06:13.260
<v Speaker 0>ecosystem is physical developers who wanna work in

00:06:13.260 --> 00:06:15.260
<v Speaker 0>go. And if I can expose these bindings

00:06:15.260 --> 00:06:17.100
<v Speaker 0>to them through that, that would be amazing.

00:06:17.100 --> 00:06:19.405
<v Speaker 0>So I am super excited to see this

00:06:19.405 --> 00:06:19.965
<v Speaker 0>work.

00:06:20.285 --> 00:06:21.885
<v Speaker 1>So just a final thing, we're gonna be

00:06:21.885 --> 00:06:24.845
<v Speaker 1>using the Go SDK today mainly because Go's

00:06:24.845 --> 00:06:27.085
<v Speaker 1>ability to build binaries that you can then

00:06:27.085 --> 00:06:29.565
<v Speaker 1>reshare is super, super powerful. So I like

00:06:29.565 --> 00:06:31.200
<v Speaker 1>to write these in Go. You can write

00:06:31.200 --> 00:06:33.040
<v Speaker 1>these components. If you're a Python developer or

00:06:33.040 --> 00:06:35.120
<v Speaker 1>a TypeScript developer or a dot net developer,

00:06:35.200 --> 00:06:37.120
<v Speaker 1>you can write these components in whatever language

00:06:37.120 --> 00:06:39.360
<v Speaker 1>you think is best. But

00:06:39.600 --> 00:06:42.560
<v Speaker 1>the the caveat is that, you know, the

00:06:42.560 --> 00:06:44.160
<v Speaker 1>the end stream user

00:06:44.375 --> 00:06:46.375
<v Speaker 1>will still need to have Node or Python

00:06:46.375 --> 00:06:48.295
<v Speaker 1>installed if you write it in those languages.

00:06:48.295 --> 00:06:50.215
<v Speaker 1>So Go is really nice for this because

00:06:50.295 --> 00:06:51.415
<v Speaker 1>all you have to do is give the

00:06:51.415 --> 00:06:53.495
<v Speaker 1>users a binary, and they're off to the

00:06:53.495 --> 00:06:55.255
<v Speaker 1>races, basically. Nice.

00:06:55.975 --> 00:06:56.695
<v Speaker 0>Alright.

00:06:56.775 --> 00:06:57.575
<v Speaker 0>Show me the race.

00:06:58.530 --> 00:07:00.690
<v Speaker 1>Okay. So we're I sent you a link

00:07:00.690 --> 00:07:02.930
<v Speaker 1>before we started. We're gonna look at the

00:07:03.009 --> 00:07:05.169
<v Speaker 1>Pulumi Go boilerplate

00:07:05.169 --> 00:07:06.050
<v Speaker 1>provider.

00:07:06.449 --> 00:07:08.370
<v Speaker 1>So this is on our GitHub repo.

00:07:09.009 --> 00:07:10.849
<v Speaker 0>Yeah. I just gonna leave the Pulumi homepage

00:07:10.849 --> 00:07:12.449
<v Speaker 0>up for ten more seconds because I think

00:07:12.449 --> 00:07:13.955
<v Speaker 0>it looks so awesome these days with the

00:07:13.955 --> 00:07:15.715
<v Speaker 0>the rebranding. You

00:07:15.715 --> 00:07:17.555
<v Speaker 1>know? And I I love the rebranding and

00:07:17.555 --> 00:07:20.275
<v Speaker 1>shout out to Zach Chase who, like, slaved

00:07:20.275 --> 00:07:21.955
<v Speaker 1>away for hours and hours kind of putting

00:07:21.955 --> 00:07:23.955
<v Speaker 1>this together and and coding it all up.

00:07:23.955 --> 00:07:25.795
<v Speaker 1>I think it looks awesome too. So,

00:07:26.355 --> 00:07:27.715
<v Speaker 1>yeah, really, really cool.

00:07:28.680 --> 00:07:30.759
<v Speaker 1>So the starting point that we have already

00:07:30.759 --> 00:07:32.280
<v Speaker 1>kinda done a little bit of we've got

00:07:32.280 --> 00:07:33.880
<v Speaker 1>a template provider here

00:07:34.280 --> 00:07:35.160
<v Speaker 1>that

00:07:35.240 --> 00:07:37.400
<v Speaker 1>we call the x y z provider.

00:07:37.400 --> 00:07:39.319
<v Speaker 1>And what it's basically doing is showing you

00:07:39.319 --> 00:07:40.440
<v Speaker 1>an example of creating

00:07:40.785 --> 00:07:42.865
<v Speaker 1>a static site in AWS.

00:07:43.105 --> 00:07:44.465
<v Speaker 1>But the whole point of this is to

00:07:44.465 --> 00:07:46.225
<v Speaker 1>start off with something that

00:07:46.705 --> 00:07:49.425
<v Speaker 1>allows us to kind of build something out.

00:07:49.425 --> 00:07:52.145
<v Speaker 1>So you already fought this into

00:07:52.225 --> 00:07:53.425
<v Speaker 1>Rawkode

00:07:53.425 --> 00:07:54.225
<v Speaker 1>Pulumi

00:07:54.225 --> 00:07:57.150
<v Speaker 1>dash production app, which we see here.

00:07:58.590 --> 00:08:00.350
<v Speaker 1>So the first thing that we need to

00:08:00.350 --> 00:08:02.190
<v Speaker 1>do is we need to kinda go through

00:08:02.190 --> 00:08:03.950
<v Speaker 1>a bunch of this stuff and just update

00:08:03.950 --> 00:08:06.670
<v Speaker 1>the name from x y z into

00:08:07.310 --> 00:08:08.990
<v Speaker 1>what we're gonna call production app. So the

00:08:08.990 --> 00:08:10.030
<v Speaker 1>first thing I would do is open up

00:08:10.030 --> 00:08:10.670
<v Speaker 1>the make file.

00:08:13.855 --> 00:08:15.215
<v Speaker 1>And you'll see at the top there the

00:08:15.215 --> 00:08:17.135
<v Speaker 1>pack is x y z, so we'll change

00:08:17.135 --> 00:08:18.015
<v Speaker 1>that to

00:08:18.975 --> 00:08:19.855
<v Speaker 1>production

00:08:19.855 --> 00:08:20.655
<v Speaker 1>app.

00:08:22.815 --> 00:08:24.975
<v Speaker 1>And then below that in project, you need

00:08:24.975 --> 00:08:26.710
<v Speaker 1>to make sure the project is Rawkode rather

00:08:26.710 --> 00:08:27.750
<v Speaker 1>than Pulumi.

00:08:28.870 --> 00:08:30.310
<v Speaker 1>And then we'll just scroll down and make

00:08:30.310 --> 00:08:32.230
<v Speaker 1>sure there's no other missing pieces. I don't

00:08:32.230 --> 00:08:33.110
<v Speaker 1>think there is.

00:08:34.150 --> 00:08:35.669
<v Speaker 1>And just to quickly go through what this

00:08:35.669 --> 00:08:37.510
<v Speaker 1>is doing, this is just a make file

00:08:37.510 --> 00:08:38.470
<v Speaker 1>that is going to

00:08:39.605 --> 00:08:42.005
<v Speaker 1>generate all of the SDKs once we finish

00:08:42.005 --> 00:08:43.924
<v Speaker 1>building this out and then also install them

00:08:43.924 --> 00:08:45.445
<v Speaker 1>locally so that we can test it. So

00:08:45.445 --> 00:08:47.285
<v Speaker 1>you'll see it's gonna generate

00:08:47.445 --> 00:08:49.605
<v Speaker 1>what we call a provider binary, and then

00:08:49.605 --> 00:08:51.765
<v Speaker 1>it's also gonna generate all of the different

00:08:51.600 --> 00:08:53.600
<v Speaker 1>SDKs. So this is what we're obviously gonna

00:08:53.600 --> 00:08:55.040
<v Speaker 1>be using in a few moments.

00:08:56.079 --> 00:08:58.959
<v Speaker 1>Next step is we're gonna open up schema

00:08:58.959 --> 00:09:00.079
<v Speaker 1>dot JSON.

00:09:02.319 --> 00:09:05.575
<v Speaker 1>So this defines the shape of the actual

00:09:05.575 --> 00:09:08.935
<v Speaker 1>component itself. So it defines inputs that you're

00:09:08.935 --> 00:09:10.775
<v Speaker 1>gonna put into the actual

00:09:11.495 --> 00:09:13.255
<v Speaker 1>no. We're gonna do it manual, Paul. We're

00:09:13.255 --> 00:09:14.375
<v Speaker 1>gonna do it we're gonna do it so

00:09:14.375 --> 00:09:16.375
<v Speaker 1>that people understand what is happening. We're gonna

00:09:16.375 --> 00:09:17.015
<v Speaker 1>do it the right way.

00:09:17.959 --> 00:09:21.160
<v Speaker 1>So this defines the inputs and the outputs

00:09:21.160 --> 00:09:24.120
<v Speaker 1>of the actual component. So this is gonna

00:09:24.120 --> 00:09:26.759
<v Speaker 1>allow us to set configurable values for our

00:09:26.759 --> 00:09:27.399
<v Speaker 1>users

00:09:27.639 --> 00:09:29.480
<v Speaker 1>and also what things that they might want

00:09:29.480 --> 00:09:31.639
<v Speaker 1>to use elsewhere. So we're gonna call that

00:09:31.515 --> 00:09:33.355
<v Speaker 1>production app and then on line four, we're

00:09:33.355 --> 00:09:35.035
<v Speaker 1>gonna switch x y z to production app

00:09:35.035 --> 00:09:35.675
<v Speaker 1>as well.

00:09:36.475 --> 00:09:38.555
<v Speaker 1>And then instead of static page, we'll call

00:09:38.555 --> 00:09:41.115
<v Speaker 1>it deployment, I think. So an an an

00:09:41.195 --> 00:09:43.195
<v Speaker 1>a deployment of a production app.

00:09:43.915 --> 00:09:45.195
<v Speaker 1>And then the input properties,

00:09:45.570 --> 00:09:47.330
<v Speaker 1>we're just gonna clear that map out for

00:09:47.330 --> 00:09:48.770
<v Speaker 1>the time being, think is probably the best

00:09:48.770 --> 00:09:50.610
<v Speaker 1>way to go ahead, go about this. So

00:09:50.610 --> 00:09:53.010
<v Speaker 1>it's actually starting at line six. Sorry. And

00:09:53.010 --> 00:09:55.890
<v Speaker 1>I don't wanna kinda, you know, over over

00:09:56.210 --> 00:09:57.890
<v Speaker 0>Do we need empty out the required inputs

00:09:57.890 --> 00:09:58.130
<v Speaker 0>too?

00:09:58.795 --> 00:10:00.555
<v Speaker 1>Yes. We're gonna click. So that's gonna be

00:10:00.555 --> 00:10:02.475
<v Speaker 1>an empty array and then

00:10:03.515 --> 00:10:04.555
<v Speaker 1>all of the

00:10:04.875 --> 00:10:06.875
<v Speaker 1>yeah. All of the required properties.

00:10:07.755 --> 00:10:09.275
<v Speaker 0>Okay. So this is just like

00:10:09.755 --> 00:10:11.195
<v Speaker 0>JSON declaration

00:10:11.195 --> 00:10:13.355
<v Speaker 0>that says this is the thing that we're

00:10:13.355 --> 00:10:15.579
<v Speaker 0>creating. These are the inputs that it has,

00:10:15.579 --> 00:10:16.940
<v Speaker 0>and then this is the other stuff that

00:10:16.940 --> 00:10:18.380
<v Speaker 0>can be layered on the top to customize

00:10:18.380 --> 00:10:20.060
<v Speaker 0>it in some way. Is that like like

00:10:20.060 --> 00:10:22.060
<v Speaker 0>like a function signature in a weird kind

00:10:22.060 --> 00:10:22.620
<v Speaker 0>of way?

00:10:23.100 --> 00:10:25.260
<v Speaker 1>Yeah. That's that's probably a good good way

00:10:25.260 --> 00:10:27.295
<v Speaker 1>of putting it. Yeah. So I'm also just

00:10:27.295 --> 00:10:31.295
<v Speaker 1>gonna clear out this index content here because

00:10:31.295 --> 00:10:32.815
<v Speaker 1>that we're we're gonna fill that out in

00:10:32.815 --> 00:10:33.615
<v Speaker 1>a few seconds.

00:10:34.334 --> 00:10:36.255
<v Speaker 1>So this is gonna show us, like, all

00:10:36.255 --> 00:10:37.454
<v Speaker 1>of the things that the users are gonna

00:10:37.454 --> 00:10:38.735
<v Speaker 1>be able to configure and then also the

00:10:38.735 --> 00:10:40.095
<v Speaker 1>things that they might wanna pass to other

00:10:40.095 --> 00:10:41.295
<v Speaker 1>Pulumi resources later.

00:10:42.209 --> 00:10:42.850
<v Speaker 1>So

00:10:43.170 --> 00:10:45.089
<v Speaker 1>for example, you might wanna generate the deployment

00:10:45.089 --> 00:10:46.209
<v Speaker 1>name and all that kind of stuff. We're

00:10:46.209 --> 00:10:47.410
<v Speaker 1>not gonna use this today,

00:10:47.730 --> 00:10:49.170
<v Speaker 1>but, you know, it's just a a nice

00:10:49.170 --> 00:10:49.970
<v Speaker 1>thing to know

00:10:50.370 --> 00:10:51.330
<v Speaker 1>later on.

00:10:51.810 --> 00:10:53.810
<v Speaker 1>And so the next step, we're gonna define

00:10:53.810 --> 00:10:55.915
<v Speaker 1>all of the language dependencies.

00:10:55.915 --> 00:10:56.955
<v Speaker 1>And obviously,

00:10:57.595 --> 00:10:59.834
<v Speaker 1>for our example, we've got c sharp. We're

00:10:59.834 --> 00:11:02.394
<v Speaker 1>gonna in the example, we're using AWS. We're

00:11:02.394 --> 00:11:04.315
<v Speaker 1>not gonna use that. We're gonna use Kubernetes.

00:11:04.315 --> 00:11:05.755
<v Speaker 1>So on line 14,

00:11:05.915 --> 00:11:07.755
<v Speaker 1>we're gonna change that to Kubernetes and then

00:11:07.755 --> 00:11:10.520
<v Speaker 1>it's actually three dot star.

00:11:11.080 --> 00:11:13.320
<v Speaker 1>Go, we're gonna change the import base path

00:11:13.320 --> 00:11:16.680
<v Speaker 1>to our name. So Rawkode Pulumi

00:11:16.680 --> 00:11:17.720
<v Speaker 1>production app.

00:11:18.120 --> 00:11:20.040
<v Speaker 1>Yeah. Don't forget the Rawkode there. And then

00:11:20.040 --> 00:11:21.320
<v Speaker 1>at the end of the x y z

00:11:21.320 --> 00:11:23.000
<v Speaker 1>is also production app. Yep.

00:11:24.464 --> 00:11:28.785
<v Speaker 1>No JS dependencies update the AWS to Kubernetes

00:11:28.785 --> 00:11:29.904
<v Speaker 1>three point

00:11:30.464 --> 00:11:32.865
<v Speaker 1>o dot o and then finally Python

00:11:35.665 --> 00:11:36.144
<v Speaker 1>again.

00:11:37.040 --> 00:11:38.879
<v Speaker 1>And what's great about working at Pulumi is

00:11:38.879 --> 00:11:40.720
<v Speaker 1>you get to learn all the different dependency

00:11:40.720 --> 00:11:43.120
<v Speaker 1>management systems and how one of how they

00:11:43.120 --> 00:11:44.639
<v Speaker 1>all did how work differently.

00:11:44.959 --> 00:11:46.639
<v Speaker 1>So you're kinda dealing with so many different

00:11:46.639 --> 00:11:48.800
<v Speaker 1>SDKs at a time. You know, you end

00:11:48.800 --> 00:11:50.959
<v Speaker 1>up kind of learning the intricacies of setup

00:11:50.959 --> 00:11:52.319
<v Speaker 1>dot pie and all that kind of stuff.

00:11:53.675 --> 00:11:54.635
<v Speaker 1>So I think

00:11:55.435 --> 00:11:56.315
<v Speaker 0>There we go.

00:11:56.875 --> 00:11:57.915
<v Speaker 1>Yeah. We

00:11:58.315 --> 00:12:00.475
<v Speaker 1>are working on some authoring improvements here. So

00:12:00.475 --> 00:12:02.555
<v Speaker 1>we're hoping that we're working on a way

00:12:02.555 --> 00:12:04.555
<v Speaker 1>that this will automatically get generated. But for

00:12:04.555 --> 00:12:06.450
<v Speaker 1>the time being, it's actually kinda nice being

00:12:06.450 --> 00:12:08.450
<v Speaker 1>able to kinda do this manually because you

00:12:08.450 --> 00:12:09.970
<v Speaker 1>get to kinda think about a little bit

00:12:09.970 --> 00:12:12.130
<v Speaker 1>about what you're doing. But then I don't

00:12:12.130 --> 00:12:14.050
<v Speaker 0>get to show off my wonderful,

00:12:15.090 --> 00:12:16.450
<v Speaker 0>you know, command line knowledge.

00:12:18.704 --> 00:12:20.545
<v Speaker 1>So the the next thing that we're gonna

00:12:20.545 --> 00:12:22.865
<v Speaker 1>do yeah. I mean, that that that's probably

00:12:23.024 --> 00:12:24.225
<v Speaker 1>at this point, we could just to go

00:12:24.225 --> 00:12:25.105
<v Speaker 1>ahead and do that.

00:12:26.225 --> 00:12:29.904
<v Speaker 0>The I'm sure we're we're good. Right? Yes.

00:12:30.065 --> 00:12:30.305
<v Speaker 1>Okay.

00:12:31.290 --> 00:12:33.130
<v Speaker 1>And so then the final thing that we're

00:12:33.130 --> 00:12:36.010
<v Speaker 1>doing here, is we're gonna actually update the,

00:12:36.970 --> 00:12:39.130
<v Speaker 1>the directory. So if you go back to

00:12:39.130 --> 00:12:39.769
<v Speaker 1>your,

00:12:41.449 --> 00:12:44.009
<v Speaker 1>yeah. So in the provider directory,

00:12:44.964 --> 00:12:46.565
<v Speaker 1>there's go dot mod.

00:12:49.605 --> 00:12:51.285
<v Speaker 1>At the top, the module name is gonna

00:12:51.285 --> 00:12:53.525
<v Speaker 1>be Rawkode Pulumi production app.

00:12:54.645 --> 00:12:55.925
<v Speaker 1>I don't know if you wanna go for

00:12:55.925 --> 00:12:58.404
<v Speaker 1>go one sixteen. That definitely works.

00:13:04.540 --> 00:13:07.500
<v Speaker 1>And then the Pulumi package and SDK is

00:13:07.500 --> 00:13:09.500
<v Speaker 1>gonna be three point three point one.

00:13:13.925 --> 00:13:15.605
<v Speaker 1>And you'll need to yeah. You'll need to

00:13:15.605 --> 00:13:18.325
<v Speaker 1>yank the there we go. Perfect. Okay.

00:13:19.045 --> 00:13:21.045
<v Speaker 1>We'll keep going. And now we're just gonna

00:13:21.045 --> 00:13:23.205
<v Speaker 1>update some directory names. So if you go

00:13:23.205 --> 00:13:25.365
<v Speaker 1>to your workspace again

00:13:27.320 --> 00:13:29.160
<v Speaker 1>in the package directory.

00:13:32.600 --> 00:13:34.440
<v Speaker 1>Sorry. No. In the my apologies. In the

00:13:34.440 --> 00:13:35.640
<v Speaker 1>command directory.

00:13:36.840 --> 00:13:37.560
<v Speaker 0>Yeah.

00:13:37.720 --> 00:13:38.280
<v Speaker 1>Rename those

00:13:42.814 --> 00:13:45.134
<v Speaker 1>and then rename resource as well.

00:13:49.615 --> 00:13:51.295
<v Speaker 1>And then I think there's got some imports

00:13:51.295 --> 00:13:52.495
<v Speaker 1>in there as well, so you'll need to

00:13:52.495 --> 00:13:53.535
<v Speaker 1>drill down into there.

00:13:55.700 --> 00:13:56.899
<v Speaker 1>So this,

00:13:57.940 --> 00:13:59.540
<v Speaker 1>this is all fine. What this is doing

00:13:59.540 --> 00:14:01.380
<v Speaker 1>is it's reading in that schema and it's

00:14:01.380 --> 00:14:03.540
<v Speaker 1>gonna emit the SDK from the schema.

00:14:04.820 --> 00:14:05.620
<v Speaker 1>And then

00:14:06.420 --> 00:14:06.660
<v Speaker 1>here.

00:14:07.235 --> 00:14:08.915
<v Speaker 0>Looks like a c m s oh, there

00:14:08.915 --> 00:14:10.835
<v Speaker 0>we go. There we go.

00:14:13.795 --> 00:14:15.475
<v Speaker 1>I'm sure we've missed one of these, but

00:14:15.475 --> 00:14:17.715
<v Speaker 1>we'll we'll figure it out. And then don't

00:14:17.715 --> 00:14:19.635
<v Speaker 1>forget the online 20 as well. Don't forget

00:14:19.635 --> 00:14:22.050
<v Speaker 1>the Rawkode for Pulumi

00:14:22.050 --> 00:14:24.130
<v Speaker 1>in the that's it. Yeah. And the import

00:14:24.130 --> 00:14:25.010
<v Speaker 1>name as well.

00:14:28.210 --> 00:14:29.970
<v Speaker 1>Kinda manual at the moment. You know, we

00:14:29.970 --> 00:14:31.490
<v Speaker 1>we we are working on the author and

00:14:31.490 --> 00:14:32.450
<v Speaker 1>experience for sure.

00:14:34.115 --> 00:14:36.675
<v Speaker 1>So anything in the examples or SDK is

00:14:36.675 --> 00:14:37.555
<v Speaker 1>gonna be fine.

00:14:37.955 --> 00:14:39.555
<v Speaker 1>All of the stuff that we're really looking

00:14:39.555 --> 00:14:41.795
<v Speaker 1>for is in the provider thing here. So

00:14:41.795 --> 00:14:43.714
<v Speaker 1>we are gonna be looking at the provider

00:14:43.714 --> 00:14:44.835
<v Speaker 1>package in a moment.

00:14:46.470 --> 00:14:48.389
<v Speaker 1>So what I would recommend is just blowing

00:14:48.389 --> 00:14:50.949
<v Speaker 1>away the SDK directory because we're gonna regenerate

00:14:50.949 --> 00:14:53.190
<v Speaker 1>that every single time. What about the example

00:14:53.190 --> 00:14:53.990
<v Speaker 0>directory?

00:14:54.470 --> 00:14:56.470
<v Speaker 1>And that as well. Yeah. That's probably easier.

00:14:57.110 --> 00:14:57.670
<v Speaker 0>You sure?

00:14:58.435 --> 00:14:59.155
<v Speaker 1>Yes.

00:15:00.035 --> 00:15:01.475
<v Speaker 1>We're not they we're not gonna be using

00:15:01.475 --> 00:15:02.675
<v Speaker 1>that just yet. I promise.

00:15:03.875 --> 00:15:05.875
<v Speaker 0>Alright. We could ignore the read me.

00:15:06.275 --> 00:15:08.035
<v Speaker 0>So that means we got just a provider

00:15:08.035 --> 00:15:10.915
<v Speaker 0>one now. So let's jump back. Yeah. So

00:15:12.755 --> 00:15:13.075
<v Speaker 1>yep.

00:15:16.740 --> 00:15:18.500
<v Speaker 1>It's in command, I think,

00:15:19.300 --> 00:15:22.019
<v Speaker 1>in the provider command. Sorry. The there's there's

00:15:22.019 --> 00:15:24.259
<v Speaker 1>two command directories. There's command and then provider

00:15:24.259 --> 00:15:25.060
<v Speaker 1>command.

00:15:27.699 --> 00:15:29.060
<v Speaker 1>Oh, there we have provider package.

00:15:32.555 --> 00:15:33.355
<v Speaker 0>Alright.

00:15:33.355 --> 00:15:33.915
<v Speaker 0>Okay.

00:15:35.275 --> 00:15:35.995
<v Speaker 1>Yeah.

00:15:36.315 --> 00:15:38.075
<v Speaker 0>Yeah. There is one. Production

00:15:39.275 --> 00:15:41.435
<v Speaker 0>app. Question after deployment. Right?

00:15:41.755 --> 00:15:42.875
<v Speaker 1>That's right. Yeah.

00:15:47.590 --> 00:15:49.110
<v Speaker 1>And that's it. So,

00:15:49.830 --> 00:15:51.990
<v Speaker 1>what we're gonna do now is we're gonna

00:15:51.990 --> 00:15:56.230
<v Speaker 1>rename the static page. Go into into productionapp.co.

00:15:56.230 --> 00:15:56.310
<v Speaker 1>I'll

00:15:57.510 --> 00:15:59.190
<v Speaker 1>gonna rename that. I I I like to

00:15:59.190 --> 00:16:01.590
<v Speaker 1>call it deployment.co because that's what we're be

00:16:02.265 --> 00:16:03.865
<v Speaker 1>And then if we open that up

00:16:04.985 --> 00:16:07.305
<v Speaker 1>okay. So this is where we're actually gonna

00:16:07.305 --> 00:16:09.145
<v Speaker 1>do all of the logic that we're actually

00:16:09.145 --> 00:16:11.385
<v Speaker 1>going to kind of do use to create

00:16:11.385 --> 00:16:13.785
<v Speaker 1>our provider. So currently, we're using the AWS

00:16:13.785 --> 00:16:15.545
<v Speaker 1>provider. We can completely remove,

00:16:16.024 --> 00:16:17.145
<v Speaker 1>line

00:16:16.860 --> 00:16:17.660
<v Speaker 1>18,

00:16:19.820 --> 00:16:22.220
<v Speaker 1>and just do because we because the the

00:16:22.220 --> 00:16:24.940
<v Speaker 1>the Kubernetes provider's laid out slightly differently.

00:16:25.660 --> 00:16:27.980
<v Speaker 1>And you, you're way ahead of me already.

00:16:27.980 --> 00:16:29.899
<v Speaker 1>So you

00:16:30.325 --> 00:16:32.405
<v Speaker 0>Yeah. But I to make you to me

00:16:32.325 --> 00:16:32.725
<v Speaker 1>no.

00:16:33.445 --> 00:16:34.645
<v Speaker 1>To me, that actually

00:16:35.045 --> 00:16:37.685
<v Speaker 1>shows that it's relatively intuitive. So yes. So

00:16:37.685 --> 00:16:40.005
<v Speaker 1>we're gonna create a deployment with deployment arcs.

00:16:40.085 --> 00:16:41.765
<v Speaker 1>We haven't decided that we're gonna have index

00:16:41.765 --> 00:16:43.580
<v Speaker 1>content yet, so let's get rid of all

00:16:43.580 --> 00:16:46.140
<v Speaker 1>of that. And then line twenty nine and

00:16:46.140 --> 00:16:47.420
<v Speaker 1>twenty and 30, we can get rid of

00:16:47.420 --> 00:16:49.100
<v Speaker 1>those because those are gonna be the actual

00:16:49.100 --> 00:16:51.580
<v Speaker 1>outputs that we're gonna create. We're not gonna

00:16:51.580 --> 00:16:53.340
<v Speaker 1>do new static page. We're gonna do new

00:16:53.340 --> 00:16:54.140
<v Speaker 1>deployment.

00:16:56.220 --> 00:16:58.140
<v Speaker 0>Okay. So I should just rename it rather

00:16:58.140 --> 00:17:00.995
<v Speaker 0>than delete it? Yeah. Just rename it. Yeah.

00:17:01.875 --> 00:17:05.474
<v Speaker 1>And that takes deployment args on line 32.

00:17:08.035 --> 00:17:11.075
<v Speaker 1>And then we also redirect to deployment args

00:17:11.075 --> 00:17:11.794
<v Speaker 1>there.

00:17:12.755 --> 00:17:14.115
<v Speaker 1>And then 37.

00:17:18.810 --> 00:17:20.890
<v Speaker 1>It's not it's just a component is a

00:17:20.890 --> 00:17:21.930
<v Speaker 1>new in yeah.

00:17:22.170 --> 00:17:23.609
<v Speaker 1>And then here you can see where where

00:17:23.609 --> 00:17:26.250
<v Speaker 1>we register our component. That will be production

00:17:26.250 --> 00:17:26.970
<v Speaker 1>app

00:17:27.544 --> 00:17:28.504
<v Speaker 1>index

00:17:29.304 --> 00:17:30.345
<v Speaker 1>deployment.

00:17:32.025 --> 00:17:32.904
<v Speaker 1>There we go.

00:17:33.465 --> 00:17:35.145
<v Speaker 1>We're not gonna be creating a bucket, we

00:17:35.145 --> 00:17:36.105
<v Speaker 1>can get rid of that.

00:17:37.785 --> 00:17:39.065
<v Speaker 1>And you can see that this is all

00:17:39.065 --> 00:17:41.465
<v Speaker 1>just gonna be creating leave that leave that.

00:17:41.465 --> 00:17:42.985
<v Speaker 1>We're gonna need that in a few moments.

00:17:44.000 --> 00:17:45.360
<v Speaker 1>So what you wanna be removing

00:17:45.840 --> 00:17:47.120
<v Speaker 1>and I can probably jump in here and

00:17:47.120 --> 00:17:49.039
<v Speaker 1>help. I'm making you do all the work.

00:17:49.039 --> 00:17:51.679
<v Speaker 0>Yeah. Try to step back and relax. Alright.

00:17:52.320 --> 00:17:53.679
<v Speaker 1>You've already done it.

00:17:54.559 --> 00:17:56.265
<v Speaker 1>So then the final thing that we're gonna

00:17:56.265 --> 00:17:58.745
<v Speaker 1>remove is this register resource output is gonna

00:17:58.745 --> 00:18:00.425
<v Speaker 1>be the thing that we're gonna export in

00:18:00.425 --> 00:18:02.425
<v Speaker 1>our production app. We're not gonna export anything.

00:18:02.425 --> 00:18:04.105
<v Speaker 1>So this can be just an empty Pulumi

00:18:04.105 --> 00:18:06.425
<v Speaker 1>map. So lines forty four and forty five

00:18:06.425 --> 00:18:07.225
<v Speaker 1>can can go.

00:18:13.410 --> 00:18:16.130
<v Speaker 1>Beautiful. Okay. So what is that? Like five

00:18:16.130 --> 00:18:18.290
<v Speaker 1>minutes and we have bootstrapped our provider and

00:18:18.290 --> 00:18:19.490
<v Speaker 1>we're ready to actually,

00:18:20.050 --> 00:18:22.210
<v Speaker 1>add some stuff to this now to actually

00:18:22.210 --> 00:18:23.645
<v Speaker 1>make it useful. So we need to do

00:18:23.645 --> 00:18:24.924
<v Speaker 1>a few imports.

00:18:25.804 --> 00:18:28.524
<v Speaker 0>What we'll need to a question just now?

00:18:29.005 --> 00:18:29.804
<v Speaker 1>Absolutely.

00:18:30.525 --> 00:18:31.244
<v Speaker 0>Alright.

00:18:31.405 --> 00:18:33.804
<v Speaker 0>We got a we Paul has answered it

00:18:33.804 --> 00:18:35.405
<v Speaker 0>in the comments, but let's get Andreas a

00:18:35.405 --> 00:18:36.205
<v Speaker 0>good answer. So

00:18:37.300 --> 00:18:40.100
<v Speaker 0>no, no offense, Paul. I love you really.

00:18:40.100 --> 00:18:41.700
<v Speaker 0>But Andrea is asking,

00:18:42.260 --> 00:18:45.220
<v Speaker 0>does that mean Oh, that went away fast.

00:18:45.220 --> 00:18:45.860
<v Speaker 0>Stay.

00:18:46.340 --> 00:18:48.500
<v Speaker 0>Does that mean that consuming several public components

00:18:48.500 --> 00:18:50.420
<v Speaker 0>might require to have node and Python available

00:18:50.420 --> 00:18:53.105
<v Speaker 0>even if the stack itself is defined and

00:18:53.105 --> 00:18:55.424
<v Speaker 0>go lang. So you're basically generating API stubs.

00:18:55.424 --> 00:18:57.184
<v Speaker 0>I don't know why that keeps disappearing.

00:18:57.745 --> 00:19:00.225
<v Speaker 1>Yes, basically. So like the language that you're

00:19:00.225 --> 00:19:02.625
<v Speaker 1>actually using, like if you're consuming this component

00:19:02.625 --> 00:19:04.544
<v Speaker 1>in Python, are you consuming this this component

00:19:04.544 --> 00:19:07.649
<v Speaker 1>in TypeScript, you'll need those available to actually

00:19:07.649 --> 00:19:10.049
<v Speaker 1>kind of create the the infrastructure.

00:19:10.450 --> 00:19:12.129
<v Speaker 1>Because we're writing this in Go,

00:19:13.090 --> 00:19:14.769
<v Speaker 1>you'll need to have the also the actual

00:19:14.769 --> 00:19:17.409
<v Speaker 1>Pulumi binary locally installed as well. And we'll

00:19:17.409 --> 00:19:19.089
<v Speaker 1>generate that and put it in the path.

00:19:19.730 --> 00:19:22.115
<v Speaker 1>But you like, because we're defining it in

00:19:22.115 --> 00:19:23.955
<v Speaker 1>Go, if you wanna consume this in TypeScript,

00:19:23.955 --> 00:19:26.275
<v Speaker 1>you will not need Python as an example.

00:19:26.275 --> 00:19:28.835
<v Speaker 1>Right? So this is relatively common for some

00:19:28.835 --> 00:19:30.914
<v Speaker 1>of our larger customers who have, like, clean

00:19:30.914 --> 00:19:32.674
<v Speaker 1>laptops and they're like, we want this specific

00:19:32.674 --> 00:19:34.354
<v Speaker 1>version of this specific,

00:19:34.995 --> 00:19:35.235
<v Speaker 1>you know,

00:19:36.570 --> 00:19:37.289
<v Speaker 1>language.

00:19:37.770 --> 00:19:39.690
<v Speaker 1>You'll only need the language you're consuming it

00:19:39.690 --> 00:19:41.610
<v Speaker 1>in. You don't need all of Pulumi supported

00:19:41.610 --> 00:19:43.850
<v Speaker 1>languages installed to use this because we're writing

00:19:43.850 --> 00:19:44.649
<v Speaker 1>it in Go.

00:19:46.010 --> 00:19:46.730
<v Speaker 1>Okay.

00:19:46.970 --> 00:19:48.410
<v Speaker 1>So hopefully that answers the question.

00:19:49.865 --> 00:19:51.545
<v Speaker 1>Okay. So what we're gonna do now is

00:19:51.545 --> 00:19:53.465
<v Speaker 1>we're gonna use the Kubernetes SDK

00:19:53.465 --> 00:19:55.544
<v Speaker 1>to actually define a

00:19:55.545 --> 00:19:56.905
<v Speaker 1>a namespace,

00:19:57.065 --> 00:19:59.145
<v Speaker 1>a deployment, and a service. This is just

00:19:59.145 --> 00:20:00.185
<v Speaker 1>a hypothetical

00:20:00.185 --> 00:20:03.460
<v Speaker 1>production app. So I'm gonna copy these for

00:20:03.460 --> 00:20:04.019
<v Speaker 1>you

00:20:04.260 --> 00:20:05.139
<v Speaker 1>into

00:20:05.460 --> 00:20:06.580
<v Speaker 1>the dependencies

00:20:06.580 --> 00:20:08.980
<v Speaker 1>so that you I don't have to tell

00:20:08.980 --> 00:20:10.179
<v Speaker 1>you to type them all out.

00:20:11.059 --> 00:20:12.900
<v Speaker 1>So these are all of the different types

00:20:12.900 --> 00:20:14.659
<v Speaker 1>of dependencies. If you scroll up to where

00:20:14.659 --> 00:20:17.539
<v Speaker 1>the dependencies are, we're gonna be using apps

00:20:16.815 --> 00:20:18.815
<v Speaker 1>v one. If you are familiar with Kubernetes,

00:20:18.815 --> 00:20:20.575
<v Speaker 1>this will look pretty familiar. It's basically just

00:20:20.575 --> 00:20:21.934
<v Speaker 1>the Kubernetes API.

00:20:23.134 --> 00:20:25.695
<v Speaker 1>And we're gonna use apps v one, call

00:20:25.695 --> 00:20:27.375
<v Speaker 1>v one, which is where the namespaces are,

00:20:27.375 --> 00:20:28.815
<v Speaker 1>and meta v one for all the different

00:20:28.815 --> 00:20:29.455
<v Speaker 1>types and stuff.

00:20:31.019 --> 00:20:33.499
<v Speaker 1>So I've imported those for us.

00:20:33.820 --> 00:20:35.260
<v Speaker 1>The next thing that we're going to do

00:20:35.260 --> 00:20:37.339
<v Speaker 1>is go back down to our new deployment.

00:20:38.059 --> 00:20:39.820
<v Speaker 1>Well, if we scroll down a little bit.

00:20:40.700 --> 00:20:42.700
<v Speaker 1>Yep. And this is just where we're gonna

00:20:42.700 --> 00:20:44.785
<v Speaker 1>start to actually define all of the stuff

00:20:44.785 --> 00:20:46.785
<v Speaker 1>that we want. So what I like to

00:20:46.785 --> 00:20:48.945
<v Speaker 1>do here is like set up some labels

00:20:49.185 --> 00:20:50.625
<v Speaker 1>that we're gonna pass to all of these

00:20:50.625 --> 00:20:52.145
<v Speaker 1>resources because it kinda shows that you don't

00:20:52.145 --> 00:20:53.505
<v Speaker 1>have to kinda repeat yourself.

00:20:53.665 --> 00:20:54.304
<v Speaker 1>So

00:20:54.705 --> 00:20:57.185
<v Speaker 1>below where the arguments is on line 39

00:20:57.185 --> 00:20:59.345
<v Speaker 1>just to create a new variable labels.

00:21:02.010 --> 00:21:03.929
<v Speaker 1>And we're gonna do Pulumi

00:21:05.130 --> 00:21:06.730
<v Speaker 1>dot string map.

00:21:10.090 --> 00:21:12.424
<v Speaker 1>And we're gonna add some labels

00:21:12.425 --> 00:21:13.144
<v Speaker 1>of

00:21:13.385 --> 00:21:14.265
<v Speaker 1>app.

00:21:15.065 --> 00:21:15.705
<v Speaker 1>So the actual

00:21:16.825 --> 00:21:18.185
<v Speaker 1>It these don't actually need to be a

00:21:18.185 --> 00:21:20.105
<v Speaker 1>Pulumi dot string. So it's just a,

00:21:20.825 --> 00:21:23.145
<v Speaker 1>app.kubernetes.i0

00:21:27.059 --> 00:21:29.220
<v Speaker 1>forward slash app is what I like to

00:21:29.220 --> 00:21:30.340
<v Speaker 1>call that label.

00:21:30.419 --> 00:21:32.179
<v Speaker 1>Sorry. I'm not I'm not doing a great

00:21:32.179 --> 00:21:32.580
<v Speaker 1>job of

00:21:33.140 --> 00:21:33.859
<v Speaker 1>yeah.

00:21:34.260 --> 00:21:36.660
<v Speaker 1>And then the this value is a Pulumi

00:21:36.660 --> 00:21:39.059
<v Speaker 1>dot string. But what we're actually gonna do

00:21:39.059 --> 00:21:41.539
<v Speaker 1>is just pass the name from the actual

00:21:41.539 --> 00:21:44.365
<v Speaker 1>deployment. So we'll do Pulumi dot string

00:21:45.005 --> 00:21:46.765
<v Speaker 1>name, and that comes from

00:21:47.085 --> 00:21:47.804
<v Speaker 1>here.

00:21:48.045 --> 00:21:49.085
<v Speaker 1>And I don't know if you can see

00:21:49.085 --> 00:21:50.845
<v Speaker 1>me highlighting in the Versus code because I've

00:21:50.845 --> 00:21:53.325
<v Speaker 1>turned the livestream off, but cool. So then

00:21:53.325 --> 00:21:55.405
<v Speaker 1>that's gonna come from there. And then also

00:21:55.405 --> 00:21:58.019
<v Speaker 1>we're gonna do app dot production.

00:21:58.659 --> 00:22:00.740
<v Speaker 1>And, again, this is just a nice label

00:22:00.740 --> 00:22:03.379
<v Speaker 1>to pass through to everything dot instance

00:22:03.380 --> 00:22:04.739
<v Speaker 1>for slash name

00:22:04.980 --> 00:22:06.179
<v Speaker 1>Pulumi

00:22:06.419 --> 00:22:08.019
<v Speaker 1>dot string

00:22:10.485 --> 00:22:11.764
<v Speaker 1>name. Oh,

00:22:12.325 --> 00:22:14.485
<v Speaker 1>apparently, I have not learned to type this

00:22:14.485 --> 00:22:15.044
<v Speaker 1>morning.

00:22:16.405 --> 00:22:18.005
<v Speaker 1>So then we could just pass these to

00:22:18.005 --> 00:22:20.485
<v Speaker 1>all the different different, resources that we're gonna

00:22:20.485 --> 00:22:21.605
<v Speaker 1>create, which is nice and simple.

00:22:23.309 --> 00:22:25.389
<v Speaker 1>Next thing we're gonna do is we're gonna

00:22:25.389 --> 00:22:27.469
<v Speaker 1>create a namespace

00:22:28.190 --> 00:22:28.989
<v Speaker 1>error.

00:22:29.630 --> 00:22:31.149
<v Speaker 1>And this is where we start to use

00:22:31.149 --> 00:22:31.950
<v Speaker 1>our

00:22:32.909 --> 00:22:33.710
<v Speaker 1>dependencies.

00:22:33.710 --> 00:22:34.750
<v Speaker 1>And I think you're gonna have to go

00:22:34.750 --> 00:22:36.565
<v Speaker 1>get them so that we get all of

00:22:36.565 --> 00:22:37.924
<v Speaker 1>the type hints.

00:22:38.325 --> 00:22:40.725
<v Speaker 0>Alright. Let's comment now so it's happy at

00:22:40.725 --> 00:22:41.205
<v Speaker 0>least.

00:22:41.845 --> 00:22:42.484
<v Speaker 1>Yeah.

00:22:44.804 --> 00:22:46.485
<v Speaker 0>Oh, I'm in the wrong directory. Right? So

00:22:46.485 --> 00:22:48.565
<v Speaker 0>that was a Yes. It's a provider. It's

00:22:48.565 --> 00:22:49.524
<v Speaker 1>in the provider directory.

00:22:50.720 --> 00:22:53.200
<v Speaker 0>And, yeah, we've got a go mod. Uh-oh.

00:22:53.200 --> 00:22:53.760
<v Speaker 0>Okay.

00:22:58.880 --> 00:22:59.360
<v Speaker 1>Interesting.

00:23:02.175 --> 00:23:04.495
<v Speaker 1>There we go. I never understand go mode.

00:23:04.495 --> 00:23:06.495
<v Speaker 0>I just keep typing commands until something works.

00:23:06.495 --> 00:23:06.975
<v Speaker 0>I

00:23:07.775 --> 00:23:09.535
<v Speaker 1>think you've just described my whole career.

00:23:11.855 --> 00:23:14.095
<v Speaker 1>So then we should hopefully get the type

00:23:14.095 --> 00:23:16.255
<v Speaker 1>hints now. So if we and

00:23:16.415 --> 00:23:18.740
<v Speaker 1>I'll let you. Yeah. And so then it

00:23:18.740 --> 00:23:19.779
<v Speaker 1>will be New

00:23:20.419 --> 00:23:21.539
<v Speaker 1>namespace. Yeah.

00:23:22.179 --> 00:23:24.100
<v Speaker 1>That takes the first argument is the context

00:23:24.100 --> 00:23:26.259
<v Speaker 1>or CTX. So that's the Pulumi context.

00:23:26.820 --> 00:23:28.260
<v Speaker 0>And then All of these take the

00:23:29.140 --> 00:23:31.155
<v Speaker 1>yep. Then the name and then it's an

00:23:31.315 --> 00:23:33.955
<v Speaker 1>as it's pointed to call v one

00:23:34.835 --> 00:23:35.715
<v Speaker 1>and

00:23:36.115 --> 00:23:38.675
<v Speaker 1>ampersand. Sorry. Call v one

00:23:38.915 --> 00:23:40.675
<v Speaker 1>dot namespace args.

00:23:41.475 --> 00:23:42.275
<v Speaker 1>Like so.

00:23:42.835 --> 00:23:43.155
<v Speaker 1>Yep.

00:23:44.990 --> 00:23:47.390
<v Speaker 1>Then we need to specify some metadata. So

00:23:47.870 --> 00:23:51.710
<v Speaker 1>yep. Let's populate that and that takes an

00:23:51.710 --> 00:23:53.390
<v Speaker 1>meta v one

00:23:57.595 --> 00:23:59.274
<v Speaker 1>object meta args,

00:24:02.955 --> 00:24:04.794
<v Speaker 1>and then we'll put the name,

00:24:04.955 --> 00:24:06.554
<v Speaker 1>I think it's capital n,

00:24:09.195 --> 00:24:10.075
<v Speaker 1>Pulumi

00:24:10.075 --> 00:24:10.955
<v Speaker 1>dot string name.

00:24:16.020 --> 00:24:18.100
<v Speaker 1>And then the labels obviously can come from

00:24:18.100 --> 00:24:19.619
<v Speaker 1>the actual labels variable.

00:24:20.980 --> 00:24:22.740
<v Speaker 0>I've forgotten how to go. I've been writing

00:24:22.740 --> 00:24:23.700
<v Speaker 0>Rust all week.

00:24:24.514 --> 00:24:26.274
<v Speaker 0>Bear with me. Yeah. You've gone you've gone

00:24:26.274 --> 00:24:27.474
<v Speaker 1>full hipster then.

00:24:29.875 --> 00:24:31.875
<v Speaker 1>What is missing here? Oh, why have I

00:24:31.875 --> 00:24:32.674
<v Speaker 0>got two?

00:24:33.554 --> 00:24:34.674
<v Speaker 1>That'll be it.

00:24:34.995 --> 00:24:36.274
<v Speaker 1>And there's another one at the end there.

00:24:36.274 --> 00:24:36.755
<v Speaker 1>There you go.

00:24:37.740 --> 00:24:38.380
<v Speaker 1>Okay.

00:24:38.940 --> 00:24:40.460
<v Speaker 1>So then we're doing go, so we need

00:24:40.460 --> 00:24:41.500
<v Speaker 1>to check the error.

00:24:41.660 --> 00:24:42.780
<v Speaker 0>Of course.

00:24:46.460 --> 00:24:48.060
<v Speaker 1>What I like to do here is I

00:24:48.060 --> 00:24:50.460
<v Speaker 1>like to so this object returns two things.

00:24:50.460 --> 00:24:52.265
<v Speaker 1>It returns a deployment and it returns an

00:24:52.265 --> 00:24:54.744
<v Speaker 1>error. So we're just gonna return nil.

00:24:56.345 --> 00:24:57.625
<v Speaker 1>And then what I like to do is

00:24:57.625 --> 00:25:00.825
<v Speaker 1>actually return a little bit more helpful error.

00:25:00.825 --> 00:25:02.505
<v Speaker 1>So I do format dot error f.

00:25:05.799 --> 00:25:07.639
<v Speaker 1>Sorry. It looks a little bit like yeah.

00:25:07.639 --> 00:25:08.359
<v Speaker 1>There we are.

00:25:09.480 --> 00:25:11.879
<v Speaker 1>Error creating namespace

00:25:14.200 --> 00:25:15.079
<v Speaker 1>colon

00:25:15.080 --> 00:25:17.799
<v Speaker 1>percent v. I do percent v because it's

00:25:17.799 --> 00:25:18.359
<v Speaker 1>nice.

00:25:18.919 --> 00:25:19.879
<v Speaker 1>And

00:25:19.879 --> 00:25:21.135
<v Speaker 1>then the actual error.

00:25:21.855 --> 00:25:23.695
<v Speaker 1>And that and I think we'll need to

00:25:23.695 --> 00:25:25.615
<v Speaker 1>import format as well. Yeah. Yeah. It looks

00:25:25.615 --> 00:25:27.855
<v Speaker 1>like it's Versus code. We should be good.

00:25:28.895 --> 00:25:31.855
<v Speaker 1>So that would create our namespace for us.

00:25:32.015 --> 00:25:33.935
<v Speaker 1>Let's create our deployment.

00:25:35.590 --> 00:25:38.630
<v Speaker 1>We will use the namespace later, but for

00:25:38.630 --> 00:25:40.790
<v Speaker 1>this the deployment, we're not actually gonna use

00:25:40.790 --> 00:25:43.429
<v Speaker 1>the variables. So we're gonna do empty variables.

00:25:43.429 --> 00:25:43.909
<v Speaker 1>So

00:25:44.550 --> 00:25:45.509
<v Speaker 1>error

00:25:45.510 --> 00:25:46.470
<v Speaker 1>equals

00:25:46.470 --> 00:25:47.990
<v Speaker 1>and it's just equals. Yeah.

00:25:49.544 --> 00:25:52.264
<v Speaker 1>I'll let you take over from here. Oh,

00:25:52.504 --> 00:25:54.984
<v Speaker 0>alright. So we want a core v one.

00:25:55.065 --> 00:25:57.384
<v Speaker 1>It's v one because it's a deployment

00:25:58.345 --> 00:25:59.625
<v Speaker 1>rather than core v one.

00:26:06.660 --> 00:26:07.940
<v Speaker 0>What did we import?

00:26:09.140 --> 00:26:11.860
<v Speaker 1>Oh, it's it's yanked our definition.

00:26:11.860 --> 00:26:13.220
<v Speaker 1>Let me let me grab It is apps

00:26:13.220 --> 00:26:15.485
<v Speaker 0>v one. Right? Yeah. It is. But it's

00:26:15.485 --> 00:26:17.485
<v Speaker 1>actually the import has disappeared because I'm guessing

00:26:17.485 --> 00:26:19.004
<v Speaker 1>we're not using it. So

00:26:19.725 --> 00:26:21.724
<v Speaker 1>I've added it back at the top there.

00:26:24.445 --> 00:26:27.005
<v Speaker 1>Dot new deployment. Yep. And then of course

00:26:27.005 --> 00:26:28.044
<v Speaker 1>that takes a context,

00:26:30.200 --> 00:26:31.240
<v Speaker 1>a name,

00:26:31.880 --> 00:26:34.039
<v Speaker 1>and then and apps v one

00:26:34.200 --> 00:26:35.559
<v Speaker 1>deployment args.

00:26:35.720 --> 00:26:38.600
<v Speaker 1>And, like, if you're if you're familiar with

00:26:38.600 --> 00:26:40.280
<v Speaker 1>Go, this all starts to seem a bit,

00:26:40.840 --> 00:26:42.200
<v Speaker 1>familiar after a while. Like,

00:26:43.595 --> 00:26:45.755
<v Speaker 1>but the deployment object is a little bit

00:26:45.755 --> 00:26:46.795
<v Speaker 1>more complicated so that

00:26:47.435 --> 00:26:48.715
<v Speaker 1>I think you've missed a I think you've

00:26:48.715 --> 00:26:50.794
<v Speaker 1>added an erroneous space there

00:26:52.235 --> 00:26:53.515
<v Speaker 1>on 56.

00:26:53.515 --> 00:26:54.635
<v Speaker 1>Let me get rid of that for you.

00:26:56.110 --> 00:26:58.669
<v Speaker 1>So then that takes metadata as well.

00:26:59.230 --> 00:27:00.989
<v Speaker 1>So we'll start with the metadata

00:27:01.950 --> 00:27:03.149
<v Speaker 1>in caps,

00:27:03.950 --> 00:27:06.270
<v Speaker 1>and it's object meta v one object meta

00:27:06.270 --> 00:27:06.909
<v Speaker 1>rags.

00:27:07.710 --> 00:27:09.309
<v Speaker 1>I think you need a pointer. So let

00:27:09.309 --> 00:27:10.750
<v Speaker 1>me add that for you. Okay.

00:27:12.775 --> 00:27:14.615
<v Speaker 1>And then she we're gonna get the we're

00:27:14.615 --> 00:27:17.415
<v Speaker 1>gonna grab the namespace that this deployment deploys

00:27:17.415 --> 00:27:18.054
<v Speaker 1>in

00:27:18.375 --> 00:27:20.135
<v Speaker 1>from the namespace variable.

00:27:20.295 --> 00:27:22.455
<v Speaker 1>And this is Pulumi's outputs at work. So

00:27:22.455 --> 00:27:23.255
<v Speaker 1>it will be

00:27:23.975 --> 00:27:24.855
<v Speaker 1>namespace,

00:27:27.820 --> 00:27:29.260
<v Speaker 1>and you can kind of finish it off

00:27:29.260 --> 00:27:31.420
<v Speaker 1>from there, dot metadata.

00:27:34.140 --> 00:27:36.780
<v Speaker 1>So it looks like this. So it's metadata

00:27:37.900 --> 00:27:38.620
<v Speaker 1>dot

00:27:38.700 --> 00:27:39.980
<v Speaker 0>a You want the name of it, of

00:27:39.980 --> 00:27:41.420
<v Speaker 0>course, not the object. And then you actually

00:27:41.420 --> 00:27:42.940
<v Speaker 1>need to get the element as well. So

00:27:42.940 --> 00:27:44.115
<v Speaker 1>it like that.

00:27:46.755 --> 00:27:49.235
<v Speaker 1>So if you're not familiar with Pulumi,

00:27:49.235 --> 00:27:51.635
<v Speaker 1>this is the way that we create dependencies

00:27:51.635 --> 00:27:54.195
<v Speaker 1>between two different objects. So we're getting what

00:27:54.195 --> 00:27:56.710
<v Speaker 1>we call the output, the the name from

00:27:56.710 --> 00:27:58.870
<v Speaker 1>this namespace. We're getting that output and we're

00:27:58.870 --> 00:28:00.390
<v Speaker 1>passing it to a new resource.

00:28:00.630 --> 00:28:02.710
<v Speaker 1>This allows Pulumi to know that it needs

00:28:02.710 --> 00:28:05.270
<v Speaker 1>to create the namespace first and then create

00:28:05.270 --> 00:28:06.630
<v Speaker 1>the deployment second.

00:28:07.030 --> 00:28:08.390
<v Speaker 1>And this is how we're able to use

00:28:08.390 --> 00:28:11.534
<v Speaker 1>imperative languages and create this dependency graph,

00:28:12.015 --> 00:28:13.855
<v Speaker 1>which is super powerful.

00:28:14.735 --> 00:28:16.654
<v Speaker 1>So then we're gonna define the spec,

00:28:17.455 --> 00:28:18.654
<v Speaker 1>and this would be

00:28:19.535 --> 00:28:21.294
<v Speaker 1>and apps v one

00:28:22.415 --> 00:28:23.215
<v Speaker 1>dot

00:28:23.295 --> 00:28:24.495
<v Speaker 1>deployment

00:28:25.020 --> 00:28:26.700
<v Speaker 1>spec args.

00:28:26.940 --> 00:28:27.900
<v Speaker 1>And this is where,

00:28:28.540 --> 00:28:30.620
<v Speaker 1>the ability to do,

00:28:31.820 --> 00:28:34.220
<v Speaker 1>you know, strongly type languages comes really handy

00:28:34.220 --> 00:28:34.860
<v Speaker 1>because

00:28:35.660 --> 00:28:36.299
<v Speaker 1>you,

00:28:36.540 --> 00:28:38.300
<v Speaker 1>you know, you're getting all of the like,

00:28:38.300 --> 00:28:40.380
<v Speaker 1>it it's really hard. It's surprisingly hard to

00:28:40.380 --> 00:28:41.635
<v Speaker 1>make a mistake here,

00:28:42.275 --> 00:28:43.475
<v Speaker 1>because

00:28:43.555 --> 00:28:45.395
<v Speaker 1>it's telling us what it needs.

00:28:46.915 --> 00:28:48.434
<v Speaker 1>Label select to ask.

00:28:49.315 --> 00:28:50.674
<v Speaker 1>Match labels

00:28:50.835 --> 00:28:51.715
<v Speaker 1>is the

00:28:53.480 --> 00:28:56.840
<v Speaker 1>labels. And you're probably understanding why I set

00:28:56.840 --> 00:28:57.559
<v Speaker 1>up those

00:28:58.280 --> 00:29:00.440
<v Speaker 1>those very the the variable now because, like,

00:29:00.440 --> 00:29:01.960
<v Speaker 1>you can obviously make mistakes there.

00:29:03.400 --> 00:29:05.320
<v Speaker 1>And then we want replicas.

00:29:05.845 --> 00:29:07.445
<v Speaker 1>And this is kinda where

00:29:07.924 --> 00:29:09.924
<v Speaker 1>I like to point out that because we

00:29:09.924 --> 00:29:12.404
<v Speaker 1>ask the people authoring this SDK are the

00:29:12.404 --> 00:29:13.284
<v Speaker 1>experts,

00:29:13.684 --> 00:29:15.524
<v Speaker 1>we want this to be a hypothetical production

00:29:15.524 --> 00:29:17.124
<v Speaker 1>application. And we know that

00:29:17.365 --> 00:29:20.500
<v Speaker 1>a production application is not one replica. Right?

00:29:20.500 --> 00:29:22.740
<v Speaker 1>Like, we know that. We don't wanna make

00:29:22.740 --> 00:29:23.859
<v Speaker 1>this configurable.

00:29:24.340 --> 00:29:25.940
<v Speaker 1>So let's hard code it so that all

00:29:25.940 --> 00:29:28.100
<v Speaker 1>of the people consuming this particular,

00:29:28.500 --> 00:29:29.299
<v Speaker 1>component,

00:29:29.780 --> 00:29:31.940
<v Speaker 1>they're always going to have a highly available

00:29:31.940 --> 00:29:34.465
<v Speaker 1>application. So we'll make replicas of three, and

00:29:34.465 --> 00:29:36.545
<v Speaker 1>we're not gonna let them actually, you know,

00:29:36.545 --> 00:29:38.705
<v Speaker 1>let our consumers modify this,

00:29:39.345 --> 00:29:41.184
<v Speaker 1>if that makes sense. Obviously,

00:29:41.585 --> 00:29:43.185
<v Speaker 1>we are going to be adding arguments to

00:29:43.185 --> 00:29:45.185
<v Speaker 1>this at some point, but, like, I guess

00:29:45.185 --> 00:29:46.465
<v Speaker 1>the point I'm trying to get across here

00:29:46.465 --> 00:29:48.920
<v Speaker 1>is, like, when we're defining these components, the

00:29:48.920 --> 00:29:51.640
<v Speaker 1>the my thought process is that you only

00:29:51.640 --> 00:29:52.200
<v Speaker 1>should

00:29:53.000 --> 00:29:55.720
<v Speaker 1>have input arguments that you actually want your

00:29:55.720 --> 00:29:57.960
<v Speaker 1>users to be able to to modify and

00:29:57.960 --> 00:29:58.679
<v Speaker 1>consume.

00:30:00.679 --> 00:30:02.440
<v Speaker 1>Okay. So we're gonna do a template

00:30:03.405 --> 00:30:05.485
<v Speaker 1>and call v one

00:30:06.685 --> 00:30:08.845
<v Speaker 1>pod template args.

00:30:10.525 --> 00:30:13.804
<v Speaker 1>More metadata because Kubernetes loves its metadata.

00:30:15.165 --> 00:30:17.005
<v Speaker 1>Object meta as

00:30:18.490 --> 00:30:19.210
<v Speaker 1>labels,

00:30:19.370 --> 00:30:20.090
<v Speaker 1>labels,

00:30:21.210 --> 00:30:24.169
<v Speaker 1>and then the spec for the actual pod.

00:30:26.890 --> 00:30:28.090
<v Speaker 1>Pod spec.

00:30:28.250 --> 00:30:28.490
<v Speaker 1>And

00:30:30.295 --> 00:30:31.895
<v Speaker 1>this is where we're actually gonna be defining

00:30:31.895 --> 00:30:32.855
<v Speaker 1>the container.

00:30:34.935 --> 00:30:36.455
<v Speaker 1>And this I think

00:30:36.695 --> 00:30:38.615
<v Speaker 1>is

00:30:38.615 --> 00:30:40.935
<v Speaker 1>let's see if this is correct. Pod spec

00:30:40.935 --> 00:30:42.695
<v Speaker 1>arcs. Yep. Containers.

00:30:43.159 --> 00:30:45.240
<v Speaker 1>That takes an array

00:30:45.240 --> 00:30:46.359
<v Speaker 1>of containers.

00:30:47.640 --> 00:30:50.359
<v Speaker 1>So I'm calling one container.

00:30:51.960 --> 00:30:53.720
<v Speaker 1>And this live share is really hard.

00:30:55.495 --> 00:30:57.414
<v Speaker 1>It's just that it's just that little delay,

00:30:57.655 --> 00:31:00.054
<v Speaker 1>from, like, doing things locally is,

00:31:00.455 --> 00:31:01.734
<v Speaker 1>an interesting

00:31:02.375 --> 00:31:05.095
<v Speaker 1>I think all viewing one container

00:31:05.414 --> 00:31:06.134
<v Speaker 1>array.

00:31:07.414 --> 00:31:08.855
<v Speaker 1>And the reason that we have to do

00:31:08.855 --> 00:31:11.560
<v Speaker 1>these, special types with Pulumi,

00:31:11.720 --> 00:31:14.840
<v Speaker 1>is because these values are like, this is

00:31:14.840 --> 00:31:17.160
<v Speaker 1>not a a standard kind of slice,

00:31:17.480 --> 00:31:21.160
<v Speaker 1>and it's because these values are, like, computed.

00:31:21.160 --> 00:31:23.000
<v Speaker 1>So we don't know them upfront.

00:31:24.635 --> 00:31:27.115
<v Speaker 1>Call v one container args.

00:31:28.315 --> 00:31:30.075
<v Speaker 1>And I'm gonna let you this is your

00:31:30.075 --> 00:31:31.515
<v Speaker 1>show, so I'm gonna let you finish round

00:31:31.515 --> 00:31:32.315
<v Speaker 1>this one out.

00:31:33.035 --> 00:31:34.795
<v Speaker 1>So we're gonna take the name of the

00:31:34.795 --> 00:31:37.835
<v Speaker 1>actual container will be Pulumi dot string.

00:31:40.260 --> 00:31:42.100
<v Speaker 1>And let's hard code this for now,

00:31:42.500 --> 00:31:44.500
<v Speaker 1>the image. So what we'll do is we'll

00:31:44.500 --> 00:31:45.539
<v Speaker 1>hard code the

00:31:46.260 --> 00:31:48.340
<v Speaker 1>we'll make that name. Our main is fine.

00:31:48.340 --> 00:31:50.179
<v Speaker 1>Yeah. NGINX is fine.

00:31:51.060 --> 00:31:51.620
<v Speaker 1>Ports.

00:31:54.695 --> 00:31:56.215
<v Speaker 1>That takes a

00:31:56.695 --> 00:31:59.335
<v Speaker 1>and call v one. Let me just check.

00:31:59.335 --> 00:32:01.655
<v Speaker 0>Yeah. Core one container port and put array.

00:32:01.655 --> 00:32:02.215
<v Speaker 0>So

00:32:03.415 --> 00:32:04.855
<v Speaker 1>And call v one

00:32:05.175 --> 00:32:06.455
<v Speaker 1>container port array.

00:32:09.309 --> 00:32:11.309
<v Speaker 1>And then and call v one

00:32:13.549 --> 00:32:14.429
<v Speaker 1>container

00:32:14.429 --> 00:32:16.029
<v Speaker 1>port axe.

00:32:17.070 --> 00:32:18.749
<v Speaker 1>And container port,

00:32:19.870 --> 00:32:21.470
<v Speaker 1>let's call that 80, I guess.

00:32:23.085 --> 00:32:25.325
<v Speaker 1>Pulumi dot int 80. Yeah.

00:32:28.045 --> 00:32:30.285
<v Speaker 1>Okay. And then there's one. There we go.

00:32:30.285 --> 00:32:32.284
<v Speaker 1>So this is your deployment and your

00:32:33.725 --> 00:32:35.165
<v Speaker 1>and your

00:32:35.260 --> 00:32:36.220
<v Speaker 1>namespace.

00:32:36.299 --> 00:32:38.139
<v Speaker 1>Final thing is the service.

00:32:39.179 --> 00:32:40.059
<v Speaker 1>If you

00:32:42.140 --> 00:32:44.380
<v Speaker 1>hopefully, the the cluster that you set up

00:32:44.380 --> 00:32:46.940
<v Speaker 1>can support low balance of services.

00:32:47.980 --> 00:32:48.940
<v Speaker 1>I assume it can.

00:32:51.394 --> 00:32:52.594
<v Speaker 0>Should be alright.

00:32:53.154 --> 00:32:54.595
<v Speaker 1>We'll give it a we'll give it a

00:32:54.595 --> 00:32:55.234
<v Speaker 1>try.

00:32:55.955 --> 00:32:58.434
<v Speaker 1>So we're gonna define a service,

00:33:00.115 --> 00:33:02.034
<v Speaker 1>and we're not gonna use this. So

00:33:02.755 --> 00:33:04.595
<v Speaker 1>equals

00:33:04.740 --> 00:33:07.299
<v Speaker 1>call v one new service.

00:33:12.180 --> 00:33:14.100
<v Speaker 1>And, of course, that takes a context. It

00:33:14.100 --> 00:33:15.140
<v Speaker 1>takes a name,

00:33:16.020 --> 00:33:18.500
<v Speaker 1>and then it's an call v one service

00:33:18.500 --> 00:33:19.140
<v Speaker 1>r. Oh.

00:33:28.054 --> 00:33:30.455
<v Speaker 1>Metadata, of course. Of course.

00:33:31.335 --> 00:33:33.380
<v Speaker 1>And I think we can just Copy that,

00:33:33.380 --> 00:33:35.140
<v Speaker 0>I think. Yeah. Make our lives a little

00:33:35.140 --> 00:33:36.979
<v Speaker 1>easier and copy this. You know?

00:33:38.019 --> 00:33:39.940
<v Speaker 1>It's just occurring to me that when we

00:33:40.100 --> 00:33:41.220
<v Speaker 1>what we could have done is set up

00:33:41.220 --> 00:33:41.779
<v Speaker 1>a,

00:33:43.539 --> 00:33:45.220
<v Speaker 1>a variable for that, but

00:33:47.455 --> 00:33:48.815
<v Speaker 1>this is go. It likes to be the

00:33:48.815 --> 00:33:50.014
<v Speaker 1>verbose, of course.

00:33:51.215 --> 00:33:52.095
<v Speaker 1>Ports

00:33:53.295 --> 00:33:55.775
<v Speaker 1>and call v one service

00:33:55.775 --> 00:33:57.295
<v Speaker 1>port array.

00:33:58.810 --> 00:34:00.890
<v Speaker 0>Got a a way for Mark. Hey, Mark.

00:34:00.890 --> 00:34:01.850
<v Speaker 0>Thanks for joining.

00:34:03.530 --> 00:34:05.450
<v Speaker 0>And call v one

00:34:06.250 --> 00:34:07.130
<v Speaker 1>service

00:34:08.090 --> 00:34:08.730
<v Speaker 1>part.

00:34:15.105 --> 00:34:15.905
<v Speaker 1>Part

00:34:15.985 --> 00:34:17.825
<v Speaker 1>is Pulumi

00:34:18.625 --> 00:34:21.344
<v Speaker 1>dot int 80. And I always forget this

00:34:21.344 --> 00:34:23.824
<v Speaker 1>is the actual part that the load balancer

00:34:23.824 --> 00:34:27.060
<v Speaker 1>listens on. So target port is Pulumi dot

00:34:27.060 --> 00:34:28.260
<v Speaker 1>n 80 as well.

00:34:30.660 --> 00:34:31.780
<v Speaker 1>I think

00:34:32.420 --> 00:34:35.060
<v Speaker 1>oh, we need a type as well. Yes.

00:34:35.380 --> 00:34:36.820
<v Speaker 0>Right now, that's just gonna be a cluster

00:34:36.820 --> 00:34:38.340
<v Speaker 0>IP service, which is okay.

00:34:39.725 --> 00:34:41.165
<v Speaker 1>Let me not string.

00:34:42.285 --> 00:34:43.965
<v Speaker 1>We can always remove this if that's this

00:34:43.965 --> 00:34:46.125
<v Speaker 1>doesn't work. Because we're just showing how it

00:34:46.125 --> 00:34:47.725
<v Speaker 1>doesn't have to be. It doesn't actually have

00:34:47.725 --> 00:34:49.405
<v Speaker 1>to be a production ready application.

00:34:50.525 --> 00:34:54.059
<v Speaker 1>So this is a cluster API cluster running

00:34:54.059 --> 00:34:57.740
<v Speaker 0>bare metal on Equinix metal running metal LB,

00:34:57.740 --> 00:34:59.579
<v Speaker 0>the Equinix metal CCM.

00:34:59.579 --> 00:35:01.020
<v Speaker 0>I mean, there's a whole bunch of stuff

00:35:01.020 --> 00:35:02.060
<v Speaker 0>here that's configured.

00:35:02.380 --> 00:35:03.740
<v Speaker 0>I'm sure I got it all right and

00:35:03.740 --> 00:35:05.740
<v Speaker 0>the load balancer will work, but we'll see.

00:35:07.255 --> 00:35:09.015
<v Speaker 1>Well, if it's got my LLB, it should

00:35:09.015 --> 00:35:09.815
<v Speaker 1>work. Right?

00:35:10.295 --> 00:35:12.215
<v Speaker 1>And we have a problem here

00:35:12.535 --> 00:35:13.895
<v Speaker 1>and I'm not sure.

00:35:15.255 --> 00:35:16.695
<v Speaker 0>Yeah. It was just a comma. I fixed

00:35:16.695 --> 00:35:17.255
<v Speaker 0>it.

00:35:18.535 --> 00:35:20.215
<v Speaker 1>I'm still getting an error on line one

00:35:20.215 --> 00:35:22.135
<v Speaker 1>or two. Maybe my live share is not

00:35:22.135 --> 00:35:23.849
<v Speaker 1>updating. It makes it alright.

00:35:25.369 --> 00:35:27.130
<v Speaker 1>Okay. Well, we'll see how it works. So

00:35:27.130 --> 00:35:28.970
<v Speaker 1>this is this is defined all of our

00:35:28.970 --> 00:35:32.170
<v Speaker 1>infrastructure. Right? So we could generate this SDK

00:35:32.170 --> 00:35:34.010
<v Speaker 1>and then we could actually consume it, but

00:35:34.010 --> 00:35:37.095
<v Speaker 1>it's not really very usable. Right? Because

00:35:38.615 --> 00:35:40.935
<v Speaker 1>we're obviously gonna wanna deploy more than just

00:35:40.935 --> 00:35:41.735
<v Speaker 1>NGINX.

00:35:41.735 --> 00:35:42.615
<v Speaker 1>Right? So

00:35:43.015 --> 00:35:44.855
<v Speaker 1>here is where we start to kind of

00:35:44.855 --> 00:35:46.535
<v Speaker 1>set up some of the parts that allow

00:35:46.535 --> 00:35:47.015
<v Speaker 1>us to,

00:35:48.390 --> 00:35:50.390
<v Speaker 1>you know, allow us to make it configurable.

00:35:50.390 --> 00:35:52.390
<v Speaker 1>So we're gonna scroll all the way back

00:35:52.390 --> 00:35:52.950
<v Speaker 1>up

00:35:53.269 --> 00:35:55.349
<v Speaker 1>to our production app arcs.

00:35:55.349 --> 00:35:57.030
<v Speaker 1>Sorry. Our deployment arcs.

00:35:57.349 --> 00:35:59.190
<v Speaker 0>Yep. And this is where we're gonna actually

00:35:59.190 --> 00:36:01.109
<v Speaker 1>start to add the the two things that

00:36:01.109 --> 00:36:02.230
<v Speaker 1>I can think of that we need to

00:36:02.230 --> 00:36:04.069
<v Speaker 1>allow to be configurable is the image.

00:36:04.695 --> 00:36:06.455
<v Speaker 1>So what part of the struct will create

00:36:06.455 --> 00:36:07.255
<v Speaker 1>an image,

00:36:07.735 --> 00:36:09.575
<v Speaker 1>and we'll do and this is a type

00:36:09.575 --> 00:36:11.575
<v Speaker 1>of Pulumi dot string input.

00:36:13.575 --> 00:36:15.335
<v Speaker 1>And I think your colon has vanished at

00:36:15.335 --> 00:36:15.815
<v Speaker 1>the end there.

00:36:16.770 --> 00:36:18.290
<v Speaker 1>And then we also need to put a

00:36:18.290 --> 00:36:19.890
<v Speaker 1>a type on this. So the way this

00:36:19.890 --> 00:36:21.010
<v Speaker 1>looks is,

00:36:22.370 --> 00:36:23.970
<v Speaker 1>and I'll fill this in so that we

00:36:23.970 --> 00:36:24.450
<v Speaker 1>can,

00:36:25.490 --> 00:36:26.930
<v Speaker 1>so this is

00:36:27.730 --> 00:36:28.850
<v Speaker 1>oops. Oh, man.

00:36:30.015 --> 00:36:32.335
<v Speaker 1>Versus code is giving me a nightmare.

00:36:32.734 --> 00:36:35.135
<v Speaker 1>So what we need to do is add

00:36:35.135 --> 00:36:36.494
<v Speaker 1>very similar to what we would do with

00:36:36.494 --> 00:36:38.255
<v Speaker 1>JSON. We need to do

00:36:38.575 --> 00:36:39.855
<v Speaker 1>something like

00:36:40.654 --> 00:36:43.295
<v Speaker 1>this. So that just will that means that

00:36:43.295 --> 00:36:45.950
<v Speaker 1>when we read the the schema in, this

00:36:45.950 --> 00:36:47.470
<v Speaker 1>is the value that it's gonna read from

00:36:47.470 --> 00:36:49.150
<v Speaker 1>that schema dot JSON. So we're gonna need

00:36:49.150 --> 00:36:50.910
<v Speaker 1>to update that in a few moments.

00:36:51.869 --> 00:36:53.549
<v Speaker 1>And then the other argument that we're gonna

00:36:53.549 --> 00:36:56.270
<v Speaker 1>want is the port. So let's

00:36:57.150 --> 00:36:59.405
<v Speaker 1>we'll make configurable to our users.

00:37:00.525 --> 00:37:02.845
<v Speaker 1>Pulumi dot int input.

00:37:03.005 --> 00:37:04.685
<v Speaker 1>Yep. Pulumi.

00:37:06.445 --> 00:37:07.405
<v Speaker 1>There we go.

00:37:07.885 --> 00:37:09.325
<v Speaker 1>And so now we can actually

00:37:10.140 --> 00:37:13.020
<v Speaker 1>pass this stuff to our deployment as well.

00:37:13.099 --> 00:37:15.180
<v Speaker 1>So if we scroll back to our deployment

00:37:15.980 --> 00:37:18.140
<v Speaker 0>I'm worried that go format hasn't kicked in.

00:37:18.140 --> 00:37:20.059
<v Speaker 0>That normally means that we have an error.

00:37:22.445 --> 00:37:23.244
<v Speaker 0>Yeah. We've got

00:37:25.725 --> 00:37:27.325
<v Speaker 0>I know we asked a break point.

00:37:27.805 --> 00:37:29.885
<v Speaker 0>Do have a break point? It'll I did

00:37:29.885 --> 00:37:31.165
<v Speaker 1>not add a break point. I don't even

00:37:31.165 --> 00:37:32.125
<v Speaker 1>know what they are.

00:37:32.765 --> 00:37:34.925
<v Speaker 1>Right. Okay. I'll assume it's fine. I don't

00:37:34.925 --> 00:37:36.365
<v Speaker 0>see any any When

00:37:36.685 --> 00:37:38.125
<v Speaker 1>this builds, it'll tell us what it'll tell

00:37:38.125 --> 00:37:39.300
<v Speaker 0>us what the problem is. Oh, no. Now

00:37:39.300 --> 00:37:41.700
<v Speaker 0>I've got an error on that line. Okay.

00:37:42.740 --> 00:37:44.420
<v Speaker 0>I didn't have that error there. So we're

00:37:44.420 --> 00:37:46.020
<v Speaker 0>missing a comma somewhere.

00:37:46.740 --> 00:37:49.860
<v Speaker 1>We're missing the closed bracket, I think. Alright.

00:37:49.860 --> 00:37:50.260
<v Speaker 0>There we go.

00:37:51.215 --> 00:37:53.215
<v Speaker 1>Hang on. Let me Did it format the

00:37:53.215 --> 00:37:55.135
<v Speaker 0>top? I did. Okay. We're good.

00:37:55.695 --> 00:37:57.695
<v Speaker 1>We're good. See, look, this is x. This

00:37:57.695 --> 00:38:00.095
<v Speaker 1>is what this is programming at work.

00:38:00.735 --> 00:38:02.575
<v Speaker 0>It's weird that I justify whether my code

00:38:02.575 --> 00:38:04.655
<v Speaker 0>is gonna work or not, whether the format

00:38:04.655 --> 00:38:07.100
<v Speaker 0>kicks in or not. The format doesn't kick

00:38:07.100 --> 00:38:08.940
<v Speaker 0>kick in, I know that I've broken something.

00:38:11.660 --> 00:38:14.380
<v Speaker 1>So now we're actually gonna pass those arguments

00:38:14.380 --> 00:38:15.340
<v Speaker 1>to our

00:38:16.220 --> 00:38:18.060
<v Speaker 1>to our deployment. So if you scroll back

00:38:18.060 --> 00:38:19.465
<v Speaker 1>down to

00:38:19.625 --> 00:38:22.105
<v Speaker 1>where we defined it defined NGINX,

00:38:22.425 --> 00:38:24.105
<v Speaker 1>we can change that image

00:38:24.345 --> 00:38:26.265
<v Speaker 1>to args dot

00:38:28.185 --> 00:38:28.905
<v Speaker 1>image.

00:38:29.705 --> 00:38:32.025
<v Speaker 1>And then the container port here on 79,

00:38:32.025 --> 00:38:33.580
<v Speaker 1>we can do args dot port.

00:38:35.980 --> 00:38:37.180
<v Speaker 1>Easy. So

00:38:37.980 --> 00:38:40.140
<v Speaker 1>now we need to update the schema so

00:38:40.140 --> 00:38:42.380
<v Speaker 1>that we can actually tell Pulumi

00:38:42.380 --> 00:38:44.300
<v Speaker 1>that these are required when we generate the

00:38:44.300 --> 00:38:45.980
<v Speaker 1>SDK. So if we go back to our

00:38:45.980 --> 00:38:46.700
<v Speaker 1>schema

00:38:48.235 --> 00:38:51.035
<v Speaker 0>Oh, yep. That that's right. The JSON.

00:38:51.595 --> 00:38:54.075
<v Speaker 1>Yeah. So this is where these input properties

00:38:54.075 --> 00:38:54.795
<v Speaker 1>come in.

00:38:55.355 --> 00:38:57.355
<v Speaker 1>And so what this needs to look like

00:38:57.515 --> 00:38:58.475
<v Speaker 1>and I need to actually look at a

00:38:58.475 --> 00:39:00.555
<v Speaker 1>reference example here because we're still I'm just

00:39:00.555 --> 00:39:01.275
<v Speaker 1>making Yes.

00:39:02.280 --> 00:39:04.760
<v Speaker 1>No. No. You're you're basically right. But we

00:39:04.840 --> 00:39:06.200
<v Speaker 1>they need to be lower case because that's

00:39:06.200 --> 00:39:07.480
<v Speaker 1>what's on the actual thing.

00:39:08.040 --> 00:39:10.520
<v Speaker 1>And then here is where we define a

00:39:10.520 --> 00:39:12.920
<v Speaker 1>map of properties. So we're gonna do image.

00:39:14.295 --> 00:39:15.895
<v Speaker 1>We need to define what the type is

00:39:15.895 --> 00:39:18.615
<v Speaker 1>because, obviously, we generate strongly typed libraries. So

00:39:18.615 --> 00:39:19.735
<v Speaker 1>we do string

00:39:19.815 --> 00:39:21.575
<v Speaker 1>like so. And then we get to add

00:39:21.575 --> 00:39:23.655
<v Speaker 1>a description for the type hints.

00:39:23.655 --> 00:39:25.255
<v Speaker 1>And, hopefully, you can see, like, this is

00:39:25.255 --> 00:39:27.575
<v Speaker 1>this is what are gonna allow our users

00:39:27.575 --> 00:39:29.700
<v Speaker 1>to get a little bit more information when

00:39:29.700 --> 00:39:31.620
<v Speaker 1>they're using this. So the

00:39:32.420 --> 00:39:34.500
<v Speaker 1>the image to deploy

00:39:34.500 --> 00:39:36.420
<v Speaker 1>in your production

00:39:36.500 --> 00:39:37.300
<v Speaker 1>ready

00:39:37.540 --> 00:39:38.020
<v Speaker 1>application,

00:39:42.115 --> 00:39:43.954
<v Speaker 1>And it's JSON, so it doesn't want a

00:39:43.954 --> 00:39:45.875
<v Speaker 1>comma there. And then port

00:39:47.315 --> 00:39:48.994
<v Speaker 1>type is

00:39:50.674 --> 00:39:51.474
<v Speaker 1>integer

00:39:52.930 --> 00:39:54.050
<v Speaker 1>description.

00:39:56.290 --> 00:39:57.970
<v Speaker 1>The part your

00:39:58.370 --> 00:39:59.410
<v Speaker 1>application

00:39:59.970 --> 00:40:00.850
<v Speaker 1>listens

00:40:00.850 --> 00:40:02.770
<v Speaker 1>on in your

00:40:02.850 --> 00:40:03.490
<v Speaker 1>Docker.

00:40:05.005 --> 00:40:07.005
<v Speaker 1>It's not technically Docker anymore, so we'll just

00:40:07.005 --> 00:40:10.125
<v Speaker 1>go, in your image. Container image. Yeah.

00:40:11.005 --> 00:40:12.765
<v Speaker 1>Container image. Yeah. That makes sense.

00:40:13.405 --> 00:40:14.765
<v Speaker 1>So these are the things that are gonna

00:40:14.765 --> 00:40:17.660
<v Speaker 1>define what our input types are. This properties

00:40:17.660 --> 00:40:19.580
<v Speaker 1>thing here, we're not gonna use this today,

00:40:19.580 --> 00:40:20.700
<v Speaker 1>but this properties

00:40:20.860 --> 00:40:22.540
<v Speaker 1>is the thing that will allow you to

00:40:22.540 --> 00:40:23.020
<v Speaker 1>say

00:40:23.420 --> 00:40:25.100
<v Speaker 1>if you've used Pulumi before, like, all the

00:40:25.100 --> 00:40:26.860
<v Speaker 1>outputs that we have, like, you can also

00:40:26.860 --> 00:40:28.060
<v Speaker 1>define outputs. So

00:40:28.745 --> 00:40:31.145
<v Speaker 1>if we wanted to, we could say, like,

00:40:31.145 --> 00:40:33.785
<v Speaker 1>return the load balancer that has been created

00:40:33.785 --> 00:40:35.625
<v Speaker 1>that you might wanna use in different things.

00:40:35.625 --> 00:40:37.465
<v Speaker 1>We're not gonna do that, in this particular

00:40:37.465 --> 00:40:38.745
<v Speaker 1>case because it's supposed to be a relatively

00:40:38.745 --> 00:40:39.785
<v Speaker 1>simple example.

00:40:40.505 --> 00:40:43.350
<v Speaker 1>So I think I think that's everything,

00:40:43.430 --> 00:40:44.869
<v Speaker 1>but we'll find out when we start to

00:40:44.869 --> 00:40:47.990
<v Speaker 1>do some of the fun generation stuff. So

00:40:47.990 --> 00:40:49.109
<v Speaker 1>if you go back to your terminal

00:40:49.990 --> 00:40:52.069
<v Speaker 0>Can can we just summarize what we've what

00:40:52.069 --> 00:40:53.589
<v Speaker 0>we've done there? I'll summarize it to you

00:40:53.589 --> 00:40:54.470
<v Speaker 0>and you can tell me if I got

00:40:54.470 --> 00:40:55.109
<v Speaker 0>anything incorrect.

00:40:55.674 --> 00:40:56.555
<v Speaker 1>Sounds good.

00:40:56.795 --> 00:40:57.994
<v Speaker 0>Alright. So

00:40:58.795 --> 00:41:01.755
<v Speaker 0>we are using the Pulumi component provider GoBoilerPlate

00:41:01.755 --> 00:41:03.994
<v Speaker 0>repository. This can be used as a template

00:41:03.994 --> 00:41:04.555
<v Speaker 0>to

00:41:05.115 --> 00:41:07.994
<v Speaker 0>provide the base for any multi language Pulumi

00:41:07.994 --> 00:41:08.635
<v Speaker 0>component.

00:41:09.590 --> 00:41:11.910
<v Speaker 0>Yes. What we did there was just really

00:41:11.910 --> 00:41:14.470
<v Speaker 0>go through and do some rudimentary changes. We

00:41:14.470 --> 00:41:15.990
<v Speaker 0>were modifying the x y z, which is

00:41:15.990 --> 00:41:17.990
<v Speaker 0>the example name for the component to be

00:41:17.990 --> 00:41:20.390
<v Speaker 0>our production app, and then we modified the

00:41:20.390 --> 00:41:22.070
<v Speaker 0>static page, which is just one of the

00:41:22.070 --> 00:41:25.175
<v Speaker 0>resources that the boilerplate or provider starts with,

00:41:25.175 --> 00:41:27.255
<v Speaker 0>and we've modified that to consume the Kubernetes

00:41:27.255 --> 00:41:29.015
<v Speaker 0>API provider deployment

00:41:29.095 --> 00:41:30.215
<v Speaker 0>and a service.

00:41:30.615 --> 00:41:33.415
<v Speaker 0>And we've exposed through this little JSON schema

00:41:33.415 --> 00:41:35.255
<v Speaker 0>style document, the ability to

00:41:35.575 --> 00:41:38.135
<v Speaker 0>understand what input properties there are as well

00:41:38.135 --> 00:41:39.415
<v Speaker 0>as which ones are required,

00:41:39.830 --> 00:41:41.510
<v Speaker 0>And then we've just done a little bit

00:41:41.510 --> 00:41:44.070
<v Speaker 0>of glue inside of the the Go code

00:41:44.230 --> 00:41:45.910
<v Speaker 0>to actually create those resources.

00:41:46.550 --> 00:41:48.790
<v Speaker 1>Yes. That's exactly what we've done. That's exactly

00:41:48.790 --> 00:41:50.950
<v Speaker 1>what we've done. And the process is exactly

00:41:50.950 --> 00:41:52.070
<v Speaker 1>the same for

00:41:52.230 --> 00:41:53.910
<v Speaker 1>all of the different languages. If you wanna

00:41:53.910 --> 00:41:54.950
<v Speaker 1>write one of these in Python,

00:41:55.595 --> 00:41:57.434
<v Speaker 1>you're basically gonna do the same thing. You're

00:41:57.434 --> 00:41:59.835
<v Speaker 1>gonna define a schema that looks that the

00:41:59.994 --> 00:42:01.434
<v Speaker 1>you know, if you are familiar with, like,

00:42:01.434 --> 00:42:03.595
<v Speaker 1>TypeScript and you basically, I think of them

00:42:03.595 --> 00:42:04.555
<v Speaker 1>as interfaces.

00:42:04.795 --> 00:42:06.954
<v Speaker 1>So this schema is the interface that, like,

00:42:06.954 --> 00:42:09.480
<v Speaker 1>the the consumable interface for all of the

00:42:09.480 --> 00:42:11.720
<v Speaker 1>different, like the shape of this thing that

00:42:11.720 --> 00:42:13.240
<v Speaker 1>we're gonna do to find.

00:42:15.240 --> 00:42:16.760
<v Speaker 0>As our boiler plate think it's t s.

00:42:17.320 --> 00:42:19.640
<v Speaker 1>It's t s not not TypeScript.

00:42:20.040 --> 00:42:21.755
<v Speaker 0>Yeah. So is there a boiler plate for

00:42:21.755 --> 00:42:23.755
<v Speaker 0>all the supported languages in Pulumi then that

00:42:23.755 --> 00:42:25.115
<v Speaker 0>people can just go and use as a

00:42:25.115 --> 00:42:26.795
<v Speaker 0>template and get started with their language of

00:42:26.795 --> 00:42:28.235
<v Speaker 0>choice. Right? Okay. I think the only one

00:42:28.235 --> 00:42:29.755
<v Speaker 1>missing right now is .net. I think we've

00:42:29.755 --> 00:42:31.835
<v Speaker 1>got that that on the way. But Python

00:42:31.835 --> 00:42:33.275
<v Speaker 1>p we got a p y. And if

00:42:33.275 --> 00:42:34.955
<v Speaker 1>you go and look at the provider in

00:42:34.955 --> 00:42:35.915
<v Speaker 1>the TypeScript example,

00:42:38.530 --> 00:42:41.090
<v Speaker 1>you'll see that, like, inside here,

00:42:41.809 --> 00:42:43.650
<v Speaker 1>this is like the go binary. So if

00:42:43.650 --> 00:42:44.770
<v Speaker 1>you go into command

00:42:45.329 --> 00:42:47.410
<v Speaker 1>we're still using the same go binaries to

00:42:47.410 --> 00:42:48.930
<v Speaker 1>generate all of this stuff, but if you

00:42:48.930 --> 00:42:50.530
<v Speaker 1>come back up to the root level.

00:42:53.585 --> 00:42:54.305
<v Speaker 0>Yep.

00:42:56.145 --> 00:42:59.424
<v Speaker 1>I'm actually, like, completely blanking on where the

00:42:59.424 --> 00:43:01.345
<v Speaker 1>actual TypeScript code is here. Let me just

00:43:01.345 --> 00:43:02.065
<v Speaker 1>have a look.

00:43:04.145 --> 00:43:05.904
<v Speaker 1>I looked at the Python one before we

00:43:05.904 --> 00:43:08.440
<v Speaker 1>started. Oh, there's TypeScript in here. It's under

00:43:08.440 --> 00:43:11.000
<v Speaker 0>provider command resource. And then it was There

00:43:11.000 --> 00:43:13.000
<v Speaker 1>we go. Yeah. We got some TypeScript here.

00:43:14.840 --> 00:43:16.760
<v Speaker 1>So you should see setting it's doing very

00:43:16.760 --> 00:43:19.160
<v Speaker 1>similar things. It's gonna read the the bunch

00:43:19.160 --> 00:43:21.555
<v Speaker 1>of different stuff and then the actual static

00:43:21.555 --> 00:43:22.915
<v Speaker 1>page is defined there.

00:43:23.474 --> 00:43:26.115
<v Speaker 1>And so again, like, the the only caveat

00:43:26.115 --> 00:43:27.635
<v Speaker 1>with this is that

00:43:28.435 --> 00:43:31.155
<v Speaker 1>your downstream users will still need to have

00:43:31.155 --> 00:43:32.675
<v Speaker 1>TypeScript on node installed.

00:43:34.200 --> 00:43:36.040
<v Speaker 1>So as part of your as part of

00:43:36.040 --> 00:43:38.680
<v Speaker 1>your we are looking at some examples like

00:43:38.680 --> 00:43:41.320
<v Speaker 1>you can embed these TypeScript files into

00:43:41.800 --> 00:43:43.320
<v Speaker 1>you know, you can bundle these up as

00:43:43.320 --> 00:43:45.079
<v Speaker 1>TypeScript binaries and all that kind of stuff.

00:43:45.079 --> 00:43:46.599
<v Speaker 1>We're looking at different ways to make that

00:43:46.599 --> 00:43:46.839
<v Speaker 1>easier.

00:43:47.875 --> 00:43:50.275
<v Speaker 1>But it's essentially your downstream users because this

00:43:50.275 --> 00:43:52.515
<v Speaker 1>is obviously gonna invoke this Pulumi program. You'll

00:43:52.515 --> 00:43:53.955
<v Speaker 1>still need to have TypeScript installed.

00:43:54.195 --> 00:43:55.555
<v Speaker 0>Yeah. I wonder if you could just embed

00:43:55.555 --> 00:43:57.875
<v Speaker 0>like a node runtime. I think there is

00:43:57.875 --> 00:44:00.275
<v Speaker 0>a couple of go versions into into binary.

00:44:00.275 --> 00:44:01.395
<v Speaker 0>Of course, the size of that may be

00:44:01.395 --> 00:44:03.220
<v Speaker 0>a little bit ridiculous at that point. We

00:44:03.220 --> 00:44:05.060
<v Speaker 1>have our hackathon coming up. I'm gonna come

00:44:05.060 --> 00:44:07.220
<v Speaker 1>up with some wild and crazy ideas for

00:44:07.220 --> 00:44:08.740
<v Speaker 1>things we can do here, hopefully.

00:44:08.980 --> 00:44:10.500
<v Speaker 1>And then there's the Python one as well.

00:44:10.500 --> 00:44:11.940
<v Speaker 1>So if you do p y dash boiler

00:44:12.260 --> 00:44:14.020
<v Speaker 1>p y dash boilerplate.

00:44:16.420 --> 00:44:17.620
<v Speaker 1>Again, in provider.

00:44:20.435 --> 00:44:22.595
<v Speaker 0>I don't think I've ever looked at a

00:44:22.915 --> 00:44:23.875
<v Speaker 0>hyphen.

00:44:25.715 --> 00:44:27.315
<v Speaker 1>So the actual code is in x y

00:44:27.315 --> 00:44:29.555
<v Speaker 1>v provider at the top there. Alright.

00:44:31.320 --> 00:44:33.320
<v Speaker 1>And then static page at the bottom. I

00:44:36.200 --> 00:44:38.360
<v Speaker 1>have strong opinions about Python, which I won't

00:44:38.360 --> 00:44:40.840
<v Speaker 1>share here because I may get I may

00:44:40.840 --> 00:44:41.400
<v Speaker 1>get

00:44:41.640 --> 00:44:43.080
<v Speaker 1>piled on on Twitter.

00:44:43.400 --> 00:44:45.080
<v Speaker 1>But, yeah, like, if you wanna write it

00:44:45.080 --> 00:44:47.444
<v Speaker 1>in Python, then go nuts. Well, that that's

00:44:47.444 --> 00:44:49.285
<v Speaker 0>the joy, right, of of why we wanna

00:44:49.285 --> 00:44:51.365
<v Speaker 0>use Pulumi over any other tools like this.

00:44:51.365 --> 00:44:52.484
<v Speaker 0>Is that flexibility

00:44:52.484 --> 00:44:54.724
<v Speaker 0>to stick to the languages, run times, and

00:44:54.724 --> 00:44:56.724
<v Speaker 0>tool chains that I'm already familiar with? Like,

00:44:56.724 --> 00:44:58.244
<v Speaker 0>I don't have to go and learn anything

00:44:58.244 --> 00:45:00.244
<v Speaker 0>new. So, you know, whatever your poison is,

00:45:00.244 --> 00:45:00.884
<v Speaker 0>go for it.

00:45:01.690 --> 00:45:04.330
<v Speaker 1>My my my perspective as well is the,

00:45:04.730 --> 00:45:05.290
<v Speaker 1>you know,

00:45:06.010 --> 00:45:08.250
<v Speaker 1>application developers especially like they're

00:45:08.970 --> 00:45:10.810
<v Speaker 1>a lot of cases, they're they're kinda getting

00:45:10.810 --> 00:45:13.690
<v Speaker 1>exposed to cloud environments and cloud engineering environments.

00:45:14.065 --> 00:45:16.225
<v Speaker 1>That's already super confusing. And then when you

00:45:16.225 --> 00:45:18.385
<v Speaker 1>add a new kind of like declarative YAML

00:45:18.385 --> 00:45:19.905
<v Speaker 1>document on top of it that they might

00:45:19.905 --> 00:45:20.785
<v Speaker 1>not understand,

00:45:21.425 --> 00:45:23.265
<v Speaker 1>you know, it's it's a massive learning curve.

00:45:23.265 --> 00:45:24.145
<v Speaker 1>Like imagine

00:45:24.145 --> 00:45:24.865
<v Speaker 1>somebody

00:45:25.025 --> 00:45:27.105
<v Speaker 1>especially I always kind of compare it to

00:45:27.105 --> 00:45:29.660
<v Speaker 1>as infrastructure engineer. Imagine if somebody told me

00:45:29.660 --> 00:45:31.180
<v Speaker 1>that I had to learn front end and

00:45:31.180 --> 00:45:33.100
<v Speaker 1>back end at the same time. Like,

00:45:33.339 --> 00:45:35.020
<v Speaker 1>you're just throwing things at me that I

00:45:35.020 --> 00:45:36.140
<v Speaker 1>don't really understand.

00:45:36.780 --> 00:45:38.380
<v Speaker 1>So it's it's a it's like

00:45:39.180 --> 00:45:41.585
<v Speaker 1>my perspective has always been using these familiar

00:45:41.585 --> 00:45:44.305
<v Speaker 1>languages is a really nice way to kind

00:45:44.305 --> 00:45:47.505
<v Speaker 1>of gradually introduce people to new concepts, but

00:45:47.505 --> 00:45:49.505
<v Speaker 1>using something that they already know. It's it's

00:45:49.505 --> 00:45:51.025
<v Speaker 1>a much better way of learning in my

00:45:51.025 --> 00:45:52.545
<v Speaker 1>experience. Oh, yeah. Definitely.

00:45:53.790 --> 00:45:55.390
<v Speaker 0>Alrighty. So I think we should generate this.

00:45:55.390 --> 00:45:56.910
<v Speaker 1>Now let's generate this. So let's go to

00:45:56.910 --> 00:45:57.790
<v Speaker 1>a terminal

00:45:59.070 --> 00:46:01.150
<v Speaker 1>and we should be able to do and

00:46:01.150 --> 00:46:02.910
<v Speaker 1>I need to remember the make it's actually

00:46:02.910 --> 00:46:04.750
<v Speaker 1>we do we use the make file. Yeah.

00:46:04.750 --> 00:46:06.430
<v Speaker 1>So we need to first run make generate,

00:46:08.474 --> 00:46:10.394
<v Speaker 1>which will generate all of our SDKs and

00:46:10.394 --> 00:46:11.755
<v Speaker 1>it's also gonna tell us if there's any

00:46:11.755 --> 00:46:12.395
<v Speaker 1>problems.

00:46:12.795 --> 00:46:14.315
<v Speaker 0>Can I just can I just go for

00:46:14.315 --> 00:46:16.395
<v Speaker 0>it? Let's go for it. Yeah.

00:46:17.515 --> 00:46:18.955
<v Speaker 0>I'm in the wrong directory.

00:46:19.194 --> 00:46:20.635
<v Speaker 1>You're you're in the wrong directory.

00:46:21.609 --> 00:46:23.530
<v Speaker 0>Alright. No. I'm not feeling as brief anymore,

00:46:23.530 --> 00:46:24.730
<v Speaker 0>I'm just gonna do generate.

00:46:25.609 --> 00:46:27.450
<v Speaker 0>I've lost my confidence. This

00:46:27.450 --> 00:46:29.210
<v Speaker 1>is kinda this will show you what's actually

00:46:29.210 --> 00:46:32.010
<v Speaker 1>happening here. We're running go run to actually

00:46:32.010 --> 00:46:34.890
<v Speaker 1>generate the we're passing the schema in,

00:46:35.515 --> 00:46:37.355
<v Speaker 1>and it's allowing us to generate the Go

00:46:37.355 --> 00:46:39.515
<v Speaker 1>SDK, and it's gonna generate the TypeScript test

00:46:39.515 --> 00:46:40.795
<v Speaker 1>again, all that kind of stuff.

00:46:41.355 --> 00:46:43.115
<v Speaker 1>It's taking longer than I expected.

00:46:43.435 --> 00:46:44.795
<v Speaker 1>Excellent. We have an error. This is what

00:46:44.795 --> 00:46:46.315
<v Speaker 1>we love to see. So let's have a

00:46:46.315 --> 00:46:46.875
<v Speaker 1>look

00:46:47.515 --> 00:46:49.595
<v Speaker 1>at what we've done wrong here.

00:46:51.250 --> 00:46:53.330
<v Speaker 0>An assertion has failed.

00:46:54.450 --> 00:46:56.210
<v Speaker 1>Oh, this is a lovely error.

00:46:56.609 --> 00:46:58.849
<v Speaker 1>We've obviously made a mistake. So if if,

00:46:59.490 --> 00:47:01.970
<v Speaker 1>it it's happening in the SDK

00:47:01.970 --> 00:47:02.770
<v Speaker 1>portion.

00:47:03.010 --> 00:47:04.994
<v Speaker 1>I'm just gonna look the code real quick.

00:47:05.795 --> 00:47:07.315
<v Speaker 0>I'm sorry. You can say I got it

00:47:07.315 --> 00:47:08.994
<v Speaker 0>wrong. I won't be offended.

00:47:15.234 --> 00:47:17.155
<v Speaker 1>There must be a problem in the

00:47:19.240 --> 00:47:20.440
<v Speaker 1>schema itself.

00:47:21.079 --> 00:47:22.920
<v Speaker 1>We have an error here. Yeah. Haven't updated

00:47:22.920 --> 00:47:25.480
<v Speaker 0>any of this, actually. We haven't updated anything

00:47:25.480 --> 00:47:26.680
<v Speaker 0>below here.

00:47:28.119 --> 00:47:29.640
<v Speaker 0>And in fact Did we forget some

00:47:31.319 --> 00:47:33.015
<v Speaker 1>do we forget something? Let me look at

00:47:33.015 --> 00:47:35.015
<v Speaker 1>my example that I wrote of three weeks

00:47:35.015 --> 00:47:35.575
<v Speaker 1>ago.

00:47:37.015 --> 00:47:40.215
<v Speaker 0>And Paul Stack says the token is incorrect.

00:47:41.415 --> 00:47:42.935
<v Speaker 1>The token is incorrect.

00:47:44.680 --> 00:47:45.880
<v Speaker 1>Gonna give us a bit more of a

00:47:45.880 --> 00:47:47.480
<v Speaker 1>bit more help here, Paul.

00:47:48.440 --> 00:47:49.800
<v Speaker 1>I'm half tempted to just bring him in

00:47:49.800 --> 00:47:50.920
<v Speaker 1>here at this point.

00:47:51.880 --> 00:47:54.600
<v Speaker 0>Yeah. Come on, Paul. Show us what's wrong.

00:47:55.480 --> 00:47:56.520
<v Speaker 0>Which token?

00:47:57.375 --> 00:47:59.295
<v Speaker 0>Does he see that from the error message?

00:47:59.855 --> 00:48:00.815
<v Speaker 0>Let's see.

00:48:05.775 --> 00:48:07.135
<v Speaker 0>We got main dot go.

00:48:10.050 --> 00:48:12.370
<v Speaker 1>The token is incorrect. I'm gonna

00:48:14.690 --> 00:48:16.610
<v Speaker 0>Maybe something in the schema. I think the

00:48:16.610 --> 00:48:18.370
<v Speaker 0>code looks alright and it's not

00:48:18.930 --> 00:48:20.450
<v Speaker 1>I think it was something in the schema

00:48:20.450 --> 00:48:22.770
<v Speaker 1>as well. Yeah. Is it did we get

00:48:22.770 --> 00:48:23.810
<v Speaker 1>the token wrong

00:48:24.495 --> 00:48:25.695
<v Speaker 1>production app index?

00:48:31.855 --> 00:48:34.895
<v Speaker 0>Paul asks, where is our declaration of the

00:48:34.895 --> 00:48:35.295
<v Speaker 0>type?

00:48:37.500 --> 00:48:39.100
<v Speaker 0>Are you being cryptic

00:48:39.100 --> 00:48:41.740
<v Speaker 0>on on purpose? I I we both know

00:48:41.740 --> 00:48:43.100
<v Speaker 1>Paul well enough to know that he probably

00:48:43.100 --> 00:48:43.660
<v Speaker 1>is.

00:48:47.580 --> 00:48:49.820
<v Speaker 0>Okay. So where is our declaration of the

00:48:49.820 --> 00:48:50.815
<v Speaker 0>type? Declaration of the type? Alright. Let's turn

00:48:50.815 --> 00:48:53.135
<v Speaker 0>this into crystal me style deployment.

00:48:55.455 --> 00:48:56.815
<v Speaker 0>Start the fence,

00:48:56.895 --> 00:48:57.535
<v Speaker 0>please.

00:49:03.055 --> 00:49:05.215
<v Speaker 0>This is our

00:49:04.560 --> 00:49:06.480
<v Speaker 0>declaration of what a deployment is. Are we

00:49:06.480 --> 00:49:08.080
<v Speaker 0>missing anything in a struct?

00:49:09.680 --> 00:49:12.640
<v Speaker 1>Nope. That so that struct will output the

00:49:13.520 --> 00:49:15.520
<v Speaker 1>that that would have usually that would have

00:49:15.520 --> 00:49:16.480
<v Speaker 1>the outputs.

00:49:17.520 --> 00:49:19.840
<v Speaker 1>So, no, that that should be absolutely fine.

00:49:21.625 --> 00:49:24.105
<v Speaker 0>Okay. We're getting some more hints from our

00:49:24.184 --> 00:49:25.944
<v Speaker 0>a good friend here who suggest that we

00:49:25.944 --> 00:49:28.105
<v Speaker 0>open schema dot JSON. We take a look

00:49:28.105 --> 00:49:29.224
<v Speaker 0>at the resources.

00:49:29.305 --> 00:49:30.424
<v Speaker 0>What is the first item?

00:49:34.570 --> 00:49:35.370
<v Speaker 0>It is

00:49:35.770 --> 00:49:38.010
<v Speaker 0>what I expect it to be, to be

00:49:38.010 --> 00:49:38.650
<v Speaker 0>fair.

00:49:40.490 --> 00:49:43.210
<v Speaker 1>Yeah. Is component true, input properties.

00:49:44.890 --> 00:49:47.130
<v Speaker 1>I actually have a working version of this

00:49:47.130 --> 00:49:48.995
<v Speaker 1>as well and it looks exactly the same.

00:49:48.995 --> 00:49:50.275
<v Speaker 1>So we've missed something.

00:49:50.435 --> 00:49:50.835
<v Speaker 1>Can

00:49:55.715 --> 00:49:57.635
<v Speaker 1>you rerun the make again? I wanna take

00:49:57.635 --> 00:49:58.835
<v Speaker 1>a look another look at the error.

00:50:01.570 --> 00:50:03.330
<v Speaker 0>Yeah. I'll send Paul a link. He can

00:50:03.330 --> 00:50:04.849
<v Speaker 0>just jump in for five minutes if he

00:50:04.849 --> 00:50:05.490
<v Speaker 0>wants.

00:50:06.609 --> 00:50:08.370
<v Speaker 1>So this is in command

00:50:13.650 --> 00:50:15.570
<v Speaker 1>production app provider.

00:50:16.505 --> 00:50:18.185
<v Speaker 0>Alright.

00:50:21.145 --> 00:50:21.945
<v Speaker 1>Command.

00:50:21.945 --> 00:50:23.465
<v Speaker 1>I love it when we get just random

00:50:23.465 --> 00:50:24.745
<v Speaker 1>random extra guests.

00:50:28.610 --> 00:50:30.610
<v Speaker 0>Well, until he learns how to articulate his

00:50:30.610 --> 00:50:32.450
<v Speaker 0>thoughts properly through the chat system in order

00:50:32.450 --> 00:50:34.130
<v Speaker 0>for the other that we are suffering in

00:50:34.130 --> 00:50:35.250
<v Speaker 0>a live stream.

00:50:35.330 --> 00:50:35.730
<v Speaker 0>Yeah.

00:50:38.530 --> 00:50:40.210
<v Speaker 1>Said So what I think he's what I

00:50:40.210 --> 00:50:42.770
<v Speaker 1>think he's talking about if you go back

00:50:41.505 --> 00:50:42.305
<v Speaker 1>to the

00:50:44.865 --> 00:50:47.424
<v Speaker 1>if you go back to the Versus Code,

00:50:47.424 --> 00:50:48.145
<v Speaker 1>I'm in

00:50:48.545 --> 00:50:49.984
<v Speaker 1>main provider.

00:50:52.625 --> 00:50:54.080
<v Speaker 1>So if you look here

00:50:54.560 --> 00:50:55.920
<v Speaker 0>And January resource

00:50:56.400 --> 00:50:58.160
<v Speaker 0>one. No. That was January.

00:50:58.480 --> 00:51:00.000
<v Speaker 1>So this is where the error is coming

00:51:00.000 --> 00:51:02.240
<v Speaker 1>from on line 24 production app, but it

00:51:02.240 --> 00:51:03.760
<v Speaker 1>looks right to me.

00:51:04.880 --> 00:51:06.800
<v Speaker 1>Or maybe that should be deployment.

00:51:06.800 --> 00:51:08.800
<v Speaker 1>I think that might be no. That's the

00:51:08.800 --> 00:51:09.520
<v Speaker 1>provider name.

00:51:15.015 --> 00:51:15.895
<v Speaker 1>Interesting.

00:51:19.895 --> 00:51:21.175
<v Speaker 1>This is the full this is the great

00:51:21.175 --> 00:51:23.255
<v Speaker 1>thing about using brand new stuff,

00:51:23.815 --> 00:51:24.830
<v Speaker 1>when you

00:51:25.070 --> 00:51:27.230
<v Speaker 1>are in a livestream. I'm I'm pretty confident

00:51:27.230 --> 00:51:28.270
<v Speaker 1>we'll get this working.

00:51:29.150 --> 00:51:31.470
<v Speaker 0>Alright. Well, PR is asking, did we remember

00:51:31.470 --> 00:51:33.310
<v Speaker 0>to sacrifice our first born to the demo

00:51:33.310 --> 00:51:35.390
<v Speaker 0>gods? I mean, no.

00:51:37.665 --> 00:51:38.945
<v Speaker 0>I knew I've got something.

00:51:39.425 --> 00:51:39.985
<v Speaker 0>Didn't quite

00:51:44.385 --> 00:51:46.145
<v Speaker 0>Okay. Sorry. What

00:51:46.385 --> 00:51:48.625
<v Speaker 0>was your hypothesis there? So let's look at

00:51:48.625 --> 00:51:50.785
<v Speaker 0>this error message. I'd like to understand

00:51:51.320 --> 00:51:54.760
<v Speaker 0>what assertions is the generator doing here against

00:51:54.760 --> 00:51:56.840
<v Speaker 0>our schema and our code.

00:51:57.480 --> 00:51:59.880
<v Speaker 1>So it's looking at the actual provider name

00:51:59.880 --> 00:52:02.040
<v Speaker 1>at the top of the schema dot JSON.

00:52:05.835 --> 00:52:07.755
<v Speaker 0>Which is our production app here?

00:52:08.555 --> 00:52:10.715
<v Speaker 1>Yeah. My I think what what I'd like

00:52:10.715 --> 00:52:13.115
<v Speaker 1>to try is let's try changing,

00:52:13.435 --> 00:52:15.115
<v Speaker 1>if you go back to index here?

00:52:16.550 --> 00:52:18.550
<v Speaker 1>That's just like the actual place in the

00:52:18.550 --> 00:52:20.870
<v Speaker 1>Pulumi resource model where it lives. That's the

00:52:20.870 --> 00:52:22.150
<v Speaker 1>only thing that it's not,

00:52:22.470 --> 00:52:24.950
<v Speaker 1>that is that I know that is definitely

00:52:24.950 --> 00:52:26.150
<v Speaker 1>shouldn't be changed.

00:52:26.470 --> 00:52:28.470
<v Speaker 1>I think we should try calling it deployment,

00:52:30.775 --> 00:52:32.935
<v Speaker 1>like the actual token name in the in

00:52:32.935 --> 00:52:33.975
<v Speaker 1>the previous

00:52:33.975 --> 00:52:35.095
<v Speaker 1>file. So

00:52:36.215 --> 00:52:38.215
<v Speaker 1>in the yeah. Let's try changing that to

00:52:38.215 --> 00:52:39.015
<v Speaker 1>deployment,

00:52:40.775 --> 00:52:41.655
<v Speaker 1>on '24.

00:52:45.760 --> 00:52:47.760
<v Speaker 1>Yeah. Let's give that a try. Well, this

00:52:47.760 --> 00:52:49.200
<v Speaker 0>is no complaining about

00:52:49.520 --> 00:52:50.640
<v Speaker 0>Pulumi schema.

00:52:50.800 --> 00:52:52.720
<v Speaker 1>That's because of the that's because it doesn't

00:52:52.720 --> 00:52:54.400
<v Speaker 1>exist yet. The the

00:52:54.560 --> 00:52:57.920
<v Speaker 1>it will generate a schema dot go file

00:52:57.425 --> 00:53:00.305
<v Speaker 1>when this step works. Alright. Okay.

00:53:06.385 --> 00:53:07.345
<v Speaker 0>It seems to be the same.

00:53:10.260 --> 00:53:11.140
<v Speaker 1>What

00:53:11.300 --> 00:53:13.940
<v Speaker 1>okay. Like, my my idea here.

00:53:18.420 --> 00:53:19.460
<v Speaker 0>Hey, Paul.

00:53:20.900 --> 00:53:21.860
<v Speaker 2>Hey, folks.

00:53:22.180 --> 00:53:23.780
<v Speaker 2>So, Leo, I think the issue is that

00:53:23.780 --> 00:53:26.275
<v Speaker 2>your import bay bay bay base pass may

00:53:26.275 --> 00:53:28.275
<v Speaker 2>not be correct in your Pulumi schema.

00:53:28.835 --> 00:53:32.035
<v Speaker 2>It's trying to tokenize what's coming out

00:53:32.515 --> 00:53:33.075
<v Speaker 2>of,

00:53:33.395 --> 00:53:35.795
<v Speaker 2>further down that that list, and it's it

00:53:35.795 --> 00:53:37.075
<v Speaker 2>doesn't seem as though it's correct.

00:53:38.960 --> 00:53:41.039
<v Speaker 1>Oh, I see what you're saying. Okay. So

00:53:41.039 --> 00:53:42.960
<v Speaker 1>you're saying that line 31

00:53:44.240 --> 00:53:45.599
<v Speaker 1>on this schema

00:53:47.039 --> 00:53:49.519
<v Speaker 1>Yes. You think that the that should be

00:53:49.519 --> 00:53:51.760
<v Speaker 1>deployment at the end there, so lowercase deployment?

00:53:54.665 --> 00:53:56.425
<v Speaker 2>So Not necessarily

00:53:56.425 --> 00:53:57.785
<v Speaker 2>deployment.

00:53:57.865 --> 00:54:00.505
<v Speaker 2>It needs to be the name of the

00:54:00.505 --> 00:54:03.145
<v Speaker 2>actual SDK that's that you're trying to generate.

00:54:03.385 --> 00:54:05.865
<v Speaker 2>So, like, for example, for me, I my

00:54:06.180 --> 00:54:16.500
<v Speaker 2>input base path would be github.com/stack72/PulumiGCPcloudrunglobal/SDK/go/GCPcloudrunglobal.

00:54:16.900 --> 00:54:18.579
<v Speaker 2>So it it all depends on what you're

00:54:18.579 --> 00:54:20.260
<v Speaker 2>actually trying to generate at the back end.

00:54:20.260 --> 00:54:21.780
<v Speaker 1>Yeah. I think I think he's right. That

00:54:21.780 --> 00:54:24.085
<v Speaker 1>needs to be deployment. Give that another try.

00:54:24.085 --> 00:54:26.005
<v Speaker 1>I think I think that's probably

00:54:28.484 --> 00:54:30.005
<v Speaker 2>The funny thing is Lee hates it if

00:54:30.005 --> 00:54:31.365
<v Speaker 2>I'm right. I

00:54:31.845 --> 00:54:33.605
<v Speaker 1>do hate it if you're right. Absolutely.

00:54:35.045 --> 00:54:36.940
<v Speaker 1>So what I'm gonna recommend here is I'm

00:54:36.940 --> 00:54:38.540
<v Speaker 1>gonna get this closer to the to the

00:54:38.540 --> 00:54:41.660
<v Speaker 1>version that we actually had working. So I'm

00:54:41.660 --> 00:54:44.300
<v Speaker 1>gonna change this to production app and then

00:54:45.580 --> 00:54:46.940
<v Speaker 1>because, you know, because I knew this was

00:54:46.940 --> 00:54:48.780
<v Speaker 1>gonna I knew this was gonna happen.

00:54:49.340 --> 00:54:50.140
<v Speaker 1>If you

00:54:50.724 --> 00:54:53.925
<v Speaker 1>what I had this was as production app,

00:54:55.285 --> 00:54:56.405
<v Speaker 1>app ads,

00:54:57.045 --> 00:54:59.285
<v Speaker 1>production app, because these are all just structs

00:54:59.285 --> 00:55:00.005
<v Speaker 1>at the end of the day.

00:55:06.790 --> 00:55:08.390
<v Speaker 1>Let me look at my example.

00:55:09.750 --> 00:55:10.550
<v Speaker 1>New

00:55:15.750 --> 00:55:17.350
<v Speaker 0>Which file are you modifying just now?

00:55:18.915 --> 00:55:20.275
<v Speaker 1>I am in

00:55:20.515 --> 00:55:24.115
<v Speaker 1>the actual provider that we created. So although

00:55:24.115 --> 00:55:26.035
<v Speaker 1>it's it's bouncing me around a little bit.

00:55:26.355 --> 00:55:27.955
<v Speaker 1>So I'm gonna do new

00:55:28.195 --> 00:55:29.155
<v Speaker 1>production app.

00:55:33.360 --> 00:55:34.160
<v Speaker 1>Production

00:55:34.560 --> 00:55:35.120
<v Speaker 1>app.

00:55:36.800 --> 00:55:38.320
<v Speaker 1>Is really great because we can feed this

00:55:38.320 --> 00:55:39.280
<v Speaker 1>back to,

00:55:40.240 --> 00:55:42.560
<v Speaker 1>the team as like like, this error message

00:55:42.560 --> 00:55:44.560
<v Speaker 1>is just not very helpful. So we'd obviously

00:55:44.795 --> 00:55:46.795
<v Speaker 1>need to open an issue for that, make

00:55:46.795 --> 00:55:48.235
<v Speaker 1>sure that we get that right. So this

00:55:48.235 --> 00:55:49.755
<v Speaker 1>is what I when I when I ran

00:55:49.755 --> 00:55:51.435
<v Speaker 1>through this yesterday to make sure that this

00:55:51.435 --> 00:55:52.475
<v Speaker 1>was actually gonna work,

00:55:52.795 --> 00:55:55.195
<v Speaker 1>I actually called this production app ARG rather

00:55:55.195 --> 00:55:57.599
<v Speaker 1>than production app and deployment. And again, it's

00:55:57.599 --> 00:55:59.279
<v Speaker 1>just structs, but I think we've missed a

00:55:59.279 --> 00:56:01.040
<v Speaker 1>token somewhere like Paul said.

00:56:01.759 --> 00:56:03.759
<v Speaker 1>So let's give that another try and see

00:56:03.759 --> 00:56:04.560
<v Speaker 1>what happens.

00:56:06.000 --> 00:56:07.599
<v Speaker 1>Oh, wait. I know. Oh, I know. I've

00:56:07.599 --> 00:56:08.480
<v Speaker 1>just figured out what it is.

00:56:10.255 --> 00:56:11.855
<v Speaker 1>I know exactly what it is.

00:56:12.815 --> 00:56:15.135
<v Speaker 1>So if you see where I am right

00:56:15.135 --> 00:56:16.895
<v Speaker 1>now Yeah. I'm following you. So

00:56:18.895 --> 00:56:20.975
<v Speaker 1>this is the problem. If you scroll down,

00:56:22.880 --> 00:56:24.480
<v Speaker 1>you still got a reference to static pay

00:56:24.640 --> 00:56:26.160
<v Speaker 1>we still got a reference to static page

00:56:26.160 --> 00:56:27.760
<v Speaker 1>ARGs here. So this should be

00:56:28.800 --> 00:56:30.640
<v Speaker 1>we've changed it. That should be production app

00:56:30.640 --> 00:56:32.400
<v Speaker 1>ARGs, and then this needs to be

00:56:32.880 --> 00:56:34.080
<v Speaker 1>new production.

00:56:36.465 --> 00:56:38.705
<v Speaker 0>Yeah. Line 29 has a static page on

00:56:38.705 --> 00:56:39.425
<v Speaker 0>it too.

00:56:41.665 --> 00:56:42.865
<v Speaker 1>29.

00:56:44.305 --> 00:56:45.265
<v Speaker 1>Construct.

00:56:48.385 --> 00:56:50.865
<v Speaker 0>Oh, no. Construct deployment is still Construct it

00:56:50.865 --> 00:56:51.425
<v Speaker 2>just

00:56:51.665 --> 00:56:54.410
<v Speaker 2>yeah. Just rename that function to construct deployment.

00:56:54.490 --> 00:56:57.210
<v Speaker 0>Alright. There we go. There we go.

00:56:58.569 --> 00:57:01.290
<v Speaker 1>That, I think, is what the problem was.

00:57:04.010 --> 00:57:05.450
<v Speaker 1>That does not look correct.

00:57:08.095 --> 00:57:09.855
<v Speaker 1>Still getting an error.

00:57:10.575 --> 00:57:12.815
<v Speaker 0>Yeah. Well, probably we've probably messed yeah. We've

00:57:12.815 --> 00:57:14.495
<v Speaker 0>messed one change in back. So deployment dot

00:57:14.495 --> 00:57:17.055
<v Speaker 0>goal lane 58 has that deployment RX on

00:57:17.055 --> 00:57:17.215
<v Speaker 0>it.

00:57:24.040 --> 00:57:25.960
<v Speaker 1>Oh, no. That's no. That's correct.

00:57:26.120 --> 00:57:27.800
<v Speaker 1>Because that's the actual

00:57:28.840 --> 00:57:31.160
<v Speaker 0>Oh, yeah. That's the actual deployment.

00:57:31.640 --> 00:57:32.280
<v Speaker 0>Yes.

00:57:32.680 --> 00:57:34.280
<v Speaker 0>What about this one here, Lane 30 9

00:57:34.280 --> 00:57:35.994
<v Speaker 0>at the end? Looks wrong. Yeah. That looks

00:57:35.994 --> 00:57:37.915
<v Speaker 1>like that's like it should be production app

00:57:37.915 --> 00:57:40.315
<v Speaker 1>because it's gonna return an instance of a

00:57:40.315 --> 00:57:42.474
<v Speaker 1>production app. So let's try that again.

00:57:48.839 --> 00:57:50.599
<v Speaker 0>No. Come

00:57:50.599 --> 00:57:51.240
<v Speaker 0>on.

00:57:54.359 --> 00:57:56.760
<v Speaker 0>Yeah. Let's look for red squiggles.

00:57:57.400 --> 00:57:58.519
<v Speaker 0>Oh, there's a big one.

00:58:01.255 --> 00:58:04.135
<v Speaker 0>So we can't register component resource because

00:58:04.135 --> 00:58:06.055
<v Speaker 0>there's no new deployment.

00:58:06.055 --> 00:58:06.455
<v Speaker 1>This

00:58:08.215 --> 00:58:09.975
<v Speaker 1>is a production app.

00:58:12.135 --> 00:58:14.775
<v Speaker 1>And I'm I'm remembering now the exhibit the

00:58:14.775 --> 00:58:16.510
<v Speaker 1>reason why I call this production app in

00:58:16.510 --> 00:58:18.190
<v Speaker 1>rather than deployment is so that I could

00:58:18.190 --> 00:58:19.230
<v Speaker 1>search for errors,

00:58:19.630 --> 00:58:22.350
<v Speaker 1>because we're using the Kubernetes SDK and deployment

00:58:22.350 --> 00:58:23.950
<v Speaker 1>and it returned a bunch of stuff. So

00:58:23.950 --> 00:58:26.190
<v Speaker 1>that should be a production app.

00:58:26.590 --> 00:58:28.110
<v Speaker 0>Alright. There you go. No more red.

00:58:33.715 --> 00:58:35.155
<v Speaker 1>Come on. We could do this.

00:58:37.075 --> 00:58:38.355
<v Speaker 0>I mean, I don't have any confidence in

00:58:38.355 --> 00:58:39.475
<v Speaker 0>me, but I know you two will get

00:58:39.475 --> 00:58:40.035
<v Speaker 0>it.

00:58:41.875 --> 00:58:43.715
<v Speaker 0>Let's see. Let's use the s code here.

00:58:43.715 --> 00:58:45.315
<v Speaker 0>It's normally quite good at telling us where

00:58:45.315 --> 00:58:48.710
<v Speaker 0>the reds are. Everything looks alright. So

00:58:49.270 --> 00:58:51.990
<v Speaker 0>as the code's not complaining and goes language

00:58:51.990 --> 00:58:53.110
<v Speaker 0>server's happy,

00:58:53.590 --> 00:58:55.510
<v Speaker 0>maybe now it's a schema thing.

00:58:56.630 --> 00:58:59.430
<v Speaker 1>Maybe. I'm also gonna can you rename deployment.

00:58:59.430 --> 00:59:01.925
<v Speaker 1>Code to production app with a capital a

00:59:01.925 --> 00:59:03.685
<v Speaker 1>just to make sure that it's like

00:59:05.685 --> 00:59:07.445
<v Speaker 1>So After all this, it will be it'll

00:59:07.445 --> 00:59:09.845
<v Speaker 1>be it'll be a yes. So just rename

00:59:09.845 --> 00:59:11.205
<v Speaker 1>that to production app

00:59:13.205 --> 00:59:15.125
<v Speaker 1>with a capital a. There we go.

00:59:16.820 --> 00:59:19.620
<v Speaker 1>And let's take a final look at the

00:59:19.860 --> 00:59:21.380
<v Speaker 1>scuba dot JSON.

00:59:23.700 --> 00:59:25.860
<v Speaker 0>Yeah. This still has deployment here.

00:59:26.500 --> 00:59:28.340
<v Speaker 1>So that needs to be deployment. That's the

00:59:28.340 --> 00:59:28.980
<v Speaker 1>actual,

00:59:29.860 --> 00:59:32.075
<v Speaker 1>that's the resource that's gonna be generated. So

00:59:32.075 --> 00:59:33.275
<v Speaker 1>that's that's okay.

00:59:35.194 --> 00:59:36.795
<v Speaker 1>I'm just going through this line by line

00:59:36.795 --> 00:59:38.635
<v Speaker 1>at the moment. Required inputs.

00:59:43.980 --> 00:59:45.820
<v Speaker 1>Nah. Yeah. No. That's right.

00:59:52.700 --> 00:59:54.060
<v Speaker 0>I'm gonna try it.

00:59:54.940 --> 00:59:55.900
<v Speaker 1>I believe in you.

00:59:59.105 --> 01:00:00.705
<v Speaker 0>Yep. I'm wrong.

01:00:05.985 --> 01:00:07.985
<v Speaker 1>Can you do me a favor? Can you

01:00:07.985 --> 01:00:10.065
<v Speaker 1>git git commit what we have?

01:00:10.705 --> 01:00:11.105
<v Speaker 1>And

01:00:11.510 --> 01:00:13.349
<v Speaker 1>like I have a working instance of this

01:00:13.349 --> 01:00:15.670
<v Speaker 1>and so I'm gonna start copying code over

01:00:15.670 --> 01:00:16.870
<v Speaker 1>to see what we've missed.

01:00:17.589 --> 01:00:19.430
<v Speaker 0>Oh, yeah. Of course. Yeah. Go for it.

01:00:19.430 --> 01:00:20.070
<v Speaker 0>So

01:00:20.869 --> 01:00:22.150
<v Speaker 0>just get add everything?

01:00:22.630 --> 01:00:25.030
<v Speaker 1>Yeah. Get add. Just get just do an

01:00:25.030 --> 01:00:25.750
<v Speaker 1>initial commit.

01:00:27.414 --> 01:00:29.015
<v Speaker 0>YOLO and

01:00:29.815 --> 01:00:30.775
<v Speaker 0>push.

01:00:31.494 --> 01:00:32.935
<v Speaker 0>Did I clone my fork?

01:00:33.335 --> 01:00:33.974
<v Speaker 0>Yeah.

01:00:35.095 --> 01:00:35.815
<v Speaker 0>Did I?

01:00:38.295 --> 01:00:38.615
<v Speaker 0>Yeah.

01:00:39.200 --> 01:00:40.720
<v Speaker 0>Well, that's not gonna work.

01:00:45.680 --> 01:00:46.880
<v Speaker 1>Yeah. I don't think you need to push

01:00:46.880 --> 01:00:48.240
<v Speaker 1>it. Just having it locally is probably good

01:00:48.240 --> 01:00:50.960
<v Speaker 1>enough. Alright. I thought you wanted to maybe

01:00:51.520 --> 01:00:52.800
<v Speaker 1>No. No. No. I'm just I'm gonna do

01:00:52.800 --> 01:00:54.400
<v Speaker 1>a git diff when we when I start

01:00:54.400 --> 01:00:55.545
<v Speaker 1>copying stuff over.

01:00:55.865 --> 01:00:59.065
<v Speaker 0>Oh, yeah. Cool. Basically. Makes sense. So

01:00:59.065 --> 01:01:00.505
<v Speaker 1>this is my

01:01:01.065 --> 01:01:03.224
<v Speaker 1>schema dot JSON, and the only difference here

01:01:03.224 --> 01:01:04.984
<v Speaker 1>is that I added an output. So I'm

01:01:04.984 --> 01:01:07.305
<v Speaker 1>gonna save that. Mhmm. And if you go

01:01:07.305 --> 01:01:08.345
<v Speaker 1>git diff

01:01:08.940 --> 01:01:10.940
<v Speaker 1>now to see what the differences are.

01:01:15.099 --> 01:01:16.300
<v Speaker 0>Did you save it?

01:01:17.099 --> 01:01:18.700
<v Speaker 1>Oh, no. I didn't. Alright.

01:01:19.820 --> 01:01:21.500
<v Speaker 0>So the description's changed.

01:01:22.335 --> 01:01:24.415
<v Speaker 0>Image reports the other way around, but other

01:01:24.415 --> 01:01:29.214
<v Speaker 0>than that, there's

01:01:29.214 --> 01:01:31.055
<v Speaker 0>no gold definition anymore.

01:01:31.775 --> 01:01:33.535
<v Speaker 1>It's a little bit further down. Alright. There

01:01:33.535 --> 01:01:35.339
<v Speaker 1>we are. So that's so you can see

01:01:35.339 --> 01:01:36.940
<v Speaker 1>the package name and the import base path

01:01:36.940 --> 01:01:39.420
<v Speaker 1>are obviously set to things that I would

01:01:39.420 --> 01:01:39.900
<v Speaker 1>have.

01:01:41.019 --> 01:01:43.019
<v Speaker 1>If you generate that, see what happens. It's

01:01:43.019 --> 01:01:44.779
<v Speaker 1>probably gonna fail because the import's wrong.

01:01:48.515 --> 01:01:49.555
<v Speaker 1>Nope. It works.

01:01:51.474 --> 01:01:52.195
<v Speaker 0>So

01:01:52.835 --> 01:01:54.515
<v Speaker 0>what? What's different here?

01:01:59.490 --> 01:02:02.370
<v Speaker 0>So the descriptions, the input property ordering,

01:02:02.370 --> 01:02:04.530
<v Speaker 0>none of that can matter. Right? The output

01:02:04.530 --> 01:02:05.970
<v Speaker 0>URL and a fussed about

01:02:07.250 --> 01:02:09.010
<v Speaker 0>I don't think that's important.

01:02:09.010 --> 01:02:10.930
<v Speaker 0>So it must be just So that

01:02:11.250 --> 01:02:12.930
<v Speaker 1>was I obviously didn't get a chance to

01:02:12.930 --> 01:02:14.355
<v Speaker 1>actually get this done last night, but the

01:02:14.355 --> 01:02:16.035
<v Speaker 1>idea here is that this production app will

01:02:16.035 --> 01:02:18.275
<v Speaker 1>output a URL from our load balancer.

01:02:18.755 --> 01:02:20.355
<v Speaker 1>And so eventually, we'll get to the point

01:02:20.355 --> 01:02:21.875
<v Speaker 1>where we can update this. So I would

01:02:21.875 --> 01:02:23.955
<v Speaker 1>recommend here is let's update the import base

01:02:23.955 --> 01:02:27.460
<v Speaker 1>path to actually remove my name and do

01:02:27.700 --> 01:02:31.300
<v Speaker 1>a Rawkode instead of my GitHub username Jack

01:02:31.300 --> 01:02:33.620
<v Speaker 1>Storm and then rerun it. But

01:02:35.300 --> 01:02:36.660
<v Speaker 1>now that we have this in Git, I

01:02:36.660 --> 01:02:37.540
<v Speaker 1>can go and have a look and see

01:02:37.540 --> 01:02:38.900
<v Speaker 1>what was different, basically.

01:02:39.380 --> 01:02:40.740
<v Speaker 1>So let's rerun that.

01:02:44.144 --> 01:02:45.105
<v Speaker 0>That works.

01:02:46.305 --> 01:02:47.904
<v Speaker 1>Must just have been a typo. See, this

01:02:47.904 --> 01:02:49.424
<v Speaker 1>is the problem. Like, what we're actually hoping

01:02:49.424 --> 01:02:51.505
<v Speaker 1>to do is actually emit this JSON scheme

01:02:51.505 --> 01:02:53.424
<v Speaker 1>rather than build it manually so you can't

01:02:53.424 --> 01:02:55.310
<v Speaker 1>make these mistakes. I think this is a

01:02:55.310 --> 01:02:57.550
<v Speaker 1>great example of, like, why

01:02:57.790 --> 01:03:00.590
<v Speaker 1>using these kind of, like, untyped documents can

01:03:00.590 --> 01:03:02.510
<v Speaker 1>be so difficult. The only part of this

01:03:02.510 --> 01:03:04.910
<v Speaker 1>that we had trouble with is this untyped

01:03:04.910 --> 01:03:05.230
<v Speaker 1>part.

01:03:06.444 --> 01:03:08.525
<v Speaker 1>So let's also remove,

01:03:09.405 --> 01:03:12.125
<v Speaker 1>the properties and required outputs,

01:03:12.365 --> 01:03:13.805
<v Speaker 1>because we're not gonna use those. So if

01:03:13.805 --> 01:03:14.925
<v Speaker 1>we open up our,

01:03:15.565 --> 01:03:17.805
<v Speaker 1>so that property sees an empty map

01:03:19.005 --> 01:03:21.005
<v Speaker 1>and then require yeah. And then so we

01:03:21.005 --> 01:03:22.204
<v Speaker 1>should be able to rerun that.

01:03:25.290 --> 01:03:27.770
<v Speaker 0>No. It's good. Oh, Paul left us.

01:03:28.329 --> 01:03:31.369
<v Speaker 0>Thanks for saying bye. See you later, Paul.

01:03:32.569 --> 01:03:33.849
<v Speaker 0>Thanks for your help. Okay.

01:03:34.914 --> 01:03:36.515
<v Speaker 1>Yeah. No. We appreciate it. So that's the

01:03:36.515 --> 01:03:38.434
<v Speaker 1>so that's the schema that's generated. So now

01:03:38.434 --> 01:03:39.954
<v Speaker 1>we should be able to do make build

01:03:39.954 --> 01:03:40.675
<v Speaker 1>as well.

01:03:45.394 --> 01:03:46.835
<v Speaker 1>So what this is gonna do is it's

01:03:46.835 --> 01:03:48.640
<v Speaker 1>gonna, sorry. Go ahead. I just was I

01:03:48.640 --> 01:03:50.480
<v Speaker 0>I liked what you were saying there as

01:03:50.480 --> 01:03:52.320
<v Speaker 0>I was trying to type and and kinda

01:03:52.320 --> 01:03:54.000
<v Speaker 0>think at the same time. But, like, the

01:03:54.000 --> 01:03:57.120
<v Speaker 0>schema can be inferred from the canonical implementation,

01:03:57.120 --> 01:03:59.360
<v Speaker 0>and you're working on generating the schema from,

01:03:59.360 --> 01:04:01.360
<v Speaker 0>like, the ghost structs or the type script.

01:04:01.360 --> 01:04:03.935
<v Speaker 0>Yes. Okay. Awesome. That's exactly what you said.

01:04:03.935 --> 01:04:05.455
<v Speaker 1>Like, so the ghost that part of the

01:04:05.455 --> 01:04:07.615
<v Speaker 1>reason why we got that Pulumi definition on

01:04:07.615 --> 01:04:09.455
<v Speaker 1>the ghost structure is we should we we

01:04:09.455 --> 01:04:12.015
<v Speaker 1>are working on kinda generating the schema manually.

01:04:13.055 --> 01:04:14.655
<v Speaker 1>I mean, I guess you could implement a

01:04:14.655 --> 01:04:16.840
<v Speaker 1>validator on the scheme as well, but, like,

01:04:16.840 --> 01:04:18.520
<v Speaker 1>I think it's kinda telling that the one

01:04:18.520 --> 01:04:20.359
<v Speaker 1>part of this that we had to have

01:04:20.359 --> 01:04:23.240
<v Speaker 1>handwrite basically without any type hints caused a

01:04:23.240 --> 01:04:24.120
<v Speaker 1>bunch of problems.

01:04:24.760 --> 01:04:26.599
<v Speaker 1>And it's still not clear what that problem

01:04:26.599 --> 01:04:28.455
<v Speaker 1>was. I hope you're gonna git commit this

01:04:28.455 --> 01:04:29.575
<v Speaker 1>so I can go back and look at

01:04:29.575 --> 01:04:30.295
<v Speaker 1>it later.

01:04:30.775 --> 01:04:32.375
<v Speaker 0>Yeah. I'll push it up. Don't worry.

01:04:33.255 --> 01:04:35.095
<v Speaker 1>So just to talk about what's actually happening

01:04:35.095 --> 01:04:35.735
<v Speaker 1>here.

01:04:36.135 --> 01:04:38.055
<v Speaker 1>So you obviously don't have dot net installed.

01:04:38.055 --> 01:04:39.575
<v Speaker 1>So let's just update the make file and

01:04:39.575 --> 01:04:41.015
<v Speaker 1>not generate the dot net part.

01:04:45.319 --> 01:04:48.599
<v Speaker 0>K. So on build, we do not want

01:04:48.680 --> 01:04:50.040
<v Speaker 0>dot net SDK.

01:04:50.520 --> 01:04:52.119
<v Speaker 1>And we don't wanna install it either. So

01:04:52.119 --> 01:04:53.559
<v Speaker 1>if you look at the make make file

01:04:53.559 --> 01:04:55.079
<v Speaker 1>as well while that's running, we'll do remove

01:04:55.079 --> 01:04:56.200
<v Speaker 1>install.net

01:04:57.035 --> 01:04:57.755
<v Speaker 1>Yep.

01:04:57.915 --> 01:04:59.275
<v Speaker 1>So, yeah, again, to just talk a lot

01:04:59.275 --> 01:05:01.035
<v Speaker 1>a little bit while what's happening here. Like,

01:05:01.035 --> 01:05:03.035
<v Speaker 1>what this is doing is it's building us

01:05:03.035 --> 01:05:04.955
<v Speaker 1>a binary that we will then distribute to

01:05:04.955 --> 01:05:05.835
<v Speaker 1>our users.

01:05:06.075 --> 01:05:08.235
<v Speaker 1>Usually, you would install this with Pulumi plug

01:05:08.235 --> 01:05:08.795
<v Speaker 1>in install,

01:05:10.480 --> 01:05:12.960
<v Speaker 1>and that will get easy need either needs

01:05:12.960 --> 01:05:15.440
<v Speaker 1>to be in your Pulumi directory or in

01:05:15.440 --> 01:05:17.680
<v Speaker 1>the actual path of your,

01:05:18.720 --> 01:05:20.480
<v Speaker 1>you know, on your machine. So it's doing

01:05:20.480 --> 01:05:22.560
<v Speaker 1>a go, it's doing a go build,

01:05:23.280 --> 01:05:26.195
<v Speaker 1>and it's actually generating the schema. If you

01:05:26.195 --> 01:05:28.195
<v Speaker 1>look after the r and minus r f,

01:05:28.195 --> 01:05:30.595
<v Speaker 1>it's gonna clear out your bin directory.

01:05:30.675 --> 01:05:33.395
<v Speaker 1>It's gonna generate the actual schema, which ends

01:05:33.395 --> 01:05:34.835
<v Speaker 1>up being a go file, which is why

01:05:34.835 --> 01:05:36.595
<v Speaker 1>we were getting that error early for Pulumi

01:05:36.595 --> 01:05:37.315
<v Speaker 1>schema.

01:05:38.195 --> 01:05:40.115
<v Speaker 1>And then it's gonna build a binary

01:05:40.890 --> 01:05:42.569
<v Speaker 1>that you would distribute. And now here is

01:05:42.569 --> 01:05:44.010
<v Speaker 1>the point where it's gonna generate all the

01:05:44.010 --> 01:05:45.930
<v Speaker 1>different SDKs. So the Python and Node JS

01:05:45.930 --> 01:05:46.890
<v Speaker 1>SDKs.

01:05:48.329 --> 01:05:50.250
<v Speaker 0>So are these like, you know, when I

01:05:50.490 --> 01:05:52.089
<v Speaker 0>you know, say I wanted to ship this

01:05:52.089 --> 01:05:54.565
<v Speaker 0>now, like, I'm just pushing the code to

01:05:54.565 --> 01:05:56.405
<v Speaker 0>get hub and go developers can import it

01:05:56.405 --> 01:05:58.565
<v Speaker 0>from that source for TypeScript. And my publishing

01:05:58.565 --> 01:06:01.285
<v Speaker 0>to NPM for Python, I'm publishing to pipeline.

01:06:01.285 --> 01:06:03.525
<v Speaker 1>Right. Okay. That's exactly it. Yeah. So you

01:06:03.525 --> 01:06:04.565
<v Speaker 1>would need to jet you would need to

01:06:04.565 --> 01:06:06.325
<v Speaker 1>push the packages to all of your respective

01:06:06.325 --> 01:06:08.630
<v Speaker 1>package managers. You also need to distribute a

01:06:08.630 --> 01:06:09.990
<v Speaker 1>binary to the users.

01:06:10.630 --> 01:06:12.870
<v Speaker 1>And we are working right now on automatically

01:06:12.870 --> 01:06:13.750
<v Speaker 1>generating

01:06:13.990 --> 01:06:17.350
<v Speaker 1>automatically being able to grab that binary

01:06:17.430 --> 01:06:17.990
<v Speaker 1>from

01:06:19.275 --> 01:06:21.035
<v Speaker 1>when you do the NPM install or the

01:06:21.035 --> 01:06:21.994
<v Speaker 1>PIP install.

01:06:22.075 --> 01:06:24.075
<v Speaker 1>This already happens with Pulumi,

01:06:24.555 --> 01:06:26.474
<v Speaker 1>for all of our kind of, like, multi

01:06:26.474 --> 01:06:27.755
<v Speaker 1>language providers.

01:06:28.234 --> 01:06:30.954
<v Speaker 1>When you do NPM install at Pulumi Kubernetes,

01:06:30.954 --> 01:06:32.780
<v Speaker 1>it pulls down the binary for you. And

01:06:32.780 --> 01:06:34.140
<v Speaker 1>so you'll be able to do,

01:06:34.460 --> 01:06:35.900
<v Speaker 1>you know, be able to do the same

01:06:36.060 --> 01:06:37.260
<v Speaker 1>process basically.

01:06:37.500 --> 01:06:39.980
<v Speaker 1>These actually end up looking just like those

01:06:39.980 --> 01:06:42.540
<v Speaker 1>by those, like, Pulumi providers.

01:06:43.180 --> 01:06:44.859
<v Speaker 1>So it's a binary and then an SDK.

01:06:46.025 --> 01:06:47.705
<v Speaker 1>I see you running in the install command

01:06:47.705 --> 01:06:48.585
<v Speaker 1>now. So

01:06:49.385 --> 01:06:52.745
<v Speaker 1>this should create a Yarn linkable package for

01:06:52.745 --> 01:06:54.105
<v Speaker 1>us that we can then use in our

01:06:54.105 --> 01:06:54.665
<v Speaker 1>example.

01:06:55.305 --> 01:06:57.385
<v Speaker 0>Alright. So does that mean we wanna create

01:06:57.385 --> 01:06:59.465
<v Speaker 0>a Pulumi TypeScript application now to be able

01:06:59.465 --> 01:07:00.025
<v Speaker 0>to consume?

01:07:01.040 --> 01:07:02.800
<v Speaker 1>I generally put in an example so that

01:07:02.800 --> 01:07:04.080
<v Speaker 1>everybody can see what it looks like. So

01:07:04.080 --> 01:07:07.040
<v Speaker 1>I'll do make make directory examples and then

01:07:07.040 --> 01:07:07.920
<v Speaker 1>TypeScript.

01:07:11.119 --> 01:07:12.480
<v Speaker 0>Okay.

01:07:12.480 --> 01:07:13.760
<v Speaker 0>New directory

01:07:14.880 --> 01:07:16.240
<v Speaker 0>example

01:07:18.335 --> 01:07:20.494
<v Speaker 0>TypeScript. And we wanna add Pulumi new in

01:07:20.494 --> 01:07:20.975
<v Speaker 0>this?

01:07:21.295 --> 01:07:22.015
<v Speaker 1>Yes.

01:07:27.135 --> 01:07:28.815
<v Speaker 0>K. Example.

01:07:29.055 --> 01:07:30.015
<v Speaker 0>TypeScript.

01:07:30.335 --> 01:07:31.295
<v Speaker 0>Pulumi new.

01:07:34.390 --> 01:07:35.350
<v Speaker 0>TypeScript.

01:07:35.350 --> 01:07:37.270
<v Speaker 0>Just TypeScript. I just do put I just

01:07:37.270 --> 01:07:39.110
<v Speaker 1>do Pulumi new TypeScript here.

01:07:43.510 --> 01:07:44.550
<v Speaker 1>Yeah. That should work.

01:07:49.325 --> 01:07:51.725
<v Speaker 0>Let's see how that installs there. Okay. That's

01:07:51.725 --> 01:07:52.285
<v Speaker 0>done.

01:07:53.085 --> 01:07:54.365
<v Speaker 1>So now you should be able to run

01:07:54.365 --> 01:07:55.165
<v Speaker 1>Yarnlink.

01:07:55.165 --> 01:07:56.765
<v Speaker 1>And the reason that I told you to

01:07:56.765 --> 01:07:59.410
<v Speaker 1>update so obviously, you wanna put you can't

01:07:59.410 --> 01:08:01.330
<v Speaker 1>publish this to the app Pulumiorg. So now

01:08:01.330 --> 01:08:03.810
<v Speaker 1>you would publish this to at Rawkode in

01:08:03.810 --> 01:08:04.530
<v Speaker 1>NPM.

01:08:04.770 --> 01:08:07.170
<v Speaker 1>So we can Yarnlink that package inside that

01:08:07.170 --> 01:08:07.970
<v Speaker 1>example.

01:08:10.450 --> 01:08:10.770
<v Speaker 1>Yep.

01:08:18.115 --> 01:08:19.314
<v Speaker 0>Fighter? No.

01:08:19.635 --> 01:08:21.155
<v Speaker 1>No. You just the just your own link

01:08:21.155 --> 01:08:23.075
<v Speaker 1>is fine. It did it it's already in

01:08:23.155 --> 01:08:24.835
<v Speaker 1>like, the install make,

01:08:24.995 --> 01:08:25.875
<v Speaker 1>already did that.

01:08:26.810 --> 01:08:28.810
<v Speaker 1>Right. And so then we can open up

01:08:28.810 --> 01:08:29.770
<v Speaker 1>that example,

01:08:30.970 --> 01:08:32.489
<v Speaker 1>that TypeScript example.

01:08:34.090 --> 01:08:35.449
<v Speaker 1>Import all.

01:08:38.970 --> 01:08:40.970
<v Speaker 1>Yarn link is magic. Don't pretend to try

01:08:40.970 --> 01:08:43.035
<v Speaker 1>and understand understand it.

01:08:45.195 --> 01:08:46.635
<v Speaker 1>At Rawkode.

01:08:48.235 --> 01:08:48.955
<v Speaker 0>Wow.

01:08:49.835 --> 01:08:51.435
<v Speaker 1>And then you should be able to do

01:08:51.595 --> 01:08:53.595
<v Speaker 1>a const Rawkode.

01:08:53.995 --> 01:08:54.395
<v Speaker 0>Yeah.

01:08:57.000 --> 01:08:58.520
<v Speaker 1>Equals new.

01:08:58.760 --> 01:08:59.720
<v Speaker 0>It's

01:08:59.720 --> 01:09:01.960
<v Speaker 0>a it's a class. Right? Yeah.

01:09:03.399 --> 01:09:04.920
<v Speaker 1>And then we also need a name, so

01:09:04.920 --> 01:09:06.279
<v Speaker 1>let's just call this example.

01:09:06.680 --> 01:09:08.760
<v Speaker 0>Yeah. So name and then args.

01:09:09.335 --> 01:09:10.694
<v Speaker 0>So example,

01:09:11.814 --> 01:09:12.774
<v Speaker 0>args.

01:09:13.734 --> 01:09:15.255
<v Speaker 0>I don't think they're all complete. It's quite

01:09:15.255 --> 01:09:16.774
<v Speaker 0>kicked in there yet, but we know that

01:09:16.774 --> 01:09:17.574
<v Speaker 0>it's a

01:09:17.895 --> 01:09:18.534
<v Speaker 0>image.

01:09:20.935 --> 01:09:22.614
<v Speaker 1>And it's cap, I think. Yeah.

01:09:23.175 --> 01:09:26.069
<v Speaker 1>So then image which set in NGINX.

01:09:28.389 --> 01:09:30.469
<v Speaker 0>I'm gonna use the Yarn as well first.

01:09:30.469 --> 01:09:32.630
<v Speaker 1>It's because you're using Rawkode too many times.

01:09:32.630 --> 01:09:33.749
<v Speaker 1>So you need to do

01:09:34.149 --> 01:09:35.510
<v Speaker 1>if you go back to your Oh, yeah.

01:09:35.510 --> 01:09:36.389
<v Speaker 1>So const.

01:09:36.630 --> 01:09:38.814
<v Speaker 1>There we go. Yeah. I wonder if that

01:09:38.814 --> 01:09:41.614
<v Speaker 0>fixes the yeah. There we go. Okay. So

01:09:41.694 --> 01:09:43.934
<v Speaker 0>deploy engine x. We've got a report.

01:09:44.974 --> 01:09:46.255
<v Speaker 1>So we should be able to Pulumi up

01:09:46.255 --> 01:09:47.774
<v Speaker 1>this if you've got your Kubernetes.

01:09:47.854 --> 01:09:49.215
<v Speaker 1>And again, this is a this is a

01:09:49.215 --> 01:09:51.040
<v Speaker 1>component resource. So you could pass providers to

01:09:51.040 --> 01:09:53.199
<v Speaker 1>this if you wanted to. This is just

01:09:53.199 --> 01:09:54.960
<v Speaker 1>a standard Pulumi application.

01:09:56.640 --> 01:09:58.400
<v Speaker 1>Should be able to do Pulumi up. I

01:09:58.400 --> 01:09:59.760
<v Speaker 0>do have a context

01:10:00.000 --> 01:10:02.640
<v Speaker 0>set. There's no pods running. We run a

01:10:02.640 --> 01:10:03.360
<v Speaker 0>Pulumi up.

01:10:05.935 --> 01:10:07.215
<v Speaker 0>Oh, TypeScript.

01:10:08.735 --> 01:10:10.255
<v Speaker 0>Wanted to just wanted to make you swear

01:10:10.255 --> 01:10:11.775
<v Speaker 0>a bit, Avatar. Hey. Oh, I'm on. I

01:10:11.775 --> 01:10:12.574
<v Speaker 1>was panicking then.

01:10:19.380 --> 01:10:21.540
<v Speaker 0>Alright. So help me understand what this is

01:10:21.540 --> 01:10:23.540
<v Speaker 0>actually doing. Right? We have linked to the

01:10:23.540 --> 01:10:25.619
<v Speaker 0>Yarn generated SDK,

01:10:26.260 --> 01:10:28.900
<v Speaker 0>which is generating types so that TypeScript is

01:10:28.900 --> 01:10:31.140
<v Speaker 0>aware of what we have available to us.

01:10:31.140 --> 01:10:32.965
<v Speaker 0>But as it as it calling out to

01:10:32.965 --> 01:10:34.725
<v Speaker 0>a gold binary, right, to do the actual

01:10:34.725 --> 01:10:37.765
<v Speaker 0>deployment and the service and such. I am

01:10:37.765 --> 01:10:39.605
<v Speaker 1>not the person to explain this, but I'm

01:10:39.605 --> 01:10:41.765
<v Speaker 1>gonna have my very very best. Right?

01:10:42.245 --> 01:10:43.445
<v Speaker 1>So what this is doing

01:10:44.110 --> 01:10:46.590
<v Speaker 1>is it generates all of the actual, like,

01:10:46.590 --> 01:10:49.390
<v Speaker 1>SDK and then just this registers

01:10:49.470 --> 01:10:51.950
<v Speaker 1>inside the actual Pulumi engine.

01:10:52.430 --> 01:10:54.350
<v Speaker 1>So that's what the binary is doing is

01:10:54.350 --> 01:10:56.110
<v Speaker 1>it basically takes the TypeScript,

01:10:56.465 --> 01:10:59.584
<v Speaker 1>converts it into like a a schema implementation,

01:10:59.664 --> 01:11:01.344
<v Speaker 1>and then the Pulumi engine does all of

01:11:01.344 --> 01:11:01.905
<v Speaker 1>the work.

01:11:02.704 --> 01:11:04.304
<v Speaker 1>So that's why it's really useful to write

01:11:04.304 --> 01:11:05.744
<v Speaker 1>these in Go because you can just distribute

01:11:05.744 --> 01:11:07.344
<v Speaker 1>that binary and it can call the go

01:11:07.344 --> 01:11:08.864
<v Speaker 1>straight to the Pulumi engine.

01:11:10.065 --> 01:11:10.545
<v Speaker 1>This is

01:11:11.700 --> 01:11:13.940
<v Speaker 1>really, really kind of, like,

01:11:14.340 --> 01:11:15.620
<v Speaker 1>deep technology,

01:11:15.940 --> 01:11:18.340
<v Speaker 1>and I'm not gonna profess to understand

01:11:18.820 --> 01:11:20.820
<v Speaker 1>quite how it works at its at its

01:11:20.820 --> 01:11:23.460
<v Speaker 1>full level. And I even asked before I

01:11:23.460 --> 01:11:24.900
<v Speaker 1>came on. Was like, somebody's gonna try and

01:11:24.900 --> 01:11:26.965
<v Speaker 1>explain how this works to me because it

01:11:26.965 --> 01:11:29.925
<v Speaker 1>is it's literal magic. Like, we've written a

01:11:29.925 --> 01:11:31.045
<v Speaker 1>program in one,

01:11:31.925 --> 01:11:34.164
<v Speaker 1>you know, we've written something in one language

01:11:34.405 --> 01:11:36.085
<v Speaker 1>and we are able to consume it in

01:11:36.085 --> 01:11:38.324
<v Speaker 1>another language. It's just wild to me.

01:11:38.645 --> 01:11:40.165
<v Speaker 1>And this will work with Python. It will

01:11:40.165 --> 01:11:41.045
<v Speaker 1>work with Go.

01:11:41.364 --> 01:11:43.739
<v Speaker 1>We've obviously made a mistake without Kubernetes definition

01:11:43.739 --> 01:11:45.739
<v Speaker 1>rather than the actual Pulumi program.

01:11:46.219 --> 01:11:48.060
<v Speaker 1>So if you do if you do a

01:11:48.060 --> 01:11:49.900
<v Speaker 1>new terminal, new qctl,

01:11:50.699 --> 01:11:52.060
<v Speaker 1>it's probably something silly.

01:11:53.495 --> 01:11:54.695
<v Speaker 1>Kubectl

01:11:54.695 --> 01:11:55.574
<v Speaker 1>get

01:11:55.895 --> 01:11:56.855
<v Speaker 1>namespace?

01:11:57.095 --> 01:11:59.094
<v Speaker 0>I don't know. Just pick up my

01:11:59.975 --> 01:12:00.695
<v Speaker 0>yeah.

01:12:00.855 --> 01:12:02.534
<v Speaker 0>It has created the namespace.

01:12:03.095 --> 01:12:05.335
<v Speaker 1>Kubectl get p o minus

01:12:05.735 --> 01:12:05.975
<v Speaker 1>yeah.

01:12:11.630 --> 01:12:13.390
<v Speaker 0>Oh, wait. Why am I doing Get get

01:12:13.390 --> 01:12:13.950
<v Speaker 1>get get

01:12:17.230 --> 01:12:19.630
<v Speaker 0>But I think the service has been created.

01:12:19.630 --> 01:12:21.390
<v Speaker 0>It's got a low it's actually got an

01:12:21.390 --> 01:12:24.190
<v Speaker 0>IP, a load balancer IP, and stuff like

01:12:23.865 --> 01:12:25.465
<v Speaker 0>that, but it's never gonna find any pods

01:12:25.465 --> 01:12:28.825
<v Speaker 0>because, yeah, we've missed something in the spec.

01:12:29.225 --> 01:12:31.065
<v Speaker 0>And we can wait for this to time

01:12:31.065 --> 01:12:32.105
<v Speaker 0>out and see the error. I don't know

01:12:32.105 --> 01:12:34.185
<v Speaker 0>if I'll get it either. Minutes. It's ten

01:12:34.185 --> 01:12:36.265
<v Speaker 1>minutes, so it takes a little while. Right.

01:12:36.265 --> 01:12:37.305
<v Speaker 1>So what I would do is

01:12:37.950 --> 01:12:39.710
<v Speaker 1>control c out of that and then Pulumi

01:12:39.710 --> 01:12:40.430
<v Speaker 1>destroy.

01:12:41.710 --> 01:12:44.670
<v Speaker 1>Here we are. There we are. Required value

01:12:44.670 --> 01:12:46.350
<v Speaker 1>for the container port.

01:12:46.990 --> 01:12:47.470
<v Speaker 0>Or no.

01:12:51.864 --> 01:12:54.264
<v Speaker 1>It looks like our actual types aren't coming

01:12:54.264 --> 01:12:55.224
<v Speaker 1>through properly.

01:12:55.545 --> 01:12:58.264
<v Speaker 1>So our input types aren't coming through properly.

01:12:58.744 --> 01:13:00.985
<v Speaker 1>So I think there's a problem in

01:13:01.465 --> 01:13:03.224
<v Speaker 1>these the the two things that we specified

01:13:03.224 --> 01:13:05.930
<v Speaker 1>as arguments aren't actually coming through all the

01:13:06.010 --> 01:13:08.570
<v Speaker 1>propagating all the way through from the schema.

01:13:08.970 --> 01:13:10.330
<v Speaker 1>So let's take a look at that, see

01:13:10.330 --> 01:13:11.050
<v Speaker 1>if we can get it working.

01:13:18.595 --> 01:13:20.275
<v Speaker 0>That's not the right file, is it? That's

01:13:20.275 --> 01:13:21.074
<v Speaker 0>the other one.

01:13:21.635 --> 01:13:23.155
<v Speaker 1>Yeah. It's in the No.

01:13:26.835 --> 01:13:28.675
<v Speaker 0>One? It's in the production app. Yeah. That's

01:13:28.675 --> 01:13:29.235
<v Speaker 1>the one. Yeah.

01:13:30.070 --> 01:13:32.070
<v Speaker 0>Okay. Oh, you know what it is? I'll

01:13:32.070 --> 01:13:34.310
<v Speaker 1>I'll I mean, maybe you can spot what

01:13:34.310 --> 01:13:36.230
<v Speaker 1>it is. Yeah. You've already spotted it. Yeah.

01:13:36.230 --> 01:13:38.230
<v Speaker 1>That's why. So you can see there the

01:13:38.230 --> 01:13:40.550
<v Speaker 1>relationship between the schema and the actual strokes.

01:13:40.550 --> 01:13:42.710
<v Speaker 1>It's because so we'll need to regenerate the

01:13:42.710 --> 01:13:43.750
<v Speaker 1>SDK now.

01:13:43.990 --> 01:13:44.390
<v Speaker 0>Yep.

01:13:46.235 --> 01:13:49.434
<v Speaker 1>So make generate, make build, make install.

01:13:49.835 --> 01:13:51.675
<v Speaker 0>I've got this. I know what I'm doing.

01:13:52.474 --> 01:13:53.914
<v Speaker 1>You're a hero, man.

01:13:56.074 --> 01:13:57.594
<v Speaker 1>You're doing a better job at the developer

01:13:57.594 --> 01:13:59.355
<v Speaker 1>advocacy part than I am at this point.

01:13:59.355 --> 01:13:59.755
<v Speaker 1>So

01:14:00.870 --> 01:14:02.630
<v Speaker 0>Well, Paul's given us some hints for this

01:14:02.630 --> 01:14:04.150
<v Speaker 0>mistakes we're making along the way in the

01:14:04.150 --> 01:14:05.429
<v Speaker 0>chat as well, but I'm just gonna ignore

01:14:05.429 --> 01:14:06.709
<v Speaker 0>him because he left us.

01:14:11.110 --> 01:14:13.110
<v Speaker 0>Alright. So we'll give us a few seconds.

01:14:13.110 --> 01:14:14.550
<v Speaker 0>I don't think we need to change anything

01:14:14.550 --> 01:14:16.515
<v Speaker 0>on our TypeScript side. Right?

01:14:17.315 --> 01:14:19.155
<v Speaker 0>We're linking to the dependencies.

01:14:19.155 --> 01:14:20.435
<v Speaker 0>So really, if we just run a Pulumi

01:14:20.435 --> 01:14:22.675
<v Speaker 0>up again, hopefully, those two parameters are being

01:14:22.675 --> 01:14:26.275
<v Speaker 0>pulled through correctly and we'll get our deployment.

01:14:27.075 --> 01:14:27.395
<v Speaker 0>Okay.

01:14:31.929 --> 01:14:33.449
<v Speaker 0>Pretty magic if it works.

01:14:34.489 --> 01:14:35.289
<v Speaker 1>I mean,

01:14:36.889 --> 01:14:39.210
<v Speaker 1>like, obviously, the the this is the first

01:14:39.210 --> 01:14:42.170
<v Speaker 1>alpha ish release of a very, very powerful

01:14:42.170 --> 01:14:44.969
<v Speaker 1>thing. And part of the reason why I

01:14:44.405 --> 01:14:45.925
<v Speaker 1>wanted to do this live with you is

01:14:45.925 --> 01:14:48.165
<v Speaker 1>just to kinda get an idea of obviously,

01:14:48.165 --> 01:14:49.685
<v Speaker 1>I'm pretty close to it. So I kind

01:14:49.685 --> 01:14:51.045
<v Speaker 1>of know all the little things that we

01:14:51.045 --> 01:14:52.485
<v Speaker 1>need to iron out, but being able to

01:14:52.485 --> 01:14:54.085
<v Speaker 1>explain it and see those things. We've got

01:14:54.085 --> 01:14:55.285
<v Speaker 1>a lot of you know, we've got some

01:14:55.285 --> 01:14:57.765
<v Speaker 1>really exciting authoring improvements coming through as well.

01:14:57.765 --> 01:14:59.285
<v Speaker 1>So we expect this to kinda get better

01:14:59.285 --> 01:15:01.079
<v Speaker 1>and better over time.

01:15:02.440 --> 01:15:03.239
<v Speaker 0>Nice.

01:15:03.719 --> 01:15:06.040
<v Speaker 0>I think it's definitely solving a real problem.

01:15:06.040 --> 01:15:07.080
<v Speaker 0>Like I said, you know, I I work

01:15:07.080 --> 01:15:09.320
<v Speaker 0>in cluster API bindings that are using Pulumi

01:15:09.320 --> 01:15:11.560
<v Speaker 0>and TypeScript, and they're not consumable by people

01:15:11.560 --> 01:15:13.485
<v Speaker 0>that don't wanna use TypeScript. And like right

01:15:13.485 --> 01:15:14.685
<v Speaker 0>away, I could just see that I wanna

01:15:14.685 --> 01:15:16.364
<v Speaker 0>go and do this and generate the type.

01:15:16.364 --> 01:15:19.485
<v Speaker 0>So the implementation language is almost irrelevant to

01:15:19.485 --> 01:15:20.364
<v Speaker 0>a certain point.

01:15:20.605 --> 01:15:21.724
<v Speaker 1>Yeah. Absolutely.

01:15:22.045 --> 01:15:23.724
<v Speaker 0>Alright. Let's go for it.

01:15:26.525 --> 01:15:27.324
<v Speaker 0>Let's see.

01:15:29.300 --> 01:15:30.099
<v Speaker 1>So

01:15:30.180 --> 01:15:31.540
<v Speaker 1>it should tell us it it should tell

01:15:31.540 --> 01:15:33.380
<v Speaker 1>us it wants to update the deployment because

01:15:33.380 --> 01:15:34.659
<v Speaker 1>that never got created.

01:15:34.980 --> 01:15:37.140
<v Speaker 1>And the service has changed, so that sounds

01:15:37.140 --> 01:15:38.820
<v Speaker 1>like it's a good sign.

01:15:41.780 --> 01:15:43.860
<v Speaker 0>It worked. Let's create a replica check.

01:15:47.485 --> 01:15:50.365
<v Speaker 0>Deployment initialization complete. So now it's waiting for

01:15:50.365 --> 01:15:53.005
<v Speaker 0>the pods and images effect. It's already done.

01:15:54.045 --> 01:15:54.605
<v Speaker 1>And

01:15:54.845 --> 01:15:57.005
<v Speaker 1>if you so let's take a look at

01:15:57.005 --> 01:15:58.605
<v Speaker 1>actually how how long have we got left?

01:15:58.590 --> 01:16:00.830
<v Speaker 1>I wanna kinda run through some more. Yeah.

01:16:00.830 --> 01:16:01.869
<v Speaker 0>Ten fifty minutes. So

01:16:02.670 --> 01:16:04.349
<v Speaker 1>let's take a look at the SDK directory

01:16:04.349 --> 01:16:06.030
<v Speaker 1>and see what actually happened here.

01:16:06.670 --> 01:16:08.510
<v Speaker 1>So if we yeah. If we open up

01:16:08.830 --> 01:16:10.190
<v Speaker 1>if you look at the SDK, we generated

01:16:10.190 --> 01:16:11.469
<v Speaker 1>the things that all in dot and we

01:16:11.469 --> 01:16:12.909
<v Speaker 1>can write a go example as well probably.

01:16:13.474 --> 01:16:14.594
<v Speaker 1>But you can see, look, if you look

01:16:14.594 --> 01:16:15.954
<v Speaker 1>at the package dot JSON, it's just a

01:16:15.954 --> 01:16:17.074
<v Speaker 1>standard NPM

01:16:17.474 --> 01:16:18.114
<v Speaker 1>package,

01:16:18.675 --> 01:16:20.034
<v Speaker 1>which is called Rawkode.

01:16:20.275 --> 01:16:22.755
<v Speaker 1>This version gets like updated and it goes

01:16:22.755 --> 01:16:24.355
<v Speaker 1>into the bin directory. So that's what we

01:16:24.355 --> 01:16:25.314
<v Speaker 1>Yarn link.

01:16:25.554 --> 01:16:27.155
<v Speaker 1>So if you open up that bin directory

01:16:27.155 --> 01:16:28.675
<v Speaker 1>in Node. Js, you'll see that that should

01:16:28.675 --> 01:16:30.609
<v Speaker 1>have the correct version.

01:16:30.769 --> 01:16:32.289
<v Speaker 1>But you'll see, look, this is this has

01:16:32.289 --> 01:16:33.809
<v Speaker 1>got all the types and stuff that's actually

01:16:33.809 --> 01:16:35.249
<v Speaker 1>been generated for us.

01:16:37.010 --> 01:16:38.449
<v Speaker 1>And if you actually look the thing that

01:16:38.449 --> 01:16:39.809
<v Speaker 1>kind of is is crazy to me is

01:16:39.809 --> 01:16:41.809
<v Speaker 1>if you look at the deployment.d.ts

01:16:41.809 --> 01:16:43.090
<v Speaker 1>or the deployment.js,

01:16:44.114 --> 01:16:46.355
<v Speaker 1>all it's doing is deploying the the all

01:16:46.355 --> 01:16:48.355
<v Speaker 1>it's doing is creating the actual shape of

01:16:48.355 --> 01:16:50.594
<v Speaker 1>this thing. All of the work is actually

01:16:50.594 --> 01:16:52.195
<v Speaker 1>done in the Pulumi engine.

01:16:52.434 --> 01:16:54.355
<v Speaker 1>So it's not define it's not we're not

01:16:54.355 --> 01:16:55.394
<v Speaker 1>generating

01:16:55.954 --> 01:16:57.315
<v Speaker 1>a Pulumi program.

01:16:57.820 --> 01:16:59.260
<v Speaker 1>We're just generating

01:16:59.260 --> 01:17:01.100
<v Speaker 1>the types and the schema, and then the

01:17:01.100 --> 01:17:02.940
<v Speaker 1>Pulumi engine does all of the work,

01:17:03.420 --> 01:17:05.980
<v Speaker 1>which I think is just wild. Right? Like,

01:17:06.220 --> 01:17:07.500
<v Speaker 1>I think it shows the power of the

01:17:07.500 --> 01:17:10.005
<v Speaker 1>Pulumi engine to be able to to to

01:17:10.005 --> 01:17:11.445
<v Speaker 1>show that you can kind of do these

01:17:11.445 --> 01:17:11.925
<v Speaker 1>things.

01:17:12.645 --> 01:17:14.485
<v Speaker 1>And then there's also the Python SDK as

01:17:14.485 --> 01:17:17.205
<v Speaker 1>well. So that obviously is is available to

01:17:17.205 --> 01:17:19.205
<v Speaker 1>us. Your favorite one. Right?

01:17:19.685 --> 01:17:20.725
<v Speaker 1>My favorite.

01:17:21.045 --> 01:17:22.325
<v Speaker 1>What I'd like to do if we if

01:17:22.325 --> 01:17:23.365
<v Speaker 1>we could see if we can get it

01:17:23.365 --> 01:17:25.120
<v Speaker 1>work with with replace is do a go

01:17:25.120 --> 01:17:26.560
<v Speaker 1>version of this as well.

01:17:27.200 --> 01:17:28.720
<v Speaker 1>But again, like, this is the part this

01:17:28.720 --> 01:17:30.800
<v Speaker 1>is just, you know, the the input types

01:17:30.800 --> 01:17:32.480
<v Speaker 1>that we've got for each of the different

01:17:32.480 --> 01:17:33.360
<v Speaker 1>SDKs.

01:17:34.400 --> 01:17:37.199
<v Speaker 1>And that's basically it. Like, you know, we

01:17:37.680 --> 01:17:39.760
<v Speaker 1>we've we've generated a

01:17:40.235 --> 01:17:41.035
<v Speaker 1>consumable

01:17:41.035 --> 01:17:42.555
<v Speaker 1>thing. And and some of the things that

01:17:42.555 --> 01:17:44.635
<v Speaker 1>I keep thinking are like, I created a

01:17:44.635 --> 01:17:47.195
<v Speaker 1>Pulumi AWS load balancing controller

01:17:50.315 --> 01:17:52.555
<v Speaker 1>multi language component, which I think is an

01:17:52.555 --> 01:17:54.940
<v Speaker 1>amazing use case for this because if you

01:17:54.940 --> 01:17:57.099
<v Speaker 1>think about AWS load balancing controller as an

01:17:57.099 --> 01:17:57.579
<v Speaker 1>example,

01:17:57.900 --> 01:17:59.980
<v Speaker 1>generally to install it, you're gonna need at

01:17:59.980 --> 01:18:02.699
<v Speaker 1>least two different things to actually get it

01:18:02.699 --> 01:18:05.020
<v Speaker 1>working. You're gonna need CloudFormation to deploy the

01:18:05.020 --> 01:18:06.619
<v Speaker 1>AWS IAM roles and all that kind of

01:18:06.619 --> 01:18:08.145
<v Speaker 1>stuff that it needs to use. And then

01:18:08.145 --> 01:18:10.545
<v Speaker 1>also something like Helm or Kubernetes YAML to

01:18:10.545 --> 01:18:11.985
<v Speaker 1>deploy the Kubernetes parts.

01:18:12.225 --> 01:18:15.185
<v Speaker 1>With the AWS load balancing controller Pulumi multi

01:18:15.185 --> 01:18:16.304
<v Speaker 1>language component,

01:18:16.945 --> 01:18:19.425
<v Speaker 1>it just works. Like, it it deploys everything

01:18:19.425 --> 01:18:20.065
<v Speaker 1>in one go.

01:18:20.940 --> 01:18:23.100
<v Speaker 1>And I'm really excited about creating things like

01:18:23.100 --> 01:18:26.060
<v Speaker 1>production ready implementations of Helm charts is a

01:18:26.060 --> 01:18:27.340
<v Speaker 1>really, really good example.

01:18:28.460 --> 01:18:30.540
<v Speaker 1>You know, rather than kind of running a

01:18:30.540 --> 01:18:32.380
<v Speaker 1>bunch of Redis replicas inside,

01:18:33.695 --> 01:18:35.615
<v Speaker 1>you know, inside Kubernetes, you can use your

01:18:35.615 --> 01:18:37.535
<v Speaker 1>cloud providers hosted Redis,

01:18:38.255 --> 01:18:39.695
<v Speaker 1>to to be able to do that. And

01:18:39.695 --> 01:18:42.015
<v Speaker 1>I think Paul already mentioned he did a

01:18:42.175 --> 01:18:45.215
<v Speaker 1>amazing implementation of Google Cloud's Cloud Run multi

01:18:45.215 --> 01:18:47.295
<v Speaker 1>language component, which allows you to just specify.

01:18:47.640 --> 01:18:49.000
<v Speaker 1>All you need to do is specify an

01:18:49.000 --> 01:18:49.640
<v Speaker 1>image,

01:18:49.880 --> 01:18:53.239
<v Speaker 1>and it deploys a multi region global

01:18:53.400 --> 01:18:54.520
<v Speaker 1>Cloud Run

01:18:54.920 --> 01:18:57.160
<v Speaker 1>across all of Google Cloud's infrastructure

01:18:57.240 --> 01:18:58.840
<v Speaker 1>in a single line of code.

01:18:59.320 --> 01:19:01.480
<v Speaker 1>You know, like, it it's so powerful. And

01:19:01.845 --> 01:19:03.125
<v Speaker 1>the other thing as well is if you

01:19:03.125 --> 01:19:05.685
<v Speaker 1>are writing things like Terraform modules or all

01:19:05.685 --> 01:19:07.765
<v Speaker 1>that kind of stuff or CDK constructs,

01:19:07.925 --> 01:19:10.485
<v Speaker 1>you can essentially write these Pulumi multi language

01:19:10.485 --> 01:19:12.805
<v Speaker 1>packages. And instead of kind of going into

01:19:12.805 --> 01:19:13.365
<v Speaker 1>one

01:19:13.845 --> 01:19:14.725
<v Speaker 1>ecosystem,

01:19:14.725 --> 01:19:17.365
<v Speaker 1>either the HCL ecosystem or the AWS ecosystem,

01:19:17.680 --> 01:19:19.600
<v Speaker 1>you can go to all of our supported

01:19:19.600 --> 01:19:22.000
<v Speaker 1>language ecosystems and all of our supported cloud

01:19:22.000 --> 01:19:25.040
<v Speaker 1>providers. So the reach is really, really, really

01:19:25.040 --> 01:19:25.679
<v Speaker 1>far.

01:19:26.240 --> 01:19:27.040
<v Speaker 0>Awesome.

01:19:27.120 --> 01:19:28.159
<v Speaker 0>Very, very cool.

01:19:28.640 --> 01:19:30.880
<v Speaker 0>Well, all of your bits work. I'm I'm

01:19:30.880 --> 01:19:32.765
<v Speaker 0>now really curious if my bit worked and

01:19:32.765 --> 01:19:34.844
<v Speaker 0>whether I can actually browse to this application.

01:19:34.845 --> 01:19:37.165
<v Speaker 0>And my fear is no, but

01:19:39.485 --> 01:19:40.364
<v Speaker 0>damn.

01:19:43.325 --> 01:19:44.364
<v Speaker 1>Maybe

01:19:45.965 --> 01:19:47.325
<v Speaker 1>did we specify a port?

01:19:47.940 --> 01:19:49.940
<v Speaker 1>We didn't specify a port. Oh, we did

01:19:49.940 --> 01:19:51.700
<v Speaker 1>80. Yes. And there's NGINX, so it should

01:19:51.700 --> 01:19:53.140
<v Speaker 1>be working. Oh, well.

01:19:53.700 --> 01:19:56.180
<v Speaker 0>Well, there's something for me to fix later.

01:19:56.180 --> 01:19:57.860
<v Speaker 0>What I will do is just put forward

01:19:57.860 --> 01:19:58.580
<v Speaker 0>to it.

01:19:59.700 --> 01:20:01.140
<v Speaker 0>Least I can pretend some of my stuff

01:20:01.140 --> 01:20:01.540
<v Speaker 0>works.

01:20:03.445 --> 01:20:04.965
<v Speaker 0>80. 80. 80.

01:20:10.085 --> 01:20:10.885
<v Speaker 0>Hey.

01:20:11.685 --> 01:20:12.485
<v Speaker 0>Look at that.

01:20:13.365 --> 01:20:15.364
<v Speaker 0>It's the simple things that keep me happy.

01:20:15.845 --> 01:20:17.365
<v Speaker 1>So what I what I'll be what I

01:20:17.365 --> 01:20:18.885
<v Speaker 1>like if if you if you commit this

01:20:18.885 --> 01:20:19.860
<v Speaker 1>to Git hub,

01:20:20.100 --> 01:20:21.460
<v Speaker 1>you know, this is a great like kind

01:20:21.460 --> 01:20:23.300
<v Speaker 1>of like teaching example,

01:20:23.300 --> 01:20:25.460
<v Speaker 1>like a nice and simple straightforward example of

01:20:25.460 --> 01:20:26.739
<v Speaker 1>a multi language component.

01:20:26.980 --> 01:20:28.740
<v Speaker 1>Again, one of the things that's missing here

01:20:28.740 --> 01:20:30.820
<v Speaker 1>is you're probably going to want to pass

01:20:30.820 --> 01:20:33.460
<v Speaker 1>the load balancer output to other Pulumi resources

01:20:33.735 --> 01:20:35.975
<v Speaker 1>or maybe the namespace that's been created. So

01:20:35.975 --> 01:20:37.415
<v Speaker 1>the next step will be to add those

01:20:37.415 --> 01:20:39.094
<v Speaker 1>outputs, and that would again go in the

01:20:39.094 --> 01:20:39.814
<v Speaker 1>schema.

01:20:40.375 --> 01:20:42.455
<v Speaker 1>So you would say the URL, for example,

01:20:42.455 --> 01:20:44.054
<v Speaker 1>is a great way of kind of exporting

01:20:44.054 --> 01:20:45.735
<v Speaker 1>that thing. And then again, you can pass

01:20:45.735 --> 01:20:48.054
<v Speaker 1>these things and create dependencies between these things.

01:20:49.330 --> 01:20:51.250
<v Speaker 1>So you could say, let's say you wanted

01:20:51.250 --> 01:20:53.010
<v Speaker 1>to register a DNS name for the IP

01:20:53.010 --> 01:20:56.370
<v Speaker 1>address, you could use another Pulumi provider like

01:20:56.370 --> 01:20:58.369
<v Speaker 1>the cloud platform Cloudflare provider,

01:20:58.450 --> 01:21:02.130
<v Speaker 1>pass that output into the DNS output and,

01:21:02.130 --> 01:21:03.250
<v Speaker 1>you know, you're kind of off to the

01:21:03.250 --> 01:21:03.969
<v Speaker 1>races basically.

01:21:04.745 --> 01:21:06.185
<v Speaker 0>Nice. Awesome.

01:21:06.425 --> 01:21:09.705
<v Speaker 0>Very, very cool and powerful system for working

01:21:09.705 --> 01:21:12.264
<v Speaker 0>with Pulumi. It's really cool to see that

01:21:12.425 --> 01:21:13.304
<v Speaker 0>and just

01:21:13.705 --> 01:21:14.985
<v Speaker 0>I'm really impressed that it worked.

01:21:17.300 --> 01:21:18.740
<v Speaker 1>Well, I mean, only like I said, they

01:21:18.740 --> 01:21:20.500
<v Speaker 1>they I'm I'm pretty happy. The only problem

01:21:20.500 --> 01:21:22.260
<v Speaker 1>we had a problem with is the is

01:21:22.260 --> 01:21:23.220
<v Speaker 1>the JSON

01:21:23.300 --> 01:21:24.180
<v Speaker 1>schema.

01:21:24.580 --> 01:21:26.580
<v Speaker 1>We know that there's improvements needed there and

01:21:26.580 --> 01:21:28.100
<v Speaker 1>we're gonna you know, we're working hard on

01:21:28.100 --> 01:21:30.235
<v Speaker 1>those those kind of improvements. But it just

01:21:30.235 --> 01:21:32.075
<v Speaker 1>shows you handwrite something and you're gonna have

01:21:32.075 --> 01:21:33.275
<v Speaker 1>problems, right? Like

01:21:34.795 --> 01:21:37.435
<v Speaker 0>Yeah. But those things, right? Like improving the

01:21:37.435 --> 01:21:39.675
<v Speaker 0>authoring experiences you measure. Those are just quality

01:21:39.675 --> 01:21:41.355
<v Speaker 0>of life things. People can,

01:21:41.515 --> 01:21:43.435
<v Speaker 0>you know, start to take advantage of multi

01:21:43.435 --> 01:21:46.650
<v Speaker 0>language runtimes and packages now allowing them to,

01:21:46.810 --> 01:21:49.370
<v Speaker 0>you know, just like you said, deploying to

01:21:49.370 --> 01:21:51.690
<v Speaker 0>Kubernetes and Helm charts. Like, being able to

01:21:52.090 --> 01:21:55.370
<v Speaker 0>have idiomatic or convention based approaches per organization

01:21:55.370 --> 01:21:58.465
<v Speaker 0>or per team and satisfying that through Pulumi

01:21:58.465 --> 01:22:00.704
<v Speaker 0>packages is a pretty solid way to start

01:22:00.784 --> 01:22:02.704
<v Speaker 0>to start doing that. Yeah. We've had we've

01:22:02.704 --> 01:22:04.784
<v Speaker 1>had, like, large large customers who have large

01:22:04.784 --> 01:22:06.144
<v Speaker 1>engineering organizations

01:22:06.144 --> 01:22:09.025
<v Speaker 1>who are, you know, seeing the capabilities of

01:22:09.025 --> 01:22:11.025
<v Speaker 1>this and realizing that, you know, it means

01:22:11.025 --> 01:22:13.000
<v Speaker 1>that they can can bring in different organizations

01:22:13.000 --> 01:22:15.560
<v Speaker 1>who perhaps don't want to write things in

01:22:15.560 --> 01:22:16.199
<v Speaker 1>go,

01:22:16.760 --> 01:22:18.920
<v Speaker 1>perhaps don't wanna write things in TypeScript.

01:22:19.159 --> 01:22:21.400
<v Speaker 1>You know, they're they're multiplying their capabilities and

01:22:21.400 --> 01:22:24.280
<v Speaker 1>it we have companies who customers who are

01:22:24.280 --> 01:22:25.880
<v Speaker 1>creating internal SDKs

01:22:26.045 --> 01:22:27.724
<v Speaker 1>that kind of abstracts all of the stuff

01:22:27.724 --> 01:22:29.405
<v Speaker 1>away in similar way that we did

01:22:30.284 --> 01:22:32.764
<v Speaker 1>to allow them to kind of really provision

01:22:32.764 --> 01:22:34.525
<v Speaker 1>infrastructure really, really quickly.

01:22:35.485 --> 01:22:38.284
<v Speaker 0>Awesome. There's just two small questions if you're

01:22:38.284 --> 01:22:39.645
<v Speaker 0>happy to take them and then I'll I'll

01:22:39.645 --> 01:22:40.844
<v Speaker 1>link Would love to. Get back to your

01:22:40.844 --> 01:22:41.085
<v Speaker 0>day.

01:22:41.650 --> 01:22:44.930
<v Speaker 0>So, Fanny asks, is it open API schema,

01:22:44.930 --> 01:22:46.210
<v Speaker 0>the schema dot JSON?

01:22:47.170 --> 01:22:49.970
<v Speaker 1>No. It isn't. It's a it's a structure

01:22:49.970 --> 01:22:52.130
<v Speaker 1>of the actual internal Pulumi,

01:22:52.530 --> 01:22:55.344
<v Speaker 1>schema, which is not open API. It's all

01:22:55.344 --> 01:22:57.664
<v Speaker 1>done over gRPC and protocol buffers.

01:22:58.145 --> 01:23:00.304
<v Speaker 1>It's mainly just a it's just mainly just

01:23:00.304 --> 01:23:02.224
<v Speaker 1>a declaration of what things look like.

01:23:03.505 --> 01:23:05.264
<v Speaker 1>If if we think I don't think there

01:23:05.264 --> 01:23:06.784
<v Speaker 1>would be much value in turning that into

01:23:06.784 --> 01:23:07.824
<v Speaker 1>an open API schema.

01:23:08.250 --> 01:23:10.730
<v Speaker 1>We are documenting the skipper schema and maybe

01:23:10.730 --> 01:23:12.250
<v Speaker 1>we could use open API to make sure

01:23:12.250 --> 01:23:14.650
<v Speaker 1>that everybody knows what that looks like. But

01:23:14.650 --> 01:23:16.010
<v Speaker 1>the best thing that you have right now

01:23:16.010 --> 01:23:17.210
<v Speaker 1>is just to take a look in the

01:23:17.210 --> 01:23:19.050
<v Speaker 1>example that we put together and kind of

01:23:19.050 --> 01:23:20.809
<v Speaker 1>fill it out from there. I think you

01:23:20.809 --> 01:23:23.929
<v Speaker 0>should abandon the JSON and and use queue

01:23:23.555 --> 01:23:25.395
<v Speaker 0>for this, but I'm I'll I'll preach the

01:23:25.395 --> 01:23:27.235
<v Speaker 0>q goodness to you another day.

01:23:27.715 --> 01:23:29.395
<v Speaker 0>We got I'm still I'm still in the

01:23:29.395 --> 01:23:31.155
<v Speaker 1>JSON at church. I haven't come out from

01:23:31.155 --> 01:23:34.515
<v Speaker 1>that yet. So Alright. Last question, Andreas, who

01:23:34.515 --> 01:23:36.435
<v Speaker 0>also thanks us for the bleeding edge demo.

01:23:36.435 --> 01:23:38.329
<v Speaker 0>I'm gonna show that again because, know, as

01:23:38.329 --> 01:23:40.170
<v Speaker 0>I do appreciate you joining me today, Lee

01:23:40.170 --> 01:23:42.409
<v Speaker 0>and walking us through this. But Andreas asked,

01:23:42.409 --> 01:23:43.369
<v Speaker 0>is this the same

01:23:43.929 --> 01:23:45.209
<v Speaker 0>quotes magic

01:23:45.369 --> 01:23:47.610
<v Speaker 0>that allows us to use the providers as

01:23:47.610 --> 01:23:48.969
<v Speaker 0>they're based on the same system as the

01:23:48.969 --> 01:23:50.570
<v Speaker 0>providers being concerned for multi languages?

01:23:51.165 --> 01:23:53.405
<v Speaker 1>That is exactly right. Yes. So what we've

01:23:53.405 --> 01:23:55.405
<v Speaker 1>done here is we've taken the magic that

01:23:55.405 --> 01:23:57.485
<v Speaker 1>we have with our providers

01:23:57.485 --> 01:23:59.804
<v Speaker 1>that we use to like, when we bridge

01:23:59.804 --> 01:24:01.885
<v Speaker 1>them from TerraForm providers, when we create the

01:24:01.885 --> 01:24:04.525
<v Speaker 1>Kubernetes and as your native providers, it's the

01:24:04.525 --> 01:24:05.165
<v Speaker 1>same technology.

01:24:05.790 --> 01:24:07.310
<v Speaker 1>And what we've done is just kind of

01:24:07.310 --> 01:24:10.750
<v Speaker 1>extend it into Pulumi components, and we register

01:24:10.750 --> 01:24:13.630
<v Speaker 1>those components inside the actual Pulumi engine.

01:24:14.270 --> 01:24:14.909
<v Speaker 1>So

01:24:15.150 --> 01:24:17.150
<v Speaker 1>the great thing about this is if and

01:24:17.150 --> 01:24:20.205
<v Speaker 1>when we add another language and we're still

01:24:20.205 --> 01:24:22.284
<v Speaker 1>talking internally about what that language might be

01:24:22.284 --> 01:24:24.284
<v Speaker 1>and when that when that will be, I'm

01:24:24.284 --> 01:24:26.205
<v Speaker 1>sure I'll get messages asking for Ruby and

01:24:26.205 --> 01:24:27.485
<v Speaker 1>Java and all that kind of stuff after

01:24:27.485 --> 01:24:29.405
<v Speaker 1>this. Rusty. Rusty,

01:24:29.405 --> 01:24:31.324
<v Speaker 1>we haven't made decisions about this yet. But

01:24:31.324 --> 01:24:33.165
<v Speaker 1>the point I'm gonna make is when we

01:24:33.165 --> 01:24:35.079
<v Speaker 1>do add support for that language,

01:24:35.800 --> 01:24:38.199
<v Speaker 1>updating to that version of the SDK, let's

01:24:38.199 --> 01:24:39.400
<v Speaker 1>say hypothetically

01:24:39.640 --> 01:24:40.600
<v Speaker 1>hypothetically

01:24:40.600 --> 01:24:41.400
<v Speaker 1>people,

01:24:41.880 --> 01:24:43.480
<v Speaker 1>when we add Java support,

01:24:45.080 --> 01:24:46.280
<v Speaker 1>all you'll need to do is update to

01:24:46.280 --> 01:24:48.040
<v Speaker 1>the latest version of the SDK and it

01:24:48.040 --> 01:24:50.495
<v Speaker 1>will generate those language bindings for you and

01:24:50.495 --> 01:24:52.415
<v Speaker 1>you will get you know, every single time

01:24:52.415 --> 01:24:54.575
<v Speaker 1>Pulumi will add a new language SDK in

01:24:54.575 --> 01:24:55.775
<v Speaker 1>the same way that we get for the

01:24:55.775 --> 01:24:56.574
<v Speaker 1>providers,

01:24:56.815 --> 01:24:58.415
<v Speaker 1>like Java support will come in.

01:24:59.455 --> 01:25:01.055
<v Speaker 1>You know, it will happen for the components

01:25:01.055 --> 01:25:02.575
<v Speaker 1>as well. So it's exactly the same technology,

01:25:02.960 --> 01:25:04.239
<v Speaker 1>super powerful,

01:25:04.960 --> 01:25:07.760
<v Speaker 1>you know, magic, you know, Isaac Asimov said,

01:25:07.760 --> 01:25:09.120
<v Speaker 1>you know, indistinguishable

01:25:09.120 --> 01:25:10.719
<v Speaker 1>from magic. Awesome.

01:25:11.199 --> 01:25:13.280
<v Speaker 0>Alright. Pulse taxes, can't wait to see those

01:25:13.280 --> 01:25:15.440
<v Speaker 0>Equinix metal packages. You're damn right. Those are

01:25:15.440 --> 01:25:16.000
<v Speaker 0>coming soon.

01:25:16.635 --> 01:25:18.955
<v Speaker 0>And we've got one last question from Andreas,

01:25:18.955 --> 01:25:20.715
<v Speaker 0>and then that's it. I'm leaving it there.

01:25:21.115 --> 01:25:23.195
<v Speaker 0>Andreas is asking, could you say some words

01:25:23.195 --> 01:25:25.435
<v Speaker 0>about the isolation between two components from a

01:25:25.435 --> 01:25:26.715
<v Speaker 0>runtime perspective?

01:25:27.595 --> 01:25:29.514
<v Speaker 0>Read NPM dependencies.

01:25:29.515 --> 01:25:30.555
<v Speaker 0>Does that make sense to you?

01:25:31.370 --> 01:25:33.210
<v Speaker 1>I think so. If I'm not getting this

01:25:33.210 --> 01:25:34.890
<v Speaker 1>right, Andres, then please feel free to reach

01:25:34.890 --> 01:25:37.369
<v Speaker 1>out to me on Twitter at Brigzel. Essentially,

01:25:38.490 --> 01:25:41.770
<v Speaker 1>the the the the runtime dependencies are basically

01:25:42.170 --> 01:25:43.850
<v Speaker 1>because we built this in Go, we obviously

01:25:43.850 --> 01:25:45.930
<v Speaker 1>need to actually bundle the Go dependencies into

01:25:45.930 --> 01:25:48.465
<v Speaker 1>the binary, which is know, from a user

01:25:48.465 --> 01:25:51.265
<v Speaker 1>perspective, like, not completely transparent. They don't need

01:25:51.265 --> 01:25:52.225
<v Speaker 1>to know about that.

01:25:53.025 --> 01:25:55.425
<v Speaker 1>When we generated the SDK, if you remember,

01:25:55.425 --> 01:25:57.425
<v Speaker 1>we looked at the schema dot JSON really

01:25:57.425 --> 01:25:59.425
<v Speaker 1>early on and we defined what those runtime

01:25:59.280 --> 01:26:01.840
<v Speaker 1>dependencies were because we know we're gonna use

01:26:01.840 --> 01:26:03.359
<v Speaker 1>the Kubernetes SDK.

01:26:03.679 --> 01:26:06.000
<v Speaker 1>And so that when we generate that SDK,

01:26:06.000 --> 01:26:08.719
<v Speaker 1>for example, NPM or PIPE, it generates a

01:26:08.719 --> 01:26:11.039
<v Speaker 1>package dot JSON with those dependencies in there.

01:26:12.045 --> 01:26:13.885
<v Speaker 1>And so you as the user have full

01:26:13.885 --> 01:26:16.925
<v Speaker 1>control over what dependencies the the thing needs.

01:26:17.324 --> 01:26:18.844
<v Speaker 1>An example that I put to that I'm

01:26:18.844 --> 01:26:20.284
<v Speaker 1>putting together right now is,

01:26:20.844 --> 01:26:22.045
<v Speaker 1>you know, you might

01:26:22.844 --> 01:26:24.205
<v Speaker 1>one the things I'm gonna write one of

01:26:24.205 --> 01:26:27.130
<v Speaker 1>these in Python, god forbid. But

01:26:27.130 --> 01:26:28.970
<v Speaker 1>I'm also going to try and update the

01:26:29.050 --> 01:26:30.650
<v Speaker 1>and it's gonna be an IAM type provider

01:26:30.650 --> 01:26:31.929
<v Speaker 1>that uses parliament

01:26:32.090 --> 01:26:32.969
<v Speaker 1>as a,

01:26:33.610 --> 01:26:35.770
<v Speaker 1>you know, as a linter for those IAM

01:26:35.770 --> 01:26:36.490
<v Speaker 1>profiles

01:26:36.650 --> 01:26:38.010
<v Speaker 1>sorry, IAM policies.

01:26:38.250 --> 01:26:39.770
<v Speaker 1>That will need to be installed when you

01:26:39.770 --> 01:26:42.434
<v Speaker 1>actually kind of install the the component itself.

01:26:42.514 --> 01:26:44.114
<v Speaker 1>But you have control over what the user

01:26:44.114 --> 01:26:47.475
<v Speaker 1>installs. There's no cross dependencies between these things.

01:26:47.475 --> 01:26:48.034
<v Speaker 1>So,

01:26:49.315 --> 01:26:51.635
<v Speaker 1>you know, as a as a Go author,

01:26:51.635 --> 01:26:53.395
<v Speaker 1>I don't need to tell them to install

01:26:53.395 --> 01:26:55.795
<v Speaker 1>any Go modules or Python modules. It's just

01:26:55.795 --> 01:26:57.580
<v Speaker 1>the actual runtime that they're selecting. Selecting.

01:26:58.140 --> 01:26:58.860
<v Speaker 0>Awesome.

01:26:59.660 --> 01:27:01.980
<v Speaker 0>Alright. Thank you very much, Lee. It's always

01:27:01.980 --> 01:27:03.500
<v Speaker 0>a pleasure to spend a bit of time

01:27:03.500 --> 01:27:05.100
<v Speaker 0>with you even more so when you're showing

01:27:05.100 --> 01:27:06.300
<v Speaker 0>me Pulumi awesomeness.

01:27:09.945 --> 01:27:11.864
<v Speaker 0>If if anyone else does have any more

01:27:11.864 --> 01:27:14.505
<v Speaker 0>questions, I've stuck Lee's Twitter handle on the

01:27:14.505 --> 01:27:15.784
<v Speaker 0>screen. I'm sure he'd be more than happy

01:27:15.784 --> 01:27:17.705
<v Speaker 0>to help you. He's also very active in

01:27:17.705 --> 01:27:19.385
<v Speaker 0>the Pulumi Slack, which I would encourage you

01:27:19.385 --> 01:27:20.985
<v Speaker 0>all to join and ask loads of awesome

01:27:20.985 --> 01:27:23.945
<v Speaker 0>questions about this magic that is happening here.

01:27:23.945 --> 01:27:25.065
<v Speaker 0>Any last words, Lee?

01:27:26.360 --> 01:27:27.960
<v Speaker 1>No. I I really appreciate,

01:27:28.360 --> 01:27:29.800
<v Speaker 1>kind of spending time with you and not

01:27:29.800 --> 01:27:31.719
<v Speaker 1>being under the pressure of fixing a Kubernetes

01:27:31.719 --> 01:27:32.840
<v Speaker 1>cluster. So,

01:27:33.320 --> 01:27:34.840
<v Speaker 1>yeah, it was really great, and I'm looking

01:27:34.840 --> 01:27:36.440
<v Speaker 1>forward to kinda coming on next time we

01:27:36.440 --> 01:27:38.280
<v Speaker 1>have more awesome features and showing them off.

01:27:38.485 --> 01:27:41.605
<v Speaker 0>Awesome. I cannot wait. Alright. You enjoy the

01:27:41.605 --> 01:27:43.445
<v Speaker 0>rest of your day. I'm gonna finish off

01:27:43.445 --> 01:27:45.045
<v Speaker 0>today. I will speak to you soon. Everyone

01:27:45.045 --> 01:27:47.525
<v Speaker 0>that watched, thank you. Have a great day.

01:27:47.685 --> 01:27:48.565
<v Speaker 0>Awesome. Thanks. Bye.

01:27:51.229 --> 01:27:53.149
<v Speaker 0>I just clicked finish, and it said video

01:27:53.149 --> 01:27:54.589
<v Speaker 0>not found. So we're gonna do this lo

01:27:54.589 --> 01:27:55.549
<v Speaker 0>fi. Bye bye.
