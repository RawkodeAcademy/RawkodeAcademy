WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 75b45e9f-5a0e-4492-89d3-6497473c9de2
Created: 2025-04-29T15:38:57.838Z
Duration: 5208.1494
Channels: 1

00:02:59.435 --> 00:03:02.635
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:03:02.715 --> 00:03:05.114
<v Speaker 0>I am your host, David Flanagan, also known

00:03:05.114 --> 00:03:06.715
<v Speaker 0>across Internet as Rawkode.

00:03:07.114 --> 00:03:08.795
<v Speaker 0>Today, we are taking a look at a

00:03:08.795 --> 00:03:11.355
<v Speaker 0>new tool to help simplify deployments

00:03:11.355 --> 00:03:12.155
<v Speaker 0>to Kubernetes.

00:03:12.930 --> 00:03:14.850
<v Speaker 0>The tool is called Acorn,

00:03:14.850 --> 00:03:16.610
<v Speaker 0>and and tradition to to us today and

00:03:16.610 --> 00:03:19.650
<v Speaker 0>giving us more context and insights is Darren

00:03:19.650 --> 00:03:20.450
<v Speaker 0>Shepherd,

00:03:20.530 --> 00:03:23.250
<v Speaker 0>the chief architect and vendor. Hey, man. How's

00:03:23.250 --> 00:03:24.450
<v Speaker 0>it going? Hello.

00:03:24.690 --> 00:03:27.010
<v Speaker 1>Good. Good. Excited to be here. Excited to

00:03:27.010 --> 00:03:27.810
<v Speaker 1>show off Acorn.

00:03:28.474 --> 00:03:30.635
<v Speaker 0>Awesome. Well, thank you for joining us today.

00:03:30.635 --> 00:03:33.034
<v Speaker 0>I think I I'm particularly excited for this

00:03:33.034 --> 00:03:34.795
<v Speaker 0>one. I'm looking forward to seeing how we

00:03:34.795 --> 00:03:37.194
<v Speaker 0>can kind of change the way that Kubernetes

00:03:37.194 --> 00:03:39.194
<v Speaker 0>apps are deployed today. We are in a

00:03:39.194 --> 00:03:41.594
<v Speaker 0>a very interesting landscape. I don't know if

00:03:41.594 --> 00:03:43.275
<v Speaker 0>that's the right way to phrase it. But

00:03:43.275 --> 00:03:45.410
<v Speaker 0>I remember speaking to Brian Grant once at

00:03:45.410 --> 00:03:47.410
<v Speaker 0>Google, and he said he has a spreadsheet

00:03:47.410 --> 00:03:49.410
<v Speaker 0>and has over a thousand tools

00:03:49.569 --> 00:03:51.650
<v Speaker 0>to deploy to Kubernetes customers.

00:03:51.730 --> 00:03:52.530
<v Speaker 0>That's

00:03:52.530 --> 00:03:54.530
<v Speaker 0>a lot my gosh. Yeah. Yeah. A lot

00:03:54.530 --> 00:03:56.785
<v Speaker 0>of opinions. So before

00:03:56.785 --> 00:03:58.385
<v Speaker 0>we take a look at Acorn, do you

00:03:58.385 --> 00:04:00.465
<v Speaker 0>wanna give us a a quick introduction into

00:04:00.465 --> 00:04:01.985
<v Speaker 0>who you are and what you're up to?

00:04:03.425 --> 00:04:06.065
<v Speaker 1>Yeah. So so, yeah, so I'm Darren Sheppard.

00:04:06.065 --> 00:04:09.345
<v Speaker 1>I'm the chief architect at Acorn Labs labs.

00:04:09.345 --> 00:04:11.584
<v Speaker 1>So we're a new startup doing Acorn.

00:04:12.220 --> 00:04:13.020
<v Speaker 1>Previously,

00:04:13.020 --> 00:04:14.380
<v Speaker 1>I was at Rancher,

00:04:14.940 --> 00:04:16.940
<v Speaker 1>so I've kinda been in the Kubernetes space

00:04:16.940 --> 00:04:17.740
<v Speaker 1>for a while.

00:04:18.300 --> 00:04:20.540
<v Speaker 1>Currently, k three s. That's probably the most

00:04:20.540 --> 00:04:21.500
<v Speaker 1>popular thing

00:04:22.140 --> 00:04:23.340
<v Speaker 1>that I've that I've done.

00:04:24.235 --> 00:04:25.995
<v Speaker 1>So, yeah, that's kind of my background. Been

00:04:25.995 --> 00:04:27.755
<v Speaker 1>doing k three s for a while. And

00:04:27.835 --> 00:04:28.475
<v Speaker 1>and

00:04:29.275 --> 00:04:30.955
<v Speaker 1>if you follow me on Twitter, I'm on

00:04:30.955 --> 00:04:32.475
<v Speaker 1>Twitter at I Build The Cloud.

00:04:33.835 --> 00:04:35.995
<v Speaker 1>I'm I'm pretty well known for just complaining

00:04:35.995 --> 00:04:39.789
<v Speaker 1>about everything. Just frustrated and complaining about everything.

00:04:39.789 --> 00:04:41.389
<v Speaker 1>And so so yeah.

00:04:41.789 --> 00:04:43.630
<v Speaker 0>Yeah. That's that's not a bad thing. Like,

00:04:43.630 --> 00:04:45.789
<v Speaker 0>when we get frustrated at software, we get

00:04:45.789 --> 00:04:48.750
<v Speaker 0>to bring our opinions and hopefully make the

00:04:48.750 --> 00:04:50.990
<v Speaker 0>entire community and ecosystem better

00:04:51.555 --> 00:04:53.955
<v Speaker 0>by solving some of those frustrations. Right? And

00:04:53.955 --> 00:04:55.715
<v Speaker 0>I I'm hoping that's what Yeah. Is to

00:04:55.715 --> 00:04:57.555
<v Speaker 0>some degree that as you take a look

00:04:57.555 --> 00:05:00.355
<v Speaker 0>at this landscape of Kubernetes, this can be

00:05:00.355 --> 00:05:01.235
<v Speaker 0>better. Yeah.

00:05:02.275 --> 00:05:04.115
<v Speaker 1>I mean, that's, like, their basic idea is,

00:05:04.115 --> 00:05:05.350
<v Speaker 1>like, it's just try to you know, it's

00:05:05.350 --> 00:05:06.630
<v Speaker 1>like I complain a lot, but I also

00:05:06.630 --> 00:05:08.390
<v Speaker 1>do write software and try to fix things.

00:05:08.390 --> 00:05:10.150
<v Speaker 1>And so the idea with with Acorn is

00:05:10.150 --> 00:05:12.950
<v Speaker 1>to try to, you know, make deploying apps

00:05:12.950 --> 00:05:14.070
<v Speaker 1>on Kubernetes,

00:05:14.390 --> 00:05:15.990
<v Speaker 1>you know, just a simpler experience.

00:05:17.405 --> 00:05:19.085
<v Speaker 0>Well, yeah. I mean, you've got that bit

00:05:19.085 --> 00:05:21.164
<v Speaker 0>of a legacy behind you now with KCS.

00:05:21.164 --> 00:05:23.885
<v Speaker 0>Like, deploying and running a Kubernetes cluster is

00:05:24.125 --> 00:05:26.604
<v Speaker 0>cumbersome at best and painful

00:05:26.604 --> 00:05:27.325
<v Speaker 0>and

00:05:27.405 --> 00:05:30.125
<v Speaker 0>sleep deprived at worst. And that single lane

00:05:30.125 --> 00:05:31.565
<v Speaker 0>deploy of KCS

00:05:31.990 --> 00:05:35.030
<v Speaker 0>really made everyone's lives a lot simpler and

00:05:35.030 --> 00:05:36.950
<v Speaker 0>easier. So, you know,

00:05:37.830 --> 00:05:39.750
<v Speaker 0>hopefully, you're bringing that same

00:05:40.150 --> 00:05:43.590
<v Speaker 0>kind of frustration solving approach driven development to

00:05:43.590 --> 00:05:45.750
<v Speaker 0>Acorn, and hopefully, it's helping everybody as well.

00:05:46.925 --> 00:05:48.445
<v Speaker 1>Yeah. Yeah. So, I mean, so, like, when

00:05:48.445 --> 00:05:50.045
<v Speaker 1>I announced Acorn, the kind of the the

00:05:50.045 --> 00:05:51.965
<v Speaker 1>blog, I I I wrote a blog that

00:05:51.965 --> 00:05:53.405
<v Speaker 1>kind of told a little story about with

00:05:53.405 --> 00:05:54.365
<v Speaker 1>my son where I

00:05:55.565 --> 00:05:57.325
<v Speaker 1>he wanted a Minecraft server.

00:05:57.805 --> 00:05:59.610
<v Speaker 1>He wanted me to run Minecraft server. So

00:05:59.610 --> 00:06:01.290
<v Speaker 1>I went and I ran a k three

00:06:01.290 --> 00:06:01.850
<v Speaker 1>s.

00:06:02.090 --> 00:06:03.450
<v Speaker 1>So, you know, it's like I created k

00:06:03.450 --> 00:06:04.570
<v Speaker 1>three s. I can go and run it.

00:06:04.570 --> 00:06:06.490
<v Speaker 1>It's really simple. And then I started, like,

00:06:06.570 --> 00:06:09.050
<v Speaker 1>creating the Minecraft server on there, and and

00:06:09.050 --> 00:06:10.650
<v Speaker 1>I just got frustrated with it. I was

00:06:10.650 --> 00:06:12.010
<v Speaker 1>just like, this is just way too much

00:06:12.010 --> 00:06:14.010
<v Speaker 1>effort. And I went back to Docker Compose,

00:06:14.010 --> 00:06:15.324
<v Speaker 1>and I'm just like, there's there's gotta be

00:06:15.324 --> 00:06:17.005
<v Speaker 1>a better, you know, a better way to

00:06:17.005 --> 00:06:18.125
<v Speaker 1>run applications.

00:06:18.125 --> 00:06:20.285
<v Speaker 1>Because, like, for just some simple little side

00:06:20.285 --> 00:06:22.205
<v Speaker 1>thing, like running the Minecraft servers, like, this

00:06:22.205 --> 00:06:23.485
<v Speaker 1>is just way too much effort.

00:06:24.285 --> 00:06:25.645
<v Speaker 1>So I kind of look at it as,

00:06:25.645 --> 00:06:26.045
<v Speaker 1>like,

00:06:26.445 --> 00:06:26.764
<v Speaker 1>you know,

00:06:27.750 --> 00:06:29.349
<v Speaker 1>k three s was my best attempt at

00:06:29.349 --> 00:06:29.830
<v Speaker 1>making

00:06:30.310 --> 00:06:32.470
<v Speaker 1>running the cluster really easy for just kind

00:06:32.470 --> 00:06:34.150
<v Speaker 1>of like a random person or or there's

00:06:34.150 --> 00:06:36.229
<v Speaker 1>a lot of, you know, amazing production use

00:06:36.229 --> 00:06:36.949
<v Speaker 1>cases for it. But

00:06:37.750 --> 00:06:39.190
<v Speaker 1>so this is like, now I wanna move

00:06:39.190 --> 00:06:41.190
<v Speaker 1>up the stack and just focus on deployments.

00:06:41.190 --> 00:06:43.155
<v Speaker 1>Like, how do you actually make consuming and

00:06:43.155 --> 00:06:45.075
<v Speaker 1>using Kubernetes easier?

00:06:45.875 --> 00:06:46.675
<v Speaker 0>Awesome.

00:06:46.675 --> 00:06:47.235
<v Speaker 0>So

00:06:47.635 --> 00:06:49.475
<v Speaker 0>I'm going for a a correction before I

00:06:49.475 --> 00:06:51.155
<v Speaker 0>get something really wrong. I think that's thousand

00:06:51.155 --> 00:06:52.595
<v Speaker 0>tools. I know it's, it's a hundred. I'm

00:06:52.595 --> 00:06:54.275
<v Speaker 0>starting to doubt myself, but I can't remember.

00:06:54.275 --> 00:06:55.875
<v Speaker 0>So I'm gonna clarify that later. But just

00:06:55.875 --> 00:06:57.955
<v Speaker 0>in case anyone's sitting right here Okay. Ridiculous.

00:06:58.170 --> 00:06:59.850
<v Speaker 1>Well, all you have to do yeah. Just

00:06:59.850 --> 00:07:01.610
<v Speaker 1>just look at the CNCF

00:07:01.610 --> 00:07:02.730
<v Speaker 1>landscape,

00:07:02.730 --> 00:07:04.730
<v Speaker 1>and, like, that convinces you of the complexity.

00:07:04.730 --> 00:07:06.250
<v Speaker 1>It's like, you know, that thing just the

00:07:06.250 --> 00:07:08.570
<v Speaker 1>icons just keep getting smaller and smaller on

00:07:08.570 --> 00:07:09.690
<v Speaker 1>there. So

00:07:09.930 --> 00:07:12.650
<v Speaker 0>Yeah. More and more things to learn all

00:07:12.650 --> 00:07:14.955
<v Speaker 0>the time. But I'm not I'm not gonna

00:07:14.955 --> 00:07:16.075
<v Speaker 0>run up with that today.

00:07:16.475 --> 00:07:17.995
<v Speaker 0>Alright. Let's talk about,

00:07:18.395 --> 00:07:19.115
<v Speaker 0>you know,

00:07:19.514 --> 00:07:20.235
<v Speaker 0>kind of

00:07:20.955 --> 00:07:23.115
<v Speaker 0>I wanna touch on the inspiration behind Acorn.

00:07:23.115 --> 00:07:25.435
<v Speaker 0>Like, I'm assuming your your first Kubernetes application

00:07:25.435 --> 00:07:28.395
<v Speaker 0>deployment wasn't with Acorn, of course. So I'm

00:07:28.395 --> 00:07:30.080
<v Speaker 0>curious about Oh, no. Of course. Yeah. You

00:07:30.080 --> 00:07:31.040
<v Speaker 0>know, what's your

00:07:31.360 --> 00:07:33.280
<v Speaker 0>what's your journey there? Did you if you

00:07:33.280 --> 00:07:34.800
<v Speaker 0>always just use straight up YAML, have you

00:07:34.800 --> 00:07:36.000
<v Speaker 0>played with other tools?

00:07:36.320 --> 00:07:37.520
<v Speaker 0>How did we get to where we are

00:07:37.360 --> 00:07:37.840
<v Speaker 0>Yeah.

00:07:40.160 --> 00:07:43.920
<v Speaker 1>So, I mean, I've so honestly so the

00:07:43.305 --> 00:07:45.705
<v Speaker 1>my biggest focus within, like, the Kubernetes world

00:07:45.705 --> 00:07:48.345
<v Speaker 1>has actually been helping people deploy clusters. And

00:07:48.345 --> 00:07:51.465
<v Speaker 1>so I haven't spent, like, a significant like,

00:07:51.465 --> 00:07:52.265
<v Speaker 1>I haven't spent

00:07:52.824 --> 00:07:56.104
<v Speaker 1>a significant time, like, myself having to write

00:07:56.104 --> 00:07:58.640
<v Speaker 1>and manage deployments on top of Kubernetes because

00:07:58.640 --> 00:08:00.400
<v Speaker 1>I've, you know, last five or six years

00:08:00.400 --> 00:08:01.600
<v Speaker 1>at at Rancher,

00:08:01.760 --> 00:08:04.000
<v Speaker 1>which is all about running clusters, so the

00:08:04.000 --> 00:08:05.200
<v Speaker 1>infrastructure ends.

00:08:06.800 --> 00:08:09.280
<v Speaker 1>So I haven't you know, my my past

00:08:09.280 --> 00:08:12.145
<v Speaker 1>is not so much running applications

00:08:12.625 --> 00:08:13.505
<v Speaker 1>specifically.

00:08:13.505 --> 00:08:15.025
<v Speaker 1>Because, like, honestly, whenever I got into that

00:08:15.025 --> 00:08:16.625
<v Speaker 1>space, I would just get frustrated.

00:08:17.185 --> 00:08:19.185
<v Speaker 1>But at Rancher, like, we did our best

00:08:19.185 --> 00:08:21.985
<v Speaker 1>to really try to standardize around Helm. We

00:08:21.985 --> 00:08:23.185
<v Speaker 1>did a lot of Helm. So I know

00:08:23.185 --> 00:08:26.030
<v Speaker 1>Helm, like, through and through every little trick

00:08:26.030 --> 00:08:26.910
<v Speaker 1>with it.

00:08:27.150 --> 00:08:29.229
<v Speaker 1>Know the guts of that very, very well.

00:08:29.870 --> 00:08:32.190
<v Speaker 1>And so we kind of did our best

00:08:32.190 --> 00:08:33.630
<v Speaker 1>to try to make

00:08:33.950 --> 00:08:35.950
<v Speaker 1>you know, like, how can we manage deployments

00:08:35.565 --> 00:08:37.965
<v Speaker 1>with Helm? And so that's kind of one

00:08:37.965 --> 00:08:40.765
<v Speaker 1>of the like, just looking at the complexities

00:08:40.765 --> 00:08:41.245
<v Speaker 1>of,

00:08:41.645 --> 00:08:43.645
<v Speaker 1>creating Helm charts. But the thing that was

00:08:43.645 --> 00:08:45.005
<v Speaker 1>interesting when I looked at Helm was it

00:08:45.005 --> 00:08:46.285
<v Speaker 1>was like, well, how could I do Helm

00:08:46.285 --> 00:08:46.845
<v Speaker 1>better?

00:08:47.565 --> 00:08:49.699
<v Speaker 1>And it's like, well, you know, you could

00:08:49.699 --> 00:08:52.100
<v Speaker 1>definitely improve, like, the syntax or something. You

00:08:52.100 --> 00:08:55.220
<v Speaker 1>know? The the templating is kind of difficult.

00:08:55.379 --> 00:08:57.699
<v Speaker 1>But, fundamentally, the the thing with Helm was

00:08:57.699 --> 00:08:58.260
<v Speaker 1>that

00:08:58.579 --> 00:09:01.620
<v Speaker 1>Kubernetes can do anything, and, therefore, Helm can

00:09:01.620 --> 00:09:03.699
<v Speaker 1>do anything because it's designed to just package

00:09:03.699 --> 00:09:04.100
<v Speaker 1>anything.

00:09:04.595 --> 00:09:06.435
<v Speaker 1>And so that kind of led to this

00:09:06.435 --> 00:09:07.955
<v Speaker 1>problem of, like, well, I can't really actually

00:09:07.955 --> 00:09:09.715
<v Speaker 1>make Helm better because it has to do

00:09:09.715 --> 00:09:10.835
<v Speaker 1>absolutely everything.

00:09:10.995 --> 00:09:12.995
<v Speaker 1>So, like, when I started Acorn was like,

00:09:12.995 --> 00:09:15.155
<v Speaker 1>well, what if I just focus on application?

00:09:15.155 --> 00:09:17.715
<v Speaker 1>Not like I wanna deploy a CNI driver

00:09:17.715 --> 00:09:20.100
<v Speaker 1>or, you know, like, the storage system, the

00:09:20.100 --> 00:09:22.339
<v Speaker 1>real low level stuff that needs, like, privileges

00:09:22.339 --> 00:09:24.339
<v Speaker 1>and, like, you know, low level like, what

00:09:24.339 --> 00:09:26.100
<v Speaker 1>if I just focus on applications?

00:09:27.140 --> 00:09:29.620
<v Speaker 1>Can I make that better? And so, like,

00:09:29.620 --> 00:09:30.820
<v Speaker 1>as I looked at that, it's like, oh,

00:09:30.820 --> 00:09:33.380
<v Speaker 1>yeah. This becomes drastically easier if we just

00:09:33.380 --> 00:09:35.125
<v Speaker 1>kinda look at the application domain.

00:09:35.285 --> 00:09:36.645
<v Speaker 1>And so that's, you know, that's kinda where

00:09:36.645 --> 00:09:39.685
<v Speaker 1>Acorn sits. It's like Helm does absolutely everything,

00:09:39.685 --> 00:09:41.925
<v Speaker 1>you kinda get the the pros and cons

00:09:41.925 --> 00:09:43.925
<v Speaker 1>of that, but Acorn is is focused more

00:09:43.925 --> 00:09:44.805
<v Speaker 1>on just the

00:09:45.205 --> 00:09:46.725
<v Speaker 1>application deployments.

00:09:46.805 --> 00:09:49.000
<v Speaker 1>Yeah. Yeah. I mean, this is no surprise

00:09:49.000 --> 00:09:50.680
<v Speaker 0>to people who have watched my channel before,

00:09:50.680 --> 00:09:53.079
<v Speaker 0>but this is our first conversation. My my

00:09:53.240 --> 00:09:54.920
<v Speaker 0>not I don't wanna say hatred of Helm,

00:09:54.920 --> 00:09:55.800
<v Speaker 0>but I have a

00:09:56.279 --> 00:09:57.879
<v Speaker 0>not a lot of pretty happy things to

00:09:57.879 --> 00:09:59.879
<v Speaker 0>say about Helm. And it's not because it's

00:09:59.800 --> 00:10:01.399
<v Speaker 0>tool. It's because

00:10:02.735 --> 00:10:04.895
<v Speaker 0>every option in a Helm chart now becomes

00:10:04.895 --> 00:10:06.735
<v Speaker 0>a point of configuration. And we end up

00:10:06.735 --> 00:10:08.015
<v Speaker 0>with this explosion

00:10:08.095 --> 00:10:11.455
<v Speaker 0>of interpolation and templating and conditionals and a

00:10:11.455 --> 00:10:13.215
<v Speaker 0>huge values Yep. You know, which now needs

00:10:13.215 --> 00:10:15.600
<v Speaker 0>a schema, which now have baked the comments.

00:10:15.600 --> 00:10:16.480
<v Speaker 0>And I'm just like,

00:10:17.200 --> 00:10:19.120
<v Speaker 0>we've went down a very dark path here

00:10:19.120 --> 00:10:21.600
<v Speaker 0>and we're we're kinda not doing best practice.

00:10:21.600 --> 00:10:23.440
<v Speaker 0>We're not even doing good practice. We're just

00:10:23.440 --> 00:10:25.360
<v Speaker 0>retrofitting something.

00:10:25.680 --> 00:10:27.279
<v Speaker 0>I'm also not a fan of code template

00:10:27.279 --> 00:10:28.480
<v Speaker 0>language either.

00:10:28.895 --> 00:10:31.135
<v Speaker 0>I think, you know Me neither. Yeah. Mean

00:10:32.495 --> 00:10:34.575
<v Speaker 0>Yeah. Go for it. Yeah. Go ahead. I

00:10:34.575 --> 00:10:36.495
<v Speaker 1>mean, I've made the comment before. Like, I

00:10:36.495 --> 00:10:38.335
<v Speaker 1>think the only reason why it's popular is

00:10:38.335 --> 00:10:40.095
<v Speaker 1>because it's in the SDK. It's like it's

00:10:40.095 --> 00:10:42.015
<v Speaker 1>it's just part of Golang itself, so people

00:10:42.015 --> 00:10:43.295
<v Speaker 1>are like, oh, I'll just default to that.

00:10:43.295 --> 00:10:44.830
<v Speaker 1>I don't have to have another library. But

00:10:44.830 --> 00:10:45.470
<v Speaker 1>it is

00:10:46.029 --> 00:10:47.150
<v Speaker 1>one of the,

00:10:47.870 --> 00:10:49.230
<v Speaker 1>yeah, kind of oddest

00:10:50.830 --> 00:10:52.190
<v Speaker 1>I don't know how to say it nice.

00:10:52.190 --> 00:10:54.350
<v Speaker 1>I'm not a fan either. You know?

00:10:54.750 --> 00:10:56.750
<v Speaker 0>Yeah. I mean, we don't need to go

00:10:56.750 --> 00:10:58.910
<v Speaker 0>into start discussing template in languages, but a

00:10:58.910 --> 00:11:00.885
<v Speaker 0>lot of other languages have kind of just

00:11:00.885 --> 00:11:03.045
<v Speaker 0>adopted Jinja or some form of Jinja, and

00:11:03.045 --> 00:11:04.805
<v Speaker 0>that works relatively well. But Go, we just

00:11:04.805 --> 00:11:07.605
<v Speaker 0>went a completely different route. And it goes

00:11:07.605 --> 00:11:09.685
<v Speaker 0>against Yeah. What I'm familiar with for So

00:11:09.685 --> 00:11:10.325
<v Speaker 1>all these tool

00:11:11.605 --> 00:11:13.840
<v Speaker 1>it's like all these tools, like because I

00:11:13.840 --> 00:11:15.280
<v Speaker 1>get frustrated too. It's like I get frustrated

00:11:15.280 --> 00:11:17.680
<v Speaker 1>with Kubernetes because, like, Kubernetes fundamentally just is

00:11:17.680 --> 00:11:19.280
<v Speaker 1>kind of, like, raw verbose thing you have

00:11:19.280 --> 00:11:20.880
<v Speaker 1>to deal with. Or I get frustrated with

00:11:20.880 --> 00:11:21.520
<v Speaker 1>Helm.

00:11:21.760 --> 00:11:23.680
<v Speaker 1>And and it's like you know, because people

00:11:23.680 --> 00:11:24.960
<v Speaker 1>have said, like, well, you know, why don't

00:11:24.960 --> 00:11:26.640
<v Speaker 1>you commit to, like, core Kubernetes and make

00:11:26.640 --> 00:11:27.920
<v Speaker 1>it better? And it's like, well, I can't

00:11:27.920 --> 00:11:29.735
<v Speaker 1>necessarily make it better because, like, it is

00:11:29.735 --> 00:11:31.815
<v Speaker 1>what it is. Like, it is as powerful

00:11:31.815 --> 00:11:34.535
<v Speaker 1>and as successful as it is because of

00:11:34.535 --> 00:11:36.775
<v Speaker 1>the raw and verbose nature because it's like,

00:11:36.775 --> 00:11:38.935
<v Speaker 1>it's a platform that does everything for everyone.

00:11:39.335 --> 00:11:40.615
<v Speaker 1>So, like,

00:11:40.935 --> 00:11:42.720
<v Speaker 1>I don't think there's anything, like, funded like,

00:11:42.720 --> 00:11:43.920
<v Speaker 1>because all I'm saying, like, I'm trying to

00:11:43.920 --> 00:11:46.079
<v Speaker 1>make running apps on Kubernetes easier. It's like,

00:11:46.079 --> 00:11:47.600
<v Speaker 1>I don't think there's anything fundamentally wrong with

00:11:47.600 --> 00:11:50.399
<v Speaker 1>Kubernetes. It's just there's not a proper, like,

00:11:50.399 --> 00:11:53.120
<v Speaker 1>application abstraction on top of Kubernetes that exists

00:11:53.120 --> 00:11:55.675
<v Speaker 1>today. And, like, everyone who's done that has

00:11:55.675 --> 00:11:57.195
<v Speaker 1>basically kind of failed.

00:11:57.514 --> 00:11:59.675
<v Speaker 1>And, like, my kinda hypothesis there is that

00:11:59.675 --> 00:12:02.634
<v Speaker 1>is people that focus too much on CRDs

00:12:02.634 --> 00:12:04.154
<v Speaker 1>and Kubernetes APIs,

00:12:04.875 --> 00:12:06.634
<v Speaker 1>that that kinda laid you down a dark

00:12:06.634 --> 00:12:09.410
<v Speaker 1>path that's, like, kind of not compatible with

00:12:09.410 --> 00:12:10.690
<v Speaker 1>a lot of things. Because I I failed

00:12:10.690 --> 00:12:12.130
<v Speaker 1>in the same way. There was another project

00:12:12.130 --> 00:12:14.050
<v Speaker 1>I did a couple years ago called Rio

00:12:14.050 --> 00:12:15.650
<v Speaker 1>where I was trying to address kind of

00:12:15.650 --> 00:12:17.010
<v Speaker 1>this application layer.

00:12:17.490 --> 00:12:19.330
<v Speaker 1>And that you know, there were some interesting

00:12:19.330 --> 00:12:20.770
<v Speaker 1>things we did there, but all in all,

00:12:20.770 --> 00:12:22.690
<v Speaker 1>it was not what I wanted it to

00:12:22.690 --> 00:12:25.125
<v Speaker 1>be. And kinda my takeaway from that was,

00:12:25.125 --> 00:12:27.445
<v Speaker 1>like, if I'm really focusing on application,

00:12:27.925 --> 00:12:28.485
<v Speaker 1>you

00:12:28.965 --> 00:12:30.405
<v Speaker 1>can't get too much into the weeds of

00:12:30.405 --> 00:12:32.885
<v Speaker 1>Kubernetes. Like, you need to abstract yourself. So,

00:12:32.885 --> 00:12:34.805
<v Speaker 1>like, with Acorn, we took a stronger approach

00:12:34.805 --> 00:12:37.920
<v Speaker 1>of, like, let's provide a proper abstraction layer.

00:12:37.920 --> 00:12:40.000
<v Speaker 1>Like, we're not doing with Kubernetes YAML.

00:12:40.320 --> 00:12:41.840
<v Speaker 1>We have our own DSL.

00:12:42.160 --> 00:12:43.280
<v Speaker 1>You can largely

00:12:43.760 --> 00:12:46.080
<v Speaker 1>survive with just like, if you're, like, an,

00:12:46.320 --> 00:12:48.400
<v Speaker 1>just deploying apps, you can largely just survive

00:12:48.400 --> 00:12:49.600
<v Speaker 1>with, like, the Acorn tool.

00:12:51.464 --> 00:12:53.144
<v Speaker 1>But it was yeah. Yeah.

00:12:54.824 --> 00:12:56.904
<v Speaker 0>You're right. Kubernetes kinda gives us these, like,

00:12:56.904 --> 00:12:59.785
<v Speaker 0>primitives to pods, replicates, deployment services. I think

00:12:59.785 --> 00:13:01.704
<v Speaker 0>there is, like, pretty much 90% of what

00:13:01.704 --> 00:13:03.944
<v Speaker 0>any application developer really needs to deploy your

00:13:03.944 --> 00:13:06.540
<v Speaker 0>application, but we do have this whole what

00:13:06.540 --> 00:13:08.140
<v Speaker 0>that I mean, that's probably less than 1%

00:13:08.140 --> 00:13:09.100
<v Speaker 0>of the number of

00:13:09.420 --> 00:13:11.900
<v Speaker 0>resource definitions that are actually out there for

00:13:11.900 --> 00:13:13.260
<v Speaker 0>the Kubernetes environment.

00:13:13.580 --> 00:13:16.540
<v Speaker 0>And we have seen Yep. Other composite style

00:13:16.540 --> 00:13:17.420
<v Speaker 0>resources.

00:13:17.420 --> 00:13:19.180
<v Speaker 0>Like, I'm pretty sure there was an application

00:13:19.180 --> 00:13:22.105
<v Speaker 0>CRD spec from at one point or was

00:13:22.105 --> 00:13:23.145
<v Speaker 0>being developed.

00:13:23.225 --> 00:13:24.265
<v Speaker 0>But I don't think I've ever seen a

00:13:24.345 --> 00:13:25.145
<v Speaker 0>Yeah. Date.

00:13:25.465 --> 00:13:28.745
<v Speaker 0>So But, like, that's like, that like, so

00:13:28.745 --> 00:13:29.785
<v Speaker 1>the problem is, like, when you get to

00:13:29.785 --> 00:13:31.865
<v Speaker 1>this application layer is, like, you really have

00:13:31.865 --> 00:13:33.785
<v Speaker 1>to start applying some opinion.

00:13:34.025 --> 00:13:35.865
<v Speaker 1>Like, it's really hard to come up with,

00:13:35.865 --> 00:13:38.660
<v Speaker 1>like, let's create the specification that everyone agrees

00:13:38.660 --> 00:13:40.100
<v Speaker 1>on and can do everything.

00:13:42.019 --> 00:13:43.700
<v Speaker 1>You know? Like, there's gotta be so it's

00:13:43.700 --> 00:13:45.459
<v Speaker 1>very difficult. Like, I don't expect, like, the

00:13:45.459 --> 00:13:47.220
<v Speaker 1>app sync to, like, you know, kind of

00:13:47.220 --> 00:13:49.225
<v Speaker 1>be able to do that kind of design

00:13:49.225 --> 00:13:52.185
<v Speaker 1>by committee of the of figuring out, you

00:13:52.185 --> 00:13:53.945
<v Speaker 1>know, this layer because it becomes so much

00:13:53.945 --> 00:13:55.385
<v Speaker 1>a nuance. Because a lot of people ask,

00:13:55.385 --> 00:13:57.785
<v Speaker 1>like, well, you know, there's tons of solutions

00:13:57.785 --> 00:14:00.105
<v Speaker 1>that try to simplify the application layer.

00:14:00.505 --> 00:14:02.345
<v Speaker 1>You know, why is Acorn different? And it's

00:14:02.345 --> 00:14:03.545
<v Speaker 1>like, can tell you a bunch of, like,

00:14:04.149 --> 00:14:06.870
<v Speaker 1>technical differences in our approach or whatever. But,

00:14:06.870 --> 00:14:09.270
<v Speaker 1>fundamentally, it's like, well, I I think we

00:14:09.270 --> 00:14:10.710
<v Speaker 1>have a unique approach,

00:14:10.950 --> 00:14:12.550
<v Speaker 1>and that's subjective,

00:14:12.709 --> 00:14:14.470
<v Speaker 1>and we'll see if people like it. So

00:14:14.470 --> 00:14:17.270
<v Speaker 1>it's like, you know, hopefully, try Acorn, and

00:14:17.270 --> 00:14:18.630
<v Speaker 1>they like it. And if they don't like

00:14:18.630 --> 00:14:20.605
<v Speaker 1>it, then it wasn't good. Know?

00:14:21.645 --> 00:14:23.325
<v Speaker 0>Nice. We we actually have a a comment

00:14:23.325 --> 00:14:24.925
<v Speaker 0>in the chat for Bob then who was

00:14:24.925 --> 00:14:26.605
<v Speaker 0>about to ask if you know about Rio

00:14:26.605 --> 00:14:28.525
<v Speaker 0>and whatever happened to it. So at least

00:14:28.525 --> 00:14:30.205
<v Speaker 0>there's a couple of people watching that are

00:14:30.205 --> 00:14:31.485
<v Speaker 0>familiar with the work there.

00:14:31.885 --> 00:14:33.325
<v Speaker 1>Oh, yeah. Well, I mean, I mean, I

00:14:33.325 --> 00:14:34.045
<v Speaker 0>don't know I don't know if you realize.

00:14:34.200 --> 00:14:35.960
<v Speaker 1>So I wrote Rio. Like, that was my

00:14:36.120 --> 00:14:38.040
<v Speaker 1>that was so the the the backstory is

00:14:38.040 --> 00:14:39.880
<v Speaker 1>k three s came from Rio. So it

00:14:39.880 --> 00:14:41.480
<v Speaker 1>was kind of like Rio was a failure,

00:14:41.480 --> 00:14:43.320
<v Speaker 1>but as a side effect of that of

00:14:43.320 --> 00:14:45.320
<v Speaker 1>that project came k three s. So we're

00:14:45.320 --> 00:14:46.760
<v Speaker 1>like, well, I guess that was a success

00:14:46.760 --> 00:14:48.360
<v Speaker 1>in that, like, we got something out of

00:14:48.360 --> 00:14:49.645
<v Speaker 1>it. But Rio,

00:14:50.045 --> 00:14:51.245
<v Speaker 1>it was fundamentally,

00:14:51.645 --> 00:14:53.325
<v Speaker 1>I don't think that the timing was right

00:14:53.325 --> 00:14:54.205
<v Speaker 1>for it because

00:14:54.525 --> 00:14:56.525
<v Speaker 1>we started Rio as being a a more

00:14:56.525 --> 00:14:57.885
<v Speaker 1>abstracted thing,

00:14:58.445 --> 00:15:02.125
<v Speaker 1>but users just consistently wanted the raw access

00:15:02.125 --> 00:15:03.810
<v Speaker 1>to Kubernetes. They're like, no. I wanna be

00:15:03.810 --> 00:15:05.490
<v Speaker 1>able to have access to Kubernetes.

00:15:05.810 --> 00:15:06.370
<v Speaker 1>And

00:15:07.089 --> 00:15:08.529
<v Speaker 1>and we I mean, I didn't think that

00:15:08.529 --> 00:15:10.610
<v Speaker 1>was the best so it's like we basically

00:15:10.610 --> 00:15:13.649
<v Speaker 1>kinda morphed it to be more Kubernetes like,

00:15:13.810 --> 00:15:15.665
<v Speaker 1>which then basically kind of destroyed any of

00:15:15.665 --> 00:15:17.265
<v Speaker 1>the things we were trying to do.

00:15:18.305 --> 00:15:20.545
<v Speaker 1>So so now I think the timing's different

00:15:20.545 --> 00:15:21.585
<v Speaker 1>in that, like,

00:15:22.385 --> 00:15:25.584
<v Speaker 1>one, the shiny cool factor of of Kubernetes

00:15:25.584 --> 00:15:27.185
<v Speaker 1>is going down. It's not like the new

00:15:27.185 --> 00:15:27.584
<v Speaker 1>hotness.

00:15:28.060 --> 00:15:29.420
<v Speaker 1>So there's a lot of people who are

00:15:29.420 --> 00:15:31.180
<v Speaker 1>just, like, you know, been there, done that.

00:15:31.180 --> 00:15:33.420
<v Speaker 1>They're like, I've done deployments a million times,

00:15:33.500 --> 00:15:35.420
<v Speaker 1>and I would just like something easier.

00:15:35.980 --> 00:15:39.100
<v Speaker 1>The other thing is Kubernetes continues to, you

00:15:39.100 --> 00:15:41.259
<v Speaker 1>know, get adopted. Like, there's no there's, like,

00:15:41.259 --> 00:15:43.175
<v Speaker 1>no slowing it down right now, And there's

00:15:43.175 --> 00:15:44.855
<v Speaker 1>just more and more users coming into the

00:15:44.855 --> 00:15:46.935
<v Speaker 1>space who don't

00:15:47.095 --> 00:15:48.855
<v Speaker 1>you know, they're not like the early adopters

00:15:48.855 --> 00:15:50.375
<v Speaker 1>who level you know, it's like, they just

00:15:50.375 --> 00:15:52.135
<v Speaker 1>kinda wanna get things done. They're looking for

00:15:52.135 --> 00:15:54.855
<v Speaker 1>simpler approaches. So there's there's a so the

00:15:54.935 --> 00:15:56.774
<v Speaker 1>kind of the the timing is different now

00:15:56.774 --> 00:15:58.790
<v Speaker 1>where we can actually, I think, produce a

00:15:58.790 --> 00:16:01.990
<v Speaker 1>tool that's provides a more abstracted experience that's

00:16:01.990 --> 00:16:02.950
<v Speaker 1>that's simpler.

00:16:03.670 --> 00:16:04.390
<v Speaker 1>Okay.

00:16:04.630 --> 00:16:05.190
<v Speaker 0>So

00:16:06.630 --> 00:16:08.550
<v Speaker 0>one last question, and then we'll we'll actually

00:16:08.550 --> 00:16:09.990
<v Speaker 0>let you share your screen, and we'll take

00:16:09.990 --> 00:16:12.149
<v Speaker 0>a look at Acorn. But I'm curious about

00:16:12.875 --> 00:16:14.635
<v Speaker 0>not that I need that minute by minute

00:16:14.635 --> 00:16:16.315
<v Speaker 0>account of the night you went, screw this.

00:16:16.315 --> 00:16:17.995
<v Speaker 0>I'm gonna write on your tool. But I'm

00:16:17.995 --> 00:16:20.714
<v Speaker 0>assuming you said you were frustrated. And there

00:16:20.714 --> 00:16:22.154
<v Speaker 0>are tools out there that I think are

00:16:22.154 --> 00:16:24.395
<v Speaker 0>quite decent, you know, that we got Pulumi,

00:16:24.395 --> 00:16:25.675
<v Speaker 0>which of course I work for, so I'm

00:16:25.675 --> 00:16:28.160
<v Speaker 0>always gonna mention them. And CDK Yeah. Which

00:16:28.160 --> 00:16:30.160
<v Speaker 0>has been growing adoption, which allows us to

00:16:30.160 --> 00:16:31.840
<v Speaker 0>build these kind of abstractions.

00:16:32.000 --> 00:16:33.520
<v Speaker 0>Are these things that you've played with? And

00:16:33.520 --> 00:16:34.720
<v Speaker 0>then there was, like, this

00:16:35.040 --> 00:16:36.400
<v Speaker 0>point where you went, well, that's not what

00:16:36.400 --> 00:16:38.240
<v Speaker 0>I need. I need something else. So what

00:16:38.240 --> 00:16:38.880
<v Speaker 1>was Yeah.

00:16:39.995 --> 00:16:41.515
<v Speaker 1>Yeah. So I I mean, there's a good

00:16:41.515 --> 00:16:43.515
<v Speaker 1>point, like, Pulumi, CDK,

00:16:43.515 --> 00:16:45.675
<v Speaker 1>Terraform. Those kind of tools in my mind,

00:16:45.675 --> 00:16:47.355
<v Speaker 1>they all kind of operate at the infrastructure

00:16:47.355 --> 00:16:49.755
<v Speaker 1>space. So they're really good for, like, managing

00:16:49.755 --> 00:16:51.515
<v Speaker 1>clouds and and things like that. I think

00:16:51.515 --> 00:16:53.209
<v Speaker 1>when you get because, like, what you see

00:16:53.209 --> 00:16:55.290
<v Speaker 1>a lot of times is, like, those kind

00:16:55.290 --> 00:16:57.450
<v Speaker 1>of tools are basically setting up all the

00:16:57.450 --> 00:16:59.529
<v Speaker 1>infrastructure, the cloud, and all that, like, the

00:16:59.610 --> 00:17:02.010
<v Speaker 1>all the cloud resources. And then it's kinda

00:17:02.010 --> 00:17:04.410
<v Speaker 1>like those will then basically set up a

00:17:04.410 --> 00:17:06.809
<v Speaker 1>pipeline, and now your pipeline for your application

00:17:06.809 --> 00:17:09.134
<v Speaker 1>deployments is following, like, a different

00:17:09.774 --> 00:17:12.575
<v Speaker 1>a slightly different procedure using, like, GitOps and

00:17:12.734 --> 00:17:16.174
<v Speaker 1>or tilt or or whatever dev spaces. There's

00:17:16.174 --> 00:17:18.095
<v Speaker 1>there's a couple different dev tools I fooled

00:17:18.095 --> 00:17:18.494
<v Speaker 1>around with.

00:17:19.710 --> 00:17:22.109
<v Speaker 1>So I think, you know, I like, I

00:17:22.109 --> 00:17:25.789
<v Speaker 1>don't think, like, those those tools are are

00:17:26.750 --> 00:17:29.470
<v Speaker 1>really the same domain as, like, the application

00:17:29.470 --> 00:17:31.470
<v Speaker 1>deployment and, like like,

00:17:31.470 --> 00:17:33.229
<v Speaker 1>just the pure app layer.

00:17:33.870 --> 00:17:35.149
<v Speaker 1>I mean, I could be wrong,

00:17:35.549 --> 00:17:38.065
<v Speaker 1>but that's kind of my my my opinion

00:17:38.065 --> 00:17:39.105
<v Speaker 1>on it or whatever.

00:17:39.825 --> 00:17:41.985
<v Speaker 1>But the when you get to the

00:17:42.385 --> 00:17:43.985
<v Speaker 1>like, the just Kubernetes

00:17:43.985 --> 00:17:45.264
<v Speaker 1>development tools,

00:17:45.985 --> 00:17:48.304
<v Speaker 1>the problem that I see is that, like

00:17:49.230 --> 00:17:50.990
<v Speaker 1>I mean, they're very they're raw. They're very

00:17:50.990 --> 00:17:52.830
<v Speaker 1>diff like, basically, like, let's say, like, something

00:17:52.830 --> 00:17:54.990
<v Speaker 1>like Tilt. It's kind of like what you

00:17:54.990 --> 00:17:56.990
<v Speaker 1>need to do to use something like Tilt

00:17:56.990 --> 00:17:58.110
<v Speaker 1>is you first kinda have to have a

00:17:58.110 --> 00:17:59.389
<v Speaker 1>Kubernetes deployment.

00:17:59.470 --> 00:18:00.750
<v Speaker 1>Like so you already have to have an

00:18:00.750 --> 00:18:01.870
<v Speaker 1>expert in Kubernetes

00:18:02.055 --> 00:18:04.295
<v Speaker 1>who could kinda define how this application is

00:18:04.295 --> 00:18:05.335
<v Speaker 1>gonna be deployed.

00:18:05.735 --> 00:18:07.575
<v Speaker 1>So then you kinda move that back into

00:18:07.575 --> 00:18:09.495
<v Speaker 1>development, and then you set up the tilt

00:18:09.495 --> 00:18:11.415
<v Speaker 1>file to say, okay. How am I gonna

00:18:11.415 --> 00:18:12.935
<v Speaker 1>iterate on this

00:18:13.175 --> 00:18:13.975
<v Speaker 1>this

00:18:14.070 --> 00:18:17.109
<v Speaker 1>this application in in development?

00:18:17.509 --> 00:18:19.429
<v Speaker 1>So it's kind of like it it starts

00:18:19.429 --> 00:18:21.029
<v Speaker 1>from, like, the ops side or somebody who

00:18:21.029 --> 00:18:22.950
<v Speaker 1>really knows Kubernetes and then moves back to

00:18:22.950 --> 00:18:23.989
<v Speaker 1>the developers.

00:18:24.870 --> 00:18:26.630
<v Speaker 1>And so it's like, by the time you

00:18:26.630 --> 00:18:28.070
<v Speaker 1>get to the developers, it's like it's kind

00:18:28.070 --> 00:18:30.045
<v Speaker 1>of an odd experience. Like, it works for

00:18:30.045 --> 00:18:31.885
<v Speaker 1>someone who just, like, basically, like, I can

00:18:31.885 --> 00:18:33.725
<v Speaker 1>do a git clone, and I just run

00:18:33.725 --> 00:18:35.165
<v Speaker 1>this thing. But they don't really know what's

00:18:35.165 --> 00:18:37.005
<v Speaker 1>going on. They don't really change anything. It's

00:18:37.005 --> 00:18:38.765
<v Speaker 1>just like you know, it's it's just basically

00:18:38.765 --> 00:18:39.965
<v Speaker 1>insert code here.

00:18:40.925 --> 00:18:42.890
<v Speaker 1>So there's, like, that approach, but and I

00:18:42.890 --> 00:18:44.409
<v Speaker 1>I don't see those tools have been, like,

00:18:44.409 --> 00:18:46.409
<v Speaker 1>super popular. They haven't really caught on. Like,

00:18:46.409 --> 00:18:48.809
<v Speaker 1>the the biggest container oriented dev tool that

00:18:48.809 --> 00:18:51.210
<v Speaker 1>I've seen is is that's by far the

00:18:51.210 --> 00:18:52.809
<v Speaker 1>most popular is Docker Compose.

00:18:53.769 --> 00:18:55.690
<v Speaker 1>And but so you see still today a

00:18:55.690 --> 00:18:57.610
<v Speaker 1>lot of developers are using Docker Compose on

00:18:57.610 --> 00:18:58.169
<v Speaker 1>their laptop.

00:18:59.265 --> 00:19:00.865
<v Speaker 1>But then once they go to production, they

00:19:00.865 --> 00:19:01.985
<v Speaker 1>still do Kubernetes,

00:19:01.985 --> 00:19:03.585
<v Speaker 1>or maybe they're still in ECS.

00:19:04.145 --> 00:19:05.985
<v Speaker 1>But if they move to Kubernetes, it's like

00:19:06.065 --> 00:19:08.465
<v Speaker 1>then they switch to, like, Helm and and

00:19:08.465 --> 00:19:10.945
<v Speaker 1>customize and whatever, and then it like, there's

00:19:10.945 --> 00:19:12.625
<v Speaker 1>a lot of disconnect and friction there.

00:19:14.009 --> 00:19:14.649
<v Speaker 0>Okay.

00:19:14.809 --> 00:19:16.570
<v Speaker 0>Yeah. I think maybe in my head then,

00:19:16.570 --> 00:19:18.169
<v Speaker 0>I I had Acorn

00:19:18.169 --> 00:19:20.730
<v Speaker 0>slightly in the the wrong place. I wasn't

00:19:20.730 --> 00:19:22.490
<v Speaker 0>thinking about it as a tool similar to

00:19:22.490 --> 00:19:24.009
<v Speaker 0>DevSpace until

00:19:24.009 --> 00:19:26.725
<v Speaker 0>Docker Compose, but now that I'm thinking about

00:19:26.725 --> 00:19:28.884
<v Speaker 0>it, it does kind of satisfy that

00:19:29.125 --> 00:19:30.565
<v Speaker 0>local experience.

00:19:31.125 --> 00:19:33.045
<v Speaker 0>Does it move into the cluster as well?

00:19:33.045 --> 00:19:35.044
<v Speaker 0>Like, is Acorn a tool that can use?

00:19:35.045 --> 00:19:35.605
<v Speaker 0>Yeah.

00:19:36.405 --> 00:19:38.165
<v Speaker 1>Yeah. So it's both. So the thing is

00:19:38.165 --> 00:19:40.400
<v Speaker 1>is, like so fundamentally, what Acorn is technology

00:19:40.400 --> 00:19:41.760
<v Speaker 1>is, like, at the heart of it, it's

00:19:41.760 --> 00:19:43.840
<v Speaker 1>an application package. So it's like we actually

00:19:43.840 --> 00:19:45.840
<v Speaker 1>build and package up an application as an

00:19:45.840 --> 00:19:48.080
<v Speaker 1>OCI artifact, like a Docker image. You can

00:19:48.080 --> 00:19:49.600
<v Speaker 1>push and pull the whole thing as a

00:19:49.600 --> 00:19:50.479
<v Speaker 1>Docker image.

00:19:50.640 --> 00:19:52.240
<v Speaker 1>So it's kind of like it's it's like

00:19:52.240 --> 00:19:54.095
<v Speaker 1>a two headed beast. It's like on one

00:19:54.095 --> 00:19:56.495
<v Speaker 1>side, we have a package that's easy to

00:19:56.495 --> 00:19:58.815
<v Speaker 1>create for like, development can interact with it.

00:19:58.815 --> 00:20:00.175
<v Speaker 1>If you can do Docker Compose, you can

00:20:00.175 --> 00:20:01.375
<v Speaker 1>interact with Acorn.

00:20:01.455 --> 00:20:02.975
<v Speaker 1>But then on the other side, it's a

00:20:02.975 --> 00:20:05.055
<v Speaker 1>package that, like, the ops or DevOps team

00:20:05.055 --> 00:20:07.290
<v Speaker 1>can take and very easily deploy. It's a

00:20:07.290 --> 00:20:09.850
<v Speaker 1>very well known unit. It's well defined. It's

00:20:09.850 --> 00:20:11.130
<v Speaker 1>secured by default.

00:20:11.210 --> 00:20:13.610
<v Speaker 1>It has, like you know, it's like the

00:20:14.890 --> 00:20:17.050
<v Speaker 1>it's like something you can trust because

00:20:17.530 --> 00:20:19.304
<v Speaker 1>well, you know, it's alpha software, so don't

00:20:19.304 --> 00:20:21.464
<v Speaker 1>trust it very much. But, like but the

00:20:21.544 --> 00:20:23.304
<v Speaker 1>idea is is to get there because it's

00:20:23.304 --> 00:20:25.385
<v Speaker 1>like I I wanted you know? So it's

00:20:25.385 --> 00:20:28.264
<v Speaker 1>like it's kinda like as as applications are

00:20:28.264 --> 00:20:29.625
<v Speaker 1>coming from your app teams. Because I see

00:20:29.625 --> 00:20:31.465
<v Speaker 1>this within the enterprise perspective. Like, they have

00:20:31.465 --> 00:20:33.304
<v Speaker 1>difficulty onboarding a lot of app teams. So

00:20:33.304 --> 00:20:35.144
<v Speaker 1>you have, like, this one central, like, team

00:20:34.800 --> 00:20:36.960
<v Speaker 1>that manages Kubernetes, and they have to onboard

00:20:36.960 --> 00:20:39.040
<v Speaker 1>all these app teams. And so it's like,

00:20:39.040 --> 00:20:42.400
<v Speaker 1>if the applications are developed using Acorn, then

00:20:42.400 --> 00:20:43.840
<v Speaker 1>they can just very easily give that to

00:20:43.840 --> 00:20:45.600
<v Speaker 1>the op team, and they'll know exactly how

00:20:45.600 --> 00:20:47.360
<v Speaker 1>to run it. It integrates very well into

00:20:47.360 --> 00:20:49.040
<v Speaker 1>all the Kubernetes stuff, GitOps, everything,

00:20:50.045 --> 00:20:52.285
<v Speaker 1>but it's, a very well known unit. Whereas,

00:20:52.285 --> 00:20:53.725
<v Speaker 1>like, a Helm chart is kind of, like,

00:20:53.725 --> 00:20:55.405
<v Speaker 1>giving like, if you had the Helm chart

00:20:55.405 --> 00:20:57.565
<v Speaker 1>to, like, your op you know, just, like,

00:20:57.565 --> 00:21:00.125
<v Speaker 1>deploying production, it's the equivalent of basically giving

00:21:00.125 --> 00:21:01.565
<v Speaker 1>a shell script. It's just like

00:21:02.269 --> 00:21:02.989
<v Speaker 1>you know,

00:21:03.549 --> 00:21:04.829
<v Speaker 1>it's it's very difficult.

00:21:05.070 --> 00:21:06.509
<v Speaker 1>It's like you don't really know what it's

00:21:06.509 --> 00:21:08.029
<v Speaker 1>gonna do, so then you have to put

00:21:08.029 --> 00:21:10.429
<v Speaker 1>in a lot of, you know, guardrails around

00:21:10.429 --> 00:21:13.230
<v Speaker 1>that, you know, auditing and and, you know,

00:21:13.230 --> 00:21:15.549
<v Speaker 1>make sure you the RBAC and, you know,

00:21:15.549 --> 00:21:16.909
<v Speaker 1>all this stuff. So

00:21:17.629 --> 00:21:19.085
<v Speaker 1>but, yeah, hopefully, as I demo it, like

00:21:19.085 --> 00:21:20.924
<v Speaker 1>like, it'll become a little bit more clear

00:21:20.924 --> 00:21:22.845
<v Speaker 1>what it is. Well, yeah, you you said

00:21:22.845 --> 00:21:24.605
<v Speaker 0>lots of really cool things there that I'm

00:21:24.605 --> 00:21:26.125
<v Speaker 0>quite excited about. The fact that you're pushing

00:21:26.125 --> 00:21:28.845
<v Speaker 0>things to as an OCI artifact to registry,

00:21:28.845 --> 00:21:31.419
<v Speaker 0>I think, of where we're moving. I see

00:21:31.419 --> 00:21:32.779
<v Speaker 0>all these gaps. So those are the nests.

00:21:32.779 --> 00:21:33.899
<v Speaker 0>Now we're seeing this from flux. We're seeing

00:21:33.899 --> 00:21:35.419
<v Speaker 0>it from Argo. This just seems to be

00:21:35.419 --> 00:21:37.740
<v Speaker 0>like the new the new standard. So I

00:21:37.740 --> 00:21:38.940
<v Speaker 0>think what we do is we let you

00:21:38.940 --> 00:21:41.100
<v Speaker 0>share your screen. You give us the Yep.

00:21:41.179 --> 00:21:42.825
<v Speaker 0>Overview of how this all works, and and

00:21:42.825 --> 00:21:44.664
<v Speaker 0>then we can get some more questions back.

00:21:45.705 --> 00:21:47.384
<v Speaker 2>Okay. So let me share

00:21:48.024 --> 00:21:50.745
<v Speaker 2>share my screen. Minimize

00:21:50.745 --> 00:21:52.745
<v Speaker 2>that so we don't get nested. I'm gonna

00:21:52.745 --> 00:21:54.345
<v Speaker 1>do just one slide so you get a

00:21:54.345 --> 00:21:56.825
<v Speaker 1>visual representation, and then I'll go into just

00:21:56.220 --> 00:21:57.740
<v Speaker 1>programming. I'm not gonna do, like, slide where

00:21:57.980 --> 00:22:00.059
<v Speaker 1>Oh, your slides are up, so either way.

00:22:00.940 --> 00:22:03.419
<v Speaker 2>Yeah. Let me see. Did that work? From

00:22:04.380 --> 00:22:05.100
<v Speaker 1>okay.

00:22:05.500 --> 00:22:07.419
<v Speaker 1>Yeah. Whatever. You can just see it. So,

00:22:07.419 --> 00:22:09.900
<v Speaker 1>basically, the whole idea of the Acorn is,

00:22:09.900 --> 00:22:11.735
<v Speaker 1>like, we start with an Acorn file. You

00:22:11.735 --> 00:22:14.455
<v Speaker 1>notice, like, Acorn file kinda sounds like Dockerfile.

00:22:14.455 --> 00:22:16.295
<v Speaker 1>It's even written in the same style. You'll

00:22:16.295 --> 00:22:17.895
<v Speaker 1>see as I demo this, like, we took

00:22:17.895 --> 00:22:20.295
<v Speaker 1>tons of inspiration from Docker and Docker Compose

00:22:20.295 --> 00:22:21.975
<v Speaker 1>in the user experience

00:22:22.215 --> 00:22:24.775
<v Speaker 1>because, honestly, I think those are incredible tools.

00:22:25.335 --> 00:22:26.135
<v Speaker 1>From a like,

00:22:26.710 --> 00:22:29.270
<v Speaker 1>I haven't seen any other tool. Like, I

00:22:29.270 --> 00:22:30.710
<v Speaker 1>mean, just the fact that the way that

00:22:30.710 --> 00:22:32.230
<v Speaker 1>people can pick up and learn Docker so

00:22:32.230 --> 00:22:33.990
<v Speaker 1>quickly and use it, become productive,

00:22:34.870 --> 00:22:37.030
<v Speaker 1>you know, it's like there's something to be

00:22:37.030 --> 00:22:38.710
<v Speaker 1>admired there, and so we kind of copied

00:22:38.710 --> 00:22:40.070
<v Speaker 1>a lot of that. So the the basic

00:22:40.070 --> 00:22:42.014
<v Speaker 1>idea is you have an Acorn file, which

00:22:42.014 --> 00:22:44.254
<v Speaker 1>is like your the the equivalent of, like,

00:22:44.254 --> 00:22:46.414
<v Speaker 1>the Docker file today will build an image,

00:22:46.414 --> 00:22:49.854
<v Speaker 1>whereas the Acorn file will build, an application.

00:22:50.014 --> 00:22:52.174
<v Speaker 1>And the Acorn file can reference Docker files,

00:22:52.174 --> 00:22:53.695
<v Speaker 1>so you can also build the images as

00:22:53.695 --> 00:22:55.639
<v Speaker 1>you're building the the application.

00:22:55.960 --> 00:22:57.880
<v Speaker 1>So, basically, we run that. We create the

00:22:57.880 --> 00:23:00.440
<v Speaker 1>Acorn image, which is an OCI artifact,

00:23:00.680 --> 00:23:02.440
<v Speaker 1>and so it does include all of the

00:23:02.440 --> 00:23:05.080
<v Speaker 1>Docker images associated. So you get one image,

00:23:05.080 --> 00:23:06.840
<v Speaker 1>like one digest, one thing to sign.

00:23:07.784 --> 00:23:09.784
<v Speaker 1>That's completely you know, as you're moving around

00:23:09.784 --> 00:23:11.945
<v Speaker 1>environments, you you can you know, you know

00:23:11.945 --> 00:23:13.224
<v Speaker 1>it's the exact same thing.

00:23:14.585 --> 00:23:15.304
<v Speaker 1>It's

00:23:15.385 --> 00:23:17.705
<v Speaker 1>it's not like a Helm chart where, like,

00:23:17.705 --> 00:23:19.544
<v Speaker 1>the Helm chart is just the metadata, which

00:23:19.544 --> 00:23:22.585
<v Speaker 1>then references images, and then those images can

00:23:22.010 --> 00:23:23.850
<v Speaker 1>change as you move around. And you have

00:23:23.850 --> 00:23:26.170
<v Speaker 1>to worry about, like, mirroring con mirroring content

00:23:26.170 --> 00:23:28.250
<v Speaker 1>if you wanna do offline, like, air gap

00:23:28.250 --> 00:23:30.090
<v Speaker 1>setups and stuff like that. But, anyway, so

00:23:30.090 --> 00:23:31.610
<v Speaker 1>we we push that image to an OCA

00:23:31.610 --> 00:23:32.410
<v Speaker 1>registry.

00:23:32.730 --> 00:23:34.490
<v Speaker 1>So once it's up there in the registry,

00:23:34.490 --> 00:23:36.250
<v Speaker 1>then you can run it from any cluster,

00:23:36.615 --> 00:23:38.695
<v Speaker 1>any Kubernetes cluster. We just need, like, the

00:23:38.695 --> 00:23:41.575
<v Speaker 1>Acorn runtime, which is effectively just an operator

00:23:41.575 --> 00:23:43.654
<v Speaker 1>or controller, whatever you wanna call it.

00:23:44.135 --> 00:23:46.855
<v Speaker 1>So it does require admin privileges to install

00:23:46.855 --> 00:23:49.430
<v Speaker 1>that. I'm fooling around with, like, a solution

00:23:49.430 --> 00:23:51.350
<v Speaker 1>that doesn't require admin. But, like, right now,

00:23:51.350 --> 00:23:52.549
<v Speaker 1>it requires admin

00:23:52.790 --> 00:23:54.550
<v Speaker 1>to install the runtime on the on the

00:23:54.550 --> 00:23:57.350
<v Speaker 1>Kubernetes cluster. But once you have that, then

00:23:58.070 --> 00:23:59.910
<v Speaker 1>then you can you can run these apps.

00:23:59.910 --> 00:24:02.605
<v Speaker 1>So, like, that's, like, the 10,000 foot view

00:24:02.605 --> 00:24:05.085
<v Speaker 1>of kind of what Acorn is.

00:24:05.645 --> 00:24:06.284
<v Speaker 1>I

00:24:07.005 --> 00:24:09.804
<v Speaker 1>can just go right into demoing it now

00:24:09.804 --> 00:24:10.924
<v Speaker 1>if you want. Okay.

00:24:11.404 --> 00:24:13.804
<v Speaker 1>Yeah. And please, like, stop me, ask questions,

00:24:13.804 --> 00:24:14.684
<v Speaker 1>or or whatever.

00:24:15.804 --> 00:24:16.445
<v Speaker 0>Yeah. Of course.

00:24:17.269 --> 00:24:18.870
<v Speaker 1>Because I I have a 10 like, I'll

00:24:18.870 --> 00:24:21.190
<v Speaker 1>just keep going and talking and do out

00:24:21.190 --> 00:24:23.190
<v Speaker 1>a million things. So if you wanna

00:24:23.750 --> 00:24:26.309
<v Speaker 1>so the way to install this, the easiest

00:24:26.309 --> 00:24:28.309
<v Speaker 1>way is just through Brew,

00:24:29.510 --> 00:24:31.590
<v Speaker 1>or you can go to the the GitHub

00:24:31.590 --> 00:24:34.644
<v Speaker 1>page, and there's binaries you can download. So

00:24:34.644 --> 00:24:36.644
<v Speaker 1>we have Windows Windows,

00:24:36.644 --> 00:24:38.164
<v Speaker 1>Mac, and Linux

00:24:38.804 --> 00:24:40.164
<v Speaker 1>and the architectures,

00:24:40.164 --> 00:24:42.644
<v Speaker 1>whatever. So you just install with Brew.

00:24:43.365 --> 00:24:45.605
<v Speaker 1>I already have it installed,

00:24:45.605 --> 00:24:45.845
<v Speaker 1>obviously.

00:24:48.080 --> 00:24:49.919
<v Speaker 1>Once you have it, you do need a

00:24:49.919 --> 00:24:52.639
<v Speaker 1>Kubernetes cluster. So if you're fully on this

00:24:52.639 --> 00:24:53.759
<v Speaker 1>on your laptop,

00:24:54.080 --> 00:24:56.639
<v Speaker 1>Docker desktop or Rancher desktop should work

00:24:57.039 --> 00:24:58.080
<v Speaker 1>just out of the box.

00:24:59.294 --> 00:25:01.054
<v Speaker 1>You know, if you have any weird issues,

00:25:01.054 --> 00:25:04.174
<v Speaker 1>you know, go to our GitHub issues, discussions,

00:25:04.174 --> 00:25:06.335
<v Speaker 1>or Slack channel, and we'll help you out.

00:25:06.495 --> 00:25:08.094
<v Speaker 1>We're doing our best because, like,

00:25:08.654 --> 00:25:10.414
<v Speaker 1>you know, there's so many different styles of

00:25:10.414 --> 00:25:12.414
<v Speaker 1>clusters. And so it's like if you do,

00:25:12.414 --> 00:25:14.650
<v Speaker 1>like, minikube or kind, there's a couple more

00:25:14.650 --> 00:25:16.170
<v Speaker 1>steps you need to do because we need

00:25:16.170 --> 00:25:17.450
<v Speaker 1>an ingress controller.

00:25:18.410 --> 00:25:20.010
<v Speaker 1>But we're trying to document that all. But

00:25:20.010 --> 00:25:21.450
<v Speaker 0>I just know if, like, the simplest experience

00:25:21.450 --> 00:25:24.250
<v Speaker 0>is Docker desktop or Rancher desktop right now.

00:25:25.050 --> 00:25:25.370
<v Speaker 1>Yeah.

00:25:26.095 --> 00:25:28.015
<v Speaker 1>Okay. But to install it, you're just gonna

00:25:28.015 --> 00:25:29.615
<v Speaker 1>run, like, Acorn install.

00:25:29.775 --> 00:25:30.975
<v Speaker 1>And this is where I said you need

00:25:30.975 --> 00:25:31.935
<v Speaker 1>the runtime.

00:25:32.015 --> 00:25:33.615
<v Speaker 1>So this is gonna install the runtime on

00:25:33.615 --> 00:25:35.455
<v Speaker 1>the cluster. I already have it installed, so

00:25:35.455 --> 00:25:37.135
<v Speaker 1>that just, you know, went super fast or

00:25:37.135 --> 00:25:37.775
<v Speaker 1>whatever.

00:25:38.175 --> 00:25:39.775
<v Speaker 1>But so now

00:25:40.190 --> 00:25:42.590
<v Speaker 1>now I have this, and I can start

00:25:42.830 --> 00:25:44.110
<v Speaker 1>fooling around with it. So if

00:25:44.750 --> 00:25:46.190
<v Speaker 1>let me just show you kinda the high

00:25:46.190 --> 00:25:47.470
<v Speaker 1>level of the commands.

00:25:47.950 --> 00:25:50.190
<v Speaker 1>I'm not gonna go through each one individually,

00:25:50.670 --> 00:25:53.550
<v Speaker 1>but it's like you see things like log

00:25:53.550 --> 00:25:56.644
<v Speaker 1>in, log out, push pull, tag,

00:25:58.245 --> 00:25:58.884
<v Speaker 1>run,

00:26:00.645 --> 00:26:03.365
<v Speaker 1>build. So, basically, it follows a very similar

00:26:03.365 --> 00:26:05.284
<v Speaker 1>type. So if you're familiar with building Docker

00:26:05.284 --> 00:26:06.085
<v Speaker 1>containers

00:26:06.804 --> 00:26:09.365
<v Speaker 1>and pushing and pulling those, Acorn's gonna feel

00:26:09.365 --> 00:26:11.440
<v Speaker 1>very comfortable because you're basically doing, like, a

00:26:11.440 --> 00:26:14.160
<v Speaker 1>very similar thing. We're building eight application images

00:26:14.160 --> 00:26:15.200
<v Speaker 1>and running them.

00:26:15.600 --> 00:26:17.440
<v Speaker 1>So let me show you this little

00:26:18.320 --> 00:26:20.800
<v Speaker 1>this sample that we have. So this

00:26:21.120 --> 00:26:22.800
<v Speaker 1>I'll I'll I'll go through. If we have

00:26:22.800 --> 00:26:24.160
<v Speaker 1>enough time, I'll show you kind of, like,

00:26:24.160 --> 00:26:27.255
<v Speaker 1>two different things. Like, this first is, like,

00:26:27.255 --> 00:26:28.775
<v Speaker 1>a a good like, this is actually the

00:26:28.775 --> 00:26:30.535
<v Speaker 1>app from our getting started guide,

00:26:30.775 --> 00:26:32.375
<v Speaker 1>but it's gonna show you kind of, like,

00:26:32.375 --> 00:26:34.375
<v Speaker 1>a development flow of, like, packaging up, like,

00:26:34.375 --> 00:26:36.375
<v Speaker 1>a Flask app or something like that. I

00:26:36.375 --> 00:26:38.535
<v Speaker 1>have another example in here, which is, like,

00:26:38.935 --> 00:26:41.175
<v Speaker 1>gonna make more sense to someone who's more,

00:26:41.175 --> 00:26:43.900
<v Speaker 1>like, DevOps oriented, which is gonna be running

00:26:43.900 --> 00:26:44.779
<v Speaker 1>Jenkins,

00:26:45.820 --> 00:26:47.659
<v Speaker 1>like, a a, you know, a Jenkins with

00:26:47.659 --> 00:26:50.539
<v Speaker 1>the Kubernetes cloud and configuration code, like,

00:26:51.179 --> 00:26:52.299
<v Speaker 1>that whole setup.

00:26:52.779 --> 00:26:54.700
<v Speaker 1>And and that one's, like, more complicated, but

00:26:54.700 --> 00:26:56.585
<v Speaker 1>I'll I'll get to that. So for this

00:26:56.585 --> 00:26:57.225
<v Speaker 1>little

00:26:58.185 --> 00:26:59.065
<v Speaker 1>application,

00:26:59.065 --> 00:27:01.065
<v Speaker 1>so we have, like, just some dumb little

00:27:01.065 --> 00:27:02.345
<v Speaker 1>Flats gap in here.

00:27:03.065 --> 00:27:05.705
<v Speaker 1>And then we have a Docker file to

00:27:05.705 --> 00:27:08.025
<v Speaker 0>build this app. So, again, very simple. Just,

00:27:08.025 --> 00:27:10.259
<v Speaker 0>you know, copying this over, running TIP.

00:27:10.500 --> 00:27:12.419
<v Speaker 1>Okay. So now let's look at our Acorn

00:27:12.419 --> 00:27:14.260
<v Speaker 1>file. And there's

00:27:14.260 --> 00:27:16.020
<v Speaker 1>quite a bit in here to begin with,

00:27:16.020 --> 00:27:17.700
<v Speaker 1>and I'll kind of walk through so you

00:27:17.700 --> 00:27:19.380
<v Speaker 1>can get an idea of, like, what we're

00:27:19.380 --> 00:27:21.705
<v Speaker 1>seeing in here. Because this is kind of,

00:27:21.705 --> 00:27:22.105
<v Speaker 1>like,

00:27:23.785 --> 00:27:25.385
<v Speaker 1>somewhat of, like, a tour de force of

00:27:25.385 --> 00:27:27.545
<v Speaker 1>the syntax. It's just throwing in a lot

00:27:27.545 --> 00:27:29.385
<v Speaker 1>of things at once. But the first thing

00:27:29.385 --> 00:27:31.705
<v Speaker 1>you'll notice is the syntax. So the syntax

00:27:31.705 --> 00:27:32.264
<v Speaker 1>is

00:27:32.665 --> 00:27:33.865
<v Speaker 1>it's kinda like a JSON.

00:27:34.370 --> 00:27:36.210
<v Speaker 1>It's a superset of JSON, so it kinda

00:27:36.210 --> 00:27:37.250
<v Speaker 1>follows JSON.

00:27:37.970 --> 00:27:40.610
<v Speaker 1>We're we're really heavily inspired by q.

00:27:40.930 --> 00:27:42.690
<v Speaker 1>I can go into quite a, like, a

00:27:42.690 --> 00:27:45.490
<v Speaker 1>a long spiel about why exactly it's not

00:27:45.490 --> 00:27:47.410
<v Speaker 1>q, but, like, we very much like q.

00:27:47.410 --> 00:27:49.250
<v Speaker 1>We're huge fans of q. I've done a

00:27:49.250 --> 00:27:51.145
<v Speaker 1>lot of work with q. And so the

00:27:51.145 --> 00:27:52.585
<v Speaker 1>syntax here is

00:27:53.065 --> 00:27:54.265
<v Speaker 1>kind of inspired

00:27:54.265 --> 00:27:55.145
<v Speaker 1>greatly

00:27:55.145 --> 00:27:57.065
<v Speaker 1>by q, but it it is it is

00:27:57.065 --> 00:27:58.265
<v Speaker 1>not actually q.

00:28:00.585 --> 00:28:01.225
<v Speaker 1>So

00:28:01.785 --> 00:28:03.625
<v Speaker 1>but the syntax since it's like it's kinda

00:28:03.625 --> 00:28:05.385
<v Speaker 1>like JSON like. It should

00:28:05.930 --> 00:28:07.850
<v Speaker 1>I I we haven't really seen much people,

00:28:07.850 --> 00:28:09.530
<v Speaker 1>like, struggle with, like, learning that. It's all

00:28:09.530 --> 00:28:11.610
<v Speaker 1>documented if you go to our docs. But

00:28:11.770 --> 00:28:14.410
<v Speaker 1>what I have here in this Acorn file,

00:28:14.410 --> 00:28:15.690
<v Speaker 1>I'll start off. We have

00:28:16.410 --> 00:28:18.730
<v Speaker 1>ARMs at the top. So ARMs are

00:28:19.465 --> 00:28:21.065
<v Speaker 1>it's kinda like the equivalent of your helm

00:28:21.065 --> 00:28:23.544
<v Speaker 1>values. If you wanna pass in parameters at

00:28:23.544 --> 00:28:24.984
<v Speaker 1>build or deploy time,

00:28:25.625 --> 00:28:27.784
<v Speaker 1>the you can define ARGs, and then people

00:28:27.784 --> 00:28:29.784
<v Speaker 1>can can reference those. I'll show you the

00:28:29.784 --> 00:28:32.024
<v Speaker 1>ARGs, how they work after I build this.

00:28:32.350 --> 00:28:33.950
<v Speaker 1>But so at this top level here, I've

00:28:33.950 --> 00:28:36.669
<v Speaker 1>defined containers, and I have basically three containers.

00:28:36.669 --> 00:28:37.950
<v Speaker 1>I have this first one, which is the

00:28:37.950 --> 00:28:38.589
<v Speaker 1>app,

00:28:38.830 --> 00:28:41.389
<v Speaker 1>which this is the the Postgres app. No.

00:28:41.389 --> 00:28:42.909
<v Speaker 1>I'm sorry. The Flask app that talks to

00:28:42.909 --> 00:28:43.629
<v Speaker 1>Postgres.

00:28:44.269 --> 00:28:46.794
<v Speaker 1>And and so there are couple things going

00:28:46.794 --> 00:28:48.875
<v Speaker 1>on here. First is I'm doing build. I'm

00:28:48.875 --> 00:28:50.874
<v Speaker 1>gonna build this from the Docker container.

00:28:51.515 --> 00:28:54.394
<v Speaker 1>I'm setting some environment variables. You'll see some

00:28:54.394 --> 00:28:56.635
<v Speaker 1>interesting syntax here. Like, I'm pulling in some

00:28:56.635 --> 00:28:58.990
<v Speaker 1>secrets. I'll just explain that just a little

00:28:58.990 --> 00:29:00.830
<v Speaker 1>bit. And this here's where I'm referencing that

00:29:00.830 --> 00:29:03.390
<v Speaker 1>bar to get the the welcome.

00:29:03.710 --> 00:29:05.070
<v Speaker 1>And then you can see a little condition

00:29:05.070 --> 00:29:06.990
<v Speaker 1>here of, like, if args, whatever.

00:29:08.830 --> 00:29:09.630
<v Speaker 1>This is

00:29:11.150 --> 00:29:11.710
<v Speaker 1>this

00:29:11.955 --> 00:29:13.635
<v Speaker 1>this is so, like, when we're running this

00:29:13.635 --> 00:29:15.875
<v Speaker 1>in development mode, it's gonna be slightly different

00:29:15.875 --> 00:29:17.634
<v Speaker 1>than if we build it for production.

00:29:17.875 --> 00:29:19.235
<v Speaker 1>And I'll show you what I'll talk about

00:29:19.235 --> 00:29:20.754
<v Speaker 1>what development mode is later.

00:29:21.075 --> 00:29:23.154
<v Speaker 1>You can have depends on. This just starts

00:29:23.315 --> 00:29:25.730
<v Speaker 1>this is controls the update and starting order

00:29:25.730 --> 00:29:26.450
<v Speaker 1>of things.

00:29:27.010 --> 00:29:29.570
<v Speaker 1>In development, we wanna cop live sync over

00:29:29.570 --> 00:29:31.890
<v Speaker 1>some files, and this is how we basically

00:29:31.890 --> 00:29:34.450
<v Speaker 1>publish the port. So these other ones here,

00:29:34.450 --> 00:29:35.809
<v Speaker 1>this is a Reddit cache, and this is

00:29:35.809 --> 00:29:37.809
<v Speaker 1>Postgres. I'm not gonna go into detail on

00:29:37.809 --> 00:29:40.255
<v Speaker 1>those, but let's get into actually building the

00:29:40.255 --> 00:29:40.975
<v Speaker 1>application.

00:29:42.495 --> 00:29:44.735
<v Speaker 1>So if I wanna build this, I can

00:29:44.735 --> 00:29:46.335
<v Speaker 1>I can tag it as something?

00:29:47.455 --> 00:29:49.375
<v Speaker 1>I don't really need to yeah. I'll I'll

00:29:49.375 --> 00:29:51.295
<v Speaker 1>tag it just as, like, demo right now.

00:29:51.470 --> 00:29:53.550
<v Speaker 1>So we'll go and build this. So this

00:29:53.550 --> 00:29:55.150
<v Speaker 1>is going it's doing, like, it's doing the

00:29:55.150 --> 00:29:57.310
<v Speaker 1>Docker build that was include that the Acorn

00:29:57.310 --> 00:29:59.630
<v Speaker 1>file referenced, and then it's also building the

00:29:59.630 --> 00:30:00.190
<v Speaker 1>final,

00:30:00.510 --> 00:30:03.070
<v Speaker 1>application, which is the the one the one

00:30:03.070 --> 00:30:03.390
<v Speaker 1>image.

00:30:03.915 --> 00:30:04.395
<v Speaker 1>So,

00:30:05.435 --> 00:30:07.035
<v Speaker 1>so I should see now when I view

00:30:07.035 --> 00:30:09.275
<v Speaker 1>this oh, I just it was this one

00:30:09.275 --> 00:30:11.355
<v Speaker 1>right here. I just built that demo image.

00:30:12.155 --> 00:30:13.915
<v Speaker 1>So now I can run this. So I

00:30:13.915 --> 00:30:15.515
<v Speaker 1>can just say Acorn run,

00:30:16.315 --> 00:30:16.635
<v Speaker 1>demo.

00:30:17.580 --> 00:30:20.220
<v Speaker 1>And now if I just kinda watch the

00:30:20.220 --> 00:30:21.340
<v Speaker 1>output here

00:30:21.820 --> 00:30:23.420
<v Speaker 1>oops. Mac's

00:30:23.420 --> 00:30:24.619
<v Speaker 1>on that watch, I guess.

00:30:26.380 --> 00:30:29.260
<v Speaker 1>So this is coming up, and then, hopefully,

00:30:30.425 --> 00:30:32.505
<v Speaker 0>this is oh, this is Docker. Can I

00:30:32.505 --> 00:30:33.784
<v Speaker 0>pop in for a second?

00:30:34.585 --> 00:30:35.144
<v Speaker 0>Yeah.

00:30:36.105 --> 00:30:38.505
<v Speaker 0>So the first thing is we're kinda missing

00:30:38.505 --> 00:30:40.105
<v Speaker 0>the first line and the last line of

00:30:40.105 --> 00:30:42.825
<v Speaker 0>your terminal. Could you, like, just Oh, shoot.

00:30:42.825 --> 00:30:44.640
<v Speaker 0>Roll your window a little bit so it's

00:30:44.640 --> 00:30:45.600
<v Speaker 0>not as tall?

00:30:46.480 --> 00:30:48.000
<v Speaker 0>I don't know. I think the aspect ratio

00:30:48.000 --> 00:30:49.040
<v Speaker 0>is a bit weird, and I've been trying

00:30:49.040 --> 00:30:50.720
<v Speaker 0>to work around it, but I can't quite

00:30:50.720 --> 00:30:53.200
<v Speaker 0>get it. Okay. Sorry about that. Well, what

00:30:53.200 --> 00:30:54.800
<v Speaker 1>I can do let me not let me

00:30:54.800 --> 00:30:57.680
<v Speaker 2>do what's the there's, like, a diff

00:30:58.054 --> 00:30:59.575
<v Speaker 2>no. There's another

00:31:01.095 --> 00:31:03.575
<v Speaker 1>may no. Is that better? Is it is

00:31:03.575 --> 00:31:05.575
<v Speaker 1>it or is it still chopped off? Yeah.

00:31:05.575 --> 00:31:06.855
<v Speaker 0>The bottom the first line and the last

00:31:06.855 --> 00:31:08.215
<v Speaker 0>lines need to be chopped off. If you

00:31:08.215 --> 00:31:09.895
<v Speaker 0>just, like, make it less tall, so just

00:31:09.895 --> 00:31:10.855
<v Speaker 0>drag it up a little bit.

00:31:12.870 --> 00:31:15.830
<v Speaker 2>Yeah. Yeah. Yeah. Alright. Come

00:31:16.790 --> 00:31:17.350
<v Speaker 2>on.

00:31:20.630 --> 00:31:23.270
<v Speaker 0>Why can't I select alright. Okay. There

00:31:23.830 --> 00:31:24.230
<v Speaker 1>we go.

00:31:25.655 --> 00:31:27.975
<v Speaker 0>That's it. Okay. Perfect. Thank you. Is that

00:31:27.975 --> 00:31:29.414
<v Speaker 1>it? Oh, okay. Oh, that's terrible. So you

00:31:29.414 --> 00:31:30.934
<v Speaker 1>couldn't see the commands I was typing? Well,

00:31:30.934 --> 00:31:32.934
<v Speaker 0>we we were lucky. We could see, like,

00:31:32.934 --> 00:31:33.815
<v Speaker 0>90%.

00:31:33.815 --> 00:31:35.655
<v Speaker 0>It was just when you, like, cleared the

00:31:35.655 --> 00:31:37.735
<v Speaker 0>screen, the first command, and then when it

00:31:37.735 --> 00:31:39.095
<v Speaker 0>got filled the screen, we missed the last.

00:31:39.600 --> 00:31:41.840
<v Speaker 0>But it was okay. We we followed along.

00:31:41.760 --> 00:31:43.519
<v Speaker 0>We're still working. So

00:31:44.000 --> 00:31:45.200
<v Speaker 1>Okay. So

00:31:45.680 --> 00:31:46.800
<v Speaker 1>so you can see here

00:31:47.360 --> 00:31:48.799
<v Speaker 1>so I built the application,

00:31:49.040 --> 00:31:50.320
<v Speaker 1>and then I ran it. So now I'm

00:31:50.320 --> 00:31:52.640
<v Speaker 1>running it. And you'll see, like, we we

00:31:54.105 --> 00:31:56.265
<v Speaker 1>in the application definition let me go back

00:31:56.265 --> 00:31:58.585
<v Speaker 1>to the Acorn file real quick. I defined

00:31:58.585 --> 00:32:00.184
<v Speaker 1>publish HTTP.

00:32:00.265 --> 00:32:02.185
<v Speaker 1>If you do HTTP under the hood, it's

00:32:02.185 --> 00:32:03.945
<v Speaker 1>gonna use ingress, which then,

00:32:04.665 --> 00:32:08.020
<v Speaker 1>requires, like, DNS. And so we automatically do

00:32:08.020 --> 00:32:10.020
<v Speaker 1>a bunch of tricks with DNS.

00:32:10.340 --> 00:32:11.620
<v Speaker 1>So you get

00:32:14.420 --> 00:32:17.460
<v Speaker 1>oh, wow. The default terminal is terrible on

00:32:17.460 --> 00:32:19.140
<v Speaker 1>a Mac. I can even click on the

00:32:19.140 --> 00:32:19.540
<v Speaker 1>URL.

00:32:21.745 --> 00:32:23.665
<v Speaker 1>I don't use Macs. I I I use

00:32:23.665 --> 00:32:25.425
<v Speaker 1>a I use Linux, but I had to

00:32:25.425 --> 00:32:27.025
<v Speaker 1>switch to it for this for this thing.

00:32:27.025 --> 00:32:28.145
<v Speaker 1>I had some problem.

00:32:28.385 --> 00:32:31.985
<v Speaker 1>Internal server error. Oh, okay. Wait. Here's the

00:32:31.985 --> 00:32:32.225
<v Speaker 1>server.

00:32:32.910 --> 00:32:34.910
<v Speaker 1>Why is it doing that? Let's see let's

00:32:34.910 --> 00:32:35.710
<v Speaker 1>see why that's.

00:32:45.245 --> 00:32:47.084
<v Speaker 2>Oh,

00:32:49.325 --> 00:32:50.124
<v Speaker 1>oh, okay.

00:32:53.965 --> 00:32:55.725
<v Speaker 1>Okay. We'll we'll we'll fix that. So there's

00:32:55.725 --> 00:32:57.085
<v Speaker 1>there's a little problem in the in the

00:32:57.085 --> 00:32:59.005
<v Speaker 1>apple in the application.

00:32:59.005 --> 00:32:59.164
<v Speaker 1>But

00:33:00.800 --> 00:33:03.520
<v Speaker 1>but, anyways so we'll I'll I'll show you.

00:33:03.520 --> 00:33:05.200
<v Speaker 1>We'll fix that. And so we can kind

00:33:05.200 --> 00:33:07.679
<v Speaker 1>of go into the the development mode.

00:33:08.720 --> 00:33:10.240
<v Speaker 1>Okay. So so the idea is

00:33:10.880 --> 00:33:11.840
<v Speaker 1>as I said, you can,

00:33:13.075 --> 00:33:14.835
<v Speaker 1>you know, you rerun run the app, and

00:33:14.835 --> 00:33:16.355
<v Speaker 1>then we give you a URL, and then

00:33:16.355 --> 00:33:17.874
<v Speaker 1>you can get get into it

00:33:18.355 --> 00:33:19.315
<v Speaker 1>get into the app.

00:33:19.794 --> 00:33:21.955
<v Speaker 1>So if I wanted to update this application,

00:33:21.955 --> 00:33:24.034
<v Speaker 1>like, if I made some some change or

00:33:24.034 --> 00:33:24.594
<v Speaker 1>whatever

00:33:25.075 --> 00:33:26.755
<v Speaker 1>so, basically, you would just go through the

00:33:26.755 --> 00:33:28.909
<v Speaker 1>flow. Like, you know, if I wanted to,

00:33:29.630 --> 00:33:32.830
<v Speaker 1>you know, put some something in here, then

00:33:32.830 --> 00:33:33.710
<v Speaker 1>you can go

00:33:33.950 --> 00:33:37.070
<v Speaker 1>and, you know, build this again. I'll do.

00:33:40.915 --> 00:33:43.635
<v Speaker 1>So, like, this will go build your application

00:33:43.635 --> 00:33:44.275
<v Speaker 1>again.

00:33:45.155 --> 00:33:48.115
<v Speaker 1>And then I can just go and update.

00:33:51.635 --> 00:33:52.595
<v Speaker 0>I think I missed the.

00:33:55.889 --> 00:33:56.609
<v Speaker 1>Update.

00:33:56.690 --> 00:33:58.129
<v Speaker 1>Let me say image,

00:33:58.610 --> 00:34:00.449
<v Speaker 1>right, demo two,

00:34:00.690 --> 00:34:01.489
<v Speaker 1>and then

00:34:04.129 --> 00:34:06.049
<v Speaker 1>that will then update it. So the that's

00:34:06.049 --> 00:34:07.809
<v Speaker 1>kinda like the manual flow of, like you

00:34:07.809 --> 00:34:08.929
<v Speaker 1>know, so you can build, push,

00:34:09.885 --> 00:34:10.765
<v Speaker 1>and whatever.

00:34:11.645 --> 00:34:13.245
<v Speaker 1>So this is all, like, going to the

00:34:13.245 --> 00:34:14.925
<v Speaker 1>CLI. I want to point out under the

00:34:14.925 --> 00:34:17.804
<v Speaker 1>hood, this is, like, a % Kubernetes architecture.

00:34:17.804 --> 00:34:19.885
<v Speaker 1>There's a Kubernetes API under there and all

00:34:19.885 --> 00:34:21.725
<v Speaker 1>that stuff. So if you, you know, you

00:34:21.725 --> 00:34:23.940
<v Speaker 1>wanna get into, like, and GitOps and all

00:34:23.940 --> 00:34:26.100
<v Speaker 1>this stuff or whatever, it's all completely compatible.

00:34:26.260 --> 00:34:28.659
<v Speaker 1>The the Acorn like, the CLI is just,

00:34:28.659 --> 00:34:30.340
<v Speaker 1>like, a really nice experience on top of

00:34:30.340 --> 00:34:31.300
<v Speaker 1>the API,

00:34:31.300 --> 00:34:32.980
<v Speaker 1>but it's it's all standard stuff under the

00:34:32.980 --> 00:34:34.500
<v Speaker 1>hood. But so

00:34:34.980 --> 00:34:36.580
<v Speaker 1>so what I wanted to show is so

00:34:36.975 --> 00:34:38.495
<v Speaker 1>I just did, like, a manual of, like,

00:34:38.495 --> 00:34:41.375
<v Speaker 1>build it and then then update it. What

00:34:41.375 --> 00:34:42.815
<v Speaker 1>you can do is if you're running this,

00:34:42.815 --> 00:34:44.095
<v Speaker 1>like, in a development mode

00:34:44.495 --> 00:34:46.335
<v Speaker 1>let me just delete the app.

00:34:52.040 --> 00:34:54.199
<v Speaker 1>Let me just delete everything. Okay. So what

00:34:54.199 --> 00:34:55.160
<v Speaker 1>we can do is we can run this

00:34:55.160 --> 00:34:56.920
<v Speaker 1>in a development mode, and this is gonna

00:34:56.920 --> 00:34:58.920
<v Speaker 1>be much closer to, like, a Docker Compose

00:34:58.920 --> 00:35:01.240
<v Speaker 1>app. So you can do dash dash dev.

00:35:01.240 --> 00:35:03.160
<v Speaker 1>The short form of that is I, which

00:35:03.160 --> 00:35:04.680
<v Speaker 1>is kind of a little weird, but

00:35:05.515 --> 00:35:07.435
<v Speaker 1>and I'm gonna actually I'm gonna call it,

00:35:07.675 --> 00:35:09.995
<v Speaker 1>a demo so we have a nice little

00:35:09.995 --> 00:35:11.915
<v Speaker 1>name or whatever. So now this is gonna

00:35:11.915 --> 00:35:13.755
<v Speaker 1>run this in a in a

00:35:14.075 --> 00:35:16.555
<v Speaker 1>in a, development mode. And so what you

00:35:16.555 --> 00:35:17.915
<v Speaker 1>can do is, like, this will build it

00:35:17.915 --> 00:35:19.035
<v Speaker 1>and bring up the application,

00:35:19.790 --> 00:35:21.150
<v Speaker 1>and then it will

00:35:21.710 --> 00:35:24.750
<v Speaker 1>live you know, tail everything that's going on.

00:35:25.790 --> 00:35:29.150
<v Speaker 1>Let's wait for the the it Ingress control

00:35:29.310 --> 00:35:31.869
<v Speaker 1>or NGINX Ingress controller is super slow to

00:35:31.869 --> 00:35:32.190
<v Speaker 1>provision.

00:35:32.865 --> 00:35:33.425
<v Speaker 1>Like

00:35:33.905 --> 00:35:35.825
<v Speaker 1>so that it's that's why it says pending.

00:35:35.825 --> 00:35:37.985
<v Speaker 1>It's waiting on the ingress controller to assign

00:35:37.985 --> 00:35:40.225
<v Speaker 1>to assign something.

00:35:42.145 --> 00:35:43.985
<v Speaker 1>There we go. So now it's up. Okay.

00:35:47.710 --> 00:35:48.589
<v Speaker 1>Just

00:35:48.589 --> 00:35:49.710
<v Speaker 1>copy that.

00:35:49.869 --> 00:35:51.230
<v Speaker 1>Go back here.

00:35:56.270 --> 00:35:56.990
<v Speaker 1>Oh,

00:35:57.230 --> 00:35:58.750
<v Speaker 1>I don't know. I don't know what the

00:35:58.750 --> 00:35:59.230
<v Speaker 1>deal is.

00:35:59.964 --> 00:36:01.484
<v Speaker 2>Scram authentication

00:36:01.484 --> 00:36:02.525
<v Speaker 2>requires

00:36:03.724 --> 00:36:05.645
<v Speaker 2>version 10 or above.

00:36:06.365 --> 00:36:08.125
<v Speaker 2>Am I running let me just see if

00:36:08.125 --> 00:36:09.245
<v Speaker 1>I'm running them.

00:36:13.244 --> 00:36:14.525
<v Speaker 0>Guess okay. And your requirements.

00:36:16.589 --> 00:36:18.270
<v Speaker 1>Yeah. I don't know.

00:36:18.910 --> 00:36:19.470
<v Speaker 1>So

00:36:20.109 --> 00:36:22.910
<v Speaker 2>why

00:36:23.869 --> 00:36:25.470
<v Speaker 2>is it even doing authentication?

00:36:25.470 --> 00:36:27.789
<v Speaker 2>I think it's Okay. Well, let's let's talk

00:36:27.789 --> 00:36:29.710
<v Speaker 1>to like, maybe let me look at this.

00:36:30.505 --> 00:36:31.465
<v Speaker 1>I don't know.

00:36:32.265 --> 00:36:33.385
<v Speaker 1>This is one of those things. You know?

00:36:33.385 --> 00:36:34.985
<v Speaker 1>It's like, well, it was working yesterday.

00:36:36.905 --> 00:36:39.225
<v Speaker 1>So let me talk about, like, the authentication

00:36:39.225 --> 00:36:40.905
<v Speaker 1>and stuff. Like, this is the authentication

00:36:41.145 --> 00:36:43.319
<v Speaker 1>of what's what's failing. So you can see

00:36:43.319 --> 00:36:43.880
<v Speaker 1>here,

00:36:44.359 --> 00:36:46.440
<v Speaker 1>where we started up Postgres, and we're using

00:36:46.599 --> 00:36:47.160
<v Speaker 1>oh,

00:36:47.400 --> 00:36:48.599
<v Speaker 1>let me make sure

00:36:48.920 --> 00:36:51.079
<v Speaker 1>okay. I'll get back get back to that

00:36:51.079 --> 00:36:52.200
<v Speaker 1>one in a second. I might be using

00:36:52.200 --> 00:36:53.160
<v Speaker 1>an old data volume.

00:36:54.984 --> 00:36:57.145
<v Speaker 1>But so so

00:36:57.625 --> 00:36:59.625
<v Speaker 1>you can see here the secrets. So we've

00:36:59.625 --> 00:37:01.945
<v Speaker 1>defined the secret here called quick start PG

00:37:01.945 --> 00:37:04.745
<v Speaker 1>pass or whatever, and it's of type token.

00:37:04.825 --> 00:37:06.425
<v Speaker 1>So what we do with secrets is, like,

00:37:06.425 --> 00:37:07.625
<v Speaker 1>we wanna by default

00:37:08.505 --> 00:37:10.660
<v Speaker 1>we want apps to kinda work out of

00:37:10.660 --> 00:37:12.260
<v Speaker 1>the box and securely.

00:37:12.420 --> 00:37:13.940
<v Speaker 1>So we have a couple of built in

00:37:13.940 --> 00:37:16.020
<v Speaker 1>secret types that will just generate a value

00:37:16.020 --> 00:37:18.180
<v Speaker 1>for you. So this one, it just generates

00:37:18.180 --> 00:37:20.260
<v Speaker 1>a token, and there's parameters. You can control

00:37:20.260 --> 00:37:21.780
<v Speaker 1>what characters and how long,

00:37:22.100 --> 00:37:24.020
<v Speaker 1>but it just generates a random a random

00:37:24.020 --> 00:37:24.420
<v Speaker 1>token.

00:37:25.505 --> 00:37:27.505
<v Speaker 1>So so what this is doing so this

00:37:27.505 --> 00:37:29.505
<v Speaker 1>secret, it generates this token,

00:37:29.825 --> 00:37:32.225
<v Speaker 1>and then we can pass that secret,

00:37:32.945 --> 00:37:35.825
<v Speaker 1>the token value to the password here,

00:37:36.465 --> 00:37:38.385
<v Speaker 1>and then we can also pass the same

00:37:38.385 --> 00:37:39.585
<v Speaker 1>thing here to

00:37:40.290 --> 00:37:41.890
<v Speaker 1>the the password up here.

00:37:43.970 --> 00:37:47.010
<v Speaker 1>So that works for, like, development. It'll automatically,

00:37:47.010 --> 00:37:49.890
<v Speaker 1>like, like, generate the secret. At in production,

00:37:49.890 --> 00:37:52.050
<v Speaker 1>you can then bind in secrets. So, like,

00:37:52.050 --> 00:37:53.490
<v Speaker 1>as part of, like, the run command,

00:37:54.955 --> 00:37:56.795
<v Speaker 1>you can do things here where you bind

00:37:56.795 --> 00:37:58.555
<v Speaker 1>in secrets. So if you have an existing

00:37:58.555 --> 00:38:00.635
<v Speaker 0>secret, like, you know, it's

00:38:01.115 --> 00:38:02.555
<v Speaker 1>you can create the secret if you want

00:38:02.555 --> 00:38:04.474
<v Speaker 1>using the RCLI,

00:38:04.474 --> 00:38:05.915
<v Speaker 1>but under the hood, they're they're still just

00:38:05.915 --> 00:38:07.780
<v Speaker 1>Kubernetes secret. So it's like, you know, if

00:38:07.780 --> 00:38:10.579
<v Speaker 0>you're doing sealed secrets or external secrets or,

00:38:10.579 --> 00:38:12.900
<v Speaker 0>you know, whatever whatever crazy way you wanna

00:38:12.900 --> 00:38:15.539
<v Speaker 1>manage secrets, you can manage those independently and

00:38:15.539 --> 00:38:17.220
<v Speaker 1>then just bind them into the application, and

00:38:17.220 --> 00:38:18.180
<v Speaker 1>you'll use them.

00:38:18.660 --> 00:38:19.460
<v Speaker 1>Okay.

00:38:20.819 --> 00:38:23.165
<v Speaker 1>So so let me show let's see if

00:38:23.165 --> 00:38:23.805
<v Speaker 1>we can

00:38:24.285 --> 00:38:26.445
<v Speaker 2>I wonder if we can figure out why

00:38:26.845 --> 00:38:29.165
<v Speaker 2>this? It says SCRM authentication

00:38:29.165 --> 00:38:29.965
<v Speaker 2>requires

00:38:30.525 --> 00:38:32.365
<v Speaker 2>libpk version

00:38:32.365 --> 00:38:33.645
<v Speaker 2>10 or above.

00:38:35.940 --> 00:38:37.460
<v Speaker 2>So I wonder if, like, it's a new

00:38:37.460 --> 00:38:38.580
<v Speaker 2>version of

00:38:39.780 --> 00:38:40.740
<v Speaker 2>Postgres.

00:38:41.300 --> 00:38:43.300
<v Speaker 2>Should we try? Do you know anything about

00:38:43.300 --> 00:38:44.980
<v Speaker 1>about

00:38:50.865 --> 00:38:53.345
<v Speaker 0>Very good. Let me check.

00:38:54.545 --> 00:38:56.785
<v Speaker 1>Let me see. I wonder I wonder let

00:38:56.785 --> 00:38:58.785
<v Speaker 1>me try, like, not the PostgreSQL.

00:38:58.785 --> 00:39:00.865
<v Speaker 0>No. Let's see. Is your Kubernetes

00:39:00.865 --> 00:39:03.185
<v Speaker 0>cluster on is that local? Is it Docker

00:39:03.185 --> 00:39:03.665
<v Speaker 0>for Mac?

00:39:04.670 --> 00:39:06.590
<v Speaker 1>Yeah. Yeah. It's just a Docker for Mac.

00:39:07.150 --> 00:39:09.390
<v Speaker 0>Yeah. Okay. So it apparently is an m

00:39:09.390 --> 00:39:10.350
<v Speaker 0>one problem.

00:39:11.870 --> 00:39:13.310
<v Speaker 1>It's an m one problem?

00:39:13.550 --> 00:39:14.350
<v Speaker 1>Oh, okay.

00:39:15.390 --> 00:39:17.150
<v Speaker 1>Yeah. Yeah. That makes sense. So, apparently, if

00:39:17.150 --> 00:39:19.115
<v Speaker 0>if you're happy to rebuild your images, you

00:39:19.115 --> 00:39:22.075
<v Speaker 0>have to export docker underscore default underscore platform

00:39:22.075 --> 00:39:24.155
<v Speaker 0>equals one app slash e m d 64

00:39:24.155 --> 00:39:25.994
<v Speaker 0>and then do a rebuild of your images,

00:39:25.994 --> 00:39:27.515
<v Speaker 0>and that will remove the error.

00:39:30.474 --> 00:39:32.714
<v Speaker 0>So I'm assuming your Python app has been

00:39:32.795 --> 00:39:33.755
<v Speaker 0>But I can't

00:39:34.619 --> 00:39:36.220
<v Speaker 0>It's not 64. But I can't

00:39:37.339 --> 00:39:39.420
<v Speaker 1>yeah. So that won't work. Well, okay. Well,

00:39:39.420 --> 00:39:41.260
<v Speaker 1>that that's fine. I mean, that whatever. So

00:39:41.260 --> 00:39:43.339
<v Speaker 1>the app is failing. That's an arm arm

00:39:43.339 --> 00:39:46.060
<v Speaker 1>issue, whatever. But at this point, we

00:39:46.220 --> 00:39:47.420
<v Speaker 1>can talk about multi arc.

00:39:48.535 --> 00:39:50.615
<v Speaker 1>We basically we we can like, if you

00:39:50.615 --> 00:39:52.135
<v Speaker 1>wanna build like, if I want to build

00:39:52.135 --> 00:39:53.415
<v Speaker 1>this I mean, I can I can build

00:39:53.415 --> 00:39:55.655
<v Speaker 1>it for AMD sixty four, but the problem

00:39:55.655 --> 00:39:56.535
<v Speaker 1>is I won't

00:39:57.895 --> 00:39:59.495
<v Speaker 1>it doesn't really help because I can't run

00:39:59.495 --> 00:39:59.655
<v Speaker 1>it?

00:40:00.400 --> 00:40:00.720
<v Speaker 1>But

00:40:02.000 --> 00:40:03.200
<v Speaker 1>right? I don't think I can run an

00:40:03.200 --> 00:40:05.520
<v Speaker 1>AMD sixty four on I don't think that

00:40:05.520 --> 00:40:07.520
<v Speaker 1>works in Docker or whatever. But

00:40:07.760 --> 00:40:09.440
<v Speaker 1>but, anyways but, yeah, so if, like, I

00:40:09.440 --> 00:40:11.280
<v Speaker 1>actually wanted to build am I still in

00:40:11.280 --> 00:40:12.720
<v Speaker 1>this app? So

00:40:13.235 --> 00:40:15.155
<v Speaker 1>if I wanted to build this application and

00:40:15.155 --> 00:40:16.435
<v Speaker 1>I wanted to support,

00:40:16.835 --> 00:40:17.635
<v Speaker 1>both,

00:40:18.595 --> 00:40:20.675
<v Speaker 1>Linux AMD sixty four

00:40:21.155 --> 00:40:22.035
<v Speaker 1>and

00:40:23.715 --> 00:40:24.515
<v Speaker 1>Linux

00:40:24.515 --> 00:40:26.115
<v Speaker 1>ARM 64,

00:40:26.115 --> 00:40:28.115
<v Speaker 1>and then let's just tag this as we'll

00:40:28.115 --> 00:40:30.160
<v Speaker 1>actually show, like, pushing the I build the

00:40:30.160 --> 00:40:33.600
<v Speaker 1>cloud. Demo

00:40:33.840 --> 00:40:34.640
<v Speaker 0>test.

00:40:35.040 --> 00:40:36.720
<v Speaker 1>So this will actually go and build both

00:40:36.720 --> 00:40:39.360
<v Speaker 1>architectures and then combine it into one image.

00:40:39.360 --> 00:40:41.280
<v Speaker 1>So, I mean, we're this is all standard

00:40:41.280 --> 00:40:43.600
<v Speaker 1>OCI stuff, so we are using manifest lists

00:40:43.600 --> 00:40:45.255
<v Speaker 1>and all that under the hood. So we

00:40:45.255 --> 00:40:47.095
<v Speaker 1>just basically are pulling in the different the

00:40:47.095 --> 00:40:48.855
<v Speaker 1>requirements from from different

00:40:51.414 --> 00:40:53.095
<v Speaker 1>I mean, we're sorry. No. The requirements. I

00:40:53.095 --> 00:40:54.535
<v Speaker 1>just read that. We're pulling in the images

00:40:54.535 --> 00:40:56.375
<v Speaker 1>from different architectures and then just linking them

00:40:56.375 --> 00:40:57.095
<v Speaker 1>all together.

00:40:58.135 --> 00:40:59.974
<v Speaker 1>So I think that just did the AMD

00:40:59.974 --> 00:41:02.210
<v Speaker 1>one, and now, yeah, it's probably doing that.

00:41:02.210 --> 00:41:04.290
<v Speaker 1>Or, yeah, now it's doing the arm one

00:41:04.290 --> 00:41:04.930
<v Speaker 1>maybe.

00:41:05.730 --> 00:41:07.730
<v Speaker 1>But if I actually wanna push this so,

00:41:07.730 --> 00:41:09.890
<v Speaker 1>like, I just built this image as

00:41:11.490 --> 00:41:12.050
<v Speaker 1>so

00:41:12.369 --> 00:41:13.890
<v Speaker 1>now I can actually push it.

00:41:16.455 --> 00:41:17.255
<v Speaker 1>And

00:41:17.415 --> 00:41:19.175
<v Speaker 1>this first one that will fail because I

00:41:19.175 --> 00:41:19.895
<v Speaker 1>don't have

00:41:20.775 --> 00:41:23.415
<v Speaker 1>oh, sorry. There's one one tiny little thing

00:41:23.415 --> 00:41:24.295
<v Speaker 1>that I forgot.

00:41:24.615 --> 00:41:26.455
<v Speaker 1>You have to put the full

00:41:26.855 --> 00:41:29.015
<v Speaker 1>registry in there, like Docker.io.

00:41:29.015 --> 00:41:30.750
<v Speaker 1>We don't have a default namespace. Like, that's

00:41:30.750 --> 00:41:32.510
<v Speaker 1>been, like, a big problem with Docker

00:41:32.830 --> 00:41:34.670
<v Speaker 1>in general is the default namespace always goes

00:41:34.670 --> 00:41:36.670
<v Speaker 1>to Docker IO. So

00:41:37.310 --> 00:41:39.630
<v Speaker 1>so we just decided we're just not gonna

00:41:39.630 --> 00:41:40.830
<v Speaker 1>have a default namespace.

00:41:40.990 --> 00:41:43.310
<v Speaker 1>So that's why that that push failed, but

00:41:43.310 --> 00:41:45.390
<v Speaker 1>this will fail also because I haven't logged

00:41:45.390 --> 00:41:45.710
<v Speaker 1>in.

00:41:46.805 --> 00:41:47.765
<v Speaker 1>It's gonna

00:41:48.005 --> 00:41:50.245
<v Speaker 1>it'll end up oh, wait. No. I guess

00:41:50.245 --> 00:41:52.325
<v Speaker 1>I have. Oh, I already used this. That

00:41:52.325 --> 00:41:53.845
<v Speaker 1>was that was nice. Oh,

00:41:54.165 --> 00:41:55.845
<v Speaker 1>yeah. Because I already had this set up.

00:41:56.645 --> 00:41:58.165
<v Speaker 1>Okay. So

00:41:58.420 --> 00:41:59.460
<v Speaker 1>so that's

00:41:59.940 --> 00:42:01.620
<v Speaker 1>that's kind of the basic flow. I mean,

00:42:01.620 --> 00:42:03.220
<v Speaker 1>are you kind of getting the the the

00:42:03.220 --> 00:42:03.940
<v Speaker 1>over

00:42:04.020 --> 00:42:06.340
<v Speaker 1>kind of the overview of kinda how Acorn

00:42:06.340 --> 00:42:07.380
<v Speaker 1>works? And

00:42:08.340 --> 00:42:10.420
<v Speaker 0>Yeah. I think so. I I'd like to

00:42:11.154 --> 00:42:13.395
<v Speaker 0>take a few steps back and slow down

00:42:13.395 --> 00:42:15.474
<v Speaker 0>and just kinda cover everything. Although, I'm slightly

00:42:15.474 --> 00:42:17.715
<v Speaker 0>worried that you've frozen these now there.

00:42:18.194 --> 00:42:19.555
<v Speaker 1>Oh, yeah. Let me let me just cancel

00:42:19.555 --> 00:42:21.075
<v Speaker 1>that because it's trying to push up the

00:42:21.075 --> 00:42:21.955
<v Speaker 1>content.

00:42:22.035 --> 00:42:23.650
<v Speaker 0>Yeah. Yeah. Got it. So let's take a

00:42:23.650 --> 00:42:25.570
<v Speaker 0>few steps back. Let's pop open the Acorn

00:42:25.570 --> 00:42:27.170
<v Speaker 0>file, and I've got a couple of questions

00:42:27.170 --> 00:42:28.690
<v Speaker 0>from and there, and then we'll take a

00:42:28.690 --> 00:42:30.690
<v Speaker 0>look at the template. And if anyone watching

00:42:30.690 --> 00:42:32.530
<v Speaker 0>us live has any questions, feel free to

00:42:32.530 --> 00:42:34.050
<v Speaker 0>drop them into the comments, and we'll get

00:42:34.050 --> 00:42:35.490
<v Speaker 0>around to them Yeah. Shortly.

00:42:35.970 --> 00:42:37.810
<v Speaker 0>Alright. So the first question is, you mentioned

00:42:37.810 --> 00:42:38.765
<v Speaker 0>us earlier.

00:42:39.085 --> 00:42:41.245
<v Speaker 0>It looks like q. You like q, but

00:42:41.245 --> 00:42:43.405
<v Speaker 0>it's not q. I also like q. So

00:42:43.405 --> 00:42:44.445
<v Speaker 0>I'm curious.

00:42:44.685 --> 00:42:45.965
<v Speaker 0>Why have you got

00:42:46.765 --> 00:42:48.685
<v Speaker 0>why is it not just q? What were

00:42:48.685 --> 00:42:49.805
<v Speaker 0>the what was the thinking there?

00:42:51.900 --> 00:42:54.299
<v Speaker 1>So the scope of queue, like, queue

00:42:55.099 --> 00:42:56.780
<v Speaker 1>I mean, it's an amazing language, and the

00:42:56.780 --> 00:42:57.740
<v Speaker 1>scope of queue, like

00:42:58.380 --> 00:43:00.060
<v Speaker 1>basically, what it comes down to

00:43:00.539 --> 00:43:01.260
<v Speaker 1>is

00:43:02.700 --> 00:43:05.020
<v Speaker 1>queue the whole fundamental thing about is, like,

00:43:05.020 --> 00:43:05.819
<v Speaker 1>unification.

00:43:06.295 --> 00:43:08.455
<v Speaker 1>It's, like, unification disjunctions.

00:43:08.455 --> 00:43:10.855
<v Speaker 1>It works so it's combining the idea of,

00:43:10.855 --> 00:43:12.855
<v Speaker 1>like, schema and data into this one thing,

00:43:12.855 --> 00:43:15.335
<v Speaker 1>and it's, like, really beautifully well done. I

00:43:15.335 --> 00:43:16.935
<v Speaker 1>very much like it. So kind of the

00:43:16.935 --> 00:43:18.615
<v Speaker 1>problem with queue is that

00:43:19.640 --> 00:43:21.640
<v Speaker 1>all of the unique and cool features of

00:43:21.640 --> 00:43:23.800
<v Speaker 1>it, we don't actually need.

00:43:24.120 --> 00:43:26.200
<v Speaker 1>We really just need a language that's kinda

00:43:26.200 --> 00:43:28.520
<v Speaker 1>much closer to to JSON. But

00:43:29.400 --> 00:43:31.400
<v Speaker 1>we like the style of queue better. Like,

00:43:31.400 --> 00:43:33.160
<v Speaker 1>they're it's kinda a little more elegant and

00:43:33.160 --> 00:43:34.520
<v Speaker 1>simpler in the in the approach.

00:43:35.214 --> 00:43:35.775
<v Speaker 1>So

00:43:36.415 --> 00:43:38.815
<v Speaker 1>when so one of the number one feedbacks

00:43:38.815 --> 00:43:40.335
<v Speaker 1>we got as we kind of started building

00:43:40.335 --> 00:43:42.495
<v Speaker 1>Acorn, we showed it to people, is,

00:43:44.575 --> 00:43:47.375
<v Speaker 1>it's, like, basically the difficulty of queue because

00:43:47.375 --> 00:43:49.855
<v Speaker 1>you start getting into all of, like, the

00:43:49.050 --> 00:43:51.690
<v Speaker 1>schema and all those other things that basically

00:43:51.690 --> 00:43:52.810
<v Speaker 1>they didn't need.

00:43:53.290 --> 00:43:54.010
<v Speaker 1>And so

00:43:54.250 --> 00:43:55.610
<v Speaker 1>there's all this stuff

00:43:56.330 --> 00:43:58.170
<v Speaker 1>in queue that we don't need that basically

00:43:58.170 --> 00:44:00.330
<v Speaker 1>kinda confuses users. But then on top of

00:44:00.330 --> 00:44:02.970
<v Speaker 1>it, it leads to a lot of unexpected

00:44:02.970 --> 00:44:03.930
<v Speaker 1>behavior for people.

00:44:05.335 --> 00:44:06.535
<v Speaker 1>Like, so, fundamentally,

00:44:06.935 --> 00:44:09.095
<v Speaker 1>what we got back there he's like, there's

00:44:09.095 --> 00:44:10.455
<v Speaker 1>two there's two

00:44:11.255 --> 00:44:14.055
<v Speaker 1>feedback we always got. Was one is they

00:44:14.055 --> 00:44:15.335
<v Speaker 1>want an else statement,

00:44:15.415 --> 00:44:17.175
<v Speaker 1>which is funny, but a q doesn't have

00:44:17.175 --> 00:44:18.730
<v Speaker 1>an else statement. Statement. Just has if.

00:44:19.690 --> 00:44:21.770
<v Speaker 1>And then the second one was

00:44:22.330 --> 00:44:23.930
<v Speaker 1>was that they really wanna be able to

00:44:23.930 --> 00:44:26.650
<v Speaker 1>override data. But, fundamentally, you can't override data

00:44:26.650 --> 00:44:27.370
<v Speaker 1>in queue.

00:44:28.410 --> 00:44:29.930
<v Speaker 1>But, like, when you get into more complex

00:44:29.930 --> 00:44:32.435
<v Speaker 1>examples where you're dealing with config files and

00:44:32.435 --> 00:44:34.355
<v Speaker 1>stuff, that it it becomes kind of obvious

00:44:34.355 --> 00:44:36.435
<v Speaker 1>that you wanna be able to change keys

00:44:36.435 --> 00:44:39.075
<v Speaker 1>in different in different situations or whatever. So,

00:44:39.075 --> 00:44:40.995
<v Speaker 1>basically, as, like, we went through it, like,

00:44:41.395 --> 00:44:42.994
<v Speaker 1>our needs like, I love q, but, like,

00:44:42.994 --> 00:44:45.315
<v Speaker 1>our needs of what we need for Acorn

00:44:45.670 --> 00:44:48.310
<v Speaker 1>don't really fully align with, like, what q

00:44:48.310 --> 00:44:49.830
<v Speaker 1>is and where q is going.

00:44:50.230 --> 00:44:51.990
<v Speaker 1>Because even, like, those two little small things,

00:44:51.990 --> 00:44:53.990
<v Speaker 1>like, overriding data or the if blocks, there's

00:44:53.990 --> 00:44:55.830
<v Speaker 1>reason or the else blocks. The reason why

00:44:55.830 --> 00:44:57.750
<v Speaker 1>they don't exist is because of, you know,

00:44:57.750 --> 00:45:00.095
<v Speaker 1>good reasons for q, but, like, those reasons

00:45:00.095 --> 00:45:02.415
<v Speaker 1>are not applicable to us. So

00:45:03.295 --> 00:45:03.935
<v Speaker 1>in

00:45:04.974 --> 00:45:07.214
<v Speaker 1>order to, like, kinda optimize the user experience

00:45:07.214 --> 00:45:08.335
<v Speaker 1>for users

00:45:09.055 --> 00:45:10.734
<v Speaker 1>like, this was a difficult decision, but we

00:45:10.734 --> 00:45:12.335
<v Speaker 1>basically came to a conclusion that we should

00:45:12.335 --> 00:45:13.934
<v Speaker 1>just kinda charge for our with our own

00:45:13.934 --> 00:45:14.255
<v Speaker 1>language.

00:45:14.890 --> 00:45:17.369
<v Speaker 1>And so far, we've gotten kind of really

00:45:17.369 --> 00:45:19.370
<v Speaker 1>no pushback or issue with that.

00:45:20.570 --> 00:45:22.410
<v Speaker 0>Yeah. I mean, I I like the release

00:45:22.410 --> 00:45:23.770
<v Speaker 0>the queue. It feels

00:45:24.410 --> 00:45:26.170
<v Speaker 0>yeah. It works well for me. In fact,

00:45:26.170 --> 00:45:27.850
<v Speaker 0>I'm pretty confident I could run queue eval

00:45:27.850 --> 00:45:30.410
<v Speaker 0>on that file, and it probably would just

00:45:29.495 --> 00:45:30.775
<v Speaker 0>work most,

00:45:30.855 --> 00:45:32.055
<v Speaker 0>at least from what I can see right

00:45:32.055 --> 00:45:34.135
<v Speaker 0>now. And being right about the test junctions,

00:45:34.135 --> 00:45:35.895
<v Speaker 0>those are runs that still trip me up,

00:45:35.895 --> 00:45:37.095
<v Speaker 0>and I've been using q a long time,

00:45:37.095 --> 00:45:38.455
<v Speaker 0>and I'm sure even worse for people that

00:45:38.455 --> 00:45:40.215
<v Speaker 0>are new to the language. Because the error

00:45:40.215 --> 00:45:43.015
<v Speaker 0>messages from q can sometimes lead you down

00:45:43.015 --> 00:45:43.895
<v Speaker 0>some awkward

00:45:44.135 --> 00:45:44.535
<v Speaker 0>paths.

00:45:45.600 --> 00:45:47.680
<v Speaker 0>Very confusing. Yeah. Yeah. So, I mean, I've

00:45:47.680 --> 00:45:50.320
<v Speaker 1>written, like, thousands and thousands of line. Yeah.

00:45:50.320 --> 00:45:51.440
<v Speaker 1>It's like, I I've done a lot of

00:45:51.440 --> 00:45:53.440
<v Speaker 1>queue. And internally,

00:45:53.440 --> 00:45:56.320
<v Speaker 1>we actually still use queue for some

00:45:56.640 --> 00:45:58.880
<v Speaker 1>data, like, SKU validation and things like that.

00:45:59.275 --> 00:46:01.355
<v Speaker 1>But, yeah, like, the the error messages are

00:46:01.355 --> 00:46:03.355
<v Speaker 1>are kind of difficult,

00:46:03.355 --> 00:46:04.715
<v Speaker 1>and it's not just because

00:46:06.715 --> 00:46:08.635
<v Speaker 1>yeah. And it's kind of hard hard to

00:46:08.635 --> 00:46:11.994
<v Speaker 1>solve solve those things because the the it's

00:46:11.994 --> 00:46:13.755
<v Speaker 1>just, the fundamental nature of what they're trying

00:46:13.755 --> 00:46:15.660
<v Speaker 1>to do, like, unifying data

00:46:15.740 --> 00:46:18.300
<v Speaker 1>or unifying the the the values or whatever.

00:46:18.300 --> 00:46:19.900
<v Speaker 1>So Cool. But

00:46:20.140 --> 00:46:22.380
<v Speaker 1>but I very much so it's like it's

00:46:22.380 --> 00:46:24.060
<v Speaker 1>like a very much like queue, but it

00:46:24.060 --> 00:46:25.740
<v Speaker 1>just didn't work out for this use case.

00:46:26.380 --> 00:46:28.300
<v Speaker 0>Alright. I'm happy with that. Alright. I've got

00:46:28.300 --> 00:46:30.780
<v Speaker 0>a couple more questions from here, and then

00:46:30.255 --> 00:46:32.734
<v Speaker 0>we'll jump into the comments. So we've got

00:46:32.734 --> 00:46:33.454
<v Speaker 0>these

00:46:33.535 --> 00:46:35.535
<v Speaker 0>I'm gonna call them generators, but your secret

00:46:35.615 --> 00:46:37.135
<v Speaker 0>stuff here. What

00:46:37.535 --> 00:46:39.214
<v Speaker 0>I'm really curious about is we've seen the

00:46:39.214 --> 00:46:41.615
<v Speaker 0>token type which generates some arbitrary string, which

00:46:41.615 --> 00:46:43.375
<v Speaker 0>I think you said could be configured,

00:46:43.375 --> 00:46:44.575
<v Speaker 0>which is really cool.

00:46:45.680 --> 00:46:48.400
<v Speaker 0>Does it do x five zero nines? That

00:46:48.400 --> 00:46:49.600
<v Speaker 0>would be pretty awesome.

00:46:51.600 --> 00:46:52.320
<v Speaker 1>Okay.

00:46:53.360 --> 00:46:55.360
<v Speaker 1>So we actually had x five zero nine

00:46:55.360 --> 00:46:56.160
<v Speaker 1>built in,

00:46:56.400 --> 00:46:57.040
<v Speaker 1>but

00:46:58.585 --> 00:47:00.985
<v Speaker 1>we ended up deleting it because we can't

00:47:01.225 --> 00:47:03.065
<v Speaker 1>it's kinda weird. We couldn't find, like, a

00:47:03.065 --> 00:47:05.305
<v Speaker 1>super obvious thing. So what like, what's your

00:47:05.305 --> 00:47:06.745
<v Speaker 1>use case where you want x five zero

00:47:06.745 --> 00:47:07.305
<v Speaker 1>nine?

00:47:08.745 --> 00:47:10.660
<v Speaker 1>Because you couldn't find, like, cause I built

00:47:10.660 --> 00:47:11.940
<v Speaker 1>it. So I'm like, oh, I could totally

00:47:11.940 --> 00:47:12.740
<v Speaker 1>use that.

00:47:13.460 --> 00:47:16.500
<v Speaker 0>Yeah. Maybe it's it's super niche, but working

00:47:16.500 --> 00:47:19.380
<v Speaker 0>on mutation mutation and mission controllers where you

00:47:19.380 --> 00:47:21.060
<v Speaker 0>have to have to see and then drop

00:47:21.060 --> 00:47:22.820
<v Speaker 0>the bundle into the CRD. And I know

00:47:22.820 --> 00:47:24.815
<v Speaker 0>that cert manager has the injector, and you

00:47:24.815 --> 00:47:25.535
<v Speaker 0>can do that.

00:47:26.414 --> 00:47:27.934
<v Speaker 0>I don't have cert manager in my local

00:47:28.095 --> 00:47:29.535
<v Speaker 0>Yeah. Yeah. Development clusters.

00:47:29.694 --> 00:47:31.295
<v Speaker 0>So that would be my use case there.

00:47:31.295 --> 00:47:33.454
<v Speaker 0>But maybe that's too niche for what this

00:47:33.454 --> 00:47:34.974
<v Speaker 0>product is done. Yep.

00:47:37.100 --> 00:47:39.020
<v Speaker 1>Well, so so I had this the same

00:47:39.020 --> 00:47:40.140
<v Speaker 1>thing where it's like, I've done all these

00:47:40.140 --> 00:47:41.340
<v Speaker 1>things where it's like, oh, it'd be cool

00:47:41.340 --> 00:47:42.940
<v Speaker 1>if I had x five zero nine. So

00:47:42.940 --> 00:47:44.140
<v Speaker 1>it's like, we actually built it in. You

00:47:44.140 --> 00:47:46.620
<v Speaker 1>could generate CA certificates and then sign certificates

00:47:46.620 --> 00:47:47.820
<v Speaker 1>from it and all this stuff.

00:47:48.620 --> 00:47:50.815
<v Speaker 1>But we ended up taking it out because

00:47:50.815 --> 00:47:52.495
<v Speaker 1>it seemed like the the majority of those

00:47:52.495 --> 00:47:55.135
<v Speaker 1>use cases ended up being very infrastructure oriented,

00:47:55.215 --> 00:47:56.975
<v Speaker 1>and they weren't really needed for the application.

00:47:56.975 --> 00:47:58.175
<v Speaker 1>So, like, the way that we're kind of

00:47:58.175 --> 00:48:00.895
<v Speaker 1>taking the approach on on encryption and all

00:48:00.895 --> 00:48:04.320
<v Speaker 1>that stuff is that well, one, like, the

00:48:04.320 --> 00:48:07.360
<v Speaker 1>application doesn't like like, what I don't like,

00:48:07.360 --> 00:48:08.640
<v Speaker 1>what we don't really want is, like, the

00:48:08.640 --> 00:48:10.720
<v Speaker 1>application to, like, let's say, generate a TLS

00:48:10.720 --> 00:48:13.360
<v Speaker 1>certificate and use that for serving, like, serving

00:48:13.360 --> 00:48:15.360
<v Speaker 1>out because, like, that's handled by, like, the

00:48:15.360 --> 00:48:18.255
<v Speaker 1>ingress controller, like, the ingress infrastructure or, you

00:48:18.255 --> 00:48:20.174
<v Speaker 1>know, something external to Kubernetes. So it's like

00:48:20.174 --> 00:48:22.255
<v Speaker 1>the application doesn't really need to be aware

00:48:22.255 --> 00:48:24.494
<v Speaker 1>of, like, encrypting its public endpoint.

00:48:24.734 --> 00:48:26.335
<v Speaker 1>I'm sure there's corner cases where you you'll

00:48:26.335 --> 00:48:27.615
<v Speaker 1>you'll say I'm wrong. But, like, for the

00:48:27.615 --> 00:48:30.015
<v Speaker 1>general general case, it's like, it doesn't seem

00:48:30.000 --> 00:48:31.600
<v Speaker 1>like, most of that stuff should be handled

00:48:31.600 --> 00:48:33.120
<v Speaker 1>by the platform.

00:48:33.360 --> 00:48:35.600
<v Speaker 1>And so, like, one of the features that's

00:48:35.600 --> 00:48:38.400
<v Speaker 1>coming out in the zero dot two or

00:48:38.400 --> 00:48:40.800
<v Speaker 1>zero dot three release of of Acorn

00:48:40.800 --> 00:48:43.680
<v Speaker 1>is gonna be, like, automatic TLS generation. Like,

00:48:43.680 --> 00:48:45.840
<v Speaker 1>we already integrate really well with cert manager.

00:48:46.135 --> 00:48:47.895
<v Speaker 1>So if you're already using cert manager today,

00:48:47.895 --> 00:48:49.655
<v Speaker 1>like, the integration is pretty straightforward.

00:48:50.535 --> 00:48:51.975
<v Speaker 1>But, like, we wanted to make it even

00:48:51.975 --> 00:48:53.495
<v Speaker 1>easier for our users where, like, for the

00:48:53.495 --> 00:48:55.735
<v Speaker 1>default use cases, the simpler use cases, we

00:48:55.735 --> 00:48:57.255
<v Speaker 1>just automatically create TLS.

00:48:57.655 --> 00:48:58.980
<v Speaker 1>So so we do that on the public

00:48:58.980 --> 00:49:00.740
<v Speaker 1>side. Now if you look at the internal

00:49:00.740 --> 00:49:03.300
<v Speaker 1>communication of, like, container to container within

00:49:03.300 --> 00:49:04.260
<v Speaker 1>the cluster,

00:49:04.580 --> 00:49:06.660
<v Speaker 1>we're leaning much more towards service mesh in

00:49:06.660 --> 00:49:09.620
<v Speaker 1>that situation because it's like we've designed Acorn

00:49:09.620 --> 00:49:11.220
<v Speaker 1>such that we can plug in a service

00:49:11.220 --> 00:49:13.355
<v Speaker 1>mesh and then then wire up all of

00:49:13.355 --> 00:49:14.875
<v Speaker 1>the service RBAC rules.

00:49:15.035 --> 00:49:17.115
<v Speaker 1>And then so it's like, basically, you'll get

00:49:17.115 --> 00:49:17.915
<v Speaker 1>MTLS

00:49:17.915 --> 00:49:19.515
<v Speaker 1>plus service authorization,

00:49:19.915 --> 00:49:22.635
<v Speaker 1>like, for free, basically. You just run, like,

00:49:22.635 --> 00:49:24.954
<v Speaker 1>the, you know, like, STO Acorn plug in,

00:49:24.954 --> 00:49:26.700
<v Speaker 1>and we'll program all those rules.

00:49:27.580 --> 00:49:28.860
<v Speaker 1>So, like, when we look at, like, container

00:49:28.860 --> 00:49:31.340
<v Speaker 1>to container communication, like, I kinda also don't

00:49:31.340 --> 00:49:33.660
<v Speaker 1>want containers to be doing TLS themselves because

00:49:33.660 --> 00:49:34.940
<v Speaker 1>it's like, well, I can still hardly do

00:49:34.940 --> 00:49:36.300
<v Speaker 1>that with with service

00:49:36.540 --> 00:49:38.300
<v Speaker 1>mesh and basically do a better job.

00:49:38.700 --> 00:49:40.955
<v Speaker 0>So Okay. Yeah. But if if the use

00:49:40.955 --> 00:49:42.555
<v Speaker 1>case comes back up, like, if we get,

00:49:42.555 --> 00:49:44.795
<v Speaker 1>like, request for it from users or whatever,

00:49:44.795 --> 00:49:46.475
<v Speaker 1>then we'll bring it back. We just yeah.

00:49:46.475 --> 00:49:48.315
<v Speaker 1>It's in Git the Git history. We just

00:49:48.475 --> 00:49:50.155
<v Speaker 1>we kinda deleted it right now. So

00:49:50.715 --> 00:49:53.460
<v Speaker 0>Alright. No. Your that makes sense. Definitely.

00:49:53.780 --> 00:49:56.100
<v Speaker 0>Okay. Couple more questions for me and then

00:49:56.100 --> 00:49:58.820
<v Speaker 0>comments. What's the difference between local data and

00:49:58.820 --> 00:49:59.700
<v Speaker 0>ARDs?

00:50:03.140 --> 00:50:04.980
<v Speaker 1>Yeah. Yeah. So local data. So this is,

00:50:04.980 --> 00:50:06.740
<v Speaker 1>like, kind of, like, a just a total

00:50:07.905 --> 00:50:09.825
<v Speaker 1>gratuitous use of the syntax.

00:50:11.105 --> 00:50:11.985
<v Speaker 1>And so

00:50:12.465 --> 00:50:15.585
<v Speaker 1>so, basically, ARDs is information that you pass

00:50:15.585 --> 00:50:17.345
<v Speaker 1>in. So this can be passed into the

00:50:17.345 --> 00:50:18.865
<v Speaker 1>user. I didn't actually show this. It's, like,

00:50:18.865 --> 00:50:20.865
<v Speaker 1>when you build the application. So, like, I

00:50:20.865 --> 00:50:23.609
<v Speaker 1>built this application here from this. I can

00:50:23.609 --> 00:50:24.330
<v Speaker 1>say,

00:50:26.250 --> 00:50:26.970
<v Speaker 1>run

00:50:27.289 --> 00:50:29.849
<v Speaker 1>and then help.

00:50:32.329 --> 00:50:34.569
<v Speaker 1>And then it creates the args on the

00:50:34.569 --> 00:50:36.490
<v Speaker 1>application. So this is like so when I

00:50:36.490 --> 00:50:38.250
<v Speaker 1>deploy this application, I can pass in an

00:50:38.250 --> 00:50:38.970
<v Speaker 1>argument

00:50:39.075 --> 00:50:42.035
<v Speaker 1>and change it. Okay? So so the args

00:50:42.035 --> 00:50:44.275
<v Speaker 1>are are designed for, like, external or your

00:50:44.275 --> 00:50:48.195
<v Speaker 1>input. Local data is just, like, just random

00:50:48.355 --> 00:50:50.595
<v Speaker 1>stuff that you can just put in here.

00:50:50.595 --> 00:50:52.595
<v Speaker 1>So a lot of times when we build

00:50:52.595 --> 00:50:52.915
<v Speaker 1>things,

00:50:53.550 --> 00:50:55.950
<v Speaker 1>like, I'll go to a a more

00:50:56.750 --> 00:51:00.510
<v Speaker 1>more complicated example, which is the Jenkins one.

00:51:06.945 --> 00:51:08.545
<v Speaker 1>Let's see. So, like, in the local data,

00:51:08.545 --> 00:51:11.105
<v Speaker 1>like, here, I have, like, the tax

00:51:11.265 --> 00:51:13.265
<v Speaker 1>the configuration as code

00:51:13.665 --> 00:51:15.105
<v Speaker 1>configuration in there.

00:51:15.905 --> 00:51:17.505
<v Speaker 1>And so I have that data in there,

00:51:17.505 --> 00:51:19.345
<v Speaker 1>and I can do, like, you know, logic

00:51:19.345 --> 00:51:20.465
<v Speaker 1>and manipulation of that.

00:51:21.820 --> 00:51:22.620
<v Speaker 1>But then

00:51:23.099 --> 00:51:23.980
<v Speaker 1>afterwards,

00:51:23.980 --> 00:51:25.180
<v Speaker 1>I then basically

00:51:25.180 --> 00:51:26.940
<v Speaker 1>turn that into YAML and stick it into

00:51:26.940 --> 00:51:28.940
<v Speaker 1>a secret. So local beta is just kinda

00:51:28.940 --> 00:51:29.580
<v Speaker 1>help

00:51:30.220 --> 00:51:31.660
<v Speaker 1>help you can just put crap in there

00:51:31.660 --> 00:51:33.900
<v Speaker 1>whenever you want to kinda help with your

00:51:33.900 --> 00:51:34.540
<v Speaker 1>package.

00:51:35.099 --> 00:51:35.500
<v Speaker 0>Okay.

00:51:36.045 --> 00:51:36.445
<v Speaker 0>One

00:51:37.244 --> 00:51:38.445
<v Speaker 0>last question then.

00:51:39.405 --> 00:51:41.005
<v Speaker 0>Can we go back to the simple Acorn

00:51:41.005 --> 00:51:41.565
<v Speaker 0>file?

00:51:42.605 --> 00:51:45.325
<v Speaker 0>And that you list a bunch of containers.

00:51:45.885 --> 00:51:48.365
<v Speaker 1>Yeah. Yeah. We got, you know, cache DB.

00:51:48.365 --> 00:51:50.720
<v Speaker 0>Can you run, like, web control get pods?

00:51:50.720 --> 00:51:52.880
<v Speaker 0>Is that one pod with multiple containers, one

00:51:52.880 --> 00:51:54.640
<v Speaker 0>pod, multiple pod?

00:51:54.880 --> 00:51:56.480
<v Speaker 0>Like, what does that Oh, no.

00:51:57.119 --> 00:51:58.000
<v Speaker 1>So, like yeah.

00:51:58.480 --> 00:51:59.040
<v Speaker 1>So

00:52:00.640 --> 00:52:02.080
<v Speaker 1>yeah. So under the hood

00:52:02.960 --> 00:52:05.280
<v Speaker 1>let's see. So under the hood let's see.

00:52:05.605 --> 00:52:07.205
<v Speaker 1>I'll first show you the namespace so you

00:52:07.205 --> 00:52:09.205
<v Speaker 1>understand. So when we deploy an application, we

00:52:09.205 --> 00:52:09.845
<v Speaker 1>actually

00:52:10.245 --> 00:52:11.365
<v Speaker 1>like, this

00:52:14.165 --> 00:52:16.325
<v Speaker 1>how does what's the syntax here at? No.

00:52:16.325 --> 00:52:16.965
<v Speaker 1>No. No. Sorry.

00:52:17.920 --> 00:52:19.200
<v Speaker 1>Yeah. There we go. Okay. So the the

00:52:19.200 --> 00:52:20.880
<v Speaker 1>CRD that we're actually creating under the hood

00:52:20.880 --> 00:52:22.080
<v Speaker 1>is just Acorn app.

00:52:22.320 --> 00:52:24.560
<v Speaker 1>Okay. So this is created in the Acorn

00:52:24.560 --> 00:52:25.520
<v Speaker 1>namespace.

00:52:25.760 --> 00:52:27.440
<v Speaker 1>But when we create the application

00:52:28.720 --> 00:52:30.400
<v Speaker 1>yeah. There's too much garbage in there to

00:52:30.400 --> 00:52:32.560
<v Speaker 1>to show you. But but, basically, every

00:52:32.880 --> 00:52:35.815
<v Speaker 1>app gets deployed into its own namespace. So,

00:52:35.815 --> 00:52:38.055
<v Speaker 1>like, you create the app like, the the

00:52:38.055 --> 00:52:39.735
<v Speaker 1>app CRD is in is in, like, the

00:52:39.735 --> 00:52:40.775
<v Speaker 1>user namespace.

00:52:40.935 --> 00:52:42.855
<v Speaker 1>And then for each each application, we then

00:52:42.855 --> 00:52:44.295
<v Speaker 1>create a new namespace.

00:52:44.535 --> 00:52:46.695
<v Speaker 1>Okay. So if I look at the namespaces

00:52:46.935 --> 00:52:49.760
<v Speaker 1>because this, like, this keeps the service discovery

00:52:50.240 --> 00:52:52.320
<v Speaker 1>keeps the service discovery very clear,

00:52:52.880 --> 00:52:55.120
<v Speaker 1>like, very simple and portable, and it also

00:52:55.120 --> 00:52:56.240
<v Speaker 1>helps with security.

00:52:57.120 --> 00:52:58.720
<v Speaker 1>It's very easy to lock down the applications

00:52:58.720 --> 00:53:00.835
<v Speaker 1>because we have one namespace per app. And

00:53:00.835 --> 00:53:02.915
<v Speaker 1>then we handle all the heavy cross service

00:53:02.915 --> 00:53:03.955
<v Speaker 1>discovery across

00:53:04.435 --> 00:53:06.195
<v Speaker 1>namespace and stuff like that. That that's, like,

00:53:06.195 --> 00:53:08.275
<v Speaker 1>more advanced topics. But so I have this

00:53:08.275 --> 00:53:10.115
<v Speaker 1>app in here. So it created this namespace.

00:53:10.115 --> 00:53:11.715
<v Speaker 1>So if I look in here, you'll see

00:53:11.715 --> 00:53:13.395
<v Speaker 1>I have three different pods.

00:53:13.555 --> 00:53:14.915
<v Speaker 1>If I look at the deployments, you can

00:53:14.915 --> 00:53:17.020
<v Speaker 1>see the deployments are, like, exactly so it's

00:53:17.020 --> 00:53:19.099
<v Speaker 1>like the app. So the container is actually

00:53:19.099 --> 00:53:20.859
<v Speaker 1>mapped to the to pods.

00:53:21.819 --> 00:53:23.579
<v Speaker 1>And so the the reason why we called

00:53:23.579 --> 00:53:25.180
<v Speaker 1>it containers is

00:53:25.740 --> 00:53:27.660
<v Speaker 1>it just makes a lot more sense to

00:53:27.660 --> 00:53:31.015
<v Speaker 1>users than getting into, like, the difficulties of

00:53:31.015 --> 00:53:33.335
<v Speaker 1>pods. But you can do if you want,

00:53:33.335 --> 00:53:34.935
<v Speaker 1>you can do sidecars.

00:53:35.575 --> 00:53:37.975
<v Speaker 1>Okay. So you can put in, like, sidecar

00:53:37.975 --> 00:53:38.615
<v Speaker 1>foo,

00:53:40.215 --> 00:53:42.300
<v Speaker 1>and then so you can still get the

00:53:42.300 --> 00:53:43.820
<v Speaker 1>full power, and you can also do you

00:53:43.820 --> 00:53:46.060
<v Speaker 1>can create init containers. You just say init

00:53:46.060 --> 00:53:46.700
<v Speaker 1>true.

00:53:47.740 --> 00:53:50.380
<v Speaker 1>Wow. So you can you can, you know,

00:53:50.380 --> 00:53:52.380
<v Speaker 1>use the full power of pods.

00:53:52.940 --> 00:53:55.500
<v Speaker 1>But, like, we don't enter like, we don't

00:53:55.515 --> 00:53:57.434
<v Speaker 1>because, like, the side like, the pods and

00:53:57.434 --> 00:53:59.835
<v Speaker 1>the sidecar pattern or something is super powerful.

00:54:00.075 --> 00:54:02.315
<v Speaker 1>Right? But it's kind of like it's like,

00:54:02.315 --> 00:54:04.154
<v Speaker 1>you don't get it until you actually need

00:54:04.154 --> 00:54:06.075
<v Speaker 1>it. So it's like, we don't shove it

00:54:06.075 --> 00:54:07.755
<v Speaker 1>down people's throat. Like, you need to understand

00:54:07.755 --> 00:54:09.674
<v Speaker 1>a pod. It's like, no. Just want containers.

00:54:09.674 --> 00:54:11.000
<v Speaker 1>And then at some point, they're like, oh,

00:54:11.000 --> 00:54:12.520
<v Speaker 1>but I really want this container to always

00:54:12.520 --> 00:54:13.800
<v Speaker 1>be next to it. And it's like, oh,

00:54:13.800 --> 00:54:15.000
<v Speaker 1>that's a sidecar.

00:54:15.079 --> 00:54:17.960
<v Speaker 1>You know? So, anyway, so that's that's that's

00:54:17.960 --> 00:54:18.680
<v Speaker 1>what we have.

00:54:19.319 --> 00:54:20.920
<v Speaker 1>So you also see, like, under the hood,

00:54:20.920 --> 00:54:22.440
<v Speaker 1>like, what it's doing of, like if I

00:54:22.440 --> 00:54:24.735
<v Speaker 1>look at services. Okay? So it's like, we

00:54:24.735 --> 00:54:27.135
<v Speaker 1>create services of the exact same name, like,

00:54:27.535 --> 00:54:29.375
<v Speaker 1>like, this so it's like under the hood,

00:54:29.375 --> 00:54:31.855
<v Speaker 1>we're creating standard Kubernetes objects,

00:54:32.175 --> 00:54:33.855
<v Speaker 1>and they're using the same names as what's

00:54:33.855 --> 00:54:35.855
<v Speaker 1>in the the Acorn file. Because, again, since

00:54:35.855 --> 00:54:38.015
<v Speaker 1>we're using our own namespace, we can do

00:54:38.015 --> 00:54:39.740
<v Speaker 1>that. It's, like, they're unique within the Acorn

00:54:39.740 --> 00:54:41.500
<v Speaker 1>files, and they're they're also unique within the

00:54:41.500 --> 00:54:42.300
<v Speaker 1>namespace.

00:54:42.940 --> 00:54:44.060
<v Speaker 1>So it's, like, most of the stuff that

00:54:44.060 --> 00:54:45.900
<v Speaker 0>we're wiring up is pretty straightforward. It's, like,

00:54:45.900 --> 00:54:48.460
<v Speaker 0>ingress services, config maps, secrets. We just deal

00:54:48.460 --> 00:54:49.820
<v Speaker 0>with all the, like, the core types.

00:54:51.705 --> 00:54:54.425
<v Speaker 1>Yeah. So it's like, if you understand Kubernetes,

00:54:54.425 --> 00:54:56.825
<v Speaker 1>like, what this produces is pretty straightforward and

00:54:56.825 --> 00:54:58.425
<v Speaker 1>obvious. Like, it's not

00:54:59.225 --> 00:55:01.705
<v Speaker 1>madness. It's not like this super heavy layer

00:55:01.705 --> 00:55:03.785
<v Speaker 1>on top of Kubernetes. It's a very light

00:55:03.785 --> 00:55:04.105
<v Speaker 1>layer.

00:55:05.150 --> 00:55:07.310
<v Speaker 1>It's just enforcing, like, a lot of good

00:55:07.310 --> 00:55:09.230
<v Speaker 1>standards and and stuff like that.

00:55:10.670 --> 00:55:11.790
<v Speaker 0>Sweet. Okay.

00:55:12.030 --> 00:55:14.750
<v Speaker 0>Let's talk So it's like from a security

00:55:14.750 --> 00:55:16.190
<v Speaker 1>purse sorry. Yeah.

00:55:16.590 --> 00:55:17.150
<v Speaker 1>Go ahead.

00:55:18.464 --> 00:55:19.904
<v Speaker 0>I was just gonna say we could tackle

00:55:19.904 --> 00:55:21.424
<v Speaker 0>a few of the comments that I've come

00:55:21.424 --> 00:55:22.785
<v Speaker 0>in from the people watching. But if you

00:55:22.785 --> 00:55:24.385
<v Speaker 0>wanna tackle some if you wanna mention some

00:55:24.385 --> 00:55:25.905
<v Speaker 0>security stuff, please feel free.

00:55:28.625 --> 00:55:29.744
<v Speaker 1>Oh, no. I was saying from, like, a

00:55:29.744 --> 00:55:31.345
<v Speaker 1>security perspective, like, the things that we do,

00:55:31.345 --> 00:55:33.025
<v Speaker 1>it's like, can't run privileged containers.

00:55:33.480 --> 00:55:34.360
<v Speaker 1>By default,

00:55:34.600 --> 00:55:36.920
<v Speaker 1>the applications have no access to Kubernetes.

00:55:37.480 --> 00:55:39.400
<v Speaker 1>You don't, like, you know, get permissions. There

00:55:39.400 --> 00:55:40.600
<v Speaker 1>is I can show you a way to

00:55:40.600 --> 00:55:42.840
<v Speaker 1>get permissions, and then it's very controlled if

00:55:42.840 --> 00:55:44.760
<v Speaker 1>you wanna get permission permissions to the to

00:55:44.760 --> 00:55:45.800
<v Speaker 1>the Kubernetes API.

00:55:46.695 --> 00:55:48.455
<v Speaker 1>And then on top of that, when we

00:55:48.455 --> 00:55:49.895
<v Speaker 1>create like, so I said, like, we create

00:55:49.895 --> 00:55:51.735
<v Speaker 1>a new namespace for each app.

00:55:51.975 --> 00:55:53.975
<v Speaker 1>So we go and if you look at

00:55:53.975 --> 00:55:57.015
<v Speaker 1>the namespace that's created, we automatically do the

00:55:57.015 --> 00:55:59.175
<v Speaker 1>baseline profile for pod security.

00:55:59.415 --> 00:56:02.860
<v Speaker 1>So those pods are are already enforced

00:56:02.860 --> 00:56:05.180
<v Speaker 1>that by Kubernetes that they can't do anything.

00:56:05.180 --> 00:56:06.780
<v Speaker 1>And so we're adding more things. Like, we're

00:56:06.780 --> 00:56:09.740
<v Speaker 1>gonna automatically program network policies, so you'll automatically

00:56:09.740 --> 00:56:12.300
<v Speaker 1>get the network policies. Because the definite the

00:56:12.300 --> 00:56:14.945
<v Speaker 1>definition of how Acorn is is, like, all

00:56:14.945 --> 00:56:16.625
<v Speaker 1>communication is explicit.

00:56:17.745 --> 00:56:19.505
<v Speaker 1>Going back to the Acorn file. Where was

00:56:19.505 --> 00:56:22.145
<v Speaker 1>it? Like, if I don't have this port

00:56:22.145 --> 00:56:22.705
<v Speaker 1>here,

00:56:22.945 --> 00:56:24.465
<v Speaker 1>then nothing can talk to it. Like, we

00:56:24.465 --> 00:56:27.510
<v Speaker 1>don't expose that port. But technically, if you

00:56:27.510 --> 00:56:29.270
<v Speaker 1>know the details of Kubernetes, it is technically

00:56:29.270 --> 00:56:30.710
<v Speaker 1>exposed. If you know the IP, you can

00:56:30.710 --> 00:56:32.950
<v Speaker 1>hit it or whatever. But but so the

00:56:32.950 --> 00:56:35.750
<v Speaker 1>idea is, like, the the the DSL describes

00:56:35.750 --> 00:56:37.990
<v Speaker 1>all the communication paths and what's exposed. So

00:56:37.990 --> 00:56:39.510
<v Speaker 1>then we can then go and enforce that

00:56:39.510 --> 00:56:42.455
<v Speaker 1>with, like, network policies or Cillium or Calico

00:56:42.455 --> 00:56:45.255
<v Speaker 1>or Istio. We can enforce all that stuff,

00:56:45.255 --> 00:56:47.095
<v Speaker 1>and we're building on kind of those integrations

00:56:47.095 --> 00:56:48.295
<v Speaker 1>into the lower levels.

00:56:49.015 --> 00:56:51.175
<v Speaker 0>Okay. Yeah. Okay. Yeah. We can go into

00:56:51.175 --> 00:56:52.615
<v Speaker 1>the questions. Yeah. Well, I think we have

00:56:52.615 --> 00:56:53.575
<v Speaker 0>a question that kinda

00:56:54.080 --> 00:56:56.800
<v Speaker 0>touches and kinda segues off this quite nicely.

00:56:56.800 --> 00:56:58.800
<v Speaker 0>So you said that you can't have a

00:56:58.800 --> 00:57:01.520
<v Speaker 0>privileged container, and that's because the DSL doesn't

00:57:01.520 --> 00:57:03.520
<v Speaker 0>provide any sort of interface to

00:57:04.000 --> 00:57:05.600
<v Speaker 0>generate a privileged container.

00:57:06.000 --> 00:57:08.800
<v Speaker 0>So what Bob then asked very early in

00:57:08.800 --> 00:57:09.840
<v Speaker 0>the session was

00:57:10.215 --> 00:57:12.855
<v Speaker 0>the issue here potentially is how the comment's

00:57:12.855 --> 00:57:14.215
<v Speaker 0>gonna scroll off the screen. Sorry about that.

00:57:14.215 --> 00:57:15.495
<v Speaker 0>But what do you do if you need

00:57:15.495 --> 00:57:16.935
<v Speaker 0>to break out of the abstraction? What do

00:57:16.935 --> 00:57:18.615
<v Speaker 0>I need to do something that isn't exposed

00:57:18.615 --> 00:57:21.095
<v Speaker 0>by the Acorn interface? You got any any

00:57:21.095 --> 00:57:21.655
<v Speaker 0>thoughts there?

00:57:25.970 --> 00:57:27.170
<v Speaker 1>Well,

00:57:27.170 --> 00:57:29.010
<v Speaker 1>I mean so there is a way to

00:57:29.010 --> 00:57:30.290
<v Speaker 1>request permissions,

00:57:31.330 --> 00:57:33.250
<v Speaker 1>and then you can do that. But, like,

00:57:33.890 --> 00:57:37.410
<v Speaker 1>the intention okay. So there's a bigger

00:57:37.185 --> 00:57:40.145
<v Speaker 1>there's a bigger goal with Acorn in general.

00:57:40.145 --> 00:57:41.905
<v Speaker 1>It's like because, also, it's like, we have

00:57:41.905 --> 00:57:43.665
<v Speaker 1>a company, and we're gonna eventually try to

00:57:43.665 --> 00:57:45.505
<v Speaker 1>make money and stuff like that. Oh, yeah.

00:57:45.505 --> 00:57:47.105
<v Speaker 1>About this. Like, about that, just I just

00:57:47.105 --> 00:57:48.865
<v Speaker 1>wanna make something clear. Acorn, the project is

00:57:48.865 --> 00:57:50.865
<v Speaker 1>open source. It will never be, like, open

00:57:50.865 --> 00:57:52.850
<v Speaker 1>core. We're not gonna do crap like that.

00:57:52.850 --> 00:57:54.850
<v Speaker 1>Like, if you know our history with Rancher,

00:57:55.570 --> 00:57:57.730
<v Speaker 1>the people at Acorn Labs, it's a lot

00:57:57.730 --> 00:57:59.170
<v Speaker 1>of the same people. Actually, it's all the

00:57:59.170 --> 00:58:02.050
<v Speaker 1>same cofounders as Rancher. We're very dedicated open

00:58:02.050 --> 00:58:04.130
<v Speaker 1>source. Okay. So you don't have to worry

00:58:04.130 --> 00:58:06.115
<v Speaker 1>about that. Like but but it's, like, our

00:58:06.115 --> 00:58:08.275
<v Speaker 1>fundamental premise of, like, what we're trying to

00:58:08.275 --> 00:58:10.835
<v Speaker 1>do is, like what we see is that

00:58:12.515 --> 00:58:15.235
<v Speaker 1>it's effectively, the operations of Kubernetes is is

00:58:15.235 --> 00:58:17.235
<v Speaker 1>too difficult. It's like, there's just there's so

00:58:17.235 --> 00:58:19.860
<v Speaker 1>much power and flexibility in Kubernetes

00:58:20.020 --> 00:58:21.380
<v Speaker 1>that it leads to,

00:58:22.339 --> 00:58:24.980
<v Speaker 1>a lot of operational complexities of everyone is

00:58:24.980 --> 00:58:25.940
<v Speaker 1>kind of building,

00:58:26.099 --> 00:58:28.180
<v Speaker 1>all of this stuff around Kubernetes

00:58:28.420 --> 00:58:31.540
<v Speaker 1>to, like, how to deploy applications and validate

00:58:31.540 --> 00:58:34.085
<v Speaker 1>it and and do upgrades and create pipelines

00:58:34.085 --> 00:58:36.005
<v Speaker 1>and all this stuff. And so our fundamental

00:58:36.005 --> 00:58:37.925
<v Speaker 1>premise is basically if, like, we can create

00:58:37.925 --> 00:58:41.125
<v Speaker 1>a simpler application unit that is fundamentally abstracted

00:58:41.125 --> 00:58:42.325
<v Speaker 1>from Kubernetes,

00:58:42.325 --> 00:58:45.365
<v Speaker 1>then we can drastically reduce the operational side.

00:58:45.365 --> 00:58:46.405
<v Speaker 1>And then at the end of the day,

00:58:46.405 --> 00:58:48.660
<v Speaker 1>that's what big enterprises and companies care about.

00:58:48.660 --> 00:58:50.020
<v Speaker 1>That's what they're gonna pay money for is

00:58:50.020 --> 00:58:52.260
<v Speaker 1>is if we can reduce the operational side.

00:58:52.420 --> 00:58:54.500
<v Speaker 1>So it's it's when you say, like, breaking

00:58:54.500 --> 00:58:55.700
<v Speaker 1>through the abstraction,

00:58:55.700 --> 00:58:58.100
<v Speaker 1>it's really important for us that the abstraction

00:58:58.100 --> 00:59:00.115
<v Speaker 1>actually works for all applications.

00:59:00.914 --> 00:59:04.035
<v Speaker 1>So where we draw the line is basically

00:59:04.994 --> 00:59:07.714
<v Speaker 1>if you need to do infrastructure oriented stuff,

00:59:07.714 --> 00:59:09.234
<v Speaker 1>that's gonna be, like, more of, like, a

00:59:10.035 --> 00:59:11.474
<v Speaker 1>that's that's gonna be, like,

00:59:12.390 --> 00:59:13.829
<v Speaker 1>right now, you can still just do everything

00:59:13.829 --> 00:59:15.829
<v Speaker 1>in Kubernetes, but we will be building kind

00:59:15.829 --> 00:59:18.789
<v Speaker 1>of, like, an Acorn system type thing where

00:59:18.789 --> 00:59:20.710
<v Speaker 1>you can do extensions and drivers and stuff

00:59:20.710 --> 00:59:23.510
<v Speaker 1>that will be more privilege oriented.

00:59:24.309 --> 00:59:26.150
<v Speaker 1>But for the Acorn file, it's like, we

00:59:26.150 --> 00:59:28.825
<v Speaker 1>don't do any, like, driver infrastructure

00:59:28.825 --> 00:59:31.065
<v Speaker 1>or store you know, like, don't do that

00:59:31.065 --> 00:59:34.185
<v Speaker 1>stuff. If your application needs access like, a

00:59:34.185 --> 00:59:35.065
<v Speaker 1>good way to look at it is, like,

00:59:35.065 --> 00:59:36.825
<v Speaker 1>if your application needs access to the Kubernetes

00:59:36.825 --> 00:59:37.625
<v Speaker 1>API,

00:59:38.105 --> 00:59:40.505
<v Speaker 1>then it's probably not just a pure application.

00:59:40.505 --> 00:59:43.380
<v Speaker 1>It's probably very oriented towards Kubernetes.

00:59:44.020 --> 00:59:46.180
<v Speaker 1>But there is a way to request permissions,

00:59:46.180 --> 00:59:48.260
<v Speaker 1>so you can request permissions and get access

00:59:48.260 --> 00:59:50.260
<v Speaker 1>to the Kubernetes API. But, like, once you

00:59:50.260 --> 00:59:52.580
<v Speaker 1>do that, you have to realize you're already,

00:59:52.580 --> 00:59:55.995
<v Speaker 1>like, kind of you're breaking the abstraction because

00:59:56.234 --> 00:59:57.675
<v Speaker 1>that thing can now do

00:59:57.915 --> 00:59:59.515
<v Speaker 1>a lot of things that could be really

00:59:59.515 --> 01:00:00.075
<v Speaker 1>bad.

01:00:00.395 --> 01:00:03.915
<v Speaker 1>So we're trying to actually create a

01:00:04.234 --> 01:00:06.075
<v Speaker 1>fairly strong abstraction layer, which I knew was

01:00:06.075 --> 01:00:06.875
<v Speaker 1>extremely difficult.

01:00:07.400 --> 01:00:09.480
<v Speaker 1>And and one of the the biggest questions

01:00:09.480 --> 01:00:11.560
<v Speaker 1>we always like, whenever we show Acorn to,

01:00:11.560 --> 01:00:13.480
<v Speaker 1>like, a real diehard Kubernetes thing, the first

01:00:13.480 --> 01:00:15.320
<v Speaker 1>thing Kubernetes uses, the first thing they're gonna

01:00:15.320 --> 01:00:16.840
<v Speaker 1>ask is what about CRDs?

01:00:17.240 --> 01:00:17.960
<v Speaker 1>And so

01:00:18.200 --> 01:00:20.120
<v Speaker 1>CRDs is something where it's like, well, if

01:00:20.120 --> 01:00:22.120
<v Speaker 1>we allow you to just create any CRD,

01:00:22.200 --> 01:00:24.715
<v Speaker 1>then it makes it such that, like,

01:00:25.275 --> 01:00:28.555
<v Speaker 1>this unit, this this Acorn app app that

01:00:28.555 --> 01:00:29.355
<v Speaker 1>we're deploying,

01:00:29.595 --> 01:00:31.995
<v Speaker 1>it no longer has a predictable behavior because

01:00:31.995 --> 01:00:34.715
<v Speaker 1>CRDs can do anything, and they don't have

01:00:34.715 --> 01:00:37.915
<v Speaker 1>a standard way that you interop interact with

01:00:37.915 --> 01:00:40.200
<v Speaker 1>them. Like, a very basic example is, like,

01:00:40.200 --> 01:00:41.880
<v Speaker 1>let's say I'm using the Kafka operator and

01:00:41.880 --> 01:00:44.040
<v Speaker 1>I wanted to create a Kafka instance.

01:00:44.680 --> 01:00:46.760
<v Speaker 1>If I put that CRD in my application

01:00:46.760 --> 01:00:48.360
<v Speaker 1>so when I deploy that app and then

01:00:48.360 --> 01:00:50.040
<v Speaker 1>I delete that app, it's gonna delete the

01:00:50.040 --> 01:00:51.160
<v Speaker 1>Kafka instance.

01:00:51.400 --> 01:00:53.225
<v Speaker 1>You know? That's bad. So, like, we go

01:00:53.225 --> 01:00:55.225
<v Speaker 1>through things where it's like like the way

01:00:55.225 --> 01:00:57.145
<v Speaker 1>the Acorns are designed is, like, if you

01:00:57.145 --> 01:00:58.825
<v Speaker 1>deploy the Acorn and then you delete it

01:00:58.825 --> 01:01:00.185
<v Speaker 1>and then you redeploy it,

01:01:00.745 --> 01:01:02.665
<v Speaker 1>the the state was stored in volumes and

01:01:02.665 --> 01:01:04.825
<v Speaker 1>secrets, which are not by default deleted when

01:01:04.825 --> 01:01:06.920
<v Speaker 1>the app is deleted. So if you, like,

01:01:06.920 --> 01:01:08.920
<v Speaker 1>mess up and accidentally delete it, which, like,

01:01:08.920 --> 01:01:11.160
<v Speaker 1>happens from, like, GitOps, people like, oops. You

01:01:11.160 --> 01:01:13.079
<v Speaker 1>know, wrong commit, and then they delete something.

01:01:14.359 --> 01:01:15.960
<v Speaker 1>You know, we protect you from that. So

01:01:15.960 --> 01:01:17.799
<v Speaker 1>it's like, you know, if you'd start doing

01:01:17.799 --> 01:01:19.559
<v Speaker 1>all these crazy things, then it's like, don't

01:01:19.880 --> 01:01:21.079
<v Speaker 1>you lose all the guarantees.

01:01:22.494 --> 01:01:23.215
<v Speaker 0>Okay.

01:01:23.535 --> 01:01:25.535
<v Speaker 0>I think in line with that, you mentioned

01:01:25.535 --> 01:01:28.095
<v Speaker 0>something there and earlier. You said the word

01:01:28.095 --> 01:01:30.015
<v Speaker 0>driver there, but you also mentioned, like,

01:01:30.335 --> 01:01:32.815
<v Speaker 0>Linkerd or Istio plugins earlier.

01:01:32.895 --> 01:01:35.135
<v Speaker 0>So there are extension points to kind of

01:01:35.215 --> 01:01:38.970
<v Speaker 0>Yeah. Alright. Okay. Is that something that Acorn

01:01:38.970 --> 01:01:41.450
<v Speaker 0>and Acorn Yeah. So that Sorry.

01:01:45.050 --> 01:01:47.690
<v Speaker 1>So that's the the extension points, that's all

01:01:47.690 --> 01:01:49.610
<v Speaker 1>in the works right now. So, like, we're

01:01:49.610 --> 01:01:52.365
<v Speaker 1>designing that out and doing that of, like,

01:01:52.365 --> 01:01:54.925
<v Speaker 1>how do we integrate all into. So,

01:01:56.365 --> 01:01:59.165
<v Speaker 1>yeah. So we're designing basically what's the plug

01:01:59.165 --> 01:02:01.165
<v Speaker 1>in mechanism so that you

01:02:01.725 --> 01:02:03.245
<v Speaker 1>can augment

01:02:03.300 --> 01:02:04.580
<v Speaker 1>because the idea is, like, if you have

01:02:04.580 --> 01:02:06.100
<v Speaker 1>this application definition,

01:02:06.500 --> 01:02:08.660
<v Speaker 1>can I create plug ins that basically take

01:02:08.660 --> 01:02:11.300
<v Speaker 1>that definition and then generate more resources?

01:02:11.620 --> 01:02:13.140
<v Speaker 1>So this is kinda, like, more of the

01:02:13.140 --> 01:02:14.980
<v Speaker 1>route that we're going with

01:02:15.700 --> 01:02:16.900
<v Speaker 1>with CRDs

01:02:17.335 --> 01:02:19.255
<v Speaker 1>is, like, if you need to do CRDs,

01:02:19.255 --> 01:02:20.215
<v Speaker 1>like your app

01:02:20.615 --> 01:02:22.535
<v Speaker 1>let's say you're using a very custom ingress

01:02:22.535 --> 01:02:23.735
<v Speaker 1>controller or something,

01:02:24.215 --> 01:02:25.495
<v Speaker 1>and so you need to be done a

01:02:25.495 --> 01:02:26.215
<v Speaker 1>certain way.

01:02:26.535 --> 01:02:27.095
<v Speaker 1>So

01:02:28.295 --> 01:02:29.815
<v Speaker 1>we would look at, like, the plug in

01:02:29.815 --> 01:02:30.935
<v Speaker 1>extension model

01:02:31.280 --> 01:02:33.200
<v Speaker 1>of, like, how do we generate different resources

01:02:33.200 --> 01:02:35.839
<v Speaker 1>or modify the existing resources based on your

01:02:35.839 --> 01:02:37.520
<v Speaker 1>specific configuration.

01:02:37.680 --> 01:02:40.080
<v Speaker 1>So so that's keeping the abstraction of, like

01:02:40.160 --> 01:02:42.160
<v Speaker 1>the application doesn't change, but, like, you have

01:02:42.160 --> 01:02:44.165
<v Speaker 1>a plug in in the infrastructure layer, which

01:02:44.165 --> 01:02:46.805
<v Speaker 1>can then kind of modify it. And that

01:02:46.805 --> 01:02:47.765
<v Speaker 1>will most likely

01:02:48.244 --> 01:02:50.565
<v Speaker 1>like, we'll have a an an approach where

01:02:50.565 --> 01:02:51.605
<v Speaker 1>you could you know?

01:02:53.525 --> 01:02:55.045
<v Speaker 1>I don't I I I won't talk too

01:02:55.045 --> 01:02:56.244
<v Speaker 1>much about it, but it's it's gonna be

01:02:56.244 --> 01:02:58.244
<v Speaker 1>really cool. The the the it's very it

01:02:58.244 --> 01:03:00.440
<v Speaker 1>should be really simple to write these extensions,

01:03:00.440 --> 01:03:01.640
<v Speaker 1>but I don't wanna get too much into

01:03:01.640 --> 01:03:04.200
<v Speaker 1>it. Okay. Let's tackle a couple more questions

01:03:04.200 --> 01:03:06.119
<v Speaker 0>then. So we got one from Javier here

01:03:06.119 --> 01:03:08.760
<v Speaker 0>who's asking, how do I handle scale?

01:03:08.760 --> 01:03:11.480
<v Speaker 0>I'm assuming they're looking for HPA support perhaps.

01:03:15.015 --> 01:03:16.775
<v Speaker 1>Well, I mean, so just the basic thing

01:03:16.775 --> 01:03:18.615
<v Speaker 1>is you can just put scale in here.

01:03:18.615 --> 01:03:20.135
<v Speaker 1>So you can just scale see, I'm saying

01:03:20.135 --> 01:03:20.935
<v Speaker 1>scale

01:03:20.935 --> 01:03:22.215
<v Speaker 1>is two.

01:03:22.295 --> 01:03:23.735
<v Speaker 1>And then if you wanna make it so

01:03:23.735 --> 01:03:25.880
<v Speaker 1>that's changeable, then you can say, you know,

01:03:25.880 --> 01:03:27.480
<v Speaker 1>scale to here and then

01:03:27.880 --> 01:03:30.920
<v Speaker 1>reference it like that. So then when you

01:03:30.920 --> 01:03:32.440
<v Speaker 1>deploy, you can change the scale.

01:03:33.400 --> 01:03:36.840
<v Speaker 1>But so so HPA support is definitely coming,

01:03:36.840 --> 01:03:37.960
<v Speaker 1>but it's not there yet. I mean, this

01:03:37.960 --> 01:03:40.125
<v Speaker 1>project's only, like, about three weeks old. So,

01:03:40.125 --> 01:03:41.885
<v Speaker 1>yes, we will be doing HPA and auto

01:03:41.885 --> 01:03:43.325
<v Speaker 1>scaling support. Like,

01:03:43.645 --> 01:03:45.245
<v Speaker 1>that's definitely on the road map, but just

01:03:45.245 --> 01:03:47.405
<v Speaker 1>not there yet. Because that's another one where

01:03:47.405 --> 01:03:49.405
<v Speaker 1>it's like yeah. It's super hard for people

01:03:49.405 --> 01:03:51.245
<v Speaker 1>to to get auto scaling right, and so

01:03:51.245 --> 01:03:52.605
<v Speaker 1>we wanna make this. So it's like auto

01:03:52.605 --> 01:03:55.100
<v Speaker 1>scaling blue green deployments, kind of, like, canary

01:03:55.100 --> 01:03:56.780
<v Speaker 1>and those type of things. Those are all

01:03:56.780 --> 01:03:59.100
<v Speaker 1>definitely on the road map of, like, addressing

01:03:59.100 --> 01:04:00.700
<v Speaker 1>it. Because, again, it just goes to the

01:04:00.700 --> 01:04:02.780
<v Speaker 1>idea of, like like, blue green or or

01:04:02.780 --> 01:04:05.020
<v Speaker 1>canary. Those are just, like, update models. Like,

01:04:05.020 --> 01:04:08.495
<v Speaker 1>fundamentally, your app definition shouldn't change. Like, that's

01:04:08.495 --> 01:04:10.495
<v Speaker 1>more of a how do you deploy and

01:04:10.495 --> 01:04:12.495
<v Speaker 1>run it? So it's like, you don't have

01:04:12.495 --> 01:04:14.015
<v Speaker 1>to build that into your you shouldn't have

01:04:14.015 --> 01:04:16.495
<v Speaker 1>to fundamentally build it into your application

01:04:16.815 --> 01:04:18.975
<v Speaker 1>how to do that. Like, the the platform

01:04:18.975 --> 01:04:20.495
<v Speaker 1>and runtime should be able to take care

01:04:20.495 --> 01:04:21.055
<v Speaker 1>of most of that.

01:04:22.349 --> 01:04:22.990
<v Speaker 0>Alright.

01:04:23.309 --> 01:04:24.190
<v Speaker 0>Next question.

01:04:24.349 --> 01:04:26.109
<v Speaker 0>What access to the cluster do I need

01:04:26.109 --> 01:04:28.190
<v Speaker 0>to be able to deploy an Acorn app?

01:04:31.230 --> 01:04:32.829
<v Speaker 1>Yeah. So right now, you do need admin

01:04:32.829 --> 01:04:35.309
<v Speaker 1>access. If you don't have admin access, you

01:04:35.309 --> 01:04:37.065
<v Speaker 1>can right now. It's just a shortcut, is

01:04:37.065 --> 01:04:38.185
<v Speaker 1>use vCluster.

01:04:39.065 --> 01:04:41.145
<v Speaker 1>So you can just run

01:04:41.785 --> 01:04:44.425
<v Speaker 1>vCluster and then run run Acorn inside of

01:04:44.425 --> 01:04:47.385
<v Speaker 1>vCluster, and there's no overhead or downside to

01:04:47.385 --> 01:04:47.865
<v Speaker 1>that.

01:04:48.744 --> 01:04:50.410
<v Speaker 1>That's what, like, I was saying I'm looking

01:04:50.410 --> 01:04:51.530
<v Speaker 1>at a way of trying to make it

01:04:51.530 --> 01:04:53.130
<v Speaker 1>work for just regular users, and that's what

01:04:53.130 --> 01:04:54.650
<v Speaker 1>we'll do as we'll effectively just wrap it

01:04:54.650 --> 01:04:55.610
<v Speaker 1>in vCluster.

01:04:55.770 --> 01:04:56.330
<v Speaker 1>But

01:04:57.690 --> 01:04:59.450
<v Speaker 1>but yeah. So you do need

01:04:59.930 --> 01:05:01.610
<v Speaker 1>you do need

01:05:03.095 --> 01:05:04.375
<v Speaker 1>kind of admin

01:05:04.454 --> 01:05:05.255
<v Speaker 1>access.

01:05:05.575 --> 01:05:06.935
<v Speaker 1>I will show you

01:05:07.494 --> 01:05:08.935
<v Speaker 1>specifically

01:05:09.015 --> 01:05:11.335
<v Speaker 2>what we need if I can figure

01:05:11.335 --> 01:05:11.815
<v Speaker 2>it out.

01:05:15.060 --> 01:05:15.460
<v Speaker 0>What's

01:05:16.020 --> 01:05:18.180
<v Speaker 0>sorry. This is not my normal work

01:05:19.220 --> 01:05:20.100
<v Speaker 1>working machine.

01:05:32.115 --> 01:05:35.555
<v Speaker 1>Okay. So this is specifically what what we

01:05:35.555 --> 01:05:36.515
<v Speaker 1>require,

01:05:37.474 --> 01:05:39.875
<v Speaker 1>which is access basically to our API groups,

01:05:41.570 --> 01:05:44.290
<v Speaker 1>some standard core stuff, and then we need

01:05:44.290 --> 01:05:45.810
<v Speaker 1>to be able to see the nodes,

01:05:47.090 --> 01:05:48.050
<v Speaker 1>CRDs,

01:05:48.050 --> 01:05:50.450
<v Speaker 1>API. Yeah. So, anyways, those those are the

01:05:50.450 --> 01:05:52.535
<v Speaker 1>the roles. So there's an actual, you know,

01:05:52.535 --> 01:05:54.455
<v Speaker 1>we do set up, like, a proper role

01:05:54.455 --> 01:05:56.135
<v Speaker 1>and role finding and all that stuff.

01:05:56.455 --> 01:05:58.215
<v Speaker 1>But, yeah, so you do need admin access

01:05:58.215 --> 01:05:59.975
<v Speaker 1>right now. But, again, if you don't have

01:05:59.975 --> 01:06:02.215
<v Speaker 1>admin access, you wanna try this out, run

01:06:02.215 --> 01:06:03.095
<v Speaker 1>vCluster.

01:06:03.095 --> 01:06:05.810
<v Speaker 1>VCluster doesn't require admin access at all.

01:06:06.210 --> 01:06:08.690
<v Speaker 1>V cluster from Loft, those guys.

01:06:09.250 --> 01:06:09.810
<v Speaker 0>Yeah.

01:06:10.370 --> 01:06:11.090
<v Speaker 0>Alright.

01:06:11.490 --> 01:06:12.290
<v Speaker 0>Next question.

01:06:12.850 --> 01:06:15.330
<v Speaker 0>Am I limited to create deployments as a

01:06:15.330 --> 01:06:17.410
<v Speaker 0>base for the resource application? I guess they're

01:06:17.410 --> 01:06:20.665
<v Speaker 0>looking or talking about stateful sets, daemon sets,

01:06:20.665 --> 01:06:21.305
<v Speaker 0>etcetera.

01:06:22.984 --> 01:06:23.945
<v Speaker 1>Okay. So

01:06:24.665 --> 01:06:27.625
<v Speaker 1>yeah. So we do we do it's so

01:06:27.705 --> 01:06:28.825
<v Speaker 1>okay. We

01:06:29.785 --> 01:06:31.625
<v Speaker 1>can do stateful applications, but we don't use

01:06:31.625 --> 01:06:33.385
<v Speaker 1>stateful sets. So this is kind of a

01:06:33.385 --> 01:06:33.785
<v Speaker 1>little different.

01:06:35.330 --> 01:06:37.810
<v Speaker 1>And there's a lot of reasons for that,

01:06:37.810 --> 01:06:39.730
<v Speaker 1>and maybe we'll find out that our reasons

01:06:39.730 --> 01:06:40.530
<v Speaker 1>are bad.

01:06:41.170 --> 01:06:44.130
<v Speaker 1>But in our example let me see.

01:06:44.690 --> 01:06:45.890
<v Speaker 1>So dogs,

01:06:46.210 --> 01:06:46.850
<v Speaker 1>there's,

01:06:47.890 --> 01:06:48.530
<v Speaker 1>let's see.

01:06:49.944 --> 01:06:52.025
<v Speaker 1>How how does one do this?

01:06:52.345 --> 01:06:54.185
<v Speaker 1>I know there's, like, advanced topics.

01:06:54.345 --> 01:06:57.224
<v Speaker 1>Stateful applications. Okay. So what we do is

01:06:57.464 --> 01:06:57.945
<v Speaker 1>okay.

01:06:59.145 --> 01:07:00.025
<v Speaker 1>Fundamentally,

01:07:00.025 --> 01:07:02.185
<v Speaker 1>the idea of a stateful application or what

01:07:02.185 --> 01:07:03.865
<v Speaker 1>stateful sets do is, like, why they're fun.

01:07:04.040 --> 01:07:06.760
<v Speaker 1>Why stateful sets are fundamentally different from deployments

01:07:06.920 --> 01:07:09.160
<v Speaker 1>is that a stateful set gives a gives

01:07:09.160 --> 01:07:09.400
<v Speaker 1>a

01:07:10.200 --> 01:07:11.000
<v Speaker 1>an identity

01:07:11.320 --> 01:07:13.320
<v Speaker 1>a fixed identity to each

01:07:14.200 --> 01:07:15.480
<v Speaker 1>container that's running.

01:07:15.720 --> 01:07:17.560
<v Speaker 1>And or and that and that identity is,

01:07:17.560 --> 01:07:19.080
<v Speaker 1>like, persistent. So if you delete it, it

01:07:19.080 --> 01:07:21.085
<v Speaker 1>will come back and has the same identity.

01:07:21.085 --> 01:07:23.645
<v Speaker 1>The identity is effectively just the DNS name.

01:07:23.965 --> 01:07:24.605
<v Speaker 1>So

01:07:25.085 --> 01:07:27.245
<v Speaker 1>the problem with stateful sets in in my

01:07:27.245 --> 01:07:29.965
<v Speaker 1>mind is that, like, it's kind of there's

01:07:29.965 --> 01:07:32.445
<v Speaker 1>not just one way to run stateful applications.

01:07:32.445 --> 01:07:35.210
<v Speaker 1>So sometimes stateful sets work, but sometimes, like,

01:07:35.210 --> 01:07:36.970
<v Speaker 1>your app is still more complicated than it

01:07:36.970 --> 01:07:38.330
<v Speaker 1>will work for a stateful set.

01:07:38.890 --> 01:07:41.290
<v Speaker 1>So our approach to stateful applications

01:07:41.530 --> 01:07:43.290
<v Speaker 1>is what we do is a little bit

01:07:43.290 --> 01:07:44.810
<v Speaker 1>more manual, but it gives you a huge

01:07:44.810 --> 01:07:46.890
<v Speaker 1>amount of flexibility. Because, like, we've tried, like,

01:07:46.890 --> 01:07:48.250
<v Speaker 1>running, like, Kafka, Cassandra,

01:07:49.375 --> 01:07:50.255
<v Speaker 1>MySQL,

01:07:50.255 --> 01:07:51.055
<v Speaker 1>Postgres,

01:07:51.215 --> 01:07:52.175
<v Speaker 1>Redis,

01:07:52.895 --> 01:07:55.295
<v Speaker 1>like, complicated setups, multi master.

01:07:56.015 --> 01:07:57.935
<v Speaker 1>We've we've tried running all these things in

01:07:57.935 --> 01:08:00.255
<v Speaker 1>in in Acorn, and we've gotten, you know,

01:08:00.255 --> 01:08:02.410
<v Speaker 1>largely to work. Like, you know, we've

01:08:02.410 --> 01:08:04.730
<v Speaker 1>we've we haven't run anything fundamental issue. Like,

01:08:04.730 --> 01:08:06.330
<v Speaker 1>we're not experts on all those systems, so

01:08:06.330 --> 01:08:08.410
<v Speaker 1>it's not all production grade. But, like but

01:08:08.410 --> 01:08:09.610
<v Speaker 1>we've been able to get them all set

01:08:09.610 --> 01:08:10.490
<v Speaker 1>up and everything.

01:08:10.730 --> 01:08:12.170
<v Speaker 1>And so the approach of what we do

01:08:12.170 --> 01:08:14.090
<v Speaker 1>is is kind of this trick here. It's

01:08:14.090 --> 01:08:16.185
<v Speaker 1>like, you you say, okay. If I want,

01:08:16.185 --> 01:08:17.385
<v Speaker 1>like, two replicas,

01:08:17.705 --> 01:08:19.944
<v Speaker 1>you just this is all again, this is,

01:08:19.944 --> 01:08:21.784
<v Speaker 1>like, queue queue syntax or whatever.

01:08:22.425 --> 01:08:24.185
<v Speaker 1>We go through well, it's close to queue.

01:08:24.185 --> 01:08:25.944
<v Speaker 1>This is not queue right here. But

01:08:26.745 --> 01:08:28.505
<v Speaker 1>we go through and we create a like,

01:08:28.505 --> 01:08:30.300
<v Speaker 1>you create a range of, like,

01:08:31.099 --> 01:08:33.420
<v Speaker 1>you know, three, and then you actually create

01:08:33.420 --> 01:08:34.539
<v Speaker 1>three separate,

01:08:35.099 --> 01:08:37.179
<v Speaker 1>like, in like, containers. So you say, like,

01:08:37.179 --> 01:08:39.739
<v Speaker 1>container one, container two, container three, and then

01:08:39.739 --> 01:08:41.260
<v Speaker 1>each one of those is going to bind

01:08:41.260 --> 01:08:43.099
<v Speaker 1>a different volume. So you get volume one,

01:08:43.099 --> 01:08:44.139
<v Speaker 1>volume two, volume three.

01:08:44.805 --> 01:08:46.805
<v Speaker 1>So it, like, effectively just created a stable

01:08:46.805 --> 01:08:48.965
<v Speaker 1>set. Each one has a stable identity,

01:08:49.205 --> 01:08:51.685
<v Speaker 1>and it has volumes associated with it. And

01:08:51.685 --> 01:08:53.444
<v Speaker 1>then there's also little tricks under the hood

01:08:53.444 --> 01:08:55.364
<v Speaker 1>where it's like, if it's

01:08:56.005 --> 01:08:58.510
<v Speaker 1>if it's an application of scale one if

01:08:58.510 --> 01:08:59.949
<v Speaker 1>it's a container of scale one and it's

01:08:59.949 --> 01:09:02.670
<v Speaker 1>using a rewrite only a rewrite once volume,

01:09:02.670 --> 01:09:04.510
<v Speaker 1>then we do, like, a replace strategy so

01:09:04.510 --> 01:09:06.750
<v Speaker 1>you don't get two two things trying to

01:09:06.750 --> 01:09:08.269
<v Speaker 1>access the data at the same time.

01:09:08.830 --> 01:09:10.270
<v Speaker 1>So, anyway, so our approach right now is

01:09:10.270 --> 01:09:11.949
<v Speaker 1>we're not actually using stateful sets under the

01:09:11.949 --> 01:09:14.104
<v Speaker 1>hood. You know, again, maybe we'll find out

01:09:14.104 --> 01:09:15.865
<v Speaker 1>that that was a stupid idea. But, like,

01:09:15.865 --> 01:09:18.265
<v Speaker 1>what we found is this pattern of effectively

01:09:18.265 --> 01:09:21.065
<v Speaker 1>kinda manually creating your stateful set ends up

01:09:21.065 --> 01:09:23.065
<v Speaker 1>being very powerful. So, again, like, one of

01:09:23.065 --> 01:09:24.930
<v Speaker 1>the reasons why it's so powerful is what

01:09:24.930 --> 01:09:26.210
<v Speaker 1>you can do is, like, in this if

01:09:26.210 --> 01:09:27.970
<v Speaker 1>loop here, is a lot of times you

01:09:27.970 --> 01:09:29.410
<v Speaker 1>have to bootstrap a system.

01:09:29.810 --> 01:09:31.729
<v Speaker 1>So, like, the first replica, you wanna run

01:09:31.729 --> 01:09:33.250
<v Speaker 1>that in the bootstrap mode, and the other

01:09:33.250 --> 01:09:35.570
<v Speaker 1>replicas you don't wanna run-in, like, the bootstrap

01:09:35.570 --> 01:09:38.050
<v Speaker 1>mode. So by basically looping through, you can

01:09:38.050 --> 01:09:40.955
<v Speaker 1>say, like, if I index is zero, like,

01:09:40.955 --> 01:09:43.274
<v Speaker 1>the first one, like, if I equals zero,

01:09:43.354 --> 01:09:46.154
<v Speaker 1>then add the Bootstrap Bootstrap arguments.

01:09:46.154 --> 01:09:47.194
<v Speaker 1>So you can configure

01:09:47.435 --> 01:09:49.034
<v Speaker 1>like, with the logic, just doing the logic

01:09:49.034 --> 01:09:51.354
<v Speaker 1>in here, you can configure the instances slightly

01:09:51.354 --> 01:09:51.914
<v Speaker 1>different,

01:09:52.635 --> 01:09:54.650
<v Speaker 1>which ends ends up being very useful to,

01:09:54.650 --> 01:09:56.810
<v Speaker 1>like, bootstrap clustered system. So it's like we've

01:09:56.810 --> 01:09:58.010
<v Speaker 1>been able to bring up yeah. So it's

01:09:58.010 --> 01:10:01.290
<v Speaker 1>like things like because, like, Cassandra or Cluster,

01:10:01.850 --> 01:10:03.770
<v Speaker 1>you know, those type of things. So I

01:10:03.770 --> 01:10:05.370
<v Speaker 1>can actually show you, like, a more

01:10:06.170 --> 01:10:07.370
<v Speaker 1>realistic

01:10:08.375 --> 01:10:09.895
<v Speaker 1>what this would look like because it it

01:10:09.895 --> 01:10:10.855
<v Speaker 1>starts getting

01:10:12.615 --> 01:10:14.695
<v Speaker 1>you know, like, as your apps like, running

01:10:14.695 --> 01:10:16.935
<v Speaker 1>the Stateful thing is is

01:10:17.335 --> 01:10:19.735
<v Speaker 1>complicated. It's never it's never easy running Stateful

01:10:19.735 --> 01:10:19.975
<v Speaker 1>stuff.

01:10:20.740 --> 01:10:24.180
<v Speaker 1>So these these examples are more complicated, but

01:10:24.180 --> 01:10:27.060
<v Speaker 1>it does get into the, like, what's capable.

01:10:27.060 --> 01:10:28.180
<v Speaker 1>So

01:10:28.180 --> 01:10:29.300
<v Speaker 1>here, it's like

01:10:30.580 --> 01:10:31.380
<v Speaker 1>oh, yeah. Sure.

01:10:34.125 --> 01:10:35.805
<v Speaker 1>But, yeah, this is actually a fully working

01:10:35.805 --> 01:10:38.525
<v Speaker 1>MariaDB that does Galera cluster onto the hood.

01:10:38.525 --> 01:10:39.965
<v Speaker 1>So, again, you can see this pattern of

01:10:39.965 --> 01:10:41.244
<v Speaker 1>we're doing that.

01:10:42.365 --> 01:10:44.045
<v Speaker 1>But we can we're also like, we do

01:10:44.045 --> 01:10:46.765
<v Speaker 1>it so, like, each each replica

01:10:46.765 --> 01:10:48.525
<v Speaker 1>depends on the previous one, so we get

01:10:48.525 --> 01:10:49.405
<v Speaker 1>a nice startup

01:10:49.820 --> 01:10:50.699
<v Speaker 1>behavior.

01:10:51.500 --> 01:10:54.140
<v Speaker 1>But this handles, like, also, like, recovery. So,

01:10:54.140 --> 01:10:55.820
<v Speaker 1>like, basically, you can scale down to one.

01:10:55.820 --> 01:10:57.099
<v Speaker 1>You can run a recovery,

01:10:57.500 --> 01:10:59.500
<v Speaker 1>like, when you break the cluster state and

01:10:59.500 --> 01:11:00.300
<v Speaker 1>stuff like that.

01:11:01.260 --> 01:11:02.780
<v Speaker 1>But you can see here, like, the args

01:11:02.745 --> 01:11:03.465
<v Speaker 1>here,

01:11:04.265 --> 01:11:06.505
<v Speaker 1>the design and recovery, and it equals the

01:11:06.505 --> 01:11:09.385
<v Speaker 1>bootstrap bootstrap indexes, which which one you wanna

01:11:09.385 --> 01:11:10.344
<v Speaker 1>bootstrap from.

01:11:10.985 --> 01:11:12.585
<v Speaker 1>Because when you're doing a recovery, you might

01:11:12.665 --> 01:11:14.265
<v Speaker 1>like, if if you screwed up your whole

01:11:14.265 --> 01:11:16.265
<v Speaker 1>cluster, then go, oh, crap. I wanna recover

01:11:16.265 --> 01:11:18.900
<v Speaker 1>and then bootstrap from, you know, the second

01:11:18.900 --> 01:11:21.380
<v Speaker 1>one, not the first one. So anyways. So

01:11:22.260 --> 01:11:24.020
<v Speaker 1>but, yeah, so there's all, you know, all

01:11:24.020 --> 01:11:25.860
<v Speaker 1>of all of that crap. So, like and

01:11:25.860 --> 01:11:27.540
<v Speaker 1>and this is like I haven't talked about

01:11:27.540 --> 01:11:29.220
<v Speaker 1>jobs at all, but you can do jobs

01:11:29.220 --> 01:11:31.780
<v Speaker 1>on a schedule. So it's like, this is

01:11:31.780 --> 01:11:34.405
<v Speaker 1>actually running a backup. This runs a a

01:11:34.405 --> 01:11:36.965
<v Speaker 1>backup of MariaDB and stores it into a

01:11:36.965 --> 01:11:38.005
<v Speaker 1>a volume.

01:11:40.245 --> 01:11:41.445
<v Speaker 1>But, yes, there's a lot of things in

01:11:41.445 --> 01:11:42.725
<v Speaker 1>here. If if you look at this read

01:11:42.725 --> 01:11:44.324
<v Speaker 1>me file for this, it

01:11:44.804 --> 01:11:47.889
<v Speaker 1>goes into more details on how to,

01:11:48.849 --> 01:11:51.170
<v Speaker 1>do all this stuff, like act active active

01:11:51.170 --> 01:11:52.129
<v Speaker 1>application.

01:11:52.610 --> 01:11:55.329
<v Speaker 1>Yeah. Removing replicas, whatever. Kind of all the

01:11:55.329 --> 01:11:56.690
<v Speaker 1>ops stuff you would need to know.

01:11:58.375 --> 01:11:59.735
<v Speaker 1>It's really cool. Like,

01:12:00.135 --> 01:12:02.135
<v Speaker 1>can it it keeps the backups, and it'll

01:12:02.135 --> 01:12:02.295
<v Speaker 1>show

01:12:04.135 --> 01:12:05.574
<v Speaker 1>it it actually has a list of the

01:12:05.574 --> 01:12:07.815
<v Speaker 1>backups that are available because there's some really

01:12:07.815 --> 01:12:09.974
<v Speaker 1>fancy things you can do because, like, there's

01:12:10.720 --> 01:12:12.160
<v Speaker 1>sorry. I'll I'll show you this. There's a

01:12:12.160 --> 01:12:14.080
<v Speaker 1>really cool secret type, which is just called

01:12:14.080 --> 01:12:14.880
<v Speaker 1>generated,

01:12:15.360 --> 01:12:17.120
<v Speaker 1>which you just run a job.

01:12:17.680 --> 01:12:20.239
<v Speaker 0>Let me go down here to secrets

01:12:21.520 --> 01:12:22.639
<v Speaker 0>templates.

01:12:22.880 --> 01:12:24.320
<v Speaker 0>Oh, crap. Where is it?

01:12:25.515 --> 01:12:26.955
<v Speaker 1>Nope. Nope. Nope.

01:12:27.355 --> 01:12:28.475
<v Speaker 2>I think it's in here.

01:12:29.035 --> 01:12:31.195
<v Speaker 1>Generated. Okay. Yeah. So there's a secret here,

01:12:31.195 --> 01:12:33.435
<v Speaker 1>which is called backup list, which is generated,

01:12:34.075 --> 01:12:35.915
<v Speaker 1>and it's off of the job called you

01:12:35.915 --> 01:12:37.835
<v Speaker 1>know, it runs off of the the backup

01:12:37.835 --> 01:12:40.530
<v Speaker 1>job. So what happens is when this this

01:12:40.530 --> 01:12:43.010
<v Speaker 1>job runs and it does the backup, the

01:12:43.010 --> 01:12:43.730
<v Speaker 1>output

01:12:44.050 --> 01:12:45.010
<v Speaker 1>of this

01:12:45.410 --> 01:12:47.570
<v Speaker 1>this script, there's a special

01:12:48.130 --> 01:12:50.130
<v Speaker 1>file you write to. It's like run secrets

01:12:50.130 --> 01:12:52.264
<v Speaker 1>output or something like that. In that job,

01:12:52.264 --> 01:12:53.784
<v Speaker 1>you write to that file, and then we

01:12:53.784 --> 01:12:54.985
<v Speaker 1>pick that up and throw it into the

01:12:54.985 --> 01:12:56.824
<v Speaker 1>secret. So this was, like, an interesting hack

01:12:56.824 --> 01:12:58.505
<v Speaker 1>of, like, when we run the backup,

01:12:58.744 --> 01:13:00.344
<v Speaker 1>the output of the backup

01:13:00.824 --> 01:13:02.985
<v Speaker 1>gets stored into the secret, and then you

01:13:02.985 --> 01:13:04.985
<v Speaker 1>can just list it. So, anyways, that was

01:13:04.985 --> 01:13:06.744
<v Speaker 1>a fun little hack that

01:13:07.230 --> 01:13:09.310
<v Speaker 1>Bill found. One of our engineers.

01:13:10.030 --> 01:13:11.230
<v Speaker 0>Right. Awesome.

01:13:11.390 --> 01:13:13.070
<v Speaker 1>Anyways yeah. So that was a very long

01:13:13.070 --> 01:13:13.950
<v Speaker 1>long approach to

01:13:15.470 --> 01:13:17.550
<v Speaker 0>Alright. We don't have any more questions in

01:13:17.550 --> 01:13:20.030
<v Speaker 0>the comment section right now. So before we

01:13:19.635 --> 01:13:21.554
<v Speaker 0>jump back, just to, like, quick face mode,

01:13:21.554 --> 01:13:22.675
<v Speaker 0>is there anything else you would like to

01:13:22.675 --> 01:13:23.954
<v Speaker 0>show us that you think is really cool

01:13:23.954 --> 01:13:24.914
<v Speaker 0>about Acorn?

01:13:29.635 --> 01:13:31.074
<v Speaker 1>Well, so I I was gonna show you

01:13:31.074 --> 01:13:32.820
<v Speaker 1>this, but, like, I think we're probably running

01:13:32.820 --> 01:13:34.660
<v Speaker 1>out about time, so I don't wanna go

01:13:34.660 --> 01:13:36.340
<v Speaker 1>go much further. But I'll just kinda point

01:13:36.340 --> 01:13:38.180
<v Speaker 1>you. So this was something, somebody had asked

01:13:38.180 --> 01:13:39.300
<v Speaker 1>me for a Jenkins,

01:13:39.940 --> 01:13:40.660
<v Speaker 1>to do,

01:13:41.300 --> 01:13:42.740
<v Speaker 1>what would it look like to run Jenkins

01:13:42.740 --> 01:13:43.699
<v Speaker 1>and Acorn.

01:13:43.780 --> 01:13:45.460
<v Speaker 1>And so I wanted to show this real

01:13:45.460 --> 01:13:47.914
<v Speaker 1>quickly. This is like, you can run this,

01:13:48.074 --> 01:13:49.514
<v Speaker 1>Acorn. So, basically,

01:13:50.474 --> 01:13:51.994
<v Speaker 1>build it, run this, and then you just

01:13:51.994 --> 01:13:54.074
<v Speaker 1>say expose the admin user, and that will

01:13:54.074 --> 01:13:55.114
<v Speaker 1>give you the password.

01:13:56.315 --> 01:13:58.394
<v Speaker 1>But in here, like, this is super,

01:13:58.954 --> 01:14:01.034
<v Speaker 1>cool. This is running j Jenkins,

01:14:01.550 --> 01:14:05.550
<v Speaker 1>and it's using the, configuration as code approach,

01:14:05.550 --> 01:14:07.310
<v Speaker 1>which integrates with Kubernetes. And it's also using

01:14:07.310 --> 01:14:09.470
<v Speaker 1>the Kubernetes, cloud plugin.

01:14:10.190 --> 01:14:11.950
<v Speaker 1>So it's pretty most of the stuff seems

01:14:11.950 --> 01:14:13.550
<v Speaker 1>pretty straightforward. Like, set up a bunch of

01:14:13.550 --> 01:14:15.950
<v Speaker 1>directories. These are ephemeral. These are coming from

01:14:15.950 --> 01:14:17.855
<v Speaker 1>secrets. This This is the file, and then

01:14:17.855 --> 01:14:19.055
<v Speaker 1>a bunch of probes.

01:14:19.535 --> 01:14:21.375
<v Speaker 1>Oh, the formatting. This is terrible.

01:14:23.055 --> 01:14:23.375
<v Speaker 1>But

01:14:23.935 --> 01:14:25.295
<v Speaker 1>so I just wanna show you. So this

01:14:25.295 --> 01:14:27.375
<v Speaker 1>is where you can actually request permissions. So

01:14:27.375 --> 01:14:28.975
<v Speaker 1>this is, like, a short syntax which just

01:14:28.975 --> 01:14:30.735
<v Speaker 1>says, like, basically, give me read, write access

01:14:30.735 --> 01:14:31.215
<v Speaker 1>to pods.

01:14:32.360 --> 01:14:34.599
<v Speaker 1>This is read only to pods log. This

01:14:34.599 --> 01:14:36.679
<v Speaker 1>is, like, the more verbose syntax, which will

01:14:36.679 --> 01:14:38.119
<v Speaker 1>give you you know, you can ask ask

01:14:38.119 --> 01:14:40.360
<v Speaker 1>for anything you want. So you can

01:14:40.679 --> 01:14:41.959
<v Speaker 1>get privileges.

01:14:42.920 --> 01:14:45.000
<v Speaker 1>And so that this uses it because this

01:14:45.000 --> 01:14:47.885
<v Speaker 1>internally is using the Kubernetes cloud thing. So,

01:14:47.885 --> 01:14:49.405
<v Speaker 1>like, when you run this, it's really cool,

01:14:49.565 --> 01:14:51.405
<v Speaker 1>little Acorn. Because, like, when you run it,

01:14:51.405 --> 01:14:52.845
<v Speaker 1>it comes up, and it's already wired up

01:14:52.845 --> 01:14:54.205
<v Speaker 1>to Kubernetes. So if you set up a

01:14:54.205 --> 01:14:56.605
<v Speaker 1>job, it's gonna launch a pod in Kubernetes

01:14:56.605 --> 01:14:59.565
<v Speaker 1>and, you know, start running the the Jenkins

01:15:00.060 --> 01:15:01.099
<v Speaker 1>jobs or whatever.

01:15:01.420 --> 01:15:03.179
<v Speaker 1>But I just wanted to show you, like,

01:15:03.179 --> 01:15:05.179
<v Speaker 1>the way that's controlled, like, kind of the

01:15:05.179 --> 01:15:07.099
<v Speaker 1>security. Because, like, when you ask for permissions,

01:15:07.099 --> 01:15:08.940
<v Speaker 1>as I was mentioning before, like, that is

01:15:08.940 --> 01:15:10.540
<v Speaker 1>kind of breaking the abstraction.

01:15:12.025 --> 01:15:14.105
<v Speaker 1>So it's very explicit of

01:15:14.505 --> 01:15:17.145
<v Speaker 1>let's see if oh, this might take

01:15:17.545 --> 01:15:18.425
<v Speaker 2>a little

01:15:18.585 --> 01:15:21.385
<v Speaker 2>bit. K. Won't tell long it'll take to

01:15:21.385 --> 01:15:21.865
<v Speaker 1>build this.

01:15:25.160 --> 01:15:27.800
<v Speaker 1>Because this is this internally is actually doing

01:15:27.800 --> 01:15:31.000
<v Speaker 1>a it has a custom a custom image

01:15:31.000 --> 01:15:32.600
<v Speaker 1>for the builder because I was trying to

01:15:32.600 --> 01:15:33.720
<v Speaker 1>get it to work for my own thing.

01:15:33.720 --> 01:15:35.400
<v Speaker 1>So the the image has, like, go in

01:15:35.400 --> 01:15:37.800
<v Speaker 1>it or something. So it has to do

01:15:37.800 --> 01:15:39.160
<v Speaker 1>that. But I don't think it should be

01:15:39.160 --> 01:15:42.074
<v Speaker 1>that that take that long. Let's let's see.

01:15:42.795 --> 01:15:44.075
<v Speaker 1>But I just because I just wanted to

01:15:44.075 --> 01:15:45.275
<v Speaker 1>show you the experience. Like, when you go

01:15:45.275 --> 01:15:47.035
<v Speaker 1>to run it, it's going to it's very

01:15:47.035 --> 01:15:48.955
<v Speaker 1>explicit of, like, this thing is asking for

01:15:48.955 --> 01:15:49.675
<v Speaker 1>permissions.

01:15:49.995 --> 01:15:51.675
<v Speaker 1>So you can't run something

01:15:51.915 --> 01:15:53.675
<v Speaker 1>without basically saying

01:15:54.060 --> 01:15:56.300
<v Speaker 1>saying if it asks for permissions, you have

01:15:56.300 --> 01:15:59.100
<v Speaker 1>to explicitly agree to letting it have permissions.

01:15:59.180 --> 01:16:01.100
<v Speaker 1>And then on top of that, you can't

01:16:01.100 --> 01:16:03.660
<v Speaker 1>give permissions you don't have, like, just regular

01:16:03.660 --> 01:16:07.020
<v Speaker 1>Kubernetes escalation checks, like that type of stuff.

01:16:07.100 --> 01:16:09.580
<v Speaker 1>It will it will do that. Okay.

01:16:14.515 --> 01:16:16.275
<v Speaker 1>Let's see. Wow.

01:16:16.995 --> 01:16:17.955
<v Speaker 1>GCC.

01:16:17.955 --> 01:16:19.075
<v Speaker 1>Oh, because I installed.

01:16:20.275 --> 01:16:21.475
<v Speaker 1>I'm just like, what in the world? I

01:16:21.475 --> 01:16:22.835
<v Speaker 1>thought I just well, I was just installing

01:16:22.835 --> 01:16:23.235
<v Speaker 1>curl.

01:16:23.760 --> 01:16:26.239
<v Speaker 1>It's like, need to compile it for curl.

01:16:28.880 --> 01:16:29.679
<v Speaker 1>So

01:16:30.239 --> 01:16:32.960
<v Speaker 0>do you see a future here where we're,

01:16:32.960 --> 01:16:35.119
<v Speaker 0>like Watching. Acorns are gonna be published to,

01:16:35.119 --> 01:16:36.925
<v Speaker 0>like, their effect hub, and people can just

01:16:36.925 --> 01:16:39.645
<v Speaker 0>say, I wanna deploy Jenkins or Postgres, and

01:16:39.645 --> 01:16:43.085
<v Speaker 0>the Acorns are publicly available and easily consumed.

01:16:45.645 --> 01:16:47.245
<v Speaker 1>Yeah. Yeah. And that's what we'd like to

01:16:47.245 --> 01:16:49.085
<v Speaker 0>get to because it's like Docker, you know,

01:16:49.085 --> 01:16:50.685
<v Speaker 0>Docker did a decent job of, like, you

01:16:50.685 --> 01:16:53.000
<v Speaker 1>know, creating shareable Docker images.

01:16:53.400 --> 01:16:54.040
<v Speaker 1>But,

01:16:55.000 --> 01:16:57.720
<v Speaker 1>honestly, like, the Helm chart ecosystem

01:16:57.720 --> 01:17:00.040
<v Speaker 1>of running apps, I mean, if anybody's, like,

01:17:00.040 --> 01:17:01.960
<v Speaker 1>realistically used a lot of the Helm charts

01:17:01.960 --> 01:17:03.240
<v Speaker 1>out there, you'll know that, like,

01:17:04.324 --> 01:17:07.045
<v Speaker 1>they basically will never run the first try.

01:17:07.364 --> 01:17:09.205
<v Speaker 1>And, you know, it takes quite a bit

01:17:09.205 --> 01:17:11.364
<v Speaker 1>to finally get the arguments right and eventually

01:17:11.364 --> 01:17:13.045
<v Speaker 1>figure out. And then it's, like, a lot

01:17:13.045 --> 01:17:15.364
<v Speaker 1>of reading and knowing what the best you

01:17:15.364 --> 01:17:16.830
<v Speaker 1>know? So it's like, I don't think the

01:17:16.830 --> 01:17:19.789
<v Speaker 1>ecosystem is very good in terms of, like,

01:17:20.270 --> 01:17:22.590
<v Speaker 1>you know, these applications and stuff like that.

01:17:22.670 --> 01:17:24.510
<v Speaker 1>What what you see right now is, like

01:17:26.030 --> 01:17:27.709
<v Speaker 1>if you look at, like, let's say, like,

01:17:27.869 --> 01:17:30.429
<v Speaker 1>hub, what's available for operator, the majority of

01:17:30.429 --> 01:17:33.315
<v Speaker 1>the things are all, like, Kubernetes infrastructure oriented.

01:17:33.315 --> 01:17:35.875
<v Speaker 1>You know? So, like, security scanners or

01:17:36.115 --> 01:17:37.795
<v Speaker 1>operators that you know? So it's, it's not

01:17:37.795 --> 01:17:38.355
<v Speaker 1>really

01:17:38.595 --> 01:17:40.675
<v Speaker 1>applicate you know? So it's, I don't know.

01:17:40.675 --> 01:17:42.995
<v Speaker 1>I'm I'm, and I'm in general, like, not

01:17:42.995 --> 01:17:44.595
<v Speaker 1>a big fan of operators. I don't think

01:17:44.595 --> 01:17:46.840
<v Speaker 1>that's, like, a very good pattern.

01:17:47.000 --> 01:17:48.840
<v Speaker 1>Like, I'm not saying don't use operators because

01:17:48.840 --> 01:17:50.760
<v Speaker 1>it's kinda, like, the best thing that exists

01:17:50.760 --> 01:17:51.480
<v Speaker 1>right now.

01:17:52.360 --> 01:17:53.000
<v Speaker 1>But

01:17:53.320 --> 01:17:53.880
<v Speaker 1>hope

01:17:54.920 --> 01:17:56.680
<v Speaker 1>to see that we can basically

01:17:58.215 --> 01:18:01.175
<v Speaker 1>create a stronger ecosystem around Acorns than what

01:18:01.175 --> 01:18:03.014
<v Speaker 1>Helm or operators has done.

01:18:03.335 --> 01:18:05.655
<v Speaker 1>Okay. So, finally, that took forever. So when

01:18:05.655 --> 01:18:06.775
<v Speaker 1>you go to run this, this is what

01:18:06.775 --> 01:18:08.534
<v Speaker 1>it's gonna do. It's gonna it's gonna warn

01:18:08.534 --> 01:18:10.135
<v Speaker 1>you. And so, like, this is very dangerous,

01:18:10.135 --> 01:18:11.655
<v Speaker 1>but it's saying, like, okay. This app is

01:18:11.655 --> 01:18:13.735
<v Speaker 1>requesting these scope like, these these permissions,

01:18:15.469 --> 01:18:17.230
<v Speaker 1>and then you have to agree to it.

01:18:17.230 --> 01:18:18.590
<v Speaker 1>But if I agree to it, then this

01:18:18.590 --> 01:18:19.469
<v Speaker 1>is basically

01:18:20.350 --> 01:18:22.670
<v Speaker 1>this is gonna bring up my my

01:18:23.710 --> 01:18:25.150
<v Speaker 1>this will bring up Jenkins.

01:18:26.430 --> 01:18:27.949
<v Speaker 1>Anyway so yeah. So that was probably, like,

01:18:27.949 --> 01:18:28.750
<v Speaker 1>the last thing I wanna show.

01:18:30.095 --> 01:18:32.255
<v Speaker 0>Awesome. I'm gonna pop this back over then

01:18:32.575 --> 01:18:33.455
<v Speaker 0>here.

01:18:35.055 --> 01:18:35.775
<v Speaker 0>Okay.

01:18:36.495 --> 01:18:38.895
<v Speaker 0>So that was really cool. If anyone has

01:18:38.895 --> 01:18:40.735
<v Speaker 0>any more questions before we finish up, now

01:18:40.735 --> 01:18:42.335
<v Speaker 0>is your time to drop them into the

01:18:42.335 --> 01:18:42.975
<v Speaker 0>comment section.

01:18:43.900 --> 01:18:45.739
<v Speaker 0>That end, I'll I'll kinda give you one

01:18:45.739 --> 01:18:47.739
<v Speaker 0>more for myself. But you said this project

01:18:47.739 --> 01:18:49.579
<v Speaker 0>is really young. It's really early. Things are

01:18:49.579 --> 01:18:51.659
<v Speaker 0>moving fast. Like, what's coming up? What's on

01:18:51.659 --> 01:18:53.420
<v Speaker 0>the road map for the next kinda couple

01:18:53.420 --> 01:18:53.739
<v Speaker 0>of months?

01:18:58.364 --> 01:19:00.445
<v Speaker 1>So just minor

01:19:00.445 --> 01:19:01.164
<v Speaker 1>so, like,

01:19:01.565 --> 01:19:03.244
<v Speaker 1>we're adding just, like, a bunch of, like,

01:19:03.244 --> 01:19:06.685
<v Speaker 1>little minor things, like, of so TLS support

01:19:06.685 --> 01:19:07.564
<v Speaker 1>is coming

01:19:08.205 --> 01:19:09.970
<v Speaker 1>so that, like, out of the box, we'll

01:19:09.970 --> 01:19:12.050
<v Speaker 1>just automatically wire up TLS. Again, certain manager

01:19:12.050 --> 01:19:13.810
<v Speaker 1>already works, but so that's coming.

01:19:15.090 --> 01:19:16.770
<v Speaker 1>You know, being able to label and annotate

01:19:16.770 --> 01:19:18.610
<v Speaker 1>everything because people wanna be able to put,

01:19:18.610 --> 01:19:20.690
<v Speaker 1>you know, different annotations that do weird things

01:19:20.690 --> 01:19:22.130
<v Speaker 1>under the hood in Kubernetes.

01:19:22.455 --> 01:19:25.574
<v Speaker 1>So, we're adding support to basically label and

01:19:25.574 --> 01:19:26.614
<v Speaker 1>annotate everything.

01:19:28.135 --> 01:19:29.895
<v Speaker 1>You know, the the language, as I said,

01:19:29.895 --> 01:19:31.735
<v Speaker 1>is, like, it's it's queue right now, but

01:19:31.735 --> 01:19:33.815
<v Speaker 1>we're trying to form like, it's a sub

01:19:33.895 --> 01:19:35.494
<v Speaker 1>it's kinda like a fork of queue right

01:19:35.494 --> 01:19:37.175
<v Speaker 1>now, but we're trying to formalize that into

01:19:37.175 --> 01:19:38.960
<v Speaker 1>our into our own things so it becomes

01:19:38.960 --> 01:19:41.040
<v Speaker 1>very clear, the scope of what we're using

01:19:41.040 --> 01:19:41.920
<v Speaker 1>and everything.

01:19:42.960 --> 01:19:46.480
<v Speaker 1>But the bigger stuff that's coming is

01:19:47.199 --> 01:19:49.840
<v Speaker 1>and, you know, let's see where we we're

01:19:49.865 --> 01:19:52.665
<v Speaker 1>almost in September. Right? Like, it's the August.

01:19:52.745 --> 01:19:55.145
<v Speaker 1>Yeah. So, like, of course, we're, like, conference

01:19:55.145 --> 01:19:58.105
<v Speaker 1>driven, so conference driven development. So we're shooting

01:19:58.105 --> 01:20:00.025
<v Speaker 1>for, like, cube con time.

01:20:00.745 --> 01:20:03.720
<v Speaker 1>We'll have a much bigger features in the

01:20:03.720 --> 01:20:06.360
<v Speaker 1>realm of kinda like CICD and stuff.

01:20:07.000 --> 01:20:09.720
<v Speaker 1>So, basically, once you have the Acorn, how

01:20:09.720 --> 01:20:12.040
<v Speaker 1>do you very quickly wire up the pipeline?

01:20:12.040 --> 01:20:13.960
<v Speaker 1>Right now, it already works very well. Like,

01:20:13.960 --> 01:20:15.240
<v Speaker 1>I didn't show this, but when you do

01:20:15.240 --> 01:20:17.960
<v Speaker 1>Acorn run, you can do dash o YAML,

01:20:17.960 --> 01:20:19.635
<v Speaker 1>and it will just basically spit out the

01:20:19.635 --> 01:20:20.435
<v Speaker 1>CRD,

01:20:20.515 --> 01:20:21.955
<v Speaker 1>and you can put that into your GitOps

01:20:21.955 --> 01:20:23.955
<v Speaker 1>flow. So it's like, if you're already doing

01:20:23.955 --> 01:20:27.235
<v Speaker 1>GitOps today, Acorn integrates super well into into

01:20:27.235 --> 01:20:28.594
<v Speaker 1>any GitOps flow.

01:20:29.395 --> 01:20:31.395
<v Speaker 1>But, like, we kinda believe the the entire

01:20:31.680 --> 01:20:34.960
<v Speaker 1>everything could be significantly easier. So how do

01:20:34.960 --> 01:20:38.080
<v Speaker 1>you do, like, automated builds and deployments and

01:20:38.160 --> 01:20:39.760
<v Speaker 1>and, CI?

01:20:39.760 --> 01:20:41.760
<v Speaker 1>Like, like, one of the one things that

01:20:41.840 --> 01:20:43.440
<v Speaker 1>we've we've already talked about this one. This

01:20:43.440 --> 01:20:45.545
<v Speaker 1>feature is, like, the idea of running, like,

01:20:45.545 --> 01:20:46.585
<v Speaker 1>Acorn test.

01:20:47.065 --> 01:20:49.305
<v Speaker 1>So the idea of Acorn test is, like,

01:20:49.785 --> 01:20:51.785
<v Speaker 1>within a CI flow, you wanna test your

01:20:51.785 --> 01:20:53.785
<v Speaker 1>application. So it's like with Acorn, it's very

01:20:53.785 --> 01:20:55.705
<v Speaker 1>easy to just spin up your application.

01:20:57.239 --> 01:20:58.760
<v Speaker 1>You know, you just do Acorn Run, and

01:20:58.760 --> 01:20:59.880
<v Speaker 1>you can run it anywhere. It's kind of

01:20:59.880 --> 01:21:01.400
<v Speaker 1>self contained or whatever. You can very easily

01:21:01.400 --> 01:21:03.960
<v Speaker 1>spin it up. So we wanna add basically

01:21:03.960 --> 01:21:05.559
<v Speaker 1>a test mode where we spin up the

01:21:05.559 --> 01:21:07.559
<v Speaker 1>application, but then you define a series of

01:21:07.559 --> 01:21:08.199
<v Speaker 1>jobs,

01:21:08.920 --> 01:21:10.599
<v Speaker 1>you know, and you can basically when you

01:21:10.599 --> 01:21:12.615
<v Speaker 1>you say test foo, it'll run the test

01:21:12.615 --> 01:21:14.455
<v Speaker 1>job, which can then do, like, an integration

01:21:14.455 --> 01:21:17.175
<v Speaker 1>test suite or or or whatever. And so

01:21:17.175 --> 01:21:19.495
<v Speaker 1>you can very easily test your application within,

01:21:19.495 --> 01:21:21.895
<v Speaker 1>a CI flow Okay. You know, to to

01:21:21.895 --> 01:21:23.415
<v Speaker 1>do, like, integration tests really easily.

01:21:24.159 --> 01:21:24.959
<v Speaker 0>Awesome.

01:21:25.039 --> 01:21:25.760
<v Speaker 0>No.

01:21:25.840 --> 01:21:27.599
<v Speaker 1>So those that's some of the stuff coming.

01:21:28.079 --> 01:21:30.400
<v Speaker 0>Well, it sounds exciting. And I've been called

01:21:30.400 --> 01:21:32.239
<v Speaker 0>out by Russell in the chat who asked

01:21:32.239 --> 01:21:34.719
<v Speaker 0>the question five minutes in. So eighty minutes

01:21:34.719 --> 01:21:36.400
<v Speaker 0>ago, and I didn't throw it to you.

01:21:36.400 --> 01:21:38.185
<v Speaker 0>So I'm gonna do that now. But Russell

01:21:38.185 --> 01:21:40.505
<v Speaker 0>wants to know what's actually in the OCI

01:21:40.505 --> 01:21:42.265
<v Speaker 0>image slash artifact. Oh.

01:21:45.305 --> 01:21:47.945
<v Speaker 1>Yeah. Yeah. Okay. So I can describe it.

01:21:47.945 --> 01:21:49.785
<v Speaker 1>So because if we get this the question

01:21:49.785 --> 01:21:51.145
<v Speaker 1>comes up a lot too because they're like,

01:21:51.145 --> 01:21:52.745
<v Speaker 1>oh, are you copying all the image? Like,

01:21:52.930 --> 01:21:55.890
<v Speaker 1>okay. So when we built the when we

01:21:55.890 --> 01:21:57.489
<v Speaker 1>build the Acorn image,

01:21:58.370 --> 01:22:00.370
<v Speaker 1>the top level like, I'll get into, like,

01:22:00.370 --> 01:22:01.409
<v Speaker 1>the OCI

01:22:01.570 --> 01:22:04.050
<v Speaker 1>details or whatever. Because, like, OCI has

01:22:04.450 --> 01:22:06.210
<v Speaker 1>basically manifest and

01:22:06.290 --> 01:22:07.970
<v Speaker 1>lists or index. I think it's called an

01:22:07.970 --> 01:22:08.290
<v Speaker 1>index.

01:22:08.795 --> 01:22:10.315
<v Speaker 1>So an index is a thing that just

01:22:10.315 --> 01:22:12.315
<v Speaker 1>points to a bunch of other things, and

01:22:12.315 --> 01:22:13.995
<v Speaker 1>then, the manifest,

01:22:14.395 --> 01:22:16.795
<v Speaker 1>describes basically like a like a a container,

01:22:16.795 --> 01:22:18.875
<v Speaker 1>a Docker image that has layer refers to

01:22:18.875 --> 01:22:19.515
<v Speaker 1>layers.

01:22:19.835 --> 01:22:20.875
<v Speaker 1>Okay. So,

01:22:21.275 --> 01:22:23.355
<v Speaker 1>when we build the Acorn image, we create

01:22:23.355 --> 01:22:26.230
<v Speaker 1>one layer which has the Acorn metadata in

01:22:26.230 --> 01:22:28.310
<v Speaker 1>it, and then we create a list which

01:22:28.310 --> 01:22:29.909
<v Speaker 1>links to the metadata

01:22:29.989 --> 01:22:32.070
<v Speaker 1>and then to all the existing Docker images

01:22:32.070 --> 01:22:33.190
<v Speaker 1>by digest.

01:22:33.350 --> 01:22:35.030
<v Speaker 1>And so if we built an image, like,

01:22:35.030 --> 01:22:36.630
<v Speaker 1>we'll build that, push that, and then link

01:22:36.630 --> 01:22:38.469
<v Speaker 1>it. If it's an image you just referenced

01:22:38.469 --> 01:22:40.365
<v Speaker 1>in your Acorn file, we just reference the

01:22:40.365 --> 01:22:43.165
<v Speaker 1>the same like, the exact same one. So

01:22:43.165 --> 01:22:45.645
<v Speaker 1>we don't duplicate any content. It's not a

01:22:45.645 --> 01:22:47.565
<v Speaker 1>new structure. So if you have an existing

01:22:47.565 --> 01:22:50.045
<v Speaker 1>Docker image, like the digest that's there, we

01:22:50.045 --> 01:22:51.165
<v Speaker 1>use that digest

01:22:51.245 --> 01:22:51.725
<v Speaker 1>directly.

01:22:53.690 --> 01:22:55.209
<v Speaker 1>The only thing is that, like,

01:22:55.610 --> 01:22:57.929
<v Speaker 1>the manifest list, if you're doing multi arc,

01:22:57.929 --> 01:23:00.810
<v Speaker 1>will will change because, like, we dereference to

01:23:00.810 --> 01:23:02.170
<v Speaker 1>find the architectures.

01:23:02.250 --> 01:23:03.770
<v Speaker 1>But, anyway, so, like, the the layers and

01:23:03.770 --> 01:23:05.449
<v Speaker 1>the content, like, those digest don't change.

01:23:07.275 --> 01:23:09.275
<v Speaker 1>There will when you use Acorn, you will

01:23:09.275 --> 01:23:11.435
<v Speaker 1>see if you push somewhere.

01:23:12.555 --> 01:23:14.075
<v Speaker 1>Like, if you didn't like, let's say you

01:23:14.075 --> 01:23:15.435
<v Speaker 1>just built an Acorn image and it just

01:23:15.435 --> 01:23:17.355
<v Speaker 1>has the metadata and it's referencing existing Docker

01:23:17.355 --> 01:23:19.275
<v Speaker 1>images. If you push it somewhere, you'll see

01:23:19.275 --> 01:23:21.450
<v Speaker 1>it's pushing tons of content. That has to

01:23:21.450 --> 01:23:22.730
<v Speaker 1>do with, like, more of, like, a bug

01:23:22.730 --> 01:23:24.250
<v Speaker 1>right now in the implementation

01:23:24.330 --> 01:23:26.330
<v Speaker 1>because the content already exists in the in

01:23:26.330 --> 01:23:27.370
<v Speaker 1>the registry,

01:23:27.370 --> 01:23:29.850
<v Speaker 1>but it doesn't necessarily exist in your repo.

01:23:29.850 --> 01:23:32.410
<v Speaker 1>So we're doing a push pushing content that

01:23:32.410 --> 01:23:33.370
<v Speaker 1>we don't need to push.

01:23:34.905 --> 01:23:37.385
<v Speaker 1>This is, like, there's a a feature in

01:23:37.385 --> 01:23:39.625
<v Speaker 1>in the API called mounting, and we're not

01:23:39.625 --> 01:23:41.865
<v Speaker 1>doing that properly in some scenarios.

01:23:41.865 --> 01:23:43.785
<v Speaker 1>So it looks like you're pushing a bunch

01:23:43.785 --> 01:23:45.785
<v Speaker 1>of content, but it's, like, basically, you push,

01:23:45.785 --> 01:23:47.785
<v Speaker 1>like, all the content, and then the registry

01:23:47.785 --> 01:23:49.865
<v Speaker 1>throws it away because it it already exists

01:23:49.865 --> 01:23:50.105
<v Speaker 1>there.

01:23:50.880 --> 01:23:52.000
<v Speaker 1>Anyways Alright.

01:23:53.200 --> 01:23:56.080
<v Speaker 0>Okay. So followed up with a question, which

01:23:56.080 --> 01:23:57.840
<v Speaker 0>I think you've just answered, which is that

01:23:57.840 --> 01:24:01.280
<v Speaker 0>do the images remain the same? Oh. Yeah.

01:24:01.920 --> 01:24:03.360
<v Speaker 0>Because then I think he says that you've

01:24:03.360 --> 01:24:04.640
<v Speaker 0>answered that, and then he says And then

01:24:04.640 --> 01:24:06.584
<v Speaker 1>there's a question about how does it handle

01:24:10.585 --> 01:24:12.025
<v Speaker 1>So for the interregistry

01:24:12.025 --> 01:24:14.105
<v Speaker 1>images okay. So this is really important. Is

01:24:14.105 --> 01:24:16.344
<v Speaker 1>that, like so what we're doing is, like,

01:24:16.824 --> 01:24:18.264
<v Speaker 1>is if you're pull if you're

01:24:18.880 --> 01:24:21.200
<v Speaker 1>when we push the Acorn, all the content

01:24:21.200 --> 01:24:22.800
<v Speaker 1>for that Acorn and all the reference docker

01:24:22.800 --> 01:24:25.360
<v Speaker 1>images go to that target one. So if

01:24:25.360 --> 01:24:27.760
<v Speaker 1>you've pulled from, like, five different registries, it's

01:24:27.760 --> 01:24:29.200
<v Speaker 1>going to pull all that content and push

01:24:29.200 --> 01:24:30.560
<v Speaker 1>it into your one registry.

01:24:30.720 --> 01:24:32.720
<v Speaker 1>That is very much done by design because,

01:24:32.720 --> 01:24:34.895
<v Speaker 1>like, the idea is once you have your

01:24:34.895 --> 01:24:35.775
<v Speaker 1>Acorn,

01:24:35.935 --> 01:24:37.375
<v Speaker 1>it's fully encapsulated.

01:24:37.375 --> 01:24:40.255
<v Speaker 1>So if anyone's done air gap setups, you'll

01:24:40.255 --> 01:24:42.015
<v Speaker 1>you'll understand the pain of this. Like, when

01:24:42.015 --> 01:24:43.614
<v Speaker 1>you do let's say you deploy a Helm

01:24:43.614 --> 01:24:45.454
<v Speaker 1>chart and you try to do an Helm

01:24:45.455 --> 01:24:47.775
<v Speaker 1>in a air gap, that Helm chart references

01:24:47.775 --> 01:24:50.469
<v Speaker 1>three Docker images. You have to configure each

01:24:50.469 --> 01:24:52.310
<v Speaker 1>one of those Docker images of, like, well,

01:24:52.310 --> 01:24:54.469
<v Speaker 1>what's the repo to pull from? You know,

01:24:54.469 --> 01:24:55.750
<v Speaker 1>where to get that? You're like, you have

01:24:55.750 --> 01:24:57.670
<v Speaker 1>to find all that content and and mirror

01:24:57.670 --> 01:24:58.550
<v Speaker 1>it offline.

01:24:59.510 --> 01:25:01.670
<v Speaker 1>So this basically just turns your app into

01:25:01.670 --> 01:25:03.735
<v Speaker 1>one artifact. And so it's like, you can

01:25:03.735 --> 01:25:06.215
<v Speaker 1>just basically do Acorn pull and then Acorn

01:25:06.215 --> 01:25:08.375
<v Speaker 1>push to a different registry, and that's it.

01:25:08.375 --> 01:25:09.815
<v Speaker 1>Or you you don't have to use Acorn.

01:25:09.815 --> 01:25:11.735
<v Speaker 1>You can use, like, a tool like Scorpio

01:25:11.735 --> 01:25:12.934
<v Speaker 1>or Crane

01:25:13.014 --> 01:25:14.614
<v Speaker 1>to do some of that stuff. Don't use

01:25:14.614 --> 01:25:17.255
<v Speaker 1>Docker because Docker mutates stuff as you push

01:25:17.255 --> 01:25:18.940
<v Speaker 1>and pull. But if you use a tool

01:25:18.940 --> 01:25:20.780
<v Speaker 1>like Scorpio or Crane, you can just move

01:25:20.780 --> 01:25:21.499
<v Speaker 1>things around.

01:25:23.020 --> 01:25:23.739
<v Speaker 0>Awesome.

01:25:24.460 --> 01:25:26.460
<v Speaker 0>Well, we've gone a little bit over time,

01:25:26.460 --> 01:25:27.980
<v Speaker 0>but we have no more questions. So I

01:25:27.980 --> 01:25:29.500
<v Speaker 0>just wanna say thank you for joining us

01:25:29.500 --> 01:25:31.579
<v Speaker 0>today, for sharing all of your knowledge and

01:25:31.579 --> 01:25:34.065
<v Speaker 0>the history behind Acorn and for walking us

01:25:34.065 --> 01:25:35.985
<v Speaker 0>through a couple of different demos and how

01:25:35.985 --> 01:25:37.985
<v Speaker 0>it works. I hope people are excited to

01:25:37.985 --> 01:25:40.224
<v Speaker 0>check it out. And definitely

01:25:40.625 --> 01:25:42.065
<v Speaker 0>reach out to Darwin with your feedback. I'm

01:25:42.065 --> 01:25:43.585
<v Speaker 0>sure he'd love to love to have.

01:25:46.300 --> 01:25:47.820
<v Speaker 1>Yeah. Yeah. And so I'm on I'm on

01:25:47.820 --> 01:25:50.380
<v Speaker 1>Twitter. I build the cloud on Twitter. I'm

01:25:50.380 --> 01:25:52.220
<v Speaker 1>pretty active there. If you have anything, just

01:25:52.220 --> 01:25:54.460
<v Speaker 1>ping me there. That's that's, like, the main

01:25:54.460 --> 01:25:56.140
<v Speaker 1>thing I usually check is Twitter.

01:25:56.780 --> 01:25:58.940
<v Speaker 0>Alright. Well, thank you again for your time.

01:25:58.940 --> 01:26:00.860
<v Speaker 0>Have a wonderful day, and I'll speak to

01:26:00.860 --> 01:26:01.420
<v Speaker 0>you again soon.

01:26:02.034 --> 01:26:03.074
<v Speaker 0>Have a good day.

01:26:04.835 --> 01:26:05.715
<v Speaker 2>Okay. Thanks.
