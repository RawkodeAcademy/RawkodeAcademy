WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e3629966-3083-4a07-afb1-1bd59b2780ed
Created: 2025-04-29T12:55:29.827Z
Duration: 780.92847
Channels: 1

00:00:00.399 --> 00:00:02.080
<v Speaker 0>Hi, and welcome to AlphaBits.

00:00:02.399 --> 00:00:04.960
<v Speaker 0>AlphaBits is an outlet for our inquisitive minds.

00:00:04.960 --> 00:00:07.520
<v Speaker 0>We can't stop experimenting with new technology, and

00:00:07.520 --> 00:00:09.280
<v Speaker 0>we wanna share what we're playing with with

00:00:09.280 --> 00:00:13.175
<v Speaker 0>you. We're your hosts, Brian and David. Hi.

00:00:13.175 --> 00:00:15.655
<v Speaker 1>I'm David, defender of the Rawkode Academy. I'm

00:00:15.655 --> 00:00:18.455
<v Speaker 1>a perpetual learner, always playing with new cool

00:00:18.455 --> 00:00:20.055
<v Speaker 1>tools that I'm gonna share with you as

00:00:20.055 --> 00:00:22.215
<v Speaker 1>part of this podcast. And I'm Brian. I'm

00:00:22.215 --> 00:00:24.614
<v Speaker 0>a developer advocate at Amazon,

00:00:24.775 --> 00:00:27.335
<v Speaker 0>and I love all the shiny new toys

00:00:27.335 --> 00:00:27.895
<v Speaker 0>in tech.

00:00:28.619 --> 00:00:30.779
<v Speaker 0>It's kind of my passion is is testing

00:00:30.779 --> 00:00:32.220
<v Speaker 0>out the new stuff and,

00:00:32.780 --> 00:00:34.540
<v Speaker 0>seeing what's cool. Alright.

00:00:35.660 --> 00:00:38.220
<v Speaker 0>What I'm showing here is my fork of

00:00:38.220 --> 00:00:39.100
<v Speaker 0>Bluefin.

00:00:39.260 --> 00:00:41.260
<v Speaker 0>So Bluefin is the

00:00:41.535 --> 00:00:43.135
<v Speaker 0>the containerized

00:00:43.535 --> 00:00:46.975
<v Speaker 0>well, it's not containerized. It OCI based distribution

00:00:46.975 --> 00:00:48.415
<v Speaker 0>of link of Linux.

00:00:48.655 --> 00:00:50.015
<v Speaker 0>So in a nutshell,

00:00:50.255 --> 00:00:52.975
<v Speaker 0>you are pulling containers,

00:00:53.790 --> 00:00:55.390
<v Speaker 0>and those containers

00:00:55.469 --> 00:00:56.430
<v Speaker 0>are the

00:00:56.910 --> 00:00:58.510
<v Speaker 0>the base of the system. So it's the

00:00:58.510 --> 00:01:01.710
<v Speaker 0>delivery packaging format for your operating system.

00:01:01.949 --> 00:01:04.830
<v Speaker 0>It uses RPM OS tree under the hood.

00:01:06.075 --> 00:01:08.395
<v Speaker 0>And bluefin is

00:01:08.635 --> 00:01:09.354
<v Speaker 0>at

00:01:09.755 --> 00:01:11.674
<v Speaker 0>u blue dash o s

00:01:11.915 --> 00:01:13.674
<v Speaker 0>slash bluefin on GitHub.

00:01:13.915 --> 00:01:15.755
<v Speaker 0>So I've got this fork of it.

00:01:16.715 --> 00:01:19.595
<v Speaker 0>And in my fork, I wanted to make

00:01:19.595 --> 00:01:22.759
<v Speaker 0>a few changes but still keep all of

00:01:22.759 --> 00:01:23.880
<v Speaker 0>the upstream stuff.

00:01:24.360 --> 00:01:26.600
<v Speaker 0>So I found this yesterday.

00:01:26.600 --> 00:01:28.520
<v Speaker 0>It's called way pull,

00:01:28.920 --> 00:01:30.600
<v Speaker 0>and it keeps your forks up to date

00:01:30.600 --> 00:01:32.439
<v Speaker 0>with automatic pull requests.

00:01:33.720 --> 00:01:36.039
<v Speaker 0>So I've set it up. You go to

00:01:36.039 --> 00:01:36.759
<v Speaker 0>the GitHub app.

00:01:37.695 --> 00:01:39.935
<v Speaker 0>Really? Just right here. Go to the GitHub

00:01:39.935 --> 00:01:40.575
<v Speaker 0>app.

00:01:41.134 --> 00:01:42.734
<v Speaker 0>We open that in a new tab.

00:01:43.295 --> 00:01:45.854
<v Speaker 0>It says, alright. Great. And if if I

00:01:45.854 --> 00:01:47.375
<v Speaker 0>hadn't already added it, there'd be a button

00:01:47.375 --> 00:01:50.190
<v Speaker 0>that says, add this to my my GitHub

00:01:50.190 --> 00:01:51.310
<v Speaker 0>user, my

00:01:51.550 --> 00:01:52.510
<v Speaker 0>organization.

00:01:53.470 --> 00:01:55.070
<v Speaker 0>So I did that, and I gave it

00:01:55.070 --> 00:01:56.510
<v Speaker 0>permission to work

00:01:56.990 --> 00:01:58.750
<v Speaker 0>on this one repository.

00:01:59.470 --> 00:02:02.910
<v Speaker 0>Inside the repository, there's one file called pull

00:02:02.910 --> 00:02:03.470
<v Speaker 0>dot yaml.

00:02:04.225 --> 00:02:06.064
<v Speaker 0>So it lives under dot GitHub pull dot

00:02:06.064 --> 00:02:06.784
<v Speaker 0>yaml.

00:02:07.344 --> 00:02:09.345
<v Speaker 0>I told it the base branch is main,

00:02:09.584 --> 00:02:11.504
<v Speaker 0>and the upstream is at the u blue

00:02:11.504 --> 00:02:13.025
<v Speaker 0>dash o s org,

00:02:13.584 --> 00:02:15.905
<v Speaker 0>and the merge meth method is hard reset.

00:02:15.905 --> 00:02:17.985
<v Speaker 0>There's a couple different options for merge methods,

00:02:18.500 --> 00:02:20.740
<v Speaker 0>but this is going to be the simplest,

00:02:22.420 --> 00:02:26.020
<v Speaker 0>most painless option for just getting upstream requests.

00:02:26.340 --> 00:02:28.980
<v Speaker 0>So once I authorize that and tell GitHub

00:02:28.980 --> 00:02:29.780
<v Speaker 0>actions

00:02:29.940 --> 00:02:30.340
<v Speaker 0>here,

00:02:31.615 --> 00:02:33.535
<v Speaker 0>I have to tell GitHub actions that it's

00:02:33.535 --> 00:02:36.255
<v Speaker 0>okay to allow GitHub actions to approve and

00:02:36.255 --> 00:02:38.335
<v Speaker 0>create pull requests. This is a big deal.

00:02:38.495 --> 00:02:39.775
<v Speaker 0>Once that's done,

00:02:41.055 --> 00:02:42.175
<v Speaker 0>I can go into

00:02:44.270 --> 00:02:45.470
<v Speaker 0>the documentation

00:02:45.470 --> 00:02:47.070
<v Speaker 0>down here, and it gives you

00:02:47.790 --> 00:02:49.790
<v Speaker 0>where is the directions?

00:02:49.950 --> 00:02:51.070
<v Speaker 0>Let's say here.

00:02:51.630 --> 00:02:54.750
<v Speaker 0>So it tells you the getting started bit.

00:02:54.750 --> 00:02:56.110
<v Speaker 0>And the first thing you have to do

00:02:56.110 --> 00:02:57.630
<v Speaker 0>is add that YAML file,

00:02:58.495 --> 00:03:00.815
<v Speaker 0>And then you go to this magic

00:03:01.694 --> 00:03:02.735
<v Speaker 0>link here,

00:03:04.334 --> 00:03:04.895
<v Speaker 0>and

00:03:05.614 --> 00:03:08.174
<v Speaker 0>we just paste that in. And that tells

00:03:08.174 --> 00:03:10.495
<v Speaker 0>you whether or not your setup is good.

00:03:11.310 --> 00:03:14.430
<v Speaker 0>So we'll add GitHub, the kettle some lufin,

00:03:16.270 --> 00:03:17.630
<v Speaker 0>and it shows

00:03:17.790 --> 00:03:19.950
<v Speaker 0>my config here as

00:03:20.270 --> 00:03:21.070
<v Speaker 0>JSON.

00:03:21.950 --> 00:03:24.350
<v Speaker 0>So it's not going to merge unstable things.

00:03:25.095 --> 00:03:27.415
<v Speaker 0>And if there's a merge conflict,

00:03:27.655 --> 00:03:29.735
<v Speaker 0>it will label my PRs.

00:03:30.694 --> 00:03:32.375
<v Speaker 0>So let's go back to my

00:03:32.694 --> 00:03:33.975
<v Speaker 0>my fork here.

00:03:35.334 --> 00:03:38.135
<v Speaker 0>And you can see that overnight,

00:03:38.135 --> 00:03:39.495
<v Speaker 0>there was a push to

00:03:40.110 --> 00:03:41.790
<v Speaker 0>the u blue OS

00:03:41.790 --> 00:03:43.230
<v Speaker 0>Bluefin repository,

00:03:43.870 --> 00:03:45.070
<v Speaker 0>and that commit

00:03:46.110 --> 00:03:47.070
<v Speaker 0>changed

00:03:47.310 --> 00:03:48.990
<v Speaker 0>a couple of files. So it looks like

00:03:48.990 --> 00:03:50.990
<v Speaker 0>we added some new desktop wallpapers

00:03:51.230 --> 00:03:53.470
<v Speaker 0>for the framework series. That's nice.

00:03:55.125 --> 00:03:56.405
<v Speaker 0>So I can

00:03:57.204 --> 00:03:59.205
<v Speaker 0>review this and accept it.

00:03:59.844 --> 00:04:01.125
<v Speaker 0>I'll just approve it,

00:04:02.965 --> 00:04:03.605
<v Speaker 0>and

00:04:04.965 --> 00:04:06.644
<v Speaker 0>it isn't gonna run. I don't need it

00:04:06.644 --> 00:04:09.490
<v Speaker 0>to run the workflows because they're just images.

00:04:09.890 --> 00:04:11.810
<v Speaker 0>So I'll just merge my pull request.

00:04:12.610 --> 00:04:14.769
<v Speaker 0>And now my fork is up to date

00:04:14.769 --> 00:04:16.450
<v Speaker 0>with upstream.

00:04:16.769 --> 00:04:18.290
<v Speaker 0>And, really, all I had to do was

00:04:18.690 --> 00:04:20.610
<v Speaker 0>approve a pull request. So the pull request

00:04:20.610 --> 00:04:21.410
<v Speaker 0>happened automatically.

00:04:21.704 --> 00:04:23.784
<v Speaker 0>And you can go in on and look

00:04:23.784 --> 00:04:26.264
<v Speaker 0>at the the hard details on how to

00:04:26.264 --> 00:04:28.185
<v Speaker 0>set up automation. You can choose

00:04:29.705 --> 00:04:31.064
<v Speaker 0>how much it's going to do on your

00:04:31.064 --> 00:04:31.705
<v Speaker 0>behalf.

00:04:32.585 --> 00:04:34.664
<v Speaker 0>And that's really slick. So I could set

00:04:34.664 --> 00:04:36.185
<v Speaker 0>it up to just automatically

00:04:36.980 --> 00:04:38.980
<v Speaker 0>merge my pull request if I wanted to,

00:04:38.980 --> 00:04:40.900
<v Speaker 0>but I'd like to see what's happening.

00:04:41.300 --> 00:04:43.140
<v Speaker 0>So that's where I'm at. Way, it's it's

00:04:43.140 --> 00:04:45.780
<v Speaker 0>it sounds really simple, but it's a a

00:04:45.780 --> 00:04:47.700
<v Speaker 0>real time saver when

00:04:48.100 --> 00:04:49.620
<v Speaker 0>you've got forks that you wanna keep up

00:04:49.620 --> 00:04:52.305
<v Speaker 0>to date. One of those super practical,

00:04:53.025 --> 00:04:54.945
<v Speaker 1>easy to adopt tools.

00:04:55.504 --> 00:04:56.145
<v Speaker 1>Yeah.

00:04:56.305 --> 00:04:58.705
<v Speaker 1>Always nice to see. Definitely a big quality

00:04:58.705 --> 00:05:01.185
<v Speaker 0>of life improvement for a tiny little tool.

00:05:01.185 --> 00:05:03.345
<v Speaker 1>Yeah. Always something that I guess I mean,

00:05:03.345 --> 00:05:05.185
<v Speaker 1>GitHub should really just have this baked in.

00:05:05.185 --> 00:05:07.450
<v Speaker 1>Right? Really, it should. But it is what

00:05:07.450 --> 00:05:08.090
<v Speaker 0>it is.

00:05:08.490 --> 00:05:09.530
<v Speaker 1>Awesome.

00:05:09.530 --> 00:05:11.530
<v Speaker 1>Thank you for your demo.

00:05:12.170 --> 00:05:12.970
<v Speaker 1>Alright.

00:05:13.530 --> 00:05:14.250
<v Speaker 1>So

00:05:14.570 --> 00:05:15.450
<v Speaker 1>t

00:05:15.930 --> 00:05:17.290
<v Speaker 1>is essentially

00:05:17.290 --> 00:05:18.730
<v Speaker 1>a package manager,

00:05:19.695 --> 00:05:23.055
<v Speaker 1>but it does some things different from other

00:05:23.055 --> 00:05:26.735
<v Speaker 1>package managers. One is that you don't install

00:05:26.735 --> 00:05:27.615
<v Speaker 1>anything.

00:05:27.695 --> 00:05:28.735
<v Speaker 1>You just

00:05:29.055 --> 00:05:32.495
<v Speaker 1>run them. So you can run t and

00:05:32.495 --> 00:05:35.110
<v Speaker 1>feel free to pick up programming language or

00:05:35.110 --> 00:05:36.390
<v Speaker 1>a binary that I may not have in

00:05:36.390 --> 00:05:38.070
<v Speaker 1>my machine brain. Sorry to put you on

00:05:38.070 --> 00:05:41.110
<v Speaker 1>the spot. That's do you use a twin

00:05:41.110 --> 00:05:42.870
<v Speaker 0>for your shell? I do.

00:05:44.470 --> 00:05:46.230
<v Speaker 0>Everything I can think of, I'm sure you

00:05:46.230 --> 00:05:46.790
<v Speaker 0>already have.

00:05:47.405 --> 00:05:49.005
<v Speaker 0>Fuzzy finder, ripgrep.

00:05:49.965 --> 00:05:51.965
<v Speaker 0>How about duff? I don't have duff. What's

00:05:51.965 --> 00:05:52.525
<v Speaker 1>duff?

00:05:53.085 --> 00:05:55.245
<v Speaker 0>D u f, duff. Oh, no. I don't

00:05:55.245 --> 00:05:56.125
<v Speaker 1>have that. Okay.

00:05:57.245 --> 00:06:00.125
<v Speaker 1>Alright. Let's go with NEM just because I've

00:06:00.125 --> 00:06:02.045
<v Speaker 1>been reading about the two point o release.

00:06:02.760 --> 00:06:05.160
<v Speaker 1>NEM is the programming language. I have no

00:06:05.160 --> 00:06:06.200
<v Speaker 1>NEM command,

00:06:06.680 --> 00:06:08.680
<v Speaker 1>but I can run tNEM

00:06:09.480 --> 00:06:10.040
<v Speaker 1>help.

00:06:10.920 --> 00:06:13.240
<v Speaker 1>And now it's resolving the package graph. And

00:06:13.240 --> 00:06:15.160
<v Speaker 1>if it finds a package, which it already

00:06:15.160 --> 00:06:17.160
<v Speaker 1>has, installs everything that we need,

00:06:17.794 --> 00:06:20.035
<v Speaker 1>can see there it pulled in NEMLANG two

00:06:20.035 --> 00:06:20.915
<v Speaker 1>point o

00:06:21.315 --> 00:06:22.915
<v Speaker 1>and then we get the help output.

00:06:23.235 --> 00:06:25.315
<v Speaker 1>So now I've successfully run a command that

00:06:25.315 --> 00:06:27.155
<v Speaker 1>I don't have installed on my machine. And,

00:06:27.155 --> 00:06:28.915
<v Speaker 1>of course, now that that's all cashed,

00:06:29.235 --> 00:06:30.755
<v Speaker 1>it's much quicker. So I could just do

00:06:30.755 --> 00:06:34.130
<v Speaker 1>this. Now that's not magic enough. Right? So

00:06:34.130 --> 00:06:35.890
<v Speaker 1>I created another demo.

00:06:37.170 --> 00:06:37.970
<v Speaker 1>Bun

00:06:38.130 --> 00:06:40.130
<v Speaker 1>Mhmm. Is a command

00:06:40.290 --> 00:06:42.850
<v Speaker 1>that is like an MPM,

00:06:43.170 --> 00:06:45.330
<v Speaker 1>but faster. And if I run which bun,

00:06:45.330 --> 00:06:47.785
<v Speaker 1>you'll see it's actually MIT directory. K. Now

00:06:47.785 --> 00:06:49.065
<v Speaker 1>the way that I actually got this to

00:06:49.065 --> 00:06:50.425
<v Speaker 1>work is

00:06:50.745 --> 00:06:52.905
<v Speaker 1>by creating a symlink.

00:06:53.065 --> 00:06:55.785
<v Speaker 1>So we can then take another tool

00:06:57.544 --> 00:06:58.264
<v Speaker 1>like

00:06:59.465 --> 00:07:00.504
<v Speaker 1>which tea

00:07:00.900 --> 00:07:02.420
<v Speaker 1>and sec. Now all you have to do

00:07:02.420 --> 00:07:05.140
<v Speaker 1>is create any symlink and point it to

00:07:05.140 --> 00:07:07.140
<v Speaker 1>t, and it will actually work out what

00:07:07.140 --> 00:07:09.140
<v Speaker 1>you're trying to run based on the symlink

00:07:09.140 --> 00:07:09.860
<v Speaker 1>name.

00:07:10.260 --> 00:07:11.300
<v Speaker 1>So here,

00:07:11.780 --> 00:07:14.580
<v Speaker 1>I can run s h sec or sec

00:07:16.725 --> 00:07:19.685
<v Speaker 1>As now installing the seg language compiler,

00:07:19.765 --> 00:07:22.005
<v Speaker 1>it gives that a second. And

00:07:22.325 --> 00:07:24.325
<v Speaker 1>there we have sec. So

00:07:24.325 --> 00:07:27.285
<v Speaker 1>you can use the something approach. However, there's

00:07:27.285 --> 00:07:29.010
<v Speaker 1>other ways to do this too. I also

00:07:29.010 --> 00:07:31.250
<v Speaker 1>have two directories here, a project with a

00:07:31.250 --> 00:07:32.770
<v Speaker 1>README and a project with a YAML. So

00:07:32.770 --> 00:07:34.450
<v Speaker 1>let's jump into project README,

00:07:35.090 --> 00:07:37.889
<v Speaker 1>which has a README. Md. Now one of

00:07:37.889 --> 00:07:40.130
<v Speaker 1>the challenges or problems that the t project

00:07:40.130 --> 00:07:42.210
<v Speaker 1>wants to solve is documentation

00:07:42.615 --> 00:07:44.935
<v Speaker 1>within projects that tell you what you need

00:07:44.935 --> 00:07:47.335
<v Speaker 1>to successfully run and work with the project.

00:07:48.455 --> 00:07:51.095
<v Speaker 1>Other tools that do this rely on some

00:07:51.335 --> 00:07:54.455
<v Speaker 1>file, like, had its YAML based file. Mhmm.

00:07:54.535 --> 00:07:56.535
<v Speaker 1>But then the problem is that could then

00:07:56.535 --> 00:07:58.294
<v Speaker 1>drift from the documentation

00:07:58.615 --> 00:08:00.270
<v Speaker 1>and you've got two different things. So while

00:08:00.270 --> 00:08:02.030
<v Speaker 1>you may update your aquaproject dot yaml, you

00:08:02.030 --> 00:08:03.310
<v Speaker 1>may forget to update your readme and then

00:08:03.310 --> 00:08:04.590
<v Speaker 1>you've got all this thing that doesn't really

00:08:04.590 --> 00:08:06.110
<v Speaker 1>make a lot of sense. However, if you

00:08:06.110 --> 00:08:07.870
<v Speaker 1>can just save the documentation as the canonical

00:08:07.870 --> 00:08:09.790
<v Speaker 1>source of drift, like a readme file,

00:08:10.030 --> 00:08:11.870
<v Speaker 1>then t can work out what you need

00:08:11.870 --> 00:08:13.310
<v Speaker 1>from that. So from here,

00:08:13.955 --> 00:08:16.755
<v Speaker 1>we can run t sync environment

00:08:16.755 --> 00:08:17.555
<v Speaker 1>SE

00:08:17.955 --> 00:08:20.435
<v Speaker 1>which will scan or find the README. Empty.

00:08:20.435 --> 00:08:22.835
<v Speaker 1>Notice that we have the header dependencies with

00:08:22.835 --> 00:08:26.035
<v Speaker 1>a markdown table and pull in everything that

00:08:26.035 --> 00:08:26.435
<v Speaker 1>we need.

00:08:27.550 --> 00:08:28.990
<v Speaker 1>So we'll let this run.

00:08:29.230 --> 00:08:30.670
<v Speaker 1>Now it does spit out a bunch of

00:08:30.670 --> 00:08:32.029
<v Speaker 1>environment variables.

00:08:32.110 --> 00:08:32.910
<v Speaker 1>So,

00:08:32.910 --> 00:08:34.910
<v Speaker 1>you know, the best way to do this

00:08:34.910 --> 00:08:36.590
<v Speaker 1>would be to stick it into a DirEnv

00:08:36.590 --> 00:08:38.429
<v Speaker 1>and just run like source

00:08:39.230 --> 00:08:41.230
<v Speaker 1>t

00:08:40.345 --> 00:08:41.225
<v Speaker 1>s e.

00:08:42.025 --> 00:08:42.664
<v Speaker 1>So

00:08:44.105 --> 00:08:46.265
<v Speaker 1>and now if I run go version, I'll

00:08:46.265 --> 00:08:48.904
<v Speaker 1>have go one twenty one because the read

00:08:48.904 --> 00:08:49.545
<v Speaker 1>me

00:08:49.705 --> 00:08:51.785
<v Speaker 1>said we want go one twenty one.

00:08:52.600 --> 00:08:54.360
<v Speaker 1>Now if I open a new tab

00:08:54.680 --> 00:08:56.680
<v Speaker 1>and go to another directory

00:08:57.240 --> 00:09:00.520
<v Speaker 1>and run go version, my machine local version

00:09:00.520 --> 00:09:02.040
<v Speaker 1>of go is 120

00:09:02.040 --> 00:09:03.560
<v Speaker 1>7. So

00:09:03.560 --> 00:09:06.360
<v Speaker 1>now we have this environment documented via read

00:09:06.360 --> 00:09:10.214
<v Speaker 1>me, but I actually like the explicit approach.

00:09:10.214 --> 00:09:11.815
<v Speaker 1>So if you want to do that route,

00:09:11.815 --> 00:09:13.894
<v Speaker 1>you can use a t dot yaml where

00:09:13.975 --> 00:09:16.214
<v Speaker 1>you could specify your dependencies. Here, we're saying

00:09:16.214 --> 00:09:18.214
<v Speaker 1>that we need w get an NPM.

00:09:18.535 --> 00:09:21.095
<v Speaker 1>And again, we're just running sync environment

00:09:21.399 --> 00:09:22.760
<v Speaker 1>and it pulls in

00:09:23.399 --> 00:09:24.440
<v Speaker 1>the correct

00:09:24.839 --> 00:09:26.600
<v Speaker 1>NPM, which in this case is nine eight

00:09:26.600 --> 00:09:28.440
<v Speaker 1>one. Whereas if I go to my own

00:09:28.440 --> 00:09:29.560
<v Speaker 1>NPM,

00:09:29.560 --> 00:09:31.080
<v Speaker 1>we have nine six seven.

00:09:31.640 --> 00:09:33.320
<v Speaker 1>So t's

00:09:33.465 --> 00:09:36.985
<v Speaker 1>a really interesting choice for development environments and

00:09:36.985 --> 00:09:38.185
<v Speaker 1>magic tooling.

00:09:38.905 --> 00:09:41.785
<v Speaker 1>My favorite feature though is this prefix thing.

00:09:41.945 --> 00:09:42.585
<v Speaker 1>This,

00:09:43.305 --> 00:09:44.825
<v Speaker 1>you know, I don't have to go and

00:09:44.825 --> 00:09:46.345
<v Speaker 1>work out how to install them. I don't

00:09:46.345 --> 00:09:47.625
<v Speaker 1>have to work out how to install zig

00:09:47.625 --> 00:09:49.600
<v Speaker 1>or rust c or Cargo or anything like

00:09:49.600 --> 00:09:50.960
<v Speaker 1>that. I could just say t I wanna

00:09:50.960 --> 00:09:52.240
<v Speaker 1>run this thing. Go find it for me.

00:09:52.240 --> 00:09:52.960
<v Speaker 1>And it does.

00:09:53.360 --> 00:09:54.640
<v Speaker 1>Of course, you gotta be able to find

00:09:54.640 --> 00:09:57.280
<v Speaker 1>these packages. So you can do package search.

00:09:58.080 --> 00:10:00.000
<v Speaker 1>I'm gonna need one more package name. I'm

00:10:00.000 --> 00:10:00.640
<v Speaker 1>running out of stuff.

00:10:01.425 --> 00:10:04.065
<v Speaker 1>How about that's gonna be too esoteric, isn't

00:10:04.065 --> 00:10:05.825
<v Speaker 1>it? Yeah. Too pony. Yes.

00:10:09.185 --> 00:10:10.385
<v Speaker 1>Wasentime.

00:10:10.865 --> 00:10:11.825
<v Speaker 1>Wasaminophen.

00:10:17.500 --> 00:10:18.700
<v Speaker 1>I'm failing

00:10:18.940 --> 00:10:20.140
<v Speaker 1>wildly.

00:10:20.780 --> 00:10:23.100
<v Speaker 1>There we go. Done it. So you could

00:10:23.100 --> 00:10:24.940
<v Speaker 1>use t package search to find things. Now

00:10:24.940 --> 00:10:26.460
<v Speaker 1>the pantry is not which is where they

00:10:26.460 --> 00:10:27.980
<v Speaker 1>store all of the definitions.

00:10:28.700 --> 00:10:29.580
<v Speaker 1>It's not

00:10:29.925 --> 00:10:32.805
<v Speaker 1>is not gonna make packages as as homebrew.

00:10:32.805 --> 00:10:34.565
<v Speaker 1>It probably doesn't have as many packages as

00:10:34.565 --> 00:10:36.964
<v Speaker 1>Aqua. This is a very, very early project,

00:10:37.445 --> 00:10:39.765
<v Speaker 1>but I think they're focused on developer experience

00:10:39.765 --> 00:10:41.605
<v Speaker 1>and developer environments.

00:10:42.245 --> 00:10:44.005
<v Speaker 1>We'll hopefully encourage more people to adopt the

00:10:44.005 --> 00:10:45.650
<v Speaker 1>tool, which means more people will add more

00:10:45.650 --> 00:10:48.050
<v Speaker 1>packages to the pantry, and eventually, we'll end

00:10:48.050 --> 00:10:49.250
<v Speaker 1>up in a a state where that is

00:10:49.250 --> 00:10:51.170
<v Speaker 1>feature complete. And I actually went through the

00:10:51.170 --> 00:10:53.730
<v Speaker 1>process last week of adding Terraform CDK to

00:10:53.730 --> 00:10:55.490
<v Speaker 1>the pantry, and it was super easy. It

00:10:55.490 --> 00:10:58.290
<v Speaker 1>was, 20 lanes of YAML. So the experience

00:10:58.290 --> 00:10:59.089
<v Speaker 1>is is pretty good.

00:10:59.875 --> 00:11:01.634
<v Speaker 0>So does it automatically

00:11:01.634 --> 00:11:02.834
<v Speaker 0>manage your

00:11:02.995 --> 00:11:03.875
<v Speaker 0>LD

00:11:04.035 --> 00:11:04.915
<v Speaker 0>variables,

00:11:04.915 --> 00:11:07.394
<v Speaker 0>your package config pass, things like that? And

00:11:07.394 --> 00:11:08.834
<v Speaker 0>and does it take care of all that

00:11:08.834 --> 00:11:10.675
<v Speaker 0>for you? Yeah. So when you run the

00:11:10.675 --> 00:11:12.595
<v Speaker 1>sync environment, it spits out all of that.

00:11:12.860 --> 00:11:14.780
<v Speaker 1>I'm not in a project.

00:11:17.260 --> 00:11:18.860
<v Speaker 1>You know, it's it's best to everything that

00:11:18.860 --> 00:11:20.700
<v Speaker 1>you're you're gonna need. So you can see

00:11:20.700 --> 00:11:23.900
<v Speaker 1>here, there's the SSL search. There's some get

00:11:23.900 --> 00:11:26.625
<v Speaker 1>stuff. There's the LD libraries. Okay. So, you

00:11:26.625 --> 00:11:28.464
<v Speaker 1>know, all the open SSL stuff is provided

00:11:28.464 --> 00:11:30.225
<v Speaker 1>depending on what else you're doing. In this

00:11:30.225 --> 00:11:32.225
<v Speaker 1>case, it's just go. So, yeah, it tries

00:11:32.225 --> 00:11:33.584
<v Speaker 1>to cover all of that. You can actually

00:11:33.584 --> 00:11:36.464
<v Speaker 1>do more with the the YAML approach too

00:11:36.545 --> 00:11:38.865
<v Speaker 1>where it can not replace their end because

00:11:38.865 --> 00:11:39.745
<v Speaker 1>their end is awesome.

00:11:40.720 --> 00:11:42.960
<v Speaker 1>But you can also start to do things

00:11:42.960 --> 00:11:43.600
<v Speaker 1>like,

00:11:44.560 --> 00:11:45.280
<v Speaker 1>Brian.

00:11:45.520 --> 00:11:48.320
<v Speaker 0>Set environment variables. Like, go root for example

00:11:48.320 --> 00:11:50.320
<v Speaker 0>or Yeah. Something like that. And then that

00:11:50.320 --> 00:11:52.960
<v Speaker 1>would come out of the sync environment too.

00:11:52.960 --> 00:11:53.520
<v Speaker 1>So

00:11:54.000 --> 00:11:55.200
<v Speaker 1>there we go. Right to the top.

00:11:55.975 --> 00:11:57.895
<v Speaker 1>So it's cool. It does also try to

00:11:57.895 --> 00:12:00.615
<v Speaker 1>support Dart End. It doesn't support all of

00:12:00.615 --> 00:12:02.855
<v Speaker 1>the features. So if there is any MVRC,

00:12:02.855 --> 00:12:05.095
<v Speaker 1>it will export all the environment variables, but

00:12:05.095 --> 00:12:07.255
<v Speaker 1>it won't support it doesn't support the the

00:12:07.255 --> 00:12:10.470
<v Speaker 1>macros, like, source up and such. So yeah.

00:12:10.470 --> 00:12:12.630
<v Speaker 1>It's pretty neat. That's pretty stuck. Have you

00:12:12.630 --> 00:12:13.510
<v Speaker 0>run across

00:12:13.750 --> 00:12:16.550
<v Speaker 0>anything that doesn't work in terms of I'm

00:12:16.550 --> 00:12:18.790
<v Speaker 0>I'm I'm always worried about, like, the ld

00:12:18.790 --> 00:12:21.190
<v Speaker 0>library path, the ld flags, things like that.

00:12:21.190 --> 00:12:22.710
<v Speaker 0>If it if you come across things that

00:12:22.710 --> 00:12:23.270
<v Speaker 0>don't build,

00:12:24.475 --> 00:12:25.515
<v Speaker 0>can't find

00:12:25.915 --> 00:12:29.035
<v Speaker 0>the package config bits, anything like that? I

00:12:29.035 --> 00:12:31.195
<v Speaker 1>mean, I haven't used it in anger in

00:12:31.195 --> 00:12:33.195
<v Speaker 1>production or else like that. I've been exploring

00:12:33.195 --> 00:12:35.195
<v Speaker 1>it for the last, you know, couple of

00:12:35.195 --> 00:12:37.035
<v Speaker 1>weeks. I've added it to a few of

00:12:37.035 --> 00:12:39.180
<v Speaker 1>my projects in my mono repository, but they're

00:12:39.180 --> 00:12:41.340
<v Speaker 1>all really simple tools. It's just Rust,

00:12:41.420 --> 00:12:41.980
<v Speaker 1>Cargo,

00:12:42.380 --> 00:12:43.020
<v Speaker 1>Go.

00:12:43.260 --> 00:12:43.900
<v Speaker 1>So

00:12:44.140 --> 00:12:45.900
<v Speaker 1>I'm sure there are gonna be things that

00:12:45.900 --> 00:12:46.460
<v Speaker 1>are

00:12:47.020 --> 00:12:49.340
<v Speaker 1>a challenge, but so far, it's worked very

00:12:49.340 --> 00:12:51.803
<v Speaker 1>well for my my use case. Nice.

00:12:51.883 --> 00:12:53.883
<v Speaker 0>That's really cool. Good demo. If you wanna

00:12:53.883 --> 00:12:55.643
<v Speaker 1>hear why we showed up these tools, check

00:12:55.643 --> 00:12:59.003
<v Speaker 1>out the podcast available at alphabets.fm.

00:12:59.083 --> 00:13:00.683
<v Speaker 1>Until next week. See you soon.
