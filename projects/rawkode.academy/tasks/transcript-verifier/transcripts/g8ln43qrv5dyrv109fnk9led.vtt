WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 09a675ea-47d2-4953-90b4-bae0c9d8a886
Created: 2025-04-29T20:57:48.146Z
Duration: 7115.39
Channels: 1

00:00:54.200 --> 00:00:57.000
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:00:57.000 --> 00:00:59.000
<v Speaker 0>live. I'm your host Rawkode.

00:00:59.160 --> 00:01:00.920
<v Speaker 0>Before we get started, I just wanna take

00:01:00.920 --> 00:01:03.559
<v Speaker 0>ten seconds to thank my employer, Equinix Medal.

00:01:03.559 --> 00:01:05.560
<v Speaker 0>They allow me the time and energy and

00:01:05.560 --> 00:01:06.040
<v Speaker 0>resources

00:01:06.375 --> 00:01:08.375
<v Speaker 0>to spend my day working on these streams

00:01:08.375 --> 00:01:10.135
<v Speaker 0>and producing content so we can all learn

00:01:10.135 --> 00:01:10.775
<v Speaker 0>together.

00:01:11.335 --> 00:01:13.415
<v Speaker 0>Today, I am joined by a former colleague

00:01:13.415 --> 00:01:15.815
<v Speaker 0>of mine, Ian George. Hey, Ian. How are

00:01:15.815 --> 00:01:18.055
<v Speaker 0>you? Hey. I'm doing great. How about yourself?

00:01:18.135 --> 00:01:20.570
<v Speaker 0>Yeah. I'm doing alright. Thank you. So

00:01:20.570 --> 00:01:23.049
<v Speaker 0>you we work together at Infox Data. You

00:01:23.049 --> 00:01:24.490
<v Speaker 0>worked on InfoxDB.

00:01:24.490 --> 00:01:26.970
<v Speaker 0>You're also the organizer of the Orlando Go

00:01:26.970 --> 00:01:28.090
<v Speaker 0>user group.

00:01:28.250 --> 00:01:30.490
<v Speaker 1>That's right. We meet every Wednesday.

00:01:30.970 --> 00:01:32.810
<v Speaker 0>Every Wednesday. That keeps you busy as well

00:01:32.895 --> 00:01:33.295
<v Speaker 0>then.

00:01:33.854 --> 00:01:36.174
<v Speaker 0>And and previous conversations, you've mentioned to me

00:01:36.174 --> 00:01:38.015
<v Speaker 0>that you used to do competitive programming.

00:01:38.015 --> 00:01:40.414
<v Speaker 0>So let's just quickly summarize all of those

00:01:40.414 --> 00:01:42.335
<v Speaker 0>things then in the next few minutes. So

00:01:42.575 --> 00:01:44.255
<v Speaker 0>feel free to give a quick introduction, and

00:01:44.255 --> 00:01:45.615
<v Speaker 0>then we'll kinda tackle them one at a

00:01:45.615 --> 00:01:47.400
<v Speaker 0>time. Sure. So just like you said, my

00:01:47.400 --> 00:01:49.640
<v Speaker 1>name is Ian George. We sort together at

00:01:49.640 --> 00:01:51.159
<v Speaker 1>Inplux. Frankly,

00:01:51.159 --> 00:01:52.920
<v Speaker 1>unfortunately, today is kinda like my first day

00:01:52.920 --> 00:01:55.320
<v Speaker 1>not Inplux. I'm kind of like in between,

00:01:56.920 --> 00:01:58.760
<v Speaker 1>what you call it, adventures.

00:01:59.320 --> 00:02:01.640
<v Speaker 1>And but it was genuinely

00:02:01.945 --> 00:02:04.425
<v Speaker 1>probably the best place I've ever worked because

00:02:04.425 --> 00:02:05.705
<v Speaker 1>of people like you.

00:02:07.145 --> 00:02:10.025
<v Speaker 1>Anyway, it's it's a wonderful place to work,

00:02:10.105 --> 00:02:12.505
<v Speaker 1>and I'm kinda missing my team or the

00:02:12.505 --> 00:02:14.505
<v Speaker 1>team that I was part of already today.

00:02:14.505 --> 00:02:16.360
<v Speaker 1>But this freaks me up to do cool

00:02:16.360 --> 00:02:18.520
<v Speaker 1>stuff like this. Yes.

00:02:18.520 --> 00:02:20.680
<v Speaker 1>I run the Orlando Golang meetup, and I'm

00:02:20.680 --> 00:02:21.960
<v Speaker 1>sorry. Said we do it every Wednesday. We

00:02:21.960 --> 00:02:24.360
<v Speaker 1>actually were doing every Wednesday, but I kinda

00:02:24.360 --> 00:02:25.960
<v Speaker 1>tapered it off. Frankly,

00:02:27.320 --> 00:02:28.715
<v Speaker 1>I I find that I pretty pretty quickly

00:02:28.715 --> 00:02:31.755
<v Speaker 1>run out of, like, ideas and speakers.

00:02:32.715 --> 00:02:34.795
<v Speaker 1>But for me, it's mostly social now. Like,

00:02:34.795 --> 00:02:36.075
<v Speaker 1>I I don't get a chance to get

00:02:36.075 --> 00:02:38.635
<v Speaker 1>out, so I enjoy just, like, hanging around

00:02:38.715 --> 00:02:39.835
<v Speaker 1>like my people.

00:02:40.880 --> 00:02:41.760
<v Speaker 1>And, yes,

00:02:42.400 --> 00:02:44.480
<v Speaker 1>my first exposure to

00:02:45.040 --> 00:02:47.600
<v Speaker 1>kind of competitive programming was in high school.

00:02:47.760 --> 00:02:49.600
<v Speaker 1>I used to I was in a program

00:02:49.600 --> 00:02:51.600
<v Speaker 1>where we went to technical schools half of

00:02:51.600 --> 00:02:52.240
<v Speaker 1>the day.

00:02:52.640 --> 00:02:55.465
<v Speaker 1>And at technical school, I was at the

00:02:55.944 --> 00:02:57.225
<v Speaker 1>IT program,

00:02:57.704 --> 00:02:59.545
<v Speaker 1>and they had a

00:02:59.944 --> 00:03:03.305
<v Speaker 1>an organization called Phi Beta Lambda. And there's

00:03:03.305 --> 00:03:05.465
<v Speaker 1>basically I don't remember the I don't actually

00:03:05.465 --> 00:03:05.864
<v Speaker 1>remember,

00:03:06.670 --> 00:03:09.549
<v Speaker 1>like, how I fell into that, but within

00:03:09.549 --> 00:03:10.830
<v Speaker 1>that had

00:03:10.989 --> 00:03:13.549
<v Speaker 1>awards that they would give. And one and

00:03:13.549 --> 00:03:14.989
<v Speaker 1>one of them was for kind of, like,

00:03:14.989 --> 00:03:16.990
<v Speaker 1>the IT track and required

00:03:17.069 --> 00:03:19.595
<v Speaker 1>a bit of competitive programming where we you

00:03:19.595 --> 00:03:21.435
<v Speaker 1>know the the the first one I did

00:03:21.435 --> 00:03:23.674
<v Speaker 1>was local, then I made it to the

00:03:23.674 --> 00:03:25.995
<v Speaker 1>to the national level in Washington, and we

00:03:25.995 --> 00:03:26.635
<v Speaker 1>we

00:03:26.875 --> 00:03:28.795
<v Speaker 1>we competed there where we were given a

00:03:28.795 --> 00:03:30.555
<v Speaker 1>problem and had to code it up.

00:03:30.875 --> 00:03:32.075
<v Speaker 1>And I've

00:03:32.560 --> 00:03:34.480
<v Speaker 1>somehow the other one won one at the

00:03:34.480 --> 00:03:36.480
<v Speaker 1>national level at the time. And then in

00:03:36.480 --> 00:03:38.560
<v Speaker 1>college, as part of the ACM, we used

00:03:38.560 --> 00:03:40.880
<v Speaker 1>to do the regional programming competition.

00:03:40.880 --> 00:03:41.840
<v Speaker 1>We made it

00:03:43.440 --> 00:03:44.800
<v Speaker 1>we made it as far as, I think,

00:03:44.800 --> 00:03:46.240
<v Speaker 1>Southeast Regional

00:03:47.505 --> 00:03:48.705
<v Speaker 1>competition.

00:03:48.705 --> 00:03:50.545
<v Speaker 1>So so, yeah, that that was that that

00:03:50.545 --> 00:03:53.025
<v Speaker 1>was kinda like my introduction to competitive programming.

00:03:53.025 --> 00:03:54.785
<v Speaker 1>But more importantly, it kind of introduced me

00:03:54.785 --> 00:03:56.944
<v Speaker 1>to these sorts of problems that we're about

00:03:56.944 --> 00:03:59.825
<v Speaker 1>to tackle today. Right? Kind of I can

00:03:59.825 --> 00:04:01.425
<v Speaker 1>try problems that you have to sort

00:04:02.690 --> 00:04:03.410
<v Speaker 1>of complete

00:04:03.650 --> 00:04:05.730
<v Speaker 1>under time constraints. So it's like a little

00:04:05.730 --> 00:04:06.530
<v Speaker 1>bit of pressure.

00:04:06.770 --> 00:04:08.610
<v Speaker 1>And yeah. That that's it.

00:04:08.930 --> 00:04:10.290
<v Speaker 0>Nice. I mean,

00:04:10.770 --> 00:04:12.850
<v Speaker 0>during competitive programming, it's just

00:04:13.250 --> 00:04:14.850
<v Speaker 0>damn. And I I I can't even think

00:04:14.850 --> 00:04:17.075
<v Speaker 0>about doing that kind of those problems and

00:04:17.075 --> 00:04:18.675
<v Speaker 0>trying to worry about all the constraints and

00:04:18.675 --> 00:04:20.355
<v Speaker 0>and being timed and competing.

00:04:21.075 --> 00:04:24.195
<v Speaker 0>Too stressful for me. Yeah. But but, unfortunately,

00:04:24.195 --> 00:04:25.475
<v Speaker 0>it's gonna mean it's gonna work out quite

00:04:25.475 --> 00:04:27.475
<v Speaker 0>well for you. I mean, you're now well,

00:04:27.475 --> 00:04:28.755
<v Speaker 0>you worked on a database, which is not

00:04:28.755 --> 00:04:30.595
<v Speaker 0>necessarily the easiest software to be working on

00:04:30.595 --> 00:04:32.330
<v Speaker 0>for a start. Right? Like, that is that

00:04:32.330 --> 00:04:34.010
<v Speaker 0>is tricky stuff that involves

00:04:34.250 --> 00:04:36.010
<v Speaker 0>optimizations and a whole bunch of other things.

00:04:36.010 --> 00:04:37.690
<v Speaker 0>And then there's advent of code. So, I

00:04:37.690 --> 00:04:40.250
<v Speaker 0>mean, no pressure. But this must be this

00:04:40.250 --> 00:04:42.090
<v Speaker 0>must be easy for you. Right? That's you're

00:04:42.090 --> 00:04:43.450
<v Speaker 0>just gonna smash it at the park in

00:04:43.450 --> 00:04:45.850
<v Speaker 0>fifteen minutes, and that is done. Right. Right.

00:04:45.850 --> 00:04:48.055
<v Speaker 1>Right. So so yeah. That's the thing about

00:04:48.135 --> 00:04:49.415
<v Speaker 1>especially at end of COVID, the way I've

00:04:49.415 --> 00:04:50.695
<v Speaker 1>been tackling it is I wake up in

00:04:50.695 --> 00:04:52.455
<v Speaker 1>the morning, kinda check it,

00:04:52.855 --> 00:04:54.775
<v Speaker 1>and, you know, sort of in the

00:04:55.175 --> 00:04:56.215
<v Speaker 1>kind of like a lot of these things

00:04:56.215 --> 00:04:58.535
<v Speaker 1>we do kind of the we we kinda

00:04:58.535 --> 00:04:59.815
<v Speaker 1>do in our in the privacy of our

00:04:59.815 --> 00:05:01.815
<v Speaker 1>own home and

00:05:02.370 --> 00:05:04.290
<v Speaker 1>and without any, like, pressure.

00:05:04.610 --> 00:05:06.290
<v Speaker 1>And so this does so doing this in

00:05:06.290 --> 00:05:08.050
<v Speaker 1>front of an audience does kinda add add

00:05:08.050 --> 00:05:09.490
<v Speaker 1>quite a bit of pressure. But one of

00:05:09.490 --> 00:05:10.690
<v Speaker 1>the cool things one of the things I

00:05:10.690 --> 00:05:11.970
<v Speaker 1>like about it is that

00:05:13.650 --> 00:05:15.730
<v Speaker 1>what I find is that you tend to

00:05:15.730 --> 00:05:18.025
<v Speaker 1>kinda bring your own toolbox to these problems.

00:05:18.025 --> 00:05:19.785
<v Speaker 1>You kinda bring the things, you know, whatever

00:05:19.785 --> 00:05:22.504
<v Speaker 1>algorithms, like language, constructs, stuff like that that

00:05:22.504 --> 00:05:24.264
<v Speaker 1>you know to a particular problem.

00:05:24.745 --> 00:05:25.465
<v Speaker 1>And

00:05:27.145 --> 00:05:29.625
<v Speaker 1>and once you solve the problem, that's that's

00:05:29.625 --> 00:05:31.305
<v Speaker 1>neat and interesting, but I think where it

00:05:31.305 --> 00:05:33.480
<v Speaker 1>becomes fun is to compare what you've done

00:05:33.480 --> 00:05:36.040
<v Speaker 1>with other people and see how they tackle

00:05:36.040 --> 00:05:37.880
<v Speaker 1>the problem in a different way because

00:05:38.520 --> 00:05:39.880
<v Speaker 1>what you find is that like, I have

00:05:39.880 --> 00:05:41.560
<v Speaker 1>a good friend who solved the previous

00:05:42.200 --> 00:05:45.080
<v Speaker 1>was it previous wrong? Anyway, in particular, I

00:05:45.080 --> 00:05:46.600
<v Speaker 1>have friends that I hang out with on

00:05:46.600 --> 00:05:49.205
<v Speaker 1>on Git I mean, on Slack. And almost

00:05:49.205 --> 00:05:50.965
<v Speaker 1>every day, we kinda start with, like, hey.

00:05:50.965 --> 00:05:52.565
<v Speaker 1>Have you done the new admin or code?

00:05:52.645 --> 00:05:54.325
<v Speaker 1>And what's always fun is to find out,

00:05:54.325 --> 00:05:56.245
<v Speaker 1>like, what things he did differently

00:05:56.325 --> 00:05:57.925
<v Speaker 1>to solve it that that I didn't that

00:05:57.925 --> 00:05:59.845
<v Speaker 1>I didn't do. And in in a way,

00:05:59.845 --> 00:06:01.660
<v Speaker 1>I kind of, like, learned to kind of

00:06:01.660 --> 00:06:02.380
<v Speaker 1>expand

00:06:02.620 --> 00:06:03.820
<v Speaker 1>my my toolbox.

00:06:04.540 --> 00:06:06.220
<v Speaker 0>I I I do that too. I mean,

00:06:06.220 --> 00:06:08.140
<v Speaker 0>time I do an advent of of code

00:06:08.140 --> 00:06:09.660
<v Speaker 0>problem, the first thing I do when I

00:06:09.660 --> 00:06:11.180
<v Speaker 0>finished it is go to get help search

00:06:11.180 --> 00:06:12.700
<v Speaker 0>for advent of code, filter it by what

00:06:12.700 --> 00:06:14.665
<v Speaker 0>was updated recently. Absolutely.

00:06:14.665 --> 00:06:16.185
<v Speaker 0>Just look at what other people did and

00:06:16.185 --> 00:06:17.705
<v Speaker 0>not only what other people did. I like

00:06:17.705 --> 00:06:20.105
<v Speaker 0>investigating how other languages solve the problem as

00:06:20.105 --> 00:06:21.545
<v Speaker 0>well and just kinda compare and how that

00:06:21.545 --> 00:06:23.705
<v Speaker 0>works. Like, I I find that more fun

00:06:23.705 --> 00:06:25.545
<v Speaker 0>that well, I enjoy solving the problems when

00:06:25.545 --> 00:06:26.985
<v Speaker 0>I do solve them. But I find

00:06:27.430 --> 00:06:29.270
<v Speaker 0>the more socially bits around that pretty cool

00:06:29.270 --> 00:06:31.910
<v Speaker 0>as well. So Yeah. Yeah. Yeah.

00:06:33.670 --> 00:06:34.790
<v Speaker 1>Yeah, today's

00:06:35.270 --> 00:06:36.790
<v Speaker 1>you know, when when you mentioned this today,

00:06:36.790 --> 00:06:38.070
<v Speaker 1>was like, oh, yeah. Yeah. This is this

00:06:38.070 --> 00:06:39.350
<v Speaker 1>is good. You know, I have no problem

00:06:39.350 --> 00:06:40.710
<v Speaker 1>with this. And then I looked at today's

00:06:40.710 --> 00:06:43.794
<v Speaker 1>and I'm like, oh, we're screwed. Right? So

00:06:43.794 --> 00:06:46.115
<v Speaker 1>we'll see. What so I'd like to do

00:06:46.115 --> 00:06:48.034
<v Speaker 1>is these problems are typically, like, broken down

00:06:48.034 --> 00:06:50.035
<v Speaker 1>into two parts. Right? You usually have, like,

00:06:50.675 --> 00:06:53.715
<v Speaker 1>you know, an initial problem, and then once

00:06:53.715 --> 00:06:55.630
<v Speaker 1>you solve that, you get sort of an

00:06:55.630 --> 00:06:57.790
<v Speaker 1>expansion of that problem with the same dataset.

00:06:58.190 --> 00:07:00.430
<v Speaker 1>And it's usually kind of like

00:07:00.990 --> 00:07:02.350
<v Speaker 1>some sort of

00:07:03.150 --> 00:07:05.870
<v Speaker 1>refinement or or maybe even, like, a complete

00:07:05.870 --> 00:07:08.030
<v Speaker 1>change of the original original problem. But

00:07:09.345 --> 00:07:10.305
<v Speaker 1>and so what

00:07:10.785 --> 00:07:12.305
<v Speaker 1>I'd like to do is after looking at

00:07:12.305 --> 00:07:14.145
<v Speaker 1>this one, frankly, I have no idea how

00:07:14.145 --> 00:07:16.145
<v Speaker 1>to, like like, solve it.

00:07:16.465 --> 00:07:17.185
<v Speaker 1>And so,

00:07:18.224 --> 00:07:19.504
<v Speaker 1>personally, I just like to get through the

00:07:19.504 --> 00:07:21.104
<v Speaker 1>first half, and let's see how quickly we

00:07:21.104 --> 00:07:22.710
<v Speaker 1>could do that and efficiently we could do

00:07:22.710 --> 00:07:23.910
<v Speaker 1>that. And if we could get through the

00:07:23.910 --> 00:07:25.270
<v Speaker 1>first half, then maybe we could tech kinda

00:07:25.270 --> 00:07:27.350
<v Speaker 1>tackle the second half. Or if we can't,

00:07:27.350 --> 00:07:28.630
<v Speaker 1>maybe we could, like, save that for, like,

00:07:28.630 --> 00:07:30.310
<v Speaker 1>the part two or something like that. Oh,

00:07:30.310 --> 00:07:32.390
<v Speaker 0>yeah. Definitely. Always up for a part two.

00:07:32.390 --> 00:07:34.070
<v Speaker 0>I I've I pulled up the challenge this

00:07:34.070 --> 00:07:35.830
<v Speaker 0>morning as well, and I was like, we

00:07:35.445 --> 00:07:36.965
<v Speaker 0>we picked the worst day.

00:07:37.925 --> 00:07:39.605
<v Speaker 1>Right. Yeah.

00:07:39.925 --> 00:07:40.565
<v Speaker 1>Yeah.

00:07:40.805 --> 00:07:42.565
<v Speaker 0>Why you doing in fact,

00:07:44.245 --> 00:07:45.765
<v Speaker 0>do you have the advent of code screen

00:07:45.765 --> 00:07:47.365
<v Speaker 0>up, or shall I pull up a couple?

00:07:48.485 --> 00:07:50.165
<v Speaker 0>I can pull Sorry. I'll I'll I'll do

00:07:50.165 --> 00:07:50.405
<v Speaker 0>it.

00:07:51.030 --> 00:07:53.590
<v Speaker 0>Let's see. Alright. So I'll share my screen

00:07:53.590 --> 00:07:54.150
<v Speaker 0>first.

00:07:56.310 --> 00:07:57.510
<v Speaker 0>And forgive me if it looks like I'm

00:07:57.510 --> 00:07:58.950
<v Speaker 1>staring out out of space. I have two

00:07:58.950 --> 00:08:02.630
<v Speaker 1>monitors, and so I have you on, like

00:08:03.715 --> 00:08:05.235
<v Speaker 0>Yeah. I I did that too. And I

00:08:05.235 --> 00:08:06.995
<v Speaker 0>I I I think I've got it tweaked

00:08:06.995 --> 00:08:08.515
<v Speaker 0>just enough that when I look at each

00:08:08.515 --> 00:08:10.755
<v Speaker 0>one, it's actually not too bad. Although that's

00:08:10.755 --> 00:08:12.195
<v Speaker 0>why it's screen goes right into here and

00:08:12.195 --> 00:08:14.355
<v Speaker 0>I probably don't wanna look at that. But

00:08:14.595 --> 00:08:16.035
<v Speaker 0>it also means I can't share the screen,

00:08:16.035 --> 00:08:17.475
<v Speaker 0>which is also really annoying. Anyway,

00:08:17.910 --> 00:08:20.550
<v Speaker 0>not important. So this is advent of code

00:08:20.550 --> 00:08:23.030
<v Speaker 0>here. If you're not familiar with it, every

00:08:23.030 --> 00:08:23.910
<v Speaker 0>December,

00:08:24.630 --> 00:08:25.990
<v Speaker 0>someone goes out of their way. I can't

00:08:25.990 --> 00:08:27.350
<v Speaker 0>remember their name. Let me find.

00:08:28.070 --> 00:08:28.790
<v Speaker 0>Eric

00:08:28.950 --> 00:08:30.470
<v Speaker 0>Wastel Wastel. I'm not sure.

00:08:31.215 --> 00:08:32.975
<v Speaker 0>Puts a lot of effort into producing all

00:08:32.975 --> 00:08:33.855
<v Speaker 0>of these problems

00:08:34.174 --> 00:08:36.015
<v Speaker 0>and they publish one a day, two parts.

00:08:36.015 --> 00:08:37.135
<v Speaker 0>You can go and have a bit of

00:08:37.135 --> 00:08:38.815
<v Speaker 0>fun with it, share your solutions with other

00:08:38.815 --> 00:08:40.735
<v Speaker 0>people. It's just a good way to experiment.

00:08:40.735 --> 00:08:41.934
<v Speaker 0>I use it as a way of playing

00:08:41.934 --> 00:08:44.015
<v Speaker 0>with new languages generally. I think that's quite

00:08:44.015 --> 00:08:44.815
<v Speaker 0>a fun approach to it.

00:08:46.400 --> 00:08:48.000
<v Speaker 0>And it's good. And I like what it

00:08:48.160 --> 00:08:49.360
<v Speaker 0>what he says here is that, you know,

00:08:49.360 --> 00:08:51.840
<v Speaker 0>you don't need to have a computer science

00:08:52.000 --> 00:08:53.760
<v Speaker 0>history to be able to tackle these problems

00:08:53.760 --> 00:08:56.320
<v Speaker 0>as well. Like, they're they're not there to

00:08:56.320 --> 00:08:58.480
<v Speaker 0>stump you or challenge you too much. So

00:08:58.480 --> 00:09:00.795
<v Speaker 0>they're to kind of let you to explore

00:09:00.795 --> 00:09:01.995
<v Speaker 0>and have a bit of fun with it

00:09:01.995 --> 00:09:03.675
<v Speaker 0>as well, which I think is really cool.

00:09:07.435 --> 00:09:08.875
<v Speaker 0>Do you have a computer science back? And

00:09:08.875 --> 00:09:10.555
<v Speaker 0>you do. Right? Yeah. I I went to

00:09:10.555 --> 00:09:11.915
<v Speaker 1>school for computer science. I have, you know,

00:09:11.915 --> 00:09:14.075
<v Speaker 1>full full disclosure. I never completed my degree,

00:09:14.075 --> 00:09:15.195
<v Speaker 1>but I got really close. But

00:09:17.110 --> 00:09:18.870
<v Speaker 1>I sort of and once you start working,

00:09:18.870 --> 00:09:20.310
<v Speaker 1>it's hard to, you know, like, go to

00:09:20.310 --> 00:09:22.470
<v Speaker 1>school and work at the same time. So

00:09:22.470 --> 00:09:23.910
<v Speaker 1>I moved to Orlando with the intention of

00:09:23.910 --> 00:09:26.070
<v Speaker 1>finishing my degree, but I'm still working on

00:09:26.070 --> 00:09:26.870
<v Speaker 1>that, I guess.

00:09:27.670 --> 00:09:31.110
<v Speaker 0>And well, yeah, I I never even started

00:09:30.245 --> 00:09:33.125
<v Speaker 0>college or university for computer programming. Like, I

00:09:33.125 --> 00:09:33.685
<v Speaker 0>just

00:09:34.245 --> 00:09:35.605
<v Speaker 0>I I don't know. I I spent so

00:09:35.605 --> 00:09:37.605
<v Speaker 0>much of my youth kind of hacking and

00:09:37.605 --> 00:09:39.125
<v Speaker 0>coding and c and I just got my

00:09:39.125 --> 00:09:40.725
<v Speaker 0>first role. And I never really felt that

00:09:40.725 --> 00:09:43.205
<v Speaker 0>it was holding me back until maybe five

00:09:42.590 --> 00:09:44.110
<v Speaker 0>or six years ago when I started to

00:09:44.110 --> 00:09:46.350
<v Speaker 0>look at these problems and realized, oh, I

00:09:46.350 --> 00:09:48.910
<v Speaker 0>don't know graph theory. Oh, I don't know

00:09:49.070 --> 00:09:50.830
<v Speaker 0>how to infer a binary tree and all

00:09:50.830 --> 00:09:52.830
<v Speaker 0>these other things. And it wasn't until like,

00:09:52.830 --> 00:09:54.270
<v Speaker 0>only in the last five years I started

00:09:54.270 --> 00:09:56.350
<v Speaker 0>experimenting with that stuff in my spare time.

00:09:56.350 --> 00:09:56.510
<v Speaker 0>So

00:09:57.425 --> 00:09:58.945
<v Speaker 0>and I guess the moral of that is

00:09:58.945 --> 00:10:00.305
<v Speaker 0>you can actually get a career in computer

00:10:00.305 --> 00:10:01.825
<v Speaker 0>science without any of this stuff or at

00:10:01.825 --> 00:10:03.425
<v Speaker 0>least a program without any of this stuff.

00:10:03.425 --> 00:10:04.865
<v Speaker 1>Absolutely. Absolutely.

00:10:05.345 --> 00:10:07.345
<v Speaker 0>I mean, I also like to spend my

00:10:07.345 --> 00:10:09.985
<v Speaker 0>time just building CMSs and websites, but that

00:10:09.985 --> 00:10:10.465
<v Speaker 0>was fun too.

00:10:11.480 --> 00:10:13.000
<v Speaker 0>So today's problem

00:10:14.680 --> 00:10:17.000
<v Speaker 0>is a good one. I'm not gonna sit

00:10:17.000 --> 00:10:18.760
<v Speaker 0>and and read this all out. Maybe I

00:10:18.760 --> 00:10:20.040
<v Speaker 0>can try and summarize it the best as

00:10:20.040 --> 00:10:22.600
<v Speaker 0>I can. So the problem is is that

00:10:22.600 --> 00:10:24.840
<v Speaker 0>we're gonna be given a dataset, an input

00:10:24.840 --> 00:10:25.240
<v Speaker 0>set,

00:10:26.024 --> 00:10:28.264
<v Speaker 0>which is a collection of bags.

00:10:29.065 --> 00:10:31.144
<v Speaker 0>And there are rules that dictate which bags

00:10:31.144 --> 00:10:33.384
<v Speaker 0>can fit instead of which bags. And our

00:10:33.384 --> 00:10:35.305
<v Speaker 0>goal is to establish

00:10:35.305 --> 00:10:38.185
<v Speaker 0>how many potential combination or what bags we

00:10:38.185 --> 00:10:40.024
<v Speaker 0>can get our golden bag into. Is that

00:10:40.024 --> 00:10:41.490
<v Speaker 0>a do wanna go into that in any

00:10:41.490 --> 00:10:42.130
<v Speaker 0>more detail? Or

00:10:42.930 --> 00:10:43.490
<v Speaker 1>Well,

00:10:44.130 --> 00:10:46.690
<v Speaker 1>so I think our goal is to count

00:10:47.490 --> 00:10:49.410
<v Speaker 1>how many bags in your dataset

00:10:49.889 --> 00:10:53.250
<v Speaker 1>can we fit our our golden was about

00:10:53.250 --> 00:10:54.334
<v Speaker 1>to scroll your screen. Let me pull it

00:10:54.334 --> 00:10:56.095
<v Speaker 1>up too. Oh, yeah. Yeah. We could swap

00:10:56.095 --> 00:10:57.454
<v Speaker 0>over. There's no there's no point in me.

00:10:57.454 --> 00:10:58.654
<v Speaker 0>Gonna send it back.

00:11:03.055 --> 00:11:04.815
<v Speaker 1>So if it's okay, I'd like to share

00:11:04.815 --> 00:11:06.415
<v Speaker 1>my screen. Go for it. Yeah. I'll

00:11:07.055 --> 00:11:07.774
<v Speaker 0>pop mine off.

00:11:15.280 --> 00:11:16.880
<v Speaker 1>Okay. Can you see that okay?

00:11:17.200 --> 00:11:20.160
<v Speaker 1>Oh, perfect. Alright. So

00:11:21.255 --> 00:11:22.215
<v Speaker 1>let's see.

00:11:23.095 --> 00:11:24.935
<v Speaker 1>So, yes, we have, like, a series of

00:11:24.935 --> 00:11:26.615
<v Speaker 1>rules that dictate,

00:11:26.615 --> 00:11:27.255
<v Speaker 1>like,

00:11:27.895 --> 00:11:30.135
<v Speaker 1>what bags can fit in another. Like, in

00:11:30.135 --> 00:11:32.215
<v Speaker 1>a light red bag, we could it can

00:11:32.215 --> 00:11:33.175
<v Speaker 1>contain one

00:11:33.815 --> 00:11:37.069
<v Speaker 1>bright white bag or two muted yellow bags,

00:11:37.069 --> 00:11:40.110
<v Speaker 1>etcetera. Some can contain other bags.

00:11:40.750 --> 00:11:42.269
<v Speaker 1>So for this problem,

00:11:42.750 --> 00:11:45.949
<v Speaker 1>how many bag colors can eventually contain at

00:11:45.949 --> 00:11:47.709
<v Speaker 1>least one shiny gold bag?

00:11:48.464 --> 00:11:50.385
<v Speaker 1>There's a couple other constraints there

00:11:50.945 --> 00:11:52.865
<v Speaker 1>that I think kinda stand out. Let's go

00:11:52.785 --> 00:11:54.704
<v Speaker 1>well, there's several there's lots lot of stuff

00:11:54.704 --> 00:11:57.345
<v Speaker 1>that stands out. But let's talk about the

00:11:57.345 --> 00:11:58.145
<v Speaker 1>fact that

00:11:58.865 --> 00:12:01.185
<v Speaker 1>let's see. Where is it? Ah, yeah.

00:12:01.850 --> 00:12:04.250
<v Speaker 1>You have a shiny gold bag. If you

00:12:04.250 --> 00:12:06.170
<v Speaker 1>wanted to carry it in at least one

00:12:06.170 --> 00:12:07.930
<v Speaker 1>other bag, how many different bag colors can

00:12:07.930 --> 00:12:08.090
<v Speaker 1>you

00:12:10.970 --> 00:12:13.130
<v Speaker 1>I guess my point is I can't find

00:12:13.130 --> 00:12:15.530
<v Speaker 1>the the section right now, but

00:12:16.115 --> 00:12:18.355
<v Speaker 1>there is a notion of depth like

00:12:19.475 --> 00:12:21.555
<v Speaker 1>oh god. Where is it? These

00:12:22.834 --> 00:12:24.595
<v Speaker 1>are all specified required contents.

00:12:24.675 --> 00:12:26.274
<v Speaker 1>Shiny gold bag if you wanted to carry

00:12:26.274 --> 00:12:26.514
<v Speaker 1>it.

00:12:29.340 --> 00:12:31.260
<v Speaker 1>Well, let's let's let's get that part for

00:12:31.260 --> 00:12:33.180
<v Speaker 1>now. Here's some other things that stand out

00:12:33.180 --> 00:12:34.220
<v Speaker 1>is that

00:12:34.460 --> 00:12:36.940
<v Speaker 1>the first problem only asks us to count

00:12:37.020 --> 00:12:40.060
<v Speaker 1>how many bags we could ultimately fit our

00:12:40.060 --> 00:12:41.580
<v Speaker 1>shiny

00:12:40.905 --> 00:12:42.265
<v Speaker 1>gold bag into.

00:12:42.505 --> 00:12:44.185
<v Speaker 1>But our constraints

00:12:44.185 --> 00:12:47.545
<v Speaker 1>have numbers in them. And for the first

00:12:47.545 --> 00:12:49.145
<v Speaker 1>solution, I don't I don't see how we're

00:12:49.145 --> 00:12:51.225
<v Speaker 1>gonna use that number. But I what I

00:12:51.225 --> 00:12:53.065
<v Speaker 1>find is typical with these admin of code

00:12:53.065 --> 00:12:53.865
<v Speaker 1>things is that

00:12:54.779 --> 00:12:57.580
<v Speaker 1>that's probably gonna be in or, you know,

00:12:57.580 --> 00:13:00.140
<v Speaker 1>that number is probably gonna be involved in

00:13:00.140 --> 00:13:01.820
<v Speaker 1>the next half of this

00:13:02.220 --> 00:13:04.620
<v Speaker 1>half of this problem. There's a a term

00:13:04.620 --> 00:13:06.460
<v Speaker 1>I kinda learned I learned a while ago

00:13:06.460 --> 00:13:08.700
<v Speaker 1>called Chekhov's gun. It's like a old, like

00:13:10.075 --> 00:13:12.955
<v Speaker 1>like, theater concept that if you put a

00:13:12.955 --> 00:13:14.875
<v Speaker 1>a gun as a prop or hang a

00:13:14.875 --> 00:13:15.995
<v Speaker 1>gun on a as a prop on a

00:13:15.995 --> 00:13:17.834
<v Speaker 1>wall, you better use it in the next

00:13:17.834 --> 00:13:19.675
<v Speaker 1>in the next scene. And so I think

00:13:19.675 --> 00:13:21.274
<v Speaker 1>that that's the thing here. Like, we we

00:13:21.274 --> 00:13:23.435
<v Speaker 1>have Chekhov's gun right here in that. We

00:13:23.435 --> 00:13:25.355
<v Speaker 1>have one bright white

00:13:25.620 --> 00:13:28.420
<v Speaker 1>bag, two muted yellow. So keep that in

00:13:28.420 --> 00:13:29.540
<v Speaker 1>mind. So what we'll what we'll try to

00:13:29.540 --> 00:13:30.980
<v Speaker 1>do, I guess, is keep track of that

00:13:30.980 --> 00:13:33.140
<v Speaker 1>as we as we solve this. Does that

00:13:33.140 --> 00:13:35.540
<v Speaker 1>make sense? Or Yeah. Otherwise, I can have

00:13:35.540 --> 00:13:37.620
<v Speaker 0>a slightly different understanding from you, which has

00:13:37.620 --> 00:13:39.300
<v Speaker 0>got me worried now. So Okay.

00:13:40.214 --> 00:13:42.375
<v Speaker 0>Like, the way I read this is that

00:13:42.375 --> 00:13:45.654
<v Speaker 0>the light red bag can contain one bright

00:13:45.654 --> 00:13:47.495
<v Speaker 0>white bag and two

00:13:47.815 --> 00:13:50.375
<v Speaker 0>muted yellow bags. Uh-huh. And then the number

00:13:50.375 --> 00:13:52.214
<v Speaker 0>there is for the depth that I think

00:13:51.810 --> 00:13:53.170
<v Speaker 0>you're talking about. So if they can hold

00:13:53.170 --> 00:13:55.170
<v Speaker 0>two muted yellow bags and a muted yellow

00:13:55.170 --> 00:13:57.490
<v Speaker 0>bag can hold two plum bags, then we

00:13:57.490 --> 00:13:59.090
<v Speaker 0>need to know that that's four plum bags

00:13:59.090 --> 00:14:00.450
<v Speaker 0>that can be held in two muted bags

00:14:00.450 --> 00:14:01.490
<v Speaker 0>and say the one

00:14:01.890 --> 00:14:04.130
<v Speaker 0>light red bag. Oh, so one more time.

00:14:04.130 --> 00:14:05.970
<v Speaker 1>So what what do you mean again? So

00:14:06.584 --> 00:14:08.425
<v Speaker 0>let's go over the example and see if

00:14:08.425 --> 00:14:09.704
<v Speaker 0>it makes a bit more sense then because

00:14:09.704 --> 00:14:10.345
<v Speaker 0>my

00:14:10.665 --> 00:14:13.305
<v Speaker 0>understanding is if we have a yeah. Where

00:14:13.305 --> 00:14:14.185
<v Speaker 0>is it?

00:14:15.865 --> 00:14:18.024
<v Speaker 0>Yeah. So in this example, like, so if

00:14:18.024 --> 00:14:20.584
<v Speaker 0>I have a bright white bag that can

00:14:20.584 --> 00:14:21.944
<v Speaker 0>hold that can hold away.

00:14:24.120 --> 00:14:26.120
<v Speaker 0>Oh, yeah. That's not the rules. Let's see

00:14:26.120 --> 00:14:27.000
<v Speaker 0>if I got it here.

00:14:28.040 --> 00:14:29.480
<v Speaker 0>Oh, yeah. The buffer oh, that was the

00:14:29.480 --> 00:14:32.040
<v Speaker 0>rules. Okay. Yeah. So if we have a

00:14:32.040 --> 00:14:34.440
<v Speaker 0>light red bag, then that can hold one

00:14:34.440 --> 00:14:36.535
<v Speaker 0>bright white and two muted yellow. Plus we

00:14:36.535 --> 00:14:38.135
<v Speaker 0>know from the fourth line that the muted

00:14:38.135 --> 00:14:41.015
<v Speaker 0>yellow bag can actually hold two shiny gold

00:14:41.015 --> 00:14:44.615
<v Speaker 0>bags plus nine faded blue bags. Mhmm. So

00:14:44.615 --> 00:14:46.215
<v Speaker 0>that means we could if then if there's

00:14:46.215 --> 00:14:48.295
<v Speaker 0>any combination of nine faded blue bags that

00:14:48.295 --> 00:14:49.990
<v Speaker 0>can hold other bags, does that is this

00:14:49.990 --> 00:14:51.670
<v Speaker 0>not recursive in that approach or if I

00:14:51.670 --> 00:14:53.029
<v Speaker 0>just misread that completely?

00:14:53.430 --> 00:14:55.990
<v Speaker 1>I think it is recursive, but I don't

00:14:55.990 --> 00:14:57.589
<v Speaker 1>quite understand what you mean by

00:14:57.990 --> 00:15:01.029
<v Speaker 1>or how we use that that that quantity

00:15:01.029 --> 00:15:03.795
<v Speaker 1>or that volume right there. Okay. So let's

00:15:03.795 --> 00:15:05.875
<v Speaker 1>see if I have an example. So if

00:15:05.875 --> 00:15:07.715
<v Speaker 0>we've got a muted yellow bag, right, we

00:15:07.715 --> 00:15:09.875
<v Speaker 0>know that can hold two shiny gold bags

00:15:09.875 --> 00:15:13.315
<v Speaker 0>and nine faded blue bags. Now the two

00:15:13.315 --> 00:15:14.595
<v Speaker 0>is important because we know we can hold

00:15:14.595 --> 00:15:16.435
<v Speaker 0>two gold bags there. But at the same

00:15:16.435 --> 00:15:18.275
<v Speaker 0>time, the nine is important on the faded

00:15:18.275 --> 00:15:21.110
<v Speaker 0>blue because we know that faded oh, no.

00:15:21.110 --> 00:15:22.710
<v Speaker 0>That was the worst example because faded blue

00:15:22.710 --> 00:15:24.150
<v Speaker 0>bags contain no other bags.

00:15:24.710 --> 00:15:26.710
<v Speaker 1>Oh, I see what you're saying. So what

00:15:26.710 --> 00:15:28.870
<v Speaker 1>you're saying is that if we're gonna sum

00:15:28.870 --> 00:15:30.710
<v Speaker 1>up how many shiny gold bags we can

00:15:30.710 --> 00:15:33.430
<v Speaker 1>contain let's say, for example, that faded blue

00:15:33.430 --> 00:15:36.825
<v Speaker 1>bags could contain shiny gold bags, then you're

00:15:36.825 --> 00:15:39.065
<v Speaker 1>saying our total would mean that we could

00:15:39.145 --> 00:15:39.865
<v Speaker 1>contain

00:15:40.585 --> 00:15:43.865
<v Speaker 0>11 bags. 20 gotcha. Gotcha. So let's see.

00:15:43.865 --> 00:15:44.425
<v Speaker 1>So

00:15:44.745 --> 00:15:48.025
<v Speaker 1>you have a shiny a shiny gold bag.

00:15:48.459 --> 00:15:50.140
<v Speaker 1>If you wanted to carry it in at

00:15:50.140 --> 00:15:52.380
<v Speaker 1>least one other bag,

00:15:52.940 --> 00:15:55.100
<v Speaker 1>how many different bag colors

00:15:55.260 --> 00:15:58.459
<v Speaker 1>would be valid for outermost bag? So what

00:15:58.459 --> 00:15:59.820
<v Speaker 1>I get from that is that we have

00:15:59.820 --> 00:16:00.700
<v Speaker 1>one bag.

00:16:00.940 --> 00:16:01.500
<v Speaker 1>So

00:16:02.220 --> 00:16:04.815
<v Speaker 1>regardless if we if, you know, like, say,

00:16:04.815 --> 00:16:06.735
<v Speaker 1>a sub sub bag can store nine of

00:16:06.735 --> 00:16:08.895
<v Speaker 1>them, it doesn't matter because what we wanna

00:16:08.895 --> 00:16:09.855
<v Speaker 1>find out is

00:16:10.655 --> 00:16:13.295
<v Speaker 1>so imagine imagine a graph. Right? And so

00:16:13.295 --> 00:16:14.175
<v Speaker 1>we

00:16:14.895 --> 00:16:17.055
<v Speaker 1>have lot lots of bags or we have

00:16:17.055 --> 00:16:19.199
<v Speaker 1>bags that are connected to other bags that

00:16:19.199 --> 00:16:21.519
<v Speaker 1>could that could potentially be connected to other

00:16:21.519 --> 00:16:23.360
<v Speaker 1>bags. And so I think what we wanna

00:16:23.360 --> 00:16:24.399
<v Speaker 1>do is find out

00:16:25.279 --> 00:16:26.160
<v Speaker 1>we wanna

00:16:26.720 --> 00:16:28.639
<v Speaker 1>and so each of these lines but it

00:16:28.639 --> 00:16:30.320
<v Speaker 1>basically indicates kind of a root

00:16:30.560 --> 00:16:32.560
<v Speaker 1>or kind of starting point, you know, of

00:16:32.560 --> 00:16:34.319
<v Speaker 1>our search. Right? So what I'm imagining is

00:16:34.319 --> 00:16:34.879
<v Speaker 1>kind of

00:16:35.975 --> 00:16:37.895
<v Speaker 1>searching through this this space.

00:16:38.535 --> 00:16:39.655
<v Speaker 1>We're looking for

00:16:40.615 --> 00:16:42.455
<v Speaker 1>we're looking to count how many

00:16:43.575 --> 00:16:45.895
<v Speaker 1>shiny gold bags we could or

00:16:46.615 --> 00:16:49.415
<v Speaker 1>I'm sorry. We're looking for how many distinct

00:16:49.900 --> 00:16:50.700
<v Speaker 1>bags

00:16:51.180 --> 00:16:53.660
<v Speaker 1>that we could store shiny gold bags in

00:16:53.660 --> 00:16:55.980
<v Speaker 1>ultimately. Right? Oh, that's great. And so I'm

00:16:55.980 --> 00:16:58.780
<v Speaker 1>saying I think we it already say

00:16:58.780 --> 00:17:02.060
<v Speaker 1>light red bag and then traversing graph described

00:17:02.060 --> 00:17:03.740
<v Speaker 1>by the these

00:17:04.195 --> 00:17:07.075
<v Speaker 1>these sort of adjacent nodes that that these

00:17:07.075 --> 00:17:08.194
<v Speaker 1>parts describe.

00:17:08.275 --> 00:17:11.315
<v Speaker 1>Right? It's like so light red bag contains,

00:17:11.315 --> 00:17:14.115
<v Speaker 1>and then this part, in my mind, describes

00:17:14.435 --> 00:17:17.234
<v Speaker 1>the the edges of of the graph. Right?

00:17:17.395 --> 00:17:19.955
<v Speaker 1>And so we walk the edges until

00:17:20.329 --> 00:17:21.369
<v Speaker 1>and count

00:17:21.690 --> 00:17:24.329
<v Speaker 1>the the edges that end

00:17:24.890 --> 00:17:26.329
<v Speaker 1>in a shiny

00:17:27.930 --> 00:17:29.929
<v Speaker 1>what were a shiny gold bag

00:17:30.090 --> 00:17:30.970
<v Speaker 1>node

00:17:31.610 --> 00:17:33.945
<v Speaker 1>regardless of the the count. But you might

00:17:33.945 --> 00:17:35.705
<v Speaker 1>be right. Like, I what I'm afraid of

00:17:35.705 --> 00:17:37.945
<v Speaker 1>is the next part. Right? Yeah. Yeah. Whatever

00:17:39.304 --> 00:17:40.825
<v Speaker 1>that is, I think those numbers are gonna

00:17:40.825 --> 00:17:42.585
<v Speaker 1>become important. But for this, I don't think

00:17:42.585 --> 00:17:43.705
<v Speaker 1>the numbers matter.

00:17:43.865 --> 00:17:45.625
<v Speaker 0>Okay. Yeah. I misread it. So, yeah, we

00:17:45.625 --> 00:17:46.985
<v Speaker 0>only have to identify the colors that can

00:17:46.985 --> 00:17:48.970
<v Speaker 0>eventually hold a shiny gold bag, return that

00:17:48.970 --> 00:17:50.330
<v Speaker 0>number, and I bet you part two is

00:17:50.330 --> 00:17:52.010
<v Speaker 0>how many gold shiny gold bags can be

00:17:52.010 --> 00:17:53.369
<v Speaker 0>stored in this combination.

00:17:53.529 --> 00:17:54.330
<v Speaker 1>Right.

00:17:54.570 --> 00:17:55.609
<v Speaker 1>Right. Right.

00:17:56.330 --> 00:17:57.129
<v Speaker 1>So,

00:17:57.130 --> 00:17:58.970
<v Speaker 1>typically, what I like to do is

00:18:00.010 --> 00:18:02.409
<v Speaker 1>maybe sometimes to the annoyance of people I

00:18:02.409 --> 00:18:04.755
<v Speaker 1>I work with is come up with, like,

00:18:04.755 --> 00:18:07.715
<v Speaker 1>really strong metaphors for what we're doing. I

00:18:07.715 --> 00:18:09.554
<v Speaker 1>like to I break this down into kinda

00:18:09.554 --> 00:18:12.195
<v Speaker 1>like nouns and verbs. Like, what what what

00:18:12.195 --> 00:18:13.315
<v Speaker 1>do we have? What what kind of things

00:18:13.315 --> 00:18:14.115
<v Speaker 1>we're doing with it?

00:18:16.140 --> 00:18:17.980
<v Speaker 1>But, also, in solving these,

00:18:18.220 --> 00:18:20.300
<v Speaker 1>just know that we might go down we

00:18:20.300 --> 00:18:21.820
<v Speaker 1>might go down paths that

00:18:22.140 --> 00:18:24.140
<v Speaker 1>don't work. What what we'll try to do

00:18:24.140 --> 00:18:26.220
<v Speaker 1>is break it down into small enough chunks

00:18:26.220 --> 00:18:28.060
<v Speaker 1>that if we get to a point where

00:18:28.060 --> 00:18:29.660
<v Speaker 1>we're of paying ourselves in the corner, maybe

00:18:29.660 --> 00:18:31.020
<v Speaker 1>we could pop pop a few things off

00:18:31.020 --> 00:18:33.725
<v Speaker 1>and then kinda kinda restart. Hopefully, we'll see.

00:18:35.405 --> 00:18:37.485
<v Speaker 1>But so what I'd like to do is

00:18:37.485 --> 00:18:38.205
<v Speaker 1>start with

00:18:39.085 --> 00:18:40.205
<v Speaker 1>well, we're gonna do this and go. And

00:18:40.205 --> 00:18:41.325
<v Speaker 1>I'm gonna move this to the side of

00:18:41.325 --> 00:18:42.765
<v Speaker 1>the screen. So if you see me kind

00:18:42.765 --> 00:18:44.605
<v Speaker 1>of, like, stare off in space, I'm looking

00:18:44.605 --> 00:18:45.645
<v Speaker 1>at the

00:18:46.020 --> 00:18:47.460
<v Speaker 1>the instructions.

00:18:48.020 --> 00:18:48.659
<v Speaker 1>Okay.

00:18:49.060 --> 00:18:49.460
<v Speaker 1>Let me

00:18:50.340 --> 00:18:52.980
<v Speaker 1>k. So I'm gonna open up the terminal.

00:18:54.660 --> 00:18:57.059
<v Speaker 0>So we also got our first comment from

00:18:57.140 --> 00:18:58.580
<v Speaker 0>John. Hey, John. How's going?

00:18:59.355 --> 00:19:01.755
<v Speaker 0>Yes. Sadly, Santa Claus does not create the

00:19:01.755 --> 00:19:03.595
<v Speaker 0>advent of code. I'm sorry. Burst that bubble,

00:19:03.595 --> 00:19:06.554
<v Speaker 0>mate. Yeah. Yeah. Also, please, if you're in

00:19:06.554 --> 00:19:09.115
<v Speaker 1>the chat, please don't, like, spoil it. I

00:19:09.275 --> 00:19:12.309
<v Speaker 1>we honestly haven't, like, figured this out. So

00:19:12.310 --> 00:19:14.950
<v Speaker 1>I'm I'm open to help, but don't don't

00:19:14.950 --> 00:19:16.310
<v Speaker 1>give away the answer. That would be like,

00:19:16.310 --> 00:19:18.390
<v Speaker 1>that completely ruined ruined everything for me.

00:19:19.750 --> 00:19:21.350
<v Speaker 1>So let's do this.

00:19:23.350 --> 00:19:25.990
<v Speaker 0>Use zoom in on the front of it.

00:19:26.955 --> 00:19:28.154
<v Speaker 0>Awesome.

00:19:29.434 --> 00:19:30.075
<v Speaker 1>Thank you.

00:19:32.235 --> 00:19:32.955
<v Speaker 1>Alright.

00:19:33.355 --> 00:19:35.115
<v Speaker 1>So we're gonna do this in Go, which

00:19:35.115 --> 00:19:37.195
<v Speaker 1>is I already oh, I'm sorry. Let's let's

00:19:37.195 --> 00:19:38.795
<v Speaker 1>talk about this program. I mean, this problem

00:19:38.795 --> 00:19:40.155
<v Speaker 1>is some more

00:19:40.350 --> 00:19:42.429
<v Speaker 1>because this is another thing I see, which

00:19:42.429 --> 00:19:43.230
<v Speaker 1>is that

00:19:44.830 --> 00:19:48.269
<v Speaker 1>we have the task of traversing this graph,

00:19:48.510 --> 00:19:50.269
<v Speaker 1>which is one problem in itself.

00:19:51.230 --> 00:19:53.230
<v Speaker 1>Then we have the task of parsing

00:19:53.230 --> 00:19:53.790
<v Speaker 1>this stuff.

00:19:54.945 --> 00:19:55.585
<v Speaker 1>And

00:19:55.745 --> 00:19:58.304
<v Speaker 1>let's take a look at the puzzle input.

00:19:59.184 --> 00:20:00.065
<v Speaker 1>And so

00:20:00.465 --> 00:20:02.225
<v Speaker 1>hey. This is super long. Right? This is

00:20:02.225 --> 00:20:03.184
<v Speaker 1>pretty pretty lengthy.

00:20:04.865 --> 00:20:05.504
<v Speaker 1>And

00:20:07.825 --> 00:20:08.544
<v Speaker 1>the language

00:20:09.140 --> 00:20:11.140
<v Speaker 1>is a little bit complicated. Right? So we

00:20:11.140 --> 00:20:12.420
<v Speaker 1>have these kinda like

00:20:13.060 --> 00:20:13.940
<v Speaker 1>adjective

00:20:14.180 --> 00:20:15.780
<v Speaker 1>noun bags

00:20:15.940 --> 00:20:16.740
<v Speaker 1>contains.

00:20:16.740 --> 00:20:18.020
<v Speaker 1>So what what I'm seeing is, like, a

00:20:18.020 --> 00:20:21.220
<v Speaker 1>little language emerge. Right? So we have you

00:20:21.220 --> 00:20:23.060
<v Speaker 1>should have these these two things, an adjective

00:20:23.060 --> 00:20:23.540
<v Speaker 1>and noun,

00:20:24.154 --> 00:20:25.674
<v Speaker 1>bags contains,

00:20:25.674 --> 00:20:26.794
<v Speaker 1>then some number,

00:20:27.115 --> 00:20:28.874
<v Speaker 1>and then another adjective and noun,

00:20:29.115 --> 00:20:29.994
<v Speaker 1>bags

00:20:30.075 --> 00:20:32.075
<v Speaker 1>or bag. That's

00:20:32.154 --> 00:20:34.315
<v Speaker 1>so that's, you know, complicated. Right?

00:20:34.635 --> 00:20:35.994
<v Speaker 1>Depending on the quantity.

00:20:36.875 --> 00:20:40.290
<v Speaker 1>But then the edges of the graph, which

00:20:40.290 --> 00:20:41.810
<v Speaker 1>I think we described here,

00:20:42.290 --> 00:20:45.010
<v Speaker 1>is actually a comma delimited thing or could

00:20:45.010 --> 00:20:48.610
<v Speaker 1>be. Right? Or even worse, it could be

00:20:48.770 --> 00:20:49.490
<v Speaker 1>like

00:20:51.490 --> 00:20:52.130
<v Speaker 1>where was it?

00:20:56.775 --> 00:20:58.215
<v Speaker 1>This one there was one that was, like,

00:20:58.215 --> 00:21:00.215
<v Speaker 1>no other bags or something like The rules

00:21:00.215 --> 00:21:01.735
<v Speaker 0>are just above you there. Yeah. Yeah. Yeah.

00:21:01.735 --> 00:21:04.215
<v Speaker 1>Yeah. So it contains no other bags. So

00:21:04.615 --> 00:21:06.375
<v Speaker 1>what I'd like to do is separate this

00:21:06.375 --> 00:21:10.460
<v Speaker 1>into two completely prop two completely distinct problems.

00:21:10.460 --> 00:21:13.100
<v Speaker 1>One is the act of, like,

00:21:13.340 --> 00:21:16.140
<v Speaker 1>following the rules and and traversing the graph,

00:21:16.140 --> 00:21:18.060
<v Speaker 1>and then the second part would be parsing

00:21:18.060 --> 00:21:18.620
<v Speaker 1>this.

00:21:19.660 --> 00:21:21.100
<v Speaker 1>And so let's

00:21:21.180 --> 00:21:22.860
<v Speaker 1>let's see how that works for us.

00:21:24.060 --> 00:21:25.179
<v Speaker 1>Alright. So

00:21:25.725 --> 00:21:26.764
<v Speaker 1>alright. So

00:21:27.405 --> 00:21:29.164
<v Speaker 1>what I'm feeling is

00:21:29.645 --> 00:21:31.085
<v Speaker 1>so we're gonna write this in Go.

00:21:31.804 --> 00:21:34.125
<v Speaker 1>Let's create Go modules. So Go mod with

00:21:34.125 --> 00:21:38.525
<v Speaker 1>GitHub.comag64a0cseven.

00:21:39.240 --> 00:21:39.960
<v Speaker 1>Okay.

00:21:40.760 --> 00:21:42.120
<v Speaker 1>Alright. So I have a go mod file,

00:21:42.120 --> 00:21:43.559
<v Speaker 1>so now we could kinda start

00:21:43.960 --> 00:21:45.799
<v Speaker 1>kinda hacking away and stuff.

00:21:46.600 --> 00:21:49.000
<v Speaker 1>So what I feel when I look at

00:21:49.000 --> 00:21:49.960
<v Speaker 1>this is that

00:21:51.800 --> 00:21:53.800
<v Speaker 1>what we're modeling is rules.

00:21:54.434 --> 00:21:55.554
<v Speaker 1>And so

00:21:56.595 --> 00:21:59.075
<v Speaker 1>I consider this kind of an entire rule

00:21:59.075 --> 00:21:59.794
<v Speaker 1>set.

00:22:03.315 --> 00:22:05.794
<v Speaker 1>Maybe each one of these is a rule.

00:22:08.280 --> 00:22:10.040
<v Speaker 1>And so, like, literally, when we're talking about

00:22:10.040 --> 00:22:12.440
<v Speaker 1>it. Right? Like, some process would be iterating

00:22:12.440 --> 00:22:13.240
<v Speaker 1>over this.

00:22:13.799 --> 00:22:15.240
<v Speaker 1>And for each rule

00:22:16.679 --> 00:22:18.279
<v Speaker 1>in our rule set,

00:22:18.760 --> 00:22:19.880
<v Speaker 1>try to walk

00:22:20.825 --> 00:22:23.625
<v Speaker 1>walk the graph until we find some target.

00:22:23.785 --> 00:22:24.424
<v Speaker 1>So

00:22:25.225 --> 00:22:26.665
<v Speaker 1>what we wanna do is sort of build

00:22:26.665 --> 00:22:27.385
<v Speaker 1>a graph,

00:22:29.465 --> 00:22:31.945
<v Speaker 1>iterate over each of the nodes or in

00:22:31.945 --> 00:22:32.905
<v Speaker 1>in the graph,

00:22:33.225 --> 00:22:35.145
<v Speaker 1>and using that as a route, see if

00:22:35.145 --> 00:22:35.785
<v Speaker 1>we could

00:22:36.419 --> 00:22:39.459
<v Speaker 1>trace a path to a desired target,

00:22:39.460 --> 00:22:40.179
<v Speaker 1>I think.

00:22:41.059 --> 00:22:42.500
<v Speaker 1>So how do we how do we model

00:22:42.500 --> 00:22:43.059
<v Speaker 1>that?

00:22:44.740 --> 00:22:45.699
<v Speaker 1>Let's see.

00:22:47.059 --> 00:22:47.620
<v Speaker 1>Alright.

00:22:47.985 --> 00:22:48.945
<v Speaker 1>Here we go.

00:22:49.265 --> 00:22:49.904
<v Speaker 1>So

00:22:50.145 --> 00:22:51.904
<v Speaker 1>let me start with Google.com.

00:22:56.545 --> 00:22:58.304
<v Speaker 0>Do you write tests when you do this

00:22:58.304 --> 00:23:00.865
<v Speaker 0>stuff? Yes. So this is so

00:23:01.410 --> 00:23:02.130
<v Speaker 1>in fact,

00:23:02.690 --> 00:23:04.130
<v Speaker 1>that is really the only I like none

00:23:04.130 --> 00:23:05.650
<v Speaker 1>of my event of code

00:23:05.890 --> 00:23:08.290
<v Speaker 1>attempts have, like, a main function. So what

00:23:08.290 --> 00:23:10.450
<v Speaker 1>we'll do at some point is split

00:23:13.650 --> 00:23:15.810
<v Speaker 1>and then start start running running a test.

00:23:15.845 --> 00:23:17.925
<v Speaker 1>So let's start laying down some code first.

00:23:17.925 --> 00:23:19.765
<v Speaker 1>So I think the first thing we need

00:23:19.765 --> 00:23:20.485
<v Speaker 1>is

00:23:21.205 --> 00:23:22.085
<v Speaker 1>a rule,

00:23:23.365 --> 00:23:24.085
<v Speaker 1>and

00:23:24.565 --> 00:23:26.005
<v Speaker 1>looks like a rule

00:23:26.565 --> 00:23:28.885
<v Speaker 1>is gonna need a

00:23:30.910 --> 00:23:31.710
<v Speaker 1>name

00:23:36.030 --> 00:23:38.830
<v Speaker 1>and a maybe a quantity. Right?

00:23:43.070 --> 00:23:45.230
<v Speaker 1>Alright. So quantity is an int. Name is

00:23:45.230 --> 00:23:46.430
<v Speaker 1>string. Alright.

00:23:48.804 --> 00:23:49.605
<v Speaker 1>Alright.

00:23:49.605 --> 00:23:50.565
<v Speaker 1>And

00:23:50.965 --> 00:23:53.044
<v Speaker 1>so what we're modeling is

00:23:53.605 --> 00:23:55.845
<v Speaker 1>sort of rule sets. Right? So

00:23:56.565 --> 00:23:58.325
<v Speaker 1>at some point, we're gonna need a slice

00:23:58.325 --> 00:23:59.124
<v Speaker 1>of rules.

00:24:00.005 --> 00:24:02.005
<v Speaker 1>So that would be something that encodes

00:24:02.539 --> 00:24:04.620
<v Speaker 1>this part right here. Right? So we're gonna

00:24:04.620 --> 00:24:06.700
<v Speaker 1>need, like, one bright white,

00:24:06.940 --> 00:24:09.340
<v Speaker 1>two muted yellow. Right? And so that feels

00:24:09.340 --> 00:24:10.859
<v Speaker 1>like a a slice.

00:24:11.500 --> 00:24:13.340
<v Speaker 1>So maybe you could say, like,

00:24:14.299 --> 00:24:15.659
<v Speaker 1>type rules.

00:24:15.820 --> 00:24:16.940
<v Speaker 1>There's a slice of rule.

00:24:22.935 --> 00:24:25.735
<v Speaker 1>And let's start right there. And so here,

00:24:25.735 --> 00:24:26.455
<v Speaker 1>let's

00:24:28.375 --> 00:24:30.695
<v Speaker 1>start a test. Right? So package,

00:24:30.855 --> 00:24:31.655
<v Speaker 1>o c seven.

00:24:32.640 --> 00:24:33.680
<v Speaker 1>And let's

00:24:38.560 --> 00:24:39.360
<v Speaker 1>okay.

00:24:40.000 --> 00:24:41.200
<v Speaker 1>So one of the things I wanna do

00:24:41.200 --> 00:24:44.080
<v Speaker 1>is search for a target within

00:24:44.995 --> 00:24:47.955
<v Speaker 1>some rules. Does that sound like a reasonable

00:24:48.195 --> 00:24:51.635
<v Speaker 1>place to start? Yeah. Yeah. For sure. Alright.

00:24:51.635 --> 00:24:52.274
<v Speaker 1>So

00:24:53.075 --> 00:24:55.955
<v Speaker 1>rules. I'm gonna say r rules,

00:24:57.170 --> 00:24:59.650
<v Speaker 1>and we're gonna contrive some test data here.

00:24:59.650 --> 00:25:01.889
<v Speaker 1>But maybe we'll pull some directly from

00:25:04.450 --> 00:25:06.530
<v Speaker 1>this input. So I'm gonna copy it from

00:25:06.530 --> 00:25:08.690
<v Speaker 1>the admin code page

00:25:09.809 --> 00:25:10.850
<v Speaker 1>and paste it here.

00:25:14.395 --> 00:25:15.114
<v Speaker 1>K.

00:25:16.315 --> 00:25:17.835
<v Speaker 1>I'm gonna drop my font size a little

00:25:17.835 --> 00:25:19.914
<v Speaker 1>bit. Is that still okay? Yeah. It's alright.

00:25:19.914 --> 00:25:20.474
<v Speaker 1>Yeah.

00:25:20.794 --> 00:25:21.755
<v Speaker 1>I'll

00:25:21.755 --> 00:25:22.154
<v Speaker 1>tell you what.

00:25:28.390 --> 00:25:29.190
<v Speaker 1>So

00:25:29.350 --> 00:25:31.830
<v Speaker 1>let's see. So the first rule, have light

00:25:31.830 --> 00:25:33.110
<v Speaker 1>red bags.

00:25:36.070 --> 00:25:37.909
<v Speaker 1>Alright. So here's something else I'm feeling.

00:25:39.670 --> 00:25:40.950
<v Speaker 1>We're gonna need

00:25:45.935 --> 00:25:47.774
<v Speaker 1>I feel like we're gonna need

00:25:47.935 --> 00:25:48.654
<v Speaker 1>a

00:25:49.135 --> 00:25:50.255
<v Speaker 1>rule set,

00:25:51.135 --> 00:25:53.295
<v Speaker 1>and we're gonna make that a map of

00:25:53.295 --> 00:25:53.935
<v Speaker 1>strings

00:25:57.110 --> 00:25:58.389
<v Speaker 1>to rules.

00:25:59.990 --> 00:26:01.750
<v Speaker 1>And I feel like that I could use

00:26:01.750 --> 00:26:03.990
<v Speaker 1>to kinda stuff all the statements. Right? So

00:26:03.990 --> 00:26:06.390
<v Speaker 1>let's say articles rule set.

00:26:08.835 --> 00:26:09.635
<v Speaker 1>And

00:26:09.955 --> 00:26:12.674
<v Speaker 1>the first rule would be for light red.

00:26:12.835 --> 00:26:14.595
<v Speaker 1>In fact, what I'll do is just copy

00:26:14.595 --> 00:26:14.995
<v Speaker 1>off this.

00:26:24.429 --> 00:26:25.070
<v Speaker 1>Alright.

00:26:25.549 --> 00:26:26.830
<v Speaker 1>So what I'm gonna do is

00:26:27.630 --> 00:26:29.230
<v Speaker 1>I'm gonna try to translate all of this

00:26:29.230 --> 00:26:30.669
<v Speaker 1>code for now.

00:26:32.990 --> 00:26:34.349
<v Speaker 1>So let's say,

00:26:34.510 --> 00:26:34.909
<v Speaker 1>light,

00:26:35.895 --> 00:26:36.775
<v Speaker 1>red,

00:26:38.455 --> 00:26:40.535
<v Speaker 1>and the rules for that are

00:26:43.335 --> 00:26:45.015
<v Speaker 1>one and

00:26:45.415 --> 00:26:46.215
<v Speaker 1>bright

00:26:46.375 --> 00:26:46.855
<v Speaker 1>white.

00:26:49.279 --> 00:26:51.600
<v Speaker 1>And the rules for the second thing is

00:26:51.600 --> 00:26:53.359
<v Speaker 1>to when needed.

00:27:00.320 --> 00:27:02.284
<v Speaker 0>So you're building out this rule set so

00:27:02.284 --> 00:27:04.125
<v Speaker 0>that you can see have an assertion of

00:27:04.125 --> 00:27:05.565
<v Speaker 0>when I parse a string. This is a

00:27:05.565 --> 00:27:07.725
<v Speaker 0>rule set I get back. Is that So

00:27:07.725 --> 00:27:09.885
<v Speaker 1>what I'm doing is so, again, I'm not

00:27:09.885 --> 00:27:11.965
<v Speaker 1>I'm not worried about actually parsing this input

00:27:11.965 --> 00:27:14.125
<v Speaker 1>right now. What I wanna do is build

00:27:14.125 --> 00:27:16.280
<v Speaker 1>my data structure based on this. And so

00:27:16.280 --> 00:27:17.559
<v Speaker 1>we're gonna we're gonna kind of, like, parse

00:27:17.559 --> 00:27:19.320
<v Speaker 1>it in our heads to start with and

00:27:19.880 --> 00:27:22.040
<v Speaker 1>make sure that we're traversing our our tree

00:27:22.280 --> 00:27:23.799
<v Speaker 1>our our graph correctly.

00:27:24.200 --> 00:27:25.880
<v Speaker 1>And then the second part of that will

00:27:25.880 --> 00:27:28.304
<v Speaker 1>be, I feel like, parsing

00:27:28.544 --> 00:27:30.385
<v Speaker 1>this this text. And so I feel like

00:27:30.385 --> 00:27:32.065
<v Speaker 1>that's a completely separate

00:27:32.865 --> 00:27:34.625
<v Speaker 1>thing, and I feel like if we try

00:27:34.625 --> 00:27:36.304
<v Speaker 1>to tackle both at the same time, it'll

00:27:36.304 --> 00:27:38.225
<v Speaker 1>get confusing and and end of this call.

00:27:41.390 --> 00:27:42.029
<v Speaker 1>So,

00:27:42.350 --> 00:27:44.429
<v Speaker 1>actually, let's just put this way.

00:27:45.230 --> 00:27:46.350
<v Speaker 1>Yeah. There we go.

00:27:46.830 --> 00:27:47.869
<v Speaker 1>Alright. So,

00:27:51.070 --> 00:27:51.869
<v Speaker 1>in fact,

00:27:52.510 --> 00:27:53.629
<v Speaker 1>I'll just do this.

00:27:54.510 --> 00:27:55.150
<v Speaker 1>Make that.

00:27:56.174 --> 00:27:57.215
<v Speaker 1>Place it here.

00:27:57.455 --> 00:27:59.134
<v Speaker 1>And let's see if we can kind of

00:27:59.934 --> 00:28:00.815
<v Speaker 1>I don't know if we could do this

00:28:00.815 --> 00:28:01.615
<v Speaker 1>programmatically,

00:28:01.615 --> 00:28:02.975
<v Speaker 1>but we could certainly do this.

00:28:15.690 --> 00:28:16.489
<v Speaker 1>Alright.

00:28:18.250 --> 00:28:19.610
<v Speaker 1>I guess we could

00:28:20.730 --> 00:28:21.210
<v Speaker 1>maybe

00:28:22.595 --> 00:28:25.955
<v Speaker 1>from this slide, that's line 21 to here,

00:28:29.155 --> 00:28:29.955
<v Speaker 1>replace

00:28:32.435 --> 00:28:34.034
<v Speaker 1>bags with

00:28:34.835 --> 00:28:35.955
<v Speaker 1>colon

00:28:36.350 --> 00:28:38.030
<v Speaker 1>to get a map syntax.

00:28:41.310 --> 00:28:42.429
<v Speaker 1>Alright. So,

00:28:43.070 --> 00:28:44.910
<v Speaker 1>also, let's do something similar and get rid

00:28:44.910 --> 00:28:45.790
<v Speaker 1>of the word contain.

00:28:54.125 --> 00:28:56.445
<v Speaker 1>And let's get rid of the words bags

00:28:56.525 --> 00:28:57.885
<v Speaker 1>over the same range.

00:29:04.365 --> 00:29:06.765
<v Speaker 1>A bag with potentially an s.

00:29:09.190 --> 00:29:11.190
<v Speaker 1>There

00:29:15.670 --> 00:29:17.909
<v Speaker 1>we go. Alright. So now we can kinda

00:29:18.470 --> 00:29:19.030
<v Speaker 1>It's done.

00:29:19.605 --> 00:29:24.965
<v Speaker 1>Thank you. Let's

00:29:24.965 --> 00:29:25.684
<v Speaker 1>see.

00:29:31.045 --> 00:29:32.405
<v Speaker 1>I feel like I'm trying to see. So,

00:29:32.405 --> 00:29:34.085
<v Speaker 1>I mean, that curly braces are off here.

00:29:34.085 --> 00:29:35.045
<v Speaker 1>Oh, yeah. They definitely are.

00:29:47.755 --> 00:29:49.754
<v Speaker 1>Sorry. This is a boring part of

00:29:50.715 --> 00:29:53.755
<v Speaker 1>So what I'm doing now is, again, we're

00:29:53.755 --> 00:29:55.754
<v Speaker 1>basically kinda hand hand parsing

00:29:55.835 --> 00:29:58.394
<v Speaker 1>that input so that we have some

00:29:59.115 --> 00:30:02.315
<v Speaker 1>some data we can use to ensure that

00:30:01.039 --> 00:30:03.919
<v Speaker 1>our our algorithm is is is right.

00:30:13.795 --> 00:30:14.515
<v Speaker 1>K.

00:30:20.355 --> 00:30:21.395
<v Speaker 1>Oh, man.

00:30:23.155 --> 00:30:25.810
<v Speaker 1>I imagine Versus Code probably has, like, something

00:30:25.810 --> 00:30:27.570
<v Speaker 1>that would make this slide easier to do.

00:30:27.570 --> 00:30:29.730
<v Speaker 0>Yeah. Multi link cursors would made it a

00:30:29.730 --> 00:30:32.130
<v Speaker 0>little bit easier, but still it's

00:30:32.210 --> 00:30:33.250
<v Speaker 0>still fetching.

00:30:34.130 --> 00:30:36.130
<v Speaker 1>Yeah. I I think I think I'd probably

00:30:36.130 --> 00:30:38.065
<v Speaker 1>do that with the I'm but now we're

00:30:38.065 --> 00:30:39.825
<v Speaker 1>we're bumped into our like, the limits of

00:30:39.825 --> 00:30:41.105
<v Speaker 1>my VIM

00:30:41.505 --> 00:30:43.985
<v Speaker 1>skills here. Alright. So both of these, they

00:30:43.985 --> 00:30:45.585
<v Speaker 1>have no address, so we could just say,

00:30:45.585 --> 00:30:48.625
<v Speaker 1>like, empty. I guess, these both empty slices.

00:30:49.105 --> 00:30:50.705
<v Speaker 1>Alright. Let's see if that that works.

00:30:51.880 --> 00:30:54.760
<v Speaker 1>Nope. Something's wrong there. You've not got quotes

00:30:54.760 --> 00:30:57.640
<v Speaker 0>around your bright white music yellow, etcetera. Why

00:30:57.640 --> 00:30:58.919
<v Speaker 1>didn't you tell me earlier?

00:30:59.559 --> 00:31:01.400
<v Speaker 1>Okay. Yeah. I don't want to tell you

00:31:01.400 --> 00:31:03.400
<v Speaker 0>at the time either, but your rejects replacing

00:31:03.400 --> 00:31:05.559
<v Speaker 0>bag or bags was missing an optional param.

00:31:05.595 --> 00:31:06.794
<v Speaker 0>So you've got a couple of bag in

00:31:06.794 --> 00:31:07.514
<v Speaker 0>there too.

00:31:07.755 --> 00:31:09.914
<v Speaker 1>Right. Okay. Alright. We'll get rid of that.

00:31:13.034 --> 00:31:14.715
<v Speaker 1>We'll try to at least see the back

00:31:14.715 --> 00:31:16.075
<v Speaker 1>to you at this point.

00:31:16.715 --> 00:31:18.475
<v Speaker 1>If if you're watching the recording, fast forward

00:31:18.475 --> 00:31:19.195
<v Speaker 1>through this part.

00:31:20.960 --> 00:31:23.520
<v Speaker 0>I do appreciate the relative line numbers, though.

00:31:23.520 --> 00:31:24.880
<v Speaker 0>I I I don't think I could quote

00:31:24.880 --> 00:31:26.399
<v Speaker 0>without them anymore either.

00:31:26.720 --> 00:31:28.000
<v Speaker 1>Yeah. Yeah.

00:31:29.120 --> 00:31:31.040
<v Speaker 1>Alright. Here we go. And we'll get rid

00:31:31.040 --> 00:31:32.560
<v Speaker 1>of that. Although, one of the things I

00:31:32.560 --> 00:31:33.919
<v Speaker 1>worry about is

00:31:34.320 --> 00:31:36.400
<v Speaker 1>having the keyword bag

00:31:36.685 --> 00:31:39.645
<v Speaker 1>within a color. I haven't looked, but,

00:31:40.125 --> 00:31:41.885
<v Speaker 1>it's been my experience that

00:31:42.205 --> 00:31:44.525
<v Speaker 1>these, admin code problems,

00:31:45.005 --> 00:31:47.165
<v Speaker 1>haven't, like, tried to throw you off by

00:31:47.165 --> 00:31:49.005
<v Speaker 1>putting in, like, data. That is that was

00:31:49.005 --> 00:31:51.165
<v Speaker 1>weird. It usually it left you to sort

00:31:51.165 --> 00:31:53.210
<v Speaker 1>of deal with the the task task at

00:31:53.210 --> 00:31:54.250
<v Speaker 1>hand. So

00:31:55.210 --> 00:31:57.530
<v Speaker 1>alright. So I feel like we we have

00:31:57.530 --> 00:31:59.450
<v Speaker 1>our rule set encoded.

00:31:59.690 --> 00:32:01.530
<v Speaker 1>So now is

00:32:02.250 --> 00:32:04.010
<v Speaker 1>a matter of traversing it.

00:32:06.135 --> 00:32:08.455
<v Speaker 1>So what I feel like I wanna do

00:32:08.455 --> 00:32:09.335
<v Speaker 1>is

00:32:09.335 --> 00:32:10.215
<v Speaker 1>maybe

00:32:13.495 --> 00:32:14.375
<v Speaker 1>let's

00:32:15.655 --> 00:32:17.015
<v Speaker 1>do something like

00:32:17.735 --> 00:32:19.255
<v Speaker 1>our rule set

00:32:23.690 --> 00:32:25.210
<v Speaker 1>find maybe,

00:32:25.610 --> 00:32:27.450
<v Speaker 1>and we have a string that we're looking

00:32:27.450 --> 00:32:27.929
<v Speaker 1>for.

00:32:29.130 --> 00:32:29.849
<v Speaker 1>And

00:32:32.970 --> 00:32:34.809
<v Speaker 1>oh, so what we're doing is accounting. Right?

00:32:34.809 --> 00:32:36.330
<v Speaker 1>So we don't account.

00:32:36.330 --> 00:32:37.304
<v Speaker 1>So we wanna try

00:32:38.105 --> 00:32:38.904
<v Speaker 1>okay.

00:32:39.225 --> 00:32:40.264
<v Speaker 1>Alright. So

00:32:41.065 --> 00:32:43.705
<v Speaker 1>the impression I get is for every node,

00:32:43.705 --> 00:32:45.945
<v Speaker 1>we wanna see if our target

00:32:46.424 --> 00:32:48.985
<v Speaker 1>is reachable from a particular node.

00:32:50.820 --> 00:32:53.460
<v Speaker 1>So I'm gonna iterate over each node then.

00:32:53.460 --> 00:32:54.500
<v Speaker 1>So for

00:32:56.420 --> 00:32:57.539
<v Speaker 1>let's say,

00:32:57.860 --> 00:33:00.340
<v Speaker 1>n is range over r.

00:33:02.820 --> 00:33:05.465
<v Speaker 1>Let's return zero for that. And

00:33:11.945 --> 00:33:13.705
<v Speaker 1>so now for each node,

00:33:14.905 --> 00:33:18.025
<v Speaker 1>what I wanna do is see if I

00:33:17.280 --> 00:33:19.680
<v Speaker 1>if I could find a node rooted

00:33:19.680 --> 00:33:20.799
<v Speaker 1>at that node.

00:33:21.040 --> 00:33:22.240
<v Speaker 1>And I feel like at this point, I

00:33:22.240 --> 00:33:24.000
<v Speaker 1>need another another function.

00:33:25.200 --> 00:33:27.040
<v Speaker 1>And this is a part that feels recursive.

00:33:27.040 --> 00:33:28.800
<v Speaker 1>So given given a node, what I wanna

00:33:28.800 --> 00:33:29.679
<v Speaker 1>do is walk

00:33:30.720 --> 00:33:31.840
<v Speaker 1>each edge

00:33:33.065 --> 00:33:34.905
<v Speaker 1>and see if I could ultimately

00:33:35.305 --> 00:33:37.784
<v Speaker 1>recursively land at my target.

00:33:39.545 --> 00:33:41.305
<v Speaker 1>And so I think here is where something

00:33:41.305 --> 00:33:42.505
<v Speaker 1>I find

00:33:51.640 --> 00:33:53.800
<v Speaker 1>is important. So what all I wanna know

00:33:53.800 --> 00:33:54.920
<v Speaker 1>is whether or not

00:33:55.800 --> 00:33:57.640
<v Speaker 1>this target is findable,

00:33:59.385 --> 00:33:59.705
<v Speaker 1>root

00:34:00.425 --> 00:34:03.225
<v Speaker 1>rooted from a particular from a particular node.

00:34:04.585 --> 00:34:06.664
<v Speaker 1>So I guess also what I need is

00:34:08.025 --> 00:34:08.585
<v Speaker 1>so

00:34:11.945 --> 00:34:14.105
<v Speaker 1>the first thing I'll do

00:34:13.659 --> 00:34:14.300
<v Speaker 1>is

00:34:19.659 --> 00:34:21.180
<v Speaker 1>well, before we do any of this,

00:34:22.940 --> 00:34:24.380
<v Speaker 1>let's just see what this does.

00:34:29.155 --> 00:34:29.875
<v Speaker 1>Alright.

00:34:30.034 --> 00:34:32.195
<v Speaker 1>So this let's just run

00:34:32.675 --> 00:34:34.675
<v Speaker 1>our our test because I don't wanna get

00:34:34.675 --> 00:34:36.034
<v Speaker 1>too far before I realize I have some,

00:34:36.034 --> 00:34:37.074
<v Speaker 1>like, major, like,

00:34:37.760 --> 00:34:39.839
<v Speaker 1>error or anything like that hiding in there.

00:34:39.839 --> 00:34:41.839
<v Speaker 1>So let's just do, like, a t dot

00:34:41.839 --> 00:34:42.880
<v Speaker 1>log f

00:34:45.599 --> 00:34:47.520
<v Speaker 1>of r

00:34:49.520 --> 00:34:50.079
<v Speaker 1>find.

00:34:55.375 --> 00:34:58.015
<v Speaker 1>So the node we wanna find is our

00:34:58.255 --> 00:35:00.174
<v Speaker 1>both the shiny gold.

00:35:00.174 --> 00:35:01.455
<v Speaker 0>Yeah. Shiny gold.

00:35:01.855 --> 00:35:03.135
<v Speaker 1>And let's see if we can find it

00:35:03.135 --> 00:35:04.095
<v Speaker 1>where we do that.

00:35:04.494 --> 00:35:05.295
<v Speaker 1>Right.

00:35:06.015 --> 00:35:06.415
<v Speaker 1>Okay.

00:35:09.370 --> 00:35:10.730
<v Speaker 1>Alright. So for now, we're just gonna say

00:35:10.730 --> 00:35:12.570
<v Speaker 1>go test run

00:35:12.650 --> 00:35:15.370
<v Speaker 1>all tests or the reverse way. And, of

00:35:15.370 --> 00:35:16.650
<v Speaker 1>course, now I have to you know, the

00:35:16.650 --> 00:35:18.170
<v Speaker 1>the program's completely going up.

00:35:18.410 --> 00:35:19.450
<v Speaker 1>Alright. So

00:35:19.690 --> 00:35:23.055
<v Speaker 1>can I use one type int, type string,

00:35:23.055 --> 00:35:24.335
<v Speaker 1>and field value?

00:35:25.055 --> 00:35:26.975
<v Speaker 0>Do you not have to import log as

00:35:26.975 --> 00:35:29.775
<v Speaker 0>well in your your code or just pump

00:35:29.775 --> 00:35:30.655
<v Speaker 0>to print it?

00:35:31.535 --> 00:35:33.455
<v Speaker 1>So when I save oh, that that's one

00:35:33.455 --> 00:35:36.495
<v Speaker 1>problem. I I I save. I'm running

00:35:36.390 --> 00:35:37.190
<v Speaker 1>GoBIM,

00:35:37.190 --> 00:35:39.270
<v Speaker 1>and that runs Go imports and GoFund and

00:35:39.270 --> 00:35:41.590
<v Speaker 1>all that stuff. And so Oh, nice. Yeah.

00:35:41.990 --> 00:35:44.069
<v Speaker 1>Alright. So I think that was oh, no.

00:35:44.069 --> 00:35:46.470
<v Speaker 1>It wasn't. So rule test by 21. Can

00:35:46.470 --> 00:35:48.789
<v Speaker 1>I use one untyped in as type string?

00:35:48.789 --> 00:35:51.345
<v Speaker 1>So I think I just have, like, the

00:35:51.505 --> 00:35:52.545
<v Speaker 1>the types

00:35:52.785 --> 00:35:55.105
<v Speaker 1>in my thing over yeah. Yeah. So I

00:35:55.105 --> 00:35:56.865
<v Speaker 1>have name first and quantity second. So this

00:35:56.865 --> 00:35:58.545
<v Speaker 1>should be quantity first name second.

00:35:59.265 --> 00:36:01.505
<v Speaker 1>Yeah. Of course. That's great. Alright. So no

00:36:01.505 --> 00:36:04.705
<v Speaker 1>major no major problems to to overcome at

00:36:04.705 --> 00:36:06.100
<v Speaker 1>this point. Alright.

00:36:06.500 --> 00:36:07.540
<v Speaker 1>So

00:36:08.340 --> 00:36:09.940
<v Speaker 1>how do you say we how do you

00:36:09.940 --> 00:36:11.700
<v Speaker 1>think we should handle

00:36:13.060 --> 00:36:14.740
<v Speaker 1>this part? Right? So we have our we

00:36:14.740 --> 00:36:17.140
<v Speaker 1>have our graph properly encoded. We have our

00:36:17.140 --> 00:36:18.020
<v Speaker 1>rule set

00:36:18.580 --> 00:36:21.415
<v Speaker 1>properly encoded. So how do we interpret

00:36:22.454 --> 00:36:25.255
<v Speaker 1>in a way that we we find

00:36:28.295 --> 00:36:30.615
<v Speaker 1>find our kind of, like, target note?

00:36:31.015 --> 00:36:31.734
<v Speaker 1>So

00:36:31.815 --> 00:36:32.615
<v Speaker 1>I think

00:36:32.855 --> 00:36:33.895
<v Speaker 1>and I'm just dripping here.

00:36:36.860 --> 00:36:38.780
<v Speaker 1>What I'd like to do is I think

00:36:38.940 --> 00:36:41.740
<v Speaker 1>so okay. So find should be a recursive

00:36:41.740 --> 00:36:42.380
<v Speaker 1>function.

00:36:43.020 --> 00:36:44.540
<v Speaker 1>I think one of the times that we

00:36:44.540 --> 00:36:46.060
<v Speaker 1>bail out is

00:36:46.700 --> 00:36:47.900
<v Speaker 1>if, for example,

00:36:51.955 --> 00:36:54.755
<v Speaker 1>let's say our rules

00:36:56.035 --> 00:36:57.635
<v Speaker 1>and whether or it exists

00:36:58.275 --> 00:36:58.995
<v Speaker 1>is

00:37:00.675 --> 00:37:01.475
<v Speaker 1>basically,

00:37:01.475 --> 00:37:04.330
<v Speaker 1>let's look to see if our current route

00:37:04.410 --> 00:37:06.570
<v Speaker 1>is even in our in our

00:37:07.770 --> 00:37:08.570
<v Speaker 1>map.

00:37:08.730 --> 00:37:11.690
<v Speaker 1>So you could say if rules exist,

00:37:13.530 --> 00:37:14.330
<v Speaker 1>route.

00:37:14.810 --> 00:37:16.410
<v Speaker 1>And so if not exist

00:37:17.450 --> 00:37:18.410
<v Speaker 1>so that is to say,

00:37:19.715 --> 00:37:22.115
<v Speaker 1>if we're looking for, for example

00:37:23.075 --> 00:37:24.835
<v Speaker 1>oh, here. Shiny gold,

00:37:25.555 --> 00:37:28.115
<v Speaker 1>yeah, rooted at light red. If light red

00:37:28.115 --> 00:37:30.115
<v Speaker 1>didn't exist, we wanna bail out right away.

00:37:30.115 --> 00:37:32.940
<v Speaker 1>Yep. I I think. Right? So that exists.

00:37:32.940 --> 00:37:34.300
<v Speaker 1>Return false.

00:37:34.700 --> 00:37:35.420
<v Speaker 1>K.

00:37:35.580 --> 00:37:36.300
<v Speaker 1>Alright.

00:37:37.100 --> 00:37:39.500
<v Speaker 1>Okay. So now the next thing is to

00:37:39.500 --> 00:37:40.540
<v Speaker 1>see if

00:37:43.100 --> 00:37:44.380
<v Speaker 1>to see if

00:37:45.260 --> 00:37:46.940
<v Speaker 1>our rule exists

00:37:47.395 --> 00:37:48.195
<v Speaker 1>within

00:37:49.075 --> 00:37:51.715
<v Speaker 1>the the nodes that we share.

00:37:52.755 --> 00:37:53.635
<v Speaker 1>So

00:37:53.635 --> 00:37:55.795
<v Speaker 1>how would we how would we do that?

00:37:56.675 --> 00:37:58.115
<v Speaker 1>So okay. I think a good way to

00:37:58.115 --> 00:38:00.835
<v Speaker 1>do that what I wanna ask is

00:38:01.635 --> 00:38:02.755
<v Speaker 1>if

00:38:07.309 --> 00:38:08.270
<v Speaker 1>rules

00:38:08.510 --> 00:38:09.390
<v Speaker 1>contains

00:38:11.470 --> 00:38:12.270
<v Speaker 1>s.

00:38:14.270 --> 00:38:17.309
<v Speaker 1>Right? So what I wanna see is if

00:38:19.115 --> 00:38:21.035
<v Speaker 1>my target, you know, s

00:38:21.595 --> 00:38:22.395
<v Speaker 1>is

00:38:22.395 --> 00:38:23.195
<v Speaker 1>within

00:38:23.275 --> 00:38:25.435
<v Speaker 1>the sub slide within the slice

00:38:25.595 --> 00:38:27.835
<v Speaker 1>that that that

00:38:27.835 --> 00:38:29.355
<v Speaker 1>we've that we've now looked up.

00:38:35.410 --> 00:38:37.490
<v Speaker 0>Then we just return true. Right?

00:38:38.770 --> 00:38:39.410
<v Speaker 0>Well

00:38:40.369 --> 00:38:42.290
<v Speaker 0>And if it doesn't, then we would

00:38:42.609 --> 00:38:44.770
<v Speaker 0>we would then search on

00:38:45.974 --> 00:38:46.775
<v Speaker 0>the

00:38:47.095 --> 00:38:49.335
<v Speaker 0>the notes that it does have recursively.

00:38:49.974 --> 00:38:52.375
<v Speaker 1>Well right. So if it if it doesn't,

00:38:52.375 --> 00:38:54.055
<v Speaker 1>then what we probably wanna do is search

00:38:54.055 --> 00:38:56.615
<v Speaker 1>on the note. So, you know so yeah.

00:38:56.615 --> 00:38:57.815
<v Speaker 1>Well, if it

00:38:58.310 --> 00:39:00.630
<v Speaker 1>I think what we wanna do is

00:39:02.070 --> 00:39:03.590
<v Speaker 1>iterate over this list.

00:39:04.390 --> 00:39:05.510
<v Speaker 1>If it's in there,

00:39:05.830 --> 00:39:08.630
<v Speaker 1>then we return true. If it isn't in

00:39:08.630 --> 00:39:10.070
<v Speaker 1>there, then we run find

00:39:10.795 --> 00:39:11.755
<v Speaker 1>on each

00:39:11.995 --> 00:39:13.515
<v Speaker 1>one that that

00:39:14.315 --> 00:39:15.995
<v Speaker 1>that that that in in in which it

00:39:15.995 --> 00:39:18.075
<v Speaker 1>doesn't exist. In fact, at this point, don't

00:39:18.075 --> 00:39:19.515
<v Speaker 1>know, but we may wanna run it on

00:39:19.515 --> 00:39:20.155
<v Speaker 1>everyone

00:39:20.635 --> 00:39:22.475
<v Speaker 1>regardless because there may be

00:39:23.450 --> 00:39:25.450
<v Speaker 1>anyway, let's let's let's let's get there. Let's

00:39:25.450 --> 00:39:28.490
<v Speaker 1>get there. So alright. So what I'm what

00:39:28.490 --> 00:39:31.210
<v Speaker 1>I'm asking now is if the rules contain

00:39:31.289 --> 00:39:32.330
<v Speaker 1>my target,

00:39:32.809 --> 00:39:33.049
<v Speaker 1>but

00:39:36.995 --> 00:39:38.355
<v Speaker 1>I don't have Do have do we have

00:39:38.355 --> 00:39:40.675
<v Speaker 0>to implement the contains logic? Because would that

00:39:40.675 --> 00:39:41.955
<v Speaker 0>work on our structure? Correct.

00:39:42.835 --> 00:39:45.075
<v Speaker 1>So we what I'm gonna do is actually

00:39:45.075 --> 00:39:47.155
<v Speaker 1>implement that now. So in the lower right

00:39:47.155 --> 00:39:48.195
<v Speaker 1>hand quadrant,

00:39:48.195 --> 00:39:50.035
<v Speaker 1>we're gonna say, you know, funk

00:39:50.589 --> 00:39:52.030
<v Speaker 1>r rules

00:39:52.030 --> 00:39:53.070
<v Speaker 1>contains

00:39:54.030 --> 00:39:56.510
<v Speaker 1>s string, and then we'll try to boop.

00:39:57.710 --> 00:40:00.190
<v Speaker 1>And what we'll do is we'll iterate over

00:40:00.190 --> 00:40:01.230
<v Speaker 1>r. So

00:40:04.175 --> 00:40:05.855
<v Speaker 1>let's say the r

00:40:06.735 --> 00:40:07.535
<v Speaker 1>oops.

00:40:08.095 --> 00:40:10.495
<v Speaker 1>Range of r. And so if

00:40:11.935 --> 00:40:13.455
<v Speaker 1>v equals s,

00:40:17.980 --> 00:40:19.420
<v Speaker 1>then return true.

00:40:19.660 --> 00:40:20.380
<v Speaker 1>Otherwise,

00:40:20.859 --> 00:40:22.220
<v Speaker 1>return false.

00:40:25.099 --> 00:40:27.660
<v Speaker 1>Okay. So let's see what that looks like

00:40:28.275 --> 00:40:29.234
<v Speaker 1>so far.

00:40:31.635 --> 00:40:33.715
<v Speaker 1>So if rules contains

00:40:34.035 --> 00:40:34.755
<v Speaker 1>that,

00:40:36.194 --> 00:40:37.635
<v Speaker 1>then we return

00:40:38.595 --> 00:40:38.914
<v Speaker 1>true.

00:40:45.750 --> 00:40:47.990
<v Speaker 1>And so for each of these so for

00:40:47.990 --> 00:40:49.990
<v Speaker 1>each item in our rule set,

00:40:51.190 --> 00:40:53.510
<v Speaker 1>we could say count equals zero.

00:40:55.994 --> 00:40:57.515
<v Speaker 1>And then they if

00:40:59.515 --> 00:41:00.395
<v Speaker 1>r

00:41:01.515 --> 00:41:02.234
<v Speaker 1>find

00:41:02.954 --> 00:41:04.075
<v Speaker 1>x

00:41:07.290 --> 00:41:08.330
<v Speaker 1>rooted at

00:41:09.850 --> 00:41:10.730
<v Speaker 1>n.

00:41:11.450 --> 00:41:12.170
<v Speaker 1>So

00:41:13.850 --> 00:41:16.570
<v Speaker 1>if I could find this node rooted at

00:41:16.570 --> 00:41:17.050
<v Speaker 1>n,

00:41:22.165 --> 00:41:23.765
<v Speaker 1>open that account. Oops.

00:41:24.244 --> 00:41:26.245
<v Speaker 1>We'll see everything in there.

00:41:27.205 --> 00:41:28.645
<v Speaker 1>In fact, what I think the way I'd

00:41:28.645 --> 00:41:30.565
<v Speaker 1>like to structure this is if I can't

00:41:30.565 --> 00:41:32.165
<v Speaker 1>find it, then continue.

00:41:34.480 --> 00:41:37.040
<v Speaker 1>And that's that's just like a kind of

00:41:37.040 --> 00:41:39.200
<v Speaker 1>personal thing. I like to think of these

00:41:39.600 --> 00:41:41.120
<v Speaker 1>like, I like to think of this as

00:41:41.120 --> 00:41:43.520
<v Speaker 1>sort of throwing out state until

00:41:43.520 --> 00:41:45.120
<v Speaker 1>I would've went down to the state I

00:41:45.120 --> 00:41:46.160
<v Speaker 1>want here.

00:41:46.720 --> 00:41:47.680
<v Speaker 1>And at that point,

00:41:48.305 --> 00:41:50.785
<v Speaker 1>I I increment increment count. Right?

00:41:52.065 --> 00:41:53.185
<v Speaker 1>And

00:41:53.185 --> 00:41:55.105
<v Speaker 1>then we return count.

00:41:58.865 --> 00:42:00.545
<v Speaker 1>Okay. So in our test, let's see what

00:42:00.545 --> 00:42:01.425
<v Speaker 1>that looks like.

00:42:01.665 --> 00:42:02.705
<v Speaker 1>So

00:42:03.069 --> 00:42:04.350
<v Speaker 1>now we're gonna

00:42:06.829 --> 00:42:07.710
<v Speaker 1>count

00:42:07.950 --> 00:42:08.990
<v Speaker 1>shiny gold.

00:42:11.549 --> 00:42:13.310
<v Speaker 1>And what that'll do is

00:42:14.510 --> 00:42:16.670
<v Speaker 1>just print what we're doing here. So we'll

00:42:16.670 --> 00:42:17.789
<v Speaker 1>log print f.

00:42:19.175 --> 00:42:21.015
<v Speaker 1>Searching for

00:42:27.575 --> 00:42:28.855
<v Speaker 1>for value

00:42:29.095 --> 00:42:29.815
<v Speaker 1>in

00:42:31.015 --> 00:42:33.655
<v Speaker 1>our

00:42:33.090 --> 00:42:36.130
<v Speaker 1>our rule set in our in our rules.

00:42:36.690 --> 00:42:37.410
<v Speaker 1>Oops.

00:42:40.610 --> 00:42:42.850
<v Speaker 1>Sorry. I'm having notifications pop up. I don't

00:42:42.850 --> 00:42:44.050
<v Speaker 1>know if you see on the screen, but

00:42:44.050 --> 00:42:45.730
<v Speaker 1>please please ignore it. So

00:42:49.305 --> 00:42:50.985
<v Speaker 1>here, what I'll do is I'll print n

00:42:51.305 --> 00:42:52.505
<v Speaker 1>and r.

00:42:54.025 --> 00:42:55.865
<v Speaker 1>Alright. It's gonna run my test.

00:42:56.345 --> 00:42:58.425
<v Speaker 1>Oops. I actually kinda use n type rules

00:42:58.425 --> 00:42:59.545
<v Speaker 1>as type string and argument.

00:43:03.119 --> 00:43:05.119
<v Speaker 1>Oh, I'm sorry. What I mean is s

00:43:06.720 --> 00:43:07.520
<v Speaker 1>in

00:43:07.599 --> 00:43:08.320
<v Speaker 1>n.

00:43:09.200 --> 00:43:11.119
<v Speaker 0>Yeah. I think the next lane is wrong

00:43:11.119 --> 00:43:11.760
<v Speaker 0>too.

00:43:14.240 --> 00:43:16.000
<v Speaker 0>That n there. Yeah. Because I think what

00:43:16.000 --> 00:43:18.160
<v Speaker 0>you pass into find is the

00:43:19.164 --> 00:43:21.164
<v Speaker 0>let's take a look at that. Yeah. It's

00:43:21.164 --> 00:43:22.684
<v Speaker 0>a string, and we're passing in an integer

00:43:22.684 --> 00:43:24.525
<v Speaker 0>right now, I think. Okay.

00:43:26.684 --> 00:43:28.605
<v Speaker 1>I'm gonna go outside. Hold on one sec.

00:43:28.605 --> 00:43:30.525
<v Speaker 1>Yes, sweetie. I'm gonna go outside. Yeah. That's

00:43:30.525 --> 00:43:30.765
<v Speaker 1>cool.

00:43:32.840 --> 00:43:34.040
<v Speaker 1>Joys of

00:43:34.600 --> 00:43:35.960
<v Speaker 1>at home schooling.

00:43:37.160 --> 00:43:37.880
<v Speaker 1>So

00:43:39.240 --> 00:43:40.680
<v Speaker 1>where was I? So

00:43:41.480 --> 00:43:43.480
<v Speaker 1>we wanna find

00:43:44.295 --> 00:43:45.415
<v Speaker 1>our target

00:43:47.095 --> 00:43:48.295
<v Speaker 1>rooted at

00:43:51.655 --> 00:43:52.535
<v Speaker 1>n.

00:43:53.655 --> 00:43:54.855
<v Speaker 1>And so

00:44:00.820 --> 00:44:03.140
<v Speaker 1>I'm sorry. So r is a rule set,

00:44:03.460 --> 00:44:04.340
<v Speaker 1>which is

00:44:05.860 --> 00:44:06.500
<v Speaker 1>this thing.

00:44:11.994 --> 00:44:13.355
<v Speaker 1>And so n

00:44:16.475 --> 00:44:17.675
<v Speaker 0>Is n a map?

00:44:19.355 --> 00:44:21.835
<v Speaker 1>Oh, yeah. So I'm sorry. Excuse me. Excuse

00:44:21.755 --> 00:44:22.155
<v Speaker 1>Yeah.

00:44:22.635 --> 00:44:23.035
<v Speaker 1>So

00:44:24.315 --> 00:44:25.755
<v Speaker 1>our root

00:44:27.060 --> 00:44:28.500
<v Speaker 1>and our rules

00:44:29.060 --> 00:44:29.780
<v Speaker 1>poof.

00:44:30.180 --> 00:44:32.420
<v Speaker 1>Alright. So we iterate iterate over our map.

00:44:32.420 --> 00:44:34.420
<v Speaker 1>We're gonna extract the root

00:44:35.060 --> 00:44:37.140
<v Speaker 1>or root node that we wanna start our

00:44:37.140 --> 00:44:37.700
<v Speaker 1>search

00:44:38.020 --> 00:44:40.820
<v Speaker 1>and then the subsequent rules associated

00:44:40.820 --> 00:44:41.300
<v Speaker 1>with that.

00:44:42.145 --> 00:44:43.265
<v Speaker 1>And in our

00:44:47.345 --> 00:44:48.145
<v Speaker 1>nope.

00:44:48.225 --> 00:44:48.945
<v Speaker 1>Nope.

00:44:51.025 --> 00:44:52.545
<v Speaker 1>I'm sorry. I've kinda lost my place here.

00:44:52.545 --> 00:44:54.385
<v Speaker 1>Just give me one sec of I'll do

00:44:54.385 --> 00:44:55.425
<v Speaker 0>your tip. Alright.

00:44:56.305 --> 00:44:57.905
<v Speaker 1>So

00:44:57.200 --> 00:44:59.440
<v Speaker 1>we wanna count. So count

00:45:00.960 --> 00:45:02.560
<v Speaker 1>involves finding.

00:45:03.120 --> 00:45:04.560
<v Speaker 1>So for each

00:45:11.225 --> 00:45:12.745
<v Speaker 1>rule. We wanna

00:45:16.665 --> 00:45:17.545
<v Speaker 1>find

00:45:22.585 --> 00:45:24.505
<v Speaker 1>so we wanna find yeah. No. This is

00:45:24.505 --> 00:45:26.025
<v Speaker 1>it. So, yeah, we wanna find s.

00:45:28.580 --> 00:45:31.060
<v Speaker 1>I'll read that and okay. So Okay. Can

00:45:31.060 --> 00:45:32.260
<v Speaker 0>I ask a question? Because,

00:45:32.660 --> 00:45:34.180
<v Speaker 0>I mean, I've I've got something in my

00:45:34.180 --> 00:45:35.540
<v Speaker 0>head that's kinda confusing me, and I'm hoping

00:45:35.540 --> 00:45:37.780
<v Speaker 0>you can explain it. So Okay. When we

00:45:37.780 --> 00:45:39.780
<v Speaker 0>do the range on r, right, we're getting

00:45:39.780 --> 00:45:41.975
<v Speaker 0>two parameters back. One is the key, which

00:45:41.975 --> 00:45:43.895
<v Speaker 0>is light red, and then the n is

00:45:43.895 --> 00:45:46.215
<v Speaker 0>the rules on this right, which is a

00:45:46.215 --> 00:45:49.175
<v Speaker 0>map of tuple. Was that right? Yeah. Yeah.

00:45:49.175 --> 00:45:50.375
<v Speaker 1>So this is where I think this is

00:45:50.375 --> 00:45:52.135
<v Speaker 1>where I was confusing myself. So what I

00:45:52.135 --> 00:45:54.055
<v Speaker 1>want is the

00:45:55.650 --> 00:45:57.329
<v Speaker 1>what I want is the name. I want

00:45:57.329 --> 00:45:59.410
<v Speaker 1>I want the name of the the node

00:45:59.410 --> 00:46:00.690
<v Speaker 1>here. So

00:46:00.849 --> 00:46:02.850
<v Speaker 1>I wanna find s

00:46:03.010 --> 00:46:03.890
<v Speaker 1>sub n.

00:46:04.530 --> 00:46:05.970
<v Speaker 1>I think that's what I want.

00:46:06.690 --> 00:46:09.490
<v Speaker 1>But, also, same rules. Right? So

00:46:10.455 --> 00:46:12.695
<v Speaker 1>let's let's not do that here. Right. Let's

00:46:12.695 --> 00:46:14.455
<v Speaker 1>not do that here. K.

00:46:15.255 --> 00:46:16.695
<v Speaker 1>So let's just see what we get.

00:46:17.335 --> 00:46:19.815
<v Speaker 1>I'm gonna find it strings. Let's say

00:46:20.775 --> 00:46:21.575
<v Speaker 1>up.

00:46:21.815 --> 00:46:22.455
<v Speaker 1>Told string.

00:46:28.240 --> 00:46:29.040
<v Speaker 1>Roles

00:46:29.040 --> 00:46:30.320
<v Speaker 1>line 20.

00:46:32.079 --> 00:46:33.600
<v Speaker 1>What am doing here? So

00:46:35.040 --> 00:46:36.160
<v Speaker 1>s dot

00:46:37.520 --> 00:46:38.079
<v Speaker 1>name.

00:46:40.715 --> 00:46:41.515
<v Speaker 1>Yep.

00:46:45.035 --> 00:46:46.795
<v Speaker 1>Oops. I'm sorry.

00:46:49.515 --> 00:46:50.395
<v Speaker 1>V dot name.

00:46:53.190 --> 00:46:54.470
<v Speaker 1>Alright. So

00:46:55.589 --> 00:46:57.510
<v Speaker 1>what we've done now is

00:46:57.750 --> 00:46:59.829
<v Speaker 1>so for each of these, let's let's let's

00:46:59.829 --> 00:47:02.390
<v Speaker 1>print out some, like, output to kinda help

00:47:02.390 --> 00:47:04.390
<v Speaker 1>us understand what we're doing what we're doing

00:47:04.390 --> 00:47:05.109
<v Speaker 1>here. So

00:47:05.555 --> 00:47:08.275
<v Speaker 1>let's say so I'm kind of searching

00:47:08.275 --> 00:47:09.475
<v Speaker 1>for

00:47:16.835 --> 00:47:18.755
<v Speaker 1>some target, which is

00:47:19.155 --> 00:47:21.635
<v Speaker 1>RS

00:47:20.580 --> 00:47:22.020
<v Speaker 1>rooted at

00:47:23.380 --> 00:47:26.740
<v Speaker 1>some other strength. So our target is s.

00:47:27.140 --> 00:47:29.060
<v Speaker 1>The name that we're we're

00:47:29.940 --> 00:47:31.940
<v Speaker 1>the name of the root node that we're

00:47:31.940 --> 00:47:34.345
<v Speaker 1>gonna start the traversal at is in.

00:47:34.825 --> 00:47:36.664
<v Speaker 1>And so what this should what we should

00:47:36.664 --> 00:47:39.224
<v Speaker 1>see is that we should have output saying

00:47:39.224 --> 00:47:40.345
<v Speaker 1>searching for

00:47:41.224 --> 00:47:44.025
<v Speaker 1>shiny gold rooted at light red. Searching for

00:47:44.025 --> 00:47:46.505
<v Speaker 1>shiny gold rooted at dark orange, hopefully.

00:47:48.940 --> 00:47:49.820
<v Speaker 0>Okay.

00:47:50.140 --> 00:47:50.860
<v Speaker 0>Alright.

00:47:52.460 --> 00:47:54.940
<v Speaker 1>So now the actual traversal

00:47:54.940 --> 00:47:57.020
<v Speaker 1>comes into play. So here's where we actually

00:47:57.020 --> 00:47:58.140
<v Speaker 1>do the find.

00:48:01.135 --> 00:48:02.575
<v Speaker 1>And let's see then,

00:48:03.295 --> 00:48:04.655
<v Speaker 1>like, log for that.

00:48:06.815 --> 00:48:10.734
<v Speaker 1>Percent q not found at

00:48:11.055 --> 00:48:13.055
<v Speaker 1>percent q. So that's n.

00:48:13.770 --> 00:48:15.050
<v Speaker 1>And then otherwise,

00:48:15.050 --> 00:48:16.170
<v Speaker 1>percent q

00:48:16.410 --> 00:48:17.770
<v Speaker 1>was found.

00:48:19.770 --> 00:48:20.810
<v Speaker 1>Great. So,

00:48:21.290 --> 00:48:23.770
<v Speaker 1>of course, shiny gold was found because I

00:48:23.770 --> 00:48:24.410
<v Speaker 1>think

00:48:24.730 --> 00:48:25.850
<v Speaker 1>Viberplum

00:48:26.010 --> 00:48:27.930
<v Speaker 1>oh, no. Yeah. So Viberplum

00:48:28.725 --> 00:48:29.685
<v Speaker 1>Oh, wait.

00:48:31.365 --> 00:48:34.085
<v Speaker 1>Searching for shiny gold. We'll do that. Light

00:48:34.085 --> 00:48:36.805
<v Speaker 1>red. Shiny gold was found at Light Red.

00:48:38.245 --> 00:48:41.205
<v Speaker 1>Why was that? Have we continued our recursion?

00:48:42.230 --> 00:48:42.950
<v Speaker 1>No.

00:48:43.109 --> 00:48:44.869
<v Speaker 1>Oh, no. No. So I'm just I'm just

00:48:45.349 --> 00:48:48.869
<v Speaker 1>I'm returning I'm returning true. So Oh. Default.

00:48:52.069 --> 00:48:53.349
<v Speaker 1>Let's do that. Great.

00:48:55.035 --> 00:48:58.795
<v Speaker 1>Great. So yes. Great. So not found

00:48:59.355 --> 00:49:01.914
<v Speaker 1>not found not found. But shiny gold was

00:49:01.914 --> 00:49:04.714
<v Speaker 1>found rooted at muted muted yellow. Right? And

00:49:04.714 --> 00:49:06.315
<v Speaker 1>so why was that? Because

00:49:06.635 --> 00:49:10.050
<v Speaker 1>muted yellow actually contains shiny gold. Okay. I

00:49:10.050 --> 00:49:11.730
<v Speaker 1>feel like we're getting somewhere. Are we good

00:49:11.730 --> 00:49:15.570
<v Speaker 1>so far? We are. Okay. Alright. Okay. Alright.

00:49:15.810 --> 00:49:17.170
<v Speaker 1>So what should we do

00:49:18.370 --> 00:49:19.250
<v Speaker 1>if

00:49:19.410 --> 00:49:21.490
<v Speaker 1>these rules don't contain

00:49:23.515 --> 00:49:25.675
<v Speaker 1>contain my value. I think what we should

00:49:25.675 --> 00:49:27.915
<v Speaker 1>do is iterate over

00:49:29.995 --> 00:49:32.315
<v Speaker 1>my subsequent rules. So for

00:49:32.795 --> 00:49:35.275
<v Speaker 1>a rule of is range over

00:49:36.180 --> 00:49:39.060
<v Speaker 1>rules. In fact, I just say rule.

00:49:40.819 --> 00:49:41.940
<v Speaker 1>And so now

00:49:43.060 --> 00:49:45.619
<v Speaker 1>each one of these nodes becomes the root

00:49:45.619 --> 00:49:47.460
<v Speaker 1>at which we wanna begin our search. Right?

00:49:47.460 --> 00:49:49.025
<v Speaker 1>So if we

00:49:50.225 --> 00:49:52.065
<v Speaker 1>can't find it so let's say we start

00:49:52.065 --> 00:49:53.025
<v Speaker 1>with LightRed,

00:49:53.105 --> 00:49:54.385
<v Speaker 1>and we can't find it

00:49:54.705 --> 00:49:57.985
<v Speaker 1>within LightRed. Right? So bright white isn't part

00:49:57.985 --> 00:49:59.905
<v Speaker 1>of its rule set nor is it I

00:49:59.905 --> 00:50:02.865
<v Speaker 1>mean I'm sorry. So, LightRed doesn't contain it

00:50:02.865 --> 00:50:05.000
<v Speaker 1>as part of its as part of its

00:50:05.000 --> 00:50:06.839
<v Speaker 1>rule set. So what I wanna do is

00:50:06.839 --> 00:50:08.440
<v Speaker 1>see if BrightWrite

00:50:08.440 --> 00:50:10.760
<v Speaker 1>has it as part of its rule set,

00:50:10.760 --> 00:50:12.920
<v Speaker 1>which is here. So it means now I

00:50:12.920 --> 00:50:14.360
<v Speaker 1>wanna call find

00:50:14.760 --> 00:50:16.280
<v Speaker 1>rooted at BrightWrite,

00:50:16.280 --> 00:50:18.135
<v Speaker 1>but for the same same target. Are we

00:50:18.375 --> 00:50:19.735
<v Speaker 1>is that reasonable?

00:50:19.815 --> 00:50:22.215
<v Speaker 0>Yeah. That makes sense. K.

00:50:22.615 --> 00:50:23.495
<v Speaker 1>So

00:50:24.135 --> 00:50:26.775
<v Speaker 1>I think what we wanna say is if

00:50:29.015 --> 00:50:30.295
<v Speaker 1>our find

00:50:30.535 --> 00:50:30.855
<v Speaker 1>oops.

00:50:33.569 --> 00:50:35.250
<v Speaker 1>Our target, which is s,

00:50:35.410 --> 00:50:36.450
<v Speaker 1>rooted at

00:50:36.930 --> 00:50:37.970
<v Speaker 1>a rule

00:50:38.130 --> 00:50:38.930
<v Speaker 1>name.

00:50:43.809 --> 00:50:46.210
<v Speaker 1>If we found it, return true.

00:50:48.494 --> 00:50:50.095
<v Speaker 1>Otherwise, just keep iterating.

00:50:54.655 --> 00:50:55.695
<v Speaker 1>And I think

00:50:56.575 --> 00:50:57.454
<v Speaker 0>That's your part.

00:51:02.200 --> 00:51:05.240
<v Speaker 1>Okay. So what we have look at that.

00:51:05.240 --> 00:51:07.720
<v Speaker 1>Alright. So what we have here is

00:51:09.160 --> 00:51:10.920
<v Speaker 1>we search for tiny gold, we did a

00:51:10.920 --> 00:51:13.320
<v Speaker 1>bright white. I'm sorry. Shiny gold, we did

00:51:13.320 --> 00:51:14.920
<v Speaker 1>a bright white. Shiny gold

00:51:15.234 --> 00:51:18.115
<v Speaker 1>was found at bright white. So presumably,

00:51:18.115 --> 00:51:19.395
<v Speaker 1>that that returned true.

00:51:20.035 --> 00:51:22.275
<v Speaker 1>So now we're searching for shiny gold rooted

00:51:22.275 --> 00:51:23.395
<v Speaker 1>at dotted black.

00:51:23.875 --> 00:51:25.955
<v Speaker 1>Shiny shiny gold was not found rooted at

00:51:25.955 --> 00:51:28.530
<v Speaker 1>dotted black. So now we're looking for shy

00:51:28.370 --> 00:51:28.930
<v Speaker 1>shiny

00:51:29.490 --> 00:51:31.970
<v Speaker 1>gold rooted at fiber plum.

00:51:32.530 --> 00:51:33.730
<v Speaker 1>It was not found.

00:51:37.250 --> 00:51:39.570
<v Speaker 1>So then we're searching for well, let's I

00:51:39.570 --> 00:51:41.490
<v Speaker 1>think we need to, like, improve our output

00:51:41.490 --> 00:51:41.730
<v Speaker 1>here.

00:51:42.915 --> 00:51:46.435
<v Speaker 1>So let's kinda log what we're doing. So

00:52:00.710 --> 00:52:02.549
<v Speaker 1>Let's see. How can we do this?

00:52:07.685 --> 00:52:09.125
<v Speaker 1>So first thing we do is we check

00:52:09.125 --> 00:52:11.605
<v Speaker 1>to see if that that node even exists.

00:52:11.605 --> 00:52:13.685
<v Speaker 1>If it doesn't exist, return false.

00:52:13.765 --> 00:52:15.765
<v Speaker 1>Then we check to see if our target

00:52:15.765 --> 00:52:17.685
<v Speaker 1>is contained in that rule set.

00:52:17.845 --> 00:52:19.925
<v Speaker 1>If it is, then good. We return fall

00:52:20.085 --> 00:52:20.565
<v Speaker 1>true.

00:52:21.090 --> 00:52:21.890
<v Speaker 1>Otherwise,

00:52:22.370 --> 00:52:23.410
<v Speaker 1>let's say

00:52:26.770 --> 00:52:28.690
<v Speaker 1>the map find

00:52:33.090 --> 00:52:33.650
<v Speaker 1>within

00:52:34.615 --> 00:52:36.135
<v Speaker 1>and let's just print the map at this

00:52:36.135 --> 00:52:38.375
<v Speaker 1>point. I mean, the the the the size.

00:52:39.575 --> 00:52:40.855
<v Speaker 1>So s

00:52:41.335 --> 00:52:42.295
<v Speaker 1>rules.

00:52:43.895 --> 00:52:44.135
<v Speaker 1>So

00:52:51.340 --> 00:52:53.660
<v Speaker 1>I think I think that might be more

00:52:53.660 --> 00:52:56.540
<v Speaker 1>informative. Okay. So let's scroll back a little

00:52:56.540 --> 00:52:58.780
<v Speaker 1>bit. Alright. So searching for shiny gold, we're

00:52:58.780 --> 00:53:01.340
<v Speaker 1>doing dark orange. Cannot find any shiny gold

00:53:01.340 --> 00:53:02.220
<v Speaker 1>within

00:53:02.625 --> 00:53:04.385
<v Speaker 1>bright white, muted yellow.

00:53:04.785 --> 00:53:05.665
<v Speaker 1>So now

00:53:07.505 --> 00:53:08.945
<v Speaker 1>we'll oh, I see.

00:53:12.705 --> 00:53:15.025
<v Speaker 1>I feel like we're missing something here. So

00:53:15.980 --> 00:53:18.619
<v Speaker 1>we could not find shiny gold within

00:53:18.780 --> 00:53:19.820
<v Speaker 1>this slice.

00:53:20.299 --> 00:53:21.900
<v Speaker 1>What I think we did next is we

00:53:21.900 --> 00:53:24.700
<v Speaker 1>searched for shiny gold within either bright white

00:53:24.700 --> 00:53:26.140
<v Speaker 1>or muted yellow,

00:53:27.099 --> 00:53:29.180
<v Speaker 1>but I don't see those

00:53:34.095 --> 00:53:36.095
<v Speaker 1>I don't see that being put in.

00:53:36.974 --> 00:53:38.494
<v Speaker 1>But we can confirm,

00:53:38.815 --> 00:53:39.695
<v Speaker 1>I think,

00:53:39.934 --> 00:53:41.375
<v Speaker 1>that muted yellow

00:53:41.810 --> 00:53:44.530
<v Speaker 1>does contain shiny gold. Oh, I see. We're

00:53:44.530 --> 00:53:45.970
<v Speaker 1>just not I see. We're not we're not

00:53:45.970 --> 00:53:46.930
<v Speaker 1>printing anything

00:53:47.090 --> 00:53:49.810
<v Speaker 1>before we actually do that search.

00:53:50.290 --> 00:53:50.930
<v Speaker 1>So

00:53:53.744 --> 00:53:55.185
<v Speaker 1>yeah. Here we go.

00:53:58.865 --> 00:54:00.385
<v Speaker 1>Searching for

00:54:00.944 --> 00:54:02.545
<v Speaker 1>queue within

00:54:04.065 --> 00:54:05.345
<v Speaker 1>RV.

00:54:07.345 --> 00:54:07.984
<v Speaker 1>So

00:54:08.305 --> 00:54:08.944
<v Speaker 1>key

00:54:09.309 --> 00:54:10.270
<v Speaker 1>rules.

00:54:11.789 --> 00:54:14.430
<v Speaker 1>Yeah. I think that'll give us more data.

00:54:15.390 --> 00:54:17.789
<v Speaker 1>Alright. So searching for shiny gold, rooted at

00:54:17.789 --> 00:54:20.109
<v Speaker 1>bright white. So that's at a rule set

00:54:20.109 --> 00:54:22.670
<v Speaker 1>level. Now for a particular rule, we're saying

00:54:22.670 --> 00:54:24.670
<v Speaker 1>searching for shiny gold within

00:54:25.535 --> 00:54:28.255
<v Speaker 1>quantity one shiny gold. Of course, it found

00:54:28.255 --> 00:54:29.935
<v Speaker 1>shiny gold. It's gonna find itself. We're gonna

00:54:29.935 --> 00:54:31.935
<v Speaker 1>have to fix that. Alright. Now we're also

00:54:31.935 --> 00:54:33.215
<v Speaker 1>searching for shiny gold.

00:54:33.535 --> 00:54:34.015
<v Speaker 1>Oh,

00:54:36.015 --> 00:54:37.615
<v Speaker 1>search for shiny gold. We're doing a bright

00:54:37.615 --> 00:54:37.855
<v Speaker 1>white.

00:54:39.309 --> 00:54:40.670
<v Speaker 0>Yeah. I think that's fine.

00:54:41.710 --> 00:54:44.510
<v Speaker 1>Okay. I I'm feeling a little bit of,

00:54:44.750 --> 00:54:47.710
<v Speaker 1>like, live coding anxiety, so I'm I'm drawing

00:54:47.710 --> 00:54:48.910
<v Speaker 1>a little bit of a blank.

00:54:49.150 --> 00:54:51.230
<v Speaker 1>But, yeah, I think I think that

00:54:51.630 --> 00:54:53.069
<v Speaker 1>I think what we have

00:54:53.934 --> 00:54:56.095
<v Speaker 1>probably does the traversal.

00:54:56.494 --> 00:54:58.895
<v Speaker 1>What was supposed to be the the actual

00:54:58.895 --> 00:55:00.655
<v Speaker 1>answer? Let's see.

00:55:01.055 --> 00:55:01.855
<v Speaker 0>So

00:55:02.174 --> 00:55:03.855
<v Speaker 0>Four, which is right.

00:55:04.095 --> 00:55:05.295
<v Speaker 1>Okay. Alright.

00:55:05.694 --> 00:55:07.535
<v Speaker 1>Alright. So cool. So

00:55:07.934 --> 00:55:09.055
<v Speaker 1>let's

00:55:12.770 --> 00:55:14.130
<v Speaker 1>I feel good about this, but I don't

00:55:14.130 --> 00:55:15.730
<v Speaker 1>feel like I've really, like, demonstrated that it

00:55:15.730 --> 00:55:17.410
<v Speaker 1>works. And I guess this is how this

00:55:17.410 --> 00:55:19.010
<v Speaker 1>is how a lot of this kinda coding

00:55:19.010 --> 00:55:20.450
<v Speaker 1>kinda kinda coding goes.

00:55:20.690 --> 00:55:21.490
<v Speaker 1>We got lucky.

00:55:23.055 --> 00:55:25.855
<v Speaker 1>We didn't run into any major problems. And

00:55:25.855 --> 00:55:26.975
<v Speaker 1>I think, conceptually,

00:55:27.375 --> 00:55:29.295
<v Speaker 1>like, we've we've sort of, like, laid out

00:55:29.295 --> 00:55:30.815
<v Speaker 1>the task that we want wanted to do

00:55:30.815 --> 00:55:32.575
<v Speaker 1>when we and we've executed it.

00:55:33.295 --> 00:55:34.655
<v Speaker 1>I think one of the things I could've

00:55:34.655 --> 00:55:37.450
<v Speaker 1>done better is maybe printed more debug output

00:55:37.450 --> 00:55:39.050
<v Speaker 1>in the right location. But

00:55:40.490 --> 00:55:42.970
<v Speaker 1>so let's let's get rid of debug output.

00:55:42.970 --> 00:55:44.490
<v Speaker 1>So in the meantime, is there any any

00:55:44.490 --> 00:55:46.330
<v Speaker 1>way you think we could sort of

00:55:47.050 --> 00:55:48.810
<v Speaker 1>like, any test cases that we could use

00:55:48.810 --> 00:55:49.370
<v Speaker 1>to to

00:55:49.935 --> 00:55:52.175
<v Speaker 1>kind of expand on this. Oh, well, oh,

00:55:52.175 --> 00:55:53.695
<v Speaker 1>I think one of the things we probably

00:55:53.695 --> 00:55:54.575
<v Speaker 1>should be doing

00:55:55.135 --> 00:55:58.735
<v Speaker 1>is we probably shouldn't find ourself. Right? So

00:56:00.175 --> 00:56:01.055
<v Speaker 1>if we

00:56:01.855 --> 00:56:03.775
<v Speaker 1>or we we probably shouldn't start

00:56:04.130 --> 00:56:05.730
<v Speaker 1>rooted at ourself.

00:56:06.130 --> 00:56:08.290
<v Speaker 1>So as we're iterating through this, I don't

00:56:08.290 --> 00:56:10.290
<v Speaker 1>think I think we should exclude

00:56:11.810 --> 00:56:13.250
<v Speaker 1>this note. Right?

00:56:14.210 --> 00:56:16.850
<v Speaker 1>So as we're iterating through our nodes,

00:56:17.650 --> 00:56:18.130
<v Speaker 1>if

00:56:21.385 --> 00:56:23.385
<v Speaker 0>But but we just return true, don't we?

00:56:23.385 --> 00:56:23.945
<v Speaker 0>So

00:56:26.585 --> 00:56:26.984
<v Speaker 1>Also

00:56:27.545 --> 00:56:29.545
<v Speaker 1>so that was so

00:56:29.545 --> 00:56:31.224
<v Speaker 1>that was in the portion where a a

00:56:31.224 --> 00:56:32.585
<v Speaker 1>node

00:56:32.710 --> 00:56:33.750
<v Speaker 1>contains

00:56:34.390 --> 00:56:35.430
<v Speaker 1>a rule

00:56:36.230 --> 00:56:37.670
<v Speaker 1>that that contains

00:56:37.830 --> 00:56:39.670
<v Speaker 1>that that matches. But what I'm talking about

00:56:39.670 --> 00:56:41.110
<v Speaker 1>is as we iterate

00:56:41.750 --> 00:56:43.590
<v Speaker 1>over our rules set,

00:56:45.990 --> 00:56:46.870
<v Speaker 1>each of the roots.

00:56:47.435 --> 00:56:50.155
<v Speaker 1>Well, actually, don't know. Should should so I

00:56:50.155 --> 00:56:51.995
<v Speaker 1>guess what would could potentially happen is,

00:56:52.315 --> 00:56:54.955
<v Speaker 1>let's say shiny gold points to black black

00:56:54.955 --> 00:56:56.235
<v Speaker 1>olive. And I think in this case, it

00:56:56.235 --> 00:56:57.755
<v Speaker 1>just works out where the where where this

00:56:57.755 --> 00:56:59.675
<v Speaker 1>has happened. But, like, shiny gold

00:56:59.915 --> 00:57:02.395
<v Speaker 1>points to both black dark olive and

00:57:02.859 --> 00:57:03.980
<v Speaker 1>vibrant plum.

00:57:04.220 --> 00:57:05.980
<v Speaker 1>And and I don't think either because of

00:57:05.980 --> 00:57:07.180
<v Speaker 1>the way this works out,

00:57:08.780 --> 00:57:11.580
<v Speaker 1>neither of those point back to shiny gold.

00:57:13.020 --> 00:57:15.420
<v Speaker 1>But if it did let's see. So shiny

00:57:15.420 --> 00:57:16.700
<v Speaker 1>gold, dark olive,

00:57:17.904 --> 00:57:19.185
<v Speaker 1>Where's dark olive?

00:57:22.145 --> 00:57:25.185
<v Speaker 1>Dark olive points to faded blue.

00:57:26.625 --> 00:57:28.305
<v Speaker 1>Faded blue points nowhere.

00:57:28.545 --> 00:57:30.305
<v Speaker 1>Dark olive points to dotted black. Dot of

00:57:30.305 --> 00:57:32.520
<v Speaker 1>black points nowhere. Alright. So where else can

00:57:32.520 --> 00:57:34.360
<v Speaker 1>shiny gold go to? You can go to

00:57:34.360 --> 00:57:35.240
<v Speaker 1>vibrant plum.

00:57:35.400 --> 00:57:37.560
<v Speaker 1>So vibrant plum goes to faded blue, which

00:57:37.560 --> 00:57:39.320
<v Speaker 1>goes nowhere as well as

00:57:39.800 --> 00:57:41.880
<v Speaker 1>the so what I'm saying is if, for

00:57:41.880 --> 00:57:43.480
<v Speaker 1>example, faded blue

00:57:44.175 --> 00:57:45.855
<v Speaker 1>instead can contain five

00:57:46.095 --> 00:57:47.055
<v Speaker 1>shiny

00:57:47.935 --> 00:57:48.815
<v Speaker 1>gold.

00:57:49.535 --> 00:57:51.535
<v Speaker 0>So I think the the assumption I made,

00:57:51.535 --> 00:57:53.775
<v Speaker 0>this is this is directed because you couldn't

00:57:53.855 --> 00:57:55.935
<v Speaker 0>if a shiny gold can fit a faded

00:57:55.935 --> 00:57:57.775
<v Speaker 0>blue, then a faded blue can't fit a

00:57:57.775 --> 00:57:59.720
<v Speaker 0>shiny gold. Like, if we're talking about the

00:57:59.720 --> 00:58:02.760
<v Speaker 0>actual physical dimensions of the bag. Right.

00:58:02.760 --> 00:58:03.400
<v Speaker 1>Right.

00:58:03.640 --> 00:58:06.839
<v Speaker 1>So but I don't know. Nothing's preventing the

00:58:06.839 --> 00:58:09.800
<v Speaker 1>dataset, the actual dataset from contains. That's true.

00:58:09.800 --> 00:58:10.280
<v Speaker 0>Yeah.

00:58:10.680 --> 00:58:12.280
<v Speaker 1>And so what I expect will happen is

00:58:12.280 --> 00:58:14.845
<v Speaker 1>that this might even this should cause an

00:58:14.845 --> 00:58:17.404
<v Speaker 1>infinite loop, and this might even, like, cause

00:58:17.404 --> 00:58:19.244
<v Speaker 1>my my machine to crash, and I might

00:58:19.244 --> 00:58:21.565
<v Speaker 1>have to rejoin the stream. But I'm interested

00:58:21.565 --> 00:58:23.165
<v Speaker 1>in seeing what what's gonna happen. Right?

00:58:23.565 --> 00:58:24.365
<v Speaker 1>Oh, no.

00:58:24.765 --> 00:58:26.125
<v Speaker 1>It actually didn't

00:58:26.204 --> 00:58:28.820
<v Speaker 1>didn't crash. But we did get double the

00:58:28.820 --> 00:58:31.140
<v Speaker 0>the number. We got an eight back instead

00:58:31.140 --> 00:58:31.780
<v Speaker 0>of four.

00:58:32.180 --> 00:58:35.860
<v Speaker 1>Alright. Okay. Yeah. Yeah. Yeah. Alright. So So

00:58:35.860 --> 00:58:37.780
<v Speaker 0>as you're cursing on itself and then

00:58:38.500 --> 00:58:40.580
<v Speaker 0>finding shiny gold and then returning true.

00:58:41.154 --> 00:58:43.954
<v Speaker 1>Right. Right. Right. And so oh, right. And

00:58:43.954 --> 00:58:46.515
<v Speaker 1>every node that we okay. Yes. Alright. So

00:58:46.515 --> 00:58:48.674
<v Speaker 1>I think the way to mitigate that would

00:58:48.674 --> 00:58:49.954
<v Speaker 1>be to say

00:58:52.194 --> 00:58:53.875
<v Speaker 1>if

00:58:53.070 --> 00:58:53.870
<v Speaker 1>n

00:58:54.430 --> 00:58:56.430
<v Speaker 1>not equal or n

00:58:57.470 --> 00:58:58.910
<v Speaker 1>equals s

00:58:58.990 --> 00:58:59.790
<v Speaker 1>or

00:59:01.230 --> 00:59:02.750
<v Speaker 1>I find it, then

00:59:03.150 --> 00:59:04.030
<v Speaker 1>I think

00:59:05.550 --> 00:59:06.270
<v Speaker 1>oh, seven.

00:59:12.655 --> 00:59:13.775
<v Speaker 1>If n equal

00:59:15.375 --> 00:59:16.895
<v Speaker 1>so n is a name.

00:59:18.335 --> 00:59:21.375
<v Speaker 1>Well, let's just say if n equals

00:59:21.900 --> 00:59:22.700
<v Speaker 1>s,

00:59:23.260 --> 00:59:23.820
<v Speaker 1>continue.

00:59:27.579 --> 00:59:29.339
<v Speaker 1>Oh, I see. There's other nodes that lead

00:59:29.339 --> 00:59:31.500
<v Speaker 1>to faded blue. So I think this is

00:59:31.500 --> 00:59:32.380
<v Speaker 1>counting it.

00:59:32.940 --> 00:59:33.339
<v Speaker 1>But

00:59:34.315 --> 00:59:37.115
<v Speaker 1>so my point is I think we should

00:59:37.115 --> 00:59:37.995
<v Speaker 1>exclude

00:59:38.235 --> 00:59:40.875
<v Speaker 1>the node we're looking for from the roots

00:59:40.875 --> 00:59:43.115
<v Speaker 1>that that we're looking for. Maybe. I I

00:59:43.115 --> 00:59:43.915
<v Speaker 1>might be wrong about that.

00:59:46.380 --> 00:59:48.380
<v Speaker 1>But okay. I think we solved it. I

00:59:48.380 --> 00:59:49.820
<v Speaker 1>think that is

00:59:50.220 --> 00:59:52.299
<v Speaker 1>I typically, what I found is that when

00:59:52.299 --> 00:59:55.100
<v Speaker 1>doing these advent of code problems,

00:59:57.740 --> 00:59:58.940
<v Speaker 1>pretty much solving

00:59:59.020 --> 00:59:59.740
<v Speaker 1>the example

01:00:00.335 --> 01:00:02.894
<v Speaker 1>leads to solving the the rest of the

01:00:02.894 --> 01:00:03.855
<v Speaker 1>the problems.

01:00:04.095 --> 01:00:05.454
<v Speaker 0>We open that file again?

01:00:05.615 --> 01:00:06.335
<v Speaker 1>Sure.

01:00:06.654 --> 01:00:08.174
<v Speaker 1>The what what do you wanna look at?

01:00:08.174 --> 01:00:09.375
<v Speaker 1>The same function.

01:00:09.934 --> 01:00:10.655
<v Speaker 1>Okay.

01:00:12.255 --> 01:00:14.360
<v Speaker 1>There you go. Let me let me get

01:00:14.360 --> 01:00:16.200
<v Speaker 1>rid of some of this. So can we

01:00:16.200 --> 01:00:18.600
<v Speaker 0>just do if s equals root there and

01:00:18.600 --> 01:00:20.360
<v Speaker 0>then return instead of looking

01:00:20.760 --> 01:00:23.160
<v Speaker 0>at the contains? Is that what you're trying

01:00:23.160 --> 01:00:25.240
<v Speaker 0>to do there? I think so. So I

01:00:25.240 --> 01:00:28.135
<v Speaker 1>think what you're asking is if s equals

01:00:28.375 --> 01:00:30.295
<v Speaker 0>If s equals root, then it just return

01:00:30.295 --> 01:00:30.935
<v Speaker 0>true.

01:00:33.255 --> 01:00:34.775
<v Speaker 1>Do you wanna say true? No? Or would

01:00:34.775 --> 01:00:35.655
<v Speaker 0>it be false?

01:00:36.535 --> 01:00:38.455
<v Speaker 1>I don't know. Good question.

01:00:39.734 --> 01:00:41.255
<v Speaker 1>I think I'm trying to solve a problem

01:00:41.255 --> 01:00:43.255
<v Speaker 1>that apparently

01:00:42.690 --> 01:00:44.050
<v Speaker 1>doesn't exist yet.

01:00:44.290 --> 01:00:46.050
<v Speaker 1>Maybe I'm thinking too far ahead.

01:00:47.730 --> 01:00:49.410
<v Speaker 1>But I was Well, add add the recursion

01:00:49.410 --> 01:00:50.770
<v Speaker 0>back to our test. I think that's the

01:00:50.770 --> 01:00:52.530
<v Speaker 0>s equal can drill with the fix for

01:00:52.530 --> 01:00:53.250
<v Speaker 0>that. Right?

01:00:54.369 --> 01:00:55.730
<v Speaker 0>I'm I'm saying

01:00:55.810 --> 01:00:57.010
<v Speaker 0>as a okay.

01:00:58.175 --> 01:00:59.615
<v Speaker 0>In my head, it makes sense.

01:01:01.615 --> 01:01:03.375
<v Speaker 0>We have to make that shiny gold, then

01:01:03.375 --> 01:01:04.815
<v Speaker 0>we run our test, and we should still

01:01:04.815 --> 01:01:05.535
<v Speaker 0>get four.

01:01:07.055 --> 01:01:07.775
<v Speaker 1>No. And

01:01:08.815 --> 01:01:10.655
<v Speaker 1>I think that's because well, let's let's let's

01:01:10.655 --> 01:01:11.935
<v Speaker 1>do this. How about this?

01:01:12.734 --> 01:01:13.375
<v Speaker 1>Let's

01:01:13.730 --> 01:01:14.690
<v Speaker 1>print

01:01:14.849 --> 01:01:15.730
<v Speaker 1>our

01:01:18.049 --> 01:01:19.970
<v Speaker 1>know what, and let's see what it's called.

01:01:19.970 --> 01:01:21.809
<v Speaker 0>Oh, no. The find should be returned false.

01:01:21.809 --> 01:01:23.170
<v Speaker 0>If s equals root, then it should be

01:01:23.170 --> 01:01:24.690
<v Speaker 0>a false because it means that we are

01:01:24.690 --> 01:01:26.609
<v Speaker 0>in a nested find, so we would be

01:01:26.609 --> 01:01:27.569
<v Speaker 0>counting that twice.

01:01:30.585 --> 01:01:32.905
<v Speaker 1>No. It's just and so what we're doing

01:01:32.905 --> 01:01:35.145
<v Speaker 1>is there's another path. There's another path to

01:01:35.145 --> 01:01:37.465
<v Speaker 1>shiny gold. And so let's do something like

01:01:37.465 --> 01:01:40.905
<v Speaker 1>this. Say, yep. It's neat. And what we

01:01:40.905 --> 01:01:42.585
<v Speaker 1>could say is log f

01:01:45.130 --> 01:01:45.770
<v Speaker 1>percent

01:01:46.010 --> 01:01:46.810
<v Speaker 1>s

01:01:48.810 --> 01:01:50.410
<v Speaker 1>searching for

01:01:53.050 --> 01:01:53.690
<v Speaker 1>some

01:01:53.930 --> 01:01:54.970
<v Speaker 1>quoted stream

01:01:57.585 --> 01:01:58.385
<v Speaker 1>related

01:01:58.385 --> 01:01:59.185
<v Speaker 1>at

01:01:59.665 --> 01:02:00.945
<v Speaker 1>some quoted string.

01:02:01.505 --> 01:02:03.825
<v Speaker 1>And we'll set up strings repeat

01:02:05.825 --> 01:02:06.545
<v Speaker 1>tab.

01:02:06.945 --> 01:02:07.265
<v Speaker 1>Yep.

01:02:11.600 --> 01:02:12.480
<v Speaker 1>Okay.

01:02:14.640 --> 01:02:16.080
<v Speaker 1>And so when we

01:02:17.040 --> 01:02:19.440
<v Speaker 1>when we go to find, we'll say

01:02:19.520 --> 01:02:20.400
<v Speaker 1>depth

01:02:20.480 --> 01:02:21.360
<v Speaker 1>plus one.

01:02:22.015 --> 01:02:22.975
<v Speaker 1>And maybe,

01:02:23.135 --> 01:02:25.695
<v Speaker 1>like, here, we'll start depth with zero.

01:02:28.255 --> 01:02:28.895
<v Speaker 1>Alright.

01:02:29.135 --> 01:02:31.935
<v Speaker 1>So searching for shiny gold with light red.

01:02:32.415 --> 01:02:34.015
<v Speaker 1>I search for shiny gold with a red

01:02:34.015 --> 01:02:35.135
<v Speaker 1>dot bright white.

01:02:35.375 --> 01:02:35.615
<v Speaker 1>K?

01:02:36.260 --> 01:02:38.260
<v Speaker 1>So it must have been terminated,

01:02:38.339 --> 01:02:39.700
<v Speaker 1>you know, so you have found it or

01:02:39.700 --> 01:02:40.180
<v Speaker 1>not.

01:02:40.819 --> 01:02:43.220
<v Speaker 1>Search for shiny gold rooted dark orange, shiny

01:02:43.220 --> 01:02:45.300
<v Speaker 1>gold rooted at bright white. And so what

01:02:45.300 --> 01:02:47.300
<v Speaker 1>I expect is that we'll see

01:02:47.540 --> 01:02:48.819
<v Speaker 1>searching for

01:02:49.685 --> 01:02:50.805
<v Speaker 1>I don't know

01:02:51.765 --> 01:02:53.125
<v Speaker 1>you know what? I feel like we've gone

01:02:53.125 --> 01:02:54.965
<v Speaker 1>down a tangent here that may may not

01:02:54.965 --> 01:02:55.925
<v Speaker 1>be necessary.

01:02:56.085 --> 01:02:58.565
<v Speaker 0>Okay. And so what we let's let's revisit

01:02:58.565 --> 01:03:00.245
<v Speaker 1>this later because the part that's giving me

01:03:00.245 --> 01:03:01.765
<v Speaker 1>anxiety is

01:03:01.845 --> 01:03:02.245
<v Speaker 1>parsing

01:03:03.250 --> 01:03:04.130
<v Speaker 1>the input.

01:03:04.370 --> 01:03:05.730
<v Speaker 1>And so at this point,

01:03:05.970 --> 01:03:09.090
<v Speaker 1>I'm gonna ask for, you know, as always,

01:03:09.090 --> 01:03:11.170
<v Speaker 1>but I'm I'm interested in your help.

01:03:11.410 --> 01:03:12.930
<v Speaker 1>I was wondering, like,

01:03:13.090 --> 01:03:14.530
<v Speaker 1>what did you think was the best way

01:03:14.530 --> 01:03:16.050
<v Speaker 1>to parse this this data?

01:03:17.065 --> 01:03:18.585
<v Speaker 0>So shall we look at the input string

01:03:18.585 --> 01:03:21.145
<v Speaker 0>again so we can break it down? Absolutely.

01:03:22.585 --> 01:03:23.225
<v Speaker 1>And

01:03:25.145 --> 01:03:27.545
<v Speaker 1>so I have a I have a notion,

01:03:27.785 --> 01:03:29.865
<v Speaker 1>but this is one of those cases where

01:03:29.865 --> 01:03:31.065
<v Speaker 1>this is in my toolbox.

01:03:31.650 --> 01:03:34.130
<v Speaker 1>It may be something that is dumb. I

01:03:34.130 --> 01:03:35.490
<v Speaker 1>mean and what I found is there's times

01:03:35.490 --> 01:03:36.770
<v Speaker 1>when I've pulled this out of my toolbox,

01:03:36.770 --> 01:03:37.970
<v Speaker 1>somebody else would go, oh, no. I just

01:03:37.970 --> 01:03:39.650
<v Speaker 1>use a request for this or whatever, and

01:03:39.650 --> 01:03:41.010
<v Speaker 1>it worked out just fine.

01:03:41.970 --> 01:03:42.930
<v Speaker 1>But so

01:03:43.250 --> 01:03:45.425
<v Speaker 1>I guess I guess I'll ask you your

01:03:45.505 --> 01:03:46.865
<v Speaker 1>for your input. And I I'm also gonna

01:03:46.865 --> 01:03:48.625
<v Speaker 1>have to take, like, a two second break,

01:03:48.625 --> 01:03:50.065
<v Speaker 1>so I'll be right back. Okay? Yeah. Sure.

01:03:50.065 --> 01:03:50.465
<v Speaker 0>No worries.

01:04:05.150 --> 01:04:06.430
<v Speaker 0>I guess I'm gonna have to work out

01:04:06.430 --> 01:04:07.310
<v Speaker 0>how to process text.

01:04:13.395 --> 01:04:15.155
<v Speaker 0>So I'll just I'll talk about how I

01:04:15.155 --> 01:04:16.595
<v Speaker 0>think it it should be done, and then

01:04:16.595 --> 01:04:18.115
<v Speaker 0>you can all tell me if I'm wrong

01:04:18.115 --> 01:04:20.115
<v Speaker 0>before Ian gets back. And then I'll look,

01:04:20.115 --> 01:04:22.275
<v Speaker 0>like, really smart, which should be cool.

01:04:23.795 --> 01:04:25.555
<v Speaker 0>And to me, it kinda breaks down into

01:04:25.555 --> 01:04:26.995
<v Speaker 0>two

01:04:27.849 --> 01:04:29.290
<v Speaker 0>two different parts.

01:04:29.530 --> 01:04:32.010
<v Speaker 0>There's the color bags contain, which is quite

01:04:32.010 --> 01:04:33.530
<v Speaker 0>easy to extract out. I don't see any

01:04:33.530 --> 01:04:35.690
<v Speaker 0>challenges there. And then on the right hand

01:04:35.690 --> 01:04:38.250
<v Speaker 0>side, what we have is some numeric identifier

01:04:38.250 --> 01:04:40.570
<v Speaker 0>followed by name, followed by bag or bags

01:04:41.025 --> 01:04:42.785
<v Speaker 0>with a comma there. So we can split

01:04:42.785 --> 01:04:44.465
<v Speaker 0>that right away on a comma.

01:04:47.825 --> 01:04:49.265
<v Speaker 0>Yeah. So we could we could do this

01:04:49.265 --> 01:04:51.184
<v Speaker 0>with, like, a recursive strength, but or we

01:04:51.184 --> 01:04:53.345
<v Speaker 0>can even just regex it out. Although, I

01:04:53.345 --> 01:04:54.944
<v Speaker 0>was trying to avoid the regex because you

01:04:54.944 --> 01:04:56.180
<v Speaker 0>know what to say. You know, if you

01:04:56.180 --> 01:04:57.860
<v Speaker 0>use regex, you've never got an extra problem

01:04:57.860 --> 01:04:59.780
<v Speaker 0>or whatever that weird thing is.

01:05:00.340 --> 01:05:01.060
<v Speaker 0>Yeah.

01:05:03.860 --> 01:05:04.660
<v Speaker 0>So yeah.

01:05:07.060 --> 01:05:08.660
<v Speaker 0>Did did you miss all that? Because I

01:05:08.660 --> 01:05:10.500
<v Speaker 0>I just told everybody watching how to fix

01:05:10.500 --> 01:05:12.805
<v Speaker 0>it. Oh, really? Well,

01:05:15.125 --> 01:05:15.765
<v Speaker 1>great.

01:05:16.565 --> 01:05:17.605
<v Speaker 0>Yeah. So

01:05:17.925 --> 01:05:19.445
<v Speaker 0>yeah. I was just talking to the problem

01:05:19.445 --> 01:05:21.045
<v Speaker 0>in my head to anyone that was listening.

01:05:21.045 --> 01:05:23.445
<v Speaker 0>But when it comes to parsing the stringers,

01:05:23.445 --> 01:05:24.325
<v Speaker 0>I see some

01:05:24.660 --> 01:05:25.859
<v Speaker 0>I I don't know if the right word

01:05:25.859 --> 01:05:27.940
<v Speaker 0>is lexical. But, you know, we can split

01:05:27.940 --> 01:05:29.220
<v Speaker 0>right away on

01:05:29.780 --> 01:05:31.380
<v Speaker 0>we can do a very basic string split

01:05:31.380 --> 01:05:33.619
<v Speaker 0>on bags contained, which is consistent. And that

01:05:33.619 --> 01:05:35.140
<v Speaker 0>will give us a the name of the

01:05:35.140 --> 01:05:37.299
<v Speaker 0>bag on the left, and then something on

01:05:37.299 --> 01:05:38.740
<v Speaker 0>the right that we can then start to

01:05:38.740 --> 01:05:41.075
<v Speaker 0>tokenize. Now my next thought after that is

01:05:41.075 --> 01:05:42.434
<v Speaker 0>that we can then string split on the

01:05:42.434 --> 01:05:44.275
<v Speaker 0>comma to get all the different bags on

01:05:44.275 --> 01:05:45.395
<v Speaker 0>the right hand side.

01:05:45.795 --> 01:05:47.635
<v Speaker 0>And then we could probably get away with

01:05:47.635 --> 01:05:49.795
<v Speaker 0>just rejects and out the number and the

01:05:49.795 --> 01:05:50.835
<v Speaker 0>name of the bag

01:05:51.474 --> 01:05:53.310
<v Speaker 0>from that. So I I think what we're

01:05:53.310 --> 01:05:54.830
<v Speaker 0>doing is we're saying, okay. Let's loop over

01:05:54.830 --> 01:05:57.150
<v Speaker 0>each line, split it on bags contain.

01:05:57.550 --> 01:05:59.070
<v Speaker 0>Left hand side is the name. The right

01:05:59.070 --> 01:06:00.510
<v Speaker 0>hand side is our loop, and then we

01:06:00.510 --> 01:06:03.070
<v Speaker 0>loop over the comma splits and then rejects

01:06:03.070 --> 01:06:04.590
<v Speaker 0>out the number and the bag color.

01:06:05.184 --> 01:06:05.905
<v Speaker 1>Okay.

01:06:06.065 --> 01:06:07.984
<v Speaker 1>Alright. Was that what you were thinking?

01:06:08.865 --> 01:06:09.505
<v Speaker 1>No.

01:06:12.065 --> 01:06:14.305
<v Speaker 1>Which is which is good because if I

01:06:14.305 --> 01:06:15.664
<v Speaker 1>told you what I was thinking so what

01:06:15.664 --> 01:06:17.345
<v Speaker 1>was wanting to do is tokenize the entire

01:06:17.345 --> 01:06:18.944
<v Speaker 1>thing. Right? Like So I I

01:06:20.040 --> 01:06:21.080
<v Speaker 1>parser for it.

01:06:21.880 --> 01:06:23.800
<v Speaker 1>But I actually like what you said better.

01:06:23.800 --> 01:06:25.320
<v Speaker 1>So which which route do you wanna take?

01:06:25.320 --> 01:06:26.040
<v Speaker 1>We could

01:06:26.280 --> 01:06:27.160
<v Speaker 1>we can

01:06:28.120 --> 01:06:30.200
<v Speaker 1>we can go either way and We we

01:06:30.200 --> 01:06:33.245
<v Speaker 0>we could write Alexa and tokenizer. I I

01:06:33.245 --> 01:06:35.085
<v Speaker 0>I think it's a little bit overkill just

01:06:35.085 --> 01:06:36.845
<v Speaker 0>because I can see so much consistency here

01:06:36.845 --> 01:06:38.205
<v Speaker 0>that all we really need to do is

01:06:38.525 --> 01:06:40.605
<v Speaker 0>the first split on bags contain is consistent.

01:06:40.605 --> 01:06:41.885
<v Speaker 0>Right? Really, really easy.

01:06:42.205 --> 01:06:43.565
<v Speaker 0>We then get the comma to do the

01:06:43.565 --> 01:06:45.005
<v Speaker 0>split on the number of items on the

01:06:45.005 --> 01:06:47.640
<v Speaker 0>right. I mean, I'm comfortable with the rejects

01:06:47.640 --> 01:06:49.400
<v Speaker 0>at that point because it's trivial to get

01:06:49.400 --> 01:06:51.800
<v Speaker 0>the numeric identifier and then anything up to

01:06:51.800 --> 01:06:53.160
<v Speaker 0>a space bag.

01:06:53.400 --> 01:06:55.240
<v Speaker 0>I mean, that's it really is really simple

01:06:55.240 --> 01:06:57.080
<v Speaker 0>reject. But if you've got a nicer way

01:06:57.080 --> 01:06:58.920
<v Speaker 0>of handling that, then we can go that

01:06:58.920 --> 01:07:02.565
<v Speaker 0>way. I know. Let's

01:07:02.565 --> 01:07:04.325
<v Speaker 1>see. Let's see what we could do here.

01:07:10.725 --> 01:07:11.685
<v Speaker 1>Oh, let's try that.

01:07:14.020 --> 01:07:16.020
<v Speaker 0>Sorry. I'll keep you right. We'll be fine.

01:07:16.819 --> 01:07:17.619
<v Speaker 1>Alright.

01:07:19.940 --> 01:07:20.500
<v Speaker 1>So

01:07:22.180 --> 01:07:24.340
<v Speaker 1>well, let's call the scan that go. Right?

01:07:26.180 --> 01:07:27.780
<v Speaker 1>Okay. So

01:07:31.585 --> 01:07:33.184
<v Speaker 1>I'll do it with a pause, I guess,

01:07:33.184 --> 01:07:35.185
<v Speaker 1>but let's start with a scanner.

01:07:39.345 --> 01:07:40.865
<v Speaker 1>Maybe it'll take a

01:07:42.385 --> 01:07:43.585
<v Speaker 1>a room scanner.

01:07:44.829 --> 01:07:47.790
<v Speaker 1>We'll take a take a reader, IO reader.

01:07:47.790 --> 01:07:48.350
<v Speaker 1>The

01:07:50.510 --> 01:07:51.870
<v Speaker 1>first thing you'll do is,

01:07:52.270 --> 01:07:54.990
<v Speaker 1>let's say, we'll create a line oriented

01:07:55.630 --> 01:07:58.109
<v Speaker 1>Yeah. Pop. Io new scanner. Right? So let's

01:07:58.109 --> 01:07:58.750
<v Speaker 1>say, like,

01:07:59.234 --> 01:08:02.595
<v Speaker 1>standardtools.i0newscanner

01:08:02.595 --> 01:08:05.474
<v Speaker 1>r. And by default, that that splits it

01:08:05.474 --> 01:08:07.075
<v Speaker 1>on lines. And so

01:08:07.875 --> 01:08:09.075
<v Speaker 1>while we scan,

01:08:12.819 --> 01:08:14.900
<v Speaker 1>you could say, just for fun for right

01:08:14.900 --> 01:08:16.659
<v Speaker 1>now, log for that.

01:08:19.140 --> 01:08:20.340
<v Speaker 1>Scan text.

01:08:20.979 --> 01:08:21.300
<v Speaker 1>Right?

01:08:26.465 --> 01:08:27.745
<v Speaker 1>And let's start test.

01:08:42.330 --> 01:08:43.609
<v Speaker 1>Alright. So

01:08:46.729 --> 01:08:48.250
<v Speaker 1>yeah. So what we could do is let's

01:08:48.250 --> 01:08:49.689
<v Speaker 1>paste our

01:08:49.850 --> 01:08:53.210
<v Speaker 1>test input into here as an example data.

01:08:53.915 --> 01:08:56.715
<v Speaker 1>And that did not work as planned.

01:09:00.315 --> 01:09:01.354
<v Speaker 1>There we go.

01:09:01.835 --> 01:09:02.555
<v Speaker 1>And

01:09:02.795 --> 01:09:05.354
<v Speaker 1>so we'll say, like, input

01:09:05.835 --> 01:09:06.955
<v Speaker 1>equals

01:09:07.115 --> 01:09:08.475
<v Speaker 1>and lose the

01:09:08.860 --> 01:09:10.460
<v Speaker 1>back ticking go, which

01:09:11.260 --> 01:09:13.740
<v Speaker 1>gives us sort of an uninterpreted

01:09:14.460 --> 01:09:15.260
<v Speaker 1>string

01:09:15.260 --> 01:09:17.660
<v Speaker 1>kinda literal. So no escaping or anything like

01:09:17.660 --> 01:09:20.700
<v Speaker 1>that. And so now since we're passing scan

01:09:20.700 --> 01:09:23.900
<v Speaker 1>and IO reader, we could say, like, scan

01:09:24.235 --> 01:09:25.435
<v Speaker 1>strings,

01:09:26.555 --> 01:09:28.475
<v Speaker 1>new reader input.

01:09:29.835 --> 01:09:32.154
<v Speaker 1>Alright. So now we can say go test,

01:09:32.155 --> 01:09:32.875
<v Speaker 1>run,

01:09:33.515 --> 01:09:34.715
<v Speaker 1>test, scan,

01:09:34.875 --> 01:09:36.795
<v Speaker 1>and what we should see is

01:09:40.040 --> 01:09:41.639
<v Speaker 1>what we should see is each one.

01:09:42.680 --> 01:09:45.880
<v Speaker 1>Yep. Okay. So now we wanna split on

01:09:45.880 --> 01:09:47.239
<v Speaker 1>bags. Alright?

01:09:47.479 --> 01:09:49.719
<v Speaker 1>So I don't know bags contain.

01:09:50.359 --> 01:09:51.160
<v Speaker 1>Okay. Alright.

01:09:53.444 --> 01:09:54.804
<v Speaker 1>So strings index,

01:09:54.885 --> 01:09:56.645
<v Speaker 1>so that gives us the index of bags.

01:09:56.645 --> 01:09:58.244
<v Speaker 1>You know? So that gives us the index

01:09:58.244 --> 01:10:00.485
<v Speaker 1>of a of a substring.

01:10:00.724 --> 01:10:02.645
<v Speaker 1>So for for each of those, we could

01:10:02.645 --> 01:10:03.284
<v Speaker 1>say

01:10:07.045 --> 01:10:07.445
<v Speaker 1>oops.

01:10:09.730 --> 01:10:11.890
<v Speaker 1>So the first parameter would be

01:10:12.450 --> 01:10:14.210
<v Speaker 1>scanner text,

01:10:14.610 --> 01:10:16.130
<v Speaker 1>and the second one would be

01:10:18.690 --> 01:10:21.810
<v Speaker 1>should we split on space bags contain?

01:10:22.210 --> 01:10:22.530
<v Speaker 1>Yeah.

01:10:25.594 --> 01:10:28.155
<v Speaker 1>Alright. So now we could maybe say log

01:10:28.155 --> 01:10:29.034
<v Speaker 1>for now.

01:10:31.275 --> 01:10:33.034
<v Speaker 1>Root is

01:10:33.355 --> 01:10:34.074
<v Speaker 1>something,

01:10:34.555 --> 01:10:36.955
<v Speaker 1>and rest is something else. Right?

01:10:38.119 --> 01:10:40.440
<v Speaker 1>And so our route would be well, let's

01:10:40.440 --> 01:10:43.159
<v Speaker 1>let's stash our our scanner text because it's

01:10:43.159 --> 01:10:45.480
<v Speaker 1>gonna get cumbersome calling scan text all the

01:10:45.480 --> 01:10:48.039
<v Speaker 1>time. So let's just say text equals

01:10:48.040 --> 01:10:50.280
<v Speaker 1>scan text. Could we just use strings dot

01:10:50.280 --> 01:10:52.735
<v Speaker 0>split on the bags container? Like, I don't

01:10:52.735 --> 01:10:53.855
<v Speaker 0>know if there's a reason we do the

01:10:53.855 --> 01:10:55.135
<v Speaker 0>index or you're just doing that for the

01:10:55.135 --> 01:10:56.014
<v Speaker 0>debug output?

01:10:57.614 --> 01:11:00.414
<v Speaker 1>So I guess we could do on the

01:11:02.735 --> 01:11:04.334
<v Speaker 1>split chain string.

01:11:05.375 --> 01:11:06.574
<v Speaker 0>Oh, yeah. Strings dot split?

01:11:07.670 --> 01:11:09.429
<v Speaker 1>Oh, yeah. This is string. It gives us

01:11:09.429 --> 01:11:10.389
<v Speaker 1>a slice.

01:11:10.550 --> 01:11:12.150
<v Speaker 1>Well, I was just gonna reslice it. So

01:11:12.150 --> 01:11:13.590
<v Speaker 1>I was just gonna say, like,

01:11:13.830 --> 01:11:15.030
<v Speaker 1>text,

01:11:15.270 --> 01:11:17.110
<v Speaker 1>you know, up to index

01:11:17.190 --> 01:11:19.270
<v Speaker 1>and then test I'm sorry.

01:11:21.675 --> 01:11:23.915
<v Speaker 1>Up to index and then

01:11:25.435 --> 01:11:26.395
<v Speaker 1>text

01:11:26.795 --> 01:11:27.594
<v Speaker 1>via

01:11:28.155 --> 01:11:30.235
<v Speaker 1>from index and beyond.

01:11:30.795 --> 01:11:32.315
<v Speaker 0>Will it have to be will it have

01:11:32.315 --> 01:11:34.235
<v Speaker 0>to be index plus the number of characters

01:11:34.235 --> 01:11:35.355
<v Speaker 0>and space bags contained?

01:11:36.050 --> 01:11:39.010
<v Speaker 1>Yeah. Yeah. So we're we're kinda capturing capturing

01:11:39.010 --> 01:11:41.250
<v Speaker 1>that. So you're right. I think yeah. So

01:11:41.250 --> 01:11:42.130
<v Speaker 1>split

01:11:42.130 --> 01:11:43.090
<v Speaker 1>is better.

01:11:43.490 --> 01:11:46.050
<v Speaker 1>Alright. So we're gonna split on bags contained,

01:11:46.210 --> 01:11:47.490
<v Speaker 1>and we're gonna say

01:11:48.065 --> 01:11:48.784
<v Speaker 1>maybe

01:11:50.145 --> 01:11:50.864
<v Speaker 1>parts.

01:11:51.425 --> 01:11:53.104
<v Speaker 1>And let's print

01:11:54.465 --> 01:11:55.985
<v Speaker 1>oh, they'll call it part.

01:11:57.025 --> 01:11:59.505
<v Speaker 1>Zero and part one.

01:12:00.784 --> 01:12:01.824
<v Speaker 1>Let's see what we get.

01:12:06.600 --> 01:12:07.559
<v Speaker 0>Good old go.

01:12:08.680 --> 01:12:10.920
<v Speaker 0>Yeah. I know. Right? Alright.

01:12:10.920 --> 01:12:13.720
<v Speaker 1>There you go. Alright. So the root is,

01:12:13.720 --> 01:12:17.239
<v Speaker 1>red. The rest is one bright white bag.

01:12:17.239 --> 01:12:19.824
<v Speaker 1>Oh, I love it. That's awesome. Good deal.

01:12:20.065 --> 01:12:21.264
<v Speaker 1>Alright. So

01:12:22.304 --> 01:12:23.985
<v Speaker 0>And then we can do the same on

01:12:23.985 --> 01:12:26.304
<v Speaker 0>a comma to get all of the items

01:12:26.304 --> 01:12:27.104
<v Speaker 0>and then

01:12:27.744 --> 01:12:29.344
<v Speaker 0>the magic of projects.

01:12:31.264 --> 01:12:33.744
<v Speaker 1>Alright. So rules equals strings

01:12:33.744 --> 01:12:34.545
<v Speaker 1>split

01:12:35.550 --> 01:12:36.429
<v Speaker 1>part

01:12:37.310 --> 01:12:38.189
<v Speaker 1>one

01:12:38.830 --> 01:12:39.550
<v Speaker 1>on

01:12:39.710 --> 01:12:40.189
<v Speaker 1>On

01:12:42.670 --> 01:12:44.190
<v Speaker 1>a comma. Comma. Yeah.

01:12:50.205 --> 01:12:51.885
<v Speaker 1>Alright. It's supposed to be rules.

01:13:05.060 --> 01:13:07.539
<v Speaker 1>Okay.

01:13:08.980 --> 01:13:09.940
<v Speaker 1>Just for now.

01:13:12.100 --> 01:13:12.820
<v Speaker 1>Alright. So

01:13:14.445 --> 01:13:15.564
<v Speaker 1>our rules,

01:13:15.804 --> 01:13:18.204
<v Speaker 1>bright white bag. Oh, wait a sec. Something

01:13:18.204 --> 01:13:20.764
<v Speaker 1>is not quite right about that

01:13:21.565 --> 01:13:23.085
<v Speaker 1>because

01:13:29.420 --> 01:13:32.060
<v Speaker 1>That doesn't look like that was split.

01:13:39.875 --> 01:13:41.315
<v Speaker 1>Am I doing wrong here?

01:13:41.475 --> 01:13:43.394
<v Speaker 1>So rules, red white bags.

01:13:44.594 --> 01:13:45.955
<v Speaker 1>I'm good at yellow bags.

01:13:54.590 --> 01:13:55.229
<v Speaker 1>Roles

01:13:55.710 --> 01:13:56.829
<v Speaker 1>split.

01:14:00.190 --> 01:14:02.110
<v Speaker 1>So strings up.

01:14:05.949 --> 01:14:08.030
<v Speaker 0>So see where you've got

01:14:11.315 --> 01:14:12.114
<v Speaker 1>so

01:14:14.595 --> 01:14:16.435
<v Speaker 0>we've got the split and base container, which

01:14:16.435 --> 01:14:18.035
<v Speaker 0>gives us part which gives us part zero

01:14:18.035 --> 01:14:20.035
<v Speaker 0>and part one. Why

01:14:20.035 --> 01:14:21.075
<v Speaker 0>is it there I I don't know what

01:14:21.075 --> 01:14:22.435
<v Speaker 0>the real assignment is. Can that just be

01:14:22.435 --> 01:14:22.755
<v Speaker 0>removed?

01:14:24.450 --> 01:14:25.250
<v Speaker 1>Well, so

01:14:25.810 --> 01:14:27.570
<v Speaker 1>in our hypothetical,

01:14:27.570 --> 01:14:29.489
<v Speaker 1>like, rules struck the root

01:14:29.650 --> 01:14:31.730
<v Speaker 1>is gonna be here, and then we're gonna

01:14:31.730 --> 01:14:32.290
<v Speaker 1>have

01:14:32.850 --> 01:14:34.130
<v Speaker 1>you know, that's gonna be the root of

01:14:34.130 --> 01:14:36.130
<v Speaker 1>our map, and then we're gonna have a

01:14:36.130 --> 01:14:37.090
<v Speaker 1>slice of

01:14:37.330 --> 01:14:38.130
<v Speaker 1>rules

01:14:38.935 --> 01:14:39.975
<v Speaker 1>after that.

01:14:41.015 --> 01:14:42.535
<v Speaker 1>So I guess I don't have to stash

01:14:42.535 --> 01:14:44.055
<v Speaker 1>the root just yet. I was just trying

01:14:44.055 --> 01:14:45.735
<v Speaker 1>to give it kind of a name

01:14:46.055 --> 01:14:46.935
<v Speaker 1>beforehand.

01:14:48.535 --> 01:14:50.535
<v Speaker 0>Alright. Okay. Can I see the output again?

01:14:52.880 --> 01:14:53.440
<v Speaker 1>Oops. And

01:14:55.920 --> 01:14:57.040
<v Speaker 1>Okay. So

01:14:57.920 --> 01:15:00.160
<v Speaker 1>it was able to extract the root, which

01:15:00.160 --> 01:15:01.920
<v Speaker 1>is, like, red. Mhmm.

01:15:02.640 --> 01:15:03.680
<v Speaker 1>And then the rest,

01:15:04.665 --> 01:15:06.585
<v Speaker 1>I'm sorry, the rules here. So

01:15:07.065 --> 01:15:08.985
<v Speaker 1>this looks like a a slice of length

01:15:08.985 --> 01:15:09.785
<v Speaker 1>instead

01:15:09.785 --> 01:15:12.185
<v Speaker 1>of like, I don't see a comma here.

01:15:12.665 --> 01:15:15.705
<v Speaker 1>Maybe I'm just reading the output wrong. Let's

01:15:15.705 --> 01:15:18.505
<v Speaker 1>let's print it in a way that go

01:15:19.429 --> 01:15:20.309
<v Speaker 1>That's it.

01:15:20.710 --> 01:15:23.510
<v Speaker 1>Oh, okay. That's right. I'm sorry. So Yeah.

01:15:23.750 --> 01:15:25.909
<v Speaker 1>Yeah. So we we did it.

01:15:26.790 --> 01:15:29.510
<v Speaker 1>Alright. Well, we still have to reject each

01:15:29.510 --> 01:15:31.750
<v Speaker 0>of the rules now to get the quantity

01:15:31.750 --> 01:15:33.815
<v Speaker 0>and the name, but I think that should

01:15:33.815 --> 01:15:34.855
<v Speaker 0>be pretty trivial.

01:15:35.015 --> 01:15:36.295
<v Speaker 1>Yeah. And in fact, I think we could

01:15:36.295 --> 01:15:38.455
<v Speaker 1>avoid using rejects by

01:15:38.775 --> 01:15:41.575
<v Speaker 1>using scan f. Right? So I think we

01:15:41.575 --> 01:15:42.855
<v Speaker 1>could do something like

01:15:45.975 --> 01:15:48.375
<v Speaker 1>let's see. So count zero

01:15:48.600 --> 01:15:49.719
<v Speaker 1>word one

01:15:50.840 --> 01:15:51.880
<v Speaker 1>is

01:15:52.120 --> 01:15:54.679
<v Speaker 1>word one and word two

01:15:55.480 --> 01:15:57.000
<v Speaker 1>is the string.

01:15:57.240 --> 01:15:59.480
<v Speaker 1>And we might be able to simply say,

01:16:00.200 --> 01:16:02.120
<v Speaker 1>font s scan f

01:16:03.560 --> 01:16:03.960
<v Speaker 1>rules.

01:16:04.735 --> 01:16:06.175
<v Speaker 1>Oh, I'm sorry. Well, first,

01:16:07.375 --> 01:16:08.975
<v Speaker 1>for each rule

01:16:10.815 --> 01:16:11.775
<v Speaker 1>rules,

01:16:16.495 --> 01:16:17.935
<v Speaker 1>I'll just scan f.

01:16:18.095 --> 01:16:20.289
<v Speaker 1>So we want an integer.

01:16:21.330 --> 01:16:22.210
<v Speaker 1>So one

01:16:22.850 --> 01:16:24.210
<v Speaker 1>string string,

01:16:27.010 --> 01:16:28.770
<v Speaker 1>and we're gonna pass this the address of

01:16:28.770 --> 01:16:29.489
<v Speaker 1>count.

01:16:30.929 --> 01:16:33.570
<v Speaker 1>Address of word one and address of word

01:16:33.570 --> 01:16:33.969
<v Speaker 1>two.

01:16:35.155 --> 01:16:37.394
<v Speaker 1>And we Not sure if that'll work because

01:16:38.915 --> 01:16:40.435
<v Speaker 0>the name of the bag oh, I guess

01:16:40.435 --> 01:16:42.515
<v Speaker 0>it's two strings. Right? It's always two strings.

01:16:42.515 --> 01:16:43.795
<v Speaker 0>We're not we're not gonna get, like, a

01:16:43.795 --> 01:16:46.034
<v Speaker 0>pale, like, red in our test data, are

01:16:46.034 --> 01:16:46.195
<v Speaker 0>we?

01:16:47.460 --> 01:16:48.980
<v Speaker 1>I don't know. So what I'm hoping is

01:16:48.980 --> 01:16:50.580
<v Speaker 1>that so what we just did was we

01:16:50.580 --> 01:16:52.180
<v Speaker 1>gave so we're getting a string in the

01:16:52.180 --> 01:16:54.420
<v Speaker 1>form of, like I'm just gonna copy this

01:16:54.420 --> 01:16:56.740
<v Speaker 1>and paste this into the into the

01:16:57.140 --> 01:16:57.620
<v Speaker 1>so

01:16:58.180 --> 01:16:59.860
<v Speaker 1>we're doing in the string in, like, this

01:16:59.860 --> 01:17:02.340
<v Speaker 1>form. Alright? So that's

01:17:02.715 --> 01:17:05.034
<v Speaker 1>an integer. So that's covered by a percent

01:17:05.034 --> 01:17:05.594
<v Speaker 1>d

01:17:06.474 --> 01:17:09.594
<v Speaker 1>a word, percent covered by percent s, another

01:17:09.594 --> 01:17:12.474
<v Speaker 1>word covered by percent s. And I'm hoping

01:17:12.474 --> 01:17:13.914
<v Speaker 1>that we just completely

01:17:14.155 --> 01:17:14.955
<v Speaker 1>ignore

01:17:14.955 --> 01:17:16.635
<v Speaker 1>that part in our

01:17:17.034 --> 01:17:19.139
<v Speaker 1>s k n f verbs.

01:17:19.140 --> 01:17:20.659
<v Speaker 1>Does that make sense? Yeah.

01:17:21.060 --> 01:17:22.660
<v Speaker 0>What we also need to handle like, what

01:17:22.660 --> 01:17:24.260
<v Speaker 0>happens if that scan f fails for the

01:17:24.260 --> 01:17:26.500
<v Speaker 0>new other bags? Can we handle that?

01:17:27.140 --> 01:17:29.699
<v Speaker 1>Yes. Exactly. Yeah. So what we could say

01:17:29.699 --> 01:17:31.699
<v Speaker 1>is, I think it returns the count. So

01:17:32.844 --> 01:17:34.204
<v Speaker 1>n error

01:17:34.605 --> 01:17:37.324
<v Speaker 1>equals that. I think. Go to the

01:17:37.645 --> 01:17:38.764
<v Speaker 1>front scan

01:17:39.885 --> 01:17:40.684
<v Speaker 1>scan.

01:17:42.844 --> 01:17:45.165
<v Speaker 1>Yeah. It returns an integer. That's number of

01:17:45.820 --> 01:17:47.980
<v Speaker 1>patterns that that it matches and then an

01:17:47.980 --> 01:17:48.699
<v Speaker 1>error.

01:17:49.420 --> 01:17:51.179
<v Speaker 1>So I imagine the error

01:17:52.620 --> 01:17:53.900
<v Speaker 1>it gets when

01:17:56.380 --> 01:17:59.900
<v Speaker 1>whatever data it's reading go to whatever

01:18:02.585 --> 01:18:04.905
<v Speaker 1>whatever whatever pattern it gets doesn't match the

01:18:04.905 --> 01:18:07.385
<v Speaker 1>type of the value that you're writing into.

01:18:07.465 --> 01:18:08.185
<v Speaker 1>Okay.

01:18:08.345 --> 01:18:10.105
<v Speaker 1>So

01:18:12.920 --> 01:18:15.560
<v Speaker 1>what we could just say here is, basically,

01:18:15.560 --> 01:18:17.880
<v Speaker 1>if n does equal three

01:18:18.360 --> 01:18:20.520
<v Speaker 1>or error does equal nil,

01:18:20.840 --> 01:18:21.640
<v Speaker 1>discontinue.

01:18:23.000 --> 01:18:23.640
<v Speaker 1>But

01:18:23.880 --> 01:18:26.680
<v Speaker 1>let's also just for our own

01:18:26.760 --> 01:18:28.760
<v Speaker 1>own

01:18:27.915 --> 01:18:29.034
<v Speaker 1>satisfaction,

01:18:33.195 --> 01:18:35.755
<v Speaker 1>indicate that we failed to scan this line.

01:18:35.755 --> 01:18:36.395
<v Speaker 1>Yeah.

01:18:40.475 --> 01:18:42.470
<v Speaker 1>And, hopefully, the only things that pop up

01:18:42.470 --> 01:18:44.150
<v Speaker 1>are the, like, no

01:18:44.390 --> 01:18:45.030
<v Speaker 1>no.

01:18:45.270 --> 01:18:46.870
<v Speaker 1>Which one? Alright.

01:18:48.950 --> 01:18:50.790
<v Speaker 1>Think that's it. Looks good.

01:18:53.190 --> 01:18:54.994
<v Speaker 1>I feel like my friends are now. So

01:18:54.994 --> 01:18:56.755
<v Speaker 1>I don't where where I go wrong.

01:18:57.074 --> 01:18:58.275
<v Speaker 1>Alright. So we have

01:18:58.835 --> 01:19:00.594
<v Speaker 1>let me see what the range for the

01:19:00.594 --> 01:19:01.235
<v Speaker 1>rules.

01:19:03.315 --> 01:19:04.435
<v Speaker 1>Alright. So let's see what that does.

01:19:11.570 --> 01:19:12.290
<v Speaker 0>Nice.

01:19:14.130 --> 01:19:15.650
<v Speaker 0>I think all the fails are in the

01:19:15.650 --> 01:19:16.530
<v Speaker 0>other bags.

01:19:17.490 --> 01:19:18.450
<v Speaker 0>Yep. Two of them.

01:19:19.155 --> 01:19:20.755
<v Speaker 1>I hate to admit it. I'm like I

01:19:20.755 --> 01:19:22.355
<v Speaker 1>said, I'm suffering from a little bit of

01:19:22.355 --> 01:19:24.434
<v Speaker 1>live coding pressure. I don't even see the

01:19:24.434 --> 01:19:25.635
<v Speaker 1>failures right now.

01:19:27.155 --> 01:19:28.994
<v Speaker 0>There's just the the bottom six lines are

01:19:28.994 --> 01:19:30.835
<v Speaker 0>the two failures because the last two bags

01:19:30.835 --> 01:19:31.074
<v Speaker 0>are

01:19:33.970 --> 01:19:37.650
<v Speaker 1>Yeah. Great. Perfect. And so barring that failure,

01:19:37.650 --> 01:19:39.650
<v Speaker 1>let's print out our

01:19:40.930 --> 01:19:42.050
<v Speaker 1>account.

01:19:43.970 --> 01:19:45.090
<v Speaker 1>Oh, let's say

01:19:46.770 --> 01:19:48.530
<v Speaker 1>our node

01:19:49.054 --> 01:19:50.655
<v Speaker 1>name is

01:19:53.855 --> 01:19:56.974
<v Speaker 1>word one plus space word two.

01:19:58.494 --> 01:20:00.735
<v Speaker 1>And then let's reconstruct our node here. So

01:20:03.780 --> 01:20:05.219
<v Speaker 1>found rule.

01:20:08.820 --> 01:20:10.340
<v Speaker 1>B is an s.

01:20:12.260 --> 01:20:14.420
<v Speaker 1>My dog's under my desk right now trying

01:20:14.420 --> 01:20:15.620
<v Speaker 1>to convince me to throw a ball with

01:20:15.620 --> 01:20:16.739
<v Speaker 1>her right now. It's my

01:20:17.220 --> 01:20:17.460
<v Speaker 1>heart.

01:20:19.915 --> 01:20:20.875
<v Speaker 1>And so

01:20:21.035 --> 01:20:21.915
<v Speaker 1>count

01:20:22.075 --> 01:20:23.035
<v Speaker 1>mode.

01:20:24.075 --> 01:20:24.475
<v Speaker 1>Okay.

01:20:30.790 --> 01:20:32.790
<v Speaker 1>Great.

01:20:37.990 --> 01:20:40.390
<v Speaker 1>Cool. So we prep for found.

01:20:42.895 --> 01:20:45.535
<v Speaker 1>Awesome. So we found rule one, bright white.

01:20:45.615 --> 01:20:47.375
<v Speaker 1>Rule two, muted yellow.

01:20:49.295 --> 01:20:51.215
<v Speaker 1>And so if we look at our input,

01:20:53.615 --> 01:20:55.455
<v Speaker 1>light red bags contain

01:20:56.190 --> 01:20:56.830
<v Speaker 1>white,

01:20:57.710 --> 01:20:58.830
<v Speaker 1>muted yellow.

01:20:59.310 --> 01:21:00.830
<v Speaker 1>I'm gonna go with this for now. Are

01:21:00.830 --> 01:21:02.510
<v Speaker 1>you okay with it? Uh-huh.

01:21:02.830 --> 01:21:06.430
<v Speaker 1>Okay. Alright. So let's construct our graph using

01:21:06.430 --> 01:21:08.350
<v Speaker 1>this now. So each one of those are

01:21:08.350 --> 01:21:10.190
<v Speaker 1>rules. So we start with

01:21:11.915 --> 01:21:13.514
<v Speaker 1>let's start with a

01:21:14.635 --> 01:21:15.675
<v Speaker 1>rule set,

01:21:17.995 --> 01:21:20.715
<v Speaker 1>and that's gonna be initialized to

01:21:20.875 --> 01:21:22.155
<v Speaker 1>rule set

01:21:23.115 --> 01:21:24.315
<v Speaker 1>or a new rule set.

01:21:25.389 --> 01:21:26.189
<v Speaker 1>And

01:21:28.030 --> 01:21:29.629
<v Speaker 1>for each rule we read,

01:21:31.710 --> 01:21:33.309
<v Speaker 1>we have a

01:21:37.070 --> 01:21:38.030
<v Speaker 1>rule name.

01:21:39.844 --> 01:21:42.244
<v Speaker 1>That would be part one.

01:21:46.885 --> 01:21:48.804
<v Speaker 1>Let's see what else.

01:21:49.125 --> 01:21:51.125
<v Speaker 1>And so for each role name in our

01:21:51.125 --> 01:21:54.165
<v Speaker 1>rule set, we could say

01:21:58.909 --> 01:22:01.070
<v Speaker 1>we wanna append a rule.

01:22:02.110 --> 01:22:04.269
<v Speaker 1>So, actually, let's start the new

01:22:06.429 --> 01:22:07.869
<v Speaker 1>rules. So

01:22:08.030 --> 01:22:09.630
<v Speaker 1>rules equals

01:22:09.555 --> 01:22:11.235
<v Speaker 1>an empty rules size.

01:22:11.715 --> 01:22:14.275
<v Speaker 1>And so for each rule, we wanna say

01:22:14.675 --> 01:22:16.675
<v Speaker 1>rules equals append

01:22:18.515 --> 01:22:19.395
<v Speaker 1>rules,

01:22:19.795 --> 01:22:21.395
<v Speaker 1>and the value we wanna pin to that

01:22:21.395 --> 01:22:22.755
<v Speaker 1>is a rule

01:22:23.080 --> 01:22:24.039
<v Speaker 1>containing

01:22:25.320 --> 01:22:27.480
<v Speaker 1>do you remember our our rule value? I'm

01:22:27.480 --> 01:22:29.400
<v Speaker 1>gonna split this. I'm sorry. We're kinda

01:22:31.560 --> 01:22:32.519
<v Speaker 1>getting into

01:22:33.719 --> 01:22:35.480
<v Speaker 0>It was quantity and name, if that's what

01:22:35.480 --> 01:22:35.960
<v Speaker 0>you're looking for.

01:22:37.335 --> 01:22:38.695
<v Speaker 1>Yeah. Thank you.

01:22:45.255 --> 01:22:46.374
<v Speaker 1>Quantity

01:22:46.454 --> 01:22:47.815
<v Speaker 1>would be

01:22:49.360 --> 01:22:51.360
<v Speaker 1>count. I said it's called account, but I

01:22:51.360 --> 01:22:52.639
<v Speaker 1>should probably call it

01:22:54.160 --> 01:22:55.520
<v Speaker 1>quantity just to

01:22:56.239 --> 01:22:57.360
<v Speaker 1>keep everything

01:22:57.920 --> 01:22:59.840
<v Speaker 1>keep all my terminology consistent.

01:23:04.175 --> 01:23:06.655
<v Speaker 1>That's the p is quantity.

01:23:08.015 --> 01:23:08.655
<v Speaker 1>And

01:23:10.815 --> 01:23:11.535
<v Speaker 0>Name is.

01:23:17.650 --> 01:23:20.130
<v Speaker 1>Sweet. And then once all of this is

01:23:20.130 --> 01:23:21.489
<v Speaker 1>done, we could say

01:23:25.650 --> 01:23:26.369
<v Speaker 1>role

01:23:26.530 --> 01:23:27.169
<v Speaker 1>set.

01:23:27.330 --> 01:23:28.610
<v Speaker 1>Your name

01:23:29.010 --> 01:23:29.889
<v Speaker 1>equals

01:23:31.775 --> 01:23:33.215
<v Speaker 1>rules.

01:23:34.175 --> 01:23:36.495
<v Speaker 1>And at the very end, let's

01:23:38.895 --> 01:23:40.495
<v Speaker 1>let's return rule set.

01:23:42.015 --> 01:23:43.935
<v Speaker 0>Yeah. Then we're start against that one we

01:23:43.935 --> 01:23:44.895
<v Speaker 0>built up earlier. Right?

01:23:45.800 --> 01:23:47.239
<v Speaker 1>Yes. Exactly.

01:23:48.760 --> 01:23:50.680
<v Speaker 1>And so I'm feeling All coming together. It's

01:23:50.680 --> 01:23:52.360
<v Speaker 0>all it's all coming. So

01:23:55.880 --> 01:23:58.954
<v Speaker 1>and, again, I apologize for, like, the terminology.

01:23:58.954 --> 01:24:00.635
<v Speaker 1>And as you could as you're as you're

01:24:00.635 --> 01:24:02.635
<v Speaker 1>aware, all this is kind of evolving.

01:24:02.954 --> 01:24:05.355
<v Speaker 1>And in an ideal world, maybe some of

01:24:05.355 --> 01:24:07.994
<v Speaker 1>the variable names and other things that we

01:24:07.994 --> 01:24:10.795
<v Speaker 1>use might be better than this or more

01:24:10.795 --> 01:24:12.554
<v Speaker 1>better or better thought out, but

01:24:13.280 --> 01:24:14.800
<v Speaker 1>it is what it is for now.

01:24:15.840 --> 01:24:16.559
<v Speaker 1>Alright.

01:24:17.120 --> 01:24:17.760
<v Speaker 1>Oops.

01:24:19.040 --> 01:24:19.920
<v Speaker 1>Okay.

01:24:21.040 --> 01:24:23.520
<v Speaker 1>So I feel like I went wrong. So

01:24:23.680 --> 01:24:26.080
<v Speaker 0>It doesn't like that redefinition of rules on

01:24:26.080 --> 01:24:29.295
<v Speaker 0>test on 13 because it's defined 21 above.

01:24:30.655 --> 01:24:31.855
<v Speaker 0>Sorry. Down a bit.

01:24:32.175 --> 01:24:34.495
<v Speaker 0>Underneath the second blue comment, you've got a

01:24:34.495 --> 01:24:35.855
<v Speaker 0>redefinition of rules.

01:24:36.895 --> 01:24:37.695
<v Speaker 1>Okay. Thank you.

01:24:42.110 --> 01:24:44.590
<v Speaker 1>So how should I mitigate that? I think

01:24:44.590 --> 01:24:46.110
<v Speaker 0>the first one should be, like, rule list

01:24:46.110 --> 01:24:48.030
<v Speaker 0>or rule string or something like that because

01:24:48.030 --> 01:24:48.669
<v Speaker 0>it's

01:24:49.949 --> 01:24:51.230
<v Speaker 0>they're not really rules yet.

01:24:53.915 --> 01:24:54.555
<v Speaker 1>Gotcha.

01:24:54.875 --> 01:24:56.235
<v Speaker 1>What's the rule

01:24:56.315 --> 01:24:56.875
<v Speaker 1>list?

01:25:11.130 --> 01:25:13.929
<v Speaker 0>And then the range and two two down

01:25:13.929 --> 01:25:15.050
<v Speaker 0>is rule list.

01:25:17.610 --> 01:25:17.929
<v Speaker 1>K.

01:25:26.305 --> 01:25:28.305
<v Speaker 1>It's still very unhappy. I need to play

01:25:28.305 --> 01:25:28.865
<v Speaker 1>that.

01:25:31.585 --> 01:25:32.225
<v Speaker 1>Oh,

01:25:32.865 --> 01:25:34.145
<v Speaker 1>role list.

01:25:34.785 --> 01:25:36.969
<v Speaker 1>We want that to be rules list. So

01:25:36.970 --> 01:25:38.410
<v Speaker 1>rule list

01:25:38.490 --> 01:25:39.450
<v Speaker 1>rules

01:25:39.770 --> 01:25:40.570
<v Speaker 1>list.

01:25:43.530 --> 01:25:47.930
<v Speaker 1>Undefined

01:25:47.930 --> 01:25:48.490
<v Speaker 1>quantity,

01:25:51.855 --> 01:25:54.255
<v Speaker 1>p u a n t I t y,

01:25:54.255 --> 01:25:56.175
<v Speaker 1>p u a n alright. Let me do

01:25:56.175 --> 01:25:57.055
<v Speaker 1>it. Learn how to spell.

01:26:01.270 --> 01:26:02.389
<v Speaker 1>And count.

01:26:08.310 --> 01:26:09.590
<v Speaker 1>Okay.

01:26:09.989 --> 01:26:10.789
<v Speaker 1>Great.

01:26:10.790 --> 01:26:14.710
<v Speaker 1>So now we're logging. So now now, theoretically,

01:26:15.525 --> 01:26:16.245
<v Speaker 1>our

01:26:16.405 --> 01:26:18.565
<v Speaker 1>result of scan should

01:26:19.045 --> 01:26:21.605
<v Speaker 1>be a proper, like, rule set. And so

01:26:21.605 --> 01:26:22.965
<v Speaker 1>we should be able to say, like, t

01:26:22.965 --> 01:26:24.085
<v Speaker 1>dot log.

01:26:25.205 --> 01:26:25.765
<v Speaker 1>I

01:26:28.325 --> 01:26:29.525
<v Speaker 1>thought I just put a ball right, like,

01:26:29.525 --> 01:26:30.565
<v Speaker 1>on my lap. No.

01:26:34.900 --> 01:26:36.100
<v Speaker 1>And so we should be able to print

01:26:36.100 --> 01:26:36.739
<v Speaker 1>this,

01:26:37.620 --> 01:26:39.780
<v Speaker 1>and this is what we get. Alright. So

01:26:39.780 --> 01:26:41.619
<v Speaker 1>map, one bright bag.

01:26:42.739 --> 01:26:44.500
<v Speaker 1>Okay. So this is actually a problem.

01:26:48.425 --> 01:26:49.945
<v Speaker 1>Oh, okay. So

01:26:51.065 --> 01:26:52.264
<v Speaker 1>the problem is

01:26:52.505 --> 01:26:54.905
<v Speaker 1>the index of my rule. That should be

01:26:54.985 --> 01:26:56.504
<v Speaker 1>well, I was calling

01:26:57.224 --> 01:26:57.864
<v Speaker 1>my

01:26:58.105 --> 01:26:58.665
<v Speaker 1>root.

01:26:59.890 --> 01:27:01.330
<v Speaker 1>So that's part zero.

01:27:03.170 --> 01:27:05.969
<v Speaker 1>What I'm putting in there now, rule name.

01:27:06.130 --> 01:27:07.250
<v Speaker 1>Next rule.

01:27:07.490 --> 01:27:09.170
<v Speaker 1>It's

01:27:09.170 --> 01:27:11.250
<v Speaker 1>part one. So, yeah, what I want here

01:27:11.250 --> 01:27:11.889
<v Speaker 1>is

01:27:12.450 --> 01:27:13.410
<v Speaker 1>part, oops,

01:27:15.165 --> 01:27:16.525
<v Speaker 1>part zero,

01:27:17.885 --> 01:27:18.525
<v Speaker 1>which

01:27:23.324 --> 01:27:24.925
<v Speaker 1>I think is out of scope.

01:27:25.244 --> 01:27:27.405
<v Speaker 0>I know. I said real name is is

01:27:27.565 --> 01:27:28.764
<v Speaker 0>defined and unused.

01:27:34.000 --> 01:27:35.679
<v Speaker 1>Oh, okay. I just did it on that.

01:27:35.679 --> 01:27:36.399
<v Speaker 1>Sorry.

01:27:39.039 --> 01:27:40.719
<v Speaker 0>Oh, no. I don't think that was a

01:27:40.719 --> 01:27:43.199
<v Speaker 0>problem. Oh, yeah. Okay. Okay. Go for that.

01:27:43.199 --> 01:27:43.599
<v Speaker 0>That's fine.

01:27:44.905 --> 01:27:45.625
<v Speaker 1>Alright.

01:27:45.865 --> 01:27:47.305
<v Speaker 1>Okay. Great.

01:27:47.785 --> 01:27:48.905
<v Speaker 1>Alright.

01:27:48.905 --> 01:27:50.905
<v Speaker 1>So we have our map. This is bright

01:27:50.905 --> 01:27:51.545
<v Speaker 1>white,

01:27:52.265 --> 01:27:53.625
<v Speaker 1>and it points to

01:27:55.705 --> 01:27:58.119
<v Speaker 1>So should we should we copy the map

01:27:58.119 --> 01:28:00.679
<v Speaker 0>definition from our other test into that one?

01:28:00.679 --> 01:28:03.480
<v Speaker 0>It just assert against it. Totally. That's a

01:28:03.480 --> 01:28:03.960
<v Speaker 1>great idea.

01:28:10.085 --> 01:28:10.965
<v Speaker 1>So

01:28:11.125 --> 01:28:14.485
<v Speaker 1>where is that? It's the rules test.

01:28:16.324 --> 01:28:18.245
<v Speaker 0>So I should be able to you wanna

01:28:18.245 --> 01:28:19.284
<v Speaker 1>call that out,

01:28:19.925 --> 01:28:22.485
<v Speaker 1>and we'll paste it

01:28:24.090 --> 01:28:24.969
<v Speaker 1>here.

01:28:26.170 --> 01:28:27.450
<v Speaker 1>I'm just gonna get rid of this other

01:28:27.450 --> 01:28:28.090
<v Speaker 1>clutter.

01:28:29.930 --> 01:28:31.130
<v Speaker 1>Okay. So

01:28:32.810 --> 01:28:34.890
<v Speaker 1>and so maybe we could stash this in,

01:28:34.890 --> 01:28:37.450
<v Speaker 1>like, parsed rule

01:28:38.945 --> 01:28:39.665
<v Speaker 1>set.

01:28:41.505 --> 01:28:43.905
<v Speaker 1>And now let's just visually compare it because

01:28:44.225 --> 01:28:46.305
<v Speaker 1>what I'm afraid of is so what I'm

01:28:46.305 --> 01:28:48.945
<v Speaker 1>thinking is we could use, like, reflect deep

01:28:48.945 --> 01:28:50.785
<v Speaker 1>equal to see if they're actually the same.

01:28:51.330 --> 01:28:52.449
<v Speaker 1>I don't know yet.

01:28:52.850 --> 01:28:55.250
<v Speaker 1>But just to get a sense of satisfaction,

01:28:55.250 --> 01:28:56.370
<v Speaker 1>what I'd like to is just print into

01:28:56.370 --> 01:28:57.490
<v Speaker 1>the screen and see if we could visually

01:28:57.490 --> 01:28:58.930
<v Speaker 1>compare that. Are you okay with that? Or

01:28:58.930 --> 01:29:00.690
<v Speaker 1>you think I Yeah. Can you do a

01:29:00.690 --> 01:29:02.530
<v Speaker 0>search first for d p o t?

01:29:05.375 --> 01:29:06.335
<v Speaker 1>One more time?

01:29:06.735 --> 01:29:09.135
<v Speaker 0>Do a search for d p o t.

01:29:09.135 --> 01:29:11.055
<v Speaker 0>It's just a typo that you were you

01:29:11.055 --> 01:29:12.655
<v Speaker 0>must have then command.

01:29:13.295 --> 01:29:14.895
<v Speaker 0>Yeah. So that should be dotted.

01:29:15.135 --> 01:29:16.735
<v Speaker 0>You were trying to paste in there. Got

01:29:16.735 --> 01:29:17.775
<v Speaker 1>it. Thank you.

01:29:19.310 --> 01:29:20.030
<v Speaker 1>Alright.

01:29:20.510 --> 01:29:22.909
<v Speaker 1>And so just t dot log f

01:29:23.150 --> 01:29:24.030
<v Speaker 1>percent

01:29:24.430 --> 01:29:25.230
<v Speaker 1>v

01:29:25.870 --> 01:29:26.590
<v Speaker 1>r

01:29:27.230 --> 01:29:29.630
<v Speaker 1>and then t dot log f

01:29:30.270 --> 01:29:31.150
<v Speaker 1>cost

01:29:31.870 --> 01:29:32.750
<v Speaker 1>rule set.

01:29:36.594 --> 01:29:38.114
<v Speaker 1>Alright. And so

01:29:40.275 --> 01:29:43.235
<v Speaker 1>at a glance, they look identical. Quantity

01:29:43.235 --> 01:29:44.195
<v Speaker 1>six.

01:29:44.275 --> 01:29:47.235
<v Speaker 1>I'm willing that that was a typo somewhere,

01:29:47.235 --> 01:29:49.640
<v Speaker 1>maybe, but we'll see. Alright. So we have

01:29:49.640 --> 01:29:51.480
<v Speaker 1>a map, bright white,

01:29:53.320 --> 01:29:55.080
<v Speaker 1>quantity one, shiny gold,

01:29:55.560 --> 01:29:58.040
<v Speaker 1>dark olive, quantity three, faded blue,

01:29:58.520 --> 01:29:59.160
<v Speaker 1>24.

01:30:03.515 --> 01:30:05.675
<v Speaker 0>I think the ordering is just different.

01:30:09.915 --> 01:30:11.355
<v Speaker 1>Alright. Well, so No. Maybe not.

01:30:14.430 --> 01:30:15.789
<v Speaker 0>Where did they deviate?

01:30:16.830 --> 01:30:17.789
<v Speaker 1>What's that again?

01:30:18.270 --> 01:30:19.870
<v Speaker 0>I'm just trying to see where the the

01:30:19.870 --> 01:30:22.670
<v Speaker 0>deviate after faded blue into light red.

01:30:24.510 --> 01:30:25.309
<v Speaker 0>Interesting.

01:30:26.830 --> 01:30:28.590
<v Speaker 0>The end of the the end of the

01:30:28.590 --> 01:30:31.365
<v Speaker 0>second line after faded blue. So the faded

01:30:31.365 --> 01:30:33.925
<v Speaker 0>blue on the parsed lines doesn't have any

01:30:33.925 --> 01:30:34.565
<v Speaker 0>rules,

01:30:34.725 --> 01:30:36.405
<v Speaker 0>which I actually think is correct. So did

01:30:36.405 --> 01:30:38.485
<v Speaker 0>we modify the test case? Oh, yeah. Yeah.

01:30:38.485 --> 01:30:40.565
<v Speaker 1>Yeah. We did. We did. Yeah. Yeah.

01:30:42.085 --> 01:30:43.765
<v Speaker 0>Sabotaging ourselves. Yeah.

01:30:46.260 --> 01:30:47.060
<v Speaker 1>Oops.

01:30:47.140 --> 01:30:48.340
<v Speaker 1>Alright. So

01:30:50.260 --> 01:30:52.020
<v Speaker 1>that looks right. In fact, they ended at

01:30:52.020 --> 01:30:52.900
<v Speaker 1>the right place.

01:30:53.140 --> 01:30:54.980
<v Speaker 1>Yeah. In fact, I think we could do

01:30:54.980 --> 01:30:55.540
<v Speaker 1>something like

01:30:57.060 --> 01:30:59.380
<v Speaker 1>let's see. Photoshop reflects

01:30:59.380 --> 01:31:00.420
<v Speaker 1>equal.

01:31:01.645 --> 01:31:02.445
<v Speaker 1>Alright.

01:31:04.205 --> 01:31:06.684
<v Speaker 1>So give two things. It turns a bull.

01:31:06.685 --> 01:31:09.005
<v Speaker 1>Alright. So let's check to see if

01:31:10.685 --> 01:31:12.364
<v Speaker 1>reflect deep

01:31:12.605 --> 01:31:13.725
<v Speaker 1>equal

01:31:14.140 --> 01:31:15.500
<v Speaker 1>r parsed

01:31:15.660 --> 01:31:16.780
<v Speaker 1>rule set.

01:31:19.660 --> 01:31:21.179
<v Speaker 1>If that equals

01:31:22.300 --> 01:31:23.179
<v Speaker 1>false,

01:31:23.500 --> 01:31:24.380
<v Speaker 1>then

01:31:25.180 --> 01:31:26.700
<v Speaker 1>t dot fatal

01:31:28.045 --> 01:31:31.245
<v Speaker 1>Ours data that doesn't match

01:31:31.405 --> 01:31:32.685
<v Speaker 1>expected.

01:31:33.965 --> 01:31:34.764
<v Speaker 1>Whatever.

01:31:35.245 --> 01:31:38.285
<v Speaker 1>This isn't yeah. This isn't productive code. Thank

01:31:38.285 --> 01:31:38.685
<v Speaker 1>you.

01:31:39.325 --> 01:31:39.725
<v Speaker 1>Alright.

01:31:40.610 --> 01:31:42.929
<v Speaker 1>So where are we? So let's run this

01:31:42.929 --> 01:31:44.689
<v Speaker 1>test and see if it fails or passes.

01:31:44.929 --> 01:31:46.609
<v Speaker 1>Hey. It passed. Cool.

01:31:48.289 --> 01:31:49.090
<v Speaker 1>Alright.

01:31:49.489 --> 01:31:50.050
<v Speaker 1>So

01:31:50.369 --> 01:31:52.210
<v Speaker 1>how far are are we into this? So

01:31:52.210 --> 01:31:54.050
<v Speaker 1>an hour and twenty four minutes in. Actually,

01:31:54.050 --> 01:31:55.090
<v Speaker 1>maybe a little bit more than that.

01:31:56.645 --> 01:31:59.125
<v Speaker 1>If you just add kinda, like, random stuff.

01:31:59.365 --> 01:32:02.165
<v Speaker 1>We've successfully parsed the data. We think what

01:32:02.165 --> 01:32:03.685
<v Speaker 1>we have successfully

01:32:03.685 --> 01:32:06.005
<v Speaker 1>traverses the the the graph.

01:32:06.325 --> 01:32:07.685
<v Speaker 1>So now what I'm ready to do is

01:32:07.685 --> 01:32:10.580
<v Speaker 1>just try this on the test data that's

01:32:10.580 --> 01:32:12.099
<v Speaker 1>included. Alright. Are you good with that, or

01:32:12.099 --> 01:32:13.139
<v Speaker 1>do you see anything else that we need

01:32:13.139 --> 01:32:15.219
<v Speaker 1>to do? No. I think we smashed it.

01:32:15.300 --> 01:32:16.820
<v Speaker 1>Okay. I think so.

01:32:19.219 --> 01:32:22.020
<v Speaker 1>But whatever whatever definition to smash,

01:32:23.675 --> 01:32:25.595
<v Speaker 1>one of these. Right? Alright. So let's just

01:32:25.595 --> 01:32:27.515
<v Speaker 1>copy all the data out. And so something

01:32:27.515 --> 01:32:28.715
<v Speaker 1>nice we could do is we could say,

01:32:28.715 --> 01:32:30.075
<v Speaker 1>tap this input

01:32:30.315 --> 01:32:31.355
<v Speaker 1>dot text

01:32:32.395 --> 01:32:33.595
<v Speaker 1>and paste it.

01:32:34.075 --> 01:32:36.475
<v Speaker 1>Alright. So now we have this nice input

01:32:36.475 --> 01:32:39.730
<v Speaker 1>dot text. And so within GoTest, we can

01:32:40.210 --> 01:32:41.010
<v Speaker 1>actually

01:32:43.810 --> 01:32:45.170
<v Speaker 1>load local

01:32:45.410 --> 01:32:47.409
<v Speaker 1>or load test files, and

01:32:48.929 --> 01:32:51.010
<v Speaker 1>and and the test is run

01:32:52.475 --> 01:32:54.155
<v Speaker 1>with the current working directory,

01:32:54.315 --> 01:32:56.395
<v Speaker 1>the same as, like, your package. And so

01:32:56.395 --> 01:32:58.555
<v Speaker 1>I could refer to any, like, test files

01:32:58.555 --> 01:32:59.995
<v Speaker 1>just using, you know, sort of, like, the

01:32:59.995 --> 01:33:01.995
<v Speaker 1>current current path. So I could do something

01:33:01.995 --> 01:33:03.435
<v Speaker 1>like

01:33:06.440 --> 01:33:07.240
<v Speaker 1>so

01:33:07.800 --> 01:33:09.240
<v Speaker 1>let's go back to our

01:33:11.320 --> 01:33:13.320
<v Speaker 1>rule test profile.

01:33:13.560 --> 01:33:15.400
<v Speaker 0>I mean, we could we just we could

01:33:15.400 --> 01:33:17.960
<v Speaker 0>just create, like, a main dot goal, scan

01:33:18.335 --> 01:33:20.655
<v Speaker 0>that file with an IO reader, and then

01:33:20.655 --> 01:33:21.295
<v Speaker 0>call

01:33:21.775 --> 01:33:24.255
<v Speaker 0>finder. Right? And then open a value.

01:33:24.495 --> 01:33:25.614
<v Speaker 1>Yeah. Or we could do it within a

01:33:25.614 --> 01:33:26.895
<v Speaker 1>test. Right? So, like, we don't have a

01:33:26.895 --> 01:33:28.574
<v Speaker 1>main package here. So we could simply say,

01:33:28.574 --> 01:33:30.094
<v Speaker 1>like, funk test.

01:33:35.750 --> 01:33:37.190
<v Speaker 1>I don't I can't think of a good

01:33:37.190 --> 01:33:39.030
<v Speaker 1>name for this now. I'm feeling a little

01:33:39.030 --> 01:33:41.190
<v Speaker 1>bit embarrassed by not naming this well, but

01:33:41.190 --> 01:33:42.710
<v Speaker 1>this is kind of like our final test.

01:33:42.710 --> 01:33:45.030
<v Speaker 1>Right? So let's just call this a o

01:33:45.030 --> 01:33:46.229
<v Speaker 1>c seven

01:33:46.389 --> 01:33:47.110
<v Speaker 1>part

01:33:47.425 --> 01:33:48.145
<v Speaker 1>one

01:33:48.385 --> 01:33:49.745
<v Speaker 1>t testing

01:33:51.025 --> 01:33:51.905
<v Speaker 1>dot t.

01:33:52.305 --> 01:33:53.425
<v Speaker 1>And so what we could do is we

01:33:53.425 --> 01:33:54.945
<v Speaker 1>could say, like, in the file,

01:33:55.185 --> 01:33:57.265
<v Speaker 1>error equals OS open,

01:33:57.665 --> 01:33:59.265
<v Speaker 1>and what do we name it? We put

01:33:59.265 --> 01:34:01.505
<v Speaker 1>that text. I guess we'll find out soon

01:34:01.505 --> 01:34:01.745
<v Speaker 1>enough.

01:34:02.420 --> 01:34:04.340
<v Speaker 1>If error does equal nil,

01:34:04.980 --> 01:34:06.340
<v Speaker 1>then we encountered

01:34:06.340 --> 01:34:08.500
<v Speaker 1>some problems. So t dot fail

01:34:08.660 --> 01:34:09.940
<v Speaker 1>or t dot fail,

01:34:10.260 --> 01:34:12.580
<v Speaker 1>and then out of the error. Otherwise, let's

01:34:12.580 --> 01:34:13.460
<v Speaker 1>defer

01:34:13.700 --> 01:34:14.580
<v Speaker 1>posing

01:34:14.580 --> 01:34:16.179
<v Speaker 1>our our input.

01:34:16.260 --> 01:34:16.580
<v Speaker 1>Oops.

01:34:18.075 --> 01:34:20.074
<v Speaker 1>And then now we could say

01:34:21.035 --> 01:34:23.195
<v Speaker 1>rule set our rules

01:34:23.995 --> 01:34:24.954
<v Speaker 1>equals

01:34:25.275 --> 01:34:26.954
<v Speaker 1>oh, let's call it rule

01:34:28.075 --> 01:34:29.755
<v Speaker 1>set equals

01:34:30.715 --> 01:34:32.635
<v Speaker 1>scan

01:34:32.190 --> 01:34:33.389
<v Speaker 1>I

01:34:38.350 --> 01:34:39.950
<v Speaker 1>don't remember if we chose to return an

01:34:39.950 --> 01:34:41.950
<v Speaker 1>error. So I guess, typically, what I'd like

01:34:41.950 --> 01:34:43.310
<v Speaker 1>to do is return an error of some

01:34:43.310 --> 01:34:44.830
<v Speaker 1>kind, but where,

01:34:45.945 --> 01:34:47.704
<v Speaker 1>yeah. And so

01:34:48.344 --> 01:34:49.465
<v Speaker 1>we'll set

01:34:49.545 --> 01:34:50.425
<v Speaker 1>count,

01:34:51.784 --> 01:34:52.505
<v Speaker 1>and

01:34:52.744 --> 01:34:54.104
<v Speaker 1>let's look at our

01:34:55.784 --> 01:34:57.945
<v Speaker 1>test here. So we wanna count

01:34:58.344 --> 01:35:00.824
<v Speaker 1>shiny gold. Right? So

01:35:03.969 --> 01:35:05.650
<v Speaker 1>and let's log

01:35:07.810 --> 01:35:09.090
<v Speaker 1>the results of that.

01:35:12.690 --> 01:35:14.850
<v Speaker 1>Alright. Here we go. So that's it. So

01:35:15.505 --> 01:35:16.385
<v Speaker 1>we

01:35:16.545 --> 01:35:17.265
<v Speaker 1>we

01:35:17.745 --> 01:35:19.425
<v Speaker 1>kind of modeled our data type,

01:35:20.225 --> 01:35:22.385
<v Speaker 1>implemented traversing our our struct

01:35:22.785 --> 01:35:24.305
<v Speaker 1>our our our data structure.

01:35:24.465 --> 01:35:27.345
<v Speaker 1>We wrote a parser for our input and,

01:35:27.345 --> 01:35:29.665
<v Speaker 1>in fact, generated the the our graph.

01:35:30.340 --> 01:35:32.660
<v Speaker 1>And so now we're gonna this is where

01:35:32.660 --> 01:35:34.260
<v Speaker 1>the kind of rubber meets the road,

01:35:34.820 --> 01:35:36.740
<v Speaker 1>and we're gonna run a test for

01:35:37.060 --> 01:35:38.420
<v Speaker 1>a o c one

01:35:40.500 --> 01:35:41.300
<v Speaker 1>part

01:35:41.620 --> 01:35:42.820
<v Speaker 1>one

01:35:44.395 --> 01:35:45.675
<v Speaker 1>to build a test

01:35:47.915 --> 01:35:48.635
<v Speaker 1>when

01:35:50.875 --> 01:35:51.594
<v Speaker 1>that

01:35:51.915 --> 01:35:52.955
<v Speaker 1>verbose.

01:35:54.235 --> 01:35:56.715
<v Speaker 1>Yeah. There's an error. Too many arguments called

01:35:56.715 --> 01:35:57.115
<v Speaker 1>fatal.

01:36:01.650 --> 01:36:04.930
<v Speaker 1>Oh, I'm sorry. It's Oh, fatal. Alright. Yeah.

01:36:07.330 --> 01:36:09.810
<v Speaker 1>Alright. So it's just getting producing a lot

01:36:09.810 --> 01:36:11.010
<v Speaker 1>of nice output,

01:36:11.090 --> 01:36:12.930
<v Speaker 1>and it counted a 12.

01:36:13.535 --> 01:36:15.855
<v Speaker 1>Is that the right answer? I don't know.

01:36:16.415 --> 01:36:18.495
<v Speaker 1>I'm

01:36:18.495 --> 01:36:20.655
<v Speaker 1>I'm super worried about this because

01:36:22.975 --> 01:36:25.455
<v Speaker 1>I've only I've only entered the wrong answer

01:36:25.455 --> 01:36:26.175
<v Speaker 1>once.

01:36:27.055 --> 01:36:28.094
<v Speaker 1>And

01:36:28.095 --> 01:36:29.055
<v Speaker 1>I was

01:36:29.640 --> 01:36:30.760
<v Speaker 1>and and so I felt like I was

01:36:30.760 --> 01:36:31.880
<v Speaker 1>kinda, like, on a roll.

01:36:32.679 --> 01:36:34.040
<v Speaker 1>And so I don't wanna do it twice.

01:36:34.040 --> 01:36:35.719
<v Speaker 1>But if you're good with it, I'm willing

01:36:35.719 --> 01:36:37.719
<v Speaker 1>to, like, type this into the into the

01:36:37.719 --> 01:36:39.719
<v Speaker 1>interface and see if this works. What do

01:36:39.719 --> 01:36:40.840
<v Speaker 1>you think? I alright.

01:36:43.655 --> 01:36:44.614
<v Speaker 1>Here we go.

01:36:45.575 --> 01:36:47.495
<v Speaker 1>So let's pull this tab over here.

01:36:48.375 --> 01:36:50.375
<v Speaker 1>What what do we say again? A 12?

01:36:50.375 --> 01:36:51.014
<v Speaker 0>Yeah.

01:36:51.495 --> 01:36:52.855
<v Speaker 1>Oh, jeez. Okay.

01:36:54.460 --> 01:36:56.059
<v Speaker 1>What do we do if this doesn't work?

01:36:56.139 --> 01:36:57.820
<v Speaker 1>Like, do we still go back to drawing

01:36:57.820 --> 01:36:58.860
<v Speaker 1>board or do we just say, you know

01:36:58.860 --> 01:37:00.460
<v Speaker 1>what? You gave me a good try. Yeah.

01:37:00.460 --> 01:37:01.579
<v Speaker 0>I've gone to the pub.

01:37:02.619 --> 01:37:03.739
<v Speaker 1>Alright. Here we go.

01:37:04.460 --> 01:37:05.579
<v Speaker 1>Ah, yes.

01:37:06.139 --> 01:37:07.099
<v Speaker 1>That was it.

01:37:07.579 --> 01:37:08.539
<v Speaker 1>We did it.

01:37:09.099 --> 01:37:11.985
<v Speaker 0>Good job. Nice. So I'm afraid to go

01:37:11.985 --> 01:37:13.985
<v Speaker 1>on part Oh, man. My dog's, like, really

01:37:13.985 --> 01:37:15.425
<v Speaker 1>harassing me. This is a good time to,

01:37:15.425 --> 01:37:17.345
<v Speaker 1>like, let her out and and take a

01:37:17.345 --> 01:37:18.545
<v Speaker 1>break. Is is that okay, or do you

01:37:18.545 --> 01:37:19.905
<v Speaker 1>wanna do you wanna say part two for

01:37:19.905 --> 01:37:22.385
<v Speaker 1>later? Yeah. Let's say part two for later.

01:37:22.385 --> 01:37:23.905
<v Speaker 0>I'm I've gotta have dinner with my wife

01:37:23.905 --> 01:37:24.945
<v Speaker 0>and stuff, but

01:37:25.369 --> 01:37:26.889
<v Speaker 0>I'll we can we can sort that out

01:37:26.889 --> 01:37:28.729
<v Speaker 0>for sure. Okay. Alright.

01:37:29.130 --> 01:37:30.329
<v Speaker 1>Did you do you wanna pick up later

01:37:30.329 --> 01:37:32.090
<v Speaker 1>on this evening, or did you wanna just

01:37:32.090 --> 01:37:33.610
<v Speaker 1>do it another time? Or do you wanna

01:37:33.610 --> 01:37:35.050
<v Speaker 1>just skip it and just say, like, hey,

01:37:35.050 --> 01:37:36.650
<v Speaker 1>this is how this is how I wanna

01:37:36.650 --> 01:37:37.690
<v Speaker 1>answer

01:37:37.690 --> 01:37:39.929
<v Speaker 1>part one of this admin of code thing.

01:37:42.664 --> 01:37:44.585
<v Speaker 0>See, you never know what part two is.

01:37:44.585 --> 01:37:46.105
<v Speaker 0>Sometimes it's, like, something you're gonna do in

01:37:46.105 --> 01:37:47.945
<v Speaker 0>fifteen, twenty minutes, and then sometimes it's something

01:37:47.945 --> 01:37:50.664
<v Speaker 0>that's, like, crazy bigger. Let's take a quick

01:37:50.664 --> 01:37:52.985
<v Speaker 1>look. Let's take a look. Yeah. Okay. Alright.

01:37:52.985 --> 01:37:53.465
<v Speaker 1>So

01:37:54.344 --> 01:37:56.264
<v Speaker 1>it's getting pretty expensive to fly these days,

01:37:56.800 --> 01:37:59.120
<v Speaker 1>not because of the ticket prices, but okay.

01:37:59.120 --> 01:38:00.320
<v Speaker 1>Let me let my dog out because she's

01:38:00.480 --> 01:38:02.400
<v Speaker 1>what's gonna happen is she's eventually gonna unplug

01:38:02.400 --> 01:38:02.960
<v Speaker 1>my computer.

01:38:24.405 --> 01:38:25.205
<v Speaker 0>It looks fun.

01:38:27.199 --> 01:38:28.400
<v Speaker 1>So consider

01:38:28.400 --> 01:38:30.320
<v Speaker 1>getting your shiny gold bag and the rules

01:38:30.320 --> 01:38:32.960
<v Speaker 1>from the above example. Contains zero other bags.

01:38:32.960 --> 01:38:33.360
<v Speaker 1>Contains

01:38:33.920 --> 01:38:36.000
<v Speaker 1>so a single shiny gold bag must contain

01:38:36.000 --> 01:38:37.920
<v Speaker 1>one dark aloe of that. It's

01:38:39.175 --> 01:38:40.135
<v Speaker 1>plus two

01:38:42.295 --> 01:38:44.295
<v Speaker 1>the 11 bags within each of those. So

01:38:44.295 --> 01:38:46.775
<v Speaker 1>this is exactly what you predicted. Right? Because

01:38:48.375 --> 01:38:50.135
<v Speaker 1>now what we wanna see is,

01:38:50.455 --> 01:38:51.095
<v Speaker 1>I think

01:38:56.520 --> 01:38:58.280
<v Speaker 1>oh, so, of course, the rules have a

01:38:58.280 --> 01:39:00.440
<v Speaker 1>small chance of giving several levels

01:39:00.600 --> 01:39:02.760
<v Speaker 1>deeper than this example. Be sure to count

01:39:02.760 --> 01:39:05.320
<v Speaker 1>all of the bags even if the nesting

01:39:05.320 --> 01:39:07.160
<v Speaker 1>becomes topologically impractical.

01:39:08.655 --> 01:39:12.255
<v Speaker 1>So here's another example. Shiny gold bags contains

01:39:12.255 --> 01:39:13.695
<v Speaker 1>two dark bags.

01:39:15.215 --> 01:39:17.375
<v Speaker 1>Dark red bags contains two

01:39:17.935 --> 01:39:19.375
<v Speaker 1>dark orange bags.

01:39:19.455 --> 01:39:22.015
<v Speaker 1>So this example, a single shiny gold bag

01:39:22.015 --> 01:39:22.735
<v Speaker 1>must contain

01:39:23.440 --> 01:39:24.639
<v Speaker 1>a 26

01:39:24.639 --> 01:39:25.760
<v Speaker 1>other bags.

01:39:27.280 --> 01:39:29.760
<v Speaker 1>Oh, so true. So it's okay.

01:39:37.395 --> 01:39:39.235
<v Speaker 1>Not because of ticket prices, but because of

01:39:39.235 --> 01:39:40.755
<v Speaker 1>the ridiculous number of bags you need to

01:39:40.755 --> 01:39:41.315
<v Speaker 1>fly.

01:39:41.635 --> 01:39:43.955
<v Speaker 1>Consider again your shiny gold bag and the

01:39:43.955 --> 01:39:45.715
<v Speaker 1>rules from the above example.

01:39:47.155 --> 01:39:47.875
<v Speaker 1>K?

01:39:48.035 --> 01:39:51.470
<v Speaker 1>So a single shiny gold bag must contain

01:39:51.470 --> 01:39:53.310
<v Speaker 1>one dark olive bag

01:39:55.870 --> 01:39:58.430
<v Speaker 1>and the seven bags within it plus

01:39:58.430 --> 01:39:59.070
<v Speaker 1>two.

01:39:59.950 --> 01:40:00.270
<v Speaker 1>And,

01:40:02.335 --> 01:40:04.735
<v Speaker 1>of course, these actual roles have smaller chance

01:40:04.735 --> 01:40:05.934
<v Speaker 1>at going through.

01:40:07.215 --> 01:40:09.455
<v Speaker 0>Yeah. So we have to recursively loop over

01:40:09.455 --> 01:40:10.335
<v Speaker 0>counting

01:40:10.335 --> 01:40:13.135
<v Speaker 0>all the quantities to get, like, a cumulative

01:40:13.135 --> 01:40:14.735
<v Speaker 0>sum of how many bags spent in all

01:40:14.735 --> 01:40:17.270
<v Speaker 0>the other bags. I think that's easy. Okay.

01:40:17.350 --> 01:40:18.630
<v Speaker 1>Let's let's try this.

01:40:19.510 --> 01:40:20.710
<v Speaker 1>Let's see if we can knock this out

01:40:20.710 --> 01:40:22.710
<v Speaker 1>in a few seconds. So

01:40:23.990 --> 01:40:25.510
<v Speaker 1>let's look at where will that go. So

01:40:25.510 --> 01:40:26.790
<v Speaker 1>I think all all we have to do

01:40:26.790 --> 01:40:27.429
<v Speaker 1>is

01:40:28.055 --> 01:40:29.415
<v Speaker 1>as we recurse,

01:40:29.895 --> 01:40:31.175
<v Speaker 1>we can accumulate

01:40:31.255 --> 01:40:31.975
<v Speaker 1>a

01:40:32.055 --> 01:40:34.295
<v Speaker 1>a sum. So let's say sum.

01:40:35.895 --> 01:40:37.335
<v Speaker 1>Let's say sum is a pointer.

01:40:51.820 --> 01:40:53.980
<v Speaker 1>Alright. So the base case of this is

01:40:53.980 --> 01:40:55.820
<v Speaker 1>if we find a bag that this could

01:40:55.820 --> 01:40:56.300
<v Speaker 1>fit in.

01:41:01.405 --> 01:41:02.204
<v Speaker 1>Oof.

01:41:02.284 --> 01:41:03.804
<v Speaker 1>Hold on. I need to look at this

01:41:03.804 --> 01:41:04.045
<v Speaker 1>again.

01:41:10.410 --> 01:41:13.050
<v Speaker 1>So for each node, like so what I'm

01:41:13.050 --> 01:41:14.250
<v Speaker 1>imagining is that

01:41:14.810 --> 01:41:17.290
<v Speaker 1>as we path it's a path from our

01:41:17.290 --> 01:41:19.770
<v Speaker 1>root to the actual node that we're looking

01:41:19.770 --> 01:41:20.329
<v Speaker 1>for.

01:41:20.650 --> 01:41:22.489
<v Speaker 1>I think what we wanna do is

01:41:23.065 --> 01:41:25.385
<v Speaker 1>accumulate a sum that is

01:41:26.025 --> 01:41:26.664
<v Speaker 1>for

01:41:29.625 --> 01:41:30.344
<v Speaker 1>each

01:41:31.704 --> 01:41:32.664
<v Speaker 1>sub bag

01:41:34.664 --> 01:41:36.425
<v Speaker 1>that contain our

01:41:37.310 --> 01:41:38.989
<v Speaker 1>bag that we're searching for.

01:41:39.470 --> 01:41:40.110
<v Speaker 1>So

01:41:40.670 --> 01:41:40.989
<v Speaker 1>this

01:41:41.470 --> 01:41:42.909
<v Speaker 1>oh, let's see. So

01:41:44.830 --> 01:41:45.550
<v Speaker 1>so for

01:41:46.110 --> 01:41:48.829
<v Speaker 1>a little shiny old bag must contain one

01:41:49.790 --> 01:41:51.310
<v Speaker 1>dark olive bag

01:41:52.565 --> 01:41:54.084
<v Speaker 1>and the seven bags

01:41:54.405 --> 01:41:55.445
<v Speaker 1>within it

01:41:56.165 --> 01:41:58.965
<v Speaker 1>plus two vibrant plum bags.

01:41:59.844 --> 01:42:01.124
<v Speaker 1>And so if there were

01:42:04.830 --> 01:42:07.150
<v Speaker 1>and the 11 bags within each of those.

01:42:11.469 --> 01:42:13.389
<v Speaker 0>Yeah. So instead of returning a true like

01:42:13.389 --> 01:42:14.909
<v Speaker 0>we do now in the find, what we're

01:42:14.909 --> 01:42:16.429
<v Speaker 0>actually gonna have to do is then

01:42:16.989 --> 01:42:19.685
<v Speaker 0>call account on each of those trues to

01:42:19.685 --> 01:42:21.685
<v Speaker 0>return the number of bags.

01:42:23.285 --> 01:42:25.045
<v Speaker 0>So every time we come across a bag,

01:42:25.045 --> 01:42:26.405
<v Speaker 0>we're gonna need to, a stack where we

01:42:26.405 --> 01:42:27.685
<v Speaker 0>add it to it. And then we're gonna

01:42:27.685 --> 01:42:29.125
<v Speaker 0>have to look over the stack during the

01:42:29.125 --> 01:42:29.765
<v Speaker 0>count.

01:42:31.045 --> 01:42:31.365
<v Speaker 0>K.

01:42:37.290 --> 01:42:40.330
<v Speaker 1>So maybe we can return

01:42:42.650 --> 01:42:43.130
<v Speaker 1>minutes.

01:42:47.015 --> 01:42:47.574
<v Speaker 1>I

01:42:50.695 --> 01:42:51.975
<v Speaker 0>don't think we have to return a bill.

01:42:51.975 --> 01:42:53.335
<v Speaker 0>We I mean, we could just return a

01:42:53.335 --> 01:42:53.655
<v Speaker 0>zero.

01:42:59.330 --> 01:43:01.970
<v Speaker 1>K. I'm just afraid of, like, changing everything

01:43:01.970 --> 01:43:02.929
<v Speaker 1>else we've done.

01:43:03.650 --> 01:43:04.929
<v Speaker 1>I'm okay with that.

01:43:05.410 --> 01:43:06.930
<v Speaker 1>Oh, so the I guess that's the thing.

01:43:06.930 --> 01:43:09.010
<v Speaker 1>So that's gonna change the signature of everything.

01:43:09.010 --> 01:43:10.690
<v Speaker 1>So I think it's a find what we

01:43:10.690 --> 01:43:12.130
<v Speaker 1>wanna do is just make another function call

01:43:12.130 --> 01:43:12.450
<v Speaker 1>count.

01:43:13.055 --> 01:43:14.975
<v Speaker 1>And but we could do the same thing.

01:43:14.975 --> 01:43:15.935
<v Speaker 1>So we could say, like

01:43:16.735 --> 01:43:18.335
<v Speaker 1>so for everything from

01:43:19.615 --> 01:43:20.735
<v Speaker 1>line 10

01:43:21.215 --> 01:43:22.495
<v Speaker 1>to here,

01:43:23.615 --> 01:43:24.655
<v Speaker 1>can get that.

01:43:25.135 --> 01:43:26.975
<v Speaker 1>And make a new function called count,

01:43:29.070 --> 01:43:30.590
<v Speaker 1>and it's gonna turn to mute.

01:43:33.870 --> 01:43:34.750
<v Speaker 1>Sorry.

01:43:35.550 --> 01:43:36.910
<v Speaker 1>I will call it sum.

01:43:39.310 --> 01:43:40.590
<v Speaker 1>Alright. So

01:43:41.355 --> 01:43:43.275
<v Speaker 1>what happens is I think the base case

01:43:43.275 --> 01:43:45.355
<v Speaker 1>is if we actually find

01:43:47.755 --> 01:43:50.075
<v Speaker 1>well, it is if we actually or one

01:43:50.075 --> 01:43:52.235
<v Speaker 1>of the base cases if we actually find

01:43:52.235 --> 01:43:55.515
<v Speaker 1>our target. But, otherwise, we could return zero

01:43:56.430 --> 01:43:58.429
<v Speaker 1>where we don't find it.

01:43:58.830 --> 01:44:00.910
<v Speaker 1>Here's another case where we would probably return

01:44:00.910 --> 01:44:01.789
<v Speaker 1>zero.

01:44:06.190 --> 01:44:09.789
<v Speaker 1>If if we if the rules contain

01:44:10.350 --> 01:44:10.750
<v Speaker 1>this,

01:44:13.175 --> 01:44:14.534
<v Speaker 1>maybe we could have,

01:44:14.855 --> 01:44:15.095
<v Speaker 1>like

01:44:16.455 --> 01:44:19.255
<v Speaker 1>instead of rules contains, we could say rules

01:44:21.975 --> 01:44:23.655
<v Speaker 0>I guess we could just negate that and

01:44:23.655 --> 01:44:24.375
<v Speaker 0>return zero?

01:44:26.140 --> 01:44:28.139
<v Speaker 1>What we wanna do is find the count

01:44:28.620 --> 01:44:31.420
<v Speaker 1>of And so if it doesn't contain it,

01:44:31.420 --> 01:44:33.580
<v Speaker 0>we return the cumulative sum. And if it

01:44:33.580 --> 01:44:35.340
<v Speaker 0>does, then we wanna look over all of

01:44:35.340 --> 01:44:38.315
<v Speaker 0>those bags and then increment the account with

01:44:38.315 --> 01:44:40.075
<v Speaker 0>those. Right? Yes.

01:44:41.275 --> 01:44:41.835
<v Speaker 1>So

01:44:42.235 --> 01:44:44.475
<v Speaker 1>here, if it doesn't contain it

01:44:46.155 --> 01:44:47.355
<v Speaker 1>oh, I see what you're saying.

01:44:48.315 --> 01:44:48.715
<v Speaker 0>Mhmm.

01:44:49.920 --> 01:44:51.119
<v Speaker 0>Yeah. So lane

01:44:52.000 --> 01:44:54.000
<v Speaker 0>where you've got f rules dot contains, if

01:44:54.000 --> 01:44:56.000
<v Speaker 0>we just negate that and and so we

01:44:56.000 --> 01:44:57.280
<v Speaker 0>know that it doesn't contain it, then we

01:44:57.280 --> 01:44:58.800
<v Speaker 0>can just return whatever the account has at

01:44:58.800 --> 01:45:01.600
<v Speaker 0>that point in time. Is that maybe that's

01:45:01.600 --> 01:45:03.995
<v Speaker 0>too too naive. No. No. No. I'm sad

01:45:03.995 --> 01:45:06.315
<v Speaker 1>that you've naive. So rules is a slice.

01:45:07.515 --> 01:45:08.395
<v Speaker 1>And so

01:45:08.955 --> 01:45:11.275
<v Speaker 1>what we're doing in contains is we're iterating

01:45:11.275 --> 01:45:12.554
<v Speaker 1>over that slice

01:45:12.875 --> 01:45:14.475
<v Speaker 1>and seeing if we find a rule that

01:45:14.475 --> 01:45:15.515
<v Speaker 1>matches that name.

01:45:15.835 --> 01:45:17.995
<v Speaker 1>But instead, I think what we wanna do

01:45:19.720 --> 01:45:21.480
<v Speaker 1>oh, I see what you're saying. Oh, yeah.

01:45:21.480 --> 01:45:23.560
<v Speaker 1>Yeah. Yeah. Yeah. So if we don't find

01:45:23.560 --> 01:45:26.520
<v Speaker 1>that, then return zero. Thank you. That's really

01:45:26.520 --> 01:45:27.080
<v Speaker 1>good.

01:45:27.640 --> 01:45:28.760
<v Speaker 1>Okay. So,

01:45:31.204 --> 01:45:32.005
<v Speaker 1>otherwise,

01:45:32.005 --> 01:45:33.684
<v Speaker 1>what we wanna say is

01:45:37.525 --> 01:45:39.204
<v Speaker 1>equals roles

01:45:40.565 --> 01:45:40.885
<v Speaker 1>out.

01:45:51.480 --> 01:45:52.439
<v Speaker 1>And

01:45:53.800 --> 01:45:54.679
<v Speaker 1>discount

01:46:05.735 --> 01:46:08.455
<v Speaker 1>Oh, okay. So here are a couple so

01:46:08.455 --> 01:46:09.974
<v Speaker 1>there's a chance that

01:46:10.210 --> 01:46:12.849
<v Speaker 1>and I think that's what, this warning is

01:46:12.849 --> 01:46:14.209
<v Speaker 1>about. Right? So,

01:46:18.050 --> 01:46:19.570
<v Speaker 1>where is it? Alright.

01:46:22.610 --> 01:46:25.475
<v Speaker 1>So, of course, the actual rules have a

01:46:25.475 --> 01:46:27.315
<v Speaker 1>small chance of going several levels deeper than

01:46:27.315 --> 01:46:29.554
<v Speaker 1>deeper than this example. Be sure to count

01:46:29.554 --> 01:46:31.315
<v Speaker 1>all of the bags even if the nesting

01:46:31.315 --> 01:46:33.235
<v Speaker 1>becomes topologically impractical.

01:46:33.875 --> 01:46:36.275
<v Speaker 1>So I think what can happen is we

01:46:36.275 --> 01:46:39.550
<v Speaker 1>might have loops, but maybe not. But also,

01:46:42.830 --> 01:46:44.349
<v Speaker 1>a bag might contain

01:46:44.910 --> 01:46:45.630
<v Speaker 1>or

01:46:45.790 --> 01:46:48.110
<v Speaker 1>a bag might contain another bag

01:46:48.350 --> 01:46:49.630
<v Speaker 1>that might contain

01:46:50.430 --> 01:46:50.750
<v Speaker 1>I

01:46:52.265 --> 01:46:54.185
<v Speaker 1>guess I'm getting at is what I'm feeling

01:46:54.185 --> 01:46:55.705
<v Speaker 1>at this point is that

01:46:56.825 --> 01:46:59.225
<v Speaker 1>I should continue through this loop.

01:46:59.385 --> 01:47:00.825
<v Speaker 1>But at the same time, I need to

01:47:00.825 --> 01:47:02.264
<v Speaker 1>be able to note

01:47:02.345 --> 01:47:03.305
<v Speaker 1>when we found,

01:47:06.719 --> 01:47:08.079
<v Speaker 1>how can I say this?

01:47:08.719 --> 01:47:10.239
<v Speaker 1>My field is we need to note when

01:47:10.239 --> 01:47:12.880
<v Speaker 1>we found an entire chain or an entire,

01:47:12.880 --> 01:47:14.159
<v Speaker 1>yeah, an entire path

01:47:14.639 --> 01:47:15.599
<v Speaker 1>somehow.

01:47:16.000 --> 01:47:17.679
<v Speaker 1>And I'm not sure. I kinda painted myself

01:47:17.679 --> 01:47:19.599
<v Speaker 1>in a corner here because

01:47:19.925 --> 01:47:22.565
<v Speaker 1>we might find multiple multiple paths,

01:47:23.365 --> 01:47:25.445
<v Speaker 1>but how do I how do I

01:47:25.925 --> 01:47:26.965
<v Speaker 1>account for that?

01:47:27.525 --> 01:47:28.165
<v Speaker 1>Unless

01:47:30.165 --> 01:47:32.245
<v Speaker 1>actually, I guess I guess it's

01:47:33.240 --> 01:47:35.160
<v Speaker 1>alright. Yeah. So I I don't think that's

01:47:35.160 --> 01:47:36.679
<v Speaker 1>a problem. So

01:47:38.440 --> 01:47:40.760
<v Speaker 1>our total count for this loop

01:47:41.000 --> 01:47:41.880
<v Speaker 1>is

01:47:41.880 --> 01:47:42.920
<v Speaker 1>such.

01:47:43.400 --> 01:47:45.240
<v Speaker 1>Our count equals our count.

01:47:46.475 --> 01:47:48.795
<v Speaker 1>I can even say maybe total

01:47:48.795 --> 01:47:49.835
<v Speaker 1>plus equals

01:47:50.955 --> 01:47:51.594
<v Speaker 1>that

01:47:52.235 --> 01:47:53.915
<v Speaker 1>and return the total.

01:47:57.355 --> 01:47:58.075
<v Speaker 1>What do you think?

01:48:00.010 --> 01:48:01.050
<v Speaker 1>So now

01:48:01.690 --> 01:48:03.770
<v Speaker 1>let's edit our roles

01:48:03.850 --> 01:48:04.890
<v Speaker 1>test again,

01:48:06.170 --> 01:48:07.930
<v Speaker 1>and let's do part two.

01:48:10.170 --> 01:48:10.890
<v Speaker 1>So

01:48:12.810 --> 01:48:14.330
<v Speaker 1>eight here. Yank.

01:48:17.594 --> 01:48:18.554
<v Speaker 1>Two.

01:48:19.275 --> 01:48:19.755
<v Speaker 1>Scan.

01:48:30.030 --> 01:48:31.389
<v Speaker 1>Okay. Awesome.

01:48:31.550 --> 01:48:32.590
<v Speaker 1>Awesome. Okay.

01:48:42.985 --> 01:48:44.665
<v Speaker 1>Hold on a sec. My wife's ringing.

01:48:45.625 --> 01:48:46.344
<v Speaker 1>Okay.

01:48:47.145 --> 01:48:48.425
<v Speaker 1>Alright. So

01:48:49.865 --> 01:48:51.065
<v Speaker 1>I think that works.

01:48:51.705 --> 01:48:52.105
<v Speaker 1>I think.

01:48:54.110 --> 01:48:55.949
<v Speaker 1>Although this is complaining.

01:48:57.230 --> 01:48:58.270
<v Speaker 1>Spectator.

01:48:58.270 --> 01:48:59.710
<v Speaker 1>Open. Yeah.

01:49:00.750 --> 01:49:02.750
<v Speaker 0>Some takes the string that are written at

01:49:02.750 --> 01:49:03.310
<v Speaker 0>that.

01:49:03.710 --> 01:49:04.270
<v Speaker 1>Oh, yeah.

01:49:14.455 --> 01:49:17.494
<v Speaker 0>K. You're not passing in the rule set.

01:49:18.215 --> 01:49:20.135
<v Speaker 0>So it would be

01:49:23.170 --> 01:49:25.330
<v Speaker 0>yeah. Something's missing there. Because you're and rule

01:49:25.330 --> 01:49:27.010
<v Speaker 0>set does some of your passing shiny gold,

01:49:27.010 --> 01:49:28.610
<v Speaker 0>but you're not passing in

01:49:32.770 --> 01:49:34.289
<v Speaker 0>the root strength.

01:49:34.530 --> 01:49:35.650
<v Speaker 1>Oh, yeah. Yeah. Yeah.

01:49:41.385 --> 01:49:43.705
<v Speaker 1>Oh, I see. Yeah. Alright. So we'll set

01:49:43.705 --> 01:49:44.425
<v Speaker 1>some.

01:49:46.745 --> 01:49:47.625
<v Speaker 1>This account.

01:49:50.910 --> 01:49:52.989
<v Speaker 1>Alright. So our name we're just kinda stretching

01:49:52.989 --> 01:49:55.470
<v Speaker 1>our naming here. But so I guess what

01:49:55.470 --> 01:49:56.510
<v Speaker 1>I could say is

01:49:57.070 --> 01:49:59.550
<v Speaker 1>some here changes to lowercase

01:50:00.350 --> 01:50:02.270
<v Speaker 1>some so that we're not gonna expose.

01:50:02.765 --> 01:50:04.845
<v Speaker 1>And then so for each of these, we'll

01:50:04.845 --> 01:50:05.565
<v Speaker 1>say

01:50:08.525 --> 01:50:09.485
<v Speaker 1>sum

01:50:10.285 --> 01:50:11.565
<v Speaker 1>Yeah. Right.

01:50:13.645 --> 01:50:15.804
<v Speaker 1>Plus equals sign of

01:50:16.365 --> 01:50:16.765
<v Speaker 1>that,

01:50:19.540 --> 01:50:21.380
<v Speaker 1>and we'll return the total.

01:50:26.820 --> 01:50:27.700
<v Speaker 1>And then so this

01:50:28.980 --> 01:50:30.020
<v Speaker 1>Right. Right.

01:50:30.580 --> 01:50:32.340
<v Speaker 1>Right. So we're good? Yep.

01:50:32.745 --> 01:50:35.545
<v Speaker 1>Still complaining. Rule 87.

01:50:38.265 --> 01:50:39.705
<v Speaker 1>Oh, it's still inside.

01:50:41.385 --> 01:50:43.785
<v Speaker 1>I aborted that code. Okay. So too many

01:50:43.785 --> 01:50:44.265
<v Speaker 1>arguments.

01:50:46.000 --> 01:50:47.360
<v Speaker 1>Alright. To count

01:50:54.080 --> 01:50:55.120
<v Speaker 1>so I changed

01:50:55.520 --> 01:50:57.520
<v Speaker 1>oops. This Yeah. That should be sum.

01:50:59.665 --> 01:51:01.745
<v Speaker 1>That should be count, and this one should

01:51:01.745 --> 01:51:02.305
<v Speaker 1>be

01:51:03.905 --> 01:51:04.465
<v Speaker 1>sum.

01:51:06.225 --> 01:51:08.465
<v Speaker 1>Oh, I am so sorry. I'm feeling like

01:51:08.465 --> 01:51:08.705
<v Speaker 1>I

01:51:09.425 --> 01:51:10.305
<v Speaker 1>help me out here.

01:51:11.949 --> 01:51:14.590
<v Speaker 0>Yes. So and your sum function, there's a

01:51:14.590 --> 01:51:16.190
<v Speaker 0>call to count, which should be sum with

01:51:16.190 --> 01:51:17.389
<v Speaker 0>a capital s.

01:51:23.630 --> 01:51:24.349
<v Speaker 0>Yeah. There.

01:51:25.785 --> 01:51:27.465
<v Speaker 0>That should be calling some, sorry, with a

01:51:27.465 --> 01:51:29.065
<v Speaker 0>small s. Yeah. Okay.

01:51:29.705 --> 01:51:30.425
<v Speaker 0>Thank you.

01:51:31.545 --> 01:51:32.265
<v Speaker 0>Alright.

01:51:33.145 --> 01:51:34.985
<v Speaker 1>Alright. So let's test

01:51:35.305 --> 01:51:37.065
<v Speaker 1>AOC seven part two.

01:51:43.610 --> 01:51:44.730
<v Speaker 1>Alright.

01:51:45.210 --> 01:51:47.050
<v Speaker 1>So we got zero.

01:51:49.130 --> 01:51:49.850
<v Speaker 1>Oops.

01:51:50.570 --> 01:51:53.130
<v Speaker 1>Yeah. Let's let's make sure that part one

01:51:53.130 --> 01:51:53.690
<v Speaker 1>still works.

01:51:54.945 --> 01:51:56.945
<v Speaker 1>Alright. Alright. So what do I do in

01:51:56.945 --> 01:51:58.305
<v Speaker 1>Rawkode? So

01:52:00.305 --> 01:52:01.105
<v Speaker 1>when we sum,

01:52:07.760 --> 01:52:09.599
<v Speaker 1>we wanna call lowercase sum.

01:52:32.710 --> 01:52:35.030
<v Speaker 1>Alright. So maybe so I'm in reading for

01:52:35.030 --> 01:52:35.670
<v Speaker 1>this.

01:52:37.750 --> 01:52:39.430
<v Speaker 1>So there there's a problem. We're we're always

01:52:39.430 --> 01:52:41.030
<v Speaker 1>looking looking

01:52:41.350 --> 01:52:43.190
<v Speaker 1>or searching using the same route.

01:52:43.510 --> 01:52:44.950
<v Speaker 1>Oh, no. No. We're not. We're searching for

01:52:44.950 --> 01:52:47.350
<v Speaker 1>shiny gold rooted at each one these. Alright.

01:52:47.350 --> 01:52:47.910
<v Speaker 1>That's good.

01:52:54.505 --> 01:52:56.184
<v Speaker 1>And so we're

01:52:56.345 --> 01:52:57.945
<v Speaker 1>calling lowercase sum

01:52:58.745 --> 01:53:00.105
<v Speaker 1>with our

01:53:02.560 --> 01:53:03.440
<v Speaker 1>target

01:53:03.600 --> 01:53:04.719
<v Speaker 1>and our root.

01:53:05.040 --> 01:53:06.480
<v Speaker 1>And what we do is we say if

01:53:06.480 --> 01:53:09.519
<v Speaker 1>s equals root, return zero.

01:53:11.760 --> 01:53:13.280
<v Speaker 1>If we could find the root

01:53:13.600 --> 01:53:15.920
<v Speaker 1>or if we can't find the root, return.

01:53:16.640 --> 01:53:17.360
<v Speaker 1>If

01:53:17.865 --> 01:53:19.145
<v Speaker 1>it doesn't contain

01:53:19.305 --> 01:53:20.985
<v Speaker 1>that value, then we return.

01:53:22.505 --> 01:53:24.265
<v Speaker 1>But if it does contain it

01:53:30.520 --> 01:53:32.760
<v Speaker 1>Actually, I think this is this logic is

01:53:32.760 --> 01:53:34.760
<v Speaker 1>backwards. If it does contain it, we'll just

01:53:34.760 --> 01:53:35.480
<v Speaker 1>return

01:53:38.040 --> 01:53:39.880
<v Speaker 1>yeah. So here, I think, is where we

01:53:39.880 --> 01:53:40.840
<v Speaker 1>wanna return

01:53:41.240 --> 01:53:42.520
<v Speaker 1>the value

01:53:42.520 --> 01:53:43.400
<v Speaker 1>of the node.

01:53:45.635 --> 01:53:47.555
<v Speaker 0>Oh, yeah. We're not doing anything with quantity

01:53:47.555 --> 01:53:50.115
<v Speaker 0>yet. Right. Right. So that that's where we

01:53:50.115 --> 01:53:52.835
<v Speaker 1>wanna return the value of the quantity.

01:53:52.915 --> 01:53:54.755
<v Speaker 0>Yeah. So

01:53:55.635 --> 01:53:58.275
<v Speaker 1>let's just say, like, q two I

01:53:58.540 --> 01:53:59.499
<v Speaker 1>equals

01:54:00.699 --> 01:54:02.300
<v Speaker 1>those container s

01:54:04.139 --> 01:54:05.340
<v Speaker 1>minus rooms

01:54:05.420 --> 01:54:06.459
<v Speaker 1>quantity.

01:54:08.380 --> 01:54:10.860
<v Speaker 1>And so here in contains, we'll change this

01:54:10.860 --> 01:54:11.980
<v Speaker 1>to

01:54:17.465 --> 01:54:19.864
<v Speaker 1>there we go. I'm just gonna just say,

01:54:19.865 --> 01:54:20.905
<v Speaker 1>t t y.

01:54:22.985 --> 01:54:23.625
<v Speaker 1>If

01:54:25.670 --> 01:54:27.910
<v Speaker 1>if the name equals, we'll return

01:54:28.470 --> 01:54:30.070
<v Speaker 1>v dot quantity.

01:54:33.030 --> 01:54:34.550
<v Speaker 1>Otherwise, we'll return

01:54:34.950 --> 01:54:35.430
<v Speaker 1>zero.

01:54:41.185 --> 01:54:43.425
<v Speaker 1>I'm assuming that if quantity

01:54:43.824 --> 01:54:46.224
<v Speaker 1>is equal or if quantity

01:54:46.465 --> 01:54:47.505
<v Speaker 1>equals zero

01:54:55.300 --> 01:54:57.780
<v Speaker 0>Quantity will always be a positive integer.

01:54:59.060 --> 01:55:01.540
<v Speaker 1>Well, yeah, it'll always be a positive integer.

01:55:01.540 --> 01:55:03.540
<v Speaker 1>But if it's zero,

01:55:03.860 --> 01:55:04.660
<v Speaker 1>that means

01:55:05.140 --> 01:55:07.140
<v Speaker 1>we didn't find it. Oh, yeah. Yeah. Yeah.

01:55:07.140 --> 01:55:07.860
<v Speaker 0>Okay. Gotcha.

01:55:08.425 --> 01:55:09.945
<v Speaker 1>And and I think but if we did

01:55:09.945 --> 01:55:11.784
<v Speaker 1>find it, then we wanna return that quantity

01:55:11.784 --> 01:55:14.425
<v Speaker 1>right then and there. So quantity is equal

01:55:14.425 --> 01:55:15.144
<v Speaker 1>zero,

01:55:15.864 --> 01:55:17.545
<v Speaker 1>then return

01:55:18.265 --> 01:55:18.824
<v Speaker 1>quantity.

01:55:22.980 --> 01:55:24.179
<v Speaker 1>Alright. Now

01:55:24.580 --> 01:55:26.100
<v Speaker 1>for each of our rules,

01:55:26.420 --> 01:55:28.420
<v Speaker 1>based on the rule, fortunately,

01:55:28.420 --> 01:55:30.420
<v Speaker 1>we we we held on a depth because

01:55:30.420 --> 01:55:32.740
<v Speaker 1>that could be our our factor that we

01:55:32.740 --> 01:55:33.300
<v Speaker 1>multiply.

01:55:35.864 --> 01:55:37.304
<v Speaker 1>Oh, maybe not. Maybe not.

01:55:44.824 --> 01:55:46.505
<v Speaker 1>So total rule

01:55:46.505 --> 01:55:47.544
<v Speaker 1>quantity

01:55:48.425 --> 01:55:50.025
<v Speaker 1>times

01:55:51.510 --> 01:55:53.269
<v Speaker 1>the sum of

01:55:53.670 --> 01:55:56.149
<v Speaker 1>any rules below it. Okay.

01:55:59.750 --> 01:56:01.670
<v Speaker 1>Alright. There we go. It's recursing.

01:56:01.670 --> 01:56:03.590
<v Speaker 1>It's a lot of stuff. We

01:56:03.909 --> 01:56:05.670
<v Speaker 1>have a number. Oh, how do we do

01:56:05.670 --> 01:56:05.829
<v Speaker 1>it?

01:56:07.344 --> 01:56:08.465
<v Speaker 1>Fifty fifty.

01:56:08.705 --> 01:56:11.105
<v Speaker 1>Yeah. So I actually feel pretty good about

01:56:11.105 --> 01:56:12.864
<v Speaker 1>this. I don't I don't know the answer,

01:56:12.864 --> 01:56:14.144
<v Speaker 1>but I

01:56:15.744 --> 01:56:17.905
<v Speaker 1>I'm feeling good about it. I I'm gonna

01:56:17.905 --> 01:56:20.065
<v Speaker 1>enter it, and I say if it if

01:56:20.065 --> 01:56:20.545
<v Speaker 1>it works,

01:56:21.170 --> 01:56:24.050
<v Speaker 1>it works. If not, then that's really high,

01:56:24.050 --> 01:56:25.969
<v Speaker 1>though. That's a really high number. It's a

01:56:25.969 --> 01:56:28.209
<v Speaker 0>big data center. It's

01:56:30.210 --> 01:56:31.409
<v Speaker 0>Let's try it.

01:56:31.650 --> 01:56:34.075
<v Speaker 1>Okay. Alright. Here we go. The worst that

01:56:34.075 --> 01:56:35.995
<v Speaker 0>happens is it works. We celebrate. If it

01:56:35.995 --> 01:56:36.795
<v Speaker 0>doesn't,

01:56:37.275 --> 01:56:38.715
<v Speaker 0>when oh, well, we

01:56:39.115 --> 01:56:40.955
<v Speaker 0>we'll try again another time.

01:56:41.115 --> 01:56:43.115
<v Speaker 0>We're coming up to, like, two hours and

01:56:43.115 --> 01:56:45.035
<v Speaker 0>ten minutes now. Think this has been a

01:56:45.515 --> 01:56:46.395
<v Speaker 1>Yeah.

01:56:46.395 --> 01:56:48.650
<v Speaker 1>Yeah. It's way too high. Alrighty, man. Well,

01:56:48.650 --> 01:56:50.730
<v Speaker 1>that was it. That was my terrible attempt.

01:56:50.970 --> 01:56:53.050
<v Speaker 1>I told this. I'm sorry. I wish I

01:56:53.050 --> 01:56:55.130
<v Speaker 1>I wish No. It was good. That was

01:56:55.130 --> 01:56:55.850
<v Speaker 0>really good.

01:56:56.650 --> 01:56:58.010
<v Speaker 1>Thanks for your help.

01:56:59.290 --> 01:57:00.490
<v Speaker 1>I feel like I let you down.

01:57:01.565 --> 01:57:03.245
<v Speaker 0>No. I think that was really good fun.

01:57:03.245 --> 01:57:04.205
<v Speaker 0>I think, you know

01:57:05.005 --> 01:57:06.445
<v Speaker 0>I mean, considering what we tried to sort

01:57:06.445 --> 01:57:08.284
<v Speaker 0>of together there for that quantity thing at

01:57:08.284 --> 01:57:10.605
<v Speaker 0>the end, like, I think I'm afraid. I

01:57:10.605 --> 01:57:12.925
<v Speaker 0>pray solid effort. What I would suggest is

01:57:12.925 --> 01:57:14.445
<v Speaker 0>that if you could push that code to

01:57:14.445 --> 01:57:15.965
<v Speaker 0>get help, that would be really cool. And,

01:57:15.965 --> 01:57:17.730
<v Speaker 0>you know, if you, you know, if you're

01:57:17.730 --> 01:57:19.329
<v Speaker 0>available this week, we should definitely pick up

01:57:19.329 --> 01:57:20.530
<v Speaker 0>another one of these and have. Because I

01:57:20.530 --> 01:57:21.969
<v Speaker 0>I really enjoyed just seeing how you think

01:57:21.969 --> 01:57:24.770
<v Speaker 0>and how you kinda handle this. To me,

01:57:24.770 --> 01:57:26.130
<v Speaker 0>it was really cool. I really enjoyed that

01:57:26.130 --> 01:57:28.770
<v Speaker 0>one. That's good. Oh, cool. Cool. Alright. Well,

01:57:28.770 --> 01:57:30.610
<v Speaker 1>thanks thanks for the opportunity. I really appreciate

01:57:30.610 --> 01:57:30.770
<v Speaker 1>it.

01:57:32.105 --> 01:57:32.985
<v Speaker 1>I guess,

01:57:33.945 --> 01:57:36.105
<v Speaker 1>yeah, in closing, it was awesome working with

01:57:36.105 --> 01:57:37.545
<v Speaker 1>you at at influx.

01:57:37.705 --> 01:57:39.065
<v Speaker 1>I already missed my team.

01:57:39.545 --> 01:57:41.145
<v Speaker 1>I look forward to the to the next

01:57:41.145 --> 01:57:43.465
<v Speaker 1>gig. And I hope that

01:57:43.705 --> 01:57:45.740
<v Speaker 1>the people at my next my next employer

01:57:45.740 --> 01:57:48.220
<v Speaker 1>hadn't seen this and they couldn't judge me

01:57:48.220 --> 01:57:49.580
<v Speaker 1>judge me by this, and I feel like

01:57:49.580 --> 01:57:51.180
<v Speaker 1>reconsidering at this point. So

01:57:52.220 --> 01:57:53.260
<v Speaker 1>but but

01:57:54.380 --> 01:57:56.380
<v Speaker 1>yeah. That's it. Thanks for the opportunity. Had

01:57:56.380 --> 01:57:58.375
<v Speaker 1>a really good time. No. It was my

01:57:58.375 --> 01:58:00.295
<v Speaker 0>pleasure, honestly. Thank you for that. I'll speak

01:58:00.295 --> 01:58:01.415
<v Speaker 0>to you afterwards.

01:58:01.415 --> 01:58:02.855
<v Speaker 0>We'll try and get something else sorted out,

01:58:02.855 --> 01:58:04.614
<v Speaker 0>and it was good. So thank you very

01:58:04.614 --> 01:58:06.374
<v Speaker 0>much. You have a great day, man. Alright?

01:58:06.534 --> 01:58:07.335
<v Speaker 1>Cool, man. Bye bye.
