WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e4ba69f2-e90c-4dd1-8571-f601550e740f
Created: 2025-04-29T18:19:26.193Z
Duration: 5335.3716
Channels: 1

00:00:00.560 --> 00:00:02.320
<v Speaker 0>Alright. We are

00:00:02.560 --> 00:00:03.679
<v Speaker 0>now live.

00:00:04.400 --> 00:00:04.880
<v Speaker 0>Awesome.

00:00:57.790 --> 00:01:00.989
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:01:00.989 --> 00:01:03.390
<v Speaker 0>Live. I am your host, Rawkode.

00:01:03.550 --> 00:01:05.229
<v Speaker 0>Today, we are gonna be taking a look

00:01:05.229 --> 00:01:06.270
<v Speaker 0>at Dagger.

00:01:06.430 --> 00:01:09.705
<v Speaker 0>It's a new programmable deployment system. That's a

00:01:09.705 --> 00:01:11.305
<v Speaker 0>little bit vague, but we're gonna dive into

00:01:11.305 --> 00:01:12.505
<v Speaker 0>that in just a moment.

00:01:13.145 --> 00:01:14.905
<v Speaker 0>First, we've a little bit of housekeeping.

00:01:15.225 --> 00:01:17.465
<v Speaker 0>If you are not subscribed to the YouTube

00:01:17.465 --> 00:01:19.225
<v Speaker 0>channel, just now would be a great time

00:01:19.225 --> 00:01:21.145
<v Speaker 0>to do that. Click the bell and you

00:01:21.145 --> 00:01:22.585
<v Speaker 0>will get alerts for all new episodes of

00:01:22.585 --> 00:01:25.340
<v Speaker 0>Rawkode Live. There are episodes weekly and we

00:01:25.340 --> 00:01:27.020
<v Speaker 0>try to explore as much of the software

00:01:27.020 --> 00:01:29.180
<v Speaker 0>available to us on the cloud native landscape

00:01:29.180 --> 00:01:29.820
<v Speaker 0>together.

00:01:30.140 --> 00:01:31.660
<v Speaker 0>It is vast, so we will do our

00:01:31.660 --> 00:01:33.660
<v Speaker 0>best to present it in a nice, digestible,

00:01:33.660 --> 00:01:35.340
<v Speaker 0>fun, and educational way.

00:01:36.015 --> 00:01:37.375
<v Speaker 0>If you want to chat with other cloud

00:01:37.375 --> 00:01:39.055
<v Speaker 0>native enthusiasts, you can join us on the

00:01:39.055 --> 00:01:41.215
<v Speaker 0>Discord server at Rawkode.chat.

00:01:41.215 --> 00:01:42.815
<v Speaker 0>There are now over 400 of us in

00:01:42.815 --> 00:01:44.975
<v Speaker 0>there talking all things Kubernetes, cloud native, and

00:01:44.975 --> 00:01:46.335
<v Speaker 0>everything in between.

00:01:46.575 --> 00:01:48.175
<v Speaker 0>Come and join us, say hello, and I

00:01:48.175 --> 00:01:49.215
<v Speaker 0>look forward to meeting you.

00:01:50.370 --> 00:01:51.890
<v Speaker 0>Okay. Now for today,

00:01:52.290 --> 00:01:55.170
<v Speaker 0>to guide us into our introduction to Dagger,

00:01:55.490 --> 00:01:57.570
<v Speaker 0>I'm joined by Solomon and Andrea from the

00:01:57.570 --> 00:01:59.970
<v Speaker 0>Dagger team. Hello, both. How are you doing?

00:02:01.170 --> 00:02:01.490
<v Speaker 1>Hello.

00:02:02.784 --> 00:02:04.225
<v Speaker 2>Hey. Thank you. Good to hear.

00:02:04.545 --> 00:02:06.625
<v Speaker 0>Thank you both for for joining me today.

00:02:07.104 --> 00:02:08.705
<v Speaker 0>If we just do a quick round of

00:02:08.705 --> 00:02:09.584
<v Speaker 0>introductions,

00:02:09.584 --> 00:02:11.185
<v Speaker 0>we'll start with you, Solomon, since you're next

00:02:11.185 --> 00:02:12.225
<v Speaker 0>to me, and then we'll move on to

00:02:12.225 --> 00:02:12.625
<v Speaker 0>Andrea.

00:02:14.220 --> 00:02:16.540
<v Speaker 1>Hi. I'm the I'm Solomon. I'm the cofounder

00:02:16.540 --> 00:02:20.300
<v Speaker 1>of Dagger, and before that, cofounder of Docker.

00:02:20.620 --> 00:02:21.500
<v Speaker 1>And, hopefully,

00:02:21.740 --> 00:02:23.740
<v Speaker 1>not gonna go through any more startup names

00:02:23.740 --> 00:02:25.820
<v Speaker 1>that start with d and finish with r.

00:02:29.625 --> 00:02:31.625
<v Speaker 0>Awesome. Thank you. Andrea?

00:02:32.505 --> 00:02:35.305
<v Speaker 2>Yeah. Hi. I'm Andrea. I'm the cofounder of

00:02:35.305 --> 00:02:38.905
<v Speaker 2>Dagger. And before that, I was neuro engineer

00:02:38.905 --> 00:02:41.385
<v Speaker 2>at Docker. So I worked in Docker for

00:02:41.840 --> 00:02:43.840
<v Speaker 2>seven years or so. I was part of

00:02:43.840 --> 00:02:46.879
<v Speaker 2>the original team with, Selman and Sam. He's

00:02:46.879 --> 00:02:47.600
<v Speaker 2>not around.

00:02:48.400 --> 00:02:50.720
<v Speaker 0>Awesome. Well, thank you very much. Yeah. There's

00:02:50.879 --> 00:02:52.640
<v Speaker 0>Oh, sorry. You go. There's three of us.

00:02:52.640 --> 00:02:54.720
<v Speaker 1>Yeah. There's three of us. And Sam,

00:02:54.879 --> 00:02:55.760
<v Speaker 1>Andrea just mentioned,

00:02:56.965 --> 00:02:58.645
<v Speaker 1>had more important things to do than hang

00:02:58.645 --> 00:02:59.365
<v Speaker 1>out with us.

00:03:02.245 --> 00:03:04.325
<v Speaker 0>Am not offended whatsoever.

00:03:04.965 --> 00:03:06.885
<v Speaker 0>It's awesome to have you both here and,

00:03:06.885 --> 00:03:08.724
<v Speaker 0>you know, maybe in a future episode, we'll

00:03:08.724 --> 00:03:10.004
<v Speaker 0>get all three of you together for a

00:03:10.004 --> 00:03:11.790
<v Speaker 0>bit of fun as well. But for today,

00:03:11.790 --> 00:03:13.950
<v Speaker 0>we're gonna explore and introduce our audience here

00:03:13.950 --> 00:03:14.910
<v Speaker 0>to Dagger.

00:03:14.990 --> 00:03:16.270
<v Speaker 0>And I think the best thing to do

00:03:16.270 --> 00:03:17.630
<v Speaker 0>would be start with a little bit of

00:03:17.630 --> 00:03:18.670
<v Speaker 0>a TLDR.

00:03:18.990 --> 00:03:20.670
<v Speaker 0>What is Dagger?

00:03:22.110 --> 00:03:23.550
<v Speaker 1>Sure. So Dagger is

00:03:26.055 --> 00:03:28.935
<v Speaker 1>your application delivery super glue. So it it

00:03:28.935 --> 00:03:31.175
<v Speaker 1>takes all the existing tools and systems that

00:03:31.175 --> 00:03:33.895
<v Speaker 1>you already use to deliver your app. Could

00:03:33.895 --> 00:03:36.055
<v Speaker 1>be your source control, your build,

00:03:36.295 --> 00:03:37.255
<v Speaker 1>your CI,

00:03:37.895 --> 00:03:40.295
<v Speaker 1>your Kubernetes cluster, your Lambda functions,

00:03:41.510 --> 00:03:43.190
<v Speaker 1>whatever it is that you need to ship

00:03:43.190 --> 00:03:44.550
<v Speaker 1>the app to the cloud,

00:03:44.710 --> 00:03:46.470
<v Speaker 1>and it helps you tie them all together

00:03:46.470 --> 00:03:47.350
<v Speaker 1>in one

00:03:47.510 --> 00:03:49.110
<v Speaker 1>place, in one system that you can look

00:03:49.110 --> 00:03:51.110
<v Speaker 1>at and manage with a simple interface.

00:03:51.750 --> 00:03:53.670
<v Speaker 1>Usually, you already do that

00:03:54.230 --> 00:03:55.670
<v Speaker 1>with a bunch of scripts

00:03:56.364 --> 00:03:58.125
<v Speaker 1>and manual operations.

00:03:58.765 --> 00:04:01.405
<v Speaker 1>And later, those scripts and manual operations,

00:04:01.485 --> 00:04:03.805
<v Speaker 1>when your application grows, you call them a

00:04:03.805 --> 00:04:04.445
<v Speaker 1>platform,

00:04:04.685 --> 00:04:07.084
<v Speaker 1>but they're still mostly scripts and manual operations.

00:04:07.084 --> 00:04:10.045
<v Speaker 1>And so we that's your glue, and usually

00:04:10.045 --> 00:04:12.030
<v Speaker 1>the glue has problems.

00:04:12.830 --> 00:04:14.110
<v Speaker 1>It's hard to change.

00:04:15.070 --> 00:04:16.910
<v Speaker 1>You forget how it works because the person

00:04:16.910 --> 00:04:18.510
<v Speaker 1>who wrote it left,

00:04:19.390 --> 00:04:21.470
<v Speaker 1>and so it slows you down.

00:04:22.350 --> 00:04:25.630
<v Speaker 1>And so we replace that unreliable glue with

00:04:25.785 --> 00:04:28.425
<v Speaker 1>a better glue. Basically, that's what Dagger is.

00:04:28.985 --> 00:04:29.705
<v Speaker 0>Alright.

00:04:29.945 --> 00:04:32.425
<v Speaker 0>So Dagger is bash for the cloud native

00:04:32.425 --> 00:04:34.665
<v Speaker 0>editor. Is that is that a nice way

00:04:34.665 --> 00:04:35.785
<v Speaker 0>to summarize that?

00:04:36.665 --> 00:04:37.945
<v Speaker 1>I think that would be an accurate way

00:04:37.945 --> 00:04:38.905
<v Speaker 1>to summarize it. Yeah.

00:04:39.600 --> 00:04:43.040
<v Speaker 1>Yeah. Because it's programmable. In Bash, it's programmable.

00:04:44.240 --> 00:04:46.080
<v Speaker 1>Yeah. And just one more thing. I think

00:04:46.080 --> 00:04:48.480
<v Speaker 1>that what we're aiming for is to solve

00:04:48.480 --> 00:04:51.760
<v Speaker 1>the problem of making application delivery actually programmable.

00:04:51.760 --> 00:04:52.640
<v Speaker 1>Like, it's actually code.

00:04:53.465 --> 00:04:56.345
<v Speaker 1>And right now, we're almost there as a

00:04:56.665 --> 00:04:57.785
<v Speaker 1>as an ecosystem,

00:04:57.945 --> 00:05:00.185
<v Speaker 1>but we're so we're getting just

00:05:00.505 --> 00:05:03.225
<v Speaker 1>just close enough that we're in the uncanny

00:05:03.225 --> 00:05:05.544
<v Speaker 1>valley. You know? It's a little almost like

00:05:05.544 --> 00:05:08.160
<v Speaker 1>code, but it's not actually like code, and

00:05:08.160 --> 00:05:10.560
<v Speaker 1>so it's weird. So we're trying to bridge

00:05:10.560 --> 00:05:12.960
<v Speaker 1>that gap so it's actually really like code.

00:05:13.280 --> 00:05:13.840
<v Speaker 1>Yeah.

00:05:14.960 --> 00:05:18.000
<v Speaker 0>Okay. Can we then maybe give a

00:05:18.405 --> 00:05:20.885
<v Speaker 0>very concrete example of a a use case

00:05:20.885 --> 00:05:21.845
<v Speaker 0>for Dagger?

00:05:21.925 --> 00:05:24.085
<v Speaker 0>Like, what you know, as a an application

00:05:24.085 --> 00:05:26.405
<v Speaker 0>developer working with cloud native technologies

00:05:26.965 --> 00:05:29.125
<v Speaker 0>and I wanna do something with Dagger, what

00:05:29.125 --> 00:05:30.885
<v Speaker 0>would that something be? What's a good use

00:05:30.885 --> 00:05:31.045
<v Speaker 0>case?

00:05:32.340 --> 00:05:34.180
<v Speaker 1>So from the point of view of the

00:05:34.180 --> 00:05:34.900
<v Speaker 1>developer,

00:05:36.820 --> 00:05:39.460
<v Speaker 1>basically, what you want is something like Heroku,

00:05:39.780 --> 00:05:40.500
<v Speaker 1>except,

00:05:41.060 --> 00:05:43.860
<v Speaker 1>that actually works with the application you have.

00:05:44.100 --> 00:05:46.180
<v Speaker 1>And so if you're you if you're lucky,

00:05:46.180 --> 00:05:47.940
<v Speaker 1>you can actually use Heroku or something like

00:05:47.940 --> 00:05:50.555
<v Speaker 1>it for the whole thing. But most of

00:05:50.555 --> 00:05:52.555
<v Speaker 1>us are not so lucky because not everything

00:05:52.555 --> 00:05:54.315
<v Speaker 1>fits in something like Heroku,

00:05:54.555 --> 00:05:56.555
<v Speaker 1>and so you end up, you know, back

00:05:56.555 --> 00:05:59.035
<v Speaker 1>with the glue. And so, what a developer

00:05:59.035 --> 00:05:59.835
<v Speaker 1>wants is

00:06:00.155 --> 00:06:01.115
<v Speaker 1>one command

00:06:01.290 --> 00:06:03.930
<v Speaker 1>or one click, and there's a staging environment.

00:06:04.010 --> 00:06:05.770
<v Speaker 1>You know? There's a pull request.

00:06:05.930 --> 00:06:09.210
<v Speaker 1>Boom. I've got another environment to review in

00:06:09.210 --> 00:06:11.690
<v Speaker 1>the production like environment if that works. And,

00:06:11.690 --> 00:06:14.010
<v Speaker 1>of course, then I wanna continuously deploy to

00:06:14.010 --> 00:06:16.955
<v Speaker 1>to production. But just this idea of defining

00:06:16.955 --> 00:06:17.755
<v Speaker 1>one place,

00:06:18.074 --> 00:06:20.074
<v Speaker 1>what does an environment look like with everything

00:06:20.074 --> 00:06:22.315
<v Speaker 1>running together, and then how do I get

00:06:22.634 --> 00:06:24.155
<v Speaker 1>how do I get one of those? You

00:06:24.155 --> 00:06:26.155
<v Speaker 1>know? So from the developer's point of view,

00:06:26.155 --> 00:06:29.034
<v Speaker 1>that's what you get. And from the delivery

00:06:29.034 --> 00:06:29.754
<v Speaker 1>person

00:06:30.080 --> 00:06:31.760
<v Speaker 1>point of view, so DevOps

00:06:32.000 --> 00:06:34.320
<v Speaker 1>person, the DevOps team, the platform team, whatever

00:06:34.320 --> 00:06:36.320
<v Speaker 1>you wanna call them, the SREs, the expert

00:06:36.320 --> 00:06:37.680
<v Speaker 1>knows how to deliver.

00:06:38.320 --> 00:06:39.840
<v Speaker 1>You wanna be able to program

00:06:40.160 --> 00:06:42.685
<v Speaker 1>that exactly the way you want it and

00:06:42.685 --> 00:06:44.685
<v Speaker 1>change it over time, you know, to to

00:06:44.685 --> 00:06:46.445
<v Speaker 1>improve your infrastructure,

00:06:46.445 --> 00:06:49.245
<v Speaker 1>to improve the workflow, whatever, without having to

00:06:49.245 --> 00:06:49.965
<v Speaker 1>change

00:06:50.045 --> 00:06:51.485
<v Speaker 1>the disrupt

00:06:51.725 --> 00:06:54.205
<v Speaker 1>the the workflow of the developer every time.

00:06:55.330 --> 00:06:56.850
<v Speaker 1>And so you kind of have this separation

00:06:56.850 --> 00:06:59.810
<v Speaker 1>of concern. So there's two different users,

00:07:00.530 --> 00:07:02.130
<v Speaker 1>interacting with Dagger.

00:07:02.530 --> 00:07:04.770
<v Speaker 1>One at the front end, the developer wants

00:07:04.770 --> 00:07:06.370
<v Speaker 1>to deploy, and then one at the back

00:07:06.370 --> 00:07:08.690
<v Speaker 1>end, you know, the delivery expert who wants

00:07:08.690 --> 00:07:10.345
<v Speaker 1>to customize

00:07:10.825 --> 00:07:12.265
<v Speaker 1>the the deployment.

00:07:12.745 --> 00:07:13.545
<v Speaker 0>Awesome.

00:07:13.545 --> 00:07:15.945
<v Speaker 1>So then pick your application, pick your stack.

00:07:15.945 --> 00:07:16.505
<v Speaker 1>You know?

00:07:17.545 --> 00:07:19.305
<v Speaker 1>Whatever it is, you wanna be able to

00:07:19.305 --> 00:07:21.385
<v Speaker 1>get a staging environment of it with Dagger.

00:07:22.900 --> 00:07:23.620
<v Speaker 0>Okay.

00:07:24.020 --> 00:07:24.740
<v Speaker 0>Awesome.

00:07:24.900 --> 00:07:27.139
<v Speaker 0>That's a a nice description of it there.

00:07:27.139 --> 00:07:28.900
<v Speaker 0>I like that the crosses the developer and

00:07:28.900 --> 00:07:30.740
<v Speaker 0>the operational side of things together and tries

00:07:30.740 --> 00:07:32.580
<v Speaker 0>to get this concrete representation.

00:07:32.580 --> 00:07:33.940
<v Speaker 0>I think you said what an environment is

00:07:33.940 --> 00:07:35.220
<v Speaker 0>and how to deploy my application and so

00:07:35.220 --> 00:07:37.860
<v Speaker 0>forth. Yeah. You mentioned that it is programmable,

00:07:38.235 --> 00:07:39.675
<v Speaker 0>and I I know that this is is

00:07:39.675 --> 00:07:41.755
<v Speaker 0>built on Q. Do you wanna maybe

00:07:42.155 --> 00:07:43.275
<v Speaker 0>just give us

00:07:43.835 --> 00:07:44.875
<v Speaker 0>you know, they need to tell us what

00:07:44.875 --> 00:07:46.715
<v Speaker 0>Q is, but maybe why you went down

00:07:46.715 --> 00:07:48.875
<v Speaker 0>the road of using Q for for Dagger?

00:07:49.595 --> 00:07:50.635
<v Speaker 1>Sure. So

00:07:51.035 --> 00:07:54.360
<v Speaker 1>Dagger is built on two really important components,

00:07:54.360 --> 00:07:55.720
<v Speaker 1>both of which both of which are open

00:07:55.720 --> 00:07:56.360
<v Speaker 1>source.

00:07:57.160 --> 00:07:58.200
<v Speaker 1>One is Q,

00:07:59.000 --> 00:08:01.000
<v Speaker 1>and it's a programming language. So when you

00:08:01.000 --> 00:08:01.800
<v Speaker 1>program

00:08:02.200 --> 00:08:03.080
<v Speaker 1>your,

00:08:04.360 --> 00:08:05.160
<v Speaker 1>delivery environment,

00:08:06.694 --> 00:08:09.175
<v Speaker 1>It's not like Bash. It's not Bash scripts.

00:08:09.175 --> 00:08:10.935
<v Speaker 1>Instead of Bash scripts, you write Q. There

00:08:10.935 --> 00:08:12.615
<v Speaker 1>might still be Bash scripts in there. You

00:08:12.615 --> 00:08:13.655
<v Speaker 1>can orchestrate

00:08:13.655 --> 00:08:15.175
<v Speaker 1>those Bash scripts if you want.

00:08:16.854 --> 00:08:19.495
<v Speaker 1>But Q is a declarative language that lets

00:08:19.495 --> 00:08:23.970
<v Speaker 1>you declaratively describe what the nodes of your,

00:08:24.690 --> 00:08:27.410
<v Speaker 1>delivery graph are and how they're connected. And

00:08:27.410 --> 00:08:30.130
<v Speaker 1>the key insight is that delivery

00:08:30.210 --> 00:08:31.330
<v Speaker 1>is a graph.

00:08:32.290 --> 00:08:34.450
<v Speaker 1>And so CUE is a language that works

00:08:34.450 --> 00:08:36.450
<v Speaker 1>very well to describe a graph and how

00:08:36.450 --> 00:08:38.575
<v Speaker 1>the pieces of a graph are connected. So,

00:08:38.575 --> 00:08:40.414
<v Speaker 1>anyway, we can go into more detail later,

00:08:40.414 --> 00:08:40.895
<v Speaker 1>but,

00:08:41.375 --> 00:08:43.695
<v Speaker 1>the other piece is build kit. And that's

00:08:43.695 --> 00:08:45.855
<v Speaker 1>the part that actually runs the runs the

00:08:45.855 --> 00:08:48.255
<v Speaker 1>operations in the graph. Because with queue, you

00:08:48.255 --> 00:08:49.135
<v Speaker 1>can describe

00:08:49.295 --> 00:08:51.695
<v Speaker 1>what what you wanna deploy. You can even

00:08:51.695 --> 00:08:52.575
<v Speaker 1>describe

00:08:52.575 --> 00:08:52.815
<v Speaker 1>how.

00:08:53.810 --> 00:08:55.010
<v Speaker 1>But at some point,

00:08:57.330 --> 00:08:59.650
<v Speaker 1>something needs to actually happen to deploy, and

00:08:59.650 --> 00:09:01.490
<v Speaker 1>queue won't do that. You need an engine

00:09:01.490 --> 00:09:03.490
<v Speaker 1>to interpret those those

00:09:03.890 --> 00:09:06.450
<v Speaker 1>that that that description and actually do it.

00:09:06.450 --> 00:09:09.255
<v Speaker 1>That's where BuildKit comes in. And BuildKit comes

00:09:09.255 --> 00:09:10.455
<v Speaker 1>out of Docker,

00:09:10.775 --> 00:09:13.495
<v Speaker 1>and it basically lets you orchestrate really powerful,

00:09:14.695 --> 00:09:17.895
<v Speaker 1>pipelines of operations with running in containers.

00:09:18.135 --> 00:09:20.535
<v Speaker 1>And plugging in inputs and outputs from those

00:09:20.535 --> 00:09:21.255
<v Speaker 1>operations,

00:09:21.335 --> 00:09:22.775
<v Speaker 1>you get built in caching.

00:09:23.095 --> 00:09:26.060
<v Speaker 1>It's it's very, very powerful. So Q plus

00:09:26.060 --> 00:09:28.140
<v Speaker 1>build kit, that's the

00:09:28.540 --> 00:09:30.460
<v Speaker 1>the tech foundation of Dagger.

00:09:31.180 --> 00:09:33.180
<v Speaker 0>Well, I'm a a huge fan of Q,

00:09:33.180 --> 00:09:34.540
<v Speaker 0>and I love seeing it in the wild.

00:09:34.540 --> 00:09:37.195
<v Speaker 0>So this is really exciting for me. And

00:09:37.195 --> 00:09:39.834
<v Speaker 0>I haven't actually until Dagger, I've never heard

00:09:39.834 --> 00:09:42.795
<v Speaker 0>of anyone using BuildKits kind of Dag

00:09:42.875 --> 00:09:45.675
<v Speaker 0>environment or programmability or whatever you wanna call

00:09:45.675 --> 00:09:47.755
<v Speaker 0>it. And an application that would be to

00:09:47.755 --> 00:09:48.235
<v Speaker 0>be

00:09:48.714 --> 00:09:50.770
<v Speaker 0>a bunch of tasks to run. It's normally

00:09:50.770 --> 00:09:52.450
<v Speaker 0>just building a container image, but you kinda

00:09:52.450 --> 00:09:54.130
<v Speaker 0>just made a bit more generic, I guess.

00:09:54.130 --> 00:09:56.530
<v Speaker 0>And it seems to be working really well.

00:09:56.530 --> 00:09:57.010
<v Speaker 0>So

00:09:57.890 --> 00:09:58.530
<v Speaker 0>I think

00:09:58.930 --> 00:10:01.490
<v Speaker 1>That yep. Sorry. That's that's a testament to

00:10:01.490 --> 00:10:02.690
<v Speaker 1>how good the build kit

00:10:03.195 --> 00:10:06.235
<v Speaker 1>developers are. You know? They basically,

00:10:06.635 --> 00:10:08.555
<v Speaker 1>their job was, hey. Can you just make

00:10:08.555 --> 00:10:11.595
<v Speaker 1>Docker build less terrible? And and they just

00:10:11.595 --> 00:10:12.395
<v Speaker 1>felt like

00:10:12.955 --> 00:10:14.555
<v Speaker 1>just something that there was so much more

00:10:14.555 --> 00:10:17.275
<v Speaker 1>than that. So we're just taking advantage of

00:10:17.275 --> 00:10:18.475
<v Speaker 1>it the way we think it should.

00:10:19.250 --> 00:10:21.970
<v Speaker 0>And I guess that explains the name Dagger.

00:10:21.970 --> 00:10:22.930
<v Speaker 0>It's a dag.

00:10:23.170 --> 00:10:24.690
<v Speaker 0>Is is it that simple?

00:10:25.170 --> 00:10:26.050
<v Speaker 0>Yes.

00:10:27.010 --> 00:10:29.250
<v Speaker 0>Awesome. Alright. Well, I invited you on here

00:10:29.250 --> 00:10:30.850
<v Speaker 0>to get hands on with Dagger, not to

00:10:30.850 --> 00:10:32.210
<v Speaker 0>talk about it too much, but thank you

00:10:32.210 --> 00:10:33.410
<v Speaker 0>for using a little bit of time there

00:10:33.410 --> 00:10:33.970
<v Speaker 0>to share that.

00:10:34.655 --> 00:10:36.575
<v Speaker 0>I hope our audience appreciates that and now

00:10:36.575 --> 00:10:37.775
<v Speaker 0>has a little bit of a clue of

00:10:37.775 --> 00:10:40.015
<v Speaker 0>what we're gonna be diving into today. So

00:10:40.015 --> 00:10:42.255
<v Speaker 0>I am gonna pop my screen share up.

00:10:43.375 --> 00:10:47.215
<v Speaker 0>What we have here is the Dagger documentation,

00:10:48.080 --> 00:10:49.920
<v Speaker 0>which you have kindly tweeted out in the

00:10:49.920 --> 00:10:51.520
<v Speaker 0>last twenty four hours that you're very worried

00:10:51.520 --> 00:10:53.040
<v Speaker 0>about someone going through this. So it's gonna

00:10:53.040 --> 00:10:54.640
<v Speaker 0>be a lot of fun as we we

00:10:54.640 --> 00:10:55.520
<v Speaker 0>work our way.

00:10:57.200 --> 00:10:59.120
<v Speaker 1>So Just because we've seen other people go

00:10:59.120 --> 00:11:00.480
<v Speaker 1>through it, we know what happens. So

00:11:02.204 --> 00:11:02.925
<v Speaker 0>Alright.

00:11:03.005 --> 00:11:05.404
<v Speaker 0>The Dagger is alpha. It's very much in

00:11:05.404 --> 00:11:07.245
<v Speaker 0>the the testing experimentation

00:11:07.245 --> 00:11:08.685
<v Speaker 0>phase. I'm not sure how you wanna describe

00:11:08.685 --> 00:11:11.084
<v Speaker 0>that. But if people do wanna get access

00:11:11.084 --> 00:11:13.005
<v Speaker 0>to this after watching this video, what is

00:11:13.005 --> 00:11:15.485
<v Speaker 0>the the procedure there? Can they reach out?

00:11:15.485 --> 00:11:17.325
<v Speaker 0>Is it open alpha? Or is it?

00:11:17.990 --> 00:11:19.910
<v Speaker 1>Absolutely. Yeah. Dagger.io.

00:11:19.910 --> 00:11:22.870
<v Speaker 1>Just go there. Click request access. There's a

00:11:22.870 --> 00:11:23.910
<v Speaker 1>very short form,

00:11:24.230 --> 00:11:26.630
<v Speaker 1>and then you're on the waiting list. And,

00:11:27.430 --> 00:11:28.390
<v Speaker 1>we're

00:11:28.470 --> 00:11:31.029
<v Speaker 1>sending invites as fast as we can. GitHub,

00:11:31.029 --> 00:11:32.195
<v Speaker 1>if you can hear us, we can only

00:11:32.195 --> 00:11:35.395
<v Speaker 1>send 50 invitations per day. That's the bottleneck.

00:11:37.555 --> 00:11:40.675
<v Speaker 1>So, yes, that's the way to to join.

00:11:41.075 --> 00:11:43.475
<v Speaker 0>Alright. Awesome. Yeah. Dagger.i0

00:11:43.475 --> 00:11:45.475
<v Speaker 0>for everyone who wants to request access after

00:11:45.475 --> 00:11:47.555
<v Speaker 0>working or watching us go through today's demo.

00:11:48.490 --> 00:11:50.649
<v Speaker 0>All right. I'm gonna move on to step

00:11:50.649 --> 00:11:53.290
<v Speaker 0>one, which I'm assuming is to install Dagger.

00:11:53.290 --> 00:11:55.209
<v Speaker 0>I see that we have a brew tap

00:11:55.209 --> 00:11:55.850
<v Speaker 0>here

00:11:56.010 --> 00:11:58.330
<v Speaker 0>and I'm gonna get this running

00:11:58.810 --> 00:11:59.209
<v Speaker 0>quickly.

00:12:03.625 --> 00:12:06.345
<v Speaker 0>I made the horrible mistake last week, maybe

00:12:06.345 --> 00:12:09.625
<v Speaker 0>ten days ago of installing Mac OS Monterey

00:12:09.625 --> 00:12:10.505
<v Speaker 0>12

00:12:10.985 --> 00:12:12.584
<v Speaker 0>and had to wipe my machine about one

00:12:12.584 --> 00:12:14.584
<v Speaker 0>hour after it because nothing worked. So

00:12:15.380 --> 00:12:17.860
<v Speaker 0>it's been a fun last week having to

00:12:17.860 --> 00:12:20.180
<v Speaker 0>solve every single tool in the world again.

00:12:21.140 --> 00:12:23.140
<v Speaker 0>But hopefully, brew won't take too long with

00:12:23.140 --> 00:12:23.780
<v Speaker 0>this.

00:12:26.420 --> 00:12:28.100
<v Speaker 1>Well, as you know, I'm on an iPad,

00:12:28.100 --> 00:12:29.380
<v Speaker 1>so I don't have any of those problems.

00:12:31.365 --> 00:12:33.125
<v Speaker 1>I have all sorts of other problems.

00:12:34.404 --> 00:12:35.205
<v Speaker 0>Yeah.

00:12:35.365 --> 00:12:37.525
<v Speaker 0>We've already discovered a few of those with

00:12:37.525 --> 00:12:39.125
<v Speaker 0>the streaming software so far. That's been a

00:12:39.125 --> 00:12:41.285
<v Speaker 0>whole lot of fun. So if you could

00:12:41.285 --> 00:12:43.205
<v Speaker 0>see Solomon's lips moving and no words coming

00:12:43.205 --> 00:12:44.565
<v Speaker 0>out of his mouth, it's because he touched

00:12:44.565 --> 00:12:45.125
<v Speaker 0>his iPad.

00:12:48.360 --> 00:12:50.199
<v Speaker 0>Alright. Let's assume that is good to pull

00:12:50.199 --> 00:12:52.440
<v Speaker 0>down just now. Let's pull in that baiter

00:12:52.440 --> 00:12:53.959
<v Speaker 0>release. Yeah. There we go.

00:12:54.680 --> 00:12:55.480
<v Speaker 0>Alright.

00:12:56.120 --> 00:12:58.040
<v Speaker 0>Oh, my computer is struggling. There we go.

00:12:59.315 --> 00:13:01.155
<v Speaker 0>Cural bash is also an option for anyone

00:13:01.155 --> 00:13:02.435
<v Speaker 0>who's on Linux.

00:13:02.915 --> 00:13:04.355
<v Speaker 0>And then you can also pull down the

00:13:04.355 --> 00:13:07.155
<v Speaker 0>release. All pretty standard stuff so far.

00:13:08.115 --> 00:13:09.875
<v Speaker 0>Oh, that's a expander.

00:13:09.955 --> 00:13:12.195
<v Speaker 0>Let's go on to our basic usage here.

00:13:12.195 --> 00:13:13.715
<v Speaker 0>So I have Dagger on my machine.

00:13:14.890 --> 00:13:17.130
<v Speaker 0>Let's see if I run it.

00:13:18.330 --> 00:13:19.210
<v Speaker 0>There we go.

00:13:20.730 --> 00:13:22.490
<v Speaker 0>We got a whole bunch of sub commands

00:13:22.490 --> 00:13:23.130
<v Speaker 0>here.

00:13:23.370 --> 00:13:25.850
<v Speaker 0>Is there anything interesting that you wanna point

00:13:25.850 --> 00:13:28.649
<v Speaker 0>out before we work through the little tutorial

00:13:28.649 --> 00:13:29.290
<v Speaker 0>that we have?

00:13:30.745 --> 00:13:32.425
<v Speaker 1>Yes. One thing I wanna point out is

00:13:32.425 --> 00:13:34.345
<v Speaker 1>some of these commands, if you run them,

00:13:34.345 --> 00:13:36.025
<v Speaker 1>they will panic and say nothing. And

00:13:39.225 --> 00:13:41.145
<v Speaker 1>we have we have merged deploy requests. They're

00:13:41.145 --> 00:13:42.985
<v Speaker 1>hiding them, but I don't think we've released

00:13:42.985 --> 00:13:43.464
<v Speaker 1>it yet.

00:13:46.360 --> 00:13:48.040
<v Speaker 0>Alright. I mean, the main thing is it

00:13:48.040 --> 00:13:50.680
<v Speaker 1>it changes a lot. We're we're still iterating

00:13:50.680 --> 00:13:53.800
<v Speaker 1>based on feedback. So the most important one

00:13:53.800 --> 00:13:54.600
<v Speaker 1>is up.

00:13:55.400 --> 00:13:58.120
<v Speaker 0>Alright. Dagger up. I also see a Dagger

00:13:58.120 --> 00:14:01.375
<v Speaker 0>login and a Dagger log out. Is that

00:14:01.455 --> 00:14:03.775
<v Speaker 0>an indication that there's a cloud component to

00:14:03.775 --> 00:14:06.095
<v Speaker 0>Dagger that runs my tasks for me?

00:14:07.615 --> 00:14:10.175
<v Speaker 1>So, no. It doesn't run the tasks for

00:14:10.175 --> 00:14:10.655
<v Speaker 1>you.

00:14:11.455 --> 00:14:13.535
<v Speaker 1>We're it's we're never gonna run the tasks

00:14:13.535 --> 00:14:14.895
<v Speaker 1>for you. It's always going to be a

00:14:14.895 --> 00:14:16.335
<v Speaker 1>% on your infrastructure.

00:14:16.870 --> 00:14:18.310
<v Speaker 1>But, optionally,

00:14:18.310 --> 00:14:20.310
<v Speaker 1>there will be a cloud service that you

00:14:20.310 --> 00:14:22.310
<v Speaker 1>can connect all of your Dagger engines to

00:14:22.310 --> 00:14:24.230
<v Speaker 1>and tells you interesting things about it and

00:14:24.230 --> 00:14:26.470
<v Speaker 1>lets you control them as a fleet. But

00:14:26.470 --> 00:14:29.350
<v Speaker 1>it's always gonna be kind of optional management

00:14:29.589 --> 00:14:31.189
<v Speaker 1>and never actual infrastructure.

00:14:32.105 --> 00:14:33.065
<v Speaker 0>Got

00:14:33.065 --> 00:14:34.024
<v Speaker 0>it. Okay.

00:14:34.345 --> 00:14:37.945
<v Speaker 1>Also, you type Dagger login, that Dagger login,

00:14:38.024 --> 00:14:40.105
<v Speaker 1>it will panic and say not implemented.

00:14:42.904 --> 00:14:44.425
<v Speaker 0>I know you're gonna have to fight the

00:14:44.425 --> 00:14:46.425
<v Speaker 0>urge to take that, but I'll do my

00:14:46.425 --> 00:14:46.665
<v Speaker 0>best.

00:14:47.280 --> 00:14:49.040
<v Speaker 0>Alright. We got a a couple of comments

00:14:49.040 --> 00:14:51.280
<v Speaker 0>there. So first one is let me drag

00:14:51.280 --> 00:14:53.760
<v Speaker 0>that away from your head there, Andrea. And

00:14:53.760 --> 00:14:56.160
<v Speaker 0>Nuno says, it's not Admiral Dagger. He's very

00:14:56.160 --> 00:14:56.960
<v Speaker 0>disappointed.

00:14:57.360 --> 00:14:58.560
<v Speaker 0>I'm not sure if I should know what

00:14:58.560 --> 00:15:00.720
<v Speaker 0>Admiral Dagger is. I feel like there's maybe

00:15:00.720 --> 00:15:01.120
<v Speaker 0>some

00:15:01.735 --> 00:15:04.375
<v Speaker 0>sci fi reference that I'm gonna purely miss,

00:15:04.375 --> 00:15:05.255
<v Speaker 0>but cool.

00:15:05.655 --> 00:15:08.135
<v Speaker 0>DS has got a question. This sounds like

00:15:08.135 --> 00:15:10.615
<v Speaker 0>a CD pipeline. How does Dagger differ from

00:15:10.615 --> 00:15:13.415
<v Speaker 0>other continuous delivery platforms? Do you wanna tackle

00:15:13.415 --> 00:15:14.615
<v Speaker 0>that now, or do you wanna wait till

00:15:14.615 --> 00:15:15.255
<v Speaker 0>after the demo?

00:15:16.569 --> 00:15:18.569
<v Speaker 1>Sure. I mean, I can maybe a few

00:15:18.569 --> 00:15:20.250
<v Speaker 1>pointers now, and we can dive in later.

00:15:20.250 --> 00:15:21.850
<v Speaker 1>But one is it's programmable.

00:15:22.009 --> 00:15:23.050
<v Speaker 1>So you can actually,

00:15:24.250 --> 00:15:26.010
<v Speaker 1>you can you can express

00:15:26.250 --> 00:15:27.930
<v Speaker 1>an arbitrarily complex,

00:15:28.490 --> 00:15:30.329
<v Speaker 1>delivery workflow in code, and you can actually

00:15:30.329 --> 00:15:31.850
<v Speaker 1>export it as a package, and someone else

00:15:31.850 --> 00:15:33.345
<v Speaker 1>can import it. And it actually works the

00:15:33.345 --> 00:15:34.305
<v Speaker 1>way you would expect.

00:15:36.305 --> 00:15:38.065
<v Speaker 1>That's one big difference.

00:15:39.985 --> 00:15:40.705
<v Speaker 1>Native

00:15:41.105 --> 00:15:44.065
<v Speaker 1>artifact support and encrypted support secret support. So

00:15:44.065 --> 00:15:46.145
<v Speaker 1>you can compose not just the flow of

00:15:46.145 --> 00:15:46.545
<v Speaker 1>values.

00:15:47.070 --> 00:15:49.150
<v Speaker 1>You're like, oh, the a little JSON object

00:15:49.150 --> 00:15:50.830
<v Speaker 1>can go from step one to step two.

00:15:50.830 --> 00:15:52.990
<v Speaker 1>Great. You can actually compose artifacts.

00:15:53.150 --> 00:15:55.230
<v Speaker 1>And those artifacts can be injected by the

00:15:55.230 --> 00:15:57.070
<v Speaker 1>user. They can be generated on the fly.

00:15:57.070 --> 00:15:58.910
<v Speaker 1>They can be downloaded from elsewhere, but you

00:15:58.910 --> 00:16:01.675
<v Speaker 1>can actually plug these components together, and you

00:16:01.675 --> 00:16:04.235
<v Speaker 1>get a you get a chain of artifacts,

00:16:05.675 --> 00:16:06.634
<v Speaker 1>bundled into,

00:16:06.875 --> 00:16:09.514
<v Speaker 1>a reusable software component. To our knowledge, nobody

00:16:09.514 --> 00:16:10.475
<v Speaker 1>else does that.

00:16:11.115 --> 00:16:13.720
<v Speaker 1>But I guess that's a little abstract maybe.

00:16:14.040 --> 00:16:15.400
<v Speaker 1>So I'll just

00:16:16.040 --> 00:16:17.720
<v Speaker 1>kick that can down the road.

00:16:18.520 --> 00:16:20.760
<v Speaker 0>Okay. Well, let's clone the exam. Yeah. Sorry.

00:16:20.760 --> 00:16:22.760
<v Speaker 0>On you go. I'll clone Ashish now if

00:16:22.760 --> 00:16:24.200
<v Speaker 0>you wanna say something else there.

00:16:24.760 --> 00:16:25.320
<v Speaker 1>No. No.

00:16:26.155 --> 00:16:27.515
<v Speaker 1>I I talk a lot, so I gotta

00:16:27.515 --> 00:16:28.875
<v Speaker 1>stop myself at some point.

00:16:31.355 --> 00:16:33.595
<v Speaker 0>It's all good. Alright. We've got three examples

00:16:33.595 --> 00:16:35.675
<v Speaker 0>here. We clone this. The first one we're

00:16:35.675 --> 00:16:38.075
<v Speaker 0>gonna be tackling from this tutorial is the

00:16:38.075 --> 00:16:39.195
<v Speaker 0>to do application.

00:16:40.790 --> 00:16:42.310
<v Speaker 0>Let's just take a look at it.

00:16:42.790 --> 00:16:44.470
<v Speaker 0>I've always been really bad at reading docs.

00:16:44.470 --> 00:16:45.990
<v Speaker 0>I always just wanna run the thing. So

00:16:45.990 --> 00:16:48.630
<v Speaker 0>I'm gonna pop open Versus Code

00:16:48.790 --> 00:16:50.150
<v Speaker 0>and we'll see what we've got in this

00:16:50.150 --> 00:16:50.550
<v Speaker 0>directory.

00:16:54.035 --> 00:16:55.155
<v Speaker 0>Come on, computer.

00:16:59.395 --> 00:17:01.475
<v Speaker 0>Getting there. I'm not sure why it's struggling

00:17:01.475 --> 00:17:02.195
<v Speaker 0>today.

00:17:02.995 --> 00:17:03.955
<v Speaker 0>Okay.

00:17:04.994 --> 00:17:08.115
<v Speaker 0>This is a a node application, I'm assuming,

00:17:08.250 --> 00:17:10.169
<v Speaker 0>by this package dot JSON.

00:17:10.329 --> 00:17:12.490
<v Speaker 0>If my computer catches up, we'll see it.

00:17:12.490 --> 00:17:14.650
<v Speaker 0>It is alright. It's a React to do

00:17:14.650 --> 00:17:16.650
<v Speaker 0>application. I think I've seen a thousand of

00:17:16.650 --> 00:17:17.849
<v Speaker 0>these in my lifetime.

00:17:18.170 --> 00:17:18.970
<v Speaker 1>Mhmm.

00:17:20.250 --> 00:17:21.770
<v Speaker 0>Oh, beach ball, that's not good.

00:17:23.214 --> 00:17:25.375
<v Speaker 0>No. Okay. Well, cool. We've got a Docker

00:17:25.375 --> 00:17:26.974
<v Speaker 0>file, which is on this

00:17:28.335 --> 00:17:30.254
<v Speaker 0>playing catch up with my computer today.

00:17:30.575 --> 00:17:32.335
<v Speaker 0>Maybe I should get an iPad. So that's

00:17:32.335 --> 00:17:32.974
<v Speaker 1>intentionally

00:17:33.695 --> 00:17:35.695
<v Speaker 1>very simple and almost boring

00:17:37.760 --> 00:17:40.000
<v Speaker 1>React app that you could substitute with your

00:17:40.000 --> 00:17:40.480
<v Speaker 1>own

00:17:41.200 --> 00:17:42.159
<v Speaker 1>if you want.

00:17:43.600 --> 00:17:46.720
<v Speaker 0>Yeah. So this is just a Dagger.

00:17:46.960 --> 00:17:48.800
<v Speaker 0>This is just showing how to use Dagger,

00:17:48.800 --> 00:17:51.775
<v Speaker 0>I guess, to to build a node application

00:17:51.775 --> 00:17:54.174
<v Speaker 0>container image. Does it do anything else? Like

00:17:55.375 --> 00:17:57.134
<v Speaker 1>So we actually it so

00:17:57.455 --> 00:17:59.855
<v Speaker 1>well, you'll see. But Yeah. Yes, it does

00:17:59.855 --> 00:18:01.135
<v Speaker 1>more. You can just tell me to shop

00:18:01.135 --> 00:18:03.375
<v Speaker 0>shop and read the docs. That's perfectly acceptable

00:18:03.375 --> 00:18:04.015
<v Speaker 0>answer here.

00:18:04.680 --> 00:18:06.360
<v Speaker 0>Alright. Dockerfile,

00:18:06.840 --> 00:18:08.280
<v Speaker 0>like, it's pretty standard. Right? This is the

00:18:08.360 --> 00:18:10.280
<v Speaker 1>There's nothing yes. Nothing special on that Dockerfile.

00:18:10.280 --> 00:18:11.480
<v Speaker 1>We didn't I don't think we even wrote

00:18:11.480 --> 00:18:13.240
<v Speaker 1>that Dockerfile. I think it's the standard one

00:18:13.240 --> 00:18:15.400
<v Speaker 1>from the example. Right? I'm

00:18:15.560 --> 00:18:16.120
<v Speaker 1>not sure, actually.

00:18:17.185 --> 00:18:19.184
<v Speaker 0>Okay. And we have don't we have.

00:18:22.625 --> 00:18:25.025
<v Speaker 2>Just the Docker file. Nothing. Just the yeah.

00:18:26.225 --> 00:18:29.105
<v Speaker 1>Yeah. That script is actually that that there's

00:18:29.105 --> 00:18:30.465
<v Speaker 1>a little story behind that one, but

00:18:31.060 --> 00:18:32.260
<v Speaker 1>I I will wait.

00:18:33.380 --> 00:18:35.780
<v Speaker 1>I'm curious I'm curious to see see

00:18:35.940 --> 00:18:37.540
<v Speaker 1>what conclusion you you

00:18:37.860 --> 00:18:39.059
<v Speaker 1>you reach.

00:18:40.020 --> 00:18:42.580
<v Speaker 0>Alright. Alright. We have let me fix your

00:18:42.580 --> 00:18:44.980
<v Speaker 0>bash header here. So user

00:18:45.815 --> 00:18:47.735
<v Speaker 0>and ENB bash.

00:18:47.975 --> 00:18:49.895
<v Speaker 0>Oh, go ahead and think about interruptibility here.

00:18:49.895 --> 00:18:51.095
<v Speaker 1>First pull request.

00:18:52.775 --> 00:18:55.015
<v Speaker 0>Alright. So it's looking for some sort of

00:18:55.015 --> 00:18:56.215
<v Speaker 0>keys fail

00:18:58.455 --> 00:18:59.655
<v Speaker 0>and does Dagger help?

00:19:02.120 --> 00:19:02.759
<v Speaker 0>H.

00:19:04.280 --> 00:19:07.559
<v Speaker 0>This is using the h two.

00:19:08.760 --> 00:19:10.440
<v Speaker 0>Yeah. I don't know what's going on here.

00:19:10.760 --> 00:19:12.200
<v Speaker 0>Should I should this should this make sense

00:19:12.200 --> 00:19:12.520
<v Speaker 0>to me?

00:19:13.725 --> 00:19:15.565
<v Speaker 1>No. No. There should be a comment at

00:19:15.565 --> 00:19:17.565
<v Speaker 1>the top saying, you can ignore this. You

00:19:17.565 --> 00:19:19.565
<v Speaker 0>should ignore this. You're gonna run you're you're

00:19:19.565 --> 00:19:21.485
<v Speaker 1>gonna have to run it later, and then

00:19:21.485 --> 00:19:23.565
<v Speaker 1>the the tutorial actually explains

00:19:23.805 --> 00:19:25.805
<v Speaker 1>what it does. Alright. This PR will be

00:19:25.805 --> 00:19:27.325
<v Speaker 0>pending after this call. There we go.

00:19:28.510 --> 00:19:29.149
<v Speaker 1>Yes.

00:19:29.630 --> 00:19:31.150
<v Speaker 0>So I think the first thing that's jumping

00:19:31.150 --> 00:19:32.429
<v Speaker 0>out to me, like this is just a

00:19:32.429 --> 00:19:35.630
<v Speaker 0>standard JavaScript application with a package dot JSON,

00:19:35.630 --> 00:19:37.309
<v Speaker 0>some random script you've already told me I

00:19:37.309 --> 00:19:39.549
<v Speaker 0>can ignore with some JavaScript code.

00:19:39.950 --> 00:19:42.590
<v Speaker 0>We do have a dot Dagger file. That's

00:19:42.590 --> 00:19:44.030
<v Speaker 0>the only thing that appears to be different.

00:19:44.085 --> 00:19:46.404
<v Speaker 0>So the way that we work and interact

00:19:46.404 --> 00:19:48.325
<v Speaker 0>with Dagger, is it through this dot Dagger

00:19:48.325 --> 00:19:50.164
<v Speaker 0>directory, or is this something else I should

00:19:50.164 --> 00:19:50.724
<v Speaker 0>ignore?

00:19:51.125 --> 00:19:53.604
<v Speaker 1>Correct. No. That's it. But

00:19:56.240 --> 00:19:58.880
<v Speaker 0>Alright. The answer is easily easily answered by

00:19:58.880 --> 00:20:00.800
<v Speaker 1>reading the next the next paragraph of the

00:20:00.800 --> 00:20:02.960
<v Speaker 1>docs. We don't need docs. I'm gonna make

00:20:02.960 --> 00:20:03.679
<v Speaker 0>this up.

00:20:04.000 --> 00:20:07.840
<v Speaker 0>So Okay. Go. Go. I see values fail,

00:20:07.840 --> 00:20:09.920
<v Speaker 0>which which makes me think of helm.

00:20:12.115 --> 00:20:14.114
<v Speaker 0>And then we've got some queue files.

00:20:14.434 --> 00:20:16.195
<v Speaker 0>I can see there's a YARN package, an

00:20:16.195 --> 00:20:17.955
<v Speaker 0>s three package. Okay.

00:20:18.914 --> 00:20:20.195
<v Speaker 0>I know what this is.

00:20:20.995 --> 00:20:22.994
<v Speaker 0>So this is a Dagger.

00:20:23.875 --> 00:20:25.475
<v Speaker 0>What would you call it? Would it be

00:20:25.475 --> 00:20:27.394
<v Speaker 0>a Dagger manifest, a Dagger package? Is it

00:20:27.394 --> 00:20:29.210
<v Speaker 0>just a do you have a name for

00:20:29.210 --> 00:20:30.170
<v Speaker 0>it? Yeah.

00:20:30.570 --> 00:20:32.730
<v Speaker 1>It's a plan. A plan. Dagger plan. Oh,

00:20:32.730 --> 00:20:33.690
<v Speaker 0>in fact, it's right there in front of

00:20:33.690 --> 00:20:35.770
<v Speaker 0>me in the the directory. Okay. This is

00:20:35.770 --> 00:20:38.410
<v Speaker 0>a Dagger plan that builds a container image,

00:20:39.370 --> 00:20:41.690
<v Speaker 0>pushes it to

00:20:42.125 --> 00:20:43.164
<v Speaker 0>and then

00:20:44.365 --> 00:20:45.565
<v Speaker 0>does a YARN

00:20:46.605 --> 00:20:48.765
<v Speaker 0>publish, guess, upload it to s three and

00:20:48.765 --> 00:20:50.524
<v Speaker 0>I get a sapphic website. Is that close?

00:20:53.160 --> 00:20:54.840
<v Speaker 1>No. Actually, it does less than that. The

00:20:54.920 --> 00:20:56.280
<v Speaker 1>the it only

00:20:56.680 --> 00:20:58.280
<v Speaker 1>it it deploys

00:20:58.280 --> 00:21:01.640
<v Speaker 1>a a mini staging environment of your React

00:21:01.640 --> 00:21:02.520
<v Speaker 1>application,

00:21:02.920 --> 00:21:04.200
<v Speaker 1>just the front end,

00:21:05.160 --> 00:21:07.640
<v Speaker 1>on a shared s three bucket.

00:21:08.435 --> 00:21:10.514
<v Speaker 1>And the the ECR thing

00:21:10.915 --> 00:21:13.715
<v Speaker 1>is actually an implementation detail of

00:21:13.875 --> 00:21:15.554
<v Speaker 1>if you go to the names file

00:21:17.955 --> 00:21:19.875
<v Speaker 1>so the names file, that's a little a

00:21:19.875 --> 00:21:21.475
<v Speaker 1>custom custom logic

00:21:21.710 --> 00:21:24.830
<v Speaker 1>written by the delivery expert to run,

00:21:25.070 --> 00:21:27.310
<v Speaker 1>you know, the the funny name generator from

00:21:27.310 --> 00:21:29.710
<v Speaker 1>from Docker, you know, the container names? Mhmm.

00:21:29.790 --> 00:21:31.309
<v Speaker 1>So it actually runs

00:21:31.470 --> 00:21:32.750
<v Speaker 1>a Docker image

00:21:33.070 --> 00:21:35.550
<v Speaker 1>with that little that code that name generator

00:21:35.550 --> 00:21:38.815
<v Speaker 1>inside it, and that spits out dynamically a

00:21:38.815 --> 00:21:40.415
<v Speaker 1>cute name, and then it injects that in

00:21:40.415 --> 00:21:41.375
<v Speaker 1>the configuration.

00:21:41.615 --> 00:21:43.935
<v Speaker 1>And it does that so that everyone doing

00:21:43.935 --> 00:21:45.935
<v Speaker 1>the tutorial can deploy the same s three

00:21:45.935 --> 00:21:47.855
<v Speaker 1>bucket, which is ours, and everyone has a

00:21:47.855 --> 00:21:49.855
<v Speaker 1>separate little directory in that s three bucket.

00:21:49.935 --> 00:21:51.370
<v Speaker 1>So it's sort of like a poor man's

00:21:51.370 --> 00:21:52.330
<v Speaker 1>multitenancy

00:21:52.490 --> 00:21:54.490
<v Speaker 1>so that you can deploy something right now,

00:21:55.210 --> 00:21:55.929
<v Speaker 1>basically,

00:21:56.250 --> 00:21:58.730
<v Speaker 1>on our s three credentials. So you can

00:21:58.730 --> 00:22:01.290
<v Speaker 1>actually deploy something without having to fiddle around

00:22:01.290 --> 00:22:02.010
<v Speaker 1>with infrastructure.

00:22:03.205 --> 00:22:04.965
<v Speaker 0>Alright. I got yelled out from the audience

00:22:04.965 --> 00:22:06.565
<v Speaker 0>because I didn't drag my terminal up so

00:22:06.565 --> 00:22:07.924
<v Speaker 0>they could see the last line, so I

00:22:07.924 --> 00:22:10.164
<v Speaker 0>have now fixed that. Apologies at all.

00:22:10.884 --> 00:22:12.245
<v Speaker 0>And I should know better. I do that

00:22:12.245 --> 00:22:13.604
<v Speaker 0>every single day.

00:22:14.565 --> 00:22:16.565
<v Speaker 0>Okay. So we've got funny names. We've got

00:22:16.565 --> 00:22:17.365
<v Speaker 0>a Dagger plan.

00:22:18.940 --> 00:22:20.940
<v Speaker 0>I mean, I could continue to ignore the

00:22:20.940 --> 00:22:23.500
<v Speaker 0>docs and be entirely useless and just run

00:22:23.500 --> 00:22:25.500
<v Speaker 0>a dagger up and see what happens.

00:22:25.660 --> 00:22:28.460
<v Speaker 1>Dagger up. Yes. Run dagger up.

00:22:29.900 --> 00:22:31.580
<v Speaker 0>Alright. So it's telling me that it tried

00:22:31.580 --> 00:22:34.285
<v Speaker 0>to load some identity from this dagger keys

00:22:34.285 --> 00:22:35.725
<v Speaker 0>fail, a script that you told me to

00:22:35.725 --> 00:22:38.445
<v Speaker 0>ignore. So okay. Exactly. So you should run

00:22:38.445 --> 00:22:41.485
<v Speaker 1>it. Should run it, but ignore it. Ignore

00:22:41.485 --> 00:22:43.164
<v Speaker 2>the content that just ran it.

00:22:44.685 --> 00:22:45.805
<v Speaker 1>Run it without reading it.

00:22:49.100 --> 00:22:51.419
<v Speaker 0>It sounds like a really bad idea, but

00:22:51.419 --> 00:22:52.059
<v Speaker 0>okay.

00:22:52.380 --> 00:22:54.779
<v Speaker 1>Yeah. Let let me explain let me explain

00:22:54.860 --> 00:22:57.019
<v Speaker 1>what you're doing. So by the way, the

00:22:57.019 --> 00:23:00.380
<v Speaker 1>docs explained this. So the the so here's

00:23:00.380 --> 00:23:02.035
<v Speaker 1>our thinking. Oh, we should do a tutorial

00:23:02.035 --> 00:23:04.035
<v Speaker 1>where you can do something really easy, really

00:23:04.035 --> 00:23:06.275
<v Speaker 1>quickly from just right away.

00:23:06.915 --> 00:23:08.915
<v Speaker 1>But oh, but how would we do that?

00:23:08.915 --> 00:23:10.674
<v Speaker 1>How do we get you to deploy something

00:23:11.155 --> 00:23:13.475
<v Speaker 1>without telling you, oh, first, go to your

00:23:13.475 --> 00:23:16.289
<v Speaker 1>Amazon account and, you know, get some credentials

00:23:16.289 --> 00:23:18.130
<v Speaker 1>and inject them. So what we did is

00:23:18.130 --> 00:23:19.090
<v Speaker 1>we preconfigured

00:23:19.090 --> 00:23:20.049
<v Speaker 1>an environment,

00:23:20.850 --> 00:23:23.330
<v Speaker 1>with our own s three credentials properly locked

00:23:23.330 --> 00:23:25.490
<v Speaker 1>down so you can't just, like, do stupid

00:23:25.490 --> 00:23:27.490
<v Speaker 1>things. You can only upload to that one

00:23:27.490 --> 00:23:29.970
<v Speaker 1>s three bucket, and then we preloaded it

00:23:30.485 --> 00:23:32.565
<v Speaker 1>in the environment in the Dagger environment. So

00:23:32.565 --> 00:23:34.165
<v Speaker 1>when you run Dagger up, you're actually

00:23:34.885 --> 00:23:37.285
<v Speaker 1>some of the input values are preconfigured by

00:23:37.285 --> 00:23:37.845
<v Speaker 1>us.

00:23:38.165 --> 00:23:41.125
<v Speaker 1>And that's actually a really useful collaboration

00:23:41.125 --> 00:23:42.485
<v Speaker 1>pattern where your

00:23:42.940 --> 00:23:45.740
<v Speaker 1>infrastructure team can preconfigure things for you. And

00:23:45.740 --> 00:23:47.980
<v Speaker 1>then you by running Dagger up, you finish

00:23:47.980 --> 00:23:48.780
<v Speaker 1>deployment.

00:23:48.860 --> 00:23:50.299
<v Speaker 1>And so you get this kind of

00:23:50.780 --> 00:23:52.780
<v Speaker 1>Heroku like experience where you don't have to

00:23:52.780 --> 00:23:55.495
<v Speaker 1>know all the credentials. The problem is in

00:23:55.495 --> 00:23:57.174
<v Speaker 1>this usually, you do this in a small

00:23:57.174 --> 00:23:59.255
<v Speaker 1>team or in a team where everyone knows

00:23:59.255 --> 00:24:01.735
<v Speaker 1>each other and someone decides, okay. This person

00:24:01.735 --> 00:24:03.655
<v Speaker 1>has access to the credentials and this other

00:24:03.655 --> 00:24:05.575
<v Speaker 1>person and no one else does. In this

00:24:05.575 --> 00:24:08.054
<v Speaker 1>case, it's kind of a weird special case.

00:24:08.054 --> 00:24:09.495
<v Speaker 1>We want the whole world to be able

00:24:09.495 --> 00:24:10.375
<v Speaker 1>to deploy

00:24:10.710 --> 00:24:12.309
<v Speaker 1>to our s three bucket, and that's actually

00:24:12.309 --> 00:24:15.429
<v Speaker 1>not supported by Dagger maybe for obvious reasons.

00:24:16.470 --> 00:24:17.029
<v Speaker 1>So,

00:24:17.270 --> 00:24:19.669
<v Speaker 1>like, because Dagger it will not allow us

00:24:19.669 --> 00:24:21.109
<v Speaker 1>to not encrypt

00:24:21.429 --> 00:24:23.030
<v Speaker 1>the, the s three credentials.

00:24:23.535 --> 00:24:25.695
<v Speaker 1>You know what I mean? So, basically, our

00:24:25.695 --> 00:24:28.015
<v Speaker 1>workaround is to give the whole world access

00:24:28.015 --> 00:24:30.895
<v Speaker 1>to this particular private key that is used

00:24:30.895 --> 00:24:33.695
<v Speaker 1>only for encrypting these s three credentials. And

00:24:33.695 --> 00:24:36.015
<v Speaker 1>so the script basically adds to your key

00:24:36.015 --> 00:24:39.740
<v Speaker 1>chain this special key that will give you

00:24:39.740 --> 00:24:40.380
<v Speaker 1>access

00:24:40.620 --> 00:24:43.900
<v Speaker 1>to the tutorial credentials. So, basically, it's a

00:24:43.900 --> 00:24:46.700
<v Speaker 1>script to hack the tutorial environment.

00:24:47.660 --> 00:24:49.660
<v Speaker 0>Okay. So you have a published s three

00:24:49.660 --> 00:24:52.055
<v Speaker 0>bucket. Rename it to hack tutorial that I

00:24:52.055 --> 00:24:53.895
<v Speaker 1>say to be more then everyone would run

00:24:53.895 --> 00:24:55.654
<v Speaker 1>it for sure. Exactly.

00:24:55.735 --> 00:24:57.335
<v Speaker 0>Alright. So there's an s three bucket that

00:24:57.335 --> 00:24:59.895
<v Speaker 0>you provisioned. You're distributing the private key, which

00:24:59.895 --> 00:25:01.815
<v Speaker 0>gives us access to the encrypted secret for

00:25:01.815 --> 00:25:03.815
<v Speaker 0>Dagger to be able to upload my

00:25:04.055 --> 00:25:06.679
<v Speaker 0>application to it. Okay. Right.

00:25:07.880 --> 00:25:09.400
<v Speaker 0>Let's try Dagger up again.

00:25:10.760 --> 00:25:12.760
<v Speaker 0>Oh, and I should really have Docker running,

00:25:12.760 --> 00:25:13.480
<v Speaker 0>shouldn't I?

00:25:14.760 --> 00:25:17.160
<v Speaker 1>Yes. You can also have a build kit

00:25:17.160 --> 00:25:19.575
<v Speaker 1>daemon. You only just need build kit. So

00:25:19.575 --> 00:25:21.735
<v Speaker 1>if you have a a non Docker build

00:25:21.735 --> 00:25:23.894
<v Speaker 1>kit setup that that sometimes happens,

00:25:24.294 --> 00:25:25.975
<v Speaker 1>we support that too. You just need build

00:25:25.975 --> 00:25:26.534
<v Speaker 1>kit.

00:25:26.775 --> 00:25:27.975
<v Speaker 0>Alright. Okay.

00:25:29.015 --> 00:25:31.895
<v Speaker 0>Well, we'll just give Docker a few seconds

00:25:31.895 --> 00:25:34.690
<v Speaker 0>to start up, and I will use that

00:25:34.690 --> 00:25:37.249
<v Speaker 0>opportunity to read the documentation there.

00:25:37.970 --> 00:25:40.130
<v Speaker 0>So look at that. The next line, import

00:25:40.130 --> 00:25:41.009
<v Speaker 0>the tutorial.

00:25:43.730 --> 00:25:46.450
<v Speaker 0>Alright. Okay. So we've done this now. Actually,

00:25:46.450 --> 00:25:46.690
<v Speaker 1>yeah.

00:25:47.475 --> 00:25:49.235
<v Speaker 1>Yeah. It's basically exactly what I said, but

00:25:49.235 --> 00:25:51.235
<v Speaker 1>in written form. Well, it's nicer to hear

00:25:51.235 --> 00:25:52.355
<v Speaker 0>it from you than it is to read

00:25:52.355 --> 00:25:53.955
<v Speaker 0>it from the the documentation,

00:25:53.955 --> 00:25:54.914
<v Speaker 0>so I'll take it.

00:25:55.395 --> 00:25:57.155
<v Speaker 1>I already mentioned I like talking, so not

00:25:57.155 --> 00:25:57.555
<v Speaker 1>a problem.

00:25:59.200 --> 00:26:01.200
<v Speaker 0>And then next command is Dagger up. Assuming

00:26:01.200 --> 00:26:03.360
<v Speaker 0>I started Docker, it's on the way,

00:26:03.760 --> 00:26:05.520
<v Speaker 0>and I think we kinda covered what we

00:26:05.520 --> 00:26:08.080
<v Speaker 0>expect to happen here. So Mhmm. We also

00:26:08.080 --> 00:26:10.320
<v Speaker 0>have access to a Dagger list, which is

00:26:10.320 --> 00:26:12.480
<v Speaker 0>going to, I guess, list all of our

00:26:12.480 --> 00:26:14.640
<v Speaker 0>plans or environments as it says here.

00:26:15.815 --> 00:26:17.975
<v Speaker 1>Yeah. So yeah. So

00:26:18.535 --> 00:26:20.135
<v Speaker 1>everything happens in an environment,

00:26:20.615 --> 00:26:23.655
<v Speaker 1>and Dagger lists lists your environments. And then

00:26:23.655 --> 00:26:25.495
<v Speaker 1>each environment has a plan, which is like

00:26:25.495 --> 00:26:27.335
<v Speaker 1>the source code of the environment. It defines

00:26:27.335 --> 00:26:28.055
<v Speaker 1>what it should do.

00:26:30.460 --> 00:26:31.740
<v Speaker 0>Alright. Awesome.

00:26:32.380 --> 00:26:33.900
<v Speaker 0>And then we got input less. Okay. I

00:26:33.900 --> 00:26:35.980
<v Speaker 0>wanna be able to run these Dagger commands,

00:26:35.980 --> 00:26:37.500
<v Speaker 0>so I am not gonna

00:26:37.580 --> 00:26:39.020
<v Speaker 0>jump ahead here.

00:26:39.340 --> 00:26:41.420
<v Speaker 0>What we'll do is we'll try our Dagger

00:26:41.420 --> 00:26:42.460
<v Speaker 0>up again.

00:26:51.645 --> 00:26:53.165
<v Speaker 0>It's working. There we go. The first time

00:26:53.165 --> 00:26:55.165
<v Speaker 2>it's gonna be a little bit slow because

00:26:55.165 --> 00:26:57.085
<v Speaker 2>it's starting up build kit. So it's gonna

00:26:57.085 --> 00:26:59.405
<v Speaker 2>take like fifteen seconds or so, but it

00:26:59.405 --> 00:27:00.605
<v Speaker 2>should be fast more time.

00:27:01.700 --> 00:27:04.260
<v Speaker 0>Yes. Those get runs as a spawn container

00:27:04.260 --> 00:27:06.580
<v Speaker 0>on the Docker system, doesn't it? And then

00:27:06.740 --> 00:27:08.820
<v Speaker 0>yeah. Okay. Yep. That's how we get all

00:27:08.820 --> 00:27:10.580
<v Speaker 0>of that funky caching stuff that you mentioned

00:27:10.580 --> 00:27:11.140
<v Speaker 0>about earlier.

00:27:16.345 --> 00:27:18.905
<v Speaker 0>Yep. No. No. That's correct. Because of Docker

00:27:18.905 --> 00:27:20.745
<v Speaker 0>desktop, we all have access to build kit

00:27:20.745 --> 00:27:22.184
<v Speaker 0>already. Very

00:27:22.265 --> 00:27:23.465
<v Speaker 0>convenient. Correct.

00:27:24.905 --> 00:27:25.625
<v Speaker 1>Also,

00:27:25.865 --> 00:27:27.785
<v Speaker 1>any modern CI

00:27:27.460 --> 00:27:29.380
<v Speaker 1>system has some sort of way to run

00:27:29.380 --> 00:27:31.780
<v Speaker 1>containers, we can piggyback on that too. So

00:27:31.780 --> 00:27:33.700
<v Speaker 1>you can embed Dagger in,

00:27:34.020 --> 00:27:36.980
<v Speaker 1>you know, your GitLab or GitHub actions setup.

00:27:36.980 --> 00:27:37.860
<v Speaker 1>No problem,

00:27:38.900 --> 00:27:39.780
<v Speaker 1>which is very useful.

00:27:43.315 --> 00:27:44.434
<v Speaker 0>Okay. So

00:27:45.555 --> 00:27:46.355
<v Speaker 0>let's

00:27:47.315 --> 00:27:48.755
<v Speaker 0>let's see what it's doing here.

00:27:49.315 --> 00:27:52.275
<v Speaker 0>Scroll up. So it generated our funny name.

00:27:52.275 --> 00:27:53.715
<v Speaker 0>So does that mean that I've pulled down

00:27:53.715 --> 00:27:55.955
<v Speaker 0>that container image from ECR and actually got

00:27:55.955 --> 00:27:57.075
<v Speaker 0>it to spell a name?

00:27:58.030 --> 00:28:00.350
<v Speaker 0>We got something to do with source computing

00:28:00.350 --> 00:28:02.510
<v Speaker 0>and completed. I don't really know that yet.

00:28:02.510 --> 00:28:04.190
<v Speaker 0>We got our app source to the same

00:28:04.190 --> 00:28:04.750
<v Speaker 0>thing.

00:28:07.550 --> 00:28:08.830
<v Speaker 0>Should I know what that is or do

00:28:08.830 --> 00:28:09.790
<v Speaker 0>we skip past that?

00:28:11.425 --> 00:28:12.385
<v Speaker 1>No.

00:28:12.385 --> 00:28:14.705
<v Speaker 1>You don't need well, as the as the

00:28:14.705 --> 00:28:17.265
<v Speaker 1>developer who just wants to deploy your thing,

00:28:17.345 --> 00:28:18.945
<v Speaker 1>you don't need to know what's going on.

00:28:19.345 --> 00:28:21.345
<v Speaker 0>Alright. Okay. So this now looks like this

00:28:21.345 --> 00:28:23.265
<v Speaker 0>is doing our container image build based on

00:28:23.265 --> 00:28:25.105
<v Speaker 0>our Docker file perhaps.

00:28:25.185 --> 00:28:25.905
<v Speaker 0>Yep.

00:28:26.070 --> 00:28:28.309
<v Speaker 0>Now it's there. So we just have to

00:28:28.309 --> 00:28:30.789
<v Speaker 0>wait now for a Yarn install. Those are

00:28:30.789 --> 00:28:32.309
<v Speaker 0>notoriously quick. Right?

00:28:34.149 --> 00:28:35.909
<v Speaker 0>I don't know if the sarcasm came across

00:28:35.909 --> 00:28:38.309
<v Speaker 0>there, but it was Yes. It did.

00:28:39.110 --> 00:28:40.870
<v Speaker 1>We knew exactly what you're talking about.

00:28:42.525 --> 00:28:45.085
<v Speaker 0>Yeah. Another type of sat watching NPM installs

00:28:45.085 --> 00:28:46.845
<v Speaker 0>or Yarn install. Not

00:28:47.325 --> 00:28:49.165
<v Speaker 1>it's actually not building that from the the

00:28:49.165 --> 00:28:50.925
<v Speaker 1>the Dockerfile. I I don't think that the

00:28:51.005 --> 00:28:52.765
<v Speaker 1>what it's doing here is it's actually

00:28:53.245 --> 00:28:55.405
<v Speaker 1>building a container on the fly

00:28:55.690 --> 00:28:57.850
<v Speaker 1>that will then perform the YARN build. So

00:28:57.850 --> 00:28:59.850
<v Speaker 1>it's basically yeah. It's building

00:29:00.330 --> 00:29:02.090
<v Speaker 1>a lot of the components that you saw,

00:29:02.090 --> 00:29:03.610
<v Speaker 1>like the s three component and the YARN

00:29:03.610 --> 00:29:06.570
<v Speaker 1>component. They do they do things in containers.

00:29:06.650 --> 00:29:08.490
<v Speaker 1>And so the developer of those packages,

00:29:09.175 --> 00:29:11.255
<v Speaker 1>at some point, specified

00:29:11.255 --> 00:29:13.095
<v Speaker 1>what that container should be and how to

00:29:13.095 --> 00:29:14.935
<v Speaker 1>build it. And so the first time you

00:29:14.935 --> 00:29:15.495
<v Speaker 1>run,

00:29:16.535 --> 00:29:19.415
<v Speaker 1>an an an Netlify operation, for example, or,

00:29:19.575 --> 00:29:20.855
<v Speaker 1>no. Sorry. What am I saying? In this

00:29:20.855 --> 00:29:22.535
<v Speaker 1>case, it's s three an s three operation

00:29:22.535 --> 00:29:24.455
<v Speaker 1>or or Yarn operation,

00:29:24.990 --> 00:29:25.789
<v Speaker 1>you're

00:29:26.350 --> 00:29:28.830
<v Speaker 1>you're building the container as the author of

00:29:28.830 --> 00:29:30.350
<v Speaker 1>the package specified. And then it's all cash,

00:29:30.350 --> 00:29:31.389
<v Speaker 1>so it will be fast.

00:29:32.110 --> 00:29:32.830
<v Speaker 0>Nice.

00:29:33.470 --> 00:29:35.150
<v Speaker 0>Alright. Well, since we've got a moment because

00:29:35.150 --> 00:29:36.510
<v Speaker 0>of this YARN install,

00:29:38.934 --> 00:29:41.335
<v Speaker 0>we'll just pop back over here because that's

00:29:41.335 --> 00:29:44.375
<v Speaker 0>where I left my little thing here. That's

00:29:44.375 --> 00:29:46.375
<v Speaker 0>the wrong one. Oh, funny that his comment

00:29:46.375 --> 00:29:47.414
<v Speaker 0>came out at the same time, so I'll

00:29:47.414 --> 00:29:49.335
<v Speaker 0>show both at the same time. There's an

00:29:49.335 --> 00:29:51.740
<v Speaker 0>episode of the podcast being released this Thursday

00:29:51.740 --> 00:29:53.660
<v Speaker 0>of which I believe, Solomon, you had the

00:29:53.660 --> 00:29:56.380
<v Speaker 0>honor of chatting with with Pop. Right? Yes.

00:29:56.860 --> 00:29:59.420
<v Speaker 0>So if you wanna watch that or see

00:29:59.420 --> 00:30:01.260
<v Speaker 0>an announcement when it launches, you can follow

00:30:01.260 --> 00:30:02.940
<v Speaker 0>podcast pop on Twitter.

00:30:03.660 --> 00:30:06.245
<v Speaker 0>And I've heard it's it's pretty good. It's

00:30:06.245 --> 00:30:08.165
<v Speaker 0>just surprising for Pop because his material is

00:30:08.165 --> 00:30:08.725
<v Speaker 0>crap.

00:30:09.685 --> 00:30:12.325
<v Speaker 0>Sorry, Dan. I just I just you bend

00:30:12.325 --> 00:30:14.405
<v Speaker 0>a pineapple pizza and I'm still raging about

00:30:14.405 --> 00:30:15.685
<v Speaker 0>it, mate. Like, I can't believe you threw

00:30:15.685 --> 00:30:17.685
<v Speaker 0>a whole pineapple pizza in the bin, but

00:30:17.685 --> 00:30:19.125
<v Speaker 0>I'll I'll hold it back.

00:30:20.030 --> 00:30:22.190
<v Speaker 1>You should definitely watch that episode if you

00:30:22.190 --> 00:30:23.309
<v Speaker 1>wanna see what happens

00:30:23.710 --> 00:30:25.629
<v Speaker 1>when you record a

00:30:26.030 --> 00:30:27.950
<v Speaker 1>when you record a a podcast.

00:30:28.270 --> 00:30:31.150
<v Speaker 0>On an iPad? Outdoors without without checking on

00:30:31.150 --> 00:30:32.429
<v Speaker 1>an iPad. I was on an iPad, but

00:30:32.429 --> 00:30:33.230
<v Speaker 1>it did not crash.

00:30:33.875 --> 00:30:36.195
<v Speaker 1>But, I I did do it outdoors and

00:30:36.195 --> 00:30:38.115
<v Speaker 1>did not check the weather forecast first. So

00:30:40.674 --> 00:30:43.554
<v Speaker 0>Was it stormy, rainy, snowy? Which random weather

00:30:43.554 --> 00:30:46.355
<v Speaker 0>did you get for the day? Thunderstorm.

00:30:47.010 --> 00:30:49.490
<v Speaker 1>First thunder and then and thunder, and I

00:30:49.490 --> 00:30:51.330
<v Speaker 1>thought, oh, that was noisy. Sorry. And then

00:30:51.330 --> 00:30:53.169
<v Speaker 1>I didn't even think to

00:30:53.410 --> 00:30:55.250
<v Speaker 1>go for cover. So later it went.

00:30:56.530 --> 00:30:57.730
<v Speaker 1>And now you know.

00:30:59.010 --> 00:31:00.850
<v Speaker 0>Well, Yaron is now telling me that I

00:31:00.850 --> 00:31:02.875
<v Speaker 0>have a problem with my network so that's

00:31:02.875 --> 00:31:03.994
<v Speaker 0>wonderful as well.

00:31:04.715 --> 00:31:06.315
<v Speaker 1>Oh, I think we actually have that issue.

00:31:06.315 --> 00:31:08.394
<v Speaker 1>It's the Yaron registry thing. Right?

00:31:10.475 --> 00:31:12.554
<v Speaker 1>It might be a Yaron registry issue. If

00:31:13.915 --> 00:31:15.115
<v Speaker 0>we ignore it, will it go away?

00:31:18.740 --> 00:31:20.499
<v Speaker 1>Maybe you try rerunning.

00:31:21.380 --> 00:31:22.580
<v Speaker 0>You say you don't wanna give it thirty

00:31:22.580 --> 00:31:24.020
<v Speaker 0>seconds? You want you want me to control

00:31:24.020 --> 00:31:24.659
<v Speaker 0>c?

00:31:25.620 --> 00:31:27.860
<v Speaker 1>I don't know. Either way, recall.

00:31:30.065 --> 00:31:31.264
<v Speaker 0>Alright. Well, The

00:31:31.905 --> 00:31:33.745
<v Speaker 1>sad thing is if we if you control

00:31:33.745 --> 00:31:35.345
<v Speaker 1>c now and you're on you where you're

00:31:35.345 --> 00:31:36.624
<v Speaker 1>not gonna get cached,

00:31:37.025 --> 00:31:38.304
<v Speaker 1>the the the

00:31:38.705 --> 00:31:40.625
<v Speaker 1>you know, built it only caches a successful

00:31:40.625 --> 00:31:42.945
<v Speaker 1>operation. So if you if you control c

00:31:42.945 --> 00:31:44.304
<v Speaker 1>now, you're gonna have to rerun everything.

00:31:45.929 --> 00:31:46.970
<v Speaker 0>Of course.

00:31:49.690 --> 00:31:50.889
<v Speaker 1>So it's a dilemma.

00:31:51.049 --> 00:31:52.730
<v Speaker 0>I know. It's

00:31:52.809 --> 00:31:54.009
<v Speaker 0>catch 22.

00:31:56.090 --> 00:31:57.450
<v Speaker 0>Because we could just run it again and

00:31:57.450 --> 00:31:59.690
<v Speaker 0>get presented with the same trouble with my

00:31:59.690 --> 00:32:00.410
<v Speaker 0>network connection.

00:32:03.345 --> 00:32:05.184
<v Speaker 0>I'm sorry. Solomon likes to talk. We'll just

00:32:05.184 --> 00:32:06.304
<v Speaker 0>let you go. What if you go for

00:32:06.304 --> 00:32:06.864
<v Speaker 0>us?

00:32:10.065 --> 00:32:11.984
<v Speaker 1>What should I talk about? Let's see.

00:32:13.184 --> 00:32:14.865
<v Speaker 1>Well, one thing we could do is maybe

00:32:14.945 --> 00:32:16.705
<v Speaker 1>I don't know if your setup

00:32:16.860 --> 00:32:18.300
<v Speaker 1>supports it. I mean, I know on an

00:32:18.300 --> 00:32:19.500
<v Speaker 1>iPad, I can do it, but,

00:32:19.900 --> 00:32:21.740
<v Speaker 1>maybe while it's running,

00:32:22.140 --> 00:32:23.580
<v Speaker 1>maybe you can look at some code at

00:32:23.580 --> 00:32:25.740
<v Speaker 1>the same time, and I can comment the

00:32:25.740 --> 00:32:27.580
<v Speaker 1>the plan, actually, the source code of

00:32:28.140 --> 00:32:29.740
<v Speaker 1>the source code describing

00:32:29.740 --> 00:32:31.965
<v Speaker 1>what's actually happening on the screen. Right? Yeah.

00:32:31.965 --> 00:32:33.165
<v Speaker 0>Alright. Let's take a look at the queue

00:32:33.165 --> 00:32:34.124
<v Speaker 0>then. Right.

00:32:35.245 --> 00:32:36.765
<v Speaker 1>So if you look at main dot queue,

00:32:36.765 --> 00:32:38.445
<v Speaker 1>I'll show you the line that's currently having

00:32:38.445 --> 00:32:40.044
<v Speaker 1>trouble. We can we can,

00:32:42.205 --> 00:32:43.565
<v Speaker 1>do a little virtual

00:32:44.670 --> 00:32:45.470
<v Speaker 1>troubleshooting.

00:32:45.470 --> 00:32:46.990
<v Speaker 1>So I think that's the one. So it's

00:32:46.990 --> 00:32:48.830
<v Speaker 1>a Yarn it's Yarn dot package. So we're

00:32:48.830 --> 00:32:51.150
<v Speaker 1>basically here declaratively saying,

00:32:52.830 --> 00:32:55.710
<v Speaker 1>there's a Yarn package here in, one of

00:32:55.710 --> 00:32:57.070
<v Speaker 1>the nodes in our graph is a Yarn

00:32:57.070 --> 00:32:59.515
<v Speaker 1>package. And so let's wire up that YARN

00:32:59.515 --> 00:33:01.915
<v Speaker 1>package with the correct inputs and outputs.

00:33:02.075 --> 00:33:02.795
<v Speaker 1>And so

00:33:03.115 --> 00:33:05.115
<v Speaker 1>it's basically gonna plug in source code as

00:33:05.115 --> 00:33:06.955
<v Speaker 1>an input, and it's going to run a

00:33:06.955 --> 00:33:08.955
<v Speaker 1>YARN build in a container and spit out

00:33:08.955 --> 00:33:10.635
<v Speaker 1>the build directory as an output, and then

00:33:10.635 --> 00:33:12.475
<v Speaker 1>you can wire that. So, for example,

00:33:13.460 --> 00:33:15.779
<v Speaker 1>a little lower, you see s three bucket?

00:33:16.100 --> 00:33:17.940
<v Speaker 1>So that's another node in the graph. It's

00:33:17.940 --> 00:33:20.820
<v Speaker 1>an s three object that's gonna be synchronized,

00:33:21.940 --> 00:33:23.940
<v Speaker 1>up to the s three API. So you

00:33:23.940 --> 00:33:25.779
<v Speaker 1>give it an input, which is an artifact,

00:33:25.940 --> 00:33:27.665
<v Speaker 1>and and that's gonna sync that up to

00:33:27.665 --> 00:33:29.905
<v Speaker 1>the the s three bucket as specified. And

00:33:29.905 --> 00:33:31.985
<v Speaker 1>you can see the source key for that

00:33:31.985 --> 00:33:32.625
<v Speaker 1>bucket

00:33:32.865 --> 00:33:35.105
<v Speaker 1>is app dot build, which is

00:33:35.425 --> 00:33:36.785
<v Speaker 1>of reference to

00:33:37.105 --> 00:33:40.610
<v Speaker 1>the build key in in the Yarn package,

00:33:40.610 --> 00:33:42.370
<v Speaker 1>if that makes sense. So it's basically that

00:33:42.370 --> 00:33:43.330
<v Speaker 1>line right here.

00:33:43.730 --> 00:33:45.649
<v Speaker 1>That's a link in the in the DAG.

00:33:45.650 --> 00:33:47.490
<v Speaker 0>This is what causes this to have a

00:33:47.490 --> 00:33:49.730
<v Speaker 0>dependency of the app Yarn dot package.

00:33:52.025 --> 00:33:55.225
<v Speaker 0>Right. It's basically saying take the take the

00:33:55.865 --> 00:33:57.945
<v Speaker 1>the build the Yarn build

00:33:59.065 --> 00:33:59.865
<v Speaker 1>and

00:34:00.105 --> 00:34:02.025
<v Speaker 1>stick it into the s three object as

00:34:02.025 --> 00:34:02.665
<v Speaker 1>its contents.

00:34:03.620 --> 00:34:04.660
<v Speaker 1>And so

00:34:04.820 --> 00:34:07.540
<v Speaker 1>then the Dagger engine loads that and sees,

00:34:07.540 --> 00:34:09.620
<v Speaker 1>okay. That's a dependency. From there, it will

00:34:09.620 --> 00:34:11.380
<v Speaker 1>run things in the correct order. It will

00:34:11.380 --> 00:34:12.340
<v Speaker 1>parallelize

00:34:12.820 --> 00:34:14.660
<v Speaker 1>if if needed, etcetera.

00:34:14.900 --> 00:34:16.900
<v Speaker 1>Or or rather, it will

00:34:17.555 --> 00:34:20.114
<v Speaker 1>arrange for Billkit to do that because Billkit

00:34:20.114 --> 00:34:21.795
<v Speaker 1>does most of the heavy lifting.

00:34:22.675 --> 00:34:23.955
<v Speaker 0>Okay. So

00:34:24.515 --> 00:34:25.875
<v Speaker 0>because I have a little bit of a

00:34:25.875 --> 00:34:28.435
<v Speaker 0>familiarity with q, why don't we kinda dig

00:34:28.435 --> 00:34:30.435
<v Speaker 0>into this this specific couple of lines and

00:34:32.010 --> 00:34:33.690
<v Speaker 0>let's dig into what's actually happening with these

00:34:33.690 --> 00:34:35.370
<v Speaker 0>lines. So this is in queue, this is

00:34:35.370 --> 00:34:37.370
<v Speaker 0>a module called yarn with a definition called

00:34:37.370 --> 00:34:40.010
<v Speaker 0>package. So that means that Dagger has explored

00:34:40.010 --> 00:34:42.250
<v Speaker 0>some sort of schema definition to say this

00:34:42.250 --> 00:34:43.370
<v Speaker 0>is what a package looks like.

00:34:44.045 --> 00:34:45.805
<v Speaker 0>What we are defining here is that the

00:34:45.805 --> 00:34:47.565
<v Speaker 0>source as the source which

00:34:47.805 --> 00:34:49.325
<v Speaker 0>comes to another line, we'll skip that for

00:34:49.325 --> 00:34:49.885
<v Speaker 0>now.

00:34:50.285 --> 00:34:52.685
<v Speaker 0>But there's nothing here, this is entirely declarative.

00:34:52.685 --> 00:34:54.445
<v Speaker 0>Right? This is just me saying that a

00:34:54.445 --> 00:34:55.405
<v Speaker 0>YARN package So

00:34:56.525 --> 00:34:58.525
<v Speaker 0>that means that the Dagger engine

00:34:59.330 --> 00:35:01.490
<v Speaker 0>understands what a YARN package is and how

00:35:01.490 --> 00:35:04.930
<v Speaker 0>to work with that. So I'm assuming Dagger

00:35:04.930 --> 00:35:07.010
<v Speaker 0>has a few of these integrations and maybe

00:35:07.010 --> 00:35:08.130
<v Speaker 0>we could talk about the ones that are

00:35:08.130 --> 00:35:08.770
<v Speaker 0>available.

00:35:10.130 --> 00:35:11.890
<v Speaker 1>Sure. Yeah. Actually, you could look at the

00:35:11.890 --> 00:35:13.570
<v Speaker 1>source code of YARN. That's a good example

00:35:13.570 --> 00:35:16.865
<v Speaker 1>because we developed it, but we developed it

00:35:16.865 --> 00:35:19.425
<v Speaker 1>in queue using the regular,

00:35:19.745 --> 00:35:22.785
<v Speaker 1>Dagger APIs. And so anyone can develop it.

00:35:22.785 --> 00:35:25.425
<v Speaker 1>And, actually, just earlier today on the Discord,

00:35:25.585 --> 00:35:27.665
<v Speaker 1>someone said they have a pull request they

00:35:27.665 --> 00:35:28.465
<v Speaker 1>wanna open for

00:35:29.660 --> 00:35:31.420
<v Speaker 1>a Maven integration, I think,

00:35:32.060 --> 00:35:34.140
<v Speaker 1>and they wrote it themselves. And so,

00:35:35.420 --> 00:35:37.500
<v Speaker 1>looking at the YARN package would be actually

00:35:37.500 --> 00:35:38.540
<v Speaker 1>very

00:35:38.540 --> 00:35:41.020
<v Speaker 1>useful because that's a big differentiator

00:35:41.420 --> 00:35:43.845
<v Speaker 1>of Dagger. Actually, that's what I should have

00:35:43.845 --> 00:35:45.845
<v Speaker 1>answered earlier in the question, why is it

00:35:45.845 --> 00:35:46.885
<v Speaker 1>different from CD?

00:35:48.405 --> 00:35:50.085
<v Speaker 1>Well, it's a good example of the programmable

00:35:50.085 --> 00:35:52.325
<v Speaker 1>thing. Like, in Go

00:35:52.485 --> 00:35:54.725
<v Speaker 1>or in Python or in JavaScript or whatever,

00:35:54.725 --> 00:35:56.085
<v Speaker 1>any real programmable

00:35:56.510 --> 00:35:59.470
<v Speaker 1>environment, any real platform, you write code.

00:35:59.869 --> 00:36:01.150
<v Speaker 1>You know, you have your program, like your

00:36:01.150 --> 00:36:02.829
<v Speaker 1>main function or whatever. And then at some

00:36:02.829 --> 00:36:04.750
<v Speaker 1>point, you think, oh, that part could be,

00:36:05.790 --> 00:36:07.869
<v Speaker 1>moved into a reusable package, and I can

00:36:07.869 --> 00:36:09.630
<v Speaker 1>import the package, but then maybe someone else

00:36:09.630 --> 00:36:11.869
<v Speaker 1>can or me later. And you do that.

00:36:12.234 --> 00:36:14.635
<v Speaker 1>And your main configure your main, sorry, your

00:36:14.635 --> 00:36:15.435
<v Speaker 1>main function

00:36:16.714 --> 00:36:19.515
<v Speaker 1>is written in Go, for example, and your

00:36:19.515 --> 00:36:21.435
<v Speaker 1>package is written in Go. It's all Go.

00:36:21.515 --> 00:36:23.115
<v Speaker 1>You know, the library is Go, and the

00:36:23.115 --> 00:36:25.480
<v Speaker 1>main thing is Go. And then you kinda

00:36:25.560 --> 00:36:26.600
<v Speaker 1>it can be Go all the way down

00:36:26.600 --> 00:36:29.000
<v Speaker 1>because the library can import another library, etcetera.

00:36:30.200 --> 00:36:32.600
<v Speaker 1>That's basically how it's supposed to work. But

00:36:32.600 --> 00:36:33.640
<v Speaker 1>if you're writing,

00:36:35.400 --> 00:36:38.335
<v Speaker 1>like, a a CD YAML thing, that's not

00:36:38.335 --> 00:36:40.095
<v Speaker 1>how it actually works. You know?

00:36:40.655 --> 00:36:43.135
<v Speaker 1>You have a YAML your main thing

00:36:43.135 --> 00:36:44.175
<v Speaker 1>is YAML,

00:36:44.335 --> 00:36:46.495
<v Speaker 1>and then the next level is maybe Docker

00:36:46.495 --> 00:36:48.575
<v Speaker 1>containers or shell scripts, then there's no third

00:36:48.575 --> 00:36:51.320
<v Speaker 1>layer down. You know? So there's no you

00:36:51.320 --> 00:36:53.000
<v Speaker 1>can't take your YAML and spit it out

00:36:53.000 --> 00:36:54.520
<v Speaker 1>into a sub YAML or a sub sub

00:36:54.520 --> 00:36:56.120
<v Speaker 1>YAML and expect it to work the way

00:36:56.120 --> 00:36:58.360
<v Speaker 1>you would want. And same with Terraform.

00:36:58.600 --> 00:37:01.400
<v Speaker 1>You know? You have Terraform HCL configurations,

00:37:02.325 --> 00:37:03.605
<v Speaker 1>which compose,

00:37:04.325 --> 00:37:07.205
<v Speaker 1>Terraform providers. But Terraform providers are not written

00:37:07.205 --> 00:37:08.165
<v Speaker 1>in HCL,

00:37:08.244 --> 00:37:09.685
<v Speaker 1>so you can't spin off part of your

00:37:09.685 --> 00:37:11.125
<v Speaker 1>HCL and say, oh, I'll make that a

00:37:11.125 --> 00:37:12.885
<v Speaker 1>provider now. Oh, and how about a sub

00:37:12.885 --> 00:37:13.765
<v Speaker 1>sub provider?

00:37:13.925 --> 00:37:15.205
<v Speaker 1>There's modules,

00:37:15.205 --> 00:37:17.140
<v Speaker 1>which are a separate thing, but they're kind

00:37:17.140 --> 00:37:18.340
<v Speaker 1>of a superficial

00:37:18.660 --> 00:37:19.940
<v Speaker 1>it's always two

00:37:20.340 --> 00:37:22.740
<v Speaker 1>different layers of programming. Right? And writing a

00:37:22.740 --> 00:37:24.980
<v Speaker 1>provider for ter provider for Terraform is more

00:37:24.980 --> 00:37:26.420
<v Speaker 1>like developing a driver.

00:37:26.740 --> 00:37:27.460
<v Speaker 1>You know?

00:37:28.340 --> 00:37:30.660
<v Speaker 1>Sure. Can write any driver for any

00:37:31.355 --> 00:37:32.315
<v Speaker 1>peripheral,

00:37:32.474 --> 00:37:34.155
<v Speaker 1>but it's not you know, you're not just

00:37:34.155 --> 00:37:35.595
<v Speaker 1>gonna do it on the fly as you

00:37:35.595 --> 00:37:37.275
<v Speaker 1>develop your application. You know? No one has

00:37:37.275 --> 00:37:38.715
<v Speaker 1>time for that. So

00:37:39.355 --> 00:37:42.155
<v Speaker 1>what Dagger does, it's it's just basically queue

00:37:42.155 --> 00:37:43.515
<v Speaker 1>on one side and queue on the other.

00:37:43.515 --> 00:37:45.240
<v Speaker 1>And you spin out your queue thing into

00:37:45.240 --> 00:37:46.840
<v Speaker 1>another queue thing and then they import each

00:37:46.840 --> 00:37:48.600
<v Speaker 1>other and you can keep going down

00:37:49.160 --> 00:37:51.000
<v Speaker 1>and it just works the way you you

00:37:51.000 --> 00:37:51.800
<v Speaker 1>would expect.

00:37:52.520 --> 00:37:53.400
<v Speaker 0>Awesome.

00:37:54.280 --> 00:37:57.000
<v Speaker 0>Alright. Well, I've pulled up the the yarn

00:37:57.000 --> 00:37:58.280
<v Speaker 0>package that you mentioned.

00:37:58.775 --> 00:38:01.015
<v Speaker 1>There is. I'm kind of curious like,

00:38:01.335 --> 00:38:03.335
<v Speaker 0>you know, as Dagger starts to evolve and

00:38:03.335 --> 00:38:05.095
<v Speaker 0>you start to approach GA and such like

00:38:05.095 --> 00:38:06.855
<v Speaker 0>that, do you see or are you going

00:38:06.855 --> 00:38:08.855
<v Speaker 0>to be encouraging pull requests to the standard

00:38:08.855 --> 00:38:10.935
<v Speaker 0>lib to support every tool in the world?

00:38:10.935 --> 00:38:13.119
<v Speaker 0>Do you see that being something that there's

00:38:13.119 --> 00:38:14.880
<v Speaker 0>third party slash external

00:38:14.960 --> 00:38:15.760
<v Speaker 0>packages

00:38:16.240 --> 00:38:18.240
<v Speaker 0>or libraries? Yeah. How do you envisage that

00:38:18.240 --> 00:38:18.800
<v Speaker 0>working?

00:38:19.599 --> 00:38:21.760
<v Speaker 1>So right now, yeah, we do encourage pull

00:38:21.760 --> 00:38:22.880
<v Speaker 1>requests because

00:38:23.119 --> 00:38:25.520
<v Speaker 1>it's the only practical way right now

00:38:26.000 --> 00:38:27.040
<v Speaker 1>to share,

00:38:27.440 --> 00:38:27.840
<v Speaker 1>you know,

00:38:28.665 --> 00:38:30.985
<v Speaker 1>a package like this one with everyone using

00:38:30.985 --> 00:38:31.705
<v Speaker 1>Dagger.

00:38:33.225 --> 00:38:36.745
<v Speaker 1>But that's temporary because the queue developers

00:38:37.225 --> 00:38:39.785
<v Speaker 1>are some of which I think are listening

00:38:39.785 --> 00:38:40.585
<v Speaker 1>right now,

00:38:41.065 --> 00:38:43.225
<v Speaker 1>are actively developing queue modules.

00:38:43.660 --> 00:38:45.660
<v Speaker 1>So right now, there's kind of the basic

00:38:45.660 --> 00:38:48.140
<v Speaker 1>infrastructure for importing. You can actually import

00:38:48.300 --> 00:38:49.980
<v Speaker 1>you can define queue packages. You can import

00:38:49.980 --> 00:38:51.580
<v Speaker 1>them. I mean, we're doing it right now.

00:38:51.900 --> 00:38:52.460
<v Speaker 1>But,

00:38:52.940 --> 00:38:55.980
<v Speaker 1>what's missing is the, the discovery and distribution

00:38:55.980 --> 00:38:58.845
<v Speaker 1>system. Like, with Go, you can't discover a

00:38:58.845 --> 00:39:01.165
<v Speaker 1>queue module anywhere and then download it and

00:39:01.165 --> 00:39:04.045
<v Speaker 1>then manage versions and upgrades, etcetera. So that's

00:39:04.045 --> 00:39:05.405
<v Speaker 1>what's being developed now,

00:39:06.285 --> 00:39:07.965
<v Speaker 1>heavily inspired by Go,

00:39:08.765 --> 00:39:10.365
<v Speaker 1>which is not surprising because a lot of

00:39:10.365 --> 00:39:12.819
<v Speaker 1>the queue developers are also Go developers. So,

00:39:12.819 --> 00:39:14.579
<v Speaker 1>basically, soon, you'll be able to be able

00:39:14.579 --> 00:39:16.180
<v Speaker 1>to queue get or whatever.

00:39:16.579 --> 00:39:18.660
<v Speaker 1>And then you could you know, then as

00:39:18.660 --> 00:39:19.460
<v Speaker 1>a result,

00:39:19.780 --> 00:39:22.260
<v Speaker 1>anyone could publish their package anywhere they want,

00:39:22.260 --> 00:39:23.700
<v Speaker 1>like, their own GitHub repo, and you can

00:39:23.700 --> 00:39:24.980
<v Speaker 1>just import it right here. So

00:39:26.934 --> 00:39:27.734
<v Speaker 1>then

00:39:27.815 --> 00:39:30.934
<v Speaker 1>there will be two ways to share and

00:39:30.934 --> 00:39:32.935
<v Speaker 1>reuse packages, and probably

00:39:33.414 --> 00:39:35.815
<v Speaker 1>our built in standard library will

00:39:36.055 --> 00:39:38.214
<v Speaker 1>play more of a curation

00:39:38.214 --> 00:39:38.535
<v Speaker 1>role.

00:39:39.250 --> 00:39:40.370
<v Speaker 1>You know? Like,

00:39:41.890 --> 00:39:43.970
<v Speaker 1>you can go out there and find any

00:39:43.970 --> 00:39:45.970
<v Speaker 1>package for anything. But if you wanna play

00:39:45.970 --> 00:39:47.410
<v Speaker 1>it safe and you wanna know there's a

00:39:47.410 --> 00:39:49.170
<v Speaker 1>set like, a distribution of things that are

00:39:49.170 --> 00:39:50.770
<v Speaker 1>tested together and are

00:39:50.930 --> 00:39:53.705
<v Speaker 1>known to work together, then kind of like,

00:39:53.705 --> 00:39:55.785
<v Speaker 1>I guess, a Linux distribution.

00:39:55.785 --> 00:39:58.105
<v Speaker 1>Right? But for queue configurations,

00:39:58.505 --> 00:40:00.825
<v Speaker 1>then you just you you play it safe

00:40:00.825 --> 00:40:02.985
<v Speaker 1>and you import our standard library or you

00:40:02.985 --> 00:40:04.185
<v Speaker 1>can mix and match. You know?

00:40:05.145 --> 00:40:05.705
<v Speaker 0>Awesome.

00:40:07.820 --> 00:40:09.980
<v Speaker 0>Brian Carrollton shared something with me the other

00:40:09.980 --> 00:40:11.340
<v Speaker 0>day that I thought was really cool. We're

00:40:11.340 --> 00:40:12.860
<v Speaker 0>we both do a lot of stuff in

00:40:12.860 --> 00:40:14.380
<v Speaker 0>the queue stuff as we both do a

00:40:14.380 --> 00:40:15.500
<v Speaker 0>lot of stuff with queue as well, but

00:40:15.500 --> 00:40:17.660
<v Speaker 0>someone compares a queue to web assembly and

00:40:17.660 --> 00:40:19.340
<v Speaker 0>was running it in their browser, which I

00:40:19.340 --> 00:40:21.100
<v Speaker 0>thought was a a really cool use case

00:40:21.100 --> 00:40:21.740
<v Speaker 0>for doing that.

00:40:22.914 --> 00:40:24.355
<v Speaker 0>Yeah. Okay.

00:40:25.474 --> 00:40:27.635
<v Speaker 1>Compared Q to what's sorry. I missed Someone

00:40:27.635 --> 00:40:28.515
<v Speaker 0>compiled

00:40:28.515 --> 00:40:30.914
<v Speaker 0>Q using tiny go as a web consent

00:40:31.075 --> 00:40:32.835
<v Speaker 0>a a web assembly and was using the

00:40:32.835 --> 00:40:34.674
<v Speaker 0>the Q API inside the browser, which I

00:40:34.674 --> 00:40:36.115
<v Speaker 0>thought was a really cool application of it

00:40:36.115 --> 00:40:36.515
<v Speaker 0>as well.

00:40:37.040 --> 00:40:38.480
<v Speaker 0>Yeah. It was really nice. Yeah. That is

00:40:38.480 --> 00:40:40.160
<v Speaker 1>cool. Yeah. There is all there is also

00:40:40.720 --> 00:40:43.280
<v Speaker 1>there is a an interactive Q playground that

00:40:43.280 --> 00:40:44.880
<v Speaker 1>actually runs in WebAssembly.

00:40:44.960 --> 00:40:47.200
<v Speaker 1>I think it's on the official Q website.

00:40:47.200 --> 00:40:48.800
<v Speaker 1>It works really well. Oh, nice.

00:40:49.119 --> 00:40:50.615
<v Speaker 0>I've actually used that, and I never thought

00:40:50.615 --> 00:40:51.815
<v Speaker 0>about how it worked before. But now that

00:40:51.815 --> 00:40:53.895
<v Speaker 0>you mentioned, of course, I was using WebAssembly.

00:40:53.974 --> 00:40:54.055
<v Speaker 0>So

00:40:55.415 --> 00:40:56.375
<v Speaker 0>okay. So

00:40:57.095 --> 00:40:58.695
<v Speaker 0>are we feeling confident? Do what do we

00:40:58.695 --> 00:40:59.575
<v Speaker 0>wanna look at my terminal?

00:41:01.750 --> 00:41:03.430
<v Speaker 1>I mean, I can't speak for the YARN

00:41:03.430 --> 00:41:04.550
<v Speaker 1>registry, but

00:41:05.110 --> 00:41:07.270
<v Speaker 1>sure, I believe in them. It worked.

00:41:07.430 --> 00:41:08.630
<v Speaker 0>Yay. There

00:41:09.510 --> 00:41:10.950
<v Speaker 0>we go. We talk enough and then we

00:41:10.950 --> 00:41:12.710
<v Speaker 0>come back and magic things happen. So

00:41:14.005 --> 00:41:16.085
<v Speaker 0>let's try and work out what actually happened

00:41:16.085 --> 00:41:18.085
<v Speaker 0>here. So we That's my life philosophy.

00:41:19.685 --> 00:41:21.365
<v Speaker 0>Yeah. It's like that x k c d

00:41:21.365 --> 00:41:23.125
<v Speaker 0>comic was the it's compiling and the chair

00:41:23.125 --> 00:41:25.125
<v Speaker 0>sword fighting. Like, it's still relevant today as

00:41:25.125 --> 00:41:26.965
<v Speaker 0>ever was even though we don't compile as

00:41:26.965 --> 00:41:27.445
<v Speaker 0>much.

00:41:28.085 --> 00:41:29.660
<v Speaker 1>It's like that, but if you stop sword

00:41:29.660 --> 00:41:31.260
<v Speaker 1>fighting, it stops compiling.

00:41:32.780 --> 00:41:33.500
<v Speaker 0>Exactly.

00:41:34.140 --> 00:41:36.780
<v Speaker 0>Alright. So we got our Alpine

00:41:36.780 --> 00:41:39.180
<v Speaker 0>image ability stuff. We got our yarn, which

00:41:39.180 --> 00:41:41.820
<v Speaker 0>eventually did finish. We can see here that

00:41:41.820 --> 00:41:43.180
<v Speaker 0>it does a build

00:41:43.925 --> 00:41:44.885
<v Speaker 0>and

00:41:45.845 --> 00:41:48.165
<v Speaker 0>the build output finishes here.

00:41:49.365 --> 00:41:50.165
<v Speaker 0>App.build

00:41:50.165 --> 00:41:52.244
<v Speaker 0>says we're complete. That's our dependency then that

00:41:52.244 --> 00:41:54.645
<v Speaker 0>we noticed and say that the queue failed.

00:41:54.645 --> 00:41:56.725
<v Speaker 0>So this now is an artifact that's available.

00:41:57.470 --> 00:41:59.630
<v Speaker 0>We then perform the next step in the

00:41:59.630 --> 00:42:01.470
<v Speaker 0>DAG, which is the s three bucket, which

00:42:01.470 --> 00:42:02.349
<v Speaker 0>completes.

00:42:03.230 --> 00:42:04.109
<v Speaker 0>And then

00:42:04.829 --> 00:42:06.510
<v Speaker 0>is this just I don't know why it's

00:42:06.510 --> 00:42:08.430
<v Speaker 0>doing things there, but it's just just uploading

00:42:08.750 --> 00:42:11.069
<v Speaker 0>the output to Amazon s three. I think

00:42:11.069 --> 00:42:12.829
<v Speaker 0>that's maybe what happened there. Yep.

00:42:14.435 --> 00:42:15.395
<v Speaker 0>Alright.

00:42:15.555 --> 00:42:16.195
<v Speaker 0>Now

00:42:16.835 --> 00:42:18.835
<v Speaker 0>there was a command and we can already

00:42:18.835 --> 00:42:20.675
<v Speaker 0>kinda see the output from it here, but

00:42:20.675 --> 00:42:23.235
<v Speaker 0>there was a in the documentation, a Dagger

00:42:23.235 --> 00:42:25.075
<v Speaker 0>output list. Was that right?

00:42:25.395 --> 00:42:26.275
<v Speaker 1>Mhmm. Yep.

00:42:27.090 --> 00:42:28.930
<v Speaker 0>Or or that was input list, I assume

00:42:28.930 --> 00:42:30.530
<v Speaker 0>an output will work too. And that's just

00:42:30.530 --> 00:42:32.370
<v Speaker 0>what this is. Is this a can to,

00:42:32.370 --> 00:42:34.930
<v Speaker 0>like, what we expect from Pulumi output, Terraform

00:42:34.930 --> 00:42:36.850
<v Speaker 0>output? It's just a variable that we wanna

00:42:36.850 --> 00:42:39.490
<v Speaker 0>expose or present to whoever's consuming Dagger?

00:42:40.615 --> 00:42:42.055
<v Speaker 1>Yep. Pretty much.

00:42:43.655 --> 00:42:45.815
<v Speaker 1>The the the nice thing is right now

00:42:45.815 --> 00:42:48.535
<v Speaker 1>that the engine can do more than the

00:42:48.535 --> 00:42:51.335
<v Speaker 1>command line tool can in terms of presentation.

00:42:51.575 --> 00:42:53.175
<v Speaker 1>So for example and you could have an

00:42:53.175 --> 00:42:53.975
<v Speaker 1>output artifact,

00:42:54.940 --> 00:42:55.420
<v Speaker 1>and,

00:42:55.740 --> 00:42:58.620
<v Speaker 1>you could have it copied or mounted into

00:42:58.620 --> 00:43:00.300
<v Speaker 1>your local directory as a result. So you

00:43:00.300 --> 00:43:01.420
<v Speaker 1>could have, for example,

00:43:01.980 --> 00:43:03.900
<v Speaker 1>if if you want if you wanted and

00:43:03.900 --> 00:43:05.260
<v Speaker 1>if the CLI supported it,

00:43:06.505 --> 00:43:07.945
<v Speaker 1>you could you could have,

00:43:08.505 --> 00:43:10.185
<v Speaker 1>you know, the the the

00:43:10.425 --> 00:43:12.185
<v Speaker 1>result of the YARN build,

00:43:13.224 --> 00:43:15.465
<v Speaker 1>copied to somewhere in your local directory as

00:43:15.465 --> 00:43:16.585
<v Speaker 1>a intermediary

00:43:16.825 --> 00:43:18.665
<v Speaker 1>artifact, you know, to inspect or whatever.

00:43:21.670 --> 00:43:22.390
<v Speaker 0>Okay.

00:43:23.270 --> 00:43:24.550
<v Speaker 0>Let's browse to it. Let's see if it

00:43:24.550 --> 00:43:25.190
<v Speaker 0>worked.

00:43:25.910 --> 00:43:27.990
<v Speaker 0>We got busy and human.

00:43:30.230 --> 00:43:32.950
<v Speaker 2>If actually Solid name. The link below that.

00:43:35.325 --> 00:43:37.165
<v Speaker 2>If you go back on the output list.

00:43:37.165 --> 00:43:39.965
<v Speaker 0>Yeah. That was the bucket URL. Good catch.

00:43:39.965 --> 00:43:40.685
<v Speaker 0>Oh.

00:43:44.605 --> 00:43:46.365
<v Speaker 1>Yeah. We should probably we need to Oh,

00:43:46.365 --> 00:43:47.805
<v Speaker 0>and then I I I went from that

00:43:47.805 --> 00:43:48.925
<v Speaker 0>way anyway. There we go.

00:43:51.050 --> 00:43:53.050
<v Speaker 0>We have our React to do application.

00:43:53.290 --> 00:43:54.010
<v Speaker 0>Awesome.

00:43:55.130 --> 00:43:55.930
<v Speaker 0>Yay.

00:43:56.490 --> 00:43:58.410
<v Speaker 0>Okay. So these are the outputs.

00:43:58.970 --> 00:44:00.810
<v Speaker 0>I'm as those are I'm assuming those are

00:44:00.810 --> 00:44:02.570
<v Speaker 0>just defined in the queue file and maybe

00:44:02.570 --> 00:44:04.035
<v Speaker 0>we can take a look at exactly what

00:44:04.035 --> 00:44:06.115
<v Speaker 0>actually happened there. We have a whole bunch

00:44:06.115 --> 00:44:08.194
<v Speaker 0>of inputs now. I don't remember seeing any

00:44:08.194 --> 00:44:10.595
<v Speaker 0>inputs, but I'm assuming these are just all

00:44:10.595 --> 00:44:11.954
<v Speaker 0>of the things that I could provide in

00:44:11.954 --> 00:44:12.835
<v Speaker 0>my queue

00:44:13.555 --> 00:44:14.194
<v Speaker 0>plan

00:44:14.435 --> 00:44:16.115
<v Speaker 1>Yeah. The Dagger plan to be able to

00:44:16.115 --> 00:44:18.035
<v Speaker 0>override or change the way that this plan

00:44:18.035 --> 00:44:18.595
<v Speaker 0>works

00:44:19.690 --> 00:44:20.490
<v Speaker 0>roughly?

00:44:20.490 --> 00:44:21.610
<v Speaker 1>Yep. Yes.

00:44:22.010 --> 00:44:24.890
<v Speaker 1>Yeah. So packages can define inputs. So for

00:44:24.890 --> 00:44:27.370
<v Speaker 1>example, when you the s three bucket part,

00:44:27.930 --> 00:44:29.930
<v Speaker 1>all, you know, all the inputs within s

00:44:29.930 --> 00:44:31.690
<v Speaker 1>three bucket, that was actually defined in the

00:44:31.690 --> 00:44:32.410
<v Speaker 1>s three package,

00:44:33.615 --> 00:44:36.975
<v Speaker 1>like access key, secret key, etcetera.

00:44:38.095 --> 00:44:38.895
<v Speaker 0>Okay.

00:44:39.375 --> 00:44:41.455
<v Speaker 0>And the way secrets work in Dagger is

00:44:41.455 --> 00:44:43.455
<v Speaker 0>just they're just encrypted, and you have to

00:44:43.455 --> 00:44:45.695
<v Speaker 0>distribute the key to people and

00:44:47.700 --> 00:44:49.300
<v Speaker 0>Right. So that's that's what the each thing

00:44:49.300 --> 00:44:50.340
<v Speaker 0>was doing. Right.

00:44:51.540 --> 00:44:52.980
<v Speaker 1>There's Dagger input

00:44:53.540 --> 00:44:55.300
<v Speaker 1>Dagger input secret

00:44:55.300 --> 00:44:57.380
<v Speaker 1>to set a to inject a new secret

00:44:57.380 --> 00:45:00.180
<v Speaker 1>value, Dagger input dear to inject a local

00:45:00.180 --> 00:45:00.660
<v Speaker 1>directory,

00:45:01.434 --> 00:45:02.795
<v Speaker 1>etcetera, etcetera.

00:45:03.035 --> 00:45:04.954
<v Speaker 1>And Dagger input secret will take care of

00:45:04.954 --> 00:45:06.474
<v Speaker 1>the encryption part for you.

00:45:07.515 --> 00:45:09.434
<v Speaker 1>Awesome. And, yeah, then on on the other

00:45:09.434 --> 00:45:11.355
<v Speaker 1>end, you you need to distribute keys

00:45:14.190 --> 00:45:14.990
<v Speaker 1>via

00:45:15.550 --> 00:45:17.950
<v Speaker 1>a UI that is not yet implemented.

00:45:20.109 --> 00:45:20.830
<v Speaker 0>Sweet.

00:45:20.990 --> 00:45:24.350
<v Speaker 0>Alright. We got a question from Noel. I

00:45:25.630 --> 00:45:27.630
<v Speaker 0>don't understand, but maybe you will.

00:45:28.535 --> 00:45:30.855
<v Speaker 0>So input values support both the value or

00:45:30.855 --> 00:45:32.135
<v Speaker 0>the pointer.

00:45:32.455 --> 00:45:34.055
<v Speaker 0>I'm not sure if that's cool. So the

00:45:34.055 --> 00:45:36.775
<v Speaker 1>asterisk the the asterisk, that's a queue syntax

00:45:36.775 --> 00:45:38.375
<v Speaker 1>thing. It means default value.

00:45:39.255 --> 00:45:41.015
<v Speaker 0>Oh, that was a queue question. Got it.

00:45:41.210 --> 00:45:43.130
<v Speaker 1>Okay. Well, I don't know, actually. I I

00:45:43.369 --> 00:45:45.849
<v Speaker 1>I'm just inferring from the from the comment.

00:45:45.849 --> 00:45:46.650
<v Speaker 1>I I

00:45:47.369 --> 00:45:48.890
<v Speaker 1>there there's no pointers in queue. That's for

00:45:48.890 --> 00:45:50.810
<v Speaker 0>sure. Yeah. There we go. Okay. Yeah.

00:45:51.289 --> 00:45:52.970
<v Speaker 1>Oh, I see. Yeah. I don't know what

00:45:52.970 --> 00:45:55.529
<v Speaker 1>what is that? Yeah. That's that's mostly just,

00:45:55.769 --> 00:45:58.395
<v Speaker 1>an unpolished UI thing, but,

00:46:00.395 --> 00:46:02.795
<v Speaker 1>that's queue saying in very rough ways that

00:46:02.795 --> 00:46:03.915
<v Speaker 1>we should hide.

00:46:04.235 --> 00:46:05.995
<v Speaker 1>This comes from the engine saying,

00:46:06.555 --> 00:46:08.555
<v Speaker 1>by default, it would be an empty list,

00:46:08.715 --> 00:46:10.635
<v Speaker 1>and it actually is an empty list. So,

00:46:12.050 --> 00:46:13.490
<v Speaker 1>basically empty lists.

00:46:14.290 --> 00:46:16.210
<v Speaker 0>Yeah. I do like this constraint model that

00:46:16.210 --> 00:46:17.970
<v Speaker 0>Q presents. So like, yeah, think here's a

00:46:17.970 --> 00:46:19.490
<v Speaker 0>really nice example where we're seeing that this

00:46:19.490 --> 00:46:21.410
<v Speaker 0>defaults to both, but really we accept any

00:46:21.410 --> 00:46:24.290
<v Speaker 0>string value. Like, yeah, Q is is a

00:46:24.290 --> 00:46:25.964
<v Speaker 0>really cool tool. I I think it's really

00:46:25.964 --> 00:46:28.204
<v Speaker 0>awesome that Dagger uses that under the hood.

00:46:28.765 --> 00:46:30.765
<v Speaker 1>There's just the the potential is just huge.

00:46:30.765 --> 00:46:32.125
<v Speaker 1>And, honestly, we it's just

00:46:32.765 --> 00:46:35.244
<v Speaker 1>the frustration is, you know, there's a whole

00:46:35.244 --> 00:46:37.085
<v Speaker 1>year worth of work just to kind of

00:46:37.320 --> 00:46:39.480
<v Speaker 1>build up to the potential of of queue

00:46:39.480 --> 00:46:40.840
<v Speaker 1>in terms of presentation.

00:46:40.840 --> 00:46:43.080
<v Speaker 1>Like, for example, we have an earlier prototype,

00:46:43.080 --> 00:46:44.920
<v Speaker 1>which is not open source, but we're gonna

00:46:44.920 --> 00:46:46.840
<v Speaker 1>transpose it into Dagger,

00:46:47.480 --> 00:46:50.840
<v Speaker 1>which generates from your queue configuration a complete

00:46:50.840 --> 00:46:52.040
<v Speaker 1>interactive web interface.

00:46:52.575 --> 00:46:54.575
<v Speaker 1>So you get if you ever used Heroku,

00:46:54.575 --> 00:46:55.295
<v Speaker 1>for example,

00:46:55.855 --> 00:46:57.375
<v Speaker 1>there's this add on system.

00:46:57.855 --> 00:46:59.775
<v Speaker 1>You know, you could say, a database,

00:47:00.335 --> 00:47:02.575
<v Speaker 1>and then you have this nice web panel

00:47:02.575 --> 00:47:04.255
<v Speaker 1>to configure your database.

00:47:04.415 --> 00:47:06.800
<v Speaker 1>And each add on has its own custom

00:47:06.800 --> 00:47:09.760
<v Speaker 1>made panel to configure things specific to that.

00:47:09.760 --> 00:47:12.480
<v Speaker 1>Right? So let's say you wanna add,

00:47:13.280 --> 00:47:15.360
<v Speaker 1>for example, an s three bucket, then it

00:47:15.360 --> 00:47:17.840
<v Speaker 1>would ask for your s Amazon credentials and

00:47:17.840 --> 00:47:19.200
<v Speaker 1>the name of the bucket, whatever.

00:47:19.600 --> 00:47:19.920
<v Speaker 1>Here,

00:47:20.575 --> 00:47:22.815
<v Speaker 1>that's all specified in the queue configuration.

00:47:23.295 --> 00:47:25.295
<v Speaker 1>So we have this rough

00:47:25.775 --> 00:47:27.935
<v Speaker 1>command line interface to that, Dagger input list,

00:47:27.935 --> 00:47:29.775
<v Speaker 1>Dagger output list, and, you know, sometimes it

00:47:29.775 --> 00:47:31.935
<v Speaker 1>says weird things like asterisk,

00:47:32.015 --> 00:47:34.575
<v Speaker 1>you know, brackets, etcetera. We actually have this

00:47:34.575 --> 00:47:36.770
<v Speaker 1>prototype where we generate. We do the same

00:47:36.770 --> 00:47:39.570
<v Speaker 1>thing as those add on, web interfaces, but

00:47:39.570 --> 00:47:40.210
<v Speaker 1>generated.

00:47:41.090 --> 00:47:43.330
<v Speaker 1>So you would from this, you would get

00:47:43.490 --> 00:47:44.850
<v Speaker 1>a little web interface,

00:47:45.250 --> 00:47:47.650
<v Speaker 1>that shows you everything I just said in

00:47:47.650 --> 00:47:49.490
<v Speaker 1>in a in a nice web

00:47:50.405 --> 00:47:53.445
<v Speaker 1>form specific to exactly that. So it's it's

00:47:53.445 --> 00:47:54.805
<v Speaker 1>really magical. Personally,

00:47:55.285 --> 00:47:57.285
<v Speaker 1>I'm really impatient to bring it back

00:47:57.685 --> 00:47:59.925
<v Speaker 1>because you write 10 lines of queue, and

00:47:59.925 --> 00:48:01.765
<v Speaker 1>you just develop the web interface for your

00:48:01.765 --> 00:48:04.085
<v Speaker 1>deployment thing. It's it's really pretty cool.

00:48:06.800 --> 00:48:08.720
<v Speaker 0>Yeah. I'm really frustrated that you said all

00:48:08.720 --> 00:48:09.920
<v Speaker 0>that because I've tried to build some for

00:48:09.920 --> 00:48:12.240
<v Speaker 0>as a a command line application for some

00:48:12.240 --> 00:48:14.240
<v Speaker 0>of my own queue stuff and failed miserably.

00:48:14.240 --> 00:48:15.440
<v Speaker 0>So, you know, if you ever open source

00:48:15.440 --> 00:48:16.880
<v Speaker 0>that up, I'm gonna steal all of it

00:48:16.880 --> 00:48:17.600
<v Speaker 0>completely.

00:48:18.560 --> 00:48:18.800
<v Speaker 1>I

00:48:19.615 --> 00:48:21.535
<v Speaker 1>the plan is to make it available in

00:48:21.535 --> 00:48:23.695
<v Speaker 1>the open in in Dagger. So, yes, open

00:48:23.695 --> 00:48:26.335
<v Speaker 1>source. Yeah. That would be awesome. Yeah.

00:48:27.295 --> 00:48:29.135
<v Speaker 0>My use case isn't important. I'll share that

00:48:29.135 --> 00:48:30.495
<v Speaker 0>with you another day. But, yeah, really cool

00:48:30.495 --> 00:48:31.775
<v Speaker 0>that you build that kind of tooling. One

00:48:31.855 --> 00:48:33.695
<v Speaker 0>it's one of the things that QAPI does

00:48:33.695 --> 00:48:36.119
<v Speaker 0>try to make easier. I'll just blame my

00:48:36.119 --> 00:48:38.280
<v Speaker 0>own limited skill set for failing miserably.

00:48:38.839 --> 00:48:40.680
<v Speaker 0>But we've only looked at the

00:48:42.760 --> 00:48:44.680
<v Speaker 0>to do application there. So let's let's jump

00:48:44.680 --> 00:48:47.079
<v Speaker 0>through a couple more of these Okay. Learn

00:48:47.079 --> 00:48:50.245
<v Speaker 0>Dagger things. Anyone watching does have any questions,

00:48:50.245 --> 00:48:51.445
<v Speaker 0>please feel free to drop them in the

00:48:51.445 --> 00:48:53.285
<v Speaker 0>comments section and we will do our best

00:48:53.285 --> 00:48:54.965
<v Speaker 0>to answer them. I mean, I will I

00:48:54.965 --> 00:48:56.565
<v Speaker 0>will proxy the question for you, but we

00:48:56.565 --> 00:48:58.325
<v Speaker 0>will get some really awesome answers here.

00:48:58.965 --> 00:49:01.190
<v Speaker 0>Okay. So we did some basic usage to

00:49:01.190 --> 00:49:02.150
<v Speaker 0>do application.

00:49:02.150 --> 00:49:03.670
<v Speaker 0>We did a Yarn build. We able to

00:49:03.670 --> 00:49:04.950
<v Speaker 0>do the test three. We were able to

00:49:04.950 --> 00:49:06.310
<v Speaker 0>browse through it. Already

00:49:06.470 --> 00:49:09.590
<v Speaker 0>very, very cool system. So Dagger one zero

00:49:09.590 --> 00:49:11.430
<v Speaker 0>two is where we dive into what an

00:49:11.430 --> 00:49:12.790
<v Speaker 0>environment is.

00:49:14.230 --> 00:49:14.550
<v Speaker 0>So

00:49:17.075 --> 00:49:19.555
<v Speaker 0>can we think of this as just

00:49:19.875 --> 00:49:21.875
<v Speaker 0>Pulumi stacks, TerraForm,

00:49:21.875 --> 00:49:23.555
<v Speaker 0>whatever they call them. I can't remember these

00:49:23.555 --> 00:49:24.515
<v Speaker 0>days. Like,

00:49:25.075 --> 00:49:27.075
<v Speaker 0>an environment being staging production.

00:49:27.474 --> 00:49:29.875
<v Speaker 0>It's it's Yep. Yep. Okay. That's where it

00:49:29.875 --> 00:49:30.275
<v Speaker 1>is. Yep.

00:49:32.160 --> 00:49:32.960
<v Speaker 0>Alright.

00:49:33.119 --> 00:49:33.840
<v Speaker 0>So

00:49:34.560 --> 00:49:36.000
<v Speaker 0>I should probably be reading this with a

00:49:36.000 --> 00:49:37.440
<v Speaker 0>bit more vigilance, but I'm gonna keep going

00:49:37.440 --> 00:49:38.240
<v Speaker 0>and going and going.

00:49:44.775 --> 00:49:47.494
<v Speaker 0>So this wants me to build, like, a

00:49:47.494 --> 00:49:48.375
<v Speaker 0>new

00:49:48.535 --> 00:49:50.535
<v Speaker 0>directory in order to do application,

00:49:50.535 --> 00:49:52.455
<v Speaker 0>add a new source dot Dagger,

00:49:54.935 --> 00:49:56.454
<v Speaker 0>or is this building out the same thing

00:49:56.454 --> 00:49:58.214
<v Speaker 0>that we kind of just already ran but

00:49:58.214 --> 00:49:59.175
<v Speaker 0>in a different way?

00:50:00.440 --> 00:50:02.920
<v Speaker 1>It's so what we ran is one environment

00:50:02.920 --> 00:50:05.160
<v Speaker 1>called s three that was preloaded,

00:50:05.480 --> 00:50:07.240
<v Speaker 1>and we're gonna create a second environment called

00:50:07.240 --> 00:50:08.440
<v Speaker 1>multi bucket that

00:50:09.480 --> 00:50:11.640
<v Speaker 1>deploys to s three and Netlify.

00:50:13.079 --> 00:50:14.599
<v Speaker 1>So guess yep. Yep.

00:50:15.395 --> 00:50:16.275
<v Speaker 1>Okay.

00:50:16.435 --> 00:50:18.755
<v Speaker 1>So it's guiding you through writing those there's

00:50:18.755 --> 00:50:20.835
<v Speaker 1>like three little queue files to write.

00:50:21.155 --> 00:50:21.875
<v Speaker 0>Okay.

00:50:22.595 --> 00:50:23.955
<v Speaker 0>So the first thing I wanted me to

00:50:23.955 --> 00:50:26.035
<v Speaker 0>do was create multi

00:50:27.234 --> 00:50:27.714
<v Speaker 0>bucket.

00:50:28.190 --> 00:50:29.710
<v Speaker 0>Did I have the CD into that before

00:50:29.710 --> 00:50:31.070
<v Speaker 0>I run my QMod?

00:50:31.310 --> 00:50:33.790
<v Speaker 0>I don't think I yeah. No. The

00:50:34.750 --> 00:50:36.830
<v Speaker 1>you should run everything in

00:50:37.310 --> 00:50:38.910
<v Speaker 1>in the to do app directory.

00:50:41.345 --> 00:50:42.145
<v Speaker 0>Standby.

00:50:43.505 --> 00:50:44.625
<v Speaker 1>Oh, yeah.

00:50:46.785 --> 00:50:49.425
<v Speaker 0>Like I said, I installed the Mac OS

00:50:49.425 --> 00:50:50.225
<v Speaker 0>12

00:50:50.305 --> 00:50:52.305
<v Speaker 0>very early developer beta.

00:50:53.425 --> 00:50:55.345
<v Speaker 0>Very nice. So we we actually have this

00:50:55.430 --> 00:50:58.390
<v Speaker 1>we we had this conversation recently with the

00:50:58.390 --> 00:50:59.510
<v Speaker 1>Qdevs, but,

00:51:00.950 --> 00:51:02.870
<v Speaker 1>probably, it would be useful for us to

00:51:03.030 --> 00:51:05.990
<v Speaker 1>like, it's actually not strictly necessary to install

00:51:05.990 --> 00:51:07.830
<v Speaker 1>Q to use Dagger. It's just that at

00:51:07.830 --> 00:51:09.905
<v Speaker 1>some point, if you wanna get serious about

00:51:09.905 --> 00:51:11.185
<v Speaker 1>Dagger development,

00:51:11.585 --> 00:51:13.585
<v Speaker 1>you you probably wanna get serious about the

00:51:13.585 --> 00:51:16.465
<v Speaker 1>queue tool and all the all all it

00:51:16.465 --> 00:51:17.265
<v Speaker 1>can offer.

00:51:20.065 --> 00:51:21.680
<v Speaker 1>Like, if wanna speed things up for this

00:51:21.680 --> 00:51:23.839
<v Speaker 1>tutorial, you can you can start without installing

00:51:23.839 --> 00:51:25.119
<v Speaker 1>it and install it later,

00:51:26.079 --> 00:51:27.839
<v Speaker 1>but you're already on your way. So Yeah.

00:51:27.839 --> 00:51:29.280
<v Speaker 0>I'll just pull this then.

00:51:30.319 --> 00:51:32.400
<v Speaker 0>No. I don't save the pocket. I have

00:51:32.400 --> 00:51:34.615
<v Speaker 0>never wanted that ever. I

00:51:35.175 --> 00:51:37.495
<v Speaker 2>think you can do brew install of

00:51:38.455 --> 00:51:40.135
<v Speaker 2>q length slash

00:51:40.535 --> 00:51:42.775
<v Speaker 2>tab slash queue, and that should work.

00:51:48.730 --> 00:51:49.690
<v Speaker 0>No pressure.

00:51:50.809 --> 00:51:52.570
<v Speaker 0>That worked. Awesome. Alright.

00:51:56.890 --> 00:51:58.569
<v Speaker 0>So we What are the comments, by the

00:51:58.569 --> 00:51:58.730
<v Speaker 1>way?

00:52:00.615 --> 00:52:03.015
<v Speaker 0>You should have a speech bubble.

00:52:03.255 --> 00:52:04.775
<v Speaker 0>Well, maybe not an iPad. I'm not sure.

00:52:04.775 --> 00:52:06.695
<v Speaker 1>I'm scared I'm scared to click. Oh, I

00:52:06.695 --> 00:52:08.295
<v Speaker 1>see it. But I should I click it?

00:52:08.295 --> 00:52:09.815
<v Speaker 1>I don't know. Yeah. You can always reload

00:52:09.815 --> 00:52:11.575
<v Speaker 0>the page. What's the worst that can happen?

00:52:11.575 --> 00:52:12.615
<v Speaker 1>Oh, there it is.

00:52:17.940 --> 00:52:20.100
<v Speaker 0>Alright. Come on, queue. We wanna build a

00:52:20.100 --> 00:52:21.780
<v Speaker 0>multi bucket thing here. Alright.

00:52:22.500 --> 00:52:24.740
<v Speaker 0>So we're running QMod in it, which just

00:52:24.740 --> 00:52:26.740
<v Speaker 0>sets up some really simple directory structures for

00:52:26.740 --> 00:52:27.700
<v Speaker 0>the QModule system.

00:52:29.045 --> 00:52:31.365
<v Speaker 0>We're gonna pop back over here. We're gonna

00:52:31.365 --> 00:52:31.525
<v Speaker 0>go

00:52:33.845 --> 00:52:35.285
<v Speaker 0>beach balling. There we go.

00:52:38.085 --> 00:52:39.445
<v Speaker 0>We created that.

00:52:39.765 --> 00:52:42.005
<v Speaker 0>So now we're creating our first queue file.

00:52:42.005 --> 00:52:43.525
<v Speaker 0>So this is just source dot queue.

00:52:44.790 --> 00:52:46.150
<v Speaker 0>And I'll just do this. Did you see

00:52:46.150 --> 00:52:48.150
<v Speaker 1>the comment about the last the last line

00:52:48.150 --> 00:52:50.550
<v Speaker 1>of your terminal being hidden? It's probably thirty

00:52:50.550 --> 00:52:52.630
<v Speaker 1>minutes ago, but I did. I dragged it

00:52:52.630 --> 00:52:54.070
<v Speaker 0>up. We're we're all good.

00:52:56.795 --> 00:52:59.115
<v Speaker 0>Yeah. I do that every week because I

00:52:59.115 --> 00:53:01.115
<v Speaker 0>have a a window manager. Like, I I

00:53:01.115 --> 00:53:02.715
<v Speaker 0>come from Linux and I three is my

00:53:02.715 --> 00:53:05.035
<v Speaker 0>main working machine, but for streaming, I really

00:53:05.035 --> 00:53:06.395
<v Speaker 0>do need to use a Mac and I

00:53:06.395 --> 00:53:07.995
<v Speaker 0>I'd like things just to be full screen

00:53:07.995 --> 00:53:09.720
<v Speaker 0>all the time. And I have a window

00:53:09.720 --> 00:53:11.320
<v Speaker 0>manager that puts a full screen but adds

00:53:11.320 --> 00:53:12.840
<v Speaker 0>a border but the border is not big

00:53:12.840 --> 00:53:14.920
<v Speaker 0>enough. It's a whole thing. Oh, that's what

00:53:14.920 --> 00:53:16.200
<v Speaker 1>you were saying earlier.

00:53:16.200 --> 00:53:16.760
<v Speaker 0>Yeah.

00:53:17.880 --> 00:53:20.040
<v Speaker 0>Okay. So we got our new multi bucket

00:53:20.040 --> 00:53:22.040
<v Speaker 0>package, we're importing the Dagger engine.

00:53:22.935 --> 00:53:25.095
<v Speaker 0>We've got something called source, which we're seeing

00:53:25.095 --> 00:53:27.815
<v Speaker 0>as an artifact in Dagger and a Dagger

00:53:27.815 --> 00:53:28.775
<v Speaker 0>input.

00:53:31.335 --> 00:53:33.175
<v Speaker 0>Is an artifact something you wanna take a

00:53:33.175 --> 00:53:34.855
<v Speaker 0>minute to explain to people what that is,

00:53:34.855 --> 00:53:36.375
<v Speaker 0>or should we just accept that as it

00:53:36.375 --> 00:53:37.815
<v Speaker 0>is? Alright. Okay. Go for

00:53:38.369 --> 00:53:40.769
<v Speaker 1>it's it can't can't hurt to explain it.

00:53:40.769 --> 00:53:42.210
<v Speaker 1>I mean, that's one area we need to

00:53:42.210 --> 00:53:44.690
<v Speaker 1>explain better in the docs. Yeah. Basically,

00:53:46.210 --> 00:53:47.650
<v Speaker 1>one reason regular

00:53:47.730 --> 00:53:51.170
<v Speaker 1>CICD systems can't just haven't solved this problem

00:53:51.170 --> 00:53:51.730
<v Speaker 1>is

00:53:53.565 --> 00:53:55.485
<v Speaker 1>many of them don't have composition. But when

00:53:55.485 --> 00:53:58.285
<v Speaker 1>they do, you compose YAML values or JSON

00:53:58.285 --> 00:53:58.925
<v Speaker 1>values.

00:53:59.085 --> 00:54:01.245
<v Speaker 1>And so you can only compose things that

00:54:01.245 --> 00:54:02.365
<v Speaker 1>fit in JSON.

00:54:04.045 --> 00:54:06.525
<v Speaker 1>That includes the URL of

00:54:07.310 --> 00:54:09.950
<v Speaker 1>a source directory to download maybe,

00:54:10.350 --> 00:54:12.190
<v Speaker 1>but it doesn't include the actual

00:54:12.590 --> 00:54:13.470
<v Speaker 1>directory.

00:54:13.950 --> 00:54:15.150
<v Speaker 1>And so that means

00:54:15.470 --> 00:54:18.510
<v Speaker 1>any composition of anything that involves artifacts

00:54:20.495 --> 00:54:22.975
<v Speaker 1>needs to have first class support of artifacts

00:54:22.975 --> 00:54:24.655
<v Speaker 1>right there in the code being

00:54:25.055 --> 00:54:26.895
<v Speaker 1>composed. So you it's not enough to say,

00:54:26.895 --> 00:54:29.455
<v Speaker 1>oh, that input is a URL

00:54:29.695 --> 00:54:31.135
<v Speaker 1>of a thing to download.

00:54:31.615 --> 00:54:33.135
<v Speaker 1>Because if you say that, then you're you're

00:54:33.135 --> 00:54:35.375
<v Speaker 1>hard coding the concept that, you know, you

00:54:35.375 --> 00:54:37.410
<v Speaker 1>can only you need a third party now

00:54:37.410 --> 00:54:39.730
<v Speaker 1>to which the thing will be uploaded and

00:54:39.730 --> 00:54:41.650
<v Speaker 1>then downloaded. So you're not really covering the

00:54:41.650 --> 00:54:42.450
<v Speaker 1>full picture.

00:54:43.170 --> 00:54:45.810
<v Speaker 1>So here, what we're we're doing is we're

00:54:45.890 --> 00:54:48.130
<v Speaker 1>the the engine actually supports any value in

00:54:48.130 --> 00:54:51.515
<v Speaker 1>your tree actually being an artifact. We're representing

00:54:51.515 --> 00:54:52.395
<v Speaker 1>an artifact.

00:54:52.555 --> 00:54:54.635
<v Speaker 1>But so the but the way we do

00:54:54.635 --> 00:54:57.355
<v Speaker 1>that is it's not actually the data of

00:54:57.355 --> 00:54:58.155
<v Speaker 1>the artifact.

00:54:59.035 --> 00:55:00.555
<v Speaker 1>It's the specification

00:55:00.555 --> 00:55:02.474
<v Speaker 1>of how to produce the artifact on the

00:55:02.474 --> 00:55:02.795
<v Speaker 1>fly.

00:55:03.540 --> 00:55:06.260
<v Speaker 1>And so, for example, if the actual artifact

00:55:06.260 --> 00:55:07.060
<v Speaker 1>is,

00:55:07.220 --> 00:55:10.420
<v Speaker 1>in this case, we're basically only specifying here.

00:55:10.820 --> 00:55:11.620
<v Speaker 1>SRC

00:55:11.620 --> 00:55:14.180
<v Speaker 1>will be something that can produce an artifact

00:55:14.180 --> 00:55:16.805
<v Speaker 1>on the fly, and we're simplifying that to

00:55:16.805 --> 00:55:18.964
<v Speaker 1>an artifact. So it's really a just in

00:55:18.964 --> 00:55:20.885
<v Speaker 1>time artifact. And so what you do then

00:55:20.885 --> 00:55:21.445
<v Speaker 1>is,

00:55:22.405 --> 00:55:25.444
<v Speaker 1>as a user, you're gonna specify what that

00:55:25.444 --> 00:55:26.724
<v Speaker 1>is. And so you could say,

00:55:28.170 --> 00:55:30.250
<v Speaker 1>oh, I want SRC to be the contents

00:55:30.250 --> 00:55:32.329
<v Speaker 1>of my local directory over here. Or you

00:55:32.329 --> 00:55:34.650
<v Speaker 1>can say, actually, I want SRC to be

00:55:34.970 --> 00:55:37.610
<v Speaker 1>that remote that branch of that remote,

00:55:38.089 --> 00:55:39.210
<v Speaker 1>Git repository.

00:55:39.210 --> 00:55:40.490
<v Speaker 1>Or you could say, I want it to

00:55:40.490 --> 00:55:42.810
<v Speaker 1>be that tag at that remote

00:55:42.995 --> 00:55:43.955
<v Speaker 1>registry.

00:55:44.035 --> 00:55:45.795
<v Speaker 1>And so then we fill it in, and

00:55:45.795 --> 00:55:48.675
<v Speaker 1>we generate that, dynamically using BuildKit. So the

00:55:48.675 --> 00:55:50.755
<v Speaker 1>the as long as BuildKit support, it can

00:55:50.755 --> 00:55:52.595
<v Speaker 1>be expressed as a BuildKit pipeline.

00:55:54.035 --> 00:55:55.795
<v Speaker 1>You can make an an artifact. And because

00:55:55.795 --> 00:55:56.675
<v Speaker 1>BuildKit can

00:55:57.210 --> 00:55:58.410
<v Speaker 1>do a lot of things,

00:55:59.050 --> 00:56:01.690
<v Speaker 1>you can cover almost any possible use case

00:56:01.690 --> 00:56:04.330
<v Speaker 1>by composing these these artifacts. So it's it's

00:56:04.970 --> 00:56:06.410
<v Speaker 1>honestly, I have to find a better way

00:56:06.410 --> 00:56:08.810
<v Speaker 1>to explain it. It's just insanely powerful. Yeah.

00:56:08.810 --> 00:56:10.250
<v Speaker 1>It's what makes Dagger

00:56:10.570 --> 00:56:11.369
<v Speaker 1>just very different.

00:56:12.295 --> 00:56:14.535
<v Speaker 0>Yeah. It sounds just so

00:56:14.695 --> 00:56:15.655
<v Speaker 0>flexible.

00:56:15.655 --> 00:56:17.895
<v Speaker 0>Like, you can almost just do whatever you

00:56:17.895 --> 00:56:19.095
<v Speaker 0>need and the tools kind of stay in

00:56:19.095 --> 00:56:21.015
<v Speaker 0>that way, but providing the constructs to do

00:56:21.015 --> 00:56:23.095
<v Speaker 0>that. And I think that's really, really awesome.

00:56:23.735 --> 00:56:26.455
<v Speaker 0>Okay. It's composable. And composable. Yeah.

00:56:26.935 --> 00:56:28.990
<v Speaker 0>I mean I mean, yeah. I'm curious what

00:56:28.990 --> 00:56:30.670
<v Speaker 0>came first. Right? Was it you you obviously

00:56:30.670 --> 00:56:32.590
<v Speaker 0>had an idea to build the product and

00:56:32.590 --> 00:56:34.350
<v Speaker 0>then you made the decision to adopt Q.

00:56:34.350 --> 00:56:36.190
<v Speaker 0>Now did all of these amazing features come

00:56:36.190 --> 00:56:37.390
<v Speaker 0>out with the fact that you chose Q

00:56:37.390 --> 00:56:38.750
<v Speaker 0>or was the reason that you chose Q

00:56:38.750 --> 00:56:41.870
<v Speaker 0>because you'd already decided that composability and flexibility

00:56:41.870 --> 00:56:43.070
<v Speaker 0>were something that you needed, like

00:56:44.125 --> 00:56:45.885
<v Speaker 1>I think Andrea can answer that one better

00:56:45.885 --> 00:56:46.765
<v Speaker 1>than anyone.

00:56:50.045 --> 00:56:51.645
<v Speaker 1>Like, I mean How

00:56:52.205 --> 00:56:53.005
<v Speaker 1>Well,

00:56:53.645 --> 00:56:55.805
<v Speaker 1>I'll the the short version is Andrea basically

00:56:55.805 --> 00:56:57.165
<v Speaker 1>built

00:56:56.610 --> 00:56:58.770
<v Speaker 1>built a version pre q almost by his

00:56:58.930 --> 00:56:59.650
<v Speaker 1>by himself,

00:57:00.610 --> 00:57:01.490
<v Speaker 1>and it's

00:57:02.130 --> 00:57:03.090
<v Speaker 1>a lot of work.

00:57:03.890 --> 00:57:05.490
<v Speaker 1>I mean, is that a good summary? Yeah.

00:57:05.490 --> 00:57:05.970
<v Speaker 2>We

00:57:06.770 --> 00:57:09.905
<v Speaker 2>ended like, we were reinventing q. We we

00:57:09.905 --> 00:57:11.665
<v Speaker 2>had, like, our own made stuff, and then

00:57:11.665 --> 00:57:13.984
<v Speaker 2>suddenly we did And built in. And we

00:57:13.984 --> 00:57:15.585
<v Speaker 2>ended up yeah.

00:57:15.984 --> 00:57:18.065
<v Speaker 2>And so we're just reinventing our thing. And

00:57:18.065 --> 00:57:19.905
<v Speaker 2>and after a while, we saw we saw

00:57:19.905 --> 00:57:21.505
<v Speaker 2>queue, and we're like, okay. Like, this is

00:57:21.505 --> 00:57:24.065
<v Speaker 2>doing exactly well, not exactly. It's doing way

00:57:24.065 --> 00:57:26.920
<v Speaker 2>more than what we're, like, hacking together. So

00:57:26.920 --> 00:57:28.680
<v Speaker 2>that's when we decide to just switch over

00:57:28.680 --> 00:57:30.200
<v Speaker 2>to to using queue.

00:57:31.640 --> 00:57:34.040
<v Speaker 0>Awesome. Alright. I'm gonna copy and paste the

00:57:34.040 --> 00:57:35.640
<v Speaker 0>last couple of bits of queue here, and

00:57:35.640 --> 00:57:37.320
<v Speaker 0>then we're gonna go through exactly what is

00:57:37.320 --> 00:57:38.760
<v Speaker 0>happening. But we do have a few comments

00:57:38.760 --> 00:57:39.960
<v Speaker 0>that have come in in the last couple

00:57:39.960 --> 00:57:42.485
<v Speaker 0>of minutes. So we've got one from Amit

00:57:42.485 --> 00:57:44.325
<v Speaker 0>who's saying, thanks for the stream. Exactly what

00:57:44.325 --> 00:57:46.965
<v Speaker 0>was needed today. Awesome. Glad we could help.

00:57:47.605 --> 00:57:49.685
<v Speaker 0>Crazy Max is saying, hey. Hi, Amit.

00:57:50.885 --> 00:57:52.805
<v Speaker 0>And then now we have a question from

00:57:52.805 --> 00:57:55.400
<v Speaker 0>Moody. So would you say the Dagger is

00:57:55.400 --> 00:57:57.400
<v Speaker 0>like GitHub actions, but not tied to GitHub

00:57:57.400 --> 00:57:59.320
<v Speaker 0>or any specific provider? I

00:58:00.760 --> 00:58:03.480
<v Speaker 1>think it's it's it's a useful comparison. I

00:58:03.480 --> 00:58:04.600
<v Speaker 1>I guess it depends

00:58:05.960 --> 00:58:08.600
<v Speaker 1>what you see as the primary role of

00:58:08.600 --> 00:58:11.245
<v Speaker 1>GitHub actions. It's it's it's hard to compare

00:58:11.245 --> 00:58:13.885
<v Speaker 1>directly tools in this space because it's just

00:58:13.885 --> 00:58:16.685
<v Speaker 1>kind of a mess of partially overlapping things.

00:58:18.925 --> 00:58:21.325
<v Speaker 1>If you think of GitHub actions as

00:58:22.220 --> 00:58:24.140
<v Speaker 1>the place where you're gonna define the glue

00:58:24.140 --> 00:58:26.460
<v Speaker 1>between everything in your delivery, then yes.

00:58:28.140 --> 00:58:30.140
<v Speaker 1>If you think of GitHub actions as a

00:58:30.140 --> 00:58:32.780
<v Speaker 1>really good CI that takes your GitHub

00:58:33.260 --> 00:58:35.904
<v Speaker 1>world and makes it just really easy to

00:58:35.904 --> 00:58:36.545
<v Speaker 1>automate,

00:58:36.944 --> 00:58:37.585
<v Speaker 1>then,

00:58:37.984 --> 00:58:39.585
<v Speaker 1>then they're very complementary.

00:58:40.545 --> 00:58:41.265
<v Speaker 1>So,

00:58:41.664 --> 00:58:43.265
<v Speaker 1>yeah, I think if you took GitHub actions

00:58:43.265 --> 00:58:45.505
<v Speaker 1>and became very, very maximalist

00:58:45.505 --> 00:58:48.320
<v Speaker 1>and say, I wanna actually automate everything to

00:58:48.320 --> 00:58:50.560
<v Speaker 1>end, glue everything together with GitHub actions. Eventually,

00:58:50.560 --> 00:58:52.640
<v Speaker 1>you would run into the problem that, a,

00:58:52.640 --> 00:58:55.040
<v Speaker 1>it's not programmable, and, b, it's just tied

00:58:55.040 --> 00:58:56.880
<v Speaker 1>to GitHub. And even if there's a standalone

00:58:56.880 --> 00:58:59.680
<v Speaker 1>runner, it's always gonna be tied to GitHub.

00:58:59.680 --> 00:59:00.560
<v Speaker 1>And so

00:59:00.880 --> 00:59:02.560
<v Speaker 1>how do you integrate that into

00:59:02.880 --> 00:59:03.440
<v Speaker 1>GitLab,

00:59:03.954 --> 00:59:04.915
<v Speaker 1>Atlassian,

00:59:05.075 --> 00:59:07.795
<v Speaker 1>you know, non GitHub everywhere world?

00:59:07.795 --> 00:59:09.315
<v Speaker 1>It becomes kind of there's a lot of

00:59:09.315 --> 00:59:09.955
<v Speaker 1>friction.

00:59:10.115 --> 00:59:11.235
<v Speaker 1>So yeah.

00:59:12.915 --> 00:59:14.835
<v Speaker 1>You can use like, I would say, a

00:59:14.835 --> 00:59:15.475
<v Speaker 1>good

00:59:16.350 --> 00:59:18.590
<v Speaker 1>a huge portion of

00:59:20.350 --> 00:59:21.150
<v Speaker 1>Dagger

00:59:21.310 --> 00:59:24.110
<v Speaker 1>runs today are run inside the GitHub action,

00:59:24.110 --> 00:59:26.030
<v Speaker 1>so they they work very well together.

00:59:26.830 --> 00:59:27.230
<v Speaker 0>Nice.

00:59:28.215 --> 00:59:31.175
<v Speaker 0>Okay. I believe I've copied the appropriate steps

00:59:31.175 --> 00:59:33.015
<v Speaker 0>for our multi bucket demo here. So we

00:59:33.015 --> 00:59:35.095
<v Speaker 0>got our source dot queue, which is just

00:59:35.095 --> 00:59:37.975
<v Speaker 0>defining that we have some property called source,

00:59:37.975 --> 00:59:39.015
<v Speaker 0>which is an artifact.

00:59:39.495 --> 00:59:41.575
<v Speaker 0>We then have a yarn dot queue, which

00:59:41.575 --> 00:59:44.300
<v Speaker 0>is a has something defined as an app,

00:59:44.300 --> 00:59:45.660
<v Speaker 0>which is a yarn package

00:59:45.820 --> 00:59:47.100
<v Speaker 0>with the dependency

00:59:47.100 --> 00:59:48.860
<v Speaker 0>on our first source.

00:59:49.340 --> 00:59:51.980
<v Speaker 0>And then we have our Netlify deployment,

00:59:51.980 --> 00:59:54.300
<v Speaker 0>which defines something called a site, which has

00:59:54.300 --> 00:59:55.420
<v Speaker 0>a Netlify site

00:59:55.775 --> 00:59:58.495
<v Speaker 0>and the contents of that are one of

00:59:58.495 --> 01:00:00.975
<v Speaker 0>the output fields from our application,

01:00:01.135 --> 01:00:02.415
<v Speaker 0>which is the build.

01:00:03.295 --> 01:00:05.455
<v Speaker 0>So we can kinda see command called Dagger

01:00:05.455 --> 01:00:06.175
<v Speaker 1>doc,

01:00:06.495 --> 01:00:07.935
<v Speaker 1>which maybe you might wanna use at some

01:00:07.935 --> 01:00:09.215
<v Speaker 1>point if you're curious.

01:00:09.710 --> 01:00:11.790
<v Speaker 0>I'm always curious. Alright.

01:00:12.589 --> 01:00:13.630
<v Speaker 0>Dagger,

01:00:13.950 --> 01:00:14.750
<v Speaker 0>doc,

01:00:17.630 --> 01:00:19.630
<v Speaker 0>multi bucket. I'm just gonna make us up

01:00:19.630 --> 01:00:20.190
<v Speaker 0>there.

01:00:20.589 --> 01:00:21.230
<v Speaker 0>No.

01:00:21.710 --> 01:00:23.869
<v Speaker 1>Oh, well, I guess that could that actually

01:00:23.869 --> 01:00:26.325
<v Speaker 1>could work, but currently, it doesn't. Yeah. Currently,

01:00:26.325 --> 01:00:27.445
<v Speaker 1>it's wired to,

01:00:28.165 --> 01:00:30.405
<v Speaker 1>the the exact thing you import. It's gotta

01:00:30.405 --> 01:00:33.925
<v Speaker 1>be what you import. Ah, right. Okay. .Dagger.io.

01:00:33.925 --> 01:00:34.565
<v Speaker 1>Yeah.

01:00:36.005 --> 01:00:36.805
<v Speaker 0>Got it. Okay.

01:00:40.260 --> 01:00:41.380
<v Speaker 1>There's also a

01:00:41.620 --> 01:00:44.180
<v Speaker 1>web Nice. In that in the docs.

01:00:44.900 --> 01:00:46.580
<v Speaker 0>So it shows me the inputs that I

01:00:46.580 --> 01:00:48.180
<v Speaker 0>can use and

01:00:48.900 --> 01:00:51.460
<v Speaker 0>the different definitions. So Netlify has something called

01:00:51.460 --> 01:00:53.635
<v Speaker 0>an account, which makes sense. We then got

01:00:53.635 --> 01:00:55.474
<v Speaker 0>multiple sites we could deploy to that account

01:00:55.474 --> 01:00:55.955
<v Speaker 0>and

01:00:56.755 --> 01:00:58.434
<v Speaker 0>we have the ability to pass in our

01:00:58.434 --> 01:01:00.595
<v Speaker 0>account token via secrets and stuff like that.

01:01:00.994 --> 01:01:02.994
<v Speaker 0>Yeah. That is a pretty handy command. Nice.

01:01:02.994 --> 01:01:03.474
<v Speaker 0>I like that.

01:01:04.950 --> 01:01:07.910
<v Speaker 0>Okay. So the documentation also requested that I

01:01:08.070 --> 01:01:09.829
<v Speaker 0>now that I've copied something I don't wanna

01:01:09.829 --> 01:01:13.430
<v Speaker 0>copy, but we wanna create the new environment.

01:01:18.630 --> 01:01:19.430
<v Speaker 0>And

01:01:21.485 --> 01:01:22.605
<v Speaker 0>Okay. So

01:01:23.005 --> 01:01:25.325
<v Speaker 0>what does that actually mean to Dagger when

01:01:25.325 --> 01:01:27.005
<v Speaker 0>I create an environment? Is that just a

01:01:27.005 --> 01:01:28.605
<v Speaker 0>directory in my dot Dagger?

01:01:29.325 --> 01:01:30.045
<v Speaker 1>Yeah.

01:01:30.205 --> 01:01:30.925
<v Speaker 1>Yes.

01:01:31.165 --> 01:01:33.005
<v Speaker 1>Yeah. It's basically a bug. It's it's like

01:01:33.005 --> 01:01:34.765
<v Speaker 1>a it's a it's a box to put

01:01:34.765 --> 01:01:36.830
<v Speaker 1>code in content a code in data, code

01:01:36.830 --> 01:01:37.710
<v Speaker 1>in state.

01:01:39.630 --> 01:01:41.150
<v Speaker 0>Okay. So now to

01:01:41.550 --> 01:01:44.430
<v Speaker 0>add my code to this environment,

01:01:44.430 --> 01:01:46.670
<v Speaker 0>I just copy everything

01:01:47.070 --> 01:01:47.470
<v Speaker 0>here.

01:01:50.385 --> 01:01:52.785
<v Speaker 0>And is that the, you know, the standard

01:01:52.785 --> 01:01:54.705
<v Speaker 0>way that people should think about this? Like

01:01:54.865 --> 01:01:56.705
<v Speaker 0>or would they just run the Dagger new

01:01:56.705 --> 01:01:59.425
<v Speaker 0>environment first and then actually just craft the

01:01:59.425 --> 01:02:01.345
<v Speaker 0>queue inside of there? Do you recommend keeping

01:02:01.345 --> 01:02:02.145
<v Speaker 0>it outside or

01:02:03.300 --> 01:02:05.620
<v Speaker 1>That's that's work in progress right now. We're

01:02:05.620 --> 01:02:07.540
<v Speaker 1>actually we're gonna get rid of the copy

01:02:07.540 --> 01:02:10.020
<v Speaker 1>right now. So we're trying the the the

01:02:10.020 --> 01:02:12.980
<v Speaker 1>principle is we want developing for Dagger to

01:02:12.980 --> 01:02:13.460
<v Speaker 1>be

01:02:13.860 --> 01:02:14.100
<v Speaker 1>as

01:02:15.234 --> 01:02:16.035
<v Speaker 1>identical

01:02:16.035 --> 01:02:16.755
<v Speaker 1>to

01:02:17.234 --> 01:02:19.474
<v Speaker 1>regular queue development. So if you already know

01:02:19.474 --> 01:02:21.795
<v Speaker 1>queue and you have a workflow setup,

01:02:22.035 --> 01:02:24.035
<v Speaker 1>it should be instantly recognizable

01:02:24.035 --> 01:02:26.755
<v Speaker 1>and compatible with Dagger. Right now, the the

01:02:26.755 --> 01:02:29.690
<v Speaker 1>problem is we have we we have you

01:02:29.690 --> 01:02:32.170
<v Speaker 1>put your queue files in this dot Dagger

01:02:32.170 --> 01:02:34.970
<v Speaker 1>slash n slash something slash plan,

01:02:35.369 --> 01:02:37.050
<v Speaker 1>and it actually works fine

01:02:37.450 --> 01:02:38.650
<v Speaker 1>at runtime.

01:02:38.650 --> 01:02:40.890
<v Speaker 1>But the problem is once

01:02:40.625 --> 01:02:42.704
<v Speaker 1>q modules will come out and you have

01:02:42.704 --> 01:02:43.905
<v Speaker 1>this it's like go.

01:02:45.025 --> 01:02:47.905
<v Speaker 1>That code, you might wanna make an importable

01:02:48.065 --> 01:02:49.505
<v Speaker 1>package by someone else.

01:02:50.145 --> 01:02:50.865
<v Speaker 1>And then

01:02:51.505 --> 01:02:53.265
<v Speaker 1>what what name do you give to the

01:02:53.265 --> 01:02:54.464
<v Speaker 1>module? You know? So,

01:02:56.150 --> 01:02:56.870
<v Speaker 1>basically,

01:02:57.110 --> 01:02:59.430
<v Speaker 1>the natural way for to develop something in

01:02:59.430 --> 01:03:01.590
<v Speaker 1>queue is to have it somewhere normal looking

01:03:01.590 --> 01:03:03.750
<v Speaker 1>in the in the GitHub repository in the

01:03:03.750 --> 01:03:04.710
<v Speaker 1>Git repository.

01:03:05.030 --> 01:03:05.830
<v Speaker 1>And so,

01:03:06.470 --> 01:03:08.310
<v Speaker 1>we're gonna get rid of that copy step.

01:03:08.310 --> 01:03:10.470
<v Speaker 1>So the the way you develop those queue

01:03:10.470 --> 01:03:12.845
<v Speaker 1>files instead of having you copy them into

01:03:12.845 --> 01:03:14.045
<v Speaker 1>the the environment,

01:03:14.365 --> 01:03:16.765
<v Speaker 1>now you can actually configure the environment to

01:03:16.765 --> 01:03:19.244
<v Speaker 1>load them from where you develop them. That's

01:03:19.244 --> 01:03:21.805
<v Speaker 1>actually it already works as of this

01:03:22.205 --> 01:03:24.685
<v Speaker 1>week. We just haven't changed the tutorial yet.

01:03:25.325 --> 01:03:25.724
<v Speaker 1>So

01:03:26.170 --> 01:03:27.050
<v Speaker 1>it's

01:03:27.050 --> 01:03:27.930
<v Speaker 1>both work.

01:03:28.330 --> 01:03:30.730
<v Speaker 1>Yeah. It's early days. We're figuring out the

01:03:30.730 --> 01:03:32.970
<v Speaker 1>the the perfect developer experience one step at

01:03:32.970 --> 01:03:35.290
<v Speaker 1>a time. You know? Well, yeah. And you're

01:03:35.290 --> 01:03:37.770
<v Speaker 0>adding 50 developers a day and getting feedback.

01:03:37.770 --> 01:03:38.490
<v Speaker 0>It's you know?

01:03:39.185 --> 01:03:40.865
<v Speaker 1>Right. These things take time.

01:03:41.585 --> 01:03:42.145
<v Speaker 0>So

01:03:42.465 --> 01:03:44.705
<v Speaker 0>we we don't have any more documentation here,

01:03:44.705 --> 01:03:46.305
<v Speaker 0>so we're gonna go slightly off script. But

01:03:46.305 --> 01:03:47.265
<v Speaker 0>I'm assuming,

01:03:48.225 --> 01:03:49.744
<v Speaker 0>you know, I'm trying to think about this

01:03:49.744 --> 01:03:51.185
<v Speaker 0>now. Okay? I'm I'm using us too. I

01:03:51.185 --> 01:03:52.760
<v Speaker 0>wanna start to plan The Dagger up for

01:03:52.760 --> 01:03:54.839
<v Speaker 0>me, I wouldn't expect to work right now.

01:03:54.839 --> 01:03:57.080
<v Speaker 0>Now it seems like the s three package

01:03:57.080 --> 01:03:57.880
<v Speaker 0>provider

01:03:58.040 --> 01:04:00.119
<v Speaker 0>does ship with those credentials. We do have

01:04:00.119 --> 01:04:01.960
<v Speaker 0>the key imported, but I would expect the

01:04:01.960 --> 01:04:04.440
<v Speaker 0>Netlify one to potentially fail. Is that correct?

01:04:05.560 --> 01:04:08.535
<v Speaker 1>Yeah. Actually, the s three package itself does

01:04:08.535 --> 01:04:09.815
<v Speaker 1>not ship with credentials.

01:04:09.975 --> 01:04:12.935
<v Speaker 1>It's that environment in the example repository that

01:04:12.935 --> 01:04:13.975
<v Speaker 1>we preconfigured.

01:04:13.975 --> 01:04:15.735
<v Speaker 1>Yeah. So, yeah, it will fail for the

01:04:15.735 --> 01:04:17.735
<v Speaker 1>reason you mentioned. Okay. But if you imported

01:04:17.735 --> 01:04:19.415
<v Speaker 1>s three, it would also fail.

01:04:20.609 --> 01:04:21.250
<v Speaker 0>Okay.

01:04:22.770 --> 01:04:25.170
<v Speaker 0>So when we have multiple environments, we have

01:04:25.170 --> 01:04:27.570
<v Speaker 0>to specify the environment that we wanna run.

01:04:28.289 --> 01:04:28.690
<v Speaker 1>Yeah.

01:04:32.445 --> 01:04:33.965
<v Speaker 0>And that's gonna send a plan off to

01:04:33.965 --> 01:04:35.485
<v Speaker 0>build kit. It's gonna try and do a

01:04:35.485 --> 01:04:37.405
<v Speaker 0>few things, and I'm assuming that's gonna

01:04:37.885 --> 01:04:40.125
<v Speaker 0>fail right after probably the yarn build, I

01:04:40.125 --> 01:04:41.005
<v Speaker 0>would expect.

01:04:43.085 --> 01:04:45.005
<v Speaker 1>Ideally, it would fail right away, but it's

01:04:45.005 --> 01:04:45.245
<v Speaker 1>like oh,

01:04:46.045 --> 01:04:47.165
<v Speaker 1>yeah. Perfect. Okay.

01:04:50.250 --> 01:04:52.490
<v Speaker 0>Okay. So Yeah. So exactly what you said.

01:04:52.810 --> 01:04:54.650
<v Speaker 0>Okay. So it actually wants me to provide

01:04:54.650 --> 01:04:56.890
<v Speaker 0>what source as as well. So how do

01:04:56.890 --> 01:04:58.890
<v Speaker 0>we provide inputs for Dagger? Is that through

01:04:58.890 --> 01:05:00.810
<v Speaker 0>the the CLI and not queue?

01:05:02.175 --> 01:05:04.095
<v Speaker 1>Dagger input. Yep. Correct. Alright.

01:05:05.135 --> 01:05:06.815
<v Speaker 0>So let's say we are actually

01:05:07.375 --> 01:05:09.775
<v Speaker 1>the an input is actually it's a little

01:05:09.775 --> 01:05:10.655
<v Speaker 1>configuration

01:05:10.815 --> 01:05:12.175
<v Speaker 1>telling Dagger

01:05:12.255 --> 01:05:14.815
<v Speaker 1>how to dynamically inject little bits of q.

01:05:14.815 --> 01:05:16.335
<v Speaker 1>So it's gonna be q in the end,

01:05:16.760 --> 01:05:19.800
<v Speaker 1>but Dagger will generate that queue for you

01:05:20.839 --> 01:05:22.120
<v Speaker 1>to make things easier.

01:05:23.319 --> 01:05:24.200
<v Speaker 0>Alright.

01:05:24.599 --> 01:05:26.119
<v Speaker 0>I'm just making up now, but will that

01:05:26.119 --> 01:05:26.680
<v Speaker 0>work?

01:05:27.319 --> 01:05:28.680
<v Speaker 1>Yep. No. That's perfect.

01:05:30.275 --> 01:05:31.955
<v Speaker 0>Oh, the environment. Okay.

01:05:32.755 --> 01:05:34.435
<v Speaker 0>Is it dash e for short?

01:05:35.155 --> 01:05:36.115
<v Speaker 1>Yes. Yep.

01:05:38.355 --> 01:05:40.355
<v Speaker 0>Okay. So I'm curious about that Perfect. What

01:05:40.355 --> 01:05:43.109
<v Speaker 0>that's actually changed here then. I must because

01:05:43.109 --> 01:05:45.109
<v Speaker 0>you said that input is generating queue. That's

01:05:45.109 --> 01:05:46.470
<v Speaker 0>gonna have to live somewhere.

01:05:47.510 --> 01:05:49.750
<v Speaker 0>Yep. My computer would keep up today and

01:05:49.750 --> 01:05:51.269
<v Speaker 0>maybe be able to see what that So

01:05:51.269 --> 01:05:51.830
<v Speaker 1>it

01:05:52.549 --> 01:05:54.390
<v Speaker 1>changed your values dot YAML file.

01:05:55.525 --> 01:05:56.725
<v Speaker 0>Right. Okay.

01:05:57.205 --> 01:05:58.645
<v Speaker 0>So we can Which you can you can

01:05:58.645 --> 01:06:01.285
<v Speaker 1>actually you can actually try Dagger edit.

01:06:03.525 --> 01:06:05.045
<v Speaker 1>That one, might enjoy.

01:06:06.085 --> 01:06:09.605
<v Speaker 1>Definitely do not manually edit it here because

01:06:12.780 --> 01:06:13.980
<v Speaker 1>it's it's

01:06:15.180 --> 01:06:17.500
<v Speaker 1>it's managed with SOPs. You know? So it's

01:06:17.500 --> 01:06:19.660
<v Speaker 1>all there's because of the encrypted values,

01:06:22.535 --> 01:06:24.135
<v Speaker 1>if you manually change

01:06:24.855 --> 01:06:27.095
<v Speaker 1>a part of the file without going through

01:06:27.095 --> 01:06:28.295
<v Speaker 1>Dagger edit,

01:06:28.775 --> 01:06:29.815
<v Speaker 1>the the

01:06:29.815 --> 01:06:32.215
<v Speaker 1>the hash will not match. And so it'll

01:06:32.215 --> 01:06:33.815
<v Speaker 1>say, oh, this file has been tampered with.

01:06:37.670 --> 01:06:39.269
<v Speaker 0>Alright. This computer is going to the bin

01:06:39.269 --> 01:06:40.630
<v Speaker 0>after today. Alright.

01:06:41.510 --> 01:06:42.630
<v Speaker 0>Multi bucket.

01:06:45.269 --> 01:06:47.829
<v Speaker 0>Okay. So I can modify this safely

01:06:47.829 --> 01:06:50.715
<v Speaker 0>with Dagger edit? Yes. Okay. Yep. So we've

01:06:50.715 --> 01:06:53.035
<v Speaker 0>already set that. And you can see yep.

01:06:53.035 --> 01:06:55.355
<v Speaker 1>So that's basically it's like a file representation

01:06:55.355 --> 01:06:57.595
<v Speaker 1>of of these command Dagger input commands you

01:06:57.595 --> 01:06:58.155
<v Speaker 1>typed.

01:06:59.595 --> 01:07:00.235
<v Speaker 0>Okay.

01:07:00.475 --> 01:07:02.075
<v Speaker 0>So I have two more inputs that I

01:07:02.075 --> 01:07:03.595
<v Speaker 0>need to provide in order for me to

01:07:03.595 --> 01:07:05.115
<v Speaker 0>be able to deploy this sample to do

01:07:05.115 --> 01:07:06.960
<v Speaker 0>application to Netlify.

01:07:06.960 --> 01:07:09.680
<v Speaker 0>One is account Token and Netlify.

01:07:09.680 --> 01:07:10.400
<v Speaker 0>Name.

01:07:12.160 --> 01:07:12.880
<v Speaker 0>The input

01:07:16.080 --> 01:07:17.360
<v Speaker 0>I'm wondering if I can just make this

01:07:17.360 --> 01:07:18.080
<v Speaker 0>up some more.

01:07:20.365 --> 01:07:21.884
<v Speaker 1>I have to say, I'm not sure I

01:07:21.884 --> 01:07:24.125
<v Speaker 1>would remember it, but, technically, you can.

01:07:25.484 --> 01:07:26.365
<v Speaker 2>I

01:07:26.365 --> 01:07:27.565
<v Speaker 2>think the the

01:07:29.085 --> 01:07:31.164
<v Speaker 2>you have to use the path that was

01:07:31.164 --> 01:07:33.150
<v Speaker 2>given as if, so you cannot do nesting.

01:07:33.150 --> 01:07:36.190
<v Speaker 2>So it should be, like, netrify.account.

01:07:36.190 --> 01:07:37.870
<v Speaker 2>Name and so on.

01:07:39.230 --> 01:07:40.829
<v Speaker 2>Alright. If I were you, I would do

01:07:40.829 --> 01:07:42.430
<v Speaker 1>one of those by the with the command

01:07:42.430 --> 01:07:45.310
<v Speaker 1>line, like, Dagger input something and then maybe

01:07:45.485 --> 01:07:47.565
<v Speaker 1>replicate it. That's what I do because I

01:07:47.565 --> 01:07:48.845
<v Speaker 1>never remember it.

01:07:50.205 --> 01:07:52.365
<v Speaker 0>Alright. So we want input,

01:07:52.525 --> 01:07:53.325
<v Speaker 0>notify,

01:07:54.685 --> 01:07:55.805
<v Speaker 0>dot account.

01:07:55.965 --> 01:07:58.125
<v Speaker 1>It's input. First thing you give the type

01:07:58.125 --> 01:07:58.525
<v Speaker 1>input,

01:07:59.360 --> 01:08:01.440
<v Speaker 1>That would be text. It's like a text

01:08:01.440 --> 01:08:02.080
<v Speaker 1>value.

01:08:03.040 --> 01:08:05.440
<v Speaker 0>Oh, yeah. Because we used dir previously. Okay.

01:08:06.240 --> 01:08:06.880
<v Speaker 0>Mhmm.

01:08:07.440 --> 01:08:08.720
<v Speaker 0>And I don't know what this is yet,

01:08:08.720 --> 01:08:11.040
<v Speaker 0>so I'm just make it up. Oh, yeah.

01:08:11.875 --> 01:08:14.035
<v Speaker 0>And then I'm going in here. Alright. Okay.

01:08:14.035 --> 01:08:15.235
<v Speaker 0>Yeah. So the inputs.

01:08:15.635 --> 01:08:16.435
<v Speaker 1>Oh, yeah.

01:08:16.675 --> 01:08:19.314
<v Speaker 0>Okay. So this is the type followed by

01:08:20.595 --> 01:08:22.915
<v Speaker 0>the value. Alright. Okay. Got it. Which means

01:08:22.915 --> 01:08:24.515
<v Speaker 0>we could also do

01:08:26.590 --> 01:08:28.270
<v Speaker 0>You must be just watching me going, I

01:08:28.270 --> 01:08:30.189
<v Speaker 0>really wish you would stop doing this stuff.

01:08:31.550 --> 01:08:33.710
<v Speaker 0>No. No. Actually, it's very interesting. It's good

01:08:33.710 --> 01:08:35.149
<v Speaker 1>data. Keep going.

01:08:35.950 --> 01:08:37.229
<v Speaker 0>Alright. So

01:08:37.604 --> 01:08:40.005
<v Speaker 0>I'm assuming, does it care if mine I

01:08:40.005 --> 01:08:41.604
<v Speaker 0>can't talk it as a secret or or

01:08:41.604 --> 01:08:42.404
<v Speaker 0>text?

01:08:42.645 --> 01:08:44.564
<v Speaker 0>Or does it just expect it to exist?

01:08:44.645 --> 01:08:45.764
<v Speaker 0>It does. Okay.

01:08:46.805 --> 01:08:49.205
<v Speaker 1>Yeah. Because we we if it's a secret,

01:08:49.205 --> 01:08:51.765
<v Speaker 1>we're going to secret we're gonna handle it

01:08:51.765 --> 01:08:52.325
<v Speaker 1>very differently.

01:08:53.600 --> 01:08:55.760
<v Speaker 0>But as if I provide the input as

01:08:55.760 --> 01:08:57.760
<v Speaker 0>not a secret and just I'm happy just

01:08:57.760 --> 01:09:00.719
<v Speaker 0>to to expose that, will it still work?

01:09:01.840 --> 01:09:02.640
<v Speaker 1>No. No.

01:09:05.734 --> 01:09:08.054
<v Speaker 1>Is it's gonna try and decrypt it and,

01:09:08.054 --> 01:09:09.974
<v Speaker 1>you know, it won't be a valid ciphertext.

01:09:09.974 --> 01:09:11.254
<v Speaker 0>Okay. So the

01:09:11.414 --> 01:09:14.215
<v Speaker 0>Netlify provider expects that. And in fact, if

01:09:14.215 --> 01:09:16.454
<v Speaker 0>I use the doc command, which you already

01:09:16.454 --> 01:09:19.410
<v Speaker 0>showed me, I'm assuming it probably has, yeah,

01:09:19.410 --> 01:09:22.050
<v Speaker 0>a dead sitter. Dagger dot secret. Okay.

01:09:23.490 --> 01:09:26.689
<v Speaker 0>So that means that we probably wanna do

01:09:27.570 --> 01:09:28.609
<v Speaker 0>a can It

01:09:29.810 --> 01:09:32.130
<v Speaker 2>was fine using edit. Like, you can just

01:09:32.295 --> 01:09:34.295
<v Speaker 2>type it in plain text and then Oh,

01:09:34.295 --> 01:09:36.614
<v Speaker 1>you're right. It will just encrypt it.

01:09:37.175 --> 01:09:39.415
<v Speaker 1>So Oh, I forgot about that. That's so

01:09:39.415 --> 01:09:39.974
<v Speaker 1>cool.

01:09:42.054 --> 01:09:42.774
<v Speaker 0>Okay.

01:09:43.654 --> 01:09:45.520
<v Speaker 0>Well, I mean, I I don't have a

01:09:45.520 --> 01:09:47.359
<v Speaker 0>Netlify. Should I get one? Do we actually

01:09:47.359 --> 01:09:49.120
<v Speaker 0>wanna spin this up? Or is there something

01:09:49.120 --> 01:09:49.439
<v Speaker 0>more

01:09:50.399 --> 01:09:51.920
<v Speaker 0>something Do you have an account? Yeah. Yeah.

01:09:51.920 --> 01:09:53.120
<v Speaker 1>You should spin it up. Yeah. Well, let

01:09:53.120 --> 01:09:54.480
<v Speaker 1>me give you I can give you one.

01:09:54.480 --> 01:09:55.039
<v Speaker 1>Oh.

01:09:56.719 --> 01:09:57.679
<v Speaker 0>He switched window.

01:10:00.935 --> 01:10:02.855
<v Speaker 0>No. It's it's alright. Let's let's jump to

01:10:02.855 --> 01:10:04.775
<v Speaker 0>that if I I've I've got a login.

01:10:08.695 --> 01:10:10.135
<v Speaker 0>Yeah. Let's see if we can deploy our

01:10:10.135 --> 01:10:10.935
<v Speaker 0>application.

01:10:11.575 --> 01:10:13.895
<v Speaker 0>Welcome back. I'm fine. I'm back.

01:10:16.929 --> 01:10:19.489
<v Speaker 0>Alright. We were enjoying you on mute. So

01:10:22.690 --> 01:10:23.409
<v Speaker 0>log in.

01:10:27.574 --> 01:10:29.014
<v Speaker 1>Sam and Andrea like to make fun of

01:10:29.014 --> 01:10:30.614
<v Speaker 1>my iPad setup, so I'm gonna hear about

01:10:30.614 --> 01:10:31.574
<v Speaker 1>this for days.

01:10:32.775 --> 01:10:34.215
<v Speaker 0>You know what? It's been working a lot

01:10:34.215 --> 01:10:36.135
<v Speaker 0>better than my Mac setup. So

01:10:38.215 --> 01:10:39.895
<v Speaker 0>so how do I I think you should

01:10:39.895 --> 01:10:42.400
<v Speaker 2>click on your on your user icon on

01:10:42.400 --> 01:10:43.439
<v Speaker 2>the top right.

01:10:45.040 --> 01:10:46.239
<v Speaker 2>And,

01:10:46.320 --> 01:10:49.199
<v Speaker 2>yeah, you should see user settings.

01:10:49.199 --> 01:10:49.840
<v Speaker 2>Yeah.

01:10:50.639 --> 01:10:53.760
<v Speaker 2>And applications,

01:10:53.840 --> 01:10:53.920
<v Speaker 2>perhaps,

01:10:56.235 --> 01:10:58.875
<v Speaker 2>and personal access tokens. And if you generate

01:10:58.875 --> 01:10:59.995
<v Speaker 2>one, go.

01:11:02.075 --> 01:11:02.955
<v Speaker 0>There we go.

01:11:05.435 --> 01:11:07.195
<v Speaker 0>You've all got ten minutes if you wanted

01:11:07.195 --> 01:11:09.195
<v Speaker 0>to play stuff to my. There we go.

01:11:11.170 --> 01:11:11.809
<v Speaker 0>Go.

01:11:14.289 --> 01:11:16.210
<v Speaker 0>I did that with an Equinix Metals token

01:11:16.210 --> 01:11:18.690
<v Speaker 0>one day where I created a Kubernetes cluster,

01:11:18.690 --> 01:11:20.210
<v Speaker 0>and I said I'm gonna be so disappointed

01:11:20.210 --> 01:11:21.969
<v Speaker 0>if there's not a crypto miner running on

01:11:21.969 --> 01:11:23.409
<v Speaker 0>us in thirty minutes, and there wasn't.

01:11:26.275 --> 01:11:28.675
<v Speaker 0>Alright. So we've provided the token. I'm gonna

01:11:28.675 --> 01:11:29.954
<v Speaker 0>run a edit.

01:11:30.675 --> 01:11:32.275
<v Speaker 0>Okay. And now we can see

01:11:33.074 --> 01:11:34.675
<v Speaker 0>the secret token.

01:11:34.835 --> 01:11:37.250
<v Speaker 0>The account name, I mean, that is Rawkode.

01:11:37.250 --> 01:11:39.489
<v Speaker 0>Right? That's just my actual account name. It's

01:11:39.489 --> 01:11:41.010
<v Speaker 0>not like a site name or anything like

01:11:41.010 --> 01:11:41.730
<v Speaker 0>that. Okay.

01:11:42.690 --> 01:11:45.410
<v Speaker 1>Yeah. I think actually the account name, that's

01:11:45.410 --> 01:11:48.050
<v Speaker 1>actually optional because account name, that's when you

01:11:48.050 --> 01:11:48.930
<v Speaker 1>have a team, I think.

01:11:51.085 --> 01:11:51.965
<v Speaker 1>Oh, no. No.

01:11:52.765 --> 01:11:55.645
<v Speaker 1>Yeah. Site Name, you need. That's the site

01:11:55.645 --> 01:11:56.925
<v Speaker 1>that's the site name.

01:11:58.525 --> 01:12:00.364
<v Speaker 1>Site.account.name,

01:12:01.645 --> 01:12:03.565
<v Speaker 1>that's that that's what they call a team.

01:12:04.620 --> 01:12:06.620
<v Speaker 1>And I think by default, you just wanna

01:12:06.620 --> 01:12:07.739
<v Speaker 1>leave that empty.

01:12:10.700 --> 01:12:13.740
<v Speaker 0>Okay. So that's right there. Your your personal

01:12:13.740 --> 01:12:15.980
<v Speaker 1>team. That that's I guess we should change

01:12:15.980 --> 01:12:18.185
<v Speaker 1>that to team because it's it makes sense

01:12:18.185 --> 01:12:20.505
<v Speaker 1>to Oh. I think a coding style for

01:12:20.505 --> 01:12:22.505
<v Speaker 1>the standard library should be use whatever terms

01:12:22.505 --> 01:12:24.665
<v Speaker 1>the native service uses. Yeah.

01:12:27.305 --> 01:12:29.385
<v Speaker 2>Yeah. I think all the inputs should have

01:12:29.385 --> 01:12:31.945
<v Speaker 2>been prefixed with side notes. So if you're

01:12:31.945 --> 01:12:33.860
<v Speaker 2>on edit, you should be able to

01:12:35.140 --> 01:12:37.060
<v Speaker 2>like, just Dagger

01:12:37.060 --> 01:12:38.900
<v Speaker 2>edit, and you should be able to change

01:12:38.900 --> 01:12:39.940
<v Speaker 2>that in batch.

01:12:41.540 --> 01:12:43.220
<v Speaker 0>I don't know why I did there.

01:12:45.805 --> 01:12:48.605
<v Speaker 0>Yeah. Let's let's do that. Okay. So we

01:12:48.605 --> 01:12:49.085
<v Speaker 0>expect

01:12:50.525 --> 01:12:52.205
<v Speaker 0>is that just me failing to be able

01:12:52.205 --> 01:12:53.245
<v Speaker 0>to paste now?

01:12:53.485 --> 01:12:55.405
<v Speaker 0>I really am on fire today. There we

01:12:55.405 --> 01:12:55.965
<v Speaker 0>go.

01:12:56.525 --> 01:12:58.525
<v Speaker 0>Okay. Let's take that one out. Oh, I

01:12:58.525 --> 01:12:59.085
<v Speaker 1>see. Yeah.

01:12:59.810 --> 01:13:00.930
<v Speaker 1>But then net there's no

01:13:01.890 --> 01:13:03.090
<v Speaker 1>is that Netlify?

01:13:04.290 --> 01:13:05.970
<v Speaker 1>Is it site dot Netlify?

01:13:07.170 --> 01:13:10.450
<v Speaker 2>That's what the output side. I'm not yeah.

01:13:10.610 --> 01:13:12.690
<v Speaker 0>I wanted site Netlify account token to site,

01:13:12.690 --> 01:13:14.455
<v Speaker 0>let define name Oh, okay. Which I believe

01:13:14.455 --> 01:13:16.215
<v Speaker 0>I've now set appropriately.

01:13:16.695 --> 01:13:18.135
<v Speaker 0>And we're gonna run the Dagger up, and

01:13:18.135 --> 01:13:19.255
<v Speaker 0>we're gonna see if we get us to

01:13:19.255 --> 01:13:21.175
<v Speaker 0>do application deployed to Netlify.

01:13:23.655 --> 01:13:24.295
<v Speaker 1>Nice.

01:13:24.775 --> 01:13:27.335
<v Speaker 1>One note. If let's say you're setting that

01:13:27.335 --> 01:13:27.975
<v Speaker 1>up for a team,

01:13:29.860 --> 01:13:31.860
<v Speaker 1>this this setup you could do once. And

01:13:31.860 --> 01:13:33.860
<v Speaker 1>because the values are encrypted, you can commit

01:13:33.860 --> 01:13:35.540
<v Speaker 1>it and share in the repo.

01:13:35.860 --> 01:13:36.579
<v Speaker 1>And then

01:13:36.980 --> 01:13:39.700
<v Speaker 1>downstream from you, app developers who just wanna

01:13:39.700 --> 01:13:41.700
<v Speaker 1>deploy to that to Netlify to, like, let's

01:13:41.700 --> 01:13:42.980
<v Speaker 1>say, shared Netlify account,

01:13:43.985 --> 01:13:46.545
<v Speaker 1>those inputs will be preconfigured for them.

01:13:48.465 --> 01:13:50.785
<v Speaker 0>I mean, is it safe for those like,

01:13:50.785 --> 01:13:53.025
<v Speaker 0>say, I wanted to just Multi tenancy. Deploy

01:13:53.025 --> 01:13:56.625
<v Speaker 0>my own blog with Dagger and the repository's

01:13:56.625 --> 01:13:58.945
<v Speaker 0>open source. It's public. I mean, is that

01:13:58.860 --> 01:14:00.699
<v Speaker 0>is it safe because of that encryption for

01:14:00.699 --> 01:14:01.659
<v Speaker 0>me to do that as long as I

01:14:01.659 --> 01:14:03.659
<v Speaker 0>don't give anyone access to my private key?

01:14:04.460 --> 01:14:06.860
<v Speaker 1>Yes. Yes. Just don't give access to the

01:14:06.860 --> 01:14:07.820
<v Speaker 1>the key.

01:14:09.340 --> 01:14:10.940
<v Speaker 0>Is there a plan for I mean, I

01:14:10.940 --> 01:14:12.699
<v Speaker 1>mean, you know, you should apply you should

01:14:12.699 --> 01:14:16.224
<v Speaker 1>apply common common sense additional layers. Like, if

01:14:16.224 --> 01:14:17.984
<v Speaker 1>it's a critical credential,

01:14:19.105 --> 01:14:21.264
<v Speaker 1>you should prepare for the possibility that the

01:14:21.264 --> 01:14:22.544
<v Speaker 1>key is leaked

01:14:22.704 --> 01:14:24.704
<v Speaker 1>anyway as some you know what I mean?

01:14:24.704 --> 01:14:25.425
<v Speaker 1>So Yeah.

01:14:26.625 --> 01:14:27.824
<v Speaker 1>Just apply

01:14:27.824 --> 01:14:30.930
<v Speaker 1>security common sense. But, yes, it it it

01:14:30.930 --> 01:14:31.489
<v Speaker 1>is

01:14:31.810 --> 01:14:33.410
<v Speaker 1>I mean, it the the project is very

01:14:33.410 --> 01:14:34.130
<v Speaker 1>robust,

01:14:34.450 --> 01:14:35.969
<v Speaker 1>so it is safe to commit

01:14:38.370 --> 01:14:39.409
<v Speaker 1>credentials

01:14:39.970 --> 01:14:42.210
<v Speaker 1>encrypted with SOPs and age

01:14:42.370 --> 01:14:43.250
<v Speaker 1>on the Git repo.

01:14:43.995 --> 01:14:46.395
<v Speaker 0>Yeah. In fact, this is actually my exact

01:14:46.395 --> 01:14:48.715
<v Speaker 0>next question, and I think this answers already

01:14:48.715 --> 01:14:50.475
<v Speaker 0>for me. But the secret back end can

01:14:50.475 --> 01:14:52.715
<v Speaker 0>be swapped out for cloud KMS as well.

01:14:52.715 --> 01:14:53.275
<v Speaker 0>Right?

01:14:54.235 --> 01:14:54.795
<v Speaker 1>Yes.

01:14:55.275 --> 01:14:56.475
<v Speaker 0>Alright. That's pretty sweet.

01:14:57.489 --> 01:14:59.969
<v Speaker 0>Now we just need a one password option,

01:14:59.969 --> 01:15:01.650
<v Speaker 0>and then I can do everything on my

01:15:01.650 --> 01:15:03.170
<v Speaker 0>local machine. That would be pretty cool too.

01:15:03.170 --> 01:15:04.610
<v Speaker 1>Oh, that's cool. Yeah.

01:15:05.650 --> 01:15:07.489
<v Speaker 1>Yeah. Actually, it would be nice to to

01:15:07.489 --> 01:15:09.889
<v Speaker 1>have, you know, pluggable back ends so that

01:15:09.889 --> 01:15:11.570
<v Speaker 1>you can use your favorite KMS and,

01:15:12.785 --> 01:15:15.105
<v Speaker 1>you know, just pick your back end. We

01:15:15.105 --> 01:15:16.625
<v Speaker 1>did that in a in a past version

01:15:16.625 --> 01:15:18.545
<v Speaker 1>before open sourcing, so we'll have to bring

01:15:18.545 --> 01:15:19.105
<v Speaker 1>it back.

01:15:19.425 --> 01:15:21.745
<v Speaker 0>Yeah. Well, I can't use Google Cloud's key

01:15:21.985 --> 01:15:23.985
<v Speaker 0>KMS key, whatever they call it, because it

01:15:23.985 --> 01:15:25.665
<v Speaker 0>doesn't allow you to delete the key rings

01:15:25.665 --> 01:15:26.945
<v Speaker 0>when you're done with it, and I just

01:15:26.945 --> 01:15:28.280
<v Speaker 0>can't handle it. So I always end up

01:15:28.280 --> 01:15:30.520
<v Speaker 0>using AWS just for their KMS but then

01:15:30.520 --> 01:15:32.199
<v Speaker 0>deploying other stuff to Google.

01:15:34.280 --> 01:15:36.520
<v Speaker 0>Just weird little annoyances. But yeah, one password

01:15:36.520 --> 01:15:38.200
<v Speaker 0>on here would be pretty sweet. Although age

01:15:38.200 --> 01:15:39.320
<v Speaker 0>is a pretty good way to do it

01:15:39.320 --> 01:15:40.760
<v Speaker 0>as well. I could store that key somewhere.

01:15:41.525 --> 01:15:44.565
<v Speaker 0>Alright. Let's see. We're doing a a yarn

01:15:44.565 --> 01:15:46.724
<v Speaker 0>step, so this may take a either a

01:15:46.724 --> 01:15:48.085
<v Speaker 0>few minutes or a few hours. We'll just

01:15:48.085 --> 01:15:49.044
<v Speaker 0>need to wait and see.

01:15:50.244 --> 01:15:50.724
<v Speaker 2>Again.

01:15:53.060 --> 01:15:55.540
<v Speaker 0>So I'm curious about the different environments. I'm

01:15:55.540 --> 01:15:58.820
<v Speaker 0>assuming because the input has changed that does

01:15:58.820 --> 01:16:01.140
<v Speaker 0>it know that the inputs don't affect the

01:16:01.140 --> 01:16:03.300
<v Speaker 0>YARN build? Could that have been cached or

01:16:03.300 --> 01:16:06.180
<v Speaker 0>are environments all the caching happened per environment?

01:16:12.605 --> 01:16:15.325
<v Speaker 0>Should have been Caching shared. Assuming that

01:16:15.965 --> 01:16:16.765
<v Speaker 2>yep.

01:16:18.285 --> 01:16:20.445
<v Speaker 2>Although, I'm assuming here, there might have been

01:16:20.445 --> 01:16:23.340
<v Speaker 2>some modifications or something going on. But, yeah,

01:16:23.340 --> 01:16:24.219
<v Speaker 2>in theory,

01:16:24.540 --> 01:16:26.300
<v Speaker 2>this should have been like a no op.

01:16:26.300 --> 01:16:28.380
<v Speaker 2>We should have just, you know, not built

01:16:28.380 --> 01:16:29.099
<v Speaker 2>anything.

01:16:29.420 --> 01:16:32.060
<v Speaker 0>And that's because it doesn't require anything environment

01:16:32.060 --> 01:16:34.460
<v Speaker 0>specific that the build step itself should have

01:16:34.460 --> 01:16:36.300
<v Speaker 0>been shared across different environments.

01:16:37.765 --> 01:16:40.005
<v Speaker 2>Yeah. Actually, it's shared across the entire, like,

01:16:40.005 --> 01:16:42.085
<v Speaker 2>build kit instance. It could be, like, your

01:16:42.085 --> 01:16:44.085
<v Speaker 2>cache, but it could also be, like, someone

01:16:44.085 --> 01:16:46.245
<v Speaker 2>else's. Like, if you share a a build

01:16:46.245 --> 01:16:48.405
<v Speaker 2>kit server, could be your entire team or

01:16:48.405 --> 01:16:49.925
<v Speaker 2>coworkers. Yeah. Oh, nice.

01:16:51.930 --> 01:16:53.290
<v Speaker 1>Do a lot of cool stuff on the

01:16:53.290 --> 01:16:54.409
<v Speaker 1>infrastructure side.

01:16:56.570 --> 01:16:59.050
<v Speaker 0>Yeah. I'll just assume my Versus code. Netflix.

01:16:59.050 --> 01:16:59.530
<v Speaker 1>Sorry.

01:17:00.489 --> 01:17:02.570
<v Speaker 0>I'll figure Netflix, they use Bill Kit,

01:17:02.890 --> 01:17:03.690
<v Speaker 1>a lot.

01:17:04.570 --> 01:17:06.250
<v Speaker 1>They they do a lot of for building.

01:17:08.555 --> 01:17:10.475
<v Speaker 1>And and, you know, they have

01:17:11.435 --> 01:17:14.315
<v Speaker 1>build kit clusters backed by container d clusters,

01:17:14.315 --> 01:17:16.475
<v Speaker 1>and and so you get some some pretty

01:17:16.475 --> 01:17:17.115
<v Speaker 1>amazing

01:17:17.435 --> 01:17:19.195
<v Speaker 1>you know, it scales up really nicely because

01:17:19.195 --> 01:17:21.275
<v Speaker 1>both build kit and container d are

01:17:21.880 --> 01:17:23.960
<v Speaker 1>really well engineered, and they got a lot

01:17:23.960 --> 01:17:24.760
<v Speaker 1>of usage.

01:17:25.160 --> 01:17:26.760
<v Speaker 1>And so you can just you can do

01:17:26.760 --> 01:17:28.440
<v Speaker 1>some some pretty

01:17:28.840 --> 01:17:29.880
<v Speaker 1>impressive

01:17:29.880 --> 01:17:31.800
<v Speaker 1>stuff, and and so we just piggyback on

01:17:31.800 --> 01:17:32.840
<v Speaker 1>all of that. So

01:17:33.560 --> 01:17:33.960
<v Speaker 0>Nice.

01:17:35.055 --> 01:17:36.335
<v Speaker 0>Alright. Audience,

01:17:36.655 --> 01:17:38.575
<v Speaker 0>last chance for questions. We'll be finishing up

01:17:38.575 --> 01:17:41.695
<v Speaker 0>just after we hopefully see our Netlify Netlify

01:17:41.695 --> 01:17:43.215
<v Speaker 0>site here deployed,

01:17:43.695 --> 01:17:46.015
<v Speaker 0>which I'm pretty confident about. I'm sure

01:17:46.815 --> 01:17:48.730
<v Speaker 0>it should be good. I'll assume the cache

01:17:48.730 --> 01:17:50.650
<v Speaker 0>here wasn't used probably just because of my

01:17:50.650 --> 01:17:53.130
<v Speaker 0>Versus codes modifying or doing stuff in the

01:17:53.130 --> 01:17:53.849
<v Speaker 0>background.

01:17:54.730 --> 01:17:55.530
<v Speaker 0>Yeah.

01:17:57.050 --> 01:17:58.010
<v Speaker 1>I don't know why.

01:17:59.050 --> 01:18:01.290
<v Speaker 0>I think Is it is it the queues

01:18:01.290 --> 01:18:04.135
<v Speaker 1>queue files? Yeah. Yeah. I think because the

01:18:04.135 --> 01:18:06.455
<v Speaker 2>input is dot, and since we put, like,

01:18:06.455 --> 01:18:07.974
<v Speaker 2>the queue files,

01:18:08.215 --> 01:18:11.414
<v Speaker 2>we we want to change the cache. Yeah.

01:18:12.135 --> 01:18:14.215
<v Speaker 0>There we go. Yeah. That yeah. In theory

01:18:14.455 --> 01:18:14.695
<v Speaker 2>yep.

01:18:15.470 --> 01:18:17.230
<v Speaker 2>Yeah. I think if we remove them and

01:18:17.230 --> 01:18:19.150
<v Speaker 2>Dagger up again, it should be cached, but

01:18:19.150 --> 01:18:20.270
<v Speaker 2>I'm not gonna

01:18:20.910 --> 01:18:22.510
<v Speaker 0>I think we're too close now. Let's just

01:18:22.510 --> 01:18:25.230
<v Speaker 0>let it go. Yeah. Yeah. Yeah. We we

01:18:25.230 --> 01:18:27.230
<v Speaker 1>should auto auto exclude them. Right? Because Bill

01:18:27.230 --> 01:18:28.910
<v Speaker 1>Kit you can tell Bill Kit to exclude

01:18:28.910 --> 01:18:30.350
<v Speaker 1>certain patterns from

01:18:30.605 --> 01:18:32.284
<v Speaker 1>from a local directory. So I guess we

01:18:32.284 --> 01:18:33.244
<v Speaker 1>could we could

01:18:34.284 --> 01:18:36.684
<v Speaker 1>we could do that. Queue dot mods.

01:18:37.324 --> 01:18:39.245
<v Speaker 0>Maybe if if dot Dagger We can even

01:18:39.245 --> 01:18:41.804
<v Speaker 1>be more specific. We could say ignore only

01:18:41.804 --> 01:18:43.804
<v Speaker 1>the queue files, which are part of the

01:18:43.804 --> 01:18:45.645
<v Speaker 1>plan, which you're currently executing.

01:18:46.420 --> 01:18:47.219
<v Speaker 0>Ah.

01:18:47.540 --> 01:18:48.260
<v Speaker 0>Cool.

01:18:50.660 --> 01:18:52.980
<v Speaker 0>Alright. Let's see. It seems to have already

01:18:52.980 --> 01:18:55.139
<v Speaker 0>fetched the dependencies.

01:18:56.740 --> 01:18:58.900
<v Speaker 0>Let's do the linking step, which I've never

01:18:58.900 --> 01:19:00.180
<v Speaker 0>understood with node.

01:19:04.405 --> 01:19:06.965
<v Speaker 0>Hopefully, we got a nice pretty quick build.

01:19:10.005 --> 01:19:11.365
<v Speaker 1>So this is the build of the actual

01:19:11.365 --> 01:19:12.244
<v Speaker 1>to do app?

01:19:12.965 --> 01:19:14.804
<v Speaker 0>It is. It looks like it to me.

01:19:15.605 --> 01:19:16.325
<v Speaker 1>It's crazy.

01:19:17.710 --> 01:19:19.070
<v Speaker 0>My computer is

01:19:19.230 --> 01:19:20.670
<v Speaker 0>I don't know what's going on with it

01:19:20.670 --> 01:19:23.630
<v Speaker 0>today, but last week or two, and it

01:19:23.630 --> 01:19:25.389
<v Speaker 0>does slow down a lot. I'm not sure

01:19:25.389 --> 01:19:27.310
<v Speaker 0>what I've got running. I feel like we're

01:19:27.310 --> 01:19:29.310
<v Speaker 1>we're at a point where web builds are

01:19:29.310 --> 01:19:31.965
<v Speaker 1>just so ridiculously long that there's a whole

01:19:31.965 --> 01:19:34.765
<v Speaker 1>feel and innovation in making really cool progress

01:19:34.765 --> 01:19:36.285
<v Speaker 1>bars for web builds.

01:19:37.645 --> 01:19:40.205
<v Speaker 1>Like, really slick. That's not healthy.

01:19:41.405 --> 01:19:42.925
<v Speaker 0>Really, what I should just do is get

01:19:42.925 --> 01:19:45.485
<v Speaker 0>an iPad and use GitHub code spaces and

01:19:45.485 --> 01:19:47.460
<v Speaker 0>not have anything running locally except my streaming

01:19:47.460 --> 01:19:49.300
<v Speaker 0>software. I think I'm now sold on that

01:19:49.300 --> 01:19:49.940
<v Speaker 0>idea.

01:19:51.140 --> 01:19:52.980
<v Speaker 1>That's what I do. Yeah. Exactly. Let the

01:19:52.980 --> 01:19:54.500
<v Speaker 0>cloud deal with this. Why am why am

01:19:54.500 --> 01:19:56.340
<v Speaker 0>I running Docker on my local machine?

01:19:59.060 --> 01:20:01.460
<v Speaker 1>Well, does GitHub space they have an an

01:20:01.460 --> 01:20:03.744
<v Speaker 1>editor. Right? Yeah. Yeah. You gotta fill a

01:20:03.744 --> 01:20:05.425
<v Speaker 0>Versus code, web based Versus code. So it's

01:20:05.425 --> 01:20:07.025
<v Speaker 0>really good, actually. And it syncs with all

01:20:07.025 --> 01:20:09.264
<v Speaker 0>your settings locally. So, like, whenever I open

01:20:09.264 --> 01:20:11.025
<v Speaker 0>code spaces, I get the exact same Versus

01:20:11.025 --> 01:20:12.704
<v Speaker 0>code with the same extensions with the same

01:20:12.704 --> 01:20:14.545
<v Speaker 0>color theme. Like, it's really impressive.

01:20:16.060 --> 01:20:18.540
<v Speaker 1>Wow. I use VI and SSH, so I

01:20:18.540 --> 01:20:18.860
<v Speaker 1>I

01:20:19.420 --> 01:20:20.540
<v Speaker 1>that's also something

01:20:20.860 --> 01:20:22.540
<v Speaker 1>Andrew and Sam like to make fun of.

01:20:22.540 --> 01:20:23.020
<v Speaker 1>But

01:20:25.500 --> 01:20:27.100
<v Speaker 0>I I I used to be a new

01:20:27.260 --> 01:20:27.660
<v Speaker 1>low maintenance.

01:20:29.094 --> 01:20:30.454
<v Speaker 0>I like NeoVim,

01:20:30.454 --> 01:20:32.454
<v Speaker 0>but the the Versus code with the language

01:20:32.454 --> 01:20:34.614
<v Speaker 0>server protocol stuff just, like, blew me away

01:20:34.614 --> 01:20:35.815
<v Speaker 0>when I first tried it. And I know

01:20:35.815 --> 01:20:38.054
<v Speaker 0>that NeoVim now has quite good language server

01:20:38.054 --> 01:20:40.855
<v Speaker 0>protocol support, but I kinda got I got

01:20:40.855 --> 01:20:42.295
<v Speaker 0>used to Versus code. I actually quite like

01:20:42.295 --> 01:20:42.534
<v Speaker 0>it.

01:20:46.830 --> 01:20:49.150
<v Speaker 1>I I hear ads for Versus Code every

01:20:49.150 --> 01:20:50.670
<v Speaker 1>morning when I log in.

01:20:54.989 --> 01:20:55.550
<v Speaker 0>Alright.

01:20:58.824 --> 01:21:01.624
<v Speaker 0>This may or may not finish. So we

01:21:05.784 --> 01:21:08.505
<v Speaker 0>got a comment from Crazy Max saying, yeah,

01:21:08.505 --> 01:21:11.385
<v Speaker 0>they do. Netflix do contribute to build kit.

01:21:11.385 --> 01:21:12.025
<v Speaker 0>There you go.

01:21:12.770 --> 01:21:13.570
<v Speaker 0>Yeah.

01:21:13.730 --> 01:21:14.130
<v Speaker 1>We can

01:21:15.250 --> 01:21:16.850
<v Speaker 1>and we bother them a lot.

01:21:19.650 --> 01:21:21.410
<v Speaker 0>Oh, it's there. We did we did hit

01:21:21.410 --> 01:21:22.930
<v Speaker 1>we did hit a lot of, well, not

01:21:22.930 --> 01:21:24.530
<v Speaker 1>a lot. We did a few build kit

01:21:24.530 --> 01:21:24.850
<v Speaker 1>bugs.

01:21:26.385 --> 01:21:28.145
<v Speaker 1>When when you're hitting bill kit bugs, you

01:21:28.145 --> 01:21:29.425
<v Speaker 1>know you're you're really

01:21:30.065 --> 01:21:32.465
<v Speaker 1>a serious bill kit user user because bill

01:21:32.465 --> 01:21:35.024
<v Speaker 1>kit doesn't have a lot of bugs generally.

01:21:37.744 --> 01:21:40.170
<v Speaker 0>That and you're using the queue, which I

01:21:40.330 --> 01:21:42.330
<v Speaker 0>I'm sure Marcel would say queue is still

01:21:42.330 --> 01:21:44.810
<v Speaker 0>prey early in the adoption cycle, so you're

01:21:44.810 --> 01:21:45.530
<v Speaker 0>kinda

01:21:45.610 --> 01:21:47.770
<v Speaker 0>making maybe Queue has more bugs,

01:21:48.170 --> 01:21:49.850
<v Speaker 1>but they fix them really fast. No. But

01:21:49.850 --> 01:21:51.290
<v Speaker 1>they, you know, they they they fix them

01:21:51.290 --> 01:21:53.930
<v Speaker 1>really fast, so it's it's a it's a

01:21:53.930 --> 01:21:54.410
<v Speaker 1>good combination.

01:21:56.425 --> 01:21:57.945
<v Speaker 0>Alright. Is is this

01:21:58.665 --> 01:21:59.704
<v Speaker 0>has it worked?

01:22:00.025 --> 01:22:02.824
<v Speaker 0>Is this the Netlify? It looks like oh,

01:22:02.824 --> 01:22:04.985
<v Speaker 1>that's actually so that's the the initial build

01:22:04.985 --> 01:22:07.225
<v Speaker 1>of the Netlify container. So the the container

01:22:07.225 --> 01:22:09.145
<v Speaker 1>that will run run the Netlify upload.

01:22:10.770 --> 01:22:13.809
<v Speaker 0>Alright. Okay. Okay. Because when you're when you

01:22:13.809 --> 01:22:16.209
<v Speaker 1>develop a package, like, you you decide actually,

01:22:17.809 --> 01:22:19.570
<v Speaker 1>we may actually have to set a convention

01:22:19.570 --> 01:22:20.929
<v Speaker 1>for that, you know, like, official

01:22:23.435 --> 01:22:26.075
<v Speaker 1>repositories in in Linux distros. Everything has to

01:22:26.075 --> 01:22:28.475
<v Speaker 1>be built from scratch in a reproducible way.

01:22:28.555 --> 01:22:30.795
<v Speaker 1>Like, we we will probably end up imposing

01:22:30.795 --> 01:22:33.675
<v Speaker 1>a rule like that for official upstream packages.

01:22:33.675 --> 01:22:35.435
<v Speaker 1>But in theory, you could have a package

01:22:35.435 --> 01:22:35.995
<v Speaker 1>that

01:22:36.235 --> 01:22:37.035
<v Speaker 1>just

01:22:37.430 --> 01:22:39.910
<v Speaker 1>you know, there's a docker pull on a

01:22:39.910 --> 01:22:42.390
<v Speaker 1>binary image and then just runs it. You

01:22:42.390 --> 01:22:44.390
<v Speaker 1>don't have to build on the fly,

01:22:44.710 --> 01:22:45.670
<v Speaker 1>but probably

01:22:46.310 --> 01:22:49.030
<v Speaker 1>you you should if you're serious about your

01:22:49.445 --> 01:22:50.325
<v Speaker 1>your,

01:22:51.365 --> 01:22:53.765
<v Speaker 1>being able to trace your supply chain because

01:22:53.765 --> 01:22:55.205
<v Speaker 1>then you can see what's going on end

01:22:55.205 --> 01:22:56.005
<v Speaker 1>to end. Right?

01:22:56.565 --> 01:22:58.405
<v Speaker 0>Yeah. The sec store project, I think, is

01:22:58.405 --> 01:23:00.245
<v Speaker 0>really exciting for that whole supply chain thing

01:23:00.245 --> 01:23:01.685
<v Speaker 0>right now. They've got the new

01:23:02.300 --> 01:23:05.740
<v Speaker 0>software bill of manifest or materials support that

01:23:05.740 --> 01:23:06.940
<v Speaker 0>they've been working on, which I think is

01:23:06.940 --> 01:23:08.540
<v Speaker 0>really, really, really, really cool.

01:23:09.420 --> 01:23:12.300
<v Speaker 1>Oh, what project is that? A six store.

01:23:14.060 --> 01:23:15.660
<v Speaker 1>Oh, yeah. Yeah. I I I see what

01:23:15.660 --> 01:23:17.335
<v Speaker 1>you're talking about. Yeah. It's a You know,

01:23:17.335 --> 01:23:18.775
<v Speaker 0>there's a whole little group of people on

01:23:18.775 --> 01:23:22.294
<v Speaker 1>the on the, Dagger Discord that are really

01:23:22.614 --> 01:23:24.695
<v Speaker 1>ex you know, really focused on on that,

01:23:24.695 --> 01:23:26.695
<v Speaker 1>the software bill of materials and,

01:23:28.054 --> 01:23:30.135
<v Speaker 1>just the new requirements coming up for it

01:23:31.220 --> 01:23:32.900
<v Speaker 1>in The US, you know,

01:23:33.380 --> 01:23:35.060
<v Speaker 1>for federal contractors.

01:23:35.220 --> 01:23:36.980
<v Speaker 1>So it seemed like a lot of vendors

01:23:36.980 --> 01:23:38.420
<v Speaker 1>are getting excited about that.

01:23:39.380 --> 01:23:41.540
<v Speaker 0>I'm really starting to dislike this error message

01:23:41.540 --> 01:23:42.180
<v Speaker 0>from you, Aaron.

01:23:43.095 --> 01:23:45.575
<v Speaker 0>And now thinking that someone should invent BuildKit

01:23:45.575 --> 01:23:47.175
<v Speaker 0>as a service so that all this stuff

01:23:47.175 --> 01:23:49.494
<v Speaker 0>just runs on someone else's computer for me.

01:23:49.495 --> 01:23:50.695
<v Speaker 0>I guess that's what you were saying about

01:23:50.695 --> 01:23:51.415
<v Speaker 0>the team.

01:23:51.815 --> 01:23:52.775
<v Speaker 0>Sorry. Here you go.

01:23:53.735 --> 01:23:54.775
<v Speaker 1>No. I agree. I agree.

01:23:55.849 --> 01:23:56.570
<v Speaker 0>Yeah.

01:23:56.889 --> 01:23:58.489
<v Speaker 0>I mean, I do have access to bare

01:23:58.489 --> 01:24:00.010
<v Speaker 0>metal. I work for Echo XPEL. I should

01:24:00.010 --> 01:24:01.610
<v Speaker 0>just spin up a really beefy box running

01:24:01.610 --> 01:24:03.849
<v Speaker 0>build kit and expose myself a little Yeah.

01:24:03.849 --> 01:24:06.329
<v Speaker 0>Docker host thing. You should. I mean, the

01:24:06.329 --> 01:24:08.170
<v Speaker 1>the first cloud provider that does that, we

01:24:08.170 --> 01:24:08.730
<v Speaker 1>will

01:24:09.025 --> 01:24:09.985
<v Speaker 1>we will

01:24:10.305 --> 01:24:12.145
<v Speaker 1>point Dagger users to it because we're not

01:24:12.225 --> 01:24:13.825
<v Speaker 1>that's not how we're gonna make money.

01:24:15.505 --> 01:24:16.945
<v Speaker 1>You know, I think Google Cloud had a

01:24:17.185 --> 01:24:18.865
<v Speaker 1>maybe they still do. There was an attempt

01:24:18.865 --> 01:24:20.225
<v Speaker 1>at doing that for Bazel.

01:24:20.465 --> 01:24:21.665
<v Speaker 1>But the problem, I think,

01:24:22.320 --> 01:24:24.880
<v Speaker 1>for Bazel is it's really, really hard and

01:24:24.880 --> 01:24:27.679
<v Speaker 1>high friction to go for to to to

01:24:27.679 --> 01:24:29.599
<v Speaker 1>do remote execution. It doesn't you can't switch

01:24:29.599 --> 01:24:31.360
<v Speaker 1>it on on demand.

01:24:33.119 --> 01:24:34.800
<v Speaker 1>But with Bill Kit, you can.

01:24:36.594 --> 01:24:38.594
<v Speaker 0>Alright. Well, we'll give this a few more

01:24:38.594 --> 01:24:40.195
<v Speaker 0>minutes to finish. Why don't we have a

01:24:40.195 --> 01:24:41.955
<v Speaker 0>quick chat just before we wrap up then

01:24:41.955 --> 01:24:43.554
<v Speaker 0>and maybe you can kinda let me just

01:24:43.554 --> 01:24:45.235
<v Speaker 0>pop this back over here. Maybe you can

01:24:45.235 --> 01:24:47.890
<v Speaker 0>share with us what's what's coming next for

01:24:47.890 --> 01:24:49.730
<v Speaker 0>for Dagger. Like, where are you and the

01:24:49.810 --> 01:24:52.050
<v Speaker 0>like, are you pushing towards beta? When should

01:24:52.050 --> 01:24:54.370
<v Speaker 0>people expect GA as our new any features

01:24:54.370 --> 01:24:56.930
<v Speaker 0>providers are coming? You wanna give us the

01:24:56.930 --> 01:24:58.450
<v Speaker 0>the quick road map?

01:24:59.090 --> 01:25:00.850
<v Speaker 1>Yeah. Sure. So the road map is,

01:25:01.650 --> 01:25:04.285
<v Speaker 1>you know, we started opening up to we're

01:25:04.285 --> 01:25:05.885
<v Speaker 1>running towards private beta.

01:25:06.125 --> 01:25:07.805
<v Speaker 1>You know, we're sort of transitioning from alpha

01:25:07.805 --> 01:25:09.245
<v Speaker 1>to beta. I'm not sure where the cutoff

01:25:09.245 --> 01:25:10.045
<v Speaker 1>is, but

01:25:10.525 --> 01:25:13.165
<v Speaker 1>we're bringing in all these people that that

01:25:13.165 --> 01:25:14.845
<v Speaker 1>are asking for access, and we're

01:25:16.010 --> 01:25:17.690
<v Speaker 1>getting feedback and fixing.

01:25:18.010 --> 01:25:19.770
<v Speaker 1>So the goal is to have some sort

01:25:19.770 --> 01:25:22.090
<v Speaker 1>of publicly available beta in the fall, I

01:25:22.090 --> 01:25:24.010
<v Speaker 1>guess. You know? Can't really launch in the

01:25:24.010 --> 01:25:24.970
<v Speaker 1>summer anyway.

01:25:25.130 --> 01:25:26.250
<v Speaker 1>So we're just gonna

01:25:26.730 --> 01:25:28.170
<v Speaker 1>improve as much as we can and get

01:25:28.170 --> 01:25:29.530
<v Speaker 1>as many testers as we can

01:25:30.075 --> 01:25:31.995
<v Speaker 1>and then fix things as they break.

01:25:32.315 --> 01:25:35.275
<v Speaker 1>There is some major UX improvements. You know,

01:25:35.275 --> 01:25:36.955
<v Speaker 1>we we need to finish the UX.

01:25:38.395 --> 01:25:39.755
<v Speaker 1>It's still pretty rough,

01:25:39.995 --> 01:25:41.755
<v Speaker 1>and we need to get kind of everything

01:25:41.755 --> 01:25:42.875
<v Speaker 1>in order, and then we'll launch.

01:25:44.020 --> 01:25:45.619
<v Speaker 1>Yeah. And then from there,

01:25:46.340 --> 01:25:47.300
<v Speaker 1>we'll see.

01:25:48.900 --> 01:25:50.580
<v Speaker 1>We also wanna make it clear from the

01:25:50.580 --> 01:25:53.380
<v Speaker 1>start where the the cloud service fits, and

01:25:53.540 --> 01:25:56.020
<v Speaker 1>we wanna be very transparent with the community

01:25:56.020 --> 01:25:57.300
<v Speaker 1>early on because

01:25:57.875 --> 01:26:00.755
<v Speaker 1>I think confusion on where the open source

01:26:00.755 --> 01:26:03.155
<v Speaker 1>part ends and where the cloud and proprietary

01:26:03.155 --> 01:26:04.755
<v Speaker 1>part starts,

01:26:05.075 --> 01:26:07.635
<v Speaker 1>that cause problems down the road. So we

01:26:07.635 --> 01:26:08.835
<v Speaker 1>wanna avoid that.

01:26:09.795 --> 01:26:11.475
<v Speaker 1>And, you know, I think everyone can agree.

01:26:11.475 --> 01:26:13.380
<v Speaker 1>If it's if you like the project, then

01:26:13.380 --> 01:26:15.219
<v Speaker 1>you probably want the people building the project

01:26:15.219 --> 01:26:17.300
<v Speaker 1>to make money in a healthy way so

01:26:17.300 --> 01:26:20.019
<v Speaker 1>that the project doesn't die. So we're gonna

01:26:20.020 --> 01:26:21.780
<v Speaker 1>test all of that and roll it out.

01:26:21.780 --> 01:26:22.820
<v Speaker 1>So, yeah, roughly,

01:26:23.620 --> 01:26:25.219
<v Speaker 1>in the fall, things will open up a

01:26:25.219 --> 01:26:27.405
<v Speaker 1>lot. And if people wanna play over the

01:26:27.405 --> 01:26:29.324
<v Speaker 1>summer, they should subscribe now or they should

01:26:29.324 --> 01:26:32.284
<v Speaker 1>register now, and, we'll let them in at

01:26:32.284 --> 01:26:34.124
<v Speaker 1>a rate of 50 people per day.

01:26:35.565 --> 01:26:35.965
<v Speaker 1>And,

01:26:36.525 --> 01:26:37.804
<v Speaker 1>again, get up if you're listening.

01:26:41.290 --> 01:26:43.370
<v Speaker 1>Yeah. That's that's that's the that's the road

01:26:43.370 --> 01:26:43.929
<v Speaker 1>map.

01:26:44.250 --> 01:26:45.610
<v Speaker 1>Awesome. Pretty simple.

01:26:46.090 --> 01:26:47.610
<v Speaker 0>Well, I mean, I'm looking at this, and

01:26:47.610 --> 01:26:49.530
<v Speaker 0>I I don't think this is gonna finish.

01:26:49.530 --> 01:26:50.010
<v Speaker 0>So

01:26:51.210 --> 01:26:52.650
<v Speaker 0>I I I think it's What's the problem

01:26:52.650 --> 01:26:52.890
<v Speaker 1>now?

01:26:53.585 --> 01:26:55.265
<v Speaker 0>I think it's just my computer. I think

01:26:55.265 --> 01:26:57.185
<v Speaker 0>it's just going to slow. So

01:26:57.665 --> 01:27:00.065
<v Speaker 0>what I'll do is I'll play around with

01:27:00.065 --> 01:27:02.145
<v Speaker 0>this another day on another session and and

01:27:02.145 --> 01:27:03.345
<v Speaker 0>try and do something a bit more fun

01:27:03.345 --> 01:27:04.865
<v Speaker 0>with it. I've been meaning to migrate my

01:27:04.865 --> 01:27:06.785
<v Speaker 0>blog over to it anyway and actually deploy

01:27:06.785 --> 01:27:08.785
<v Speaker 0>it that way. So yeah.

01:27:10.090 --> 01:27:11.770
<v Speaker 0>I'll blame my computer for now. On the

01:27:11.770 --> 01:27:14.730
<v Speaker 1>fly Docker Compose to Kubernetes

01:27:16.570 --> 01:27:18.570
<v Speaker 1>synchronization or something like that.

01:27:19.450 --> 01:27:20.730
<v Speaker 1>Yeah. And then go to Lambda.

01:27:21.305 --> 01:27:23.385
<v Speaker 0>Can I deploy to Kubernetes yet? Does Dagger

01:27:23.385 --> 01:27:23.945
<v Speaker 0>do?

01:27:24.505 --> 01:27:26.344
<v Speaker 1>Yeah. Yeah. Yeah. You

01:27:26.985 --> 01:27:30.344
<v Speaker 1>can deploy to Kubernetes and ECS in parallel,

01:27:30.665 --> 01:27:32.105
<v Speaker 1>and you can have you can have cross

01:27:32.105 --> 01:27:33.705
<v Speaker 1>cloud deployments. You can have lots of cool

01:27:33.705 --> 01:27:36.580
<v Speaker 1>stuff. Alright. Well, clearly there's a lot more

01:27:36.580 --> 01:27:38.420
<v Speaker 0>fun to be had playing with Dagger, so

01:27:38.420 --> 01:27:39.700
<v Speaker 0>I'm sure this will not be the last

01:27:39.700 --> 01:27:41.540
<v Speaker 0>stream where I'm messing around with it. But

01:27:41.540 --> 01:27:43.140
<v Speaker 0>I wanna thank you both for joining me

01:27:43.140 --> 01:27:44.739
<v Speaker 0>today. It's been a bit of time just

01:27:45.060 --> 01:27:47.220
<v Speaker 0>sharing your knowledge or expertise or the history.

01:27:47.220 --> 01:27:48.765
<v Speaker 0>All of that is is really cool and

01:27:48.765 --> 01:27:50.685
<v Speaker 0>getting a look at how Dagger uses Q

01:27:50.685 --> 01:27:52.605
<v Speaker 0>and BuildKit was a whole lot of fun.

01:27:53.405 --> 01:27:55.485
<v Speaker 0>For the people watching Thanks for having us.

01:27:55.565 --> 01:27:57.245
<v Speaker 0>A last reminder, the Solomon is on the

01:27:57.245 --> 01:27:59.725
<v Speaker 0>podcast on Thursday. Check it out on Twitter.

01:28:00.730 --> 01:28:02.010
<v Speaker 0>Alright. Well,

01:28:02.730 --> 01:28:04.970
<v Speaker 0>thanks again. Any last words before we we

01:28:04.970 --> 01:28:06.010
<v Speaker 0>we set ways?

01:28:09.690 --> 01:28:11.530
<v Speaker 1>Come check it out. Write code. Try and

01:28:11.690 --> 01:28:13.930
<v Speaker 1>come and break it. Help us fix it.

01:28:15.125 --> 01:28:17.205
<v Speaker 0>Alright. Yeah. Check out Dagger. Thanks for your

01:28:17.205 --> 01:28:18.565
<v Speaker 1>time. Dagger.io.

01:28:18.565 --> 01:28:20.965
<v Speaker 0>Sign up. Have some fun. And again, thank

01:28:20.965 --> 01:28:21.684
<v Speaker 0>you. Have

01:28:22.085 --> 01:28:22.885
<v Speaker 0>a great day.

01:28:24.405 --> 01:28:25.124
<v Speaker 2>Bye.

01:28:25.285 --> 01:28:25.765
<v Speaker 2>Bye bye.
