WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 1d99eba7-d1cf-42e2-8b9a-b421f3d6eb65
Created: 2025-04-29T14:57:56.808Z
Duration: 1972.1818
Channels: 1

00:00:05.120 --> 00:00:05.840
<v Speaker 0>Hello,

00:00:06.240 --> 00:00:09.040
<v Speaker 0>and welcome back to the Rawkode Academy.

00:00:09.280 --> 00:00:11.200
<v Speaker 0>I'm your host, David Flanagan.

00:00:12.719 --> 00:00:14.799
<v Speaker 0>Today starts the first video

00:00:15.215 --> 00:00:18.494
<v Speaker 0>in my course, the complete guide to Kubescape.

00:00:19.535 --> 00:00:22.255
<v Speaker 0>This video is made possible by the amazing

00:00:22.255 --> 00:00:23.615
<v Speaker 0>team at ARMOR

00:00:23.855 --> 00:00:26.335
<v Speaker 0>who kindly sponsored my time so that I

00:00:26.335 --> 00:00:27.775
<v Speaker 0>could make this course for you.

00:00:29.450 --> 00:00:32.010
<v Speaker 0>So, what is Kubescape?

00:00:32.570 --> 00:00:33.450
<v Speaker 0>Kubescape

00:00:33.450 --> 00:00:37.290
<v Speaker 0>scans Kubernetes clusters, YAML files and Helm charts,

00:00:37.290 --> 00:00:38.970
<v Speaker 0>detecting misconfiguration

00:00:39.130 --> 00:00:40.650
<v Speaker 0>according to multiple frameworks.

00:00:41.565 --> 00:00:43.325
<v Speaker 0>Frameworks such as SIS,

00:00:43.485 --> 00:00:46.845
<v Speaker 0>NSA SISA, and MITRE ATT CK, and a

00:00:46.845 --> 00:00:47.565
<v Speaker 0>few more.

00:00:47.885 --> 00:00:49.565
<v Speaker 0>As well as misconfigurations,

00:00:49.565 --> 00:00:51.725
<v Speaker 0>it scans for software vulnerabilities

00:00:51.965 --> 00:00:55.004
<v Speaker 0>and RBAC role based access control violations.

00:00:56.070 --> 00:00:58.230
<v Speaker 0>You can do this at early stages of

00:00:58.230 --> 00:00:59.270
<v Speaker 0>your build pipeline,

00:00:59.750 --> 00:01:02.309
<v Speaker 0>as early as on your machine as you're

00:01:02.309 --> 00:01:03.430
<v Speaker 0>writing your code,

00:01:03.750 --> 00:01:05.430
<v Speaker 0>perhaps in CICD.

00:01:05.910 --> 00:01:07.910
<v Speaker 0>And today, I'll be taking a look at

00:01:07.910 --> 00:01:11.285
<v Speaker 0>running Kubescape and your cluster for continuous scanning

00:01:11.285 --> 00:01:12.325
<v Speaker 0>of misconfigurations

00:01:12.325 --> 00:01:13.525
<v Speaker 0>and vulnerabilities.

00:01:14.085 --> 00:01:16.245
<v Speaker 0>Now the answer isn't to pick one or

00:01:16.245 --> 00:01:19.125
<v Speaker 0>the other, but possibly all of the above.

00:01:20.165 --> 00:01:22.725
<v Speaker 0>Because Kubescape calculates a risk score instantly and

00:01:22.725 --> 00:01:24.085
<v Speaker 0>shows you trends over time.

00:01:24.740 --> 00:01:26.980
<v Speaker 0>The more you scan, the more benefits you're

00:01:26.980 --> 00:01:27.940
<v Speaker 0>going to get.

00:01:28.820 --> 00:01:30.660
<v Speaker 0>I've had a lot of fun experimenting with

00:01:30.660 --> 00:01:32.100
<v Speaker 0>Kubescape this past week,

00:01:32.340 --> 00:01:34.180
<v Speaker 0>and today's video will show you how to

00:01:34.180 --> 00:01:34.980
<v Speaker 0>get started,

00:01:35.380 --> 00:01:38.980
<v Speaker 0>continuously scan your Kubernetes cluster and cluster with

00:01:38.980 --> 00:01:40.100
<v Speaker 0>the Kubescape operator,

00:01:40.715 --> 00:01:44.315
<v Speaker 0>and use Kubescape Cloud to visualize and consume

00:01:44.315 --> 00:01:45.355
<v Speaker 0>that information.

00:01:46.235 --> 00:01:47.355
<v Speaker 0>Let's dive in.

00:01:48.315 --> 00:01:49.035
<v Speaker 0>Okay.

00:01:49.915 --> 00:01:52.315
<v Speaker 0>So how did we set up this cluster?

00:01:53.840 --> 00:01:56.960
<v Speaker 0>All this code is available online at github.com

00:01:56.960 --> 00:01:58.640
<v Speaker 0>slash Rawkode Academy.

00:01:58.799 --> 00:02:00.640
<v Speaker 0>There you will find a repository called the

00:02:00.640 --> 00:02:02.320
<v Speaker 0>Kubescape complete guide.

00:02:03.439 --> 00:02:05.439
<v Speaker 0>This gives you some Pulumi automation to spin

00:02:05.439 --> 00:02:07.920
<v Speaker 0>up a brand new cluster on AKS, EKS,

00:02:07.920 --> 00:02:08.639
<v Speaker 0>and JKE.

00:02:09.635 --> 00:02:11.635
<v Speaker 0>You can see here, I've got simple helper

00:02:11.635 --> 00:02:13.555
<v Speaker 0>functions to create each of these clusters.

00:02:13.875 --> 00:02:15.635
<v Speaker 0>Feel free to do this once for any

00:02:15.635 --> 00:02:17.555
<v Speaker 0>part of the Kubescape course that we're gonna

00:02:17.555 --> 00:02:20.035
<v Speaker 0>be working through today and subsequent days.

00:02:20.675 --> 00:02:22.915
<v Speaker 0>Feel free to reuse this automation if it

00:02:22.915 --> 00:02:23.635
<v Speaker 0>makes sense for you.

00:02:25.690 --> 00:02:27.849
<v Speaker 0>Now because we are going to use Kubescape

00:02:27.849 --> 00:02:30.650
<v Speaker 0>and cluster and Kubescape Cloud, we do need

00:02:30.650 --> 00:02:32.250
<v Speaker 0>to provide our account ID.

00:02:33.290 --> 00:02:34.970
<v Speaker 0>You can get this by logging in to

00:02:34.970 --> 00:02:37.290
<v Speaker 0>Kubescape Cloud and go to your settings page.

00:02:41.864 --> 00:02:44.584
<v Speaker 0>I'm storing this in a Pulumi secret value

00:02:44.584 --> 00:02:46.424
<v Speaker 0>so that it can be consumed and injected

00:02:46.424 --> 00:02:49.064
<v Speaker 0>into my Kubernetes clusters when I run Pulumi

00:02:49.064 --> 00:02:49.305
<v Speaker 0>app.

00:02:50.040 --> 00:02:51.960
<v Speaker 0>There's just a little bit of glue needed

00:02:51.960 --> 00:02:54.760
<v Speaker 0>to configure the provider to configure the providers

00:02:54.760 --> 00:02:56.600
<v Speaker 0>in a format that we need to do

00:02:56.600 --> 00:02:57.880
<v Speaker 0>multiplexing.

00:02:57.880 --> 00:03:00.440
<v Speaker 0>That is using Pulumi to deploy a single

00:03:00.440 --> 00:03:01.800
<v Speaker 0>resource to multiple clusters.

00:03:03.265 --> 00:03:04.705
<v Speaker 0>From here, we can look over each of

00:03:04.705 --> 00:03:05.585
<v Speaker 0>our providers

00:03:05.905 --> 00:03:08.145
<v Speaker 0>and I'm deploying Flux two,

00:03:08.704 --> 00:03:09.665
<v Speaker 0>Grafana,

00:03:10.224 --> 00:03:11.585
<v Speaker 0>and then Kubescape.

00:03:12.144 --> 00:03:14.305
<v Speaker 0>Why am I deploying Flux and Grafana?

00:03:14.305 --> 00:03:16.064
<v Speaker 0>Well, we just wanna see a few extra

00:03:16.064 --> 00:03:17.905
<v Speaker 0>data points as we scan our cluster for

00:03:17.905 --> 00:03:18.465
<v Speaker 0>Kubescape.

00:03:19.560 --> 00:03:22.840
<v Speaker 0>Kubescape provide a wonderful helm chart that allows

00:03:22.840 --> 00:03:24.760
<v Speaker 0>us to deploy their cloud operator.

00:03:25.720 --> 00:03:29.800
<v Speaker 0>You can find that at kubescape.github.i0/helm-charts.

00:03:29.880 --> 00:03:30.680
<v Speaker 0>The chart

00:03:30.840 --> 00:03:33.345
<v Speaker 0>is very easy to configure and that all

00:03:33.345 --> 00:03:35.425
<v Speaker 0>I really need to provide is my account

00:03:35.425 --> 00:03:37.505
<v Speaker 0>ID and the name of my cluster.

00:03:37.905 --> 00:03:40.225
<v Speaker 0>For my cluster name, that is AKS,

00:03:40.225 --> 00:03:41.105
<v Speaker 0>EKS,

00:03:41.105 --> 00:03:42.145
<v Speaker 0>and JKE.

00:03:42.465 --> 00:03:43.185
<v Speaker 0>Nice and simple.

00:03:44.310 --> 00:03:46.230
<v Speaker 0>When I run a Pulumi app, I'll have

00:03:46.230 --> 00:03:48.790
<v Speaker 0>three clusters all with Kubescape installed and I

00:03:48.790 --> 00:03:50.550
<v Speaker 0>can go straight to this and

00:03:50.630 --> 00:03:52.630
<v Speaker 0>I can go straight to Kubescape Cloud.

00:03:52.950 --> 00:03:54.390
<v Speaker 0>So let's take a look

00:03:54.950 --> 00:03:57.405
<v Speaker 0>at the Kubescape Cloud dashboard.

00:03:58.045 --> 00:04:00.365
<v Speaker 0>On this homepage, you'll see the three clusters

00:04:00.365 --> 00:04:01.965
<v Speaker 0>that I spun up in preparation.

00:04:02.045 --> 00:04:04.605
<v Speaker 0>AKS, EKS, GKE. Promise is the last time

00:04:04.605 --> 00:04:05.565
<v Speaker 0>I'm gonna say that.

00:04:06.125 --> 00:04:07.485
<v Speaker 0>We have two tables,

00:04:07.725 --> 00:04:10.685
<v Speaker 0>one for configuration risk and one for vulnerability

00:04:10.685 --> 00:04:11.245
<v Speaker 0>risk.

00:04:12.230 --> 00:04:14.870
<v Speaker 0>Configuration risk is going to show you

00:04:15.189 --> 00:04:18.389
<v Speaker 0>all the opportunities that you have to fix

00:04:18.389 --> 00:04:20.149
<v Speaker 0>your Kubernetes manifests

00:04:20.149 --> 00:04:22.789
<v Speaker 0>and helm charts to represent

00:04:22.789 --> 00:04:25.350
<v Speaker 0>what the industry considers best practice.

00:04:26.435 --> 00:04:29.075
<v Speaker 0>This comes from a bunch of different frameworks.

00:04:32.435 --> 00:04:35.955
<v Speaker 0>Like NSE, MITRE, DevOps best, SIS, ARMOR best

00:04:35.955 --> 00:04:37.395
<v Speaker 0>and all controls.

00:04:37.875 --> 00:04:39.235
<v Speaker 0>If we wanna take a look at the

00:04:39.235 --> 00:04:41.474
<v Speaker 0>SIS framework and see which controls fail, we

00:04:41.474 --> 00:04:43.310
<v Speaker 0>get so. If we want to look at

00:04:43.310 --> 00:04:44.110
<v Speaker 0>MITRE,

00:04:44.430 --> 00:04:45.150
<v Speaker 0>NSA,

00:04:45.470 --> 00:04:46.510
<v Speaker 0>and so forth.

00:04:47.150 --> 00:04:48.910
<v Speaker 0>If we want to look at all controls,

00:04:48.990 --> 00:04:49.630
<v Speaker 0>and

00:04:50.030 --> 00:04:53.230
<v Speaker 0>what this is changing as the violations

00:04:53.230 --> 00:04:56.325
<v Speaker 0>are control failures over time.

00:04:56.805 --> 00:04:58.485
<v Speaker 0>You can see here that when I first

00:04:58.485 --> 00:05:00.725
<v Speaker 0>deployed Kubescape to these clusters,

00:05:00.885 --> 00:05:04.405
<v Speaker 0>these violations across these clusters, can see JKE,

00:05:04.885 --> 00:05:05.765
<v Speaker 0>ETS here.

00:05:07.410 --> 00:05:09.970
<v Speaker 0>We move across and then the numbers change

00:05:09.970 --> 00:05:11.730
<v Speaker 0>and then the numbers cross and they change

00:05:11.730 --> 00:05:12.290
<v Speaker 0>again.

00:05:12.770 --> 00:05:15.330
<v Speaker 0>And theory, the longer that you have Kubescape

00:05:15.330 --> 00:05:16.130
<v Speaker 0>deployed

00:05:17.010 --> 00:05:19.250
<v Speaker 0>and the more that you're deploying to the

00:05:19.250 --> 00:05:21.010
<v Speaker 0>cluster, you know, we're we live in an

00:05:21.010 --> 00:05:23.975
<v Speaker 0>age of Kubernetes and micro It's not uncommon

00:05:23.975 --> 00:05:25.095
<v Speaker 0>for clusters

00:05:25.335 --> 00:05:28.695
<v Speaker 0>to have hundreds, maybe thousands, maybe even tens

00:05:28.695 --> 00:05:31.175
<v Speaker 0>of thousands of workloads on them. And those

00:05:31.175 --> 00:05:34.455
<v Speaker 0>workloads because the micro services evolve and deploy

00:05:34.455 --> 00:05:37.190
<v Speaker 0>quite fast. It's not uncommon to have tens

00:05:37.190 --> 00:05:39.270
<v Speaker 0>of thousands of deployments per day.

00:05:40.390 --> 00:05:42.390
<v Speaker 0>As those manifest change

00:05:42.470 --> 00:05:45.110
<v Speaker 0>as you're evolving them, maybe they're shared. Maybe

00:05:45.110 --> 00:05:46.790
<v Speaker 0>you have a common base that you use

00:05:46.790 --> 00:05:48.805
<v Speaker 0>to deploy all your web apps. And I

00:05:48.805 --> 00:05:51.125
<v Speaker 0>changed there. It could actually have a huge

00:05:51.365 --> 00:05:52.805
<v Speaker 0>cascading

00:05:53.044 --> 00:05:53.925
<v Speaker 0>failure

00:05:54.085 --> 00:05:56.245
<v Speaker 0>alert or at least failed controls.

00:05:56.884 --> 00:05:59.044
<v Speaker 0>And when they propagate down the stack.

00:05:59.444 --> 00:06:01.444
<v Speaker 0>So you can use this little table as

00:06:01.444 --> 00:06:02.724
<v Speaker 0>a way to see if you've got any

00:06:02.724 --> 00:06:04.520
<v Speaker 0>major incidents where you see a peak and

00:06:04.520 --> 00:06:06.040
<v Speaker 0>then a trough, which could be a break

00:06:06.040 --> 00:06:08.200
<v Speaker 0>and a fix of those manifests across your

00:06:08.200 --> 00:06:08.840
<v Speaker 0>cluster.

00:06:09.720 --> 00:06:11.400
<v Speaker 0>My table looks a bit weak and a

00:06:11.400 --> 00:06:13.320
<v Speaker 0>bit bland and that's just because these clusters

00:06:13.320 --> 00:06:15.560
<v Speaker 0>are not old and the agent itself hasn't

00:06:15.560 --> 00:06:17.560
<v Speaker 0>been running on it very long. However, there

00:06:17.560 --> 00:06:19.320
<v Speaker 0>are a few changes that we could see

00:06:19.615 --> 00:06:20.575
<v Speaker 0>over time.

00:06:21.695 --> 00:06:23.455
<v Speaker 0>On the right hand side, we have the

00:06:23.455 --> 00:06:25.775
<v Speaker 0>field controls and the color of the bar

00:06:25.775 --> 00:06:28.495
<v Speaker 0>indicates the cluster, which has the violation of

00:06:28.495 --> 00:06:29.695
<v Speaker 0>the field controls

00:06:29.775 --> 00:06:31.615
<v Speaker 0>and then the length of the bar as

00:06:31.615 --> 00:06:34.574
<v Speaker 0>the number of times this has been had

00:06:33.620 --> 00:06:34.820
<v Speaker 0>across your workloads.

00:06:35.940 --> 00:06:37.460
<v Speaker 0>And if we click on one,

00:06:38.100 --> 00:06:40.500
<v Speaker 0>we get taken to the cubescape documentation.

00:06:40.820 --> 00:06:42.820
<v Speaker 0>This is fantastic.

00:06:43.220 --> 00:06:45.460
<v Speaker 0>This tells me the ID number so here

00:06:45.460 --> 00:06:46.820
<v Speaker 0>we're looking at C50,

00:06:47.595 --> 00:06:49.515
<v Speaker 0>which is receipt, which

00:06:50.395 --> 00:06:53.515
<v Speaker 0>is receipt, which is resource CPU and limit

00:06:53.515 --> 00:06:54.235
<v Speaker 0>request.

00:06:54.395 --> 00:06:57.195
<v Speaker 0>The workloads in my cluster don't have this

00:06:57.195 --> 00:06:59.195
<v Speaker 0>by default, not all of them at least.

00:07:00.169 --> 00:07:02.090
<v Speaker 0>So we get which framework

00:07:02.330 --> 00:07:04.490
<v Speaker 0>that's real applies to us. So DevOps best

00:07:04.490 --> 00:07:06.570
<v Speaker 0>practice all controls in the animal scan. The

00:07:06.570 --> 00:07:08.410
<v Speaker 0>severity of this is high. Obviously, if we

00:07:08.410 --> 00:07:10.889
<v Speaker 0>don't special, if we don't specify

00:07:10.889 --> 00:07:12.330
<v Speaker 0>resource limits

00:07:12.650 --> 00:07:14.810
<v Speaker 0>and request for CPU memory,

00:07:15.525 --> 00:07:17.925
<v Speaker 0>Then our applications won't schedule properly, they could

00:07:17.925 --> 00:07:20.565
<v Speaker 0>potentially consume more memory than we want them

00:07:20.565 --> 00:07:21.125
<v Speaker 0>to

00:07:21.525 --> 00:07:23.445
<v Speaker 0>and saturate that for other workloads on the

00:07:23.445 --> 00:07:24.005
<v Speaker 0>cluster.

00:07:25.205 --> 00:07:27.125
<v Speaker 0>We get a description telling us why this

00:07:27.125 --> 00:07:28.005
<v Speaker 0>control is important.

00:07:29.230 --> 00:07:31.470
<v Speaker 0>We also get related resources. These are the

00:07:31.470 --> 00:07:35.230
<v Speaker 0>resources that this control can be detected on.

00:07:35.230 --> 00:07:37.630
<v Speaker 0>So cron job daemon set deployment pod jobs

00:07:37.630 --> 00:07:39.710
<v Speaker 0>replica set and stable sets of course.

00:07:40.990 --> 00:07:42.590
<v Speaker 0>And then we have a remediation path.

00:07:43.145 --> 00:07:44.585
<v Speaker 0>If you want to get rid of this

00:07:44.585 --> 00:07:46.985
<v Speaker 0>field control, set a CPU limit or use

00:07:46.985 --> 00:07:49.865
<v Speaker 0>exception mechanism to avoid unnecessary notifications.

00:07:50.905 --> 00:07:52.505
<v Speaker 0>And then we have the configuration that we

00:07:52.505 --> 00:07:55.065
<v Speaker 0>can change on those resources to make this

00:07:55.065 --> 00:07:56.345
<v Speaker 0>field control

00:07:56.425 --> 00:07:57.145
<v Speaker 0>a

00:07:57.384 --> 00:08:00.050
<v Speaker 0>successful control past control. I'm not sure, not

00:08:00.050 --> 00:08:01.650
<v Speaker 0>a failed control, at least.

00:08:02.530 --> 00:08:04.610
<v Speaker 0>Let's pick up one more. This is from

00:08:04.610 --> 00:08:05.810
<v Speaker 0>a different cluster.

00:08:06.610 --> 00:08:08.690
<v Speaker 0>We have C0034

00:08:08.690 --> 00:08:11.035
<v Speaker 0>automatic mapping of a service account.

00:08:11.435 --> 00:08:13.835
<v Speaker 0>This is our best MSA all controls in

00:08:13.835 --> 00:08:15.915
<v Speaker 0>the animal scan with a medium severity.

00:08:16.235 --> 00:08:16.875
<v Speaker 0>Now,

00:08:17.194 --> 00:08:19.754
<v Speaker 0>all my clusters run on the default for

00:08:19.754 --> 00:08:22.235
<v Speaker 0>the cloud provider. So AKS and EKS and

00:08:22.235 --> 00:08:24.074
<v Speaker 0>JKE all run. I said that was the

00:08:24.074 --> 00:08:25.840
<v Speaker 0>last thing I was gonna say. All run

00:08:25.840 --> 00:08:27.840
<v Speaker 0>one twenty three by default. So these are

00:08:27.840 --> 00:08:29.680
<v Speaker 0>one twenty three clusters, which means

00:08:29.920 --> 00:08:32.720
<v Speaker 0>they're not one twenty five clusters Kubernetes one

00:08:32.720 --> 00:08:34.640
<v Speaker 0>twenty five is when the automatic mounting of

00:08:34.640 --> 00:08:36.159
<v Speaker 0>a service account was disabled.

00:08:37.214 --> 00:08:39.615
<v Speaker 0>So in any cluster older than that, when

00:08:39.615 --> 00:08:41.934
<v Speaker 0>you don't realize it, all your pods have

00:08:41.934 --> 00:08:44.415
<v Speaker 0>credentials to speak to the Kubernetes API server,

00:08:44.415 --> 00:08:46.175
<v Speaker 0>but some level of permissions.

00:08:46.334 --> 00:08:47.774
<v Speaker 0>And this is not something that you really

00:08:47.774 --> 00:08:49.055
<v Speaker 0>want all of your workloads to be able

00:08:49.055 --> 00:08:51.320
<v Speaker 0>to do. Why should NGINX be speaking to

00:08:51.320 --> 00:08:53.240
<v Speaker 0>my Kubernetes API server.

00:08:54.520 --> 00:08:56.520
<v Speaker 0>So we have to release the resources, this

00:08:56.520 --> 00:08:58.600
<v Speaker 0>is everything that can run a pod essentially

00:08:59.800 --> 00:09:01.400
<v Speaker 0>tells you about the control test and then

00:09:01.400 --> 00:09:03.960
<v Speaker 0>the remediation as to this to disable

00:09:04.585 --> 00:09:06.585
<v Speaker 0>the automatic mounting, and it gives you an

00:09:06.585 --> 00:09:08.745
<v Speaker 0>example of what that looks like. So we

00:09:08.745 --> 00:09:11.785
<v Speaker 0>set automatic service account token to falls on

00:09:11.785 --> 00:09:14.105
<v Speaker 0>our service account. You can even do this

00:09:14.105 --> 00:09:15.865
<v Speaker 0>on a workload at self.

00:09:16.185 --> 00:09:18.510
<v Speaker 0>So you have a couple of options.

00:09:19.630 --> 00:09:22.190
<v Speaker 0>So this first configuration table is really great.

00:09:22.190 --> 00:09:24.190
<v Speaker 0>We see those sales controls over time. We

00:09:24.190 --> 00:09:27.470
<v Speaker 0>can monitor for events with cascading failures.

00:09:28.030 --> 00:09:30.030
<v Speaker 0>And we have the ability to just get

00:09:30.030 --> 00:09:32.165
<v Speaker 0>a quick view of the top five field

00:09:32.165 --> 00:09:35.285
<v Speaker 0>control, the top five field controls so that

00:09:35.285 --> 00:09:37.685
<v Speaker 0>we can start to reduce that number

00:09:38.565 --> 00:09:41.365
<v Speaker 0>with the controls that are potentially easiest to

00:09:41.365 --> 00:09:41.925
<v Speaker 0>fix.

00:09:43.524 --> 00:09:46.324
<v Speaker 0>The second table is a vulnerability risk.

00:09:46.850 --> 00:09:49.570
<v Speaker 0>This is now moving beyond misconfiguration

00:09:49.570 --> 00:09:52.450
<v Speaker 0>and actually scanning the images that our application

00:09:52.450 --> 00:09:54.130
<v Speaker 0>drawn on within our cluster.

00:09:54.690 --> 00:09:57.490
<v Speaker 0>This is scanning for known CVEs.

00:09:57.890 --> 00:09:59.970
<v Speaker 0>CVEs are plentiful and bountiful

00:10:01.085 --> 00:10:03.005
<v Speaker 0>And they just keep on coming. As you

00:10:03.005 --> 00:10:05.885
<v Speaker 0>can see here across our workloads, we've got

00:10:05.885 --> 00:10:08.205
<v Speaker 0>36 critical 165

00:10:08.205 --> 00:10:12.125
<v Speaker 0>high 190 medium 36 low, a whole bunch

00:10:12.125 --> 00:10:13.965
<v Speaker 0>of negligible and some unknowns.

00:10:16.160 --> 00:10:19.120
<v Speaker 0>So, this could be very difficult to prioritize

00:10:19.120 --> 00:10:21.279
<v Speaker 0>an action. See this time and time again

00:10:21.279 --> 00:10:22.880
<v Speaker 0>as a work with organizations.

00:10:23.519 --> 00:10:25.279
<v Speaker 0>Some of them have taken steps to do

00:10:25.279 --> 00:10:28.160
<v Speaker 0>some scanning, but the remediation factor is difficult

00:10:28.160 --> 00:10:28.720
<v Speaker 0>because

00:10:29.185 --> 00:10:30.785
<v Speaker 0>there are just so many of them by

00:10:30.785 --> 00:10:32.625
<v Speaker 0>default and some of these base images. If

00:10:32.625 --> 00:10:34.705
<v Speaker 0>you're using base have been to base

00:10:35.265 --> 00:10:37.345
<v Speaker 0>Red Hat or Santos, etcetera.

00:10:37.665 --> 00:10:40.625
<v Speaker 0>CVEs are there, they can fast and unfortunately

00:10:40.625 --> 00:10:42.545
<v Speaker 0>the base layers aren't being built quick enough

00:10:42.545 --> 00:10:44.225
<v Speaker 0>to maintain or keep up with the changes.

00:10:45.520 --> 00:10:46.160
<v Speaker 0>Now,

00:10:46.400 --> 00:10:48.000
<v Speaker 0>we can use the critical and high as

00:10:48.000 --> 00:10:49.920
<v Speaker 0>a benchmark to say we probably want to

00:10:49.920 --> 00:10:52.320
<v Speaker 0>fix these, but doesn't mean you can neglect

00:10:52.320 --> 00:10:54.640
<v Speaker 0>the mediums will those negligible and unknown. They

00:10:54.640 --> 00:10:58.240
<v Speaker 0>still require some manual scanning someone to review

00:10:58.240 --> 00:10:59.120
<v Speaker 0>and understand.

00:10:59.855 --> 00:11:01.295
<v Speaker 0>Can be fixed those.

00:11:01.535 --> 00:11:03.855
<v Speaker 0>Could be the 90 mediums are actually relatively

00:11:03.855 --> 00:11:05.695
<v Speaker 0>easy left and you can wipe them off

00:11:05.695 --> 00:11:07.615
<v Speaker 0>the face of the air for one change.

00:11:08.015 --> 00:11:10.495
<v Speaker 0>Unlikely but potential and plausible.

00:11:11.215 --> 00:11:13.615
<v Speaker 0>Now even at the critical and high, we're

00:11:13.615 --> 00:11:15.935
<v Speaker 0>still close to 200

00:11:16.839 --> 00:11:18.040
<v Speaker 0>field controls.

00:11:18.920 --> 00:11:19.560
<v Speaker 0>So,

00:11:20.040 --> 00:11:22.040
<v Speaker 0>like we can with a configuration one, we

00:11:22.040 --> 00:11:23.720
<v Speaker 0>can see the change over time and we

00:11:23.720 --> 00:11:25.959
<v Speaker 0>have the top CVEs on the right. What

00:11:25.959 --> 00:11:27.800
<v Speaker 0>I love about this table is it has

00:11:27.800 --> 00:11:29.160
<v Speaker 0>55 WL.

00:11:29.715 --> 00:11:32.355
<v Speaker 0>This is showing us that 55 workloads are

00:11:32.355 --> 00:11:34.035
<v Speaker 0>affected by the CVE.

00:11:34.675 --> 00:11:36.675
<v Speaker 0>Now, we can drill in on this by

00:11:36.675 --> 00:11:38.355
<v Speaker 0>clicking on it, and we'll be able to

00:11:38.355 --> 00:11:41.795
<v Speaker 0>see the workloads that this affects. Obviously we've

00:11:41.795 --> 00:11:43.795
<v Speaker 0>got 55 so it's quite a lot.

00:11:44.675 --> 00:11:44.995
<v Speaker 0>And,

00:11:45.740 --> 00:11:48.139
<v Speaker 0>But we can see that flux is affected.

00:11:48.860 --> 00:11:49.899
<v Speaker 0>Grafana

00:11:49.980 --> 00:11:52.060
<v Speaker 0>flux flux flux

00:11:52.620 --> 00:11:53.980
<v Speaker 0>ECR stuff.

00:11:54.940 --> 00:11:56.380
<v Speaker 0>CubeScape itself.

00:11:57.339 --> 00:11:58.139
<v Speaker 0>Microsoft.

00:11:58.365 --> 00:12:00.845
<v Speaker 0>So this is a very broad spectrum CVE

00:12:00.845 --> 00:12:02.685
<v Speaker 0>that affects a lot of base images. It

00:12:02.685 --> 00:12:04.205
<v Speaker 0>could be they'll rely on the same base

00:12:04.205 --> 00:12:06.125
<v Speaker 0>layer and they all need updated. It's hard

00:12:06.125 --> 00:12:07.645
<v Speaker 0>to tell. However,

00:12:08.205 --> 00:12:10.285
<v Speaker 0>what we can do is filter on the

00:12:10.285 --> 00:12:10.765
<v Speaker 0>top here.

00:12:11.640 --> 00:12:13.560
<v Speaker 0>One, we can turn on this flag which

00:12:13.560 --> 00:12:15.320
<v Speaker 0>tells us which of these have remote code

00:12:15.320 --> 00:12:16.120
<v Speaker 0>execution.

00:12:16.440 --> 00:12:17.960
<v Speaker 0>These are the ones that we probably want

00:12:17.960 --> 00:12:19.560
<v Speaker 0>to try and fix first even if they're

00:12:19.560 --> 00:12:20.200
<v Speaker 0>medium,

00:12:20.520 --> 00:12:22.440
<v Speaker 0>even if a low, even though a low

00:12:22.440 --> 00:12:25.400
<v Speaker 0>RCE probably wouldn't be low because these are

00:12:25.400 --> 00:12:26.520
<v Speaker 0>the ones that allow

00:12:26.765 --> 00:12:29.725
<v Speaker 0>somebody potentially to run commands within our cluster.

00:12:29.965 --> 00:12:32.445
<v Speaker 0>Now you might be thinking, well, my pods

00:12:32.445 --> 00:12:34.765
<v Speaker 0>are publicly available that these images are on.

00:12:34.765 --> 00:12:37.725
<v Speaker 0>However, remember lateral movement within a cluster as

00:12:37.725 --> 00:12:39.565
<v Speaker 0>an attack vector that you need to be

00:12:39.565 --> 00:12:41.750
<v Speaker 0>very careful with. So even if you feel

00:12:41.750 --> 00:12:43.990
<v Speaker 0>that your workload isn't available on the public

00:12:43.990 --> 00:12:46.790
<v Speaker 0>Internet, if you have any, any workload available

00:12:46.790 --> 00:12:48.070
<v Speaker 0>on the public Internet

00:12:48.230 --> 00:12:50.710
<v Speaker 0>lateral movement is there. Be cautious.

00:12:51.190 --> 00:12:54.390
<v Speaker 0>However, we can see that we can fix

00:12:54.295 --> 00:12:56.855
<v Speaker 0>or there are six criticals to have an

00:12:56.855 --> 00:12:58.535
<v Speaker 0>RCE 11 high.

00:12:58.855 --> 00:13:00.375
<v Speaker 0>Those are the ones I probably want to

00:13:00.375 --> 00:13:01.655
<v Speaker 0>prioritize first.

00:13:01.895 --> 00:13:04.855
<v Speaker 0>However, there's one more toggle on the screen.

00:13:05.255 --> 00:13:07.575
<v Speaker 0>And it's as there are effects available.

00:13:08.135 --> 00:13:09.655
<v Speaker 0>That's as your low hanging fruit.

00:13:10.440 --> 00:13:12.600
<v Speaker 0>The golden path here is that the ones

00:13:12.600 --> 00:13:14.920
<v Speaker 0>with RCEs have effects available and we can

00:13:14.920 --> 00:13:16.120
<v Speaker 0>knock them out together.

00:13:16.360 --> 00:13:17.640
<v Speaker 0>And what we see is that of the

00:13:17.640 --> 00:13:20.120
<v Speaker 0>criticals we have 19 that have effects we

00:13:20.120 --> 00:13:22.280
<v Speaker 0>have 44 that have effects on high and

00:13:22.280 --> 00:13:24.655
<v Speaker 0>78 mediums with effects.

00:13:24.735 --> 00:13:26.815
<v Speaker 0>So we're able to drastically reduce these numbers

00:13:26.815 --> 00:13:28.895
<v Speaker 0>as long as we know which workloads and

00:13:28.895 --> 00:13:30.175
<v Speaker 0>how to apply the fact.

00:13:30.895 --> 00:13:32.815
<v Speaker 0>And that's why scrolling down now becomes even

00:13:32.815 --> 00:13:33.615
<v Speaker 0>more important.

00:13:33.935 --> 00:13:35.455
<v Speaker 0>What we can do here is take a

00:13:35.455 --> 00:13:37.295
<v Speaker 0>look at this path here.

00:13:38.495 --> 00:13:39.215
<v Speaker 0>So, on

00:13:39.990 --> 00:13:41.830
<v Speaker 0>this GKE image,

00:13:41.830 --> 00:13:45.830
<v Speaker 0>10 criticals, eight fixes, 20 highs, 11 fixes,

00:13:45.910 --> 00:13:48.870
<v Speaker 0>15 mediums, eight fixes, and then the lows.

00:13:49.110 --> 00:13:50.630
<v Speaker 0>So let's click on this.

00:13:50.870 --> 00:13:52.870
<v Speaker 0>And from here, we'll see the image scanner

00:13:52.870 --> 00:13:55.030
<v Speaker 0>report for this net D image from GKE.

00:13:55.675 --> 00:13:57.515
<v Speaker 0>We can scroll down to the bottom and

00:13:57.515 --> 00:13:59.675
<v Speaker 0>it now shows us the individual CVEs that

00:13:59.675 --> 00:14:00.955
<v Speaker 0>have the fixes available.

00:14:01.435 --> 00:14:03.275
<v Speaker 0>We can see that the first CVE twenty

00:14:03.275 --> 00:14:05.515
<v Speaker 0>one three nine nine nine was in libc

00:14:05.515 --> 00:14:06.475
<v Speaker 0>dash bin.

00:14:06.955 --> 00:14:08.555
<v Speaker 0>We can see here that it's a high

00:14:08.555 --> 00:14:11.360
<v Speaker 0>severity fix available and the upgrade path is

00:14:11.360 --> 00:14:13.120
<v Speaker 0>to change from 23113

00:14:13.120 --> 00:14:16.240
<v Speaker 0>dev 11 u three to u four.

00:14:16.560 --> 00:14:18.640
<v Speaker 0>And in fact, all the fixes here

00:14:19.120 --> 00:14:21.520
<v Speaker 0>are a small update to the debian package.

00:14:22.555 --> 00:14:24.635
<v Speaker 0>So, while I can't

00:14:24.875 --> 00:14:27.515
<v Speaker 0>change the net DGK image myself.

00:14:27.595 --> 00:14:29.355
<v Speaker 0>Let's assume this is my own workload and

00:14:29.355 --> 00:14:30.155
<v Speaker 0>the cluster.

00:14:30.315 --> 00:14:32.555
<v Speaker 0>And right now, in fact it's very common

00:14:32.555 --> 00:14:35.035
<v Speaker 0>for organizations to all share a common base

00:14:35.035 --> 00:14:36.875
<v Speaker 0>layer, if they're using a base layer and

00:14:36.875 --> 00:14:39.490
<v Speaker 0>not something this release or scratch, etc. But

00:14:39.490 --> 00:14:41.970
<v Speaker 0>if you are using Alpine or Ubuntu or

00:14:41.970 --> 00:14:44.610
<v Speaker 0>Santos as that base, it may be quite

00:14:44.610 --> 00:14:46.449
<v Speaker 0>common for these same

00:14:47.170 --> 00:14:48.050
<v Speaker 0>issues

00:14:48.050 --> 00:14:50.705
<v Speaker 0>and failed controls and the vulnerability scan to

00:14:50.705 --> 00:14:52.705
<v Speaker 0>be quite common and persistent across all of

00:14:52.705 --> 00:14:54.465
<v Speaker 0>your images and it could be that rebuilding

00:14:54.465 --> 00:14:57.345
<v Speaker 0>that base layer is a very, not easy,

00:14:57.345 --> 00:14:59.665
<v Speaker 0>but maybe trivial way to roll out that

00:14:59.665 --> 00:15:01.585
<v Speaker 0>fix fast across your entire fleet.

00:15:02.640 --> 00:15:05.280
<v Speaker 0>So what Kubescape is doing from this dashboard

00:15:05.280 --> 00:15:05.920
<v Speaker 0>view

00:15:06.320 --> 00:15:09.200
<v Speaker 0>with the both the tables for configuration vulnerabilities,

00:15:09.200 --> 00:15:11.440
<v Speaker 0>given me a way to identify

00:15:11.840 --> 00:15:13.680
<v Speaker 0>the issues that deserve my attention.

00:15:14.735 --> 00:15:16.735
<v Speaker 0>By using the top links on the right,

00:15:16.735 --> 00:15:18.175
<v Speaker 0>we can drill that down to the ones

00:15:18.175 --> 00:15:19.774
<v Speaker 0>that have the most bang for buck or

00:15:19.774 --> 00:15:21.695
<v Speaker 0>the ones that affect the most workloads.

00:15:22.255 --> 00:15:24.415
<v Speaker 0>From there, we can identify the images that

00:15:24.415 --> 00:15:26.975
<v Speaker 0>we need to be looking at and hopefully

00:15:26.975 --> 00:15:29.855
<v Speaker 0>using this the nice toggles with RCEs and

00:15:29.855 --> 00:15:31.920
<v Speaker 0>have fix these, we can identify the ones

00:15:31.920 --> 00:15:33.760
<v Speaker 0>that deserve our attention first.

00:15:34.480 --> 00:15:36.880
<v Speaker 0>From there, we can plan out our remediation

00:15:36.880 --> 00:15:39.760
<v Speaker 0>path as a platform team or SRE team

00:15:39.760 --> 00:15:42.400
<v Speaker 0>and roll out those fixes across our fleet.

00:15:42.880 --> 00:15:45.520
<v Speaker 0>And that all took less than ten minutes.

00:15:46.295 --> 00:15:48.935
<v Speaker 0>So I'm really impressed with Kubescape Cloud so

00:15:48.935 --> 00:15:49.415
<v Speaker 0>far.

00:15:49.735 --> 00:15:50.935
<v Speaker 0>The fact that I was able to find

00:15:50.935 --> 00:15:53.095
<v Speaker 0>a dashboard, analyze my infrastructure,

00:15:53.095 --> 00:15:54.295
<v Speaker 0>find RCEs,

00:15:54.295 --> 00:15:55.175
<v Speaker 0>have fixes,

00:15:55.415 --> 00:15:57.495
<v Speaker 0>work out some sort of remediation path in

00:15:57.495 --> 00:16:00.070
<v Speaker 0>my head very very quickly it's a testament

00:16:00.070 --> 00:16:02.790
<v Speaker 0>to how good the UI is delivering

00:16:03.110 --> 00:16:05.589
<v Speaker 0>what is a vast amount of information and

00:16:05.589 --> 00:16:07.029
<v Speaker 0>a very considerable way.

00:16:07.350 --> 00:16:08.630
<v Speaker 0>The Kubescape team.

00:16:08.949 --> 00:16:10.470
<v Speaker 0>Thumbs up. Great work.

00:16:11.829 --> 00:16:13.990
<v Speaker 0>So we drilled down a little bit there,

00:16:14.205 --> 00:16:17.085
<v Speaker 0>going from the top CVEs into image scanning.

00:16:17.725 --> 00:16:19.245
<v Speaker 0>But let's take a look at the config

00:16:19.245 --> 00:16:19.885
<v Speaker 0>scanning.

00:16:20.685 --> 00:16:22.925
<v Speaker 0>From here, we get an overview of all

00:16:22.925 --> 00:16:24.765
<v Speaker 0>of our clusters and the frameworks that we

00:16:24.765 --> 00:16:27.405
<v Speaker 0>choose to pay attention to. I have specifically

00:16:27.405 --> 00:16:29.325
<v Speaker 0>configured each of my clusters

00:16:29.420 --> 00:16:31.420
<v Speaker 0>to give me the most information or at

00:16:31.420 --> 00:16:33.819
<v Speaker 0>the most upfront information about NSE,

00:16:33.819 --> 00:16:35.339
<v Speaker 0>MITRE, and SIS.

00:16:36.220 --> 00:16:38.860
<v Speaker 0>I can click on any cluster and change

00:16:38.860 --> 00:16:41.100
<v Speaker 0>that. We have the ability to select free.

00:16:41.985 --> 00:16:44.145
<v Speaker 0>So I can see turn off my turn

00:16:44.385 --> 00:16:46.785
<v Speaker 0>and let's turn on our best.

00:16:47.105 --> 00:16:49.185
<v Speaker 0>Now when I come back here, I have

00:16:49.185 --> 00:16:51.505
<v Speaker 0>NSE that's a normal best.

00:16:51.825 --> 00:16:53.105
<v Speaker 0>And I can do this in a mall,

00:16:53.105 --> 00:16:54.305
<v Speaker 0>whether I want them all to be the

00:16:54.305 --> 00:16:55.584
<v Speaker 0>same or I want them all to be

00:16:55.584 --> 00:16:57.990
<v Speaker 0>different. It's up to you. I found that

00:16:57.990 --> 00:17:00.310
<v Speaker 0>quite, that it works quite well

00:17:00.710 --> 00:17:02.470
<v Speaker 0>to have some all the same to give

00:17:02.470 --> 00:17:04.630
<v Speaker 0>me a same pane of glass to all

00:17:04.630 --> 00:17:05.510
<v Speaker 0>my clusters.

00:17:05.990 --> 00:17:07.510
<v Speaker 0>And in fact, what we can see here

00:17:07.510 --> 00:17:10.285
<v Speaker 0>with the default managed Kubernetes experience across the

00:17:10.285 --> 00:17:12.125
<v Speaker 0>three major clouds, I won't say their name

00:17:12.125 --> 00:17:12.684
<v Speaker 0>again,

00:17:13.244 --> 00:17:15.404
<v Speaker 0>is that AKS has

00:17:15.964 --> 00:17:18.044
<v Speaker 0>three NSE field controls,

00:17:18.204 --> 00:17:20.925
<v Speaker 0>nine sys field controls and three Arnold best

00:17:20.925 --> 00:17:21.885
<v Speaker 0>practice fields controls.

00:17:23.020 --> 00:17:25.980
<v Speaker 0>The Amazon one has two NSA, 10 sys

00:17:25.980 --> 00:17:27.179
<v Speaker 0>and two ARMOR.

00:17:27.339 --> 00:17:29.900
<v Speaker 0>And the Googly one has six NSA, 17

00:17:29.900 --> 00:17:31.340
<v Speaker 0>sys and five ARMOR.

00:17:31.580 --> 00:17:33.580
<v Speaker 0>So that default out of the box experience

00:17:33.580 --> 00:17:35.900
<v Speaker 0>is different across all of the clusters.

00:17:36.685 --> 00:17:38.525
<v Speaker 0>Now I don't know if that should make

00:17:38.525 --> 00:17:39.245
<v Speaker 0>any

00:17:40.365 --> 00:17:42.285
<v Speaker 0>if that should have any importance in your

00:17:42.285 --> 00:17:44.445
<v Speaker 0>decision making. I know I'm more likely still

00:17:44.445 --> 00:17:46.684
<v Speaker 0>to go for the Google one when required.

00:17:46.925 --> 00:17:49.725
<v Speaker 0>But as security conscious decisions are one that

00:17:49.725 --> 00:17:51.830
<v Speaker 0>you have to make, that may provide a

00:17:51.830 --> 00:17:53.750
<v Speaker 0>good framework for helping make that decision.

00:17:54.950 --> 00:17:56.630
<v Speaker 0>When we click on a cluster,

00:17:57.110 --> 00:17:58.870
<v Speaker 0>we get to see the score over time

00:17:58.870 --> 00:17:59.510
<v Speaker 0>again.

00:17:59.990 --> 00:18:01.670
<v Speaker 0>But not only that we can have a

00:18:01.670 --> 00:18:04.070
<v Speaker 0>nice big list of the tables of all

00:18:04.070 --> 00:18:05.670
<v Speaker 0>of those fields controls.

00:18:06.390 --> 00:18:08.605
<v Speaker 0>We can sort them by whatever is important

00:18:08.605 --> 00:18:09.325
<v Speaker 0>to us.

00:18:09.565 --> 00:18:11.325
<v Speaker 0>So maybe we want to tackle all the

00:18:11.325 --> 00:18:12.684
<v Speaker 0>critical past first,

00:18:13.085 --> 00:18:15.405
<v Speaker 0>or perhaps we just want to

00:18:15.725 --> 00:18:18.445
<v Speaker 0>see which ones have the most failures. So

00:18:18.445 --> 00:18:19.565
<v Speaker 0>it could be here.

00:18:20.125 --> 00:18:22.520
<v Speaker 0>We have the automatic mapping of a service

00:18:22.520 --> 00:18:25.240
<v Speaker 0>account into 18 or we have 18 failures

00:18:25.240 --> 00:18:27.559
<v Speaker 0>of this check across this

00:18:27.880 --> 00:18:29.159
<v Speaker 0>Microsoft cluster.

00:18:30.440 --> 00:18:32.679
<v Speaker 0>So, we can click on this, and we'll

00:18:32.679 --> 00:18:34.920
<v Speaker 0>see all the resources that this fails on.

00:18:35.225 --> 00:18:37.865
<v Speaker 0>We can see that cert manager has a

00:18:37.865 --> 00:18:40.345
<v Speaker 0>job and a service account with these properties.

00:18:40.585 --> 00:18:42.585
<v Speaker 0>We can see in our default namespace, we've

00:18:42.585 --> 00:18:44.105
<v Speaker 0>got all the flux controllers.

00:18:44.585 --> 00:18:46.825
<v Speaker 0>And we can actually add exceptions if we

00:18:46.825 --> 00:18:47.544
<v Speaker 0>want to.

00:18:47.945 --> 00:18:50.265
<v Speaker 0>So say we've made the decision that hey,

00:18:52.240 --> 00:18:54.000
<v Speaker 0>flux is gonna be flux.

00:18:54.559 --> 00:18:56.480
<v Speaker 0>And we don't mind that has that token.

00:18:56.480 --> 00:18:58.480
<v Speaker 0>We just turn on the default namespace or

00:18:58.480 --> 00:19:00.720
<v Speaker 0>the flux system namespace depends on how you

00:19:00.720 --> 00:19:01.600
<v Speaker 0>have it deployed.

00:19:02.080 --> 00:19:03.760
<v Speaker 0>Or maybe it's a cert manager, we're gonna

00:19:03.760 --> 00:19:05.755
<v Speaker 0>let cert manager cert manager. So we're going

00:19:05.755 --> 00:19:08.154
<v Speaker 0>to apply an exemption for all of that.

00:19:08.795 --> 00:19:10.715
<v Speaker 0>We have the ability to pick and choose,

00:19:10.715 --> 00:19:12.315
<v Speaker 0>but it could be that we actually want

00:19:12.315 --> 00:19:13.355
<v Speaker 0>to remediate.

00:19:17.755 --> 00:19:20.395
<v Speaker 0>So we can click on the fix

00:19:20.220 --> 00:19:23.020
<v Speaker 0>and it'll take us to the YAML and

00:19:23.020 --> 00:19:24.539
<v Speaker 0>it shows us the line

00:19:26.140 --> 00:19:28.860
<v Speaker 0>that we need to add to our cluster.

00:19:31.100 --> 00:19:33.500
<v Speaker 0>Now I'm not going to download this YAML

00:19:33.500 --> 00:19:35.595
<v Speaker 0>or copy this object. However,

00:19:36.715 --> 00:19:38.635
<v Speaker 0>this is a very simple

00:19:38.875 --> 00:19:39.995
<v Speaker 0>field control.

00:19:40.475 --> 00:19:41.835
<v Speaker 0>Not all of them are going to be

00:19:41.835 --> 00:19:43.835
<v Speaker 0>fixed by one line of YAML.

00:19:44.315 --> 00:19:46.875
<v Speaker 0>For those more complicated cases where it might

00:19:46.875 --> 00:19:49.515
<v Speaker 0>need four or five ten twenty who knows,

00:19:49.515 --> 00:19:50.315
<v Speaker 0>lines of YAML.

00:19:50.720 --> 00:19:52.400
<v Speaker 0>This view is going to be really good

00:19:52.400 --> 00:19:54.000
<v Speaker 0>and that we can copy and download it

00:19:54.000 --> 00:19:55.520
<v Speaker 0>if we want. Can apply a depth to

00:19:55.520 --> 00:19:57.760
<v Speaker 0>existing resource and get the change that we

00:19:57.760 --> 00:20:00.320
<v Speaker 0>need. Although to be honest, that's as doing

00:20:00.320 --> 00:20:02.240
<v Speaker 0>a defecation to existing resource.

00:20:02.240 --> 00:20:04.655
<v Speaker 0>So you could probably just copy and paste

00:20:04.655 --> 00:20:06.175
<v Speaker 0>the lines that are green and off you

00:20:06.175 --> 00:20:06.655
<v Speaker 0>go.

00:20:07.935 --> 00:20:09.535
<v Speaker 0>Tells you which lines are different and we

00:20:09.535 --> 00:20:11.375
<v Speaker 0>have the ability to share this with people

00:20:11.375 --> 00:20:12.415
<v Speaker 0>if we want.

00:20:13.375 --> 00:20:15.899
<v Speaker 0>We're going to move on. So it's really

00:20:15.899 --> 00:20:19.100
<v Speaker 0>good having this insights and to the configuration

00:20:19.100 --> 00:20:22.140
<v Speaker 0>changes across my cluster. We can also initiate

00:20:22.140 --> 00:20:23.820
<v Speaker 0>a new scan for our cluster if we

00:20:23.820 --> 00:20:25.899
<v Speaker 0>want by clicking the scan button. We can

00:20:25.899 --> 00:20:27.419
<v Speaker 0>tell the frameworks that we wish to scan

00:20:27.419 --> 00:20:29.595
<v Speaker 0>for this time. And as you'll see I

00:20:29.595 --> 00:20:32.635
<v Speaker 0>actually have a scheduled scan for 8AM

00:20:32.635 --> 00:20:35.515
<v Speaker 0>every single day running all frameworks.

00:20:35.835 --> 00:20:38.395
<v Speaker 0>So a lot of flexibility and power into

00:20:38.395 --> 00:20:40.315
<v Speaker 0>the way that you interact with the scanning

00:20:40.315 --> 00:20:41.559
<v Speaker 0>within your cluster. Cluster.

00:20:41.960 --> 00:20:43.640
<v Speaker 0>And this is because of the way that

00:20:43.640 --> 00:20:46.520
<v Speaker 0>we are deploying Kubescape and cluster rather than

00:20:46.520 --> 00:20:48.200
<v Speaker 0>running it as a local process.

00:20:48.600 --> 00:20:50.040
<v Speaker 0>Now don't worry if you do want to

00:20:50.040 --> 00:20:52.120
<v Speaker 0>run Kubescape as a local CLI. I'm going

00:20:52.120 --> 00:20:54.455
<v Speaker 0>to be covering that next along with CICD

00:20:54.455 --> 00:20:57.895
<v Speaker 0>integration in my next video. So stay tuned.

00:20:59.175 --> 00:21:01.095
<v Speaker 0>One last thing I'd like to cover as

00:21:01.095 --> 00:21:03.255
<v Speaker 0>part of the configuration scanning is that we're

00:21:03.255 --> 00:21:05.095
<v Speaker 0>looking at it as the lens of which

00:21:05.095 --> 00:21:06.535
<v Speaker 0>controls have failed.

00:21:07.495 --> 00:21:07.815
<v Speaker 0>However,

00:21:08.730 --> 00:21:10.650
<v Speaker 0>it's also very useful to take a look

00:21:10.650 --> 00:21:12.170
<v Speaker 0>at which resources

00:21:12.170 --> 00:21:14.889
<v Speaker 0>have violations or failed controls.

00:21:15.450 --> 00:21:17.530
<v Speaker 0>Now we can sort by the kind, which

00:21:17.530 --> 00:21:19.610
<v Speaker 0>may not be terribly useful.

00:21:19.770 --> 00:21:21.210
<v Speaker 0>And if I see a conflict map of

00:21:21.210 --> 00:21:23.050
<v Speaker 0>a failed control that would be madly amusing.

00:21:24.245 --> 00:21:26.245
<v Speaker 0>We may wish to sort by which resources

00:21:26.245 --> 00:21:28.084
<v Speaker 0>have the most field controls.

00:21:28.565 --> 00:21:30.644
<v Speaker 0>And as we can see here, it's my

00:21:30.644 --> 00:21:34.164
<v Speaker 0>cert manager, which has nine field controls.

00:21:34.804 --> 00:21:36.840
<v Speaker 0>I can click on the field controls, and

00:21:36.840 --> 00:21:38.520
<v Speaker 0>I can see we've

00:21:38.520 --> 00:21:40.919
<v Speaker 0>got no memory limits. We've got no CPU

00:21:40.919 --> 00:21:43.879
<v Speaker 0>limits, no resource limits ingress and egress blocked

00:21:44.919 --> 00:21:47.640
<v Speaker 0>or not blocked, I guess, automatic service account

00:21:47.640 --> 00:21:50.280
<v Speaker 0>mapping. We have images from any registry we're

00:21:50.280 --> 00:21:52.825
<v Speaker 0>not restricting that within a low list. There's

00:21:52.825 --> 00:21:54.585
<v Speaker 0>no probes, and it does not have an

00:21:54.585 --> 00:21:56.424
<v Speaker 0>immutable container file system.

00:21:57.625 --> 00:22:00.264
<v Speaker 0>Now knowing how certain other works maybe we

00:22:00.264 --> 00:22:02.024
<v Speaker 0>know that it's never going to have an

00:22:02.024 --> 00:22:05.065
<v Speaker 0>immutable file system. So let's exempt it. And

00:22:05.280 --> 00:22:06.960
<v Speaker 0>maybe it doesn't have a way to do

00:22:06.960 --> 00:22:09.120
<v Speaker 0>a resonance probe so we'll exempt that too.

00:22:09.280 --> 00:22:10.400
<v Speaker 0>And we click close.

00:22:11.280 --> 00:22:13.040
<v Speaker 0>If we want to get more information on

00:22:13.040 --> 00:22:14.880
<v Speaker 0>the fix we click this banner.

00:22:16.800 --> 00:22:18.160
<v Speaker 0>And now you can see we've got changes

00:22:18.160 --> 00:22:19.120
<v Speaker 0>at lane 55,

00:22:19.575 --> 00:22:21.815
<v Speaker 0>which is to add limits and requests for

00:22:21.815 --> 00:22:22.534
<v Speaker 0>memory.

00:22:22.695 --> 00:22:23.815
<v Speaker 0>And the next one.

00:22:25.174 --> 00:22:27.255
<v Speaker 0>Oh, we can add the read only file

00:22:27.255 --> 00:22:27.974
<v Speaker 0>system.

00:22:29.095 --> 00:22:30.455
<v Speaker 0>Line 61.

00:22:31.335 --> 00:22:32.855
<v Speaker 0>We can add a readiness probe.

00:22:35.269 --> 00:22:37.110
<v Speaker 0>We can turn off the automatic of the

00:22:37.110 --> 00:22:38.149
<v Speaker 0>service account.

00:22:38.630 --> 00:22:41.269
<v Speaker 0>So, this ability to see how to make

00:22:41.269 --> 00:22:43.830
<v Speaker 0>changes to existing resources on a way to

00:22:43.830 --> 00:22:45.590
<v Speaker 0>fix the fields control I think is an

00:22:45.590 --> 00:22:46.709
<v Speaker 0>invaluable tool.

00:22:46.950 --> 00:22:47.990
<v Speaker 0>So let's jump back.

00:22:48.705 --> 00:22:50.865
<v Speaker 0>We've taken a look at how to identify

00:22:50.865 --> 00:22:51.825
<v Speaker 0>misconfigurations

00:22:51.825 --> 00:22:53.904
<v Speaker 0>from the lens of the controls that are

00:22:53.904 --> 00:22:56.945
<v Speaker 0>failing with us get to prioritize

00:22:56.945 --> 00:22:59.104
<v Speaker 0>the controls that are important to us,

00:22:59.585 --> 00:23:01.424
<v Speaker 0>or potentially the controls that we know we

00:23:01.424 --> 00:23:02.640
<v Speaker 0>can fix quickly.

00:23:03.920 --> 00:23:05.600
<v Speaker 0>We also have the ability to find the

00:23:05.600 --> 00:23:07.520
<v Speaker 0>workloads within our cluster that are failing the

00:23:07.520 --> 00:23:09.600
<v Speaker 0>most. So maybe we can identify ways to

00:23:09.600 --> 00:23:11.440
<v Speaker 0>get them up to scratch or exempt them

00:23:11.440 --> 00:23:13.680
<v Speaker 0>as the workloads out with our control. And

00:23:13.680 --> 00:23:16.480
<v Speaker 0>a managed Kubernetes cluster, you cannot modify a

00:23:16.480 --> 00:23:18.294
<v Speaker 0>lot of the workload running on the cube

00:23:18.294 --> 00:23:19.494
<v Speaker 0>system namespace.

00:23:19.575 --> 00:23:21.654
<v Speaker 0>So you're just gonna have to rely on

00:23:21.654 --> 00:23:22.934
<v Speaker 0>the managed provider

00:23:23.975 --> 00:23:25.174
<v Speaker 0>to do their job.

00:23:25.735 --> 00:23:28.375
<v Speaker 0>So exempt them if you can and if

00:23:28.375 --> 00:23:28.855
<v Speaker 0>you must.

00:23:31.059 --> 00:23:32.980
<v Speaker 0>Alright. We have one more feature that I

00:23:32.980 --> 00:23:35.780
<v Speaker 0>wanna cover on Kubescape Cloud and that is

00:23:35.780 --> 00:23:37.379
<v Speaker 0>the RBAC Visualizer.

00:23:38.260 --> 00:23:39.300
<v Speaker 0>Understanding

00:23:39.300 --> 00:23:42.580
<v Speaker 0>the scope and breadth of role based access

00:23:41.925 --> 00:23:45.045
<v Speaker 0>control within your Kubernetes cluster is a hell

00:23:45.045 --> 00:23:46.005
<v Speaker 0>of a challenge.

00:23:46.325 --> 00:23:49.525
<v Speaker 0>So many service accounts, something called groups, who

00:23:49.525 --> 00:23:50.645
<v Speaker 0>knows what those are.

00:23:51.525 --> 00:23:52.325
<v Speaker 0>Roles,

00:23:52.325 --> 00:23:55.365
<v Speaker 0>cluster roles, cluster role bindings, role bindings.

00:23:56.210 --> 00:23:57.890
<v Speaker 0>The things that you need to know to

00:23:57.890 --> 00:24:00.130
<v Speaker 0>understand who can do what within your cluster

00:24:00.130 --> 00:24:02.530
<v Speaker 0>requires a lot of access to Kubescape control

00:24:02.530 --> 00:24:03.809
<v Speaker 0>on the command line.

00:24:04.050 --> 00:24:06.770
<v Speaker 0>And maybe you're using Kubescape control off, can

00:24:06.770 --> 00:24:09.330
<v Speaker 0>I? But there is an easier way.

00:24:10.915 --> 00:24:12.675
<v Speaker 0>Enter the RBAC

00:24:12.675 --> 00:24:13.635
<v Speaker 0>visualizer.

00:24:14.035 --> 00:24:15.955
<v Speaker 0>From here, we can see it. Let's take

00:24:15.955 --> 00:24:17.795
<v Speaker 0>a look at one of our clusters.

00:24:18.755 --> 00:24:21.155
<v Speaker 0>I'll start off by selecting the Amazon one.

00:24:21.795 --> 00:24:23.635
<v Speaker 0>Now we get this overview of all the

00:24:23.635 --> 00:24:25.909
<v Speaker 0>service accounts, groups, roles

00:24:26.070 --> 00:24:27.429
<v Speaker 0>and the verbs

00:24:27.510 --> 00:24:29.510
<v Speaker 0>that they can act on the resources they

00:24:29.510 --> 00:24:30.549
<v Speaker 0>can act upon.

00:24:31.590 --> 00:24:33.350
<v Speaker 0>Now by default you get this kind of

00:24:33.350 --> 00:24:34.629
<v Speaker 0>broken down look

00:24:34.950 --> 00:24:37.750
<v Speaker 0>and you can see here in this box

00:24:37.294 --> 00:24:39.215
<v Speaker 0>we have the default namespace.

00:24:39.215 --> 00:24:40.734
<v Speaker 0>In fact, if I zoom in,

00:24:40.895 --> 00:24:42.494
<v Speaker 0>you'll see NS default.

00:24:42.975 --> 00:24:45.135
<v Speaker 0>And this, as we've seen from previous parts

00:24:45.135 --> 00:24:47.534
<v Speaker 0>of Kubescape is where I'm running my flux

00:24:47.534 --> 00:24:48.575
<v Speaker 0>CD deployment.

00:24:49.970 --> 00:24:52.210
<v Speaker 0>If we pop over here, we have another

00:24:52.210 --> 00:24:54.930
<v Speaker 0>box and this time it's our Kubescape box.

00:24:54.930 --> 00:24:57.250
<v Speaker 0>This is our Kubescape namespace.

00:24:57.410 --> 00:25:00.210
<v Speaker 0>We'll see the workloads, the service accounts and

00:25:00.210 --> 00:25:02.450
<v Speaker 0>the roles that they have access to and

00:25:03.965 --> 00:25:05.245
<v Speaker 0>the resources

00:25:05.885 --> 00:25:07.325
<v Speaker 0>that I can act upon.

00:25:08.125 --> 00:25:10.125
<v Speaker 0>So we get this lovely visual

00:25:10.365 --> 00:25:11.245
<v Speaker 0>description

00:25:11.245 --> 00:25:13.645
<v Speaker 0>or way to interact and describe I guess

00:25:13.645 --> 00:25:14.525
<v Speaker 0>a map

00:25:14.765 --> 00:25:15.485
<v Speaker 0>of

00:25:15.725 --> 00:25:18.520
<v Speaker 0>all the important RBAC stuff within our cluster.

00:25:19.080 --> 00:25:21.080
<v Speaker 0>Now what's cool is that we have the

00:25:21.080 --> 00:25:23.800
<v Speaker 0>ability to tweak the way this is laid

00:25:23.800 --> 00:25:26.120
<v Speaker 0>out. So first we can say it less

00:25:26.120 --> 00:25:28.520
<v Speaker 0>group by verb. Now at this kind of

00:25:28.520 --> 00:25:30.680
<v Speaker 0>overview, that's not gonna do a lot. So

00:25:30.680 --> 00:25:31.800
<v Speaker 0>we'll just turn that off.

00:25:32.445 --> 00:25:34.605
<v Speaker 0>What we'll do a lot is layout by

00:25:34.605 --> 00:25:35.325
<v Speaker 0>type.

00:25:36.684 --> 00:25:39.485
<v Speaker 0>Now we can have a kind of top

00:25:39.485 --> 00:25:42.764
<v Speaker 0>down map of the workloads within our cluster,

00:25:43.164 --> 00:25:45.085
<v Speaker 0>the service accounts that they consume

00:25:46.289 --> 00:25:47.889
<v Speaker 0>and we have the roles

00:25:48.049 --> 00:25:50.049
<v Speaker 0>that those service accounts have.

00:25:50.529 --> 00:25:51.409
<v Speaker 0>We see

00:25:51.970 --> 00:25:54.849
<v Speaker 0>that this CRD controller role

00:25:55.010 --> 00:25:57.570
<v Speaker 0>is used by all of the service accounts

00:25:57.570 --> 00:25:59.570
<v Speaker 0>for all of the flux CD components

00:26:00.095 --> 00:26:03.375
<v Speaker 0>And actually flux being that it is a

00:26:03.375 --> 00:26:05.455
<v Speaker 0>get up to operator and a Kubernetes cluster

00:26:05.455 --> 00:26:07.455
<v Speaker 0>with super special privileges

00:26:07.775 --> 00:26:09.054
<v Speaker 0>can star

00:26:09.535 --> 00:26:10.975
<v Speaker 0>on all resources.

00:26:11.135 --> 00:26:13.215
<v Speaker 0>It's all stars all the time.

00:26:27.735 --> 00:26:29.815
<v Speaker 0>In our cluster. Oh, that's as we expect.

00:26:29.815 --> 00:26:31.654
<v Speaker 0>So not really worth calling out.

00:26:32.295 --> 00:26:33.975
<v Speaker 0>Let's take a look at something else. What

00:26:33.975 --> 00:26:35.494
<v Speaker 0>about Kubescape itself?

00:26:35.655 --> 00:26:37.655
<v Speaker 0>Well, we have our Kubescape

00:26:37.655 --> 00:26:38.374
<v Speaker 0>workloads.

00:26:38.535 --> 00:26:40.615
<v Speaker 0>We got the staple set deployment, some more

00:26:40.615 --> 00:26:42.615
<v Speaker 0>deployments. We've got the service accounts that they

00:26:42.615 --> 00:26:44.590
<v Speaker 0>use. So we've got the Kubescape,

00:26:44.590 --> 00:26:47.309
<v Speaker 0>Kubescape SA and the KSSC.

00:26:48.270 --> 00:26:51.070
<v Speaker 0>This uses the KSSC rules, which has the

00:26:51.070 --> 00:26:52.830
<v Speaker 0>ability to star

00:26:52.830 --> 00:26:54.350
<v Speaker 0>on cron jobs.

00:26:54.750 --> 00:26:57.230
<v Speaker 0>And we've got the ability to star on

00:26:57.230 --> 00:26:58.190
<v Speaker 0>config maps.

00:27:00.105 --> 00:27:02.185
<v Speaker 0>Over on the other side, we've got this

00:27:02.185 --> 00:27:04.905
<v Speaker 0>service account, which is the SA rules or

00:27:04.905 --> 00:27:07.385
<v Speaker 0>Kubescape SA rules which has star on namespaces

00:27:07.385 --> 00:27:09.225
<v Speaker 0>and star on demon sets.

00:27:09.545 --> 00:27:11.865
<v Speaker 0>So as you can see, my cluster and

00:27:11.865 --> 00:27:14.400
<v Speaker 0>this default managed configuration with just a couple

00:27:14.400 --> 00:27:16.320
<v Speaker 0>of workloads doesn't really have a lot of

00:27:16.320 --> 00:27:18.000
<v Speaker 0>interest in our back history.

00:27:18.320 --> 00:27:20.240
<v Speaker 0>But it doesn't mean that we can't get

00:27:20.240 --> 00:27:22.240
<v Speaker 0>some useful insights anyway.

00:27:23.120 --> 00:27:25.680
<v Speaker 0>We have this who can drop down. So

00:27:25.680 --> 00:27:28.240
<v Speaker 0>what if we want to know who can

00:27:30.035 --> 00:27:30.914
<v Speaker 0>create

00:27:35.235 --> 00:27:36.034
<v Speaker 0>pods?

00:27:40.035 --> 00:27:41.475
<v Speaker 0>We click the who can confirm,

00:27:42.299 --> 00:27:44.059
<v Speaker 0>It shows us the pods could be created

00:27:44.059 --> 00:27:46.220
<v Speaker 0>by all of these rules. We can see

00:27:46.220 --> 00:27:48.460
<v Speaker 0>some system controller rules which is as we

00:27:48.460 --> 00:27:51.179
<v Speaker 0>would expect especially for the replica set controller.

00:27:51.659 --> 00:27:54.059
<v Speaker 0>And we have the daemon set controller too.

00:27:54.059 --> 00:27:55.980
<v Speaker 0>So the only thing that can create pods

00:27:55.980 --> 00:27:57.955
<v Speaker 0>are the controllers which should actually be able

00:27:57.955 --> 00:27:58.994
<v Speaker 0>to create pods.

00:27:59.235 --> 00:28:01.394
<v Speaker 0>This is good. This is exactly what we

00:28:01.394 --> 00:28:02.354
<v Speaker 0>wanted to see.

00:28:02.595 --> 00:28:04.594
<v Speaker 0>So let's clear the who can

00:28:09.075 --> 00:28:10.114
<v Speaker 0>and clear

00:28:10.115 --> 00:28:10.514
<v Speaker 0>pods.

00:28:12.110 --> 00:28:15.070
<v Speaker 0>We also have this query drop down. This

00:28:15.070 --> 00:28:17.230
<v Speaker 0>query drop down shows you common queries that

00:28:17.230 --> 00:28:18.749
<v Speaker 0>are useful for understanding

00:28:21.230 --> 00:28:23.549
<v Speaker 0>common queries that people may want to ask

00:28:23.549 --> 00:28:25.405
<v Speaker 0>of the R back within our cluster.

00:28:25.965 --> 00:28:27.645
<v Speaker 0>One that I often like to ask is

00:28:27.645 --> 00:28:29.885
<v Speaker 0>who can exec into a pod.

00:28:30.205 --> 00:28:31.965
<v Speaker 0>And if we scroll down here, we'll see

00:28:31.965 --> 00:28:32.765
<v Speaker 0>a query

00:28:33.005 --> 00:28:35.005
<v Speaker 0>show who can exec into pods.

00:28:36.045 --> 00:28:37.565
<v Speaker 0>And when we run this, we see that

00:28:37.565 --> 00:28:39.885
<v Speaker 0>cluster admin can, which of course you can,

00:28:40.110 --> 00:28:42.030
<v Speaker 0>Cluster admin is the cluster admin role within

00:28:42.030 --> 00:28:42.830
<v Speaker 0>the cluster.

00:28:43.390 --> 00:28:45.389
<v Speaker 0>But also the CRD controller.

00:28:47.549 --> 00:28:50.350
<v Speaker 0>So our flux deployment actually gives

00:28:50.910 --> 00:28:53.390
<v Speaker 0>a bunch of its controllers, the source controller,

00:28:53.390 --> 00:28:55.815
<v Speaker 0>the notification controller, the image controller,

00:28:55.975 --> 00:28:57.815
<v Speaker 0>the image automation controller and the helm controller

00:28:57.815 --> 00:29:00.615
<v Speaker 0>and the customized controller, the ability to execute

00:29:00.615 --> 00:29:02.054
<v Speaker 0>commands within parts.

00:29:02.855 --> 00:29:03.655
<v Speaker 0>Again,

00:29:03.655 --> 00:29:05.575
<v Speaker 0>given the way the flux works, we'll probably

00:29:05.575 --> 00:29:07.015
<v Speaker 0>write this off as being okay.

00:29:07.500 --> 00:29:09.580
<v Speaker 0>But if you've any other workloads in there

00:29:09.580 --> 00:29:12.060
<v Speaker 0>to have the ability to exec executes

00:29:12.060 --> 00:29:13.899
<v Speaker 0>commands within a pod.

00:29:14.060 --> 00:29:16.059
<v Speaker 0>That's something that you would want to identify.

00:29:17.420 --> 00:29:19.740
<v Speaker 0>Another common query could be, do I have

00:29:19.740 --> 00:29:21.580
<v Speaker 0>any rules my cluster that are not being

00:29:21.580 --> 00:29:24.375
<v Speaker 0>used, Maybe I can actually clean some of

00:29:24.375 --> 00:29:27.494
<v Speaker 0>this stuff up. Well, we can say show

00:29:27.655 --> 00:29:29.014
<v Speaker 0>unassigned rules.

00:29:30.054 --> 00:29:32.615
<v Speaker 0>These are all system rules, so not things

00:29:32.615 --> 00:29:34.870
<v Speaker 0>we really need to worry about, but again,

00:29:35.190 --> 00:29:37.670
<v Speaker 0>any more production like cluster and we'll do

00:29:37.670 --> 00:29:39.190
<v Speaker 0>some work on one of my real clusters

00:29:39.190 --> 00:29:40.710
<v Speaker 0>and a common video soon.

00:29:41.190 --> 00:29:43.750
<v Speaker 0>We can actually identify when maybe we've had

00:29:43.750 --> 00:29:46.230
<v Speaker 0>workloads that created roles and we've removed them,

00:29:46.230 --> 00:29:47.910
<v Speaker 0>but the roles have been left around.

00:29:48.605 --> 00:29:51.485
<v Speaker 0>Those lying around in your cluster are potential

00:29:51.965 --> 00:29:54.285
<v Speaker 0>attack vectors for other peep for people that

00:29:54.285 --> 00:29:56.205
<v Speaker 0>have access to your Kubernetes API.

00:29:56.765 --> 00:29:58.924
<v Speaker 0>So it's generally best to clean them up.

00:29:58.925 --> 00:30:00.445
<v Speaker 0>The last feature I'll show up in our

00:30:00.445 --> 00:30:01.325
<v Speaker 0>back visualizer

00:30:01.530 --> 00:30:03.850
<v Speaker 0>is the investigate button. This is when you

00:30:03.850 --> 00:30:06.410
<v Speaker 0>want to work out how one individual resource

00:30:06.410 --> 00:30:07.850
<v Speaker 0>or a few resources

00:30:08.170 --> 00:30:10.010
<v Speaker 0>work or collaborate with other things in the

00:30:10.010 --> 00:30:10.570
<v Speaker 0>system.

00:30:11.050 --> 00:30:12.970
<v Speaker 0>So I'm going to start by clicking clear

00:30:12.970 --> 00:30:14.970
<v Speaker 0>and then I'm going to click investigate.

00:30:15.450 --> 00:30:17.395
<v Speaker 0>From here, I get a list of of

00:30:17.395 --> 00:30:19.795
<v Speaker 0>subjects, roles, resources, workloads, role by the verbs

00:30:19.795 --> 00:30:21.315
<v Speaker 0>and API groups.

00:30:21.635 --> 00:30:23.315
<v Speaker 0>Now it could be that I want to

00:30:23.315 --> 00:30:26.115
<v Speaker 0>understand the Flux CD API group.

00:30:29.630 --> 00:30:31.550
<v Speaker 0>I can do customize,

00:30:31.710 --> 00:30:32.430
<v Speaker 0>source,

00:30:32.670 --> 00:30:34.110
<v Speaker 0>helm, notifications,

00:30:34.110 --> 00:30:34.990
<v Speaker 0>and image.

00:30:36.110 --> 00:30:39.870
<v Speaker 0>Not only that, I'm curious about a workload.

00:30:39.950 --> 00:30:41.950
<v Speaker 0>Maybe I want to understand how the helm

00:30:41.950 --> 00:30:43.230
<v Speaker 0>controller functions.

00:30:44.375 --> 00:30:46.215
<v Speaker 0>From here, we can see

00:30:47.815 --> 00:30:49.975
<v Speaker 0>the CRD controller role

00:30:50.295 --> 00:30:53.095
<v Speaker 0>and the resources it can act upon because

00:30:53.095 --> 00:30:54.375
<v Speaker 0>of the filter

00:30:56.535 --> 00:30:57.815
<v Speaker 0>on the API group.

00:30:58.880 --> 00:31:01.600
<v Speaker 0>We can see the deployment helm controller

00:31:01.600 --> 00:31:03.360
<v Speaker 0>because I added it as part of the

00:31:03.360 --> 00:31:04.640
<v Speaker 0>workload selector.

00:31:05.520 --> 00:31:08.000
<v Speaker 0>We can now explore just these resources with

00:31:08.000 --> 00:31:11.040
<v Speaker 0>the deployment helm deployment controller. I can right

00:31:11.040 --> 00:31:12.800
<v Speaker 0>click and say, well, show me your service

00:31:12.800 --> 00:31:13.200
<v Speaker 0>accounts.

00:31:14.145 --> 00:31:16.225
<v Speaker 0>And we can see the service account here.

00:31:17.105 --> 00:31:18.865
<v Speaker 0>I could also right click and say show

00:31:18.865 --> 00:31:20.305
<v Speaker 0>related resources.

00:31:20.305 --> 00:31:21.745
<v Speaker 0>And now it pulls in

00:31:21.985 --> 00:31:24.385
<v Speaker 0>both the roles that it has access to

00:31:24.785 --> 00:31:26.385
<v Speaker 0>and all the resources

00:31:26.545 --> 00:31:27.425
<v Speaker 0>that it can work,

00:31:28.150 --> 00:31:29.750
<v Speaker 0>that it can act upon.

00:31:30.470 --> 00:31:33.110
<v Speaker 0>So now I have a pretty good understanding

00:31:35.270 --> 00:31:38.310
<v Speaker 0>of the permission model for the helm controller

00:31:39.845 --> 00:31:42.005
<v Speaker 0>and just a few clicks.

00:31:43.605 --> 00:31:45.284
<v Speaker 0>So that's been today's video.

00:31:45.845 --> 00:31:48.325
<v Speaker 0>Taking a look at Kubescape Cloud by running

00:31:48.325 --> 00:31:50.405
<v Speaker 0>Kubescape in my clusters

00:31:50.405 --> 00:31:52.965
<v Speaker 0>across all three major cloud providers with a

00:31:52.965 --> 00:31:54.565
<v Speaker 0>couple of default workloads.

00:31:57.790 --> 00:31:59.870
<v Speaker 0>I've been playing with Kubescape and Kubescape Cloud

00:31:59.870 --> 00:32:01.470
<v Speaker 0>for the last week and I've gotta say

00:32:01.470 --> 00:32:02.669
<v Speaker 0>I'm really impressed.

00:32:04.190 --> 00:32:06.269
<v Speaker 0>You get a lot of bang for buck

00:32:06.510 --> 00:32:08.590
<v Speaker 0>with just a simple Helm deployed to the

00:32:08.590 --> 00:32:11.805
<v Speaker 0>cluster passing on one simple value. From there,

00:32:11.805 --> 00:32:13.965
<v Speaker 0>I'm able to understand misconfiguration,

00:32:13.965 --> 00:32:14.765
<v Speaker 0>vulnerabilities

00:32:14.765 --> 00:32:15.885
<v Speaker 0>and RBAC.

00:32:15.965 --> 00:32:17.885
<v Speaker 0>These are three things that are notoriously and

00:32:17.885 --> 00:32:20.924
<v Speaker 0>infamously hard to understand within the Kubernetes context.

00:32:21.485 --> 00:32:24.450
<v Speaker 0>It's a lot of information that needs visual

00:32:24.450 --> 00:32:27.009
<v Speaker 0>paradigms to be able to get fast understanding.

00:32:27.570 --> 00:32:29.489
<v Speaker 0>So I hope you find this video useful.

00:32:29.650 --> 00:32:31.889
<v Speaker 0>Go check out Kubescape Cloud and Kubescape.

00:32:32.370 --> 00:32:34.049
<v Speaker 0>We'll be back in a few days with

00:32:34.049 --> 00:32:36.610
<v Speaker 0>another video looking at Kubescape CLI and how

00:32:36.610 --> 00:32:38.929
<v Speaker 0>we integrate that into CICD pipelines.

00:32:39.865 --> 00:32:41.945
<v Speaker 0>Until next time, I'll see you soon.
