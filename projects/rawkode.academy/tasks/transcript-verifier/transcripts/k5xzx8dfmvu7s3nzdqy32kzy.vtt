WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: b5511d82-d04c-4a57-948b-7754c581e499
Created: 2025-04-29T14:10:40.147Z
Duration: 1107.4412
Channels: 1

00:00:00.000 --> 00:00:03.040
<v Speaker 0>Hello. Welcome back to Portainer in production.

00:00:03.199 --> 00:00:05.759
<v Speaker 0>Today, we're gonna take a look at running

00:00:05.759 --> 00:00:08.160
<v Speaker 0>and using Portainer on Kubernetes

00:00:08.160 --> 00:00:09.839
<v Speaker 0>to manage Kubernetes.

00:00:09.920 --> 00:00:11.519
<v Speaker 0>Before we get into the fun stuff, we

00:00:11.519 --> 00:00:13.920
<v Speaker 0>have to get Portainer installed to our Kubernetes

00:00:13.920 --> 00:00:16.324
<v Speaker 0>cluster. There are two ways to do so.

00:00:16.484 --> 00:00:18.085
<v Speaker 0>One, with Helm.

00:00:18.244 --> 00:00:20.965
<v Speaker 0>Two, with customize. Let's take a look at

00:00:20.965 --> 00:00:22.404
<v Speaker 0>both approaches now.

00:00:22.645 --> 00:00:24.005
<v Speaker 0>So the first thing I'll say is the

00:00:24.005 --> 00:00:27.445
<v Speaker 0>documentation on Portainer's website is fantastic. So if

00:00:27.445 --> 00:00:29.044
<v Speaker 0>you ever get stuck or need some help,

00:00:29.530 --> 00:00:31.610
<v Speaker 0>feel free to drop into the comment section,

00:00:31.610 --> 00:00:33.450
<v Speaker 0>but also go check the docs.

00:00:34.410 --> 00:00:36.170
<v Speaker 0>The the docs will tell you that you

00:00:36.170 --> 00:00:38.490
<v Speaker 0>have to ensure you have a default storage

00:00:38.490 --> 00:00:40.170
<v Speaker 0>class available in your cluster.

00:00:40.410 --> 00:00:42.250
<v Speaker 0>You have to check there's a default storage

00:00:42.250 --> 00:00:45.385
<v Speaker 0>class available within your cluster. Why? Well, because

00:00:45.385 --> 00:00:48.025
<v Speaker 0>Portainer has state. Both the Helm chart and

00:00:48.025 --> 00:00:51.145
<v Speaker 0>the customized approach to the installation will provision

00:00:51.145 --> 00:00:53.945
<v Speaker 0>a persistent volume claim which must be satisfied

00:00:53.945 --> 00:00:56.665
<v Speaker 0>before Portainer will ever get healthy. In order

00:00:56.665 --> 00:00:58.665
<v Speaker 0>to check if you have a default storage

00:00:58.665 --> 00:01:00.980
<v Speaker 0>class, run kubectl get

00:01:00.980 --> 00:01:04.420
<v Speaker 0>s c or autocomplete it to storage classes.

00:01:05.540 --> 00:01:07.780
<v Speaker 0>What you're looking for here is, well, anything

00:01:07.780 --> 00:01:09.619
<v Speaker 0>on this list is a good start. For

00:01:09.619 --> 00:01:12.020
<v Speaker 0>Docker desktop, you'll see something like host path,

00:01:12.525 --> 00:01:14.125
<v Speaker 0>and we need to ensure that we have

00:01:14.125 --> 00:01:15.965
<v Speaker 0>default and parenthesis.

00:01:16.445 --> 00:01:17.885
<v Speaker 0>This just means that we don't need to

00:01:17.885 --> 00:01:20.525
<v Speaker 0>provide a storage class name when we provision

00:01:20.525 --> 00:01:23.325
<v Speaker 0>or request a persistent volume claim with the

00:01:23.325 --> 00:01:25.005
<v Speaker 0>cluster. Next up,

00:01:25.485 --> 00:01:27.245
<v Speaker 0>we do a helm install.

00:01:28.520 --> 00:01:30.840
<v Speaker 0>You click on deploy with helm, you'll see

00:01:30.840 --> 00:01:32.360
<v Speaker 0>that you have to do a helm repository

00:01:32.360 --> 00:01:34.360
<v Speaker 0>add pertainer and point it to the helm

00:01:34.360 --> 00:01:35.479
<v Speaker 0>chart repository

00:01:35.560 --> 00:01:37.479
<v Speaker 0>and a helm repo update.

00:01:38.200 --> 00:01:40.759
<v Speaker 0>If you're unsure, you can run helm repo

00:01:40.759 --> 00:01:42.520
<v Speaker 0>list to see a retainer

00:01:43.435 --> 00:01:44.395
<v Speaker 0>is there.

00:01:44.875 --> 00:01:46.795
<v Speaker 0>Main already exists.

00:01:46.875 --> 00:01:48.395
<v Speaker 0>If you're not sure when you last added

00:01:48.395 --> 00:01:50.314
<v Speaker 0>it, run a helm repo update to ensure

00:01:50.314 --> 00:01:52.475
<v Speaker 0>that you have all the latest versions cached

00:01:52.475 --> 00:01:53.034
<v Speaker 0>locally.

00:01:57.600 --> 00:01:58.720
<v Speaker 0>The documentation

00:01:58.720 --> 00:02:00.640
<v Speaker 0>suggests you do a helm install.

00:02:01.200 --> 00:02:02.720
<v Speaker 0>I'm going to suggest that you don't do

00:02:02.720 --> 00:02:04.720
<v Speaker 0>that and instead modify the command to be

00:02:04.720 --> 00:02:07.440
<v Speaker 0>a helm upgrade to dash dash install just

00:02:07.440 --> 00:02:08.639
<v Speaker 0>like I have here.

00:02:08.959 --> 00:02:10.925
<v Speaker 0>This just means that this item potent. You

00:02:10.925 --> 00:02:13.084
<v Speaker 0>can run this command over and over and

00:02:13.084 --> 00:02:16.444
<v Speaker 0>over again and any changes via your values.

00:02:16.444 --> 00:02:17.965
<v Speaker 0>Yaml will be reflected

00:02:18.125 --> 00:02:19.245
<v Speaker 0>in the cluster.

00:02:19.565 --> 00:02:22.205
<v Speaker 0>Help install can only ever be run once.

00:02:22.605 --> 00:02:23.245
<v Speaker 0>Next,

00:02:23.405 --> 00:02:25.165
<v Speaker 0>everything else is the same as the docs.

00:02:25.400 --> 00:02:27.960
<v Speaker 0>We're passing create namespace and the namespace of

00:02:27.960 --> 00:02:28.760
<v Speaker 0>Portainer.

00:02:29.000 --> 00:02:30.920
<v Speaker 0>This just means that this Helm release will

00:02:30.920 --> 00:02:32.520
<v Speaker 0>live in the Portainer namespace.

00:02:32.520 --> 00:02:35.000
<v Speaker 0>And if it doesn't exist, hey, it'll create

00:02:35.000 --> 00:02:35.480
<v Speaker 0>it.

00:02:36.520 --> 00:02:38.600
<v Speaker 0>Next, we give our Helm release a name.

00:02:39.240 --> 00:02:40.840
<v Speaker 0>We're calling ours Portainer.

00:02:41.275 --> 00:02:44.715
<v Speaker 0>I know. Surprised. Right? Next, we provide the

00:02:44.715 --> 00:02:47.355
<v Speaker 0>helm chart repository name and to helm chart

00:02:47.355 --> 00:02:48.715
<v Speaker 0>itself name.

00:02:49.195 --> 00:02:51.595
<v Speaker 0>That is Portainer slash Portainer.

00:02:52.795 --> 00:02:55.260
<v Speaker 0>Lastly, we provide them one flag and that

00:02:55.260 --> 00:02:57.900
<v Speaker 0>is dash dash set which will set TLS

00:02:57.900 --> 00:02:59.100
<v Speaker 0>force to true.

00:02:59.819 --> 00:03:01.819
<v Speaker 0>This just means that we're telling Portainer to

00:03:01.819 --> 00:03:04.540
<v Speaker 0>only run and expose and listen on the

00:03:04.540 --> 00:03:05.420
<v Speaker 0>TLS

00:03:05.420 --> 00:03:05.980
<v Speaker 0>port.

00:03:09.305 --> 00:03:10.505
<v Speaker 0>Let's quit this

00:03:10.745 --> 00:03:12.185
<v Speaker 0>and run deploy.

00:03:13.305 --> 00:03:15.065
<v Speaker 0>As you can see, my helm upgrade dash

00:03:15.065 --> 00:03:17.625
<v Speaker 0>dash install detects that the release doesn't exist

00:03:17.625 --> 00:03:19.980
<v Speaker 0>and deploys it for the first time. We

00:03:19.980 --> 00:03:21.580
<v Speaker 0>then get some notes that tell us how

00:03:21.580 --> 00:03:23.820
<v Speaker 0>to get the IP address and port for

00:03:23.820 --> 00:03:25.420
<v Speaker 0>our Portainer instance,

00:03:26.060 --> 00:03:28.140
<v Speaker 0>but we're not going to use that. Instead,

00:03:28.140 --> 00:03:29.740
<v Speaker 0>let's take a look at what happened in

00:03:29.740 --> 00:03:30.620
<v Speaker 0>our cluster.

00:03:31.420 --> 00:03:33.820
<v Speaker 0>We can run kubectl, send the namespace to

00:03:33.820 --> 00:03:36.495
<v Speaker 0>our Portainer and run get deploy and get

00:03:36.495 --> 00:03:37.215
<v Speaker 0>pods

00:03:37.375 --> 00:03:38.655
<v Speaker 0>at the same time.

00:03:39.375 --> 00:03:41.935
<v Speaker 0>You'll see we have one deployment called Portainer,

00:03:41.935 --> 00:03:43.694
<v Speaker 0>which has one of one ready and of

00:03:43.694 --> 00:03:45.535
<v Speaker 0>course that has a pod,

00:03:46.095 --> 00:03:47.694
<v Speaker 0>which is one of one ready.

00:03:48.880 --> 00:03:50.640
<v Speaker 0>Things look pretty good.

00:03:52.400 --> 00:03:55.120
<v Speaker 0>Now on the documentation for the Portainer deploy,

00:03:55.120 --> 00:03:56.640
<v Speaker 0>you'll see that I'm on the default tab

00:03:56.640 --> 00:03:59.440
<v Speaker 0>of node port. We also have ingress and

00:03:59.440 --> 00:04:00.720
<v Speaker 0>load balancer available.

00:04:01.405 --> 00:04:03.724
<v Speaker 0>These just require extra set parameters

00:04:03.724 --> 00:04:05.885
<v Speaker 0>that modify the helm deploy.

00:04:06.845 --> 00:04:09.325
<v Speaker 0>Now when should you use node port versus

00:04:09.325 --> 00:04:12.445
<v Speaker 0>ingress versus load balancer? Well,

00:04:12.845 --> 00:04:14.845
<v Speaker 0>if you're just kicking the tires on Portainer

00:04:14.845 --> 00:04:18.339
<v Speaker 0>with Kubernetes locally using Docker desktop or Colima

00:04:18.339 --> 00:04:20.740
<v Speaker 0>or anything else, you're always going to use

00:04:20.740 --> 00:04:21.540
<v Speaker 0>NodePort.

00:04:21.540 --> 00:04:23.460
<v Speaker 0>Well, more than likely. Why?

00:04:23.700 --> 00:04:25.460
<v Speaker 0>Well, the chances are you won't have an

00:04:25.460 --> 00:04:28.465
<v Speaker 0>ingress controller set up within your cluster. Ingress

00:04:28.465 --> 00:04:30.865
<v Speaker 0>controllers are not installed by default unless you're

00:04:30.865 --> 00:04:32.945
<v Speaker 0>using a managed Kubernetes instance.

00:04:33.185 --> 00:04:36.145
<v Speaker 0>You have to choose between running Contour, Emissary,

00:04:36.145 --> 00:04:38.385
<v Speaker 0>Traffic, NGINX, or one of the many other

00:04:38.385 --> 00:04:40.545
<v Speaker 0>ingress controllers available on the market.

00:04:41.259 --> 00:04:43.819
<v Speaker 0>So if you're unsure, go with NodePort. If

00:04:43.819 --> 00:04:46.300
<v Speaker 0>you're pushing your container into a production environment,

00:04:46.379 --> 00:04:49.259
<v Speaker 0>then you probably don't want to use NodePort.

00:04:49.259 --> 00:04:51.180
<v Speaker 0>NodePort is just a nice hacky way to

00:04:51.180 --> 00:04:52.060
<v Speaker 0>get it working quickly.

00:04:52.955 --> 00:04:54.475
<v Speaker 0>From there, you will want to work with

00:04:54.475 --> 00:04:57.115
<v Speaker 0>your platform team, your SRE team, your DevOps

00:04:57.115 --> 00:04:59.595
<v Speaker 0>team, or maybe it's just you, but ensure

00:04:59.595 --> 00:05:01.275
<v Speaker 0>that you have an ingress controller

00:05:01.355 --> 00:05:02.955
<v Speaker 0>and configure it appropriately.

00:05:03.275 --> 00:05:05.035
<v Speaker 0>And then the last one is load balancer.

00:05:05.330 --> 00:05:07.570
<v Speaker 0>This is a quick way if you're running

00:05:07.570 --> 00:05:10.850
<v Speaker 0>Kubernetes in a managed environment like GKE, AKS,

00:05:10.850 --> 00:05:11.730
<v Speaker 0>or EKS.

00:05:11.810 --> 00:05:14.530
<v Speaker 0>However, please note every load balancer you provision

00:05:14.530 --> 00:05:17.170
<v Speaker 0>or every service of type load balancer typically

00:05:17.170 --> 00:05:18.930
<v Speaker 0>gets a new load balancer as part of

00:05:18.930 --> 00:05:21.305
<v Speaker 0>the cloud provider. That's usually cost you a

00:05:21.305 --> 00:05:23.945
<v Speaker 0>minimum of $20 per month per load balancer,

00:05:23.945 --> 00:05:25.865
<v Speaker 0>so the cost can add up really quickly.

00:05:25.865 --> 00:05:27.785
<v Speaker 0>It's actually more typical to have a single

00:05:27.785 --> 00:05:29.785
<v Speaker 0>load balancer service as part of your ingress

00:05:29.785 --> 00:05:32.345
<v Speaker 0>controller deployment and then handle everything else via

00:05:32.345 --> 00:05:33.385
<v Speaker 0>ingress objects.

00:05:33.465 --> 00:05:35.000
<v Speaker 0>So pick wisely.

00:05:35.160 --> 00:05:37.160
<v Speaker 0>Let's jump back to our command line.

00:05:38.280 --> 00:05:40.280
<v Speaker 0>Now, we can run kubectl

00:05:40.280 --> 00:05:41.080
<v Speaker 0>get

00:05:41.160 --> 00:05:44.120
<v Speaker 0>service and of course and our Portainer namespace.

00:05:46.895 --> 00:05:48.335
<v Speaker 0>We'll see here that we have our node

00:05:48.335 --> 00:05:50.574
<v Speaker 0>port service. It has a cluster IP and

00:05:50.574 --> 00:05:52.335
<v Speaker 0>we have a few mappings. The one that

00:05:52.335 --> 00:05:54.175
<v Speaker 0>we are more interested in

00:05:54.974 --> 00:05:57.455
<v Speaker 0>is this 30779.

00:05:57.455 --> 00:05:59.935
<v Speaker 0>This maps to the pertainer TLS port of

00:05:59.935 --> 00:06:01.294
<v Speaker 0>9443.

00:06:02.095 --> 00:06:04.389
<v Speaker 0>We can now open up localhost on that

00:06:04.389 --> 00:06:05.030
<v Speaker 0>port

00:06:05.350 --> 00:06:07.670
<v Speaker 0>and ensure that you use the right protocol

00:06:07.830 --> 00:06:09.030
<v Speaker 0>HTTPS.

00:06:10.230 --> 00:06:13.350
<v Speaker 0>Now we never told Portainer to use cert

00:06:13.350 --> 00:06:15.990
<v Speaker 0>manager or less incorrect or anything else for

00:06:15.990 --> 00:06:18.125
<v Speaker 0>TLS. That means we're getting a self signed

00:06:18.125 --> 00:06:19.085
<v Speaker 0>certificate.

00:06:19.645 --> 00:06:21.565
<v Speaker 0>For that, you'll need to click advanced and

00:06:21.565 --> 00:06:22.205
<v Speaker 0>proceed.

00:06:22.685 --> 00:06:25.725
<v Speaker 0>From here, we can configure our first Portainer

00:06:25.725 --> 00:06:28.685
<v Speaker 0>user, the admin user. We've already covered that

00:06:28.685 --> 00:06:30.525
<v Speaker 0>in a previous video, so I'm not going

00:06:30.525 --> 00:06:31.965
<v Speaker 0>to go into that again now.

00:06:32.520 --> 00:06:34.280
<v Speaker 0>So what if you do want to tweak

00:06:34.280 --> 00:06:36.040
<v Speaker 0>the default helm installation?

00:06:36.120 --> 00:06:39.960
<v Speaker 0>Well, you can go to github.com/protainer/kates.

00:06:39.960 --> 00:06:41.480
<v Speaker 0>That's k8s.

00:06:41.960 --> 00:06:44.280
<v Speaker 0>From here, you'll find there's a charts retainer

00:06:44.280 --> 00:06:44.840
<v Speaker 0>directory.

00:06:46.095 --> 00:06:48.015
<v Speaker 0>As with every Helm chart, there's a values

00:06:48.015 --> 00:06:50.335
<v Speaker 0>dot YAML. You can click the raw button

00:06:50.335 --> 00:06:52.575
<v Speaker 0>and copy and paste it locally or hit

00:06:52.575 --> 00:06:53.295
<v Speaker 0>download.

00:06:54.495 --> 00:06:57.055
<v Speaker 0>I already have the default values file here.

00:06:57.870 --> 00:06:59.390
<v Speaker 0>This is where you begin to make your

00:06:59.390 --> 00:07:01.790
<v Speaker 0>modifications for your own helm installation.

00:07:01.870 --> 00:07:03.870
<v Speaker 0>You can use the enterprise edition or the

00:07:03.870 --> 00:07:04.990
<v Speaker 0>business edition.

00:07:05.390 --> 00:07:07.630
<v Speaker 0>This is free for up to five nodes.

00:07:07.870 --> 00:07:10.030
<v Speaker 0>So take advantage of it. Go to the

00:07:10.030 --> 00:07:12.585
<v Speaker 0>Portainer website, click business edition, and get your

00:07:12.585 --> 00:07:13.705
<v Speaker 0>free license.

00:07:14.025 --> 00:07:16.345
<v Speaker 0>Now all of the image, image pool secrets,

00:07:16.345 --> 00:07:19.305
<v Speaker 0>node selector, service accounts, service is pretty standard

00:07:19.305 --> 00:07:21.225
<v Speaker 0>stuff, and it's unlikely that you'll want to

00:07:21.225 --> 00:07:23.145
<v Speaker 0>modify that except in extreme

00:07:23.500 --> 00:07:25.420
<v Speaker 0>and niche circumstances.

00:07:25.740 --> 00:07:27.180
<v Speaker 0>If you wish to provide your own TLS

00:07:27.180 --> 00:07:29.419
<v Speaker 0>certificate, you can do so using an existing

00:07:29.419 --> 00:07:30.300
<v Speaker 0>secret.

00:07:30.300 --> 00:07:31.979
<v Speaker 0>This is great if you have cert manager

00:07:31.979 --> 00:07:33.900
<v Speaker 0>in your cluster and you've already got that

00:07:33.900 --> 00:07:36.380
<v Speaker 0>speaking acme to less encrypt, and you have

00:07:36.380 --> 00:07:38.460
<v Speaker 0>a real production x five zero nine certificate

00:07:38.460 --> 00:07:40.275
<v Speaker 0>you can use. If you want to enable

00:07:40.275 --> 00:07:42.275
<v Speaker 0>any of Portainer's feature flags, you can add

00:07:42.275 --> 00:07:43.795
<v Speaker 0>them to this string here.

00:07:44.755 --> 00:07:46.595
<v Speaker 0>And if you want to go the ingress

00:07:46.595 --> 00:07:49.075
<v Speaker 0>route, you can configure the ingress here.

00:07:50.995 --> 00:07:52.035
<v Speaker 0>For reference,

00:07:52.115 --> 00:07:53.395
<v Speaker 0>when we're on the documentation

00:07:54.090 --> 00:07:56.970
<v Speaker 0>and you see deploy via ingress, these set

00:07:56.970 --> 00:07:58.970
<v Speaker 0>flags directly correlate

00:07:58.970 --> 00:08:01.130
<v Speaker 0>to all of the values in the YAML.

00:08:01.290 --> 00:08:03.050
<v Speaker 0>You don't need both. You only have to

00:08:03.050 --> 00:08:04.170
<v Speaker 0>do it once.

00:08:04.970 --> 00:08:08.250
<v Speaker 0>Assuming you're using Contour as your ingress controller,

00:08:08.250 --> 00:08:10.090
<v Speaker 0>you can set the ingress class name

00:08:10.385 --> 00:08:11.185
<v Speaker 0>to

00:08:11.345 --> 00:08:12.225
<v Speaker 0>contour.

00:08:12.625 --> 00:08:14.305
<v Speaker 0>And if you're going down the ingress route,

00:08:14.305 --> 00:08:19.345
<v Speaker 0>remember to set your host here, portainer.myorg.com.

00:08:20.305 --> 00:08:22.065
<v Speaker 0>If you want to set resource limits or

00:08:22.065 --> 00:08:24.465
<v Speaker 0>constraints or minimum allocations,

00:08:24.625 --> 00:08:27.110
<v Speaker 0>you could do so here in the resources

00:08:27.110 --> 00:08:27.830
<v Speaker 0>block.

00:08:28.470 --> 00:08:31.350
<v Speaker 0>And lastly, the persistence. 10 gig is probably

00:08:31.350 --> 00:08:33.429
<v Speaker 0>enough for most installations, but if you need

00:08:33.429 --> 00:08:35.270
<v Speaker 0>more, feel free to tweak that here.

00:08:35.589 --> 00:08:37.589
<v Speaker 0>If you have more than one storage class

00:08:37.589 --> 00:08:39.990
<v Speaker 0>available, remember to set that here

00:08:40.150 --> 00:08:40.390
<v Speaker 0>too.

00:08:41.135 --> 00:08:43.215
<v Speaker 0>And if you have an existing claim

00:08:43.455 --> 00:08:45.855
<v Speaker 0>because of some backup or restore process, which

00:08:45.855 --> 00:08:48.255
<v Speaker 0>we'll cover at another video very soon, then

00:08:48.255 --> 00:08:51.055
<v Speaker 0>you can add your existing claim name here

00:08:51.215 --> 00:08:53.695
<v Speaker 0>too. So the Helm chart provides all the

00:08:53.695 --> 00:08:56.895
<v Speaker 0>configuration options that you need to fit most

00:08:56.070 --> 00:08:57.110
<v Speaker 0>use cases.

00:08:57.350 --> 00:08:57.990
<v Speaker 0>Enjoy.

00:08:58.550 --> 00:08:59.190
<v Speaker 0>So

00:08:59.430 --> 00:09:01.990
<v Speaker 0>while Helm is great, you may prefer to

00:09:01.990 --> 00:09:03.670
<v Speaker 0>use kubectl

00:09:03.750 --> 00:09:06.390
<v Speaker 0>with customize. It just means there's no state

00:09:06.390 --> 00:09:09.525
<v Speaker 0>in your cluster and with customized being embedded

00:09:09.525 --> 00:09:12.005
<v Speaker 0>in kubectl, you don't even need an extra

00:09:12.005 --> 00:09:12.805
<v Speaker 0>command.

00:09:12.965 --> 00:09:15.445
<v Speaker 0>On the Portainer documentation, we can see that

00:09:15.445 --> 00:09:17.445
<v Speaker 0>they provide a kubectl command

00:09:17.765 --> 00:09:20.245
<v Speaker 0>that allows us to deploy Portainer.

00:09:21.140 --> 00:09:23.700
<v Speaker 0>This is nice because it's versioned

00:09:23.700 --> 00:09:26.020
<v Speaker 0>and we have good control over upgrades too.

00:09:26.020 --> 00:09:28.340
<v Speaker 0>So let's take a look at how we

00:09:28.340 --> 00:09:32.260
<v Speaker 0>modify or tweak the versioned Portainer manifest using

00:09:32.260 --> 00:09:33.380
<v Speaker 0>customize.

00:09:34.100 --> 00:09:36.005
<v Speaker 0>The first thing you're gonna wanna do is

00:09:36.005 --> 00:09:38.325
<v Speaker 0>create a customization dot YAML.

00:09:38.725 --> 00:09:40.885
<v Speaker 0>This looks and feels like any other Kubernetes

00:09:40.885 --> 00:09:42.965
<v Speaker 0>resource and that we have to provide an

00:09:42.965 --> 00:09:44.725
<v Speaker 0>API version and a kind.

00:09:45.845 --> 00:09:48.325
<v Speaker 0>Next, we can add any resources that we

00:09:48.325 --> 00:09:51.270
<v Speaker 0>want to deploy as part of this customization.

00:09:51.270 --> 00:09:55.030
<v Speaker 0>It supports local and remote resources. So here,

00:09:55.030 --> 00:09:57.670
<v Speaker 0>we're actually able to put in the URL

00:09:57.750 --> 00:10:00.870
<v Speaker 0>for the Portainer managed and versioned

00:10:00.870 --> 00:10:04.725
<v Speaker 0>release artifact. That's pretty sweet. Now customize offers

00:10:04.725 --> 00:10:05.925
<v Speaker 0>a lot of ways for you to make

00:10:05.925 --> 00:10:07.925
<v Speaker 0>tweaks, and I would encourage you to go

00:10:07.925 --> 00:10:09.605
<v Speaker 0>and check out their documentation.

00:10:09.925 --> 00:10:12.404
<v Speaker 0>The link is in the description. But we're

00:10:12.404 --> 00:10:15.365
<v Speaker 0>gonna take a look at two relatively simple

00:10:15.450 --> 00:10:18.010
<v Speaker 0>augmentations that we can make to the YAML.

00:10:18.090 --> 00:10:20.570
<v Speaker 0>One, it's quite common to add extra labels

00:10:20.570 --> 00:10:23.370
<v Speaker 0>to third party resources so that people know

00:10:23.370 --> 00:10:26.010
<v Speaker 0>who is responsible for them. What are the

00:10:26.010 --> 00:10:26.970
<v Speaker 0>SLAs?

00:10:26.970 --> 00:10:29.210
<v Speaker 0>Who to call when something goes wrong? So

00:10:29.210 --> 00:10:29.530
<v Speaker 0>here,

00:10:30.195 --> 00:10:31.475
<v Speaker 0>we're going to add

00:10:31.795 --> 00:10:34.595
<v Speaker 0>a new set of key value pairs. One,

00:10:34.755 --> 00:10:36.195
<v Speaker 0>app my org.

00:10:36.595 --> 00:10:37.315
<v Speaker 0>Two,

00:10:37.555 --> 00:10:38.675
<v Speaker 0>env rocks.

00:10:39.235 --> 00:10:41.155
<v Speaker 0>Does it make any sense? No.

00:10:41.395 --> 00:10:43.075
<v Speaker 0>Will it work for this example?

00:10:43.315 --> 00:10:44.980
<v Speaker 0>Definitely. Lastly,

00:10:45.220 --> 00:10:47.620
<v Speaker 0>we want to add or use a set

00:10:47.620 --> 00:10:48.500
<v Speaker 0>of patches

00:10:48.660 --> 00:10:50.579
<v Speaker 0>to modify resources.

00:10:51.139 --> 00:10:52.660
<v Speaker 0>So let's take a look at that patch

00:10:52.660 --> 00:10:56.420
<v Speaker 0>file. Customization patches have to match a resource

00:10:56.420 --> 00:10:59.235
<v Speaker 0>and then changes will be diffed. Here, we're

00:10:59.235 --> 00:11:01.315
<v Speaker 0>matching apps v one deployment

00:11:01.475 --> 00:11:04.195
<v Speaker 0>and the Portainer namespace where the deployment is

00:11:04.195 --> 00:11:05.315
<v Speaker 0>called Portainer.

00:11:05.395 --> 00:11:06.595
<v Speaker 0>On this resource,

00:11:06.835 --> 00:11:10.035
<v Speaker 0>we're going to find a container called Portainer,

00:11:10.595 --> 00:11:12.595
<v Speaker 0>and we're going to add or edit the

00:11:12.595 --> 00:11:14.195
<v Speaker 0>memory resource limit

00:11:14.570 --> 00:11:16.250
<v Speaker 0>and set it to 512

00:11:16.250 --> 00:11:16.890
<v Speaker 0>meg.

00:11:17.690 --> 00:11:20.250
<v Speaker 0>So now we can kubectl

00:11:20.250 --> 00:11:21.130
<v Speaker 0>apply

00:11:21.370 --> 00:11:23.610
<v Speaker 0>using dash k to tell it to use

00:11:23.610 --> 00:11:27.355
<v Speaker 0>the embedded customize and the kubectl command. Again,

00:11:27.435 --> 00:11:29.435
<v Speaker 0>you don't need an extra tool to start

00:11:29.435 --> 00:11:30.954
<v Speaker 0>using customize today.

00:11:31.595 --> 00:11:33.435
<v Speaker 0>And we pass in the directory

00:11:33.435 --> 00:11:36.475
<v Speaker 0>to any Kubernetes resources and customization object that

00:11:36.475 --> 00:11:37.194
<v Speaker 0>we wish to apply.

00:11:39.160 --> 00:11:40.920
<v Speaker 0>Here, we can see all of the resources

00:11:40.920 --> 00:11:42.760
<v Speaker 0>that we expect were created.

00:11:43.880 --> 00:11:46.840
<v Speaker 0>So let's see and confirm the changes we

00:11:46.840 --> 00:11:48.440
<v Speaker 0>requested have been made.

00:11:49.960 --> 00:11:52.440
<v Speaker 0>We can describe our namespace,

00:11:53.400 --> 00:11:54.040
<v Speaker 0>Portainer.

00:11:55.205 --> 00:11:58.085
<v Speaker 0>And you'll actually see our labels app, my

00:11:58.085 --> 00:12:00.725
<v Speaker 0>org, and rocks exist.

00:12:02.085 --> 00:12:04.805
<v Speaker 0>Not only that, we can describe the deployment.

00:12:09.170 --> 00:12:12.209
<v Speaker 0>And on this deployment, we will see labels

00:12:12.209 --> 00:12:13.649
<v Speaker 0>at my org

00:12:14.050 --> 00:12:15.089
<v Speaker 0>and rocks.

00:12:15.649 --> 00:12:17.170
<v Speaker 0>Not just on the labels,

00:12:17.490 --> 00:12:19.010
<v Speaker 0>also on the selector

00:12:19.329 --> 00:12:21.089
<v Speaker 0>and the pod template.

00:12:21.955 --> 00:12:22.675
<v Speaker 0>Perfect.

00:12:23.395 --> 00:12:24.355
<v Speaker 0>Lastly,

00:12:24.675 --> 00:12:27.395
<v Speaker 0>our pod called Portainer with a container called

00:12:27.395 --> 00:12:28.274
<v Speaker 0>Portainer

00:12:28.274 --> 00:12:31.875
<v Speaker 0>now has a memory limit of 512

00:12:31.875 --> 00:12:33.395
<v Speaker 0>meg. Sweet.

00:12:33.955 --> 00:12:36.515
<v Speaker 0>So now that we are in our Portainer

00:12:36.515 --> 00:12:38.390
<v Speaker 0>instance, we can click home

00:12:38.790 --> 00:12:40.630
<v Speaker 0>and we can see all of our environments

00:12:40.630 --> 00:12:42.470
<v Speaker 0>here. Now because

00:12:43.029 --> 00:12:46.390
<v Speaker 0>our Kubernetes and Portainer server are all the

00:12:46.390 --> 00:12:48.550
<v Speaker 0>same place. They're all the same thing. We've

00:12:48.550 --> 00:12:51.110
<v Speaker 0>got our local environment, which is the Kubernetes

00:12:51.110 --> 00:12:52.870
<v Speaker 0>cluster that Portainer is running on.

00:12:54.205 --> 00:12:55.565
<v Speaker 0>When you click on that,

00:12:55.885 --> 00:12:57.805
<v Speaker 0>you know, we have all the basic things

00:12:57.805 --> 00:12:59.565
<v Speaker 0>you would expect from a UI on top

00:12:59.565 --> 00:13:00.605
<v Speaker 0>of Kubernetes.

00:13:01.085 --> 00:13:02.525
<v Speaker 0>That would be the ability to check out

00:13:02.525 --> 00:13:03.565
<v Speaker 0>our namespaces,

00:13:03.805 --> 00:13:05.725
<v Speaker 0>the ability to see all of the applications

00:13:05.725 --> 00:13:06.845
<v Speaker 0>running on our cluster,

00:13:07.630 --> 00:13:09.070
<v Speaker 0>and we can drill down

00:13:09.630 --> 00:13:11.870
<v Speaker 0>to inspect individual applications.

00:13:16.670 --> 00:13:19.149
<v Speaker 0>Like so. We have the ability to view

00:13:19.149 --> 00:13:21.310
<v Speaker 0>and edit our config maps and secrets

00:13:22.055 --> 00:13:25.095
<v Speaker 0>and any volumes available within the cluster.

00:13:25.334 --> 00:13:27.495
<v Speaker 0>We also have the ability to add

00:13:27.815 --> 00:13:29.095
<v Speaker 0>Helm repositories

00:13:29.095 --> 00:13:30.935
<v Speaker 0>and deploy Helm charts

00:13:31.255 --> 00:13:33.815
<v Speaker 0>with a very nice user interface.

00:13:34.190 --> 00:13:36.510
<v Speaker 0>Assuming we want to deploy cert manager,

00:13:36.829 --> 00:13:38.589
<v Speaker 0>we can select the namespace that we want

00:13:38.589 --> 00:13:39.470
<v Speaker 0>to run it,

00:13:40.269 --> 00:13:41.390
<v Speaker 0>give it a name,

00:13:42.190 --> 00:13:44.110
<v Speaker 0>and if you want to pass any custom

00:13:44.110 --> 00:13:44.910
<v Speaker 0>values,

00:13:45.070 --> 00:13:46.589
<v Speaker 0>they're all presented

00:13:46.589 --> 00:13:47.149
<v Speaker 0>like so.

00:13:49.475 --> 00:13:52.115
<v Speaker 0>If you're happy with that, you hit install.

00:13:52.835 --> 00:13:55.075
<v Speaker 0>Helm has never been this easy.

00:13:55.395 --> 00:13:57.555
<v Speaker 0>But I don't just want to show you

00:13:57.555 --> 00:13:59.955
<v Speaker 0>the UI on top of Kubernetes.

00:14:00.035 --> 00:14:02.675
<v Speaker 0>Instead, I want to show you how Portainer

00:14:02.675 --> 00:14:06.030
<v Speaker 0>brings the same ideology of simplifying complex things

00:14:06.030 --> 00:14:08.430
<v Speaker 0>to the cluster itself. So let's pop open

00:14:08.430 --> 00:14:10.670
<v Speaker 0>the cluster settings and go to setup.

00:14:11.070 --> 00:14:13.390
<v Speaker 0>From here, we can allow people to provision

00:14:13.390 --> 00:14:14.990
<v Speaker 0>cloud load balancers

00:14:15.150 --> 00:14:17.645
<v Speaker 0>if we want. We can turn on

00:14:18.365 --> 00:14:19.485
<v Speaker 0>change windows.

00:14:20.125 --> 00:14:22.765
<v Speaker 0>We can configure the time or time frame

00:14:22.765 --> 00:14:25.885
<v Speaker 0>that we allow rollouts to happen. We can

00:14:25.885 --> 00:14:27.965
<v Speaker 0>restrict access to the default namespace

00:14:27.965 --> 00:14:30.125
<v Speaker 0>and ensure that only administrators

00:14:30.240 --> 00:14:33.680
<v Speaker 0>deploy ingresses, you know, resources that allow external

00:14:33.680 --> 00:14:36.160
<v Speaker 0>access to workloads within the cluster. But that's

00:14:36.160 --> 00:14:37.920
<v Speaker 0>still not what I want to focus on.

00:14:38.160 --> 00:14:38.880
<v Speaker 0>Instead,

00:14:39.360 --> 00:14:41.279
<v Speaker 0>I want to take a look at security

00:14:41.279 --> 00:14:42.320
<v Speaker 0>constraints.

00:14:42.480 --> 00:14:45.875
<v Speaker 0>Here, we can enable pod security constraints. And

00:14:45.875 --> 00:14:48.115
<v Speaker 0>before I turn any of these policies on,

00:14:48.195 --> 00:14:50.035
<v Speaker 0>let's just hit save.

00:14:50.115 --> 00:14:52.195
<v Speaker 0>So what is this doing in the background?

00:14:52.755 --> 00:14:55.315
<v Speaker 0>Well, let's jump over to our CLI and

00:14:55.315 --> 00:14:57.154
<v Speaker 0>take a look. You'll see the last command

00:14:57.154 --> 00:14:59.475
<v Speaker 0>I ran was to list our namespaces.

00:15:00.330 --> 00:15:02.330
<v Speaker 0>So let's run that again.

00:15:02.730 --> 00:15:04.890
<v Speaker 0>And what you'll see is that seventeen seconds

00:15:04.890 --> 00:15:08.570
<v Speaker 0>ago, we have a gatekeeper system namespace added.

00:15:09.930 --> 00:15:12.010
<v Speaker 0>We can use this namespace

00:15:13.095 --> 00:15:15.015
<v Speaker 0>and see what's running on our cluster.

00:15:15.415 --> 00:15:17.095
<v Speaker 0>And you'll see we we have the gatekeeper

00:15:17.095 --> 00:15:18.375
<v Speaker 0>controller manager

00:15:18.535 --> 00:15:20.935
<v Speaker 0>and the audit pods working. Now it doesn't

00:15:20.935 --> 00:15:23.255
<v Speaker 0>matter if you're not familiar with what gatekeeper

00:15:23.255 --> 00:15:25.495
<v Speaker 0>is, but it is in our cluster and

00:15:25.495 --> 00:15:27.770
<v Speaker 0>managed for us by Portainer. So let's go

00:15:27.770 --> 00:15:28.970
<v Speaker 0>back up and take a look at some

00:15:28.970 --> 00:15:32.570
<v Speaker 0>of these constraints. We can restrict privileged containers

00:15:32.570 --> 00:15:35.530
<v Speaker 0>from our cluster. We can restrict sharing the

00:15:35.530 --> 00:15:39.210
<v Speaker 0>process ID namespace and the host IPC namespace.

00:15:39.290 --> 00:15:42.010
<v Speaker 0>We can make sure that no workloads

00:15:42.075 --> 00:15:44.315
<v Speaker 0>mount host file system paths,

00:15:44.795 --> 00:15:46.395
<v Speaker 0>the host path directive.

00:15:46.795 --> 00:15:48.955
<v Speaker 0>But if you want to allow access to

00:15:48.955 --> 00:15:49.675
<v Speaker 0>some,

00:15:50.395 --> 00:15:53.515
<v Speaker 0>you can read only or writable. You can

00:15:53.515 --> 00:15:55.915
<v Speaker 0>require that all workloads have a read only

00:15:55.915 --> 00:15:59.190
<v Speaker 0>root file system. You can restrict escalation to

00:15:59.190 --> 00:16:00.310
<v Speaker 0>root privileges,

00:16:01.110 --> 00:16:02.950
<v Speaker 0>restrict Linux capabilities,

00:16:03.830 --> 00:16:04.550
<v Speaker 0>allowing

00:16:05.270 --> 00:16:06.550
<v Speaker 0>Capsys admin

00:16:06.710 --> 00:16:08.390
<v Speaker 0>an absolutely terrible idea.

00:16:08.550 --> 00:16:10.390
<v Speaker 0>But if you're familiar with capabilities,

00:16:10.550 --> 00:16:12.550
<v Speaker 0>you can have a low list and drop.

00:16:12.795 --> 00:16:15.514
<v Speaker 0>You can have allowed capabilities and required drop

00:16:15.514 --> 00:16:16.395
<v Speaker 0>capabilities.

00:16:16.635 --> 00:16:17.355
<v Speaker 0>Lastly,

00:16:17.915 --> 00:16:20.475
<v Speaker 0>we have the ability to enable AC Linux,

00:16:20.475 --> 00:16:22.235
<v Speaker 0>App Armor, SecComp,

00:16:22.235 --> 00:16:24.635
<v Speaker 0>and SIS control profiles. But for now, let's

00:16:24.635 --> 00:16:26.875
<v Speaker 0>just turn on the few that we've selected,

00:16:27.620 --> 00:16:29.380
<v Speaker 0>and it's done. We come back to our

00:16:29.380 --> 00:16:30.260
<v Speaker 0>gatekeeper.

00:16:30.260 --> 00:16:32.020
<v Speaker 0>We'll see that not much has changed.

00:16:36.660 --> 00:16:40.980
<v Speaker 0>But if we run kubectl get validating

00:16:39.935 --> 00:16:41.214
<v Speaker 0>web configurations,

00:16:41.375 --> 00:16:44.175
<v Speaker 0>we can see gatekeeper is here. And what's

00:16:44.175 --> 00:16:47.214
<v Speaker 0>actually happening is the gatekeeper is listening for

00:16:47.214 --> 00:16:49.935
<v Speaker 0>every resource that is applied to the cluster.

00:16:49.935 --> 00:16:52.175
<v Speaker 0>And if it violates any of the policies,

00:16:52.175 --> 00:16:54.930
<v Speaker 0>it'll be denied. You can run kubectl

00:16:54.930 --> 00:16:56.370
<v Speaker 0>API resources

00:16:57.250 --> 00:16:58.290
<v Speaker 0>and grip

00:16:58.370 --> 00:16:59.570
<v Speaker 0>for gatekeeper.

00:17:01.490 --> 00:17:03.010
<v Speaker 0>And from this list, we can see that

00:17:03.010 --> 00:17:05.089
<v Speaker 0>we have access to all of the gatekeeper

00:17:05.089 --> 00:17:06.290
<v Speaker 0>custom resources,

00:17:06.755 --> 00:17:10.275
<v Speaker 0>whether that be configs, allowed users, capabilities,

00:17:10.675 --> 00:17:12.835
<v Speaker 0>file system groups, host file systems, and so

00:17:12.835 --> 00:17:15.155
<v Speaker 0>forth and so forth. We also have access

00:17:15.155 --> 00:17:17.875
<v Speaker 0>because we enabled these in the Portainer UI,

00:17:18.195 --> 00:17:20.675
<v Speaker 0>the ability to describe constraint templates

00:17:20.809 --> 00:17:23.690
<v Speaker 0>for the KATE's PSP host file system,

00:17:24.329 --> 00:17:26.250
<v Speaker 0>which if you scroll up, will actually reveal

00:17:26.250 --> 00:17:28.970
<v Speaker 0>all the Ragel that was used as an

00:17:28.970 --> 00:17:30.090
<v Speaker 0>emission policy

00:17:30.410 --> 00:17:31.529
<v Speaker 0>to deny

00:17:31.530 --> 00:17:32.970
<v Speaker 0>host path volumes

00:17:33.290 --> 00:17:34.809
<v Speaker 0>on any of your workloads.

00:17:36.025 --> 00:17:37.785
<v Speaker 0>And I don't think there's ever been an

00:17:37.785 --> 00:17:40.745
<v Speaker 0>easier way to secure a Kubernetes cluster than

00:17:40.745 --> 00:17:43.465
<v Speaker 0>this one page on the Portainer UI. So

00:17:43.465 --> 00:17:45.545
<v Speaker 0>that's it for today's video. We take a

00:17:45.545 --> 00:17:48.105
<v Speaker 0>look at the two ways to install Portainer

00:17:48.105 --> 00:17:51.360
<v Speaker 0>to a Kubernetes cluster, allowing modifications and tweaks

00:17:51.360 --> 00:17:53.759
<v Speaker 0>based on your own requirements. From there, we

00:17:53.759 --> 00:17:55.999
<v Speaker 0>dove in the Portainer UI.

00:17:56.000 --> 00:17:58.080
<v Speaker 0>Of course, it offers all the same features

00:17:58.080 --> 00:18:00.159
<v Speaker 0>you'd expect from a Kubernetes UI,

00:18:00.320 --> 00:18:02.799
<v Speaker 0>the ability to browse and navigate the resources

00:18:02.799 --> 00:18:05.424
<v Speaker 0>within a cluster. But Portainer brings an air

00:18:05.424 --> 00:18:06.304
<v Speaker 0>of simplicity

00:18:06.465 --> 00:18:08.705
<v Speaker 0>with a UI that just wants to help

00:18:08.705 --> 00:18:09.904
<v Speaker 0>you get things done.

00:18:10.225 --> 00:18:13.344
<v Speaker 0>Securing a Kubernetes cluster through installing

00:18:13.345 --> 00:18:14.304
<v Speaker 0>gatekeeper,

00:18:14.544 --> 00:18:15.585
<v Speaker 0>rating Regal,

00:18:16.016 --> 00:18:16.816
<v Speaker 0>importing

00:18:16.816 --> 00:18:17.776
<v Speaker 0>policies.

00:18:17.776 --> 00:18:20.416
<v Speaker 0>It's quite a challenge, but not with Portainer.

00:18:20.736 --> 00:18:22.176
<v Speaker 0>So go check it out and make your

00:18:22.176 --> 00:18:24.336
<v Speaker 0>lives a little bit easier. We'll back soon

00:18:24.336 --> 00:18:26.736
<v Speaker 0>for the rest of Portainer in production. Have

00:18:26.736 --> 00:18:27.216
<v Speaker 0>a great day.
