WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: a67b6594-006c-44ea-9ed2-7d4617459eef
Created: 2025-04-29T12:15:35.042Z
Duration: 1589.482
Channels: 1

00:01:29.710 --> 00:01:30.510
<v Speaker 0>Hello,

00:01:30.590 --> 00:01:31.710
<v Speaker 0>and welcome

00:01:31.710 --> 00:01:34.270
<v Speaker 0>to the Rawkode Academy. I'm your host, David

00:01:34.270 --> 00:01:36.830
<v Speaker 0>Flanagan, also known as Rawkode across the internet.

00:01:37.205 --> 00:01:39.605
<v Speaker 0>Today is an episode of Rawkode Live where

00:01:39.605 --> 00:01:42.165
<v Speaker 0>we get hands on with some sort of

00:01:42.165 --> 00:01:44.885
<v Speaker 0>cloud native or cloud native adjacent technology.

00:01:44.965 --> 00:01:47.045
<v Speaker 0>And today, we're taking a look at how

00:01:47.045 --> 00:01:48.085
<v Speaker 0>to improve

00:01:48.245 --> 00:01:50.245
<v Speaker 0>your build times for Docker images.

00:01:51.540 --> 00:01:53.700
<v Speaker 0>To join us and guide us today on

00:01:53.700 --> 00:01:56.340
<v Speaker 0>our session, I'm very excited to introduce Michael

00:01:56.340 --> 00:01:58.740
<v Speaker 0>Irwin from the Docker DevRel team. Hey, man.

00:01:58.740 --> 00:01:59.460
<v Speaker 0>How's it going?

00:01:59.860 --> 00:02:01.940
<v Speaker 1>Doing well. It's good to be here with

00:02:01.940 --> 00:02:02.420
<v Speaker 1>you today.

00:02:03.305 --> 00:02:05.705
<v Speaker 0>Awesome. Yeah. I'm really excited. It's always good

00:02:05.705 --> 00:02:07.465
<v Speaker 0>to and you can take, like, a real

00:02:07.465 --> 00:02:09.465
<v Speaker 0>problem that pretty much every team has and

00:02:09.465 --> 00:02:11.625
<v Speaker 0>then give them some insights and solutions on

00:02:11.625 --> 00:02:13.625
<v Speaker 0>how to make that problem disappear, which I'm

00:02:13.625 --> 00:02:15.465
<v Speaker 0>I'm hoping will be the outcome of today's

00:02:15.465 --> 00:02:15.785
<v Speaker 0>session.

00:02:17.030 --> 00:02:17.830
<v Speaker 1>Absolutely.

00:02:18.630 --> 00:02:20.870
<v Speaker 0>Could you just take a minute or two

00:02:20.870 --> 00:02:22.790
<v Speaker 0>and, you know, introduce you if anyone has

00:02:22.790 --> 00:02:24.470
<v Speaker 0>got familiar with you and your work?

00:02:25.190 --> 00:02:27.190
<v Speaker 1>Absolutely. So as you mentioned, my name is

00:02:27.190 --> 00:02:28.950
<v Speaker 1>Michael Irwin, and I'm part of the

00:02:29.350 --> 00:02:31.270
<v Speaker 1>developer relations team here at Docker.

00:02:31.525 --> 00:02:33.685
<v Speaker 1>I've been with Docker working

00:02:33.685 --> 00:02:35.365
<v Speaker 1>full time for about two years,

00:02:35.605 --> 00:02:37.365
<v Speaker 1>but even prior to that, was actually one

00:02:37.365 --> 00:02:39.205
<v Speaker 1>of the the Docker captains for five years.

00:02:39.205 --> 00:02:41.445
<v Speaker 1>I've been in the container space for quite

00:02:41.445 --> 00:02:43.285
<v Speaker 1>a long time, and it's been fun to

00:02:43.285 --> 00:02:44.485
<v Speaker 1>watch it grow and go through all of

00:02:44.485 --> 00:02:45.045
<v Speaker 1>its

00:02:45.550 --> 00:02:48.510
<v Speaker 1>bumps and evolutions and changes and and and

00:02:48.510 --> 00:02:49.070
<v Speaker 1>just

00:02:49.470 --> 00:02:51.790
<v Speaker 1>the this entire ecosystem over the last, you

00:02:51.790 --> 00:02:53.310
<v Speaker 1>know, seven years, at least that I've been

00:02:53.310 --> 00:02:54.190
<v Speaker 1>a part of it.

00:02:55.150 --> 00:02:57.310
<v Speaker 1>I also teach a a class. I've developed

00:02:57.310 --> 00:02:58.670
<v Speaker 1>courses at

00:02:58.965 --> 00:03:01.045
<v Speaker 1>I teach at Virginia Tech, so courses on

00:03:01.045 --> 00:03:02.724
<v Speaker 1>containers and Kubernetes as well too, so I

00:03:02.724 --> 00:03:03.925
<v Speaker 1>I do a lot of teaching

00:03:04.565 --> 00:03:05.925
<v Speaker 1>those that are brand new to the space

00:03:05.925 --> 00:03:07.205
<v Speaker 1>as well too, and it's a ton of

00:03:07.205 --> 00:03:09.845
<v Speaker 1>fun to kinda work with industry experts, but

00:03:09.845 --> 00:03:11.605
<v Speaker 1>then also those that are just getting into

00:03:11.605 --> 00:03:13.605
<v Speaker 1>the space as well too. And there's obviously

00:03:13.685 --> 00:03:14.325
<v Speaker 1>a huge

00:03:14.760 --> 00:03:17.160
<v Speaker 1>chasm between them at times too, and it's

00:03:17.160 --> 00:03:19.000
<v Speaker 1>figuring out how do how do we better

00:03:19.000 --> 00:03:21.000
<v Speaker 1>connect people, but it's a it's a ton

00:03:21.000 --> 00:03:22.760
<v Speaker 1>of fun. So but, yeah, I'm I'm excited

00:03:22.760 --> 00:03:24.680
<v Speaker 1>to be here today and talk about our

00:03:24.680 --> 00:03:26.280
<v Speaker 1>our newest product, Build Cloud.

00:03:26.920 --> 00:03:27.480
<v Speaker 1>Awesome.

00:03:27.720 --> 00:03:29.625
<v Speaker 0>Well, we're definitely gonna talk about Build Cloud

00:03:29.625 --> 00:03:31.385
<v Speaker 0>and get hands on with the demo. But,

00:03:31.385 --> 00:03:32.425
<v Speaker 0>you know, maybe we

00:03:32.825 --> 00:03:34.665
<v Speaker 0>impromptu question that you had no idea it

00:03:34.665 --> 00:03:36.585
<v Speaker 0>was coming. Right? But, you know, Docker's actually

00:03:36.585 --> 00:03:38.665
<v Speaker 0>released an awful lot over the last three,

00:03:38.665 --> 00:03:39.865
<v Speaker 0>six, and nine months. Do you wanna just

00:03:39.865 --> 00:03:41.785
<v Speaker 0>give us a TLDR of anything that's top

00:03:41.785 --> 00:03:43.180
<v Speaker 0>of mind that you think is interesting and

00:03:43.180 --> 00:03:44.300
<v Speaker 0>you wanna share with people?

00:03:44.620 --> 00:03:46.620
<v Speaker 1>Yeah. Absolutely. And so as you mentioned, you

00:03:46.620 --> 00:03:48.780
<v Speaker 1>know, Docker has been doing a lot. I

00:03:48.780 --> 00:03:50.540
<v Speaker 1>think most people still think of Docker as

00:03:50.540 --> 00:03:52.700
<v Speaker 1>mostly Docker desktop or even just the Docker

00:03:52.700 --> 00:03:55.019
<v Speaker 1>engine and just the ability to run containers,

00:03:55.019 --> 00:03:55.980
<v Speaker 1>build images, etcetera.

00:03:56.754 --> 00:03:58.595
<v Speaker 1>But over the last yeah. As you said,

00:03:58.595 --> 00:04:00.754
<v Speaker 1>over the last year, we've been trying to

00:04:00.754 --> 00:04:02.915
<v Speaker 1>expand the the portfolio and adding more products

00:04:02.915 --> 00:04:05.315
<v Speaker 1>and more services. So the the first new

00:04:05.315 --> 00:04:07.395
<v Speaker 1>product that we released, and we announced it

00:04:07.875 --> 00:04:10.194
<v Speaker 1>going generally available back in in DockerCon in

00:04:10.194 --> 00:04:12.990
<v Speaker 1>October, was a new product called Docker Scout

00:04:12.990 --> 00:04:15.950
<v Speaker 1>that really focuses on building a secure software

00:04:15.950 --> 00:04:17.950
<v Speaker 1>supply chain and analyzing

00:04:17.950 --> 00:04:18.750
<v Speaker 1>your images,

00:04:18.990 --> 00:04:21.790
<v Speaker 1>making sure they they meet organizational policies,

00:04:22.270 --> 00:04:25.805
<v Speaker 1>and and it's it's actually pretty solid, pretty

00:04:25.805 --> 00:04:27.485
<v Speaker 1>awesome to to work with as well too.

00:04:27.485 --> 00:04:28.605
<v Speaker 1>So, you know, a lot of people think

00:04:28.605 --> 00:04:30.685
<v Speaker 1>of, like, image vulnerabilities, and that's just one

00:04:30.685 --> 00:04:31.725
<v Speaker 1>element, but also,

00:04:32.125 --> 00:04:34.525
<v Speaker 1>are you building on trusted and approved base

00:04:34.525 --> 00:04:36.285
<v Speaker 1>images for your organization?

00:04:36.910 --> 00:04:38.830
<v Speaker 1>Do you have open source license issues that

00:04:38.830 --> 00:04:41.230
<v Speaker 1>you need to worry about? Maybe your organization

00:04:41.230 --> 00:04:43.950
<v Speaker 1>has the policies of, you know, our images

00:04:44.030 --> 00:04:45.870
<v Speaker 1>by default shouldn't be running as the root

00:04:45.870 --> 00:04:48.110
<v Speaker 1>user, and so, you know, are your images

00:04:48.110 --> 00:04:49.390
<v Speaker 1>meeting those policies? So

00:04:49.870 --> 00:04:52.215
<v Speaker 1>lots of really cool stuff there. And then,

00:04:52.375 --> 00:04:55.335
<v Speaker 1>yeah, Build Cloud is our our newest product.

00:04:55.815 --> 00:04:57.575
<v Speaker 1>But between all those, there's been lots of

00:04:57.575 --> 00:05:00.455
<v Speaker 1>other new features and capabilities, Docker Debug.

00:05:00.775 --> 00:05:01.735
<v Speaker 1>There's been

00:05:02.135 --> 00:05:02.935
<v Speaker 1>Docker Net

00:05:03.495 --> 00:05:05.815
<v Speaker 1>Panda. Yep. Yep. To help bootstrap new projects,

00:05:06.740 --> 00:05:08.340
<v Speaker 1>compose watch. I mean, there's just been a

00:05:08.340 --> 00:05:11.300
<v Speaker 1>lot of Web essentially. My favorite. My favorite.

00:05:11.300 --> 00:05:13.540
<v Speaker 1>The whole Wagons stuff. Yeah. Absolutely.

00:05:13.860 --> 00:05:16.020
<v Speaker 1>So yeah. And, I mean, it may be

00:05:16.020 --> 00:05:17.380
<v Speaker 1>hard to keep up with at all.

00:05:17.860 --> 00:05:19.780
<v Speaker 0>I mean, I'm trying my best to keep

00:05:19.780 --> 00:05:23.275
<v Speaker 0>up, but, you know, Docker has definitely embraced,

00:05:23.915 --> 00:05:26.715
<v Speaker 0>I don't know, tooling and experience, developer experience.

00:05:26.715 --> 00:05:28.235
<v Speaker 0>And they really seem to be tackling really

00:05:28.235 --> 00:05:30.715
<v Speaker 0>a lot of those challenging problems that people

00:05:30.715 --> 00:05:31.515
<v Speaker 0>experience,

00:05:31.595 --> 00:05:33.915
<v Speaker 0>whether they're new to container tech or whether

00:05:33.915 --> 00:05:35.995
<v Speaker 0>they're experienced. Right? There's a lot of frustrations

00:05:35.995 --> 00:05:38.100
<v Speaker 0>and it's nice to see Docker tackle them

00:05:38.100 --> 00:05:40.740
<v Speaker 0>head on. Even, you know, the the failment

00:05:40.740 --> 00:05:42.180
<v Speaker 0>and stuff for people that are running Mac

00:05:42.180 --> 00:05:43.300
<v Speaker 0>like like me.

00:05:43.700 --> 00:05:45.940
<v Speaker 0>For dynamic interpreted languages, that has been a

00:05:45.940 --> 00:05:46.580
<v Speaker 0>pain.

00:05:46.900 --> 00:05:48.980
<v Speaker 0>And I was really shocked when I used

00:05:48.980 --> 00:05:51.780
<v Speaker 0>a large PHP application and the performance is

00:05:51.780 --> 00:05:53.435
<v Speaker 0>night and day from where it was Oh,

00:05:53.435 --> 00:05:54.074
<v Speaker 1>yeah. Twelve

00:05:54.555 --> 00:05:56.395
<v Speaker 0>months ago or or two years ago. So

00:05:56.474 --> 00:05:57.755
<v Speaker 0>yeah. Awesome stuff.

00:05:58.235 --> 00:05:58.875
<v Speaker 1>Yep.

00:05:59.514 --> 00:06:01.275
<v Speaker 0>But we're not here to talk about all

00:06:01.275 --> 00:06:03.034
<v Speaker 0>of that other awesome stuff. We're here to

00:06:03.034 --> 00:06:06.069
<v Speaker 0>talk about Docker Build Cloud. And let's start

00:06:06.069 --> 00:06:07.669
<v Speaker 0>with a a bit of context or a

00:06:07.669 --> 00:06:10.150
<v Speaker 0>problem that I think everybody's probably had at

00:06:10.150 --> 00:06:12.230
<v Speaker 0>some point in their container latest. Right?

00:06:13.990 --> 00:06:15.910
<v Speaker 0>And that even s k c d has

00:06:15.910 --> 00:06:18.069
<v Speaker 0>a meme that's often swapped out from it's

00:06:18.069 --> 00:06:20.284
<v Speaker 0>compiling and we're running about our chairs sword

00:06:20.284 --> 00:06:22.525
<v Speaker 0>fighting. And I see all the time with

00:06:22.525 --> 00:06:24.044
<v Speaker 0>my Docker images building

00:06:24.125 --> 00:06:27.405
<v Speaker 0>because these things can be can be slow

00:06:27.405 --> 00:06:29.164
<v Speaker 0>and there's a lot of foot guns,

00:06:29.564 --> 00:06:31.085
<v Speaker 0>which I'm not saying Docker Build Cloud has

00:06:31.085 --> 00:06:32.365
<v Speaker 0>got effects, but there are a lot of

00:06:32.365 --> 00:06:34.290
<v Speaker 0>foot guns for people that are new to

00:06:34.290 --> 00:06:36.530
<v Speaker 0>containers that don't understand how layer caching works

00:06:36.530 --> 00:06:39.170
<v Speaker 0>and then cache invalidation and all this stuff.

00:06:40.050 --> 00:06:41.650
<v Speaker 0>But use Docker in it and it's gonna

00:06:41.650 --> 00:06:43.490
<v Speaker 0>help you avoid some of them things. But

00:06:43.490 --> 00:06:45.970
<v Speaker 0>Docker build cloud can give us some dramatic

00:06:45.970 --> 00:06:48.635
<v Speaker 0>performance numbers. Your blog post that I was

00:06:48.635 --> 00:06:50.395
<v Speaker 0>looking at prior to this episode says it

00:06:50.395 --> 00:06:51.995
<v Speaker 0>could speed up a build by up to

00:06:51.995 --> 00:06:53.355
<v Speaker 0>39%.

00:06:53.435 --> 00:06:56.795
<v Speaker 0>That is not a trivial number or performance

00:06:56.795 --> 00:06:58.555
<v Speaker 0>and benefit. So do you wanna give us

00:06:58.555 --> 00:07:00.635
<v Speaker 0>a bit more details on what Build Cloud

00:07:00.820 --> 00:07:03.220
<v Speaker 0>is Yeah. And why people should pay attention?

00:07:03.700 --> 00:07:05.780
<v Speaker 1>Yeah. Absolutely. And and I'll even I'll just

00:07:05.780 --> 00:07:07.700
<v Speaker 1>do one small correction. The the blog post,

00:07:07.700 --> 00:07:09.540
<v Speaker 1>so it wasn't 39%. It was even 39

00:07:09.540 --> 00:07:10.180
<v Speaker 1>times.

00:07:10.420 --> 00:07:11.140
<v Speaker 1>So there's

00:07:12.420 --> 00:07:14.420
<v Speaker 1>Of of course, you know, numbers can be,

00:07:14.420 --> 00:07:15.865
<v Speaker 1>you know, a little hand wavy at times,

00:07:15.865 --> 00:07:18.425
<v Speaker 1>but we have seen pretty significant improvements with

00:07:18.425 --> 00:07:19.625
<v Speaker 1>with the build speeds.

00:07:19.945 --> 00:07:21.544
<v Speaker 1>And so, yeah, a a couple things that

00:07:21.544 --> 00:07:24.185
<v Speaker 1>you mentioned there. So when when I'm building

00:07:24.185 --> 00:07:26.985
<v Speaker 1>a a container image, there's there's a lot

00:07:26.985 --> 00:07:29.145
<v Speaker 1>that goes into that. And especially if I'm

00:07:29.145 --> 00:07:30.264
<v Speaker 1>building on my local machine,

00:07:31.210 --> 00:07:32.729
<v Speaker 1>if it's the first time I've done that

00:07:32.729 --> 00:07:34.330
<v Speaker 1>build, I'm having to do the build from

00:07:34.330 --> 00:07:37.290
<v Speaker 1>scratch. And we're we're looking at those builds,

00:07:37.530 --> 00:07:40.569
<v Speaker 1>you know, there's lots of dependencies and compilation

00:07:40.569 --> 00:07:42.090
<v Speaker 1>or, you know, just depending on what language

00:07:42.090 --> 00:07:43.129
<v Speaker 1>and what tools you're using.

00:07:44.565 --> 00:07:46.965
<v Speaker 1>You know, if we look at the layers,

00:07:46.965 --> 00:07:48.885
<v Speaker 1>my source code may be layers seven and

00:07:48.885 --> 00:07:50.405
<v Speaker 1>eight, but I still have to build, you

00:07:50.405 --> 00:07:51.925
<v Speaker 1>know, layers one through six

00:07:52.405 --> 00:07:54.325
<v Speaker 1>at least to populate my cache and and

00:07:54.325 --> 00:07:55.605
<v Speaker 1>get things in a good place.

00:07:56.085 --> 00:07:59.285
<v Speaker 1>And, you know, if then we look across

00:07:58.200 --> 00:08:00.680
<v Speaker 1>an entire team of developers. If there's 10

00:08:00.680 --> 00:08:02.600
<v Speaker 1>developers on a team, well, then that means

00:08:02.600 --> 00:08:03.640
<v Speaker 1>all of those,

00:08:03.960 --> 00:08:05.800
<v Speaker 1>you know, initial layers are having to be

00:08:05.800 --> 00:08:09.240
<v Speaker 1>rebuilt across the entire team. It's like, at

00:08:09.240 --> 00:08:10.280
<v Speaker 1>the end of the day, there's a lot

00:08:10.280 --> 00:08:12.600
<v Speaker 1>of this layer caching and whatnot. Like, how

00:08:12.600 --> 00:08:14.085
<v Speaker 1>can we make it so that one person

00:08:14.085 --> 00:08:16.085
<v Speaker 1>can build once and then everybody can benefit

00:08:16.085 --> 00:08:18.324
<v Speaker 1>from that shared cache environment? So that that's

00:08:18.324 --> 00:08:20.565
<v Speaker 1>kinda one aspect of of Build Cloud is

00:08:20.565 --> 00:08:22.245
<v Speaker 1>this, by having the shared runner,

00:08:22.645 --> 00:08:24.724
<v Speaker 1>one person can or even a CI pipeline

00:08:24.724 --> 00:08:26.645
<v Speaker 1>can populate the cache, and then everybody else

00:08:26.645 --> 00:08:27.525
<v Speaker 1>can benefit from it.

00:08:28.819 --> 00:08:30.660
<v Speaker 1>Another thing that we heard quite often was,

00:08:30.660 --> 00:08:32.580
<v Speaker 1>you know, for larger projects,

00:08:32.740 --> 00:08:35.299
<v Speaker 1>compilation may just take a long time. Either

00:08:35.299 --> 00:08:36.980
<v Speaker 1>there's lots to compile

00:08:37.059 --> 00:08:38.980
<v Speaker 1>or, you know, if I'm on a team

00:08:38.980 --> 00:08:41.475
<v Speaker 1>that's looking at multi architecture, for example, and

00:08:41.475 --> 00:08:43.394
<v Speaker 1>now we're having to do AMD sixty four

00:08:43.394 --> 00:08:44.995
<v Speaker 1>and ARM sixty four, but, you know, maybe

00:08:44.995 --> 00:08:46.595
<v Speaker 1>I'm on Apple silicon, so I'm having to

00:08:46.595 --> 00:08:48.035
<v Speaker 1>emulate one or the other.

00:08:48.755 --> 00:08:50.435
<v Speaker 0>Maybe it's a Rust project, and it's just

00:08:50.435 --> 00:08:51.395
<v Speaker 0>slow. Yeah.

00:08:51.795 --> 00:08:53.555
<v Speaker 1>Exactly. And, you know, so there's just times

00:08:53.555 --> 00:08:55.075
<v Speaker 1>in which, like, can I just attach

00:08:56.500 --> 00:08:58.420
<v Speaker 1>beefier machines to my builds?

00:08:58.900 --> 00:09:00.740
<v Speaker 1>And and and so kind of internally, we

00:09:00.740 --> 00:09:02.980
<v Speaker 1>call it remote where it's kind of remote,

00:09:02.980 --> 00:09:04.660
<v Speaker 1>but it kinda feels local.

00:09:05.860 --> 00:09:07.220
<v Speaker 1>And so in many ways, that's what Build

00:09:07.220 --> 00:09:08.820
<v Speaker 1>Cloud's trying to do, like, give that remote

00:09:08.820 --> 00:09:11.185
<v Speaker 1>experience to, like, just enhance the the local

00:09:11.185 --> 00:09:15.265
<v Speaker 1>experience with remote capabilities and remote

00:09:15.585 --> 00:09:16.625
<v Speaker 1>horsepower,

00:09:17.185 --> 00:09:19.105
<v Speaker 1>but then, you know, everything still

00:09:19.425 --> 00:09:21.505
<v Speaker 1>works as you would expect it to locally.

00:09:22.464 --> 00:09:22.785
<v Speaker 0>Okay.

00:09:23.360 --> 00:09:25.200
<v Speaker 0>So would it be fair to summarize

00:09:25.440 --> 00:09:27.200
<v Speaker 0>all of those amazing features you're just gonna

00:09:27.200 --> 00:09:29.440
<v Speaker 0>cover to is like just Docker Build Cloud

00:09:29.440 --> 00:09:32.720
<v Speaker 0>is a remote build kit, build service for

00:09:32.720 --> 00:09:35.280
<v Speaker 0>anyone building container images. And the fact that

00:09:35.280 --> 00:09:36.885
<v Speaker 0>there's remote means that you can do really

00:09:36.885 --> 00:09:38.885
<v Speaker 0>cool things with the caching. That's kinda what

00:09:38.885 --> 00:09:41.524
<v Speaker 0>I'm taking away from this. Yeah. Absolutely. And

00:09:41.524 --> 00:09:42.964
<v Speaker 1>so, yeah, the the remote

00:09:43.685 --> 00:09:45.125
<v Speaker 1>yep. Shared caches,

00:09:45.524 --> 00:09:46.964
<v Speaker 1>native multi architecture,

00:09:48.005 --> 00:09:50.590
<v Speaker 1>and hopefully, as as you see there, hopefully,

00:09:50.590 --> 00:09:53.230
<v Speaker 1>it's the 39 x speed improvements that you

00:09:53.230 --> 00:09:54.030
<v Speaker 1>get. That

00:09:54.510 --> 00:09:56.030
<v Speaker 0>native multi architecture.

00:09:56.590 --> 00:09:57.950
<v Speaker 0>Yeah. And maybe that comes out in the

00:09:57.950 --> 00:10:00.030
<v Speaker 0>demo. Right? But I'm gonna I'm curious.

00:10:00.190 --> 00:10:01.870
<v Speaker 0>When I do Docker builds and I'm using

00:10:01.870 --> 00:10:04.785
<v Speaker 0>Docker build cloud, is that understanding that there's

00:10:04.785 --> 00:10:06.305
<v Speaker 0>multiple jobs that need to be run and

00:10:06.305 --> 00:10:08.865
<v Speaker 0>literally scheduling them on different machines with the

00:10:08.865 --> 00:10:11.345
<v Speaker 0>architecture native without any emulation whatsoever?

00:10:12.065 --> 00:10:13.905
<v Speaker 1>That's exactly what's happening. So, yeah, when I

00:10:13.905 --> 00:10:14.945
<v Speaker 1>do the build,

00:10:15.745 --> 00:10:17.825
<v Speaker 1>basically, it's handing off to the a a

00:10:17.825 --> 00:10:20.240
<v Speaker 1>build kit endpoint that then is basically saying,

00:10:20.240 --> 00:10:21.360
<v Speaker 1>alright. What

00:10:21.760 --> 00:10:23.760
<v Speaker 1>builder behind the scenes actually needs to take

00:10:23.760 --> 00:10:25.440
<v Speaker 1>care of this for me? And, yeah, delegates

00:10:25.440 --> 00:10:27.520
<v Speaker 1>the works to either AMD sixty four or

00:10:27.520 --> 00:10:29.440
<v Speaker 1>ARM sixty four, and there may be a

00:10:29.440 --> 00:10:29.920
<v Speaker 1>few

00:10:30.800 --> 00:10:33.175
<v Speaker 1>architectures that support or, you know, machines that

00:10:33.175 --> 00:10:35.655
<v Speaker 1>support other architectures as they come out. But,

00:10:35.895 --> 00:10:37.495
<v Speaker 1>yep, everything runs natively.

00:10:38.055 --> 00:10:40.775
<v Speaker 0>Nice. We got a not a question, but

00:10:40.775 --> 00:10:42.295
<v Speaker 0>a comment from Russell on the chat. So

00:10:42.295 --> 00:10:44.135
<v Speaker 0>he's got a project. It takes thirty minutes

00:10:44.135 --> 00:10:45.815
<v Speaker 0>to build, and the presses sound greatly.

00:10:46.300 --> 00:10:47.660
<v Speaker 0>Yeah. I mean, when I used to work

00:10:47.660 --> 00:10:49.820
<v Speaker 0>in an office, I loved those comp completion

00:10:49.820 --> 00:10:51.340
<v Speaker 0>times or build times because that meant you

00:10:51.340 --> 00:10:52.620
<v Speaker 0>can go get a coffee, you would chat

00:10:52.620 --> 00:10:53.980
<v Speaker 0>to people, but now they're all sitting at

00:10:53.980 --> 00:10:55.660
<v Speaker 0>home. I think they're just sat watching them,

00:10:55.660 --> 00:10:57.980
<v Speaker 0>and and maybe that's just me. Or I

00:10:57.980 --> 00:10:59.580
<v Speaker 0>I think maybe I'll squeeze on an episode

00:10:59.580 --> 00:11:01.340
<v Speaker 0>of, you know, the office or whatever.

00:11:02.154 --> 00:11:03.835
<v Speaker 1>Well and and, yeah, that's one of things

00:11:03.835 --> 00:11:06.315
<v Speaker 1>that, like, I'll admit as a developer at

00:11:06.315 --> 00:11:08.635
<v Speaker 1>times, it's like, enjoy those those downtimes, and,

00:11:08.635 --> 00:11:10.475
<v Speaker 1>yeah, I can pull up YouTube for a

00:11:10.475 --> 00:11:11.915
<v Speaker 1>little bit or, you know, whatever else it

00:11:11.915 --> 00:11:12.475
<v Speaker 1>might be.

00:11:13.355 --> 00:11:14.795
<v Speaker 1>And so, like, on one hand, I'm like,

00:11:14.795 --> 00:11:16.315
<v Speaker 1>okay. Great. This means I have to work

00:11:16.315 --> 00:11:18.130
<v Speaker 1>more. Is this actually what I want to

00:11:18.130 --> 00:11:19.010
<v Speaker 1>do? But at the end of the day,

00:11:19.010 --> 00:11:21.810
<v Speaker 1>like, that's that's where I love actually spending

00:11:21.810 --> 00:11:24.770
<v Speaker 1>my time building applications, solving problems, etcetera. So

00:11:24.770 --> 00:11:26.210
<v Speaker 1>in in many ways, it's like, how can

00:11:26.210 --> 00:11:28.050
<v Speaker 1>we keep you in that flow more?

00:11:29.154 --> 00:11:30.835
<v Speaker 1>Because, yeah, then it takes more time to

00:11:30.835 --> 00:11:31.955
<v Speaker 1>get back in, you know, all of the

00:11:31.955 --> 00:11:33.555
<v Speaker 1>context switching is just fine. You're framing us

00:11:33.555 --> 00:11:35.075
<v Speaker 0>too nicely. I think we need to change

00:11:35.075 --> 00:11:38.195
<v Speaker 0>the flow. Well, actually, you're taking away developers'

00:11:38.195 --> 00:11:40.595
<v Speaker 0>coffee breaks and their Netflix. Why do you

00:11:40.595 --> 00:11:41.235
<v Speaker 0>hate developers?

00:11:41.880 --> 00:11:44.120
<v Speaker 1>Yeah. When you put it that way, gosh.

00:11:45.880 --> 00:11:48.600
<v Speaker 0>Alright. Awesome. If you do have any questions,

00:11:48.600 --> 00:11:50.360
<v Speaker 0>people are watching us, please feel free to

00:11:50.360 --> 00:11:52.360
<v Speaker 0>leave them in the comment section on LinkedIn,

00:11:52.360 --> 00:11:54.280
<v Speaker 0>on x, or on YouTube. We will do

00:11:54.280 --> 00:11:55.560
<v Speaker 0>our best to tackle them as we go

00:11:55.560 --> 00:11:55.880
<v Speaker 0>today.

00:11:57.125 --> 00:12:00.245
<v Speaker 0>Alright. So I mean, you've already sold me

00:12:00.245 --> 00:12:03.605
<v Speaker 0>on this. I want this native compilation across

00:12:03.605 --> 00:12:05.605
<v Speaker 0>different architectures. I want it to be faster

00:12:05.605 --> 00:12:07.605
<v Speaker 0>and I wanna build cache that works across

00:12:07.605 --> 00:12:08.405
<v Speaker 0>multiple machines.

00:12:09.279 --> 00:12:10.400
<v Speaker 0>I very

00:12:10.400 --> 00:12:12.560
<v Speaker 0>much take advantage of working at home to

00:12:12.560 --> 00:12:13.920
<v Speaker 0>the point where yes, I'm in my office

00:12:13.920 --> 00:12:15.680
<v Speaker 0>now for a stream and I do some

00:12:15.680 --> 00:12:16.480
<v Speaker 0>work here.

00:12:17.120 --> 00:12:19.360
<v Speaker 0>But I've got kids. I'm at dance class

00:12:19.360 --> 00:12:20.960
<v Speaker 0>and I when my daughter's there, I get

00:12:20.960 --> 00:12:22.400
<v Speaker 0>my laptop out and I start working on

00:12:22.400 --> 00:12:22.640
<v Speaker 0>that.

00:12:23.625 --> 00:12:25.705
<v Speaker 0>Not having my build cash there is really

00:12:25.705 --> 00:12:28.505
<v Speaker 0>painful when I'm on a four g or

00:12:28.505 --> 00:12:30.585
<v Speaker 0>five g connection and I'm struggling to build

00:12:30.585 --> 00:12:31.785
<v Speaker 0>on the bait, so I need to or

00:12:31.785 --> 00:12:34.905
<v Speaker 0>whatever. So I want this to be better

00:12:34.905 --> 00:12:37.070
<v Speaker 0>for me well. And I think with that,

00:12:37.070 --> 00:12:39.070
<v Speaker 0>we should dive into your screen share and

00:12:39.070 --> 00:12:40.510
<v Speaker 0>start to take a look at how people

00:12:40.510 --> 00:12:42.190
<v Speaker 0>can take advantage of this

00:12:43.070 --> 00:12:44.910
<v Speaker 0>this cash flow awesomeness.

00:12:45.390 --> 00:12:46.350
<v Speaker 1>Let's do it.

00:12:47.470 --> 00:12:48.830
<v Speaker 0>So was trying to think about the opposite

00:12:48.830 --> 00:12:50.510
<v Speaker 0>of snake oil there was, and I couldn't

00:12:50.510 --> 00:12:52.125
<v Speaker 0>think. I was like, what is it? It's

00:12:52.125 --> 00:12:53.964
<v Speaker 0>like just a awesome product. So

00:12:54.445 --> 00:12:56.285
<v Speaker 1>Yep. Alright. Here. Let me

00:12:56.685 --> 00:12:58.765
<v Speaker 1>screen share, and we'll go

00:12:59.324 --> 00:13:00.524
<v Speaker 1>get this window.

00:13:01.084 --> 00:13:01.404
<v Speaker 1>Alright.

00:13:03.339 --> 00:13:06.140
<v Speaker 0>Alright. We see the Docker

00:13:06.140 --> 00:13:08.380
<v Speaker 0>Yeah. Homepage or the Build Cloud homepage at

00:13:08.380 --> 00:13:10.700
<v Speaker 0>least. That's right. So I just wanna start

00:13:10.700 --> 00:13:12.460
<v Speaker 1>here. You know, it's it's a good place

00:13:12.460 --> 00:13:15.100
<v Speaker 1>for anybody else that's kinda just getting started

00:13:15.100 --> 00:13:18.585
<v Speaker 1>with with the Build Cloud. And and so,

00:13:18.585 --> 00:13:20.185
<v Speaker 1>yeah, there's lots of the the same things

00:13:20.185 --> 00:13:21.945
<v Speaker 1>that we talked about are are scattered throughout

00:13:21.945 --> 00:13:23.145
<v Speaker 1>this page as well too. One of the

00:13:23.145 --> 00:13:24.345
<v Speaker 1>things I will call out, and this is

00:13:24.345 --> 00:13:26.265
<v Speaker 1>kind of a a a fun little thing

00:13:26.265 --> 00:13:28.905
<v Speaker 1>there, there's this savings calculator, which

00:13:29.385 --> 00:13:30.900
<v Speaker 1>you can kinda say, you know, how large

00:13:30.900 --> 00:13:32.980
<v Speaker 1>is your team and salary and how much

00:13:32.980 --> 00:13:34.740
<v Speaker 1>time spent, and you can save this much

00:13:34.740 --> 00:13:36.980
<v Speaker 1>or whatever. And, of course, you know, there's

00:13:36.980 --> 00:13:38.100
<v Speaker 1>a lot of wiggle room in here and

00:13:38.100 --> 00:13:39.300
<v Speaker 1>whatnot too, but it's it's kind of a

00:13:39.300 --> 00:13:40.500
<v Speaker 1>fun thing to just play with there.

00:13:41.775 --> 00:13:44.415
<v Speaker 1>And there's some little fun demos here of

00:13:44.415 --> 00:13:46.895
<v Speaker 1>kind of a local build versus build cloud.

00:13:47.295 --> 00:13:48.975
<v Speaker 1>And, actually, you were just talking about, you

00:13:48.975 --> 00:13:50.895
<v Speaker 1>know, taking your your laptop to dance class

00:13:50.895 --> 00:13:51.375
<v Speaker 1>and whatnot.

00:13:54.050 --> 00:13:56.610
<v Speaker 1>Let's see. It was actually back in October.

00:13:56.610 --> 00:13:58.769
<v Speaker 1>I was flying to San Francisco for GitHub

00:13:58.769 --> 00:13:59.410
<v Speaker 1>Universe,

00:13:59.810 --> 00:14:01.970
<v Speaker 1>and I was working on a a React

00:14:01.970 --> 00:14:03.410
<v Speaker 1>app or whatnot, and I was like, man,

00:14:03.410 --> 00:14:06.209
<v Speaker 1>just downloading all the the YARN dependencies and

00:14:06.209 --> 00:14:09.215
<v Speaker 1>everything while on a plane Yep. Haven't helped

00:14:09.215 --> 00:14:10.495
<v Speaker 1>me kind of thing. Like, it's gonna take

00:14:10.495 --> 00:14:12.895
<v Speaker 1>forever on that Wi Fi. But I was

00:14:12.895 --> 00:14:14.015
<v Speaker 1>like, you know, let me switch to Build

00:14:14.015 --> 00:14:16.175
<v Speaker 1>Cloud and did my build and everything. And

00:14:16.175 --> 00:14:17.695
<v Speaker 1>so all of the the build actually happened

00:14:17.695 --> 00:14:19.775
<v Speaker 1>in the cloud, and then it's just downloading

00:14:19.855 --> 00:14:21.855
<v Speaker 1>you know, instead of making thousands of connections

00:14:21.855 --> 00:14:23.800
<v Speaker 1>to download everything, it's just, you know, those

00:14:23.800 --> 00:14:26.600
<v Speaker 1>couple image layers, and the build was significantly

00:14:26.600 --> 00:14:28.279
<v Speaker 1>faster. So it was kinda fun to say

00:14:28.279 --> 00:14:29.959
<v Speaker 1>I'm doing a build

00:14:30.200 --> 00:14:32.440
<v Speaker 1>using Build Cloud while literally in the clouds

00:14:32.440 --> 00:14:34.360
<v Speaker 1>and and everything, and it and it worked

00:14:34.360 --> 00:14:35.639
<v Speaker 1>out really well. It was pretty cool.

00:14:37.225 --> 00:14:40.105
<v Speaker 1>So with that, I'll jump over. So Build

00:14:40.105 --> 00:14:42.025
<v Speaker 1>Cloud has its own web UI,

00:14:42.345 --> 00:14:43.865
<v Speaker 1>and when I jump in here,

00:14:44.585 --> 00:14:46.345
<v Speaker 1>the the first time I come in, it'll

00:14:46.345 --> 00:14:48.105
<v Speaker 1>walk me through building a builder, and that

00:14:48.105 --> 00:14:49.945
<v Speaker 1>just takes three to four minutes just to

00:14:49.945 --> 00:14:52.200
<v Speaker 1>spin up all the infrastructure and everything. But

00:14:52.200 --> 00:14:53.400
<v Speaker 1>once that's in place,

00:14:53.880 --> 00:14:56.760
<v Speaker 1>you're basically given this screen that says, hey,

00:14:57.160 --> 00:14:59.160
<v Speaker 1>here's here's how to configure everything.

00:14:59.720 --> 00:15:01.080
<v Speaker 1>All you have to do is do a

00:15:01.080 --> 00:15:03.960
<v Speaker 1>Docker login, and then you basically set up

00:15:03.960 --> 00:15:05.640
<v Speaker 1>a what's called a Buildx builder.

00:15:06.235 --> 00:15:08.555
<v Speaker 1>And if you've never used Buildx, Buildx is

00:15:08.555 --> 00:15:09.035
<v Speaker 1>a

00:15:09.355 --> 00:15:12.475
<v Speaker 1>kind of the latest, greatest build engine

00:15:12.875 --> 00:15:13.675
<v Speaker 1>and

00:15:14.955 --> 00:15:16.555
<v Speaker 1>provides a lot of really cool capabilities. We

00:15:16.555 --> 00:15:17.755
<v Speaker 1>can talk about that later, but

00:15:18.879 --> 00:15:20.399
<v Speaker 1>basically what we're doing is we're just creating

00:15:20.399 --> 00:15:22.800
<v Speaker 1>another builder here. And you'll notice that the

00:15:22.800 --> 00:15:24.800
<v Speaker 1>difference here is that we're specifying a driver

00:15:24.800 --> 00:15:26.319
<v Speaker 1>of cloud. Now this is one of the

00:15:26.319 --> 00:15:27.920
<v Speaker 1>the new things that we've we've brought to

00:15:27.920 --> 00:15:29.199
<v Speaker 1>to Buildx here.

00:15:30.240 --> 00:15:31.680
<v Speaker 1>And I just give it a name, and

00:15:31.680 --> 00:15:33.345
<v Speaker 1>then from there, it sets up all the

00:15:33.345 --> 00:15:34.225
<v Speaker 1>other magic

00:15:34.464 --> 00:15:36.464
<v Speaker 1>behind the scenes. It connects to the endpoint.

00:15:36.464 --> 00:15:37.425
<v Speaker 1>And then from there,

00:15:37.904 --> 00:15:40.464
<v Speaker 1>I can either, when I specify a build,

00:15:40.464 --> 00:15:42.385
<v Speaker 1>say I wanna use that particular builder,

00:15:42.785 --> 00:15:44.305
<v Speaker 1>or I can just say, hey, just use

00:15:44.305 --> 00:15:46.145
<v Speaker 1>that builder by default, and so build x

00:15:46.145 --> 00:15:47.584
<v Speaker 1>use sets as the default

00:15:48.560 --> 00:15:50.800
<v Speaker 1>and goes from there. And then so all

00:15:50.800 --> 00:15:53.040
<v Speaker 1>my builds, all my other, you know, even

00:15:53.040 --> 00:15:54.800
<v Speaker 1>if I just do Docker Compose up, which

00:15:54.800 --> 00:15:56.720
<v Speaker 1>we'll we'll do here in just a second,

00:15:56.800 --> 00:15:59.120
<v Speaker 1>I can see all that. Now one of

00:15:59.120 --> 00:16:00.720
<v Speaker 1>the other things that we did here,

00:16:01.120 --> 00:16:03.315
<v Speaker 1>because, you know, a lot of us are

00:16:03.315 --> 00:16:05.395
<v Speaker 1>probably very comfortable in the CLI,

00:16:05.395 --> 00:16:06.755
<v Speaker 1>but not everybody is.

00:16:07.955 --> 00:16:09.715
<v Speaker 1>I can jump in the Docker desktop as

00:16:09.715 --> 00:16:10.115
<v Speaker 1>well,

00:16:10.835 --> 00:16:12.755
<v Speaker 1>and there's this new builds tab that shows

00:16:12.755 --> 00:16:14.195
<v Speaker 1>up on the the left hand side.

00:16:15.029 --> 00:16:16.949
<v Speaker 1>And and here I can see lots of

00:16:16.949 --> 00:16:18.870
<v Speaker 1>detailed output. I've got a filter on just

00:16:18.870 --> 00:16:20.709
<v Speaker 1>for my failed builds right now. Let me

00:16:21.350 --> 00:16:23.190
<v Speaker 1>put that back. And so I can see

00:16:23.190 --> 00:16:24.230
<v Speaker 1>my build history,

00:16:24.790 --> 00:16:26.709
<v Speaker 1>and I can go up into builder settings,

00:16:26.709 --> 00:16:28.149
<v Speaker 1>and I can see all those different builders,

00:16:28.149 --> 00:16:29.670
<v Speaker 1>and I can basically just click connect to

00:16:29.670 --> 00:16:30.149
<v Speaker 1>builder

00:16:30.485 --> 00:16:32.645
<v Speaker 1>and then, you know, use this as my

00:16:32.645 --> 00:16:34.405
<v Speaker 1>default builder. So I can do everything through

00:16:34.405 --> 00:16:36.565
<v Speaker 1>the GUI. Under the hood, it's basically just

00:16:36.565 --> 00:16:38.885
<v Speaker 1>running those same commands that the build execs

00:16:38.885 --> 00:16:41.205
<v Speaker 1>create, but if I'm more GUI oriented,

00:16:42.405 --> 00:16:43.925
<v Speaker 1>that's an option for me here as well

00:16:43.925 --> 00:16:44.165
<v Speaker 1>too.

00:16:45.160 --> 00:16:46.760
<v Speaker 1>And so with that in place,

00:16:47.240 --> 00:16:49.080
<v Speaker 1>then really, I can just jump into a

00:16:49.080 --> 00:16:49.720
<v Speaker 1>project,

00:16:50.200 --> 00:16:51.880
<v Speaker 1>and I'm gonna switch over to Versus Code

00:16:51.880 --> 00:16:53.400
<v Speaker 1>here. And

00:16:53.720 --> 00:16:55.480
<v Speaker 1>I've got just a a really simple React

00:16:55.480 --> 00:16:56.680
<v Speaker 1>app. Nothing too crazy.

00:16:58.015 --> 00:17:00.335
<v Speaker 1>There's a Docker file that does multistage build.

00:17:00.335 --> 00:17:02.735
<v Speaker 1>It'll, you know, build my my React app

00:17:02.735 --> 00:17:03.695
<v Speaker 1>and and

00:17:04.895 --> 00:17:07.214
<v Speaker 1>take the compiled assets,

00:17:07.375 --> 00:17:09.295
<v Speaker 1>transpiled, whatever you wanna call it, the the

00:17:09.295 --> 00:17:11.295
<v Speaker 1>the final assets and put it into NGINX

00:17:11.295 --> 00:17:11.695
<v Speaker 1>container.

00:17:12.329 --> 00:17:13.849
<v Speaker 1>But I also have another stage here that

00:17:13.849 --> 00:17:15.129
<v Speaker 1>I can use for development,

00:17:15.450 --> 00:17:16.649
<v Speaker 1>and in Compose,

00:17:17.849 --> 00:17:19.690
<v Speaker 1>that's what I've got here, that it's gonna

00:17:19.690 --> 00:17:21.770
<v Speaker 1>use that that particular stage. So even though

00:17:21.770 --> 00:17:22.889
<v Speaker 1>I've got this other

00:17:23.450 --> 00:17:26.144
<v Speaker 1>other builder here, what's pretty cool about this

00:17:26.144 --> 00:17:27.825
<v Speaker 1>is if I and I'll even show that

00:17:27.825 --> 00:17:29.184
<v Speaker 1>there's no smoke and mirrors here. If I

00:17:29.184 --> 00:17:30.304
<v Speaker 1>do an image l s, you see I

00:17:30.304 --> 00:17:31.904
<v Speaker 1>had no images locally on my machine, so

00:17:31.904 --> 00:17:34.625
<v Speaker 1>there's no pre built caches or anything already

00:17:34.625 --> 00:17:35.825
<v Speaker 1>on my machine here.

00:17:36.384 --> 00:17:38.225
<v Speaker 1>But if I just do Docker Compose up,

00:17:39.730 --> 00:17:41.809
<v Speaker 1>it's gonna say, well, hey, I need to

00:17:41.809 --> 00:17:44.610
<v Speaker 1>build this particular image here, and you'll see

00:17:44.610 --> 00:17:46.129
<v Speaker 1>that it's using my

00:17:46.450 --> 00:17:48.289
<v Speaker 1>my DevRel builder here,

00:17:48.530 --> 00:17:50.370
<v Speaker 1>and within just a couple seconds, you know,

00:17:50.370 --> 00:17:52.290
<v Speaker 1>downloaded all the layers that were needed, and

00:17:52.290 --> 00:17:53.890
<v Speaker 1>now I've got my application up and running.

00:17:54.045 --> 00:17:56.445
<v Speaker 1>K? And I didn't have anything already downloaded,

00:17:56.445 --> 00:17:58.525
<v Speaker 1>and it was, you know, spun up pretty

00:17:58.525 --> 00:18:00.925
<v Speaker 1>quickly. Now I can start my development right

00:18:00.925 --> 00:18:01.485
<v Speaker 1>away.

00:18:03.485 --> 00:18:05.005
<v Speaker 1>And so what's cool about this, again, is

00:18:05.005 --> 00:18:06.285
<v Speaker 1>I don't have to change any of the

00:18:06.285 --> 00:18:07.885
<v Speaker 1>commands that I'm using. I don't have to

00:18:07.885 --> 00:18:10.150
<v Speaker 1>add additional arguments. I just simply run Docker

00:18:10.150 --> 00:18:11.029
<v Speaker 1>Compose up,

00:18:11.670 --> 00:18:13.910
<v Speaker 1>and the Compose will use whatever the configured

00:18:13.910 --> 00:18:17.030
<v Speaker 1>Buildx builder is, and since I've set my

00:18:17.030 --> 00:18:18.390
<v Speaker 1>Cloud Builder as the default,

00:18:18.710 --> 00:18:20.870
<v Speaker 1>it'll use that. And and what's also cool

00:18:20.870 --> 00:18:23.125
<v Speaker 1>about this then too is that, again, if

00:18:23.125 --> 00:18:24.804
<v Speaker 1>I'm in an environment where, hey, maybe I

00:18:24.804 --> 00:18:26.804
<v Speaker 1>don't have good internet connectivity right now, and

00:18:26.804 --> 00:18:27.924
<v Speaker 1>I don't want to use it, and I

00:18:27.924 --> 00:18:29.445
<v Speaker 1>just wanna stay local,

00:18:29.605 --> 00:18:31.125
<v Speaker 1>then I can just switch my builder back

00:18:31.125 --> 00:18:33.845
<v Speaker 1>to my local builder and continue on my

00:18:33.845 --> 00:18:35.525
<v Speaker 1>way. So again, I've got the choice of

00:18:35.525 --> 00:18:37.045
<v Speaker 1>do I want to use remote, do I

00:18:37.045 --> 00:18:38.820
<v Speaker 1>want to use local, and I can pick

00:18:38.820 --> 00:18:40.019
<v Speaker 1>and choose between

00:18:40.660 --> 00:18:41.619
<v Speaker 1>each of them

00:18:42.100 --> 00:18:44.260
<v Speaker 1>based on what my current needs are. And

00:18:44.260 --> 00:18:45.299
<v Speaker 1>I don't have to change any of my

00:18:45.299 --> 00:18:47.379
<v Speaker 1>commands, I just change my configuration.

00:18:48.179 --> 00:18:49.539
<v Speaker 1>So maybe I'll pause there for a second.

00:18:49.539 --> 00:18:50.820
<v Speaker 1>Any questions coming up yet?

00:18:53.495 --> 00:18:54.934
<v Speaker 1>Oh, I think you're muted.

00:18:59.975 --> 00:19:01.655
<v Speaker 1>Or maybe I could maybe I just can't

00:19:01.655 --> 00:19:01.975
<v Speaker 1>hear you.

00:19:11.740 --> 00:19:13.260
<v Speaker 1>The fun of livestreams. Yeah.

00:19:25.195 --> 00:19:26.955
<v Speaker 1>This one, do a little song and dance.

00:19:26.955 --> 00:19:27.195
<v Speaker 1>Right?

00:19:52.725 --> 00:19:53.925
<v Speaker 1>Not hearing anything yet.

00:20:08.210 --> 00:20:09.409
<v Speaker 1>Okay. Yeah. Go for it.

00:20:15.345 --> 00:20:16.945
<v Speaker 1>So maybe while he's doing that, I'll I'll

00:20:16.945 --> 00:20:18.065
<v Speaker 1>just continue

00:20:18.465 --> 00:20:20.865
<v Speaker 1>chatting through some of the demo whatnot. And

00:20:20.945 --> 00:20:22.465
<v Speaker 1>so maybe if you throw the screen share

00:20:22.465 --> 00:20:23.265
<v Speaker 1>back up, then we'll

00:20:24.065 --> 00:20:26.180
<v Speaker 1>here we go. So so, yeah, I can

00:20:26.180 --> 00:20:27.380
<v Speaker 1>do a compose up here.

00:20:37.155 --> 00:20:39.235
<v Speaker 1>A normal build first. And, also, I'll just

00:20:39.235 --> 00:20:41.635
<v Speaker 1>call this sample React app with the final

00:20:41.635 --> 00:20:43.555
<v Speaker 1>dot to do my build here. And, again,

00:20:43.555 --> 00:20:45.315
<v Speaker 1>we'll see that this is going to use

00:20:45.315 --> 00:20:48.115
<v Speaker 1>the that cloud builder. And since I built

00:20:48.115 --> 00:20:50.915
<v Speaker 1>this earlier, k, on the the remote,

00:20:52.049 --> 00:20:54.849
<v Speaker 1>again, using this remote environment, all of build

00:20:55.009 --> 00:20:56.929
<v Speaker 1>layers are cached here.

00:20:57.490 --> 00:20:58.850
<v Speaker 1>And so even though I didn't have the

00:20:58.850 --> 00:21:01.090
<v Speaker 1>image locally, I haven't built it locally, anything

00:21:01.090 --> 00:21:03.250
<v Speaker 1>of that sort, since it's a shared cache

00:21:03.250 --> 00:21:03.730
<v Speaker 1>environment,

00:21:04.945 --> 00:21:06.865
<v Speaker 1>I can leverage that cache even though, again,

00:21:06.865 --> 00:21:07.905
<v Speaker 1>I'd had nothing

00:21:08.145 --> 00:21:10.465
<v Speaker 1>on my local machine. And what's cool about

00:21:10.465 --> 00:21:11.825
<v Speaker 1>this then is that if I pass this

00:21:11.825 --> 00:21:13.265
<v Speaker 1>off to a teammate and they clone this

00:21:13.265 --> 00:21:15.185
<v Speaker 1>repo and do the build, they're gonna get

00:21:15.185 --> 00:21:17.345
<v Speaker 1>the same cache, and it's gonna build immediately

00:21:17.345 --> 00:21:18.145
<v Speaker 1>as

00:21:18.840 --> 00:21:20.120
<v Speaker 1>Now if I go in here and I

00:21:20.120 --> 00:21:21.799
<v Speaker 1>change some of this to, you know, hey,

00:21:21.799 --> 00:21:23.559
<v Speaker 1>let's make this more exciting, add some more

00:21:23.559 --> 00:21:24.759
<v Speaker 1>exclamation points,

00:21:25.400 --> 00:21:26.039
<v Speaker 1>and then

00:21:26.520 --> 00:21:29.320
<v Speaker 1>do another build, in this case, obviously, that's

00:21:29.320 --> 00:21:29.960
<v Speaker 1>gonna

00:21:31.315 --> 00:21:33.235
<v Speaker 1>the cache is gonna be a miss here,

00:21:33.235 --> 00:21:35.395
<v Speaker 1>and we'll actually see the the build. I'll

00:21:35.395 --> 00:21:37.955
<v Speaker 1>download those layer, the the new layers, and

00:21:38.195 --> 00:21:40.835
<v Speaker 1>good to go here. So, again, by having

00:21:40.835 --> 00:21:41.875
<v Speaker 1>this remote environment,

00:21:43.529 --> 00:21:46.409
<v Speaker 1>any any member of my team that's building

00:21:46.409 --> 00:21:48.570
<v Speaker 1>with this is helping populate a cache that

00:21:48.570 --> 00:21:50.649
<v Speaker 1>then the rest of us can all leverage,

00:21:50.809 --> 00:21:52.970
<v Speaker 1>making our builds theoretically faster.

00:22:01.735 --> 00:22:03.335
<v Speaker 1>I'm still not hearing you.

00:22:04.775 --> 00:22:05.494
<v Speaker 1>Weird.

00:22:06.294 --> 00:22:09.095
<v Speaker 1>Now I'm wondering if it's

00:22:14.710 --> 00:22:15.990
<v Speaker 1>or maybe if a

00:22:16.950 --> 00:22:18.790
<v Speaker 1>viewer is watching, maybe

00:22:18.790 --> 00:22:21.429
<v Speaker 1>confirm if if it's just me or not.

00:22:24.295 --> 00:22:25.575
<v Speaker 1>I guess I can pull up the stream

00:22:25.575 --> 00:22:25.815
<v Speaker 1>too.

00:22:57.655 --> 00:22:59.015
<v Speaker 1>That's why I do a little song and

00:22:59.015 --> 00:22:59.335
<v Speaker 1>dance.

00:23:01.710 --> 00:23:02.350
<v Speaker 1>Okay.

00:23:03.950 --> 00:23:05.230
<v Speaker 1>Can't hear either.

00:23:08.190 --> 00:23:09.710
<v Speaker 1>Okay. I at least pulled up the stream

00:23:09.710 --> 00:23:11.230
<v Speaker 1>from a couple minutes ago and

00:23:11.950 --> 00:23:12.909
<v Speaker 1>confirmed.

00:23:13.390 --> 00:23:14.110
<v Speaker 1>Okay. Yeah.

00:23:22.164 --> 00:23:24.725
<v Speaker 1>We finally silence. Hey. Hey. Getting getting

00:23:24.725 --> 00:23:25.284
<v Speaker 1>some

00:23:25.684 --> 00:23:27.284
<v Speaker 1>fun comments coming into chat.

00:23:48.325 --> 00:23:49.925
<v Speaker 1>Strange. Yeah. I still can't hear you.

00:25:05.590 --> 00:25:07.350
<v Speaker 1>I'm just gonna have fun with chat here.

00:25:07.350 --> 00:25:07.590
<v Speaker 1>So

00:25:12.065 --> 00:25:13.665
<v Speaker 1>our host is muted here.

00:26:07.544 --> 00:26:08.024
<v Speaker 1>Interesting.

00:26:19.140 --> 00:26:20.260
<v Speaker 1>Okay. Sounds good.
