WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 51b132eb-4d3e-4446-a4ac-5d4fdcec9e77
Created: 2025-04-29T15:16:58.732Z
Duration: 4561.9844
Channels: 1

00:02:41.435 --> 00:02:42.314
<v Speaker 0>Hello,

00:02:42.314 --> 00:02:44.474
<v Speaker 0>and welcome back to the Rawkode Academy.

00:02:45.590 --> 00:02:47.750
<v Speaker 0>My name is David. It's so long since

00:02:47.750 --> 00:02:48.870
<v Speaker 0>I've done one of these. I forgot my

00:02:48.870 --> 00:02:50.549
<v Speaker 0>own name. My name is David Flanagan, although

00:02:50.549 --> 00:02:52.070
<v Speaker 0>you may know me as Rawkode.

00:02:52.390 --> 00:02:54.629
<v Speaker 0>And today, we're taking a look at more

00:02:54.629 --> 00:02:57.189
<v Speaker 0>open source cloud native Kubernetes container, all the

00:02:57.189 --> 00:02:58.390
<v Speaker 0>cool things technologies.

00:02:59.105 --> 00:03:01.105
<v Speaker 0>Today, we're taking a look at Portainer,

00:03:01.105 --> 00:03:04.305
<v Speaker 0>and I am joined by cofounder, maintainer, developer,

00:03:04.305 --> 00:03:06.864
<v Speaker 0>all the hats, Neil Cresswell. Hey, man. How's

00:03:06.864 --> 00:03:07.425
<v Speaker 0>it going?

00:03:08.465 --> 00:03:10.305
<v Speaker 1>It's going very good. I'm gonna correct you

00:03:10.305 --> 00:03:11.905
<v Speaker 1>though. I'm definitely not a developer.

00:03:12.569 --> 00:03:13.530
<v Speaker 0>Oh, no.

00:03:13.930 --> 00:03:15.050
<v Speaker 0>Oh, god.

00:03:16.090 --> 00:03:18.410
<v Speaker 1>I'm definitely not a developer. I am an

00:03:18.410 --> 00:03:20.170
<v Speaker 1>engineer and a consultant, but I'm definitely not

00:03:20.170 --> 00:03:21.690
<v Speaker 1>a developer. And to be fair, you don't

00:03:21.690 --> 00:03:23.290
<v Speaker 1>want me anywhere near code.

00:03:23.930 --> 00:03:26.250
<v Speaker 0>Alright. Well, apologies for that. Maybe you could

00:03:26.250 --> 00:03:27.455
<v Speaker 0>give us a little bit of background on

00:03:27.455 --> 00:03:29.215
<v Speaker 0>yourself then and correct me at the same

00:03:29.215 --> 00:03:29.775
<v Speaker 0>time.

00:03:31.375 --> 00:03:33.375
<v Speaker 1>Sure. So, yes, I I am the cofounder

00:03:33.375 --> 00:03:34.655
<v Speaker 1>of Portainer.

00:03:35.855 --> 00:03:38.735
<v Speaker 1>And I I I built Portainer to solve

00:03:38.735 --> 00:03:40.095
<v Speaker 1>a problem that I had a number of

00:03:40.095 --> 00:03:43.260
<v Speaker 1>years ago, which was how to make the

00:03:43.580 --> 00:03:46.460
<v Speaker 1>transitional jump from someone managing

00:03:47.500 --> 00:03:48.860
<v Speaker 1>virtual infrastructure

00:03:48.860 --> 00:03:51.180
<v Speaker 1>to someone who now needs to manage container

00:03:51.180 --> 00:03:52.300
<v Speaker 1>based infrastructure.

00:03:52.940 --> 00:03:55.900
<v Speaker 1>My entire career has been spent in the

00:03:55.900 --> 00:03:56.860
<v Speaker 1>infrastructure world.

00:03:57.555 --> 00:04:00.035
<v Speaker 1>I was a engineer at IBM. I was

00:04:00.035 --> 00:04:02.115
<v Speaker 1>a consultant at IBM. I was consultant at

00:04:02.115 --> 00:04:04.995
<v Speaker 1>VMware. I I I lived and breathed, you

00:04:04.995 --> 00:04:07.555
<v Speaker 1>know, infrastructure and virtual infrastructure technology.

00:04:08.675 --> 00:04:11.555
<v Speaker 1>And seven years ago, v m VMware themselves

00:04:11.555 --> 00:04:13.900
<v Speaker 1>opened my eyes to the wonderful power of

00:04:13.900 --> 00:04:16.539
<v Speaker 1>Docker, and I'm like, this thing is amazing.

00:04:16.539 --> 00:04:18.459
<v Speaker 1>It's an absolute game changer.

00:04:18.699 --> 00:04:22.300
<v Speaker 1>But we're going from a very, very mature

00:04:22.699 --> 00:04:23.420
<v Speaker 1>and

00:04:23.660 --> 00:04:24.300
<v Speaker 1>well

00:04:24.620 --> 00:04:25.500
<v Speaker 1>tooled

00:04:26.625 --> 00:04:27.585
<v Speaker 1>ecosystem

00:04:27.585 --> 00:04:29.505
<v Speaker 1>around virtual infrastructure.

00:04:30.145 --> 00:04:32.065
<v Speaker 1>I mean, they they were you know, VMware

00:04:32.065 --> 00:04:34.705
<v Speaker 1>had had the tooling nailed for virtual infrastructure

00:04:34.945 --> 00:04:37.825
<v Speaker 1>to this new world of of containers.

00:04:38.410 --> 00:04:40.890
<v Speaker 1>And, oh my goodness, it was like, we

00:04:40.890 --> 00:04:42.570
<v Speaker 1>have just gone back in time,

00:04:43.210 --> 00:04:46.170
<v Speaker 1>you know, ten, fifteen years there because we've

00:04:46.330 --> 00:04:48.250
<v Speaker 1>you know, it to me, Docker at the

00:04:48.250 --> 00:04:50.570
<v Speaker 1>time felt like the early early versions of

00:04:50.570 --> 00:04:51.930
<v Speaker 1>of of VMware

00:04:52.010 --> 00:04:52.970
<v Speaker 1>ESX

00:04:53.044 --> 00:04:54.565
<v Speaker 1>way back in the day. And I'm like,

00:04:54.885 --> 00:04:57.845
<v Speaker 1>okay. Let's not try and have this experience

00:04:57.845 --> 00:05:00.005
<v Speaker 1>be ten years and leap and and go

00:05:00.005 --> 00:05:02.965
<v Speaker 1>from nothing to highly adopted. Let's try and

00:05:02.965 --> 00:05:04.324
<v Speaker 1>create a bit of tooling to help people

00:05:04.324 --> 00:05:06.645
<v Speaker 1>make that leap, make that jump from being

00:05:06.645 --> 00:05:10.040
<v Speaker 1>virtual, you virtual engineers to container engineers.

00:05:10.200 --> 00:05:11.720
<v Speaker 1>So I built it for me

00:05:11.960 --> 00:05:13.000
<v Speaker 1>predominantly,

00:05:13.640 --> 00:05:14.200
<v Speaker 1>and

00:05:14.760 --> 00:05:16.280
<v Speaker 1>it's gone nuts.

00:05:17.480 --> 00:05:19.480
<v Speaker 1>I I I like to tell a a

00:05:19.480 --> 00:05:20.120
<v Speaker 1>story.

00:05:20.760 --> 00:05:23.160
<v Speaker 1>We yeah. Anthony, my cofounder, and I, we

00:05:23.160 --> 00:05:25.504
<v Speaker 1>we we built this thing. We put it

00:05:25.504 --> 00:05:27.504
<v Speaker 1>out there, open source, not knowing what that

00:05:27.504 --> 00:05:29.264
<v Speaker 1>meant, of course. So yeah. Because we were

00:05:29.264 --> 00:05:30.305
<v Speaker 1>using it internally.

00:05:31.425 --> 00:05:32.544
<v Speaker 1>Put it out there.

00:05:33.264 --> 00:05:35.264
<v Speaker 1>Somehow, it got picked up on Hacker News.

00:05:35.264 --> 00:05:36.305
<v Speaker 1>This was in September.

00:05:37.120 --> 00:05:39.520
<v Speaker 1>I woke up on Christmas day six years

00:05:39.520 --> 00:05:41.200
<v Speaker 1>ago, and we had a million a million

00:05:41.200 --> 00:05:43.200
<v Speaker 1>downloads of the products. And I'm like, wow.

00:05:43.520 --> 00:05:44.800
<v Speaker 1>Jeez. What happened there?

00:05:46.000 --> 00:05:48.240
<v Speaker 1>New Year's day, ten million downloads.

00:05:49.604 --> 00:05:50.645
<v Speaker 1>It

00:05:50.884 --> 00:05:54.005
<v Speaker 1>as is the power of of open source,

00:05:54.005 --> 00:05:55.685
<v Speaker 1>as is the power of things like Hacker

00:05:55.685 --> 00:05:58.725
<v Speaker 1>News' ability to propagate a good story, and

00:05:58.884 --> 00:06:00.805
<v Speaker 1>from there, never stopped. I think we're at

00:06:00.805 --> 00:06:01.685
<v Speaker 1>3,400,000,000

00:06:01.685 --> 00:06:04.005
<v Speaker 1>downloads of the products over over the life

00:06:04.005 --> 00:06:04.245
<v Speaker 1>now.

00:06:05.260 --> 00:06:06.780
<v Speaker 1>So it's ridiculous.

00:06:06.780 --> 00:06:08.540
<v Speaker 1>So there you go. It was a long

00:06:08.540 --> 00:06:09.900
<v Speaker 1>winded way of saying hello.

00:06:10.780 --> 00:06:13.419
<v Speaker 0>Yeah. Wow. I had no idea just how

00:06:13.419 --> 00:06:15.820
<v Speaker 0>quickly the growth was. I mean, I definitely

00:06:15.820 --> 00:06:18.620
<v Speaker 0>remember when Portainer was announced. I don't know

00:06:18.620 --> 00:06:19.820
<v Speaker 0>if it was the hacker news, maybe it

00:06:19.820 --> 00:06:21.405
<v Speaker 0>was a bit longer or a bit shorter

00:06:21.405 --> 00:06:22.685
<v Speaker 0>after. I have no idea.

00:06:23.085 --> 00:06:24.925
<v Speaker 0>But when I was going to user groups

00:06:24.925 --> 00:06:27.005
<v Speaker 0>up and down The UK, it felt like

00:06:27.005 --> 00:06:29.165
<v Speaker 0>everybody was running Portainer in their house. They

00:06:29.165 --> 00:06:31.485
<v Speaker 0>were running containers using Portainer as the UI.

00:06:31.485 --> 00:06:33.725
<v Speaker 0>Like, I imagine it spread pretty much like

00:06:33.725 --> 00:06:35.900
<v Speaker 0>wildfire. I mean, 10,000,000 downloads in what space

00:06:35.900 --> 00:06:37.660
<v Speaker 0>of a week or two weeks is

00:06:37.900 --> 00:06:40.540
<v Speaker 0>that's wild. It's nuts. Yeah. It was nuts.

00:06:40.699 --> 00:06:42.539
<v Speaker 1>And at at that stage, was just two

00:06:42.539 --> 00:06:45.979
<v Speaker 1>of us and we we seemingly became the

00:06:45.979 --> 00:06:47.100
<v Speaker 1>de facto

00:06:47.340 --> 00:06:50.539
<v Speaker 1>docker help desk. And so, yeah, our our

00:06:50.475 --> 00:06:52.395
<v Speaker 1>our internal communications,

00:06:52.395 --> 00:06:54.395
<v Speaker 1>everything else, we we spent so much time

00:06:54.715 --> 00:06:56.635
<v Speaker 1>it this was kind of a a side

00:06:56.635 --> 00:06:58.635
<v Speaker 1>a side hack. Right? And so we're spending

00:06:58.635 --> 00:07:01.195
<v Speaker 1>so much time answering questions because we were

00:07:01.195 --> 00:07:02.875
<v Speaker 1>we were spending a lot of time understanding

00:07:02.875 --> 00:07:03.355
<v Speaker 1>the technology.

00:07:04.060 --> 00:07:05.500
<v Speaker 1>And so we we were able to answer

00:07:05.500 --> 00:07:08.060
<v Speaker 1>questions pretty pretty rapid fire, you know, problem

00:07:08.060 --> 00:07:10.060
<v Speaker 1>solution, problem solution, problem solution. So

00:07:10.620 --> 00:07:12.780
<v Speaker 0>You kind of addressed this, but I'm gonna

00:07:12.780 --> 00:07:13.820
<v Speaker 0>ask you and see if can get a

00:07:13.820 --> 00:07:15.820
<v Speaker 0>bit more detail. Like, you you said that

00:07:16.145 --> 00:07:18.065
<v Speaker 0>the technology containers,

00:07:18.065 --> 00:07:19.665
<v Speaker 0>it felt like you were back ten years.

00:07:19.665 --> 00:07:20.945
<v Speaker 0>You were used to this very,

00:07:21.345 --> 00:07:23.585
<v Speaker 0>I don't know, VMware with lots of tooling

00:07:23.585 --> 00:07:25.985
<v Speaker 0>environment where things maybe just worked or were

00:07:25.985 --> 00:07:28.400
<v Speaker 0>easier. But was there a specific need that

00:07:28.400 --> 00:07:30.560
<v Speaker 0>you were trying to solve with Portainer as

00:07:30.560 --> 00:07:32.319
<v Speaker 0>you were adopting containers, you and you and

00:07:32.319 --> 00:07:34.240
<v Speaker 0>Anthony? Like, what what was the the the

00:07:34.240 --> 00:07:37.039
<v Speaker 0>drive? What pushed you into building this new

00:07:37.039 --> 00:07:37.600
<v Speaker 0>tool?

00:07:39.199 --> 00:07:41.840
<v Speaker 1>You know, I've I've always described and I

00:07:41.840 --> 00:07:43.645
<v Speaker 1>I still describe it to this day because

00:07:43.645 --> 00:07:45.085
<v Speaker 1>I don't think much has changed. I mean,

00:07:45.085 --> 00:07:46.605
<v Speaker 1>there's more tooling now, but in fact, it's

00:07:46.605 --> 00:07:48.605
<v Speaker 1>more complicated in my view because there's now

00:07:48.605 --> 00:07:50.525
<v Speaker 1>so many tools to choose from. But I've

00:07:50.525 --> 00:07:53.645
<v Speaker 1>always said a Docker host or a Kubernetes

00:07:53.645 --> 00:07:54.045
<v Speaker 1>cluster,

00:07:55.040 --> 00:07:58.320
<v Speaker 1>it's it's just very raw. Right? A Docker

00:07:58.320 --> 00:08:00.160
<v Speaker 1>host is like, in VMware speak, an e

00:08:00.320 --> 00:08:03.200
<v Speaker 1>an an ESXi host. A Kubernetes cluster is

00:08:03.200 --> 00:08:04.800
<v Speaker 1>like a a

00:08:05.600 --> 00:08:06.560
<v Speaker 1>a vSphere cluster.

00:08:07.555 --> 00:08:10.115
<v Speaker 1>You would never, in a million years, go

00:08:10.115 --> 00:08:12.675
<v Speaker 1>into mission critical production with just just the

00:08:12.675 --> 00:08:14.995
<v Speaker 1>bare metal e s s x I host,

00:08:15.074 --> 00:08:16.995
<v Speaker 1>and very, very few people would go into

00:08:16.995 --> 00:08:19.474
<v Speaker 1>mission critical production with just a VMware cluster.

00:08:19.849 --> 00:08:22.650
<v Speaker 1>You would have vCenter around the side to

00:08:22.650 --> 00:08:24.250
<v Speaker 1>help you with managing it. You'd you'd have

00:08:24.250 --> 00:08:26.330
<v Speaker 1>some some you know, something like Veeam or

00:08:26.330 --> 00:08:28.330
<v Speaker 1>some other tooling to give you backups. You'd

00:08:28.330 --> 00:08:30.810
<v Speaker 1>have some probably a product like SRM to

00:08:30.810 --> 00:08:32.490
<v Speaker 1>give you to give you Doctor replication or

00:08:32.490 --> 00:08:34.545
<v Speaker 1>or Doctor failover. You'd have things like like

00:08:34.545 --> 00:08:36.545
<v Speaker 1>VMware v v Realize to give you, you

00:08:36.545 --> 00:08:39.105
<v Speaker 1>know, insights into your into your your application.

00:08:39.665 --> 00:08:40.225
<v Speaker 1>And

00:08:40.865 --> 00:08:42.465
<v Speaker 1>one of one of the important things is

00:08:42.465 --> 00:08:43.505
<v Speaker 1>is VMware,

00:08:43.825 --> 00:08:46.305
<v Speaker 1>you know, recognized very early on having a

00:08:46.305 --> 00:08:48.225
<v Speaker 1>bunch of %

00:08:48.750 --> 00:08:50.990
<v Speaker 1>disparate tools, each with their own UI,

00:08:51.470 --> 00:08:53.790
<v Speaker 1>was not a recipe for success.

00:08:54.030 --> 00:08:56.670
<v Speaker 1>And that's why you find inside vCenter, they

00:08:56.670 --> 00:08:58.110
<v Speaker 1>added all of the plug ins and they

00:08:58.110 --> 00:09:00.350
<v Speaker 1>let you bring everything together. So from within

00:09:00.350 --> 00:09:01.390
<v Speaker 1>the vCenter screen,

00:09:01.835 --> 00:09:04.235
<v Speaker 1>you could configure things like like your NSX

00:09:04.235 --> 00:09:05.595
<v Speaker 1>storage, your vSAN

00:09:05.675 --> 00:09:08.555
<v Speaker 1>sorry. Your your NSX networking, your vSAN storage,

00:09:08.555 --> 00:09:09.915
<v Speaker 1>all of your observability,

00:09:09.915 --> 00:09:11.355
<v Speaker 1>everything else you could do from within the

00:09:11.355 --> 00:09:13.035
<v Speaker 1>one tool because they realized that was the

00:09:13.035 --> 00:09:13.195
<v Speaker 1>way.

00:09:13.850 --> 00:09:15.210
<v Speaker 1>And one of the things I I I

00:09:15.210 --> 00:09:17.850
<v Speaker 1>saw in the container ecosystem was,

00:09:18.650 --> 00:09:20.330
<v Speaker 1>one, at the time, there was no tooling.

00:09:20.330 --> 00:09:21.770
<v Speaker 1>There was just nothing. There was just the

00:09:21.770 --> 00:09:24.730
<v Speaker 1>the raw Docker and raw Kubernetes.

00:09:25.290 --> 00:09:27.210
<v Speaker 1>Over time, and we still see it now,

00:09:27.210 --> 00:09:28.490
<v Speaker 1>you know, go go log in to the

00:09:28.490 --> 00:09:31.334
<v Speaker 1>CNCF landscape. There's a bunch of disparate tooling,

00:09:31.574 --> 00:09:33.894
<v Speaker 1>but it's disparate tooling. There's no there there's

00:09:33.894 --> 00:09:35.975
<v Speaker 1>nothing stitching all that tooling together into a

00:09:35.975 --> 00:09:36.535
<v Speaker 1>single

00:09:36.855 --> 00:09:39.014
<v Speaker 1>experience that makes it really easy for someone

00:09:39.014 --> 00:09:41.175
<v Speaker 1>to jump in and actually manage everything. And,

00:09:41.255 --> 00:09:43.790
<v Speaker 1>yeah, my my whole my whole ethos in

00:09:43.790 --> 00:09:46.590
<v Speaker 1>life is remove complexity. You know, complexity causes

00:09:46.590 --> 00:09:49.390
<v Speaker 1>issues. It just does. And I I hate

00:09:49.390 --> 00:09:51.470
<v Speaker 1>complexity with an absolute passion. And so I

00:09:51.470 --> 00:09:54.030
<v Speaker 1>I try to remove complexities, and

00:09:54.510 --> 00:09:56.510
<v Speaker 1>and I do that by by pulling tooling

00:09:56.510 --> 00:09:59.205
<v Speaker 1>together into one place. That's why in Portainer,

00:09:59.205 --> 00:10:01.845
<v Speaker 1>you've got GitOps, you've got UI interfacing, you've

00:10:01.845 --> 00:10:03.765
<v Speaker 1>got policy engines, you've got everything you can

00:10:03.765 --> 00:10:05.685
<v Speaker 1>imagine, because I just hate the idea that

00:10:05.685 --> 00:10:06.805
<v Speaker 1>you have to go out into a bunch

00:10:06.805 --> 00:10:09.365
<v Speaker 1>of separate disparate tools to achieve what you

00:10:09.365 --> 00:10:10.965
<v Speaker 1>should be able to achieve within within one

00:10:10.965 --> 00:10:11.205
<v Speaker 1>tool.

00:10:12.270 --> 00:10:13.070
<v Speaker 0>Nice.

00:10:13.150 --> 00:10:15.870
<v Speaker 0>So would it be fair to summarize that

00:10:15.870 --> 00:10:17.790
<v Speaker 0>as Portainer is your single pane of glass

00:10:17.790 --> 00:10:20.590
<v Speaker 0>for containers in Kubernetes? Is that your mission?

00:10:20.590 --> 00:10:21.550
<v Speaker 0>Is that the goal?

00:10:22.670 --> 00:10:24.430
<v Speaker 1>It is. A single pane of glass is

00:10:24.430 --> 00:10:27.824
<v Speaker 1>massively overused. I I prefer the I I

00:10:27.824 --> 00:10:30.225
<v Speaker 1>prefer the term manager of managers.

00:10:31.584 --> 00:10:33.425
<v Speaker 1>So, yeah, we we we like to be

00:10:33.504 --> 00:10:35.264
<v Speaker 1>or or to use to use Lord of

00:10:35.264 --> 00:10:37.824
<v Speaker 1>the Rings, we wanna be the the the

00:10:37.824 --> 00:10:39.185
<v Speaker 1>one tool to rule them all

00:10:40.160 --> 00:10:41.680
<v Speaker 1>kind of thing. So we we wanna be

00:10:41.680 --> 00:10:44.079
<v Speaker 1>this this one piece of tooling that that

00:10:44.079 --> 00:10:46.720
<v Speaker 1>your internal staff have to learn. So so

00:10:46.720 --> 00:10:48.240
<v Speaker 1>you learn Portainer. And by the way, Portainer

00:10:48.240 --> 00:10:50.000
<v Speaker 1>is very intuitive. There's no need to be

00:10:50.000 --> 00:10:52.000
<v Speaker 1>certified in Portainer because you just don't need

00:10:52.000 --> 00:10:53.279
<v Speaker 1>to be. It's so intuitive.

00:10:54.435 --> 00:10:56.355
<v Speaker 1>And so once once people get get a

00:10:56.355 --> 00:10:57.795
<v Speaker 1>taste of Portainer, they don't they don't need

00:10:57.795 --> 00:10:59.395
<v Speaker 1>to use anything else. I mean, you could

00:10:59.395 --> 00:11:00.595
<v Speaker 1>if you wanted to. We we don't we

00:11:00.595 --> 00:11:01.715
<v Speaker 1>don't lock you in. If you wanna go

00:11:01.715 --> 00:11:04.355
<v Speaker 1>use other tooling alongside us, feel free. But

00:11:04.355 --> 00:11:06.755
<v Speaker 1>what we say is for 80% of of

00:11:06.755 --> 00:11:07.235
<v Speaker 1>organizations,

00:11:07.970 --> 00:11:10.690
<v Speaker 1>Portainer's native capability is is enough.

00:11:11.410 --> 00:11:12.130
<v Speaker 0>Right.

00:11:12.690 --> 00:11:14.770
<v Speaker 0>You've already mentioned a bunch of features that

00:11:14.770 --> 00:11:16.850
<v Speaker 0>I had no idea existed in Portainer. Like,

00:11:16.850 --> 00:11:18.450
<v Speaker 0>you you said get ups. Like, I had

00:11:18.450 --> 00:11:20.050
<v Speaker 0>no idea there was that kind of level

00:11:20.050 --> 00:11:21.330
<v Speaker 0>to it. And I've seen something on your

00:11:21.330 --> 00:11:23.010
<v Speaker 0>blogs that I thought was quite interesting too

00:11:23.010 --> 00:11:26.185
<v Speaker 0>about being a management platform for Kubernetes.

00:11:26.505 --> 00:11:28.185
<v Speaker 0>But it sounds to me like Portainer has

00:11:28.185 --> 00:11:30.584
<v Speaker 0>kind of evolved greatly over the last number

00:11:30.584 --> 00:11:31.385
<v Speaker 0>of years.

00:11:31.625 --> 00:11:33.705
<v Speaker 0>I'm I'm kind of excited to what we're

00:11:33.705 --> 00:11:35.225
<v Speaker 0>gonna see now today because

00:11:36.090 --> 00:11:38.650
<v Speaker 0>it could be contained like, container was, you

00:11:38.650 --> 00:11:40.170
<v Speaker 0>know, the UI, I see go run this

00:11:40.170 --> 00:11:41.690
<v Speaker 0>container for me. It does it and I'm

00:11:41.690 --> 00:11:44.330
<v Speaker 0>like, cool. Awesome. But, you know, it it

00:11:44.330 --> 00:11:45.850
<v Speaker 0>has evolved a lot then. Right? So you

00:11:45.850 --> 00:11:47.530
<v Speaker 0>wanna maybe share a bit more details on

00:11:47.530 --> 00:11:48.890
<v Speaker 0>what that's been like for last couple of

00:11:48.890 --> 00:11:49.050
<v Speaker 0>years?

00:11:50.295 --> 00:11:53.175
<v Speaker 1>You have no idea how hard it is

00:11:53.175 --> 00:11:56.695
<v Speaker 1>to to to actually change people's perception of

00:11:56.695 --> 00:11:58.214
<v Speaker 1>a brand that's been around a while. I

00:11:58.214 --> 00:12:00.615
<v Speaker 1>I genuinely believe it might have been easier

00:12:00.615 --> 00:12:02.455
<v Speaker 1>for me to have stopped using the brand

00:12:02.455 --> 00:12:03.015
<v Speaker 1>Portainer,

00:12:03.730 --> 00:12:06.770
<v Speaker 1>kept kept the same product, simply change change

00:12:06.770 --> 00:12:08.770
<v Speaker 1>the name to something else, and and and

00:12:08.770 --> 00:12:11.170
<v Speaker 1>we we would have been some some cool

00:12:11.170 --> 00:12:13.410
<v Speaker 1>new new application out there on the market.

00:12:14.130 --> 00:12:17.890
<v Speaker 1>If you if if you ask people about

00:12:16.765 --> 00:12:18.925
<v Speaker 1>about Portainer, they'll almost always respond with what

00:12:18.925 --> 00:12:20.205
<v Speaker 1>we were three years ago.

00:12:21.565 --> 00:12:24.125
<v Speaker 1>In in the last two years, we've spent

00:12:24.125 --> 00:12:25.725
<v Speaker 1>over $10,000,000

00:12:26.285 --> 00:12:29.404
<v Speaker 1>re reengineering the product to be this this

00:12:29.404 --> 00:12:30.045
<v Speaker 1>Kubernetes,

00:12:30.550 --> 00:12:34.150
<v Speaker 1>in fact, universal management platform. So Kubernetes, Docker,

00:12:34.150 --> 00:12:36.150
<v Speaker 1>Docker Swarm, of course, Nomad,

00:12:36.790 --> 00:12:39.990
<v Speaker 1>any Kubernetes, any cloud, anywhere, laptop, data center,

00:12:39.990 --> 00:12:40.630
<v Speaker 1>edge,

00:12:41.030 --> 00:12:42.950
<v Speaker 1>anything. You know? It it's this this universal

00:12:42.950 --> 00:12:45.155
<v Speaker 1>management tool set that just simply says, if

00:12:45.155 --> 00:12:46.595
<v Speaker 1>if you are dealing

00:12:46.915 --> 00:12:48.115
<v Speaker 1>in containers,

00:12:48.675 --> 00:12:51.075
<v Speaker 1>then Portainer is the tool that you need

00:12:51.075 --> 00:12:53.635
<v Speaker 1>to to get your get your applications developed

00:12:53.635 --> 00:12:54.435
<v Speaker 1>fast,

00:12:54.835 --> 00:12:57.155
<v Speaker 1>into production fast, safe, secure.

00:12:58.199 --> 00:13:01.160
<v Speaker 1>That's it. Alright? So, yes, there is there

00:13:01.160 --> 00:13:03.240
<v Speaker 1>there there's a GitOps engine built in. There's

00:13:03.240 --> 00:13:04.680
<v Speaker 1>basic observability

00:13:04.680 --> 00:13:06.279
<v Speaker 1>built in so you can see what your

00:13:06.279 --> 00:13:08.040
<v Speaker 1>application's doing. You can see if things are

00:13:08.040 --> 00:13:09.959
<v Speaker 1>up or down. You can see see the

00:13:09.959 --> 00:13:11.879
<v Speaker 1>events. We make it really, really easy to

00:13:11.879 --> 00:13:14.255
<v Speaker 1>discover what's going on in your environment.

00:13:15.695 --> 00:13:17.375
<v Speaker 1>One of the big things. Right? If if

00:13:17.375 --> 00:13:18.175
<v Speaker 1>you don't know

00:13:18.975 --> 00:13:20.815
<v Speaker 1>the commands to type in,

00:13:21.615 --> 00:13:23.375
<v Speaker 1>then you can't type in the commands.

00:13:23.615 --> 00:13:25.695
<v Speaker 1>So if you don't know Kubernetes can do

00:13:25.695 --> 00:13:26.015
<v Speaker 1>something,

00:13:26.550 --> 00:13:28.230
<v Speaker 1>then you don't know the command to do

00:13:28.230 --> 00:13:30.870
<v Speaker 1>that something, then you're ignorant to the fact

00:13:30.870 --> 00:13:33.029
<v Speaker 1>that there is this amazing piece of capability.

00:13:33.190 --> 00:13:35.750
<v Speaker 1>Well, Tana makes it blatantly obvious because there's

00:13:35.750 --> 00:13:37.510
<v Speaker 1>a button that says show this and you

00:13:37.589 --> 00:13:38.790
<v Speaker 1>oh, what's this do? I'll click this. And

00:13:38.790 --> 00:13:40.310
<v Speaker 1>now you can you've just you've just discovered

00:13:40.310 --> 00:13:42.885
<v Speaker 1>a new piece of native capability

00:13:42.885 --> 00:13:44.965
<v Speaker 1>of Kubernetes or Docker. So we make it

00:13:44.965 --> 00:13:47.685
<v Speaker 1>really, really easy to to explore what's what's

00:13:47.685 --> 00:13:48.245
<v Speaker 1>there.

00:13:48.725 --> 00:13:49.285
<v Speaker 0>Yeah.

00:13:49.925 --> 00:13:51.925
<v Speaker 0>I'm assuming, and you can correct me if

00:13:51.925 --> 00:13:54.005
<v Speaker 0>I'm wrong, but the 10,000,000 that you've invested

00:13:54.005 --> 00:13:56.450
<v Speaker 0>did not come from $1 from three of

00:13:56.450 --> 00:13:59.649
<v Speaker 0>the five 3,500,000,000 people that downloaded it. So

00:13:59.649 --> 00:14:01.170
<v Speaker 0>I'm assuming the

00:14:01.649 --> 00:14:02.770
<v Speaker 0>the enterprise

00:14:02.930 --> 00:14:05.089
<v Speaker 0>business is is quite successful. The people would

00:14:05.089 --> 00:14:07.810
<v Speaker 0>know are taking Portainer and shipping real production

00:14:07.810 --> 00:14:08.290
<v Speaker 0>applications.

00:14:09.005 --> 00:14:10.845
<v Speaker 0>Is that correct? Like

00:14:11.805 --> 00:14:14.205
<v Speaker 1>We are VC backed, so the the the

00:14:14.205 --> 00:14:16.925
<v Speaker 1>money comes from from from VC companies who

00:14:16.925 --> 00:14:19.485
<v Speaker 1>believe in our vision and believe that there

00:14:19.485 --> 00:14:21.005
<v Speaker 1>is a commercial demand

00:14:21.485 --> 00:14:23.805
<v Speaker 1>for our Portainer business edition period.

00:14:24.630 --> 00:14:27.190
<v Speaker 1>And that's the uptake of that is growing

00:14:27.190 --> 00:14:29.430
<v Speaker 1>nicely. So, absolutely, there there is there is

00:14:29.430 --> 00:14:31.590
<v Speaker 1>definitely demand for people who want to take

00:14:31.590 --> 00:14:33.910
<v Speaker 1>what's available in the free version and expand

00:14:33.910 --> 00:14:36.310
<v Speaker 1>on it. You know, we we've expanded a

00:14:36.310 --> 00:14:38.765
<v Speaker 1>lot in regards to policy and controls and

00:14:38.765 --> 00:14:40.605
<v Speaker 1>and security and governance and all sorts of

00:14:40.605 --> 00:14:42.925
<v Speaker 1>things. We've built off the free version and

00:14:42.925 --> 00:14:44.765
<v Speaker 1>sell a commercial version

00:14:45.085 --> 00:14:46.765
<v Speaker 1>out there for those who want more than

00:14:46.765 --> 00:14:48.525
<v Speaker 1>what's in the free version. The free version

00:14:48.525 --> 00:14:50.045
<v Speaker 1>is still very feature rich, by the way,

00:14:50.045 --> 00:14:52.740
<v Speaker 1>and we've got, you know, roughly 700,000 users

00:14:52.740 --> 00:14:54.580
<v Speaker 1>who use the free version every single month.

00:14:54.580 --> 00:14:56.500
<v Speaker 1>They log in and do something every single

00:14:56.500 --> 00:14:58.260
<v Speaker 1>month. So the the there's a there's a

00:14:58.260 --> 00:15:00.260
<v Speaker 1>quite a big loyal global following of the

00:15:00.260 --> 00:15:00.980
<v Speaker 1>free version,

00:15:01.620 --> 00:15:03.620
<v Speaker 1>but the free version isn't isn't really enough

00:15:03.620 --> 00:15:05.860
<v Speaker 1>when when you get beyond one one team

00:15:05.860 --> 00:15:07.455
<v Speaker 1>using it. You you want a bit more

00:15:07.455 --> 00:15:09.055
<v Speaker 1>governance and control. So that's where the business

00:15:09.055 --> 00:15:11.855
<v Speaker 1>edition now comes in. Yeah. That's amazing. That's

00:15:11.855 --> 00:15:14.415
<v Speaker 0>awesome. That's exciting to hear as well. Like,

00:15:14.815 --> 00:15:16.255
<v Speaker 0>I I speak to a lot of people

00:15:16.335 --> 00:15:17.295
<v Speaker 0>that are

00:15:17.455 --> 00:15:19.455
<v Speaker 0>struggling with Kubernetes. A lot of people ask

00:15:19.455 --> 00:15:21.290
<v Speaker 0>me for advice, they want help. And I'm

00:15:21.290 --> 00:15:23.209
<v Speaker 0>actually seeing this trends now where where people

00:15:23.209 --> 00:15:25.449
<v Speaker 0>just don't actually want Kubernetes. They want a

00:15:25.449 --> 00:15:27.050
<v Speaker 0>platform to run their containers.

00:15:27.449 --> 00:15:29.209
<v Speaker 0>And it feels like Portainer should just be

00:15:29.209 --> 00:15:30.570
<v Speaker 0>that option that I'm giving to people. It

00:15:30.570 --> 00:15:32.089
<v Speaker 0>should be like, there's the UI, there's the

00:15:32.089 --> 00:15:34.505
<v Speaker 0>cut off operator to it. So I'm I'm

00:15:34.505 --> 00:15:36.505
<v Speaker 0>gonna just let you hand over to the

00:15:36.505 --> 00:15:38.185
<v Speaker 0>screen share and show me some awesome things

00:15:38.185 --> 00:15:40.025
<v Speaker 0>with Portainer if you're ready to go.

00:15:41.625 --> 00:15:42.505
<v Speaker 1>I am. The

00:15:44.345 --> 00:15:46.840
<v Speaker 1>it it so you're right. Portainer

00:15:47.080 --> 00:15:47.960
<v Speaker 1>Portainer's

00:15:47.960 --> 00:15:49.560
<v Speaker 1>goal is to try and make the underlying

00:15:49.560 --> 00:15:51.320
<v Speaker 1>technology irrelevant because at the end of the

00:15:51.320 --> 00:15:53.160
<v Speaker 1>day, it kind of is irrelevant.

00:15:53.400 --> 00:15:55.400
<v Speaker 1>It it kind of is. You actually want

00:15:55.400 --> 00:15:57.640
<v Speaker 1>your application live. You know, the the the

00:15:57.640 --> 00:15:59.880
<v Speaker 1>the business that employs you as a developer

00:15:59.880 --> 00:16:01.800
<v Speaker 1>or the business that employs you as an

00:16:01.800 --> 00:16:03.355
<v Speaker 1>ops person or what it you know, whatever

00:16:03.355 --> 00:16:05.275
<v Speaker 1>role that that you wanna be in. The

00:16:05.275 --> 00:16:07.275
<v Speaker 1>business that employs you doesn't really care about

00:16:07.275 --> 00:16:09.115
<v Speaker 1>the tech. That's unless, of course, you Google

00:16:09.115 --> 00:16:12.154
<v Speaker 1>or whatever else. Right? But most organizations, they

00:16:12.154 --> 00:16:13.515
<v Speaker 1>don't care about the tech. What they want

00:16:13.515 --> 00:16:15.835
<v Speaker 1>is a highly available system that delivers

00:16:16.250 --> 00:16:18.889
<v Speaker 1>digital applications to market. That's what they care

00:16:18.889 --> 00:16:20.329
<v Speaker 1>about. They don't care about the tech. You

00:16:20.329 --> 00:16:22.250
<v Speaker 1>know, we as we as techies care about

00:16:22.250 --> 00:16:23.770
<v Speaker 1>the tech, but the business doesn't.

00:16:24.490 --> 00:16:26.889
<v Speaker 1>But more and more often now, people are

00:16:26.889 --> 00:16:28.425
<v Speaker 1>saying, you know what? The tech is actually

00:16:28.425 --> 00:16:30.105
<v Speaker 1>causing me headaches. It's a little bit too

00:16:30.105 --> 00:16:32.265
<v Speaker 1>complicated for some use cases. I really wanna

00:16:32.265 --> 00:16:34.425
<v Speaker 1>try and and divorce myself from the from

00:16:34.425 --> 00:16:35.945
<v Speaker 1>as more of the tech as I can.

00:16:36.105 --> 00:16:38.105
<v Speaker 1>There's there's, of course, still a subset of

00:16:38.105 --> 00:16:39.785
<v Speaker 1>people who just love the tech because the

00:16:39.785 --> 00:16:41.850
<v Speaker 1>tech is good fun to play with. That

00:16:41.850 --> 00:16:44.010
<v Speaker 1>doesn't necessarily help to help the businesses that

00:16:44.010 --> 00:16:46.490
<v Speaker 1>employs them grow. So, you know, we we

00:16:46.650 --> 00:16:48.490
<v Speaker 1>we're trying to say for those organizations who

00:16:48.490 --> 00:16:51.050
<v Speaker 1>just wanna use the damn thing, Portainer is

00:16:51.050 --> 00:16:52.810
<v Speaker 1>right for you. If if you're one of

00:16:52.810 --> 00:16:54.330
<v Speaker 1>the one of those organizations or one of

00:16:54.330 --> 00:16:55.930
<v Speaker 1>those people who really, really wants to get

00:16:55.930 --> 00:16:57.905
<v Speaker 1>in turn every dial, and flick every switch,

00:16:57.905 --> 00:16:59.985
<v Speaker 1>Portainer probably isn't for you. So we're we're

00:16:59.985 --> 00:17:02.945
<v Speaker 1>we're a bit bit more honest and direct

00:17:02.945 --> 00:17:05.904
<v Speaker 1>and clear with our our ideal user.

00:17:06.785 --> 00:17:09.345
<v Speaker 1>You know, a a raw a raw expert

00:17:09.345 --> 00:17:10.705
<v Speaker 1>who wants to able to flick every dial

00:17:10.705 --> 00:17:12.569
<v Speaker 1>and and and and turn every switch is

00:17:12.569 --> 00:17:13.130
<v Speaker 1>not

00:17:13.530 --> 00:17:16.089
<v Speaker 1>it, you know, Portainer Portainer abstracts away with

00:17:16.089 --> 00:17:17.530
<v Speaker 1>the goal of making it really easy to

00:17:17.530 --> 00:17:18.250
<v Speaker 1>consume.

00:17:19.530 --> 00:17:20.089
<v Speaker 0>Yeah.

00:17:20.490 --> 00:17:22.410
<v Speaker 0>I consider myself a bit of an expert.

00:17:22.410 --> 00:17:24.170
<v Speaker 0>I also think that I'm so done of

00:17:24.365 --> 00:17:26.685
<v Speaker 0>fiddling knobs and and playing with switches. I

00:17:26.685 --> 00:17:28.045
<v Speaker 0>mean, I think I just want things to

00:17:28.045 --> 00:17:29.565
<v Speaker 0>work now. I don't know if that's just

00:17:29.565 --> 00:17:31.405
<v Speaker 0>me getting older or not and

00:17:31.805 --> 00:17:33.165
<v Speaker 0>tired perhaps,

00:17:33.565 --> 00:17:35.165
<v Speaker 0>but I I

00:17:35.965 --> 00:17:39.165
<v Speaker 1>am very salty. I I I have run

00:17:38.910 --> 00:17:41.790
<v Speaker 1>I've I've run mission critical cloud services. I

00:17:41.790 --> 00:17:43.550
<v Speaker 1>was CEO of a of a public cloud

00:17:43.550 --> 00:17:44.270
<v Speaker 1>provider.

00:17:44.670 --> 00:17:46.510
<v Speaker 1>One of the worst things to happen is

00:17:46.510 --> 00:17:47.309
<v Speaker 1>an outage.

00:17:47.470 --> 00:17:49.470
<v Speaker 1>You know, everyone has outages, and anyone who

00:17:49.470 --> 00:17:51.230
<v Speaker 1>says that there's they they don't have outages

00:17:51.230 --> 00:17:52.670
<v Speaker 1>is lying or hasn't yet had one.

00:17:53.455 --> 00:17:54.494
<v Speaker 1>But outages happen

00:17:54.894 --> 00:17:57.054
<v Speaker 1>at three in the morning when there's an

00:17:57.054 --> 00:17:57.614
<v Speaker 1>outage.

00:17:57.855 --> 00:17:58.975
<v Speaker 1>You wanna be able to pick up the

00:17:58.975 --> 00:18:01.294
<v Speaker 1>phone and say, who who can get in

00:18:01.294 --> 00:18:02.815
<v Speaker 1>here and help me right now? And if

00:18:02.815 --> 00:18:03.854
<v Speaker 1>it's one person,

00:18:04.174 --> 00:18:06.335
<v Speaker 1>because only one person has the actual depth

00:18:06.335 --> 00:18:08.335
<v Speaker 1>of knowledge of the platform, man, you're in

00:18:08.010 --> 00:18:09.610
<v Speaker 1>trouble. You you wanna be able to get

00:18:09.770 --> 00:18:12.250
<v Speaker 1>to get fifteen, twenty, a hundred people, everyone

00:18:12.250 --> 00:18:13.770
<v Speaker 1>in IT wake up and get in here

00:18:13.770 --> 00:18:16.090
<v Speaker 1>now. And everyone in there can can roll

00:18:16.090 --> 00:18:17.210
<v Speaker 1>up their sleeves and get in there and

00:18:17.210 --> 00:18:18.890
<v Speaker 1>try and solve their problem. If if you

00:18:18.890 --> 00:18:20.250
<v Speaker 1>have a piece of infrastructure

00:18:20.655 --> 00:18:22.975
<v Speaker 1>or a platform that's so complicated, only one

00:18:22.975 --> 00:18:24.655
<v Speaker 1>person or two people can support it, man,

00:18:24.655 --> 00:18:26.655
<v Speaker 1>you're in trouble. You really are. And,

00:18:26.975 --> 00:18:28.975
<v Speaker 1>you know, I I I had that lived

00:18:28.975 --> 00:18:32.175
<v Speaker 1>experience. I had this beautiful public cloud, and

00:18:32.175 --> 00:18:34.415
<v Speaker 1>I had problems with my my underlying storage

00:18:34.415 --> 00:18:34.815
<v Speaker 1>platform.

00:18:35.299 --> 00:18:37.779
<v Speaker 1>It was it was beautifully engineered,

00:18:37.780 --> 00:18:39.940
<v Speaker 1>but very difficult to triage and troubleshoot. And

00:18:39.940 --> 00:18:40.979
<v Speaker 1>so I'm like, man,

00:18:41.220 --> 00:18:42.740
<v Speaker 1>you know, once we got out of that

00:18:42.740 --> 00:18:45.059
<v Speaker 1>outage, it's like, okay. I need I need

00:18:45.059 --> 00:18:46.740
<v Speaker 1>to make this thing way easier. I've gotta

00:18:46.740 --> 00:18:48.500
<v Speaker 1>I've gotta take away complexity so that I've

00:18:48.500 --> 00:18:50.245
<v Speaker 1>got I've got, you know, more more ready

00:18:50.245 --> 00:18:51.925
<v Speaker 1>access to people who can help me triage

00:18:51.925 --> 00:18:52.885
<v Speaker 1>and solve problems.

00:18:53.765 --> 00:18:56.565
<v Speaker 1>So you you will see you will see

00:18:56.645 --> 00:18:59.365
<v Speaker 1>you will see lived lived scars,

00:19:00.245 --> 00:19:03.460
<v Speaker 1>blood, sweat, and tears all throughout Portainer because

00:19:03.460 --> 00:19:05.620
<v Speaker 1>I've I've I've experienced those. I'm old enough

00:19:05.620 --> 00:19:07.059
<v Speaker 1>to have have lived through all of that

00:19:07.059 --> 00:19:08.260
<v Speaker 1>pain and suffering, and I'm trying to stop

00:19:08.260 --> 00:19:09.860
<v Speaker 1>other people having to live through it too.

00:19:10.420 --> 00:19:12.260
<v Speaker 0>Awesome. Alright. We got a a couple of

00:19:12.260 --> 00:19:13.940
<v Speaker 0>comments I'll tackle just now. So we got

00:19:13.940 --> 00:19:16.180
<v Speaker 0>one from Russell saying, referring back to your

00:19:16.180 --> 00:19:18.554
<v Speaker 0>Lord of the Rings quote, but Portainer is

00:19:18.554 --> 00:19:21.434
<v Speaker 0>a siren's tool for managing container systems. There

00:19:21.434 --> 00:19:21.994
<v Speaker 0>you go.

00:19:22.875 --> 00:19:25.275
<v Speaker 0>Cool. And we have a question for our

00:19:25.275 --> 00:19:26.315
<v Speaker 0>brilliant guest.

00:19:26.635 --> 00:19:28.794
<v Speaker 0>Nicely phrased, Murat. How can I not ask

00:19:28.794 --> 00:19:30.890
<v Speaker 0>that question now? But they wanna know about

00:19:30.890 --> 00:19:33.370
<v Speaker 0>the future of container platforms and whether maybe

00:19:33.370 --> 00:19:35.770
<v Speaker 0>something's going to replace containers. And they mentioned

00:19:35.770 --> 00:19:38.650
<v Speaker 0>LXC Podman cat containers. I mean, do you

00:19:38.650 --> 00:19:41.529
<v Speaker 0>have any thoughts on what comes next?

00:19:41.770 --> 00:19:43.370
<v Speaker 0>Or do you think, you know, those containers

00:19:43.370 --> 00:19:44.010
<v Speaker 0>are just perfect?

00:19:45.865 --> 00:19:48.745
<v Speaker 1>They're also containers. Yep. But Podman is just,

00:19:48.745 --> 00:19:50.985
<v Speaker 1>in speech marks, a fork of Docker. You

00:19:50.985 --> 00:19:53.304
<v Speaker 1>know, for for whatever reason, Red Hat decided

00:19:53.304 --> 00:19:55.465
<v Speaker 1>that the the direction Docker was taking was

00:19:55.465 --> 00:19:57.710
<v Speaker 1>the wrong direction. So they they forked or

00:19:57.710 --> 00:19:59.710
<v Speaker 1>the it it's basically built off of Moby,

00:19:59.710 --> 00:20:02.110
<v Speaker 1>and it's it's their own thing. So, yeah,

00:20:02.110 --> 00:20:04.190
<v Speaker 1>Podman is very, very compatible to Docker. So

00:20:04.190 --> 00:20:06.029
<v Speaker 1>it's still the same underlying tech.

00:20:07.070 --> 00:20:09.230
<v Speaker 1>They're all based off the same underlying principles.

00:20:09.230 --> 00:20:10.590
<v Speaker 1>You know, even even

00:20:10.804 --> 00:20:12.885
<v Speaker 1>container d from Kubernetes is it's the same

00:20:12.885 --> 00:20:15.845
<v Speaker 1>underlying thing. Now LXC containers are somewhat different.

00:20:16.885 --> 00:20:18.965
<v Speaker 1>Containers in general, I think, are are quite

00:20:18.965 --> 00:20:20.804
<v Speaker 1>universal. You know, is there gonna be a

00:20:20.804 --> 00:20:22.645
<v Speaker 1>new version, a better version, a more secure

00:20:22.645 --> 00:20:22.965
<v Speaker 1>version?

00:20:23.890 --> 00:20:26.610
<v Speaker 1>% sure. You know, containers today are still

00:20:26.850 --> 00:20:28.929
<v Speaker 1>a little bit too wild west if you

00:20:28.929 --> 00:20:29.570
<v Speaker 1>ask me.

00:20:30.210 --> 00:20:32.850
<v Speaker 1>With it without without a bunch of external

00:20:32.850 --> 00:20:33.649
<v Speaker 1>controls,

00:20:34.050 --> 00:20:36.530
<v Speaker 1>a container can be used to take complete

00:20:36.530 --> 00:20:39.235
<v Speaker 1>complete control of the underlying platform. I'm just

00:20:39.235 --> 00:20:40.595
<v Speaker 1>gonna while I've got my screen share up,

00:20:40.595 --> 00:20:42.115
<v Speaker 1>I'll show you what I mean here. Yep.

00:20:42.115 --> 00:20:44.115
<v Speaker 0>Let me just push that over. There you

00:20:44.115 --> 00:20:44.595
<v Speaker 0>go.

00:20:45.315 --> 00:20:47.315
<v Speaker 1>So, like, for example, here, you know, in

00:20:47.315 --> 00:20:50.355
<v Speaker 1>Portainer, we let you sit some some Docker

00:20:50.355 --> 00:20:53.470
<v Speaker 1>security settings here because there are certain things

00:20:53.630 --> 00:20:55.230
<v Speaker 1>containers will let you do things

00:20:55.550 --> 00:20:58.030
<v Speaker 1>that are actually dumb. They're actually really, really

00:20:58.030 --> 00:21:00.110
<v Speaker 1>dumb. Like, for example, I can spin up

00:21:00.110 --> 00:21:02.350
<v Speaker 1>a a container that bind mounts the root

00:21:02.350 --> 00:21:03.230
<v Speaker 1>file system.

00:21:04.430 --> 00:21:06.985
<v Speaker 1>No. That that's a terrible idea. So so

00:21:06.985 --> 00:21:08.745
<v Speaker 1>we yeah. In Portainer, we actually let you

00:21:08.745 --> 00:21:10.745
<v Speaker 1>say, well, hang on a second. Because Portainer

00:21:10.745 --> 00:21:13.945
<v Speaker 1>sits between your users and the underlying infrastructure,

00:21:13.945 --> 00:21:16.025
<v Speaker 1>we're we're going to disallow, and we we

00:21:16.025 --> 00:21:18.585
<v Speaker 1>basically intercept requests for blind mounts and say,

00:21:18.585 --> 00:21:19.385
<v Speaker 1>mm-mm. Not allowed.

00:21:19.909 --> 00:21:22.070
<v Speaker 1>Yeah. Like, you you can actually ask a

00:21:22.070 --> 00:21:22.789
<v Speaker 1>container

00:21:22.950 --> 00:21:25.750
<v Speaker 1>to run-in in the host PID namespace. And

00:21:25.750 --> 00:21:27.190
<v Speaker 1>then once you're in the host PID, you

00:21:27.190 --> 00:21:28.950
<v Speaker 1>can do anything on the host. That's a

00:21:28.950 --> 00:21:31.830
<v Speaker 1>dumb idea. Terrible idea. So block that too.

00:21:31.909 --> 00:21:33.830
<v Speaker 1>So that same thing with device maps. You

00:21:33.830 --> 00:21:36.115
<v Speaker 1>you can actually you can actually say map

00:21:36.115 --> 00:21:36.914
<v Speaker 1>device

00:21:36.995 --> 00:21:39.475
<v Speaker 1>slash dev slash h d zero or s

00:21:39.475 --> 00:21:41.635
<v Speaker 1>d zero to a container, and then you

00:21:41.635 --> 00:21:43.315
<v Speaker 1>can do if there's gonna container and erase

00:21:43.315 --> 00:21:45.394
<v Speaker 1>the hard disk. That's a terrible idea.

00:21:45.555 --> 00:21:46.835
<v Speaker 1>So the so

00:21:47.130 --> 00:21:49.450
<v Speaker 1>yeah. All that stuff, we we basically saying,

00:21:49.450 --> 00:21:51.370
<v Speaker 1>mm-mm. We gotta intercept that that and block

00:21:51.370 --> 00:21:53.130
<v Speaker 1>it. Now things like Podman

00:21:53.610 --> 00:21:56.649
<v Speaker 1>and even Docker rootless mode now can run-in

00:21:56.650 --> 00:21:58.410
<v Speaker 1>a way that they don't have root access

00:21:58.410 --> 00:21:59.610
<v Speaker 1>to the host. So some of this is

00:21:59.610 --> 00:22:02.170
<v Speaker 1>starting to be mitigated, but more and more

00:22:02.170 --> 00:22:04.544
<v Speaker 1>often now, I think I think I think

00:22:04.544 --> 00:22:06.145
<v Speaker 1>I think we're gonna be crying out for

00:22:06.145 --> 00:22:08.625
<v Speaker 1>a more secure version of containers, the next

00:22:08.625 --> 00:22:10.225
<v Speaker 1>generation of containers. But

00:22:10.865 --> 00:22:13.585
<v Speaker 1>from a end consumer or any user point

00:22:13.585 --> 00:22:15.505
<v Speaker 1>of view, I think I think you find

00:22:15.505 --> 00:22:18.400
<v Speaker 1>things like serverless containers become more and more

00:22:18.400 --> 00:22:20.159
<v Speaker 1>popular. Things like Cloud Run

00:22:20.480 --> 00:22:23.200
<v Speaker 1>or the old the older and slightly less

00:22:23.200 --> 00:22:24.720
<v Speaker 1>popular Azure ACI,

00:22:25.120 --> 00:22:27.840
<v Speaker 1>where you just simply ask the system, here

00:22:27.840 --> 00:22:30.400
<v Speaker 1>is my container. Here are the SLAs that

00:22:30.400 --> 00:22:32.240
<v Speaker 1>I want you to run this container within.

00:22:32.240 --> 00:22:34.695
<v Speaker 1>Go run it for me, and the platform

00:22:34.695 --> 00:22:35.735
<v Speaker 1>takes care of it.

00:22:36.215 --> 00:22:37.575
<v Speaker 1>I think I think you're gonna see that

00:22:37.575 --> 00:22:38.695
<v Speaker 1>kind of thing take off a bit more

00:22:38.695 --> 00:22:40.215
<v Speaker 1>where you simply say, hey. I want this

00:22:40.215 --> 00:22:41.495
<v Speaker 1>container to deliver

00:22:42.455 --> 00:22:44.375
<v Speaker 1>a response times to my to my users

00:22:44.375 --> 00:22:46.135
<v Speaker 1>of below x milliseconds.

00:22:46.455 --> 00:22:48.850
<v Speaker 1>The system says, okay. I'm I'm seeing a

00:22:48.850 --> 00:22:50.130
<v Speaker 1>bit more load. I need to add more

00:22:50.130 --> 00:22:51.809
<v Speaker 1>replicas. I'm gonna go ahead and do that.

00:22:51.809 --> 00:22:53.490
<v Speaker 1>You you shouldn't have to say, I want

00:22:53.490 --> 00:22:55.650
<v Speaker 1>three replicas and turn on auto scaling, and

00:22:55.650 --> 00:22:57.010
<v Speaker 1>here are here are the criteria for auto

00:22:57.010 --> 00:22:58.850
<v Speaker 1>scaling. The system should know should be able

00:22:58.850 --> 00:23:00.450
<v Speaker 1>to determine that from SLAs.

00:23:00.450 --> 00:23:01.970
<v Speaker 1>And I think that's that's that's kind of

00:23:01.970 --> 00:23:04.075
<v Speaker 1>the future as we as we mature. And

00:23:04.075 --> 00:23:06.075
<v Speaker 1>if you look at a Google Cloud Run,

00:23:06.155 --> 00:23:07.755
<v Speaker 1>that this is this is a very nice

00:23:07.755 --> 00:23:09.275
<v Speaker 1>first version of that.

00:23:10.075 --> 00:23:11.035
<v Speaker 0>Yeah. Definitely.

00:23:12.555 --> 00:23:14.715
<v Speaker 0>Alright. I hope that helps, Bharat.

00:23:15.675 --> 00:23:18.155
<v Speaker 0>Russell suggested maybe WebAssembly could be a future

00:23:18.155 --> 00:23:20.679
<v Speaker 0>technology there. And I think Firecracker falls into

00:23:20.679 --> 00:23:21.879
<v Speaker 0>that too. But

00:23:22.200 --> 00:23:24.520
<v Speaker 0>we have such an ecosystem, such a community

00:23:24.520 --> 00:23:26.840
<v Speaker 0>around containers and so much tooling

00:23:27.159 --> 00:23:29.240
<v Speaker 0>that I I think containers have got a

00:23:29.240 --> 00:23:30.360
<v Speaker 0>lot of life left at them yet.

00:23:31.455 --> 00:23:33.615
<v Speaker 1>Yeah. Wasm at the edge or or wasm

00:23:33.615 --> 00:23:35.215
<v Speaker 1>wasm, however you wanna pronounce it. I've I've

00:23:35.215 --> 00:23:37.215
<v Speaker 1>got a a crazy Kiwi accent. So,

00:23:38.815 --> 00:23:41.215
<v Speaker 1>yeah, wasm at the edge, I think, definitely

00:23:41.215 --> 00:23:43.695
<v Speaker 1>has potential. That this whole this whole assembly

00:23:43.695 --> 00:23:45.534
<v Speaker 1>on demand, I think, has potential at the

00:23:45.534 --> 00:23:45.695
<v Speaker 1>edge.

00:23:46.760 --> 00:23:49.080
<v Speaker 1>For some reason, Kubernetes at the edge is

00:23:49.080 --> 00:23:50.840
<v Speaker 1>getting a lot of love. Kubernetes at the

00:23:50.840 --> 00:23:52.919
<v Speaker 1>edge is very overweight.

00:23:53.640 --> 00:23:55.399
<v Speaker 1>You know, it's very hard to to use

00:23:55.399 --> 00:23:57.000
<v Speaker 1>Kubernetes at the edge unless you have a

00:23:57.000 --> 00:23:59.559
<v Speaker 1>relatively large node. I actually produced a blog

00:23:59.559 --> 00:24:00.440
<v Speaker 1>just recently

00:24:00.705 --> 00:24:03.745
<v Speaker 1>where I actually benchmarked all of the nano

00:24:03.745 --> 00:24:05.264
<v Speaker 1>or micro Kubernetes

00:24:05.585 --> 00:24:07.505
<v Speaker 1>distros out there to say, can they run

00:24:07.505 --> 00:24:09.184
<v Speaker 1>on a device with one gig of RAM?

00:24:09.184 --> 00:24:11.345
<v Speaker 1>The answer is absolutely not. Well, they they

00:24:11.345 --> 00:24:13.265
<v Speaker 1>run, but you can't you can't you can't

00:24:13.265 --> 00:24:14.625
<v Speaker 1>do anything. The moment you try and it

00:24:14.625 --> 00:24:16.960
<v Speaker 1>start even a basic NGINX container,

00:24:16.960 --> 00:24:18.239
<v Speaker 1>the whole thing implodes.

00:24:18.240 --> 00:24:19.440
<v Speaker 1>So you can't.

00:24:19.600 --> 00:24:22.399
<v Speaker 1>Whereas, you know, Docker, Podman, and Nomad are

00:24:22.399 --> 00:24:24.960
<v Speaker 1>perfectly adequate. They need need nothing at the

00:24:24.960 --> 00:24:25.679
<v Speaker 1>edge. So,

00:24:26.799 --> 00:24:30.080
<v Speaker 1>you know, until until much larger hardware

00:24:30.385 --> 00:24:33.345
<v Speaker 1>starts to propagate the PLC and the edge

00:24:33.345 --> 00:24:36.065
<v Speaker 1>device retailers and know a Raspberry Pi is

00:24:36.065 --> 00:24:38.304
<v Speaker 1>not everywhere. So we're talking about, you know,

00:24:38.304 --> 00:24:41.664
<v Speaker 1>the the multi billion dollar PLC vendors out

00:24:41.664 --> 00:24:43.585
<v Speaker 1>there that we all know that run industry.

00:24:44.299 --> 00:24:46.700
<v Speaker 1>Until until the the hardware propagates down to

00:24:46.700 --> 00:24:48.460
<v Speaker 1>that level, we're still very, very limited in

00:24:48.460 --> 00:24:50.860
<v Speaker 1>resource. And so there's still still a real

00:24:50.860 --> 00:24:52.700
<v Speaker 1>focus on how do how do I, as

00:24:52.700 --> 00:24:55.259
<v Speaker 1>an operating system, as an operating platform,

00:24:55.580 --> 00:24:57.500
<v Speaker 1>use as little resource as possible so there's

00:24:57.500 --> 00:24:58.700
<v Speaker 1>more resources for applications.

00:25:00.255 --> 00:25:02.255
<v Speaker 0>Sweet. Awesome. Thank you for sharing.

00:25:03.215 --> 00:25:05.775
<v Speaker 1>I have very strong opinions on Kubernetes at

00:25:05.775 --> 00:25:07.615
<v Speaker 1>the edge just because it's it seems like

00:25:07.615 --> 00:25:09.775
<v Speaker 1>we're we're forcing a technology into a use

00:25:09.775 --> 00:25:12.255
<v Speaker 1>case where it doesn't doesn't naturally make sense,

00:25:12.255 --> 00:25:13.855
<v Speaker 1>but we're trying to trying to tell ourselves

00:25:13.855 --> 00:25:14.335
<v Speaker 1>it does.

00:25:16.510 --> 00:25:18.830
<v Speaker 0>Yeah. That's actually Anyway Yeah. I mean, we're

00:25:18.830 --> 00:25:20.750
<v Speaker 0>seeing I'm assuming I haven't read your blog

00:25:20.750 --> 00:25:22.190
<v Speaker 0>post, but I'll find that up. A link

00:25:22.190 --> 00:25:23.550
<v Speaker 0>to it to show notes for anyone who's

00:25:23.550 --> 00:25:25.710
<v Speaker 0>watching. But I'm assuming the ones you tested

00:25:25.710 --> 00:25:27.390
<v Speaker 0>there were like k zeroes and k c

00:25:27.390 --> 00:25:28.750
<v Speaker 0>s, and these are the ones that claim

00:25:28.750 --> 00:25:31.310
<v Speaker 0>to be kind of edge compatible Kubernetes distributions.

00:25:31.684 --> 00:25:32.005
<v Speaker 0>But

00:25:32.804 --> 00:25:36.005
<v Speaker 1>Correct. Correct. And yeah. To yeah. A spoiler

00:25:36.005 --> 00:25:38.485
<v Speaker 1>alert, they they all need greater than than

00:25:38.485 --> 00:25:39.365
<v Speaker 1>700

00:25:39.365 --> 00:25:42.485
<v Speaker 1>mega RAM to to even idle to idle.

00:25:43.365 --> 00:25:44.004
<v Speaker 1>So

00:25:44.165 --> 00:25:44.565
<v Speaker 1>and

00:25:45.190 --> 00:25:46.710
<v Speaker 1>if you've only got a gig of RAM,

00:25:46.710 --> 00:25:49.270
<v Speaker 1>700 mega RAM used up just to idle.

00:25:49.270 --> 00:25:50.470
<v Speaker 1>In all honesty,

00:25:50.950 --> 00:25:53.350
<v Speaker 1>once you get around 900 mega RAM, then

00:25:53.350 --> 00:25:55.750
<v Speaker 1>the kernel starts starts blowing up anyway. There's

00:25:55.750 --> 00:25:57.510
<v Speaker 1>really no RAM to do anything. So Yeah.

00:25:57.510 --> 00:25:59.190
<v Speaker 0>No room to work with the toll. So

00:25:59.190 --> 00:26:00.390
<v Speaker 0>you're just

00:26:12.620 --> 00:26:15.100
<v Speaker 1>but almost always, they're a single single CPU.

00:26:15.100 --> 00:26:17.740
<v Speaker 1>If you're lucky, may maybe a a quad

00:26:17.740 --> 00:26:19.980
<v Speaker 1>core, but it's a quad core low throughput

00:26:19.980 --> 00:26:20.780
<v Speaker 1>CPU.

00:26:21.180 --> 00:26:23.100
<v Speaker 1>One gig of RAM, two gig of RAM,

00:26:23.100 --> 00:26:23.580
<v Speaker 1>really.

00:26:24.460 --> 00:26:26.300
<v Speaker 1>So it's you're still very limited. Now I

00:26:26.300 --> 00:26:28.385
<v Speaker 1>understand that there's the edge edge is a

00:26:28.385 --> 00:26:30.385
<v Speaker 1>very large use case. You've got network edge,

00:26:30.385 --> 00:26:32.385
<v Speaker 1>which are servers. You've got edge gateways, which

00:26:32.385 --> 00:26:34.625
<v Speaker 1>are, you know, far larger I sevens with

00:26:34.625 --> 00:26:36.705
<v Speaker 1>eight gig of RAM and mini clusters.

00:26:36.865 --> 00:26:38.705
<v Speaker 1>Those ones are fine, but true edge, far

00:26:38.705 --> 00:26:41.585
<v Speaker 1>edge, you know, I IoT type use cases,

00:26:41.745 --> 00:26:43.265
<v Speaker 1>very, very limited hardware resource.

00:26:44.930 --> 00:26:45.730
<v Speaker 0>Alright.

00:26:46.370 --> 00:26:48.530
<v Speaker 0>Let's jump over into your your are you

00:26:48.530 --> 00:26:50.610
<v Speaker 0>starting with Portainer? Are you doing some slides

00:26:50.610 --> 00:26:52.210
<v Speaker 0>first? How are we doing this?

00:26:53.250 --> 00:26:56.130
<v Speaker 1>I can do anything. I have I have

00:26:56.130 --> 00:26:57.090
<v Speaker 1>some slides

00:26:57.170 --> 00:26:59.090
<v Speaker 1>that I can run through if we like.

00:26:59.855 --> 00:27:01.135
<v Speaker 1>I literally

00:27:01.135 --> 00:27:03.615
<v Speaker 1>just shared these these slides last night. I

00:27:03.615 --> 00:27:05.295
<v Speaker 1>built them just for the session.

00:27:06.815 --> 00:27:08.575
<v Speaker 1>I can I can run through these things

00:27:08.575 --> 00:27:10.575
<v Speaker 1>at a blistering pace and then go and

00:27:10.575 --> 00:27:11.295
<v Speaker 1>show you live?

00:27:12.380 --> 00:27:13.820
<v Speaker 0>Well, yeah. You failed them. It'd be a

00:27:13.820 --> 00:27:15.659
<v Speaker 0>shame not to show them. Come on. It

00:27:15.659 --> 00:27:16.619
<v Speaker 1>it would be.

00:27:18.140 --> 00:27:20.940
<v Speaker 1>Containers managing containers shouldn't be hard. It

00:27:22.059 --> 00:27:24.595
<v Speaker 1>and, unfortunately, it is hard. And anyone who

00:27:24.595 --> 00:27:26.674
<v Speaker 1>says it's not hard, either hasn't gone deep

00:27:26.674 --> 00:27:29.315
<v Speaker 1>enough yet, it's not fully in production, or

00:27:29.315 --> 00:27:32.355
<v Speaker 1>they are absolute ninjas and are able to

00:27:32.355 --> 00:27:35.554
<v Speaker 1>comprehend the complexity. But for the average IT

00:27:35.554 --> 00:27:38.090
<v Speaker 1>person, managing containers is far harder than it

00:27:38.090 --> 00:27:40.090
<v Speaker 1>it it needs to be. And so our

00:27:40.090 --> 00:27:42.009
<v Speaker 1>whole ethos is it shouldn't be hard.

00:27:43.130 --> 00:27:45.289
<v Speaker 1>Yeah. We we like to to sit in

00:27:45.289 --> 00:27:48.409
<v Speaker 1>the middle and be this universal tool set.

00:27:48.409 --> 00:27:49.450
<v Speaker 1>We don't care

00:27:49.795 --> 00:27:52.195
<v Speaker 1>where you run Kubernetes. If you run Kubernetes

00:27:52.195 --> 00:27:54.355
<v Speaker 1>in any of the cloud provider managed managed

00:27:54.355 --> 00:27:56.355
<v Speaker 1>Kubernetes offerings, we don't care if you run

00:27:56.355 --> 00:27:58.115
<v Speaker 1>Kubernetes on prem. We don't care even if

00:27:58.115 --> 00:27:59.555
<v Speaker 1>you don't run Kubernetes and you run Docker

00:27:59.555 --> 00:28:00.515
<v Speaker 1>or Podman.

00:28:00.755 --> 00:28:01.715
<v Speaker 1>For us, it doesn't matter.

00:28:02.360 --> 00:28:04.040
<v Speaker 1>What we care about is helping you get

00:28:04.040 --> 00:28:06.600
<v Speaker 1>your container based application into production in a

00:28:06.600 --> 00:28:07.880
<v Speaker 1>safe and secure way.

00:28:08.360 --> 00:28:11.080
<v Speaker 1>And our whole our ethos is for those

00:28:11.080 --> 00:28:13.720
<v Speaker 1>organizations that are just getting started, we wanna

00:28:13.720 --> 00:28:14.120
<v Speaker 1>help them.

00:28:14.765 --> 00:28:18.205
<v Speaker 1>I I have many times described Portainer

00:28:18.205 --> 00:28:21.325
<v Speaker 1>as as a tool that enables the have

00:28:21.325 --> 00:28:22.205
<v Speaker 1>nots

00:28:22.445 --> 00:28:24.285
<v Speaker 1>to compete with the haves.

00:28:24.445 --> 00:28:25.725
<v Speaker 1>And what I mean by that is there

00:28:25.725 --> 00:28:27.805
<v Speaker 1>are a bunch of organizations, the have nots,

00:28:28.100 --> 00:28:30.980
<v Speaker 1>who who don't have the financial ability to

00:28:30.980 --> 00:28:33.299
<v Speaker 1>go and invest in highly skilled

00:28:33.460 --> 00:28:34.419
<v Speaker 1>experts

00:28:35.060 --> 00:28:37.380
<v Speaker 1>to to support Kubernetes. They don't have the

00:28:37.380 --> 00:28:39.300
<v Speaker 1>ability to go and invest, you know, large

00:28:39.300 --> 00:28:40.500
<v Speaker 1>sums of money in

00:28:40.975 --> 00:28:44.414
<v Speaker 1>in very expensive enterprise products like OpenShift potentially

00:28:44.735 --> 00:28:47.294
<v Speaker 1>to to try and offset. So the these

00:28:47.294 --> 00:28:49.214
<v Speaker 1>these have these have nots

00:28:49.695 --> 00:28:51.455
<v Speaker 1>still need to try and compete against the

00:28:51.455 --> 00:28:53.855
<v Speaker 1>much the they're much larger

00:28:53.400 --> 00:28:54.760
<v Speaker 1>competitor organizations,

00:28:54.760 --> 00:28:56.040
<v Speaker 1>and our goal is to try and enable

00:28:56.040 --> 00:28:57.080
<v Speaker 1>them to succeed.

00:28:57.960 --> 00:29:00.040
<v Speaker 1>So another way I'd like to describe us

00:29:00.040 --> 00:29:01.640
<v Speaker 1>is we are the Robin Hood of cloud

00:29:01.640 --> 00:29:03.480
<v Speaker 1>nay of of cloud native.

00:29:04.280 --> 00:29:04.920
<v Speaker 0>I like that.

00:29:07.115 --> 00:29:09.515
<v Speaker 1>So we describe ourselves as a container management

00:29:09.515 --> 00:29:10.315
<v Speaker 1>platform.

00:29:10.955 --> 00:29:12.794
<v Speaker 1>And a container management platform

00:29:12.875 --> 00:29:14.154
<v Speaker 1>is something that

00:29:14.554 --> 00:29:17.115
<v Speaker 1>lets you manage all of these component trees.

00:29:17.115 --> 00:29:19.000
<v Speaker 1>They let you manage orchestrator. They they give

00:29:19.000 --> 00:29:21.320
<v Speaker 1>the ability to to get observability

00:29:21.320 --> 00:29:23.320
<v Speaker 1>of the systems. They let you see the

00:29:23.320 --> 00:29:25.480
<v Speaker 1>logs. There's a CICD engine.

00:29:25.640 --> 00:29:27.080
<v Speaker 1>They they let you they let you better

00:29:27.080 --> 00:29:29.400
<v Speaker 1>better manage the networking service discovery. You know,

00:29:29.400 --> 00:29:31.485
<v Speaker 1>all of these things need to be addressed

00:29:31.485 --> 00:29:34.605
<v Speaker 1>in some way by the container management platform.

00:29:35.485 --> 00:29:38.045
<v Speaker 1>Because like it or not, you actually need

00:29:38.045 --> 00:29:38.605
<v Speaker 1>one.

00:29:39.085 --> 00:29:41.245
<v Speaker 1>Now you can go and choose to build

00:29:41.245 --> 00:29:44.205
<v Speaker 1>one yourself, and this is the CNCF eye

00:29:44.205 --> 00:29:44.525
<v Speaker 1>chart.

00:29:45.640 --> 00:29:47.720
<v Speaker 1>I think it last time I checked, it

00:29:47.720 --> 00:29:49.720
<v Speaker 1>was actually an a one printout. I think

00:29:49.720 --> 00:29:51.480
<v Speaker 1>it may even now be an a zero.

00:29:51.800 --> 00:29:52.279
<v Speaker 1>So,

00:29:52.679 --> 00:29:55.240
<v Speaker 1>you know, you as an engineer or the

00:29:55.240 --> 00:29:57.720
<v Speaker 1>company that employs you needs to make a

00:29:57.720 --> 00:29:58.040
<v Speaker 1>decision

00:29:58.555 --> 00:30:00.635
<v Speaker 1>to go and build a management platform. You

00:30:00.635 --> 00:30:02.075
<v Speaker 1>will need one if, you know, if if

00:30:02.075 --> 00:30:03.595
<v Speaker 1>you just think that you're gonna go Kubernetes,

00:30:03.595 --> 00:30:06.315
<v Speaker 1>Rawkode, Rawkode, you're you're you're solely mistaken. You

00:30:06.315 --> 00:30:08.715
<v Speaker 1>absolutely will need a management platform.

00:30:08.955 --> 00:30:10.315
<v Speaker 1>Now you will either go and build one

00:30:10.315 --> 00:30:12.470
<v Speaker 1>yourself. You'll go and get Argo CD. You'll

00:30:12.470 --> 00:30:14.390
<v Speaker 1>you'll probably go and get with your Grafana.

00:30:14.390 --> 00:30:15.590
<v Speaker 1>You'll probably go and go and get some

00:30:15.590 --> 00:30:17.110
<v Speaker 1>HashiCorp Vault. You're going to get a whole

00:30:17.110 --> 00:30:19.350
<v Speaker 1>bunch of these products, and you'll you'll assemble

00:30:19.350 --> 00:30:20.789
<v Speaker 1>yourself a management platform.

00:30:21.430 --> 00:30:24.710
<v Speaker 1>You've just built yourself an ongoing maintenance nightmare.

00:30:24.710 --> 00:30:26.310
<v Speaker 1>Now now you need to make sure that

00:30:26.310 --> 00:30:28.295
<v Speaker 1>all of these products well, for a start,

00:30:28.295 --> 00:30:29.255
<v Speaker 1>you need to need to make sure the

00:30:29.255 --> 00:30:31.894
<v Speaker 1>products that you've that you've chosen actually have

00:30:32.135 --> 00:30:34.455
<v Speaker 1>life in them. So they've been actively developed.

00:30:34.455 --> 00:30:36.775
<v Speaker 1>They're they're well funded. They're they're not they're

00:30:36.775 --> 00:30:38.215
<v Speaker 1>not gonna vanish tomorrow because you're gonna have

00:30:38.215 --> 00:30:41.095
<v Speaker 1>to replace them. But then you need to

00:30:39.810 --> 00:30:41.810
<v Speaker 1>sure that they are interoperable with each other,

00:30:41.810 --> 00:30:43.570
<v Speaker 1>that they're in that they're inter interoperable with

00:30:43.570 --> 00:30:45.330
<v Speaker 1>the version of Kubernetes or Docker that you're

00:30:45.330 --> 00:30:45.810
<v Speaker 1>running,

00:30:46.370 --> 00:30:48.210
<v Speaker 1>and you have to maintain and and patch

00:30:48.210 --> 00:30:49.890
<v Speaker 1>them as a case of unit. You have

00:30:49.890 --> 00:30:50.850
<v Speaker 1>now created

00:30:51.250 --> 00:30:54.635
<v Speaker 1>a a maintenance overhead to manage this platform.

00:30:55.195 --> 00:30:56.395
<v Speaker 1>So you can do that or you can

00:30:56.395 --> 00:30:58.235
<v Speaker 1>choose Portainer. That's kinda where we're at with

00:30:58.235 --> 00:30:58.875
<v Speaker 1>this thing.

00:31:00.555 --> 00:31:03.195
<v Speaker 1>You know, why skilled labor shortages? You know,

00:31:03.195 --> 00:31:04.715
<v Speaker 1>if if you go look at any CNCF

00:31:04.715 --> 00:31:05.434
<v Speaker 1>survey,

00:31:05.835 --> 00:31:08.220
<v Speaker 1>what are the barriers to adoption? It's pretty

00:31:08.220 --> 00:31:09.340
<v Speaker 1>much these six.

00:31:09.660 --> 00:31:11.419
<v Speaker 1>It's very hard to find people.

00:31:11.900 --> 00:31:13.580
<v Speaker 1>When you do find them, they're they're eye

00:31:13.580 --> 00:31:14.779
<v Speaker 1>watering and expensive.

00:31:15.340 --> 00:31:17.020
<v Speaker 1>It takes a long time for people to

00:31:17.020 --> 00:31:18.139
<v Speaker 1>to come up to speed

00:31:18.540 --> 00:31:20.620
<v Speaker 1>with with containers in general.

00:31:22.105 --> 00:31:23.544
<v Speaker 1>Things like Kubernetes,

00:31:23.544 --> 00:31:25.544
<v Speaker 1>they're not secure. I'm not gonna use the

00:31:25.544 --> 00:31:27.865
<v Speaker 1>term insecure by default because that that has

00:31:27.865 --> 00:31:30.585
<v Speaker 1>negative connotations, but they are not secured by

00:31:30.585 --> 00:31:32.745
<v Speaker 1>default. They expect you to know what you're

00:31:32.745 --> 00:31:34.505
<v Speaker 1>doing to secure them. You have to go

00:31:34.505 --> 00:31:35.705
<v Speaker 1>in and and lock them down.

00:31:36.440 --> 00:31:37.960
<v Speaker 1>They're not locked by default. You have lock

00:31:37.960 --> 00:31:39.559
<v Speaker 1>them down. If you don't know what you're

00:31:39.559 --> 00:31:41.639
<v Speaker 1>doing, platform's insecure. There was

00:31:42.200 --> 00:31:44.039
<v Speaker 1>there there's so many examples

00:31:44.120 --> 00:31:46.360
<v Speaker 1>or or surveys that have been taken where

00:31:47.000 --> 00:31:49.480
<v Speaker 1>completely open Kubernetes clusters are exposed to the

00:31:49.480 --> 00:31:51.480
<v Speaker 1>Internet because people just didn't realize they have

00:31:51.480 --> 00:31:52.040
<v Speaker 1>to lock it down.

00:31:53.534 --> 00:31:56.414
<v Speaker 1>Things like like Kubernetes are back. It's pretty

00:31:56.414 --> 00:31:57.054
<v Speaker 1>easy

00:31:57.294 --> 00:32:00.335
<v Speaker 1>to actually configure users and roles for one

00:32:00.335 --> 00:32:01.855
<v Speaker 1>cluster. You can you can go and manually

00:32:01.855 --> 00:32:03.375
<v Speaker 1>correct users. You can go and manually create

00:32:03.375 --> 00:32:06.269
<v Speaker 1>roles and role bindings, But that's one cluster.

00:32:06.350 --> 00:32:08.590
<v Speaker 1>When you got 20 clusters or 30 clusters

00:32:08.590 --> 00:32:10.190
<v Speaker 1>or 200 clusters,

00:32:10.429 --> 00:32:12.590
<v Speaker 1>oh my god. To do that across that,

00:32:12.590 --> 00:32:13.549
<v Speaker 1>now now

00:32:13.630 --> 00:32:14.990
<v Speaker 1>now they need a tool like Okta or

00:32:14.990 --> 00:32:16.909
<v Speaker 1>something else to try and take care of

00:32:16.909 --> 00:32:18.909
<v Speaker 1>all of the federated user identity and and

00:32:18.909 --> 00:32:20.190
<v Speaker 1>how you can do all the RBAC management.

00:32:20.565 --> 00:32:23.284
<v Speaker 1>So it's tricky. Data operations, again, if you

00:32:23.284 --> 00:32:25.125
<v Speaker 1>don't know the commands to go and to

00:32:25.125 --> 00:32:27.124
<v Speaker 1>go and triage the the view the events,

00:32:27.125 --> 00:32:27.764
<v Speaker 1>you know,

00:32:28.325 --> 00:32:29.924
<v Speaker 1>you know, you you really are struggling, so

00:32:29.924 --> 00:32:31.284
<v Speaker 1>we wanna try to make that easier.

00:32:31.524 --> 00:32:34.325
<v Speaker 1>And, yeah, providing secure access to the environment,

00:32:34.500 --> 00:32:35.860
<v Speaker 1>you know, a lot of people say the

00:32:35.860 --> 00:32:38.020
<v Speaker 1>the only the only safe way to give

00:32:38.020 --> 00:32:40.020
<v Speaker 1>a developer access to Kubernetes is to not

00:32:40.020 --> 00:32:42.179
<v Speaker 1>give a developer access to Kubernetes.

00:32:43.060 --> 00:32:44.260
<v Speaker 1>Really?

00:32:44.260 --> 00:32:46.260
<v Speaker 1>How how then are they supposed to triage

00:32:46.260 --> 00:32:48.180
<v Speaker 1>their application in production? Really, you wanna give

00:32:48.180 --> 00:32:50.245
<v Speaker 1>them secure access. Now the reason a lot

00:32:50.245 --> 00:32:51.765
<v Speaker 1>of people don't give dev access is because

00:32:51.765 --> 00:32:53.365
<v Speaker 1>it's actually quite hard to go and configure

00:32:53.365 --> 00:32:55.525
<v Speaker 1>the roles and role bonding successfully so that

00:32:55.525 --> 00:32:57.445
<v Speaker 1>they don't have don't have accidental too many

00:32:57.445 --> 00:32:58.565
<v Speaker 1>rights. So

00:32:58.885 --> 00:33:00.645
<v Speaker 1>they're they're they're just main six reasons.

00:33:02.600 --> 00:33:03.400
<v Speaker 1>We

00:33:03.400 --> 00:33:05.880
<v Speaker 1>have three now I've called them product variants,

00:33:05.880 --> 00:33:07.400
<v Speaker 1>but you could actually think of these as

00:33:07.400 --> 00:33:09.480
<v Speaker 1>use cases. It's actually the same product. They're

00:33:09.480 --> 00:33:11.240
<v Speaker 1>just different different use cases.

00:33:12.520 --> 00:33:13.560
<v Speaker 1>So Portainer,

00:33:13.560 --> 00:33:15.800
<v Speaker 1>it it being used as a universal management

00:33:15.800 --> 00:33:18.475
<v Speaker 1>platform. If you have the need to to

00:33:18.475 --> 00:33:21.355
<v Speaker 1>manage Docker on your local machine, maybe you've

00:33:21.355 --> 00:33:22.794
<v Speaker 1>got some Docker swarm because you've got some

00:33:22.794 --> 00:33:24.715
<v Speaker 1>legacy environments or or whatever.

00:33:25.195 --> 00:33:26.875
<v Speaker 1>You've got some Kubernetes. Maybe you've got some

00:33:26.875 --> 00:33:28.554
<v Speaker 1>Nomad. The Portainer,

00:33:28.715 --> 00:33:30.635
<v Speaker 1>as a single platform, can do all of

00:33:30.635 --> 00:33:30.794
<v Speaker 1>that.

00:33:31.500 --> 00:33:33.260
<v Speaker 1>Maybe you're all in on Kubernetes, but you

00:33:33.260 --> 00:33:34.700
<v Speaker 1>want you want a way to centrally manage

00:33:34.700 --> 00:33:36.380
<v Speaker 1>Kubernetes. No problem. We can do that for

00:33:36.380 --> 00:33:37.179
<v Speaker 1>you as well.

00:33:37.820 --> 00:33:39.660
<v Speaker 1>Or may maybe maybe you're actually got a

00:33:39.660 --> 00:33:41.100
<v Speaker 1>really large edge use case,

00:33:41.420 --> 00:33:42.380
<v Speaker 1>I IoT

00:33:43.414 --> 00:33:45.735
<v Speaker 1>or IoT type use case, network edge, call

00:33:45.735 --> 00:33:48.375
<v Speaker 1>it what you like, smart city. Portainer is

00:33:48.375 --> 00:33:50.375
<v Speaker 1>very, very strong in the edge management as

00:33:50.375 --> 00:33:52.614
<v Speaker 1>well. So we have three distinct use cases.

00:33:52.774 --> 00:33:54.695
<v Speaker 1>We're calling in three three different variants of

00:33:54.695 --> 00:33:56.549
<v Speaker 1>the product. It's the same product under the

00:33:56.549 --> 00:33:58.390
<v Speaker 1>cover, so you don't you don't you don't

00:33:58.390 --> 00:33:59.910
<v Speaker 1>choose one and then then you're locked in.

00:33:59.910 --> 00:34:01.350
<v Speaker 1>It's the same base product. But

00:34:03.190 --> 00:34:04.870
<v Speaker 1>and, again, at a nutshell, the main the

00:34:04.870 --> 00:34:07.030
<v Speaker 1>main benefit of Portainer is to facilitate the

00:34:07.030 --> 00:34:09.909
<v Speaker 1>the transition from VMware or VMs

00:34:10.224 --> 00:34:12.704
<v Speaker 1>into containers. We help you or help your

00:34:12.704 --> 00:34:15.425
<v Speaker 1>team with that that mental transition

00:34:15.505 --> 00:34:18.065
<v Speaker 1>by giving familiar tooling, you know, that's a

00:34:18.065 --> 00:34:19.105
<v Speaker 1>familiar experience.

00:34:19.744 --> 00:34:21.344
<v Speaker 1>We make it really easy to see what's

00:34:21.344 --> 00:34:23.650
<v Speaker 1>possible with with the tech. It's very easy

00:34:23.650 --> 00:34:26.130
<v Speaker 1>to discover capability because there's a button that

00:34:26.130 --> 00:34:27.409
<v Speaker 1>does something, and you're like, oh, what's this

00:34:27.409 --> 00:34:29.409
<v Speaker 1>button do? And so you now realize that

00:34:29.409 --> 00:34:31.970
<v Speaker 1>there's actually some underlying capability that's amazing.

00:34:32.850 --> 00:34:33.410
<v Speaker 1>And

00:34:33.730 --> 00:34:36.130
<v Speaker 1>the the time to learn Portainer

00:34:36.855 --> 00:34:39.335
<v Speaker 1>is very, very, very short. I was talking

00:34:39.335 --> 00:34:41.255
<v Speaker 1>to to to somebody just recently who said

00:34:41.255 --> 00:34:43.014
<v Speaker 1>they spent two weeks looking at one of

00:34:43.014 --> 00:34:44.855
<v Speaker 1>our competitor products and hadn't really got it

00:34:44.855 --> 00:34:46.935
<v Speaker 1>working. And he said within five minutes, had

00:34:46.935 --> 00:34:49.094
<v Speaker 1>Portainer up and running, integrated with his active

00:34:49.094 --> 00:34:51.014
<v Speaker 1>directory. He'd configured a couple of classes, and

00:34:51.014 --> 00:34:52.910
<v Speaker 1>he had RBAC running. I was like, yeah.

00:34:52.910 --> 00:34:54.590
<v Speaker 1>That's pretty cool. That's what we wanna do.

00:34:54.910 --> 00:34:56.430
<v Speaker 1>So, you know, we we want once once

00:34:56.430 --> 00:34:57.870
<v Speaker 1>you get going real quickly.

00:34:59.150 --> 00:35:01.710
<v Speaker 1>So get get you going fast. You know,

00:35:01.710 --> 00:35:04.350
<v Speaker 1>Kubernetes, multi cluster management, really simple. No lock

00:35:04.350 --> 00:35:06.430
<v Speaker 1>in. Yeah. Portainer just works with any Kubernetes

00:35:06.430 --> 00:35:06.910
<v Speaker 1>API.

00:35:08.345 --> 00:35:10.265
<v Speaker 1>We help you secure the environment through through

00:35:10.265 --> 00:35:12.505
<v Speaker 1>policies and controls. We make it really easy

00:35:12.505 --> 00:35:14.984
<v Speaker 1>to triage, and it's very easy to drive

00:35:14.984 --> 00:35:15.945
<v Speaker 1>Portainer.

00:35:17.305 --> 00:35:18.185
<v Speaker 1>Edge,

00:35:18.345 --> 00:35:20.505
<v Speaker 1>massive scale. You know, a a single instance

00:35:20.505 --> 00:35:23.769
<v Speaker 1>of Portainer can actually manage 45,000

00:35:23.769 --> 00:35:25.130
<v Speaker 1>remote environments,

00:35:25.450 --> 00:35:27.369
<v Speaker 1>and we are scaling that.

00:35:27.690 --> 00:35:30.410
<v Speaker 1>The target is a hundred thousand by sort

00:35:30.410 --> 00:35:31.769
<v Speaker 1>of middle of next year, and we're gonna

00:35:31.769 --> 00:35:34.250
<v Speaker 1>keep scaling beyond that. So you can actually

00:35:34.250 --> 00:35:34.569
<v Speaker 1>add,

00:35:35.375 --> 00:35:37.934
<v Speaker 1>you know, a lot of clusters or a

00:35:37.934 --> 00:35:39.775
<v Speaker 1>lot of individual nodes

00:35:40.734 --> 00:35:43.855
<v Speaker 1>because we we develop Portainer to be easy

00:35:43.855 --> 00:35:44.655
<v Speaker 1>to understand.

00:35:44.895 --> 00:35:46.495
<v Speaker 1>OT engineers,

00:35:46.895 --> 00:35:49.694
<v Speaker 1>which, you know, systems engineers in industry,

00:35:50.070 --> 00:35:51.750
<v Speaker 1>It's easy for them to understand.

00:35:52.230 --> 00:35:54.230
<v Speaker 1>We have things like device management as well.

00:35:54.230 --> 00:35:56.550
<v Speaker 1>We've got integrations with Intel,

00:35:56.550 --> 00:35:59.590
<v Speaker 1>AMT for lights out. That's like a a

00:35:59.750 --> 00:36:01.750
<v Speaker 1>BMC card for server people.

00:36:02.150 --> 00:36:03.350
<v Speaker 1>Zero touch device onboarding.

00:36:03.905 --> 00:36:06.145
<v Speaker 1>Portainer is self hosted, so we can run

00:36:06.145 --> 00:36:08.305
<v Speaker 1>safely behind your firewall. You don't have to

00:36:08.305 --> 00:36:09.665
<v Speaker 1>give the keys to your kingdom to some

00:36:09.665 --> 00:36:12.465
<v Speaker 1>SaaS service. It's all inside your firewall.

00:36:12.785 --> 00:36:15.425
<v Speaker 1>Portainer needs about 20 mega memory to run,

00:36:15.665 --> 00:36:18.920
<v Speaker 1>so it's really efficient. So, naturally, it works

00:36:18.920 --> 00:36:20.040
<v Speaker 1>well in an edge.

00:36:20.599 --> 00:36:21.480
<v Speaker 1>And we

00:36:21.880 --> 00:36:23.640
<v Speaker 1>have a lot of async

00:36:23.640 --> 00:36:24.440
<v Speaker 1>controls,

00:36:24.440 --> 00:36:26.279
<v Speaker 1>you know, API controls, so we actually work

00:36:26.279 --> 00:36:27.960
<v Speaker 1>really well over networks that are highly latent

00:36:27.960 --> 00:36:28.680
<v Speaker 1>or unreliable.

00:36:30.695 --> 00:36:32.615
<v Speaker 1>And our goal is basically to make things

00:36:32.615 --> 00:36:33.895
<v Speaker 1>really, really easy.

00:36:34.135 --> 00:36:35.015
<v Speaker 1>Really easy.

00:36:35.255 --> 00:36:36.695
<v Speaker 1>You don't have to try and remember all

00:36:36.695 --> 00:36:37.815
<v Speaker 1>of the command line. You don't have to

00:36:37.815 --> 00:36:39.655
<v Speaker 1>try and know how to write YAML. Mean,

00:36:39.655 --> 00:36:41.015
<v Speaker 1>if you wanna write YAML, go ahead. We

00:36:41.015 --> 00:36:42.055
<v Speaker 1>can we can help you do that with

00:36:42.055 --> 00:36:43.869
<v Speaker 1>that GitOps engine. But if you don't want

00:36:43.869 --> 00:36:45.310
<v Speaker 1>to, you don't have to. I'm always on

00:36:45.310 --> 00:36:46.350
<v Speaker 1>the UI.

00:36:46.750 --> 00:36:48.990
<v Speaker 1>Yep. There's a there's a there's a UI

00:36:48.990 --> 00:36:50.510
<v Speaker 1>that that will do it all for you.

00:36:50.510 --> 00:36:51.710
<v Speaker 1>Makes it nice and easy.

00:36:53.710 --> 00:36:56.110
<v Speaker 1>G two says we're awesome. And so because

00:36:56.110 --> 00:36:58.265
<v Speaker 1>g two says we're awesome, I say we're

00:36:58.265 --> 00:36:58.825
<v Speaker 1>awesome.

00:36:59.865 --> 00:37:02.905
<v Speaker 1>G g two, unlike Gartner, is actually something

00:37:02.905 --> 00:37:05.385
<v Speaker 1>that's done by the community. So the community

00:37:05.385 --> 00:37:06.265
<v Speaker 1>votes

00:37:06.345 --> 00:37:08.265
<v Speaker 1>and ranks it rather than

00:37:08.745 --> 00:37:09.465
<v Speaker 1>a

00:37:09.865 --> 00:37:12.425
<v Speaker 1>independent company like like Gartner, basically saying you

00:37:12.425 --> 00:37:14.640
<v Speaker 1>are where you are. G two is actually

00:37:14.640 --> 00:37:16.240
<v Speaker 1>is actually crowdsourced,

00:37:16.240 --> 00:37:18.400
<v Speaker 1>and people go and actually submit votes and

00:37:18.400 --> 00:37:20.960
<v Speaker 1>comments and vote for who they believe and

00:37:20.960 --> 00:37:22.880
<v Speaker 1>where they should be. So this is actually

00:37:22.880 --> 00:37:24.240
<v Speaker 1>direct feedback from our users.

00:37:27.795 --> 00:37:30.035
<v Speaker 1>We are really the only tool that

00:37:30.275 --> 00:37:32.115
<v Speaker 1>spans every cloud provider,

00:37:32.355 --> 00:37:33.555
<v Speaker 1>every Kubernetes,

00:37:33.635 --> 00:37:36.755
<v Speaker 1>Docker, serverless even. So, you know, we're if

00:37:36.755 --> 00:37:38.835
<v Speaker 1>you have a very hybrid world, we're the

00:37:38.835 --> 00:37:40.835
<v Speaker 1>only tool of choice for that. And and

00:37:40.835 --> 00:37:42.194
<v Speaker 1>we're really the only tool that can go

00:37:42.194 --> 00:37:42.755
<v Speaker 1>from

00:37:43.070 --> 00:37:46.270
<v Speaker 1>from data center to edge to my laptop

00:37:46.270 --> 00:37:48.990
<v Speaker 1>to cloud, any cloud. So it's very, flexible

00:37:48.990 --> 00:37:49.950
<v Speaker 1>in that regards.

00:37:51.869 --> 00:37:54.110
<v Speaker 1>Portainer sits in between your users and the

00:37:54.110 --> 00:37:54.750
<v Speaker 1>platform.

00:37:55.390 --> 00:37:57.550
<v Speaker 1>So when you when you deploy Portainer,

00:37:57.885 --> 00:38:00.525
<v Speaker 1>users interface with Portainer. They don't interface with

00:38:00.525 --> 00:38:03.085
<v Speaker 1>the underlying platform anymore. So it's very good

00:38:03.085 --> 00:38:04.365
<v Speaker 1>because it means that you don't have to

00:38:04.365 --> 00:38:06.285
<v Speaker 1>expose your Kubernetes APIs

00:38:06.365 --> 00:38:07.245
<v Speaker 1>externally.

00:38:07.405 --> 00:38:08.525
<v Speaker 1>Portainer

00:38:08.525 --> 00:38:09.485
<v Speaker 1>takes over

00:38:09.805 --> 00:38:11.965
<v Speaker 1>and is the API endpoint for your users

00:38:11.965 --> 00:38:13.890
<v Speaker 1>to interface with. So if they're using third

00:38:13.890 --> 00:38:17.170
<v Speaker 1>party tools, maybe like OpenLens or KubeCTL

00:38:17.170 --> 00:38:19.010
<v Speaker 1>or the the Azure

00:38:19.170 --> 00:38:20.130
<v Speaker 1>I mean, the

00:38:20.530 --> 00:38:22.690
<v Speaker 1>the Azure DevOps tooling or anything like that

00:38:22.690 --> 00:38:24.450
<v Speaker 1>that wants to talk to an API, it

00:38:24.450 --> 00:38:26.290
<v Speaker 1>could talk to Portainer, and Portainer will proxy

00:38:26.290 --> 00:38:28.865
<v Speaker 1>that to the back end based on relevant

00:38:28.865 --> 00:38:29.585
<v Speaker 1>permissions.

00:38:30.305 --> 00:38:31.665
<v Speaker 1>That means that you can really lock down

00:38:31.665 --> 00:38:33.825
<v Speaker 1>API access to your clusters in the back

00:38:33.825 --> 00:38:34.305
<v Speaker 1>end.

00:38:35.184 --> 00:38:37.025
<v Speaker 1>So we sit in between. We take care

00:38:37.025 --> 00:38:38.465
<v Speaker 1>of all of the user authentication.

00:38:38.865 --> 00:38:40.224
<v Speaker 1>We we basically,

00:38:40.850 --> 00:38:43.090
<v Speaker 1>you know, provide a safety blanket around all

00:38:43.090 --> 00:38:44.850
<v Speaker 1>all of the environments to make sure that

00:38:44.850 --> 00:38:46.610
<v Speaker 1>users can't do dumb things.

00:38:47.010 --> 00:38:49.570
<v Speaker 1>We we make it really easy to do

00:38:49.570 --> 00:38:51.090
<v Speaker 1>to do hard things, and we make it

00:38:51.090 --> 00:38:52.530
<v Speaker 1>very hard to do dangerous things.

00:38:56.405 --> 00:38:57.205
<v Speaker 1>Portainer's

00:38:57.205 --> 00:39:00.325
<v Speaker 1>set self hosted, can run multiple things, connect

00:39:00.325 --> 00:39:02.405
<v Speaker 1>it to your auth. We support

00:39:02.725 --> 00:39:05.205
<v Speaker 1>OAuth and LDAP, so you can go to

00:39:05.205 --> 00:39:06.645
<v Speaker 1>any kind of OAuth provider.

00:39:06.965 --> 00:39:08.005
<v Speaker 1>SSO

00:39:08.485 --> 00:39:10.405
<v Speaker 1>is

00:39:09.450 --> 00:39:11.130
<v Speaker 1>built into the product even in the free

00:39:11.130 --> 00:39:13.210
<v Speaker 1>version. We don't believe in in a SSO

00:39:13.210 --> 00:39:15.530
<v Speaker 1>tax. So SSO is available.

00:39:16.010 --> 00:39:19.050
<v Speaker 1>Roles and teams are back in native proxy.

00:39:19.609 --> 00:39:22.330
<v Speaker 1>And, again, Portainer sits in between everybody

00:39:22.445 --> 00:39:25.325
<v Speaker 1>and connects through to agents that run-in remote

00:39:25.325 --> 00:39:27.965
<v Speaker 1>environments. So really, really flexible tooling.

00:39:28.285 --> 00:39:29.965
<v Speaker 1>And I'm not gonna go anymore on slides.

00:39:29.965 --> 00:39:31.485
<v Speaker 1>I'm gonna actually show you the thing.

00:39:32.285 --> 00:39:33.165
<v Speaker 0>Awesome.

00:39:33.725 --> 00:39:35.405
<v Speaker 0>Great. Any questions come up through that?

00:39:37.270 --> 00:39:39.030
<v Speaker 0>No. I think that was very informative. I

00:39:39.030 --> 00:39:40.870
<v Speaker 0>had no idea that you actually processed the

00:39:40.870 --> 00:39:43.030
<v Speaker 0>Kubernetes API, and I could still leverage kind

00:39:43.030 --> 00:39:45.670
<v Speaker 0>of my, you know, standard tooling. So that

00:39:45.670 --> 00:39:47.110
<v Speaker 0>was a nice little treat.

00:39:47.270 --> 00:39:49.030
<v Speaker 0>So now I'm just looking forward to actually

00:39:49.030 --> 00:39:50.870
<v Speaker 0>seeing the demo and the UI and what

00:39:50.870 --> 00:39:51.910
<v Speaker 0>we can actually do with it.

00:39:53.265 --> 00:39:54.944
<v Speaker 0>We got a comment from Eddie just saying,

00:39:54.944 --> 00:39:55.425
<v Speaker 0>hey.

00:39:56.145 --> 00:39:57.985
<v Speaker 0>And saying great t shirt. Although,

00:39:58.224 --> 00:40:00.385
<v Speaker 0>we've spoken about the complexity of Kubernetes so

00:40:00.385 --> 00:40:01.665
<v Speaker 0>much, I may have to hide my Kubernetes

00:40:01.665 --> 00:40:02.545
<v Speaker 0>t shirt. I don't know.

00:40:05.750 --> 00:40:07.270
<v Speaker 1>Right. Yeah. I'm just jumping the command line,

00:40:07.270 --> 00:40:08.310
<v Speaker 1>but I'll stop doing that at this point

00:40:08.310 --> 00:40:08.790
<v Speaker 1>in time.

00:40:09.430 --> 00:40:11.750
<v Speaker 1>So, yes, we do. You see when when

00:40:11.750 --> 00:40:12.950
<v Speaker 1>you log in I'm I'm logged in as

00:40:12.950 --> 00:40:14.630
<v Speaker 1>an admin, and you wouldn't normally log in

00:40:14.630 --> 00:40:16.150
<v Speaker 1>as an admin. So you're seeing more of

00:40:16.150 --> 00:40:17.430
<v Speaker 1>the UI than you would do, and I

00:40:17.430 --> 00:40:18.790
<v Speaker 1>could probably log in as a user to

00:40:18.790 --> 00:40:21.065
<v Speaker 1>show you, but for in in the interest

00:40:21.065 --> 00:40:22.345
<v Speaker 1>of time, it won't for now.

00:40:23.625 --> 00:40:25.305
<v Speaker 1>But here, I've got a bunch of Kubernetes

00:40:25.305 --> 00:40:26.105
<v Speaker 1>environments.

00:40:26.105 --> 00:40:28.105
<v Speaker 1>And if I click kube config,

00:40:28.665 --> 00:40:30.984
<v Speaker 1>I can go and generate a kube config

00:40:30.984 --> 00:40:32.424
<v Speaker 1>file that will allow me to connect to

00:40:32.424 --> 00:40:34.424
<v Speaker 1>all of these environments. And if I download

00:40:34.424 --> 00:40:35.224
<v Speaker 1>that file

00:40:36.810 --> 00:40:38.330
<v Speaker 1>and open it,

00:40:40.650 --> 00:40:42.810
<v Speaker 1>you'll see here all of the Kubernetes endpoints

00:40:42.810 --> 00:40:44.090
<v Speaker 1>are actually Portainer.

00:40:44.490 --> 00:40:46.330
<v Speaker 1>So they're all connecting through. So no matter

00:40:46.330 --> 00:40:48.330
<v Speaker 1>which cluster I'm talking to, I'm actually talking

00:40:48.330 --> 00:40:50.295
<v Speaker 1>through. So here, I've got a line node,

00:40:50.295 --> 00:40:52.375
<v Speaker 1>I've got a CVO, I've got a GKE,

00:40:52.375 --> 00:40:54.615
<v Speaker 1>I've got a DigitalOcean, I've got an AKS.

00:40:54.615 --> 00:40:56.615
<v Speaker 1>All of them, you're actually connecting through to

00:40:56.615 --> 00:40:59.015
<v Speaker 1>Portainer as the API proxy.

00:40:59.255 --> 00:41:00.695
<v Speaker 1>So from

00:41:00.695 --> 00:41:04.455
<v Speaker 1>kubectl on my machine or OpenLens on my

00:41:03.890 --> 00:41:05.490
<v Speaker 1>or whatever are the tooling you choose to

00:41:05.490 --> 00:41:07.010
<v Speaker 1>use on your local machine,

00:41:07.970 --> 00:41:10.210
<v Speaker 1>then you can you can connect to these

00:41:10.210 --> 00:41:12.930
<v Speaker 1>back end clusters through Portainer, and we we

00:41:12.930 --> 00:41:14.370
<v Speaker 1>basically just get in the middle and and

00:41:14.370 --> 00:41:15.890
<v Speaker 1>make sure that the RBAC roles are applied

00:41:15.890 --> 00:41:17.570
<v Speaker 1>and everything's working just fine. So

00:41:17.970 --> 00:41:19.090
<v Speaker 1>in that regard, it's nice and easy.

00:41:20.615 --> 00:41:22.615
<v Speaker 1>So if I come into a cluster, as

00:41:22.615 --> 00:41:25.255
<v Speaker 1>an example, I'll come into a DigitalOcean cluster.

00:41:25.734 --> 00:41:26.295
<v Speaker 1>We

00:41:26.615 --> 00:41:28.935
<v Speaker 1>have the ability again, I'm an admin. Right?

00:41:28.935 --> 00:41:30.775
<v Speaker 1>So I have I have god mode access

00:41:30.775 --> 00:41:32.855
<v Speaker 1>to this environment. I have the ability to

00:41:32.855 --> 00:41:34.454
<v Speaker 1>create namespaces

00:41:34.890 --> 00:41:37.450
<v Speaker 1>for in here. I can actually say, I

00:41:37.450 --> 00:41:39.130
<v Speaker 1>wanna create them from a manifest so I

00:41:39.130 --> 00:41:40.890
<v Speaker 1>can link this back to a Git repo

00:41:41.210 --> 00:41:43.849
<v Speaker 1>and have a Git repo, you know, a

00:41:43.849 --> 00:41:46.329
<v Speaker 1>GitOps engine that, you know, controlling the net

00:41:46.410 --> 00:41:47.450
<v Speaker 1>the namespace.

00:41:47.529 --> 00:41:49.130
<v Speaker 1>Or if I don't want to, I can

00:41:49.130 --> 00:41:51.615
<v Speaker 1>use our form. And from the form, you

00:41:51.615 --> 00:41:53.535
<v Speaker 1>can go and things set things like like

00:41:53.535 --> 00:41:55.615
<v Speaker 1>quotas for the namespace. So can say, okay.

00:41:55.615 --> 00:41:57.535
<v Speaker 1>This namespace has this kind of quota.

00:41:58.255 --> 00:41:59.935
<v Speaker 1>I wanna actually say there's a load balance

00:41:59.935 --> 00:42:01.455
<v Speaker 1>of quota. They can only actually spin up

00:42:01.455 --> 00:42:03.295
<v Speaker 1>a request through load balances

00:42:03.775 --> 00:42:05.780
<v Speaker 1>in here. So that, you know because load

00:42:05.780 --> 00:42:07.540
<v Speaker 1>balances are expensive. I I look at our

00:42:07.540 --> 00:42:09.780
<v Speaker 1>our cloud bill every month and a huge

00:42:09.780 --> 00:42:11.540
<v Speaker 1>portion of it goes go goes on load

00:42:11.540 --> 00:42:13.540
<v Speaker 1>balances. So maybe just maybe you wanna control

00:42:13.540 --> 00:42:15.220
<v Speaker 1>that. Do we want people to be able

00:42:15.220 --> 00:42:16.980
<v Speaker 1>to use the ingress controller? If so,

00:42:17.785 --> 00:42:20.185
<v Speaker 1>what what what domain names are allowed? So

00:42:20.185 --> 00:42:21.545
<v Speaker 1>we might wanna say, okay. You can only

00:42:21.545 --> 00:42:23.145
<v Speaker 1>use this these domain names.

00:42:23.385 --> 00:42:24.985
<v Speaker 1>Are there any registries that we wanna give

00:42:24.985 --> 00:42:26.825
<v Speaker 1>them access to and we'll propagate the registry

00:42:26.825 --> 00:42:27.705
<v Speaker 1>credentials?

00:42:28.425 --> 00:42:29.865
<v Speaker 1>Do we want them to actually have access

00:42:29.865 --> 00:42:32.265
<v Speaker 1>to persistent persistent storage? If so, how much

00:42:32.265 --> 00:42:34.420
<v Speaker 1>persistent storage can they assign? So we can

00:42:34.420 --> 00:42:36.260
<v Speaker 1>go and set all of these things, or

00:42:36.260 --> 00:42:37.380
<v Speaker 1>we can just do a raw one and

00:42:37.380 --> 00:42:39.140
<v Speaker 1>say, you know what? There's there's actually nothing.

00:42:39.300 --> 00:42:41.460
<v Speaker 1>No no restrictions. We're gonna create a really,

00:42:41.460 --> 00:42:42.740
<v Speaker 1>really simple namespace.

00:42:43.460 --> 00:42:44.660
<v Speaker 1>And off we go, you go and create

00:42:44.660 --> 00:42:44.900
<v Speaker 1>it.

00:42:45.975 --> 00:42:47.655
<v Speaker 1>Once you have a namespace, you can actually

00:42:47.655 --> 00:42:49.495
<v Speaker 1>see, well, who has access to the namespace?

00:42:49.495 --> 00:42:50.855
<v Speaker 1>So you can see, well, you know, who

00:42:51.095 --> 00:42:53.495
<v Speaker 1>which which teams, which users,

00:42:53.575 --> 00:42:56.215
<v Speaker 1>or which teams have access to that namespace.

00:42:57.255 --> 00:42:58.935
<v Speaker 1>So it makes it nice and easy to

00:42:58.935 --> 00:42:59.815
<v Speaker 1>grant access to it.

00:43:01.230 --> 00:43:03.869
<v Speaker 1>And, again, coming back to us trying to

00:43:03.869 --> 00:43:05.550
<v Speaker 1>be a bit of a guardrail

00:43:05.790 --> 00:43:08.510
<v Speaker 1>at a cluster level, we can actually say,

00:43:08.510 --> 00:43:09.790
<v Speaker 1>you know what? We don't want our people

00:43:09.790 --> 00:43:11.950
<v Speaker 1>to have access to the the default namespace.

00:43:11.950 --> 00:43:14.954
<v Speaker 1>Yes. So many people can, yeah, continue to

00:43:14.954 --> 00:43:17.994
<v Speaker 1>use the default namespace. Don't use the default

00:43:17.994 --> 00:43:18.955
<v Speaker 1>namespace.

00:43:19.194 --> 00:43:21.595
<v Speaker 1>If when you when you are deploying applications,

00:43:21.595 --> 00:43:23.755
<v Speaker 1>put the application in a namespace. Don't use

00:43:23.755 --> 00:43:26.075
<v Speaker 1>the default namespace. It's just dumb. So we

00:43:26.075 --> 00:43:27.674
<v Speaker 1>actually say, you know what? As an admin,

00:43:27.674 --> 00:43:29.520
<v Speaker 1>we're actually gonna flick a switch, and then

00:43:29.520 --> 00:43:31.520
<v Speaker 1>no one can use the default namespace. It's

00:43:31.520 --> 00:43:33.040
<v Speaker 1>just blocked. If they try to deploy into

00:43:33.040 --> 00:43:34.640
<v Speaker 1>it, we'll say, uh-uh. Not allowed.

00:43:35.600 --> 00:43:38.240
<v Speaker 1>So that is very good practice and something

00:43:38.240 --> 00:43:39.200
<v Speaker 1>that we strongly recommend.

00:43:41.535 --> 00:43:44.255
<v Speaker 1>We even do things like you know, Kubernetes,

00:43:45.055 --> 00:43:47.215
<v Speaker 1>because of its infinite flexibility,

00:43:47.375 --> 00:43:49.215
<v Speaker 1>it doesn't wanna say no to anything.

00:43:49.454 --> 00:43:52.335
<v Speaker 1>So you can have a a a Kubernetes

00:43:52.335 --> 00:43:54.494
<v Speaker 1>cluster running on three Raspberry PIs,

00:43:55.050 --> 00:43:55.850
<v Speaker 1>and then

00:43:56.250 --> 00:43:58.730
<v Speaker 1>a user can ask that cluster, hey. I

00:43:58.730 --> 00:44:00.410
<v Speaker 1>wanna deploy an application. I want that I

00:44:00.410 --> 00:44:02.570
<v Speaker 1>want that application to have a gig of

00:44:02.570 --> 00:44:03.210
<v Speaker 1>RAM

00:44:03.370 --> 00:44:05.050
<v Speaker 1>or 256

00:44:05.050 --> 00:44:06.010
<v Speaker 1>gig of RAM.

00:44:06.250 --> 00:44:07.930
<v Speaker 1>And Kubernetes will say, okay.

00:44:08.625 --> 00:44:10.625
<v Speaker 1>And then in the background, it'll go and

00:44:10.625 --> 00:44:12.145
<v Speaker 1>fail because the because, you know, a Raspberry

00:44:12.145 --> 00:44:13.985
<v Speaker 1>Pi cluster doesn't have 256

00:44:13.985 --> 00:44:15.985
<v Speaker 1>gig of RAM. So it'll just fail. It'll

00:44:15.985 --> 00:44:17.665
<v Speaker 1>sit there in in a in a crash

00:44:17.665 --> 00:44:19.905
<v Speaker 1>back loop because there's no there's no resource.

00:44:20.545 --> 00:44:23.425
<v Speaker 1>And the reason Kubernetes lets you do that

00:44:22.590 --> 00:44:23.950
<v Speaker 1>is because it says, well, if you have

00:44:23.950 --> 00:44:25.950
<v Speaker 1>auto scaling enabled here, like,

00:44:26.350 --> 00:44:27.710
<v Speaker 1>your node auto scaling,

00:44:28.110 --> 00:44:30.590
<v Speaker 1>right now, you might not have enough resource.

00:44:30.910 --> 00:44:34.030
<v Speaker 1>But thirty seconds from now, when more nodes

00:44:34.030 --> 00:44:35.790
<v Speaker 1>have been added to the cluster, you might.

00:44:35.790 --> 00:44:38.635
<v Speaker 1>So what we'll do is say, fail now,

00:44:38.635 --> 00:44:40.795
<v Speaker 1>but we'll but we'll keep retrying in case

00:44:40.795 --> 00:44:42.635
<v Speaker 1>in case you actually add more nodes.

00:44:43.115 --> 00:44:45.515
<v Speaker 1>If you don't use node auto scaling,

00:44:46.154 --> 00:44:48.714
<v Speaker 1>then your ability to over to to ever

00:44:48.714 --> 00:44:52.075
<v Speaker 1>service requests that are beyond the cluster's capability

00:44:52.075 --> 00:44:54.369
<v Speaker 1>is zero. So we actually let you flick

00:44:54.369 --> 00:44:56.369
<v Speaker 1>a switch to say, don't let users ask

00:44:56.369 --> 00:44:57.890
<v Speaker 1>for things that that the cluster in its

00:44:57.890 --> 00:44:59.170
<v Speaker 1>current state can deliver.

00:44:59.810 --> 00:45:01.890
<v Speaker 1>Again, we're just trying to make it substantially

00:45:01.890 --> 00:45:02.530
<v Speaker 1>easier

00:45:02.690 --> 00:45:04.770
<v Speaker 1>for for users. So you users don't do

00:45:04.770 --> 00:45:06.690
<v Speaker 1>things that then immediately fail and, like, well,

00:45:07.285 --> 00:45:09.365
<v Speaker 1>it succeeded, and now it's failing. What's going

00:45:09.365 --> 00:45:11.525
<v Speaker 1>wrong? So they they're they're going immediately wasting

00:45:11.525 --> 00:45:12.725
<v Speaker 1>time triaging

00:45:12.885 --> 00:45:14.885
<v Speaker 1>when, really, they shouldn't be wasting time triaging.

00:45:14.885 --> 00:45:16.325
<v Speaker 1>We should just stop them doing things that's

00:45:16.325 --> 00:45:18.565
<v Speaker 1>gonna immediately fail because because the cluster isn't

00:45:18.565 --> 00:45:20.645
<v Speaker 1>equipped to deliver it. Same thing like load

00:45:20.645 --> 00:45:21.045
<v Speaker 1>balances.

00:45:21.530 --> 00:45:23.690
<v Speaker 1>It doesn't in Kubernetes, you you you can

00:45:23.690 --> 00:45:26.650
<v Speaker 1>ask your micro case cluster or whatever else.

00:45:26.650 --> 00:45:28.410
<v Speaker 1>Hey. I want an application, and the application

00:45:28.410 --> 00:45:29.930
<v Speaker 1>needs to be published with service type load

00:45:29.930 --> 00:45:30.650
<v Speaker 1>balancer.

00:45:30.890 --> 00:45:33.290
<v Speaker 1>You have no load balancer. It'll sit pending

00:45:33.290 --> 00:45:35.325
<v Speaker 1>forever. Well, it's just dumb. It's gonna go

00:45:35.325 --> 00:45:37.005
<v Speaker 1>back you're gonna go to triage mode. So

00:45:37.005 --> 00:45:39.005
<v Speaker 1>we can say, don't use a load balancer.

00:45:39.165 --> 00:45:40.685
<v Speaker 1>And then if a user asks for a

00:45:40.685 --> 00:45:42.525
<v Speaker 1>load balancer, we won't we won't let them

00:45:42.525 --> 00:45:44.685
<v Speaker 1>actually submit the request. We all say, this

00:45:44.685 --> 00:45:47.005
<v Speaker 1>this this cluster has has no load balances.

00:45:47.005 --> 00:45:49.725
<v Speaker 1>Choose another service type, ingress or something else.

00:45:50.420 --> 00:45:52.580
<v Speaker 1>So, again, we're we're trying to stop people

00:45:52.820 --> 00:45:55.300
<v Speaker 1>doing things that we know will immediately fail.

00:45:56.100 --> 00:45:58.180
<v Speaker 1>Does that make sense? It does did.

00:45:59.060 --> 00:46:00.900
<v Speaker 1>Yeah. We're just it's just trying to trying

00:46:00.900 --> 00:46:02.580
<v Speaker 1>to trying to save time. Again, there's nothing

00:46:02.580 --> 00:46:04.705
<v Speaker 1>worse than saying yes and then failing immediately,

00:46:04.705 --> 00:46:05.825
<v Speaker 1>and the user has to go into triage

00:46:05.825 --> 00:46:07.345
<v Speaker 1>mode. It's just that's just crazy.

00:46:09.105 --> 00:46:10.705
<v Speaker 1>But, also, things like like

00:46:11.185 --> 00:46:13.744
<v Speaker 1>like constraints here. If you turn on pod

00:46:13.744 --> 00:46:15.905
<v Speaker 1>pod constraints, we will we will go and

00:46:15.905 --> 00:46:18.009
<v Speaker 1>we will go and deploy automatically in the

00:46:18.009 --> 00:46:20.170
<v Speaker 1>cluster for you, things like o like, OPA

00:46:20.170 --> 00:46:21.130
<v Speaker 1>gatekeeper.

00:46:21.130 --> 00:46:23.210
<v Speaker 1>And here, we're setting OPA policies

00:46:23.369 --> 00:46:25.450
<v Speaker 1>to restrict what users can do in in

00:46:25.450 --> 00:46:26.170
<v Speaker 1>the cluster.

00:46:26.569 --> 00:46:28.730
<v Speaker 1>Again, trying to stop users doing dangerous things.

00:46:29.525 --> 00:46:31.125
<v Speaker 1>So you you don't have to have OPA

00:46:31.125 --> 00:46:32.645
<v Speaker 1>with but when you when you flip the

00:46:32.645 --> 00:46:34.325
<v Speaker 1>switch and click okay, we'll go and deploy

00:46:34.325 --> 00:46:36.085
<v Speaker 1>the o p the OPA gatekeeper service for

00:46:36.085 --> 00:46:38.005
<v Speaker 1>you and configure all these rules for you

00:46:38.005 --> 00:46:38.725
<v Speaker 1>automatically.

00:46:38.965 --> 00:46:40.405
<v Speaker 1>So, again, we're just trying to make it

00:46:40.405 --> 00:46:41.925
<v Speaker 1>trying to make it really, really quick and

00:46:41.925 --> 00:46:44.085
<v Speaker 1>easy to do to do relatively complicated things.

00:46:44.310 --> 00:46:46.470
<v Speaker 1>Like, if anyone's configured, they'll be a gatekeeper.

00:46:46.470 --> 00:46:47.670
<v Speaker 1>It's not easy. So

00:46:48.550 --> 00:46:50.070
<v Speaker 1>we we try and do this for you.

00:46:50.310 --> 00:46:51.590
<v Speaker 0>Yeah. I'm just glad you have the toggle

00:46:51.590 --> 00:46:52.870
<v Speaker 0>button so I don't have to remember how

00:46:52.870 --> 00:46:53.990
<v Speaker 0>to write RIGO because

00:46:54.550 --> 00:46:55.910
<v Speaker 0>I'm terrible at writing RIGO.

00:46:57.155 --> 00:46:59.315
<v Speaker 1>Yeah. We we likely will provide you the

00:46:59.315 --> 00:47:02.195
<v Speaker 1>ability to upload a a YAML file if

00:47:02.195 --> 00:47:04.515
<v Speaker 1>you already have one that will basically, you

00:47:04.515 --> 00:47:06.915
<v Speaker 1>know, answer boxes for you, you know, like,

00:47:06.915 --> 00:47:07.795
<v Speaker 1>boxes for you.

00:47:08.275 --> 00:47:09.315
<v Speaker 1>Because one of the things that we've been

00:47:09.315 --> 00:47:12.160
<v Speaker 1>criticized of is that we're we're not not

00:47:12.160 --> 00:47:13.840
<v Speaker 1>asterisk as code enough.

00:47:14.400 --> 00:47:16.000
<v Speaker 1>So we we will we will provide the

00:47:16.000 --> 00:47:18.800
<v Speaker 1>ability to to leverage code in the future.

00:47:18.880 --> 00:47:21.520
<v Speaker 0>So somebody really really wants to write YAML

00:47:21.520 --> 00:47:23.760
<v Speaker 0>to configure Portainer. They can configure Portainer with

00:47:23.760 --> 00:47:24.000
<v Speaker 0>YAML.

00:47:24.595 --> 00:47:26.755
<v Speaker 1>Correct. So we we we will we will

00:47:26.755 --> 00:47:28.435
<v Speaker 1>be iterating that capability

00:47:28.755 --> 00:47:30.515
<v Speaker 1>in the future and more and more,

00:47:31.235 --> 00:47:32.995
<v Speaker 1>you know, things in Portainer are gonna gonna

00:47:32.995 --> 00:47:34.835
<v Speaker 1>start getting a a YAML

00:47:34.915 --> 00:47:37.570
<v Speaker 1>ability rather than click to enable. But at

00:47:37.570 --> 00:47:39.010
<v Speaker 1>the moment, we're we're trying to make things

00:47:39.010 --> 00:47:41.330
<v Speaker 1>so so crazy simple. And the way to

00:47:41.330 --> 00:47:43.250
<v Speaker 1>make it crazy simple is tick boxes or

00:47:43.250 --> 00:47:44.770
<v Speaker 1>or or switches.

00:47:45.010 --> 00:47:46.290
<v Speaker 0>Okay. And we have a a couple of

00:47:46.290 --> 00:47:47.970
<v Speaker 0>questions if you're happy to tackle them just

00:47:47.970 --> 00:47:51.235
<v Speaker 0>now. Got it. So Russell was asking if

00:47:51.235 --> 00:47:53.795
<v Speaker 0>there is a Portainer managed service or whether

00:47:53.795 --> 00:47:55.395
<v Speaker 0>they run it themselves.

00:47:57.155 --> 00:47:59.715
<v Speaker 1>There is not. Everything is run yourself.

00:48:00.560 --> 00:48:02.640
<v Speaker 1>If there is enough demand for a managed

00:48:02.640 --> 00:48:05.359
<v Speaker 1>service, then I then I would consider it.

00:48:05.359 --> 00:48:08.000
<v Speaker 1>Never never say never to a commercial opportunity.

00:48:09.040 --> 00:48:11.600
<v Speaker 1>There is not currently a managed service primarily

00:48:11.600 --> 00:48:13.119
<v Speaker 1>because we don't believe there needs to be.

00:48:13.119 --> 00:48:15.115
<v Speaker 1>Portainer is so easy to use and so

00:48:15.115 --> 00:48:15.915
<v Speaker 1>lightweight

00:48:15.994 --> 00:48:17.434
<v Speaker 1>that we don't believe that there there needs

00:48:17.434 --> 00:48:18.795
<v Speaker 1>to be a managed service, but happy to

00:48:18.795 --> 00:48:20.234
<v Speaker 1>happy to offer one if there's enough demand

00:48:20.234 --> 00:48:20.875
<v Speaker 1>for one.

00:48:21.275 --> 00:48:23.115
<v Speaker 0>Alright. And, Russell, following up with the second

00:48:23.115 --> 00:48:25.275
<v Speaker 0>question and was asking, is there a way

00:48:25.275 --> 00:48:28.315
<v Speaker 0>to filter all resources attached to an application?

00:48:29.470 --> 00:48:32.030
<v Speaker 0>So, like, if we have a a pod,

00:48:32.110 --> 00:48:34.350
<v Speaker 0>can we see that there's a namespace attached,

00:48:34.350 --> 00:48:35.790
<v Speaker 0>some storage attached,

00:48:36.270 --> 00:48:38.030
<v Speaker 0>network policies, and all that?

00:48:38.750 --> 00:48:40.990
<v Speaker 1>So if if we come into an application,

00:48:40.990 --> 00:48:41.710
<v Speaker 1>for example,

00:48:42.030 --> 00:48:44.645
<v Speaker 1>and I choose one, this test one, you

00:48:44.645 --> 00:48:45.685
<v Speaker 1>can come in here and you can see

00:48:45.685 --> 00:48:47.205
<v Speaker 1>here's the pod.

00:48:47.205 --> 00:48:49.205
<v Speaker 1>If there's persistence, you can see that there's

00:48:49.205 --> 00:48:51.925
<v Speaker 1>persistence. You can see there's any configurations.

00:48:51.925 --> 00:48:53.525
<v Speaker 1>You can see there's always scaling. Could you

00:48:53.525 --> 00:48:54.885
<v Speaker 0>submit little bit on that page?

00:48:56.270 --> 00:48:58.670
<v Speaker 1>Sure. I forget that I have a terrible

00:48:58.670 --> 00:49:00.430
<v Speaker 1>font size. Is that better?

00:49:02.109 --> 00:49:03.950
<v Speaker 1>I will I'll deploy one. Right? So if

00:49:03.950 --> 00:49:05.150
<v Speaker 1>I do NGINX,

00:49:06.109 --> 00:49:08.109
<v Speaker 1>and it's just a simple NGINX image,

00:49:09.215 --> 00:49:11.695
<v Speaker 1>I am going to have an environment variable

00:49:11.695 --> 00:49:13.695
<v Speaker 1>of foo and bars. It's not gonna do

00:49:13.695 --> 00:49:15.775
<v Speaker 1>anything. I'm going to persist

00:49:16.255 --> 00:49:17.535
<v Speaker 1>slash data.

00:49:17.535 --> 00:49:18.655
<v Speaker 1>It's gonna be

00:49:20.255 --> 00:49:22.175
<v Speaker 1>10 gig in size, and it's gonna come

00:49:22.175 --> 00:49:23.535
<v Speaker 1>from this DO block storage.

00:49:25.070 --> 00:49:27.950
<v Speaker 1>I am going to have one instance. I

00:49:27.950 --> 00:49:29.870
<v Speaker 1>could turn on auto scaling if I wanted.

00:49:30.110 --> 00:49:33.070
<v Speaker 1>I'm going to publish it as a load

00:49:33.070 --> 00:49:33.950
<v Speaker 1>balancer

00:49:36.190 --> 00:49:37.070
<v Speaker 1>for 80

00:49:38.154 --> 00:49:39.835
<v Speaker 1>and deploy. So you can see here, we're

00:49:39.835 --> 00:49:41.674
<v Speaker 1>gonna create a service of type the name

00:49:41.674 --> 00:49:43.194
<v Speaker 1>engine x of type load balance. We're gonna

00:49:43.194 --> 00:49:45.115
<v Speaker 1>create a service called this of type cluster

00:49:45.115 --> 00:49:46.714
<v Speaker 1>IP. We're gonna create a stateful set called

00:49:46.714 --> 00:49:48.075
<v Speaker 1>engine x. This is what we're doing behind

00:49:48.075 --> 00:49:49.835
<v Speaker 1>the scenes for you. You don't you don't

00:49:49.835 --> 00:49:51.914
<v Speaker 1>know or care that we've done that, but

00:49:51.914 --> 00:49:54.190
<v Speaker 1>that's what we've done for you. And deploy.

00:49:54.270 --> 00:49:56.430
<v Speaker 1>It's gonna deploy, and this is gonna go

00:49:56.430 --> 00:49:57.630
<v Speaker 1>and ask DigitalOcean

00:49:57.630 --> 00:49:59.310
<v Speaker 1>to give me a load balance. So it's

00:49:59.310 --> 00:50:01.310
<v Speaker 1>gonna go and ask DigitalOcean to give me

00:50:01.310 --> 00:50:02.750
<v Speaker 1>some persistent volume.

00:50:02.990 --> 00:50:05.230
<v Speaker 1>And now if I come into this application,

00:50:05.470 --> 00:50:07.390
<v Speaker 1>you'll see here that

00:50:08.305 --> 00:50:11.025
<v Speaker 1>you can access this through the cluster IP.

00:50:11.025 --> 00:50:13.105
<v Speaker 1>You can access it through the load balancer.

00:50:13.745 --> 00:50:15.505
<v Speaker 1>You know, the XML IP is still pending,

00:50:15.505 --> 00:50:17.585
<v Speaker 1>we gotta wait for DigitalOcean to deliver it.

00:50:17.985 --> 00:50:20.065
<v Speaker 1>You can see here here's the configuration. You

00:50:20.065 --> 00:50:21.905
<v Speaker 1>can see here here's the data persistence,

00:50:22.370 --> 00:50:24.610
<v Speaker 1>the container name, the pod name, system folder,

00:50:24.610 --> 00:50:26.530
<v Speaker 1>and here is the the the back the

00:50:26.530 --> 00:50:28.450
<v Speaker 1>the back end volume. So we've automatically created

00:50:28.450 --> 00:50:29.730
<v Speaker 1>the PVC for you

00:50:30.210 --> 00:50:31.330
<v Speaker 1>and assigned it.

00:50:31.650 --> 00:50:33.650
<v Speaker 1>It's gonna wait to be scaled up. Eventually,

00:50:33.650 --> 00:50:34.850
<v Speaker 1>you can see the logs. You can go

00:50:34.850 --> 00:50:36.450
<v Speaker 1>and see all of the metrics information

00:50:37.345 --> 00:50:38.465
<v Speaker 1>for it. Now

00:50:38.705 --> 00:50:40.465
<v Speaker 1>I'll come back and get one that is

00:50:40.465 --> 00:50:41.745
<v Speaker 1>actually already up.

00:50:42.625 --> 00:50:44.385
<v Speaker 1>Oh, it's actually already up.

00:50:45.745 --> 00:50:48.305
<v Speaker 1>Well, I should've just refreshed. I'm just impatient.

00:50:48.465 --> 00:50:49.825
<v Speaker 1>So you can see here, you can already

00:50:49.825 --> 00:50:52.250
<v Speaker 1>see the stats. So this is now talking

00:50:52.250 --> 00:50:54.330
<v Speaker 1>to the Kubernetes metric server and pulling in

00:50:54.330 --> 00:50:56.650
<v Speaker 1>metrics around this application. So it's not doing

00:50:56.650 --> 00:50:58.650
<v Speaker 1>anything, obviously, because it's just a dummy genetics

00:50:58.650 --> 00:50:59.610
<v Speaker 1>container. But,

00:51:00.250 --> 00:51:01.770
<v Speaker 1>yeah, this this is talking to metrics and

00:51:01.770 --> 00:51:03.050
<v Speaker 1>pulling in some metrics.

00:51:04.330 --> 00:51:07.105
<v Speaker 1>We can actually come back here and see

00:51:07.105 --> 00:51:08.625
<v Speaker 1>the application. I can go and get the

00:51:08.625 --> 00:51:10.865
<v Speaker 1>logs for the application in one place,

00:51:11.185 --> 00:51:12.545
<v Speaker 1>which does make it easy.

00:51:13.105 --> 00:51:14.865
<v Speaker 1>And if I need to, I can get

00:51:14.865 --> 00:51:17.825
<v Speaker 1>a console into that into that pod and

00:51:17.825 --> 00:51:18.785
<v Speaker 1>triage

00:51:19.025 --> 00:51:20.545
<v Speaker 1>that pod if I need to as well.

00:51:20.545 --> 00:51:22.065
<v Speaker 1>So you're actually in and doing things.

00:51:22.839 --> 00:51:24.200
<v Speaker 1>So it makes it nice and nice and

00:51:24.200 --> 00:51:25.559
<v Speaker 1>easy to interface with it. So I don't

00:51:25.559 --> 00:51:26.440
<v Speaker 1>know if that's

00:51:26.760 --> 00:51:27.800
<v Speaker 1>answering the question.

00:51:29.000 --> 00:51:30.760
<v Speaker 1>So here, we're still waiting.

00:51:31.079 --> 00:51:33.320
<v Speaker 1>No. Okay. Anyway, we're still waiting for it.

00:51:33.400 --> 00:51:35.160
<v Speaker 1>So it's pulled the image. It's scaling.

00:51:36.015 --> 00:51:37.535
<v Speaker 1>You can also see the YAML, by the

00:51:37.535 --> 00:51:38.974
<v Speaker 1>way, if you if you care enough about

00:51:38.974 --> 00:51:39.375
<v Speaker 1>it.

00:51:41.055 --> 00:51:42.335
<v Speaker 1>I think that's question.

00:51:42.654 --> 00:51:44.015
<v Speaker 0>We we can see all the kind of

00:51:44.015 --> 00:51:45.535
<v Speaker 0>attached resources.

00:51:46.414 --> 00:51:48.895
<v Speaker 0>Is there any special record sorry. Is there

00:51:48.895 --> 00:51:50.255
<v Speaker 0>any visual representation,

00:51:50.255 --> 00:51:52.690
<v Speaker 0>you know, like a graph, main map, and

00:51:52.690 --> 00:51:53.890
<v Speaker 0>if like that? That could be a cool

00:51:53.890 --> 00:51:54.450
<v Speaker 0>feature.

00:51:55.010 --> 00:51:55.810
<v Speaker 1>Absolutely.

00:51:55.970 --> 00:51:57.810
<v Speaker 1>No. But it's a good feature.

00:51:58.210 --> 00:51:59.170
<v Speaker 1>By the way, if you come to the

00:51:59.170 --> 00:52:00.850
<v Speaker 1>namespaces, click on the namespace.

00:52:01.010 --> 00:52:03.490
<v Speaker 1>You can actually see the applications running within

00:52:03.490 --> 00:52:04.290
<v Speaker 1>the namespace as well.

00:52:05.255 --> 00:52:06.775
<v Speaker 1>Or if you want another view, you can

00:52:06.775 --> 00:52:07.895
<v Speaker 1>come to the cluster,

00:52:08.455 --> 00:52:10.455
<v Speaker 1>and you can click on the nodes of

00:52:10.455 --> 00:52:12.535
<v Speaker 1>the cluster if you wanted to, and you

00:52:12.535 --> 00:52:15.095
<v Speaker 1>can see the applications that are running on

00:52:15.095 --> 00:52:17.415
<v Speaker 1>that on that node as well. So there's

00:52:17.415 --> 00:52:19.175
<v Speaker 1>a whole bunch of differing differing views if

00:52:19.175 --> 00:52:20.859
<v Speaker 1>you want to to look at it as

00:52:20.859 --> 00:52:21.260
<v Speaker 1>well.

00:52:22.220 --> 00:52:23.980
<v Speaker 0>K. And, again, from the cluster, you can

00:52:23.980 --> 00:52:25.260
<v Speaker 1>see things, you know, with, you know, the

00:52:25.260 --> 00:52:27.500
<v Speaker 1>memory reservation, memory use, CPU. You can see

00:52:27.500 --> 00:52:29.180
<v Speaker 1>the node stats as well, and, again, talking

00:52:29.180 --> 00:52:31.820
<v Speaker 1>to metric server. So it it's a very

00:52:31.820 --> 00:52:33.900
<v Speaker 1>deep experience. It really is a very deep

00:52:33.900 --> 00:52:34.140
<v Speaker 1>experience.

00:52:35.125 --> 00:52:37.285
<v Speaker 1>Again, the volumes so you can see here

00:52:37.285 --> 00:52:37.925
<v Speaker 1>the

00:52:38.245 --> 00:52:40.245
<v Speaker 1>that this is the the the claim that

00:52:40.245 --> 00:52:43.205
<v Speaker 1>we've created here against the block storage. So

00:52:43.445 --> 00:52:44.805
<v Speaker 1>here we are here up and running.

00:52:46.850 --> 00:52:49.410
<v Speaker 1>So it does make it easy. And, if

00:52:49.410 --> 00:52:50.850
<v Speaker 1>you if you really, really want to, you

00:52:50.850 --> 00:52:53.170
<v Speaker 1>can click the kubectl shell and you can

00:52:53.250 --> 00:52:55.730
<v Speaker 1>you're actually in that cluster. Kubectl

00:52:55.730 --> 00:52:56.770
<v Speaker 1>get nodes.

00:52:56.850 --> 00:52:58.450
<v Speaker 1>You're actually in that cluster

00:52:58.610 --> 00:53:01.535
<v Speaker 1>inside Portainer directly engaging with that cluster should

00:53:01.535 --> 00:53:03.055
<v Speaker 1>you want to actually use the command line

00:53:03.055 --> 00:53:05.375
<v Speaker 1>because there's something you wanna do that's that's

00:53:05.375 --> 00:53:07.615
<v Speaker 1>beyond what's available in the UI, should you

00:53:07.615 --> 00:53:08.255
<v Speaker 1>need to.

00:53:09.694 --> 00:53:10.575
<v Speaker 0>Cool.

00:53:11.295 --> 00:53:13.790
<v Speaker 1>So pretty pretty easy to to go and

00:53:13.790 --> 00:53:15.710
<v Speaker 1>configure, you know, like, to go and configure

00:53:15.710 --> 00:53:18.190
<v Speaker 1>a stateful set with a load balancer and

00:53:18.190 --> 00:53:21.230
<v Speaker 1>a config and and and and and, you

00:53:21.230 --> 00:53:24.110
<v Speaker 1>know, that that manifest that that helm file

00:53:24.110 --> 00:53:25.070
<v Speaker 1>would be quite large.

00:53:25.855 --> 00:53:27.775
<v Speaker 1>I I actually deployed that in a very,

00:53:27.775 --> 00:53:30.335
<v Speaker 1>very short amount of time. Now is this

00:53:30.335 --> 00:53:32.815
<v Speaker 1>is this infrastructure as code? No.

00:53:33.375 --> 00:53:34.815
<v Speaker 1>Would you would you would you do this

00:53:34.815 --> 00:53:37.455
<v Speaker 1>in production? Probably not. But for a dev

00:53:37.455 --> 00:53:39.535
<v Speaker 1>who wants to experiment on their machine or

00:53:39.535 --> 00:53:41.349
<v Speaker 1>a dev who just needs quickly spin things

00:53:41.349 --> 00:53:43.910
<v Speaker 1>up in a dev cluster, nothing wrong with

00:53:43.910 --> 00:53:45.910
<v Speaker 1>the UI to get things done quickly. In

00:53:45.910 --> 00:53:47.270
<v Speaker 1>production, obviously,

00:53:47.430 --> 00:53:48.390
<v Speaker 1>you would create

00:53:48.550 --> 00:53:51.030
<v Speaker 1>a a a manifest file and you'd use

00:53:51.030 --> 00:53:53.590
<v Speaker 1>things like like a GitOps engine, you configure

00:53:53.805 --> 00:53:56.204
<v Speaker 1>automatic updates. So you're gonna poll Git, look

00:53:56.204 --> 00:53:58.684
<v Speaker 1>for changes, and force redeploy any changes in

00:53:58.684 --> 00:53:59.405
<v Speaker 1>the cluster.

00:54:00.045 --> 00:54:02.285
<v Speaker 1>So, you know, you in production, you'd use

00:54:02.285 --> 00:54:05.005
<v Speaker 1>GitOps. But outside of production, ain't nothing wrong

00:54:05.005 --> 00:54:06.845
<v Speaker 1>with a good old fashioned UI saving you

00:54:06.845 --> 00:54:07.005
<v Speaker 1>time.

00:54:08.620 --> 00:54:10.780
<v Speaker 1>Argue argue against that. Go on.

00:54:12.220 --> 00:54:13.900
<v Speaker 0>No. I'm not arguing about it. I think

00:54:13.900 --> 00:54:14.540
<v Speaker 0>I

00:54:14.940 --> 00:54:17.260
<v Speaker 0>I think we definitely need more simplicity in

00:54:17.260 --> 00:54:19.500
<v Speaker 0>this in this space. Like, things are wildly

00:54:19.500 --> 00:54:20.380
<v Speaker 0>complicated.

00:54:20.380 --> 00:54:22.175
<v Speaker 0>It just. Absolutely.

00:54:22.175 --> 00:54:23.615
<v Speaker 1>It it I mean I mean, how how

00:54:23.615 --> 00:54:24.895
<v Speaker 1>long would it take you to go to

00:54:24.895 --> 00:54:27.535
<v Speaker 1>to go write a a manifest from scratch?

00:54:27.695 --> 00:54:28.895
<v Speaker 1>In fact, I can I can show you

00:54:28.895 --> 00:54:30.255
<v Speaker 1>the manifest? Right? So,

00:54:30.575 --> 00:54:31.535
<v Speaker 1>yeah, how long would it take you to

00:54:31.535 --> 00:54:33.055
<v Speaker 1>go go and write a manifest from scratch

00:54:33.055 --> 00:54:34.495
<v Speaker 1>that that does all the stuff? And the

00:54:34.575 --> 00:54:36.819
<v Speaker 1>unless you're an absolute wizard or or you're

00:54:36.819 --> 00:54:38.740
<v Speaker 1>starting from one that you already have and

00:54:38.740 --> 00:54:40.579
<v Speaker 1>you're just simply copying a manifest and and

00:54:40.579 --> 00:54:42.020
<v Speaker 1>modifying a couple of things.

00:54:42.819 --> 00:54:43.940
<v Speaker 1>And, you know,

00:54:44.260 --> 00:54:46.020
<v Speaker 1>you really you really gotta gotta be a

00:54:46.020 --> 00:54:47.780
<v Speaker 1>a pretty pretty special you know, oh, here

00:54:47.780 --> 00:54:48.900
<v Speaker 1>you go. The load balance is already up.

00:54:49.025 --> 00:54:50.305
<v Speaker 1>So there you go. We've got the IP

00:54:50.305 --> 00:54:52.865
<v Speaker 1>address from DigitalOcean and and NGINX is up

00:54:52.865 --> 00:54:53.505
<v Speaker 1>and running.

00:54:54.385 --> 00:54:55.345
<v Speaker 1>So Cool.

00:54:56.145 --> 00:54:58.705
<v Speaker 1>And as you'd expect, if you delete the

00:54:58.705 --> 00:54:59.425
<v Speaker 1>application,

00:54:59.505 --> 00:55:01.185
<v Speaker 1>we go and clean up after ourselves. If

00:55:01.185 --> 00:55:01.825
<v Speaker 1>you remove it,

00:55:02.720 --> 00:55:04.640
<v Speaker 1>we'll we'll go and tell DigitalOcean,

00:55:04.720 --> 00:55:06.559
<v Speaker 1>go and go and delete the volume, go

00:55:06.559 --> 00:55:09.279
<v Speaker 1>go and delete the load balancer, and it'll

00:55:09.279 --> 00:55:10.880
<v Speaker 1>go and clean up after itself as well.

00:55:10.880 --> 00:55:11.359
<v Speaker 1>So,

00:55:12.240 --> 00:55:14.400
<v Speaker 1>yeah, it's all all legit here.

00:55:15.915 --> 00:55:18.315
<v Speaker 0>Alright. You ready for the hard question?

00:55:18.795 --> 00:55:19.595
<v Speaker 1>Go on.

00:55:20.155 --> 00:55:23.755
<v Speaker 0>Does Portainer provide any convenience around custom resources?

00:55:26.155 --> 00:55:27.355
<v Speaker 1>CRDs,

00:55:27.435 --> 00:55:28.155
<v Speaker 1>not yet.

00:55:29.619 --> 00:55:32.260
<v Speaker 1>So if you are installing

00:55:32.260 --> 00:55:33.140
<v Speaker 1>operators,

00:55:33.140 --> 00:55:35.460
<v Speaker 1>you can install them using Helm charts.

00:55:36.099 --> 00:55:38.980
<v Speaker 1>But, no, we don't currently have any native

00:55:38.980 --> 00:55:40.820
<v Speaker 1>support for CRDs.

00:55:41.140 --> 00:55:44.180
<v Speaker 1>Little honestly, though, most CRDs are either available

00:55:44.180 --> 00:55:46.415
<v Speaker 1>as a manifest that you can install, just

00:55:46.415 --> 00:55:48.175
<v Speaker 1>add add add application,

00:55:48.735 --> 00:55:51.935
<v Speaker 1>create for manifest, and even paste in

00:55:53.055 --> 00:55:54.335
<v Speaker 1>a operator

00:55:55.535 --> 00:55:57.375
<v Speaker 1>YAML if you need to. Yeah. What I

00:55:57.375 --> 00:56:00.015
<v Speaker 0>was thinking was, like, I wonder if you

00:55:59.420 --> 00:56:01.100
<v Speaker 0>know, because once you apply the CRD to

00:56:01.100 --> 00:56:03.420
<v Speaker 0>the cluster, you have those open API spec

00:56:03.420 --> 00:56:05.980
<v Speaker 0>available over the API. It's, a Portainer could

00:56:05.980 --> 00:56:07.660
<v Speaker 0>consume that and then get me a web

00:56:07.660 --> 00:56:09.660
<v Speaker 0>form for those fields based on the open

00:56:09.660 --> 00:56:11.740
<v Speaker 0>API spec. That would be a pretty cool

00:56:11.740 --> 00:56:11.900
<v Speaker 0>feature.

00:56:13.115 --> 00:56:15.674
<v Speaker 1>Not yet, but happy happy to take that.

00:56:15.674 --> 00:56:16.875
<v Speaker 0>Failing what I should.

00:56:17.755 --> 00:56:20.875
<v Speaker 1>Happy happy to take a feature request. Absolutely.

00:56:22.315 --> 00:56:23.035
<v Speaker 1>Any any

00:56:23.755 --> 00:56:25.994
<v Speaker 1>anything that actually makes it easier to consume?

00:56:25.994 --> 00:56:28.120
<v Speaker 1>Absolutely. It's really funny. Like, we we we

00:56:28.120 --> 00:56:30.680
<v Speaker 1>added Helm support push push Helm support out.

00:56:31.080 --> 00:56:33.080
<v Speaker 1>And, yeah, Helm Helm is is is a

00:56:33.080 --> 00:56:34.840
<v Speaker 1>very cool tool. Right? You know, it makes

00:56:34.840 --> 00:56:36.760
<v Speaker 1>it very easy to deploy stuff, but you

00:56:36.760 --> 00:56:38.040
<v Speaker 1>still need to know how to modify the

00:56:38.040 --> 00:56:39.640
<v Speaker 1>values dot YAML file. So we make we

00:56:39.640 --> 00:56:41.664
<v Speaker 1>make it really easy to edit values dot

00:56:41.664 --> 00:56:43.664
<v Speaker 1>YAML directly inside Portainer so you can you

00:56:43.664 --> 00:56:45.825
<v Speaker 1>can, you know, edit it directly and deploy.

00:56:46.545 --> 00:56:48.625
<v Speaker 1>It's really funny. We actually really we we

00:56:48.625 --> 00:56:50.785
<v Speaker 1>we actually released this feature, and then we

00:56:50.785 --> 00:56:51.905
<v Speaker 1>got commentary back.

00:56:52.305 --> 00:56:54.224
<v Speaker 1>Why why are you actually releasing features for

00:56:54.224 --> 00:56:56.940
<v Speaker 1>Helm? Helm's dead. It's now all about all

00:56:56.940 --> 00:56:58.780
<v Speaker 1>about customized. So, like, what?

00:56:59.579 --> 00:57:01.660
<v Speaker 1>It's like this that this thing that this

00:57:01.660 --> 00:57:03.980
<v Speaker 1>this this environment changes so quickly. So anyway,

00:57:03.980 --> 00:57:05.980
<v Speaker 1>the Helm is not dead. Helm is definitely

00:57:05.980 --> 00:57:06.780
<v Speaker 0>not dead. Helm

00:57:07.180 --> 00:57:08.140
<v Speaker 1>is so easy.

00:57:08.780 --> 00:57:10.380
<v Speaker 1>So yeah. So you you you can see

00:57:10.380 --> 00:57:12.464
<v Speaker 1>here's here's the the values file. You can

00:57:12.464 --> 00:57:14.065
<v Speaker 1>make changes to to the values file, hit

00:57:14.065 --> 00:57:15.744
<v Speaker 1>hit deploy, and we'll go and deploy it

00:57:15.744 --> 00:57:17.664
<v Speaker 1>in into the cluster. So it makes it

00:57:17.664 --> 00:57:19.265
<v Speaker 1>really, really easy to work with Helm as

00:57:19.265 --> 00:57:19.744
<v Speaker 1>well.

00:57:20.065 --> 00:57:22.464
<v Speaker 1>You can head add other other Helm repos

00:57:22.464 --> 00:57:23.664
<v Speaker 1>should you should you need to.

00:57:24.880 --> 00:57:26.320
<v Speaker 1>So it makes it nice and nice and

00:57:26.320 --> 00:57:26.800
<v Speaker 1>easy.

00:57:27.360 --> 00:57:28.080
<v Speaker 0>So

00:57:28.880 --> 00:57:31.440
<v Speaker 0>you're logged in to Portainer right now. What

00:57:31.440 --> 00:57:32.080
<v Speaker 0>what

00:57:33.280 --> 00:57:35.119
<v Speaker 0>sign on mechanism is used for this instance

00:57:35.119 --> 00:57:36.160
<v Speaker 0>that we're looking at today?

00:57:37.375 --> 00:57:39.695
<v Speaker 1>This one, if I go to settings

00:57:40.015 --> 00:57:41.215
<v Speaker 1>authentication,

00:57:41.455 --> 00:57:43.775
<v Speaker 1>is using local or internal just because it's

00:57:43.775 --> 00:57:44.895
<v Speaker 1>my demo environment,

00:57:45.055 --> 00:57:46.895
<v Speaker 1>but there's absolutely nothing. And by the way,

00:57:46.895 --> 00:57:48.415
<v Speaker 1>you can change your password

00:57:48.735 --> 00:57:50.575
<v Speaker 1>characters if you want. We got some we

00:57:50.575 --> 00:57:53.540
<v Speaker 1>got some beat ups for trying to enforce

00:57:53.620 --> 00:57:55.940
<v Speaker 1>good practices for passwords. So we made we

00:57:55.940 --> 00:57:57.860
<v Speaker 1>we made it fixable because some

00:57:58.260 --> 00:58:00.180
<v Speaker 1>people wanna pass with length of one characters.

00:58:00.180 --> 00:58:01.380
<v Speaker 1>In fact, some people wanna pass with length

00:58:01.380 --> 00:58:02.100
<v Speaker 1>of zero.

00:58:02.820 --> 00:58:04.420
<v Speaker 1>So that that this one uses internal.

00:58:05.045 --> 00:58:07.125
<v Speaker 1>In in all honesty, in production, I would

00:58:07.125 --> 00:58:10.005
<v Speaker 1>strongly recommend something like OAuth. Yeah. Because if

00:58:10.005 --> 00:58:11.365
<v Speaker 1>you if you do OAuth, you've got things

00:58:11.365 --> 00:58:13.365
<v Speaker 1>like single sign on that you can do

00:58:13.365 --> 00:58:16.165
<v Speaker 1>automatic user provisioning, automatic team mapping. So if

00:58:16.165 --> 00:58:18.485
<v Speaker 1>users are in a team or sorry, in

00:58:18.485 --> 00:58:20.600
<v Speaker 1>a group in OAuth, we will we will

00:58:20.600 --> 00:58:23.160
<v Speaker 1>automatically associate them to a team inside Portainer.

00:58:23.160 --> 00:58:24.840
<v Speaker 1>So it makes it really easy for management.

00:58:24.840 --> 00:58:27.080
<v Speaker 1>You don't you don't manage users in Portainer

00:58:27.080 --> 00:58:28.520
<v Speaker 1>or Teams at that point anymore. It's all

00:58:28.520 --> 00:58:29.560
<v Speaker 1>managed upstream.

00:58:30.600 --> 00:58:32.680
<v Speaker 1>So in all honesty, you'd you would use

00:58:32.955 --> 00:58:35.035
<v Speaker 1>one of these primary providers, and it's pretty

00:58:35.035 --> 00:58:37.275
<v Speaker 1>easy to go configure against the primary providers

00:58:37.275 --> 00:58:38.315
<v Speaker 1>in this regard.

00:58:38.875 --> 00:58:40.635
<v Speaker 1>So I probably should change my devo to

00:58:40.635 --> 00:58:42.315
<v Speaker 1>actually use to use something a bit more

00:58:42.315 --> 00:58:42.955
<v Speaker 1>reliable.

00:58:44.235 --> 00:58:45.035
<v Speaker 0>Alright. No worries.

00:58:47.140 --> 00:58:49.220
<v Speaker 1>We we have things like authentication logs so

00:58:49.220 --> 00:58:50.580
<v Speaker 1>you can see who has tried to log

00:58:50.580 --> 00:58:52.020
<v Speaker 1>in to the environment. And when they have

00:58:52.020 --> 00:58:54.020
<v Speaker 1>logged in, what have they done? So, you

00:58:54.020 --> 00:58:56.260
<v Speaker 1>know, this isn't a audit log. There's no

00:58:56.260 --> 00:58:58.260
<v Speaker 1>delete button. There's no purge. We keep this

00:58:58.260 --> 00:58:59.860
<v Speaker 1>log for seven days and cycle it.

00:59:00.585 --> 00:59:02.585
<v Speaker 1>So, you know, your your c a your

00:59:02.585 --> 00:59:04.825
<v Speaker 1>CISO can log in and see who caused

00:59:04.825 --> 00:59:06.665
<v Speaker 1>the outage at two in the morning and

00:59:06.665 --> 00:59:08.025
<v Speaker 1>what do they do. So you come in

00:59:08.025 --> 00:59:09.785
<v Speaker 1>here and inspect the payload and see what

00:59:09.785 --> 00:59:11.065
<v Speaker 1>was what was sent to the back end

00:59:11.065 --> 00:59:11.785
<v Speaker 1>cluster.

00:59:12.105 --> 00:59:15.109
<v Speaker 1>So that's sits here in a really nice,

00:59:15.349 --> 00:59:17.589
<v Speaker 1>yeah, audited audible way. This is the paid

00:59:17.589 --> 00:59:18.630
<v Speaker 1>version I'm using, by the way, not the

00:59:18.630 --> 00:59:20.230
<v Speaker 1>free version. So there's a few more features

00:59:20.230 --> 00:59:20.950
<v Speaker 1>in here.

00:59:23.829 --> 00:59:24.630
<v Speaker 1>Registries,

00:59:24.630 --> 00:59:26.789
<v Speaker 1>providing access to registries

00:59:26.789 --> 00:59:27.750
<v Speaker 1>is quite

00:59:28.185 --> 00:59:29.945
<v Speaker 1>quite quite a burden. So we let the

00:59:29.945 --> 00:59:32.025
<v Speaker 1>administrator define registries here

00:59:32.345 --> 00:59:34.025
<v Speaker 1>so you can add a registry. And once

00:59:34.025 --> 00:59:35.705
<v Speaker 1>you add registries in here, you can come

00:59:35.705 --> 00:59:37.865
<v Speaker 1>into a cluster and say, I want to

00:59:37.865 --> 00:59:39.305
<v Speaker 1>enable this cluster

00:59:40.025 --> 00:59:42.425
<v Speaker 1>to to use this registry.

00:59:43.305 --> 00:59:45.920
<v Speaker 1>And then want these users in this cluster

00:59:45.920 --> 00:59:47.440
<v Speaker 1>or this namespace to have access to it,

00:59:47.440 --> 00:59:49.119
<v Speaker 1>and then we'll we'll actually propagate the image

00:59:49.119 --> 00:59:51.520
<v Speaker 1>pull secret into the namespace automatically for you.

00:59:51.520 --> 00:59:53.200
<v Speaker 1>So your so your dev users don't need

00:59:53.200 --> 00:59:54.080
<v Speaker 1>to worry about it.

00:59:55.680 --> 00:59:57.440
<v Speaker 1>So makes it nice and easy to to

00:59:57.440 --> 00:59:59.904
<v Speaker 1>work with with private registries. And if you

00:59:59.904 --> 01:00:01.424
<v Speaker 1>so desire it, because we're getting a of

01:00:01.424 --> 01:00:03.265
<v Speaker 1>people ask for it, you can actually hide

01:00:03.265 --> 01:00:05.424
<v Speaker 1>access to Docker Hub. So we actually hide

01:00:05.424 --> 01:00:07.744
<v Speaker 1>it from the UI so people can't see

01:00:07.744 --> 01:00:09.744
<v Speaker 1>the public Docker Hub registry.

01:00:12.144 --> 01:00:14.305
<v Speaker 1>So just a lot of lot of really

01:00:14.305 --> 01:00:15.025
<v Speaker 1>interesting features there.

01:00:15.700 --> 01:00:18.420
<v Speaker 0>We have another question for Russell

01:00:18.580 --> 01:00:20.260
<v Speaker 0>who is asking,

01:00:20.260 --> 01:00:22.420
<v Speaker 0>is there anything like alerting?

01:00:23.540 --> 01:00:25.300
<v Speaker 0>Or do would you expect people to manage

01:00:25.300 --> 01:00:26.500
<v Speaker 0>them through other tools?

01:00:28.645 --> 01:00:30.725
<v Speaker 0>I'm assuming that being if a pod is

01:00:30.725 --> 01:00:32.485
<v Speaker 0>crashing back off, and is there a way

01:00:32.485 --> 01:00:34.885
<v Speaker 0>to kind of alert that for someone?

01:00:35.525 --> 01:00:37.445
<v Speaker 1>So we we make it obvious

01:00:37.765 --> 01:00:40.485
<v Speaker 1>in the UI. So in the UI, we

01:00:40.485 --> 01:00:42.325
<v Speaker 1>make it obvious that it's it's failing. Like,

01:00:42.325 --> 01:00:44.405
<v Speaker 1>you can see here, this is this is

01:00:43.950 --> 01:00:44.750
<v Speaker 1>healthy.

01:00:44.990 --> 01:00:47.070
<v Speaker 1>If if there is a zero of one,

01:00:47.070 --> 01:00:48.350
<v Speaker 1>this goes bright red

01:00:48.829 --> 01:00:50.430
<v Speaker 1>to show you that there's a problem. That's

01:00:50.430 --> 01:00:52.190
<v Speaker 1>not alerting, but that's making it that that

01:00:52.190 --> 01:00:53.470
<v Speaker 1>there's a visual cue.

01:00:53.790 --> 01:00:55.869
<v Speaker 1>By the way, this green dot here is

01:00:55.869 --> 01:00:57.950
<v Speaker 1>if you are using an image.

01:00:58.445 --> 01:01:00.205
<v Speaker 1>So the green means the image that is

01:01:00.205 --> 01:01:02.125
<v Speaker 1>running is the same version as the image

01:01:02.125 --> 01:01:03.325
<v Speaker 1>that's in the registry.

01:01:03.485 --> 01:01:05.965
<v Speaker 1>If if they differ, this little green dot

01:01:05.965 --> 01:01:06.845
<v Speaker 1>goes red

01:01:07.165 --> 01:01:09.005
<v Speaker 1>just as a as a complete tangent there.

01:01:10.970 --> 01:01:13.609
<v Speaker 1>So there's no native alerting per se in

01:01:13.609 --> 01:01:15.849
<v Speaker 1>Portainer, but what we are actually doing is

01:01:15.849 --> 01:01:18.890
<v Speaker 1>integrating with a product called SOSIVO,

01:01:19.289 --> 01:01:21.369
<v Speaker 1>s o s I v dot I o.

01:01:21.369 --> 01:01:23.609
<v Speaker 1>So Portainer is building or has built and

01:01:23.609 --> 01:01:24.569
<v Speaker 1>will be releasing

01:01:25.365 --> 01:01:26.245
<v Speaker 1>imminently

01:01:26.325 --> 01:01:28.565
<v Speaker 1>in a in a native integration with Sausavo.

01:01:28.565 --> 01:01:29.525
<v Speaker 1>And when you

01:01:29.925 --> 01:01:31.765
<v Speaker 1>inside a cluster, you will be able to

01:01:31.765 --> 01:01:34.165
<v Speaker 1>turn on Sausavo monitoring.

01:01:34.645 --> 01:01:37.125
<v Speaker 1>We will deploy the Sausavo collectors.

01:01:37.125 --> 01:01:38.570
<v Speaker 1>In fact, if you noticed, there's probably a

01:01:38.570 --> 01:01:40.170
<v Speaker 1>nice space called Salsavo in here because I've

01:01:40.170 --> 01:01:41.210
<v Speaker 1>been playing around with it.

01:01:41.850 --> 01:01:44.810
<v Speaker 1>You can actually turn on Salsavo alerting, and

01:01:44.810 --> 01:01:47.050
<v Speaker 1>it'll it does all of that really cool

01:01:47.050 --> 01:01:48.890
<v Speaker 1>stuff. Salsavo is

01:01:49.395 --> 01:01:51.715
<v Speaker 1>what Prometheus and Grafana should be.

01:01:52.995 --> 01:01:54.915
<v Speaker 1>The the re the reason reason why we've

01:01:54.915 --> 01:01:57.475
<v Speaker 1>decided to partner with Sausavo is they share

01:01:57.475 --> 01:01:59.795
<v Speaker 1>a very similar ethos to us.

01:02:00.675 --> 01:02:02.675
<v Speaker 1>If you have a wall of metrics from

01:02:02.675 --> 01:02:03.795
<v Speaker 1>Prometheus and Grafana,

01:02:04.320 --> 01:02:06.480
<v Speaker 1>unless you know what you're looking at, the

01:02:06.480 --> 01:02:08.240
<v Speaker 1>metrics are relatively meaningless.

01:02:08.320 --> 01:02:09.120
<v Speaker 1>Salsavo

01:02:09.120 --> 01:02:10.880
<v Speaker 1>ingest the metrics, has a has a whole

01:02:10.880 --> 01:02:12.880
<v Speaker 1>rules engine inside it, and says this means

01:02:12.880 --> 01:02:14.560
<v Speaker 1>that. So rather than just giving a wall

01:02:14.560 --> 01:02:15.920
<v Speaker 1>of metrics that says, hey. There's a problem

01:02:15.920 --> 01:02:17.600
<v Speaker 1>with the cluster. This is the problem, and

01:02:17.600 --> 01:02:18.720
<v Speaker 1>this is what you should do to fix

01:02:18.720 --> 01:02:18.880
<v Speaker 1>it.

01:02:20.005 --> 01:02:22.645
<v Speaker 1>So I I kinda really like that

01:02:22.965 --> 01:02:25.605
<v Speaker 1>that, you know, ease of access to true

01:02:25.605 --> 01:02:26.485
<v Speaker 1>observability.

01:02:26.485 --> 01:02:27.845
<v Speaker 1>You can still see the raw data if

01:02:27.845 --> 01:02:29.765
<v Speaker 1>you want, but but they they they spend

01:02:29.765 --> 01:02:31.125
<v Speaker 1>a lot of time building the front end.

01:02:31.125 --> 01:02:32.565
<v Speaker 1>And so we're we're gonna pull all of

01:02:32.565 --> 01:02:34.830
<v Speaker 1>that information into Portainer and that you see

01:02:34.830 --> 01:02:36.510
<v Speaker 1>it, but also you can see the alerts.

01:02:37.470 --> 01:02:39.150
<v Speaker 1>So right now, you can't, but

01:02:39.630 --> 01:02:41.470
<v Speaker 1>so serve.io.

01:02:41.470 --> 01:02:44.430
<v Speaker 1>These guys. By the way, absolutely no commercial

01:02:44.430 --> 01:02:46.830
<v Speaker 1>relationship with these guys at all. Just like

01:02:46.830 --> 01:02:48.270
<v Speaker 1>their product and wanna integrate with them.

01:02:49.075 --> 01:02:50.275
<v Speaker 1>So pretty cool.

01:02:52.355 --> 01:02:54.835
<v Speaker 1>So no. No. No native alerting. But once

01:02:54.835 --> 01:02:56.435
<v Speaker 1>we have the source of our integration, we

01:02:56.435 --> 01:02:57.875
<v Speaker 1>will be able to do that. Yes.

01:02:58.835 --> 01:03:01.715
<v Speaker 0>Alright. Cool. Other quick other questions? What's the

01:03:01.715 --> 01:03:03.475
<v Speaker 0>custom templates thing? Did we look at that?

01:03:04.820 --> 01:03:06.420
<v Speaker 1>Custom templates are awesome.

01:03:07.300 --> 01:03:08.580
<v Speaker 1>And in fact, I probably should've talked about

01:03:08.580 --> 01:03:10.500
<v Speaker 1>them sooner. So Portainer's

01:03:10.500 --> 01:03:13.620
<v Speaker 1>goal is to enable those who need to

01:03:13.620 --> 01:03:14.420
<v Speaker 1>be enabled.

01:03:15.220 --> 01:03:17.700
<v Speaker 1>So even inside an organization. Right? So let

01:03:17.700 --> 01:03:19.380
<v Speaker 1>let let's let's say that you're you're a

01:03:19.380 --> 01:03:21.355
<v Speaker 1>company, and the company has a luxury of

01:03:21.355 --> 01:03:23.755
<v Speaker 1>being able to hire one person who knows

01:03:23.755 --> 01:03:25.035
<v Speaker 1>about Kubernetes.

01:03:25.515 --> 01:03:27.914
<v Speaker 1>That one person can actually go and set

01:03:27.914 --> 01:03:29.355
<v Speaker 1>up a bunch of stuff

01:03:29.755 --> 01:03:30.795
<v Speaker 1>for the

01:03:31.194 --> 01:03:34.090
<v Speaker 1>the the less empowered members of their team.

01:03:34.090 --> 01:03:36.650
<v Speaker 1>I'm I'm I'm choosing my words carefully here.

01:03:37.690 --> 01:03:40.090
<v Speaker 1>And so a an expert

01:03:40.090 --> 01:03:41.930
<v Speaker 1>user could come in here and say, I'm

01:03:41.930 --> 01:03:44.170
<v Speaker 1>actually going to go and create a bunch

01:03:44.170 --> 01:03:45.130
<v Speaker 1>of templates,

01:03:45.130 --> 01:03:47.610
<v Speaker 1>which could be they're they're all manifest based.

01:03:48.065 --> 01:03:49.745
<v Speaker 1>It could be you you you might paste

01:03:49.745 --> 01:03:51.745
<v Speaker 1>in a manifest that that defines an ingress.

01:03:51.745 --> 01:03:53.425
<v Speaker 1>You might define you might paste in a

01:03:53.425 --> 01:03:55.745
<v Speaker 1>manifest that deploys an application with a whole

01:03:55.745 --> 01:03:57.825
<v Speaker 1>bunch of Bushtash variables. You can you can

01:03:57.825 --> 01:04:01.150
<v Speaker 1>you can basically add manifest in here and

01:04:01.150 --> 01:04:03.790
<v Speaker 1>save them as a template that then other

01:04:03.790 --> 01:04:06.110
<v Speaker 1>users can go and consume, click deploy, click

01:04:06.110 --> 01:04:07.310
<v Speaker 1>deploy, click deploy.

01:04:07.470 --> 01:04:09.550
<v Speaker 1>So it's it's a very, very simple and

01:04:09.550 --> 01:04:12.590
<v Speaker 1>easy way to consume advanced capability that an

01:04:12.590 --> 01:04:15.070
<v Speaker 1>expert inside your organization has created for you.

01:04:16.214 --> 01:04:18.694
<v Speaker 1>So really, really, really, really nice way to

01:04:18.694 --> 01:04:19.734
<v Speaker 1>to share things.

01:04:19.974 --> 01:04:22.055
<v Speaker 1>Similar similar concept, by the way, with the

01:04:22.055 --> 01:04:23.895
<v Speaker 1>namespaces when I said the

01:04:25.255 --> 01:04:27.910
<v Speaker 1>ingress controllers. Right? You may say, you know,

01:04:27.910 --> 01:04:29.750
<v Speaker 1>the expert person will say, I'm actually we

01:04:29.750 --> 01:04:32.630
<v Speaker 1>we only only own the domain, you know,

01:04:32.630 --> 01:04:35.110
<v Speaker 1>testtestdomain.com.

01:04:35.110 --> 01:04:37.830
<v Speaker 1>So I'm gonna only allow users to request

01:04:37.830 --> 01:04:39.190
<v Speaker 1>that. And so once this is done,

01:04:39.845 --> 01:04:40.964
<v Speaker 1>when users

01:04:40.964 --> 01:04:43.924
<v Speaker 1>inside the namespace go to create a service

01:04:43.924 --> 01:04:44.805
<v Speaker 1>of type

01:04:44.885 --> 01:04:45.685
<v Speaker 1>ingress,

01:04:45.924 --> 01:04:48.005
<v Speaker 1>the only drop down are the domains that

01:04:48.005 --> 01:04:50.885
<v Speaker 1>the expert has pre preauthorized or pre validated.

01:04:52.299 --> 01:04:54.059
<v Speaker 1>So a a user can't go and create

01:04:54.059 --> 01:04:56.859
<v Speaker 1>some random domain and and push it out.

01:04:56.859 --> 01:04:57.660
<v Speaker 1>So we

01:04:58.539 --> 01:05:00.140
<v Speaker 1>we we we try to make it really

01:05:00.140 --> 01:05:02.220
<v Speaker 1>easy. So, again, custom templates are a way

01:05:02.220 --> 01:05:03.980
<v Speaker 1>to share things. And so as as a

01:05:03.980 --> 01:05:04.299
<v Speaker 1>user,

01:05:05.115 --> 01:05:07.035
<v Speaker 1>I can actually go and deploy this. So

01:05:07.035 --> 01:05:08.475
<v Speaker 1>I can I can come into this this

01:05:08.475 --> 01:05:10.795
<v Speaker 1>one here, and I can see, for example,

01:05:11.115 --> 01:05:13.115
<v Speaker 1>I've got a bunch of stuff in here?

01:05:13.115 --> 01:05:14.955
<v Speaker 1>This is this is a PVC claim, deploys

01:05:14.955 --> 01:05:16.955
<v Speaker 1>an engine x. So there's a bunch of

01:05:16.955 --> 01:05:17.515
<v Speaker 1>things in here,

01:05:18.630 --> 01:05:20.150
<v Speaker 1>and I can go and deploy the thing

01:05:20.150 --> 01:05:21.910
<v Speaker 1>from here pretty pretty quick and easy.

01:05:22.950 --> 01:05:23.590
<v Speaker 0>Cool.

01:05:23.990 --> 01:05:25.910
<v Speaker 1>So it's just it's just shared.

01:05:26.549 --> 01:05:28.869
<v Speaker 1>So does that make sense?

01:05:29.109 --> 01:05:30.549
<v Speaker 0>Yeah. It does make sense. Definitely.

01:05:31.485 --> 01:05:34.045
<v Speaker 0>Especially for those things where, you know, people

01:05:34.045 --> 01:05:36.365
<v Speaker 0>like to think that Kubernetes deployments are unicorns

01:05:36.365 --> 01:05:38.765
<v Speaker 0>and super unique. But actually, deploying most applications

01:05:38.765 --> 01:05:41.565
<v Speaker 0>to Kubernetes can be templated relatively easily. Like,

01:05:41.565 --> 01:05:42.925
<v Speaker 0>we all just need to specify a container

01:05:42.925 --> 01:05:45.005
<v Speaker 0>image at a port and maybe some, like,

01:05:45.005 --> 01:05:48.740
<v Speaker 0>CPU limits. Like, nothing really is that special

01:05:48.740 --> 01:05:49.620
<v Speaker 0>or unique.

01:05:50.740 --> 01:05:52.980
<v Speaker 1>Yeah. Especially when you're using using

01:05:53.540 --> 01:05:56.020
<v Speaker 1>using variables. So in inside the variable, you

01:05:56.020 --> 01:05:57.220
<v Speaker 1>can actually put in

01:05:57.700 --> 01:06:01.125
<v Speaker 1>just basic Bushtask variables. And then, basically, when

01:06:01.125 --> 01:06:02.405
<v Speaker 1>when you go to deploy, you can that,

01:06:02.405 --> 01:06:03.605
<v Speaker 1>you know, you there's a nice input box

01:06:03.605 --> 01:06:05.445
<v Speaker 1>here, and you can actually replace the the

01:06:05.445 --> 01:06:07.925
<v Speaker 1>the variables at deploy time. So it makes

01:06:07.925 --> 01:06:10.085
<v Speaker 1>them able to be to be reused in

01:06:10.085 --> 01:06:12.245
<v Speaker 1>a really, really simple way. So it's just

01:06:12.245 --> 01:06:13.845
<v Speaker 1>it's just a nice easy way to say,

01:06:13.845 --> 01:06:15.750
<v Speaker 1>you know, I've I've I want expert in

01:06:15.750 --> 01:06:17.350
<v Speaker 1>my team. I'm one I'm one person. I

01:06:17.350 --> 01:06:18.950
<v Speaker 1>can only work seventy hours in the day.

01:06:19.030 --> 01:06:20.470
<v Speaker 1>I I I I need to I need

01:06:20.470 --> 01:06:22.790
<v Speaker 1>to make myself infinitely more

01:06:23.110 --> 01:06:24.470
<v Speaker 1>efficient or effective

01:06:24.630 --> 01:06:27.030
<v Speaker 1>by propagating my knowledge through to other members

01:06:27.030 --> 01:06:29.270
<v Speaker 1>of my team through things like templates,

01:06:29.615 --> 01:06:30.974
<v Speaker 1>And that that's kind of the goal. So

01:06:30.974 --> 01:06:32.655
<v Speaker 1>even though I said Portainer is a tool

01:06:32.655 --> 01:06:35.214
<v Speaker 1>that almost always an expert might shy away

01:06:35.214 --> 01:06:35.695
<v Speaker 1>from,

01:06:36.815 --> 01:06:39.934
<v Speaker 1>an actual true expert, a true expert realizes

01:06:39.934 --> 01:06:42.655
<v Speaker 1>the the the infinite time savings that's gonna

01:06:42.655 --> 01:06:43.055
<v Speaker 1>make

01:06:43.760 --> 01:06:45.680
<v Speaker 1>and say, actually, you know what? I'm sick

01:06:45.680 --> 01:06:48.240
<v Speaker 1>of getting dumb questions from my my my

01:06:48.240 --> 01:06:49.680
<v Speaker 1>my colleagues.

01:06:50.079 --> 01:06:52.000
<v Speaker 1>I'm gonna put Portainer in here and actually

01:06:52.000 --> 01:06:54.720
<v Speaker 1>provide provide a means to abstract away

01:06:54.880 --> 01:06:56.240
<v Speaker 1>stuff that I get asked all the time

01:06:56.240 --> 01:06:57.915
<v Speaker 1>as base templates. So

01:06:58.555 --> 01:06:59.595
<v Speaker 1>at your exit, I say, you know what?

01:06:59.595 --> 01:07:00.955
<v Speaker 1>This is actually really, really interesting. I can

01:07:00.955 --> 01:07:02.635
<v Speaker 1>now I can now get back five hours

01:07:02.635 --> 01:07:04.715
<v Speaker 1>of my day. I'm not answering dumb questions,

01:07:04.715 --> 01:07:07.115
<v Speaker 1>building building templated manifests.

01:07:07.915 --> 01:07:08.715
<v Speaker 0>Cool.

01:07:09.275 --> 01:07:11.595
<v Speaker 0>Are there any other features you want? Sorry.

01:07:11.595 --> 01:07:13.510
<v Speaker 0>Let me go. No. One one of the

01:07:13.510 --> 01:07:15.510
<v Speaker 1>most important things is dark mode. Everyone wants

01:07:15.510 --> 01:07:17.830
<v Speaker 1>dark mode, if I don't click it if

01:07:18.549 --> 01:07:20.549
<v Speaker 1>if someone will ask, is there a dark

01:07:20.549 --> 01:07:22.230
<v Speaker 1>mode? Yes. It's dark mode. I I prefer

01:07:22.230 --> 01:07:24.069
<v Speaker 1>light mode, but there is a dark mode.

01:07:24.069 --> 01:07:25.829
<v Speaker 1>There's also a high con high contrast mode

01:07:25.829 --> 01:07:27.109
<v Speaker 1>for visually impaired, but

01:07:28.434 --> 01:07:29.714
<v Speaker 1>you can choose to this. So we have

01:07:29.714 --> 01:07:32.275
<v Speaker 1>API tokens. If you have automation, external automation,

01:07:32.275 --> 01:07:34.355
<v Speaker 1>you can add API tokens, and then you

01:07:34.355 --> 01:07:35.635
<v Speaker 1>can automate Portainer.

01:07:35.635 --> 01:07:37.795
<v Speaker 1>By the way, we're an API first product.

01:07:37.795 --> 01:07:39.875
<v Speaker 1>Everything in the front end has an API,

01:07:39.875 --> 01:07:41.635
<v Speaker 1>and you can you can control it through

01:07:41.635 --> 01:07:42.115
<v Speaker 1>API.

01:07:43.080 --> 01:07:44.040
<v Speaker 0>Very cool.

01:07:44.680 --> 01:07:46.440
<v Speaker 0>Yeah. It's weird how we went through this

01:07:46.440 --> 01:07:47.640
<v Speaker 0>phase where, like,

01:07:48.120 --> 01:07:50.360
<v Speaker 0>biggest complaint people had about any better software

01:07:50.360 --> 01:07:52.280
<v Speaker 0>was it didn't have dark mode yet. And

01:07:52.280 --> 01:07:52.760
<v Speaker 0>it's like

01:07:53.400 --> 01:07:55.240
<v Speaker 0>I just see that for every like, even

01:07:55.240 --> 01:07:57.825
<v Speaker 0>random products that were just it's just why

01:07:57.825 --> 01:07:59.585
<v Speaker 0>is that your complaint? Like, it just makes

01:07:59.585 --> 01:08:00.385
<v Speaker 0>no sense.

01:08:01.585 --> 01:08:03.265
<v Speaker 0>That's just where we are now.

01:08:04.305 --> 01:08:05.025
<v Speaker 1>It is.

01:08:05.505 --> 01:08:07.984
<v Speaker 1>We we haven't talked about Edge and I

01:08:07.984 --> 01:08:11.700
<v Speaker 1>I probably won't in any depth, but Edge

01:08:11.780 --> 01:08:14.260
<v Speaker 1>lets us manage Edge devices.

01:08:14.260 --> 01:08:17.700
<v Speaker 1>Edge devices are simply devices out there on

01:08:17.700 --> 01:08:19.779
<v Speaker 1>the public Internet or out there across the

01:08:19.779 --> 01:08:21.540
<v Speaker 1>other end of a very, very slow WAN

01:08:21.540 --> 01:08:23.779
<v Speaker 1>connection. Call it what you like. They're devices

01:08:23.779 --> 01:08:25.300
<v Speaker 1>that are not that are not in the

01:08:25.300 --> 01:08:27.304
<v Speaker 1>data center. In fact, they're very far away

01:08:27.304 --> 01:08:28.425
<v Speaker 1>from the data center.

01:08:29.225 --> 01:08:32.024
<v Speaker 1>We have the ability to group them so

01:08:32.024 --> 01:08:34.184
<v Speaker 1>we can group them based on whatever

01:08:34.585 --> 01:08:36.904
<v Speaker 1>makes sense for you, either manual grouping or

01:08:36.904 --> 01:08:37.705
<v Speaker 1>dynamic grouping.

01:08:38.740 --> 01:08:40.979
<v Speaker 1>And then you can go and deploy

01:08:41.220 --> 01:08:42.739
<v Speaker 1>a manifest

01:08:43.220 --> 01:08:46.260
<v Speaker 1>or a Nomad job or a composed file

01:08:46.260 --> 01:08:47.620
<v Speaker 1>against a group,

01:08:48.020 --> 01:08:50.420
<v Speaker 1>and Portainer will then go and say, hey.

01:08:50.420 --> 01:08:52.324
<v Speaker 1>All of the devices in that group, go

01:08:52.324 --> 01:08:54.484
<v Speaker 1>and run this application and make sure it

01:08:54.484 --> 01:08:56.165
<v Speaker 1>make sure it stays running. So it's a

01:08:56.165 --> 01:08:57.925
<v Speaker 1>way to do to actually say, take this

01:08:57.925 --> 01:09:00.085
<v Speaker 1>application, go and deploy it a thousand times,

01:09:00.085 --> 01:09:02.245
<v Speaker 1>10,000 times, whatever you want to all these

01:09:02.245 --> 01:09:02.885
<v Speaker 1>devices,

01:09:03.125 --> 01:09:05.764
<v Speaker 1>go do it. And if it fails, tell

01:09:05.764 --> 01:09:05.925
<v Speaker 1>me.

01:09:06.740 --> 01:09:08.900
<v Speaker 1>But, basically, just keep trying until it works.

01:09:08.900 --> 01:09:10.660
<v Speaker 1>So it's a really nice way to essentially

01:09:10.660 --> 01:09:13.540
<v Speaker 1>manage the deployment of applications on mass.

01:09:13.860 --> 01:09:15.860
<v Speaker 1>You can also run edge jobs, which lets

01:09:15.860 --> 01:09:18.740
<v Speaker 1>you run commands on the remote node directly.

01:09:19.195 --> 01:09:20.875
<v Speaker 1>So you could do things like, you know,

01:09:20.875 --> 01:09:23.195
<v Speaker 1>d f and pull in pull in anything

01:09:23.195 --> 01:09:24.555
<v Speaker 1>you like to it. So you can go

01:09:24.555 --> 01:09:26.795
<v Speaker 1>run things on remote devices, and they're basically

01:09:26.795 --> 01:09:28.314
<v Speaker 1>just just batch scripts that run.

01:09:28.635 --> 01:09:30.075
<v Speaker 0>I guess I could choose that if I

01:09:30.075 --> 01:09:32.715
<v Speaker 0>had, like, the Kubernetes clusters, one in Asia,

01:09:32.715 --> 01:09:33.989
<v Speaker 0>1 in Europe, 1 in The US, and

01:09:33.989 --> 01:09:35.829
<v Speaker 0>I want you to replicate all the workloads

01:09:35.829 --> 01:09:36.869
<v Speaker 0>across them, would I use

01:09:37.909 --> 01:09:39.750
<v Speaker 1>%. You could use it for that. Yeah.

01:09:39.750 --> 01:09:41.590
<v Speaker 1>%. And I know it's not really as

01:09:41.590 --> 01:09:42.149
<v Speaker 1>you say.

01:09:42.710 --> 01:09:44.550
<v Speaker 0>Still, I think a use case I would

01:09:44.550 --> 01:09:44.949
<v Speaker 0>have at least.

01:09:45.795 --> 01:09:46.675
<v Speaker 1>%.

01:09:46.675 --> 01:09:48.515
<v Speaker 1>Right right now, we're the feature is called

01:09:48.515 --> 01:09:50.675
<v Speaker 1>Edge. It it really should just be called

01:09:51.314 --> 01:09:53.955
<v Speaker 1>multi cluster management or multi device management. But

01:09:53.955 --> 01:09:56.114
<v Speaker 1>right now, it's just Edge stacks just just

01:09:56.114 --> 01:09:57.635
<v Speaker 1>because it makes sense. Yeah.

01:09:59.160 --> 01:10:01.320
<v Speaker 1>So, yeah, it's a it it it's it's

01:10:01.320 --> 01:10:02.840
<v Speaker 1>a very, very powerful tool, and I can

01:10:02.840 --> 01:10:04.680
<v Speaker 1>spend days going through every feature because we've

01:10:04.680 --> 01:10:06.600
<v Speaker 1>we've built something that is just monster.

01:10:06.920 --> 01:10:08.760
<v Speaker 1>There's so many so many features, so many

01:10:08.760 --> 01:10:12.120
<v Speaker 1>capabilities of the product. It's near limitless in

01:10:12.120 --> 01:10:12.600
<v Speaker 1>its power.

01:10:13.575 --> 01:10:15.655
<v Speaker 1>You know, I I am I am near

01:10:15.655 --> 01:10:18.855
<v Speaker 1>near useless in front of a kubectl command

01:10:18.855 --> 01:10:20.615
<v Speaker 1>prompt. I just don't know how to do

01:10:20.615 --> 01:10:22.615
<v Speaker 1>anything because I don't need to. I just

01:10:22.615 --> 01:10:24.215
<v Speaker 1>do everything in Portainer. I've forgotten all the

01:10:24.215 --> 01:10:26.739
<v Speaker 1>commands. But you could you could set me

01:10:26.739 --> 01:10:28.340
<v Speaker 1>any kind of challenge. You could say, hey,

01:10:28.340 --> 01:10:31.059
<v Speaker 1>Neil. Go go deploy this application like this,

01:10:31.460 --> 01:10:32.420
<v Speaker 1>and I'll I'll be able to do it

01:10:32.420 --> 01:10:34.340
<v Speaker 1>in Portainer. There's very, very few

01:10:34.580 --> 01:10:37.060
<v Speaker 1>examples where I couldn't do something using Portainer,

01:10:37.060 --> 01:10:38.260
<v Speaker 1>and and I'll be forced to go back

01:10:38.260 --> 01:10:39.460
<v Speaker 1>to to a command line.

01:10:40.594 --> 01:10:41.394
<v Speaker 0>Sweet.

01:10:42.195 --> 01:10:42.994
<v Speaker 0>Alright.

01:10:43.235 --> 01:10:44.435
<v Speaker 0>Are we done with the demo? Is there

01:10:44.435 --> 01:10:45.554
<v Speaker 0>anything else you would like to show before

01:10:45.554 --> 01:10:46.514
<v Speaker 0>we finish up?

01:10:46.835 --> 01:10:48.195
<v Speaker 1>No. We can stop there.

01:10:49.475 --> 01:10:51.235
<v Speaker 0>Alright. Yeah. There was a lot to cover

01:10:51.235 --> 01:10:52.675
<v Speaker 0>there. I I like the simplicity

01:10:53.460 --> 01:10:56.740
<v Speaker 0>that Portainer brings to Kubernetes clusters, but even

01:10:56.740 --> 01:10:58.100
<v Speaker 0>more special than that is that it's not

01:10:58.100 --> 01:11:00.020
<v Speaker 0>restricted to Kubernetes clusters. You know, we we

01:11:00.020 --> 01:11:01.700
<v Speaker 0>don't play with Nomad, we've seen the option

01:11:01.700 --> 01:11:03.300
<v Speaker 0>pop up a few times. There was Docker

01:11:03.300 --> 01:11:04.500
<v Speaker 0>Compose stuff.

01:11:04.740 --> 01:11:07.140
<v Speaker 0>It's like Portainer as a management interface for

01:11:07.140 --> 01:11:09.435
<v Speaker 0>kind of universal containers. And I I I

01:11:09.435 --> 01:11:11.994
<v Speaker 0>like that approach. I think it's gonna empower

01:11:11.994 --> 01:11:12.954
<v Speaker 0>and enable

01:11:13.275 --> 01:11:15.435
<v Speaker 0>many many people as I'm sure already as

01:11:15.435 --> 01:11:18.315
<v Speaker 0>you said what? There's like over 700,000

01:11:18.315 --> 01:11:20.955
<v Speaker 0>active users or something like that. So Every

01:11:20.955 --> 01:11:21.195
<v Speaker 1>month.

01:11:22.540 --> 01:11:25.260
<v Speaker 0>That is a staggering number, but it's very

01:11:25.260 --> 01:11:26.060
<v Speaker 0>good to see.

01:11:26.700 --> 01:11:28.700
<v Speaker 0>So we got a couple of sorry. On

01:11:28.700 --> 01:11:29.260
<v Speaker 0>you go.

01:11:29.740 --> 01:11:31.580
<v Speaker 1>Let's say we we we definitely see people

01:11:31.580 --> 01:11:34.220
<v Speaker 1>who are are net new to containers

01:11:34.425 --> 01:11:36.585
<v Speaker 1>making a start with Docker and then over

01:11:36.585 --> 01:11:38.264
<v Speaker 1>time transitioning to Kubernetes.

01:11:39.145 --> 01:11:41.224
<v Speaker 1>And so we we really do help them

01:11:41.224 --> 01:11:42.744
<v Speaker 1>with that process. You know, they they can

01:11:42.744 --> 01:11:44.905
<v Speaker 1>they can learn how to use it, learn

01:11:44.905 --> 01:11:46.264
<v Speaker 1>about microservices,

01:11:46.264 --> 01:11:49.429
<v Speaker 1>learn learn about triaging microservices in Portainer. And

01:11:49.429 --> 01:11:50.469
<v Speaker 1>then when they're ready,

01:11:50.790 --> 01:11:52.710
<v Speaker 1>then they they we we're with them as

01:11:52.710 --> 01:11:54.229
<v Speaker 1>as I make the jump to Kubernetes.

01:11:54.630 --> 01:11:56.070
<v Speaker 1>A lot of the other tooling out there

01:11:56.070 --> 01:11:57.670
<v Speaker 1>is only Kubernetes,

01:11:57.670 --> 01:11:59.110
<v Speaker 1>and you have no choice to go from

01:11:59.110 --> 01:12:01.350
<v Speaker 1>zero to a thousand with you know, in

01:12:01.350 --> 01:12:03.110
<v Speaker 1>the site. If if you're not ready,

01:12:03.905 --> 01:12:05.344
<v Speaker 1>good luck to you. You got you got

01:12:05.344 --> 01:12:07.585
<v Speaker 1>you got some some serious, you know, headwinds

01:12:07.585 --> 01:12:09.185
<v Speaker 1>ahead of you, whereas Portainer really tries to

01:12:09.185 --> 01:12:10.225
<v Speaker 1>say, well, actually, you know what? We can

01:12:10.225 --> 01:12:12.145
<v Speaker 1>we can actually crawl before we walk before

01:12:12.145 --> 01:12:14.385
<v Speaker 1>we run. We we're kinda, you know, guiding

01:12:14.385 --> 01:12:16.465
<v Speaker 1>people on what what I've determined a relatively

01:12:16.465 --> 01:12:19.900
<v Speaker 1>sense sensible progression from no knowledge to advanced

01:12:19.900 --> 01:12:20.460
<v Speaker 1>knowledge.

01:12:21.340 --> 01:12:23.659
<v Speaker 0>Awesome. A noble and good mission.

01:12:24.540 --> 01:12:26.060
<v Speaker 0>We have some thank yous in the chat.

01:12:26.060 --> 01:12:28.060
<v Speaker 0>So Russell and Morat both say thank you.

01:12:28.060 --> 01:12:29.980
<v Speaker 0>Really nice demo, and thank you again. So

01:12:29.980 --> 01:12:31.580
<v Speaker 0>I will echo their statements. Thank you, Neil,

01:12:31.580 --> 01:12:33.980
<v Speaker 0>for joining us, for guiding us through Portainer.

01:12:34.345 --> 01:12:36.745
<v Speaker 0>Before we finish, do you wanna is there

01:12:36.745 --> 01:12:39.385
<v Speaker 0>anything you can share about Portainer's roadmap? Anything

01:12:39.385 --> 01:12:41.065
<v Speaker 0>you're stated about for the next three to

01:12:41.065 --> 01:12:42.665
<v Speaker 0>six months? Anything you wanna share with our

01:12:42.665 --> 01:12:44.264
<v Speaker 0>audience before we finish up?

01:12:45.785 --> 01:12:48.505
<v Speaker 1>We just launched a new website. Go have

01:12:48.505 --> 01:12:51.120
<v Speaker 1>a look at it. It is lean, mean,

01:12:51.120 --> 01:12:52.640
<v Speaker 1>and clean. Inside

01:12:53.360 --> 01:12:55.920
<v Speaker 1>there, we have a home and student offer.

01:12:55.920 --> 01:12:57.920
<v Speaker 1>So right now, if you're not aware, we

01:12:57.920 --> 01:13:00.080
<v Speaker 1>have Portainer CE, the open source version. We

01:13:00.080 --> 01:13:03.280
<v Speaker 1>have Portainer Business, the closed source licensed version.

01:13:03.600 --> 01:13:05.440
<v Speaker 1>We make our closed source

01:13:05.855 --> 01:13:08.255
<v Speaker 1>biz the the closed source version available for

01:13:08.255 --> 01:13:08.895
<v Speaker 1>free

01:13:09.295 --> 01:13:11.775
<v Speaker 1>for anyone who has under five nodes in

01:13:11.775 --> 01:13:13.775
<v Speaker 1>their cluster. Right? So anyone with under five

01:13:13.775 --> 01:13:15.215
<v Speaker 1>nodes can go and get a license for

01:13:15.215 --> 01:13:17.055
<v Speaker 1>for Portainer business right now and use it,

01:13:17.055 --> 01:13:18.335
<v Speaker 1>and I would strongly recommend if you have

01:13:18.335 --> 01:13:20.015
<v Speaker 1>under five nodes, use that version rather than

01:13:20.015 --> 01:13:21.535
<v Speaker 1>CE version. You get a lot more capability.

01:13:22.389 --> 01:13:24.150
<v Speaker 1>If you are a home user or student

01:13:24.150 --> 01:13:25.670
<v Speaker 1>user and you have more than five nodes,

01:13:25.670 --> 01:13:27.349
<v Speaker 1>we have a home and student license,

01:13:27.590 --> 01:13:28.710
<v Speaker 1>$249

01:13:28.710 --> 01:13:30.230
<v Speaker 1>a year. Go buy that. We give you

01:13:30.230 --> 01:13:32.629
<v Speaker 1>15 nodes. You can do everything you want.

01:13:32.789 --> 01:13:34.550
<v Speaker 1>So, you know, for those of us who

01:13:34.550 --> 01:13:36.469
<v Speaker 1>like to tinker at home, myself included,

01:13:37.225 --> 01:13:39.865
<v Speaker 1>go go and use Portainer business in your

01:13:39.865 --> 01:13:41.465
<v Speaker 1>home setting, learn about all of its its

01:13:41.465 --> 01:13:43.545
<v Speaker 1>rich capabilities. You'll love it. And if you're

01:13:43.545 --> 01:13:46.425
<v Speaker 1>more than five nodes, it's relatively inexpensive

01:13:46.425 --> 01:13:47.705
<v Speaker 1>to get a 15 node environment.

01:13:49.010 --> 01:13:51.170
<v Speaker 1>There's a free trial available if you have

01:13:51.170 --> 01:13:53.010
<v Speaker 1>a much larger use case on that, but

01:13:53.010 --> 01:13:54.770
<v Speaker 1>it's it's very, very simple and easy to

01:13:54.770 --> 01:13:55.490
<v Speaker 1>get going.

01:13:56.450 --> 01:13:59.570
<v Speaker 1>Road map, we're looking at things like that

01:13:59.570 --> 01:14:01.890
<v Speaker 1>front end form based wizard that we had

01:14:01.890 --> 01:14:05.250
<v Speaker 1>there that direct that actually direct deploys. One

01:14:04.875 --> 01:14:06.394
<v Speaker 1>of the things we're gonna use we're gonna

01:14:06.394 --> 01:14:07.755
<v Speaker 1>do is try and use that front end

01:14:07.755 --> 01:14:09.835
<v Speaker 1>form as a YAML generator and then push

01:14:09.835 --> 01:14:11.594
<v Speaker 1>the result in YAML to a Git repo

01:14:11.594 --> 01:14:13.754
<v Speaker 1>and then later deploy from the Git repo.

01:14:13.755 --> 01:14:15.675
<v Speaker 1>So it's gonna be a cluster

01:14:16.954 --> 01:14:19.920
<v Speaker 1>context aware YAML generator. So you can actually

01:14:19.920 --> 01:14:21.360
<v Speaker 1>use it to generate YAML. That's just quite

01:14:21.360 --> 01:14:23.280
<v Speaker 1>interesting. One of things I didn't show you

01:14:23.280 --> 01:14:25.040
<v Speaker 1>is we have the ability in Portainer to

01:14:25.040 --> 01:14:26.320
<v Speaker 1>actually create

01:14:26.320 --> 01:14:29.280
<v Speaker 1>Kubernetes clusters natively from within Portainer. So

01:14:30.000 --> 01:14:31.760
<v Speaker 1>you can you can go into environments,

01:14:31.760 --> 01:14:34.355
<v Speaker 1>add environment, CAS, and then get put your

01:14:34.355 --> 01:14:35.955
<v Speaker 1>credentials for any cloud provider, and we'll spin

01:14:35.955 --> 01:14:37.235
<v Speaker 1>you up a CAS cluster.

01:14:37.555 --> 01:14:39.475
<v Speaker 1>We're adding support for micro k eights for

01:14:39.475 --> 01:14:40.755
<v Speaker 1>on prem there as well.

01:14:41.475 --> 01:14:43.715
<v Speaker 1>And that that will also transition to be

01:14:43.715 --> 01:14:44.915
<v Speaker 1>more as code based.

01:14:46.320 --> 01:14:48.080
<v Speaker 1>So, yeah, there's there's a a lot of

01:14:48.080 --> 01:14:49.920
<v Speaker 1>lot of stuff coming for Portainer, but we're

01:14:49.920 --> 01:14:52.480
<v Speaker 1>we're really focused on making it super easy

01:14:52.480 --> 01:14:55.199
<v Speaker 1>to to use. So, yeah, everything we do,

01:14:55.280 --> 01:14:57.199
<v Speaker 1>you know, the the the the the number

01:14:57.199 --> 01:14:58.480
<v Speaker 1>one rule in in our product team is

01:14:58.480 --> 01:15:00.159
<v Speaker 1>can we make it easier? And if the

01:15:00.159 --> 01:15:02.315
<v Speaker 1>answer is yes, then we we we keep

01:15:02.315 --> 01:15:04.395
<v Speaker 1>iterating our our product ideas until we can

01:15:04.395 --> 01:15:05.195
<v Speaker 1>make it easier.

01:15:06.395 --> 01:15:07.195
<v Speaker 0>Awesome.

01:15:07.435 --> 01:15:09.355
<v Speaker 0>Well, that's a pretty solid road map. I'm

01:15:09.355 --> 01:15:11.435
<v Speaker 0>excited to see all those things coming soon.

01:15:11.435 --> 01:15:12.955
<v Speaker 0>And I'll say thank you again for joining

01:15:12.955 --> 01:15:14.715
<v Speaker 0>me. It's been an absolute pleasure. And hopefully,

01:15:14.715 --> 01:15:15.995
<v Speaker 0>we'll do another one of these again soon.

01:15:16.110 --> 01:15:18.350
<v Speaker 0>Thank you very much, Neil. All good. Appreciate

01:15:18.350 --> 01:15:18.829
<v Speaker 1>it. Thank

01:15:19.550 --> 01:15:20.909
<v Speaker 0>you all for watching. Have a great day,

01:15:20.909 --> 01:15:22.909
<v Speaker 0>and we'll see you next time. Bye. See

01:15:22.909 --> 01:15:22.989
<v Speaker 1>you.
