WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 53403f61-a678-4b1a-867f-c9748a3aeae4
Created: 2025-04-29T20:23:58.422Z
Duration: 4940.052
Channels: 1

00:00:35.489 --> 00:00:38.129
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:00:38.129 --> 00:00:40.050
<v Speaker 0>live. I am your host, Rawkode.

00:00:40.685 --> 00:00:42.365
<v Speaker 0>Today, we're gonna be taking a look at

00:00:42.365 --> 00:00:44.525
<v Speaker 0>the Keptn project. We have done an episode

00:00:44.525 --> 00:00:46.605
<v Speaker 0>in this previously where we looked at using

00:00:46.605 --> 00:00:48.685
<v Speaker 0>Keptn for a continuous delivery with some really

00:00:48.685 --> 00:00:50.845
<v Speaker 0>cool cracks in the site that help gate

00:00:50.845 --> 00:00:53.245
<v Speaker 0>and protect your deployments from errors and bugs.

00:00:53.980 --> 00:00:56.380
<v Speaker 0>Today, I'm gonna be joined by Juergen once

00:00:56.380 --> 00:00:59.260
<v Speaker 0>more. Juergen is an engineer at Dynatrace and

00:00:59.260 --> 00:01:02.060
<v Speaker 0>a maintainer of the Keptn project. Hello, Juergen.

00:01:02.060 --> 00:01:02.780
<v Speaker 0>Welcome back.

00:01:03.740 --> 00:01:07.180
<v Speaker 1>Hi, everyone. Thanks. Thanks, David. I just gotta

00:01:07.180 --> 00:01:08.860
<v Speaker 0>say, I love your Keptn t shirt. It's

00:01:08.860 --> 00:01:10.395
<v Speaker 0>really cool. Yeah.

00:01:10.954 --> 00:01:11.515
<v Speaker 1>Thanks.

00:01:13.115 --> 00:01:16.395
<v Speaker 1>It's our very famous logo. We're we're happy.

00:01:16.395 --> 00:01:16.795
<v Speaker 1>Nice.

00:01:17.755 --> 00:01:19.354
<v Speaker 0>Do you wanna kick us off with just

00:01:19.354 --> 00:01:21.835
<v Speaker 0>a short introduction about yourself and then we

00:01:21.835 --> 00:01:23.435
<v Speaker 0>can start to talk about the Captain projects

00:01:23.435 --> 00:01:25.650
<v Speaker 0>again and do a little summary on where

00:01:25.650 --> 00:01:27.090
<v Speaker 0>we left off last time.

00:01:27.810 --> 00:01:28.610
<v Speaker 1>Sure,

00:01:28.610 --> 00:01:29.170
<v Speaker 1>thank you.

00:01:29.730 --> 00:01:32.050
<v Speaker 1>So my name is Jurgen. I'm one of

00:01:32.050 --> 00:01:33.810
<v Speaker 1>the Keptn maintainers.

00:01:34.290 --> 00:01:36.625
<v Speaker 1>I think we've started this project around two

00:01:36.625 --> 00:01:37.505
<v Speaker 1>years ago.

00:01:37.905 --> 00:01:39.425
<v Speaker 1>It was originating

00:01:39.425 --> 00:01:42.545
<v Speaker 1>from more an idea of how we can

00:01:43.825 --> 00:01:47.505
<v Speaker 1>make continuous delivery and operating software better. It

00:01:47.505 --> 00:01:48.065
<v Speaker 1>was

00:01:48.865 --> 00:01:52.065
<v Speaker 1>that the whole idea was about automating

00:01:51.220 --> 00:01:54.259
<v Speaker 1>a lot of steps and then we first

00:01:54.740 --> 00:01:57.220
<v Speaker 1>found, we built kind of a methodology

00:01:57.220 --> 00:01:59.380
<v Speaker 1>and then we from this we built a

00:01:59.380 --> 00:02:01.619
<v Speaker 1>whole Keptn project. So it's been around for

00:02:01.939 --> 00:02:04.899
<v Speaker 1>some time. It was initially started by Dynatrace.

00:02:05.235 --> 00:02:07.955
<v Speaker 1>It's now a open source CNCF

00:02:07.955 --> 00:02:08.835
<v Speaker 1>project.

00:02:09.235 --> 00:02:11.555
<v Speaker 1>We are in the sandbox phase of the

00:02:11.555 --> 00:02:12.435
<v Speaker 1>CNCF.

00:02:13.955 --> 00:02:15.955
<v Speaker 1>And yeah, in the beginning I was also

00:02:15.955 --> 00:02:17.075
<v Speaker 1>one of the main developers.

00:02:17.810 --> 00:02:19.570
<v Speaker 1>Right now, I'm more taking a look at

00:02:19.570 --> 00:02:21.730
<v Speaker 1>the Keptn ecosystem, how we can integrate with

00:02:21.730 --> 00:02:22.530
<v Speaker 1>other tools.

00:02:22.770 --> 00:02:24.610
<v Speaker 1>We just built the Litmus integration

00:02:24.610 --> 00:02:25.570
<v Speaker 1>recently.

00:02:25.810 --> 00:02:28.530
<v Speaker 1>We're building a Locust integration. We have other

00:02:28.530 --> 00:02:31.085
<v Speaker 1>integrations for different

00:02:31.325 --> 00:02:34.444
<v Speaker 1>testing tools, automation tools, deployment tools. So this

00:02:34.444 --> 00:02:37.004
<v Speaker 1>is what what what I care about these

00:02:37.004 --> 00:02:37.725
<v Speaker 1>days.

00:02:39.004 --> 00:02:39.885
<v Speaker 1>Pretty excited.

00:02:43.319 --> 00:02:43.960
<v Speaker 0>Okay,

00:02:44.360 --> 00:02:47.000
<v Speaker 0>awesome. Yeah, I think what I realized last

00:02:47.000 --> 00:02:48.280
<v Speaker 0>time when we were looking at this project

00:02:48.280 --> 00:02:50.519
<v Speaker 0>is that it really is like the one

00:02:50.519 --> 00:02:53.560
<v Speaker 0>complete tool for implementing continuous delivery. There was

00:02:53.560 --> 00:02:54.920
<v Speaker 0>a lot of different components, a lot of

00:02:54.920 --> 00:02:57.095
<v Speaker 0>different features that we can you know, adopt

00:02:57.095 --> 00:03:00.215
<v Speaker 0>and leverage inside of our Kubernetes environment.

00:03:00.215 --> 00:03:02.855
<v Speaker 0>And we only got halfway through the tutorial.

00:03:02.855 --> 00:03:04.135
<v Speaker 0>So today

00:03:04.295 --> 00:03:05.815
<v Speaker 0>we're gonna try and take a look at

00:03:05.815 --> 00:03:07.415
<v Speaker 0>the rest of that tutorial and the other

00:03:07.415 --> 00:03:09.970
<v Speaker 0>features that Keptn brings to the table. So

00:03:09.970 --> 00:03:11.810
<v Speaker 0>I believe you've got a few slides that

00:03:11.810 --> 00:03:13.890
<v Speaker 0>you wanna run through to introduce us to

00:03:13.890 --> 00:03:15.410
<v Speaker 0>Keptn again and give us a quick summary

00:03:15.410 --> 00:03:16.610
<v Speaker 0>of where we left off.

00:03:17.970 --> 00:03:19.010
<v Speaker 1>Cool. Yes.

00:03:20.930 --> 00:03:22.690
<v Speaker 1>So I just want to share a little

00:03:22.690 --> 00:03:23.490
<v Speaker 1>bit of

00:03:24.565 --> 00:03:26.645
<v Speaker 1>let me just, am I already in presenting

00:03:26.645 --> 00:03:29.125
<v Speaker 1>mode? I'm not sure. I think now I

00:03:29.125 --> 00:03:30.645
<v Speaker 1>am. Yep, there you go.

00:03:31.205 --> 00:03:32.405
<v Speaker 1>Okay, perfect.

00:03:33.125 --> 00:03:35.125
<v Speaker 1>So I just want to give you again

00:03:35.125 --> 00:03:37.525
<v Speaker 1>a brief overview of Keptn and what we

00:03:37.525 --> 00:03:40.110
<v Speaker 1>did already last time and what we are

00:03:40.110 --> 00:03:41.470
<v Speaker 1>going to see today.

00:03:41.790 --> 00:03:45.070
<v Speaker 1>So it's Keptn itself is the cloud native

00:03:45.470 --> 00:03:47.710
<v Speaker 1>application lifecycle orchestration.

00:03:47.710 --> 00:03:50.110
<v Speaker 1>So you can, that basically means Keptn will

00:03:50.110 --> 00:03:51.070
<v Speaker 1>orchestrate

00:03:51.390 --> 00:03:53.655
<v Speaker 1>your existing toolset for

00:03:54.055 --> 00:03:54.855
<v Speaker 1>deployment,

00:03:54.855 --> 00:03:56.694
<v Speaker 1>for testing, for evaluating

00:03:56.694 --> 00:03:58.855
<v Speaker 1>or you can do this just with Keptn.

00:03:59.735 --> 00:04:03.095
<v Speaker 1>There are different use cases that users,

00:04:04.215 --> 00:04:07.175
<v Speaker 1>when users start with Keptn they go either

00:04:06.680 --> 00:04:07.880
<v Speaker 1>full Keptn

00:04:08.120 --> 00:04:09.160
<v Speaker 1>with having

00:04:09.720 --> 00:04:12.440
<v Speaker 1>progressive delivery with Keptn, having quality gates with

00:04:12.440 --> 00:04:15.560
<v Speaker 1>Keptn, doing auto remediation with Keptn or they

00:04:15.560 --> 00:04:18.200
<v Speaker 1>go only for one part. For example, Keptn

00:04:18.200 --> 00:04:20.279
<v Speaker 1>quality gates. That's one of the aspects of

00:04:20.279 --> 00:04:22.815
<v Speaker 1>Keptn that we see that's frequently

00:04:23.134 --> 00:04:25.455
<v Speaker 1>used and heavily used because it's a very

00:04:25.455 --> 00:04:29.935
<v Speaker 1>mature concept of quality description of a microservice

00:04:29.935 --> 00:04:32.815
<v Speaker 1>and or can even be a monolithic application

00:04:32.895 --> 00:04:34.820
<v Speaker 1>and then Keptn will evaluate

00:04:35.220 --> 00:04:38.500
<v Speaker 1>based on different data sources like Prometheus evaluate

00:04:39.300 --> 00:04:41.060
<v Speaker 1>the quality of the software and can make

00:04:41.060 --> 00:04:43.300
<v Speaker 1>a decision if it should pass the stage,

00:04:43.300 --> 00:04:44.979
<v Speaker 1>if it should be promoted to production or

00:04:44.979 --> 00:04:45.699
<v Speaker 1>not, for example.

00:04:47.455 --> 00:04:50.495
<v Speaker 1>It's all built on declarative

00:04:50.975 --> 00:04:52.095
<v Speaker 1>configurations.

00:04:52.335 --> 00:04:54.495
<v Speaker 1>So it's very much in all the Kubernetes

00:04:54.495 --> 00:04:58.095
<v Speaker 1>space. It consists of basically YAML definitions

00:04:58.895 --> 00:05:00.574
<v Speaker 1>and you can connect different tools to it.

00:05:01.260 --> 00:05:02.860
<v Speaker 1>I already said what you can do with

00:05:02.860 --> 00:05:03.420
<v Speaker 1>it.

00:05:04.060 --> 00:05:06.060
<v Speaker 1>You can automate a lot of parts like

00:05:06.060 --> 00:05:07.180
<v Speaker 1>monitoring,

00:05:07.340 --> 00:05:09.100
<v Speaker 1>how do you want to do your delivery,

00:05:09.100 --> 00:05:11.900
<v Speaker 1>how you want to have your remediation executed.

00:05:12.620 --> 00:05:13.820
<v Speaker 1>And this is done

00:05:14.245 --> 00:05:17.205
<v Speaker 1>event driven or data driven. So we are

00:05:17.205 --> 00:05:19.685
<v Speaker 1>using cloud events for this and cloud events

00:05:19.685 --> 00:05:21.845
<v Speaker 1>are sent to Keptn and from Keptn and

00:05:21.845 --> 00:05:23.925
<v Speaker 1>then you can interact with these different tools

00:05:23.925 --> 00:05:25.205
<v Speaker 1>or go different tools

00:05:25.860 --> 00:05:28.259
<v Speaker 1>can interact with Keptn based on the cloud

00:05:28.259 --> 00:05:30.580
<v Speaker 1>event standard, which is also a CCF project.

00:05:32.419 --> 00:05:33.300
<v Speaker 1>Last time,

00:05:34.259 --> 00:05:36.500
<v Speaker 1>I think we already covered the part why

00:05:36.500 --> 00:05:38.435
<v Speaker 1>we did it. It's a lot of, the

00:05:38.435 --> 00:05:41.555
<v Speaker 1>main part is really automation and making your

00:05:41.875 --> 00:05:45.315
<v Speaker 1>continuous delivery more robust and also giving you

00:05:45.315 --> 00:05:48.755
<v Speaker 1>guidance and framework for automated remediations.

00:05:50.610 --> 00:05:53.010
<v Speaker 1>And last time we already did a couple

00:05:53.010 --> 00:05:55.410
<v Speaker 1>of the first two use cases. So we

00:05:55.410 --> 00:05:57.490
<v Speaker 1>took a look at how to automatically

00:05:58.210 --> 00:05:59.010
<v Speaker 1>configure

00:05:59.490 --> 00:06:02.370
<v Speaker 1>observability and dashboarding tools. We were using last

00:06:02.370 --> 00:06:03.810
<v Speaker 1>time already Prometheus.

00:06:04.130 --> 00:06:05.410
<v Speaker 1>We will do this also today.

00:06:09.384 --> 00:06:10.425
<v Speaker 1>We've been using

00:06:11.305 --> 00:06:14.025
<v Speaker 1>two major concepts and two major files of

00:06:14.025 --> 00:06:17.224
<v Speaker 1>Keptn. The first one is the environment definition.

00:06:17.224 --> 00:06:18.664
<v Speaker 1>We call it the shipyard file.

00:06:19.080 --> 00:06:21.480
<v Speaker 1>And I am from Austria. We speak German

00:06:21.480 --> 00:06:24.280
<v Speaker 1>here. Captain for us sounds like the captain

00:06:24.280 --> 00:06:26.600
<v Speaker 1>of a ship. So it's really we have

00:06:26.600 --> 00:06:29.080
<v Speaker 1>a shipyard file. We have a captain's uniform

00:06:29.080 --> 00:06:31.615
<v Speaker 1>which defines the tooling that you need or

00:06:31.615 --> 00:06:32.655
<v Speaker 1>that you want to use.

00:06:33.375 --> 00:06:34.335
<v Speaker 1>We have a

00:06:34.735 --> 00:06:36.735
<v Speaker 1>lot of things in captain. We have the

00:06:36.735 --> 00:06:39.135
<v Speaker 1>captain's bridge, for example, which is our UI.

00:06:39.135 --> 00:06:40.495
<v Speaker 1>A lot of things they have like this

00:06:40.495 --> 00:06:43.055
<v Speaker 1>nautical terms and then this idea behind it.

00:06:43.650 --> 00:06:47.090
<v Speaker 1>Our tagline still is nobody ships apps like

00:06:47.090 --> 00:06:48.530
<v Speaker 1>the captain. So

00:06:48.930 --> 00:06:52.050
<v Speaker 1>it's yeah. We we we like this theme.

00:06:52.050 --> 00:06:55.570
<v Speaker 1>So the shipyard file is basically describing

00:06:55.650 --> 00:06:57.455
<v Speaker 1>your environment. And

00:06:57.855 --> 00:06:59.855
<v Speaker 1>just with a couple of lines, can describe

00:06:59.855 --> 00:07:01.135
<v Speaker 1>a multistage

00:07:01.375 --> 00:07:04.975
<v Speaker 1>environment and this multistage environment basically also reflects

00:07:04.975 --> 00:07:06.735
<v Speaker 1>a multistage delivery pipeline.

00:07:07.215 --> 00:07:10.415
<v Speaker 1>Between the stages, Keptn automatically executes a quality

00:07:10.415 --> 00:07:12.630
<v Speaker 1>gate. And this quality gate can be based

00:07:12.630 --> 00:07:13.670
<v Speaker 1>on SLOs

00:07:13.670 --> 00:07:15.510
<v Speaker 1>as we can also see here. But these

00:07:15.510 --> 00:07:17.750
<v Speaker 1>SLOs, service level objectives,

00:07:18.230 --> 00:07:20.550
<v Speaker 1>can also be used for configuring

00:07:21.030 --> 00:07:24.070
<v Speaker 1>and setting up your alerting and your dashboarding

00:07:24.070 --> 00:07:26.555
<v Speaker 1>and your observability tools. So for example, we

00:07:26.555 --> 00:07:27.915
<v Speaker 1>can use these SLOs

00:07:28.235 --> 00:07:30.555
<v Speaker 1>configure the Prometheus alert manager,

00:07:30.635 --> 00:07:32.315
<v Speaker 1>to set up Grafana,

00:07:32.475 --> 00:07:36.155
<v Speaker 1>and also have alerts in Grafana and just

00:07:36.155 --> 00:07:37.755
<v Speaker 1>general

00:07:39.595 --> 00:07:41.755
<v Speaker 1>setup the scrape jobs rules.

00:07:42.930 --> 00:07:45.410
<v Speaker 1>Also, what we can do with this SLO

00:07:45.410 --> 00:07:47.810
<v Speaker 1>file, as I already said, it's the definition

00:07:47.810 --> 00:07:50.850
<v Speaker 1>for our multistage delivery. So with this SLO

00:07:50.850 --> 00:07:52.930
<v Speaker 1>file and with this shipyard file,

00:07:53.170 --> 00:07:55.330
<v Speaker 1>we have a multistage delivery definition

00:07:55.664 --> 00:07:58.065
<v Speaker 1>already with a quality gate and Keptn will

00:07:58.065 --> 00:08:00.224
<v Speaker 1>execute this quality gate and will trigger the

00:08:00.224 --> 00:08:01.104
<v Speaker 1>quality gate

00:08:02.384 --> 00:08:04.384
<v Speaker 1>whenever we want to move from one stage

00:08:04.384 --> 00:08:05.585
<v Speaker 1>to the other stage.

00:08:06.305 --> 00:08:07.905
<v Speaker 1>And if you want to do a direct

00:08:07.905 --> 00:08:10.384
<v Speaker 1>deployment or a blue green deployment, it's just

00:08:10.384 --> 00:08:12.800
<v Speaker 1>a matter of the configurations in

00:08:13.440 --> 00:08:14.640
<v Speaker 1>the Shipyard file.

00:08:16.880 --> 00:08:18.560
<v Speaker 1>We will see a little bit of this

00:08:18.560 --> 00:08:21.280
<v Speaker 1>also in today's presentation. We saw this also

00:08:21.280 --> 00:08:23.775
<v Speaker 1>last time. We went in more detail last

00:08:23.775 --> 00:08:26.014
<v Speaker 1>time. I know that David has already prepared

00:08:26.014 --> 00:08:27.775
<v Speaker 1>a couple of things for today so we

00:08:27.775 --> 00:08:28.735
<v Speaker 1>can kind of

00:08:29.535 --> 00:08:30.255
<v Speaker 1>have

00:08:31.375 --> 00:08:33.135
<v Speaker 1>everything that we did last time which is

00:08:33.135 --> 00:08:34.654
<v Speaker 1>continuous. So we will see a little bit

00:08:34.654 --> 00:08:36.414
<v Speaker 1>of this also and I will just explaining

00:08:36.414 --> 00:08:37.214
<v Speaker 1>as we go through it.

00:08:38.230 --> 00:08:40.310
<v Speaker 1>The new part that we will see

00:08:41.590 --> 00:08:42.630
<v Speaker 1>is actually

00:08:43.190 --> 00:08:45.590
<v Speaker 1>more in the remediation part. But just as

00:08:45.590 --> 00:08:49.190
<v Speaker 1>a reminder how Keptn quality gates is is

00:08:49.190 --> 00:08:49.510
<v Speaker 1>working,

00:08:50.565 --> 00:08:53.125
<v Speaker 1>We are based on two concepts

00:08:53.524 --> 00:08:55.685
<v Speaker 1>coming more or less from the SRE community.

00:08:55.685 --> 00:08:57.925
<v Speaker 1>So if you're familiar with the SRE book

00:08:57.925 --> 00:08:59.925
<v Speaker 1>from Google or if you're interested in this

00:08:59.925 --> 00:09:02.404
<v Speaker 1>book, it's a great book. And they are

00:09:02.404 --> 00:09:03.685
<v Speaker 1>promoting two concepts

00:09:04.110 --> 00:09:06.750
<v Speaker 1>there. The one is the SLIs and which

00:09:06.750 --> 00:09:08.750
<v Speaker 1>is for service level indicator

00:09:08.750 --> 00:09:11.710
<v Speaker 1>and service level objective short SLO.

00:09:12.510 --> 00:09:14.589
<v Speaker 1>These are the one of the major concepts

00:09:14.589 --> 00:09:15.230
<v Speaker 1>there.

00:09:15.390 --> 00:09:17.950
<v Speaker 1>So the first one is basically an indicator

00:09:17.950 --> 00:09:20.105
<v Speaker 1>is something like a metric. You can think

00:09:20.105 --> 00:09:21.065
<v Speaker 1>of a metric.

00:09:21.625 --> 00:09:22.264
<v Speaker 1>So

00:09:22.665 --> 00:09:24.425
<v Speaker 1>in Keptn you can define,

00:09:24.745 --> 00:09:26.504
<v Speaker 1>I would call it a library or a

00:09:26.504 --> 00:09:28.985
<v Speaker 1>list of indicators and you map the name

00:09:28.985 --> 00:09:31.704
<v Speaker 1>of the indicator to a PromQL.

00:09:32.210 --> 00:09:34.210
<v Speaker 1>So then you can reuse

00:09:34.290 --> 00:09:36.370
<v Speaker 1>the name of the indicator in your SLO

00:09:36.370 --> 00:09:39.650
<v Speaker 1>file and the SLO file defines an objective

00:09:39.970 --> 00:09:42.690
<v Speaker 1>for an indicator. So for example, the error

00:09:42.690 --> 00:09:45.330
<v Speaker 1>rate has to stay lower or equal to

00:09:45.330 --> 00:09:47.655
<v Speaker 1>1%. So in this case we can easily

00:09:47.655 --> 00:09:49.655
<v Speaker 1>define the error rate and in the SLO

00:09:49.655 --> 00:09:51.495
<v Speaker 1>file we do not define where the data

00:09:51.495 --> 00:09:53.335
<v Speaker 1>is coming from. So whenever we want to

00:09:53.335 --> 00:09:55.735
<v Speaker 1>change how we retrieve the data, maybe we

00:09:55.735 --> 00:09:57.095
<v Speaker 1>want to change from one tool to the

00:09:57.095 --> 00:09:58.295
<v Speaker 1>other, maybe

00:09:58.615 --> 00:10:01.660
<v Speaker 1>we just have to clarify

00:10:01.980 --> 00:10:04.060
<v Speaker 1>the granularity of the data. We can do

00:10:04.060 --> 00:10:05.899
<v Speaker 1>this in the indicator file. We don't have

00:10:05.899 --> 00:10:07.740
<v Speaker 1>to change our quality gate definition.

00:10:08.300 --> 00:10:10.220
<v Speaker 1>And it's not that we only care about

00:10:10.220 --> 00:10:10.779
<v Speaker 1>one

00:10:11.180 --> 00:10:13.500
<v Speaker 1>objective and one SLI but we can

00:10:14.024 --> 00:10:15.625
<v Speaker 1>mix and match different

00:10:16.024 --> 00:10:16.985
<v Speaker 1>SLIs.

00:10:16.985 --> 00:10:19.305
<v Speaker 1>We can have absolute thresholds, we can have

00:10:19.305 --> 00:10:20.665
<v Speaker 1>relative thresholds

00:10:21.305 --> 00:10:23.785
<v Speaker 1>that will be then compared to previous runs.

00:10:23.785 --> 00:10:25.945
<v Speaker 1>For example, the number of database calls is

00:10:25.945 --> 00:10:28.420
<v Speaker 1>allowed to increase by 2% to the previous

00:10:28.420 --> 00:10:29.060
<v Speaker 1>runs

00:10:29.300 --> 00:10:32.260
<v Speaker 1>but it also should stay within 10

00:10:33.380 --> 00:10:35.380
<v Speaker 1>database calls per transaction.

00:10:35.460 --> 00:10:37.220
<v Speaker 1>So there are different ways to define this

00:10:37.220 --> 00:10:38.180
<v Speaker 1>quality gate.

00:10:38.580 --> 00:10:40.420
<v Speaker 1>And whenever it's triggered

00:10:40.740 --> 00:10:41.540
<v Speaker 1>by

00:10:41.620 --> 00:10:44.745
<v Speaker 1>either by external tool or within the Keptn

00:10:44.745 --> 00:10:46.105
<v Speaker 1>continuous delivery

00:10:46.345 --> 00:10:47.145
<v Speaker 1>workflow,

00:10:47.625 --> 00:10:49.545
<v Speaker 1>here it is just an example to to

00:10:49.545 --> 00:10:51.705
<v Speaker 1>trigger it with the Keptn CLI,

00:10:51.785 --> 00:10:54.825
<v Speaker 1>then Keptn will reach out to the different

00:10:54.825 --> 00:10:57.545
<v Speaker 1>observability tools and data providers,

00:10:58.089 --> 00:10:59.290
<v Speaker 1>will query

00:10:59.290 --> 00:11:01.850
<v Speaker 1>all this data based on the service level

00:11:01.850 --> 00:11:02.650
<v Speaker 1>indicators

00:11:02.730 --> 00:11:03.690
<v Speaker 1>and will then

00:11:04.170 --> 00:11:06.250
<v Speaker 1>score the service level indicators.

00:11:06.410 --> 00:11:09.370
<v Speaker 1>Each time it's a full pass of the

00:11:09.370 --> 00:11:11.695
<v Speaker 1>criteria, you will get a full point. If

00:11:11.695 --> 00:11:13.695
<v Speaker 1>it's not a full pass but it's still

00:11:13.695 --> 00:11:15.214
<v Speaker 1>inside a warning criteria,

00:11:15.295 --> 00:11:16.735
<v Speaker 1>you will get half the points and then

00:11:16.735 --> 00:11:18.654
<v Speaker 1>in total, Keptn will come up with a

00:11:18.654 --> 00:11:19.375
<v Speaker 1>score.

00:11:19.535 --> 00:11:21.135
<v Speaker 1>And this score you can then use to

00:11:21.135 --> 00:11:22.735
<v Speaker 1>decide if it should be promoted to the

00:11:22.735 --> 00:11:24.415
<v Speaker 1>next stage, if you want to keep it

00:11:24.415 --> 00:11:25.615
<v Speaker 1>in this stage, if you want to roll

00:11:25.615 --> 00:11:26.255
<v Speaker 1>it back.

00:11:26.815 --> 00:11:29.190
<v Speaker 1>This is then if you're just using Keptn

00:11:29.190 --> 00:11:31.190
<v Speaker 1>quality gates, it's totally up to you. If

00:11:31.190 --> 00:11:32.710
<v Speaker 1>you're using Keptn,

00:11:32.710 --> 00:11:34.390
<v Speaker 1>I would say like the full installation of

00:11:34.390 --> 00:11:36.470
<v Speaker 1>Keptn, Keptn can then automatically

00:11:37.830 --> 00:11:40.310
<v Speaker 1>initiate a rollback, for example, of

00:11:40.550 --> 00:11:41.190
<v Speaker 1>this deployment.

00:11:43.125 --> 00:11:45.365
<v Speaker 1>And we can also use the same file

00:11:45.445 --> 00:11:48.965
<v Speaker 1>to configure our alerting and then react on

00:11:48.965 --> 00:11:49.685
<v Speaker 1>our

00:11:50.485 --> 00:11:52.565
<v Speaker 1>problems or alerts that are coming in.

00:11:53.525 --> 00:11:56.645
<v Speaker 1>So an alert, for example, sent from the

00:11:56.645 --> 00:11:57.925
<v Speaker 1>Prometheus Alert Manager

00:11:58.540 --> 00:12:01.340
<v Speaker 1>can be then consumed by Keptn. And if

00:12:01.340 --> 00:12:04.060
<v Speaker 1>there's some remediation actions defined and added to

00:12:04.060 --> 00:12:06.940
<v Speaker 1>Keptn, Keptn can trigger this evaluation these remediation

00:12:06.940 --> 00:12:09.100
<v Speaker 1>actions can again evaluate

00:12:09.100 --> 00:12:11.100
<v Speaker 1>if the action was actually successful

00:12:12.154 --> 00:12:14.475
<v Speaker 1>based again on the SLO file and then

00:12:14.475 --> 00:12:17.435
<v Speaker 1>either execute the next action or close

00:12:17.834 --> 00:12:18.635
<v Speaker 1>the issue.

00:12:19.355 --> 00:12:21.834
<v Speaker 1>So we'll we'll see this also in today's

00:12:21.834 --> 00:12:22.475
<v Speaker 1>demo.

00:12:23.435 --> 00:12:25.435
<v Speaker 1>For example, we have an alert coming in

00:12:25.435 --> 00:12:26.235
<v Speaker 1>from Prometheus.

00:12:26.720 --> 00:12:28.960
<v Speaker 1>Captain will first take a look if there

00:12:28.960 --> 00:12:31.200
<v Speaker 1>is a remediation action defined

00:12:31.200 --> 00:12:34.480
<v Speaker 1>for this service that is affected

00:12:34.480 --> 00:12:37.360
<v Speaker 1>in a particular stage or environment,

00:12:37.520 --> 00:12:39.440
<v Speaker 1>like preproduction,

00:12:39.520 --> 00:12:39.840
<v Speaker 1>production,

00:12:41.504 --> 00:12:42.225
<v Speaker 1>whatever.

00:12:42.545 --> 00:12:45.345
<v Speaker 1>Keptn l and, again, if you might remember

00:12:45.345 --> 00:12:47.345
<v Speaker 1>from last time, Keptn is based on a

00:12:47.345 --> 00:12:49.185
<v Speaker 1>on on on a git approach, so all

00:12:49.185 --> 00:12:51.584
<v Speaker 1>the configuration files are stored in its internal

00:12:51.584 --> 00:12:54.970
<v Speaker 1>git repository or on GitHub or GitLab or

00:12:54.970 --> 00:12:56.330
<v Speaker 1>Bitbucket wherever

00:12:56.410 --> 00:12:57.690
<v Speaker 1>you want to use it.

00:12:59.130 --> 00:13:01.290
<v Speaker 1>And it will store its configuration files in

00:13:01.290 --> 00:13:03.209
<v Speaker 1>this git repository. So it will also take

00:13:03.209 --> 00:13:05.130
<v Speaker 1>a look in the git repository if there

00:13:05.130 --> 00:13:07.770
<v Speaker 1>is some kind of remediation configuration.

00:13:07.850 --> 00:13:09.615
<v Speaker 1>If it can find this file, it it

00:13:09.615 --> 00:13:12.015
<v Speaker 1>will go ahead and trigger the remediation action.

00:13:12.175 --> 00:13:14.175
<v Speaker 1>So for in this case, it will scale

00:13:14.175 --> 00:13:15.535
<v Speaker 1>up by

00:13:15.775 --> 00:13:17.855
<v Speaker 1>an increment of plus one which could also

00:13:17.855 --> 00:13:20.335
<v Speaker 1>be like plus 10% or whatever you want

00:13:20.335 --> 00:13:21.055
<v Speaker 1>to call it.

00:13:21.535 --> 00:13:22.655
<v Speaker 1>It will reevaluate

00:13:22.980 --> 00:13:26.019
<v Speaker 1>the quality gate based on the SLO definition.

00:13:26.740 --> 00:13:27.700
<v Speaker 1>It will then,

00:13:28.019 --> 00:13:31.140
<v Speaker 1>if it cannot meet the required

00:13:31.459 --> 00:13:33.220
<v Speaker 1>quality, the criteria,

00:13:33.540 --> 00:13:36.740
<v Speaker 1>then it will go ahead and execute the

00:13:35.835 --> 00:13:38.875
<v Speaker 1>second remediation action. In this case, it's a

00:13:38.875 --> 00:13:39.835
<v Speaker 1>feature toggle.

00:13:40.475 --> 00:13:42.235
<v Speaker 1>It will again reevaluate

00:13:42.235 --> 00:13:44.315
<v Speaker 1>the SLO and then it can escalate or

00:13:44.315 --> 00:13:46.635
<v Speaker 1>close the issue just based on the outcome.

00:13:47.915 --> 00:13:50.540
<v Speaker 1>So this is actually what we're going to

00:13:50.540 --> 00:13:52.620
<v Speaker 1>look at today. I think we will start

00:13:52.620 --> 00:13:54.620
<v Speaker 1>maybe with the Quality Gates since we already

00:13:54.620 --> 00:13:57.660
<v Speaker 1>have an up and running working environment.

00:13:59.019 --> 00:14:01.980
<v Speaker 1>Am not going into the architecture right now.

00:14:01.980 --> 00:14:03.579
<v Speaker 1>Maybe if we have time in between, I

00:14:03.579 --> 00:14:06.139
<v Speaker 1>can always come back to this and show

00:14:05.945 --> 00:14:07.705
<v Speaker 1>a little bit of the architecture.

00:14:08.185 --> 00:14:08.745
<v Speaker 1>But

00:14:09.225 --> 00:14:11.145
<v Speaker 1>if it is fine, we just

00:14:12.265 --> 00:14:15.305
<v Speaker 1>deep dive already into into the the hands

00:14:15.305 --> 00:14:16.105
<v Speaker 1>on part.

00:14:16.265 --> 00:14:17.385
<v Speaker 0>Nice. Excellent.

00:14:20.210 --> 00:14:21.410
<v Speaker 0>Cool. So now

00:14:22.530 --> 00:14:25.330
<v Speaker 0>we let's get my screen up then. So

00:14:25.810 --> 00:14:27.810
<v Speaker 0>what I wanna do is just go over

00:14:27.810 --> 00:14:29.810
<v Speaker 0>what I prepared in advance to make sure

00:14:29.810 --> 00:14:31.755
<v Speaker 0>that we're on the same page there. I

00:14:31.755 --> 00:14:33.435
<v Speaker 0>really hope I've not messed up which is

00:14:33.435 --> 00:14:35.195
<v Speaker 0>you know, only happened nine out of 10

00:14:35.195 --> 00:14:36.635
<v Speaker 0>times on this show. So

00:14:37.515 --> 00:14:38.395
<v Speaker 0>screen.

00:14:38.955 --> 00:14:41.835
<v Speaker 0>And we also have a hello comment. Hey,

00:14:41.835 --> 00:14:43.275
<v Speaker 0>Philip from Berlin.

00:14:43.355 --> 00:14:44.315
<v Speaker 0>Thanks for joining us.

00:14:45.440 --> 00:14:46.080
<v Speaker 0>So

00:14:46.640 --> 00:14:48.960
<v Speaker 0>Hi, Philip. I just

00:14:50.000 --> 00:14:52.400
<v Speaker 0>my calendar just chilling there. Don't know why.

00:14:53.520 --> 00:14:56.080
<v Speaker 0>So I've worked through the tutorial which is

00:14:56.080 --> 00:14:57.600
<v Speaker 0>available from the Keptn

00:14:57.760 --> 00:14:58.240
<v Speaker 0>website.

00:14:58.955 --> 00:15:01.755
<v Speaker 0>I've completed up to step 14, which is

00:15:01.915 --> 00:15:03.675
<v Speaker 0>roughly where we got to last time. Think

00:15:03.675 --> 00:15:04.795
<v Speaker 0>what we agreed was

00:15:05.755 --> 00:15:07.835
<v Speaker 0>on the previous episode, we did do the

00:15:07.835 --> 00:15:09.435
<v Speaker 0>quality gates, but there's some value and got

00:15:09.435 --> 00:15:10.315
<v Speaker 0>over that again quickly.

00:15:10.970 --> 00:15:14.250
<v Speaker 0>What we have is a Kubernetes just

00:15:15.130 --> 00:15:17.050
<v Speaker 0>must remember to clear my screen before I

00:15:17.050 --> 00:15:18.970
<v Speaker 0>do this stuff. What we have is a

00:15:18.970 --> 00:15:20.570
<v Speaker 0>Kubernetes cluster

00:15:21.290 --> 00:15:23.610
<v Speaker 0>with the captain workloads.

00:15:24.654 --> 00:15:28.255
<v Speaker 0>There we go. And we have our application

00:15:28.255 --> 00:15:29.215
<v Speaker 0>workloads

00:15:29.375 --> 00:15:31.295
<v Speaker 0>and their own namespace.

00:15:31.455 --> 00:15:33.535
<v Speaker 0>Is that stock shop? Right?

00:15:34.575 --> 00:15:35.215
<v Speaker 1>Yes.

00:15:35.455 --> 00:15:37.215
<v Speaker 1>I believe we have two different

00:15:37.535 --> 00:15:40.095
<v Speaker 1>or even three namespaces,

00:15:40.095 --> 00:15:42.550
<v Speaker 1>stock shop dev production staging. So that's also

00:15:42.550 --> 00:15:43.269
<v Speaker 1>one thing.

00:15:44.069 --> 00:15:46.470
<v Speaker 1>So Keptn is in the current version.

00:15:46.790 --> 00:15:47.509
<v Speaker 1>We are

00:15:47.750 --> 00:15:49.430
<v Speaker 1>kind of making the distinction

00:15:49.670 --> 00:15:51.990
<v Speaker 1>between environments by namespace.

00:15:52.470 --> 00:15:54.310
<v Speaker 1>We are already working on this, making this

00:15:54.310 --> 00:15:57.305
<v Speaker 1>distinction between environments also per cluster. So in

00:15:57.305 --> 00:15:59.305
<v Speaker 1>the future with the next release of Keptn,

00:15:59.305 --> 00:16:01.625
<v Speaker 1>it will be possible to have a multi

00:16:01.625 --> 00:16:04.425
<v Speaker 1>cluster setup and move have a dedicated, let's

00:16:04.425 --> 00:16:06.985
<v Speaker 1>say, staging cluster and a dedicated production cluster.

00:16:06.985 --> 00:16:08.745
<v Speaker 1>Right now, it's separated by namespaces.

00:16:09.800 --> 00:16:11.160
<v Speaker 0>Nice. I think that would be a very

00:16:11.160 --> 00:16:13.160
<v Speaker 0>welcomed addition. I think from the the people

00:16:13.160 --> 00:16:15.160
<v Speaker 0>that I speak to there there's

00:16:15.160 --> 00:16:16.680
<v Speaker 0>a lot of growing support for the multi

00:16:16.680 --> 00:16:19.160
<v Speaker 0>cluster setup definitely. So that's nice to hear.

00:16:19.480 --> 00:16:20.600
<v Speaker 0>Okay. So

00:16:21.480 --> 00:16:22.680
<v Speaker 0>how do we

00:16:24.275 --> 00:16:26.515
<v Speaker 0>Oh yeah. And this repository, the captain repository

00:16:26.515 --> 00:16:28.435
<v Speaker 0>is available online. This is what we're continuously

00:16:28.435 --> 00:16:30.195
<v Speaker 0>writing to when we make changes

00:16:30.835 --> 00:16:31.555
<v Speaker 0>and

00:16:31.795 --> 00:16:35.235
<v Speaker 0>we have the Captain's Bridge available too.

00:16:36.515 --> 00:16:36.835
<v Speaker 0>So

00:16:37.450 --> 00:16:39.610
<v Speaker 0>what we want to do now is to

00:16:39.850 --> 00:16:41.930
<v Speaker 0>just correct me if I'm wrong here, Jochen.

00:16:42.170 --> 00:16:44.890
<v Speaker 0>But we're gonna trigger a deployment with the

00:16:44.890 --> 00:16:47.690
<v Speaker 0>quality gates to show that stopping a build

00:16:47.690 --> 00:16:49.850
<v Speaker 0>being promoted from one environment to the other.

00:16:49.850 --> 00:16:50.330
<v Speaker 0>Is that correct?

00:16:51.655 --> 00:16:53.015
<v Speaker 1>Yes. So

00:16:54.215 --> 00:16:56.615
<v Speaker 1>in your preparation also in the last episode

00:16:56.615 --> 00:16:58.295
<v Speaker 1>what we already did was

00:16:58.695 --> 00:16:59.575
<v Speaker 1>deploying

00:16:59.815 --> 00:17:02.775
<v Speaker 1>in multi stage environment deploying the

00:17:03.175 --> 00:17:05.815
<v Speaker 1>shopping cart of our Sockshop application.

00:17:05.895 --> 00:17:08.159
<v Speaker 1>So we were deploying this. It went through

00:17:08.159 --> 00:17:11.519
<v Speaker 1>dev staging all the way through production.

00:17:12.480 --> 00:17:13.039
<v Speaker 1>And

00:17:13.440 --> 00:17:14.479
<v Speaker 1>now we

00:17:14.720 --> 00:17:15.679
<v Speaker 1>are adding

00:17:15.839 --> 00:17:18.639
<v Speaker 1>SLO files, quality gate definition file and we

00:17:18.639 --> 00:17:21.585
<v Speaker 1>trigger another build or actually and we we

00:17:21.585 --> 00:17:24.785
<v Speaker 1>trigger another deployment with already pre built image

00:17:25.185 --> 00:17:27.105
<v Speaker 1>and we will see how Keptn will prevent

00:17:27.105 --> 00:17:28.785
<v Speaker 1>it moving to production.

00:17:30.145 --> 00:17:31.665
<v Speaker 0>Okay. That sounds good. So

00:17:33.620 --> 00:17:35.460
<v Speaker 0>let me see if I can remember. I

00:17:35.460 --> 00:17:36.820
<v Speaker 0>think I did

00:17:40.340 --> 00:17:41.780
<v Speaker 0>this Prometheus

00:17:41.780 --> 00:17:42.420
<v Speaker 0>step.

00:17:42.900 --> 00:17:45.700
<v Speaker 0>So this is does a captain ad resource

00:17:45.700 --> 00:17:48.705
<v Speaker 0>where it adds the SLIs that we have

00:17:48.705 --> 00:17:50.544
<v Speaker 0>to find in this PremiFuse file.

00:17:50.785 --> 00:17:53.505
<v Speaker 0>Should we pop that open or we move

00:17:53.505 --> 00:17:54.705
<v Speaker 0>on to the next step? What do you

00:17:54.705 --> 00:17:55.505
<v Speaker 0>think is best?

00:17:57.185 --> 00:17:58.945
<v Speaker 1>We can execute it again just to make

00:17:58.945 --> 00:18:00.305
<v Speaker 1>sure that we have added this file.

00:18:01.800 --> 00:18:03.480
<v Speaker 1>I think it's already

00:18:03.720 --> 00:18:04.600
<v Speaker 1>uploaded.

00:18:05.160 --> 00:18:07.800
<v Speaker 1>We can actually take a look into the

00:18:07.800 --> 00:18:09.080
<v Speaker 1>git repository.

00:18:10.200 --> 00:18:12.120
<v Speaker 1>The screen is a little bit blurry on

00:18:12.120 --> 00:18:13.640
<v Speaker 1>my end so I'm not sure if I

00:18:13.640 --> 00:18:15.640
<v Speaker 1>can, if I'm a bit behind

00:18:16.485 --> 00:18:17.284
<v Speaker 1>but

00:18:17.285 --> 00:18:18.804
<v Speaker 1>in the git repository

00:18:18.965 --> 00:18:21.205
<v Speaker 1>we should see in the staging branch

00:18:21.525 --> 00:18:22.565
<v Speaker 1>we should see

00:18:22.885 --> 00:18:25.845
<v Speaker 1>in there will be a Prometheus folder and

00:18:25.845 --> 00:18:28.325
<v Speaker 1>all the configuration files that are responsible for

00:18:28.325 --> 00:18:30.890
<v Speaker 1>Prometheus should be there and we should be

00:18:30.890 --> 00:18:33.289
<v Speaker 1>able to see the SLI definition. If it's

00:18:33.289 --> 00:18:35.530
<v Speaker 1>not there, we just execute this command and

00:18:35.530 --> 00:18:37.129
<v Speaker 1>Keptn will upload

00:18:37.850 --> 00:18:41.049
<v Speaker 1>Prometheus SLI configuration into the Prometheus folder.

00:18:43.805 --> 00:18:46.525
<v Speaker 0>Okay. And we have the Prometheus SLI dot

00:18:46.525 --> 00:18:49.005
<v Speaker 0>YAML, so I think we are okay.

00:18:50.125 --> 00:18:52.925
<v Speaker 1>Yeah. All good here. So that's basically the

00:18:52.925 --> 00:18:55.805
<v Speaker 1>definition how to query different

00:18:57.870 --> 00:18:58.589
<v Speaker 1>metrics

00:18:59.789 --> 00:19:00.909
<v Speaker 1>from Prometheus.

00:19:00.909 --> 00:19:02.509
<v Speaker 1>In this case, it's all

00:19:03.870 --> 00:19:06.190
<v Speaker 1>about the response time but you could add

00:19:06.190 --> 00:19:10.029
<v Speaker 1>error rate, throughput, memory consumption, CPU saturation, whatever

00:19:10.029 --> 00:19:10.909
<v Speaker 1>you want to add here

00:19:11.585 --> 00:19:12.544
<v Speaker 1>with your

00:19:13.585 --> 00:19:14.625
<v Speaker 1>PromptQL

00:19:14.705 --> 00:19:17.665
<v Speaker 1>or Keptn comes with a couple of predefined

00:19:17.665 --> 00:19:19.585
<v Speaker 1>metrics that you could also reuse. In this

00:19:19.585 --> 00:19:22.065
<v Speaker 1>case we're just making it clear how the

00:19:22.065 --> 00:19:24.305
<v Speaker 1>concept of SLI is actually working. So we

00:19:24.305 --> 00:19:27.240
<v Speaker 1>just define our own SLI putting it into

00:19:27.240 --> 00:19:28.519
<v Speaker 1>our git repository.

00:19:29.960 --> 00:19:30.919
<v Speaker 0>Okay. Alright.

00:19:32.360 --> 00:19:34.919
<v Speaker 0>Let's move on to the adding our first

00:19:34.919 --> 00:19:37.415
<v Speaker 0>quality gate then. So what we're gonna do

00:19:37.415 --> 00:19:39.015
<v Speaker 0>here is add

00:19:39.015 --> 00:19:43.095
<v Speaker 0>another resource and this time it's the SLO

00:19:43.095 --> 00:19:44.374
<v Speaker 0>quality gates.

00:19:46.775 --> 00:19:48.775
<v Speaker 0>We can actually see the contents of this

00:19:48.775 --> 00:19:50.934
<v Speaker 0>file here. Let me zoom in on that.

00:19:52.590 --> 00:19:54.190
<v Speaker 1>I'm still seeing the

00:19:54.750 --> 00:19:55.710
<v Speaker 1>GitHub

00:19:56.270 --> 00:19:58.590
<v Speaker 1>screen. So maybe it's a little bit lagging

00:19:58.590 --> 00:20:00.830
<v Speaker 1>on my side here. Oh, no. But

00:20:01.309 --> 00:20:03.870
<v Speaker 1>if you're already on the SLO part, that's

00:20:03.870 --> 00:20:06.110
<v Speaker 1>perfectly fine. I I what what I will

00:20:06.110 --> 00:20:08.429
<v Speaker 1>do is I will just

00:20:08.934 --> 00:20:10.455
<v Speaker 1>have my tutorial

00:20:10.455 --> 00:20:12.054
<v Speaker 1>also next to me so I can just

00:20:12.054 --> 00:20:12.934
<v Speaker 1>follow

00:20:12.934 --> 00:20:13.735
<v Speaker 1>along and just

00:20:16.534 --> 00:20:18.375
<v Speaker 0>Okay. Well, I was just there for now.

00:20:18.375 --> 00:20:20.534
<v Speaker 0>I'm gonna add the resource.

00:20:22.140 --> 00:20:25.100
<v Speaker 0>So not found that's because,

00:20:26.780 --> 00:20:28.860
<v Speaker 0>am I in the correct directory?

00:20:31.740 --> 00:20:32.380
<v Speaker 0>There we go.

00:20:35.125 --> 00:20:37.044
<v Speaker 0>So we're now added to resource that has

00:20:37.044 --> 00:20:38.484
<v Speaker 0>this SLO file.

00:20:39.605 --> 00:20:40.725
<v Speaker 0>Let's see if I can work out what

00:20:40.725 --> 00:20:43.525
<v Speaker 0>this is doing. So it adds a it's

00:20:43.525 --> 00:20:45.765
<v Speaker 0>got a comparison key, which has an aggregate

00:20:45.765 --> 00:20:48.085
<v Speaker 0>function. I compare with an include the result

00:20:48.085 --> 00:20:50.245
<v Speaker 0>and a number of comparison results. Do you

00:20:50.245 --> 00:20:52.960
<v Speaker 0>wanna maybe just tell us roughly what this

00:20:53.280 --> 00:20:54.559
<v Speaker 0>SLO is doing?

00:20:55.600 --> 00:20:56.559
<v Speaker 1>Yeah, sure.

00:20:56.880 --> 00:20:59.440
<v Speaker 1>So it's basically the definition of the quality

00:20:59.440 --> 00:21:00.080
<v Speaker 1>gate

00:21:00.640 --> 00:21:01.679
<v Speaker 1>defining

00:21:01.760 --> 00:21:03.840
<v Speaker 1>how we want to evaluate it and how

00:21:03.840 --> 00:21:05.840
<v Speaker 1>we want to compare it. So we are

00:21:05.840 --> 00:21:08.054
<v Speaker 1>comparing to the previous

00:21:08.375 --> 00:21:09.174
<v Speaker 1>result,

00:21:09.175 --> 00:21:10.374
<v Speaker 1>just a single result

00:21:10.535 --> 00:21:12.775
<v Speaker 1>and we're only comparing it to previous results

00:21:12.775 --> 00:21:13.735
<v Speaker 1>that passed.

00:21:13.895 --> 00:21:15.575
<v Speaker 1>So if we have a quality gate that

00:21:15.575 --> 00:21:17.815
<v Speaker 1>failed and another one is also failing and

00:21:17.815 --> 00:21:19.735
<v Speaker 1>we're just comparing it to the previous failing

00:21:19.735 --> 00:21:21.975
<v Speaker 1>one and we have, for example, relative thresholds,

00:21:22.250 --> 00:21:25.290
<v Speaker 1>we would not get really good numbers because

00:21:25.290 --> 00:21:26.010
<v Speaker 1>we would

00:21:26.330 --> 00:21:28.570
<v Speaker 1>compare a failing error rate to another failing

00:21:28.570 --> 00:21:31.130
<v Speaker 1>error rate and we would maybe allow it

00:21:31.130 --> 00:21:33.930
<v Speaker 1>to pass. So we in this error, in

00:21:33.930 --> 00:21:36.410
<v Speaker 1>this quality gate, we only want to compare

00:21:36.410 --> 00:21:38.330
<v Speaker 1>it to previously passed

00:21:39.945 --> 00:21:40.664
<v Speaker 1>results.

00:21:41.465 --> 00:21:42.905
<v Speaker 1>And for

00:21:44.505 --> 00:21:47.385
<v Speaker 1>if we are using more than one result

00:21:47.385 --> 00:21:49.385
<v Speaker 1>we would do the aggregate function. We would

00:21:49.385 --> 00:21:50.985
<v Speaker 1>just do an average. So we are not

00:21:50.985 --> 00:21:53.190
<v Speaker 1>taking the minimum or maximum of the error

00:21:53.190 --> 00:21:55.669
<v Speaker 1>rate of previous runs but we would take

00:21:55.669 --> 00:21:57.669
<v Speaker 1>the average. So if it's only one

00:21:58.070 --> 00:22:00.950
<v Speaker 1>actually we don't actually need the aggregate function

00:22:00.950 --> 00:22:02.870
<v Speaker 1>but in this case we are doing the

00:22:02.870 --> 00:22:04.389
<v Speaker 1>aggregate average.

00:22:04.710 --> 00:22:06.150
<v Speaker 1>And then we have a couple of objectives

00:22:06.525 --> 00:22:08.845
<v Speaker 1>and these objectives are defined on

00:22:09.165 --> 00:22:10.205
<v Speaker 1>SLIs.

00:22:10.285 --> 00:22:10.845
<v Speaker 1>And

00:22:11.085 --> 00:22:13.245
<v Speaker 1>actually in this case we only have one

00:22:13.805 --> 00:22:16.045
<v Speaker 1>SLI which is the response time in the

00:22:16.045 --> 00:22:17.485
<v Speaker 1>ninety fifth percentile.

00:22:17.645 --> 00:22:20.685
<v Speaker 1>It's defined in the SLI file that we

00:22:20.685 --> 00:22:22.510
<v Speaker 1>just, that David just showed you.

00:22:22.910 --> 00:22:25.630
<v Speaker 1>And here it says key SLI is false.

00:22:25.630 --> 00:22:26.510
<v Speaker 1>That means

00:22:27.470 --> 00:22:30.670
<v Speaker 1>if a key SLI is true then the

00:22:30.670 --> 00:22:33.630
<v Speaker 1>Keptn Quality Gate fails if only this one

00:22:33.630 --> 00:22:34.269
<v Speaker 1>single

00:22:34.510 --> 00:22:38.975
<v Speaker 1>evaluation fails. So if you have 50 SLIs,

00:22:38.975 --> 00:22:40.654
<v Speaker 1>but one is very crucial,

00:22:41.215 --> 00:22:43.695
<v Speaker 1>that would be a key SLI

00:22:43.695 --> 00:22:45.855
<v Speaker 1>or five are very crucial. Otherwise,

00:22:46.655 --> 00:22:48.734
<v Speaker 1>they all weighted with the same

00:22:49.054 --> 00:22:51.320
<v Speaker 1>weight. You can also change this with the

00:22:51.320 --> 00:22:51.960
<v Speaker 1>weight

00:22:52.120 --> 00:22:52.920
<v Speaker 1>key here.

00:22:53.480 --> 00:22:56.360
<v Speaker 1>And then we have the pass warning criteria

00:22:56.520 --> 00:23:00.120
<v Speaker 1>with the combination of relative and absolute thresholds.

00:23:00.120 --> 00:23:01.720
<v Speaker 1>So it's allowed to pass

00:23:02.135 --> 00:23:03.734
<v Speaker 1>if it's

00:23:04.054 --> 00:23:06.534
<v Speaker 1>faster than six hundred milliseconds and if the

00:23:06.534 --> 00:23:08.054
<v Speaker 1>increase to the previous

00:23:08.215 --> 00:23:11.815
<v Speaker 1>run that also passed is below than 10%.

00:23:13.014 --> 00:23:15.510
<v Speaker 1>So this is how we can build quality

00:23:15.510 --> 00:23:17.830
<v Speaker 1>gates and we can do this with,

00:23:18.150 --> 00:23:18.710
<v Speaker 1>yeah,

00:23:19.110 --> 00:23:23.750
<v Speaker 1>combining absolute values with relative values and thresholds.

00:23:23.990 --> 00:23:25.590
<v Speaker 1>So that that's pretty cool.

00:23:25.990 --> 00:23:26.789
<v Speaker 0>Perfect.

00:23:27.510 --> 00:23:29.585
<v Speaker 0>So we've already added that to our cluster.

00:23:29.585 --> 00:23:32.305
<v Speaker 0>Now we can verify the current versions of

00:23:32.305 --> 00:23:34.465
<v Speaker 0>dev station on production and see what we're

00:23:34.465 --> 00:23:36.625
<v Speaker 0>actually working with here. So

00:23:37.665 --> 00:23:39.585
<v Speaker 0>let me just grab this command.

00:23:42.385 --> 00:23:44.840
<v Speaker 0>And this should give us a URL

00:23:44.920 --> 00:23:46.440
<v Speaker 0>which we could copy.

00:23:52.200 --> 00:23:55.160
<v Speaker 0>So we can see our dev version here

00:23:55.160 --> 00:23:57.720
<v Speaker 0>running 011.1

00:23:57.800 --> 00:24:00.465
<v Speaker 0>and it's green. We can change this to

00:24:00.465 --> 00:24:01.584
<v Speaker 0>staging

00:24:05.264 --> 00:24:06.144
<v Speaker 0>and

00:24:07.424 --> 00:24:08.065
<v Speaker 0>production.

00:24:10.290 --> 00:24:11.650
<v Speaker 0>What was it? Prod?

00:24:14.050 --> 00:24:16.690
<v Speaker 1>Probably it's prod. Yeah. Yeah. Oh, no. I'm

00:24:16.690 --> 00:24:18.690
<v Speaker 0>just failing to type. So that's a pretty

00:24:19.250 --> 00:24:20.929
<v Speaker 0>common occurrence. Alright.

00:24:22.450 --> 00:24:23.730
<v Speaker 0>Where did I get wrong? Production?

00:24:24.995 --> 00:24:27.394
<v Speaker 1>We'll Oh, it is production. It's production. Oh,

00:24:27.394 --> 00:24:28.034
<v Speaker 1>sorry.

00:24:29.154 --> 00:24:31.315
<v Speaker 0>Let me just run this command just in

00:24:31.315 --> 00:24:32.354
<v Speaker 0>case then.

00:24:35.554 --> 00:24:37.394
<v Speaker 0>Oh, it's a different IP address. Okay.

00:24:43.350 --> 00:24:46.230
<v Speaker 1>Nothing coming up coming up here? No. I've

00:24:46.230 --> 00:24:47.270
<v Speaker 0>broken production.

00:24:48.550 --> 00:24:51.830
<v Speaker 1>Okay. So it's actually it's just not it's

00:24:51.830 --> 00:24:53.375
<v Speaker 1>not deployed. Maybe we can take a look

00:24:53.375 --> 00:24:55.054
<v Speaker 1>if we can find the pods.

00:24:55.775 --> 00:24:58.254
<v Speaker 0>Yeah. Let's do that. So let's get namespaces.

00:24:58.255 --> 00:25:00.654
<v Speaker 0>Let's set our namespace to stock shop production

00:25:00.975 --> 00:25:03.054
<v Speaker 0>and make sure we've got our pods running.

00:25:04.095 --> 00:25:05.855
<v Speaker 0>We've only got the DB. We don't have

00:25:05.855 --> 00:25:06.335
<v Speaker 0>the cars.

00:25:07.430 --> 00:25:09.510
<v Speaker 1>Yeah. So what we can do is we

00:25:09.510 --> 00:25:11.670
<v Speaker 1>just start another deployment. We already have the

00:25:11.670 --> 00:25:14.550
<v Speaker 1>quality gates up and running which is totally

00:25:14.550 --> 00:25:15.110
<v Speaker 1>fine

00:25:15.430 --> 00:25:16.149
<v Speaker 1>and

00:25:16.630 --> 00:25:17.909
<v Speaker 1>once we do the

00:25:18.310 --> 00:25:21.435
<v Speaker 1>another deployment actually it says here that we

00:25:21.435 --> 00:25:23.274
<v Speaker 1>got a failing quality gate.

00:25:23.835 --> 00:25:25.435
<v Speaker 1>Can we take a look at the staging

00:25:25.435 --> 00:25:28.715
<v Speaker 1>here? So it was not moved to production

00:25:29.035 --> 00:25:31.675
<v Speaker 1>because the quality gate was failing so actually

00:25:31.675 --> 00:25:33.115
<v Speaker 1>we have to prove that the quality gate

00:25:33.115 --> 00:25:34.235
<v Speaker 1>is already working.

00:25:34.475 --> 00:25:36.640
<v Speaker 1>So it's not the Quality Gate that we

00:25:36.640 --> 00:25:39.200
<v Speaker 1>set up right now but it's actually I

00:25:39.200 --> 00:25:40.640
<v Speaker 1>assume the Quality Gate that you set up

00:25:40.640 --> 00:25:43.280
<v Speaker 1>yesterday for the preparation for today. So

00:25:44.160 --> 00:25:46.240
<v Speaker 1>we can take a look at

00:25:46.320 --> 00:25:47.040
<v Speaker 1>the carts.

00:25:48.335 --> 00:25:50.735
<v Speaker 1>Probably clicking on the quality gate here will

00:25:50.735 --> 00:25:52.335
<v Speaker 1>give us a little bit more detail.

00:25:53.215 --> 00:25:55.295
<v Speaker 0>So so just to clarify there, the problem

00:25:55.295 --> 00:25:57.375
<v Speaker 0>is is that Keptn is too good, and

00:25:57.375 --> 00:25:59.935
<v Speaker 0>it detected a problem and stopped our promotion

00:25:59.935 --> 00:26:01.860
<v Speaker 0>to production. Production. So I like that.

00:26:02.580 --> 00:26:04.260
<v Speaker 1>Kind of. Kind of. Yeah.

00:26:04.740 --> 00:26:06.500
<v Speaker 1>So we did not get any

00:26:07.060 --> 00:26:10.179
<v Speaker 1>let me just get the the light here.

00:26:10.260 --> 00:26:12.980
<v Speaker 1>So it says the response time was actually

00:26:12.980 --> 00:26:13.620
<v Speaker 1>failing here.

00:26:15.425 --> 00:26:18.065
<v Speaker 1>So it was probably

00:26:18.305 --> 00:26:19.825
<v Speaker 1>too slow to

00:26:20.065 --> 00:26:22.145
<v Speaker 1>or the response time was

00:26:22.465 --> 00:26:23.505
<v Speaker 1>not satisfying.

00:26:23.825 --> 00:26:26.945
<v Speaker 1>So let us just do another deployment

00:26:26.610 --> 00:26:28.610
<v Speaker 1>probably with the same version. Maybe there was

00:26:28.610 --> 00:26:28.850
<v Speaker 1>some

00:26:29.410 --> 00:26:31.170
<v Speaker 1>maybe there was too much traffic on the

00:26:31.170 --> 00:26:31.889
<v Speaker 1>cluster

00:26:32.130 --> 00:26:33.889
<v Speaker 1>or it was not coming up.

00:26:35.250 --> 00:26:37.250
<v Speaker 0>Yeah. So there was a command for that.

00:26:37.250 --> 00:26:39.730
<v Speaker 0>Right. This one here. Captain send

00:26:40.095 --> 00:26:41.695
<v Speaker 0>event new artifact,

00:26:41.695 --> 00:26:43.375
<v Speaker 0>pass through the tag. So I could just

00:26:43.375 --> 00:26:46.255
<v Speaker 0>run this to deploy the Yes. Same version.

00:26:46.255 --> 00:26:48.014
<v Speaker 0>Alright. Yeah. Cool.

00:26:50.735 --> 00:26:53.615
<v Speaker 1>And what it does is basically it's sending

00:26:53.615 --> 00:26:55.970
<v Speaker 1>a cloud event to captain. So building a

00:26:55.970 --> 00:26:57.810
<v Speaker 1>cloud event and sending this cloud event to

00:26:57.810 --> 00:26:59.330
<v Speaker 1>the Captain control plane

00:27:00.210 --> 00:27:02.450
<v Speaker 1>and it tells Captain there is a new

00:27:02.450 --> 00:27:03.169
<v Speaker 1>image

00:27:03.570 --> 00:27:04.130
<v Speaker 1>of

00:27:04.850 --> 00:27:06.290
<v Speaker 1>our service carts

00:27:06.290 --> 00:27:08.695
<v Speaker 1>of our project Sock Shop. So that's the

00:27:08.695 --> 00:27:10.934
<v Speaker 1>project Sockshop and the service carts was previously

00:27:10.934 --> 00:27:12.374
<v Speaker 1>onboarded to Keptn.

00:27:12.534 --> 00:27:14.455
<v Speaker 1>David has done this in the preparation and

00:27:14.455 --> 00:27:16.134
<v Speaker 1>also in the last episode you can see

00:27:16.134 --> 00:27:16.695
<v Speaker 1>this and

00:27:17.654 --> 00:27:18.454
<v Speaker 1>we just

00:27:18.934 --> 00:27:20.855
<v Speaker 1>informed Keptn now that there is a new

00:27:20.855 --> 00:27:24.220
<v Speaker 1>container image which has the version 0.11.1

00:27:24.220 --> 00:27:26.300
<v Speaker 1>it's actually the same we want to deploy

00:27:26.300 --> 00:27:27.020
<v Speaker 1>this one.

00:27:27.980 --> 00:27:31.580
<v Speaker 1>Based on the shipyard file with the multi

00:27:31.580 --> 00:27:32.780
<v Speaker 1>stage delivery

00:27:33.020 --> 00:27:33.820
<v Speaker 1>defined,

00:27:34.460 --> 00:27:38.220
<v Speaker 1>Keptn will start to deploy it first in

00:27:36.815 --> 00:27:39.695
<v Speaker 1>in the first stage of this delivery file.

00:27:39.695 --> 00:27:41.855
<v Speaker 1>And in our case it's called dev. So

00:27:41.855 --> 00:27:43.375
<v Speaker 1>it starts to

00:27:44.895 --> 00:27:46.414
<v Speaker 1>the Helm charts,

00:27:46.495 --> 00:27:47.774
<v Speaker 1>release version

00:27:48.735 --> 00:27:51.055
<v Speaker 1>in our dev environment. We'll then apply this

00:27:51.055 --> 00:27:52.415
<v Speaker 1>Helm chart. It will also

00:27:52.870 --> 00:27:55.909
<v Speaker 1>apply this, the changes to the Git repository.

00:27:56.870 --> 00:27:58.470
<v Speaker 1>In this case it might take a

00:27:59.030 --> 00:28:00.149
<v Speaker 1>couple of seconds

00:28:00.710 --> 00:28:03.110
<v Speaker 1>since it also waits if the deployment is

00:28:03.110 --> 00:28:06.789
<v Speaker 1>actually finished, the basically a Helm upgrade if

00:28:06.789 --> 00:28:08.854
<v Speaker 1>it's finished And our

00:28:10.215 --> 00:28:13.095
<v Speaker 1>I think it's the the readiness probe takes

00:28:13.095 --> 00:28:14.774
<v Speaker 1>about thirty seconds,

00:28:14.855 --> 00:28:17.575
<v Speaker 1>fifty seconds, something like this to for for

00:28:17.575 --> 00:28:19.255
<v Speaker 1>the pod to be ready. So it just

00:28:19.255 --> 00:28:20.695
<v Speaker 1>takes a couple of seconds

00:28:21.095 --> 00:28:23.640
<v Speaker 1>and then Keptn will tell you it's finished

00:28:23.640 --> 00:28:25.720
<v Speaker 1>upgrading the chart and it's already deployed in

00:28:25.720 --> 00:28:27.160
<v Speaker 1>the first version or in the in the

00:28:27.160 --> 00:28:29.160
<v Speaker 1>first environment. Yeah. So I think it's deployed

00:28:29.160 --> 00:28:31.080
<v Speaker 0>to dev now. So is is there a

00:28:31.080 --> 00:28:32.680
<v Speaker 0>way for us to follow this from the

00:28:32.680 --> 00:28:34.440
<v Speaker 0>from the bridge? Do we see that

00:28:34.680 --> 00:28:35.560
<v Speaker 0>rollout happening?

00:28:36.554 --> 00:28:37.195
<v Speaker 1>Yes.

00:28:37.355 --> 00:28:39.434
<v Speaker 1>We can take a look here in

00:28:40.315 --> 00:28:41.115
<v Speaker 1>services.

00:28:41.115 --> 00:28:43.034
<v Speaker 1>So we have the environment we can see

00:28:43.034 --> 00:28:45.835
<v Speaker 1>all the different stages but in services we

00:28:45.835 --> 00:28:47.674
<v Speaker 1>can see all the different services that we

00:28:47.674 --> 00:28:48.955
<v Speaker 1>have already onboarded

00:28:49.355 --> 00:28:51.514
<v Speaker 1>and we could see for example yesterday there

00:28:51.514 --> 00:28:53.034
<v Speaker 1>was

00:28:53.170 --> 00:28:54.690
<v Speaker 1>Quality Gate was failing

00:28:55.330 --> 00:28:56.690
<v Speaker 1>and we can see the

00:28:57.010 --> 00:28:58.050
<v Speaker 1>current run,

00:28:58.370 --> 00:29:00.050
<v Speaker 1>the last configuration changed.

00:29:00.290 --> 00:29:03.010
<v Speaker 1>So configuration changed here means we changed

00:29:03.650 --> 00:29:06.405
<v Speaker 1>either the image or we changed load distribution.

00:29:07.045 --> 00:29:08.965
<v Speaker 1>We see the configuration was changed. We see

00:29:08.965 --> 00:29:10.405
<v Speaker 1>it was deployed.

00:29:10.485 --> 00:29:13.205
<v Speaker 1>We can see a quality gate screen in-depth

00:29:13.445 --> 00:29:16.085
<v Speaker 1>but this one was actually green because we

00:29:16.085 --> 00:29:18.165
<v Speaker 1>have not added any quality gate in-depth.

00:29:18.485 --> 00:29:20.350
<v Speaker 1>So it was allowed to pass And we

00:29:20.350 --> 00:29:22.269
<v Speaker 1>can already see here in staging

00:29:22.590 --> 00:29:24.269
<v Speaker 1>there is an approval.

00:29:25.149 --> 00:29:27.229
<v Speaker 1>There are a couple of approval events

00:29:27.309 --> 00:29:29.389
<v Speaker 1>but we set the approval

00:29:30.029 --> 00:29:31.229
<v Speaker 1>to automatically.

00:29:31.309 --> 00:29:33.945
<v Speaker 1>So whenever there is a quality gate

00:29:34.345 --> 00:29:35.385
<v Speaker 1>which is

00:29:36.265 --> 00:29:38.185
<v Speaker 1>if there is no quality gate or the

00:29:38.185 --> 00:29:40.185
<v Speaker 1>quality gate is passing, there will be an

00:29:40.185 --> 00:29:43.385
<v Speaker 1>automatic approval. So for between dev and staging,

00:29:43.800 --> 00:29:46.520
<v Speaker 1>we just allow it to pass basically

00:29:48.120 --> 00:29:51.000
<v Speaker 1>and now it says there it changed the

00:29:51.000 --> 00:29:54.440
<v Speaker 1>configuration so it's basically triggering the deployment. The

00:29:54.440 --> 00:29:55.800
<v Speaker 1>next event will be

00:29:56.360 --> 00:29:58.040
<v Speaker 1>once the deployment is finished

00:29:58.924 --> 00:30:01.405
<v Speaker 1>And once the deployment is finished, Keptn will

00:30:01.405 --> 00:30:02.845
<v Speaker 1>trigger the tests.

00:30:03.085 --> 00:30:05.164
<v Speaker 1>That's right now I have to admit the

00:30:05.164 --> 00:30:08.125
<v Speaker 1>small hiccup in the Keptn's bridge because it's

00:30:08.125 --> 00:30:09.725
<v Speaker 1>not indicating

00:30:09.725 --> 00:30:11.884
<v Speaker 1>that right now tests are executed.

00:30:13.245 --> 00:30:13.804
<v Speaker 1>So

00:30:14.200 --> 00:30:16.360
<v Speaker 1>also in the last episode what we've done

00:30:16.360 --> 00:30:18.760
<v Speaker 1>is we have added some JMeter tests and

00:30:18.760 --> 00:30:21.080
<v Speaker 1>also here JMeter tests are added and they

00:30:21.080 --> 00:30:22.040
<v Speaker 1>are automatically

00:30:22.280 --> 00:30:23.880
<v Speaker 1>triggered by Keptn.

00:30:24.040 --> 00:30:26.440
<v Speaker 1>Again with the same approach Keptn will take

00:30:26.440 --> 00:30:28.105
<v Speaker 1>a look if there

00:30:28.105 --> 00:30:30.664
<v Speaker 1>is a in this case a JMeta folder

00:30:30.665 --> 00:30:34.424
<v Speaker 1>in our staging branch of our carts microservice

00:30:34.905 --> 00:30:36.825
<v Speaker 1>then it will take a look on the

00:30:36.825 --> 00:30:39.945
<v Speaker 1>files in this folder and based on a

00:30:40.105 --> 00:30:43.010
<v Speaker 1>mapping definition it will then execute these files.

00:30:43.010 --> 00:30:45.489
<v Speaker 1>So right now tests are executed.

00:30:46.130 --> 00:30:48.370
<v Speaker 1>They might take about two minutes to finish.

00:30:48.370 --> 00:30:50.529
<v Speaker 1>They are I think 5,000 requests are sent

00:30:50.529 --> 00:30:51.489
<v Speaker 1>to some

00:30:53.010 --> 00:30:54.929
<v Speaker 1>endpoint of our shopping cart

00:30:55.250 --> 00:30:58.505
<v Speaker 1>and once the tests are finished Jmeter will

00:30:58.505 --> 00:31:02.504
<v Speaker 1>send back CloudEvent to the captain control plane

00:31:02.505 --> 00:31:05.225
<v Speaker 1>informing captain tests are now finished please go

00:31:05.225 --> 00:31:07.945
<v Speaker 1>ahead with the next phase whatever the next

00:31:07.945 --> 00:31:10.105
<v Speaker 1>phase is and the next phase is our

00:31:10.105 --> 00:31:10.585
<v Speaker 1>evaluation.

00:31:10.970 --> 00:31:12.809
<v Speaker 1>So we can see tests are finished

00:31:13.290 --> 00:31:14.649
<v Speaker 1>for the evaluation.

00:31:14.730 --> 00:31:15.289
<v Speaker 1>We

00:31:15.930 --> 00:31:19.210
<v Speaker 1>we are doing we we're retrieving data from

00:31:19.210 --> 00:31:21.770
<v Speaker 1>Prometheus so we can see data retrieval,

00:31:21.770 --> 00:31:22.730
<v Speaker 1>and we could see it's not.

00:31:23.495 --> 00:31:24.055
<v Speaker 0>It seems to

00:31:24.855 --> 00:31:27.575
<v Speaker 0>it's not working. Yeah. It's it's failing. So

00:31:27.575 --> 00:31:28.855
<v Speaker 1>let us take a look at the response

00:31:28.855 --> 00:31:31.415
<v Speaker 1>time p 95 at at at the icon.

00:31:31.415 --> 00:31:33.095
<v Speaker 1>There was a a red icon that should

00:31:33.095 --> 00:31:34.855
<v Speaker 1>give us a little bit of indication why

00:31:34.855 --> 00:31:35.655
<v Speaker 1>it's failing.

00:31:36.135 --> 00:31:36.855
<v Speaker 1>Yes. Here.

00:31:38.000 --> 00:31:38.720
<v Speaker 1>So

00:31:39.120 --> 00:31:40.400
<v Speaker 0>Needs Prometheus.

00:31:42.000 --> 00:31:44.240
<v Speaker 1>Could not connect to Prometheus service.

00:31:48.640 --> 00:31:50.720
<v Speaker 1>Okay. Let's take a look if we have

00:31:50.720 --> 00:31:51.840
<v Speaker 1>Prometheus deployed.

00:31:55.875 --> 00:31:56.995
<v Speaker 1>So there should be

00:32:00.275 --> 00:32:01.075
<v Speaker 0>Uh-oh.

00:32:01.315 --> 00:32:03.955
<v Speaker 1>Okay. There is no Prometheus here.

00:32:06.674 --> 00:32:07.715
<v Speaker 1>So no no worry.

00:32:08.650 --> 00:32:10.010
<v Speaker 1>What we can do is

00:32:10.170 --> 00:32:12.250
<v Speaker 1>we can configure Prometheus

00:32:12.250 --> 00:32:13.610
<v Speaker 1>with Keptn and

00:32:14.650 --> 00:32:17.530
<v Speaker 1>actually I think in step number 13 there

00:32:17.530 --> 00:32:19.050
<v Speaker 1>is some Prometheus

00:32:19.050 --> 00:32:20.809
<v Speaker 1>information. So we are

00:32:21.450 --> 00:32:22.650
<v Speaker 1>here

00:32:24.055 --> 00:32:24.855
<v Speaker 1>in,

00:32:24.935 --> 00:32:27.175
<v Speaker 1>again, in this version of Keptn, we are

00:32:27.415 --> 00:32:30.215
<v Speaker 1>Keptn is managing the Prometheus installation. So with

00:32:30.215 --> 00:32:31.015
<v Speaker 1>the first

00:32:31.655 --> 00:32:33.335
<v Speaker 1>with this command, we are

00:32:34.215 --> 00:32:36.870
<v Speaker 1>adding the Prometheus service to Keptn, which is

00:32:36.870 --> 00:32:39.510
<v Speaker 1>also responsible for configuring the Prometheus.

00:32:39.590 --> 00:32:42.470
<v Speaker 1>And with It does say it's all unchanged.

00:32:45.830 --> 00:32:46.630
<v Speaker 1>Exactly.

00:32:47.030 --> 00:32:52.070
<v Speaker 1>So that seems interesting. But Prometheus itself is

00:32:50.925 --> 00:32:52.845
<v Speaker 1>might not be running. So there is another

00:32:52.845 --> 00:32:53.485
<v Speaker 1>command

00:32:54.045 --> 00:32:54.684
<v Speaker 1>for

00:32:55.165 --> 00:32:57.405
<v Speaker 1>Keptn configure Prometheus.

00:32:57.805 --> 00:33:00.765
<v Speaker 1>And this one we need that's also setting

00:33:00.765 --> 00:33:01.325
<v Speaker 1>up

00:33:02.765 --> 00:33:05.005
<v Speaker 1>setting up Prometheus, setting up the alert manager,

00:33:05.570 --> 00:33:08.049
<v Speaker 1>setting up the SLO, setting up the

00:33:08.130 --> 00:33:09.250
<v Speaker 1>scrape jobs

00:33:09.970 --> 00:33:12.450
<v Speaker 1>all based on the SLI file, the SLO

00:33:12.450 --> 00:33:14.690
<v Speaker 1>file, and the

00:33:15.090 --> 00:33:16.210
<v Speaker 1>shipyard file.

00:33:17.010 --> 00:33:18.530
<v Speaker 1>So now we should be able to see

00:33:18.530 --> 00:33:20.210
<v Speaker 1>those pods up and running.

00:33:20.450 --> 00:33:21.010
<v Speaker 1>Here we go.

00:33:24.265 --> 00:33:25.225
<v Speaker 0>I'm

00:33:25.785 --> 00:33:27.785
<v Speaker 0>I'm still confused by that because when I

00:33:27.785 --> 00:33:30.265
<v Speaker 0>applied this, it says unchanged which means this

00:33:30.265 --> 00:33:32.105
<v Speaker 0>deployment already existed

00:33:32.105 --> 00:33:34.265
<v Speaker 0>but we didn't have any pods.

00:33:34.870 --> 00:33:37.030
<v Speaker 0>So does that deployment scale it with a

00:33:37.030 --> 00:33:39.030
<v Speaker 0>replica of zero and then as this kept

00:33:39.030 --> 00:33:41.830
<v Speaker 0>in configure command that scales up?

00:33:42.390 --> 00:33:43.269
<v Speaker 0>Is that right?

00:33:44.470 --> 00:33:46.070
<v Speaker 1>Not not exactly.

00:33:46.870 --> 00:33:48.905
<v Speaker 1>Can we take a look in Keptn namespace

00:33:48.905 --> 00:33:50.184
<v Speaker 1>on all the pods?

00:33:51.065 --> 00:33:51.784
<v Speaker 1>Because

00:33:53.705 --> 00:33:54.184
<v Speaker 1>the

00:33:55.625 --> 00:33:58.184
<v Speaker 1>we can see here is also Prometheus installed.

00:33:58.425 --> 00:33:58.985
<v Speaker 0>Mhmm.

00:33:59.465 --> 00:33:59.945
<v Speaker 1>And

00:34:00.270 --> 00:34:01.789
<v Speaker 1>the way it works is

00:34:02.670 --> 00:34:04.510
<v Speaker 1>if we I will explain it on the

00:34:04.510 --> 00:34:06.110
<v Speaker 1>Prometheus SLI service.

00:34:06.750 --> 00:34:09.469
<v Speaker 1>So the Prometheus SLI service you can install

00:34:09.469 --> 00:34:12.190
<v Speaker 1>it into the Keptn namespace. It's the one

00:34:12.190 --> 00:34:14.110
<v Speaker 1>component that is responsible

00:34:14.270 --> 00:34:15.870
<v Speaker 1>reaching out to a Prometheus,

00:34:16.245 --> 00:34:17.605
<v Speaker 1>fetching the metrics

00:34:17.925 --> 00:34:20.565
<v Speaker 1>and providing it in a way that Captain

00:34:20.565 --> 00:34:22.565
<v Speaker 1>Quality Gates can work with these metrics.

00:34:23.525 --> 00:34:25.445
<v Speaker 1>The Prometheus SLI service is living in the

00:34:25.445 --> 00:34:26.645
<v Speaker 1>Captain namespace.

00:34:26.965 --> 00:34:28.085
<v Speaker 1>Same is true for the

00:34:29.639 --> 00:34:31.719
<v Speaker 1>responsible to reach out to Prometheus

00:34:31.719 --> 00:34:34.520
<v Speaker 1>and configure this Prometheus instance.

00:34:34.679 --> 00:34:37.000
<v Speaker 1>So those have not been changed and

00:34:37.719 --> 00:34:40.039
<v Speaker 1>those have been running in the Captain namespace

00:34:40.039 --> 00:34:40.599
<v Speaker 1>since

00:34:40.839 --> 00:34:41.480
<v Speaker 1>eighteen hours.

00:34:42.155 --> 00:34:43.915
<v Speaker 1>But Prometheus itself

00:34:44.474 --> 00:34:45.995
<v Speaker 1>was not yet started.

00:34:47.275 --> 00:34:49.675
<v Speaker 1>It's only triggered when you do a Keptn

00:34:49.675 --> 00:34:50.715
<v Speaker 1>Configure

00:34:50.795 --> 00:34:53.034
<v Speaker 1>Monitoring and then you can provide the name

00:34:53.034 --> 00:34:54.315
<v Speaker 1>of a different monitoring solutions.

00:34:54.810 --> 00:34:56.890
<v Speaker 1>Keptn Configure Monitoring Prometheus

00:34:56.890 --> 00:34:59.450
<v Speaker 1>will then kick off send a cloud event

00:34:59.450 --> 00:35:01.770
<v Speaker 1>to the Prometheus service which will forward it

00:35:01.770 --> 00:35:02.970
<v Speaker 1>to Prometheus.

00:35:03.370 --> 00:35:05.690
<v Speaker 1>So only with this you will start actually

00:35:05.690 --> 00:35:06.730
<v Speaker 1>the Prometheus.

00:35:07.370 --> 00:35:08.170
<v Speaker 0>Okay.

00:35:08.170 --> 00:35:08.650
<v Speaker 0>So

00:35:09.285 --> 00:35:11.444
<v Speaker 0>let me let me summarize what you just

00:35:11.444 --> 00:35:13.204
<v Speaker 0>said there because I I feel you're being

00:35:13.204 --> 00:35:15.204
<v Speaker 0>too polite and what you're actually saying is

00:35:15.204 --> 00:35:16.645
<v Speaker 0>David you had one job and you fucked

00:35:16.645 --> 00:35:18.724
<v Speaker 0>it up like that's that's essentially what you're

00:35:18.724 --> 00:35:19.205
<v Speaker 0>saying.

00:35:19.525 --> 00:35:20.165
<v Speaker 0>So

00:35:20.484 --> 00:35:21.925
<v Speaker 0>we don't have Prometheus.

00:35:22.510 --> 00:35:25.310
<v Speaker 1>We would just you just missed one command.

00:35:25.310 --> 00:35:27.790
<v Speaker 1>But it's it's it's not it's not a

00:35:27.790 --> 00:35:29.230
<v Speaker 1>problem. So what what we want to do

00:35:29.230 --> 00:35:31.310
<v Speaker 1>is we just send exact we just trigger

00:35:31.310 --> 00:35:33.470
<v Speaker 1>the pipeline once again. Awesome.

00:35:33.550 --> 00:35:34.830
<v Speaker 1>And hopefully,

00:35:35.070 --> 00:35:38.325
<v Speaker 1>this time, we will fetch the correct metrics.

00:35:38.725 --> 00:35:39.845
<v Speaker 0>Yes. So now that we have But it's

00:35:39.845 --> 00:35:42.005
<v Speaker 1>great to see how it failed.

00:35:42.725 --> 00:35:45.605
<v Speaker 0>Yeah yeah, you know, it's nice seeing

00:35:45.605 --> 00:35:47.765
<v Speaker 0>the the bridge and showing you how

00:35:48.085 --> 00:35:49.820
<v Speaker 0>this failed and then even getting that error

00:35:49.820 --> 00:35:51.260
<v Speaker 0>to say, oh we had no previous like

00:35:51.260 --> 00:35:52.860
<v Speaker 0>we didn't actually really have to debug anything

00:35:52.860 --> 00:35:54.380
<v Speaker 0>there, we just had to go all this,

00:35:54.380 --> 00:35:56.380
<v Speaker 0>we don't have what we expect. I missed

00:35:56.380 --> 00:35:58.220
<v Speaker 0>the command, we run the command and now

00:35:58.220 --> 00:36:01.525
<v Speaker 0>we should see this work through properly Hopefully

00:36:01.525 --> 00:36:02.325
<v Speaker 0>this time.

00:36:03.525 --> 00:36:05.845
<v Speaker 0>Nice. Yeah. We give it a try. Yeah.

00:36:05.845 --> 00:36:07.765
<v Speaker 0>It'll be fine. I've got confidence.

00:36:07.845 --> 00:36:10.485
<v Speaker 0>We have another hello from Mark. Hey Mark.

00:36:10.485 --> 00:36:12.085
<v Speaker 0>Hope you're enjoying your week off.

00:36:13.605 --> 00:36:14.165
<v Speaker 1>Hi Mark.

00:36:16.589 --> 00:36:17.310
<v Speaker 0>So

00:36:17.390 --> 00:36:19.870
<v Speaker 0>I guess now this is gonna take another

00:36:20.270 --> 00:36:22.829
<v Speaker 0>two two minutes roughly to run through the

00:36:22.829 --> 00:36:24.590
<v Speaker 0>entire pipeline.

00:36:26.510 --> 00:36:26.829
<v Speaker 1>Yes.

00:36:27.605 --> 00:36:28.565
<v Speaker 1>Okay. Most

00:36:29.525 --> 00:36:31.684
<v Speaker 1>of the time is is spent on the

00:36:31.684 --> 00:36:35.365
<v Speaker 1>actual deployment and then the the execution of

00:36:35.365 --> 00:36:36.165
<v Speaker 1>the tests.

00:36:36.484 --> 00:36:38.484
<v Speaker 1>In dev, it's not a lot of tests.

00:36:38.484 --> 00:36:40.325
<v Speaker 1>We just ping if there is something

00:36:41.860 --> 00:36:44.900
<v Speaker 1>if the endpoint is available in staging.

00:36:44.900 --> 00:36:45.940
<v Speaker 1>We do a little bit

00:36:46.740 --> 00:36:48.100
<v Speaker 1>we we execute

00:36:48.660 --> 00:36:51.220
<v Speaker 1>a little bit more but it should come

00:36:51.220 --> 00:36:52.500
<v Speaker 1>up just in a second.

00:36:52.900 --> 00:36:53.700
<v Speaker 0>Alright. Thanks.

00:36:55.435 --> 00:36:57.595
<v Speaker 0>And then what we're doing next is to

00:36:57.595 --> 00:36:58.315
<v Speaker 0>deploy

00:36:59.435 --> 00:37:01.994
<v Speaker 0>a rather broken version. So zero eleven two

00:37:01.994 --> 00:37:04.555
<v Speaker 0>which should fail our quality checks one more

00:37:04.555 --> 00:37:05.915
<v Speaker 0>time. Is that right? Yes.

00:37:07.595 --> 00:37:07.915
<v Speaker 1>Exactly.

00:37:09.039 --> 00:37:10.640
<v Speaker 1>What we can do there is

00:37:11.359 --> 00:37:13.759
<v Speaker 1>this version should not make it to production.

00:37:13.759 --> 00:37:16.079
<v Speaker 1>So this version we will see it in-depth.

00:37:16.079 --> 00:37:17.759
<v Speaker 1>We should also see it for a couple

00:37:17.759 --> 00:37:19.200
<v Speaker 1>of minutes in staging.

00:37:19.359 --> 00:37:21.359
<v Speaker 1>In staging, we are using

00:37:21.759 --> 00:37:24.494
<v Speaker 1>a blue green deployment. So we're first moving

00:37:24.494 --> 00:37:25.535
<v Speaker 1>it to staging.

00:37:26.335 --> 00:37:28.335
<v Speaker 1>Maybe just wait for this, we will wait

00:37:28.335 --> 00:37:29.375
<v Speaker 1>for this to finish.

00:37:30.494 --> 00:37:32.255
<v Speaker 1>Also the same is true here. We are

00:37:32.255 --> 00:37:33.535
<v Speaker 1>moving the

00:37:33.775 --> 00:37:34.734
<v Speaker 1>one version.

00:37:35.135 --> 00:37:36.494
<v Speaker 1>Right now it's the same version but we

00:37:36.494 --> 00:37:38.510
<v Speaker 1>are moving one version as a blue or

00:37:38.510 --> 00:37:40.270
<v Speaker 1>green version into staging.

00:37:40.430 --> 00:37:42.750
<v Speaker 1>We are executing the tests against this version

00:37:42.829 --> 00:37:45.790
<v Speaker 1>and then we are executing and triggering the

00:37:45.790 --> 00:37:47.550
<v Speaker 1>Kept quality

00:37:48.190 --> 00:37:50.910
<v Speaker 1>based on the outcome. We keep quality gate

00:37:50.910 --> 00:37:52.829
<v Speaker 1>is fine. We keep this version. Otherwise, we

00:37:52.829 --> 00:37:54.815
<v Speaker 1>roll it back to the previous version.

00:37:55.375 --> 00:37:58.015
<v Speaker 1>If we keep this version, Keptn will also

00:37:58.015 --> 00:38:02.015
<v Speaker 1>tell the next stage to start deploying

00:38:02.575 --> 00:38:04.895
<v Speaker 1>or actually trigger the approval process in the

00:38:04.895 --> 00:38:05.695
<v Speaker 1>next stage.

00:38:08.335 --> 00:38:09.055
<v Speaker 0>Yeah. So

00:38:09.600 --> 00:38:12.080
<v Speaker 1>production, it's we should not it's not yet

00:38:12.080 --> 00:38:13.840
<v Speaker 1>there because Yeah. We have to wait for

00:38:13.840 --> 00:38:16.160
<v Speaker 0>the tests. Yeah. And then we should see

00:38:16.160 --> 00:38:18.160
<v Speaker 0>that rule in our entire production namespace.

00:38:18.160 --> 00:38:19.600
<v Speaker 0>So this is now running.

00:38:21.040 --> 00:38:22.640
<v Speaker 0>Okay. So this is done the auto approval

00:38:22.640 --> 00:38:24.000
<v Speaker 0>to staging. We have to wait for staging

00:38:24.000 --> 00:38:25.974
<v Speaker 0>to finish and then the Gmeter test will

00:38:25.974 --> 00:38:26.775
<v Speaker 0>be kicked off.

00:38:27.575 --> 00:38:28.375
<v Speaker 1>Exactly.

00:38:28.375 --> 00:38:30.215
<v Speaker 1>And for this automated approval,

00:38:31.655 --> 00:38:34.455
<v Speaker 1>yeah, deployment finished so now the tests will

00:38:34.455 --> 00:38:35.575
<v Speaker 1>be executed.

00:38:36.135 --> 00:38:39.255
<v Speaker 1>For this approval that's also quite nice. Here

00:38:38.990 --> 00:38:41.470
<v Speaker 1>we have it automated just for the sake

00:38:41.470 --> 00:38:43.549
<v Speaker 1>of the demo that we don't have to

00:38:43.549 --> 00:38:45.390
<v Speaker 1>click here and wait.

00:38:46.430 --> 00:38:46.910
<v Speaker 1>But

00:38:47.390 --> 00:38:49.230
<v Speaker 1>our friends from Citrix, they have built an

00:38:49.230 --> 00:38:51.630
<v Speaker 1>integration to Keptn with a Slackbot.

00:38:51.965 --> 00:38:54.285
<v Speaker 1>So whenever there's an open approval, they get

00:38:54.285 --> 00:38:56.365
<v Speaker 1>this message directly into Slack

00:38:56.605 --> 00:38:59.965
<v Speaker 1>and can click either accept or reject

00:39:00.285 --> 00:39:01.885
<v Speaker 1>and they will also get

00:39:02.205 --> 00:39:04.859
<v Speaker 1>all the data from the quality

00:39:04.859 --> 00:39:06.779
<v Speaker 1>evaluation from the previous stage. So they will

00:39:06.779 --> 00:39:08.859
<v Speaker 1>see what is the quality of the service

00:39:08.859 --> 00:39:10.539
<v Speaker 1>and then based on this, they can make

00:39:10.539 --> 00:39:12.859
<v Speaker 1>the decision and they are they don't have

00:39:12.859 --> 00:39:15.180
<v Speaker 1>to leave Slack. They just work in Slack.

00:39:15.420 --> 00:39:17.099
<v Speaker 1>You could have the same in Microsoft Teams,

00:39:17.099 --> 00:39:17.900
<v Speaker 1>I guess, but

00:39:18.380 --> 00:39:19.180
<v Speaker 1>Whatever you're using.

00:39:20.515 --> 00:39:22.675
<v Speaker 0>All of the above to be honest. So

00:39:23.715 --> 00:39:25.235
<v Speaker 0>yeah, that I can see there's a lot

00:39:25.235 --> 00:39:27.395
<v Speaker 0>of value in that. I know, you know,

00:39:27.395 --> 00:39:29.395
<v Speaker 0>getting those kind of information and no, we're

00:39:29.395 --> 00:39:31.235
<v Speaker 0>all using Slack these days, right? It's we

00:39:31.235 --> 00:39:32.915
<v Speaker 0>spend a lot of our time there communicating

00:39:32.915 --> 00:39:35.130
<v Speaker 0>with our colleagues have not under them. So

00:39:35.130 --> 00:39:37.290
<v Speaker 0>it's it's nice that it has that integration

00:39:37.290 --> 00:39:39.050
<v Speaker 0>and we can see the performers results and

00:39:39.050 --> 00:39:41.050
<v Speaker 0>improve it directly from Slack. I can see

00:39:41.050 --> 00:39:42.170
<v Speaker 0>a lot of value there.

00:39:43.849 --> 00:39:45.130
<v Speaker 0>It passed. Way.

00:39:45.865 --> 00:39:47.065
<v Speaker 1>Oh yeah.

00:39:48.745 --> 00:39:50.425
<v Speaker 0>And now I have to Oh no, the

00:39:50.425 --> 00:39:51.945
<v Speaker 0>approval is finished.

00:39:51.945 --> 00:39:54.025
<v Speaker 0>So we should There we go. We now

00:39:54.025 --> 00:39:55.385
<v Speaker 0>have production pods.

00:39:57.385 --> 00:39:58.105
<v Speaker 1>Finally.

00:39:58.585 --> 00:40:00.425
<v Speaker 0>Yep. And then if I come over here,

00:40:01.850 --> 00:40:03.130
<v Speaker 0>not quite yet.

00:40:09.850 --> 00:40:11.610
<v Speaker 0>I guess there'll be probes on that. So

00:40:11.610 --> 00:40:13.450
<v Speaker 0>the service would be passing in the end

00:40:13.450 --> 00:40:15.185
<v Speaker 0>points yet. So we just have to wait

00:40:15.185 --> 00:40:16.545
<v Speaker 0>a little bit longer.

00:40:20.705 --> 00:40:21.985
<v Speaker 0>Describe service

00:40:21.985 --> 00:40:22.945
<v Speaker 0>cars.

00:40:24.465 --> 00:40:26.305
<v Speaker 0>Yeah. No end points yet. So we'll just

00:40:26.305 --> 00:40:26.705
<v Speaker 0>wait.

00:40:31.910 --> 00:40:33.829
<v Speaker 0>Patience is not my virtue half the time.

00:40:33.829 --> 00:40:34.950
<v Speaker 0>I will be honest.

00:40:36.470 --> 00:40:38.550
<v Speaker 0>Like I don't want quality gates just deploy

00:40:38.550 --> 00:40:40.630
<v Speaker 0>everything to prod as soon as it's ready.

00:40:41.030 --> 00:40:42.710
<v Speaker 0>My customers are quality gates.

00:40:43.425 --> 00:40:45.505
<v Speaker 0>No. That's a terrible attitude. I shouldn't promote

00:40:45.505 --> 00:40:47.345
<v Speaker 0>that advice. That's terrible advice.

00:40:49.025 --> 00:40:50.225
<v Speaker 1>Yeah. Sometimes

00:40:50.385 --> 00:40:50.865
<v Speaker 1>for

00:40:51.985 --> 00:40:54.625
<v Speaker 1>sometimes you you just want to deploy something.

00:40:55.105 --> 00:40:58.385
<v Speaker 1>We actually what what we see with with

00:40:57.810 --> 00:40:59.810
<v Speaker 1>feature flags it's the same that you have

00:40:59.810 --> 00:41:02.050
<v Speaker 1>the feature flags. You cannot test all the

00:41:02.050 --> 00:41:04.930
<v Speaker 1>combination of your feature flags in the pre

00:41:04.930 --> 00:41:07.570
<v Speaker 1>prod or hardening, staging, whatever you call it.

00:41:07.810 --> 00:41:10.370
<v Speaker 1>So it's basically your customers are

00:41:11.154 --> 00:41:13.155
<v Speaker 1>your testers and

00:41:13.394 --> 00:41:15.474
<v Speaker 1>this is one of the ideas that we

00:41:15.474 --> 00:41:17.555
<v Speaker 1>also built into Keptn with

00:41:17.795 --> 00:41:19.315
<v Speaker 1>combining feature. We can

00:41:19.954 --> 00:41:22.275
<v Speaker 1>we now have integration for example to the

00:41:22.355 --> 00:41:25.560
<v Speaker 1>Unleash feature flagging framework that where we can

00:41:25.560 --> 00:41:27.320
<v Speaker 1>just reach out to it and toggle a

00:41:27.320 --> 00:41:29.080
<v Speaker 1>feature flag if there's something

00:41:29.400 --> 00:41:30.680
<v Speaker 1>not not working.

00:41:30.920 --> 00:41:33.160
<v Speaker 1>In our case, everything's working in production. That's

00:41:33.160 --> 00:41:33.720
<v Speaker 1>cool.

00:41:35.880 --> 00:41:37.080
<v Speaker 0>So then we have to break it.

00:41:40.875 --> 00:41:43.435
<v Speaker 0>Right? Is that that's what we're doing? Just

00:41:43.355 --> 00:41:45.755
<v Speaker 1>Yep. We can just exactly. So

00:41:46.955 --> 00:41:49.915
<v Speaker 1>now we are deploying a rather slow version

00:41:49.915 --> 00:41:51.515
<v Speaker 1>of our shopping cart.

00:41:51.915 --> 00:41:53.355
<v Speaker 1>Again it's

00:41:55.670 --> 00:41:56.390
<v Speaker 1>so

00:41:56.470 --> 00:41:58.950
<v Speaker 1>once you're using Keptn it's,

00:41:59.190 --> 00:42:00.950
<v Speaker 1>there is some initial setup

00:42:01.030 --> 00:42:02.869
<v Speaker 1>with creating the project,

00:42:02.950 --> 00:42:03.350
<v Speaker 1>with

00:42:03.829 --> 00:42:05.430
<v Speaker 1>onboarding the services,

00:42:06.150 --> 00:42:09.065
<v Speaker 1>with adding your test information, with adding your

00:42:09.065 --> 00:42:11.224
<v Speaker 1>quality gates and all the SLI information, how

00:42:11.224 --> 00:42:14.025
<v Speaker 1>to retrieve the data from Prometheus or

00:42:14.905 --> 00:42:17.944
<v Speaker 1>Dynatrace or Datadog, New Relic, whatever you want

00:42:17.944 --> 00:42:18.505
<v Speaker 1>to use.

00:42:20.105 --> 00:42:22.880
<v Speaker 1>And then most of the time you're using

00:42:22.880 --> 00:42:24.640
<v Speaker 1>a Keptn add resource

00:42:24.800 --> 00:42:27.520
<v Speaker 1>to rewrite your quality gates or to add

00:42:27.520 --> 00:42:28.160
<v Speaker 1>more

00:42:28.480 --> 00:42:29.760
<v Speaker 1>test instructions

00:42:29.920 --> 00:42:32.000
<v Speaker 1>or you just use Keptn send event new

00:42:32.000 --> 00:42:33.360
<v Speaker 1>artifact which

00:42:33.360 --> 00:42:35.520
<v Speaker 1>basically tells Keptn to kick off a new

00:42:35.520 --> 00:42:36.320
<v Speaker 1>delivery workflow.

00:42:37.365 --> 00:42:38.965
<v Speaker 1>We also have integrations

00:42:39.285 --> 00:42:40.005
<v Speaker 1>in

00:42:40.244 --> 00:42:42.725
<v Speaker 1>I think it's Azure DevOps where we just

00:42:43.125 --> 00:42:44.405
<v Speaker 1>one

00:42:45.605 --> 00:42:47.845
<v Speaker 1>one guy from the Keptn

00:42:47.845 --> 00:42:49.045
<v Speaker 1>community

00:42:49.685 --> 00:42:51.765
<v Speaker 1>with the name of Bert Van Dyke. He's

00:42:51.765 --> 00:42:52.965
<v Speaker 1>from The Netherlands and

00:42:53.250 --> 00:42:56.050
<v Speaker 1>or from Belgium. I'm not yet sure. But

00:42:56.290 --> 00:42:58.530
<v Speaker 1>what he what he did is he was

00:42:58.770 --> 00:43:01.170
<v Speaker 1>building an integration into Azure DevOps

00:43:01.250 --> 00:43:03.890
<v Speaker 1>where the whole Quality Gate part is Keptn

00:43:03.890 --> 00:43:06.130
<v Speaker 1>and the whole other part with the delivery

00:43:06.705 --> 00:43:09.105
<v Speaker 1>is Azure DevOps. So you can think of

00:43:09.105 --> 00:43:11.345
<v Speaker 1>this that you can just use parts of

00:43:11.345 --> 00:43:13.505
<v Speaker 1>Keptn in your existing

00:43:13.825 --> 00:43:15.825
<v Speaker 1>environment if you already have have it.

00:43:16.385 --> 00:43:18.625
<v Speaker 0>Yeah. I think what's really cool about this

00:43:18.625 --> 00:43:19.345
<v Speaker 0>is that, you know,

00:43:20.430 --> 00:43:23.230
<v Speaker 0>more and more organizations and teams are trying

00:43:23.230 --> 00:43:25.790
<v Speaker 0>to codify their SRE initiatives,

00:43:26.030 --> 00:43:27.950
<v Speaker 0>you know, codify their SLIs and their SLOs

00:43:27.950 --> 00:43:29.710
<v Speaker 0>and that's what what Captain is doing here

00:43:29.710 --> 00:43:32.910
<v Speaker 0>like, we have this YAML syntax that's

00:43:32.525 --> 00:43:33.805
<v Speaker 0>hopefully intuitive

00:43:33.805 --> 00:43:35.885
<v Speaker 0>and easy for people to pick up and

00:43:35.885 --> 00:43:37.725
<v Speaker 0>then commit that to get and then have

00:43:37.725 --> 00:43:39.725
<v Speaker 0>all of these checks built around that automated

00:43:39.725 --> 00:43:42.605
<v Speaker 0>for them. Such a powerful set of tools.

00:43:45.510 --> 00:43:50.310
<v Speaker 0>Let's see what's happened here. We've

00:43:50.310 --> 00:43:51.350
<v Speaker 0>got our evaluation

00:43:51.350 --> 00:43:53.590
<v Speaker 0>is now gone to staging. So we're just

00:43:53.590 --> 00:43:55.190
<v Speaker 0>maybe a minute out then.

00:43:55.350 --> 00:43:57.510
<v Speaker 0>And what we should see is we've already

00:43:57.510 --> 00:43:59.830
<v Speaker 0>seen it twice because of my little mistake,

00:43:59.830 --> 00:44:00.230
<v Speaker 0>but

00:44:01.645 --> 00:44:03.725
<v Speaker 0>a promotion to production

00:44:03.805 --> 00:44:06.365
<v Speaker 0>being blocked by the quality gate. So

00:44:07.805 --> 00:44:09.405
<v Speaker 0>I guess we'll have this time what we'll

00:44:09.405 --> 00:44:12.045
<v Speaker 0>see instead of an error message that just

00:44:12.045 --> 00:44:13.645
<v Speaker 0>says, you know, I can't speak to Prometheus

00:44:13.645 --> 00:44:15.405
<v Speaker 0>is that we'll actually see the

00:44:16.490 --> 00:44:19.130
<v Speaker 0>response time fail of the

00:44:21.049 --> 00:44:22.330
<v Speaker 0>required values.

00:44:24.170 --> 00:44:26.650
<v Speaker 1>What we should already see is

00:44:27.049 --> 00:44:28.809
<v Speaker 1>how it's deployed

00:44:28.809 --> 00:44:31.305
<v Speaker 1>into dev, you know, into our dev environment.

00:44:31.465 --> 00:44:33.865
<v Speaker 1>So if you can open up the dev

00:44:33.865 --> 00:44:34.665
<v Speaker 1>environment

00:44:34.665 --> 00:44:35.385
<v Speaker 1>again,

00:44:35.465 --> 00:44:38.425
<v Speaker 1>we should already see the yeah. That's kind

00:44:38.425 --> 00:44:40.505
<v Speaker 1>of the broken version indicated by the red

00:44:40.505 --> 00:44:41.225
<v Speaker 1>background,

00:44:41.625 --> 00:44:41.945
<v Speaker 1>kind of,

00:44:42.800 --> 00:44:44.320
<v Speaker 1>yeah, obvious.

00:44:44.720 --> 00:44:46.960
<v Speaker 1>In staging, it should also be deployed

00:44:47.840 --> 00:44:48.560
<v Speaker 1>already.

00:44:48.800 --> 00:44:50.240
<v Speaker 1>I think it says in the in the

00:44:50.240 --> 00:44:52.400
<v Speaker 1>bridge that it was deployed, but not sure.

00:44:53.359 --> 00:44:55.135
<v Speaker 1>Not yet. Okay. No. So

00:44:55.855 --> 00:44:58.015
<v Speaker 0>Yeah. So it's it's approved at end staging,

00:44:58.015 --> 00:44:59.935
<v Speaker 0>but it's not actually

00:45:00.335 --> 00:45:01.935
<v Speaker 0>deployed just yet.

00:45:02.255 --> 00:45:04.095
<v Speaker 1>It's about to be deployed,

00:45:04.175 --> 00:45:06.575
<v Speaker 1>but traffic has not been shifted yet to

00:45:06.575 --> 00:45:08.559
<v Speaker 1>the to the new version. It We will

00:45:08.559 --> 00:45:10.559
<v Speaker 1>get the information here in the bridge once

00:45:10.559 --> 00:45:13.440
<v Speaker 1>traffic is shifted and deployment has finished.

00:45:14.400 --> 00:45:15.839
<v Speaker 1>Then we will be able to see this

00:45:15.839 --> 00:45:18.080
<v Speaker 1>version also in the browser

00:45:18.400 --> 00:45:20.559
<v Speaker 1>and it will be there. I can already

00:45:20.559 --> 00:45:22.164
<v Speaker 1>spoil a little bit here. It will be

00:45:22.164 --> 00:45:23.765
<v Speaker 1>there for a couple of minutes while the

00:45:23.765 --> 00:45:26.005
<v Speaker 1>tests are running. And after the tests,

00:45:26.244 --> 00:45:27.924
<v Speaker 1>we will have another evaluation of the Keptn

00:45:27.924 --> 00:45:28.805
<v Speaker 1>Quality Gate.

00:45:30.405 --> 00:45:33.125
<v Speaker 1>And so here we are. And

00:45:33.684 --> 00:45:36.080
<v Speaker 1>the captain quality gate, if it's failing, it

00:45:36.080 --> 00:45:38.560
<v Speaker 1>will roll it back to version number one,

00:45:38.560 --> 00:45:39.600
<v Speaker 1>to the green version.

00:45:39.840 --> 00:45:42.560
<v Speaker 1>If it's not failing, the captain quality gate,

00:45:42.560 --> 00:45:44.160
<v Speaker 1>then we will keep this version here and

00:45:44.160 --> 00:45:46.240
<v Speaker 1>we will move it also to production. So

00:45:46.240 --> 00:45:48.400
<v Speaker 1>hopefully, we don't move this version to production.

00:45:48.935 --> 00:45:49.975
<v Speaker 1>It's

00:45:49.975 --> 00:45:51.655
<v Speaker 1>kind of the slow version.

00:45:53.575 --> 00:45:54.535
<v Speaker 1>Unfortunately,

00:45:54.695 --> 00:45:57.335
<v Speaker 1>this will take a couple of minutes because

00:45:57.335 --> 00:45:59.494
<v Speaker 1>it's the slow version, the tests we send

00:45:59.494 --> 00:46:02.090
<v Speaker 1>about 5,000 requests against the service. So the

00:46:02.090 --> 00:46:05.290
<v Speaker 1>requests will take more time and it will

00:46:05.290 --> 00:46:07.770
<v Speaker 1>take about, in my experience, about like five

00:46:07.770 --> 00:46:08.890
<v Speaker 1>to ten minutes.

00:46:09.690 --> 00:46:11.690
<v Speaker 1>I guess we can just move on. Yeah,

00:46:12.170 --> 00:46:13.690
<v Speaker 1>we can talk about our next steps. We

00:46:13.690 --> 00:46:15.530
<v Speaker 1>don't have to execute it already

00:46:15.770 --> 00:46:17.865
<v Speaker 1>but this is what we will see. It

00:46:17.865 --> 00:46:20.265
<v Speaker 1>will not be promoted to the next stage

00:46:20.505 --> 00:46:23.065
<v Speaker 1>because of the blocking quality gate.

00:46:23.225 --> 00:46:24.345
<v Speaker 1>And again

00:46:25.305 --> 00:46:27.625
<v Speaker 1>in the demo, the quality gate is very,

00:46:27.625 --> 00:46:30.370
<v Speaker 1>very simple. We just care about the response

00:46:30.370 --> 00:46:33.330
<v Speaker 1>time in this demo. But again you can

00:46:33.330 --> 00:46:35.170
<v Speaker 1>build your quality gates

00:46:36.530 --> 00:46:38.370
<v Speaker 1>having all different kinds of

00:46:38.690 --> 00:46:40.130
<v Speaker 1>metrics and data in it.

00:46:41.724 --> 00:46:42.685
<v Speaker 1>For example,

00:46:43.405 --> 00:46:44.845
<v Speaker 1>most often you want to care about the

00:46:44.845 --> 00:46:47.005
<v Speaker 1>error rate. So you want to make sure

00:46:47.005 --> 00:46:49.244
<v Speaker 1>that errors are below, I don't know, 2%

00:46:49.244 --> 00:46:51.085
<v Speaker 1>or not increasing

00:46:51.165 --> 00:46:53.565
<v Speaker 1>by more than 5% to the previous runs.

00:46:53.910 --> 00:46:56.630
<v Speaker 1>You want to make sure that throughput is

00:46:56.630 --> 00:46:58.549
<v Speaker 1>high. You want to make sure that response

00:46:58.549 --> 00:47:00.470
<v Speaker 1>time is low. So all of these things

00:47:00.470 --> 00:47:02.630
<v Speaker 1>you can build in your Keptn quality gates

00:47:02.710 --> 00:47:03.430
<v Speaker 1>and

00:47:03.829 --> 00:47:07.270
<v Speaker 1>if you don't know the exact values yet

00:47:07.415 --> 00:47:09.415
<v Speaker 1>then we see a lot of Keptn customers

00:47:09.415 --> 00:47:11.095
<v Speaker 1>or Keptn users actually.

00:47:11.974 --> 00:47:12.855
<v Speaker 1>They are

00:47:14.295 --> 00:47:16.295
<v Speaker 1>using relative values.

00:47:16.295 --> 00:47:18.375
<v Speaker 1>So they are using just,

00:47:19.494 --> 00:47:21.335
<v Speaker 1>let's say, response time is not allowed to

00:47:21.335 --> 00:47:22.615
<v Speaker 1>increase by 10%.

00:47:23.450 --> 00:47:26.650
<v Speaker 1>Throughput is not allowed to decrease by 10%

00:47:26.650 --> 00:47:28.570
<v Speaker 1>to the previous runs or 5%.

00:47:30.250 --> 00:47:32.490
<v Speaker 1>So you can build your relative thresholds and

00:47:32.490 --> 00:47:33.130
<v Speaker 1>once you have

00:47:34.410 --> 00:47:36.890
<v Speaker 1>you know what your absolute threshold should be,

00:47:36.890 --> 00:47:38.565
<v Speaker 1>then you can fill it in or improve

00:47:38.565 --> 00:47:40.645
<v Speaker 1>your quality gates or however you want to

00:47:40.645 --> 00:47:42.725
<v Speaker 1>do this. Okay. Can I ask a question?

00:47:42.725 --> 00:47:44.005
<v Speaker 0>I'm over waiting. So

00:47:44.885 --> 00:47:45.845
<v Speaker 0>assume

00:47:45.925 --> 00:47:47.925
<v Speaker 0>we know that that's broken and you know,

00:47:47.925 --> 00:47:50.005
<v Speaker 0>maybe we're just adopting Keptn and we are

00:47:50.005 --> 00:47:52.000
<v Speaker 0>you know, the the automation is really cool,

00:47:52.000 --> 00:47:53.840
<v Speaker 0>but at the same time, we're still checking

00:47:53.840 --> 00:47:56.240
<v Speaker 0>the metrics ourselves manually during the place. Like

00:47:56.240 --> 00:47:58.160
<v Speaker 0>what happens if I trigger this new artifact

00:47:58.160 --> 00:48:00.000
<v Speaker 0>now while we're still in the middle of

00:48:00.000 --> 00:48:00.720
<v Speaker 0>another

00:48:00.960 --> 00:48:03.520
<v Speaker 0>currently processing deployment? Does it get queued up

00:48:03.520 --> 00:48:05.280
<v Speaker 0>afterwards? Does it start the roll out to

00:48:05.280 --> 00:48:08.115
<v Speaker 0>dev just now? What would go on there?

00:48:09.875 --> 00:48:12.035
<v Speaker 1>So in the current version of Keptn, this

00:48:12.035 --> 00:48:13.475
<v Speaker 1>is actually a problem

00:48:14.275 --> 00:48:16.755
<v Speaker 1>because it, you would just kick off another

00:48:16.755 --> 00:48:17.555
<v Speaker 1>workflow.

00:48:18.035 --> 00:48:20.289
<v Speaker 1>It will move it to dev and it

00:48:20.289 --> 00:48:22.690
<v Speaker 1>will also move it to

00:48:23.890 --> 00:48:26.690
<v Speaker 1>staging. So right now there is no blocking

00:48:26.690 --> 00:48:27.490
<v Speaker 1>mechanism.

00:48:27.490 --> 00:48:28.930
<v Speaker 1>This is also what we're going to fix

00:48:28.930 --> 00:48:30.050
<v Speaker 1>in the next version.

00:48:31.490 --> 00:48:33.730
<v Speaker 1>The reason why it

00:48:33.890 --> 00:48:35.490
<v Speaker 1>was built like this is that

00:48:35.815 --> 00:48:36.455
<v Speaker 1>actually

00:48:36.935 --> 00:48:38.775
<v Speaker 1>most of the time the artifacts are coming

00:48:38.775 --> 00:48:40.935
<v Speaker 1>out from some kind of CI system.

00:48:41.735 --> 00:48:42.295
<v Speaker 1>And

00:48:42.615 --> 00:48:44.535
<v Speaker 1>after the CI system you decide, is it

00:48:44.535 --> 00:48:46.535
<v Speaker 1>a version that I really want to deploy

00:48:46.535 --> 00:48:49.410
<v Speaker 1>into dev or staging or whatever? Is Is

00:48:49.410 --> 00:48:50.930
<v Speaker 1>it the version that I already want to

00:48:50.930 --> 00:48:52.690
<v Speaker 1>deploy or was it just like

00:48:53.809 --> 00:48:56.210
<v Speaker 1>a test build? And once you decide you

00:48:56.210 --> 00:48:57.650
<v Speaker 1>want to deploy this version,

00:48:58.770 --> 00:49:00.770
<v Speaker 1>there should be kind of a

00:49:01.170 --> 00:49:04.290
<v Speaker 1>blocking mechanism that you cannot deploy anything into

00:49:03.705 --> 00:49:05.145
<v Speaker 1>staging whereas currently

00:49:06.505 --> 00:49:08.745
<v Speaker 1>deployments going on or tests going on but

00:49:08.745 --> 00:49:10.585
<v Speaker 1>in this version you would, it would not

00:49:10.585 --> 00:49:11.945
<v Speaker 1>be blocked by Keptn.

00:49:12.025 --> 00:49:13.625
<v Speaker 1>So in the current version.

00:49:14.665 --> 00:49:15.065
<v Speaker 0>Okay.

00:49:16.180 --> 00:49:18.260
<v Speaker 0>So do you see, like going back to

00:49:18.260 --> 00:49:20.420
<v Speaker 0>the Currently we are using Keptn in a

00:49:20.420 --> 00:49:22.740
<v Speaker 0>a multi namespace approach. So we have a

00:49:22.740 --> 00:49:24.820
<v Speaker 0>namespace for dev, namespace for staging and a

00:49:24.820 --> 00:49:26.020
<v Speaker 0>namespace for production.

00:49:26.340 --> 00:49:27.940
<v Speaker 0>But you also said that, you know, in

00:49:27.940 --> 00:49:29.300
<v Speaker 0>the next version we can expect to be

00:49:29.300 --> 00:49:31.140
<v Speaker 0>able to have a dev cluster, staging cluster,

00:49:31.155 --> 00:49:33.715
<v Speaker 0>a production cluster. Do you see Captain as

00:49:33.715 --> 00:49:35.875
<v Speaker 0>something that runs on like a management control

00:49:35.875 --> 00:49:38.995
<v Speaker 0>plane cluster outside of those other clusters or

00:49:39.075 --> 00:49:39.875
<v Speaker 0>with

00:49:39.875 --> 00:49:42.835
<v Speaker 0>Captain running my dev cluster and then promote

00:49:42.835 --> 00:49:44.515
<v Speaker 0>to other clusters? Like, what do you think

00:49:44.515 --> 00:49:45.795
<v Speaker 0>the ideal setup would be there?

00:49:49.220 --> 00:49:52.260
<v Speaker 1>That's a good question. I think it really

00:49:52.260 --> 00:49:54.500
<v Speaker 1>depends on the use case where we also

00:49:54.500 --> 00:49:56.420
<v Speaker 1>see that Keptn is just running on the

00:49:56.420 --> 00:49:57.300
<v Speaker 1>Keys,

00:49:57.300 --> 00:49:58.100
<v Speaker 1>K3S

00:49:58.100 --> 00:49:59.220
<v Speaker 1>on the Keys installation

00:49:59.795 --> 00:50:02.515
<v Speaker 1>where you just run the Keptn control plane

00:50:02.595 --> 00:50:03.155
<v Speaker 1>on

00:50:03.795 --> 00:50:05.875
<v Speaker 1>a small Kubernetes distribution. You don't want to

00:50:05.875 --> 00:50:08.195
<v Speaker 1>run a full Kubernetes cluster because you're only

00:50:08.195 --> 00:50:10.355
<v Speaker 1>using parts of Keptn. So you run it

00:50:10.355 --> 00:50:12.595
<v Speaker 1>on a small Kubernetes distribution. If you're going

00:50:12.675 --> 00:50:13.475
<v Speaker 1>full Keptn,

00:50:13.890 --> 00:50:15.809
<v Speaker 1>then you might want to run it on

00:50:15.809 --> 00:50:17.890
<v Speaker 1>a stable environment, maybe not in the dev

00:50:17.890 --> 00:50:18.930
<v Speaker 1>environment because

00:50:19.170 --> 00:50:21.010
<v Speaker 1>if it's one that you tear down and

00:50:21.010 --> 00:50:22.770
<v Speaker 1>recreate a couple of times, you don't want

00:50:22.770 --> 00:50:24.530
<v Speaker 1>to have to install Keptn all the time

00:50:24.609 --> 00:50:25.330
<v Speaker 1>again.

00:50:25.490 --> 00:50:27.650
<v Speaker 1>So that might be living

00:50:28.905 --> 00:50:29.865
<v Speaker 1>production related

00:50:30.025 --> 00:50:30.825
<v Speaker 1>cluster,

00:50:30.905 --> 00:50:32.745
<v Speaker 1>the Keptn control plane. And then you still

00:50:32.745 --> 00:50:34.105
<v Speaker 1>have Keptn services

00:50:34.265 --> 00:50:36.905
<v Speaker 1>running on different clusters because they have to

00:50:37.145 --> 00:50:40.345
<v Speaker 1>be able to execute some actions on these

00:50:40.345 --> 00:50:40.665
<v Speaker 1>clusters.

00:50:41.480 --> 00:50:43.799
<v Speaker 0>Can Keptn run as a control plane run

00:50:43.799 --> 00:50:45.559
<v Speaker 0>outside of Kubernetes? Could I just run it

00:50:45.559 --> 00:50:47.799
<v Speaker 0>as a daemon process on Linux or does

00:50:47.799 --> 00:50:50.040
<v Speaker 0>it does it require those Kubernetes APIs to

00:50:50.040 --> 00:50:50.840
<v Speaker 0>be available?

00:50:52.520 --> 00:50:55.005
<v Speaker 1>It's not so much about the yeah,

00:50:55.165 --> 00:50:57.405
<v Speaker 1>it's a little bit about the Kubernetes APIs.

00:50:57.405 --> 00:50:59.724
<v Speaker 1>It's just built in a way that we

00:50:59.724 --> 00:51:01.805
<v Speaker 1>need some kind of service discovery, we need

00:51:01.805 --> 00:51:03.885
<v Speaker 1>some kind of this orchestration.

00:51:04.525 --> 00:51:06.444
<v Speaker 1>So you can run it on a smaller

00:51:06.444 --> 00:51:07.805
<v Speaker 1>Kubernetes distribution

00:51:07.964 --> 00:51:08.845
<v Speaker 1>but

00:51:09.279 --> 00:51:11.520
<v Speaker 1>it's built in a way that there has

00:51:11.520 --> 00:51:13.359
<v Speaker 1>to be some Kubernetes runtime

00:51:13.440 --> 00:51:16.000
<v Speaker 1>below Keptn. Yeah. I think that's a really

00:51:16.000 --> 00:51:17.760
<v Speaker 0>good idea actually, like you mentioned,

00:51:18.079 --> 00:51:21.440
<v Speaker 0>maybe using like a single node KCS cluster

00:51:21.440 --> 00:51:23.775
<v Speaker 0>running a captain there as a control plane

00:51:23.775 --> 00:51:26.255
<v Speaker 0>and speaking to other you know federated clusters

00:51:26.255 --> 00:51:27.695
<v Speaker 0>in some fashion. That would probably be a

00:51:27.695 --> 00:51:29.215
<v Speaker 0>really good pattern I think for this kind

00:51:29.215 --> 00:51:29.855
<v Speaker 0>of thing.

00:51:30.974 --> 00:51:34.575
<v Speaker 1>This is what we've seen with captain users

00:51:34.575 --> 00:51:37.215
<v Speaker 1>also having this the quarter gates

00:51:37.619 --> 00:51:38.339
<v Speaker 1>with

00:51:39.380 --> 00:51:41.300
<v Speaker 1>more monolithic applications.

00:51:41.619 --> 00:51:43.859
<v Speaker 1>So they are, they just want to do

00:51:43.859 --> 00:51:46.339
<v Speaker 1>quality gate check every now and then

00:51:46.900 --> 00:51:48.020
<v Speaker 1>or regularly.

00:51:48.099 --> 00:51:50.579
<v Speaker 1>And they are not running yet on Kubernetes.

00:51:50.579 --> 00:51:52.420
<v Speaker 1>So they just want to do this with

00:51:53.765 --> 00:51:54.565
<v Speaker 1>in a

00:51:55.925 --> 00:51:59.045
<v Speaker 1>install Keptn on a VM with k3s

00:51:59.045 --> 00:52:01.205
<v Speaker 1>and then trigger a Keptn via the API

00:52:01.205 --> 00:52:02.565
<v Speaker 1>or via the CLI.

00:52:02.965 --> 00:52:05.285
<v Speaker 1>No need to go full Kubernetes if you

00:52:05.285 --> 00:52:06.485
<v Speaker 1>are not yet ready

00:52:07.200 --> 00:52:09.840
<v Speaker 1>and you don't have to re architecture your

00:52:10.240 --> 00:52:12.560
<v Speaker 1>application if you just want to use parts

00:52:12.560 --> 00:52:14.320
<v Speaker 1>of Keptn like the Quality Gates.

00:52:15.760 --> 00:52:18.640
<v Speaker 1>You have to have some kind of monitoring

00:52:18.640 --> 00:52:20.000
<v Speaker 1>because you need some data

00:52:20.585 --> 00:52:22.665
<v Speaker 1>for the Quality Gates to evaluate

00:52:22.904 --> 00:52:23.625
<v Speaker 1>but

00:52:23.704 --> 00:52:24.825
<v Speaker 1>we don't actually

00:52:25.785 --> 00:52:27.545
<v Speaker 1>there are no restrictions where the data can

00:52:27.545 --> 00:52:29.305
<v Speaker 1>come from. Right now we have integrations with

00:52:29.305 --> 00:52:30.345
<v Speaker 1>a couple of tools.

00:52:30.825 --> 00:52:33.545
<v Speaker 1>It's open source so everyone

00:52:32.600 --> 00:52:35.160
<v Speaker 1>is is more than welcome to provide more

00:52:35.160 --> 00:52:36.680
<v Speaker 1>integrations with more tools.

00:52:37.480 --> 00:52:38.280
<v Speaker 0>Excellent.

00:52:39.800 --> 00:52:42.200
<v Speaker 0>So we're sitting around eight minutes. I'm expecting

00:52:42.200 --> 00:52:43.240
<v Speaker 0>us to fail

00:52:44.440 --> 00:52:45.960
<v Speaker 0>any second now.

00:52:47.080 --> 00:52:49.800
<v Speaker 0>Our staging is

00:52:48.975 --> 00:52:49.615
<v Speaker 0>red.

00:52:52.575 --> 00:52:54.735
<v Speaker 0>And this is this just takes longer because

00:52:54.735 --> 00:52:55.535
<v Speaker 0>of that

00:52:57.135 --> 00:53:00.575
<v Speaker 0>arbitrary injected latency which affects the 5,000

00:53:00.575 --> 00:53:01.215
<v Speaker 0>test runs.

00:53:04.710 --> 00:53:05.350
<v Speaker 1>Exactly.

00:53:07.830 --> 00:53:10.470
<v Speaker 0>So we're gonna be moving So the next

00:53:10.470 --> 00:53:13.430
<v Speaker 1>part, yeah, we can actually deploy the regular

00:53:13.430 --> 00:53:16.150
<v Speaker 1>cards version. We can actually skip this part.

00:53:16.845 --> 00:53:18.445
<v Speaker 1>Why we can skip it is

00:53:18.685 --> 00:53:21.085
<v Speaker 1>if the Keptn quality gate is working correctly

00:53:21.085 --> 00:53:23.085
<v Speaker 1>and I'm pretty positive that it will,

00:53:23.325 --> 00:53:26.045
<v Speaker 1>then we will not move the broken version

00:53:26.045 --> 00:53:29.645
<v Speaker 1>into production. And for our final part of

00:53:30.205 --> 00:53:32.590
<v Speaker 1>the stream, we will do the self healing

00:53:32.590 --> 00:53:34.190
<v Speaker 1>part and we will take a look at

00:53:34.190 --> 00:53:34.990
<v Speaker 1>how,

00:53:35.070 --> 00:53:37.230
<v Speaker 1>actually I want to call it auto remediation.

00:53:37.310 --> 00:53:39.310
<v Speaker 1>It's not self healing in a way that

00:53:39.310 --> 00:53:41.550
<v Speaker 1>will fix your code but it will

00:53:41.710 --> 00:53:43.390
<v Speaker 1>remediate actual issue.

00:53:44.430 --> 00:53:45.470
<v Speaker 1>So it's,

00:53:46.704 --> 00:53:47.905
<v Speaker 1>in the next part,

00:53:48.545 --> 00:53:50.625
<v Speaker 1>we can use the version that's already running

00:53:50.625 --> 00:53:53.585
<v Speaker 1>in production, in our production namespace,

00:53:53.744 --> 00:53:54.305
<v Speaker 1>because

00:53:54.545 --> 00:53:57.105
<v Speaker 1>version number three and version number one, it's

00:53:57.105 --> 00:53:58.944
<v Speaker 1>actually the same version just with a different

00:53:58.944 --> 00:54:01.184
<v Speaker 1>background. There is no latency introduced. There is

00:54:01.184 --> 00:54:01.745
<v Speaker 1>no

00:54:02.600 --> 00:54:03.960
<v Speaker 1>nothing else introduced.

00:54:04.200 --> 00:54:05.400
<v Speaker 1>The only thing what it

00:54:07.000 --> 00:54:08.680
<v Speaker 1>what both versions can do

00:54:09.000 --> 00:54:11.480
<v Speaker 1>is first they have a feature flag implemented

00:54:11.480 --> 00:54:15.000
<v Speaker 1>with Unleash so we can change from outside.

00:54:15.000 --> 00:54:16.440
<v Speaker 1>We can change the configuration

00:54:16.775 --> 00:54:18.775
<v Speaker 1>and we can react on this

00:54:19.095 --> 00:54:21.895
<v Speaker 1>that Captain can reach out again to unleash

00:54:21.895 --> 00:54:23.735
<v Speaker 1>to the feature toggle framework and turn off

00:54:23.735 --> 00:54:25.975
<v Speaker 1>a feature flag that we turn on.

00:54:26.215 --> 00:54:28.215
<v Speaker 1>In this tutorial, we do it a little

00:54:28.215 --> 00:54:30.615
<v Speaker 1>bit differently. We will be just adding

00:54:31.420 --> 00:54:32.380
<v Speaker 1>a couple of

00:54:32.860 --> 00:54:35.420
<v Speaker 1>other items to our shopping cart that will

00:54:35.420 --> 00:54:36.220
<v Speaker 1>incur

00:54:37.420 --> 00:54:38.220
<v Speaker 1>the

00:54:38.940 --> 00:54:39.900
<v Speaker 1>decrease

00:54:39.980 --> 00:54:42.140
<v Speaker 1>of no, an increase of the response time

00:54:42.140 --> 00:54:44.460
<v Speaker 1>and we'll just initiate a scale up. So

00:54:44.460 --> 00:54:46.914
<v Speaker 1>you can do this with also with auto

00:54:46.914 --> 00:54:48.195
<v Speaker 1>scaling of of

00:54:49.555 --> 00:54:51.315
<v Speaker 1>but we are doing this with

00:54:51.555 --> 00:54:52.994
<v Speaker 1>with with Keptn

00:54:52.994 --> 00:54:55.555
<v Speaker 1>so that we also have all the configuration

00:54:55.635 --> 00:54:58.434
<v Speaker 1>of how many replicas are actually running. We

00:54:58.434 --> 00:54:59.875
<v Speaker 1>also have this versioned

00:54:59.875 --> 00:55:02.180
<v Speaker 1>and stored in our git repository. Repository. This

00:55:02.180 --> 00:55:04.020
<v Speaker 1>is one of the reasons.

00:55:05.780 --> 00:55:07.300
<v Speaker 1>Hopefully,

00:55:07.860 --> 00:55:10.100
<v Speaker 1>by now, the tests have already been finished.

00:55:10.100 --> 00:55:10.900
<v Speaker 1>I'm actually

00:55:11.460 --> 00:55:13.060
<v Speaker 1>not sure. Yep.

00:55:13.460 --> 00:55:15.540
<v Speaker 1>Looks good. So let's take a look at

00:55:15.105 --> 00:55:16.785
<v Speaker 1>the quality gate evaluation.

00:55:17.025 --> 00:55:19.105
<v Speaker 1>Yep. Okay. It says the

00:55:19.425 --> 00:55:22.305
<v Speaker 1>response time is way too high. It's more

00:55:22.305 --> 00:55:23.265
<v Speaker 1>than one second.

00:55:23.905 --> 00:55:26.225
<v Speaker 1>And so tests were running for eight minutes

00:55:26.225 --> 00:55:29.345
<v Speaker 1>and thirty eight seconds. Response time is failing.

00:55:30.279 --> 00:55:32.359
<v Speaker 1>We we don't have the error rate here

00:55:32.359 --> 00:55:33.000
<v Speaker 1>but

00:55:33.400 --> 00:55:35.160
<v Speaker 1>we I I did this

00:55:35.400 --> 00:55:37.319
<v Speaker 1>couple of test runs I did it before

00:55:37.319 --> 00:55:40.279
<v Speaker 1>and the error rate is always stable close

00:55:40.279 --> 00:55:42.039
<v Speaker 1>to zero. So it's not about errors. It's

00:55:42.039 --> 00:55:43.775
<v Speaker 1>really about the response time. We can also

00:55:43.775 --> 00:55:45.455
<v Speaker 1>see it's already rolled back to the previous

00:55:45.455 --> 00:55:48.415
<v Speaker 1>version. Yep. And if we go to

00:55:48.415 --> 00:55:49.215
<v Speaker 1>production,

00:55:49.215 --> 00:55:50.655
<v Speaker 1>we can take a look also in production.

00:55:50.655 --> 00:55:51.855
<v Speaker 1>It should still be

00:55:52.255 --> 00:55:54.255
<v Speaker 1>also version number one running, but it's the

00:55:54.255 --> 00:55:57.135
<v Speaker 1>version number one from previously, from from a

00:55:57.135 --> 00:56:00.859
<v Speaker 1>couple of minutes ago. Yep. Cool. It's healthy.

00:56:03.339 --> 00:56:05.099
<v Speaker 0>So the next step then is we're gonna

00:56:05.099 --> 00:56:06.619
<v Speaker 0>add our

00:56:06.779 --> 00:56:09.900
<v Speaker 0>new resource. And this time, we have a

00:56:10.299 --> 00:56:11.580
<v Speaker 0>self healing

00:56:11.740 --> 00:56:12.940
<v Speaker 0>SLI resource.

00:56:14.295 --> 00:56:16.055
<v Speaker 1>Yes. So this is just

00:56:17.255 --> 00:56:19.175
<v Speaker 1>as as I said, we can have different

00:56:19.175 --> 00:56:22.135
<v Speaker 1>ways how to retrieve our service level indicators

00:56:22.135 --> 00:56:24.375
<v Speaker 1>and this one is prepared for

00:56:24.535 --> 00:56:27.415
<v Speaker 1>to retrieve the the right

00:56:26.710 --> 00:56:28.950
<v Speaker 1>response times for the

00:56:30.070 --> 00:56:32.390
<v Speaker 1>for the self healing use case. So this

00:56:32.390 --> 00:56:33.430
<v Speaker 1>just is

00:56:33.670 --> 00:56:34.790
<v Speaker 1>you can have it

00:56:35.590 --> 00:56:38.470
<v Speaker 1>we're just overriding this actually or we are

00:56:38.470 --> 00:56:39.830
<v Speaker 1>adding this to our production

00:56:40.070 --> 00:56:40.870
<v Speaker 1>environment

00:56:41.705 --> 00:56:42.265
<v Speaker 1>Because

00:56:42.905 --> 00:56:45.465
<v Speaker 1>in our previous runs in production we never

00:56:45.465 --> 00:56:47.625
<v Speaker 1>did the quality check. We only did the

00:56:47.625 --> 00:56:48.985
<v Speaker 1>quality check-in staging

00:56:49.305 --> 00:56:51.065
<v Speaker 1>and then if the quality was good in

00:56:51.065 --> 00:56:53.305
<v Speaker 1>staging we moved it to production. In production

00:56:53.305 --> 00:56:55.785
<v Speaker 1>we are not executing any tests. As David

00:56:55.785 --> 00:56:58.030
<v Speaker 1>said we have our end users doing the

00:56:58.030 --> 00:57:00.030
<v Speaker 1>tests in production so we are not executing

00:57:00.030 --> 00:57:02.350
<v Speaker 1>more load or JMEDA tests in production.

00:57:03.869 --> 00:57:05.390
<v Speaker 1>What we also want to do is this

00:57:05.390 --> 00:57:08.349
<v Speaker 1>time we are adding an SLO file, so

00:57:08.349 --> 00:57:10.415
<v Speaker 1>a service level objective

00:57:10.494 --> 00:57:13.695
<v Speaker 1>in production that says if we execute a

00:57:13.695 --> 00:57:15.295
<v Speaker 1>quality gate in production

00:57:15.615 --> 00:57:18.655
<v Speaker 1>it has to satisfy this criteria

00:57:19.055 --> 00:57:19.855
<v Speaker 1>and

00:57:20.575 --> 00:57:22.575
<v Speaker 1>now that we want to also,

00:57:23.135 --> 00:57:25.460
<v Speaker 1>yeah we should see it here, It's actually

00:57:25.460 --> 00:57:26.420
<v Speaker 1>very similar.

00:57:28.020 --> 00:57:30.020
<v Speaker 1>We also see the SLO file here just

00:57:30.020 --> 00:57:31.540
<v Speaker 1>added sixteen seconds ago.

00:57:31.859 --> 00:57:33.619
<v Speaker 1>Very similar to the previous one.

00:57:34.099 --> 00:57:36.819
<v Speaker 1>And what we also want to do is

00:57:39.224 --> 00:57:42.425
<v Speaker 1>we want to do another Keptn Configure Monitoring

00:57:43.145 --> 00:57:45.865
<v Speaker 1>because now that we have SLOs and SLIs

00:57:45.865 --> 00:57:46.744
<v Speaker 1>in production,

00:57:47.464 --> 00:57:51.385
<v Speaker 1>we can also configure Prometheus to the

00:57:51.740 --> 00:57:53.340
<v Speaker 1>Prometheus

00:57:53.420 --> 00:57:54.700
<v Speaker 1>alert manager

00:57:54.700 --> 00:57:59.100
<v Speaker 1>to use production. So we actually create alerts

00:57:59.339 --> 00:58:01.420
<v Speaker 1>for our production environment.

00:58:02.299 --> 00:58:05.099
<v Speaker 1>Here it says Prometheus successfully configured. Rule created.

00:58:06.945 --> 00:58:07.505
<v Speaker 1>And

00:58:08.465 --> 00:58:09.985
<v Speaker 1>what is the next step? Now it's getting

00:58:09.985 --> 00:58:12.545
<v Speaker 1>blurry again. Oh, the remediation instructions.

00:58:12.545 --> 00:58:13.585
<v Speaker 0>Yes. So we're adding

00:58:14.545 --> 00:58:16.225
<v Speaker 0>let's should we take a look at that

00:58:16.225 --> 00:58:17.025
<v Speaker 0>file, I guess?

00:58:21.690 --> 00:58:23.210
<v Speaker 1>Yeah. We can take a look.

00:58:24.010 --> 00:58:25.050
<v Speaker 1>Remediation.

00:58:26.010 --> 00:58:26.890
<v Speaker 1>It's

00:58:27.450 --> 00:58:29.850
<v Speaker 1>basically a very simple instruction here.

00:58:31.255 --> 00:58:33.895
<v Speaker 1>It's the remediation file looks very much like

00:58:33.895 --> 00:58:35.415
<v Speaker 1>a custom resource definition.

00:58:35.734 --> 00:58:38.535
<v Speaker 1>It's not really a custom resource definition. It's

00:58:38.535 --> 00:58:39.975
<v Speaker 1>just a YAML.

00:58:40.215 --> 00:58:42.775
<v Speaker 1>It's a clear description for Keptn how to

00:58:42.775 --> 00:58:43.575
<v Speaker 1>do remediations.

00:58:44.970 --> 00:58:48.650
<v Speaker 1>And it has a list of problem types

00:58:48.730 --> 00:58:51.130
<v Speaker 1>and whenever this problem type is coming in

00:58:51.130 --> 00:58:52.490
<v Speaker 1>via CloudEvent,

00:58:52.650 --> 00:58:55.609
<v Speaker 1>Keptn will execute all these actions that are

00:58:55.609 --> 00:58:57.895
<v Speaker 1>counter actions for this problem type

00:58:58.135 --> 00:58:59.655
<v Speaker 1>and execute one,

00:59:00.535 --> 00:59:03.494
<v Speaker 1>evaluate the Quality Gate again, execute another.

00:59:03.895 --> 00:59:05.575
<v Speaker 1>In this case we have

00:59:06.214 --> 00:59:09.255
<v Speaker 1>the same actions for different types of problems.

00:59:09.255 --> 00:59:11.800
<v Speaker 1>The one is just called Response time degradation.

00:59:12.200 --> 00:59:13.160
<v Speaker 1>That would be

00:59:13.559 --> 00:59:16.760
<v Speaker 1>actually the problem type that's coming in from

00:59:16.760 --> 00:59:20.280
<v Speaker 1>a commercial monitoring solution called Dynatrace.

00:59:20.920 --> 00:59:21.400
<v Speaker 1>For

00:59:21.720 --> 00:59:23.640
<v Speaker 1>this tutorial we could use the same file.

00:59:23.975 --> 00:59:24.615
<v Speaker 1>The

00:59:24.855 --> 00:59:27.415
<v Speaker 1>problem type would be called response time degradation.

00:59:28.935 --> 00:59:30.135
<v Speaker 1>In Prometheus,

00:59:30.135 --> 00:59:32.535
<v Speaker 1>the problem type is called response time p90.

00:59:32.535 --> 00:59:34.455
<v Speaker 1>That's just how we set it up because

00:59:34.455 --> 00:59:35.735
<v Speaker 1>the Keptn integration

00:59:36.200 --> 00:59:37.400
<v Speaker 1>between Prometheus

00:59:37.400 --> 00:59:38.280
<v Speaker 1>and

00:59:38.840 --> 00:59:40.200
<v Speaker 1>and and Keptn,

00:59:41.160 --> 00:59:43.240
<v Speaker 1>it's using the SLO

00:59:43.400 --> 00:59:44.120
<v Speaker 1>or

00:59:44.760 --> 00:59:46.840
<v Speaker 1>yeah. It it it's using the the the

00:59:46.840 --> 00:59:47.720
<v Speaker 1>name of the

00:59:48.280 --> 00:59:49.080
<v Speaker 1>SLOs

00:59:49.555 --> 00:59:51.875
<v Speaker 1>for the problem type and it's kind of

00:59:51.875 --> 00:59:52.755
<v Speaker 1>inverting

00:59:52.915 --> 00:59:55.955
<v Speaker 1>the SLO and whenever the SLO is then

00:59:55.955 --> 00:59:56.835
<v Speaker 1>breached,

00:59:56.995 --> 00:59:57.635
<v Speaker 1>it will

00:59:57.875 --> 00:59:59.715
<v Speaker 1>kick off the alerting in the alert

00:59:59.955 --> 01:00:00.675
<v Speaker 1>manager.

01:00:00.995 --> 01:00:02.675
<v Speaker 1>And the action here is to scale,

01:00:03.150 --> 01:00:05.630
<v Speaker 1>scale up by a value of one. So

01:00:05.630 --> 01:00:07.230
<v Speaker 1>that's what we should see.

01:00:08.190 --> 01:00:09.869
<v Speaker 1>That means we should see a replica set

01:00:09.869 --> 01:00:11.869
<v Speaker 1>of two when everything's fine.

01:00:14.109 --> 01:00:16.430
<v Speaker 0>Now we want to generate some

01:00:16.785 --> 01:00:20.305
<v Speaker 0>load to cause that remediation step to be

01:00:20.305 --> 01:00:21.025
<v Speaker 0>executed.

01:00:22.065 --> 01:00:22.865
<v Speaker 1>Exactly.

01:00:23.265 --> 01:00:24.545
<v Speaker 1>So this version,

01:00:25.744 --> 01:00:28.625
<v Speaker 1>all three versions actually, they have some faulty

01:00:28.625 --> 01:00:29.505
<v Speaker 1>item

01:00:30.704 --> 01:00:32.210
<v Speaker 1>in it and

01:00:32.609 --> 01:00:34.530
<v Speaker 1>we can just add,

01:00:36.130 --> 01:00:38.530
<v Speaker 1>we will apply a load generator that will

01:00:38.530 --> 01:00:39.970
<v Speaker 1>add all those

01:00:40.450 --> 01:00:43.170
<v Speaker 1>faulty items into a shopping cart that will

01:00:43.490 --> 01:00:45.329
<v Speaker 1>slow it down quite drastically

01:00:45.435 --> 01:00:47.195
<v Speaker 1>And then we should be able to see

01:00:47.675 --> 01:00:50.715
<v Speaker 1>that in that the response time is degrading

01:00:50.715 --> 01:00:53.355
<v Speaker 1>and Keptn will kick off the the response

01:00:53.355 --> 01:00:54.155
<v Speaker 1>time of the

01:00:56.635 --> 01:00:58.475
<v Speaker 0>Okay. So right now we have one

01:00:59.355 --> 01:01:02.080
<v Speaker 0>one pod running for our cats d b,

01:01:02.080 --> 01:01:03.760
<v Speaker 0>our cars d b. So

01:01:04.240 --> 01:01:07.520
<v Speaker 0>if we apply this load generator, we should

01:01:07.520 --> 01:01:08.160
<v Speaker 0>see

01:01:08.960 --> 01:01:10.400
<v Speaker 0>that increase.

01:01:13.200 --> 01:01:13.760
<v Speaker 0>Yes. So

01:01:15.494 --> 01:01:16.615
<v Speaker 1>this will

01:01:16.615 --> 01:01:17.734
<v Speaker 1>take a while.

01:01:18.454 --> 01:01:20.694
<v Speaker 1>We can take a look in Prometheus how

01:01:20.694 --> 01:01:21.655
<v Speaker 1>this affects

01:01:23.095 --> 01:01:24.855
<v Speaker 1>our response time.

01:01:30.860 --> 01:01:32.460
<v Speaker 0>Does that have a special name, or is

01:01:32.460 --> 01:01:33.260
<v Speaker 0>it just

01:01:33.580 --> 01:01:36.140
<v Speaker 1>There there is one query that we provide

01:01:36.140 --> 01:01:37.740
<v Speaker 1>that you can just take, and it it

01:01:37.740 --> 01:01:39.740
<v Speaker 1>gives you the the the exact graph. Yeah.

01:01:39.740 --> 01:01:40.860
<v Speaker 1>This one. Oh, good. I thought I was

01:01:40.860 --> 01:01:43.665
<v Speaker 0>gonna have to remember PromQL there. Okay. Yeah.

01:01:43.665 --> 01:01:45.425
<v Speaker 1>It's always giving me a hard time.

01:01:47.505 --> 01:01:50.145
<v Speaker 0>Alright. So hopefully, we something. Yeah. Oh, look

01:01:50.145 --> 01:01:51.265
<v Speaker 0>at that. There we go. We have a

01:01:51.265 --> 01:01:53.185
<v Speaker 0>space. Okay. Yeah. It's already increasing.

01:01:53.985 --> 01:01:56.545
<v Speaker 0>Let's just jump down to five minutes. Yep.

01:01:58.110 --> 01:02:00.110
<v Speaker 0>One minute. Yep. There it goes.

01:02:01.230 --> 01:02:01.950
<v Speaker 0>So

01:02:02.670 --> 01:02:04.990
<v Speaker 0>yeah. Or is this gonna look similar to

01:02:04.990 --> 01:02:05.550
<v Speaker 0>that?

01:02:06.510 --> 01:02:08.430
<v Speaker 0>Yeah. We can watch the self healing in

01:02:08.430 --> 01:02:09.150
<v Speaker 0>action.

01:02:10.110 --> 01:02:12.590
<v Speaker 1>And we can take a look. We should

01:02:12.670 --> 01:02:15.525
<v Speaker 1>see already that there is an alerting rule

01:02:15.525 --> 01:02:17.845
<v Speaker 1>set up in the alert manager. So this

01:02:17.845 --> 01:02:20.005
<v Speaker 1>is what we can take a look at

01:02:20.005 --> 01:02:21.285
<v Speaker 1>also in Prometheus.

01:02:25.605 --> 01:02:26.325
<v Speaker 1>Yes.

01:02:27.285 --> 01:02:28.405
<v Speaker 1>And what

01:02:28.405 --> 01:02:30.470
<v Speaker 1>does it say here? Yeah, unfortunately,

01:02:31.349 --> 01:02:32.630
<v Speaker 1>in our demo

01:02:32.630 --> 01:02:34.230
<v Speaker 1>it says it has to

01:02:35.510 --> 01:02:38.630
<v Speaker 1>break this rule for ten minutes. So it's

01:02:39.109 --> 01:02:40.950
<v Speaker 1>only after ten minutes. It's

01:02:41.349 --> 01:02:44.165
<v Speaker 1>not great for these kind of demos. So

01:02:44.565 --> 01:02:47.685
<v Speaker 1>we actually have to decrease this time. Otherwise,

01:02:48.885 --> 01:02:50.885
<v Speaker 1>it's not really useful if we have to

01:02:50.885 --> 01:02:53.685
<v Speaker 1>wait ten minutes all the time for

01:02:55.605 --> 01:02:56.405
<v Speaker 1>to kick in.

01:02:57.210 --> 01:02:59.369
<v Speaker 1>But what will happen after ten minutes is

01:02:59.369 --> 01:03:00.010
<v Speaker 1>that

01:03:00.490 --> 01:03:03.930
<v Speaker 1>there will be an alert sent from Prometheus

01:03:03.930 --> 01:03:06.570
<v Speaker 1>to the Prometheus integration in Keptn, which will

01:03:06.570 --> 01:03:08.730
<v Speaker 1>translate this alert into a cloud event.

01:03:09.515 --> 01:03:11.835
<v Speaker 1>And this cloud event is then forwarded to

01:03:11.835 --> 01:03:12.715
<v Speaker 1>Keptn.

01:03:13.195 --> 01:03:16.075
<v Speaker 1>Keptn will forward it to the remediation service.

01:03:16.155 --> 01:03:17.435
<v Speaker 1>This is also a little bit the part

01:03:17.435 --> 01:03:20.235
<v Speaker 1>where we need Kubernetes because Keptn itself consists

01:03:20.235 --> 01:03:21.755
<v Speaker 1>of a couple of different services.

01:03:22.075 --> 01:03:24.235
<v Speaker 1>So it will forward it to the remediation

01:03:24.235 --> 01:03:24.635
<v Speaker 1>service.

01:03:25.210 --> 01:03:25.850
<v Speaker 1>And

01:03:26.010 --> 01:03:28.170
<v Speaker 1>we have different as you see in the

01:03:28.170 --> 01:03:29.050
<v Speaker 1>remediation

01:03:29.050 --> 01:03:30.090
<v Speaker 1>YAML,

01:03:30.490 --> 01:03:32.490
<v Speaker 1>there are different actions that you can define.

01:03:32.490 --> 01:03:34.490
<v Speaker 1>And one action is scaling. So there we

01:03:34.490 --> 01:03:35.770
<v Speaker 1>have a specific component

01:03:37.305 --> 01:03:38.905
<v Speaker 1>that can remediate

01:03:39.305 --> 01:03:42.505
<v Speaker 1>scaling issues or that can execute the scaling

01:03:42.505 --> 01:03:43.225
<v Speaker 1>action.

01:03:43.785 --> 01:03:46.425
<v Speaker 1>Yeah, exactly here. So the action is scaling.

01:03:46.665 --> 01:03:49.305
<v Speaker 1>And as we're also doing deployment with Helm,

01:03:49.305 --> 01:03:50.829
<v Speaker 1>we will also do the scaling with Helm.

01:03:50.829 --> 01:03:52.910
<v Speaker 1>We will rewrite the value of the replica

01:03:52.910 --> 01:03:55.150
<v Speaker 1>set in the Helm chart and then use

01:03:55.710 --> 01:03:57.150
<v Speaker 1>Helm again to

01:03:57.470 --> 01:03:58.510
<v Speaker 1>deploy this.

01:03:58.910 --> 01:04:00.510
<v Speaker 1>And we will also see it in

01:04:01.950 --> 01:04:04.349
<v Speaker 1>the git repository of Keptn that this value

01:04:04.349 --> 01:04:04.990
<v Speaker 1>will be changed.

01:04:05.805 --> 01:04:06.845
<v Speaker 1>So we will

01:04:07.405 --> 01:04:10.525
<v Speaker 1>scale this version or scale the replica set.

01:04:11.244 --> 01:04:14.045
<v Speaker 1>We also have other integrations, for example, for

01:04:14.685 --> 01:04:16.125
<v Speaker 1>the feature flags

01:04:16.685 --> 01:04:19.165
<v Speaker 1>that I mentioned earlier. So for the feature

01:04:19.165 --> 01:04:19.484
<v Speaker 1>flags,

01:04:20.380 --> 01:04:22.619
<v Speaker 1>we have the integration of Unleash which will

01:04:22.619 --> 01:04:25.820
<v Speaker 1>then use or which will retrieve the information

01:04:25.820 --> 01:04:26.780
<v Speaker 1>from Keptn,

01:04:27.020 --> 01:04:27.740
<v Speaker 1>will

01:04:27.820 --> 01:04:30.540
<v Speaker 1>translate this into an API call for Unleash

01:04:30.540 --> 01:04:32.780
<v Speaker 1>and would turn off or turn on a

01:04:32.780 --> 01:04:33.660
<v Speaker 1>feature flag.

01:04:34.619 --> 01:04:37.395
<v Speaker 1>Yes. So we have a couple of integrations

01:04:37.395 --> 01:04:37.875
<v Speaker 1>here.

01:04:38.675 --> 01:04:40.995
<v Speaker 1>One that we have the

01:04:41.475 --> 01:04:43.395
<v Speaker 1>does it say here the unleash?

01:04:43.555 --> 01:04:45.235
<v Speaker 0>I I don't see unleash. No. I don't

01:04:45.235 --> 01:04:46.435
<v Speaker 0>think it's listed on this page.

01:04:47.460 --> 01:04:48.580
<v Speaker 1>Oh, we missed it.

01:04:48.980 --> 01:04:50.340
<v Speaker 1>We have to add it here.

01:04:51.220 --> 01:04:53.460
<v Speaker 1>But we have, for example, the I just

01:04:53.460 --> 01:04:55.940
<v Speaker 1>saw it. Yeah. Keptn unleash.

01:04:58.260 --> 01:04:59.300
<v Speaker 1>Self healing.

01:05:00.020 --> 01:05:01.460
<v Speaker 1>This is for the previous release,

01:05:02.295 --> 01:05:04.135
<v Speaker 1>but we we can see that it's here

01:05:04.135 --> 01:05:04.935
<v Speaker 1>working.

01:05:04.935 --> 01:05:05.335
<v Speaker 1>We

01:05:06.295 --> 01:05:08.215
<v Speaker 1>can also see how how it works here.

01:05:09.175 --> 01:05:12.055
<v Speaker 1>There's actually also we did a webinar kind

01:05:12.055 --> 01:05:14.375
<v Speaker 1>of with the with our friends from Unleash

01:05:14.375 --> 01:05:15.095
<v Speaker 1>even. So

01:05:16.970 --> 01:05:18.970
<v Speaker 1>glad that they they have not bugged us

01:05:18.970 --> 01:05:21.609
<v Speaker 1>yet that we forgot to to to list

01:05:21.609 --> 01:05:24.010
<v Speaker 1>their integration. We we can see the remediation

01:05:24.010 --> 01:05:26.650
<v Speaker 0>objects here. So, you know, action is feature

01:05:26.650 --> 01:05:28.650
<v Speaker 0>toggle, and then the the value of the

01:05:28.650 --> 01:05:30.595
<v Speaker 0>toggles are turned on or off. So nice

01:05:30.595 --> 01:05:33.075
<v Speaker 0>and self explanatory, you know, pretty intuitive.

01:05:34.835 --> 01:05:35.475
<v Speaker 1>Yeah.

01:05:38.355 --> 01:05:40.595
<v Speaker 1>Yeah. So there there are different tools that

01:05:40.595 --> 01:05:41.235
<v Speaker 1>you can integrate.

01:05:43.200 --> 01:05:45.120
<v Speaker 1>Unleash is the one that's,

01:05:45.520 --> 01:05:47.280
<v Speaker 1>yeah, pretty pretty

01:05:48.000 --> 01:05:48.560
<v Speaker 1>good

01:05:49.040 --> 01:05:51.200
<v Speaker 1>and it's working great for

01:05:51.440 --> 01:05:53.680
<v Speaker 1>the feature flags. It's really a great framework.

01:05:53.680 --> 01:05:54.880
<v Speaker 1>It's also open source by the way.

01:05:56.015 --> 01:05:56.575
<v Speaker 1>And

01:05:57.695 --> 01:05:58.095
<v Speaker 1>the

01:05:58.495 --> 01:06:00.735
<v Speaker 1>because you you just had the integrations page

01:06:00.735 --> 01:06:01.455
<v Speaker 1>up here,

01:06:01.855 --> 01:06:03.615
<v Speaker 1>one of the last integrations that we did

01:06:03.615 --> 01:06:05.535
<v Speaker 1>was together with Litmus,

01:06:05.615 --> 01:06:07.695
<v Speaker 1>which is also one part that I really

01:06:07.695 --> 01:06:07.935
<v Speaker 1>like.

01:06:08.510 --> 01:06:11.950
<v Speaker 1>Litmus Chaos is a chaos engineering

01:06:12.510 --> 01:06:13.310
<v Speaker 1>engine

01:06:13.710 --> 01:06:15.150
<v Speaker 1>built on Kubernetes

01:06:15.390 --> 01:06:17.150
<v Speaker 1>and the cloud native technologies.

01:06:17.390 --> 01:06:18.910
<v Speaker 1>And the

01:06:19.150 --> 01:06:21.070
<v Speaker 1>really cool thing here is that

01:06:22.185 --> 01:06:22.985
<v Speaker 1>usually

01:06:23.385 --> 01:06:25.865
<v Speaker 1>when we talk about executing tests we talk

01:06:25.865 --> 01:06:29.145
<v Speaker 1>about functional tests or performance tests, load tests,

01:06:29.465 --> 01:06:31.865
<v Speaker 1>but what we built with Litmus or how

01:06:31.865 --> 01:06:34.345
<v Speaker 1>we combined Litmus is then whenever we enter

01:06:34.345 --> 01:06:36.510
<v Speaker 1>a testing stage in Keptn we don't want

01:06:36.510 --> 01:06:38.830
<v Speaker 1>to execute only performance and we don't want

01:06:38.830 --> 01:06:42.110
<v Speaker 1>to just trigger some and hit our services

01:06:42.110 --> 01:06:43.230
<v Speaker 1>with some load.

01:06:43.470 --> 01:06:45.470
<v Speaker 1>But we also want to introduce chaos to

01:06:45.470 --> 01:06:48.190
<v Speaker 1>our services because you might know that in

01:06:48.190 --> 01:06:48.590
<v Speaker 1>production

01:06:49.494 --> 01:06:52.455
<v Speaker 1>it's not always everything is not always sunny

01:06:52.455 --> 01:06:54.455
<v Speaker 1>weather in production, let's say like this. So

01:06:54.455 --> 01:06:56.935
<v Speaker 1>there might be some problems in production

01:06:57.095 --> 01:06:59.815
<v Speaker 1>and we can already simulate these problems in

01:07:00.215 --> 01:07:03.415
<v Speaker 1>shifting left and doing this in previous phases.

01:07:04.020 --> 01:07:04.740
<v Speaker 1>So

01:07:05.140 --> 01:07:08.340
<v Speaker 1>by introducing either a chaos stage in Keptn

01:07:08.340 --> 01:07:10.740
<v Speaker 1>or just doing it in a preproduction stage,

01:07:10.980 --> 01:07:13.540
<v Speaker 1>adding the Litmo service, you can execute

01:07:15.954 --> 01:07:19.315
<v Speaker 1>chaos for example removing a pod or introducing

01:07:19.315 --> 01:07:20.595
<v Speaker 1>network latency

01:07:21.795 --> 01:07:24.435
<v Speaker 1>while you also have some performance tests running.

01:07:24.595 --> 01:07:26.994
<v Speaker 1>And once both are finished you can use

01:07:26.994 --> 01:07:29.714
<v Speaker 1>Keptn quality gates again or Keptn will trigger

01:07:29.714 --> 01:07:33.310
<v Speaker 1>automatically the quality gates And then you evaluate

01:07:33.310 --> 01:07:35.390
<v Speaker 1>the quality of a service while it was

01:07:35.390 --> 01:07:37.790
<v Speaker 1>under heavy heavy load and while it was

01:07:37.790 --> 01:07:39.070
<v Speaker 1>under chaos

01:07:39.070 --> 01:07:39.790
<v Speaker 1>testing.

01:07:41.470 --> 01:07:44.184
<v Speaker 1>And with this, you can you can evaluate

01:07:44.184 --> 01:07:46.905
<v Speaker 1>what is actually the resilience of my of

01:07:46.905 --> 01:07:47.865
<v Speaker 1>my application.

01:07:48.744 --> 01:07:50.505
<v Speaker 1>We we just had in the in the

01:07:50.505 --> 01:07:51.705
<v Speaker 1>Keptn user group,

01:07:52.505 --> 01:07:55.865
<v Speaker 1>we had Adrian who is an SRE

01:07:55.865 --> 01:07:56.585
<v Speaker 1>at

01:07:58.369 --> 01:08:00.609
<v Speaker 1>the in building exactly this use case and

01:08:00.609 --> 01:08:03.730
<v Speaker 1>evaluating the resiliency by either having no chaos,

01:08:03.970 --> 01:08:06.130
<v Speaker 1>light chaos, or heavy chaos.

01:08:06.369 --> 01:08:06.849
<v Speaker 1>And they

01:08:09.650 --> 01:08:12.595
<v Speaker 1>requirement to the application is that no chaos

01:08:12.595 --> 01:08:14.435
<v Speaker 1>and light chaos

01:08:14.595 --> 01:08:17.155
<v Speaker 1>have to basically behave the same which I

01:08:17.155 --> 01:08:18.114
<v Speaker 1>think it's

01:08:18.274 --> 01:08:21.235
<v Speaker 1>pretty interesting that they say our application it

01:08:21.235 --> 01:08:23.475
<v Speaker 1>has to be resilient in a way that

01:08:23.715 --> 01:08:26.649
<v Speaker 1>introducing light chaos to application should not change

01:08:26.649 --> 01:08:28.250
<v Speaker 1>anything to our quality gates.

01:08:28.970 --> 01:08:30.970
<v Speaker 1>We have to be able to survive some

01:08:30.970 --> 01:08:34.010
<v Speaker 1>light chaos by just removing one part of

01:08:34.010 --> 01:08:36.490
<v Speaker 1>a replica set or by introducing network latency

01:08:36.490 --> 01:08:38.969
<v Speaker 1>of a couple of microseconds that has to

01:08:39.529 --> 01:08:40.170
<v Speaker 1>survive,

01:08:40.649 --> 01:08:41.609
<v Speaker 1>which is pretty interesting.

01:08:43.675 --> 01:08:46.075
<v Speaker 0>Yeah. I think litmus chaos is is one

01:08:46.075 --> 01:08:47.354
<v Speaker 0>of those things that I keep me into

01:08:47.354 --> 01:08:48.715
<v Speaker 0>play with and I haven't got around to

01:08:48.715 --> 01:08:50.555
<v Speaker 0>yet. But, you know, now that you've described

01:08:50.555 --> 01:08:52.635
<v Speaker 0>the concept of heavy chaos, I feel like

01:08:52.635 --> 01:08:53.835
<v Speaker 0>I'm gonna have to deploy that to all

01:08:53.835 --> 01:08:55.859
<v Speaker 0>of my environments now to see how things

01:08:56.340 --> 01:08:58.740
<v Speaker 0>to see how things weather that storm

01:08:58.900 --> 01:09:00.500
<v Speaker 0>and I love that you can integrate that

01:09:00.500 --> 01:09:02.500
<v Speaker 0>with Keptn as well to kind of build

01:09:02.500 --> 01:09:04.979
<v Speaker 0>in those remediations and stuff like that. So

01:09:04.979 --> 01:09:05.700
<v Speaker 0>it's cool.

01:09:06.500 --> 01:09:08.580
<v Speaker 0>So there's

01:09:08.580 --> 01:09:11.085
<v Speaker 0>quite a few integrations here then so I

01:09:11.085 --> 01:09:13.484
<v Speaker 0>mean that's cool. The Slack one, the ServiceNow,

01:09:13.484 --> 01:09:14.684
<v Speaker 0>we got notifications

01:09:14.684 --> 01:09:16.604
<v Speaker 0>of course is Dynatrace

01:09:17.005 --> 01:09:18.604
<v Speaker 0>as a whole tower. Lots of stuff for

01:09:18.604 --> 01:09:20.124
<v Speaker 0>people to experiment and

01:09:20.364 --> 01:09:22.684
<v Speaker 0>what's involved in writing an integration. See, I

01:09:22.684 --> 01:09:24.444
<v Speaker 0>think, oh, I actually I wanna build like

01:09:24.444 --> 01:09:28.090
<v Speaker 0>maybe Discord notifications or Twitter or whatever. Yeah.

01:09:28.090 --> 01:09:29.609
<v Speaker 0>Some of that. What's involved in writing one

01:09:29.609 --> 01:09:31.129
<v Speaker 0>of those integrations for Keptn?

01:09:32.969 --> 01:09:35.689
<v Speaker 1>We usually recommend to get started with the

01:09:35.689 --> 01:09:37.130
<v Speaker 1>the the Keptn

01:09:37.130 --> 01:09:38.090
<v Speaker 1>service template.

01:09:39.825 --> 01:09:42.625
<v Speaker 1>We call our integrations a service also. It's

01:09:42.625 --> 01:09:45.024
<v Speaker 1>a service to it's a Keptn service. And

01:09:45.024 --> 01:09:47.904
<v Speaker 1>we provide a service template in Go. We

01:09:47.904 --> 01:09:50.305
<v Speaker 1>might also provide it with other programming language.

01:09:50.305 --> 01:09:53.345
<v Speaker 1>But since Keptn Core is written in Go,

01:09:53.345 --> 01:09:56.440
<v Speaker 1>we also provided the first template in Go.

01:09:56.760 --> 01:09:59.240
<v Speaker 1>You can use this template and basically what

01:09:59.240 --> 01:10:00.680
<v Speaker 1>you have to do is there are a

01:10:00.680 --> 01:10:01.960
<v Speaker 1>couple of event handlers.

01:10:02.280 --> 01:10:04.120
<v Speaker 1>And you define in

01:10:04.680 --> 01:10:06.440
<v Speaker 1>the deployment file of

01:10:06.600 --> 01:10:08.280
<v Speaker 1>your service, you define

01:10:08.520 --> 01:10:11.415
<v Speaker 1>which events you're interested in. I explained in

01:10:11.415 --> 01:10:14.455
<v Speaker 1>the beginning, Keptn is event based and data

01:10:14.455 --> 01:10:16.054
<v Speaker 1>driven. So there are a couple of different

01:10:16.054 --> 01:10:17.735
<v Speaker 1>events like deployment

01:10:17.735 --> 01:10:20.934
<v Speaker 1>finished event, test start event, test finished event,

01:10:22.054 --> 01:10:25.270
<v Speaker 1>configuration changed event, remediation start event. So there

01:10:25.270 --> 01:10:26.949
<v Speaker 1>are a couple of events and whatever events

01:10:26.949 --> 01:10:28.789
<v Speaker 1>you're interested in because

01:10:29.750 --> 01:10:31.989
<v Speaker 1>on the example of the Litmus service, we

01:10:31.989 --> 01:10:35.110
<v Speaker 1>are interested in test start events because then

01:10:35.110 --> 01:10:36.070
<v Speaker 1>we want to start

01:10:36.645 --> 01:10:38.565
<v Speaker 1>tests and we will send a test finished

01:10:38.565 --> 01:10:40.725
<v Speaker 1>event so the captain knows chaos tests have

01:10:40.725 --> 01:10:41.445
<v Speaker 1>been finished.

01:10:42.005 --> 01:10:43.205
<v Speaker 1>If you are in

01:10:43.685 --> 01:10:46.165
<v Speaker 1>a deployment tool that you would react on

01:10:46.165 --> 01:10:46.724
<v Speaker 1>different

01:10:47.045 --> 01:10:50.325
<v Speaker 1>events. If you're like a Discord service

01:10:50.550 --> 01:10:52.310
<v Speaker 1>might want to listen to all the events

01:10:52.310 --> 01:10:55.830
<v Speaker 1>because it might just want to notify notifying

01:10:55.830 --> 01:10:58.230
<v Speaker 1>in on Discord about everything that's going on

01:10:58.230 --> 01:11:00.710
<v Speaker 1>similar to the captain's bridge, for example. So

01:11:00.710 --> 01:11:03.590
<v Speaker 1>you basically decide where you want to to

01:11:03.590 --> 01:11:05.385
<v Speaker 1>which events you want to subscribe.

01:11:05.625 --> 01:11:07.865
<v Speaker 1>And then you will go ahead and implement

01:11:07.865 --> 01:11:10.105
<v Speaker 1>in the different event handlers. You just implement

01:11:10.105 --> 01:11:10.905
<v Speaker 1>your logic.

01:11:11.385 --> 01:11:14.105
<v Speaker 1>And depending on the integration, you might want

01:11:14.105 --> 01:11:17.225
<v Speaker 1>to send an event back to Keptn or

01:11:17.225 --> 01:11:19.470
<v Speaker 1>you you don't want to. It just depends.

01:11:19.470 --> 01:11:21.710
<v Speaker 1>For a notification service, you usually don't send

01:11:21.710 --> 01:11:23.230
<v Speaker 1>an event back to Keptn

01:11:23.310 --> 01:11:23.949
<v Speaker 1>that

01:11:24.750 --> 01:11:27.550
<v Speaker 1>you sent the notification. It's not like, okay,

01:11:28.670 --> 01:11:31.310
<v Speaker 1>you did it, great. But for a test

01:11:30.765 --> 01:11:31.645
<v Speaker 1>integration,

01:11:31.645 --> 01:11:33.565
<v Speaker 1>it's important that you inform Keptn that tests

01:11:33.565 --> 01:11:36.285
<v Speaker 1>have been triggered and tests have been finished.

01:11:36.605 --> 01:11:37.085
<v Speaker 1>So,

01:11:37.645 --> 01:11:38.285
<v Speaker 1>and

01:11:38.605 --> 01:11:41.085
<v Speaker 1>we provide this, the whole template here.

01:11:41.725 --> 01:11:44.925
<v Speaker 1>It already has the all the event handlers,

01:11:44.925 --> 01:11:47.530
<v Speaker 1>which are just, it's basically just a stop

01:11:47.530 --> 01:11:50.730
<v Speaker 1>where you just write your your business logic.

01:11:51.290 --> 01:11:51.929
<v Speaker 1>And

01:11:52.969 --> 01:11:55.770
<v Speaker 1>most or the the first part where where

01:11:55.770 --> 01:11:58.570
<v Speaker 1>we ask the Keptn community to to provide

01:11:58.570 --> 01:12:00.570
<v Speaker 1>their integrations is the Keptn sandbox.

01:12:01.105 --> 01:12:04.545
<v Speaker 1>This is where we start developing new integrations.

01:12:04.705 --> 01:12:06.225
<v Speaker 1>We can already see

01:12:06.865 --> 01:12:08.465
<v Speaker 1>we can see the Monaco service. We can

01:12:08.465 --> 01:12:11.265
<v Speaker 1>see the local service. I just initiated

01:12:11.265 --> 01:12:11.905
<v Speaker 1>some

01:12:12.865 --> 01:12:15.745
<v Speaker 1>discussions in our Keptn Slack. It doesn't have

01:12:15.745 --> 01:12:18.330
<v Speaker 1>any resources right now here, but we found

01:12:18.330 --> 01:12:20.090
<v Speaker 1>a couple of folks that are interested in

01:12:20.090 --> 01:12:22.570
<v Speaker 1>working together on the locus service and we

01:12:22.570 --> 01:12:24.489
<v Speaker 1>will define what it has to do,

01:12:25.290 --> 01:12:26.809
<v Speaker 1>how we want it to behave.

01:12:26.969 --> 01:12:28.890
<v Speaker 1>I heard there are different ways to execute

01:12:28.890 --> 01:12:31.515
<v Speaker 1>locus tests. One is via the CLI, the

01:12:31.515 --> 01:12:32.874
<v Speaker 1>one is via the API.

01:12:33.515 --> 01:12:35.594
<v Speaker 1>So we would just kind of discuss how

01:12:35.594 --> 01:12:37.355
<v Speaker 1>we want to build it and

01:12:37.835 --> 01:12:40.554
<v Speaker 1>this is the first place to put it.

01:12:40.554 --> 01:12:42.235
<v Speaker 1>And once they are

01:12:43.275 --> 01:12:44.315
<v Speaker 1>used and tested,

01:12:44.989 --> 01:12:47.070
<v Speaker 1>then we can move it to Captain Contrip,

01:12:47.070 --> 01:12:48.830
<v Speaker 1>which is the place where also the Captain

01:12:48.830 --> 01:12:53.070
<v Speaker 1>Core community is more also more involved in

01:12:53.390 --> 01:12:55.070
<v Speaker 1>maintaining the integrations.

01:12:55.550 --> 01:12:56.510
<v Speaker 0>Yeah. I think

01:12:57.415 --> 01:12:59.735
<v Speaker 0>Alexa notification service. I've just had an idea

01:12:59.735 --> 01:13:01.895
<v Speaker 0>for like my next Friday hackathon project, which

01:13:01.895 --> 01:13:04.695
<v Speaker 0>is to have my feeling my feeling quality

01:13:04.695 --> 01:13:07.495
<v Speaker 0>gates turn the room color red, I think,

01:13:07.495 --> 01:13:09.335
<v Speaker 0>or maybe green on a pass. So I

01:13:09.335 --> 01:13:11.175
<v Speaker 0>know where my deployments have broken. So like

01:13:11.175 --> 01:13:13.060
<v Speaker 0>some sort of Philips Hue integration to change

01:13:13.060 --> 01:13:14.660
<v Speaker 0>my legs. I think that would be good

01:13:14.660 --> 01:13:15.220
<v Speaker 0>fun.

01:13:16.180 --> 01:13:17.860
<v Speaker 1>That would be cool. That would be so

01:13:17.860 --> 01:13:18.420
<v Speaker 1>cool.

01:13:18.740 --> 01:13:20.900
<v Speaker 1>Yeah. I would love to see them. Yeah.

01:13:20.900 --> 01:13:22.420
<v Speaker 0>I I would've worked on that for sure

01:13:22.420 --> 01:13:23.140
<v Speaker 0>definitely.

01:13:23.620 --> 01:13:26.114
<v Speaker 0>Alright. Let's see where we are with our

01:13:26.114 --> 01:13:28.114
<v Speaker 0>query here. I still have that in my

01:13:28.114 --> 01:13:29.474
<v Speaker 0>buffer. I do.

01:13:30.195 --> 01:13:32.274
<v Speaker 0>Let's graph that over ten minutes.

01:13:33.635 --> 01:13:35.235
<v Speaker 0>Okay. I do it my way.

01:13:35.554 --> 01:13:38.195
<v Speaker 0>Alright. We're almost there. I think we're just

01:13:39.560 --> 01:13:41.720
<v Speaker 0>we're approaching the ten minute So what we

01:13:41.720 --> 01:13:42.599
<v Speaker 0>should see

01:13:43.080 --> 01:13:44.679
<v Speaker 0>is if we

01:13:46.120 --> 01:13:46.920
<v Speaker 0>run

01:13:47.320 --> 01:13:48.679
<v Speaker 0>I'm in the wrong direction.

01:13:49.000 --> 01:13:50.760
<v Speaker 0>If I run get pods,

01:13:53.145 --> 01:13:55.625
<v Speaker 0>this should start to scale up. Oh, it

01:13:55.625 --> 01:13:57.385
<v Speaker 0>has. Oh, yeah. We've got two of them

01:13:57.385 --> 01:13:58.824
<v Speaker 0>now a minute ago. So

01:13:59.224 --> 01:14:00.664
<v Speaker 1>Oh, already did. Cool.

01:14:02.184 --> 01:14:04.985
<v Speaker 0>Yeah. So Nine nine seconds ago. Yeah.

01:14:06.950 --> 01:14:08.710
<v Speaker 0>So is there a visual way of that

01:14:08.710 --> 01:14:10.790
<v Speaker 0>in the bridge? Will I see this

01:14:12.470 --> 01:14:15.590
<v Speaker 0>anywhere? Okay. So it's also here in the

01:14:15.590 --> 01:14:16.710
<v Speaker 1>sequence screen.

01:14:17.110 --> 01:14:18.390
<v Speaker 1>So we can see that there is a

01:14:18.390 --> 01:14:21.270
<v Speaker 1>problem opened. We can see everything that was

01:14:21.270 --> 01:14:23.085
<v Speaker 1>going on. So it's actually a couple of

01:14:23.085 --> 01:14:25.965
<v Speaker 1>events that are sent through Keptn. It's first

01:14:25.965 --> 01:14:28.284
<v Speaker 1>a problem open event coming in, a remediation

01:14:28.284 --> 01:14:31.085
<v Speaker 1>triggered, the remediation status changed, an action has

01:14:31.085 --> 01:14:33.164
<v Speaker 1>been triggered, action has been started. So it's

01:14:33.164 --> 01:14:35.644
<v Speaker 1>a lot of things again where

01:14:35.370 --> 01:14:37.610
<v Speaker 1>subscribe to it. You can add your services

01:14:37.610 --> 01:14:39.370
<v Speaker 1>to where we can see which services are

01:14:39.370 --> 01:14:41.770
<v Speaker 1>responsible. For the actual action,

01:14:42.090 --> 01:14:44.650
<v Speaker 1>I explained earlier that the action itself, the

01:14:45.210 --> 01:14:47.930
<v Speaker 1>scaling action is done by the Helm service.

01:14:48.435 --> 01:14:50.915
<v Speaker 1>If you have your own scaling or if

01:14:50.915 --> 01:14:51.874
<v Speaker 1>you want to,

01:14:52.275 --> 01:14:54.195
<v Speaker 1>I don't know, increase the

01:14:55.155 --> 01:14:57.554
<v Speaker 1>brightness of your hue lights in your room,

01:14:57.554 --> 01:14:59.235
<v Speaker 1>whenever time there is a scaling you could

01:14:59.235 --> 01:15:01.395
<v Speaker 1>also listen to this scaling events in your

01:15:01.395 --> 01:15:01.875
<v Speaker 1>service.

01:15:02.830 --> 01:15:05.630
<v Speaker 1>And it says action started, action finished. So

01:15:05.630 --> 01:15:06.349
<v Speaker 1>already

01:15:06.590 --> 01:15:08.910
<v Speaker 1>we know that it already did the scaling

01:15:08.910 --> 01:15:11.710
<v Speaker 1>and in Kubernetes we already saw that there

01:15:11.710 --> 01:15:12.909
<v Speaker 1>are now two pods.

01:15:13.390 --> 01:15:15.949
<v Speaker 1>Excellent. If it's not yet

01:15:16.510 --> 01:15:17.469
<v Speaker 1>remediating

01:15:17.469 --> 01:15:20.965
<v Speaker 1>the response time that it will evaluate again

01:15:20.965 --> 01:15:23.605
<v Speaker 1>the Keptn quality gate and if it needs

01:15:23.605 --> 01:15:26.965
<v Speaker 1>another scale up to meet again the quality

01:15:26.965 --> 01:15:29.365
<v Speaker 1>gate of Keptn, it will do another scale

01:15:29.365 --> 01:15:31.765
<v Speaker 1>up. So it's just you

01:15:31.765 --> 01:15:33.125
<v Speaker 1>can start small

01:15:33.285 --> 01:15:36.140
<v Speaker 1>like let's say you don't have to scale

01:15:36.140 --> 01:15:39.420
<v Speaker 1>up by 100% but maybe just by 5%

01:15:39.820 --> 01:15:42.780
<v Speaker 1>and then if it's already meeting the SLOs

01:15:42.780 --> 01:15:45.099
<v Speaker 1>again, it's fine. If not, then it will

01:15:45.739 --> 01:15:46.780
<v Speaker 1>execute it

01:15:47.500 --> 01:15:48.460
<v Speaker 1>another time

01:15:49.005 --> 01:15:51.005
<v Speaker 1>or you can execute another action. So you

01:15:51.005 --> 01:15:53.245
<v Speaker 1>can as I've shown in the in the

01:15:53.245 --> 01:15:55.965
<v Speaker 1>slides, you can mix and match the the

01:15:55.965 --> 01:15:57.325
<v Speaker 1>remediation actions.

01:15:57.725 --> 01:15:59.005
<v Speaker 0>Cool. Awesome.

01:16:00.205 --> 01:16:02.285
<v Speaker 0>So we've already seen this work.

01:16:03.510 --> 01:16:05.669
<v Speaker 0>We've seen it in the bridge

01:16:06.869 --> 01:16:07.510
<v Speaker 0>and

01:16:08.150 --> 01:16:09.909
<v Speaker 0>I guess if we leave that wrong long

01:16:09.909 --> 01:16:11.829
<v Speaker 0>enough, we'll see the response time

01:16:12.469 --> 01:16:13.510
<v Speaker 0>drop.

01:16:14.710 --> 01:16:16.389
<v Speaker 1>Yeah. And we should also see that the

01:16:16.389 --> 01:16:18.755
<v Speaker 1>the alert is will be

01:16:19.235 --> 01:16:21.395
<v Speaker 1>be closed again. So first the alert is

01:16:21.395 --> 01:16:23.875
<v Speaker 1>pending. They will be firing and then it

01:16:23.875 --> 01:16:26.435
<v Speaker 1>will be will be going away and go

01:16:26.435 --> 01:16:27.474
<v Speaker 1>back to green.

01:16:28.034 --> 01:16:29.795
<v Speaker 1>But it takes a while for us to

01:16:29.795 --> 01:16:30.914
<v Speaker 1>see everything. So

01:16:31.395 --> 01:16:33.155
<v Speaker 1>I think the the most important part here

01:16:33.155 --> 01:16:36.820
<v Speaker 1>was that we saw it how the remediation

01:16:36.820 --> 01:16:38.179
<v Speaker 1>is actually kicked off

01:16:38.579 --> 01:16:41.059
<v Speaker 1>and which files are included. Everything is again

01:16:41.059 --> 01:16:43.860
<v Speaker 1>based on the definition files, the declarative definition

01:16:43.860 --> 01:16:46.179
<v Speaker 1>files of Keptn based on the shipyard file.

01:16:46.335 --> 01:16:48.575
<v Speaker 1>SLO file is a very strong concept and

01:16:48.575 --> 01:16:50.655
<v Speaker 1>one of the most important files in Keptn

01:16:50.655 --> 01:16:52.574
<v Speaker 1>as it defines the quality gates.

01:16:52.975 --> 01:16:55.775
<v Speaker 1>SLI file defines how to query all the

01:16:55.775 --> 01:16:57.695
<v Speaker 1>data that's needed for the quality gates.

01:16:58.015 --> 01:17:01.560
<v Speaker 1>Remunation, the file defines which actions are kicked

01:17:01.560 --> 01:17:04.520
<v Speaker 1>off whenever there's some alerts coming in or

01:17:04.520 --> 01:17:06.280
<v Speaker 1>a problem coming into Keptn.

01:17:07.880 --> 01:17:08.599
<v Speaker 0>Excellent.

01:17:09.159 --> 01:17:09.800
<v Speaker 0>I

01:17:10.119 --> 01:17:11.960
<v Speaker 0>think we've covered an awful lot and I

01:17:11.960 --> 01:17:13.560
<v Speaker 0>think we've seen a lot of really valuable

01:17:13.560 --> 01:17:15.719
<v Speaker 0>use cases for what Keptn can offer for,

01:17:15.719 --> 01:17:18.065
<v Speaker 0>you know, Kubernetes this deployments. I think

01:17:18.465 --> 01:17:21.425
<v Speaker 0>you know, the the quality gates are just

01:17:21.585 --> 01:17:23.585
<v Speaker 0>so valuable for anyone who wants to ship

01:17:23.585 --> 01:17:26.305
<v Speaker 0>anything through multiple stages and then being able

01:17:26.305 --> 01:17:29.265
<v Speaker 0>to build your own event driven remediation loops.

01:17:29.265 --> 01:17:31.530
<v Speaker 0>Think it's just wildly cool as well. I'm

01:17:31.530 --> 01:17:33.530
<v Speaker 0>assuming any integration that I want to build

01:17:33.530 --> 01:17:35.770
<v Speaker 0>or access to all of those events embedded

01:17:35.770 --> 01:17:37.610
<v Speaker 0>by any other plug in within the captain

01:17:37.610 --> 01:17:39.289
<v Speaker 0>system. Is that right? So I

01:17:40.329 --> 01:17:42.329
<v Speaker 0>just say, hey, I want to listen for

01:17:42.329 --> 01:17:43.690
<v Speaker 0>this and I want to start all I

01:17:43.690 --> 01:17:45.555
<v Speaker 0>mean it was other stuff on top of

01:17:45.555 --> 01:17:47.155
<v Speaker 0>it. I think just the power and that

01:17:47.155 --> 01:17:50.034
<v Speaker 0>event driven kind of loop

01:17:50.035 --> 01:17:52.355
<v Speaker 0>opens up so many different possibilities for the

01:17:52.355 --> 01:17:54.515
<v Speaker 0>way that we deploy our applications to Kubernetes.

01:17:54.515 --> 01:17:56.355
<v Speaker 0>So very very cool. I'm very excited about

01:17:56.355 --> 01:17:56.595
<v Speaker 0>that.

01:17:58.510 --> 01:18:00.110
<v Speaker 0>Is there anything else? Yeah. It's it's really

01:18:00.110 --> 01:18:02.750
<v Speaker 1>exciting. Sorry. On your go. We are yep.

01:18:02.750 --> 01:18:04.829
<v Speaker 1>I I can just oh, sorry.

01:18:06.830 --> 01:18:07.949
<v Speaker 1>Okay. So

01:18:08.510 --> 01:18:11.150
<v Speaker 1>we are really excited also to share

01:18:11.695 --> 01:18:15.295
<v Speaker 1>soon our next iteration of the shipyard files.

01:18:15.295 --> 01:18:16.815
<v Speaker 1>The file that we saw or maybe if

01:18:16.815 --> 01:18:18.175
<v Speaker 1>you could scroll up here on this screen

01:18:18.175 --> 01:18:20.335
<v Speaker 1>a little bit on the first part I

01:18:20.335 --> 01:18:21.855
<v Speaker 1>think we saw the shipyard file.

01:18:22.095 --> 01:18:22.975
<v Speaker 1>And yes,

01:18:23.215 --> 01:18:24.655
<v Speaker 1>so this was the file that we are

01:18:24.655 --> 01:18:25.295
<v Speaker 1>also using

01:18:25.929 --> 01:18:28.169
<v Speaker 1>in the demo or in the tutorial.

01:18:28.409 --> 01:18:30.090
<v Speaker 1>If you want to walk through the tutorial,

01:18:30.090 --> 01:18:32.329
<v Speaker 1>it's tutorials. Captain. Sh.

01:18:32.650 --> 01:18:34.010
<v Speaker 1>But we got

01:18:34.889 --> 01:18:37.449
<v Speaker 1>some requests from the Keptn community and we

01:18:37.449 --> 01:18:38.809
<v Speaker 1>are in the next iteration

01:18:41.025 --> 01:18:42.145
<v Speaker 1>are we're doing an

01:18:42.625 --> 01:18:43.505
<v Speaker 1>yeah. A

01:18:44.225 --> 01:18:46.705
<v Speaker 1>new iteration and an improved version of the

01:18:46.705 --> 01:18:47.745
<v Speaker 1>shipyard file.

01:18:47.905 --> 01:18:50.305
<v Speaker 1>And we already have the Keptn zero dot

01:18:50.305 --> 01:18:51.825
<v Speaker 1>eight alpha out there

01:18:52.225 --> 01:18:54.880
<v Speaker 1>and I'm pretty sure that we we can

01:18:54.880 --> 01:18:56.080
<v Speaker 1>deliver the

01:18:56.320 --> 01:18:58.320
<v Speaker 1>stable and final release of 0.8

01:18:58.320 --> 01:19:01.440
<v Speaker 1>pretty soon and it will be even more

01:19:02.320 --> 01:19:04.880
<v Speaker 1>mature and there will be more use cases

01:19:04.880 --> 01:19:07.920
<v Speaker 1>possible. Also they have parallel stages to have

01:19:07.920 --> 01:19:09.715
<v Speaker 1>multi cluster support. So there's a lot of

01:19:09.715 --> 01:19:10.275
<v Speaker 1>things

01:19:11.395 --> 01:19:12.195
<v Speaker 1>to come.

01:19:12.835 --> 01:19:14.275
<v Speaker 1>Also by the end of this week hopefully

01:19:14.275 --> 01:19:15.875
<v Speaker 1>we will be releasing a new version of

01:19:15.875 --> 01:19:17.075
<v Speaker 1>the Keptn website.

01:19:17.715 --> 01:19:20.115
<v Speaker 1>So it's a we are in exciting times

01:19:20.115 --> 01:19:22.750
<v Speaker 1>with this project. And if you can think

01:19:22.750 --> 01:19:24.590
<v Speaker 1>of any integrations that you want to see

01:19:24.590 --> 01:19:26.190
<v Speaker 1>or you want to start,

01:19:27.150 --> 01:19:30.430
<v Speaker 1>please also reach out to us on slack.captain.sh

01:19:30.430 --> 01:19:32.750
<v Speaker 1>because we are happy to provide you the

01:19:32.750 --> 01:19:34.030
<v Speaker 1>git repository

01:19:34.270 --> 01:19:36.594
<v Speaker 1>in the Keptn sandbox so it's kind of

01:19:36.594 --> 01:19:39.315
<v Speaker 1>the place where your integration is also visible

01:19:39.315 --> 01:19:40.994
<v Speaker 1>and you can provide it to the Keptn

01:19:40.994 --> 01:19:41.635
<v Speaker 1>community.

01:19:42.034 --> 01:19:43.635
<v Speaker 1>If you want to start on your own

01:19:43.635 --> 01:19:46.034
<v Speaker 1>repo, we can always merge it later.

01:19:46.355 --> 01:19:47.954
<v Speaker 1>But we're

01:19:47.954 --> 01:19:50.274
<v Speaker 1>always happy to see new integrations also in

01:19:50.755 --> 01:19:51.474
<v Speaker 1>this organization

01:19:52.040 --> 01:19:54.199
<v Speaker 1>so that it can be shared by everyone.

01:19:55.080 --> 01:19:55.800
<v Speaker 0>Awesome.

01:19:55.960 --> 01:19:59.079
<v Speaker 0>So yeah, everyone join the the Keptn Slack.

01:19:59.160 --> 01:20:01.160
<v Speaker 0>Start writing your own integrations. I'm gonna start

01:20:01.160 --> 01:20:02.920
<v Speaker 0>my Q1 very, very soon.

01:20:03.160 --> 01:20:03.960
<v Speaker 0>Is there

01:20:04.200 --> 01:20:05.880
<v Speaker 0>a weekly Is the Slack the best way

01:20:05.880 --> 01:20:07.725
<v Speaker 0>to get engaged with the community? Do you

01:20:07.725 --> 01:20:09.565
<v Speaker 0>have weekly calls, office hours, anything like that

01:20:09.565 --> 01:20:11.245
<v Speaker 0>that people can also get help with if

01:20:11.245 --> 01:20:12.605
<v Speaker 0>they do want to start making their own

01:20:12.605 --> 01:20:13.325
<v Speaker 0>integrations?

01:20:14.445 --> 01:20:15.485
<v Speaker 1>Yes.

01:20:15.725 --> 01:20:17.165
<v Speaker 1>So we have the Slack

01:20:17.725 --> 01:20:20.410
<v Speaker 1>where we are, where the Keptn Core team

01:20:20.410 --> 01:20:23.050
<v Speaker 1>and the Keptn community is online every day.

01:20:23.610 --> 01:20:27.370
<v Speaker 1>Then we have the Keptn developer calls every

01:20:27.370 --> 01:20:28.170
<v Speaker 1>Thursday

01:20:28.970 --> 01:20:29.690
<v Speaker 1>on

01:20:30.650 --> 01:20:31.610
<v Speaker 1>5PM

01:20:31.610 --> 01:20:32.810
<v Speaker 1>Central European Time.

01:20:33.855 --> 01:20:35.775
<v Speaker 1>So the next one is tomorrow.

01:20:36.335 --> 01:20:38.175
<v Speaker 1>Then we have also the Captain User Groups.

01:20:38.175 --> 01:20:39.695
<v Speaker 1>We run this monthly

01:20:39.695 --> 01:20:42.255
<v Speaker 1>and these are more sharing use cases

01:20:42.575 --> 01:20:44.735
<v Speaker 1>as I briefly described.

01:20:45.295 --> 01:20:48.975
<v Speaker 1>Had last time we had Adrian

01:20:48.790 --> 01:20:51.990
<v Speaker 1>from Keptn sharing his story around Litmus testing

01:20:51.990 --> 01:20:55.190
<v Speaker 1>and the chaos testing. We also had Sumit

01:20:55.190 --> 01:20:57.750
<v Speaker 1>from Intuit sharing already his story on integrating

01:20:57.750 --> 01:21:01.030
<v Speaker 1>different performance tests and then Keptn evaluations.

01:21:01.495 --> 01:21:05.015
<v Speaker 1>So we have different formats but for like

01:21:05.015 --> 01:21:06.054
<v Speaker 1>fast

01:21:07.015 --> 01:21:09.655
<v Speaker 1>response times around development,

01:21:09.975 --> 01:21:11.895
<v Speaker 1>I think best is to join the Keptn

01:21:11.895 --> 01:21:13.735
<v Speaker 1>Slack and also joining us on the Keptn

01:21:13.735 --> 01:21:15.015
<v Speaker 1>developer calls every Thursday.

01:21:15.920 --> 01:21:16.639
<v Speaker 0>Awesome.

01:21:17.360 --> 01:21:20.639
<v Speaker 0>Alright. Well, everyone should install Keptn, improve their

01:21:20.639 --> 01:21:23.199
<v Speaker 0>continuous delivery, take advantage of quality gates and

01:21:23.199 --> 01:21:25.439
<v Speaker 0>remediation and build your own integrations.

01:21:25.599 --> 01:21:27.440
<v Speaker 0>Join the Slack and join the developer calls.

01:21:27.440 --> 01:21:29.520
<v Speaker 0>Jorgen, thank you. That was really great to

01:21:29.520 --> 01:21:30.880
<v Speaker 0>see that from start to finish. I'm so

01:21:30.880 --> 01:21:32.855
<v Speaker 0>glad we came back for part two I

01:21:32.855 --> 01:21:34.535
<v Speaker 0>Thank you. Even though I broke it I'm

01:21:34.535 --> 01:21:36.455
<v Speaker 0>glad we got through there we've everything working

01:21:36.455 --> 01:21:38.215
<v Speaker 0>I'm really happy with that so

01:21:38.935 --> 01:21:40.535
<v Speaker 0>have a great day thank you again for

01:21:40.535 --> 01:21:41.895
<v Speaker 0>joining me and I hopefully speak to you

01:21:41.895 --> 01:21:42.934
<v Speaker 0>again soon.

01:21:43.735 --> 01:21:45.335
<v Speaker 1>Thank you David, have fun. Thanks.

01:21:46.350 --> 01:21:46.909
<v Speaker 1>Bye.
