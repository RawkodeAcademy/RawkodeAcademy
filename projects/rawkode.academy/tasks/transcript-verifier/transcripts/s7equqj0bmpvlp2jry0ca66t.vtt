WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: f8df2344-0b11-4542-9ba1-d3be8e46ea98
Created: 2025-04-29T15:55:18.287Z
Duration: 377.44687
Channels: 1

00:00:00.240 --> 00:00:02.399
<v Speaker 0>Team eyes of Valiant, best of luck.

00:00:03.040 --> 00:00:03.999
<v Speaker 0>Take it away.

00:00:05.600 --> 00:00:06.480
<v Speaker 1>Alright.

00:00:07.520 --> 00:00:08.960
<v Speaker 1>So let's look around this thing and see

00:00:08.960 --> 00:00:09.440
<v Speaker 1>what we got.

00:00:14.015 --> 00:00:14.735
<v Speaker 2>Yay.

00:00:15.935 --> 00:00:20.095
<v Speaker 1>No problem. Got some permissions. Something's not running.

00:00:26.335 --> 00:00:26.575
<v Speaker 1>Two two.

00:00:29.670 --> 00:00:31.029
<v Speaker 3>Okay. So

00:00:31.510 --> 00:00:34.629
<v Speaker 3>so in it container is not ready.

00:00:35.670 --> 00:00:37.510
<v Speaker 0>Unless in it container has a very important

00:00:37.510 --> 00:00:39.750
<v Speaker 0>name of probe do not delete.

00:00:39.989 --> 00:00:42.390
<v Speaker 0>So that special version of cluster to just

00:00:42.390 --> 00:00:44.605
<v Speaker 0>for team as a villain must be able

00:00:44.605 --> 00:00:46.125
<v Speaker 0>to reach Google before

00:00:46.524 --> 00:00:48.524
<v Speaker 0>they can start the clustered application.

00:00:48.925 --> 00:00:51.164
<v Speaker 2>Given that we are a network things, you

00:00:51.164 --> 00:00:53.245
<v Speaker 2>know, plug in, maybe there is a networking

00:00:53.245 --> 00:00:54.765
<v Speaker 2>problem here we need to look at.

00:00:56.420 --> 00:00:59.300
<v Speaker 2>That looks good. This is nice. Yeah. Everything's

00:00:59.300 --> 00:00:59.859
<v Speaker 2>running.

00:01:00.339 --> 00:01:02.180
<v Speaker 1>Yeah. It told us that And have a

00:01:02.180 --> 00:01:03.059
<v Speaker 2>Hubble UI.

00:01:03.379 --> 00:01:05.459
<v Speaker 2>We have a a UI running. So and

00:01:05.459 --> 00:01:07.060
<v Speaker 2>we have Hubble running, so we can use

00:01:07.060 --> 00:01:07.860
<v Speaker 2>Hubble. Mhmm.

00:01:08.420 --> 00:01:09.140
<v Speaker 1>Yep. Okay.

00:01:10.095 --> 00:01:12.815
<v Speaker 3>But if we rewind a bit, so we

00:01:12.815 --> 00:01:15.215
<v Speaker 3>had this init container, and it was not

00:01:15.215 --> 00:01:17.935
<v Speaker 3>in red state. And I believe it was

00:01:17.935 --> 00:01:19.215
<v Speaker 3>doing ping

00:01:19.215 --> 00:01:20.415
<v Speaker 3>google.com.

00:01:20.815 --> 00:01:21.695
<v Speaker 3>Correct. I'm wondering.

00:01:23.200 --> 00:01:26.160
<v Speaker 3>It should use the host resolver.

00:01:26.160 --> 00:01:28.480
<v Speaker 3>So even if the core DNS was not

00:01:28.480 --> 00:01:30.720
<v Speaker 3>functioning, like, if it was not able to

00:01:30.480 --> 00:01:33.760
<v Speaker 1>be Philip, p. Philip So I see here

00:01:33.760 --> 00:01:36.000
<v Speaker 4>we've got the rule that allows

00:01:37.385 --> 00:01:39.945
<v Speaker 4>anything to reach Kube DNS.

00:01:40.185 --> 00:01:42.025
<v Speaker 4>It also has a rule to allow

00:01:42.425 --> 00:01:44.425
<v Speaker 3>to star.google.com.

00:01:44.425 --> 00:01:46.905
<v Speaker 3>So that should that FQDN lookup should be

00:01:46.905 --> 00:01:47.545
<v Speaker 3>allowed.

00:01:48.185 --> 00:01:50.185
<v Speaker 1>Your idea is that the init container is

00:01:50.185 --> 00:01:53.560
<v Speaker 1>gonna use the host's DNS services.

00:01:54.680 --> 00:01:55.080
<v Speaker 1>Correct?

00:02:08.114 --> 00:02:10.194
<v Speaker 3>And there you go. That would not be

00:02:11.395 --> 00:02:13.474
<v Speaker 2>so how's our pod looking now?

00:02:19.170 --> 00:02:20.530
<v Speaker 2>Well, it's running now.

00:02:21.010 --> 00:02:22.530
<v Speaker 2>So is this where we're supposed to try

00:02:22.530 --> 00:02:23.410
<v Speaker 2>and upgrade it?

00:02:32.424 --> 00:02:34.504
<v Speaker 1>Just doing that. Just changing the tag w

00:02:34.504 --> 00:02:36.185
<v Speaker 1>two and hopes that that

00:02:37.465 --> 00:02:39.145
<v Speaker 1>one reasonable thing to do.

00:02:42.344 --> 00:02:43.385
<v Speaker 0>We have an error.

00:02:45.210 --> 00:02:47.050
<v Speaker 2>Failed to connect to database.

00:02:47.290 --> 00:02:50.330
<v Speaker 1>We definitely saw some policy drops between Postgres

00:02:50.330 --> 00:02:51.210
<v Speaker 1>and things.

00:02:51.850 --> 00:02:53.130
<v Speaker 1>Yeah. So let's take a look at that

00:02:53.130 --> 00:02:53.610
<v Speaker 1>policy.

00:03:03.915 --> 00:03:06.555
<v Speaker 2>There we go. Okay. There it is. It

00:03:06.555 --> 00:03:09.355
<v Speaker 2>is policy denied. Wait. What?

00:03:12.555 --> 00:03:13.435
<v Speaker 4>Cluster talking to a

00:03:14.280 --> 00:03:17.560
<v Speaker 2>What what cycles do we service selector here.

00:03:18.760 --> 00:03:20.680
<v Speaker 4>It shouldn't redirect to those endpoints. It should

00:03:20.680 --> 00:03:23.000
<v Speaker 4>be re redirecting to a different endpoint. That

00:03:23.000 --> 00:03:23.800
<v Speaker 4>doesn't seem right.

00:03:29.325 --> 00:03:30.845
<v Speaker 3>Do we have Can we take a look

00:03:30.845 --> 00:03:31.805
<v Speaker 3>at the service

00:03:32.045 --> 00:03:33.965
<v Speaker 4>that this particular

00:03:34.045 --> 00:03:36.444
<v Speaker 4>thing is targeting? What service is it trying

00:03:36.444 --> 00:03:37.965
<v Speaker 4>to connect to? And let's look at the

00:03:37.965 --> 00:03:39.165
<v Speaker 4>service for

00:03:39.724 --> 00:03:41.485
<v Speaker 4>is that's the database, Postgres.

00:03:42.940 --> 00:03:43.660
<v Speaker 3>Could you

00:03:44.460 --> 00:03:46.620
<v Speaker 3>okay. I think okay.

00:03:46.860 --> 00:03:47.900
<v Speaker 3>Wait a minute.

00:03:49.500 --> 00:03:52.460
<v Speaker 2>Let's look at this. This looks Yeah.

00:03:52.940 --> 00:03:54.140
<v Speaker 2>Yeah. Big fan.

00:03:54.855 --> 00:03:56.695
<v Speaker 1>Big fuzzy hearts all over the place.

00:03:56.935 --> 00:03:58.375
<v Speaker 0>I actually don't think you would find that

00:03:58.375 --> 00:04:00.935
<v Speaker 0>one so quickly. So What we're seeing here

00:04:01.335 --> 00:04:03.255
<v Speaker 1>yeah. So what we're seeing is that when

00:04:03.415 --> 00:04:05.015
<v Speaker 1>and when we do the Hubble Observe, we're

00:04:05.015 --> 00:04:07.415
<v Speaker 1>noticing that the clustered application when trying to

00:04:07.415 --> 00:04:08.695
<v Speaker 1>communicate with the database

00:04:09.220 --> 00:04:11.380
<v Speaker 1>is, for some reason, going to the fluid

00:04:11.380 --> 00:04:12.340
<v Speaker 1>d pod.

00:04:13.780 --> 00:04:15.540
<v Speaker 1>And we're like, that's weird. Now there is

00:04:15.540 --> 00:04:17.940
<v Speaker 1>a function in Cilium that allows you to

00:04:17.940 --> 00:04:20.100
<v Speaker 1>do local redirect policies.

00:04:20.740 --> 00:04:22.500
<v Speaker 1>So if you were gonna do something like

00:04:23.095 --> 00:04:25.255
<v Speaker 1>you had, like, a node local DNS cache,

00:04:25.255 --> 00:04:26.615
<v Speaker 1>you know how you can use IP tables

00:04:26.615 --> 00:04:28.775
<v Speaker 1>to, like, intercept the DNS traffic and send

00:04:28.775 --> 00:04:31.095
<v Speaker 1>it to the node local piece. This is

00:04:31.095 --> 00:04:32.695
<v Speaker 1>a mechanism that can also be used for

00:04:32.695 --> 00:04:34.455
<v Speaker 1>that, but it's implemented in the EBPF

00:04:34.949 --> 00:04:37.510
<v Speaker 1>where where a policy might look like

00:04:38.630 --> 00:04:39.350
<v Speaker 1>this.

00:04:41.030 --> 00:04:43.190
<v Speaker 1>And that policy is basically saying

00:04:43.750 --> 00:04:44.630
<v Speaker 1>that

00:04:44.870 --> 00:04:47.995
<v Speaker 1>when traffic within this namespace happens when something

00:04:47.995 --> 00:04:50.315
<v Speaker 1>tries to reach the service postgres in the

00:04:50.315 --> 00:04:51.435
<v Speaker 1>default namespace

00:04:51.835 --> 00:04:54.315
<v Speaker 1>on port five four three two and it's

00:04:54.315 --> 00:04:55.515
<v Speaker 1>TCP traffic,

00:04:55.755 --> 00:04:58.075
<v Speaker 1>we're gonna redirect that traffic to a different

00:04:58.075 --> 00:05:00.740
<v Speaker 1>back end using a local a local endpoint

00:05:00.740 --> 00:05:03.300
<v Speaker 1>selector that matches labels app fluent d.

00:05:03.700 --> 00:05:05.940
<v Speaker 1>So, basically, in eBPF, we can be like,

00:05:05.940 --> 00:05:08.020
<v Speaker 1>don't send it to the postgres database instead

00:05:08.020 --> 00:05:09.860
<v Speaker 1>send it to this other thing that is

00:05:09.860 --> 00:05:11.475
<v Speaker 1>local inside of this name space.

00:05:12.354 --> 00:05:13.794
<v Speaker 2>Should we try the web page, see if

00:05:13.794 --> 00:05:15.875
<v Speaker 2>the see if the web page will refresh?

00:05:16.514 --> 00:05:17.555
<v Speaker 1>Which one more?

00:05:18.755 --> 00:05:19.555
<v Speaker 1>Boop.

00:05:20.675 --> 00:05:22.275
<v Speaker 1>Oh. My goodness. They're broken.

00:05:24.800 --> 00:05:26.240
<v Speaker 2>Oh, this is going to a.

00:05:27.120 --> 00:05:28.800
<v Speaker 2>Does

00:05:30.240 --> 00:05:32.160
<v Speaker 4>does the pod have a matching label?

00:05:32.720 --> 00:05:36.240
<v Speaker 1>Yeah. That's what looking. Looks That's fair Let's

00:05:36.240 --> 00:05:37.680
<v Speaker 1>take a look at the policy real quick.

00:05:40.085 --> 00:05:40.805
<v Speaker 1>Got

00:05:40.965 --> 00:05:42.005
<v Speaker 1>CMP

00:05:42.485 --> 00:05:43.525
<v Speaker 1>clustered.

00:05:43.525 --> 00:05:44.805
<v Speaker 1>That's what we got.

00:05:45.764 --> 00:05:46.805
<v Speaker 1>Reading this,

00:05:47.044 --> 00:05:48.245
<v Speaker 1>I'm looking for

00:05:49.285 --> 00:05:52.725
<v Speaker 1>app app postgres and app clusters. So if

00:05:52.725 --> 00:05:53.845
<v Speaker 1>I did kubectl.

00:05:54.470 --> 00:05:55.830
<v Speaker 2>Or you could just do get pods to

00:05:55.830 --> 00:05:58.229
<v Speaker 2>show labels and see what User actually. All

00:05:58.229 --> 00:05:59.910
<v Speaker 4>the labels. See what they actually did call

00:05:59.910 --> 00:06:01.910
<v Speaker 1>it. Oh. It's postgres q l. They got

00:06:01.910 --> 00:06:04.710
<v Speaker 1>all fancy. Yeah. You've guessed it before it

00:06:04.710 --> 00:06:05.669
<v Speaker 0>even happened. Well done.

00:06:06.361 --> 00:06:08.201
<v Speaker 1>Can we just rather check again?

00:06:12.841 --> 00:06:13.401
<v Speaker 0>Well done.
