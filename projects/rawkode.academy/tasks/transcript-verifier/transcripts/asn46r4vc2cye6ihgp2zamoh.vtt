WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: cd7e99bc-ccc7-4e4f-8087-ab1f31940931
Created: 2025-04-29T14:30:09.834Z
Duration: 451.7275
Channels: 1

00:00:00.160 --> 00:00:01.839
<v Speaker 0>In just a moment we're gonna take a

00:00:01.839 --> 00:00:05.040
<v Speaker 0>look at what's new in Fermion Spin 0.8.

00:00:05.279 --> 00:00:08.720
<v Speaker 0>From TLS for DB connections to JavaScript routing

00:00:08.720 --> 00:00:10.960
<v Speaker 0>and OCI registry support.

00:00:10.960 --> 00:00:11.759
<v Speaker 0>Let's dive in.

00:00:16.715 --> 00:00:18.795
<v Speaker 0>The first thing we're gonna take a look

00:00:18.795 --> 00:00:21.835
<v Speaker 0>at is the new JavaScript router.

00:00:22.395 --> 00:00:23.515
<v Speaker 0>What does this mean?

00:00:23.994 --> 00:00:27.675
<v Speaker 0>Well, typically architecting your Spin applications,

00:00:27.835 --> 00:00:30.395
<v Speaker 0>you add a single component for every path

00:00:30.210 --> 00:00:31.489
<v Speaker 0>in your application.

00:00:32.450 --> 00:00:34.050
<v Speaker 0>However, sometimes,

00:00:34.370 --> 00:00:37.410
<v Speaker 0>depending on the complexity of your applications,

00:00:37.649 --> 00:00:40.210
<v Speaker 0>you may want a single component that handles

00:00:40.210 --> 00:00:41.809
<v Speaker 0>one or more paths,

00:00:42.495 --> 00:00:43.695
<v Speaker 0>probably even

00:00:44.095 --> 00:00:46.175
<v Speaker 0>a collection of sub pass.

00:00:47.135 --> 00:00:49.295
<v Speaker 0>And to do that, the Spin Node JS

00:00:49.295 --> 00:00:52.015
<v Speaker 0>SDK provides you with the Eti router.

00:00:52.415 --> 00:00:53.455
<v Speaker 0>Let's take a look.

00:00:54.255 --> 00:00:56.415
<v Speaker 0>So the GS routing project here

00:00:57.010 --> 00:00:58.129
<v Speaker 0>was generated

00:00:58.210 --> 00:00:59.890
<v Speaker 0>using spin new.

00:01:00.129 --> 00:01:01.969
<v Speaker 0>I select an HTTP

00:01:01.969 --> 00:01:04.209
<v Speaker 0>TS for a TypeScript example.

00:01:05.170 --> 00:01:07.890
<v Speaker 0>I've literally copied and pasted all of this

00:01:07.890 --> 00:01:09.810
<v Speaker 0>code from the release blog,

00:01:10.495 --> 00:01:12.575
<v Speaker 0>which is available in the description and on

00:01:12.575 --> 00:01:14.015
<v Speaker 0>the screen now.

00:01:15.135 --> 00:01:17.215
<v Speaker 0>As you can see, we have the ability

00:01:17.775 --> 00:01:20.575
<v Speaker 0>to request a new return from the utils

00:01:20.575 --> 00:01:21.375
<v Speaker 0>package.

00:01:21.935 --> 00:01:23.935
<v Speaker 0>Now at first you may be wondering, hey,

00:01:23.935 --> 00:01:25.820
<v Speaker 0>where where is utils coming from? It's not

00:01:25.820 --> 00:01:26.619
<v Speaker 0>imported.

00:01:26.780 --> 00:01:29.659
<v Speaker 0>Well, don't worry about it. This is provided

00:01:29.659 --> 00:01:32.540
<v Speaker 0>as a global and the TypeScript definition fail.

00:01:32.939 --> 00:01:34.380
<v Speaker 0>So you can call it with ease.

00:01:34.780 --> 00:01:36.460
<v Speaker 0>From here, we can add

00:01:37.415 --> 00:01:39.494
<v Speaker 0>using the HTTP method that we want to

00:01:39.494 --> 00:01:40.135
<v Speaker 0>capture

00:01:40.295 --> 00:01:41.255
<v Speaker 0>new routes.

00:01:41.895 --> 00:01:44.695
<v Speaker 0>Here, we're adding a get route of slash,

00:01:45.015 --> 00:01:48.055
<v Speaker 0>and here, a get route of slash goodbye.

00:01:48.375 --> 00:01:50.615
<v Speaker 0>You can use any HTTP verb,

00:01:51.570 --> 00:01:52.850
<v Speaker 0>such as delete,

00:01:53.330 --> 00:01:55.490
<v Speaker 0>patch, post, put,

00:01:55.570 --> 00:01:56.370
<v Speaker 0>etcetera.

00:01:59.090 --> 00:02:00.930
<v Speaker 0>From in there, you're just writing

00:02:01.010 --> 00:02:03.010
<v Speaker 0>any standard spin

00:02:03.170 --> 00:02:04.049
<v Speaker 0>endpoint.

00:02:04.690 --> 00:02:06.450
<v Speaker 0>As you can see, we can risk around

00:02:06.450 --> 00:02:07.490
<v Speaker 0>a 200

00:02:07.865 --> 00:02:10.584
<v Speaker 0>and use the encoder to drop goodbye into

00:02:10.584 --> 00:02:11.305
<v Speaker 0>the buffer.

00:02:12.345 --> 00:02:15.065
<v Speaker 0>Whereas here we just say hello Spin is

00:02:15.065 --> 00:02:16.345
<v Speaker 0>handling this route.

00:02:16.905 --> 00:02:19.065
<v Speaker 0>To connect the dots we export a handle

00:02:19.065 --> 00:02:20.105
<v Speaker 0>request function

00:02:20.630 --> 00:02:23.430
<v Speaker 0>which just returns router handle request.

00:02:24.150 --> 00:02:25.510
<v Speaker 0>Nice and simple.

00:02:26.390 --> 00:02:28.710
<v Speaker 0>This gives you a bit more flexibility into

00:02:28.710 --> 00:02:31.590
<v Speaker 0>how you architect and compose your Spin components

00:02:31.590 --> 00:02:32.870
<v Speaker 0>and to Spin applications.

00:02:33.355 --> 00:02:37.515
<v Speaker 0>Next up, TLS support for outbound database connections.

00:02:38.555 --> 00:02:39.435
<v Speaker 0>Previously,

00:02:39.675 --> 00:02:42.635
<v Speaker 0>you could talk to any cloud style database

00:02:42.635 --> 00:02:44.715
<v Speaker 0>that exposed their API over TLS.

00:02:45.270 --> 00:02:47.350
<v Speaker 0>It's a free postgres service

00:02:47.510 --> 00:02:49.350
<v Speaker 0>built in a serverless fashion.

00:02:49.910 --> 00:02:52.470
<v Speaker 0>It's very easy with a very low friction

00:02:52.470 --> 00:02:53.990
<v Speaker 0>onboarding experience,

00:02:54.710 --> 00:02:56.870
<v Speaker 0>but I couldn't use it because I needed

00:02:56.870 --> 00:02:57.430
<v Speaker 0>TLS.

00:02:58.925 --> 00:03:01.885
<v Speaker 0>PlanetScale also offer free databases.

00:03:01.885 --> 00:03:02.765
<v Speaker 0>CockroachDB

00:03:02.765 --> 00:03:04.925
<v Speaker 0>also offer free databases.

00:03:05.004 --> 00:03:06.845
<v Speaker 0>We're in a wonderful world where if you

00:03:06.845 --> 00:03:08.845
<v Speaker 0>want to store data for free online and

00:03:08.845 --> 00:03:10.444
<v Speaker 0>not have to worry about backups,

00:03:10.444 --> 00:03:12.445
<v Speaker 0>policy, RBAC, etcetera,

00:03:12.845 --> 00:03:13.405
<v Speaker 0>it's there.

00:03:14.740 --> 00:03:16.420
<v Speaker 0>However, it was a challenge to use in

00:03:16.420 --> 00:03:17.060
<v Speaker 0>Spin.

00:03:18.260 --> 00:03:20.500
<v Speaker 0>Now, that's not a problem.

00:03:21.620 --> 00:03:24.020
<v Speaker 0>Using the Rust SDK for Spin,

00:03:24.500 --> 00:03:26.500
<v Speaker 0>I'm able to define a show.

00:03:27.565 --> 00:03:30.285
<v Speaker 0>I create a try from function to allow

00:03:30.285 --> 00:03:31.565
<v Speaker 0>me to coerce

00:03:33.965 --> 00:03:35.325
<v Speaker 0>a raw result

00:03:35.405 --> 00:03:37.165
<v Speaker 0>from the Postgres driver

00:03:37.245 --> 00:03:38.925
<v Speaker 0>into a show struct.

00:03:40.590 --> 00:03:42.670
<v Speaker 0>We can add a format column function to

00:03:42.670 --> 00:03:44.190
<v Speaker 0>make it easier to print the data to

00:03:44.190 --> 00:03:44.990
<v Speaker 0>the terminal.

00:03:45.390 --> 00:03:48.110
<v Speaker 0>And then we use the Postgres module

00:03:48.990 --> 00:03:50.510
<v Speaker 0>just like we could before.

00:03:51.150 --> 00:03:53.435
<v Speaker 0>In fact, nothing in this code is any

00:03:53.435 --> 00:03:55.675
<v Speaker 0>different from pre 0.8.

00:03:56.075 --> 00:03:57.355
<v Speaker 0>So let's see it working.

00:03:57.675 --> 00:03:59.035
<v Speaker 0>In my spin.toml,

00:03:59.035 --> 00:04:01.755
<v Speaker 0>I have a Neon Tech, an online free

00:04:01.755 --> 00:04:05.110
<v Speaker 0>Postgres database available with my username database, and

00:04:05.110 --> 00:04:06.870
<v Speaker 0>I'm hiding my password for now.

00:04:07.350 --> 00:04:09.350
<v Speaker 0>I can jump over to the terminal and

00:04:09.350 --> 00:04:10.870
<v Speaker 0>run spin up.

00:04:11.590 --> 00:04:13.270
<v Speaker 0>Now we have an endpoint that's going to

00:04:13.270 --> 00:04:15.830
<v Speaker 0>read all of the shows from my Postgres

00:04:15.830 --> 00:04:16.630
<v Speaker 0>database,

00:04:16.950 --> 00:04:19.830
<v Speaker 0>and we can run local host 3,000

00:04:19.830 --> 00:04:20.310
<v Speaker 0>like so.

00:04:21.345 --> 00:04:24.465
<v Speaker 0>This speaks to NeonTech, the remote TLS server

00:04:24.465 --> 00:04:25.505
<v Speaker 0>based database,

00:04:25.825 --> 00:04:28.065
<v Speaker 0>and spits out my shows to the terminal.

00:04:29.505 --> 00:04:32.305
<v Speaker 0>Such a small change, but with powerful possibilities.

00:04:33.030 --> 00:04:36.150
<v Speaker 0>Lastly, and probably my favorite feature in zero

00:04:36.150 --> 00:04:39.190
<v Speaker 0>point a is support for OCI registries.

00:04:39.190 --> 00:04:40.790
<v Speaker 0>This is gonna make interrupt

00:04:41.430 --> 00:04:44.630
<v Speaker 0>and hybrid applications for web assembly and containers

00:04:45.085 --> 00:04:46.685
<v Speaker 0>a whole lot simpler

00:04:46.764 --> 00:04:49.805
<v Speaker 0>because they use the same discoverability and distribution

00:04:49.805 --> 00:04:52.125
<v Speaker 0>mechanism as container based applications.

00:04:52.845 --> 00:04:54.525
<v Speaker 0>Here we have a Spin application

00:04:54.525 --> 00:04:56.525
<v Speaker 0>using the Spin file server,

00:04:57.050 --> 00:04:59.210
<v Speaker 0>which delivers static assets

00:05:00.010 --> 00:05:02.330
<v Speaker 0>like my very simple index.

00:05:02.330 --> 00:05:03.370
<v Speaker 0>HTML.

00:05:04.890 --> 00:05:07.930
<v Speaker 0>I provided a just file here. One with

00:05:07.930 --> 00:05:08.890
<v Speaker 0>an image name

00:05:09.235 --> 00:05:12.035
<v Speaker 0>and here I'm using the GitHub container registry

00:05:12.035 --> 00:05:15.315
<v Speaker 0>on my own repository to store exploring Spin

00:05:15.315 --> 00:05:17.075
<v Speaker 0>watch news 0.8

00:05:17.075 --> 00:05:18.115
<v Speaker 0>application.

00:05:19.235 --> 00:05:22.675
<v Speaker 0>We can do a push using Spin OCI

00:05:22.675 --> 00:05:24.035
<v Speaker 0>push with the image name.

00:05:24.800 --> 00:05:27.039
<v Speaker 0>Even cooler than that, we can sign this

00:05:27.039 --> 00:05:30.000
<v Speaker 0>because it's a standard OCI artifact. We can

00:05:30.000 --> 00:05:31.199
<v Speaker 0>use cosign

00:05:31.199 --> 00:05:34.000
<v Speaker 0>in that suite. Lastly, for the demo, I'm

00:05:34.000 --> 00:05:35.840
<v Speaker 0>gonna do a push and sign.

00:05:36.240 --> 00:05:39.095
<v Speaker 0>Well, let's run just demo like so.

00:05:40.294 --> 00:05:42.855
<v Speaker 0>Spin OCI push is now building

00:05:42.935 --> 00:05:44.695
<v Speaker 0>the WebAssembly artifact

00:05:45.014 --> 00:05:46.855
<v Speaker 0>into an OCI artifact

00:05:47.014 --> 00:05:49.495
<v Speaker 0>and pushing it to get hubs container registry.

00:05:50.820 --> 00:05:53.220
<v Speaker 0>Next, cosign is going to sign our image

00:05:53.220 --> 00:05:55.780
<v Speaker 0>for us and we can just confirm the

00:05:55.780 --> 00:05:56.500
<v Speaker 0>prompt.

00:05:57.220 --> 00:05:58.740
<v Speaker 0>This will ask me to log in with

00:05:58.740 --> 00:06:00.100
<v Speaker 0>my GitHub credentials

00:06:01.700 --> 00:06:02.260
<v Speaker 0>like so.

00:06:05.535 --> 00:06:07.375
<v Speaker 0>Now, let's clear screen

00:06:07.695 --> 00:06:09.775
<v Speaker 0>and run Just Verify.

00:06:10.015 --> 00:06:12.655
<v Speaker 0>This runs a cosign verify against the image

00:06:12.655 --> 00:06:14.735
<v Speaker 0>that we just signed. We can see the

00:06:14.735 --> 00:06:15.855
<v Speaker 0>claims were validated,

00:06:16.750 --> 00:06:19.310
<v Speaker 0>existence of the claims were verified in the

00:06:19.310 --> 00:06:22.990
<v Speaker 0>transparency log and certificates were verified against the

00:06:22.990 --> 00:06:24.270
<v Speaker 0>Visio route.

00:06:24.910 --> 00:06:26.750
<v Speaker 0>And we can see this was signed with

00:06:26.750 --> 00:06:27.790
<v Speaker 0>my GitHub

00:06:27.870 --> 00:06:28.430
<v Speaker 0>credentials.

00:06:29.485 --> 00:06:30.205
<v Speaker 0>Awesome.

00:06:30.605 --> 00:06:32.845
<v Speaker 0>And that is spin 0.8.

00:06:32.845 --> 00:06:35.085
<v Speaker 0>The Fairmount team continued to impress me with

00:06:35.085 --> 00:06:36.125
<v Speaker 0>their velocity,

00:06:36.125 --> 00:06:39.085
<v Speaker 0>cool features, shiny new things to play with.

00:06:39.725 --> 00:06:40.045
<v Speaker 0>So

00:06:40.889 --> 00:06:42.729
<v Speaker 0>we'll see you for the next video in

00:06:42.729 --> 00:06:45.130
<v Speaker 0>the complete guide to Spin. Till next time.

00:06:45.130 --> 00:06:45.770
<v Speaker 0>Have a great day.
