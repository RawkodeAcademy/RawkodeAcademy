WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 827492d6-7a17-4c8f-bedd-31a36a01fc6a
Created: 2025-04-29T13:17:02.764Z
Duration: 561.4302
Channels: 1

00:00:00.560 --> 00:00:03.360
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:00:03.360 --> 00:00:05.920
<v Speaker 0>I'm your host, David Flanagan. And today, we

00:00:05.920 --> 00:00:08.879
<v Speaker 0>will continue the complete guide to Parca.

00:00:10.000 --> 00:00:11.759
<v Speaker 0>Before we go any further, let's set the

00:00:11.759 --> 00:00:12.080
<v Speaker 0>scene.

00:00:13.655 --> 00:00:16.615
<v Speaker 0>You are working on your million dollar application,

00:00:17.175 --> 00:00:21.015
<v Speaker 0>and is running in production to hundreds, thousands,

00:00:21.015 --> 00:00:23.255
<v Speaker 0>hundreds of thousands, or maybe even millions of

00:00:23.255 --> 00:00:24.695
<v Speaker 0>users across the world.

00:00:25.960 --> 00:00:29.160
<v Speaker 0>You need to understand how your application is

00:00:29.160 --> 00:00:29.880
<v Speaker 0>running

00:00:31.000 --> 00:00:32.280
<v Speaker 0>from metrics,

00:00:32.680 --> 00:00:33.480
<v Speaker 0>logs,

00:00:33.719 --> 00:00:34.600
<v Speaker 0>traces

00:00:34.840 --> 00:00:35.960
<v Speaker 0>and profiles.

00:00:37.000 --> 00:00:38.855
<v Speaker 0>Now, in our first video, we took a

00:00:38.855 --> 00:00:41.414
<v Speaker 0>look at profiling our application with Parker using

00:00:41.414 --> 00:00:43.894
<v Speaker 0>the Parker server, the Parker agent and the

00:00:43.894 --> 00:00:45.254
<v Speaker 0>Parker server UI.

00:00:45.734 --> 00:00:46.454
<v Speaker 0>However,

00:00:46.695 --> 00:00:48.934
<v Speaker 0>we don't really want our profile and information

00:00:48.934 --> 00:00:49.975
<v Speaker 0>to live in isolation.

00:00:50.710 --> 00:00:54.470
<v Speaker 0>It becomes a key component and our observability

00:00:54.470 --> 00:00:55.270
<v Speaker 0>stack.

00:00:55.750 --> 00:00:58.950
<v Speaker 0>We actually need to consume this information side

00:00:58.950 --> 00:01:02.470
<v Speaker 0>by side with our metrics, logs and our

00:01:02.470 --> 00:01:02.870
<v Speaker 0>traces.

00:01:03.745 --> 00:01:06.545
<v Speaker 0>We need a single pane of glass. Now

00:01:06.545 --> 00:01:07.505
<v Speaker 0>I hate

00:01:07.745 --> 00:01:09.345
<v Speaker 0>using that term.

00:01:09.425 --> 00:01:11.985
<v Speaker 0>Why? Because vendors have thrown it down our

00:01:11.985 --> 00:01:14.065
<v Speaker 0>faces for the last ten years trying to

00:01:14.065 --> 00:01:16.690
<v Speaker 0>sell us snake oil. So their products that

00:01:16.690 --> 00:01:19.890
<v Speaker 0>offer this wonderful magical experience to understand our

00:01:19.890 --> 00:01:20.690
<v Speaker 0>application.

00:01:21.490 --> 00:01:24.450
<v Speaker 0>But really Grafana is all you need. Grafana

00:01:24.450 --> 00:01:26.530
<v Speaker 0>can speak to your metrics back end, your

00:01:26.530 --> 00:01:28.370
<v Speaker 0>logs back end, your tracing back end and

00:01:28.370 --> 00:01:30.210
<v Speaker 0>now your profiling back end.

00:01:31.034 --> 00:01:33.034
<v Speaker 0>So in this video, I'm gonna show you

00:01:33.034 --> 00:01:34.795
<v Speaker 0>how to take those

00:01:34.875 --> 00:01:36.314
<v Speaker 0>Parca profiles,

00:01:37.674 --> 00:01:40.314
<v Speaker 0>add the Grafana plug in,

00:01:42.075 --> 00:01:44.395
<v Speaker 0>and how to debug your applications all without

00:01:44.395 --> 00:01:45.435
<v Speaker 0>leaving Grafana.

00:01:45.950 --> 00:01:48.670
<v Speaker 0>Let's take a look. Hello. And welcome back

00:01:48.670 --> 00:01:51.310
<v Speaker 0>to the Rawkode Academy. I'm your host, David

00:01:51.310 --> 00:01:54.190
<v Speaker 0>Flanagan. And today, we will continue the complete

00:01:54.190 --> 00:01:55.710
<v Speaker 0>guide to Parca.

00:01:56.830 --> 00:01:59.150
<v Speaker 0>So first, I have a virtual machine on

00:01:59.150 --> 00:02:01.070
<v Speaker 0>the cloud running the Parca server.

00:02:02.205 --> 00:02:04.365
<v Speaker 0>You can see here it is configured with

00:02:04.365 --> 00:02:06.604
<v Speaker 0>a test agent, which has been scraping for

00:02:06.604 --> 00:02:08.685
<v Speaker 0>a while now, as well as a static

00:02:08.685 --> 00:02:09.485
<v Speaker 0>config

00:02:09.485 --> 00:02:11.325
<v Speaker 0>scraping Parca itself.

00:02:15.640 --> 00:02:18.040
<v Speaker 0>We have a Parca agent, which will list

00:02:18.040 --> 00:02:19.480
<v Speaker 0>the different profilers.

00:02:19.480 --> 00:02:21.800
<v Speaker 0>Here we have the Parca agent CPU.

00:02:21.880 --> 00:02:24.280
<v Speaker 0>So we are consuming CPU samples with the

00:02:24.280 --> 00:02:27.400
<v Speaker 0>Parca agent for any process discovered via as

00:02:27.400 --> 00:02:28.600
<v Speaker 0>eBPF probe.

00:02:29.465 --> 00:02:32.665
<v Speaker 0>We can expand the process list here, see

00:02:32.665 --> 00:02:34.345
<v Speaker 0>everything that we need to see.

00:02:34.905 --> 00:02:37.465
<v Speaker 0>Now of course, we'll see the Parca agent,

00:02:37.944 --> 00:02:39.465
<v Speaker 0>we'll see our Grafana

00:02:39.784 --> 00:02:42.905
<v Speaker 0>and we'll see our million dollar application,

00:02:43.144 --> 00:02:44.985
<v Speaker 0>just like in the first video.

00:02:45.420 --> 00:02:47.900
<v Speaker 0>However, we don't want to do this with

00:02:47.900 --> 00:02:49.260
<v Speaker 0>the Parca UI,

00:02:49.500 --> 00:02:51.099
<v Speaker 0>nor can we do it with the Parca

00:02:51.099 --> 00:02:52.300
<v Speaker 0>agent UI.

00:02:52.780 --> 00:02:54.780
<v Speaker 0>So let's jump over to Grafana.

00:02:57.825 --> 00:03:00.625
<v Speaker 0>So this is a plain Grafana install. Nothing

00:03:00.625 --> 00:03:02.865
<v Speaker 0>tweaked to configure or installed yet.

00:03:03.504 --> 00:03:05.585
<v Speaker 0>So we're gonna go straight to data sources,

00:03:05.985 --> 00:03:07.584
<v Speaker 0>where we have the big blue button to

00:03:07.584 --> 00:03:08.945
<v Speaker 0>add a data source.

00:03:09.504 --> 00:03:11.745
<v Speaker 0>We can add this like so and type

00:03:11.745 --> 00:03:12.545
<v Speaker 0>Parca.

00:03:13.680 --> 00:03:14.320
<v Speaker 0>Now

00:03:14.560 --> 00:03:17.440
<v Speaker 0>what's really cool here is that Grafana themselves

00:03:17.440 --> 00:03:20.239
<v Speaker 0>have worked on a core plugin to support

00:03:20.239 --> 00:03:22.400
<v Speaker 0>Parca as a backend.

00:03:22.640 --> 00:03:24.400
<v Speaker 0>So you don't need to go and find

00:03:24.400 --> 00:03:26.640
<v Speaker 0>any third party ones to get them running.

00:03:26.640 --> 00:03:28.239
<v Speaker 0>You just click go

00:03:28.715 --> 00:03:31.275
<v Speaker 0>and enter your Parca URL

00:03:31.835 --> 00:03:33.995
<v Speaker 0>because these are running on the same machine

00:03:33.995 --> 00:03:36.875
<v Speaker 0>that's a local host seventy seventy.

00:03:38.075 --> 00:03:39.835
<v Speaker 0>Now I can hit save and test and

00:03:39.835 --> 00:03:41.995
<v Speaker 0>we expect a green check telling us this

00:03:41.995 --> 00:03:43.595
<v Speaker 0>data source is working.

00:03:44.550 --> 00:03:45.270
<v Speaker 0>Perfect.

00:03:46.150 --> 00:03:47.190
<v Speaker 0>And honestly,

00:03:47.190 --> 00:03:49.110
<v Speaker 0>that's it for the config part.

00:03:49.590 --> 00:03:52.950
<v Speaker 0>Go to data sources, click add, click save.

00:03:53.270 --> 00:03:54.630
<v Speaker 0>Could not be easier.

00:03:55.670 --> 00:03:58.230
<v Speaker 0>So let's scroll up and say, let's explore

00:03:58.230 --> 00:03:59.190
<v Speaker 0>this data source.

00:03:59.955 --> 00:04:02.035
<v Speaker 0>Now this is gonna function the exact same

00:04:02.035 --> 00:04:04.115
<v Speaker 0>as the Parca server UI.

00:04:04.515 --> 00:04:06.834
<v Speaker 0>You get to pick the profiler information that

00:04:06.834 --> 00:04:09.715
<v Speaker 0>you want. Here we'll grab from the Parca

00:04:09.715 --> 00:04:11.555
<v Speaker 0>agent CPU profiler

00:04:11.635 --> 00:04:14.275
<v Speaker 0>because this is the one doing auto discovery

00:04:14.275 --> 00:04:15.315
<v Speaker 0>on the node.

00:04:15.830 --> 00:04:18.149
<v Speaker 0>And we'll ask for CPU samples.

00:04:18.870 --> 00:04:20.470
<v Speaker 0>Now, I can just say show me the

00:04:20.470 --> 00:04:22.470
<v Speaker 0>last five minutes and click go.

00:04:23.030 --> 00:04:25.670
<v Speaker 0>And we'll see all of our applications running

00:04:26.229 --> 00:04:26.949
<v Speaker 0>on the host.

00:04:28.155 --> 00:04:29.835
<v Speaker 0>If we scroll down, we'll see right at

00:04:29.835 --> 00:04:31.914
<v Speaker 0>the top, we have my million dollar application.

00:04:31.914 --> 00:04:33.995
<v Speaker 0>We have the Parca server, my million dollar

00:04:33.995 --> 00:04:34.794
<v Speaker 0>application.

00:04:35.034 --> 00:04:36.395
<v Speaker 0>Some kernel stuff,

00:04:36.875 --> 00:04:37.835
<v Speaker 0>Parca.

00:04:38.155 --> 00:04:39.675
<v Speaker 0>And if we scroll down a little bit

00:04:39.675 --> 00:04:40.235
<v Speaker 0>more,

00:04:40.715 --> 00:04:43.115
<v Speaker 0>eventually we'll get to

00:04:44.640 --> 00:04:46.880
<v Speaker 0>any other application.

00:04:50.480 --> 00:04:51.440
<v Speaker 0>There we go.

00:04:51.680 --> 00:04:53.600
<v Speaker 0>Container d, Grafana,

00:04:53.600 --> 00:04:56.755
<v Speaker 0>Docker d, Lebessey and so forth. So currently,

00:04:56.755 --> 00:04:59.235
<v Speaker 0>we're viewing every single piece of profile information

00:04:59.235 --> 00:05:02.435
<v Speaker 0>that we have available from the Parca agent.

00:05:03.155 --> 00:05:04.755
<v Speaker 0>So let's reset our view.

00:05:05.795 --> 00:05:07.315
<v Speaker 0>Let's go back to the top.

00:05:08.275 --> 00:05:09.395
<v Speaker 0>Let's filter

00:05:10.280 --> 00:05:11.960
<v Speaker 0>on executable,

00:05:12.280 --> 00:05:14.600
<v Speaker 0>where we get an autocomplete list of all

00:05:14.600 --> 00:05:16.760
<v Speaker 0>the applications running on the host.

00:05:18.040 --> 00:05:20.280
<v Speaker 0>If we want to take a look

00:05:21.480 --> 00:05:22.360
<v Speaker 0>at Grafana,

00:05:23.445 --> 00:05:25.925
<v Speaker 0>we can type it in and say run.

00:05:28.165 --> 00:05:29.764
<v Speaker 0>If we want to take a look at

00:05:29.764 --> 00:05:32.245
<v Speaker 0>the Parca agent, we can do that too.

00:05:32.324 --> 00:05:34.645
<v Speaker 0>However, what we really want to see is

00:05:34.645 --> 00:05:36.005
<v Speaker 0>the same application

00:05:36.165 --> 00:05:37.445
<v Speaker 0>from the first video.

00:05:38.130 --> 00:05:40.210
<v Speaker 0>That is our million dollar

00:05:41.490 --> 00:05:42.210
<v Speaker 0>application.

00:05:43.330 --> 00:05:45.650
<v Speaker 0>So let's click run. Now we have the

00:05:45.650 --> 00:05:47.889
<v Speaker 0>c pro the CPU profile and information for

00:05:47.889 --> 00:05:50.370
<v Speaker 0>the last five minutes. Already,

00:05:50.370 --> 00:05:52.530
<v Speaker 0>we can begin to see some problematic functions

00:05:52.530 --> 00:05:54.525
<v Speaker 0>much like we did in the first video.

00:05:54.525 --> 00:05:56.445
<v Speaker 0>But let's just jump back over to our

00:05:56.445 --> 00:05:57.165
<v Speaker 0>terminal.

00:06:00.445 --> 00:06:02.525
<v Speaker 0>Where we can run a curl

00:06:02.525 --> 00:06:03.725
<v Speaker 0>HTTP

00:06:03.725 --> 00:06:05.645
<v Speaker 0>local host, eighty eighty,

00:06:06.400 --> 00:06:07.919
<v Speaker 0>I equals two

00:06:08.319 --> 00:06:10.080
<v Speaker 0>and j equals one.

00:06:12.720 --> 00:06:15.599
<v Speaker 0>Now this should return a response very quickly,

00:06:15.599 --> 00:06:17.520
<v Speaker 0>but it's not because we have a problem.

00:06:17.520 --> 00:06:19.280
<v Speaker 0>Our calculator is broken.

00:06:20.254 --> 00:06:21.775
<v Speaker 0>So, let's dig in.

00:06:22.735 --> 00:06:25.615
<v Speaker 0>Well, first, we have this nice little graph

00:06:25.615 --> 00:06:28.255
<v Speaker 0>that show us the CPU sample fluctuation.

00:06:30.095 --> 00:06:32.175
<v Speaker 0>You can switch it to a bar, points,

00:06:32.479 --> 00:06:34.880
<v Speaker 0>stack lines, stack bars, and so forth. All

00:06:34.880 --> 00:06:37.680
<v Speaker 0>the Grafana features that you're probably familiar with

00:06:37.680 --> 00:06:40.000
<v Speaker 0>having used it for such a long time.

00:06:40.800 --> 00:06:43.440
<v Speaker 0>We then have the profile specific information.

00:06:43.919 --> 00:06:45.680
<v Speaker 0>We can switch to just the top table,

00:06:46.305 --> 00:06:48.385
<v Speaker 0>just the flame graph, or both side by

00:06:48.385 --> 00:06:49.025
<v Speaker 0>side.

00:06:50.545 --> 00:06:52.465
<v Speaker 0>From the Stairs box, we can filter by

00:06:52.465 --> 00:06:54.145
<v Speaker 0>functions. If we have a rough idea of

00:06:54.145 --> 00:06:56.145
<v Speaker 0>what we think is wrong, then we can

00:06:56.145 --> 00:06:58.705
<v Speaker 0>establish that by saying, show me

00:06:59.800 --> 00:07:00.520
<v Speaker 0>just

00:07:00.759 --> 00:07:02.440
<v Speaker 0>the addition function.

00:07:03.800 --> 00:07:05.639
<v Speaker 0>This grays out everything on the right and

00:07:05.639 --> 00:07:07.720
<v Speaker 0>filters down to the function here.

00:07:08.680 --> 00:07:10.600
<v Speaker 0>From here, we can focus.

00:07:11.240 --> 00:07:13.080
<v Speaker 0>And we can see that for the

00:07:14.104 --> 00:07:16.505
<v Speaker 0>many many samples of the addition function, most

00:07:16.505 --> 00:07:18.824
<v Speaker 0>of the time is consumed with this fed

00:07:18.824 --> 00:07:19.625
<v Speaker 0>function

00:07:19.945 --> 00:07:21.625
<v Speaker 0>and then mem move

00:07:21.625 --> 00:07:22.985
<v Speaker 0>as well as

00:07:24.025 --> 00:07:25.225
<v Speaker 0>heap pointers

00:07:25.225 --> 00:07:26.264
<v Speaker 0>and grow slice.

00:07:27.000 --> 00:07:28.120
<v Speaker 0>So clearly,

00:07:28.280 --> 00:07:32.200
<v Speaker 0>something weird is happening within addition dependency or

00:07:32.200 --> 00:07:35.640
<v Speaker 0>Fibonacci function. There's some serious memory allocation or

00:07:35.640 --> 00:07:37.080
<v Speaker 0>memory movement happening.

00:07:37.320 --> 00:07:38.920
<v Speaker 0>And then after that, everything

00:07:39.435 --> 00:07:42.235
<v Speaker 0>kind of shrinks down showing us that they're

00:07:42.235 --> 00:07:44.715
<v Speaker 0>not actually consuming that much of our CPU

00:07:44.715 --> 00:07:45.515
<v Speaker 0>cycle.

00:07:46.235 --> 00:07:48.635
<v Speaker 0>So let's reset the view and without the

00:07:48.635 --> 00:07:50.395
<v Speaker 0>search this time, we'll do the exact same

00:07:50.395 --> 00:07:50.635
<v Speaker 0>thing.

00:07:51.490 --> 00:07:53.729
<v Speaker 0>We can see here that our total allocation

00:07:53.729 --> 00:07:55.970
<v Speaker 0>is up here. We have the serve function,

00:07:55.970 --> 00:07:57.569
<v Speaker 0>which of course is gonna take up more

00:07:57.569 --> 00:07:59.330
<v Speaker 0>the majority of the time because it is

00:07:59.330 --> 00:08:00.930
<v Speaker 0>an HTTP server.

00:08:01.250 --> 00:08:02.610
<v Speaker 0>And this is true for all of these

00:08:02.610 --> 00:08:04.689
<v Speaker 0>serve HTTP things all the way down.

00:08:05.535 --> 00:08:07.615
<v Speaker 0>Then we have some standard stuff happening over

00:08:07.615 --> 00:08:10.175
<v Speaker 0>here that doesn't really raise any red flags,

00:08:10.175 --> 00:08:11.775
<v Speaker 0>but of course, addition

00:08:12.175 --> 00:08:12.895
<v Speaker 0>Feb

00:08:12.975 --> 00:08:15.935
<v Speaker 0>setting here right before the yellow breakdowns, the

00:08:15.935 --> 00:08:16.655
<v Speaker 0>shrinking

00:08:16.815 --> 00:08:19.850
<v Speaker 0>of the icicles down the graph. Again,

00:08:19.850 --> 00:08:22.250
<v Speaker 0>highlight that we really need to focus our

00:08:22.250 --> 00:08:22.890
<v Speaker 0>time

00:08:23.130 --> 00:08:23.770
<v Speaker 0>here.

00:08:24.330 --> 00:08:24.970
<v Speaker 0>Specifically

00:08:25.450 --> 00:08:27.530
<v Speaker 0>on this fib and actually function.

00:08:27.930 --> 00:08:29.690
<v Speaker 0>That's when you would go to your code.

00:08:29.690 --> 00:08:31.690
<v Speaker 0>You would scrutinize every lane,

00:08:32.010 --> 00:08:32.890
<v Speaker 0>look for bugs,

00:08:34.034 --> 00:08:36.034
<v Speaker 0>run performance tests against it,

00:08:36.274 --> 00:08:38.274
<v Speaker 0>write new test cases, whatever you need to

00:08:38.274 --> 00:08:41.475
<v Speaker 0>do to establish what is happening and all

00:08:41.794 --> 00:08:43.475
<v Speaker 0>without leaving Grafana.

00:08:45.475 --> 00:08:47.955
<v Speaker 0>So that's getting started with Parca and the

00:08:47.955 --> 00:08:49.155
<v Speaker 0>Grafana plugin.

00:08:49.475 --> 00:08:50.890
<v Speaker 0>Like I said, this is a short and

00:08:50.890 --> 00:08:51.850
<v Speaker 0>sweet video.

00:08:52.810 --> 00:08:54.650
<v Speaker 0>It's very easy to get started.

00:08:54.810 --> 00:08:57.130
<v Speaker 0>You barely have to do anything and you

00:08:57.130 --> 00:08:59.290
<v Speaker 0>have your profile and information with the rest

00:08:59.290 --> 00:09:00.490
<v Speaker 0>of your observability

00:09:00.490 --> 00:09:01.290
<v Speaker 0>stack.

00:09:02.170 --> 00:09:02.970
<v Speaker 0>So

00:09:03.685 --> 00:09:06.405
<v Speaker 0>go have some fun. Profile applications with Parca

00:09:06.405 --> 00:09:09.285
<v Speaker 0>today. Add the Parca plugin to your Grafana.

00:09:09.525 --> 00:09:11.685
<v Speaker 0>When you see bad things happening from metrics,

00:09:11.685 --> 00:09:14.965
<v Speaker 0>logs and traces, correlate that with profiling information

00:09:14.965 --> 00:09:15.685
<v Speaker 0>from Parca.

00:09:16.305 --> 00:09:18.705
<v Speaker 0>Debugging has never been so much fun.

00:09:19.025 --> 00:09:21.105
<v Speaker 0>Till the next video. We'll see you soon.
