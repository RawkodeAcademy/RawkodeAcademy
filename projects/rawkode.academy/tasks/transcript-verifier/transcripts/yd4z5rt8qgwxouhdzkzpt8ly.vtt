WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 3369421b-8151-498f-a855-0f06274cca74
Created: 2025-04-29T17:47:32.667Z
Duration: 3913.1494
Channels: 1

00:01:04.235 --> 00:01:07.354
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:01:07.354 --> 00:01:09.115
<v Speaker 0>Live at the Rawkode Academy.

00:01:09.195 --> 00:01:11.435
<v Speaker 0>I'm your host, David Flanagan, although you well

00:01:11.435 --> 00:01:13.515
<v Speaker 0>know me across the internet as Rawkode.

00:01:13.515 --> 00:01:15.115
<v Speaker 0>And I realized that I said Rawkode three

00:01:15.115 --> 00:01:16.315
<v Speaker 0>times in like five seconds.

00:01:17.050 --> 00:01:17.610
<v Speaker 0>However,

00:01:17.850 --> 00:01:19.690
<v Speaker 0>today we have an awesome episode as we're

00:01:19.690 --> 00:01:21.290
<v Speaker 0>going to take a look at the k0s

00:01:21.290 --> 00:01:24.650
<v Speaker 0>project, a Kubernetes distribution for all use cases.

00:01:25.210 --> 00:01:26.810
<v Speaker 0>Before we dive into that, there's just a

00:01:26.810 --> 00:01:28.970
<v Speaker 0>little bit of housekeeping. Please subscribe to the

00:01:28.970 --> 00:01:31.345
<v Speaker 0>YouTube channel and the button's right below my

00:01:31.345 --> 00:01:33.025
<v Speaker 0>face right now. So click that and tick

00:01:33.025 --> 00:01:34.865
<v Speaker 0>the bell. It means you're gonna get notifications

00:01:34.865 --> 00:01:37.265
<v Speaker 0>for all new episodes of Rawkode Live. I'm

00:01:37.265 --> 00:01:39.425
<v Speaker 0>gonna do my best to explore the vast

00:01:39.425 --> 00:01:41.825
<v Speaker 0>cloud native landscape and produce more videos and

00:01:41.825 --> 00:01:43.185
<v Speaker 0>more materials so that we can all learn

00:01:43.185 --> 00:01:44.625
<v Speaker 0>this crazy mess that we are in together.

00:01:45.350 --> 00:01:46.950
<v Speaker 0>If you wanna come and chat Cloud Native

00:01:46.950 --> 00:01:47.910
<v Speaker 0>and Kubernetes

00:01:47.910 --> 00:01:50.070
<v Speaker 0>and pretty much everything in between, there is

00:01:50.070 --> 00:01:53.030
<v Speaker 0>a Discord server available at Rawkode.chat.

00:01:53.190 --> 00:01:54.870
<v Speaker 0>Come and say hello, and I look forward

00:01:54.870 --> 00:01:55.670
<v Speaker 0>to meeting you.

00:01:56.390 --> 00:01:58.470
<v Speaker 0>We've also been kicking off the Rawkode Academy

00:01:58.470 --> 00:02:01.095
<v Speaker 0>courses this month, taking a look at a

00:02:01.095 --> 00:02:03.015
<v Speaker 0>complete guide to InfluxDB.

00:02:03.095 --> 00:02:04.695
<v Speaker 0>So take a look at the membership options.

00:02:04.695 --> 00:02:06.695
<v Speaker 0>You can support this channel for 99Â¢ per

00:02:06.695 --> 00:02:09.014
<v Speaker 0>month or become an incubating member, join the

00:02:09.014 --> 00:02:11.415
<v Speaker 0>courses, and there's more guest lectures and other

00:02:11.415 --> 00:02:13.255
<v Speaker 0>cool stuff coming very, very soon.

00:02:14.470 --> 00:02:17.110
<v Speaker 0>Alright. Back on track for today's session. We're

00:02:17.110 --> 00:02:18.550
<v Speaker 0>taking a look at k0s, and I'm joined

00:02:18.550 --> 00:02:20.390
<v Speaker 0>by Youssef from the Marantis team who works

00:02:20.390 --> 00:02:22.630
<v Speaker 0>on k0s. Hi there, Youssef. How are you?

00:02:23.670 --> 00:02:24.230
<v Speaker 1>Hey.

00:02:24.470 --> 00:02:27.015
<v Speaker 1>I'm I'm I'm I'm excited to join the

00:02:27.015 --> 00:02:29.175
<v Speaker 1>join the show and and and

00:02:29.255 --> 00:02:31.735
<v Speaker 1>and yeah. No. It's a pleasure to see

00:02:31.735 --> 00:02:33.335
<v Speaker 1>how it goes. Pleasure to have you here.

00:02:33.335 --> 00:02:35.095
<v Speaker 0>We're really looking forward to today's

00:02:35.095 --> 00:02:37.015
<v Speaker 0>today's session. I think there's a lot of

00:02:37.015 --> 00:02:37.895
<v Speaker 0>interest in

00:02:38.550 --> 00:02:40.390
<v Speaker 0>and k0s and people wanna see more, so

00:02:40.390 --> 00:02:41.990
<v Speaker 0>I'm sure we can give some lots more

00:02:41.990 --> 00:02:43.910
<v Speaker 0>details and explore it in our hands on

00:02:43.910 --> 00:02:45.270
<v Speaker 0>way that we do in this show.

00:02:45.910 --> 00:02:46.710
<v Speaker 0>Before

00:02:46.710 --> 00:02:48.310
<v Speaker 0>we dive into that, could you do us

00:02:48.310 --> 00:02:50.310
<v Speaker 0>a favor and just introduce yourself and tell

00:02:50.310 --> 00:02:53.095
<v Speaker 0>us a little bit about you? Alright. Alright.

00:02:53.095 --> 00:02:55.335
<v Speaker 1>So so, yeah, I'm I'm I'm I'm usually

00:02:55.335 --> 00:02:58.375
<v Speaker 1>and and and been working with containers and

00:02:58.375 --> 00:02:59.015
<v Speaker 1>and

00:02:59.175 --> 00:03:00.055
<v Speaker 1>Kubernetes

00:03:00.055 --> 00:03:00.695
<v Speaker 1>for,

00:03:00.855 --> 00:03:01.415
<v Speaker 1>well,

00:03:01.815 --> 00:03:03.255
<v Speaker 1>quite a quite a few years.

00:03:04.840 --> 00:03:06.920
<v Speaker 1>A bit bit of a historical kind of

00:03:06.920 --> 00:03:07.799
<v Speaker 1>background.

00:03:07.799 --> 00:03:09.560
<v Speaker 1>We we actually in in one of the

00:03:09.560 --> 00:03:11.879
<v Speaker 1>previous companies I worked for, we we actually

00:03:11.879 --> 00:03:13.720
<v Speaker 1>went to production with Docker

00:03:13.720 --> 00:03:15.240
<v Speaker 1>zero dot six

00:03:15.319 --> 00:03:15.720
<v Speaker 1>version.

00:03:16.615 --> 00:03:18.615
<v Speaker 1>And and and if I would would would

00:03:18.615 --> 00:03:20.135
<v Speaker 1>really have a time machine, I would go

00:03:20.135 --> 00:03:22.135
<v Speaker 1>back to that day and tell tell myself

00:03:22.135 --> 00:03:24.375
<v Speaker 1>that, oh, please please don't do it.

00:03:24.935 --> 00:03:25.255
<v Speaker 1>We

00:03:25.975 --> 00:03:28.375
<v Speaker 1>but but but I I I'm I'm in

00:03:28.375 --> 00:03:30.730
<v Speaker 1>general, I'm I'm kind of a stubborn person,

00:03:30.730 --> 00:03:33.770
<v Speaker 1>so I'm I'm still working with containers and

00:03:33.770 --> 00:03:36.810
<v Speaker 1>and and Kubernetes and whatnot. So so so

00:03:36.810 --> 00:03:39.850
<v Speaker 1>I'm I'm definitely definitely enjoying the whole cloud

00:03:39.850 --> 00:03:42.435
<v Speaker 1>native landscape and and and the the the

00:03:42.435 --> 00:03:44.675
<v Speaker 1>kind of all the all the possibilities that

00:03:44.675 --> 00:03:46.435
<v Speaker 1>it it provides and and,

00:03:46.915 --> 00:03:48.835
<v Speaker 1>well, of course, all the trouble that it

00:03:48.835 --> 00:03:50.755
<v Speaker 1>also gives us some days. So so

00:03:51.555 --> 00:03:54.035
<v Speaker 0>Yeah. To be in the container ecosystem that

00:03:54.035 --> 00:03:55.795
<v Speaker 0>early and still be in it today, you

00:03:55.795 --> 00:03:57.395
<v Speaker 0>must have the patience of a saint, you

00:03:57.395 --> 00:03:57.555
<v Speaker 0>see?

00:03:58.260 --> 00:04:00.580
<v Speaker 1>No. I don't. I don't. I'm as I

00:04:00.580 --> 00:04:02.980
<v Speaker 1>said, I'm stubborn. I'm just stubborn.

00:04:02.980 --> 00:04:05.380
<v Speaker 1>So so I I I still I still

00:04:05.380 --> 00:04:08.740
<v Speaker 1>enjoy working on on projects like like k

00:04:08.740 --> 00:04:11.300
<v Speaker 1>zero, for example, which which

00:04:12.525 --> 00:04:15.644
<v Speaker 1>kind of makes the technologies more accessible and

00:04:15.644 --> 00:04:17.805
<v Speaker 1>more easier to use. Because as we all

00:04:17.805 --> 00:04:20.204
<v Speaker 1>know, Kubernetes and and and basically all of

00:04:20.204 --> 00:04:21.805
<v Speaker 1>the all of the building blocks that we

00:04:21.805 --> 00:04:23.965
<v Speaker 1>have in the cloud native native landscape, they

00:04:23.965 --> 00:04:24.604
<v Speaker 1>are not the

00:04:25.330 --> 00:04:26.770
<v Speaker 1>are not the ones that are trivial to

00:04:26.770 --> 00:04:28.210
<v Speaker 1>grasp grasp. So

00:04:28.610 --> 00:04:29.250
<v Speaker 0>Alright.

00:04:30.370 --> 00:04:32.130
<v Speaker 0>Well, we already have our our first question

00:04:32.130 --> 00:04:33.490
<v Speaker 0>on the chat, which I think we'll get

00:04:33.490 --> 00:04:35.090
<v Speaker 0>to later. But we do see a quote,

00:04:35.090 --> 00:04:36.370
<v Speaker 0>Jen, and we'll do our best to answer

00:04:36.370 --> 00:04:37.250
<v Speaker 0>that at some point here.

00:04:38.395 --> 00:04:40.555
<v Speaker 0>To kick things off, you're gonna get us

00:04:40.555 --> 00:04:42.235
<v Speaker 0>through a little bit of slides, tell us

00:04:42.235 --> 00:04:43.915
<v Speaker 0>little bit about k0s, and then we're gonna

00:04:43.915 --> 00:04:46.475
<v Speaker 0>get hands on. So I am gonna Right.

00:04:46.555 --> 00:04:49.755
<v Speaker 0>Throw your slides up. They're now live. Take

00:04:49.755 --> 00:04:52.310
<v Speaker 0>it away, guys. Alright. Alright.

00:04:52.550 --> 00:04:53.190
<v Speaker 1>So just

00:04:53.990 --> 00:04:55.430
<v Speaker 1>I mean I mean, that's the that's the

00:04:55.430 --> 00:04:57.669
<v Speaker 1>whole point of this this Rawkode

00:04:58.550 --> 00:05:00.470
<v Speaker 1>streams is is to go hands on. So

00:05:00.470 --> 00:05:02.870
<v Speaker 1>so I'll I'll I'll glance just go through

00:05:02.870 --> 00:05:04.789
<v Speaker 1>this couple of slides quickly.

00:05:07.265 --> 00:05:09.105
<v Speaker 1>Where the where where the name comes is

00:05:09.105 --> 00:05:10.305
<v Speaker 1>is is basically

00:05:10.945 --> 00:05:12.785
<v Speaker 1>a sort of a play from the from

00:05:12.785 --> 00:05:15.905
<v Speaker 1>the, like, zero friction, zero dependencies.

00:05:15.985 --> 00:05:18.225
<v Speaker 1>And, of course, as as in any open

00:05:18.225 --> 00:05:20.225
<v Speaker 1>source, it's a zero cost. Well,

00:05:20.919 --> 00:05:23.560
<v Speaker 1>that's a that's another discussion whether whether whether

00:05:23.560 --> 00:05:26.199
<v Speaker 1>open source is really a fully zero cost,

00:05:26.199 --> 00:05:27.400
<v Speaker 1>but but but anyway,

00:05:27.720 --> 00:05:29.960
<v Speaker 1>we we try to make k0s

00:05:29.960 --> 00:05:32.360
<v Speaker 1>really the the like, the one of the

00:05:32.360 --> 00:05:35.159
<v Speaker 1>easiest easiest options to to boot up a

00:05:35.159 --> 00:05:36.199
<v Speaker 1>Kubernetes cluster.

00:05:36.975 --> 00:05:38.574
<v Speaker 1>So you don't really have to have to

00:05:38.574 --> 00:05:40.815
<v Speaker 1>be a, like, a, a seasoned expert and

00:05:40.815 --> 00:05:42.895
<v Speaker 1>and veteran in the industry to to to

00:05:42.895 --> 00:05:45.775
<v Speaker 1>really get get a, like, a production grade

00:05:45.775 --> 00:05:47.055
<v Speaker 1>cluster up and running.

00:05:48.495 --> 00:05:50.175
<v Speaker 1>And, also, the the one of the main

00:05:50.175 --> 00:05:52.420
<v Speaker 1>main drivers for everything that we do is

00:05:52.420 --> 00:05:54.020
<v Speaker 1>this zero dependencies.

00:05:54.020 --> 00:05:57.300
<v Speaker 1>So so we we try to make everything

00:05:57.540 --> 00:06:00.100
<v Speaker 1>everything in a in a stand alone way.

00:06:00.100 --> 00:06:02.740
<v Speaker 1>So so you only really need the k

00:06:02.740 --> 00:06:05.620
<v Speaker 1>zero's binary, and and and that includes everything

00:06:05.620 --> 00:06:07.535
<v Speaker 1>that that that you need to have in

00:06:07.535 --> 00:06:10.335
<v Speaker 1>order to run Kubernetes successfully in in basically

00:06:10.335 --> 00:06:11.855
<v Speaker 1>any Linux node.

00:06:16.095 --> 00:06:18.255
<v Speaker 1>That's that's where the zero in the in

00:06:18.255 --> 00:06:19.775
<v Speaker 1>in the name really comes from.

00:06:21.050 --> 00:06:21.850
<v Speaker 0>Thanks.

00:06:24.010 --> 00:06:25.850
<v Speaker 1>Of course, that I mean, that that there's

00:06:25.850 --> 00:06:28.010
<v Speaker 1>there's quite a quite a few different cube

00:06:28.010 --> 00:06:29.290
<v Speaker 1>distros out there

00:06:31.290 --> 00:06:33.130
<v Speaker 1>already existing, of course,

00:06:33.690 --> 00:06:36.085
<v Speaker 1>and and and it's it's not the first

00:06:36.085 --> 00:06:38.725
<v Speaker 1>distro that I'm actually working working on

00:06:39.605 --> 00:06:41.525
<v Speaker 1>either. But but one

00:06:41.685 --> 00:06:43.044
<v Speaker 1>of the one of the main reasons why

00:06:43.044 --> 00:06:44.405
<v Speaker 1>we why we kind of started to work

00:06:44.405 --> 00:06:45.605
<v Speaker 1>on k0s,

00:06:46.005 --> 00:06:47.925
<v Speaker 1>like, about a about a year ago,

00:06:48.790 --> 00:06:51.030
<v Speaker 1>What was really that basically,

00:06:51.509 --> 00:06:54.310
<v Speaker 1>there wasn't a distro that could allow allow

00:06:54.310 --> 00:06:57.350
<v Speaker 1>us to have, like, a super, super versatile

00:06:57.430 --> 00:06:58.389
<v Speaker 1>distro

00:06:58.389 --> 00:07:01.065
<v Speaker 1>that would fit the the from the, let's

00:07:01.065 --> 00:07:03.544
<v Speaker 1>say, from the basic cloud use case where

00:07:03.544 --> 00:07:05.465
<v Speaker 1>you have, like, VMs in a cloud and

00:07:05.465 --> 00:07:07.705
<v Speaker 1>and and and whatnot,

00:07:08.185 --> 00:07:09.544
<v Speaker 1>and all the way to the to the

00:07:09.544 --> 00:07:12.905
<v Speaker 1>environments where you have, like, industrial PCs and

00:07:12.905 --> 00:07:15.790
<v Speaker 1>and and lot of network segmentation

00:07:15.870 --> 00:07:18.030
<v Speaker 1>on the on on, let's say, like, a

00:07:18.110 --> 00:07:20.430
<v Speaker 1>like, on a factory floor, for example.

00:07:22.830 --> 00:07:24.750
<v Speaker 1>And and and that basically

00:07:26.030 --> 00:07:28.384
<v Speaker 1>took us took us to this this, like,

00:07:28.384 --> 00:07:31.505
<v Speaker 1>one of the main distinguishing features of k0s

00:07:31.505 --> 00:07:34.065
<v Speaker 1>is this full control plane isolation.

00:07:36.705 --> 00:07:38.544
<v Speaker 1>What it means is is is really that

00:07:38.544 --> 00:07:40.544
<v Speaker 1>the the control nodes

00:07:40.270 --> 00:07:43.310
<v Speaker 1>by default are not really part of the

00:07:43.310 --> 00:07:44.190
<v Speaker 1>cluster

00:07:44.270 --> 00:07:46.590
<v Speaker 1>from the networking point of view, from the

00:07:46.590 --> 00:07:49.389
<v Speaker 1>port scheduling point of view. So you we

00:07:49.389 --> 00:07:51.710
<v Speaker 1>we we don't really have, like, or any

00:07:51.710 --> 00:07:54.110
<v Speaker 1>any container d or or anything running on

00:07:54.110 --> 00:07:56.595
<v Speaker 1>the controller nodes so that it's it's, like,

00:07:56.595 --> 00:08:00.595
<v Speaker 1>fully impossible to schedule workloads either on purpose

00:08:00.595 --> 00:08:03.155
<v Speaker 1>or by accident to the to the control

00:08:03.155 --> 00:08:03.475
<v Speaker 1>nodes.

00:08:08.290 --> 00:08:09.650
<v Speaker 1>Always independence.

00:08:09.650 --> 00:08:11.570
<v Speaker 1>So so we

00:08:11.570 --> 00:08:12.210
<v Speaker 1>don't

00:08:12.450 --> 00:08:14.850
<v Speaker 1>or or we didn't really wanna wanna get

00:08:14.850 --> 00:08:17.010
<v Speaker 1>into into the into the

00:08:19.010 --> 00:08:20.770
<v Speaker 1>working mode where you where you have to

00:08:20.770 --> 00:08:23.330
<v Speaker 1>maintain, like, a lot of

00:08:22.805 --> 00:08:23.685
<v Speaker 1>and

00:08:24.485 --> 00:08:27.525
<v Speaker 1>deal with the dependencies between packages because

00:08:28.164 --> 00:08:30.245
<v Speaker 1>we we've done that actually in the past,

00:08:30.245 --> 00:08:31.685
<v Speaker 1>and and it was a

00:08:32.725 --> 00:08:35.125
<v Speaker 1>it was a sort of a nightmare to

00:08:35.125 --> 00:08:35.765
<v Speaker 1>to manage.

00:08:36.500 --> 00:08:39.059
<v Speaker 1>I mean I mean, it's it's it's

00:08:39.059 --> 00:08:41.140
<v Speaker 1>it's something that we we definitely wanted to

00:08:41.140 --> 00:08:43.380
<v Speaker 1>avoid and and and really get into this

00:08:43.380 --> 00:08:44.900
<v Speaker 1>one binary approach,

00:08:45.060 --> 00:08:47.540
<v Speaker 1>which is not like like a new thing.

00:08:47.540 --> 00:08:49.300
<v Speaker 1>K k three s has been has been

00:08:49.300 --> 00:08:52.015
<v Speaker 1>doing that already before, but we actually technically

00:08:52.015 --> 00:08:54.655
<v Speaker 1>do that slightly differently than than k three

00:08:54.655 --> 00:08:55.375
<v Speaker 1>s does.

00:08:56.015 --> 00:08:57.775
<v Speaker 1>And then, of course, we we we wanted

00:08:57.775 --> 00:09:00.095
<v Speaker 1>to have a, like, a pure upstream distro.

00:09:00.655 --> 00:09:02.175
<v Speaker 1>What I mean by that is that that

00:09:02.175 --> 00:09:04.495
<v Speaker 1>we don't maintain a fork of Kubernetes.

00:09:04.495 --> 00:09:06.880
<v Speaker 1>We don't we just basically take the the

00:09:06.880 --> 00:09:09.200
<v Speaker 1>upstream stuff and and just compile it as

00:09:09.200 --> 00:09:12.480
<v Speaker 1>as static binaries, and that's it. So so

00:09:12.480 --> 00:09:14.400
<v Speaker 1>you what what you get is is, like,

00:09:14.400 --> 00:09:16.320
<v Speaker 1>pure vanilla upstream Kubernetes.

00:09:21.404 --> 00:09:23.245
<v Speaker 1>Yeah. Batteries included.

00:09:26.285 --> 00:09:28.125
<v Speaker 1>What do we mean by batteries included is

00:09:28.125 --> 00:09:31.005
<v Speaker 1>that that we we we we have everything

00:09:31.005 --> 00:09:32.685
<v Speaker 1>that you need to have in a in

00:09:32.685 --> 00:09:35.140
<v Speaker 1>a Kubernetes cluster so that it it actually

00:09:35.140 --> 00:09:38.020
<v Speaker 1>works. So we bundle, like, container d for

00:09:38.020 --> 00:09:41.140
<v Speaker 1>the runtime. We bundle qProductor or Calico as

00:09:41.140 --> 00:09:42.180
<v Speaker 1>the CNI.

00:09:42.980 --> 00:09:44.500
<v Speaker 1>There, of course, etcd

00:09:44.660 --> 00:09:47.540
<v Speaker 1>for for data plane for the for the

00:09:47.620 --> 00:09:50.475
<v Speaker 1>data store as the as the state for

00:09:50.475 --> 00:09:51.675
<v Speaker 1>the control plane.

00:09:52.875 --> 00:09:55.195
<v Speaker 1>We've also added up that this client

00:09:55.435 --> 00:09:58.635
<v Speaker 1>from the from the k three s side.

00:09:59.435 --> 00:10:01.675
<v Speaker 1>So you can actually use SQLite or or

00:10:01.675 --> 00:10:03.595
<v Speaker 1>even MySQL as the as the data store.

00:10:04.520 --> 00:10:06.920
<v Speaker 1>But everything everything can be actually swapped to

00:10:06.920 --> 00:10:09.000
<v Speaker 1>your favorite solution if you if you really

00:10:09.000 --> 00:10:11.000
<v Speaker 1>need. So you can you can bring your

00:10:11.000 --> 00:10:13.320
<v Speaker 1>own container runtime if you if you have

00:10:13.320 --> 00:10:15.480
<v Speaker 1>a a good reason for use, like like

00:10:15.480 --> 00:10:16.280
<v Speaker 1>Docker,

00:10:16.280 --> 00:10:18.120
<v Speaker 1>for example. You can you can still use

00:10:18.120 --> 00:10:20.040
<v Speaker 1>that and and or

00:10:21.214 --> 00:10:22.894
<v Speaker 1>or or something else.

00:10:25.214 --> 00:10:26.574
<v Speaker 1>Then, of course, you can you can also

00:10:26.574 --> 00:10:29.855
<v Speaker 1>bring your own, like like, CNI implementation for,

00:10:30.014 --> 00:10:31.454
<v Speaker 1>for example, if you need to use or

00:10:31.454 --> 00:10:33.615
<v Speaker 1>want to use Weave or or something else

00:10:33.615 --> 00:10:35.134
<v Speaker 1>or Selium or something.

00:10:40.209 --> 00:10:41.970
<v Speaker 1>One of the one of the sort of

00:10:41.970 --> 00:10:42.769
<v Speaker 1>design

00:10:42.930 --> 00:10:43.890
<v Speaker 1>design

00:10:44.290 --> 00:10:46.209
<v Speaker 1>kind of drivers that we have is that

00:10:46.209 --> 00:10:49.089
<v Speaker 1>we we wanna we wanna keep the core

00:10:49.089 --> 00:10:51.305
<v Speaker 1>k zeros as a as a sort of

00:10:51.305 --> 00:10:53.545
<v Speaker 1>a bare bones. Like like,

00:10:55.145 --> 00:10:56.665
<v Speaker 1>I I think one way to one way

00:10:56.665 --> 00:10:58.265
<v Speaker 1>to describe it is to to to keep

00:10:58.265 --> 00:11:01.145
<v Speaker 1>it as as sort of a un opinionated.

00:11:01.785 --> 00:11:04.120
<v Speaker 1>So so that's one of the reasons why

00:11:04.120 --> 00:11:06.279
<v Speaker 1>we don't, like, bundle a lot of different

00:11:06.279 --> 00:11:09.000
<v Speaker 1>things. Like, we don't bundle, like, like, ingress

00:11:09.000 --> 00:11:11.560
<v Speaker 1>these service meshes or or anything into the

00:11:11.560 --> 00:11:13.320
<v Speaker 1>into the core k zeros

00:11:13.560 --> 00:11:14.199
<v Speaker 1>because

00:11:15.015 --> 00:11:17.895
<v Speaker 1>they they those those though you know, on

00:11:17.895 --> 00:11:20.375
<v Speaker 1>on that level, you have, like like, way

00:11:20.375 --> 00:11:21.655
<v Speaker 1>too many opinions.

00:11:21.815 --> 00:11:23.895
<v Speaker 1>So we are not really in the position

00:11:23.895 --> 00:11:25.575
<v Speaker 1>that that we can we can make a

00:11:25.575 --> 00:11:28.055
<v Speaker 1>selection for the for the majority of the

00:11:28.055 --> 00:11:30.990
<v Speaker 1>users that, okay, everybody should use this ingress.

00:11:33.230 --> 00:11:35.150
<v Speaker 1>We, of course, do have ways how to

00:11:35.150 --> 00:11:37.870
<v Speaker 1>how to sort of extend the the the

00:11:37.950 --> 00:11:40.350
<v Speaker 1>the core k zeros, and and and we've

00:11:40.350 --> 00:11:42.270
<v Speaker 1>built in mechanisms

00:11:42.270 --> 00:11:45.310
<v Speaker 1>that you can bay basically dump dump set

00:11:45.310 --> 00:11:45.710
<v Speaker 1>of

00:11:46.235 --> 00:11:48.954
<v Speaker 1>YAML on the on a certain place on

00:11:48.954 --> 00:11:50.875
<v Speaker 1>the on the disk on a controller node,

00:11:50.875 --> 00:11:52.875
<v Speaker 1>and and it'll be applied automatically.

00:11:52.875 --> 00:11:54.875
<v Speaker 1>Or or you you can you can actually

00:11:54.875 --> 00:11:56.315
<v Speaker 1>deploy Helm charts

00:11:56.555 --> 00:12:00.300
<v Speaker 1>via the the k0s configuration directly. So that's

00:12:00.300 --> 00:12:02.620
<v Speaker 1>sort of a reconciler for that also available.

00:12:02.620 --> 00:12:03.180
<v Speaker 1>So

00:12:03.740 --> 00:12:04.700
<v Speaker 1>but, of course,

00:12:05.100 --> 00:12:06.380
<v Speaker 1>in the end, it's just

00:12:07.580 --> 00:12:08.620
<v Speaker 1>Kubernetes.

00:12:08.620 --> 00:12:10.700
<v Speaker 1>So so you can, of course, extend it

00:12:10.700 --> 00:12:13.020
<v Speaker 1>in in in in many, different ways.

00:12:16.785 --> 00:12:20.384
<v Speaker 1>So I I already mentioned that that we

00:12:20.384 --> 00:12:22.464
<v Speaker 1>we we have this k0s as a single

00:12:22.464 --> 00:12:25.024
<v Speaker 1>binary. So so it's one way to look

00:12:25.024 --> 00:12:27.185
<v Speaker 1>at it is is actually that it's it's

00:12:27.185 --> 00:12:29.024
<v Speaker 1>sort of a self extracting binary.

00:12:31.000 --> 00:12:32.120
<v Speaker 1>So so

00:12:32.360 --> 00:12:33.960
<v Speaker 1>it's actually compiled

00:12:33.960 --> 00:12:36.200
<v Speaker 1>or or built in a way that that

00:12:36.200 --> 00:12:38.520
<v Speaker 1>we, of course, have the the k0s binary

00:12:38.520 --> 00:12:40.840
<v Speaker 1>itself, which has the the all the logic

00:12:40.840 --> 00:12:43.095
<v Speaker 1>of of setting up different components and running

00:12:43.095 --> 00:12:45.335
<v Speaker 1>those and configuring everything on the on the

00:12:45.335 --> 00:12:46.535
<v Speaker 1>Kubernetes side.

00:12:48.375 --> 00:12:51.655
<v Speaker 1>But do the basically basically, we append

00:12:51.815 --> 00:12:54.535
<v Speaker 1>differ other other binaries at the end of

00:12:54.535 --> 00:12:56.615
<v Speaker 1>the the the k zero's binary file.

00:12:57.670 --> 00:13:00.150
<v Speaker 1>And then at compile time, we actually calculate

00:13:00.150 --> 00:13:02.390
<v Speaker 1>the offset of different files. And and and

00:13:02.390 --> 00:13:04.870
<v Speaker 1>when we run k zero's, we actually extract

00:13:04.870 --> 00:13:08.390
<v Speaker 1>the binaries out at at at runtime on

00:13:08.390 --> 00:13:10.355
<v Speaker 1>the fly, and and and then we can

00:13:10.355 --> 00:13:12.915
<v Speaker 1>boot up to API container d and and

00:13:12.915 --> 00:13:15.315
<v Speaker 1>all the other needed processes as as separate

00:13:15.315 --> 00:13:16.115
<v Speaker 1>binaries.

00:13:18.195 --> 00:13:19.954
<v Speaker 1>So this is this is something that that

00:13:19.954 --> 00:13:21.555
<v Speaker 1>that we implemented in a in a quite

00:13:21.555 --> 00:13:24.355
<v Speaker 1>different way than compared, for example, to k

00:13:23.610 --> 00:13:26.089
<v Speaker 1>k three s. So so on k three

00:13:26.089 --> 00:13:28.649
<v Speaker 1>s, they they they basically compile everything into

00:13:28.649 --> 00:13:32.170
<v Speaker 1>a single binary and then just run different

00:13:32.170 --> 00:13:34.329
<v Speaker 1>things like you'd be APIs and others as

00:13:34.329 --> 00:13:36.649
<v Speaker 1>as basically as go routines on the on

00:13:36.649 --> 00:13:37.209
<v Speaker 1>the runtime.

00:13:39.085 --> 00:13:41.085
<v Speaker 1>In our case, the the cube API and

00:13:41.085 --> 00:13:43.565
<v Speaker 1>everything else, they are, like, real separate processes

00:13:43.565 --> 00:13:44.925
<v Speaker 1>on the on the host.

00:13:45.245 --> 00:13:46.685
<v Speaker 0>Can I ask a question?

00:13:47.085 --> 00:13:49.805
<v Speaker 0>Of course. Does that mean that k0s is,

00:13:49.805 --> 00:13:50.045
<v Speaker 0>like,

00:13:50.649 --> 00:13:53.770
<v Speaker 0>really just a supervisor for these other processes?

00:13:54.250 --> 00:13:57.130
<v Speaker 1>Yes. Yes. Yes. It's a it's a it's

00:13:57.130 --> 00:13:59.450
<v Speaker 1>a glorified process supervisor.

00:13:59.450 --> 00:14:02.810
<v Speaker 0>Yes. I like that approach. Very cool. Yep.

00:14:02.970 --> 00:14:03.290
<v Speaker 1>Yep.

00:14:09.015 --> 00:14:11.495
<v Speaker 1>About the control plane isolation, the the because

00:14:11.495 --> 00:14:13.975
<v Speaker 1>that's that that's something that that

00:14:13.975 --> 00:14:16.695
<v Speaker 1>that really is is a different thing compared

00:14:16.695 --> 00:14:17.255
<v Speaker 1>to

00:14:18.120 --> 00:14:20.440
<v Speaker 1>all the all the other distros that I

00:14:20.440 --> 00:14:21.880
<v Speaker 1>know of, at least.

00:14:22.200 --> 00:14:24.200
<v Speaker 1>Somebody might correct me if I'm wrong if

00:14:24.200 --> 00:14:26.760
<v Speaker 1>if there's some some other distro that implements

00:14:26.760 --> 00:14:27.800
<v Speaker 1>a similar thing.

00:14:28.520 --> 00:14:30.360
<v Speaker 1>So so as I as I mentioned, the

00:14:30.360 --> 00:14:32.665
<v Speaker 1>the cubelet, for example, is is is not

00:14:32.665 --> 00:14:34.425
<v Speaker 1>running on the controller nodes.

00:14:34.825 --> 00:14:36.985
<v Speaker 1>So we don't really need any need to

00:14:36.985 --> 00:14:40.505
<v Speaker 1>play with the the and tolerations and whatnot

00:14:40.585 --> 00:14:42.745
<v Speaker 1>to to to kind of isolate the control

00:14:42.745 --> 00:14:44.425
<v Speaker 1>plane nodes from the from the cluster.

00:14:46.580 --> 00:14:48.580
<v Speaker 1>And and and that

00:14:48.740 --> 00:14:50.580
<v Speaker 1>is that is something something if you if

00:14:50.580 --> 00:14:53.220
<v Speaker 1>you consider, like, your your typical

00:14:53.380 --> 00:14:55.940
<v Speaker 1>typical cluster setup with, for example, with q

00:14:56.100 --> 00:14:57.060
<v Speaker 1>KubeDM,

00:14:57.220 --> 00:14:58.180
<v Speaker 1>you get this

00:14:58.815 --> 00:15:01.215
<v Speaker 1>master node, which has these taints,

00:15:01.455 --> 00:15:02.895
<v Speaker 1>and and then you have to play with

00:15:02.895 --> 00:15:05.375
<v Speaker 1>lot of lot of tolerations and and and

00:15:05.375 --> 00:15:07.695
<v Speaker 1>whatnot with the with the workloads where you

00:15:07.855 --> 00:15:09.855
<v Speaker 1>when you're scheduling and and where you're scheduling

00:15:09.855 --> 00:15:10.735
<v Speaker 1>things at.

00:15:11.215 --> 00:15:12.335
<v Speaker 1>So so

00:15:13.420 --> 00:15:15.740
<v Speaker 1>we we wanted to get get sort of

00:15:15.740 --> 00:15:17.580
<v Speaker 1>away from that that

00:15:18.300 --> 00:15:19.580
<v Speaker 1>that paradigm.

00:15:19.980 --> 00:15:22.940
<v Speaker 1>And and and there's no, like, like, standard

00:15:23.260 --> 00:15:24.220
<v Speaker 1>or back

00:15:24.700 --> 00:15:27.260
<v Speaker 1>controls that would allow to say that, okay.

00:15:27.894 --> 00:15:30.375
<v Speaker 1>You see it's it's stupid enough that we

00:15:30.375 --> 00:15:32.855
<v Speaker 1>don't allow him to to to deploy anything

00:15:32.855 --> 00:15:34.695
<v Speaker 1>on the controller notes, for example.

00:15:35.575 --> 00:15:37.334
<v Speaker 1>You don't really have that those sort of

00:15:37.334 --> 00:15:39.735
<v Speaker 1>a standard controls for that in in Kubernetes.

00:15:40.510 --> 00:15:42.990
<v Speaker 1>Of course, you could do your own admission

00:15:42.990 --> 00:15:47.310
<v Speaker 1>controllers or or OPA policies or whatnot, but

00:15:47.310 --> 00:15:48.590
<v Speaker 1>but we

00:15:49.630 --> 00:15:51.950
<v Speaker 1>we wanted to wanted to really have a,

00:15:51.950 --> 00:15:55.095
<v Speaker 1>like, a full isolation with things things like,

00:15:55.095 --> 00:15:57.495
<v Speaker 1>say, scheduling to a control node is just

00:15:57.495 --> 00:15:59.175
<v Speaker 1>not technically possible.

00:16:00.135 --> 00:16:02.375
<v Speaker 1>It sort of simplifies things quite a bit.

00:16:05.829 --> 00:16:07.750
<v Speaker 1>What it actually allows us to do is

00:16:07.750 --> 00:16:10.230
<v Speaker 1>is also have a lot of versatility on

00:16:10.230 --> 00:16:11.750
<v Speaker 1>the deployment architectures.

00:16:12.149 --> 00:16:12.709
<v Speaker 1>So

00:16:13.990 --> 00:16:17.350
<v Speaker 1>we we we use this this connectivity

00:16:17.430 --> 00:16:18.310
<v Speaker 1>component

00:16:19.064 --> 00:16:22.264
<v Speaker 1>to to actually enable the communication between the

00:16:22.264 --> 00:16:24.345
<v Speaker 1>controllers and the worker nodes.

00:16:24.745 --> 00:16:25.305
<v Speaker 1>So,

00:16:26.584 --> 00:16:27.225
<v Speaker 1>basically,

00:16:27.704 --> 00:16:30.185
<v Speaker 1>the connectivity agent running on an on an

00:16:30.185 --> 00:16:33.144
<v Speaker 1>each worker node opens up a tunnel

00:16:33.890 --> 00:16:34.690
<v Speaker 1>to the

00:16:35.090 --> 00:16:36.290
<v Speaker 1>control nodes.

00:16:36.610 --> 00:16:39.170
<v Speaker 1>And then the control node, whenever like like,

00:16:39.170 --> 00:16:40.370
<v Speaker 1>whenever the API

00:16:40.529 --> 00:16:42.850
<v Speaker 1>API server needs to call the cube, let

00:16:42.930 --> 00:16:45.810
<v Speaker 1>to to exec into a port, like, the

00:16:45.810 --> 00:16:47.650
<v Speaker 1>logs of a port or or

00:16:48.585 --> 00:16:50.905
<v Speaker 1>port forwards and and whatnot.

00:16:51.305 --> 00:16:54.665
<v Speaker 1>The connection actually goes to through this tunnel.

00:16:54.985 --> 00:16:56.505
<v Speaker 1>So so you can think of it as

00:16:56.505 --> 00:16:58.825
<v Speaker 1>as as sort of a, like like, reverse

00:16:58.825 --> 00:17:00.345
<v Speaker 1>SSH tunnel in a way.

00:17:02.269 --> 00:17:04.669
<v Speaker 1>So what this really allows us to do

00:17:04.669 --> 00:17:06.190
<v Speaker 1>is is is

00:17:06.190 --> 00:17:09.230
<v Speaker 1>deployment architectures where your controllers can be actually

00:17:09.230 --> 00:17:11.309
<v Speaker 1>running on a, say, public cloud

00:17:11.790 --> 00:17:14.589
<v Speaker 1>and your workers running on your private data

00:17:14.589 --> 00:17:17.684
<v Speaker 1>center with no direct access from the Internet

00:17:17.684 --> 00:17:18.484
<v Speaker 1>at all.

00:17:19.684 --> 00:17:22.005
<v Speaker 1>I actually have a setup on my desk

00:17:22.005 --> 00:17:25.284
<v Speaker 1>here where I have couple of industrial PCs

00:17:25.365 --> 00:17:28.645
<v Speaker 1>running worker nodes, the controller for those is

00:17:28.645 --> 00:17:29.365
<v Speaker 1>actually on a cloud.

00:17:30.150 --> 00:17:32.870
<v Speaker 1>And my home connection definitely is not connected

00:17:32.870 --> 00:17:35.110
<v Speaker 1>to the or, I mean, it's connected to

00:17:35.110 --> 00:17:37.030
<v Speaker 1>Internet, of course, yeah, but but not from

00:17:37.030 --> 00:17:38.630
<v Speaker 1>the Internet. I don't I don't have any

00:17:38.630 --> 00:17:40.950
<v Speaker 1>port forwards or anything. So so it's a

00:17:40.950 --> 00:17:42.150
<v Speaker 1>it's a sort of a neat

00:17:42.645 --> 00:17:45.845
<v Speaker 1>neat way of enabling this needed communication and

00:17:45.845 --> 00:17:48.325
<v Speaker 1>still having, like, a lot of versatility on

00:17:48.325 --> 00:17:51.365
<v Speaker 1>this network segmentation and and whatnot.

00:17:52.485 --> 00:17:52.965
<v Speaker 0>Nice.

00:17:58.900 --> 00:18:01.220
<v Speaker 1>Alright. I think that's about it as a

00:18:01.220 --> 00:18:03.620
<v Speaker 1>as a slide intros. We can, of course,

00:18:03.620 --> 00:18:06.100
<v Speaker 1>talk about a lot of these these points

00:18:06.100 --> 00:18:08.900
<v Speaker 1>while we go through the hands on parts.

00:18:09.620 --> 00:18:11.675
<v Speaker 0>Yeah. Great. Thank you for that. That answered

00:18:11.675 --> 00:18:13.435
<v Speaker 0>a lot of the the questions that I

00:18:13.435 --> 00:18:15.515
<v Speaker 0>kinda had in my head coming into this.

00:18:15.675 --> 00:18:17.915
<v Speaker 0>The firewall one and the way the communication

00:18:17.915 --> 00:18:19.915
<v Speaker 0>works is fantastic. That was always one of

00:18:19.915 --> 00:18:21.915
<v Speaker 0>my favorite things about SaltStack is the fact

00:18:21.915 --> 00:18:24.155
<v Speaker 0>that, you know, the control plane or the

00:18:24.155 --> 00:18:26.560
<v Speaker 0>SaltStack master as they call it, the workers

00:18:26.560 --> 00:18:27.760
<v Speaker 0>only had to be able to open a

00:18:27.760 --> 00:18:29.440
<v Speaker 0>connection to that. And then they use the

00:18:29.440 --> 00:18:31.360
<v Speaker 0>zero m q messaging all the for all

00:18:31.360 --> 00:18:32.960
<v Speaker 0>the stuff back and forward. So it was

00:18:32.960 --> 00:18:34.640
<v Speaker 0>always the minions

00:18:34.640 --> 00:18:36.320
<v Speaker 0>or the worker that was in control of

00:18:36.320 --> 00:18:38.240
<v Speaker 0>the communication. It just makes the firewall rules

00:18:38.240 --> 00:18:40.205
<v Speaker 0>so simple because they just have to be

00:18:40.205 --> 00:18:41.485
<v Speaker 0>able to speak to this one thing over

00:18:41.485 --> 00:18:42.445
<v Speaker 0>here, and then you don't have to worry

00:18:42.445 --> 00:18:44.525
<v Speaker 0>about anything else because of the the tunnel

00:18:44.525 --> 00:18:46.605
<v Speaker 0>approach. Very nice. Exactly. Exactly.

00:18:47.805 --> 00:18:49.885
<v Speaker 1>And there's the the the surprisingly

00:18:49.965 --> 00:18:52.445
<v Speaker 1>surprisingly many features on the on the for

00:18:52.445 --> 00:18:54.765
<v Speaker 1>example, that are really tested on the on

00:18:54.765 --> 00:18:55.165
<v Speaker 1>the

00:18:55.780 --> 00:18:58.340
<v Speaker 1>conformance program even that really

00:18:58.740 --> 00:18:59.220
<v Speaker 1>must

00:18:59.620 --> 00:19:02.580
<v Speaker 1>where the where the API server must really

00:19:02.580 --> 00:19:05.060
<v Speaker 1>be able to open connections to the to

00:19:05.060 --> 00:19:06.180
<v Speaker 1>the kubelet, for example.

00:19:08.675 --> 00:19:10.275
<v Speaker 0>Okay. So we got

00:19:10.675 --> 00:19:11.475
<v Speaker 0>a question

00:19:11.795 --> 00:19:14.434
<v Speaker 0>in the chat, and it's from Ty.

00:19:14.755 --> 00:19:16.355
<v Speaker 0>We have a small follow-up from Daniel. So

00:19:16.355 --> 00:19:17.875
<v Speaker 0>Ty is just asking if we can talk

00:19:17.875 --> 00:19:20.115
<v Speaker 0>about maybe a comparison with k three's mini

00:19:20.115 --> 00:19:22.515
<v Speaker 0>cube, and Daniel has added on micro kits.

00:19:23.030 --> 00:19:25.030
<v Speaker 0>And I think we've kinda covered that. It

00:19:25.030 --> 00:19:26.470
<v Speaker 0>was already your slides, but is there anything

00:19:26.470 --> 00:19:27.990
<v Speaker 0>you wanted to add to that just to

00:19:27.990 --> 00:19:28.549
<v Speaker 0>kinda

00:19:29.669 --> 00:19:31.190
<v Speaker 0>add a bit more extra flavor?

00:19:32.309 --> 00:19:35.684
<v Speaker 1>Yeah. Well well, I I think as as

00:19:35.684 --> 00:19:38.005
<v Speaker 1>as we've kind of learned from the from

00:19:38.005 --> 00:19:39.845
<v Speaker 1>the get go is that that the the

00:19:39.845 --> 00:19:42.005
<v Speaker 1>most comparisons that we get is is with

00:19:42.005 --> 00:19:44.725
<v Speaker 1>k three s. And and I I think

00:19:44.725 --> 00:19:47.285
<v Speaker 1>partially we we throw ourselves with the naming

00:19:47.285 --> 00:19:49.870
<v Speaker 1>into the into the discussion, discussion, but but

00:19:49.870 --> 00:19:51.549
<v Speaker 1>that's a that's another discussion.

00:19:53.630 --> 00:19:54.669
<v Speaker 1>So so

00:19:56.670 --> 00:19:59.150
<v Speaker 1>I I think the main main technical difference

00:19:59.150 --> 00:20:00.830
<v Speaker 1>is the is is the fact that we

00:20:00.830 --> 00:20:02.830
<v Speaker 1>have this true control plane isolation

00:20:02.910 --> 00:20:05.385
<v Speaker 1>from the from the day one, and and

00:20:05.385 --> 00:20:07.784
<v Speaker 1>and it's sort of a not really hard

00:20:07.784 --> 00:20:10.024
<v Speaker 1>coded. You of course, nothing prevents you to

00:20:10.024 --> 00:20:11.865
<v Speaker 1>run the worker parts also on the same

00:20:11.865 --> 00:20:13.705
<v Speaker 1>nodes. Yeah. But then you have to take

00:20:13.705 --> 00:20:16.024
<v Speaker 1>care of the the taints and tolerations again.

00:20:16.024 --> 00:20:18.105
<v Speaker 1>So it's it's not really the, like, the

00:20:18.600 --> 00:20:21.799
<v Speaker 1>default way of of of deploying k0s.

00:20:24.280 --> 00:20:25.559
<v Speaker 1>Maybe maybe

00:20:25.960 --> 00:20:29.960
<v Speaker 1>one other other kind of real different differentiator

00:20:29.960 --> 00:20:33.284
<v Speaker 1>is is how we run these cube APIs

00:20:33.284 --> 00:20:35.924
<v Speaker 1>and container DS and whatnot. So so so

00:20:35.924 --> 00:20:37.605
<v Speaker 1>in case errors, they are really running as

00:20:37.605 --> 00:20:39.284
<v Speaker 1>as separate processes.

00:20:39.365 --> 00:20:41.605
<v Speaker 1>So it's not like everything is embedded into

00:20:41.605 --> 00:20:43.205
<v Speaker 1>a a single process.

00:20:43.684 --> 00:20:45.924
<v Speaker 1>Of course, there's like like with any solution,

00:20:45.924 --> 00:20:47.980
<v Speaker 1>there are pros and cons of of each

00:20:47.980 --> 00:20:49.419
<v Speaker 1>of these. So so

00:20:51.100 --> 00:20:51.899
<v Speaker 1>but in in

00:20:52.460 --> 00:20:53.820
<v Speaker 1>at least in in

00:20:54.140 --> 00:20:56.539
<v Speaker 1>in how we've been working with k0s

00:20:56.539 --> 00:20:58.700
<v Speaker 1>now for the for the year or past

00:20:58.700 --> 00:20:59.340
<v Speaker 1>year or so,

00:21:00.295 --> 00:21:03.095
<v Speaker 1>I think it is this actually having having,

00:21:03.095 --> 00:21:05.415
<v Speaker 1>like, this vanilla upstream Kubernetes

00:21:05.415 --> 00:21:06.455
<v Speaker 1>binaries.

00:21:06.455 --> 00:21:09.735
<v Speaker 1>It actually makes us makes us able to

00:21:09.735 --> 00:21:12.535
<v Speaker 1>really move fast. So so say that there's,

00:21:12.535 --> 00:21:14.950
<v Speaker 1>like, like, a new patch release of Kubernetes.

00:21:14.950 --> 00:21:18.150
<v Speaker 1>It's basically ours that we can ship new

00:21:18.150 --> 00:21:20.550
<v Speaker 1>k0s version because we don't have to deal

00:21:20.550 --> 00:21:22.470
<v Speaker 1>with the call module dependencies

00:21:22.470 --> 00:21:24.550
<v Speaker 1>and and and whatnot because

00:21:24.950 --> 00:21:27.830
<v Speaker 1>that that's always a nightmare when with Kubernetes.

00:21:28.150 --> 00:21:28.470
<v Speaker 0>Definitely.

00:21:31.085 --> 00:21:32.205
<v Speaker 0>Okay.

00:21:32.205 --> 00:21:33.965
<v Speaker 0>We're gonna get hands on in just a

00:21:33.965 --> 00:21:34.845
<v Speaker 0>minute. There's

00:21:35.165 --> 00:21:36.765
<v Speaker 0>one more question in the chat. I'll throw

00:21:36.765 --> 00:21:38.044
<v Speaker 0>up from Russell,

00:21:38.685 --> 00:21:40.525
<v Speaker 0>who is asking, can you balance the control

00:21:40.525 --> 00:21:42.845
<v Speaker 0>plane across local and cloud servers?

00:21:43.500 --> 00:21:45.100
<v Speaker 0>I'm assuming if you wanted a highly available

00:21:45.100 --> 00:21:47.179
<v Speaker 0>control plane, can you distribute them?

00:21:47.500 --> 00:21:49.500
<v Speaker 1>Yes. Yes. You can. You can.

00:21:49.900 --> 00:21:52.380
<v Speaker 1>But, of course, if you if you have

00:21:52.620 --> 00:21:55.675
<v Speaker 1>multiple controllers, you have to have, like, some

00:21:55.675 --> 00:21:58.475
<v Speaker 1>sort of a load balancer that that balances

00:21:58.475 --> 00:22:01.675
<v Speaker 1>the load between those those servers. Yeah. And

00:22:01.675 --> 00:22:04.395
<v Speaker 0>be careful of cloud providers ingress and egress

00:22:04.395 --> 00:22:05.515
<v Speaker 0>costs, Russell.

00:22:05.835 --> 00:22:06.715
<v Speaker 0>Very good.

00:22:08.075 --> 00:22:08.395
<v Speaker 0>Yeah.

00:22:09.179 --> 00:22:11.419
<v Speaker 0>Alright. Let me get my screen shared.

00:22:11.500 --> 00:22:13.340
<v Speaker 0>Keep the questions coming. We'll do our best

00:22:13.340 --> 00:22:15.179
<v Speaker 0>to answer them as we go. We're gonna

00:22:15.179 --> 00:22:16.219
<v Speaker 0>install

00:22:16.220 --> 00:22:18.940
<v Speaker 0>k zeros now on a couple of machines.

00:22:19.179 --> 00:22:21.179
<v Speaker 0>But I've got the homepage available.

00:22:21.179 --> 00:22:22.539
<v Speaker 0>I have the documentation.

00:22:23.554 --> 00:22:24.914
<v Speaker 0>I have my

00:22:25.155 --> 00:22:28.115
<v Speaker 0>Equinix metal servers. So I've got four. I

00:22:28.115 --> 00:22:29.715
<v Speaker 0>don't know what we're gonna do with them.

00:22:29.715 --> 00:22:31.475
<v Speaker 0>I assume one will do a maybe a

00:22:31.475 --> 00:22:33.315
<v Speaker 0>manual installation, and then we'll look at other

00:22:33.315 --> 00:22:34.835
<v Speaker 0>options for the other three.

00:22:35.395 --> 00:22:37.554
<v Speaker 0>Yep. Sounds good. Okay. So

00:22:38.570 --> 00:22:40.009
<v Speaker 0>we'll choose the

00:22:40.570 --> 00:22:42.809
<v Speaker 0>the getting started guide here. So

00:22:43.130 --> 00:22:45.450
<v Speaker 0>it seems to be the popular pattern these

00:22:45.450 --> 00:22:48.009
<v Speaker 0>days, but curl bash is the

00:22:48.490 --> 00:22:51.485
<v Speaker 0>installation method of choice. Is that what, like

00:22:51.725 --> 00:22:53.245
<v Speaker 0>I guess that's that's there is a convenience

00:22:53.245 --> 00:22:54.845
<v Speaker 0>for people that want to experiment. Cut the

00:22:54.845 --> 00:22:56.765
<v Speaker 0>tires, have a play with this. Yes.

00:22:56.765 --> 00:22:57.325
<v Speaker 1>Absolute

00:22:57.965 --> 00:23:00.045
<v Speaker 1>I mean, of course, nobody should

00:23:00.605 --> 00:23:02.365
<v Speaker 1>curl pipe bash

00:23:02.605 --> 00:23:05.725
<v Speaker 1>in production or any any, like, real environments.

00:23:05.965 --> 00:23:06.205
<v Speaker 1>So

00:23:08.010 --> 00:23:10.010
<v Speaker 1>so yeah. But but but but it's it's,

00:23:10.010 --> 00:23:12.090
<v Speaker 1>of course, it's it's, of course, convenient to

00:23:12.090 --> 00:23:13.930
<v Speaker 1>to to have these sort of face scripts

00:23:13.930 --> 00:23:17.290
<v Speaker 1>for for purposes like like today, for example.

00:23:18.010 --> 00:23:18.730
<v Speaker 0>Yeah. Definitely.

00:23:19.375 --> 00:23:20.335
<v Speaker 0>So this is

00:23:20.735 --> 00:23:22.974
<v Speaker 0>a bit to 20 o four machine.

00:23:23.215 --> 00:23:25.215
<v Speaker 0>I don't need to do anything. I can

00:23:25.215 --> 00:23:27.294
<v Speaker 0>just literally run this and it's gonna work.

00:23:27.375 --> 00:23:29.215
<v Speaker 0>And you mentioned on your slides that it

00:23:29.375 --> 00:23:30.815
<v Speaker 0>it's OS agnostic.

00:23:31.740 --> 00:23:33.980
<v Speaker 0>Yep. It can really just run anywhere. I

00:23:33.980 --> 00:23:35.980
<v Speaker 0>guess that's the beauty of just it being

00:23:35.980 --> 00:23:38.620
<v Speaker 0>aesthetically compelled by anywhere. Like, it'll Yep.

00:23:39.180 --> 00:23:41.420
<v Speaker 0>It'll run almost anywhere. Do you see people

00:23:41.420 --> 00:23:42.940
<v Speaker 0>using k0s

00:23:42.940 --> 00:23:43.660
<v Speaker 0>for

00:23:44.145 --> 00:23:46.785
<v Speaker 0>like I mean, this is a sizable machine.

00:23:46.785 --> 00:23:48.945
<v Speaker 0>You know? But I guess it runs on

00:23:48.945 --> 00:23:50.145
<v Speaker 0>IoT and

00:23:51.105 --> 00:23:53.185
<v Speaker 0>single board, Raspberry Pis, all that kind of

00:23:53.185 --> 00:23:54.065
<v Speaker 0>stuff as well?

00:23:55.585 --> 00:23:58.065
<v Speaker 1>But at at at least the worker part.

00:23:58.065 --> 00:24:00.310
<v Speaker 1>Yeah. Yeah. Because, I mean, in in the

00:24:00.310 --> 00:24:02.390
<v Speaker 1>end, we we we we have to remember

00:24:02.390 --> 00:24:04.390
<v Speaker 1>that the the control plan is is running

00:24:04.390 --> 00:24:07.590
<v Speaker 1>stuff like Kubernetes API at CD, which are,

00:24:07.750 --> 00:24:10.070
<v Speaker 1>as we know, quite resource hungry.

00:24:10.150 --> 00:24:10.390
<v Speaker 1>So

00:24:11.445 --> 00:24:12.084
<v Speaker 1>so

00:24:12.245 --> 00:24:15.044
<v Speaker 1>they they do take, like, at least a

00:24:15.044 --> 00:24:17.445
<v Speaker 1>gigabyte of RAM to to to be able

00:24:17.445 --> 00:24:19.845
<v Speaker 1>to really run the control plane. But the

00:24:19.845 --> 00:24:22.085
<v Speaker 1>the the the worker plane is actually actually

00:24:22.085 --> 00:24:24.404
<v Speaker 1>quite quite slim in a in a way

00:24:24.404 --> 00:24:25.044
<v Speaker 1>that

00:24:25.205 --> 00:24:28.200
<v Speaker 1>that that on on worker plan, the k0s

00:24:28.200 --> 00:24:30.680
<v Speaker 1>process itself, it's it's not really doing much

00:24:30.680 --> 00:24:34.280
<v Speaker 1>more than than being the glorified process supervisor.

00:24:34.280 --> 00:24:34.760
<v Speaker 1>So

00:24:36.360 --> 00:24:37.960
<v Speaker 1>I I I think it's nowadays

00:24:38.804 --> 00:24:41.684
<v Speaker 1>roughly 200 megs of RAM that it uses.

00:24:43.365 --> 00:24:44.404
<v Speaker 0>Right. Okay.

00:24:44.804 --> 00:24:46.404
<v Speaker 0>Yeah. Can get on board with that.

00:24:47.684 --> 00:24:48.884
<v Speaker 0>How big is the binary?

00:24:50.085 --> 00:24:50.964
<v Speaker 1>About

00:24:51.284 --> 00:24:54.245
<v Speaker 1>200 megs. Yeah. 70. One 70 five, it

00:24:54.245 --> 00:24:55.260
<v Speaker 1>seems. Yeah.

00:24:55.660 --> 00:24:56.299
<v Speaker 0>Alright.

00:24:56.620 --> 00:24:59.580
<v Speaker 0>Nice. That's just because we embed everything into

00:24:59.580 --> 00:25:01.100
<v Speaker 1>the same binary.

00:25:01.180 --> 00:25:03.020
<v Speaker 1>So Yeah. So this is

00:25:03.340 --> 00:25:04.860
<v Speaker 0>your k0s

00:25:04.860 --> 00:25:06.460
<v Speaker 0>extractor and supervisor.

00:25:06.460 --> 00:25:08.745
<v Speaker 0>You've got container d. You've got the cube

00:25:08.745 --> 00:25:10.745
<v Speaker 0>API server, and I guess in the cube

00:25:10.745 --> 00:25:12.984
<v Speaker 0>scheduler, the cube controller manager.

00:25:13.065 --> 00:25:14.985
<v Speaker 0>You got all of these things stuffed into

00:25:14.985 --> 00:25:16.664
<v Speaker 0>there. But I I I really do like

00:25:16.664 --> 00:25:18.904
<v Speaker 0>the supervisor approach rather than the the go

00:25:18.904 --> 00:25:21.304
<v Speaker 0>routine approach. I think that's that's pretty nice.

00:25:21.625 --> 00:25:22.424
<v Speaker 1>Yep. Yep.

00:25:23.260 --> 00:25:26.460
<v Speaker 0>Okay. So we can use the k zero's

00:25:26.460 --> 00:25:28.940
<v Speaker 0>binary. So it's obviously got some helper sub

00:25:28.940 --> 00:25:29.980
<v Speaker 0>commands here.

00:25:30.220 --> 00:25:33.100
<v Speaker 0>Yep. And this allows me to install k

00:25:33.100 --> 00:25:35.740
<v Speaker 0>zero's as a service on my machine. Okay.

00:25:36.460 --> 00:25:36.860
<v Speaker 1>Yep.

00:25:39.905 --> 00:25:40.945
<v Speaker 0>Let's just see what

00:25:41.905 --> 00:25:43.105
<v Speaker 0>let's see what we've got.

00:25:45.825 --> 00:25:47.745
<v Speaker 1>There's there's quite a few quite a few

00:25:47.745 --> 00:25:49.105
<v Speaker 1>different commands

00:25:49.105 --> 00:25:51.745
<v Speaker 1>and and and help our functionalities on the

00:25:51.745 --> 00:25:53.025
<v Speaker 1>on the binary too. So

00:25:53.900 --> 00:25:55.340
<v Speaker 0>Yeah. I can see

00:25:56.380 --> 00:25:59.340
<v Speaker 0>we've got an area gap set up. We've

00:25:59.340 --> 00:26:00.859
<v Speaker 0>got the controller APIs.

00:26:00.860 --> 00:26:02.539
<v Speaker 0>Oh, we've got backup stuff. What does that

00:26:02.539 --> 00:26:03.019
<v Speaker 0>do?

00:26:03.820 --> 00:26:06.059
<v Speaker 1>It takes a it it it basically takes

00:26:06.059 --> 00:26:07.985
<v Speaker 1>a snapshot on the on the on the

00:26:07.985 --> 00:26:09.424
<v Speaker 1>state of the control plane.

00:26:09.985 --> 00:26:12.785
<v Speaker 0>Nice. And spits out a terrible file.

00:26:13.345 --> 00:26:15.985
<v Speaker 0>And we got yeah. We got CTR, etcd,

00:26:16.785 --> 00:26:17.745
<v Speaker 0>install,

00:26:17.745 --> 00:26:18.865
<v Speaker 0>keep control,

00:26:19.505 --> 00:26:21.505
<v Speaker 0>start state. Sorry. Yeah. There's there's a fair

00:26:21.505 --> 00:26:22.065
<v Speaker 0>bit on there.

00:26:22.700 --> 00:26:24.620
<v Speaker 0>Let's run the so this is going to

00:26:24.620 --> 00:26:27.260
<v Speaker 0>install the controller. Is that just does that

00:26:27.260 --> 00:26:28.299
<v Speaker 0>mean control plan?

00:26:29.820 --> 00:26:31.980
<v Speaker 1>Yeah. Yeah. But if you if you add

00:26:31.980 --> 00:26:33.740
<v Speaker 1>that dash dash single option,

00:26:33.980 --> 00:26:35.420
<v Speaker 1>then it'll it'll basically

00:26:36.025 --> 00:26:39.225
<v Speaker 1>be a a sort of a special configuration

00:26:39.385 --> 00:26:43.065
<v Speaker 1>where where the controller is actually also spinning

00:26:43.065 --> 00:26:45.545
<v Speaker 1>up the worker parts because, well, it's a

00:26:45.545 --> 00:26:47.065
<v Speaker 1>it's a single node setup.

00:26:47.304 --> 00:26:48.585
<v Speaker 1>So it's a single node cluster.

00:26:49.970 --> 00:26:50.530
<v Speaker 1>So

00:26:51.250 --> 00:26:53.650
<v Speaker 1>it's it's it's mainly intended for this sort

00:26:53.650 --> 00:26:56.050
<v Speaker 1>of a developer use cases where you where

00:26:56.050 --> 00:26:58.610
<v Speaker 1>you just wanna run a a quick single

00:26:58.610 --> 00:27:01.250
<v Speaker 1>node setup for to test something, test your

00:27:01.250 --> 00:27:02.049
<v Speaker 1>application,

00:27:02.050 --> 00:27:03.010
<v Speaker 1>and and whatnot.

00:27:04.295 --> 00:27:06.375
<v Speaker 1>And then it also it it also actually

00:27:06.375 --> 00:27:07.735
<v Speaker 1>disabled disables

00:27:07.735 --> 00:27:09.575
<v Speaker 1>some of the some of the components which

00:27:09.575 --> 00:27:12.215
<v Speaker 1>we don't don't really need in this single

00:27:12.215 --> 00:27:13.335
<v Speaker 1>node use case.

00:27:15.575 --> 00:27:16.375
<v Speaker 0>K. Well,

00:27:17.160 --> 00:27:21.400
<v Speaker 0>that's

00:27:21.400 --> 00:27:23.240
<v Speaker 0>it? Alright. That's it.

00:27:24.520 --> 00:27:26.440
<v Speaker 0>And we have a start command. Right? Yeah.

00:27:26.440 --> 00:27:28.360
<v Speaker 0>K zero Yeah. Start. So that's just gonna

00:27:28.360 --> 00:27:30.440
<v Speaker 0>run all of my components for me.

00:27:30.840 --> 00:27:32.280
<v Speaker 1>Yep. And

00:27:32.875 --> 00:27:34.635
<v Speaker 1>It'll actually just call

00:27:34.955 --> 00:27:37.995
<v Speaker 1>basically, the the the system CTL to start

00:27:37.995 --> 00:27:39.674
<v Speaker 1>the k zero service.

00:27:41.275 --> 00:27:42.155
<v Speaker 0>Alright.

00:27:42.155 --> 00:27:44.155
<v Speaker 0>Okay. Let let let's talk about that, but

00:27:44.155 --> 00:27:45.595
<v Speaker 0>I'm really curious to see if this getting

00:27:45.595 --> 00:27:46.955
<v Speaker 0>all this is gonna work.

00:27:50.149 --> 00:27:52.869
<v Speaker 0>It did, right? Yeah. Is that okay? So

00:27:53.110 --> 00:27:54.549
<v Speaker 0>I'm curious now.

00:27:55.909 --> 00:27:58.149
<v Speaker 0>When I do the k0s

00:27:58.149 --> 00:27:59.350
<v Speaker 0>install controller,

00:28:00.355 --> 00:28:03.875
<v Speaker 0>it's creating system d services for each of

00:28:03.875 --> 00:28:04.835
<v Speaker 0>the components.

00:28:04.835 --> 00:28:07.315
<v Speaker 0>So No. K no. It's not. Okay. It

00:28:07.315 --> 00:28:09.394
<v Speaker 1>it create it creates a single

00:28:10.034 --> 00:28:12.115
<v Speaker 1>system d service for k zeros.

00:28:13.120 --> 00:28:14.399
<v Speaker 0>Alright. Okay.

00:28:15.360 --> 00:28:17.520
<v Speaker 1>And the and and and and the process

00:28:17.520 --> 00:28:19.519
<v Speaker 1>that that system d service

00:28:19.760 --> 00:28:20.639
<v Speaker 1>manages

00:28:20.720 --> 00:28:24.160
<v Speaker 1>is then the clarified process manager for the

00:28:24.160 --> 00:28:25.200
<v Speaker 1>other needed

00:28:25.465 --> 00:28:29.784
<v Speaker 1>Kubernetes components like API controller manager and whatnot.

00:28:30.424 --> 00:28:32.744
<v Speaker 0>Oh, yes. So here's our process tree here.

00:28:32.985 --> 00:28:33.624
<v Speaker 1>Yep.

00:28:33.865 --> 00:28:35.945
<v Speaker 0>Alright. So we've got our k0s, which is

00:28:35.945 --> 00:28:36.904
<v Speaker 0>running cane

00:28:37.300 --> 00:28:39.460
<v Speaker 0>with SQL lite. We got the API server,

00:28:39.460 --> 00:28:41.300
<v Speaker 0>the schedule, the controller manager, container d, the

00:28:41.300 --> 00:28:43.940
<v Speaker 0>kiblet, the proxy, the okay. Cool.

00:28:44.260 --> 00:28:46.419
<v Speaker 0>Okay. I understand that. Yeah. Perfect.

00:28:47.380 --> 00:28:48.980
<v Speaker 0>Yeah. That's that's neat. I like that.

00:28:49.684 --> 00:28:52.325
<v Speaker 1>Yep. So so so, basically, the install command

00:28:52.325 --> 00:28:55.205
<v Speaker 1>and start command are just like helper utility

00:28:55.205 --> 00:28:58.485
<v Speaker 1>functions to get get get your get your

00:28:58.485 --> 00:29:00.245
<v Speaker 1>system d setup easier

00:29:00.245 --> 00:29:03.125
<v Speaker 1>rather than having to write system d units

00:29:03.125 --> 00:29:05.149
<v Speaker 1>yourself because that's painful.

00:29:06.110 --> 00:29:06.750
<v Speaker 0>Alright.

00:29:08.110 --> 00:29:09.870
<v Speaker 0>My next question was why did get node

00:29:09.870 --> 00:29:12.350
<v Speaker 0>return nothing earlier, but it's returning something nice.

00:29:12.350 --> 00:29:13.630
<v Speaker 0>I guess we were a bit too early

00:29:13.630 --> 00:29:15.870
<v Speaker 0>in the API server and kubelet spinning up

00:29:15.870 --> 00:29:18.595
<v Speaker 0>for that to respond. But Yeah. Yeah. And

00:29:18.595 --> 00:29:20.515
<v Speaker 1>and and also as as as I mentioned

00:29:20.515 --> 00:29:22.835
<v Speaker 1>on the slides, the the it kind of

00:29:22.835 --> 00:29:25.235
<v Speaker 1>works as a as a self exacting binary.

00:29:25.395 --> 00:29:27.315
<v Speaker 1>So when when it boots up first time,

00:29:27.315 --> 00:29:29.315
<v Speaker 1>it it actually sees that, okay. I I

00:29:29.315 --> 00:29:31.715
<v Speaker 1>haven't extracted the binaries yet, so it'll take

00:29:31.715 --> 00:29:32.195
<v Speaker 1>a

00:29:32.630 --> 00:29:34.230
<v Speaker 1>bit of bit of this guy or two

00:29:34.230 --> 00:29:36.150
<v Speaker 1>to in the in the first boot.

00:29:36.550 --> 00:29:38.870
<v Speaker 0>Okay. Got it. Awesome.

00:29:39.110 --> 00:29:41.430
<v Speaker 0>Well, we now have a k0s cluster.

00:29:41.990 --> 00:29:44.870
<v Speaker 0>We've got access to a status command. Let's

00:29:44.870 --> 00:29:45.590
<v Speaker 0>see what that does.

00:29:46.925 --> 00:29:49.245
<v Speaker 0>Okay. Because of the version process ID,

00:29:49.565 --> 00:29:50.205
<v Speaker 0>parent

00:29:50.685 --> 00:29:52.284
<v Speaker 0>and the other thing.

00:29:53.805 --> 00:29:54.845
<v Speaker 0>Okay. Nice.

00:29:55.245 --> 00:29:57.245
<v Speaker 0>And I've already kind of done that.

00:29:57.725 --> 00:29:59.485
<v Speaker 0>I'm not gonna uninstall it because I just

00:30:00.045 --> 00:30:01.645
<v Speaker 0>Well, that's nice. Okay. So

00:30:02.830 --> 00:30:05.390
<v Speaker 0>pretty painless. I guess that's the developer experience

00:30:05.390 --> 00:30:06.750
<v Speaker 0>you're going for. Right? You just you just

00:30:06.750 --> 00:30:07.870
<v Speaker 0>want it to be get out the way

00:30:07.870 --> 00:30:09.710
<v Speaker 0>and just work. Yep.

00:30:09.710 --> 00:30:12.350
<v Speaker 1>That's the that's the zero friction that we

00:30:12.350 --> 00:30:13.149
<v Speaker 1>aim for.

00:30:13.870 --> 00:30:15.789
<v Speaker 0>And this is a completely

00:30:16.155 --> 00:30:17.995
<v Speaker 0>I mean, it's it's not that it's compliant.

00:30:17.995 --> 00:30:19.755
<v Speaker 0>I mean, it is upstream Kubernetes is what

00:30:19.755 --> 00:30:21.755
<v Speaker 0>you were seeing as well. Yep. It is.

00:30:21.755 --> 00:30:23.755
<v Speaker 0>It's not passing any I mean, it can

00:30:23.755 --> 00:30:25.515
<v Speaker 0>go past the compliance test, but it really

00:30:25.515 --> 00:30:27.595
<v Speaker 0>is upstream Kubernetes, which I think is pretty

00:30:27.595 --> 00:30:29.835
<v Speaker 0>quick. We actually we we actually do run

00:30:29.835 --> 00:30:32.330
<v Speaker 1>the the compliance test for for basically every

00:30:32.330 --> 00:30:33.770
<v Speaker 1>single release that we do,

00:30:34.650 --> 00:30:37.610
<v Speaker 1>which is, well, sort of my one of

00:30:37.610 --> 00:30:40.090
<v Speaker 1>my favorite things to nag about is the

00:30:40.090 --> 00:30:42.810
<v Speaker 1>the flakiness of the of the conformance. So

00:30:42.810 --> 00:30:43.770
<v Speaker 1>it's it's

00:30:43.930 --> 00:30:46.330
<v Speaker 1>sometimes it's annoying to get it passed, but

00:30:46.330 --> 00:30:48.545
<v Speaker 1>but we we do run it for every

00:30:48.545 --> 00:30:50.385
<v Speaker 1>single release that we do. I think just

00:30:50.385 --> 00:30:52.705
<v Speaker 0>saying sometimes that it's annoying to sums up

00:30:52.705 --> 00:30:55.025
<v Speaker 0>Kubernetes in general for me, to be fair.

00:30:56.305 --> 00:30:59.585
<v Speaker 1>True. True. So is there a 01/22 release

00:30:59.585 --> 00:31:00.945
<v Speaker 0>of k0s?

00:31:01.425 --> 00:31:03.480
<v Speaker 1>It's in the it's in the works. So,

00:31:03.480 --> 00:31:06.600
<v Speaker 1>hopefully hopefully, within next few weeks, we'll we'll

00:31:06.600 --> 00:31:08.920
<v Speaker 1>ship it out. And what's involved in that

00:31:08.920 --> 00:31:10.920
<v Speaker 0>process for you then on on that side?

00:31:10.920 --> 00:31:12.360
<v Speaker 0>Like, what are you looking for? What are

00:31:12.360 --> 00:31:14.440
<v Speaker 0>you testing before you adopt a new upstream

00:31:14.440 --> 00:31:14.760
<v Speaker 0>version?

00:31:16.385 --> 00:31:18.225
<v Speaker 1>We do we we do, of course, the

00:31:18.225 --> 00:31:21.424
<v Speaker 1>the full conformance testing, of of course, and

00:31:21.424 --> 00:31:23.744
<v Speaker 1>and we we also

00:31:24.225 --> 00:31:25.345
<v Speaker 1>also do

00:31:26.385 --> 00:31:29.190
<v Speaker 1>bit of stability testing and and and make

00:31:29.190 --> 00:31:31.590
<v Speaker 1>sure that everything works together nicely.

00:31:32.470 --> 00:31:35.430
<v Speaker 1>I mean, technically technically, if we if we

00:31:35.430 --> 00:31:37.670
<v Speaker 1>think about from the from the, like like,

00:31:37.670 --> 00:31:40.550
<v Speaker 1>k0s developer point of view from basically somebody

00:31:40.550 --> 00:31:42.550
<v Speaker 1>from from my team that that does the

00:31:42.550 --> 00:31:43.110
<v Speaker 1>actual

00:31:43.555 --> 00:31:46.355
<v Speaker 1>actual Kubernetes version change. He's actually changing the

00:31:46.355 --> 00:31:48.515
<v Speaker 1>version number in couple of files, and that's

00:31:48.515 --> 00:31:50.355
<v Speaker 1>technically it. But then, of course, we have

00:31:50.355 --> 00:31:52.434
<v Speaker 1>to make sure that everything still works. And

00:31:52.435 --> 00:31:54.515
<v Speaker 1>and especially now in the in the in

00:31:54.515 --> 00:31:57.315
<v Speaker 1>the 01/22 because there's there's actually stuff that

00:31:57.315 --> 00:32:00.250
<v Speaker 1>that fine that is finally being removed. So

00:32:00.250 --> 00:32:01.929
<v Speaker 1>we have to make sure that everything everything

00:32:01.929 --> 00:32:04.090
<v Speaker 1>works clean and still and and and

00:32:05.610 --> 00:32:07.289
<v Speaker 1>but, hopefully, in the next couple of weeks,

00:32:07.289 --> 00:32:08.970
<v Speaker 1>we we we will be able to do

00:32:08.970 --> 00:32:10.889
<v Speaker 1>the release. And we, of course, want always

00:32:10.889 --> 00:32:13.445
<v Speaker 1>wanna bundle in some bug fixes for k

00:32:13.445 --> 00:32:16.165
<v Speaker 1>zeros itself and and maybe maybe some cool

00:32:16.165 --> 00:32:19.605
<v Speaker 1>new features and and whatnot. So Cool.

00:32:19.765 --> 00:32:21.525
<v Speaker 0>Do I get to select the version of

00:32:21.525 --> 00:32:23.285
<v Speaker 0>k zeros when I install it? Or is

00:32:23.285 --> 00:32:24.085
<v Speaker 0>there way can I, like

00:32:24.929 --> 00:32:27.250
<v Speaker 0>what I'm curious, I'll ask the real question?

00:32:27.250 --> 00:32:29.250
<v Speaker 0>It's like, could we maybe run one twenty

00:32:29.250 --> 00:32:30.929
<v Speaker 0>one dot two or one twenty dot zero

00:32:30.929 --> 00:32:33.090
<v Speaker 0>and like do an upgrade of a cluster?

00:32:33.090 --> 00:32:34.770
<v Speaker 0>The first question we got at the start

00:32:34.770 --> 00:32:36.210
<v Speaker 0>from coach in there

00:32:36.845 --> 00:32:39.005
<v Speaker 0>is they were just curious and interesting how

00:32:39.005 --> 00:32:41.965
<v Speaker 0>they manage cluster upgrades, especially in production, if

00:32:41.965 --> 00:32:43.645
<v Speaker 0>we could talk about that. So is that

00:32:43.645 --> 00:32:45.405
<v Speaker 0>something you think we could run through?

00:32:47.725 --> 00:32:48.605
<v Speaker 1>Sure.

00:32:48.605 --> 00:32:49.405
<v Speaker 1>Sure. I mean,

00:32:52.210 --> 00:32:53.010
<v Speaker 1>technically

00:32:53.010 --> 00:32:53.970
<v Speaker 1>technically,

00:32:54.210 --> 00:32:55.650
<v Speaker 1>as upgrading

00:32:55.650 --> 00:32:59.009
<v Speaker 1>upgrading is is is is like just

00:32:59.330 --> 00:33:01.970
<v Speaker 1>get a new version of k0s binary itself

00:33:01.970 --> 00:33:04.450
<v Speaker 1>and and and restart the system d unit,

00:33:04.450 --> 00:33:05.010
<v Speaker 1>and that's it.

00:33:05.975 --> 00:33:07.735
<v Speaker 1>But, of course, when we are talking about

00:33:07.735 --> 00:33:08.934
<v Speaker 1>production services,

00:33:09.575 --> 00:33:11.335
<v Speaker 1>you have to do it in a, like,

00:33:11.335 --> 00:33:12.455
<v Speaker 1>controlled way.

00:33:12.855 --> 00:33:15.255
<v Speaker 1>And I think that's where that's where this

00:33:15.255 --> 00:33:17.415
<v Speaker 1>this k zero CTL

00:33:17.415 --> 00:33:20.375
<v Speaker 1>helper tool comes actually in a in a

00:33:20.375 --> 00:33:22.009
<v Speaker 1>in a in the play.

00:33:22.570 --> 00:33:25.130
<v Speaker 1>So so k zero CTL can actually do

00:33:25.130 --> 00:33:27.130
<v Speaker 1>it like a rolling manner. So it first

00:33:27.130 --> 00:33:29.929
<v Speaker 1>goes through the controllers one by one and

00:33:29.929 --> 00:33:32.570
<v Speaker 1>and and always waits that that the previous

00:33:32.570 --> 00:33:34.915
<v Speaker 1>one comes back online and and whatnot. And

00:33:34.915 --> 00:33:36.755
<v Speaker 1>then it'll it'll move into the into the

00:33:36.755 --> 00:33:39.235
<v Speaker 1>worker nodes and and do the normal, like,

00:33:39.235 --> 00:33:40.035
<v Speaker 1>upgrade

00:33:40.515 --> 00:33:42.035
<v Speaker 1>upgrade drain,

00:33:42.275 --> 00:33:43.155
<v Speaker 1>upgrade

00:33:43.235 --> 00:33:44.275
<v Speaker 1>on sort

00:33:44.435 --> 00:33:46.755
<v Speaker 1>of a dance, what we call it.

00:33:48.900 --> 00:33:51.700
<v Speaker 0>Okay. Maybe that links us into another question

00:33:51.700 --> 00:33:53.620
<v Speaker 0>from Ty then. Ty is asking if there

00:33:53.620 --> 00:33:55.780
<v Speaker 0>is something similar to k c up or

00:33:55.780 --> 00:33:57.780
<v Speaker 0>ketchup, I think it's supposed to be pronounced.

00:33:57.780 --> 00:34:00.340
<v Speaker 0>Or is this where Feros comes in? Is

00:34:00.340 --> 00:34:03.635
<v Speaker 0>k zero CTL like ketchup? Or is I'm

00:34:03.635 --> 00:34:06.035
<v Speaker 0>not sure what Feras says. So Yeah. It

00:34:06.035 --> 00:34:08.195
<v Speaker 1>is it is k k zero CTL is

00:34:08.195 --> 00:34:11.235
<v Speaker 1>is is quite similar than than k three

00:34:11.554 --> 00:34:12.514
<v Speaker 1>as up ketchup.

00:34:14.550 --> 00:34:17.270
<v Speaker 1>There's too many numbers and and acronyms.

00:34:18.469 --> 00:34:20.469
<v Speaker 1>To try to try to say k three

00:34:20.469 --> 00:34:22.550
<v Speaker 1>s and k zero s and and k

00:34:22.550 --> 00:34:24.469
<v Speaker 1>three s up in the same sentence, and

00:34:24.469 --> 00:34:25.030
<v Speaker 1>your

00:34:25.350 --> 00:34:26.550
<v Speaker 1>tongue is twisted.

00:34:26.815 --> 00:34:28.895
<v Speaker 0>Yeah. I think I'll have a strong drink

00:34:28.895 --> 00:34:31.455
<v Speaker 0>before I try that, I think. Yeah. What's

00:34:31.455 --> 00:34:33.135
<v Speaker 0>Pharos? Is that something I should be familiar

00:34:33.135 --> 00:34:35.295
<v Speaker 0>with? Is that something to more interest? Or

00:34:35.775 --> 00:34:38.735
<v Speaker 1>No. It's Pharos is actually actually something that

00:34:38.735 --> 00:34:40.495
<v Speaker 1>I was I was working in the in

00:34:40.495 --> 00:34:42.410
<v Speaker 1>the past with. So it was a it

00:34:42.410 --> 00:34:43.210
<v Speaker 1>was a

00:34:43.850 --> 00:34:46.250
<v Speaker 1>cube distro that we did in the in

00:34:46.250 --> 00:34:48.410
<v Speaker 1>the past with with another company.

00:34:49.130 --> 00:34:52.410
<v Speaker 0>Oh, okay. Okay. Got it. So so if

00:34:52.410 --> 00:34:53.770
<v Speaker 1>if ties is

00:34:54.010 --> 00:34:57.105
<v Speaker 1>resemblance between k0s and faros, it's it's mainly

00:34:57.105 --> 00:34:59.265
<v Speaker 1>because there are some some of the same

00:34:59.265 --> 00:35:01.825
<v Speaker 1>people are are behind both of these. So

00:35:02.305 --> 00:35:04.385
<v Speaker 1>but I think from from technical point of

00:35:04.385 --> 00:35:07.825
<v Speaker 1>view, faros and and k zeros are actually

00:35:07.825 --> 00:35:09.025
<v Speaker 1>completely different. So

00:35:11.160 --> 00:35:12.280
<v Speaker 0>Okay. Got it.

00:35:12.760 --> 00:35:14.040
<v Speaker 0>Nice.

00:35:14.359 --> 00:35:16.119
<v Speaker 0>Okay. So should we take a look at

00:35:16.119 --> 00:35:19.080
<v Speaker 0>k zero CTL or k zero's control or

00:35:19.080 --> 00:35:21.400
<v Speaker 0>k zero's cuddle, whatever your preference is?

00:35:22.255 --> 00:35:25.615
<v Speaker 1>We we don't have a preference. So so

00:35:26.895 --> 00:35:29.855
<v Speaker 1>I always always use the the CTL, like,

00:35:29.855 --> 00:35:31.055
<v Speaker 1>kubectl, and

00:35:31.855 --> 00:35:33.695
<v Speaker 1>I guess that's the the the one of

00:35:33.695 --> 00:35:36.175
<v Speaker 1>the most important battles in the in the

00:35:36.390 --> 00:35:39.589
<v Speaker 1>cloud native ecosystem, whether it's kubectl or kubectl

00:35:39.589 --> 00:35:42.150
<v Speaker 1>or It's just technology in general. We all

00:35:42.150 --> 00:35:44.230
<v Speaker 0>pronounce something different. I mean, I can't like,

00:35:44.230 --> 00:35:46.069
<v Speaker 0>sometimes I say SQL lite, sometimes I say

00:35:46.069 --> 00:35:48.069
<v Speaker 0>SQL lite, sometimes I say MySQL, sometimes

00:35:50.065 --> 00:35:51.665
<v Speaker 0>I've given up trying to find any sort

00:35:51.665 --> 00:35:53.425
<v Speaker 0>of rhyme or reason to this.

00:35:53.745 --> 00:35:56.065
<v Speaker 1>Yeah. Yeah. Yeah. I'm I'm pretty much the

00:35:56.065 --> 00:35:56.865
<v Speaker 1>same so.

00:35:57.345 --> 00:35:59.985
<v Speaker 0>Okay. So we are going to install

00:36:00.145 --> 00:36:01.585
<v Speaker 0>the k0s control

00:36:01.905 --> 00:36:03.505
<v Speaker 0>and I know on purpose they're gonna say

00:36:03.505 --> 00:36:04.705
<v Speaker 0>it a different way every single time.

00:36:06.040 --> 00:36:07.720
<v Speaker 0>Is there a brew tap, or would you

00:36:07.720 --> 00:36:09.480
<v Speaker 0>suggest I just grab the release from the

00:36:09.480 --> 00:36:10.280
<v Speaker 0>GitHub?

00:36:11.559 --> 00:36:12.520
<v Speaker 1>I

00:36:13.880 --> 00:36:14.680
<v Speaker 1>don't

00:36:15.079 --> 00:36:17.160
<v Speaker 1>I don't think there is a brew tap.

00:36:18.305 --> 00:36:19.905
<v Speaker 1>So probably just,

00:36:20.225 --> 00:36:23.025
<v Speaker 1>like, either go get it or just download

00:36:23.025 --> 00:36:23.585
<v Speaker 1>it.

00:36:24.865 --> 00:36:26.385
<v Speaker 0>Okay. Darwin.

00:36:27.025 --> 00:36:27.585
<v Speaker 0>That's

00:36:28.705 --> 00:36:28.945
<v Speaker 1>empty.

00:36:32.990 --> 00:36:34.510
<v Speaker 0>K0s cuddle.

00:36:37.710 --> 00:36:39.470
<v Speaker 1>Here's the definition of cuddle.

00:36:39.790 --> 00:36:41.630
<v Speaker 1>All close in one's arms is a way

00:36:41.630 --> 00:36:43.310
<v Speaker 1>of showing love or affection.

00:36:45.470 --> 00:36:46.109
<v Speaker 0>Thanks, Google.

00:36:48.325 --> 00:36:49.365
<v Speaker 1>There

00:36:53.605 --> 00:36:54.325
<v Speaker 0>we go.

00:36:55.765 --> 00:36:56.885
<v Speaker 0>We don't have

00:36:57.445 --> 00:36:58.405
<v Speaker 0>k0s

00:36:58.405 --> 00:37:00.900
<v Speaker 0>cuddle installed on our machine. So do you

00:37:00.900 --> 00:37:02.740
<v Speaker 0>wanna give us the the high level overview?

00:37:02.740 --> 00:37:04.900
<v Speaker 0>What is this tool for, and when should

00:37:04.900 --> 00:37:07.780
<v Speaker 0>people reach for it? Yep. So so so

00:37:07.780 --> 00:37:08.340
<v Speaker 1>caterers

00:37:08.980 --> 00:37:11.780
<v Speaker 1>cuddle is is is basically designed as a

00:37:11.780 --> 00:37:13.940
<v Speaker 1>as a sort of a helper

00:37:13.940 --> 00:37:14.260
<v Speaker 1>tool

00:37:14.975 --> 00:37:18.095
<v Speaker 1>to to like like a special purpose helper

00:37:18.095 --> 00:37:20.655
<v Speaker 1>tool to set up k zeros over multiple

00:37:20.655 --> 00:37:21.775
<v Speaker 1>different hosts.

00:37:22.175 --> 00:37:22.735
<v Speaker 1>So

00:37:23.055 --> 00:37:24.815
<v Speaker 1>as as we saw when you when you

00:37:24.815 --> 00:37:26.575
<v Speaker 1>when you did that setup for a for

00:37:26.575 --> 00:37:28.870
<v Speaker 1>a single note, that's, I mean, it's it's

00:37:28.870 --> 00:37:29.910
<v Speaker 1>super easy.

00:37:30.390 --> 00:37:32.870
<v Speaker 1>But but imagine you have have, like, hundreds

00:37:32.870 --> 00:37:35.350
<v Speaker 1>of notes in your cluster or or

00:37:35.750 --> 00:37:38.870
<v Speaker 1>even more than it I'm I'm at at

00:37:38.870 --> 00:37:40.870
<v Speaker 1>least myself, I'm I'm gonna be bored after

00:37:40.870 --> 00:37:41.830
<v Speaker 1>the second one. So

00:37:42.625 --> 00:37:44.545
<v Speaker 1>and and when when people are bored, they

00:37:44.545 --> 00:37:46.625
<v Speaker 1>make mistakes. So so, of course

00:37:47.105 --> 00:37:48.785
<v Speaker 1>so it's it's mainly like an like an

00:37:48.785 --> 00:37:50.865
<v Speaker 1>automation tool in a in a sense that

00:37:50.865 --> 00:37:51.505
<v Speaker 1>that

00:37:53.105 --> 00:37:55.745
<v Speaker 1>just automates the setup over multiple hosts. And

00:37:55.745 --> 00:37:58.440
<v Speaker 1>then as as already mentioned, it provides, like,

00:37:58.440 --> 00:38:00.760
<v Speaker 1>also the sort of a day two operational

00:38:01.160 --> 00:38:02.120
<v Speaker 1>benefits,

00:38:02.120 --> 00:38:04.360
<v Speaker 1>like like the the seamless upgrades of the

00:38:04.360 --> 00:38:06.200
<v Speaker 1>cluster and and and whatnot.

00:38:07.560 --> 00:38:08.360
<v Speaker 0>Okay. Perfect.

00:38:09.055 --> 00:38:11.455
<v Speaker 0>We've got a question from Alex in the

00:38:11.455 --> 00:38:12.175
<v Speaker 0>chat

00:38:12.255 --> 00:38:14.495
<v Speaker 0>who is wondering if there is a reason

00:38:14.495 --> 00:38:16.735
<v Speaker 0>for the change in the default CNI from

00:38:16.735 --> 00:38:18.575
<v Speaker 0>Calico to KubeRotor.

00:38:19.215 --> 00:38:19.695
<v Speaker 0>Right.

00:38:22.220 --> 00:38:25.420
<v Speaker 1>The main reasoning actually was the the resource

00:38:25.420 --> 00:38:26.300
<v Speaker 1>usage.

00:38:26.700 --> 00:38:27.260
<v Speaker 1>So

00:38:28.220 --> 00:38:29.900
<v Speaker 1>lot of the lot of the use cases

00:38:29.900 --> 00:38:32.619
<v Speaker 1>we we saw early on where k0s is

00:38:32.619 --> 00:38:34.380
<v Speaker 1>being used is is

00:38:34.365 --> 00:38:38.125
<v Speaker 1>is use cases where where the infrastructure

00:38:38.125 --> 00:38:39.165
<v Speaker 1>is is

00:38:39.325 --> 00:38:41.165
<v Speaker 1>or or has less resources.

00:38:41.885 --> 00:38:44.845
<v Speaker 1>Like, these industrial PCs and and sort of,

00:38:44.845 --> 00:38:46.525
<v Speaker 1>like, edge computing

00:38:46.640 --> 00:38:49.760
<v Speaker 1>use cases, whatever edge means for people. But

00:38:49.760 --> 00:38:50.800
<v Speaker 1>but but

00:38:50.960 --> 00:38:52.800
<v Speaker 1>but those sort of use cases where where

00:38:52.800 --> 00:38:55.040
<v Speaker 1>you you really have want to want to

00:38:55.040 --> 00:38:57.360
<v Speaker 1>save, like, like, lot of lot of the

00:38:57.360 --> 00:39:00.160
<v Speaker 1>resources or as much as resources as possible.

00:39:00.875 --> 00:39:02.234
<v Speaker 1>So that was one of the one of

00:39:02.234 --> 00:39:03.195
<v Speaker 1>the main drivers.

00:39:03.835 --> 00:39:06.555
<v Speaker 1>And and, actually, at sort of adjacent to

00:39:06.555 --> 00:39:09.195
<v Speaker 1>that is is the fact that Calico

00:39:09.434 --> 00:39:11.515
<v Speaker 1>at that time I I haven't actually checked

00:39:11.515 --> 00:39:13.355
<v Speaker 1>the the latest versions, but but at that

00:39:13.355 --> 00:39:16.170
<v Speaker 1>time, it didn't actually support 32 bit ARM

00:39:16.170 --> 00:39:16.890
<v Speaker 1>at all,

00:39:17.849 --> 00:39:20.170
<v Speaker 1>which gProuder does so. So those were the

00:39:20.170 --> 00:39:21.770
<v Speaker 1>main main two drivers.

00:39:22.570 --> 00:39:23.210
<v Speaker 0>Perfect.

00:39:24.490 --> 00:39:26.810
<v Speaker 0>Okay. So let's jump back over to the

00:39:26.810 --> 00:39:27.770
<v Speaker 0>documentation.

00:39:27.849 --> 00:39:28.730
<v Speaker 0>We have the tool,

00:39:29.385 --> 00:39:31.625
<v Speaker 0>and we can use an edit command to

00:39:31.625 --> 00:39:34.425
<v Speaker 0>generate, I guess, just a default configuration.

00:39:35.945 --> 00:39:36.585
<v Speaker 1>Yep.

00:39:36.905 --> 00:39:38.265
<v Speaker 0>Okay. So this is

00:39:39.305 --> 00:39:40.025
<v Speaker 0>a

00:39:40.265 --> 00:39:41.625
<v Speaker 0>Is it an actual

00:39:42.020 --> 00:39:43.780
<v Speaker 0>CRD or just made to look like one?

00:39:43.780 --> 00:39:45.460
<v Speaker 0>Like, can I apply this to a Kubernetes

00:39:45.460 --> 00:39:48.339
<v Speaker 0>cluster with some definitions of No? Can't. Not

00:39:48.339 --> 00:39:49.060
<v Speaker 0>yet? At

00:39:49.460 --> 00:39:51.780
<v Speaker 1>least at at least currently, you can't. But

00:39:51.780 --> 00:39:54.420
<v Speaker 1>it's it's it's definitely something something that we

00:39:54.420 --> 00:39:56.885
<v Speaker 1>had in mind that that that that from

00:39:56.885 --> 00:39:59.045
<v Speaker 1>the day one, let's make this look like

00:39:59.045 --> 00:40:02.484
<v Speaker 1>a Kubernetes resource. So if we ever want

00:40:02.484 --> 00:40:04.165
<v Speaker 1>to do that, then we can.

00:40:04.325 --> 00:40:06.565
<v Speaker 0>A cross plane provider that could use this

00:40:06.565 --> 00:40:08.724
<v Speaker 0>resource would be really sweet and just have

00:40:08.724 --> 00:40:10.085
<v Speaker 0>it go out and do all my upgrades

00:40:10.085 --> 00:40:11.970
<v Speaker 0>and and stuff. Yep.

00:40:12.610 --> 00:40:13.730
<v Speaker 0>Okay.

00:40:13.730 --> 00:40:14.290
<v Speaker 0>So

00:40:14.690 --> 00:40:16.050
<v Speaker 0>this just expects

00:40:16.050 --> 00:40:19.090
<v Speaker 0>me to have some hosts, which fortunately I

00:40:19.090 --> 00:40:20.370
<v Speaker 0>have got a

00:40:20.370 --> 00:40:21.570
<v Speaker 0>user, a key path.

00:40:24.345 --> 00:40:26.425
<v Speaker 0>Yep. And then I tell the version of

00:40:26.425 --> 00:40:28.744
<v Speaker 0>k zero's that I want. So this is

00:40:28.744 --> 00:40:30.984
<v Speaker 0>really a kind of an orchestration tool. I'm

00:40:30.984 --> 00:40:32.665
<v Speaker 0>gonna I'm assuming I'm gonna do some sort

00:40:32.665 --> 00:40:34.265
<v Speaker 0>of k zero CTL

00:40:34.345 --> 00:40:36.665
<v Speaker 0>apply or converge or whatever the sub command

00:40:36.665 --> 00:40:38.345
<v Speaker 0>is. It's gonna read this file. It's gonna

00:40:38.345 --> 00:40:40.930
<v Speaker 0>SSH onto all of these machines and give

00:40:40.930 --> 00:40:42.930
<v Speaker 0>me back a multi node cluster.

00:40:43.410 --> 00:40:45.330
<v Speaker 1>Yes. Exactly. Exactly.

00:40:45.570 --> 00:40:48.050
<v Speaker 0>Alright. Okay. So let's drop in some IP

00:40:48.050 --> 00:40:50.930
<v Speaker 0>addresses here from my Equinix console.

00:40:51.250 --> 00:40:53.250
<v Speaker 0>So we've already burned machine one, so we

00:40:53.250 --> 00:40:54.290
<v Speaker 0>jump for two.

00:40:55.494 --> 00:40:57.494
<v Speaker 0>If I ignore the key path, will it

00:40:57.494 --> 00:40:59.015
<v Speaker 0>use my host default

00:40:59.734 --> 00:41:00.615
<v Speaker 0>agent?

00:41:00.695 --> 00:41:01.335
<v Speaker 1>Yes.

00:41:01.895 --> 00:41:02.775
<v Speaker 1>Good. Because I

00:41:05.255 --> 00:41:06.615
<v Speaker 0>Well, we're about to find out because I've

00:41:06.615 --> 00:41:07.734
<v Speaker 0>got a bit of a weird s s

00:41:07.734 --> 00:41:09.015
<v Speaker 0>h set up. So I may have to

00:41:09.095 --> 00:41:11.210
<v Speaker 1>Okay. Quickly jam some keys, but we'll work

00:41:11.210 --> 00:41:12.170
<v Speaker 0>at what happens.

00:41:12.490 --> 00:41:14.970
<v Speaker 0>And I need to copy these five lines

00:41:16.010 --> 00:41:17.770
<v Speaker 0>and one more IP address.

00:41:22.625 --> 00:41:25.585
<v Speaker 0>Okay. And we're gonna install 121 by three

00:41:26.065 --> 00:41:27.345
<v Speaker 0>and save.

00:41:27.585 --> 00:41:28.705
<v Speaker 0>Okay. Yep.

00:41:30.785 --> 00:41:33.105
<v Speaker 0>And apply. Awesome. Okay. Yep.

00:41:36.240 --> 00:41:37.520
<v Speaker 0>What do you think the chances of this

00:41:37.520 --> 00:41:39.440
<v Speaker 0>working with my SSH setup are? Are we

00:41:39.440 --> 00:41:40.400
<v Speaker 0>feeling confident?

00:41:40.480 --> 00:41:43.280
<v Speaker 1>I'm I'm feeling fairly confident. Yes. I

00:41:43.920 --> 00:41:46.400
<v Speaker 1>just remember that we've we've had some problems

00:41:46.400 --> 00:41:49.575
<v Speaker 1>with the with SSH agent based setups, but

00:41:49.575 --> 00:41:49.975
<v Speaker 1>but

00:41:50.935 --> 00:41:53.015
<v Speaker 0>I think it worked. My

00:41:53.175 --> 00:41:56.215
<v Speaker 0>ad blocker is clearly blocking the title metrics,

00:41:56.215 --> 00:41:57.815
<v Speaker 0>though. But other than that, I think we're

00:41:57.815 --> 00:41:58.375
<v Speaker 0>okay.

00:41:59.015 --> 00:42:00.935
<v Speaker 1>I think there's a there's a flag or

00:42:00.935 --> 00:42:03.670
<v Speaker 1>environment variable for you to actually just disable

00:42:03.670 --> 00:42:05.510
<v Speaker 1>the metric stuff completely.

00:42:06.470 --> 00:42:08.070
<v Speaker 0>Sorry. When I first brought in this ad

00:42:08.070 --> 00:42:10.470
<v Speaker 0>blocker to my home network, I actually blocked

00:42:10.470 --> 00:42:12.790
<v Speaker 0>the traffic for the stream software. So that

00:42:12.790 --> 00:42:14.150
<v Speaker 0>was the the fun couple of days for

00:42:14.150 --> 00:42:15.110
<v Speaker 0>me to try to debug that.

00:42:22.215 --> 00:42:23.815
<v Speaker 0>Guess it's just doing this thing. How long

00:42:23.815 --> 00:42:25.415
<v Speaker 0>does it take? I guess it's just going

00:42:25.415 --> 00:42:26.935
<v Speaker 0>on to each machine. Does it do them

00:42:26.935 --> 00:42:27.735
<v Speaker 0>concurrently?

00:42:27.735 --> 00:42:29.415
<v Speaker 0>Like, at the same time, is it spawned

00:42:29.415 --> 00:42:31.095
<v Speaker 0>on multiple processes or does it do the

00:42:31.095 --> 00:42:32.375
<v Speaker 0>control plane first and

00:42:33.320 --> 00:42:35.640
<v Speaker 1>It it it it does the the control

00:42:35.640 --> 00:42:37.880
<v Speaker 1>plane first, of course. I mean, there's no

00:42:37.880 --> 00:42:39.400
<v Speaker 1>point of of going to the work or

00:42:39.400 --> 00:42:41.000
<v Speaker 1>not if we don't get the control plane

00:42:41.000 --> 00:42:42.040
<v Speaker 1>working first. So

00:42:43.000 --> 00:42:44.040
<v Speaker 0>Yeah. Makes sense.

00:42:48.155 --> 00:42:50.075
<v Speaker 0>I guess Oh my god. It's it's annoying

00:42:50.075 --> 00:42:51.675
<v Speaker 1>to see these errors,

00:42:51.755 --> 00:42:54.875
<v Speaker 1>actually. I don't really, really, really wanna get

00:42:54.875 --> 00:42:56.635
<v Speaker 1>rid of that. I mean,

00:42:57.195 --> 00:42:59.835
<v Speaker 1>if if if sending the metrics actually errors

00:42:59.835 --> 00:43:00.795
<v Speaker 1>out to

00:43:01.970 --> 00:43:04.369
<v Speaker 1>you as a user shouldn't really care or

00:43:04.369 --> 00:43:06.530
<v Speaker 1>have to care about that fact. So

00:43:06.770 --> 00:43:08.049
<v Speaker 1>Yeah. I guess I need to do I

00:43:08.049 --> 00:43:09.650
<v Speaker 1>need to do something about that.

00:43:11.569 --> 00:43:14.154
<v Speaker 0>I I definitely am supportive, though of open

00:43:14.154 --> 00:43:15.994
<v Speaker 0>source software having this at home. It's one

00:43:15.994 --> 00:43:17.355
<v Speaker 0>of the most difficult things in the world

00:43:17.355 --> 00:43:19.595
<v Speaker 0>is trying to understand what versions of people

00:43:19.595 --> 00:43:21.515
<v Speaker 0>are using and and and they're still actively

00:43:21.515 --> 00:43:22.714
<v Speaker 0>using it because you need to know where

00:43:22.714 --> 00:43:23.675
<v Speaker 0>to apply

00:43:24.315 --> 00:43:26.394
<v Speaker 0>effort and maintenance and stuff like that. Yeah.

00:43:26.394 --> 00:43:28.474
<v Speaker 0>Exactly. It's just that projects are doing this

00:43:28.474 --> 00:43:31.220
<v Speaker 0>now. It's I think it's better longer term.

00:43:31.700 --> 00:43:33.619
<v Speaker 0>Yep. If I could enable it just for

00:43:33.619 --> 00:43:35.460
<v Speaker 0>this offer, I would. I promise.

00:43:35.780 --> 00:43:36.900
<v Speaker 0>So I

00:43:37.700 --> 00:43:38.580
<v Speaker 0>can run

00:43:40.020 --> 00:43:41.460
<v Speaker 0>what I see here is this is gonna

00:43:41.460 --> 00:43:43.700
<v Speaker 0>download that cube config to my local director.

00:43:44.255 --> 00:43:45.055
<v Speaker 1>Yep.

00:43:46.095 --> 00:43:47.855
<v Speaker 1>Or it it'll it'll actually

00:43:48.095 --> 00:43:50.095
<v Speaker 1>spit it out on the on the screen.

00:43:50.255 --> 00:43:53.135
<v Speaker 1>So you'll have to now probably pipe it

00:43:53.135 --> 00:43:53.855
<v Speaker 1>to something.

00:43:58.010 --> 00:44:00.010
<v Speaker 0>Yeah. We didn't get any error messages. That's

00:44:00.010 --> 00:44:00.570
<v Speaker 0>okay.

00:44:00.810 --> 00:44:01.450
<v Speaker 0>Wonder

00:44:01.849 --> 00:44:03.130
<v Speaker 0>if there is a flag.

00:44:04.330 --> 00:44:06.410
<v Speaker 0>Must be an environment variable. Okay.

00:44:08.010 --> 00:44:10.170
<v Speaker 1>So And it said that it it might

00:44:10.170 --> 00:44:12.330
<v Speaker 1>be like a like a hidden option.

00:44:15.595 --> 00:44:17.115
<v Speaker 0>Oh, I'm gonna need to

00:44:17.355 --> 00:44:18.635
<v Speaker 0>kubectl,

00:44:18.635 --> 00:44:19.755
<v Speaker 0>kubectl,

00:44:20.795 --> 00:44:21.195
<v Speaker 0>kubectl,

00:44:26.395 --> 00:44:28.270
<v Speaker 0>Look at that. Yep.

00:44:29.230 --> 00:44:30.109
<v Speaker 1>Everything's

00:44:30.109 --> 00:44:31.790
<v Speaker 1>up and running and fine and dandy.

00:44:32.270 --> 00:44:34.190
<v Speaker 1>But but here you actually see that that

00:44:34.270 --> 00:44:37.069
<v Speaker 1>because remember that you have three hosts in

00:44:37.069 --> 00:44:38.270
<v Speaker 1>the in the YAML.

00:44:38.510 --> 00:44:40.805
<v Speaker 0>The control plane is not listed. Right? Because

00:44:40.805 --> 00:44:42.965
<v Speaker 0>it's not running a kubelet or even container

00:44:42.965 --> 00:44:46.165
<v Speaker 0>d or else like that. Yep. Exactly. Exactly.

00:44:46.325 --> 00:44:48.245
<v Speaker 0>Yeah. When when I first seen two, was

00:44:48.245 --> 00:44:49.365
<v Speaker 0>like, oh, we're still waiting on one. And

00:44:49.365 --> 00:44:50.885
<v Speaker 0>I was like, oh, no. It's it's the

00:44:50.885 --> 00:44:52.165
<v Speaker 0>the control plane isolation.

00:44:52.680 --> 00:44:53.480
<v Speaker 1>Yep.

00:44:53.480 --> 00:44:56.280
<v Speaker 1>That that's probably the the the most asked

00:44:56.280 --> 00:44:58.440
<v Speaker 1>question that we see on Slack or or

00:44:58.440 --> 00:45:00.440
<v Speaker 1>even in in GitHub issues that that why

00:45:00.440 --> 00:45:01.720
<v Speaker 1>don't I see my

00:45:01.960 --> 00:45:03.000
<v Speaker 1>my note here?

00:45:04.280 --> 00:45:04.920
<v Speaker 1>You shouldn't.

00:45:05.515 --> 00:45:07.835
<v Speaker 1>So the the the it it basically works

00:45:07.835 --> 00:45:09.994
<v Speaker 1>exactly like like if you if you get

00:45:09.994 --> 00:45:12.635
<v Speaker 1>your Kubernetes cluster from Amazon, say,

00:45:13.195 --> 00:45:15.515
<v Speaker 1>you don't see the controller nodes. You just

00:45:15.515 --> 00:45:18.270
<v Speaker 1>get the API address, and that's it. It's

00:45:18.270 --> 00:45:19.790
<v Speaker 1>it's pretty similar here.

00:45:20.830 --> 00:45:21.630
<v Speaker 0>Nice.

00:45:21.630 --> 00:45:23.950
<v Speaker 0>Well, that's pretty neat. I like that tool,

00:45:23.950 --> 00:45:25.150
<v Speaker 0>and it's

00:45:25.310 --> 00:45:26.670
<v Speaker 0>pretty straightforward.

00:45:27.310 --> 00:45:28.750
<v Speaker 0>You know? Just adding

00:45:28.910 --> 00:45:30.990
<v Speaker 0>the IP addresses of each of my machines.

00:45:30.990 --> 00:45:32.670
<v Speaker 0>I like to just use the

00:45:33.665 --> 00:45:35.665
<v Speaker 0>the SSH agent. I was worried that wasn't

00:45:35.665 --> 00:45:37.345
<v Speaker 0>gonna work, but it just worked.

00:45:37.585 --> 00:45:39.585
<v Speaker 0>So, yeah, pretty solid tool. I like that

00:45:39.585 --> 00:45:40.225
<v Speaker 0>a lot.

00:45:42.545 --> 00:45:44.465
<v Speaker 0>Is there anything else with k zero CTL

00:45:44.465 --> 00:45:45.425
<v Speaker 0>we should take a look at?

00:45:47.309 --> 00:45:48.270
<v Speaker 1>I

00:45:48.829 --> 00:45:51.230
<v Speaker 1>think that that that covers the that covers

00:45:51.230 --> 00:45:54.190
<v Speaker 1>the the the, like, the sort of basic

00:45:54.190 --> 00:45:55.390
<v Speaker 1>basic stuff.

00:45:56.750 --> 00:45:58.029
<v Speaker 0>I'm gonna run a platform. Of course, now

00:45:58.029 --> 00:45:59.069
<v Speaker 1>you now you.

00:46:00.385 --> 00:46:01.345
<v Speaker 1>Yeah. Well,

00:46:03.745 --> 00:46:06.385
<v Speaker 1>it it should actually dump you a a

00:46:06.385 --> 00:46:07.825
<v Speaker 1>tarball in your

00:46:08.385 --> 00:46:09.265
<v Speaker 1>current

00:46:09.745 --> 00:46:10.225
<v Speaker 0>Yeah.

00:46:10.785 --> 00:46:11.665
<v Speaker 1>Directory.

00:46:11.665 --> 00:46:12.225
<v Speaker 1>Yep.

00:46:12.625 --> 00:46:14.385
<v Speaker 0>So what is that backup of? Is that

00:46:14.385 --> 00:46:15.105
<v Speaker 0>the database?

00:46:16.140 --> 00:46:17.980
<v Speaker 1>Yeah. It's the kind database,

00:46:17.980 --> 00:46:18.540
<v Speaker 1>the

00:46:18.859 --> 00:46:20.700
<v Speaker 1>the the CA certificates,

00:46:20.940 --> 00:46:22.540
<v Speaker 1>and and and,

00:46:22.619 --> 00:46:23.740
<v Speaker 1>basically, the

00:46:24.380 --> 00:46:26.700
<v Speaker 1>needed state of the control plane.

00:46:27.835 --> 00:46:29.195
<v Speaker 0>Okay. Awesome.

00:46:29.435 --> 00:46:31.675
<v Speaker 1>I mean, of course, the we we we

00:46:31.675 --> 00:46:34.475
<v Speaker 1>have to get that that CA into a

00:46:34.475 --> 00:46:35.275
<v Speaker 1>safe

00:46:35.435 --> 00:46:37.835
<v Speaker 1>backup place because if you if you wanna

00:46:37.835 --> 00:46:40.235
<v Speaker 1>change the CA on the cluster, then, well,

00:46:40.235 --> 00:46:40.875
<v Speaker 1>it's a

00:46:41.820 --> 00:46:44.380
<v Speaker 1>slightly more difficult exercise.

00:46:45.100 --> 00:46:46.460
<v Speaker 0>Yes. Definitely.

00:46:47.420 --> 00:46:50.140
<v Speaker 0>Let's tackle a couple of questions, and then

00:46:50.140 --> 00:46:51.660
<v Speaker 0>we'll see if there's anything else we wanna

00:46:51.660 --> 00:46:54.165
<v Speaker 0>just, we wanna run over. So we've got

00:46:54.165 --> 00:46:56.245
<v Speaker 0>one more from Alex. It's just a follow-up

00:46:56.245 --> 00:46:58.485
<v Speaker 0>from the Kaleckel cube rooter question.

00:46:58.885 --> 00:47:01.125
<v Speaker 0>And I guess Alex is just saying, yeah,

00:47:01.125 --> 00:47:03.365
<v Speaker 0>that makes sense. If we want to use

00:47:03.365 --> 00:47:05.765
<v Speaker 0>on local and for a medium sized virtual

00:47:05.765 --> 00:47:08.040
<v Speaker 0>machines, I can still use Calico. Right? So

00:47:08.040 --> 00:47:09.560
<v Speaker 0>I think what you said is it's all

00:47:09.560 --> 00:47:11.800
<v Speaker 0>swappable. Right? And all this yeah.

00:47:12.520 --> 00:47:14.760
<v Speaker 1>And and and it's it's, of course, all

00:47:14.760 --> 00:47:18.120
<v Speaker 1>swappable, but but we do include Calico

00:47:18.200 --> 00:47:21.315
<v Speaker 1>within k0s itself. So so k zeros itself

00:47:21.315 --> 00:47:24.995
<v Speaker 1>has the capability to run either or Calico.

00:47:25.635 --> 00:47:27.235
<v Speaker 1>But then, of course, there's a third option.

00:47:27.235 --> 00:47:29.635
<v Speaker 1>You're, like, bring your own. So so you

00:47:29.635 --> 00:47:31.795
<v Speaker 1>can deploy k zeros without any CNI, and

00:47:31.795 --> 00:47:33.475
<v Speaker 1>then it's up to you to configure whatever

00:47:33.475 --> 00:47:35.750
<v Speaker 1>CNI you you wanna use. But we we

00:47:35.750 --> 00:47:37.030
<v Speaker 1>support out of box,

00:47:37.270 --> 00:47:38.710
<v Speaker 1>Calico and Cube Router.

00:47:39.270 --> 00:47:40.550
<v Speaker 0>Alright. Thank you.

00:47:41.030 --> 00:47:41.830
<v Speaker 0>Is

00:47:41.830 --> 00:47:42.470
<v Speaker 0>asking,

00:47:42.869 --> 00:47:45.109
<v Speaker 0>so how do I debug the control plane?

00:47:45.109 --> 00:47:47.109
<v Speaker 0>I guess if something goes wrong, what what's

00:47:47.109 --> 00:47:49.350
<v Speaker 0>the options then? Is it SSH onto the

00:47:49.350 --> 00:47:49.590
<v Speaker 0>machine?

00:47:50.165 --> 00:47:51.685
<v Speaker 1>Usually.

00:47:51.685 --> 00:47:53.685
<v Speaker 1>Yeah. Usually. Yeah. Or

00:47:54.405 --> 00:47:56.165
<v Speaker 1>use use whatever

00:47:56.244 --> 00:47:57.525
<v Speaker 1>whatever mechanisms

00:47:57.525 --> 00:47:59.605
<v Speaker 1>that you that you use to to connect

00:47:59.605 --> 00:48:01.525
<v Speaker 1>the note to the notes and and and

00:48:01.525 --> 00:48:02.405
<v Speaker 1>whatnot. So

00:48:03.330 --> 00:48:05.490
<v Speaker 0>Yeah. So I guess as part of the

00:48:05.650 --> 00:48:07.730
<v Speaker 0>you know, when you're deploying k zero's control

00:48:07.730 --> 00:48:09.410
<v Speaker 0>plane node, you'll probably wanna stick some monitoring

00:48:09.410 --> 00:48:11.170
<v Speaker 0>on that machine, get some logs out of

00:48:11.170 --> 00:48:12.850
<v Speaker 0>it, and a few other bits and pieces.

00:48:13.170 --> 00:48:15.170
<v Speaker 1>Yeah. Yeah. Absolutely. Absolutely.

00:48:17.170 --> 00:48:17.650
<v Speaker 0>Okay.

00:48:20.565 --> 00:48:22.085
<v Speaker 0>Yeah. I don't think Alex has a question

00:48:22.085 --> 00:48:23.925
<v Speaker 0>there. I think Alex is just agreeing with

00:48:23.925 --> 00:48:25.525
<v Speaker 0>the control plane not showing up on the

00:48:25.525 --> 00:48:27.685
<v Speaker 0>list. So we're all good.

00:48:28.005 --> 00:48:30.085
<v Speaker 0>Alright. Awesome. Really cool project.

00:48:30.590 --> 00:48:33.470
<v Speaker 0>I like that YAML format and just spinning

00:48:33.470 --> 00:48:35.470
<v Speaker 0>up and deploying the machines. I think that

00:48:35.470 --> 00:48:36.670
<v Speaker 0>will save me a lot of time and

00:48:36.670 --> 00:48:37.950
<v Speaker 0>a lot of manual steps.

00:48:38.110 --> 00:48:40.750
<v Speaker 0>Is there Yep. Anything else with k0s or

00:48:40.750 --> 00:48:42.830
<v Speaker 0>a k0s CTL that you think we should

00:48:42.830 --> 00:48:44.190
<v Speaker 0>cover before we finish up today?

00:48:45.965 --> 00:48:47.405
<v Speaker 1>I was I was

00:48:48.125 --> 00:48:50.125
<v Speaker 1>not really planning, but I was I was

00:48:50.125 --> 00:48:52.605
<v Speaker 1>prepared to to show a demo with k

00:48:52.605 --> 00:48:56.205
<v Speaker 1>zero CTL where I actually integrated with Terraform

00:48:56.365 --> 00:48:58.445
<v Speaker 1>if if if that is something that that

00:48:58.445 --> 00:49:00.590
<v Speaker 1>people would be interested to see. I think

00:49:00.590 --> 00:49:02.110
<v Speaker 0>we would love to see that if you're

00:49:02.110 --> 00:49:04.430
<v Speaker 0>happy to share. Absolutely.

00:49:04.590 --> 00:49:05.230
<v Speaker 1>Absolutely.

00:49:06.270 --> 00:49:08.190
<v Speaker 0>Alright. Your screen is up. We can see

00:49:08.190 --> 00:49:10.430
<v Speaker 0>Versus Code and your terminal. Take a look.

00:49:10.910 --> 00:49:12.110
<v Speaker 1>Yep. Excellent.

00:49:12.945 --> 00:49:15.825
<v Speaker 1>Let me bump up the font a bit.

00:49:17.265 --> 00:49:18.545
<v Speaker 0>The font is good.

00:49:21.025 --> 00:49:21.665
<v Speaker 1>So,

00:49:21.905 --> 00:49:24.545
<v Speaker 1>basically, I'm I'm I'm using a a smaller

00:49:24.545 --> 00:49:27.985
<v Speaker 1>European cloud provider called Hetzner for this demo,

00:49:29.260 --> 00:49:31.820
<v Speaker 1>mainly because they are super, super fast to

00:49:31.820 --> 00:49:34.620
<v Speaker 1>spin up all the all the needed needed

00:49:34.620 --> 00:49:35.500
<v Speaker 1>infrastructure

00:49:35.500 --> 00:49:36.940
<v Speaker 1>for demo purposes.

00:49:37.420 --> 00:49:40.620
<v Speaker 1>So it's it's basically a simple simple,

00:49:40.700 --> 00:49:43.820
<v Speaker 1>like, three plus three case where I spin

00:49:43.820 --> 00:49:44.700
<v Speaker 1>up

00:49:46.115 --> 00:49:46.915
<v Speaker 1>three

00:49:47.875 --> 00:49:48.675
<v Speaker 1>three

00:49:49.795 --> 00:49:52.675
<v Speaker 1>controllers and and three workers and and with

00:49:52.675 --> 00:49:54.275
<v Speaker 1>the c x 31

00:49:54.275 --> 00:49:56.275
<v Speaker 1>type. So I think that, if I remember

00:49:56.275 --> 00:49:58.355
<v Speaker 1>correctly, that's like

00:49:58.080 --> 00:50:00.560
<v Speaker 1>four CPUs and four gigs of RAM.

00:50:01.040 --> 00:50:01.520
<v Speaker 1>So

00:50:02.480 --> 00:50:04.160
<v Speaker 1>but I mean, it's a it's a it's

00:50:04.160 --> 00:50:06.720
<v Speaker 1>a typical three plus three case.

00:50:07.120 --> 00:50:09.760
<v Speaker 1>And and as we as as we learned

00:50:09.760 --> 00:50:11.840
<v Speaker 1>from the slides and the discussion,

00:50:12.160 --> 00:50:13.440
<v Speaker 1>whenever I run

00:50:14.145 --> 00:50:16.225
<v Speaker 1>AJ control plane, of course, have to have

00:50:16.225 --> 00:50:17.905
<v Speaker 1>a load balancer in front. So so my

00:50:17.905 --> 00:50:19.985
<v Speaker 1>Terraform also deploys this

00:50:21.105 --> 00:50:21.985
<v Speaker 1>Hessner

00:50:21.985 --> 00:50:24.385
<v Speaker 1>load balancer thing and connects it to the

00:50:24.385 --> 00:50:27.265
<v Speaker 1>to the workers and the the usual cloud

00:50:27.265 --> 00:50:28.145
<v Speaker 1>cloud stuff.

00:50:28.620 --> 00:50:30.860
<v Speaker 1>Let's let's call it cloud stuff. People

00:50:32.140 --> 00:50:35.260
<v Speaker 1>get sometimes annoyed when I refer to com

00:50:35.420 --> 00:50:37.900
<v Speaker 1>complex technical things as stuff.

00:50:38.380 --> 00:50:39.980
<v Speaker 0>I'm okay with it. They're alright.

00:50:40.300 --> 00:50:41.180
<v Speaker 1>Yeah. Yeah.

00:50:42.135 --> 00:50:43.655
<v Speaker 1>One of the one of the

00:50:43.895 --> 00:50:46.775
<v Speaker 1>neat tricks that that we we have in

00:50:46.775 --> 00:50:48.935
<v Speaker 1>some of the examples and and and some

00:50:48.935 --> 00:50:51.175
<v Speaker 1>of the documentation on case or CTL is

00:50:51.175 --> 00:50:54.375
<v Speaker 1>this use of this Terraform output variables.

00:50:55.539 --> 00:50:56.180
<v Speaker 1>So,

00:50:56.660 --> 00:50:59.220
<v Speaker 1>basically, I have the the the hosts

00:50:59.220 --> 00:51:00.900
<v Speaker 1>like you had in the YAML.

00:51:00.980 --> 00:51:03.859
<v Speaker 1>I I I basically concatenate the list of

00:51:03.859 --> 00:51:06.260
<v Speaker 1>controllers and workers, and I just have the

00:51:06.260 --> 00:51:09.825
<v Speaker 1>similar structure or the same structure as you

00:51:09.825 --> 00:51:12.785
<v Speaker 1>had in in YAML in in Terraform output.

00:51:13.825 --> 00:51:14.465
<v Speaker 1>So

00:51:16.065 --> 00:51:18.305
<v Speaker 1>and then then I define that the output

00:51:18.305 --> 00:51:21.505
<v Speaker 1>is actually a YAML encoded value of this

00:51:22.590 --> 00:51:24.110
<v Speaker 1>Terraform variables.

00:51:24.110 --> 00:51:25.710
<v Speaker 1>So what what in the end I actually

00:51:25.710 --> 00:51:27.630
<v Speaker 1>get out is is pretty much the same

00:51:27.630 --> 00:51:29.470
<v Speaker 1>that, like like, you did manually.

00:51:30.750 --> 00:51:32.830
<v Speaker 1>So what this allows me to do is

00:51:32.830 --> 00:51:33.470
<v Speaker 1>is

00:51:34.270 --> 00:51:36.830
<v Speaker 1>is do stuff like like

00:51:37.815 --> 00:51:39.655
<v Speaker 1>Terraform apply.

00:51:42.535 --> 00:51:44.855
<v Speaker 1>Yeah. Yeah. Yeah. I trust what I'm doing.

00:51:44.855 --> 00:51:46.295
<v Speaker 1>I don't really, but

00:51:46.615 --> 00:51:47.974
<v Speaker 1>let's assume that I do.

00:51:58.980 --> 00:52:01.220
<v Speaker 1>Yeah. You see see the main reason why

00:52:01.220 --> 00:52:03.140
<v Speaker 1>I use Hetzner in in many of the

00:52:03.140 --> 00:52:05.805
<v Speaker 1>demos because it takes, like, twenty seconds to

00:52:05.805 --> 00:52:07.165
<v Speaker 1>boot up six

00:52:07.405 --> 00:52:09.565
<v Speaker 1>six VMs and a and a load balancer

00:52:09.565 --> 00:52:11.645
<v Speaker 1>connected to those. So Yeah. That was fast.

00:52:11.724 --> 00:52:12.365
<v Speaker 1>Pretty neat.

00:52:12.685 --> 00:52:13.325
<v Speaker 1>Yeah.

00:52:15.565 --> 00:52:16.205
<v Speaker 1>So

00:52:16.525 --> 00:52:18.365
<v Speaker 1>what I'll do is I'll I'll take the

00:52:18.365 --> 00:52:19.724
<v Speaker 1>output as a raw

00:52:20.480 --> 00:52:23.119
<v Speaker 1>because that that'll be the YAML encoded value.

00:52:23.440 --> 00:52:25.039
<v Speaker 1>And then I I can actually pipe it

00:52:25.039 --> 00:52:26.720
<v Speaker 1>to k zero CTL.

00:52:30.319 --> 00:52:31.440
<v Speaker 1>Apply,

00:52:31.599 --> 00:52:35.105
<v Speaker 1>and then we don't need this redirection.

00:52:35.105 --> 00:52:37.265
<v Speaker 1>So, basically, I said said that, okay. Let's

00:52:37.265 --> 00:52:40.385
<v Speaker 1>apply whatever you get from the standard input.

00:52:44.225 --> 00:52:45.825
<v Speaker 1>So this is a sort of a neat

00:52:45.825 --> 00:52:47.665
<v Speaker 1>pattern that we can use with k zero

00:52:47.665 --> 00:52:48.545
<v Speaker 1>CTL tool.

00:52:49.720 --> 00:52:53.000
<v Speaker 1>So imagine you could actually actually have, like,

00:52:53.000 --> 00:52:54.360
<v Speaker 1>a, like, a

00:52:55.400 --> 00:52:56.280
<v Speaker 1>CI

00:52:56.280 --> 00:52:57.160
<v Speaker 1>CD

00:52:57.640 --> 00:52:59.080
<v Speaker 1>sort of a pipeline

00:52:59.080 --> 00:53:00.840
<v Speaker 1>for your infrastructure

00:53:00.840 --> 00:53:03.320
<v Speaker 1>and and for your Kubernetes clusters

00:53:03.320 --> 00:53:04.520
<v Speaker 1>with with this.

00:53:05.000 --> 00:53:06.575
<v Speaker 0>Yeah. I can see, like, a GitHub action

00:53:06.575 --> 00:53:08.815
<v Speaker 0>that runs a Terraform apply, and it passes

00:53:08.815 --> 00:53:09.455
<v Speaker 0>the

00:53:09.615 --> 00:53:11.535
<v Speaker 0>the output forward. And then you got the

00:53:11.535 --> 00:53:13.855
<v Speaker 0>k zero CTL kick in, and it off

00:53:13.855 --> 00:53:15.934
<v Speaker 0>it goes and does its thing. So Yep.

00:53:15.934 --> 00:53:18.815
<v Speaker 1>Exactly. Exactly. Or maybe in future, you could

00:53:18.815 --> 00:53:21.810
<v Speaker 1>actually actually dump the dump the k zero

00:53:21.810 --> 00:53:25.650
<v Speaker 1>CTL YAML in a in a Kubernetes API,

00:53:25.650 --> 00:53:27.570
<v Speaker 1>and then some some magic

00:53:27.570 --> 00:53:29.090
<v Speaker 1>some work kicks in then.

00:53:30.770 --> 00:53:32.530
<v Speaker 0>Yeah. I'm looking forward to seeing that crosswind

00:53:32.530 --> 00:53:34.290
<v Speaker 0>provider. You'll have that ready for me next

00:53:34.290 --> 00:53:36.135
<v Speaker 0>week. Right? I

00:53:36.375 --> 00:53:39.335
<v Speaker 1>no. No promises. No promises. No promises.

00:53:41.015 --> 00:53:42.695
<v Speaker 1>But to be honest, it's not the first

00:53:42.695 --> 00:53:44.855
<v Speaker 1>time I've I've heard the idea. So

00:53:45.655 --> 00:53:47.415
<v Speaker 0>Yeah. I think it would work really, really

00:53:47.415 --> 00:53:47.575
<v Speaker 0>well.

00:53:48.339 --> 00:53:49.940
<v Speaker 0>Because you could have like a k zeros

00:53:49.940 --> 00:53:52.180
<v Speaker 0>that runs cross plane on a single node

00:53:52.180 --> 00:53:55.300
<v Speaker 0>setup and then apply your other k zero's

00:53:55.300 --> 00:53:58.099
<v Speaker 0>control YAML's to it and then have the

00:53:58.099 --> 00:54:00.500
<v Speaker 0>controller cross plane or otherwise go and create

00:54:00.500 --> 00:54:03.025
<v Speaker 0>more virtual machines and deploy. That would be

00:54:03.025 --> 00:54:05.105
<v Speaker 0>a pretty nice setup. I like that. Yep.

00:54:05.185 --> 00:54:06.465
<v Speaker 1>Yep. Yep.

00:54:06.785 --> 00:54:08.785
<v Speaker 1>Or then what the what the

00:54:11.185 --> 00:54:13.905
<v Speaker 1>what the, like, the this true control plane

00:54:13.905 --> 00:54:16.820
<v Speaker 1>isolation actually actually allows us to do is

00:54:16.820 --> 00:54:19.300
<v Speaker 1>is you could basically run the k0s

00:54:19.300 --> 00:54:20.180
<v Speaker 1>controllers

00:54:20.180 --> 00:54:21.460
<v Speaker 1>in a pod

00:54:21.940 --> 00:54:24.740
<v Speaker 1>because there's no requirements for kubelet or anything

00:54:24.740 --> 00:54:25.220
<v Speaker 1>else.

00:54:25.620 --> 00:54:28.260
<v Speaker 1>So what's it's it's just set of normal

00:54:28.260 --> 00:54:30.500
<v Speaker 1>processes. So what's preventing

00:54:30.135 --> 00:54:31.975
<v Speaker 1>running in a in a pod.

00:54:32.935 --> 00:54:34.055
<v Speaker 0>Yeah. Definitely.

00:54:34.535 --> 00:54:37.255
<v Speaker 1>So there's sort of a miter ship type

00:54:37.255 --> 00:54:39.815
<v Speaker 1>of a type of a pattern.

00:54:42.819 --> 00:54:44.500
<v Speaker 0>Right. Looks like it's done.

00:54:44.819 --> 00:54:47.700
<v Speaker 1>Yep. It's done. I got my three plus

00:54:47.700 --> 00:54:50.020
<v Speaker 1>three setup done and and

00:54:54.020 --> 00:54:56.500
<v Speaker 1>yep. One sec. Let's dump it out.

00:55:00.915 --> 00:55:01.795
<v Speaker 1>Export.

00:55:01.795 --> 00:55:03.155
<v Speaker 1>Keep config.

00:55:03.555 --> 00:55:04.595
<v Speaker 1>Keep

00:55:05.075 --> 00:55:05.795
<v Speaker 1>k0s.

00:55:06.194 --> 00:55:07.795
<v Speaker 1>Get node

00:55:07.795 --> 00:55:08.755
<v Speaker 1>pod

00:55:09.635 --> 00:55:10.355
<v Speaker 1>dash a.

00:55:13.940 --> 00:55:15.060
<v Speaker 0>And there we go.

00:55:18.260 --> 00:55:20.900
<v Speaker 0>One thirty node k zero's cluster. Yep.

00:55:21.940 --> 00:55:24.579
<v Speaker 1>And then h a h a control plane

00:55:24.579 --> 00:55:26.579
<v Speaker 1>with load balancer and everything, and it took

00:55:26.579 --> 00:55:28.535
<v Speaker 1>me, like, few minutes.

00:55:29.335 --> 00:55:32.135
<v Speaker 1>Even with even with my typing speed. So

00:55:33.895 --> 00:55:35.575
<v Speaker 0>Very nice. I like that.

00:55:36.135 --> 00:55:36.855
<v Speaker 1>Yeah.

00:55:37.335 --> 00:55:38.775
<v Speaker 1>But I think that that that

00:55:39.335 --> 00:55:42.260
<v Speaker 1>of course, we or or it it doesn't,

00:55:42.260 --> 00:55:44.180
<v Speaker 1>of course, matter how how people set up

00:55:44.180 --> 00:55:46.820
<v Speaker 1>the k0s cluster whether you use, like like,

00:55:46.820 --> 00:55:48.660
<v Speaker 1>Chefs or Ansible or

00:55:48.740 --> 00:55:49.620
<v Speaker 1>Solstacks

00:55:49.620 --> 00:55:52.020
<v Speaker 1>or whatever tools you use. It doesn't really

00:55:52.020 --> 00:55:54.075
<v Speaker 1>matter. We just wanted to build this sort

00:55:54.075 --> 00:55:54.875
<v Speaker 1>of a,

00:55:55.675 --> 00:55:57.835
<v Speaker 1>special purpose tool

00:55:57.915 --> 00:56:00.075
<v Speaker 1>to help with the day two operations,

00:56:00.075 --> 00:56:03.115
<v Speaker 1>like upgrades and and everything. So, it'll it'll

00:56:03.115 --> 00:56:04.635
<v Speaker 1>make life easier

00:56:04.715 --> 00:56:06.475
<v Speaker 1>in in many cases.

00:56:07.790 --> 00:56:08.430
<v Speaker 1>Awesome.

00:56:08.910 --> 00:56:10.910
<v Speaker 1>Maybe we can actually actually

00:56:11.470 --> 00:56:12.750
<v Speaker 1>try an upgrade.

00:56:13.070 --> 00:56:16.670
<v Speaker 1>Where did I have the version? It's

00:56:16.670 --> 00:56:17.710
<v Speaker 1>variable.

00:56:17.710 --> 00:56:19.150
<v Speaker 0>Yes. And the the virus fail.

00:56:23.755 --> 00:56:26.875
<v Speaker 1>The virus file actually contains a

00:56:27.675 --> 00:56:30.395
<v Speaker 1>secret too, so I'll switch.

00:56:31.355 --> 00:56:33.835
<v Speaker 1>You don't see the screen now. Right? No.

00:56:33.835 --> 00:56:35.680
<v Speaker 0>But I think it did show us a

00:56:35.680 --> 00:56:37.360
<v Speaker 0>virus fail at the start.

00:56:38.000 --> 00:56:40.480
<v Speaker 1>I I saw showed the example for Ah,

00:56:40.480 --> 00:56:42.640
<v Speaker 0>the example. Right. Okay. Gotcha. Yeah.

00:56:45.200 --> 00:56:47.120
<v Speaker 1>Really should learn

00:56:47.875 --> 00:56:49.875
<v Speaker 1>to do these sort of things. That's alright.

00:56:49.875 --> 00:56:51.475
<v Speaker 0>I flash my secrets on the show a

00:56:51.475 --> 00:56:53.235
<v Speaker 0>couple of times a week. People have been

00:56:53.235 --> 00:56:55.075
<v Speaker 0>nice and and not hacked me yet. So

00:56:55.075 --> 00:56:56.275
<v Speaker 0>thanks, audience. Yeah.

00:56:57.475 --> 00:56:59.635
<v Speaker 1>Alright. So what I what I did actually

00:57:00.275 --> 00:57:03.630
<v Speaker 1>because we we see that we actually have

00:57:03.630 --> 00:57:06.670
<v Speaker 1>this 21 to two version running. So

00:57:09.150 --> 00:57:10.990
<v Speaker 1>so I'm gonna actually bump it up to

00:57:10.990 --> 00:57:13.070
<v Speaker 1>to 21 to three now.

00:57:13.310 --> 00:57:15.390
<v Speaker 1>So it's it's, I have to do that.

00:57:17.005 --> 00:57:19.645
<v Speaker 1>Apply for the Terraform first.

00:57:21.725 --> 00:57:23.885
<v Speaker 1>You see that in in the Terraform output

00:57:23.885 --> 00:57:25.645
<v Speaker 1>that the version actually changes.

00:57:25.725 --> 00:57:27.805
<v Speaker 1>Mhmm. Doesn't change anything else.

00:57:28.045 --> 00:57:29.405
<v Speaker 1>Then I'll do the

00:57:30.160 --> 00:57:31.520
<v Speaker 1>output and

00:57:31.760 --> 00:57:33.040
<v Speaker 1>apply

00:57:33.520 --> 00:57:34.400
<v Speaker 1>thing.

00:57:38.960 --> 00:57:41.440
<v Speaker 1>We'll see what the the upgrade process actually

00:57:41.440 --> 00:57:42.320
<v Speaker 1>looks like.

00:57:42.560 --> 00:57:43.440
<v Speaker 1>Let me

00:57:44.705 --> 00:57:46.785
<v Speaker 1>erase that a bit. Based on what you

00:57:46.785 --> 00:57:49.105
<v Speaker 0>said earlier, what k zero's control is gonna

00:57:49.105 --> 00:57:51.425
<v Speaker 0>do is SSH on to each machine, pull

00:57:51.425 --> 00:57:53.985
<v Speaker 0>the latest binary, and then basically just flip

00:57:53.985 --> 00:57:54.705
<v Speaker 0>them over?

00:57:55.185 --> 00:57:55.905
<v Speaker 1>Yep.

00:57:55.985 --> 00:57:56.305
<v Speaker 0>Okay.

00:57:57.810 --> 00:57:58.850
<v Speaker 0>We've

00:57:58.850 --> 00:58:01.010
<v Speaker 0>got a a question in the chat from.

00:58:01.170 --> 00:58:02.050
<v Speaker 0>How's

00:58:02.050 --> 00:58:02.690
<v Speaker 0>it going?

00:58:03.490 --> 00:58:06.050
<v Speaker 0>As a Windows workers know, it's something that

00:58:06.050 --> 00:58:08.290
<v Speaker 0>has been thought of or working on?

00:58:10.315 --> 00:58:13.515
<v Speaker 1>We do have a experimental support for Windows

00:58:13.515 --> 00:58:16.235
<v Speaker 1>workers too. So in the in the k

00:58:16.235 --> 00:58:17.195
<v Speaker 1>zero's download

00:58:17.515 --> 00:58:20.475
<v Speaker 1>release page, you actually see a k zero's

00:58:20.475 --> 00:58:23.355
<v Speaker 1>dot exit already existing. There you go.

00:58:24.210 --> 00:58:25.330
<v Speaker 0>Try it out, and then I'll let us

00:58:25.330 --> 00:58:26.290
<v Speaker 0>know how you get on.

00:58:27.730 --> 00:58:28.450
<v Speaker 1>Yeah.

00:58:29.090 --> 00:58:32.850
<v Speaker 1>It has an experimental label, so be very

00:58:34.050 --> 00:58:36.690
<v Speaker 0>Nuno is not shy from experimental labels. He

00:58:36.690 --> 00:58:38.450
<v Speaker 0>is always playing with That's what I've learned

00:58:38.450 --> 00:58:39.010
<v Speaker 1>too.

00:58:39.330 --> 00:58:40.605
<v Speaker 1>Yep. Yeah.

00:58:40.765 --> 00:58:42.605
<v Speaker 1>But I think that's the the the the

00:58:42.605 --> 00:58:46.045
<v Speaker 1>the whole, like, cloud native native world that

00:58:46.045 --> 00:58:46.285
<v Speaker 1>that

00:58:47.245 --> 00:58:49.725
<v Speaker 1>what I've been I've been basically telling everybody

00:58:49.725 --> 00:58:52.605
<v Speaker 1>whenever working with Kubernetes or or anything. If

00:58:52.605 --> 00:58:54.045
<v Speaker 1>you if you see, like like,

00:58:54.890 --> 00:58:58.170
<v Speaker 1>something dash something slash v one beta one,

00:58:58.170 --> 00:59:00.810
<v Speaker 1>well, just use it. It's stable enough. Yeah.

00:59:00.810 --> 00:59:02.410
<v Speaker 0>V one beta one's too mature for me.

00:59:02.410 --> 00:59:04.330
<v Speaker 0>If it's not an alpha API, I'm not

00:59:04.330 --> 00:59:04.970
<v Speaker 0>interested.

00:59:05.370 --> 00:59:08.330
<v Speaker 1>Yeah. Yeah. Yeah. So beta bet beta is

00:59:08.330 --> 00:59:10.330
<v Speaker 1>the new stable in the Exactly. Cloud native

00:59:10.330 --> 00:59:11.195
<v Speaker 1>world. So

00:59:11.515 --> 00:59:13.195
<v Speaker 0>Well, it was only 01/01/2016

00:59:13.195 --> 00:59:14.795
<v Speaker 0>where we could write a v one beta

00:59:14.795 --> 00:59:17.115
<v Speaker 0>one for leak deployments and everything else. Like

00:59:17.195 --> 00:59:17.675
<v Speaker 0>yeah.

00:59:18.075 --> 00:59:19.435
<v Speaker 1>Yeah. Yeah. If it's v one, then it's

00:59:19.435 --> 00:59:21.115
<v Speaker 1>almost like legacy already.

00:59:21.275 --> 00:59:21.755
<v Speaker 1>Right.

00:59:25.050 --> 00:59:27.370
<v Speaker 1>Alright. So so what what what do you

00:59:27.370 --> 00:59:29.210
<v Speaker 1>see? What actually happened is that

00:59:30.570 --> 00:59:33.770
<v Speaker 1>it upgrades the controllers basically one by one,

00:59:34.250 --> 00:59:35.930
<v Speaker 1>and then it moves on to the onto

00:59:35.930 --> 00:59:36.570
<v Speaker 1>the workers.

00:59:36.995 --> 00:59:39.955
<v Speaker 1>But because I have, like, three workers only,

00:59:39.955 --> 00:59:42.355
<v Speaker 1>we can't really do that, like, in parallel

00:59:42.355 --> 00:59:45.235
<v Speaker 1>upgrades that well. So by default, the the

00:59:45.235 --> 00:59:47.795
<v Speaker 1>the k zero's cuddle actually takes,

00:59:47.795 --> 00:59:48.595
<v Speaker 1>like, 10%

00:59:49.230 --> 00:59:51.630
<v Speaker 1>of your notes and and runs the the

00:59:51.630 --> 00:59:53.070
<v Speaker 1>the upgrade in parallel

00:59:53.310 --> 00:59:55.710
<v Speaker 1>for that 10% at a time. So if

00:59:55.710 --> 00:59:58.190
<v Speaker 1>you have 20 notes, it'll actually update two

00:59:58.190 --> 00:59:59.869
<v Speaker 1>notes at a time and and and so

00:59:59.869 --> 01:00:00.109
<v Speaker 1>on.

01:00:01.565 --> 01:00:03.485
<v Speaker 1>So it and and then it actually does

01:00:03.485 --> 01:00:05.805
<v Speaker 1>this this typical upgrade

01:00:06.605 --> 01:00:09.325
<v Speaker 1>or the drain update on cord and dance

01:00:09.325 --> 01:00:11.165
<v Speaker 1>for each of the notes. And and at

01:00:11.165 --> 01:00:13.820
<v Speaker 1>at all steps, it waits that everything becomes

01:00:13.820 --> 01:00:15.020
<v Speaker 1>ready again and

01:00:15.420 --> 01:00:16.220
<v Speaker 1>whatnot.

01:00:16.620 --> 01:00:17.420
<v Speaker 0>Awesome.

01:00:17.500 --> 01:00:18.460
<v Speaker 0>Very cool.

01:00:19.340 --> 01:00:20.860
<v Speaker 0>I'm glad we stuck around for that extra

01:00:20.860 --> 01:00:22.540
<v Speaker 0>bit of demo. The upgrade was nice. I

01:00:22.540 --> 01:00:23.660
<v Speaker 0>mean, we got some love in the chat

01:00:23.660 --> 01:00:25.580
<v Speaker 0>for the upgrade as well. Very cool.

01:00:27.275 --> 01:00:27.995
<v Speaker 0>Alright.

01:00:28.075 --> 01:00:29.915
<v Speaker 0>Well, that is k0s

01:00:29.915 --> 01:00:32.555
<v Speaker 0>everyone. I hope you liked that. You've

01:00:32.555 --> 01:00:35.595
<v Speaker 0>got five seconds to get any more questions

01:00:35.595 --> 01:00:38.395
<v Speaker 0>into that chat before we say goodbye and

01:00:38.395 --> 01:00:39.995
<v Speaker 0>let you say get back to the day.

01:00:41.099 --> 01:00:42.940
<v Speaker 0>Well, if you have any questions, drop them

01:00:42.940 --> 01:00:43.740
<v Speaker 0>in there.

01:00:44.299 --> 01:00:46.140
<v Speaker 0>So I'll finish with a a question that

01:00:46.140 --> 01:00:47.820
<v Speaker 0>I ask quite often. It's just like,

01:00:48.220 --> 01:00:49.740
<v Speaker 0>is k0s

01:00:49.980 --> 01:00:52.619
<v Speaker 0>finished, complete? Are you just tracking upstream now,

01:00:52.619 --> 01:00:54.220
<v Speaker 0>or do you have any new shiny stuff

01:00:54.220 --> 01:00:55.099
<v Speaker 0>coming down the line?

01:00:56.595 --> 01:00:58.995
<v Speaker 1>We do have we do have some new

01:00:58.995 --> 01:01:01.715
<v Speaker 1>shiny stuff coming up. So one

01:01:01.955 --> 01:01:03.315
<v Speaker 1>of the one of the things that we

01:01:03.315 --> 01:01:05.955
<v Speaker 1>are we are working work actually quite early

01:01:05.955 --> 01:01:07.715
<v Speaker 1>early in the process, but but we've started

01:01:07.715 --> 01:01:09.315
<v Speaker 1>to work on a on a feature what

01:01:09.315 --> 01:01:10.835
<v Speaker 1>we call, like, autopilot.

01:01:11.780 --> 01:01:14.260
<v Speaker 1>What it'll it'll do is is is it'll

01:01:14.260 --> 01:01:16.020
<v Speaker 1>take the cluster itself,

01:01:16.420 --> 01:01:17.380
<v Speaker 1>and and

01:01:17.700 --> 01:01:19.460
<v Speaker 1>it'll it'll apply

01:01:19.700 --> 01:01:22.180
<v Speaker 1>the cluster itself will handle all the upgrades

01:01:22.180 --> 01:01:24.660
<v Speaker 1>and updates and everything by itself.

01:01:25.295 --> 01:01:28.335
<v Speaker 1>So we'll we'll basically basically bundle this upgrade

01:01:28.335 --> 01:01:30.575
<v Speaker 1>logic and all the control mechanisms

01:01:30.575 --> 01:01:33.295
<v Speaker 1>between the node trains and and and on

01:01:33.295 --> 01:01:35.535
<v Speaker 1>coordinates and whatnot. We'll we'll bake it into

01:01:35.535 --> 01:01:37.055
<v Speaker 1>the into the control plane itself.

01:01:37.860 --> 01:01:40.660
<v Speaker 1>So, basically, it's a it's a cluster that

01:01:40.660 --> 01:01:42.260
<v Speaker 1>is on an autopilot

01:01:42.260 --> 01:01:43.060
<v Speaker 1>in a way.

01:01:44.260 --> 01:01:45.780
<v Speaker 0>Nice. Sign me up for that.

01:01:46.420 --> 01:01:49.060
<v Speaker 0>We got one question that has snuck in

01:01:49.060 --> 01:01:51.140
<v Speaker 0>there. So is asking it. It's can the

01:01:51.140 --> 01:01:53.775
<v Speaker 0>10% be controlled? I assume this is in

01:01:53.775 --> 01:01:55.615
<v Speaker 0>relation to that upgrade. Yeah.

01:01:56.335 --> 01:01:57.215
<v Speaker 1>Oh,

01:01:57.695 --> 01:01:59.295
<v Speaker 1>I I

01:01:59.295 --> 01:02:01.055
<v Speaker 1>suppose that it is.

01:02:01.615 --> 01:02:03.775
<v Speaker 1>If it's not, then then we have to

01:02:03.775 --> 01:02:06.015
<v Speaker 1>make it as an argument or some sort

01:02:06.015 --> 01:02:06.494
<v Speaker 1>of a

01:02:07.130 --> 01:02:08.890
<v Speaker 1>parameter on somewhere.

01:02:09.450 --> 01:02:13.050
<v Speaker 0>Yeah. To request welcome. Right? Yeah. Yeah. Yeah.

01:02:13.050 --> 01:02:15.850
<v Speaker 1>It's just changing one magic number to something

01:02:15.850 --> 01:02:16.490
<v Speaker 1>else.

01:02:17.370 --> 01:02:19.530
<v Speaker 0>Alright. There's maybe a a good idea for

01:02:19.530 --> 01:02:21.930
<v Speaker 0>a a nice simple contribution that cook gen.

01:02:21.930 --> 01:02:23.785
<v Speaker 0>So if it isn't configurable already,

01:02:24.585 --> 01:02:26.185
<v Speaker 0>feel free to give that a go.

01:02:26.505 --> 01:02:28.345
<v Speaker 1>Yep. Absolutely. Absolutely.

01:02:28.585 --> 01:02:30.345
<v Speaker 0>Alright. Well, thank you so much for joining

01:02:30.345 --> 01:02:32.585
<v Speaker 0>me today. Really good to see that. Our

01:02:32.585 --> 01:02:34.745
<v Speaker 0>demo well, I say our demo. Your demo

01:02:34.745 --> 01:02:36.265
<v Speaker 0>went off without a hitch. It was really

01:02:36.265 --> 01:02:38.760
<v Speaker 0>nice. I hadn't actually used Tertra cloud before,

01:02:38.760 --> 01:02:40.200
<v Speaker 0>but the speed of spinning that up was

01:02:40.200 --> 01:02:41.640
<v Speaker 0>pretty impressive. So maybe I need to check

01:02:41.640 --> 01:02:44.360
<v Speaker 0>that out at some point as well. Alex,

01:02:44.360 --> 01:02:46.120
<v Speaker 0>we can then move one final question.

01:02:46.440 --> 01:02:47.720
<v Speaker 0>We we can do it. Right? Yeah. We

01:02:47.720 --> 01:02:49.655
<v Speaker 0>got a little bit of time. Yeah.

01:02:50.375 --> 01:02:52.615
<v Speaker 0>Alex says, I tried once to deploy Portworx

01:02:52.615 --> 01:02:54.375
<v Speaker 0>to k0s, but I could not get it

01:02:54.375 --> 01:02:56.135
<v Speaker 0>to work. Any ideas if it has something

01:02:56.135 --> 01:02:57.655
<v Speaker 0>to do with the locations where it stores

01:02:57.655 --> 01:02:58.855
<v Speaker 0>the files or configurations?

01:03:02.610 --> 01:03:03.410
<v Speaker 1>I

01:03:03.570 --> 01:03:06.530
<v Speaker 1>I do remember reading about that issue,

01:03:06.770 --> 01:03:08.930
<v Speaker 1>but I I

01:03:09.890 --> 01:03:12.770
<v Speaker 1>can't remember the the details where we where

01:03:12.770 --> 01:03:14.530
<v Speaker 1>we landed on on.

01:03:14.690 --> 01:03:16.370
<v Speaker 1>And and to be honest, I don't I

01:03:16.370 --> 01:03:17.890
<v Speaker 1>don't really I don't really

01:03:18.234 --> 01:03:20.315
<v Speaker 1>know port works at all, how it works

01:03:20.315 --> 01:03:22.075
<v Speaker 1>and what it does. So so

01:03:25.035 --> 01:03:26.875
<v Speaker 1>but it it probably has something to do

01:03:26.875 --> 01:03:29.835
<v Speaker 1>with that where where where k0s

01:03:29.835 --> 01:03:32.155
<v Speaker 1>puts in in in the files and and

01:03:32.155 --> 01:03:34.890
<v Speaker 1>sockets and and everything. Everything. So that that's

01:03:34.890 --> 01:03:37.130
<v Speaker 1>why that's my best guess based on based

01:03:37.130 --> 01:03:39.130
<v Speaker 1>on the information that I I have and

01:03:39.130 --> 01:03:40.890
<v Speaker 1>and know about Portworx.

01:03:41.690 --> 01:03:43.290
<v Speaker 0>Alright. No worries.

01:03:43.530 --> 01:03:45.290
<v Speaker 0>Okay. We got a thank you from Ty

01:03:45.290 --> 01:03:46.815
<v Speaker 0>in the chat. So, yeah, we're gonna finish

01:03:46.815 --> 01:03:49.135
<v Speaker 0>this up. Thank you again. You see, really

01:03:49.135 --> 01:03:51.935
<v Speaker 0>good. Love the demos. Very cool. Any last

01:03:51.935 --> 01:03:54.095
<v Speaker 0>words before we before I let you go?

01:03:55.375 --> 01:03:57.455
<v Speaker 1>Well, as as as in any open source

01:03:57.455 --> 01:03:58.255
<v Speaker 1>project, just

01:03:59.170 --> 01:04:02.130
<v Speaker 1>we we always appreciate feedback and and and

01:04:02.130 --> 01:04:02.930
<v Speaker 1>both

01:04:03.970 --> 01:04:07.010
<v Speaker 1>bulk reports and and feature requests and and

01:04:07.010 --> 01:04:09.410
<v Speaker 1>everything in in in between and and even

01:04:09.410 --> 01:04:11.410
<v Speaker 1>better if if you can pull up a

01:04:11.410 --> 01:04:11.970
<v Speaker 1>PR.

01:04:14.735 --> 01:04:17.455
<v Speaker 1>But, yeah, thanks for thanks for having me

01:04:17.455 --> 01:04:19.775
<v Speaker 1>join the session, and I I I I

01:04:19.775 --> 01:04:21.935
<v Speaker 1>really enjoyed the the format

01:04:22.015 --> 01:04:24.895
<v Speaker 1>of of your sessions here. So Awesome. Hands

01:04:24.895 --> 01:04:27.775
<v Speaker 1>on and not not afraid of of, demo

01:04:27.775 --> 01:04:28.255
<v Speaker 1>effects.

01:04:29.210 --> 01:04:31.529
<v Speaker 0>No. No. I've I've I I look silly

01:04:31.529 --> 01:04:33.369
<v Speaker 0>enough on a stream regularly, so I'm not

01:04:33.369 --> 01:04:35.690
<v Speaker 0>fazed by it anymore. But Yeah. Thank you.

01:04:35.690 --> 01:04:38.089
<v Speaker 0>It was great fun, and I'll hopefully speak

01:04:38.089 --> 01:04:39.210
<v Speaker 0>to you again soon. Have a great day,

01:04:39.210 --> 01:04:39.849
<v Speaker 0>guys. Alright.

01:04:40.665 --> 01:04:41.145
<v Speaker 1>Bye.
