WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 272748e1-6249-4c74-b09f-a5337828dd93
Created: 2025-04-29T20:16:46.538Z
Duration: 5210.0537
Channels: 1

00:00:42.364 --> 00:00:44.844
<v Speaker 0>Hello and welcome to Rawkode live. I am

00:00:44.844 --> 00:00:46.125
<v Speaker 0>your host Rawkode.

00:00:46.364 --> 00:00:48.125
<v Speaker 0>Today, we're gonna be taking a look at

00:00:48.125 --> 00:00:50.445
<v Speaker 0>Second State. We're gonna be playing with a

00:00:50.445 --> 00:00:53.324
<v Speaker 0>combination of functions as a service, Rust, Node

00:00:53.324 --> 00:00:54.125
<v Speaker 0>JS,

00:00:54.445 --> 00:00:56.204
<v Speaker 0>and some random other bits and pieces thrown

00:00:56.204 --> 00:00:58.820
<v Speaker 0>in together. Joining me today, we have Tim

00:00:58.820 --> 00:01:01.700
<v Speaker 0>McCallum from Second State Project. Hey, Tim. How

00:01:01.700 --> 00:01:02.740
<v Speaker 0>are you doing?

00:01:03.380 --> 00:01:06.020
<v Speaker 1>Fantastic. Thank you. Thanks for having me. No.

00:01:06.020 --> 00:01:08.340
<v Speaker 0>My pleasure. I I always love it when

00:01:08.340 --> 00:01:09.780
<v Speaker 0>I get to play with WebAssembly. So I'm

00:01:09.780 --> 00:01:11.460
<v Speaker 0>really excited to kinda kick the tires on

00:01:11.460 --> 00:01:12.740
<v Speaker 0>Second State and see what we can do

00:01:12.740 --> 00:01:13.675
<v Speaker 0>with today.

00:01:13.995 --> 00:01:16.635
<v Speaker 1>Perfect. Should we start by you giving us

00:01:16.635 --> 00:01:18.795
<v Speaker 0>a small introduction into yourself and then we'll

00:01:18.795 --> 00:01:20.315
<v Speaker 0>talk about Second State in a little bit

00:01:20.315 --> 00:01:21.195
<v Speaker 0>more detail.

00:01:22.155 --> 00:01:24.475
<v Speaker 1>Yeah. Sure. So developer

00:01:24.475 --> 00:01:26.875
<v Speaker 1>for Second State, we have developers

00:01:27.100 --> 00:01:30.060
<v Speaker 1>all around the world, in China, Taiwan, The

00:01:30.060 --> 00:01:30.700
<v Speaker 1>States.

00:01:31.820 --> 00:01:33.580
<v Speaker 1>At the moment, we're working on a a

00:01:33.580 --> 00:01:35.180
<v Speaker 1>variety of different projects,

00:01:35.500 --> 00:01:37.980
<v Speaker 1>some blockchain, some web assembly,

00:01:38.940 --> 00:01:41.980
<v Speaker 1>very much at the, virtual machine level and

00:01:42.385 --> 00:01:43.825
<v Speaker 1>the blockchain VM,

00:01:44.705 --> 00:01:46.545
<v Speaker 1>work that we've done in the past ties

00:01:46.545 --> 00:01:49.745
<v Speaker 1>in really nicely with the WebAssembly VM work.

00:01:49.745 --> 00:01:51.105
<v Speaker 1>And last

00:01:51.745 --> 00:01:54.145
<v Speaker 1>year, Michael and I, we went over to

00:01:54.145 --> 00:01:56.910
<v Speaker 1>the first, WebAssembly summit,

00:01:57.230 --> 00:01:59.550
<v Speaker 1>Google headquarters there in Silicon Valley. So that

00:01:59.550 --> 00:02:01.550
<v Speaker 1>was really interesting, really great. And,

00:02:02.430 --> 00:02:04.430
<v Speaker 1>since then, we've just come back and just

00:02:04.430 --> 00:02:05.549
<v Speaker 1>been powering on,

00:02:05.870 --> 00:02:08.030
<v Speaker 1>developing a whole bunch of different, software

00:02:08.765 --> 00:02:11.965
<v Speaker 1>applications and tooling and tool chains and,

00:02:12.365 --> 00:02:13.005
<v Speaker 1>really,

00:02:13.325 --> 00:02:15.725
<v Speaker 1>taking it, to the server side as well.

00:02:15.725 --> 00:02:16.285
<v Speaker 1>So

00:02:16.605 --> 00:02:19.245
<v Speaker 1>working, with WebAssembly on the server side and

00:02:19.245 --> 00:02:20.845
<v Speaker 1>creating a function as a service

00:02:21.450 --> 00:02:24.010
<v Speaker 1>for the open web. So, like, a cloud

00:02:24.010 --> 00:02:24.810
<v Speaker 1>agnostic

00:02:24.890 --> 00:02:27.610
<v Speaker 1>function as a service that anybody can call

00:02:27.610 --> 00:02:30.410
<v Speaker 1>just over the web using secure HTTP

00:02:30.410 --> 00:02:31.930
<v Speaker 1>requests, and that means

00:02:32.250 --> 00:02:34.490
<v Speaker 1>so compiling and launching code as well as

00:02:34.490 --> 00:02:37.375
<v Speaker 1>executing it, deleting it, updating it, lock hot

00:02:37.375 --> 00:02:38.975
<v Speaker 1>swapping it, live in production.

00:02:40.095 --> 00:02:42.655
<v Speaker 1>Probably touching it, fairly soon, but

00:02:43.135 --> 00:02:45.694
<v Speaker 1>the WebAssembly VM is obviously a sandbox. You

00:02:45.694 --> 00:02:46.895
<v Speaker 1>know, it's got some advantages

00:02:47.950 --> 00:02:50.430
<v Speaker 1>that it works in a sandbox environment, so

00:02:50.430 --> 00:02:52.750
<v Speaker 1>it's safe to run untrusted code, etcetera, but

00:02:52.750 --> 00:02:55.709
<v Speaker 1>also has some interesting nuances like it's stateless.

00:02:55.709 --> 00:02:56.750
<v Speaker 1>There's no storage,

00:02:57.069 --> 00:02:58.830
<v Speaker 1>doesn't have strings, you know, like the four

00:02:58.830 --> 00:03:01.855
<v Speaker 1>data types. It's basically integers and things like

00:03:01.855 --> 00:03:04.015
<v Speaker 1>that. So we've worked really hard to try

00:03:04.015 --> 00:03:05.695
<v Speaker 1>and bring together a whole ecosystem.

00:03:05.935 --> 00:03:06.495
<v Speaker 1>And

00:03:06.895 --> 00:03:08.735
<v Speaker 1>I'm essentially part of the

00:03:09.855 --> 00:03:11.695
<v Speaker 1>the open API,

00:03:12.015 --> 00:03:13.695
<v Speaker 1>which is a function as a service, which

00:03:13.695 --> 00:03:15.599
<v Speaker 1>we could have a a good look at

00:03:15.599 --> 00:03:17.360
<v Speaker 1>today, that'd be that'd be really cool.

00:03:17.680 --> 00:03:18.800
<v Speaker 0>Alright. Excellent.

00:03:19.200 --> 00:03:20.880
<v Speaker 0>What do you think some of the

00:03:21.840 --> 00:03:23.599
<v Speaker 0>what are the main use cases for someone

00:03:23.599 --> 00:03:26.159
<v Speaker 0>who would be wanting to adopt Second State?

00:03:26.159 --> 00:03:27.599
<v Speaker 0>What what problems would they be trying to

00:03:27.599 --> 00:03:27.840
<v Speaker 0>solve?

00:03:29.325 --> 00:03:32.685
<v Speaker 1>So probably the the one, that would relate

00:03:32.685 --> 00:03:34.045
<v Speaker 1>to the work I do is

00:03:34.364 --> 00:03:35.165
<v Speaker 1>traditionally,

00:03:35.165 --> 00:03:37.245
<v Speaker 1>you have, you want to build a web

00:03:37.245 --> 00:03:39.485
<v Speaker 1>application or a website, something with a little

00:03:39.485 --> 00:03:40.525
<v Speaker 1>bit of functionality.

00:03:40.765 --> 00:03:42.605
<v Speaker 1>You'd essentially have to go through and create

00:03:42.780 --> 00:03:44.620
<v Speaker 1>the LAMP stack, you know. So you've got

00:03:44.620 --> 00:03:47.260
<v Speaker 1>the the Linux and Apache and PHP and

00:03:47.260 --> 00:03:49.180
<v Speaker 1>you'd have MySQL and then you've got all

00:03:49.180 --> 00:03:49.660
<v Speaker 1>these

00:03:49.980 --> 00:03:51.100
<v Speaker 1>issues around,

00:03:51.420 --> 00:03:53.020
<v Speaker 1>you know, setting up the database,

00:03:53.180 --> 00:03:55.675
<v Speaker 1>all the security aspects of that, doing all

00:03:55.675 --> 00:03:57.834
<v Speaker 1>your IP tables on the survey, installing the

00:03:57.834 --> 00:03:58.955
<v Speaker 1>server software.

00:03:59.915 --> 00:04:02.795
<v Speaker 1>And in any institution, you're essentially running,

00:04:03.035 --> 00:04:04.635
<v Speaker 1>you know, like you've got a security team

00:04:04.635 --> 00:04:06.395
<v Speaker 1>and those guys are doing all of the

00:04:06.395 --> 00:04:08.474
<v Speaker 1>work to secure the network and to

00:04:09.220 --> 00:04:11.300
<v Speaker 1>maintain all the firewalls and the servers and

00:04:11.300 --> 00:04:12.340
<v Speaker 1>things like that. And what we do is

00:04:12.340 --> 00:04:13.780
<v Speaker 1>we take away all of that,

00:04:14.260 --> 00:04:14.740
<v Speaker 1>and

00:04:15.300 --> 00:04:18.660
<v Speaker 1>we just offer a function as a service,

00:04:19.860 --> 00:04:22.580
<v Speaker 1>but not in a proprietary cloud environment

00:04:23.055 --> 00:04:25.455
<v Speaker 1>where you have, like, this proprietary, you username

00:04:25.455 --> 00:04:28.095
<v Speaker 1>and login and dashboards or any sort of

00:04:28.735 --> 00:04:30.975
<v Speaker 1>user authentication access control, all those sorts of

00:04:30.975 --> 00:04:32.495
<v Speaker 1>things. We throw all that out the window,

00:04:32.495 --> 00:04:34.575
<v Speaker 1>and we just give you a

00:04:35.310 --> 00:04:38.910
<v Speaker 1>an API endpoint, essentially like a rest RESTful

00:04:38.910 --> 00:04:39.630
<v Speaker 1>API.

00:04:40.110 --> 00:04:42.510
<v Speaker 1>So you can stand up a website in

00:04:42.510 --> 00:04:45.070
<v Speaker 1>five minutes, like, highly functional, you know, doing

00:04:45.070 --> 00:04:47.950
<v Speaker 1>things like, facial recognition, image classification.

00:04:50.324 --> 00:04:52.005
<v Speaker 1>Your previous videos there where you did the

00:04:52.005 --> 00:04:54.005
<v Speaker 1>anagram solver and things, I've turned that into

00:04:54.005 --> 00:04:56.405
<v Speaker 1>an API in a few minutes and deployed

00:04:56.405 --> 00:04:56.965
<v Speaker 1>that.

00:04:57.285 --> 00:04:57.604
<v Speaker 1>The

00:04:58.645 --> 00:05:00.965
<v Speaker 1>this jam stack, I don't know if you've

00:05:00.965 --> 00:05:02.640
<v Speaker 1>talked about that a fair bit, but so

00:05:02.640 --> 00:05:04.960
<v Speaker 1>the Java API and markup,

00:05:05.200 --> 00:05:08.960
<v Speaker 1>that's a really cool framework. So, essentially, the

00:05:08.960 --> 00:05:11.440
<v Speaker 1>problem we're solving is we're just saying you

00:05:11.440 --> 00:05:13.200
<v Speaker 1>can just use the JAMstack. So you can

00:05:13.200 --> 00:05:15.120
<v Speaker 1>have some HTML,

00:05:15.485 --> 00:05:17.405
<v Speaker 1>maybe one JavaScript function,

00:05:17.725 --> 00:05:21.005
<v Speaker 1>and you call one of the APIs,

00:05:21.645 --> 00:05:23.805
<v Speaker 1>and you're off to the races. You've got

00:05:23.805 --> 00:05:25.165
<v Speaker 1>a a fully functioning

00:05:26.285 --> 00:05:28.820
<v Speaker 1>web application on the open web with no

00:05:28.820 --> 00:05:31.060
<v Speaker 1>infrastructure. So it's like a zero infrastructure. You

00:05:31.060 --> 00:05:33.220
<v Speaker 1>can even open it statically on your PC,

00:05:33.700 --> 00:05:35.780
<v Speaker 1>and you just, you know, say you we

00:05:35.780 --> 00:05:37.060
<v Speaker 1>might do this a bit later.

00:05:37.380 --> 00:05:38.900
<v Speaker 1>You know, you click a button that files

00:05:38.900 --> 00:05:40.820
<v Speaker 1>off a JavaScript function that calls an API

00:05:40.820 --> 00:05:42.735
<v Speaker 1>and returns a result, And you can just

00:05:42.735 --> 00:05:44.735
<v Speaker 1>do that all even if it's just statically

00:05:44.735 --> 00:05:46.495
<v Speaker 1>on your system. So there's no servers, there's

00:05:46.495 --> 00:05:48.815
<v Speaker 1>no hosting, there's no security, no databases, all

00:05:48.815 --> 00:05:51.455
<v Speaker 1>that stuff. It's all by the by.

00:05:52.255 --> 00:05:55.695
<v Speaker 0>Nice. Alright. Let's tackle a couple of comments.

00:05:55.695 --> 00:05:56.975
<v Speaker 0>So first, we gotta

00:05:57.480 --> 00:06:00.200
<v Speaker 0>wash hands thumbs up. Thanks, Miley.

00:06:02.280 --> 00:06:04.680
<v Speaker 0>Pignesh is saying what is Second State really?

00:06:04.680 --> 00:06:07.080
<v Speaker 0>I I think we just covered that hopefully.

00:06:07.160 --> 00:06:08.600
<v Speaker 0>And we're about to get hands on with

00:06:08.600 --> 00:06:09.720
<v Speaker 0>it, so you'll see it in action and

00:06:09.720 --> 00:06:11.160
<v Speaker 0>hopefully that will answer any of those other

00:06:11.160 --> 00:06:12.680
<v Speaker 0>questions that you have. But feel free to

00:06:12.680 --> 00:06:15.255
<v Speaker 0>add more comments if you need. And hello

00:06:15.255 --> 00:06:16.935
<v Speaker 0>from Cube Daily. Hey, Cube.

00:06:17.495 --> 00:06:18.055
<v Speaker 0>So

00:06:18.935 --> 00:06:21.335
<v Speaker 0>can we think of Second State as

00:06:21.495 --> 00:06:22.135
<v Speaker 0>a,

00:06:22.535 --> 00:06:24.375
<v Speaker 0>you know, you said there's no infrastructure, I

00:06:24.375 --> 00:06:26.660
<v Speaker 0>just need to write my functions that gets

00:06:26.660 --> 00:06:28.500
<v Speaker 0>compared to Wasm and then I deploy them

00:06:28.500 --> 00:06:30.900
<v Speaker 0>to second state essentially like a like, you

00:06:30.900 --> 00:06:32.980
<v Speaker 0>know, if I were writing a JavaScript application,

00:06:32.980 --> 00:06:34.420
<v Speaker 0>I may throw it to Netlify or to

00:06:34.420 --> 00:06:37.460
<v Speaker 0>Versal second state is that but for WebAssembly.

00:06:37.460 --> 00:06:39.715
<v Speaker 0>It's my understanding there. Correct. Awesome.

00:06:39.715 --> 00:06:41.794
<v Speaker 1>That's right. So the the the function execution

00:06:41.794 --> 00:06:43.795
<v Speaker 1>is done on a a standalone

00:06:43.955 --> 00:06:46.995
<v Speaker 1>VM, a WebAssembly VM. So Second State

00:06:47.155 --> 00:06:47.955
<v Speaker 1>itself

00:06:48.194 --> 00:06:50.755
<v Speaker 1>is much broader. The the company Second State

00:06:50.755 --> 00:06:53.180
<v Speaker 1>Inc, do a lot of blockchain work. You

00:06:53.180 --> 00:06:54.699
<v Speaker 1>see on the website there, which you'd probably

00:06:54.699 --> 00:06:56.860
<v Speaker 1>pop over and visit in a sec. Yep.

00:06:56.940 --> 00:06:59.020
<v Speaker 1>We have a lot of affiliations with some

00:06:59.020 --> 00:07:01.580
<v Speaker 1>some large projects in the blockchain space.

00:07:01.900 --> 00:07:02.220
<v Speaker 1>So

00:07:03.495 --> 00:07:05.175
<v Speaker 1>there's a fair bit to go through on

00:07:05.175 --> 00:07:07.735
<v Speaker 1>the site there. What what I'm mainly, working

00:07:07.735 --> 00:07:09.735
<v Speaker 1>on at the moment, is the function as

00:07:09.735 --> 00:07:12.295
<v Speaker 1>a service, which is the serverless tab up

00:07:12.295 --> 00:07:14.295
<v Speaker 1>there. And, if you click on the blockchain

00:07:14.295 --> 00:07:16.055
<v Speaker 1>tab or the other tabs, you'll see the

00:07:16.055 --> 00:07:18.270
<v Speaker 1>other projects that we're working on. We're we're

00:07:18.270 --> 00:07:19.949
<v Speaker 1>going full steam ahead in in a lot

00:07:19.949 --> 00:07:21.150
<v Speaker 1>of directions. So

00:07:21.870 --> 00:07:23.870
<v Speaker 1>probably too much to cover in in one

00:07:23.870 --> 00:07:25.629
<v Speaker 1>call, but we can certainly look at the

00:07:25.629 --> 00:07:27.229
<v Speaker 1>function as a service,

00:07:27.550 --> 00:07:29.389
<v Speaker 1>the serverless stuff today. But, yeah, a lot

00:07:29.389 --> 00:07:31.405
<v Speaker 1>of work in the VM space,

00:07:31.565 --> 00:07:32.925
<v Speaker 1>machine learning AI,

00:07:34.205 --> 00:07:37.245
<v Speaker 1>the building blockchain VM for other really high

00:07:37.245 --> 00:07:38.525
<v Speaker 1>profile projects.

00:07:39.324 --> 00:07:41.884
<v Speaker 0>And it's all open source? There's no proprietary

00:07:41.884 --> 00:07:43.645
<v Speaker 0>bits, or is it a mix? Yeah.

00:07:44.205 --> 00:07:46.740
<v Speaker 1>Yeah. Every free and open source, the GitHub

00:07:46.740 --> 00:07:48.580
<v Speaker 1>repository is just full of all of our

00:07:48.580 --> 00:07:51.380
<v Speaker 1>work from the developers in China, Taiwan, America,

00:07:51.380 --> 00:07:52.100
<v Speaker 1>Australia.

00:07:52.340 --> 00:07:53.700
<v Speaker 1>Yeah. Nice.

00:07:54.100 --> 00:07:55.620
<v Speaker 0>Well, let's kick the tires on this then.

00:07:55.620 --> 00:07:57.460
<v Speaker 0>Let's see if we can get some functions

00:07:57.460 --> 00:07:57.860
<v Speaker 0>deployed.

00:07:58.525 --> 00:08:00.205
<v Speaker 0>Is the best place to start clicking on

00:08:00.205 --> 00:08:01.245
<v Speaker 0>serverless

00:08:01.645 --> 00:08:03.724
<v Speaker 0>and then get started tomorrow? Yeah. I guess

00:08:03.724 --> 00:08:04.365
<v Speaker 1>the

00:08:04.525 --> 00:08:04.845
<v Speaker 1>the

00:08:06.764 --> 00:08:09.325
<v Speaker 1>yeah. Maybe just suggest a couple of things.

00:08:09.884 --> 00:08:11.565
<v Speaker 1>If we just primarily look at the function

00:08:11.565 --> 00:08:14.240
<v Speaker 1>as a service stuff today, if you have

00:08:14.240 --> 00:08:16.720
<v Speaker 1>a, like, your code editor, if we just

00:08:16.720 --> 00:08:18.240
<v Speaker 1>open up like a blank page,

00:08:18.560 --> 00:08:20.720
<v Speaker 1>I just recommend that whilst we work through

00:08:20.720 --> 00:08:22.400
<v Speaker 1>this, we'll just use that as like a

00:08:22.400 --> 00:08:24.080
<v Speaker 1>like a chalkboard to just

00:08:24.800 --> 00:08:26.400
<v Speaker 1>paste some text in so we can come

00:08:26.400 --> 00:08:27.599
<v Speaker 1>back to it. And I'll show you how

00:08:27.599 --> 00:08:29.465
<v Speaker 1>when we launch code, it gives you, like,

00:08:29.465 --> 00:08:30.985
<v Speaker 1>an ID, which you then use that ID

00:08:30.985 --> 00:08:32.345
<v Speaker 1>to call the code and things like that.

00:08:32.345 --> 00:08:33.705
<v Speaker 1>So we just have, a blank

00:08:35.225 --> 00:08:36.585
<v Speaker 1>sketch pad, if you will.

00:08:39.625 --> 00:08:41.784
<v Speaker 1>I'll send you through a link, which is

00:08:41.784 --> 00:08:45.900
<v Speaker 1>the Rawkode livestream links. There's a API

00:08:46.459 --> 00:08:48.060
<v Speaker 1>there. If you just click on that API

00:08:48.060 --> 00:08:49.740
<v Speaker 1>docs, we might start there.

00:08:50.140 --> 00:08:51.660
<v Speaker 1>That's okay with you. Sort of jump straight

00:08:51.660 --> 00:08:52.380
<v Speaker 1>in and

00:08:53.500 --> 00:08:57.675
<v Speaker 0>Yep. So this repository is just on github.com/tpmccallum.

00:08:57.675 --> 00:08:59.835
<v Speaker 0>The link will be in the description afterwards,

00:08:59.835 --> 00:09:01.035
<v Speaker 0>but feel free to check it out at

00:09:01.035 --> 00:09:01.915
<v Speaker 0>your own leisure.

00:09:02.395 --> 00:09:03.835
<v Speaker 0>And here we have

00:09:04.635 --> 00:09:05.275
<v Speaker 0>so

00:09:06.155 --> 00:09:08.395
<v Speaker 0>this is like the open API generated

00:09:08.850 --> 00:09:10.610
<v Speaker 0>document? Yeah. Yeah.

00:09:11.089 --> 00:09:12.769
<v Speaker 1>So just recently

00:09:13.009 --> 00:09:14.050
<v Speaker 1>entered this

00:09:14.610 --> 00:09:18.449
<v Speaker 1>into the Postman API hack, and the name

00:09:18.449 --> 00:09:20.209
<v Speaker 1>I came up with was Jampack because we

00:09:20.209 --> 00:09:22.450
<v Speaker 1>just talked about the JavaScript API and markup.

00:09:22.529 --> 00:09:23.970
<v Speaker 1>And this really is

00:09:24.545 --> 00:09:26.625
<v Speaker 1>jam packed. You can do everything with this.

00:09:26.625 --> 00:09:28.704
<v Speaker 1>So you can essentially write Rust source code,

00:09:28.704 --> 00:09:30.464
<v Speaker 1>compile it to WebAssembly, and launch it, and

00:09:30.464 --> 00:09:33.345
<v Speaker 1>then call it. So your application can be

00:09:33.345 --> 00:09:34.625
<v Speaker 1>as wild as what you can come up

00:09:34.625 --> 00:09:35.505
<v Speaker 1>with essentially,

00:09:35.904 --> 00:09:37.265
<v Speaker 1>and we can do a bit of that

00:09:37.265 --> 00:09:37.745
<v Speaker 1>today.

00:09:38.130 --> 00:09:40.450
<v Speaker 1>So if we scroll down here,

00:09:40.930 --> 00:09:42.370
<v Speaker 1>this gives you a bit of an intro

00:09:42.370 --> 00:09:43.090
<v Speaker 1>into

00:09:43.730 --> 00:09:45.570
<v Speaker 1>it's like an overview. But if we just

00:09:45.570 --> 00:09:46.930
<v Speaker 1>jump straight into the,

00:09:47.650 --> 00:09:49.090
<v Speaker 1>API calls here,

00:09:49.330 --> 00:09:51.570
<v Speaker 1>the first one there that get request,

00:09:52.050 --> 00:09:55.175
<v Speaker 1>is, yeah, that guy there, if we just

00:09:55.175 --> 00:09:56.775
<v Speaker 1>on the right, you can see the curl

00:09:56.775 --> 00:09:59.175
<v Speaker 1>command. So if you paste that into your

00:09:59.255 --> 00:10:00.695
<v Speaker 1>terminal and hit enter,

00:10:01.335 --> 00:10:02.855
<v Speaker 1>if that's okay with you, like we just

00:10:03.095 --> 00:10:05.495
<v Speaker 1>yeah. Is that my computer infected

00:10:05.495 --> 00:10:07.015
<v Speaker 0>with some crazy Watson virus?

00:10:08.220 --> 00:10:09.740
<v Speaker 0>I was a bit too trusting there, I

00:10:09.740 --> 00:10:12.140
<v Speaker 0>think, with that curl command. So these are

00:10:12.140 --> 00:10:15.180
<v Speaker 1>all so we're just doing secure HTTP requests.

00:10:15.180 --> 00:10:16.700
<v Speaker 1>So those are all of the

00:10:17.260 --> 00:10:19.260
<v Speaker 1>Wasm IDs that are in the system. So

00:10:19.260 --> 00:10:20.780
<v Speaker 1>when we deploy one, it sends you back

00:10:20.780 --> 00:10:21.260
<v Speaker 1>an ID.

00:10:22.334 --> 00:10:23.295
<v Speaker 1>And so

00:10:23.695 --> 00:10:25.295
<v Speaker 1>if you go down a little bit further,

00:10:25.295 --> 00:10:27.214
<v Speaker 1>we've got the the next one there. Oh,

00:10:27.214 --> 00:10:29.535
<v Speaker 1>actually, go down a a couple. When you

00:10:29.535 --> 00:10:30.335
<v Speaker 1>deploy

00:10:30.415 --> 00:10:31.135
<v Speaker 1>a

00:10:31.455 --> 00:10:32.654
<v Speaker 1>an executable,

00:10:32.654 --> 00:10:33.775
<v Speaker 1>you can actually

00:10:34.095 --> 00:10:35.295
<v Speaker 1>get back a

00:10:35.680 --> 00:10:38.240
<v Speaker 1>Wasm SHA two fifty six hash.

00:10:38.400 --> 00:10:40.960
<v Speaker 1>So if we paste the two fifty six

00:10:41.200 --> 00:10:42.880
<v Speaker 1>hash filter by

00:10:43.920 --> 00:10:45.760
<v Speaker 1>into the terminal

00:10:47.760 --> 00:10:49.685
<v Speaker 1>so it's Oh, no. I think I just

00:10:49.685 --> 00:10:50.725
<v Speaker 0>need to Oh, no. That's

00:10:51.365 --> 00:10:52.725
<v Speaker 1>we escaped the,

00:10:53.045 --> 00:10:55.525
<v Speaker 1>I think we escaped the square brackets with

00:10:55.525 --> 00:10:56.965
<v Speaker 1>a backslash. I think that

00:10:58.005 --> 00:10:59.605
<v Speaker 1>would resolve that.

00:11:00.325 --> 00:11:01.845
<v Speaker 1>Yeah. I think that's cool.

00:11:02.245 --> 00:11:04.370
<v Speaker 1>So what that's doing is returning you a

00:11:04.370 --> 00:11:07.730
<v Speaker 1>hash of the executable code that you deployed.

00:11:07.730 --> 00:11:09.890
<v Speaker 1>And this is good because,

00:11:10.290 --> 00:11:12.529
<v Speaker 1>say, you're using somebody else's like, say, do

00:11:12.529 --> 00:11:14.529
<v Speaker 1>a Celsius to Fahrenheit conversion or something like

00:11:14.529 --> 00:11:15.810
<v Speaker 1>that, and I just wanna share that with

00:11:15.810 --> 00:11:17.915
<v Speaker 1>the world. If I know that the SHA

00:11:17.915 --> 00:11:20.715
<v Speaker 1>two fifty six is that, then my I

00:11:20.715 --> 00:11:23.355
<v Speaker 1>can programmatically check that either before and after

00:11:23.355 --> 00:11:26.315
<v Speaker 1>a call. So if anybody changes like, if

00:11:26.315 --> 00:11:29.630
<v Speaker 1>the owner of the executable code changes the

00:11:29.710 --> 00:11:31.070
<v Speaker 1>any part of the code, then it will

00:11:31.070 --> 00:11:33.070
<v Speaker 1>create a completely different hash, and then I

00:11:33.070 --> 00:11:34.830
<v Speaker 1>will know, oh, hang on. I'm not actually

00:11:34.830 --> 00:11:37.230
<v Speaker 1>calling the function I intended. Now it's something

00:11:37.230 --> 00:11:38.910
<v Speaker 1>different. So we cover

00:11:39.150 --> 00:11:40.190
<v Speaker 1>that off in a bit.

00:11:40.750 --> 00:11:42.350
<v Speaker 0>So does that mean if I deploy

00:11:43.785 --> 00:11:44.665
<v Speaker 0>if I

00:11:46.665 --> 00:11:49.305
<v Speaker 0>deploy a function on Second State, it's publicly

00:11:49.305 --> 00:11:51.225
<v Speaker 0>available for for for everybody?

00:11:51.945 --> 00:11:52.665
<v Speaker 1>Correct.

00:11:52.825 --> 00:11:55.625
<v Speaker 1>And you can also, when you deploy it,

00:11:55.625 --> 00:11:58.139
<v Speaker 1>make it only available to you exclusively. So

00:11:58.139 --> 00:12:00.779
<v Speaker 1>100% private by just putting in a

00:12:00.940 --> 00:12:01.899
<v Speaker 1>in the header.

00:12:02.459 --> 00:12:05.820
<v Speaker 1>You just it'll it'll create a usage key.

00:12:06.139 --> 00:12:08.139
<v Speaker 1>And if you don't have that key, then

00:12:08.139 --> 00:12:09.899
<v Speaker 1>you can't use it or see it or

00:12:09.899 --> 00:12:12.620
<v Speaker 1>anything like that. So and the the feature

00:12:12.620 --> 00:12:14.515
<v Speaker 1>of this is if you go if you

00:12:14.515 --> 00:12:15.955
<v Speaker 1>make it public actually, we can do this

00:12:15.955 --> 00:12:17.955
<v Speaker 1>if you want. Yeah. Let's do it. We'll

00:12:18.035 --> 00:12:21.395
<v Speaker 1>launch one. Yeah. Cool. Okay. So let's do

00:12:21.555 --> 00:12:23.315
<v Speaker 1>let's do a hello world.

00:12:23.635 --> 00:12:25.395
<v Speaker 1>So if we head on over to,

00:12:25.955 --> 00:12:28.400
<v Speaker 1>probably back to that GitHub file

00:12:29.360 --> 00:12:31.279
<v Speaker 1>that I sent you, if you go to

00:12:31.279 --> 00:12:32.320
<v Speaker 1>demos,

00:12:32.640 --> 00:12:34.960
<v Speaker 1>let's just click on any one of those

00:12:35.279 --> 00:12:37.839
<v Speaker 1>oh, just hang on a sec. I'll just

00:12:47.725 --> 00:12:49.324
<v Speaker 1>sorry. If you just go to GitHub dot

00:12:49.324 --> 00:12:50.605
<v Speaker 1>com forward slash

00:12:51.245 --> 00:12:52.605
<v Speaker 1>second hyphen state.

00:12:55.800 --> 00:12:57.160
<v Speaker 0>Github dot com.

00:12:58.839 --> 00:12:59.960
<v Speaker 0>Second

00:13:00.279 --> 00:13:01.480
<v Speaker 0>state. Yep.

00:13:01.960 --> 00:13:03.320
<v Speaker 1>Second-state.

00:13:03.320 --> 00:13:06.040
<v Speaker 1>Yeah. And then go just scroll down and

00:13:06.040 --> 00:13:08.445
<v Speaker 1>click on the it's Wasm Learning. So just

00:13:08.445 --> 00:13:10.445
<v Speaker 1>in the middle there, Wasm Learning.

00:13:10.845 --> 00:13:13.885
<v Speaker 1>Yep. And then if you look down there,

00:13:13.885 --> 00:13:16.845
<v Speaker 1>there's a folder called f, double a, s,

00:13:16.845 --> 00:13:18.285
<v Speaker 1>function as a service. If you click on

00:13:18.285 --> 00:13:18.765
<v Speaker 1>that guy.

00:13:20.430 --> 00:13:21.150
<v Speaker 1>Yep.

00:13:21.390 --> 00:13:23.070
<v Speaker 1>And we might just do

00:13:23.470 --> 00:13:24.350
<v Speaker 1>hello.

00:13:24.589 --> 00:13:26.589
<v Speaker 1>So this is essentially just a hello world

00:13:26.589 --> 00:13:27.390
<v Speaker 1>example.

00:13:27.790 --> 00:13:30.910
<v Speaker 1>Yep. And if we scroll down there, you

00:13:30.910 --> 00:13:32.510
<v Speaker 1>have Rust installed already. Right?

00:13:33.515 --> 00:13:36.315
<v Speaker 0>I do. Yes. Okay. So if you just

00:13:36.315 --> 00:13:37.675
<v Speaker 1>scroll up a tiny bit,

00:13:38.075 --> 00:13:39.995
<v Speaker 1>there is a little message that says that

00:13:39.995 --> 00:13:42.875
<v Speaker 1>you install Rust and SSVM up. So if

00:13:42.875 --> 00:13:45.115
<v Speaker 1>you click on that SSVM up link, we'll

00:13:45.115 --> 00:13:46.890
<v Speaker 1>just quickly go ahead and install that. This

00:13:46.890 --> 00:13:48.970
<v Speaker 1>is a tool chain essentially for the Second

00:13:48.970 --> 00:13:49.610
<v Speaker 1>State

00:13:50.090 --> 00:13:52.650
<v Speaker 1>function as a service. So, it's just that,

00:13:52.650 --> 00:13:54.570
<v Speaker 1>yeah, that bottom guy there. If you paste

00:13:54.570 --> 00:13:56.170
<v Speaker 1>that in minus the dollar sign at the

00:13:56.170 --> 00:13:57.130
<v Speaker 1>start, that will

00:13:57.625 --> 00:13:59.385
<v Speaker 1>automatically install for you.

00:14:01.225 --> 00:14:03.785
<v Speaker 0>Piping to our shell, live on the stream.

00:14:04.985 --> 00:14:06.345
<v Speaker 0>I get into trouble for that all the

00:14:06.345 --> 00:14:07.545
<v Speaker 0>time by my audience.

00:14:09.225 --> 00:14:10.345
<v Speaker 0>VM up.

00:14:12.210 --> 00:14:12.930
<v Speaker 0>Alright.

00:14:14.610 --> 00:14:15.330
<v Speaker 1>Okay.

00:14:15.490 --> 00:14:17.490
<v Speaker 1>And so what we do is

00:14:18.130 --> 00:14:19.410
<v Speaker 1>if we go and

00:14:20.050 --> 00:14:22.850
<v Speaker 1>get clone the Wasm learning repo

00:14:23.090 --> 00:14:24.930
<v Speaker 1>onto your system, then we'll have access to

00:14:24.930 --> 00:14:26.130
<v Speaker 1>all of those

00:14:28.055 --> 00:14:28.935
<v Speaker 1>demos.

00:14:34.055 --> 00:14:35.575
<v Speaker 1>Yep. That's it.

00:14:37.415 --> 00:14:38.295
<v Speaker 0>Alright.

00:14:38.295 --> 00:14:39.735
<v Speaker 0>Let's refresh.

00:14:40.370 --> 00:14:42.370
<v Speaker 0>Not done yet. Oh, no. It's quite big.

00:14:42.449 --> 00:14:43.730
<v Speaker 0>Give it a second. Okay.

00:14:49.410 --> 00:14:50.529
<v Speaker 0>Almost there.

00:14:50.850 --> 00:14:53.089
<v Speaker 0>Got a yield from Jared. Hey.

00:14:54.995 --> 00:14:57.475
<v Speaker 0>Welcome to an introduction to Second State.

00:15:01.875 --> 00:15:04.995
<v Speaker 0>Alright. I think we're almost there. So we've

00:15:04.995 --> 00:15:07.555
<v Speaker 0>got fast and we're going into hello. This

00:15:07.715 --> 00:15:11.390
<v Speaker 0>is a Rust project with. Yep. Yep.

00:15:12.830 --> 00:15:15.630
<v Speaker 0>Hello, world. Right. It's just hello, world. Yeah.

00:15:15.710 --> 00:15:17.070
<v Speaker 1>So we could kick off with this. So

00:15:17.070 --> 00:15:19.070
<v Speaker 1>if you go to your terminal and go

00:15:19.070 --> 00:15:20.670
<v Speaker 1>into that hello directory.

00:15:24.029 --> 00:15:24.430
<v Speaker 0>Yep.

00:15:25.145 --> 00:15:26.665
<v Speaker 1>Yep. And

00:15:27.785 --> 00:15:29.465
<v Speaker 1>once you're in there, if you just type

00:15:29.465 --> 00:15:30.345
<v Speaker 1>SSVM

00:15:30.345 --> 00:15:31.065
<v Speaker 1>up

00:15:31.305 --> 00:15:33.465
<v Speaker 1>as one word and then

00:15:34.345 --> 00:15:36.265
<v Speaker 1>build, so space build. Yep.

00:15:36.585 --> 00:15:37.465
<v Speaker 1>That will

00:15:37.865 --> 00:15:39.145
<v Speaker 1>get that ready for you.

00:15:40.425 --> 00:15:42.520
<v Speaker 0>So So this is gonna do a

00:15:43.400 --> 00:15:45.960
<v Speaker 0>Rust compilation of the project with a target

00:15:45.960 --> 00:15:48.440
<v Speaker 0>of Wasm. There's nothing magic about that at

00:15:48.440 --> 00:15:50.280
<v Speaker 0>the moment. Right? And then the SSV Yeah.

00:15:50.360 --> 00:15:52.520
<v Speaker 0>Correct. Is that uploading it to the second

00:15:52.520 --> 00:15:52.840
<v Speaker 0>state?

00:15:53.735 --> 00:15:55.815
<v Speaker 1>No. It's just compiling it ready for you.

00:15:55.815 --> 00:15:56.375
<v Speaker 1>Yeah.

00:15:56.775 --> 00:15:57.415
<v Speaker 1>Yeah.

00:15:58.215 --> 00:15:59.255
<v Speaker 0>Do

00:15:59.255 --> 00:16:02.935
<v Speaker 0>we need a rest up at target wasn't

00:16:02.935 --> 00:16:04.055
<v Speaker 0>32 VASI?

00:16:04.855 --> 00:16:06.135
<v Speaker 1>No.

00:16:06.135 --> 00:16:07.735
<v Speaker 1>No. This will this will do it.

00:16:09.980 --> 00:16:13.100
<v Speaker 0>Okay. Let's see what the error was. That.

00:16:14.459 --> 00:16:16.620
<v Speaker 0>Oh, I don't have a CC compiler.

00:16:17.420 --> 00:16:18.380
<v Speaker 1>Okay.

00:16:19.420 --> 00:16:20.779
<v Speaker 0>Let's install GCC.

00:16:28.965 --> 00:16:31.525
<v Speaker 0>Let's hope Homebrew is feeling quick today, which

00:16:31.525 --> 00:16:32.805
<v Speaker 0>it rarely ever is.

00:16:34.245 --> 00:16:36.565
<v Speaker 0>I'm sure there's a know what's going on.

00:16:36.565 --> 00:16:38.245
<v Speaker 1>Have you got

00:16:38.430 --> 00:16:39.310
<v Speaker 1>in your

00:16:40.110 --> 00:16:42.590
<v Speaker 1>home directory, have you got a target set

00:16:42.590 --> 00:16:44.430
<v Speaker 1>in your cargo dot conf file?

00:16:44.910 --> 00:16:46.750
<v Speaker 1>I think that might be it. It's actually

00:16:46.750 --> 00:16:47.630
<v Speaker 1>trying to use

00:16:49.790 --> 00:16:51.150
<v Speaker 1>because you might have done you might have

00:16:51.150 --> 00:16:53.375
<v Speaker 1>compiled some WebAssembly on the system already or

00:16:53.375 --> 00:16:53.935
<v Speaker 1>something?

00:16:54.895 --> 00:16:57.695
<v Speaker 0>Can't remember how to check that, is it?

00:16:58.335 --> 00:16:58.975
<v Speaker 0>Okay.

00:16:59.855 --> 00:17:01.535
<v Speaker 0>So that's a tool chain.

00:17:04.255 --> 00:17:05.454
<v Speaker 0>Target list.

00:17:09.119 --> 00:17:10.559
<v Speaker 0>There's a whole bunch.

00:17:12.000 --> 00:17:14.160
<v Speaker 0>Okay. So you said this as target set

00:17:14.160 --> 00:17:15.520
<v Speaker 0>of my cargo right now. Is there a

00:17:15.520 --> 00:17:17.599
<v Speaker 0>way I can just get rid of that?

00:17:18.560 --> 00:17:20.480
<v Speaker 1>Yeah. I'll just have a look.

00:17:26.525 --> 00:17:27.885
<v Speaker 0>See if I can remember how to do

00:17:27.885 --> 00:17:28.204
<v Speaker 0>this.

00:17:48.295 --> 00:17:50.695
<v Speaker 0>So I have compiled WebAssembly before.

00:17:50.775 --> 00:17:52.055
<v Speaker 0>Is that potentially

00:17:53.255 --> 00:17:55.495
<v Speaker 1>Yeah. I think you've got a

00:17:56.055 --> 00:17:57.815
<v Speaker 1>you've got one set there

00:17:58.295 --> 00:17:59.415
<v Speaker 1>to

00:18:01.110 --> 00:18:03.830
<v Speaker 1>to use that other target, whereas we're just

00:18:03.910 --> 00:18:05.590
<v Speaker 1>we're doing this through SSVM up.

00:18:14.805 --> 00:18:16.325
<v Speaker 0>Let's see. What can I do?

00:18:32.309 --> 00:18:33.109
<v Speaker 0>Yep.

00:18:35.590 --> 00:18:36.710
<v Speaker 0>Should I just remove these?

00:18:39.275 --> 00:18:40.075
<v Speaker 0>Remove.

00:18:40.235 --> 00:18:42.075
<v Speaker 0>Was it 32 of Azure?

00:18:42.715 --> 00:18:45.035
<v Speaker 1>Yeah. The other two aren't installed. Let's see

00:18:45.035 --> 00:18:45.994
<v Speaker 0>if that helps.

00:18:46.395 --> 00:18:47.034
<v Speaker 1>Yeah.

00:18:49.035 --> 00:18:50.794
<v Speaker 0>It says no download in that target.

00:18:52.060 --> 00:18:53.179
<v Speaker 1>Mhmm. Oh,

00:19:04.220 --> 00:19:06.904
<v Speaker 0>no. Oh, wait. Invalid active developer path.

00:19:07.705 --> 00:19:08.424
<v Speaker 0>Oh.

00:19:08.825 --> 00:19:12.024
<v Speaker 0>That's that weird x code thing, isn't it?

00:19:12.184 --> 00:19:14.424
<v Speaker 0>Ugh. Okay.

00:19:14.904 --> 00:19:15.544
<v Speaker 1>Okay.

00:19:15.865 --> 00:19:17.705
<v Speaker 0>See, it's it's always my oh, one hour

00:19:17.705 --> 00:19:19.970
<v Speaker 0>thirty minutes. That better speed up.

00:19:22.930 --> 00:19:24.770
<v Speaker 0>Let's set and watch it.

00:19:25.330 --> 00:19:25.970
<v Speaker 0>Yeah.

00:19:27.170 --> 00:19:29.570
<v Speaker 0>Okay. It's it's it's going quick. I think

00:19:29.570 --> 00:19:30.450
<v Speaker 0>we should be okay.

00:19:31.905 --> 00:19:34.305
<v Speaker 0>I actually did my max always popping up

00:19:34.305 --> 00:19:35.985
<v Speaker 0>asking me to install updates and I let

00:19:35.985 --> 00:19:37.425
<v Speaker 0>it I let it do it last night

00:19:37.425 --> 00:19:39.184
<v Speaker 0>and I'm assuming that's just x

00:19:40.225 --> 00:19:42.465
<v Speaker 0>code just needs that little nudge now. So

00:19:42.785 --> 00:19:43.985
<v Speaker 1>Okay. Sure.

00:19:48.820 --> 00:19:50.500
<v Speaker 0>So it's quite late for you. Right? You're

00:19:50.500 --> 00:19:51.300
<v Speaker 0>in Australia?

00:19:51.460 --> 00:19:54.100
<v Speaker 1>Yeah. Yeah. Well, it'd be midnight soon.

00:19:54.260 --> 00:19:54.980
<v Speaker 1>This

00:19:55.140 --> 00:19:57.140
<v Speaker 1>should take us up to midnight. Yeah. Well,

00:19:57.140 --> 00:19:58.180
<v Speaker 0>thank you for

00:19:58.340 --> 00:20:00.100
<v Speaker 0>staying up late and and joining me.

00:20:00.934 --> 00:20:02.934
<v Speaker 1>No. It's a pleasure. Yeah. I think it's

00:20:02.934 --> 00:20:03.335
<v Speaker 1>it.

00:20:03.895 --> 00:20:05.815
<v Speaker 1>Drink coffee and eat dark chocolate this light,

00:20:05.815 --> 00:20:07.014
<v Speaker 1>so it's a bit of treat.

00:20:08.375 --> 00:20:10.695
<v Speaker 0>Yeah. I've been trying to my coffee consumption

00:20:10.695 --> 00:20:11.975
<v Speaker 0>is through the roof, but I've been trying

00:20:11.975 --> 00:20:13.975
<v Speaker 0>to get better by switching to decaf.

00:20:14.135 --> 00:20:17.430
<v Speaker 0>And the taste is well, decaf after 2PM.

00:20:17.430 --> 00:20:18.790
<v Speaker 0>And I think the taste is alright, but

00:20:18.790 --> 00:20:20.470
<v Speaker 0>I think mentally, I know that it's decaf,

00:20:20.470 --> 00:20:21.910
<v Speaker 0>so I just clutch it a little bit.

00:20:21.910 --> 00:20:22.309
<v Speaker 0>Yeah.

00:20:22.950 --> 00:20:24.070
<v Speaker 0>Yeah. I want the caffeine.

00:20:27.684 --> 00:20:30.084
<v Speaker 0>Mac is always wildly inaccurate with its

00:20:30.325 --> 00:20:33.125
<v Speaker 0>time frames as well, isn't it? Yeah. Yeah.

00:20:33.125 --> 00:20:34.084
<v Speaker 1>It grows.

00:20:37.845 --> 00:20:40.085
<v Speaker 0>Seems to have settled on four minutes. So

00:20:40.085 --> 00:20:41.284
<v Speaker 0>why don't we take a look at some

00:20:41.284 --> 00:20:43.220
<v Speaker 0>of these other examples for the time being?

00:20:43.460 --> 00:20:44.660
<v Speaker 1>Yeah. Sure. Sure.

00:20:45.300 --> 00:20:47.860
<v Speaker 0>So see those in fact, I'm gonna throw

00:20:47.860 --> 00:20:50.260
<v Speaker 0>something wild out. When we ran that curl

00:20:50.260 --> 00:20:51.700
<v Speaker 0>command, we got a list of a whole

00:20:51.700 --> 00:20:54.100
<v Speaker 0>bunch of Wazee IDs. Can can we Yeah.

00:20:54.260 --> 00:20:56.414
<v Speaker 0>Run one of them? Can we use one

00:20:56.414 --> 00:20:59.374
<v Speaker 0>of these functions? Yeah. We absolutely can. So

00:20:59.615 --> 00:21:00.974
<v Speaker 1>let's do

00:21:07.135 --> 00:21:09.530
<v Speaker 1>oh, actually, I'll tell you what I'll do

00:21:09.530 --> 00:21:10.250
<v Speaker 1>real quick.

00:21:10.650 --> 00:21:12.090
<v Speaker 1>We'll we'll sort of jump to the front

00:21:12.090 --> 00:21:14.810
<v Speaker 1>end, because we're we're compiling stuff now and

00:21:14.810 --> 00:21:17.210
<v Speaker 1>then pushing it in. So let's actually have

00:21:17.210 --> 00:21:18.250
<v Speaker 1>a look at what it would look like.

00:21:18.250 --> 00:21:19.690
<v Speaker 1>So if you go back to that GitHub

00:21:19.690 --> 00:21:20.490
<v Speaker 1>page,

00:21:21.130 --> 00:21:22.090
<v Speaker 1>there'll be

00:21:23.405 --> 00:21:24.764
<v Speaker 1>some demos.

00:21:25.405 --> 00:21:28.205
<v Speaker 1>So there's the demos there like the

00:21:30.525 --> 00:21:32.525
<v Speaker 1>image processing is probably a good one to

00:21:32.525 --> 00:21:34.285
<v Speaker 1>to start looking at just to explain like

00:21:34.285 --> 00:21:35.165
<v Speaker 1>this holistically.

00:21:40.520 --> 00:21:41.800
<v Speaker 1>And I'll just show you one other thing

00:21:41.800 --> 00:21:43.640
<v Speaker 1>too. If you go back to the,

00:21:44.360 --> 00:21:46.919
<v Speaker 1>GitHub page again, there's a logs section.

00:21:48.760 --> 00:21:50.840
<v Speaker 1>What did I put it in there somewhere?

00:21:52.600 --> 00:21:53.240
<v Speaker 1>So look.

00:21:53.835 --> 00:21:56.315
<v Speaker 0>Right here. This one. Right? Log.

00:21:56.475 --> 00:21:59.035
<v Speaker 1>Yeah. Yeah. So it's it's that's not HTTPS.

00:21:59.035 --> 00:22:00.794
<v Speaker 1>It's only HTTP. Oh, you've got it. Okay.

00:22:00.794 --> 00:22:02.475
<v Speaker 1>Cool. So this will essentially,

00:22:02.715 --> 00:22:05.514
<v Speaker 1>I've created a, like, a forward facing log.

00:22:05.915 --> 00:22:06.794
<v Speaker 1>So when you run,

00:22:07.700 --> 00:22:08.740
<v Speaker 1>it'll actually

00:22:09.460 --> 00:22:12.020
<v Speaker 1>give you the output of the execution from

00:22:12.020 --> 00:22:13.700
<v Speaker 1>the server, but it's pumping it out into

00:22:13.700 --> 00:22:15.620
<v Speaker 1>your browser. So you've got some indication of

00:22:15.620 --> 00:22:17.380
<v Speaker 1>what's going on. So what we can do

00:22:17.380 --> 00:22:19.060
<v Speaker 1>is you can just refer back to that

00:22:19.060 --> 00:22:20.820
<v Speaker 1>whenever you feel like it. If we go

00:22:20.820 --> 00:22:21.700
<v Speaker 1>to the

00:22:22.815 --> 00:22:24.174
<v Speaker 1>the demo there

00:22:28.415 --> 00:22:30.415
<v Speaker 0>This just wants me to upload an image

00:22:30.415 --> 00:22:32.495
<v Speaker 0>and then I can do some weird modifications

00:22:32.495 --> 00:22:34.735
<v Speaker 0>with it. Yeah. So I've got an example

00:22:34.735 --> 00:22:36.175
<v Speaker 1>of an image there. If you just right

00:22:36.175 --> 00:22:37.870
<v Speaker 1>click open new tab of that,

00:22:38.430 --> 00:22:40.029
<v Speaker 1>that example link.

00:22:41.390 --> 00:22:43.310
<v Speaker 1>Yep. And then just save that to your

00:22:43.310 --> 00:22:46.190
<v Speaker 1>desktop or wherever, and we can use that

00:22:46.190 --> 00:22:46.510
<v Speaker 1>guy.

00:22:48.685 --> 00:22:51.565
<v Speaker 0>Alright. So we select the Open browse.

00:22:51.805 --> 00:22:54.125
<v Speaker 1>Select that. Cowboy.

00:22:54.365 --> 00:22:55.565
<v Speaker 1>Yeah. That's

00:22:55.565 --> 00:22:57.325
<v Speaker 1>it. Alright. So we can So if you

00:22:57.325 --> 00:22:57.885
<v Speaker 1>click, like

00:22:58.765 --> 00:23:00.605
<v Speaker 1>any any of those buttons will be fine.

00:23:00.605 --> 00:23:00.845
<v Speaker 1>Yeah.

00:23:02.640 --> 00:23:04.400
<v Speaker 0>That's sweet. And if you have a if

00:23:04.400 --> 00:23:05.440
<v Speaker 1>you have a look at the log file

00:23:05.440 --> 00:23:07.440
<v Speaker 1>there that we've got open, you'll see that

00:23:07.440 --> 00:23:08.880
<v Speaker 1>when that executes.

00:23:09.520 --> 00:23:10.480
<v Speaker 1>It calls,

00:23:10.880 --> 00:23:12.720
<v Speaker 1>WASM ID 273.

00:23:14.560 --> 00:23:15.360
<v Speaker 1>And

00:23:16.075 --> 00:23:18.395
<v Speaker 1>so, basically, if you just click any of

00:23:18.395 --> 00:23:20.715
<v Speaker 1>those buttons, it will just keep calling

00:23:23.115 --> 00:23:25.115
<v Speaker 1>and doing, the image processing.

00:23:26.635 --> 00:23:26.875
<v Speaker 0>Okay.

00:23:28.279 --> 00:23:28.999
<v Speaker 1>Yeah.

00:23:30.360 --> 00:23:31.799
<v Speaker 1>So we can we can go have a

00:23:31.799 --> 00:23:33.320
<v Speaker 1>look. Actually, if you just right click and

00:23:33.320 --> 00:23:35.559
<v Speaker 1>view source, because that's like a a really

00:23:37.320 --> 00:23:38.359
<v Speaker 1>simple page.

00:23:38.679 --> 00:23:39.000
<v Speaker 1>So

00:23:40.455 --> 00:23:42.615
<v Speaker 1>what we've got is a JavaScript function up

00:23:42.615 --> 00:23:43.815
<v Speaker 1>the top there. If you see that, I

00:23:43.815 --> 00:23:45.335
<v Speaker 1>think it's called call service.

00:23:46.375 --> 00:23:48.775
<v Speaker 1>And so this is the the j in

00:23:48.775 --> 00:23:51.335
<v Speaker 1>the Jamstack. So all we're doing is we're

00:23:51.335 --> 00:23:52.054
<v Speaker 1>calling,

00:23:52.375 --> 00:23:54.920
<v Speaker 1>the URL there, rpc.ssvm.second

00:23:54.920 --> 00:23:56.360
<v Speaker 1>state. That's where we're actually you know, the

00:23:56.360 --> 00:23:58.840
<v Speaker 1>call command before that we're actually just using

00:23:58.840 --> 00:24:00.600
<v Speaker 1>that same that's the endpoint.

00:24:01.000 --> 00:24:03.720
<v Speaker 1>And so what we're doing here is

00:24:04.280 --> 00:24:05.240
<v Speaker 1>we're saying

00:24:05.640 --> 00:24:08.015
<v Speaker 1>we've got a multipart form data, and we're

00:24:08.015 --> 00:24:10.495
<v Speaker 1>gonna run a function at that wasm ID

00:24:10.495 --> 00:24:11.774
<v Speaker 1>of x.

00:24:12.015 --> 00:24:14.495
<v Speaker 1>And the function name is called flip or

00:24:14.495 --> 00:24:15.614
<v Speaker 1>rotate or whatever.

00:24:15.855 --> 00:24:18.015
<v Speaker 1>And this particular one on the end is

00:24:18.015 --> 00:24:21.135
<v Speaker 1>slash bytes because we're we're dealing

00:24:20.309 --> 00:24:21.110
<v Speaker 1>exclusively

00:24:21.110 --> 00:24:22.710
<v Speaker 1>in just in raw bytes here. So we're

00:24:22.710 --> 00:24:24.149
<v Speaker 1>sending an image through

00:24:24.470 --> 00:24:25.349
<v Speaker 1>to the

00:24:25.590 --> 00:24:27.590
<v Speaker 1>to the endpoint, and it's processing it using

00:24:27.590 --> 00:24:29.429
<v Speaker 1>the Rust, which is compiled to WebAssembly, and

00:24:29.429 --> 00:24:31.590
<v Speaker 1>then it's sending it back as bytes. And

00:24:31.590 --> 00:24:33.909
<v Speaker 1>then the the browser's rendering

00:24:33.909 --> 00:24:36.285
<v Speaker 1>those bytes as an image. So we're just

00:24:36.285 --> 00:24:37.725
<v Speaker 1>running it in its native,

00:24:38.445 --> 00:24:40.125
<v Speaker 1>image as

00:24:40.445 --> 00:24:43.405
<v Speaker 1>as bytes. And so that's the j. That

00:24:43.405 --> 00:24:45.325
<v Speaker 1>that that's the only JavaScript, essentially. And if

00:24:45.325 --> 00:24:47.405
<v Speaker 1>you scroll down to the buttons,

00:24:47.565 --> 00:24:49.085
<v Speaker 1>I've just made a bunch of different buttons

00:24:49.085 --> 00:24:49.325
<v Speaker 1>there.

00:24:50.360 --> 00:24:52.280
<v Speaker 1>And each button, obviously, has got a different

00:24:52.280 --> 00:24:54.919
<v Speaker 1>name, you know, flip, rotate, whatever. And

00:24:55.720 --> 00:24:57.400
<v Speaker 1>so when we click on that, they're all

00:24:57.400 --> 00:24:59.320
<v Speaker 1>calling call service, but they're just passing in

00:24:59.320 --> 00:25:02.360
<v Speaker 1>the appropriate Wasm ID. So to to go

00:25:02.360 --> 00:25:03.645
<v Speaker 1>back to your thing before, like, what if

00:25:03.645 --> 00:25:05.805
<v Speaker 1>we called one of those that they're all

00:25:05.805 --> 00:25:08.285
<v Speaker 1>calling the relevant Wasm IDs. So, obviously, those

00:25:08.285 --> 00:25:09.645
<v Speaker 1>are all public at the moment.

00:25:10.845 --> 00:25:12.445
<v Speaker 1>And if you wanted to have your own

00:25:12.445 --> 00:25:13.085
<v Speaker 1>custom

00:25:14.605 --> 00:25:17.485
<v Speaker 1>Wasm anything, you could deploy it and make

00:25:17.485 --> 00:25:17.965
<v Speaker 1>it private.

00:25:18.820 --> 00:25:19.220
<v Speaker 1>So

00:25:19.940 --> 00:25:22.420
<v Speaker 0>Very cool. I I I like that. I

00:25:22.420 --> 00:25:24.180
<v Speaker 0>mean, there was this idea. I don't know

00:25:24.180 --> 00:25:25.300
<v Speaker 0>if you're familiar with it. I think it

00:25:25.300 --> 00:25:27.780
<v Speaker 0>was, like, ten years ago where Google tried

00:25:27.780 --> 00:25:29.620
<v Speaker 0>to launch something called web intents,

00:25:30.255 --> 00:25:32.335
<v Speaker 0>which was this idea that you could deploy

00:25:32.335 --> 00:25:34.495
<v Speaker 0>functions to the web and they would reveal

00:25:34.495 --> 00:25:37.375
<v Speaker 0>their intent like like similar to Android does

00:25:37.375 --> 00:25:38.655
<v Speaker 0>it. So you say, hey, this function is

00:25:38.655 --> 00:25:40.655
<v Speaker 0>available at this URL and it satisfies an

00:25:40.655 --> 00:25:43.670
<v Speaker 0>intent called crop image. And it exposes an

00:25:43.670 --> 00:25:45.750
<v Speaker 0>API that anyone can call and then your

00:25:45.750 --> 00:25:47.590
<v Speaker 0>your application can just say, hey, I wanna

00:25:47.590 --> 00:25:49.110
<v Speaker 0>resize an image and it would find the

00:25:49.110 --> 00:25:51.110
<v Speaker 0>intent from the system and this

00:25:51.350 --> 00:25:53.270
<v Speaker 0>feels like this could be a really important

00:25:53.270 --> 00:25:55.590
<v Speaker 0>part of actually making that a real thing

00:25:55.590 --> 00:25:57.910
<v Speaker 0>like where the same state VM and and

00:25:57.910 --> 00:26:00.174
<v Speaker 0>the hosting provider infrastructure

00:26:00.335 --> 00:26:02.575
<v Speaker 0>and functions. Yeah. Really cool way to connect

00:26:02.575 --> 00:26:04.654
<v Speaker 0>the dots there. So I like this. Yeah.

00:26:06.255 --> 00:26:08.815
<v Speaker 0>Let's see if we've at least satisfied this

00:26:08.815 --> 00:26:09.615
<v Speaker 0>as well just now.

00:26:11.399 --> 00:26:13.239
<v Speaker 0>Well that looks a bit better, it's actually

00:26:13.240 --> 00:26:14.839
<v Speaker 0>compiling. That looks a bit better.

00:26:15.240 --> 00:26:16.919
<v Speaker 0>Now we just have to deal with cargo

00:26:16.919 --> 00:26:19.480
<v Speaker 0>being the slowest compiler in the world. Rusty

00:26:19.480 --> 00:26:20.679
<v Speaker 0>being the slowest compiler in the world.

00:26:22.774 --> 00:26:24.695
<v Speaker 0>But, yeah, that's very cool. I like this.

00:26:24.695 --> 00:26:26.615
<v Speaker 0>And it's really the fact that it's exposed

00:26:26.615 --> 00:26:28.774
<v Speaker 0>over just a really basic issue to p

00:26:28.774 --> 00:26:31.495
<v Speaker 0>rest style or RPC API Yeah. Makes it

00:26:31.495 --> 00:26:34.215
<v Speaker 0>really convenient and easy to integrate into my

00:26:34.215 --> 00:26:35.735
<v Speaker 0>application as well. I love that that is

00:26:35.815 --> 00:26:38.350
<v Speaker 1>Super easy. Yeah. So, you know, you can,

00:26:38.590 --> 00:26:39.390
<v Speaker 1>if

00:26:39.390 --> 00:26:40.830
<v Speaker 1>you go back to when

00:26:41.230 --> 00:26:42.990
<v Speaker 1>phones came out, you know, and we had,

00:26:42.990 --> 00:26:45.309
<v Speaker 1>like, programming the web and apps and things

00:26:45.309 --> 00:26:46.590
<v Speaker 1>like that, I think

00:26:48.030 --> 00:26:49.230
<v Speaker 1>creating apps

00:26:49.915 --> 00:26:52.155
<v Speaker 1>is is a really difficult framework to work

00:26:52.155 --> 00:26:53.675
<v Speaker 1>with. You got all these different languages and

00:26:53.675 --> 00:26:55.755
<v Speaker 1>frameworks, and then you've got two different phone

00:26:55.755 --> 00:26:57.355
<v Speaker 1>companies. You have to, like, build an app

00:26:57.355 --> 00:26:58.555
<v Speaker 1>for each one. And then if you have

00:26:58.555 --> 00:26:59.835
<v Speaker 1>an update, you have to,

00:27:00.555 --> 00:27:02.555
<v Speaker 1>you know, basically tell the people, oh, that

00:27:02.555 --> 00:27:04.315
<v Speaker 1>the app's been updated, and they have to

00:27:04.559 --> 00:27:06.639
<v Speaker 1>pull an update onto their phone. It's just

00:27:06.799 --> 00:27:08.799
<v Speaker 1>to me, that's it's super clunky.

00:27:08.960 --> 00:27:12.159
<v Speaker 1>This is just using the web as the

00:27:12.159 --> 00:27:14.559
<v Speaker 1>web is intended. So if we have one

00:27:14.559 --> 00:27:16.480
<v Speaker 1>of these WASM IDs, you can even hot

00:27:16.480 --> 00:27:18.159
<v Speaker 1>swap. So if you wanna do an update

00:27:18.835 --> 00:27:21.154
<v Speaker 1>because, know, obviously, we're doing image processing here,

00:27:21.154 --> 00:27:22.595
<v Speaker 1>but it could be literally anything. It could

00:27:22.595 --> 00:27:24.195
<v Speaker 1>be accounting packages or,

00:27:24.995 --> 00:27:26.995
<v Speaker 1>you know, IoT stuff or whatever. Say you

00:27:26.995 --> 00:27:28.755
<v Speaker 1>wanna you change your business rules or what

00:27:28.755 --> 00:27:29.955
<v Speaker 1>have you and you wanna do an update,

00:27:29.955 --> 00:27:32.200
<v Speaker 1>you just recompile your WASM. You don't relaunch

00:27:32.200 --> 00:27:33.880
<v Speaker 1>it, you just do a put request. So

00:27:33.880 --> 00:27:35.960
<v Speaker 1>it's the same endpoints as RESTful.

00:27:35.960 --> 00:27:37.960
<v Speaker 1>And when you do the put request, it'll

00:27:37.960 --> 00:27:40.759
<v Speaker 1>update the new executable code. And then when

00:27:40.759 --> 00:27:41.639
<v Speaker 1>that function

00:27:42.440 --> 00:27:44.519
<v Speaker 1>executes, it now does the new thing. But

00:27:44.519 --> 00:27:46.360
<v Speaker 1>the user's oblivious. They don't need to know

00:27:46.360 --> 00:27:47.865
<v Speaker 1>it. It just does what it's supposed to

00:27:47.865 --> 00:27:50.025
<v Speaker 1>do. Now, obviously, from an application point of

00:27:50.025 --> 00:27:52.505
<v Speaker 1>view, you've got that hash. So if there

00:27:52.505 --> 00:27:54.665
<v Speaker 1>was a security issue where you didn't wanna

00:27:54.665 --> 00:27:56.105
<v Speaker 1>run a hash that you didn't know, that's

00:27:56.105 --> 00:27:58.825
<v Speaker 1>fine. So it's like an inbuilt security mechanism.

00:27:58.825 --> 00:28:00.860
<v Speaker 1>But at the end of the day, you

00:28:00.860 --> 00:28:02.540
<v Speaker 1>can create an app in a few minutes

00:28:02.540 --> 00:28:05.500
<v Speaker 1>just using HTML and JavaScript. And Yeah.

00:28:06.060 --> 00:28:08.220
<v Speaker 1>Yeah. It's it's super clean. It's all open

00:28:08.220 --> 00:28:08.860
<v Speaker 1>free

00:28:09.100 --> 00:28:10.780
<v Speaker 1>on the web. Yeah. There's no sort of

00:28:10.780 --> 00:28:11.500
<v Speaker 1>proprietary

00:28:11.820 --> 00:28:12.620
<v Speaker 1>roadblock.

00:28:12.700 --> 00:28:14.445
<v Speaker 1>Yeah. So I've got I've got two questions,

00:28:14.445 --> 00:28:15.805
<v Speaker 0>and there's one from Jared in the chat

00:28:15.805 --> 00:28:17.245
<v Speaker 0>that'll pop up in just a minute. Sure.

00:28:17.245 --> 00:28:19.485
<v Speaker 0>So firstly, can can

00:28:19.565 --> 00:28:22.045
<v Speaker 0>anyone override what the function does as an

00:28:22.045 --> 00:28:25.485
<v Speaker 0>ID? Could I could I replace ID 372

00:28:25.485 --> 00:28:26.045
<v Speaker 0>just now?

00:28:28.390 --> 00:28:30.310
<v Speaker 1>You can if you have the if you're

00:28:30.310 --> 00:28:32.230
<v Speaker 1>the owner, but you can't if you're not

00:28:32.230 --> 00:28:34.150
<v Speaker 1>the owner. So I guess if

00:28:34.150 --> 00:28:36.230
<v Speaker 1>if that's built, let's go ahead and

00:28:36.870 --> 00:28:38.710
<v Speaker 1>build it and and launch it, and then

00:28:38.710 --> 00:28:40.310
<v Speaker 1>I'll show you how that works. It's it's

00:28:40.310 --> 00:28:43.274
<v Speaker 1>really straightforward how this works. It's super simple.

00:28:43.274 --> 00:28:44.794
<v Speaker 0>Okay. So it looks like it's built okay.

00:28:44.794 --> 00:28:47.835
<v Speaker 1>Alright. Cool. Okay. So in the p k

00:28:47.835 --> 00:28:49.595
<v Speaker 1>g folder, if you just do an l

00:28:49.595 --> 00:28:51.434
<v Speaker 1>s on the p k g folder, you'll

00:28:51.434 --> 00:28:53.434
<v Speaker 1>see that there's a hello lib v g

00:28:53.434 --> 00:28:54.315
<v Speaker 1>w w m. Now,

00:28:54.715 --> 00:28:56.075
<v Speaker 1>probably the best way to do this is

00:28:56.075 --> 00:28:57.979
<v Speaker 1>to go back to the,

00:28:58.860 --> 00:28:59.739
<v Speaker 1>instructions,

00:28:59.899 --> 00:29:02.380
<v Speaker 1>so that read me file where we were

00:29:02.380 --> 00:29:03.899
<v Speaker 1>before for the hello,

00:29:04.700 --> 00:29:05.339
<v Speaker 1>and

00:29:05.740 --> 00:29:07.419
<v Speaker 1>it'll show you how to deploy it.

00:29:10.005 --> 00:29:11.845
<v Speaker 1>So, yeah, just back to that GitHub page

00:29:11.845 --> 00:29:12.965
<v Speaker 1>with the hello.

00:29:16.965 --> 00:29:19.125
<v Speaker 1>Yep. And so there is a

00:29:19.765 --> 00:29:21.205
<v Speaker 1>so what we're doing here is we're doing

00:29:21.205 --> 00:29:22.885
<v Speaker 1>a post request, and we're sending it to

00:29:22.885 --> 00:29:23.445
<v Speaker 1>that

00:29:23.845 --> 00:29:24.165
<v Speaker 1>RPC.

00:29:25.400 --> 00:29:28.200
<v Speaker 1>And so that's all prefilled, actually. If you

00:29:28.200 --> 00:29:29.720
<v Speaker 1>paste it in, that'll work because it knows

00:29:29.720 --> 00:29:32.279
<v Speaker 1>that's a hello underscore lib underscore b g.

00:29:32.279 --> 00:29:33.559
<v Speaker 1>You send that off.

00:29:35.320 --> 00:29:35.720
<v Speaker 1>Yep.

00:29:37.495 --> 00:29:39.094
<v Speaker 0>And I get an ID back.

00:29:39.414 --> 00:29:40.934
<v Speaker 1>Cool. So if you grab all of that,

00:29:40.934 --> 00:29:43.335
<v Speaker 1>that's just a JSON response. If you just

00:29:43.335 --> 00:29:45.015
<v Speaker 1>take that remember we talked about having a

00:29:45.015 --> 00:29:46.695
<v Speaker 1>blank like a a whiteboard?

00:29:46.934 --> 00:29:49.495
<v Speaker 1>We just let's just post that into your

00:29:49.495 --> 00:29:50.375
<v Speaker 1>blank file

00:29:50.940 --> 00:29:52.779
<v Speaker 1>and for for future reference.

00:29:53.340 --> 00:29:54.299
<v Speaker 0>Yep. Yep.

00:29:54.620 --> 00:29:57.019
<v Speaker 1>And so the WASM ID now is 327

00:29:57.019 --> 00:29:58.940
<v Speaker 1>for the hello, and there's your your hash.

00:29:58.940 --> 00:30:00.460
<v Speaker 1>And there's a bunch of other information, but

00:30:00.460 --> 00:30:01.980
<v Speaker 1>let's not worry about that for now. Oh,

00:30:01.980 --> 00:30:04.845
<v Speaker 1>actually, just if you could predify that or

00:30:04.845 --> 00:30:07.005
<v Speaker 1>just scroll to the right, we'll have a

00:30:07.005 --> 00:30:09.565
<v Speaker 1>look at the SSVM admin key.

00:30:11.165 --> 00:30:12.605
<v Speaker 0>Yep.

00:30:13.405 --> 00:30:15.165
<v Speaker 0>Let's just see if this is admin dot

00:30:15.165 --> 00:30:15.725
<v Speaker 0>j s.

00:30:22.150 --> 00:30:23.590
<v Speaker 0>Ew. It didn't make it.

00:30:24.550 --> 00:30:26.870
<v Speaker 1>Oh, that's okay. That's okay. Alright. I'll just

00:30:26.870 --> 00:30:27.910
<v Speaker 0>go over now.

00:30:28.310 --> 00:30:28.950
<v Speaker 0>Not sure why

00:30:30.225 --> 00:30:31.745
<v Speaker 1>Yeah. So we'll just have a look at

00:30:31.745 --> 00:30:34.625
<v Speaker 1>the SSVM usage key. You'll see that that's

00:30:34.625 --> 00:30:35.504
<v Speaker 1>zeroed out,

00:30:35.985 --> 00:30:38.065
<v Speaker 1>and that means that anybody can use it.

00:30:39.025 --> 00:30:39.585
<v Speaker 1>And

00:30:40.225 --> 00:30:41.105
<v Speaker 1>so the

00:30:41.505 --> 00:30:43.585
<v Speaker 1>admin key, which is the next one coming

00:30:43.585 --> 00:30:43.825
<v Speaker 1>along,

00:30:45.040 --> 00:30:46.480
<v Speaker 1>which is sent back.

00:30:46.640 --> 00:30:47.360
<v Speaker 0>Yep.

00:30:47.920 --> 00:30:50.320
<v Speaker 1>Yep. The admin key is what you would

00:30:50.320 --> 00:30:51.840
<v Speaker 1>use in the headers if you wanted to

00:30:51.840 --> 00:30:53.600
<v Speaker 1>change something, like,

00:30:54.000 --> 00:30:55.039
<v Speaker 1>do a put

00:30:55.520 --> 00:30:57.120
<v Speaker 1>and and update the code. So

00:30:58.345 --> 00:31:00.664
<v Speaker 1>couple of things we could do. We could

00:31:00.904 --> 00:31:01.544
<v Speaker 1>one,

00:31:01.945 --> 00:31:04.345
<v Speaker 1>we could hack the hello and say Rawkode

00:31:04.345 --> 00:31:06.825
<v Speaker 1>says hello or something and then redeploy it

00:31:06.904 --> 00:31:08.505
<v Speaker 1>at the same WASM ID and then see

00:31:08.505 --> 00:31:10.585
<v Speaker 1>the sha 256 change. Would shall we do

00:31:10.585 --> 00:31:11.225
<v Speaker 1>that real quick?

00:31:12.770 --> 00:31:13.409
<v Speaker 0>Yeah.

00:31:13.809 --> 00:31:16.530
<v Speaker 0>Okay. Okay. So we're gonna modify this. We

00:31:16.530 --> 00:31:17.730
<v Speaker 0>want it to say

00:31:17.890 --> 00:31:18.450
<v Speaker 0>Yeah.

00:31:19.090 --> 00:31:19.889
<v Speaker 0>Hello

00:31:20.130 --> 00:31:21.410
<v Speaker 0>from Rawkode

00:31:21.410 --> 00:31:22.369
<v Speaker 0>live.

00:31:23.410 --> 00:31:24.530
<v Speaker 0>And then SSVM

00:31:24.530 --> 00:31:25.090
<v Speaker 0>build.

00:31:25.570 --> 00:31:25.970
<v Speaker 0>Yep.

00:31:26.375 --> 00:31:27.735
<v Speaker 0>And then I I just have the same

00:31:27.735 --> 00:31:29.815
<v Speaker 0>curl command. I need to pass in my

00:31:29.815 --> 00:31:30.615
<v Speaker 0>ID. So

00:31:31.735 --> 00:31:33.735
<v Speaker 1>yep. So what we do now, if we

00:31:33.735 --> 00:31:37.175
<v Speaker 1>go to the that API, that Jamstack API

00:31:37.175 --> 00:31:39.495
<v Speaker 1>thing I sent through That's probably oh, actually,

00:31:39.495 --> 00:31:41.015
<v Speaker 1>there might be an example in here

00:31:42.310 --> 00:31:43.110
<v Speaker 1>to

00:31:43.750 --> 00:31:46.470
<v Speaker 1>do a put instead of a post.

00:31:48.550 --> 00:31:50.390
<v Speaker 1>Yeah. Maybe just

00:31:52.950 --> 00:31:55.030
<v Speaker 1>yeah. Maybe just head over to the Jamstack

00:31:55.715 --> 00:31:56.595
<v Speaker 1>API.

00:31:57.315 --> 00:31:58.035
<v Speaker 0>Yep.

00:31:58.755 --> 00:32:00.195
<v Speaker 1>Yep. And

00:32:00.595 --> 00:32:02.434
<v Speaker 1>it's probably the first put there.

00:32:04.115 --> 00:32:06.595
<v Speaker 0>Go on. Up update your put. There we

00:32:06.595 --> 00:32:06.675
<v Speaker 0>go.

00:32:07.490 --> 00:32:09.730
<v Speaker 1>Yeah. So there we go. So obviously, we

00:32:09.730 --> 00:32:10.850
<v Speaker 1>need to tweak that a little bit. So

00:32:10.850 --> 00:32:12.610
<v Speaker 1>maybe just put that in your blank file

00:32:12.610 --> 00:32:14.850
<v Speaker 1>so we can oh, wherever you want. Yep.

00:32:14.850 --> 00:32:16.130
<v Speaker 1>So what we're doing is

00:32:16.850 --> 00:32:17.570
<v Speaker 1>the

00:32:17.730 --> 00:32:20.174
<v Speaker 1>WASM ID needs to be correct. Yep. And

00:32:20.174 --> 00:32:21.615
<v Speaker 1>then so application

00:32:21.615 --> 00:32:23.534
<v Speaker 1>octet stream, that's cool. We need to whack

00:32:23.534 --> 00:32:25.215
<v Speaker 1>the admin key in there, so that gives

00:32:25.215 --> 00:32:27.294
<v Speaker 1>us the power to do this.

00:32:28.895 --> 00:32:30.815
<v Speaker 0>I thought nobody watching the stream has updated

00:32:30.815 --> 00:32:31.455
<v Speaker 0>it already.

00:32:34.080 --> 00:32:35.040
<v Speaker 1>Good point.

00:32:37.120 --> 00:32:39.040
<v Speaker 0>Alright. And then we just update We'll we'll

00:32:39.040 --> 00:32:41.120
<v Speaker 1>delete it when we're finished. And then obviously,

00:32:41.120 --> 00:32:42.800
<v Speaker 1>the correct yeah. It wasn't far.

00:32:43.280 --> 00:32:44.640
<v Speaker 1>I'll leave BG.

00:32:44.960 --> 00:32:45.280
<v Speaker 1>Yeah.

00:32:46.135 --> 00:32:48.455
<v Speaker 1>Pop that in. I think that's all good.

00:32:48.455 --> 00:32:49.014
<v Speaker 0>Oh,

00:32:50.535 --> 00:32:51.894
<v Speaker 0>that should be package.

00:32:53.255 --> 00:32:55.014
<v Speaker 1>Oh, yeah. Package. Yeah.

00:32:59.095 --> 00:32:59.894
<v Speaker 0>Ta da.

00:33:00.775 --> 00:33:03.309
<v Speaker 1>Yep. So if you grab that and just

00:33:03.309 --> 00:33:04.909
<v Speaker 1>pop that in the blank file, so same

00:33:04.909 --> 00:33:09.870
<v Speaker 1>OSM ID 327NewSHA256

00:33:09.870 --> 00:33:10.669
<v Speaker 1>hash.

00:33:10.750 --> 00:33:11.470
<v Speaker 0>Yep.

00:33:11.950 --> 00:33:13.470
<v Speaker 1>Yep. Great.

00:33:13.630 --> 00:33:16.554
<v Speaker 1>Same admin key, and the usage key will

00:33:16.554 --> 00:33:19.195
<v Speaker 1>also be zeroed out. So now if we

00:33:20.154 --> 00:33:20.954
<v Speaker 1>run that

00:33:21.195 --> 00:33:23.914
<v Speaker 1>by calling it so if we go back

00:33:23.914 --> 00:33:24.634
<v Speaker 1>to the,

00:33:26.154 --> 00:33:26.954
<v Speaker 1>API

00:33:27.434 --> 00:33:29.274
<v Speaker 1>or or actually even to the yeah. To

00:33:29.274 --> 00:33:30.875
<v Speaker 1>here is fine because it'll be in this

00:33:31.090 --> 00:33:33.330
<v Speaker 1>these instructions. So we wanna do,

00:33:33.570 --> 00:33:35.250
<v Speaker 1>yeah, down the bottom there.

00:33:36.930 --> 00:33:37.890
<v Speaker 1>And just

00:33:38.130 --> 00:33:39.090
<v Speaker 1>tweak the.

00:33:40.450 --> 00:33:41.170
<v Speaker 1>Yeah.

00:33:43.090 --> 00:33:44.770
<v Speaker 0>Oh, I broke it. I'll try again.

00:33:49.495 --> 00:33:51.575
<v Speaker 0>327.

00:33:52.215 --> 00:33:52.855
<v Speaker 1>Yeah.

00:33:54.455 --> 00:33:57.495
<v Speaker 0>There we go. Rawkode lives. Yeah. Cool. Alright.

00:33:57.495 --> 00:34:00.215
<v Speaker 1>So now what we can do is

00:34:00.510 --> 00:34:02.750
<v Speaker 1>it's public at the moment, so we wanna

00:34:02.750 --> 00:34:05.150
<v Speaker 1>now change our mind and lock it down.

00:34:05.390 --> 00:34:06.830
<v Speaker 1>So what we do is we hit a

00:34:06.830 --> 00:34:07.870
<v Speaker 1>different endpoint,

00:34:08.030 --> 00:34:10.110
<v Speaker 1>if we go back to the API docs.

00:34:11.230 --> 00:34:13.574
<v Speaker 1>And so just to reiterate, everything that we

00:34:13.574 --> 00:34:17.895
<v Speaker 1>do is all RESTful API. There's no logging

00:34:17.895 --> 00:34:19.335
<v Speaker 1>into service whatsoever.

00:34:19.335 --> 00:34:21.255
<v Speaker 1>It's all just done through this open web

00:34:21.255 --> 00:34:21.815
<v Speaker 1>calls.

00:34:22.054 --> 00:34:23.735
<v Speaker 1>So we wanna do a

00:34:24.775 --> 00:34:26.775
<v Speaker 1>I'll just have a look on mine. My

00:34:26.775 --> 00:34:28.770
<v Speaker 1>screen's a bit bigger here. So if we

00:34:28.770 --> 00:34:29.810
<v Speaker 1>go down to

00:34:35.810 --> 00:34:38.210
<v Speaker 1>yeah. So down I think it's, the last

00:34:38.210 --> 00:34:38.930
<v Speaker 1>put

00:34:39.730 --> 00:34:42.565
<v Speaker 1>in that the last put down there. There

00:34:42.565 --> 00:34:43.525
<v Speaker 1>is a

00:34:43.765 --> 00:34:45.445
<v Speaker 1>API keys

00:34:46.085 --> 00:34:47.445
<v Speaker 1>usage key.

00:34:52.405 --> 00:34:55.605
<v Speaker 1>Yep. Alright. And if we put yep. Put

00:34:55.605 --> 00:34:57.525
<v Speaker 1>the correct WASM ID in there

00:34:58.089 --> 00:34:59.530
<v Speaker 1>and then the admin

00:35:11.175 --> 00:35:13.175
<v Speaker 1>usage key. So now if you don't have

00:35:13.175 --> 00:35:15.495
<v Speaker 1>that key in the headers, it won't work.

00:35:15.655 --> 00:35:17.095
<v Speaker 1>And but that's super easy to put that

00:35:17.095 --> 00:35:18.375
<v Speaker 1>in the header. So if we wanna call

00:35:18.375 --> 00:35:19.095
<v Speaker 1>that again

00:35:20.615 --> 00:35:21.335
<v Speaker 1>yep.

00:35:23.335 --> 00:35:24.295
<v Speaker 0>Alright.

00:35:24.935 --> 00:35:26.295
<v Speaker 0>Yep. Where's the call?

00:35:26.870 --> 00:35:29.110
<v Speaker 0>This one? Yeah. And so we wanna add

00:35:29.110 --> 00:35:30.870
<v Speaker 1>a header. So dash dash head on a

00:35:30.870 --> 00:35:31.670
<v Speaker 1>new line.

00:35:33.190 --> 00:35:38.790
<v Speaker 0>What's

00:35:38.790 --> 00:35:39.510
<v Speaker 0>the header called?

00:35:41.545 --> 00:35:42.265
<v Speaker 1>With

00:35:45.785 --> 00:35:48.425
<v Speaker 1>so capital SSVM.

00:35:48.425 --> 00:35:50.185
<v Speaker 1>So capital s, capital s,

00:35:50.825 --> 00:35:51.865
<v Speaker 1>capital v.

00:35:52.825 --> 00:35:54.390
<v Speaker 1>Let me just find it.

00:35:56.550 --> 00:35:58.710
<v Speaker 1>Okay. Just one second.

00:36:02.309 --> 00:36:03.270
<v Speaker 0>S

00:36:05.109 --> 00:36:08.085
<v Speaker 0>s v m underscore usage underscore key. Yep.

00:36:08.085 --> 00:36:09.285
<v Speaker 1>That's the one. Yep.

00:36:09.765 --> 00:36:11.285
<v Speaker 1>That's the key. And

00:36:11.685 --> 00:36:13.445
<v Speaker 1>Equal. Then the value is the

00:36:15.045 --> 00:36:15.685
<v Speaker 1>yep.

00:36:17.605 --> 00:36:19.125
<v Speaker 0>Oh, because I got the format wrong.

00:36:20.829 --> 00:36:21.550
<v Speaker 1>Okay.

00:36:21.950 --> 00:36:25.470
<v Speaker 0>There we go. It worked. Okay. Cool. And

00:36:25.470 --> 00:36:27.150
<v Speaker 1>so, obviously, we can see that if if

00:36:27.150 --> 00:36:28.270
<v Speaker 1>you don't have the key, it's not gonna

00:36:28.270 --> 00:36:30.270
<v Speaker 1>let you do it. Now when you create

00:36:30.510 --> 00:36:32.829
<v Speaker 1>when you launch the executable the first time,

00:36:33.165 --> 00:36:35.005
<v Speaker 1>if you wanted to create a key for

00:36:35.005 --> 00:36:36.205
<v Speaker 1>you and you don't have to go through

00:36:36.205 --> 00:36:37.645
<v Speaker 1>this process of having it open and then

00:36:37.645 --> 00:36:40.205
<v Speaker 1>closing it, you just put, there's a parameter

00:36:40.205 --> 00:36:42.445
<v Speaker 1>there which is, like SSVM key and then

00:36:42.445 --> 00:36:43.325
<v Speaker 1>you put true.

00:36:43.485 --> 00:36:45.085
<v Speaker 1>And then it will be private right from

00:36:45.085 --> 00:36:45.940
<v Speaker 1>the get go.

00:36:47.140 --> 00:36:49.540
<v Speaker 1>Now you can refresh the key. So say

00:36:49.540 --> 00:36:51.220
<v Speaker 1>you do, like, a class or a hackathon

00:36:51.220 --> 00:36:53.700
<v Speaker 1>or something and you wanna, like, reset it,

00:36:53.700 --> 00:36:55.380
<v Speaker 1>you can run that command we just did,

00:36:55.380 --> 00:36:56.980
<v Speaker 1>and it'll generate a new key.

00:36:57.220 --> 00:36:59.460
<v Speaker 1>So it doesn't necessarily have to be zeroed

00:36:59.460 --> 00:37:01.075
<v Speaker 1>out. It can just create another key. So

00:37:01.075 --> 00:37:02.595
<v Speaker 1>you can, like, flush if there's a cohort

00:37:02.595 --> 00:37:04.435
<v Speaker 1>of students or something, you can flush that

00:37:04.435 --> 00:37:06.275
<v Speaker 1>executable and kick them off and then give

00:37:06.275 --> 00:37:06.995
<v Speaker 1>the new

00:37:07.555 --> 00:37:09.395
<v Speaker 1>the new cohort the new key and that

00:37:09.395 --> 00:37:10.595
<v Speaker 1>sort of thing, or you can just open

00:37:10.595 --> 00:37:11.715
<v Speaker 1>it right up and zero it out.

00:37:13.089 --> 00:37:14.610
<v Speaker 0>Yeah. Yeah. I changed it.

00:37:15.250 --> 00:37:18.210
<v Speaker 1>Yeah. So fairly simple, all just done

00:37:19.410 --> 00:37:21.730
<v Speaker 1>with some simple calls. Okay. So that's So

00:37:21.730 --> 00:37:23.730
<v Speaker 0>I'm curious then. Right? Like Yep.

00:37:24.770 --> 00:37:26.530
<v Speaker 0>And, Jared, I've not forgot your question. I'll

00:37:26.530 --> 00:37:28.435
<v Speaker 0>get to it in just ten seconds. But

00:37:28.755 --> 00:37:30.835
<v Speaker 0>I've not given you any money. I'm deploying

00:37:30.835 --> 00:37:33.075
<v Speaker 0>functions onto the web that I can then

00:37:33.075 --> 00:37:33.875
<v Speaker 0>use.

00:37:34.515 --> 00:37:36.595
<v Speaker 0>Are there usage

00:37:36.595 --> 00:37:39.555
<v Speaker 0>limits before I start having to pay? Are

00:37:39.555 --> 00:37:42.280
<v Speaker 0>they Yeah. Like, how how does that work?

00:37:42.280 --> 00:37:43.559
<v Speaker 1>So it's

00:37:43.559 --> 00:37:45.720
<v Speaker 1>rate limited at the moment, and I've just

00:37:45.720 --> 00:37:47.960
<v Speaker 1>set it to some, like, arbitrary, like, a

00:37:47.960 --> 00:37:48.520
<v Speaker 1>hundred

00:37:48.839 --> 00:37:51.160
<v Speaker 1>requests a minute or something like that.

00:37:51.559 --> 00:37:52.280
<v Speaker 1>So what we do

00:37:53.400 --> 00:37:55.240
<v Speaker 1>I'll talk I'll talk about this really quickly,

00:37:55.240 --> 00:37:57.695
<v Speaker 1>but it's a it's a whole another subject.

00:37:57.695 --> 00:37:59.375
<v Speaker 1>But in the in the blockchain space, you

00:37:59.375 --> 00:38:01.375
<v Speaker 1>know, there's this notion of gas. Like in

00:38:01.375 --> 00:38:02.175
<v Speaker 1>Ethereum,

00:38:02.895 --> 00:38:05.695
<v Speaker 1>the the EVM has gas, and so you

00:38:05.695 --> 00:38:07.455
<v Speaker 1>wanna perform a transaction. So you give it

00:38:07.455 --> 00:38:08.655
<v Speaker 1>some gas, and it goes ahead, and the

00:38:08.655 --> 00:38:10.015
<v Speaker 1>miner's mine, and they make a profit and

00:38:10.015 --> 00:38:11.695
<v Speaker 1>these sorts of things. We have that same

00:38:12.180 --> 00:38:15.300
<v Speaker 1>infrastructure on the WebAssembly VM, we where we

00:38:15.300 --> 00:38:16.740
<v Speaker 1>have this notion of gas. So we have

00:38:16.740 --> 00:38:17.860
<v Speaker 1>a statistics

00:38:18.020 --> 00:38:19.860
<v Speaker 1>section which is implemented

00:38:20.180 --> 00:38:23.060
<v Speaker 1>on on here, and it will depending on

00:38:23.060 --> 00:38:25.460
<v Speaker 1>what the computation is, it will charge you

00:38:25.700 --> 00:38:28.585
<v Speaker 1>a point system. So it's essentially like calculating

00:38:30.505 --> 00:38:31.785
<v Speaker 1>compute. And

00:38:32.505 --> 00:38:34.745
<v Speaker 1>the gas is a number.

00:38:34.905 --> 00:38:35.705
<v Speaker 1>And so

00:38:36.105 --> 00:38:36.985
<v Speaker 1>ultimately,

00:38:37.065 --> 00:38:38.985
<v Speaker 1>it's a only pay for what you use

00:38:38.985 --> 00:38:41.480
<v Speaker 1>system. It's very efficient. So there's no, like,

00:38:41.480 --> 00:38:43.720
<v Speaker 1>monthly subscriptions or any sort of costs.

00:38:44.119 --> 00:38:46.520
<v Speaker 1>So really brilliant for a a business model

00:38:46.520 --> 00:38:48.680
<v Speaker 1>for if you were a web developer and

00:38:48.680 --> 00:38:50.680
<v Speaker 1>you wanted to create an app and do

00:38:50.680 --> 00:38:52.535
<v Speaker 1>some, like, you know,

00:38:53.255 --> 00:38:55.815
<v Speaker 1>image recognition, like plant recognition or something, there's

00:38:55.815 --> 00:38:57.495
<v Speaker 1>all these functionality in the Rust that I

00:38:57.495 --> 00:38:58.935
<v Speaker 1>can show you later where we do,

00:38:59.655 --> 00:39:01.575
<v Speaker 1>some machine learning and AI stuff.

00:39:02.295 --> 00:39:04.615
<v Speaker 1>You would pay, like, fractions of a cent

00:39:04.615 --> 00:39:06.710
<v Speaker 1>per piece of gas or whatever. But if

00:39:06.710 --> 00:39:08.150
<v Speaker 1>no one's using your app, you're not paying

00:39:08.150 --> 00:39:09.430
<v Speaker 1>anything. But as soon as they use your

00:39:09.430 --> 00:39:12.309
<v Speaker 1>app, then the gas is being calculated. So

00:39:12.309 --> 00:39:14.230
<v Speaker 1>there's a there's a good business model you

00:39:14.230 --> 00:39:15.910
<v Speaker 1>could take to investors and say,

00:39:16.230 --> 00:39:17.590
<v Speaker 1>you know, if the app's

00:39:18.069 --> 00:39:19.910
<v Speaker 1>dead for forty eight hours, we're not being

00:39:19.910 --> 00:39:20.230
<v Speaker 1>billed.

00:39:20.835 --> 00:39:23.315
<v Speaker 1>And so it's different to a cloud provider

00:39:23.315 --> 00:39:25.234
<v Speaker 1>where you've got any sort of infrastructure that

00:39:25.234 --> 00:39:25.955
<v Speaker 1>you're,

00:39:26.755 --> 00:39:28.435
<v Speaker 1>holding on to and paying for when you're

00:39:28.435 --> 00:39:30.275
<v Speaker 1>not actually using it. It's strictly a pays

00:39:30.435 --> 00:39:31.635
<v Speaker 1>pay for what you use,

00:39:32.035 --> 00:39:32.835
<v Speaker 1>architecture.

00:39:33.795 --> 00:39:35.520
<v Speaker 1>Yeah. Which is the best way we have

00:39:35.520 --> 00:39:37.200
<v Speaker 1>to do it. Yeah. It's it's kind of

00:39:37.200 --> 00:39:37.920
<v Speaker 1>the ultimate

00:39:38.080 --> 00:39:38.640
<v Speaker 1>way.

00:39:39.200 --> 00:39:41.280
<v Speaker 0>Okay. Well, that you mentioned ML there, and

00:39:41.280 --> 00:39:43.280
<v Speaker 0>I'll I'll bring in Jared's question, which was

00:39:43.440 --> 00:39:45.600
<v Speaker 0>Yeah. Okay. Coral did quite nicely. But he

00:39:45.600 --> 00:39:47.040
<v Speaker 0>asked this, you know, is this mainly used

00:39:47.040 --> 00:39:48.240
<v Speaker 0>for ML functions?

00:39:48.480 --> 00:39:49.805
<v Speaker 0>I guess I would pivot that a little

00:39:49.805 --> 00:39:51.325
<v Speaker 0>bit. I mean, do you see people using

00:39:51.325 --> 00:39:53.565
<v Speaker 0>this for machine learning workloads?

00:39:53.565 --> 00:39:54.125
<v Speaker 1>Yeah.

00:39:54.444 --> 00:39:56.204
<v Speaker 1>I'll show you a really cool demo. Go

00:39:56.204 --> 00:39:57.325
<v Speaker 1>back to the

00:39:58.845 --> 00:40:00.285
<v Speaker 1>the Rawkode links.

00:40:01.660 --> 00:40:03.100
<v Speaker 1>I just did this one the other day.

00:40:03.100 --> 00:40:04.060
<v Speaker 1>I thought it was

00:40:05.020 --> 00:40:06.860
<v Speaker 1>really interesting. If you go up, there's a

00:40:06.860 --> 00:40:07.660
<v Speaker 1>OCR

00:40:07.660 --> 00:40:09.740
<v Speaker 1>and language translation

00:40:10.060 --> 00:40:11.020
<v Speaker 1>demo.

00:40:11.660 --> 00:40:12.300
<v Speaker 0>Mhmm.

00:40:12.780 --> 00:40:15.340
<v Speaker 1>And I really love this one because

00:40:15.825 --> 00:40:17.984
<v Speaker 1>this has actually happened. You know, you go

00:40:17.984 --> 00:40:19.905
<v Speaker 1>to a restaurant and so if you save

00:40:19.905 --> 00:40:20.705
<v Speaker 1>that as

00:40:22.065 --> 00:40:23.744
<v Speaker 1>like, you have a a French restaurant and

00:40:23.744 --> 00:40:25.345
<v Speaker 1>you have no idea and the waiter wants

00:40:25.345 --> 00:40:26.945
<v Speaker 1>you to order and you you honestly don't

00:40:26.945 --> 00:40:29.185
<v Speaker 1>know and so you point at something and

00:40:29.185 --> 00:40:31.299
<v Speaker 1>you get something you don't want, It's kinda

00:40:31.299 --> 00:40:33.140
<v Speaker 1>funny. And I've been I've been caught in

00:40:33.140 --> 00:40:33.940
<v Speaker 1>places

00:40:34.260 --> 00:40:36.500
<v Speaker 1>downloading apps and, you know, it's kinda ruining

00:40:36.500 --> 00:40:38.100
<v Speaker 1>the experience because you're trying to

00:40:38.579 --> 00:40:40.579
<v Speaker 1>do the language translation. I've done this so

00:40:40.579 --> 00:40:42.180
<v Speaker 0>many times myself. I'm sat there with my

00:40:42.180 --> 00:40:43.780
<v Speaker 0>phone trying to get a picture and get

00:40:43.780 --> 00:40:45.220
<v Speaker 0>it and get it to translate for me.

00:40:45.815 --> 00:40:47.895
<v Speaker 1>So so we just knocked this up the

00:40:47.895 --> 00:40:49.575
<v Speaker 1>other day. This is like a super simple

00:40:49.575 --> 00:40:51.815
<v Speaker 1>web app. If we right click in view

00:40:51.815 --> 00:40:53.495
<v Speaker 1>source, you'll see that. But, basically, what it's

00:40:53.495 --> 00:40:55.895
<v Speaker 1>done is it's taken your image. It's on

00:40:55.895 --> 00:40:57.575
<v Speaker 1>one hand, there's a there's a function as

00:40:57.575 --> 00:40:59.790
<v Speaker 1>a service endpoint there, which we can see

00:40:59.790 --> 00:41:01.550
<v Speaker 1>in the source code. It'll have a WASM

00:41:01.550 --> 00:41:04.910
<v Speaker 1>ID, and it has taken the actual letters

00:41:04.910 --> 00:41:06.430
<v Speaker 1>out of the image and turned them into

00:41:06.430 --> 00:41:08.750
<v Speaker 1>characters. And then there's a second function call

00:41:08.750 --> 00:41:09.470
<v Speaker 1>which

00:41:10.030 --> 00:41:12.350
<v Speaker 1>converts the language to the language of your

00:41:12.350 --> 00:41:12.510
<v Speaker 1>choice.

00:41:13.445 --> 00:41:15.445
<v Speaker 1>And so now we have the menu in

00:41:15.445 --> 00:41:16.485
<v Speaker 1>plain English.

00:41:16.645 --> 00:41:18.645
<v Speaker 0>Very cool. I like that one. Yep. Using

00:41:18.645 --> 00:41:19.925
<v Speaker 1>using TensorFlow.

00:41:20.885 --> 00:41:22.885
<v Speaker 1>So you can go ahead and train

00:41:24.325 --> 00:41:25.765
<v Speaker 1>to do whatever you want. We have, like,

00:41:25.765 --> 00:41:27.690
<v Speaker 1>birds and food. And there's one where I

00:41:27.690 --> 00:41:28.490
<v Speaker 1>have a video,

00:41:28.730 --> 00:41:30.250
<v Speaker 1>and you play the video, and it'll tell

00:41:30.250 --> 00:41:31.690
<v Speaker 1>you what the pizza topping is and stuff

00:41:31.690 --> 00:41:33.849
<v Speaker 1>like that. So we're just building the infrastructure,

00:41:33.849 --> 00:41:35.770
<v Speaker 1>though. These are just, like, prototypes, demos of

00:41:35.770 --> 00:41:37.130
<v Speaker 1>what you could use it for to create

00:41:37.130 --> 00:41:39.450
<v Speaker 1>your app. And then once you get that

00:41:39.450 --> 00:41:41.050
<v Speaker 1>user base, then you pay for what you

00:41:41.050 --> 00:41:43.065
<v Speaker 1>use, and it makes your app

00:41:43.865 --> 00:41:46.265
<v Speaker 1>attractive too. There's a code for this? Can

00:41:46.265 --> 00:41:48.265
<v Speaker 0>we take a look at that? Yeah. Yeah.

00:41:48.265 --> 00:41:49.945
<v Speaker 1>Sure. So if we start off by right

00:41:49.945 --> 00:41:51.465
<v Speaker 1>click view source, we'll have just have a

00:41:51.465 --> 00:41:53.465
<v Speaker 1>look at the the basic bare bones of

00:41:53.465 --> 00:41:54.265
<v Speaker 1>the the Jam.

00:41:55.800 --> 00:41:57.720
<v Speaker 1>So there's a function there,

00:41:58.120 --> 00:42:01.160
<v Speaker 1>I think. Yeah. So it's fairly

00:42:02.040 --> 00:42:04.200
<v Speaker 1>straightforward, the JavaScript. So it's just that call

00:42:04.200 --> 00:42:05.240
<v Speaker 1>service again,

00:42:05.800 --> 00:42:09.174
<v Speaker 1>and it's multipart form data as well. And

00:42:09.174 --> 00:42:11.015
<v Speaker 1>if you can see there, we've got the,

00:42:11.335 --> 00:42:13.414
<v Speaker 1>Wasm IDE of 284,

00:42:13.414 --> 00:42:15.815
<v Speaker 1>and one of the functions is called OCR.

00:42:16.055 --> 00:42:17.974
<v Speaker 1>And then the next one below that, a

00:42:17.974 --> 00:42:19.815
<v Speaker 1>few lines down, is is also two eighty

00:42:19.815 --> 00:42:21.255
<v Speaker 1>four, and it's called translate.

00:42:21.750 --> 00:42:23.270
<v Speaker 1>So we can pop over and have a

00:42:23.270 --> 00:42:24.390
<v Speaker 1>look at that Rust,

00:42:26.470 --> 00:42:29.190
<v Speaker 1>which compiled to WebAssembly and was executed on

00:42:29.190 --> 00:42:30.470
<v Speaker 1>the VM. So

00:42:31.750 --> 00:42:33.270
<v Speaker 1>I think that is

00:42:33.830 --> 00:42:34.390
<v Speaker 0>Yeah.

00:42:34.710 --> 00:42:35.110
<v Speaker 0>Let's see.

00:42:37.935 --> 00:42:38.735
<v Speaker 0>OCR?

00:42:39.215 --> 00:42:40.895
<v Speaker 1>Yeah. I think if you go to OCR,

00:42:40.895 --> 00:42:42.095
<v Speaker 1>open up that.

00:42:42.975 --> 00:42:46.095
<v Speaker 1>Yeah. That's it. So I've deployed that. I've

00:42:46.095 --> 00:42:48.895
<v Speaker 1>done an SSVM up build and deployed that,

00:42:48.895 --> 00:42:50.415
<v Speaker 1>and it's come back with that WASM ID.

00:42:50.415 --> 00:42:52.175
<v Speaker 1>So that's the the Rust code that will

00:42:52.175 --> 00:42:52.735
<v Speaker 1>execute.

00:42:54.710 --> 00:42:57.109
<v Speaker 1>Sorry. That will compile to web assembly that'll

00:42:57.109 --> 00:42:59.829
<v Speaker 1>ex yeah. The the code jumped there from

00:42:59.829 --> 00:43:02.550
<v Speaker 0>hello world to OCR with TensorFlow.

00:43:04.869 --> 00:43:06.309
<v Speaker 0>Don't need to understand that, but I like

00:43:06.309 --> 00:43:07.865
<v Speaker 0>what it does. So that's cool.

00:43:08.825 --> 00:43:12.185
<v Speaker 1>Yep. We have a a question from who's

00:43:12.185 --> 00:43:14.105
<v Speaker 0>asking, is there a time out for the

00:43:14.105 --> 00:43:15.225
<v Speaker 0>function execution?

00:43:16.105 --> 00:43:17.945
<v Speaker 1>No. Not at this moment.

00:43:18.585 --> 00:43:20.265
<v Speaker 0>So I could write a function that takes

00:43:20.130 --> 00:43:22.289
<v Speaker 0>thirty seconds, five minutes, and that'll run quite

00:43:22.289 --> 00:43:24.130
<v Speaker 0>happily in SSVM.

00:43:24.130 --> 00:43:24.690
<v Speaker 1>Yeah.

00:43:25.410 --> 00:43:27.490
<v Speaker 1>I might I might actually show you something.

00:43:28.690 --> 00:43:30.690
<v Speaker 1>One of the powerful things about this and

00:43:30.690 --> 00:43:33.185
<v Speaker 1>one of the reasons why we built this

00:43:33.185 --> 00:43:34.145
<v Speaker 1>is because

00:43:34.625 --> 00:43:36.225
<v Speaker 1>a lot of technology in the hand of

00:43:36.225 --> 00:43:38.705
<v Speaker 1>users is moving from powerful machines to smaller

00:43:38.705 --> 00:43:39.585
<v Speaker 1>and smaller,

00:43:39.744 --> 00:43:42.305
<v Speaker 1>light clients, thin clients, you know, phones, IoT

00:43:42.305 --> 00:43:44.065
<v Speaker 1>devices, and that sort of thing. What we've

00:43:44.065 --> 00:43:45.105
<v Speaker 1>done is taken

00:43:45.505 --> 00:43:47.185
<v Speaker 1>as much of the heavy lifting and all

00:43:47.185 --> 00:43:48.465
<v Speaker 1>the processing and

00:43:49.119 --> 00:43:50.720
<v Speaker 1>storage and memory and all that stuff, and

00:43:50.720 --> 00:43:52.080
<v Speaker 1>we've taken that off

00:43:52.240 --> 00:43:54.400
<v Speaker 1>the end user like the client, and we've

00:43:54.400 --> 00:43:56.960
<v Speaker 1>moved that across to the Second State infrastructure.

00:43:57.280 --> 00:43:59.600
<v Speaker 1>So we've come up with ways that we

00:43:59.600 --> 00:44:02.555
<v Speaker 1>can actually stop functions from taking too long.

00:44:02.555 --> 00:44:04.954
<v Speaker 1>Essentially, you use the infrastructure as it's intended,

00:44:04.954 --> 00:44:07.035
<v Speaker 1>your function should never really take that long.

00:44:07.434 --> 00:44:08.954
<v Speaker 1>Like, this is a great example of doing

00:44:08.954 --> 00:44:10.395
<v Speaker 1>some really powerful

00:44:10.795 --> 00:44:14.315
<v Speaker 1>processing here in fractions of a second essentially.

00:44:14.635 --> 00:44:16.990
<v Speaker 1>And so this this is very quick. Where

00:44:16.990 --> 00:44:19.870
<v Speaker 1>we find it's slow is if I have

00:44:19.950 --> 00:44:22.350
<v Speaker 1>a giant image that I need to upload

00:44:22.350 --> 00:44:24.110
<v Speaker 1>from my tiny phone on my very poor

00:44:24.110 --> 00:44:24.830
<v Speaker 1>bandwidth

00:44:25.070 --> 00:44:26.750
<v Speaker 1>and then process it and then send the

00:44:26.750 --> 00:44:28.670
<v Speaker 1>whole that that's actually a bottleneck. But it's

00:44:28.670 --> 00:44:30.270
<v Speaker 1>it's not really the system. It's more like

00:44:30.270 --> 00:44:32.575
<v Speaker 1>my bandwidth and my device. So I could

00:44:32.575 --> 00:44:34.095
<v Speaker 1>show you something really cool.

00:44:34.735 --> 00:44:37.455
<v Speaker 1>We can do a remote fetch of an

00:44:37.455 --> 00:44:38.975
<v Speaker 1>image. So you know how we're doing the

00:44:38.975 --> 00:44:41.695
<v Speaker 1>image manipulation before? Mhmm. What we can do

00:44:41.695 --> 00:44:42.335
<v Speaker 1>is

00:44:43.295 --> 00:44:46.415
<v Speaker 1>we can hack the so, like, the thumbnail

00:44:47.030 --> 00:44:47.670
<v Speaker 1>demo

00:44:47.910 --> 00:44:50.230
<v Speaker 1>Mhmm. In the Wasp learning. And instead of

00:44:50.230 --> 00:44:52.710
<v Speaker 1>us uploading, you know, you opened it on

00:44:52.710 --> 00:44:54.950
<v Speaker 1>your system and then it sent it to

00:44:54.950 --> 00:44:56.710
<v Speaker 1>the server and back, what we can do

00:44:56.710 --> 00:44:57.830
<v Speaker 1>is we can get it to go and

00:44:57.830 --> 00:44:59.109
<v Speaker 1>remote fetch an image

00:44:59.675 --> 00:45:01.835
<v Speaker 1>so it's not actually using your bandwidth,

00:45:02.315 --> 00:45:03.915
<v Speaker 1>and then it processes it, and then it

00:45:03.915 --> 00:45:05.435
<v Speaker 1>sends you back a thumbnail.

00:45:05.994 --> 00:45:07.515
<v Speaker 0>So to clarify,

00:45:07.515 --> 00:45:09.435
<v Speaker 0>instead of a browse button here, we'd have

00:45:09.435 --> 00:45:11.355
<v Speaker 0>a text box Yeah. Pick a URL Exactly.

00:45:11.355 --> 00:45:12.075
<v Speaker 0>And then okay.

00:45:12.555 --> 00:45:15.680
<v Speaker 1>Yep. Yep. That's right. So if we go

00:45:15.680 --> 00:45:17.599
<v Speaker 1>to a different one because that's sort of

00:45:17.599 --> 00:45:18.800
<v Speaker 1>like a holistic

00:45:19.759 --> 00:45:22.400
<v Speaker 1>demo. If we go to the was I'm

00:45:22.400 --> 00:45:25.119
<v Speaker 1>learning and the fast and maybe click there's

00:45:25.119 --> 00:45:25.920
<v Speaker 1>an image

00:45:26.160 --> 00:45:28.000
<v Speaker 1>thumbnail, like image hyphen thumbnail.

00:45:32.155 --> 00:45:33.195
<v Speaker 1>Oh, sorry.

00:45:33.195 --> 00:45:34.475
<v Speaker 1>So just in

00:45:34.875 --> 00:45:38.075
<v Speaker 1>you have Second State. Yep. So in there.

00:45:39.195 --> 00:45:39.915
<v Speaker 1>Yep.

00:45:41.115 --> 00:45:44.350
<v Speaker 0>Yep. Yeah. Perfect. Okay. So in the HTML

00:45:44.350 --> 00:45:45.550
<v Speaker 1>section of that

00:45:46.350 --> 00:45:48.830
<v Speaker 1>folder so we're in the Rust source code

00:45:48.830 --> 00:45:50.350
<v Speaker 1>now. If we go into the HTML, open

00:45:50.350 --> 00:45:53.150
<v Speaker 1>this guy up. We can go and do

00:45:53.150 --> 00:45:54.510
<v Speaker 1>a bit of a hack down below.

00:45:55.615 --> 00:45:57.935
<v Speaker 1>So instead of in the form,

00:45:59.855 --> 00:46:01.055
<v Speaker 1>instead of the,

00:46:01.375 --> 00:46:03.615
<v Speaker 1>where is it? Instead of the the input

00:46:03.615 --> 00:46:06.335
<v Speaker 1>typing file, we can change type equals text.

00:46:07.680 --> 00:46:09.760
<v Speaker 1>So just switch out the word file for

00:46:09.760 --> 00:46:11.280
<v Speaker 1>text. That that would work.

00:46:11.839 --> 00:46:12.880
<v Speaker 1>And then

00:46:18.000 --> 00:46:20.079
<v Speaker 1>that's probably all we need there.

00:46:20.985 --> 00:46:22.505
<v Speaker 0>So then in the Rust where we get

00:46:22.505 --> 00:46:24.425
<v Speaker 0>the baits received, right now we're

00:46:25.385 --> 00:46:26.985
<v Speaker 1>That that'll be okay. We don't need to

00:46:26.985 --> 00:46:27.705
<v Speaker 1>touch that.

00:46:28.105 --> 00:46:29.545
<v Speaker 1>Because what we're gonna do is we're gonna

00:46:29.545 --> 00:46:30.985
<v Speaker 1>allow the HTML

00:46:31.065 --> 00:46:32.185
<v Speaker 1>to tell

00:46:32.665 --> 00:46:35.145
<v Speaker 1>Second State, hey. I'm not giving you an

00:46:35.145 --> 00:46:36.910
<v Speaker 1>image. I want you to go get it

00:46:36.910 --> 00:46:37.550
<v Speaker 1>yourself

00:46:37.790 --> 00:46:40.110
<v Speaker 1>and then do stuff to it and don't

00:46:40.110 --> 00:46:41.150
<v Speaker 1>use my bandwidth.

00:46:41.230 --> 00:46:43.150
<v Speaker 1>So if we, if we go up to

00:46:43.390 --> 00:46:44.590
<v Speaker 1>we'd have to do one more thing in

00:46:44.590 --> 00:46:46.430
<v Speaker 1>the HTML to make that work. So if

00:46:46.430 --> 00:46:47.150
<v Speaker 1>we go up

00:46:49.865 --> 00:46:50.665
<v Speaker 1>to

00:46:50.665 --> 00:46:51.385
<v Speaker 1>the

00:46:51.705 --> 00:46:54.665
<v Speaker 1>form where we actually have the form data

00:46:54.825 --> 00:46:56.025
<v Speaker 1>and it says

00:46:57.225 --> 00:46:59.785
<v Speaker 1>form data dot append input underscore one,

00:47:00.670 --> 00:47:03.630
<v Speaker 1>and then it's passing in the actual file.

00:47:03.630 --> 00:47:05.390
<v Speaker 1>What we do is we take away that

00:47:06.030 --> 00:47:07.550
<v Speaker 1>and we would exchange

00:47:07.550 --> 00:47:09.230
<v Speaker 1>that for something like

00:47:09.710 --> 00:47:11.230
<v Speaker 1>document dot get,

00:47:11.630 --> 00:47:13.550
<v Speaker 1>you know, dot value or whatever. So we're

00:47:13.550 --> 00:47:15.470
<v Speaker 1>actually gonna take the text out of the

00:47:15.595 --> 00:47:17.995
<v Speaker 1>the input text and use the text instead

00:47:17.995 --> 00:47:19.435
<v Speaker 1>of the file. I'll just

00:47:20.155 --> 00:47:21.595
<v Speaker 1>do a quick Google for that.

00:47:37.890 --> 00:47:38.770
<v Speaker 1>Okay.

00:47:38.849 --> 00:47:39.970
<v Speaker 1>So

00:47:41.010 --> 00:47:42.130
<v Speaker 1>it'd be like

00:47:42.450 --> 00:47:45.089
<v Speaker 1>document dot get element by ID

00:47:46.855 --> 00:47:48.135
<v Speaker 1>value one

00:47:48.934 --> 00:47:51.255
<v Speaker 1>oh, input one. Sorry. Yeah. And then, dot

00:47:51.255 --> 00:47:51.974
<v Speaker 1>value.

00:47:52.214 --> 00:47:54.055
<v Speaker 1>That should be okay.

00:48:00.190 --> 00:48:01.790
<v Speaker 1>And then we add that, and then we

00:48:01.790 --> 00:48:03.710
<v Speaker 1>append that to the form data.

00:48:06.110 --> 00:48:06.750
<v Speaker 1>Yeah.

00:48:08.030 --> 00:48:08.510
<v Speaker 1>Yeah.

00:48:14.484 --> 00:48:16.405
<v Speaker 1>So I'll just explain something real quick before

00:48:16.405 --> 00:48:17.365
<v Speaker 1>we leave this.

00:48:18.645 --> 00:48:19.765
<v Speaker 1>When you have

00:48:20.244 --> 00:48:22.645
<v Speaker 1>multiple inputs to a function, we know that

00:48:22.645 --> 00:48:24.484
<v Speaker 1>in any programming language, you have a function

00:48:24.484 --> 00:48:26.244
<v Speaker 1>and then you have that signature. Right? So

00:48:26.244 --> 00:48:27.605
<v Speaker 1>you have, like, your arguments.

00:48:28.329 --> 00:48:30.090
<v Speaker 1>They have to be in the right order.

00:48:30.650 --> 00:48:32.410
<v Speaker 1>And so when you're dealing with something like

00:48:32.410 --> 00:48:33.530
<v Speaker 1>this over the web,

00:48:34.010 --> 00:48:36.329
<v Speaker 1>if we just say, hey, go get a

00:48:36.329 --> 00:48:37.290
<v Speaker 1>bunch of images,

00:48:37.530 --> 00:48:39.610
<v Speaker 1>they're all gonna come back at different speeds,

00:48:40.410 --> 00:48:42.170
<v Speaker 1>and that's gonna break. So what we do

00:48:42.170 --> 00:48:44.714
<v Speaker 1>here is we have this convention in the

00:48:44.714 --> 00:48:47.914
<v Speaker 1>Second State infrastructure where we just simply underscore

00:48:47.914 --> 00:48:48.875
<v Speaker 1>with a number,

00:48:49.194 --> 00:48:50.714
<v Speaker 1>and then it will arrange those in the

00:48:50.714 --> 00:48:53.115
<v Speaker 1>right order. So I'm I'm explicitly saying

00:48:53.434 --> 00:48:56.234
<v Speaker 1>underscore one, and then I'm giving it that

00:48:56.234 --> 00:48:57.194
<v Speaker 1>particular URL.

00:48:57.670 --> 00:48:59.510
<v Speaker 1>If we just pop over to the Rust,

00:48:59.510 --> 00:49:01.430
<v Speaker 1>just have a a real quick look.

00:49:02.310 --> 00:49:03.030
<v Speaker 1>Yep.

00:49:03.670 --> 00:49:05.670
<v Speaker 1>Yep. So we we sort of got this

00:49:05.670 --> 00:49:08.390
<v Speaker 1>agreement. It's like a convention where the function

00:49:08.390 --> 00:49:10.710
<v Speaker 1>is called thumbnail and it takes one argument.

00:49:10.710 --> 00:49:12.550
<v Speaker 1>So I'm saying in the HTML

00:49:12.924 --> 00:49:14.924
<v Speaker 1>that this is underscore one. If we had

00:49:14.924 --> 00:49:15.805
<v Speaker 1>two arguments,

00:49:15.964 --> 00:49:17.805
<v Speaker 1>let's say we're watermarking an image and we

00:49:17.805 --> 00:49:20.204
<v Speaker 1>had text as well or something, the second

00:49:20.204 --> 00:49:22.204
<v Speaker 1>argument would be the text. So the Rust

00:49:22.204 --> 00:49:23.964
<v Speaker 1>is expecting that. So what I do in

00:49:23.964 --> 00:49:27.320
<v Speaker 1>the HTML is say input underscore two. The

00:49:27.320 --> 00:49:29.160
<v Speaker 1>input is irrelevant. It's just the two that

00:49:29.160 --> 00:49:31.080
<v Speaker 1>matters. So as long as there's like one,

00:49:31.080 --> 00:49:33.400
<v Speaker 1>two, three, four on the end Mhmm. It'll

00:49:33.400 --> 00:49:35.240
<v Speaker 1>know, oh, this is the order of the

00:49:35.240 --> 00:49:37.000
<v Speaker 1>arguments that need to go and be sent

00:49:37.000 --> 00:49:38.440
<v Speaker 1>over to the Rust. Does that make sense?

00:49:38.694 --> 00:49:40.295
<v Speaker 0>Yeah. Yeah. You're just you're using like that

00:49:40.295 --> 00:49:42.855
<v Speaker 0>incremental IDs convention for the the the Yeah.

00:49:42.855 --> 00:49:45.015
<v Speaker 0>Functionality. Right? So does that mean that we

00:49:45.015 --> 00:49:46.615
<v Speaker 0>need to change this image to be load

00:49:46.615 --> 00:49:48.934
<v Speaker 0>from memory to load from URL or something?

00:49:48.934 --> 00:49:51.174
<v Speaker 0>Because that's really No. Not at all. No.

00:49:51.174 --> 00:49:53.095
<v Speaker 1>It'll it'll send it to the

00:49:54.260 --> 00:49:56.900
<v Speaker 1>function as a service system will go and

00:49:56.900 --> 00:49:59.060
<v Speaker 1>do that for us. There's two there's two

00:49:59.060 --> 00:50:00.980
<v Speaker 1>ways you can do it. One, you can

00:50:01.780 --> 00:50:03.700
<v Speaker 1>if we pop back to the HTML

00:50:04.180 --> 00:50:05.540
<v Speaker 0>Mhmm. The one way you can do it

00:50:05.540 --> 00:50:06.820
<v Speaker 1>is you can do a, like, a a

00:50:06.820 --> 00:50:08.765
<v Speaker 1>post request. And the other way, if you

00:50:08.765 --> 00:50:10.285
<v Speaker 1>just put in a URL, it will just

00:50:10.285 --> 00:50:12.845
<v Speaker 1>go and fetch that. And so the the

00:50:12.845 --> 00:50:15.085
<v Speaker 1>convention for this is if you put see

00:50:15.085 --> 00:50:16.845
<v Speaker 1>where it says input underscore one on that

00:50:16.845 --> 00:50:18.365
<v Speaker 1>line you're on now? Mhmm.

00:50:18.765 --> 00:50:19.965
<v Speaker 1>If you

00:50:21.880 --> 00:50:23.320
<v Speaker 1>because the URL equals

00:50:23.560 --> 00:50:24.680
<v Speaker 1>yeah. So

00:50:25.080 --> 00:50:26.040
<v Speaker 1>if you put

00:50:26.360 --> 00:50:28.520
<v Speaker 1>the word fetch underscore

00:50:29.000 --> 00:50:30.520
<v Speaker 1>as a prefix

00:50:30.920 --> 00:50:31.560
<v Speaker 1>yeah.

00:50:31.880 --> 00:50:32.440
<v Speaker 1>Prefix.

00:50:33.215 --> 00:50:34.015
<v Speaker 0>Uh-huh.

00:50:34.175 --> 00:50:37.535
<v Speaker 0>And and so fetch underscore input underscore one.

00:50:39.775 --> 00:50:42.335
<v Speaker 1>Yep. Fetch underscore input underscore. Now what it's

00:50:42.335 --> 00:50:44.895
<v Speaker 1>saying is, oh, hey. This isn't just text.

00:50:44.895 --> 00:50:46.015
<v Speaker 1>I want you to actually go get this.

00:50:46.050 --> 00:50:48.050
<v Speaker 1>And this is our convention that we created.

00:50:48.050 --> 00:50:49.650
<v Speaker 1>So now it knows to actually go and

00:50:49.650 --> 00:50:51.010
<v Speaker 1>get the image and bring it back as

00:50:51.010 --> 00:50:53.570
<v Speaker 1>as raw image data. Yeah. Yeah. I like

00:50:53.570 --> 00:50:54.450
<v Speaker 0>that. And that should

00:50:55.810 --> 00:50:58.050
<v Speaker 1>work. Now I'll just I'll just get you

00:50:58.050 --> 00:51:01.075
<v Speaker 1>an image. If you go back to the

00:51:01.075 --> 00:51:02.035
<v Speaker 1>GitHub

00:51:02.675 --> 00:51:03.955
<v Speaker 1>with the links

00:51:04.515 --> 00:51:05.155
<v Speaker 0>Mhmm.

00:51:05.475 --> 00:51:07.955
<v Speaker 1>Maybe just scroll up. I've just,

00:51:08.275 --> 00:51:10.355
<v Speaker 1>like, plunked an image up here

00:51:10.995 --> 00:51:11.795
<v Speaker 1>in the

00:51:13.410 --> 00:51:15.650
<v Speaker 1>there's like a remote image underscore one up

00:51:15.650 --> 00:51:17.569
<v Speaker 1>the top there as like a JPEG.

00:51:17.569 --> 00:51:18.850
<v Speaker 1>You can click on that.

00:51:19.250 --> 00:51:20.770
<v Speaker 1>Click on the download button.

00:51:24.049 --> 00:51:25.970
<v Speaker 0>Yep. I think you can actually click on

00:51:25.970 --> 00:51:28.369
<v Speaker 1>it because you need the raw

00:51:28.095 --> 00:51:28.655
<v Speaker 1>image.

00:51:29.055 --> 00:51:30.815
<v Speaker 1>Yeah. And then take that URL. Does that

00:51:30.815 --> 00:51:32.255
<v Speaker 1>say raw.github?

00:51:32.255 --> 00:51:32.815
<v Speaker 0>Yes.

00:51:33.215 --> 00:51:35.455
<v Speaker 1>Yeah. Cool. So that if we paste that

00:51:35.455 --> 00:51:37.215
<v Speaker 1>in the text box, it will actually just

00:51:37.215 --> 00:51:39.375
<v Speaker 1>go and get the the images raw bytes.

00:51:39.375 --> 00:51:40.975
<v Speaker 0>Well, we'll have to deploy this first. Right?

00:51:43.480 --> 00:51:45.799
<v Speaker 1>Just have to you'll actually just have to

00:51:45.799 --> 00:51:47.720
<v Speaker 1>click save on the HTML

00:51:47.880 --> 00:51:49.720
<v Speaker 1>because we're not actually changing the rust at

00:51:49.720 --> 00:51:50.280
<v Speaker 1>all.

00:51:51.799 --> 00:51:53.079
<v Speaker 0>Oh, so you just want me to open

00:51:53.079 --> 00:51:54.440
<v Speaker 0>this HTML file?

00:51:54.839 --> 00:51:57.275
<v Speaker 1>Yeah. Just on your desktop. Yeah. So just

00:51:57.275 --> 00:51:58.795
<v Speaker 1>save the HTML and just open it on

00:51:58.795 --> 00:52:00.475
<v Speaker 1>your locally on your PC. And this is

00:52:00.475 --> 00:52:02.235
<v Speaker 1>where the Jamstack thing comes in. You don't

00:52:02.235 --> 00:52:03.835
<v Speaker 1>actually have to deploy it. It doesn't have

00:52:03.835 --> 00:52:05.435
<v Speaker 1>to be served. It will just work. Yeah.

00:52:05.435 --> 00:52:06.635
<v Speaker 0>There is a way to open this in

00:52:06.635 --> 00:52:08.875
<v Speaker 0>my browser, isn't there? I'm

00:52:08.875 --> 00:52:09.835
<v Speaker 0>sure I've done this before.

00:52:13.089 --> 00:52:14.530
<v Speaker 0>I'll just do it from here.

00:52:15.170 --> 00:52:15.890
<v Speaker 0>So

00:52:15.970 --> 00:52:19.089
<v Speaker 0>what this was the image thumbnail. So open

00:52:19.250 --> 00:52:21.010
<v Speaker 1>Yeah. Image thumbnail

00:52:21.010 --> 00:52:22.130
<v Speaker 0>HTML

00:52:22.130 --> 00:52:22.849
<v Speaker 0>index.

00:52:34.745 --> 00:52:36.505
<v Speaker 0>Looks like bitcdn.net

00:52:36.505 --> 00:52:38.345
<v Speaker 0>might be a little slow.

00:52:46.020 --> 00:52:46.820
<v Speaker 1>There

00:52:47.780 --> 00:52:49.060
<v Speaker 1>we go. Oh,

00:52:49.380 --> 00:52:51.220
<v Speaker 1>yeah. Cool. So do we have a text

00:52:51.220 --> 00:52:53.300
<v Speaker 1>box then? Do we do that? Yep. Oh,

00:52:53.300 --> 00:52:55.380
<v Speaker 1>cool. Okay. And then,

00:52:55.619 --> 00:52:56.740
<v Speaker 1>hopefully, if you hit that,

00:52:57.414 --> 00:52:58.615
<v Speaker 1>Today. Okay.

00:52:59.414 --> 00:53:01.655
<v Speaker 1>So what that's done is

00:53:02.454 --> 00:53:05.815
<v Speaker 1>your computer has only sent that text. Like,

00:53:05.815 --> 00:53:07.974
<v Speaker 1>in the HTTP request, you sent that

00:53:08.855 --> 00:53:09.974
<v Speaker 1>text that you've pasted in.

00:53:11.180 --> 00:53:14.140
<v Speaker 1>The server side's gone off to GitHub, got

00:53:14.140 --> 00:53:16.859
<v Speaker 1>the image, come back, run the thumbnail,

00:53:16.859 --> 00:53:18.460
<v Speaker 1>and then just sent you back the thumbnail

00:53:18.460 --> 00:53:19.099
<v Speaker 1>only.

00:53:19.260 --> 00:53:20.780
<v Speaker 1>Does that make sense? Yeah.

00:53:21.740 --> 00:53:23.660
<v Speaker 0>Yeah. I like how

00:53:24.455 --> 00:53:25.335
<v Speaker 0>the

00:53:25.335 --> 00:53:27.015
<v Speaker 0>JavaScript is just, you know,

00:53:27.335 --> 00:53:30.055
<v Speaker 0>a very thin layer on making like an

00:53:30.055 --> 00:53:32.455
<v Speaker 0>interface to the actual back end code and

00:53:32.455 --> 00:53:34.855
<v Speaker 0>then you've got these conventions of fetch input

00:53:34.855 --> 00:53:37.670
<v Speaker 0>which tells Yeah. Second state to, hey. You

00:53:37.670 --> 00:53:39.269
<v Speaker 0>wanna go grab this link and send it

00:53:39.269 --> 00:53:41.269
<v Speaker 0>into the rest function. So that's Yeah. Yeah.

00:53:41.269 --> 00:53:43.349
<v Speaker 0>I quite like that. Very cool. There's other

00:53:43.349 --> 00:53:43.910
<v Speaker 1>things,

00:53:44.470 --> 00:53:47.589
<v Speaker 1>similar. So you can do, callbacks. So

00:53:47.829 --> 00:53:48.470
<v Speaker 1>after

00:53:48.630 --> 00:53:50.150
<v Speaker 1>a function executes,

00:53:50.390 --> 00:53:52.674
<v Speaker 1>you can put in the header or the

00:53:52.674 --> 00:53:53.234
<v Speaker 1>body,

00:53:53.795 --> 00:53:56.115
<v Speaker 1>or actually, you can submit a callback into

00:53:56.115 --> 00:53:57.795
<v Speaker 1>the system. There's, like, a few different ways

00:53:57.795 --> 00:53:59.075
<v Speaker 1>to do everything because we just try to

00:53:59.075 --> 00:54:01.315
<v Speaker 1>be as flexible as possible. And what that'll

00:54:01.315 --> 00:54:03.954
<v Speaker 1>do is it will execute a function, and

00:54:03.954 --> 00:54:06.310
<v Speaker 1>then when the function's finished, it will perform

00:54:06.310 --> 00:54:08.069
<v Speaker 1>a callback. So it'll kinda call back on

00:54:08.069 --> 00:54:09.829
<v Speaker 1>itself and do more stuff. So, like, you

00:54:09.829 --> 00:54:12.230
<v Speaker 1>could maybe now send a text through

00:54:12.630 --> 00:54:14.310
<v Speaker 1>a service or, you know, send an email

00:54:14.310 --> 00:54:15.670
<v Speaker 1>or something like that, say your image is

00:54:15.670 --> 00:54:16.869
<v Speaker 1>ready or what have you.

00:54:17.904 --> 00:54:19.984
<v Speaker 0>Can I use that So does that Is

00:54:19.984 --> 00:54:21.505
<v Speaker 0>that callback the same

00:54:22.065 --> 00:54:24.625
<v Speaker 0>way you would recommend to do, like, functional

00:54:24.625 --> 00:54:27.105
<v Speaker 0>composition of chaining more than one second state

00:54:27.105 --> 00:54:29.585
<v Speaker 0>function together, or is there another primitive for

00:54:29.585 --> 00:54:33.090
<v Speaker 0>that? No. Exactly that. Yeah. That's exactly right.

00:54:33.090 --> 00:54:35.170
<v Speaker 1>Yeah. So you'd have we have a convention

00:54:35.170 --> 00:54:36.690
<v Speaker 1>with which is SSVM

00:54:36.690 --> 00:54:37.490
<v Speaker 1>callback.

00:54:37.570 --> 00:54:39.010
<v Speaker 1>And if you put that in the header

00:54:39.010 --> 00:54:40.770
<v Speaker 1>and you put in adjacent object, which is

00:54:40.770 --> 00:54:42.850
<v Speaker 1>a callback, say, like host port

00:54:43.250 --> 00:54:43.730
<v Speaker 1>body,

00:54:44.475 --> 00:54:47.035
<v Speaker 1>it'll actually perform that when it'll wait and

00:54:47.035 --> 00:54:48.875
<v Speaker 1>say, okay. Do all your stuff. And then

00:54:48.875 --> 00:54:50.395
<v Speaker 1>the result comes back, and then it goes,

00:54:50.395 --> 00:54:51.595
<v Speaker 1>oh, hang on. I gotta call back, and

00:54:51.595 --> 00:54:53.035
<v Speaker 1>then we'll do that on the end and

00:54:53.035 --> 00:54:54.715
<v Speaker 1>then send you back the result.

00:54:55.275 --> 00:54:57.115
<v Speaker 1>So things like, you know, you might oh,

00:54:57.115 --> 00:54:59.675
<v Speaker 1>and there's also a prefetch as well. So

00:54:59.180 --> 00:55:01.420
<v Speaker 1>you'll do, like maybe go check a price

00:55:01.420 --> 00:55:03.420
<v Speaker 1>of a stock or something and then then

00:55:03.420 --> 00:55:04.620
<v Speaker 1>calculate some

00:55:05.260 --> 00:55:07.820
<v Speaker 1>change with rust. And then when it's finished,

00:55:07.820 --> 00:55:10.220
<v Speaker 1>then maybe the callback converts it from British

00:55:10.220 --> 00:55:12.700
<v Speaker 1>pounds to Australian dollars or whatever, and then

00:55:12.700 --> 00:55:13.820
<v Speaker 1>it will send that back to you. So

00:55:13.820 --> 00:55:15.715
<v Speaker 1>you can do a bunch of different things.

00:55:15.875 --> 00:55:17.395
<v Speaker 1>It's sort of like programming the web with

00:55:17.395 --> 00:55:18.435
<v Speaker 1>web assemblies.

00:55:20.275 --> 00:55:21.395
<v Speaker 0>Alright. I

00:55:22.515 --> 00:55:24.115
<v Speaker 0>guess I got an idea then.

00:55:24.515 --> 00:55:25.315
<v Speaker 0>I'll

00:55:25.315 --> 00:55:26.355
<v Speaker 0>throw this out here. You can get me

00:55:26.355 --> 00:55:27.810
<v Speaker 0>away from it if you want. But if

00:55:27.810 --> 00:55:29.890
<v Speaker 0>we wanted to show the functional composition,

00:55:29.890 --> 00:55:32.370
<v Speaker 0>I believe you've already deployed the anagram finder

00:55:32.370 --> 00:55:34.850
<v Speaker 0>to Second State. Is that right? Yeah. Yeah.

00:55:34.850 --> 00:55:37.970
<v Speaker 0>So so could we then write a page

00:55:37.970 --> 00:55:39.810
<v Speaker 0>like this? It takes a string and put

00:55:40.455 --> 00:55:42.615
<v Speaker 0>and we just have a really simple function

00:55:42.615 --> 00:55:44.695
<v Speaker 0>that trimmed the space and then forward that

00:55:44.695 --> 00:55:46.535
<v Speaker 0>onto the anagram finder and then give us

00:55:46.535 --> 00:55:48.295
<v Speaker 0>a list of the potential anagrams.

00:55:50.215 --> 00:55:51.415
<v Speaker 1>Yes. So

00:55:52.215 --> 00:55:55.680
<v Speaker 1>if we go to the anagram finder,

00:55:55.680 --> 00:55:57.600
<v Speaker 1>I think I linked to that on the

00:55:57.600 --> 00:56:00.080
<v Speaker 1>GitHub page with the Rawkode links.

00:56:04.240 --> 00:56:05.920
<v Speaker 0>Yeah. Which I think I've now

00:56:06.320 --> 00:56:08.160
<v Speaker 0>went away from. Let me just pull that

00:56:07.935 --> 00:56:09.695
<v Speaker 0>back. I think there's a demo there.

00:56:10.895 --> 00:56:13.215
<v Speaker 0>Let

00:56:14.015 --> 00:56:15.375
<v Speaker 0>me just close a few of these tabs

00:56:15.375 --> 00:56:17.535
<v Speaker 0>actually before I get to Okay. Sure. Well,

00:56:18.975 --> 00:56:20.655
<v Speaker 0>like that log one. Let's let's keep that

00:56:21.760 --> 00:56:24.160
<v Speaker 1>Yeah. That looks cool. Okay. So

00:56:24.480 --> 00:56:25.440
<v Speaker 0>anagram.

00:56:25.680 --> 00:56:27.040
<v Speaker 0>Pop you open.

00:56:28.480 --> 00:56:30.960
<v Speaker 1>I think that's the article I wrote. Alright.

00:56:30.960 --> 00:56:33.440
<v Speaker 0>Okay. Okay. So That's cool. Yeah. There's gonna

00:56:33.440 --> 00:56:34.880
<v Speaker 1>be a link at the bottom there somewhere.

00:56:34.880 --> 00:56:35.039
<v Speaker 1>Yeah.

00:56:36.335 --> 00:56:38.335
<v Speaker 0>I'll put this article in the show notes

00:56:38.335 --> 00:56:38.974
<v Speaker 0>as well.

00:56:39.375 --> 00:56:40.415
<v Speaker 1>Cool. Thanks.

00:56:41.934 --> 00:56:43.695
<v Speaker 1>I was just trying to give examples.

00:56:43.855 --> 00:56:45.775
<v Speaker 1>I saw you guys do that. I'm like,

00:56:45.775 --> 00:56:47.615
<v Speaker 1>this is brilliant. Because that that would be

00:56:47.615 --> 00:56:49.295
<v Speaker 1>a killer app for a

00:56:50.260 --> 00:56:51.859
<v Speaker 1>for a trivia night or for a

00:56:53.140 --> 00:56:55.140
<v Speaker 1>Oh, yeah. It's safe. So we can see

00:56:55.140 --> 00:56:57.380
<v Speaker 0>here a cage ever comes back as trace.

00:56:57.380 --> 00:56:59.619
<v Speaker 1>That's right. Yeah. So what happens done there

00:57:00.020 --> 00:57:01.940
<v Speaker 1>if I Sorry. Go. I'm just gonna add

00:57:01.940 --> 00:57:04.015
<v Speaker 0>some spaces. That should break it. Right? Yeah.

00:57:04.015 --> 00:57:04.735
<v Speaker 0>There we go.

00:57:05.295 --> 00:57:07.455
<v Speaker 0>Yeah. Spaces at the start, spaces at the

00:57:07.455 --> 00:57:09.055
<v Speaker 0>end. We've broken that again, but we actually

00:57:09.055 --> 00:57:10.415
<v Speaker 0>want this to work. So I was like,

00:57:10.415 --> 00:57:12.895
<v Speaker 0>can we just throw together something that takes

00:57:12.895 --> 00:57:13.855
<v Speaker 0>this input

00:57:14.015 --> 00:57:16.495
<v Speaker 0>and then chain like the straps the spaces

00:57:16.495 --> 00:57:18.655
<v Speaker 0>or non alpha pneumatics, whatever we wanna do

00:57:18.890 --> 00:57:20.570
<v Speaker 0>and then pass it on to the Anagram

00:57:20.570 --> 00:57:21.210
<v Speaker 0>Pinder.

00:57:21.690 --> 00:57:24.970
<v Speaker 1>Yeah. Sure. Yeah. Sure. So we're gonna write

00:57:24.970 --> 00:57:27.930
<v Speaker 1>a new Rust function that strips the spaces,

00:57:28.250 --> 00:57:29.930
<v Speaker 1>and we deploy that as a new Wasm

00:57:29.930 --> 00:57:31.610
<v Speaker 1>ID. We call that. And then when that's

00:57:31.610 --> 00:57:33.690
<v Speaker 1>finished, then we're gonna come back and and

00:57:33.690 --> 00:57:34.250
<v Speaker 1>then do this.

00:57:35.115 --> 00:57:37.035
<v Speaker 1>Yeah. That that we can do that. Yeah.

00:57:37.435 --> 00:57:38.395
<v Speaker 0>Okay.

00:57:39.275 --> 00:57:40.315
<v Speaker 0>You think we could do that in half

00:57:40.315 --> 00:57:40.955
<v Speaker 0>an hour?

00:57:41.595 --> 00:57:42.555
<v Speaker 1>Yeah.

00:57:43.195 --> 00:57:44.715
<v Speaker 1>Yeah. Yeah. Alright. Okay. Yeah.

00:57:45.755 --> 00:57:47.755
<v Speaker 1>Sure. So why don't we just start with

00:57:47.755 --> 00:57:49.515
<v Speaker 0>like something I know this is

00:57:50.070 --> 00:57:52.390
<v Speaker 0>it seems almost trivial, but let's say I

00:57:52.390 --> 00:57:53.990
<v Speaker 0>wanna create a new second state function that

00:57:53.990 --> 00:57:55.830
<v Speaker 0>just takes a string, strums the spaces and

00:57:55.830 --> 00:57:57.990
<v Speaker 0>spits it back out. What what's the how

00:57:57.990 --> 00:57:58.870
<v Speaker 0>do I do that?

00:58:00.710 --> 00:58:02.950
<v Speaker 1>So we would

00:58:04.735 --> 00:58:06.575
<v Speaker 0>Unless you have any cooler demos, by the

00:58:06.575 --> 00:58:07.695
<v Speaker 0>way, if it shows off.

00:58:08.255 --> 00:58:08.975
<v Speaker 1>Well,

00:58:09.135 --> 00:58:11.215
<v Speaker 1>yes. So basically, what we do is we'd

00:58:11.295 --> 00:58:13.855
<v Speaker 1>instead of using the the prewritten

00:58:13.855 --> 00:58:15.789
<v Speaker 1>demos that we've got, we just do a

00:58:15.789 --> 00:58:17.390
<v Speaker 1>cargo new and,

00:58:17.869 --> 00:58:19.630
<v Speaker 1>you know, we we just write a a

00:58:19.630 --> 00:58:21.390
<v Speaker 1>Rust function does that. But I do actually

00:58:21.390 --> 00:58:22.910
<v Speaker 1>have something really cool to show you. I

00:58:22.910 --> 00:58:24.190
<v Speaker 1>don't know how long it will take,

00:58:24.670 --> 00:58:26.510
<v Speaker 1>but it's it's super cool

00:58:26.829 --> 00:58:28.829
<v Speaker 1>because it solves one of the problems that

00:58:28.829 --> 00:58:29.390
<v Speaker 1>WebAssembly

00:58:29.630 --> 00:58:30.875
<v Speaker 1>well, it's not a problem, but it's just

00:58:30.875 --> 00:58:34.475
<v Speaker 1>like a nuance of WebAssembly and its, persistence.

00:58:35.035 --> 00:58:36.555
<v Speaker 1>Because one of the things with WebAssembly is

00:58:36.555 --> 00:58:39.755
<v Speaker 1>it executes in a stateless environment. So essentially,

00:58:39.755 --> 00:58:41.915
<v Speaker 1>when you call a function, it creates a

00:58:41.915 --> 00:58:43.595
<v Speaker 1>new instance of the VM,

00:58:43.755 --> 00:58:44.234
<v Speaker 1>the stack,

00:58:44.760 --> 00:58:46.520
<v Speaker 1>and it executes.

00:58:46.520 --> 00:58:48.840
<v Speaker 1>And then when it's finished, the stack the

00:58:48.840 --> 00:58:51.160
<v Speaker 1>the instance of the VM is destroyed, and

00:58:51.160 --> 00:58:53.000
<v Speaker 1>it's gone. And so that runs

00:58:53.240 --> 00:58:55.960
<v Speaker 1>by itself in a standalone sandbox environment. And

00:58:55.960 --> 00:58:57.480
<v Speaker 1>then when it's done, it's

00:58:57.965 --> 00:59:00.525
<v Speaker 1>gone forever. And that's a cool safety feature.

00:59:00.525 --> 00:59:02.845
<v Speaker 1>And that's the fundamentally what WebAssembly

00:59:03.005 --> 00:59:05.325
<v Speaker 1>how it works. But what you don't have

00:59:05.965 --> 00:59:10.285
<v Speaker 1>is any persistence. So to write anything useful,

00:59:10.285 --> 00:59:12.045
<v Speaker 1>if you're gonna execute a function and then

00:59:12.045 --> 00:59:14.090
<v Speaker 1>it just disappears and you and then you

00:59:14.090 --> 00:59:16.170
<v Speaker 1>have no persistence, then you can't really write

00:59:16.170 --> 00:59:17.050
<v Speaker 1>an application.

00:59:17.290 --> 00:59:20.250
<v Speaker 1>So what we created was a storage mechanism

00:59:20.250 --> 00:59:22.730
<v Speaker 1>to have persistence, and I'd love to show

00:59:22.730 --> 00:59:24.810
<v Speaker 1>you that if that's okay. Yeah. That's really

00:59:24.810 --> 00:59:26.455
<v Speaker 1>cool. Yeah. Okay. So

00:59:28.375 --> 00:59:30.615
<v Speaker 1>there is a Hello World called I think

00:59:30.615 --> 00:59:32.055
<v Speaker 1>it's called Hello Storage.

00:59:33.895 --> 00:59:35.015
<v Speaker 0>Let's see.

00:59:35.734 --> 00:59:37.095
<v Speaker 0>It is indeed.

00:59:37.255 --> 00:59:37.895
<v Speaker 0>So

00:59:38.135 --> 00:59:38.935
<v Speaker 0>pop that open.

00:59:42.210 --> 00:59:43.410
<v Speaker 1>And so what

00:59:43.890 --> 00:59:45.090
<v Speaker 1>this Rust does

00:59:45.890 --> 00:59:47.410
<v Speaker 1>do you mind me sort of diving a

00:59:47.410 --> 00:59:49.650
<v Speaker 1>bit deep into, like, how we did this?

00:59:49.650 --> 00:59:51.170
<v Speaker 0>No. Go for it. Is that cool? Yeah.

00:59:51.170 --> 00:59:52.690
<v Speaker 1>Okay. Cool. So

00:59:52.770 --> 00:59:54.530
<v Speaker 1>essentially what we did was

00:59:56.035 --> 00:59:58.755
<v Speaker 1>the WebAssembly VM is written in c plus

00:59:58.755 --> 01:00:00.195
<v Speaker 1>plus and

01:00:01.955 --> 01:00:04.755
<v Speaker 1>we're compiling Rust to WebAssembly.

01:00:05.475 --> 01:00:06.595
<v Speaker 1>And the

01:00:06.835 --> 01:00:10.195
<v Speaker 1>WebAssembly VM only deals in its native,

01:00:11.610 --> 01:00:13.770
<v Speaker 1>you know, data types. And one of those

01:00:13.770 --> 01:00:15.930
<v Speaker 1>is the I 32. Right?

01:00:16.250 --> 01:00:18.650
<v Speaker 1>So what we did was we wrote

01:00:18.970 --> 01:00:20.090
<v Speaker 1>a library

01:00:20.890 --> 01:00:23.370
<v Speaker 1>in Rust and put it in Crades that

01:00:24.010 --> 01:00:26.395
<v Speaker 1>takes any high level Rust

01:00:26.714 --> 01:00:29.995
<v Speaker 1>data type like string, structs, doesn't matter,

01:00:30.555 --> 01:00:33.035
<v Speaker 1>and it serializes it to I 32.

01:00:33.194 --> 01:00:35.035
<v Speaker 1>And then what we're

01:00:35.035 --> 01:00:37.115
<v Speaker 1>able to do is have the

01:00:38.660 --> 01:00:40.820
<v Speaker 1>WebAssembly VM chew that

01:00:41.060 --> 01:00:43.220
<v Speaker 1>and process it because it's it's saying here,

01:00:43.220 --> 01:00:44.980
<v Speaker 1>have a bunch of I 30 twos, do

01:00:44.980 --> 01:00:47.060
<v Speaker 1>stuff with them. And what we did was

01:00:47.060 --> 01:00:49.940
<v Speaker 1>we used the foreign function interface. So between

01:00:49.940 --> 01:00:52.705
<v Speaker 1>Rust and c plus plus to actually

01:00:53.425 --> 01:00:55.665
<v Speaker 1>say, here's a high level Rust object. I've

01:00:55.665 --> 01:00:57.265
<v Speaker 1>converted it to a whole bunch of I

01:00:57.265 --> 01:00:59.345
<v Speaker 1>30 twos. Here they all are. I want

01:00:59.345 --> 01:01:01.105
<v Speaker 1>you to take those verbatim

01:01:01.105 --> 01:01:03.505
<v Speaker 1>and shove them into your memory. And then

01:01:03.505 --> 01:01:04.224
<v Speaker 1>what we did was

01:01:04.910 --> 01:01:06.910
<v Speaker 1>which which we're basically gonna show here is

01:01:06.910 --> 01:01:08.270
<v Speaker 1>you can go and you can go and

01:01:08.270 --> 01:01:10.030
<v Speaker 1>fetch them and bring them back. So this

01:01:10.030 --> 01:01:11.230
<v Speaker 1>this persists.

01:01:11.470 --> 01:01:12.270
<v Speaker 1>But

01:01:12.270 --> 01:01:14.670
<v Speaker 1>when a step further, which is even cooler,

01:01:14.670 --> 01:01:16.270
<v Speaker 1>instead of just doing that with like, you

01:01:16.270 --> 01:01:18.110
<v Speaker 1>know, here's some stuff I want you to

01:01:18.110 --> 01:01:19.470
<v Speaker 1>store it and give me back a key,

01:01:19.835 --> 01:01:22.954
<v Speaker 1>we're actually using the Rust standard env. So

01:01:22.954 --> 01:01:24.875
<v Speaker 1>you program like you would

01:01:25.194 --> 01:01:25.915
<v Speaker 1>here,

01:01:26.315 --> 01:01:26.795
<v Speaker 1>and

01:01:27.355 --> 01:01:29.515
<v Speaker 1>you don't have to actually manage any keys.

01:01:29.515 --> 01:01:31.355
<v Speaker 1>It's just if your application like, if your

01:01:31.355 --> 01:01:32.555
<v Speaker 1>function endpoint

01:01:33.579 --> 01:01:36.540
<v Speaker 1>is deployed at Wasm ID number one

01:01:36.859 --> 01:01:39.180
<v Speaker 1>and you put some data into that, it

01:01:39.180 --> 01:01:40.700
<v Speaker 1>will just persist. And then when you come

01:01:40.700 --> 01:01:42.140
<v Speaker 1>back like a year later and say, give

01:01:42.140 --> 01:01:43.660
<v Speaker 1>me back my data, it'll say, there you

01:01:43.660 --> 01:01:45.180
<v Speaker 1>go, and just give it straight back to

01:01:45.180 --> 01:01:46.220
<v Speaker 1>you. So it's

01:01:47.405 --> 01:01:48.605
<v Speaker 1>it's really

01:01:48.845 --> 01:01:51.005
<v Speaker 1>it's a fantastic solution to

01:01:51.245 --> 01:01:52.685
<v Speaker 1>persistence in

01:01:52.925 --> 01:01:55.405
<v Speaker 1>Rust WebAssembly tool chain. Does that make sense?

01:01:55.405 --> 01:01:57.325
<v Speaker 1>Am I explaining that? Yeah. Let me try

01:01:57.325 --> 01:01:59.005
<v Speaker 0>and summarize that back to you then. So

01:01:59.165 --> 01:02:01.750
<v Speaker 0>Sure. I am familiar with the fact that

01:02:01.750 --> 01:02:03.270
<v Speaker 0>WebAssembly only speaks

01:02:04.470 --> 01:02:06.390
<v Speaker 0>arrays of bytes, alright? So you've got to

01:02:06.390 --> 01:02:09.430
<v Speaker 0>run that problem by providing a serialization layer

01:02:09.430 --> 01:02:11.030
<v Speaker 0>that actually allows you to work with native

01:02:11.030 --> 01:02:13.750
<v Speaker 0>rust objects and types and then SSVM

01:02:13.750 --> 01:02:14.710
<v Speaker 0>handles the translation.

01:02:15.355 --> 01:02:17.595
<v Speaker 0>What's really cool though is that you're handling

01:02:17.595 --> 01:02:20.395
<v Speaker 0>or providing persistence across runs

01:02:20.635 --> 01:02:22.475
<v Speaker 0>by just allowing the

01:02:22.555 --> 01:02:25.275
<v Speaker 0>programmer to use environment variables.

01:02:25.435 --> 01:02:27.515
<v Speaker 0>And then the SSVM is actually gonna say,

01:02:27.515 --> 01:02:29.115
<v Speaker 0>oh, there's a new environment variable in this

01:02:29.115 --> 01:02:31.650
<v Speaker 0>execution, I'm gonna go store it somewhere. And

01:02:31.650 --> 01:02:33.410
<v Speaker 0>then the next time they come back, that

01:02:33.410 --> 01:02:35.730
<v Speaker 0>was an ID allows that state to be

01:02:35.730 --> 01:02:38.130
<v Speaker 0>then pulled back and from whatever storage back

01:02:38.130 --> 01:02:39.570
<v Speaker 0>end has been provided. Again,

01:02:40.369 --> 01:02:42.210
<v Speaker 0>by just saying here, there's an environment variable

01:02:42.210 --> 01:02:43.955
<v Speaker 0>that's available to you. They don't have to

01:02:43.955 --> 01:02:45.315
<v Speaker 0>worry about fails. They don't have to worry

01:02:45.315 --> 01:02:47.875
<v Speaker 0>about anything like that. It's just really simple.

01:02:47.875 --> 01:02:48.355
<v Speaker 1>Exactly.

01:02:49.315 --> 01:02:50.915
<v Speaker 1>Very convenient. Now you don't have worry about

01:02:50.915 --> 01:02:52.595
<v Speaker 1>databases or anything like that.

01:02:52.915 --> 01:02:54.675
<v Speaker 1>Yeah. That's exactly right. So the

01:02:55.075 --> 01:02:56.195
<v Speaker 1>the VM

01:02:56.675 --> 01:02:59.710
<v Speaker 1>disappears. It's done. It's gone. When you call

01:02:59.710 --> 01:03:02.510
<v Speaker 1>that function again, a new VM comes up.

01:03:02.510 --> 01:03:05.150
<v Speaker 1>It's spawned out of nowhere. However, it says,

01:03:05.150 --> 01:03:06.670
<v Speaker 1>oh, you've got some data here.

01:03:07.310 --> 01:03:09.790
<v Speaker 1>Would you like it? Are those keys mutable

01:03:09.790 --> 01:03:11.710
<v Speaker 0>over time? I can modify them in any

01:03:11.710 --> 01:03:12.110
<v Speaker 0>execution?

01:03:13.405 --> 01:03:15.645
<v Speaker 1>There is two modes. So the top one

01:03:15.645 --> 01:03:16.205
<v Speaker 1>is

01:03:18.285 --> 01:03:19.005
<v Speaker 1>mutable,

01:03:19.565 --> 01:03:22.525
<v Speaker 1>and the bottom examples are immutable.

01:03:22.845 --> 01:03:24.525
<v Speaker 1>So the the top we can do it.

01:03:24.525 --> 01:03:25.805
<v Speaker 1>Do wanna do you wanna call this?

01:03:27.050 --> 01:03:27.690
<v Speaker 0>Yes.

01:03:28.010 --> 01:03:30.250
<v Speaker 0>Let's do it. Cool. Yeah. So if we

01:03:30.250 --> 01:03:31.210
<v Speaker 1>go to

01:03:31.930 --> 01:03:32.730
<v Speaker 1>the

01:03:32.970 --> 01:03:35.450
<v Speaker 1>GitHub page, which has the so the the

01:03:35.450 --> 01:03:37.370
<v Speaker 1>Wasm learning Hello Storage,

01:03:38.250 --> 01:03:40.090
<v Speaker 1>I think there's some, like, cool commands in

01:03:40.090 --> 01:03:41.930
<v Speaker 1>there. We can actually we can actually use

01:03:41.930 --> 01:03:43.345
<v Speaker 1>this. Yes. So

01:03:43.745 --> 01:03:45.185
<v Speaker 0>And we can we can definitely do this

01:03:45.185 --> 01:03:46.625
<v Speaker 1>in half an hour. We could, like, we

01:03:46.625 --> 01:03:48.145
<v Speaker 1>can do all this. So

01:03:49.825 --> 01:03:52.065
<v Speaker 0>Second State while I'm learning.

01:03:52.545 --> 01:03:55.185
<v Speaker 0>Yep. So Vignesh has said it's kinda like

01:03:55.185 --> 01:03:56.545
<v Speaker 0>Cloudflare workers.

01:03:58.040 --> 01:04:00.520
<v Speaker 0>Not actually familiar with Cloudflare workers, to be

01:04:00.520 --> 01:04:01.080
<v Speaker 0>honest.

01:04:04.040 --> 01:04:04.600
<v Speaker 0>Hello

01:04:05.880 --> 01:04:07.000
<v Speaker 0>story. There

01:04:07.640 --> 01:04:08.280
<v Speaker 0>we go.

01:04:10.520 --> 01:04:10.600
<v Speaker 0>Yeah.

01:04:12.135 --> 01:04:12.855
<v Speaker 1>Yeah.

01:04:16.295 --> 01:04:18.615
<v Speaker 0>Okay. So let's build it.

01:04:19.655 --> 01:04:20.295
<v Speaker 1>Yeah.

01:04:22.375 --> 01:04:23.335
<v Speaker 0>Storage

01:04:23.895 --> 01:04:24.855
<v Speaker 0>manager.

01:04:25.175 --> 01:04:27.655
<v Speaker 0>And then recur less with our ID.

01:04:28.430 --> 01:04:30.590
<v Speaker 1>Uh-huh. Oh no, that's a deploy. Okay. Got

01:04:30.590 --> 01:04:31.150
<v Speaker 0>it.

01:04:31.710 --> 01:04:32.430
<v Speaker 1>Yep.

01:04:35.310 --> 01:04:37.390
<v Speaker 0>We'll just give Rusty a couple of couple

01:04:37.390 --> 01:04:38.830
<v Speaker 0>of hours of catch up.

01:04:39.230 --> 01:04:39.630
<v Speaker 1>Yeah.

01:04:40.765 --> 01:04:43.005
<v Speaker 1>So what's actually piloting that storage on the

01:04:43.005 --> 01:04:44.125
<v Speaker 0>on the back end?

01:04:44.925 --> 01:04:47.885
<v Speaker 1>Rocks DB. Rocks DB. Nice. Yeah.

01:04:53.165 --> 01:04:54.285
<v Speaker 1>And we just

01:04:57.750 --> 01:04:58.550
<v Speaker 1>transacting

01:04:58.630 --> 01:04:59.910
<v Speaker 1>back and forth,

01:05:00.630 --> 01:05:02.630
<v Speaker 1>in its native,

01:05:04.470 --> 01:05:06.710
<v Speaker 1>binary format. So we're not converting anything to

01:05:06.710 --> 01:05:10.075
<v Speaker 1>strings or doing any, like, cumbersome conversions. We

01:05:10.075 --> 01:05:11.995
<v Speaker 1>just take the high level thing, we serialize

01:05:11.995 --> 01:05:14.235
<v Speaker 1>it and just pump it straight into rocks.

01:05:14.235 --> 01:05:16.475
<v Speaker 1>And rocks takes whatever you give it. So

01:05:16.635 --> 01:05:18.075
<v Speaker 1>And wanna just just

01:05:18.395 --> 01:05:19.755
<v Speaker 1>hands it back. I

01:05:20.475 --> 01:05:22.315
<v Speaker 0>wanted to store like a, you know, like

01:05:22.315 --> 01:05:24.075
<v Speaker 0>an image, would I have to base encode

01:05:24.075 --> 01:05:25.510
<v Speaker 0>that first or is that something that would

01:05:25.510 --> 01:05:27.029
<v Speaker 0>be handled?

01:05:27.029 --> 01:05:27.830
<v Speaker 1>I know you

01:05:28.549 --> 01:05:30.630
<v Speaker 1>just would you

01:05:32.549 --> 01:05:34.309
<v Speaker 1>would just send it as raw bytes and

01:05:34.309 --> 01:05:35.990
<v Speaker 1>Rawkode would just take it as raw bytes

01:05:35.990 --> 01:05:36.869
<v Speaker 1>and just say thanks.

01:05:37.835 --> 01:05:38.234
<v Speaker 1>The

01:05:38.795 --> 01:05:40.395
<v Speaker 1>if you wanna have a a real quick

01:05:40.395 --> 01:05:42.315
<v Speaker 1>look, I I wrote a

01:05:42.555 --> 01:05:45.994
<v Speaker 1>piece of software which makes this possible. Sorry.

01:05:45.994 --> 01:05:47.035
<v Speaker 1>I'm interrupting now. Maybe.

01:05:49.940 --> 01:05:52.420
<v Speaker 1>Back in that Rawkode links, there's a

01:05:53.700 --> 01:05:54.740
<v Speaker 1>there's a

01:06:00.099 --> 01:06:02.099
<v Speaker 1>down a bit, I think.

01:06:03.825 --> 01:06:06.225
<v Speaker 1>Oh, yeah. The serialized, deserialized,

01:06:06.225 --> 01:06:07.185
<v Speaker 1>the crate.

01:06:09.025 --> 01:06:09.985
<v Speaker 1>So that's

01:06:10.225 --> 01:06:11.265
<v Speaker 1>basically what

01:06:12.545 --> 01:06:14.865
<v Speaker 1>because you know how you can serialize anything

01:06:14.865 --> 01:06:15.665
<v Speaker 1>to, like,

01:06:16.500 --> 01:06:17.300
<v Speaker 1>UA.

01:06:17.780 --> 01:06:19.460
<v Speaker 1>Yeah. So you just get like a byte

01:06:19.460 --> 01:06:20.020
<v Speaker 1>array.

01:06:20.260 --> 01:06:22.340
<v Speaker 1>What this does is it takes that byte

01:06:22.340 --> 01:06:25.460
<v Speaker 1>array and it turns it into Wasm variables.

01:06:25.460 --> 01:06:27.620
<v Speaker 1>So a whole bunch of Wasm variables,

01:06:27.700 --> 01:06:28.660
<v Speaker 1>and it will safely

01:06:29.075 --> 01:06:31.235
<v Speaker 1>do that back and forth for you. So

01:06:31.235 --> 01:06:33.475
<v Speaker 1>that's what that's the, like, the link that

01:06:33.475 --> 01:06:34.915
<v Speaker 1>makes this possible

01:06:35.475 --> 01:06:37.315
<v Speaker 1>to to the Wasm VM. So the Wasm

01:06:37.315 --> 01:06:39.155
<v Speaker 1>VM says, oh, I understand that. Give me

01:06:39.155 --> 01:06:41.155
<v Speaker 1>all those I 30 twos I'm gonna do,

01:06:41.155 --> 01:06:42.915
<v Speaker 1>put them into RocksDB. Then when they come

01:06:42.915 --> 01:06:44.800
<v Speaker 1>back out again, it gives them back. And

01:06:44.800 --> 01:06:46.960
<v Speaker 1>then this part of it turns it back

01:06:46.960 --> 01:06:47.600
<v Speaker 1>into

01:06:48.000 --> 01:06:50.880
<v Speaker 1>the byte array, which then obviously the the

01:06:50.880 --> 01:06:51.680
<v Speaker 1>high level

01:06:52.000 --> 01:06:53.040
<v Speaker 1>can understand.

01:06:53.280 --> 01:06:54.720
<v Speaker 1>Like an image, you know, it says, oh,

01:06:54.720 --> 01:06:56.240
<v Speaker 1>I'm an image, you know, once you get

01:06:56.240 --> 01:06:58.559
<v Speaker 1>a display that. So there's like this middle

01:06:57.915 --> 01:06:59.435
<v Speaker 1>section that which is what you're looking at

01:06:59.435 --> 01:06:59.915
<v Speaker 1>now.

01:07:01.435 --> 01:07:02.155
<v Speaker 0>Okay.

01:07:02.315 --> 01:07:04.075
<v Speaker 0>So let me pop back to

01:07:06.635 --> 01:07:10.235
<v Speaker 0>okay. Got another question from Vignesh. What if

01:07:10.235 --> 01:07:12.635
<v Speaker 0>the value is larger than a

01:07:12.795 --> 01:07:13.355
<v Speaker 0>gigabyte?

01:07:14.660 --> 01:07:17.220
<v Speaker 1>It it does up to four gigabytes

01:07:17.299 --> 01:07:20.019
<v Speaker 1>at the moment is the the storage limit

01:07:20.019 --> 01:07:21.300
<v Speaker 1>is four gig. Yeah.

01:07:22.180 --> 01:07:25.140
<v Speaker 0>That's quite generous up to four gig. Yeah.

01:07:25.380 --> 01:07:28.015
<v Speaker 1>Yeah. Alright. We got our ID, so now

01:07:28.015 --> 01:07:29.295
<v Speaker 0>I can store

01:07:29.695 --> 01:07:32.415
<v Speaker 0>a string inside of this. Yeah. So our

01:07:32.415 --> 01:07:33.455
<v Speaker 0>ID is 32 Yeah.

01:07:36.335 --> 01:07:38.015
<v Speaker 0>So let's store

01:07:39.610 --> 01:07:40.410
<v Speaker 0>Hello,

01:07:40.810 --> 01:07:41.370
<v Speaker 0>everyone.

01:07:42.010 --> 01:07:43.690
<v Speaker 0>And I always like to throw emojis into

01:07:43.690 --> 01:07:45.530
<v Speaker 0>the mix here. So let's get a Nice.

01:07:45.530 --> 01:07:47.690
<v Speaker 0>Let's put in the meeting. There we go.

01:07:47.770 --> 01:07:49.210
<v Speaker 0>My chairman doesn't like it.

01:07:49.930 --> 01:07:50.650
<v Speaker 0>Okay.

01:07:52.490 --> 01:07:53.770
<v Speaker 0>And 328.

01:07:54.665 --> 01:07:55.385
<v Speaker 0>Okay.

01:07:58.505 --> 01:07:59.225
<v Speaker 1>Done.

01:08:00.585 --> 01:08:01.385
<v Speaker 1>Cool.

01:08:01.785 --> 01:08:02.505
<v Speaker 1>Okay.

01:08:03.065 --> 01:08:04.345
<v Speaker 1>Now interestingly correct.

01:08:06.770 --> 01:08:08.930
<v Speaker 1>Now that's the mutable,

01:08:10.690 --> 01:08:13.410
<v Speaker 1>so if you do another one, it'll give

01:08:13.410 --> 01:08:15.089
<v Speaker 1>you back a different key. And now you

01:08:15.089 --> 01:08:17.170
<v Speaker 1>can have this whole array of like, if

01:08:17.170 --> 01:08:19.090
<v Speaker 1>you're doing this programmatically, you can store all

01:08:19.090 --> 01:08:20.449
<v Speaker 1>these in an array and have all this

01:08:20.449 --> 01:08:21.969
<v Speaker 1>data that you can call by keys,

01:08:22.625 --> 01:08:24.705
<v Speaker 1>and they'll all they'll refresh the keys for

01:08:24.705 --> 01:08:26.944
<v Speaker 1>you. And and you can update the data

01:08:26.944 --> 01:08:27.904
<v Speaker 1>at a key,

01:08:28.545 --> 01:08:30.625
<v Speaker 1>but you can also generate new keys and

01:08:30.625 --> 01:08:33.185
<v Speaker 1>things like that. So this is one modality.

01:08:35.500 --> 01:08:37.340
<v Speaker 1>And so this isn't using

01:08:37.500 --> 01:08:38.219
<v Speaker 1>these

01:08:41.500 --> 01:08:42.219
<v Speaker 0>Sorry?

01:08:43.180 --> 01:08:45.500
<v Speaker 1>Yep. So I guess I guess I'll I'll

01:08:45.500 --> 01:08:48.540
<v Speaker 1>let you do the Alright. Okay. The demo.

01:08:48.540 --> 01:08:50.060
<v Speaker 1>Yeah. And then

01:08:53.274 --> 01:08:55.354
<v Speaker 0>I actually got the feedback, so that's good.

01:08:55.835 --> 01:08:56.635
<v Speaker 1>Nice.

01:08:57.435 --> 01:08:58.154
<v Speaker 1>Yep.

01:08:59.034 --> 01:09:01.034
<v Speaker 1>And so now if we do

01:09:01.354 --> 01:09:01.594
<v Speaker 1>the

01:09:02.210 --> 01:09:04.449
<v Speaker 1>standard end, like, if we scroll down, there's

01:09:04.449 --> 01:09:06.290
<v Speaker 1>a different demo. I'll just go to it

01:09:06.290 --> 01:09:08.050
<v Speaker 1>as well so I can see it.

01:09:09.649 --> 01:09:10.929
<v Speaker 1>Storage.

01:09:16.655 --> 01:09:18.175
<v Speaker 0>Okay. So we called

01:09:19.695 --> 01:09:22.335
<v Speaker 0>store a string, and now I can call

01:09:22.335 --> 01:09:24.495
<v Speaker 0>store a string via standard env.

01:09:24.895 --> 01:09:25.615
<v Speaker 0>Yeah.

01:09:25.695 --> 01:09:27.135
<v Speaker 0>Okay. So if I just

01:09:27.615 --> 01:09:28.415
<v Speaker 0>let's say,

01:09:29.960 --> 01:09:31.239
<v Speaker 0>change

01:09:32.679 --> 01:09:33.719
<v Speaker 0>this one.

01:09:34.760 --> 01:09:37.560
<v Speaker 1>Mhmm. What was it? Store a string via

01:09:37.560 --> 01:09:38.359
<v Speaker 0>standard. And

01:09:39.239 --> 01:09:42.040
<v Speaker 1>Via s t d yeah. Via underscore s

01:09:42.040 --> 01:09:44.585
<v Speaker 1>t d underscore e n v. Alright. And

01:09:44.585 --> 01:09:47.624
<v Speaker 0>then let's add another emoji. So hello.

01:09:47.705 --> 01:09:49.704
<v Speaker 0>And we'll in a wave.

01:09:50.665 --> 01:09:51.465
<v Speaker 1>Cool.

01:09:53.225 --> 01:09:54.905
<v Speaker 0>And we get a different ID. So this

01:09:54.905 --> 01:09:56.105
<v Speaker 0>is our wave theory.

01:09:57.090 --> 01:09:59.250
<v Speaker 1>Now you don't need to store that ID.

01:09:59.250 --> 01:10:01.890
<v Speaker 1>It just returned it because it could.

01:10:02.370 --> 01:10:03.650
<v Speaker 1>That will

01:10:03.810 --> 01:10:06.210
<v Speaker 1>always be the same because that's that WASM

01:10:06.210 --> 01:10:08.610
<v Speaker 1>ID standard and signature. That's

01:10:08.850 --> 01:10:11.170
<v Speaker 1>that's persistent. That's

01:10:12.094 --> 01:10:15.375
<v Speaker 1>immutable, essentially. That's Gotcha. Gotcha. Okay. Yeah. You

01:10:15.535 --> 01:10:17.135
<v Speaker 1>so you don't have to manage keys is

01:10:17.135 --> 01:10:18.894
<v Speaker 1>is essentially what's happening.

01:10:19.614 --> 01:10:20.255
<v Speaker 1>Yeah.

01:10:20.495 --> 01:10:22.175
<v Speaker 1>You can manage them, but you don't have

01:10:22.175 --> 01:10:23.614
<v Speaker 1>to. If you use standard end, but just

01:10:23.775 --> 01:10:25.500
<v Speaker 1>it's just there when the VM spawns. It's

01:10:25.579 --> 01:10:27.020
<v Speaker 1>your data is just sitting there waiting for

01:10:27.020 --> 01:10:28.619
<v Speaker 1>you. So does that mean if I take

01:10:28.619 --> 01:10:31.500
<v Speaker 0>off that parameter and just modify the function

01:10:31.500 --> 01:10:33.260
<v Speaker 0>call here, do I get that back?

01:10:35.020 --> 01:10:37.179
<v Speaker 1>Yeah. I'll just check if that'll work.

01:10:39.585 --> 01:10:40.545
<v Speaker 1>Hang on one sec.

01:10:42.065 --> 01:10:42.545
<v Speaker 1>So

01:10:43.585 --> 01:10:45.105
<v Speaker 1>load a string.

01:10:46.225 --> 01:10:46.864
<v Speaker 1>And

01:10:49.905 --> 01:10:50.864
<v Speaker 1>yes.

01:10:50.945 --> 01:10:52.705
<v Speaker 1>Oh, I beg your pardon. I'm in the

01:10:52.705 --> 01:10:56.379
<v Speaker 1>wrong spot. Load a string. Yes. Just do

01:10:56.380 --> 01:10:59.099
<v Speaker 1>just do no header either. Just nothing

01:10:59.340 --> 01:11:01.260
<v Speaker 1>because you're not actually putting anything in. So

01:11:01.260 --> 01:11:03.499
<v Speaker 1>just the post

01:11:03.980 --> 01:11:06.219
<v Speaker 1>and then stop after the function name, and

01:11:06.219 --> 01:11:06.860
<v Speaker 1>that should be

01:11:11.195 --> 01:11:12.715
<v Speaker 0>There we go. Yeah.

01:11:13.594 --> 01:11:14.795
<v Speaker 0>And you set that And you can put

01:11:14.795 --> 01:11:17.275
<v Speaker 1>anything in there, like a JSON object or

01:11:17.275 --> 01:11:19.675
<v Speaker 1>a image or a so that can be

01:11:19.675 --> 01:11:21.355
<v Speaker 1>like that function as a services

01:11:22.610 --> 01:11:24.210
<v Speaker 1>standard end storage.

01:11:24.690 --> 01:11:26.610
<v Speaker 1>You you might wanna pause, Jason. So when

01:11:26.610 --> 01:11:28.530
<v Speaker 1>it comes back out, you might wanna, like,

01:11:28.530 --> 01:11:30.290
<v Speaker 1>crack it open with cert and say, you

01:11:30.290 --> 01:11:32.130
<v Speaker 1>know, give me all the keys or whatever.

01:11:32.210 --> 01:11:33.969
<v Speaker 1>It doesn't have to be just text.

01:11:35.170 --> 01:11:36.994
<v Speaker 1>It could be a struct. But it's it's

01:11:36.994 --> 01:11:38.755
<v Speaker 0>not immutable because I think I just modified

01:11:38.755 --> 01:11:41.635
<v Speaker 0>it. But the the key is fixed. That's

01:11:41.635 --> 01:11:43.315
<v Speaker 0>what the value is there. I got it.

01:11:43.315 --> 01:11:45.635
<v Speaker 0>Okay. That makes sense. Yeah. Yeah. Right. Yeah.

01:11:45.954 --> 01:11:47.795
<v Speaker 1>So so you're not managing keys at all.

01:11:47.795 --> 01:11:49.474
<v Speaker 1>It just is. It just it's just some

01:11:49.474 --> 01:11:51.715
<v Speaker 1>data that you've got access to by standard.

01:11:51.715 --> 01:11:53.940
<v Speaker 1>Yeah. Yeah. That makes that makes sense. I

01:11:53.940 --> 01:11:55.540
<v Speaker 0>understand that now. So I can use that

01:11:55.540 --> 01:11:56.260
<v Speaker 0>function,

01:11:56.420 --> 01:11:58.500
<v Speaker 0>use the environment to store it. So whatever

01:11:58.500 --> 01:12:00.580
<v Speaker 0>calculation, whatever I need to process, and then

01:12:00.580 --> 01:12:01.780
<v Speaker 0>next time I call, I could pull it

01:12:01.780 --> 01:12:03.620
<v Speaker 0>out, pull it out as often as I

01:12:03.620 --> 01:12:04.179
<v Speaker 0>need.

01:12:04.500 --> 01:12:06.260
<v Speaker 0>Excellent. Yeah. Very cool. I like that.

01:12:07.385 --> 01:12:10.265
<v Speaker 1>We have another feature as well which

01:12:10.825 --> 01:12:12.505
<v Speaker 1>may or may not be useful. It's called

01:12:12.505 --> 01:12:13.865
<v Speaker 1>ephemeral storage,

01:12:14.345 --> 01:12:16.505
<v Speaker 1>and it's really easy to use. You don't

01:12:16.505 --> 01:12:18.265
<v Speaker 1>have to write any rust or do anything.

01:12:18.740 --> 01:12:20.580
<v Speaker 1>It's just an endpoint. If we go to

01:12:20.580 --> 01:12:20.980
<v Speaker 1>that,

01:12:21.780 --> 01:12:23.140
<v Speaker 1>jam packed API,

01:12:23.140 --> 01:12:24.739
<v Speaker 1>we can have a quick go of that.

01:12:25.700 --> 01:12:27.460
<v Speaker 1>And I'll just explain that in a bit

01:12:27.460 --> 01:12:29.940
<v Speaker 1>more detail about why it exists and

01:12:30.420 --> 01:12:32.100
<v Speaker 1>because storage is a big, I guess,

01:12:33.955 --> 01:12:35.715
<v Speaker 1>you know, given that the the

01:12:36.035 --> 01:12:38.355
<v Speaker 1>WebAssembly VM is stateless.

01:12:38.355 --> 01:12:39.074
<v Speaker 1>That's

01:12:40.035 --> 01:12:41.635
<v Speaker 1>so if we go down to

01:12:42.035 --> 01:12:43.155
<v Speaker 1>one of the

01:12:43.715 --> 01:12:45.715
<v Speaker 1>put I think it's a put request. I'll

01:12:45.715 --> 01:12:48.440
<v Speaker 1>just open mine up so we can see.

01:12:48.440 --> 01:12:49.960
<v Speaker 0>There's callbacks.

01:12:58.440 --> 01:13:01.515
<v Speaker 0>Ephemeral storage. There we go. Femoral storage. Yeah.

01:13:01.515 --> 01:13:03.275
<v Speaker 1>You got that. Okay. So

01:13:03.915 --> 01:13:04.795
<v Speaker 1>there is a

01:13:08.555 --> 01:13:10.475
<v Speaker 1>I think there might be one up from

01:13:10.475 --> 01:13:12.155
<v Speaker 1>that. It might be a post.

01:13:12.635 --> 01:13:14.235
<v Speaker 1>I just need to find it. Sorry. I'm

01:13:14.395 --> 01:13:16.010
<v Speaker 0>Yep. Post. There you go.

01:13:16.410 --> 01:13:18.730
<v Speaker 1>There's a post? Yeah. Okay. Oh, yeah. Cool.

01:13:18.730 --> 01:13:20.250
<v Speaker 1>So if you post

01:13:21.290 --> 01:13:23.610
<v Speaker 1>the raw data I guess you could just

01:13:24.090 --> 01:13:26.570
<v Speaker 1>do that, like, literally paste that in your

01:13:34.825 --> 01:13:36.905
<v Speaker 1>cool. So that's giving you back a key.

01:13:36.905 --> 01:13:38.585
<v Speaker 1>So if you now take that key and

01:13:38.585 --> 01:13:40.105
<v Speaker 1>do the next command

01:13:40.350 --> 01:13:42.510
<v Speaker 1>using by passing in that key now this

01:13:42.510 --> 01:13:44.670
<v Speaker 1>is just a as a rest endpoint. You're

01:13:44.670 --> 01:13:45.950
<v Speaker 1>just sort of putting the key on the

01:13:45.950 --> 01:13:48.270
<v Speaker 1>end of the URL. You're not actually doing

01:13:48.270 --> 01:13:50.110
<v Speaker 1>anything with complex

01:13:50.190 --> 01:13:51.710
<v Speaker 1>headers or bodies or anything.

01:13:57.775 --> 01:14:01.455
<v Speaker 0>Yep. What? Cool. And what'll happen if you

01:14:01.455 --> 01:14:02.895
<v Speaker 1>do nothing else,

01:14:03.295 --> 01:14:06.335
<v Speaker 1>that will disappear in exactly one hour.

01:14:06.575 --> 01:14:08.335
<v Speaker 1>But if you do anything to it, like

01:14:08.335 --> 01:14:09.455
<v Speaker 1>update it or

01:14:10.120 --> 01:14:12.360
<v Speaker 1>touch it or whatever, then it will persist.

01:14:12.920 --> 01:14:14.920
<v Speaker 1>So it's just like this additional feature which

01:14:14.920 --> 01:14:16.440
<v Speaker 1>is right up at the top of the

01:14:16.440 --> 01:14:17.240
<v Speaker 1>API

01:14:17.320 --> 01:14:20.360
<v Speaker 1>stack, if you will, and it's for IoT

01:14:20.360 --> 01:14:22.040
<v Speaker 1>devices and things like that. Like, if you've

01:14:22.040 --> 01:14:24.745
<v Speaker 1>got a temperature sensor that's just recording, like,

01:14:24.745 --> 01:14:26.265
<v Speaker 1>once per second, and you you kinda want

01:14:26.345 --> 01:14:28.344
<v Speaker 1>it's almost like cache, like buffering.

01:14:29.145 --> 01:14:31.305
<v Speaker 1>And then so you're not writing any rust

01:14:31.305 --> 01:14:33.145
<v Speaker 1>or doing any sort of low level stuff.

01:14:33.145 --> 01:14:34.825
<v Speaker 1>It's just right up at the at the

01:14:34.825 --> 01:14:35.625
<v Speaker 1>API

01:14:36.345 --> 01:14:37.385
<v Speaker 1>level. And then

01:14:38.130 --> 01:14:40.130
<v Speaker 1>you can use those keys to you you

01:14:40.130 --> 01:14:42.210
<v Speaker 1>might wanna consolidate a whole bunch of information

01:14:42.210 --> 01:14:43.970
<v Speaker 1>over the course of, like, thirty minutes and

01:14:43.970 --> 01:14:46.450
<v Speaker 1>then do something with that. It's just to

01:14:46.850 --> 01:14:47.810
<v Speaker 1>stop

01:14:47.810 --> 01:14:50.614
<v Speaker 1>the developer from having to write Rust to

01:14:50.614 --> 01:14:53.175
<v Speaker 1>do everything and deploy things, and it's just

01:14:53.175 --> 01:14:55.574
<v Speaker 1>like a high level convenience storage.

01:14:55.895 --> 01:14:57.415
<v Speaker 1>Yeah. Because of the fact that you would

01:14:57.574 --> 01:14:59.175
<v Speaker 1>we're dealing in a stateless environment, it sort

01:14:59.175 --> 01:15:00.534
<v Speaker 1>of makes it a bit trickier to

01:15:00.855 --> 01:15:01.815
<v Speaker 1>write an app. So

01:15:02.535 --> 01:15:05.094
<v Speaker 0>I I think those last two examples are

01:15:05.510 --> 01:15:07.430
<v Speaker 0>there's something really subtle there. Right? But I

01:15:07.430 --> 01:15:09.590
<v Speaker 0>wanna kinda call it out is that with

01:15:09.590 --> 01:15:10.310
<v Speaker 0>the storage

01:15:10.630 --> 01:15:12.710
<v Speaker 0>with the save and storing thing from the

01:15:12.710 --> 01:15:15.030
<v Speaker 0>first example and with this ephemeral storage that

01:15:15.030 --> 01:15:16.310
<v Speaker 0>has an error. I mean,

01:15:17.590 --> 01:15:19.945
<v Speaker 0>I essentially I could use these as a

01:15:19.945 --> 01:15:21.784
<v Speaker 0>database, a key value database.

01:15:21.785 --> 01:15:23.864
<v Speaker 0>And the latter one function very similar to

01:15:23.864 --> 01:15:25.625
<v Speaker 0>something like Redis with a time to live

01:15:25.625 --> 01:15:27.304
<v Speaker 0>on that cash value as well.

01:15:27.705 --> 01:15:29.785
<v Speaker 0>Even if I don't use any other of

01:15:29.785 --> 01:15:31.545
<v Speaker 0>the functions of the service, which is also

01:15:31.545 --> 01:15:32.985
<v Speaker 0>really cool, is that I have a key

01:15:32.985 --> 01:15:35.790
<v Speaker 0>value Redis available to me on Second State

01:15:35.790 --> 01:15:36.749
<v Speaker 0>Virtual Machine

01:15:37.150 --> 01:15:39.469
<v Speaker 0>for free Over the the rate limits. Yeah.

01:15:40.670 --> 01:15:42.590
<v Speaker 1>And and I guess the only catch is,

01:15:42.909 --> 01:15:44.670
<v Speaker 1>like, if you could guess that key, then

01:15:44.670 --> 01:15:46.270
<v Speaker 1>you could see the data, but that's gonna

01:15:46.270 --> 01:15:47.229
<v Speaker 1>be pretty tricky

01:15:47.630 --> 01:15:49.150
<v Speaker 1>because it's open. So

01:15:49.864 --> 01:15:51.385
<v Speaker 0>Yeah. I mean, I could I could use

01:15:51.785 --> 01:15:53.385
<v Speaker 0>I mean, I didn't have to use

01:15:54.105 --> 01:15:54.664
<v Speaker 0>the

01:15:55.385 --> 01:15:57.065
<v Speaker 0>I mean, it's a UID. It's like a

01:15:57.065 --> 01:15:59.785
<v Speaker 0>secure in a weird way, but it would

01:15:59.785 --> 01:16:01.945
<v Speaker 0>be great to start getting Well, I I

01:16:01.945 --> 01:16:03.545
<v Speaker 1>guess I guess you hit if someone was

01:16:03.545 --> 01:16:05.720
<v Speaker 1>trying to just brute force keys, they'd hit

01:16:05.720 --> 01:16:08.200
<v Speaker 1>the right limit. Right? So Well, yeah. I'm

01:16:08.200 --> 01:16:09.880
<v Speaker 0>not saying I would use this storage as

01:16:09.880 --> 01:16:12.040
<v Speaker 0>my, you know, one password replacement or anything

01:16:12.040 --> 01:16:13.320
<v Speaker 0>like that where I just think, oh, my

01:16:13.320 --> 01:16:16.120
<v Speaker 0>UUIDs can store my passwords. So Yeah. Yeah.

01:16:16.120 --> 01:16:17.560
<v Speaker 0>That that would be a cool hackathon project

01:16:17.560 --> 01:16:18.200
<v Speaker 0>actually.

01:16:19.000 --> 01:16:19.560
<v Speaker 1>Yeah. Yeah.

01:16:20.675 --> 01:16:22.835
<v Speaker 0>Alright. That's really cool. I like that.

01:16:23.795 --> 01:16:25.635
<v Speaker 0>I've covered so much. Like I could write

01:16:25.635 --> 01:16:27.955
<v Speaker 0>Rust code, compel it to Wasm and store

01:16:27.955 --> 01:16:30.595
<v Speaker 0>it and it's always available over an HTTP

01:16:30.595 --> 01:16:33.635
<v Speaker 0>endpoint. And then beyond that, you've already got

01:16:33.635 --> 01:16:35.790
<v Speaker 0>these pre canned functions which are deployed for

01:16:35.790 --> 01:16:38.349
<v Speaker 0>a femoral storage, and I can use persistent

01:16:38.349 --> 01:16:39.070
<v Speaker 0>storage.

01:16:39.389 --> 01:16:40.989
<v Speaker 0>Are there any guarantees

01:16:40.989 --> 01:16:43.869
<v Speaker 0>on the persistent storage for my application? Like,

01:16:43.869 --> 01:16:45.790
<v Speaker 0>could I or should I expect that to

01:16:45.790 --> 01:16:46.590
<v Speaker 0>disappear

01:16:46.829 --> 01:16:47.869
<v Speaker 0>at any point?

01:16:49.389 --> 01:16:49.790
<v Speaker 1>It's,

01:16:50.745 --> 01:16:51.945
<v Speaker 1>you know, technically,

01:16:51.945 --> 01:16:52.505
<v Speaker 1>it's

01:16:53.145 --> 01:16:54.585
<v Speaker 1>forever because

01:16:55.065 --> 01:16:57.705
<v Speaker 1>the system will run and continue to function,

01:16:57.785 --> 01:16:58.185
<v Speaker 1>and

01:16:59.465 --> 01:17:02.505
<v Speaker 1>the the information goes through into the RoxyB,

01:17:02.505 --> 01:17:03.625
<v Speaker 1>and it will be there when you come

01:17:03.625 --> 01:17:06.330
<v Speaker 1>back. That that's the the premise. You know?

01:17:06.330 --> 01:17:07.130
<v Speaker 1>That's the

01:17:08.650 --> 01:17:10.330
<v Speaker 1>all things being equal, it's

01:17:10.810 --> 01:17:13.690
<v Speaker 1>that that that functionality is intended. So yeah.

01:17:14.570 --> 01:17:17.370
<v Speaker 0>Okay. Just a random question. Who provides the

01:17:17.370 --> 01:17:19.824
<v Speaker 0>compute? Is this sponsored by Second State? Are

01:17:19.824 --> 01:17:20.704
<v Speaker 0>you providing

01:17:21.185 --> 01:17:23.264
<v Speaker 0>all the compute power here, or is this

01:17:23.264 --> 01:17:24.784
<v Speaker 0>where the blockchain comes in and other people

01:17:24.784 --> 01:17:27.025
<v Speaker 0>are providing compute? Is this distributed in the

01:17:27.025 --> 01:17:28.385
<v Speaker 0>back end? Do wanna give me a little

01:17:28.385 --> 01:17:30.945
<v Speaker 0>bit of information on that? So so that's

01:17:30.945 --> 01:17:34.699
<v Speaker 1>essentially the next step is to we've come

01:17:34.699 --> 01:17:35.739
<v Speaker 1>up with a

01:17:36.620 --> 01:17:38.059
<v Speaker 1>plan where

01:17:38.219 --> 01:17:39.739
<v Speaker 1>not only is it

01:17:40.860 --> 01:17:42.139
<v Speaker 1>feasible for

01:17:42.620 --> 01:17:44.860
<v Speaker 1>for us to host this because

01:17:45.660 --> 01:17:48.940
<v Speaker 1>we have this the statistics like the gas

01:17:48.795 --> 01:17:50.795
<v Speaker 1>and the metering and things like that.

01:17:51.835 --> 01:17:55.115
<v Speaker 1>Any app developers who wanna build upon this,

01:17:55.115 --> 01:17:56.235
<v Speaker 1>they can also

01:17:56.555 --> 01:17:58.555
<v Speaker 1>talk to their investors and say,

01:17:58.955 --> 01:18:00.315
<v Speaker 1>you know, I've written a few hundred lines

01:18:00.315 --> 01:18:02.315
<v Speaker 1>of Rust. Here's some HTML and some JavaScript.

01:18:02.460 --> 01:18:04.460
<v Speaker 1>Here's what it looks like, and here's what

01:18:04.460 --> 01:18:06.300
<v Speaker 1>the users would do to convert their menus

01:18:06.300 --> 01:18:08.620
<v Speaker 1>to English or whatever whatever usage

01:18:08.780 --> 01:18:10.940
<v Speaker 1>use case they have. And then, you know,

01:18:10.940 --> 01:18:12.620
<v Speaker 1>what's it gonna cost me? Says the investor.

01:18:12.620 --> 01:18:15.020
<v Speaker 1>Well, it'll cost you, you know, 2¢

01:18:15.420 --> 01:18:15.980
<v Speaker 1>per

01:18:16.245 --> 01:18:18.804
<v Speaker 1>or, you know, or 0 something cents per

01:18:18.804 --> 01:18:19.605
<v Speaker 1>use.

01:18:19.605 --> 01:18:20.485
<v Speaker 1>And so,

01:18:21.364 --> 01:18:23.364
<v Speaker 1>you know, if the if the application if

01:18:23.364 --> 01:18:25.844
<v Speaker 1>the web application users are paying a dollar

01:18:25.844 --> 01:18:27.284
<v Speaker 1>for the app or something, then you're gonna

01:18:27.284 --> 01:18:29.125
<v Speaker 1>cover those costs. So the the business model

01:18:29.125 --> 01:18:31.070
<v Speaker 1>is sound in that. We have a mechanism

01:18:31.070 --> 01:18:34.030
<v Speaker 1>to meter and charge in. But that's really

01:18:34.110 --> 01:18:36.749
<v Speaker 1>the implementation of that is coming.

01:18:36.909 --> 01:18:40.270
<v Speaker 1>We've built out as flexible infrastructure as possible

01:18:40.270 --> 01:18:42.030
<v Speaker 1>so that we can do stuff.

01:18:42.349 --> 01:18:44.349
<v Speaker 1>And the

01:18:43.655 --> 01:18:46.295
<v Speaker 1>machine learning and AI and all the TensorFlow,

01:18:47.015 --> 01:18:49.255
<v Speaker 1>and and the Rust components and,

01:18:49.975 --> 01:18:52.695
<v Speaker 1>all of that sort of those prototypes are

01:18:52.695 --> 01:18:54.454
<v Speaker 1>just trying to demonstrate that

01:18:54.855 --> 01:18:56.295
<v Speaker 1>you can build a lot of cool stuff

01:18:56.295 --> 01:18:57.575
<v Speaker 1>on this. It's kind of up to your

01:18:57.575 --> 01:19:00.030
<v Speaker 1>imagination really as to what you can build.

01:19:01.150 --> 01:19:03.550
<v Speaker 1>I've tried to write articles and, you know,

01:19:03.550 --> 01:19:05.230
<v Speaker 1>like, anecdote. I'm like, that's cool. I could

01:19:05.230 --> 01:19:06.669
<v Speaker 1>do that. That that's easy.

01:19:06.830 --> 01:19:08.590
<v Speaker 1>But you could come up with some really

01:19:08.590 --> 01:19:10.670
<v Speaker 1>nifty stuff and build it out in, like,

01:19:10.670 --> 01:19:12.585
<v Speaker 1>no time, and and it would be fairly

01:19:12.585 --> 01:19:14.265
<v Speaker 1>cheap to run. Yeah. There's no doubt that

01:19:14.265 --> 01:19:15.784
<v Speaker 1>the WebAssembly VM's

01:19:15.945 --> 01:19:18.265
<v Speaker 1>very powerful. Oh, probably the most important thing

01:19:18.265 --> 01:19:19.385
<v Speaker 1>I should mention

01:19:19.545 --> 01:19:20.185
<v Speaker 1>is

01:19:20.425 --> 01:19:21.545
<v Speaker 1>we're not running

01:19:21.785 --> 01:19:23.545
<v Speaker 1>just in time compiled

01:19:23.545 --> 01:19:24.665
<v Speaker 1>the native WebAssembly

01:19:25.380 --> 01:19:27.380
<v Speaker 1>executable that gets uploaded,

01:19:27.700 --> 01:19:28.580
<v Speaker 1>we actually

01:19:28.740 --> 01:19:30.420
<v Speaker 1>our developers have

01:19:31.620 --> 01:19:33.460
<v Speaker 1>written so we actually convert that to a

01:19:33.460 --> 01:19:35.380
<v Speaker 1>o t compile, which is why it's so

01:19:35.380 --> 01:19:38.180
<v Speaker 1>fast. And there's an article just published,

01:19:38.745 --> 01:19:40.185
<v Speaker 1>which I can send you, and and you

01:19:40.185 --> 01:19:42.265
<v Speaker 1>can link to that about the benchmarking

01:19:42.265 --> 01:19:44.105
<v Speaker 1>between the Second State

01:19:44.345 --> 01:19:45.465
<v Speaker 1>WasmVM

01:19:45.465 --> 01:19:48.265
<v Speaker 1>and the other runtimes and the other VMs.

01:19:48.585 --> 01:19:50.985
<v Speaker 1>And our IoT compiling

01:19:51.640 --> 01:19:52.520
<v Speaker 1>component

01:19:52.520 --> 01:19:55.400
<v Speaker 1>means that our stack like, our execution is

01:19:55.480 --> 01:19:58.520
<v Speaker 1>blisteringly fast. So the the the latency across

01:19:58.520 --> 01:20:00.280
<v Speaker 1>the network is really the the biggest thing

01:20:00.280 --> 01:20:01.400
<v Speaker 1>that we're seeing.

01:20:01.800 --> 01:20:03.960
<v Speaker 1>And the other the other cool part about

01:20:03.960 --> 01:20:06.514
<v Speaker 1>this, the SSVM up tool

01:20:07.395 --> 01:20:10.195
<v Speaker 1>is basically, it's based on Wasmpec,

01:20:10.275 --> 01:20:12.995
<v Speaker 1>but we're not just writing this for, like,

01:20:12.995 --> 01:20:15.475
<v Speaker 1>the web or for the for the browser.

01:20:15.475 --> 01:20:17.475
<v Speaker 1>We're taking this onto the server side. So

01:20:17.475 --> 01:20:18.675
<v Speaker 1>you can do all of this

01:20:19.590 --> 01:20:20.870
<v Speaker 1>on the server

01:20:20.950 --> 01:20:23.030
<v Speaker 1>as well, like, even in the command line.

01:20:23.030 --> 01:20:25.190
<v Speaker 1>So no API, no web. Just if you

01:20:25.190 --> 01:20:27.429
<v Speaker 1>have, like, a factory or some sort of

01:20:27.590 --> 01:20:28.310
<v Speaker 1>closed

01:20:28.870 --> 01:20:31.190
<v Speaker 1>environment where you just want really powerful

01:20:31.590 --> 01:20:32.550
<v Speaker 1>execution,

01:20:32.550 --> 01:20:33.670
<v Speaker 1>you can just do that

01:20:34.235 --> 01:20:36.795
<v Speaker 1>on like, directly on the server by installing

01:20:36.795 --> 01:20:39.115
<v Speaker 1>the SSVM on on that machine and and

01:20:39.115 --> 01:20:40.795
<v Speaker 1>executing that. We're trying to cover off all

01:20:40.795 --> 01:20:43.595
<v Speaker 1>the different areas. This open API is essentially

01:20:43.595 --> 01:20:44.315
<v Speaker 1>giving

01:20:44.475 --> 01:20:46.475
<v Speaker 1>end users access to the

01:20:47.035 --> 01:20:49.500
<v Speaker 1>back end through the open web. But you

01:20:49.500 --> 01:20:51.659
<v Speaker 1>can you can run this stuff just straight

01:20:51.659 --> 01:20:53.260
<v Speaker 1>out on the on the server if you

01:20:53.260 --> 01:20:55.179
<v Speaker 1>want. Like, literally command line and pass in

01:20:55.179 --> 01:20:56.300
<v Speaker 1>a big file and

01:20:56.940 --> 01:20:58.619
<v Speaker 1>do whatever you want

01:20:59.099 --> 01:20:59.899
<v Speaker 1>to it.

01:21:00.460 --> 01:21:03.345
<v Speaker 0>Awesome. I mean, there's just so much flexibility

01:21:03.345 --> 01:21:05.425
<v Speaker 0>and options to the way I interact, engage

01:21:05.425 --> 01:21:07.825
<v Speaker 0>and kind of compose these things together. Like

01:21:07.825 --> 01:21:09.425
<v Speaker 0>you you can do a lot with this.

01:21:09.505 --> 01:21:11.905
<v Speaker 0>Is Yeah. Is there anything that you wanna

01:21:11.905 --> 01:21:13.745
<v Speaker 0>show before we finish up for today? Is

01:21:13.745 --> 01:21:15.105
<v Speaker 0>there anything that we've missed that you'd like

01:21:15.105 --> 01:21:15.345
<v Speaker 0>to?

01:21:25.130 --> 01:21:27.450
<v Speaker 1>I don't think so. I think that's that's

01:21:27.450 --> 01:21:28.170
<v Speaker 1>a fairly good

01:21:28.810 --> 01:21:30.730
<v Speaker 1>yeah. We've done remote fetching and we've done

01:21:30.730 --> 01:21:33.335
<v Speaker 1>storage and yeah. I think that's that's a

01:21:33.335 --> 01:21:33.815
<v Speaker 1>good

01:21:34.695 --> 01:21:35.735
<v Speaker 0>Yeah. We we've

01:21:36.455 --> 01:21:38.614
<v Speaker 0>a lot. I mean, we we had some

01:21:38.614 --> 01:21:39.414
<v Speaker 0>Rust code.

01:21:39.975 --> 01:21:43.655
<v Speaker 0>We built it. We deployed it. We upgraded

01:21:43.655 --> 01:21:47.175
<v Speaker 0>it. We then interacted with it through really

01:21:46.830 --> 01:21:49.390
<v Speaker 0>simple HTML with a little bit of JavaScript.

01:21:49.710 --> 01:21:52.190
<v Speaker 0>We covered the semantics around how the inputs

01:21:52.190 --> 01:21:54.670
<v Speaker 0>with the numbers work. We covered fetching.

01:21:55.390 --> 01:21:56.910
<v Speaker 0>There's just so much there. And then at

01:21:56.910 --> 01:21:59.150
<v Speaker 0>the state, the ephemeral storage interacting with the

01:21:59.150 --> 01:22:01.310
<v Speaker 0>environment. So much good And there for people.

01:22:01.515 --> 01:22:04.955
<v Speaker 1>And we covered the, security aspect. So it

01:22:04.955 --> 01:22:06.715
<v Speaker 1>can be a private function,

01:22:07.115 --> 01:22:08.395
<v Speaker 1>or you can open it up, have it

01:22:08.395 --> 01:22:10.315
<v Speaker 1>public, but you can choose to toggle between

01:22:10.315 --> 01:22:12.635
<v Speaker 1>those two with just a simple request.

01:22:13.115 --> 01:22:13.595
<v Speaker 1>So

01:22:13.929 --> 01:22:15.369
<v Speaker 1>that's that's a big part of it, I

01:22:15.369 --> 01:22:16.809
<v Speaker 1>think, too, is Yeah.

01:22:17.289 --> 01:22:20.249
<v Speaker 1>I think code reuse is interesting because,

01:22:20.730 --> 01:22:23.369
<v Speaker 1>you know, the DRIP principle and KISS principle

01:22:23.369 --> 01:22:25.050
<v Speaker 1>and all these things that you learn.

01:22:25.449 --> 01:22:28.249
<v Speaker 1>We really we really shouldn't have to write,

01:22:28.809 --> 01:22:31.585
<v Speaker 1>like, a basic example, like, you know, Fahrenheit

01:22:31.585 --> 01:22:33.585
<v Speaker 1>to Celsius or something. That should only probably

01:22:33.585 --> 01:22:35.185
<v Speaker 1>exist in one place. Right?

01:22:35.665 --> 01:22:37.425
<v Speaker 1>Or any sort of decent

01:22:37.505 --> 01:22:38.305
<v Speaker 1>function

01:22:38.465 --> 01:22:41.505
<v Speaker 1>that exists. It'd be amazing if instead of

01:22:41.505 --> 01:22:43.345
<v Speaker 1>people writing that separately,

01:22:44.080 --> 01:22:45.760
<v Speaker 1>if it was in here and someone could

01:22:45.760 --> 01:22:46.880
<v Speaker 1>improve on it, they could come and have

01:22:46.880 --> 01:22:48.800
<v Speaker 1>a look at the Rust source code, make

01:22:48.800 --> 01:22:50.960
<v Speaker 1>a change, improve it, prove that it's more

01:22:50.960 --> 01:22:52.560
<v Speaker 1>efficient or whatever, and then

01:22:52.880 --> 01:22:54.720
<v Speaker 1>get approval to update it. That was my

01:22:54.720 --> 01:22:56.640
<v Speaker 1>idea, and then that's like your superior

01:22:58.295 --> 01:23:00.455
<v Speaker 1>function for that purpose in the world. And

01:23:00.455 --> 01:23:02.695
<v Speaker 1>and but that's not reality, is it?

01:23:03.655 --> 01:23:05.415
<v Speaker 0>I've got a a really cool hack project

01:23:05.415 --> 01:23:06.855
<v Speaker 0>for us to maybe work on if we

01:23:06.855 --> 01:23:08.375
<v Speaker 0>if we have the time where I I'd

01:23:08.375 --> 01:23:09.975
<v Speaker 0>really love to see like, can I add

01:23:09.975 --> 01:23:12.650
<v Speaker 0>arbitrary headers to my function deployment, like as

01:23:12.650 --> 01:23:13.449
<v Speaker 0>metadata?

01:23:15.449 --> 01:23:18.409
<v Speaker 1>To the rust or to the Yeah. So

01:23:18.409 --> 01:23:19.689
<v Speaker 0>if I write a function

01:23:20.889 --> 01:23:23.050
<v Speaker 0>Yeah. Can I just scrape that to Second

01:23:23.050 --> 01:23:25.094
<v Speaker 0>State somehow? Can I like if I wanted

01:23:25.094 --> 01:23:27.335
<v Speaker 0>to add an intent header, SSVM

01:23:27.335 --> 01:23:29.894
<v Speaker 0>underscore intent, it says resize these images? And

01:23:30.215 --> 01:23:32.934
<v Speaker 0>then could I then provide a function which

01:23:32.934 --> 01:23:34.135
<v Speaker 0>discovery

01:23:34.135 --> 01:23:36.614
<v Speaker 0>via that metadata to actually build out that

01:23:36.614 --> 01:23:38.295
<v Speaker 0>intent system on Second State? I think that

01:23:38.295 --> 01:23:39.014
<v Speaker 0>would be really

01:23:39.739 --> 01:23:40.619
<v Speaker 1>Yeah. Yeah.

01:23:41.020 --> 01:23:43.100
<v Speaker 1>Absolutely. We could definitely accommodate that. And I

01:23:43.100 --> 01:23:44.460
<v Speaker 1>think it it'd be great if you had

01:23:44.460 --> 01:23:46.940
<v Speaker 1>a place where you could go to shop

01:23:46.940 --> 01:23:49.260
<v Speaker 1>for functions or functionality and

01:23:49.500 --> 01:23:51.020
<v Speaker 1>and then you could, like, rate it. You

01:23:51.020 --> 01:23:51.900
<v Speaker 1>know, this is the best

01:23:52.665 --> 01:23:55.385
<v Speaker 1>temperature conversion function because of whatever reason. And,

01:23:55.385 --> 01:23:56.985
<v Speaker 1>you know, you're sort of, like, building up

01:23:56.985 --> 01:23:57.225
<v Speaker 1>a

01:23:57.785 --> 01:23:58.824
<v Speaker 1>what would you call it?

01:24:00.345 --> 01:24:02.585
<v Speaker 1>What's that restaurant app where you Yelp or

01:24:02.585 --> 01:24:04.185
<v Speaker 1>something? Yeah. Yeah. Yeah. Yep. Yep.

01:24:05.520 --> 01:24:07.840
<v Speaker 1>That would be brilliant. You can be shopping

01:24:07.840 --> 01:24:09.440
<v Speaker 1>for a function. You know? What's what's the

01:24:09.440 --> 01:24:11.840
<v Speaker 1>best OCR function? Test it out. Yeah. That

01:24:11.840 --> 01:24:12.400
<v Speaker 1>works.

01:24:12.880 --> 01:24:14.720
<v Speaker 1>Plug it into your app and then give

01:24:14.720 --> 01:24:16.480
<v Speaker 1>it five stars and yeah. I I think

01:24:16.480 --> 01:24:18.400
<v Speaker 0>me as a as a developer, right, especially

01:24:18.400 --> 01:24:20.080
<v Speaker 0>if I'm leveraging a platform like this, and

01:24:20.080 --> 01:24:21.295
<v Speaker 0>I say, oh, I really wish I could

01:24:21.295 --> 01:24:23.295
<v Speaker 0>translate this from English to French and I

01:24:23.295 --> 01:24:25.375
<v Speaker 0>I shouldn't have to write that again. Other

01:24:25.375 --> 01:24:27.135
<v Speaker 0>people have done it, they should expose it

01:24:27.135 --> 01:24:29.934
<v Speaker 0>as a translator with languages that they support

01:24:30.014 --> 01:24:31.934
<v Speaker 0>and then I just call it and I

01:24:31.934 --> 01:24:33.375
<v Speaker 0>can pick what I like or I could

01:24:33.375 --> 01:24:35.295
<v Speaker 0>just tell the intent system, hey, I wanna

01:24:35.295 --> 01:24:36.894
<v Speaker 0>translate. Don't really care which one you use.

01:24:37.110 --> 01:24:37.989
<v Speaker 0>To and like

01:24:38.630 --> 01:24:40.630
<v Speaker 0>lots there. Not gonna try

01:24:40.630 --> 01:24:42.469
<v Speaker 0>and drag us into a different conversation right

01:24:42.469 --> 01:24:44.869
<v Speaker 0>now, I think we should continue this offline

01:24:44.869 --> 01:24:47.110
<v Speaker 0>at some point. We do have one more

01:24:47.110 --> 01:24:49.429
<v Speaker 0>question from our audience. Fagnes is back again.

01:24:49.429 --> 01:24:51.030
<v Speaker 0>Thank you, man for the questions. Keep them

01:24:51.030 --> 01:24:54.095
<v Speaker 0>coming. Is the function deployed globally? So, you

01:24:54.095 --> 01:24:56.095
<v Speaker 0>know, I'm in Scotland right now. Where where

01:24:56.095 --> 01:24:57.775
<v Speaker 0>is this being served from? Because the latency

01:24:57.775 --> 01:24:59.775
<v Speaker 0>has been quite good, actually.

01:25:00.735 --> 01:25:02.895
<v Speaker 1>Yes. It is deployed globally.

01:25:02.895 --> 01:25:03.535
<v Speaker 1>Yes.

01:25:04.255 --> 01:25:06.930
<v Speaker 1>And at the moment, we're just running this

01:25:06.930 --> 01:25:09.250
<v Speaker 1>from The United States. And so me calling

01:25:09.250 --> 01:25:11.970
<v Speaker 1>it from Australia, I generally find it's you

01:25:11.970 --> 01:25:14.130
<v Speaker 1>know, when we take talking millisecond execution on

01:25:14.130 --> 01:25:16.690
<v Speaker 1>the VM, I I'm finding, a second to

01:25:16.690 --> 01:25:18.745
<v Speaker 1>me seems like a long time. But when

01:25:18.745 --> 01:25:20.345
<v Speaker 1>I but when I deploy it in Sydney,

01:25:20.345 --> 01:25:22.105
<v Speaker 1>it's super fast for me. So it's it's

01:25:22.105 --> 01:25:24.105
<v Speaker 1>really the latency. But, yeah, it is global.

01:25:24.105 --> 01:25:25.304
<v Speaker 1>Yeah. And

01:25:25.625 --> 01:25:27.945
<v Speaker 1>we're setting up another server,

01:25:29.065 --> 01:25:31.465
<v Speaker 1>another lot of infrastructure at the moment, which

01:25:31.465 --> 01:25:34.050
<v Speaker 1>I'm gonna do, which is inside China. So

01:25:34.050 --> 01:25:36.210
<v Speaker 1>that's just doing it on a different platform.

01:25:36.770 --> 01:25:37.410
<v Speaker 1>Yeah. So

01:25:38.050 --> 01:25:38.850
<v Speaker 0>Awesome.

01:25:39.730 --> 01:25:40.850
<v Speaker 0>Alright. Well,

01:25:41.330 --> 01:25:43.650
<v Speaker 0>that was really great. I really loved learning

01:25:43.650 --> 01:25:45.650
<v Speaker 0>about Second State, and I can see so

01:25:45.650 --> 01:25:47.650
<v Speaker 0>much potential and how other people can leverage

01:25:47.650 --> 01:25:49.824
<v Speaker 0>it and and use it. And I I

01:25:49.824 --> 01:25:51.025
<v Speaker 0>can't wait to kick the tires on it

01:25:51.025 --> 01:25:53.344
<v Speaker 0>a little bit more. Do you have any

01:25:53.344 --> 01:25:55.264
<v Speaker 0>final thoughts before we finish for today?

01:25:57.264 --> 01:25:59.425
<v Speaker 1>No. I'm all good. Alright. I'm good. Thank

01:25:59.425 --> 01:26:00.945
<v Speaker 1>you for having us. It's been a pleasure.

01:26:00.945 --> 01:26:02.945
<v Speaker 1>It's been really great fun. No. Thank you.

01:26:02.945 --> 01:26:04.385
<v Speaker 0>I I know you stayed up really late.

01:26:04.385 --> 01:26:06.580
<v Speaker 0>It's getting to what? Probably half eleven at

01:26:06.580 --> 01:26:08.020
<v Speaker 0>night for you. So, you know, thank you

01:26:08.020 --> 01:26:09.780
<v Speaker 0>for taking the time joining me today, walking

01:26:09.780 --> 01:26:11.220
<v Speaker 0>me through this. I had an absolute blast

01:26:11.220 --> 01:26:12.659
<v Speaker 0>and we'll chat again Awesome.

01:26:13.940 --> 01:26:15.300
<v Speaker 1>Thank you so much. Have a great night.

01:26:15.300 --> 01:26:16.500
<v Speaker 1>Okay. Thanks. Bye. Bye.
