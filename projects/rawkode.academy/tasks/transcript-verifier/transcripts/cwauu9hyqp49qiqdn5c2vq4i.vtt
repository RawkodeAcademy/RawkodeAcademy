WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 2bda2958-16d3-4bda-8be9-d428d6ae281b
Created: 2025-04-29T21:06:36.579Z
Duration: 4449.9946
Channels: 1

00:01:11.545 --> 00:01:14.424
<v Speaker 0>Hello. And welcome to today's episode of Rawkode

00:01:14.424 --> 00:01:15.945
<v Speaker 0>live. I'm your host,

00:01:16.185 --> 00:01:16.744
<v Speaker 0>Rawkode.

00:01:17.225 --> 00:01:18.424
<v Speaker 0>Before we get started,

00:01:18.984 --> 00:01:20.505
<v Speaker 0>I just wanna take ten seconds to say

00:01:20.505 --> 00:01:22.344
<v Speaker 0>thank you to Equinix Metal. They are my

00:01:22.344 --> 00:01:24.505
<v Speaker 0>employer and they allow me to do this

00:01:24.505 --> 00:01:26.610
<v Speaker 0>as my job mostly every day. I get

00:01:26.610 --> 00:01:29.009
<v Speaker 0>to produce materials that help us all learn

00:01:29.409 --> 00:01:32.689
<v Speaker 0>all these awesome cool cloud native projects. Now

00:01:32.689 --> 00:01:34.770
<v Speaker 0>you can also try Equinix metal by using

00:01:34.770 --> 00:01:36.369
<v Speaker 0>the code Rawkode live.

00:01:36.770 --> 00:01:38.770
<v Speaker 0>You can spin up really small boxes which

00:01:38.770 --> 00:01:40.850
<v Speaker 0>will get you around a hundred hours of

00:01:40.125 --> 00:01:41.885
<v Speaker 0>compute time, but I prefer the more fun

00:01:41.885 --> 00:01:43.645
<v Speaker 0>approach, is to spin up the beefy boxes

00:01:43.645 --> 00:01:45.645
<v Speaker 0>with almost 400 gigabyte of RAM and spend

00:01:45.645 --> 00:01:46.605
<v Speaker 0>that much more

00:01:47.805 --> 00:01:50.125
<v Speaker 0>unwisely. Yeah. There we go. So check it

00:01:50.125 --> 00:01:51.645
<v Speaker 0>out. If you wanna join the chat, we

00:01:51.645 --> 00:01:53.085
<v Speaker 0>have a discord where you can come and

00:01:53.085 --> 00:01:55.860
<v Speaker 0>ask questions or suggest future episodes. I please

00:01:55.860 --> 00:01:58.260
<v Speaker 0>encourage you to subscribe and thumbs up this

00:01:58.260 --> 00:01:58.900
<v Speaker 0>video.

00:01:59.540 --> 00:02:01.220
<v Speaker 0>Now today, we're gonna take a look at

00:02:01.220 --> 00:02:03.620
<v Speaker 0>the Open Policy Agent. And to do that,

00:02:03.620 --> 00:02:05.620
<v Speaker 0>I am joined by no other than the

00:02:05.620 --> 00:02:07.860
<v Speaker 0>VP of Open Source for Styra and co

00:02:07.860 --> 00:02:10.565
<v Speaker 0>creator of the project, Torin Sando.

00:02:11.205 --> 00:02:14.085
<v Speaker 0>Hello, Torin. Hey, David. Thanks for having me.

00:02:14.165 --> 00:02:16.165
<v Speaker 0>No. My pleasure. It's gonna be really good.

00:02:16.165 --> 00:02:17.845
<v Speaker 0>I'm I'm really looking forward to to playing

00:02:17.845 --> 00:02:19.525
<v Speaker 0>with Opal and learn more about it. And

00:02:19.525 --> 00:02:20.965
<v Speaker 0>I'm really glad that you're here to be

00:02:20.965 --> 00:02:22.245
<v Speaker 0>able to help you do that as well.

00:02:22.245 --> 00:02:22.725
<v Speaker 0>So

00:02:23.160 --> 00:02:24.280
<v Speaker 1>Yeah. I'm excited.

00:02:24.600 --> 00:02:26.120
<v Speaker 0>Would you like to just then take a

00:02:26.120 --> 00:02:27.480
<v Speaker 0>moment? You can tell us a little bit

00:02:27.480 --> 00:02:29.720
<v Speaker 0>about yourself, about Open and Sarah, and how

00:02:29.720 --> 00:02:31.480
<v Speaker 0>that all comes together, and then we'll we'll

00:02:31.480 --> 00:02:32.920
<v Speaker 0>talk a little bit more about Open in

00:02:32.920 --> 00:02:33.720
<v Speaker 0>more detail.

00:02:34.440 --> 00:02:36.440
<v Speaker 0>Yeah. Yeah. For sure. Yes. I'm I'm I'm

00:02:36.440 --> 00:02:38.595
<v Speaker 1>Toran. I'm one of the co creators of

00:02:38.595 --> 00:02:40.995
<v Speaker 1>the Open Policy Agent Project or OPA,

00:02:41.795 --> 00:02:43.635
<v Speaker 1>as we like to call it. So I

00:02:43.635 --> 00:02:46.035
<v Speaker 1>I joined Styro almost five years ago to

00:02:46.035 --> 00:02:47.795
<v Speaker 1>kinda get the project off the like, start

00:02:47.795 --> 00:02:49.315
<v Speaker 1>the project and get it off the ground.

00:02:49.315 --> 00:02:51.340
<v Speaker 1>And so I spent spent the last five

00:02:51.340 --> 00:02:53.900
<v Speaker 1>years, you know, developing the project,

00:02:54.220 --> 00:02:56.300
<v Speaker 1>working on the core, you know, parts of

00:02:56.300 --> 00:02:58.380
<v Speaker 1>the project as well as, like, integrations,

00:02:58.940 --> 00:03:01.180
<v Speaker 1>taking it and and talking about it at

00:03:01.180 --> 00:03:02.860
<v Speaker 1>conferences and writing blog posts.

00:03:03.715 --> 00:03:05.555
<v Speaker 1>And and more recently, I've been spending a

00:03:05.555 --> 00:03:07.394
<v Speaker 1>lot of time, you know, talking to users

00:03:07.394 --> 00:03:09.394
<v Speaker 1>and talking to our customers from start and

00:03:09.394 --> 00:03:11.954
<v Speaker 1>helping them just be successful generally. So that's

00:03:11.954 --> 00:03:13.474
<v Speaker 1>what I've up to lately. I've spent most

00:03:13.474 --> 00:03:14.674
<v Speaker 1>of my career as a as a software

00:03:14.674 --> 00:03:16.355
<v Speaker 1>developer working on kind of different kinds of

00:03:16.355 --> 00:03:19.439
<v Speaker 1>distributed systems projects to deal with policy and

00:03:19.439 --> 00:03:20.720
<v Speaker 1>and and orchestration.

00:03:20.720 --> 00:03:21.200
<v Speaker 1>So,

00:03:21.599 --> 00:03:23.600
<v Speaker 1>yeah, that's just a little bit about me.

00:03:23.840 --> 00:03:25.200
<v Speaker 1>Nice. Yeah.

00:03:26.239 --> 00:03:29.200
<v Speaker 0>So can we try and then summarize what

00:03:29.200 --> 00:03:31.840
<v Speaker 0>problem does is OPA trying to solve?

00:03:33.535 --> 00:03:34.095
<v Speaker 1>Yeah.

00:03:34.815 --> 00:03:37.055
<v Speaker 1>Yeah. So OPA is is a is a

00:03:37.055 --> 00:03:39.215
<v Speaker 1>policy engine. So what that means is that

00:03:39.215 --> 00:03:41.535
<v Speaker 1>it it gives you a way of offloading

00:03:42.415 --> 00:03:45.615
<v Speaker 1>policy decision making from your software,

00:03:46.239 --> 00:03:47.840
<v Speaker 1>And and that's really it at a high

00:03:47.840 --> 00:03:49.680
<v Speaker 1>level. So Open is intended to be

00:03:50.319 --> 00:03:53.120
<v Speaker 1>very general purpose and very, very flexible. So

00:03:53.120 --> 00:03:54.319
<v Speaker 1>it's really the way to think about it

00:03:54.319 --> 00:03:55.680
<v Speaker 1>is it's sort of like a building block

00:03:55.680 --> 00:03:56.640
<v Speaker 1>that lets you,

00:03:57.599 --> 00:03:59.200
<v Speaker 1>you know, enforce policies

00:03:59.200 --> 00:04:01.925
<v Speaker 1>in in like, across the stack, across various

00:04:01.925 --> 00:04:02.965
<v Speaker 1>kinds of services,

00:04:03.605 --> 00:04:05.845
<v Speaker 1>various systems, various layers, and and and so

00:04:05.845 --> 00:04:06.965
<v Speaker 1>on. So there's there's a whole bunch of

00:04:06.965 --> 00:04:08.325
<v Speaker 1>different use cases for it.

00:04:08.645 --> 00:04:10.885
<v Speaker 1>A lot of the time, it's applied to

00:04:11.285 --> 00:04:13.045
<v Speaker 1>problems around authorization.

00:04:13.045 --> 00:04:14.485
<v Speaker 1>Right? So controlling

00:04:14.485 --> 00:04:15.605
<v Speaker 1>who can do what

00:04:16.330 --> 00:04:18.490
<v Speaker 1>at different parts of the stack. Right? So

00:04:18.490 --> 00:04:19.690
<v Speaker 1>in Kubernetes,

00:04:20.330 --> 00:04:22.570
<v Speaker 1>you know, there's there's role based access control,

00:04:22.570 --> 00:04:24.410
<v Speaker 1>and then there's also admission control. Right? So

00:04:24.410 --> 00:04:25.370
<v Speaker 1>in Kubernetes,

00:04:25.450 --> 00:04:27.290
<v Speaker 1>there's this problem of just putting down kind

00:04:27.290 --> 00:04:29.930
<v Speaker 1>of safeguards or guardrails on your Kubernetes cluster

00:04:30.175 --> 00:04:32.895
<v Speaker 1>to prevent bad things from happening, to prevent,

00:04:32.895 --> 00:04:33.535
<v Speaker 1>you know,

00:04:34.335 --> 00:04:36.895
<v Speaker 1>the wrong container images from running, to prevent

00:04:37.135 --> 00:04:39.935
<v Speaker 1>workloads from using too much RAM or CPU,

00:04:39.935 --> 00:04:40.655
<v Speaker 1>to prevent

00:04:41.455 --> 00:04:44.830
<v Speaker 1>developers from accidentally creating ingresses or or, you

00:04:44.830 --> 00:04:46.830
<v Speaker 1>know, load balancers on the public Internet and

00:04:46.830 --> 00:04:48.430
<v Speaker 1>and and all kinds of things. Right? So

00:04:48.430 --> 00:04:50.510
<v Speaker 1>there's this general public admission control in Kubernetes

00:04:50.510 --> 00:04:51.790
<v Speaker 1>that Open helps solve.

00:04:52.430 --> 00:04:53.950
<v Speaker 1>But you can also use Open in other

00:04:53.950 --> 00:04:55.630
<v Speaker 1>contexts. So we see tons of people using

00:04:55.630 --> 00:04:56.750
<v Speaker 1>Open for

00:04:57.150 --> 00:04:59.070
<v Speaker 1>microservice API authorization,

00:05:00.595 --> 00:05:02.915
<v Speaker 1>for for application level authorization,

00:05:03.395 --> 00:05:04.435
<v Speaker 1>for enforcing

00:05:04.595 --> 00:05:07.155
<v Speaker 1>all kinds of config validation use cases in

00:05:07.155 --> 00:05:08.675
<v Speaker 1>CICD pipelines.

00:05:09.635 --> 00:05:11.235
<v Speaker 1>Even some people even use it to control

00:05:11.235 --> 00:05:13.555
<v Speaker 1>SSH and pseudo access at the host level.

00:05:13.555 --> 00:05:15.819
<v Speaker 1>So it's it's it's intended to be very

00:05:15.819 --> 00:05:17.819
<v Speaker 1>kind of flexible in general purpose. And and

00:05:17.819 --> 00:05:18.380
<v Speaker 1>so

00:05:18.620 --> 00:05:20.460
<v Speaker 1>the core of the project is completely domain

00:05:20.460 --> 00:05:21.260
<v Speaker 1>agnostic,

00:05:21.580 --> 00:05:22.860
<v Speaker 1>but then you can kinda take it and

00:05:22.860 --> 00:05:24.940
<v Speaker 1>plug it into different places to solve all

00:05:24.940 --> 00:05:27.100
<v Speaker 1>sorts of interesting policy related

00:05:27.740 --> 00:05:28.139
<v Speaker 1>problems.

00:05:29.495 --> 00:05:32.455
<v Speaker 0>Nice. Okay. So I I I I was

00:05:32.455 --> 00:05:34.375
<v Speaker 0>looking at the documentation earlier, and I've seen

00:05:34.375 --> 00:05:36.134
<v Speaker 0>that it it had use cases, I said,

00:05:36.134 --> 00:05:37.735
<v Speaker 0>at Kubernetes. And some of them you've just

00:05:37.735 --> 00:05:39.974
<v Speaker 0>mentioned there, and we'll build the documentation up

00:05:39.974 --> 00:05:42.620
<v Speaker 0>shortly. But I'm curious, was the first use

00:05:42.620 --> 00:05:44.460
<v Speaker 0>case that you had for Open when you

00:05:44.460 --> 00:05:46.540
<v Speaker 0>were building Kubernetes based, or was it something

00:05:46.540 --> 00:05:47.340
<v Speaker 0>else altogether?

00:05:47.660 --> 00:05:49.340
<v Speaker 1>Yes. We we started the project in, like,

00:05:49.340 --> 00:05:51.740
<v Speaker 1>late twenty fifteen, early '20 '16. And at

00:05:51.740 --> 00:05:52.380
<v Speaker 1>the time,

00:05:53.419 --> 00:05:56.125
<v Speaker 1>yeah, Kubernetes wasn't, like, the de facto standard

00:05:56.125 --> 00:05:58.525
<v Speaker 1>for for for container orchestration or just general

00:05:58.525 --> 00:06:00.205
<v Speaker 1>kind of, like, config orchestration.

00:06:01.405 --> 00:06:02.685
<v Speaker 1>You know, there there were lots of other

00:06:02.685 --> 00:06:04.685
<v Speaker 1>competitors at the time, like, and

00:06:05.325 --> 00:06:06.125
<v Speaker 1>and

00:06:07.405 --> 00:06:09.005
<v Speaker 1>so on. And and

00:06:09.380 --> 00:06:11.220
<v Speaker 1>and it wasn't clear, like, who was gonna

00:06:11.220 --> 00:06:11.860
<v Speaker 1>win.

00:06:12.820 --> 00:06:14.740
<v Speaker 1>But what was clear was that, like and

00:06:14.740 --> 00:06:16.419
<v Speaker 1>then cloud native wasn't even a term at

00:06:16.419 --> 00:06:17.940
<v Speaker 1>the time. Right? Like or if if it

00:06:17.940 --> 00:06:19.460
<v Speaker 1>was, people no one was really using it.

00:06:19.460 --> 00:06:21.540
<v Speaker 1>So but but there was this obvious shift

00:06:21.540 --> 00:06:24.375
<v Speaker 1>happening where people were adopting, you know, cloud

00:06:24.375 --> 00:06:26.775
<v Speaker 1>and and kind of distributed systems at least

00:06:26.775 --> 00:06:28.134
<v Speaker 1>are becoming the norm. Right? People are moving

00:06:28.134 --> 00:06:30.294
<v Speaker 1>to microservices. People are moving to cloud. They're

00:06:30.294 --> 00:06:31.574
<v Speaker 1>automating more and more.

00:06:32.294 --> 00:06:34.215
<v Speaker 1>You know, environments are becoming more and more

00:06:34.215 --> 00:06:36.215
<v Speaker 1>dynamic and kind of ephemeral.

00:06:37.060 --> 00:06:39.780
<v Speaker 1>And so there was a clear need for

00:06:41.300 --> 00:06:43.620
<v Speaker 1>a new way of kind of enforcing policies

00:06:43.620 --> 00:06:45.699
<v Speaker 1>in the in these sort of modern environments.

00:06:45.699 --> 00:06:47.699
<v Speaker 1>And so we we kinda created OPA with

00:06:47.699 --> 00:06:48.980
<v Speaker 1>that in mind. So OPA

00:06:49.380 --> 00:06:51.300
<v Speaker 1>was sort of designed from the beginning to

00:06:51.745 --> 00:06:55.025
<v Speaker 1>be a good fit for distributed policy enforcement,

00:06:55.025 --> 00:06:56.705
<v Speaker 1>like being able to take a policy, a

00:06:56.705 --> 00:06:58.145
<v Speaker 1>high level policy that says who could do

00:06:58.145 --> 00:06:59.585
<v Speaker 1>what or who can access what,

00:06:59.905 --> 00:07:01.985
<v Speaker 1>and to then break that down and distribute

00:07:01.985 --> 00:07:03.745
<v Speaker 1>it throughout the system and have it kind

00:07:03.745 --> 00:07:06.224
<v Speaker 1>of run and execute and be enforced next

00:07:05.790 --> 00:07:07.230
<v Speaker 1>piece of software that needs it. That just

00:07:07.230 --> 00:07:09.230
<v Speaker 1>happens to be a good fit for for

00:07:09.230 --> 00:07:10.910
<v Speaker 1>environments like Kubernetes.

00:07:11.550 --> 00:07:12.110
<v Speaker 1>So

00:07:12.750 --> 00:07:14.430
<v Speaker 1>it you know, we we we played around

00:07:14.430 --> 00:07:16.190
<v Speaker 1>a lot of different use cases early on.

00:07:17.550 --> 00:07:19.790
<v Speaker 1>In the early days, as you know, we

00:07:19.790 --> 00:07:21.955
<v Speaker 1>we could, like, go look at projects and

00:07:21.955 --> 00:07:23.555
<v Speaker 1>we go into the issue tracker,

00:07:23.795 --> 00:07:24.915
<v Speaker 1>and, you know, you type in the word

00:07:24.915 --> 00:07:26.755
<v Speaker 1>policy and you'd, like, see what would come

00:07:26.755 --> 00:07:28.755
<v Speaker 1>back. Right? If you did that in Kubernetes,

00:07:28.915 --> 00:07:30.995
<v Speaker 1>you get, like, hundreds of issues. Like, oh,

00:07:30.995 --> 00:07:32.355
<v Speaker 1>you know, we wanna we wanna make sure

00:07:32.355 --> 00:07:34.835
<v Speaker 1>that our users always supply resource requests and

00:07:34.835 --> 00:07:36.675
<v Speaker 1>limits. Right? Or we wanna make sure that,

00:07:37.669 --> 00:07:39.590
<v Speaker 1>you know, that that they're not using privileged,

00:07:39.590 --> 00:07:41.750
<v Speaker 1>like, kernel capabilities in the in the containers

00:07:41.750 --> 00:07:43.030
<v Speaker 1>and stuff like that. Right? And there's just

00:07:43.030 --> 00:07:45.910
<v Speaker 1>this long, long list of of what kind

00:07:45.910 --> 00:07:47.350
<v Speaker 1>of use cases that we found in Kubernetes,

00:07:47.350 --> 00:07:48.710
<v Speaker 1>and so we started to focus our efforts

00:07:48.710 --> 00:07:49.270
<v Speaker 1>a little bit

00:07:50.014 --> 00:07:51.775
<v Speaker 1>there. Also, at the time, there was no,

00:07:51.775 --> 00:07:54.415
<v Speaker 1>like, dynamic way of extending Kubernetes with custom

00:07:54.415 --> 00:07:56.255
<v Speaker 1>admission controllers. Like, in order to

00:07:57.055 --> 00:07:58.975
<v Speaker 1>in order to implement an admission controller, you

00:07:58.975 --> 00:08:02.270
<v Speaker 1>had to write code and then vendor it

00:08:02.270 --> 00:08:05.470
<v Speaker 1>into Kubernetes, basically, and then recompile Kubernetes. Right?

00:08:05.470 --> 00:08:07.790
<v Speaker 1>So, like, if you're a Kubernetes administrator,

00:08:08.190 --> 00:08:09.710
<v Speaker 1>like, maybe you're comfortable doing that, but you

00:08:09.710 --> 00:08:10.910
<v Speaker 1>probably don't wanna be doing that at the

00:08:10.910 --> 00:08:13.070
<v Speaker 1>very least, right, on a regular basis. So

00:08:13.390 --> 00:08:15.230
<v Speaker 1>there wasn't really a great solution, but kinda

00:08:15.230 --> 00:08:17.014
<v Speaker 1>came along and and it provided a great

00:08:17.014 --> 00:08:18.375
<v Speaker 1>solution because it allows you to just drop

00:08:18.375 --> 00:08:20.375
<v Speaker 1>in policies on the fly, have them reloaded

00:08:20.375 --> 00:08:21.815
<v Speaker 1>without any kind of restart,

00:08:22.135 --> 00:08:24.615
<v Speaker 1>have them applied automatically. So we, you know,

00:08:24.615 --> 00:08:26.854
<v Speaker 1>we worked with Kubernetes, like, upstream community, and

00:08:26.854 --> 00:08:28.615
<v Speaker 1>and, eventually, webhooks got added,

00:08:28.935 --> 00:08:30.775
<v Speaker 1>and and we just integrate nicely into that

00:08:31.290 --> 00:08:32.490
<v Speaker 1>that ecosystem.

00:08:32.890 --> 00:08:34.730
<v Speaker 1>And, yeah, it just sort of became, like,

00:08:34.730 --> 00:08:36.330
<v Speaker 1>a little bit of a standard there.

00:08:37.450 --> 00:08:39.530
<v Speaker 0>So something you said there was

00:08:40.169 --> 00:08:42.650
<v Speaker 0>that at the core of it, it's agnostic.

00:08:42.650 --> 00:08:44.410
<v Speaker 0>Right? It could be used for multiple things.

00:08:45.345 --> 00:08:47.105
<v Speaker 0>Is when you say core, do you mean

00:08:47.105 --> 00:08:49.265
<v Speaker 0>the DSL, the language, or is that in

00:08:49.265 --> 00:08:51.505
<v Speaker 0>reference to something else? Yeah. I just mean

00:08:51.505 --> 00:08:53.024
<v Speaker 1>I just mean the the kind of, like,

00:08:53.024 --> 00:08:53.505
<v Speaker 1>the

00:08:54.225 --> 00:08:56.865
<v Speaker 1>the fundamental, like, concepts around Open. So the

00:08:56.865 --> 00:08:58.545
<v Speaker 1>the fundamental thing that it provides you is

00:08:58.545 --> 00:08:58.785
<v Speaker 1>this

00:08:59.660 --> 00:09:03.019
<v Speaker 1>this this high level declarative language called Rego

00:09:03.019 --> 00:09:04.779
<v Speaker 1>that you can use to write your policies

00:09:04.779 --> 00:09:06.700
<v Speaker 1>in and then the the the the runtime

00:09:06.700 --> 00:09:08.940
<v Speaker 1>for those for that for that language. And

00:09:08.940 --> 00:09:11.180
<v Speaker 1>then around that, we build integrations for all

00:09:11.180 --> 00:09:13.725
<v Speaker 1>kinds of different systems. So, like, for example,

00:09:13.725 --> 00:09:16.204
<v Speaker 1>Gatekeeper is the kind of, like, integration between

00:09:16.204 --> 00:09:17.645
<v Speaker 1>OPA and Kubernetes.

00:09:18.285 --> 00:09:20.524
<v Speaker 1>We have integrations with Envoy. We have integrations

00:09:20.524 --> 00:09:23.245
<v Speaker 1>with PAM. We have integrations with all kinds

00:09:23.245 --> 00:09:25.485
<v Speaker 1>of things. There's there's a tool called CoffTest

00:09:25.485 --> 00:09:27.480
<v Speaker 1>that's part of the OPA project, which is

00:09:27.480 --> 00:09:29.720
<v Speaker 1>really useful for validating config files

00:09:30.200 --> 00:09:32.920
<v Speaker 1>inside development environments or inside c I CICD

00:09:32.920 --> 00:09:33.640
<v Speaker 1>pipelines.

00:09:34.680 --> 00:09:35.240
<v Speaker 1>So

00:09:35.640 --> 00:09:37.320
<v Speaker 1>so yeah. So we have the the core

00:09:37.320 --> 00:09:39.400
<v Speaker 1>language and runtime, and then around that, there's

00:09:39.400 --> 00:09:42.225
<v Speaker 1>there's integrations that that make you actually do

00:09:42.225 --> 00:09:43.345
<v Speaker 1>something in the world.

00:09:44.625 --> 00:09:45.185
<v Speaker 0>Okay.

00:09:46.065 --> 00:09:46.705
<v Speaker 0>Well,

00:09:47.105 --> 00:09:48.625
<v Speaker 0>I mean, if we had five hours, I'd

00:09:48.625 --> 00:09:49.905
<v Speaker 0>say we'd look at all of that. But

00:09:49.905 --> 00:09:52.305
<v Speaker 0>maybe we should narrow the scope a little

00:09:52.305 --> 00:09:55.660
<v Speaker 0>bit. So I've got the homepage here, which

00:09:55.660 --> 00:09:57.340
<v Speaker 0>should now be visible to everybody.

00:09:58.140 --> 00:10:00.460
<v Speaker 0>And we're just gonna click on the documentation.

00:10:00.540 --> 00:10:03.020
<v Speaker 0>In fact, there's the playground first. Should we

00:10:03.020 --> 00:10:03.900
<v Speaker 0>start there?

00:10:04.300 --> 00:10:05.500
<v Speaker 0>Or do you wanna go for should we

00:10:05.500 --> 00:10:06.715
<v Speaker 0>go for the docs first?

00:10:06.955 --> 00:10:09.035
<v Speaker 1>We I I'm I'm fine with either. The

00:10:09.035 --> 00:10:10.475
<v Speaker 1>the playground's a really nice way to just

00:10:10.475 --> 00:10:12.795
<v Speaker 1>kinda click around and and see stuff happen.

00:10:12.955 --> 00:10:13.435
<v Speaker 1>But

00:10:13.995 --> 00:10:15.755
<v Speaker 1>but, yeah, it's it's really I'll I'll leave

00:10:15.755 --> 00:10:17.435
<v Speaker 1>it in your hands here. Alright. Okay.

00:10:18.090 --> 00:10:20.090
<v Speaker 0>I've opened the playground. I think we'll we'll

00:10:20.090 --> 00:10:21.450
<v Speaker 0>use that. We'll we'll kick the tires on

00:10:21.450 --> 00:10:22.570
<v Speaker 0>a little bit, and then we'll see how

00:10:22.570 --> 00:10:24.170
<v Speaker 0>things are going. If they're going well, maybe

00:10:24.170 --> 00:10:26.250
<v Speaker 0>we'll we'll we'll try and deploy gatekeeper or

00:10:26.250 --> 00:10:28.090
<v Speaker 0>something. But maybe we should take a look

00:10:28.090 --> 00:10:28.730
<v Speaker 0>first

00:10:29.290 --> 00:10:31.530
<v Speaker 0>Regal, the the the language. So

00:10:33.345 --> 00:10:35.265
<v Speaker 0>this is this how,

00:10:35.665 --> 00:10:37.825
<v Speaker 0>you know, some a developer's coming along and

00:10:37.825 --> 00:10:39.585
<v Speaker 0>they wanna be able to start using this

00:10:39.585 --> 00:10:41.905
<v Speaker 0>to say they don't want any containers to

00:10:41.905 --> 00:10:43.345
<v Speaker 0>run as root and say that the Kubernetes

00:10:43.345 --> 00:10:45.025
<v Speaker 0>environment. The first thing they're gonna have to

00:10:45.025 --> 00:10:47.185
<v Speaker 0>do would be write something in this language

00:10:47.185 --> 00:10:47.585
<v Speaker 0>that

00:10:48.070 --> 00:10:49.910
<v Speaker 0>that that provided that policy.

00:10:50.070 --> 00:10:51.589
<v Speaker 0>Is my understanding that correct?

00:10:52.470 --> 00:10:54.310
<v Speaker 1>Yeah. Yeah. Yeah. That's right. Yeah. So the

00:10:54.310 --> 00:10:56.470
<v Speaker 1>the model that that Open kind of, like,

00:10:56.470 --> 00:10:58.709
<v Speaker 1>exposes is is this kind of

00:10:59.190 --> 00:11:02.005
<v Speaker 1>this, like, offloading model. So software can query

00:11:02.005 --> 00:11:03.445
<v Speaker 1>OPA when it needs to make a policy

00:11:03.445 --> 00:11:04.005
<v Speaker 1>decision,

00:11:04.325 --> 00:11:06.325
<v Speaker 1>and then and then OPA will will render

00:11:06.325 --> 00:11:08.645
<v Speaker 1>a policy decision by evaluating the policies you've

00:11:08.645 --> 00:11:10.405
<v Speaker 1>given it and send it send the decision

00:11:10.405 --> 00:11:11.845
<v Speaker 1>back to the software to be enforced. So,

00:11:11.845 --> 00:11:13.125
<v Speaker 1>like, in the case of Kubernetes,

00:11:13.365 --> 00:11:16.480
<v Speaker 1>the API server queries over. It sends across

00:11:16.480 --> 00:11:17.280
<v Speaker 1>the wire

00:11:17.680 --> 00:11:19.520
<v Speaker 1>this big JSON payload

00:11:19.840 --> 00:11:22.320
<v Speaker 1>that has the sort of the full extent

00:11:22.320 --> 00:11:24.480
<v Speaker 1>of your in, like, a pod or deployment

00:11:24.480 --> 00:11:26.160
<v Speaker 1>or or whatever the object is that you've

00:11:26.160 --> 00:11:28.160
<v Speaker 1>configured to go through the webhook. And then

00:11:28.160 --> 00:11:30.720
<v Speaker 1>the policy will look at that JSON, and

00:11:30.324 --> 00:11:32.325
<v Speaker 1>it'll make it it'll it'll generate

00:11:32.485 --> 00:11:34.644
<v Speaker 1>an answer to that policy query that says,

00:11:34.644 --> 00:11:37.365
<v Speaker 1>like, deny with this reason. So what you're

00:11:37.365 --> 00:11:39.524
<v Speaker 1>doing when you're when you're writing these policies

00:11:39.524 --> 00:11:41.845
<v Speaker 1>is you're writing down basically, like, assertions

00:11:42.005 --> 00:11:43.925
<v Speaker 1>over or structured data, right,

00:11:44.610 --> 00:11:47.329
<v Speaker 1>over over JSON or over YAML, basically. And

00:11:47.329 --> 00:11:49.170
<v Speaker 1>so the language gives you a bunch of

00:11:50.209 --> 00:11:52.370
<v Speaker 1>primitives to do that. The language is is

00:11:52.370 --> 00:11:54.209
<v Speaker 1>is it's declarative, so there's a little bit

00:11:54.209 --> 00:11:55.490
<v Speaker 1>of a learning curve with it. But at

00:11:55.490 --> 00:11:56.769
<v Speaker 1>the high level, what it what it really

00:11:56.769 --> 00:11:58.130
<v Speaker 1>lets you do is just write down if

00:11:58.130 --> 00:12:01.085
<v Speaker 1>then statements. You say, you know, deny

00:12:01.085 --> 00:12:02.045
<v Speaker 1>is true

00:12:02.285 --> 00:12:05.485
<v Speaker 1>if these conditions hold or allow is true

00:12:05.485 --> 00:12:07.485
<v Speaker 1>if those conditions hold it and and and

00:12:07.485 --> 00:12:09.165
<v Speaker 1>so on. So it's really just about writing

00:12:09.165 --> 00:12:10.845
<v Speaker 1>down these if then statements, essentially,

00:12:12.445 --> 00:12:13.245
<v Speaker 1>that that

00:12:13.829 --> 00:12:14.550
<v Speaker 1>that

00:12:14.630 --> 00:12:16.470
<v Speaker 1>look at and kinda, like, analyze

00:12:16.630 --> 00:12:17.829
<v Speaker 1>structured data.

00:12:18.149 --> 00:12:18.870
<v Speaker 0>Okay.

00:12:19.350 --> 00:12:20.550
<v Speaker 0>I mean, I can

00:12:21.269 --> 00:12:22.630
<v Speaker 0>having a look at this here, I I

00:12:22.630 --> 00:12:24.230
<v Speaker 0>kinda see, like, this combination

00:12:24.630 --> 00:12:26.245
<v Speaker 0>of a little bit of goal with the

00:12:26.245 --> 00:12:28.085
<v Speaker 0>sustainment operator, but then a little bit of

00:12:28.085 --> 00:12:30.165
<v Speaker 0>JSON JavaScript on the right hand side. So

00:12:30.165 --> 00:12:31.285
<v Speaker 0>it does feel

00:12:31.605 --> 00:12:34.005
<v Speaker 0>pretty familiar on a on a first pass

00:12:34.005 --> 00:12:35.925
<v Speaker 0>at it. So and then I can see

00:12:35.925 --> 00:12:38.645
<v Speaker 0>here it's got scalars and strength and composite

00:12:38.645 --> 00:12:39.525
<v Speaker 0>values. Like,

00:12:40.630 --> 00:12:42.389
<v Speaker 0>is it a programming language, or is it

00:12:42.389 --> 00:12:44.389
<v Speaker 0>a DSL? Was that a fair distinction to

00:12:44.389 --> 00:12:45.110
<v Speaker 0>try and make?

00:12:46.310 --> 00:12:47.350
<v Speaker 1>Yeah. I guess,

00:12:48.070 --> 00:12:50.790
<v Speaker 1>like, I think DSLs the the term DSL

00:12:50.790 --> 00:12:53.190
<v Speaker 1>can mean a lot of different things. OPA

00:12:53.190 --> 00:12:55.510
<v Speaker 1>is it's it's a query language, actually. Like,

00:12:55.510 --> 00:12:57.005
<v Speaker 1>I don't know. It it follows kinda like

00:12:57.005 --> 00:12:58.045
<v Speaker 1>query semantics.

00:12:58.045 --> 00:13:01.325
<v Speaker 1>So it's almost closer to, SQL,

00:13:01.565 --> 00:13:03.485
<v Speaker 1>essentially, in that you write

00:13:04.205 --> 00:13:06.605
<v Speaker 1>you write down statements that express,

00:13:06.765 --> 00:13:10.205
<v Speaker 1>like, predicates over over structured data, but that

00:13:10.205 --> 00:13:11.245
<v Speaker 1>then generate values.

00:13:12.660 --> 00:13:13.620
<v Speaker 1>And so,

00:13:14.980 --> 00:13:16.020
<v Speaker 1>you know, you can

00:13:17.220 --> 00:13:18.900
<v Speaker 1>you can express all the kinds of things

00:13:18.900 --> 00:13:21.460
<v Speaker 1>you would expect in a query language. Like,

00:13:21.460 --> 00:13:24.095
<v Speaker 1>you can express ands and ors. You can

00:13:24.095 --> 00:13:25.774
<v Speaker 1>express search operations.

00:13:25.774 --> 00:13:27.695
<v Speaker 1>So, like, for example, if you had

00:13:28.334 --> 00:13:29.935
<v Speaker 1>you know, in a pod, there's, a list

00:13:29.935 --> 00:13:32.574
<v Speaker 1>of containers. Right? And so you might wanna

00:13:32.975 --> 00:13:34.894
<v Speaker 1>search over that list and see if any

00:13:34.894 --> 00:13:35.774
<v Speaker 1>of the containers

00:13:36.520 --> 00:13:39.640
<v Speaker 1>specify image from a registry that you don't

00:13:39.640 --> 00:13:41.480
<v Speaker 1>want, right, or or or from, like, a

00:13:41.480 --> 00:13:44.200
<v Speaker 1>registry that's not allowed. Right? And so the

00:13:44.200 --> 00:13:46.440
<v Speaker 1>language has these these kind of, like, concepts

00:13:46.440 --> 00:13:47.880
<v Speaker 1>baked into it to allow you to do

00:13:47.880 --> 00:13:49.720
<v Speaker 1>those kinda, like, search operations. And then there's

00:13:49.720 --> 00:13:51.240
<v Speaker 1>a bunch of other kind of features that

00:13:51.240 --> 00:13:54.305
<v Speaker 1>that come into play that are policy related,

00:13:54.465 --> 00:13:56.945
<v Speaker 1>like the ability to compose and delegate and

00:13:57.585 --> 00:13:59.505
<v Speaker 1>and so on. Okay.

00:13:59.745 --> 00:14:03.185
<v Speaker 0>I'm assuming the language didn't come before any

00:14:03.185 --> 00:14:05.060
<v Speaker 0>sort of proof of concept. Open anything like

00:14:05.060 --> 00:14:06.820
<v Speaker 0>that. Was there an actual version YAML, and

00:14:06.820 --> 00:14:08.580
<v Speaker 0>you maybe had some constraints there that you

00:14:08.580 --> 00:14:10.500
<v Speaker 0>had to break it out into Rego? Or,

00:14:10.500 --> 00:14:12.580
<v Speaker 0>like, how how did that come about?

00:14:13.620 --> 00:14:16.260
<v Speaker 1>Yeah. I I think there's like, someone is

00:14:16.420 --> 00:14:18.295
<v Speaker 1>at some point, someone said, like, you know,

00:14:18.295 --> 00:14:20.375
<v Speaker 1>the best advice around DSLs is, like, don't

00:14:20.375 --> 00:14:22.055
<v Speaker 1>create them or, you know, don't don't start

00:14:22.055 --> 00:14:23.575
<v Speaker 1>because it's a it's a big project. Right?

00:14:23.575 --> 00:14:24.935
<v Speaker 1>You you need to

00:14:25.575 --> 00:14:26.775
<v Speaker 1>you need to come up with, like, a

00:14:26.775 --> 00:14:29.015
<v Speaker 1>well defined semantics for the language. You need

00:14:29.015 --> 00:14:31.335
<v Speaker 1>to implement a runtime for that, and you

00:14:31.335 --> 00:14:32.935
<v Speaker 1>need build all the tooling around it. It's

00:14:32.935 --> 00:14:34.530
<v Speaker 1>it's it's it's a lot of work. And

00:14:34.530 --> 00:14:35.090
<v Speaker 1>so,

00:14:35.810 --> 00:14:38.130
<v Speaker 1>like, early on, we actually, you know, experimented

00:14:38.130 --> 00:14:39.890
<v Speaker 1>with a lot of things. We we even

00:14:40.290 --> 00:14:42.530
<v Speaker 1>we we tried to use SQL, for example,

00:14:42.770 --> 00:14:44.690
<v Speaker 1>as as as the language for expressing these

00:14:44.690 --> 00:14:47.090
<v Speaker 1>policies. And we just ran into a lot

00:14:47.090 --> 00:14:48.370
<v Speaker 1>of like, we ran into issues,

00:14:50.105 --> 00:14:53.145
<v Speaker 1>especially around dealing with, like, structured or, like

00:14:53.145 --> 00:14:55.865
<v Speaker 1>like, nested hierarchical data like JSON. Right? And

00:14:55.865 --> 00:14:58.665
<v Speaker 1>since JSON is just sort of or JSON

00:14:58.665 --> 00:15:00.345
<v Speaker 1>or YAML or any kind of, like, hierarchical

00:15:00.345 --> 00:15:02.745
<v Speaker 1>structured data is so prevalent in modern systems.

00:15:02.745 --> 00:15:04.770
<v Speaker 1>Right? Like, we use it configuration. We represent

00:15:04.770 --> 00:15:06.770
<v Speaker 1>all of our API objects with it. Right?

00:15:07.090 --> 00:15:09.170
<v Speaker 1>It just it was it was like, it

00:15:09.170 --> 00:15:11.330
<v Speaker 1>necessitated something something new.

00:15:12.210 --> 00:15:13.970
<v Speaker 1>The the actual, like, language and ethics behind

00:15:13.970 --> 00:15:15.730
<v Speaker 1>Open and Riga are are based on this

00:15:15.730 --> 00:15:16.610
<v Speaker 1>thing called Datalog,

00:15:17.265 --> 00:15:19.185
<v Speaker 1>which are which is, like, well kind of

00:15:19.185 --> 00:15:20.465
<v Speaker 1>very well understood.

00:15:21.265 --> 00:15:23.025
<v Speaker 1>And we sort of layered the ability to

00:15:23.025 --> 00:15:25.505
<v Speaker 1>deal with JSON or structured data or hierarchical

00:15:25.505 --> 00:15:27.105
<v Speaker 1>structure data on top of that.

00:15:27.665 --> 00:15:28.865
<v Speaker 0>Alright. Thanks.

00:15:29.585 --> 00:15:32.360
<v Speaker 0>So we have our first comment from Moz

00:15:32.360 --> 00:15:35.240
<v Speaker 0>who says, the regular language is very complicated.

00:15:35.240 --> 00:15:37.560
<v Speaker 0>Please share some hints or tips. Well, we're

00:15:37.560 --> 00:15:39.000
<v Speaker 0>gonna do our best to kinda break that

00:15:39.000 --> 00:15:41.240
<v Speaker 0>down just now and today. So we'll be

00:15:41.240 --> 00:15:42.760
<v Speaker 0>taking a look at some examples and and

00:15:42.760 --> 00:15:43.640
<v Speaker 0>hopefully that helps you, Moz.

00:15:44.505 --> 00:15:47.625
<v Speaker 0>So we have this Regal playground,

00:15:48.105 --> 00:15:50.025
<v Speaker 0>has loads of examples that we can dive

00:15:50.025 --> 00:15:52.265
<v Speaker 0>into. But this let me zoom in on

00:15:52.265 --> 00:15:53.225
<v Speaker 0>that a little bit.

00:15:54.505 --> 00:15:55.065
<v Speaker 0>There you go.

00:15:56.360 --> 00:15:59.240
<v Speaker 0>And the documentation here, I mean, this looks

00:15:59.240 --> 00:16:01.160
<v Speaker 0>pretty good. So this is just a hello

00:16:01.160 --> 00:16:01.800
<v Speaker 0>world.

00:16:04.680 --> 00:16:06.440
<v Speaker 0>See if I can work this one out.

00:16:07.560 --> 00:16:09.639
<v Speaker 0>So the default value for low is false.

00:16:10.345 --> 00:16:12.265
<v Speaker 0>We pass some input

00:16:13.305 --> 00:16:15.945
<v Speaker 0>and m equals world.

00:16:17.465 --> 00:16:18.425
<v Speaker 0>No.

00:16:20.105 --> 00:16:20.905
<v Speaker 0>Alright.

00:16:21.545 --> 00:16:23.865
<v Speaker 0>I don't think I understand what this is.

00:16:23.865 --> 00:16:25.065
<v Speaker 0>Do you wanna maybe just give me a

00:16:25.065 --> 00:16:27.199
<v Speaker 0>little bit of understanding here? Help me work

00:16:27.199 --> 00:16:29.440
<v Speaker 0>this for that. Yeah. For sure. So here,

00:16:29.440 --> 00:16:31.120
<v Speaker 1>why don't just just to

00:16:31.920 --> 00:16:34.079
<v Speaker 1>well, first, just click evaluate on the top

00:16:34.079 --> 00:16:34.639
<v Speaker 1>right.

00:16:38.800 --> 00:16:39.199
<v Speaker 0>Alright.

00:16:39.705 --> 00:16:42.025
<v Speaker 0>Alright. So the so the output from this

00:16:42.025 --> 00:16:43.785
<v Speaker 1>was hello is true.

00:16:45.625 --> 00:16:48.025
<v Speaker 1>The reason why hello is true is that

00:16:48.025 --> 00:16:50.585
<v Speaker 1>when the policy was evaluated, the statements on

00:16:50.585 --> 00:16:52.665
<v Speaker 1>line twenty four and twenty five were were

00:16:52.665 --> 00:16:54.380
<v Speaker 1>satisfied by the inputs. You can see on

00:16:54.380 --> 00:16:55.980
<v Speaker 1>the top right, the input is a JSON

00:16:55.980 --> 00:16:57.820
<v Speaker 1>object that has a key message and a

00:16:57.820 --> 00:16:58.380
<v Speaker 1>value

00:16:59.180 --> 00:17:01.260
<v Speaker 1>world. And then in that rule, on line

00:17:01.260 --> 00:17:02.060
<v Speaker 1>23,

00:17:02.460 --> 00:17:04.700
<v Speaker 1>we basically assigned a message to an intermediate

00:17:04.700 --> 00:17:06.380
<v Speaker 1>variable m, and then we've checked if m

00:17:06.380 --> 00:17:07.660
<v Speaker 1>is equal to world. And so,

00:17:08.525 --> 00:17:09.724
<v Speaker 1>you know, if you just kind of, like,

00:17:09.724 --> 00:17:10.845
<v Speaker 1>look at that and then look at the

00:17:10.845 --> 00:17:13.085
<v Speaker 1>input, you'd realize, yes. Okay. Those those statements

00:17:13.085 --> 00:17:14.524
<v Speaker 1>on the in that rule are true.

00:17:15.085 --> 00:17:16.765
<v Speaker 1>What's going on here is is there's a

00:17:16.765 --> 00:17:18.845
<v Speaker 1>little bit of implicit behavior. So, like, on

00:17:18.845 --> 00:17:19.884
<v Speaker 1>line 23,

00:17:20.204 --> 00:17:23.325
<v Speaker 1>right after hello, if you wrote equals true

00:17:23.710 --> 00:17:24.990
<v Speaker 1>right after hello,

00:17:27.390 --> 00:17:29.470
<v Speaker 1>that would mean exactly the same thing. So

00:17:29.470 --> 00:17:30.910
<v Speaker 1>so that way you just the way you

00:17:30.910 --> 00:17:32.430
<v Speaker 1>change the policy hasn't changed the meaning of

00:17:32.430 --> 00:17:33.470
<v Speaker 1>the policy at all.

00:17:34.030 --> 00:17:36.510
<v Speaker 1>You can click evaluate, and it'll it'll it'll

00:17:36.510 --> 00:17:37.550
<v Speaker 1>give you the same output.

00:17:40.684 --> 00:17:42.924
<v Speaker 1>We allow you to just omit equals true

00:17:42.924 --> 00:17:45.164
<v Speaker 1>from the head of a rule because

00:17:45.404 --> 00:17:47.485
<v Speaker 1>it's so common, basically. So when you leave

00:17:47.485 --> 00:17:49.404
<v Speaker 1>out the value there, it just means true.

00:17:49.404 --> 00:17:50.284
<v Speaker 1>It just says,

00:17:50.684 --> 00:17:52.684
<v Speaker 1>hello is true if

00:17:53.179 --> 00:17:54.940
<v Speaker 1>the conditions in the body are are true.

00:17:54.940 --> 00:17:56.779
<v Speaker 1>So hello is true if

00:17:57.580 --> 00:17:58.460
<v Speaker 1>m

00:17:58.539 --> 00:18:01.179
<v Speaker 1>can be assigned to input dot message and

00:18:01.260 --> 00:18:02.619
<v Speaker 1>m equals

00:18:02.780 --> 00:18:04.780
<v Speaker 1>world. So the it it that's why I

00:18:04.780 --> 00:18:06.140
<v Speaker 1>said it's basically all just a bunch of

00:18:06.140 --> 00:18:08.140
<v Speaker 1>if then statements. You're basically just saying

00:18:08.835 --> 00:18:11.394
<v Speaker 1>assign a value to a variable

00:18:11.875 --> 00:18:14.115
<v Speaker 1>if the conditions in the body of the

00:18:14.115 --> 00:18:15.554
<v Speaker 1>rule are true. There's two parts to a

00:18:15.554 --> 00:18:17.395
<v Speaker 1>rule. There's a head and a and a

00:18:17.395 --> 00:18:19.475
<v Speaker 1>body. The head is the assignment,

00:18:19.475 --> 00:18:19.955
<v Speaker 1>basically,

00:18:20.275 --> 00:18:22.434
<v Speaker 1>and the body are the conditions that you

00:18:22.434 --> 00:18:22.755
<v Speaker 1>write

00:18:23.490 --> 00:18:25.730
<v Speaker 1>inside of the rule. So this is just

00:18:25.730 --> 00:18:27.490
<v Speaker 1>saying hello is true if

00:18:27.570 --> 00:18:29.650
<v Speaker 1>input dot message equals equals world,

00:18:30.210 --> 00:18:31.890
<v Speaker 1>and you can leave that off. And then

00:18:31.970 --> 00:18:33.810
<v Speaker 1>there's this notion of undefined, which we can

00:18:33.810 --> 00:18:35.895
<v Speaker 1>get into later. But, basically, if for some

00:18:35.895 --> 00:18:37.815
<v Speaker 1>reason, the value so, like, in this case,

00:18:37.815 --> 00:18:40.535
<v Speaker 1>if the value mess of message wasn't world,

00:18:40.855 --> 00:18:42.295
<v Speaker 1>then the question is, well, what should hello

00:18:42.295 --> 00:18:43.815
<v Speaker 1>be? And that's what default allows you to

00:18:43.815 --> 00:18:45.175
<v Speaker 1>do. It allows you to assign a default

00:18:45.175 --> 00:18:47.575
<v Speaker 1>value to a variable when none of the

00:18:47.575 --> 00:18:49.575
<v Speaker 1>none of the rules with that name match.

00:18:49.575 --> 00:18:51.200
<v Speaker 1>So, like, if you change the input in

00:18:51.200 --> 00:18:51.840
<v Speaker 1>this case,

00:18:52.160 --> 00:18:54.480
<v Speaker 1>if you change world to something else,

00:18:55.760 --> 00:18:58.000
<v Speaker 1>anything else, and evaluate,

00:18:58.000 --> 00:19:00.400
<v Speaker 1>now hello is false. Right? Because the statements

00:19:00.400 --> 00:19:01.440
<v Speaker 1>in that body

00:19:02.800 --> 00:19:04.080
<v Speaker 1>are no longer satisfied.

00:19:05.615 --> 00:19:06.894
<v Speaker 0>Alright. That helps.

00:19:07.455 --> 00:19:10.575
<v Speaker 0>There that that immediately helps me because I'm

00:19:10.575 --> 00:19:12.975
<v Speaker 0>gonna just test I'm gonna change something because

00:19:12.975 --> 00:19:14.895
<v Speaker 0>I wanna confirm something in my head. So

00:19:14.895 --> 00:19:17.135
<v Speaker 0>if I since there's to be a string,

00:19:18.450 --> 00:19:20.530
<v Speaker 0>I want to say, like so by default,

00:19:20.530 --> 00:19:22.850
<v Speaker 0>hello would be Torin and otherwise,

00:19:23.169 --> 00:19:24.850
<v Speaker 0>David, and then I change this to world.

00:19:24.850 --> 00:19:26.210
<v Speaker 0>Now the reason I did that is because

00:19:26.210 --> 00:19:28.370
<v Speaker 0>I wanted to change the tapes system here

00:19:28.370 --> 00:19:29.010
<v Speaker 0>because Mhmm.

00:19:30.335 --> 00:19:31.855
<v Speaker 0>He said this could be a MEDI. And

00:19:31.855 --> 00:19:34.015
<v Speaker 0>what I actually thought was happening there was

00:19:34.015 --> 00:19:35.294
<v Speaker 0>this final

00:19:35.375 --> 00:19:37.615
<v Speaker 0>thing was an expression return in a billion

00:19:37.615 --> 00:19:39.375
<v Speaker 0>value, but it's not the case. What's actually

00:19:39.375 --> 00:19:42.015
<v Speaker 0>inside of these parentheses is just a number

00:19:42.015 --> 00:19:45.029
<v Speaker 0>of statements which either true or false dictate

00:19:45.029 --> 00:19:47.350
<v Speaker 0>how the assignment of this happens. If they're

00:19:47.350 --> 00:19:49.269
<v Speaker 0>all true, then we make an assignment, and

00:19:49.269 --> 00:19:51.269
<v Speaker 0>there's an implicit true. But, otherwise,

00:19:51.590 --> 00:19:53.190
<v Speaker 0>it would be the default value.

00:19:53.350 --> 00:19:55.190
<v Speaker 1>Yep. So the state so so the way

00:19:55.190 --> 00:19:56.870
<v Speaker 1>that you can kinda read that, it's it's

00:19:58.225 --> 00:20:00.225
<v Speaker 1>language is very light on syntax. There's not

00:20:00.225 --> 00:20:01.585
<v Speaker 1>a lot a lot of syntax. It's very

00:20:01.585 --> 00:20:02.224
<v Speaker 1>minimal.

00:20:02.784 --> 00:20:04.544
<v Speaker 1>The way you can kinda read it is,

00:20:04.625 --> 00:20:06.864
<v Speaker 1>you know, hello is David

00:20:07.024 --> 00:20:07.824
<v Speaker 1>if

00:20:07.904 --> 00:20:09.664
<v Speaker 1>and then the the statements inside the body

00:20:09.664 --> 00:20:10.865
<v Speaker 1>of the rule. And the statements inside the

00:20:10.865 --> 00:20:12.720
<v Speaker 1>body of the rule are anded together. So

00:20:12.720 --> 00:20:15.120
<v Speaker 1>they all need to be true or

00:20:15.440 --> 00:20:17.760
<v Speaker 1>basically, like, what we call defined in order

00:20:17.760 --> 00:20:18.320
<v Speaker 1>for

00:20:18.720 --> 00:20:20.960
<v Speaker 1>the value to be to be generated.

00:20:22.480 --> 00:20:23.920
<v Speaker 1>Okay. Cool. And so you can you can

00:20:23.920 --> 00:20:25.520
<v Speaker 1>actually and so there's a couple couple of

00:20:25.520 --> 00:20:26.720
<v Speaker 1>things that fall out of that. One is

00:20:26.720 --> 00:20:29.225
<v Speaker 1>that you can generate any JSON value. So

00:20:29.225 --> 00:20:31.304
<v Speaker 1>that like, you've generated strings here. We were

00:20:31.304 --> 00:20:33.705
<v Speaker 1>generating booleans before, but, right, JSON allows you

00:20:33.705 --> 00:20:36.424
<v Speaker 1>to express objects that contain arrays, that contain

00:20:36.424 --> 00:20:37.865
<v Speaker 1>objects, and, you know, and so on and

00:20:37.865 --> 00:20:39.545
<v Speaker 1>so forth. Right? So you can generate any

00:20:39.545 --> 00:20:41.465
<v Speaker 1>JSON value from a from a rule,

00:20:42.970 --> 00:20:44.970
<v Speaker 1>actually. And you can actually include variables as

00:20:44.970 --> 00:20:47.210
<v Speaker 1>well. So, like, if you changed David to,

00:20:47.210 --> 00:20:49.289
<v Speaker 1>like, m in this case

00:20:50.730 --> 00:20:53.049
<v Speaker 1>and you ran that, it would output world,

00:20:53.049 --> 00:20:55.210
<v Speaker 1>basically. So you can include variables in the

00:20:55.210 --> 00:20:56.555
<v Speaker 1>head of the in the head of the

00:20:56.555 --> 00:20:58.795
<v Speaker 1>rule. You can generate dynamic values this way.

00:20:58.795 --> 00:21:00.235
<v Speaker 1>Cool.

00:21:00.795 --> 00:21:02.715
<v Speaker 1>The other thing that's sort of important to

00:21:02.715 --> 00:21:04.555
<v Speaker 1>notice here is that this rule that we've

00:21:04.555 --> 00:21:06.635
<v Speaker 1>got is it's called hello.

00:21:06.795 --> 00:21:07.355
<v Speaker 1>Right?

00:21:07.915 --> 00:21:10.075
<v Speaker 1>Hello is not baked into OPA in any

00:21:10.075 --> 00:21:12.789
<v Speaker 1>way. Right? And neither is allow or deny

00:21:13.110 --> 00:21:15.830
<v Speaker 1>or or or permit or or block or

00:21:15.830 --> 00:21:17.190
<v Speaker 1>anything like that. So

00:21:17.510 --> 00:21:19.110
<v Speaker 1>all of the c's are these are these

00:21:19.110 --> 00:21:21.030
<v Speaker 1>kind of variable assignments. Right? And so you

00:21:21.030 --> 00:21:22.870
<v Speaker 1>can you can actually this is really powerful

00:21:22.870 --> 00:21:24.710
<v Speaker 1>because it means that you can build up

00:21:25.795 --> 00:21:28.355
<v Speaker 1>kinda helper rules or abstractions that, like, up

00:21:28.355 --> 00:21:29.235
<v Speaker 1>level the

00:21:29.875 --> 00:21:32.195
<v Speaker 1>the problem and and kind of, like, allow

00:21:32.195 --> 00:21:32.995
<v Speaker 1>you to create

00:21:33.395 --> 00:21:34.915
<v Speaker 1>your own kind of, like, model for for

00:21:34.915 --> 00:21:36.115
<v Speaker 1>the for the policy. And so if you

00:21:36.115 --> 00:21:37.875
<v Speaker 1>look at some of these other examples, you'll

00:21:37.875 --> 00:21:38.835
<v Speaker 1>you'll see that in action.

00:21:40.630 --> 00:21:41.190
<v Speaker 0>Okay.

00:21:42.070 --> 00:21:44.070
<v Speaker 0>Before I do that, let's just finish on

00:21:44.070 --> 00:21:45.429
<v Speaker 0>one thing from this example.

00:21:45.670 --> 00:21:48.310
<v Speaker 0>The there's a little bit of vocabulary there

00:21:48.310 --> 00:21:49.670
<v Speaker 0>that I was picking up as as we

00:21:49.670 --> 00:21:52.070
<v Speaker 0>were talking. So variables are variables. I think

00:21:52.070 --> 00:21:53.030
<v Speaker 0>that's fine.

00:21:53.430 --> 00:21:54.550
<v Speaker 0>This hello is

00:21:54.975 --> 00:21:56.014
<v Speaker 0>a rule.

00:21:56.175 --> 00:21:58.335
<v Speaker 0>And do we have are these expressions,

00:21:58.335 --> 00:22:00.895
<v Speaker 0>statements, conditions, predicates? Is there something that we

00:22:00.895 --> 00:22:03.375
<v Speaker 0>we refer to them as? Yeah. Yeah. So

00:22:03.375 --> 00:22:05.695
<v Speaker 1>we we so if you select, like, hello

00:22:05.695 --> 00:22:07.215
<v Speaker 1>all the way down to that closing brace,

00:22:08.690 --> 00:22:11.010
<v Speaker 1>we call that whole thing a rule, basically.

00:22:11.330 --> 00:22:13.570
<v Speaker 1>Correct. There are two parts to the rule.

00:22:13.570 --> 00:22:16.130
<v Speaker 1>There's the head and the body.

00:22:16.530 --> 00:22:18.929
<v Speaker 1>The head is the assignment portion,

00:22:19.170 --> 00:22:21.010
<v Speaker 1>and the body is the are the conditions.

00:22:22.445 --> 00:22:24.845
<v Speaker 1>The the or expressions, I should say. So

00:22:24.845 --> 00:22:26.365
<v Speaker 1>so the each line in the in the

00:22:26.365 --> 00:22:27.884
<v Speaker 1>body is what we call an expression,

00:22:28.125 --> 00:22:29.485
<v Speaker 1>but you could call it a condition. It

00:22:29.485 --> 00:22:31.164
<v Speaker 1>doesn't really really make a difference.

00:22:31.565 --> 00:22:32.284
<v Speaker 1>Makes sense.

00:22:32.765 --> 00:22:34.285
<v Speaker 1>So there's there's two parts to it.

00:22:37.240 --> 00:22:37.879
<v Speaker 1>And

00:22:38.280 --> 00:22:40.360
<v Speaker 1>and yeah. And then there's a there's different

00:22:40.680 --> 00:22:42.760
<v Speaker 1>you know, the basically, like, Rego allows you

00:22:42.760 --> 00:22:43.480
<v Speaker 1>to express

00:22:44.040 --> 00:22:45.080
<v Speaker 1>there there's

00:22:45.400 --> 00:22:49.000
<v Speaker 1>JSON types. Right? So strings, numbers, booleans, null,

00:22:49.000 --> 00:22:49.480
<v Speaker 1>arrays,

00:22:50.035 --> 00:22:52.595
<v Speaker 1>and objects. And then also, we add sets.

00:22:52.595 --> 00:22:54.515
<v Speaker 1>So you can actually there's set literals in

00:22:54.515 --> 00:22:55.154
<v Speaker 1>the language.

00:22:56.195 --> 00:22:58.115
<v Speaker 1>And then it's got that that thing you

00:22:58.115 --> 00:22:59.715
<v Speaker 1>see on line 24 on the right. That's

00:22:59.715 --> 00:23:01.235
<v Speaker 1>what we call a reference. So you're actually,

00:23:01.235 --> 00:23:02.355
<v Speaker 1>like, referring into

00:23:03.240 --> 00:23:05.160
<v Speaker 1>a JSON document in this case. And you

00:23:05.160 --> 00:23:06.760
<v Speaker 1>can actually you know, you can do exactly

00:23:06.760 --> 00:23:08.760
<v Speaker 1>what you'd imagine. Right? It's dot into deeply

00:23:08.760 --> 00:23:10.760
<v Speaker 1>nested structures. So if this was a, you

00:23:10.760 --> 00:23:13.720
<v Speaker 1>know, a pod or a deployment, right, you'd

00:23:13.720 --> 00:23:16.624
<v Speaker 1>have to dot several levels into

00:23:16.945 --> 00:23:19.105
<v Speaker 1>something in order to look up the value.

00:23:19.265 --> 00:23:19.825
<v Speaker 1>Yeah.

00:23:20.304 --> 00:23:21.105
<v Speaker 1>So yeah.

00:23:21.505 --> 00:23:23.184
<v Speaker 0>Nice. Okay. Is there

00:23:23.905 --> 00:23:25.585
<v Speaker 0>does it mind about the types? Like, if

00:23:25.585 --> 00:23:26.785
<v Speaker 0>I set this back to true and we

00:23:26.785 --> 00:23:29.470
<v Speaker 0>return a string, is that perfectly okay? That's

00:23:29.470 --> 00:23:31.709
<v Speaker 1>perfectly fine. Yeah. Yeah. You can do that.

00:23:33.149 --> 00:23:36.830
<v Speaker 0>Yeah. Nice. Okay. Let's switch the example then

00:23:36.830 --> 00:23:38.349
<v Speaker 0>and pick something a

00:23:38.669 --> 00:23:39.629
<v Speaker 0>little bit more

00:23:40.269 --> 00:23:41.789
<v Speaker 0>exciting. Shall we

00:23:42.515 --> 00:23:45.075
<v Speaker 0>dive straight into the some Kubernetes stuff? Sure.

00:23:45.075 --> 00:23:46.435
<v Speaker 1>Yeah. Yeah. Why don't we? Let's go to

00:23:46.435 --> 00:23:48.595
<v Speaker 1>the hello world one. Okay.

00:23:48.595 --> 00:23:49.235
<v Speaker 0>Alright.

00:23:49.475 --> 00:23:51.075
<v Speaker 0>Alright. So we have some kind of concept

00:23:51.075 --> 00:23:52.995
<v Speaker 0>of of packages, composability,

00:23:52.995 --> 00:23:55.155
<v Speaker 0>something I can I can fetch? How how

00:23:55.155 --> 00:23:57.235
<v Speaker 0>does that work with a regular and an

00:23:57.235 --> 00:23:57.475
<v Speaker 0>open?

00:23:58.220 --> 00:23:59.179
<v Speaker 1>Yeah. So

00:23:59.580 --> 00:24:01.580
<v Speaker 1>all of the all of the rules that

00:24:01.580 --> 00:24:03.580
<v Speaker 1>you that you write so in this case,

00:24:03.580 --> 00:24:05.020
<v Speaker 1>we've got a rule called deny, and I'll

00:24:05.020 --> 00:24:06.380
<v Speaker 1>get into how that how that's working in

00:24:06.380 --> 00:24:07.179
<v Speaker 1>a minute. But

00:24:07.580 --> 00:24:09.260
<v Speaker 1>all of the rules that you write are

00:24:09.260 --> 00:24:10.300
<v Speaker 1>namespaced

00:24:10.300 --> 00:24:11.580
<v Speaker 1>inside of a package.

00:24:12.265 --> 00:24:14.345
<v Speaker 1>So the package basically provides, like, a a

00:24:14.345 --> 00:24:16.585
<v Speaker 1>grouping or a namespacing of of the rules

00:24:16.585 --> 00:24:17.304
<v Speaker 1>you write,

00:24:18.105 --> 00:24:20.105
<v Speaker 1>which means that you can kind of like,

00:24:20.105 --> 00:24:22.025
<v Speaker 1>you can decompose a policy into a bunch

00:24:22.025 --> 00:24:24.265
<v Speaker 1>of different namespaces or packages and then delegate

00:24:24.740 --> 00:24:25.700
<v Speaker 1>ownership

00:24:25.700 --> 00:24:27.380
<v Speaker 1>to different namespaces. So in this case, we've

00:24:27.380 --> 00:24:28.820
<v Speaker 1>we've written a rule called deny. We put

00:24:28.820 --> 00:24:30.660
<v Speaker 1>it inside the namespace of the package. Kubernetes

00:24:30.660 --> 00:24:32.980
<v Speaker 1>validating label. And so if you wanted to,

00:24:32.980 --> 00:24:34.660
<v Speaker 1>like, look up the value of deny, you

00:24:34.660 --> 00:24:36.980
<v Speaker 1>would ask for it under that under that

00:24:36.980 --> 00:24:37.380
<v Speaker 1>package.

00:24:38.665 --> 00:24:39.945
<v Speaker 1>So this is this is what allows you

00:24:39.945 --> 00:24:42.025
<v Speaker 1>to kind of have policies from different groups

00:24:42.025 --> 00:24:42.664
<v Speaker 1>of people

00:24:43.305 --> 00:24:45.865
<v Speaker 1>brought together and then stitched together and then

00:24:45.865 --> 00:24:47.465
<v Speaker 1>and then and then ultimately, to produce a

00:24:47.465 --> 00:24:48.105
<v Speaker 1>single

00:24:48.265 --> 00:24:49.304
<v Speaker 1>kind of decision.

00:24:49.545 --> 00:24:50.825
<v Speaker 1>And so this Okay. Yeah.

00:24:51.770 --> 00:24:54.490
<v Speaker 0>I I was actually just playing around. Obviously,

00:24:54.490 --> 00:24:55.610
<v Speaker 0>I think it was it was at the

00:24:55.610 --> 00:24:56.809
<v Speaker 0>start of this week, maybe the end of

00:24:56.809 --> 00:24:58.169
<v Speaker 0>last week, but there was the whole helm

00:24:58.169 --> 00:25:00.409
<v Speaker 0>to deprecation and the helm not disappearing and

00:25:00.409 --> 00:25:02.010
<v Speaker 0>the artifact top. And I actually noticed there

00:25:02.010 --> 00:25:04.090
<v Speaker 0>were open policies available through

00:25:04.534 --> 00:25:06.054
<v Speaker 0>that as well, which I thought was great.

00:25:05.975 --> 00:25:07.894
<v Speaker 0>I never thought of it it being

00:25:08.215 --> 00:25:10.054
<v Speaker 0>packages I could ship so that we only

00:25:10.054 --> 00:25:11.575
<v Speaker 0>write it once and pass around. So that's

00:25:11.654 --> 00:25:13.335
<v Speaker 1>Exactly. Yeah. So you can you can use

00:25:13.335 --> 00:25:15.335
<v Speaker 1>this to to break the policy down into,

00:25:15.335 --> 00:25:17.974
<v Speaker 1>like, sub policies that then get stitched together.

00:25:18.375 --> 00:25:20.054
<v Speaker 1>You can also use it to create like,

00:25:20.400 --> 00:25:22.240
<v Speaker 1>you can you can define functions in Rego

00:25:22.240 --> 00:25:24.320
<v Speaker 1>as well. So you can define, like, helper

00:25:24.320 --> 00:25:27.040
<v Speaker 1>functions for for all kinds of things. Like

00:25:27.120 --> 00:25:28.480
<v Speaker 1>like, let's say you want a function that

00:25:28.480 --> 00:25:30.800
<v Speaker 1>parses a docker tag, right, into the the

00:25:30.800 --> 00:25:32.560
<v Speaker 1>repo and the registry and the, you know,

00:25:32.355 --> 00:25:33.635
<v Speaker 1>you know, so on and the and the

00:25:33.635 --> 00:25:35.794
<v Speaker 1>the version or whatever the tag. You could

00:25:35.794 --> 00:25:37.394
<v Speaker 1>write that logic in Rego

00:25:38.035 --> 00:25:40.114
<v Speaker 1>as a function and then

00:25:40.355 --> 00:25:42.275
<v Speaker 1>ship that around or reuse that inside of

00:25:42.275 --> 00:25:43.794
<v Speaker 1>your your policies, and all of it is

00:25:43.794 --> 00:25:45.554
<v Speaker 1>based on this packaging model.

00:25:45.715 --> 00:25:46.674
<v Speaker 0>Okay. Nice.

00:25:47.530 --> 00:25:49.610
<v Speaker 0>So let's take a look at this deny

00:25:49.610 --> 00:25:51.529
<v Speaker 0>then. So we haven't seen these

00:25:51.930 --> 00:25:54.809
<v Speaker 0>square brackets yet. Is this a function with

00:25:55.290 --> 00:25:56.730
<v Speaker 0>a variable being passed in?

00:25:57.850 --> 00:25:59.690
<v Speaker 1>Yeah. So this is this is a sort

00:25:59.690 --> 00:26:01.050
<v Speaker 1>of. So so you can think of it

00:26:01.050 --> 00:26:02.855
<v Speaker 1>as a function. This is basically this is

00:26:02.855 --> 00:26:05.495
<v Speaker 1>just another rule. The difference between this rule

00:26:05.495 --> 00:26:07.015
<v Speaker 1>and the one you saw before

00:26:07.335 --> 00:26:08.775
<v Speaker 1>is that this is the this is what

00:26:08.775 --> 00:26:10.855
<v Speaker 1>we call a partial rule, which essentially allows

00:26:10.855 --> 00:26:13.575
<v Speaker 1>you to assign a set of values to

00:26:13.575 --> 00:26:15.895
<v Speaker 1>a variable. So instead of assigning a single

00:26:15.895 --> 00:26:18.350
<v Speaker 1>value to a variable, this allows us to

00:26:18.350 --> 00:26:21.549
<v Speaker 1>define a set of values, so multiple values

00:26:21.549 --> 00:26:23.149
<v Speaker 1>under the same variable name.

00:26:24.029 --> 00:26:26.029
<v Speaker 1>And so the reason why this is useful

00:26:26.029 --> 00:26:27.789
<v Speaker 1>in the context of Kubernetes

00:26:28.269 --> 00:26:29.470
<v Speaker 1>and the reason why you'll see a lot

00:26:29.470 --> 00:26:31.149
<v Speaker 1>of these, like, deny rules in Kubernetes or

00:26:31.149 --> 00:26:33.995
<v Speaker 1>violation rules in Kubernetes that are structured like

00:26:33.995 --> 00:26:35.115
<v Speaker 1>this is that it means that you can

00:26:35.115 --> 00:26:37.274
<v Speaker 1>create multiple definitions of deny

00:26:37.275 --> 00:26:40.154
<v Speaker 1>that all kind of act like, conceptually

00:26:40.475 --> 00:26:41.994
<v Speaker 1>add into the set.

00:26:42.395 --> 00:26:43.914
<v Speaker 1>So in this case, we're saying

00:26:44.630 --> 00:26:47.830
<v Speaker 1>is a set that will contain message,

00:26:48.230 --> 00:26:50.870
<v Speaker 1>MSG, if the conditions in the body of

00:26:50.870 --> 00:26:52.230
<v Speaker 1>the rule hold in the and then, like,

00:26:52.230 --> 00:26:54.230
<v Speaker 1>inside the body of the rule, we're we're

00:26:54.230 --> 00:26:57.030
<v Speaker 1>basically, like, looking up to see whether the

00:26:57.030 --> 00:26:58.470
<v Speaker 1>the cost center

00:26:58.950 --> 00:26:59.430
<v Speaker 1>is there.

00:27:00.154 --> 00:27:01.755
<v Speaker 1>And if it doesn't start with the right

00:27:01.755 --> 00:27:03.835
<v Speaker 1>string, then we generate an error message and

00:27:03.835 --> 00:27:05.195
<v Speaker 1>put it into the set. And so if

00:27:05.195 --> 00:27:08.075
<v Speaker 1>you evaluate the policy, you'll see that deny

00:27:08.075 --> 00:27:09.674
<v Speaker 1>is is not just a string in this

00:27:09.674 --> 00:27:11.115
<v Speaker 1>case, but it's it's a it's a set,

00:27:11.115 --> 00:27:13.195
<v Speaker 1>or we represent sets as JSON arrays

00:27:13.434 --> 00:27:16.559
<v Speaker 1>when we serialize that. But yeah. Okay. So

00:27:16.559 --> 00:27:18.159
<v Speaker 0>this is a set of

00:27:18.640 --> 00:27:20.320
<v Speaker 0>I mean, if if this was goal, this

00:27:20.320 --> 00:27:21.600
<v Speaker 0>would be true and

00:27:21.840 --> 00:27:23.840
<v Speaker 0>excuse my typing. And then we just be

00:27:23.840 --> 00:27:24.799
<v Speaker 0>saying deny

00:27:25.039 --> 00:27:25.999
<v Speaker 0>message.

00:27:26.000 --> 00:27:27.919
<v Speaker 1>Yeah. We say there's a set deny. We

00:27:27.919 --> 00:27:29.885
<v Speaker 1>add into that set or something. Right? Equals

00:27:29.885 --> 00:27:31.725
<v Speaker 0>blah blah blah. Okay. Right. That makes sense.

00:27:31.725 --> 00:27:32.924
<v Speaker 0>Okay. Yeah.

00:27:33.725 --> 00:27:36.044
<v Speaker 0>This is checking that the

00:27:37.405 --> 00:27:40.365
<v Speaker 0>the YAML we pass into it has some

00:27:40.365 --> 00:27:42.285
<v Speaker 0>sort of certain structure. There's nothing to say

00:27:42.285 --> 00:27:44.370
<v Speaker 0>what type of YAML this is, but does

00:27:44.370 --> 00:27:45.970
<v Speaker 0>that mean if I pass in a YAML

00:27:45.970 --> 00:27:48.370
<v Speaker 0>structure that doesn't have request object metadata, like,

00:27:48.370 --> 00:27:50.290
<v Speaker 0>say it doesn't have anything below object, was

00:27:50.290 --> 00:27:52.210
<v Speaker 0>that just an immediate deny, or is that

00:27:52.210 --> 00:27:53.010
<v Speaker 0>an error?

00:27:53.330 --> 00:27:55.330
<v Speaker 0>Or It's not an error. No. So it

00:27:55.330 --> 00:27:57.170
<v Speaker 1>would just be undefined. So, basically, if you

00:27:57.170 --> 00:27:59.185
<v Speaker 1>refer to a value that doesn't exist, then

00:27:59.185 --> 00:28:01.505
<v Speaker 1>it then that that reference is just undefined.

00:28:01.505 --> 00:28:03.745
<v Speaker 1>Right? There's no value there. It's not it's

00:28:03.745 --> 00:28:05.505
<v Speaker 1>not an empty string. It's not an empty

00:28:05.505 --> 00:28:07.905
<v Speaker 1>object. It's not it's not even null because

00:28:07.905 --> 00:28:09.585
<v Speaker 1>that's a valid JSON value. It just it's

00:28:09.585 --> 00:28:11.184
<v Speaker 1>just undefined. It doesn't exist.

00:28:11.505 --> 00:28:13.585
<v Speaker 1>And when something is undefined or it doesn't

00:28:13.585 --> 00:28:16.340
<v Speaker 1>exist, then the statement is just not true.

00:28:16.340 --> 00:28:18.419
<v Speaker 1>Like, it's just not there. Right? So in

00:28:18.419 --> 00:28:20.500
<v Speaker 1>order for this message to be added into

00:28:20.500 --> 00:28:22.820
<v Speaker 1>into deny, that field has to exist. That

00:28:22.820 --> 00:28:24.820
<v Speaker 1>path has to exist in the in the

00:28:24.820 --> 00:28:25.539
<v Speaker 1>JSON.

00:28:25.860 --> 00:28:28.775
<v Speaker 0>Okay. Well, I'm I'm getting heckled already to

00:28:28.775 --> 00:28:29.735
<v Speaker 0>click evaluate.

00:28:31.015 --> 00:28:32.695
<v Speaker 0>Adrian. I'll get that done now.

00:28:33.655 --> 00:28:35.895
<v Speaker 0>So we evaluate these rules, and I we'll

00:28:35.895 --> 00:28:37.175
<v Speaker 0>go back over that in a second, and

00:28:37.175 --> 00:28:40.375
<v Speaker 0>we get deny because it does not contain.

00:28:41.840 --> 00:28:43.920
<v Speaker 0>Well, no. It does contain a call center,

00:28:43.920 --> 00:28:46.080
<v Speaker 0>but it's not formatted correctly.

00:28:46.320 --> 00:28:49.039
<v Speaker 0>Exactly. Yeah. So what this is expecting

00:28:50.480 --> 00:28:52.800
<v Speaker 0>does that dash have to exist? It's yeah.

00:28:52.800 --> 00:28:53.600
<v Speaker 0>So that would be

00:28:55.245 --> 00:28:56.445
<v Speaker 0>that should work.

00:28:57.325 --> 00:28:58.044
<v Speaker 0>K.

00:28:58.685 --> 00:29:01.085
<v Speaker 0>That's right. Yes? Yep. Yeah. Yeah. Got you

00:29:01.085 --> 00:29:01.725
<v Speaker 1>got it.

00:29:02.285 --> 00:29:05.005
<v Speaker 0>Alright. So now I wanna test the what

00:29:05.005 --> 00:29:06.925
<v Speaker 0>I was talking about there is if we

00:29:06.925 --> 00:29:09.725
<v Speaker 0>remove the request and I see a response

00:29:09.725 --> 00:29:11.989
<v Speaker 0>because I'm a terrible developer.

00:29:13.669 --> 00:29:16.229
<v Speaker 0>Yeah. There's no error. There's there's a rules

00:29:16.549 --> 00:29:18.630
<v Speaker 0>just the same. Doesn't happen. The rules don't

00:29:18.630 --> 00:29:21.750
<v Speaker 0>pass and the denies and checked. Exactly. Yeah.

00:29:21.750 --> 00:29:23.190
<v Speaker 1>If you go to the examples, there's another

00:29:23.190 --> 00:29:24.630
<v Speaker 1>one that kinda gets into this. So

00:29:25.745 --> 00:29:27.025
<v Speaker 1>label exists. Let's go to go to that

00:29:27.025 --> 00:29:29.025
<v Speaker 1>one. This this builds on the what we

00:29:29.025 --> 00:29:29.985
<v Speaker 1>were just looking at.

00:29:31.345 --> 00:29:33.585
<v Speaker 1>So so this one this policy this example

00:29:33.585 --> 00:29:35.425
<v Speaker 1>has two denier rules in it. So there's

00:29:35.425 --> 00:29:37.105
<v Speaker 1>one denier rule that's checked on the bottom

00:29:37.105 --> 00:29:39.640
<v Speaker 1>that's checking if the call center label is

00:29:39.640 --> 00:29:41.559
<v Speaker 1>present and that it has the right format.

00:29:41.960 --> 00:29:43.800
<v Speaker 1>But we've added another rule on top of

00:29:43.800 --> 00:29:44.520
<v Speaker 1>above.

00:29:44.840 --> 00:29:46.600
<v Speaker 1>The order doesn't matter, but we've added another

00:29:46.600 --> 00:29:49.160
<v Speaker 1>rule that's just checking whether that field exists

00:29:49.160 --> 00:29:51.240
<v Speaker 1>at all, and it's generating a different error

00:29:51.240 --> 00:29:53.000
<v Speaker 1>message in that case. So if you if

00:29:53.000 --> 00:29:54.120
<v Speaker 1>you do the same test now,

00:29:54.815 --> 00:29:56.495
<v Speaker 1>we'll see the output is a little bit

00:29:56.495 --> 00:29:57.134
<v Speaker 1>different.

00:29:58.895 --> 00:30:00.815
<v Speaker 1>Every reason. So So this this one doesn't

00:30:00.815 --> 00:30:02.575
<v Speaker 1>have that that cost center label in it,

00:30:02.575 --> 00:30:04.495
<v Speaker 1>I think. Yeah. There we go. Yep.

00:30:05.775 --> 00:30:06.495
<v Speaker 0>Ah, okay.

00:30:07.280 --> 00:30:10.239
<v Speaker 0>Okay. So the row are the rows executed

00:30:10.320 --> 00:30:11.840
<v Speaker 0>top to bottom? Is there any sort of

00:30:11.840 --> 00:30:13.759
<v Speaker 0>ordering semantics there? No.

00:30:14.320 --> 00:30:16.479
<v Speaker 1>So yeah. So there there is no ordering

00:30:16.799 --> 00:30:18.880
<v Speaker 1>across across the rules, and there's no ordering

00:30:18.880 --> 00:30:21.325
<v Speaker 1>within the rules either. Right? The the statements

00:30:21.485 --> 00:30:23.085
<v Speaker 1>the expressions in the rule are just added

00:30:23.085 --> 00:30:25.484
<v Speaker 1>together. Right? There's no order with with an

00:30:25.485 --> 00:30:26.124
<v Speaker 1>and.

00:30:26.525 --> 00:30:28.365
<v Speaker 1>And and what we've done here is we've

00:30:28.365 --> 00:30:31.164
<v Speaker 1>actually expressed logical or. Right? So we've said

00:30:31.645 --> 00:30:33.645
<v Speaker 1>deny contains message if

00:30:34.150 --> 00:30:36.549
<v Speaker 1>not input request yada yada yada or

00:30:37.110 --> 00:30:39.110
<v Speaker 1>deny contains message if,

00:30:39.670 --> 00:30:41.510
<v Speaker 1>you know, the value does not start with

00:30:41.510 --> 00:30:42.710
<v Speaker 1>that code. So,

00:30:43.270 --> 00:30:45.670
<v Speaker 1>yeah, when you define a rule multiple times

00:30:45.670 --> 00:30:47.350
<v Speaker 1>with the same name, that's how that's that's

00:30:47.350 --> 00:30:50.215
<v Speaker 1>an expression of logical or, essentially. We've we've

00:30:50.215 --> 00:30:52.135
<v Speaker 1>said add this message into the set if

00:30:52.135 --> 00:30:54.294
<v Speaker 1>or add it into the set if.

00:30:54.934 --> 00:30:56.614
<v Speaker 0>Ah, okay. Alright.

00:30:57.255 --> 00:30:59.255
<v Speaker 0>It's it's it's starting to get there. I'm

00:30:59.255 --> 00:31:00.855
<v Speaker 0>I'm learning. So

00:31:01.335 --> 00:31:03.095
<v Speaker 0>let's move on to this next one then,

00:31:03.095 --> 00:31:04.300
<v Speaker 0>image safety.

00:31:04.380 --> 00:31:06.620
<v Speaker 0>Now now that I'm an expert at this,

00:31:06.620 --> 00:31:07.340
<v Speaker 0>let's see.

00:31:09.260 --> 00:31:09.660
<v Speaker 0>So

00:31:11.420 --> 00:31:13.580
<v Speaker 0>no. I did as we were talking at

00:31:13.580 --> 00:31:15.980
<v Speaker 0>the start, I accidentally clicked on a doc,

00:31:15.980 --> 00:31:17.934
<v Speaker 0>which happened to reveal what the sum statement

00:31:17.934 --> 00:31:19.134
<v Speaker 0>was. The

00:31:19.615 --> 00:31:22.095
<v Speaker 0>universe because I I seen universal quantification. I

00:31:22.095 --> 00:31:23.215
<v Speaker 0>was like, alright. I need to click on

00:31:23.215 --> 00:31:23.854
<v Speaker 0>this one.

00:31:24.495 --> 00:31:26.255
<v Speaker 0>So I know that this means there's gonna

00:31:26.255 --> 00:31:28.975
<v Speaker 0>be some list of values that we wanna

00:31:28.975 --> 00:31:31.800
<v Speaker 0>iterate over. And now we're checking if it

00:31:31.800 --> 00:31:33.080
<v Speaker 0>is a pod,

00:31:33.720 --> 00:31:35.000
<v Speaker 0>and we're checking

00:31:35.160 --> 00:31:37.160
<v Speaker 0>so we're seeing here that all images must

00:31:37.160 --> 00:31:38.680
<v Speaker 0>come from hooley.com,

00:31:38.680 --> 00:31:40.039
<v Speaker 0>if I've read that right.

00:31:41.320 --> 00:31:43.320
<v Speaker 1>Exactly. Yeah. Yeah. So this this example is

00:31:43.320 --> 00:31:45.160
<v Speaker 1>saying, let's put a policy in place that

00:31:44.865 --> 00:31:47.024
<v Speaker 1>says that all container images

00:31:47.265 --> 00:31:50.065
<v Speaker 1>must come from a corporate registry. Right? And

00:31:50.785 --> 00:31:52.705
<v Speaker 1>you you could express that. Like, you could

00:31:52.705 --> 00:31:55.265
<v Speaker 1>invert the logic and say, like, only allow

00:31:55.265 --> 00:31:57.184
<v Speaker 1>if. But in this case, we've expressed it

00:31:57.184 --> 00:31:58.785
<v Speaker 1>as a as a deny list. So we've

00:31:58.785 --> 00:32:01.280
<v Speaker 1>said, if there are any images that don't

00:32:01.280 --> 00:32:02.960
<v Speaker 1>come from hooley.com, then there's some sort of,

00:32:02.960 --> 00:32:05.039
<v Speaker 1>like, error or warning that needs to occur.

00:32:06.000 --> 00:32:07.919
<v Speaker 1>Now the interesting thing about this example

00:32:08.160 --> 00:32:10.400
<v Speaker 1>is that as every as you probably know,

00:32:10.720 --> 00:32:12.880
<v Speaker 1>the pods can contain multiple containers.

00:32:14.015 --> 00:32:16.095
<v Speaker 1>And those containers

00:32:16.095 --> 00:32:18.174
<v Speaker 1>are specified as an array.

00:32:18.335 --> 00:32:19.614
<v Speaker 1>Right? And so

00:32:20.414 --> 00:32:22.975
<v Speaker 1>you could write a policy that goes and

00:32:22.975 --> 00:32:24.014
<v Speaker 1>says, okay.

00:32:24.495 --> 00:32:27.294
<v Speaker 1>Input request objects that container zero

00:32:27.529 --> 00:32:29.129
<v Speaker 1>dot image equals

00:32:29.289 --> 00:32:30.729
<v Speaker 1>or must equal something.

00:32:30.970 --> 00:32:32.809
<v Speaker 1>And then write another rule that says

00:32:34.010 --> 00:32:36.169
<v Speaker 1>spec dot containers one and then another one

00:32:36.169 --> 00:32:37.929
<v Speaker 1>that says spec dot containers two.

00:32:38.250 --> 00:32:40.010
<v Speaker 1>Right? But that would obviously be

00:32:41.325 --> 00:32:42.044
<v Speaker 1>painful

00:32:42.284 --> 00:32:44.845
<v Speaker 1>and and impossible in some cases. Right? If

00:32:44.845 --> 00:32:47.004
<v Speaker 1>you don't know the number of

00:32:47.245 --> 00:32:49.245
<v Speaker 1>containers that could possibly exist, then you'd have

00:32:49.245 --> 00:32:51.725
<v Speaker 1>to write an infinitely long list of these

00:32:51.725 --> 00:32:54.044
<v Speaker 1>these statements, and no one's got time for

00:32:54.044 --> 00:32:56.530
<v Speaker 1>that. So the way that we get around

00:32:56.530 --> 00:32:59.490
<v Speaker 1>that in Rego is is by doing iteration.

00:33:00.530 --> 00:33:02.370
<v Speaker 1>Okay? And so the the this is this

00:33:02.370 --> 00:33:04.210
<v Speaker 1>is probably the hardest concept in all of

00:33:04.210 --> 00:33:06.530
<v Speaker 1>Rego is is, like, just understanding iteration because

00:33:06.530 --> 00:33:08.370
<v Speaker 1>it's not explicit like you might be used

00:33:08.370 --> 00:33:10.455
<v Speaker 1>to if you're, like, writing Python code or

00:33:10.455 --> 00:33:12.375
<v Speaker 1>JavaScript code. It's it's more implicit in the

00:33:12.375 --> 00:33:14.375
<v Speaker 1>same way that it's implicit in, like, SQL.

00:33:15.095 --> 00:33:16.615
<v Speaker 1>And so what we've what we this this

00:33:16.615 --> 00:33:18.135
<v Speaker 1>example kinda gets into that. So what we

00:33:18.135 --> 00:33:18.855
<v Speaker 1>do here

00:33:19.415 --> 00:33:22.295
<v Speaker 1>is we declare a variable. In in, Regal,

00:33:22.295 --> 00:33:23.815
<v Speaker 1>you use the keyword some

00:33:24.040 --> 00:33:25.480
<v Speaker 1>to declare a variable.

00:33:25.880 --> 00:33:27.720
<v Speaker 1>And so we say for some I,

00:33:28.520 --> 00:33:30.040
<v Speaker 1>if the input

00:33:30.040 --> 00:33:31.399
<v Speaker 1>contains a pod

00:33:32.520 --> 00:33:35.320
<v Speaker 1>and for some I where we u we

00:33:35.320 --> 00:33:37.435
<v Speaker 1>inject I into that reference. This is like

00:33:37.435 --> 00:33:39.755
<v Speaker 1>an array index now. For some array index

00:33:39.755 --> 00:33:40.475
<v Speaker 1>I,

00:33:41.355 --> 00:33:43.595
<v Speaker 1>containers of array index i.image

00:33:43.595 --> 00:33:45.675
<v Speaker 1>does not start with hulu.com and generate an

00:33:45.675 --> 00:33:47.755
<v Speaker 1>error. So this will basically iterate over all

00:33:47.755 --> 00:33:48.875
<v Speaker 1>of the containers

00:33:49.115 --> 00:33:50.155
<v Speaker 1>in the pod

00:33:50.539 --> 00:33:52.299
<v Speaker 1>and check whether any of them

00:33:52.700 --> 00:33:55.580
<v Speaker 1>are check which ones don't start don't start

00:33:55.580 --> 00:33:56.220
<v Speaker 1>with

00:33:56.860 --> 00:33:57.739
<v Speaker 1>that string.

00:33:59.020 --> 00:34:01.100
<v Speaker 1>So if we evaluate this, you can see

00:34:01.179 --> 00:34:02.139
<v Speaker 1>MySQL

00:34:02.620 --> 00:34:03.820
<v Speaker 1>is not from

00:34:04.635 --> 00:34:05.355
<v Speaker 0>Okay.

00:34:06.075 --> 00:34:08.715
<v Speaker 0>So can I ask a question? Yeah.

00:34:09.034 --> 00:34:09.594
<v Speaker 0>So

00:34:10.155 --> 00:34:12.395
<v Speaker 0>can at the end, this can be any

00:34:12.395 --> 00:34:15.435
<v Speaker 0>JSON object. Right? Or any JSON.

00:34:15.515 --> 00:34:16.955
<v Speaker 0>Is that would that be correct? So if

00:34:16.955 --> 00:34:19.240
<v Speaker 0>I were to make this a list Mhmm.

00:34:19.560 --> 00:34:22.520
<v Speaker 0>And just actually copy it and then had

00:34:22.520 --> 00:34:24.840
<v Speaker 0>to evaluate, will that check both of those

00:34:24.840 --> 00:34:26.040
<v Speaker 0>admission reviews?

00:34:26.440 --> 00:34:29.160
<v Speaker 1>No. No. So so what's happened now is

00:34:29.160 --> 00:34:31.000
<v Speaker 1>that so so, yeah, you're right that it

00:34:31.000 --> 00:34:32.505
<v Speaker 1>it could be a JSON value. So the

00:34:32.505 --> 00:34:33.625
<v Speaker 1>important thing to keep in mind is that

00:34:33.625 --> 00:34:35.945
<v Speaker 1>OPA doesn't know anything about Kubernetes

00:34:36.744 --> 00:34:39.625
<v Speaker 1>pods or Kubernetes admission control objects. Right? It's

00:34:39.625 --> 00:34:41.784
<v Speaker 1>just a JSON blob that's been passed to

00:34:41.784 --> 00:34:43.944
<v Speaker 1>OPA that that the policy is evaluating against.

00:34:44.340 --> 00:34:46.660
<v Speaker 1>And a policy is what what applies meaning

00:34:46.660 --> 00:34:48.500
<v Speaker 1>to that JSON data. Right? So Open itself

00:34:48.500 --> 00:34:49.620
<v Speaker 1>just sees JSON,

00:34:49.700 --> 00:34:50.740
<v Speaker 1>but the policy

00:34:50.900 --> 00:34:52.740
<v Speaker 1>looks at that JSON and

00:34:52.900 --> 00:34:55.060
<v Speaker 1>applies meaning to the to the values in

00:34:55.060 --> 00:34:56.500
<v Speaker 1>in the in the JSON. And so in

00:34:56.500 --> 00:34:56.739
<v Speaker 1>this case,

00:34:57.525 --> 00:34:59.444
<v Speaker 1>you you've changed the input, so you've changed

00:34:59.444 --> 00:35:01.525
<v Speaker 1>it from an object to an array.

00:35:01.924 --> 00:35:04.405
<v Speaker 1>And that's that's totally fine. It's just that

00:35:04.405 --> 00:35:06.085
<v Speaker 1>the the the policy is now kind of,

00:35:06.085 --> 00:35:07.525
<v Speaker 1>like, out of sync with the data that's

00:35:07.525 --> 00:35:09.444
<v Speaker 1>being passed in. Right? So in this case,

00:35:09.444 --> 00:35:11.125
<v Speaker 1>we're assuming that the input is an object.

00:35:11.125 --> 00:35:12.760
<v Speaker 1>We could we could treat it as an

00:35:12.760 --> 00:35:13.800
<v Speaker 1>array. And so,

00:35:14.599 --> 00:35:15.799
<v Speaker 1>yeah, we can make the change. So if

00:35:15.799 --> 00:35:17.079
<v Speaker 1>we chain we Can I try and let

00:35:17.079 --> 00:35:17.960
<v Speaker 0>me see if I can do this in

00:35:17.960 --> 00:35:18.920
<v Speaker 0>June? Yeah. Yeah. Yeah.

00:35:19.480 --> 00:35:21.960
<v Speaker 0>I'm gonna define a second sum. I'm gonna

00:35:21.960 --> 00:35:23.080
<v Speaker 0>make my

00:35:24.440 --> 00:35:26.039
<v Speaker 0>where does that live here? Request.

00:35:26.865 --> 00:35:27.985
<v Speaker 0>I don't know if it'd be input or

00:35:27.985 --> 00:35:29.345
<v Speaker 0>request. I'll let you fix that in a

00:35:29.345 --> 00:35:31.665
<v Speaker 0>second and then change this to j just

00:35:31.665 --> 00:35:33.025
<v Speaker 0>so it's an order. Is

00:35:34.705 --> 00:35:35.665
<v Speaker 0>that pretty close?

00:35:36.625 --> 00:35:38.465
<v Speaker 1>It it it's close. Yeah. So there's just

00:35:38.465 --> 00:35:40.305
<v Speaker 1>two things to two things to observe here.

00:35:40.305 --> 00:35:42.089
<v Speaker 1>Right? So one is that we've got two

00:35:42.089 --> 00:35:44.250
<v Speaker 1>statements in this in this rule that are

00:35:44.250 --> 00:35:46.569
<v Speaker 1>referring to input. Right? So there's line 25

00:35:46.730 --> 00:35:48.170
<v Speaker 1>or that are referring to that JSON data.

00:35:48.170 --> 00:35:50.250
<v Speaker 1>There's line 25 and line 26.

00:35:50.569 --> 00:35:52.329
<v Speaker 1>Right? So we want that we'd want both

00:35:52.329 --> 00:35:53.369
<v Speaker 1>of those to be the same.

00:35:54.255 --> 00:35:55.855
<v Speaker 1>The other thing to observe here is that

00:35:55.855 --> 00:35:57.214
<v Speaker 1>in this case, like, I think the way

00:35:57.214 --> 00:35:58.734
<v Speaker 1>you change the input data, like, you just

00:35:58.734 --> 00:36:01.135
<v Speaker 1>made the top level input value an array.

00:36:01.295 --> 00:36:02.575
<v Speaker 1>You scroll up

00:36:02.815 --> 00:36:05.295
<v Speaker 1>in the input field. Yeah. So we just

00:36:06.350 --> 00:36:06.910
<v Speaker 1>oh,

00:36:07.310 --> 00:36:08.990
<v Speaker 1>yeah. Yeah. There we go. So the way

00:36:08.990 --> 00:36:11.390
<v Speaker 1>that you refer to the to the JSON

00:36:11.390 --> 00:36:13.550
<v Speaker 1>data is exactly the same as the structure

00:36:13.550 --> 00:36:15.150
<v Speaker 1>of the JSON data. Right? So in this

00:36:15.150 --> 00:36:17.310
<v Speaker 1>case, like, would we we now I'll flip

00:36:17.310 --> 00:36:18.270
<v Speaker 1>it around and ask you a question. Do

00:36:18.270 --> 00:36:20.030
<v Speaker 1>we wanna iterate over request, or do we

00:36:20.030 --> 00:36:21.470
<v Speaker 1>wanna iterate over input? Yeah. There you go.

00:36:22.645 --> 00:36:24.725
<v Speaker 0>Alright. Yeah. So I was thinking that when

00:36:24.725 --> 00:36:26.645
<v Speaker 0>I was typing that. Was like, well, it'll

00:36:26.645 --> 00:36:29.125
<v Speaker 0>a better request with input. But yeah. So

00:36:29.365 --> 00:36:30.325
<v Speaker 0>what's this

00:36:30.885 --> 00:36:31.685
<v Speaker 0>work?

00:36:31.765 --> 00:36:33.365
<v Speaker 0>It did. Yep.

00:36:33.605 --> 00:36:35.365
<v Speaker 0>Nice. And so now if you had if

00:36:35.365 --> 00:36:36.645
<v Speaker 1>you I mean, you can copy that that

00:36:36.645 --> 00:36:38.680
<v Speaker 1>JSON object if you want, and and you'll

00:36:38.680 --> 00:36:40.440
<v Speaker 1>see multiple answers come back.

00:36:42.200 --> 00:36:44.120
<v Speaker 0>How do you mean? Sorry? In the input.

00:36:44.120 --> 00:36:45.560
<v Speaker 1>So if you just take the input, the

00:36:45.560 --> 00:36:47.320
<v Speaker 1>object oh, you did. Okay. I thought, yes.

00:36:47.320 --> 00:36:49.400
<v Speaker 0>There should be oh, but I assume Role

00:36:49.400 --> 00:36:51.320
<v Speaker 0>is broken, so I'm assuming. So change the

00:36:51.320 --> 00:36:52.680
<v Speaker 1>second one. How about you change the second

00:36:52.680 --> 00:36:54.565
<v Speaker 1>one to be a different image, like,

00:36:54.725 --> 00:36:56.805
<v Speaker 1>engine? Ah, okay. So, yeah, let's set to

00:36:56.805 --> 00:36:57.765
<v Speaker 0>MariaDB.

00:36:57.765 --> 00:36:58.885
<v Speaker 0>Sure. There we go.

00:37:02.565 --> 00:37:03.365
<v Speaker 0>K.

00:37:03.845 --> 00:37:06.325
<v Speaker 0>Yeah. Nice. Yeah. So now we're searching over

00:37:06.325 --> 00:37:08.405
<v Speaker 1>all the vision objects in this array, and

00:37:08.405 --> 00:37:09.660
<v Speaker 1>then we're searching all over all of the

00:37:09.660 --> 00:37:10.700
<v Speaker 1>containers. So it

00:37:11.020 --> 00:37:13.099
<v Speaker 1>it's pretty powerful. Right? Like, we've just expressed,

00:37:13.099 --> 00:37:15.660
<v Speaker 1>like, a nested for loop here just by

00:37:15.660 --> 00:37:17.900
<v Speaker 1>putting variables into those into those references.

00:37:18.380 --> 00:37:20.300
<v Speaker 0>I mean, I can reference any

00:37:20.619 --> 00:37:22.935
<v Speaker 0>other variable here too. And could I just

00:37:22.935 --> 00:37:24.775
<v Speaker 0>say that this came from

00:37:27.335 --> 00:37:28.135
<v Speaker 0>image

00:37:29.735 --> 00:37:31.495
<v Speaker 0>button name? Oh, no. That would just be

00:37:31.495 --> 00:37:33.175
<v Speaker 0>name. Right? So Yep. But you can refer

00:37:33.175 --> 00:37:35.415
<v Speaker 1>to the container name if you wanted to.

00:37:35.415 --> 00:37:36.775
<v Speaker 1>You could you could either assign it to

00:37:36.775 --> 00:37:38.680
<v Speaker 1>a yeah. You can run that. Okay.

00:37:38.680 --> 00:37:40.920
<v Speaker 1>So now this this now we've an error

00:37:40.920 --> 00:37:43.560
<v Speaker 1>back. It's telling us, woah. Wait wait a

00:37:43.560 --> 00:37:45.160
<v Speaker 1>second. Right? So it's saying that the variable

00:37:45.160 --> 00:37:46.760
<v Speaker 1>name is unsafe.

00:37:47.160 --> 00:37:49.320
<v Speaker 1>All that means is that name hasn't been

00:37:49.320 --> 00:37:50.520
<v Speaker 1>assigned anywhere,

00:37:50.520 --> 00:37:52.120
<v Speaker 1>basically. Right? And so

00:37:52.985 --> 00:37:54.905
<v Speaker 1>that's that's not good. So we need to

00:37:54.905 --> 00:37:56.825
<v Speaker 1>assign name to some value

00:37:57.225 --> 00:37:59.545
<v Speaker 1>if we wanna use it. Ah, okay. So

00:37:59.545 --> 00:38:01.865
<v Speaker 0>down here, I would just say this is

00:38:01.865 --> 00:38:03.385
<v Speaker 0>equal to input.

00:38:03.945 --> 00:38:05.305
<v Speaker 0>I'll just copy that. We don't need to

00:38:05.465 --> 00:38:06.905
<v Speaker 0>watch me type

00:38:07.145 --> 00:38:07.465
<v Speaker 0>that.

00:38:10.210 --> 00:38:10.930
<v Speaker 0>Name.

00:38:11.809 --> 00:38:13.809
<v Speaker 0>Oh, alright. And then we have image my

00:38:13.809 --> 00:38:14.609
<v Speaker 0>SQL.

00:38:14.930 --> 00:38:15.730
<v Speaker 0>Okay.

00:38:15.730 --> 00:38:18.130
<v Speaker 0>I didn't really make it proper English sentence.

00:38:18.210 --> 00:38:20.690
<v Speaker 0>But we now have the container image name

00:38:20.690 --> 00:38:23.525
<v Speaker 0>and the container name. So nice. Like, I

00:38:23.525 --> 00:38:25.125
<v Speaker 0>can see how you can start to put

00:38:25.125 --> 00:38:27.125
<v Speaker 0>all these things together. So that's great.

00:38:28.005 --> 00:38:30.965
<v Speaker 0>Okay. So we have one more Kubernetes example,

00:38:30.965 --> 00:38:32.885
<v Speaker 0>but maybe we could just go through the

00:38:32.885 --> 00:38:34.725
<v Speaker 0>steps of like the playground is great. But

00:38:34.725 --> 00:38:38.005
<v Speaker 0>what would my developer local machine kinda workflow

00:38:38.005 --> 00:38:39.420
<v Speaker 0>look like? Or

00:38:39.820 --> 00:38:40.380
<v Speaker 0>and

00:38:40.780 --> 00:38:42.060
<v Speaker 0>Yeah. I mean, I'm assuming I can run

00:38:42.060 --> 00:38:43.339
<v Speaker 0>this on my own machine. I don't need

00:38:43.339 --> 00:38:45.180
<v Speaker 0>to copy and paste all of my my

00:38:45.180 --> 00:38:48.380
<v Speaker 0>JSON or YAML to Yeah. Totally. But this

00:38:48.380 --> 00:38:50.220
<v Speaker 1>is actually a great opportunity to try something

00:38:50.220 --> 00:38:51.740
<v Speaker 1>out from the playground, which is to click

00:38:51.740 --> 00:38:53.985
<v Speaker 1>publish on the top right. I

00:38:54.464 --> 00:38:55.665
<v Speaker 0>did look at that button, and I was

00:38:55.665 --> 00:38:57.025
<v Speaker 0>like, I wonder what that means. So

00:38:58.865 --> 00:39:00.464
<v Speaker 1>Okay. So when you when you publish a

00:39:00.464 --> 00:39:02.145
<v Speaker 1>policy in the playground, it just gives you

00:39:02.145 --> 00:39:03.345
<v Speaker 1>a shareable link. So this is a great

00:39:03.345 --> 00:39:05.600
<v Speaker 1>way, like, if you're experimenting with something and

00:39:05.600 --> 00:39:06.800
<v Speaker 1>you wanna give it to somebody and for

00:39:06.800 --> 00:39:08.080
<v Speaker 1>them to look at or you're filing an

00:39:08.080 --> 00:39:09.920
<v Speaker 1>issue against OPA or you have a question,

00:39:10.080 --> 00:39:11.360
<v Speaker 1>you know, put in the playground, share the

00:39:11.360 --> 00:39:11.920
<v Speaker 1>link,

00:39:12.240 --> 00:39:13.360
<v Speaker 1>give it to us. We can we can

00:39:13.360 --> 00:39:14.800
<v Speaker 1>look at it there. But we also give

00:39:14.800 --> 00:39:16.160
<v Speaker 1>you the steps to take this and run

00:39:16.160 --> 00:39:18.240
<v Speaker 1>it locally on your local OPA.

00:39:19.415 --> 00:39:20.215
<v Speaker 1>And so

00:39:20.775 --> 00:39:22.055
<v Speaker 1>we can go through this right now if

00:39:22.055 --> 00:39:23.415
<v Speaker 1>you want, but this this allows you to

00:39:23.415 --> 00:39:24.055
<v Speaker 1>basically

00:39:24.215 --> 00:39:25.815
<v Speaker 1>run OPA locally.

00:39:25.815 --> 00:39:27.415
<v Speaker 1>And then what it'll do actually is it'll

00:39:27.415 --> 00:39:29.655
<v Speaker 1>download the policy from the playground, and then

00:39:29.655 --> 00:39:31.335
<v Speaker 1>it'll let you interact with it locally.

00:39:32.055 --> 00:39:33.800
<v Speaker 1>You obviously do all this development locally, but

00:39:33.800 --> 00:39:35.960
<v Speaker 1>I just thought I'd kinda highlight this, which

00:39:35.960 --> 00:39:37.400
<v Speaker 1>is a a neat feature, I think, of

00:39:37.400 --> 00:39:38.440
<v Speaker 1>of the playground.

00:39:39.080 --> 00:39:40.520
<v Speaker 0>Okay. So are

00:39:41.240 --> 00:39:43.080
<v Speaker 0>these two separate options? One of them is

00:39:43.080 --> 00:39:45.080
<v Speaker 0>to run an open server locally

00:39:45.400 --> 00:39:46.760
<v Speaker 0>Mhmm. Point to

00:39:47.345 --> 00:39:49.184
<v Speaker 0>search resource. And then this one is just

00:39:49.184 --> 00:39:50.865
<v Speaker 0>to actually download the policy.

00:39:51.744 --> 00:39:53.265
<v Speaker 1>The yeah. The first one, it will run

00:39:53.265 --> 00:39:55.744
<v Speaker 1>OPA, and it'll basically configure it to use

00:39:55.744 --> 00:39:57.664
<v Speaker 1>what we call bundles in OPA. So bundles

00:39:57.664 --> 00:39:59.424
<v Speaker 1>are the way that you kinda distribute policies

00:39:59.424 --> 00:40:00.944
<v Speaker 1>and data down to the OPA. So what

00:40:00.944 --> 00:40:03.265
<v Speaker 1>it's gonna do is it's run OPA. It's

00:40:02.660 --> 00:40:04.340
<v Speaker 1>gonna configure it to pull the policy from

00:40:04.340 --> 00:40:05.220
<v Speaker 1>the playground.

00:40:06.180 --> 00:40:07.700
<v Speaker 1>And then the second thing there is showing

00:40:07.700 --> 00:40:09.380
<v Speaker 1>you how you can exercise the o like,

00:40:09.380 --> 00:40:11.380
<v Speaker 1>the policy locally on your machine via the

00:40:11.380 --> 00:40:12.900
<v Speaker 1>OPA that's gonna be running there on your

00:40:12.900 --> 00:40:14.420
<v Speaker 1>on your laptop or on your on your

00:40:14.420 --> 00:40:14.980
<v Speaker 1>desktop here.

00:40:15.765 --> 00:40:17.365
<v Speaker 0>Okay. So I should just copy this link

00:40:17.365 --> 00:40:19.045
<v Speaker 0>here then. Yep. You can just run that.

00:40:21.444 --> 00:40:23.924
<v Speaker 1>Here we go. So Open's running. It's downloaded

00:40:23.924 --> 00:40:24.885
<v Speaker 1>the policy

00:40:24.964 --> 00:40:26.645
<v Speaker 1>from the playground.

00:40:26.724 --> 00:40:29.285
<v Speaker 1>In this case, you can the the bundle

00:40:29.630 --> 00:40:31.950
<v Speaker 1>API is very simple. You can just serve

00:40:31.950 --> 00:40:34.110
<v Speaker 1>bundles on NGINX or on s three or

00:40:34.110 --> 00:40:36.350
<v Speaker 1>on any HTTP server, and they're just g

00:40:36.350 --> 00:40:38.910
<v Speaker 1>ZIP tarballs that contain policy and data files.

00:40:40.030 --> 00:40:40.990
<v Speaker 1>So it's very

00:40:41.310 --> 00:40:42.270
<v Speaker 1>HTTP friendly.

00:40:44.484 --> 00:40:45.525
<v Speaker 1>And then,

00:40:45.925 --> 00:40:47.285
<v Speaker 1>yeah, and then you can just run that.

00:40:47.285 --> 00:40:48.964
<v Speaker 1>That's gonna be the playground will serve the

00:40:48.964 --> 00:40:50.885
<v Speaker 1>input data that's that's that's there. So if

00:40:50.885 --> 00:40:50.964
<v Speaker 1>you

00:40:52.724 --> 00:40:54.805
<v Speaker 1>it's just doing some some curl magic, but

00:40:54.805 --> 00:40:56.645
<v Speaker 1>it's basically just downloading the input data from

00:40:56.645 --> 00:40:57.845
<v Speaker 1>the playground and then sending it to the

00:40:57.845 --> 00:40:58.085
<v Speaker 1>local.

00:41:02.810 --> 00:41:04.970
<v Speaker 1>Didn't it like that? Oh, it's just me

00:41:04.970 --> 00:41:06.170
<v Speaker 0>trying to pave it through Oh, no. No.

00:41:06.170 --> 00:41:08.730
<v Speaker 0>Yeah. JQ. Just give give JQ

00:41:10.250 --> 00:41:11.130
<v Speaker 1>wait.

00:41:11.290 --> 00:41:12.010
<v Speaker 1>Why didn't it?

00:41:16.545 --> 00:41:18.305
<v Speaker 1>Does that not work? What is it? Parse

00:41:18.305 --> 00:41:20.705
<v Speaker 1>it. ZSH parse error in here.

00:41:24.385 --> 00:41:26.840
<v Speaker 0>It's just the lane to endings. Maybe. Yeah.

00:41:26.840 --> 00:41:28.600
<v Speaker 0>Yeah. I think so. We go. Yeah.

00:41:29.240 --> 00:41:30.760
<v Speaker 1>So now you're getting a response from the

00:41:30.760 --> 00:41:32.280
<v Speaker 1>local OPA on

00:41:32.280 --> 00:41:33.240
<v Speaker 1>your machine.

00:41:33.960 --> 00:41:36.360
<v Speaker 0>Okay. So so just so that I understand

00:41:36.360 --> 00:41:39.480
<v Speaker 0>that correctly, when I run this OPA server

00:41:39.480 --> 00:41:42.575
<v Speaker 0>command here, the only policies is aware of

00:41:42.575 --> 00:41:44.575
<v Speaker 0>is a bundle that has been served by

00:41:44.575 --> 00:41:45.615
<v Speaker 0>the playground.

00:41:45.775 --> 00:41:48.415
<v Speaker 1>That's right. So I can just throw any

00:41:48.575 --> 00:41:49.375
<v Speaker 0>JSON

00:41:49.375 --> 00:41:52.734
<v Speaker 0>data at this most local server at the

00:41:52.734 --> 00:41:55.589
<v Speaker 0>data endpoint, and that's gonna run those policies

00:41:55.589 --> 00:41:58.310
<v Speaker 0>against it. Exactly. Locally on your machine.

00:41:58.710 --> 00:42:00.310
<v Speaker 0>Right. Okay. Cool.

00:42:01.190 --> 00:42:02.790
<v Speaker 0>That's a that's a neat feature.

00:42:03.349 --> 00:42:04.150
<v Speaker 0>Especially,

00:42:04.630 --> 00:42:06.549
<v Speaker 0>could see, you know, if people are struggling

00:42:06.795 --> 00:42:08.555
<v Speaker 0>to get their policies to work or to

00:42:08.555 --> 00:42:10.075
<v Speaker 0>test them or whatever, you know, been able

00:42:10.075 --> 00:42:11.515
<v Speaker 0>to just throw them up there and pass

00:42:11.515 --> 00:42:13.674
<v Speaker 0>them around. I can see definitely a lot

00:42:13.674 --> 00:42:14.875
<v Speaker 0>of value in that for sure.

00:42:15.355 --> 00:42:15.915
<v Speaker 0>So

00:42:16.795 --> 00:42:17.595
<v Speaker 0>let's

00:42:18.795 --> 00:42:20.315
<v Speaker 0>so do I always have to run an

00:42:20.315 --> 00:42:21.194
<v Speaker 0>open server?

00:42:22.390 --> 00:42:24.070
<v Speaker 1>No. So you can you can use OPA

00:42:24.070 --> 00:42:25.750
<v Speaker 1>in a few different ways. So

00:42:26.150 --> 00:42:27.430
<v Speaker 1>now that you have OPA on your machine,

00:42:27.430 --> 00:42:28.790
<v Speaker 1>maybe this is a good opportunity to just

00:42:28.790 --> 00:42:31.030
<v Speaker 1>kinda, like, play around with it locally.

00:42:31.030 --> 00:42:31.510
<v Speaker 1>So

00:42:32.470 --> 00:42:34.630
<v Speaker 1>if you just run OPA, it'll it'll do

00:42:34.630 --> 00:42:35.990
<v Speaker 1>the standard thing of showing you the different

00:42:35.990 --> 00:42:36.869
<v Speaker 1>commands that are available.

00:42:38.415 --> 00:42:40.015
<v Speaker 1>OPA kinda like say,

00:42:40.495 --> 00:42:42.415
<v Speaker 1>like, embodies the idea of policy as code.

00:42:42.415 --> 00:42:43.695
<v Speaker 1>So it gives you a a kind of

00:42:43.695 --> 00:42:45.295
<v Speaker 1>like a a tool chain that you can

00:42:45.295 --> 00:42:46.895
<v Speaker 1>use to interact with the policies locally on

00:42:46.895 --> 00:42:48.495
<v Speaker 1>your machine on the command line. So there's

00:42:49.800 --> 00:42:52.360
<v Speaker 1>there's tooling to, like, parse the policies, check

00:42:52.360 --> 00:42:54.440
<v Speaker 1>them, build up bun those bundles that I

00:42:54.440 --> 00:42:56.200
<v Speaker 1>was talking about, as well as just run

00:42:56.200 --> 00:42:58.200
<v Speaker 1>the policies. So if you just type overrun,

00:42:58.520 --> 00:43:00.520
<v Speaker 1>what it'll do is drop you into a

00:43:00.520 --> 00:43:02.600
<v Speaker 1>a local shell or, like, a what we

00:43:02.600 --> 00:43:04.120
<v Speaker 1>call a repo or read about print loop.

00:43:04.914 --> 00:43:06.595
<v Speaker 1>So this allows you to just run

00:43:07.315 --> 00:43:09.635
<v Speaker 1>arbitrary statements inside the policy language and then

00:43:09.635 --> 00:43:11.234
<v Speaker 1>and then see the output of them.

00:43:12.194 --> 00:43:13.555
<v Speaker 1>So you can go and define, like yeah.

00:43:13.555 --> 00:43:15.315
<v Speaker 1>Exactly. You can find a rule called hello,

00:43:15.315 --> 00:43:16.595
<v Speaker 1>and then you can ask for hello if

00:43:16.595 --> 00:43:17.474
<v Speaker 1>you just type hello now.

00:43:18.820 --> 00:43:21.700
<v Speaker 1>It'll it'll print the value of hello. Right?

00:43:22.740 --> 00:43:24.099
<v Speaker 1>So this is just what we call the

00:43:24.099 --> 00:43:25.700
<v Speaker 1>REPL. It's a sort of a low level

00:43:25.700 --> 00:43:27.619
<v Speaker 1>way of of interacting with the policies. You

00:43:27.619 --> 00:43:27.780
<v Speaker 1>can

00:43:29.540 --> 00:43:31.300
<v Speaker 1>if you do overrun and you you can

00:43:31.300 --> 00:43:32.020
<v Speaker 1>pass in files,

00:43:33.065 --> 00:43:34.424
<v Speaker 1>it'll load those up, and then you can

00:43:34.424 --> 00:43:36.984
<v Speaker 1>query them. You can interact with them. And

00:43:36.984 --> 00:43:38.585
<v Speaker 0>is that just a fail with, like, a

00:43:38.585 --> 00:43:40.424
<v Speaker 0>policy statement like here? Yeah. Yeah. So grab

00:43:40.505 --> 00:43:42.025
<v Speaker 1>like, why don't you grab this one

00:43:43.144 --> 00:43:45.144
<v Speaker 1>and just dump that into a a dot

00:43:45.144 --> 00:43:46.505
<v Speaker 1>rego file on your machine?

00:43:50.560 --> 00:43:51.520
<v Speaker 0>Call it man.

00:43:53.760 --> 00:43:55.440
<v Speaker 1>Is this Versus code, by the way? Yeah.

00:43:55.440 --> 00:43:57.680
<v Speaker 0>Is. Yeah. Okay. There we go. Nice. Perfect.

00:43:57.680 --> 00:43:59.120
<v Speaker 1>Alright. There we go. That's what I wanted

00:43:59.120 --> 00:43:59.520
<v Speaker 1>to test.

00:44:02.345 --> 00:44:04.425
<v Speaker 0>Need those colors for sure.

00:44:05.464 --> 00:44:06.984
<v Speaker 1>Yeah. It gives you colors and a little

00:44:06.984 --> 00:44:09.385
<v Speaker 1>bit more, actually. So it gives you all

00:44:09.385 --> 00:44:10.424
<v Speaker 1>the same stuff that you saw on the

00:44:10.424 --> 00:44:12.345
<v Speaker 1>playground. So that ability to, like, evaluate the

00:44:12.345 --> 00:44:14.184
<v Speaker 1>policy, you get that inside of the SQL.

00:44:14.184 --> 00:44:15.704
<v Speaker 0>Yeah. It's looking much better now. There we

00:44:15.704 --> 00:44:17.065
<v Speaker 0>go. There we go. That's beautiful.

00:44:18.570 --> 00:44:20.890
<v Speaker 0>So now yeah. Let's exit the rep. So

00:44:20.890 --> 00:44:23.450
<v Speaker 0>now that I have our main dot rego

00:44:23.450 --> 00:44:25.450
<v Speaker 0>there, I'm assuming I can just do open

00:44:25.450 --> 00:44:28.010
<v Speaker 0>run and then I'll just do help. Oh,

00:44:28.010 --> 00:44:29.530
<v Speaker 0>it's quite a lot though. Okay. So

00:44:32.615 --> 00:44:35.175
<v Speaker 0>so you just pass it fails. Perfect.

00:44:38.695 --> 00:44:40.935
<v Speaker 0>So if I type show oh, no.

00:44:41.255 --> 00:44:42.695
<v Speaker 1>So yeah. When you type show in the

00:44:42.695 --> 00:44:44.535
<v Speaker 1>in the REPL, what it does is it

00:44:44.170 --> 00:44:47.050
<v Speaker 1>any rules you've defined inside the the REPL.

00:44:48.090 --> 00:44:49.370
<v Speaker 1>The cool thing about the REPL is that

00:44:49.370 --> 00:44:50.650
<v Speaker 1>you're just writing queries.

00:44:50.730 --> 00:44:51.290
<v Speaker 1>So

00:44:54.490 --> 00:44:55.850
<v Speaker 1>okay. Guess one thing we didn't talk about

00:44:55.850 --> 00:44:57.450
<v Speaker 1>before is that all the rules that you

00:44:57.450 --> 00:44:58.650
<v Speaker 1>write and all the data that you load

00:44:58.650 --> 00:45:00.595
<v Speaker 1>into OPA is is namespaced under what we

00:45:00.595 --> 00:45:02.835
<v Speaker 1>call the data documents. There there are two,

00:45:02.835 --> 00:45:04.995
<v Speaker 1>what we call, documents in in OPA. There's

00:45:04.995 --> 00:45:07.635
<v Speaker 1>the input document which you're interacting with before.

00:45:08.035 --> 00:45:10.275
<v Speaker 1>That contains the value that the software occurring

00:45:10.275 --> 00:45:12.435
<v Speaker 1>OPA wants to send across. And then there's

00:45:12.435 --> 00:45:14.275
<v Speaker 1>the data document, which represents

00:45:15.119 --> 00:45:17.520
<v Speaker 1>it's basically all of the decisions and all

00:45:17.520 --> 00:45:19.200
<v Speaker 1>of the raw data that's cached inside of

00:45:19.200 --> 00:45:21.200
<v Speaker 1>Open that are loaded into Open. So if

00:45:21.200 --> 00:45:22.320
<v Speaker 1>you just type data,

00:45:22.640 --> 00:45:24.160
<v Speaker 1>it'll show you the value of all of

00:45:24.160 --> 00:45:25.440
<v Speaker 1>the rules that you've got

00:45:25.839 --> 00:45:27.520
<v Speaker 1>inside of the inside of the policy. And

00:45:27.520 --> 00:45:28.560
<v Speaker 1>so you can see that

00:45:29.520 --> 00:45:31.565
<v Speaker 1>it's opening this hierarchy. That hierarchy might look

00:45:31.565 --> 00:45:33.565
<v Speaker 1>familiar if you if you think back to

00:45:33.565 --> 00:45:35.005
<v Speaker 1>what was in the policy in that package

00:45:35.005 --> 00:45:35.645
<v Speaker 1>statement.

00:45:35.805 --> 00:45:38.125
<v Speaker 1>So the package defines

00:45:38.365 --> 00:45:40.845
<v Speaker 1>the location in the data document where your

00:45:40.845 --> 00:45:42.540
<v Speaker 1>rules will appear. And so in this case,

00:45:42.540 --> 00:45:45.100
<v Speaker 1>the package is Kubernetes dot validating dot images.

00:45:45.100 --> 00:45:46.540
<v Speaker 1>So that means that denial will show up

00:45:46.540 --> 00:45:48.220
<v Speaker 1>under Kubernetes validating

00:45:48.380 --> 00:45:49.180
<v Speaker 1>images

00:45:49.260 --> 00:45:51.180
<v Speaker 1>inside of the data document.

00:45:52.460 --> 00:45:55.020
<v Speaker 0>Okay. So how do I

00:45:55.965 --> 00:45:58.525
<v Speaker 0>actually validate a document then with this rule

00:45:58.525 --> 00:46:00.445
<v Speaker 0>that we've we've run over with?

00:46:00.605 --> 00:46:02.605
<v Speaker 1>So right now, the the inside the Ruffle,

00:46:02.605 --> 00:46:04.365
<v Speaker 1>we don't have an input document defined.

00:46:04.445 --> 00:46:05.965
<v Speaker 1>So when you run the policy, it's not

00:46:05.965 --> 00:46:08.380
<v Speaker 1>matching anything. So we can define an input

00:46:08.380 --> 00:46:10.460
<v Speaker 1>document in the Repl package just by typing

00:46:10.460 --> 00:46:11.260
<v Speaker 1>input,

00:46:11.260 --> 00:46:12.540
<v Speaker 1>like, colon equals

00:46:12.860 --> 00:46:15.100
<v Speaker 1>some value. Now you'll need to paste in

00:46:15.100 --> 00:46:16.860
<v Speaker 1>that thing from the from the playground in

00:46:16.860 --> 00:46:18.540
<v Speaker 1>order for this to to do the right

00:46:18.540 --> 00:46:21.885
<v Speaker 1>thing, and that should work, hopefully. Yep. Okay.

00:46:21.885 --> 00:46:23.565
<v Speaker 1>So now if you now now we've defined

00:46:23.565 --> 00:46:25.405
<v Speaker 1>a rule called input, and there's a

00:46:25.725 --> 00:46:27.645
<v Speaker 1>a convention in the around

00:46:28.765 --> 00:46:30.925
<v Speaker 1>input, like, order to how you define it.

00:46:31.005 --> 00:46:31.565
<v Speaker 1>So

00:46:31.885 --> 00:46:33.885
<v Speaker 1>just trust me that it's defined without input

00:46:33.885 --> 00:46:34.685
<v Speaker 1>document.

00:46:34.925 --> 00:46:37.570
<v Speaker 1>If you run data again, you'll you'll see

00:46:38.130 --> 00:46:40.050
<v Speaker 0>Oh, there we go. Oh, sorry. It's dumping

00:46:40.050 --> 00:46:42.210
<v Speaker 1>both the input value. So type, like, data

00:46:42.210 --> 00:46:45.170
<v Speaker 1>dot Kubernetes for example. Okay. So Yeah. There

00:46:45.170 --> 00:46:46.130
<v Speaker 1>you go. Yeah.

00:46:46.770 --> 00:46:47.410
<v Speaker 1>Yeah.

00:46:47.570 --> 00:46:48.930
<v Speaker 1>So what it's doing when you when you

00:46:48.930 --> 00:46:51.305
<v Speaker 1>run that is it's internally grabbing the value

00:46:51.305 --> 00:46:53.385
<v Speaker 1>of the input document to use, and then

00:46:53.385 --> 00:46:55.465
<v Speaker 1>it's running that that query

00:46:55.785 --> 00:46:57.225
<v Speaker 1>against the input value.

00:46:57.944 --> 00:47:00.185
<v Speaker 0>Okay. Very cool. Now

00:47:00.585 --> 00:47:01.785
<v Speaker 0>what about from

00:47:02.260 --> 00:47:03.620
<v Speaker 0>a CI perspective?

00:47:03.620 --> 00:47:05.620
<v Speaker 0>Let's assume maybe this isn't the way that

00:47:05.620 --> 00:47:07.140
<v Speaker 0>it works, but let me try and

00:47:07.860 --> 00:47:09.620
<v Speaker 0>see what I've got in my head. I

00:47:09.620 --> 00:47:12.340
<v Speaker 0>can imagine I have a project that has

00:47:12.340 --> 00:47:14.740
<v Speaker 0>some Kubernetes YAML things. And let's just say

00:47:14.740 --> 00:47:16.980
<v Speaker 0>there's a rules folder with the rules Regal

00:47:16.980 --> 00:47:19.165
<v Speaker 0>files and then there's a manifest folder with

00:47:19.165 --> 00:47:20.685
<v Speaker 0>the manifests on it. And I want my

00:47:20.685 --> 00:47:22.365
<v Speaker 0>CI system to run the rules against the

00:47:22.365 --> 00:47:24.285
<v Speaker 0>manifest. Is is there a workflow for doing

00:47:24.285 --> 00:47:24.845
<v Speaker 0>that?

00:47:25.325 --> 00:47:26.765
<v Speaker 1>Yeah. So there's there's different ways you can

00:47:26.765 --> 00:47:27.405
<v Speaker 1>do it.

00:47:27.964 --> 00:47:29.964
<v Speaker 1>On the command line with OPA, we have

00:47:29.964 --> 00:47:31.405
<v Speaker 1>this thing called OPA eval,

00:47:32.340 --> 00:47:33.780
<v Speaker 1>which lets you just run

00:47:34.420 --> 00:47:36.340
<v Speaker 1>like, it's it's basically like running the REPL,

00:47:36.340 --> 00:47:37.620
<v Speaker 1>but just on the command line. So you

00:47:37.620 --> 00:47:39.380
<v Speaker 1>can you can run a policy query

00:47:39.860 --> 00:47:40.580
<v Speaker 1>against

00:47:40.660 --> 00:47:42.980
<v Speaker 1>against a bunch of data and and and

00:47:42.980 --> 00:47:43.700
<v Speaker 1>policy files.

00:47:45.435 --> 00:47:47.515
<v Speaker 1>But it's a bit it's kinda low level.

00:47:47.515 --> 00:47:48.555
<v Speaker 1>I I can show you. So if you

00:47:48.555 --> 00:47:49.915
<v Speaker 1>just go back to the command line

00:47:50.715 --> 00:47:52.315
<v Speaker 1>Yep. And you type

00:47:52.555 --> 00:47:54.075
<v Speaker 1>open eval.

00:47:55.035 --> 00:47:56.715
<v Speaker 1>So this is similar to to what you

00:47:56.715 --> 00:47:58.155
<v Speaker 1>just did, but if you do

00:47:58.740 --> 00:47:59.860
<v Speaker 1>dash d,

00:48:00.100 --> 00:48:02.020
<v Speaker 1>so for for data or policy, and you

00:48:02.020 --> 00:48:03.460
<v Speaker 1>pass in main dot Rego,

00:48:05.940 --> 00:48:08.020
<v Speaker 1>and then dash I for input, so now

00:48:08.020 --> 00:48:08.980
<v Speaker 1>we can give it

00:48:10.340 --> 00:48:11.940
<v Speaker 1>oh, we didn't save that file to this.

00:48:11.940 --> 00:48:13.300
<v Speaker 0>I did. I got it. I'm sorry. You

00:48:13.300 --> 00:48:14.845
<v Speaker 1>got it. Alright. Perfect.

00:48:15.085 --> 00:48:16.525
<v Speaker 1>And then you do and and now you

00:48:16.525 --> 00:48:17.565
<v Speaker 1>can give it a query. So now if

00:48:17.565 --> 00:48:19.805
<v Speaker 1>you run data, just just type data.

00:48:20.205 --> 00:48:20.685
<v Speaker 1>If

00:48:21.085 --> 00:48:21.965
<v Speaker 1>you run that, it'll

00:48:22.525 --> 00:48:24.765
<v Speaker 1>yeah. Exactly. It'll it'll return the output.

00:48:25.820 --> 00:48:27.820
<v Speaker 1>Right. So you can you can run the

00:48:27.820 --> 00:48:28.940
<v Speaker 1>policies locally

00:48:29.340 --> 00:48:29.980
<v Speaker 1>using

00:48:30.380 --> 00:48:31.820
<v Speaker 1>using Open Eval.

00:48:32.140 --> 00:48:33.820
<v Speaker 1>Again, that's sort of like a Swiss army

00:48:33.820 --> 00:48:36.140
<v Speaker 1>knife for evaluating your policies. So there's all

00:48:36.140 --> 00:48:38.140
<v Speaker 1>kinds of options that it supports for, like,

00:48:38.300 --> 00:48:39.500
<v Speaker 1>doing tracing

00:48:39.500 --> 00:48:41.260
<v Speaker 1>and profiling and and other things.

00:48:42.195 --> 00:48:43.395
<v Speaker 1>But it's really meant to be just like

00:48:43.395 --> 00:48:45.075
<v Speaker 1>a Swiss army knife. And you can build

00:48:45.075 --> 00:48:47.155
<v Speaker 1>you could build, like, scripts around that that

00:48:47.155 --> 00:48:47.875
<v Speaker 1>would do

00:48:48.675 --> 00:48:50.675
<v Speaker 1>what you want in your CICD pipeline.

00:48:51.075 --> 00:48:52.595
<v Speaker 1>But it's it's a low level tool. And

00:48:52.595 --> 00:48:54.675
<v Speaker 1>so this is where, like, the CONF test

00:48:54.940 --> 00:48:58.060
<v Speaker 1>subproject comes in. So conf test provides, like,

00:48:58.060 --> 00:49:01.100
<v Speaker 1>a more opinionated way of, like, loading and

00:49:01.100 --> 00:49:03.420
<v Speaker 1>and running your your policies on the command

00:49:03.420 --> 00:49:05.260
<v Speaker 1>line. And so with conf test, you would

00:49:05.260 --> 00:49:07.100
<v Speaker 1>just say, I think, conf test

00:49:07.194 --> 00:49:09.194
<v Speaker 1>test, and then you pass in the manifest.

00:49:09.194 --> 00:49:10.795
<v Speaker 1>So it would automatically load up the data

00:49:10.875 --> 00:49:12.875
<v Speaker 1>the policy files and then run them against

00:49:13.115 --> 00:49:13.755
<v Speaker 1>your

00:49:14.315 --> 00:49:15.435
<v Speaker 1>your your

00:49:15.835 --> 00:49:17.515
<v Speaker 1>your manifest. So it it's a much more

00:49:17.515 --> 00:49:19.115
<v Speaker 1>kind of, like, developer friendly, I would say.

00:49:20.550 --> 00:49:23.030
<v Speaker 0>So using contest, does that provide a sort

00:49:23.030 --> 00:49:25.510
<v Speaker 0>of workflow where, you know, say it's maybe

00:49:25.510 --> 00:49:27.350
<v Speaker 0>like a a a standard company set up

00:49:27.350 --> 00:49:29.030
<v Speaker 0>with us, an operations team that defined the

00:49:29.030 --> 00:49:30.870
<v Speaker 0>policies in the central location, and then the

00:49:30.870 --> 00:49:33.030
<v Speaker 0>developers wanna run contest locally to see if

00:49:33.030 --> 00:49:35.385
<v Speaker 0>it passes? That's that would enable that kind

00:49:35.385 --> 00:49:36.825
<v Speaker 0>of workflow where I could say, hey. Go

00:49:36.825 --> 00:49:39.305
<v Speaker 0>and test my stuff against those rules.

00:49:39.625 --> 00:49:41.065
<v Speaker 1>Yep. So so a lot of the time,

00:49:41.065 --> 00:49:42.505
<v Speaker 1>what people will do is they'll have it

00:49:42.505 --> 00:49:44.345
<v Speaker 1>run as, a pre merge hook in in

00:49:44.345 --> 00:49:45.625
<v Speaker 1>Git or as part of, you know, as

00:49:45.625 --> 00:49:47.065
<v Speaker 1>part of CI. Right? So after

00:49:47.430 --> 00:49:50.390
<v Speaker 1>the manifest merged or even before, they'll have

00:49:50.390 --> 00:49:53.589
<v Speaker 1>contest run against against all the manifests in

00:49:53.589 --> 00:49:55.910
<v Speaker 1>in the Git repo. Right? And so they'll

00:49:57.030 --> 00:49:59.030
<v Speaker 1>the leader store the policies in the same

00:49:59.030 --> 00:50:00.710
<v Speaker 1>repo, or you can also pull them from

00:50:00.710 --> 00:50:03.485
<v Speaker 1>another another place. And so contest supports, like,

00:50:03.485 --> 00:50:05.085
<v Speaker 1>pulling from Git, pulling from

00:50:05.805 --> 00:50:07.325
<v Speaker 1>OCI registries,

00:50:08.605 --> 00:50:10.525
<v Speaker 1>as well as well as other options. So

00:50:10.525 --> 00:50:11.965
<v Speaker 1>it's it's pretty flexible in terms of how

00:50:11.965 --> 00:50:13.325
<v Speaker 1>it obtains the policies.

00:50:14.445 --> 00:50:15.885
<v Speaker 1>And then and then it'll it'll run them

00:50:15.885 --> 00:50:17.840
<v Speaker 1>against whatever files you've you've fed into it.

00:50:17.840 --> 00:50:18.960
<v Speaker 1>So it's a really nice way of of

00:50:18.960 --> 00:50:19.920
<v Speaker 1>doing kind of,

00:50:20.400 --> 00:50:22.720
<v Speaker 1>like, CICD time validation. And then, yeah, if

00:50:22.720 --> 00:50:24.000
<v Speaker 1>you wanna try it out locally on your

00:50:24.000 --> 00:50:25.520
<v Speaker 1>laptop, you can do that because it's

00:50:25.760 --> 00:50:27.360
<v Speaker 1>it's portal. That's one of the things that

00:50:27.360 --> 00:50:27.840
<v Speaker 1>we

00:50:28.480 --> 00:50:29.600
<v Speaker 1>spent a lot of time

00:50:30.375 --> 00:50:32.135
<v Speaker 1>ensuring early on in, like, development of Open

00:50:32.135 --> 00:50:33.415
<v Speaker 1>was that the policies you write ought to

00:50:33.415 --> 00:50:34.615
<v Speaker 1>be portable. I mean, you can take them

00:50:34.615 --> 00:50:36.295
<v Speaker 1>and you can, like, run them in your

00:50:36.295 --> 00:50:38.375
<v Speaker 1>Kubernetes cluster, but you can also run them,

00:50:38.375 --> 00:50:40.135
<v Speaker 1>you know, inside of a CICD pipeline just

00:50:40.135 --> 00:50:41.415
<v Speaker 1>as just as well. You can run them

00:50:41.415 --> 00:50:44.055
<v Speaker 1>offline for, like, audit purposes, for example. So

00:50:45.140 --> 00:50:46.100
<v Speaker 0>Nice. Okay.

00:50:46.500 --> 00:50:46.900
<v Speaker 0>So

00:50:47.940 --> 00:50:48.820
<v Speaker 0>let's see.

00:50:50.100 --> 00:50:51.860
<v Speaker 0>Does it make sense now?

00:50:51.940 --> 00:50:52.740
<v Speaker 0>Can

00:50:52.820 --> 00:50:54.660
<v Speaker 0>should we try and deploy this to our

00:50:54.660 --> 00:50:56.820
<v Speaker 0>Kubernetes and then do some enforcement,

00:50:56.820 --> 00:50:58.180
<v Speaker 0>or is there something else that are more

00:50:59.195 --> 00:51:01.195
<v Speaker 0>another step you think we should take here?

00:51:03.994 --> 00:51:05.195
<v Speaker 1>No. I think this is this is pretty

00:51:05.195 --> 00:51:06.475
<v Speaker 1>good. One one one of the features that

00:51:06.475 --> 00:51:08.475
<v Speaker 1>we didn't exercise, I think, in the playground

00:51:08.475 --> 00:51:09.994
<v Speaker 1>and that you get in Versus Code that

00:51:09.994 --> 00:51:12.530
<v Speaker 1>is, I think, really cool is is the

00:51:12.530 --> 00:51:14.849
<v Speaker 1>interactive evaluation. So you're, like you were clicking

00:51:15.010 --> 00:51:16.450
<v Speaker 1>actually, you can kinda see it now. I

00:51:16.450 --> 00:51:17.490
<v Speaker 1>don't know if you've caught it, but that

00:51:17.490 --> 00:51:19.170
<v Speaker 1>button up there changed.

00:51:19.410 --> 00:51:21.490
<v Speaker 1>It no longer says evaluate. It says evaluate

00:51:21.490 --> 00:51:22.370
<v Speaker 1>selection.

00:51:23.650 --> 00:51:24.050
<v Speaker 1>Ah.

00:51:24.455 --> 00:51:25.815
<v Speaker 1>And so what that means is that you

00:51:25.815 --> 00:51:26.935
<v Speaker 1>can actually select

00:51:27.495 --> 00:51:29.255
<v Speaker 1>parts of the policy. Oh, you've gone straight

00:51:29.255 --> 00:51:30.535
<v Speaker 1>to the really cool example.

00:51:30.695 --> 00:51:31.255
<v Speaker 1>Yeah.

00:51:31.815 --> 00:51:32.535
<v Speaker 1>So

00:51:32.775 --> 00:51:34.135
<v Speaker 1>yeah. So you could select you could click

00:51:34.135 --> 00:51:35.335
<v Speaker 1>evaluate selection now.

00:51:38.430 --> 00:51:39.950
<v Speaker 1>And what it does is it prints the

00:51:39.950 --> 00:51:42.430
<v Speaker 1>values of the variables that are selected inside

00:51:42.430 --> 00:51:45.150
<v Speaker 1>of that text block. Right? So it's giving

00:51:45.150 --> 00:51:46.670
<v Speaker 1>us all the values of I and j

00:51:46.670 --> 00:51:48.830
<v Speaker 1>and name and image, and it's it's reporting

00:51:48.830 --> 00:51:49.230
<v Speaker 1>that back.

00:51:50.025 --> 00:51:52.105
<v Speaker 1>So you can select basically any statement inside

00:51:52.105 --> 00:51:53.865
<v Speaker 1>the policy and and evaluate it and get

00:51:53.865 --> 00:51:55.385
<v Speaker 1>back the the current value. So, like, if

00:51:55.385 --> 00:51:57.145
<v Speaker 1>you just select deny, for example,

00:52:00.664 --> 00:52:02.265
<v Speaker 1>and then evaluate selection,

00:52:02.265 --> 00:52:03.865
<v Speaker 1>you'll just get back the value of deny.

00:52:05.200 --> 00:52:07.360
<v Speaker 1>When you run evaluate without selecting anything, what

00:52:07.360 --> 00:52:09.120
<v Speaker 1>it's doing is it's just basically just asking

00:52:09.760 --> 00:52:10.960
<v Speaker 1>for all the values of all the rules

00:52:10.960 --> 00:52:12.000
<v Speaker 1>inside the file.

00:52:12.400 --> 00:52:13.520
<v Speaker 1>But you can just as well ask for

00:52:13.520 --> 00:52:15.360
<v Speaker 1>a single rule or as you just saw

00:52:15.520 --> 00:52:17.200
<v Speaker 1>yeah. So if you run that, we've only

00:52:17.200 --> 00:52:19.520
<v Speaker 1>selected message. Right? And message isn't defined anywhere.

00:52:19.775 --> 00:52:22.415
<v Speaker 1>Right? So it's it's not safe. But yeah.

00:52:22.415 --> 00:52:24.575
<v Speaker 1>So there there's some limitations to that. Obviously,

00:52:24.575 --> 00:52:26.255
<v Speaker 1>you can't just select anything, but you can

00:52:26.255 --> 00:52:27.455
<v Speaker 1>select any expression,

00:52:27.775 --> 00:52:28.975
<v Speaker 1>any rule name,

00:52:29.535 --> 00:52:31.535
<v Speaker 1>any set of expressions inside the same rule.

00:52:33.680 --> 00:52:35.600
<v Speaker 1>Okay. Yeah. And I was wondering if it

00:52:35.600 --> 00:52:36.880
<v Speaker 0>would show me the

00:52:37.680 --> 00:52:38.800
<v Speaker 0>the violation

00:52:38.800 --> 00:52:39.760
<v Speaker 0>in some way. But

00:52:41.440 --> 00:52:43.040
<v Speaker 1>You would need to select mess the last

00:52:43.040 --> 00:52:44.400
<v Speaker 1>line in there as well. Yeah.

00:52:45.885 --> 00:52:46.845
<v Speaker 1>There we go.

00:52:49.965 --> 00:52:50.525
<v Speaker 0>Nice.

00:52:50.765 --> 00:52:53.565
<v Speaker 1>Yeah. Yeah. So that that interactive evaluation feature,

00:52:53.565 --> 00:52:55.725
<v Speaker 1>I think, is is is really powerful. It

00:52:55.725 --> 00:52:57.965
<v Speaker 1>creates a really tight, like, development loop or

00:52:57.965 --> 00:53:00.549
<v Speaker 1>a test loop when you're when you're developing

00:53:00.549 --> 00:53:02.630
<v Speaker 1>a policy or debugging a policy.

00:53:03.030 --> 00:53:04.309
<v Speaker 1>You can do it in the playground. You

00:53:04.309 --> 00:53:05.670
<v Speaker 1>can do it inside Versus Code.

00:53:06.230 --> 00:53:07.510
<v Speaker 1>You're in the rep, but it's a little

00:53:07.510 --> 00:53:09.750
<v Speaker 1>bit more low level. So yeah. So I

00:53:09.750 --> 00:53:11.910
<v Speaker 0>can do that in code as well? You

00:53:11.910 --> 00:53:12.470
<v Speaker 1>can. Yes.

00:53:13.415 --> 00:53:14.775
<v Speaker 1>You'll need to make sure that you have

00:53:14.775 --> 00:53:17.175
<v Speaker 1>Open installed in path in the path, but

00:53:17.895 --> 00:53:19.415
<v Speaker 1>the plugin ought to do that for you,

00:53:19.415 --> 00:53:19.895
<v Speaker 1>actually.

00:53:21.015 --> 00:53:23.975
<v Speaker 1>Yeah. Just blew up a oh, you're oh,

00:53:24.135 --> 00:53:24.295
<v Speaker 1>yeah.

00:53:26.480 --> 00:53:28.480
<v Speaker 0>It may work. It should work.

00:53:30.240 --> 00:53:32.320
<v Speaker 1>Don't know. It's taking some time. I'm scared.

00:53:33.359 --> 00:53:35.280
<v Speaker 0>Well, I'm running big, sir. It seems to

00:53:35.280 --> 00:53:37.039
<v Speaker 0>have slowed everything down. So Oh, really?

00:53:39.515 --> 00:53:41.355
<v Speaker 1>Oh, there we go. Okay. Alright.

00:53:41.595 --> 00:53:42.955
<v Speaker 0>Well, I mean, it's

00:53:43.515 --> 00:53:45.835
<v Speaker 0>thinking about it now. It's consider it's considering

00:53:45.835 --> 00:53:46.635
<v Speaker 1>whether it's a wide

00:53:47.195 --> 00:53:49.435
<v Speaker 0>I didn't ask it to go and update

00:53:49.435 --> 00:53:51.515
<v Speaker 0>all the the history. I just wanted it

00:53:51.515 --> 00:53:53.115
<v Speaker 0>to install a package, but whatever. Okay. So

00:53:53.115 --> 00:53:54.955
<v Speaker 0>now we have open our path,

00:53:55.329 --> 00:53:56.849
<v Speaker 0>means I should be able to do this.

00:53:56.849 --> 00:53:57.490
<v Speaker 0>Yep.

00:53:59.170 --> 00:54:01.810
<v Speaker 0>Let's see. Do I have some sort of

00:54:03.569 --> 00:54:06.770
<v Speaker 0>I do. Okay. Evaluate selection, evaluate package. So

00:54:06.770 --> 00:54:07.890
<v Speaker 0>let's try

00:54:09.089 --> 00:54:11.250
<v Speaker 0>this evaluate

00:54:11.785 --> 00:54:12.665
<v Speaker 0>action.

00:54:18.585 --> 00:54:19.225
<v Speaker 0>So

00:54:19.385 --> 00:54:20.185
<v Speaker 0>that's

00:54:20.505 --> 00:54:23.785
<v Speaker 0>interesting that it magically pulled that JSON failure

00:54:23.785 --> 00:54:24.905
<v Speaker 0>of my project

00:54:25.359 --> 00:54:27.120
<v Speaker 0>and ran the rules

00:54:28.160 --> 00:54:29.280
<v Speaker 0>against it.

00:54:30.640 --> 00:54:32.240
<v Speaker 0>How do you guys do that? So so

00:54:32.240 --> 00:54:33.359
<v Speaker 1>show me the show me the

00:54:34.000 --> 00:54:35.280
<v Speaker 1>well, yeah. So you've got this inside of

00:54:35.280 --> 00:54:37.359
<v Speaker 1>a directory or something. Yeah. I've got an

00:54:37.359 --> 00:54:38.800
<v Speaker 0>input dot JSON. Oh, there we go. Yeah.

00:54:38.800 --> 00:54:40.125
<v Speaker 1>Yeah. Yeah. Yeah. Yeah.

00:54:41.325 --> 00:54:43.245
<v Speaker 1>So the convention in Versus code is that

00:54:43.245 --> 00:54:45.405
<v Speaker 1>the input document will be pulled from input

00:54:45.405 --> 00:54:46.365
<v Speaker 1>dot JSON.

00:54:47.165 --> 00:54:48.925
<v Speaker 1>And by default, it'll just load up every

00:54:48.925 --> 00:54:50.765
<v Speaker 1>Rango file inside the workspace.

00:54:51.325 --> 00:54:51.805
<v Speaker 1>So,

00:54:52.365 --> 00:54:54.330
<v Speaker 1>yeah, so it just magically worked. So I

00:54:54.330 --> 00:54:56.330
<v Speaker 0>just got ridiculously lucky with the name of

00:54:56.330 --> 00:54:58.330
<v Speaker 0>that failed and for that to actually work.

00:54:58.730 --> 00:55:00.250
<v Speaker 1>Yeah. I mean, all of our all of

00:55:00.250 --> 00:55:02.010
<v Speaker 1>our examples say input.JSON,

00:55:02.010 --> 00:55:04.090
<v Speaker 1>and so when we were The subliminal messaging.

00:55:04.090 --> 00:55:05.850
<v Speaker 0>Yeah. Yeah. What you wanna call that fail?

00:55:05.850 --> 00:55:06.810
<v Speaker 1>You were tricked into

00:55:07.974 --> 00:55:09.575
<v Speaker 1>We didn't prepare this in any way for

00:55:09.575 --> 00:55:10.375
<v Speaker 1>the records.

00:55:10.694 --> 00:55:12.135
<v Speaker 0>No. But now I need to rename it

00:55:12.135 --> 00:55:13.255
<v Speaker 0>because I always have to see it not

00:55:13.255 --> 00:55:15.415
<v Speaker 0>work before Yeah. Not perfect.

00:55:17.494 --> 00:55:19.255
<v Speaker 0>Alright. No input files. Okay.

00:55:21.095 --> 00:55:21.494
<v Speaker 0>Okay.

00:55:22.260 --> 00:55:22.820
<v Speaker 0>There

00:55:24.100 --> 00:55:24.740
<v Speaker 0>we go.

00:55:25.140 --> 00:55:27.060
<v Speaker 0>Okay. That it's really cool that I get

00:55:27.060 --> 00:55:29.140
<v Speaker 0>all of that features as well locally. I

00:55:29.140 --> 00:55:30.660
<v Speaker 0>can see how is it it could really

00:55:30.660 --> 00:55:32.420
<v Speaker 0>quick feedback loop. I can just throw in

00:55:32.420 --> 00:55:34.900
<v Speaker 0>an input dot JSON and make it work.

00:55:34.900 --> 00:55:36.915
<v Speaker 0>Now does it care about it being JSON

00:55:36.915 --> 00:55:38.755
<v Speaker 0>if I renamed that to input dot YAML?

00:55:38.755 --> 00:55:41.155
<v Speaker 0>Are the same rules gonna be applied against

00:55:41.155 --> 00:55:41.635
<v Speaker 0>that?

00:55:42.195 --> 00:55:43.395
<v Speaker 1>That's a good question.

00:55:44.915 --> 00:55:47.395
<v Speaker 0>I don't think Should we just try it?

00:55:47.395 --> 00:55:48.675
<v Speaker 1>Yeah. Try it. I I think it I

00:55:48.675 --> 00:55:49.555
<v Speaker 1>think it's gonna fail.

00:55:50.289 --> 00:55:52.130
<v Speaker 1>We can load input files,

00:55:52.930 --> 00:55:54.769
<v Speaker 1>or we can load files like YAML files

00:55:54.769 --> 00:55:56.849
<v Speaker 1>through other APIs, but I think this one's

00:55:56.849 --> 00:55:58.369
<v Speaker 1>not gonna work. We can try, though.

00:56:01.329 --> 00:56:02.930
<v Speaker 1>Look. We're gonna get a great error message

00:56:02.930 --> 00:56:04.289
<v Speaker 1>here. I can I can already see it?

00:56:07.345 --> 00:56:09.345
<v Speaker 0>Well, Arena missed the input too.

00:56:09.345 --> 00:56:11.185
<v Speaker 0>Yeah. And let's try our

00:56:11.424 --> 00:56:12.385
<v Speaker 0>evaluate.

00:56:13.744 --> 00:56:15.984
<v Speaker 0>Alright. Okay. Yeah. No input. It didn't find

00:56:15.984 --> 00:56:16.305
<v Speaker 1>it. Yeah.

00:56:17.810 --> 00:56:19.650
<v Speaker 1>But pull requests are always welcome. So if

00:56:19.650 --> 00:56:21.170
<v Speaker 1>somebody wants to come along to the the

00:56:21.170 --> 00:56:22.930
<v Speaker 1>Versus Code plugin and give us that,

00:56:23.650 --> 00:56:25.010
<v Speaker 1>you know, we'd love to take it.

00:56:25.490 --> 00:56:28.290
<v Speaker 0>Awesome. That's really cool. Really impressed with that

00:56:28.290 --> 00:56:30.315
<v Speaker 0>plugin, actually. I don't I I don't even

00:56:30.315 --> 00:56:31.994
<v Speaker 0>think that that would be something we've been

00:56:31.994 --> 00:56:34.075
<v Speaker 0>playing with, but it's kind of really helps

00:56:34.075 --> 00:56:35.755
<v Speaker 0>work out what my workflow is gonna be

00:56:35.755 --> 00:56:37.435
<v Speaker 0>when I'm starting to put these policies together

00:56:37.435 --> 00:56:39.595
<v Speaker 0>on my own machine without having to work

00:56:39.595 --> 00:56:42.090
<v Speaker 0>from the playground as it would be. Mhmm.

00:56:42.090 --> 00:56:42.810
<v Speaker 0>Cool.

00:56:43.290 --> 00:56:44.090
<v Speaker 0>Alright.

00:56:44.890 --> 00:56:46.730
<v Speaker 0>Is there anything else you wanna wanna cover

00:56:46.730 --> 00:56:48.890
<v Speaker 0>before we finish up?

00:56:50.330 --> 00:56:51.930
<v Speaker 1>The only other thing that just occurred to

00:56:51.930 --> 00:56:54.090
<v Speaker 1>me that we really think is really powerful

00:56:54.090 --> 00:56:55.530
<v Speaker 1>about over is the ability to test your

00:56:55.530 --> 00:56:57.610
<v Speaker 1>policies, right, unit tests

00:56:57.835 --> 00:56:59.035
<v Speaker 1>for your policies.

00:57:00.635 --> 00:57:01.915
<v Speaker 1>So what we've been doing right now is

00:57:01.915 --> 00:57:03.275
<v Speaker 1>just kinda playing with it. Right? We've been

00:57:03.275 --> 00:57:05.595
<v Speaker 1>kinda, like, just poking around and and clicking

00:57:05.595 --> 00:57:08.075
<v Speaker 1>buttons and and kinda seeing what happens, which

00:57:08.075 --> 00:57:09.675
<v Speaker 1>is a great way to get started. But

00:57:09.350 --> 00:57:10.950
<v Speaker 1>when we when you when we write down

00:57:10.950 --> 00:57:12.390
<v Speaker 1>policies and rules,

00:57:12.870 --> 00:57:13.830
<v Speaker 1>just like code,

00:57:14.550 --> 00:57:15.990
<v Speaker 1>it's really powerful to be able to write

00:57:15.990 --> 00:57:17.750
<v Speaker 1>down tests for that for that code. And

00:57:17.750 --> 00:57:19.110
<v Speaker 1>so OVA comes with, like, a whole test

00:57:19.110 --> 00:57:21.190
<v Speaker 1>framework that allows you to write unit tests

00:57:21.775 --> 00:57:23.375
<v Speaker 1>for your rules and then to have those

00:57:23.375 --> 00:57:25.535
<v Speaker 1>tests run inside of Versus Code or on

00:57:25.535 --> 00:57:26.495
<v Speaker 1>the command line.

00:57:27.535 --> 00:57:29.055
<v Speaker 1>And so that's just something else I would

00:57:29.055 --> 00:57:30.815
<v Speaker 1>recommend people kinda take a look at. There's

00:57:30.815 --> 00:57:32.415
<v Speaker 1>a whole page on the in the documentation

00:57:32.415 --> 00:57:33.615
<v Speaker 1>that that goes into that.

00:57:35.220 --> 00:57:37.300
<v Speaker 1>It's it's it's in terms of that, like,

00:57:37.300 --> 00:57:38.980
<v Speaker 1>fast feedback loop that we've been talking about,

00:57:38.980 --> 00:57:40.820
<v Speaker 1>it's a really, really powerful way of accelerating

00:57:40.820 --> 00:57:42.820
<v Speaker 1>development. And, I mean, you get a regression

00:57:42.820 --> 00:57:45.140
<v Speaker 1>suite out of it automatically by doing this.

00:57:47.300 --> 00:57:49.300
<v Speaker 1>But yeah. So I highly highly recommend

00:57:49.460 --> 00:57:52.635
<v Speaker 1>people invest in test driven development when they're

00:57:52.635 --> 00:57:54.955
<v Speaker 1>working with with regular policies. It it really

00:57:54.955 --> 00:57:56.075
<v Speaker 1>speeds things up.

00:57:56.395 --> 00:57:57.675
<v Speaker 1>And because

00:57:59.115 --> 00:58:00.955
<v Speaker 1>because the language is is a kind of

00:58:00.955 --> 00:58:02.715
<v Speaker 1>a query language and because values are just

00:58:02.715 --> 00:58:03.515
<v Speaker 1>kind of first class,

00:58:04.970 --> 00:58:06.410
<v Speaker 1>you can you can really quickly get a

00:58:06.410 --> 00:58:08.410
<v Speaker 1>% coverage, and it really speeds up your

00:58:08.410 --> 00:58:10.090
<v Speaker 1>your kind of iteration time. So

00:58:10.490 --> 00:58:12.250
<v Speaker 1>definitely definitely check that out.

00:58:12.730 --> 00:58:15.050
<v Speaker 0>I mean, I'm gonna try it now. Alright.

00:58:15.050 --> 00:58:15.450
<v Speaker 1>Let's go.

00:58:17.565 --> 00:58:19.244
<v Speaker 0>Sure. Sure I could do this in two

00:58:19.244 --> 00:58:21.085
<v Speaker 0>minutes. We have a a couple of comments

00:58:21.085 --> 00:58:23.165
<v Speaker 0>as well. So Adrian has said, thank you

00:58:23.165 --> 00:58:24.285
<v Speaker 0>for this. It reminds me a bit of

00:58:24.285 --> 00:58:26.605
<v Speaker 0>x and l s t and prologue,

00:58:27.005 --> 00:58:28.365
<v Speaker 0>but it's been a long time. Yeah.

00:58:30.380 --> 00:58:31.980
<v Speaker 0>And maybe you just want to integrate Rego

00:58:31.980 --> 00:58:33.900
<v Speaker 0>into a container registry so you can run

00:58:33.900 --> 00:58:36.140
<v Speaker 0>it on image manifest. Yeah.

00:58:36.620 --> 00:58:38.540
<v Speaker 1>That's actually a cool idea. I haven't

00:58:39.500 --> 00:58:40.780
<v Speaker 1>if anybody's

00:58:40.860 --> 00:58:42.300
<v Speaker 1>brought that up. Yeah, it would be nice

00:58:42.300 --> 00:58:43.980
<v Speaker 1>to have that kind of same admission control

00:58:43.980 --> 00:58:44.540
<v Speaker 1>capability

00:58:44.835 --> 00:58:46.915
<v Speaker 1>on on at the image registry level. Yeah.

00:58:46.915 --> 00:58:48.035
<v Speaker 0>Some sort of rule where you can see

00:58:48.035 --> 00:58:49.635
<v Speaker 0>that all images have to be built for

00:58:49.635 --> 00:58:52.115
<v Speaker 0>ARM 64 or something like that just to

00:58:52.675 --> 00:58:53.955
<v Speaker 0>yeah. I can see the use case for

00:58:53.955 --> 00:58:55.875
<v Speaker 0>that. Yeah. Alright. Let's let's see if I

00:58:55.875 --> 00:58:58.130
<v Speaker 0>can I can write a test? So I'm

00:58:58.130 --> 00:59:00.290
<v Speaker 0>gonna just butcher the one I copied from

00:59:00.290 --> 00:59:01.330
<v Speaker 0>that thing.

00:59:01.730 --> 00:59:03.970
<v Speaker 0>I'll just call it test test dot

00:59:04.690 --> 00:59:05.410
<v Speaker 0>wiggle.

00:59:07.250 --> 00:59:09.330
<v Speaker 1>Naming is the hardest part of of this

00:59:09.330 --> 00:59:09.570
<v Speaker 1>whole

00:59:10.370 --> 00:59:12.565
<v Speaker 0>Well, I wanna I always like to try

00:59:12.565 --> 00:59:14.085
<v Speaker 0>and pick things that might break stuff just

00:59:14.085 --> 00:59:15.925
<v Speaker 0>to see what happens. So so I'm gonna

00:59:15.925 --> 00:59:18.085
<v Speaker 0>test the MySQL

00:59:18.085 --> 00:59:20.805
<v Speaker 0>is not allowed. And I'm assuming this just

00:59:20.805 --> 00:59:22.725
<v Speaker 0>has to kind of reflect the JSON that

00:59:22.725 --> 00:59:24.565
<v Speaker 0>I have in my input. So

00:59:25.220 --> 00:59:27.780
<v Speaker 0>I'll just steal one of these.

00:59:30.900 --> 00:59:32.420
<v Speaker 0>And if

00:59:32.420 --> 00:59:34.099
<v Speaker 0>I remove that

00:59:35.700 --> 00:59:37.700
<v Speaker 0>oh, that should be I'm assuming I can

00:59:37.700 --> 00:59:39.055
<v Speaker 0>do a low and not allow. That's the

00:59:39.055 --> 00:59:40.815
<v Speaker 0>two assertions that the test and framework is

00:59:40.815 --> 00:59:42.815
<v Speaker 0>gonna make. Is there anything else there?

00:59:43.775 --> 00:59:45.935
<v Speaker 1>So it's so so like

00:59:45.935 --> 00:59:48.495
<v Speaker 1>other things, OPA, the test framework is very

00:59:48.495 --> 00:59:51.055
<v Speaker 1>minimal. The only thing you need to do

00:59:51.055 --> 00:59:53.935
<v Speaker 1>is name the test test underscore something. So

00:59:54.430 --> 00:59:56.350
<v Speaker 1>when you run OpenTest, it'll just look for

00:59:56.350 --> 00:59:58.030
<v Speaker 1>all the rules that are called test underscore

00:59:58.030 --> 00:59:59.070
<v Speaker 1>and then run those.

00:59:59.710 --> 01:00:01.950
<v Speaker 1>What you put inside of those rules is

01:00:01.950 --> 01:00:03.630
<v Speaker 1>entirely up to you. So

01:00:04.270 --> 01:00:06.350
<v Speaker 1>you could you could refer to anything. In

01:00:06.350 --> 01:00:06.670
<v Speaker 1>this case,

01:00:07.484 --> 01:00:09.244
<v Speaker 1>we were referring to allow, which is a

01:00:09.244 --> 01:00:10.684
<v Speaker 1>rule that we defined in a in a

01:00:10.684 --> 01:00:12.125
<v Speaker 1>in a policy in that example. So what

01:00:12.125 --> 01:00:13.164
<v Speaker 1>we wanna do in this case is actually

01:00:13.164 --> 01:00:15.244
<v Speaker 1>refer to the deny rule that you've got.

01:00:16.285 --> 01:00:17.005
<v Speaker 0>Right. Okay.

01:00:19.430 --> 01:00:20.230
<v Speaker 1>However,

01:00:20.230 --> 01:00:22.870
<v Speaker 1>remember, all rules are namespaced inside of a

01:00:22.870 --> 01:00:24.630
<v Speaker 1>package. Right? So in order to report to

01:00:24.630 --> 01:00:25.350
<v Speaker 1>deny,

01:00:25.510 --> 01:00:26.790
<v Speaker 1>we either have to be inside the same

01:00:26.790 --> 01:00:28.550
<v Speaker 1>package or we need to yeah. We need

01:00:28.550 --> 01:00:30.470
<v Speaker 1>to do that. And all rules are names

01:00:30.550 --> 01:00:32.710
<v Speaker 1>yeah. Oh, there we go. Perfect. Done. Okay.

01:00:32.870 --> 01:00:35.585
<v Speaker 0>So these, yeah, okay. So these packages have

01:00:35.585 --> 01:00:37.185
<v Speaker 0>to line up. I can then use this

01:00:37.185 --> 01:00:39.425
<v Speaker 0>deny with an input. That's the same that

01:00:39.425 --> 01:00:41.345
<v Speaker 0>everything has to start with Hooley. So what

01:00:41.345 --> 01:00:42.865
<v Speaker 0>I'm gonna do is this test to say

01:00:42.865 --> 01:00:44.225
<v Speaker 0>that this should be

01:00:45.425 --> 01:00:46.865
<v Speaker 0>denied with

01:00:50.120 --> 01:00:51.080
<v Speaker 0>Is that right?

01:00:51.560 --> 01:00:52.680
<v Speaker 1>So it

01:00:53.480 --> 01:00:54.760
<v Speaker 1>this will run. So why why don't we

01:00:54.760 --> 01:00:56.040
<v Speaker 1>run this, and and then we can kinda,

01:00:56.040 --> 01:00:58.120
<v Speaker 1>like, debug it and see kinda what happens.

01:01:00.440 --> 01:01:01.080
<v Speaker 0>Test test.

01:01:02.815 --> 01:01:03.535
<v Speaker 1>Yeah.

01:01:04.095 --> 01:01:05.535
<v Speaker 1>So why don't you just run just do

01:01:05.535 --> 01:01:06.975
<v Speaker 1>test

01:01:09.375 --> 01:01:10.735
<v Speaker 1>dash b

01:01:11.775 --> 01:01:14.255
<v Speaker 1>and then b as in bicycle,

01:01:14.575 --> 01:01:15.615
<v Speaker 1>and then just do dot.

01:01:17.510 --> 01:01:18.230
<v Speaker 1>Alright.

01:01:18.390 --> 01:01:20.550
<v Speaker 1>So all that's going on here is we're

01:01:20.550 --> 01:01:21.190
<v Speaker 1>saying

01:01:21.430 --> 01:01:23.190
<v Speaker 1>open test dot, which is just saying the

01:01:23.190 --> 01:01:24.869
<v Speaker 1>current directory. So it's gonna load all the

01:01:24.869 --> 01:01:26.230
<v Speaker 1>files in the current directory.

01:01:26.390 --> 01:01:28.070
<v Speaker 1>And it'll do that recursively, by the way.

01:01:28.070 --> 01:01:29.510
<v Speaker 1>So all the open tooling kinda works this

01:01:29.510 --> 01:01:31.190
<v Speaker 1>way. You can pass in a directory path

01:01:31.425 --> 01:01:32.865
<v Speaker 1>for any of the the file paths, and

01:01:32.865 --> 01:01:34.305
<v Speaker 1>it'll load all the files in that directory

01:01:34.305 --> 01:01:35.905
<v Speaker 1>as well as all the subdirectories and so

01:01:35.905 --> 01:01:38.145
<v Speaker 1>on. So it'll recursively load all the the

01:01:38.145 --> 01:01:40.065
<v Speaker 1>Regal and data files that it finds.

01:01:40.465 --> 01:01:41.585
<v Speaker 1>Dash b,

01:01:42.145 --> 01:01:44.510
<v Speaker 1>as in bicycle, tells the OpenTooling

01:01:44.510 --> 01:01:47.230
<v Speaker 1>to follow the, like, bundle layout. So what

01:01:47.230 --> 01:01:48.750
<v Speaker 1>that means is it'll load all the Rego

01:01:48.750 --> 01:01:50.190
<v Speaker 1>files that it finds

01:01:50.510 --> 01:01:52.030
<v Speaker 1>as well as all the

01:01:52.670 --> 01:01:54.910
<v Speaker 1>files called data dot JSON or data dot

01:01:54.910 --> 01:01:56.270
<v Speaker 1>YAML. So that's how you can load in,

01:01:56.270 --> 01:01:58.704
<v Speaker 1>like, raw JSON data if you want. Without

01:01:58.704 --> 01:02:01.185
<v Speaker 1>dash b can run it without dash b

01:02:01.345 --> 01:02:02.785
<v Speaker 1>and just see what happens.

01:02:03.905 --> 01:02:05.345
<v Speaker 1>Yeah. So what what happened there is it

01:02:05.345 --> 01:02:07.025
<v Speaker 1>tried to load all the data files as

01:02:07.025 --> 01:02:08.865
<v Speaker 1>well as all the YAML and JSON files

01:02:08.865 --> 01:02:10.545
<v Speaker 1>and then load them into data like, into

01:02:10.545 --> 01:02:12.720
<v Speaker 1>the data keyword in the language. And when

01:02:12.720 --> 01:02:14.400
<v Speaker 1>it did that, it it ran into some

01:02:14.400 --> 01:02:17.200
<v Speaker 1>problems. Like, it it tried to merge input

01:02:17.200 --> 01:02:19.280
<v Speaker 1>dot YAML and input two dot JSON together,

01:02:19.280 --> 01:02:20.880
<v Speaker 1>and it just couldn't do that because

01:02:22.000 --> 01:02:23.600
<v Speaker 1>well, because they're arrays, I think. Right? So

01:02:23.600 --> 01:02:24.880
<v Speaker 1>you can't really, like, merge arrays.

01:02:26.065 --> 01:02:27.905
<v Speaker 1>So we can we can just kinda, like,

01:02:28.145 --> 01:02:30.145
<v Speaker 1>avoid that problem by doing dash b, which

01:02:30.145 --> 01:02:32.065
<v Speaker 1>will cause it to ignore those those input

01:02:32.065 --> 01:02:32.705
<v Speaker 1>files.

01:02:33.665 --> 01:02:35.105
<v Speaker 0>Yeah. I mean,

01:02:35.425 --> 01:02:36.065
<v Speaker 0>I

01:02:37.265 --> 01:02:38.945
<v Speaker 0>what make this an array? Does it then

01:02:38.945 --> 01:02:39.665
<v Speaker 0>do the merge?

01:02:40.670 --> 01:02:42.350
<v Speaker 1>It will try to merge.

01:02:43.230 --> 01:02:44.430
<v Speaker 1>However, it's gonna

01:02:45.630 --> 01:02:47.470
<v Speaker 1>well, it might no. I think it's gonna

01:02:47.470 --> 01:02:48.830
<v Speaker 1>run into problems with the those arrays in

01:02:48.830 --> 01:02:49.950
<v Speaker 1>there, but try it out and see what

01:02:49.950 --> 01:02:50.510
<v Speaker 1>happens.

01:02:52.190 --> 01:02:53.790
<v Speaker 1>Merge error. Yeah. It's running into a merge

01:02:53.790 --> 01:02:55.205
<v Speaker 1>error on those on files. But if you

01:02:55.205 --> 01:02:56.885
<v Speaker 1>if you go to the, like, input YAML

01:02:56.885 --> 01:02:58.645
<v Speaker 1>and you just put a key at the

01:02:58.645 --> 01:02:59.525
<v Speaker 1>top level with, like

01:03:00.165 --> 01:03:02.165
<v Speaker 1>just just indent it by one and then

01:03:02.325 --> 01:03:04.725
<v Speaker 1>yeah. And then yeah.

01:03:04.885 --> 01:03:06.165
<v Speaker 1>And then perfect.

01:03:06.579 --> 01:03:07.860
<v Speaker 1>Yeah. Now it'll

01:03:08.180 --> 01:03:09.540
<v Speaker 1>be totally happy.

01:03:10.660 --> 01:03:12.100
<v Speaker 1>I'll put the JSON

01:03:13.380 --> 01:03:14.580
<v Speaker 0>to merger.

01:03:15.220 --> 01:03:17.220
<v Speaker 0>Well, is that because I've now changed the

01:03:17.220 --> 01:03:19.940
<v Speaker 0>format of that and not the rules? Got

01:03:20.260 --> 01:03:21.059
<v Speaker 1>is that an array?

01:03:22.755 --> 01:03:24.835
<v Speaker 0>I I stopped it being an array. Now

01:03:24.835 --> 01:03:25.955
<v Speaker 0>it's an array again.

01:03:26.515 --> 01:03:28.595
<v Speaker 1>If it's an array, it's gonna you can't

01:03:28.595 --> 01:03:30.675
<v Speaker 1>use an array at that level

01:03:31.395 --> 01:03:32.355
<v Speaker 1>for data.

01:03:33.234 --> 01:03:33.315
<v Speaker 0>Okay.

01:03:34.080 --> 01:03:37.040
<v Speaker 0>Anyway Let's not yeah. I'm gonna rattle on

01:03:37.040 --> 01:03:39.760
<v Speaker 1>the data. What I'm curious about is, like,

01:03:40.480 --> 01:03:42.080
<v Speaker 0>this test passed.

01:03:42.240 --> 01:03:43.520
<v Speaker 0>Right. And that's the that

01:03:44.080 --> 01:03:46.240
<v Speaker 0>let's let's finish on this then. So why

01:03:46.240 --> 01:03:47.600
<v Speaker 0>did this pass

01:03:48.365 --> 01:03:51.005
<v Speaker 0>when it's not a Hooly container image?

01:03:51.244 --> 01:03:52.845
<v Speaker 1>So so so the reason why it passed

01:03:52.845 --> 01:03:55.244
<v Speaker 1>is that, like, deny doesn't mean anything to

01:03:55.244 --> 01:03:57.165
<v Speaker 1>OPA. Deny is just a set,

01:03:57.724 --> 01:03:59.885
<v Speaker 1>and it happens to be it's a set.

01:03:59.885 --> 01:04:01.645
<v Speaker 1>So it's actually gonna always pass regardless of

01:04:01.645 --> 01:04:02.925
<v Speaker 1>whether or not there's a value inside of

01:04:02.925 --> 01:04:05.270
<v Speaker 1>that because that, like basically, the statement on

01:04:05.270 --> 01:04:07.350
<v Speaker 1>line four is it it's it's always true.

01:04:07.350 --> 01:04:08.790
<v Speaker 1>It's either an empty set or it's a

01:04:08.790 --> 01:04:10.150
<v Speaker 1>set that contains values.

01:04:10.710 --> 01:04:12.310
<v Speaker 1>So in order to, like, actually write this

01:04:12.310 --> 01:04:13.990
<v Speaker 1>test properly, what we wanna do is assert

01:04:13.990 --> 01:04:16.150
<v Speaker 1>on the val like, value of deny.

01:04:16.230 --> 01:04:17.270
<v Speaker 1>So we'd wanna say

01:04:17.875 --> 01:04:18.675
<v Speaker 1>deny

01:04:18.915 --> 01:04:20.515
<v Speaker 1>and and, like, these tests are are simpler

01:04:20.515 --> 01:04:22.275
<v Speaker 1>because allow is like a Boolean value. It's

01:04:22.275 --> 01:04:24.435
<v Speaker 1>either true or false. And so what we're

01:04:24.435 --> 01:04:27.155
<v Speaker 1>testing is, like, that it's either true or

01:04:27.155 --> 01:04:28.755
<v Speaker 1>it's false. And if you just say

01:04:29.155 --> 01:04:31.475
<v Speaker 1>allow and allow happens to be false,

01:04:33.440 --> 01:04:35.200
<v Speaker 1>then the test is gonna fail because one

01:04:35.200 --> 01:04:36.480
<v Speaker 1>of the because the statement in the body

01:04:36.480 --> 01:04:38.640
<v Speaker 1>of the test is false. Right? So,

01:04:40.400 --> 01:04:42.400
<v Speaker 1>yeah, so for this deny rule, what we'd

01:04:42.400 --> 01:04:43.839
<v Speaker 1>wanna do is test the actual

01:04:45.525 --> 01:04:47.525
<v Speaker 1>value of that deny set. So we'd wanna

01:04:47.525 --> 01:04:49.525
<v Speaker 1>say deny is nonempty

01:04:49.525 --> 01:04:52.565
<v Speaker 1>or deny contains error mess like, error messages.

01:04:54.565 --> 01:04:55.285
<v Speaker 0>Is that enough?

01:04:58.790 --> 01:05:00.710
<v Speaker 1>It's in this case, deny is a set.

01:05:00.710 --> 01:05:03.030
<v Speaker 1>So what you'd wanna do is declare an

01:05:03.030 --> 01:05:04.790
<v Speaker 1>empty set. So you could just say

01:05:05.510 --> 01:05:07.670
<v Speaker 1>you you can say set print, like, call

01:05:07.670 --> 01:05:09.190
<v Speaker 1>set say set, and then, like you would

01:05:09.190 --> 01:05:10.710
<v Speaker 1>in Python, you'd say set

01:05:11.349 --> 01:05:12.869
<v Speaker 1>low lowercase set.

01:05:17.905 --> 01:05:20.545
<v Speaker 0>K. So that failed because we're getting something

01:05:20.545 --> 01:05:22.945
<v Speaker 0>back from the deny rule, which is that

01:05:22.945 --> 01:05:25.025
<v Speaker 0>this is not a a hooly

01:05:25.880 --> 01:05:26.440
<v Speaker 0>image.

01:05:27.240 --> 01:05:28.760
<v Speaker 1>Right.

01:05:28.760 --> 01:05:30.280
<v Speaker 1>Wait. Hang on a second.

01:05:31.560 --> 01:05:34.040
<v Speaker 1>No. Wait. That that that that statement should've

01:05:35.160 --> 01:05:36.280
<v Speaker 0>Oh, no. I can't spell.

01:05:38.055 --> 01:05:40.375
<v Speaker 1>Yeah. Oh, there. Is that No. No. No.

01:05:40.375 --> 01:05:41.734
<v Speaker 1>There's something wrong with the logic. Hang on.

01:05:41.734 --> 01:05:42.295
<v Speaker 1>So

01:05:43.015 --> 01:05:44.855
<v Speaker 1>this should generate an error. So the set

01:05:44.855 --> 01:05:46.135
<v Speaker 1>should be nonempty.

01:05:53.895 --> 01:05:55.070
<v Speaker 1>So that should be set as like what

01:05:55.070 --> 01:05:56.750
<v Speaker 1>happens if you just select that whole I

01:05:56.750 --> 01:05:57.950
<v Speaker 1>just wanna make sure that we're not missing

01:05:57.950 --> 01:06:00.110
<v Speaker 1>something here. If you select, like, lines, whatever,

01:06:00.110 --> 01:06:01.870
<v Speaker 1>three through 29

01:06:05.630 --> 01:06:08.315
<v Speaker 1>four through 29, And you evaluate that.

01:06:08.555 --> 01:06:10.075
<v Speaker 1>Oh, I think I know what's wrong.

01:06:13.115 --> 01:06:14.875
<v Speaker 1>Okay. So deny is empty.

01:06:15.515 --> 01:06:18.234
<v Speaker 0>Problem is I renamed the input file. So

01:06:18.234 --> 01:06:19.770
<v Speaker 0>the task force pattern to be an input

01:06:19.770 --> 01:06:21.610
<v Speaker 0>dot JSON. No? No.

01:06:21.610 --> 01:06:23.210
<v Speaker 1>No. Remember what we did in the policy?

01:06:23.210 --> 01:06:24.410
<v Speaker 1>We made it so that it expects an

01:06:24.410 --> 01:06:25.690
<v Speaker 1>array for input.

01:06:28.890 --> 01:06:29.530
<v Speaker 0>Yep.

01:06:30.010 --> 01:06:32.410
<v Speaker 1>So in in main dot rego, it's expecting

01:06:33.075 --> 01:06:34.755
<v Speaker 1>input to be an array, but in the

01:06:34.755 --> 01:06:36.915
<v Speaker 1>test, we've just specified it as an object.

01:06:37.075 --> 01:06:39.875
<v Speaker 0>Ah, ah, okay. Gotcha. Gotcha. Gotcha.

01:06:41.315 --> 01:06:42.675
<v Speaker 0>Oh, yeah. There's nothing to do with the

01:06:42.675 --> 01:06:44.755
<v Speaker 0>input dot JSON because we're defining the input

01:06:44.515 --> 01:06:45.395
<v Speaker 0>We're in we're in the

01:06:45.795 --> 01:06:46.035
<v Speaker 1>Yep.

01:06:47.910 --> 01:06:48.710
<v Speaker 0>Alright.

01:06:50.150 --> 01:06:51.030
<v Speaker 0>And

01:06:53.990 --> 01:06:55.510
<v Speaker 1>if you select that again and run that,

01:06:55.510 --> 01:06:55.910
<v Speaker 1>does it

01:06:58.710 --> 01:06:59.829
<v Speaker 0>So evaluate.

01:07:01.825 --> 01:07:02.625
<v Speaker 1>Why?

01:07:09.505 --> 01:07:11.265
<v Speaker 1>So it's giving us one result back, and

01:07:11.265 --> 01:07:13.825
<v Speaker 1>it's saying that deny is empty.

01:07:14.545 --> 01:07:16.545
<v Speaker 0>But this says using input dot JSON and

01:07:16.545 --> 01:07:18.145
<v Speaker 0>not

01:07:17.400 --> 01:07:18.040
<v Speaker 0>this.

01:07:18.599 --> 01:07:20.760
<v Speaker 1>Yes. Yeah. Yeah. That one's using input dot

01:07:20.760 --> 01:07:21.560
<v Speaker 1>JSON.

01:07:21.799 --> 01:07:23.559
<v Speaker 1>But it shouldn't matter. Like, it should replace

01:07:23.559 --> 01:07:24.680
<v Speaker 1>it with the

01:07:26.440 --> 01:07:27.799
<v Speaker 1>the value from inside the query.

01:07:30.155 --> 01:07:32.234
<v Speaker 1>So what am I what am I missing

01:07:32.234 --> 01:07:32.875
<v Speaker 1>here?

01:07:33.755 --> 01:07:34.555
<v Speaker 1>And

01:07:35.755 --> 01:07:37.835
<v Speaker 0>this yeah. That should still fail.

01:07:38.234 --> 01:07:39.195
<v Speaker 1>Can you

01:07:39.835 --> 01:07:42.075
<v Speaker 1>yeah. I mean, if you if you remove

01:07:42.075 --> 01:07:44.395
<v Speaker 1>the width part, like, width input as and

01:07:44.395 --> 01:07:45.994
<v Speaker 1>just do that same query, what is it?

01:07:48.130 --> 01:07:49.650
<v Speaker 1>Yeah. We could use coverage here to see

01:07:49.650 --> 01:07:50.930
<v Speaker 1>where it's failing. I think that's what we'll

01:07:50.930 --> 01:07:51.730
<v Speaker 1>end up doing.

01:07:53.810 --> 01:07:55.570
<v Speaker 1>So just select an eye now.

01:07:57.650 --> 01:08:00.850
<v Speaker 1>And then yeah. Okay. So that's that's behaving

01:08:00.850 --> 01:08:01.570
<v Speaker 1>as we'd expect.

01:08:05.285 --> 01:08:07.685
<v Speaker 1>K. So put the put the width back.

01:08:09.285 --> 01:08:11.125
<v Speaker 1>Yeah. So if you select deny

01:08:11.205 --> 01:08:13.285
<v Speaker 1>the whole thing, and then you can do

01:08:13.285 --> 01:08:15.605
<v Speaker 1>eval with coverage, and that'll show us what

01:08:15.605 --> 01:08:16.085
<v Speaker 1>lines.

01:08:18.750 --> 01:08:20.109
<v Speaker 1>Look for coverage.

01:08:20.109 --> 01:08:21.389
<v Speaker 1>Select toggle

01:08:21.389 --> 01:08:22.909
<v Speaker 1>evaluation coverage. Yeah.

01:08:23.949 --> 01:08:25.869
<v Speaker 1>So now go into main.Rego.

01:08:28.829 --> 01:08:30.510
<v Speaker 1>Oh, wait. Just why is it not the

01:08:30.510 --> 01:08:32.029
<v Speaker 1>highlighting is not showing up. Well, that's not

01:08:32.029 --> 01:08:32.270
<v Speaker 1>good.

01:08:44.005 --> 01:08:45.444
<v Speaker 0>I'm sure it's something I've done.

01:08:47.040 --> 01:08:48.960
<v Speaker 1>Yeah. I just can't see the

01:08:49.600 --> 01:08:51.520
<v Speaker 0>No. I made that hooly image, so that

01:08:51.520 --> 01:08:53.120
<v Speaker 0>would actually pass anyway. Right?

01:08:54.560 --> 01:08:56.000
<v Speaker 1>Well, it should be the set should be

01:08:56.000 --> 01:08:57.199
<v Speaker 1>nonempty now,

01:08:57.840 --> 01:08:58.800
<v Speaker 1>I would expect.

01:09:11.625 --> 01:09:13.944
<v Speaker 1>Can you just just copy this entire file

01:09:13.944 --> 01:09:15.545
<v Speaker 1>and paste it into the playground?

01:09:16.024 --> 01:09:17.625
<v Speaker 0>I could just delete it if you want.

01:09:21.229 --> 01:09:22.670
<v Speaker 0>Up to here? I wanna know why it

01:09:22.670 --> 01:09:24.270
<v Speaker 1>does or just paste the test below the

01:09:24.270 --> 01:09:25.870
<v Speaker 1>deny rule in the in the playground. Oh,

01:09:25.870 --> 01:09:26.590
<v Speaker 1>okay.

01:09:32.350 --> 01:09:33.885
<v Speaker 0>I guess I'll need to remove that duplicate

01:09:33.885 --> 01:09:34.925
<v Speaker 0>package.

01:09:35.325 --> 01:09:37.885
<v Speaker 1>Yeah. Let's go to the package. And then

01:09:39.005 --> 01:09:41.484
<v Speaker 1>and then select, like, 33 through

01:09:43.085 --> 01:09:45.484
<v Speaker 1>the bottom of them. Yeah. 258. And then

01:09:45.484 --> 01:09:46.845
<v Speaker 1>run click coverage

01:09:47.670 --> 01:09:49.109
<v Speaker 1>and then evaluate.

01:09:50.710 --> 01:09:52.310
<v Speaker 1>Okay. Now scroll up.

01:09:56.470 --> 01:09:57.270
<v Speaker 1>Wait a second.

01:10:01.185 --> 01:10:03.264
<v Speaker 1>Wait. It's different. We we are seeing a

01:10:03.264 --> 01:10:04.704
<v Speaker 1>value for deny

01:10:05.744 --> 01:10:06.465
<v Speaker 1>now.

01:10:07.344 --> 01:10:09.344
<v Speaker 0>Yeah. We did get And if you if

01:10:09.344 --> 01:10:10.945
<v Speaker 1>you just if you just evaluate the package,

01:10:10.945 --> 01:10:13.105
<v Speaker 1>test the test will pass, I think. Basically,

01:10:13.105 --> 01:10:13.824
<v Speaker 1>it'll be true.

01:10:18.340 --> 01:10:20.500
<v Speaker 1>Okay. Wait. So it okay. So it's doing

01:10:20.500 --> 01:10:22.420
<v Speaker 1>the right thing there. I don't understand why

01:10:25.460 --> 01:10:27.620
<v Speaker 1>and and we've got deny we've got an

01:10:27.620 --> 01:10:29.220
<v Speaker 1>assertion down below that says deny is non

01:10:29.220 --> 01:10:29.860
<v Speaker 1>empty. Yeah.

01:10:31.205 --> 01:10:31.925
<v Speaker 1>Okay.

01:10:32.325 --> 01:10:33.284
<v Speaker 0>So so

01:10:33.525 --> 01:10:35.445
<v Speaker 0>that worked. Right? Yeah. So that this this

01:10:35.445 --> 01:10:36.885
<v Speaker 1>is doing what we expect. Right? Deny is

01:10:36.885 --> 01:10:39.365
<v Speaker 1>not an empty set when it's evaluated with

01:10:39.365 --> 01:10:40.165
<v Speaker 1>that input.

01:10:40.325 --> 01:10:43.445
<v Speaker 0>So if I just set this to hooley.com,

01:10:43.445 --> 01:10:45.445
<v Speaker 0>then we should get test my SQL is

01:10:45.445 --> 01:10:46.405
<v Speaker 0>not allowed as false.

01:10:47.590 --> 01:10:48.310
<v Speaker 0>Yes.

01:10:49.270 --> 01:10:51.110
<v Speaker 1>Or it'll be emptively missing.

01:10:56.550 --> 01:10:58.070
<v Speaker 0>Or I guess it should

01:10:58.630 --> 01:11:00.070
<v Speaker 0>be an empty set. It should be an

01:11:00.070 --> 01:11:01.030
<v Speaker 1>empty set, but

01:11:03.785 --> 01:11:04.425
<v Speaker 1>what

01:11:04.905 --> 01:11:05.785
<v Speaker 1>is going on?

01:11:07.385 --> 01:11:09.625
<v Speaker 0>I'm good at breaking stuff. Like,

01:11:10.265 --> 01:11:11.865
<v Speaker 0>I just had I spend my actual day

01:11:11.865 --> 01:11:13.785
<v Speaker 0>programming just doing what's going on.

01:11:15.850 --> 01:11:17.450
<v Speaker 1>And so if you evaluate right now

01:11:26.010 --> 01:11:26.410
<v Speaker 0>oh,

01:11:28.815 --> 01:11:31.055
<v Speaker 1>okay. Sorry. This is I I I got

01:11:31.055 --> 01:11:32.815
<v Speaker 1>caught up in in the details here.

01:11:36.415 --> 01:11:38.975
<v Speaker 1>We're basically evaluating deny twice so that that

01:11:38.975 --> 01:11:41.614
<v Speaker 1>we're not assigning the value of deny

01:11:41.855 --> 01:11:44.260
<v Speaker 1>to a local variable. So the the value

01:11:44.260 --> 01:11:45.780
<v Speaker 1>of the in like, so, basically, like, you've

01:11:45.780 --> 01:11:47.780
<v Speaker 1>asked for deny on line 33,

01:11:48.660 --> 01:11:50.260
<v Speaker 1>and then you asked for it again on

01:11:50.260 --> 01:11:52.820
<v Speaker 1>line 60 or whatever it is down below.

01:11:53.940 --> 01:11:54.739
<v Speaker 1>On line

01:11:55.140 --> 01:11:57.380
<v Speaker 1>60, it's being evaluated with the input

01:11:58.995 --> 01:12:00.515
<v Speaker 1>on the on on the top right in

01:12:00.515 --> 01:12:01.315
<v Speaker 1>that pane.

01:12:01.955 --> 01:12:03.955
<v Speaker 1>But on line 33, it's being evaluated with

01:12:03.955 --> 01:12:05.875
<v Speaker 1>the input that we've defined in line inside

01:12:05.875 --> 01:12:06.755
<v Speaker 1>the policy.

01:12:08.195 --> 01:12:10.275
<v Speaker 0>Right. So I have to make I have

01:12:10.275 --> 01:12:11.795
<v Speaker 0>to assign the result here?

01:12:13.000 --> 01:12:15.000
<v Speaker 1>Yeah. Sure. Yeah. Yeah. Yeah. That's what you'd

01:12:15.000 --> 01:12:18.119
<v Speaker 1>wanted. Is that? Yeah. Exactly. Yeah. Sorry. Res.

01:12:18.520 --> 01:12:20.280
<v Speaker 1>Yeah. Now res is not able to empty

01:12:20.280 --> 01:12:20.840
<v Speaker 1>set.

01:12:24.280 --> 01:12:26.199
<v Speaker 0>Alright. And then I I should be able

01:12:26.199 --> 01:12:27.000
<v Speaker 0>to break that.

01:12:30.455 --> 01:12:32.534
<v Speaker 1>Yeah. That's right. There we go. There we

01:12:32.534 --> 01:12:34.215
<v Speaker 1>go. Okay. Sorry. I was going I was

01:12:34.215 --> 01:12:36.455
<v Speaker 1>going crazy. I I just wrote down and

01:12:36.455 --> 01:12:38.375
<v Speaker 1>looked at the look at the actual policy.

01:12:38.375 --> 01:12:39.494
<v Speaker 1>Yeah. Yeah.

01:12:39.815 --> 01:12:40.295
<v Speaker 1>Yeah. So

01:12:41.895 --> 01:12:43.335
<v Speaker 0>Okay. Cool. That

01:12:44.060 --> 01:12:45.260
<v Speaker 0>that makes sense to me now. Now I

01:12:45.260 --> 01:12:46.620
<v Speaker 0>know what was going on there. I just

01:12:46.620 --> 01:12:49.660
<v Speaker 0>assumed some something magic was happening between this

01:12:49.660 --> 01:12:51.179
<v Speaker 0>and then this So did I.

01:12:54.220 --> 01:12:54.860
<v Speaker 0>Yeah.

01:12:55.100 --> 01:12:55.820
<v Speaker 0>Alright. Well,

01:12:56.645 --> 01:12:58.965
<v Speaker 0>we'll leave it there. That was a fantastic

01:12:58.965 --> 01:13:02.485
<v Speaker 0>introduction to Open Policy Agent and Rago. And

01:13:02.485 --> 01:13:04.005
<v Speaker 0>a lot of things clicked for me now

01:13:04.005 --> 01:13:06.085
<v Speaker 0>just through this conversation and playing with a

01:13:06.085 --> 01:13:08.245
<v Speaker 0>a really, really impressive tool. I can see

01:13:08.245 --> 01:13:10.610
<v Speaker 0>so many different applications for this as well.

01:13:10.610 --> 01:13:11.889
<v Speaker 0>I can see why it's not just being

01:13:11.889 --> 01:13:14.610
<v Speaker 0>consumed and used by the Kubernetes community, but

01:13:14.610 --> 01:13:16.530
<v Speaker 0>by so much more. So I I just

01:13:16.530 --> 01:13:18.449
<v Speaker 0>wanna say thank you for joining me today.

01:13:18.449 --> 01:13:19.809
<v Speaker 0>That was that was great. And I really

01:13:19.809 --> 01:13:22.130
<v Speaker 0>appreciate your your input, your time, and especially

01:13:22.130 --> 01:13:24.050
<v Speaker 0>your patience there as I was kind of

01:13:24.050 --> 01:13:26.505
<v Speaker 0>breaking things and kicking them over. So thank

01:13:26.505 --> 01:13:28.185
<v Speaker 0>you for joining me today. Yeah. It's been

01:13:28.185 --> 01:13:30.505
<v Speaker 1>a pleasure, David. Thanks a lot. Alright. Well,

01:13:30.585 --> 01:13:32.664
<v Speaker 0>have a a great afternoon.

01:13:33.145 --> 01:13:34.745
<v Speaker 0>I'll enjoy my evening, and I will speak

01:13:34.745 --> 01:13:36.185
<v Speaker 0>to you again soon. Thank you, Taron. Yeah.

01:13:36.185 --> 01:13:37.304
<v Speaker 1>Cheers. Take care. Bye bye.
