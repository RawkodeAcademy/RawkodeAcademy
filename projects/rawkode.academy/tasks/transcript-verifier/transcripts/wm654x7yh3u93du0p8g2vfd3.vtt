WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: aeeb2dd1-4a83-43c8-96bd-4a5ed1956c1f
Created: 2025-04-29T20:13:11.001Z
Duration: 7705.084
Channels: 1

00:01:01.540 --> 00:01:02.340
<v Speaker 0>Hello,

00:01:02.420 --> 00:01:05.015
<v Speaker 0>and welcome to today's episode of Rawkode live.

00:01:05.015 --> 00:01:06.695
<v Speaker 0>I am your host Rawkode.

00:01:07.175 --> 00:01:09.575
<v Speaker 0>Before we get started, here's a quick reminder

00:01:09.575 --> 00:01:11.415
<v Speaker 0>that you should subscribe to my channel at

00:01:11.415 --> 00:01:13.575
<v Speaker 0>Rawkode live and click that bell. That means

00:01:13.575 --> 00:01:15.175
<v Speaker 0>you're gonna get all of the updates and

00:01:15.175 --> 00:01:16.935
<v Speaker 0>there are multiple streams per week. So hopefully

00:01:16.935 --> 00:01:18.820
<v Speaker 0>there is content there. We can all continue

00:01:18.820 --> 00:01:21.780
<v Speaker 0>to learn this vast cloud native landscape.

00:01:22.580 --> 00:01:24.100
<v Speaker 0>Also be aware that we do have a

00:01:24.100 --> 00:01:26.500
<v Speaker 0>discord chat. Please come and join us. The

00:01:26.500 --> 00:01:29.140
<v Speaker 0>conversation is always fun and there's lots to

00:01:29.140 --> 00:01:32.185
<v Speaker 0>learn from everyone involved there too. So cool.

00:01:32.185 --> 00:01:35.945
<v Speaker 0>Get involved. Now today we are gonna take,

00:01:36.265 --> 00:01:39.385
<v Speaker 0>we're gonna attempt to write a Kubernetes controller

00:01:40.025 --> 00:01:42.345
<v Speaker 0>to satisfy a random idea that I had

00:01:42.345 --> 00:01:44.330
<v Speaker 0>in December last We'll talk a little bit

00:01:44.330 --> 00:01:45.850
<v Speaker 0>about that in just a moment.

00:01:46.650 --> 00:01:48.090
<v Speaker 0>But I am not smart enough to write

00:01:48.090 --> 00:01:50.170
<v Speaker 0>my own Kubernetes controller so I have solicited

00:01:50.170 --> 00:01:52.570
<v Speaker 0>some help from a friend of mine, Sahil

00:01:52.570 --> 00:01:54.490
<v Speaker 0>Patel. Hey man. How are you doing?

00:01:55.865 --> 00:01:56.585
<v Speaker 1>Hello.

00:01:56.905 --> 00:01:58.665
<v Speaker 1>Great to be joining you. Thank you for

00:01:58.665 --> 00:01:59.465
<v Speaker 1>the invite.

00:02:00.345 --> 00:02:01.625
<v Speaker 1>Yeah. This will be fun.

00:02:02.265 --> 00:02:04.025
<v Speaker 0>Hold on. Too many buttons. There we go.

00:02:04.025 --> 00:02:05.945
<v Speaker 0>Yeah. I'm really looking forward to this.

00:02:06.345 --> 00:02:08.824
<v Speaker 0>I have written Kubernetes controllers before. I think

00:02:08.824 --> 00:02:11.065
<v Speaker 0>you've got way more experience than me here.

00:02:11.065 --> 00:02:13.519
<v Speaker 0>So So maybe we can, we'll do introductions

00:02:13.519 --> 00:02:15.120
<v Speaker 0>first, but you know, maybe we'll talk a

00:02:15.120 --> 00:02:17.040
<v Speaker 0>little bit about the different ways to extend

00:02:17.040 --> 00:02:18.959
<v Speaker 0>and modify Kubernetes and get people a little

00:02:18.959 --> 00:02:19.840
<v Speaker 0>bit of insight

00:02:20.159 --> 00:02:22.000
<v Speaker 0>and flavor into how that works.

00:02:22.319 --> 00:02:24.480
<v Speaker 0>So let's start first with you. Why don't

00:02:24.480 --> 00:02:26.159
<v Speaker 0>you give us the Sahil pitch?

00:02:27.364 --> 00:02:28.165
<v Speaker 1>Hey.

00:02:28.564 --> 00:02:30.885
<v Speaker 1>Thank you. Hi. My name is Sahil.

00:02:31.125 --> 00:02:34.084
<v Speaker 1>I am a software engineer. Currently, I work

00:02:34.084 --> 00:02:35.445
<v Speaker 1>for a company called Monza,

00:02:35.924 --> 00:02:38.724
<v Speaker 1>where I help build a better banking experience.

00:02:40.420 --> 00:02:42.739
<v Speaker 1>I've been using Kubernetes for a number of

00:02:42.739 --> 00:02:45.860
<v Speaker 1>years now and been involved with the CNCF

00:02:46.180 --> 00:02:47.220
<v Speaker 1>ecosystems

00:02:47.220 --> 00:02:49.460
<v Speaker 1>of software. So things like Prometheus,

00:02:49.620 --> 00:02:50.420
<v Speaker 1>Jaeger,

00:02:50.980 --> 00:02:53.675
<v Speaker 1>and all of these other tools, Kubernetes,

00:02:54.155 --> 00:02:56.955
<v Speaker 1>Envoy proxy, and all of the other tools

00:02:56.955 --> 00:02:59.915
<v Speaker 1>that are involved in the CNCF ecosystem.

00:03:00.635 --> 00:03:01.515
<v Speaker 1>And yeah,

00:03:02.315 --> 00:03:03.195
<v Speaker 1>essentially,

00:03:04.315 --> 00:03:05.995
<v Speaker 1>I want to make infrastructure

00:03:06.315 --> 00:03:08.280
<v Speaker 1>like, want to represent infrastructure from an end

00:03:08.280 --> 00:03:09.240
<v Speaker 1>user perspective.

00:03:09.640 --> 00:03:12.360
<v Speaker 1>So like getting involved from within the end

00:03:12.360 --> 00:03:14.120
<v Speaker 1>user community and stuff like that.

00:03:14.600 --> 00:03:16.040
<v Speaker 0>Awesome. Very cool.

00:03:17.000 --> 00:03:19.960
<v Speaker 0>All right. So Kubernetes controllers.

00:03:20.635 --> 00:03:21.755
<v Speaker 0>What are they?

00:03:22.875 --> 00:03:26.155
<v Speaker 1>So think of a Kubernetes controller in the

00:03:26.155 --> 00:03:29.675
<v Speaker 1>sense that you use with Kubernetes, you declare

00:03:29.675 --> 00:03:32.555
<v Speaker 1>what you want, and the Kubernetes controller

00:03:32.555 --> 00:03:34.475
<v Speaker 1>does all the actions necessary

00:03:34.475 --> 00:03:36.970
<v Speaker 1>to take what you want done

00:03:37.210 --> 00:03:38.170
<v Speaker 1>and actually

00:03:38.810 --> 00:03:40.170
<v Speaker 1>make that reality.

00:03:40.570 --> 00:03:41.930
<v Speaker 1>So essentially,

00:03:42.730 --> 00:03:44.410
<v Speaker 1>if you create a deployment

00:03:44.490 --> 00:03:47.130
<v Speaker 1>in Kubernetes, you specify lots of YAML.

00:03:47.290 --> 00:03:49.290
<v Speaker 1>And you might specify like a deployment object.

00:03:50.895 --> 00:03:53.535
<v Speaker 1>It will take that, and it will then

00:03:54.175 --> 00:03:54.975
<v Speaker 1>essentially

00:03:55.135 --> 00:03:57.775
<v Speaker 1>process that, see the state of the current

00:03:57.775 --> 00:03:59.935
<v Speaker 1>cluster to see, for example, if that object

00:03:59.935 --> 00:04:02.975
<v Speaker 1>already exists with that particular name. It

00:04:03.775 --> 00:04:05.135
<v Speaker 1>takes what you desire

00:04:05.370 --> 00:04:05.930
<v Speaker 1>and

00:04:06.330 --> 00:04:08.010
<v Speaker 1>gets it to the end state. So for

00:04:08.010 --> 00:04:09.690
<v Speaker 1>example, in a deployment, it will take

00:04:10.730 --> 00:04:12.970
<v Speaker 1>the number of replicas. It will create the

00:04:12.970 --> 00:04:14.810
<v Speaker 1>replica set if necessary.

00:04:14.890 --> 00:04:16.650
<v Speaker 1>It will pull down the image,

00:04:17.050 --> 00:04:19.185
<v Speaker 1>and it will create the required pods.

00:04:19.505 --> 00:04:21.665
<v Speaker 1>It will do everything that is necessary

00:04:21.904 --> 00:04:23.185
<v Speaker 1>to satisfy

00:04:23.264 --> 00:04:24.945
<v Speaker 1>what you declare essentially.

00:04:26.705 --> 00:04:27.905
<v Speaker 0>Alright. And

00:04:29.104 --> 00:04:31.180
<v Speaker 0>I mean, is it fair to say that

00:04:31.180 --> 00:04:33.420
<v Speaker 0>everything in Kubernetes is a controller as it

00:04:33.420 --> 00:04:34.380
<v Speaker 0>is just now?

00:04:36.940 --> 00:04:38.780
<v Speaker 1>Pretty much everything. Yeah. Like, you know, a

00:04:38.780 --> 00:04:40.780
<v Speaker 1>lot of the common objects that you interact

00:04:40.780 --> 00:04:42.780
<v Speaker 1>with such as deployments,

00:04:42.780 --> 00:04:43.785
<v Speaker 1>replica sets,

00:04:44.665 --> 00:04:47.305
<v Speaker 1>all of these standard Kubernetes objects are essentially

00:04:47.305 --> 00:04:48.105
<v Speaker 1>controllers.

00:04:48.825 --> 00:04:51.705
<v Speaker 1>And they're getting down to the lowest

00:04:51.705 --> 00:04:52.905
<v Speaker 1>level Kubernetes

00:04:52.905 --> 00:04:53.945
<v Speaker 1>abstractions,

00:04:54.185 --> 00:04:55.385
<v Speaker 1>which is things

00:04:55.385 --> 00:04:56.745
<v Speaker 1>like pods and containers

00:04:57.225 --> 00:04:59.910
<v Speaker 1>to the very end. So essentially everything is

00:04:59.910 --> 00:05:02.310
<v Speaker 1>like layers of manipulation between

00:05:02.710 --> 00:05:04.790
<v Speaker 1>to get to a state where you have

00:05:05.110 --> 00:05:07.510
<v Speaker 1>pods and containers running in your cluster.

00:05:08.550 --> 00:05:10.150
<v Speaker 0>Okay, cool. Very cool.

00:05:10.470 --> 00:05:12.065
<v Speaker 0>All right, we have a couple of comments

00:05:12.065 --> 00:05:13.345
<v Speaker 0>so let's get them on the screen and

00:05:13.345 --> 00:05:14.705
<v Speaker 0>then why don't you and I just talk

00:05:14.705 --> 00:05:15.985
<v Speaker 0>about the problem that we want to solve

00:05:15.985 --> 00:05:17.985
<v Speaker 0>today and then we'll talk about the different

00:05:17.985 --> 00:05:19.905
<v Speaker 0>ways that we could potentially achieve

00:05:19.905 --> 00:05:22.705
<v Speaker 0>that then. So Vignesh welcome back,

00:05:23.025 --> 00:05:23.345
<v Speaker 0>hello

00:05:23.850 --> 00:05:25.770
<v Speaker 0>We have a excited.

00:05:25.770 --> 00:05:28.490
<v Speaker 0>Yep. I am excited too. That's for sure.

00:05:28.730 --> 00:05:30.650
<v Speaker 0>And a hi from Moz. Hey, hi Moz.

00:05:30.730 --> 00:05:32.490
<v Speaker 0>Not sure why that font is a colored

00:05:32.490 --> 00:05:34.010
<v Speaker 0>black. I'll fix that later.

00:05:34.730 --> 00:05:35.770
<v Speaker 0>Okay. So

00:05:36.730 --> 00:05:39.450
<v Speaker 0>when we chatted about doing this we had

00:05:38.794 --> 00:05:40.315
<v Speaker 0>rough idea that

00:05:42.395 --> 00:05:43.515
<v Speaker 0>what if let

00:05:43.755 --> 00:05:45.755
<v Speaker 0>me throw this back. I wish I'd

00:05:45.915 --> 00:05:47.835
<v Speaker 0>had the foresight to find this tweet and

00:05:47.835 --> 00:05:48.875
<v Speaker 0>maybe I'll try and find that in a

00:05:48.875 --> 00:05:50.635
<v Speaker 0>second but I think it was in December

00:05:50.635 --> 00:05:51.835
<v Speaker 0>I tweeted

00:05:52.235 --> 00:05:53.275
<v Speaker 0>an image

00:05:53.435 --> 00:05:54.635
<v Speaker 0>where I had

00:05:55.450 --> 00:05:56.330
<v Speaker 0>taken

00:05:56.570 --> 00:05:58.970
<v Speaker 0>I had taken the image tag within a

00:05:58.970 --> 00:06:01.130
<v Speaker 0>pod spec and made it look a little

00:06:01.130 --> 00:06:04.090
<v Speaker 0>bit weird. What I did was put the

00:06:04.090 --> 00:06:06.250
<v Speaker 0>image name and then for the tag

00:06:06.650 --> 00:06:09.450
<v Speaker 0>I actually provided like a semantic version constraint.

00:06:10.365 --> 00:06:12.445
<v Speaker 0>Maybe that's best visualized actually.

00:06:12.925 --> 00:06:15.165
<v Speaker 0>Let me pull up my screen share.

00:06:17.245 --> 00:06:18.925
<v Speaker 0>Assume this was a pod

00:06:19.645 --> 00:06:22.205
<v Speaker 0>and then the image nginx and

00:06:22.605 --> 00:06:24.845
<v Speaker 0>I think what I had was like

00:06:25.950 --> 00:06:28.910
<v Speaker 0>greater than that's a more Versus code. Something

00:06:28.910 --> 00:06:29.710
<v Speaker 0>like this.

00:06:30.910 --> 00:06:31.550
<v Speaker 0>Where

00:06:32.590 --> 00:06:34.830
<v Speaker 0>it's not valid and that this is not

00:06:34.830 --> 00:06:36.350
<v Speaker 0>a correct image

00:06:36.350 --> 00:06:37.710
<v Speaker 0>name or tag

00:06:37.945 --> 00:06:38.745
<v Speaker 0>and

00:06:38.905 --> 00:06:42.025
<v Speaker 0>this has no semantic meaning within a Kubernetes

00:06:42.025 --> 00:06:43.785
<v Speaker 0>cluster. There's no way to really tell what

00:06:43.785 --> 00:06:45.385
<v Speaker 0>this means. There's no way to really

00:06:45.865 --> 00:06:47.545
<v Speaker 0>I mean, this would just fail. Right?

00:06:49.065 --> 00:06:50.505
<v Speaker 0>Yeah. Because I wouldn't be able to pull

00:06:50.505 --> 00:06:52.425
<v Speaker 0>it back. So what if we could write

00:06:52.425 --> 00:06:54.800
<v Speaker 0>something and the Kubernetes land

00:06:55.039 --> 00:06:56.479
<v Speaker 0>that would notice

00:06:56.479 --> 00:07:00.320
<v Speaker 0>this unique syntax for the image and then

00:07:00.800 --> 00:07:03.280
<v Speaker 0>resolve that for us at runtime

00:07:03.280 --> 00:07:05.840
<v Speaker 0>and update our pod spec.

00:07:06.000 --> 00:07:06.639
<v Speaker 0>That makes sense?

00:07:07.755 --> 00:07:09.035
<v Speaker 1>Yeah, absolutely.

00:07:10.395 --> 00:07:13.115
<v Speaker 1>So this was quite interesting because

00:07:13.275 --> 00:07:15.035
<v Speaker 1>from this tweet, I actually gave this a

00:07:15.035 --> 00:07:17.275
<v Speaker 1>shot to see how far you could get,

00:07:18.475 --> 00:07:20.795
<v Speaker 1>you know, whether even Kubernetes will accept this

00:07:20.795 --> 00:07:23.150
<v Speaker 1>as like valid input. It does. You put

00:07:23.150 --> 00:07:25.150
<v Speaker 1>this into your YAML. It does, yeah. I

00:07:25.150 --> 00:07:27.630
<v Speaker 1>was quite surprised. I thought it would immediately

00:07:27.630 --> 00:07:28.430
<v Speaker 1>complain

00:07:28.510 --> 00:07:30.430
<v Speaker 1>because it's not a valid image name.

00:07:31.150 --> 00:07:32.990
<v Speaker 1>But because it does accept it, that means

00:07:32.990 --> 00:07:35.550
<v Speaker 1>it is storing that somewhere. So it's storing

00:07:35.550 --> 00:07:37.135
<v Speaker 1>that state in

00:07:38.335 --> 00:07:40.095
<v Speaker 1>the Kubernetes storage

00:07:40.095 --> 00:07:41.855
<v Speaker 1>system in etcd.

00:07:42.095 --> 00:07:43.215
<v Speaker 1>So for example,

00:07:43.535 --> 00:07:44.495
<v Speaker 1>we can then

00:07:44.895 --> 00:07:47.935
<v Speaker 1>essentially extract that and manipulate it to convert

00:07:47.935 --> 00:07:49.135
<v Speaker 1>it into something

00:07:49.294 --> 00:07:52.000
<v Speaker 1>that is usable and that will essentially resolve

00:07:52.000 --> 00:07:53.920
<v Speaker 1>and run on our cluster.

00:07:54.560 --> 00:07:55.280
<v Speaker 0>Yeah.

00:07:56.720 --> 00:07:59.039
<v Speaker 0>So there is there more than one way

00:07:59.039 --> 00:08:00.880
<v Speaker 0>for us to make this work?

00:08:02.240 --> 00:08:04.495
<v Speaker 1>Yeah. There's actually a multitude of ways.

00:08:04.815 --> 00:08:05.375
<v Speaker 1>So

00:08:05.695 --> 00:08:07.615
<v Speaker 1>what we could do, for example, is we

00:08:07.615 --> 00:08:09.935
<v Speaker 1>could say that we want to go completely

00:08:09.935 --> 00:08:12.095
<v Speaker 1>custom, and we want to write a custom

00:08:12.095 --> 00:08:12.895
<v Speaker 1>controller

00:08:13.135 --> 00:08:15.535
<v Speaker 1>that will look like a deployment. For example,

00:08:15.450 --> 00:08:17.370
<v Speaker 1>we might give it a a kind of

00:08:17.370 --> 00:08:18.810
<v Speaker 1>like a version deployment

00:08:19.130 --> 00:08:21.210
<v Speaker 1>and, you know, that would take the or

00:08:21.210 --> 00:08:22.970
<v Speaker 1>like a versioned pod, for example,

00:08:23.210 --> 00:08:25.930
<v Speaker 1>that would look exactly like a pod spec

00:08:25.930 --> 00:08:30.090
<v Speaker 1>but would manipulate the image field before essentially

00:08:31.215 --> 00:08:34.575
<v Speaker 1>interacting with the version pod controller and converting

00:08:34.575 --> 00:08:36.335
<v Speaker 1>that versioned

00:08:36.495 --> 00:08:39.455
<v Speaker 1>image name, like what you specified here, into

00:08:39.455 --> 00:08:41.855
<v Speaker 1>a concrete image version and then pass it

00:08:41.855 --> 00:08:43.534
<v Speaker 1>off to a pod to continue its pod

00:08:43.534 --> 00:08:44.015
<v Speaker 1>lifecycle.

00:08:45.440 --> 00:08:46.080
<v Speaker 1>Now

00:08:46.320 --> 00:08:47.120
<v Speaker 1>another

00:08:47.440 --> 00:08:49.520
<v Speaker 1>way, and I think the way we might

00:08:49.520 --> 00:08:51.920
<v Speaker 1>possibly want to explore in this session,

00:08:52.160 --> 00:08:53.120
<v Speaker 1>is Kubernetes

00:08:53.120 --> 00:08:54.080
<v Speaker 1>provides

00:08:54.320 --> 00:08:55.840
<v Speaker 1>two kinds of hooks

00:08:56.080 --> 00:08:59.040
<v Speaker 1>when objects are created and when pods are

00:08:59.040 --> 00:08:59.520
<v Speaker 1>being built.

00:09:00.334 --> 00:09:02.495
<v Speaker 1>Actually, this works for any API object, I

00:09:02.495 --> 00:09:03.055
<v Speaker 1>believe.

00:09:03.615 --> 00:09:04.735
<v Speaker 1>You have

00:09:05.055 --> 00:09:05.774
<v Speaker 1>mutation

00:09:06.095 --> 00:09:08.815
<v Speaker 1>controllers and you have validation controllers.

00:09:10.415 --> 00:09:13.134
<v Speaker 1>So go into validation controls first. Validation controls

00:09:13.134 --> 00:09:15.760
<v Speaker 1>are pretty much like what they sound. Essentially,

00:09:15.760 --> 00:09:18.560
<v Speaker 1>you can provide a completely valid Kubernetes pod

00:09:18.560 --> 00:09:21.200
<v Speaker 1>spec or deployment spec or any sort of

00:09:21.200 --> 00:09:23.200
<v Speaker 1>spec. And you might want to validate it

00:09:23.200 --> 00:09:24.800
<v Speaker 1>in some ways. So for example, you may

00:09:24.800 --> 00:09:26.080
<v Speaker 1>want to look at the state of your

00:09:26.080 --> 00:09:28.160
<v Speaker 1>cluster and say, oh, we should only be

00:09:28.160 --> 00:09:28.720
<v Speaker 1>running

00:09:29.120 --> 00:09:32.015
<v Speaker 1>this many deployments with this particular label. Or

00:09:32.015 --> 00:09:34.654
<v Speaker 1>this particular deployment is valid, but it's missing

00:09:34.654 --> 00:09:36.415
<v Speaker 1>this particular annotation,

00:09:36.415 --> 00:09:37.135
<v Speaker 1>for example.

00:09:38.095 --> 00:09:40.255
<v Speaker 1>And you might want to validate that and

00:09:40.255 --> 00:09:40.735
<v Speaker 1>deny

00:09:41.295 --> 00:09:44.095
<v Speaker 1>that resource from being created.

00:09:44.095 --> 00:09:45.120
<v Speaker 1>So for example,

00:09:45.680 --> 00:09:47.120
<v Speaker 1>when you create a

00:09:47.600 --> 00:09:48.800
<v Speaker 1>pod spec

00:09:48.879 --> 00:09:51.680
<v Speaker 1>and you add something that is invalid using

00:09:51.680 --> 00:09:52.800
<v Speaker 1>kubectl,

00:09:53.440 --> 00:09:55.760
<v Speaker 1>essentially you will get like a denied

00:09:55.839 --> 00:09:56.639
<v Speaker 1>error

00:09:56.720 --> 00:09:59.065
<v Speaker 1>if you write something invalid. That's essentially the

00:09:59.065 --> 00:10:00.105
<v Speaker 1>validation

00:10:00.425 --> 00:10:01.385
<v Speaker 1>kicking in.

00:10:01.785 --> 00:10:03.785
<v Speaker 1>The other thing that you can do is

00:10:04.905 --> 00:10:06.505
<v Speaker 1>essentially like a mutation

00:10:07.225 --> 00:10:09.545
<v Speaker 1>controller. So mutation controller,

00:10:09.945 --> 00:10:12.265
<v Speaker 1>actually, it'd be quite good if we pull

00:10:12.265 --> 00:10:13.225
<v Speaker 1>up

00:10:14.060 --> 00:10:16.300
<v Speaker 1>the documentation on this. So if you could

00:10:16.300 --> 00:10:18.700
<v Speaker 1>pull up maybe the admission controllers

00:10:19.100 --> 00:10:20.460
<v Speaker 1>for Kubernetes.

00:10:26.300 --> 00:10:28.459
<v Speaker 1>Yeah, that one. Yeah, that one is fine.

00:10:28.425 --> 00:10:31.545
<v Speaker 1>So essentially both mutation and validation

00:10:31.785 --> 00:10:33.785
<v Speaker 1>controllers are types of admission controllers.

00:10:34.584 --> 00:10:35.065
<v Speaker 1>And

00:10:35.385 --> 00:10:37.385
<v Speaker 1>what a mutation controller allows us to do

00:10:37.385 --> 00:10:38.904
<v Speaker 1>is essentially

00:10:39.945 --> 00:10:41.225
<v Speaker 1>hook into

00:10:41.385 --> 00:10:43.740
<v Speaker 1>an object that's being created as part of

00:10:43.740 --> 00:10:47.580
<v Speaker 1>the creation lifecycle and apply patches, apply mutations.

00:10:47.580 --> 00:10:49.580
<v Speaker 1>So similar to how you can do kubectl

00:10:49.580 --> 00:10:51.740
<v Speaker 1>patch, you can do that add creation

00:10:52.140 --> 00:10:52.780
<v Speaker 1>time

00:10:53.180 --> 00:10:53.900
<v Speaker 1>dynamically.

00:10:54.460 --> 00:10:56.415
<v Speaker 1>And the way that they've implemented that in

00:10:56.415 --> 00:10:57.775
<v Speaker 1>this particular controller,

00:10:58.654 --> 00:11:01.135
<v Speaker 1>in this particular admission controller, is allowing

00:11:01.135 --> 00:11:03.615
<v Speaker 1>for like a webhook style system.

00:11:04.255 --> 00:11:07.295
<v Speaker 1>So essentially every time a pod or a

00:11:07.295 --> 00:11:09.214
<v Speaker 1>deployment or something, whatever object you want to

00:11:09.214 --> 00:11:10.815
<v Speaker 1>watch for gets created,

00:11:12.200 --> 00:11:14.360
<v Speaker 1>It will essentially call into a custom webhook

00:11:14.360 --> 00:11:15.800
<v Speaker 1>that we can specify.

00:11:16.920 --> 00:11:19.560
<v Speaker 1>And then we can then mutate the output

00:11:19.800 --> 00:11:20.920
<v Speaker 1>and add

00:11:21.720 --> 00:11:24.040
<v Speaker 1>anything we want or tweak anything we want

00:11:24.715 --> 00:11:26.475
<v Speaker 1>before it goes on to the rest of

00:11:26.475 --> 00:11:29.995
<v Speaker 1>the pod or deployment or replica set creation

00:11:29.995 --> 00:11:30.955
<v Speaker 1>lifecycle.

00:11:32.315 --> 00:11:33.115
<v Speaker 0>Awesome.

00:11:35.115 --> 00:11:36.875
<v Speaker 0>The good news is I also found my

00:11:36.875 --> 00:11:37.515
<v Speaker 0>tweet.

00:11:39.115 --> 00:11:39.755
<v Speaker 0>There we go.

00:11:40.680 --> 00:11:43.240
<v Speaker 0>This is my bold idea. November 13, if

00:11:43.240 --> 00:11:44.840
<v Speaker 0>I have a search in December, this was

00:11:44.840 --> 00:11:45.480
<v Speaker 0>wrong.

00:11:45.800 --> 00:11:47.400
<v Speaker 0>But we're gonna try and make something like

00:11:47.400 --> 00:11:48.200
<v Speaker 0>this work.

00:11:48.760 --> 00:11:51.000
<v Speaker 0>So that was a really great explanation of

00:11:51.000 --> 00:11:52.040
<v Speaker 0>validating

00:11:52.120 --> 00:11:53.800
<v Speaker 0>webhooks and mutating webhooks.

00:11:54.945 --> 00:11:56.465
<v Speaker 0>I think you know, there's a lot of

00:11:56.465 --> 00:11:58.945
<v Speaker 0>flexibility, lot of power just in those two

00:11:58.945 --> 00:12:01.585
<v Speaker 0>methods have been able to extend Kubernetes without

00:12:01.985 --> 00:12:03.745
<v Speaker 0>you know, getting into the nitty gritty of

00:12:03.745 --> 00:12:06.385
<v Speaker 0>actually like writing a you know, a controller

00:12:06.385 --> 00:12:09.070
<v Speaker 0>with a loop and reconciliation and ownership of

00:12:09.070 --> 00:12:11.150
<v Speaker 0>CRDs and all that stuff like you know,

00:12:11.150 --> 00:12:12.910
<v Speaker 0>you just maybe you just want to extend

00:12:12.910 --> 00:12:14.430
<v Speaker 0>like we want to today.

00:12:15.470 --> 00:12:18.110
<v Speaker 0>A primitive that already exists like a pod

00:12:18.430 --> 00:12:20.590
<v Speaker 0>and we can do a cool couple of

00:12:20.590 --> 00:12:22.855
<v Speaker 0>tweaks there. So is it fair to say

00:12:22.855 --> 00:12:25.894
<v Speaker 0>that at a really naive level that these

00:12:25.894 --> 00:12:27.975
<v Speaker 0>are just simple functions that take an HTTP

00:12:27.975 --> 00:12:29.815
<v Speaker 0>request out and then spit something back out?

00:12:30.454 --> 00:12:33.335
<v Speaker 1>That's exactly it. Yeah. Essentially

00:12:33.575 --> 00:12:37.080
<v Speaker 1>right now I believe admission controllers only

00:12:37.240 --> 00:12:39.560
<v Speaker 1>give you the the object as JSON,

00:12:39.959 --> 00:12:42.200
<v Speaker 1>and you will read the object as JSON.

00:12:42.200 --> 00:12:42.680
<v Speaker 1>And,

00:12:43.399 --> 00:12:45.880
<v Speaker 1>you know, you can use the Kubernetes

00:12:46.279 --> 00:12:48.915
<v Speaker 1>core v one to unmarshal

00:12:48.915 --> 00:12:51.315
<v Speaker 1>all the JSON that's provided to you. And

00:12:51.315 --> 00:12:52.755
<v Speaker 1>you quite literally write,

00:12:52.995 --> 00:12:56.274
<v Speaker 1>like if you've used customize or anything similar,

00:12:56.274 --> 00:12:58.595
<v Speaker 1>you essentially write a Kubernetes patch. So you'll

00:12:58.595 --> 00:12:59.795
<v Speaker 1>have like an operation.

00:13:00.675 --> 00:13:02.900
<v Speaker 1>You'll have a path. And you'll have a

00:13:02.900 --> 00:13:05.540
<v Speaker 1>value. And essentially you specify a series of

00:13:05.540 --> 00:13:07.220
<v Speaker 1>patches that you want to run.

00:13:08.020 --> 00:13:08.580
<v Speaker 1>And

00:13:09.060 --> 00:13:10.900
<v Speaker 1>can specify no patches, for example. You could

00:13:10.900 --> 00:13:11.540
<v Speaker 1>just say

00:13:11.940 --> 00:13:13.380
<v Speaker 1>the same thing that's come in is the

00:13:13.380 --> 00:13:14.339
<v Speaker 1>same thing that's going out,

00:13:14.945 --> 00:13:15.985
<v Speaker 1>for example.

00:13:17.265 --> 00:13:18.545
<v Speaker 1>And yeah essentially

00:13:19.025 --> 00:13:21.665
<v Speaker 1>that webhook is essentially just ferrying some patches

00:13:21.665 --> 00:13:23.265
<v Speaker 1>which would then be applied

00:13:23.905 --> 00:13:26.225
<v Speaker 1>as part of the mutations and then it

00:13:26.225 --> 00:13:27.665
<v Speaker 1>will go on to the rest of the

00:13:27.665 --> 00:13:28.510
<v Speaker 1>life cycle.

00:13:29.150 --> 00:13:29.790
<v Speaker 0>Okay.

00:13:30.190 --> 00:13:32.110
<v Speaker 0>So is that our first step then is

00:13:32.110 --> 00:13:33.870
<v Speaker 0>that we wanna write some

00:13:34.190 --> 00:13:35.950
<v Speaker 0>go application that we can deploy to our

00:13:35.950 --> 00:13:39.390
<v Speaker 0>cluster register as a web hook, validating or

00:13:39.390 --> 00:13:39.870
<v Speaker 0>mutating

00:13:40.375 --> 00:13:42.455
<v Speaker 0>and just take on a request and just

00:13:42.455 --> 00:13:44.055
<v Speaker 0>pass it on. That's

00:13:44.455 --> 00:13:45.335
<v Speaker 0>step one right?

00:13:45.655 --> 00:13:46.695
<v Speaker 1>Yeah exactly.

00:13:47.175 --> 00:13:47.975
<v Speaker 1>So yeah,

00:13:48.295 --> 00:13:49.015
<v Speaker 1>it's

00:13:50.055 --> 00:13:51.895
<v Speaker 1>pretty much exactly as you described.

00:13:52.375 --> 00:13:54.470
<v Speaker 1>We're going to write a really simple Go

00:13:54.470 --> 00:13:55.269
<v Speaker 1>application,

00:13:55.509 --> 00:13:57.509
<v Speaker 1>a Go binary, and get that deployed. And

00:13:57.509 --> 00:13:59.670
<v Speaker 1>it gets deployed in the cluster just like

00:13:59.670 --> 00:14:00.470
<v Speaker 1>any other

00:14:00.790 --> 00:14:02.629
<v Speaker 1>deployment would. So we're going to create a

00:14:02.629 --> 00:14:03.990
<v Speaker 1>Kubernetes deployment.

00:14:04.149 --> 00:14:05.990
<v Speaker 1>You can run it with multiple replicas.

00:14:07.075 --> 00:14:08.995
<v Speaker 1>You know, it will have a service backing

00:14:08.995 --> 00:14:09.635
<v Speaker 1>it

00:14:09.955 --> 00:14:10.835
<v Speaker 1>and yeah,

00:14:11.795 --> 00:14:14.275
<v Speaker 1>that's basically it. Awesome. I love how you

00:14:14.275 --> 00:14:16.035
<v Speaker 0>say we. I feel that you're just taking

00:14:16.035 --> 00:14:17.475
<v Speaker 0>pity on me because you know, I'm gonna

00:14:17.475 --> 00:14:19.730
<v Speaker 0>be leaning on you an awful lot for

00:14:19.730 --> 00:14:21.170
<v Speaker 0>today's session. So

00:14:21.570 --> 00:14:23.090
<v Speaker 0>let's get started then,

00:14:23.410 --> 00:14:25.330
<v Speaker 0>we have a Versus Code live share set

00:14:25.330 --> 00:14:27.330
<v Speaker 0>up, we both have the ability to pair

00:14:27.330 --> 00:14:29.170
<v Speaker 0>program on this and type code.

00:14:29.890 --> 00:14:32.195
<v Speaker 0>I'm assuming we're gonna wanna just initialize a

00:14:32.195 --> 00:14:33.795
<v Speaker 0>really simple Go repository,

00:14:33.795 --> 00:14:35.395
<v Speaker 0>pull in client Go that we'll probably need

00:14:35.395 --> 00:14:37.395
<v Speaker 0>later and then build a Docker image.

00:14:38.995 --> 00:14:40.755
<v Speaker 0>I'm guessing feel free to just tell me

00:14:40.755 --> 00:14:42.435
<v Speaker 0>I'm wrong and that's not the first step.

00:14:42.835 --> 00:14:44.915
<v Speaker 1>No, no. I think that sounds really really

00:14:44.915 --> 00:14:45.315
<v Speaker 1>reasonable.

00:14:46.230 --> 00:14:47.510
<v Speaker 1>Essentially we'll get,

00:14:48.550 --> 00:14:50.230
<v Speaker 1>it'll allow us to like interact with all

00:14:50.230 --> 00:14:52.070
<v Speaker 1>the different things that are involved

00:14:52.630 --> 00:14:54.870
<v Speaker 1>and like talk a little bit about the

00:14:54.870 --> 00:14:57.190
<v Speaker 1>prerequisites before we get into the really,

00:14:57.990 --> 00:14:58.630
<v Speaker 1>really

00:14:59.190 --> 00:15:01.285
<v Speaker 1>like quite finicky stuff of getting the actual

00:15:01.285 --> 00:15:04.885
<v Speaker 1>webhook installed into Kubernetes itself towards

00:15:05.605 --> 00:15:06.805
<v Speaker 1>the end hopefully.

00:15:07.365 --> 00:15:08.165
<v Speaker 1>So yeah,

00:15:09.045 --> 00:15:11.125
<v Speaker 1>let's start it with some code. Well we

00:15:11.125 --> 00:15:12.885
<v Speaker 0>also have a question. Are you ready? Because

00:15:12.885 --> 00:15:13.845
<v Speaker 0>this

00:15:14.320 --> 00:15:16.400
<v Speaker 0>I wonder if you've got opinions on this.

00:15:17.200 --> 00:15:18.880
<v Speaker 0>Go for Mozz has asked, what are the

00:15:18.880 --> 00:15:21.200
<v Speaker 0>differences between a controller and an operator?

00:15:26.525 --> 00:15:29.645
<v Speaker 1>I see an operator as acting on top

00:15:29.645 --> 00:15:32.285
<v Speaker 1>of a custom resource. So for example, I

00:15:32.285 --> 00:15:34.845
<v Speaker 1>would write an operator if I want to

00:15:34.845 --> 00:15:36.365
<v Speaker 1>interact with something

00:15:37.245 --> 00:15:40.445
<v Speaker 1>outside of the Kubernetes

00:15:39.990 --> 00:15:42.310
<v Speaker 1>ecosystem. So for example, if I wanted to

00:15:42.310 --> 00:15:43.670
<v Speaker 1>tap in to

00:15:43.670 --> 00:15:47.029
<v Speaker 1>a Cassandra cluster and cleanly shut it down

00:15:49.430 --> 00:15:51.350
<v Speaker 1>as part of let's say that I got

00:15:51.350 --> 00:15:53.430
<v Speaker 1>an event that's saying that a pod is

00:15:53.430 --> 00:15:55.195
<v Speaker 1>about to be terminated, and I wanted to

00:15:55.195 --> 00:15:57.195
<v Speaker 1>cleanly shut it down and reconcile that with

00:15:57.195 --> 00:15:59.995
<v Speaker 1>my Cassandra cluster, I would term that as

00:15:59.995 --> 00:16:00.955
<v Speaker 1>an operator.

00:16:01.435 --> 00:16:04.395
<v Speaker 1>Essentially, it's like extending the Kubernetes lifecycle

00:16:06.180 --> 00:16:09.460
<v Speaker 1>to do things with especially stateful infrastructure, for

00:16:09.460 --> 00:16:10.020
<v Speaker 1>example.

00:16:10.580 --> 00:16:12.180
<v Speaker 1>With the controller itself,

00:16:12.420 --> 00:16:13.300
<v Speaker 1>it's more

00:16:14.100 --> 00:16:18.420
<v Speaker 1>taking and interacting with your Kubernetes system itself.

00:16:18.660 --> 00:16:20.260
<v Speaker 1>So essentially, it's taking

00:16:20.740 --> 00:16:23.085
<v Speaker 1>something that you want done in Kubernetes and

00:16:23.085 --> 00:16:25.885
<v Speaker 1>using Kubernetes as a way of making that

00:16:25.885 --> 00:16:28.445
<v Speaker 1>happen. So I would typically have a controller

00:16:28.445 --> 00:16:29.725
<v Speaker 1>interacting with

00:16:30.365 --> 00:16:32.925
<v Speaker 1>standard Kubernetes objects, deployments,

00:16:33.485 --> 00:16:36.900
<v Speaker 1>replica sets, pods, secrets, config maps,

00:16:38.100 --> 00:16:38.740
<v Speaker 1>essentially

00:16:39.380 --> 00:16:40.980
<v Speaker 1>describing those primitives.

00:16:41.940 --> 00:16:42.980
<v Speaker 1>A

00:16:42.980 --> 00:16:46.180
<v Speaker 1>controller and operator under the hood are very

00:16:46.180 --> 00:16:48.340
<v Speaker 1>similar things. You're going to have one loop.

00:16:48.740 --> 00:16:51.595
<v Speaker 1>You're going to be checking for mutations.

00:16:51.595 --> 00:16:53.995
<v Speaker 1>You're going have like a Kubernetes watcher

00:16:54.475 --> 00:16:57.355
<v Speaker 1>at some point, maybe listening for events.

00:16:58.635 --> 00:17:00.075
<v Speaker 1>So in

00:17:00.714 --> 00:17:01.595
<v Speaker 1>implementation,

00:17:01.595 --> 00:17:03.115
<v Speaker 1>they might look quite similar.

00:17:04.155 --> 00:17:06.069
<v Speaker 1>But I think it's just a matter of

00:17:06.069 --> 00:17:06.950
<v Speaker 1>terminology.

00:17:07.190 --> 00:17:08.789
<v Speaker 1>And to be honest it is personal preference

00:17:08.789 --> 00:17:10.230
<v Speaker 1>like depending

00:17:10.230 --> 00:17:12.309
<v Speaker 1>on what you read, where you go,

00:17:13.909 --> 00:17:15.909
<v Speaker 1>the terminologies are really mixed up.

00:17:16.885 --> 00:17:17.524
<v Speaker 0>Okay,

00:17:18.244 --> 00:17:19.924
<v Speaker 0>first I just wanna point out that see

00:17:19.924 --> 00:17:22.244
<v Speaker 0>your ability to answer and explain stuff is

00:17:22.244 --> 00:17:23.125
<v Speaker 0>phenomenal.

00:17:23.125 --> 00:17:24.404
<v Speaker 0>So thank you very much.

00:17:25.045 --> 00:17:27.684
<v Speaker 0>Secondly, would you, I'm gonna throw a statement

00:17:27.684 --> 00:17:30.020
<v Speaker 0>out there. Would you say that all operators

00:17:30.020 --> 00:17:32.580
<v Speaker 0>are controllers but not all controllers are operators?

00:17:33.860 --> 00:17:34.899
<v Speaker 0>Does that pass?

00:17:35.860 --> 00:17:38.980
<v Speaker 1>All operators are controllers but not all controllers

00:17:38.980 --> 00:17:39.940
<v Speaker 1>are operators.

00:17:40.100 --> 00:17:42.820
<v Speaker 1>Yeah, I think would agree with that. You

00:17:42.820 --> 00:17:44.945
<v Speaker 1>see the thing is in an operator,

00:17:45.105 --> 00:17:47.505
<v Speaker 1>there's no reason why an operator again, taking,

00:17:47.505 --> 00:17:49.025
<v Speaker 1>for example, the Cassandra

00:17:49.825 --> 00:17:52.785
<v Speaker 1>example there. There's no reason why the Cassandra

00:17:52.785 --> 00:17:53.665
<v Speaker 1>operator

00:17:53.665 --> 00:17:54.545
<v Speaker 1>can't

00:17:55.105 --> 00:17:57.985
<v Speaker 1>interact with both the Kubernetes ecosystem

00:17:59.100 --> 00:17:59.580
<v Speaker 1>itself.

00:18:00.140 --> 00:18:02.379
<v Speaker 1>Whereas if you're writing a controller,

00:18:02.460 --> 00:18:04.299
<v Speaker 1>I would probably want to scope it to

00:18:04.299 --> 00:18:05.739
<v Speaker 1>just the Kubernetes

00:18:05.900 --> 00:18:07.100
<v Speaker 1>aspect itself

00:18:07.340 --> 00:18:10.780
<v Speaker 1>and leave the actual management of third party

00:18:10.780 --> 00:18:13.784
<v Speaker 1>infrastructure to something like an operator.

00:18:14.825 --> 00:18:16.184
<v Speaker 0>Yeah. Awesome.

00:18:16.825 --> 00:18:19.465
<v Speaker 0>Alright. We'll tackle one more question there. Fair

00:18:19.465 --> 00:18:21.065
<v Speaker 0>coming in today. And then we will actually

00:18:21.065 --> 00:18:23.865
<v Speaker 0>write some codes. So Sachin has asked, is

00:18:23.865 --> 00:18:26.825
<v Speaker 0>there any difference between writing controls from

00:18:27.040 --> 00:18:30.160
<v Speaker 0>versus using tools like cube builder, operator framework,

00:18:30.160 --> 00:18:30.799
<v Speaker 0>etcetera?

00:18:32.240 --> 00:18:33.600
<v Speaker 1>That's a really good question.

00:18:34.400 --> 00:18:34.960
<v Speaker 1>So

00:18:35.200 --> 00:18:37.440
<v Speaker 1>with the pre generated

00:18:37.920 --> 00:18:40.154
<v Speaker 1>code that you get, it comes with a

00:18:40.154 --> 00:18:42.234
<v Speaker 1>lot of niceties out of the box.

00:18:43.034 --> 00:18:44.794
<v Speaker 1>It writes a lot of the boilerplate for

00:18:44.794 --> 00:18:45.274
<v Speaker 1>you.

00:18:45.595 --> 00:18:48.315
<v Speaker 1>It gets you started on a really nice

00:18:48.475 --> 00:18:49.274
<v Speaker 1>layer.

00:18:50.235 --> 00:18:52.154
<v Speaker 1>It gives you all the dependencies you need.

00:18:52.154 --> 00:18:53.755
<v Speaker 1>It gives you some boilerplate YAML that you

00:18:53.755 --> 00:18:55.730
<v Speaker 1>can start applying to cluster.

00:18:55.970 --> 00:18:58.450
<v Speaker 1>Actually, later on when we're writing this mutating

00:18:58.450 --> 00:18:59.250
<v Speaker 1>webhook,

00:19:00.210 --> 00:19:01.810
<v Speaker 1>it's going to be really interesting to go

00:19:01.810 --> 00:19:04.530
<v Speaker 1>through the Kubernetes phase because there's so many

00:19:04.530 --> 00:19:07.010
<v Speaker 1>finicky things that you need to do in

00:19:07.010 --> 00:19:08.290
<v Speaker 1>order to get these

00:19:08.690 --> 00:19:10.375
<v Speaker 1>mutating webhooks hooks running.

00:19:11.815 --> 00:19:12.375
<v Speaker 1>So

00:19:12.615 --> 00:19:14.135
<v Speaker 1>and you know all of these things are

00:19:14.135 --> 00:19:16.375
<v Speaker 1>not extremely well documented.

00:19:16.375 --> 00:19:17.255
<v Speaker 1>Know so

00:19:17.255 --> 00:19:17.894
<v Speaker 1>the

00:19:18.535 --> 00:19:20.215
<v Speaker 1>interesting love when you generate

00:19:20.615 --> 00:19:23.255
<v Speaker 1>something using like the operator framework that might

00:19:23.255 --> 00:19:24.695
<v Speaker 1>be the best source of documentation

00:19:25.490 --> 00:19:27.730
<v Speaker 1>for running a Kubernetes controller.

00:19:28.610 --> 00:19:30.050
<v Speaker 1>Know, because essentially that is part of the

00:19:30.050 --> 00:19:32.130
<v Speaker 1>Kubernetes project and they expect

00:19:32.370 --> 00:19:34.050
<v Speaker 1>others to not go it alone.

00:19:34.930 --> 00:19:38.130
<v Speaker 1>Essentially they expect everyone to be using that

00:19:37.365 --> 00:19:38.404
<v Speaker 1>sort of framework.

00:19:39.365 --> 00:19:40.164
<v Speaker 0>Alright.

00:19:41.285 --> 00:19:42.965
<v Speaker 0>Would it be fair to say that you

00:19:43.765 --> 00:19:46.725
<v Speaker 0>only need to use cube builder operator SDK

00:19:46.725 --> 00:19:49.365
<v Speaker 0>all these other tools when you're registered like

00:19:49.365 --> 00:19:51.205
<v Speaker 0>I always think of them as being tools

00:19:51.205 --> 00:19:52.165
<v Speaker 0>that simplify

00:19:52.165 --> 00:19:55.170
<v Speaker 0>you know creating the CRDs applying them to

00:19:55.170 --> 00:19:57.010
<v Speaker 0>the cluster providing the ownership like when you're

00:19:57.010 --> 00:19:58.690
<v Speaker 0>working at that level it would make sense

00:19:58.690 --> 00:20:00.210
<v Speaker 0>to use one of these tools but for

00:20:00.210 --> 00:20:02.690
<v Speaker 0>today's example where we're doing you know a

00:20:02.690 --> 00:20:05.164
<v Speaker 0>web hook that mutates an existing spec that

00:20:05.164 --> 00:20:07.164
<v Speaker 0>you don't particularly need those tools.

00:20:08.044 --> 00:20:10.604
<v Speaker 1>Yeah that's that's exactly and also I think

00:20:10.605 --> 00:20:12.284
<v Speaker 1>by doing it from scratch it's a nice

00:20:12.284 --> 00:20:14.205
<v Speaker 1>way to understand how all the pieces fit

00:20:14.205 --> 00:20:14.764
<v Speaker 1>together.

00:20:15.164 --> 00:20:16.845
<v Speaker 1>You know all the pieces you need and

00:20:16.845 --> 00:20:17.245
<v Speaker 1>also

00:20:17.840 --> 00:20:19.679
<v Speaker 1>I also want to demonstrate hopefully,

00:20:20.480 --> 00:20:20.880
<v Speaker 1>especially

00:20:21.360 --> 00:20:23.120
<v Speaker 1>the code side, it doesn't need to be

00:20:23.120 --> 00:20:24.159
<v Speaker 1>that complicated.

00:20:25.120 --> 00:20:26.159
<v Speaker 1>Hopefully,

00:20:28.320 --> 00:20:30.159
<v Speaker 1>we'll have to see how we get on.

00:20:31.200 --> 00:20:33.795
<v Speaker 1>Hopefully, lot of the primitives look familiar to

00:20:33.795 --> 00:20:36.275
<v Speaker 1>like anyone who's written Go before

00:20:36.435 --> 00:20:38.675
<v Speaker 1>and maybe not played around too much with

00:20:38.675 --> 00:20:41.075
<v Speaker 1>the Kubernetes SDK side of things.

00:20:41.635 --> 00:20:42.195
<v Speaker 0>Okay.

00:20:42.915 --> 00:20:43.635
<v Speaker 0>Great.

00:20:43.955 --> 00:20:46.435
<v Speaker 0>There's lots of context there, lots of knowledge.

00:20:46.435 --> 00:20:48.030
<v Speaker 0>I hope everyone is enjoying the session. I

00:20:48.030 --> 00:20:49.470
<v Speaker 0>think we just dive straight on now. We

00:20:49.470 --> 00:20:50.910
<v Speaker 0>start getting some code together.

00:20:51.070 --> 00:20:52.910
<v Speaker 0>If you're watching and you have more questions,

00:20:52.910 --> 00:20:54.110
<v Speaker 0>please leave them in the chat. We will

00:20:54.110 --> 00:20:55.390
<v Speaker 0>do our best to answer them as we

00:20:55.390 --> 00:20:55.950
<v Speaker 0>go.

00:20:56.670 --> 00:20:57.390
<v Speaker 0>Alright,

00:20:57.470 --> 00:20:58.510
<v Speaker 0>let's do this.

00:20:58.990 --> 00:21:00.350
<v Speaker 0>I'm gonna assume we just need to run

00:21:00.350 --> 00:21:01.230
<v Speaker 0>a go mod in here.

00:21:03.065 --> 00:21:04.905
<v Speaker 1>Yeah, that's right. We're going to need to

00:21:04.905 --> 00:21:06.985
<v Speaker 1>pull in the Go SDK at some point.

00:21:06.985 --> 00:21:09.304
<v Speaker 1>I've created a main. Go.

00:21:09.785 --> 00:21:11.225
<v Speaker 1>So yeah, we're going start with a package

00:21:11.225 --> 00:21:11.865
<v Speaker 1>main.

00:21:12.665 --> 00:21:14.265
<v Speaker 1>Essentially, what we're going to have is we're

00:21:14.265 --> 00:21:15.705
<v Speaker 1>going to have a HTTP

00:21:15.705 --> 00:21:16.105
<v Speaker 1>server

00:21:16.910 --> 00:21:20.350
<v Speaker 1>listening on TLS. So a mutating webhook

00:21:20.429 --> 00:21:23.230
<v Speaker 1>or any sort of webhook that interacts with

00:21:23.230 --> 00:21:24.509
<v Speaker 1>Kubernetes

00:21:24.510 --> 00:21:25.789
<v Speaker 1>doesn't interact

00:21:26.350 --> 00:21:27.950
<v Speaker 1>over a non TLS connection.

00:21:28.510 --> 00:21:29.950
<v Speaker 1>So we're going to have to do some

00:21:29.950 --> 00:21:31.950
<v Speaker 1>certificate

00:21:30.945 --> 00:21:32.705
<v Speaker 1>faff a little bit later on.

00:21:33.184 --> 00:21:35.024
<v Speaker 1>But we are going to be listening on

00:21:35.024 --> 00:21:36.705
<v Speaker 1>a TLS connection.

00:21:38.304 --> 00:21:40.385
<v Speaker 1>Now, as I say that, I have realized

00:21:40.385 --> 00:21:41.904
<v Speaker 1>that we will also need

00:21:42.385 --> 00:21:44.464
<v Speaker 1>some keys at some point. So for now,

00:21:44.705 --> 00:21:47.100
<v Speaker 1>I imagine we're going to hard bake some

00:21:47.100 --> 00:21:48.620
<v Speaker 1>paths and then we can inject those in

00:21:48.620 --> 00:21:49.740
<v Speaker 1>as a Kubernetes

00:21:50.220 --> 00:21:51.100
<v Speaker 1>secret

00:21:51.180 --> 00:21:53.740
<v Speaker 1>later on when we're setting up the Kubernetes

00:21:53.740 --> 00:21:54.700
<v Speaker 1>side of things.

00:21:55.580 --> 00:21:57.019
<v Speaker 0>Yes definitely.

00:21:58.460 --> 00:21:59.419
<v Speaker 0>Okay so

00:21:59.500 --> 00:22:01.340
<v Speaker 0>Mars has given us some moral support here.

00:22:01.340 --> 00:22:02.715
<v Speaker 0>Let's do it. Thank you.

00:22:03.995 --> 00:22:04.635
<v Speaker 0>Now

00:22:06.155 --> 00:22:07.595
<v Speaker 0>this is just we're just gonna use net

00:22:07.595 --> 00:22:09.115
<v Speaker 0>issue to be ready from the go standard

00:22:09.115 --> 00:22:11.355
<v Speaker 0>library so I mean I'm not gonna remember

00:22:11.355 --> 00:22:12.315
<v Speaker 0>how to type that off the top of

00:22:12.315 --> 00:22:14.155
<v Speaker 0>my head I'm gonna assume you probably may

00:22:14.155 --> 00:22:15.355
<v Speaker 0>be able to type off the top of

00:22:15.355 --> 00:22:16.635
<v Speaker 0>your head but we're just gonna grab that

00:22:16.635 --> 00:22:17.435
<v Speaker 0>from Google

00:22:18.670 --> 00:22:19.390
<v Speaker 1>Yeah.

00:22:20.430 --> 00:22:21.630
<v Speaker 1>I'm gonna go for the time. You're gonna

00:22:21.630 --> 00:22:23.390
<v Speaker 0>go for it. Right? Yeah. I'm gonna go

00:22:23.390 --> 00:22:24.910
<v Speaker 1>for it. Let let's see how much I

00:22:24.910 --> 00:22:25.630
<v Speaker 1>can remember.

00:22:25.870 --> 00:22:26.430
<v Speaker 1>So

00:22:26.990 --> 00:22:31.695
<v Speaker 1>essentially, we're gonna need http.handleFunc,

00:22:31.695 --> 00:22:32.335
<v Speaker 1>I believe.

00:22:33.055 --> 00:22:34.255
<v Speaker 1>And essentially,

00:22:34.575 --> 00:22:36.495
<v Speaker 1>what that's going to look at is

00:22:37.695 --> 00:22:39.615
<v Speaker 1>we're going to have a mutate endpoint.

00:22:40.335 --> 00:22:42.095
<v Speaker 1>And that's going to

00:22:42.655 --> 00:22:45.299
<v Speaker 1>call into a handle mutate function. Is that

00:22:45.299 --> 00:22:47.299
<v Speaker 0>mutate endpoint convention

00:22:47.299 --> 00:22:48.580
<v Speaker 0>or explicit?

00:22:49.299 --> 00:22:50.100
<v Speaker 1>You

00:22:50.100 --> 00:22:52.499
<v Speaker 1>can specify it in your YAML,

00:22:52.820 --> 00:22:54.099
<v Speaker 1>but it is convention.

00:22:55.860 --> 00:22:59.140
<v Speaker 1>Yeah. It is just what all the mutating

00:22:59.140 --> 00:23:01.220
<v Speaker 1>webhooks

00:23:00.285 --> 00:23:01.405
<v Speaker 1>seem to be using.

00:23:03.405 --> 00:23:06.045
<v Speaker 1>So this is gonna be a

00:23:06.205 --> 00:23:07.405
<v Speaker 1>response writer,

00:23:09.245 --> 00:23:09.965
<v Speaker 1>and

00:23:10.045 --> 00:23:13.005
<v Speaker 1>we're going to have a HTTP

00:23:13.005 --> 00:23:14.205
<v Speaker 1>request

00:23:14.605 --> 00:23:15.165
<v Speaker 1>here.

00:23:16.260 --> 00:23:18.660
<v Speaker 1>Hopefully, I got the order of that right.

00:23:21.380 --> 00:23:23.059
<v Speaker 1>Value of type func.

00:23:26.340 --> 00:23:28.180
<v Speaker 1>Oh, sorry. I think I just want to

00:23:28.180 --> 00:23:28.340
<v Speaker 1>handle.

00:23:29.684 --> 00:23:30.804
<v Speaker 1>And

00:23:33.284 --> 00:23:34.164
<v Speaker 1>we're going to have

00:23:35.605 --> 00:23:36.804
<v Speaker 1>a HTTP

00:23:36.804 --> 00:23:38.565
<v Speaker 1>listen and serve

00:23:39.445 --> 00:23:40.404
<v Speaker 1>TLS.

00:23:42.725 --> 00:23:45.549
<v Speaker 1>Have listen on port four forty three.

00:23:46.830 --> 00:23:48.269
<v Speaker 1>And that's a

00:23:48.590 --> 00:23:49.309
<v Speaker 1>cert.

00:23:51.070 --> 00:23:51.789
<v Speaker 1>Server

00:23:52.270 --> 00:23:54.910
<v Speaker 1>oh, sorry, webhook.cert.

00:23:55.575 --> 00:23:56.534
<v Speaker 1>And

00:24:00.615 --> 00:24:04.534
<v Speaker 1>webhookkey.pem

00:24:04.534 --> 00:24:05.975
<v Speaker 1>at some point. So we're going to have

00:24:05.975 --> 00:24:08.134
<v Speaker 1>to inject those in as a Kubernetes secret.

00:24:09.095 --> 00:24:10.999
<v Speaker 1>I wonder why this is

00:24:11.480 --> 00:24:12.759
<v Speaker 1>not liking.

00:24:13.320 --> 00:24:15.399
<v Speaker 1>I believe we do need a handle function.

00:24:16.440 --> 00:24:17.320
<v Speaker 1>Is that correct?

00:24:17.960 --> 00:24:18.600
<v Speaker 0>Hold

00:24:18.920 --> 00:24:20.600
<v Speaker 0>on. If I get the other complete, I'll

00:24:20.600 --> 00:24:23.575
<v Speaker 0>just show people let's say pattern and handler

00:24:23.575 --> 00:24:25.095
<v Speaker 0>was accepted here.

00:24:25.895 --> 00:24:27.575
<v Speaker 0>So let's see.

00:24:28.295 --> 00:24:29.735
<v Speaker 0>What's the error message?

00:24:31.015 --> 00:24:33.015
<v Speaker 1>I think I've got in the pointers the

00:24:33.015 --> 00:24:33.655
<v Speaker 1>wrong way around.

00:24:38.270 --> 00:24:40.510
<v Speaker 0>Cannot use handle mutate

00:24:40.510 --> 00:24:43.070
<v Speaker 0>value of func blah blah blah as we

00:24:43.070 --> 00:24:45.150
<v Speaker 0>should be handler value and argumentation handler message

00:24:45.150 --> 00:24:46.830
<v Speaker 0>server

00:24:46.035 --> 00:24:46.755
<v Speaker 0>HTTP.

00:24:48.035 --> 00:24:48.755
<v Speaker 1>I

00:24:48.835 --> 00:24:50.275
<v Speaker 1>had the pointers

00:24:50.275 --> 00:24:52.195
<v Speaker 1>of the arguments the wrong way around. The

00:24:52.195 --> 00:24:54.035
<v Speaker 1>HTTP response writer is

00:24:54.435 --> 00:24:56.595
<v Speaker 1>just a standard struct and the HTTP request

00:24:56.595 --> 00:24:57.875
<v Speaker 1>is pointer.

00:24:58.675 --> 00:25:00.115
<v Speaker 1>Sounds me right for not Googling.

00:25:02.030 --> 00:25:02.830
<v Speaker 1>Cool.

00:25:03.710 --> 00:25:05.470
<v Speaker 1>Now what we get in,

00:25:05.790 --> 00:25:08.990
<v Speaker 1>if maybe we quickly pull up the documentation

00:25:08.990 --> 00:25:09.710
<v Speaker 1>for

00:25:09.950 --> 00:25:11.070
<v Speaker 1>an admission

00:25:11.150 --> 00:25:12.029
<v Speaker 1>controller.

00:25:14.990 --> 00:25:15.710
<v Speaker 1>So

00:25:16.125 --> 00:25:18.525
<v Speaker 1>if you maybe search for admission review, maybe

00:25:18.525 --> 00:25:19.644
<v Speaker 1>it's on this page.

00:25:24.925 --> 00:25:25.644
<v Speaker 0>Nope.

00:25:26.125 --> 00:25:26.845
<v Speaker 0>No.

00:25:27.165 --> 00:25:29.164
<v Speaker 0>That's the admission review.

00:25:29.165 --> 00:25:31.885
<v Speaker 0>We just want that struct. Right? So Yeah.

00:25:31.885 --> 00:25:32.700
<v Speaker 1>That's That's right.

00:25:38.860 --> 00:25:41.179
<v Speaker 1>There we are. Oh, actually, that's perfect. So

00:25:41.419 --> 00:25:43.900
<v Speaker 1>webhooks are sent a post request with content

00:25:43.900 --> 00:25:45.340
<v Speaker 1>type application JSON,

00:25:45.580 --> 00:25:48.059
<v Speaker 1>and it has an admission review API object

00:25:48.674 --> 00:25:50.674
<v Speaker 1>in the admission.case.io

00:25:50.674 --> 00:25:51.634
<v Speaker 1>API group.

00:25:52.115 --> 00:25:54.274
<v Speaker 1>So essentially, that's what we're going to be

00:25:54.434 --> 00:25:55.714
<v Speaker 1>getting in.

00:25:56.274 --> 00:25:58.755
<v Speaker 1>And as a response, we'll also be sending

00:25:58.755 --> 00:26:00.355
<v Speaker 1>back out and it says later on in

00:26:00.355 --> 00:26:02.115
<v Speaker 1>the page an admission review

00:26:02.770 --> 00:26:04.610
<v Speaker 1>response. So admission review has

00:26:04.930 --> 00:26:05.809
<v Speaker 1>oddly

00:26:07.490 --> 00:26:10.529
<v Speaker 1>non Go standardness. It has an admission review

00:26:10.610 --> 00:26:12.930
<v Speaker 1>and then a request inside it. And it

00:26:12.930 --> 00:26:14.865
<v Speaker 1>also has the response inside it as well.

00:26:15.265 --> 00:26:17.025
<v Speaker 1>So we'll get an admission review, and we'll

00:26:17.025 --> 00:26:19.265
<v Speaker 1>send back an admission review. So let's write

00:26:19.265 --> 00:26:20.625
<v Speaker 1>a really, really simple one

00:26:21.025 --> 00:26:23.345
<v Speaker 1>where we're just taking in the admission review

00:26:23.345 --> 00:26:24.544
<v Speaker 1>and marshaling it,

00:26:24.945 --> 00:26:25.664
<v Speaker 1>and then

00:26:25.905 --> 00:26:28.740
<v Speaker 1>just spitting the same admission review back out.

00:26:29.380 --> 00:26:31.140
<v Speaker 1>And in order to do this, we're going

00:26:31.140 --> 00:26:32.419
<v Speaker 1>to need the

00:26:34.100 --> 00:26:34.980
<v Speaker 1>API

00:26:35.140 --> 00:26:38.020
<v Speaker 1>sorry, the K8s API. So if we do

00:26:38.580 --> 00:26:41.140
<v Speaker 1>go get. Uk8s.io

00:26:41.540 --> 00:26:42.100
<v Speaker 1>API,

00:26:45.795 --> 00:26:47.875
<v Speaker 1>That would download the latest API and also

00:26:47.875 --> 00:26:50.035
<v Speaker 1>put it in our Go mod. And that

00:26:50.035 --> 00:26:51.955
<v Speaker 1>should be ready for use now.

00:26:54.355 --> 00:26:54.835
<v Speaker 1>So

00:26:55.235 --> 00:26:56.595
<v Speaker 1>if we have input

00:26:56.940 --> 00:26:57.979
<v Speaker 1>as

00:26:57.980 --> 00:26:58.860
<v Speaker 1>admission

00:26:58.860 --> 00:26:59.979
<v Speaker 1>v one,

00:27:00.380 --> 00:27:01.499
<v Speaker 1>admission

00:27:02.299 --> 00:27:03.259
<v Speaker 1>review,

00:27:03.899 --> 00:27:07.099
<v Speaker 1>this is the struct we're gonna drop into.

00:27:09.260 --> 00:27:11.340
<v Speaker 1>Let's see if the PLS more like this.

00:27:12.875 --> 00:27:15.355
<v Speaker 1>Admission v one is

00:27:17.035 --> 00:27:18.155
<v Speaker 1>case.io

00:27:18.155 --> 00:27:19.435
<v Speaker 1>slash API

00:27:19.435 --> 00:27:21.835
<v Speaker 1>admission v one, which is where the

00:27:23.755 --> 00:27:25.435
<v Speaker 1>actual admission lies.

00:27:27.920 --> 00:27:30.240
<v Speaker 1>I think that's just resolving on my end.

00:27:32.640 --> 00:27:34.000
<v Speaker 1>So while it's resolving,

00:27:34.240 --> 00:27:35.600
<v Speaker 1>I will continue coding.

00:27:36.880 --> 00:27:38.960
<v Speaker 1>So essentially, what we want to do

00:27:39.280 --> 00:27:40.639
<v Speaker 1>is we want to

00:27:41.600 --> 00:27:42.240
<v Speaker 1>decode

00:27:42.945 --> 00:27:43.504
<v Speaker 1>body

00:27:43.745 --> 00:27:45.184
<v Speaker 1>that we get from

00:27:45.904 --> 00:27:48.304
<v Speaker 1>the request into this admission review.

00:27:49.105 --> 00:27:51.024
<v Speaker 1>So that's going to be auto body

00:27:51.184 --> 00:27:52.384
<v Speaker 1>and decode

00:27:52.625 --> 00:27:53.105
<v Speaker 1>review.

00:27:57.570 --> 00:27:58.529
<v Speaker 1>For

00:27:59.250 --> 00:28:01.170
<v Speaker 1>all my girlfriends that are watching, we're gonna

00:28:01.170 --> 00:28:03.170
<v Speaker 1>be quite liberal with the errors that come

00:28:03.170 --> 00:28:05.170
<v Speaker 1>out of this. We're just gonna send them

00:28:05.170 --> 00:28:05.970
<v Speaker 1>back out.

00:28:06.770 --> 00:28:07.570
<v Speaker 1>Interestingly,

00:28:07.810 --> 00:28:09.490
<v Speaker 1>what you can do is

00:28:09.650 --> 00:28:12.794
<v Speaker 1>within the when you're writing an admission controller,

00:28:12.955 --> 00:28:14.794
<v Speaker 1>if it does return an error,

00:28:15.035 --> 00:28:17.355
<v Speaker 1>you can specify as part of your mutating

00:28:17.355 --> 00:28:20.395
<v Speaker 1>webhook whether you want the admission to fail

00:28:20.955 --> 00:28:23.435
<v Speaker 1>because it couldn't resolve or to ignore. So

00:28:23.435 --> 00:28:25.835
<v Speaker 1>essentially to just continue on with no mutations

00:28:26.429 --> 00:28:28.429
<v Speaker 1>being applied from the mutating webhook.

00:28:28.590 --> 00:28:30.429
<v Speaker 1>So when we initially set it up, we're

00:28:30.429 --> 00:28:32.029
<v Speaker 1>probably going set it to ignore level because

00:28:32.029 --> 00:28:33.149
<v Speaker 1>we're testing around.

00:28:33.710 --> 00:28:35.549
<v Speaker 1>But then we may switch that to a

00:28:35.549 --> 00:28:37.629
<v Speaker 1>more stricter policy of

00:28:37.789 --> 00:28:39.470
<v Speaker 1>failing if it encounters any errors.

00:28:40.975 --> 00:28:44.254
<v Speaker 1>So I'm just gonna define maybe a send

00:28:44.254 --> 00:28:45.374
<v Speaker 1>error function,

00:28:46.095 --> 00:28:47.695
<v Speaker 1>which is gonna take an error.

00:28:49.615 --> 00:28:52.574
<v Speaker 1>And what that's going to do is

00:28:53.534 --> 00:28:55.455
<v Speaker 1>that's also going to take our

00:28:56.500 --> 00:28:58.739
<v Speaker 1>response writer as well.

00:29:00.340 --> 00:29:01.460
<v Speaker 1>Writer.

00:29:06.260 --> 00:29:07.700
<v Speaker 1>We want to

00:29:08.660 --> 00:29:10.914
<v Speaker 1>send back content type

00:29:13.235 --> 00:29:14.514
<v Speaker 1>application JSON.

00:29:16.355 --> 00:29:16.914
<v Speaker 1>And

00:29:19.075 --> 00:29:21.154
<v Speaker 1>we also want to

00:29:21.394 --> 00:29:23.154
<v Speaker 1>send back a status code.

00:29:27.410 --> 00:29:28.850
<v Speaker 1>Think the autocomplete

00:29:28.850 --> 00:29:29.570
<v Speaker 1>has

00:29:29.810 --> 00:29:31.009
<v Speaker 1>sort of broken

00:29:32.130 --> 00:29:35.490
<v Speaker 1>internal server error. That's alright. I'll just continue

00:29:35.490 --> 00:29:37.405
<v Speaker 1>to type while it catches up.

00:29:38.365 --> 00:29:39.165
<v Speaker 1>And

00:29:39.325 --> 00:29:42.205
<v Speaker 1>we also want to marshal the error at

00:29:42.205 --> 00:29:43.005
<v Speaker 1>some point.

00:29:43.565 --> 00:29:43.885
<v Speaker 1>So

00:29:53.350 --> 00:29:54.149
<v Speaker 1>Marshall

00:29:55.110 --> 00:29:55.510
<v Speaker 1>match.

00:30:07.005 --> 00:30:09.644
<v Speaker 0>I think this compiler caught up, so

00:30:11.005 --> 00:30:13.565
<v Speaker 0>hopefully you have your auto complete back.

00:30:16.924 --> 00:30:17.325
<v Speaker 1>Oh.

00:30:19.960 --> 00:30:22.600
<v Speaker 0>Although it keeps saying add our loading workspace.

00:30:28.200 --> 00:30:30.360
<v Speaker 0>Okay. So go some needed disabled by mod

00:30:30.360 --> 00:30:33.255
<v Speaker 0>read only. Alright. Okay. Go mod's just about

00:30:33.255 --> 00:30:34.695
<v Speaker 0>unhappy. We'll try and fix it when you're

00:30:34.695 --> 00:30:35.734
<v Speaker 0>you're ready.

00:30:36.375 --> 00:30:37.094
<v Speaker 1>Cool.

00:30:41.095 --> 00:30:43.975
<v Speaker 1>So what I've done here is I have

00:30:43.975 --> 00:30:45.414
<v Speaker 1>output that error,

00:30:46.370 --> 00:30:49.249
<v Speaker 1>And there's not much we can do if

00:30:49.889 --> 00:30:51.409
<v Speaker 1>we're already in the process of sending an

00:30:51.409 --> 00:30:53.809
<v Speaker 1>error and we have an error whilst we're

00:30:53.809 --> 00:30:55.249
<v Speaker 1>trying to encode the error.

00:30:55.490 --> 00:30:58.129
<v Speaker 1>So hopefully that will succeed all the time.

00:30:58.929 --> 00:31:01.249
<v Speaker 1>And we want to write that out. And

00:31:01.250 --> 00:31:02.794
<v Speaker 1>we are done there.

00:31:04.475 --> 00:31:05.515
<v Speaker 1>Let's see.

00:31:06.795 --> 00:31:09.595
<v Speaker 1>I probably needed to download all the dependencies.

00:31:15.260 --> 00:31:17.659
<v Speaker 0>Yeah. Hopefully that keeps it happy.

00:31:18.139 --> 00:31:19.580
<v Speaker 0>Undefined JSON.

00:31:21.580 --> 00:31:23.820
<v Speaker 1>Undefined JSON. Yeah. So we probably didn't import

00:31:23.820 --> 00:31:25.739
<v Speaker 1>that. Thank you. And

00:31:26.059 --> 00:31:27.980
<v Speaker 1>I think we're missing

00:31:28.675 --> 00:31:30.515
<v Speaker 1>our listen and serve

00:31:31.235 --> 00:31:32.035
<v Speaker 0>String

00:31:32.035 --> 00:31:33.715
<v Speaker 0>string string handler.

00:31:34.355 --> 00:31:36.675
<v Speaker 1>We need to specify a handler. Well, I

00:31:36.675 --> 00:31:38.035
<v Speaker 1>think I might need to wrap this in

00:31:38.035 --> 00:31:40.115
<v Speaker 1>a in a serve mux.

00:31:43.560 --> 00:31:44.680
<v Speaker 1>We

00:31:50.760 --> 00:31:51.960
<v Speaker 1>need

00:31:52.680 --> 00:31:53.800
<v Speaker 1>a server.

00:31:57.105 --> 00:31:58.225
<v Speaker 1>HTTP

00:31:58.225 --> 00:31:59.345
<v Speaker 1>server.

00:32:02.865 --> 00:32:03.585
<v Speaker 0>Free.

00:32:06.304 --> 00:32:06.864
<v Speaker 1>Handler

00:32:07.745 --> 00:32:09.345
<v Speaker 1>is going to be Linux.

00:32:10.590 --> 00:32:11.390
<v Speaker 1>And then

00:32:11.630 --> 00:32:13.789
<v Speaker 1>serve this and then serve PLS.

00:32:14.510 --> 00:32:16.750
<v Speaker 1>And just specify the port because that's in

00:32:16.750 --> 00:32:17.390
<v Speaker 1>the address.

00:32:25.095 --> 00:32:27.975
<v Speaker 1>I've got a saving main dot go here.

00:32:27.975 --> 00:32:30.135
<v Speaker 1>I imagine that's not saved yet.

00:32:33.575 --> 00:32:34.295
<v Speaker 1>Can

00:32:34.615 --> 00:32:37.310
<v Speaker 0>include actions from Go. Thanks to s code.

00:32:37.310 --> 00:32:38.190
<v Speaker 0>Very helpful.

00:32:40.990 --> 00:32:42.910
<v Speaker 0>I'm not sure what it's

00:32:54.085 --> 00:32:56.804
<v Speaker 1>Oh, okay. I think that just saved. So

00:32:58.645 --> 00:33:00.804
<v Speaker 0>It says we have string string string and

00:33:00.804 --> 00:33:03.364
<v Speaker 0>I want string string string handler.

00:33:04.645 --> 00:33:08.164
<v Speaker 1>Yeah. But we don't have http.listen

00:33:07.340 --> 00:33:09.019
<v Speaker 1>and serve t l s anymore.

00:33:10.140 --> 00:33:11.340
<v Speaker 1>So

00:33:11.900 --> 00:33:15.019
<v Speaker 1>I wonder if it's even reading that code.

00:33:15.260 --> 00:33:17.260
<v Speaker 1>Let's have a look. Main.go.

00:33:17.260 --> 00:33:18.940
<v Speaker 1>Yeah. So it's still got our old code

00:33:18.940 --> 00:33:19.580
<v Speaker 1>there.

00:33:21.260 --> 00:33:22.860
<v Speaker 1>Don't think Versus code has saved that.

00:33:25.605 --> 00:33:27.604
<v Speaker 0>Let's see what is this saying.

00:33:34.885 --> 00:33:35.365
<v Speaker 0>Cancel.

00:33:37.730 --> 00:33:40.530
<v Speaker 0>Let's try just maybe it's just unhappy because

00:33:40.530 --> 00:33:42.210
<v Speaker 0>it's trying to run something. Let's make sure

00:33:42.210 --> 00:33:44.049
<v Speaker 0>we have our dependencies.

00:33:50.210 --> 00:33:50.610
<v Speaker 0>Save.

00:33:54.225 --> 00:33:55.184
<v Speaker 0>There we go.

00:33:56.625 --> 00:33:57.345
<v Speaker 0>Okay.

00:34:01.424 --> 00:34:02.865
<v Speaker 0>So we got package

00:34:02.865 --> 00:34:03.505
<v Speaker 0>JSON.

00:34:05.760 --> 00:34:06.640
<v Speaker 1>That's

00:34:06.640 --> 00:34:07.279
<v Speaker 1>good.

00:34:08.400 --> 00:34:10.960
<v Speaker 1>Does it need to be encoding JSON?

00:34:11.280 --> 00:34:12.239
<v Speaker 0>Yeah.

00:34:12.239 --> 00:34:13.120
<v Speaker 0>Think you're right.

00:34:15.360 --> 00:34:16.880
<v Speaker 1>Am I am I on that line?

00:34:17.600 --> 00:34:19.840
<v Speaker 1>If you just add encoding slash JSON.

00:34:20.639 --> 00:34:21.280
<v Speaker 1>There we are.

00:34:24.085 --> 00:34:24.804
<v Speaker 1>Sweet.

00:34:25.125 --> 00:34:26.484
<v Speaker 1>Let's give that a build.

00:34:28.484 --> 00:34:29.764
<v Speaker 0>Okay. We're closer.

00:34:30.244 --> 00:34:33.844
<v Speaker 1>We're getting there. Not enough arguments in call

00:34:34.085 --> 00:34:37.010
<v Speaker 1>for HTTP error. That's line number 22.

00:34:37.010 --> 00:34:40.290
<v Speaker 1>Ah, cool. Okay. So that's just on our

00:34:40.290 --> 00:34:41.570
<v Speaker 1>error line here.

00:34:42.770 --> 00:34:44.130
<v Speaker 1>So essentially,

00:34:46.449 --> 00:34:49.330
<v Speaker 1>what we want there is we also need

00:34:49.330 --> 00:34:51.375
<v Speaker 1>to specify specify the

00:34:51.935 --> 00:34:53.215
<v Speaker 1>oh, the return code.

00:34:54.735 --> 00:34:55.695
<v Speaker 1>Status

00:34:55.695 --> 00:34:56.495
<v Speaker 1>internal

00:34:56.495 --> 00:34:57.455
<v Speaker 1>sub error.

00:35:00.415 --> 00:35:03.220
<v Speaker 1>Yeah. That should work. What else was around?

00:35:03.220 --> 00:35:05.620
<v Speaker 0>Handle mutate. It's got a few bugs here.

00:35:05.940 --> 00:35:08.260
<v Speaker 1>Yes. Okay. Cool. So

00:35:08.580 --> 00:35:10.260
<v Speaker 1>that should not be reviewed. That should be

00:35:10.260 --> 00:35:10.900
<v Speaker 1>input.

00:35:13.540 --> 00:35:14.500
<v Speaker 1>And if

00:35:14.660 --> 00:35:16.100
<v Speaker 1>does not equal mail, send.

00:35:21.085 --> 00:35:22.445
<v Speaker 1>Response writer.

00:35:22.845 --> 00:35:24.685
<v Speaker 0>To the people watching, we'll we'll go over

00:35:24.685 --> 00:35:25.964
<v Speaker 0>all this in a moment once we get

00:35:25.964 --> 00:35:26.765
<v Speaker 0>it compelling.

00:35:28.045 --> 00:35:29.245
<v Speaker 1>Yes. Yes.

00:35:31.085 --> 00:35:33.530
<v Speaker 1>Could not on Marshall.

00:35:34.570 --> 00:35:35.210
<v Speaker 1>Ricky

00:35:37.370 --> 00:35:39.050
<v Speaker 0>says, I can't believe there's someone who can

00:35:39.050 --> 00:35:40.810
<v Speaker 0>code without ID auto complete.

00:35:41.210 --> 00:35:43.130
<v Speaker 0>Yes. It's not me. I'm glad it's a

00:35:43.130 --> 00:35:45.335
<v Speaker 0>hail that's for sure and I would have

00:35:45.335 --> 00:35:47.335
<v Speaker 0>copy and pasted all of that http handle

00:35:47.335 --> 00:35:49.335
<v Speaker 0>stuff. You were very brave there.

00:35:51.494 --> 00:35:53.575
<v Speaker 0>Or silly, who knows we'll find out. Yeah,

00:35:53.575 --> 00:35:55.255
<v Speaker 1>I think I think it's probably the latter

00:35:55.255 --> 00:35:55.494
<v Speaker 1>there.

00:35:56.369 --> 00:35:58.369
<v Speaker 1>Brave I think is a is a a

00:35:58.369 --> 00:36:00.050
<v Speaker 1>I think it's giving me too much credit.

00:36:01.009 --> 00:36:01.570
<v Speaker 0>You

00:36:01.809 --> 00:36:03.650
<v Speaker 0>did well you were pulling that at the

00:36:03.650 --> 00:36:05.809
<v Speaker 0>top of your head and it's even compiling

00:36:05.809 --> 00:36:07.570
<v Speaker 0>now so. Oh wow.

00:36:08.849 --> 00:36:09.410
<v Speaker 1>Amazing.

00:36:10.210 --> 00:36:11.329
<v Speaker 0>Alright so

00:36:11.355 --> 00:36:12.715
<v Speaker 0>Let's just take

00:36:12.955 --> 00:36:13.995
<v Speaker 0>one minute

00:36:14.155 --> 00:36:14.795
<v Speaker 0>to

00:36:14.955 --> 00:36:17.355
<v Speaker 0>go through this talk about what's actually happening.

00:36:17.355 --> 00:36:19.595
<v Speaker 0>Know it's mostly boilerplate I think that's should

00:36:19.595 --> 00:36:21.275
<v Speaker 0>be encouraging for people we've not actually done

00:36:21.275 --> 00:36:23.755
<v Speaker 0>anything yet. This is literally code you could

00:36:23.915 --> 00:36:25.595
<v Speaker 0>if it works copy and paste and use

00:36:25.595 --> 00:36:27.920
<v Speaker 0>it for all of your admission controllers.

00:36:27.920 --> 00:36:28.960
<v Speaker 0>So I'll

00:36:28.960 --> 00:36:30.079
<v Speaker 0>let you just take a wee bit of

00:36:30.079 --> 00:36:31.599
<v Speaker 0>time to run through this since it's your

00:36:31.599 --> 00:36:32.160
<v Speaker 0>code.

00:36:32.799 --> 00:36:35.119
<v Speaker 1>Yeah absolutely. So starting at the at the

00:36:35.119 --> 00:36:37.599
<v Speaker 1>bottom there into our main function, that's going

00:36:37.599 --> 00:36:40.165
<v Speaker 1>to be our entry point And essentially, what

00:36:40.165 --> 00:36:41.605
<v Speaker 1>we're saying there is

00:36:41.925 --> 00:36:43.525
<v Speaker 1>we've defined one

00:36:44.484 --> 00:36:46.645
<v Speaker 1>endpoint, the mutate endpoint.

00:36:47.525 --> 00:36:50.085
<v Speaker 1>And that's going to call into the handle

00:36:50.085 --> 00:36:51.204
<v Speaker 1>mutate function there.

00:36:51.840 --> 00:36:55.120
<v Speaker 1>We're listening on port four forty three. That

00:36:55.120 --> 00:36:57.200
<v Speaker 1>will listen on local host. So we need

00:36:57.200 --> 00:36:59.360
<v Speaker 1>to set up the container port forwarding in

00:36:59.360 --> 00:37:00.640
<v Speaker 1>our Kubernetes

00:37:02.640 --> 00:37:03.440
<v Speaker 1>manifest.

00:37:04.160 --> 00:37:04.880
<v Speaker 1>And essentially,

00:37:05.895 --> 00:37:08.695
<v Speaker 1>we are setting up a TLS

00:37:09.975 --> 00:37:10.775
<v Speaker 1>server.

00:37:11.175 --> 00:37:13.015
<v Speaker 1>So what Go will do under the hood

00:37:13.015 --> 00:37:15.895
<v Speaker 1>is it will set up a TLS wrapped

00:37:16.295 --> 00:37:18.295
<v Speaker 1>HTTP server. So it will do all the

00:37:18.295 --> 00:37:19.895
<v Speaker 1>TLS validation

00:37:19.895 --> 00:37:20.455
<v Speaker 1>for us,

00:37:23.360 --> 00:37:24.800
<v Speaker 1>everything that is necessary.

00:37:25.280 --> 00:37:26.400
<v Speaker 1>We probably

00:37:28.240 --> 00:37:29.920
<v Speaker 1>wrap this in a log. Fatal,

00:37:30.320 --> 00:37:32.880
<v Speaker 1>just if it quits for whatever reason. And

00:37:32.880 --> 00:37:34.400
<v Speaker 1>this will essentially block.

00:37:34.560 --> 00:37:36.640
<v Speaker 1>So it will continue listening forever.

00:37:37.755 --> 00:37:39.115
<v Speaker 1>And I've just wrapped it in a log

00:37:39.115 --> 00:37:41.755
<v Speaker 1>dot fatal to print out any errors if

00:37:41.755 --> 00:37:43.595
<v Speaker 1>it exits uncleanly.

00:37:45.115 --> 00:37:47.035
<v Speaker 1>Yeah. So that's our main function there.

00:37:47.355 --> 00:37:48.875
<v Speaker 1>If we scroll up a little,

00:37:51.010 --> 00:37:52.610
<v Speaker 1>we've defined a

00:37:53.250 --> 00:37:54.610
<v Speaker 1>mutate handler,

00:37:54.610 --> 00:37:56.290
<v Speaker 1>a HTTP handler,

00:37:56.690 --> 00:37:59.730
<v Speaker 1>that takes in the two traditional arguments for

00:37:59.730 --> 00:38:02.530
<v Speaker 1>every HTTP handler, which is a writer and

00:38:02.530 --> 00:38:03.170
<v Speaker 1>the request.

00:38:04.235 --> 00:38:06.475
<v Speaker 1>Oddly the request doesn't come first as an

00:38:06.475 --> 00:38:08.155
<v Speaker 1>argument. If I was

00:38:09.435 --> 00:38:11.035
<v Speaker 1>the implementer of this I'd put the request

00:38:11.035 --> 00:38:12.715
<v Speaker 1>first just because that's how I think about

00:38:12.715 --> 00:38:14.635
<v Speaker 1>it. Request then response.

00:38:14.875 --> 00:38:16.155
<v Speaker 1>But here you get it the other way

00:38:16.155 --> 00:38:16.715
<v Speaker 1>around.

00:38:17.835 --> 00:38:19.995
<v Speaker 1>So yeah you have

00:38:20.500 --> 00:38:23.060
<v Speaker 1>just a standard HTTP

00:38:23.540 --> 00:38:26.020
<v Speaker 1>Go boilerplate function, which is taken in our

00:38:26.020 --> 00:38:28.580
<v Speaker 1>request. The actual payload itself is in the

00:38:28.580 --> 00:38:30.820
<v Speaker 1>body. So we have R. Body.

00:38:31.540 --> 00:38:33.700
<v Speaker 1>And essentially, we need to write out any

00:38:33.700 --> 00:38:36.045
<v Speaker 1>sort of response to the ResponseWriter.

00:38:36.045 --> 00:38:37.085
<v Speaker 1>Now ResponseWriter

00:38:37.085 --> 00:38:39.244
<v Speaker 1>is quite literally an IO buffer under the

00:38:39.244 --> 00:38:40.205
<v Speaker 1>hood. So

00:38:40.605 --> 00:38:42.845
<v Speaker 1>if you were using Netcat or something like

00:38:42.845 --> 00:38:43.325
<v Speaker 1>that,

00:38:44.045 --> 00:38:45.885
<v Speaker 1>you would have to send out your response

00:38:45.885 --> 00:38:47.170
<v Speaker 1>in the same order. So you need to

00:38:47.170 --> 00:38:47.890
<v Speaker 1>write the

00:38:48.930 --> 00:38:49.970
<v Speaker 1>status code.

00:38:50.290 --> 00:38:51.810
<v Speaker 1>You need to write any

00:38:51.970 --> 00:38:52.770
<v Speaker 1>headers

00:38:52.770 --> 00:38:54.210
<v Speaker 1>that you need to write first. And then

00:38:54.210 --> 00:38:55.810
<v Speaker 1>you write out your payload

00:38:57.010 --> 00:38:57.730
<v Speaker 1>in the end.

00:38:59.244 --> 00:38:59.965
<v Speaker 1>All right.

00:39:00.605 --> 00:39:02.285
<v Speaker 0>Now I guess I have a question. In

00:39:02.285 --> 00:39:05.645
<v Speaker 0>our handle mutate function, we're not returning anything?

00:39:06.925 --> 00:39:09.325
<v Speaker 1>Yeah, that's right. So the

00:39:09.565 --> 00:39:12.365
<v Speaker 1>handler has no mutation arguments.

00:39:12.685 --> 00:39:14.125
<v Speaker 1>Sorry, it has no return arguments.

00:39:14.890 --> 00:39:16.650
<v Speaker 1>You know, it doesn't return anything like an

00:39:16.650 --> 00:39:17.930
<v Speaker 1>error or anything like that.

00:39:18.570 --> 00:39:21.130
<v Speaker 1>Think about it from Go perspective. If a

00:39:21.130 --> 00:39:24.090
<v Speaker 1>Go is serving a HTTP request,

00:39:25.370 --> 00:39:28.890
<v Speaker 1>within the boundaries of that particular function, anything

00:39:29.130 --> 00:39:30.575
<v Speaker 1>that could error,

00:39:31.055 --> 00:39:32.575
<v Speaker 1>you know, would have to be like a

00:39:32.575 --> 00:39:35.454
<v Speaker 1>panic level error, like where the entire program

00:39:35.454 --> 00:39:36.655
<v Speaker 1>just crashes.

00:39:37.615 --> 00:39:38.734
<v Speaker 1>Otherwise,

00:39:38.734 --> 00:39:40.414
<v Speaker 1>all the other errors are meant to be

00:39:40.414 --> 00:39:42.335
<v Speaker 1>handled in the request response lifecycle.

00:39:42.890 --> 00:39:44.890
<v Speaker 1>So for example, if you encounter any sort

00:39:44.890 --> 00:39:46.810
<v Speaker 1>of logical error with the request that comes

00:39:46.810 --> 00:39:47.290
<v Speaker 1>in,

00:39:48.410 --> 00:39:51.290
<v Speaker 1>we've written a boilerplate function to send out

00:39:51.290 --> 00:39:52.730
<v Speaker 1>an error. Because we'll be using this quite

00:39:52.730 --> 00:39:53.370
<v Speaker 1>often

00:39:54.650 --> 00:39:55.210
<v Speaker 1>throughout

00:39:56.125 --> 00:39:57.725
<v Speaker 1>the handling of the

00:39:58.125 --> 00:39:59.485
<v Speaker 1>mutation itself.

00:39:59.885 --> 00:40:00.845
<v Speaker 1>Especially

00:40:01.165 --> 00:40:03.645
<v Speaker 1>when we're encoding things back and forth, there's

00:40:03.645 --> 00:40:06.925
<v Speaker 1>always places where things could fail. And in

00:40:06.925 --> 00:40:09.690
<v Speaker 1>Go, it's good practice to always handle the

00:40:09.690 --> 00:40:11.370
<v Speaker 1>errors as soon as they come in

00:40:11.770 --> 00:40:13.130
<v Speaker 1>and not ignore them

00:40:13.370 --> 00:40:14.170
<v Speaker 1>unlike

00:40:14.250 --> 00:40:15.770
<v Speaker 1>Java where you just have like a big

00:40:15.770 --> 00:40:16.890
<v Speaker 1>try catch block.

00:40:17.610 --> 00:40:18.650
<v Speaker 0>Okay. Could we

00:40:20.385 --> 00:40:23.105
<v Speaker 0>just explain like, okay, so if there's multiple

00:40:23.105 --> 00:40:26.945
<v Speaker 0>admission controllers registered with our Kubernetes API server,

00:40:27.185 --> 00:40:29.505
<v Speaker 0>you know, and we're one of many.

00:40:29.825 --> 00:40:32.065
<v Speaker 0>How do those interact with each other? How

00:40:32.065 --> 00:40:35.585
<v Speaker 0>are they modifying the request? Is there

00:40:35.200 --> 00:40:36.960
<v Speaker 0>ordering? Is there priorities?

00:40:37.760 --> 00:40:39.200
<v Speaker 0>How how does that work?

00:40:40.320 --> 00:40:42.320
<v Speaker 1>That's a really good question. The

00:40:43.280 --> 00:40:45.280
<v Speaker 1>ordering of admission controllers

00:40:45.520 --> 00:40:47.040
<v Speaker 1>is well defined

00:40:47.120 --> 00:40:50.255
<v Speaker 1>like for within Kubernetes itself. I'm not quite

00:40:50.255 --> 00:40:51.535
<v Speaker 1>sure how

00:40:52.335 --> 00:40:55.535
<v Speaker 1>ordering works if you have multiple mutation controllers

00:40:55.935 --> 00:40:58.975
<v Speaker 1>and if there is any preferred ordering.

00:41:01.215 --> 00:41:03.215
<v Speaker 1>So I may need to look that one

00:41:03.215 --> 00:41:04.575
<v Speaker 1>up. I'm not sure, actually.

00:41:05.890 --> 00:41:07.410
<v Speaker 0>If I'm

00:41:07.410 --> 00:41:09.090
<v Speaker 0>gonna keep throwing hard questions at you. We

00:41:09.090 --> 00:41:10.770
<v Speaker 0>could look this stuff up. It's

00:41:11.090 --> 00:41:12.530
<v Speaker 0>I think that's pretty normal.

00:41:12.850 --> 00:41:14.610
<v Speaker 0>If I mutate

00:41:15.090 --> 00:41:16.210
<v Speaker 0>the object

00:41:16.210 --> 00:41:18.290
<v Speaker 0>does it rerun all the others because the

00:41:18.290 --> 00:41:20.505
<v Speaker 0>state has changed or does it continue from

00:41:20.505 --> 00:41:21.945
<v Speaker 0>where that happened?

00:41:22.345 --> 00:41:23.225
<v Speaker 0>Do you know that?

00:41:23.545 --> 00:41:25.545
<v Speaker 1>I believe it continues from where it left

00:41:25.545 --> 00:41:26.905
<v Speaker 1>off in the life cycle.

00:41:27.464 --> 00:41:29.224
<v Speaker 1>So it just continue going as like one

00:41:29.224 --> 00:41:31.865
<v Speaker 1>big pipeline, like end to end. Like a

00:41:31.865 --> 00:41:35.010
<v Speaker 0>middleware layer of some Yeah, exactly. Yeah, like

00:41:35.010 --> 00:41:36.690
<v Speaker 1>a middleware layer of some kind, yeah.

00:41:37.330 --> 00:41:39.730
<v Speaker 1>So essentially you would want to order these

00:41:39.730 --> 00:41:41.170
<v Speaker 1>so that you have your,

00:41:41.330 --> 00:41:42.050
<v Speaker 1>the

00:41:42.370 --> 00:41:43.650
<v Speaker 1>thing that you want.

00:41:44.290 --> 00:41:46.610
<v Speaker 1>If you require any specific ordering and if

00:41:46.610 --> 00:41:47.650
<v Speaker 1>ordering is possible,

00:41:48.395 --> 00:41:49.835
<v Speaker 1>that you have ordering

00:41:50.315 --> 00:41:52.315
<v Speaker 1>in the sense that if something in the

00:41:52.315 --> 00:41:54.875
<v Speaker 1>last in the order relies on something from

00:41:54.875 --> 00:41:56.795
<v Speaker 1>the first, then you specify in that way.

00:41:58.075 --> 00:41:59.995
<v Speaker 0>Alright. Well, I think the

00:42:01.195 --> 00:42:02.955
<v Speaker 0>end of that will come out as we

00:42:02.955 --> 00:42:05.590
<v Speaker 0>actually apply to our cluster. So we do

00:42:05.590 --> 00:42:07.430
<v Speaker 0>have a go binary right now

00:42:08.870 --> 00:42:10.790
<v Speaker 0>which I expect to fail because of those

00:42:10.790 --> 00:42:11.590
<v Speaker 0>serps.

00:42:13.510 --> 00:42:17.525
<v Speaker 1>That's right. Okay. Well, did nothing.

00:42:20.565 --> 00:42:22.005
<v Speaker 0>Alright. We'll fix that in a minute.

00:42:24.005 --> 00:42:26.325
<v Speaker 0>Now we want to provision certificates,

00:42:26.325 --> 00:42:28.005
<v Speaker 0>build an image, deploy it to Kubernetes.

00:42:29.430 --> 00:42:30.470
<v Speaker 1>Yeah. That's right.

00:42:31.349 --> 00:42:32.070
<v Speaker 1>So

00:42:32.150 --> 00:42:34.310
<v Speaker 1>what we want to do is essentially

00:42:35.270 --> 00:42:37.910
<v Speaker 1>give Kubernetes everything it needs to get this

00:42:37.910 --> 00:42:39.030
<v Speaker 1>up and running.

00:42:40.230 --> 00:42:43.750
<v Speaker 1>So why don't we create a folder

00:42:43.750 --> 00:42:45.885
<v Speaker 1>with some manifests?

00:42:46.445 --> 00:42:47.645
<v Speaker 1>And then we can

00:42:49.405 --> 00:42:50.525
<v Speaker 1>start creating

00:42:53.005 --> 00:42:53.965
<v Speaker 1>an image

00:42:54.205 --> 00:42:56.685
<v Speaker 1>and getting that applied. Actually, we should probably

00:42:56.685 --> 00:42:57.965
<v Speaker 1>first create an image,

00:42:58.205 --> 00:42:59.085
<v Speaker 1>a Docker image.

00:43:00.060 --> 00:43:01.820
<v Speaker 1>So I imagine we're probably going to want

00:43:01.820 --> 00:43:02.460
<v Speaker 1>a Docker file.

00:43:19.285 --> 00:43:21.445
<v Speaker 0>So we set our working directory, we copy

00:43:21.445 --> 00:43:23.445
<v Speaker 0>everything to it, we run a go build

00:43:23.445 --> 00:43:26.120
<v Speaker 0>that should give us a binary and I'm

00:43:26.120 --> 00:43:28.360
<v Speaker 0>not gonna worry about adding like a smaller

00:43:28.360 --> 00:43:29.880
<v Speaker 0>image and stuff like that. We happy just

00:43:29.880 --> 00:43:31.240
<v Speaker 0>to deploy this one as is.

00:43:31.560 --> 00:43:34.040
<v Speaker 1>Yeah. Absolutely. So Kubernetes,

00:43:34.840 --> 00:43:35.960
<v Speaker 0>semantic

00:43:36.520 --> 00:43:37.160
<v Speaker 0>version.

00:43:38.925 --> 00:43:41.645
<v Speaker 0>Terrible name but we'll go with it. Yeah.

00:43:41.645 --> 00:43:43.405
<v Speaker 1>Let's go with that. So we should be

00:43:43.405 --> 00:43:44.845
<v Speaker 0>able to do an image belt.

00:43:46.045 --> 00:43:47.965
<v Speaker 0>Let's call this Rawkode.

00:43:49.005 --> 00:43:50.765
<v Speaker 0>We're not using semantic.

00:43:51.085 --> 00:43:54.445
<v Speaker 0>I'm just gonna take all the credit and

00:43:52.680 --> 00:43:53.480
<v Speaker 0>you know,

00:43:54.200 --> 00:43:55.720
<v Speaker 0>image sync. Absolutely.

00:43:56.680 --> 00:43:58.120
<v Speaker 0>We built this

00:43:58.599 --> 00:44:00.440
<v Speaker 0>and what did I get wrong?

00:44:02.119 --> 00:44:03.880
<v Speaker 0>Oh, it my get the Go image wrong?

00:44:06.125 --> 00:44:08.285
<v Speaker 1>That seem like a. It's

00:44:08.285 --> 00:44:10.045
<v Speaker 0>go Lang. Is it go Lang, yeah.

00:44:10.525 --> 00:44:12.444
<v Speaker 0>And we'll just do Alpine. Keep it as

00:44:12.444 --> 00:44:13.565
<v Speaker 0>small as we can.

00:44:13.964 --> 00:44:16.204
<v Speaker 0>There we go. That build should be pretty

00:44:16.204 --> 00:44:19.040
<v Speaker 0>quick. Pulling down our objects. Alright, let's tackle

00:44:19.040 --> 00:44:20.560
<v Speaker 0>a question about that build.

00:44:22.960 --> 00:44:25.120
<v Speaker 0>So okay, mods gave us a comment and

00:44:25.120 --> 00:44:27.440
<v Speaker 0>then a question. So why is auto complete

00:44:27.440 --> 00:44:29.120
<v Speaker 0>and not working? Have I got it disabled

00:44:29.120 --> 00:44:30.720
<v Speaker 0>and what Versus code theme am I using?

00:44:31.785 --> 00:44:33.865
<v Speaker 0>Autocomplete was not working because it was dead

00:44:33.865 --> 00:44:35.625
<v Speaker 0>load and dependencies in the background and then

00:44:35.625 --> 00:44:37.465
<v Speaker 0>it was failing to run some sort of

00:44:38.425 --> 00:44:40.025
<v Speaker 0>compile step or something. It seems to be

00:44:40.025 --> 00:44:42.505
<v Speaker 0>working now, so hopefully we're okay. I think

00:44:42.505 --> 00:44:44.185
<v Speaker 0>this is the plastic steam.

00:44:44.665 --> 00:44:46.505
<v Speaker 0>People always ask for teams, people love that

00:44:46.505 --> 00:44:48.560
<v Speaker 0>panda syntax. There we go. This is panda

00:44:48.560 --> 00:44:49.360
<v Speaker 0>syntax.

00:44:50.480 --> 00:44:52.560
<v Speaker 0>And then was had a question does a

00:44:52.560 --> 00:44:53.440
<v Speaker 0>certificate

00:44:53.440 --> 00:44:54.080
<v Speaker 0>or

00:44:54.640 --> 00:44:57.120
<v Speaker 0>should this certificate signed by the Kubernetes CA

00:44:57.120 --> 00:44:58.880
<v Speaker 0>or self same work fine?

00:44:59.360 --> 00:45:01.360
<v Speaker 1>Yeah. So we're gonna have to issue a

00:45:01.360 --> 00:45:04.155
<v Speaker 1>certificate that's signed by the Kubernetes CA. You

00:45:04.155 --> 00:45:05.995
<v Speaker 1>can provide a CA bundle,

00:45:06.315 --> 00:45:07.835
<v Speaker 1>but that will also need to be

00:45:08.155 --> 00:45:10.955
<v Speaker 1>that will be validated by Kubernetes itself. So

00:45:10.955 --> 00:45:12.715
<v Speaker 1>to avoid a little bit of faff, we

00:45:12.715 --> 00:45:14.875
<v Speaker 1>can I think it's best if we use

00:45:14.875 --> 00:45:17.450
<v Speaker 1>the Kubernetes CA, because that's already going be

00:45:17.450 --> 00:45:18.890
<v Speaker 1>automatically trusted

00:45:18.890 --> 00:45:20.410
<v Speaker 1>by Kubernetes itself?

00:45:22.089 --> 00:45:24.569
<v Speaker 0>Alright. So question time then for me this

00:45:24.569 --> 00:45:25.050
<v Speaker 0>time.

00:45:25.529 --> 00:45:28.410
<v Speaker 0>We're gonna write Kubernetes manifest to deploy this.

00:45:28.890 --> 00:45:31.535
<v Speaker 0>Yep. As the standard way for admission controllers

00:45:31.535 --> 00:45:33.535
<v Speaker 0>to have a deployment with replicas one, do

00:45:33.535 --> 00:45:35.455
<v Speaker 0>people use a straight up pod

00:45:35.855 --> 00:45:38.415
<v Speaker 0>or staple sets? Like, is the the facto

00:45:38.415 --> 00:45:38.895
<v Speaker 0>here?

00:45:39.615 --> 00:45:40.495
<v Speaker 1>Yeah. So

00:45:40.815 --> 00:45:42.255
<v Speaker 1>we'll create a deployment

00:45:42.575 --> 00:45:44.175
<v Speaker 1>and we're we you can have as many

00:45:44.175 --> 00:45:45.480
<v Speaker 1>replicas as you want.

00:45:46.280 --> 00:45:48.440
<v Speaker 1>So we could start with a replicas one.

00:45:48.440 --> 00:45:50.600
<v Speaker 1>But imagine if you want this to work

00:45:50.600 --> 00:45:53.560
<v Speaker 1>on a highly available manner, especially if it's

00:45:53.560 --> 00:45:54.440
<v Speaker 1>stateless

00:45:55.400 --> 00:45:57.160
<v Speaker 1>and idempotent,

00:45:57.320 --> 00:45:58.920
<v Speaker 1>then

00:45:58.245 --> 00:46:00.565
<v Speaker 1>essentially if one request fails, for example, because

00:46:00.565 --> 00:46:01.845
<v Speaker 1>the pod had died,

00:46:02.165 --> 00:46:03.045
<v Speaker 1>the mutation

00:46:03.365 --> 00:46:04.325
<v Speaker 1>hook itself,

00:46:04.885 --> 00:46:07.445
<v Speaker 1>then it would just reroute to another pod.

00:46:08.165 --> 00:46:10.485
<v Speaker 1>So yeah, just a standard Kubernetes deployment. And

00:46:10.485 --> 00:46:12.645
<v Speaker 1>we'll also have a Kubernetes service as well,

00:46:13.770 --> 00:46:15.690
<v Speaker 1>which is going to be fronting our

00:46:15.850 --> 00:46:16.650
<v Speaker 1>webhook.

00:46:20.410 --> 00:46:22.570
<v Speaker 1>And then gets the interesting bit, because we're

00:46:22.570 --> 00:46:23.690
<v Speaker 1>going to write a

00:46:23.930 --> 00:46:25.370
<v Speaker 1>mutating webhook

00:46:26.090 --> 00:46:26.570
<v Speaker 1>configuration.

00:46:29.585 --> 00:46:31.025
<v Speaker 0>Alright. Did that look okay?

00:46:32.145 --> 00:46:33.425
<v Speaker 1>Yeah. I think so.

00:46:33.984 --> 00:46:34.625
<v Speaker 1>Yeah.

00:46:35.184 --> 00:46:37.905
<v Speaker 0>Alright. Let's see if we can apply our

00:46:37.905 --> 00:46:39.664
<v Speaker 0>alt Kubernetes directory.

00:46:47.150 --> 00:46:47.790
<v Speaker 1>Lovely.

00:46:50.910 --> 00:46:53.230
<v Speaker 0>What did I build it wrong?

00:46:55.869 --> 00:46:57.825
<v Speaker 0>Yeah. I spelled it differently.

00:47:03.984 --> 00:47:04.625
<v Speaker 0>No.

00:47:07.744 --> 00:47:08.945
<v Speaker 0>Kubernetes context?

00:47:10.200 --> 00:47:11.480
<v Speaker 0>There

00:47:12.200 --> 00:47:12.920
<v Speaker 0>we go.

00:47:13.320 --> 00:47:14.360
<v Speaker 0>Let's reapply.

00:47:16.840 --> 00:47:17.800
<v Speaker 0>No

00:47:18.359 --> 00:47:20.680
<v Speaker 0>container. Okay. So we have an error but

00:47:20.680 --> 00:47:21.960
<v Speaker 0>we did deploy

00:47:22.119 --> 00:47:22.760
<v Speaker 0>successfully.

00:47:24.145 --> 00:47:26.065
<v Speaker 0>I think that's just because when we run

00:47:26.065 --> 00:47:26.705
<v Speaker 0>our

00:47:27.265 --> 00:47:28.225
<v Speaker 0>binary,

00:47:29.905 --> 00:47:30.945
<v Speaker 0>nothing happens.

00:47:31.745 --> 00:47:33.265
<v Speaker 0>And if we pull the logs,

00:47:33.425 --> 00:47:35.985
<v Speaker 0>it's just unable to open our certificates.

00:47:36.465 --> 00:47:36.945
<v Speaker 1>Yeah.

00:47:37.290 --> 00:47:38.090
<v Speaker 1>I'm

00:47:38.090 --> 00:47:40.010
<v Speaker 1>not quite sure why why it's not

00:47:41.050 --> 00:47:43.450
<v Speaker 1>why it's not running properly on your machine.

00:47:43.450 --> 00:47:45.290
<v Speaker 1>I don't know if it's actually erroring out.

00:47:45.530 --> 00:47:46.650
<v Speaker 1>But that's the the

00:47:46.970 --> 00:47:48.730
<v Speaker 1>the line there is what I expect.

00:47:49.450 --> 00:47:49.930
<v Speaker 1>Oh, wait.

00:47:50.615 --> 00:47:52.775
<v Speaker 0>Yeah. It runs successfully locally.

00:47:53.734 --> 00:47:54.455
<v Speaker 1>Interesting.

00:47:54.694 --> 00:47:55.974
<v Speaker 1>Could you try running it again? I'm just

00:47:55.974 --> 00:47:57.095
<v Speaker 1>gonna go build

00:47:58.135 --> 00:48:00.775
<v Speaker 1>on the local machine. Oh. There we are.

00:48:00.775 --> 00:48:02.694
<v Speaker 1>That's I don't think we had the latest

00:48:02.694 --> 00:48:03.494
<v Speaker 1>binary

00:48:03.734 --> 00:48:05.415
<v Speaker 1>built on the local site.

00:48:07.790 --> 00:48:08.430
<v Speaker 1>Classic.

00:48:08.990 --> 00:48:10.590
<v Speaker 1>Cool. So we are going to have to

00:48:10.590 --> 00:48:11.470
<v Speaker 1>inject

00:48:11.470 --> 00:48:12.430
<v Speaker 1>in these

00:48:12.590 --> 00:48:13.470
<v Speaker 1>certs.

00:48:13.790 --> 00:48:15.710
<v Speaker 1>And in order to generate them from the

00:48:15.710 --> 00:48:17.070
<v Speaker 1>first place, we going to use a tool

00:48:17.070 --> 00:48:18.510
<v Speaker 1>called

00:48:17.955 --> 00:48:19.075
<v Speaker 1>CFSSL.

00:48:19.955 --> 00:48:22.195
<v Speaker 1>So this is a set of tools that

00:48:22.195 --> 00:48:23.555
<v Speaker 1>Cloudflare have provided,

00:48:24.515 --> 00:48:26.275
<v Speaker 1>where it allows you to specify

00:48:26.835 --> 00:48:27.395
<v Speaker 1>a certificate

00:48:27.795 --> 00:48:29.955
<v Speaker 1>configuration in JSON format.

00:48:30.515 --> 00:48:30.995
<v Speaker 1>And

00:48:31.635 --> 00:48:34.170
<v Speaker 1>sidesteps the need for open SSL.

00:48:34.810 --> 00:48:36.650
<v Speaker 1>I can never ever remember the syntax for

00:48:36.650 --> 00:48:39.050
<v Speaker 1>open SSL. I always have to Google it.

00:48:39.290 --> 00:48:40.970
<v Speaker 1>It's really obscure.

00:48:41.290 --> 00:48:42.970
<v Speaker 1>Whereas with CFSL, at least you can reason

00:48:42.970 --> 00:48:44.250
<v Speaker 1>about what you've generated.

00:48:46.105 --> 00:48:48.345
<v Speaker 1>So let's go and create that. So we're

00:48:48.345 --> 00:48:50.665
<v Speaker 1>gonna generate a certificate signing request.

00:48:52.185 --> 00:48:52.905
<v Speaker 1>So

00:48:53.065 --> 00:48:56.105
<v Speaker 1>maybe if I create a new directory

00:48:58.345 --> 00:48:58.905
<v Speaker 1>in here,

00:49:00.450 --> 00:49:02.050
<v Speaker 1>Do you have a CFSSL

00:49:02.050 --> 00:49:04.050
<v Speaker 1>installed and also CFSSL

00:49:04.050 --> 00:49:05.010
<v Speaker 1>JSON?

00:49:05.810 --> 00:49:08.850
<v Speaker 0>Suppose so Well, I I just installed CFSSL.

00:49:08.850 --> 00:49:11.490
<v Speaker 0>Do I need to install another package?

00:49:11.970 --> 00:49:14.610
<v Speaker 1>Yeah. You'll also need CFSSL

00:49:13.925 --> 00:49:14.885
<v Speaker 1>JSON.

00:49:15.125 --> 00:49:16.085
<v Speaker 1>No dash,

00:49:16.805 --> 00:49:17.525
<v Speaker 1>I think.

00:49:24.645 --> 00:49:26.005
<v Speaker 0>Let's try do that. Does it come by

00:49:26.005 --> 00:49:26.645
<v Speaker 1>default maybe?

00:49:29.220 --> 00:49:31.220
<v Speaker 0>I'm not sure. Let's find out. So we

00:49:31.220 --> 00:49:32.900
<v Speaker 0>wanna generate a CSR.

00:49:33.619 --> 00:49:34.740
<v Speaker 1>So if we do

00:49:34.980 --> 00:49:35.859
<v Speaker 1>CFSSL

00:49:35.859 --> 00:49:36.740
<v Speaker 1>JSON,

00:49:36.740 --> 00:49:37.859
<v Speaker 1>and what we're gonna do is we're gonna

00:49:37.859 --> 00:49:39.619
<v Speaker 1>specify the CSR in

00:49:41.865 --> 00:49:43.785
<v Speaker 1>JSON as in c f s s r

00:49:43.785 --> 00:49:45.225
<v Speaker 1>JSON as in one command.

00:49:45.865 --> 00:49:47.305
<v Speaker 0>Oh, one command.

00:49:47.865 --> 00:49:48.505
<v Speaker 0>Yep.

00:49:50.185 --> 00:49:51.625
<v Speaker 1>It probably might

00:49:52.025 --> 00:49:52.825
<v Speaker 1>come by default.

00:49:53.400 --> 00:49:55.240
<v Speaker 0>Oh, it does. There we go. I don't

00:49:55.240 --> 00:49:57.319
<v Speaker 0>know if my because I've not reloaded my

00:49:57.319 --> 00:49:58.920
<v Speaker 0>shells, I'm not getting auto complete on the

00:49:58.920 --> 00:50:00.840
<v Speaker 0>commands, but it is there. Okay.

00:50:01.559 --> 00:50:02.280
<v Speaker 1>Cool.

00:50:03.160 --> 00:50:05.160
<v Speaker 1>So if we go back to the editor,

00:50:06.279 --> 00:50:07.880
<v Speaker 1>I'll show you what the CSR

00:50:08.279 --> 00:50:09.175
<v Speaker 1>looks like.

00:50:09.895 --> 00:50:11.015
<v Speaker 1>So essentially

00:50:11.575 --> 00:50:12.535
<v Speaker 1>and I am

00:50:12.775 --> 00:50:14.615
<v Speaker 1>copying and pasting a little here.

00:50:16.295 --> 00:50:17.255
<v Speaker 1>Essentially,

00:50:17.414 --> 00:50:19.494
<v Speaker 1>what we're going to do What should I

00:50:19.494 --> 00:50:20.375
<v Speaker 0>be looking at here? Sorry.

00:50:21.170 --> 00:50:22.130
<v Speaker 1>I've

00:50:22.130 --> 00:50:23.730
<v Speaker 1>created a new directory with And

00:50:25.250 --> 00:50:27.650
<v Speaker 1>then there's a file called CSR. Json.

00:50:28.930 --> 00:50:31.570
<v Speaker 1>So what we have here is the

00:50:32.450 --> 00:50:34.205
<v Speaker 1>declaration of the CSR that we're going to

00:50:34.205 --> 00:50:36.525
<v Speaker 1>create. So what did we call the Kubernetes

00:50:36.525 --> 00:50:39.885
<v Speaker 1>service? Was it semantic? Semantic, yeah. Yeah. Okay,

00:50:39.885 --> 00:50:40.365
<v Speaker 1>cool.

00:50:41.085 --> 00:50:41.965
<v Speaker 1>Semantic.

00:50:42.685 --> 00:50:44.445
<v Speaker 1>And essentially, we allow

00:50:44.765 --> 00:50:45.565
<v Speaker 1>listing

00:50:46.125 --> 00:50:47.805
<v Speaker 1>those particular hosts

00:50:48.119 --> 00:50:51.000
<v Speaker 1>as part of the certificate signing request.

00:50:51.799 --> 00:50:53.640
<v Speaker 1>That's going to be the common name.

00:50:55.799 --> 00:50:57.319
<v Speaker 1>And yeah, I think we have everything we

00:50:57.319 --> 00:51:00.040
<v Speaker 1>need to start generating the actual

00:51:00.519 --> 00:51:01.985
<v Speaker 1>certs themselves.

00:51:02.945 --> 00:51:04.865
<v Speaker 1>So what we're gonna do now is if

00:51:04.865 --> 00:51:06.305
<v Speaker 1>we do

00:51:09.825 --> 00:51:11.025
<v Speaker 1>SSL

00:51:11.425 --> 00:51:11.905
<v Speaker 1>JSON.

00:51:16.420 --> 00:51:19.860
<v Speaker 1>So if you cat your CSR

00:51:19.860 --> 00:51:20.820
<v Speaker 1>dot JSON

00:51:24.580 --> 00:51:26.900
<v Speaker 1>yep. And then pipe that into

00:51:27.140 --> 00:51:28.260
<v Speaker 1>oh, is that saved properly?

00:51:29.005 --> 00:51:31.165
<v Speaker 0>Hopefully I've just saved it. There we are.

00:51:31.325 --> 00:51:33.085
<v Speaker 1>Yeah. If you pipe that into

00:51:33.405 --> 00:51:34.525
<v Speaker 1>CFSSL

00:51:34.525 --> 00:51:35.805
<v Speaker 1>gen key,

00:51:36.365 --> 00:51:37.885
<v Speaker 1>because we're gonna have to generate a key

00:51:37.885 --> 00:51:38.525
<v Speaker 1>first.

00:51:39.165 --> 00:51:39.725
<v Speaker 1>And

00:51:40.605 --> 00:51:42.730
<v Speaker 1>you also need specify a dash. And then

00:51:42.730 --> 00:51:44.730
<v Speaker 1>we're gonna pipe that into CFSSL

00:51:44.730 --> 00:51:45.530
<v Speaker 1>JSON

00:51:46.010 --> 00:51:46.890
<v Speaker 1>dash

00:51:47.050 --> 00:51:47.930
<v Speaker 1>bare,

00:51:49.850 --> 00:51:51.850
<v Speaker 1>b a r e, bare.

00:51:52.570 --> 00:51:54.330
<v Speaker 1>And we're gonna generate a server key.

00:51:56.245 --> 00:51:58.805
<v Speaker 1>So if you what did we call the

00:51:59.445 --> 00:52:01.205
<v Speaker 1>you're gonna need one more argument, which is

00:52:01.205 --> 00:52:03.605
<v Speaker 1>the the name of the the output file.

00:52:03.845 --> 00:52:05.125
<v Speaker 1>And what did we call it? We called

00:52:05.125 --> 00:52:08.485
<v Speaker 1>it webhook. So if you call that webhook,

00:52:10.085 --> 00:52:12.460
<v Speaker 1>that's just webhook. It will generate the the

00:52:12.460 --> 00:52:15.260
<v Speaker 1>required prefixes because it can generate two files.

00:52:17.019 --> 00:52:17.740
<v Speaker 1>Cool.

00:52:18.380 --> 00:52:21.099
<v Speaker 1>So that's now generated two files, hopefully. I

00:52:21.099 --> 00:52:23.819
<v Speaker 0>did. Webhook. C s r webhook key dot

00:52:23.819 --> 00:52:24.220
<v Speaker 0>pem.

00:52:24.945 --> 00:52:26.225
<v Speaker 1>Yeah. Great.

00:52:26.785 --> 00:52:28.785
<v Speaker 1>So what we're gonna do is we're gonna

00:52:28.785 --> 00:52:29.905
<v Speaker 1>take the

00:52:31.505 --> 00:52:33.745
<v Speaker 1>certificate signing request, the CSR,

00:52:34.545 --> 00:52:36.705
<v Speaker 1>and we're gonna base 64 encode that, and

00:52:36.705 --> 00:52:38.065
<v Speaker 1>we're gonna create a

00:52:38.225 --> 00:52:40.225
<v Speaker 1>certificate signing request for Kubernetes.

00:52:43.250 --> 00:52:45.570
<v Speaker 0>Okay. So we want the CSR

00:52:45.970 --> 00:52:47.810
<v Speaker 0>Yep. Base 64.

00:52:50.690 --> 00:52:54.005
<v Speaker 0>So That's right. And if we we need

00:52:54.005 --> 00:52:56.725
<v Speaker 1>to create one more manifest which is the

00:52:57.285 --> 00:52:59.285
<v Speaker 1>certificate signing request

00:52:59.925 --> 00:53:02.485
<v Speaker 1>for Kubernetes itself. Yeah. I don't think I'm

00:53:02.485 --> 00:53:04.645
<v Speaker 0>gonna have a magic template for that.

00:53:06.405 --> 00:53:09.030
<v Speaker 0>So let's put that here and then let's

00:53:09.030 --> 00:53:11.430
<v Speaker 0>go find Kubernetes

00:53:11.510 --> 00:53:12.710
<v Speaker 0>CSR

00:53:12.870 --> 00:53:13.830
<v Speaker 0>YAML.

00:53:17.830 --> 00:53:20.310
<v Speaker 0>Let's

00:53:20.310 --> 00:53:21.510
<v Speaker 0>see if we got one here.

00:53:22.695 --> 00:53:24.135
<v Speaker 0>Some RBAC stuff.

00:53:26.055 --> 00:53:27.255
<v Speaker 0>And there we go.

00:53:32.215 --> 00:53:35.815
<v Speaker 0>So we want this base 64 included version.

00:53:36.215 --> 00:53:37.495
<v Speaker 1>As part of the request.

00:53:39.069 --> 00:53:40.270
<v Speaker 0>Do we need to modify

00:53:40.510 --> 00:53:42.190
<v Speaker 0>anything else within this?

00:53:42.670 --> 00:53:43.310
<v Speaker 1>Yes.

00:53:43.630 --> 00:53:46.430
<v Speaker 1>We're going to modify the metadata

00:53:46.750 --> 00:53:48.590
<v Speaker 1>to be the name of our

00:53:49.630 --> 00:53:50.349
<v Speaker 1>program,

00:53:50.865 --> 00:53:51.585
<v Speaker 1>semantic.

00:53:52.545 --> 00:53:54.465
<v Speaker 1>The name is going to be semantic.

00:53:54.465 --> 00:53:56.865
<v Speaker 1>We also want the signer to be the

00:53:56.865 --> 00:53:58.065
<v Speaker 1>kubelet itself,

00:53:59.665 --> 00:54:01.185
<v Speaker 1>the serving kubelet.

00:54:01.185 --> 00:54:06.740
<v Speaker 1>So that's going to be Kubernetes.io/kubelet-

00:54:06.740 --> 00:54:07.620
<v Speaker 1>serving.

00:54:09.620 --> 00:54:10.180
<v Speaker 1>Yeah.

00:54:10.580 --> 00:54:11.220
<v Speaker 1>And,

00:54:11.460 --> 00:54:13.780
<v Speaker 1>essentially, we want the mutating webhook to be

00:54:13.780 --> 00:54:16.260
<v Speaker 1>authenticated with the system itself because it's gonna

00:54:16.260 --> 00:54:17.780
<v Speaker 1>be interacting with Kubernetes

00:54:20.714 --> 00:54:22.475
<v Speaker 1>within the Kubernetes

00:54:23.674 --> 00:54:24.715
<v Speaker 1>certificate

00:54:26.075 --> 00:54:26.715
<v Speaker 1>framework.

00:54:26.954 --> 00:54:28.875
<v Speaker 1>Yeah. I think that looks good. So if

00:54:28.875 --> 00:54:29.915
<v Speaker 1>we apply that

00:54:32.875 --> 00:54:34.555
<v Speaker 0>we run get CSRs.

00:54:34.850 --> 00:54:36.610
<v Speaker 0>We have That's right. Yeah. So you have

00:54:36.610 --> 00:54:38.290
<v Speaker 1>a CSR that is pending.

00:54:38.690 --> 00:54:40.050
<v Speaker 1>And what we will need to do is

00:54:40.050 --> 00:54:40.930
<v Speaker 1>we can,

00:54:41.410 --> 00:54:42.850
<v Speaker 1>within kubectl,

00:54:42.850 --> 00:54:43.730
<v Speaker 1>approve it.

00:54:44.050 --> 00:54:45.170
<v Speaker 1>So if you do

00:54:46.530 --> 00:54:47.410
<v Speaker 1>kubectl

00:54:47.410 --> 00:54:49.010
<v Speaker 1>certificate

00:54:48.495 --> 00:54:49.695
<v Speaker 1>approve, I believe.

00:54:50.255 --> 00:54:51.375
<v Speaker 0>Certificate

00:54:51.375 --> 00:54:52.415
<v Speaker 0>approve.

00:54:53.215 --> 00:54:54.975
<v Speaker 0>Then the name of our certificate.

00:54:57.615 --> 00:54:59.135
<v Speaker 1>Amazing. Cool.

00:54:59.375 --> 00:55:02.095
<v Speaker 1>Now we'll need to extract out the

00:55:02.735 --> 00:55:05.180
<v Speaker 0>It says failed. The certificate.

00:55:05.420 --> 00:55:06.060
<v Speaker 1>Oh,

00:55:06.940 --> 00:55:08.060
<v Speaker 1>could you describe that?

00:55:22.765 --> 00:55:25.645
<v Speaker 0>Not particularly useful as far as debugging event

00:55:25.645 --> 00:55:26.285
<v Speaker 0>score.

00:55:26.445 --> 00:55:26.925
<v Speaker 1>No.

00:55:30.150 --> 00:55:31.110
<v Speaker 1>Interesting.

00:55:32.710 --> 00:55:34.470
<v Speaker 1>Yeah. There's nothing there.

00:55:38.390 --> 00:55:40.790
<v Speaker 1>I mean, the certificate does look valid to

00:55:40.790 --> 00:55:41.270
<v Speaker 1>me.

00:55:42.310 --> 00:55:44.175
<v Speaker 1>Oh, I think I wonder if we need

00:55:44.175 --> 00:55:46.735
<v Speaker 1>to add a few more usages because I

00:55:46.735 --> 00:55:49.055
<v Speaker 1>noticed that your your there's only one usage

00:55:49.055 --> 00:55:52.015
<v Speaker 1>there, which is client auth. Mhmm. I think

00:55:52.015 --> 00:55:53.055
<v Speaker 1>we need

00:55:54.815 --> 00:55:55.855
<v Speaker 1>KeyCypher

00:55:55.855 --> 00:55:59.240
<v Speaker 1>and digital signature as well. Okay. So just

00:55:59.240 --> 00:56:01.079
<v Speaker 0>delete the CSR and then we'll throw it

00:56:01.079 --> 00:56:03.320
<v Speaker 0>back. Yeah. If you delete the original CSR.

00:56:03.559 --> 00:56:05.000
<v Speaker 1>Let me see if I can add the

00:56:05.000 --> 00:56:06.520
<v Speaker 1>other two quick.

00:56:07.000 --> 00:56:07.560
<v Speaker 1>Just

00:56:07.800 --> 00:56:09.880
<v Speaker 1>make sure that's correct. So what I've done

00:56:09.880 --> 00:56:11.415
<v Speaker 1>is I've added the last two lines there

00:56:11.415 --> 00:56:12.535
<v Speaker 1>into the usages,

00:56:12.535 --> 00:56:15.655
<v Speaker 1>which is digital signature and key in Cypherment.

00:56:17.175 --> 00:56:18.695
<v Speaker 1>Now let's give that a shot.

00:56:21.575 --> 00:56:22.215
<v Speaker 0>Failed.

00:56:26.270 --> 00:56:29.390
<v Speaker 1>Let's see. What else do we have here?

00:56:32.990 --> 00:56:35.230
<v Speaker 1>Your request does look valid.

00:56:40.745 --> 00:56:43.625
<v Speaker 1>Let me just base 64 decode this.

00:56:44.025 --> 00:56:45.785
<v Speaker 0>Bay is a new lane or something.

00:56:55.230 --> 00:56:57.870
<v Speaker 1>Well, the certificate request looks valid to me.

00:56:59.870 --> 00:57:01.710
<v Speaker 0>Yep. Looks good.

00:57:02.990 --> 00:57:03.950
<v Speaker 1>Interesting.

00:57:06.110 --> 00:57:07.875
<v Speaker 1>This was gonna be a faff.

00:57:09.075 --> 00:57:10.035
<v Speaker 1>Yeah.

00:57:10.035 --> 00:57:12.515
<v Speaker 0>Oh, I'm nervous that Docker for Mac thing.

00:57:22.700 --> 00:57:24.700
<v Speaker 0>Maybe I shouldn't have skipped over this R

00:57:24.700 --> 00:57:25.740
<v Speaker 0>back stuff.

00:57:29.740 --> 00:57:31.500
<v Speaker 0>Well, no. Because I'm just root on this.

00:57:31.500 --> 00:57:32.380
<v Speaker 0>It doesn't

00:57:32.380 --> 00:57:33.099
<v Speaker 0>really matter.

00:57:34.865 --> 00:57:36.305
<v Speaker 0>Okay. Docker

00:57:36.305 --> 00:57:38.945
<v Speaker 0>for Mac CSR failed.

00:57:38.945 --> 00:57:40.305
<v Speaker 0>Let's see what Google tells me.

00:57:49.099 --> 00:57:50.779
<v Speaker 1>I think you do need to remove the

00:57:50.779 --> 00:57:51.579
<v Speaker 1>new line.

00:57:53.180 --> 00:57:55.099
<v Speaker 1>It might be a little bit picky.

00:57:56.059 --> 00:57:58.299
<v Speaker 1>I'm just looking at the Kubernetes documentation.

00:58:00.585 --> 00:58:03.225
<v Speaker 1>So when you base 64 encode it, if

00:58:03.225 --> 00:58:04.585
<v Speaker 1>you could pipe that into

00:58:04.745 --> 00:58:06.105
<v Speaker 1>t r dash d

00:58:06.905 --> 00:58:08.425
<v Speaker 1>and remove the new line.

00:58:09.145 --> 00:58:11.225
<v Speaker 0>Okay. So we want to cat the web

00:58:11.225 --> 00:58:13.440
<v Speaker 0>hook CSR but we want it to be

00:58:13.440 --> 00:58:15.680
<v Speaker 0>our dash d and then base encode.

00:58:16.640 --> 00:58:18.720
<v Speaker 1>I think we want to base so according

00:58:18.720 --> 00:58:20.480
<v Speaker 1>to this, it a base encodes first and

00:58:20.480 --> 00:58:20.960
<v Speaker 1>then

00:58:22.400 --> 00:58:24.080
<v Speaker 1>oh, actually then it's just removing the new

00:58:24.080 --> 00:58:26.720
<v Speaker 1>line. Yeah. From the b 64.

00:58:26.800 --> 00:58:28.685
<v Speaker 1>Okay. Maybe it's not that then.

00:58:29.485 --> 00:58:31.245
<v Speaker 0>I mean, let's see what does that do.

00:58:33.725 --> 00:58:35.725
<v Speaker 1>Well, you also need to specify delimiter.

00:58:35.725 --> 00:58:37.965
<v Speaker 1>So you want to specify

00:58:39.085 --> 00:58:41.485
<v Speaker 1>in quotation marks dash n. Yeah.

00:58:42.410 --> 00:58:44.410
<v Speaker 0>Oh, no. We don't want that. Yeah. Just

00:58:45.210 --> 00:58:46.730
<v Speaker 1>remove the new line.

00:58:48.010 --> 00:58:51.210
<v Speaker 0>There's a kill check from no base 64

00:58:51.850 --> 00:58:52.970
<v Speaker 0>dash w.

00:58:53.565 --> 00:58:55.724
<v Speaker 0>I'll look at that in a moment. I

00:58:55.724 --> 00:58:57.964
<v Speaker 0>think because I casted the CSR and base

00:58:57.964 --> 00:58:59.645
<v Speaker 0>encoded, I actually think that it should be

00:58:59.645 --> 00:59:00.365
<v Speaker 0>alright.

00:59:01.724 --> 00:59:03.244
<v Speaker 0>And normally if there was a new line

00:59:03.244 --> 00:59:06.444
<v Speaker 0>character and on the end you would see

00:59:05.580 --> 00:59:06.780
<v Speaker 0>a really familiar

00:59:07.340 --> 00:59:08.780
<v Speaker 0>like we'd see the two

00:59:09.580 --> 00:59:11.660
<v Speaker 0>equals with the padding and something.

00:59:12.700 --> 00:59:13.820
<v Speaker 1>Think that's Could you

00:59:14.140 --> 00:59:15.580
<v Speaker 1>possibly specify

00:59:15.660 --> 00:59:17.340
<v Speaker 1>in the metadata?

00:59:17.580 --> 00:59:19.194
<v Speaker 1>This is a long shot in the metadata,

00:59:19.194 --> 00:59:22.715
<v Speaker 1>specify a namespace. So if you do semantic

00:59:23.194 --> 00:59:25.035
<v Speaker 1>and what namespace are you in default?

00:59:30.155 --> 00:59:30.875
<v Speaker 1>I

00:59:31.035 --> 00:59:32.395
<v Speaker 1>think you need to specify that in the

00:59:32.395 --> 00:59:34.234
<v Speaker 1>name. So if it would just be semantic

00:59:34.230 --> 00:59:35.270
<v Speaker 1>dot default.

00:59:37.510 --> 00:59:39.270
<v Speaker 1>This is really much a long shot.

00:59:40.390 --> 00:59:42.150
<v Speaker 1>Let's give this a shot. We like long

00:59:42.150 --> 00:59:45.510
<v Speaker 0>shots. Alright. Let's delete CSR semantic because you

00:59:45.510 --> 00:59:46.390
<v Speaker 0>failed.

00:59:46.390 --> 00:59:47.270
<v Speaker 0>Let's reapply

00:59:48.845 --> 00:59:50.045
<v Speaker 0>all Kubernetes.

00:59:50.444 --> 00:59:52.125
<v Speaker 0>Let's get our CSR.

00:59:52.204 --> 00:59:53.805
<v Speaker 0>We can see it's pending.

00:59:54.285 --> 00:59:55.565
<v Speaker 0>Yep. Certificate

00:59:55.565 --> 00:59:57.565
<v Speaker 0>approved semantic.

01:00:00.125 --> 01:00:01.484
<v Speaker 1>Not default. Not default. Yeah.

01:00:04.330 --> 01:00:05.930
<v Speaker 0>And get CSR.

01:00:07.930 --> 01:00:08.970
<v Speaker 1>Oh no.

01:00:15.609 --> 01:00:17.535
<v Speaker 0>Alright. Let's see. What have we got in

01:00:17.535 --> 01:00:19.055
<v Speaker 0>our cube sys? I mean, there must be

01:00:19.055 --> 01:00:20.335
<v Speaker 0>logs on this. Right?

01:00:22.095 --> 01:00:24.015
<v Speaker 1>Yep. Likely. So

01:00:26.655 --> 01:00:28.815
<v Speaker 0>if we get the logs on the API

01:00:28.815 --> 01:00:29.375
<v Speaker 0>server.

01:00:31.930 --> 01:00:33.610
<v Speaker 0>No. I'm not sure what would be responsible

01:00:33.610 --> 01:00:34.330
<v Speaker 0>for this here.

01:00:45.255 --> 01:00:47.655
<v Speaker 0>Yeah. Don't think there's anything useful there.

01:00:48.935 --> 01:00:50.695
<v Speaker 0>Let's try controller manager.

01:00:59.300 --> 01:01:01.140
<v Speaker 0>Nothing useful here either.

01:01:05.380 --> 01:01:07.140
<v Speaker 1>Let me give this a shot on a

01:01:07.140 --> 01:01:07.860
<v Speaker 1>local.

01:01:11.315 --> 01:01:12.035
<v Speaker 1>Okay.

01:01:15.474 --> 01:01:17.395
<v Speaker 0>Let's try Kubernetes

01:01:17.395 --> 01:01:18.355
<v Speaker 0>admission

01:01:18.355 --> 01:01:19.315
<v Speaker 0>controllers

01:01:19.315 --> 01:01:20.835
<v Speaker 0>CSR.

01:01:21.154 --> 01:01:23.234
<v Speaker 0>I'll just Google random stuff just now. Let's

01:01:23.234 --> 01:01:23.850
<v Speaker 0>see what happens.

01:01:37.065 --> 01:01:39.225
<v Speaker 0>Oh, I think the signer is wrong.

01:01:39.385 --> 01:01:41.945
<v Speaker 0>Is it kubelet server client kubelet?

01:01:42.665 --> 01:01:44.825
<v Speaker 0>Or no, you said serving something. Right?

01:01:46.105 --> 01:01:47.625
<v Speaker 1>Yeah. Kubelet

01:01:47.625 --> 01:01:48.825
<v Speaker 1>dash serving.

01:01:50.230 --> 01:01:52.230
<v Speaker 0>Yeah. That does look okay.

01:02:01.110 --> 01:02:04.454
<v Speaker 1>Yeah. Do we have system modes? Organizations

01:02:04.454 --> 01:02:06.615
<v Speaker 1>are exactly system modes.

01:02:07.175 --> 01:02:09.415
<v Speaker 1>Common name starts with system

01:02:11.095 --> 01:02:11.655
<v Speaker 1>node.

01:02:11.974 --> 01:02:13.335
<v Speaker 1>Did we get that correct?

01:02:13.734 --> 01:02:16.055
<v Speaker 1>So our common name is

01:02:18.040 --> 01:02:20.040
<v Speaker 1>let's just make sure that our CSR is

01:02:20.040 --> 01:02:20.680
<v Speaker 1>correct.

01:02:22.920 --> 01:02:26.359
<v Speaker 1>Semantic.default.service.

01:02:26.359 --> 01:02:27.720
<v Speaker 1>Semantic Default

01:02:28.040 --> 01:02:30.280
<v Speaker 1>Service Cluster Local. That's fine.

01:02:31.425 --> 01:02:32.545
<v Speaker 1>System node

01:02:32.785 --> 01:02:34.545
<v Speaker 1>I wonder if that's different on Docker for

01:02:34.545 --> 01:02:35.185
<v Speaker 0>Mac.

01:02:36.625 --> 01:02:37.985
<v Speaker 1>Oh, possibly.

01:02:42.785 --> 01:02:44.785
<v Speaker 0>Ricky suggests we just restart my computer.

01:02:46.380 --> 01:02:47.580
<v Speaker 0>Maybe not today.

01:02:48.220 --> 01:02:49.900
<v Speaker 0>Yeah. I wonder if the docker for Mac

01:02:49.900 --> 01:02:50.780
<v Speaker 0>as

01:02:51.339 --> 01:02:53.420
<v Speaker 0>cluster DNS is different.

01:02:54.700 --> 01:02:55.580
<v Speaker 0>Let's

01:02:58.700 --> 01:02:59.820
<v Speaker 0>jump into

01:03:00.645 --> 01:03:02.965
<v Speaker 0>this doesn't work because it's

01:03:02.965 --> 01:03:04.005
<v Speaker 0>a funny

01:03:04.805 --> 01:03:06.325
<v Speaker 0>distro list or something.

01:03:06.725 --> 01:03:08.005
<v Speaker 0>Let's try.

01:03:10.085 --> 01:03:11.445
<v Speaker 0>Yeah. It's not gonna work.

01:03:12.805 --> 01:03:14.700
<v Speaker 0>How can I get the full

01:03:15.900 --> 01:03:17.180
<v Speaker 0>thing? Let's go.

01:03:18.300 --> 01:03:20.860
<v Speaker 0>Let's run something. I'm just gonna get a

01:03:20.860 --> 01:03:23.820
<v Speaker 0>debug container in here somewhere. So Yep. Like

01:03:23.820 --> 01:03:26.060
<v Speaker 1>a busy box or something. Yeah. Something I

01:03:26.060 --> 01:03:27.475
<v Speaker 0>can do a DNS lookup.

01:03:27.795 --> 01:03:29.075
<v Speaker 0>I'm not sure if there's a quick way

01:03:29.075 --> 01:03:30.275
<v Speaker 0>to get the actual

01:03:30.755 --> 01:03:34.115
<v Speaker 0>cluster DNS name. So and from Docker from

01:03:34.115 --> 01:03:34.915
<v Speaker 0>Mac at least.

01:03:36.275 --> 01:03:37.635
<v Speaker 0>Let's just run

01:03:37.714 --> 01:03:39.795
<v Speaker 0>a bit to

01:03:39.120 --> 01:03:39.760
<v Speaker 0>20.

01:03:40.320 --> 01:03:41.120
<v Speaker 0>Whatever

01:03:41.120 --> 01:03:42.960
<v Speaker 0>Ubuntu gives me by default.

01:03:44.400 --> 01:03:46.000
<v Speaker 0>And then my old favorite

01:03:46.240 --> 01:03:47.040
<v Speaker 0>sleep

01:03:48.160 --> 01:03:49.280
<v Speaker 0>args

01:03:50.080 --> 01:03:51.120
<v Speaker 0>infinity.

01:03:51.360 --> 01:03:51.920
<v Speaker 0>Alright.

01:03:56.365 --> 01:03:57.485
<v Speaker 0>Get pods.

01:04:00.605 --> 01:04:02.925
<v Speaker 0>Should've maybe have picked a smaller container image.

01:04:05.130 --> 01:04:07.050
<v Speaker 0>There we go. It's running. So

01:04:07.369 --> 01:04:09.210
<v Speaker 0>let's get inside of this.

01:04:11.049 --> 01:04:12.250
<v Speaker 0>Run bash.

01:04:13.130 --> 01:04:13.930
<v Speaker 0>Curl?

01:04:14.089 --> 01:04:15.130
<v Speaker 0>W get?

01:04:15.450 --> 01:04:16.890
<v Speaker 0>Tech? Alright.

01:04:18.250 --> 01:04:19.369
<v Speaker 0>Install

01:04:19.369 --> 01:04:20.835
<v Speaker 0>Baint tools.

01:04:20.835 --> 01:04:22.195
<v Speaker 0>I can never remember the name of the

01:04:22.195 --> 01:04:25.475
<v Speaker 0>Bain package. Bain tools, DNS utils, DNS tools

01:04:25.475 --> 01:04:26.755
<v Speaker 0>is one of them though.

01:04:27.955 --> 01:04:28.675
<v Speaker 0>Yeah.

01:04:28.755 --> 01:04:29.395
<v Speaker 0>I

01:04:31.155 --> 01:04:32.515
<v Speaker 0>guess I can just do curl. It's not

01:04:32.515 --> 01:04:33.715
<v Speaker 0>really that important.

01:04:38.730 --> 01:04:40.810
<v Speaker 0>So we wanna confirm So what's your current

01:04:40.810 --> 01:04:42.170
<v Speaker 1>theory at the moment?

01:04:42.490 --> 01:04:43.690
<v Speaker 0>That Kubernetes

01:04:43.690 --> 01:04:44.730
<v Speaker 0>dot default

01:04:44.730 --> 01:04:46.810
<v Speaker 0>dot cluster dot local won't work.

01:04:48.645 --> 01:04:49.685
<v Speaker 0>Default

01:04:49.685 --> 01:04:51.605
<v Speaker 0>dot s p c dot cluster

01:04:51.685 --> 01:04:52.645
<v Speaker 0>local.

01:04:57.125 --> 01:04:58.805
<v Speaker 0>If that was DNS, it would probably fail

01:04:58.805 --> 01:05:00.725
<v Speaker 0>for another reason. Right? No.

01:05:04.880 --> 01:05:05.680
<v Speaker 0>NS

01:05:06.080 --> 01:05:07.040
<v Speaker 0>tools.

01:05:10.000 --> 01:05:10.640
<v Speaker 0>Details.

01:05:13.840 --> 01:05:14.960
<v Speaker 0>Vague details.

01:05:17.675 --> 01:05:18.875
<v Speaker 0>Oh of course.

01:05:22.155 --> 01:05:23.435
<v Speaker 1>By nine. Yep.

01:05:24.235 --> 01:05:25.915
<v Speaker 0>Okay. Maybe on.

01:05:26.155 --> 01:05:26.635
<v Speaker 0>It should I

01:05:28.155 --> 01:05:30.235
<v Speaker 0>wish that package name was just consistent across

01:05:30.235 --> 01:05:32.320
<v Speaker 0>every distro but I seem to fight with

01:05:32.320 --> 01:05:33.840
<v Speaker 0>it every single time.

01:05:34.000 --> 01:05:34.720
<v Speaker 0>Eight

01:05:38.080 --> 01:05:39.120
<v Speaker 0>twenty seven,

01:05:39.200 --> 01:05:40.800
<v Speaker 0>that's annoying but

01:05:41.359 --> 01:05:43.840
<v Speaker 0>alright. Dig Kubernetes.

01:05:44.320 --> 01:05:44.960
<v Speaker 0>Default.

01:05:45.200 --> 01:05:45.839
<v Speaker 0>Svc.

01:05:48.185 --> 01:05:48.825
<v Speaker 0>Really?

01:05:51.705 --> 01:05:53.225
<v Speaker 0>Ubuntu take

01:05:53.225 --> 01:05:54.505
<v Speaker 0>command package.

01:05:55.225 --> 01:05:56.665
<v Speaker 0>I wish I could say that's the first

01:05:56.665 --> 01:05:57.545
<v Speaker 0>time I've googled that.

01:06:03.170 --> 01:06:05.810
<v Speaker 0>Banger Tails. Did I not try Banger Tails?

01:06:06.049 --> 01:06:07.569
<v Speaker 0>Did I try everything

01:06:07.569 --> 01:06:08.450
<v Speaker 1>but it?

01:06:11.089 --> 01:06:12.849
<v Speaker 0>And it doesn't stall that. Do I have

01:06:12.849 --> 01:06:13.730
<v Speaker 0>NS lookup?

01:06:15.474 --> 01:06:16.195
<v Speaker 0>Big.

01:06:17.234 --> 01:06:18.915
<v Speaker 0>I can't believe this is what I'm now

01:06:18.915 --> 01:06:19.795
<v Speaker 0>feeling on.

01:06:20.275 --> 01:06:22.995
<v Speaker 0>DNS utils. DNS utils.

01:06:25.955 --> 01:06:27.730
<v Speaker 0>Seven has asked if I'm on an m

01:06:27.730 --> 01:06:30.050
<v Speaker 0>one. I'm not on an m one.

01:06:31.250 --> 01:06:32.370
<v Speaker 0>Unfortunately not.

01:06:33.570 --> 01:06:35.650
<v Speaker 0>Yeah. So that's I think seven's confirming my

01:06:35.650 --> 01:06:37.970
<v Speaker 0>hypothesis is that the cluster DNS is actually

01:06:37.970 --> 01:06:40.795
<v Speaker 0>different. They're suggesting doc or dot internal. So

01:06:40.795 --> 01:06:43.435
<v Speaker 0>I just want to confirm that. So Kubernetes

01:06:44.155 --> 01:06:45.835
<v Speaker 0>default SVT.

01:06:46.875 --> 01:06:47.915
<v Speaker 0>Dot cluster.

01:06:48.155 --> 01:06:48.715
<v Speaker 0>That

01:06:49.915 --> 01:06:51.835
<v Speaker 0>does the result actually.

01:06:52.475 --> 01:06:52.795
<v Speaker 1>Interesting.

01:06:57.710 --> 01:06:58.910
<v Speaker 1>Could we have a quick look at the

01:06:59.230 --> 01:07:01.950
<v Speaker 1>could you describe the the CSR again?

01:07:07.635 --> 01:07:08.515
<v Speaker 1>Semantic

01:07:08.515 --> 01:07:09.235
<v Speaker 1>dot

01:07:09.875 --> 01:07:11.155
<v Speaker 1>default. Right?

01:07:13.075 --> 01:07:14.195
<v Speaker 1>The CSR

01:07:14.355 --> 01:07:16.995
<v Speaker 1>name should be semantic dot default.

01:07:17.795 --> 01:07:19.955
<v Speaker 0>Yeah. But that system node at the start,

01:07:19.955 --> 01:07:21.730
<v Speaker 0>what is that? Because that doesn't look like

01:07:21.730 --> 01:07:23.330
<v Speaker 0>a valid common name to me.

01:07:25.730 --> 01:07:26.690
<v Speaker 0>Is that wrong?

01:07:28.610 --> 01:07:29.010
<v Speaker 1>I

01:07:29.410 --> 01:07:31.730
<v Speaker 1>so according to the documentation, that is what

01:07:31.730 --> 01:07:32.610
<v Speaker 1>it should be.

01:07:33.250 --> 01:07:35.810
<v Speaker 1>The common name should start with system colon

01:07:35.810 --> 01:07:36.210
<v Speaker 1>node,

01:07:38.185 --> 01:07:40.105
<v Speaker 1>and then it should have a colon

01:07:40.345 --> 01:07:43.145
<v Speaker 1>with the name of your your full common

01:07:43.145 --> 01:07:43.785
<v Speaker 1>name.

01:07:44.905 --> 01:07:45.385
<v Speaker 0>So

01:07:45.785 --> 01:07:48.665
<v Speaker 0>name starts with system colon node colon.

01:07:48.905 --> 01:07:49.545
<v Speaker 1>Yep.

01:07:52.859 --> 01:07:55.660
<v Speaker 1>So the organization needs to be exactly system

01:07:55.820 --> 01:07:56.700
<v Speaker 1>nodes,

01:07:57.020 --> 01:07:57.980
<v Speaker 1>which we have.

01:08:04.540 --> 01:08:04.940
<v Speaker 1>Yeah.

01:08:25.120 --> 01:08:27.359
<v Speaker 0>I wish there was The certificate signing request

01:08:27.359 --> 01:08:28.640
<v Speaker 1>looks correct to me as well.

01:08:40.814 --> 01:08:43.455
<v Speaker 0>Yeah. So the cube controller manager does handle

01:08:43.455 --> 01:08:44.255
<v Speaker 0>this.

01:08:44.734 --> 01:08:46.495
<v Speaker 0>Let's try the logs again.

01:08:49.455 --> 01:08:51.854
<v Speaker 0>Logs cube controller manager.

01:08:59.300 --> 01:09:00.420
<v Speaker 0>Nothing there.

01:09:04.904 --> 01:09:05.624
<v Speaker 1>So

01:09:06.024 --> 01:09:09.224
<v Speaker 1>what I've done is I've generated a new

01:09:10.505 --> 01:09:12.744
<v Speaker 1>a new certificate signing request,

01:09:15.465 --> 01:09:17.784
<v Speaker 1>like a an absolute long shot.

01:09:19.990 --> 01:09:21.990
<v Speaker 0>Well, that's the face we got from Moz.

01:09:21.990 --> 01:09:24.149
<v Speaker 0>He says regenerate the CSR. So let's do

01:09:24.149 --> 01:09:24.870
<v Speaker 0>Exactly.

01:09:26.870 --> 01:09:29.510
<v Speaker 1>Now that's going to generate a new base

01:09:29.510 --> 01:09:30.550
<v Speaker 1>64

01:09:30.550 --> 01:09:31.350
<v Speaker 1>encoding.

01:09:35.685 --> 01:09:36.244
<v Speaker 1>Yeah.

01:09:36.645 --> 01:09:39.364
<v Speaker 1>And what we're gonna do there is

01:09:39.524 --> 01:09:42.404
<v Speaker 1>let's remove the original object from Kubernetes

01:09:43.685 --> 01:09:44.885
<v Speaker 1>and recreate it.

01:09:47.910 --> 01:09:51.349
<v Speaker 0>Okay. So delete. So it's our semantic.

01:09:51.590 --> 01:09:53.270
<v Speaker 0>It's gone. Yep. And default.

01:09:54.069 --> 01:09:56.310
<v Speaker 1>No. That that one failed with an error.

01:09:57.110 --> 01:09:58.870
<v Speaker 1>Yep. Can we just check to make sure

01:09:58.870 --> 01:09:59.925
<v Speaker 1>it's still not there?

01:10:02.165 --> 01:10:03.124
<v Speaker 1>Perfect.

01:10:04.324 --> 01:10:05.525
<v Speaker 0>Yep. All good.

01:10:06.885 --> 01:10:09.284
<v Speaker 0>So now we want to cat our

01:10:10.005 --> 01:10:10.885
<v Speaker 0>CSR.

01:10:10.885 --> 01:10:11.925
<v Speaker 1>Yeah. I've called it.

01:10:16.340 --> 01:10:17.140
<v Speaker 1>No.

01:10:17.140 --> 01:10:19.140
<v Speaker 1>I've already done that. So I've called it

01:10:19.140 --> 01:10:20.180
<v Speaker 1>server.CSR

01:10:20.180 --> 01:10:20.980
<v Speaker 1>this time.

01:10:21.940 --> 01:10:24.420
<v Speaker 1>Previously recorded webhook, but I called it server.

01:10:27.365 --> 01:10:30.325
<v Speaker 1>So, yeah, if you copy the base 64

01:10:30.885 --> 01:10:33.125
<v Speaker 0>What was that thing we got dash w

01:10:33.125 --> 01:10:33.845
<v Speaker 0>zero?

01:10:36.085 --> 01:10:37.685
<v Speaker 1>No. I think that command should be correct

01:10:37.685 --> 01:10:38.885
<v Speaker 1>with the t r.

01:10:39.285 --> 01:10:40.805
<v Speaker 1>That will remove the new line. And then

01:10:40.805 --> 01:10:43.290
<v Speaker 1>we can if you pipe that into p

01:10:43.290 --> 01:10:44.170
<v Speaker 1>b copy,

01:10:45.770 --> 01:10:47.610
<v Speaker 1>that will copy onto your clipboard.

01:10:51.770 --> 01:10:53.530
<v Speaker 0>Yeah. Okay. That's it. And

01:10:54.330 --> 01:10:56.635
<v Speaker 1>if we go to search.yaml

01:10:56.635 --> 01:10:59.675
<v Speaker 1>and put that into the the request.

01:11:07.035 --> 01:11:07.435
<v Speaker 0>K.

01:11:10.020 --> 01:11:11.940
<v Speaker 1>Has that been put in? Yeah. I don't

01:11:11.940 --> 01:11:14.099
<v Speaker 0>think it changed which means that it's probably

01:11:14.099 --> 01:11:14.899
<v Speaker 0>the same.

01:11:19.380 --> 01:11:21.139
<v Speaker 1>No. I don't I don't think it should

01:11:21.139 --> 01:11:23.405
<v Speaker 1>be. It would have generated with a new

01:11:23.405 --> 01:11:25.485
<v Speaker 1>key and a new algorithm. Right. Well, it's

01:11:25.485 --> 01:11:27.485
<v Speaker 0>maybe just something in the middle that's changed

01:11:28.045 --> 01:11:29.324
<v Speaker 0>and the end is

01:11:29.805 --> 01:11:32.205
<v Speaker 0>consistent. So let's try applying it.

01:11:32.765 --> 01:11:35.085
<v Speaker 1>So what I've done is I've just taken

01:11:35.085 --> 01:11:37.650
<v Speaker 1>the output from the terminal and copied and

01:11:37.650 --> 01:11:40.290
<v Speaker 1>pasted it myself, and it definitely changed.

01:11:40.930 --> 01:11:41.490
<v Speaker 1>Weird.

01:11:42.210 --> 01:11:43.010
<v Speaker 1>Interesting.

01:11:43.810 --> 01:11:45.330
<v Speaker 1>Let's try and apply the

01:11:45.890 --> 01:11:47.650
<v Speaker 1>I hope it will work.

01:11:50.770 --> 01:11:52.724
<v Speaker 1>Oh. 10 block type must be certificate request.

01:12:05.980 --> 01:12:07.659
<v Speaker 1>That's just come out there.

01:12:11.500 --> 01:12:13.659
<v Speaker 1>Into base 64.

01:12:14.540 --> 01:12:17.340
<v Speaker 1>Yeah. That's a certificate signing request. That is

01:12:17.340 --> 01:12:18.380
<v Speaker 1>a pen request.

01:12:19.705 --> 01:12:20.425
<v Speaker 1>Correct.

01:12:23.705 --> 01:12:26.025
<v Speaker 1>To do this kind of Oh, yeah. After

01:12:26.025 --> 01:12:26.825
<v Speaker 1>Kubernetes.

01:12:26.825 --> 01:12:27.145
<v Speaker 0>Yep.

01:12:32.020 --> 01:12:34.980
<v Speaker 1>The certificate spec

01:12:34.980 --> 01:12:36.100
<v Speaker 1>request

01:12:36.260 --> 01:12:37.940
<v Speaker 1>has invalid value.

01:12:39.700 --> 01:12:40.900
<v Speaker 1>That's really bizarre.

01:12:57.275 --> 01:12:57.915
<v Speaker 1>Maybe

01:12:59.835 --> 01:13:02.540
<v Speaker 1>you're right. Maybe it didn't change. Yeah. That

01:13:02.540 --> 01:13:05.340
<v Speaker 0>seems better. Cool. That's now created it.

01:13:06.140 --> 01:13:08.140
<v Speaker 1>I'm wondering whether we truncate in the new

01:13:08.140 --> 01:13:10.699
<v Speaker 1>line didn't work properly as as I'd expected.

01:13:12.220 --> 01:13:13.660
<v Speaker 1>Now let's try and approve it.

01:13:15.545 --> 01:13:16.744
<v Speaker 1>Alright. That's long shot.

01:13:19.945 --> 01:13:20.744
<v Speaker 0>Approved.

01:13:21.945 --> 01:13:22.744
<v Speaker 0>Oh,

01:13:23.625 --> 01:13:24.025
<v Speaker 0>no.

01:13:28.450 --> 01:13:30.290
<v Speaker 1>Okay. I don't know if this is a

01:13:30.290 --> 01:13:31.730
<v Speaker 1>Docker for desktop thing.

01:13:31.970 --> 01:13:33.970
<v Speaker 0>Let's let's let's change clusters. Right? I have

01:13:33.970 --> 01:13:35.650
<v Speaker 0>other clusters available. So

01:13:36.130 --> 01:13:37.730
<v Speaker 1>You have a mini cube cluster?

01:13:40.210 --> 01:13:41.730
<v Speaker 0>Yeah. We can create one pretty quick.

01:13:51.415 --> 01:13:54.295
<v Speaker 0>I also have a fully fledged nine nodes

01:13:54.455 --> 01:13:56.880
<v Speaker 0>cluster on Equinix metal that we can always

01:13:56.880 --> 01:13:58.159
<v Speaker 0>resort to have to do it.

01:13:58.719 --> 01:14:00.079
<v Speaker 1>Oh, that'd be great.

01:14:00.560 --> 01:14:03.440
<v Speaker 0>Maybe slightly overkill for building the mutation webhook

01:14:03.440 --> 01:14:05.280
<v Speaker 0>but would be fun regardless.

01:14:05.840 --> 01:14:07.840
<v Speaker 0>Let's see what many cube gives us in.

01:14:07.920 --> 01:14:10.295
<v Speaker 0>We'll just apply this entire certificate thing right

01:14:10.295 --> 01:14:11.574
<v Speaker 0>over the top approve it and I bet

01:14:11.574 --> 01:14:13.175
<v Speaker 0>you magically it's just gonna work and this

01:14:13.175 --> 01:14:14.374
<v Speaker 0>is some weird

01:14:14.614 --> 01:14:16.374
<v Speaker 0>Docker for Mac thing.

01:14:16.455 --> 01:14:18.215
<v Speaker 0>Yeah. I can't think what else it is.

01:14:20.775 --> 01:14:22.375
<v Speaker 0>What we have looks like what's in the

01:14:22.375 --> 01:14:25.199
<v Speaker 0>Kubernetes documentation so let's Exactly.

01:14:28.960 --> 01:14:31.040
<v Speaker 0>Okay. Come on, minikip.

01:14:31.600 --> 01:14:32.400
<v Speaker 0>While

01:14:36.400 --> 01:14:38.000
<v Speaker 1>you're getting that up and running, I'm gonna

01:14:37.665 --> 01:14:39.745
<v Speaker 1>try and see if I can get

01:14:42.465 --> 01:14:44.145
<v Speaker 0>Alright. So if I run get nodes, I

01:14:44.145 --> 01:14:45.985
<v Speaker 0>just wanna make sure we're on Medikube. We

01:14:45.985 --> 01:14:46.305
<v Speaker 0>are

01:14:46.785 --> 01:14:48.225
<v Speaker 0>let's apply.

01:14:49.265 --> 01:14:51.505
<v Speaker 0>I should be able to run get CSR.

01:14:57.150 --> 01:14:59.389
<v Speaker 1>Are you running the latest Kubernetes

01:15:00.349 --> 01:15:02.829
<v Speaker 1>on mini cube? It was running one eighteen

01:15:02.829 --> 01:15:04.590
<v Speaker 0>four. Do we need one twenty?

01:15:04.989 --> 01:15:06.670
<v Speaker 1>I think we'll need one twenty. Yeah.

01:15:11.094 --> 01:15:13.094
<v Speaker 0>Alright. Let's turn that down.

01:15:15.495 --> 01:15:16.695
<v Speaker 0>Start

01:15:16.855 --> 01:15:17.975
<v Speaker 0>Kubernetes

01:15:17.975 --> 01:15:18.934
<v Speaker 0>version.

01:15:23.895 --> 01:15:25.820
<v Speaker 0>Alright. I'll just take another moment.

01:15:26.300 --> 01:15:27.500
<v Speaker 0>The image isn't too big.

01:15:37.485 --> 01:15:39.724
<v Speaker 1>What version were you using on your Docker?

01:15:39.725 --> 01:15:41.804
<v Speaker 1>Was it one twenty as well? It was.

01:15:41.804 --> 01:15:42.364
<v Speaker 0>Yeah.

01:15:44.925 --> 01:15:46.364
<v Speaker 1>So according to

01:15:48.764 --> 01:15:50.940
<v Speaker 1>this random post I found on the Docker

01:15:50.940 --> 01:15:51.739
<v Speaker 1>forum,

01:15:52.860 --> 01:15:54.460
<v Speaker 1>always to be trusted. Right?

01:15:55.340 --> 01:15:57.420
<v Speaker 1>It seems it wants the signer to be

01:15:57.420 --> 01:15:59.980
<v Speaker 1>suffixed with docker dash desktop.

01:16:03.994 --> 01:16:05.755
<v Speaker 0>So as a weird Docker for Mac thing

01:16:05.755 --> 01:16:06.314
<v Speaker 0>then.

01:16:06.795 --> 01:16:07.834
<v Speaker 1>Yeah, possibly.

01:16:09.114 --> 01:16:10.715
<v Speaker 0>Alright. Well the only thing that changes now

01:16:10.715 --> 01:16:12.315
<v Speaker 0>anyway is we just have to rebuild the

01:16:12.315 --> 01:16:14.474
<v Speaker 0>image using the many cube context.

01:16:14.795 --> 01:16:17.675
<v Speaker 0>Other than that we should hopefully once this

01:16:17.675 --> 01:16:18.235
<v Speaker 0>spins up,

01:16:19.080 --> 01:16:21.159
<v Speaker 0>we're back on track. Fingers crossed.

01:16:21.560 --> 01:16:22.280
<v Speaker 0>Cool.

01:16:27.640 --> 01:16:29.560
<v Speaker 0>Almost foiled by certificates.

01:16:29.560 --> 01:16:31.000
<v Speaker 0>It's just the way it goes.

01:16:32.520 --> 01:16:34.120
<v Speaker 1>I did mention at the beginning that it

01:16:34.120 --> 01:16:35.454
<v Speaker 1>would be a bit of a fad.

01:16:36.495 --> 01:16:38.815
<v Speaker 1>So once we have these certificates, essentially

01:16:39.295 --> 01:16:41.614
<v Speaker 1>we'll have everything in place for Kubernetes to

01:16:41.614 --> 01:16:43.695
<v Speaker 1>interact with this webhook

01:16:45.135 --> 01:16:46.735
<v Speaker 1>and ready to intercept some requests.

01:16:48.400 --> 01:16:49.920
<v Speaker 0>Yeah. We've not even done the hard bit

01:16:49.920 --> 01:16:51.920
<v Speaker 0>yet. We've got a pars and resolve

01:16:52.160 --> 01:16:54.560
<v Speaker 0>that random semantic version thing I've thrown at

01:16:54.560 --> 01:16:55.040
<v Speaker 0>us.

01:16:56.160 --> 01:16:58.160
<v Speaker 0>It won't be that hard, I'm sure.

01:16:59.040 --> 01:17:01.705
<v Speaker 1>So there's a really great Go package that

01:17:01.705 --> 01:17:03.705
<v Speaker 1>I came across a couple of weeks back

01:17:03.705 --> 01:17:04.745
<v Speaker 1>called Semver,

01:17:05.465 --> 01:17:07.225
<v Speaker 1>which is really quite nice because you can

01:17:07.225 --> 01:17:08.905
<v Speaker 1>specify a semantic version

01:17:09.065 --> 01:17:10.265
<v Speaker 1>and specify,

01:17:10.505 --> 01:17:12.265
<v Speaker 1>like, grab a list of

01:17:12.745 --> 01:17:15.305
<v Speaker 1>other semantic versions and see if they match

01:17:15.310 --> 01:17:16.989
<v Speaker 1>and also sort them.

01:17:18.590 --> 01:17:20.510
<v Speaker 1>So essentially, you can say, oh, if you

01:17:20.510 --> 01:17:23.309
<v Speaker 1>have more than one dot 15,

01:17:23.469 --> 01:17:24.510
<v Speaker 1>and

01:17:25.710 --> 01:17:28.270
<v Speaker 1>then comma less than one dot 16, it'll

01:17:28.270 --> 01:17:30.705
<v Speaker 1>accept everything within that range but not 1.16

01:17:30.705 --> 01:17:31.505
<v Speaker 1>itself.

01:17:31.665 --> 01:17:33.425
<v Speaker 1>So everything above 1.15

01:17:33.665 --> 01:17:35.425
<v Speaker 1>but not 1.16 itself.

01:17:35.985 --> 01:17:37.425
<v Speaker 0>So it does all the hard work of

01:17:37.425 --> 01:17:38.705
<v Speaker 0>the stuff that we actually need to do.

01:17:38.705 --> 01:17:39.745
<v Speaker 1>Exactly, yeah.

01:17:39.905 --> 01:17:41.665
<v Speaker 1>It does all the hard work for us.

01:17:42.785 --> 01:17:43.105
<v Speaker 1>Yeah.

01:17:45.880 --> 01:17:47.080
<v Speaker 0>Oh, it failed.

01:17:50.520 --> 01:17:52.840
<v Speaker 1>Did that one fail as well? Yeah. I'm

01:17:52.840 --> 01:17:54.760
<v Speaker 0>gonna describe this other one that we have

01:17:54.760 --> 01:17:56.200
<v Speaker 0>in the mini cube cluster though.

01:18:00.975 --> 01:18:02.494
<v Speaker 0>What's different here?

01:18:06.175 --> 01:18:10.015
<v Speaker 1>The sign is different. Kube API server client

01:18:10.015 --> 01:18:10.574
<v Speaker 1>Kubler.

01:18:15.590 --> 01:18:17.590
<v Speaker 1>That's the only thing I can see that's

01:18:17.590 --> 01:18:18.230
<v Speaker 1>different.

01:18:24.470 --> 01:18:25.990
<v Speaker 1>Semantic dot default.

01:18:28.745 --> 01:18:30.745
<v Speaker 0>We added the dot default. I guess we

01:18:30.745 --> 01:18:32.425
<v Speaker 0>could always remove that. Right?

01:18:33.545 --> 01:18:35.545
<v Speaker 1>I think I know what the problem is.

01:18:35.864 --> 01:18:36.824
<v Speaker 1>In the usages,

01:18:38.360 --> 01:18:41.320
<v Speaker 1>the documentation says you need server auth and

01:18:41.320 --> 01:18:42.840
<v Speaker 1>we've got client auth.

01:18:44.440 --> 01:18:46.280
<v Speaker 1>So let's remove

01:18:46.440 --> 01:18:48.840
<v Speaker 1>client auth and change that to server auth.

01:18:49.720 --> 01:18:51.240
<v Speaker 1>I would hate for this to be the

01:18:51.240 --> 01:18:51.880
<v Speaker 1>issue.

01:18:52.600 --> 01:18:53.480
<v Speaker 0>Alright.

01:18:53.480 --> 01:18:54.834
<v Speaker 0>That's the least. Well,

01:18:56.355 --> 01:18:57.074
<v Speaker 0>you know,

01:18:57.315 --> 01:18:59.074
<v Speaker 0>these things are here to teach

01:18:59.554 --> 01:19:00.914
<v Speaker 0>us things. So

01:19:02.034 --> 01:19:03.314
<v Speaker 0>let's approve.

01:19:06.355 --> 01:19:06.915
<v Speaker 1>Yay.

01:19:07.500 --> 01:19:08.619
<v Speaker 1>Oh, dear.

01:19:10.300 --> 01:19:13.659
<v Speaker 1>Oh, no. Oh, well. Oh, no. Okay. Cool.

01:19:13.659 --> 01:19:15.659
<v Speaker 1>Right. We we we're we're back on track.

01:19:15.659 --> 01:19:17.019
<v Speaker 1>Do you wanna give that a very quick

01:19:17.019 --> 01:19:18.619
<v Speaker 1>shot with the docker version

01:19:20.300 --> 01:19:20.780
<v Speaker 1>as well?

01:19:22.585 --> 01:19:24.105
<v Speaker 1>Or would that be too much faff? No.

01:19:24.105 --> 01:19:26.025
<v Speaker 0>It's alright. Let's just pull it back to

01:19:26.025 --> 01:19:27.225
<v Speaker 0>Docker desktop.

01:19:28.345 --> 01:19:30.265
<v Speaker 0>Reapply. Because then we'll be able to avoid

01:19:30.265 --> 01:19:33.065
<v Speaker 1>the having to build the image into Minikube

01:19:33.065 --> 01:19:33.785
<v Speaker 1>itself.

01:19:33.945 --> 01:19:34.665
<v Speaker 1>Approved.

01:19:37.340 --> 01:19:38.780
<v Speaker 0>Oh, well, that's an old one. So let

01:19:38.780 --> 01:19:40.139
<v Speaker 0>me just Yeah. That's the old one, I

01:19:40.139 --> 01:19:40.619
<v Speaker 1>think.

01:19:41.900 --> 01:19:42.780
<v Speaker 0>Apply.

01:19:43.420 --> 01:19:44.459
<v Speaker 0>Approve.

01:19:46.780 --> 01:19:47.659
<v Speaker 0>Oops.

01:19:48.940 --> 01:19:49.659
<v Speaker 0>Approve.

01:19:50.105 --> 01:19:52.585
<v Speaker 0>Go back the array amount of commands. Issued.

01:19:52.585 --> 01:19:53.304
<v Speaker 1>Yeah. Yeah.

01:19:53.784 --> 01:19:54.505
<v Speaker 1>Amazing.

01:19:54.585 --> 01:19:56.185
<v Speaker 1>Cool. So from there, what we need to

01:19:56.185 --> 01:19:58.585
<v Speaker 1>do is we need to extract out the

01:19:58.585 --> 01:19:59.945
<v Speaker 1>certificate itself,

01:20:00.824 --> 01:20:02.985
<v Speaker 1>the certificate authority

01:20:03.784 --> 01:20:05.465
<v Speaker 1>data. So we've approved the certificate.

01:20:06.280 --> 01:20:08.760
<v Speaker 1>And now we need to extract the CA

01:20:08.760 --> 01:20:11.800
<v Speaker 1>from Kubernetes itself to put into our

01:20:12.280 --> 01:20:13.080
<v Speaker 1>bundle.

01:20:13.800 --> 01:20:15.080
<v Speaker 1>So what I'm going to do is I'm

01:20:15.080 --> 01:20:15.800
<v Speaker 1>going to

01:20:16.760 --> 01:20:17.960
<v Speaker 1>put the command

01:20:18.925 --> 01:20:20.525
<v Speaker 1>just in the file that you're looking at

01:20:20.765 --> 01:20:21.325
<v Speaker 1>Mhmm.

01:20:21.885 --> 01:20:23.885
<v Speaker 1>For you to copy. Oh, you can just

01:20:23.885 --> 01:20:25.725
<v Speaker 0>type it into the terminal if you want.

01:20:25.725 --> 01:20:27.565
<v Speaker 1>Oh, yes. Actually, yeah. That would be good.

01:20:33.005 --> 01:20:34.285
<v Speaker 1>A weird wraparound thing.

01:20:34.989 --> 01:20:35.789
<v Speaker 0>That

01:20:36.190 --> 01:20:37.949
<v Speaker 0>final pipe should be there. Right?

01:20:40.270 --> 01:20:42.429
<v Speaker 1>Yeah. That final pipe shouldn't be there.

01:20:43.790 --> 01:20:45.869
<v Speaker 1>It did a weird wraparound thing for me,

01:20:45.869 --> 01:20:46.030
<v Speaker 1>but

01:20:46.815 --> 01:20:47.375
<v Speaker 1>Okay,

01:20:47.695 --> 01:20:48.974
<v Speaker 1>cool. So this is the

01:20:49.375 --> 01:20:51.855
<v Speaker 1>certificate authority that's for your

01:20:52.175 --> 01:20:54.495
<v Speaker 1>Kubernetes cluster. And what we're going do is

01:20:54.495 --> 01:20:56.574
<v Speaker 1>we're going to reference that as our

01:20:57.135 --> 01:20:59.614
<v Speaker 1>CA bundle. So this gives us the last

01:20:59.614 --> 01:21:00.415
<v Speaker 1>thing that we need.

01:21:02.890 --> 01:21:05.610
<v Speaker 1>Our Kubernetes cluster now trusts that

01:21:06.250 --> 01:21:07.130
<v Speaker 1>certificate.

01:21:07.210 --> 01:21:08.570
<v Speaker 1>We've done all of that.

01:21:09.050 --> 01:21:10.889
<v Speaker 1>This is the last bit that we need

01:21:11.850 --> 01:21:13.050
<v Speaker 1>on our side.

01:21:14.489 --> 01:21:16.745
<v Speaker 1>So that's So am I just copying this

01:21:16.745 --> 01:21:18.665
<v Speaker 0>and then creating a secret of it?

01:21:19.625 --> 01:21:20.185
<v Speaker 1>So

01:21:20.585 --> 01:21:23.545
<v Speaker 1>yeah. What you're doing is you're you're grabbing

01:21:23.545 --> 01:21:27.065
<v Speaker 1>that and you're creating your base 64 decoding

01:21:27.065 --> 01:21:28.025
<v Speaker 1>that as well.

01:21:28.505 --> 01:21:30.240
<v Speaker 1>So we need to base 64 decode that.

01:21:30.240 --> 01:21:31.920
<v Speaker 0>So why do we need this? Because this

01:21:31.920 --> 01:21:33.520
<v Speaker 0>is already in the cluster. Right?

01:21:34.480 --> 01:21:36.560
<v Speaker 1>Yeah. So this is the certificate

01:21:37.120 --> 01:21:39.360
<v Speaker 1>authority that has signed

01:21:42.080 --> 01:21:43.200
<v Speaker 1>the request. So we're gonna have to put

01:21:43.200 --> 01:21:43.840
<v Speaker 1>this into,

01:21:45.295 --> 01:21:46.414
<v Speaker 1>where do we need to put this? We

01:21:46.414 --> 01:21:48.334
<v Speaker 1>need to put this into the webhook itself.

01:21:48.335 --> 01:21:50.414
<v Speaker 1>So we basically, we need to specify the

01:21:50.414 --> 01:21:52.175
<v Speaker 1>certificate authority bundle

01:21:52.255 --> 01:21:54.014
<v Speaker 1>that has trusted our

01:21:54.815 --> 01:21:56.175
<v Speaker 1>webhook

01:21:56.175 --> 01:21:58.830
<v Speaker 1>certificate. So imagine it like this, right? Imagine

01:21:58.830 --> 01:22:01.150
<v Speaker 1>that we didn't use the Kubernetes CA to

01:22:01.710 --> 01:22:03.789
<v Speaker 1>issue the certificate for our webhook.

01:22:04.429 --> 01:22:06.349
<v Speaker 1>We need to tell Kubernetes,

01:22:06.429 --> 01:22:08.030
<v Speaker 1>where do you go look up the

01:22:08.429 --> 01:22:09.309
<v Speaker 1>authority

01:22:09.390 --> 01:22:12.670
<v Speaker 1>for that certificate itself? So you can specify

01:22:12.135 --> 01:22:13.814
<v Speaker 1>that as part of your configuration.

01:22:13.974 --> 01:22:15.974
<v Speaker 1>So one other piece that we need to

01:22:15.974 --> 01:22:18.695
<v Speaker 1>create is a mutating webhook configuration,

01:22:19.014 --> 01:22:19.655
<v Speaker 1>which is,

01:22:20.375 --> 01:22:23.414
<v Speaker 1>hey, Kubernetes, go and inject this webhook into

01:22:23.414 --> 01:22:24.214
<v Speaker 1>my cluster

01:22:24.614 --> 01:22:26.630
<v Speaker 1>and be ready to start calling it.

01:22:27.030 --> 01:22:28.710
<v Speaker 1>So maybe why don't we create that first

01:22:28.710 --> 01:22:31.670
<v Speaker 1>and then hopefully this will make sense why

01:22:31.670 --> 01:22:32.709
<v Speaker 1>this is necessary.

01:22:33.429 --> 01:22:35.669
<v Speaker 0>Okay. So let's create admission.YAML.

01:22:36.550 --> 01:22:37.429
<v Speaker 1>That's right.

01:22:37.670 --> 01:22:38.630
<v Speaker 1>And what

01:22:38.949 --> 01:22:39.989
<v Speaker 1>it is is

01:22:41.185 --> 01:22:43.105
<v Speaker 1>it's gonna require a little bit of boilerplate.

01:22:43.265 --> 01:22:46.625
<v Speaker 1>If you look for mutating webhook configuration

01:22:52.465 --> 01:22:54.225
<v Speaker 0>Let's see if we've got one here for

01:22:54.225 --> 01:22:54.945
<v Speaker 0>kind.

01:22:55.585 --> 01:22:55.905
<v Speaker 0>Nope.

01:23:04.760 --> 01:23:06.199
<v Speaker 1>If not, then I can get us started

01:23:06.199 --> 01:23:07.400
<v Speaker 1>with the boilerplate

01:23:07.400 --> 01:23:09.079
<v Speaker 1>that I have on my end.

01:23:10.360 --> 01:23:12.565
<v Speaker 1>If that's easier. That's weird. Yeah. If you've

01:23:12.565 --> 01:23:14.405
<v Speaker 0>got it there, we can just do that.

01:23:14.885 --> 01:23:16.405
<v Speaker 0>Don't know why my YAML search didn't work

01:23:16.405 --> 01:23:16.965
<v Speaker 0>there.

01:23:17.525 --> 01:23:18.245
<v Speaker 1>Cool.

01:23:18.325 --> 01:23:20.165
<v Speaker 1>So we've got an admission.YAML.

01:23:20.325 --> 01:23:22.165
<v Speaker 1>So essentially, what we're doing is we're starting

01:23:22.165 --> 01:23:24.565
<v Speaker 1>with the mutating webhook configuration.

01:23:24.725 --> 01:23:27.079
<v Speaker 1>We need to give it a name, like

01:23:27.079 --> 01:23:28.199
<v Speaker 1>all Kubernetes

01:23:28.199 --> 01:23:29.079
<v Speaker 1>resources.

01:23:29.079 --> 01:23:31.719
<v Speaker 1>So we're gonna call this semantic,

01:23:31.719 --> 01:23:33.320
<v Speaker 1>just to keep things consistent.

01:23:34.280 --> 01:23:36.359
<v Speaker 1>We don't need a label, I don't think.

01:23:38.599 --> 01:23:40.119
<v Speaker 1>Yeah, from there,

01:23:42.364 --> 01:23:43.885
<v Speaker 1>webhook itself.

01:23:45.405 --> 01:23:47.325
<v Speaker 1>Now, this is going to be the name

01:23:47.325 --> 01:23:48.605
<v Speaker 1>of the service

01:23:48.845 --> 01:23:50.765
<v Speaker 1>that needs to be called. So for us,

01:23:50.765 --> 01:23:57.090
<v Speaker 1>that's going be semantic.fault.service.cluster.local.

01:23:57.090 --> 01:23:58.610
<v Speaker 1>Does that look right to you? That is

01:23:58.610 --> 01:23:59.410
<v Speaker 0>right. Yep.

01:23:59.810 --> 01:24:00.610
<v Speaker 1>Cool.

01:24:01.490 --> 01:24:03.650
<v Speaker 1>We're also going to need some rules. So

01:24:03.650 --> 01:24:06.690
<v Speaker 1>essentially, we need to tell Kubernetes when this

01:24:07.250 --> 01:24:08.850
<v Speaker 1>when should this webhook be called.

01:24:10.235 --> 01:24:12.635
<v Speaker 1>Like what kind of operations are we watching

01:24:12.635 --> 01:24:13.195
<v Speaker 1>for?

01:24:13.594 --> 01:24:15.755
<v Speaker 1>What kind of resources are we watching for?

01:24:15.755 --> 01:24:16.954
<v Speaker 1>What API versions?

01:24:17.114 --> 01:24:19.675
<v Speaker 1>So here I have just pasted a set

01:24:19.675 --> 01:24:20.715
<v Speaker 1>of rules for

01:24:21.275 --> 01:24:23.849
<v Speaker 1>we're watching for the creation of pods.

01:24:24.650 --> 01:24:26.650
<v Speaker 1>And the good thing about this is that

01:24:26.810 --> 01:24:28.409
<v Speaker 1>it's not going to look for just manual

01:24:28.409 --> 01:24:30.650
<v Speaker 1>creation as well. Like if another controller is

01:24:30.650 --> 01:24:33.130
<v Speaker 1>creating pods, it will also pass through

01:24:33.449 --> 01:24:34.090
<v Speaker 1>appropriately.

01:24:39.255 --> 01:24:41.735
<v Speaker 1>I mentioned earlier that we want to specify,

01:24:41.735 --> 01:24:43.175
<v Speaker 1>like, a failure policy.

01:24:43.655 --> 01:24:46.295
<v Speaker 1>So what happens if the mutating webhook fails?

01:24:46.855 --> 01:24:48.375
<v Speaker 1>Like, you know, for example, the the webhook

01:24:48.375 --> 01:24:49.415
<v Speaker 1>doesn't exist

01:24:49.895 --> 01:24:50.935
<v Speaker 1>or, like, whatever.

01:24:51.780 --> 01:24:55.139
<v Speaker 1>Now, default policy is to fail,

01:24:55.460 --> 01:24:56.340
<v Speaker 1>which means that

01:24:56.739 --> 01:24:58.099
<v Speaker 1>our cluster will

01:24:58.739 --> 01:25:01.460
<v Speaker 1>essentially error out and say that we couldn't

01:25:01.460 --> 01:25:02.419
<v Speaker 1>call the webhook.

01:25:03.219 --> 01:25:05.275
<v Speaker 1>I have now failed the creation of the

01:25:05.275 --> 01:25:06.954
<v Speaker 1>pod. We probably don't want that from the

01:25:06.954 --> 01:25:07.914
<v Speaker 1>get go. So we're going to start with

01:25:07.914 --> 01:25:08.554
<v Speaker 1>ignore.

01:25:09.275 --> 01:25:11.034
<v Speaker 1>So what this will mean is that it

01:25:11.034 --> 01:25:13.114
<v Speaker 1>will try and call our webhook as like

01:25:13.114 --> 01:25:15.514
<v Speaker 1>a best effort thing. If an error is

01:25:15.514 --> 01:25:18.074
<v Speaker 1>returned or a failure happens during the call,

01:25:18.155 --> 01:25:21.179
<v Speaker 1>it will just ignore that and move on.

01:25:23.020 --> 01:25:25.579
<v Speaker 1>Now, the other thing that we need, lastly,

01:25:25.579 --> 01:25:27.260
<v Speaker 1>is a client configuration.

01:25:27.420 --> 01:25:29.899
<v Speaker 1>So this is the configuration for

01:25:30.139 --> 01:25:31.739
<v Speaker 1>how our webhook should be called.

01:25:32.375 --> 01:25:33.894
<v Speaker 1>I mentioned that

01:25:34.775 --> 01:25:35.494
<v Speaker 1>we

01:25:36.614 --> 01:25:39.655
<v Speaker 1>need to provide the endpoint and the port.

01:25:40.535 --> 01:25:43.574
<v Speaker 1>So we need to provide the service itself.

01:25:45.210 --> 01:25:46.730
<v Speaker 1>We need to provide the path and the

01:25:46.730 --> 01:25:47.370
<v Speaker 1>port.

01:25:47.690 --> 01:25:50.410
<v Speaker 1>So essentially, because we've specified a mutate endpoint,

01:25:50.890 --> 01:25:51.450
<v Speaker 1>we're

01:25:51.770 --> 01:25:53.850
<v Speaker 1>going to pass in that mutate endpoint there

01:25:53.850 --> 01:25:55.450
<v Speaker 1>and port four forty three.

01:25:56.170 --> 01:25:59.290
<v Speaker 1>And we also need to provide the name

01:25:59.290 --> 01:26:01.505
<v Speaker 1>of service as well. So the

01:26:01.985 --> 01:26:04.224
<v Speaker 1>name is going to be semantic. Now,

01:26:04.705 --> 01:26:06.704
<v Speaker 1>I mentioned earlier that we're going to need

01:26:06.784 --> 01:26:09.264
<v Speaker 1>the certificate authority itself.

01:26:09.585 --> 01:26:11.824
<v Speaker 1>That's also part of the

01:26:12.065 --> 01:26:13.184
<v Speaker 1>client config.

01:26:13.425 --> 01:26:13.985
<v Speaker 1>So

01:26:14.250 --> 01:26:17.050
<v Speaker 1>when you copy the certificate authority data of

01:26:17.050 --> 01:26:19.210
<v Speaker 1>your cluster, that's where it goes, the base

01:26:19.210 --> 01:26:20.730
<v Speaker 1>64 encoded version.

01:26:21.210 --> 01:26:23.690
<v Speaker 1>And that essentially lets it know what certificate

01:26:23.690 --> 01:26:25.450
<v Speaker 1>chain it should be looking for. And because

01:26:25.450 --> 01:26:28.170
<v Speaker 1>we're using the certificate authority of Kubernetes

01:26:27.965 --> 01:26:28.844
<v Speaker 1>CA,

01:26:29.405 --> 01:26:31.005
<v Speaker 1>we need to paste in that chain here

01:26:31.005 --> 01:26:33.085
<v Speaker 1>to let it know that that's the certificate

01:26:33.085 --> 01:26:35.804
<v Speaker 1>authority it should be using. Alright. Got it.

01:26:35.804 --> 01:26:38.284
<v Speaker 1>To validate our cert. So do

01:26:38.284 --> 01:26:39.965
<v Speaker 1>you have that copied? Could you paste that

01:26:39.965 --> 01:26:40.684
<v Speaker 1>in there?

01:26:41.085 --> 01:26:43.099
<v Speaker 0>I'm gonna copy it again just in case.

01:26:45.739 --> 01:26:47.739
<v Speaker 0>So oh, yeah. Didn't run the command. There

01:26:47.739 --> 01:26:49.979
<v Speaker 0>we go. So that should be it there.

01:26:50.860 --> 01:26:51.579
<v Speaker 1>Cool.

01:26:53.020 --> 01:26:55.515
<v Speaker 1>What was I complaining about there? Missing property

01:26:55.515 --> 01:26:57.594
<v Speaker 1>namespace. Oh, I wonder if we need to

01:26:57.594 --> 01:26:59.355
<v Speaker 1>find namespace as well.

01:27:01.835 --> 01:27:02.554
<v Speaker 0>Oh.

01:27:04.074 --> 01:27:06.474
<v Speaker 0>Says this must require entry side effects.

01:27:07.035 --> 01:27:08.395
<v Speaker 1>Effects, yeah. So

01:27:10.050 --> 01:27:12.130
<v Speaker 1>when you're creating a mutating webhook,

01:27:12.690 --> 01:27:15.169
<v Speaker 1>essentially you can specify whether your

01:27:15.489 --> 01:27:17.170
<v Speaker 1>webhook is going to create any sort of

01:27:17.170 --> 01:27:18.449
<v Speaker 1>side effects. So is it going to interact

01:27:18.449 --> 01:27:20.449
<v Speaker 1>with anything that's not been passed in?

01:27:21.730 --> 01:27:24.825
<v Speaker 1>Now for us, because we're taking in actual

01:27:24.825 --> 01:27:27.705
<v Speaker 1>pod that's being created and just mutating that

01:27:27.705 --> 01:27:29.945
<v Speaker 1>as part of our patch, our program has

01:27:29.945 --> 01:27:30.985
<v Speaker 1>no side effects.

01:27:33.145 --> 01:27:35.625
<v Speaker 1>So we're going to say side effects,

01:27:35.705 --> 01:27:35.864
<v Speaker 1>none.

01:27:38.550 --> 01:27:41.270
<v Speaker 1>Now, admission review versions. This is quite an

01:27:41.270 --> 01:27:42.550
<v Speaker 1>interesting field. So

01:27:43.030 --> 01:27:45.350
<v Speaker 1>right now, what we have is we have

01:27:45.510 --> 01:27:46.310
<v Speaker 1>resources

01:27:46.470 --> 01:27:47.909
<v Speaker 1>that are specified

01:27:48.310 --> 01:27:50.790
<v Speaker 1>as part of our API versions, like v1

01:27:50.790 --> 01:27:51.429
<v Speaker 1>pods.

01:27:51.670 --> 01:27:54.015
<v Speaker 1>Now, when Kubernetes came out, a lot of

01:27:54.015 --> 01:27:57.455
<v Speaker 1>these resources, like deployments and replica sets, were

01:27:57.455 --> 01:28:00.015
<v Speaker 1>in alpha one, beta one,

01:28:00.175 --> 01:28:01.295
<v Speaker 1>beta v1.

01:28:02.255 --> 01:28:03.535
<v Speaker 1>What admission

01:28:03.855 --> 01:28:06.749
<v Speaker 1>review versions does is that it will cast

01:28:07.469 --> 01:28:10.429
<v Speaker 1>older and newer versions into the version that

01:28:10.429 --> 01:28:11.550
<v Speaker 1>you are requesting.

01:28:11.710 --> 01:28:12.669
<v Speaker 1>Now because

01:28:12.909 --> 01:28:13.630
<v Speaker 1>pods

01:28:13.790 --> 01:28:16.030
<v Speaker 1>is currently v one and we want it

01:28:16.030 --> 01:28:17.070
<v Speaker 1>to remain v

01:28:17.775 --> 01:28:20.574
<v Speaker 1>Essentially we're gonna say admission review versions just

01:28:20.574 --> 01:28:21.454
<v Speaker 1>v one.

01:28:23.455 --> 01:28:26.094
<v Speaker 1>Does that make sense? Yeah. I think so.

01:28:28.655 --> 01:28:30.840
<v Speaker 0>Can I just check with you? Are you

01:28:30.840 --> 01:28:32.760
<v Speaker 0>okay to keep going? Cause I know that

01:28:32.760 --> 01:28:34.679
<v Speaker 0>our session was supposed to end around now.

01:28:34.679 --> 01:28:37.080
<v Speaker 0>So if you're available, we can keep going.

01:28:37.080 --> 01:28:39.400
<v Speaker 0>If not, we can always schedule a part

01:28:39.400 --> 01:28:40.760
<v Speaker 0>two. What works for you?

01:28:41.400 --> 01:28:43.480
<v Speaker 1>I'm totally fine to keep going. Yeah. As

01:28:43.480 --> 01:28:45.724
<v Speaker 1>long as you're okay with that. Yep. Perfect.

01:28:45.804 --> 01:28:46.445
<v Speaker 1>Cool.

01:28:46.605 --> 01:28:48.204
<v Speaker 1>It would be nice to get this mutating

01:28:48.204 --> 01:28:50.125
<v Speaker 1>webhook up and running and then we can

01:28:50.125 --> 01:28:52.684
<v Speaker 1>possibly leave the semantic clip for part two

01:28:54.605 --> 01:28:56.284
<v Speaker 1>or whatever works.

01:28:58.284 --> 01:28:58.605
<v Speaker 1>Cool.

01:28:59.340 --> 01:29:01.500
<v Speaker 1>So that is all we need for this

01:29:01.500 --> 01:29:02.619
<v Speaker 1>particular resource.

01:29:03.179 --> 01:29:05.659
<v Speaker 1>So let's try and apply that.

01:29:07.260 --> 01:29:08.139
<v Speaker 0>Alright.

01:29:09.340 --> 01:29:11.659
<v Speaker 0>So I'll just do admission.

01:29:12.540 --> 01:29:14.300
<v Speaker 0>That is now created.

01:29:15.365 --> 01:29:17.205
<v Speaker 1>Cool. Now if you fetch

01:29:17.365 --> 01:29:18.485
<v Speaker 1>that resource

01:29:22.005 --> 01:29:23.445
<v Speaker 0>Oh, mute it in.

01:29:28.565 --> 01:29:29.365
<v Speaker 0>Describe it?

01:29:30.559 --> 01:29:32.159
<v Speaker 1>Yeah. If you describe it. I I don't

01:29:32.159 --> 01:29:33.440
<v Speaker 1>think it's gonna be very informative.

01:29:41.685 --> 01:29:44.885
<v Speaker 1>Essentially that's now created our webhook and our

01:29:44.885 --> 01:29:46.485
<v Speaker 1>service will now be called

01:29:46.965 --> 01:29:48.645
<v Speaker 1>each time. Now I think the last thing

01:29:48.645 --> 01:29:50.325
<v Speaker 1>we need to do is just to set

01:29:50.325 --> 01:29:52.405
<v Speaker 1>up our secret so that we are injecting

01:29:52.405 --> 01:29:53.685
<v Speaker 1>in the certificates

01:29:54.165 --> 01:29:55.205
<v Speaker 1>for our

01:29:57.230 --> 01:29:57.949
<v Speaker 1>pod.

01:29:58.910 --> 01:30:00.830
<v Speaker 1>And then we should be good to go.

01:30:00.830 --> 01:30:02.989
<v Speaker 1>Then the whole life cycle should be up

01:30:02.989 --> 01:30:03.710
<v Speaker 1>and running.

01:30:04.590 --> 01:30:06.350
<v Speaker 0>Okay. So what we want to do is

01:30:06.350 --> 01:30:07.469
<v Speaker 0>add a volume.

01:30:08.430 --> 01:30:08.590
<v Speaker 0>Yep.

01:30:10.125 --> 01:30:12.204
<v Speaker 0>No, don't all complete that.

01:30:13.085 --> 01:30:14.125
<v Speaker 0>We want

01:30:15.165 --> 01:30:16.125
<v Speaker 0>secret.

01:30:17.965 --> 01:30:19.885
<v Speaker 0>Let's see if I can get nope. That's

01:30:19.885 --> 01:30:20.605
<v Speaker 0>not it. What

01:30:22.470 --> 01:30:24.470
<v Speaker 0>am I doing? Defining a volume. Right? Okay.

01:30:24.470 --> 01:30:27.270
<v Speaker 0>So Yeah. You're defining a volume and that

01:30:27.270 --> 01:30:31.190
<v Speaker 1>volume will probably be injected from a Kubernetes

01:30:31.190 --> 01:30:31.990
<v Speaker 1>secret.

01:30:33.510 --> 01:30:33.910
<v Speaker 0>Yeah.

01:30:35.715 --> 01:30:36.595
<v Speaker 0>I don't know why

01:30:37.555 --> 01:30:38.995
<v Speaker 0>that's not what it offered me a second

01:30:38.995 --> 01:30:40.114
<v Speaker 0>ago. There we go.

01:30:40.515 --> 01:30:42.594
<v Speaker 0>And the secret name, so

01:30:44.755 --> 01:30:46.355
<v Speaker 1>We'll just call it as semantic

01:30:46.810 --> 01:30:48.330
<v Speaker 1>cause we haven't created a sequence yet. Oh,

01:30:48.330 --> 01:30:49.849
<v Speaker 0>haven't created it yet. Semantic. And

01:30:51.050 --> 01:30:52.969
<v Speaker 0>we're just going to take everything and then

01:30:52.969 --> 01:30:54.409
<v Speaker 0>we want to add a

01:30:55.530 --> 01:30:57.610
<v Speaker 0>well, this is my debug one as well.

01:30:58.409 --> 01:31:01.425
<v Speaker 0>Let's copy that. Oh, yeah. I think you're

01:31:01.425 --> 01:31:02.864
<v Speaker 1>in the debug manifest.

01:31:03.505 --> 01:31:06.065
<v Speaker 0>And then we want to add volume

01:31:06.065 --> 01:31:08.465
<v Speaker 0>mounts where we mount our

01:31:08.785 --> 01:31:09.985
<v Speaker 0>semantic

01:31:10.065 --> 01:31:11.344
<v Speaker 0>no, certs.

01:31:11.665 --> 01:31:12.785
<v Speaker 1>Certs. Yep.

01:31:13.105 --> 01:31:16.020
<v Speaker 1>And we wanna put that in slash certs

01:31:16.020 --> 01:31:17.219
<v Speaker 1>in the root directory.

01:31:20.099 --> 01:31:20.739
<v Speaker 0>Done.

01:31:21.619 --> 01:31:22.499
<v Speaker 1>Sweet.

01:31:22.739 --> 01:31:24.579
<v Speaker 1>And we also need to create the secret

01:31:24.579 --> 01:31:25.059
<v Speaker 1>itself.

01:31:33.065 --> 01:31:34.824
<v Speaker 0>Yep.

01:31:36.425 --> 01:31:37.704
<v Speaker 0>I call it semantic.

01:31:39.465 --> 01:31:42.264
<v Speaker 0>And now we need our certificate.

01:31:42.665 --> 01:31:44.880
<v Speaker 1>Yeah. So we're gonna have two things here.

01:31:44.880 --> 01:31:45.999
<v Speaker 1>We're going to have the

01:31:48.719 --> 01:31:49.760
<v Speaker 1>key itself,

01:31:50.400 --> 01:31:52.719
<v Speaker 1>and we're also going to have the

01:31:53.920 --> 01:31:55.360
<v Speaker 1>what else do we need?

01:31:55.600 --> 01:31:56.400
<v Speaker 1>Cert.

01:31:56.560 --> 01:31:58.534
<v Speaker 1>We need the cert itself. Yeah, we need

01:31:58.534 --> 01:32:00.135
<v Speaker 1>to extract the cert from

01:32:00.375 --> 01:32:01.574
<v Speaker 1>Kubernetes.

01:32:03.094 --> 01:32:05.894
<v Speaker 1>How do we do that? I did have

01:32:06.135 --> 01:32:07.815
<v Speaker 1>that command safe as well.

01:32:13.030 --> 01:32:14.550
<v Speaker 1>Grab the cert from

01:32:15.350 --> 01:32:17.350
<v Speaker 1>the CSR. So let's get the key in

01:32:17.350 --> 01:32:17.910
<v Speaker 1>first.

01:32:18.150 --> 01:32:19.990
<v Speaker 1>So the key is going to be

01:32:20.630 --> 01:32:23.510
<v Speaker 1>webhook dot what do we call the binary?

01:32:23.590 --> 01:32:24.550
<v Speaker 1>In the binary,

01:32:24.955 --> 01:32:25.915
<v Speaker 1>we call it

01:32:26.155 --> 01:32:28.715
<v Speaker 1>webhook dash key dot m.

01:32:33.275 --> 01:32:34.635
<v Speaker 0>So what am I doing? Sorry.

01:32:35.035 --> 01:32:35.755
<v Speaker 1>So

01:32:36.075 --> 01:32:37.195
<v Speaker 1>what you're doing in

01:32:37.675 --> 01:32:38.475
<v Speaker 1>the data

01:32:38.970 --> 01:32:39.690
<v Speaker 1>is

01:32:40.090 --> 01:32:41.610
<v Speaker 1>where it says key, you're probably going to

01:32:41.610 --> 01:32:45.210
<v Speaker 1>want to rename that to webhook-key.pan.

01:32:46.250 --> 01:32:47.050
<v Speaker 0>Yep.

01:32:47.130 --> 01:32:48.890
<v Speaker 0>Got it. Yep. And then that's going to

01:32:48.890 --> 01:32:51.130
<v Speaker 1>be a base 64 of the

01:32:52.010 --> 01:32:53.690
<v Speaker 1>server-key.pan

01:32:54.215 --> 01:32:56.135
<v Speaker 1>in your in your root directory.

01:33:06.720 --> 01:33:07.360
<v Speaker 1>All

01:33:09.840 --> 01:33:10.800
<v Speaker 0>right, next.

01:33:11.120 --> 01:33:11.840
<v Speaker 1>Cool.

01:33:11.920 --> 01:33:14.400
<v Speaker 1>And we also need to grab the certificate

01:33:14.400 --> 01:33:17.520
<v Speaker 1>from Kubernetes itself. So we submitted a certificate

01:33:17.520 --> 01:33:19.440
<v Speaker 1>signing request. We now need to go and

01:33:19.440 --> 01:33:20.720
<v Speaker 1>fetch the certificate itself.

01:33:21.514 --> 01:33:23.195
<v Speaker 1>So if you do kubectl

01:33:23.195 --> 01:33:23.755
<v Speaker 1>get

01:33:24.235 --> 01:33:25.994
<v Speaker 1>CSR and then

01:33:26.395 --> 01:33:27.914
<v Speaker 1>semantic dot default,

01:33:28.635 --> 01:33:30.394
<v Speaker 1>you will need to

01:33:31.275 --> 01:33:32.635
<v Speaker 1>yeah. Actually, I wonder if it does come

01:33:32.635 --> 01:33:34.940
<v Speaker 1>in yeah. There we are. Certificate. So if

01:33:34.940 --> 01:33:36.219
<v Speaker 1>you just copy all of that,

01:33:38.380 --> 01:33:40.460
<v Speaker 1>that will be our certificate itself.

01:33:41.020 --> 01:33:41.820
<v Speaker 1>Amazing.

01:33:43.500 --> 01:33:46.860
<v Speaker 0>You think Kubernetes would provide a slightly easier

01:33:46.860 --> 01:33:49.715
<v Speaker 0>way to access the certificate signed with its

01:33:49.715 --> 01:33:52.435
<v Speaker 0>own CA system just to, you know, instead

01:33:52.435 --> 01:33:54.275
<v Speaker 0>of extracting out creating a secret where I

01:33:54.275 --> 01:33:55.715
<v Speaker 0>could just say, hey, pass this through to

01:33:55.715 --> 01:33:57.715
<v Speaker 0>testing but that I'll run a bit, maybe

01:33:57.715 --> 01:33:58.834
<v Speaker 0>we can wrap it earlier.

01:34:00.114 --> 01:34:01.635
<v Speaker 0>Okay, so we now have a secret.

01:34:02.034 --> 01:34:03.660
<v Speaker 0>These names have to match what we have

01:34:03.660 --> 01:34:05.980
<v Speaker 0>in our main dot go which were

01:34:06.460 --> 01:34:07.900
<v Speaker 0>webhook.crt

01:34:07.900 --> 01:34:13.900
<v Speaker 0>webhook - key Pem and webhook.crt.

01:34:14.380 --> 01:34:15.900
<v Speaker 0>Amazing. Which means

01:34:16.425 --> 01:34:18.264
<v Speaker 0>if I don't mess it up and do

01:34:18.264 --> 01:34:21.064
<v Speaker 0>an apply of everything this time,

01:34:21.465 --> 01:34:23.145
<v Speaker 0>I guess we can just do the deployment

01:34:23.145 --> 01:34:25.465
<v Speaker 0>that should create our secret update or deployment

01:34:25.465 --> 01:34:27.784
<v Speaker 0>with the volume notes and we should see

01:34:27.784 --> 01:34:29.385
<v Speaker 0>our new pod scheduled

01:34:30.025 --> 01:34:31.320
<v Speaker 0>and it is running.

01:34:31.880 --> 01:34:32.999
<v Speaker 1>Oh, amazing.

01:34:34.440 --> 01:34:35.960
<v Speaker 1>One thing we didn't do is we didn't

01:34:35.960 --> 01:34:38.360
<v Speaker 1>add any sort of logging to bug plants.

01:34:38.360 --> 01:34:39.959
<v Speaker 1>We're not going to know if

01:34:40.520 --> 01:34:43.080
<v Speaker 1>our mutation function gets called. So let's do

01:34:43.080 --> 01:34:43.719
<v Speaker 1>that very quickly.

01:34:45.045 --> 01:34:45.765
<v Speaker 1>So

01:34:47.765 --> 01:34:48.325
<v Speaker 1>Oh.

01:34:56.485 --> 01:34:57.445
<v Speaker 1>Very, very fancy. Yeah.

01:35:03.500 --> 01:35:05.579
<v Speaker 1>I'm a serial print line debugger.

01:35:07.420 --> 01:35:10.380
<v Speaker 1>I very rarely step into like GDB or

01:35:10.380 --> 01:35:12.780
<v Speaker 1>like any sort of like code dev or

01:35:12.780 --> 01:35:13.739
<v Speaker 1>anything like that.

01:35:15.340 --> 01:35:17.954
<v Speaker 1>It's done me well so far. Yeah. I

01:35:18.915 --> 01:35:22.195
<v Speaker 0>resort to print debugging and then I'll cave

01:35:22.195 --> 01:35:23.635
<v Speaker 0>and jump to a debugger if I feel

01:35:23.635 --> 01:35:25.155
<v Speaker 0>that I'm wasting too much time like when

01:35:25.155 --> 01:35:27.635
<v Speaker 0>I start doing I am here 76.

01:35:27.635 --> 01:35:29.475
<v Speaker 0>I'm like okay maybe I should get a

01:35:29.475 --> 01:35:32.580
<v Speaker 0>little bit more sophisticated there and I lie,

01:35:32.580 --> 01:35:33.940
<v Speaker 0>I never do. I am here seven to

01:35:33.940 --> 01:35:36.820
<v Speaker 0>six. Put swear words and it's Oh yes.

01:35:36.820 --> 01:35:38.980
<v Speaker 1>Yeah. I am I am the speller debugger

01:35:38.980 --> 01:35:39.940
<v Speaker 1>for sure.

01:35:41.700 --> 01:35:43.460
<v Speaker 0>Alright. So we built that image.

01:35:43.620 --> 01:35:45.140
<v Speaker 0>All we need to do is delete our

01:35:45.140 --> 01:35:47.974
<v Speaker 0>pod and what we should see now is

01:35:47.974 --> 01:35:50.215
<v Speaker 0>if we run logs and create a new

01:35:50.215 --> 01:35:52.614
<v Speaker 0>pod that is called, right?

01:35:53.175 --> 01:35:55.574
<v Speaker 1>That's right. So if we maybe

01:35:55.815 --> 01:35:58.375
<v Speaker 1>just, know, kubectl create pod with like NGINX

01:35:58.375 --> 01:35:59.100
<v Speaker 1>or something,

01:35:59.660 --> 01:36:01.420
<v Speaker 1>we should expect for

01:36:01.660 --> 01:36:04.140
<v Speaker 1>it to be called. Yeah. I'll just pop

01:36:04.140 --> 01:36:05.740
<v Speaker 0>in here. I'm just gonna make a chain.

01:36:05.740 --> 01:36:07.580
<v Speaker 0>In fact, no. Because this works in the

01:36:07.580 --> 01:36:09.180
<v Speaker 0>pod and not deployment level, right? I should

01:36:09.180 --> 01:36:11.100
<v Speaker 0>be able to just delete the debug pod

01:36:11.100 --> 01:36:12.220
<v Speaker 0>which will get recreated.

01:36:14.114 --> 01:36:14.754
<v Speaker 1>Yes.

01:36:15.554 --> 01:36:17.234
<v Speaker 1>If was tied to a deployment.

01:36:17.474 --> 01:36:18.914
<v Speaker 1>Ah, lovely. Amazing.

01:36:19.155 --> 01:36:20.835
<v Speaker 1>It all works. That means all of our

01:36:20.835 --> 01:36:22.274
<v Speaker 1>certificates are correct as well,

01:36:22.675 --> 01:36:24.434
<v Speaker 1>which is great. I don't think we need

01:36:24.434 --> 01:36:26.355
<v Speaker 1>any more certificate debugging for the rest of

01:36:26.355 --> 01:36:28.170
<v Speaker 1>the stream. Alright cool.

01:36:29.050 --> 01:36:31.050
<v Speaker 1>This means that the like

01:36:32.489 --> 01:36:34.090
<v Speaker 1>end to end chain works.

01:36:35.130 --> 01:36:35.849
<v Speaker 1>I think

01:36:36.890 --> 01:36:37.610
<v Speaker 1>how

01:36:37.930 --> 01:36:39.530
<v Speaker 1>far do you want to go? We could

01:36:39.530 --> 01:36:41.210
<v Speaker 1>get all of this up and running and

01:36:41.210 --> 01:36:42.650
<v Speaker 1>now it's just pure writing code.

01:36:44.235 --> 01:36:45.995
<v Speaker 0>Well, why don't we, if you're happy to

01:36:45.995 --> 01:36:47.435
<v Speaker 0>work till on the hour that gives us

01:36:47.435 --> 01:36:50.315
<v Speaker 0>around twenty minutes to hack together something with

01:36:50.315 --> 01:36:52.235
<v Speaker 0>the semantic version and you know, I don't

01:36:52.235 --> 01:36:53.515
<v Speaker 0>think we need to show a complete end

01:36:53.515 --> 01:36:54.795
<v Speaker 0>to end. We can, you know, we just

01:36:54.795 --> 01:36:56.715
<v Speaker 0>want to know show how we iterate on

01:36:56.715 --> 01:36:59.080
<v Speaker 0>this. We work with a client go We'll

01:36:59.080 --> 01:37:00.199
<v Speaker 0>do a little bit of that and then

01:37:00.199 --> 01:37:01.800
<v Speaker 0>maybe we can finish it offline and push

01:37:01.800 --> 01:37:03.080
<v Speaker 0>it to get up for people to to

01:37:03.080 --> 01:37:04.840
<v Speaker 0>kind of play with in their own time.

01:37:05.320 --> 01:37:07.400
<v Speaker 1>Cool. Amazing. That sounds good. Sweet.

01:37:08.120 --> 01:37:09.480
<v Speaker 1>So rapid coding.

01:37:10.199 --> 01:37:11.804
<v Speaker 1>I will try and talk through

01:37:11.965 --> 01:37:13.724
<v Speaker 1>all of the bits that we are doing

01:37:13.725 --> 01:37:16.525
<v Speaker 1>in really rapid fashion. So essentially, what we

01:37:16.525 --> 01:37:18.765
<v Speaker 1>have when we last left off this code

01:37:18.765 --> 01:37:21.405
<v Speaker 1>is we've got an admission review. Now if

01:37:21.405 --> 01:37:23.325
<v Speaker 1>we have a quick look into that admission

01:37:23.325 --> 01:37:25.699
<v Speaker 1>review itself, if you click through to the

01:37:25.699 --> 01:37:26.659
<v Speaker 1>admission review

01:37:30.580 --> 01:37:32.420
<v Speaker 1>oh, no. No. No. If you click through

01:37:32.420 --> 01:37:33.139
<v Speaker 1>to

01:37:34.180 --> 01:37:36.180
<v Speaker 1>oh, actually, well, yeah. There it works in

01:37:36.180 --> 01:37:37.780
<v Speaker 1>the in the Go docs as well. What

01:37:37.780 --> 01:37:39.300
<v Speaker 1>you get in the admission review,

01:37:41.275 --> 01:37:43.755
<v Speaker 1>if you command click on if you escape

01:37:43.755 --> 01:37:46.155
<v Speaker 1>that, if you command click on

01:37:48.235 --> 01:37:50.554
<v Speaker 1>line 15 where it says admission review,

01:37:50.875 --> 01:37:52.420
<v Speaker 1>yeah, it will take you to bit of

01:37:52.420 --> 01:37:54.180
<v Speaker 1>code. That's right. So what you have there

01:37:54.180 --> 01:37:55.619
<v Speaker 1>is an admission request,

01:37:55.940 --> 01:37:58.580
<v Speaker 1>and you are meant to specify admission response.

01:37:58.900 --> 01:38:00.740
<v Speaker 1>If you click through to the admission request

01:38:00.740 --> 01:38:01.460
<v Speaker 1>itself

01:38:03.300 --> 01:38:05.220
<v Speaker 1>oh, actually, yeah, it's just a few bits

01:38:05.220 --> 01:38:07.300
<v Speaker 1>down. What you have is you have

01:38:07.675 --> 01:38:09.995
<v Speaker 1>the UID of the request that's come in,

01:38:10.635 --> 01:38:14.155
<v Speaker 1>and you also have the object itself. Now

01:38:14.155 --> 01:38:16.795
<v Speaker 1>the object has a type of raw extension,

01:38:17.195 --> 01:38:17.995
<v Speaker 1>which is like

01:38:18.395 --> 01:38:20.315
<v Speaker 1>that might as well just say interface, like

01:38:20.315 --> 01:38:20.955
<v Speaker 1>Go interface.

01:38:21.409 --> 01:38:23.409
<v Speaker 1>Essentially, you can cast it to the type

01:38:23.409 --> 01:38:24.530
<v Speaker 1>of object that

01:38:25.170 --> 01:38:26.449
<v Speaker 1>you expect.

01:38:26.849 --> 01:38:28.849
<v Speaker 1>So we're going to unmarshal it into the

01:38:28.849 --> 01:38:30.289
<v Speaker 1>type of object we expect.

01:38:31.010 --> 01:38:33.330
<v Speaker 1>So essentially, what we want and what we

01:38:33.330 --> 01:38:33.889
<v Speaker 1>expect

01:38:34.290 --> 01:38:36.290
<v Speaker 1>from our mutating hook, the contract that we've

01:38:36.290 --> 01:38:38.265
<v Speaker 1>established with Kubernetes, is that it will send

01:38:38.265 --> 01:38:39.385
<v Speaker 1>us pod objects.

01:38:39.465 --> 01:38:41.785
<v Speaker 1>So we can try and unmarshal this into

01:38:41.785 --> 01:38:43.865
<v Speaker 1>a pod object. So

01:38:43.945 --> 01:38:46.345
<v Speaker 1>if you go back to the code itself,

01:38:47.385 --> 01:38:49.705
<v Speaker 1>what I'm doing is I'm initializing

01:38:49.705 --> 01:38:50.665
<v Speaker 1>a pod object.

01:38:51.800 --> 01:38:54.039
<v Speaker 1>And I'm going to try and JSON

01:38:54.360 --> 01:38:54.999
<v Speaker 1>dot

01:38:55.400 --> 01:38:56.280
<v Speaker 1>unmarsh

01:38:56.280 --> 01:38:57.320
<v Speaker 1>all of that.

01:38:58.199 --> 01:38:58.919
<v Speaker 1>Review

01:38:59.159 --> 01:39:01.079
<v Speaker 1>actually, that's going to be input

01:39:03.525 --> 01:39:04.325
<v Speaker 1>object.

01:39:04.405 --> 01:39:06.965
<v Speaker 1>Raw into the pod itself.

01:39:07.045 --> 01:39:07.925
<v Speaker 1>And

01:39:07.925 --> 01:39:09.365
<v Speaker 1>if that fails,

01:39:12.245 --> 01:39:13.765
<v Speaker 1>same deal here,

01:39:13.925 --> 01:39:15.765
<v Speaker 1>could not unmarshal pod.

01:39:18.110 --> 01:39:20.270
<v Speaker 1>So here, what we have right now is

01:39:20.270 --> 01:39:22.990
<v Speaker 1>the Kubernetes pod. We're probably going have to

01:39:22.990 --> 01:39:24.590
<v Speaker 1>add the import as well. So that's going

01:39:24.590 --> 01:39:25.230
<v Speaker 1>to be

01:39:26.670 --> 01:39:28.670
<v Speaker 1>API core v1.

01:39:28.830 --> 01:39:29.870
<v Speaker 1>Yeah, that's right.

01:39:32.685 --> 01:39:33.405
<v Speaker 1>Now

01:39:34.525 --> 01:39:37.485
<v Speaker 1>what we need to do now is

01:39:38.045 --> 01:39:41.165
<v Speaker 1>essentially try and figure out what images

01:39:41.165 --> 01:39:43.005
<v Speaker 1>are in the pod

01:39:43.085 --> 01:39:44.844
<v Speaker 1>to see if there are any images that

01:39:44.844 --> 01:39:46.284
<v Speaker 1>we want to semantically

01:39:46.820 --> 01:39:47.619
<v Speaker 1>modify.

01:39:48.740 --> 01:39:51.300
<v Speaker 1>So within the pod object itself, if we

01:39:51.300 --> 01:39:52.900
<v Speaker 1>click through to the pod object,

01:39:54.020 --> 01:39:54.980
<v Speaker 1>you have

01:39:55.700 --> 01:39:57.460
<v Speaker 1>the pod spec.

01:39:57.700 --> 01:40:00.580
<v Speaker 1>And within the pod spec, you have containers.

01:40:02.205 --> 01:40:04.205
<v Speaker 1>And within each of the containers, have a

01:40:04.205 --> 01:40:05.164
<v Speaker 1>container object.

01:40:05.485 --> 01:40:08.445
<v Speaker 1>And within each container object, have an image.

01:40:10.605 --> 01:40:12.525
<v Speaker 1>Does that make sense so far? Yep.

01:40:12.685 --> 01:40:13.565
<v Speaker 1>So

01:40:14.045 --> 01:40:15.725
<v Speaker 1>what we're going to do is we're going

01:40:15.510 --> 01:40:17.030
<v Speaker 1>to simply iterate through,

01:40:17.750 --> 01:40:19.429
<v Speaker 1>just like you would in

01:40:21.190 --> 01:40:23.429
<v Speaker 1>standard Go, if you have a slice of,

01:40:23.510 --> 01:40:24.789
<v Speaker 1>well, anything really.

01:40:25.349 --> 01:40:27.590
<v Speaker 1>Pod dot spec dot containers.

01:40:30.065 --> 01:40:30.784
<v Speaker 1>And

01:40:31.344 --> 01:40:33.184
<v Speaker 1>what we're going to say is,

01:40:34.304 --> 01:40:36.465
<v Speaker 1>let's say that we just want to take

01:40:36.465 --> 01:40:38.545
<v Speaker 1>that particular container and apply

01:40:38.625 --> 01:40:40.224
<v Speaker 1>any sort of patch to it.

01:40:40.784 --> 01:40:41.344
<v Speaker 0>I was

01:40:43.105 --> 01:40:44.065
<v Speaker 0>just going to suggest,

01:40:44.304 --> 01:40:45.105
<v Speaker 0>if we detect

01:40:46.200 --> 01:40:47.960
<v Speaker 0>or why don't we just replace it with

01:40:48.200 --> 01:40:50.280
<v Speaker 0>NGINX latest just to kind of show it

01:40:50.280 --> 01:40:52.040
<v Speaker 0>working? Does that make sense? Yeah. That's exactly

01:40:52.040 --> 01:40:53.640
<v Speaker 1>it. So what I'm going to do is

01:40:53.640 --> 01:40:54.599
<v Speaker 1>I'm going to create

01:40:55.000 --> 01:40:56.119
<v Speaker 1>a map

01:40:56.600 --> 01:40:58.520
<v Speaker 1>with our patches itself.

01:41:00.165 --> 01:41:02.244
<v Speaker 1>If

01:41:03.525 --> 01:41:04.725
<v Speaker 1>we had a bit more time, I'd probably

01:41:04.725 --> 01:41:06.244
<v Speaker 1>use a proper ghost struct.

01:41:07.925 --> 01:41:09.764
<v Speaker 1>And what we're going to say is,

01:41:11.045 --> 01:41:12.244
<v Speaker 1>patch equals

01:41:12.245 --> 01:41:13.125
<v Speaker 1>append

01:41:13.125 --> 01:41:14.085
<v Speaker 1>patch

01:41:14.405 --> 01:41:15.445
<v Speaker 1>map string string.

01:41:16.280 --> 01:41:18.920
<v Speaker 1>How I mentioned, similar to how you would

01:41:19.080 --> 01:41:20.040
<v Speaker 1>do a

01:41:20.520 --> 01:41:22.840
<v Speaker 1>Kubernetes style patch operation,

01:41:23.000 --> 01:41:25.480
<v Speaker 1>you have three fields. You have the operation

01:41:25.480 --> 01:41:27.080
<v Speaker 1>that you want to do. So here, what

01:41:27.080 --> 01:41:28.360
<v Speaker 1>we want is we want to replace the

01:41:28.360 --> 01:41:29.240
<v Speaker 1>image name.

01:41:29.720 --> 01:41:31.065
<v Speaker 1>You have the path,

01:41:31.225 --> 01:41:32.105
<v Speaker 1>which is the

01:41:32.745 --> 01:41:34.825
<v Speaker 1>name of the object itself that you want

01:41:34.825 --> 01:41:36.985
<v Speaker 1>to replace within the YAML. This starts at

01:41:36.985 --> 01:41:39.385
<v Speaker 1>the very top level. So just like you'd

01:41:39.385 --> 01:41:41.465
<v Speaker 1>have a JSON path,

01:41:41.625 --> 01:41:42.585
<v Speaker 1>you start the spec.

01:41:43.160 --> 01:41:45.400
<v Speaker 1>And then within the containers, you have a

01:41:45.400 --> 01:41:46.040
<v Speaker 1>list.

01:41:46.440 --> 01:41:48.440
<v Speaker 1>This is where the index comes in handy,

01:41:49.080 --> 01:41:51.240
<v Speaker 1>because we can inject the index in. And

01:41:51.240 --> 01:41:53.719
<v Speaker 1>we probably want to sprint off that

01:41:56.040 --> 01:41:57.720
<v Speaker 1>by the image field itself.

01:42:00.795 --> 01:42:02.235
<v Speaker 1>And what we want to do is we

01:42:02.235 --> 01:42:03.755
<v Speaker 1>want to set its value

01:42:04.075 --> 01:42:06.795
<v Speaker 1>to just NGINX latest.

01:42:08.635 --> 01:42:10.395
<v Speaker 1>Useful. Does that make sense so far? Yeah,

01:42:10.395 --> 01:42:11.115
<v Speaker 1>quite useful.

01:42:12.810 --> 01:42:14.729
<v Speaker 0>Yeah, I think we just need

01:42:15.130 --> 01:42:16.090
<v Speaker 0>assignment.

01:42:16.090 --> 01:42:16.570
<v Speaker 0>There.

01:42:21.690 --> 01:42:23.289
<v Speaker 0>Can't this is the patch Yeah.

01:42:25.130 --> 01:42:25.610
<v Speaker 1>So

01:42:26.014 --> 01:42:27.215
<v Speaker 1>we need to assign it to the patch

01:42:27.215 --> 01:42:28.494
<v Speaker 1>map. So that was a bug on my

01:42:27.935 --> 01:42:28.494
<v Speaker 1>And

01:42:29.935 --> 01:42:31.774
<v Speaker 1>we don't need the assignment there.

01:42:33.295 --> 01:42:35.695
<v Speaker 1>We have what we're doing now is we've

01:42:35.695 --> 01:42:37.614
<v Speaker 1>generated a list of mutations. What we're saying

01:42:37.614 --> 01:42:40.094
<v Speaker 1>is for every container that you see, replace

01:42:40.094 --> 01:42:42.389
<v Speaker 1>this image tag with NGINX latest.

01:42:42.710 --> 01:42:44.790
<v Speaker 1>Very, very helpful. And what we need to

01:42:44.790 --> 01:42:46.469
<v Speaker 1>do is we need to

01:42:47.590 --> 01:42:48.630
<v Speaker 1>wrap that up

01:42:49.190 --> 01:42:50.150
<v Speaker 1>into

01:42:50.150 --> 01:42:52.070
<v Speaker 1>a series of bytes.

01:42:53.190 --> 01:42:54.150
<v Speaker 0>Send response.

01:42:58.845 --> 01:43:00.605
<v Speaker 1>We'll

01:43:00.605 --> 01:43:01.885
<v Speaker 1>deal with that in a second.

01:43:03.325 --> 01:43:03.965
<v Speaker 1>Now,

01:43:04.525 --> 01:43:05.965
<v Speaker 1>like I mentioned earlier,

01:43:06.765 --> 01:43:08.605
<v Speaker 1>every single thing that we

01:43:09.485 --> 01:43:12.390
<v Speaker 1>work within admission controller is essentially an admission

01:43:12.390 --> 01:43:13.110
<v Speaker 1>review.

01:43:13.989 --> 01:43:16.309
<v Speaker 1>Yeah, thank you for correcting that. Is

01:43:16.550 --> 01:43:19.430
<v Speaker 1>an admission review object. So we're going to

01:43:19.430 --> 01:43:20.710
<v Speaker 1>generate a response,

01:43:21.510 --> 01:43:23.270
<v Speaker 1>which is our response review.

01:43:23.910 --> 01:43:27.045
<v Speaker 1>And that's an admission v one admission

01:43:27.685 --> 01:43:28.565
<v Speaker 1>review.

01:43:30.565 --> 01:43:32.165
<v Speaker 1>And that's going to be

01:43:34.245 --> 01:43:36.725
<v Speaker 1>we can copy the meta fields

01:43:36.725 --> 01:43:38.725
<v Speaker 1>from the input.

01:43:38.885 --> 01:43:39.685
<v Speaker 1>TypeMeta,

01:43:40.990 --> 01:43:43.390
<v Speaker 1>because we want the same output to go

01:43:43.390 --> 01:43:43.950
<v Speaker 1>out.

01:43:44.350 --> 01:43:47.150
<v Speaker 1>And the response is going to be an

01:43:47.150 --> 01:43:48.510
<v Speaker 1>admission v1.

01:43:48.510 --> 01:43:49.469
<v Speaker 1>Admission

01:43:49.790 --> 01:43:50.350
<v Speaker 1>response.

01:43:52.165 --> 01:43:53.604
<v Speaker 1>And within there,

01:43:53.844 --> 01:43:55.364
<v Speaker 1>the UID,

01:43:55.364 --> 01:43:57.204
<v Speaker 1>which is going to be input

01:43:58.405 --> 01:43:59.204
<v Speaker 1>do it.

01:44:00.405 --> 01:44:02.165
<v Speaker 1>But there's an interesting flag that you can

01:44:02.165 --> 01:44:02.885
<v Speaker 1>specify,

01:44:03.364 --> 01:44:04.005
<v Speaker 1>which is

01:44:04.565 --> 01:44:05.125
<v Speaker 1>with

01:44:05.380 --> 01:44:07.700
<v Speaker 1>the mutations that we've seen, or with the

01:44:07.700 --> 01:44:09.540
<v Speaker 1>input that we've seen, do we want to

01:44:09.540 --> 01:44:11.780
<v Speaker 1>allow this request to go through, or do

01:44:11.780 --> 01:44:13.780
<v Speaker 1>we want to deny it?

01:44:14.100 --> 01:44:16.099
<v Speaker 1>Now, we want this request to go through,

01:44:16.100 --> 01:44:18.580
<v Speaker 1>but with a series of

01:44:22.114 --> 01:44:24.594
<v Speaker 1>what we're saying here is, this request looked

01:44:24.594 --> 01:44:25.474
<v Speaker 1>fine to us,

01:44:25.795 --> 01:44:28.675
<v Speaker 1>but make a few tweaks, please, for us.

01:44:29.315 --> 01:44:32.275
<v Speaker 1>And you don't need to specify this, but

01:44:32.890 --> 01:44:33.930
<v Speaker 1>just for

01:44:34.730 --> 01:44:35.930
<v Speaker 1>niceties,

01:44:37.370 --> 01:44:38.810
<v Speaker 1>admission viewable.

01:44:39.130 --> 01:44:41.690
<v Speaker 1>JSON patch. If they add any support for

01:44:41.690 --> 01:44:42.650
<v Speaker 1>any other patch types,

01:44:44.505 --> 01:44:45.945
<v Speaker 1>So

01:44:47.784 --> 01:44:49.705
<v Speaker 1>we've now generated a response review. We need

01:44:49.705 --> 01:44:50.985
<v Speaker 1>to marshal that again.

01:44:53.784 --> 01:44:55.864
<v Speaker 1>That code, REST flights.

01:44:59.145 --> 01:45:03.600
<v Speaker 1>to head to oh, actually, similar to what

01:45:03.600 --> 01:45:04.480
<v Speaker 1>we have here.

01:45:02.505 --> 01:44:59.145
<v Speaker 1>And need

01:45:05.760 --> 01:45:09.680
<v Speaker 1>We need to that's going to be respite.

01:45:10.560 --> 01:45:12.400
<v Speaker 1>JSON. This is status Okay.

01:45:15.175 --> 01:45:17.255
<v Speaker 1>I've got some error handling to do here.

01:45:20.375 --> 01:45:21.015
<v Speaker 1>That just

01:45:26.135 --> 01:45:27.335
<v Speaker 1>Could not

01:45:27.575 --> 01:45:29.175
<v Speaker 1>generate patch.

01:45:31.095 --> 01:45:31.790
<v Speaker 1>And could

01:45:31.950 --> 01:45:32.670
<v Speaker 1>not

01:45:35.150 --> 01:45:36.670
<v Speaker 1>the rest view.

01:45:39.390 --> 01:45:40.590
<v Speaker 1>Could not

01:45:40.670 --> 01:45:41.390
<v Speaker 1>generate

01:45:45.470 --> 01:45:48.394
<v Speaker 1>very helpful error messages is here. Okay. So

01:45:48.394 --> 01:45:50.715
<v Speaker 1>let's have a very, very quick walk through

01:45:50.715 --> 01:45:51.434
<v Speaker 1>of

01:45:51.675 --> 01:45:52.874
<v Speaker 1>what we've done here.

01:45:54.474 --> 01:45:55.354
<v Speaker 1>Essentially,

01:45:55.835 --> 01:45:59.450
<v Speaker 1>we have taken in our input object, unmarshalled

01:45:59.450 --> 01:46:00.730
<v Speaker 1>it to a pod because that's exactly what

01:46:00.730 --> 01:46:01.530
<v Speaker 1>we expect.

01:46:02.090 --> 01:46:04.570
<v Speaker 1>We've generated a series of patches.

01:46:05.130 --> 01:46:06.410
<v Speaker 1>We have created

01:46:07.130 --> 01:46:08.170
<v Speaker 1>a response

01:46:08.890 --> 01:46:09.930
<v Speaker 1>set of patches.

01:46:10.410 --> 01:46:12.490
<v Speaker 1>We have wrapped that up into an admission

01:46:12.490 --> 01:46:13.050
<v Speaker 1>review

01:46:14.344 --> 01:46:16.985
<v Speaker 1>response object with a list of patches. And

01:46:16.985 --> 01:46:18.265
<v Speaker 1>we've told it that we want to allow

01:46:18.265 --> 01:46:20.184
<v Speaker 1>this but with a series of patches.

01:46:20.425 --> 01:46:22.265
<v Speaker 1>And we're now sending that off into the

01:46:22.265 --> 01:46:22.905
<v Speaker 1>wire.

01:46:23.545 --> 01:46:25.304
<v Speaker 0>I think it's important to note for people

01:46:25.304 --> 01:46:28.040
<v Speaker 0>watching, like the only thing that's really bespoke

01:46:28.040 --> 01:46:30.520
<v Speaker 0>and not boilerplate here is just the

01:46:30.760 --> 01:46:32.440
<v Speaker 0>patch that we want to apply to the

01:46:32.440 --> 01:46:35.159
<v Speaker 0>manifesto has come into our admission controller.

01:46:35.160 --> 01:46:37.400
<v Speaker 0>Everything else you can copy and paste pretty

01:46:37.400 --> 01:46:37.800
<v Speaker 0>much

01:46:38.695 --> 01:46:40.855
<v Speaker 0>character for character. You're a machine for typing

01:46:40.855 --> 01:46:42.055
<v Speaker 0>that out so quickly by the way, that

01:46:42.055 --> 01:46:42.695
<v Speaker 0>was awesome.

01:46:43.255 --> 01:46:44.455
<v Speaker 0>This is where your

01:46:44.855 --> 01:46:47.175
<v Speaker 0>magic happens, whatever modifications you want to make

01:46:47.175 --> 01:46:48.535
<v Speaker 0>within your controller,

01:46:48.615 --> 01:46:50.135
<v Speaker 0>this is the secret sauce here and this

01:46:50.135 --> 01:46:52.295
<v Speaker 0>is JSON patch format, you can Google that,

01:46:52.200 --> 01:46:54.280
<v Speaker 0>there's different types of operations and ways to

01:46:54.280 --> 01:46:56.120
<v Speaker 0>work with it and I know it looks

01:46:56.120 --> 01:46:58.120
<v Speaker 0>a little weird at first sight but you

01:46:58.120 --> 01:46:59.800
<v Speaker 0>do get familiar with it over time.

01:47:00.680 --> 01:47:03.000
<v Speaker 0>Now this is obviously the most useless contrived

01:47:03.000 --> 01:47:04.760
<v Speaker 0>example that we've put together but we could

01:47:04.760 --> 01:47:06.680
<v Speaker 0>build this now and regardless of what we

01:47:06.680 --> 01:47:08.760
<v Speaker 0>apply to our cluster

01:47:08.545 --> 01:47:11.425
<v Speaker 0>is gonna overwrite it with the NGINX image

01:47:11.665 --> 01:47:13.505
<v Speaker 0>and what we need to be careful with

01:47:13.505 --> 01:47:15.985
<v Speaker 0>when we deploy this is that none of

01:47:15.985 --> 01:47:18.224
<v Speaker 0>our system pods or anything like get deleted.

01:47:19.105 --> 01:47:20.625
<v Speaker 1>Yeah and same with the

01:47:21.025 --> 01:47:22.145
<v Speaker 1>hook itself.

01:47:22.625 --> 01:47:22.945
<v Speaker 1>Yeah.

01:47:24.030 --> 01:47:27.949
<v Speaker 0>That'll be fun. Alright. Let's rebuild our image.

01:47:30.190 --> 01:47:32.430
<v Speaker 0>We'll delete our pod. We'll let that come

01:47:32.430 --> 01:47:34.190
<v Speaker 0>back up and then we will make a

01:47:34.190 --> 01:47:35.870
<v Speaker 0>change to our

01:47:36.575 --> 01:47:38.575
<v Speaker 0>debug pod and we should see that image

01:47:38.575 --> 01:47:40.415
<v Speaker 0>change from the Ubuntu one that we used

01:47:40.415 --> 01:47:41.215
<v Speaker 0>earlier

01:47:41.215 --> 01:47:42.575
<v Speaker 0>to NGINX.

01:47:43.055 --> 01:47:44.015
<v Speaker 1>That's right.

01:47:48.255 --> 01:47:50.255
<v Speaker 0>I'll just give Google a little second here.

01:47:52.520 --> 01:47:54.120
<v Speaker 0>I guess we are pulling in a few

01:47:54.120 --> 01:47:55.960
<v Speaker 0>extra dependencies now as well.

01:47:57.000 --> 01:47:59.480
<v Speaker 1>Yeah. The core v one has got to

01:47:59.480 --> 01:48:01.400
<v Speaker 1>put in a lot of Kubernetes.

01:48:02.920 --> 01:48:04.840
<v Speaker 0>So if I run get pods,

01:48:06.185 --> 01:48:07.625
<v Speaker 0>we can delete

01:48:08.425 --> 01:48:09.784
<v Speaker 0>pod semantic.

01:48:09.785 --> 01:48:11.465
<v Speaker 0>So that's gonna get the new version of

01:48:11.465 --> 01:48:12.825
<v Speaker 0>our mutating webhook.

01:48:12.825 --> 01:48:14.345
<v Speaker 0>What I'll also do is just pull up

01:48:14.345 --> 01:48:16.264
<v Speaker 0>the logs for that here.

01:48:17.945 --> 01:48:19.305
<v Speaker 0>Let's see if we get the new one.

01:48:19.305 --> 01:48:21.219
<v Speaker 0>We do. Excellent. And

01:48:25.060 --> 01:48:28.980
<v Speaker 0>just to show, let's describe our debug pod.

01:48:29.220 --> 01:48:31.300
<v Speaker 0>We can see here that the image is

01:48:31.300 --> 01:48:32.420
<v Speaker 0>it been too.

01:48:34.580 --> 01:48:36.365
<v Speaker 0>So assuming I've not got my understanding incorrect

01:48:36.365 --> 01:48:38.605
<v Speaker 0>here, when I delete this, a new create

01:48:38.605 --> 01:48:40.045
<v Speaker 0>pod is going to be initiated and the

01:48:40.045 --> 01:48:41.805
<v Speaker 0>image should be changed. Right? That's what we

01:48:41.805 --> 01:48:42.525
<v Speaker 0>expect. That's

01:48:42.845 --> 01:48:44.365
<v Speaker 1>That's what we expect. Yep.

01:48:45.005 --> 01:48:46.605
<v Speaker 0>Alright. Let's see.

01:48:47.165 --> 01:48:48.925
<v Speaker 0>So delete delete. I don't need to wait

01:48:48.925 --> 01:48:50.205
<v Speaker 0>for that. I'm just going to go straight

01:48:50.205 --> 01:48:52.500
<v Speaker 0>into describe. We should get a new ID

01:48:52.500 --> 01:48:53.059
<v Speaker 0>here.

01:48:53.619 --> 01:48:54.179
<v Speaker 0>FC.

01:48:55.699 --> 01:48:56.340
<v Speaker 0>And

01:48:57.139 --> 01:48:58.659
<v Speaker 1>it works. Oh yes.

01:49:00.179 --> 01:49:00.979
<v Speaker 1>Success.

01:49:01.300 --> 01:49:04.820
<v Speaker 0>We now have a mutating web hook admission

01:49:04.820 --> 01:49:05.699
<v Speaker 0>controller

01:49:05.699 --> 01:49:08.340
<v Speaker 0>making modifications to every pod

01:49:08.315 --> 01:49:10.235
<v Speaker 0>and in real time as they had our

01:49:10.235 --> 01:49:12.874
<v Speaker 0>Kubernetes cluster. That is awesome.

01:49:13.915 --> 01:49:16.874
<v Speaker 0>Yep. Not useful but very much awesome. And

01:49:18.715 --> 01:49:20.715
<v Speaker 0>I wonder if that sleep command is even

01:49:20.715 --> 01:49:22.690
<v Speaker 0>gonna work. It has. Right. Okay. It's quite

01:49:22.690 --> 01:49:24.530
<v Speaker 0>happy. NGINX is probably based on up into

01:49:24.530 --> 01:49:25.489
<v Speaker 0>anyway. So

01:49:25.890 --> 01:49:27.250
<v Speaker 0>awesome. Cool.

01:49:28.450 --> 01:49:29.730
<v Speaker 0>What do want to do then? Do you

01:49:29.730 --> 01:49:31.570
<v Speaker 0>want to pull in the Semver library and

01:49:31.570 --> 01:49:32.930
<v Speaker 0>see how that works? Do you want to

01:49:32.930 --> 01:49:35.250
<v Speaker 0>pause it here and resume another day? How

01:49:35.250 --> 01:49:35.730
<v Speaker 0>are you feeling?

01:49:36.925 --> 01:49:39.885
<v Speaker 1>Alright. So we've got ten more minutes till

01:49:39.885 --> 01:49:41.005
<v Speaker 1>the top of the hour and let's see

01:49:41.005 --> 01:49:43.325
<v Speaker 1>how quickly we can get the December

01:49:44.365 --> 01:49:46.364
<v Speaker 1>up and running. Alright. Take a look. So

01:49:47.165 --> 01:49:49.485
<v Speaker 1>there is if you pull up the

01:49:50.685 --> 01:49:51.325
<v Speaker 1>Chrome window,

01:49:51.829 --> 01:49:54.469
<v Speaker 1>sorry, browser window, and we see

01:49:54.710 --> 01:49:58.389
<v Speaker 1>the library I mentioned earlier is called mastermind

01:49:58.389 --> 01:49:59.669
<v Speaker 1>slash semver.

01:50:03.829 --> 01:50:04.949
<v Speaker 1>Let's give that a shot.

01:50:07.815 --> 01:50:09.574
<v Speaker 1>So, yeah, this is a library that allows

01:50:09.574 --> 01:50:10.294
<v Speaker 1>us to

01:50:10.855 --> 01:50:12.215
<v Speaker 1>essentially process

01:50:12.375 --> 01:50:13.655
<v Speaker 1>semantic versions.

01:50:15.335 --> 01:50:16.695
<v Speaker 1>And what we're gonna do is we're gonna

01:50:16.695 --> 01:50:18.375
<v Speaker 1>use that and call out to

01:50:19.940 --> 01:50:21.219
<v Speaker 1>I imagine we want to call out to

01:50:21.219 --> 01:50:23.860
<v Speaker 1>Docker Hub to see what tags are available

01:50:23.860 --> 01:50:25.460
<v Speaker 1>and see if we can do some sort

01:50:25.460 --> 01:50:25.939
<v Speaker 1>of

01:50:26.420 --> 01:50:27.219
<v Speaker 1>reconciling

01:50:27.780 --> 01:50:29.300
<v Speaker 1>with the two.

01:50:30.739 --> 01:50:32.980
<v Speaker 1>So let's try and get that running as

01:50:32.980 --> 01:50:34.635
<v Speaker 1>quickly as possible. Let's cheat,

01:50:35.355 --> 01:50:35.755
<v Speaker 0>right?

01:50:37.355 --> 01:50:39.515
<v Speaker 0>Because we don't need to reach the docker.

01:50:39.515 --> 01:50:40.875
<v Speaker 0>I mean we can definitely do that but

01:50:40.875 --> 01:50:41.995
<v Speaker 0>I don't think are we gonna be able

01:50:41.995 --> 01:50:43.275
<v Speaker 0>to make that in ten minutes? I I

01:50:43.275 --> 01:50:44.155
<v Speaker 0>don't think so.

01:50:45.035 --> 01:50:47.435
<v Speaker 1>Fair enough. I mean are you feeling brave

01:50:47.435 --> 01:50:49.160
<v Speaker 0>again? You're the one doing most of the

01:50:49.160 --> 01:50:50.760
<v Speaker 0>coding here. I was just gonna suggest that

01:50:50.760 --> 01:50:53.000
<v Speaker 0>we just provide an arbitrary list of versions

01:50:53.000 --> 01:50:54.680
<v Speaker 0>and have it work against it but I

01:50:54.680 --> 01:50:55.159
<v Speaker 0>will

01:50:55.560 --> 01:50:57.160
<v Speaker 0>I'll let you go. Yeah. Alright. Let let

01:50:57.160 --> 01:50:59.239
<v Speaker 1>let's go with that. Let's go with that.

01:50:59.560 --> 01:51:01.800
<v Speaker 1>Let let's make it easy for ourselves. I

01:51:01.355 --> 01:51:03.835
<v Speaker 1>think we've had enough difficulties as it is.

01:51:04.395 --> 01:51:05.195
<v Speaker 1>So yeah.

01:51:05.435 --> 01:51:07.675
<v Speaker 0>Well I think for me the important bit

01:51:07.675 --> 01:51:09.755
<v Speaker 0>is seeing how this amount of version thing

01:51:09.755 --> 01:51:11.915
<v Speaker 0>will work rather than you know, an HTTP

01:51:11.915 --> 01:51:13.594
<v Speaker 0>request at Docker Hub. I'm happy to you

01:51:13.594 --> 01:51:15.275
<v Speaker 0>know, we can do that offline or whatever

01:51:15.240 --> 01:51:15.800
<v Speaker 0>But

01:51:16.520 --> 01:51:17.160
<v Speaker 0>Yeah.

01:51:17.320 --> 01:51:18.840
<v Speaker 0>See. Let's just

01:51:18.920 --> 01:51:19.960
<v Speaker 0>make a go for it. Let's see what

01:51:19.960 --> 01:51:20.520
<v Speaker 0>happens.

01:51:21.800 --> 01:51:24.040
<v Speaker 1>If I just pull up the NGINX

01:51:24.200 --> 01:51:25.960
<v Speaker 1>versions on Docker Hub,

01:51:26.760 --> 01:51:29.005
<v Speaker 1>a few examples in there are actually valid

01:51:29.005 --> 01:51:29.724
<v Speaker 1>images

01:51:30.204 --> 01:51:31.804
<v Speaker 1>that are going to be pulled.

01:51:32.125 --> 01:51:33.004
<v Speaker 1>So we

01:51:33.485 --> 01:51:36.044
<v Speaker 1>have one dot 15 onwards.

01:51:37.005 --> 01:51:38.284
<v Speaker 1>One dot 15

01:51:39.244 --> 01:51:41.179
<v Speaker 0>one dot nineteen dot six.

01:51:42.060 --> 01:51:43.420
<v Speaker 1>Yeah. One dot

01:51:43.659 --> 01:51:45.340
<v Speaker 1>nineteen dot six.

01:51:46.860 --> 01:51:48.300
<v Speaker 0>One 18 zero.

01:51:50.940 --> 01:51:52.540
<v Speaker 0>And let's get one more just to give

01:51:52.540 --> 01:51:53.499
<v Speaker 0>us a bit of

01:51:53.900 --> 01:51:54.620
<v Speaker 0>wiggle room.

01:51:56.494 --> 01:51:57.934
<v Speaker 0>Let's go back a bit.

01:52:01.135 --> 01:52:02.574
<v Speaker 0>One seventeen four.

01:52:04.335 --> 01:52:05.855
<v Speaker 0>Hey, we've got plenty of options here. So

01:52:05.855 --> 01:52:07.614
<v Speaker 0>like we can set our constraints now. Yeah.

01:52:07.775 --> 01:52:08.094
<v Speaker 1>Exactly.

01:52:11.480 --> 01:52:13.480
<v Speaker 1>Cool, amazing. So what we're going to do

01:52:13.480 --> 01:52:14.199
<v Speaker 1>is

01:52:16.360 --> 01:52:17.400
<v Speaker 1>that should

01:52:17.800 --> 01:52:19.480
<v Speaker 1>be good enough. So what we're going to

01:52:19.480 --> 01:52:22.120
<v Speaker 1>do is we're going to take the image

01:52:22.120 --> 01:52:24.735
<v Speaker 1>tag that's come in, do some string manipulation

01:52:24.735 --> 01:52:27.135
<v Speaker 1>to get the constraints there,

01:52:27.695 --> 01:52:28.575
<v Speaker 1>and then

01:52:28.815 --> 01:52:29.695
<v Speaker 1>use that

01:52:30.255 --> 01:52:33.535
<v Speaker 1>to figure out what version is best.

01:52:34.970 --> 01:52:35.610
<v Speaker 1>So

01:52:36.170 --> 01:52:37.290
<v Speaker 1>a little bit

01:52:37.530 --> 01:52:39.130
<v Speaker 1>messy, but we're going to do all of

01:52:39.130 --> 01:52:41.210
<v Speaker 1>that in this particular for loop.

01:52:43.290 --> 01:52:44.090
<v Speaker 1>Now

01:52:44.490 --> 01:52:46.810
<v Speaker 1>what we want to do is,

01:52:47.930 --> 01:52:48.969
<v Speaker 1>let's see,

01:52:49.530 --> 01:52:51.825
<v Speaker 1>import the library first. That'll be quite good.

01:52:52.385 --> 01:52:55.345
<v Speaker 0>Yeah. And I'll prepare an example. So let's

01:52:55.345 --> 01:52:57.825
<v Speaker 0>assume we can satisfy

01:53:10.139 --> 01:53:11.420
<v Speaker 0>I guess we wanna Do you have a

01:53:11.420 --> 01:53:13.579
<v Speaker 1>terminal on your end? My terminal seems to

01:53:13.579 --> 01:53:14.139
<v Speaker 1>have

01:53:14.540 --> 01:53:16.860
<v Speaker 0>Alright. It's because it's running the logs.

01:53:17.340 --> 01:53:18.060
<v Speaker 1>I see.

01:53:18.965 --> 01:53:21.205
<v Speaker 1>Could you go get the

01:53:21.365 --> 01:53:22.245
<v Speaker 1>Semva package?

01:53:42.929 --> 01:53:45.650
<v Speaker 1>Cool. Amazing. So what we're gonna do is

01:53:45.650 --> 01:53:47.324
<v Speaker 1>we're gonna take our

01:53:48.445 --> 01:53:49.485
<v Speaker 1>image name,

01:53:49.805 --> 01:53:51.165
<v Speaker 1>which is going to be

01:53:51.325 --> 01:53:52.844
<v Speaker 1>container.

01:53:55.885 --> 01:53:56.845
<v Speaker 1>Yeah. Container

01:53:58.860 --> 01:53:59.900
<v Speaker 1>image.

01:54:00.940 --> 01:54:03.340
<v Speaker 1>I'm going spit it on the colon.

01:54:03.340 --> 01:54:05.180
<v Speaker 1>And we're going to want two parts.

01:54:05.500 --> 01:54:06.300
<v Speaker 1>And

01:54:07.020 --> 01:54:07.739
<v Speaker 1>the

01:54:08.060 --> 01:54:10.220
<v Speaker 1>image name is going to be on the

01:54:10.220 --> 01:54:10.620
<v Speaker 1>left.

01:54:11.755 --> 01:54:12.635
<v Speaker 1>It's

01:54:12.635 --> 01:54:13.755
<v Speaker 1>a bit on zero.

01:54:13.915 --> 01:54:14.875
<v Speaker 1>And the

01:54:15.195 --> 01:54:16.955
<v Speaker 1>version constraint

01:54:16.955 --> 01:54:19.755
<v Speaker 1>is going to be on the right.

01:54:21.595 --> 01:54:24.120
<v Speaker 1>And what we're going to do is we're

01:54:24.120 --> 01:54:25.160
<v Speaker 1>going to

01:54:26.600 --> 01:54:29.160
<v Speaker 0>I've copied an example actually from

01:54:29.720 --> 01:54:30.440
<v Speaker 0>there.

01:54:30.840 --> 01:54:32.920
<v Speaker 0>We'll use what they can already parse, so

01:54:32.920 --> 01:54:33.880
<v Speaker 0>we don't need to.

01:54:34.760 --> 01:54:35.480
<v Speaker 1>Amazing.

01:54:37.285 --> 01:54:39.764
<v Speaker 1>So that's going to be version constraint.

01:54:40.085 --> 01:54:42.645
<v Speaker 1>So this new constraint is going to give

01:54:42.645 --> 01:54:43.685
<v Speaker 1>us a

01:54:46.645 --> 01:54:48.244
<v Speaker 1>auto complete is still loading.

01:54:48.565 --> 01:54:51.125
<v Speaker 1>New constraint returns a constraints instance that a

01:54:51.125 --> 01:54:53.459
<v Speaker 1>version instance can be checked against. So essentially,

01:54:53.460 --> 01:54:54.739
<v Speaker 1>what we're doing is we're passing in the

01:54:54.739 --> 01:54:57.139
<v Speaker 1>range to the new constraint. And then we

01:54:57.139 --> 01:54:58.099
<v Speaker 1>will iterate

01:54:59.059 --> 01:55:01.139
<v Speaker 1>through the list of our versions and see

01:55:01.139 --> 01:55:03.059
<v Speaker 1>which ones satisfy.

01:55:05.059 --> 01:55:06.885
<v Speaker 1>Yeah, That's done.

01:55:08.565 --> 01:55:11.045
<v Speaker 1>So what we want to do is for

01:55:11.045 --> 01:55:14.084
<v Speaker 1>version in version range

01:55:14.324 --> 01:55:15.125
<v Speaker 1>versions.

01:55:19.449 --> 01:55:22.409
<v Speaker 1>More errors for now. Don't do this in

01:55:22.409 --> 01:55:23.369
<v Speaker 1>production, folks.

01:55:28.650 --> 01:55:29.929
<v Speaker 1>Test version

01:55:29.929 --> 01:55:31.204
<v Speaker 1>as a string.

01:55:31.764 --> 01:55:33.844
<v Speaker 1>What we're gonna do is

01:55:35.764 --> 01:55:37.364
<v Speaker 0>Do we need to look the versions? Does

01:55:37.364 --> 01:55:39.125
<v Speaker 0>that not take a list and return the

01:55:39.125 --> 01:55:40.645
<v Speaker 0>best one? Does that know how the library

01:55:40.645 --> 01:55:41.125
<v Speaker 0>works?

01:55:42.480 --> 01:55:45.040
<v Speaker 1>I don't think it provides a function for

01:55:45.040 --> 01:55:45.760
<v Speaker 1>that

01:55:47.040 --> 01:55:47.600
<v Speaker 1>version.

01:56:00.835 --> 01:56:02.995
<v Speaker 1>No. It wants you to iterate through them.

01:56:02.995 --> 01:56:04.594
<v Speaker 0>Alright. Okay. So

01:56:05.955 --> 01:56:08.034
<v Speaker 1>what we're going to do is send for

01:56:08.275 --> 01:56:09.474
<v Speaker 1>new version,

01:56:10.515 --> 01:56:11.635
<v Speaker 1>which is our version.

01:56:13.770 --> 01:56:15.210
<v Speaker 1>And what we're going to do is we're

01:56:15.210 --> 01:56:16.010
<v Speaker 1>going to say,

01:56:16.330 --> 01:56:16.969
<v Speaker 1>if

01:56:17.610 --> 01:56:18.410
<v Speaker 1>v

01:56:20.330 --> 01:56:22.570
<v Speaker 1>actually, if hook constraint

01:56:23.290 --> 01:56:24.090
<v Speaker 1>matches,

01:56:24.090 --> 01:56:26.025
<v Speaker 1>I think, is the name of the

01:56:29.305 --> 01:56:29.864
<v Speaker 1>of

01:56:30.185 --> 01:56:32.505
<v Speaker 1>the check. Oh, there we are. Yes, check.

01:56:32.505 --> 01:56:34.264
<v Speaker 1>So what this is saying is, does

01:56:35.465 --> 01:56:38.010
<v Speaker 1>our version in our version list match our

01:56:38.010 --> 01:56:39.290
<v Speaker 1>constraint?

01:56:40.890 --> 01:56:41.610
<v Speaker 1>V.

01:56:42.010 --> 01:56:45.130
<v Speaker 1>Then we're going to say best version equals

01:56:45.610 --> 01:56:46.330
<v Speaker 1>version.

01:56:52.405 --> 01:56:53.205
<v Speaker 1>So far

01:56:54.965 --> 01:56:55.925
<v Speaker 1>and then

01:56:56.165 --> 01:56:59.045
<v Speaker 1>over here, instead of using NGINX latest

01:56:59.605 --> 01:57:00.245
<v Speaker 1>Spring.

01:57:01.365 --> 01:57:02.005
<v Speaker 1>Spring.

01:57:02.245 --> 01:57:02.725
<v Speaker 1>F.

01:57:03.525 --> 01:57:04.005
<v Speaker 1>I

01:57:06.060 --> 01:57:07.180
<v Speaker 1>nginx

01:57:07.500 --> 01:57:08.300
<v Speaker 1>spring

01:57:08.460 --> 01:57:09.660
<v Speaker 1>best version.

01:57:10.860 --> 01:57:11.660
<v Speaker 1>Cool.

01:57:12.780 --> 01:57:15.100
<v Speaker 1>I think this should be what is required.

01:57:15.900 --> 01:57:18.300
<v Speaker 1>So what we're doing here is we're taking

01:57:19.785 --> 01:57:22.025
<v Speaker 1>the image name from Kubernetes as it's passed

01:57:22.025 --> 01:57:22.664
<v Speaker 1>in,

01:57:22.905 --> 01:57:24.585
<v Speaker 1>splitting at the semi colon

01:57:25.945 --> 01:57:27.864
<v Speaker 1>I'm sorry, at standard colon,

01:57:28.185 --> 01:57:30.344
<v Speaker 1>initializing our constraint from there.

01:57:31.705 --> 01:57:33.065
<v Speaker 1>Yeah. Thank you for that.

01:57:33.945 --> 01:57:36.570
<v Speaker 1>We're iterating through our version list,

01:57:37.050 --> 01:57:40.090
<v Speaker 1>checking which ones match the constraint. And the

01:57:40.090 --> 01:57:41.450
<v Speaker 1>one which is the

01:57:41.450 --> 01:57:44.489
<v Speaker 1>most latest, assuming that this is an ordered

01:57:44.730 --> 01:57:45.449
<v Speaker 1>list

01:57:45.530 --> 01:57:47.850
<v Speaker 1>that matches, will be put into the best

01:57:47.505 --> 01:57:48.224
<v Speaker 1>version

01:57:48.625 --> 01:57:51.104
<v Speaker 1>string variable. And then we're now interpolating

01:57:51.745 --> 01:57:53.025
<v Speaker 1>that into our value.

01:57:54.465 --> 01:57:56.145
<v Speaker 1>So let's

01:57:56.145 --> 01:57:57.905
<v Speaker 1>give this a shot. Do you think we

01:57:57.905 --> 01:57:58.945
<v Speaker 0>should very quickly

01:57:59.105 --> 01:58:01.505
<v Speaker 0>just not do anything if we get an

01:58:01.505 --> 01:58:01.824
<v Speaker 0>error?

01:58:04.170 --> 01:58:04.730
<v Speaker 1>Yeah.

01:58:05.050 --> 01:58:08.090
<v Speaker 1>We can probably just send an error out.

01:58:08.730 --> 01:58:09.370
<v Speaker 1>So

01:58:10.570 --> 01:58:12.490
<v Speaker 1>yeah, if you add one there.

01:58:13.930 --> 01:58:15.930
<v Speaker 0>I'm just thinking like if we wanna confirm

01:58:15.930 --> 01:58:16.810
<v Speaker 0>that this works.

01:58:18.635 --> 01:58:20.875
<v Speaker 0>I mean, we're about to redeploy this controller

01:58:20.875 --> 01:58:22.235
<v Speaker 0>which is already gonna

01:58:23.595 --> 01:58:25.355
<v Speaker 0>break it potentially.

01:58:25.515 --> 01:58:27.355
<v Speaker 0>No. Because we have the allowed failure. Okay.

01:58:27.355 --> 01:58:28.875
<v Speaker 0>Maybe maybe we'll be okay.

01:58:30.635 --> 01:58:31.035
<v Speaker 1>Oops.

01:58:34.730 --> 01:58:35.530
<v Speaker 0>Return.

01:58:35.770 --> 01:58:38.330
<v Speaker 0>Alright. Let's build this. Let's do it. Yeah.

01:58:38.330 --> 01:58:39.210
<v Speaker 1>We're gonna

01:58:42.490 --> 01:58:43.130
<v Speaker 0>happy?

01:58:43.930 --> 01:58:46.010
<v Speaker 1>Yeah. I think so. I just changed the

01:58:46.010 --> 01:58:49.105
<v Speaker 1>error to output it to standard out. I'm

01:58:49.105 --> 01:58:50.704
<v Speaker 1>sorry, output it to response.

01:58:51.105 --> 01:58:51.824
<v Speaker 0>Okay.

01:58:52.465 --> 01:58:54.065
<v Speaker 0>So we're gonna build this,

01:58:54.864 --> 01:58:55.745
<v Speaker 0>redeploy

01:58:55.745 --> 01:58:56.385
<v Speaker 0>it

01:58:56.784 --> 01:58:59.425
<v Speaker 0>and then in theory we're gonna try and

01:58:59.425 --> 01:59:02.090
<v Speaker 0>add our constraints to our debug container which

01:59:02.090 --> 01:59:04.890
<v Speaker 0>should be resolved for us. All with thirty

01:59:04.890 --> 01:59:06.090
<v Speaker 0>seconds left. If

01:59:09.210 --> 01:59:11.690
<v Speaker 1>this works first time around then that's it.

01:59:11.690 --> 01:59:14.635
<v Speaker 1>It's like mic drop off. Yeah. That's it.

01:59:14.635 --> 01:59:15.195
<v Speaker 0>Just

01:59:16.075 --> 01:59:18.555
<v Speaker 0>walk away with like job done. Mhmm. Yeah.

01:59:18.555 --> 01:59:19.675
<v Speaker 0>Very impressive.

01:59:21.755 --> 01:59:22.395
<v Speaker 0>Okay.

01:59:22.715 --> 01:59:23.675
<v Speaker 0>Delete

01:59:23.915 --> 01:59:25.435
<v Speaker 0>pod semantic.

01:59:28.320 --> 01:59:30.240
<v Speaker 0>So now we have a new version of

01:59:30.240 --> 01:59:33.440
<v Speaker 0>our mutating admission controller running

01:59:34.480 --> 01:59:35.360
<v Speaker 0>hopefully.

01:59:35.920 --> 01:59:36.640
<v Speaker 0>Yep.

01:59:37.360 --> 01:59:38.560
<v Speaker 0>So let's,

01:59:40.275 --> 01:59:42.595
<v Speaker 0>the reason I wanted this here is what

01:59:42.595 --> 01:59:44.995
<v Speaker 0>I was going to suggest is we have

01:59:44.995 --> 01:59:47.475
<v Speaker 0>this debug thing being deployed. Right? Let's take

01:59:47.475 --> 01:59:48.355
<v Speaker 0>a look at that,

01:59:48.915 --> 01:59:50.755
<v Speaker 0>which right now is just using this. There's

01:59:50.755 --> 01:59:52.275
<v Speaker 0>no colon. So I just wanted it to,

01:59:52.275 --> 01:59:53.635
<v Speaker 0>you know, it can't powers it just to

01:59:53.635 --> 01:59:54.035
<v Speaker 0>continue.

01:59:54.920 --> 01:59:56.760
<v Speaker 0>So now we can add

01:59:56.920 --> 01:59:58.840
<v Speaker 0>20.04

02:00:01.159 --> 02:00:03.800
<v Speaker 0>and that should still fill which means it

02:00:03.800 --> 02:00:05.719
<v Speaker 0>should just go untouched I would imagine.

02:00:06.360 --> 02:00:08.440
<v Speaker 0>Do you agree with that? Hopefully.

02:00:10.515 --> 02:00:11.235
<v Speaker 1>Possibly.

02:00:11.554 --> 02:00:13.875
<v Speaker 0>So we can describe our pod which is

02:00:13.875 --> 02:00:15.074
<v Speaker 0>this new one here

02:00:15.315 --> 02:00:16.914
<v Speaker 0>and it should be untouched.

02:00:18.915 --> 02:00:22.114
<v Speaker 0>Correct. Awesome. Yes. Correct. Now we want to

02:00:22.114 --> 02:00:25.635
<v Speaker 0>apply our magic syntax where we say NGINX

02:00:25.240 --> 02:00:25.880
<v Speaker 0>and

02:00:26.600 --> 02:00:29.880
<v Speaker 0>we're gonna say greater than 1.16

02:00:30.200 --> 02:00:32.600
<v Speaker 0>less than or equal to 1.17.

02:00:33.000 --> 02:00:34.920
<v Speaker 0>Which should require I think I need a

02:00:35.480 --> 02:00:36.120
<v Speaker 1>comma there.

02:00:38.695 --> 02:00:40.135
<v Speaker 0>No. We don't have a one sixteen. Okay.

02:00:40.135 --> 02:00:41.175
<v Speaker 0>I need to go up to one eighteen.

02:00:41.175 --> 02:00:43.335
<v Speaker 0>What should give us one seventeen four. So

02:00:43.575 --> 02:00:46.295
<v Speaker 1>Yep. You're gonna need a comma in your

02:00:46.855 --> 02:00:47.255
<v Speaker 1>yeah.

02:00:48.455 --> 02:00:49.175
<v Speaker 1>Between

02:00:49.975 --> 02:00:52.290
<v Speaker 1>so more than equal to one sixteen comma

02:00:52.290 --> 02:00:54.770
<v Speaker 1>less than equal to one eighteen.

02:00:55.250 --> 02:00:57.010
<v Speaker 0>That wasn't an example.

02:00:59.330 --> 02:01:00.930
<v Speaker 0>Yeah. You can just do Oh, actually, yeah.

02:01:00.930 --> 02:01:01.810
<v Speaker 1>Maybe you're right.

02:01:02.210 --> 02:01:02.850
<v Speaker 1>Okay.

02:01:04.690 --> 02:01:06.210
<v Speaker 0>That's right. That should work.

02:01:06.610 --> 02:01:08.874
<v Speaker 1>Right. I've never been so nervous.

02:01:10.635 --> 02:01:12.875
<v Speaker 0>Container creating. Alright.

02:01:12.875 --> 02:01:14.795
<v Speaker 0>Okay. Let's see what happened.

02:01:19.034 --> 02:01:21.355
<v Speaker 0>Okay. So we didn't parse this.

02:01:23.940 --> 02:01:25.940
<v Speaker 1>Could you try with the with the comma?

02:01:27.140 --> 02:01:28.579
<v Speaker 0>So you want the comma here?

02:01:29.780 --> 02:01:32.180
<v Speaker 1>Yeah. And also could you remove the space

02:01:32.180 --> 02:01:34.420
<v Speaker 1>after the after the colon?

02:01:36.514 --> 02:01:37.794
<v Speaker 0>You happy with that? Yeah.

02:01:38.675 --> 02:01:39.554
<v Speaker 1>Let's let's try that.

02:01:51.690 --> 02:01:53.450
<v Speaker 0>Okay. I think we're gonna need to quickly

02:01:53.450 --> 02:01:54.889
<v Speaker 0>pull out some logs.

02:01:56.490 --> 02:01:58.170
<v Speaker 0>Yeah. Nothing to replace.

02:01:58.330 --> 02:01:59.530
<v Speaker 0>Let's try

02:01:59.690 --> 02:02:00.330
<v Speaker 0>semantic.

02:02:07.745 --> 02:02:09.185
<v Speaker 0>I don't think we have much going on

02:02:09.185 --> 02:02:10.625
<v Speaker 0>there yet, do we? Okay.

02:02:12.545 --> 02:02:14.065
<v Speaker 0>You got five minutes to debug? Will we

02:02:14.065 --> 02:02:15.745
<v Speaker 0>go for it? Yes.

02:02:16.305 --> 02:02:18.065
<v Speaker 1>So is our semantic

02:02:18.305 --> 02:02:21.025
<v Speaker 1>program running

02:02:19.880 --> 02:02:20.760
<v Speaker 1>properly?

02:02:24.040 --> 02:02:26.760
<v Speaker 1>As in, is mutating webhook running properly?

02:02:27.080 --> 02:02:28.840
<v Speaker 1>Because that looks wrong to me

02:02:29.800 --> 02:02:32.040
<v Speaker 1>when you put in the logs of the

02:02:32.040 --> 02:02:32.520
<v Speaker 1>semantic.

02:02:32.925 --> 02:02:35.324
<v Speaker 0>Wonder if it's running engine neck. Yeah.

02:02:36.844 --> 02:02:38.604
<v Speaker 0>Describe. That would be terrible.

02:02:42.284 --> 02:02:43.004
<v Speaker 0>Yep.

02:02:45.405 --> 02:02:46.204
<v Speaker 0>Oops.

02:02:46.364 --> 02:02:48.605
<v Speaker 0>Okay. So we should be able to delete

02:02:48.270 --> 02:02:49.310
<v Speaker 0>that now.

02:02:55.390 --> 02:02:58.110
<v Speaker 0>Yeah. The latest version, no.

02:02:58.670 --> 02:03:00.830
<v Speaker 1>So I actually did so this will work

02:03:00.830 --> 02:03:03.230
<v Speaker 1>but for a reason that is that's quite

02:03:03.230 --> 02:03:06.085
<v Speaker 1>interesting. The webhook will fail because, you know,

02:03:06.085 --> 02:03:07.844
<v Speaker 1>NGINX is providing garbage.

02:03:07.925 --> 02:03:09.045
<v Speaker 1>And what it will do is it will

02:03:09.045 --> 02:03:11.205
<v Speaker 1>just fall back and ignore the error,

02:03:12.325 --> 02:03:14.565
<v Speaker 1>whereas previously the semantic hook was

02:03:15.445 --> 02:03:16.325
<v Speaker 1>correctly functioning.

02:03:17.770 --> 02:03:19.850
<v Speaker 1>So if you describe the semantic pod now,

02:03:19.850 --> 02:03:20.570
<v Speaker 1>it will

02:03:24.330 --> 02:03:26.249
<v Speaker 1>it should be running with the correct thing.

02:03:26.810 --> 02:03:28.810
<v Speaker 0>I think that's pulling a new NGINX. I

02:03:28.810 --> 02:03:29.449
<v Speaker 0>think it's worked.

02:03:31.265 --> 02:03:33.185
<v Speaker 1>Can you describe it? It has.

02:03:33.425 --> 02:03:34.545
<v Speaker 1>Oh, yes.

02:03:36.545 --> 02:03:37.265
<v Speaker 0>And

02:03:39.105 --> 02:03:40.385
<v Speaker 0>it resolved.

02:03:42.065 --> 02:03:42.705
<v Speaker 1>Success.

02:03:44.305 --> 02:03:44.705
<v Speaker 1>Amazing.

02:03:48.370 --> 02:03:49.330
<v Speaker 0>That Siri celebrating?

02:03:49.810 --> 02:03:51.250
<v Speaker 0>That is Siri celebrating

02:03:51.650 --> 02:03:55.489
<v Speaker 1>with us. Alright. That was awesome.

02:03:55.490 --> 02:03:56.530
<v Speaker 0>So you know,

02:03:57.170 --> 02:03:58.770
<v Speaker 0>let's talk about what the next steps are.

02:03:58.770 --> 02:04:01.394
<v Speaker 0>Let's finish up. Thank you very much for

02:04:01.715 --> 02:04:03.954
<v Speaker 0>pretty much writing this entire thing and that

02:04:03.954 --> 02:04:05.395
<v Speaker 0>was really cool to see that from start

02:04:05.395 --> 02:04:06.195
<v Speaker 0>to finish.

02:04:06.675 --> 02:04:08.755
<v Speaker 0>So let's assume I really want this to

02:04:08.755 --> 02:04:10.275
<v Speaker 0>be a thing, right? So we wanna take

02:04:10.275 --> 02:04:12.275
<v Speaker 0>this code, we wanna productionize obviously we should

02:04:12.275 --> 02:04:14.675
<v Speaker 0>add tests and how do we

02:04:15.810 --> 02:04:18.050
<v Speaker 0>ensure that we don't run into that problem

02:04:18.050 --> 02:04:19.250
<v Speaker 0>we have

02:04:19.810 --> 02:04:21.890
<v Speaker 0>with the semantic controller. I guess we have

02:04:21.890 --> 02:04:23.090
<v Speaker 0>to build checks

02:04:23.170 --> 02:04:26.210
<v Speaker 0>and constraints into this loop here, right? Yeah,

02:04:26.210 --> 02:04:27.170
<v Speaker 1>exactly. So

02:04:27.490 --> 02:04:30.930
<v Speaker 1>the within the mutating webhook in Kubernetes itself,

02:04:31.865 --> 02:04:34.265
<v Speaker 1>you only have namespace level

02:04:35.465 --> 02:04:36.985
<v Speaker 1>constraints

02:04:36.985 --> 02:04:38.185
<v Speaker 1>being added. So

02:04:38.665 --> 02:04:41.305
<v Speaker 1>saying, don't call this webhook if the namespace

02:04:41.945 --> 02:04:44.985
<v Speaker 1>matches these particular labels. So for example, we

02:04:45.625 --> 02:04:47.469
<v Speaker 1>could add constraints that say, don't run this

02:04:47.469 --> 02:04:48.510
<v Speaker 1>for cube system.

02:04:48.909 --> 02:04:51.310
<v Speaker 1>And we could put the semantic program itself

02:04:51.310 --> 02:04:53.310
<v Speaker 1>in its own namespace, and also say, don't

02:04:53.310 --> 02:04:54.269
<v Speaker 1>run this if

02:04:54.830 --> 02:04:57.869
<v Speaker 1>in these particular namespaces, or have these labels,

02:04:57.869 --> 02:04:58.270
<v Speaker 1>or whatever.

02:04:59.535 --> 02:05:02.815
<v Speaker 1>We will probably want to add checks within

02:05:02.815 --> 02:05:04.335
<v Speaker 1>this program itself

02:05:05.535 --> 02:05:06.975
<v Speaker 1>to state that

02:05:07.215 --> 02:05:10.015
<v Speaker 1>if the version doesn't look like a constraint

02:05:10.015 --> 02:05:10.815
<v Speaker 1>range,

02:05:10.815 --> 02:05:12.895
<v Speaker 1>then just continue onwards. Like, be graceful

02:05:13.800 --> 02:05:16.520
<v Speaker 1>in that respect. And yeah, like adding tests

02:05:16.520 --> 02:05:18.199
<v Speaker 1>and stuff like that.

02:05:18.760 --> 02:05:20.040
<v Speaker 1>The good thing about this is that this

02:05:20.040 --> 02:05:20.999
<v Speaker 1>is a standard

02:05:21.480 --> 02:05:22.360
<v Speaker 1>Kubernetes

02:05:22.360 --> 02:05:24.040
<v Speaker 1>API program. So there's no reason why you

02:05:24.040 --> 02:05:26.119
<v Speaker 1>can't generate some mocks

02:05:26.360 --> 02:05:26.760
<v Speaker 1>and

02:05:27.985 --> 02:05:29.985
<v Speaker 1>interject them as like a HTTP,

02:05:29.985 --> 02:05:32.385
<v Speaker 1>using HTTP mocking library in Go,

02:05:33.905 --> 02:05:35.905
<v Speaker 1>yeah, you just pass these objects across. It's

02:05:35.905 --> 02:05:37.825
<v Speaker 1>just JSON at the end of the day.

02:05:37.825 --> 02:05:39.745
<v Speaker 1>You don't need any sort of Kubernetes

02:05:39.745 --> 02:05:41.825
<v Speaker 1>framework or anything like that to test this,

02:05:43.290 --> 02:05:45.050
<v Speaker 1>which is great. Nice.

02:05:45.449 --> 02:05:47.369
<v Speaker 0>Because we are operating on a pod level

02:05:47.369 --> 02:05:50.329
<v Speaker 0>as well, we'd probably want to cache those

02:05:50.570 --> 02:05:53.130
<v Speaker 0>resolutions I guess and memory

02:05:53.130 --> 02:05:54.809
<v Speaker 0>or even on disk somewhere because

02:05:55.495 --> 02:05:58.135
<v Speaker 0>as the pods are moved around or killed

02:05:58.135 --> 02:05:59.655
<v Speaker 0>or whatever, we don't want it to resolve

02:05:59.655 --> 02:06:02.135
<v Speaker 0>new versions for some pods and older versions

02:06:02.135 --> 02:06:04.695
<v Speaker 0>for other pods. We still got a few

02:06:04.695 --> 02:06:06.855
<v Speaker 0>things here that just make this a bit

02:06:06.855 --> 02:06:09.530
<v Speaker 0>more feasible but excited. Yeah. Very, very excited.

02:06:10.250 --> 02:06:12.170
<v Speaker 1>It it's also interesting because we may want

02:06:12.170 --> 02:06:13.770
<v Speaker 1>to want this to run on a replica

02:06:13.770 --> 02:06:14.570
<v Speaker 1>set level

02:06:14.970 --> 02:06:17.210
<v Speaker 1>instead of a pod level. So imagine that

02:06:17.210 --> 02:06:18.170
<v Speaker 1>you are

02:06:18.570 --> 02:06:20.890
<v Speaker 1>rolling out a a version

02:06:20.890 --> 02:06:22.705
<v Speaker 1>of your system, even if it is a

02:06:22.705 --> 02:06:24.785
<v Speaker 1>minor version, you probably don't want an upgrade

02:06:24.785 --> 02:06:25.665
<v Speaker 1>to be happening.

02:06:26.305 --> 02:06:28.545
<v Speaker 1>Like just because a node died, for example,

02:06:29.105 --> 02:06:31.105
<v Speaker 1>we might want to say, Okay, when you're

02:06:31.105 --> 02:06:33.105
<v Speaker 1>ready to roll out a new replica set

02:06:33.185 --> 02:06:34.065
<v Speaker 1>and you

02:06:34.945 --> 02:06:36.145
<v Speaker 1>do the kubectl

02:06:36.910 --> 02:06:38.190
<v Speaker 1>rollout restart,

02:06:38.510 --> 02:06:41.150
<v Speaker 1>that's the time it decides, or maybe I

02:06:41.150 --> 02:06:43.550
<v Speaker 1>should consider if a new version is available

02:06:43.550 --> 02:06:45.710
<v Speaker 1>that satisfies the constraints. Because then at least

02:06:45.710 --> 02:06:46.989
<v Speaker 1>it's human controllable.

02:06:47.150 --> 02:06:49.470
<v Speaker 1>At a pod level, it's probably too granular.

02:06:50.515 --> 02:06:51.235
<v Speaker 0>Yeah.

02:06:51.795 --> 02:06:52.915
<v Speaker 0>Awesome. Well,

02:06:53.555 --> 02:06:56.355
<v Speaker 0>I will push this code up just as

02:06:56.355 --> 02:06:58.115
<v Speaker 0>reference for anyone that has been watching and

02:06:58.115 --> 02:07:00.275
<v Speaker 0>playing along with us. I will speak to

02:07:00.275 --> 02:07:02.195
<v Speaker 0>you afterwards. We'll work out how to clean

02:07:02.195 --> 02:07:04.195
<v Speaker 0>this up, make a few tweaks hopefully publish

02:07:04.195 --> 02:07:06.470
<v Speaker 0>it for people to consume and test out.

02:07:06.710 --> 02:07:09.510
<v Speaker 0>Happy to see my world idea actually working.

02:07:09.750 --> 02:07:11.670
<v Speaker 0>Thank you so much for just being able

02:07:11.670 --> 02:07:13.430
<v Speaker 0>to explain everything that we were doing as

02:07:13.430 --> 02:07:15.350
<v Speaker 0>we go so well and for churning out

02:07:15.590 --> 02:07:17.110
<v Speaker 0>all of those code debugging

02:07:17.325 --> 02:07:19.565
<v Speaker 0>certificate nonsense everything there.

02:07:20.125 --> 02:07:21.645
<v Speaker 0>I think that was really valuable for me.

02:07:21.645 --> 02:07:23.165
<v Speaker 0>I'm sure it was very valuable for others.

02:07:23.165 --> 02:07:24.445
<v Speaker 0>Thank you very much for that.

02:07:24.925 --> 02:07:27.005
<v Speaker 1>Yeah, thank you everyone. No, this was was

02:07:27.005 --> 02:07:28.045
<v Speaker 1>really really fun.

02:07:28.765 --> 02:07:30.845
<v Speaker 1>Yeah and I hope this is useful. It's

02:07:30.845 --> 02:07:31.805
<v Speaker 1>a fantastic idea

02:07:32.540 --> 02:07:34.220
<v Speaker 1>and I really hope that we can actually

02:07:34.220 --> 02:07:36.860
<v Speaker 1>turn this into a proper plug in that

02:07:36.860 --> 02:07:37.820
<v Speaker 1>people

02:07:37.900 --> 02:07:40.860
<v Speaker 1>will use. Yeah definitely. Watch the space is

02:07:40.860 --> 02:07:43.820
<v Speaker 0>coming soon definitely. Yeah coming soon. Coming soon

02:07:43.820 --> 02:07:45.579
<v Speaker 1>to a Kubernetes cluster near you.

02:07:46.060 --> 02:07:48.594
<v Speaker 0>Alright have a great day again. Thank you

02:07:48.594 --> 02:07:50.514
<v Speaker 0>for allocating that extra time. I know we

02:07:50.514 --> 02:07:52.114
<v Speaker 0>went over and I'll speak to you again

02:07:52.114 --> 02:07:54.594
<v Speaker 0>soon and goodbye. Thanks. Yeah. Bye everyone.
