WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 79b1f544-4e3d-4411-92e4-09b3d15d4406
Created: 2025-04-29T21:47:57.315Z
Duration: 4724.9985
Channels: 1

00:01:23.090 --> 00:01:26.369
<v Speaker 0>Hello, and welcome to today's episode. Today, are

00:01:26.369 --> 00:01:28.130
<v Speaker 0>taking a look at Crossplane,

00:01:28.130 --> 00:01:29.890
<v Speaker 0>a tool for managing infrastructure

00:01:29.890 --> 00:01:31.409
<v Speaker 0>using the Kubernetes API.

00:01:32.175 --> 00:01:34.495
<v Speaker 0>We have some familiar faces joining us today.

00:01:34.495 --> 00:01:36.815
<v Speaker 0>We have Dan and Marcus.

00:01:36.815 --> 00:01:38.335
<v Speaker 0>Welcome to the stream again.

00:01:38.975 --> 00:01:41.215
<v Speaker 1>Thanks for having us on. No. I'm I'm

00:01:41.215 --> 00:01:43.295
<v Speaker 0>very excited. We've we've tried to find a

00:01:43.295 --> 00:01:44.510
<v Speaker 0>date for the team for a little while

00:01:44.510 --> 00:01:46.190
<v Speaker 0>now, and I'm I'm just glad that we're

00:01:46.190 --> 00:01:47.710
<v Speaker 0>actually getting to sit down and play with

00:01:47.710 --> 00:01:49.470
<v Speaker 0>this stuff together. It's gonna be awesome. Sure.

00:01:49.470 --> 00:01:51.630
<v Speaker 1>I think I think the the intro is

00:01:51.630 --> 00:01:53.790
<v Speaker 1>upgraded maybe since last time I was on

00:01:53.790 --> 00:01:55.070
<v Speaker 1>here. That was pretty cool.

00:01:55.790 --> 00:01:57.390
<v Speaker 0>Yeah. I mean, it's

00:01:57.925 --> 00:01:59.685
<v Speaker 0>it's getting a bit old for me now.

00:01:59.685 --> 00:02:00.725
<v Speaker 0>I see it too much.

00:02:01.365 --> 00:02:04.085
<v Speaker 1>Yeah. I bet. But I I'm I'm happy

00:02:04.085 --> 00:02:05.925
<v Speaker 0>with it. And at the very least, it

00:02:05.925 --> 00:02:07.525
<v Speaker 0>gives me an opportunity to click the buttons

00:02:07.525 --> 00:02:08.965
<v Speaker 0>that I need to click over here. So,

00:02:08.965 --> 00:02:11.125
<v Speaker 0>you know, to keep some mystery around the

00:02:11.125 --> 00:02:11.925
<v Speaker 0>show. But Right.

00:02:13.880 --> 00:02:15.800
<v Speaker 0>So I think what we should really do

00:02:15.800 --> 00:02:17.800
<v Speaker 0>is just start

00:02:17.800 --> 00:02:18.680
<v Speaker 0>with the

00:02:19.000 --> 00:02:21.240
<v Speaker 0>what is Crossplane?

00:02:22.520 --> 00:02:23.160
<v Speaker 1>Cool.

00:02:23.480 --> 00:02:25.240
<v Speaker 1>Well, I'll I'll take that, and then, Marcus,

00:02:25.240 --> 00:02:27.800
<v Speaker 1>you can just chime in wherever you see

00:02:27.800 --> 00:02:28.120
<v Speaker 1>fit.

00:02:28.965 --> 00:02:31.924
<v Speaker 1>But, essentially, it is, first and foremost, a

00:02:31.924 --> 00:02:33.605
<v Speaker 1>way to provision infrastructure

00:02:33.924 --> 00:02:35.845
<v Speaker 1>using the Kubernetes API.

00:02:36.245 --> 00:02:36.885
<v Speaker 1>So

00:02:37.125 --> 00:02:40.004
<v Speaker 1>most people come to Crossplane

00:02:40.004 --> 00:02:40.885
<v Speaker 1>initially

00:02:41.110 --> 00:02:42.710
<v Speaker 1>because they'd like to

00:02:42.950 --> 00:02:46.310
<v Speaker 1>provision infrastructure on cloud providers or on, you

00:02:46.310 --> 00:02:48.870
<v Speaker 1>know, any sort of hosted infrastructure provider

00:02:49.349 --> 00:02:51.590
<v Speaker 1>from the same API that they use to

00:02:51.590 --> 00:02:53.190
<v Speaker 1>actually deploy their workloads and that sort of

00:02:53.190 --> 00:02:54.310
<v Speaker 1>thing, and they'd like to be able to

00:02:54.310 --> 00:02:55.910
<v Speaker 1>connect them up easily and that sort of

00:02:55.910 --> 00:02:55.989
<v Speaker 1>thing.

00:02:56.834 --> 00:03:00.114
<v Speaker 1>So, generally, we'll see folks compare Crossplane to

00:03:00.114 --> 00:03:02.515
<v Speaker 1>tools like Terraform or Pulumi or things like

00:03:02.515 --> 00:03:02.995
<v Speaker 1>that.

00:03:04.435 --> 00:03:06.674
<v Speaker 1>But it's a bit different for a number

00:03:06.674 --> 00:03:07.395
<v Speaker 1>of reasons.

00:03:07.875 --> 00:03:10.355
<v Speaker 1>And the first being I think Marcus and

00:03:10.355 --> 00:03:12.090
<v Speaker 1>me just switched positions there.

00:03:13.530 --> 00:03:16.409
<v Speaker 1>The first being that it's running as as

00:03:16.489 --> 00:03:18.409
<v Speaker 1>well, the different components of it are running

00:03:18.409 --> 00:03:21.290
<v Speaker 1>as Kubernetes operators. Right? So they're constantly reconciling

00:03:21.290 --> 00:03:24.250
<v Speaker 1>your state as opposed to traditional infrastructure as

00:03:24.250 --> 00:03:26.295
<v Speaker 1>code tools where it's just kind of like

00:03:26.295 --> 00:03:28.055
<v Speaker 1>a one shot, you know, and then when

00:03:28.055 --> 00:03:30.135
<v Speaker 1>it's done, it lets you know. And then

00:03:30.135 --> 00:03:33.095
<v Speaker 1>it continues as the the provider sees fit.

00:03:33.095 --> 00:03:34.935
<v Speaker 1>Crossplane, on the other hand, is going to

00:03:34.935 --> 00:03:37.095
<v Speaker 1>continuously reconcile your infrastructure.

00:03:37.575 --> 00:03:40.220
<v Speaker 1>So a lot of times, we'll demo someone

00:03:40.220 --> 00:03:42.380
<v Speaker 1>provisioning, like, a database or something like that,

00:03:42.380 --> 00:03:43.980
<v Speaker 1>and someone going in and modifying part of

00:03:43.980 --> 00:03:45.500
<v Speaker 1>it and then seeing it brought back to

00:03:45.500 --> 00:03:48.220
<v Speaker 1>the desired state as put forth in the

00:03:48.220 --> 00:03:49.420
<v Speaker 1>Kubernetes cluster.

00:03:49.660 --> 00:03:51.500
<v Speaker 1>So that's definitely kind of, like, the initial

00:03:51.500 --> 00:03:53.875
<v Speaker 1>intro. It's usually pretty easy for folks to

00:03:53.875 --> 00:03:54.515
<v Speaker 1>understand

00:03:54.835 --> 00:03:57.235
<v Speaker 1>as well, and it provides value to people,

00:03:57.635 --> 00:03:58.435
<v Speaker 1>which is great.

00:03:58.835 --> 00:04:01.635
<v Speaker 1>On top of that, Crossplane itself, all all

00:04:01.635 --> 00:04:03.555
<v Speaker 1>of the kind of provisioning of managed services

00:04:03.555 --> 00:04:05.795
<v Speaker 1>is kind of in a plug in model,

00:04:05.795 --> 00:04:07.395
<v Speaker 1>which we'll see in a little bit with

00:04:07.395 --> 00:04:08.435
<v Speaker 1>the Equinix metal

00:04:09.030 --> 00:04:10.870
<v Speaker 1>provider that we're gonna look at today.

00:04:11.830 --> 00:04:13.990
<v Speaker 1>But, you know, there's different providers for for

00:04:13.990 --> 00:04:16.630
<v Speaker 1>all kinds of different infrastructure hosting platforms.

00:04:17.589 --> 00:04:19.589
<v Speaker 1>And then the core part of Crossplane

00:04:19.589 --> 00:04:22.710
<v Speaker 1>is essentially a package manager, which allows you

00:04:22.710 --> 00:04:23.430
<v Speaker 1>to install

00:04:24.385 --> 00:04:26.385
<v Speaker 1>different types of packages, one of them being

00:04:26.385 --> 00:04:28.705
<v Speaker 1>providers. So after you install Crossplane, you can

00:04:28.705 --> 00:04:31.745
<v Speaker 1>say, you know, add GCP support, please, and

00:04:31.745 --> 00:04:33.585
<v Speaker 1>it'll bring the CRDs and controllers and that

00:04:33.585 --> 00:04:34.305
<v Speaker 1>sort of thing.

00:04:34.625 --> 00:04:35.585
<v Speaker 1>And the other

00:04:35.985 --> 00:04:37.185
<v Speaker 1>being composition,

00:04:37.440 --> 00:04:39.040
<v Speaker 1>which is where you take all of these

00:04:39.040 --> 00:04:40.560
<v Speaker 1>different managed resources,

00:04:40.880 --> 00:04:43.920
<v Speaker 1>these granular things that represent actual APIs on

00:04:43.920 --> 00:04:46.160
<v Speaker 1>a cloud provider, and you compose them together

00:04:46.160 --> 00:04:47.680
<v Speaker 1>into abstractions

00:04:47.680 --> 00:04:50.080
<v Speaker 1>for, you know, developers within your organization to

00:04:50.080 --> 00:04:50.640
<v Speaker 1>interact with.

00:04:51.324 --> 00:04:53.004
<v Speaker 1>And then you can package those up in

00:04:53.004 --> 00:04:55.565
<v Speaker 1>a separate kind of package, call it configuration,

00:04:55.565 --> 00:04:56.685
<v Speaker 1>and install those.

00:04:57.004 --> 00:04:59.324
<v Speaker 1>And what you get is kind of a

00:04:59.324 --> 00:05:01.565
<v Speaker 1>a platform as a service that you're defining

00:05:01.565 --> 00:05:02.685
<v Speaker 1>the abstractions yourself.

00:05:03.620 --> 00:05:05.700
<v Speaker 1>So today, we'll look at kind of, like,

00:05:05.700 --> 00:05:09.620
<v Speaker 1>the the maturation process of using Crossplane. So

00:05:09.620 --> 00:05:11.620
<v Speaker 1>starting off with, you know, maybe just looking

00:05:11.620 --> 00:05:14.900
<v Speaker 1>at provisioning a device on Equinix metal and

00:05:14.900 --> 00:05:15.460
<v Speaker 1>then

00:05:15.860 --> 00:05:17.975
<v Speaker 1>moving towards, like, packaging that up and being

00:05:17.975 --> 00:05:21.095
<v Speaker 1>able to reproduce your platform across Kubernetes clusters

00:05:21.095 --> 00:05:22.375
<v Speaker 1>and that sort of thing.

00:05:23.975 --> 00:05:26.215
<v Speaker 0>Nice. So, I mean, it it sounds really

00:05:26.215 --> 00:05:28.455
<v Speaker 0>cool. I'm looking forward to this. Like, I

00:05:28.455 --> 00:05:30.295
<v Speaker 0>guess we have the ability to represent all

00:05:30.295 --> 00:05:33.930
<v Speaker 0>of these infrastructure components using Kubernetes CRDs.

00:05:33.930 --> 00:05:35.610
<v Speaker 0>And I guess the the the really cool

00:05:35.610 --> 00:05:36.970
<v Speaker 0>side effect of that is I can now

00:05:36.970 --> 00:05:38.330
<v Speaker 0>get up to my infrastructure

00:05:38.650 --> 00:05:41.290
<v Speaker 0>by having something continually apply those CRDs in

00:05:41.290 --> 00:05:43.450
<v Speaker 0>my cluster, and then the Crossplane controllers just

00:05:43.450 --> 00:05:45.290
<v Speaker 0>go and make the world happen. That's kinda

00:05:45.290 --> 00:05:47.555
<v Speaker 0>what we're looking to do here. Right? Right.

00:05:47.555 --> 00:05:49.235
<v Speaker 1>Yeah. Very very declarative.

00:05:49.235 --> 00:05:51.875
<v Speaker 1>And another thing just kind of, like, going

00:05:51.875 --> 00:05:53.875
<v Speaker 1>along with that is, you know, standardization on

00:05:53.875 --> 00:05:56.115
<v Speaker 1>the Kubernetes API gives you things like GitOps,

00:05:56.115 --> 00:05:57.795
<v Speaker 1>but also gives you things like policy.

00:05:58.115 --> 00:05:59.715
<v Speaker 1>So one of the things we really love

00:05:59.715 --> 00:06:03.290
<v Speaker 1>is showing off using Crossplane with Open Policy

00:06:03.290 --> 00:06:05.530
<v Speaker 1>Agent, you know, when you're writing granular rules

00:06:05.530 --> 00:06:08.810
<v Speaker 1>that apply to CRDs that are created. And

00:06:08.810 --> 00:06:10.810
<v Speaker 1>so you can say something like, you know,

00:06:10.810 --> 00:06:12.810
<v Speaker 1>don't let anyone create a database

00:06:13.050 --> 00:06:15.530
<v Speaker 1>that's larger than 20 gigs or something like

00:06:15.530 --> 00:06:17.055
<v Speaker 1>that. And you can write these kind of,

00:06:17.055 --> 00:06:19.295
<v Speaker 1>like, arbitrary rules that apply to any type

00:06:19.295 --> 00:06:22.015
<v Speaker 1>of infrastructure, especially when you write abstractions. Right?

00:06:22.015 --> 00:06:24.015
<v Speaker 1>So if you have a database abstraction,

00:06:24.255 --> 00:06:26.895
<v Speaker 1>and behind that, you have Cloud SQL, RDS,

00:06:26.895 --> 00:06:27.935
<v Speaker 1>Azure database,

00:06:28.370 --> 00:06:29.090
<v Speaker 1>whatever.

00:06:29.810 --> 00:06:32.210
<v Speaker 1>You can make a policy for that abstraction,

00:06:32.370 --> 00:06:34.370
<v Speaker 1>and then everything flows through that and you

00:06:34.370 --> 00:06:36.850
<v Speaker 1>can kind of, you know, put barriers or

00:06:36.850 --> 00:06:39.330
<v Speaker 1>firewalls, if you will, for actually creating infrastructure

00:06:39.330 --> 00:06:40.210
<v Speaker 1>with different policies.

00:06:41.914 --> 00:06:43.435
<v Speaker 0>Yeah. I mean, I'm gonna be honest. I

00:06:43.435 --> 00:06:45.514
<v Speaker 0>often turn a blind eye to policy, our

00:06:45.514 --> 00:06:47.914
<v Speaker 0>back end security, and I know that that

00:06:47.914 --> 00:06:49.435
<v Speaker 0>is is not the way to be doing

00:06:49.435 --> 00:06:51.354
<v Speaker 0>it. I'm looking forward to learning today.

00:06:52.490 --> 00:06:54.090
<v Speaker 1>Well, I mean, if if you have the

00:06:54.090 --> 00:06:56.410
<v Speaker 1>the privilege of not having to worry about

00:06:56.410 --> 00:06:58.570
<v Speaker 1>it, then I'd say just keep rocking with

00:06:58.570 --> 00:07:00.410
<v Speaker 1>that. That sounds pretty good to me. Oh,

00:07:00.410 --> 00:07:02.170
<v Speaker 0>yeah. I'm really lucky that all I need

00:07:02.170 --> 00:07:03.370
<v Speaker 0>to do is spend things up for a

00:07:03.370 --> 00:07:05.530
<v Speaker 0>short period of time and go look at

00:07:04.905 --> 00:07:06.905
<v Speaker 0>cool and then disappear and shut it back

00:07:06.905 --> 00:07:09.945
<v Speaker 0>down again. Like Right. So but

00:07:10.264 --> 00:07:12.265
<v Speaker 0>of course, security is really important.

00:07:12.585 --> 00:07:14.345
<v Speaker 0>And I definitely use seccomp every week now.

00:07:14.345 --> 00:07:15.065
<v Speaker 0>I promise.

00:07:15.225 --> 00:07:15.865
<v Speaker 0>So

00:07:16.825 --> 00:07:18.905
<v Speaker 0>let me pop up my screen.

00:07:21.270 --> 00:07:23.430
<v Speaker 1>Marcus, did you wanna add anything to to

00:07:23.430 --> 00:07:25.509
<v Speaker 1>that description? You obviously have some context around

00:07:25.509 --> 00:07:28.469
<v Speaker 1>Crossplane as well. Yeah. Yeah. And I also

00:07:28.469 --> 00:07:29.270
<v Speaker 2>connected

00:07:29.509 --> 00:07:31.430
<v Speaker 2>I disconnected from a VPN, which is why

00:07:31.430 --> 00:07:33.189
<v Speaker 2>I switched Windows with you for a moment.

00:07:35.085 --> 00:07:36.765
<v Speaker 2>So, yeah, I I think what I'd add

00:07:36.765 --> 00:07:38.445
<v Speaker 2>is that, you know, when you when you

00:07:38.445 --> 00:07:41.645
<v Speaker 2>compare things to Terraforms, that Terraform is something

00:07:41.725 --> 00:07:42.125
<v Speaker 2>obviously,

00:07:42.605 --> 00:07:45.565
<v Speaker 2>it's not doing the continuous reconciliation

00:07:45.565 --> 00:07:46.285
<v Speaker 2>loop.

00:07:46.685 --> 00:07:47.245
<v Speaker 2>But

00:07:48.445 --> 00:07:50.125
<v Speaker 2>trying to manage Kubernetes

00:07:50.479 --> 00:07:51.280
<v Speaker 2>with

00:07:51.680 --> 00:07:52.880
<v Speaker 2>with Terraform

00:07:52.880 --> 00:07:55.040
<v Speaker 2>is maybe not as easy as it is

00:07:55.040 --> 00:07:59.600
<v Speaker 2>to manage Kubernetes resources from inside of Crossplane

00:07:59.600 --> 00:08:01.600
<v Speaker 2>when it's serving the same sort of purpose,

00:08:01.600 --> 00:08:03.039
<v Speaker 2>especially when you're interacting with

00:08:05.175 --> 00:08:06.135
<v Speaker 2>clients

00:08:06.615 --> 00:08:09.575
<v Speaker 2>clients and any kind of application in Kubernetes

00:08:09.575 --> 00:08:11.975
<v Speaker 2>that is going to need to have access

00:08:11.975 --> 00:08:14.775
<v Speaker 2>to those cloud resources that you're provisioning.

00:08:15.335 --> 00:08:17.014
<v Speaker 2>In the case of

00:08:18.070 --> 00:08:19.670
<v Speaker 2>Google and Azure

00:08:19.830 --> 00:08:22.070
<v Speaker 2>and etcetera etcetera and Amazon,

00:08:22.230 --> 00:08:24.230
<v Speaker 2>you're talking about Microsoft

00:08:24.630 --> 00:08:26.710
<v Speaker 2>you're talking about, like, MySQL services,

00:08:27.430 --> 00:08:30.150
<v Speaker 2>things like that where having the having the

00:08:30.150 --> 00:08:31.110
<v Speaker 2>credentials

00:08:31.604 --> 00:08:34.005
<v Speaker 2>be provisioned inside of your cluster and then

00:08:34.005 --> 00:08:36.965
<v Speaker 2>be consumed inside your cluster is super convenient.

00:08:37.365 --> 00:08:39.765
<v Speaker 2>In the case of this Equinix metal

00:08:41.684 --> 00:08:42.565
<v Speaker 2>provider,

00:08:42.725 --> 00:08:44.964
<v Speaker 2>what we're provisioning is, like,

00:08:45.690 --> 00:08:48.890
<v Speaker 2>very raw resources. We have bare metal hardware,

00:08:48.890 --> 00:08:50.810
<v Speaker 2>and we have networking resources.

00:08:51.370 --> 00:08:52.010
<v Speaker 2>And

00:08:52.410 --> 00:08:54.490
<v Speaker 2>sort of the sky's the limit with that.

00:08:55.450 --> 00:08:56.730
<v Speaker 2>And in terms of

00:08:58.375 --> 00:09:01.255
<v Speaker 2>how ready this is, like, earlier,

00:09:02.375 --> 00:09:04.535
<v Speaker 2>David, you you alluded to how we could,

00:09:04.535 --> 00:09:06.375
<v Speaker 2>like, provision everything. Right now,

00:09:06.855 --> 00:09:08.774
<v Speaker 2>only a few of the only a few

00:09:08.774 --> 00:09:12.214
<v Speaker 2>of the resources that Equinix Medal offers are

00:09:12.214 --> 00:09:12.855
<v Speaker 2>available

00:09:13.170 --> 00:09:14.450
<v Speaker 2>in this provider.

00:09:14.930 --> 00:09:15.410
<v Speaker 2>But

00:09:16.050 --> 00:09:18.529
<v Speaker 2>it's an open source project. So, obviously, if

00:09:18.529 --> 00:09:21.490
<v Speaker 2>anybody wants to contribute more, great. Otherwise, we're

00:09:21.490 --> 00:09:23.970
<v Speaker 2>sort of, like, adding them in as as

00:09:23.970 --> 00:09:25.010
<v Speaker 2>we find the need for them.

00:09:26.065 --> 00:09:28.465
<v Speaker 0>Well, it's October. Right? So, you know, any

00:09:28.465 --> 00:09:30.625
<v Speaker 0>any resources we identified today, were, like, gonna

00:09:30.625 --> 00:09:32.785
<v Speaker 0>be really cool if the provider supported us.

00:09:32.865 --> 00:09:34.705
<v Speaker 0>You know, then hopefully, the people watching are

00:09:34.705 --> 00:09:36.225
<v Speaker 0>happy to come along and and help us

00:09:36.225 --> 00:09:38.145
<v Speaker 0>out there. And, of course, if they want

00:09:37.650 --> 00:09:39.170
<v Speaker 0>any help in return, they can head us

00:09:39.170 --> 00:09:40.610
<v Speaker 0>all up on Twitter. I'm sure we'd be

00:09:40.610 --> 00:09:42.210
<v Speaker 0>happy to help them contribute

00:09:42.690 --> 00:09:44.530
<v Speaker 0>to the project. Definitely.

00:09:44.930 --> 00:09:45.490
<v Speaker 0>So

00:09:46.130 --> 00:09:47.810
<v Speaker 0>there was a question that's kinda spinning in

00:09:47.810 --> 00:09:49.090
<v Speaker 0>my head then right now. We've we've now

00:09:49.090 --> 00:09:51.250
<v Speaker 0>mentioned things like Pulumi and Terraform a couple

00:09:51.250 --> 00:09:53.405
<v Speaker 0>of times here. And I I I'm wondering,

00:09:53.405 --> 00:09:56.045
<v Speaker 0>you know, as a developer responsible for some

00:09:56.045 --> 00:09:58.285
<v Speaker 0>sort of set of or some subset of

00:09:58.285 --> 00:09:59.405
<v Speaker 0>production infrastructure,

00:10:00.125 --> 00:10:01.885
<v Speaker 0>which does Crossplane

00:10:02.925 --> 00:10:05.959
<v Speaker 0>replace that or augment it? Like, do you

00:10:05.959 --> 00:10:09.560
<v Speaker 0>see all infrastructure provision happening for the Kubernetes

00:10:09.560 --> 00:10:11.000
<v Speaker 0>API with Crossplane?

00:10:11.480 --> 00:10:13.480
<v Speaker 0>Do you need to bootstrap stuff with another

00:10:13.480 --> 00:10:15.639
<v Speaker 0>tool? I mean, how does this workflow work

00:10:15.639 --> 00:10:17.000
<v Speaker 0>in reality, not just

00:10:17.555 --> 00:10:20.274
<v Speaker 0>in my head? Right. Absolutely. That's that's a

00:10:20.274 --> 00:10:21.714
<v Speaker 1>great point. And and the first thing I'd

00:10:21.714 --> 00:10:22.995
<v Speaker 1>say to that is that

00:10:23.555 --> 00:10:26.595
<v Speaker 1>I don't think Crossplane is for every organization

00:10:26.595 --> 00:10:28.514
<v Speaker 1>or every person, and I definitely would not

00:10:28.514 --> 00:10:31.154
<v Speaker 1>recommend someone do it. You know, if you

00:10:31.154 --> 00:10:32.675
<v Speaker 1>are using a tool already

00:10:32.930 --> 00:10:35.250
<v Speaker 1>and it serves every need that you have,

00:10:35.250 --> 00:10:36.529
<v Speaker 1>then I would stick with that. I would

00:10:36.529 --> 00:10:38.290
<v Speaker 1>not, you know, churn and and try and

00:10:38.290 --> 00:10:39.649
<v Speaker 1>switch to something else. So that that would

00:10:39.649 --> 00:10:40.610
<v Speaker 1>be the first thing.

00:10:41.089 --> 00:10:43.410
<v Speaker 1>The second thing is I think that the

00:10:43.569 --> 00:10:47.685
<v Speaker 1>these tools can coexist together. In fact, we've

00:10:47.685 --> 00:10:48.725
<v Speaker 1>seen a lot of people

00:10:49.765 --> 00:10:50.565
<v Speaker 1>use

00:10:50.805 --> 00:10:51.685
<v Speaker 1>Terraform's

00:10:51.685 --> 00:10:53.125
<v Speaker 1>kind of Kubernetes

00:10:53.125 --> 00:10:55.765
<v Speaker 1>provisioner where it basically allows you to spit

00:10:55.765 --> 00:10:57.845
<v Speaker 1>out, you know, arbitrary CRDs, but you write

00:10:57.845 --> 00:10:59.524
<v Speaker 1>the manifest using HCL.

00:10:59.980 --> 00:11:01.820
<v Speaker 1>We've also seen this with CDK to where

00:11:01.820 --> 00:11:04.860
<v Speaker 1>you're basically writing Kubernetes manifest using TypeScript.

00:11:05.580 --> 00:11:07.420
<v Speaker 1>That's a great example. We actually have a

00:11:07.420 --> 00:11:10.940
<v Speaker 1>video of of Kelsey Hightower provisioning Crossplane resources

00:11:10.940 --> 00:11:12.300
<v Speaker 1>using the Terraform provider.

00:11:12.735 --> 00:11:15.214
<v Speaker 1>So I definitely think these these can play

00:11:15.214 --> 00:11:18.735
<v Speaker 1>nicely together. It is a a pretty fundamentally

00:11:18.735 --> 00:11:19.855
<v Speaker 1>different model,

00:11:20.335 --> 00:11:22.895
<v Speaker 1>and I think that Crossplane gives you more

00:11:22.895 --> 00:11:25.695
<v Speaker 1>benefit as you scale to a larger organization.

00:11:27.030 --> 00:11:29.590
<v Speaker 1>Obviously, if you have things coming up and

00:11:29.590 --> 00:11:30.710
<v Speaker 1>down really quickly,

00:11:31.190 --> 00:11:32.790
<v Speaker 1>you you have a benefit there

00:11:33.190 --> 00:11:34.950
<v Speaker 1>kind of with that GitOps flow that you're

00:11:34.950 --> 00:11:36.870
<v Speaker 1>talking about. And then the other thing would

00:11:36.870 --> 00:11:39.030
<v Speaker 1>be if you have a large organization

00:11:39.485 --> 00:11:41.245
<v Speaker 1>where you're trying to provide kind of, like,

00:11:41.245 --> 00:11:44.685
<v Speaker 1>a self-service platform to developers as opposed to,

00:11:44.685 --> 00:11:46.365
<v Speaker 1>you know, you have your infrastructure team and

00:11:46.365 --> 00:11:48.685
<v Speaker 1>they open a ticket and do it. The

00:11:48.685 --> 00:11:51.405
<v Speaker 1>idea with Crossplane is that a developer has

00:11:51.405 --> 00:11:54.070
<v Speaker 1>a cluster that they connect to, and they're

00:11:54.070 --> 00:11:56.070
<v Speaker 1>presented with these abstractions

00:11:56.150 --> 00:11:57.990
<v Speaker 1>that you've defined for them, and then they

00:11:57.990 --> 00:11:59.990
<v Speaker 1>can self-service infrastructure. And that's where some of

00:11:59.990 --> 00:12:02.070
<v Speaker 1>that policy and stuff can come in. So

00:12:02.310 --> 00:12:04.390
<v Speaker 1>yeah. I I absolutely think that that these

00:12:04.390 --> 00:12:06.964
<v Speaker 1>tools can play nicely together and actually

00:12:07.524 --> 00:12:09.765
<v Speaker 1>can be used together for the same use

00:12:09.765 --> 00:12:10.404
<v Speaker 1>cases.

00:12:10.725 --> 00:12:12.645
<v Speaker 1>So I I wouldn't recommend folks,

00:12:12.885 --> 00:12:15.045
<v Speaker 1>you know, completely drop one or the other.

00:12:15.205 --> 00:12:17.845
<v Speaker 1>I'd say evaluate your circumstances and see how

00:12:17.845 --> 00:12:20.410
<v Speaker 1>you can use them together. I'm very diplomatic

00:12:20.410 --> 00:12:21.930
<v Speaker 1>if you can't tell. That was a very

00:12:21.930 --> 00:12:24.410
<v Speaker 0>fancy way of saying it depends. Yeah.

00:12:25.130 --> 00:12:26.490
<v Speaker 1>Well, we had to fill an hour and

00:12:26.490 --> 00:12:27.930
<v Speaker 1>a half somehow. Right? So

00:12:29.050 --> 00:12:31.050
<v Speaker 0>So the the thing that's going through my

00:12:31.050 --> 00:12:33.024
<v Speaker 0>head again, You know, I love to externalize

00:12:33.024 --> 00:12:35.105
<v Speaker 0>every single thought I have is that one

00:12:35.505 --> 00:12:37.105
<v Speaker 0>of the biggest challenges I have using tools

00:12:37.105 --> 00:12:38.704
<v Speaker 0>to Terraform and Ploom, as great as they

00:12:38.704 --> 00:12:41.665
<v Speaker 0>are, is that if my infrastructure doesn't change

00:12:41.665 --> 00:12:44.144
<v Speaker 0>too much Mhmm. And I I'm not making

00:12:44.144 --> 00:12:46.065
<v Speaker 0>another change for maybe a few days or

00:12:46.065 --> 00:12:47.630
<v Speaker 0>a few weeks or worst case even months

00:12:47.630 --> 00:12:49.950
<v Speaker 0>is that by the time that we run

00:12:49.950 --> 00:12:51.790
<v Speaker 0>that plan and apply is that so much

00:12:51.790 --> 00:12:53.070
<v Speaker 0>could have changed in the state of the

00:12:53.070 --> 00:12:55.390
<v Speaker 0>real world. And I guess that problem of

00:12:55.390 --> 00:12:56.990
<v Speaker 0>having to do a refresh of the state

00:12:56.990 --> 00:12:59.310
<v Speaker 0>and then the world kind of disappears by

00:12:59.310 --> 00:13:01.630
<v Speaker 0>using a tool like Crossplane because the reconciliation

00:13:01.630 --> 00:13:03.985
<v Speaker 0>look is is always running. Is that right?

00:13:04.145 --> 00:13:04.785
<v Speaker 1>Yep.

00:13:05.985 --> 00:13:08.305
<v Speaker 0>That's as good as answers I need. Perfect.

00:13:09.745 --> 00:13:12.145
<v Speaker 2>As long as your Kubernetes cluster is running,

00:13:12.145 --> 00:13:14.639
<v Speaker 2>yes. Yeah. That's true. That's true. Well, I

00:13:14.639 --> 00:13:15.360
<v Speaker 1>I guess,

00:13:15.680 --> 00:13:18.399
<v Speaker 1>to kind of amend my my previous answer,

00:13:18.560 --> 00:13:20.800
<v Speaker 1>if you're not using Kubernetes at all,

00:13:21.440 --> 00:13:23.680
<v Speaker 1>I think Crossplane could still be valuable to

00:13:23.680 --> 00:13:26.800
<v Speaker 1>you. But you obviously you know, Crossplane runs

00:13:26.800 --> 00:13:27.839
<v Speaker 1>in Kubernetes.

00:13:28.565 --> 00:13:31.205
<v Speaker 1>So if your organization is literally not touching

00:13:31.205 --> 00:13:34.005
<v Speaker 1>Kubernetes and has no plans to, maybe not

00:13:34.005 --> 00:13:36.245
<v Speaker 1>the right tool for you. Well, that was

00:13:36.245 --> 00:13:39.445
<v Speaker 0>until someone on Marcus and I's team, Jason,

00:13:39.445 --> 00:13:39.845
<v Speaker 0>was

00:13:40.325 --> 00:13:42.405
<v Speaker 0>working on a bad idea, which I saw

00:13:42.405 --> 00:13:42.645
<v Speaker 1>that.

00:13:43.310 --> 00:13:45.149
<v Speaker 0>Is I think it's such a really cool

00:13:45.149 --> 00:13:47.230
<v Speaker 0>thing for projects like this and for the

00:13:47.230 --> 00:13:50.269
<v Speaker 0>cluster API where you want that declarative

00:13:50.269 --> 00:13:54.269
<v Speaker 0>Kubernetes API without a full fledged Kubernetes cluster.

00:13:54.269 --> 00:13:56.110
<v Speaker 0>So Mhmm. I I'm looking forward to seeing

00:13:56.110 --> 00:13:58.110
<v Speaker 0>that hack hack come forward one day, the

00:13:58.110 --> 00:13:59.584
<v Speaker 0>proof of concept. Yeah.

00:13:59.985 --> 00:14:01.824
<v Speaker 0>Alright. Let's let's get started. Right?

00:14:02.305 --> 00:14:04.704
<v Speaker 0>As always with this stream, I tried to

00:14:04.704 --> 00:14:07.425
<v Speaker 0>do very, very little upfront. Now what I

00:14:07.425 --> 00:14:09.264
<v Speaker 0>have prepared just because we need a Kubernetes

00:14:09.264 --> 00:14:11.745
<v Speaker 0>cluster is I've used the cluster API

00:14:12.090 --> 00:14:15.130
<v Speaker 0>to spin up a Kubernetes cluster on Equinix

00:14:15.130 --> 00:14:17.370
<v Speaker 0>metal with three master nodes and three worker

00:14:17.370 --> 00:14:19.530
<v Speaker 0>nodes. I've since been told that's maybe a

00:14:19.530 --> 00:14:21.450
<v Speaker 0>little bit overkill, but we're gonna have a

00:14:21.450 --> 00:14:22.890
<v Speaker 0>little bit of fun with it anyway.

00:14:24.250 --> 00:14:26.010
<v Speaker 0>Now just to confirm that I haven't broken

00:14:26.010 --> 00:14:27.915
<v Speaker 0>anything in the last five minutes. If I

00:14:27.915 --> 00:14:29.435
<v Speaker 0>run key get notes,

00:14:29.675 --> 00:14:31.915
<v Speaker 0>we're gonna see the view of our Kubernetes

00:14:31.915 --> 00:14:33.915
<v Speaker 0>cluster from this point of view. I haven't

00:14:33.915 --> 00:14:36.075
<v Speaker 0>done anything else. I've not installed Crossplane. I've

00:14:36.075 --> 00:14:37.915
<v Speaker 0>not got the CRDs. I I I have

00:14:37.915 --> 00:14:39.675
<v Speaker 0>done nothing. So this is where

00:14:40.720 --> 00:14:42.560
<v Speaker 0>I need the guidance. So I'm on the

00:14:42.560 --> 00:14:45.279
<v Speaker 0>website. I'm assuming there's really good documentation and

00:14:45.279 --> 00:14:46.720
<v Speaker 0>I'm hoping we can click on the docs

00:14:46.720 --> 00:14:49.680
<v Speaker 0>page and start with the something really simple.

00:14:49.680 --> 00:14:50.560
<v Speaker 0>That sounds great. Do

00:14:50.960 --> 00:14:53.279
<v Speaker 0>I need a Crossplane CLI or do I

00:14:53.279 --> 00:14:53.920
<v Speaker 0>need to just

00:14:54.425 --> 00:14:57.065
<v Speaker 0>compute control applies and manifest to my cluster?

00:14:57.225 --> 00:14:58.425
<v Speaker 1>So to install

00:14:58.665 --> 00:15:00.665
<v Speaker 1>well, actually, to do anything with Crossplane, you

00:15:00.665 --> 00:15:02.185
<v Speaker 1>don't need the CLI.

00:15:02.505 --> 00:15:04.505
<v Speaker 1>We'll probably go ahead and install it

00:15:05.464 --> 00:15:07.625
<v Speaker 1>just to make things a little bit easier,

00:15:07.625 --> 00:15:09.305
<v Speaker 1>especially some of the things I'm gonna show

00:15:09.305 --> 00:15:11.560
<v Speaker 1>later about with the CLI. You can actually

00:15:11.560 --> 00:15:14.600
<v Speaker 1>build these packages, which are very opinionated OCI

00:15:14.600 --> 00:15:15.400
<v Speaker 1>images.

00:15:16.120 --> 00:15:17.800
<v Speaker 1>So it can do some of that for

00:15:17.800 --> 00:15:19.480
<v Speaker 1>you. So you don't have to use it

00:15:19.480 --> 00:15:20.440
<v Speaker 1>by any means,

00:15:20.760 --> 00:15:21.880
<v Speaker 1>but would recommend

00:15:22.520 --> 00:15:23.160
<v Speaker 1>installing.

00:15:25.115 --> 00:15:28.074
<v Speaker 0>Okay. So I can skip together Kubernetes cluster.

00:15:28.074 --> 00:15:29.035
<v Speaker 0>I can Mhmm.

00:15:29.595 --> 00:15:32.235
<v Speaker 0>Okay. So I'm not gonna skip installing Crossplane.

00:15:32.235 --> 00:15:32.714
<v Speaker 0>So

00:15:33.435 --> 00:15:35.514
<v Speaker 0>it wants me to use helm.

00:15:36.160 --> 00:15:38.320
<v Speaker 0>What's it what's helm three alpha and helm

00:15:38.320 --> 00:15:40.880
<v Speaker 0>three master? So alpha, we have two different

00:15:40.880 --> 00:15:42.080
<v Speaker 1>channels of release.

00:15:42.480 --> 00:15:44.720
<v Speaker 1>Alpha is gonna be our latest stable

00:15:44.720 --> 00:15:46.880
<v Speaker 1>release, which this doesn't

00:15:47.280 --> 00:15:49.120
<v Speaker 1>the the naming of these channels, I think,

00:15:49.120 --> 00:15:49.680
<v Speaker 1>is confusing.

00:15:50.515 --> 00:15:52.915
<v Speaker 1>But I guess as a pre one dot

00:15:52.915 --> 00:15:53.795
<v Speaker 1>o project,

00:15:53.955 --> 00:15:56.115
<v Speaker 1>you know, maybe you're not calling it stable.

00:15:56.675 --> 00:15:58.755
<v Speaker 1>But anyway, master is gonna be literally the

00:15:58.755 --> 00:16:00.995
<v Speaker 1>the latest helm chart built from master, and

00:16:00.995 --> 00:16:03.795
<v Speaker 1>alpha will be the the latest release. So

00:16:04.930 --> 00:16:06.850
<v Speaker 1>helm helm three alpha there is gonna give

00:16:06.850 --> 00:16:09.810
<v Speaker 1>you a Crossplane version 0 dot 13. O.

00:16:10.050 --> 00:16:11.810
<v Speaker 0>Now I know that you've both been really

00:16:11.810 --> 00:16:13.890
<v Speaker 0>busy working on this provider this week. Does

00:16:13.890 --> 00:16:15.650
<v Speaker 0>that mean we're working off the master branch,

00:16:15.650 --> 00:16:17.330
<v Speaker 0>or are we working off the the alpha

00:16:17.330 --> 00:16:20.024
<v Speaker 0>cut? We're on alpha. Zero dot 13 was

00:16:20.024 --> 00:16:23.065
<v Speaker 1>actually released on Friday, so it's pretty fresh.

00:16:23.385 --> 00:16:26.265
<v Speaker 0>Sweet. Okay. So first of all, I'm creating

00:16:26.265 --> 00:16:27.385
<v Speaker 0>a namespace.

00:16:31.529 --> 00:16:34.170
<v Speaker 0>I'm adding a Helm repository.

00:16:36.649 --> 00:16:37.769
<v Speaker 0>I like it when I just have to

00:16:37.769 --> 00:16:40.010
<v Speaker 0>copy and paste from the docs. Yep. And

00:16:40.010 --> 00:16:42.089
<v Speaker 1>you can we're not gonna use OAM today.

00:16:42.089 --> 00:16:43.610
<v Speaker 1>So if you want to turn off the

00:16:43.610 --> 00:16:45.370
<v Speaker 1>OAM flag, you can, but you don't have

00:16:45.370 --> 00:16:47.385
<v Speaker 1>to. It'll just What what what is o

00:16:47.465 --> 00:16:50.585
<v Speaker 0>OEM? OEM is kind of like the application

00:16:50.585 --> 00:16:51.705
<v Speaker 1>level layer

00:16:52.025 --> 00:16:53.145
<v Speaker 1>of Crossplane,

00:16:53.385 --> 00:16:55.705
<v Speaker 1>and it's it's a general spec. And and

00:16:55.705 --> 00:16:58.105
<v Speaker 1>then Crossplane is just the Kubernetes implementation of

00:16:58.105 --> 00:17:00.520
<v Speaker 1>it that basically allows you to have kind

00:17:00.520 --> 00:17:02.520
<v Speaker 1>of, like, a higher level abstraction over, like,

00:17:02.520 --> 00:17:04.359
<v Speaker 1>deployments and pods and that sort of things.

00:17:04.359 --> 00:17:06.520
<v Speaker 1>You can define an application and then for

00:17:06.520 --> 00:17:07.559
<v Speaker 1>sure it consumes.

00:17:08.200 --> 00:17:09.880
<v Speaker 1>But so it kind of goes, like, the

00:17:09.880 --> 00:17:12.760
<v Speaker 1>managed resources, which are granular reflecting the cloud

00:17:12.760 --> 00:17:14.614
<v Speaker 1>provider, then composition,

00:17:14.934 --> 00:17:17.095
<v Speaker 1>and then OAM, which would be like, how

00:17:17.095 --> 00:17:19.654
<v Speaker 1>do these compositions play in with, know, an

00:17:19.654 --> 00:17:20.774
<v Speaker 1>actual application

00:17:21.174 --> 00:17:22.374
<v Speaker 1>that we wanna run?

00:17:25.255 --> 00:17:27.530
<v Speaker 0>Alright. I mean, I'm still conflicted about whether

00:17:27.530 --> 00:17:29.050
<v Speaker 0>I want it because one side of my

00:17:29.050 --> 00:17:31.370
<v Speaker 0>head is saying, send the documentations. Another part

00:17:31.370 --> 00:17:33.290
<v Speaker 0>is going, you don't really need it. So

00:17:33.530 --> 00:17:35.050
<v Speaker 1>Well well, you I I would say if

00:17:35.050 --> 00:17:37.050
<v Speaker 1>you wanna do application stuff, you need it,

00:17:37.050 --> 00:17:37.529
<v Speaker 1>but

00:17:38.090 --> 00:17:39.445
<v Speaker 1>I don't think we're gonna touch on it

00:17:39.445 --> 00:17:41.044
<v Speaker 1>today, at least from what I have planned.

00:17:41.044 --> 00:17:42.644
<v Speaker 1>But we we can if you'd like.

00:17:43.044 --> 00:17:44.804
<v Speaker 0>Well, you know what? Screw your plan. I'm

00:17:44.804 --> 00:17:45.684
<v Speaker 0>good with it.

00:17:47.125 --> 00:17:48.085
<v Speaker 1>I respect it.

00:17:52.120 --> 00:17:54.840
<v Speaker 0>Yeah. Don't complain about my credentials. They're fine.

00:17:55.000 --> 00:17:57.080
<v Speaker 2>Can you think of any kind of application

00:17:57.240 --> 00:18:00.200
<v Speaker 2>we can make happen with the resources available?

00:18:03.345 --> 00:18:06.544
<v Speaker 1>I don't think so. OAM is earlier in

00:18:06.544 --> 00:18:07.985
<v Speaker 1>development than Crossplane,

00:18:07.985 --> 00:18:10.385
<v Speaker 1>so I don't think that they have a,

00:18:10.385 --> 00:18:12.865
<v Speaker 1>like, target for a bare metal machine. I

00:18:12.865 --> 00:18:14.465
<v Speaker 1>think it's it has to, like, target the

00:18:14.465 --> 00:18:16.705
<v Speaker 1>Kubernetes API. So we could run them directly,

00:18:16.705 --> 00:18:17.025
<v Speaker 1>I guess,

00:18:18.080 --> 00:18:20.720
<v Speaker 1>in in cluster, but the the infrastructure consumed

00:18:20.720 --> 00:18:21.520
<v Speaker 1>likely

00:18:21.600 --> 00:18:22.640
<v Speaker 1>wouldn't be

00:18:23.120 --> 00:18:25.360
<v Speaker 1>something provisioned on Equinix metal.

00:18:26.880 --> 00:18:30.320
<v Speaker 0>K. No worries. So let's run our GET.

00:18:30.320 --> 00:18:31.440
<v Speaker 0>We've got

00:18:31.965 --> 00:18:33.085
<v Speaker 0>pods,

00:18:33.085 --> 00:18:35.565
<v Speaker 0>deployments, replica. Alright. Okay. Alright. So we've got

00:18:35.565 --> 00:18:38.445
<v Speaker 0>something running. Mhmm. And you're saying this will

00:18:38.445 --> 00:18:40.924
<v Speaker 0>be easier if I install the CLI,

00:18:41.565 --> 00:18:43.885
<v Speaker 0>and I love nothing better than piping to

00:18:43.885 --> 00:18:44.605
<v Speaker 0>a shell. So

00:18:46.070 --> 00:18:47.269
<v Speaker 1>It's very safe.

00:18:47.750 --> 00:18:48.470
<v Speaker 1>Yeah.

00:18:49.030 --> 00:18:50.630
<v Speaker 1>And then you'll need to move that to

00:18:50.630 --> 00:18:52.230
<v Speaker 1>your path if you want up there.

00:18:53.590 --> 00:18:54.789
<v Speaker 0>Okay.

00:18:54.790 --> 00:18:55.590
<v Speaker 0>So

00:18:55.990 --> 00:18:57.910
<v Speaker 0>oh, so this is a cube control plug

00:18:57.910 --> 00:18:59.895
<v Speaker 0>in? Yep. Yep. So if you move it

00:18:59.895 --> 00:19:02.615
<v Speaker 1>to user local Ben up there, it should

00:19:02.615 --> 00:19:04.534
<v Speaker 1>just you should have Kube control cross line

00:19:04.534 --> 00:19:05.174
<v Speaker 1>working.

00:19:05.335 --> 00:19:07.174
<v Speaker 0>And I could have installed it with crew.

00:19:07.174 --> 00:19:07.815
<v Speaker 0>You

00:19:09.654 --> 00:19:11.735
<v Speaker 0>use the the Kubernetes plug in manager or

00:19:11.735 --> 00:19:11.895
<v Speaker 0>no?

00:19:12.740 --> 00:19:15.460
<v Speaker 1>The I think, Marcus, he wrote the original

00:19:16.260 --> 00:19:19.140
<v Speaker 1>Crossplane CLI, and I think it was compatible

00:19:19.140 --> 00:19:20.020
<v Speaker 1>potentially.

00:19:20.260 --> 00:19:22.820
<v Speaker 1>This this new one is is not yet.

00:19:23.380 --> 00:19:24.980
<v Speaker 2>Yeah. I had the crew

00:19:25.140 --> 00:19:27.700
<v Speaker 2>version of it installed, but I don't recall

00:19:27.700 --> 00:19:29.595
<v Speaker 2>if it if that was just running off

00:19:29.595 --> 00:19:32.235
<v Speaker 2>of a local branch against crew or if

00:19:32.235 --> 00:19:33.995
<v Speaker 2>that was merged into crew.

00:19:34.475 --> 00:19:36.395
<v Speaker 0>There we go. We've got more Hacktoberfest

00:19:36.395 --> 00:19:38.154
<v Speaker 0>ideas for anyone watching this.

00:19:38.555 --> 00:19:41.035
<v Speaker 1>For sure. Also, I am going to

00:19:41.840 --> 00:19:43.840
<v Speaker 1>you have some of these commands here to

00:19:43.840 --> 00:19:44.640
<v Speaker 1>get started.

00:19:45.680 --> 00:19:47.920
<v Speaker 1>Packet or Equinix metal is not included in

00:19:47.920 --> 00:19:50.240
<v Speaker 1>the documentation here, so that's something we definitely

00:19:50.240 --> 00:19:51.840
<v Speaker 1>like to do once we have CI set

00:19:51.840 --> 00:19:53.520
<v Speaker 1>up and that sort of thing for for

00:19:53.520 --> 00:19:53.920
<v Speaker 1>Packet.

00:19:54.475 --> 00:19:55.514
<v Speaker 1>But instead,

00:19:55.595 --> 00:19:57.674
<v Speaker 1>I'll just put some commands here in our

00:19:57.674 --> 00:19:58.394
<v Speaker 1>shared

00:19:58.875 --> 00:19:59.514
<v Speaker 1>editor,

00:19:59.914 --> 00:20:01.674
<v Speaker 1>and and you can just run those.

00:20:02.394 --> 00:20:04.715
<v Speaker 1>So first, what we're gonna wanna do is

00:20:04.715 --> 00:20:06.474
<v Speaker 1>install the packet

00:20:06.475 --> 00:20:08.154
<v Speaker 1>or the Equinix metal provider.

00:20:08.800 --> 00:20:10.240
<v Speaker 1>And like I said, we don't have CI

00:20:10.240 --> 00:20:11.520
<v Speaker 1>set up for that right now, so I'll

00:20:11.520 --> 00:20:14.320
<v Speaker 1>just let you install my own build of

00:20:14.320 --> 00:20:17.600
<v Speaker 1>that. So you're gonna do cube control crossplane

00:20:17.920 --> 00:20:19.520
<v Speaker 1>install provider,

00:20:19.600 --> 00:20:21.200
<v Speaker 1>and I believe it's at

00:20:22.085 --> 00:20:23.284
<v Speaker 1>Ashtan

00:20:23.925 --> 00:20:25.044
<v Speaker 1>Crossplane

00:20:26.005 --> 00:20:26.885
<v Speaker 1>provider

00:20:26.965 --> 00:20:28.005
<v Speaker 1>Equinix.

00:20:29.525 --> 00:20:31.845
<v Speaker 2>We were going back and forth on how

00:20:31.845 --> 00:20:34.165
<v Speaker 2>long this name should be before it started

00:20:34.165 --> 00:20:36.920
<v Speaker 2>annoying people. Yeah. So if you run that,

00:20:36.920 --> 00:20:38.679
<v Speaker 1>you we should be good to go though.

00:20:39.720 --> 00:20:42.919
<v Speaker 0>Alright. So this is using the Crossplane CLI.

00:20:42.920 --> 00:20:45.480
<v Speaker 0>It's installing a provider, and this reference on

00:20:45.480 --> 00:20:47.480
<v Speaker 0>the end, I'm assuming, is a container image

00:20:47.480 --> 00:20:50.654
<v Speaker 0>on maybe the docker registry. Yep. Absolutely.

00:20:50.654 --> 00:20:51.934
<v Speaker 1>And and as you're doing this, I can

00:20:51.934 --> 00:20:54.014
<v Speaker 1>kind of explain a little bit about how

00:20:54.014 --> 00:20:54.815
<v Speaker 1>this works.

00:20:55.695 --> 00:20:57.695
<v Speaker 1>So in the case of a provider,

00:20:57.855 --> 00:21:00.255
<v Speaker 1>what you're installing is some CRDs and a

00:21:00.255 --> 00:21:01.774
<v Speaker 1>controller to reconcile them,

00:21:03.929 --> 00:21:05.769
<v Speaker 1>and you're gonna have some collisions on the

00:21:05.769 --> 00:21:07.929
<v Speaker 1>provider name. So if you do, just do

00:21:07.929 --> 00:21:10.330
<v Speaker 1>k get p k g or k get

00:21:10.330 --> 00:21:12.730
<v Speaker 1>Crossplane would also work. But k get p

00:21:12.730 --> 00:21:14.090
<v Speaker 1>k g will will get you all the

00:21:14.090 --> 00:21:14.729
<v Speaker 1>packages,

00:21:15.049 --> 00:21:15.769
<v Speaker 1>that are installed

00:21:16.975 --> 00:21:19.615
<v Speaker 1>or it should. Let's see. Yep. Yep. So

00:21:19.615 --> 00:21:22.254
<v Speaker 1>look, it it's installed and healthy.

00:21:22.495 --> 00:21:25.134
<v Speaker 1>So essentially, what's happening behind the scenes is

00:21:25.134 --> 00:21:27.615
<v Speaker 1>this package is an OCI image, basically just

00:21:27.615 --> 00:21:29.455
<v Speaker 1>has a configuration file

00:21:30.270 --> 00:21:32.190
<v Speaker 1>and a bunch of YAML and a stream

00:21:32.190 --> 00:21:34.430
<v Speaker 1>in it. It's a single layer OCI image,

00:21:35.070 --> 00:21:37.310
<v Speaker 1>and it has also a reference to a

00:21:37.310 --> 00:21:39.390
<v Speaker 1>separate image, which is the controller that we're

00:21:39.390 --> 00:21:40.910
<v Speaker 1>gonna actually install and run.

00:21:41.230 --> 00:21:43.885
<v Speaker 1>And and what it does is the Crossplane

00:21:43.885 --> 00:21:46.045
<v Speaker 1>package manager, which is part of that Crossplane

00:21:46.045 --> 00:21:47.325
<v Speaker 1>pod we saw running,

00:21:47.565 --> 00:21:49.645
<v Speaker 1>when it sees the creation of a provider

00:21:49.645 --> 00:21:52.125
<v Speaker 1>resource, it's gonna look at the source of

00:21:52.125 --> 00:21:54.125
<v Speaker 1>it and see this image, and it's gonna

00:21:54.125 --> 00:21:56.220
<v Speaker 1>pull that image and extract

00:21:56.220 --> 00:21:58.940
<v Speaker 1>kind of the package configuration for it. And

00:21:58.940 --> 00:22:00.780
<v Speaker 1>from that, what it's first gonna do is

00:22:00.780 --> 00:22:03.020
<v Speaker 1>say, hey. Can I install all of these

00:22:03.020 --> 00:22:06.220
<v Speaker 1>CRDs and control them? Right? So in Kubernetes,

00:22:06.220 --> 00:22:08.220
<v Speaker 1>you have owner references and controller references.

00:22:08.794 --> 00:22:11.115
<v Speaker 1>Controller references are basically just a special type

00:22:11.115 --> 00:22:12.234
<v Speaker 1>of owner reference,

00:22:12.715 --> 00:22:14.955
<v Speaker 1>and there can only be one controller of

00:22:14.955 --> 00:22:16.154
<v Speaker 1>a resource type.

00:22:17.434 --> 00:22:19.195
<v Speaker 1>And so in this case,

00:22:20.635 --> 00:22:22.554
<v Speaker 1>there is no other providers installed,

00:22:22.930 --> 00:22:25.330
<v Speaker 1>so it will easily gain control of these.

00:22:25.330 --> 00:22:27.010
<v Speaker 1>So first, the package manager is gonna say,

00:22:27.010 --> 00:22:29.170
<v Speaker 1>can I install all of these CRDs and

00:22:29.170 --> 00:22:31.090
<v Speaker 1>be the controller of them? If so, it's

00:22:31.090 --> 00:22:32.610
<v Speaker 1>gonna go ahead and create them. And then

00:22:32.610 --> 00:22:34.529
<v Speaker 1>if it creates them all successfully,

00:22:34.530 --> 00:22:36.770
<v Speaker 1>then it's gonna start a controller to reconcile

00:22:36.770 --> 00:22:37.010
<v Speaker 1>them.

00:22:38.525 --> 00:22:40.924
<v Speaker 1>If it's unable to say that I'm gonna

00:22:40.924 --> 00:22:42.045
<v Speaker 1>be able to gain control of all of

00:22:42.045 --> 00:22:43.804
<v Speaker 1>them, it's gonna say, hey. This isn't installable.

00:22:43.804 --> 00:22:46.125
<v Speaker 1>This is gonna conflict with another another provider

00:22:46.125 --> 00:22:47.885
<v Speaker 1>you have, and that kind of guards you

00:22:47.885 --> 00:22:51.085
<v Speaker 1>from, you know, having providers fight over control

00:22:51.085 --> 00:22:51.725
<v Speaker 1>of resources.

00:22:54.080 --> 00:22:55.520
<v Speaker 0>Okay. Cool.

00:22:55.840 --> 00:22:57.280
<v Speaker 1>So you can see I'm having a nosy

00:22:57.280 --> 00:22:59.440
<v Speaker 0>now to see who the CID that you've

00:22:59.440 --> 00:23:01.840
<v Speaker 0>you've thrown into my system here. So the

00:23:01.840 --> 00:23:03.440
<v Speaker 0>OEM stuff, we can maybe try and talk

00:23:03.440 --> 00:23:04.480
<v Speaker 0>about at the end.

00:23:04.800 --> 00:23:07.025
<v Speaker 0>I won't try to deviate from your plan

00:23:07.025 --> 00:23:07.825
<v Speaker 0>too much.

00:23:08.385 --> 00:23:10.705
<v Speaker 1>Well well, I will do whatever you want.

00:23:10.705 --> 00:23:11.904
<v Speaker 1>So this is your show.

00:23:12.945 --> 00:23:15.265
<v Speaker 0>And then we've got the Crossplane extensions down

00:23:15.265 --> 00:23:17.425
<v Speaker 0>here. So we've got our providers,

00:23:19.510 --> 00:23:20.629
<v Speaker 0>configurations,

00:23:20.710 --> 00:23:22.950
<v Speaker 0>the same as the basis, virtual networks. Okay.

00:23:23.030 --> 00:23:23.669
<v Speaker 1>Mhmm.

00:23:24.309 --> 00:23:27.190
<v Speaker 1>And, yeah, those those packet ones are specifically

00:23:27.190 --> 00:23:28.870
<v Speaker 1>the ones that came. So if you if

00:23:28.870 --> 00:23:31.109
<v Speaker 1>you had run k get CRDs

00:23:31.270 --> 00:23:33.350
<v Speaker 1>before we install the provider

00:23:33.669 --> 00:23:36.705
<v Speaker 1>Equinix metal, those packet CRDs wouldn't be there.

00:23:36.705 --> 00:23:38.625
<v Speaker 1>We need to update those that API group

00:23:38.625 --> 00:23:39.505
<v Speaker 1>as well now.

00:23:40.225 --> 00:23:40.865
<v Speaker 1>But

00:23:41.105 --> 00:23:43.025
<v Speaker 1>now that it's installed, it brought those and

00:23:43.025 --> 00:23:44.865
<v Speaker 1>installed those. And if you actually, you know,

00:23:44.865 --> 00:23:47.265
<v Speaker 1>described one of those CRDs there, you would

00:23:47.265 --> 00:23:50.145
<v Speaker 1>see a controller ref to the provider revision,

00:23:50.510 --> 00:23:53.470
<v Speaker 1>which is the installed version of the Equinix

00:23:53.470 --> 00:23:54.590
<v Speaker 1>metal provider.

00:23:55.470 --> 00:23:57.230
<v Speaker 0>Does that mean I have a pod running

00:23:57.230 --> 00:23:59.630
<v Speaker 0>now? It's a the Equinix

00:23:59.630 --> 00:24:03.385
<v Speaker 0>metal pod? Yep. Crossplane. We do. Yep. Yeah.

00:24:03.385 --> 00:24:05.945
<v Speaker 1>And you'll see that has kind of a

00:24:05.945 --> 00:24:07.625
<v Speaker 1>a hash and then kind of the stuff

00:24:07.625 --> 00:24:10.025
<v Speaker 1>that the deployment does to do the randomized

00:24:10.025 --> 00:24:10.825
<v Speaker 1>UID.

00:24:12.345 --> 00:24:14.825
<v Speaker 1>The hash there is actually the hash of

00:24:14.825 --> 00:24:16.985
<v Speaker 1>the or the digest of the OCI image.

00:24:17.410 --> 00:24:19.490
<v Speaker 1>So since we're using this actually kind of

00:24:19.490 --> 00:24:21.410
<v Speaker 1>dangerous except for that we have control over

00:24:21.410 --> 00:24:22.370
<v Speaker 1>the docker,

00:24:22.610 --> 00:24:25.330
<v Speaker 1>image. We're using a latest tag here. So

00:24:25.330 --> 00:24:27.490
<v Speaker 1>what would actually happen, we have different types

00:24:27.490 --> 00:24:30.385
<v Speaker 1>of on the provider, type, there's different types

00:24:30.385 --> 00:24:32.544
<v Speaker 1>of policies you can have for update.

00:24:32.705 --> 00:24:34.385
<v Speaker 1>So if since we're using the latest tag

00:24:34.385 --> 00:24:37.024
<v Speaker 1>and the default policy is auto update,

00:24:37.185 --> 00:24:39.585
<v Speaker 1>if I pushed a new OCI image that

00:24:39.585 --> 00:24:41.345
<v Speaker 1>had different configuration in it

00:24:42.480 --> 00:24:45.360
<v Speaker 1>with the latest tag, Crossplane would automatically

00:24:45.360 --> 00:24:47.440
<v Speaker 1>go and see that on a reconcile

00:24:47.679 --> 00:24:49.120
<v Speaker 1>and say, oh, I see there's a new

00:24:49.120 --> 00:24:50.960
<v Speaker 1>version of this provider available.

00:24:51.440 --> 00:24:53.520
<v Speaker 1>And it would create a new revision for

00:24:53.520 --> 00:24:53.679
<v Speaker 1>it,

00:24:54.495 --> 00:24:56.655
<v Speaker 1>and it would transition ownership

00:24:56.655 --> 00:24:57.775
<v Speaker 1>or controllership,

00:24:57.775 --> 00:24:59.375
<v Speaker 1>I guess, of those resources to the new

00:24:59.375 --> 00:24:59.934
<v Speaker 1>one.

00:25:00.975 --> 00:25:03.135
<v Speaker 1>And you can also customize that to say,

00:25:03.135 --> 00:25:05.455
<v Speaker 1>create the new revision, but don't transfer controllership.

00:25:05.455 --> 00:25:07.215
<v Speaker 1>You know, don't start don't switch out the

00:25:07.215 --> 00:25:08.015
<v Speaker 1>controllers,

00:25:08.015 --> 00:25:08.495
<v Speaker 1>etcetera.

00:25:09.750 --> 00:25:12.070
<v Speaker 0>Okay. That makes sense to me. That was

00:25:12.070 --> 00:25:14.310
<v Speaker 2>that was, like, 2¢ that represents,

00:25:14.310 --> 00:25:17.350
<v Speaker 2>like, over over the years to work and

00:25:17.350 --> 00:25:19.590
<v Speaker 2>thinking and and ideas

00:25:19.590 --> 00:25:20.390
<v Speaker 2>scratching.

00:25:20.790 --> 00:25:23.350
<v Speaker 1>Yeah. So, yeah, I'm I'm really glad to

00:25:23.350 --> 00:25:26.264
<v Speaker 2>hear that explained so concisely.

00:25:26.585 --> 00:25:28.905
<v Speaker 1>Yeah. Yeah. It it definitely has been a

00:25:28.905 --> 00:25:29.784
<v Speaker 1>long road.

00:25:30.265 --> 00:25:31.865
<v Speaker 1>And and Marcus did a ton of the

00:25:31.865 --> 00:25:33.945
<v Speaker 1>work on the original package manager.

00:25:34.905 --> 00:25:37.384
<v Speaker 1>And in this new release, we kind of

00:25:37.385 --> 00:25:40.460
<v Speaker 1>redesigned it from the ground up and it

00:25:40.460 --> 00:25:42.460
<v Speaker 1>enabled some of the stuff that that

00:25:43.020 --> 00:25:44.780
<v Speaker 1>there's a bunch of issues assigned to me

00:25:44.780 --> 00:25:46.940
<v Speaker 1>that you had originally created.

00:25:47.420 --> 00:25:48.860
<v Speaker 1>It was fun to get to close out

00:25:48.860 --> 00:25:49.580
<v Speaker 1>some of those.

00:25:50.140 --> 00:25:52.300
<v Speaker 1>And things that are coming in future releases

00:25:52.300 --> 00:25:55.404
<v Speaker 1>are actually some some advanced dependency management and

00:25:55.404 --> 00:25:56.445
<v Speaker 1>that sort of things you can

00:25:57.164 --> 00:25:59.725
<v Speaker 1>especially with configuration packages, which we'll look at

00:25:59.725 --> 00:26:01.884
<v Speaker 1>in a minute, you can depend on providers.

00:26:02.205 --> 00:26:04.924
<v Speaker 1>And it'll say, like, install my configuration with

00:26:04.924 --> 00:26:05.644
<v Speaker 1>my abstractions,

00:26:06.360 --> 00:26:09.960
<v Speaker 1>And these abstractions are serviced by provider Equinix

00:26:09.960 --> 00:26:12.760
<v Speaker 1>metal and provider AWS, and it'll automatically

00:26:13.000 --> 00:26:15.480
<v Speaker 1>go ahead and install those providers for you.

00:26:17.640 --> 00:26:18.040
<v Speaker 0>Okay.

00:26:18.875 --> 00:26:20.395
<v Speaker 0>So let me see if I understand where

00:26:20.395 --> 00:26:22.155
<v Speaker 0>we are at the moment then. Cool. We've

00:26:22.155 --> 00:26:24.155
<v Speaker 0>got Crossplane running on a cluster. We've added

00:26:24.155 --> 00:26:26.795
<v Speaker 0>the Equinix metal provider and that has opened

00:26:26.795 --> 00:26:28.875
<v Speaker 0>up three CRDs that we are now going

00:26:28.875 --> 00:26:31.035
<v Speaker 0>to start playing with, I'm assuming,

00:26:31.195 --> 00:26:33.195
<v Speaker 0>which is server VLAN imports.

00:26:34.475 --> 00:26:36.130
<v Speaker 0>So is there a next step now that

00:26:36.130 --> 00:26:38.050
<v Speaker 0>we're gonna deploy something? Is that what the

00:26:38.050 --> 00:26:40.210
<v Speaker 0>configuration you just mentioned was or is that

00:26:40.210 --> 00:26:41.010
<v Speaker 0>something else?

00:26:41.410 --> 00:26:43.010
<v Speaker 1>So we can

00:26:44.290 --> 00:26:46.450
<v Speaker 1>yeah. Actually, to to go ahead and let's

00:26:46.450 --> 00:26:47.730
<v Speaker 1>let's jump to the end and then work

00:26:47.730 --> 00:26:49.515
<v Speaker 1>our way back. You want to? Or is

00:26:49.515 --> 00:26:49.995
<v Speaker 1>that

00:26:50.395 --> 00:26:52.075
<v Speaker 1>does that work? We can we can show

00:26:52.075 --> 00:26:54.395
<v Speaker 1>the the simplest workflow and then go back

00:26:54.395 --> 00:26:55.995
<v Speaker 1>to sort of, like, the more granular stuff

00:26:55.995 --> 00:26:57.995
<v Speaker 1>you can do. I mean, it's just my

00:26:57.995 --> 00:27:00.075
<v Speaker 0>intuition is telling me I I've installed Crossplane.

00:27:00.075 --> 00:27:02.635
<v Speaker 0>I've added my provider. I've not given any

00:27:02.460 --> 00:27:04.140
<v Speaker 0>token yet. I'm assuming there's something I have

00:27:04.140 --> 00:27:05.820
<v Speaker 0>to do here, and then I can say,

00:27:05.820 --> 00:27:07.100
<v Speaker 0>hey. Go get me go get me a

00:27:07.100 --> 00:27:09.020
<v Speaker 0>server. Like, I want some bare metal. Yep.

00:27:09.020 --> 00:27:09.820
<v Speaker 1>Absolutely.

00:27:09.980 --> 00:27:11.899
<v Speaker 1>So do you wanna go to the

00:27:12.220 --> 00:27:13.659
<v Speaker 1>provider packet

00:27:13.900 --> 00:27:16.195
<v Speaker 1>kind of GitHub page, and we can look

00:27:16.195 --> 00:27:17.315
<v Speaker 1>at the read me, which will show you

00:27:17.315 --> 00:27:20.114
<v Speaker 1>how to do your explicit credentials for

00:27:20.755 --> 00:27:21.874
<v Speaker 1>Equinix metal?

00:27:22.755 --> 00:27:24.515
<v Speaker 1>I'm I'm gonna try and not call it

00:27:24.515 --> 00:27:27.155
<v Speaker 1>packet as much as possible, but it's really

00:27:27.155 --> 00:27:28.434
<v Speaker 1>hard. I'm gonna be honest.

00:27:29.490 --> 00:27:31.010
<v Speaker 2>Packets are those things that go over the

00:27:31.010 --> 00:27:33.970
<v Speaker 2>network. Right? Yeah. Exactly. Yeah. That could be

00:27:33.970 --> 00:27:35.169
<v Speaker 2>confusing. Yeah.

00:27:36.130 --> 00:27:38.049
<v Speaker 0>Alright. So this is the

00:27:38.450 --> 00:27:40.530
<v Speaker 0>yeah. This is the provider. Okay. Cool. Mhmm.

00:27:42.885 --> 00:27:45.285
<v Speaker 1>So, yeah, if you do the the credential

00:27:45.285 --> 00:27:47.685
<v Speaker 1>setup there, install that Equinix metal provider. Yeah.

00:27:47.685 --> 00:27:49.765
<v Speaker 1>There you go. So we already ran that

00:27:49.765 --> 00:27:50.885
<v Speaker 1>command beforehand,

00:27:51.125 --> 00:27:53.125
<v Speaker 1>but with my own personal image.

00:27:53.925 --> 00:27:55.889
<v Speaker 0>Alright. So in order for me to do

00:27:55.889 --> 00:27:58.609
<v Speaker 0>this, what I now need to do is

00:28:03.250 --> 00:28:05.570
<v Speaker 0>that's gonna be Linux instructions, isn't it?

00:28:06.625 --> 00:28:08.465
<v Speaker 1>Yeah. If you if you just set API

00:28:08.465 --> 00:28:10.705
<v Speaker 1>key equal to your API key, you know,

00:28:10.705 --> 00:28:12.544
<v Speaker 1>just the the variable, then the next commands

00:28:12.544 --> 00:28:14.705
<v Speaker 1>are gonna work. Alright. Let's move the magic

00:28:14.705 --> 00:28:15.585
<v Speaker 0>over here.

00:28:17.184 --> 00:28:19.024
<v Speaker 0>Alright. So export

00:28:19.025 --> 00:28:19.904
<v Speaker 0>API

00:28:19.904 --> 00:28:20.145
<v Speaker 0>key.

00:28:21.900 --> 00:28:23.660
<v Speaker 2>I still have the YAML for that tank

00:28:23.660 --> 00:28:24.780
<v Speaker 2>deployment.

00:28:24.860 --> 00:28:26.700
<v Speaker 2>If we want to go crazy, but we

00:28:26.700 --> 00:28:27.980
<v Speaker 2>probably should go crazy.

00:28:29.100 --> 00:28:30.700
<v Speaker 1>Actually, some of this new stuff,

00:28:32.060 --> 00:28:34.780
<v Speaker 1>excuse me, should actually make that a bit

00:28:34.780 --> 00:28:36.220
<v Speaker 1>easier, some of that stuff we're trying to

00:28:36.220 --> 00:28:38.534
<v Speaker 1>do with tank. So maybe we will look

00:28:38.534 --> 00:28:39.654
<v Speaker 1>at that in a little bit.

00:28:40.934 --> 00:28:42.375
<v Speaker 0>But I I'm also gonna have to load

00:28:42.375 --> 00:28:44.215
<v Speaker 1>back up on what we did because I

00:28:44.215 --> 00:28:45.735
<v Speaker 1>kinda pushed it out of my brain after

00:28:45.735 --> 00:28:47.734
<v Speaker 1>we included that one.

00:28:48.615 --> 00:28:49.975
<v Speaker 2>I'll jump. Thank you. Alright.

00:28:51.150 --> 00:28:52.910
<v Speaker 2>Guess we do wanna use it.

00:28:53.230 --> 00:28:53.870
<v Speaker 1>Cool.

00:28:54.750 --> 00:28:55.550
<v Speaker 1>Alright.

00:28:55.790 --> 00:28:58.030
<v Speaker 0>I just run PS because whenever I move

00:28:58.030 --> 00:29:00.590
<v Speaker 0>the window back to other display, always pull

00:29:00.590 --> 00:29:02.430
<v Speaker 0>the school buffer back and keep the screen.

00:29:03.195 --> 00:29:05.595
<v Speaker 0>So Yeah. I I've done that before as

00:29:05.595 --> 00:29:07.834
<v Speaker 1>well on some of my screens. Alright.

00:29:09.034 --> 00:29:11.994
<v Speaker 0>So I'm assuming the commands I need are

00:29:11.995 --> 00:29:13.754
<v Speaker 0>being typed into here.

00:29:14.315 --> 00:29:16.715
<v Speaker 1>Yeah. So so did you go ahead let's

00:29:16.715 --> 00:29:19.110
<v Speaker 1>see. You just created those environment variables. Did

00:29:19.110 --> 00:29:21.909
<v Speaker 1>you actually create the provider object there also?

00:29:22.470 --> 00:29:23.830
<v Speaker 0>Nope. I can do that.

00:29:24.070 --> 00:29:26.629
<v Speaker 1>Let's see. So yeah. Exactly.

00:29:28.870 --> 00:29:30.710
<v Speaker 1>So so what you're doing here is basically,

00:29:30.710 --> 00:29:32.125
<v Speaker 1>you know, just creating a secret and then

00:29:32.125 --> 00:29:34.525
<v Speaker 1>creating our provider object, which then gets referenced

00:29:34.525 --> 00:29:36.765
<v Speaker 1>by every other resource. Basically, every resource has

00:29:36.765 --> 00:29:38.845
<v Speaker 1>a provider ref. And this is a general

00:29:38.845 --> 00:29:40.684
<v Speaker 1>pattern for all of our providers.

00:29:41.405 --> 00:29:42.925
<v Speaker 1>It's just the way that you know, our

00:29:42.925 --> 00:29:43.965
<v Speaker 1>method of authentication.

00:29:44.490 --> 00:29:46.570
<v Speaker 1>We've also talked about and there's been some

00:29:46.570 --> 00:29:50.250
<v Speaker 1>some work recently towards having different back ends

00:29:50.250 --> 00:29:52.970
<v Speaker 1>than just a Kubernetes secret for authentication.

00:29:53.370 --> 00:29:54.650
<v Speaker 1>One of the things you can do, for

00:29:54.650 --> 00:29:57.370
<v Speaker 1>instance, if you're running provider AWS and your

00:29:57.370 --> 00:29:59.210
<v Speaker 1>Crossplane is in an EKS cluster,

00:30:00.225 --> 00:30:02.465
<v Speaker 1>they have things like I'm roles for service

00:30:02.465 --> 00:30:03.105
<v Speaker 1>counts

00:30:03.424 --> 00:30:05.825
<v Speaker 1>where you can just give the Crossplane pod

00:30:05.825 --> 00:30:07.985
<v Speaker 1>service count, you know, an annotation, and it'll

00:30:07.985 --> 00:30:09.504
<v Speaker 1>inject that into that.

00:30:09.745 --> 00:30:11.664
<v Speaker 1>And then on your provider that you create,

00:30:11.664 --> 00:30:13.345
<v Speaker 1>you don't specify a secret. You say, you

00:30:13.345 --> 00:30:15.345
<v Speaker 1>know, like, I think native is, like, the

00:30:15.345 --> 00:30:17.260
<v Speaker 1>the the type of authentication,

00:30:17.900 --> 00:30:20.620
<v Speaker 1>and the AWS SDK and the controller will

00:30:20.620 --> 00:30:22.060
<v Speaker 1>just say, oh, I'm supposed to look in

00:30:22.060 --> 00:30:24.140
<v Speaker 1>my file system and pull out this token.

00:30:26.460 --> 00:30:27.100
<v Speaker 1>Okay.

00:30:27.900 --> 00:30:29.980
<v Speaker 0>We're using that generic secret today, but that's

00:30:29.980 --> 00:30:31.100
<v Speaker 0>there are other options.

00:30:31.435 --> 00:30:33.914
<v Speaker 0>What I'm taking away from that. Yeah.

00:30:34.315 --> 00:30:35.115
<v Speaker 1>Exactly.

00:30:35.355 --> 00:30:37.435
<v Speaker 0>And you care about security, but of course.

00:30:37.435 --> 00:30:39.115
<v Speaker 1>Right. But, of course, you don't you don't

00:30:39.115 --> 00:30:41.115
<v Speaker 1>care about security or policy. Right? So we

00:30:41.115 --> 00:30:42.554
<v Speaker 1>we should be good today.

00:30:43.355 --> 00:30:45.515
<v Speaker 1>But if now you'll need to create an

00:30:45.515 --> 00:30:46.600
<v Speaker 1>actual provider

00:30:46.600 --> 00:30:47.879
<v Speaker 1>instance here,

00:30:48.520 --> 00:30:50.200
<v Speaker 1>which you'll see just below there, and then

00:30:50.200 --> 00:30:51.639
<v Speaker 1>we should be pretty good to go.

00:30:52.440 --> 00:30:54.280
<v Speaker 2>I was looking at another screen, but you

00:30:54.280 --> 00:30:56.280
<v Speaker 2>did do the the read into the environment

00:30:56.280 --> 00:30:57.480
<v Speaker 2>variables with the secrets?

00:30:58.965 --> 00:31:01.205
<v Speaker 0>I got yes. We're we're good there. I

00:31:01.205 --> 00:31:02.325
<v Speaker 0>mean, hopefully.

00:31:02.645 --> 00:31:05.044
<v Speaker 1>That was behind the scenes. Yeah. So

00:31:05.765 --> 00:31:07.205
<v Speaker 0>this is

00:31:07.925 --> 00:31:09.445
<v Speaker 0>I mean, I'm just gonna save this as

00:31:09.445 --> 00:31:11.045
<v Speaker 0>a fail because I'll probably push this up

00:31:11.045 --> 00:31:11.365
<v Speaker 0>somewhere,

00:31:11.950 --> 00:31:13.550
<v Speaker 0>and then I'll apply it manually. So this

00:31:13.550 --> 00:31:15.630
<v Speaker 0>is just API version Crossplane, and we create

00:31:15.630 --> 00:31:16.510
<v Speaker 2>a provider,

00:31:17.630 --> 00:31:18.910
<v Speaker 0>the project ID.

00:31:19.870 --> 00:31:22.350
<v Speaker 0>Oh, so that's been interpolated actually from my

00:31:22.350 --> 00:31:23.950
<v Speaker 0>bash environment. Alright.

00:31:24.430 --> 00:31:24.750
<v Speaker 0>Okay.

00:31:25.325 --> 00:31:27.485
<v Speaker 0>So I can't just take that off.

00:31:27.885 --> 00:31:29.725
<v Speaker 2>Or you can just paste it in. Yeah.

00:31:29.725 --> 00:31:31.325
<v Speaker 1>The project. Yeah. It's it's not a secret,

00:31:31.325 --> 00:31:32.524
<v Speaker 0>is it? Right. Okay.

00:31:33.085 --> 00:31:35.085
<v Speaker 0>And then we reference the

00:31:36.605 --> 00:31:38.684
<v Speaker 0>okay. We reference API token from the secret

00:31:38.684 --> 00:31:40.850
<v Speaker 0>that we just created. Right. Right.

00:31:41.250 --> 00:31:42.930
<v Speaker 2>Cool. This is This goes back to your

00:31:42.930 --> 00:31:45.090
<v Speaker 2>wanting to copy and paste from the instructions.

00:31:45.090 --> 00:31:46.930
<v Speaker 2>That's that's what this is all about.

00:31:49.970 --> 00:31:54.130
<v Speaker 0>And we're good. It's now being create

00:31:52.735 --> 00:31:53.374
<v Speaker 0>edit.

00:31:53.774 --> 00:31:54.894
<v Speaker 0>Nice. Okay.

00:31:55.455 --> 00:31:57.054
<v Speaker 0>So let's see what the instructions tell me

00:31:57.054 --> 00:31:58.654
<v Speaker 0>to do next. So this is we're now

00:31:58.654 --> 00:32:01.375
<v Speaker 0>getting into the the actual specification using CRDs

00:32:01.375 --> 00:32:04.174
<v Speaker 0>to deploy Equinix meta hardware now. Right? Right.

00:32:04.174 --> 00:32:04.974
<v Speaker 1>Although,

00:32:05.294 --> 00:32:07.640
<v Speaker 1>I will say, if we want to skip

00:32:07.640 --> 00:32:09.640
<v Speaker 1>ahead and go for the advanced mode, we

00:32:09.640 --> 00:32:11.400
<v Speaker 1>can we can skip this a little bit

00:32:11.400 --> 00:32:13.639
<v Speaker 1>and come back to it. Are you game?

00:32:14.520 --> 00:32:15.320
<v Speaker 0>I mean,

00:32:15.800 --> 00:32:18.200
<v Speaker 0>I do love advanced mode. So Alright. Well,

00:32:18.200 --> 00:32:19.880
<v Speaker 1>I I mean, I got that feeling from

00:32:19.880 --> 00:32:21.955
<v Speaker 1>you. So alright. Switch back over to the

00:32:21.955 --> 00:32:22.595
<v Speaker 1>editor.

00:32:24.275 --> 00:32:26.914
<v Speaker 1>Alright. And if you go to your read

00:32:26.914 --> 00:32:27.634
<v Speaker 1>me here,

00:32:28.515 --> 00:32:31.715
<v Speaker 1>I've put this command in here. And because

00:32:31.794 --> 00:32:34.780
<v Speaker 1>I think you're so awesome, I actually created

00:32:34.780 --> 00:32:35.980
<v Speaker 1>a Rawkode

00:32:35.980 --> 00:32:36.860
<v Speaker 1>configuration

00:32:36.860 --> 00:32:37.660
<v Speaker 1>package

00:32:37.740 --> 00:32:38.860
<v Speaker 1>before this

00:32:39.500 --> 00:32:41.580
<v Speaker 1>that is going to allow you to have

00:32:41.580 --> 00:32:43.340
<v Speaker 1>your own custom platform,

00:32:43.500 --> 00:32:45.580
<v Speaker 1>your Rawkode crossplane platform

00:32:45.965 --> 00:32:49.165
<v Speaker 1>that's consisting of Equinix metal resources behind the

00:32:49.165 --> 00:32:50.525
<v Speaker 1>scenes. I'm really playing this up. It's not

00:32:50.525 --> 00:32:51.645
<v Speaker 1>gonna be that cool,

00:32:52.285 --> 00:32:54.205
<v Speaker 1>but it will show the new functionality. So

00:32:54.205 --> 00:32:55.565
<v Speaker 1>if you run that command there,

00:32:56.365 --> 00:32:57.805
<v Speaker 1>let's let's take a look at what happens.

00:32:58.140 --> 00:33:00.220
<v Speaker 0>Hold on. Let's let's let's back up a

00:33:00.220 --> 00:33:02.380
<v Speaker 0>moment here right now. You're you're luring me

00:33:02.380 --> 00:33:04.460
<v Speaker 0>in with advanced mode. I get it. Right?

00:33:04.460 --> 00:33:07.420
<v Speaker 0>You're you're you're catering to my eagle. Right.

00:33:07.420 --> 00:33:09.100
<v Speaker 0>But you're also telling me that I'm not

00:33:09.100 --> 00:33:10.940
<v Speaker 0>security conscious, and then you get me a

00:33:10.940 --> 00:33:12.380
<v Speaker 0>random bit of YAML that you want me

00:33:12.380 --> 00:33:14.755
<v Speaker 0>to apply to my cluster. I know how

00:33:14.755 --> 00:33:16.995
<v Speaker 0>this works. Like, I know your game. So

00:33:16.995 --> 00:33:18.595
<v Speaker 0>I'm gonna look at this first, and I

00:33:18.595 --> 00:33:19.955
<v Speaker 0>know it's gonna interest you.

00:33:20.435 --> 00:33:22.275
<v Speaker 2>Yeah. The you're talking about the link above

00:33:22.275 --> 00:33:24.275
<v Speaker 2>this one. Right? Oh, yeah. No. I'm talking

00:33:24.275 --> 00:33:26.195
<v Speaker 1>about the command above this. You don't have

00:33:26.195 --> 00:33:29.110
<v Speaker 1>to this is this is Marcus. Marcus put

00:33:29.110 --> 00:33:30.870
<v Speaker 1>this link in here. He's the malicious one

00:33:30.870 --> 00:33:31.430
<v Speaker 1>here. So

00:33:32.310 --> 00:33:33.670
<v Speaker 2>In my demo. You just have to run

00:33:33.670 --> 00:33:36.150
<v Speaker 1>a simple CLI command that pulls an arbitrary

00:33:36.150 --> 00:33:38.310
<v Speaker 1>image from our registry. It's not near as

00:33:38.310 --> 00:33:39.029
<v Speaker 1>risky.

00:33:40.150 --> 00:33:40.950
<v Speaker 0>Uh-huh.

00:33:41.910 --> 00:33:42.470
<v Speaker 0>I mean,

00:33:43.635 --> 00:33:45.875
<v Speaker 0>I don't even have Docker run. Oh, no.

00:33:46.115 --> 00:33:47.635
<v Speaker 1>You you don't need it. You won't need

00:33:47.635 --> 00:33:48.195
<v Speaker 1>it.

00:33:49.715 --> 00:33:51.315
<v Speaker 0>But it says no such image. Are you

00:33:51.315 --> 00:33:53.235
<v Speaker 0>sure you pushed this image? Or do I

00:33:53.235 --> 00:33:54.595
<v Speaker 0>need to build it first? Does that how

00:33:54.595 --> 00:33:55.875
<v Speaker 0>Docker registry is worked. Right?

00:33:57.940 --> 00:33:59.860
<v Speaker 1>So, yeah, you can you can pull it.

00:33:59.860 --> 00:34:01.140
<v Speaker 1>So it looks like you got it there.

00:34:01.460 --> 00:34:02.820
<v Speaker 1>Created 292

00:34:02.820 --> 00:34:03.700
<v Speaker 1>ago, you can see.

00:34:04.100 --> 00:34:06.100
<v Speaker 1>But if you run this command, it it

00:34:06.100 --> 00:34:07.860
<v Speaker 1>will take care of everything you need for

00:34:07.860 --> 00:34:08.260
<v Speaker 1>you.

00:34:08.820 --> 00:34:09.940
<v Speaker 0>Alright. I'll trust you.

00:34:10.655 --> 00:34:12.415
<v Speaker 0>I'm not I'm not gonna start tearing apart

00:34:12.415 --> 00:34:14.495
<v Speaker 0>an OCI image just to pick up. I

00:34:15.215 --> 00:34:16.974
<v Speaker 1>all that's inside of this is three

00:34:17.775 --> 00:34:20.815
<v Speaker 1>one YAML file that is three resources concatenated

00:34:20.815 --> 00:34:22.895
<v Speaker 1>together. So we'll we'll look at the contents

00:34:22.895 --> 00:34:23.295
<v Speaker 1>in a minute.

00:34:24.060 --> 00:34:24.700
<v Speaker 1>Try

00:34:24.860 --> 00:34:27.420
<v Speaker 1>kubectl get package again, p k g.

00:34:31.660 --> 00:34:33.340
<v Speaker 2>I feel like I wanna watch this again

00:34:33.340 --> 00:34:35.739
<v Speaker 2>in, like, the the the behind the scene

00:34:35.739 --> 00:34:38.175
<v Speaker 2>commentary version of it and, like, ask Dan

00:34:38.175 --> 00:34:40.255
<v Speaker 2>what what's going on behind some of these

00:34:40.255 --> 00:34:42.815
<v Speaker 2>things? We're we're gonna go to all of

00:34:42.815 --> 00:34:44.015
<v Speaker 1>it. We're gonna get it all.

00:34:44.975 --> 00:34:46.895
<v Speaker 1>But what you'll see here is so we

00:34:46.895 --> 00:34:48.575
<v Speaker 1>had that provider that was already running. Right?

00:34:48.690 --> 00:34:50.849
<v Speaker 1>And then we now have this configuration package

00:34:50.849 --> 00:34:53.330
<v Speaker 1>type, is the Rawkode Equinix metal,

00:34:53.730 --> 00:34:56.449
<v Speaker 1>and it looks like it's installed and healthy.

00:34:57.089 --> 00:34:59.650
<v Speaker 1>So what we should see is run k

00:34:59.650 --> 00:35:00.770
<v Speaker 1>get CRDs

00:35:01.075 --> 00:35:01.875
<v Speaker 1>and

00:35:01.875 --> 00:35:05.315
<v Speaker 1>check and just to grab equinox.metal

00:35:05.315 --> 00:35:06.435
<v Speaker 1>or something like that.

00:35:08.675 --> 00:35:11.875
<v Speaker 1>Yeah. There we go. So this infra's resource

00:35:11.875 --> 00:35:13.795
<v Speaker 1>is what we wanna look at.

00:35:14.275 --> 00:35:17.480
<v Speaker 1>So, basically, what I've done is I've taken

00:35:17.480 --> 00:35:19.560
<v Speaker 1>a just a device resource. So we're not

00:35:19.560 --> 00:35:21.640
<v Speaker 1>composing multiple different types together,

00:35:22.520 --> 00:35:24.440
<v Speaker 1>but I've taken just the device resource and

00:35:24.440 --> 00:35:26.200
<v Speaker 1>create an abstraction over it. And if you

00:35:26.200 --> 00:35:27.320
<v Speaker 1>look at this, this is gonna be a

00:35:27.320 --> 00:35:28.440
<v Speaker 1>pretty small CRD.

00:35:30.125 --> 00:35:32.685
<v Speaker 1>Yeah. I think you're gonna need describe CRD

00:35:32.924 --> 00:35:35.005
<v Speaker 1>and then the name. Yeah. Yeah. Of course.

00:35:36.045 --> 00:35:38.444
<v Speaker 1>And it's only gonna have one field that

00:35:38.444 --> 00:35:39.405
<v Speaker 1>you populate.

00:35:39.405 --> 00:35:41.565
<v Speaker 1>And let me drop in actually in our

00:35:41.565 --> 00:35:42.125
<v Speaker 1>thing here.

00:35:44.300 --> 00:35:46.380
<v Speaker 0>Oh, so this this isn't this is a

00:35:46.380 --> 00:35:47.740
<v Speaker 0>CRD. It's not actually

00:35:48.460 --> 00:35:50.540
<v Speaker 1>Right. Right. An object of the of the

00:35:50.540 --> 00:35:52.700
<v Speaker 0>CRD type. Right. Okay. Right. We'll create that

00:35:52.700 --> 00:35:53.340
<v Speaker 1>in just a minute.

00:35:56.555 --> 00:35:58.635
<v Speaker 0>There we go. So, yeah, if you scroll

00:35:58.635 --> 00:36:00.235
<v Speaker 1>up, it's a

00:36:00.715 --> 00:36:02.795
<v Speaker 1>rather small CRD actually.

00:36:03.435 --> 00:36:05.035
<v Speaker 1>We we get a lot of the the

00:36:05.035 --> 00:36:07.195
<v Speaker 1>stuff here from the Kubernetes API.

00:36:07.355 --> 00:36:08.395
<v Speaker 1>But essentially,

00:36:08.475 --> 00:36:10.315
<v Speaker 1>it just has one field, and that's gonna

00:36:10.315 --> 00:36:11.115
<v Speaker 1>be your host name.

00:36:11.829 --> 00:36:14.710
<v Speaker 1>And if I can get Versus Code to

00:36:15.670 --> 00:36:17.510
<v Speaker 1>open this one second here.

00:36:19.910 --> 00:36:22.790
<v Speaker 1>I'm trying to see if I can get

00:36:24.150 --> 00:36:26.550
<v Speaker 1>another window open that's not the

00:36:27.215 --> 00:36:29.295
<v Speaker 1>the editor that we're in. We're basically gonna

00:36:29.295 --> 00:36:30.655
<v Speaker 1>create an instance of this

00:36:32.175 --> 00:36:33.855
<v Speaker 1>this info resource,

00:36:34.415 --> 00:36:36.655
<v Speaker 1>and we'll see what's happening behind the scenes.

00:36:36.655 --> 00:36:38.335
<v Speaker 1>But let me grab it.

00:36:40.859 --> 00:36:43.020
<v Speaker 0>And so that is great. Oh,

00:36:43.579 --> 00:36:45.500
<v Speaker 0>what we have here? So I just added

00:36:45.500 --> 00:36:47.339
<v Speaker 1>in here. So you'll see this is a

00:36:47.339 --> 00:36:49.339
<v Speaker 1>pretty simple resource here. Right? You just have

00:36:49.339 --> 00:36:51.740
<v Speaker 1>this one host name field and then write

00:36:51.740 --> 00:36:53.500
<v Speaker 1>connection secret to ref, which is just kind

00:36:53.500 --> 00:36:55.385
<v Speaker 1>of where we want the the information to

00:36:55.385 --> 00:36:57.145
<v Speaker 1>go if there's any output from

00:36:57.385 --> 00:36:59.225
<v Speaker 1>the infrastructure that this provisions.

00:36:59.705 --> 00:37:01.785
<v Speaker 1>But feel free go ahead and keep control

00:37:01.785 --> 00:37:03.945
<v Speaker 1>apply this in your cluster, and we can

00:37:03.945 --> 00:37:04.585
<v Speaker 1>see what happens.

00:37:11.370 --> 00:37:13.450
<v Speaker 1>Alright. So since we installed that CRD, we

00:37:13.450 --> 00:37:14.970
<v Speaker 1>can create instances of it,

00:37:15.930 --> 00:37:16.650
<v Speaker 1>and

00:37:16.810 --> 00:37:18.970
<v Speaker 1>we probably won't get too much information there.

00:37:18.970 --> 00:37:21.370
<v Speaker 1>It's not ready yet, but try a k

00:37:21.370 --> 00:37:22.010
<v Speaker 1>get

00:37:23.425 --> 00:37:24.385
<v Speaker 1>Crossplane.

00:37:29.265 --> 00:37:32.305
<v Speaker 0>It's a group annotation? Yeah. Okay. Alright. So

00:37:32.305 --> 00:37:33.825
<v Speaker 1>what you see here at the bottom is

00:37:33.825 --> 00:37:35.345
<v Speaker 1>a packet server device,

00:37:36.010 --> 00:37:38.410
<v Speaker 1>and you'll see that it synced true and

00:37:38.410 --> 00:37:40.090
<v Speaker 1>ready as false. And you'll see some other

00:37:40.090 --> 00:37:41.850
<v Speaker 1>information there, and you'll see that that host

00:37:41.850 --> 00:37:44.650
<v Speaker 1>name Rawkode live. If you switch over to

00:37:44.650 --> 00:37:45.210
<v Speaker 1>your

00:37:45.450 --> 00:37:47.770
<v Speaker 1>Equinix metal console, we should see this spinning

00:37:47.770 --> 00:37:48.650
<v Speaker 1>up also.

00:37:48.970 --> 00:37:50.805
<v Speaker 2>I think you can also k get

00:37:51.125 --> 00:37:52.565
<v Speaker 2>packet there.

00:37:52.645 --> 00:37:54.405
<v Speaker 1>Yeah. I couldn't remember if we added the

00:37:54.405 --> 00:37:56.325
<v Speaker 1>categories to this one or not, so I

00:37:56.325 --> 00:37:57.525
<v Speaker 1>I played it safe.

00:37:58.005 --> 00:37:59.445
<v Speaker 0>There we go. We have a

00:38:00.085 --> 00:38:01.285
<v Speaker 0>well, I mean, I would never spend up

00:38:01.285 --> 00:38:02.880
<v Speaker 0>a CentOS seven machine, So

00:38:03.039 --> 00:38:04.559
<v Speaker 0>you clearly don't know me that well, but

00:38:04.559 --> 00:38:06.559
<v Speaker 0>we do have a machine spinning up. Well,

00:38:06.559 --> 00:38:09.119
<v Speaker 1>let's you you wanna look at what happened?

00:38:09.599 --> 00:38:10.320
<v Speaker 0>I mean,

00:38:11.039 --> 00:38:12.880
<v Speaker 0>I said I was ready for advanced mode,

00:38:12.880 --> 00:38:15.039
<v Speaker 0>but I have no idea what just happened

00:38:15.039 --> 00:38:16.915
<v Speaker 0>here. So Right. Exactly.

00:38:17.155 --> 00:38:19.075
<v Speaker 1>Well well, the nice thing is you don't

00:38:19.075 --> 00:38:21.395
<v Speaker 1>really have an idea what happened, but you

00:38:21.395 --> 00:38:23.795
<v Speaker 1>got your your infrastructure going. Right? Which, you

00:38:23.795 --> 00:38:24.994
<v Speaker 1>know, you didn't have a lot of options

00:38:24.994 --> 00:38:26.115
<v Speaker 1>about what you could do here. You could

00:38:26.115 --> 00:38:27.714
<v Speaker 1>only customize that host name field.

00:38:29.060 --> 00:38:29.620
<v Speaker 1>But

00:38:29.860 --> 00:38:32.020
<v Speaker 1>what's actually happening behind the scenes

00:38:32.580 --> 00:38:35.460
<v Speaker 1>is I've created what's called an XRD,

00:38:35.619 --> 00:38:38.020
<v Speaker 1>a composite resource definition, which is kind of

00:38:38.020 --> 00:38:39.460
<v Speaker 1>akin to a CRD,

00:38:39.540 --> 00:38:41.300
<v Speaker 1>which defines a new type that we want

00:38:41.300 --> 00:38:43.220
<v Speaker 1>to exist. So generally, when you want a

00:38:43.220 --> 00:38:45.685
<v Speaker 1>new CRD type, you know, you create a

00:38:45.685 --> 00:38:48.325
<v Speaker 1>CRD object. Creating an XRD

00:38:48.405 --> 00:38:51.285
<v Speaker 1>gives Crossplane some information about going and creating

00:38:51.285 --> 00:38:53.685
<v Speaker 1>a CRD for you and starting a controller

00:38:53.685 --> 00:38:55.045
<v Speaker 1>to reconcile that.

00:38:55.285 --> 00:38:58.005
<v Speaker 1>And then we also have a composition resource

00:38:58.800 --> 00:38:59.600
<v Speaker 1>that

00:39:00.800 --> 00:39:04.080
<v Speaker 1>that satisfies that XRD, and that includes the

00:39:04.080 --> 00:39:07.120
<v Speaker 1>different actual, you know, manage resources, the device

00:39:07.120 --> 00:39:09.040
<v Speaker 1>in this case that are in that. So

00:39:09.040 --> 00:39:10.960
<v Speaker 1>let me go ahead and copy over into

00:39:10.960 --> 00:39:13.605
<v Speaker 1>the editor the exact contents of that package

00:39:13.605 --> 00:39:14.725
<v Speaker 1>that I had you

00:39:15.285 --> 00:39:16.565
<v Speaker 1>install there.

00:39:16.965 --> 00:39:18.885
<v Speaker 0>Yeah. So let me let me see if

00:39:18.885 --> 00:39:20.725
<v Speaker 0>I got this right then. Alright.

00:39:22.005 --> 00:39:24.965
<v Speaker 0>You've created you're you're storing something in an

00:39:24.965 --> 00:39:27.890
<v Speaker 0>OCI compatible fashion that is actually a collection

00:39:27.890 --> 00:39:30.050
<v Speaker 0>of resources that can be consumed by Kubernetes.

00:39:30.050 --> 00:39:31.730
<v Speaker 0>I'm assuming what I just did when I

00:39:31.730 --> 00:39:32.370
<v Speaker 0>ran

00:39:33.090 --> 00:39:35.570
<v Speaker 0>what did I run? Kube control crossplane.

00:39:35.650 --> 00:39:38.770
<v Speaker 0>Yeah. That's one here. Kube control crossplane install

00:39:38.770 --> 00:39:41.650
<v Speaker 0>configuration. That's configuration lives in an OCI registry,

00:39:42.425 --> 00:39:44.345
<v Speaker 0>but it's really just a collection of Kubernetes

00:39:44.345 --> 00:39:46.345
<v Speaker 0>resources that you're applying to my cluster for

00:39:46.345 --> 00:39:48.585
<v Speaker 0>me. So it's just a really convenient

00:39:48.744 --> 00:39:52.984
<v Speaker 0>I mean, it's essentially replacing comply fhtpsgethub.com

00:39:52.984 --> 00:39:55.320
<v Speaker 0>blah blah blah. Right? Is that Right. Exactly.

00:39:55.560 --> 00:39:57.960
<v Speaker 1>And as that grows to be more complex,

00:39:58.680 --> 00:40:00.680
<v Speaker 1>you get kind of more and more benefit

00:40:00.680 --> 00:40:01.480
<v Speaker 1>out of that.

00:40:03.240 --> 00:40:05.000
<v Speaker 1>And and also another thing you get is

00:40:05.000 --> 00:40:06.520
<v Speaker 1>the ability to kind of share this with

00:40:06.520 --> 00:40:08.760
<v Speaker 1>other people in an installable manner.

00:40:09.245 --> 00:40:09.885
<v Speaker 0>So,

00:40:10.125 --> 00:40:11.725
<v Speaker 0>I mean, I think as as people that

00:40:11.725 --> 00:40:13.965
<v Speaker 0>are working with Kubernetes, right, we're we're always

00:40:13.965 --> 00:40:17.005
<v Speaker 0>applying remote matter. Not always. Once

00:40:17.005 --> 00:40:18.285
<v Speaker 0>they don't care about security,

00:40:18.445 --> 00:40:20.925
<v Speaker 0>but generally sometimes apply in remote manifest. And

00:40:20.925 --> 00:40:22.605
<v Speaker 0>that's one of the challenges with that is

00:40:22.605 --> 00:40:24.430
<v Speaker 0>is that if you wanna be able to

00:40:24.430 --> 00:40:26.510
<v Speaker 0>modify that in flight before it has Kubernetes

00:40:26.510 --> 00:40:28.190
<v Speaker 0>API, you generally gonna need to do some

00:40:28.190 --> 00:40:30.990
<v Speaker 0>weird bash maneuvers or or download it and

00:40:30.990 --> 00:40:32.030
<v Speaker 0>make the modifications.

00:40:32.350 --> 00:40:33.710
<v Speaker 0>The first thing that struck me is cool

00:40:33.710 --> 00:40:35.390
<v Speaker 0>about the OCI format is do I have

00:40:35.390 --> 00:40:38.315
<v Speaker 0>a ways to inject configuration into the the

00:40:38.315 --> 00:40:40.635
<v Speaker 0>Crossplane configurate? Can I modify that configuration in

00:40:40.635 --> 00:40:41.355
<v Speaker 0>some way?

00:40:41.915 --> 00:40:43.515
<v Speaker 1>So as it's coming through,

00:40:43.835 --> 00:40:47.035
<v Speaker 1>right now, no. You could during that install

00:40:47.195 --> 00:40:50.075
<v Speaker 1>for providers, especially where it's actually creating a

00:40:50.075 --> 00:40:52.875
<v Speaker 1>deployment that's gonna reconcile them. We want to

00:40:52.875 --> 00:40:54.610
<v Speaker 1>make it so that folks can

00:40:55.090 --> 00:40:56.610
<v Speaker 1>go ahead and modify,

00:40:57.570 --> 00:40:59.490
<v Speaker 1>you know, how they how that's actually installed.

00:40:59.490 --> 00:41:01.730
<v Speaker 1>So kind of like install time configuration.

00:41:02.050 --> 00:41:04.050
<v Speaker 1>So I definitely think that's something that will

00:41:04.050 --> 00:41:06.515
<v Speaker 1>happen. One of the benefits you get of

00:41:06.515 --> 00:41:08.275
<v Speaker 1>installing via Crossplane

00:41:08.275 --> 00:41:10.595
<v Speaker 1>is that it's gonna do some validation for

00:41:10.595 --> 00:41:11.075
<v Speaker 1>you.

00:41:11.795 --> 00:41:13.955
<v Speaker 1>And so, like, if this OCI image, you

00:41:13.955 --> 00:41:16.035
<v Speaker 1>know, had a bunch of nonsense in it,

00:41:16.035 --> 00:41:17.715
<v Speaker 1>it's not gonna get applied to your cluster.

00:41:17.715 --> 00:41:19.955
<v Speaker 1>Right? Crossplane's gonna parse this and say this

00:41:19.955 --> 00:41:20.675
<v Speaker 1>is valid

00:41:20.915 --> 00:41:21.795
<v Speaker 1>or it's not.

00:41:23.430 --> 00:41:25.830
<v Speaker 1>And then you can kind of just go

00:41:25.830 --> 00:41:26.470
<v Speaker 1>from there.

00:41:27.830 --> 00:41:29.750
<v Speaker 1>But if if you hop over back to

00:41:29.750 --> 00:41:32.550
<v Speaker 1>the editor again, I've actually pasted the contents

00:41:32.550 --> 00:41:34.150
<v Speaker 1>of what's in this image

00:41:34.790 --> 00:41:35.670
<v Speaker 1>into

00:41:35.830 --> 00:41:36.950
<v Speaker 1>the configuration

00:41:36.950 --> 00:41:37.750
<v Speaker 1>directory here.

00:41:38.445 --> 00:41:40.285
<v Speaker 1>And so the first thing, what you're looking

00:41:40.285 --> 00:41:42.445
<v Speaker 1>at there is the composite resource definition.

00:41:42.685 --> 00:41:44.365
<v Speaker 1>So you'll see this looks a lot like

00:41:44.365 --> 00:41:46.525
<v Speaker 1>a CRD, but it's a little bit, you

00:41:46.525 --> 00:41:47.565
<v Speaker 1>know, scaled down.

00:41:48.045 --> 00:41:49.885
<v Speaker 1>And it's pretty simple. We're just defining a

00:41:49.885 --> 00:41:51.565
<v Speaker 1>new resource type called infra.

00:41:53.220 --> 00:41:54.820
<v Speaker 1>And so you saw that, you know, we

00:41:54.820 --> 00:41:57.140
<v Speaker 1>create an instance of infra. So the the

00:41:57.140 --> 00:41:59.940
<v Speaker 1>result of creating this composite resource definition or

00:41:59.940 --> 00:42:02.580
<v Speaker 1>XRD as we call it is for Crossplane

00:42:02.580 --> 00:42:04.580
<v Speaker 1>to create a new CRD for you

00:42:05.075 --> 00:42:06.595
<v Speaker 1>and for it to start the controller to

00:42:06.595 --> 00:42:10.035
<v Speaker 1>reconcile that. And that reconciliation loop that runs

00:42:10.035 --> 00:42:12.435
<v Speaker 1>watches for instances of these to be created,

00:42:12.755 --> 00:42:14.595
<v Speaker 1>and then it looks for compositions,

00:42:14.595 --> 00:42:15.875
<v Speaker 1>which if if you switch over to that

00:42:15.875 --> 00:42:17.395
<v Speaker 1>other file that I added.

00:42:17.954 --> 00:42:20.275
<v Speaker 1>This composition, you'll see, has a composite type

00:42:20.275 --> 00:42:20.595
<v Speaker 1>ref,

00:42:21.210 --> 00:42:24.090
<v Speaker 1>and it references that same XRD that we

00:42:24.090 --> 00:42:26.890
<v Speaker 1>mentioned, which basically says, I can satisfy this.

00:42:26.970 --> 00:42:28.410
<v Speaker 1>So you could have a number of different

00:42:28.410 --> 00:42:31.210
<v Speaker 1>compositions that satisfy a single XRD,

00:42:31.369 --> 00:42:33.450
<v Speaker 1>and that can be beneficial if you want,

00:42:33.690 --> 00:42:36.090
<v Speaker 1>you know, different types of configurations to meet,

00:42:37.035 --> 00:42:39.115
<v Speaker 1>you know, a a generic abstraction.

00:42:39.115 --> 00:42:40.875
<v Speaker 1>So once again, the easy one to think

00:42:40.875 --> 00:42:43.515
<v Speaker 1>of is if you had, like, an AWS,

00:42:43.515 --> 00:42:45.595
<v Speaker 1>GCP, and Azure kind of backing for a

00:42:45.595 --> 00:42:47.835
<v Speaker 1>a maybe, like, if or let's say in

00:42:47.835 --> 00:42:48.555
<v Speaker 1>this case, you had

00:42:49.400 --> 00:42:51.240
<v Speaker 1>this one which is Equinix metal

00:42:51.720 --> 00:42:53.640
<v Speaker 1>device, and then you also had one that

00:42:53.640 --> 00:42:54.360
<v Speaker 1>was like

00:42:55.400 --> 00:42:57.880
<v Speaker 1>a AWS EC two instance or something like

00:42:57.880 --> 00:42:58.360
<v Speaker 1>that.

00:42:58.840 --> 00:43:00.040
<v Speaker 1>On the XRD,

00:43:00.040 --> 00:43:01.875
<v Speaker 1>you could actually or on the instance that

00:43:01.875 --> 00:43:03.315
<v Speaker 1>we created of it, you could use a

00:43:03.315 --> 00:43:05.635
<v Speaker 1>selector, which will select it by label,

00:43:06.035 --> 00:43:08.115
<v Speaker 1>or you could reference one of those compositions

00:43:08.115 --> 00:43:08.915
<v Speaker 1>directly,

00:43:09.395 --> 00:43:11.235
<v Speaker 1>but all through the same resource.

00:43:11.875 --> 00:43:13.875
<v Speaker 1>And then in line in this resource or

00:43:13.875 --> 00:43:16.589
<v Speaker 1>in this composition here, you'll see we have

00:43:16.589 --> 00:43:18.190
<v Speaker 1>the device type. And then we have some

00:43:18.190 --> 00:43:21.390
<v Speaker 1>patches which are basically saying from that abstract,

00:43:22.029 --> 00:43:23.790
<v Speaker 1>go ahead and overwrite this field

00:43:24.430 --> 00:43:26.990
<v Speaker 1>in the body of this resource we have

00:43:26.990 --> 00:43:27.390
<v Speaker 1>in line.

00:43:28.494 --> 00:43:31.215
<v Speaker 1>And then also things like using these transforms,

00:43:31.215 --> 00:43:33.055
<v Speaker 1>which we have some simple transforms

00:43:33.055 --> 00:43:34.335
<v Speaker 1>for you to be able to choose the

00:43:34.335 --> 00:43:36.655
<v Speaker 1>name. So in this case, it's taking the

00:43:36.655 --> 00:43:37.775
<v Speaker 1>UID

00:43:37.855 --> 00:43:39.215
<v Speaker 1>of the

00:43:39.789 --> 00:43:42.190
<v Speaker 1>the abstract type, the input type we created,

00:43:42.349 --> 00:43:44.509
<v Speaker 1>and it's saying write the connection secret ref

00:43:44.509 --> 00:43:46.829
<v Speaker 1>for this object to that UID

00:43:47.230 --> 00:43:49.470
<v Speaker 1>post grad SQL, which obviously doesn't make sense

00:43:49.470 --> 00:43:51.230
<v Speaker 1>here, but it was copied from something else.

00:43:52.725 --> 00:43:53.365
<v Speaker 1>And

00:43:53.605 --> 00:43:55.205
<v Speaker 1>and then all of these fields you see

00:43:55.205 --> 00:43:56.245
<v Speaker 1>here in the middle,

00:43:57.365 --> 00:43:59.845
<v Speaker 1>which are, you know, configuring the actual device,

00:44:00.325 --> 00:44:02.805
<v Speaker 1>those could all be in exposed in some

00:44:02.805 --> 00:44:04.245
<v Speaker 1>way or another, mapped in some way or

00:44:04.245 --> 00:44:06.965
<v Speaker 1>another to the abstract type that we created.

00:44:06.965 --> 00:44:08.670
<v Speaker 1>So in this case, we're just saying that

00:44:08.670 --> 00:44:10.190
<v Speaker 1>we want the host name to be exposed

00:44:10.190 --> 00:44:10.910
<v Speaker 1>on it.

00:44:11.470 --> 00:44:13.869
<v Speaker 1>But especially it's especially useful if you have

00:44:13.869 --> 00:44:16.910
<v Speaker 1>something that has, like, a common configuration across.

00:44:17.390 --> 00:44:19.390
<v Speaker 1>So you could have maybe a map

00:44:19.950 --> 00:44:20.910
<v Speaker 1>that was

00:44:22.005 --> 00:44:24.964
<v Speaker 1>on packet or on Equinix metal mapped, you

00:44:24.964 --> 00:44:27.525
<v Speaker 1>know, or small to c one small x

00:44:27.525 --> 00:44:28.405
<v Speaker 1>86.

00:44:29.125 --> 00:44:31.525
<v Speaker 1>And on AWS, it was like, you know,

00:44:31.525 --> 00:44:34.164
<v Speaker 1>AWS standard two or whatever, you know, their

00:44:34.164 --> 00:44:36.220
<v Speaker 1>instance types are called. You can kind of

00:44:36.220 --> 00:44:37.980
<v Speaker 1>map that so you can have a consistent

00:44:37.980 --> 00:44:40.460
<v Speaker 1>translation to to different backing things.

00:44:40.700 --> 00:44:42.460
<v Speaker 1>And you can have any number of resources

00:44:42.460 --> 00:44:43.980
<v Speaker 1>in line here. So we could have also

00:44:43.980 --> 00:44:44.700
<v Speaker 1>created,

00:44:44.780 --> 00:44:46.540
<v Speaker 1>you know, a VLAN or or any of

00:44:46.540 --> 00:44:48.620
<v Speaker 1>the other resources that are created

00:44:49.180 --> 00:44:50.780
<v Speaker 1>with the Equinix metal provider.

00:44:52.405 --> 00:44:55.365
<v Speaker 0>Cool. Alright. I actually I think I understood.

00:44:57.285 --> 00:44:59.285
<v Speaker 0>I'll say I'll I'll I'll be, you know,

00:44:59.285 --> 00:45:00.885
<v Speaker 0>humble. 96%.

00:45:01.125 --> 00:45:03.845
<v Speaker 1>But That's pretty good. Yeah. There's a lot

00:45:03.845 --> 00:45:05.365
<v Speaker 1>there's a lot of moving parts here. I'm

00:45:05.444 --> 00:45:07.510
<v Speaker 1>I that's better than I understood less of

00:45:07.510 --> 00:45:09.349
<v Speaker 1>it and I was saying it. So I

00:45:09.349 --> 00:45:10.710
<v Speaker 0>know. I'm I'm gonna have to ask Marcus

00:45:10.710 --> 00:45:13.510
<v Speaker 0>for a proper translation later, but let's

00:45:13.589 --> 00:45:15.109
<v Speaker 0>I'm curious. Right? So

00:45:15.589 --> 00:45:17.990
<v Speaker 0>this composition CRD is just a way for

00:45:17.990 --> 00:45:20.309
<v Speaker 0>me to collectively add this stuff together. Right?

00:45:20.325 --> 00:45:22.405
<v Speaker 0>But there's there's nothing I I could deploy

00:45:22.405 --> 00:45:24.005
<v Speaker 0>that on its own. Is that right?

00:45:24.325 --> 00:45:27.285
<v Speaker 1>Yeah. Absolutely. There's some fields missing here. Obviously,

00:45:27.285 --> 00:45:29.605
<v Speaker 1>you'll you'll notice that the

00:45:30.565 --> 00:45:32.805
<v Speaker 1>the metadata is missing, so you don't have,

00:45:32.805 --> 00:45:34.940
<v Speaker 1>like, a name for the device up there,

00:45:34.940 --> 00:45:37.500
<v Speaker 1>which is obviously required for a resource. That's

00:45:37.500 --> 00:45:40.540
<v Speaker 1>actually getting replaced automatically by the machinery in

00:45:40.540 --> 00:45:41.260
<v Speaker 1>Crossplane.

00:45:41.579 --> 00:45:43.420
<v Speaker 1>But, yeah, you can call this here.

00:45:43.819 --> 00:45:45.980
<v Speaker 1>I think that everything else

00:45:46.865 --> 00:45:47.744
<v Speaker 1>should be

00:45:47.984 --> 00:45:48.625
<v Speaker 1>okay.

00:45:48.944 --> 00:45:51.025
<v Speaker 1>So, yeah, this is kind of the the

00:45:51.025 --> 00:45:51.825
<v Speaker 1>original

00:45:51.825 --> 00:45:54.224
<v Speaker 1>kind of initial flow that folks will go

00:45:54.224 --> 00:45:55.905
<v Speaker 1>through when they're using Crossplane.

00:45:56.464 --> 00:45:59.105
<v Speaker 1>You don't need the name. That's everything that's

00:45:59.105 --> 00:46:01.025
<v Speaker 2>in the box. Is there anything that's not

00:46:01.025 --> 00:46:02.840
<v Speaker 2>in the box that you get? Do you

00:46:02.840 --> 00:46:05.160
<v Speaker 2>get something extra like our back?

00:46:06.440 --> 00:46:08.680
<v Speaker 1>With the when you say the box,

00:46:09.080 --> 00:46:10.760
<v Speaker 1>what do you mean? Yeah. So the the

00:46:10.760 --> 00:46:13.400
<v Speaker 2>package. Right? So the the

00:46:13.480 --> 00:46:14.600
<v Speaker 2>the configuration

00:46:14.600 --> 00:46:15.400
<v Speaker 2>package

00:46:16.255 --> 00:46:18.655
<v Speaker 2>or what are calling an OCI image

00:46:19.055 --> 00:46:20.015
<v Speaker 2>included

00:46:21.055 --> 00:46:21.775
<v Speaker 2>that

00:46:22.015 --> 00:46:22.975
<v Speaker 2>XRD

00:46:23.455 --> 00:46:24.175
<v Speaker 2>and

00:46:25.535 --> 00:46:28.175
<v Speaker 2>and The composition. To apply the composition to

00:46:28.175 --> 00:46:29.690
<v Speaker 2>apply for it. Mhmm.

00:46:30.250 --> 00:46:32.730
<v Speaker 2>When it when that gets installed or applied,

00:46:34.010 --> 00:46:36.089
<v Speaker 2>like like what David's saying, you know, I

00:46:36.089 --> 00:46:38.730
<v Speaker 2>could have just cube CTL applied this exact

00:46:38.809 --> 00:46:39.690
<v Speaker 2>output.

00:46:39.769 --> 00:46:41.130
<v Speaker 2>Mhmm. Is there anything

00:46:42.250 --> 00:46:45.315
<v Speaker 2>in addition to that? Like like, for example,

00:46:45.315 --> 00:46:46.995
<v Speaker 2>is RBAC being generated?

00:46:47.075 --> 00:46:48.675
<v Speaker 2>And this is coming from my

00:46:49.155 --> 00:46:51.875
<v Speaker 2>my knowing how things used to be and

00:46:51.875 --> 00:46:54.435
<v Speaker 2>how things are now and and wondering about

00:46:55.075 --> 00:46:58.289
<v Speaker 2>the changes. Yep. Absolutely. So in terms of

00:46:58.289 --> 00:46:59.089
<v Speaker 1>RBAC,

00:46:59.089 --> 00:47:00.849
<v Speaker 1>there's a number of different things. So when

00:47:00.849 --> 00:47:02.130
<v Speaker 1>you install a provider,

00:47:02.369 --> 00:47:04.690
<v Speaker 1>yes, we are creating the RBAC for that

00:47:04.690 --> 00:47:06.210
<v Speaker 1>controller to be able to control the things

00:47:06.210 --> 00:47:07.170
<v Speaker 1>that you install.

00:47:07.890 --> 00:47:09.569
<v Speaker 1>Some of the RBAC, we don't have to

00:47:09.569 --> 00:47:12.204
<v Speaker 1>worry about as much now that that Marcus

00:47:12.204 --> 00:47:14.365
<v Speaker 1>had worked on because we don't have namespace

00:47:14.365 --> 00:47:15.565
<v Speaker 1>scoped installs,

00:47:15.724 --> 00:47:18.045
<v Speaker 1>and we also don't have claims anymore. So

00:47:18.045 --> 00:47:20.365
<v Speaker 1>there aren't things outside of the provider

00:47:21.085 --> 00:47:23.484
<v Speaker 1>that say, please give me RBAC to manage

00:47:23.484 --> 00:47:25.430
<v Speaker 1>this. We're saying, like, you need to install

00:47:25.430 --> 00:47:27.670
<v Speaker 1>it. There is we have another resource called

00:47:27.670 --> 00:47:30.390
<v Speaker 1>a provider config usage, which kinda does behind

00:47:30.390 --> 00:47:31.350
<v Speaker 1>the scenes stuff

00:47:31.750 --> 00:47:33.670
<v Speaker 1>that it needs access to as well.

00:47:34.070 --> 00:47:36.150
<v Speaker 1>But also in the future, we'll have the

00:47:36.150 --> 00:47:38.630
<v Speaker 1>ability to request extra permissions and and ways

00:47:38.630 --> 00:47:40.325
<v Speaker 1>to lock that down and stuff similar to

00:47:40.325 --> 00:47:41.525
<v Speaker 1>how we did in the past.

00:47:41.924 --> 00:47:45.125
<v Speaker 1>A configuration obviously isn't starting a controller. Right?

00:47:45.125 --> 00:47:47.285
<v Speaker 1>So there isn't RRAC that needs to be

00:47:47.285 --> 00:47:49.045
<v Speaker 1>created and given to a service account for

00:47:49.045 --> 00:47:49.845
<v Speaker 1>a controller.

00:47:50.404 --> 00:47:52.805
<v Speaker 1>But in order for Crossplane to be able

00:47:52.805 --> 00:47:52.964
<v Speaker 1>to

00:47:53.900 --> 00:47:56.460
<v Speaker 1>create a CRD and then manage instances of

00:47:56.460 --> 00:47:57.500
<v Speaker 1>that CRD,

00:47:57.500 --> 00:47:59.820
<v Speaker 1>it needs to be given our back to

00:47:59.820 --> 00:48:00.780
<v Speaker 1>do that. Right?

00:48:01.420 --> 00:48:03.740
<v Speaker 1>And so one way that, you know, in

00:48:03.740 --> 00:48:06.140
<v Speaker 1>the past, the the package manager ran as

00:48:06.140 --> 00:48:07.180
<v Speaker 1>cluster admin,

00:48:07.420 --> 00:48:09.684
<v Speaker 1>and it could basically just sort of do

00:48:09.684 --> 00:48:10.645
<v Speaker 1>what it pleased.

00:48:11.365 --> 00:48:13.845
<v Speaker 1>Now Crossplane actually runs with a pretty scoped

00:48:13.845 --> 00:48:15.765
<v Speaker 1>role by default, and the package manager is

00:48:15.765 --> 00:48:17.125
<v Speaker 1>built into Crossplane.

00:48:18.085 --> 00:48:20.165
<v Speaker 1>And then we have a separate r back

00:48:20.165 --> 00:48:23.045
<v Speaker 1>manager. So if you run k get pods,

00:48:23.204 --> 00:48:25.690
<v Speaker 1>in the Crossplane system namespace or just all,

00:48:26.970 --> 00:48:29.290
<v Speaker 1>you'll see that there's an RBAC manager running.

00:48:29.290 --> 00:48:33.210
<v Speaker 1>The RBAC manager solely is responsible for handling

00:48:33.210 --> 00:48:35.610
<v Speaker 1>the creation of, you know, roles that are

00:48:35.610 --> 00:48:36.730
<v Speaker 1>given to either Crossplane

00:48:36.965 --> 00:48:39.685
<v Speaker 1>or to providers that are installed. Basically, Crossplane

00:48:39.685 --> 00:48:42.805
<v Speaker 1>itself doesn't produce any roles. It it says,

00:48:42.805 --> 00:48:44.565
<v Speaker 1>you know, I will put these labels on

00:48:44.565 --> 00:48:46.405
<v Speaker 1>this thing and ask the RBAC manager to

00:48:46.405 --> 00:48:47.605
<v Speaker 1>do it for me essentially.

00:48:48.245 --> 00:48:50.565
<v Speaker 1>And what that does is, you know, obviously,

00:48:50.565 --> 00:48:51.445
<v Speaker 1>there can be,

00:48:51.765 --> 00:48:54.980
<v Speaker 1>some some danger with being able to create

00:48:54.980 --> 00:48:56.500
<v Speaker 1>arbitrary RBAC.

00:48:56.580 --> 00:48:58.980
<v Speaker 1>So we isolate that to a single process,

00:48:58.980 --> 00:49:01.140
<v Speaker 1>and you can actually deploy Crossplane without the

00:49:01.140 --> 00:49:03.540
<v Speaker 1>RBAC manager where you're basically saying,

00:49:03.780 --> 00:49:06.580
<v Speaker 1>don't create RBAC for me. I'll either, you

00:49:06.580 --> 00:49:09.075
<v Speaker 1>know, just go outside of this or I

00:49:09.075 --> 00:49:11.315
<v Speaker 1>will manually create the RBAC myself.

00:49:11.635 --> 00:49:13.715
<v Speaker 1>So we have a really strong separation of

00:49:13.715 --> 00:49:14.675
<v Speaker 1>concern now

00:49:15.235 --> 00:49:17.235
<v Speaker 1>between that RBAC and

00:49:17.555 --> 00:49:19.875
<v Speaker 1>kind of the actual installation of these packages.

00:49:20.850 --> 00:49:22.850
<v Speaker 1>Another thing to mention in terms of things

00:49:22.850 --> 00:49:23.970
<v Speaker 1>that come along

00:49:24.850 --> 00:49:26.290
<v Speaker 1>with a

00:49:26.530 --> 00:49:28.930
<v Speaker 1>with installing any type of package is let

00:49:28.930 --> 00:49:31.250
<v Speaker 1>me grab this from my other

00:49:32.850 --> 00:49:35.090
<v Speaker 1>repo here. Every package so I left one

00:49:35.090 --> 00:49:36.865
<v Speaker 1>thing out that's also in this package.

00:49:37.265 --> 00:49:39.985
<v Speaker 1>Every package has to have a crossplane.yaml

00:49:39.985 --> 00:49:40.785
<v Speaker 1>in it.

00:49:41.665 --> 00:49:42.785
<v Speaker 1>And the crossplane.yaml

00:49:42.785 --> 00:49:45.345
<v Speaker 1>basically says, I am this type of package

00:49:45.345 --> 00:49:48.145
<v Speaker 1>and I intend to do these sorts of

00:49:48.145 --> 00:49:48.305
<v Speaker 1>things.

00:49:49.200 --> 00:49:52.240
<v Speaker 1>In this case, it's relatively straightforward. Right? We

00:49:52.240 --> 00:49:53.600
<v Speaker 1>don't even have any spec.

00:49:54.080 --> 00:49:55.520
<v Speaker 1>What you actually can do,

00:49:56.160 --> 00:49:57.599
<v Speaker 1>and more of this will be supported in

00:49:57.599 --> 00:49:58.240
<v Speaker 1>the future,

00:49:58.480 --> 00:50:00.800
<v Speaker 1>is add in things like, depend on these

00:50:00.800 --> 00:50:02.640
<v Speaker 1>other providers being present, or I depend on

00:50:02.640 --> 00:50:05.244
<v Speaker 1>these other configurations being present. And, you know,

00:50:05.244 --> 00:50:07.325
<v Speaker 1>the first line of defense would be, okay.

00:50:07.325 --> 00:50:08.845
<v Speaker 1>We just won't let allow you to install

00:50:08.845 --> 00:50:10.045
<v Speaker 1>if those aren't present.

00:50:10.605 --> 00:50:12.525
<v Speaker 1>Second line would be, we'll go ahead and

00:50:12.525 --> 00:50:14.685
<v Speaker 1>get those for you and install them automatically.

00:50:14.925 --> 00:50:16.925
<v Speaker 1>Other things you can do here is specify

00:50:16.779 --> 00:50:19.420
<v Speaker 1>a minimum Crossplane version itself you need. So

00:50:19.420 --> 00:50:21.660
<v Speaker 1>Crossplane will say, what version am I running

00:50:21.660 --> 00:50:22.220
<v Speaker 1>as?

00:50:22.779 --> 00:50:24.460
<v Speaker 1>And make sure that when it installs a

00:50:24.460 --> 00:50:25.099
<v Speaker 1>package

00:50:25.740 --> 00:50:28.059
<v Speaker 1>that, you know, it's compatible with that version

00:50:28.059 --> 00:50:30.425
<v Speaker 1>and it will reject it if not. And

00:50:30.425 --> 00:50:32.105
<v Speaker 1>then there's kind of like arbitrary

00:50:32.105 --> 00:50:33.625
<v Speaker 1>other things you could add in

00:50:34.185 --> 00:50:35.705
<v Speaker 1>to get the benefit, you know, that the

00:50:35.705 --> 00:50:37.785
<v Speaker 1>package manager will kind of set up for

00:50:37.785 --> 00:50:38.265
<v Speaker 1>you.

00:50:41.385 --> 00:50:42.105
<v Speaker 0>Cool.

00:50:43.305 --> 00:50:45.819
<v Speaker 0>That's a lot. I mean, that it's very

00:50:45.819 --> 00:50:46.780
<v Speaker 0>cool system.

00:50:47.099 --> 00:50:47.740
<v Speaker 0>Now

00:50:48.780 --> 00:50:51.020
<v Speaker 0>okay. Before I start deviate from your plan,

00:50:51.020 --> 00:50:52.460
<v Speaker 0>is there is there anything else that you

00:50:52.619 --> 00:50:54.059
<v Speaker 0>what are gonna go into next before I

00:50:54.059 --> 00:50:55.980
<v Speaker 0>I throw I throw a spanner in the

00:50:55.980 --> 00:50:58.619
<v Speaker 0>works? So so you are welcome to do

00:50:58.619 --> 00:51:01.175
<v Speaker 1>whatever you want. If you want to do

00:51:01.175 --> 00:51:03.975
<v Speaker 1>something else that might be interesting is we

00:51:03.975 --> 00:51:05.975
<v Speaker 1>could have you build your own configuration,

00:51:05.975 --> 00:51:07.735
<v Speaker 1>push it, install it, and get some of

00:51:07.735 --> 00:51:08.935
<v Speaker 1>that flow as well.

00:51:09.655 --> 00:51:10.215
<v Speaker 1>So,

00:51:10.535 --> 00:51:12.135
<v Speaker 1>you know, I'll I'll leave up to you

00:51:12.135 --> 00:51:13.495
<v Speaker 1>what next steps we do, though.

00:51:14.369 --> 00:51:16.450
<v Speaker 0>So what I'm thinking is I I I

00:51:16.450 --> 00:51:17.650
<v Speaker 0>always try to look at this through the

00:51:17.650 --> 00:51:19.329
<v Speaker 0>lens of someone who's just watching the video

00:51:19.329 --> 00:51:21.010
<v Speaker 0>either live or or or later. And they're

00:51:21.010 --> 00:51:22.529
<v Speaker 0>like, okay. How how am I gonna apply

00:51:22.529 --> 00:51:24.050
<v Speaker 0>this to my own workflow?

00:51:24.369 --> 00:51:25.010
<v Speaker 0>Now

00:51:25.490 --> 00:51:27.170
<v Speaker 0>I think it's really cool that we spun

00:51:27.170 --> 00:51:28.955
<v Speaker 0>up a Rawkode live and I'm assuming if

00:51:28.955 --> 00:51:30.475
<v Speaker 0>I hit refresh, we're gonna see the the

00:51:30.475 --> 00:51:32.875
<v Speaker 0>Debian one just chilling there too. But

00:51:36.235 --> 00:51:38.475
<v Speaker 0>broke my Debian one. I'm sure my fault.

00:51:38.475 --> 00:51:39.275
<v Speaker 0>Anyway,

00:51:40.395 --> 00:51:42.680
<v Speaker 0>we've not done anything with that machine. Now

00:51:42.680 --> 00:51:44.120
<v Speaker 0>what I was thinking, is it gonna be

00:51:44.120 --> 00:51:45.800
<v Speaker 0>as simple as can I just put user

00:51:45.800 --> 00:51:47.800
<v Speaker 0>data here and then have that do something?

00:51:47.800 --> 00:51:49.480
<v Speaker 0>How do what's what's the next step here

00:51:49.480 --> 00:51:52.600
<v Speaker 0>to get software running on this machine? Yeah.

00:51:52.600 --> 00:51:53.320
<v Speaker 1>For sure. So,

00:51:54.535 --> 00:51:56.615
<v Speaker 1>obviously, it kind of depends on the sort

00:51:56.615 --> 00:51:59.095
<v Speaker 1>of thing you're provisioning. If it's a, like,

00:51:59.095 --> 00:52:00.615
<v Speaker 1>database or something like that, you might wanna

00:52:00.615 --> 00:52:01.975
<v Speaker 1>run some SQL commands.

00:52:02.295 --> 00:52:04.855
<v Speaker 1>And it depends on how the provider itself,

00:52:05.975 --> 00:52:08.770
<v Speaker 1>you know, exposes information to you. And this

00:52:08.770 --> 00:52:10.210
<v Speaker 1>also gets to something else that I think

00:52:10.210 --> 00:52:11.250
<v Speaker 1>we're gonna have

00:52:11.410 --> 00:52:13.570
<v Speaker 1>a TVS on with both y'all,

00:52:14.210 --> 00:52:15.330
<v Speaker 1>hopefully soon.

00:52:16.690 --> 00:52:18.530
<v Speaker 1>But and I just dropped

00:52:18.530 --> 00:52:21.625
<v Speaker 1>in the editor here a link to our

00:52:21.625 --> 00:52:24.105
<v Speaker 1>documentation site that has all the different fields

00:52:24.105 --> 00:52:25.145
<v Speaker 1>that are supported.

00:52:26.585 --> 00:52:27.865
<v Speaker 1>And so you can look there. There is

00:52:27.865 --> 00:52:29.224
<v Speaker 1>a user data field, so we can do

00:52:29.224 --> 00:52:30.905
<v Speaker 1>that in this case.

00:52:31.625 --> 00:52:34.100
<v Speaker 1>But something that Marcus and I worked on

00:52:34.100 --> 00:52:35.860
<v Speaker 1>on the last TVS episode we did was

00:52:35.860 --> 00:52:37.300
<v Speaker 1>a provider SSH.

00:52:37.380 --> 00:52:38.980
<v Speaker 1>So you can imagine

00:52:39.780 --> 00:52:42.340
<v Speaker 1>if you have a composition,

00:52:42.660 --> 00:52:44.100
<v Speaker 1>you could put I think I think we

00:52:44.100 --> 00:52:46.580
<v Speaker 1>called it script was the the API type

00:52:46.765 --> 00:52:48.845
<v Speaker 1>that we created for provider SSH.

00:52:49.005 --> 00:52:49.485
<v Speaker 1>So

00:52:50.205 --> 00:52:52.605
<v Speaker 1>this this really shows the power of configuration,

00:52:52.605 --> 00:52:54.125
<v Speaker 1>I think. Let's say you had a configuration

00:52:54.125 --> 00:52:54.925
<v Speaker 1>package,

00:52:55.165 --> 00:52:56.925
<v Speaker 1>and in that crossplane.yaml,

00:52:56.925 --> 00:52:58.525
<v Speaker 1>you said, I depend on

00:52:59.005 --> 00:52:59.805
<v Speaker 1>provider

00:52:59.805 --> 00:53:03.150
<v Speaker 1>Equinix metal, and I depend on provider SSH.

00:53:03.230 --> 00:53:05.870
<v Speaker 1>And I have this composition which includes a

00:53:05.870 --> 00:53:08.030
<v Speaker 1>device and a script object in it.

00:53:08.430 --> 00:53:10.270
<v Speaker 1>And that script object has a reference to

00:53:10.270 --> 00:53:12.510
<v Speaker 1>the device or somehow is able to get

00:53:12.510 --> 00:53:14.735
<v Speaker 1>its connection information from it. I have an

00:53:14.735 --> 00:53:18.175
<v Speaker 1>abstract type that is, you know, device with

00:53:18.175 --> 00:53:20.655
<v Speaker 1>script run, you know, or something like that.

00:53:21.135 --> 00:53:23.295
<v Speaker 1>And I expose whatever fields I want there.

00:53:23.295 --> 00:53:25.055
<v Speaker 1>And then when I actually create an instance

00:53:25.055 --> 00:53:26.655
<v Speaker 1>of that device with script run,

00:53:27.789 --> 00:53:29.789
<v Speaker 1>it spins up a device and it spins

00:53:29.789 --> 00:53:31.710
<v Speaker 1>up this script resource

00:53:31.789 --> 00:53:33.470
<v Speaker 1>which waits for that device to come ready

00:53:33.470 --> 00:53:35.869
<v Speaker 1>and then runs a command on it. Obviously,

00:53:35.869 --> 00:53:37.309
<v Speaker 1>this is a bit of a contrived example

00:53:37.309 --> 00:53:39.789
<v Speaker 1>because the device here actually has a user

00:53:39.789 --> 00:53:41.710
<v Speaker 1>data field, so it would obviously make more

00:53:41.710 --> 00:53:42.990
<v Speaker 1>sense to just do that if you wanted

00:53:42.990 --> 00:53:44.175
<v Speaker 1>a one off command.

00:53:44.815 --> 00:53:46.495
<v Speaker 1>But that that kinda shows the example of

00:53:46.495 --> 00:53:48.735
<v Speaker 1>how you can piece together different providers though

00:53:48.735 --> 00:53:50.975
<v Speaker 1>to do powerful things with a with a

00:53:50.975 --> 00:53:52.255
<v Speaker 1>configuration package.

00:53:53.695 --> 00:53:54.735
<v Speaker 0>Okay. So

00:53:55.215 --> 00:53:57.375
<v Speaker 0>there were two points there, I think. The

00:53:57.375 --> 00:53:59.135
<v Speaker 0>first one was, yes, the user data does

00:53:59.135 --> 00:53:59.455
<v Speaker 0>work.

00:54:00.550 --> 00:54:01.750
<v Speaker 0>So we could do

00:54:02.869 --> 00:54:04.710
<v Speaker 0>I guess it would have to be here.

00:54:07.190 --> 00:54:08.950
<v Speaker 0>Uninstall

00:54:09.030 --> 00:54:09.750
<v Speaker 0>SSH.

00:54:11.875 --> 00:54:13.235
<v Speaker 0>And that would work. Right?

00:54:13.795 --> 00:54:16.355
<v Speaker 1>Should work. I I assuming that flows through

00:54:16.355 --> 00:54:18.675
<v Speaker 1>to whatever the packet API does or excuse

00:54:18.675 --> 00:54:20.755
<v Speaker 1>me, the Equinix metal API does.

00:54:21.555 --> 00:54:23.635
<v Speaker 1>So I would imagine that would work. This

00:54:23.955 --> 00:54:26.755
<v Speaker 2>field might also be I item potent,

00:54:27.330 --> 00:54:30.210
<v Speaker 2>and it might stop you from applying from

00:54:30.210 --> 00:54:31.250
<v Speaker 2>making this change.

00:54:31.890 --> 00:54:33.730
<v Speaker 0>That was my next question. I saw this

00:54:33.730 --> 00:54:35.330
<v Speaker 0>thing, and it's like, you know, this machine

00:54:35.330 --> 00:54:36.210
<v Speaker 0>has already

00:54:36.690 --> 00:54:39.090
<v Speaker 0>been deployed. It's already configured. So to modify

00:54:39.090 --> 00:54:40.450
<v Speaker 0>these data, I'm assuming

00:54:41.085 --> 00:54:43.244
<v Speaker 0>is the provider going to delete that machine

00:54:43.244 --> 00:54:45.085
<v Speaker 0>and then recreate me a new one? So

00:54:45.085 --> 00:54:46.845
<v Speaker 1>it won't. So that's that's actually a great

00:54:46.845 --> 00:54:49.964
<v Speaker 1>question. A lot of times in Terraform or

00:54:49.964 --> 00:54:52.605
<v Speaker 1>something like that, it'll say, you know, this

00:54:52.605 --> 00:54:55.260
<v Speaker 1>is a destructive command. Right? Like, this is

00:54:55.260 --> 00:54:57.100
<v Speaker 1>going to to make this change, we have

00:54:57.100 --> 00:54:58.540
<v Speaker 1>to delete this infrastructure

00:54:58.860 --> 00:54:59.420
<v Speaker 1>and

00:55:00.380 --> 00:55:03.020
<v Speaker 1>and and recreate it. So in Crossplane, we're

00:55:03.020 --> 00:55:04.780
<v Speaker 1>not gonna do that. We will say we'll

00:55:04.780 --> 00:55:07.020
<v Speaker 1>basically reflect back whatever that provider tells you.

00:55:07.555 --> 00:55:09.955
<v Speaker 1>So there's some fields of a resource which

00:55:09.955 --> 00:55:12.515
<v Speaker 1>are immutable. If you look at our structs

00:55:12.515 --> 00:55:14.435
<v Speaker 1>in our code, we actually annotate all of

00:55:14.435 --> 00:55:15.555
<v Speaker 1>those as immutable.

00:55:15.715 --> 00:55:18.035
<v Speaker 1>And I believe, actually, in v one CRDs,

00:55:18.035 --> 00:55:18.835
<v Speaker 1>I think you can have

00:55:19.650 --> 00:55:22.369
<v Speaker 1>API validation for immutable fields as well. So

00:55:22.369 --> 00:55:24.130
<v Speaker 1>if you for instance, if we mark user

00:55:24.130 --> 00:55:26.369
<v Speaker 1>data as immutable, when you apply this, it

00:55:26.369 --> 00:55:27.809
<v Speaker 1>would say, hey. Like, you know, it would

00:55:27.809 --> 00:55:30.450
<v Speaker 1>get rejected. Right now, instead, what it would

00:55:30.450 --> 00:55:32.625
<v Speaker 1>do if this is an immutable field is

00:55:32.625 --> 00:55:34.465
<v Speaker 1>it would send it off to the Equinix

00:55:34.465 --> 00:55:36.625
<v Speaker 1>metal API and it would say,

00:55:36.945 --> 00:55:38.545
<v Speaker 1>sorry. You can't do that. And that would

00:55:38.545 --> 00:55:40.545
<v Speaker 1>be reflected and your status would be like,

00:55:40.545 --> 00:55:42.145
<v Speaker 1>you know, this device is not in a

00:55:42.145 --> 00:55:43.825
<v Speaker 1>sync state. You made you tried to make

00:55:43.825 --> 00:55:45.665
<v Speaker 1>an update. It didn't happen. And then if

00:55:45.665 --> 00:55:46.945
<v Speaker 1>you then remove the user data,

00:55:47.640 --> 00:55:49.880
<v Speaker 1>it would go back to being healthy.

00:55:50.520 --> 00:55:51.560
<v Speaker 0>Okay. So

00:55:51.880 --> 00:55:54.680
<v Speaker 0>let's use this as a a learning opportunity

00:55:54.680 --> 00:55:56.920
<v Speaker 0>for me. Cool. I've now added a user

00:55:56.920 --> 00:55:58.599
<v Speaker 0>data, but we're also in a situation where

00:55:58.599 --> 00:56:00.680
<v Speaker 0>the machine doesn't deploy anyway.

00:56:01.484 --> 00:56:03.325
<v Speaker 0>So now if this was me working with

00:56:03.325 --> 00:56:04.685
<v Speaker 0>standard Kubernetes,

00:56:04.924 --> 00:56:06.685
<v Speaker 0>I would run, get the bases.

00:56:10.365 --> 00:56:12.444
<v Speaker 0>Is this ID the packet ID or a

00:56:12.444 --> 00:56:13.244
<v Speaker 0>Crossplane ID?

00:56:16.650 --> 00:56:18.650
<v Speaker 2>Your your Debian machine is there. The host

00:56:18.650 --> 00:56:20.329
<v Speaker 2>name of it is Crossplane. It was on

00:56:20.329 --> 00:56:22.090
<v Speaker 2>the top of the UI.

00:56:24.250 --> 00:56:26.410
<v Speaker 0>Right. Okay. So this is the name and

00:56:26.410 --> 00:56:27.369
<v Speaker 0>the Crossplane

00:56:27.369 --> 00:56:28.569
<v Speaker 0>object, but the host

00:56:30.905 --> 00:56:32.425
<v Speaker 0>Well, you've ruined that for me. I was

00:56:32.425 --> 00:56:34.825
<v Speaker 0>gonna have some fun. Okay. So let's check

00:56:34.825 --> 00:56:36.745
<v Speaker 0>out the immutability thing. No.

00:56:37.945 --> 00:56:40.185
<v Speaker 0>Let's let's not delete that. Alright? We have

00:56:40.265 --> 00:56:41.865
<v Speaker 0>we did get the machine. So that's mean,

00:56:41.865 --> 00:56:43.224
<v Speaker 0>that's pretty cool. So

00:56:44.030 --> 00:56:46.510
<v Speaker 0>we're assuming that's maybe immutable, but we're not

00:56:46.510 --> 00:56:47.470
<v Speaker 0>sure. Is that

00:56:47.869 --> 00:56:48.990
<v Speaker 0>what I'm getting?

00:56:50.430 --> 00:56:52.270
<v Speaker 1>I'm fairly certain it's immutable.

00:56:52.830 --> 00:56:55.230
<v Speaker 1>But let's see. So you applied it and

00:56:55.230 --> 00:56:57.710
<v Speaker 1>then yeah. Let's describe it or get it

00:56:57.710 --> 00:56:58.349
<v Speaker 1>or whatever.

00:56:59.235 --> 00:57:01.395
<v Speaker 0>And you're probably thinking in your head, just

00:57:01.395 --> 00:57:03.635
<v Speaker 0>stick to the script, man. Come on. No.

00:57:03.635 --> 00:57:04.995
<v Speaker 1>No. No. This is great.

00:57:05.555 --> 00:57:06.435
<v Speaker 1>Let's see.

00:57:06.755 --> 00:57:08.275
<v Speaker 0>Oh, we did get it in our message.

00:57:08.275 --> 00:57:09.395
<v Speaker 0>Okay. Mhmm.

00:57:10.915 --> 00:57:13.235
<v Speaker 1>Yep. The obvious has been so that's actually

00:57:13.235 --> 00:57:16.710
<v Speaker 1>just a transient error. So successfully requested update.

00:57:16.790 --> 00:57:18.630
<v Speaker 1>It seems like it it did go through,

00:57:18.630 --> 00:57:19.110
<v Speaker 1>actually.

00:57:20.310 --> 00:57:23.030
<v Speaker 1>Just do k get device

00:57:23.110 --> 00:57:24.230
<v Speaker 1>or devices.

00:57:24.230 --> 00:57:26.390
<v Speaker 2>This might this might be impacted API, I

00:57:26.390 --> 00:57:28.390
<v Speaker 2>think. So I think maybe the API allows

00:57:28.390 --> 00:57:30.725
<v Speaker 2>you to send an update to the user

00:57:30.725 --> 00:57:32.965
<v Speaker 2>data even though I think we've had this

00:57:32.965 --> 00:57:34.485
<v Speaker 2>discussion somewhere else.

00:57:35.845 --> 00:57:37.925
<v Speaker 1>Well, we'll see here. Yeah. Let's just I'm

00:57:37.925 --> 00:57:39.925
<v Speaker 0>gonna jump on the machine. Right? Because oh,

00:57:40.005 --> 00:57:41.045
<v Speaker 0>yes.

00:57:41.125 --> 00:57:42.885
<v Speaker 1>The nice thing about

00:57:42.965 --> 00:57:44.740
<v Speaker 1>the way we do this, well, you could

00:57:44.740 --> 00:57:46.900
<v Speaker 1>view it as nice or cumbersome depending on

00:57:46.900 --> 00:57:49.300
<v Speaker 1>the situation you're in, is that, you know,

00:57:49.300 --> 00:57:51.700
<v Speaker 1>we aren't maintaining separate documentation

00:57:51.700 --> 00:57:54.660
<v Speaker 1>about how our API types work.

00:57:55.940 --> 00:57:58.285
<v Speaker 1>They are you know, it it's gonna flow

00:57:58.285 --> 00:58:00.205
<v Speaker 1>through exactly what the the API of the

00:58:00.205 --> 00:58:02.525
<v Speaker 1>cloud provider gives you, or the bare metal

00:58:02.525 --> 00:58:03.885
<v Speaker 1>provider or what have you.

00:58:04.685 --> 00:58:06.685
<v Speaker 1>And so that way, you know, when you

00:58:06.685 --> 00:58:09.320
<v Speaker 1>see an error, in your events there, you

00:58:09.320 --> 00:58:11.480
<v Speaker 1>can actually just Google that and it's likely,

00:58:11.480 --> 00:58:13.640
<v Speaker 1>you know, somewhere documented in the issues on

00:58:13.640 --> 00:58:15.720
<v Speaker 1>on the Equinix metal side.

00:58:16.200 --> 00:58:17.560
<v Speaker 1>Or we see this a lot with, like,

00:58:17.560 --> 00:58:18.280
<v Speaker 1>GCP.

00:58:18.680 --> 00:58:20.680
<v Speaker 1>They have pretty good documentation on some of

00:58:20.680 --> 00:58:22.760
<v Speaker 1>the different errors that it can occur when

00:58:22.760 --> 00:58:25.705
<v Speaker 1>using GKE clusters and different configurations you have

00:58:25.705 --> 00:58:27.945
<v Speaker 1>there. So we literally just propagate that error

00:58:27.945 --> 00:58:30.185
<v Speaker 1>back. If they update the error that's returned

00:58:30.425 --> 00:58:32.985
<v Speaker 1>and then they update their documentation, right, users

00:58:32.985 --> 00:58:34.345
<v Speaker 1>just are able to use that and we

00:58:34.345 --> 00:58:36.345
<v Speaker 1>don't have to maintain a separate layer of

00:58:36.345 --> 00:58:37.705
<v Speaker 1>documentation on top of it.

00:58:39.460 --> 00:58:40.660
<v Speaker 0>Okay. So,

00:58:40.900 --> 00:58:42.260
<v Speaker 0>I mean, the good news is we have

00:58:42.260 --> 00:58:43.460
<v Speaker 0>to use our data. I have to say

00:58:43.460 --> 00:58:45.300
<v Speaker 0>since the machine, I had to meditate the

00:58:45.300 --> 00:58:48.340
<v Speaker 0>Equinix metal user data metadata API,

00:58:49.300 --> 00:58:50.020
<v Speaker 0>and it worked.

00:58:51.585 --> 00:58:53.905
<v Speaker 0>And it doesn't run, but that's because I

00:58:53.905 --> 00:58:55.505
<v Speaker 0>got the package name wrong. So that was

00:58:55.505 --> 00:58:57.425
<v Speaker 0>kinda cool. So, I mean, there's a whole

00:58:57.425 --> 00:58:58.945
<v Speaker 0>host of things going through my head right

00:58:58.945 --> 00:59:01.105
<v Speaker 0>now. It's like, how do I close a

00:59:01.105 --> 00:59:02.865
<v Speaker 0>few gaps and see? I start to use

00:59:02.865 --> 00:59:05.105
<v Speaker 0>Crossplane to do this kind of device management,

00:59:05.870 --> 00:59:08.110
<v Speaker 0>injecting the user data. I mean, I've got

00:59:08.110 --> 00:59:09.390
<v Speaker 0>two things that I cannot

00:59:09.790 --> 00:59:12.350
<v Speaker 0>naturally gravitate into now. One of them is,

00:59:12.590 --> 00:59:13.790
<v Speaker 0>is there a way for me who to

00:59:13.790 --> 00:59:16.670
<v Speaker 0>hook in to the Crossplane events that I

00:59:16.670 --> 00:59:17.390
<v Speaker 0>can then,

00:59:17.630 --> 00:59:20.350
<v Speaker 0>you know, SaltStack pick up the user data

00:59:20.350 --> 00:59:22.585
<v Speaker 0>changed and, you know, go across my plate

00:59:22.585 --> 00:59:24.105
<v Speaker 0>and tell it all to update.

00:59:26.105 --> 00:59:28.345
<v Speaker 0>And and auto scaling, is that something where

00:59:28.345 --> 00:59:30.985
<v Speaker 0>the responsibilities are deferred to somewhere else or

00:59:30.985 --> 00:59:32.985
<v Speaker 0>something that Crossplane made or does or or

00:59:32.985 --> 00:59:33.945
<v Speaker 0>may bring in later?

00:59:34.400 --> 00:59:37.680
<v Speaker 1>Yeah. So that's interesting, especially auto scaling.

00:59:38.080 --> 00:59:41.040
<v Speaker 1>One of the things that we've actually had

00:59:41.040 --> 00:59:42.320
<v Speaker 1>requested recently

00:59:42.400 --> 00:59:43.120
<v Speaker 1>is

00:59:44.080 --> 00:59:45.760
<v Speaker 1>it's not really auto scaling, guess, but it's

00:59:45.760 --> 00:59:46.240
<v Speaker 1>replication.

00:59:46.925 --> 00:59:48.525
<v Speaker 1>So right when another

00:59:49.005 --> 00:59:52.045
<v Speaker 1>another target unit, whatever that may be, comes

00:59:52.045 --> 00:59:53.645
<v Speaker 1>online to automatically

00:59:53.645 --> 00:59:56.285
<v Speaker 1>provision new infrastructure for it. So in in

00:59:56.285 --> 00:59:58.685
<v Speaker 1>the case that I'm alluding to here, it's

00:59:58.685 --> 01:00:00.365
<v Speaker 1>more Kubernetes clusters

01:00:00.525 --> 01:00:02.285
<v Speaker 1>being added as

01:00:02.580 --> 01:00:05.380
<v Speaker 1>Helm provider targets. And every time a Kubernetes

01:00:05.380 --> 01:00:07.780
<v Speaker 1>cluster kind of, like, pops up in the

01:00:07.780 --> 01:00:09.060
<v Speaker 1>Kubernetes API,

01:00:10.180 --> 01:00:12.340
<v Speaker 1>folks wanna basically have a Helm script run

01:00:12.340 --> 01:00:13.220
<v Speaker 1>on it. So if you have, like, a

01:00:13.220 --> 01:00:14.820
<v Speaker 1>service mesh that runs on all of your

01:00:14.820 --> 01:00:15.780
<v Speaker 1>your clusters,

01:00:15.860 --> 01:00:16.980
<v Speaker 1>that's kind of the use case there.

01:00:17.865 --> 01:00:20.425
<v Speaker 1>Right now, that's not something that's supported in

01:00:20.425 --> 01:00:21.945
<v Speaker 1>the core composition model.

01:00:22.185 --> 01:00:23.945
<v Speaker 1>We have talked a little bit about we

01:00:23.945 --> 01:00:25.305
<v Speaker 1>actually were talking about this in the community

01:00:25.305 --> 01:00:26.265
<v Speaker 1>meeting yesterday.

01:00:26.825 --> 01:00:29.145
<v Speaker 1>The idea of, like, a composition set, which

01:00:29.145 --> 01:00:30.345
<v Speaker 1>would be kind of, like, similar to a

01:00:30.345 --> 01:00:31.945
<v Speaker 1>replica set with pods, but it would just

01:00:31.945 --> 01:00:34.640
<v Speaker 1>be infrastructure or grouping of infrastructure

01:00:35.039 --> 01:00:37.119
<v Speaker 1>that you could have, you know, replicated,

01:00:37.440 --> 01:00:39.440
<v Speaker 1>you know, typically a a daemon set or

01:00:39.440 --> 01:00:40.720
<v Speaker 1>something like that is gonna be on every

01:00:40.720 --> 01:00:42.079
<v Speaker 1>node, but you could have that, you know,

01:00:42.079 --> 01:00:44.880
<v Speaker 1>every Kubernetes cluster, every packet device you see.

01:00:45.039 --> 01:00:46.400
<v Speaker 1>So that's something we've talked about.

01:00:47.145 --> 01:00:49.305
<v Speaker 1>What you can do instead of that is

01:00:49.305 --> 01:00:51.385
<v Speaker 1>you could also write a provider or just

01:00:51.385 --> 01:00:52.745
<v Speaker 1>a standalone controller

01:00:52.745 --> 01:00:54.665
<v Speaker 1>with kind of that logic already in it

01:00:55.065 --> 01:00:56.505
<v Speaker 1>and install it to do some of that

01:00:56.505 --> 01:00:57.385
<v Speaker 1>functionality.

01:00:57.545 --> 01:01:00.025
<v Speaker 1>So we generally try to defer things to

01:01:00.025 --> 01:01:02.905
<v Speaker 1>extensions just to kind of keep the core

01:01:02.190 --> 01:01:03.630
<v Speaker 1>cross by model cleaner

01:01:03.950 --> 01:01:06.750
<v Speaker 1>and also allow folks to have things custom

01:01:06.750 --> 01:01:08.270
<v Speaker 1>to their use case. Right? Because as soon

01:01:08.270 --> 01:01:10.030
<v Speaker 1>as we we go with a single model,

01:01:10.030 --> 01:01:11.310
<v Speaker 1>then it kind of eliminates

01:01:11.310 --> 01:01:12.190
<v Speaker 1>other options.

01:01:13.550 --> 01:01:15.505
<v Speaker 0>Yeah. I I think that that's probably a

01:01:15.505 --> 01:01:16.705
<v Speaker 0>good way to do it, it it's just

01:01:16.705 --> 01:01:18.465
<v Speaker 0>my my brain is just thinking about all

01:01:18.465 --> 01:01:20.065
<v Speaker 0>this other stuff that I want, you know,

01:01:20.065 --> 01:01:21.505
<v Speaker 0>to take care of me so I don't

01:01:21.505 --> 01:01:23.265
<v Speaker 0>have to do it. Well, open up some

01:01:23.265 --> 01:01:25.425
<v Speaker 1>issues, man. We'll we'll get to them.

01:01:26.625 --> 01:01:29.025
<v Speaker 0>Yeah. I think I mean, I could see

01:01:29.220 --> 01:01:30.900
<v Speaker 0>I could see exactly how I'd wanna use

01:01:30.900 --> 01:01:32.660
<v Speaker 0>this and and to manage my devices. I

01:01:32.660 --> 01:01:34.020
<v Speaker 0>love the fact that I updated that use

01:01:34.020 --> 01:01:35.380
<v Speaker 0>of data. You know, I can actually build

01:01:35.380 --> 01:01:38.180
<v Speaker 0>enough automation on the the device side anyway

01:01:38.260 --> 01:01:39.859
<v Speaker 0>to keep a track of that and make

01:01:39.859 --> 01:01:41.460
<v Speaker 0>sure that it's the reconciliation

01:01:41.940 --> 01:01:44.500
<v Speaker 0>never kinda stops at that that kinda wall.

01:01:45.525 --> 01:01:46.885
<v Speaker 0>Alright. Let's

01:01:47.525 --> 01:01:50.405
<v Speaker 0>pop back over here. So, Marcus, what was

01:01:50.405 --> 01:01:53.045
<v Speaker 0>this? What were you trying to I don't

01:01:53.045 --> 01:01:54.645
<v Speaker 0>know if it's a virus or if it's

01:01:54.645 --> 01:01:57.845
<v Speaker 0>a some sort of Monero minor, like, what

01:01:57.845 --> 01:01:58.165
<v Speaker 0>is it?

01:02:02.470 --> 01:02:05.109
<v Speaker 1>Are there? Oh, you're muted. Muted now.

01:02:06.950 --> 01:02:08.869
<v Speaker 1>You're still muted, Marcus. Muted.

01:02:09.190 --> 01:02:12.069
<v Speaker 0>There you go. We're just cycling

01:02:12.069 --> 01:02:13.670
<v Speaker 2>on me. I don't know why it's doing

01:02:13.670 --> 01:02:13.910
<v Speaker 2>that.

01:02:15.515 --> 01:02:18.155
<v Speaker 2>So there was an episode of the binding

01:02:18.155 --> 01:02:19.435
<v Speaker 2>status where

01:02:19.435 --> 01:02:21.035
<v Speaker 2>we were exploring

01:02:21.995 --> 01:02:23.035
<v Speaker 2>Tinkerbell.

01:02:23.995 --> 01:02:24.635
<v Speaker 2>And

01:02:24.955 --> 01:02:27.275
<v Speaker 2>I'm I'm trying to recall how how much

01:02:27.275 --> 01:02:28.475
<v Speaker 2>of this was

01:02:28.955 --> 01:02:30.715
<v Speaker 2>prebaked and how much of this we,

01:02:31.260 --> 01:02:32.700
<v Speaker 2>what, run live.

01:02:33.340 --> 01:02:34.460
<v Speaker 2>But this

01:02:35.340 --> 01:02:37.820
<v Speaker 2>this set of YAML here provision

01:02:37.820 --> 01:02:38.460
<v Speaker 2>the

01:02:40.380 --> 01:02:41.500
<v Speaker 2>think provisioner,

01:02:41.500 --> 01:02:44.780
<v Speaker 2>the virtual network necessary for it. And then

01:02:45.405 --> 01:02:47.405
<v Speaker 2>once we had that, how much of it

01:02:47.405 --> 01:02:48.605
<v Speaker 2>did we manually

01:02:48.845 --> 01:02:51.405
<v Speaker 2>have to configure or install? That's the part

01:02:51.405 --> 01:02:52.765
<v Speaker 2>I'm not sure about.

01:02:53.565 --> 01:02:55.565
<v Speaker 1>I'm pulling up the YouTube video right now.

01:02:55.565 --> 01:02:57.245
<v Speaker 1>I'm gonna drop a link. Just gonna watch

01:02:57.245 --> 01:02:58.925
<v Speaker 2>you gotta watch the YouTube video and let's

01:02:58.925 --> 01:03:00.685
<v Speaker 2>post the We're have a group watch here.

01:03:01.059 --> 01:03:02.580
<v Speaker 1>Let's see. This is the

01:03:03.140 --> 01:03:05.059
<v Speaker 1>oh, I'm not logged in. Well, here, I'll

01:03:05.059 --> 01:03:05.700
<v Speaker 1>put it

01:03:06.500 --> 01:03:07.619
<v Speaker 1>well, I guess if I just send in

01:03:07.619 --> 01:03:09.859
<v Speaker 1>the private chat only, I'll get it. It's

01:03:09.859 --> 01:03:11.940
<v Speaker 1>in the readme.md.

01:03:12.819 --> 01:03:14.980
<v Speaker 1>There's a link for folks. I don't know.

01:03:15.700 --> 01:03:17.105
<v Speaker 1>I don't know, David, if you're able to

01:03:17.105 --> 01:03:19.425
<v Speaker 1>put that in the chat or or whatever.

01:03:20.305 --> 01:03:22.305
<v Speaker 1>But this is us hacking for an hour

01:03:22.305 --> 01:03:24.785
<v Speaker 1>and a half and barely getting something running,

01:03:26.224 --> 01:03:27.505
<v Speaker 1>but it was interesting.

01:03:29.345 --> 01:03:31.425
<v Speaker 0>So having a quick look at this. What

01:03:32.040 --> 01:03:33.960
<v Speaker 0>expense of a device, there's no user data

01:03:33.960 --> 01:03:35.720
<v Speaker 0>here. So I'm assuming the manual steps you're

01:03:35.720 --> 01:03:39.320
<v Speaker 0>maybe talking about were did you deploy Tinkerbell?

01:03:39.320 --> 01:03:41.240
<v Speaker 0>Did I guess you SSH then, or did

01:03:41.240 --> 01:03:42.680
<v Speaker 0>you use this new provider that you were

01:03:42.680 --> 01:03:44.280
<v Speaker 0>working on? Is that why this

01:03:44.984 --> 01:03:47.385
<v Speaker 0>popped up? I I I think that with

01:03:47.385 --> 01:03:48.505
<v Speaker 2>this provisioner,

01:03:48.904 --> 01:03:50.184
<v Speaker 2>we manually

01:03:50.184 --> 01:03:50.905
<v Speaker 2>ran

01:03:51.385 --> 01:03:54.505
<v Speaker 2>did we create the provisioner? We ran kind

01:03:54.825 --> 01:03:56.424
<v Speaker 2>on it. No. Did we run kind? We

01:03:56.424 --> 01:03:58.905
<v Speaker 2>ran Docker Compose. We we used the tank

01:03:59.040 --> 01:03:59.840
<v Speaker 2>Tinkerbell

01:03:59.840 --> 01:04:01.360
<v Speaker 2>install

01:04:01.600 --> 01:04:02.560
<v Speaker 2>scripts.

01:04:02.720 --> 01:04:04.640
<v Speaker 0>Oh, nice. So then we had

01:04:05.360 --> 01:04:06.720
<v Speaker 2>we had the

01:04:07.120 --> 01:04:08.720
<v Speaker 2>provisioner running there.

01:04:09.440 --> 01:04:09.680
<v Speaker 2>And

01:04:12.725 --> 01:04:14.005
<v Speaker 2>was there and then there was a bit

01:04:14.005 --> 01:04:16.005
<v Speaker 2>of copy and paste, I think. But because

01:04:16.005 --> 01:04:18.725
<v Speaker 2>you need the you need the hardware IDs

01:04:18.725 --> 01:04:19.445
<v Speaker 2>and

01:04:19.685 --> 01:04:20.485
<v Speaker 2>and

01:04:20.965 --> 01:04:23.285
<v Speaker 2>right. So it it was a manual effort,

01:04:23.285 --> 01:04:23.765
<v Speaker 2>but

01:04:24.565 --> 01:04:25.605
<v Speaker 2>it what

01:04:26.810 --> 01:04:29.050
<v Speaker 2>the re the work that went into getting

01:04:29.050 --> 01:04:31.770
<v Speaker 2>this demo working was creating the ports,

01:04:32.010 --> 01:04:33.210
<v Speaker 2>creating the

01:04:34.090 --> 01:04:36.170
<v Speaker 2>creating the port assignments,

01:04:36.330 --> 01:04:36.970
<v Speaker 2>and

01:04:37.370 --> 01:04:38.170
<v Speaker 2>the VLANs.

01:04:39.095 --> 01:04:40.615
<v Speaker 1>Yeah. And I think one thing we can

01:04:40.615 --> 01:04:41.974
<v Speaker 1>see here is so this is, like, some

01:04:41.974 --> 01:04:43.415
<v Speaker 1>inline YAML again.

01:04:44.295 --> 01:04:46.375
<v Speaker 1>You know, with these different resources, we could

01:04:46.375 --> 01:04:48.135
<v Speaker 1>put them in a composition, right, and have

01:04:48.135 --> 01:04:49.575
<v Speaker 1>an abstract type. It was like a a

01:04:49.575 --> 01:04:53.230
<v Speaker 1>Tinker Bell instance or something like that and

01:04:53.230 --> 01:04:54.750
<v Speaker 1>kind of take care of some of that

01:04:54.750 --> 01:04:57.710
<v Speaker 1>that manual stuff for us. I think there'd

01:04:57.710 --> 01:04:59.550
<v Speaker 1>probably be some more manual stuff here, but

01:04:59.550 --> 01:05:02.030
<v Speaker 1>maybe some of the provider SSH stuff could

01:05:02.030 --> 01:05:04.350
<v Speaker 1>also be dropped in to create kind of

01:05:04.350 --> 01:05:06.110
<v Speaker 1>like a a package that you could install

01:05:06.110 --> 01:05:09.175
<v Speaker 1>to provision Tinker Bell instances on on

01:05:09.494 --> 01:05:10.615
<v Speaker 1>Equinix metal.

01:05:11.335 --> 01:05:13.095
<v Speaker 0>So it sounds to me like the provider

01:05:13.095 --> 01:05:14.935
<v Speaker 0>SSH fills in a few of the the

01:05:14.935 --> 01:05:17.015
<v Speaker 0>gaps that are maybe missing here for, like,

01:05:17.015 --> 01:05:19.415
<v Speaker 0>a complete I think just from my understanding

01:05:19.415 --> 01:05:20.855
<v Speaker 0>from a complete end to end. Is that

01:05:20.855 --> 01:05:22.940
<v Speaker 0>something we can use now?

01:05:25.099 --> 01:05:26.380
<v Speaker 1>I would say no.

01:05:27.579 --> 01:05:30.539
<v Speaker 1>We got it to let's see. I've even

01:05:30.539 --> 01:05:32.539
<v Speaker 1>pushed up what we had recently because I

01:05:32.539 --> 01:05:33.819
<v Speaker 1>need to clean it up a little bit.

01:05:35.655 --> 01:05:37.415
<v Speaker 1>And and it needs to be refactored a

01:05:37.415 --> 01:05:39.415
<v Speaker 1>little bit for zero dot 13. So this

01:05:39.415 --> 01:05:41.335
<v Speaker 1>can be a teaser. Right? We'll come back

01:05:41.335 --> 01:05:43.575
<v Speaker 1>and we'll use provider SSH.

01:05:43.895 --> 01:05:45.895
<v Speaker 1>And if folks there's also a TBS episode

01:05:45.895 --> 01:05:47.495
<v Speaker 1>on provider SSH.

01:05:48.055 --> 01:05:49.575
<v Speaker 1>So if folks wanna see how that works

01:05:49.575 --> 01:05:50.055
<v Speaker 1>a little bit,

01:05:51.470 --> 01:05:53.069
<v Speaker 1>then we can we can definitely do that

01:05:53.069 --> 01:05:54.349
<v Speaker 1>in the future. But I don't think we

01:05:54.349 --> 01:05:56.109
<v Speaker 1>could fit it in in twenty five minutes

01:05:56.109 --> 01:05:56.670
<v Speaker 1>here.

01:05:56.990 --> 01:05:58.269
<v Speaker 2>And and when

01:05:58.430 --> 01:05:59.150
<v Speaker 2>on the

01:05:59.710 --> 01:06:01.550
<v Speaker 2>on the Equinix metal side,

01:06:01.630 --> 01:06:04.510
<v Speaker 2>the sorts of resources that we would need

01:06:04.510 --> 01:06:07.150
<v Speaker 2>to support are the the

01:06:07.655 --> 01:06:11.655
<v Speaker 2>Equinix metal projects Equinix metal project SSH keys

01:06:12.135 --> 01:06:13.335
<v Speaker 2>so that you can,

01:06:13.655 --> 01:06:15.974
<v Speaker 2>you know, create some crossplane, some YAML for

01:06:15.974 --> 01:06:16.535
<v Speaker 2>them

01:06:17.494 --> 01:06:19.095
<v Speaker 2>to get those provisions. So

01:06:19.980 --> 01:06:21.820
<v Speaker 2>that that is a a work in progress

01:06:21.820 --> 01:06:23.180
<v Speaker 2>PR open

01:06:23.180 --> 01:06:24.060
<v Speaker 2>for that.

01:06:25.340 --> 01:06:26.540
<v Speaker 2>Yeah. I I thought I was gonna be

01:06:26.540 --> 01:06:27.900
<v Speaker 2>able to just hop right in the SSH

01:06:27.900 --> 01:06:29.180
<v Speaker 2>keys, but then I kinda realized that I

01:06:29.180 --> 01:06:31.660
<v Speaker 2>would also need to have support for projects.

01:06:34.325 --> 01:06:35.285
<v Speaker 2>When

01:06:35.285 --> 01:06:36.244
<v Speaker 2>you think of, like,

01:06:37.045 --> 01:06:38.805
<v Speaker 2>a Terraform provider, you think,

01:06:39.765 --> 01:06:41.684
<v Speaker 2>okay. I have support to create the devices.

01:06:41.684 --> 01:06:44.164
<v Speaker 2>That's enough. And then you realize quickly, oh,

01:06:44.164 --> 01:06:45.765
<v Speaker 2>no. I also need the projects. I need

01:06:45.765 --> 01:06:47.845
<v Speaker 2>to this. I need that. And sooner, your

01:06:47.845 --> 01:06:49.365
<v Speaker 2>module gets

01:06:49.950 --> 01:06:52.510
<v Speaker 2>huge. And and that's what that's what kind

01:06:52.510 --> 01:06:54.910
<v Speaker 2>of happened here. This started with permitted support

01:06:54.910 --> 01:06:57.710
<v Speaker 2>for devices. Now we've added networking support,

01:06:57.790 --> 01:07:00.430
<v Speaker 2>and then we'll add, you know, projects, SSH

01:07:00.430 --> 01:07:01.150
<v Speaker 2>key support,

01:07:03.455 --> 01:07:05.295
<v Speaker 2>fabric interconnects.

01:07:05.295 --> 01:07:07.455
<v Speaker 2>That's a a thing that we can add.

01:07:08.815 --> 01:07:11.135
<v Speaker 1>Yeah. Tell me tell me well, I'm gonna

01:07:11.135 --> 01:07:12.575
<v Speaker 1>turn into the interview here for just a

01:07:12.575 --> 01:07:14.495
<v Speaker 1>second. What is what is fabric? Because I

01:07:14.495 --> 01:07:15.935
<v Speaker 1>know when we are working on you know,

01:07:15.935 --> 01:07:16.975
<v Speaker 1>so we just changed

01:07:17.730 --> 01:07:21.570
<v Speaker 1>the packet provider to Equinix metal provider.

01:07:22.850 --> 01:07:25.250
<v Speaker 1>What is and and you mentioned, you know,

01:07:25.250 --> 01:07:26.690
<v Speaker 1>having an Equinix

01:07:26.770 --> 01:07:29.490
<v Speaker 1>fabric, I think, provider. What what is that?

01:07:31.935 --> 01:07:33.535
<v Speaker 2>Have you done a few of these, Dave?

01:07:33.535 --> 01:07:35.855
<v Speaker 2>Trying to fix some or thought? I mean,

01:07:35.855 --> 01:07:37.055
<v Speaker 0>I stormed off in a half, so I

01:07:37.055 --> 01:07:39.055
<v Speaker 0>only heard the latter half of the question.

01:07:39.055 --> 01:07:41.455
<v Speaker 0>But I'm assuming what you're asking to

01:07:41.695 --> 01:07:44.510
<v Speaker 0>Dan is what is Equinix Fabric? Yep. That's

01:07:44.510 --> 01:07:45.870
<v Speaker 1>that's exactly right.

01:07:46.830 --> 01:07:48.190
<v Speaker 0>Yeah. So, I mean,

01:07:48.670 --> 01:07:49.950
<v Speaker 0>I think that

01:07:51.390 --> 01:07:52.750
<v Speaker 0>I mean, I don't know where to give

01:07:52.750 --> 01:07:54.270
<v Speaker 0>you the the sales blurb or just, you

01:07:54.270 --> 01:07:55.950
<v Speaker 0>know, just answer it in one sentence. Okay.

01:07:55.950 --> 01:07:56.589
<v Speaker 0>So

01:07:57.035 --> 01:07:58.955
<v Speaker 0>Equinix is in a very unique position and

01:07:58.955 --> 01:08:01.035
<v Speaker 0>that the locality and number of data center

01:08:01.035 --> 01:08:02.955
<v Speaker 0>and IBXs they have around the world is

01:08:02.955 --> 01:08:04.635
<v Speaker 0>huge. Right? I mean, if you want to

01:08:04.635 --> 01:08:07.355
<v Speaker 0>run colocation or bare metal servers in any

01:08:07.355 --> 01:08:09.195
<v Speaker 0>of these locations, then it's available in API

01:08:09.195 --> 01:08:09.755
<v Speaker 0>and that's great.

01:08:10.640 --> 01:08:12.240
<v Speaker 0>What they don't do is provide a lot

01:08:12.240 --> 01:08:14.000
<v Speaker 0>of managed services on top of that. And

01:08:14.000 --> 01:08:15.200
<v Speaker 0>what a lot of people want to do

01:08:15.200 --> 01:08:17.760
<v Speaker 0>is then default to manage cloud services. You

01:08:17.760 --> 01:08:19.520
<v Speaker 0>know, maybe they wanna use s three or

01:08:19.520 --> 01:08:21.840
<v Speaker 0>GCS or they wanna use RDS as a

01:08:21.840 --> 01:08:23.840
<v Speaker 0>database or, you know, back table or all

01:08:23.840 --> 01:08:25.694
<v Speaker 0>these other things. Or even they just wanna

01:08:25.694 --> 01:08:27.694
<v Speaker 0>run some workloads on a hybrid cloud or

01:08:27.694 --> 01:08:29.534
<v Speaker 0>multi cloud fashion. So they wanna split their

01:08:29.534 --> 01:08:30.654
<v Speaker 0>workloads across,

01:08:31.054 --> 01:08:33.455
<v Speaker 0>bare metal. They've got virtualization with easy to

01:08:33.455 --> 01:08:35.854
<v Speaker 0>and all this other stuff. So really, you

01:08:35.854 --> 01:08:37.935
<v Speaker 0>know, modern applications aren't just sticking on a

01:08:37.935 --> 01:08:39.375
<v Speaker 0>server and walk away or even a single

01:08:39.375 --> 01:08:42.290
<v Speaker 0>Kubernetes cluster probably isn't the default or what

01:08:42.290 --> 01:08:44.449
<v Speaker 0>the default in this near future.

01:08:45.170 --> 01:08:47.330
<v Speaker 0>What fabric does is actually gives you a

01:08:47.330 --> 01:08:49.330
<v Speaker 0>fiber backbone to all of these different cloud

01:08:49.330 --> 01:08:51.569
<v Speaker 0>providers. So you can have servers and an

01:08:51.569 --> 01:08:54.370
<v Speaker 0>Equinix IBX. You can have some workloads running

01:08:54.370 --> 01:08:57.175
<v Speaker 0>on EC two or on GCS, and you

01:08:57.175 --> 01:08:59.575
<v Speaker 0>can consume their managed services without going over

01:08:59.575 --> 01:09:01.895
<v Speaker 0>the public Internet and taking the hat on

01:09:01.895 --> 01:09:02.774
<v Speaker 0>latency

01:09:03.015 --> 01:09:05.815
<v Speaker 0>or even the ingress and egress cost of

01:09:05.815 --> 01:09:07.735
<v Speaker 0>going in and out of Amazon can actually

01:09:07.735 --> 01:09:08.854
<v Speaker 0>add up really expensively.

01:09:09.290 --> 01:09:10.890
<v Speaker 0>So that's what fabric is. It's like you

01:09:10.890 --> 01:09:12.490
<v Speaker 0>can just pick and choose all the cool

01:09:12.490 --> 01:09:14.090
<v Speaker 0>bits that you want from the various providers

01:09:14.090 --> 01:09:16.170
<v Speaker 0>and still have that choice and flexibility.

01:09:16.490 --> 01:09:18.170
<v Speaker 0>It's really important for multi cloud or hybrid

01:09:18.170 --> 01:09:18.729
<v Speaker 0>cloud.

01:09:19.050 --> 01:09:20.330
<v Speaker 0>I don't know if that was the quick

01:09:20.330 --> 01:09:22.165
<v Speaker 0>answer of the sales pitch. And if in

01:09:22.245 --> 01:09:24.085
<v Speaker 0>did I get anything wrong there, Marcus?

01:09:25.604 --> 01:09:27.444
<v Speaker 2>No. That sounded sounds great to me. I

01:09:27.444 --> 01:09:29.124
<v Speaker 2>just linked in our shared chat.

01:09:30.404 --> 01:09:32.244
<v Speaker 2>I I added a link to

01:09:34.590 --> 01:09:36.909
<v Speaker 0>Alright. Cool. Yeah. That's something fair. Yeah. I

01:09:36.909 --> 01:09:38.590
<v Speaker 0>mean, it's definitely one of the things I'm

01:09:38.590 --> 01:09:40.989
<v Speaker 0>most excited about, you know, having now being

01:09:40.989 --> 01:09:43.389
<v Speaker 0>at a packet now Equinix Meadow for the

01:09:43.389 --> 01:09:45.229
<v Speaker 0>last three months, you know, the the idea

01:09:45.229 --> 01:09:47.069
<v Speaker 0>and the potential that I can see for

01:09:47.069 --> 01:09:48.350
<v Speaker 0>a product of this is and I'm not

01:09:48.350 --> 01:09:49.925
<v Speaker 0>gonna get two sales pitches, not point of

01:09:49.925 --> 01:09:52.085
<v Speaker 0>the stream. But I see a lot of

01:09:52.085 --> 01:09:53.765
<v Speaker 0>really cool use cases for that. And I'm

01:09:53.765 --> 01:09:55.845
<v Speaker 0>looking forward to exploring hybrid cloud workloads with

01:09:55.845 --> 01:09:57.925
<v Speaker 0>it. So and Crossplane

01:09:57.925 --> 01:09:59.685
<v Speaker 0>needs to support it just for me now.

01:09:59.685 --> 01:10:02.080
<v Speaker 0>So, you know, we're gonna have to kinda

01:10:02.080 --> 01:10:04.400
<v Speaker 0>get that added to the to the provider

01:10:04.400 --> 01:10:06.560
<v Speaker 0>over the coming weeks or months or whatever.

01:10:06.640 --> 01:10:09.120
<v Speaker 1>For sure. Is there an API for

01:10:09.200 --> 01:10:10.720
<v Speaker 1>Equinix Fabric yet?

01:10:12.160 --> 01:10:14.080
<v Speaker 0>There is. There is an API.

01:10:14.400 --> 01:10:15.280
<v Speaker 0>So you can

01:10:16.365 --> 01:10:18.125
<v Speaker 0>I don't know? Do I have it enabled

01:10:18.125 --> 01:10:19.885
<v Speaker 0>on my account? I do. So,

01:10:21.885 --> 01:10:23.725
<v Speaker 0>I mean, the fact that it's here in

01:10:23.725 --> 01:10:25.325
<v Speaker 0>the UI means there's an API as well.

01:10:25.325 --> 01:10:27.325
<v Speaker 0>I'm not gonna point to the API documentation,

01:10:27.325 --> 01:10:28.525
<v Speaker 0>but you can feel free to go and

01:10:28.525 --> 01:10:29.645
<v Speaker 0>find that. And I'll put a link in

01:10:29.645 --> 01:10:30.870
<v Speaker 0>the show notes. But, you know, you can

01:10:30.870 --> 01:10:32.710
<v Speaker 0>come here and click connections, and we've got

01:10:32.710 --> 01:10:34.150
<v Speaker 0>a few different options here

01:10:34.710 --> 01:10:36.150
<v Speaker 0>that allows you to get started in the

01:10:36.150 --> 01:10:37.269
<v Speaker 0>process of fabric.

01:10:37.590 --> 01:10:40.150
<v Speaker 0>I don't know if it's automatically approved or

01:10:40.150 --> 01:10:41.750
<v Speaker 0>if it has manual just now as we

01:10:41.750 --> 01:10:43.110
<v Speaker 0>roll it out. I don't know if Marcus

01:10:43.110 --> 01:10:44.070
<v Speaker 0>knows better than me there.

01:10:45.645 --> 01:10:47.965
<v Speaker 2>Yeah. I'm not sure if it's if it's

01:10:48.845 --> 01:10:51.565
<v Speaker 2>beta stage right now or if this is

01:10:51.565 --> 01:10:53.005
<v Speaker 2>GA. I don't know if, like, there's a

01:10:53.005 --> 01:10:55.405
<v Speaker 2>special target we're seeing. I'm just question that

01:10:55.405 --> 01:10:57.805
<v Speaker 2>went running through my head. But the documentation

01:10:57.805 --> 01:10:59.485
<v Speaker 2>is there, which is probably a good sign.

01:11:01.750 --> 01:11:05.590
<v Speaker 2>I don't know how quickly the API responds

01:11:05.590 --> 01:11:07.350
<v Speaker 2>right now to these requests. I think that

01:11:07.350 --> 01:11:09.110
<v Speaker 2>there is probably some level of

01:11:09.750 --> 01:11:10.630
<v Speaker 2>verification

01:11:10.630 --> 01:11:11.030
<v Speaker 2>right now.

01:11:12.595 --> 01:11:13.955
<v Speaker 2>On the Equinix

01:11:13.955 --> 01:11:16.755
<v Speaker 2>API side, I know it's possible to provision

01:11:16.755 --> 01:11:19.475
<v Speaker 2>fabric once once you've got your account created

01:11:19.475 --> 01:11:20.034
<v Speaker 2>there.

01:11:21.235 --> 01:11:22.835
<v Speaker 2>And this API

01:11:23.315 --> 01:11:25.315
<v Speaker 2>needs some information from that API,

01:11:25.730 --> 01:11:27.250
<v Speaker 2>So there's a, you know, a little bit

01:11:27.250 --> 01:11:29.729
<v Speaker 2>of hand holding you have to do yourself.

01:11:30.850 --> 01:11:33.010
<v Speaker 2>What another thing that I'd like to share,

01:11:33.010 --> 01:11:35.730
<v Speaker 2>if I can dig it up, is that

01:11:35.730 --> 01:11:36.369
<v Speaker 2>the

01:11:37.409 --> 01:11:38.769
<v Speaker 2>the Terraform

01:11:38.850 --> 01:11:39.489
<v Speaker 2>provider

01:11:40.305 --> 01:11:43.665
<v Speaker 2>for Equinix has some examples of how you

01:11:43.665 --> 01:11:44.304
<v Speaker 2>can

01:11:45.824 --> 01:11:48.545
<v Speaker 2>of how you can use, say, the Google

01:11:48.785 --> 01:11:51.344
<v Speaker 2>and the Amazon and Azure, like, link them

01:11:51.344 --> 01:11:53.025
<v Speaker 2>all up through their

01:11:53.665 --> 01:11:55.184
<v Speaker 2>through Equinix Fiber

01:11:55.425 --> 01:11:56.065
<v Speaker 2>to

01:11:56.360 --> 01:11:58.600
<v Speaker 2>create one, like, humongous

01:11:58.920 --> 01:11:59.960
<v Speaker 2>cloud network.

01:12:01.720 --> 01:12:03.720
<v Speaker 2>So Humongous cloud network. Oh, they can't Yeah.

01:12:03.720 --> 01:12:06.360
<v Speaker 2>Anyway, that that's Trademark. My marketing. Yeah. That

01:12:06.360 --> 01:12:08.360
<v Speaker 2>was my marketing. I didn't go with that.

01:12:09.685 --> 01:12:12.805
<v Speaker 2>But Equinix Metal can also be connected in

01:12:12.805 --> 01:12:14.325
<v Speaker 2>in those same sort of ways. And

01:12:14.885 --> 01:12:16.965
<v Speaker 2>one of the things that we'd like to

01:12:16.965 --> 01:12:17.845
<v Speaker 2>be able to do

01:12:18.805 --> 01:12:20.725
<v Speaker 2>in terms of Crossplane is be able to

01:12:20.725 --> 01:12:22.485
<v Speaker 2>take advantage of all of the resources that

01:12:22.485 --> 01:12:24.020
<v Speaker 2>are native to

01:12:24.340 --> 01:12:25.940
<v Speaker 2>Equinix Metal API,

01:12:26.340 --> 01:12:27.940
<v Speaker 2>turn them into something that you can provision

01:12:27.940 --> 01:12:28.980
<v Speaker 2>in Kubernetes,

01:12:28.980 --> 01:12:31.620
<v Speaker 2>and imagine you're in Kubernetes. And and another

01:12:31.620 --> 01:12:33.300
<v Speaker 2>one of those resources that we can't control

01:12:33.300 --> 01:12:34.900
<v Speaker 2>right now because we haven't created

01:12:35.645 --> 01:12:37.965
<v Speaker 2>we haven't written it into the provider yet.

01:12:38.205 --> 01:12:42.045
<v Speaker 2>But you can provision these bare metal servers,

01:12:42.045 --> 01:12:43.005
<v Speaker 2>the networks,

01:12:43.645 --> 01:12:46.045
<v Speaker 2>all their interconnects to other clouds,

01:12:46.364 --> 01:12:46.765
<v Speaker 2>provision

01:12:48.360 --> 01:12:52.040
<v Speaker 2>the BGP networks and control those all from

01:12:52.040 --> 01:12:53.239
<v Speaker 2>Kubernetes. Like,

01:12:54.520 --> 01:12:56.520
<v Speaker 2>I'm in this weird spot of, like, building

01:12:56.520 --> 01:12:58.200
<v Speaker 2>these tools and not quite knowing what to

01:12:58.200 --> 01:12:59.800
<v Speaker 2>do with them, but it sounds like I

01:12:59.800 --> 01:13:01.239
<v Speaker 2>could do a lot of things with them.

01:13:01.560 --> 01:13:03.400
<v Speaker 1>Yeah. So so could you, like,

01:13:04.275 --> 01:13:07.315
<v Speaker 1>let's say, provision a device on Equinix metal

01:13:07.315 --> 01:13:09.955
<v Speaker 1>and then some of this fabric

01:13:10.035 --> 01:13:10.595
<v Speaker 1>stuff,

01:13:10.915 --> 01:13:13.955
<v Speaker 1>and then, like, a database on Azure and

01:13:13.955 --> 01:13:16.355
<v Speaker 1>then just have connectivity between them? Is that

01:13:16.355 --> 01:13:18.510
<v Speaker 1>is that kind of along the lines of

01:13:18.510 --> 01:13:19.630
<v Speaker 1>what you're talking about? Like, could you make

01:13:19.630 --> 01:13:21.150
<v Speaker 1>use of these other providers

01:13:21.310 --> 01:13:23.150
<v Speaker 1>and the resource they can provision and then

01:13:23.150 --> 01:13:25.390
<v Speaker 1>have that connection to them via fabric?

01:13:25.870 --> 01:13:28.350
<v Speaker 2>Yeah. And so you're you're you're

01:13:28.350 --> 01:13:29.150
<v Speaker 2>getting

01:13:30.685 --> 01:13:33.645
<v Speaker 2>you're getting the latency drop, the the reduced

01:13:33.645 --> 01:13:35.405
<v Speaker 2>latency. You're getting

01:13:36.125 --> 01:13:38.844
<v Speaker 2>I I believe there's gonna be some difference

01:13:38.844 --> 01:13:41.485
<v Speaker 2>in what you're paying for throughput

01:13:41.485 --> 01:13:43.885
<v Speaker 2>since you're, like, within the same facility.

01:13:44.045 --> 01:13:44.364
<v Speaker 2>Mhmm.

01:13:45.640 --> 01:13:47.560
<v Speaker 2>Again, we're we're talking about three different providers

01:13:47.560 --> 01:13:50.200
<v Speaker 2>in this case. We're talking about Equinix middle

01:13:50.200 --> 01:13:53.080
<v Speaker 2>middle Equinix

01:13:53.080 --> 01:13:56.440
<v Speaker 2>and, like, Azure or AWS or whoever. So

01:13:56.440 --> 01:13:58.760
<v Speaker 2>each of them has some different policies around

01:13:58.760 --> 01:13:59.800
<v Speaker 2>this. But

01:14:00.364 --> 01:14:03.324
<v Speaker 1>in the end, the the capabilities are on

01:14:03.324 --> 01:14:03.885
<v Speaker 2>there.

01:14:04.125 --> 01:14:06.285
<v Speaker 2>Right? Yeah. That's one of the examples that

01:14:06.285 --> 01:14:07.164
<v Speaker 2>I really like

01:14:07.485 --> 01:14:09.804
<v Speaker 2>was one where there was, like, ECQ nodes

01:14:09.804 --> 01:14:12.284
<v Speaker 2>and packet devices being bridged together

01:14:12.685 --> 01:14:13.965
<v Speaker 2>for a

01:14:14.540 --> 01:14:15.820
<v Speaker 2>for a single cluster. I

01:14:16.540 --> 01:14:18.300
<v Speaker 2>that's the kind of thing that this enables.

01:14:18.620 --> 01:14:21.500
<v Speaker 1>Yeah. We should definitely put together a configuration

01:14:21.500 --> 01:14:23.820
<v Speaker 1>package that has, like, a bunch of different

01:14:23.820 --> 01:14:25.660
<v Speaker 1>examples of these in that. And then you

01:14:25.660 --> 01:14:27.980
<v Speaker 1>can just, you know, install configuration that you

01:14:27.980 --> 01:14:28.940
<v Speaker 1>have all the different, like,

01:14:29.675 --> 01:14:32.715
<v Speaker 1>you know, Equinix fabric metal things

01:14:33.195 --> 01:14:34.715
<v Speaker 1>that you can just try them out, you

01:14:34.715 --> 01:14:36.475
<v Speaker 1>know, immediately if you have a Kubernetes cluster.

01:14:36.475 --> 01:14:37.515
<v Speaker 1>That'd be pretty sweet.

01:14:38.715 --> 01:14:41.435
<v Speaker 0>Yeah. I agree. Definitely. So what I'm gonna

01:14:41.435 --> 01:14:43.800
<v Speaker 0>say is we'll kinda let's wrap this up

01:14:43.800 --> 01:14:45.239
<v Speaker 0>now. I think there's a few follow ups

01:14:45.239 --> 01:14:46.760
<v Speaker 0>that we need to agree. And I I

01:14:46.760 --> 01:14:47.960
<v Speaker 0>think the best way for me to do

01:14:47.960 --> 01:14:49.159
<v Speaker 0>that is just to get you to confirm

01:14:49.159 --> 01:14:51.239
<v Speaker 0>now so that you can't back out. But

01:14:52.440 --> 01:14:55.000
<v Speaker 0>I think what we've agreed there is that

01:14:54.405 --> 01:14:55.764
<v Speaker 0>there's still some work to do in the

01:14:55.764 --> 01:14:58.005
<v Speaker 0>Crossplane provider. We wanna build out more support

01:14:58.005 --> 01:14:59.204
<v Speaker 0>from all these objects.

01:14:59.764 --> 01:15:02.405
<v Speaker 0>You know, it's October. There is Oktoberfest.

01:15:02.405 --> 01:15:03.844
<v Speaker 0>I always find that it's

01:15:04.164 --> 01:15:05.925
<v Speaker 0>when I'm looking for new things that I

01:15:05.925 --> 01:15:07.525
<v Speaker 0>can go and contribute to, one of the

01:15:07.525 --> 01:15:09.204
<v Speaker 0>most daunting things is just where to start.

01:15:09.660 --> 01:15:11.180
<v Speaker 0>So I think it would be really cool

01:15:11.180 --> 01:15:12.780
<v Speaker 0>if the three of us could maybe find

01:15:12.780 --> 01:15:14.860
<v Speaker 0>some time and it doesn't have to be

01:15:14.860 --> 01:15:16.780
<v Speaker 0>tomorrow or, you know, or next week. But

01:15:17.020 --> 01:15:19.180
<v Speaker 0>maybe just to show people how to get

01:15:19.180 --> 01:15:21.340
<v Speaker 0>involved in writing a Crossplane provider support in

01:15:21.340 --> 01:15:23.820
<v Speaker 0>a new Equinix metal API and and walking

01:15:23.820 --> 01:15:25.565
<v Speaker 0>through the process. And one of the things

01:15:25.565 --> 01:15:27.005
<v Speaker 0>that always trips me up again when I

01:15:27.165 --> 01:15:29.325
<v Speaker 0>especially coming to a project like this is

01:15:29.485 --> 01:15:31.005
<v Speaker 0>I always feel like I should submit a

01:15:31.005 --> 01:15:32.125
<v Speaker 0>PR with a test.

01:15:32.605 --> 01:15:34.445
<v Speaker 0>I never know how to write the test.

01:15:34.445 --> 01:15:35.245
<v Speaker 0>So, you know,

01:15:35.645 --> 01:15:37.900
<v Speaker 0>having something like this where we can show

01:15:37.900 --> 01:15:39.099
<v Speaker 0>people how to do that, I think would

01:15:39.099 --> 01:15:41.020
<v Speaker 0>be really beneficial and hope to drive more

01:15:41.020 --> 01:15:42.300
<v Speaker 0>support as a provider.

01:15:42.940 --> 01:15:45.419
<v Speaker 0>And Marcus, think we definitely need to start,

01:15:45.420 --> 01:15:47.179
<v Speaker 0>you know, showing off the fabric stuff. I'm

01:15:47.179 --> 01:15:48.460
<v Speaker 0>looking forward to playing with us a bit

01:15:48.460 --> 01:15:50.380
<v Speaker 0>more now that it's coming available.

01:15:51.415 --> 01:15:53.975
<v Speaker 0>So really exciting stuff, and we've got lots

01:15:53.975 --> 01:15:55.175
<v Speaker 0>more content to come.

01:15:55.735 --> 01:15:57.655
<v Speaker 0>Is there anything that either of you would

01:15:57.655 --> 01:15:59.735
<v Speaker 0>like to close on before we finish up?

01:16:00.455 --> 01:16:02.375
<v Speaker 1>No. That sounds that sounds pretty good to

01:16:02.375 --> 01:16:05.014
<v Speaker 1>me. Folks are interested just generally in Crossplane

01:16:05.014 --> 01:16:05.815
<v Speaker 1>providers.

01:16:05.895 --> 01:16:07.210
<v Speaker 1>If you go and look at the the

01:16:07.210 --> 01:16:10.330
<v Speaker 1>TVS playlist on the Crossplane YouTube channel, there's

01:16:10.330 --> 01:16:13.130
<v Speaker 1>a few different examples of bootstrapping new providers,

01:16:13.130 --> 01:16:15.690
<v Speaker 1>which should give you some context on, you

01:16:15.690 --> 01:16:17.530
<v Speaker 1>know, how to contribute to the Equinix metal

01:16:17.530 --> 01:16:18.090
<v Speaker 1>one.

01:16:18.650 --> 01:16:20.409
<v Speaker 1>And then also in either

01:16:21.265 --> 01:16:23.025
<v Speaker 1>I I guess it's still packet Slack. I

01:16:23.025 --> 01:16:24.705
<v Speaker 1>don't know if it or Equinix Metal Slack

01:16:24.705 --> 01:16:27.025
<v Speaker 1>and Crossplane Slack are both great places or

01:16:27.025 --> 01:16:29.824
<v Speaker 1>on Twitter to reach any of us.

01:16:30.864 --> 01:16:33.105
<v Speaker 1>So, yeah, definitely reach out and

01:16:33.425 --> 01:16:35.745
<v Speaker 1>we'll we'll go the extra mile to make

01:16:35.745 --> 01:16:36.945
<v Speaker 1>sure you're able to contribute.

01:16:38.280 --> 01:16:40.679
<v Speaker 0>That sounds awesome. And from Premier Marcus.

01:16:40.840 --> 01:16:43.160
<v Speaker 2>Yeah. Thanks for asking all the right questions,

01:16:43.160 --> 01:16:45.960
<v Speaker 2>David, join this conversation.

01:16:45.960 --> 01:16:46.520
<v Speaker 2>And

01:16:46.760 --> 01:16:49.000
<v Speaker 2>and also, it's cool for me to just,

01:16:49.000 --> 01:16:50.840
<v Speaker 2>like, sit back and listen to Dan finally,

01:16:50.840 --> 01:16:52.475
<v Speaker 2>like, explain to me, like, have the time,

01:16:52.475 --> 01:16:53.835
<v Speaker 2>the window to explain

01:16:54.395 --> 01:16:56.475
<v Speaker 2>all the changes that have happened in Crossplane

01:16:56.475 --> 01:16:57.835
<v Speaker 2>over the last two versions.

01:16:59.435 --> 01:17:00.795
<v Speaker 2>Yeah. The

01:17:02.235 --> 01:17:03.275
<v Speaker 2>things have been called

01:17:04.070 --> 01:17:05.750
<v Speaker 2>there were different names for some of the

01:17:05.750 --> 01:17:08.230
<v Speaker 2>same features, but they've evolved and they've evolved

01:17:08.230 --> 01:17:10.950
<v Speaker 2>in, like, powerful ways. So I still have

01:17:10.950 --> 01:17:13.030
<v Speaker 2>the old names in my head, but they're

01:17:13.030 --> 01:17:15.030
<v Speaker 2>not those old things. They are new things

01:17:15.030 --> 01:17:17.030
<v Speaker 2>that that Right. Can be used in

01:17:17.725 --> 01:17:19.885
<v Speaker 2>bigger and better ways and took a lot

01:17:19.885 --> 01:17:21.485
<v Speaker 2>of work together there. So I'm glad to

01:17:21.485 --> 01:17:24.045
<v Speaker 2>see that. Yeah. For sure. Well, we we

01:17:24.045 --> 01:17:24.844
<v Speaker 1>definitely

01:17:25.485 --> 01:17:27.805
<v Speaker 1>or I guess I I'll speak for myself

01:17:27.805 --> 01:17:30.045
<v Speaker 1>for sure working on the package manager, was

01:17:30.045 --> 01:17:31.324
<v Speaker 1>something that you originally

01:17:31.885 --> 01:17:32.765
<v Speaker 1>kinda got started.

01:17:33.780 --> 01:17:35.940
<v Speaker 1>Definitely was was nice to have all the

01:17:35.940 --> 01:17:37.700
<v Speaker 1>ideas that you recorded from all that and

01:17:37.700 --> 01:17:39.860
<v Speaker 1>that sort of thing and build on on

01:17:39.860 --> 01:17:42.500
<v Speaker 1>the work that you did. So definitely appreciate

01:17:42.500 --> 01:17:44.980
<v Speaker 1>that. And and and the the the functionality

01:17:44.980 --> 01:17:46.420
<v Speaker 1>today comes from the work that you did

01:17:46.420 --> 01:17:48.735
<v Speaker 1>as well. So I'm loving the good vibes

01:17:48.735 --> 01:17:50.175
<v Speaker 0>here, man. This is gonna make me tear

01:17:50.175 --> 01:17:51.054
<v Speaker 0>up. So

01:17:52.975 --> 01:17:55.535
<v Speaker 0>yeah. This was really cool. Crossplane is really

01:17:55.535 --> 01:17:57.295
<v Speaker 0>exciting. I'm looking forward to playing with us

01:17:57.295 --> 01:17:59.455
<v Speaker 0>more. I'm looking forward to hopefully contribute and

01:17:59.455 --> 01:18:01.054
<v Speaker 0>and help him with some of these API

01:18:01.054 --> 01:18:02.599
<v Speaker 0>gaps. And I really hope that we can

01:18:02.599 --> 01:18:05.079
<v Speaker 0>come back around full circle here in a

01:18:05.079 --> 01:18:07.800
<v Speaker 0>month or whatever and really show this off

01:18:07.800 --> 01:18:09.239
<v Speaker 0>as well. And I'm gonna commit you to

01:18:09.239 --> 01:18:11.159
<v Speaker 0>showing off the SSH provider too. So we'll

01:18:11.159 --> 01:18:12.760
<v Speaker 0>get that ready. Got it. There there was

01:18:12.760 --> 01:18:14.040
<v Speaker 0>a lot of things we said we're also

01:18:14.040 --> 01:18:15.755
<v Speaker 0>gonna be in the show notes. So let

01:18:15.755 --> 01:18:17.835
<v Speaker 0>me catch up with you both afterwards. We'll

01:18:17.835 --> 01:18:19.435
<v Speaker 0>get make sure that we haven't messed anything

01:18:19.435 --> 01:18:21.275
<v Speaker 0>and we'll get all that included. So anything

01:18:21.275 --> 01:18:22.715
<v Speaker 0>we said will be there, we'll hopefully be

01:18:22.715 --> 01:18:25.755
<v Speaker 0>there. Thank you again, both of you, for

01:18:25.755 --> 01:18:27.195
<v Speaker 0>joining me. This is a really good session.

01:18:27.195 --> 01:18:29.595
<v Speaker 0>I enjoyed it. Yep. Thank you. You have

01:18:29.595 --> 01:18:31.540
<v Speaker 0>a good one. Have a great day. Thanks

01:18:31.540 --> 01:18:32.500
<v Speaker 0>again. Bye. Bye.
