WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 8f6887f3-938c-4355-8d3d-110661ef7605
Created: 2025-04-29T14:36:40.584Z
Duration: 416.2358
Channels: 1

00:00:00.000 --> 00:00:02.240
<v Speaker 0>Let's not piss around. Here's my top five

00:00:02.240 --> 00:00:04.799
<v Speaker 0>tools in 2023 to improve your command line

00:00:04.799 --> 00:00:06.080
<v Speaker 0>life. Enjoy.

00:00:06.799 --> 00:00:08.959
<v Speaker 0>Tool number one is Xelage.

00:00:09.120 --> 00:00:12.719
<v Speaker 0>It's a terminal multiplexer like TMux, but actually

00:00:12.719 --> 00:00:13.599
<v Speaker 0>works for humans.

00:00:14.255 --> 00:00:16.414
<v Speaker 0>Let's remove my configuration

00:00:19.055 --> 00:00:20.175
<v Speaker 0>and restart.

00:00:21.135 --> 00:00:22.975
<v Speaker 0>You'll see we get an interface that gives

00:00:22.975 --> 00:00:24.654
<v Speaker 0>us everything that we need to learn how

00:00:24.654 --> 00:00:27.615
<v Speaker 0>Xelage works. You want a new tab? Done.

00:00:27.615 --> 00:00:29.695
<v Speaker 0>You want a new pane? Done. Done. Done.

00:00:30.390 --> 00:00:32.309
<v Speaker 0>Every time you enter a new mode, the

00:00:32.309 --> 00:00:34.710
<v Speaker 0>commands are on the bottom. Control t for

00:00:34.710 --> 00:00:37.829
<v Speaker 0>tab, control s for search, control p for

00:00:37.829 --> 00:00:38.550
<v Speaker 0>pane.

00:00:38.950 --> 00:00:41.190
<v Speaker 0>When you select one of these modes, the

00:00:41.190 --> 00:00:43.270
<v Speaker 0>commands are right below it. You can see

00:00:43.270 --> 00:00:46.594
<v Speaker 0>here x will close my pane. Zellege is

00:00:46.594 --> 00:00:47.874
<v Speaker 0>a fantastic tool,

00:00:48.035 --> 00:00:51.394
<v Speaker 0>especially paired up with a terminal like Alacrity,

00:00:51.394 --> 00:00:54.515
<v Speaker 0>which is super fast, GPU rendered and written

00:00:54.515 --> 00:00:56.515
<v Speaker 0>in Rust. What's not to love?

00:00:56.835 --> 00:00:59.234
<v Speaker 0>So go check out Zellege and improve your

00:00:59.234 --> 00:01:00.515
<v Speaker 0>terminal workflows now.

00:01:00.860 --> 00:01:03.820
<v Speaker 0>Next up, another tool written in Rust. This

00:01:03.820 --> 00:01:06.780
<v Speaker 0>time, Just. What is Just? Well, it's a

00:01:06.780 --> 00:01:09.420
<v Speaker 0>makefile replacement that doesn't suck. We open up

00:01:09.420 --> 00:01:11.740
<v Speaker 0>a Just file and it looks just like

00:01:11.740 --> 00:01:13.979
<v Speaker 0>a makefile. However, we can use something called

00:01:13.979 --> 00:01:16.545
<v Speaker 0>a default target called default. We can use

00:01:16.545 --> 00:01:18.465
<v Speaker 0>the at sign so that doesn't print out

00:01:18.465 --> 00:01:20.384
<v Speaker 0>each of the commands and also has a

00:01:20.384 --> 00:01:22.145
<v Speaker 0>mode where it can show you a chooser,

00:01:22.145 --> 00:01:23.664
<v Speaker 0>which we'll see in just a second.

00:01:23.905 --> 00:01:27.185
<v Speaker 0>There's no dot phony here at all. Just

00:01:27.185 --> 00:01:29.664
<v Speaker 0>appreciates and understands that people were using make

00:01:29.664 --> 00:01:31.870
<v Speaker 0>as a task runner. So Just is a

00:01:31.870 --> 00:01:32.830
<v Speaker 0>task runner.

00:01:33.390 --> 00:01:35.470
<v Speaker 0>You can set a shebang on any target

00:01:35.470 --> 00:01:37.390
<v Speaker 0>to allow you to run a script.

00:01:37.950 --> 00:01:41.070
<v Speaker 0>Here, instead of using bash or SH, I'm

00:01:41.070 --> 00:01:43.310
<v Speaker 0>actually throwing it through the Python interpreter.

00:01:43.775 --> 00:01:45.935
<v Speaker 0>So we can run just shell and we'll

00:01:45.935 --> 00:01:48.575
<v Speaker 0>actually execute a Python process and interpret some

00:01:48.575 --> 00:01:51.135
<v Speaker 0>Python code. We also have comments on each

00:01:51.135 --> 00:01:52.095
<v Speaker 0>of our targets.

00:01:52.255 --> 00:01:54.255
<v Speaker 0>These are shown on the command line when

00:01:54.255 --> 00:01:56.015
<v Speaker 0>we run just with auto completion.

00:01:56.780 --> 00:01:59.100
<v Speaker 0>And you can also have parameters to your

00:01:59.100 --> 00:02:02.220
<v Speaker 0>targets. Here, plan and deploy take a parameter

00:02:02.220 --> 00:02:05.260
<v Speaker 0>called stack which defaults to an empty string.

00:02:05.580 --> 00:02:08.780
<v Speaker 0>And we're just using familiar Jinja or handlebars

00:02:08.780 --> 00:02:09.580
<v Speaker 0>syntax

00:02:10.194 --> 00:02:12.595
<v Speaker 0>to interpolate that into our commands.

00:02:13.075 --> 00:02:15.795
<v Speaker 0>And just like Make, you can have dependencies

00:02:15.795 --> 00:02:16.675
<v Speaker 0>like so.

00:02:17.635 --> 00:02:19.235
<v Speaker 0>So if I run Just on its own,

00:02:19.235 --> 00:02:20.355
<v Speaker 0>we get the chooser.

00:02:20.834 --> 00:02:22.595
<v Speaker 0>If I run Just Shell, I get a

00:02:22.595 --> 00:02:23.395
<v Speaker 0>Python process.

00:02:23.930 --> 00:02:26.810
<v Speaker 0>No. Phony, things just work. Go check out

00:02:26.810 --> 00:02:29.450
<v Speaker 0>Just. This next tool isn't written in Rust,

00:02:29.450 --> 00:02:30.970
<v Speaker 0>but I'm gonna let it slide because it's

00:02:30.970 --> 00:02:33.530
<v Speaker 0>written in Go and it boosts my workflow

00:02:33.530 --> 00:02:34.730
<v Speaker 0>like no other tool.

00:02:35.210 --> 00:02:37.530
<v Speaker 0>Let's see the end to my DNS directory.

00:02:38.545 --> 00:02:40.465
<v Speaker 0>Now you'll see here at the top the

00:02:40.465 --> 00:02:41.345
<v Speaker 0>Dartenv

00:02:41.345 --> 00:02:42.065
<v Speaker 0>ran.

00:02:42.225 --> 00:02:44.705
<v Speaker 0>Why? Well, because there's a dot ENVRC

00:02:44.705 --> 00:02:45.905
<v Speaker 0>in this directory.

00:02:46.385 --> 00:02:48.465
<v Speaker 0>It has now loaded another ENVRC

00:02:48.465 --> 00:02:51.040
<v Speaker 0>because I told it to and then exports

00:02:51.040 --> 00:02:53.520
<v Speaker 0>a bunch of variables or environment variables that

00:02:53.520 --> 00:02:55.520
<v Speaker 0>I need for this project to actually do

00:02:55.520 --> 00:02:56.800
<v Speaker 0>anything useful.

00:02:57.599 --> 00:02:59.440
<v Speaker 0>Let's open this in Helix.

00:03:00.000 --> 00:03:01.760
<v Speaker 0>Source up is what tells it to load

00:03:01.760 --> 00:03:03.360
<v Speaker 0>any parent ENVRC.

00:03:03.915 --> 00:03:07.035
<v Speaker 0>Why? Well, I set my Cloudflare account ID

00:03:07.035 --> 00:03:09.035
<v Speaker 0>at the root of my mono repository.

00:03:09.275 --> 00:03:11.035
<v Speaker 0>So I want to propagate it to all

00:03:11.035 --> 00:03:13.515
<v Speaker 0>other services within the mono repo.

00:03:13.995 --> 00:03:16.715
<v Speaker 0>Next, export the Cloudflare API token pulling it

00:03:16.715 --> 00:03:19.590
<v Speaker 0>in from one password. Why? Because this particular

00:03:19.590 --> 00:03:22.950
<v Speaker 0>service needs it. Lastly, I'm exporting Rawkode equals

00:03:22.950 --> 00:03:24.550
<v Speaker 0>hello, just so I can show you what

00:03:24.550 --> 00:03:26.470
<v Speaker 0>happens when I make a modification to this

00:03:26.470 --> 00:03:27.030
<v Speaker 0>file.

00:03:27.350 --> 00:03:29.670
<v Speaker 0>Dartmouth tells me it's not going to load

00:03:29.670 --> 00:03:32.150
<v Speaker 0>it. It wants me to review and approve.

00:03:35.105 --> 00:03:35.985
<v Speaker 0>Like so.

00:03:36.305 --> 00:03:38.864
<v Speaker 0>Now we can do echo hello and we

00:03:38.864 --> 00:03:42.705
<v Speaker 0>get hello too. Replace your .env's with ENVRCs

00:03:42.705 --> 00:03:45.504
<v Speaker 0>and bring some sanity to your development environments.

00:03:45.504 --> 00:03:47.584
<v Speaker 0>Let's jump straight back on that Rust train

00:03:47.584 --> 00:03:49.780
<v Speaker 0>with Atuan. At least I think that's how

00:03:49.780 --> 00:03:51.940
<v Speaker 0>it's pronounced. A t u I n.

00:03:52.180 --> 00:03:55.380
<v Speaker 0>This replaces all the history on my terminal.

00:03:55.860 --> 00:03:57.220
<v Speaker 0>When I press up,

00:03:57.700 --> 00:03:59.460
<v Speaker 0>you'll see the commands I just ran when

00:03:59.460 --> 00:04:00.980
<v Speaker 0>I demoed Dart Enve as well as the

00:04:00.980 --> 00:04:02.820
<v Speaker 0>other commands that I've ran on this machine.

00:04:03.635 --> 00:04:04.435
<v Speaker 0>Specifically,

00:04:04.435 --> 00:04:06.515
<v Speaker 0>this directory, as you'll see at the bottom

00:04:06.515 --> 00:04:07.795
<v Speaker 0>left of the terminal.

00:04:08.355 --> 00:04:10.515
<v Speaker 0>Why do I want pair directory history?

00:04:10.754 --> 00:04:13.315
<v Speaker 0>Well, the commands I type are particularly context

00:04:13.315 --> 00:04:14.035
<v Speaker 0>sensitive.

00:04:14.194 --> 00:04:15.875
<v Speaker 0>When I'm in a Pulumi project, I'm gonna

00:04:15.875 --> 00:04:17.769
<v Speaker 0>run Pulumi up. When I'm in a Terraform

00:04:17.769 --> 00:04:19.850
<v Speaker 0>project, I'm gonna run Terraform apply.

00:04:20.009 --> 00:04:21.850
<v Speaker 0>When I'm in a Kubernetes project, I'm gonna

00:04:21.850 --> 00:04:22.810
<v Speaker 0>cry for help.

00:04:23.370 --> 00:04:25.210
<v Speaker 0>So use a history tool that gives you

00:04:25.210 --> 00:04:26.570
<v Speaker 0>the commands that you need.

00:04:26.970 --> 00:04:29.050
<v Speaker 0>But don't worry. You can hit control r

00:04:29.050 --> 00:04:31.610
<v Speaker 0>again for global search, control r again for

00:04:31.610 --> 00:04:34.105
<v Speaker 0>host search because Atowin supports

00:04:34.105 --> 00:04:35.145
<v Speaker 0>multiple machines.

00:04:35.385 --> 00:04:37.545
<v Speaker 0>Configure your shared key and show your history

00:04:37.545 --> 00:04:39.465
<v Speaker 0>across all your machines and laptops.

00:04:39.865 --> 00:04:41.225
<v Speaker 0>Lastly, session.

00:04:41.465 --> 00:04:43.385
<v Speaker 0>This is just the commands that I've entered

00:04:43.385 --> 00:04:45.730
<v Speaker 0>while recording this video. So go check out

00:04:45.730 --> 00:04:47.410
<v Speaker 0>how to win. Never have to type out

00:04:47.410 --> 00:04:49.010
<v Speaker 0>an actual command again.

00:04:49.170 --> 00:04:51.410
<v Speaker 0>Last tool, and I'm being selfish, it's one

00:04:51.410 --> 00:04:52.770
<v Speaker 0>of my own. Contraya.

00:04:52.770 --> 00:04:54.610
<v Speaker 0>It's a dot file manager.

00:04:54.770 --> 00:04:58.290
<v Speaker 0>Why? I wipe my machine almost every single

00:04:58.290 --> 00:04:59.010
<v Speaker 0>month.

00:04:59.170 --> 00:04:59.570
<v Speaker 0>Why?

00:05:00.195 --> 00:05:01.795
<v Speaker 0>I like to be clean. I like to

00:05:01.795 --> 00:05:03.555
<v Speaker 0>start fresh, and I like to make sure

00:05:03.555 --> 00:05:05.315
<v Speaker 0>that shit ever hits the fan, I never

00:05:05.315 --> 00:05:07.715
<v Speaker 0>lose that much. I use Contria to provision

00:05:07.715 --> 00:05:09.635
<v Speaker 0>all of my machines so they all function

00:05:09.635 --> 00:05:10.755
<v Speaker 0>the exact same.

00:05:11.315 --> 00:05:13.635
<v Speaker 0>It has cool support for variants, which means

00:05:13.635 --> 00:05:15.640
<v Speaker 0>I can have a single manifest that installs

00:05:15.640 --> 00:05:18.360
<v Speaker 0>Atuan, Zellej, Dartn, etcetera,

00:05:18.440 --> 00:05:21.880
<v Speaker 0>on Linux, Mac, BSD, whatever. It doesn't care.

00:05:22.760 --> 00:05:25.160
<v Speaker 0>That you can already see my Zellej configuration

00:05:25.160 --> 00:05:27.945
<v Speaker 0>already back to normal. Why? Well, the last

00:05:27.945 --> 00:05:31.305
<v Speaker 0>command I ran was comptria apply dash m,

00:05:31.385 --> 00:05:33.465
<v Speaker 0>which means I wanna run a single manifest

00:05:33.465 --> 00:05:34.985
<v Speaker 0>dev dot Zellej.

00:05:35.865 --> 00:05:37.065
<v Speaker 0>Let's take a look

00:05:37.465 --> 00:05:40.025
<v Speaker 0>at dev dot Zellej. Here, I define a

00:05:40.025 --> 00:05:43.169
<v Speaker 0>bunch of actions. One, package install. Two, config

00:05:43.169 --> 00:05:45.410
<v Speaker 0>install. Job done. You want to see the

00:05:45.410 --> 00:05:48.210
<v Speaker 0>variant syntax? Let's open variant dot yaml.

00:05:48.370 --> 00:05:50.290
<v Speaker 0>Here, I'm gonna run a command.

00:05:50.610 --> 00:05:52.770
<v Speaker 0>I set a marker to hello world, which

00:05:52.770 --> 00:05:54.849
<v Speaker 0>becomes the default invocation of this action.

00:05:55.825 --> 00:05:58.305
<v Speaker 0>Then I specify a variant where it can

00:05:58.305 --> 00:06:01.105
<v Speaker 0>use an expression language to compare the OS

00:06:01.105 --> 00:06:02.785
<v Speaker 0>name to macOS.

00:06:02.785 --> 00:06:04.544
<v Speaker 0>When I run this on a Mac, it'll

00:06:04.544 --> 00:06:05.825
<v Speaker 0>say hello from a Mac.

00:06:09.240 --> 00:06:12.040
<v Speaker 0>This time I'm specifying double verbosity mode so

00:06:12.040 --> 00:06:13.720
<v Speaker 0>that we can see the logs.

00:06:14.360 --> 00:06:17.160
<v Speaker 0>And there's my Mac. Quickly, comptri yaml allows

00:06:17.160 --> 00:06:19.720
<v Speaker 0>you to specify manifest paths that supports remote

00:06:19.720 --> 00:06:21.640
<v Speaker 0>paths too, the git repositories.

00:06:21.800 --> 00:06:23.400
<v Speaker 0>You can provide your own variables,

00:06:36.509 --> 00:06:38.750
<v Speaker 0>A DNS tool, red and rust.

00:06:39.389 --> 00:06:41.310
<v Speaker 0>These are real DNS text values on a

00:06:41.310 --> 00:06:43.230
<v Speaker 0>real domain from one of the maintainers.

00:06:43.470 --> 00:06:45.470
<v Speaker 0>Contria is awesome. It has too many features

00:06:45.470 --> 00:06:46.909
<v Speaker 0>to cover in this video, but you should

00:06:46.909 --> 00:06:48.590
<v Speaker 0>go check it out. I hope you like

00:06:48.590 --> 00:06:50.110
<v Speaker 0>these tools. If you've got tips for me

00:06:50.110 --> 00:06:51.790
<v Speaker 0>and tools that I should check out, hit

00:06:51.790 --> 00:06:53.790
<v Speaker 0>me up on Twitter. I've always got time

00:06:53.790 --> 00:06:55.870
<v Speaker 0>to play with something new. Catch you later.
