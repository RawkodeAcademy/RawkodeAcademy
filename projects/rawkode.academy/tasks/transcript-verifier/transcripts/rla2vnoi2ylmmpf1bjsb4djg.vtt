WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 4e506b1e-cb16-4727-9911-6c4320051bf5
Created: 2025-04-29T20:06:46.312Z
Duration: 5288.003
Channels: 1

00:00:51.580 --> 00:00:52.300
<v Speaker 0>Hello.

00:00:52.700 --> 00:00:55.180
<v Speaker 0>Welcome to today's episode of Rawkode live. I

00:00:55.180 --> 00:00:57.340
<v Speaker 0>am your host, Rawkode.

00:00:57.820 --> 00:00:59.980
<v Speaker 0>Today, we're gonna be taking a look at

00:00:59.980 --> 00:01:01.500
<v Speaker 0>TimescaleDB,

00:01:01.500 --> 00:01:04.095
<v Speaker 0>a time series database that is a little

00:01:04.095 --> 00:01:06.095
<v Speaker 0>bit different from what we may be accustomed

00:01:06.095 --> 00:01:09.615
<v Speaker 0>to. Timescale is a relational time series database,

00:01:09.615 --> 00:01:11.854
<v Speaker 0>which brings with it a lot of flexibility,

00:01:11.854 --> 00:01:13.375
<v Speaker 0>value, and power that we're gonna take a

00:01:13.375 --> 00:01:14.095
<v Speaker 0>look at today.

00:01:15.580 --> 00:01:17.180
<v Speaker 0>No. I'm not gonna do this alone. I

00:01:17.180 --> 00:01:19.180
<v Speaker 0>am gonna be guided. And for that, I

00:01:19.180 --> 00:01:22.540
<v Speaker 0>am joined by Aftar Serrafan from TimescaleDB.

00:01:22.619 --> 00:01:25.020
<v Speaker 0>Hi there. How are you? Hi, David. Thanks

00:01:25.020 --> 00:01:26.460
<v Speaker 1>for having me on the stream. It's a

00:01:26.460 --> 00:01:27.180
<v Speaker 1>pleasure to be here.

00:01:27.855 --> 00:01:29.775
<v Speaker 0>The the pleasure is all mine. I'm really

00:01:29.775 --> 00:01:32.175
<v Speaker 0>looking forward to to playing with Timescale

00:01:32.175 --> 00:01:35.375
<v Speaker 0>and just showing how interesting and cool Timescale

00:01:35.375 --> 00:01:37.215
<v Speaker 0>is in general, but even how cool are

00:01:37.215 --> 00:01:38.815
<v Speaker 0>some of the databases are that we're getting

00:01:38.815 --> 00:01:40.575
<v Speaker 0>coming out nowadays as well. So

00:01:41.580 --> 00:01:43.420
<v Speaker 0>would you like to take a few moments

00:01:43.420 --> 00:01:45.500
<v Speaker 0>just now to kind of introduce yourself, tell

00:01:45.500 --> 00:01:46.780
<v Speaker 0>us a little bit about you, and then

00:01:46.780 --> 00:01:48.460
<v Speaker 0>we'll talk about Timescale itself.

00:01:48.700 --> 00:01:49.500
<v Speaker 1>Fantastic.

00:01:49.580 --> 00:01:51.420
<v Speaker 1>Well, hi, everyone. I'm

00:01:51.580 --> 00:01:52.780
<v Speaker 1>basically

00:01:52.780 --> 00:01:54.300
<v Speaker 1>streaming in today from New York City.

00:01:54.965 --> 00:01:57.445
<v Speaker 1>I'm Afthar. I'm a developer advocate here at

00:01:57.445 --> 00:01:58.325
<v Speaker 1>Timescale,

00:01:58.564 --> 00:02:01.125
<v Speaker 1>and I'm originally from South Africa, but now

00:02:01.125 --> 00:02:03.365
<v Speaker 1>live in New York City. I'm super interested

00:02:03.365 --> 00:02:06.085
<v Speaker 1>in using technology to empower people. That's really

00:02:06.085 --> 00:02:07.284
<v Speaker 1>why I enjoy

00:02:07.490 --> 00:02:09.490
<v Speaker 1>being a developer advocate here at Timescale. You

00:02:09.490 --> 00:02:10.850
<v Speaker 1>get to learn new things all the time

00:02:10.850 --> 00:02:13.410
<v Speaker 1>and explore a bunch of different

00:02:14.290 --> 00:02:16.690
<v Speaker 1>use cases and and different projects, some of

00:02:16.690 --> 00:02:18.210
<v Speaker 1>which we're gonna get into in the stream

00:02:18.210 --> 00:02:18.770
<v Speaker 1>today.

00:02:19.090 --> 00:02:20.690
<v Speaker 1>And as I mentioned, you know, part of

00:02:20.690 --> 00:02:22.130
<v Speaker 1>my job is learning new stuff all the

00:02:22.130 --> 00:02:24.565
<v Speaker 1>time. So you can, follow me on Twitter

00:02:24.565 --> 00:02:26.885
<v Speaker 1>or my personal website is offthora.com

00:02:26.885 --> 00:02:28.805
<v Speaker 1>if you'd like to learn more. But yeah,

00:02:28.805 --> 00:02:30.645
<v Speaker 1>excited to get into TimescaleDB

00:02:30.645 --> 00:02:31.765
<v Speaker 1>today with you, David.

00:02:32.085 --> 00:02:33.925
<v Speaker 0>Awesome. Very, very cool.

00:02:34.325 --> 00:02:36.165
<v Speaker 0>Alright. I believe we're gonna

00:02:36.510 --> 00:02:38.189
<v Speaker 0>skip the chat around what it is and

00:02:38.189 --> 00:02:40.110
<v Speaker 0>you're gonna walk us through some slides that

00:02:40.110 --> 00:02:41.870
<v Speaker 0>you're prepared just to kinda give us a

00:02:41.870 --> 00:02:43.390
<v Speaker 0>little bit of a overview and some flavor

00:02:43.390 --> 00:02:45.629
<v Speaker 0>on what Timescale DB is. So let me

00:02:45.629 --> 00:02:47.790
<v Speaker 0>pop those up onto our screen.

00:02:48.349 --> 00:02:49.549
<v Speaker 0>Please take it away.

00:02:50.235 --> 00:02:51.035
<v Speaker 1>Fantastic.

00:02:51.115 --> 00:02:52.875
<v Speaker 1>So I just wanna give a a short

00:02:52.875 --> 00:02:55.195
<v Speaker 1>intro to what is TimescaleDB,

00:02:55.515 --> 00:02:57.675
<v Speaker 1>keeping in mind that, you know, some people

00:02:57.755 --> 00:03:00.475
<v Speaker 1>may be familiar with time series databases in

00:03:00.475 --> 00:03:01.035
<v Speaker 1>general,

00:03:01.355 --> 00:03:03.115
<v Speaker 1>whereas other people that might actually be a

00:03:03.115 --> 00:03:05.500
<v Speaker 1>foreign concept. So let's just take an overview

00:03:05.500 --> 00:03:07.819
<v Speaker 1>of of what exactly is TimescaleDB.

00:03:07.819 --> 00:03:10.060
<v Speaker 1>The simplest way to think of Timescale

00:03:10.220 --> 00:03:13.900
<v Speaker 1>is that it's Postgres with time series superpowers.

00:03:13.900 --> 00:03:16.380
<v Speaker 1>A lot of our users describe Timescale as

00:03:16.380 --> 00:03:18.380
<v Speaker 1>times Postgres for time series.

00:03:19.065 --> 00:03:20.745
<v Speaker 1>And there's really

00:03:21.385 --> 00:03:23.545
<v Speaker 1>what what that really means is that Timescale

00:03:23.545 --> 00:03:25.145
<v Speaker 1>is a relational database

00:03:25.305 --> 00:03:28.425
<v Speaker 1>packaged as a a relational time series database

00:03:28.425 --> 00:03:30.265
<v Speaker 1>packaged as a Postgres extension.

00:03:30.585 --> 00:03:32.185
<v Speaker 1>And this is in contrast to a lot

00:03:32.185 --> 00:03:34.720
<v Speaker 1>of other time series databases out there, which

00:03:34.720 --> 00:03:37.520
<v Speaker 1>are traditionally no SQL. So for example,

00:03:37.840 --> 00:03:40.240
<v Speaker 1>influx DB, which is something that David has

00:03:40.240 --> 00:03:42.640
<v Speaker 1>worked with before and knows very well.

00:03:43.920 --> 00:03:46.080
<v Speaker 1>And some other databases that are used for

00:03:46.080 --> 00:03:48.400
<v Speaker 1>time series data, things like MongoDB

00:03:48.720 --> 00:03:49.600
<v Speaker 1>and Cassandra.

00:03:50.275 --> 00:03:50.835
<v Speaker 1>So

00:03:51.555 --> 00:03:53.635
<v Speaker 1>there's sort of six main things that I

00:03:53.635 --> 00:03:56.115
<v Speaker 1>wanted to introduce you to around Timescale.

00:03:56.195 --> 00:03:57.795
<v Speaker 1>So the first one is that, you know,

00:03:57.795 --> 00:03:59.155
<v Speaker 1>Timescale is

00:03:59.635 --> 00:04:01.555
<v Speaker 1>built on top of Postgres. And so that

00:04:01.555 --> 00:04:01.955
<v Speaker 1>means

00:04:02.370 --> 00:04:05.410
<v Speaker 1>the same Postgres that people might be familiar

00:04:05.410 --> 00:04:07.890
<v Speaker 1>with from just storing relational data,

00:04:08.450 --> 00:04:10.530
<v Speaker 1>it all the same features are available

00:04:10.610 --> 00:04:12.850
<v Speaker 1>and Timescale basically runs on top of that.

00:04:12.850 --> 00:04:15.330
<v Speaker 1>You inherit the whole Postgres ecosystem

00:04:15.695 --> 00:04:18.495
<v Speaker 1>with all of its reliability and tooling and

00:04:18.495 --> 00:04:19.135
<v Speaker 1>and

00:04:19.695 --> 00:04:22.495
<v Speaker 1>and community that it's built over the past

00:04:22.495 --> 00:04:24.655
<v Speaker 1>twenty to thirty years or so.

00:04:25.055 --> 00:04:26.335
<v Speaker 1>The other thing to keep in mind with

00:04:26.335 --> 00:04:28.415
<v Speaker 1>Timescale is a lot most the reasons why

00:04:28.415 --> 00:04:31.590
<v Speaker 1>people gravitate towards it is because Timeseries data

00:04:31.590 --> 00:04:32.470
<v Speaker 1>requires

00:04:32.470 --> 00:04:33.350
<v Speaker 1>performance

00:04:33.590 --> 00:04:34.229
<v Speaker 1>that,

00:04:34.550 --> 00:04:36.870
<v Speaker 1>traditional databases can't really give. You know, when

00:04:36.870 --> 00:04:39.430
<v Speaker 1>you're dealing with Timeseries data, it's a lot

00:04:39.430 --> 00:04:40.710
<v Speaker 1>of data coming in,

00:04:41.030 --> 00:04:42.229
<v Speaker 1>constantly from,

00:04:42.470 --> 00:04:44.630
<v Speaker 1>the devices that you're monitoring

00:04:45.044 --> 00:04:48.325
<v Speaker 1>or whether it's some sort of deployment.

00:04:48.405 --> 00:04:50.164
<v Speaker 1>There's a like a DevOps use case as

00:04:50.164 --> 00:04:52.565
<v Speaker 1>well. So you wanna pick a database that

00:04:52.565 --> 00:04:54.164
<v Speaker 1>can actually give you the kind of performance

00:04:54.164 --> 00:04:56.165
<v Speaker 1>both in ingest and querying.

00:04:56.324 --> 00:04:58.725
<v Speaker 1>And so Timescale is is a really good

00:04:58.725 --> 00:05:01.320
<v Speaker 1>one to use for that. And the other

00:05:01.320 --> 00:05:03.160
<v Speaker 1>reason is, you know, once you reach a

00:05:03.160 --> 00:05:04.120
<v Speaker 1>certain scale,

00:05:04.840 --> 00:05:07.240
<v Speaker 1>that's kinda why Timescale has a scale in

00:05:07.240 --> 00:05:08.840
<v Speaker 1>the name. Once you reach once you reach

00:05:08.840 --> 00:05:10.120
<v Speaker 1>a certain scale,

00:05:10.440 --> 00:05:13.080
<v Speaker 1>you're gonna require a database that can actually

00:05:13.080 --> 00:05:16.055
<v Speaker 1>keep up with, in in our case, supporting

00:05:16.055 --> 00:05:17.975
<v Speaker 1>terabytes or petabytes of data.

00:05:18.535 --> 00:05:20.215
<v Speaker 1>And then the last three points is just,

00:05:20.215 --> 00:05:21.815
<v Speaker 1>you know, it's it's actually easier to have

00:05:21.815 --> 00:05:24.055
<v Speaker 1>this relational and time series data together.

00:05:24.935 --> 00:05:28.055
<v Speaker 1>And we also have advanced time series features,

00:05:28.055 --> 00:05:29.770
<v Speaker 1>some of which we're gonna get into things

00:05:29.770 --> 00:05:31.210
<v Speaker 1>like compression

00:05:31.449 --> 00:05:33.370
<v Speaker 1>and continuous aggregates

00:05:33.370 --> 00:05:36.090
<v Speaker 1>and automated data retention policies so that it's

00:05:36.090 --> 00:05:38.169
<v Speaker 1>not just about performance, but it's about just

00:05:38.169 --> 00:05:40.410
<v Speaker 1>working with time series data in general.

00:05:42.194 --> 00:05:43.955
<v Speaker 1>Some other things I wanted to mention, you

00:05:43.955 --> 00:05:45.395
<v Speaker 1>know, those

00:05:45.474 --> 00:05:48.195
<v Speaker 1>people who are unfamiliar with time series databases,

00:05:48.354 --> 00:05:49.955
<v Speaker 1>a good way to think about it is

00:05:49.955 --> 00:05:52.275
<v Speaker 1>that, you know, time series data is data

00:05:52.275 --> 00:05:55.794
<v Speaker 1>that show that that represents how things change

00:05:55.794 --> 00:05:59.100
<v Speaker 1>over time. So four examples of this that

00:05:59.100 --> 00:06:01.259
<v Speaker 1>I just wanted to introduce to you is

00:06:01.340 --> 00:06:03.660
<v Speaker 1>the first one is of DevOps monitoring.

00:06:03.740 --> 00:06:06.300
<v Speaker 1>So for example, I just have a SQL

00:06:06.300 --> 00:06:08.620
<v Speaker 1>query on the screen here that shows the

00:06:08.620 --> 00:06:12.055
<v Speaker 1>change of memory consumption for containers in a

00:06:12.055 --> 00:06:14.775
<v Speaker 1>Kubernetes cluster over the past ten minutes. So

00:06:14.775 --> 00:06:16.535
<v Speaker 1>that's an example of something that you'd wanna

00:06:16.535 --> 00:06:19.335
<v Speaker 1>wanna monitor with Timescale. Some other examples are

00:06:19.335 --> 00:06:21.815
<v Speaker 1>things like application metrics. You know, you're looking

00:06:21.815 --> 00:06:22.455
<v Speaker 1>at,

00:06:22.695 --> 00:06:25.255
<v Speaker 1>you know, user behavior on a website or

00:06:25.255 --> 00:06:26.870
<v Speaker 1>in an app each time

00:06:27.270 --> 00:06:29.750
<v Speaker 1>a user performs some sort of event, that

00:06:29.750 --> 00:06:32.229
<v Speaker 1>event stream is is time series data. And

00:06:32.229 --> 00:06:34.469
<v Speaker 1>another example is the Internet of Things. We're

00:06:34.469 --> 00:06:36.069
<v Speaker 1>gonna take a look at two demos later

00:06:36.069 --> 00:06:36.310
<v Speaker 1>on.

00:06:37.925 --> 00:06:40.565
<v Speaker 1>Any devices that you that you may use,

00:06:40.565 --> 00:06:43.285
<v Speaker 1>for example, smart devices, anyone who has an

00:06:43.285 --> 00:06:45.045
<v Speaker 1>Alexa or a Google Home or something like

00:06:45.045 --> 00:06:47.765
<v Speaker 1>that. And then traditionally, the traditional example of

00:06:47.765 --> 00:06:50.725
<v Speaker 1>time series data is financial data, stock prices.

00:06:51.125 --> 00:06:52.165
<v Speaker 1>Those of you who are

00:06:53.020 --> 00:06:55.820
<v Speaker 1>familiar with, you know, GameStop and and stuff

00:06:55.820 --> 00:06:57.340
<v Speaker 1>like that, all that stuff that's been happening

00:06:57.340 --> 00:06:58.060
<v Speaker 1>recently

00:06:58.300 --> 00:07:00.220
<v Speaker 1>will realize that, you know, as the prices

00:07:00.220 --> 00:07:02.300
<v Speaker 1>go up and down, that's time series data

00:07:02.300 --> 00:07:03.260
<v Speaker 1>for for finance.

00:07:05.354 --> 00:07:07.035
<v Speaker 1>Okay. And then I have some slides here

00:07:07.035 --> 00:07:09.115
<v Speaker 1>about, like, what makes Timescale a bit different,

00:07:09.115 --> 00:07:11.115
<v Speaker 1>but maybe we can save that for later

00:07:11.115 --> 00:07:12.715
<v Speaker 1>on or I just wanna give you a

00:07:12.715 --> 00:07:14.315
<v Speaker 1>chance to jump in here before I just,

00:07:14.315 --> 00:07:16.395
<v Speaker 1>you know, carry on. But our this is

00:07:16.395 --> 00:07:17.595
<v Speaker 1>about Timescale's

00:07:17.595 --> 00:07:20.800
<v Speaker 1>major abstraction called the hyper table, but maybe

00:07:20.800 --> 00:07:22.720
<v Speaker 1>we can deal with this later on in

00:07:22.720 --> 00:07:23.360
<v Speaker 1>the stream.

00:07:24.560 --> 00:07:26.880
<v Speaker 0>Yeah. Whatever you think is best for for

00:07:26.880 --> 00:07:28.400
<v Speaker 0>people to be aware of just now before

00:07:28.400 --> 00:07:30.080
<v Speaker 0>we start kicking the tires on this. So,

00:07:30.080 --> 00:07:31.280
<v Speaker 0>you know, if you wanna cover it, please

00:07:31.280 --> 00:07:33.039
<v Speaker 0>feel free. Otherwise, we can come back to

00:07:33.039 --> 00:07:33.440
<v Speaker 0>it later.

00:07:33.925 --> 00:07:35.845
<v Speaker 1>Okay. Well, it might just be two minutes.

00:07:35.845 --> 00:07:37.685
<v Speaker 1>I think that the reason why I'm bringing

00:07:37.685 --> 00:07:38.884
<v Speaker 1>this up is, you know, a lot of

00:07:38.884 --> 00:07:39.445
<v Speaker 1>people,

00:07:39.925 --> 00:07:42.164
<v Speaker 1>it can be difficult to understand, you know,

00:07:42.164 --> 00:07:45.445
<v Speaker 1>how can a relational database scale for time

00:07:45.445 --> 00:07:46.085
<v Speaker 1>series data.

00:07:46.580 --> 00:07:48.820
<v Speaker 1>And so that's why I want to introduce

00:07:48.820 --> 00:07:51.380
<v Speaker 1>the major abstraction of TimescaleDB,

00:07:51.380 --> 00:07:53.060
<v Speaker 1>which is this thing that we call a

00:07:53.060 --> 00:07:55.220
<v Speaker 1>hyper table. So, you know, one of the

00:07:55.220 --> 00:07:57.860
<v Speaker 1>benefits of using Timescale is that it allows

00:07:57.860 --> 00:08:00.740
<v Speaker 1>you to ingest these get really high ingestion

00:08:00.740 --> 00:08:01.220
<v Speaker 1>rates

00:08:01.885 --> 00:08:04.044
<v Speaker 1>on your data. So in this case, millions

00:08:04.044 --> 00:08:06.044
<v Speaker 1>of data points a second. And the way

00:08:06.044 --> 00:08:07.245
<v Speaker 1>that we do that is to do this

00:08:07.245 --> 00:08:09.085
<v Speaker 1>abstraction called a hyper table,

00:08:10.445 --> 00:08:13.165
<v Speaker 1>which is you can kind of think of

00:08:14.044 --> 00:08:15.565
<v Speaker 1>so so this is how the the hyper

00:08:15.565 --> 00:08:16.125
<v Speaker 1>table works.

00:08:16.890 --> 00:08:19.450
<v Speaker 1>So what Timescale has is

00:08:19.690 --> 00:08:22.970
<v Speaker 1>automatic partitioning in both space and time. So

00:08:22.970 --> 00:08:24.010
<v Speaker 1>if you think of

00:08:26.250 --> 00:08:27.930
<v Speaker 1>your traditional

00:08:27.930 --> 00:08:29.290
<v Speaker 1>relational table,

00:08:29.530 --> 00:08:31.610
<v Speaker 1>what we do is we have

00:08:32.174 --> 00:08:34.015
<v Speaker 1>these different subtables,

00:08:34.575 --> 00:08:36.815
<v Speaker 1>which we call chunks. So in this case,

00:08:37.615 --> 00:08:39.455
<v Speaker 1>you know, you have data coming in in

00:08:39.455 --> 00:08:41.695
<v Speaker 1>time, but you also might have different kinds

00:08:41.695 --> 00:08:44.815
<v Speaker 1>of data maybe from different devices or different

00:08:44.815 --> 00:08:47.009
<v Speaker 1>locations or something like that. And so what

00:08:47.009 --> 00:08:49.329
<v Speaker 1>we have is each chunk represents

00:08:49.410 --> 00:08:52.050
<v Speaker 1>both at a point in time as well

00:08:52.050 --> 00:08:54.050
<v Speaker 1>as you can also partition in space, which

00:08:54.050 --> 00:08:55.570
<v Speaker 1>is, you know, the the the type or

00:08:55.570 --> 00:08:57.730
<v Speaker 1>the location. And so these chunks are kinda

00:08:57.730 --> 00:08:58.850
<v Speaker 1>like subtables.

00:08:58.930 --> 00:09:01.505
<v Speaker 1>And so what happens is that the these

00:09:01.665 --> 00:09:04.225
<v Speaker 1>because you're dealing with these subtables underneath and

00:09:04.225 --> 00:09:06.305
<v Speaker 1>not just one large table,

00:09:06.545 --> 00:09:08.545
<v Speaker 1>the time that it takes to actually query

00:09:08.545 --> 00:09:11.345
<v Speaker 1>data and ingest data is

00:09:11.745 --> 00:09:12.625
<v Speaker 1>shortened

00:09:12.625 --> 00:09:14.865
<v Speaker 1>quite a bit. It's it's sped up quite

00:09:14.865 --> 00:09:16.970
<v Speaker 1>a bit. But as a user,

00:09:17.450 --> 00:09:20.090
<v Speaker 1>you're still dealing with just one

00:09:21.290 --> 00:09:23.610
<v Speaker 1>abstraction of a of a single table when

00:09:23.610 --> 00:09:24.570
<v Speaker 1>in reality,

00:09:25.690 --> 00:09:27.370
<v Speaker 1>as you can see, there's actually,

00:09:27.850 --> 00:09:29.130
<v Speaker 1>in some cases, hundreds

00:09:29.565 --> 00:09:30.285
<v Speaker 1>or,

00:09:30.525 --> 00:09:33.245
<v Speaker 1>you know, even more of these subtables underneath.

00:09:33.245 --> 00:09:35.325
<v Speaker 1>So that's like the main abstraction. And I

00:09:35.325 --> 00:09:36.845
<v Speaker 1>think what that allows you to do is

00:09:36.845 --> 00:09:40.445
<v Speaker 1>to make what's called wide and shallow queries

00:09:40.445 --> 00:09:42.605
<v Speaker 1>as well as narrow and deep queries. So

00:09:42.605 --> 00:09:44.700
<v Speaker 1>wide and shallow queries, can think about, you

00:09:44.700 --> 00:09:46.860
<v Speaker 1>know, you wanna understand what is the state

00:09:46.860 --> 00:09:49.100
<v Speaker 1>of all my devices in the past five

00:09:49.100 --> 00:09:51.580
<v Speaker 1>minutes. So here, you just wanna look at

00:09:51.580 --> 00:09:52.220
<v Speaker 1>this

00:09:52.540 --> 00:09:53.420
<v Speaker 1>latest

00:09:53.660 --> 00:09:55.500
<v Speaker 1>time period and you can see like, okay,

00:09:55.500 --> 00:09:58.585
<v Speaker 1>it's these three chunks right here. But if

00:09:58.585 --> 00:10:00.425
<v Speaker 1>you wanted to do what's called a deep

00:10:00.425 --> 00:10:02.185
<v Speaker 1>and narrow query, which is like, you know,

00:10:02.185 --> 00:10:03.625
<v Speaker 1>for a sudden location,

00:10:03.705 --> 00:10:06.025
<v Speaker 1>show me the history going back one year

00:10:06.025 --> 00:10:08.665
<v Speaker 1>or two years, that's just for example, if

00:10:08.665 --> 00:10:10.025
<v Speaker 1>I'm just looking at the blue

00:10:10.290 --> 00:10:11.170
<v Speaker 1>location,

00:10:11.410 --> 00:10:13.089
<v Speaker 1>then that's gonna be this middle row right

00:10:13.089 --> 00:10:14.769
<v Speaker 1>here. So you can see you can that's

00:10:14.769 --> 00:10:16.610
<v Speaker 1>kind of to give you an intuition about

00:10:16.610 --> 00:10:18.930
<v Speaker 1>why you get this kind of performance gains

00:10:18.930 --> 00:10:20.850
<v Speaker 1>when you do use TimescaleDB.

00:10:21.250 --> 00:10:23.170
<v Speaker 1>Then I have some slides here about, like,

00:10:23.265 --> 00:10:25.905
<v Speaker 1>developer productivity. It's basically the showing the fact

00:10:25.905 --> 00:10:27.665
<v Speaker 1>that, you know, a lot of people are

00:10:28.145 --> 00:10:30.065
<v Speaker 1>can be confused that, you know, time series

00:10:30.305 --> 00:10:32.225
<v Speaker 1>timescale is built upon Postgres.

00:10:32.385 --> 00:10:34.785
<v Speaker 1>So what does that mean? It basically means

00:10:34.785 --> 00:10:37.025
<v Speaker 1>that, you know, for all your relational queries,

00:10:37.700 --> 00:10:40.260
<v Speaker 1>it uses the Postgres query planner. And then

00:10:40.260 --> 00:10:43.060
<v Speaker 1>for time series queries and stuff that use

00:10:43.060 --> 00:10:45.060
<v Speaker 1>TimescaleDB special functions,

00:10:45.300 --> 00:10:48.020
<v Speaker 1>we have modified the query plan in such

00:10:48.020 --> 00:10:50.820
<v Speaker 1>a way that it then uses TimescaleDB for

00:10:50.820 --> 00:10:53.245
<v Speaker 1>those things. So all the reliability

00:10:53.245 --> 00:10:54.365
<v Speaker 1>and all the

00:10:55.005 --> 00:10:57.165
<v Speaker 1>kind of backup and tooling that you associate

00:10:57.165 --> 00:10:59.885
<v Speaker 1>with Postgres, all that stuff still works. The

00:10:59.885 --> 00:11:01.405
<v Speaker 1>only thing that we modified

00:11:02.605 --> 00:11:05.485
<v Speaker 1>is how you deal with time series related

00:11:05.565 --> 00:11:06.845
<v Speaker 1>queries and and functions.

00:11:08.130 --> 00:11:09.810
<v Speaker 1>And And as a result of being built

00:11:09.810 --> 00:11:11.730
<v Speaker 1>on Postgres, it basically means that everything that

00:11:11.730 --> 00:11:13.889
<v Speaker 1>you're used to in the Postgres ecosystem,

00:11:13.889 --> 00:11:17.089
<v Speaker 1>whether it's visualization or ingestion tools and stuff

00:11:17.089 --> 00:11:19.170
<v Speaker 1>like that, that all that still works. You

00:11:19.170 --> 00:11:21.410
<v Speaker 1>know, whatever works with Postgres works with Timescale.

00:11:21.885 --> 00:11:23.325
<v Speaker 1>And so all these things, I'm gonna do

00:11:23.325 --> 00:11:25.485
<v Speaker 1>a demo later on using Grafana

00:11:25.485 --> 00:11:26.525
<v Speaker 1>as an example

00:11:27.085 --> 00:11:29.325
<v Speaker 1>of a visualization tool. But, you know, all

00:11:29.325 --> 00:11:31.085
<v Speaker 1>the things that you're used to ingesting and

00:11:31.085 --> 00:11:34.205
<v Speaker 1>visualizing data with, those all work with TimescaleDB.

00:11:34.790 --> 00:11:36.310
<v Speaker 1>And this is just a last thing to

00:11:36.310 --> 00:11:38.230
<v Speaker 1>give you an idea of the amount of

00:11:38.230 --> 00:11:40.230
<v Speaker 1>people who are using it today. You know,

00:11:40.230 --> 00:11:42.550
<v Speaker 1>sometimes it's when you have a new software

00:11:43.029 --> 00:11:44.870
<v Speaker 1>that you're evaluating, it's good to get a

00:11:44.870 --> 00:11:46.310
<v Speaker 1>sense of, like, where else is it used

00:11:46.310 --> 00:11:48.310
<v Speaker 1>in production. So we have over a million

00:11:48.310 --> 00:11:51.565
<v Speaker 1>active databases right now and used at places

00:11:51.565 --> 00:11:53.325
<v Speaker 1>like AppDynamics,

00:11:53.325 --> 00:11:53.965
<v Speaker 1>Cisco,

00:11:54.205 --> 00:11:55.165
<v Speaker 1>Samsung,

00:11:55.965 --> 00:11:58.685
<v Speaker 1>IBM, all those all those places. So but

00:11:58.685 --> 00:12:00.445
<v Speaker 1>that's just just an overview for you to

00:12:00.445 --> 00:12:02.285
<v Speaker 1>get a taste of Timescale. I know we're

00:12:02.285 --> 00:12:04.205
<v Speaker 1>gonna get stuck in in just a moment

00:12:04.205 --> 00:12:06.280
<v Speaker 1>into the actual code of it.

00:12:07.480 --> 00:12:08.840
<v Speaker 0>Nice. Awesome.

00:12:09.800 --> 00:12:11.560
<v Speaker 0>I think I would just I I think

00:12:11.560 --> 00:12:13.560
<v Speaker 0>I've got two points now. Right? Got it.

00:12:13.560 --> 00:12:14.360
<v Speaker 0>One one

00:12:14.920 --> 00:12:15.560
<v Speaker 0>is,

00:12:15.800 --> 00:12:17.160
<v Speaker 0>you know, I love it when I see

00:12:17.160 --> 00:12:19.015
<v Speaker 0>examples of, you know, this is the the

00:12:19.015 --> 00:12:20.774
<v Speaker 0>type of time series, you know. And that's

00:12:20.774 --> 00:12:22.375
<v Speaker 0>great because we show people something that is

00:12:22.375 --> 00:12:25.095
<v Speaker 0>applicable within their context, whether they're from financial

00:12:25.095 --> 00:12:28.055
<v Speaker 0>background or software engineering or, you know, SRE,

00:12:28.055 --> 00:12:30.455
<v Speaker 0>etcetera. Yeah. But what I always love is

00:12:30.455 --> 00:12:32.260
<v Speaker 0>just that there's not a single second of

00:12:32.260 --> 00:12:34.180
<v Speaker 0>this any given day that anybody on this

00:12:34.180 --> 00:12:37.060
<v Speaker 0>planet isn't surrounded by time series data. Literally,

00:12:37.540 --> 00:12:39.060
<v Speaker 0>everything in Everything. Humidity,

00:12:39.380 --> 00:12:41.620
<v Speaker 0>temperature, rainfall, precipitation.

00:12:42.020 --> 00:12:43.780
<v Speaker 0>All of this stuff could be tracked and

00:12:43.780 --> 00:12:46.015
<v Speaker 0>monitored in time series database. Even, you know,

00:12:46.015 --> 00:12:47.295
<v Speaker 0>exchange rates when you buy a cup of

00:12:47.295 --> 00:12:49.135
<v Speaker 0>coffee. So I I love Timescale data. And

00:12:49.135 --> 00:12:50.895
<v Speaker 0>I'm really really looking forward to playing with

00:12:50.895 --> 00:12:51.615
<v Speaker 0>us today.

00:12:52.095 --> 00:12:53.935
<v Speaker 0>And also, a second thing I wanted to

00:12:53.935 --> 00:12:55.135
<v Speaker 0>mention is that, you know, I do have

00:12:55.135 --> 00:12:57.135
<v Speaker 0>a lot of experience in Timescale,

00:12:57.215 --> 00:12:59.535
<v Speaker 0>you know, formally working in the Prometheus community

00:12:59.535 --> 00:13:00.735
<v Speaker 0>and then moving to influx.

00:13:01.400 --> 00:13:04.120
<v Speaker 0>And one of the biggest points of frustration

00:13:04.120 --> 00:13:06.840
<v Speaker 0>or questions I always would always get is

00:13:07.000 --> 00:13:09.720
<v Speaker 0>why can't I just use query languages I'm

00:13:09.720 --> 00:13:10.520
<v Speaker 0>familiar with?

00:13:11.240 --> 00:13:12.680
<v Speaker 0>And this is one of the biggest selling

00:13:12.680 --> 00:13:14.595
<v Speaker 0>points I feel for for Timescale is that

00:13:14.595 --> 00:13:16.355
<v Speaker 0>it's built on a backbone of an open

00:13:16.355 --> 00:13:18.275
<v Speaker 0>source database that many,

00:13:18.275 --> 00:13:20.835
<v Speaker 0>many people are familiar with using query languages

00:13:20.835 --> 00:13:22.835
<v Speaker 0>and tools that many, many people are familiar

00:13:22.835 --> 00:13:25.235
<v Speaker 0>with. So I'm very excited, and I think

00:13:25.235 --> 00:13:27.075
<v Speaker 0>we should just start playing with Timescale.

00:13:27.790 --> 00:13:30.350
<v Speaker 1>Let's let's get stuck in. Yeah. That sounds

00:13:30.350 --> 00:13:32.110
<v Speaker 1>good to me. Alright.

00:13:32.510 --> 00:13:35.470
<v Speaker 0>So let's see. Let's get my machine's screen

00:13:35.470 --> 00:13:36.590
<v Speaker 0>shared.

00:13:37.390 --> 00:13:39.070
<v Speaker 0>Alright.

00:13:39.070 --> 00:13:42.030
<v Speaker 0>So here I have the Timescale

00:13:42.030 --> 00:13:42.830
<v Speaker 0>website.

00:13:43.945 --> 00:13:45.625
<v Speaker 0>Typically, what we'll do is we'll just click

00:13:45.625 --> 00:13:47.625
<v Speaker 0>on the docs. We'll find some sort of

00:13:47.625 --> 00:13:49.625
<v Speaker 0>getting started guide. There's always a getting started

00:13:49.625 --> 00:13:50.345
<v Speaker 0>guide

00:13:50.825 --> 00:13:53.545
<v Speaker 0>and try and just cut through some of

00:13:53.545 --> 00:13:54.985
<v Speaker 0>the basics that people need

00:13:55.940 --> 00:13:58.660
<v Speaker 0>to make and start their own Timescale journey.

00:13:58.660 --> 00:13:59.220
<v Speaker 0>So

00:14:00.420 --> 00:14:02.020
<v Speaker 0>I think the first thing we really need

00:14:02.020 --> 00:14:04.820
<v Speaker 0>to do is to install Timescale. Now

00:14:04.980 --> 00:14:07.300
<v Speaker 0>what's your recommendation here? Do we go with

00:14:07.300 --> 00:14:09.860
<v Speaker 0>a docker, a container image? Has there brew

00:14:09.860 --> 00:14:10.420
<v Speaker 0>packages?

00:14:10.775 --> 00:14:11.975
<v Speaker 0>What what would you do?

00:14:12.615 --> 00:14:14.295
<v Speaker 1>Yeah. So there's a couple ways to get

00:14:14.295 --> 00:14:16.455
<v Speaker 1>started. I think depending on on what you're

00:14:16.455 --> 00:14:18.535
<v Speaker 1>most familiar with, Docker

00:14:18.855 --> 00:14:20.455
<v Speaker 1>is is usually good.

00:14:21.255 --> 00:14:24.375
<v Speaker 1>The one that we recommend to people, obviously,

00:14:24.375 --> 00:14:27.389
<v Speaker 1>because it's the easiest to get started is

00:14:27.389 --> 00:14:28.990
<v Speaker 1>using Timescale

00:14:28.990 --> 00:14:31.310
<v Speaker 1>Cloud or Timescale Forge which is a hosted

00:14:31.630 --> 00:14:32.350
<v Speaker 1>option.

00:14:33.310 --> 00:14:35.230
<v Speaker 1>You know, there is a a free trial

00:14:35.230 --> 00:14:37.630
<v Speaker 1>that you get $300 in credits. So, you

00:14:37.630 --> 00:14:38.910
<v Speaker 1>know, if you just wanna check it out

00:14:38.910 --> 00:14:40.029
<v Speaker 1>or if you're just using it for a

00:14:40.029 --> 00:14:40.750
<v Speaker 1>small project

00:14:41.385 --> 00:14:43.225
<v Speaker 1>and don't wanna actually pay

00:14:43.865 --> 00:14:45.945
<v Speaker 1>to to upkeep it, you know, if you're

00:14:45.945 --> 00:14:47.705
<v Speaker 1>if you're not running in production or or

00:14:47.705 --> 00:14:49.705
<v Speaker 1>seriously or if you're just kicking the tires,

00:14:49.705 --> 00:14:51.705
<v Speaker 1>then that's that's also another option as well.

00:14:52.345 --> 00:14:54.290
<v Speaker 0>Well, I do love to I do love

00:14:54.290 --> 00:14:56.050
<v Speaker 0>showing off cloud products when they're available. Do

00:14:56.050 --> 00:14:57.649
<v Speaker 0>I need to enter a credit card detail

00:14:57.649 --> 00:15:00.209
<v Speaker 0>or will it No. So yeah. Actually, I'd

00:15:00.209 --> 00:15:03.570
<v Speaker 1>recommend choosing the Timescale Forge. So let me

00:15:03.570 --> 00:15:05.170
<v Speaker 1>actually explain a little bit about why there's

00:15:05.170 --> 00:15:05.889
<v Speaker 1>two options there.

00:15:07.095 --> 00:15:09.095
<v Speaker 1>It's funny because when people

00:15:09.334 --> 00:15:10.214
<v Speaker 1>usually

00:15:12.214 --> 00:15:13.975
<v Speaker 1>kind of sign up for Timescale,

00:15:14.695 --> 00:15:16.375
<v Speaker 1>it's just through the the front page of

00:15:16.375 --> 00:15:18.615
<v Speaker 1>the website and and the docs kinda need

00:15:18.615 --> 00:15:20.375
<v Speaker 1>to get updated a little bit. That's showing

00:15:20.375 --> 00:15:22.200
<v Speaker 1>that, you know, we're a bit behind on

00:15:22.200 --> 00:15:25.160
<v Speaker 1>on updating ourselves. But basically, difference between Timescale

00:15:25.160 --> 00:15:28.040
<v Speaker 1>Cloud and Timescale Forge is that Forge is

00:15:28.040 --> 00:15:29.480
<v Speaker 1>a newer product that

00:15:29.800 --> 00:15:32.440
<v Speaker 1>we're building that is gonna have much more

00:15:32.440 --> 00:15:35.480
<v Speaker 1>deep integration with things like you mentioned Prometheus

00:15:35.640 --> 00:15:36.360
<v Speaker 1>before

00:15:36.625 --> 00:15:40.145
<v Speaker 1>as well as just a more rich experience

00:15:40.145 --> 00:15:41.665
<v Speaker 1>for users. It's a it's a bit of

00:15:41.665 --> 00:15:44.785
<v Speaker 1>a younger product. Whereas Timescale Cloud is

00:15:45.025 --> 00:15:47.345
<v Speaker 1>a product that's been around for almost two

00:15:47.345 --> 00:15:49.265
<v Speaker 1>years now and that just has more regions

00:15:49.265 --> 00:15:49.745
<v Speaker 1>and

00:15:50.420 --> 00:15:54.260
<v Speaker 1>more configurations for folks who want more flexibility,

00:15:54.260 --> 00:15:56.740
<v Speaker 1>whereas forge is just, you know, instances based

00:15:56.740 --> 00:15:57.620
<v Speaker 1>in The US.

00:15:57.860 --> 00:16:01.060
<v Speaker 1>So that's the that's the the difference there.

00:16:01.540 --> 00:16:03.300
<v Speaker 0>Alright. So let's try

00:16:03.700 --> 00:16:04.260
<v Speaker 0>forge.

00:16:18.130 --> 00:16:19.410
<v Speaker 0>Where else is it?

00:16:22.290 --> 00:16:23.890
<v Speaker 0>Oh, well, we'll go with it.

00:16:25.810 --> 00:16:27.330
<v Speaker 0>And I'm not these

00:16:27.649 --> 00:16:28.050
<v Speaker 0>things.

00:16:35.395 --> 00:16:36.115
<v Speaker 0>K.

00:16:36.515 --> 00:16:38.595
<v Speaker 0>Let me just pop that open over here.

00:16:39.395 --> 00:16:40.275
<v Speaker 0>Copy link.

00:16:46.019 --> 00:16:46.820
<v Speaker 0>Oh,

00:16:47.459 --> 00:16:49.380
<v Speaker 0>so I have Timescale now. Right?

00:16:56.580 --> 00:16:58.180
<v Speaker 0>Okay.

00:17:00.525 --> 00:17:02.365
<v Speaker 1>So the page that you're seeing now is

00:17:02.365 --> 00:17:04.525
<v Speaker 1>just the the direct page to create a

00:17:04.525 --> 00:17:05.244
<v Speaker 1>database.

00:17:05.645 --> 00:17:06.204
<v Speaker 1>So

00:17:06.925 --> 00:17:09.325
<v Speaker 1>you can just go ahead and and enter

00:17:09.325 --> 00:17:11.724
<v Speaker 1>a name and select a configuration from there.

00:17:12.700 --> 00:17:14.300
<v Speaker 0>Alright. So we can just say this is

00:17:14.300 --> 00:17:15.579
<v Speaker 0>Rawkode Live.

00:17:16.460 --> 00:17:17.900
<v Speaker 0>I mean, I'm assuming for what we're gonna

00:17:17.900 --> 00:17:19.740
<v Speaker 0>be playing with today is the smallest instances.

00:17:19.740 --> 00:17:21.020
<v Speaker 0>It's probably okay. Yeah. Yeah.

00:17:21.740 --> 00:17:22.859
<v Speaker 1>That should be fine.

00:17:23.100 --> 00:17:24.220
<v Speaker 0>25

00:17:24.220 --> 00:17:26.380
<v Speaker 0>gig of data. I'm sure that will be

00:17:26.380 --> 00:17:26.700
<v Speaker 0>cool.

00:17:30.575 --> 00:17:33.215
<v Speaker 0>Sure. I'll save that over there.

00:17:34.975 --> 00:17:37.534
<v Speaker 0>That's me now showing the world two passwords,

00:17:37.535 --> 00:17:38.015
<v Speaker 0>but

00:17:38.975 --> 00:17:40.895
<v Speaker 0>I will remove this current and change the

00:17:40.895 --> 00:17:42.415
<v Speaker 0>password afterwards. Yeah.

00:17:43.990 --> 00:17:45.110
<v Speaker 0>Alright. So

00:17:45.430 --> 00:17:48.149
<v Speaker 0>what we get now is just our pretty

00:17:48.630 --> 00:17:51.990
<v Speaker 0>standard postgres connection line. Does does that just

00:17:51.990 --> 00:17:53.750
<v Speaker 0>to clarify. Right? Does that mean I can

00:17:53.750 --> 00:17:54.309
<v Speaker 0>use

00:17:54.630 --> 00:17:56.870
<v Speaker 0>any postgres compatible

00:17:56.870 --> 00:17:57.990
<v Speaker 0>GUI locally?

00:17:58.785 --> 00:18:01.745
<v Speaker 1>Yeah. So I actually use p g admin.

00:18:02.545 --> 00:18:03.985
<v Speaker 1>Later on, I'll show you my p g

00:18:03.985 --> 00:18:05.585
<v Speaker 1>admin screen. But, yeah, you could use whatever

00:18:05.585 --> 00:18:08.625
<v Speaker 1>you want that connects with Postgres to interact

00:18:08.625 --> 00:18:09.585
<v Speaker 1>with Timescale,

00:18:09.745 --> 00:18:11.985
<v Speaker 1>whether it's good old p s equal, which

00:18:11.985 --> 00:18:13.825
<v Speaker 1>is the the terminal based

00:18:14.800 --> 00:18:16.000
<v Speaker 1>UI for

00:18:16.160 --> 00:18:16.960
<v Speaker 1>Postgres

00:18:17.120 --> 00:18:19.919
<v Speaker 1>or stuff like p g admin, d beaver,

00:18:20.240 --> 00:18:22.320
<v Speaker 1>you know, whatever whatever takes your fancy. So,

00:18:22.320 --> 00:18:24.240
<v Speaker 1>you know, you get to choose what tools

00:18:24.240 --> 00:18:26.320
<v Speaker 1>you wanna use, and it's gonna be compatible.

00:18:27.335 --> 00:18:28.215
<v Speaker 0>Excellent.

00:18:28.295 --> 00:18:31.255
<v Speaker 0>Definitely a major one. Now what about this

00:18:31.255 --> 00:18:34.215
<v Speaker 0>multi node connection info? Is Timescale

00:18:35.255 --> 00:18:36.055
<v Speaker 0>horizontally

00:18:36.055 --> 00:18:36.774
<v Speaker 0>scalable?

00:18:37.335 --> 00:18:38.935
<v Speaker 1>Yeah. So in the in the most recent

00:18:38.935 --> 00:18:39.575
<v Speaker 1>release

00:18:39.900 --> 00:18:41.340
<v Speaker 1>of Timescale

00:18:41.340 --> 00:18:44.299
<v Speaker 1>Timescale two point o, we've introduced

00:18:44.700 --> 00:18:47.740
<v Speaker 1>horizontal scalability or multi node capabilities.

00:18:47.740 --> 00:18:50.620
<v Speaker 1>You know, one of the original criticisms of

00:18:50.620 --> 00:18:52.755
<v Speaker 1>Timescale when it first released was that, you

00:18:52.755 --> 00:18:54.915
<v Speaker 1>know, it really scales well on one node.

00:18:54.915 --> 00:18:56.995
<v Speaker 1>But what happens when you wanna get into

00:18:57.635 --> 00:18:59.955
<v Speaker 1>really large scale production deployments

00:19:00.115 --> 00:19:02.355
<v Speaker 1>where you have, you know, these

00:19:02.515 --> 00:19:04.515
<v Speaker 1>20 node clusters dealing with,

00:19:05.350 --> 00:19:08.230
<v Speaker 1>you know, billions of data points every every

00:19:08.230 --> 00:19:09.269
<v Speaker 1>minute or so.

00:19:09.590 --> 00:19:12.309
<v Speaker 1>And so that's that's what we've just actually

00:19:12.309 --> 00:19:13.990
<v Speaker 1>introduced that. So that's a new feature on

00:19:13.990 --> 00:19:15.190
<v Speaker 1>Timescale Forge.

00:19:15.510 --> 00:19:16.070
<v Speaker 1>And,

00:19:16.789 --> 00:19:19.315
<v Speaker 1>yeah, if you need that, I think there's

00:19:19.315 --> 00:19:21.315
<v Speaker 1>one or two tutorials on YouTube that takes

00:19:21.315 --> 00:19:22.995
<v Speaker 1>you through exactly, you know, like, how the

00:19:22.995 --> 00:19:25.875
<v Speaker 1>multi node connection info is different from the

00:19:25.875 --> 00:19:27.395
<v Speaker 1>general connection info.

00:19:28.195 --> 00:19:30.115
<v Speaker 1>But for the sake of simplicity and not

00:19:30.115 --> 00:19:32.740
<v Speaker 1>confusing folks at home, I'll point you to

00:19:32.740 --> 00:19:34.980
<v Speaker 1>that to to learn more. But That's just

00:19:34.980 --> 00:19:37.140
<v Speaker 1>the information that you'll need to get the

00:19:37.140 --> 00:19:38.980
<v Speaker 1>multi node set up up and running.

00:19:40.260 --> 00:19:41.460
<v Speaker 0>Okay. Awesome.

00:19:42.500 --> 00:19:43.940
<v Speaker 0>So

00:19:43.455 --> 00:19:45.054
<v Speaker 0>I guess we should go back to we've

00:19:45.054 --> 00:19:46.495
<v Speaker 0>we've got our instance. We had that little

00:19:46.495 --> 00:19:48.174
<v Speaker 0>pop up that says it's running. So now

00:19:48.174 --> 00:19:50.174
<v Speaker 0>we can go back to again, Startup Guide

00:19:50.335 --> 00:19:50.575
<v Speaker 0>and

00:19:51.774 --> 00:19:52.894
<v Speaker 1>I'd recommend

00:19:53.375 --> 00:19:55.695
<v Speaker 1>the one that might be good to do

00:19:55.695 --> 00:19:59.360
<v Speaker 1>is under tutorials. It's getting started hello timescale

00:19:59.360 --> 00:19:59.919
<v Speaker 1>because

00:20:01.760 --> 00:20:04.399
<v Speaker 1>this current getting started guide

00:20:05.520 --> 00:20:07.760
<v Speaker 1>kinda explains the stuff that I've been telling

00:20:07.760 --> 00:20:09.600
<v Speaker 1>you that I explained in the slides already

00:20:09.600 --> 00:20:11.520
<v Speaker 1>where it's kinda like the abstraction of hyper

00:20:11.520 --> 00:20:13.925
<v Speaker 1>tables and what is TimescaleDB,

00:20:13.925 --> 00:20:16.325
<v Speaker 1>whereas this one is actually a really nice

00:20:16.325 --> 00:20:18.085
<v Speaker 1>tutorial. I worked on this myself

00:20:18.725 --> 00:20:21.605
<v Speaker 1>about using a real world dataset and analyzing

00:20:21.605 --> 00:20:23.445
<v Speaker 1>it using TimescaleDB.

00:20:23.445 --> 00:20:26.085
<v Speaker 1>In this case, it's about taxis in New

00:20:26.085 --> 00:20:26.805
<v Speaker 1>York City and

00:20:27.840 --> 00:20:29.039
<v Speaker 1>analyzing their

00:20:29.680 --> 00:20:32.000
<v Speaker 1>ride behavior and and stuff like that. So

00:20:32.000 --> 00:20:33.200
<v Speaker 1>it's actually quite fun.

00:20:35.040 --> 00:20:38.160
<v Speaker 0>Okay. Let's do the NYC data then. So

00:20:38.160 --> 00:20:39.760
<v Speaker 0>do I have to download this file?

00:20:40.000 --> 00:20:41.520
<v Speaker 1>Yeah. So the first step is just to

00:20:41.520 --> 00:20:42.320
<v Speaker 1>download the dataset.

00:20:43.915 --> 00:20:44.875
<v Speaker 0>Alright.

00:20:45.355 --> 00:20:47.195
<v Speaker 0>Sure. That won't take too long.

00:20:49.995 --> 00:20:52.075
<v Speaker 0>Yeah. Ten seconds. Okay. Cool.

00:20:52.555 --> 00:20:54.155
<v Speaker 0>So let's see.

00:20:55.035 --> 00:20:55.995
<v Speaker 0>Prerequisites,

00:20:55.995 --> 00:20:56.715
<v Speaker 0>this tutorial.

00:20:57.260 --> 00:20:58.220
<v Speaker 0>Yeah.

00:20:58.220 --> 00:21:01.180
<v Speaker 0>Okay. I probably know enough SQL to be

00:21:01.180 --> 00:21:02.860
<v Speaker 0>dangerous, and I'm sure you'll keep me right

00:21:02.860 --> 00:21:05.180
<v Speaker 0>as we go. So Yeah. Yeah. It the

00:21:05.180 --> 00:21:07.340
<v Speaker 1>SQL is actually spelled out quite

00:21:08.780 --> 00:21:11.184
<v Speaker 1>what is it? In in detail in the

00:21:11.184 --> 00:21:13.025
<v Speaker 1>tutorial. So even if you're a beginner, you'll

00:21:13.025 --> 00:21:15.265
<v Speaker 1>still be able to understand, you know, what's

00:21:15.265 --> 00:21:16.065
<v Speaker 1>going on.

00:21:17.985 --> 00:21:19.104
<v Speaker 0>Okay. So

00:21:19.985 --> 00:21:22.065
<v Speaker 0>how does this want me to interact with

00:21:22.065 --> 00:21:23.985
<v Speaker 0>the cluster? Do I need to install a

00:21:23.985 --> 00:21:24.865
<v Speaker 0>post course client?

00:21:26.020 --> 00:21:26.900
<v Speaker 1>So

00:21:26.900 --> 00:21:28.899
<v Speaker 1>what you can do is

00:21:29.540 --> 00:21:30.580
<v Speaker 1>you can use

00:21:30.820 --> 00:21:33.059
<v Speaker 1>p SQL, which I think is installed

00:21:33.300 --> 00:21:35.940
<v Speaker 1>by default on a on a Mac. But,

00:21:35.940 --> 00:21:37.700
<v Speaker 1>yeah, basically, you'll need some sort of post

00:21:37.700 --> 00:21:39.794
<v Speaker 1>course client in order to complete this. So

00:21:39.794 --> 00:21:41.794
<v Speaker 1>whatever you'd you'd like.

00:21:42.195 --> 00:21:42.835
<v Speaker 0>Right.

00:21:43.075 --> 00:21:45.155
<v Speaker 0>Computers are no on that one. So Oh,

00:21:45.155 --> 00:21:48.515
<v Speaker 1>no. Okay. Let's

00:21:48.515 --> 00:21:50.674
<v Speaker 0>just pull up the brew page.

00:21:52.195 --> 00:21:53.875
<v Speaker 0>See if it's got a client on its

00:21:53.875 --> 00:21:54.115
<v Speaker 0>own.

00:21:59.520 --> 00:22:00.799
<v Speaker 0>Oh, it should install.

00:22:02.400 --> 00:22:04.799
<v Speaker 1>Postgres. Yeah. So it should come with that.

00:22:04.799 --> 00:22:06.080
<v Speaker 1>Maybe just update.

00:22:06.880 --> 00:22:08.400
<v Speaker 0>And what was the name of the GUI

00:22:08.400 --> 00:22:11.024
<v Speaker 0>you also recommended there? Another one that I

00:22:11.024 --> 00:22:13.264
<v Speaker 1>like is called PG admin.

00:22:13.585 --> 00:22:15.344
<v Speaker 1>It's kind of the more old school

00:22:16.385 --> 00:22:17.745
<v Speaker 1>database administrators

00:22:17.745 --> 00:22:18.384
<v Speaker 1>one.

00:22:19.184 --> 00:22:20.865
<v Speaker 1>I'm not sure if there's a proof for

00:22:20.865 --> 00:22:21.664
<v Speaker 1>that, but

00:22:22.380 --> 00:22:25.020
<v Speaker 0>Yep. P g admin four and also install

00:22:25.020 --> 00:22:25.980
<v Speaker 0>Postgres.

00:22:26.540 --> 00:22:27.900
<v Speaker 0>And I think that gives us a better

00:22:29.020 --> 00:22:30.460
<v Speaker 0>that gives us a few options with how

00:22:30.460 --> 00:22:31.820
<v Speaker 0>we wanna work with it. So I'm gonna

00:22:31.980 --> 00:22:33.740
<v Speaker 0>Exactly. See both. Yeah. So,

00:22:34.780 --> 00:22:36.380
<v Speaker 0>hopefully, this is pretty

00:22:37.100 --> 00:22:37.500
<v Speaker 0>quick.

00:22:39.665 --> 00:22:41.585
<v Speaker 0>Is p g admin the web one or

00:22:41.585 --> 00:22:42.705
<v Speaker 0>is that an actual

00:22:43.425 --> 00:22:44.385
<v Speaker 0>Mac app?

00:22:44.545 --> 00:22:46.865
<v Speaker 1>So it's a it's a browser based one,

00:22:46.865 --> 00:22:47.664
<v Speaker 1>kinda like,

00:22:48.945 --> 00:22:50.945
<v Speaker 1>you know, if you've you've you've used Grafana

00:22:50.945 --> 00:22:52.950
<v Speaker 1>and stuff before, it just opens up a

00:22:52.950 --> 00:22:53.590
<v Speaker 1>web browser

00:22:54.630 --> 00:22:56.470
<v Speaker 1>or web page in your browser, and that's

00:22:56.470 --> 00:22:58.070
<v Speaker 1>how you interact with it. Yeah. I can

00:22:58.149 --> 00:23:00.390
<v Speaker 0>I always remember p g you know, PHP

00:23:00.390 --> 00:23:02.789
<v Speaker 0>my admin from back in my PHP days?

00:23:02.789 --> 00:23:06.230
<v Speaker 0>That was Yeah. Yeah. Yeah. Back I've developed

00:23:06.605 --> 00:23:10.285
<v Speaker 1>a couple of websites using that very rudimentary

00:23:10.285 --> 00:23:11.725
<v Speaker 1>stuff when I was still learning, like, web

00:23:11.725 --> 00:23:13.005
<v Speaker 1>development a few

00:23:13.405 --> 00:23:15.965
<v Speaker 1>maybe six years ago or so. Yeah.

00:23:17.165 --> 00:23:19.805
<v Speaker 0>Alright. So I'm sure this will be very

00:23:19.805 --> 00:23:21.500
<v Speaker 0>quick. So why don't we pop over here

00:23:21.500 --> 00:23:23.100
<v Speaker 0>just now? Yeah. So the first thing I

00:23:23.100 --> 00:23:24.539
<v Speaker 0>want us to do is just Go ahead.

00:23:25.260 --> 00:23:27.179
<v Speaker 0>Oh, yeah. Feel free to interrupt me. Was

00:23:27.179 --> 00:23:29.179
<v Speaker 1>just about to say there's one for

00:23:29.340 --> 00:23:31.260
<v Speaker 1>folks who are seeing this and, you know,

00:23:31.260 --> 00:23:32.620
<v Speaker 1>who who have no idea about how to

00:23:32.620 --> 00:23:33.740
<v Speaker 1>use P SQL,

00:23:34.115 --> 00:23:35.875
<v Speaker 1>which is one of the things that you

00:23:36.115 --> 00:23:39.075
<v Speaker 1>might use later on. There's actually a tutorial

00:23:39.075 --> 00:23:40.835
<v Speaker 1>in the docs about how to install and

00:23:40.835 --> 00:23:43.475
<v Speaker 1>use P SQL. So that's, know, if you're

00:23:43.475 --> 00:23:45.235
<v Speaker 1>a total beginner or just

00:23:45.555 --> 00:23:47.875
<v Speaker 1>wanna wanna refresh the basics, that's there as

00:23:47.875 --> 00:23:48.035
<v Speaker 1>well.

00:23:48.890 --> 00:23:50.169
<v Speaker 1>I think if you just search p SQL

00:23:50.169 --> 00:23:52.009
<v Speaker 1>on the docs, you should should find it.

00:23:52.409 --> 00:23:53.929
<v Speaker 1>But that's there to reference.

00:23:55.370 --> 00:23:56.649
<v Speaker 0>Here we go. Yeah.

00:24:01.165 --> 00:24:01.885
<v Speaker 0>Hey.

00:24:02.285 --> 00:24:03.725
<v Speaker 0>So this looks like we've still got a

00:24:03.725 --> 00:24:06.525
<v Speaker 0>minute to go. So you say PCQL,

00:24:06.525 --> 00:24:07.804
<v Speaker 0>I say SQL.

00:24:07.965 --> 00:24:09.485
<v Speaker 0>I guess people will be wondering what the

00:24:09.485 --> 00:24:10.605
<v Speaker 0>difference there is.

00:24:10.925 --> 00:24:12.525
<v Speaker 0>And that's the I think the short answer

00:24:12.525 --> 00:24:14.845
<v Speaker 0>is this technology. We all pronounce things differently,

00:24:14.845 --> 00:24:15.405
<v Speaker 0>and that's okay.

00:24:16.160 --> 00:24:16.960
<v Speaker 1>Exactly.

00:24:17.679 --> 00:24:20.239
<v Speaker 0>Not one for these dogmatic wars and correct

00:24:20.400 --> 00:24:21.280
<v Speaker 0>pronunciation

00:24:21.280 --> 00:24:22.639
<v Speaker 0>of technical terms.

00:24:22.720 --> 00:24:23.840
<v Speaker 0>I think it's silly.

00:24:25.440 --> 00:24:27.840
<v Speaker 0>Okay. So we're gonna create a database

00:24:28.799 --> 00:24:30.160
<v Speaker 0>called NYC data.

00:24:30.995 --> 00:24:33.395
<v Speaker 0>And so this is how we interact with

00:24:33.395 --> 00:24:34.515
<v Speaker 0>Timescale.

00:24:34.995 --> 00:24:36.835
<v Speaker 0>We have to enable

00:24:36.835 --> 00:24:37.955
<v Speaker 0>an extension.

00:24:38.595 --> 00:24:40.595
<v Speaker 1>Yeah. So because you're using

00:24:40.915 --> 00:24:44.115
<v Speaker 1>Timescale's like hosted instance, that's actually been already

00:24:44.115 --> 00:24:46.035
<v Speaker 1>done and it's been enabled by default.

00:24:46.530 --> 00:24:49.410
<v Speaker 1>But for folks who are using like Docker

00:24:49.410 --> 00:24:51.570
<v Speaker 1>or just installing on bare metal

00:24:52.290 --> 00:24:54.850
<v Speaker 1>on your on your computer,

00:24:54.930 --> 00:24:57.250
<v Speaker 1>you just have to enable that extension. That's

00:24:57.250 --> 00:24:58.530
<v Speaker 1>the create extension.

00:25:00.434 --> 00:25:02.034
<v Speaker 1>What is it? That

00:25:02.355 --> 00:25:03.234
<v Speaker 1>command,

00:25:03.554 --> 00:25:06.355
<v Speaker 1>and that'll that'll enable TimescaleDB

00:25:06.355 --> 00:25:08.674
<v Speaker 1>on on on your Postgres instance.

00:25:08.995 --> 00:25:10.914
<v Speaker 0>So that just just so I understand how

00:25:10.914 --> 00:25:13.510
<v Speaker 0>this works then. Like, if I don't enable

00:25:13.510 --> 00:25:15.910
<v Speaker 0>that extension, I'm I'm really just working with

00:25:15.910 --> 00:25:18.390
<v Speaker 0>the native Postgres and its query planner and

00:25:18.390 --> 00:25:20.230
<v Speaker 0>such. But on a database level, I can

00:25:20.230 --> 00:25:21.429
<v Speaker 0>enable that extension,

00:25:21.590 --> 00:25:24.070
<v Speaker 0>which brings in the custom query planner and

00:25:24.070 --> 00:25:26.655
<v Speaker 0>the custom storage layer. Is that right? Exactly.

00:25:26.655 --> 00:25:27.855
<v Speaker 1>% correct.

00:25:28.655 --> 00:25:30.255
<v Speaker 0>Cool. That'll be the only time you see

00:25:30.255 --> 00:25:32.175
<v Speaker 0>that today. Everything else, I'm gonna get completely

00:25:32.175 --> 00:25:33.135
<v Speaker 0>wrong. But

00:25:33.695 --> 00:25:36.975
<v Speaker 0>alright. We now have those things installed. So,

00:25:36.975 --> 00:25:39.055
<v Speaker 0>yep, we have PSQL

00:25:39.135 --> 00:25:41.775
<v Speaker 0>and let's see. The admin

00:25:42.760 --> 00:25:44.760
<v Speaker 0>is running on a port.

00:25:46.760 --> 00:25:48.279
<v Speaker 0>Who

00:25:49.480 --> 00:25:49.880
<v Speaker 0>knows?

00:25:53.895 --> 00:25:55.735
<v Speaker 1>It's been a while since I've installed all

00:25:55.735 --> 00:25:57.335
<v Speaker 1>of this. I forgot how much trouble it

00:25:57.335 --> 00:25:57.975
<v Speaker 1>can be.

00:25:58.375 --> 00:26:00.935
<v Speaker 0>Alright. I'm just gonna use this because I'm

00:26:01.095 --> 00:26:03.175
<v Speaker 0>I think I'll be able to pull enough

00:26:03.175 --> 00:26:04.615
<v Speaker 0>of this back out of my head to

00:26:04.615 --> 00:26:06.215
<v Speaker 0>make it work. So let's see if we

00:26:06.215 --> 00:26:09.175
<v Speaker 0>can connect. Right? So here is our line.

00:26:10.820 --> 00:26:12.660
<v Speaker 0>I'm sure it's the s h.

00:26:16.660 --> 00:26:18.580
<v Speaker 0>Well, this has got credentials on it too.

00:26:18.580 --> 00:26:20.900
<v Speaker 0>Right? Yeah. You what you will need to

00:26:20.900 --> 00:26:21.620
<v Speaker 1>do is

00:26:22.820 --> 00:26:24.660
<v Speaker 1>after the TSTP admin,

00:26:25.904 --> 00:26:28.464
<v Speaker 1>you will need to put in your password.

00:26:28.544 --> 00:26:30.625
<v Speaker 1>So it'll be a colon followed by your

00:26:30.625 --> 00:26:31.264
<v Speaker 1>password,

00:26:32.065 --> 00:26:34.225
<v Speaker 1>or you can I think if you do

00:26:34.225 --> 00:26:35.825
<v Speaker 1>this, then it might prompt you for your

00:26:35.825 --> 00:26:37.104
<v Speaker 1>password afterwards,

00:26:37.105 --> 00:26:38.384
<v Speaker 1>which you can enter it? So that might

00:26:38.384 --> 00:26:39.105
<v Speaker 1>be the safer way.

00:26:41.080 --> 00:26:41.640
<v Speaker 0>Yeah.

00:26:42.840 --> 00:26:43.960
<v Speaker 0>Okay. So

00:26:45.080 --> 00:26:47.480
<v Speaker 0>let's not make it up. Let's do that.

00:26:47.560 --> 00:26:48.920
<v Speaker 0>I won't make it up. We'll do that

00:26:48.920 --> 00:26:51.000
<v Speaker 0>myself. So h s host.

00:26:51.160 --> 00:26:52.600
<v Speaker 0>But we actually have more than a host.

00:26:52.600 --> 00:26:53.960
<v Speaker 0>We have a full

00:26:54.365 --> 00:26:55.085
<v Speaker 1>connection string.

00:26:55.725 --> 00:26:57.405
<v Speaker 1>Yeah. Yeah. So Let me just double check

00:26:57.405 --> 00:26:58.205
<v Speaker 1>how to

00:27:00.045 --> 00:27:01.565
<v Speaker 1>how to actually connect.

00:27:03.885 --> 00:27:05.405
<v Speaker 0>Alright. So I don't see end of an

00:27:05.405 --> 00:27:07.165
<v Speaker 0>obvious there. So I'm also gonna take a

00:27:07.165 --> 00:27:08.925
<v Speaker 0>look at p g admin four and see

00:27:08.925 --> 00:27:10.509
<v Speaker 0>what the port number is there.

00:27:11.950 --> 00:27:13.630
<v Speaker 0>That may just be running there in the

00:27:13.630 --> 00:27:15.149
<v Speaker 0>background quite happy.

00:27:17.550 --> 00:27:19.630
<v Speaker 0>So if I were gonna deploy and install

00:27:19.710 --> 00:27:20.429
<v Speaker 0>oh, no.

00:27:21.070 --> 00:27:21.950
<v Speaker 0>Mac.

00:27:24.350 --> 00:27:24.750
<v Speaker 0>Nope.

00:27:25.315 --> 00:27:26.275
<v Speaker 0>Container.

00:27:27.715 --> 00:27:29.875
<v Speaker 0>Let's see what port it runs on. So

00:27:29.875 --> 00:27:31.635
<v Speaker 1>I think if you remove the

00:27:32.115 --> 00:27:32.755
<v Speaker 1>the

00:27:33.235 --> 00:27:34.515
<v Speaker 1>dash h

00:27:34.755 --> 00:27:36.595
<v Speaker 1>there and just put the

00:27:36.915 --> 00:27:39.315
<v Speaker 1>it's the the service URI afterwards,

00:27:39.730 --> 00:27:42.450
<v Speaker 1>it should work and take out the

00:27:43.090 --> 00:27:45.490
<v Speaker 1>that send me the quotes at the end

00:27:45.490 --> 00:27:46.450
<v Speaker 1>of it there.

00:27:49.570 --> 00:27:51.169
<v Speaker 0>I didn't like that. That's what I just

00:27:51.169 --> 00:27:51.729
<v Speaker 0>tried.

00:27:52.210 --> 00:27:52.929
<v Speaker 1>Oh, I didn't?

00:27:54.195 --> 00:27:55.475
<v Speaker 0>I think it would need to yeah. Okay.

00:27:55.475 --> 00:27:56.835
<v Speaker 1>We need to close because of, you know,

00:27:56.835 --> 00:27:58.515
<v Speaker 0>the Oh, because of the string. Yeah. Okay.

00:27:58.515 --> 00:28:01.394
<v Speaker 1>Cool. Alright. So now I need my password,

00:28:01.394 --> 00:28:03.075
<v Speaker 0>which I kept over here.

00:28:05.715 --> 00:28:08.059
<v Speaker 0>And then there we go. Success. Okay. And

00:28:08.059 --> 00:28:11.420
<v Speaker 1>then if you just do a backslash d

00:28:11.420 --> 00:28:12.220
<v Speaker 1>x,

00:28:13.260 --> 00:28:15.179
<v Speaker 1>that will show you that TimescaleDB

00:28:15.179 --> 00:28:16.379
<v Speaker 1>is actually installed

00:28:16.540 --> 00:28:18.379
<v Speaker 1>on this Postgres

00:28:19.100 --> 00:28:21.660
<v Speaker 1>on your Postgres instance, on your TimescaleDB instance.

00:28:22.865 --> 00:28:24.785
<v Speaker 1>And, you know, you can actually verify that,

00:28:24.785 --> 00:28:26.145
<v Speaker 1>you know, you're you're good to go from

00:28:26.145 --> 00:28:26.625
<v Speaker 1>here.

00:28:27.025 --> 00:28:29.985
<v Speaker 0>Okay. Is that just shorthand for show databases?

00:28:30.785 --> 00:28:33.025
<v Speaker 1>So x is the extensions.

00:28:33.665 --> 00:28:35.905
<v Speaker 1>Showing your databases will be

00:28:36.225 --> 00:28:37.265
<v Speaker 1>I think it's

00:28:38.669 --> 00:28:41.709
<v Speaker 1>now you're testing my PC called knowledge.

00:28:42.590 --> 00:28:43.950
<v Speaker 1>Let me double check.

00:28:48.350 --> 00:28:50.029
<v Speaker 1>Let's consult Google.

00:28:50.350 --> 00:28:51.950
<v Speaker 0>Yeah. I have no idea. It's been too

00:28:51.950 --> 00:28:52.510
<v Speaker 0>long for me.

00:29:00.085 --> 00:29:00.805
<v Speaker 1>Okay.

00:29:00.965 --> 00:29:03.445
<v Speaker 0>I think show databases is with my influx

00:29:03.445 --> 00:29:05.925
<v Speaker 0>command. Yeah. It'll just be backslash l,

00:29:06.460 --> 00:29:08.140
<v Speaker 1>like list. Yeah. So then you should see

00:29:08.140 --> 00:29:09.100
<v Speaker 1>a databases.

00:29:10.060 --> 00:29:12.220
<v Speaker 1>Postgres is the database by default.

00:29:13.420 --> 00:29:15.740
<v Speaker 1>If you want to oh, I'm sorry. So

00:29:15.740 --> 00:29:17.420
<v Speaker 1>Postgres is the default database, and then the

00:29:17.420 --> 00:29:19.740
<v Speaker 1>the database that you'll interact with is called

00:29:19.740 --> 00:29:20.540
<v Speaker 1>TSDB.

00:29:20.965 --> 00:29:22.565
<v Speaker 1>The last one at the bottom,

00:29:23.525 --> 00:29:25.365
<v Speaker 1>which is TimescaleDB.

00:29:25.605 --> 00:29:27.445
<v Speaker 1>To do that, to choose

00:29:27.605 --> 00:29:28.565
<v Speaker 1>TimescaleDB,

00:29:28.565 --> 00:29:30.005
<v Speaker 1>you do backslash c,

00:29:30.245 --> 00:29:31.445
<v Speaker 1>which means choose

00:29:31.605 --> 00:29:32.725
<v Speaker 1>and then TSDB.

00:29:34.759 --> 00:29:36.679
<v Speaker 0>I'm just making up commands. It's all good.

00:29:36.679 --> 00:29:38.200
<v Speaker 1>You might as well try try try what

00:29:38.200 --> 00:29:39.480
<v Speaker 1>you know. Most of the time, it actually

00:29:39.480 --> 00:29:42.039
<v Speaker 1>works. So yeah. Yeah. I wonder if that's

00:29:42.039 --> 00:29:44.599
<v Speaker 0>just MariaDB slash MySQL,

00:29:44.600 --> 00:29:47.240
<v Speaker 0>the show and use syntax. Maybe it is

00:29:47.975 --> 00:29:50.375
<v Speaker 0>okay. Yeah. So now we are using our

00:29:50.375 --> 00:29:51.175
<v Speaker 0>TSDB.

00:29:51.175 --> 00:29:52.615
<v Speaker 0>So we wanna be able to

00:29:53.015 --> 00:29:55.015
<v Speaker 0>will there be any tables

00:29:55.015 --> 00:29:56.695
<v Speaker 0>that are created or is that something we

00:29:56.695 --> 00:29:58.055
<v Speaker 0>know we're gonna do? So that's something we're

00:29:58.055 --> 00:29:59.975
<v Speaker 1>gonna do in in step one here. So

00:29:59.975 --> 00:30:01.495
<v Speaker 1>if you just go back to the

00:30:02.900 --> 00:30:03.780
<v Speaker 1>tutorial.

00:30:03.780 --> 00:30:06.179
<v Speaker 1>So this actually create database thing. Since we

00:30:06.179 --> 00:30:08.580
<v Speaker 1>already have a database and we've enabled Timescale,

00:30:08.580 --> 00:30:11.140
<v Speaker 1>we can actually skip that step and

00:30:11.140 --> 00:30:12.420
<v Speaker 1>just move move right ahead.

00:30:14.275 --> 00:30:18.115
<v Speaker 0>Alright. So we have our SQL file

00:30:19.395 --> 00:30:21.155
<v Speaker 0>and well, yeah. I'm assuming there's a CSV

00:30:21.155 --> 00:30:22.755
<v Speaker 0>on it too. I've not extracted it yet.

00:30:22.755 --> 00:30:23.955
<v Speaker 0>So why don't we do that?

00:30:25.315 --> 00:30:26.115
<v Speaker 0>And notes.

00:30:28.570 --> 00:30:29.290
<v Speaker 0>Okay.

00:30:31.370 --> 00:30:33.930
<v Speaker 0>We've already got our connection working. Oh, the

00:30:33.930 --> 00:30:35.290
<v Speaker 0>command was right there in front of us.

00:30:35.290 --> 00:30:36.570
<v Speaker 0>I just wasn't going through the

00:30:37.450 --> 00:30:39.770
<v Speaker 1>It's okay. It's it's good to be impatient

00:30:39.770 --> 00:30:41.610
<v Speaker 1>sometimes. But, yeah, that's the that's the command

00:30:41.610 --> 00:30:42.730
<v Speaker 1>that we figured out.

00:30:43.705 --> 00:30:46.825
<v Speaker 0>Alright. We've done that. It's then we did

00:30:46.825 --> 00:30:48.425
<v Speaker 0>the d x command. So we've seen the

00:30:48.425 --> 00:30:49.225
<v Speaker 0>extensions,

00:30:49.625 --> 00:30:50.585
<v Speaker 0>and now

00:30:51.945 --> 00:30:53.945
<v Speaker 0>we're gonna need three tables. So we're gonna

00:30:53.945 --> 00:30:55.705
<v Speaker 0>have a hyper table, which we've already spoken

00:30:55.705 --> 00:30:56.745
<v Speaker 0>about in the slides.

00:30:57.230 --> 00:30:59.150
<v Speaker 0>If anyone has any questions and you're watching,

00:30:59.150 --> 00:31:00.270
<v Speaker 0>please feel free to drop them in the

00:31:00.270 --> 00:31:01.950
<v Speaker 0>comment section. We will tackle as many of

00:31:01.950 --> 00:31:03.390
<v Speaker 0>them as we can as we go.

00:31:03.870 --> 00:31:06.110
<v Speaker 0>We're also gonna have a regular post gross

00:31:06.110 --> 00:31:08.350
<v Speaker 0>tables. Again, this is one of the superpowers

00:31:08.350 --> 00:31:09.950
<v Speaker 0>of Timescale is that we have the choice

00:31:09.950 --> 00:31:12.030
<v Speaker 0>to work with relational data and time series

00:31:12.030 --> 00:31:12.350
<v Speaker 0>data.

00:31:13.895 --> 00:31:16.054
<v Speaker 0>And that's gonna store payment types. So we're

00:31:16.054 --> 00:31:17.655
<v Speaker 0>using that as like a I guess, like

00:31:17.655 --> 00:31:19.895
<v Speaker 0>a metadata store and then another

00:31:19.895 --> 00:31:22.054
<v Speaker 0>regular postgres table called rates.

00:31:23.095 --> 00:31:25.255
<v Speaker 0>Okay. And I'm assuming that's just for some

00:31:25.255 --> 00:31:26.375
<v Speaker 0>sort of calculations.

00:31:27.169 --> 00:31:29.410
<v Speaker 1>Yeah. We're gonna we're gonna be using all

00:31:29.410 --> 00:31:30.929
<v Speaker 1>the tables later on.

00:31:32.130 --> 00:31:34.530
<v Speaker 1>But, yeah, basically, the the the the hyper

00:31:34.530 --> 00:31:36.289
<v Speaker 1>table is gonna be storing the time series

00:31:36.289 --> 00:31:38.530
<v Speaker 1>data. So every time a ride takes place,

00:31:39.034 --> 00:31:41.914
<v Speaker 1>it'll store the time of the that that

00:31:41.914 --> 00:31:43.755
<v Speaker 1>ride took place, so the start time and

00:31:43.755 --> 00:31:44.634
<v Speaker 1>the end time.

00:31:44.955 --> 00:31:45.674
<v Speaker 1>And then

00:31:46.154 --> 00:31:48.474
<v Speaker 1>all sorts of information about the ride,

00:31:49.515 --> 00:31:51.595
<v Speaker 1>which will then be associated

00:31:51.595 --> 00:31:52.075
<v Speaker 1>with

00:31:52.919 --> 00:31:55.480
<v Speaker 1>the other relational tables. So you have, like,

00:31:55.480 --> 00:31:58.440
<v Speaker 1>rates and I think there's, like, ride types

00:31:58.440 --> 00:32:01.080
<v Speaker 1>or something like that where those are just

00:32:01.880 --> 00:32:03.399
<v Speaker 1>IDs to

00:32:04.355 --> 00:32:07.395
<v Speaker 1>stuff in the relational table. So that's it's

00:32:07.475 --> 00:32:09.475
<v Speaker 1>yeah. As you mentioned, just metadata and and

00:32:09.475 --> 00:32:11.635
<v Speaker 1>descriptions in the relational tables.

00:32:13.155 --> 00:32:15.795
<v Speaker 0>Okay. So this seems to create,

00:32:17.090 --> 00:32:20.050
<v Speaker 0>I guess, as rates just a regular table

00:32:20.050 --> 00:32:22.770
<v Speaker 0>and then a hyper table is a I

00:32:22.770 --> 00:32:24.050
<v Speaker 0>don't wanna say view because I think that

00:32:24.050 --> 00:32:26.210
<v Speaker 0>word is overloaded in this context, but maybe

00:32:26.210 --> 00:32:28.210
<v Speaker 0>you could try explain what this create hyper

00:32:28.210 --> 00:32:29.250
<v Speaker 0>table is is doing.

00:32:29.914 --> 00:32:31.995
<v Speaker 1>Yeah. So basically, the way you create a

00:32:31.995 --> 00:32:33.835
<v Speaker 1>hyper table is that you first just create

00:32:33.835 --> 00:32:34.475
<v Speaker 1>a

00:32:34.635 --> 00:32:35.674
<v Speaker 1>relational

00:32:35.674 --> 00:32:38.235
<v Speaker 1>table with all the with the schema that

00:32:38.235 --> 00:32:40.394
<v Speaker 1>you want. So in this case, we have

00:32:40.715 --> 00:32:42.875
<v Speaker 1>all the things like let me actually just

00:32:42.875 --> 00:32:44.920
<v Speaker 1>open this up here. So we have all

00:32:44.920 --> 00:32:45.960
<v Speaker 1>the things like

00:32:46.680 --> 00:32:49.720
<v Speaker 1>the the pickup date time and passenger count

00:32:49.720 --> 00:32:51.240
<v Speaker 1>and all that kind of stuff. And then

00:32:51.240 --> 00:32:52.679
<v Speaker 1>what you do afterwards

00:32:52.920 --> 00:32:53.640
<v Speaker 1>is

00:32:54.120 --> 00:32:56.920
<v Speaker 1>run the create hyper table command, which actually

00:32:56.920 --> 00:32:57.880
<v Speaker 1>will convert

00:32:58.174 --> 00:32:58.894
<v Speaker 1>your

00:32:58.975 --> 00:33:02.335
<v Speaker 1>regular postgres table to a hyper table. And

00:33:02.335 --> 00:33:03.294
<v Speaker 1>then you can

00:33:03.535 --> 00:33:06.254
<v Speaker 1>perform all sorts of functions reserved

00:33:06.335 --> 00:33:08.015
<v Speaker 1>to be performed on the hyper tables on

00:33:08.015 --> 00:33:10.975
<v Speaker 1>that. So there's some advanced functions like

00:33:11.215 --> 00:33:12.735
<v Speaker 1>data retention policies,

00:33:13.490 --> 00:33:15.330
<v Speaker 1>down sampling, and things that can only be

00:33:15.330 --> 00:33:17.650
<v Speaker 1>performed on hyper tables. And so that's just

00:33:17.650 --> 00:33:20.050
<v Speaker 1>to distinguish which tables are regular tables and

00:33:20.050 --> 00:33:21.890
<v Speaker 1>which tables are actually hyper tables.

00:33:22.530 --> 00:33:24.210
<v Speaker 0>And is there any default,

00:33:24.210 --> 00:33:26.850
<v Speaker 0>you know, time to live or data exploration

00:33:26.850 --> 00:33:28.795
<v Speaker 0>policy when you create the hyper table or

00:33:28.795 --> 00:33:29.995
<v Speaker 0>is it all infinite?

00:33:30.555 --> 00:33:32.555
<v Speaker 1>So yeah. Everything is infinite.

00:33:33.755 --> 00:33:34.875
<v Speaker 1>Yeah. There's no

00:33:35.355 --> 00:33:37.595
<v Speaker 1>time to live and there's no data exploration

00:33:37.595 --> 00:33:39.595
<v Speaker 1>policy. Those are things that you can actually

00:33:39.595 --> 00:33:40.155
<v Speaker 1>set up

00:33:40.810 --> 00:33:42.890
<v Speaker 1>on a on a per hyper table basis

00:33:42.890 --> 00:33:43.690
<v Speaker 1>or

00:33:44.890 --> 00:33:45.929
<v Speaker 1>there's actually

00:33:46.330 --> 00:33:48.410
<v Speaker 1>a way that you can set up a

00:33:48.410 --> 00:33:50.810
<v Speaker 1>custom retention policy for all your hyper tables,

00:33:50.810 --> 00:33:52.650
<v Speaker 1>but that's only if you if you'd like

00:33:52.650 --> 00:33:54.585
<v Speaker 1>to. And for those people who are interested

00:33:54.585 --> 00:33:56.825
<v Speaker 1>in that, the timescale feature related to that

00:33:56.825 --> 00:33:57.625
<v Speaker 1>is called

00:33:58.265 --> 00:33:59.945
<v Speaker 1>user defined actions.

00:34:00.345 --> 00:34:00.904
<v Speaker 1>And

00:34:01.225 --> 00:34:03.305
<v Speaker 1>the the actual stuff to do with data

00:34:03.305 --> 00:34:06.345
<v Speaker 1>retention is under the automated retention policies.

00:34:06.720 --> 00:34:08.320
<v Speaker 1>So, you know, for folks at home wanna

00:34:08.320 --> 00:34:09.840
<v Speaker 1>check that out, you can.

00:34:11.199 --> 00:34:13.920
<v Speaker 0>Cool. Alright. So we've created those.

00:34:14.400 --> 00:34:16.480
<v Speaker 0>Now we're just gonna create a couple more.

00:34:16.480 --> 00:34:18.480
<v Speaker 0>So this is just our yeah. The metadata

00:34:18.480 --> 00:34:19.840
<v Speaker 0>payment types and sort of

00:34:21.835 --> 00:34:24.475
<v Speaker 0>SQL enum and then our rates.

00:34:24.475 --> 00:34:25.915
<v Speaker 0>So let's copy this.

00:34:28.875 --> 00:34:30.715
<v Speaker 0>And now we can run

00:34:30.955 --> 00:34:33.594
<v Speaker 0>slash d t, which is I'm assuming just

00:34:33.594 --> 00:34:34.475
<v Speaker 0>described tables.

00:34:35.020 --> 00:34:35.660
<v Speaker 0>Yeah.

00:34:36.060 --> 00:34:37.900
<v Speaker 0>And we can see those three tables that

00:34:37.900 --> 00:34:40.300
<v Speaker 0>we have already created. So far, it's still

00:34:40.300 --> 00:34:41.740
<v Speaker 0>good. Okay.

00:34:42.780 --> 00:34:43.900
<v Speaker 0>Now we

00:34:44.140 --> 00:34:47.580
<v Speaker 0>wanna copy data from my downloads folder

00:34:48.225 --> 00:34:49.985
<v Speaker 0>into this instance.

00:34:51.105 --> 00:34:53.585
<v Speaker 0>That's a neat command if it works. Okay.

00:34:56.705 --> 00:34:57.425
<v Speaker 0>Now

00:34:58.065 --> 00:35:00.385
<v Speaker 0>is that going to be

00:35:01.540 --> 00:35:03.940
<v Speaker 0>from where my client was executed,

00:35:04.180 --> 00:35:04.820
<v Speaker 0>or

00:35:05.460 --> 00:35:07.859
<v Speaker 0>is this gonna expect something that's living on

00:35:07.859 --> 00:35:09.220
<v Speaker 0>the cloud server?

00:35:09.220 --> 00:35:11.299
<v Speaker 0>Should we just test it and see? Yeah.

00:35:11.299 --> 00:35:12.339
<v Speaker 1>Let's test it and see.

00:35:16.255 --> 00:35:17.615
<v Speaker 0>Okay. Let's

00:35:17.615 --> 00:35:19.375
<v Speaker 0>try copy from

00:35:19.375 --> 00:35:20.335
<v Speaker 0>downloads.

00:35:20.335 --> 00:35:21.375
<v Speaker 0>I have no idea.

00:35:22.095 --> 00:35:24.255
<v Speaker 0>And did that go into a directory? No?

00:35:24.255 --> 00:35:24.495
<v Speaker 0>Okay.

00:35:28.400 --> 00:35:31.120
<v Speaker 0>Looks good. Yeah. Okay. So that's

00:35:31.520 --> 00:35:33.680
<v Speaker 0>from wherever I executed my client. I've just

00:35:33.680 --> 00:35:35.440
<v Speaker 0>passed on an absolute path, so we should

00:35:35.440 --> 00:35:36.240
<v Speaker 0>be good.

00:35:38.000 --> 00:35:40.720
<v Speaker 0>Let's see. There it is. I have a

00:35:41.445 --> 00:35:43.205
<v Speaker 1>I have a hunch that it might not

00:35:43.205 --> 00:35:45.365
<v Speaker 1>be working, but let me actually try and

00:35:45.365 --> 00:35:46.325
<v Speaker 1>figure that out.

00:35:47.925 --> 00:35:49.845
<v Speaker 0>Would you expect some sort of output to

00:35:49.845 --> 00:35:51.685
<v Speaker 0>suggest that it was copying?

00:35:52.485 --> 00:35:54.980
<v Speaker 1>Yeah. Yeah. Yeah. I think you might have

00:35:54.980 --> 00:35:57.220
<v Speaker 1>to just create a new tab

00:35:59.220 --> 00:36:00.740
<v Speaker 1>in your terminal.

00:36:01.700 --> 00:36:02.580
<v Speaker 1>And then

00:36:03.300 --> 00:36:03.700
<v Speaker 0>Mhmm.

00:36:15.645 --> 00:36:17.085
<v Speaker 1>I'm just consulting

00:36:17.085 --> 00:36:19.005
<v Speaker 1>the docs to make sure that I'm gonna

00:36:19.005 --> 00:36:19.885
<v Speaker 1>say the right thing.

00:36:23.230 --> 00:36:25.710
<v Speaker 0>Yeah. I feel like it's doing something. Surely,

00:36:25.710 --> 00:36:26.270
<v Speaker 0>would

00:36:29.310 --> 00:36:30.190
<v Speaker 0>crash.

00:36:33.310 --> 00:36:35.790
<v Speaker 0>We can confirm the hypothesis. Right? Let me

00:36:35.790 --> 00:36:36.510
<v Speaker 0>control c.

00:36:38.805 --> 00:36:41.045
<v Speaker 0>Could have done a wrong file name first

00:36:41.365 --> 00:36:42.805
<v Speaker 0>to see what happens.

00:36:45.365 --> 00:36:46.405
<v Speaker 0>I've anger it now.

00:36:59.780 --> 00:37:00.660
<v Speaker 0>Alright.

00:37:00.900 --> 00:37:01.940
<v Speaker 0>Let's try.

00:37:07.125 --> 00:37:09.525
<v Speaker 0>K. And I'll never find it.

00:37:13.125 --> 00:37:15.365
<v Speaker 0>Okay. There is our command.

00:37:15.445 --> 00:37:17.525
<v Speaker 0>We put the bash x back on. Yeah.

00:37:17.525 --> 00:37:18.645
<v Speaker 0>That's for my password.

00:37:19.960 --> 00:37:22.440
<v Speaker 0>So now I've got an active session,

00:37:22.920 --> 00:37:25.880
<v Speaker 0>and I'm gonna copy this copy command again.

00:37:26.440 --> 00:37:27.960
<v Speaker 0>Get the filename wrong.

00:37:29.240 --> 00:37:31.080
<v Speaker 0>Yeah. I think that is working because when

00:37:31.080 --> 00:37:32.280
<v Speaker 0>the filename's wrong

00:37:32.680 --> 00:37:33.720
<v Speaker 1>Okay. Cool.

00:37:33.880 --> 00:37:34.680
<v Speaker 0>I think

00:37:35.395 --> 00:37:37.635
<v Speaker 0>just maybe this is gonna finish first because

00:37:37.635 --> 00:37:39.235
<v Speaker 0>I tried to control c it. It's not

00:37:39.235 --> 00:37:40.915
<v Speaker 0>control c ing, so it's probably gonna wait

00:37:40.915 --> 00:37:41.555
<v Speaker 0>till

00:37:41.795 --> 00:37:44.115
<v Speaker 1>Okay. It finished sendings. Guess

00:37:44.915 --> 00:37:46.115
<v Speaker 0>how big was the fail?

00:37:49.060 --> 00:37:49.700
<v Speaker 0>Oh,

00:37:50.099 --> 00:37:52.420
<v Speaker 0>that's that's all. T crap.

00:37:52.420 --> 00:37:53.460
<v Speaker 0>NYC.

00:37:58.020 --> 00:37:59.380
<v Speaker 0>One

00:38:00.180 --> 00:38:01.140
<v Speaker 0>Point Seven gig.

00:38:03.805 --> 00:38:05.405
<v Speaker 1>It can it can take a few minutes.

00:38:05.405 --> 00:38:07.005
<v Speaker 1>Yeah. Yeah. Yeah. Okay.

00:38:07.725 --> 00:38:08.605
<v Speaker 0>So

00:38:09.885 --> 00:38:11.485
<v Speaker 0>oh, there's a fast alternative.

00:38:12.045 --> 00:38:14.125
<v Speaker 1>Yeah. So there's a fast alternative. It's a

00:38:14.125 --> 00:38:15.005
<v Speaker 1>little bit more

00:38:15.325 --> 00:38:15.885
<v Speaker 1>involved,

00:38:16.490 --> 00:38:19.130
<v Speaker 1>but maybe we can try that. Basically, we've

00:38:19.130 --> 00:38:20.010
<v Speaker 1>created this

00:38:20.250 --> 00:38:21.369
<v Speaker 1>Go program,

00:38:21.849 --> 00:38:23.849
<v Speaker 1>you know, for folks who have more higher

00:38:23.849 --> 00:38:25.369
<v Speaker 1>ingest rate requirements.

00:38:25.609 --> 00:38:28.170
<v Speaker 1>It just takes advantage of parallelism,

00:38:28.525 --> 00:38:31.005
<v Speaker 1>And so it just it's a multithreaded way

00:38:31.005 --> 00:38:33.005
<v Speaker 1>to insert into your Timescale

00:38:33.005 --> 00:38:33.965
<v Speaker 1>database.

00:38:35.085 --> 00:38:35.645
<v Speaker 0>Okay.

00:38:36.125 --> 00:38:37.805
<v Speaker 0>Well, why don't we

00:38:40.125 --> 00:38:40.605
<v Speaker 0>open?

00:38:41.170 --> 00:38:43.250
<v Speaker 0>Would that mean if okay. What was the

00:38:43.250 --> 00:38:45.010
<v Speaker 0>command? Was it slash d t s t

00:38:45.010 --> 00:38:45.570
<v Speaker 0>b?

00:38:45.810 --> 00:38:46.530
<v Speaker 0>Nope.

00:38:48.050 --> 00:38:51.410
<v Speaker 1>Slash c would be yeah. T s t

00:38:51.410 --> 00:38:52.770
<v Speaker 1>b. Alright.

00:38:53.010 --> 00:38:53.970
<v Speaker 0>Select

00:38:54.675 --> 00:38:55.475
<v Speaker 0>current.

00:38:55.635 --> 00:38:57.555
<v Speaker 0>Like, I wonder if there's any data

00:38:58.115 --> 00:39:00.035
<v Speaker 0>in this table now from

00:39:01.155 --> 00:39:02.035
<v Speaker 0>NYC.

00:39:02.035 --> 00:39:03.715
<v Speaker 0>Was it no. Was it just rides? It'll

00:39:03.715 --> 00:39:04.915
<v Speaker 1>just be rides. Yeah.

00:39:05.715 --> 00:39:06.275
<v Speaker 0>Oh, no.

00:39:07.720 --> 00:39:09.880
<v Speaker 1>So we'll have to wait and wait for

00:39:09.880 --> 00:39:12.440
<v Speaker 1>that operation to finish. Let me double check

00:39:12.440 --> 00:39:13.160
<v Speaker 1>to

00:39:16.920 --> 00:39:18.520
<v Speaker 1>ensure that that's working.

00:39:22.424 --> 00:39:24.424
<v Speaker 1>Yeah. As I mentioned, I haven't done this

00:39:24.424 --> 00:39:26.585
<v Speaker 1>in a while, so it's good to know

00:39:26.585 --> 00:39:28.425
<v Speaker 1>where the friction points are.

00:39:29.865 --> 00:39:31.785
<v Speaker 1>I personally actually use p

00:39:31.785 --> 00:39:33.384
<v Speaker 1>g admin all the time or

00:39:34.010 --> 00:39:36.650
<v Speaker 1>have something that's inserting data, like, from a

00:39:36.650 --> 00:39:37.370
<v Speaker 1>Python

00:39:37.450 --> 00:39:38.970
<v Speaker 1>script or something like that.

00:39:40.810 --> 00:39:41.850
<v Speaker 1>But this is

00:39:43.369 --> 00:39:44.650
<v Speaker 1>hopefully, will be done soon.

00:39:46.025 --> 00:39:48.185
<v Speaker 0>Yeah. I'm not really sure. I wonder if

00:39:48.185 --> 00:39:50.185
<v Speaker 0>it's a special command I can send

00:39:50.505 --> 00:39:52.825
<v Speaker 0>to postgres to print the status.

00:39:54.025 --> 00:39:55.625
<v Speaker 1>Yeah. If you wanna try

00:39:56.025 --> 00:39:57.785
<v Speaker 1>if you wanna try using p g admin

00:39:57.785 --> 00:39:59.170
<v Speaker 1>as well, that one has a bit of

00:39:59.170 --> 00:40:01.010
<v Speaker 1>a better UI to show you, like, the

00:40:01.010 --> 00:40:02.530
<v Speaker 1>progress of the insert.

00:40:02.770 --> 00:40:04.050
<v Speaker 1>And you just kinda

00:40:04.370 --> 00:40:06.130
<v Speaker 1>drag and drop which file you wanna set

00:40:06.130 --> 00:40:08.130
<v Speaker 1>inside, and then it'll do it for you.

00:40:10.530 --> 00:40:12.050
<v Speaker 0>But you know what port that runs on?

00:40:16.695 --> 00:40:17.975
<v Speaker 1>I'm not sure.

00:40:18.935 --> 00:40:19.735
<v Speaker 0>It's

00:40:19.735 --> 00:40:20.375
<v Speaker 0>just

00:40:21.815 --> 00:40:23.975
<v Speaker 0>five. I know that's a postcard port.

00:40:27.720 --> 00:40:30.440
<v Speaker 0>Six Oh, it'll be six five

00:40:30.520 --> 00:40:33.960
<v Speaker 1>two eight eight, maybe. Try that. I found

00:40:33.960 --> 00:40:37.480
<v Speaker 0>this slightly different number. What you're saying? 65288?

00:40:37.480 --> 00:40:37.960
<v Speaker 1>Yeah.

00:40:40.685 --> 00:40:41.965
<v Speaker 1>Nothing. Okay.

00:40:42.365 --> 00:40:45.645
<v Speaker 1>Maybe that's just for my my particular installation.

00:40:48.125 --> 00:40:50.445
<v Speaker 0>Yeah. We got a suggestion from.

00:40:50.765 --> 00:40:53.725
<v Speaker 0>It's like, Suggest I check my network IO.

00:40:54.359 --> 00:40:55.559
<v Speaker 1>Thanks, Vignesh.

00:40:55.559 --> 00:40:56.920
<v Speaker 0>I'm pretty sure it

00:40:57.319 --> 00:40:59.079
<v Speaker 0>quite fast. I don't even know how to

00:40:59.079 --> 00:41:00.599
<v Speaker 0>do that on my Mac.

00:41:00.759 --> 00:41:01.400
<v Speaker 0>However

00:41:04.039 --> 00:41:07.640
<v Speaker 0>let's

00:41:07.640 --> 00:41:07.880
<v Speaker 0>see.

00:41:10.955 --> 00:41:12.875
<v Speaker 0>Let's find out how to run this PT

00:41:12.875 --> 00:41:14.635
<v Speaker 0>admin thing. So

00:41:18.395 --> 00:41:19.675
<v Speaker 0>all through through.

00:41:27.809 --> 00:41:30.930
<v Speaker 0>My Google Foo is failing me this evening.

00:41:38.445 --> 00:41:40.925
<v Speaker 0>So I did find another command

00:41:41.085 --> 00:41:43.085
<v Speaker 0>which suggests

00:41:45.085 --> 00:41:47.805
<v Speaker 0>I may try and run that locally

00:41:49.565 --> 00:41:51.725
<v Speaker 0>and get a time from it. So let

00:41:51.725 --> 00:41:53.520
<v Speaker 0>me show you this. So

00:41:54.560 --> 00:41:56.320
<v Speaker 0>because of Stack Overflow,

00:41:57.920 --> 00:41:59.440
<v Speaker 0>someone shared

00:42:00.880 --> 00:42:02.080
<v Speaker 0>this command

00:42:03.280 --> 00:42:05.200
<v Speaker 0>where it seems I can just

00:42:06.905 --> 00:42:09.465
<v Speaker 0>type the files through PV. I'm not sure

00:42:09.465 --> 00:42:10.505
<v Speaker 0>what that is.

00:42:11.145 --> 00:42:12.905
<v Speaker 0>It doesn't appear I have PV.

00:42:13.865 --> 00:42:14.985
<v Speaker 0>Good postgres.

00:42:18.890 --> 00:42:21.130
<v Speaker 0>We could drop in our string there.

00:42:24.570 --> 00:42:25.690
<v Speaker 0>Would that work?

00:42:26.730 --> 00:42:28.410
<v Speaker 0>Or am I just being really impatient and

00:42:28.410 --> 00:42:30.650
<v Speaker 0>we should just wait? There we go.

00:42:31.770 --> 00:42:34.425
<v Speaker 0>Well, I think it actually faintly canceled, didn't

00:42:34.425 --> 00:42:36.345
<v Speaker 0>it? Oh, wow. Okay.

00:42:41.145 --> 00:42:42.745
<v Speaker 1>It'll be from Rides?

00:42:42.985 --> 00:42:44.265
<v Speaker 0>Of course. Yeah.

00:42:45.480 --> 00:42:46.360
<v Speaker 0>Rites.

00:42:50.120 --> 00:42:51.480
<v Speaker 0>Do you think I should run a local

00:42:51.480 --> 00:42:52.040
<v Speaker 0>one?

00:42:55.160 --> 00:42:57.480
<v Speaker 1>Let me just double check something.

00:43:02.775 --> 00:43:03.495
<v Speaker 1>Yeah.

00:43:04.615 --> 00:43:06.615
<v Speaker 1>I think the the hack around this will

00:43:06.615 --> 00:43:08.455
<v Speaker 1>definitely be PG admin. So

00:43:08.935 --> 00:43:10.215
<v Speaker 1>if we can find a way to open

00:43:10.215 --> 00:43:10.775
<v Speaker 1>that,

00:43:11.335 --> 00:43:12.615
<v Speaker 1>that'll probably be the best thing.

00:43:13.350 --> 00:43:15.750
<v Speaker 0>Yeah. Sure. Alright. Let's see if it's running.

00:43:18.150 --> 00:43:20.630
<v Speaker 1>Yeah. I actually use the Mac app for

00:43:20.630 --> 00:43:21.990
<v Speaker 1>PG admin,

00:43:23.190 --> 00:43:25.190
<v Speaker 1>but that still just opens the browser as

00:43:25.190 --> 00:43:27.270
<v Speaker 1>well. So it's not like a separate UI,

00:43:27.670 --> 00:43:30.195
<v Speaker 1>but it should be the same thing regardless.

00:43:30.994 --> 00:43:33.555
<v Speaker 0>Okay. Well, we got a comment from Ryan

00:43:33.555 --> 00:43:35.714
<v Speaker 0>who says the issue is single threaded in

00:43:35.714 --> 00:43:37.954
<v Speaker 0>a single transaction. So using the parallel copy

00:43:37.954 --> 00:43:40.994
<v Speaker 0>is significantly faster because the copy is single

00:43:40.994 --> 00:43:41.714
<v Speaker 0>threaded.

00:43:41.795 --> 00:43:43.634
<v Speaker 1>Yeah. Maybe let's try the parallel copy.

00:43:44.450 --> 00:43:46.130
<v Speaker 1>That's the command. That's I think it's the

00:43:46.130 --> 00:43:48.049
<v Speaker 1>next command in the doc. Shout out to

00:43:48.049 --> 00:43:48.690
<v Speaker 1>Ryan

00:43:48.930 --> 00:43:50.130
<v Speaker 1>for his help.

00:43:51.569 --> 00:43:53.250
<v Speaker 0>Do I need to install something locally for

00:43:53.250 --> 00:43:54.450
<v Speaker 0>this to work? Because I'm not gonna have

00:43:54.450 --> 00:43:57.105
<v Speaker 0>Timescale DB parallel copy. Right? Yeah. So if

00:43:57.105 --> 00:43:58.465
<v Speaker 1>you just go to the

00:43:58.945 --> 00:44:01.265
<v Speaker 1>go back to the tutorial and there's a

00:44:01.265 --> 00:44:02.865
<v Speaker 1>link to parallel copy

00:44:03.825 --> 00:44:04.945
<v Speaker 1>just above

00:44:05.425 --> 00:44:06.225
<v Speaker 1>yeah. Right there.

00:44:17.550 --> 00:44:19.950
<v Speaker 1>And there should be some installation instructions as

00:44:19.950 --> 00:44:20.190
<v Speaker 1>well.

00:44:20.795 --> 00:44:22.555
<v Speaker 0>Yeah. I think it just wants me to

00:44:22.555 --> 00:44:23.995
<v Speaker 0>compile it with Go.

00:44:25.115 --> 00:44:25.595
<v Speaker 0>Alright.

00:44:35.780 --> 00:44:37.860
<v Speaker 0>I'm pretty confident this will be fast.

00:44:46.125 --> 00:44:48.765
<v Speaker 0>Once we have that, we are going to

00:44:48.765 --> 00:44:49.645
<v Speaker 0>run.

00:44:51.645 --> 00:44:53.165
<v Speaker 0>So we need to drop in the connection

00:44:53.165 --> 00:44:54.445
<v Speaker 0>string of the DB.

00:44:56.525 --> 00:44:58.845
<v Speaker 0>Okay. Let's grab all that just now.

00:45:06.390 --> 00:45:08.070
<v Speaker 0>K. That looks better.

00:45:09.830 --> 00:45:12.070
<v Speaker 0>Okay. So our connection string and our DB

00:45:12.070 --> 00:45:13.990
<v Speaker 0>name. So our DB name is T s

00:45:13.990 --> 00:45:14.390
<v Speaker 0>t b.

00:45:15.265 --> 00:45:15.985
<v Speaker 1>Yep.

00:45:16.065 --> 00:45:18.465
<v Speaker 0>And our connection string, is that gonna be

00:45:18.465 --> 00:45:19.745
<v Speaker 0>that fill

00:45:20.065 --> 00:45:21.025
<v Speaker 0>forge

00:45:21.105 --> 00:45:22.705
<v Speaker 1>thing? That'll just be the

00:45:23.905 --> 00:45:25.585
<v Speaker 1>the service you are at the end.

00:45:28.470 --> 00:45:29.350
<v Speaker 0>Alright.

00:45:30.230 --> 00:45:31.910
<v Speaker 0>And

00:45:33.830 --> 00:45:35.270
<v Speaker 0>we need

00:45:35.830 --> 00:45:37.430
<v Speaker 0>the link to our file,

00:45:41.575 --> 00:45:43.815
<v Speaker 0>Oh, it says download MIC

00:45:43.895 --> 00:45:45.655
<v Speaker 0>data CSV.

00:45:49.015 --> 00:45:50.135
<v Speaker 0>Right.

00:45:50.295 --> 00:45:50.615
<v Speaker 0>CSV.

00:45:59.180 --> 00:46:02.460
<v Speaker 1>Password authentication failed. So I think what you

00:46:02.460 --> 00:46:03.740
<v Speaker 1>might do is

00:46:04.060 --> 00:46:07.935
<v Speaker 0>Flash the password. Right? Yeah. That that's honestly

00:46:07.935 --> 00:46:09.455
<v Speaker 1>the hackiest way.

00:46:10.655 --> 00:46:12.895
<v Speaker 1>Not good security

00:46:12.895 --> 00:46:15.055
<v Speaker 1>practices. Don't don't do what we're doing.

00:46:15.295 --> 00:46:18.255
<v Speaker 0>Yeah. Please, nobody break my instance until after

00:46:18.255 --> 00:46:20.415
<v Speaker 0>the stream. Afterwards, knock yourself out.

00:46:21.869 --> 00:46:23.950
<v Speaker 0>Okay. So do we get any output from

00:46:23.950 --> 00:46:25.869
<v Speaker 0>this, or are we just gonna be waiting

00:46:25.869 --> 00:46:26.510
<v Speaker 0>for

00:46:26.910 --> 00:46:28.670
<v Speaker 0>oh, up every thirty seconds, we're gonna get

00:46:28.670 --> 00:46:31.150
<v Speaker 0>some progress at the Yeah. Okay. So we

00:46:31.150 --> 00:46:32.109
<v Speaker 0>can wait thirty seconds.

00:46:38.715 --> 00:46:40.475
<v Speaker 0>So why don't we discuss some of the

00:46:40.475 --> 00:46:42.955
<v Speaker 0>feature sets that Timescale

00:46:45.115 --> 00:46:47.195
<v Speaker 0>brings to us? So we've kinda mentioned that

00:46:47.195 --> 00:46:49.515
<v Speaker 0>we create hyper tables from our normal tables,

00:46:50.220 --> 00:46:51.580
<v Speaker 0>and that brings in all of the time

00:46:51.580 --> 00:46:52.780
<v Speaker 0>series functionality.

00:46:53.740 --> 00:46:55.980
<v Speaker 0>We kinda spoke about time to live, which

00:46:55.980 --> 00:46:58.700
<v Speaker 0>was that, you said, through user defined actions,

00:46:58.700 --> 00:47:01.180
<v Speaker 0>which allows you to downsample that data. And

00:47:01.180 --> 00:47:01.500
<v Speaker 0>it's

00:47:02.184 --> 00:47:02.984
<v Speaker 1>So there's

00:47:03.464 --> 00:47:04.905
<v Speaker 1>so on the on the topic of, you

00:47:04.905 --> 00:47:06.505
<v Speaker 1>know, how long you wanna retain your data

00:47:06.505 --> 00:47:08.585
<v Speaker 1>for, time to live of of your data,

00:47:09.464 --> 00:47:12.025
<v Speaker 1>there's a couple of features there. There's one

00:47:12.184 --> 00:47:13.385
<v Speaker 1>that is

00:47:14.265 --> 00:47:16.825
<v Speaker 1>part of the the data management features, which

00:47:16.825 --> 00:47:18.190
<v Speaker 1>is called

00:47:19.070 --> 00:47:21.630
<v Speaker 1>setting automated retention policies.

00:47:21.710 --> 00:47:23.150
<v Speaker 1>So that's the the name in the docs

00:47:23.150 --> 00:47:24.590
<v Speaker 1>that folks can search for.

00:47:25.470 --> 00:47:27.150
<v Speaker 1>But the thing that I was mentioning is

00:47:27.150 --> 00:47:29.390
<v Speaker 1>that these retention policies are set on a

00:47:29.390 --> 00:47:32.005
<v Speaker 1>per hyper table basis, meaning that for every

00:47:32.005 --> 00:47:34.325
<v Speaker 1>hyper table you have, you can set different

00:47:34.325 --> 00:47:36.005
<v Speaker 1>retention policies for them.

00:47:36.405 --> 00:47:39.845
<v Speaker 1>But if you would like to have one

00:47:39.845 --> 00:47:42.005
<v Speaker 1>retention policy that applies to, like, all your

00:47:42.005 --> 00:47:43.605
<v Speaker 1>hyper tables, you can use

00:47:44.410 --> 00:47:47.210
<v Speaker 1>a feature called user defined actions, which is

00:47:47.210 --> 00:47:47.850
<v Speaker 1>basically

00:47:48.170 --> 00:47:49.450
<v Speaker 1>so we have this

00:47:50.250 --> 00:47:51.210
<v Speaker 1>background

00:47:52.330 --> 00:47:53.210
<v Speaker 1>scheduler

00:47:53.210 --> 00:47:56.410
<v Speaker 1>and things that that we've created in order

00:47:56.410 --> 00:47:58.890
<v Speaker 1>to enable stuff like the retention policies to

00:47:58.890 --> 00:48:01.205
<v Speaker 1>happen. So what that does is allows you

00:48:01.205 --> 00:48:03.525
<v Speaker 1>as a user to take advantage of the

00:48:03.525 --> 00:48:06.645
<v Speaker 1>scheduler and that basically, that stuff that's going

00:48:06.645 --> 00:48:07.685
<v Speaker 1>on in the back end

00:48:08.725 --> 00:48:10.965
<v Speaker 1>to run your own jobs on a on

00:48:10.965 --> 00:48:12.725
<v Speaker 1>a specific schedule, and one of them can

00:48:12.725 --> 00:48:13.285
<v Speaker 1>be this

00:48:13.940 --> 00:48:16.980
<v Speaker 1>down sampling or this compression job or this

00:48:17.460 --> 00:48:18.099
<v Speaker 1>data

00:48:18.579 --> 00:48:20.099
<v Speaker 1>discarding job as well.

00:48:21.220 --> 00:48:23.619
<v Speaker 0>Okay. I mean, and time sampling's important with

00:48:23.619 --> 00:48:25.619
<v Speaker 0>time series data. Right? Like, it's probably one

00:48:25.619 --> 00:48:26.980
<v Speaker 0>of the first tasks that people should be

00:48:26.980 --> 00:48:28.660
<v Speaker 0>doing when they start to store time series

00:48:28.660 --> 00:48:29.380
<v Speaker 0>data because

00:48:29.835 --> 00:48:30.715
<v Speaker 0>unlike

00:48:30.955 --> 00:48:33.515
<v Speaker 0>traditional data that we store and relational or

00:48:33.515 --> 00:48:35.915
<v Speaker 0>no SQL stores is that time series data

00:48:35.915 --> 00:48:38.635
<v Speaker 0>isn't valuable forever. Is it? Like

00:48:39.595 --> 00:48:41.275
<v Speaker 1>Yeah. It depends. Because I think a lot

00:48:41.275 --> 00:48:42.875
<v Speaker 1>of the time when you think about the

00:48:42.875 --> 00:48:43.595
<v Speaker 1>two major

00:48:44.380 --> 00:48:46.619
<v Speaker 1>kinda uses that people have for it, there's

00:48:46.619 --> 00:48:48.380
<v Speaker 1>kinda the real time monitoring,

00:48:48.540 --> 00:48:49.180
<v Speaker 1>which is

00:48:49.580 --> 00:48:50.140
<v Speaker 1>more,

00:48:50.859 --> 00:48:53.020
<v Speaker 1>you know, the recent data days is what

00:48:53.020 --> 00:48:54.220
<v Speaker 1>you're interested in.

00:48:54.859 --> 00:48:56.780
<v Speaker 1>But there's also a case where you wanna

00:48:56.780 --> 00:49:00.295
<v Speaker 1>look at historical analysis or just analytics of

00:49:00.295 --> 00:49:00.855
<v Speaker 1>how

00:49:01.335 --> 00:49:03.974
<v Speaker 1>something has been doing. And there, you know,

00:49:03.974 --> 00:49:05.815
<v Speaker 1>the recent data isn't quite important,

00:49:06.134 --> 00:49:08.694
<v Speaker 1>but I think you're you're right that and

00:49:08.694 --> 00:49:11.450
<v Speaker 1>so for the analysis, it's definitely more you

00:49:11.450 --> 00:49:13.049
<v Speaker 1>know, the the more data you have depending

00:49:13.049 --> 00:49:14.410
<v Speaker 1>on how long you wanna go back, the

00:49:14.410 --> 00:49:15.050
<v Speaker 1>better.

00:49:15.290 --> 00:49:16.570
<v Speaker 1>But I definitely

00:49:16.809 --> 00:49:18.329
<v Speaker 1>agree that, you know, after a certain amount

00:49:18.329 --> 00:49:18.970
<v Speaker 1>of time,

00:49:19.849 --> 00:49:21.369
<v Speaker 1>data usefulness does

00:49:21.690 --> 00:49:22.410
<v Speaker 1>degrade.

00:49:22.569 --> 00:49:23.450
<v Speaker 1>But I think also,

00:49:24.345 --> 00:49:26.105
<v Speaker 1>you know, the way it's going today, people

00:49:26.105 --> 00:49:28.985
<v Speaker 1>wanna keep data around for an increasing amount

00:49:28.985 --> 00:49:31.065
<v Speaker 1>of time because they're doing all sorts of

00:49:31.065 --> 00:49:33.385
<v Speaker 1>analysis on it, machine learning models,

00:49:34.105 --> 00:49:36.185
<v Speaker 1>you know, all those kinds of things. And

00:49:36.185 --> 00:49:37.945
<v Speaker 1>so there's actually a feature that Timescale does

00:49:37.945 --> 00:49:39.385
<v Speaker 1>have that allows you to do that,

00:49:40.119 --> 00:49:41.720
<v Speaker 1>which is native compression.

00:49:42.680 --> 00:49:44.280
<v Speaker 1>Then that's just to keep your your data

00:49:44.280 --> 00:49:46.520
<v Speaker 1>storage costs and the actual size on disk

00:49:46.520 --> 00:49:47.640
<v Speaker 1>lower than

00:49:47.800 --> 00:49:50.680
<v Speaker 1>if it's uncompressed. So traditionally with Postgres,

00:49:51.320 --> 00:49:53.265
<v Speaker 1>one of the disadvantages

00:49:53.265 --> 00:49:55.025
<v Speaker 1>is that the table sizes used to be

00:49:55.025 --> 00:49:55.745
<v Speaker 1>quite big.

00:49:56.065 --> 00:49:58.464
<v Speaker 1>But and especially with time series data, you

00:49:58.464 --> 00:50:00.145
<v Speaker 1>know, you're inserting data every

00:50:00.785 --> 00:50:02.944
<v Speaker 1>you know, whatever your insert period is, it

00:50:02.944 --> 00:50:05.025
<v Speaker 1>can pile up quite quickly. So compression does

00:50:05.025 --> 00:50:06.305
<v Speaker 1>help to keep that

00:50:06.944 --> 00:50:09.760
<v Speaker 1>down and within costs if you're using like

00:50:09.760 --> 00:50:11.680
<v Speaker 1>a hosted or if you're even if you're

00:50:11.680 --> 00:50:14.319
<v Speaker 1>running a self managed on something like AWS

00:50:14.319 --> 00:50:15.360
<v Speaker 1>or something like that.

00:50:16.880 --> 00:50:18.000
<v Speaker 0>Cool. Thank you.

00:50:18.720 --> 00:50:22.765
<v Speaker 0>So Jared says evening. Hey, Jared. Morning depending

00:50:22.765 --> 00:50:24.045
<v Speaker 0>on where you are. What time is it

00:50:24.045 --> 00:50:26.125
<v Speaker 0>for you, how far? It's just past my

00:50:26.125 --> 00:50:28.445
<v Speaker 1>day. It's like one 1PM now.

00:50:29.245 --> 00:50:30.525
<v Speaker 1>Good day to everyone.

00:50:30.845 --> 00:50:33.565
<v Speaker 0>And is saying, what about data archival?

00:50:34.160 --> 00:50:35.920
<v Speaker 0>I mean, I can try and and fair

00:50:35.920 --> 00:50:37.680
<v Speaker 0>what I think you mean there, but please

00:50:37.680 --> 00:50:39.280
<v Speaker 0>feel free to just follow-up with a little

00:50:39.280 --> 00:50:40.480
<v Speaker 0>bit more detail.

00:50:42.480 --> 00:50:44.560
<v Speaker 0>So when we talk about downsampling with time

00:50:44.560 --> 00:50:47.760
<v Speaker 0>series, let's use, like, a real time monitoring

00:50:47.760 --> 00:50:50.775
<v Speaker 0>as an example. Like, there's something, you know,

00:50:51.335 --> 00:50:52.695
<v Speaker 0>if you're collecting

00:50:53.255 --> 00:50:54.295
<v Speaker 0>data at

00:50:54.535 --> 00:50:55.895
<v Speaker 0>what what would you say is standard for

00:50:55.895 --> 00:50:58.615
<v Speaker 0>a Timescale customer? Ten seconds, thirty seconds, one

00:50:58.615 --> 00:50:59.895
<v Speaker 0>minute? What what do you see in the

00:50:59.895 --> 00:51:02.535
<v Speaker 0>field? Honestly, it really depends on, like, the

00:51:02.535 --> 00:51:05.740
<v Speaker 1>use case. So for example, if you're monitoring

00:51:05.740 --> 00:51:08.299
<v Speaker 1>machines or say, for example, it's a classic,

00:51:08.299 --> 00:51:11.020
<v Speaker 1>like, DevOps use case where you're monitoring

00:51:11.579 --> 00:51:13.740
<v Speaker 1>a bunch of servers that you have, then

00:51:13.740 --> 00:51:15.660
<v Speaker 1>it's probably gonna be on the second or

00:51:15.660 --> 00:51:16.700
<v Speaker 1>millisecond basis.

00:51:18.215 --> 00:51:19.415
<v Speaker 1>But if you're

00:51:19.735 --> 00:51:21.815
<v Speaker 1>another use case is like

00:51:22.135 --> 00:51:24.215
<v Speaker 1>monitoring like weather or

00:51:25.175 --> 00:51:26.295
<v Speaker 1>air quality,

00:51:26.375 --> 00:51:28.135
<v Speaker 1>then you're probably gonna be looking at it

00:51:28.135 --> 00:51:30.055
<v Speaker 1>on like a minute basis because, you know,

00:51:30.055 --> 00:51:32.910
<v Speaker 1>the weather doesn't really change that much within

00:51:32.910 --> 00:51:34.990
<v Speaker 1>a second or so. So it really just

00:51:34.990 --> 00:51:36.830
<v Speaker 1>depends on on your use case.

00:51:37.630 --> 00:51:40.109
<v Speaker 1>But, yeah, I think along the the the

00:51:40.109 --> 00:51:40.830
<v Speaker 1>the

00:51:41.710 --> 00:51:43.630
<v Speaker 1>lines of like a second or a minute

00:51:43.630 --> 00:51:44.670
<v Speaker 1>is is usually

00:51:45.150 --> 00:51:47.645
<v Speaker 1>to what people use. And then for machines,

00:51:47.645 --> 00:51:49.885
<v Speaker 1>if you're getting device data, it'll be at

00:51:49.885 --> 00:51:52.685
<v Speaker 1>a much higher fidelity than that, like, millisecond.

00:51:53.244 --> 00:51:55.725
<v Speaker 0>Is fidelity the timescale term? I would probably

00:51:55.725 --> 00:51:58.045
<v Speaker 0>call it resolution. Are those interchangeable,

00:51:58.045 --> 00:52:00.445
<v Speaker 0>or is there any different characteristics to of

00:52:00.445 --> 00:52:00.925
<v Speaker 0>timescales?

00:52:01.720 --> 00:52:03.640
<v Speaker 1>Oh, no. It's just it's just my

00:52:04.120 --> 00:52:06.520
<v Speaker 1>what that I use. Yeah. There's no standard

00:52:06.520 --> 00:52:07.240
<v Speaker 1>definition.

00:52:08.040 --> 00:52:10.360
<v Speaker 1>We would probably use the word granularity.

00:52:10.360 --> 00:52:13.000
<v Speaker 1>Just like how granular you want your data.

00:52:13.800 --> 00:52:16.360
<v Speaker 1>You know, if you're gonna downsample that makes

00:52:16.360 --> 00:52:16.520
<v Speaker 1>it

00:52:17.195 --> 00:52:18.235
<v Speaker 1>less

00:52:18.235 --> 00:52:19.195
<v Speaker 1>granular,

00:52:19.195 --> 00:52:20.795
<v Speaker 1>whereas if you don't, you're gonna have the

00:52:20.795 --> 00:52:22.955
<v Speaker 1>the little grains. I in another presentation, I

00:52:22.955 --> 00:52:24.395
<v Speaker 1>have this thing where you have like mountains

00:52:24.395 --> 00:52:26.715
<v Speaker 1>of sand. And then when you downsample it,

00:52:26.715 --> 00:52:28.475
<v Speaker 1>it becomes like a big rock or like

00:52:28.475 --> 00:52:31.390
<v Speaker 1>chunked together. So, yeah, that's something a good

00:52:31.390 --> 00:52:33.470
<v Speaker 1>way to visualize it. So maybe we can

00:52:33.470 --> 00:52:34.750
<v Speaker 0>try and explain,

00:52:35.230 --> 00:52:37.310
<v Speaker 0>you know, going back to Vignesh's question about

00:52:37.310 --> 00:52:40.110
<v Speaker 0>data archival. I mean, data archival probably isn't

00:52:40.110 --> 00:52:42.270
<v Speaker 0>something that most people would do with Timescale

00:52:42.270 --> 00:52:44.430
<v Speaker 0>data, but we we would downsample it and

00:52:44.430 --> 00:52:46.350
<v Speaker 0>reduce that resolution or granularity

00:52:47.765 --> 00:52:49.845
<v Speaker 0>over time multiple times. So maybe we could

00:52:49.845 --> 00:52:51.925
<v Speaker 0>kinda give a traditional workflow there.

00:52:52.485 --> 00:52:54.165
<v Speaker 1>Exactly. What I can do is I actually

00:52:54.165 --> 00:52:55.685
<v Speaker 1>have a slide on this if I can

00:52:55.685 --> 00:52:57.205
<v Speaker 1>share my screen. Oh, yeah. Go for it.

00:52:57.205 --> 00:52:58.645
<v Speaker 0>Yeah. Let's do it. Yeah.

00:53:01.980 --> 00:53:03.660
<v Speaker 1>Okay. Give me a second.

00:53:08.620 --> 00:53:09.740
<v Speaker 0>There you go. Okay.

00:53:10.220 --> 00:53:10.860
<v Speaker 1>So

00:53:11.980 --> 00:53:13.900
<v Speaker 1>yeah. Basically, like, just to talk you through

00:53:13.900 --> 00:53:15.100
<v Speaker 1>with the with the visual here.

00:53:16.194 --> 00:53:18.194
<v Speaker 1>I'm not sure why this is taking so

00:53:18.194 --> 00:53:20.275
<v Speaker 1>long to go into presentation mode.

00:53:20.595 --> 00:53:23.155
<v Speaker 1>Everything seems to be going wrong. Going live.

00:53:23.155 --> 00:53:24.755
<v Speaker 1>Yeah. It's like Murphy's Law.

00:53:25.954 --> 00:53:28.915
<v Speaker 1>K. Well, let's wait and see. Otherwise, I'll

00:53:28.915 --> 00:53:29.555
<v Speaker 1>just

00:53:30.220 --> 00:53:31.180
<v Speaker 1>exit.

00:53:33.340 --> 00:53:35.260
<v Speaker 1>Okay. Whatever. Let me just exit.

00:53:35.740 --> 00:53:37.740
<v Speaker 1>But I think maybe I can

00:53:38.060 --> 00:53:39.020
<v Speaker 1>zoom in

00:53:39.580 --> 00:53:41.420
<v Speaker 1>a little bit. No. Okay.

00:53:43.194 --> 00:53:45.275
<v Speaker 1>Zoom out, it actually works. Okay. But in

00:53:45.275 --> 00:53:46.075
<v Speaker 1>this picture,

00:53:46.875 --> 00:53:48.714
<v Speaker 1>you can see basically, like, the bottom part

00:53:48.714 --> 00:53:51.115
<v Speaker 1>of it is the raw data. And so

00:53:51.115 --> 00:53:52.555
<v Speaker 1>raw data, you have a lot of these

00:53:52.555 --> 00:53:54.234
<v Speaker 1>little data points coming in.

00:53:54.714 --> 00:53:56.875
<v Speaker 1>And then what you would wanna do is

00:53:57.339 --> 00:53:59.339
<v Speaker 1>you'd wanna use your raw data for certain

00:53:59.339 --> 00:54:01.180
<v Speaker 1>things. You'd only keep it around for a

00:54:01.180 --> 00:54:02.540
<v Speaker 1>a certain amount of time.

00:54:02.940 --> 00:54:05.980
<v Speaker 1>And then for kind of historical analysis so

00:54:05.980 --> 00:54:07.900
<v Speaker 1>say for example, you have like a server

00:54:08.060 --> 00:54:10.619
<v Speaker 1>and this server, you're monitoring like the CPU

00:54:10.619 --> 00:54:11.660
<v Speaker 1>usage on the server.

00:54:12.315 --> 00:54:12.875
<v Speaker 1>And

00:54:13.355 --> 00:54:15.275
<v Speaker 1>you'd wanna keep that raw data around for,

00:54:15.275 --> 00:54:17.915
<v Speaker 1>like, real time monitoring purposes. But then after,

00:54:17.915 --> 00:54:19.515
<v Speaker 1>like, a day or so or after, like,

00:54:19.515 --> 00:54:21.835
<v Speaker 1>a week or so, you'd no longer need

00:54:21.835 --> 00:54:24.234
<v Speaker 1>to have, you know, millisecond level data about,

00:54:24.234 --> 00:54:25.515
<v Speaker 1>like, what was going on on the server.

00:54:25.920 --> 00:54:27.760
<v Speaker 1>So then what you would then do is

00:54:27.760 --> 00:54:28.640
<v Speaker 1>use

00:54:28.880 --> 00:54:31.040
<v Speaker 1>you you basically aggregate that data

00:54:31.359 --> 00:54:33.760
<v Speaker 1>to say, okay. Instead of keeping

00:54:34.240 --> 00:54:36.800
<v Speaker 1>everything on a millisecond level, just give me

00:54:36.800 --> 00:54:39.585
<v Speaker 1>things in five minute intervals. So showing me,

00:54:39.585 --> 00:54:42.065
<v Speaker 1>like, every five minutes how my different metrics

00:54:42.065 --> 00:54:43.665
<v Speaker 1>that I'm monitoring are changing.

00:54:43.905 --> 00:54:45.985
<v Speaker 1>And so you'd use a feature called continuous

00:54:45.985 --> 00:54:47.825
<v Speaker 1>aggregates for this that Timescale has. So this

00:54:47.825 --> 00:54:49.745
<v Speaker 1>basically takes the raw data and says, okay,

00:54:49.905 --> 00:54:51.985
<v Speaker 1>we're gonna just calculate the five minute average

00:54:51.985 --> 00:54:53.585
<v Speaker 1>in our case. But you could use any

00:54:54.320 --> 00:54:56.080
<v Speaker 1>function you want. So you instead of taking

00:54:56.080 --> 00:54:57.920
<v Speaker 1>the average over five minutes, you can take

00:54:57.920 --> 00:54:58.880
<v Speaker 1>the maximum.

00:54:58.960 --> 00:55:00.880
<v Speaker 1>You can take some sort of calculation,

00:55:01.280 --> 00:55:01.840
<v Speaker 1>whatever

00:55:02.960 --> 00:55:05.840
<v Speaker 1>method or, like, function you wanna aggregate on,

00:55:05.840 --> 00:55:08.155
<v Speaker 1>you can you can do that. And then

00:55:08.155 --> 00:55:10.635
<v Speaker 1>what often what people do is keep the

00:55:10.635 --> 00:55:12.234
<v Speaker 1>aggregated data around,

00:55:12.795 --> 00:55:14.954
<v Speaker 1>but discard the actual raw data. So in

00:55:14.954 --> 00:55:16.555
<v Speaker 1>this case, you can see the trash can

00:55:16.555 --> 00:55:18.875
<v Speaker 1>with the with the yellow is basically saying,

00:55:18.875 --> 00:55:20.395
<v Speaker 1>After a certain amount of time, we're actually

00:55:20.395 --> 00:55:22.220
<v Speaker 1>gonna get rid of this raw data, but

00:55:22.220 --> 00:55:24.859
<v Speaker 1>the aggregated data still stays around.

00:55:25.020 --> 00:55:27.020
<v Speaker 1>And then you can use that for reference

00:55:27.020 --> 00:55:29.020
<v Speaker 1>or but it's you can see it's at

00:55:29.020 --> 00:55:29.820
<v Speaker 1>a higher

00:55:31.740 --> 00:55:33.500
<v Speaker 1>it's at a lower fidelity

00:55:34.460 --> 00:55:36.220
<v Speaker 1>or lower resolution

00:55:36.220 --> 00:55:38.515
<v Speaker 1>as as you would say, David, whereas this

00:55:38.515 --> 00:55:40.115
<v Speaker 1>one is at a higher resolution because it's

00:55:40.115 --> 00:55:41.315
<v Speaker 1>just more data points.

00:55:41.875 --> 00:55:43.475
<v Speaker 1>And then on the on the topic of

00:55:43.475 --> 00:55:46.195
<v Speaker 1>data archival, you can then take this to

00:55:46.195 --> 00:55:47.955
<v Speaker 1>say if we, like, go further

00:55:48.995 --> 00:55:51.560
<v Speaker 1>move further in time, you can actually use

00:55:51.560 --> 00:55:52.360
<v Speaker 1>your own

00:55:53.000 --> 00:55:54.920
<v Speaker 1>data storage so that you can put stuff

00:55:54.920 --> 00:55:57.000
<v Speaker 1>in like cold storage and stuff like that.

00:55:58.200 --> 00:56:00.280
<v Speaker 1>It just depends on your your workflow and

00:56:00.280 --> 00:56:01.800
<v Speaker 1>like what kind of data pipeline you wanna

00:56:01.800 --> 00:56:04.105
<v Speaker 1>set up. But I know they are

00:56:04.424 --> 00:56:06.105
<v Speaker 1>they are capabilities

00:56:06.105 --> 00:56:07.545
<v Speaker 1>such that, you know, every

00:56:07.704 --> 00:56:09.785
<v Speaker 1>you can set a procedure

00:56:09.785 --> 00:56:10.505
<v Speaker 1>to run,

00:56:10.825 --> 00:56:12.345
<v Speaker 1>I don't know, every six months or so

00:56:12.345 --> 00:56:13.785
<v Speaker 1>or something like that that says, okay. Data

00:56:13.785 --> 00:56:15.464
<v Speaker 1>that's older than a certain amount of time,

00:56:15.464 --> 00:56:17.200
<v Speaker 1>put it in my cold storage where I

00:56:17.200 --> 00:56:18.320
<v Speaker 1>don't actually need to keep it on the

00:56:18.320 --> 00:56:19.440
<v Speaker 1>database anymore.

00:56:20.960 --> 00:56:23.040
<v Speaker 1>And, you know, have that cycle such that

00:56:23.040 --> 00:56:24.000
<v Speaker 1>it goes from

00:56:24.400 --> 00:56:27.440
<v Speaker 1>raw data to downsample data at the aggregate

00:56:27.440 --> 00:56:28.080
<v Speaker 1>level.

00:56:28.320 --> 00:56:30.345
<v Speaker 1>And then after a certain amount of time,

00:56:30.345 --> 00:56:32.985
<v Speaker 1>discarding even the downsample data if you want,

00:56:32.985 --> 00:56:34.585
<v Speaker 1>that's some option as well.

00:56:35.945 --> 00:56:39.945
<v Speaker 0>Awesome. Yeah. Yeah. Great explanation there. So while

00:56:39.945 --> 00:56:41.705
<v Speaker 0>you were kind of chatting through that, I

00:56:41.705 --> 00:56:42.985
<v Speaker 0>ran the numbers on our file.

00:56:43.779 --> 00:56:46.180
<v Speaker 0>So we have a transfer rate of around

00:56:46.180 --> 00:56:47.940
<v Speaker 0>15,000 rows per second,

00:56:48.900 --> 00:56:51.299
<v Speaker 0>which is gonna take roughly twelve minutes for

00:56:51.299 --> 00:56:53.140
<v Speaker 0>the file that we're on, and we're currently

00:56:53.140 --> 00:56:55.460
<v Speaker 0>just at eleven minutes. So we're almost there.

00:56:55.865 --> 00:56:57.944
<v Speaker 1>Almost there. Okay. Well, hopefully, the the rest

00:56:57.944 --> 00:56:59.865
<v Speaker 1>of it can be quick. But it's also

00:56:59.865 --> 00:57:02.105
<v Speaker 0>assuming that my very crude math is is

00:57:02.105 --> 00:57:04.505
<v Speaker 0>correct. But I think I think we'll be

00:57:04.505 --> 00:57:06.505
<v Speaker 0>close for within a minute, probably.

00:57:07.065 --> 00:57:07.625
<v Speaker 1>Awesome.

00:57:09.500 --> 00:57:11.980
<v Speaker 0>So I guess, let's assume I'm

00:57:13.180 --> 00:57:15.820
<v Speaker 0>even if I'm not right that now thereabouts,

00:57:16.700 --> 00:57:18.300
<v Speaker 0>we're see what we're gonna be doing with

00:57:18.300 --> 00:57:19.180
<v Speaker 0>this data.

00:57:20.060 --> 00:57:21.965
<v Speaker 0>So we're just going to do a very

00:57:21.965 --> 00:57:24.445
<v Speaker 0>simple select from our rates table, limited to

00:57:24.445 --> 00:57:26.685
<v Speaker 0>five. I guess we're just expecting to see

00:57:26.765 --> 00:57:29.165
<v Speaker 0>a few a few rows come back. Like,

00:57:29.165 --> 00:57:30.685
<v Speaker 0>that's Yeah. That's just to check that the

00:57:30.685 --> 00:57:32.845
<v Speaker 1>import worked similar to what you were doing

00:57:32.845 --> 00:57:33.725
<v Speaker 1>earlier with the count.

00:57:34.410 --> 00:57:37.290
<v Speaker 0>Okay. We'll see some data like so.

00:57:37.770 --> 00:57:38.970
<v Speaker 0>And then

00:57:39.290 --> 00:57:41.609
<v Speaker 0>we're gonna start doing some analysis in this

00:57:41.609 --> 00:57:42.250
<v Speaker 0>data.

00:57:43.049 --> 00:57:44.890
<v Speaker 0>So this query wants to take a look

00:57:44.890 --> 00:57:47.690
<v Speaker 0>at how many rates took place on each

00:57:47.690 --> 00:57:49.770
<v Speaker 0>day for the dataset that we have.

00:57:52.945 --> 00:57:55.345
<v Speaker 0>So this is just an a date trunk

00:57:55.665 --> 00:57:58.625
<v Speaker 0>as day with account and then grouping by.

00:57:58.625 --> 00:57:59.825
<v Speaker 0>So pretty

00:57:59.825 --> 00:58:01.185
<v Speaker 0>standard relational

00:58:01.425 --> 00:58:04.065
<v Speaker 0>query or even a time series query, I

00:58:04.065 --> 00:58:05.505
<v Speaker 0>guess. Yeah. Exactly.

00:58:05.870 --> 00:58:07.630
<v Speaker 1>Yeah. It's just about, you know, for a

00:58:07.630 --> 00:58:09.550
<v Speaker 1>certain day, you wanna look at what happened.

00:58:10.510 --> 00:58:12.750
<v Speaker 1>So that's just an intro query.

00:58:14.510 --> 00:58:16.430
<v Speaker 0>Moment of truth time. We're at twelve minutes.

00:58:24.724 --> 00:58:26.885
<v Speaker 0>I don't wanna see a 12:30.

00:58:27.525 --> 00:58:28.645
<v Speaker 0>Wanted to finish.

00:58:29.204 --> 00:58:30.565
<v Speaker 1>Same. Yeah. Same. Yeah.

00:58:33.125 --> 00:58:35.285
<v Speaker 0>In fact, we can see here that the

00:58:34.740 --> 00:58:38.500
<v Speaker 0>total number of rows inserted were about 1,000,000,

00:58:38.740 --> 00:58:41.060
<v Speaker 0>and my account that I did was

00:58:43.940 --> 00:58:45.620
<v Speaker 0>1.09.

00:58:46.100 --> 00:58:46.580
<v Speaker 0>Yeah.

00:58:48.714 --> 00:58:50.795
<v Speaker 0>Yeah. I never saw 12 start ace in

00:58:50.795 --> 00:58:52.395
<v Speaker 0>my mouth. It was good. I'm happy.

00:58:52.635 --> 00:58:55.195
<v Speaker 1>Awesome. Okay. So that worked. So we know

00:58:55.195 --> 00:58:56.795
<v Speaker 1>how. For those of you who are at

00:58:56.795 --> 00:58:59.435
<v Speaker 1>home, definitely use the parallel copy if you

00:59:00.410 --> 00:59:01.770
<v Speaker 1>are short on time or doing a live

00:59:01.770 --> 00:59:04.250
<v Speaker 1>stream like we are. Well, yeah. There's a

00:59:04.250 --> 00:59:06.010
<v Speaker 0>good point. Right? Because if we'd stuck with

00:59:06.010 --> 00:59:08.730
<v Speaker 0>a single threaded copy, we run four workers

00:59:08.730 --> 00:59:11.290
<v Speaker 0>there. So that would have taken forty eight

00:59:11.290 --> 00:59:11.530
<v Speaker 0>minutes.

00:59:12.265 --> 00:59:14.185
<v Speaker 1>Just crazy. I think maybe I just have

00:59:14.185 --> 00:59:15.945
<v Speaker 1>a really fast computer because what I usually

00:59:15.945 --> 00:59:17.545
<v Speaker 1>do when I insert this is I

00:59:18.585 --> 00:59:20.265
<v Speaker 1>just use like p g admin and it

00:59:20.265 --> 00:59:21.625
<v Speaker 1>inserts and then I just go make a

00:59:21.625 --> 00:59:24.025
<v Speaker 1>cup of tea and it's done. So I

00:59:24.025 --> 00:59:25.385
<v Speaker 1>don't know. Maybe it's just like the the

00:59:25.385 --> 00:59:27.170
<v Speaker 1>Mac that I'm using. But I wonder if

00:59:27.170 --> 00:59:29.970
<v Speaker 0>PG and then does the parallelism

00:59:29.970 --> 00:59:31.810
<v Speaker 0>too for you. Who knows? That might be

00:59:31.810 --> 00:59:33.570
<v Speaker 1>something to investigate. I'm not sure.

00:59:33.970 --> 00:59:35.810
<v Speaker 0>Alright. Now now I'm getting a bit more

00:59:35.810 --> 00:59:37.010
<v Speaker 0>confident. So

00:59:40.895 --> 00:59:42.494
<v Speaker 0>yeah. That's definitely gonna give me a big

00:59:42.494 --> 00:59:43.375
<v Speaker 0>number. Okay.

00:59:45.855 --> 00:59:48.974
<v Speaker 0>Any second. So let's grab our limit.

00:59:48.974 --> 00:59:50.495
<v Speaker 0>That should be nice and quick.

00:59:51.055 --> 00:59:52.734
<v Speaker 0>Yeah. So this is our check. Make sure

00:59:52.734 --> 00:59:53.535
<v Speaker 0>we got the thing.

00:59:54.920 --> 00:59:56.360
<v Speaker 0>Regretting that count now.

00:59:56.920 --> 00:59:57.720
<v Speaker 0>Yeah.

00:59:58.280 --> 01:00:00.280
<v Speaker 0>There we go. Well, this is also because

01:00:00.280 --> 01:00:02.280
<v Speaker 1>I think we're using, like, the very smallest

01:00:02.280 --> 01:00:03.320
<v Speaker 1>instance. So

01:00:04.920 --> 01:00:07.320
<v Speaker 0>Yeah. We did pick the smallest instance. But

01:00:07.320 --> 01:00:09.755
<v Speaker 1>even then, it should be enough to do

01:00:09.755 --> 01:00:12.715
<v Speaker 1>this tutorial. So We'll be fine. Something to

01:00:12.715 --> 01:00:13.995
<v Speaker 1>talk to my team about.

01:00:15.275 --> 01:00:18.155
<v Speaker 0>Alright. So let's try our first time series

01:00:18.155 --> 01:00:19.435
<v Speaker 0>query. So this is

01:00:20.155 --> 01:00:23.195
<v Speaker 0>gripping assistant account on a window. The window

01:00:23.195 --> 01:00:25.700
<v Speaker 0>is per day. Right? Yeah. So this is

01:00:25.700 --> 01:00:27.460
<v Speaker 1>just a query that, you know, to give

01:00:27.460 --> 01:00:29.460
<v Speaker 1>people a taste of what sorts of questions

01:00:29.619 --> 01:00:31.460
<v Speaker 1>you might ask when you're doing

01:00:31.700 --> 01:00:34.900
<v Speaker 1>time series analysis or time series based analysis

01:00:34.900 --> 01:00:36.900
<v Speaker 1>on something. So the way the tutorial is

01:00:36.900 --> 01:00:38.660
<v Speaker 1>broken up is the first part is historical

01:00:38.660 --> 01:00:39.220
<v Speaker 1>analysis,

01:00:39.555 --> 01:00:41.315
<v Speaker 1>and the second part is more like real

01:00:41.315 --> 01:00:42.275
<v Speaker 1>time monitoring.

01:00:45.155 --> 01:00:47.075
<v Speaker 1>Okay. So this is what you've

01:00:47.635 --> 01:00:49.555
<v Speaker 0>So I'm gonna go slightly

01:00:49.555 --> 01:00:51.955
<v Speaker 0>off script now. Go for it. Curious.

01:00:52.675 --> 01:00:54.675
<v Speaker 0>So we've done a select

01:00:55.100 --> 01:00:56.220
<v Speaker 0>as the

01:00:56.300 --> 01:00:57.100
<v Speaker 0>current

01:00:57.340 --> 01:00:57.980
<v Speaker 0>group.

01:00:58.300 --> 01:01:00.380
<v Speaker 0>Now Yeah. Does does that mean I could

01:01:00.380 --> 01:01:01.260
<v Speaker 0>do

01:01:01.740 --> 01:01:02.700
<v Speaker 0>hour

01:01:04.940 --> 01:01:06.860
<v Speaker 0>as hour? And let's limit this so it's

01:01:06.860 --> 01:01:09.660
<v Speaker 0>not gonna be too long. So from where

01:01:10.715 --> 01:01:13.595
<v Speaker 0>pickup date time is greater than or equal

01:01:13.595 --> 01:01:14.155
<v Speaker 0>to

01:01:17.355 --> 01:01:17.995
<v Speaker 0>and

01:01:18.155 --> 01:01:19.115
<v Speaker 0>pickup.

01:01:20.635 --> 01:01:21.995
<v Speaker 1>I it can just be one.

01:01:23.490 --> 01:01:25.090
<v Speaker 1>Okay. Yeah. Less than or equal to yeah.

01:01:25.090 --> 01:01:26.290
<v Speaker 1>That's fine. That's fine. Let's just do a

01:01:26.290 --> 01:01:28.050
<v Speaker 0>year. Right? So I want Aniston as

01:01:28.450 --> 01:01:31.170
<v Speaker 0>oh, no. So the thing about this dataset

01:01:31.170 --> 01:01:31.970
<v Speaker 1>is that

01:01:32.610 --> 01:01:35.810
<v Speaker 1>it's data from, I think, 2017

01:01:35.810 --> 01:01:36.210
<v Speaker 1>or so.

01:01:37.645 --> 01:01:39.565
<v Speaker 1>So we'll just have to use that that

01:01:39.565 --> 01:01:41.405
<v Speaker 1>time. Well, I I can just give you

01:01:41.565 --> 01:01:42.525
<v Speaker 1>just put in,

01:01:43.165 --> 01:01:46.045
<v Speaker 1>yeah, January 1 and, like, January 8.

01:01:46.525 --> 01:01:48.125
<v Speaker 1>Because the thirty one days is, like, the

01:01:48.125 --> 01:01:49.885
<v Speaker 1>full month of the rides.

01:01:50.349 --> 01:01:50.910
<v Speaker 1>So

01:01:51.470 --> 01:01:53.069
<v Speaker 0>And let's just do three days. Three days.

01:01:53.069 --> 01:01:55.310
<v Speaker 1>Yeah. Three days. And five hour. Because that's

01:01:55.310 --> 01:01:56.670
<v Speaker 0>that's to me would be

01:01:57.470 --> 01:01:59.390
<v Speaker 0>an another standard time to do. You know,

01:01:59.390 --> 01:02:01.470
<v Speaker 0>when I have this kind of

01:02:01.710 --> 01:02:03.545
<v Speaker 0>an aggregated data, I wanna be able to

01:02:03.545 --> 01:02:04.984
<v Speaker 0>see how many rides are were in a

01:02:04.984 --> 01:02:06.265
<v Speaker 0>day or how many sales I had in

01:02:06.265 --> 01:02:08.025
<v Speaker 0>a day. Then I may want I may

01:02:08.025 --> 01:02:09.944
<v Speaker 0>want to break that down by the hour

01:02:09.944 --> 01:02:11.224
<v Speaker 0>and say, okay. Well, which hours am I

01:02:11.224 --> 01:02:12.185
<v Speaker 0>selling the most?

01:02:13.785 --> 01:02:15.625
<v Speaker 0>So I have no idea whether my date

01:02:15.625 --> 01:02:17.065
<v Speaker 0>trunk hour is gonna work, but I'm gonna

01:02:17.065 --> 01:02:19.650
<v Speaker 0>assume okay. We still got the account from

01:02:19.650 --> 01:02:20.450
<v Speaker 0>rides.

01:02:20.530 --> 01:02:22.369
<v Speaker 0>Now that that the three day when three

01:02:22.369 --> 01:02:24.770
<v Speaker 0>day period and an hourly window. Oh, I

01:02:24.770 --> 01:02:25.490
<v Speaker 0>broke it.

01:02:26.770 --> 01:02:28.369
<v Speaker 0>So what did I get wrong here?

01:02:31.925 --> 01:02:34.005
<v Speaker 0>I just made up that where syntax.

01:02:34.645 --> 01:02:36.325
<v Speaker 0>Is that wrong?

01:02:36.725 --> 01:02:37.685
<v Speaker 0>Do I need the time?

01:02:42.260 --> 01:02:43.700
<v Speaker 1>It shouldn't really

01:02:44.099 --> 01:02:45.300
<v Speaker 1>need the time.

01:02:45.859 --> 01:02:47.220
<v Speaker 1>I think maybe

01:02:47.619 --> 01:02:48.980
<v Speaker 1>the double quotes

01:02:49.380 --> 01:02:50.819
<v Speaker 0>That what it is. Okay. Might be the

01:02:50.819 --> 01:02:51.460
<v Speaker 1>issue.

01:02:52.260 --> 01:02:53.540
<v Speaker 1>I have a

01:02:54.455 --> 01:02:56.295
<v Speaker 1>reference query that I can check out as

01:02:56.295 --> 01:02:57.895
<v Speaker 1>well. Alright. This is what I get for

01:02:57.895 --> 01:03:00.055
<v Speaker 0>going off script and It's all good.

01:03:01.255 --> 01:03:02.935
<v Speaker 0>But if I went to the Yeah. It's

01:03:02.935 --> 01:03:06.055
<v Speaker 1>definitely the the it's use single quotes for

01:03:06.055 --> 01:03:08.215
<v Speaker 1>the date. Okay. And

01:03:08.870 --> 01:03:11.510
<v Speaker 1>it's the month first before the day. So,

01:03:11.510 --> 01:03:12.790
<v Speaker 1>again, American

01:03:12.870 --> 01:03:13.670
<v Speaker 1>data

01:03:14.390 --> 01:03:16.390
<v Speaker 1>standards, unfortunately, for

01:03:17.590 --> 01:03:19.350
<v Speaker 1>you know, I'm from South Africa, I'm still

01:03:19.350 --> 01:03:21.670
<v Speaker 1>not used to people in America, like, with

01:03:21.670 --> 01:03:22.470
<v Speaker 1>their own

01:03:23.115 --> 01:03:25.915
<v Speaker 1>ways of of notating things. So

01:03:26.395 --> 01:03:27.035
<v Speaker 1>yeah.

01:03:29.195 --> 01:03:30.875
<v Speaker 1>So it'll be o one can't be right.

01:03:30.875 --> 01:03:33.675
<v Speaker 0>Surely, this is ISO standard though. Right? This

01:03:33.675 --> 01:03:35.275
<v Speaker 0>is ISO eight six zero one. So the

01:03:35.355 --> 01:03:37.195
<v Speaker 0>I I just can't see how

01:03:38.109 --> 01:03:39.950
<v Speaker 0>that would be right. It has to be

01:03:39.950 --> 01:03:40.750
<v Speaker 0>a three here.

01:03:41.310 --> 01:03:43.310
<v Speaker 1>Yeah. So three there and then

01:03:43.630 --> 01:03:45.070
<v Speaker 1>yeah. That's correct. Yeah.

01:03:45.790 --> 01:03:47.550
<v Speaker 1>Yeah. So that would There we go. So

01:03:47.550 --> 01:03:48.510
<v Speaker 0>we can see

01:03:49.470 --> 01:03:51.630
<v Speaker 0>clearly this is people leaving clubs.

01:03:52.845 --> 01:03:55.645
<v Speaker 0>Yeah. On New Year's Eve, twenty five thousand,

01:03:55.645 --> 01:03:56.685
<v Speaker 0>thirty thousand

01:03:56.685 --> 01:03:59.325
<v Speaker 0>taxis. It kinda dies down at 5AM,

01:03:59.325 --> 01:04:01.405
<v Speaker 0>and then normality seems to kick in eleven

01:04:01.405 --> 01:04:02.685
<v Speaker 0>the next day or at least leave the

01:04:02.685 --> 01:04:03.325
<v Speaker 0>larger numbers.

01:04:04.420 --> 01:04:05.220
<v Speaker 0>Awesome.

01:04:05.220 --> 01:04:05.940
<v Speaker 0>Nice.

01:04:06.020 --> 01:04:06.740
<v Speaker 0>Cool.

01:04:08.260 --> 01:04:09.060
<v Speaker 0>So

01:04:09.140 --> 01:04:11.220
<v Speaker 0>thank you Stack Overflow once again.

01:04:14.100 --> 01:04:16.180
<v Speaker 0>So now the tutorial is walking us through

01:04:16.180 --> 01:04:18.635
<v Speaker 0>and it's asking us, yeah, what was the

01:04:18.635 --> 01:04:21.035
<v Speaker 0>average fare then for these passengers?

01:04:22.315 --> 01:04:24.395
<v Speaker 0>So this is a select

01:04:25.915 --> 01:04:26.955
<v Speaker 0>by day

01:04:27.755 --> 01:04:30.635
<v Speaker 0>run an average function on the fare amount

01:04:31.690 --> 01:04:34.170
<v Speaker 0>where passenger count was one.

01:04:34.810 --> 01:04:36.170
<v Speaker 0>Oh, okay. So you have quite a lot

01:04:36.170 --> 01:04:37.930
<v Speaker 0>of data in the sample dataset then. But

01:04:37.930 --> 01:04:39.690
<v Speaker 0>even though so many passengers were in each

01:04:39.690 --> 01:04:41.930
<v Speaker 0>of the Yeah. So it's actually the reason

01:04:41.930 --> 01:04:43.530
<v Speaker 1>why we selected this. So just a good

01:04:43.530 --> 01:04:45.995
<v Speaker 1>example of, the kind of things that you'd

01:04:45.995 --> 01:04:47.675
<v Speaker 1>wanna track. Like, as much as you also

01:04:47.755 --> 01:04:50.075
<v Speaker 1>you wanna know, like, when the rides took

01:04:50.075 --> 01:04:52.475
<v Speaker 1>place and how many, you also wanna know

01:04:52.475 --> 01:04:54.635
<v Speaker 1>all sorts of, like, metadata associated with. So

01:04:54.635 --> 01:04:57.035
<v Speaker 1>it's a good example of, like, why where

01:04:57.035 --> 01:04:57.835
<v Speaker 1>you would need

01:04:58.390 --> 01:05:01.510
<v Speaker 1>both time series and metadata together to ask,

01:05:01.510 --> 01:05:03.510
<v Speaker 1>like, real world questions that that people generally

01:05:03.510 --> 01:05:04.390
<v Speaker 1>ask about.

01:05:06.550 --> 01:05:08.470
<v Speaker 0>Okay. So we can see that the average

01:05:08.470 --> 01:05:10.710
<v Speaker 0>fare for a

01:05:10.164 --> 01:05:12.484
<v Speaker 0>New York City cab with one person is

01:05:12.484 --> 01:05:15.125
<v Speaker 0>around 11 to $12.

01:05:17.845 --> 01:05:19.525
<v Speaker 1>Per per day. Yeah. So

01:05:22.180 --> 01:05:23.940
<v Speaker 0>Oh, that's why I changed the number for

01:05:23.940 --> 01:05:26.180
<v Speaker 0>the sake of it there. Right. Let's go.

01:05:27.940 --> 01:05:28.900
<v Speaker 0>So

01:05:29.060 --> 01:05:30.980
<v Speaker 0>now we can see our results. We can

01:05:30.980 --> 01:05:31.940
<v Speaker 0>also do

01:05:32.820 --> 01:05:34.020
<v Speaker 0>rate types.

01:05:34.020 --> 01:05:36.414
<v Speaker 0>Let's see what this looks like. This one,

01:05:36.414 --> 01:05:38.494
<v Speaker 1>if you just scroll down a bit on

01:05:38.494 --> 01:05:40.494
<v Speaker 1>the tutorial, there's like a

01:05:40.895 --> 01:05:42.895
<v Speaker 1>enriched version of that that query

01:05:43.375 --> 01:05:45.615
<v Speaker 1>that is actually the next one.

01:05:46.414 --> 01:05:47.775
<v Speaker 1>Yeah. So if you just do that one,

01:05:47.775 --> 01:05:49.694
<v Speaker 1>that one actually might be better. It it

01:05:49.694 --> 01:05:52.230
<v Speaker 1>calculates the same thing, but

01:05:52.470 --> 01:05:53.910
<v Speaker 1>gives us a little bit more to talk

01:05:53.910 --> 01:05:54.390
<v Speaker 1>about.

01:05:55.990 --> 01:05:57.510
<v Speaker 0>Okay. So this is then

01:05:58.150 --> 01:06:00.390
<v Speaker 0>select from the rates description. So one of

01:06:00.390 --> 01:06:03.030
<v Speaker 0>our metadata non time series tables. Yeah.

01:06:04.914 --> 01:06:07.395
<v Speaker 0>Count vendor as number of trips.

01:06:07.714 --> 01:06:09.875
<v Speaker 0>What's the rank function? I'm not familiar with

01:06:09.875 --> 01:06:12.994
<v Speaker 0>that one. So that's just to rank the

01:06:12.994 --> 01:06:13.795
<v Speaker 1>output.

01:06:13.875 --> 01:06:15.474
<v Speaker 1>So we wanna have

01:06:16.770 --> 01:06:19.490
<v Speaker 1>we're ranking the output by the number of

01:06:19.490 --> 01:06:21.170
<v Speaker 1>trips that took place.

01:06:22.690 --> 01:06:24.130
<v Speaker 1>There might be a lot of advance for

01:06:24.130 --> 01:06:26.370
<v Speaker 1>some people. But, yeah, that's just

01:06:26.930 --> 01:06:28.690
<v Speaker 1>you I I'm not sure if it's

01:06:29.170 --> 01:06:30.050
<v Speaker 1>a %

01:06:30.050 --> 01:06:30.690
<v Speaker 1>necessary,

01:06:31.734 --> 01:06:33.015
<v Speaker 1>but I think it's just to make it

01:06:33.015 --> 01:06:33.575
<v Speaker 1>quicker.

01:06:34.055 --> 01:06:36.375
<v Speaker 0>Okay. Well, it's definitely two times for me

01:06:36.375 --> 01:06:38.455
<v Speaker 0>so we can gloss over it. We then

01:06:38.455 --> 01:06:42.135
<v Speaker 0>joining our metadata web, the time series data,

01:06:42.135 --> 01:06:44.375
<v Speaker 0>and then just providing on here. So we're

01:06:44.375 --> 01:06:46.055
<v Speaker 0>just saying Exactly. Match on the rate of

01:06:46.055 --> 01:06:48.140
<v Speaker 0>the case. So that's the sorry. On your

01:06:48.140 --> 01:06:49.740
<v Speaker 0>go. No. I was gonna say that's just

01:06:49.740 --> 01:06:51.259
<v Speaker 1>a big thing that to take away from

01:06:51.259 --> 01:06:52.700
<v Speaker 1>this query. So you can see, like, the

01:06:52.700 --> 01:06:55.579
<v Speaker 1>original question is, like, how many rides took

01:06:55.579 --> 01:06:56.700
<v Speaker 1>place for each

01:06:57.420 --> 01:07:00.075
<v Speaker 1>type of ride. So you can imagine, like,

01:07:00.315 --> 01:07:03.115
<v Speaker 1>in any other case, wanna segment your

01:07:03.435 --> 01:07:05.595
<v Speaker 1>measurements by something. So in this case, we're

01:07:05.595 --> 01:07:08.315
<v Speaker 1>using, like, the the the type of ride,

01:07:08.315 --> 01:07:10.155
<v Speaker 1>like, the fare type. So you can see,

01:07:10.155 --> 01:07:11.275
<v Speaker 1>like, rides that are

01:07:11.859 --> 01:07:13.940
<v Speaker 1>grouped or going to a certain airport in

01:07:13.940 --> 01:07:15.540
<v Speaker 1>New York City. JFK is one of the

01:07:15.540 --> 01:07:16.260
<v Speaker 1>airports.

01:07:16.660 --> 01:07:18.900
<v Speaker 1>And that's just a simple example of how

01:07:18.900 --> 01:07:20.900
<v Speaker 1>you can join time series and

01:07:21.140 --> 01:07:23.220
<v Speaker 1>relational data together in one query,

01:07:24.234 --> 01:07:26.075
<v Speaker 1>which is again a a unique thing that's

01:07:26.075 --> 01:07:28.075
<v Speaker 1>enabled by Timescale by keeping both of them

01:07:28.075 --> 01:07:29.195
<v Speaker 1>on the same database.

01:07:29.835 --> 01:07:30.715
<v Speaker 0>Awesome.

01:07:32.635 --> 01:07:34.955
<v Speaker 0>Okay. So we're now gonna oh, we're getting

01:07:34.955 --> 01:07:37.035
<v Speaker 0>a big one now. So let's actually see

01:07:37.035 --> 01:07:38.315
<v Speaker 0>what this is doing. This one is gonna

01:07:38.315 --> 01:07:40.770
<v Speaker 0>analyze the rates to JFK,

01:07:42.130 --> 01:07:44.290
<v Speaker 0>I'm not familiar with my New York airport

01:07:44.290 --> 01:07:47.170
<v Speaker 0>codes. Yeah. It's just another airport called Newark

01:07:47.170 --> 01:07:50.290
<v Speaker 1>International Airport. Yeah. It's there in the disc

01:07:50.370 --> 01:07:51.490
<v Speaker 1>in the text.

01:07:52.555 --> 01:07:53.515
<v Speaker 0>Alright.

01:07:53.915 --> 01:07:55.915
<v Speaker 0>Okay. Let's run the query and see.

01:07:57.835 --> 01:08:00.075
<v Speaker 1>Yeah. So this is an example of, like,

01:08:00.395 --> 01:08:02.235
<v Speaker 1>a question that you might wanna know. So

01:08:02.235 --> 01:08:03.595
<v Speaker 1>for any two

01:08:04.315 --> 01:08:05.675
<v Speaker 1>types

01:08:05.319 --> 01:08:06.040
<v Speaker 1>of

01:08:06.200 --> 01:08:08.119
<v Speaker 1>things that you're monitoring, you wanna just do

01:08:08.119 --> 01:08:10.760
<v Speaker 1>a quick comparison and, you know, see how

01:08:10.760 --> 01:08:12.680
<v Speaker 1>how they compare to each other. This is

01:08:12.680 --> 01:08:15.240
<v Speaker 1>an example of that just using rides to

01:08:15.240 --> 01:08:16.199
<v Speaker 1>an airport

01:08:16.359 --> 01:08:17.479
<v Speaker 1>as as example.

01:08:22.234 --> 01:08:24.555
<v Speaker 0>Alright. So compared in those, we can see

01:08:24.555 --> 01:08:27.514
<v Speaker 0>the number of trips, the average duration,

01:08:28.955 --> 01:08:31.435
<v Speaker 0>forty five versus thirty five minutes. We can

01:08:31.435 --> 01:08:31.755
<v Speaker 0>see

01:08:33.180 --> 01:08:35.260
<v Speaker 0>the average of the cost, the average of

01:08:35.260 --> 01:08:36.220
<v Speaker 0>the tip.

01:08:37.260 --> 01:08:39.740
<v Speaker 0>Weird that the forty five minute trip to

01:08:39.740 --> 01:08:42.060
<v Speaker 0>JFK has an average tip of $7, but

01:08:42.060 --> 01:08:43.820
<v Speaker 0>this thirty five minute drive has an average

01:08:43.820 --> 01:08:44.700
<v Speaker 0>tip of nearly 10.

01:08:45.665 --> 01:08:47.665
<v Speaker 1>That's weird as well. Also, the total is

01:08:47.665 --> 01:08:48.625
<v Speaker 1>a lot higher

01:08:49.024 --> 01:08:51.745
<v Speaker 1>for the the the shorter airport, the Newark

01:08:51.745 --> 01:08:52.465
<v Speaker 1>Airport.

01:08:53.585 --> 01:08:55.585
<v Speaker 0>Oh, yes. So it is. Yeah. So we

01:08:55.585 --> 01:08:57.585
<v Speaker 1>actually if I don't wanna keep saying go

01:08:57.585 --> 01:09:00.225
<v Speaker 1>back to the tutorial, but basically, this is

01:09:00.630 --> 01:09:02.310
<v Speaker 1>this is an example of, like, you know,

01:09:02.310 --> 01:09:03.989
<v Speaker 1>people keep talking about, you know, you wanna

01:09:03.989 --> 01:09:05.989
<v Speaker 1>do data driven analysis and,

01:09:06.949 --> 01:09:09.189
<v Speaker 1>you know, have this kind of insight into,

01:09:09.189 --> 01:09:10.949
<v Speaker 1>like, what's going on. So this is an

01:09:10.949 --> 01:09:13.029
<v Speaker 1>example of, like, an ad hoc query that

01:09:13.029 --> 01:09:15.745
<v Speaker 1>someone might wanna do on your time series

01:09:15.745 --> 01:09:17.665
<v Speaker 1>data, but then combining it to the relational

01:09:17.665 --> 01:09:20.064
<v Speaker 1>data and saying, like, okay. What's interesting in

01:09:20.064 --> 01:09:21.745
<v Speaker 1>this dataset that we can talk about? And

01:09:21.745 --> 01:09:23.425
<v Speaker 1>as you've just said, you know, there's some

01:09:23.425 --> 01:09:25.265
<v Speaker 1>interesting things we can get from here. Like,

01:09:25.265 --> 01:09:26.625
<v Speaker 1>even though the trip is shorter,

01:09:26.944 --> 01:09:27.425
<v Speaker 1>the

01:09:27.830 --> 01:09:28.630
<v Speaker 1>the

01:09:29.510 --> 01:09:32.069
<v Speaker 1>the total is much higher. And even though

01:09:32.069 --> 01:09:33.750
<v Speaker 1>the trip was was

01:09:33.910 --> 01:09:36.149
<v Speaker 1>longer for the other airport, the tip is

01:09:36.149 --> 01:09:38.149
<v Speaker 1>much lower. And so, like, there's also the

01:09:38.149 --> 01:09:39.670
<v Speaker 1>interesting things that you can get

01:09:40.390 --> 01:09:41.670
<v Speaker 1>from Timescale's data.

01:09:44.615 --> 01:09:47.175
<v Speaker 0>Alright. Yeah. Very cool.

01:09:48.215 --> 01:09:50.295
<v Speaker 0>Let's see what else does it got. So

01:09:51.575 --> 01:09:53.415
<v Speaker 0>mission three is is monitoring.

01:09:54.860 --> 01:09:57.100
<v Speaker 0>So this is we our question is how

01:09:57.100 --> 01:09:59.340
<v Speaker 0>many regs took place every five minutes for

01:09:59.340 --> 01:10:01.340
<v Speaker 0>the first day of 2016?

01:10:01.820 --> 01:10:03.420
<v Speaker 1>So this is very similar to the query

01:10:03.420 --> 01:10:04.380
<v Speaker 1>that you did

01:10:04.780 --> 01:10:06.620
<v Speaker 1>kind of off the script earlier,

01:10:06.940 --> 01:10:07.659
<v Speaker 1>which is

01:10:10.325 --> 01:10:12.645
<v Speaker 1>yeah. So so this is just using

01:10:12.965 --> 01:10:14.405
<v Speaker 1>vanilla Postgres.

01:10:16.405 --> 01:10:17.285
<v Speaker 1>What is it?

01:10:18.165 --> 01:10:19.685
<v Speaker 1>Notation or

01:10:20.885 --> 01:10:23.290
<v Speaker 1>syntax is the correct word. So that's how

01:10:23.290 --> 01:10:25.770
<v Speaker 1>you would do it using the date trunk

01:10:25.770 --> 01:10:26.410
<v Speaker 1>function.

01:10:26.810 --> 01:10:29.610
<v Speaker 1>But the next query is gonna illustrate one

01:10:29.610 --> 01:10:30.330
<v Speaker 1>of the

01:10:30.730 --> 01:10:33.770
<v Speaker 1>time series specific functions that Timescale has, which

01:10:33.770 --> 01:10:35.050
<v Speaker 1>is called time bucket,

01:10:35.290 --> 01:10:36.970
<v Speaker 1>which basically allows you to

01:10:39.344 --> 01:10:40.545
<v Speaker 1>more easily

01:10:40.545 --> 01:10:42.544
<v Speaker 1>select, like, what kind of

01:10:44.144 --> 01:10:46.544
<v Speaker 1>time periods you wanna analyze your data in.

01:10:46.784 --> 01:10:47.344
<v Speaker 1>So,

01:10:47.664 --> 01:10:49.905
<v Speaker 1>like, for example, you know, using day trunk

01:10:49.905 --> 01:10:51.744
<v Speaker 1>earlier, we saw that it was easy to

01:10:52.520 --> 01:10:54.760
<v Speaker 1>analyze things in time periods of, like, an

01:10:54.760 --> 01:10:56.920
<v Speaker 1>hour or a day. But what if your

01:10:56.920 --> 01:10:59.160
<v Speaker 1>main unit in your business is, like, fifty

01:10:59.160 --> 01:11:00.360
<v Speaker 1>minutes or,

01:11:00.520 --> 01:11:03.240
<v Speaker 1>like, six minutes or ten seconds or something

01:11:03.560 --> 01:11:05.400
<v Speaker 1>some, you know, nonstandard thing?

01:11:07.045 --> 01:11:09.125
<v Speaker 1>This is a function that we've developed time

01:11:09.125 --> 01:11:11.445
<v Speaker 1>bucket to to help make that really easy

01:11:11.685 --> 01:11:13.525
<v Speaker 1>because this is the kind of question that's

01:11:13.525 --> 01:11:16.485
<v Speaker 1>often asked in in time series use cases.

01:11:17.860 --> 01:11:19.540
<v Speaker 0>Yeah. That's really cool. So it's just a

01:11:19.540 --> 01:11:21.860
<v Speaker 0>convenience function that allows you to do window

01:11:21.860 --> 01:11:24.100
<v Speaker 0>and work on my simpler syntax without worrying

01:11:24.100 --> 01:11:26.100
<v Speaker 0>about trunking the dates and and things like

01:11:26.100 --> 01:11:28.100
<v Speaker 0>that. That's nice. And you can just change

01:11:28.100 --> 01:11:30.660
<v Speaker 1>it, you know, from if you don't wanna

01:11:30.660 --> 01:11:32.260
<v Speaker 1>look at five minutes, you wanna look at,

01:11:32.260 --> 01:11:33.824
<v Speaker 1>like, forty five minutes or something like that.

01:11:33.824 --> 01:11:35.425
<v Speaker 1>It's a one line change whereas

01:11:35.744 --> 01:11:37.985
<v Speaker 1>with the day trunk function, the math, you're

01:11:37.985 --> 01:11:38.864
<v Speaker 1>gonna have to do a little bit of

01:11:38.864 --> 01:11:41.025
<v Speaker 1>maths to make sure that you're right that

01:11:41.025 --> 01:11:42.064
<v Speaker 1>you're right. Yeah.

01:11:42.545 --> 01:11:43.425
<v Speaker 0>Awesome.

01:11:43.664 --> 01:11:44.624
<v Speaker 0>Very handy.

01:11:44.784 --> 01:11:45.105
<v Speaker 1>Yeah.

01:11:46.750 --> 01:11:48.830
<v Speaker 0>Okay. Our next question is how many rays

01:11:48.830 --> 01:11:51.550
<v Speaker 0>on New Year's morning originated within four hundred

01:11:51.550 --> 01:11:54.750
<v Speaker 0>miles of Times Square and thirty minute buckets?

01:11:54.750 --> 01:11:56.269
<v Speaker 0>Yeah. Okay.

01:11:56.350 --> 01:11:58.909
<v Speaker 0>Oh, we need to do something fancy here.

01:11:59.765 --> 01:12:02.245
<v Speaker 1>So this is another example of, like, you

01:12:02.245 --> 01:12:04.885
<v Speaker 1>know, talking about how timescales based on Postgres.

01:12:05.605 --> 01:12:08.965
<v Speaker 1>You can use any other Postgres extension

01:12:09.125 --> 01:12:10.325
<v Speaker 1>with Timescale.

01:12:10.325 --> 01:12:11.925
<v Speaker 1>And one thing that we often see people

01:12:11.925 --> 01:12:12.485
<v Speaker 1>using

01:12:12.889 --> 01:12:17.449
<v Speaker 1>is combining time series analysis with geospatial analysis.

01:12:17.690 --> 01:12:19.530
<v Speaker 1>So for example, instead of just knowing how

01:12:19.530 --> 01:12:21.849
<v Speaker 1>something changes over time, you wanna know how

01:12:21.849 --> 01:12:24.889
<v Speaker 1>something changes over time and space. So, you

01:12:24.889 --> 01:12:28.885
<v Speaker 1>know, any logistics company or any someone that's

01:12:28.885 --> 01:12:29.605
<v Speaker 1>tracking

01:12:29.765 --> 01:12:32.565
<v Speaker 1>the movement of their fleet of trucks or

01:12:32.565 --> 01:12:34.885
<v Speaker 1>something, this is, like, relevant to them.

01:12:35.765 --> 01:12:38.325
<v Speaker 1>And so this is just a a quick

01:12:38.645 --> 01:12:40.485
<v Speaker 1>query to show that, you know, if you

01:12:40.485 --> 01:12:42.870
<v Speaker 1>wanna actually do geospatial analysis, this is how

01:12:42.870 --> 01:12:44.790
<v Speaker 1>you do it with this extension called post

01:12:44.790 --> 01:12:45.830
<v Speaker 1>GIS.

01:12:48.070 --> 01:12:50.150
<v Speaker 0>K. So we enable the extension,

01:12:51.030 --> 01:12:52.790
<v Speaker 0>and then we also have the table to

01:12:52.790 --> 01:12:55.345
<v Speaker 0>tell it. Okay. Right. So this is we're

01:12:55.345 --> 01:12:57.425
<v Speaker 0>saying that we've got some sort of coordinates

01:12:57.425 --> 01:12:59.105
<v Speaker 0>inside of our data and we need to

01:12:59.105 --> 01:13:00.945
<v Speaker 0>change the column type over.

01:13:01.505 --> 01:13:03.025
<v Speaker 0>And I'm assuming

01:13:04.065 --> 01:13:05.585
<v Speaker 0>oh, we just got a quick update. Yeah.

01:13:05.585 --> 01:13:07.825
<v Speaker 1>This is just allowing the the,

01:13:09.220 --> 01:13:11.140
<v Speaker 1>what is it, the location data that we

01:13:11.140 --> 01:13:14.420
<v Speaker 1>have and converting it to, like, standard coordinates

01:13:14.420 --> 01:13:15.140
<v Speaker 1>so that,

01:13:15.620 --> 01:13:17.220
<v Speaker 1>you know, the queries will work. There's an

01:13:17.220 --> 01:13:18.660
<v Speaker 1>example that I can pull up after this

01:13:18.660 --> 01:13:19.860
<v Speaker 1>to show you, like, what a

01:13:20.580 --> 01:13:21.860
<v Speaker 1>what this would look like on, like, a

01:13:21.860 --> 01:13:22.580
<v Speaker 1>live dashboard

01:13:23.585 --> 01:13:25.344
<v Speaker 1>versus now we're just gonna obviously gonna get

01:13:25.344 --> 01:13:26.864
<v Speaker 1>a number in the terminal of, like, the

01:13:26.864 --> 01:13:27.824
<v Speaker 1>number of rides.

01:13:29.025 --> 01:13:31.185
<v Speaker 0>Yeah. I must have been because we spun

01:13:31.185 --> 01:13:32.864
<v Speaker 0>up a quite a small instance, the update

01:13:32.864 --> 01:13:35.344
<v Speaker 0>here maybe just take a little. That might

01:13:35.344 --> 01:13:36.545
<v Speaker 1>actually be true. Yeah.

01:13:39.710 --> 01:13:41.870
<v Speaker 0>So I think this is this is really

01:13:41.870 --> 01:13:42.510
<v Speaker 0>nice.

01:13:43.230 --> 01:13:45.870
<v Speaker 0>I like that, you know, it's not just

01:13:46.030 --> 01:13:46.670
<v Speaker 0>the,

01:13:46.910 --> 01:13:48.990
<v Speaker 0>you know, the storage layer, the query plan

01:13:48.990 --> 01:13:51.790
<v Speaker 0>and extensions, but it's the providing of helper

01:13:51.790 --> 01:13:54.925
<v Speaker 0>functions to help make more traditional times use

01:13:54.925 --> 01:13:55.725
<v Speaker 0>queries

01:13:55.965 --> 01:13:58.445
<v Speaker 0>simpler for people to kind of type and

01:13:58.445 --> 01:13:59.485
<v Speaker 0>and work with,

01:13:59.805 --> 01:14:01.485
<v Speaker 0>I guess, on a on a daily basis.

01:14:01.485 --> 01:14:03.405
<v Speaker 0>Yeah. The the integration with the post guest

01:14:03.405 --> 01:14:05.565
<v Speaker 0>extension, I think, is is very clever. You

01:14:05.565 --> 01:14:06.445
<v Speaker 0>know, you're very

01:14:07.730 --> 01:14:09.090
<v Speaker 0>anytime she just do it and it has

01:14:09.090 --> 01:14:11.330
<v Speaker 0>latitude and longitude information on it, you're you're

01:14:11.330 --> 01:14:12.769
<v Speaker 0>gonna wanna be able to map it over

01:14:12.850 --> 01:14:14.370
<v Speaker 0>over time and space. And I think being

01:14:14.370 --> 01:14:15.810
<v Speaker 0>able to visualize that. I can imagine that

01:14:15.810 --> 01:14:17.410
<v Speaker 0>would work really well with your fan hooked

01:14:17.410 --> 01:14:18.690
<v Speaker 0>up to it, and you could choose Exactly.

01:14:19.170 --> 01:14:22.075
<v Speaker 0>Really cool visualization languages to see. While we

01:14:22.075 --> 01:14:24.715
<v Speaker 1>wait, let me actually share the screen to

01:14:24.715 --> 01:14:26.955
<v Speaker 1>to show people what this looks like. Yeah.

01:14:26.955 --> 01:14:27.755
<v Speaker 0>Go for it.

01:14:28.635 --> 01:14:30.395
<v Speaker 1>Let's see. So I'm just I've got a

01:14:30.395 --> 01:14:32.875
<v Speaker 1>Grafana dashboard right here. And what's going on

01:14:32.875 --> 01:14:35.119
<v Speaker 1>the screen in front of me is I'm

01:14:35.119 --> 01:14:38.079
<v Speaker 1>looking at the current locations of buses in

01:14:38.079 --> 01:14:38.959
<v Speaker 1>New York City,

01:14:39.440 --> 01:14:42.000
<v Speaker 1>and I'm using Timescale as my data source.

01:14:42.000 --> 01:14:43.360
<v Speaker 1>So if I just zoom into one of

01:14:43.360 --> 01:14:43.840
<v Speaker 1>these

01:14:45.360 --> 01:14:47.704
<v Speaker 1>these panels in Grafana, So you can see

01:14:47.704 --> 01:14:49.465
<v Speaker 1>here I'm using Timescale,

01:14:49.864 --> 01:14:50.984
<v Speaker 1>the Postgres

01:14:51.065 --> 01:14:52.584
<v Speaker 1>data source in Grafana.

01:14:52.585 --> 01:14:54.905
<v Speaker 1>And I've got a little SQL query here

01:14:54.905 --> 01:14:56.504
<v Speaker 1>to just basically

01:14:57.224 --> 01:15:00.969
<v Speaker 1>show me the the the location of the

01:15:00.969 --> 01:15:02.730
<v Speaker 1>different buses. So you can see I've got

01:15:02.730 --> 01:15:04.329
<v Speaker 1>my latitude and longitude,

01:15:04.570 --> 01:15:06.889
<v Speaker 1>and I'm just coloring the buses based on

01:15:06.889 --> 01:15:09.290
<v Speaker 1>their route. So each there's a different, like,

01:15:09.290 --> 01:15:11.610
<v Speaker 1>bus routes that they have. And so you

01:15:11.610 --> 01:15:13.369
<v Speaker 1>end up with something like

01:15:14.525 --> 01:15:16.525
<v Speaker 1>this panel right here, which shows you, like,

01:15:16.525 --> 01:15:18.685
<v Speaker 1>you know, for different buses. This is bus

01:15:18.685 --> 01:15:19.804
<v Speaker 1>type m.

01:15:19.885 --> 01:15:21.245
<v Speaker 1>It's in this location.

01:15:21.645 --> 01:15:24.445
<v Speaker 1>These are bus type b. They're in originally

01:15:24.445 --> 01:15:25.965
<v Speaker 1>mostly run-in that location.

01:15:26.460 --> 01:15:27.900
<v Speaker 1>So if, you know, you get, like, this

01:15:27.900 --> 01:15:29.900
<v Speaker 1>overview of, like, what's going on right now.

01:15:29.980 --> 01:15:31.900
<v Speaker 1>And then this is another interesting

01:15:32.460 --> 01:15:34.620
<v Speaker 1>example where, you know, you don't just wanna

01:15:34.620 --> 01:15:36.780
<v Speaker 1>know the location of

01:15:37.660 --> 01:15:39.580
<v Speaker 1>your buses. You also wanna know, like, when

01:15:39.580 --> 01:15:41.795
<v Speaker 1>something is wrong. So in this case, let

01:15:41.795 --> 01:15:43.395
<v Speaker 1>me actually zoom in a little bit.

01:15:43.795 --> 01:15:46.595
<v Speaker 1>The purple buses are the buses that are

01:15:46.595 --> 01:15:49.555
<v Speaker 1>actually off their specified route. So what I've

01:15:49.555 --> 01:15:50.275
<v Speaker 1>done is

01:15:50.915 --> 01:15:52.115
<v Speaker 1>I've specified

01:15:52.115 --> 01:15:52.835
<v Speaker 1>some

01:15:55.380 --> 01:15:56.260
<v Speaker 1>some,

01:15:56.820 --> 01:15:58.900
<v Speaker 1>like, kind of geographic

01:15:58.900 --> 01:16:01.300
<v Speaker 1>lines where each bus has their own, like,

01:16:01.300 --> 01:16:03.700
<v Speaker 1>line that they need to follow. And wherever

01:16:03.700 --> 01:16:06.020
<v Speaker 1>they're off that line, I just have an

01:16:06.020 --> 01:16:07.925
<v Speaker 1>is a case statement here in SQL that

01:16:07.925 --> 01:16:09.445
<v Speaker 1>says, like, okay, then that means this bus

01:16:09.445 --> 01:16:11.285
<v Speaker 1>is on route and off route. You can

01:16:11.285 --> 01:16:11.925
<v Speaker 1>imagine

01:16:12.085 --> 01:16:13.845
<v Speaker 1>doing this where, you know, if your device

01:16:13.845 --> 01:16:16.005
<v Speaker 1>is on, like, low power, if you're monitoring,

01:16:16.005 --> 01:16:17.045
<v Speaker 1>like, a bunch of

01:16:17.605 --> 01:16:19.365
<v Speaker 1>devices in the field or something like that

01:16:19.365 --> 01:16:22.880
<v Speaker 1>or if there's some kind of errant

01:16:23.360 --> 01:16:23.999
<v Speaker 1>behavior,

01:16:24.239 --> 01:16:26.480
<v Speaker 1>you can actually identify to say, like, okay.

01:16:26.480 --> 01:16:28.400
<v Speaker 1>That's where it's happening and everything else is

01:16:28.400 --> 01:16:31.440
<v Speaker 1>green. It's okay. And again, this is is

01:16:31.679 --> 01:16:33.804
<v Speaker 1>using SQL to do it. So it's quite

01:16:33.804 --> 01:16:35.885
<v Speaker 1>a powerful query that's just a few lines

01:16:35.885 --> 01:16:36.764
<v Speaker 1>long.

01:16:37.164 --> 01:16:38.925
<v Speaker 1>And that's another example of, like, the real

01:16:38.925 --> 01:16:39.484
<v Speaker 1>time

01:16:41.324 --> 01:16:44.204
<v Speaker 1>aspect of, like, okay, combining time series and

01:16:44.204 --> 01:16:45.164
<v Speaker 1>geospatial data.

01:16:46.719 --> 01:16:48.079
<v Speaker 0>Very cool. I like that.

01:16:49.280 --> 01:16:51.760
<v Speaker 0>So this update query is still running. So

01:16:51.760 --> 01:16:54.239
<v Speaker 0>we're also approaching about an hour and twenty

01:16:54.239 --> 01:16:56.560
<v Speaker 0>minutes now. So why don't we is there

01:16:56.560 --> 01:16:58.255
<v Speaker 0>any more demos that you'd like to show?

01:16:58.255 --> 01:16:59.855
<v Speaker 0>Maybe we could finish on that. And then

01:16:59.855 --> 01:17:01.215
<v Speaker 0>I know we had a few problems and

01:17:01.215 --> 01:17:02.655
<v Speaker 0>there's more content for us to cover, but

01:17:02.655 --> 01:17:04.495
<v Speaker 0>maybe we could schedule a a part two

01:17:04.495 --> 01:17:06.175
<v Speaker 0>where we do a slightly different live. I

01:17:06.175 --> 01:17:07.775
<v Speaker 1>think we need to because the part one

01:17:07.775 --> 01:17:09.855
<v Speaker 1>was mostly let's just get everything set up.

01:17:09.855 --> 01:17:11.775
<v Speaker 1>So I I wouldn't be opposed to that.

01:17:12.120 --> 01:17:14.360
<v Speaker 1>Yeah. Yeah. Let me let me actually share

01:17:14.360 --> 01:17:16.120
<v Speaker 1>my screen again and and take you through

01:17:16.120 --> 01:17:17.000
<v Speaker 1>some quick

01:17:18.040 --> 01:17:19.080
<v Speaker 1>high level

01:17:19.400 --> 01:17:20.120
<v Speaker 1>demos.

01:17:20.600 --> 01:17:21.160
<v Speaker 1>So

01:17:22.440 --> 01:17:24.360
<v Speaker 1>okay. So we're back in Grafana. So on

01:17:24.360 --> 01:17:26.600
<v Speaker 1>this keeping on this theme of buses,

01:17:27.125 --> 01:17:29.364
<v Speaker 1>you know, David talked about earlier, you know,

01:17:29.364 --> 01:17:32.085
<v Speaker 1>you wanna know how your volume is changing

01:17:32.085 --> 01:17:34.085
<v Speaker 1>over time. So this is just like buses

01:17:34.085 --> 01:17:35.605
<v Speaker 1>on a specific route,

01:17:36.165 --> 01:17:36.725
<v Speaker 1>how they

01:17:38.085 --> 01:17:39.765
<v Speaker 1>how many buses are on the road at

01:17:39.765 --> 01:17:41.445
<v Speaker 1>any particular time. And you can see, you

01:17:41.445 --> 01:17:44.340
<v Speaker 1>know, this pattern of during the day, obviously,

01:17:44.340 --> 01:17:46.260
<v Speaker 1>the buses are gonna be at the highest

01:17:46.260 --> 01:17:48.980
<v Speaker 1>and in the evenings or at after midnight,

01:17:48.980 --> 01:17:51.140
<v Speaker 1>everything kinda shuts down. This is just a

01:17:51.140 --> 01:17:53.140
<v Speaker 1>very easy way to to detect the patterns

01:17:53.140 --> 01:17:55.985
<v Speaker 1>of, like, what's going on. And I'm using

01:17:55.985 --> 01:17:56.545
<v Speaker 1>a

01:17:56.865 --> 01:17:59.265
<v Speaker 1>function here, the time bucket function,

01:18:00.305 --> 01:18:02.385
<v Speaker 1>to look at these in five minute intervals.

01:18:03.265 --> 01:18:05.824
<v Speaker 1>I could easily look at these things in

01:18:05.905 --> 01:18:08.305
<v Speaker 1>something like sixty eight minute intervals for some

01:18:08.305 --> 01:18:08.545
<v Speaker 1>reason.

01:18:09.159 --> 01:18:11.000
<v Speaker 1>And I guess I'm running a quite powerful

01:18:11.000 --> 01:18:13.000
<v Speaker 1>instance here so that the thing is quick.

01:18:13.000 --> 01:18:14.920
<v Speaker 1>So you can actually see and change the

01:18:14.920 --> 01:18:17.480
<v Speaker 1>fidelity at which you look at data. The

01:18:17.480 --> 01:18:18.920
<v Speaker 1>other thing you can do as well is

01:18:18.920 --> 01:18:20.679
<v Speaker 1>if I wanna look at something over, like,

01:18:20.679 --> 01:18:21.559
<v Speaker 1>seven days,

01:18:22.039 --> 01:18:23.800
<v Speaker 1>that's just, you know, a a quick change.

01:18:24.435 --> 01:18:26.514
<v Speaker 1>And there, I can actually see the general

01:18:26.514 --> 01:18:28.994
<v Speaker 1>trend is that it's it's trending downward

01:18:29.235 --> 01:18:31.235
<v Speaker 1>over the past seven days.

01:18:32.195 --> 01:18:34.435
<v Speaker 1>But I'm gonna keep this as five minutes.

01:18:36.630 --> 01:18:38.390
<v Speaker 1>Go back to the original one. And then

01:18:38.390 --> 01:18:41.110
<v Speaker 1>some other things that are interesting is we

01:18:41.110 --> 01:18:42.710
<v Speaker 1>have functions

01:18:42.790 --> 01:18:45.270
<v Speaker 1>to deal with common time series

01:18:47.270 --> 01:18:49.910
<v Speaker 1>time series problems that happen. So one of

01:18:49.910 --> 01:18:51.750
<v Speaker 1>them is a function called

01:18:52.495 --> 01:18:54.335
<v Speaker 1>gap fill, which is basically

01:18:54.655 --> 01:18:56.655
<v Speaker 1>allows you to fill in gaps in your

01:18:56.655 --> 01:18:57.295
<v Speaker 1>data.

01:18:58.255 --> 01:18:58.895
<v Speaker 1>So

01:18:59.055 --> 01:19:01.454
<v Speaker 1>the comparison here is

01:19:02.495 --> 01:19:04.015
<v Speaker 1>let me find a

01:19:04.270 --> 01:19:06.350
<v Speaker 1>table that has a gap in it.

01:19:07.950 --> 01:19:10.670
<v Speaker 1>Okay. So say in this example here, you

01:19:10.670 --> 01:19:13.310
<v Speaker 1>can see at 3AM

01:19:13.310 --> 01:19:15.390
<v Speaker 1>on the February 7,

01:19:15.965 --> 01:19:17.885
<v Speaker 1>I didn't have any vehicles on the road.

01:19:17.885 --> 01:19:19.324
<v Speaker 1>And so it just shows me like a

01:19:19.324 --> 01:19:21.804
<v Speaker 1>dash here, meaning like there's no there's no

01:19:21.804 --> 01:19:22.364
<v Speaker 1>data.

01:19:22.764 --> 01:19:24.364
<v Speaker 1>But we have like two functions that you

01:19:24.364 --> 01:19:26.125
<v Speaker 1>can use depending on how you wanna treat

01:19:26.125 --> 01:19:27.804
<v Speaker 1>these gaps because often you wanna have like

01:19:27.804 --> 01:19:30.250
<v Speaker 1>a continuous line when you're doing some sort

01:19:30.250 --> 01:19:32.489
<v Speaker 1>of a time time series analysis.

01:19:32.650 --> 01:19:35.690
<v Speaker 1>So one of them is gonna be to

01:19:36.570 --> 01:19:37.530
<v Speaker 1>interpolate

01:19:37.690 --> 01:19:40.170
<v Speaker 1>between the last two values. So let me

01:19:40.170 --> 01:19:40.809
<v Speaker 1>just

01:19:42.170 --> 01:19:43.370
<v Speaker 1>find the right time,

01:19:46.465 --> 01:19:48.864
<v Speaker 1>And that's gonna be at 3PM.

01:19:49.105 --> 01:19:51.024
<v Speaker 1>Three AM, I think. So,

01:19:51.905 --> 01:19:53.905
<v Speaker 1>yeah, between two and 3AM.

01:19:56.465 --> 01:19:58.864
<v Speaker 1>Okay. Cool. So you can see here

01:20:00.280 --> 01:20:02.440
<v Speaker 1>the number here is a one and the

01:20:02.440 --> 01:20:04.200
<v Speaker 1>number here is a three, and we have

01:20:04.200 --> 01:20:05.960
<v Speaker 1>two gaps in the middle. So if I

01:20:05.960 --> 01:20:07.560
<v Speaker 1>use this interpolate function,

01:20:07.720 --> 01:20:09.640
<v Speaker 1>the output between the one and the three,

01:20:09.640 --> 01:20:12.600
<v Speaker 1>I'm just gonna get the linear interpolation. So

01:20:12.600 --> 01:20:14.440
<v Speaker 1>it's gonna assume that, okay, between

01:20:15.215 --> 01:20:16.415
<v Speaker 1>one and two

01:20:18.335 --> 01:20:19.135
<v Speaker 1>between,

01:20:19.135 --> 01:20:21.375
<v Speaker 1>yeah, one and two, it's gonna go from

01:20:22.015 --> 01:20:24.895
<v Speaker 1>three to three to two, and then from

01:20:24.895 --> 01:20:26.735
<v Speaker 1>two to 1.6, and then all the way

01:20:26.735 --> 01:20:29.250
<v Speaker 1>to one. But, of course, since I'm counting

01:20:29.250 --> 01:20:31.730
<v Speaker 1>buses, there's no such thing as, like, 2.33

01:20:31.730 --> 01:20:33.250
<v Speaker 1>buses that doesn't exist.

01:20:34.930 --> 01:20:36.450
<v Speaker 1>So we have another function that you can

01:20:36.450 --> 01:20:37.730
<v Speaker 1>use called

01:20:37.810 --> 01:20:38.770
<v Speaker 1>LOCF,

01:20:38.770 --> 01:20:41.730
<v Speaker 1>which means last object or last observation carried

01:20:41.730 --> 01:20:42.050
<v Speaker 1>forward,

01:20:42.605 --> 01:20:44.685
<v Speaker 1>which allows you to solve this problem by

01:20:44.685 --> 01:20:46.125
<v Speaker 1>just taking the last number

01:20:46.365 --> 01:20:48.205
<v Speaker 1>and carrying it forward. So you can see

01:20:48.205 --> 01:20:48.765
<v Speaker 1>here

01:20:49.485 --> 01:20:52.285
<v Speaker 1>between this time of, like, 1AM and 4AM,

01:20:52.285 --> 01:20:53.885
<v Speaker 1>it just assumes that I just had three

01:20:53.885 --> 01:20:55.950
<v Speaker 1>buses on the road at that time until

01:20:55.950 --> 01:20:57.870
<v Speaker 1>I hit 4PM where my next data point

01:20:57.870 --> 01:21:00.270
<v Speaker 1>comes in. And these functions, just to give

01:21:00.270 --> 01:21:02.110
<v Speaker 1>you a sense of how they look, they're

01:21:02.110 --> 01:21:03.470
<v Speaker 1>just these one

01:21:03.950 --> 01:21:05.790
<v Speaker 1>line functions where you're saying

01:21:06.430 --> 01:21:07.550
<v Speaker 1>LOCF,

01:21:07.710 --> 01:21:07.950
<v Speaker 1>the

01:21:08.975 --> 01:21:11.775
<v Speaker 1>the quantity that you want to count,

01:21:12.095 --> 01:21:13.855
<v Speaker 1>and then you're using this function called time

01:21:13.855 --> 01:21:16.895
<v Speaker 1>bucket gap fill instead of a date trunk

01:21:16.895 --> 01:21:18.014
<v Speaker 1>or time bucket

01:21:18.335 --> 01:21:21.055
<v Speaker 1>to calculate your time values. So those are

01:21:21.055 --> 01:21:22.975
<v Speaker 1>just two other examples of these, like, handy

01:21:22.975 --> 01:21:25.420
<v Speaker 1>SQL functions for time series analysis.

01:21:25.580 --> 01:21:27.020
<v Speaker 1>And then I just wanna show you one

01:21:27.020 --> 01:21:28.300
<v Speaker 1>last thing,

01:21:29.580 --> 01:21:30.300
<v Speaker 1>which is

01:21:32.780 --> 01:21:35.020
<v Speaker 1>okay. So this is this is a different

01:21:35.020 --> 01:21:38.380
<v Speaker 1>dataset. This is actually monitoring live air quality

01:21:38.380 --> 01:21:39.260
<v Speaker 1>data in India.

01:21:39.865 --> 01:21:41.785
<v Speaker 1>And so you can see here, I've got

01:21:41.785 --> 01:21:42.824
<v Speaker 1>a bunch of, like,

01:21:43.225 --> 01:21:44.585
<v Speaker 1>air quality metrics,

01:21:44.745 --> 01:21:45.625
<v Speaker 1>ozone,

01:21:45.945 --> 01:21:47.385
<v Speaker 1>nitrous dioxide.

01:21:47.705 --> 01:21:51.545
<v Speaker 1>This is, like, particulate matter over 25 nanometers.

01:21:51.545 --> 01:21:53.410
<v Speaker 1>So there's a bunch of metrics. And I've

01:21:53.410 --> 01:21:56.210
<v Speaker 1>also got a certain location that I'm monitoring,

01:21:56.210 --> 01:21:57.970
<v Speaker 1>which is in Agra, which is a fun

01:21:57.970 --> 01:21:59.889
<v Speaker 1>fact where the Taj Mahal is in India.

01:21:59.890 --> 01:22:01.490
<v Speaker 1>So they probably wanna know what the air

01:22:01.490 --> 01:22:02.770
<v Speaker 1>quality is in there. They got a lot

01:22:02.770 --> 01:22:04.610
<v Speaker 1>of tourists. So this is actually quite a

01:22:04.610 --> 01:22:05.170
<v Speaker 1>real use case.

01:22:05.955 --> 01:22:08.355
<v Speaker 1>And so I've shown you a time bucket

01:22:08.355 --> 01:22:11.875
<v Speaker 1>gap film already. There's another function that allows

01:22:11.875 --> 01:22:14.035
<v Speaker 1>you just to get the last reading for

01:22:14.035 --> 01:22:15.235
<v Speaker 1>each location.

01:22:16.435 --> 01:22:18.675
<v Speaker 1>And so if I go to view this

01:22:21.660 --> 01:22:24.860
<v Speaker 1>classic live scenario, it's taking long.

01:22:25.180 --> 01:22:27.100
<v Speaker 1>But basically, over here, it shows me, like,

01:22:27.100 --> 01:22:29.420
<v Speaker 1>for each of these parameters at the place

01:22:29.420 --> 01:22:31.580
<v Speaker 1>that I'm looking at, this is the last

01:22:31.580 --> 01:22:33.495
<v Speaker 1>reading that I have. And so you can

01:22:33.495 --> 01:22:35.815
<v Speaker 1>imagine, like, you wanna know the status, the

01:22:35.815 --> 01:22:36.454
<v Speaker 1>last

01:22:36.775 --> 01:22:37.735
<v Speaker 1>received

01:22:37.815 --> 01:22:40.295
<v Speaker 1>reading from some sort of devices that you're

01:22:40.295 --> 01:22:40.934
<v Speaker 1>monitoring,

01:22:42.215 --> 01:22:44.054
<v Speaker 1>and you don't know where that when that's

01:22:44.054 --> 01:22:46.540
<v Speaker 1>gonna where that's gonna be. And so we

01:22:46.540 --> 01:22:47.579
<v Speaker 1>have this function

01:22:47.900 --> 01:22:50.300
<v Speaker 1>handy time series function that just shows you

01:22:50.300 --> 01:22:51.499
<v Speaker 1>the last value

01:22:51.980 --> 01:22:54.780
<v Speaker 1>as ordered by time. So this is different

01:22:54.780 --> 01:22:57.260
<v Speaker 1>from just calculating the value and then ordering

01:22:57.260 --> 01:22:58.860
<v Speaker 1>by time because sometimes

01:23:00.505 --> 01:23:02.505
<v Speaker 1>depending on this has to do with, like,

01:23:02.505 --> 01:23:04.585
<v Speaker 1>the the query the way the query planner

01:23:05.065 --> 01:23:05.865
<v Speaker 1>executes.

01:23:06.585 --> 01:23:08.025
<v Speaker 1>If you use this function, it's a lot

01:23:08.025 --> 01:23:10.745
<v Speaker 1>more efficient than scanning the whole database

01:23:12.170 --> 01:23:14.409
<v Speaker 1>for to find this this last value. This

01:23:14.409 --> 01:23:16.489
<v Speaker 1>actually takes advantage of some of the

01:23:16.810 --> 01:23:18.489
<v Speaker 1>chunking and and stuff that I talked about

01:23:18.489 --> 01:23:20.810
<v Speaker 1>earlier with the hyper table. So that's a

01:23:20.810 --> 01:23:23.769
<v Speaker 1>a an overview of the features of,

01:23:24.170 --> 01:23:26.090
<v Speaker 1>like, the handy SQL functions.

01:23:26.170 --> 01:23:26.969
<v Speaker 1>And then here,

01:23:28.945 --> 01:23:31.185
<v Speaker 1>I've got just got an overview of, like

01:23:31.265 --> 01:23:33.025
<v Speaker 1>you know, we talked about earlier about downsampling

01:23:33.025 --> 01:23:34.545
<v Speaker 1>and continuous aggregates.

01:23:34.785 --> 01:23:36.864
<v Speaker 1>The data that I've that what I'm showing

01:23:36.864 --> 01:23:39.425
<v Speaker 1>here is going to be the

01:23:40.545 --> 01:23:41.985
<v Speaker 1>daily average.

01:23:42.065 --> 01:23:44.440
<v Speaker 1>Again, I'm not sure why this full screen

01:23:44.440 --> 01:23:46.920
<v Speaker 1>view is not working. But basically, this shows,

01:23:46.920 --> 01:23:49.560
<v Speaker 1>like, the daily average of different

01:23:49.720 --> 01:23:51.160
<v Speaker 1>air quality metrics.

01:23:51.160 --> 01:23:53.080
<v Speaker 1>And that's an example of, like, okay, we

01:23:53.080 --> 01:23:55.880
<v Speaker 1>have data coming in, like, every 15 minutes

01:23:55.880 --> 01:23:58.015
<v Speaker 1>or something like that, but we've down sampled

01:23:58.015 --> 01:23:59.215
<v Speaker 1>it here to be

01:23:59.775 --> 01:24:01.855
<v Speaker 1>every day just to show the

01:24:02.335 --> 01:24:05.215
<v Speaker 1>max, minimum, and average. So again, it's example

01:24:05.215 --> 01:24:06.975
<v Speaker 1>where you don't just have to down down

01:24:06.975 --> 01:24:08.975
<v Speaker 1>sample it to the average, you can take

01:24:08.975 --> 01:24:09.375
<v Speaker 1>whatever

01:24:10.130 --> 01:24:12.610
<v Speaker 1>function you want, whatever aggregate function. So here

01:24:12.610 --> 01:24:14.530
<v Speaker 1>we have both the max, the average, and

01:24:14.530 --> 01:24:15.330
<v Speaker 1>the minimum

01:24:15.490 --> 01:24:17.489
<v Speaker 1>of all these different metrics

01:24:17.970 --> 01:24:21.090
<v Speaker 1>for and that's using Timescale continuous aggregates.

01:24:21.410 --> 01:24:23.275
<v Speaker 1>So, yeah, you know, that's just a a

01:24:23.275 --> 01:24:24.795
<v Speaker 1>little overview of, like, some of the real

01:24:24.795 --> 01:24:26.554
<v Speaker 1>world use cases that you can do. I

01:24:26.554 --> 01:24:29.195
<v Speaker 1>like to demonstrate things with Grafana dashboards because,

01:24:29.195 --> 01:24:30.874
<v Speaker 1>you know, this is something that

01:24:31.434 --> 01:24:33.034
<v Speaker 1>people would look at all the time. It's

01:24:33.034 --> 01:24:35.594
<v Speaker 1>also easier than working with the terminal, which

01:24:35.594 --> 01:24:36.875
<v Speaker 1>we see has caused us a lot of

01:24:36.875 --> 01:24:39.650
<v Speaker 1>problems today. But yeah. This is just an

01:24:39.650 --> 01:24:41.010
<v Speaker 1>overview of the sorts of things you can

01:24:41.010 --> 01:24:42.050
<v Speaker 1>do at Timescale.

01:24:42.369 --> 01:24:44.210
<v Speaker 1>And I've just got a slide later on

01:24:44.210 --> 01:24:46.050
<v Speaker 1>just for with some links that people can

01:24:46.050 --> 01:24:47.570
<v Speaker 1>go to if they wanna learn more.

01:24:48.210 --> 01:24:49.250
<v Speaker 1>But we'll we'll get to that in a

01:24:49.250 --> 01:24:49.969
<v Speaker 1>in a few minutes.

01:24:51.025 --> 01:24:53.265
<v Speaker 0>Yeah. You're right. Timescale is data is very

01:24:53.265 --> 01:24:55.185
<v Speaker 0>visual, and I think Grafana dashboards are a

01:24:55.185 --> 01:24:57.585
<v Speaker 0>great way to kinda understand trends and, you

01:24:57.585 --> 01:24:59.585
<v Speaker 0>know, peaks and troughs and really just get

01:24:59.585 --> 01:25:01.985
<v Speaker 0>a glance at what is happening through the

01:25:01.985 --> 01:25:05.185
<v Speaker 0>data. So, yeah, Grafana dashboards and graphing in

01:25:05.185 --> 01:25:06.145
<v Speaker 0>general is really important.

01:25:06.660 --> 01:25:07.619
<v Speaker 1>%.

01:25:08.020 --> 01:25:10.900
<v Speaker 0>Okay. So I think what we'll do is

01:25:10.900 --> 01:25:13.380
<v Speaker 0>you and I can catch up after this

01:25:13.380 --> 01:25:15.380
<v Speaker 0>episode. We will get something scheduled because I

01:25:15.380 --> 01:25:16.980
<v Speaker 0>feel that we've got so much more we

01:25:16.980 --> 01:25:17.699
<v Speaker 0>can cover.

01:25:18.020 --> 01:25:21.445
<v Speaker 0>Yeah. Yeah. Yeah. Arranged that. And then if

01:25:21.445 --> 01:25:22.965
<v Speaker 0>you wanna pull up your slides, we can

01:25:22.965 --> 01:25:24.805
<v Speaker 0>give some people some more resources to take

01:25:24.805 --> 01:25:26.485
<v Speaker 0>a look at. And then I will let

01:25:26.485 --> 01:25:27.925
<v Speaker 0>you get back to your day, and I

01:25:27.925 --> 01:25:30.245
<v Speaker 0>will speak to you again soon. Yeah. No.

01:25:30.245 --> 01:25:32.085
<v Speaker 1>For sure. I I think that there's definitely

01:25:32.085 --> 01:25:32.325
<v Speaker 1>some

01:25:33.719 --> 01:25:35.960
<v Speaker 1>interest in folks wanting to learn about, you

01:25:35.960 --> 01:25:38.039
<v Speaker 1>know, how would, like, a data life cycle

01:25:38.039 --> 01:25:41.079
<v Speaker 1>look like from raw data to downsample to

01:25:41.239 --> 01:25:43.079
<v Speaker 1>discard it. So maybe that's actually a topic

01:25:43.079 --> 01:25:43.639
<v Speaker 1>that we could do.

01:25:44.975 --> 01:25:47.054
<v Speaker 1>But in the meantime, for folks who

01:25:47.375 --> 01:25:49.295
<v Speaker 1>enjoyed what we saw today and who wanna

01:25:49.295 --> 01:25:50.815
<v Speaker 1>get started with Timescale,

01:25:50.975 --> 01:25:52.335
<v Speaker 1>the best place is to do so in

01:25:52.335 --> 01:25:54.735
<v Speaker 1>the docs, docs.timescale.com.

01:25:54.735 --> 01:25:57.055
<v Speaker 1>We also have a newsletter that sends out

01:25:57.880 --> 01:26:01.239
<v Speaker 1>any feature updates or any tutorials

01:26:01.239 --> 01:26:03.640
<v Speaker 1>and stuff that we have, learning material. So

01:26:03.640 --> 01:26:05.320
<v Speaker 1>you can just go to the short link

01:26:05.320 --> 01:26:07.800
<v Speaker 1>tstb.co/timescale-

01:26:07.800 --> 01:26:08.599
<v Speaker 1>newsletter.

01:26:09.400 --> 01:26:11.960
<v Speaker 1>If you wanna get help using Timescale,

01:26:12.465 --> 01:26:15.265
<v Speaker 1>we have a community of thousands of users

01:26:15.265 --> 01:26:17.665
<v Speaker 1>in our developer Slack as well as folks

01:26:17.665 --> 01:26:18.545
<v Speaker 1>like myself,

01:26:18.865 --> 01:26:20.385
<v Speaker 1>Timescale CTO,

01:26:20.625 --> 01:26:21.665
<v Speaker 1>Mike Friedman,

01:26:22.145 --> 01:26:24.385
<v Speaker 1>Ryan, who helped out on this livestream. He's

01:26:24.385 --> 01:26:26.305
<v Speaker 1>actually a developer advocate at Timescale.

01:26:27.170 --> 01:26:28.530
<v Speaker 1>And so you can find us all in

01:26:28.530 --> 01:26:29.809
<v Speaker 1>the Timescale Slack

01:26:29.889 --> 01:26:31.570
<v Speaker 1>where we can give you help, you know,

01:26:31.570 --> 01:26:33.170
<v Speaker 1>if you're trying to figure out if Timescale

01:26:33.170 --> 01:26:34.690
<v Speaker 1>fits your needs or if you can't quite

01:26:34.690 --> 01:26:36.530
<v Speaker 1>get something to work. Folks are there to

01:26:36.530 --> 01:26:37.170
<v Speaker 1>help you.

01:26:37.650 --> 01:26:38.929
<v Speaker 1>And then at the end

01:26:39.955 --> 01:26:41.395
<v Speaker 1>oh, and then and then if you wanted

01:26:41.395 --> 01:26:43.235
<v Speaker 1>to use Timescale, the easiest way to get

01:26:43.235 --> 01:26:45.075
<v Speaker 1>started is with the hosted database.

01:26:45.315 --> 01:26:51.075
<v Speaker 1>You can start a free trial at tstb.co/getstartedcloud.

01:26:51.075 --> 01:26:52.835
<v Speaker 1>That's actually quite a long short link. But,

01:26:52.835 --> 01:26:53.795
<v Speaker 1>yeah, hit that up.

01:26:54.560 --> 01:26:56.880
<v Speaker 1>Might have to change that one. But, yeah,

01:26:56.880 --> 01:26:58.320
<v Speaker 1>there's there's so many things there. And then

01:26:58.320 --> 01:27:00.800
<v Speaker 1>my name is at aftar in Slack. So

01:27:00.800 --> 01:27:02.080
<v Speaker 1>you can just find me and at me,

01:27:02.080 --> 01:27:03.679
<v Speaker 1>and I'll be happy to help you personally.

01:27:05.040 --> 01:27:06.400
<v Speaker 0>Awesome. Thank you very much.

01:27:07.175 --> 01:27:08.135
<v Speaker 0>Alright. That was

01:27:08.855 --> 01:27:10.455
<v Speaker 0>we had a few challenges, but we showed

01:27:10.455 --> 01:27:12.695
<v Speaker 0>off some really cool features of Timescale. We'll

01:27:12.695 --> 01:27:14.615
<v Speaker 0>get something started to show off even more

01:27:14.615 --> 01:27:17.095
<v Speaker 0>of that. We'll tackle data. You know? I

01:27:17.095 --> 01:27:19.050
<v Speaker 0>I think we can really dig in to

01:27:19.050 --> 01:27:21.210
<v Speaker 0>the data sampling data over time and show

01:27:21.210 --> 01:27:22.490
<v Speaker 0>people how that works and how to work

01:27:22.490 --> 01:27:24.650
<v Speaker 0>within that. Lots of great content to come.

01:27:24.730 --> 01:27:26.410
<v Speaker 0>Tara, thank you very much for joining me

01:27:26.410 --> 01:27:26.969
<v Speaker 0>today.

01:27:27.290 --> 01:27:29.290
<v Speaker 0>I will speak to you again soon. Have

01:27:29.290 --> 01:27:31.450
<v Speaker 0>a great day. Thank you, David, and thanks

01:27:31.450 --> 01:27:33.690
<v Speaker 1>everyone who watched and who's gonna watch the

01:27:33.690 --> 01:27:34.090
<v Speaker 1>recording.

01:27:35.185 --> 01:27:36.545
<v Speaker 1>Please use Timescale.

01:27:37.425 --> 01:27:39.345
<v Speaker 0>Awesome. Alright. I'll see you soon. Thank you.

01:27:39.345 --> 01:27:39.745
<v Speaker 0>Bye bye.
