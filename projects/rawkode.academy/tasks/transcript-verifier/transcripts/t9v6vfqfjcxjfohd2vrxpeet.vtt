WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 88f9cd38-47a0-4139-9429-fd415e82c159
Created: 2025-04-29T21:46:46.500Z
Duration: 4955.0146
Channels: 1

00:02:13.930 --> 00:02:17.050
<v Speaker 0>Hello and welcome to today's episode.

00:02:17.370 --> 00:02:19.690
<v Speaker 0>This is Rawkode live. I am Rawkode slash

00:02:19.690 --> 00:02:22.170
<v Speaker 0>David McKay and I am very pleased today

00:02:22.170 --> 00:02:24.810
<v Speaker 0>to introduce a whole host of people as

00:02:24.810 --> 00:02:26.890
<v Speaker 0>we can see here. We have six,

00:02:27.965 --> 00:02:31.165
<v Speaker 0>five sorry, six including myself, guest today and

00:02:31.165 --> 00:02:33.644
<v Speaker 0>I'm gonna delegate the introductions because it's too

00:02:33.644 --> 00:02:35.325
<v Speaker 0>many new names for me and I'm not

00:02:35.325 --> 00:02:36.605
<v Speaker 0>very clever. So

00:02:37.004 --> 00:02:40.360
<v Speaker 0>I'll introduce Paul, Paul Burt from OpenEBS,

00:02:40.360 --> 00:02:42.920
<v Speaker 0>Maya Data. Please take it away. Yeah. Howdy.

00:02:42.920 --> 00:02:44.040
<v Speaker 1>Thanks for having us.

00:02:44.440 --> 00:02:46.680
<v Speaker 1>We we're deeply invested in open source, so

00:02:46.680 --> 00:02:48.519
<v Speaker 1>we figured we'd bring the open source community

00:02:48.519 --> 00:02:50.519
<v Speaker 1>with us. It's kind of the plan here.

00:02:50.519 --> 00:02:52.280
<v Speaker 1>So I'm the director of

00:02:52.784 --> 00:02:56.224
<v Speaker 1>community and marketing at Myadata. We build OpenEBS

00:02:56.224 --> 00:02:58.865
<v Speaker 1>and Litmus Chaos are kind of our

00:02:59.584 --> 00:03:01.584
<v Speaker 1>top tier open source projects that you may

00:03:01.584 --> 00:03:03.905
<v Speaker 1>recognize. I think we're gonna explore Maya Store,

00:03:03.905 --> 00:03:05.584
<v Speaker 1>which is a new kinda

00:03:06.170 --> 00:03:09.210
<v Speaker 1>fangled component of OpenEBS that does some really

00:03:09.210 --> 00:03:12.250
<v Speaker 1>cool stuff with technology from Intel and

00:03:12.810 --> 00:03:15.770
<v Speaker 1>Linux foundation projects and other stuff. So we

00:03:15.770 --> 00:03:17.370
<v Speaker 1>have Kiran Mova, who is one of the

00:03:17.370 --> 00:03:20.090
<v Speaker 1>cofounders of Maya data along with us, and

00:03:20.090 --> 00:03:22.555
<v Speaker 1>he's the architect of OpenEBS.

00:03:22.715 --> 00:03:23.995
<v Speaker 1>We have Jeffrey,

00:03:23.995 --> 00:03:26.395
<v Speaker 1>who is our CTO at My Data and

00:03:26.395 --> 00:03:27.835
<v Speaker 1>works deeply on the

00:03:28.155 --> 00:03:29.435
<v Speaker 1>MyAstore project.

00:03:29.675 --> 00:03:32.395
<v Speaker 1>And then Glenn Boolingham and Jan, I think,

00:03:32.395 --> 00:03:35.195
<v Speaker 1>are product management and architects,

00:03:35.435 --> 00:03:36.315
<v Speaker 1>software developers

00:03:37.410 --> 00:03:38.450
<v Speaker 1>correspondingly.

00:03:38.450 --> 00:03:40.129
<v Speaker 1>So we've got a a full house here

00:03:40.129 --> 00:03:40.770
<v Speaker 1>today.

00:03:41.090 --> 00:03:42.849
<v Speaker 0>Yeah. We're setting a record for the most

00:03:42.849 --> 00:03:44.370
<v Speaker 0>guests I've had on the stream at any

00:03:44.370 --> 00:03:45.970
<v Speaker 0>one time. That's awesome.

00:03:46.610 --> 00:03:47.250
<v Speaker 0>Now

00:03:48.370 --> 00:03:50.755
<v Speaker 0>we're I believe we're we're gonna start with

00:03:50.755 --> 00:03:53.315
<v Speaker 0>a few slides just to talk around what

00:03:53.315 --> 00:03:54.515
<v Speaker 0>OpenEBS

00:03:54.515 --> 00:03:55.875
<v Speaker 0>is. So,

00:03:56.515 --> 00:03:58.675
<v Speaker 0>Kevin, I believe you're gonna share your screen.

00:03:59.635 --> 00:04:00.355
<v Speaker 2>Yes.

00:04:00.834 --> 00:04:04.995
<v Speaker 2>Thanks, Paul and David, for having us

00:04:04.380 --> 00:04:05.260
<v Speaker 2>here today.

00:04:07.100 --> 00:04:09.020
<v Speaker 2>Let me see if I can figure out

00:04:09.580 --> 00:04:13.020
<v Speaker 2>share the screen here. I haven't prepared slides

00:04:13.020 --> 00:04:15.180
<v Speaker 2>specifically for this event, but I do have

00:04:15.180 --> 00:04:16.700
<v Speaker 2>some slides that I want to share from

00:04:16.700 --> 00:04:18.540
<v Speaker 2>the last

00:04:19.225 --> 00:04:21.945
<v Speaker 2>presentation that we had at KubeCon.

00:04:22.105 --> 00:04:24.105
<v Speaker 2>It'll be a trimmed down version of it

00:04:24.265 --> 00:04:26.745
<v Speaker 2>before we get into the most interesting stuff

00:04:26.745 --> 00:04:28.105
<v Speaker 2>on my store

00:04:28.985 --> 00:04:31.460
<v Speaker 2>just to set up a context on the

00:04:31.460 --> 00:04:32.900
<v Speaker 2>origins of OpenEBS

00:04:32.900 --> 00:04:35.540
<v Speaker 2>and how we came down to working on

00:04:35.540 --> 00:04:36.420
<v Speaker 2>My Store.

00:04:37.300 --> 00:04:38.980
<v Speaker 2>So this was slightly,

00:04:39.780 --> 00:04:40.420
<v Speaker 2>you know,

00:04:40.740 --> 00:04:43.220
<v Speaker 2>older survey now. It's from 02/2019, '2 thousand

00:04:43.220 --> 00:04:45.540
<v Speaker 2>'20 is going to be published

00:04:45.925 --> 00:04:49.285
<v Speaker 2>at the upcoming North America KubeCon. But OpenEBS

00:04:49.285 --> 00:04:52.165
<v Speaker 2>is one of the most evaluated storages

00:04:52.885 --> 00:04:56.005
<v Speaker 2>in the open source for straightforward workloads on

00:04:56.005 --> 00:04:56.725
<v Speaker 2>Kubernetes.

00:04:56.965 --> 00:04:59.910
<v Speaker 2>And we call the storage pattern that we

00:04:59.910 --> 00:05:02.870
<v Speaker 2>have implemented as container attached storage.

00:05:02.870 --> 00:05:05.430
<v Speaker 2>And we while we are the leading open

00:05:05.430 --> 00:05:06.070
<v Speaker 2>source

00:05:06.870 --> 00:05:07.830
<v Speaker 2>platform

00:05:07.830 --> 00:05:10.150
<v Speaker 2>or container attached storage example, there are, like,

00:05:10.150 --> 00:05:12.150
<v Speaker 2>some commercial options available as well.

00:05:12.710 --> 00:05:14.944
<v Speaker 2>You know, like Portworx, which was recently in

00:05:14.944 --> 00:05:17.664
<v Speaker 2>the news, is the one that I was

00:05:17.664 --> 00:05:19.425
<v Speaker 2>also featured in the survey.

00:05:20.625 --> 00:05:22.384
<v Speaker 2>So the origins are pretty simple. Like, I

00:05:22.384 --> 00:05:24.625
<v Speaker 2>think we think that congress law is

00:05:25.025 --> 00:05:28.544
<v Speaker 2>kind of getting realized right now at all

00:05:28.944 --> 00:05:29.504
<v Speaker 2>industries.

00:05:30.000 --> 00:05:32.880
<v Speaker 2>In some recent article that I've read, there

00:05:32.880 --> 00:05:33.680
<v Speaker 2>are no more

00:05:34.560 --> 00:05:36.560
<v Speaker 2>company I mean, no data data companies kind

00:05:36.560 --> 00:05:38.400
<v Speaker 2>of survive now, and every company is a

00:05:38.400 --> 00:05:40.960
<v Speaker 2>data company, whether it's Bloomberg or

00:05:41.760 --> 00:05:45.415
<v Speaker 2>could be Ben's or every organization

00:05:45.415 --> 00:05:47.415
<v Speaker 2>has become like a data organization

00:05:47.415 --> 00:05:48.135
<v Speaker 2>as well.

00:05:48.455 --> 00:05:51.575
<v Speaker 2>This is a story from CNCF end user

00:05:51.575 --> 00:05:53.095
<v Speaker 2>report which talks

00:05:53.495 --> 00:05:55.975
<v Speaker 2>which kind of represents the way teams are

00:05:55.975 --> 00:05:57.815
<v Speaker 2>organized at Bloomberg

00:05:57.790 --> 00:06:00.750
<v Speaker 2>and how Congress law can get applied there

00:06:00.750 --> 00:06:03.230
<v Speaker 2>with respect to disaggregated teams,

00:06:04.110 --> 00:06:07.550
<v Speaker 2>small number of teams working on several thousands

00:06:07.550 --> 00:06:08.750
<v Speaker 2>of microservices,

00:06:08.750 --> 00:06:10.990
<v Speaker 2>and a much, much smaller team

00:06:11.595 --> 00:06:12.475
<v Speaker 2>supporting

00:06:12.955 --> 00:06:14.315
<v Speaker 2>what do you call a platform, a SRE

00:06:14.315 --> 00:06:16.634
<v Speaker 2>team supporting them. And this is possible with

00:06:16.634 --> 00:06:17.595
<v Speaker 2>Kubernetes

00:06:17.835 --> 00:06:19.915
<v Speaker 2>and other CNCF technologies

00:06:20.155 --> 00:06:23.595
<v Speaker 2>that enable these teams to automate their entire

00:06:23.595 --> 00:06:26.155
<v Speaker 2>infrastructure as a service within their organizations.

00:06:26.770 --> 00:06:27.410
<v Speaker 2>So

00:06:27.810 --> 00:06:30.610
<v Speaker 2>the Kubernetes started off as an orchestrator for

00:06:30.610 --> 00:06:33.490
<v Speaker 2>state level upload, it's kind of soon transformed

00:06:33.490 --> 00:06:35.010
<v Speaker 2>or it's enabling

00:06:35.410 --> 00:06:38.210
<v Speaker 2>data to be done in Kubernetes as well.

00:06:38.210 --> 00:06:41.425
<v Speaker 2>And we also see the shift coming from

00:06:41.664 --> 00:06:44.544
<v Speaker 2>the way databases are architected as the teams

00:06:44.544 --> 00:06:45.825
<v Speaker 2>are transforming from

00:06:46.945 --> 00:06:47.985
<v Speaker 2>specialized

00:06:47.985 --> 00:06:48.705
<v Speaker 2>or,

00:06:49.745 --> 00:06:52.625
<v Speaker 2>you know, layered teams to more functional teams.

00:06:53.020 --> 00:06:54.780
<v Speaker 2>Even the types of databases

00:06:54.860 --> 00:06:57.580
<v Speaker 2>that are getting deployed within these are different.

00:06:57.740 --> 00:06:59.580
<v Speaker 2>It's not a single database that all the

00:06:59.580 --> 00:07:01.900
<v Speaker 2>data goes to, but rather depending on the

00:07:01.900 --> 00:07:03.740
<v Speaker 2>service that you are providing,

00:07:03.740 --> 00:07:05.819
<v Speaker 2>your databases are optimized for that.

00:07:06.645 --> 00:07:08.485
<v Speaker 2>We tend to see now

00:07:08.724 --> 00:07:12.004
<v Speaker 2>variety of databases in an organization's

00:07:12.004 --> 00:07:12.805
<v Speaker 2>stack.

00:07:15.205 --> 00:07:17.285
<v Speaker 2>So a few other reasons,

00:07:18.405 --> 00:07:21.610
<v Speaker 2>especially with respect to agility that's driving the

00:07:21.610 --> 00:07:24.810
<v Speaker 2>teams to go into microservices and disaggregate it

00:07:24.810 --> 00:07:27.130
<v Speaker 2>is also this notion of data gravity. Once

00:07:27.130 --> 00:07:27.610
<v Speaker 2>we

00:07:28.330 --> 00:07:30.490
<v Speaker 2>end up using some existing

00:07:30.490 --> 00:07:32.890
<v Speaker 2>technology or, a data layer,

00:07:32.890 --> 00:07:34.810
<v Speaker 2>even though we kind of

00:07:36.115 --> 00:07:38.275
<v Speaker 2>are becoming better with agility in terms of

00:07:38.275 --> 00:07:41.315
<v Speaker 2>application development and the choice of databases. But

00:07:41.315 --> 00:07:43.635
<v Speaker 2>the real data gets stored onto some platforms,

00:07:43.635 --> 00:07:45.235
<v Speaker 2>and you kind of get locked into that

00:07:45.235 --> 00:07:48.115
<v Speaker 2>one. And this can actually slow down the

00:07:48.195 --> 00:07:50.960
<v Speaker 2>growth. This is one of the reasons why

00:07:50.960 --> 00:07:51.760
<v Speaker 2>we thought

00:07:52.400 --> 00:07:54.560
<v Speaker 2>we should not get locked into

00:07:54.640 --> 00:07:56.640
<v Speaker 2>any kind of storage when you're running your

00:07:56.640 --> 00:07:57.440
<v Speaker 2>applications.

00:07:57.920 --> 00:08:00.400
<v Speaker 2>And we'll try to see how we try

00:08:00.400 --> 00:08:02.480
<v Speaker 2>to provide you this data,

00:08:03.215 --> 00:08:06.095
<v Speaker 2>like, vendor agnostic way of setting up your

00:08:06.095 --> 00:08:07.215
<v Speaker 2>data infrastructure.

00:08:09.535 --> 00:08:10.255
<v Speaker 2>And

00:08:10.414 --> 00:08:11.854
<v Speaker 2>the other thing

00:08:12.574 --> 00:08:14.495
<v Speaker 2>is about the new

00:08:14.655 --> 00:08:18.120
<v Speaker 2>hardware that's available and new technologies or, like,

00:08:18.120 --> 00:08:20.680
<v Speaker 2>new techniques that are available to make optimal

00:08:20.680 --> 00:08:22.920
<v Speaker 2>use of this new hardware. For example, this

00:08:22.920 --> 00:08:25.320
<v Speaker 2>shows a 96 core machine with almost close

00:08:25.320 --> 00:08:27.960
<v Speaker 2>to one terabyte RAM that's available on the

00:08:27.960 --> 00:08:28.680
<v Speaker 2>node.

00:08:29.080 --> 00:08:30.360
<v Speaker 2>And none of the

00:08:31.065 --> 00:08:33.865
<v Speaker 2>existing technologies can fully optimize the power of

00:08:33.865 --> 00:08:36.985
<v Speaker 2>such boxes. Right? It's almost like, you know,

00:08:36.985 --> 00:08:37.865
<v Speaker 2>even the

00:08:38.424 --> 00:08:41.145
<v Speaker 2>I when you're talking about processing the IO,

00:08:41.625 --> 00:08:43.145
<v Speaker 2>how do you go from

00:08:44.059 --> 00:08:45.180
<v Speaker 2>working at, like

00:08:46.220 --> 00:08:48.139
<v Speaker 2>that are that are optimized for working at

00:08:48.139 --> 00:08:50.459
<v Speaker 2>four core of, like, eight core CPUs to

00:08:50.459 --> 00:08:52.220
<v Speaker 2>96 core CPUs. Right?

00:08:53.899 --> 00:08:56.699
<v Speaker 2>Things around the storage also have been changing.

00:08:56.699 --> 00:08:58.904
<v Speaker 2>A lot of stacks around the storage infrastructures

00:08:58.904 --> 00:09:00.185
<v Speaker 2>have been rewritten.

00:09:00.345 --> 00:09:01.305
<v Speaker 2>In fact, like,

00:09:02.824 --> 00:09:05.225
<v Speaker 2>by using the IO reading or lockless mode

00:09:06.824 --> 00:09:07.785
<v Speaker 2>techniques.

00:09:08.264 --> 00:09:10.264
<v Speaker 2>What we are trying to see is, okay,

00:09:10.264 --> 00:09:13.545
<v Speaker 2>now we have NVMe protocol that can work

00:09:12.900 --> 00:09:15.380
<v Speaker 2>at a much faster speed than the traditional

00:09:15.380 --> 00:09:16.180
<v Speaker 2>protocols.

00:09:16.180 --> 00:09:18.580
<v Speaker 2>Can we make use of the newer hardware

00:09:18.580 --> 00:09:19.460
<v Speaker 2>and the

00:09:20.340 --> 00:09:23.060
<v Speaker 2>transport protocols that are faster and enable you

00:09:23.060 --> 00:09:25.620
<v Speaker 2>to process more IOs to deliver you a

00:09:25.620 --> 00:09:27.060
<v Speaker 2>high performance storage?

00:09:29.075 --> 00:09:31.555
<v Speaker 2>Another interesting aspect was

00:09:32.035 --> 00:09:35.395
<v Speaker 2>about the shift towards user space to

00:09:36.275 --> 00:09:38.435
<v Speaker 2>provide you with a better

00:09:38.835 --> 00:09:41.635
<v Speaker 2>software delivery experience while

00:09:41.635 --> 00:09:43.555
<v Speaker 2>not compromising on the

00:09:45.200 --> 00:09:46.480
<v Speaker 2>performance itself.

00:09:46.720 --> 00:09:48.959
<v Speaker 2>User space tends to make us believe that,

00:09:48.959 --> 00:09:50.320
<v Speaker 2>okay, we are going to lose out on

00:09:50.320 --> 00:09:52.560
<v Speaker 2>some performance. But I think what we want

00:09:52.560 --> 00:09:54.399
<v Speaker 2>to show via the master project

00:09:54.639 --> 00:09:55.360
<v Speaker 2>that

00:09:55.440 --> 00:09:57.440
<v Speaker 2>and master isn't the first one that we

00:09:57.440 --> 00:09:58.560
<v Speaker 2>attempted. We tried

00:09:58.880 --> 00:10:01.175
<v Speaker 2>to do this with couple of other projects

00:10:01.175 --> 00:10:03.495
<v Speaker 2>and before coming up with,

00:10:04.055 --> 00:10:05.735
<v Speaker 2>you know, putting all those learnings from the

00:10:05.735 --> 00:10:07.815
<v Speaker 2>previous projects. Most of us on the call

00:10:07.815 --> 00:10:10.295
<v Speaker 2>today come from CFS background

00:10:12.570 --> 00:10:14.170
<v Speaker 2>that was focused on

00:10:14.490 --> 00:10:16.810
<v Speaker 2>maintaining the data consistency, but at the expense

00:10:16.810 --> 00:10:19.370
<v Speaker 2>of, like, performance. We try to get those

00:10:19.370 --> 00:10:22.250
<v Speaker 2>learnings to build milestone that's both

00:10:23.930 --> 00:10:27.015
<v Speaker 2>developed on open standards, providing you the performance,

00:10:27.015 --> 00:10:28.535
<v Speaker 2>and optimizing the

00:10:29.335 --> 00:10:30.855
<v Speaker 2>infrastructure that you have.

00:10:32.535 --> 00:10:34.375
<v Speaker 2>So rewrite was inevitable,

00:10:34.935 --> 00:10:35.415
<v Speaker 2>and

00:10:36.215 --> 00:10:38.375
<v Speaker 2>we will try to walk through My Store,

00:10:38.375 --> 00:10:40.630
<v Speaker 2>which is our latest engine, see how some

00:10:40.630 --> 00:10:43.030
<v Speaker 2>of these aspects that we developed really

00:10:43.430 --> 00:10:45.110
<v Speaker 2>came to life with that.

00:10:47.190 --> 00:10:49.830
<v Speaker 2>Just in terms of few more slides or,

00:10:49.830 --> 00:10:51.670
<v Speaker 2>like, you know, these are the early adopters

00:10:53.110 --> 00:10:56.015
<v Speaker 2>on the catalog that we have for the

00:10:56.015 --> 00:10:57.295
<v Speaker 2>OpenEBS project.

00:10:57.535 --> 00:11:00.015
<v Speaker 2>It's actually the list is quite big now

00:11:00.015 --> 00:11:01.375
<v Speaker 2>with 25

00:11:04.175 --> 00:11:06.255
<v Speaker 2>more public references.

00:11:06.575 --> 00:11:08.495
<v Speaker 2>And we also have, like, many

00:11:09.615 --> 00:11:12.060
<v Speaker 2>more more customers and partners talking about OpenEBS

00:11:12.060 --> 00:11:15.019
<v Speaker 2>as the or the container attached storage as

00:11:15.019 --> 00:11:17.500
<v Speaker 2>a way to deploy your applications. And

00:11:17.740 --> 00:11:20.700
<v Speaker 2>we actually support both local PVs, make it

00:11:20.700 --> 00:11:22.860
<v Speaker 2>easy to run local PVs as well as

00:11:22.860 --> 00:11:25.475
<v Speaker 2>support a replicated storage. Right?

00:11:26.435 --> 00:11:30.275
<v Speaker 2>The reason for doing that, the cognitive workloads

00:11:30.595 --> 00:11:31.955
<v Speaker 2>tend to have

00:11:32.515 --> 00:11:34.675
<v Speaker 2>the distribution logic built into them.

00:11:35.235 --> 00:11:37.394
<v Speaker 2>Many times, when they're getting started, they just

00:11:37.394 --> 00:11:40.199
<v Speaker 2>want a local storage which is operating at

00:11:40.199 --> 00:11:42.200
<v Speaker 2>the speed of the disk. So

00:11:42.440 --> 00:11:44.600
<v Speaker 2>for these, we make it easy to run,

00:11:45.720 --> 00:11:46.920
<v Speaker 2>you know, consume

00:11:47.240 --> 00:11:49.560
<v Speaker 2>the storage that's available on the notes and

00:11:49.560 --> 00:11:51.560
<v Speaker 2>carve it out and provide it to the

00:11:51.560 --> 00:11:52.279
<v Speaker 2>applications

00:11:52.825 --> 00:11:56.105
<v Speaker 2>without adding, like, data services, like, snapshot capabilities

00:11:56.105 --> 00:11:57.385
<v Speaker 2>or, like, you know,

00:12:00.265 --> 00:12:02.265
<v Speaker 2>few other things like, you know, optimized backups

00:12:02.265 --> 00:12:04.505
<v Speaker 2>or incremental backups, that kind of stuff. But

00:12:04.505 --> 00:12:08.410
<v Speaker 2>as we have noticed, as people start using

00:12:08.410 --> 00:12:10.650
<v Speaker 2>this, they get really comfortable. But once they

00:12:10.650 --> 00:12:11.450
<v Speaker 2>run the

00:12:12.010 --> 00:12:14.089
<v Speaker 2>applications for a longer period, they tend to

00:12:14.089 --> 00:12:16.650
<v Speaker 2>ask for other capabilities as well,

00:12:18.025 --> 00:12:21.705
<v Speaker 2>you know, like snapshots, backup restore, and encryption.

00:12:22.665 --> 00:12:24.825
<v Speaker 2>Those things are what are getting built into

00:12:24.825 --> 00:12:27.545
<v Speaker 2>our replicated stack via My Store, which operates

00:12:27.545 --> 00:12:28.185
<v Speaker 2>at

00:12:29.145 --> 00:12:31.385
<v Speaker 2>the speed that local TVs can

00:12:31.705 --> 00:12:33.610
<v Speaker 2>provide you along with

00:12:33.930 --> 00:12:36.970
<v Speaker 2>providing the additional data service capabilities.

00:12:37.529 --> 00:12:40.490
<v Speaker 2>With that, I will hand it back to

00:12:40.490 --> 00:12:41.930
<v Speaker 2>David and

00:12:42.490 --> 00:12:43.290
<v Speaker 2>Jeffrey

00:12:43.930 --> 00:12:45.690
<v Speaker 2>in case they want to add something more

00:12:45.690 --> 00:12:46.089
<v Speaker 2>to this,

00:12:48.144 --> 00:12:50.144
<v Speaker 2>and then we'll walk into the live demo

00:12:50.144 --> 00:12:50.785
<v Speaker 2>session.

00:12:53.105 --> 00:12:56.305
<v Speaker 3>Yeah. I I guess thanks, Kiran, for the

00:12:56.305 --> 00:12:59.024
<v Speaker 3>the quick introduction. I I guess the only

00:12:59.024 --> 00:13:01.200
<v Speaker 3>thing I want to add to it is

00:13:01.200 --> 00:13:03.920
<v Speaker 3>that, the idea with with Maya storage is

00:13:03.920 --> 00:13:05.120
<v Speaker 3>that we wanted to,

00:13:06.480 --> 00:13:07.360
<v Speaker 3>rearchitect

00:13:07.360 --> 00:13:08.960
<v Speaker 3>a storage stack,

00:13:09.120 --> 00:13:11.920
<v Speaker 3>in user space because it runs in containers.

00:13:11.920 --> 00:13:14.720
<v Speaker 3>And so you need the implicit ability to

00:13:14.720 --> 00:13:17.375
<v Speaker 3>be able to decouple yourself from the kernel

00:13:17.375 --> 00:13:20.015
<v Speaker 3>because all kernels are not the same,

00:13:20.815 --> 00:13:21.455
<v Speaker 3>throughout,

00:13:21.695 --> 00:13:22.975
<v Speaker 3>the cloud providers.

00:13:23.935 --> 00:13:27.774
<v Speaker 3>And, the focus there was, to to embrace

00:13:27.774 --> 00:13:30.654
<v Speaker 3>the new technologies like NVMe NVMe over fabric.

00:13:31.110 --> 00:13:33.430
<v Speaker 3>And the only real way to to squeeze

00:13:33.430 --> 00:13:35.670
<v Speaker 3>out these performance numbers is to,

00:13:36.390 --> 00:13:37.350
<v Speaker 3>use

00:13:37.350 --> 00:13:39.350
<v Speaker 3>these lockless models. And that's not because it's

00:13:39.350 --> 00:13:41.270
<v Speaker 3>it's it's cool. It's actually very hard. It's

00:13:41.270 --> 00:13:43.270
<v Speaker 3>it's very, hard. Asynchronous

00:13:43.270 --> 00:13:45.555
<v Speaker 3>programming is a nightmare, really, no matter what

00:13:45.555 --> 00:13:48.275
<v Speaker 3>language you use really. But the the the

00:13:48.275 --> 00:13:51.315
<v Speaker 3>the interesting thing that has happened recently,

00:13:51.635 --> 00:13:55.155
<v Speaker 3>not that recently, but, you know, relatively recently,

00:13:55.155 --> 00:13:56.515
<v Speaker 3>is that storage

00:13:56.515 --> 00:13:59.180
<v Speaker 3>is now much faster than the CPUs. And

00:13:59.180 --> 00:14:01.420
<v Speaker 3>that in history has never ever been the

00:14:01.420 --> 00:14:04.300
<v Speaker 3>case. And so it requires some rethinking, and

00:14:04.300 --> 00:14:05.899
<v Speaker 3>that's what what Kiran alluded to with the

00:14:05.899 --> 00:14:07.100
<v Speaker 3>hardware changes and,

00:14:07.420 --> 00:14:09.180
<v Speaker 3>audio u ring, which is a new interface

00:14:09.180 --> 00:14:10.940
<v Speaker 3>to the Linux kernel, for example,

00:14:11.339 --> 00:14:14.555
<v Speaker 3>that has a different way of of submitting

00:14:14.555 --> 00:14:16.634
<v Speaker 3>work to the to the kernel. And that

00:14:16.634 --> 00:14:18.875
<v Speaker 3>is because the hardware is much, much faster

00:14:18.875 --> 00:14:21.035
<v Speaker 3>these days. But in order to make use

00:14:21.035 --> 00:14:23.915
<v Speaker 3>of, IO u ring, for example, it's not

00:14:23.915 --> 00:14:26.180
<v Speaker 3>like, oh, I install IO U Ring and

00:14:26.180 --> 00:14:27.779
<v Speaker 3>off I go. It's like, no. No. No.

00:14:27.779 --> 00:14:29.940
<v Speaker 3>You really have to rewrite your application,

00:14:30.180 --> 00:14:30.740
<v Speaker 3>unfortunately.

00:14:31.060 --> 00:14:33.620
<v Speaker 3>Right? So all these things together,

00:14:34.420 --> 00:14:35.700
<v Speaker 3>cloud native design,

00:14:36.100 --> 00:14:39.995
<v Speaker 3>rewriting the software, languages with concurrency primitives built

00:14:39.995 --> 00:14:42.235
<v Speaker 3>in with with Go with GoFunk instead of

00:14:42.235 --> 00:14:44.475
<v Speaker 3>pthread create, you know, these type of things.

00:14:44.875 --> 00:14:47.675
<v Speaker 3>It's a very, exciting time, I think, and

00:14:48.155 --> 00:14:49.195
<v Speaker 3>gave us the,

00:14:49.835 --> 00:14:52.300
<v Speaker 3>for us, it provided justification

00:14:52.300 --> 00:14:54.140
<v Speaker 3>to to, you know, at the very least,

00:14:54.140 --> 00:14:54.940
<v Speaker 3>give this a,

00:14:55.660 --> 00:14:57.260
<v Speaker 3>you know, a shot. So,

00:14:57.740 --> 00:14:59.180
<v Speaker 3>Maya story is is

00:14:59.820 --> 00:15:01.820
<v Speaker 3>so, you know, it's still early, but we've

00:15:01.820 --> 00:15:04.060
<v Speaker 3>we've we've put a significant amount of work

00:15:04.060 --> 00:15:05.100
<v Speaker 3>in it already.

00:15:05.420 --> 00:15:09.225
<v Speaker 3>And, yeah. So that's that's roughly it. I

00:15:09.225 --> 00:15:10.665
<v Speaker 3>hope that makes sense. Yeah.

00:15:11.385 --> 00:15:13.065
<v Speaker 1>I have some color. I feel like a

00:15:13.065 --> 00:15:14.905
<v Speaker 1>fifth grader who did, like, a book report

00:15:14.905 --> 00:15:16.425
<v Speaker 1>last week and I get to present it

00:15:16.425 --> 00:15:19.065
<v Speaker 1>now. Something that, like, has has helped this

00:15:19.065 --> 00:15:21.350
<v Speaker 1>all make sense to me is thinking in

00:15:21.350 --> 00:15:23.589
<v Speaker 1>terms of, you know, what Kieran was saying,

00:15:23.589 --> 00:15:25.589
<v Speaker 1>direct attached storage is kind of the easy

00:15:25.589 --> 00:15:28.310
<v Speaker 1>thing you reach for, but it lacks features.

00:15:28.950 --> 00:15:29.910
<v Speaker 1>And eventually,

00:15:30.149 --> 00:15:32.070
<v Speaker 1>in certain projects, you may get to a

00:15:32.070 --> 00:15:33.910
<v Speaker 1>point where you want network attached storage. You

00:15:33.910 --> 00:15:34.230
<v Speaker 1>want

00:15:35.285 --> 00:15:38.245
<v Speaker 1>features like encryption and all the fancy sorry.

00:15:38.245 --> 00:15:40.085
<v Speaker 1>I've got a angry, hungry cat in the

00:15:40.085 --> 00:15:40.645
<v Speaker 1>background.

00:15:41.205 --> 00:15:42.725
<v Speaker 1>That's misfits for you.

00:15:44.245 --> 00:15:45.285
<v Speaker 1>So you you

00:15:46.245 --> 00:15:49.605
<v Speaker 1>you're looking ultimately for getting started simply, but

00:15:49.605 --> 00:15:51.710
<v Speaker 1>growing into something that's a little more professional

00:15:51.710 --> 00:15:53.710
<v Speaker 1>or a little more feature full down the

00:15:53.710 --> 00:15:56.110
<v Speaker 1>line. And OpenEBS has been designed such that

00:15:56.110 --> 00:15:58.510
<v Speaker 1>we can support multiple storage solutions.

00:15:58.910 --> 00:16:00.750
<v Speaker 1>So we have a ZFS based solution. We

00:16:00.750 --> 00:16:02.670
<v Speaker 1>have a long horn based solution. And what

00:16:02.670 --> 00:16:04.590
<v Speaker 1>we're exploring today is Maya store, which is

00:16:05.435 --> 00:16:07.915
<v Speaker 1>based on kinda like groundbreaking technology.

00:16:07.915 --> 00:16:10.955
<v Speaker 1>So their projects like DPDK and SPDK.

00:16:10.955 --> 00:16:13.035
<v Speaker 1>Are you familiar with those, David? I I

00:16:13.195 --> 00:16:14.795
<v Speaker 1>I'm cheating actually. I asked you this before

00:16:14.795 --> 00:16:17.435
<v Speaker 1>the call. Yeah. I am definitely not familiar

00:16:17.435 --> 00:16:17.915
<v Speaker 0>with them.

00:16:18.899 --> 00:16:19.699
<v Speaker 0>Can you

00:16:20.339 --> 00:16:22.500
<v Speaker 0>well, let's expand the acronyms first. What what

00:16:22.500 --> 00:16:23.380
<v Speaker 0>do those mean?

00:16:24.259 --> 00:16:25.060
<v Speaker 3>Alright. So,

00:16:25.860 --> 00:16:26.740
<v Speaker 3>good question.

00:16:27.379 --> 00:16:30.339
<v Speaker 3>So DPDK stands for data plane development kit,

00:16:30.819 --> 00:16:33.220
<v Speaker 3>and and the emphasis here is on development

00:16:33.220 --> 00:16:35.144
<v Speaker 3>kit. So it's not a turnkey solution that

00:16:35.144 --> 00:16:36.985
<v Speaker 3>you just, you know, pull in and off

00:16:36.985 --> 00:16:40.265
<v Speaker 3>you go. Everything is is is, hunky dory

00:16:40.345 --> 00:16:43.225
<v Speaker 3>and is oriented towards networking. And the genesis

00:16:43.225 --> 00:16:44.265
<v Speaker 3>there is that,

00:16:44.745 --> 00:16:47.080
<v Speaker 3>is based on the fact that as you

00:16:47.080 --> 00:16:49.720
<v Speaker 3>get more bandwidth towards your computer system, like

00:16:49.720 --> 00:16:52.120
<v Speaker 3>hundred gig, 400 gig, or what have you,

00:16:52.360 --> 00:16:54.920
<v Speaker 3>you typically have an interrupt driven approach. So

00:16:54.920 --> 00:16:57.160
<v Speaker 3>a packet comes in, the interrupt happens, the

00:16:57.160 --> 00:16:59.640
<v Speaker 3>CPU stops, processes the interrupt, and then goes

00:16:59.640 --> 00:17:02.120
<v Speaker 3>on its merry way. But as the

00:17:02.865 --> 00:17:04.865
<v Speaker 3>rate of packets increases,

00:17:05.505 --> 00:17:07.825
<v Speaker 3>what you see is that the dominant behavior

00:17:07.825 --> 00:17:10.305
<v Speaker 3>of the CPU or the operating system rather

00:17:10.305 --> 00:17:13.665
<v Speaker 3>is getting interrupted all the time. Right? So

00:17:13.665 --> 00:17:15.825
<v Speaker 3>it doesn't make any forward progress because it's

00:17:15.825 --> 00:17:17.265
<v Speaker 3>constantly getting interrupted.

00:17:17.665 --> 00:17:19.929
<v Speaker 3>So one way to get around that is

00:17:19.929 --> 00:17:21.130
<v Speaker 3>is and what you see is that you

00:17:21.130 --> 00:17:22.809
<v Speaker 3>get interrupts that are white hot. So it

00:17:22.809 --> 00:17:25.369
<v Speaker 3>constantly gets interrupted. One way to to get

00:17:25.369 --> 00:17:27.369
<v Speaker 3>around that is to batch things. So you

00:17:27.369 --> 00:17:29.210
<v Speaker 3>get an interrupt. It's like, okay. I'm not

00:17:29.210 --> 00:17:31.450
<v Speaker 3>doing anything. Not doing anything. Not doing anything.

00:17:31.450 --> 00:17:34.384
<v Speaker 3>And then boom. You handle multiple requests in

00:17:34.384 --> 00:17:35.904
<v Speaker 3>one interrupt effectively.

00:17:35.904 --> 00:17:38.144
<v Speaker 3>The downside of that is that your bandwidth

00:17:38.144 --> 00:17:41.184
<v Speaker 3>goes up, your latency increases. Right? So that's

00:17:41.184 --> 00:17:41.984
<v Speaker 3>not ideal.

00:17:42.225 --> 00:17:45.264
<v Speaker 3>So the the idea of of of DPDK

00:17:45.264 --> 00:17:48.010
<v Speaker 3>and projects that are built on top of

00:17:48.010 --> 00:17:51.210
<v Speaker 3>it, for example, a VPP vector packet processing

00:17:51.210 --> 00:17:54.090
<v Speaker 3>from Cisco was that, well, instead of having

00:17:54.090 --> 00:17:56.090
<v Speaker 3>the kernel do all that hard work, why

00:17:56.090 --> 00:17:59.130
<v Speaker 3>not isolate a CPU one, two, or three,

00:17:59.210 --> 00:18:01.465
<v Speaker 3>or maybe four, who knows whom how much

00:18:01.465 --> 00:18:03.945
<v Speaker 3>you need. Because these days, we have,

00:18:04.745 --> 00:18:07.065
<v Speaker 3>course to spare. Right? I mean, the new

00:18:07.065 --> 00:18:09.465
<v Speaker 3>Threadripper is, like, 64 course, and it's it's

00:18:09.465 --> 00:18:12.024
<v Speaker 3>a consumer product. It's, like, an insane amount.

00:18:12.265 --> 00:18:14.105
<v Speaker 3>So instead of having the kernel do that,

00:18:14.105 --> 00:18:15.625
<v Speaker 3>what if you do that in user space

00:18:15.625 --> 00:18:16.024
<v Speaker 3>and

00:18:17.470 --> 00:18:20.110
<v Speaker 3>isolate one or two, three course

00:18:20.110 --> 00:18:22.350
<v Speaker 3>to do just the networking?

00:18:22.669 --> 00:18:25.070
<v Speaker 3>And the benefit of that is the CPU

00:18:25.070 --> 00:18:27.309
<v Speaker 3>doesn't do anything else than that. And so

00:18:27.309 --> 00:18:29.789
<v Speaker 3>the caches, the level one, two, three caches

00:18:29.789 --> 00:18:30.830
<v Speaker 3>of that CPU

00:18:31.235 --> 00:18:32.035
<v Speaker 3>remain

00:18:32.195 --> 00:18:33.635
<v Speaker 3>hot, if you will.

00:18:33.955 --> 00:18:36.675
<v Speaker 3>And, combine that with some additional technologies like

00:18:36.675 --> 00:18:38.275
<v Speaker 3>huge pages and whatnot,

00:18:38.515 --> 00:18:40.835
<v Speaker 3>you can actually see that it it it

00:18:40.835 --> 00:18:44.035
<v Speaker 3>it not only in certain situations outperforms

00:18:44.035 --> 00:18:46.000
<v Speaker 3>the kernel, but turns out to be far

00:18:46.000 --> 00:18:48.480
<v Speaker 3>more efficient because the kernel can now, you

00:18:48.480 --> 00:18:50.159
<v Speaker 3>know, worry about processes,

00:18:50.800 --> 00:18:52.880
<v Speaker 3>and and and things like that instead of

00:18:52.880 --> 00:18:54.080
<v Speaker 3>just constantly,

00:18:54.560 --> 00:18:57.279
<v Speaker 3>doing the interrupt. So that's that's CPDK.

00:18:57.280 --> 00:18:58.080
<v Speaker 3>On top of that,

00:18:59.294 --> 00:19:02.495
<v Speaker 3>they Intel also has SPDK,

00:19:02.495 --> 00:19:04.734
<v Speaker 3>which is DPDK plus

00:19:04.894 --> 00:19:08.974
<v Speaker 3>some storage specific protocols like NVMe and iSCSI,

00:19:09.615 --> 00:19:11.680
<v Speaker 3>Virtio as well. And,

00:19:12.160 --> 00:19:14.240
<v Speaker 3>but as mentioned, they are development kits, not

00:19:14.240 --> 00:19:16.400
<v Speaker 3>turnkey solutions. So so what we've done is

00:19:16.400 --> 00:19:17.840
<v Speaker 3>we we we took those,

00:19:18.640 --> 00:19:20.960
<v Speaker 3>development kits to so to speak, and and,

00:19:21.520 --> 00:19:23.200
<v Speaker 3>you we are using those,

00:19:23.440 --> 00:19:24.960
<v Speaker 3>in Maya store to

00:19:27.175 --> 00:19:29.095
<v Speaker 3>benefit from the work that they already have

00:19:29.095 --> 00:19:31.255
<v Speaker 3>done because it's it's a significant amount of

00:19:31.255 --> 00:19:33.655
<v Speaker 3>work, it is micro optimization

00:19:33.655 --> 00:19:36.135
<v Speaker 3>to it's like I've never seen that much

00:19:36.135 --> 00:19:36.935
<v Speaker 3>optimizations

00:19:36.935 --> 00:19:39.735
<v Speaker 3>before where they pat things on cache lines

00:19:39.735 --> 00:19:42.055
<v Speaker 3>and, you know, it's it's like insane, really.

00:19:42.300 --> 00:19:44.940
<v Speaker 3>And Intel has very specific software called called

00:19:44.940 --> 00:19:46.700
<v Speaker 3>VTune to do that. So I I I

00:19:46.700 --> 00:19:48.860
<v Speaker 3>can't really do that. But suffice to say,

00:19:48.860 --> 00:19:51.500
<v Speaker 3>it's highly optimized for a very, very specific

00:19:51.500 --> 00:19:52.140
<v Speaker 3>task.

00:19:52.700 --> 00:19:56.860
<v Speaker 3>And, that's what these, development kits, stand for,

00:19:57.100 --> 00:19:57.900
<v Speaker 3>if that makes sense.

00:19:59.875 --> 00:20:01.875
<v Speaker 0>Yeah. I mean, I understood at least

00:20:02.195 --> 00:20:04.995
<v Speaker 0>some of the words. Oh, there you go.

00:20:05.075 --> 00:20:07.635
<v Speaker 3>But the short version for,

00:20:07.875 --> 00:20:10.035
<v Speaker 1>someone like me who doesn't have the the

00:20:10.035 --> 00:20:11.875
<v Speaker 1>deep kinda expertise of the rest of the

00:20:11.875 --> 00:20:14.030
<v Speaker 1>panel here is you end up paying a

00:20:14.030 --> 00:20:16.190
<v Speaker 1>tax when you're using a Linux kernel. It's

00:20:16.190 --> 00:20:18.269
<v Speaker 1>been in development since 1991.

00:20:18.590 --> 00:20:20.670
<v Speaker 1>So it's kinda got this tried and true

00:20:20.670 --> 00:20:23.710
<v Speaker 1>figured out model that requires locking and doing

00:20:23.710 --> 00:20:25.390
<v Speaker 1>all these kinda slow processes

00:20:25.595 --> 00:20:28.155
<v Speaker 1>where you'll pay, like, a 30% tax just

00:20:28.155 --> 00:20:30.155
<v Speaker 1>by having the Linux kernel manage things for

00:20:30.155 --> 00:20:30.635
<v Speaker 1>you.

00:20:31.195 --> 00:20:33.835
<v Speaker 1>There's probably even deeper taxes that you pay,

00:20:33.995 --> 00:20:36.635
<v Speaker 1>having things sort of filter through the machine

00:20:36.635 --> 00:20:37.435
<v Speaker 1>that is the kernel.

00:20:38.309 --> 00:20:40.710
<v Speaker 1>And what these technologies are doing is they're

00:20:40.710 --> 00:20:42.950
<v Speaker 1>connecting your program and user space,

00:20:43.270 --> 00:20:45.429
<v Speaker 1>short circuiting the kernel, going directly to the

00:20:45.429 --> 00:20:47.269
<v Speaker 1>hardware, connecting you to the hardware.

00:20:47.830 --> 00:20:51.029
<v Speaker 1>And it's DPDK is a solution supported by

00:20:51.029 --> 00:20:51.909
<v Speaker 1>the Linux Foundation.

00:20:52.425 --> 00:20:53.225
<v Speaker 1>SPDK,

00:20:53.225 --> 00:20:55.545
<v Speaker 1>as Jeffrey mentioned, is supported by Intel.

00:20:55.705 --> 00:20:57.945
<v Speaker 1>So, there are big names investing in all

00:20:57.945 --> 00:20:58.985
<v Speaker 1>these technologies,

00:20:59.625 --> 00:21:01.785
<v Speaker 1>and a lot of effort going into making

00:21:01.785 --> 00:21:03.865
<v Speaker 1>these things really shine. And,

00:21:04.185 --> 00:21:06.265
<v Speaker 1>what we're seeing is they really do shine.

00:21:06.265 --> 00:21:08.549
<v Speaker 1>If if you've got a need for speed,

00:21:09.110 --> 00:21:11.590
<v Speaker 1>these do some really cool stuff for you.

00:21:12.070 --> 00:21:13.830
<v Speaker 3>Yeah. There there are other examples.

00:21:13.990 --> 00:21:15.750
<v Speaker 3>For example, Skyla DB,

00:21:16.150 --> 00:21:17.910
<v Speaker 3>which is a reimplementation

00:21:17.910 --> 00:21:19.830
<v Speaker 3>to a certain extent of Cassandra,

00:21:20.524 --> 00:21:22.605
<v Speaker 3>where they leverage that

00:21:22.605 --> 00:21:23.244
<v Speaker 3>same

00:21:24.524 --> 00:21:26.605
<v Speaker 3>framework to do some of the things that

00:21:26.605 --> 00:21:27.884
<v Speaker 3>they're doing like

00:21:28.445 --> 00:21:31.245
<v Speaker 3>network IO and things like that. And I

00:21:31.245 --> 00:21:33.245
<v Speaker 3>also would like to to emphasize that it's

00:21:33.245 --> 00:21:33.804
<v Speaker 3>not a

00:21:34.410 --> 00:21:36.890
<v Speaker 3>deficiency of the kernel for it not being

00:21:36.890 --> 00:21:39.050
<v Speaker 3>able to to keep up, if you will.

00:21:39.210 --> 00:21:40.330
<v Speaker 3>But it's more like

00:21:40.810 --> 00:21:42.730
<v Speaker 3>it needs to do so so many things.

00:21:42.730 --> 00:21:44.330
<v Speaker 3>It's like, you know, give it a break.

00:21:44.330 --> 00:21:46.650
<v Speaker 3>Right? And and that's basically what it boils

00:21:46.650 --> 00:21:47.130
<v Speaker 3>down to.

00:21:48.245 --> 00:21:50.325
<v Speaker 3>And, so it's it's not

00:21:51.205 --> 00:21:53.125
<v Speaker 3>not to say that, you know, the the

00:21:53.125 --> 00:21:55.284
<v Speaker 3>kernel is is is is bad. Not at

00:21:55.284 --> 00:21:56.325
<v Speaker 3>all, in fact.

00:21:57.205 --> 00:21:59.684
<v Speaker 3>It's just like yeah. I mean, there's there's

00:21:59.684 --> 00:22:01.890
<v Speaker 3>there's this thing called physics and, you know,

00:22:01.890 --> 00:22:04.450
<v Speaker 3>you can't beat that. And there is this

00:22:04.450 --> 00:22:07.010
<v Speaker 3>notion of of serialization that needs to happen

00:22:07.010 --> 00:22:09.810
<v Speaker 3>in certain cases. And and therefore, is turns

00:22:09.810 --> 00:22:12.050
<v Speaker 3>out to be somewhat more efficient to do

00:22:12.050 --> 00:22:14.865
<v Speaker 3>it that way if low latency and high

00:22:14.865 --> 00:22:16.865
<v Speaker 3>performance is your primary objective.

00:22:17.105 --> 00:22:19.265
<v Speaker 3>And when you're dealing with these low latency

00:22:19.265 --> 00:22:21.985
<v Speaker 3>devices or high bandwidth devices, however you wanna

00:22:21.985 --> 00:22:23.825
<v Speaker 3>call it, then that indeed,

00:22:24.065 --> 00:22:25.265
<v Speaker 3>is what you need.

00:22:26.305 --> 00:22:27.025
<v Speaker 3>So yeah.

00:22:29.330 --> 00:22:30.370
<v Speaker 0>Okay. Cool.

00:22:31.810 --> 00:22:34.690
<v Speaker 0>That's all really really useful. I'm gonna try

00:22:34.690 --> 00:22:36.450
<v Speaker 0>my best now to take all of that

00:22:36.450 --> 00:22:38.050
<v Speaker 0>information that we've just covered for the first

00:22:38.050 --> 00:22:40.450
<v Speaker 0>kind of fifteen minutes and just surmise that

00:22:40.450 --> 00:22:41.890
<v Speaker 0>as best as I can and then I

00:22:41.890 --> 00:22:44.370
<v Speaker 0>promise we will go straight on to the

00:22:43.855 --> 00:22:46.494
<v Speaker 0>to the actual hands on portion of this.

00:22:47.134 --> 00:22:49.215
<v Speaker 0>And I've already realized which is really good

00:22:49.215 --> 00:22:50.894
<v Speaker 0>as you saw we're talking there that I've

00:22:50.894 --> 00:22:52.735
<v Speaker 0>made my first mistake in the preparation. So

00:22:52.735 --> 00:22:54.894
<v Speaker 0>that's gonna be interesting. But we we'll call

00:22:54.894 --> 00:22:57.134
<v Speaker 0>it a knowledge transfer to the audience.

00:22:57.799 --> 00:22:59.640
<v Speaker 0>And I forgot to enable huge pages but

00:22:59.640 --> 00:23:01.159
<v Speaker 0>we can do that live. Right?

00:23:01.559 --> 00:23:03.559
<v Speaker 3>Yeah. Yeah. Yeah. Yeah. Sure. Yeah. We do

00:23:03.559 --> 00:23:04.440
<v Speaker 3>it all the time.

00:23:05.799 --> 00:23:09.160
<v Speaker 0>Yeah. Okay. So in summary and Paul you're

00:23:09.160 --> 00:23:10.520
<v Speaker 0>gonna keep me right here. Right? So.

00:23:11.085 --> 00:23:13.485
<v Speaker 1>Yeah, for sure. Stateful so Stateful services on

00:23:13.485 --> 00:23:17.325
<v Speaker 0>Kubernetes is hard because we have ephemeral compute

00:23:17.325 --> 00:23:19.164
<v Speaker 0>and containers that has to move around. So

00:23:19.164 --> 00:23:21.164
<v Speaker 0>we need to see a size specification and

00:23:21.164 --> 00:23:24.030
<v Speaker 0>open APS as an implementation of CSI, which

00:23:24.030 --> 00:23:26.510
<v Speaker 0>is ability to provide storage to workloads on

00:23:26.510 --> 00:23:27.790
<v Speaker 0>our Kubernetes cluster.

00:23:28.990 --> 00:23:31.710
<v Speaker 0>Now there seems to be multiple storage engines

00:23:31.710 --> 00:23:33.150
<v Speaker 0>with OpenEBS.

00:23:33.470 --> 00:23:35.230
<v Speaker 0>There's a C store which is the one

00:23:35.230 --> 00:23:37.070
<v Speaker 0>which is tried and tested and then Maya

00:23:37.070 --> 00:23:38.670
<v Speaker 0>store which is the one which is currently

00:23:38.670 --> 00:23:39.310
<v Speaker 0>in development,

00:23:39.845 --> 00:23:43.205
<v Speaker 0>but has some pretty wicked performance gains based

00:23:43.205 --> 00:23:45.525
<v Speaker 0>on the development kits that we were talking

00:23:45.525 --> 00:23:47.765
<v Speaker 0>about just there. Which I believe are written

00:23:47.765 --> 00:23:49.205
<v Speaker 0>in Rust which just adds an extra cool

00:23:49.205 --> 00:23:50.804
<v Speaker 0>factor or if I made that up.

00:23:51.285 --> 00:23:53.925
<v Speaker 1>Yeah. Oh, no. You're right. Yeah. It's it's

00:23:53.820 --> 00:23:55.580
<v Speaker 1>cool tech done cool. We've got all the

00:23:55.580 --> 00:23:58.059
<v Speaker 1>latest tech kinda packed in. Yeah. Yeah. We

00:23:58.220 --> 00:24:00.220
<v Speaker 3>yeah. We basically took the the the most

00:24:00.220 --> 00:24:02.940
<v Speaker 3>cool keywords and sorted them and just collect

00:24:02.940 --> 00:24:04.299
<v Speaker 3>them together and yeah.

00:24:04.700 --> 00:24:06.460
<v Speaker 3>No. But indeed, it's it's it's it's written

00:24:06.460 --> 00:24:08.755
<v Speaker 3>in Rust and for various reasons. But one

00:24:08.755 --> 00:24:10.595
<v Speaker 3>one of which is based on the experience

00:24:10.595 --> 00:24:13.395
<v Speaker 3>I've had with with other storage systems. And

00:24:13.395 --> 00:24:14.275
<v Speaker 3>99%

00:24:14.275 --> 00:24:15.955
<v Speaker 3>of the time, the issue was a more

00:24:15.955 --> 00:24:17.955
<v Speaker 3>pointer dereference or using

00:24:17.955 --> 00:24:19.554
<v Speaker 3>something that's not there anymore.

00:24:19.715 --> 00:24:21.795
<v Speaker 3>And Rust is supposed to help you

00:24:22.380 --> 00:24:24.539
<v Speaker 3>catch these things earlier.

00:24:25.020 --> 00:24:27.180
<v Speaker 0>Yeah. Oh, yeah. Yeah. So the ownership semantics,

00:24:27.180 --> 00:24:29.260
<v Speaker 0>if it compiles, won't crash. Those are all

00:24:29.260 --> 00:24:30.860
<v Speaker 0>really good benefits I would imagine for a

00:24:30.860 --> 00:24:32.620
<v Speaker 0>storage layer. Yeah. Yeah. Yeah. Yeah.

00:24:33.900 --> 00:24:35.740
<v Speaker 0>So we've got our CSI implementation. We've got

00:24:35.740 --> 00:24:36.940
<v Speaker 0>our multiple back end stores.

00:24:38.285 --> 00:24:39.645
<v Speaker 0>I mean, question in my head right now

00:24:39.645 --> 00:24:41.405
<v Speaker 0>is are are we gonna we're using my

00:24:41.405 --> 00:24:43.085
<v Speaker 0>store today and we're gonna show that off.

00:24:43.085 --> 00:24:44.605
<v Speaker 0>Is is that in a position where people

00:24:44.605 --> 00:24:46.845
<v Speaker 0>should begin to adopt it in production or

00:24:46.845 --> 00:24:48.525
<v Speaker 0>is this very much wait and see kind

00:24:48.525 --> 00:24:49.485
<v Speaker 0>of thing?

00:24:50.370 --> 00:24:52.049
<v Speaker 3>So

00:24:52.210 --> 00:24:54.610
<v Speaker 3>good question. And and and the thing is

00:24:54.610 --> 00:24:57.330
<v Speaker 3>there are certain factors that come into play.

00:24:57.650 --> 00:24:58.850
<v Speaker 3>So the,

00:25:00.290 --> 00:25:02.875
<v Speaker 3>we talked about NVMe, and we also mentioned

00:25:02.875 --> 00:25:05.434
<v Speaker 3>NVMe over fabric. If if not, then it's

00:25:05.434 --> 00:25:08.155
<v Speaker 3>basically NVMe over a network, whatever that network

00:25:08.155 --> 00:25:09.515
<v Speaker 3>is. Could be RDMA,

00:25:09.515 --> 00:25:11.835
<v Speaker 3>fiber, or TCP IP.

00:25:12.235 --> 00:25:14.315
<v Speaker 3>And one of the issues,

00:25:14.875 --> 00:25:16.875
<v Speaker 3>that is still there is that NVMe over

00:25:16.875 --> 00:25:17.755
<v Speaker 3>TCP

00:25:17.710 --> 00:25:20.269
<v Speaker 3>was only ratified last November. So it is

00:25:20.269 --> 00:25:21.469
<v Speaker 3>relatively young.

00:25:22.590 --> 00:25:25.389
<v Speaker 3>IOU ring, which is something we use, same

00:25:25.389 --> 00:25:27.389
<v Speaker 3>thing. It's relatively young. So we we are

00:25:27.389 --> 00:25:28.830
<v Speaker 3>on the border of

00:25:29.404 --> 00:25:31.724
<v Speaker 3>it's out there, but nobody's really using it.

00:25:31.804 --> 00:25:33.565
<v Speaker 3>Right? So it needs to needs to as

00:25:33.565 --> 00:25:35.885
<v Speaker 3>Kieran always says, it needs to cook. Right?

00:25:35.885 --> 00:25:37.004
<v Speaker 3>We need to cook it.

00:25:37.404 --> 00:25:39.244
<v Speaker 3>And it requires more cooking.

00:25:39.804 --> 00:25:40.524
<v Speaker 3>But,

00:25:40.765 --> 00:25:42.924
<v Speaker 3>we are working on it, with a with

00:25:42.924 --> 00:25:45.739
<v Speaker 3>a with a team on a daily basis

00:25:45.740 --> 00:25:48.379
<v Speaker 3>and trying to make it, more robust,

00:25:48.460 --> 00:25:50.779
<v Speaker 3>every day. But it still requires

00:25:50.780 --> 00:25:53.260
<v Speaker 3>some, you know, some love and attention, let's

00:25:53.260 --> 00:25:55.580
<v Speaker 3>say. But we're we're we're getting there rather

00:25:55.580 --> 00:25:56.139
<v Speaker 3>fast,

00:25:56.539 --> 00:25:58.895
<v Speaker 3>I would say. Yeah. It's ready for your

00:25:58.895 --> 00:26:00.735
<v Speaker 1>proof of concept. Let's put it that way.

00:26:00.735 --> 00:26:01.614
<v Speaker 1>Yeah. Yeah.

00:26:02.095 --> 00:26:03.375
<v Speaker 0>Alright. Well, I mean, I'm gonna put it

00:26:03.375 --> 00:26:04.655
<v Speaker 0>in production anyway. So I'll let you know

00:26:04.655 --> 00:26:05.855
<v Speaker 3>how to get on. Okay.

00:26:08.015 --> 00:26:10.255
<v Speaker 0>So let's finish this the the summary here.

00:26:10.255 --> 00:26:12.730
<v Speaker 0>The multiple back end stores can run-in two

00:26:12.730 --> 00:26:15.130
<v Speaker 0>different variations. One of them being local PV

00:26:15.130 --> 00:26:17.690
<v Speaker 0>mode and one being replicated PV mode. Does

00:26:17.690 --> 00:26:19.530
<v Speaker 0>that apply to all of the backing stores

00:26:19.530 --> 00:26:20.409
<v Speaker 0>or

00:26:20.890 --> 00:26:22.010
<v Speaker 0>just Maya store?

00:26:25.075 --> 00:26:26.434
<v Speaker 1>So I I think

00:26:26.914 --> 00:26:29.075
<v Speaker 1>per kinda what Jeffrey was tuning in on

00:26:29.075 --> 00:26:30.114
<v Speaker 1>on where

00:26:31.235 --> 00:26:33.955
<v Speaker 1>it doesn't work over NVMe over TCP IP

00:26:33.955 --> 00:26:35.234
<v Speaker 1>is relatively young.

00:26:36.034 --> 00:26:38.550
<v Speaker 1>I I think currently local PV is the

00:26:38.550 --> 00:26:39.910
<v Speaker 1>only supported mode for,

00:26:40.390 --> 00:26:41.669
<v Speaker 1>MyStor. Is that right?

00:26:42.710 --> 00:26:45.510
<v Speaker 3>Well, so so it becomes a

00:26:46.870 --> 00:26:48.470
<v Speaker 3>little bit complicated,

00:26:48.470 --> 00:26:49.990
<v Speaker 3>I suppose, to to to

00:26:50.515 --> 00:26:53.154
<v Speaker 3>express without my hands to begin with. But

00:26:53.075 --> 00:26:55.155
<v Speaker 3>so so so what we do is so

00:26:55.155 --> 00:26:56.915
<v Speaker 3>let's say you have a Kubernetes node and

00:26:56.915 --> 00:26:58.754
<v Speaker 3>that has local storage. Right?

00:26:58.995 --> 00:27:01.155
<v Speaker 3>The first thing that we do is that

00:27:01.155 --> 00:27:03.475
<v Speaker 3>we can, don't have to, and that's where

00:27:03.475 --> 00:27:03.795
<v Speaker 3>the

00:27:05.210 --> 00:27:07.770
<v Speaker 3>complexity comes. But let's assume we always do

00:27:07.770 --> 00:27:09.850
<v Speaker 3>for the sake of argument. We take that

00:27:09.850 --> 00:27:12.890
<v Speaker 3>local storage, whatever it is, slow or fast,

00:27:12.890 --> 00:27:13.770
<v Speaker 3>doesn't matter.

00:27:14.170 --> 00:27:16.010
<v Speaker 3>That we are designed to be fast doesn't

00:27:16.010 --> 00:27:18.010
<v Speaker 3>mean that we can't operate in slow mode.

00:27:18.010 --> 00:27:19.290
<v Speaker 3>We'll do that just fine.

00:27:19.770 --> 00:27:22.065
<v Speaker 3>We take that local storage and we can

00:27:22.145 --> 00:27:22.865
<v Speaker 3>create

00:27:22.945 --> 00:27:24.465
<v Speaker 3>what we call logical

00:27:24.465 --> 00:27:27.105
<v Speaker 3>volumes on that storage device such that you

00:27:27.105 --> 00:27:29.985
<v Speaker 3>can create multiple PVCs and Kubernetes speak on

00:27:29.985 --> 00:27:31.184
<v Speaker 3>on that device.

00:27:31.425 --> 00:27:33.745
<v Speaker 3>Right? So so we we we we wire

00:27:33.745 --> 00:27:35.940
<v Speaker 3>that up to, so to speak. And the

00:27:35.940 --> 00:27:38.659
<v Speaker 3>way that we connect to that local storage,

00:27:38.659 --> 00:27:40.259
<v Speaker 3>so let's say it's a local

00:27:40.580 --> 00:27:41.779
<v Speaker 3>NVMe device,

00:27:41.860 --> 00:27:43.620
<v Speaker 3>there are several ways that we can connect

00:27:43.620 --> 00:27:46.260
<v Speaker 3>to that. One is directly through the PCIe

00:27:46.260 --> 00:27:49.355
<v Speaker 3>subsystem and user space IO. We'll we'll forget

00:27:49.355 --> 00:27:50.394
<v Speaker 3>about that for now.

00:27:50.794 --> 00:27:51.514
<v Speaker 3>Or

00:27:51.835 --> 00:27:53.674
<v Speaker 3>U ring, as we talked about, IO U

00:27:53.674 --> 00:27:56.635
<v Speaker 3>ring, or AIO, which is the asynchronous interface

00:27:56.635 --> 00:27:58.315
<v Speaker 3>in Linux that has been there since I

00:27:58.315 --> 00:27:58.955
<v Speaker 3>don't know how long.

00:28:00.330 --> 00:28:01.929
<v Speaker 3>Once we've done that, that's what we call

00:28:01.929 --> 00:28:04.330
<v Speaker 3>a pool. From that pool, we can create,

00:28:04.650 --> 00:28:06.970
<v Speaker 3>replicas, as we say. And the replicas can

00:28:06.970 --> 00:28:08.970
<v Speaker 3>be or ideally are scheduled

00:28:08.970 --> 00:28:11.130
<v Speaker 3>across different nodes. Now you don't have to

00:28:11.130 --> 00:28:13.049
<v Speaker 3>do a replica, but if you want to,

00:28:13.049 --> 00:28:14.650
<v Speaker 3>you should be able to. That's the idea.

00:28:14.835 --> 00:28:18.195
<v Speaker 3>Per developer, per workload, you can determine,

00:28:18.515 --> 00:28:19.874
<v Speaker 3>if that is required.

00:28:20.034 --> 00:28:21.875
<v Speaker 3>So let's say we create a mirror, two

00:28:21.875 --> 00:28:22.754
<v Speaker 3>replicas.

00:28:22.914 --> 00:28:26.115
<v Speaker 3>These two volumes are created through our control

00:28:26.115 --> 00:28:26.754
<v Speaker 3>plane,

00:28:27.154 --> 00:28:27.794
<v Speaker 3>which

00:28:28.020 --> 00:28:31.300
<v Speaker 3>talks and understands CSI and creates CRDs in

00:28:31.300 --> 00:28:33.780
<v Speaker 3>in the control plane and whatnot, while doing

00:28:33.780 --> 00:28:38.820
<v Speaker 3>so. And these replicas are exported over NVMe

00:28:38.820 --> 00:28:39.860
<v Speaker 3>TCP,

00:28:40.020 --> 00:28:41.780
<v Speaker 3>but in user space. Right? So we we

00:28:41.780 --> 00:28:43.220
<v Speaker 3>we we don't use the kernel for that.

00:28:43.825 --> 00:28:47.505
<v Speaker 3>Then we create another NVMe controller that connects

00:28:47.505 --> 00:28:49.184
<v Speaker 3>to those two replicas

00:28:49.345 --> 00:28:52.225
<v Speaker 3>and that NVMe controller is where the workload

00:28:52.225 --> 00:28:52.785
<v Speaker 3>is,

00:28:53.345 --> 00:28:56.065
<v Speaker 3>which means that the node that wants to

00:28:56.065 --> 00:28:58.465
<v Speaker 3>write to the PVC connects to this what

00:28:58.465 --> 00:28:59.425
<v Speaker 3>we call Nexus.

00:28:59.929 --> 00:29:01.850
<v Speaker 3>It writes to the Nexus, and the Nexus

00:29:01.850 --> 00:29:04.170
<v Speaker 3>then writes to the replicas wherever they may

00:29:04.170 --> 00:29:06.650
<v Speaker 3>they may be. And that whole data path

00:29:06.650 --> 00:29:08.490
<v Speaker 3>is in NVMe

00:29:08.490 --> 00:29:09.610
<v Speaker 3>over fabric.

00:29:10.650 --> 00:29:13.290
<v Speaker 3>And so there is some some

00:29:13.665 --> 00:29:14.385
<v Speaker 3>some,

00:29:14.945 --> 00:29:17.825
<v Speaker 3>you know, nuances there in terms of, okay,

00:29:17.825 --> 00:29:19.745
<v Speaker 3>the stability because of the newness and and

00:29:19.745 --> 00:29:20.385
<v Speaker 3>whatnot.

00:29:20.705 --> 00:29:21.745
<v Speaker 3>But in principle,

00:29:21.985 --> 00:29:23.184
<v Speaker 3>that's what we usually

00:29:23.665 --> 00:29:25.665
<v Speaker 3>do. However, we can also

00:29:26.010 --> 00:29:29.610
<v Speaker 3>directly remotely connect to existing iSCSI and or

00:29:29.610 --> 00:29:32.970
<v Speaker 3>external NVMe over fabric targets. But when I

00:29:32.970 --> 00:29:34.890
<v Speaker 3>start to explain that, I lose people typically.

00:29:34.890 --> 00:29:36.250
<v Speaker 3>So I'll leave it at that.

00:29:37.290 --> 00:29:40.505
<v Speaker 1>Yeah. No. That's It sounds generally

00:29:40.505 --> 00:29:44.425
<v Speaker 1>yes. Yeah. Both are generally supported, but it

00:29:44.665 --> 00:29:46.745
<v Speaker 1>it's like a Facebook status. It's complicated

00:29:46.905 --> 00:29:48.184
<v Speaker 1>in the case of my own.

00:29:48.665 --> 00:29:50.825
<v Speaker 3>It's complicated. Yeah. I like that one. Yeah.

00:29:51.070 --> 00:29:53.870
<v Speaker 3>Yeah. And so for all intents and purposes,

00:29:53.870 --> 00:29:56.270
<v Speaker 3>you you could say it's a proxy. Right?

00:29:56.270 --> 00:29:56.990
<v Speaker 3>Proxy.

00:29:57.150 --> 00:29:59.470
<v Speaker 3>IO comes in, two IOs go go out.

00:29:59.470 --> 00:30:02.270
<v Speaker 3>Very simple. And then obviously, the rebuild and,

00:30:02.270 --> 00:30:04.785
<v Speaker 3>you know, there's some of that. But in

00:30:04.785 --> 00:30:06.144
<v Speaker 3>principle, that's what it is.

00:30:06.945 --> 00:30:09.025
<v Speaker 0>Alright. Okay. So final part of the summary

00:30:09.025 --> 00:30:10.784
<v Speaker 0>then. Hopefully, I've not missed anything.

00:30:11.905 --> 00:30:14.304
<v Speaker 0>What is recommended or I guess encouraged would

00:30:14.304 --> 00:30:16.225
<v Speaker 0>be if you're running a cloud native data

00:30:16.225 --> 00:30:18.170
<v Speaker 0>store that handles its own replication replication to

00:30:18.170 --> 00:30:20.650
<v Speaker 0>use local PV mode and avoid that nine

00:30:20.650 --> 00:30:22.730
<v Speaker 0>x storage costs, but if you're running more

00:30:22.730 --> 00:30:26.009
<v Speaker 0>traditional databases that don't have replication by default,

00:30:26.250 --> 00:30:28.090
<v Speaker 0>then it may be better to use that

00:30:28.090 --> 00:30:28.890
<v Speaker 0>replicated

00:30:28.890 --> 00:30:29.850
<v Speaker 0>volume

00:30:29.850 --> 00:30:30.570
<v Speaker 0>semantics.

00:30:31.335 --> 00:30:33.335
<v Speaker 0>And then the other thing that was mentioned

00:30:33.335 --> 00:30:34.615
<v Speaker 0>but I don't think we went into a

00:30:34.615 --> 00:30:36.375
<v Speaker 0>lot of detail is that OpenEBS provides a

00:30:36.375 --> 00:30:38.374
<v Speaker 0>lot more than that as well. Snapshotting,

00:30:38.375 --> 00:30:39.174
<v Speaker 0>backups

00:30:39.415 --> 00:30:42.294
<v Speaker 0>and other goodies too. I love the, I'll

00:30:42.294 --> 00:30:43.655
<v Speaker 0>share my screen and what it says on

00:30:43.655 --> 00:30:45.655
<v Speaker 0>the website because there's some bold claims here

00:30:45.655 --> 00:30:46.054
<v Speaker 0>so.

00:30:48.170 --> 00:30:51.290
<v Speaker 0>Kubernetes storage simplified which I just love right?

00:30:51.290 --> 00:30:53.450
<v Speaker 0>You know, this is these are hard problems

00:30:53.450 --> 00:30:55.770
<v Speaker 0>right? And I'm really glad that you and

00:30:55.770 --> 00:30:57.530
<v Speaker 0>your team here are working on the hard

00:30:57.530 --> 00:30:58.650
<v Speaker 0>bits so that I can just have the

00:30:58.650 --> 00:31:01.315
<v Speaker 0>nice easy to consume API. So that's great.

00:31:01.315 --> 00:31:03.875
<v Speaker 0>So simplifying storage is great and then I

00:31:03.875 --> 00:31:05.635
<v Speaker 0>love this one line install

00:31:06.115 --> 00:31:08.275
<v Speaker 0>so to get started so I

00:31:08.675 --> 00:31:10.675
<v Speaker 0>think that now unless there's anything you wanna

00:31:10.675 --> 00:31:12.595
<v Speaker 0>cover that I missed in the summary there,

00:31:12.595 --> 00:31:14.275
<v Speaker 0>we'll just start kicking the tires on this.

00:31:14.275 --> 00:31:14.995
<v Speaker 0>How does that sound?

00:31:16.210 --> 00:31:18.210
<v Speaker 1>Let's have at it. Let's break some stuff.

00:31:18.370 --> 00:31:18.929
<v Speaker 3>David,

00:31:20.769 --> 00:31:21.649
<v Speaker 2>just to

00:31:21.890 --> 00:31:23.490
<v Speaker 2>kinda clarify.

00:31:23.490 --> 00:31:26.289
<v Speaker 2>So if you are gonna use the existing

00:31:26.289 --> 00:31:29.010
<v Speaker 2>bit, like local p host path device,

00:31:29.655 --> 00:31:31.975
<v Speaker 2>This is the command that we proceed with.

00:31:32.775 --> 00:31:34.775
<v Speaker 2>But if you want to try on the

00:31:34.775 --> 00:31:35.495
<v Speaker 2>master,

00:31:35.735 --> 00:31:37.735
<v Speaker 2>there's a different link that we should check

00:31:37.735 --> 00:31:38.295
<v Speaker 2>out.

00:31:38.535 --> 00:31:39.655
<v Speaker 0>Oh, yeah. Yeah. We don't have to run

00:31:39.655 --> 00:31:41.015
<v Speaker 0>this helm command. I just love the fact

00:31:41.015 --> 00:31:42.615
<v Speaker 0>that it's right there direct on the page.

00:31:42.615 --> 00:31:44.540
<v Speaker 0>Like, I just love the ability for people

00:31:44.540 --> 00:31:46.220
<v Speaker 0>to get started with a one liner command.

00:31:46.220 --> 00:31:47.340
<v Speaker 0>Think as developers,

00:31:47.660 --> 00:31:49.260
<v Speaker 0>generally we don't wanna read the docs, just

00:31:49.260 --> 00:31:50.940
<v Speaker 0>wanna install and then start poking at it

00:31:50.940 --> 00:31:53.180
<v Speaker 0>and you know, that's good. Alright, so let's

00:31:53.180 --> 00:31:53.900
<v Speaker 0>cover where we are.

00:31:56.235 --> 00:31:58.955
<v Speaker 0>I try as always with this stream is

00:31:58.955 --> 00:32:00.555
<v Speaker 0>not to prepare too much in advance. So

00:32:00.555 --> 00:32:03.275
<v Speaker 0>all I've done thus far is prepare a

00:32:03.275 --> 00:32:06.235
<v Speaker 0>modest sized Kubernetes cluster. So we've got six

00:32:06.235 --> 00:32:08.315
<v Speaker 0>nodes running on Equinix metal,

00:32:08.555 --> 00:32:09.434
<v Speaker 0>each with their own.

00:32:10.590 --> 00:32:12.350
<v Speaker 0>I used basically

00:32:12.429 --> 00:32:14.910
<v Speaker 0>a heterogeneous cluster. We've got some large nodes,

00:32:14.910 --> 00:32:16.989
<v Speaker 0>some smaller nodes and some very big nodes.

00:32:17.150 --> 00:32:18.830
<v Speaker 0>So I'm have lots of RAM, some have

00:32:18.830 --> 00:32:20.510
<v Speaker 0>lots of disk and I figured we could

00:32:20.510 --> 00:32:21.950
<v Speaker 0>just talk about the trade offs that we're

00:32:21.950 --> 00:32:24.110
<v Speaker 0>making as we talk about that applied to

00:32:24.110 --> 00:32:24.989
<v Speaker 0>OpenEBS

00:32:25.230 --> 00:32:28.475
<v Speaker 0>as we go. And because we are gonna

00:32:28.475 --> 00:32:31.115
<v Speaker 0>need to configure huge pages, I've already kind

00:32:31.115 --> 00:32:32.955
<v Speaker 0>of just split my screen into six so

00:32:32.955 --> 00:32:33.995
<v Speaker 0>that we can get that out the way

00:32:33.995 --> 00:32:34.554
<v Speaker 0>first.

00:32:35.195 --> 00:32:36.795
<v Speaker 0>I've never done this before but I'm pretty

00:32:36.795 --> 00:32:38.315
<v Speaker 0>sure I can replicate my input to all

00:32:38.315 --> 00:32:39.515
<v Speaker 0>of these. I'll work that out in a

00:32:39.515 --> 00:32:39.995
<v Speaker 0>second

00:32:40.395 --> 00:32:41.755
<v Speaker 0>but can we talk about

00:32:42.450 --> 00:32:44.129
<v Speaker 0>first huge pages?

00:32:44.530 --> 00:32:45.409
<v Speaker 0>Why

00:32:45.490 --> 00:32:48.049
<v Speaker 0>do we need that for OpenEBS?

00:32:49.330 --> 00:32:50.529
<v Speaker 3>So

00:32:51.730 --> 00:32:52.690
<v Speaker 3>good question.

00:32:53.250 --> 00:32:53.889
<v Speaker 3>So

00:32:54.450 --> 00:32:56.929
<v Speaker 3>the the operating system

00:32:58.664 --> 00:33:01.384
<v Speaker 3>divides memory up in so called pages,

00:33:02.505 --> 00:33:04.904
<v Speaker 3>and those pages are typically four k.

00:33:05.304 --> 00:33:05.945
<v Speaker 3>And

00:33:06.184 --> 00:33:08.505
<v Speaker 3>the operating system needs to know where those

00:33:08.505 --> 00:33:11.304
<v Speaker 3>pages are loaded, who's owning them, and whatnot.

00:33:11.304 --> 00:33:14.530
<v Speaker 3>And and it keeps a small table called

00:33:14.690 --> 00:33:16.930
<v Speaker 3>oh, I I I just used this the

00:33:16.930 --> 00:33:18.770
<v Speaker 3>the short term of TLB.

00:33:19.010 --> 00:33:21.330
<v Speaker 3>I think it's transition look aside buffer or

00:33:21.330 --> 00:33:22.210
<v Speaker 3>something like that.

00:33:22.690 --> 00:33:25.010
<v Speaker 3>But suffice to say, it it keeps a

00:33:25.010 --> 00:33:27.570
<v Speaker 3>cache of which pages are loaded where.

00:33:28.054 --> 00:33:30.135
<v Speaker 3>The more memory you have, the more of

00:33:30.135 --> 00:33:31.335
<v Speaker 3>those pages you have.

00:33:31.735 --> 00:33:33.495
<v Speaker 3>The more of those pages you have, the

00:33:33.495 --> 00:33:35.895
<v Speaker 3>more likely you are to have a TLB

00:33:35.895 --> 00:33:36.534
<v Speaker 3>miss.

00:33:36.934 --> 00:33:38.934
<v Speaker 3>If you have a TLB miss, it is

00:33:38.934 --> 00:33:40.295
<v Speaker 3>a rather expensive operation.

00:33:40.750 --> 00:33:42.750
<v Speaker 3>I mean, it's it's nanoseconds.

00:33:42.750 --> 00:33:43.870
<v Speaker 3>But, you know, if you have a lot

00:33:43.870 --> 00:33:46.429
<v Speaker 3>of misses, then they amount to something. So

00:33:46.429 --> 00:33:48.110
<v Speaker 3>the idea is is, well, why don't we

00:33:48.110 --> 00:33:49.389
<v Speaker 3>use huger pages,

00:33:49.870 --> 00:33:50.909
<v Speaker 3>like two meg?

00:33:51.549 --> 00:33:52.749
<v Speaker 3>There's your answer.

00:33:53.070 --> 00:33:54.029
<v Speaker 3>So you get less

00:33:54.565 --> 00:33:57.765
<v Speaker 3>TLB misses and that means that the CPU

00:33:57.765 --> 00:33:58.645
<v Speaker 3>has to,

00:34:00.085 --> 00:34:02.565
<v Speaker 3>can focus more on the actual work than

00:34:02.805 --> 00:34:04.645
<v Speaker 3>finding the right pages to load,

00:34:05.205 --> 00:34:06.085
<v Speaker 3>effectively.

00:34:06.245 --> 00:34:08.449
<v Speaker 3>So that's, and and and and it really

00:34:08.449 --> 00:34:11.730
<v Speaker 3>adds up. That's one reason. Second reason is,

00:34:13.170 --> 00:34:15.010
<v Speaker 3>if you want to

00:34:15.489 --> 00:34:17.170
<v Speaker 3>do DMA transfer

00:34:17.730 --> 00:34:20.770
<v Speaker 3>into a PCI address from user space,

00:34:21.675 --> 00:34:24.715
<v Speaker 3>that memory location where you write from

00:34:25.114 --> 00:34:27.114
<v Speaker 3>and it's typically done with the scatter gather

00:34:27.114 --> 00:34:28.955
<v Speaker 3>list as they say. It's like call write

00:34:28.955 --> 00:34:32.235
<v Speaker 3>this collection of addresses into the PCI registers.

00:34:32.555 --> 00:34:34.075
<v Speaker 3>At the moment you say that,

00:34:34.475 --> 00:34:36.860
<v Speaker 3>you cannot have it. You you can't have

00:34:36.860 --> 00:34:39.020
<v Speaker 3>that that memory gets replaced

00:34:39.180 --> 00:34:39.980
<v Speaker 3>because

00:34:40.060 --> 00:34:41.980
<v Speaker 3>it's virtual memory. Right? So it can be

00:34:41.980 --> 00:34:44.380
<v Speaker 3>swapped out and yada yada. And if you

00:34:44.380 --> 00:34:47.020
<v Speaker 3>do DMAs, like, can't have that. You can't

00:34:47.020 --> 00:34:49.020
<v Speaker 3>all of a sudden move this piece of

00:34:49.020 --> 00:34:51.764
<v Speaker 3>memory somewhere else because by the time that

00:34:51.764 --> 00:34:54.485
<v Speaker 3>we actually DMA it, what are we DMA?

00:34:54.645 --> 00:34:57.685
<v Speaker 3>So an undocumented feature is that the huge

00:34:57.685 --> 00:34:59.685
<v Speaker 3>pages are what they what they so called

00:34:59.685 --> 00:35:01.365
<v Speaker 3>pinned into memory.

00:35:01.525 --> 00:35:03.990
<v Speaker 3>So they are put in a location,

00:35:04.390 --> 00:35:06.630
<v Speaker 3>and they stay there. They don't move.

00:35:07.030 --> 00:35:10.230
<v Speaker 3>And so those those two reasons are why,

00:35:11.190 --> 00:35:12.150
<v Speaker 3>we use,

00:35:12.390 --> 00:35:13.590
<v Speaker 3>huge pages.

00:35:14.150 --> 00:35:16.275
<v Speaker 3>Databases use them too, Right?

00:35:17.234 --> 00:35:20.035
<v Speaker 3>To reduce these these cache misses and whatnot.

00:35:21.075 --> 00:35:22.355
<v Speaker 0>Okay. That makes sense.

00:35:22.675 --> 00:35:24.115
<v Speaker 0>So how do I enable,

00:35:24.275 --> 00:35:26.434
<v Speaker 0>huge pages on the Linux kernel?

00:35:28.260 --> 00:35:30.180
<v Speaker 3>So you you you don't really have to

00:35:30.180 --> 00:35:32.740
<v Speaker 3>enable them as much rather than you need

00:35:32.740 --> 00:35:34.740
<v Speaker 3>to to tell the kernel how many you

00:35:34.740 --> 00:35:35.300
<v Speaker 3>want.

00:35:35.940 --> 00:35:37.060
<v Speaker 3>And there is a,

00:35:37.380 --> 00:35:38.980
<v Speaker 3>variable in sys,

00:35:39.540 --> 00:35:42.464
<v Speaker 3>m m or sys slash kernel m m.

00:35:42.464 --> 00:35:44.545
<v Speaker 3>I always use tab completion so I forget,

00:35:44.944 --> 00:35:47.345
<v Speaker 3>where you can basically echo in the value,

00:35:47.585 --> 00:35:48.785
<v Speaker 3>of of,

00:35:49.505 --> 00:35:51.345
<v Speaker 3>huge pages that you want. And you have

00:35:51.345 --> 00:35:53.505
<v Speaker 3>two choices. You have the

00:35:53.585 --> 00:35:56.170
<v Speaker 3>two meg pages or the one gig, and

00:35:56.170 --> 00:35:57.690
<v Speaker 3>we always use the,

00:35:58.650 --> 00:36:01.690
<v Speaker 3>two meg. And so you specify the amount

00:36:01.690 --> 00:36:04.410
<v Speaker 3>of two meg huge pages. So if you

00:36:04.410 --> 00:36:07.130
<v Speaker 3>wanna have one gig of huge page memory,

00:36:07.370 --> 00:36:11.055
<v Speaker 3>you specify five twelve. So from usability standpoint,

00:36:11.055 --> 00:36:13.695
<v Speaker 3>it's it's it's not ideal. Right? But, gets

00:36:13.695 --> 00:36:14.655
<v Speaker 3>the job done.

00:36:15.695 --> 00:36:17.855
<v Speaker 0>So I could just echo five twelve

00:36:18.095 --> 00:36:20.175
<v Speaker 0>to slash sys slash

00:36:20.495 --> 00:36:21.455
<v Speaker 3>Yeah.

00:36:21.455 --> 00:36:22.735
<v Speaker 3>So let me

00:36:24.320 --> 00:36:27.120
<v Speaker 3>open my browser. I I always forget it.

00:36:27.120 --> 00:36:29.680
<v Speaker 3>Because I I use a declarative operating system

00:36:29.680 --> 00:36:31.120
<v Speaker 3>next to a declarative

00:36:31.600 --> 00:36:34.240
<v Speaker 0>Oh, you use NextOS. Right? Yes. How do

00:36:34.240 --> 00:36:36.640
<v Speaker 3>you know that? I run NextOS too. No.

00:36:36.560 --> 00:36:36.640
<v Speaker 0>Back

00:36:37.395 --> 00:36:38.995
<v Speaker 0>for work. Yeah. But I Really?

00:36:41.955 --> 00:36:43.235
<v Speaker 3>Yeah. How interesting.

00:36:43.395 --> 00:36:44.035
<v Speaker 3>So

00:36:44.275 --> 00:36:45.075
<v Speaker 3>it is

00:36:47.075 --> 00:36:49.235
<v Speaker 0>let me grab that thing here.

00:36:57.329 --> 00:36:59.410
<v Speaker 0>Alright. We can actually spin up on

00:36:59.569 --> 00:37:01.490
<v Speaker 0>Equinix Medal. If I had known I had

00:37:01.490 --> 00:37:03.285
<v Speaker 0>an on the stream as well, I would

00:37:03.285 --> 00:37:05.045
<v Speaker 0>maybe have been as bold to drop off.

00:37:04.964 --> 00:37:05.925
<v Speaker 3>Expert

00:37:05.925 --> 00:37:07.925
<v Speaker 3>is a big word, but considering all the

00:37:07.925 --> 00:37:11.125
<v Speaker 3>others, alternatives, this was the least, worrisome, I

00:37:11.125 --> 00:37:11.685
<v Speaker 3>would say.

00:37:12.405 --> 00:37:13.125
<v Speaker 3>Let me see.

00:37:14.710 --> 00:37:16.230
<v Speaker 3>Well, it's actually in the in the in

00:37:16.230 --> 00:37:18.950
<v Speaker 3>the in the quick start. Maybe that's easier.

00:37:19.910 --> 00:37:22.230
<v Speaker 4>I've just pasted that one, Jeffrey, into private

00:37:22.230 --> 00:37:24.710
<v Speaker 4>chat, if that helps. In any regard. Oh.

00:37:24.870 --> 00:37:25.590
<v Speaker 0>Yeah.

00:37:26.470 --> 00:37:28.390
<v Speaker 0>See. Thank you. Okay. So

00:37:28.790 --> 00:37:29.430
<v Speaker 0>let me just

00:37:30.295 --> 00:37:32.295
<v Speaker 0>I know people watching this stream are not

00:37:32.295 --> 00:37:33.655
<v Speaker 0>really gonna be able to tell because of

00:37:33.655 --> 00:37:36.695
<v Speaker 0>the replication here. But we're echoing five twelve

00:37:36.695 --> 00:37:39.335
<v Speaker 0>to sys kernel huge pages huge pages blah

00:37:39.335 --> 00:37:41.735
<v Speaker 0>blah blah blah blah. Yes. Exactly.

00:37:42.295 --> 00:37:44.295
<v Speaker 0>We will Yes. Click that into the show

00:37:44.295 --> 00:37:46.640
<v Speaker 0>notes in case anyone is Yeah. Yeah. And

00:37:46.640 --> 00:37:49.520
<v Speaker 3>if you then type cat proc slash

00:37:49.520 --> 00:37:51.760
<v Speaker 3>mem info, I think it is, it

00:37:52.240 --> 00:37:54.240
<v Speaker 3>it should say, there you go, huge page

00:37:54.240 --> 00:37:57.760
<v Speaker 3>total, five twelve. Huge pages free, five twelve.

00:37:57.840 --> 00:37:58.160
<v Speaker 3>Now,

00:37:59.205 --> 00:38:01.685
<v Speaker 3>one unfortunate thing is is that when the

00:38:01.685 --> 00:38:03.045
<v Speaker 3>node runs Kubernetes,

00:38:03.045 --> 00:38:05.525
<v Speaker 3>the kubelet needs to know about these huge

00:38:05.525 --> 00:38:07.365
<v Speaker 3>pages. And unfortunately,

00:38:07.445 --> 00:38:10.325
<v Speaker 3>for one reason, that is, unknown to me,

00:38:10.325 --> 00:38:11.525
<v Speaker 3>however, is that

00:38:11.765 --> 00:38:13.765
<v Speaker 3>you need to actually restart the kubelet. The

00:38:13.765 --> 00:38:14.885
<v Speaker 3>kubelet is not

00:38:16.940 --> 00:38:19.500
<v Speaker 3>updating those values. So we have to restart

00:38:19.500 --> 00:38:20.619
<v Speaker 3>the kubelet,

00:38:21.020 --> 00:38:21.660
<v Speaker 3>and then,

00:38:22.460 --> 00:38:24.060
<v Speaker 3>you know, if you have a bad day,

00:38:24.060 --> 00:38:26.380
<v Speaker 3>then it's already game over. But

00:38:27.275 --> 00:38:28.075
<v Speaker 0>Alright.

00:38:28.395 --> 00:38:30.315
<v Speaker 0>We have restarted the kubelet.

00:38:30.795 --> 00:38:32.795
<v Speaker 0>See if I could still run get notes

00:38:32.795 --> 00:38:34.635
<v Speaker 0>on my cluster. Alright. I think we're good.

00:38:34.635 --> 00:38:36.395
<v Speaker 0>So we've enabled huge pages

00:38:36.635 --> 00:38:38.475
<v Speaker 0>and all six of our worker nodes at

00:38:38.475 --> 00:38:40.315
<v Speaker 0>least. I won't bother with the control plan.

00:38:40.555 --> 00:38:41.915
<v Speaker 3>Yeah. Right. Yep.

00:38:42.490 --> 00:38:43.050
<v Speaker 3>So

00:38:43.530 --> 00:38:44.570
<v Speaker 3>and then

00:38:45.130 --> 00:38:46.970
<v Speaker 3>yeah. Oh, sorry. You you just go right

00:38:46.970 --> 00:38:48.810
<v Speaker 3>ahead. I'll just answer as you go.

00:38:49.930 --> 00:38:51.930
<v Speaker 0>Well, I mean, normally I I try to

00:38:51.930 --> 00:38:53.130
<v Speaker 0>follow the documentation.

00:38:53.130 --> 00:38:54.330
<v Speaker 0>But I know that we're we're we're playing

00:38:54.330 --> 00:38:55.210
<v Speaker 0>with my store today.

00:38:55.885 --> 00:38:58.285
<v Speaker 0>Maybe not gonna be following what is recommended

00:38:58.285 --> 00:39:00.605
<v Speaker 0>in the documentations, or is that a incorrect

00:39:00.605 --> 00:39:03.085
<v Speaker 0>assumption? Yeah. So we have a documentation for

00:39:03.085 --> 00:39:05.085
<v Speaker 2>my store as well. If you just go

00:39:05.085 --> 00:39:05.725
<v Speaker 2>to the

00:39:08.845 --> 00:39:10.205
<v Speaker 2>alpha features,

00:39:10.640 --> 00:39:11.760
<v Speaker 2>is right there.

00:39:12.480 --> 00:39:13.200
<v Speaker 2>Yeah.

00:39:14.640 --> 00:39:15.680
<v Speaker 2>My store,

00:39:15.920 --> 00:39:17.040
<v Speaker 2>it should

00:39:17.280 --> 00:39:19.680
<v Speaker 2>get there. It should point to our

00:39:19.840 --> 00:39:22.480
<v Speaker 2>sorry. Multiple redirection. I'll fix that. Yeah. That'd

00:39:22.480 --> 00:39:22.880
<v Speaker 2>be good.

00:39:25.175 --> 00:39:26.455
<v Speaker 0>Sweet. Awesome.

00:39:28.215 --> 00:39:28.935
<v Speaker 0>So

00:39:29.255 --> 00:39:31.415
<v Speaker 0>let's see what we need to do here.

00:39:33.655 --> 00:39:35.255
<v Speaker 0>There are some prerequisites.

00:39:35.255 --> 00:39:36.615
<v Speaker 0>Guess maybe we should kind of

00:39:37.260 --> 00:39:39.660
<v Speaker 3>Oh, yeah. Well, there there there's one one

00:39:39.660 --> 00:39:42.780
<v Speaker 3>one interesting thing actually. There's the the the

00:39:43.180 --> 00:39:45.980
<v Speaker 3>we use certain CPU instructions, and we we

00:39:45.980 --> 00:39:48.700
<v Speaker 3>we kinda arbitrary decided that if your CPU

00:39:48.700 --> 00:39:51.340
<v Speaker 3>is older than ten years, it's like, you

00:39:51.340 --> 00:39:52.380
<v Speaker 3>know, buy a new one

00:39:53.145 --> 00:39:55.305
<v Speaker 3>or not run Maya store. So there's some

00:39:55.305 --> 00:39:55.865
<v Speaker 3>of that.

00:39:56.505 --> 00:39:58.185
<v Speaker 3>And it turns out though that the the

00:39:58.185 --> 00:39:59.705
<v Speaker 3>the CPUs in in in the in the

00:39:59.705 --> 00:40:01.545
<v Speaker 3>cloud are older than you think. But I

00:40:02.185 --> 00:40:04.025
<v Speaker 3>in your cluster, I don't think that that's

00:40:04.025 --> 00:40:04.665
<v Speaker 3>a problem.

00:40:05.385 --> 00:40:05.705
<v Speaker 0>Yeah.

00:40:06.740 --> 00:40:08.660
<v Speaker 0>You don't think? I mean, that's not the

00:40:08.660 --> 00:40:10.980
<v Speaker 0>most confident answer I've heard there, but we'll

00:40:10.980 --> 00:40:13.940
<v Speaker 0>see. Yeah. Yeah. Well, or the CPUs are

00:40:13.940 --> 00:40:16.339
<v Speaker 3>not 10 years old there. Right? So No.

00:40:16.339 --> 00:40:18.260
<v Speaker 0>No. No. We've we've got pretty recent hardware.

00:40:18.500 --> 00:40:19.700
<v Speaker 3>Yeah. Yeah. Exactly.

00:40:20.495 --> 00:40:22.895
<v Speaker 0>Alright. So we got modern CPUs, four gig

00:40:22.895 --> 00:40:24.575
<v Speaker 0>of RAM, like that's not gonna be an

00:40:24.575 --> 00:40:26.895
<v Speaker 0>issue and we've got huge pages which we've

00:40:26.895 --> 00:40:28.255
<v Speaker 0>just enabled. So

00:40:30.415 --> 00:40:32.495
<v Speaker 0>let's see. Preparing the cluster.

00:40:35.340 --> 00:40:36.780
<v Speaker 0>It's a bit difficult to read. I'll zoom

00:40:36.780 --> 00:40:37.820
<v Speaker 0>out a little bit.

00:40:39.340 --> 00:40:41.580
<v Speaker 0>Okay. So we did verify huge pages. We've

00:40:41.580 --> 00:40:43.260
<v Speaker 0>set oh, see this was all documented. Like

00:40:43.260 --> 00:40:44.780
<v Speaker 0>it is just like I should have just

00:40:44.780 --> 00:40:47.100
<v Speaker 0>came here first. We aim to please David.

00:40:50.195 --> 00:40:51.875
<v Speaker 4>Something about the manual.

00:40:52.195 --> 00:40:53.635
<v Speaker 0>I know. I think when I'm going down

00:40:53.635 --> 00:40:55.875
<v Speaker 0>some sort of crazy offbeat in path here

00:40:55.875 --> 00:40:57.475
<v Speaker 0>and it's like, no. Like, you know, you're

00:40:57.475 --> 00:40:58.995
<v Speaker 0>just following the docs like.

00:41:00.195 --> 00:41:00.435
<v Speaker 0>So

00:41:01.080 --> 00:41:03.400
<v Speaker 0>we have to label the nodes that we

00:41:03.400 --> 00:41:05.800
<v Speaker 0>want to run Maya store.

00:41:06.280 --> 00:41:06.920
<v Speaker 0>Okay.

00:41:08.680 --> 00:41:09.800
<v Speaker 0>Which means

00:41:09.800 --> 00:41:10.840
<v Speaker 0>and

00:41:11.960 --> 00:41:13.640
<v Speaker 0>oh, I need my node names again.

00:41:20.805 --> 00:41:22.565
<v Speaker 0>Hate it when I paste stuff and then

00:41:22.565 --> 00:41:24.085
<v Speaker 0>I can't actually see where I am.

00:41:27.090 --> 00:41:28.690
<v Speaker 0>I thought the hardest bit would be the

00:41:28.690 --> 00:41:31.330
<v Speaker 0>copy and paste. Alright. Let's try again.

00:41:34.850 --> 00:41:35.890
<v Speaker 0>Okay.

00:41:35.890 --> 00:41:36.210
<v Speaker 0>So

00:41:42.295 --> 00:41:44.055
<v Speaker 0>Well, just do the first two for now.

00:41:44.055 --> 00:41:45.255
<v Speaker 0>Is that enough for us to get started

00:41:45.255 --> 00:41:46.935
<v Speaker 0>or should I run through them all?

00:41:49.495 --> 00:41:51.415
<v Speaker 4>Two two would be fine. It will limit

00:41:51.415 --> 00:41:53.575
<v Speaker 4>the number of replicas you can have to

00:41:53.575 --> 00:41:54.535
<v Speaker 4>to two,

00:41:54.935 --> 00:41:55.735
<v Speaker 4>but it would be fine.

00:41:56.510 --> 00:41:58.589
<v Speaker 0>I'm almost there now. Three if you want

00:41:58.589 --> 00:42:01.069
<v Speaker 4>to push the boat out. This is captivating

00:42:01.069 --> 00:42:02.910
<v Speaker 0>TV right here, so I might as well.

00:42:02.910 --> 00:42:03.390
<v Speaker 0>Alright,

00:42:05.630 --> 00:42:06.110
<v Speaker 0>so

00:42:07.470 --> 00:42:08.349
<v Speaker 0>last one.

00:42:11.675 --> 00:42:13.675
<v Speaker 0>Okay. Got my labels.

00:42:14.475 --> 00:42:16.475
<v Speaker 0>Now we're going to the quick start.

00:42:18.955 --> 00:42:20.795
<v Speaker 0>So this is just gonna apply

00:42:21.195 --> 00:42:23.195
<v Speaker 0>remote YAML. So this is just creating the

00:42:23.195 --> 00:42:24.155
<v Speaker 0>namespace first.

00:42:25.170 --> 00:42:27.329
<v Speaker 4>That's right. And this is just for the

00:42:27.329 --> 00:42:29.250
<v Speaker 0>control plane of OpenEBS.

00:42:29.730 --> 00:42:32.690
<v Speaker 4>It it's data data and control plane. Data

00:42:32.690 --> 00:42:33.330
<v Speaker 0>and control. All

00:42:33.970 --> 00:42:36.690
<v Speaker 4>of the containers are created in a a

00:42:36.690 --> 00:42:37.890
<v Speaker 4>my store namespace.

00:42:39.464 --> 00:42:40.025
<v Speaker 0>Then

00:42:40.265 --> 00:42:41.145
<v Speaker 0>RBAC,

00:42:41.865 --> 00:42:43.224
<v Speaker 0>everybody's favorite.

00:42:44.585 --> 00:42:45.945
<v Speaker 0>And the CRDs.

00:42:47.464 --> 00:42:49.464
<v Speaker 3>I I call it the cloud native pseudo

00:42:49.464 --> 00:42:49.865
<v Speaker 3>actually.

00:42:53.950 --> 00:42:55.710
<v Speaker 0>So this is interesting.

00:42:55.710 --> 00:42:58.590
<v Speaker 0>So my story is using that under the

00:42:58.590 --> 00:42:59.390
<v Speaker 0>hood.

00:43:00.510 --> 00:43:01.870
<v Speaker 0>What's going on here?

00:43:02.750 --> 00:43:05.870
<v Speaker 3>Yeah. So so as we started to develop

00:43:05.870 --> 00:43:08.190
<v Speaker 3>this thing, we we really we realized

00:43:08.750 --> 00:43:09.310
<v Speaker 3>that

00:43:10.035 --> 00:43:12.355
<v Speaker 3>you may or may not wanna have Maya

00:43:12.355 --> 00:43:15.155
<v Speaker 3>store running on all the notes. Right? So,

00:43:15.555 --> 00:43:17.555
<v Speaker 3>we needed a way to separate out the

00:43:17.555 --> 00:43:19.635
<v Speaker 3>CSI notes from the notes that was actually

00:43:19.635 --> 00:43:21.714
<v Speaker 3>running Maya store, and we need a way

00:43:21.714 --> 00:43:25.075
<v Speaker 3>to register ourselves against the control plane.

00:43:25.670 --> 00:43:26.630
<v Speaker 3>And after,

00:43:27.350 --> 00:43:30.870
<v Speaker 3>some trial and error with various approaches and

00:43:30.870 --> 00:43:33.590
<v Speaker 3>and and concepts, we said, well, you know,

00:43:33.590 --> 00:43:35.350
<v Speaker 3>let's just use a message bus,

00:43:35.910 --> 00:43:36.710
<v Speaker 3>because,

00:43:36.710 --> 00:43:39.430
<v Speaker 3>you know, that's where these things are are

00:43:38.835 --> 00:43:39.875
<v Speaker 3>really good at,

00:43:40.275 --> 00:43:42.515
<v Speaker 3>in terms of creating patterns and, you know,

00:43:42.515 --> 00:43:43.475
<v Speaker 3>things like that.

00:43:43.955 --> 00:43:46.515
<v Speaker 3>And well, then you Google

00:43:46.515 --> 00:43:46.994
<v Speaker 3>flight

00:43:47.315 --> 00:43:48.115
<v Speaker 3>plus

00:43:48.275 --> 00:43:51.075
<v Speaker 3>Kubernetes and we saw Nats and so, okay.

00:43:51.075 --> 00:43:51.474
<v Speaker 3>Sold.

00:43:52.290 --> 00:43:54.210
<v Speaker 3>Obviously, a little bit more insight went into

00:43:54.210 --> 00:43:56.530
<v Speaker 3>that. But NATs is is very lightweight,

00:43:56.930 --> 00:43:58.930
<v Speaker 3>and we use it to to register nodes

00:43:58.930 --> 00:44:00.290
<v Speaker 3>to the control plane.

00:44:00.690 --> 00:44:01.490
<v Speaker 3>And also,

00:44:01.890 --> 00:44:04.450
<v Speaker 3>we are working on a fault management subsystem

00:44:04.450 --> 00:44:04.930
<v Speaker 3>that

00:44:05.255 --> 00:44:07.415
<v Speaker 3>as the IO errors occur within the data

00:44:07.415 --> 00:44:09.655
<v Speaker 3>path, one of the things that you cannot

00:44:09.655 --> 00:44:10.935
<v Speaker 3>do is is

00:44:11.095 --> 00:44:13.335
<v Speaker 3>is determine what you should do based on

00:44:13.335 --> 00:44:14.135
<v Speaker 3>that error.

00:44:14.295 --> 00:44:16.855
<v Speaker 3>Right? You need a holistic view of the

00:44:16.855 --> 00:44:19.740
<v Speaker 3>system as a whole. So we we instead

00:44:19.740 --> 00:44:21.580
<v Speaker 3>of handling the error, we we

00:44:22.140 --> 00:44:22.860
<v Speaker 3>basically,

00:44:23.660 --> 00:44:26.140
<v Speaker 3>dump the error plus some metadata in the

00:44:26.140 --> 00:44:29.260
<v Speaker 3>message bus where then a cluster level service

00:44:29.260 --> 00:44:30.140
<v Speaker 3>will receive

00:44:31.434 --> 00:44:32.795
<v Speaker 3>that message and

00:44:32.954 --> 00:44:35.115
<v Speaker 3>keeps track of how many errors and whatnot.

00:44:35.115 --> 00:44:37.275
<v Speaker 3>And based on an heuristic, it will determine

00:44:37.275 --> 00:44:39.835
<v Speaker 3>then to take a particular replica,

00:44:40.234 --> 00:44:42.955
<v Speaker 3>on or offline. That's that's roughly,

00:44:43.515 --> 00:44:44.555
<v Speaker 3>the idea,

00:44:45.115 --> 00:44:45.914
<v Speaker 3>if that makes sense.

00:44:47.380 --> 00:44:48.980
<v Speaker 0>Yeah. I I think so.

00:44:50.180 --> 00:44:51.380
<v Speaker 0>I'm concerned

00:44:51.380 --> 00:44:53.700
<v Speaker 0>that we have some pending pods.

00:44:55.460 --> 00:44:57.619
<v Speaker 0>Let me check why Nets is pending.

00:45:10.345 --> 00:45:12.345
<v Speaker 0>If I given us an unhealthy cluster.

00:45:14.650 --> 00:45:19.610
<v Speaker 0>I'm

00:45:19.610 --> 00:45:21.290
<v Speaker 0>not nervous. You're nervous.

00:45:22.570 --> 00:45:25.370
<v Speaker 0>Ready, ready, ready, ready, ready. Alright. Okay. What's

00:45:25.770 --> 00:45:27.130
<v Speaker 0>let's take a look at that node list

00:45:27.130 --> 00:45:28.330
<v Speaker 0>again, the pod list again.

00:45:30.425 --> 00:45:32.425
<v Speaker 3>So it it looks like core DNS is

00:45:32.425 --> 00:45:33.705
<v Speaker 3>is not happy.

00:45:38.025 --> 00:45:38.825
<v Speaker 0>Yep.

00:45:38.985 --> 00:45:41.225
<v Speaker 0>And the Calico cube controller is not happy.

00:45:41.770 --> 00:45:42.570
<v Speaker 0>Wonderful.

00:45:43.690 --> 00:45:45.770
<v Speaker 0>So I get for trusting get nodes.

00:45:48.650 --> 00:45:49.530
<v Speaker 0>Let's see.

00:45:56.465 --> 00:45:58.465
<v Speaker 0>That doesn't look right. I'm just gonna delete

00:45:58.465 --> 00:45:59.825
<v Speaker 0>that pod and see

00:46:02.625 --> 00:46:04.705
<v Speaker 0>if it magically fixes itself.

00:46:07.905 --> 00:46:08.865
<v Speaker 0>Computer says no.

00:46:13.440 --> 00:46:16.240
<v Speaker 1>The error message is about taints and tolerations.

00:46:16.240 --> 00:46:18.640
<v Speaker 1>Right? Do we have to dig into that?

00:46:19.520 --> 00:46:21.760
<v Speaker 0>Well, mean, that's not what I was hoping

00:46:21.760 --> 00:46:22.160
<v Speaker 0>to do.

00:46:24.775 --> 00:46:27.815
<v Speaker 0>I'm gonna edit the node and see. I

00:46:27.815 --> 00:46:30.135
<v Speaker 0>don't know why we haven't uninitialized

00:46:32.215 --> 00:46:32.935
<v Speaker 0>label.

00:46:39.770 --> 00:46:41.290
<v Speaker 0>I'm just going to remove it.

00:46:50.295 --> 00:46:51.175
<v Speaker 0>Alright.

00:46:51.655 --> 00:46:54.215
<v Speaker 0>Hey. I have no idea what

00:46:54.535 --> 00:46:56.295
<v Speaker 0>is going on there. I should probably remove

00:46:56.295 --> 00:46:58.454
<v Speaker 0>that from all of our notes, though. This

00:46:58.454 --> 00:47:00.855
<v Speaker 1>is the the OpenEBS slash

00:47:01.175 --> 00:47:04.535
<v Speaker 1>studying for your your Kubernetes administrator exam

00:47:05.630 --> 00:47:06.590
<v Speaker 1>episode.

00:47:07.070 --> 00:47:09.310
<v Speaker 0>Yeah. Come and get your CKA learning how

00:47:09.310 --> 00:47:12.190
<v Speaker 0>to unfuck your cluster during a demo. Like

00:47:14.350 --> 00:47:17.230
<v Speaker 0>okay. I'm just gonna remove the tents.

00:47:17.630 --> 00:47:18.350
<v Speaker 0>Oops. Save.

00:47:19.974 --> 00:47:20.855
<v Speaker 3>Oh,

00:47:23.974 --> 00:47:25.335
<v Speaker 3>just thinking about

00:47:26.214 --> 00:47:27.895
<v Speaker 3>if the NVMF

00:47:28.214 --> 00:47:31.974
<v Speaker 3>NVMe for fabric kernel module is on

00:47:31.974 --> 00:47:32.214
<v Speaker 3>the

00:47:32.920 --> 00:47:35.640
<v Speaker 3>machines as well. I just thought about that

00:47:35.640 --> 00:47:36.760
<v Speaker 3>actually, which is

00:47:39.640 --> 00:47:41.240
<v Speaker 0>Okay. We can take a look at that.

00:47:41.240 --> 00:47:42.360
<v Speaker 0>Alright. Let's

00:47:44.520 --> 00:47:46.974
<v Speaker 0>I've got at least a good few there

00:47:46.974 --> 00:47:49.135
<v Speaker 0>that are running. All those ports are happy.

00:47:49.214 --> 00:47:51.695
<v Speaker 0>My cluster is happy. NATS is now happy.

00:47:52.095 --> 00:47:54.415
<v Speaker 0>Cool. Problem one resolved.

00:47:54.734 --> 00:47:57.375
<v Speaker 0>Problem two is you're worried about the kernel

00:47:57.375 --> 00:47:58.415
<v Speaker 0>module. Right?

00:47:59.135 --> 00:48:00.415
<v Speaker 3>Well, worried is like

00:48:05.135 --> 00:48:05.910
<v Speaker 0>so. Thank you.

00:48:08.070 --> 00:48:09.590
<v Speaker 0>Pulled his cable out.

00:48:14.710 --> 00:48:17.465
<v Speaker 0>Alright. Well, you fix that. I will just

00:48:17.465 --> 00:48:19.465
<v Speaker 0>edit the last node while I'm here.

00:48:20.105 --> 00:48:21.705
<v Speaker 0>Where's the last two nodes?

00:48:24.425 --> 00:48:25.705
<v Speaker 0>You still there, Jeffrey?

00:48:29.305 --> 00:48:29.625
<v Speaker 0>Nope.

00:48:37.119 --> 00:48:38.160
<v Speaker 0>Can you hear me?

00:48:38.560 --> 00:48:40.960
<v Speaker 3>Sorry. Yeah. I don't know what happened.

00:48:41.920 --> 00:48:42.960
<v Speaker 3>Wireless technology.

00:48:44.615 --> 00:48:44.855
<v Speaker 3>The

00:48:45.655 --> 00:48:47.975
<v Speaker 3>what what operating system are you using?

00:48:48.135 --> 00:48:51.174
<v Speaker 0>It is the Ubuntu 20 o four. Okay.

00:48:51.174 --> 00:48:52.695
<v Speaker 3>So let me double check.

00:48:55.974 --> 00:48:57.815
<v Speaker 0>So if I just run

00:49:00.579 --> 00:49:02.420
<v Speaker 0>an LS mod, is there a name of

00:49:02.420 --> 00:49:04.020
<v Speaker 0>a module I should be looking for?

00:49:05.220 --> 00:49:06.900
<v Speaker 3>It actually, the the quick start,

00:49:07.300 --> 00:49:08.260
<v Speaker 3>talks about it,

00:49:08.740 --> 00:49:10.740
<v Speaker 3>as well. So the

00:49:13.265 --> 00:49:15.345
<v Speaker 3>but I think it was in the prerequisites.

00:49:15.345 --> 00:49:17.665
<v Speaker 4>The the quick start will talk about it,

00:49:17.665 --> 00:49:20.385
<v Speaker 4>Jeffrey. That that's an oversight at this juncture.

00:49:20.465 --> 00:49:20.785
<v Speaker 3>Yeah. So

00:49:21.505 --> 00:49:22.465
<v Speaker 3>We have Sorry.

00:49:24.225 --> 00:49:24.865
<v Speaker 3>Sorry. Yeah.

00:49:26.650 --> 00:49:29.210
<v Speaker 0>So we're looking for n m NVMe dash

00:49:29.210 --> 00:49:31.610
<v Speaker 0>t a c p and NVMe t. No.

00:49:31.610 --> 00:49:33.290
<v Speaker 3>Just the TCP one. The the the the

00:49:33.290 --> 00:49:34.330
<v Speaker 3>other one is not

00:49:35.530 --> 00:49:36.170
<v Speaker 3>needed.

00:49:37.050 --> 00:49:38.810
<v Speaker 0>Okay. So I can just mod probe that.

00:49:38.810 --> 00:49:40.205
<v Speaker 0>Right? Yeah.

00:49:40.845 --> 00:49:43.885
<v Speaker 0>So There we go. Easy. Easy easy peasy

00:49:43.885 --> 00:49:46.045
<v Speaker 3>lemon squeezy. Okay. Well, that's good.

00:49:47.005 --> 00:49:47.565
<v Speaker 0>Cool.

00:49:48.525 --> 00:49:50.925
<v Speaker 0>Now there's a command. If I go back

00:49:50.925 --> 00:49:51.085
<v Speaker 0>to

00:49:51.780 --> 00:49:54.180
<v Speaker 0>Let's go back to the deploy one, right?

00:49:54.180 --> 00:49:56.420
<v Speaker 0>So I deployed NATS and then

00:49:57.620 --> 00:50:00.340
<v Speaker 0>it wants me to just check NATS it's

00:50:00.340 --> 00:50:02.500
<v Speaker 0>happy, which I'm actually I'm okay with. I

00:50:02.500 --> 00:50:03.780
<v Speaker 0>think it was running

00:50:04.494 --> 00:50:07.295
<v Speaker 0>And now we need to install the CSI

00:50:07.295 --> 00:50:08.735
<v Speaker 0>node plug in.

00:50:11.695 --> 00:50:12.175
<v Speaker 3>This

00:50:13.455 --> 00:50:15.455
<v Speaker 1>is the preflight checklist.

00:50:18.880 --> 00:50:20.320
<v Speaker 0>Hey, if I if I all I need

00:50:20.320 --> 00:50:22.080
<v Speaker 0>to do is remove some tents from nose

00:50:22.080 --> 00:50:23.600
<v Speaker 0>and copy and paste a few more commands.

00:50:23.600 --> 00:50:25.280
<v Speaker 0>I mean, think we're doing pretty well.

00:50:26.560 --> 00:50:28.880
<v Speaker 0>So we got five. That looks good and

00:50:28.880 --> 00:50:30.080
<v Speaker 0>now control

00:50:30.080 --> 00:50:30.640
<v Speaker 0>plane.

00:50:32.515 --> 00:50:34.115
<v Speaker 0>I

00:50:34.835 --> 00:50:36.595
<v Speaker 0>love it when the docs just work. I

00:50:36.595 --> 00:50:38.195
<v Speaker 0>mean, it really just makes this a lot

00:50:38.195 --> 00:50:38.835
<v Speaker 0>easier.

00:50:39.075 --> 00:50:40.515
<v Speaker 0>Kudos on the docs.

00:50:41.235 --> 00:50:42.355
<v Speaker 0>I mean, the only thing that's gone wrong

00:50:42.355 --> 00:50:44.275
<v Speaker 0>so far is everything I've done upfront. Yeah.

00:50:44.275 --> 00:50:46.195
<v Speaker 3>Don't say that too often because Glenn is

00:50:46.195 --> 00:50:47.075
<v Speaker 3>on the call and I

00:50:50.755 --> 00:50:52.730
<v Speaker 3>yeah. Yeah. No. But that really helps a

00:50:52.730 --> 00:50:53.530
<v Speaker 3>lot. Yeah.

00:50:55.050 --> 00:50:57.290
<v Speaker 0>Yeah. Just I mean, as someone I mean,

00:50:57.290 --> 00:50:59.210
<v Speaker 0>I I'm pretty much a technology magpie. I

00:50:59.210 --> 00:51:01.530
<v Speaker 0>just get to play with technology every day

00:51:01.530 --> 00:51:03.450
<v Speaker 0>and new stuff and see what happens. And

00:51:03.450 --> 00:51:05.105
<v Speaker 0>when the dogs work, it just makes such

00:51:05.105 --> 00:51:05.665
<v Speaker 0>a

00:51:05.905 --> 00:51:06.545
<v Speaker 0>difference.

00:51:07.345 --> 00:51:08.385
<v Speaker 0>I don't wanna give you too much of

00:51:08.385 --> 00:51:10.065
<v Speaker 0>an eagle here, Glenn, but so far so

00:51:10.065 --> 00:51:11.585
<v Speaker 0>good. It it's okay.

00:51:11.905 --> 00:51:13.905
<v Speaker 4>Feel that you're putting me on a pedestal

00:51:13.905 --> 00:51:15.825
<v Speaker 4>that I can only fall from. I fall

00:51:15.825 --> 00:51:17.425
<v Speaker 4>from grace probably shortly.

00:51:17.780 --> 00:51:19.540
<v Speaker 0>Exactly. I just like to build people up

00:51:19.540 --> 00:51:21.220
<v Speaker 0>so I can watch them fall. Okay.

00:51:24.579 --> 00:51:25.700
<v Speaker 0>So that gave me

00:51:27.060 --> 00:51:28.820
<v Speaker 0>oh, I was just a bit too quick.

00:51:28.820 --> 00:51:29.460
<v Speaker 0>Right.

00:51:30.180 --> 00:51:30.900
<v Speaker 0>Is that us?

00:51:32.005 --> 00:51:34.005
<v Speaker 3>That that that is MSN. So it's a

00:51:34.005 --> 00:51:36.885
<v Speaker 3>tribute to the the old chat utility that

00:51:36.885 --> 00:51:38.805
<v Speaker 3>we all grew up with.

00:51:39.605 --> 00:51:41.765
<v Speaker 3>But that stands for Maya storage node, and

00:51:41.765 --> 00:51:42.645
<v Speaker 3>and that is,

00:51:43.125 --> 00:51:45.285
<v Speaker 3>one of the things that we use NATs

00:51:45.285 --> 00:51:46.590
<v Speaker 3>for. So

00:51:46.830 --> 00:51:49.390
<v Speaker 3>as Maya store starts up, it starts to

00:51:49.710 --> 00:51:51.950
<v Speaker 3>look for the message bus. And then through

00:51:51.950 --> 00:51:54.190
<v Speaker 3>the message bus, our control plane gets the

00:51:54.190 --> 00:51:56.590
<v Speaker 3>message and then creates this CRD.

00:51:56.670 --> 00:51:58.670
<v Speaker 3>And when you describe the CRD, it should

00:51:58.670 --> 00:51:59.870
<v Speaker 3>show you some information

00:52:00.855 --> 00:52:02.215
<v Speaker 3>about the node

00:52:02.535 --> 00:52:04.535
<v Speaker 3>and and stuff like that.

00:52:10.055 --> 00:52:11.895
<v Speaker 3>Oh, yeah. It's it's it's a namespace, I

00:52:11.895 --> 00:52:12.455
<v Speaker 3>think. So

00:52:13.015 --> 00:52:15.415
<v Speaker 3>Yeah. It's a little bit annoying sometimes,

00:52:15.415 --> 00:52:18.110
<v Speaker 3>but yeah. Right. So there you go. So

00:52:18.110 --> 00:52:19.550
<v Speaker 3>it it it gives us the information of

00:52:19.550 --> 00:52:21.070
<v Speaker 3>the gRPC endpoint,

00:52:21.310 --> 00:52:23.150
<v Speaker 3>and things like that. So,

00:52:24.910 --> 00:52:25.870
<v Speaker 3>this is not,

00:52:26.190 --> 00:52:27.070
<v Speaker 3>how to say,

00:52:28.030 --> 00:52:30.110
<v Speaker 3>very useful information for for,

00:52:30.510 --> 00:52:31.870
<v Speaker 3>a developer necessarily,

00:52:32.405 --> 00:52:34.565
<v Speaker 3>but it does show you, like, you know,

00:52:34.565 --> 00:52:36.005
<v Speaker 3>all the notes that are there and their

00:52:36.005 --> 00:52:37.925
<v Speaker 3>endpoints and and whatnot.

00:52:39.365 --> 00:52:40.245
<v Speaker 3>So yeah.

00:52:41.205 --> 00:52:42.965
<v Speaker 0>Alright. Sweet. So, I mean,

00:52:43.285 --> 00:52:45.365
<v Speaker 0>the next step is is configure managed store.

00:52:45.365 --> 00:52:47.270
<v Speaker 0>So just if if we had like a

00:52:47.270 --> 00:52:48.790
<v Speaker 0>thirty second summary of where we are right

00:52:48.790 --> 00:52:49.670
<v Speaker 0>now, we have

00:52:50.390 --> 00:52:52.790
<v Speaker 0>we have OpenEBS deployed with Maya store and

00:52:52.790 --> 00:52:54.470
<v Speaker 0>a control plane and data plane and and

00:52:54.470 --> 00:52:56.470
<v Speaker 0>and that's it. Right? Yes.

00:52:56.470 --> 00:52:57.830
<v Speaker 3>Yes. You you've done a lot of work

00:52:57.830 --> 00:53:00.365
<v Speaker 3>but don't have anything yet. That's that's that's

00:53:00.365 --> 00:53:02.285
<v Speaker 3>right. If I were to request a PBC

00:53:02.285 --> 00:53:04.365
<v Speaker 0>right now, it's just gonna It it won't

00:53:04.365 --> 00:53:06.285
<v Speaker 3>work. Yeah. It won't work. Yeah. Yeah. Yeah.

00:53:06.285 --> 00:53:08.285
<v Speaker 3>Exactly. Yeah. So so the the next step,

00:53:08.525 --> 00:53:09.565
<v Speaker 3>is is to

00:53:11.085 --> 00:53:12.045
<v Speaker 3>create

00:53:13.750 --> 00:53:15.830
<v Speaker 3>pools as we as we say.

00:53:16.790 --> 00:53:17.430
<v Speaker 3>And

00:53:17.670 --> 00:53:20.150
<v Speaker 3>we we have stuff in the works actually

00:53:20.150 --> 00:53:21.350
<v Speaker 3>and that

00:53:21.350 --> 00:53:22.230
<v Speaker 3>facilitates

00:53:22.230 --> 00:53:24.310
<v Speaker 3>this to make it a little bit easier,

00:53:24.310 --> 00:53:26.950
<v Speaker 3>and there is NDM that also makes it

00:53:26.950 --> 00:53:27.190
<v Speaker 3>easier.

00:53:27.885 --> 00:53:30.205
<v Speaker 3>But I think for the for the purpose

00:53:30.205 --> 00:53:31.325
<v Speaker 3>of of this

00:53:31.565 --> 00:53:32.365
<v Speaker 3>exercise,

00:53:32.365 --> 00:53:35.085
<v Speaker 3>I think it is probably just easy to

00:53:35.085 --> 00:53:36.845
<v Speaker 3>to look on the notes, which is the

00:53:36.845 --> 00:53:38.765
<v Speaker 3>disk device that I wanna use and create

00:53:39.165 --> 00:53:40.045
<v Speaker 3>a thing like that.

00:53:42.900 --> 00:53:44.180
<v Speaker 0>So I think

00:53:46.900 --> 00:53:47.540
<v Speaker 0>okay.

00:53:48.660 --> 00:53:50.260
<v Speaker 0>I was gonna say, we might get away

00:53:50.260 --> 00:53:52.900
<v Speaker 0>with just using SD on everything, but that's

00:53:52.900 --> 00:53:54.099
<v Speaker 0>not the case at all.

00:53:54.885 --> 00:53:56.885
<v Speaker 3>Yeah. Yeah. So you you can just, you

00:53:56.885 --> 00:53:59.525
<v Speaker 3>know, pick one or two notes or whatever.

00:53:59.685 --> 00:54:01.125
<v Speaker 0>So I I guess we wanna use the

00:54:01.125 --> 00:54:03.765
<v Speaker 0>ones with the NVMe desks or is that

00:54:04.085 --> 00:54:06.085
<v Speaker 0>am I wrong there? Does it not matter?

00:54:06.085 --> 00:54:08.325
<v Speaker 3>Yeah. It it it it it depends a

00:54:08.325 --> 00:54:10.165
<v Speaker 3>little bit on the NVMe drive exactly.

00:54:11.030 --> 00:54:11.750
<v Speaker 3>So

00:54:12.070 --> 00:54:14.070
<v Speaker 3>if if so if you go back to

00:54:14.070 --> 00:54:17.270
<v Speaker 3>the quick start guide Yep. Real quick. So

00:54:17.270 --> 00:54:19.510
<v Speaker 3>the we we talk about the schemes. You

00:54:19.510 --> 00:54:21.350
<v Speaker 3>go back up a little bit

00:54:22.150 --> 00:54:23.510
<v Speaker 3>here. Right? So

00:54:24.045 --> 00:54:26.125
<v Speaker 3>this is this is how we connect to

00:54:26.125 --> 00:54:27.405
<v Speaker 3>the local storage.

00:54:27.885 --> 00:54:28.445
<v Speaker 3>And

00:54:29.085 --> 00:54:29.405
<v Speaker 3>the

00:54:30.605 --> 00:54:31.645
<v Speaker 3>by default,

00:54:31.805 --> 00:54:32.605
<v Speaker 3>we use

00:54:33.724 --> 00:54:37.520
<v Speaker 3>AIO because that's common in all kernels. If

00:54:37.520 --> 00:54:39.200
<v Speaker 3>it's a more modern kernel, and I think

00:54:39.200 --> 00:54:41.200
<v Speaker 3>we just re enable it by default,

00:54:41.520 --> 00:54:43.920
<v Speaker 3>we, in in the development branch,

00:54:44.160 --> 00:54:46.320
<v Speaker 3>it uses I o u ring. If you

00:54:46.320 --> 00:54:48.640
<v Speaker 3>want to go, like, really, really fast, there

00:54:48.640 --> 00:54:50.800
<v Speaker 3>is a scheme that's not documented here because

00:54:50.800 --> 00:54:53.125
<v Speaker 3>it's very difficult to use still, and that

00:54:53.125 --> 00:54:54.245
<v Speaker 3>is PCIe.

00:54:54.565 --> 00:54:57.445
<v Speaker 3>Right? So ideally, we would tell the kernel,

00:54:57.445 --> 00:54:59.845
<v Speaker 3>let the NVMe device go. We'll handle it

00:54:59.845 --> 00:55:00.805
<v Speaker 3>for for you.

00:55:01.685 --> 00:55:04.085
<v Speaker 3>But that's rather complicated. So that's not what

00:55:04.245 --> 00:55:06.060
<v Speaker 0>the one we're doing? What's that? I I

00:55:06.220 --> 00:55:08.380
<v Speaker 3>well, we could, but I would not recommend.

00:55:08.620 --> 00:55:10.220
<v Speaker 3>I mean, it it can be a long

00:55:10.220 --> 00:55:13.260
<v Speaker 3>exercise because we would need to figure out

00:55:13.260 --> 00:55:14.460
<v Speaker 3>the PCIe,

00:55:14.460 --> 00:55:16.140
<v Speaker 3>BDF, and and then

00:55:17.500 --> 00:55:17.740
<v Speaker 3>yeah.

00:55:18.645 --> 00:55:21.925
<v Speaker 0>Alright. So we're gonna go with the NVMe

00:55:22.085 --> 00:55:23.445
<v Speaker 0>over fab option?

00:55:23.845 --> 00:55:25.205
<v Speaker 0>Is that Well,

00:55:25.205 --> 00:55:26.725
<v Speaker 3>I I would just if you go to

00:55:26.725 --> 00:55:28.325
<v Speaker 3>the first example tab.

00:55:28.485 --> 00:55:29.445
<v Speaker 0>Oh, this one?

00:55:30.645 --> 00:55:31.765
<v Speaker 3>One. And just,

00:55:32.529 --> 00:55:34.450
<v Speaker 3>so the array of disks,

00:55:34.849 --> 00:55:37.010
<v Speaker 3>we only accept one disk still.

00:55:37.809 --> 00:55:39.890
<v Speaker 3>Put any disk in there you wanna use,

00:55:40.130 --> 00:55:42.529
<v Speaker 3>and Okay. It will just use whatever

00:55:44.385 --> 00:55:45.985
<v Speaker 0>So I think I'm just getting confused. Because

00:55:45.985 --> 00:55:47.985
<v Speaker 0>I just assumed from this example that I

00:55:47.985 --> 00:55:49.425
<v Speaker 0>had to use something that was exposed as

00:55:49.425 --> 00:55:51.025
<v Speaker 0>SD. But I I I could still use

00:55:51.025 --> 00:55:52.865
<v Speaker 0>slash dev slash m v m e o

00:55:52.865 --> 00:55:54.705
<v Speaker 0>one n o one. Is that Yeah. Yeah.

00:55:54.705 --> 00:55:57.530
<v Speaker 3>Yeah. Yeah. A block device. Yeah. Whatever. Yeah.

00:55:57.530 --> 00:56:00.250
<v Speaker 0>Alright. Let's let's start with the two desks

00:56:00.250 --> 00:56:02.170
<v Speaker 0>with the three and a half terabyte NVMe

00:56:02.170 --> 00:56:02.970
<v Speaker 0>drive.

00:56:03.290 --> 00:56:04.010
<v Speaker 0>Sure.

00:56:04.090 --> 00:56:04.730
<v Speaker 0>Okay.

00:56:06.090 --> 00:56:08.490
<v Speaker 0>So let me create this file.

00:56:12.695 --> 00:56:15.015
<v Speaker 0>Let's not apply it directly to the cluster.

00:56:16.455 --> 00:56:18.135
<v Speaker 0>And just so I'm assuming I'm gonna have

00:56:18.135 --> 00:56:20.215
<v Speaker 0>to modify this a little bit. Right? So

00:56:20.615 --> 00:56:22.695
<v Speaker 4>You're certainly gonna have to change the node

00:56:22.695 --> 00:56:24.615
<v Speaker 4>name in the spec section

00:56:24.695 --> 00:56:26.535
<v Speaker 4>to the node on which we're creating the

00:56:26.535 --> 00:56:26.855
<v Speaker 4>pool.

00:56:28.080 --> 00:56:30.480
<v Speaker 0>Okay. So we'll call this pool one dot

00:56:30.480 --> 00:56:31.440
<v Speaker 0>yaml.

00:56:32.320 --> 00:56:33.200
<v Speaker 0>And

00:56:34.400 --> 00:56:36.480
<v Speaker 0>I need to change this to be

00:56:37.040 --> 00:56:38.480
<v Speaker 0>value from here,

00:56:40.575 --> 00:56:41.455
<v Speaker 0>I believe.

00:56:45.375 --> 00:56:46.975
<v Speaker 0>Was there something else you sorry. You said

00:56:46.975 --> 00:56:48.095
<v Speaker 0>I had to change there?

00:56:48.495 --> 00:56:50.895
<v Speaker 4>Yes. The node the node name. Absolutely.

00:56:54.130 --> 00:56:55.330
<v Speaker 3>A pull Is there a way for me

00:56:55.330 --> 00:56:56.050
<v Speaker 0>to say,

00:56:57.170 --> 00:56:58.930
<v Speaker 0>you know, my cluster is made up of

00:56:58.930 --> 00:57:00.770
<v Speaker 0>three different node types. Is there a way

00:57:00.770 --> 00:57:02.930
<v Speaker 0>for me to say, identify nodes with this

00:57:02.930 --> 00:57:04.210
<v Speaker 0>label and expose this disk?

00:57:04.944 --> 00:57:07.505
<v Speaker 4>Not at this time. Good suggestion.

00:57:07.665 --> 00:57:09.905
<v Speaker 4>Not not at this time. And, indeed, as

00:57:09.905 --> 00:57:12.224
<v Speaker 4>Jeffrey says, we we we do have something

00:57:12.224 --> 00:57:15.265
<v Speaker 4>in work to to automate this aspect going

00:57:15.265 --> 00:57:16.865
<v Speaker 4>forward. But that's a good suggestion.

00:57:18.920 --> 00:57:20.359
<v Speaker 0>I'll be the only one I have. Which

00:57:20.359 --> 00:57:21.960
<v Speaker 4>still comes back to, no, I'm sorry, I

00:57:21.960 --> 00:57:23.880
<v Speaker 4>gotta be cutting and pasting this

00:57:24.200 --> 00:57:25.080
<v Speaker 4>for now.

00:57:25.640 --> 00:57:27.319
<v Speaker 0>Alright, so this will be node pool one

00:57:27.319 --> 00:57:29.480
<v Speaker 0>and node pool two. I've got this, this.

00:57:29.480 --> 00:57:30.920
<v Speaker 0>Is that, does that look okay? I've not

00:57:30.920 --> 00:57:33.234
<v Speaker 0>made a mistake there. That looks good. Alright.

00:57:33.234 --> 00:57:36.435
<v Speaker 0>Awesome. That looks good. I can apply pull

00:57:36.435 --> 00:57:37.075
<v Speaker 0>one.

00:57:39.395 --> 00:57:40.355
<v Speaker 0>Okay.

00:57:40.355 --> 00:57:42.035
<v Speaker 0>So does that mean I can run

00:57:43.395 --> 00:57:44.675
<v Speaker 0>my Azure pulls?

00:57:44.835 --> 00:57:45.315
<v Speaker 4>Indeed.

00:57:49.609 --> 00:57:52.569
<v Speaker 4>However, you would Namespace. Right? Need to be

00:57:52.569 --> 00:57:54.650
<v Speaker 4>in the namespace indeed. And spell it right.

00:57:54.650 --> 00:57:57.210
<v Speaker 4>And spell it right. You you can also

00:57:57.210 --> 00:57:59.529
<v Speaker 3>type MSP. It's it's like shorter. MSP.

00:58:01.674 --> 00:58:03.035
<v Speaker 0>MSP.

00:58:03.994 --> 00:58:06.075
<v Speaker 0>Alright. So I have two storage pool, like,

00:58:06.075 --> 00:58:07.115
<v Speaker 0>online now.

00:58:07.275 --> 00:58:08.154
<v Speaker 3>Yeah.

00:58:08.154 --> 00:58:09.755
<v Speaker 0>Is that am I done? Is that it?

00:58:09.755 --> 00:58:10.875
<v Speaker 0>Can I go home now?

00:58:11.515 --> 00:58:13.515
<v Speaker 3>No. We need to actually create

00:58:14.474 --> 00:58:14.474
<v Speaker 3>a PVC.

00:58:16.680 --> 00:58:18.840
<v Speaker 3>We'll we'll be needing storage class. Yep. We'll

00:58:18.840 --> 00:58:19.800
<v Speaker 4>be needing storage All

00:58:20.359 --> 00:58:21.960
<v Speaker 3>that stuff. Yeah. Yeah. Yeah.

00:58:23.240 --> 00:58:26.119
<v Speaker 0>Okay. So storage classes we can do. Let's

00:58:26.119 --> 00:58:28.200
<v Speaker 0>just continue to add to this file. I'll

00:58:28.200 --> 00:58:29.984
<v Speaker 0>make sure all this code is, oh, I

00:58:29.984 --> 00:58:31.424
<v Speaker 0>mean, it's mostly copy and paste, I'll still

00:58:31.424 --> 00:58:33.185
<v Speaker 0>publish the code to get lab anyway.

00:58:33.345 --> 00:58:35.185
<v Speaker 0>So my store

00:58:36.385 --> 00:58:39.105
<v Speaker 3>Yeah. We should change that to NVMe

00:58:39.105 --> 00:58:41.905
<v Speaker 3>or NVMath, however you wanna phrase it.

00:58:42.545 --> 00:58:44.410
<v Speaker 3>Yeah. And the protocol

00:58:44.810 --> 00:58:46.410
<v Speaker 3>NVMath. That will need to be yeah. That

00:58:46.410 --> 00:58:47.770
<v Speaker 4>will need an f in it.

00:58:48.650 --> 00:58:49.610
<v Speaker 3>Yeah. It's

00:58:50.090 --> 00:58:51.930
<v Speaker 3>so the the e needs to go?

00:58:52.970 --> 00:58:53.770
<v Speaker 0>Yep.

00:58:53.770 --> 00:58:55.930
<v Speaker 0>Yep. Alright. And do we do we want

00:58:55.930 --> 00:58:58.010
<v Speaker 4>to set the replication factor? Do we want

00:58:58.010 --> 00:58:58.875
<v Speaker 4>to have two replicas or are we replicas

00:58:58.875 --> 00:59:01.355
<v Speaker 4>or are we happy with one for testing?

00:59:03.515 --> 00:59:04.155
<v Speaker 0>Oh.

00:59:04.475 --> 00:59:05.995
<v Speaker 0>I mean, now that you've said that, I

00:59:05.995 --> 00:59:07.915
<v Speaker 0>I kinda wanna set it to two. It'd

00:59:07.915 --> 00:59:09.675
<v Speaker 4>almost be short changed to have one, wouldn't

00:59:09.675 --> 00:59:09.835
<v Speaker 1>it?

00:59:12.099 --> 00:59:13.859
<v Speaker 0>And I could just apply this. Is there

00:59:13.859 --> 00:59:16.579
<v Speaker 0>anything else YAML wise before? Nope. Okay. Let's

00:59:16.579 --> 00:59:18.100
<v Speaker 0>just get that applied then.

00:59:20.260 --> 00:59:22.339
<v Speaker 0>Alright. So now I have a storage class.

00:59:22.339 --> 00:59:23.380
<v Speaker 0>So now I

00:59:23.859 --> 00:59:26.579
<v Speaker 0>can run some sort of database that consumes

00:59:26.579 --> 00:59:29.255
<v Speaker 0>a storage class. Right? No.

00:59:29.255 --> 00:59:31.095
<v Speaker 3>Now you need to create the PVC.

00:59:33.895 --> 00:59:36.135
<v Speaker 0>Well, I was assuming we deploy that database

00:59:36.135 --> 00:59:37.815
<v Speaker 0>with Helm, and that'll do that for me.

00:59:37.975 --> 00:59:39.975
<v Speaker 0>Is that what's on this next page? Oh,

00:59:39.975 --> 00:59:42.615
<v Speaker 3>yeah. Well so I I I'm like the

00:59:43.230 --> 00:59:45.550
<v Speaker 3>yeah. So I always do it this way

00:59:45.790 --> 00:59:47.710
<v Speaker 3>because this this this Helm thing is too

00:59:47.710 --> 00:59:50.270
<v Speaker 3>too too fancy for me. But if you

00:59:50.270 --> 00:59:51.950
<v Speaker 3>wanna run Helm, I I guess that would

00:59:51.950 --> 00:59:53.950
<v Speaker 3>work too. Yeah. Yeah. Yeah. No. Let's stick

00:59:53.950 --> 00:59:55.950
<v Speaker 0>to the docs. Know. Let's not deviate because

00:59:55.845 --> 00:59:57.525
<v Speaker 0>in the event it's my mistake when it

00:59:57.525 --> 00:59:59.765
<v Speaker 0>goes wrong. And I know I'm already over

00:59:59.765 --> 01:00:01.445
<v Speaker 0>to this. Let's

01:00:03.365 --> 01:00:04.005
<v Speaker 0>continue to add to this So

01:00:06.484 --> 01:00:08.405
<v Speaker 0>we're gonna create a PVC. We'll just call

01:00:08.405 --> 01:00:09.685
<v Speaker 0>this super DB.

01:00:09.845 --> 01:00:09.925
<v Speaker 0>And

01:00:14.050 --> 01:00:15.650
<v Speaker 0>I mean I can just pick any value,

01:00:15.650 --> 01:00:17.170
<v Speaker 0>right, for the size. So it's gonna use

01:00:17.170 --> 01:00:19.730
<v Speaker 0>to cool. Let me clarify my understanding is

01:00:19.730 --> 01:00:21.570
<v Speaker 0>correct here. We have exposed two three and

01:00:21.570 --> 01:00:23.570
<v Speaker 0>a half terabyte disks to my store has

01:00:23.570 --> 01:00:25.715
<v Speaker 0>created a pool that's replicated.

01:00:25.875 --> 01:00:27.795
<v Speaker 0>So I've got seven gig of storage, but

01:00:27.795 --> 01:00:29.555
<v Speaker 0>three and a half gig set is available.

01:00:29.795 --> 01:00:30.675
<v Speaker 0>Is that correct?

01:00:31.315 --> 01:00:32.995
<v Speaker 3>No. So it's it's well,

01:00:33.475 --> 01:00:33.955
<v Speaker 3>no.

01:00:34.435 --> 01:00:35.155
<v Speaker 3>Yeah.

01:00:35.635 --> 01:00:38.115
<v Speaker 3>It it it's an interesting way of thinking

01:00:38.115 --> 01:00:40.490
<v Speaker 3>though. So I can certainly see why you

01:00:40.490 --> 01:00:42.810
<v Speaker 3>think that way. But the the replication model

01:00:42.810 --> 01:00:44.650
<v Speaker 3>is on a per replica.

01:00:45.210 --> 01:00:46.970
<v Speaker 3>Right? So you have two

01:00:47.130 --> 01:00:47.930
<v Speaker 3>decoupled

01:00:47.930 --> 01:00:50.650
<v Speaker 3>three terra three and a half terabyte pools

01:00:50.650 --> 01:00:51.770
<v Speaker 3>that can store

01:00:52.235 --> 01:00:53.035
<v Speaker 3>whatever.

01:00:53.595 --> 01:00:55.915
<v Speaker 3>Right? But when you create a PVC, you

01:00:55.915 --> 01:00:58.155
<v Speaker 3>say, I wanna have two replicas, and we

01:00:58.155 --> 01:01:00.075
<v Speaker 3>will look for two pools on which to

01:01:00.075 --> 01:01:01.275
<v Speaker 3>put the replica.

01:01:01.435 --> 01:01:03.355
<v Speaker 3>And then and only then is it, like,

01:01:03.355 --> 01:01:05.995
<v Speaker 3>we replicate that data. But the pools themselves

01:01:05.995 --> 01:01:06.555
<v Speaker 3>are

01:01:06.860 --> 01:01:07.580
<v Speaker 3>are

01:01:07.820 --> 01:01:09.260
<v Speaker 3>a thing on their own.

01:01:10.860 --> 01:01:13.180
<v Speaker 2>Yeah. So you you oh, sorry. Yeah. Kiran

01:01:13.180 --> 01:01:15.660
<v Speaker 3>Kiran can explain this better. Yeah. So we've

01:01:15.660 --> 01:01:17.420
<v Speaker 2>done this with almost all the pools, the

01:01:17.420 --> 01:01:18.460
<v Speaker 2>same convention.

01:01:18.460 --> 01:01:18.620
<v Speaker 2>So

01:01:19.715 --> 01:01:23.555
<v Speaker 2>the storage is not aggregated from different nodes.

01:01:23.555 --> 01:01:26.755
<v Speaker 2>The it's kind of stays on that node.

01:01:26.755 --> 01:01:28.195
<v Speaker 2>And when we talk about, like, a five

01:01:28.195 --> 01:01:30.435
<v Speaker 2>g volume that you create

01:01:30.595 --> 01:01:32.755
<v Speaker 2>and you specify two replicas,

01:01:33.155 --> 01:01:35.820
<v Speaker 2>it actually saves 10 GB of data. Each

01:01:35.820 --> 01:01:37.820
<v Speaker 2>replica has five GB of data when it's

01:01:37.820 --> 01:01:38.940
<v Speaker 2>full. Right?

01:01:39.820 --> 01:01:41.980
<v Speaker 2>So it's a synchronous duplication of the entire

01:01:41.980 --> 01:01:43.660
<v Speaker 2>data on each of the replicas.

01:01:44.780 --> 01:01:46.940
<v Speaker 0>Okay. So right now, I mean, my pool

01:01:46.940 --> 01:01:47.500
<v Speaker 0>is

01:01:47.900 --> 01:01:50.484
<v Speaker 0>is a pool always one desk? What I

01:01:50.484 --> 01:01:52.165
<v Speaker 0>mean is, like, if that actual disk dies

01:01:52.165 --> 01:01:54.484
<v Speaker 0>at a physical level, then the replication doesn't

01:01:54.484 --> 01:01:56.005
<v Speaker 0>help me at all. Is that correct?

01:01:56.405 --> 01:01:59.125
<v Speaker 3>Yeah. So if the for the PVCs that

01:01:59.125 --> 01:02:00.965
<v Speaker 3>have more replicas, they will survive.

01:02:01.125 --> 01:02:03.205
<v Speaker 3>For the PVCs that are on there that

01:02:03.205 --> 01:02:04.885
<v Speaker 3>only have one replica,

01:02:05.630 --> 01:02:08.510
<v Speaker 3>they're they're gone. But you but that's the

01:02:08.510 --> 01:02:10.270
<v Speaker 3>idea that the developer gets what he asks

01:02:10.270 --> 01:02:12.750
<v Speaker 3>for, even though it it might not necessarily

01:02:12.750 --> 01:02:14.350
<v Speaker 3>always be what he wants.

01:02:14.670 --> 01:02:16.110
<v Speaker 3>So we we are

01:02:16.350 --> 01:02:18.190
<v Speaker 3>looking into it's like, well, maybe you wanna

01:02:18.190 --> 01:02:20.735
<v Speaker 3>have local redundancy as we call it. So

01:02:20.735 --> 01:02:22.815
<v Speaker 3>you create a pool, and that pool by

01:02:22.815 --> 01:02:24.255
<v Speaker 3>itself is also

01:02:24.415 --> 01:02:25.295
<v Speaker 3>redundant.

01:02:26.335 --> 01:02:28.415
<v Speaker 3>But that comes at a cost in terms

01:02:28.415 --> 01:02:30.495
<v Speaker 3>of, you know, storage.

01:02:30.655 --> 01:02:30.815
<v Speaker 3>So

01:02:31.750 --> 01:02:34.310
<v Speaker 0>there's traditional Several ways to skin a cat.

01:02:34.470 --> 01:02:37.510
<v Speaker 3>Yeah. Oh, yeah. Sorry. So traditional operations wise

01:02:37.510 --> 01:02:39.030
<v Speaker 0>then. I mean, when I'm in this kind

01:02:39.030 --> 01:02:41.670
<v Speaker 0>of situation, from my experience, I would probably

01:02:41.670 --> 01:02:43.910
<v Speaker 0>rate the desks on a hardware level. Is

01:02:43.910 --> 01:02:45.430
<v Speaker 0>that still something that would be recommended?

01:02:46.875 --> 01:02:48.235
<v Speaker 3>Depends. Depends.

01:02:49.035 --> 01:02:50.875
<v Speaker 3>Right? So it's let let me let me

01:02:50.875 --> 01:02:52.955
<v Speaker 3>put it this way. Let's say that, I

01:02:52.955 --> 01:02:54.875
<v Speaker 3>am a developer and I you're a company

01:02:54.875 --> 01:02:56.155
<v Speaker 3>and I work for you and you ask

01:02:56.155 --> 01:02:58.235
<v Speaker 3>me to deploy something in Kubernetes

01:02:58.235 --> 01:03:00.235
<v Speaker 3>and I see five storage nodes and I

01:03:00.235 --> 01:03:01.990
<v Speaker 3>think, oh, let me make sure that I

01:03:01.990 --> 01:03:03.830
<v Speaker 3>don't lose that data, I would type replica

01:03:03.830 --> 01:03:04.630
<v Speaker 3>as five.

01:03:05.590 --> 01:03:08.550
<v Speaker 3>So that means that the system finds nodes

01:03:08.550 --> 01:03:09.510
<v Speaker 3>suitable

01:03:10.310 --> 01:03:11.990
<v Speaker 3>to put those replicas on.

01:03:12.310 --> 01:03:13.990
<v Speaker 3>And then if one of the nodes dies,

01:03:13.990 --> 01:03:15.625
<v Speaker 3>I have four. Another one dies, I have

01:03:15.625 --> 01:03:17.464
<v Speaker 3>three, and and and so on and so

01:03:17.464 --> 01:03:19.944
<v Speaker 3>on. If I say, no. In the cluster,

01:03:19.944 --> 01:03:22.265
<v Speaker 3>find a pool. Just put that replica on

01:03:22.265 --> 01:03:24.184
<v Speaker 3>that single pool. That pool dies. I lost

01:03:24.184 --> 01:03:24.984
<v Speaker 3>my data.

01:03:26.664 --> 01:03:28.265
<v Speaker 3>Right? Okay. Now that that's not to say

01:03:28.265 --> 01:03:30.184
<v Speaker 3>that we cannot make the pool redundant. We

01:03:30.184 --> 01:03:30.424
<v Speaker 3>could.

01:03:31.119 --> 01:03:31.760
<v Speaker 3>But

01:03:32.240 --> 01:03:35.520
<v Speaker 3>I'm not sure if that that traditional model,

01:03:35.520 --> 01:03:37.920
<v Speaker 3>right, would be always the preferred way.

01:03:40.080 --> 01:03:40.640
<v Speaker 3>So

01:03:41.119 --> 01:03:43.545
<v Speaker 0>yeah. Okay. That makes sense. That that's good.

01:03:43.545 --> 01:03:45.065
<v Speaker 0>Okay. So I now have a PVC.

01:03:45.145 --> 01:03:46.265
<v Speaker 0>Let's go back to our

01:03:47.305 --> 01:03:49.464
<v Speaker 0>I'm not gonna verify the claim. I'm pretty

01:03:49.464 --> 01:03:50.265
<v Speaker 0>confident.

01:03:53.224 --> 01:03:55.465
<v Speaker 1>Famous last words. I know.

01:03:56.345 --> 01:04:00.000
<v Speaker 0>I okay. Okay. Okay. Like, let's run it.

01:04:01.280 --> 01:04:03.120
<v Speaker 0>And I called it super d b.

01:04:05.680 --> 01:04:09.440
<v Speaker 0>Okay. It worked. Alright. So now

01:04:10.160 --> 01:04:12.560
<v Speaker 0>it wants me to actually check the p

01:04:12.560 --> 01:04:13.520
<v Speaker 0>b itself.

01:04:13.680 --> 01:04:14.000
<v Speaker 0>So

01:04:18.214 --> 01:04:18.855
<v Speaker 0>volume.

01:04:21.575 --> 01:04:23.415
<v Speaker 0>Alright. That looks good to me.

01:04:24.694 --> 01:04:25.415
<v Speaker 0>So

01:04:26.615 --> 01:04:29.335
<v Speaker 3>Yeah. There is this is a CRD

01:04:29.430 --> 01:04:31.430
<v Speaker 3>and that shows you the

01:04:35.510 --> 01:04:37.510
<v Speaker 3>so we we we've created this

01:04:37.750 --> 01:04:41.175
<v Speaker 3>almost, like, small very small storage network in

01:04:41.175 --> 01:04:43.335
<v Speaker 3>the Kubernetes cluster, it shows you the it

01:04:43.335 --> 01:04:45.015
<v Speaker 3>can show you the details of

01:04:46.855 --> 01:04:49.015
<v Speaker 3>of how that thing is is is built

01:04:49.015 --> 01:04:51.015
<v Speaker 3>up in terms of where are the children

01:04:51.015 --> 01:04:53.415
<v Speaker 3>as we call them. So

01:04:53.870 --> 01:04:56.590
<v Speaker 3>there's an additional CRD that that does that.

01:04:56.590 --> 01:04:57.150
<v Speaker 3>Yeah.

01:04:58.030 --> 01:04:59.710
<v Speaker 2>Yeah. It'll be good to do a minus

01:04:59.710 --> 01:05:01.150
<v Speaker 2>OEML on that one.

01:05:01.630 --> 01:05:02.910
<v Speaker 0>On the MSV?

01:05:03.070 --> 01:05:03.790
<v Speaker 3>Yep.

01:05:06.750 --> 01:05:07.550
<v Speaker 3>Oh, wow.

01:05:09.765 --> 01:05:10.885
<v Speaker 3>So yeah.

01:05:11.204 --> 01:05:13.525
<v Speaker 3>So let me see. Let me digest this.

01:05:13.525 --> 01:05:14.005
<v Speaker 3>I

01:05:14.805 --> 01:05:17.205
<v Speaker 0>Oh, we got replication here. Right.

01:05:17.684 --> 01:05:19.765
<v Speaker 3>So so there's the the nexus, and the

01:05:19.765 --> 01:05:21.045
<v Speaker 3>nexus has children,

01:05:21.204 --> 01:05:24.430
<v Speaker 3>which maybe we should call them replicas.

01:05:24.510 --> 01:05:25.150
<v Speaker 3>But anyway

01:05:26.510 --> 01:05:29.230
<v Speaker 3>and so the nexus writes to those two

01:05:29.310 --> 01:05:30.270
<v Speaker 3>children,

01:05:30.670 --> 01:05:32.510
<v Speaker 3>and the children are

01:05:32.990 --> 01:05:33.870
<v Speaker 3>replicas

01:05:33.870 --> 01:05:36.270
<v Speaker 3>on pool on node two and pool on

01:05:36.270 --> 01:05:36.750
<v Speaker 3>node one.

01:05:38.525 --> 01:05:41.165
<v Speaker 3>So whoever now mounts the PVC

01:05:42.765 --> 01:05:45.085
<v Speaker 3>eventually writes to pool on node two and

01:05:45.085 --> 01:05:46.285
<v Speaker 3>pool on node one.

01:05:48.924 --> 01:05:49.325
<v Speaker 0>Okay.

01:05:50.220 --> 01:05:52.780
<v Speaker 3>It's like a simple mirror mirroring effectively.

01:05:52.780 --> 01:05:55.980
<v Speaker 2>Yeah. Jeffrey, again, like, I'm asking some basic

01:05:55.980 --> 01:05:57.900
<v Speaker 2>questions here. Why is

01:05:58.220 --> 01:05:59.420
<v Speaker 2>one URI

01:05:59.500 --> 01:06:01.580
<v Speaker 2>in VMF and the other one is PDF?

01:06:01.835 --> 01:06:04.234
<v Speaker 2>Maybe it's Ah, yeah. Yeah. That's a good

01:06:04.234 --> 01:06:06.234
<v Speaker 3>question, Kiran. Optimization.

01:06:07.914 --> 01:06:08.474
<v Speaker 3>So,

01:06:09.115 --> 01:06:11.914
<v Speaker 3>the Nexus itself figured out that, hey. Wait

01:06:11.914 --> 01:06:13.994
<v Speaker 3>a minute. One of those two replicas is

01:06:13.994 --> 01:06:15.755
<v Speaker 3>actually on the machine that I'm sitting on.

01:06:16.450 --> 01:06:18.370
<v Speaker 3>It doesn't make sense to do that over

01:06:18.370 --> 01:06:21.650
<v Speaker 3>the DCP socket. Right? So I'll just,

01:06:22.610 --> 01:06:25.170
<v Speaker 3>you know, mem copy it. Well, it's actually

01:06:25.170 --> 01:06:27.010
<v Speaker 3>a serial copy, but, you know,

01:06:27.490 --> 01:06:28.690
<v Speaker 3>bypass the network there.

01:06:30.265 --> 01:06:32.345
<v Speaker 3>And future optimizations,

01:06:32.425 --> 01:06:33.865
<v Speaker 3>we wanna

01:06:33.945 --> 01:06:36.265
<v Speaker 3>give it an affinity such that reads always

01:06:36.265 --> 01:06:37.625
<v Speaker 3>go from the local one,

01:06:38.585 --> 01:06:39.545
<v Speaker 3>things like that.

01:06:40.744 --> 01:06:42.825
<v Speaker 3>We're right in time and bless you. Thank

01:06:42.825 --> 01:06:44.025
<v Speaker 0>you. Yeah.

01:06:44.585 --> 01:06:45.065
<v Speaker 0>So

01:06:45.810 --> 01:06:46.290
<v Speaker 0>let me

01:06:47.810 --> 01:06:49.090
<v Speaker 0>I I wanna make sure I've got this

01:06:49.090 --> 01:06:50.770
<v Speaker 0>right in my head. So we've created a

01:06:50.770 --> 01:06:51.890
<v Speaker 0>master volume

01:06:52.370 --> 01:06:54.930
<v Speaker 0>and it's available on both of those nodes.

01:06:54.930 --> 01:06:57.010
<v Speaker 0>So my workload has the freedom to migrate

01:06:57.010 --> 01:06:59.250
<v Speaker 0>between either of those two nodes if it

01:06:59.250 --> 01:07:00.370
<v Speaker 0>wants that PVC.

01:07:00.450 --> 01:07:01.090
<v Speaker 0>Is that correct?

01:07:02.835 --> 01:07:03.395
<v Speaker 3>No.

01:07:03.635 --> 01:07:07.155
<v Speaker 3>No. Close. So the the the the yeah.

01:07:07.155 --> 01:07:08.035
<v Speaker 3>I I think

01:07:08.355 --> 01:07:10.835
<v Speaker 3>yeah. Next time around, probably should have a

01:07:10.835 --> 01:07:11.395
<v Speaker 3>picture.

01:07:11.715 --> 01:07:13.475
<v Speaker 3>So the the the nexus

01:07:13.715 --> 01:07:15.955
<v Speaker 3>is a NVMe over fabric target.

01:07:17.230 --> 01:07:17.870
<v Speaker 3>And

01:07:18.750 --> 01:07:21.230
<v Speaker 3>any node in the cluster can connect to

01:07:21.230 --> 01:07:22.270
<v Speaker 3>the Nexus

01:07:22.830 --> 01:07:25.790
<v Speaker 3>over NVMe over fabric. Also iSCSI, but we're

01:07:25.790 --> 01:07:28.990
<v Speaker 3>not going into that. But that's how you

01:07:29.465 --> 01:07:32.345
<v Speaker 3>how a node would connect to this PVC.

01:07:33.305 --> 01:07:36.105
<v Speaker 3>And then the Nexus then doesn't do anything

01:07:36.105 --> 01:07:37.865
<v Speaker 3>other than so it's stateless.

01:07:38.265 --> 01:07:39.145
<v Speaker 3>There you go.

01:07:39.465 --> 01:07:41.625
<v Speaker 3>But it needs to get this IO out

01:07:41.625 --> 01:07:42.425
<v Speaker 3>somewhere,

01:07:42.425 --> 01:07:44.185
<v Speaker 3>and it pushes those IOs

01:07:44.450 --> 01:07:48.290
<v Speaker 3>out to the children or replicas as it,

01:07:48.530 --> 01:07:51.090
<v Speaker 3>is also written down here. So the Nexus

01:07:51.090 --> 01:07:53.170
<v Speaker 3>receives the IO from your workload and pushes

01:07:53.170 --> 01:07:55.490
<v Speaker 3>that out to those two nodes you see

01:07:55.490 --> 01:07:57.650
<v Speaker 3>there, pool node one and pool node two.

01:07:57.810 --> 01:08:00.535
<v Speaker 3>That's how the it's like a rate mirror

01:08:00.535 --> 01:08:01.655
<v Speaker 3>thing. Right?

01:08:02.455 --> 01:08:04.615
<v Speaker 3>Mirror. Okay. So if I if I deploy

01:08:04.615 --> 01:08:07.095
<v Speaker 0>a pod that consumes this PVC, it's gonna

01:08:07.095 --> 01:08:08.935
<v Speaker 0>be scheduled on one node and always that

01:08:08.935 --> 01:08:11.175
<v Speaker 0>node there forward. Is that right?

01:08:11.735 --> 01:08:13.415
<v Speaker 3>So the the the workload itself can can

01:08:13.415 --> 01:08:15.780
<v Speaker 3>go anywhere because the the way that you

01:08:15.780 --> 01:08:17.620
<v Speaker 3>connect to the Nexus is

01:08:17.939 --> 01:08:20.260
<v Speaker 3>over a fabric. Right? That's networked.

01:08:20.899 --> 01:08:23.220
<v Speaker 3>But likely, the scheduler will put it on

01:08:23.220 --> 01:08:24.820
<v Speaker 3>the same note because I think we have

01:08:24.820 --> 01:08:27.620
<v Speaker 3>some some rule affinities in there that that

01:08:27.620 --> 01:08:29.764
<v Speaker 3>prefer it to go that way or that

01:08:29.764 --> 01:08:31.364
<v Speaker 3>way. But, you you can

01:08:32.085 --> 01:08:34.005
<v Speaker 3>that's what I meant with that's the reason

01:08:34.005 --> 01:08:35.844
<v Speaker 3>why we have the the message bus. Right?

01:08:35.844 --> 01:08:36.965
<v Speaker 3>You don't wanna have

01:08:37.284 --> 01:08:40.085
<v Speaker 3>the Maya store service run on every node.

01:08:40.899 --> 01:08:43.220
<v Speaker 3>Right? So let's say you have five nodes,

01:08:43.220 --> 01:08:44.899
<v Speaker 3>only two of them run Maya store and

01:08:44.899 --> 01:08:46.099
<v Speaker 3>you mirror them.

01:08:46.580 --> 01:08:48.420
<v Speaker 3>And the other three nodes just connect to

01:08:48.420 --> 01:08:49.779
<v Speaker 3>the Maya store instances.

01:08:50.500 --> 01:08:51.219
<v Speaker 3>Right?

01:08:52.500 --> 01:08:52.899
<v Speaker 0>Okay.

01:08:53.885 --> 01:08:56.045
<v Speaker 0>We have a question in chat, which will

01:08:56.045 --> 01:08:57.165
<v Speaker 0>pop up now.

01:08:57.405 --> 01:08:59.725
<v Speaker 3>Oh, boy. So does the Nexus picks the

01:08:59.725 --> 01:09:01.404
<v Speaker 0>IO from the app itself?

01:09:01.805 --> 01:09:03.085
<v Speaker 0>Or how does that work?

01:09:04.525 --> 01:09:06.604
<v Speaker 3>Pick the IO from the app itself.

01:09:08.810 --> 01:09:09.770
<v Speaker 3>Not sure.

01:09:10.090 --> 01:09:11.770
<v Speaker 0>I was hoping it made sense to you.

01:09:12.810 --> 01:09:14.090
<v Speaker 0>If you could give us a a little

01:09:14.090 --> 01:09:15.770
<v Speaker 0>bit more detail in the chat, we'll try

01:09:15.770 --> 01:09:17.210
<v Speaker 0>and come back to that question. I I

01:09:17.210 --> 01:09:20.010
<v Speaker 2>think, Duffy, it's question about does this use

01:09:20.010 --> 01:09:20.570
<v Speaker 2>POSIX?

01:09:20.845 --> 01:09:21.965
<v Speaker 2>Does it mount?

01:09:22.845 --> 01:09:25.405
<v Speaker 2>Or can the app directly communicate to the

01:09:25.405 --> 01:09:28.444
<v Speaker 2>Nexus? Oh. Oh, right. Right. Ah, good question.

01:09:28.444 --> 01:09:29.484
<v Speaker 3>So we can actually do

01:09:30.365 --> 01:09:31.005
<v Speaker 3>well,

01:09:31.245 --> 01:09:34.045
<v Speaker 3>maybe I I should stop confusing people, but

01:09:34.045 --> 01:09:35.245
<v Speaker 3>we can actually do both.

01:09:36.100 --> 01:09:38.180
<v Speaker 3>So if you write an application, you can

01:09:38.180 --> 01:09:40.100
<v Speaker 3>use an API to directly write to the

01:09:40.100 --> 01:09:42.500
<v Speaker 3>Nexus without anything else. Right?

01:09:42.820 --> 01:09:44.500
<v Speaker 3>But the way that is set up now

01:09:44.500 --> 01:09:46.500
<v Speaker 3>is that the node that is going to

01:09:46.500 --> 01:09:49.060
<v Speaker 3>connect to the Nexus will use the NVMe

01:09:49.060 --> 01:09:50.020
<v Speaker 3>over fabric

01:09:50.425 --> 01:09:53.145
<v Speaker 3>TCP module that we loaded in the beginning,

01:09:53.145 --> 01:09:55.224
<v Speaker 3>right, to connect to the Nexus.

01:09:56.425 --> 01:09:58.105
<v Speaker 3>So if if if you if you're familiar

01:09:58.105 --> 01:10:01.304
<v Speaker 3>with iSCSI, just just replace iSCSI for NVMe

01:10:01.304 --> 01:10:03.060
<v Speaker 3>over fabric. That's it.

01:10:03.780 --> 01:10:05.300
<v Speaker 0>Okay. So I think there was something really

01:10:05.300 --> 01:10:07.300
<v Speaker 0>cool there. Like, so what you were saying

01:10:07.300 --> 01:10:09.460
<v Speaker 0>was my application doesn't have to change. I

01:10:09.460 --> 01:10:11.380
<v Speaker 0>can write to a desk and then the

01:10:11.380 --> 01:10:13.380
<v Speaker 0>magic happens for me. But I think what

01:10:13.380 --> 01:10:15.060
<v Speaker 0>also you alluded to there is I could

01:10:15.060 --> 01:10:15.860
<v Speaker 0>make my application

01:10:16.585 --> 01:10:19.864
<v Speaker 0>OpenEBS or MyAstro aware and write directly to

01:10:19.864 --> 01:10:20.744
<v Speaker 0>the Nexus.

01:10:21.065 --> 01:10:21.945
<v Speaker 3>Yeah. Exactly.

01:10:22.585 --> 01:10:23.864
<v Speaker 3>Yeah. And in fact, we've done a lot

01:10:23.864 --> 01:10:25.545
<v Speaker 3>more work there and don't

01:10:25.545 --> 01:10:27.145
<v Speaker 3>get me started, but we we we Jan,

01:10:27.145 --> 01:10:28.824
<v Speaker 3>who was on the call, has actually written

01:10:28.824 --> 01:10:31.385
<v Speaker 3>a Vert.io driver that allows you and we

01:10:31.385 --> 01:10:33.530
<v Speaker 3>actually did this for Go. You have these,

01:10:33.690 --> 01:10:36.329
<v Speaker 3>what's it called, interfaces. Right? Read at, write

01:10:36.329 --> 01:10:38.010
<v Speaker 3>at, that type of stuff. And if you

01:10:38.010 --> 01:10:40.730
<v Speaker 3>implement the interface, you can, you know, use

01:10:40.730 --> 01:10:42.729
<v Speaker 3>it the way it was like a file.

01:10:42.809 --> 01:10:45.784
<v Speaker 3>And so you could you could use Go

01:10:45.784 --> 01:10:48.265
<v Speaker 3>reader and writer to write to a Vert.io

01:10:48.265 --> 01:10:50.344
<v Speaker 3>device that would immediately write into

01:10:50.905 --> 01:10:52.824
<v Speaker 3>well, it wasn't called MyStore back then, I

01:10:52.824 --> 01:10:55.385
<v Speaker 3>must say. But no. So, yes, that is

01:10:55.385 --> 01:10:56.025
<v Speaker 3>possible.

01:10:56.185 --> 01:10:58.010
<v Speaker 3>And I think that that's, in fact, the

01:10:58.010 --> 01:11:00.250
<v Speaker 3>real future because why would you go through

01:11:00.250 --> 01:11:01.849
<v Speaker 3>the operating system anyway?

01:11:02.410 --> 01:11:04.010
<v Speaker 3>It's like, yeah, because you have a file

01:11:04.010 --> 01:11:05.930
<v Speaker 3>system. Well, file systems, why is there a

01:11:05.930 --> 01:11:07.850
<v Speaker 3>file system still? They used to be there

01:11:07.850 --> 01:11:10.650
<v Speaker 3>too because the caching and da da da,

01:11:10.650 --> 01:11:12.264
<v Speaker 3>but it's like, do we really need to?

01:11:12.264 --> 01:11:14.505
<v Speaker 3>That's what they mean with DAX DAX file

01:11:14.505 --> 01:11:17.544
<v Speaker 3>systems, d a x, direct access file system.

01:11:17.545 --> 01:11:20.024
<v Speaker 3>It bypasses the page cache. It's like, sorry,

01:11:20.025 --> 01:11:21.224
<v Speaker 3>colonel. You're just slowing us down.

01:11:23.300 --> 01:11:26.740
<v Speaker 0>Alright. Cool. That's exciting. Definitely something for another

01:11:26.740 --> 01:11:28.740
<v Speaker 0>session I think. Okay.

01:11:29.540 --> 01:11:30.980
<v Speaker 0>I I I don't wanna keep us too

01:11:30.980 --> 01:11:33.140
<v Speaker 0>far beyond what we actually had scheduled. So

01:11:33.140 --> 01:11:35.220
<v Speaker 0>let's assume that in the next twelve minutes

01:11:35.220 --> 01:11:37.275
<v Speaker 0>we wanna show off everything that we've done

01:11:37.275 --> 01:11:39.114
<v Speaker 0>so far. Are we gonna continue with the

01:11:39.114 --> 01:11:40.875
<v Speaker 0>docs, or is there something we should jump

01:11:40.875 --> 01:11:41.594
<v Speaker 0>straight to?

01:11:42.635 --> 01:11:43.035
<v Speaker 3>I

01:11:43.594 --> 01:11:44.315
<v Speaker 3>so

01:11:44.875 --> 01:11:45.114
<v Speaker 3>the

01:11:45.835 --> 01:11:48.235
<v Speaker 3>if you deploy a file part, then it

01:11:48.235 --> 01:11:51.000
<v Speaker 3>would just mount that PVC and run FIO

01:11:51.000 --> 01:11:52.679
<v Speaker 3>against it with some very

01:11:55.000 --> 01:11:56.520
<v Speaker 3>odd defaults,

01:11:56.680 --> 01:11:58.840
<v Speaker 3>like, very small. But, yeah, you could run

01:11:58.840 --> 01:12:00.040
<v Speaker 3>that, and then it would,

01:12:00.680 --> 01:12:02.920
<v Speaker 3>you know, show you some output in terms

01:12:02.920 --> 01:12:05.195
<v Speaker 3>of Do you want to modify that, or

01:12:05.195 --> 01:12:06.395
<v Speaker 0>do you want me just to apply it

01:12:06.395 --> 01:12:08.795
<v Speaker 0>straight up? No. I I I think it's

01:12:08.795 --> 01:12:09.275
<v Speaker 3>fine

01:12:09.675 --> 01:12:11.675
<v Speaker 3>for the for the sake of the the

01:12:11.915 --> 01:12:12.955
<v Speaker 3>stream. I think

01:12:13.835 --> 01:12:15.515
<v Speaker 4>we've changed the name of the claim though,

01:12:15.515 --> 01:12:16.155
<v Speaker 4>didn't we, Jeffrey?

01:12:16.719 --> 01:12:17.360
<v Speaker 3>Yep.

01:12:17.599 --> 01:12:20.000
<v Speaker 3>Oh, yeah. Shoot. The the fire. Yeah. I'm

01:12:20.000 --> 01:12:22.239
<v Speaker 4>always expecting it to be called MS volume

01:12:22.239 --> 01:12:23.840
<v Speaker 4>claim, and I think we went to super

01:12:23.840 --> 01:12:25.360
<v Speaker 4>DB. Did we not?

01:12:26.000 --> 01:12:26.800
<v Speaker 0>Sorry.

01:12:27.360 --> 01:12:29.360
<v Speaker 4>No. No worries. No worries. So if I

01:12:29.360 --> 01:12:31.014
<v Speaker 0>run get deployment

01:12:31.175 --> 01:12:33.255
<v Speaker 0>I'm assuming I just created a deployment here.

01:12:33.255 --> 01:12:33.974
<v Speaker 0>No. No.

01:12:35.014 --> 01:12:38.054
<v Speaker 3>I know it's just a flat pod. Just

01:12:38.534 --> 01:12:38.855
<v Speaker 2>I

01:12:42.775 --> 01:12:44.934
<v Speaker 2>it's on the Default?

01:12:45.255 --> 01:12:45.655
<v Speaker 2>Yep.

01:12:46.270 --> 01:12:48.510
<v Speaker 0>Yeah. Okay. Oh, I can't modify it. Okay.

01:12:48.510 --> 01:12:50.189
<v Speaker 0>So I'm gonna have to delete the pod,

01:12:51.949 --> 01:12:53.550
<v Speaker 0>and then I will need to pull this

01:12:53.550 --> 01:12:54.189
<v Speaker 0>down.

01:12:55.869 --> 01:12:57.550
<v Speaker 2>That was a c k question. I think

01:12:57.550 --> 01:12:58.510
<v Speaker 2>you can modify a pod.

01:13:00.565 --> 01:13:02.645
<v Speaker 3>Oh, why can't you modify a pod? Why

01:13:02.645 --> 01:13:03.124
<v Speaker 3>not?

01:13:03.605 --> 01:13:06.644
<v Speaker 0>The specs immutable. Yeah. Oh, why?

01:13:07.605 --> 01:13:09.204
<v Speaker 0>Because you're not supposed to work directly with

01:13:09.204 --> 01:13:11.045
<v Speaker 0>pods. You're supposed to use an abstraction.

01:13:13.490 --> 01:13:15.330
<v Speaker 0>So this is awesome. I love that you're

01:13:15.330 --> 01:13:16.610
<v Speaker 0>using Nexery.dev.

01:13:16.610 --> 01:13:18.690
<v Speaker 3>Alright. Isn't it amazing? I'm a huge fan

01:13:18.690 --> 01:13:20.610
<v Speaker 0>of Nexery. It's so cool. Yeah. You're familiar

01:13:20.610 --> 01:13:23.330
<v Speaker 0>with It's like a dynamic docker registry where

01:13:23.330 --> 01:13:25.090
<v Speaker 0>you just tell it whatever commands you want.

01:13:25.090 --> 01:13:27.495
<v Speaker 0>Like I could just add w get slash

01:13:27.495 --> 01:13:29.975
<v Speaker 0>w get to this. Yeah. Yeah. It's so

01:13:29.975 --> 01:13:33.015
<v Speaker 0>good. And it's always the, like, freshly compiled.

01:13:33.015 --> 01:13:34.935
<v Speaker 3>If if they commit a new version, it's

01:13:35.015 --> 01:13:36.854
<v Speaker 3>you know? Yeah. Anyway. Yep.

01:13:37.415 --> 01:13:40.135
<v Speaker 0>Alright. So change that to Super DB. This

01:13:41.400 --> 01:13:43.320
<v Speaker 4>runs Yeah. And sleep.

01:13:43.960 --> 01:13:46.040
<v Speaker 3>Yeah. And so then what we typically use,

01:13:46.040 --> 01:13:47.880
<v Speaker 3>we exec into the container, and then in

01:13:47.880 --> 01:13:49.880
<v Speaker 3>the container on file because you wanna see

01:13:49.880 --> 01:13:51.240
<v Speaker 3>output. Right? So

01:13:52.325 --> 01:13:55.925
<v Speaker 0>Alright. So we deploy file. We should see

01:13:55.925 --> 01:14:00.085
<v Speaker 0>that exists this time. Yep. Curating. That's better.

01:14:00.565 --> 01:14:02.085
<v Speaker 0>I'll just run a watch on that.

01:14:10.080 --> 01:14:11.120
<v Speaker 0>There we go.

01:14:11.360 --> 01:14:12.480
<v Speaker 0>Good. I thought I was gonna have to

01:14:12.480 --> 01:14:14.240
<v Speaker 0>think of a joke there. So

01:14:15.120 --> 01:14:16.800
<v Speaker 0>and we wanna exec in.

01:14:18.640 --> 01:14:21.040
<v Speaker 0>I'm in. So let's see.

01:14:25.275 --> 01:14:25.835
<v Speaker 3>Oh,

01:14:26.235 --> 01:14:26.875
<v Speaker 3>Yeah.

01:14:28.875 --> 01:14:30.395
<v Speaker 0>That's alright. I just copied this.

01:14:34.700 --> 01:14:38.219
<v Speaker 0>So can someone tell me what file is?

01:14:39.420 --> 01:14:40.860
<v Speaker 3>Flexible IO

01:14:41.020 --> 01:14:41.900
<v Speaker 3>tester.

01:14:42.220 --> 01:14:45.820
<v Speaker 3>It's it's written by, Jens or.

01:14:45.980 --> 01:14:47.500
<v Speaker 3>I'm not sure if I pronounced his name

01:14:47.500 --> 01:14:48.140
<v Speaker 3>correct.

01:14:48.700 --> 01:14:51.260
<v Speaker 3>He's a

01:14:50.565 --> 01:14:52.725
<v Speaker 3>guy from Denmark who works at Facebook, and

01:14:52.725 --> 01:14:53.605
<v Speaker 3>he is the

01:14:54.165 --> 01:14:56.645
<v Speaker 3>the kernel maintainer of the Linux block layer.

01:14:56.645 --> 01:14:58.724
<v Speaker 3>So everything block device related,

01:14:59.525 --> 01:15:01.844
<v Speaker 3>he's he's kinda, like, responsible for, if you

01:15:01.844 --> 01:15:02.324
<v Speaker 3>will.

01:15:03.285 --> 01:15:06.010
<v Speaker 3>And, in order to test the stuff, he

01:15:06.010 --> 01:15:07.770
<v Speaker 3>thought I need a tool, and there you

01:15:07.770 --> 01:15:08.969
<v Speaker 3>go, file.

01:15:09.610 --> 01:15:11.690
<v Speaker 3>So it's like the de facto standard to

01:15:11.690 --> 01:15:14.570
<v Speaker 3>test block devices, file systems,

01:15:15.210 --> 01:15:15.850
<v Speaker 3>whatever.

01:15:16.170 --> 01:15:18.330
<v Speaker 3>It has a lot of options.

01:15:19.370 --> 01:15:21.290
<v Speaker 3>And so

01:15:21.235 --> 01:15:23.395
<v Speaker 2>You can basically simulate any kind of workload

01:15:23.395 --> 01:15:25.635
<v Speaker 2>with this sequential random,

01:15:25.875 --> 01:15:27.635
<v Speaker 2>small size, big size,

01:15:28.755 --> 01:15:29.315
<v Speaker 2>override.

01:15:31.395 --> 01:15:33.960
<v Speaker 2>That's a cool part of it. So for

01:15:33.960 --> 01:15:35.480
<v Speaker 2>example, like, one of the things that we

01:15:35.480 --> 01:15:37.160
<v Speaker 2>did is postgress.

01:15:37.160 --> 01:15:39.160
<v Speaker 2>You kind of can replay that and then

01:15:39.160 --> 01:15:41.080
<v Speaker 2>convert into a file or test file and

01:15:41.080 --> 01:15:42.199
<v Speaker 2>then replay that.

01:15:44.040 --> 01:15:46.440
<v Speaker 2>Very flexible too. Flexible is also on the

01:15:46.440 --> 01:15:46.840
<v Speaker 2>other. Right?

01:15:50.224 --> 01:15:52.144
<v Speaker 0>Alright. It's doing its thing.

01:15:55.025 --> 01:15:57.184
<v Speaker 3>Yeah. It's only about one minute?

01:15:57.744 --> 01:15:58.784
<v Speaker 3>Yeah.

01:15:58.784 --> 01:16:00.385
<v Speaker 3>I think the run time is set to

01:16:00.385 --> 01:16:01.584
<v Speaker 3>one minute. Yeah.

01:16:02.625 --> 01:16:03.744
<v Speaker 3>But the

01:16:04.699 --> 01:16:06.060
<v Speaker 3>what is the one that say? Yeah. It

01:16:06.060 --> 01:16:09.179
<v Speaker 3>only creates a small file, obviously. So an

01:16:09.179 --> 01:16:12.540
<v Speaker 3>interesting thing to know is, SSDs have a

01:16:12.540 --> 01:16:14.780
<v Speaker 3>certain span. I'm not or at least I'm

01:16:14.780 --> 01:16:17.020
<v Speaker 3>not sure what the nomenclature is, but

01:16:18.385 --> 01:16:20.865
<v Speaker 3>a big CPU vendor calls it spans. Let's

01:16:20.865 --> 01:16:22.945
<v Speaker 3>call it that. And if you look at

01:16:22.945 --> 01:16:25.745
<v Speaker 3>an NVMe SSD, it has several chips. Right?

01:16:25.745 --> 01:16:27.265
<v Speaker 3>And what you wanna do is when you

01:16:27.265 --> 01:16:28.945
<v Speaker 3>run a workload, you wanna touch all the

01:16:28.945 --> 01:16:30.865
<v Speaker 3>chips because that's how you get the concurrency.

01:16:30.865 --> 01:16:32.785
<v Speaker 3>Right? If you write to all chips at

01:16:32.785 --> 01:16:33.265
<v Speaker 3>the same time.

01:16:34.710 --> 01:16:35.269
<v Speaker 3>And

01:16:36.150 --> 01:16:38.070
<v Speaker 3>one issue with SSDs is like so if

01:16:38.070 --> 01:16:40.389
<v Speaker 3>you have a small dataset, you're only retouching

01:16:40.389 --> 01:16:42.070
<v Speaker 3>a subset of the chips and therefore you

01:16:42.070 --> 01:16:43.669
<v Speaker 3>don't have optimal performance.

01:16:44.070 --> 01:16:44.629
<v Speaker 3>Right?

01:16:45.110 --> 01:16:46.804
<v Speaker 3>If that makes sense. So you're you're not

01:16:46.804 --> 01:16:48.644
<v Speaker 3>touching all the chips at the same time.

01:16:48.725 --> 01:16:50.164
<v Speaker 3>So there's some of that,

01:16:51.205 --> 01:16:53.125
<v Speaker 3>thing to consider when when running,

01:16:53.445 --> 01:16:54.324
<v Speaker 3>with,

01:16:54.565 --> 01:16:55.525
<v Speaker 3>these things.

01:16:55.844 --> 01:16:57.764
<v Speaker 3>But long story short,

01:17:00.005 --> 01:17:00.565
<v Speaker 3>that's it.

01:17:03.390 --> 01:17:04.030
<v Speaker 0>Excellent.

01:17:05.790 --> 01:17:06.590
<v Speaker 3>So

01:17:07.790 --> 01:17:09.230
<v Speaker 3>At a scale of one to 10, how

01:17:09.230 --> 01:17:10.829
<v Speaker 3>difficult do you think this was

01:17:11.070 --> 01:17:13.150
<v Speaker 3>apart from dealing with me, obviously?

01:17:15.070 --> 01:17:16.750
<v Speaker 0>This

01:17:16.395 --> 01:17:17.514
<v Speaker 0>was painless.

01:17:17.514 --> 01:17:17.994
<v Speaker 0>I

01:17:18.474 --> 01:17:20.554
<v Speaker 0>mean, I'm pleasantly surprised. I always just think

01:17:20.554 --> 01:17:21.835
<v Speaker 0>story is just gonna be one of those

01:17:21.835 --> 01:17:23.514
<v Speaker 0>things that you just bang your head off

01:17:23.514 --> 01:17:25.275
<v Speaker 0>of it. But I mean even, I know

01:17:25.275 --> 01:17:27.114
<v Speaker 0>you said earlier that this is a very

01:17:27.114 --> 01:17:30.130
<v Speaker 0>much in development, maybe not quite production yet,

01:17:30.130 --> 01:17:31.490
<v Speaker 0>but, know, people can start to use it.

01:17:31.490 --> 01:17:32.690
<v Speaker 0>I didn't expect us to be able to

01:17:32.690 --> 01:17:34.370
<v Speaker 0>run through the documentation and just get it

01:17:34.370 --> 01:17:36.370
<v Speaker 0>to work. Again, the only mistakes or problems

01:17:36.370 --> 01:17:38.369
<v Speaker 0>we had were were me. So

01:17:39.730 --> 01:17:41.250
<v Speaker 0>yeah. It it yeah. It's it's it's, you

01:17:41.250 --> 01:17:43.535
<v Speaker 3>know, it's it's not trivial for sure. And

01:17:43.535 --> 01:17:45.135
<v Speaker 3>and and and Kubernetes

01:17:45.135 --> 01:17:47.695
<v Speaker 3>by itself is also something that, you know,

01:17:47.695 --> 01:17:49.695
<v Speaker 3>is is is not trivial even though it

01:17:49.695 --> 01:17:51.615
<v Speaker 3>makes things easier to deploy once you get

01:17:51.615 --> 01:17:53.295
<v Speaker 3>a hang of it. It's not trivial. Right?

01:17:53.295 --> 01:17:53.855
<v Speaker 3>So

01:17:54.815 --> 01:17:56.094
<v Speaker 3>yeah. And

01:17:57.690 --> 01:17:59.610
<v Speaker 3>yeah. So, yeah, you can run some stuff

01:17:59.610 --> 01:18:01.210
<v Speaker 3>on it and and play with it and

01:18:01.210 --> 01:18:02.650
<v Speaker 3>and whatnot. And and

01:18:04.410 --> 01:18:04.650
<v Speaker 3>the

01:18:05.850 --> 01:18:08.570
<v Speaker 3>we haven't touched upon several other things. Like,

01:18:08.570 --> 01:18:09.290
<v Speaker 3>for example,

01:18:10.010 --> 01:18:10.490
<v Speaker 3>it's like,

01:18:11.065 --> 01:18:13.065
<v Speaker 3>I've actually have a I still need to

01:18:13.065 --> 01:18:14.985
<v Speaker 3>blog about it, but we've done some benchmarks

01:18:14.985 --> 01:18:17.704
<v Speaker 3>where we where we pushed well over close

01:18:17.704 --> 01:18:19.224
<v Speaker 3>to a million IOPS,

01:18:19.704 --> 01:18:22.344
<v Speaker 3>on on, NVMe devices. And

01:18:23.110 --> 01:18:24.710
<v Speaker 3>for example, it's like how do you define

01:18:24.710 --> 01:18:26.870
<v Speaker 3>how many cores you wanna use?

01:18:27.430 --> 01:18:29.670
<v Speaker 3>And how do I tell the operating system

01:18:29.670 --> 01:18:31.990
<v Speaker 3>to not schedule any workloads on the cores

01:18:31.990 --> 01:18:33.990
<v Speaker 3>that I run Maya store on? Because, for

01:18:33.990 --> 01:18:36.575
<v Speaker 3>example, if you type l s, you don't

01:18:36.575 --> 01:18:38.895
<v Speaker 3>want the kernel to interrupt the Maya store

01:18:38.895 --> 01:18:41.055
<v Speaker 3>process. Hey. Where the kernel said, hey, Maya

01:18:41.055 --> 01:18:43.455
<v Speaker 3>store stopped. LS gets the run and then

01:18:43.535 --> 01:18:45.935
<v Speaker 3>right. So you wanna have these context switches.

01:18:46.175 --> 01:18:47.215
<v Speaker 3>You want to

01:18:48.415 --> 01:18:50.095
<v Speaker 3>avoid that from happening. And

01:18:50.800 --> 01:18:52.560
<v Speaker 3>there are various ways to do that, but

01:18:52.560 --> 01:18:54.560
<v Speaker 3>the canonical way is to boot the system

01:18:54.560 --> 01:18:57.520
<v Speaker 3>with certain arguments that isolate CPUs and all

01:18:57.520 --> 01:19:00.239
<v Speaker 3>stuff like that. So if you really wanna

01:19:00.240 --> 01:19:02.400
<v Speaker 3>wanna push the system, there is there is

01:19:02.400 --> 01:19:04.640
<v Speaker 3>more work to do, to be fair. So

01:19:04.640 --> 01:19:06.645
<v Speaker 3>this is this is like the happy path.

01:19:06.645 --> 01:19:08.084
<v Speaker 3>Everything's hunky dory.

01:19:08.804 --> 01:19:09.364
<v Speaker 3>But,

01:19:10.005 --> 01:19:11.925
<v Speaker 3>you know, if you wanna get to the

01:19:11.925 --> 01:19:14.644
<v Speaker 3>optimal performance, there's a little bit more work.

01:19:15.605 --> 01:19:17.764
<v Speaker 1>Can you can squeeze the Juicero packet with

01:19:17.764 --> 01:19:19.205
<v Speaker 1>your hand and get some of the juice

01:19:19.205 --> 01:19:21.820
<v Speaker 1>out, but there's a special machine you can

01:19:21.820 --> 01:19:23.820
<v Speaker 1>put the packet in and really get all

01:19:23.820 --> 01:19:25.580
<v Speaker 1>the juice out if you want. Yeah. Sounds

01:19:25.580 --> 01:19:27.500
<v Speaker 1>like there's a there's a lot of tweaks

01:19:27.500 --> 01:19:29.180
<v Speaker 1>and things you can do to get even

01:19:29.180 --> 01:19:31.420
<v Speaker 1>more. So excited about it because, you know,

01:19:31.420 --> 01:19:33.100
<v Speaker 0>I I work for Equinix Metal. I have

01:19:33.100 --> 01:19:35.255
<v Speaker 0>all the bare metal compute that I need

01:19:35.255 --> 01:19:36.935
<v Speaker 0>access to ever in the world. And now

01:19:36.935 --> 01:19:39.014
<v Speaker 0>I get Don't don't don't make me jealous.

01:19:39.014 --> 01:19:40.374
<v Speaker 3>I don't think that's appropriate.

01:19:43.175 --> 01:19:45.494
<v Speaker 0>And now I have a storage layer that

01:19:45.494 --> 01:19:47.815
<v Speaker 0>is a built with really cool technology like

01:19:47.815 --> 01:19:50.000
<v Speaker 0>Rust and doing really cool things. And I

01:19:50.000 --> 01:19:51.440
<v Speaker 0>can squeeze the performance out of it to

01:19:51.440 --> 01:19:53.760
<v Speaker 0>millions a million IOPS, you know. I mean,

01:19:53.760 --> 01:19:55.920
<v Speaker 0>I think that's just terribly exciting and, you

01:19:55.920 --> 01:19:57.120
<v Speaker 0>know, that's Yeah.

01:19:58.320 --> 01:20:00.240
<v Speaker 1>To tie this back to kind of the

01:20:00.345 --> 01:20:03.305
<v Speaker 1>sorry to interject the original presentation that Kieran

01:20:03.305 --> 01:20:04.745
<v Speaker 1>introduced with.

01:20:05.545 --> 01:20:07.545
<v Speaker 1>To get started, the most important thing is

01:20:07.545 --> 01:20:09.065
<v Speaker 1>to have it just work, to have it

01:20:09.065 --> 01:20:10.745
<v Speaker 1>install and just

01:20:11.305 --> 01:20:13.945
<v Speaker 1>be there and up and running. And over

01:20:13.945 --> 01:20:14.185
<v Speaker 1>time,

01:20:15.060 --> 01:20:17.700
<v Speaker 1>as applications grow, as your your business or

01:20:17.700 --> 01:20:20.500
<v Speaker 1>your project grows, that scale tends to favor

01:20:20.500 --> 01:20:21.540
<v Speaker 1>customization,

01:20:21.620 --> 01:20:22.980
<v Speaker 1>I I like to say. So there's a

01:20:22.980 --> 01:20:24.340
<v Speaker 1>lot of more knobs and a lot more

01:20:24.340 --> 01:20:26.020
<v Speaker 1>buttons you wanna turn and press.

01:20:26.900 --> 01:20:27.380
<v Speaker 1>And

01:20:28.045 --> 01:20:29.805
<v Speaker 1>our solutions, OpenEBS

01:20:29.805 --> 01:20:31.805
<v Speaker 1>and Myasore, are kind of built with that

01:20:31.805 --> 01:20:32.685
<v Speaker 1>in mind.

01:20:33.085 --> 01:20:34.445
<v Speaker 1>We want it to be easy to set

01:20:34.445 --> 01:20:36.045
<v Speaker 1>up and get going, but we also wanna

01:20:36.045 --> 01:20:38.525
<v Speaker 1>give you those knobs and buttons for when

01:20:38.525 --> 01:20:40.845
<v Speaker 1>you're ready to scale and do that extra

01:20:40.845 --> 01:20:43.520
<v Speaker 1>stuff to really get going. Well, is there

01:20:43.680 --> 01:20:45.440
<v Speaker 0>okay. So before we we wrap this up,

01:20:45.440 --> 01:20:47.920
<v Speaker 0>is there anything anyone here wants to show

01:20:47.920 --> 01:20:48.800
<v Speaker 0>before

01:20:48.880 --> 01:20:51.520
<v Speaker 0>we conclude today's session? Is there anything that

01:20:51.520 --> 01:20:53.280
<v Speaker 0>we haven't covered that we think is important

01:20:53.280 --> 01:20:53.600
<v Speaker 0>to

01:20:56.435 --> 01:20:58.355
<v Speaker 3>I'm thinking. Well, I

01:20:58.675 --> 01:21:00.115
<v Speaker 3>mean, yeah, I would I mean, we could

01:21:00.115 --> 01:21:01.955
<v Speaker 3>go through some some logs and and see

01:21:01.955 --> 01:21:04.435
<v Speaker 3>some stuff on how it you know?

01:21:05.555 --> 01:21:07.715
<v Speaker 3>But I think this is pretty much it.

01:21:07.715 --> 01:21:10.275
<v Speaker 3>We try to keep it very, very simple

01:21:11.179 --> 01:21:12.780
<v Speaker 3>at the beginning and then

01:21:13.420 --> 01:21:15.900
<v Speaker 3>get the foundation right and then start to

01:21:15.900 --> 01:21:18.300
<v Speaker 3>come up with some more sophisticated

01:21:19.260 --> 01:21:19.820
<v Speaker 3>stuff.

01:21:20.540 --> 01:21:21.659
<v Speaker 0>Yeah. Awesome.

01:21:22.300 --> 01:21:22.780
<v Speaker 0>I think

01:21:23.355 --> 01:21:25.595
<v Speaker 0>this was like a great introduction and we

01:21:25.595 --> 01:21:26.875
<v Speaker 0>go hands on and we and we showed

01:21:26.875 --> 01:21:29.195
<v Speaker 0>how it works. I mean, I'm definitely gonna

01:21:29.195 --> 01:21:30.635
<v Speaker 0>speak to you all afterwards and see if

01:21:30.635 --> 01:21:31.915
<v Speaker 0>we can line up another session where we

01:21:31.915 --> 01:21:34.075
<v Speaker 0>we dive into all those other concerns OpenEBS

01:21:34.075 --> 01:21:36.235
<v Speaker 0>tries to bring, snapshots and backups and really

01:21:36.235 --> 01:21:38.610
<v Speaker 0>try and you know understand the full landscape

01:21:38.610 --> 01:21:40.449
<v Speaker 0>of storage on Kubernetes. But I think for

01:21:40.449 --> 01:21:42.290
<v Speaker 0>today, this was fantastic. I just wanna say

01:21:42.290 --> 01:21:43.570
<v Speaker 0>thank you to all of you for joining

01:21:43.570 --> 01:21:44.050
<v Speaker 0>me.

01:21:44.930 --> 01:21:46.290
<v Speaker 0>Like I said, that's the first time I've

01:21:46.290 --> 01:21:47.330
<v Speaker 0>had this many people on this stream and

01:21:47.330 --> 01:21:49.329
<v Speaker 0>it was an absolute pleasure. Thank you.

01:21:49.810 --> 01:21:53.295
<v Speaker 3>Well, thank you. For having us. Thanks. Alright.

01:21:53.295 --> 01:21:54.415
<v Speaker 0>Well, you all Yeah.

01:21:54.975 --> 01:21:57.375
<v Speaker 0>You all have a great day, and I

01:21:57.375 --> 01:22:00.015
<v Speaker 0>will speak to you all soon. Thank you.

01:22:01.375 --> 01:22:02.415
<v Speaker 3>Bye bye. Thank you.
