WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 22eaaa5d-7762-4113-8809-0dd2a52eb904
Created: 2025-04-29T20:26:11.091Z
Duration: 5940.0425
Channels: 1

00:00:53.780 --> 00:00:56.579
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:00:56.579 --> 00:00:58.579
<v Speaker 0>live. I am your host Rawkode.

00:00:58.660 --> 00:01:00.180
<v Speaker 0>Today we are gonna be taking a look

00:01:00.180 --> 00:01:03.780
<v Speaker 0>at Fluentd and Fluent Bit logging systems for

00:01:03.780 --> 00:01:05.300
<v Speaker 0>Kubernetes and other platforms.

00:01:05.715 --> 00:01:07.155
<v Speaker 0>And today, I am lucky enough to be

00:01:07.155 --> 00:01:08.994
<v Speaker 0>joined by two members of the Fluent team,

00:01:08.994 --> 00:01:12.034
<v Speaker 0>Anurag and Eduardo. Hello. How are you both?

00:01:13.475 --> 00:01:15.715
<v Speaker 1>Doing well. Doing well. Glad to be here.

00:01:16.835 --> 00:01:18.915
<v Speaker 2>And, David, thanks for the invitation. Happy to

00:01:18.915 --> 00:01:19.235
<v Speaker 2>be here.

00:01:19.980 --> 00:01:21.500
<v Speaker 0>Awesome. I'm excited.

00:01:21.740 --> 00:01:23.100
<v Speaker 0>Why don't we start?

00:01:23.340 --> 00:01:24.700
<v Speaker 0>Just take a little bit of a moment.

00:01:24.700 --> 00:01:26.300
<v Speaker 0>You can both introduce yourself,

00:01:26.460 --> 00:01:27.740
<v Speaker 0>and then we'll talk a little bit about

00:01:27.740 --> 00:01:28.540
<v Speaker 0>the projects.

00:01:31.020 --> 00:01:31.900
<v Speaker 2>Sure. I can start. So,

00:01:33.975 --> 00:01:34.775
<v Speaker 1>yeah, Anurag

00:01:35.255 --> 00:01:35.975
<v Speaker 1>Gupta,

00:01:36.215 --> 00:01:38.855
<v Speaker 1>used to be a product manager in Azure

00:01:38.855 --> 00:01:41.095
<v Speaker 1>where I got exposed to a bunch of

00:01:41.095 --> 00:01:43.255
<v Speaker 1>open source and and worked on open source

00:01:43.255 --> 00:01:46.135
<v Speaker 1>team there, including the project Fluentd,

00:01:46.135 --> 00:01:49.150
<v Speaker 1>which we ended up using for our Azure

00:01:49.150 --> 00:01:50.270
<v Speaker 1>log analytics

00:01:50.350 --> 00:01:52.190
<v Speaker 1>service that we ran in Azure.

00:01:52.430 --> 00:01:54.510
<v Speaker 1>It was awesome, and then got invited by

00:01:54.510 --> 00:01:56.190
<v Speaker 1>treasury data to come and

00:01:56.590 --> 00:01:59.710
<v Speaker 1>actually help help help out with Fluentd. So

00:01:59.710 --> 00:02:01.150
<v Speaker 1>I left that in 2017,

00:02:01.875 --> 00:02:03.475
<v Speaker 1>And then did a brief stint at Elastic

00:02:03.475 --> 00:02:05.155
<v Speaker 1>as well, so I was a product manager

00:02:05.155 --> 00:02:07.715
<v Speaker 1>at Elastic. So logging has been

00:02:08.835 --> 00:02:10.514
<v Speaker 1>part of part of the journey for for

00:02:10.514 --> 00:02:12.915
<v Speaker 1>the past seven years, and really excited just

00:02:12.915 --> 00:02:15.680
<v Speaker 1>to come back to Fluentd, Fluent Bit, cloud

00:02:15.680 --> 00:02:18.320
<v Speaker 1>native space, and see see how they evolve

00:02:18.320 --> 00:02:18.880
<v Speaker 1>it.

00:02:22.080 --> 00:02:24.480
<v Speaker 2>Great. My name is Eduardo Silva,

00:02:24.480 --> 00:02:26.720
<v Speaker 2>and I have been involved with the Fluentd

00:02:26.720 --> 00:02:28.080
<v Speaker 2>team for about

00:02:28.805 --> 00:02:30.965
<v Speaker 2>seven years, I think, as of now.

00:02:31.605 --> 00:02:32.405
<v Speaker 2>And

00:02:32.565 --> 00:02:35.205
<v Speaker 2>one I I started working for Trisha Data

00:02:35.205 --> 00:02:37.365
<v Speaker 2>at that point to to help with the

00:02:37.365 --> 00:02:38.565
<v Speaker 2>Fluentd project

00:02:38.645 --> 00:02:41.365
<v Speaker 2>together as a team. We started Fluent Bit.

00:02:42.350 --> 00:02:44.190
<v Speaker 2>With the time we met Anurag.

00:02:44.190 --> 00:02:46.510
<v Speaker 2>Right? And have have been involved with the

00:02:46.510 --> 00:02:48.750
<v Speaker 2>crisis then. We have been working

00:02:48.910 --> 00:02:50.990
<v Speaker 2>very heavily with the CNCF,

00:02:51.230 --> 00:02:53.390
<v Speaker 2>with the other projects, and with the whole

00:02:53.390 --> 00:02:54.190
<v Speaker 2>ecosystem.

00:02:56.355 --> 00:02:57.475
<v Speaker 0>Nice. Excellent.

00:02:57.635 --> 00:03:00.275
<v Speaker 0>So I believe we have a couple of

00:03:00.515 --> 00:03:02.915
<v Speaker 0>slides and some some materials we're gonna go

00:03:02.915 --> 00:03:04.115
<v Speaker 0>through to tell us a little bit about

00:03:04.115 --> 00:03:05.395
<v Speaker 0>what the projects are.

00:03:06.435 --> 00:03:07.155
<v Speaker 1>Yeah. Definitely.

00:03:08.320 --> 00:03:10.480
<v Speaker 1>Awesome. So, yes, I thought it'd be good

00:03:10.480 --> 00:03:12.320
<v Speaker 1>just to give a little bit of an

00:03:12.320 --> 00:03:12.960
<v Speaker 1>intro

00:03:13.200 --> 00:03:15.280
<v Speaker 1>for those who who aren't aware what Fluentd

00:03:15.280 --> 00:03:16.480
<v Speaker 1>and Fluent Bit are

00:03:16.960 --> 00:03:19.520
<v Speaker 1>and just kinda, know, give you a bit

00:03:19.520 --> 00:03:21.680
<v Speaker 1>of an overview, what the use cases are,

00:03:21.680 --> 00:03:23.600
<v Speaker 1>how you can leverage it kinda within your

00:03:23.845 --> 00:03:25.364
<v Speaker 1>your enterprise,

00:03:25.364 --> 00:03:27.364
<v Speaker 1>your data center, within, you know, your your

00:03:27.364 --> 00:03:28.165
<v Speaker 1>environment.

00:03:29.364 --> 00:03:32.325
<v Speaker 1>So let's first start and zoom out with

00:03:32.325 --> 00:03:33.925
<v Speaker 1>some of the challenges that we have with

00:03:33.925 --> 00:03:36.084
<v Speaker 1>data, and I think this is probably something

00:03:36.084 --> 00:03:37.605
<v Speaker 1>a lot of us can relate with is

00:03:37.605 --> 00:03:40.400
<v Speaker 1>you just have this ever expanding expanding

00:03:41.280 --> 00:03:44.240
<v Speaker 1>amount of data sources. Right? You have Kubernetes.

00:03:44.640 --> 00:03:45.600
<v Speaker 1>All of a sudden,

00:03:46.000 --> 00:03:48.560
<v Speaker 1>developers are being asked to start doing security.

00:03:48.960 --> 00:03:51.600
<v Speaker 1>You have system logs. You have networks that

00:03:51.600 --> 00:03:52.560
<v Speaker 1>that can be

00:03:53.835 --> 00:03:56.395
<v Speaker 1>short lived. You have application logs.

00:03:57.035 --> 00:03:58.475
<v Speaker 1>Each of these need to be routed to

00:03:58.475 --> 00:04:00.795
<v Speaker 1>different outputs, so you might have security folks

00:04:00.795 --> 00:04:01.835
<v Speaker 1>that care about

00:04:02.235 --> 00:04:04.315
<v Speaker 1>having all of this in Splunk. You might

00:04:04.315 --> 00:04:05.915
<v Speaker 1>have folks that care about all of this

00:04:05.915 --> 00:04:07.115
<v Speaker 1>in Elasticsearch.

00:04:07.115 --> 00:04:09.880
<v Speaker 1>You have new outputs like Grafana's low key

00:04:09.880 --> 00:04:11.880
<v Speaker 1>coming out on the scene. You have s

00:04:11.880 --> 00:04:13.320
<v Speaker 1>three, MongoDB,

00:04:13.640 --> 00:04:15.560
<v Speaker 1>all sorts of these different outputs. You have

00:04:15.560 --> 00:04:17.160
<v Speaker 1>all sorts of formats.

00:04:17.480 --> 00:04:20.120
<v Speaker 1>So every log that you're writing has, you

00:04:20.120 --> 00:04:22.520
<v Speaker 1>know, potentially a different format, whether it's JSON,

00:04:23.195 --> 00:04:25.115
<v Speaker 1>whether it's application specific.

00:04:25.515 --> 00:04:27.195
<v Speaker 1>And then on top of kind of all

00:04:27.195 --> 00:04:29.675
<v Speaker 1>these challenges where you have, you know, f

00:04:29.675 --> 00:04:32.235
<v Speaker 1>number of sources and n number of outputs,

00:04:32.555 --> 00:04:34.635
<v Speaker 1>you need to make sure that all of

00:04:34.635 --> 00:04:36.795
<v Speaker 1>the data that you're trying to ship from

00:04:36.795 --> 00:04:38.235
<v Speaker 1>point a to point b

00:04:38.560 --> 00:04:40.000
<v Speaker 1>can handle failures,

00:04:40.000 --> 00:04:42.720
<v Speaker 1>can handle network outages, you know, potentially going

00:04:42.720 --> 00:04:44.720
<v Speaker 1>to the cloud so it can go through

00:04:44.720 --> 00:04:47.120
<v Speaker 1>a load balancer. It can buffer that data

00:04:47.120 --> 00:04:48.400
<v Speaker 1>so in case something

00:04:48.639 --> 00:04:49.680
<v Speaker 1>automatically

00:04:49.840 --> 00:04:51.840
<v Speaker 1>shuts off, you don't lose all that data.

00:04:52.425 --> 00:04:54.585
<v Speaker 1>So you need a lot of resilience now

00:04:54.585 --> 00:04:56.345
<v Speaker 1>with with all of these things.

00:04:56.905 --> 00:04:58.105
<v Speaker 1>And just to kind of

00:04:58.425 --> 00:05:01.385
<v Speaker 1>showcase two of these challenges, one around the

00:05:01.385 --> 00:05:02.185
<v Speaker 1>sources.

00:05:02.425 --> 00:05:05.385
<v Speaker 1>The the the aren't just files.

00:05:05.940 --> 00:05:09.060
<v Speaker 1>You also have places like Kubernetes

00:05:09.060 --> 00:05:12.260
<v Speaker 1>where you have tons and tons of applications

00:05:12.260 --> 00:05:14.020
<v Speaker 1>that might be running in it. It might

00:05:14.020 --> 00:05:17.140
<v Speaker 1>have short lived app short lived pods.

00:05:17.380 --> 00:05:19.220
<v Speaker 1>And and so you basically have to capture

00:05:19.220 --> 00:05:21.865
<v Speaker 1>all this data, give context to it, ship

00:05:21.865 --> 00:05:24.105
<v Speaker 1>it with resilience to an output of your

00:05:24.105 --> 00:05:24.665
<v Speaker 1>choice.

00:05:25.544 --> 00:05:28.425
<v Speaker 1>And another challenge here is the formatting. So

00:05:28.425 --> 00:05:31.625
<v Speaker 1>another example here, you know, Apache logs, MySQL,

00:05:31.625 --> 00:05:32.265
<v Speaker 1>JSON.

00:05:32.665 --> 00:05:34.905
<v Speaker 1>Everyone has their own format. These things just

00:05:34.905 --> 00:05:35.785
<v Speaker 1>keep on evolving.

00:05:36.419 --> 00:05:38.580
<v Speaker 1>It's not never getting any easier.

00:05:40.180 --> 00:05:42.340
<v Speaker 1>And so what what the team at at

00:05:42.340 --> 00:05:44.820
<v Speaker 1>Treasure Data did was when they were building

00:05:44.820 --> 00:05:47.460
<v Speaker 1>their analytics service, they said, hey. We need

00:05:47.460 --> 00:05:49.139
<v Speaker 1>some way to make sure folks can get

00:05:49.139 --> 00:05:50.660
<v Speaker 1>their data into our platform.

00:05:51.544 --> 00:05:54.505
<v Speaker 1>And so they actually built a a Fluentd.

00:05:54.664 --> 00:05:56.425
<v Speaker 1>And so Fluentd takes

00:05:56.504 --> 00:05:57.625
<v Speaker 1>many sources,

00:05:57.865 --> 00:05:59.785
<v Speaker 1>whatever those data sources are,

00:06:00.185 --> 00:06:02.104
<v Speaker 1>and then is able to route them to

00:06:02.104 --> 00:06:03.305
<v Speaker 1>many end destinations.

00:06:04.300 --> 00:06:06.620
<v Speaker 1>And so the project actually got started

00:06:07.100 --> 00:06:10.460
<v Speaker 1>June 2011. So this year, Fluentd actually turns

00:06:10.460 --> 00:06:11.180
<v Speaker 1>10.

00:06:11.500 --> 00:06:13.420
<v Speaker 1>So you can even see that these projects

00:06:13.420 --> 00:06:15.340
<v Speaker 1>are are, you know, predating

00:06:15.420 --> 00:06:18.074
<v Speaker 1>kind of the container era or even, you

00:06:18.074 --> 00:06:21.115
<v Speaker 1>know, Kubernetes being open sourced in 2035.

00:06:21.435 --> 00:06:23.755
<v Speaker 1>So they were built to solve big data

00:06:23.755 --> 00:06:24.955
<v Speaker 1>problems initially,

00:06:25.435 --> 00:06:27.914
<v Speaker 1>and, you know, the natural evolution started moving

00:06:27.914 --> 00:06:30.794
<v Speaker 1>them towards, hey. Solving cloud native problems where

00:06:30.794 --> 00:06:32.235
<v Speaker 1>you're sending data to

00:06:32.910 --> 00:06:35.550
<v Speaker 1>highly available cloud environments. You're sending data from

00:06:35.550 --> 00:06:36.910
<v Speaker 1>bare metal to

00:06:37.310 --> 00:06:38.510
<v Speaker 1>highly available

00:06:39.229 --> 00:06:40.830
<v Speaker 1>private cloud environments.

00:06:41.630 --> 00:06:44.190
<v Speaker 1>We've, you know, been part of the CNCF

00:06:44.190 --> 00:06:46.535
<v Speaker 1>as a project since 2016.

00:06:46.535 --> 00:06:48.535
<v Speaker 1>We graduated in 2019.

00:06:48.855 --> 00:06:51.015
<v Speaker 1>So graduation is just a a bit of

00:06:51.015 --> 00:06:53.415
<v Speaker 1>a status that's given to projects that have

00:06:53.415 --> 00:06:56.375
<v Speaker 1>very broad adoption, lots of users, lots of

00:06:56.375 --> 00:06:57.575
<v Speaker 1>committers, maintainers,

00:06:58.330 --> 00:07:00.090
<v Speaker 1>and, you know, you can see here that

00:07:00.090 --> 00:07:03.210
<v Speaker 1>the the adoption's been pretty awesome. You have

00:07:03.210 --> 00:07:05.850
<v Speaker 1>folks at Azure, Google Stackdriver, which I believe

00:07:05.850 --> 00:07:07.850
<v Speaker 1>now is Google Cloud operations,

00:07:08.570 --> 00:07:10.729
<v Speaker 1>Pivotal, Red Hat OpenShift, and these are just

00:07:10.729 --> 00:07:11.610
<v Speaker 1>just a few of them.

00:07:12.794 --> 00:07:14.875
<v Speaker 1>Eduardo was talking a little bit about Fluentd,

00:07:14.875 --> 00:07:17.914
<v Speaker 1>and and what we saw trending with Fluentd

00:07:17.914 --> 00:07:18.955
<v Speaker 1>was

00:07:18.955 --> 00:07:22.155
<v Speaker 1>that it was written in in Ruby, and,

00:07:22.315 --> 00:07:25.140
<v Speaker 1>you know, it it didn't have as heavy

00:07:25.140 --> 00:07:27.540
<v Speaker 1>performance as we wanted, and we saw a

00:07:27.540 --> 00:07:29.940
<v Speaker 1>growth in IoT type use cases.

00:07:30.260 --> 00:07:32.180
<v Speaker 1>So embedded environments

00:07:32.180 --> 00:07:33.940
<v Speaker 1>or container environments,

00:07:33.940 --> 00:07:35.540
<v Speaker 1>you have super lightweight,

00:07:35.700 --> 00:07:36.420
<v Speaker 1>very

00:07:36.660 --> 00:07:37.780
<v Speaker 1>constrained resources.

00:07:38.324 --> 00:07:41.604
<v Speaker 1>How do you do the same level of

00:07:41.604 --> 00:07:42.725
<v Speaker 1>data collection

00:07:42.725 --> 00:07:43.764
<v Speaker 1>resiliency

00:07:43.925 --> 00:07:45.764
<v Speaker 1>on those environments? And so we actually built

00:07:45.764 --> 00:07:47.285
<v Speaker 1>this Fluent Bit project.

00:07:47.525 --> 00:07:49.205
<v Speaker 1>It's completely written in c.

00:07:49.604 --> 00:07:52.085
<v Speaker 1>It's now one of the preferred solutions for

00:07:52.085 --> 00:07:54.850
<v Speaker 1>cloud environments because, I think, similar to an

00:07:54.850 --> 00:07:56.050
<v Speaker 1>embedded environment,

00:07:56.130 --> 00:07:59.090
<v Speaker 1>while something lightweight, something already packaged, has all

00:07:59.090 --> 00:08:01.250
<v Speaker 1>the plug ins ready to go, has all

00:08:01.250 --> 00:08:02.210
<v Speaker 1>the resilience.

00:08:02.610 --> 00:08:05.170
<v Speaker 1>And, of course, both of these projects are,

00:08:05.170 --> 00:08:07.650
<v Speaker 1>you know, Apache license v two. They're all

00:08:07.650 --> 00:08:08.530
<v Speaker 1>part of the CNCF.

00:08:09.194 --> 00:08:10.794
<v Speaker 1>So they're, you know, free to download, free

00:08:10.794 --> 00:08:11.514
<v Speaker 1>to use,

00:08:12.555 --> 00:08:14.634
<v Speaker 1>and and you're something you can get started

00:08:14.634 --> 00:08:15.915
<v Speaker 1>with immediately.

00:08:17.034 --> 00:08:19.115
<v Speaker 1>Now just to kinda give some use cases,

00:08:19.115 --> 00:08:21.354
<v Speaker 1>like, what am I gonna actually use Fluentd

00:08:21.354 --> 00:08:22.395
<v Speaker 1>and Fluent Bit for?

00:08:23.160 --> 00:08:25.320
<v Speaker 1>Some of the really popular use cases,

00:08:25.560 --> 00:08:28.760
<v Speaker 1>of course, are centralizing your logs from Kubernetes.

00:08:29.400 --> 00:08:31.400
<v Speaker 1>But some of the more advanced use cases,

00:08:31.400 --> 00:08:32.600
<v Speaker 1>like reducing cost,

00:08:33.000 --> 00:08:34.600
<v Speaker 1>you know, some of the back ends that

00:08:34.600 --> 00:08:36.600
<v Speaker 1>you might be sending data to can be

00:08:37.105 --> 00:08:39.825
<v Speaker 1>pretty expensive. Right? They charge per gig, and

00:08:39.825 --> 00:08:42.385
<v Speaker 1>you you probably don't need to collect every

00:08:42.385 --> 00:08:44.385
<v Speaker 1>single log message, especially if it's like a

00:08:44.385 --> 00:08:46.865
<v Speaker 1>debug log. So you can filter that data

00:08:46.865 --> 00:08:47.425
<v Speaker 1>out.

00:08:48.065 --> 00:08:50.760
<v Speaker 1>You can enrich data. So we think about

00:08:50.760 --> 00:08:54.920
<v Speaker 1>reducing cost and and improving developer utilization,

00:08:55.240 --> 00:08:57.640
<v Speaker 1>not just by taking away data,

00:08:57.960 --> 00:09:00.040
<v Speaker 1>but you can actually enrich it. So that

00:09:00.040 --> 00:09:02.120
<v Speaker 1>way when you're doing a search, you have

00:09:02.120 --> 00:09:04.360
<v Speaker 1>the context or be there of, oh, hey.

00:09:04.360 --> 00:09:04.600
<v Speaker 1>This,

00:09:05.245 --> 00:09:06.845
<v Speaker 1>you know, trace and this metric and this

00:09:06.845 --> 00:09:08.845
<v Speaker 1>log are all related. You can enrich it

00:09:08.845 --> 00:09:11.884
<v Speaker 1>with, hey. These are the namespaces for Kubernetes.

00:09:11.884 --> 00:09:14.045
<v Speaker 1>This is potentially the server that I'm running

00:09:14.045 --> 00:09:15.884
<v Speaker 1>on in bare metal, which is in this

00:09:15.884 --> 00:09:17.324
<v Speaker 1>data center and this GeoIP.

00:09:18.400 --> 00:09:19.360
<v Speaker 1>Formatting,

00:09:19.360 --> 00:09:21.760
<v Speaker 1>so make making sure that you have the

00:09:21.760 --> 00:09:24.720
<v Speaker 1>ability to format any arbitrary log

00:09:25.040 --> 00:09:27.760
<v Speaker 1>so that way it's easier to be processed

00:09:27.760 --> 00:09:29.760
<v Speaker 1>and analyzed and visualized,

00:09:30.555 --> 00:09:31.355
<v Speaker 1>redacted,

00:09:31.355 --> 00:09:32.235
<v Speaker 1>anonymized.

00:09:32.395 --> 00:09:35.435
<v Speaker 1>This is another big use case where you're

00:09:35.435 --> 00:09:36.875
<v Speaker 1>collecting all this data.

00:09:37.195 --> 00:09:38.635
<v Speaker 1>And I think, you know, the past ten

00:09:38.635 --> 00:09:40.315
<v Speaker 1>years have been all about

00:09:40.635 --> 00:09:42.395
<v Speaker 1>big data, getting everything

00:09:42.635 --> 00:09:45.780
<v Speaker 1>into a single place. The next ten years

00:09:45.780 --> 00:09:47.700
<v Speaker 1>are really about, I have all this data

00:09:47.700 --> 00:09:48.500
<v Speaker 1>in a place,

00:09:48.740 --> 00:09:51.460
<v Speaker 1>but now we have things like privacy concerns.

00:09:51.460 --> 00:09:53.860
<v Speaker 1>We have aspects like, hey. What if someone

00:09:53.860 --> 00:09:55.780
<v Speaker 1>gets into my data? They can now access

00:09:55.780 --> 00:09:57.460
<v Speaker 1>all my records. So how do we help

00:09:57.460 --> 00:10:00.735
<v Speaker 1>remove sensitive data before it even hits the

00:10:00.735 --> 00:10:03.215
<v Speaker 1>analytics end? Do it all on prem. Do

00:10:03.215 --> 00:10:04.975
<v Speaker 1>it while you're collecting the data so no

00:10:04.975 --> 00:10:06.095
<v Speaker 1>one ever sees it.

00:10:06.655 --> 00:10:08.015
<v Speaker 1>And then neutrality.

00:10:08.015 --> 00:10:10.415
<v Speaker 1>So this is another a big use case

00:10:10.415 --> 00:10:12.495
<v Speaker 1>is you as a as a

00:10:13.090 --> 00:10:15.010
<v Speaker 1>user might be evolving. Right? You might be

00:10:15.010 --> 00:10:17.410
<v Speaker 1>using Elasticsearch one day. You wanna try low

00:10:17.410 --> 00:10:18.450
<v Speaker 1>key the other day,

00:10:18.850 --> 00:10:20.610
<v Speaker 1>then you wanna switch to a SaaS the

00:10:20.610 --> 00:10:21.250
<v Speaker 1>other day.

00:10:21.970 --> 00:10:23.970
<v Speaker 1>How do you make sure that you're not

00:10:24.210 --> 00:10:27.810
<v Speaker 1>dependent on a single vendor? You know, what

00:10:26.715 --> 00:10:29.675
<v Speaker 1>cloud native computing foundation allows us to do

00:10:29.995 --> 00:10:31.755
<v Speaker 1>is be very,

00:10:32.395 --> 00:10:34.795
<v Speaker 1>very vendor neutral and then have all these

00:10:34.795 --> 00:10:37.275
<v Speaker 1>outputs so you can quickly switch and say,

00:10:37.275 --> 00:10:39.195
<v Speaker 1>let me try sending my data to both

00:10:39.195 --> 00:10:42.235
<v Speaker 1>Splunk and Elastic. And, I can

00:10:43.000 --> 00:10:44.680
<v Speaker 1>compare those two with the same set of

00:10:44.680 --> 00:10:47.959
<v Speaker 1>data. How does it actually go and switch

00:10:47.959 --> 00:10:49.880
<v Speaker 1>if, you know, I I I so deem

00:10:49.880 --> 00:10:52.600
<v Speaker 1>it to be a better experience or whatnot?

00:10:52.920 --> 00:10:55.160
<v Speaker 1>So, yeah, that's some of the use cases,

00:10:55.160 --> 00:10:57.320
<v Speaker 1>and and I think it's worthwhile to just

00:10:57.320 --> 00:10:59.334
<v Speaker 1>walk through, like, how does it actually work.

00:10:59.495 --> 00:11:01.334
<v Speaker 1>So I'll pass it off to Eduardo to

00:11:01.334 --> 00:11:03.255
<v Speaker 1>talk a little bit about kinda logging in

00:11:03.255 --> 00:11:05.255
<v Speaker 1>in Kubernetes and that workflow there.

00:11:07.735 --> 00:11:09.975
<v Speaker 2>Yeah. The the logging in Kubernetes

00:11:09.975 --> 00:11:12.855
<v Speaker 2>is quite different from normal applications.

00:11:13.160 --> 00:11:15.640
<v Speaker 2>Right? In a normal application or

00:11:15.880 --> 00:11:17.320
<v Speaker 2>bare metal servers,

00:11:17.720 --> 00:11:19.560
<v Speaker 2>you just have your application

00:11:19.720 --> 00:11:22.040
<v Speaker 2>spawn in the logs through the file system

00:11:22.040 --> 00:11:24.600
<v Speaker 2>or nowadays through system systemd.

00:11:24.760 --> 00:11:27.400
<v Speaker 2>That anyways, both modes ended up in the

00:11:27.400 --> 00:11:28.280
<v Speaker 2>in the file system.

00:11:28.995 --> 00:11:31.395
<v Speaker 2>But in the container space,

00:11:32.355 --> 00:11:34.275
<v Speaker 2>they tried to come up with this new

00:11:34.275 --> 00:11:35.475
<v Speaker 2>approach where

00:11:35.795 --> 00:11:37.795
<v Speaker 2>actually, it comes from the very old days

00:11:37.795 --> 00:11:41.155
<v Speaker 2>where every system has its own console. Right?

00:11:41.760 --> 00:11:44.000
<v Speaker 2>And when you can debug the the server,

00:11:44.000 --> 00:11:46.160
<v Speaker 2>you can debug the hardware when you are

00:11:46.160 --> 00:11:48.720
<v Speaker 2>getting information from the hardware or the service

00:11:48.720 --> 00:11:50.560
<v Speaker 2>that are running. Right? Actually, you can do

00:11:50.560 --> 00:11:52.480
<v Speaker 2>that with Linux nowadays. Right? You can attach

00:11:52.480 --> 00:11:54.000
<v Speaker 2>to a serial interface

00:11:54.080 --> 00:11:56.000
<v Speaker 2>and see how the the kernel is booting.

00:11:56.225 --> 00:11:58.065
<v Speaker 2>Not in the, but you can do it

00:11:58.065 --> 00:11:59.425
<v Speaker 2>with a normal system.

00:11:59.665 --> 00:12:02.545
<v Speaker 2>But in containers, they said, yeah. If we

00:12:02.545 --> 00:12:05.905
<v Speaker 2>have an application that needs to trigger messages

00:12:05.905 --> 00:12:09.665
<v Speaker 2>for logging information or even metrics inside the

00:12:09.665 --> 00:12:12.520
<v Speaker 2>logs, right, which is a very common approach

00:12:12.520 --> 00:12:12.760
<v Speaker 2>to

00:12:13.640 --> 00:12:15.880
<v Speaker 2>they said, okay. We're going to run this

00:12:15.880 --> 00:12:18.040
<v Speaker 2>and ship all the information from the standard

00:12:18.040 --> 00:12:21.960
<v Speaker 2>output or to the standard error interface,

00:12:22.120 --> 00:12:24.280
<v Speaker 2>which is, the the common the common channels

00:12:24.280 --> 00:12:24.920
<v Speaker 2>for an application.

00:12:25.485 --> 00:12:27.964
<v Speaker 2>So when this application in Kubernetes runs in

00:12:27.964 --> 00:12:28.925
<v Speaker 2>a container,

00:12:29.485 --> 00:12:30.765
<v Speaker 2>the container

00:12:30.765 --> 00:12:31.645
<v Speaker 2>runtime,

00:12:31.645 --> 00:12:34.045
<v Speaker 2>right, it could be Docker or Cree or

00:12:34.045 --> 00:12:36.605
<v Speaker 2>any other of the same family. What it

00:12:36.605 --> 00:12:38.765
<v Speaker 2>does, it traps the output from

00:12:39.089 --> 00:12:40.529
<v Speaker 2>from this application.

00:12:40.690 --> 00:12:43.089
<v Speaker 2>And what it does, it will encapsulate this

00:12:43.089 --> 00:12:45.570
<v Speaker 2>and put this in a insight

00:12:46.449 --> 00:12:49.329
<v Speaker 2>another kind of message which has more context.

00:12:49.329 --> 00:12:51.410
<v Speaker 2>Right? Because it has a stream, it has

00:12:51.410 --> 00:12:54.675
<v Speaker 2>the timestamp, and so on. And this log

00:12:54.675 --> 00:12:56.675
<v Speaker 2>file ended up in the file system.

00:12:57.395 --> 00:13:00.995
<v Speaker 2>So every every container deployed in Kubernetes, it's

00:13:00.995 --> 00:13:03.315
<v Speaker 2>inside a pod, and a pod can have

00:13:03.315 --> 00:13:06.435
<v Speaker 2>multiple containers. So just imagine that in your

00:13:06.435 --> 00:13:08.779
<v Speaker 2>environment, you have a a few couple of

00:13:08.779 --> 00:13:12.220
<v Speaker 2>nodes. Your application has replicas. Maybe your application's

00:13:12.220 --> 00:13:13.740
<v Speaker 2>running different places.

00:13:13.980 --> 00:13:16.300
<v Speaker 2>They're storing the logs in different ways, and

00:13:16.300 --> 00:13:18.380
<v Speaker 2>and you need to correlate all this information.

00:13:18.380 --> 00:13:21.115
<v Speaker 2>So the workflow is like the application writes

00:13:21.115 --> 00:13:24.075
<v Speaker 2>the information to the standard outputs, standard error

00:13:24.075 --> 00:13:26.715
<v Speaker 2>interfaces. This is trapped by the container,

00:13:27.355 --> 00:13:28.795
<v Speaker 2>and this is stored

00:13:28.955 --> 00:13:32.235
<v Speaker 2>usually in the file system, right, directly as

00:13:32.235 --> 00:13:33.035
<v Speaker 2>a JSON file.

00:13:33.800 --> 00:13:36.040
<v Speaker 2>And then what it does is not just

00:13:36.120 --> 00:13:37.959
<v Speaker 2>you don't get just a message that you

00:13:37.959 --> 00:13:39.720
<v Speaker 2>used to have, but also you get more

00:13:39.720 --> 00:13:41.959
<v Speaker 2>notion about the stream and the timestamp.

00:13:42.120 --> 00:13:44.120
<v Speaker 2>But as I said, what about if you're

00:13:44.120 --> 00:13:46.920
<v Speaker 2>running in a different kind of notes distributed

00:13:46.920 --> 00:13:47.480
<v Speaker 2>environment?

00:13:47.995 --> 00:13:50.395
<v Speaker 2>You're missing some information in the log, like

00:13:50.395 --> 00:13:52.395
<v Speaker 2>what is the host name, port name, the

00:13:52.395 --> 00:13:54.155
<v Speaker 2>container name, the port ID.

00:13:54.395 --> 00:13:55.835
<v Speaker 2>Because at the end of the day, what

00:13:55.835 --> 00:13:57.675
<v Speaker 2>you want to do is data analysis. But

00:13:57.675 --> 00:14:00.475
<v Speaker 2>if you're not able to correlate your data,

00:14:00.635 --> 00:14:03.950
<v Speaker 2>right, it's really hard to understand how your

00:14:03.950 --> 00:14:05.310
<v Speaker 2>application is behaving

00:14:05.470 --> 00:14:08.110
<v Speaker 2>or try to find any kind of anomaly.

00:14:08.910 --> 00:14:11.630
<v Speaker 2>So any logging processor needs to correlate

00:14:11.790 --> 00:14:13.390
<v Speaker 2>log in local information

00:14:13.390 --> 00:14:14.589
<v Speaker 2>but also metadata.

00:14:15.505 --> 00:14:18.145
<v Speaker 2>If you look carefully how this how this

00:14:18.145 --> 00:14:20.945
<v Speaker 2>works from a login perspective, it means that

00:14:21.105 --> 00:14:23.425
<v Speaker 2>you have to collect the information from the

00:14:23.425 --> 00:14:25.505
<v Speaker 2>file system. It doesn't matter what kind of

00:14:25.825 --> 00:14:27.024
<v Speaker 2>it's a source of data.

00:14:27.650 --> 00:14:29.410
<v Speaker 2>You have to collect this data. You have

00:14:29.410 --> 00:14:30.770
<v Speaker 2>to parse this data.

00:14:31.170 --> 00:14:33.490
<v Speaker 2>Right? Maybe you need to filter out or

00:14:33.490 --> 00:14:35.730
<v Speaker 2>enrich your data, and then you can send

00:14:35.730 --> 00:14:38.690
<v Speaker 2>your data out to a final storage, which

00:14:38.690 --> 00:14:41.250
<v Speaker 2>could be a cloud provider or your own

00:14:41.250 --> 00:14:41.970
<v Speaker 2>local

00:14:42.355 --> 00:14:43.315
<v Speaker 2>database,

00:14:43.395 --> 00:14:44.995
<v Speaker 2>like a MySQL

00:14:44.995 --> 00:14:47.315
<v Speaker 2>or Lucky or any kind of

00:14:47.875 --> 00:14:50.995
<v Speaker 2>other storage type. And this

00:14:50.995 --> 00:14:51.875
<v Speaker 2>workflow

00:14:51.875 --> 00:14:54.515
<v Speaker 2>is called which is the pipeline. Right? And

00:14:54.515 --> 00:14:56.755
<v Speaker 2>Fluentd and Fluent Bit implement that pipeline.

00:14:58.010 --> 00:15:01.210
<v Speaker 2>Now the simple message that started like,

00:15:01.690 --> 00:15:04.090
<v Speaker 2>for example, an access log for Apache or

00:15:04.090 --> 00:15:07.610
<v Speaker 2>NGINX gets some a little bit of metadata.

00:15:08.090 --> 00:15:09.370
<v Speaker 2>But in Kubernetes,

00:15:09.370 --> 00:15:11.850
<v Speaker 2>actually, when we correlate all the information together,

00:15:12.425 --> 00:15:14.745
<v Speaker 2>your simple look measure gets something like this.

00:15:14.745 --> 00:15:17.305
<v Speaker 2>Right? Where you have the Kubernetes entries with

00:15:17.305 --> 00:15:19.225
<v Speaker 2>botnet, message for the ID,

00:15:19.464 --> 00:15:22.345
<v Speaker 2>information about the host, and and so on.

00:15:22.345 --> 00:15:24.024
<v Speaker 2>So all this correlation is is a bit

00:15:24.024 --> 00:15:26.904
<v Speaker 2>complex, but give you the full access to

00:15:27.384 --> 00:15:28.105
<v Speaker 2>the context.

00:15:28.560 --> 00:15:31.200
<v Speaker 2>And when you deploy a a logging agent,

00:15:31.200 --> 00:15:32.880
<v Speaker 2>could be Fluentd or Fluentd,

00:15:33.600 --> 00:15:35.280
<v Speaker 2>it runs as a demo set. A demo

00:15:35.280 --> 00:15:37.440
<v Speaker 2>set is a pod that runs on every

00:15:37.440 --> 00:15:40.240
<v Speaker 2>node of your node sort of your cluster.

00:15:40.320 --> 00:15:42.080
<v Speaker 2>So what it does is to read the

00:15:42.080 --> 00:15:45.055
<v Speaker 2>local file system logs from the containers,

00:15:45.375 --> 00:15:47.295
<v Speaker 2>and as soon as it is retrieving the

00:15:47.295 --> 00:15:50.095
<v Speaker 2>data, it goes to the API server. If

00:15:50.095 --> 00:15:51.855
<v Speaker 2>you can switch to the next slide, please.

00:15:51.935 --> 00:15:54.575
<v Speaker 2>Yeah. And so it can correlate all the

00:15:54.575 --> 00:15:57.535
<v Speaker 2>missing parts like labels or annotations

00:15:57.535 --> 00:15:59.295
<v Speaker 2>or any custom information.

00:16:00.310 --> 00:16:03.350
<v Speaker 2>And then the log processor is just ready

00:16:03.350 --> 00:16:04.870
<v Speaker 2>to ship the data out

00:16:05.190 --> 00:16:07.589
<v Speaker 2>to the world or your local file system

00:16:07.589 --> 00:16:10.870
<v Speaker 2>so you can perform a data analysis.

00:16:10.950 --> 00:16:12.630
<v Speaker 2>The thing is that Fluentd

00:16:12.630 --> 00:16:14.230
<v Speaker 2>and Fluent Bit has been around for a

00:16:14.230 --> 00:16:16.045
<v Speaker 2>while. I would say that the first class

00:16:16.045 --> 00:16:17.245
<v Speaker 2>citizen for

00:16:17.885 --> 00:16:19.165
<v Speaker 2>log management

00:16:19.165 --> 00:16:20.445
<v Speaker 2>and stability,

00:16:20.525 --> 00:16:23.245
<v Speaker 2>but also not just logs. Also, I would

00:16:23.245 --> 00:16:26.125
<v Speaker 2>say that at least Fluent Bit also is

00:16:26.125 --> 00:16:29.085
<v Speaker 2>playing a a good role now integrating metrics

00:16:29.360 --> 00:16:32.079
<v Speaker 2>as as part of the agent.

00:16:36.240 --> 00:16:39.120
<v Speaker 2>And one of the important things when when

00:16:39.120 --> 00:16:40.880
<v Speaker 2>when running an agent,

00:16:41.680 --> 00:16:43.695
<v Speaker 2>this we we have work we work very

00:16:43.695 --> 00:16:46.654
<v Speaker 2>close with cloud providers and talking with from

00:16:46.654 --> 00:16:50.095
<v Speaker 2>a community perspective, with Google, with Microsoft, with

00:16:50.095 --> 00:16:51.055
<v Speaker 2>AWS.

00:16:51.535 --> 00:16:52.654
<v Speaker 2>It's like, at the end of the day,

00:16:52.654 --> 00:16:55.615
<v Speaker 2>for example, end users or, like, customers,

00:16:55.695 --> 00:16:58.360
<v Speaker 2>right, they say, yes. I want to deploy

00:16:58.360 --> 00:16:59.480
<v Speaker 2>my applications,

00:16:59.480 --> 00:17:01.560
<v Speaker 2>but I want that the logging layer

00:17:01.720 --> 00:17:04.679
<v Speaker 2>be very cheap in terms of CPU processing

00:17:04.679 --> 00:17:05.639
<v Speaker 2>and memory.

00:17:06.119 --> 00:17:06.759
<v Speaker 2>So

00:17:07.240 --> 00:17:10.265
<v Speaker 2>as Anurag said, yeah, we have Fluentd. It's

00:17:10.265 --> 00:17:11.384
<v Speaker 2>widely deployed,

00:17:11.545 --> 00:17:13.625
<v Speaker 2>and we started working for the last five,

00:17:13.625 --> 00:17:15.224
<v Speaker 2>six years on trying to come up with

00:17:15.224 --> 00:17:16.585
<v Speaker 2>that lightweight solution.

00:17:16.665 --> 00:17:19.224
<v Speaker 2>I would say that nowadays, Fluentd is positioned

00:17:19.224 --> 00:17:22.424
<v Speaker 2>like at the default for Kubernetes clusters

00:17:22.825 --> 00:17:24.825
<v Speaker 2>at a low cost performance, of course.

00:17:28.159 --> 00:17:29.840
<v Speaker 1>Yeah. So that's a a bit of an

00:17:29.840 --> 00:17:30.639
<v Speaker 1>overview

00:17:30.640 --> 00:17:31.279
<v Speaker 1>on

00:17:31.840 --> 00:17:34.479
<v Speaker 1>Fluentd, Fluent Bit, some of the use cases,

00:17:34.799 --> 00:17:37.200
<v Speaker 1>how you can actually apply it to Kubernetes.

00:17:37.600 --> 00:17:38.159
<v Speaker 1>But, yeah,

00:17:38.745 --> 00:17:40.505
<v Speaker 1>it's a a little bit of an overview.

00:17:40.505 --> 00:17:41.465
<v Speaker 1>Hope it helps.

00:17:42.585 --> 00:17:43.945
<v Speaker 0>It does. I think

00:17:44.425 --> 00:17:45.865
<v Speaker 0>I mean, I had a bunch of questions

00:17:45.865 --> 00:17:47.545
<v Speaker 0>I was gonna ask, and I think you

00:17:47.545 --> 00:17:50.105
<v Speaker 0>probably got most of them there in that

00:17:50.105 --> 00:17:52.549
<v Speaker 0>presentation. So that's that's pretty well done.

00:17:53.510 --> 00:17:56.310
<v Speaker 2>It was a good sales pitch. Yeah. Definitely.

00:17:56.310 --> 00:17:57.750
<v Speaker 0>Yeah. You know, I mean, one of those

00:17:57.750 --> 00:17:59.910
<v Speaker 0>things I think that is easy for maybe

00:17:59.910 --> 00:18:01.909
<v Speaker 0>some people to take for granted is that

00:18:01.910 --> 00:18:03.830
<v Speaker 0>the job of the log collector maybe is

00:18:03.830 --> 00:18:05.485
<v Speaker 0>rather simple. And I think you did a

00:18:05.485 --> 00:18:07.005
<v Speaker 0>really good job of doing well actually in

00:18:07.005 --> 00:18:09.244
<v Speaker 0>certain environments it is definitely not.

00:18:09.885 --> 00:18:11.565
<v Speaker 0>I think it's always important for people to

00:18:11.565 --> 00:18:13.885
<v Speaker 0>understand what actually happens to the log data

00:18:13.885 --> 00:18:15.725
<v Speaker 0>when they don't run NSN in their cluster

00:18:15.725 --> 00:18:17.645
<v Speaker 0>to centralize it, know and that was all

00:18:17.645 --> 00:18:19.340
<v Speaker 0>covered as well. I think that was a

00:18:19.340 --> 00:18:20.940
<v Speaker 0>really good overview of the kind of the

00:18:20.940 --> 00:18:22.780
<v Speaker 0>way things are working and and where the

00:18:22.780 --> 00:18:25.420
<v Speaker 0>fluent to fluent projects can kinda come in

00:18:25.420 --> 00:18:28.060
<v Speaker 0>and augment and help and even talking about

00:18:28.060 --> 00:18:29.580
<v Speaker 0>the enrichment of the data I think is

00:18:29.580 --> 00:18:32.435
<v Speaker 0>extremely valuable too and of course the plugins

00:18:32.435 --> 00:18:34.515
<v Speaker 0>were reducing costs. Lots of great info on

00:18:34.515 --> 00:18:35.875
<v Speaker 0>those slides top job.

00:18:36.595 --> 00:18:38.835
<v Speaker 0>I guess one of the things we could

00:18:39.395 --> 00:18:40.674
<v Speaker 0>discuss is just,

00:18:41.155 --> 00:18:44.675
<v Speaker 0>know, is there any semantics heuristic rules for

00:18:44.675 --> 00:18:47.075
<v Speaker 0>when anyone should pick Fluentd over Fluent Bit,

00:18:47.075 --> 00:18:49.530
<v Speaker 0>Fluent Bit over Fluentd, you know, I noticed

00:18:49.530 --> 00:18:50.570
<v Speaker 0>certainly

00:18:50.809 --> 00:18:53.130
<v Speaker 0>CPU and memory constraints that Fluentd is gonna

00:18:53.130 --> 00:18:54.970
<v Speaker 0>be more applicable to at least in certain

00:18:54.970 --> 00:18:56.730
<v Speaker 0>environments but does that mean that I shouldn't

00:18:56.730 --> 00:18:59.130
<v Speaker 0>use it and environments where that isn't a

00:18:59.130 --> 00:19:00.489
<v Speaker 0>constraint? Is there any

00:19:00.915 --> 00:19:02.434
<v Speaker 0>what's your expertise there?

00:19:03.315 --> 00:19:03.955
<v Speaker 1>Yeah.

00:19:04.195 --> 00:19:05.395
<v Speaker 1>Really good question.

00:19:05.635 --> 00:19:06.515
<v Speaker 0>Very sure.

00:19:06.995 --> 00:19:08.195
<v Speaker 2>Okay. Great. Yeah.

00:19:08.995 --> 00:19:10.435
<v Speaker 1>So so I

00:19:10.435 --> 00:19:12.195
<v Speaker 1>think one of the big things with with

00:19:12.195 --> 00:19:14.515
<v Speaker 1>Fluentd and Fluent Bit is, you know, Fluentd

00:19:14.515 --> 00:19:15.235
<v Speaker 1>does have

00:19:15.690 --> 00:19:19.289
<v Speaker 1>a much longer history, which lends itself to

00:19:19.289 --> 00:19:21.210
<v Speaker 1>a ton of more plug ins. So if

00:19:21.210 --> 00:19:22.649
<v Speaker 1>you look at the number of plug ins

00:19:22.649 --> 00:19:24.009
<v Speaker 1>that Fluentd has,

00:19:24.169 --> 00:19:26.649
<v Speaker 1>is it worth a thousand. Right? It's like,

00:19:26.649 --> 00:19:28.570
<v Speaker 1>you can go find a plug in for

00:19:28.570 --> 00:19:28.970
<v Speaker 1>something,

00:19:30.015 --> 00:19:32.255
<v Speaker 1>you know, as enterprise via Snowflake,

00:19:32.255 --> 00:19:33.375
<v Speaker 1>and you can find

00:19:34.015 --> 00:19:36.095
<v Speaker 1>plug ins for, you know,

00:19:36.415 --> 00:19:39.934
<v Speaker 1>Jill's app server that's running locally or something.

00:19:40.255 --> 00:19:42.415
<v Speaker 1>So you have just this wide variety of

00:19:42.415 --> 00:19:44.240
<v Speaker 1>plug ins, and one of the the things

00:19:44.240 --> 00:19:45.920
<v Speaker 1>we try to do with Fluent Bit was

00:19:45.920 --> 00:19:46.720
<v Speaker 1>learning

00:19:46.800 --> 00:19:49.920
<v Speaker 1>around this expanse of the plugin ecosystem.

00:19:49.920 --> 00:19:52.400
<v Speaker 1>How do you make a really good set

00:19:52.400 --> 00:19:54.400
<v Speaker 1>of almost official plugins that come with the

00:19:54.400 --> 00:19:55.120
<v Speaker 1>bundle itself?

00:19:56.365 --> 00:19:58.365
<v Speaker 1>And so what a lot of folks have

00:19:58.365 --> 00:20:00.765
<v Speaker 1>done is with these log collectors, we we

00:20:00.765 --> 00:20:02.445
<v Speaker 1>allow you to run them in what's called

00:20:02.445 --> 00:20:03.325
<v Speaker 1>a forward

00:20:03.405 --> 00:20:04.924
<v Speaker 1>and aggregator pattern.

00:20:05.405 --> 00:20:07.565
<v Speaker 1>And this means I'm gonna take the lightest

00:20:07.565 --> 00:20:09.645
<v Speaker 1>weight agent, and all it's gonna do is

00:20:09.645 --> 00:20:12.429
<v Speaker 1>forward data. It's gonna collect all the data,

00:20:12.510 --> 00:20:15.309
<v Speaker 1>make sure it's resilient, and fire it off

00:20:15.309 --> 00:20:17.629
<v Speaker 1>to something to do more processing on.

00:20:17.870 --> 00:20:20.750
<v Speaker 1>And then that aggregator pattern, which has traditionally

00:20:20.750 --> 00:20:21.950
<v Speaker 1>been Fluentd,

00:20:22.590 --> 00:20:24.590
<v Speaker 1>is something that you're running almost like a

00:20:24.590 --> 00:20:27.435
<v Speaker 1>dedicated server for. It consumes a lot more

00:20:27.435 --> 00:20:28.315
<v Speaker 1>resources,

00:20:28.955 --> 00:20:31.755
<v Speaker 1>but at the same time, is outputting tons

00:20:31.755 --> 00:20:34.075
<v Speaker 1>and tons of volume. So, you know, we

00:20:34.075 --> 00:20:36.795
<v Speaker 1>have users that are outputting, a petabyte per

00:20:36.795 --> 00:20:37.035
<v Speaker 1>day,

00:20:37.860 --> 00:20:40.180
<v Speaker 1>and they're using this forward aggregator

00:20:40.180 --> 00:20:42.500
<v Speaker 1>plan because the nice thing that Fluent Bit

00:20:42.500 --> 00:20:45.779
<v Speaker 1>and Fluentd have is they share this protocol

00:20:46.180 --> 00:20:48.900
<v Speaker 1>of sending raw message pack, which is like

00:20:48.900 --> 00:20:50.180
<v Speaker 1>a serialized JSON,

00:20:51.845 --> 00:20:53.685
<v Speaker 1>and you can fire that data with Fluent

00:20:53.685 --> 00:20:56.164
<v Speaker 1>Bit as a forwarder, Fluentd as an aggregator,

00:20:56.405 --> 00:20:58.005
<v Speaker 1>and then route it to, like, say, s

00:20:58.005 --> 00:20:59.605
<v Speaker 1>three or Elasticsearch

00:20:59.605 --> 00:21:00.645
<v Speaker 1>or wherever.

00:21:00.885 --> 00:21:01.845
<v Speaker 1>Now the choice

00:21:02.005 --> 00:21:04.405
<v Speaker 1>these days is is

00:21:03.860 --> 00:21:06.500
<v Speaker 1>we're also making it applicable so Fluent Bit

00:21:06.500 --> 00:21:08.820
<v Speaker 1>could be used as an aggregator as well.

00:21:09.220 --> 00:21:11.940
<v Speaker 1>So now instead of just using Fluent Bit

00:21:11.940 --> 00:21:14.420
<v Speaker 1>on the forwarder node, you can choose Fluent

00:21:14.420 --> 00:21:15.780
<v Speaker 1>Bit as an aggregator.

00:21:16.355 --> 00:21:18.434
<v Speaker 1>And one of the reasons why

00:21:18.595 --> 00:21:20.595
<v Speaker 1>folks have been hesitant is, okay, the plug

00:21:20.595 --> 00:21:23.075
<v Speaker 1>ins might not be as robust as what

00:21:23.075 --> 00:21:25.554
<v Speaker 1>Fluentd offers and then multiprocess.

00:21:25.795 --> 00:21:28.355
<v Speaker 1>So, actually, really cool is this next release

00:21:28.355 --> 00:21:29.555
<v Speaker 1>that we're we're preparing.

00:21:30.809 --> 00:21:34.490
<v Speaker 1>We're we're allowing for multiprocess, multithreading. I will

00:21:34.490 --> 00:21:35.369
<v Speaker 1>flip it.

00:21:35.610 --> 00:21:38.169
<v Speaker 1>So the yeah. The roles are definitely

00:21:38.330 --> 00:21:40.890
<v Speaker 1>bit mesh. So there's know, one's a project,

00:21:40.890 --> 00:21:41.690
<v Speaker 1>one's a subproject.

00:21:42.505 --> 00:21:45.065
<v Speaker 1>But, you know, we're we are making sure

00:21:45.065 --> 00:21:47.304
<v Speaker 1>that you can choose whichever one.

00:21:47.945 --> 00:21:49.625
<v Speaker 1>And we're, of course, making sure Fluent Bit

00:21:49.625 --> 00:21:51.705
<v Speaker 1>is using the lowest amount of resources

00:21:51.945 --> 00:21:54.105
<v Speaker 1>and has its kind of centralized plug in

00:21:54.105 --> 00:21:54.424
<v Speaker 1>system.

00:21:55.370 --> 00:21:58.570
<v Speaker 0>So Nice. I hadn't actually considered that. It

00:21:58.570 --> 00:21:59.930
<v Speaker 0>was that it was that it wasn't a

00:21:59.930 --> 00:22:01.770
<v Speaker 0>question of which one to use, but actually

00:22:01.770 --> 00:22:03.450
<v Speaker 0>use them in a combination to set the

00:22:03.450 --> 00:22:05.130
<v Speaker 0>environment that you're trying to work with. That

00:22:05.130 --> 00:22:06.170
<v Speaker 0>makes a lot of sense.

00:22:07.050 --> 00:22:09.530
<v Speaker 0>Alright. Shall shall we get started? Shall we?

00:22:10.105 --> 00:22:13.304
<v Speaker 1>Let's do it. Yeah. Let's Yeah. And and

00:22:13.304 --> 00:22:13.945
<v Speaker 1>install.

00:22:15.625 --> 00:22:18.585
<v Speaker 0>Alright. Well, I have the the website here.

00:22:19.544 --> 00:22:22.024
<v Speaker 0>I think we've covered all of the abouts.

00:22:22.024 --> 00:22:23.865
<v Speaker 0>So we're just gonna go straight I guess

00:22:23.970 --> 00:22:24.690
<v Speaker 0>to

00:22:24.770 --> 00:22:26.129
<v Speaker 0>the documentation.

00:22:26.210 --> 00:22:28.530
<v Speaker 0>Now will we start with Fluentd? Will we

00:22:28.530 --> 00:22:30.929
<v Speaker 0>start with Fluentbet? Do you have a preference?

00:22:32.210 --> 00:22:35.250
<v Speaker 1>Let's start with Fluentd and then Fluent Bit

00:22:35.250 --> 00:22:38.289
<v Speaker 1>has some some pretty pretty cool advanced use

00:22:38.289 --> 00:22:40.565
<v Speaker 1>cases and we can kinda finish off with

00:22:40.565 --> 00:22:42.885
<v Speaker 1>those, but fluent let's do Fluentd to start.

00:22:43.125 --> 00:22:44.725
<v Speaker 0>Yep. Alright.

00:22:45.445 --> 00:22:47.365
<v Speaker 0>I'll go straight to the installation

00:22:47.845 --> 00:22:49.925
<v Speaker 0>and we can see we got options for

00:22:49.925 --> 00:22:53.924
<v Speaker 0>deviance, MSI, source, Ruby gems, etcetera. Is there

00:22:53.925 --> 00:22:54.885
<v Speaker 0>a

00:22:55.580 --> 00:22:56.380
<v Speaker 0>Kubernetes

00:22:56.380 --> 00:22:57.019
<v Speaker 0>option?

00:22:58.460 --> 00:23:01.020
<v Speaker 1>So with Kubernetes, you can do a deployment

00:23:01.020 --> 00:23:02.700
<v Speaker 1>from our helm charts.

00:23:03.420 --> 00:23:06.380
<v Speaker 1>So that's that's probably the easiest way to

00:23:06.380 --> 00:23:07.820
<v Speaker 1>to do Kubernetes.

00:23:08.220 --> 00:23:10.940
<v Speaker 1>I believe there should be a Kubernetes

00:23:11.075 --> 00:23:13.794
<v Speaker 1>doc in there as well. Let's see.

00:23:14.035 --> 00:23:15.075
<v Speaker 1>There's a

00:23:16.115 --> 00:23:18.035
<v Speaker 1>search on the top right. I won't know

00:23:18.035 --> 00:23:19.235
<v Speaker 1>the exact

00:23:19.475 --> 00:23:21.315
<v Speaker 0>Alright. Let's

00:23:21.315 --> 00:23:22.115
<v Speaker 1>try that.

00:23:22.995 --> 00:23:23.955
<v Speaker 1>Yeah. Perfect.

00:23:24.590 --> 00:23:26.350
<v Speaker 0>There we go. Nice.

00:23:27.550 --> 00:23:29.470
<v Speaker 0>So let's see. What if we got set

00:23:29.470 --> 00:23:31.470
<v Speaker 0>up in advance? Now one of the things

00:23:31.470 --> 00:23:32.590
<v Speaker 0>I like to do in this show is,

00:23:32.590 --> 00:23:34.510
<v Speaker 0>well, nothing upfront. I like it to be

00:23:34.510 --> 00:23:35.790
<v Speaker 0>quite open and transparent.

00:23:36.455 --> 00:23:37.735
<v Speaker 0>Nobody wants to watch me spin up a

00:23:37.735 --> 00:23:40.535
<v Speaker 0>Kubernetes cluster and I've gone ahead and just

00:23:40.535 --> 00:23:42.615
<v Speaker 0>provision some elastic search and combine. I know

00:23:42.615 --> 00:23:45.335
<v Speaker 0>it's very uninteresting but I suspect that when

00:23:45.335 --> 00:23:47.175
<v Speaker 0>we start collecting logs, actually wanna be able

00:23:47.175 --> 00:23:49.815
<v Speaker 0>to put them somewhere. So I just made

00:23:49.815 --> 00:23:52.039
<v Speaker 0>a little bit of an assumption there. Now

00:23:52.440 --> 00:23:54.919
<v Speaker 0>we can scroll down here

00:23:55.559 --> 00:23:56.360
<v Speaker 0>and

00:23:56.600 --> 00:23:57.399
<v Speaker 0>the

00:23:57.960 --> 00:24:00.040
<v Speaker 0>deployment option for Fluentd then as a daemon

00:24:00.040 --> 00:24:01.880
<v Speaker 0>set, that comes back to I guess what

00:24:01.880 --> 00:24:04.200
<v Speaker 0>you had on your slides like the container

00:24:04.200 --> 00:24:04.840
<v Speaker 0>runtime

00:24:05.095 --> 00:24:08.055
<v Speaker 0>is writing logs already to the host. So

00:24:08.055 --> 00:24:09.655
<v Speaker 0>we need to have something running on each

00:24:09.655 --> 00:24:11.175
<v Speaker 0>of the nodes to be able to collect

00:24:11.175 --> 00:24:11.655
<v Speaker 0>that.

00:24:12.215 --> 00:24:13.095
<v Speaker 1>Exactly.

00:24:13.095 --> 00:24:13.735
<v Speaker 0>Yep.

00:24:14.215 --> 00:24:15.575
<v Speaker 0>Okay. So

00:24:16.135 --> 00:24:17.735
<v Speaker 0>I think it wants me to clone.

00:24:19.550 --> 00:24:21.710
<v Speaker 1>Yeah. So you can you can clone this.

00:24:22.110 --> 00:24:23.870
<v Speaker 1>You might also just be able to go

00:24:23.870 --> 00:24:26.430
<v Speaker 1>to that since it's a david set file.

00:24:26.430 --> 00:24:27.549
<v Speaker 1>Just kind

00:24:27.710 --> 00:24:29.630
<v Speaker 1>of apply it straight from there too.

00:24:30.030 --> 00:24:31.950
<v Speaker 0>So is there no configuration

00:24:32.190 --> 00:24:33.310
<v Speaker 0>for this? Like

00:24:34.825 --> 00:24:36.745
<v Speaker 1>There there is. There is for sure. So

00:24:36.745 --> 00:24:38.184
<v Speaker 1>in here

00:24:39.304 --> 00:24:40.825
<v Speaker 2>Yeah. I think that in the back route,

00:24:40.825 --> 00:24:41.945
<v Speaker 2>Rawkode, and

00:24:42.904 --> 00:24:44.745
<v Speaker 2>and the account service.

00:24:45.860 --> 00:24:48.580
<v Speaker 1>Yeah. Exactly. So here, what we have is

00:24:48.580 --> 00:24:51.220
<v Speaker 1>a bunch of examples of back end. So

00:24:51.620 --> 00:24:54.100
<v Speaker 1>in that repo, you saw, like, Elasticsearch.

00:24:54.100 --> 00:24:55.539
<v Speaker 1>I think there was Loggly.

00:24:56.100 --> 00:24:57.940
<v Speaker 1>I believe there's a couple others. Yeah. Like

00:24:57.940 --> 00:25:01.380
<v Speaker 1>GCS, Ray Log. Australia. Access Log. Yeah. Exactly.

00:25:01.835 --> 00:25:03.674
<v Speaker 1>Exactly. Yeah. So

00:25:03.915 --> 00:25:06.235
<v Speaker 1>if you're if you're a vendor, you know,

00:25:06.235 --> 00:25:08.075
<v Speaker 1>and you wanna you wanna put one in

00:25:08.075 --> 00:25:10.554
<v Speaker 1>there, we're happy to take contributions.

00:25:11.755 --> 00:25:12.315
<v Speaker 0>Yeah.

00:25:12.555 --> 00:25:15.195
<v Speaker 0>Alright. I'll assume we maybe want the

00:25:15.275 --> 00:25:18.610
<v Speaker 0>daemon set, elastic search, RBAC example.

00:25:20.130 --> 00:25:21.890
<v Speaker 1>Yes. Or should I use a Helm chart

00:25:21.890 --> 00:25:23.490
<v Speaker 0>or will I just apply this and we'll

00:25:23.490 --> 00:25:25.970
<v Speaker 0>cross our fingers? It's yeah. So the Helm

00:25:25.970 --> 00:25:28.850
<v Speaker 1>chart essentially takes this daemon set and applies

00:25:28.850 --> 00:25:31.809
<v Speaker 1>the daemon set. It applies some service accounts,

00:25:32.895 --> 00:25:35.055
<v Speaker 1>the same cluster actually, yeah, this is pretty

00:25:35.055 --> 00:25:36.815
<v Speaker 1>much the same exact thing. That was an

00:25:37.535 --> 00:25:39.295
<v Speaker 1>even though it just says daemon set, it

00:25:39.295 --> 00:25:42.655
<v Speaker 1>includes kinda multiple things. So whichever one

00:25:43.055 --> 00:25:44.095
<v Speaker 1>you want there.

00:25:44.495 --> 00:25:44.815
<v Speaker 1>Yeah.

00:25:45.590 --> 00:25:47.910
<v Speaker 0>Well, I'm feeling brave. So we'll just

00:25:50.310 --> 00:25:52.230
<v Speaker 0>alright. So I'm assuming it's maybe gonna be

00:25:52.230 --> 00:25:53.270
<v Speaker 0>running in

00:25:53.510 --> 00:25:54.789
<v Speaker 0>it's on namespace?

00:25:55.430 --> 00:25:57.270
<v Speaker 2>I think I think it's a login login

00:25:57.270 --> 00:25:58.230
<v Speaker 2>namespace.

00:25:58.310 --> 00:25:58.630
<v Speaker 2>Yeah.

00:26:00.554 --> 00:26:01.434
<v Speaker 0>Let's see.

00:26:02.075 --> 00:26:03.434
<v Speaker 2>Oh, it's a KubeSystem.

00:26:04.955 --> 00:26:07.355
<v Speaker 0>Yep. KubeSystem. Alright. So Mhmm.

00:26:08.875 --> 00:26:10.554
<v Speaker 0>Let's have a look and see if it

00:26:10.554 --> 00:26:11.914
<v Speaker 0>is running unhappy.

00:26:11.914 --> 00:26:13.970
<v Speaker 0>Oh, I just did a dashy anyway. Force

00:26:13.970 --> 00:26:15.330
<v Speaker 0>to happen. Yeah.

00:26:15.490 --> 00:26:17.730
<v Speaker 1>It might be running. I think the other

00:26:17.730 --> 00:26:20.370
<v Speaker 1>thing that we probably need to do is

00:26:20.610 --> 00:26:21.810
<v Speaker 1>modify it

00:26:22.050 --> 00:26:25.010
<v Speaker 1>for the elastic search. So, like, modify the

00:26:25.010 --> 00:26:27.775
<v Speaker 1>the settings and everything. But you'll actually, one

00:26:27.775 --> 00:26:29.615
<v Speaker 1>cool thing to see here is,

00:26:29.695 --> 00:26:30.335
<v Speaker 1>you know,

00:26:30.735 --> 00:26:34.095
<v Speaker 1>sometimes your provider or the the Kubernetes cluster

00:26:34.095 --> 00:26:36.575
<v Speaker 1>you have will already have Fluentd and Fluent

00:26:36.575 --> 00:26:38.575
<v Speaker 1>Bit running on it as part of its,

00:26:38.575 --> 00:26:40.495
<v Speaker 1>like, system logs. So here you can see,

00:26:40.495 --> 00:26:42.600
<v Speaker 1>like, Fluent Bit is already in there, but

00:26:42.600 --> 00:26:44.600
<v Speaker 1>that's not something we deployed. We just deployed

00:26:44.600 --> 00:26:45.480
<v Speaker 1>Fluentd.

00:26:45.480 --> 00:26:46.039
<v Speaker 1>Yeah.

00:26:46.920 --> 00:26:49.400
<v Speaker 0>Yeah. I got it. Think yeah. JKE provides

00:26:49.400 --> 00:26:51.000
<v Speaker 0>us at the box now, which is quite

00:26:51.000 --> 00:26:51.720
<v Speaker 0>cool. Mhmm.

00:26:52.679 --> 00:26:53.399
<v Speaker 0>Yeah.

00:26:54.920 --> 00:26:56.600
<v Speaker 0>Let's get some code editors going.

00:26:59.725 --> 00:27:01.005
<v Speaker 0>Create a new file.

00:27:01.085 --> 00:27:02.365
<v Speaker 0>Copy, paste.

00:27:06.285 --> 00:27:07.885
<v Speaker 0>So what was it you said we potentially

00:27:07.885 --> 00:27:09.085
<v Speaker 0>want to be modifying here?

00:27:09.860 --> 00:27:12.100
<v Speaker 1>Yes. We wanna modify the,

00:27:12.420 --> 00:27:13.780
<v Speaker 1>yeah, the host

00:27:14.580 --> 00:27:18.100
<v Speaker 1>as well as the password for the user.

00:27:19.300 --> 00:27:21.140
<v Speaker 1>And then depending on the version, so if

00:27:21.140 --> 00:27:21.620
<v Speaker 1>you're using

00:27:22.965 --> 00:27:25.684
<v Speaker 1>something that has security enabled

00:27:25.684 --> 00:27:28.725
<v Speaker 1>or user enabled, we'll wanna modify that too.

00:27:31.365 --> 00:27:33.605
<v Speaker 0>You mean from the Elasticsearch site?

00:27:34.245 --> 00:27:36.405
<v Speaker 1>Yeah. From the Elasticsearch site. Yeah. I don't

00:27:36.405 --> 00:27:37.205
<v Speaker 0>think there's

00:27:37.610 --> 00:27:39.450
<v Speaker 0>I I don't think there's any authentication. I

00:27:39.450 --> 00:27:42.170
<v Speaker 0>think we should be okay. Alright. So okay.

00:27:42.650 --> 00:27:45.290
<v Speaker 1>So then I think with the user and

00:27:45.290 --> 00:27:47.370
<v Speaker 1>password, we might be able to just

00:27:48.010 --> 00:27:49.130
<v Speaker 1>comment that out. Yeah.

00:27:52.825 --> 00:27:55.225
<v Speaker 0>Woah. That should be okay.

00:27:57.145 --> 00:27:58.425
<v Speaker 0>Oh, because I haven't saved it with an

00:27:58.425 --> 00:28:00.025
<v Speaker 0>extension, so it doesn't know how to comment.

00:28:00.025 --> 00:28:00.825
<v Speaker 0>There we go.

00:28:02.185 --> 00:28:04.265
<v Speaker 0>Alright. We'll try it. Yeah. I just did

00:28:04.265 --> 00:28:07.180
<v Speaker 0>a default helm install for Elastic search.

00:28:07.580 --> 00:28:09.420
<v Speaker 0>I guess maybe I could check if that

00:28:09.420 --> 00:28:10.300
<v Speaker 0>installs

00:28:10.380 --> 00:28:11.820
<v Speaker 0>any authentication

00:28:11.820 --> 00:28:13.820
<v Speaker 0>but I think by default it's

00:28:15.260 --> 00:28:16.620
<v Speaker 0>it's difficult. So

00:28:17.020 --> 00:28:19.020
<v Speaker 0>Okay. Let's apply this over the top.

00:28:27.365 --> 00:28:29.205
<v Speaker 0>Wait for it to be happy again.

00:28:33.365 --> 00:28:36.005
<v Speaker 2>So the first enhancement is to that we

00:28:36.005 --> 00:28:38.770
<v Speaker 2>have to do is, like, rename a brand

00:28:38.770 --> 00:28:40.930
<v Speaker 2>document that is not just a demo set,

00:28:40.930 --> 00:28:42.370
<v Speaker 2>so it's ready to go.

00:28:45.330 --> 00:28:46.450
<v Speaker 0>Yes.

00:28:46.450 --> 00:28:48.850
<v Speaker 0>So now that I've changed the elastic search

00:28:49.090 --> 00:28:50.850
<v Speaker 0>config map, where I think I'm gonna have

00:28:50.850 --> 00:28:52.690
<v Speaker 0>to just kill all those pods, right, and

00:28:52.690 --> 00:28:54.985
<v Speaker 0>force it to reload the configuration?

00:28:56.425 --> 00:28:58.665
<v Speaker 1>I think I think it's probably doing it

00:28:58.665 --> 00:29:01.465
<v Speaker 1>one by one. So it still looks like

00:29:01.465 --> 00:29:03.544
<v Speaker 1>it's terminating p r five.

00:29:03.945 --> 00:29:05.625
<v Speaker 1>Yeah. And then it looks like it restarted.

00:29:05.880 --> 00:29:08.600
<v Speaker 0>Alright. That'll probably terminate another one. Yeah. Oh,

00:29:08.600 --> 00:29:10.120
<v Speaker 0>it's doing it in a slow way. I

00:29:10.120 --> 00:29:11.960
<v Speaker 0>I prefer the the gung ho approach. I

00:29:11.960 --> 00:29:13.960
<v Speaker 0>would've just have deleted the Me too.

00:29:15.480 --> 00:29:16.120
<v Speaker 1>Yeah.

00:29:16.680 --> 00:29:18.600
<v Speaker 1>But but what we should be able to

00:29:18.600 --> 00:29:21.434
<v Speaker 1>see is in that one running container is

00:29:21.434 --> 00:29:22.474
<v Speaker 1>we can check

00:29:22.875 --> 00:29:24.794
<v Speaker 1>if we do a cube CTL logs on

00:29:24.794 --> 00:29:25.274
<v Speaker 1>that,

00:29:25.674 --> 00:29:26.874
<v Speaker 1>see if it's running,

00:29:27.274 --> 00:29:29.434
<v Speaker 1>maybe make sure it's not, like, outputting any

00:29:29.434 --> 00:29:31.114
<v Speaker 1>errors in case of, like, some

00:29:31.914 --> 00:29:34.554
<v Speaker 1>security or anything. Okay. Looks like it's following

00:29:34.554 --> 00:29:35.274
<v Speaker 1>the tails.

00:29:35.800 --> 00:29:37.480
<v Speaker 2>Yeah. It's following the files.

00:29:38.360 --> 00:29:40.120
<v Speaker 0>Yeah. That that looks happy to me. I

00:29:40.120 --> 00:29:41.480
<v Speaker 0>mean, I don't I don't see an error.

00:29:41.480 --> 00:29:43.400
<v Speaker 0>Does that mean that it's flushed into Elasticsearch

00:29:43.400 --> 00:29:44.679
<v Speaker 0>and everything's happy?

00:29:46.280 --> 00:29:47.560
<v Speaker 1>Fingers

00:29:47.560 --> 00:29:49.320
<v Speaker 1>crossed. Yeah. May like, maybe let's check out

00:29:49.320 --> 00:29:50.520
<v Speaker 1>Kibana, to be honest.

00:29:52.475 --> 00:29:55.674
<v Speaker 0>Alright. So let's set a quick port forward.

00:29:59.914 --> 00:30:01.115
<v Speaker 0>Five six zero one.

00:30:04.110 --> 00:30:05.790
<v Speaker 0>There

00:30:05.790 --> 00:30:06.110
<v Speaker 0>we go.

00:30:19.475 --> 00:30:20.595
<v Speaker 0>Let's see.

00:30:22.355 --> 00:30:23.715
<v Speaker 0>This is different.

00:30:25.395 --> 00:30:27.315
<v Speaker 1>Yeah. So I think we'll go to create

00:30:27.315 --> 00:30:28.755
<v Speaker 1>an index pattern first,

00:30:29.870 --> 00:30:31.390
<v Speaker 1>if I remember correctly.

00:30:31.790 --> 00:30:33.310
<v Speaker 1>If you go all the way down

00:30:35.150 --> 00:30:37.150
<v Speaker 1>to stack management.

00:30:39.230 --> 00:30:40.270
<v Speaker 1>There you go.

00:30:40.990 --> 00:30:42.030
<v Speaker 1>The index

00:30:42.590 --> 00:30:43.710
<v Speaker 1>sorry. Index

00:30:43.950 --> 00:30:44.430
<v Speaker 1>patterns.

00:30:47.105 --> 00:30:48.465
<v Speaker 0>Gotcha. And

00:30:49.585 --> 00:30:53.105
<v Speaker 1>I believe the default uses the Logstash pattern.

00:30:53.105 --> 00:30:55.585
<v Speaker 1>So if you do a Logstash dash star,

00:30:55.825 --> 00:30:58.750
<v Speaker 1>we'll define that as the pod pattern.

00:30:58.990 --> 00:31:00.910
<v Speaker 1>Yeah. Perfect. Yeah. And we can see there's

00:31:00.910 --> 00:31:03.630
<v Speaker 1>there's a new index there, 1.15,

00:31:03.790 --> 00:31:06.429
<v Speaker 1>which I'm going to assume is the

00:31:07.390 --> 00:31:08.590
<v Speaker 2>It's the index here today.

00:31:09.815 --> 00:31:10.774
<v Speaker 1>Exactly.

00:31:10.855 --> 00:31:11.654
<v Speaker 1>Yeah.

00:31:12.055 --> 00:31:13.815
<v Speaker 1>So we can click next.

00:31:14.455 --> 00:31:16.855
<v Speaker 0>Alright. I'll I'll just dismiss this. My data

00:31:16.855 --> 00:31:18.534
<v Speaker 0>is not secure. Warning.

00:31:19.815 --> 00:31:20.615
<v Speaker 0>Oh, no.

00:31:22.215 --> 00:31:24.375
<v Speaker 0>I'll send the timestamp field as timestamp.

00:31:25.430 --> 00:31:26.149
<v Speaker 1>Exactly.

00:31:26.630 --> 00:31:27.350
<v Speaker 1>Yeah.

00:31:29.270 --> 00:31:29.990
<v Speaker 0>And

00:31:30.390 --> 00:31:31.269
<v Speaker 0>Yep.

00:31:31.590 --> 00:31:33.269
<v Speaker 0>So that means we select it.

00:31:34.230 --> 00:31:35.270
<v Speaker 0>Should have data. And we

00:31:36.070 --> 00:31:37.590
<v Speaker 1>exactly. Go to discover

00:31:42.125 --> 00:31:42.924
<v Speaker 1>And

00:31:44.205 --> 00:31:46.364
<v Speaker 1>crossing all our fingers here. There

00:31:47.804 --> 00:31:49.004
<v Speaker 1>we go. Yeah.

00:31:50.205 --> 00:31:50.845
<v Speaker 1>So

00:31:51.965 --> 00:31:53.725
<v Speaker 0>Nice. That was a straightforward.

00:31:54.525 --> 00:31:56.605
<v Speaker 0>That Used to be more complex years ago.

00:31:57.110 --> 00:31:59.350
<v Speaker 0>That is the easiest installation I have done

00:31:59.350 --> 00:32:01.270
<v Speaker 0>in this show so far, and it wasn't

00:32:01.270 --> 00:32:03.510
<v Speaker 0>gonna help chat. So that's a bonus for

00:32:03.510 --> 00:32:04.309
<v Speaker 0>me. Yeah.

00:32:05.430 --> 00:32:07.750
<v Speaker 1>Yeah. It's the the thing is you did

00:32:07.750 --> 00:32:09.830
<v Speaker 1>have security on. Otherwise, we have to go

00:32:09.830 --> 00:32:11.830
<v Speaker 1>get the cert and then have to add

00:32:11.830 --> 00:32:12.310
<v Speaker 1>the cert.

00:32:12.794 --> 00:32:13.355
<v Speaker 1>But

00:32:13.595 --> 00:32:15.514
<v Speaker 1>Yeah. That's it's

00:32:15.674 --> 00:32:17.595
<v Speaker 1>it's meant to be very simple. Right? Get

00:32:17.595 --> 00:32:19.514
<v Speaker 1>get started, ship the logs,

00:32:20.235 --> 00:32:22.235
<v Speaker 1>enrich the logs. So even if if you

00:32:22.235 --> 00:32:24.154
<v Speaker 1>zoom in to one of them, you'll see,

00:32:24.154 --> 00:32:25.995
<v Speaker 1>like, you have Docker container ID, you have

00:32:25.995 --> 00:32:27.514
<v Speaker 1>Kubernetes container name.

00:32:28.450 --> 00:32:31.010
<v Speaker 1>All of that is available to you.

00:32:33.250 --> 00:32:35.730
<v Speaker 0>Oh, yes. Because this information won't actually be

00:32:35.730 --> 00:32:37.410
<v Speaker 0>in the log outputs of each of the

00:32:37.410 --> 00:32:39.570
<v Speaker 0>applications running on my cluster. This is something

00:32:39.570 --> 00:32:41.570
<v Speaker 0>that Fluentd is going, hey. We're inside a

00:32:41.570 --> 00:32:42.450
<v Speaker 0>Kubernetes

00:32:42.690 --> 00:32:44.825
<v Speaker 0>environment. We should start to enrich this log

00:32:44.825 --> 00:32:47.065
<v Speaker 0>of all of these details. Exactly.

00:32:47.065 --> 00:32:50.264
<v Speaker 1>Exactly. It it'll enrich it, cache that result,

00:32:50.264 --> 00:32:52.745
<v Speaker 1>and then just basically enrich every log that

00:32:52.745 --> 00:32:53.464
<v Speaker 1>comes in.

00:32:55.544 --> 00:32:56.184
<v Speaker 0>Excellent.

00:32:56.345 --> 00:32:56.904
<v Speaker 0>So

00:32:57.784 --> 00:32:58.825
<v Speaker 0>with one command

00:32:59.360 --> 00:33:01.440
<v Speaker 0>it's running. We have our logs. We are

00:33:01.440 --> 00:33:03.840
<v Speaker 0>thrown to elastic. We visualize it for Kibana.

00:33:04.160 --> 00:33:05.440
<v Speaker 0>Is that us done? Are we going home

00:33:05.440 --> 00:33:06.080
<v Speaker 0>early?

00:33:07.040 --> 00:33:07.920
<v Speaker 1>So so

00:33:08.400 --> 00:33:10.000
<v Speaker 1>yeah. I mean, I mean, we really could.

00:33:10.000 --> 00:33:12.315
<v Speaker 1>But the the next step that folks could

00:33:12.315 --> 00:33:14.395
<v Speaker 1>take afterwards is like, okay. Hey. I wanna

00:33:14.395 --> 00:33:15.434
<v Speaker 1>filter out

00:33:15.675 --> 00:33:18.795
<v Speaker 1>some logs. I wanna redact some logs. I

00:33:18.795 --> 00:33:19.595
<v Speaker 1>want to

00:33:20.155 --> 00:33:21.115
<v Speaker 1>potentially

00:33:21.195 --> 00:33:22.955
<v Speaker 1>send data to Elasticsearch,

00:33:22.955 --> 00:33:24.554
<v Speaker 1>and I wanna send it to Amazon s

00:33:24.554 --> 00:33:25.275
<v Speaker 1>three or

00:33:25.600 --> 00:33:28.320
<v Speaker 1>a large data warehouse. Right? So these are,

00:33:28.320 --> 00:33:29.679
<v Speaker 1>like, kind of the next steps

00:33:29.840 --> 00:33:31.919
<v Speaker 1>in login journeys where

00:33:32.240 --> 00:33:33.759
<v Speaker 1>you're collecting everything.

00:33:33.840 --> 00:33:36.799
<v Speaker 1>That's awesome. This might be too much data,

00:33:36.799 --> 00:33:38.535
<v Speaker 1>though. And now you're like, okay. How do

00:33:38.535 --> 00:33:40.215
<v Speaker 1>I filter it out? How do I redact

00:33:40.215 --> 00:33:41.895
<v Speaker 1>it? How do I anonymize it? How do

00:33:41.895 --> 00:33:43.735
<v Speaker 1>I send it to a cheaper data storage

00:33:43.735 --> 00:33:44.855
<v Speaker 1>if I need to?

00:33:45.255 --> 00:33:46.935
<v Speaker 1>So, yeah, there's, like, a ton of ton

00:33:46.935 --> 00:33:49.335
<v Speaker 1>of options that that you can do with

00:33:50.560 --> 00:33:53.040
<v Speaker 1>once once it's all all set and and

00:33:53.040 --> 00:33:53.919
<v Speaker 1>ready to go.

00:33:54.720 --> 00:33:56.720
<v Speaker 0>Alright. So so we try and and filter

00:33:56.720 --> 00:33:58.240
<v Speaker 0>this data down a little bit, see if

00:33:58.240 --> 00:34:00.480
<v Speaker 0>we can reduce the throughput?

00:34:01.840 --> 00:34:02.640
<v Speaker 1>Sure. Yeah.

00:34:03.405 --> 00:34:04.205
<v Speaker 1>Alright.

00:34:04.285 --> 00:34:05.165
<v Speaker 1>Or

00:34:05.885 --> 00:34:07.325
<v Speaker 1>what you know, what we could do

00:34:07.885 --> 00:34:10.045
<v Speaker 1>is let's let's switch to Fluent Bit and

00:34:10.045 --> 00:34:11.645
<v Speaker 1>then do some of that stuff there because

00:34:11.645 --> 00:34:13.885
<v Speaker 1>there's some really cool capabilities we've been working

00:34:13.885 --> 00:34:15.885
<v Speaker 1>on in Fluent Bit with

00:34:16.045 --> 00:34:17.324
<v Speaker 1>with the processing

00:34:17.489 --> 00:34:19.570
<v Speaker 1>that I I think would be would be

00:34:19.570 --> 00:34:22.050
<v Speaker 1>really cool to to showcase here. We could

00:34:22.050 --> 00:34:23.810
<v Speaker 1>use the same Elasticsearch

00:34:23.810 --> 00:34:25.090
<v Speaker 1>endpoint as well.

00:34:26.050 --> 00:34:28.690
<v Speaker 0>Yeah. Sure. So I guess I just gotta

00:34:29.489 --> 00:34:30.449
<v Speaker 0>come back to here.

00:34:31.985 --> 00:34:33.985
<v Speaker 0>Let's see if I can work this out.

00:34:34.545 --> 00:34:36.065
<v Speaker 0>Oh, no. That was the

00:34:37.905 --> 00:34:38.945
<v Speaker 0>wrong URL.

00:34:40.545 --> 00:34:42.305
<v Speaker 0>So is the manifest in here or is

00:34:42.305 --> 00:34:43.985
<v Speaker 0>it a different

00:34:44.730 --> 00:34:46.250
<v Speaker 0>report? It's gonna be a different

00:34:49.610 --> 00:34:51.050
<v Speaker 0>Sorry. I didn't catch that.

00:34:52.010 --> 00:34:54.170
<v Speaker 2>Oh, sorry. Yeah. Just go to the Fluent

00:34:54.170 --> 00:34:55.449
<v Speaker 2>Bit website,

00:34:55.530 --> 00:34:57.050
<v Speaker 2>and you can hit the documentation.

00:34:58.825 --> 00:35:01.145
<v Speaker 2>So we have documentation on how to deploy

00:35:01.145 --> 00:35:03.865
<v Speaker 2>from the daemon set file, right, using the

00:35:03.865 --> 00:35:04.825
<v Speaker 2>raw files.

00:35:05.305 --> 00:35:06.265
<v Speaker 2>But also,

00:35:06.825 --> 00:35:08.185
<v Speaker 2>I would say, to be honest, most of

00:35:08.185 --> 00:35:10.185
<v Speaker 2>people are using the official hand charts.

00:35:11.950 --> 00:35:13.630
<v Speaker 2>Well, there are two hand charts. Right? The

00:35:13.630 --> 00:35:16.030
<v Speaker 2>old stable that are being deprecated by the

00:35:16.030 --> 00:35:17.390
<v Speaker 2>HAM project and

00:35:17.550 --> 00:35:19.470
<v Speaker 2>and and the ones that we have.

00:35:20.190 --> 00:35:22.590
<v Speaker 2>So if you go to installation

00:35:22.670 --> 00:35:24.110
<v Speaker 2>on the left menu,

00:35:24.590 --> 00:35:26.270
<v Speaker 2>you will find the Kubernetes option.

00:35:31.605 --> 00:35:32.405
<v Speaker 0>Alright.

00:35:34.325 --> 00:35:35.845
<v Speaker 0>So we have the

00:35:36.005 --> 00:35:38.885
<v Speaker 0>ability to create all the manifests.

00:35:39.860 --> 00:35:42.100
<v Speaker 0>We got the elastic search option and we

00:35:42.100 --> 00:35:44.020
<v Speaker 0>have a helm chart. So a little bit

00:35:44.020 --> 00:35:46.500
<v Speaker 0>of flexibility there. Let's try the helm one

00:35:46.500 --> 00:35:47.300
<v Speaker 1>then. Yeah.

00:35:49.460 --> 00:35:50.980
<v Speaker 0>We'll add the repository

00:35:52.660 --> 00:35:53.620
<v Speaker 0>and

00:35:55.355 --> 00:35:56.954
<v Speaker 0>I guess we'll maybe need to tweak this

00:35:56.954 --> 00:35:58.715
<v Speaker 0>values fail a little bit. Right?

00:35:59.115 --> 00:36:01.675
<v Speaker 1>Ex exactly. Yeah. So we wanna tweak the

00:36:01.675 --> 00:36:03.915
<v Speaker 1>values dot yaml just a bit.

00:36:06.234 --> 00:36:08.234
<v Speaker 1>So I think let's see. In the value

00:36:08.234 --> 00:36:08.795
<v Speaker 1>section,

00:36:11.490 --> 00:36:13.650
<v Speaker 1>we have, yeah, a a match

00:36:13.650 --> 00:36:14.370
<v Speaker 1>of

00:36:16.050 --> 00:36:17.490
<v Speaker 0>Let's see. Alright.

00:36:20.530 --> 00:36:22.050
<v Speaker 0>So here's the config.

00:36:22.050 --> 00:36:23.970
<v Speaker 0>I guess the end pitch is already configured

00:36:23.970 --> 00:36:25.835
<v Speaker 0>for Kubernetes. Yeah. I can see some stuff

00:36:25.835 --> 00:36:27.355
<v Speaker 0>here. Exactly.

00:36:27.595 --> 00:36:29.675
<v Speaker 1>Then we have the Kubernetes filter,

00:36:29.994 --> 00:36:32.395
<v Speaker 1>and then we have the outputs here. So

00:36:32.395 --> 00:36:34.235
<v Speaker 1>I think we just changed the host,

00:36:34.635 --> 00:36:37.435
<v Speaker 1>and it will automatically assume port 9,200.

00:36:37.994 --> 00:36:39.830
<v Speaker 0>I think it was actually the service name,

00:36:39.830 --> 00:36:41.190
<v Speaker 0>wasn't it? I don't think I need to

00:36:41.190 --> 00:36:41.910
<v Speaker 0>change it.

00:36:46.790 --> 00:36:49.270
<v Speaker 0>Yeah. Okay. Yeah. Oh, no. I think different

00:36:50.310 --> 00:36:50.870
<v Speaker 0>namespace.

00:36:51.575 --> 00:36:53.095
<v Speaker 1>Oh, okay. Yep.

00:36:54.934 --> 00:36:57.095
<v Speaker 0>Assuming we don't install I don't know if

00:36:57.095 --> 00:36:59.415
<v Speaker 0>the default namespace on this will go to

00:37:00.295 --> 00:37:02.135
<v Speaker 0>whatever the helm context is. So maybe it

00:37:02.135 --> 00:37:04.500
<v Speaker 0>won't be done. Oh, what what version of

00:37:04.500 --> 00:37:06.980
<v Speaker 1>Kubernetes is this, by the way? I believe

00:37:06.980 --> 00:37:08.100
<v Speaker 0>it's one seventeen.

00:37:08.740 --> 00:37:11.380
<v Speaker 1>Okay. Is that the one Because one seventeen

00:37:11.380 --> 00:37:13.700
<v Speaker 2>comes with Fluent Bit on GTE.

00:37:14.660 --> 00:37:15.460
<v Speaker 2>That's a new version.

00:37:16.595 --> 00:37:18.355
<v Speaker 1>So the the one thing I was thinking

00:37:18.355 --> 00:37:19.155
<v Speaker 1>of is

00:37:19.555 --> 00:37:22.194
<v Speaker 1>so the actually, this change from Docker to

00:37:22.194 --> 00:37:23.955
<v Speaker 1>CRI as the default

00:37:24.434 --> 00:37:27.235
<v Speaker 1>is a different format of log, of course.

00:37:27.875 --> 00:37:30.119
<v Speaker 1>And so we we do have all the

00:37:30.119 --> 00:37:32.359
<v Speaker 1>CRI parts of this within Fluent Bit out

00:37:32.359 --> 00:37:34.200
<v Speaker 1>of the box as well and Fluentd.

00:37:34.680 --> 00:37:36.839
<v Speaker 1>But, yeah, just to you know, for folks

00:37:36.839 --> 00:37:39.240
<v Speaker 1>who are saying, okay. I wanna try this

00:37:39.240 --> 00:37:40.200
<v Speaker 1>on my

00:37:41.079 --> 00:37:43.079
<v Speaker 1>my

00:37:42.075 --> 00:37:44.555
<v Speaker 1>Kubernetes cluster. If you're using one of the,

00:37:44.555 --> 00:37:46.474
<v Speaker 1>you know, bleeding edge versions that doesn't have

00:37:46.474 --> 00:37:48.555
<v Speaker 1>Docker, just your right, just make sure that

00:37:48.555 --> 00:37:51.115
<v Speaker 1>that's enabled by default if you're using the

00:37:51.115 --> 00:37:52.235
<v Speaker 1>CRI parser.

00:37:52.635 --> 00:37:55.035
<v Speaker 0>Yeah. I think in my conversations, I've been

00:37:55.035 --> 00:37:56.875
<v Speaker 0>having with people over the the last six

00:37:56.875 --> 00:37:58.420
<v Speaker 0>months. A lot of people are now starting

00:37:58.420 --> 00:38:00.900
<v Speaker 0>to push towards running container d by default.

00:38:00.900 --> 00:38:03.620
<v Speaker 0>So I think that's useful information for folks.

00:38:04.500 --> 00:38:05.380
<v Speaker 0>Alright.

00:38:06.660 --> 00:38:08.580
<v Speaker 0>So we're gonna provide our own values file,

00:38:08.580 --> 00:38:10.260
<v Speaker 0>although I don't think we've actually changed anything

00:38:10.260 --> 00:38:11.620
<v Speaker 0>yet. So this is technical.

00:38:12.705 --> 00:38:14.465
<v Speaker 0>Just the defaults, but I'm sure we'll be

00:38:14.465 --> 00:38:16.705
<v Speaker 0>making a few changes in a moment. So

00:38:18.705 --> 00:38:20.465
<v Speaker 0>let's give that a second.

00:38:25.505 --> 00:38:25.985
<v Speaker 0>Alright.

00:38:28.680 --> 00:38:31.400
<v Speaker 1>And I think another difference with the default

00:38:31.400 --> 00:38:33.559
<v Speaker 1>config of Fluent Bit is instead of using

00:38:33.559 --> 00:38:34.840
<v Speaker 1>Logstash

00:38:34.920 --> 00:38:37.559
<v Speaker 1>format, it uses Fluent Bit as the index

00:38:37.559 --> 00:38:39.400
<v Speaker 1>name, if I am correct.

00:38:39.720 --> 00:38:41.160
<v Speaker 0>So I guess if we go to that

00:38:41.160 --> 00:38:43.319
<v Speaker 0>index screen where we were just previously on,

00:38:43.319 --> 00:38:46.184
<v Speaker 0>we should maybe see a different pattern show

00:38:46.184 --> 00:38:46.665
<v Speaker 0>up?

00:38:47.305 --> 00:38:48.425
<v Speaker 1>Correct. Yeah.

00:38:51.384 --> 00:38:53.464
<v Speaker 2>I I think that the Logstash format was

00:38:53.464 --> 00:38:54.265
<v Speaker 2>enabled.

00:38:54.825 --> 00:38:56.904
<v Speaker 2>Oh, was The configuration that we just saw.

00:38:56.904 --> 00:38:59.060
<v Speaker 2>Yeah. I think that was enabled. Yeah. That

00:38:59.140 --> 00:39:01.300
<v Speaker 2>you can configure that. Right? Yeah.

00:39:02.740 --> 00:39:05.140
<v Speaker 0>Oh, yeah. Yeah. Launch that. Launch that. That

00:39:05.140 --> 00:39:06.100
<v Speaker 2>from at all.

00:39:06.580 --> 00:39:08.020
<v Speaker 0>Can I just set it to off? Yeah.

00:39:08.020 --> 00:39:09.620
<v Speaker 2>Actually, in the configuration, you can add your

00:39:09.620 --> 00:39:11.460
<v Speaker 2>own prefix if you want so you can

00:39:11.460 --> 00:39:12.180
<v Speaker 2>separate

00:39:13.045 --> 00:39:15.285
<v Speaker 2>or create a new kind of a index.

00:39:15.285 --> 00:39:16.725
<v Speaker 0>So I'm curious, like,

00:39:17.285 --> 00:39:19.045
<v Speaker 0>what you mentioned there was that there's a

00:39:19.045 --> 00:39:21.205
<v Speaker 0>Fluent Bit syntax

00:39:21.365 --> 00:39:23.045
<v Speaker 0>or is that just a prefix?

00:39:24.405 --> 00:39:26.645
<v Speaker 2>Prefix. Yeah. You can set it. You can

00:39:26.645 --> 00:39:27.205
<v Speaker 2>set it up.

00:39:28.400 --> 00:39:30.640
<v Speaker 0>Okay. So do I want Logstash format on

00:39:30.640 --> 00:39:31.440
<v Speaker 0>or off?

00:39:32.800 --> 00:39:34.720
<v Speaker 1>Let's do off. Let it on.

00:39:35.200 --> 00:39:35.760
<v Speaker 2>Off.

00:39:38.560 --> 00:39:40.480
<v Speaker 1>Alright. Let's let's turn it on then, and

00:39:40.480 --> 00:39:43.025
<v Speaker 1>then we'll change the prefix to Fluent Bit.

00:39:43.025 --> 00:39:45.425
<v Speaker 2>Yeah. Let's see what happens. I

00:39:45.745 --> 00:39:47.345
<v Speaker 2>never tried those, I think.

00:39:48.705 --> 00:39:49.345
<v Speaker 1>Yeah.

00:39:49.585 --> 00:39:52.225
<v Speaker 1>I think I I usually do mill logs

00:39:52.225 --> 00:39:54.065
<v Speaker 1>dash format and then have the index name

00:39:54.065 --> 00:39:56.810
<v Speaker 1>as, like, Fluent Bit so I can easily

00:39:57.050 --> 00:39:58.170
<v Speaker 1>identify it.

00:39:58.570 --> 00:40:00.970
<v Speaker 0>So I I'm I'm confused. So let's let's

00:40:00.970 --> 00:40:02.570
<v Speaker 0>break down this output format a little bit.

00:40:02.570 --> 00:40:04.650
<v Speaker 0>Right? We have two outputs here. There's one

00:40:04.650 --> 00:40:06.090
<v Speaker 0>that's matched on cube.star

00:40:06.090 --> 00:40:07.850
<v Speaker 0>and one matching on host.star.

00:40:07.850 --> 00:40:09.450
<v Speaker 0>Can you tell me what the difference between

00:40:09.450 --> 00:40:10.010
<v Speaker 0>these two is?

00:40:11.565 --> 00:40:13.485
<v Speaker 1>Yeah. Actually Yeah. So in

00:40:15.325 --> 00:40:17.485
<v Speaker 1>I think it might be easy to

00:40:17.805 --> 00:40:20.925
<v Speaker 1>visualize this. So if we actually have a

00:40:20.925 --> 00:40:22.045
<v Speaker 1>a visualizer

00:40:22.045 --> 00:40:24.765
<v Speaker 1>if you wanna try that out, config visualizer.

00:40:26.150 --> 00:40:27.910
<v Speaker 1>So if you copy copy

00:40:27.910 --> 00:40:29.510
<v Speaker 1>this file real quick

00:40:29.990 --> 00:40:32.070
<v Speaker 1>and then go to the URL

00:40:32.070 --> 00:40:40.710
<v Speaker 1>config,httpsconfig.calypdia,caly.

00:40:44.125 --> 00:40:58.380
<v Speaker 0>Sorry. Can you say that again? Yes. Calyptia.perfect,.com.

00:41:01.500 --> 00:41:03.820
<v Speaker 1>Yeah. Let me just go to that.

00:41:04.220 --> 00:41:06.860
<v Speaker 1>And then throw in that configuration.

00:41:11.775 --> 00:41:12.575
<v Speaker 1>Cool.

00:41:12.575 --> 00:41:13.295
<v Speaker 1>Okay.

00:41:14.015 --> 00:41:16.095
<v Speaker 1>So in this configuration,

00:41:17.055 --> 00:41:20.335
<v Speaker 1>we are taking the tail. We're we're reading

00:41:20.335 --> 00:41:21.375
<v Speaker 1>all of the

00:41:21.775 --> 00:41:22.974
<v Speaker 1>Kubernetes

00:41:22.974 --> 00:41:23.455
<v Speaker 1>logs.

00:41:24.120 --> 00:41:27.880
<v Speaker 1>We're enriching all those logs with Kubernetes

00:41:28.200 --> 00:41:30.760
<v Speaker 1>filter that we saw before, and then we

00:41:30.760 --> 00:41:32.840
<v Speaker 1>match that to Elasticsearch.

00:41:33.400 --> 00:41:35.640
<v Speaker 1>And then the bottom visualization

00:41:35.640 --> 00:41:37.880
<v Speaker 1>is we're actually also reading from system d

00:41:37.880 --> 00:41:40.724
<v Speaker 1>as an input and also sending that to

00:41:40.724 --> 00:41:41.765
<v Speaker 1>Elasticsearch,

00:41:42.085 --> 00:41:43.605
<v Speaker 1>but it has a different

00:41:43.765 --> 00:41:45.765
<v Speaker 1>match. So the way that Fluentd and Fluent

00:41:45.765 --> 00:41:47.525
<v Speaker 1>Bit work is there's a a nice tagging

00:41:47.525 --> 00:41:48.245
<v Speaker 1>system.

00:41:48.405 --> 00:41:50.964
<v Speaker 1>So you can kinda build separate pipelines

00:41:51.060 --> 00:41:52.740
<v Speaker 1>throughout the entire system.

00:41:53.620 --> 00:41:56.900
<v Speaker 1>And within this, we're we basically define two

00:41:56.900 --> 00:42:00.100
<v Speaker 1>pipelines. We have a pipeline of cube dot

00:42:00.100 --> 00:42:00.740
<v Speaker 1>star.

00:42:00.900 --> 00:42:03.460
<v Speaker 1>So it grabs all the Kubernetes logs, enriches

00:42:03.460 --> 00:42:05.385
<v Speaker 1>them, sends it to Elasticsearch,

00:42:05.385 --> 00:42:07.465
<v Speaker 1>and then we also have the system d.

00:42:07.625 --> 00:42:10.265
<v Speaker 1>So at any time, if we, say, want

00:42:10.265 --> 00:42:12.265
<v Speaker 1>to modify one of the pipelines,

00:42:12.265 --> 00:42:13.865
<v Speaker 1>we wanna output to a different

00:42:14.265 --> 00:42:16.265
<v Speaker 1>output, like, say, Loki or

00:42:16.750 --> 00:42:18.990
<v Speaker 1>Splunk or something like that, we could just

00:42:18.990 --> 00:42:22.510
<v Speaker 1>say output Splunk match cube dot star.

00:42:22.750 --> 00:42:24.270
<v Speaker 1>And so that visualization

00:42:24.270 --> 00:42:24.910
<v Speaker 1>would

00:42:25.230 --> 00:42:27.310
<v Speaker 1>when you would update so that you're taking

00:42:27.310 --> 00:42:29.310
<v Speaker 1>all your Kubernetes logs and you're sending it

00:42:29.310 --> 00:42:30.270
<v Speaker 1>to two destinations.

00:42:32.435 --> 00:42:33.795
<v Speaker 0>Alright. Nice.

00:42:34.195 --> 00:42:35.635
<v Speaker 0>This is a cool tool.

00:42:36.115 --> 00:42:37.235
<v Speaker 0>This isn't

00:42:37.795 --> 00:42:39.475
<v Speaker 0>who are Calypdia?

00:42:40.675 --> 00:42:42.515
<v Speaker 1>Yeah. So it's a it's a kind of

00:42:42.515 --> 00:42:44.595
<v Speaker 1>brand new brand new thing that that we're

00:42:44.595 --> 00:42:45.715
<v Speaker 1>part of that's

00:42:46.370 --> 00:42:49.170
<v Speaker 1>kinda behind Fluent Bit and and Fluentd. So

00:42:50.130 --> 00:42:52.690
<v Speaker 1>it's free to use. So just just released

00:42:52.690 --> 00:42:54.610
<v Speaker 1>it earlier this week. But,

00:42:55.330 --> 00:42:58.290
<v Speaker 1>yeah, it's it's nice for these configurations, right,

00:42:58.290 --> 00:42:58.690
<v Speaker 1>when you're

00:42:59.325 --> 00:43:01.805
<v Speaker 1>basically trying to figure out how to, you

00:43:01.805 --> 00:43:03.965
<v Speaker 1>know, go about them, how to use them,

00:43:04.365 --> 00:43:07.165
<v Speaker 1>and and whatnot. Yeah. That's a nice touch

00:43:07.165 --> 00:43:08.605
<v Speaker 0>as well on the right where when I

00:43:08.605 --> 00:43:10.285
<v Speaker 0>click on each of these nodes, it has

00:43:10.285 --> 00:43:11.085
<v Speaker 0>documentation

00:43:11.085 --> 00:43:12.525
<v Speaker 0>for each of them on the right. I

00:43:12.525 --> 00:43:14.580
<v Speaker 0>quite like that. Very cool. Yeah.

00:43:15.619 --> 00:43:18.420
<v Speaker 0>Okay. So based on that then

00:43:18.660 --> 00:43:19.859
<v Speaker 0>and I understand

00:43:19.940 --> 00:43:22.339
<v Speaker 0>this as our system d journal d logs,

00:43:22.339 --> 00:43:24.500
<v Speaker 0>this is the container log files from the

00:43:24.500 --> 00:43:25.380
<v Speaker 0>runtime.

00:43:26.339 --> 00:43:29.220
<v Speaker 0>Do we only need to prefix on this

00:43:28.545 --> 00:43:30.625
<v Speaker 0>the host logs or do we wanna log

00:43:30.625 --> 00:43:32.545
<v Speaker 0>prefix on this one too?

00:43:33.025 --> 00:43:35.665
<v Speaker 1>Let's do log prefix on both. Yeah.

00:43:36.065 --> 00:43:36.865
<v Speaker 0>Okay.

00:43:36.865 --> 00:43:38.785
<v Speaker 0>So we'll call this bet node

00:43:40.865 --> 00:43:41.985
<v Speaker 0>and bet cube.

00:43:42.065 --> 00:43:42.785
<v Speaker 0>Is that alright?

00:43:43.569 --> 00:43:44.290
<v Speaker 0>Yeah.

00:43:46.450 --> 00:43:48.210
<v Speaker 0>Okay. So let's

00:43:48.290 --> 00:43:50.050
<v Speaker 0>redeploy this over the top.

00:43:52.369 --> 00:43:53.650
<v Speaker 0>Oh, upgrade.

00:43:58.465 --> 00:44:00.545
<v Speaker 1>And I believe default is it'll do a

00:44:00.545 --> 00:44:03.345
<v Speaker 1>rolling, so it will do the same. Terminate

00:44:03.345 --> 00:44:03.985
<v Speaker 1>one.

00:44:04.865 --> 00:44:06.625
<v Speaker 1>And and one thing you might notice is

00:44:06.625 --> 00:44:08.225
<v Speaker 1>when you terminate Fluentd

00:44:08.225 --> 00:44:09.665
<v Speaker 1>and Fluent Bit is they

00:44:09.910 --> 00:44:12.870
<v Speaker 1>actually, I will wait to finish consuming all

00:44:12.870 --> 00:44:14.950
<v Speaker 1>the records they have in their buffer

00:44:15.030 --> 00:44:17.190
<v Speaker 1>so that way you don't lose any information

00:44:17.190 --> 00:44:17.830
<v Speaker 1>either.

00:44:18.230 --> 00:44:19.430
<v Speaker 0>Very cool. Yeah.

00:44:21.670 --> 00:44:23.990
<v Speaker 0>So let's go back over to

00:44:24.870 --> 00:44:25.270
<v Speaker 0>here,

00:44:26.365 --> 00:44:27.325
<v Speaker 0>I believe.

00:44:27.645 --> 00:44:29.805
<v Speaker 0>Oh, I've killed the port forward doesn't I?

00:44:31.005 --> 00:44:31.965
<v Speaker 0>There we go.

00:44:36.365 --> 00:44:37.405
<v Speaker 0>Give that a wee moment.

00:44:39.180 --> 00:44:40.619
<v Speaker 0>So now that we've got one or two

00:44:40.619 --> 00:44:42.460
<v Speaker 0>of those fluent bits rotated,

00:44:43.020 --> 00:44:45.100
<v Speaker 0>we should hopefully see

00:44:45.180 --> 00:44:47.099
<v Speaker 0>a couple of new entries on this page.

00:44:50.555 --> 00:44:53.515
<v Speaker 2>Yeah. One thing interesting thing in the configuration,

00:44:53.515 --> 00:44:55.515
<v Speaker 2>for example, I think that was the main

00:44:55.515 --> 00:44:56.875
<v Speaker 2>difference between

00:44:57.115 --> 00:44:57.675
<v Speaker 2>how

00:44:57.915 --> 00:45:00.475
<v Speaker 2>routing works in Fluentd and Fluent Bit.

00:45:00.715 --> 00:45:02.875
<v Speaker 2>Just when we wait for this. It's like,

00:45:02.875 --> 00:45:05.115
<v Speaker 2>you know, we have two destinations.

00:45:05.780 --> 00:45:08.260
<v Speaker 2>Right? In Fluentd, if you want to have

00:45:08.260 --> 00:45:11.140
<v Speaker 2>two destinations for the same records,

00:45:12.020 --> 00:45:13.380
<v Speaker 2>it it for example, if you have one

00:45:13.380 --> 00:45:14.980
<v Speaker 2>region in two destinations,

00:45:15.140 --> 00:45:16.900
<v Speaker 2>what you do in the output is to

00:45:16.900 --> 00:45:20.099
<v Speaker 2>copy the content for diff for two destinations.

00:45:21.144 --> 00:45:23.384
<v Speaker 2>The difference in the configuration of Fluent Bit

00:45:23.384 --> 00:45:26.505
<v Speaker 2>that you can say, I have this information

00:45:26.505 --> 00:45:29.144
<v Speaker 2>go to two places, but there's not a

00:45:29.144 --> 00:45:29.865
<v Speaker 2>copy.

00:45:29.944 --> 00:45:31.945
<v Speaker 2>So you don't copy the data internally.

00:45:32.345 --> 00:45:34.184
<v Speaker 2>So we just can optimize

00:45:34.184 --> 00:45:35.785
<v Speaker 2>on on memory and performance.

00:45:37.070 --> 00:45:39.710
<v Speaker 2>And we we found cases that say, hey.

00:45:39.710 --> 00:45:41.710
<v Speaker 2>I have 32 outputs.

00:45:41.790 --> 00:45:44.270
<v Speaker 2>Actually, for Fluent Bit. And they say, yeah.

00:45:44.270 --> 00:45:46.430
<v Speaker 2>We are hitting a limit. Right? And and

00:45:46.430 --> 00:45:49.150
<v Speaker 2>that's really interesting. So why somebody would have

00:45:49.150 --> 00:45:50.350
<v Speaker 2>32 outputs?

00:45:51.105 --> 00:45:53.265
<v Speaker 2>Right? So 32 destinations.

00:45:53.585 --> 00:45:55.665
<v Speaker 2>And, actually, what we're doing is, like, to

00:45:55.665 --> 00:45:58.465
<v Speaker 2>accommodate the the same Elasticsearch

00:45:58.465 --> 00:46:00.945
<v Speaker 2>cluster with different setups.

00:46:01.665 --> 00:46:03.825
<v Speaker 2>Now that kind of things will be a

00:46:03.825 --> 00:46:06.145
<v Speaker 2>bit more complex in Fluentd for that special

00:46:06.145 --> 00:46:08.290
<v Speaker 2>case because you will need to copy the

00:46:08.290 --> 00:46:09.250
<v Speaker 2>same data

00:46:09.410 --> 00:46:10.690
<v Speaker 2>to 32

00:46:10.690 --> 00:46:13.010
<v Speaker 2>places. Right? And here, we just can have

00:46:13.010 --> 00:46:14.050
<v Speaker 2>one reference.

00:46:15.010 --> 00:46:16.930
<v Speaker 2>I think that you can start with now

00:46:16.930 --> 00:46:19.810
<v Speaker 2>with the index pattern name with Bit Cube.

00:46:19.890 --> 00:46:20.530
<v Speaker 2>Yes.

00:46:22.875 --> 00:46:24.075
<v Speaker 2>There's the data.

00:46:25.515 --> 00:46:26.875
<v Speaker 0>That's interesting.

00:46:28.075 --> 00:46:30.555
<v Speaker 1>Yeah. I think it's, like, combined a

00:46:31.835 --> 00:46:32.555
<v Speaker 1>log

00:46:32.795 --> 00:46:33.835
<v Speaker 1>logstash

00:46:33.835 --> 00:46:36.920
<v Speaker 1>time stamp with the with maybe potential other

00:46:36.920 --> 00:46:39.000
<v Speaker 1>timestamps that are in the log. I'd use

00:46:39.000 --> 00:46:41.319
<v Speaker 1>the at timestamp to be safe. Yeah. You

00:46:41.319 --> 00:46:44.039
<v Speaker 2>said that. That that's a better one. Okay.

00:46:44.039 --> 00:46:45.640
<v Speaker 0>And do we want to set up the

00:46:45.640 --> 00:46:47.720
<v Speaker 0>the best host, or are just interested in

00:46:47.720 --> 00:46:48.839
<v Speaker 0>the Kubernetes one for now?

00:46:49.494 --> 00:46:52.455
<v Speaker 1>Let's do Bit host too. Yeah. Okay. K.

00:47:00.375 --> 00:47:02.135
<v Speaker 0>Oh, Bit Node. My bad.

00:47:02.375 --> 00:47:03.494
<v Speaker 1>Oh, yeah. Bit Node. Sorry.

00:47:08.740 --> 00:47:10.420
<v Speaker 0>Alright. Discover.

00:47:13.060 --> 00:47:16.420
<v Speaker 0>So now we have Fluentd collecting the logs,

00:47:16.420 --> 00:47:17.619
<v Speaker 0>Fluent back collecting the logs,

00:47:18.595 --> 00:47:20.595
<v Speaker 0>and it's now all gonna show up here,

00:47:20.755 --> 00:47:21.555
<v Speaker 0>I think.

00:47:24.115 --> 00:47:26.035
<v Speaker 0>So do we just change this to

00:47:26.275 --> 00:47:27.395
<v Speaker 0>the cube?

00:47:28.435 --> 00:47:29.235
<v Speaker 1>Exactly.

00:47:30.115 --> 00:47:32.035
<v Speaker 1>And then we cross our fingers

00:47:32.355 --> 00:47:34.035
<v Speaker 1>and boom. Yeah. There it is.

00:47:35.049 --> 00:47:35.690
<v Speaker 0>So

00:47:35.930 --> 00:47:36.730
<v Speaker 0>nothing

00:47:36.809 --> 00:47:39.450
<v Speaker 0>other than obviously using a completely different binary,

00:47:39.450 --> 00:47:41.130
<v Speaker 0>written in a completely different language

00:47:41.369 --> 00:47:43.130
<v Speaker 0>with a different deployment mechanism.

00:47:43.130 --> 00:47:45.049
<v Speaker 0>This is still very similar. Right? This is

00:47:45.049 --> 00:47:46.410
<v Speaker 0>still enriching

00:47:46.410 --> 00:47:47.930
<v Speaker 0>all of my log data the same way

00:47:47.930 --> 00:47:50.545
<v Speaker 0>that Fluentd was. Exactly.

00:47:50.545 --> 00:47:51.905
<v Speaker 1>Exactly. Okay.

00:47:54.065 --> 00:47:56.305
<v Speaker 0>So why don't we try and filter this

00:47:56.305 --> 00:47:57.185
<v Speaker 0>down then?

00:47:57.425 --> 00:47:58.705
<v Speaker 0>What's what's the first one?

00:48:00.305 --> 00:48:03.025
<v Speaker 1>So we gotta decide a bit what we

00:48:03.025 --> 00:48:04.545
<v Speaker 1>want to filter out

00:48:04.960 --> 00:48:05.760
<v Speaker 1>is

00:48:05.920 --> 00:48:07.200
<v Speaker 1>but if we take a look at the

00:48:07.200 --> 00:48:07.920
<v Speaker 1>log,

00:48:09.040 --> 00:48:09.840
<v Speaker 1>there's

00:48:09.840 --> 00:48:12.000
<v Speaker 1>a couple of fields that seem,

00:48:12.240 --> 00:48:14.240
<v Speaker 1>you know, may maybe a little voluminous that

00:48:14.240 --> 00:48:15.200
<v Speaker 1>we don't need.

00:48:16.080 --> 00:48:17.760
<v Speaker 1>So if we look at, say,

00:48:18.515 --> 00:48:20.915
<v Speaker 1>you know, the container hash maybe,

00:48:22.595 --> 00:48:24.675
<v Speaker 1>that might be something we just remove.

00:48:25.715 --> 00:48:27.235
<v Speaker 1>Or we could even say,

00:48:27.795 --> 00:48:30.835
<v Speaker 1>okay. Let's filter that only send the messages

00:48:30.835 --> 00:48:33.560
<v Speaker 1>that are gets, not post. You know, I

00:48:33.560 --> 00:48:35.960
<v Speaker 1>don't I don't care about my post messages.

00:48:36.280 --> 00:48:37.320
<v Speaker 1>I only wanna

00:48:37.880 --> 00:48:39.400
<v Speaker 1>consume my get

00:48:39.720 --> 00:48:42.600
<v Speaker 1>images or sorry. My get messages.

00:48:43.000 --> 00:48:45.480
<v Speaker 0>So that's messages that have this tag of

00:48:45.480 --> 00:48:46.760
<v Speaker 0>request method post.

00:48:47.135 --> 00:48:48.255
<v Speaker 1>Exactly.

00:48:48.255 --> 00:48:50.095
<v Speaker 1>Exactly. So we could we could use that

00:48:50.095 --> 00:48:51.055
<v Speaker 1>as a filter.

00:48:52.415 --> 00:48:53.775
<v Speaker 0>Okay. So does that mean I have to

00:48:53.775 --> 00:48:55.215
<v Speaker 0>modify my home config?

00:48:55.855 --> 00:48:58.015
<v Speaker 1>Correct. Yep. So you'll modify

00:48:58.015 --> 00:48:58.655
<v Speaker 1>this.

00:48:58.815 --> 00:49:01.855
<v Speaker 1>So the the way that Fluent Bit configuration

00:49:01.855 --> 00:49:03.869
<v Speaker 1>works is you have your inputs, you have

00:49:03.869 --> 00:49:05.790
<v Speaker 1>your filters, and then your outputs.

00:49:06.349 --> 00:49:08.510
<v Speaker 1>And then if you're also, like, ingesting logs,

00:49:08.510 --> 00:49:10.030
<v Speaker 1>you have parsers.

00:49:10.109 --> 00:49:12.589
<v Speaker 1>So what we'll do here is we will

00:49:12.589 --> 00:49:15.869
<v Speaker 1>actually just create another filter

00:49:15.285 --> 00:49:17.365
<v Speaker 1>underneath this Kubernetes filter.

00:49:18.885 --> 00:49:21.605
<v Speaker 1>So, yeah, same format filter. Perfect.

00:49:22.405 --> 00:49:25.845
<v Speaker 1>We're going to use the GREP

00:49:25.845 --> 00:49:29.920
<v Speaker 1>filter. Great. And so the GREP filter basically

00:49:30.160 --> 00:49:31.040
<v Speaker 1>will

00:49:31.120 --> 00:49:32.160
<v Speaker 1>take in

00:49:32.320 --> 00:49:33.680
<v Speaker 1>all of the messages,

00:49:34.480 --> 00:49:36.320
<v Speaker 1>and it will reduce it down only to

00:49:36.320 --> 00:49:38.960
<v Speaker 1>the ones that, as GREP does, match a

00:49:38.960 --> 00:49:39.840
<v Speaker 1>particular regex.

00:49:40.345 --> 00:49:42.185
<v Speaker 1>Now I am gonna be a little

00:49:42.665 --> 00:49:45.465
<v Speaker 1>old and and not remember the exact prep

00:49:45.465 --> 00:49:48.505
<v Speaker 1>config, so might need to go to the

00:49:48.505 --> 00:49:49.865
<v Speaker 1>prep docs.

00:49:51.945 --> 00:49:54.010
<v Speaker 0>Alright. So let's see.

00:49:54.410 --> 00:49:55.450
<v Speaker 0>Configuring

00:49:55.930 --> 00:49:58.490
<v Speaker 0>let's just search. Right? Pipeline in in the

00:49:58.490 --> 00:49:59.210
<v Speaker 2>pipeline?

00:49:59.450 --> 00:50:02.890
<v Speaker 2>Oh, you can do yeah. Type Grip.

00:50:02.890 --> 00:50:03.609
<v Speaker 2>Type

00:50:04.410 --> 00:50:07.055
<v Speaker 2>Grip. You can type grip in the search.

00:50:07.855 --> 00:50:10.335
<v Speaker 0>Ah, there we go. Yeah. A bit meta.

00:50:10.335 --> 00:50:11.695
<v Speaker 1>Right? You're grepping.

00:50:11.775 --> 00:50:13.295
<v Speaker 1>You're searching for grip.

00:50:14.655 --> 00:50:17.375
<v Speaker 2>One feature of the grip filter is that

00:50:17.375 --> 00:50:20.175
<v Speaker 2>you can match specific patterns or you can

00:50:20.175 --> 00:50:20.655
<v Speaker 2>exclude

00:50:21.590 --> 00:50:22.630
<v Speaker 2>content from

00:50:23.590 --> 00:50:25.190
<v Speaker 2>that matches a pattern.

00:50:25.830 --> 00:50:27.830
<v Speaker 2>Right? So you can make the you can

00:50:27.830 --> 00:50:29.110
<v Speaker 2>work from two ways.

00:50:30.550 --> 00:50:32.710
<v Speaker 2>Yeah. Go well with that with that example.

00:50:33.965 --> 00:50:34.925
<v Speaker 2>That's fine.

00:50:41.325 --> 00:50:43.805
<v Speaker 0>Perfect. Yeah. So match start means it's gonna

00:50:43.805 --> 00:50:46.045
<v Speaker 1>look at every single incoming message

00:50:46.790 --> 00:50:49.030
<v Speaker 1>that's coming in. And then what we're going

00:50:49.030 --> 00:50:51.430
<v Speaker 1>to do is the the way that this

00:50:51.430 --> 00:50:53.350
<v Speaker 1>is set up is you have regex,

00:50:53.510 --> 00:50:55.510
<v Speaker 1>the key name of the log,

00:50:55.750 --> 00:50:57.830
<v Speaker 1>and then the content or the regex regular

00:50:57.830 --> 00:50:58.310
<v Speaker 1>expression.

00:50:58.755 --> 00:51:00.595
<v Speaker 1>So in this key name, we're going to

00:51:00.595 --> 00:51:01.635
<v Speaker 1>use that

00:51:02.275 --> 00:51:03.315
<v Speaker 1>yeah. Exactly.

00:51:03.474 --> 00:51:06.194
<v Speaker 1>And then here, we'll just use regex of

00:51:06.194 --> 00:51:07.474
<v Speaker 1>post. Perfect.

00:51:07.875 --> 00:51:09.315
<v Speaker 2>Note that the key name,

00:51:09.555 --> 00:51:11.315
<v Speaker 2>it it works in a in a different

00:51:11.315 --> 00:51:14.000
<v Speaker 2>way. So in Fluent Bit, there's a concept

00:51:14.000 --> 00:51:15.840
<v Speaker 2>of record accessor.

00:51:16.000 --> 00:51:17.760
<v Speaker 2>Because if you look at, for example, how

00:51:17.760 --> 00:51:20.400
<v Speaker 2>the payloads of Kubernetes are in the logs,

00:51:20.400 --> 00:51:22.560
<v Speaker 2>right, they have many nested fields.

00:51:22.720 --> 00:51:25.200
<v Speaker 2>And sometimes you want to match a specific

00:51:25.200 --> 00:51:25.760
<v Speaker 2>pattern

00:51:26.175 --> 00:51:28.095
<v Speaker 2>that is not in the first label.

00:51:28.415 --> 00:51:30.655
<v Speaker 2>So the way that it works is like,

00:51:30.655 --> 00:51:32.415
<v Speaker 2>for example, go to the configuration,

00:51:35.855 --> 00:51:37.935
<v Speaker 2>put the US dollar sign

00:51:38.255 --> 00:51:39.135
<v Speaker 2>at the beginning.

00:51:41.690 --> 00:51:44.410
<v Speaker 2>Okay? And then so that means I'm going

00:51:44.410 --> 00:51:45.450
<v Speaker 2>to access

00:51:45.610 --> 00:51:47.610
<v Speaker 2>the content of the

00:51:48.170 --> 00:51:51.450
<v Speaker 2>rec key. Right? And then instead of that

00:51:51.450 --> 00:51:52.170
<v Speaker 2>dot

00:51:54.545 --> 00:51:56.705
<v Speaker 2>Yeah. Or unless how how is the key

00:51:56.785 --> 00:51:59.505
<v Speaker 2>what is the key name that was created?

00:52:00.385 --> 00:52:03.505
<v Speaker 2>Is request an an asset field called method,

00:52:03.505 --> 00:52:06.545
<v Speaker 2>or it was request dot method? Request dot

00:52:06.545 --> 00:52:07.985
<v Speaker 0>method. Request dot method.

00:52:09.780 --> 00:52:12.260
<v Speaker 2>Oh, can you show the JSON file? If

00:52:12.260 --> 00:52:14.580
<v Speaker 2>you could scroll up, there's the JSON version.

00:52:14.980 --> 00:52:17.140
<v Speaker 2>That's really important to to clarify.

00:52:17.700 --> 00:52:18.340
<v Speaker 2>Yeah.

00:52:21.060 --> 00:52:22.020
<v Speaker 2>Scroll down.

00:52:22.340 --> 00:52:24.945
<v Speaker 2>Oh, okay. Okay. Method

00:52:25.025 --> 00:52:25.665
<v Speaker 2>is

00:52:26.224 --> 00:52:27.744
<v Speaker 2>a nested field

00:52:28.144 --> 00:52:31.184
<v Speaker 2>of request. Right? It's not just one label.

00:52:31.184 --> 00:52:32.464
<v Speaker 2>You got two labels.

00:52:34.625 --> 00:52:35.265
<v Speaker 0>Okay.

00:52:36.305 --> 00:52:37.105
<v Speaker 2>Okay.

00:52:39.400 --> 00:52:41.240
<v Speaker 2>Okay. Go back to the configuration.

00:52:43.160 --> 00:52:45.320
<v Speaker 2>Request squares a brace.

00:52:45.720 --> 00:52:48.040
<v Speaker 2>Remove the dot and use square brace, single

00:52:48.040 --> 00:52:48.760
<v Speaker 2>quote

00:52:50.600 --> 00:52:54.095
<v Speaker 2>for method. Yeah. That's it. And if you

00:52:54.095 --> 00:52:56.575
<v Speaker 2>have more nested skills, you can add more

00:52:56.575 --> 00:52:59.455
<v Speaker 2>square braces to access the sub content.

00:53:00.015 --> 00:53:02.415
<v Speaker 1>So so to to give a a bit

00:53:02.415 --> 00:53:04.415
<v Speaker 1>of a a summary here. So if in

00:53:04.415 --> 00:53:05.215
<v Speaker 1>Kibana,

00:53:05.215 --> 00:53:07.055
<v Speaker 1>if we go back to viewing Kibana,

00:53:07.779 --> 00:53:10.019
<v Speaker 1>the record that we actually get is a

00:53:10.019 --> 00:53:12.180
<v Speaker 1>bunch of nested JSON. The nice thing is

00:53:12.180 --> 00:53:13.940
<v Speaker 1>when we go to actually, like, view the

00:53:13.940 --> 00:53:16.579
<v Speaker 1>column and table side, Kibana actually will say,

00:53:16.579 --> 00:53:18.980
<v Speaker 1>hey. Let's take those nested fields and shorten

00:53:18.980 --> 00:53:20.980
<v Speaker 1>it so it shows request dot method.

00:53:21.684 --> 00:53:24.165
<v Speaker 1>So when we are going to access

00:53:24.405 --> 00:53:25.845
<v Speaker 1>the record,

00:53:25.845 --> 00:53:28.085
<v Speaker 1>we're not accessing the flattened

00:53:28.164 --> 00:53:29.684
<v Speaker 1>request

00:53:29.684 --> 00:53:31.444
<v Speaker 1>dot method. We actually have to use the

00:53:31.444 --> 00:53:34.569
<v Speaker 1>Fluent Bit configuration to say, hey. You need

00:53:34.569 --> 00:53:37.210
<v Speaker 1>to access this this record and the sub

00:53:37.210 --> 00:53:38.810
<v Speaker 1>properties of that record

00:53:39.690 --> 00:53:41.930
<v Speaker 1>instead of just rec dot method.

00:53:42.170 --> 00:53:44.650
<v Speaker 1>So if that makes I hope that makes

00:53:44.650 --> 00:53:47.049
<v Speaker 1>sense. Yeah. Yeah. I think I've got that.

00:53:47.049 --> 00:53:47.610
<v Speaker 1>Yeah.

00:53:48.010 --> 00:53:49.049
<v Speaker 1>Awesome. Awesome.

00:53:50.025 --> 00:53:52.424
<v Speaker 0>And this syntax is is is quite familiar.

00:53:52.424 --> 00:53:53.785
<v Speaker 0>So, you know Right.

00:53:55.224 --> 00:53:57.464
<v Speaker 0>Yeah. I'm just gonna apply this and let's

00:53:57.464 --> 00:53:59.385
<v Speaker 0>see what happens. Let's see. Yeah.

00:54:00.105 --> 00:54:02.184
<v Speaker 1>We better not get any gets in the

00:54:02.184 --> 00:54:02.505
<v Speaker 1>method.

00:54:04.190 --> 00:54:06.190
<v Speaker 1>Yeah. I guess one thing is Sorry. I

00:54:06.190 --> 00:54:07.230
<v Speaker 0>didn't go. Oh,

00:54:08.190 --> 00:54:10.110
<v Speaker 1>I was just gonna say I as it

00:54:10.110 --> 00:54:12.830
<v Speaker 1>rolls out, it will probably apply individually.

00:54:12.830 --> 00:54:14.430
<v Speaker 1>So we might see some,

00:54:14.910 --> 00:54:16.990
<v Speaker 1>you know, like, other ones that are capturing

00:54:16.990 --> 00:54:17.950
<v Speaker 1>all the logs still.

00:54:18.675 --> 00:54:20.995
<v Speaker 1>But hopefully, you know, within once the year

00:54:20.995 --> 00:54:22.835
<v Speaker 1>all rolled out, we should only see posts.

00:54:23.155 --> 00:54:24.515
<v Speaker 0>Okay. And

00:54:25.475 --> 00:54:27.635
<v Speaker 0>let's assume I wanted to filter something else.

00:54:27.635 --> 00:54:29.795
<v Speaker 0>Say, maybe I don't actually want anything from

00:54:29.795 --> 00:54:31.955
<v Speaker 0>the cube system namespace.

00:54:32.035 --> 00:54:32.435
<v Speaker 0>Now

00:54:33.210 --> 00:54:35.210
<v Speaker 0>if I just add a new filter, do

00:54:35.210 --> 00:54:36.810
<v Speaker 0>these all work independently?

00:54:36.890 --> 00:54:37.850
<v Speaker 0>Are they all,

00:54:38.410 --> 00:54:39.930
<v Speaker 0>you know, like, Andy together?

00:54:40.010 --> 00:54:41.530
<v Speaker 0>How do the filters work when there's more

00:54:41.530 --> 00:54:42.250
<v Speaker 0>than one?

00:54:43.130 --> 00:54:45.849
<v Speaker 1>So it's all top to bottom and all

00:54:45.849 --> 00:54:48.965
<v Speaker 1>ended together. And so because you're using a

00:54:48.965 --> 00:54:52.405
<v Speaker 1>match star, actually, both system d and your

00:54:52.405 --> 00:54:54.965
<v Speaker 1>tail will run through this filter

00:54:55.285 --> 00:54:58.325
<v Speaker 1>while everything else will only run through like,

00:54:58.325 --> 00:55:00.645
<v Speaker 1>your Kubernetes data only runs through the Kubernetes

00:55:00.645 --> 00:55:01.045
<v Speaker 1>filter.

00:55:01.710 --> 00:55:04.190
<v Speaker 1>So this we if we wanna be very

00:55:04.190 --> 00:55:06.190
<v Speaker 1>specific that it only runs on the Kubernetes

00:55:06.190 --> 00:55:08.430
<v Speaker 1>side, we'll we can change the match to

00:55:08.430 --> 00:55:10.750
<v Speaker 1>cube dot star and kinda keep it as

00:55:10.750 --> 00:55:12.110
<v Speaker 1>part of that one pipeline.

00:55:12.190 --> 00:55:14.270
<v Speaker 1>Or if we wanna have everything run through

00:55:14.270 --> 00:55:15.915
<v Speaker 1>this filter, we can we can do that

00:55:15.915 --> 00:55:17.515
<v Speaker 1>with the match star as well.

00:55:18.715 --> 00:55:21.275
<v Speaker 0>Okay. You can try to visualize that configuration

00:55:21.275 --> 00:55:22.795
<v Speaker 2>to explain the concept.

00:55:23.675 --> 00:55:25.595
<v Speaker 1>Yeah. Yeah. So if you wanna again.

00:55:31.240 --> 00:55:31.960
<v Speaker 0>Okay.

00:55:32.280 --> 00:55:33.000
<v Speaker 0>So

00:55:34.040 --> 00:55:36.360
<v Speaker 0>because You can copy everything. Yeah. It will

00:55:36.360 --> 00:55:38.119
<v Speaker 2>strip down everything that doesn't

00:55:38.440 --> 00:55:39.400
<v Speaker 2>it's not necessary.

00:55:40.015 --> 00:55:43.215
<v Speaker 0>Alright. Okay. Alright. Let's go here. I was

00:55:43.215 --> 00:55:44.975
<v Speaker 0>just worried about those nested

00:55:44.975 --> 00:55:46.255
<v Speaker 0>YAML keys,

00:55:46.655 --> 00:55:48.015
<v Speaker 0>but let's see what happens.

00:55:51.455 --> 00:55:54.990
<v Speaker 1>If you click, I gotta click back. Yeah.

00:55:55.710 --> 00:55:58.510
<v Speaker 1>And then there, you can delete, paste. Let's

00:55:58.510 --> 00:55:59.790
<v Speaker 1>see. There. Perfect.

00:56:00.030 --> 00:56:03.070
<v Speaker 1>Okay. So this one is a little different.

00:56:03.070 --> 00:56:04.270
<v Speaker 1>Right? So everything

00:56:04.350 --> 00:56:07.470
<v Speaker 1>that's coming from the tail goes into Kubernetes.

00:56:08.105 --> 00:56:09.385
<v Speaker 1>But then from

00:56:09.704 --> 00:56:10.825
<v Speaker 1>system d,

00:56:10.984 --> 00:56:12.585
<v Speaker 1>we now have a new filter that's part

00:56:12.585 --> 00:56:13.545
<v Speaker 1>of the pipeline,

00:56:14.025 --> 00:56:15.545
<v Speaker 1>which is the scrap filter.

00:56:15.944 --> 00:56:18.265
<v Speaker 1>And so all of those logs will also

00:56:18.265 --> 00:56:20.585
<v Speaker 1>be matched and say, okay. If I find

00:56:20.585 --> 00:56:21.865
<v Speaker 1>in the request

00:56:22.184 --> 00:56:22.984
<v Speaker 1>dot method,

00:56:23.760 --> 00:56:25.760
<v Speaker 1>there is a post. I will only filter

00:56:25.760 --> 00:56:26.800
<v Speaker 1>for those results.

00:56:27.200 --> 00:56:30.480
<v Speaker 1>The the likelihood here is, though, that the

00:56:30.480 --> 00:56:32.480
<v Speaker 1>system d probably doesn't even have request dot

00:56:32.480 --> 00:56:33.120
<v Speaker 1>method,

00:56:33.360 --> 00:56:34.880
<v Speaker 1>so it might not be able to capture

00:56:34.880 --> 00:56:36.800
<v Speaker 1>or include any of those logs.

00:56:37.520 --> 00:56:37.760
<v Speaker 1>So

00:56:38.525 --> 00:56:40.685
<v Speaker 1>to to kinda fix it, we could make

00:56:40.685 --> 00:56:44.045
<v Speaker 1>it so that GREP only applies to Kubernetes,

00:56:44.685 --> 00:56:46.365
<v Speaker 1>or we could even put, you know, like,

00:56:46.365 --> 00:56:48.365
<v Speaker 1>hey. That's fine. We're only gonna look for

00:56:48.365 --> 00:56:49.885
<v Speaker 1>the GREPs that do match this.

00:56:52.790 --> 00:56:53.510
<v Speaker 0>Okay.

00:56:54.310 --> 00:56:55.670
<v Speaker 0>Let me try something.

00:56:57.030 --> 00:56:59.670
<v Speaker 1>Yeah. Gonna copy and paste this.

00:57:03.375 --> 00:57:05.695
<v Speaker 0>Just call this random. I just wanna visualize

00:57:05.695 --> 00:57:07.855
<v Speaker 0>it and make sure I understand that correctly.

00:57:08.415 --> 00:57:09.135
<v Speaker 1>Mhmm.

00:57:09.855 --> 00:57:10.575
<v Speaker 0>So

00:57:10.895 --> 00:57:12.335
<v Speaker 0>copy from here.

00:57:17.455 --> 00:57:19.670
<v Speaker 0>Yeah. So kinda got this

00:57:20.069 --> 00:57:20.869
<v Speaker 0>workflow,

00:57:20.869 --> 00:57:23.349
<v Speaker 0>this chain of groups are kind of awesome.

00:57:23.589 --> 00:57:24.630
<v Speaker 0>Perfect. Yep.

00:57:25.430 --> 00:57:27.349
<v Speaker 0>So now that we've given that a few

00:57:27.349 --> 00:57:29.750
<v Speaker 0>minutes, if we come back to here

00:57:31.829 --> 00:57:33.029
<v Speaker 0>and

00:57:35.105 --> 00:57:36.545
<v Speaker 0>I guess just refresh.

00:57:37.665 --> 00:57:39.425
<v Speaker 1>Do do we apply it? Do we apply

00:57:39.425 --> 00:57:40.385
<v Speaker 1>the new config?

00:57:41.744 --> 00:57:43.745
<v Speaker 0>We did. Right? Yeah. We did.

00:57:44.225 --> 00:57:46.310
<v Speaker 1>Oh, okay. Cool. Then we just gotta port

00:57:46.310 --> 00:57:48.390
<v Speaker 1>forward Kibana then. Oh, yes.

00:57:51.750 --> 00:57:52.790
<v Speaker 0>Let's refresh.

00:57:54.390 --> 00:57:56.310
<v Speaker 0>I'll just set that. So we applied that

00:57:56.310 --> 00:57:58.470
<v Speaker 0>roughly 25. Assume it took a few minutes

00:57:58.470 --> 00:58:00.550
<v Speaker 0>then. Let's just drop this down to see.

00:58:03.825 --> 00:58:05.425
<v Speaker 0>The last two minutes.

00:58:06.225 --> 00:58:06.945
<v Speaker 0>Update.

00:58:07.585 --> 00:58:09.185
<v Speaker 0>And we shouldn't see any

00:58:10.145 --> 00:58:12.705
<v Speaker 0>in theory, shouldn't see any request dot posts.

00:58:13.905 --> 00:58:15.745
<v Speaker 1>Only we should only see request dot post.

00:58:15.780 --> 00:58:17.620
<v Speaker 1>Yeah. Oh, we should only see request dot

00:58:17.620 --> 00:58:19.860
<v Speaker 0>post. Alright. Okay. Oh, well. Yeah.

00:58:20.660 --> 00:58:23.220
<v Speaker 0>There's one there. So Because because we have

00:58:23.220 --> 00:58:25.860
<v Speaker 2>a rejects rule, but you can regret if

00:58:25.860 --> 00:58:28.740
<v Speaker 2>you put instead of rejects, you put exclude,

00:58:29.220 --> 00:58:30.740
<v Speaker 2>you will get the opposite. Right?

00:58:31.755 --> 00:58:32.395
<v Speaker 1>Yeah.

00:58:32.635 --> 00:58:34.795
<v Speaker 2>Just just get they get the request.

00:58:35.115 --> 00:58:37.994
<v Speaker 0>Yeah. So post post post post.

00:58:38.315 --> 00:58:39.835
<v Speaker 0>I won't go through them all. Let's let's

00:58:39.835 --> 00:58:41.755
<v Speaker 0>trust it. I'm assuming they're all false.

00:58:42.474 --> 00:58:43.434
<v Speaker 1>Another

00:58:43.434 --> 00:58:45.595
<v Speaker 1>kinda way we can make sure it worked

00:58:45.595 --> 00:58:47.115
<v Speaker 1>is if you look at the data volume,

00:58:47.490 --> 00:58:49.570
<v Speaker 1>we can see that's kind of reduced a

00:58:49.570 --> 00:58:51.810
<v Speaker 1>decent amount too. So instead of, like, 20

00:58:51.810 --> 00:58:54.450
<v Speaker 1>records, we're now seeing, like, two or three.

00:58:54.610 --> 00:58:57.730
<v Speaker 1>So that's a it's not the most accurate

00:58:57.730 --> 00:59:00.610
<v Speaker 1>way, of course, but it's another way to

00:59:00.610 --> 00:59:00.850
<v Speaker 1>check.

00:59:02.825 --> 00:59:05.705
<v Speaker 0>Excellent. That was relatively painless.

00:59:08.105 --> 00:59:08.825
<v Speaker 2>Great.

00:59:09.065 --> 00:59:10.425
<v Speaker 0>Where should we add next?

00:59:12.184 --> 00:59:14.665
<v Speaker 1>Next, let's do some stream processing.

00:59:15.545 --> 00:59:17.500
<v Speaker 0>I mean, this sounds quite scary, but I'll

00:59:17.579 --> 00:59:19.980
<v Speaker 0>let's do it. Yeah. Let's make a a

00:59:19.980 --> 00:59:22.859
<v Speaker 2>small intro before Anurag jumps into the demo.

00:59:23.260 --> 00:59:25.500
<v Speaker 2>The thing is that we always think that

00:59:25.500 --> 00:59:28.460
<v Speaker 2>a Fluentd as a separate of Fluentd

00:59:28.695 --> 00:59:31.975
<v Speaker 2>needs to go beyond what is loading. Right?

00:59:31.975 --> 00:59:34.295
<v Speaker 2>Is I I would say that is yeah.

00:59:34.295 --> 00:59:35.735
<v Speaker 2>It will take you two, like, three years

00:59:35.735 --> 00:59:37.735
<v Speaker 2>to write an agent that just ship logs

00:59:37.735 --> 00:59:39.255
<v Speaker 2>from one place to the other.

00:59:39.735 --> 00:59:42.200
<v Speaker 2>But I think that when people start implementing

00:59:42.200 --> 00:59:43.160
<v Speaker 2>filters

00:59:43.240 --> 00:59:45.320
<v Speaker 2>or trying to do enrichment,

00:59:45.720 --> 00:59:47.480
<v Speaker 2>right, at the end of the day, they

00:59:47.480 --> 00:59:49.160
<v Speaker 2>are trying to do some processing of the

00:59:49.160 --> 00:59:51.720
<v Speaker 2>data. Actually, what you do, right, applies some

00:59:51.720 --> 00:59:53.079
<v Speaker 2>filters that is data processing.

00:59:54.065 --> 00:59:56.785
<v Speaker 2>But we wanted to go beyond that and

00:59:56.785 --> 00:59:59.425
<v Speaker 2>say, hey. Why we cannot sense that all

00:59:59.425 --> 01:00:01.665
<v Speaker 2>the data is flowing through Fluent Bit?

01:00:01.985 --> 01:00:05.265
<v Speaker 2>Why we cannot implement a stream an official

01:00:05.265 --> 01:00:06.705
<v Speaker 2>stream processing agent?

01:00:07.859 --> 01:00:08.500
<v Speaker 2>Like,

01:00:08.819 --> 01:00:11.299
<v Speaker 2>the data is flowing. Yeah. What about if

01:00:11.299 --> 01:00:14.099
<v Speaker 2>we provide the ability to query the data

01:00:14.099 --> 01:00:16.339
<v Speaker 2>in memory while it's flowing

01:00:16.500 --> 01:00:18.580
<v Speaker 2>using SQL language?

01:00:18.740 --> 01:00:20.260
<v Speaker 2>But without database,

01:00:20.675 --> 01:00:22.035
<v Speaker 2>without tables,

01:00:22.195 --> 01:00:23.635
<v Speaker 2>without indexing.

01:00:24.355 --> 01:00:27.075
<v Speaker 2>Right? This is just very Fluent Bit, no

01:00:27.075 --> 01:00:28.995
<v Speaker 2>database or anything extra.

01:00:29.234 --> 01:00:31.715
<v Speaker 2>And we found very interesting

01:00:31.715 --> 01:00:32.355
<v Speaker 2>use cases.

01:00:33.420 --> 01:00:35.980
<v Speaker 2>Some of them were like some people said,

01:00:35.980 --> 01:00:38.220
<v Speaker 2>yeah. I don't have a filter to

01:00:38.700 --> 01:00:41.180
<v Speaker 2>to do a, b, and c. But using

01:00:41.180 --> 01:00:42.540
<v Speaker 2>the stream processor,

01:00:42.859 --> 01:00:45.260
<v Speaker 2>running a SQL query, I was able to

01:00:45.260 --> 01:00:46.859
<v Speaker 2>recompose my records,

01:00:47.195 --> 01:00:49.435
<v Speaker 2>create a new stream of data,

01:00:49.755 --> 01:00:51.915
<v Speaker 2>tag that data, and send those results to

01:00:51.915 --> 01:00:53.115
<v Speaker 2>a different endpoint.

01:00:53.515 --> 01:00:55.195
<v Speaker 2>And then people say, hey. We can do

01:00:55.195 --> 01:00:58.235
<v Speaker 2>alerting. We can do machine learning. We cannot

01:00:58.475 --> 01:01:00.075
<v Speaker 2>we can do many kind of things.

01:01:00.780 --> 01:01:04.300
<v Speaker 2>And in general so we extended the pipeline

01:01:04.300 --> 01:01:05.420
<v Speaker 2>a little bit.

01:01:05.580 --> 01:01:07.500
<v Speaker 2>So we have input filters,

01:01:07.500 --> 01:01:10.700
<v Speaker 2>output, and now we have input filters,

01:01:11.340 --> 01:01:12.860
<v Speaker 2>optional stream processing,

01:01:13.355 --> 01:01:14.475
<v Speaker 2>and outputs,

01:01:14.714 --> 01:01:16.635
<v Speaker 2>right, where you can do a lot of

01:01:16.635 --> 01:01:19.195
<v Speaker 2>magic with the data that that is flowing.

01:01:19.275 --> 01:01:21.115
<v Speaker 2>If you are familiar with Kafka

01:01:21.115 --> 01:01:22.395
<v Speaker 2>and KSQL,

01:01:22.555 --> 01:01:25.115
<v Speaker 2>maybe you'll find that this is really similar

01:01:25.115 --> 01:01:28.474
<v Speaker 2>concept but applied to to the agent, to

01:01:28.474 --> 01:01:31.570
<v Speaker 2>the login. And, actually, this sounds very familiar

01:01:31.570 --> 01:01:33.890
<v Speaker 2>to everything that people is talking about

01:01:34.130 --> 01:01:37.570
<v Speaker 2>each stream processing. Right? Do a stream processing

01:01:37.570 --> 01:01:39.570
<v Speaker 2>where the data is being generated

01:01:39.970 --> 01:01:42.210
<v Speaker 2>and not just after being aggregated.

01:01:43.145 --> 01:01:45.704
<v Speaker 2>And one interesting use case is like, I

01:01:45.704 --> 01:01:48.425
<v Speaker 2>have my application. My application is recording,

01:01:48.425 --> 01:01:51.065
<v Speaker 2>I don't know, credit card transactions.

01:01:51.065 --> 01:01:53.625
<v Speaker 2>Right? And how do you detect a double

01:01:53.625 --> 01:01:54.345
<v Speaker 2>charge?

01:01:54.505 --> 01:01:55.385
<v Speaker 2>Right? Normally,

01:01:55.940 --> 01:01:58.340
<v Speaker 2>you just send all your information to a

01:01:58.340 --> 01:02:00.340
<v Speaker 2>database. You do the analysis.

01:02:00.660 --> 01:02:03.540
<v Speaker 2>But that process, since you're running at scale,

01:02:03.540 --> 01:02:05.540
<v Speaker 2>can take a couple of minutes because all

01:02:05.540 --> 01:02:07.780
<v Speaker 2>your data needs to be indexed. And we

01:02:07.780 --> 01:02:09.060
<v Speaker 2>just saw in a in a short demo

01:02:09.060 --> 01:02:10.420
<v Speaker 2>that it take a couple of seconds

01:02:11.005 --> 01:02:13.965
<v Speaker 2>to get some small amount of results.

01:02:14.285 --> 01:02:16.045
<v Speaker 2>So what about if we would have the

01:02:16.045 --> 01:02:19.805
<v Speaker 2>option to detect double charges in milliseconds?

01:02:20.445 --> 01:02:22.285
<v Speaker 2>And as soon as that happens,

01:02:22.285 --> 01:02:26.510
<v Speaker 2>trigger an alert to Slack, custom HTTP endpoint,

01:02:26.510 --> 01:02:28.750
<v Speaker 2>or or whatever you need to do in

01:02:28.750 --> 01:02:31.070
<v Speaker 2>order to take some action on that. And

01:02:31.070 --> 01:02:34.110
<v Speaker 2>and and we have some some demos applied

01:02:34.750 --> 01:02:37.310
<v Speaker 2>to stream processes, so please go ahead and

01:02:37.310 --> 01:02:38.830
<v Speaker 2>show what we have

01:02:39.465 --> 01:02:40.105
<v Speaker 2>working.

01:02:40.985 --> 01:02:42.825
<v Speaker 2>This has been around for more than a

01:02:42.825 --> 01:02:43.785
<v Speaker 2>year, I think.

01:02:44.585 --> 01:02:45.625
<v Speaker 1>Very exciting. All

01:02:48.105 --> 01:02:50.185
<v Speaker 1>of the Fluent Bit's that you've installed on

01:02:50.185 --> 01:02:51.225
<v Speaker 1>your Kubernetes

01:02:51.225 --> 01:02:53.305
<v Speaker 1>all have stream processing capabilities.

01:02:53.500 --> 01:02:56.060
<v Speaker 1>So you can add it there as well

01:02:56.380 --> 01:02:57.740
<v Speaker 1>just to give a kind of a you

01:02:57.740 --> 01:02:59.420
<v Speaker 1>know, I can go ahead and share my

01:02:59.420 --> 01:03:01.500
<v Speaker 1>screen. We can do it on this one

01:03:01.500 --> 01:03:03.260
<v Speaker 0>if if you're confident. You know?

01:03:05.340 --> 01:03:07.100
<v Speaker 1>Let's go for it. Yeah. Why not? Let's

01:03:07.100 --> 01:03:07.740
<v Speaker 1>let's try it.

01:03:08.775 --> 01:03:11.015
<v Speaker 1>It'll be a little bit more configuration,

01:03:11.015 --> 01:03:12.375
<v Speaker 1>but I I think we can do it.

01:03:12.375 --> 01:03:16.695
<v Speaker 1>So let's go to first the values side,

01:03:18.295 --> 01:03:19.974
<v Speaker 1>the the YAML

01:03:20.214 --> 01:03:21.974
<v Speaker 1>that you have in the Helm chart.

01:03:22.295 --> 01:03:22.694
<v Speaker 0>Okay.

01:03:24.750 --> 01:03:26.750
<v Speaker 1>So what we have to modify in this

01:03:26.750 --> 01:03:28.030
<v Speaker 1>YAML is

01:03:28.110 --> 01:03:29.790
<v Speaker 1>two things. We have to go

01:03:30.350 --> 01:03:32.670
<v Speaker 1>all the way to the top and

01:03:33.550 --> 01:03:36.190
<v Speaker 1>include a new file. So

01:03:36.750 --> 01:03:38.590
<v Speaker 1>right now, it's only been including

01:03:39.525 --> 01:03:40.165
<v Speaker 1>the

01:03:41.684 --> 01:03:42.885
<v Speaker 1>main configuration

01:03:42.885 --> 01:03:44.565
<v Speaker 1>and the parsers.

01:03:44.805 --> 01:03:46.725
<v Speaker 1>So there should be a section.

01:03:48.405 --> 01:03:49.445
<v Speaker 1>Let's see.

01:03:49.845 --> 01:03:51.525
<v Speaker 1>That config map.

01:03:52.085 --> 01:03:53.525
<v Speaker 1>Maybe it's a little above.

01:03:55.170 --> 01:03:57.410
<v Speaker 1>Let me look at the line on my

01:03:57.410 --> 01:03:58.050
<v Speaker 1>side.

01:03:59.490 --> 01:04:01.650
<v Speaker 1>Ah, there it is. Yep. So if you

01:04:01.650 --> 01:04:03.410
<v Speaker 1>go down where it says service

01:04:04.210 --> 01:04:07.170
<v Speaker 1>and parsers file, it says parsers.com.

01:04:11.055 --> 01:04:12.575
<v Speaker 0>Oh, yeah. Yeah. Yeah. Got it.

01:04:13.455 --> 01:04:15.695
<v Speaker 1>Yeah. Perfect. Okay. So in this case,

01:04:16.095 --> 01:04:18.015
<v Speaker 1>what we're going to do is add a

01:04:18.015 --> 01:04:18.735
<v Speaker 1>new

01:04:18.975 --> 01:04:19.935
<v Speaker 1>line there.

01:04:22.550 --> 01:04:25.270
<v Speaker 1>Let me just grab the configuration of that

01:04:25.270 --> 01:04:25.910
<v Speaker 1>line,

01:04:27.030 --> 01:04:28.790
<v Speaker 1>and it is going to be

01:04:29.030 --> 01:04:29.670
<v Speaker 1>oops.

01:04:32.710 --> 01:04:34.310
<v Speaker 2>Is streams streams.

01:04:34.745 --> 01:04:38.985
<v Speaker 1>Yeah. Streams_filestreams.com.

01:04:43.305 --> 01:04:44.185
<v Speaker 0>Like so?

01:04:45.305 --> 01:04:47.705
<v Speaker 1>So we'll delete the first section where it

01:04:47.705 --> 01:04:50.030
<v Speaker 1>says parsers file, and it'll just be streams

01:04:50.030 --> 01:04:51.070
<v Speaker 1>file instead.

01:04:51.550 --> 01:04:52.430
<v Speaker 1>Oh, sorry.

01:04:53.070 --> 01:04:55.790
<v Speaker 0>Gotcha. The in that line. Yeah. So the

01:04:55.790 --> 01:04:58.750
<v Speaker 1>parameter is called streams file. Exactly. And then

01:04:58.750 --> 01:04:59.310
<v Speaker 1>the

01:04:59.630 --> 01:05:00.910
<v Speaker 1>value streams.com.

01:05:01.005 --> 01:05:03.724
<v Speaker 1>Okay. Perfect. So now we've said, okay. Let's

01:05:03.724 --> 01:05:05.005
<v Speaker 1>look for the streams.com

01:05:05.005 --> 01:05:05.724
<v Speaker 1>file.

01:05:06.525 --> 01:05:08.285
<v Speaker 1>And now what we need to add in

01:05:08.285 --> 01:05:09.565
<v Speaker 1>this configuration

01:05:10.365 --> 01:05:11.565
<v Speaker 1>is a

01:05:11.724 --> 01:05:12.924
<v Speaker 1>streams.com

01:05:12.924 --> 01:05:13.404
<v Speaker 1>file.

01:05:14.000 --> 01:05:16.400
<v Speaker 1>So let's copy the parsers.com

01:05:16.400 --> 01:05:17.599
<v Speaker 1>configuration.

01:05:17.599 --> 01:05:18.640
<v Speaker 1>If you go all the way to the

01:05:18.640 --> 01:05:19.280
<v Speaker 1>bottom

01:05:21.200 --> 01:05:23.520
<v Speaker 1>yeah. So we have custom parsers.

01:05:23.520 --> 01:05:24.160
<v Speaker 1>And

01:05:25.440 --> 01:05:28.880
<v Speaker 1>in here, what we're gonna do is add

01:05:31.365 --> 01:05:32.485
<v Speaker 1>let me see.

01:05:33.525 --> 01:05:35.765
<v Speaker 1>Oh, actually, now that I'm thinking because the

01:05:35.765 --> 01:05:38.485
<v Speaker 1>I've actually never done stream processing within this

01:05:38.485 --> 01:05:39.125
<v Speaker 1>Helm chart.

01:05:41.760 --> 01:05:43.600
<v Speaker 1>This is a it's a it's a new

01:05:44.240 --> 01:05:46.160
<v Speaker 1>wondrous thing that we're we're trying for the

01:05:46.160 --> 01:05:47.920
<v Speaker 1>first time. What do I think we can

01:05:47.920 --> 01:05:50.000
<v Speaker 1>do? Let's see. I'm gonna look at the

01:05:50.000 --> 01:05:52.000
<v Speaker 1>values side on my

01:05:52.800 --> 01:05:54.400
<v Speaker 1>laptop here

01:05:56.175 --> 01:05:58.895
<v Speaker 1>because I just wanna know what what we

01:05:58.895 --> 01:06:00.655
<v Speaker 1>would add within the,

01:06:04.175 --> 01:06:06.655
<v Speaker 1>yeah, within the values file. So that way,

01:06:06.655 --> 01:06:08.335
<v Speaker 1>we can say, okay. This section right here

01:06:08.335 --> 01:06:10.619
<v Speaker 1>is a stream processor job, but we're gonna

01:06:10.619 --> 01:06:13.020
<v Speaker 1>add it as streams.com.

01:06:15.099 --> 01:06:16.140
<v Speaker 1>See.

01:06:16.940 --> 01:06:17.819
<v Speaker 1>Workspace.

01:06:25.075 --> 01:06:27.155
<v Speaker 0>I assume there's also documentation

01:06:27.155 --> 01:06:29.795
<v Speaker 0>that people can, yeah, introduce Yeah. Machine from

01:06:29.955 --> 01:06:30.755
<v Speaker 0>Absolutely.

01:06:30.835 --> 01:06:31.475
<v Speaker 0>Yeah.

01:06:32.355 --> 01:06:35.235
<v Speaker 0>So is this using Apache Ato or something

01:06:35.235 --> 01:06:36.595
<v Speaker 0>else under the hood?

01:06:38.540 --> 01:06:39.260
<v Speaker 1>All

01:06:39.420 --> 01:06:41.340
<v Speaker 1>implemented within c.

01:06:42.540 --> 01:06:43.260
<v Speaker 0>Okay.

01:06:44.060 --> 01:06:45.740
<v Speaker 0>I've seen a lot of projects kind of

01:06:45.740 --> 01:06:48.220
<v Speaker 0>try to provide and memories and SQL like

01:06:48.220 --> 01:06:50.940
<v Speaker 0>languages to stream processing and they I've seen

01:06:50.940 --> 01:06:52.300
<v Speaker 0>it as quite common for people to use

01:06:52.300 --> 01:06:54.835
<v Speaker 0>Apache Auto with the Parquet format.

01:06:55.155 --> 01:06:56.355
<v Speaker 0>I was just curious.

01:06:58.995 --> 01:07:00.915
<v Speaker 1>I I think most so the one thing

01:07:00.915 --> 01:07:03.555
<v Speaker 1>we wanted was to keep the relative

01:07:03.555 --> 01:07:04.995
<v Speaker 1>footprint very, very low.

01:07:05.810 --> 01:07:07.810
<v Speaker 1>And, you know, if you're doing very simple

01:07:07.810 --> 01:07:09.730
<v Speaker 1>stream processing jobs, you don't want, like

01:07:10.290 --> 01:07:10.930
<v Speaker 1>I

01:07:11.090 --> 01:07:13.330
<v Speaker 1>know Parquet format's not too large or anything

01:07:13.330 --> 01:07:15.410
<v Speaker 1>like that, but how do you just make

01:07:15.410 --> 01:07:18.369
<v Speaker 1>it so it's a few lines of configuration

01:07:18.369 --> 01:07:19.170
<v Speaker 1>versus

01:07:19.650 --> 01:07:21.835
<v Speaker 1>having to install, like, a new application application

01:07:21.835 --> 01:07:23.915
<v Speaker 1>or even embed that application in?

01:07:25.755 --> 01:07:28.395
<v Speaker 2>Yeah. Configuration, right now, I think that it's

01:07:28.395 --> 01:07:29.995
<v Speaker 2>not straightforward.

01:07:30.955 --> 01:07:31.595
<v Speaker 2>Right?

01:07:31.835 --> 01:07:33.675
<v Speaker 2>But it's something that, yeah, we will be

01:07:33.675 --> 01:07:35.035
<v Speaker 2>improve during

01:07:35.035 --> 01:07:37.355
<v Speaker 2>this year because we're getting more use cases.

01:07:37.260 --> 01:07:37.660
<v Speaker 2>Cases.

01:07:38.140 --> 01:07:39.900
<v Speaker 2>And, actually, we're going to extend the stream

01:07:39.900 --> 01:07:41.180
<v Speaker 2>process of capabilities.

01:07:42.060 --> 01:07:44.700
<v Speaker 2>Right now, for example, we don't support joins,

01:07:44.860 --> 01:07:46.620
<v Speaker 2>but we will do it. Right now, we

01:07:46.620 --> 01:07:48.780
<v Speaker 2>mostly support key selections,

01:07:49.660 --> 01:07:50.780
<v Speaker 2>aggregation windows.

01:07:51.605 --> 01:07:53.045
<v Speaker 2>So, yeah, you can do some kind of

01:07:53.045 --> 01:07:55.125
<v Speaker 2>analytics now with what we have,

01:07:56.005 --> 01:07:57.605
<v Speaker 2>and that's really interesting.

01:07:59.125 --> 01:08:00.565
<v Speaker 0>Alright. Definitely. And then

01:08:01.525 --> 01:08:02.244
<v Speaker 2>yeah.

01:08:02.885 --> 01:08:03.845
<v Speaker 2>And so

01:08:04.005 --> 01:08:06.005
<v Speaker 2>and and, for example, what we envision with

01:08:06.005 --> 01:08:06.964
<v Speaker 2>the StreamProcessor

01:08:07.180 --> 01:08:10.140
<v Speaker 2>is not just for logs but also with

01:08:10.140 --> 01:08:10.940
<v Speaker 2>metrics.

01:08:11.420 --> 01:08:11.980
<v Speaker 2>Right?

01:08:13.020 --> 01:08:15.420
<v Speaker 2>Usually, some agents try to ship all the

01:08:15.420 --> 01:08:16.939
<v Speaker 2>metrics that they are collecting,

01:08:17.660 --> 01:08:20.060
<v Speaker 2>but sometimes you have sample of metrics every

01:08:20.060 --> 01:08:21.875
<v Speaker 2>second. So you don't want to ship all

01:08:21.875 --> 01:08:23.795
<v Speaker 2>of that. Right? You just want to ship,

01:08:23.795 --> 01:08:26.755
<v Speaker 2>for example, an average number or

01:08:27.235 --> 01:08:28.915
<v Speaker 2>do some kind of calculation

01:08:28.915 --> 01:08:30.115
<v Speaker 2>every minute.

01:08:30.435 --> 01:08:30.995
<v Speaker 2>And

01:08:31.235 --> 01:08:32.675
<v Speaker 2>if that calculation

01:08:32.675 --> 01:08:35.475
<v Speaker 2>hits some threshold, you can trigger an alert

01:08:35.550 --> 01:08:36.669
<v Speaker 2>or maybe not.

01:08:37.949 --> 01:08:40.429
<v Speaker 2>So this is, a different pattern of how

01:08:40.429 --> 01:08:42.989
<v Speaker 2>to process the data on on the edge.

01:08:43.710 --> 01:08:46.270
<v Speaker 2>And, yeah, do this processing, yeah, has a

01:08:46.270 --> 01:08:47.630
<v Speaker 2>CPU cost, of course,

01:08:48.354 --> 01:08:51.234
<v Speaker 2>But I think that the same cost that

01:08:51.234 --> 01:08:53.395
<v Speaker 2>you are having you are having in just

01:08:53.395 --> 01:08:54.515
<v Speaker 2>central place

01:08:54.995 --> 01:08:57.875
<v Speaker 2>is times higher than do do the same

01:08:57.875 --> 01:08:59.955
<v Speaker 2>thing in a distributed fashion.

01:09:01.979 --> 01:09:03.899
<v Speaker 2>It's it's it's like a for me, it's

01:09:03.899 --> 01:09:05.979
<v Speaker 2>like a new pattern, a new

01:09:06.220 --> 01:09:07.659
<v Speaker 2>new way to do

01:09:08.300 --> 01:09:09.659
<v Speaker 2>data analytics.

01:09:11.899 --> 01:09:13.740
<v Speaker 0>Yeah. Definitely. I I mean, I can already

01:09:13.740 --> 01:09:15.580
<v Speaker 0>think of a few use cases where, like,

01:09:15.585 --> 01:09:17.505
<v Speaker 0>been able to do that and the stream

01:09:17.505 --> 01:09:19.825
<v Speaker 0>and almost real time can get, you know,

01:09:19.825 --> 01:09:22.145
<v Speaker 0>operators and developers a really good insight into

01:09:22.145 --> 01:09:24.305
<v Speaker 0>how their applications are functioning without waiting on

01:09:24.305 --> 01:09:26.145
<v Speaker 0>it going to, you know, some remote back

01:09:26.145 --> 01:09:27.745
<v Speaker 0>end and then in their aggregations.

01:09:28.150 --> 01:09:30.230
<v Speaker 0>Like, definitely lots of use cases for stream

01:09:30.230 --> 01:09:31.830
<v Speaker 0>processing in this context.

01:09:33.270 --> 01:09:35.510
<v Speaker 0>How are we feeling about this configs then?

01:09:36.310 --> 01:09:39.750
<v Speaker 1>I I I let's try for five minutes

01:09:39.750 --> 01:09:42.710
<v Speaker 1>if it doesn't work out. We're gonna go

01:09:41.925 --> 01:09:43.044
<v Speaker 1>full demo.

01:09:43.125 --> 01:09:45.524
<v Speaker 1>Afraid of the demo, I'm not sure. But

01:09:45.844 --> 01:09:47.444
<v Speaker 1>it so the first thing we're gonna actually

01:09:47.444 --> 01:09:49.604
<v Speaker 1>have to do is modify the Helm chart's

01:09:49.604 --> 01:09:52.885
<v Speaker 1>config map. So the config map is gonna

01:09:52.885 --> 01:09:53.444
<v Speaker 1>be

01:09:55.010 --> 01:09:57.650
<v Speaker 1>in within this value

01:09:57.650 --> 01:10:00.130
<v Speaker 1>slide, we actually have to modify the templates.

01:10:01.810 --> 01:10:03.250
<v Speaker 1>So is it not gonna be in the

01:10:03.250 --> 01:10:06.370
<v Speaker 1>values YAML, but oh, did you did you

01:10:06.370 --> 01:10:08.450
<v Speaker 1>clone the Helm chart or, I guess,

01:10:09.165 --> 01:10:10.764
<v Speaker 1>just to the Helm? I am more than

01:10:10.764 --> 01:10:13.085
<v Speaker 0>happy to modify the config map live. We

01:10:13.085 --> 01:10:15.324
<v Speaker 0>can always just Okay. Eject from Helm. I

01:10:15.324 --> 01:10:16.844
<v Speaker 0>have got confidence in this, so let let's

01:10:16.844 --> 01:10:19.324
<v Speaker 0>do this. Yeah. That's better. Yeah. Yeah. Let's

01:10:19.324 --> 01:10:20.044
<v Speaker 2>do that.

01:10:20.445 --> 01:10:20.764
<v Speaker 2>Yeah.

01:10:24.710 --> 01:10:26.470
<v Speaker 0>Oh, forgot the

01:10:26.630 --> 01:10:28.230
<v Speaker 0>config map. There we go.

01:10:28.630 --> 01:10:29.350
<v Speaker 1>Perfect.

01:10:29.670 --> 01:10:32.710
<v Speaker 1>Okay. So in this config map,

01:10:33.430 --> 01:10:35.030
<v Speaker 1>what we're gonna do is so now we

01:10:35.030 --> 01:10:36.390
<v Speaker 1>have this custom parsers.

01:10:37.855 --> 01:10:40.094
<v Speaker 1>We're gonna add the custom

01:10:41.614 --> 01:10:43.135
<v Speaker 1>custom streams

01:10:44.415 --> 01:10:45.534
<v Speaker 1>dot conf.

01:10:47.775 --> 01:10:48.494
<v Speaker 1>And,

01:10:48.655 --> 01:10:51.375
<v Speaker 1>basically, the configuration for a stream processor

01:10:51.375 --> 01:10:53.534
<v Speaker 1>job

01:10:52.260 --> 01:10:54.260
<v Speaker 1>looks like a task.

01:10:55.380 --> 01:10:58.980
<v Speaker 1>So it will be a bracket It is

01:10:59.059 --> 01:10:59.300
<v Speaker 2>and

01:11:00.019 --> 01:11:01.059
<v Speaker 2>Stream task.

01:11:01.139 --> 01:11:02.739
<v Speaker 2>Stream underscore

01:11:02.980 --> 01:11:04.019
<v Speaker 2>task. Okay. Yeah.

01:11:10.715 --> 01:11:12.074
<v Speaker 2>Then you just set a name.

01:11:20.520 --> 01:11:21.880
<v Speaker 0>Just take man. Right?

01:11:22.680 --> 01:11:24.679
<v Speaker 0>Yep. Name. Name.

01:11:25.560 --> 01:11:26.199
<v Speaker 2>Yeah.

01:11:30.120 --> 01:11:31.400
<v Speaker 2>Name, m a v.

01:11:34.495 --> 01:11:35.614
<v Speaker 0>M a n

01:11:36.895 --> 01:11:39.935
<v Speaker 0>No. Name. Like, my name is Eduardo. Your

01:11:39.935 --> 01:11:42.735
<v Speaker 2>name is David. His name is Andre.

01:11:43.215 --> 01:11:44.255
<v Speaker 0>Apologies.

01:11:45.055 --> 01:11:47.055
<v Speaker 1>No worries. No. I I think this is

01:11:47.055 --> 01:11:49.270
<v Speaker 2>my English. No worries. No. I think I

01:11:49.270 --> 01:11:51.750
<v Speaker 0>think it's me and 07:00 on a Friday

01:11:51.750 --> 01:11:53.269
<v Speaker 0>night. I think I just

01:11:53.510 --> 01:11:54.869
<v Speaker 0>we'll get there. Alright.

01:11:55.989 --> 01:11:58.869
<v Speaker 1>So Okay. Let's whatever you want. Like

01:12:00.070 --> 01:12:03.145
<v Speaker 1>Let's call it yeah. Perfect. And then the

01:12:03.145 --> 01:12:05.465
<v Speaker 1>next line we're gonna do is

01:12:06.745 --> 01:12:07.625
<v Speaker 1>exec.

01:12:08.185 --> 01:12:10.025
<v Speaker 1>It's right where the name is. Exec.

01:12:10.905 --> 01:12:12.265
<v Speaker 1>Create stream.

01:12:15.305 --> 01:12:16.985
<v Speaker 1>Oh, sorry. Create space stream.

01:12:19.469 --> 01:12:21.949
<v Speaker 1>Perfect. And we're gonna what do we wanna

01:12:21.949 --> 01:12:23.710
<v Speaker 1>call this stream? Let's call it Rawkode as

01:12:23.710 --> 01:12:24.189
<v Speaker 1>well.

01:12:25.389 --> 01:12:28.030
<v Speaker 1>Yeah. And then we're gonna select a tag.

01:12:28.030 --> 01:12:29.389
<v Speaker 1>So let's say with

01:12:30.115 --> 01:12:31.554
<v Speaker 1>space width,

01:12:32.355 --> 01:12:34.035
<v Speaker 1>and then parenthesis

01:12:35.955 --> 01:12:36.835
<v Speaker 1>tag

01:12:36.835 --> 01:12:37.875
<v Speaker 1>equals,

01:12:40.035 --> 01:12:42.915
<v Speaker 1>and let's choose cube dot star.

01:12:45.190 --> 01:12:47.909
<v Speaker 0>Perfect. Yeah. You no no space between the

01:12:47.909 --> 01:12:48.630
<v Speaker 2>equal.

01:12:51.670 --> 01:12:52.389
<v Speaker 1>And

01:12:53.110 --> 01:12:55.909
<v Speaker 1>And then put one quotation

01:12:55.465 --> 01:12:58.185
<v Speaker 1>between the cube or put the cube dot

01:12:58.185 --> 01:13:01.545
<v Speaker 1>star in quotation marks. One quotation marks. Yeah.

01:13:02.265 --> 01:13:04.745
<v Speaker 2>Yeah. One thing. We are setting a tag,

01:13:04.745 --> 01:13:06.745
<v Speaker 2>so the tag cannot have a wheel card.

01:13:06.745 --> 01:13:08.985
<v Speaker 2>It's not a matching rule. So it could

01:13:08.985 --> 01:13:11.690
<v Speaker 2>be cube dot Rawkode,

01:13:11.690 --> 01:13:12.570
<v Speaker 2>for example.

01:13:14.970 --> 01:13:17.850
<v Speaker 2>Perfect. Because the the output of this stream

01:13:17.850 --> 01:13:20.010
<v Speaker 2>will be like an input of data in

01:13:20.010 --> 01:13:20.650
<v Speaker 2>the pipeline.

01:13:24.515 --> 01:13:25.235
<v Speaker 1>Okay.

01:13:25.715 --> 01:13:28.434
<v Speaker 1>Awesome. And then let's do as

01:13:28.515 --> 01:13:29.315
<v Speaker 1>select.

01:13:34.114 --> 01:13:36.675
<v Speaker 1>And what what type of stream process do

01:13:36.675 --> 01:13:38.940
<v Speaker 1>we wanna do? Maybe count?

01:13:41.100 --> 01:13:43.260
<v Speaker 0>Yeah. Sure. Let's count that many records.

01:13:43.740 --> 01:13:45.900
<v Speaker 1>Yeah. And then parenthesis

01:13:46.220 --> 01:13:47.980
<v Speaker 1>star perfect as

01:13:48.540 --> 01:13:49.420
<v Speaker 1>total count,

01:13:52.535 --> 01:13:54.054
<v Speaker 1>and then from

01:13:54.615 --> 01:13:55.975
<v Speaker 1>space from

01:13:56.695 --> 01:13:58.054
<v Speaker 1>space tag,

01:14:00.295 --> 01:14:01.175
<v Speaker 1>and then

01:14:01.415 --> 01:14:04.375
<v Speaker 1>let's retype in that cube dot Rawkode.

01:14:09.070 --> 01:14:12.910
<v Speaker 0>So dot space bracket. So that like Oh,

01:14:12.910 --> 01:14:14.510
<v Speaker 1>I got semicolon.

01:14:14.510 --> 01:14:15.070
<v Speaker 1>Sorry.

01:14:15.469 --> 01:14:16.270
<v Speaker 1>Single quotes.

01:14:21.995 --> 01:14:22.635
<v Speaker 0>So?

01:14:23.355 --> 01:14:25.675
<v Speaker 1>Perfect. Oh, actually, sorry. Not semicolon. Just regular

01:14:25.675 --> 01:14:26.395
<v Speaker 1>colon.

01:14:26.555 --> 01:14:27.915
<v Speaker 1>It's my mistake. And

01:14:29.755 --> 01:14:31.915
<v Speaker 1>then after cube dot Rawkode, what we'll do

01:14:31.915 --> 01:14:33.835
<v Speaker 1>is define a window to do all this

01:14:33.835 --> 01:14:34.554
<v Speaker 1>counting.

01:14:34.635 --> 01:14:36.155
<v Speaker 1>And so we'll do window

01:14:36.770 --> 01:14:37.730
<v Speaker 1>tumbling

01:14:40.370 --> 01:14:41.889
<v Speaker 1>and then space

01:14:41.890 --> 01:14:43.890
<v Speaker 1>parenthesis fifteen seconds.

01:14:50.325 --> 01:14:52.565
<v Speaker 1>And I think you actually you'll need to

01:14:52.565 --> 01:14:55.925
<v Speaker 1>spell out seconds there. So fifteen space seconds.

01:14:55.925 --> 01:14:56.245
<v Speaker 1>Fifteen

01:14:57.205 --> 01:15:00.885
<v Speaker 2>yeah. Fifteen space second without the final s.

01:15:03.500 --> 01:15:04.940
<v Speaker 2>Andre, one question.

01:15:05.100 --> 01:15:05.420
<v Speaker 2>In

01:15:06.219 --> 01:15:09.100
<v Speaker 2>from the incoming data, you mentioned tag cube

01:15:09.100 --> 01:15:10.300
<v Speaker 2>dot Rawkode.

01:15:10.699 --> 01:15:12.620
<v Speaker 2>Mhmm. But do we have an incoming tag

01:15:12.620 --> 01:15:14.540
<v Speaker 2>with that cube dot Rawkode?

01:15:15.695 --> 01:15:18.415
<v Speaker 1>No. So we'll modify the config to just

01:15:18.415 --> 01:15:21.135
<v Speaker 1>have a a a a raw code

01:15:21.775 --> 01:15:23.454
<v Speaker 1>cube dot Rawkode tag.

01:15:23.695 --> 01:15:25.535
<v Speaker 1>So we'll just tag everything as cube dot

01:15:25.535 --> 01:15:26.015
<v Speaker 1>Rawkode.

01:15:27.450 --> 01:15:30.010
<v Speaker 2>Oh, okay. So the output needs to have

01:15:30.010 --> 01:15:32.250
<v Speaker 2>a different text so we avoid that, you

01:15:32.250 --> 01:15:34.570
<v Speaker 2>know, the same data flows in the same

01:15:34.570 --> 01:15:35.130
<v Speaker 2>process.

01:15:36.490 --> 01:15:38.010
<v Speaker 1>Ah, I see. I see what you're saying.

01:15:38.010 --> 01:15:40.250
<v Speaker 1>Okay. So let's let's just make the tag

01:15:40.250 --> 01:15:42.695
<v Speaker 1>equal to Rawkode, and what we'll add in

01:15:42.695 --> 01:15:45.334
<v Speaker 1>the input is a new CPU metric

01:15:45.414 --> 01:15:47.414
<v Speaker 1>that will just read in CPU

01:15:47.974 --> 01:15:50.374
<v Speaker 1>codes every second. Yeah. Perfect.

01:15:52.934 --> 01:15:53.414
<v Speaker 1>Awesome.

01:15:54.330 --> 01:15:56.730
<v Speaker 0>Yeah. So I quite I quite like that.

01:15:56.730 --> 01:15:58.010
<v Speaker 0>You know, I I was making a few

01:15:58.010 --> 01:15:59.930
<v Speaker 0>assumptions as you were kinda telling me what

01:15:59.930 --> 01:16:01.290
<v Speaker 0>to type and what I was typing. It

01:16:01.290 --> 01:16:03.370
<v Speaker 0>felt just very natural. Like, you know, if

01:16:03.370 --> 01:16:05.930
<v Speaker 0>you've worked with any SQL based database or

01:16:05.930 --> 01:16:08.965
<v Speaker 0>relational databases, it was that was quite pleasurable.

01:16:09.765 --> 01:16:10.405
<v Speaker 1>Awesome.

01:16:11.205 --> 01:16:13.045
<v Speaker 1>Yeah. We wanted to make it as SQL

01:16:13.045 --> 01:16:14.965
<v Speaker 1>like as possible. Oh, and then just end

01:16:14.965 --> 01:16:15.685
<v Speaker 1>with a

01:16:16.005 --> 01:16:17.765
<v Speaker 1>excuse me. End with the semicolon.

01:16:18.085 --> 01:16:18.885
<v Speaker 1>There we go.

01:16:20.725 --> 01:16:22.485
<v Speaker 2>Oh, but my point is that

01:16:23.010 --> 01:16:25.409
<v Speaker 2>the stream that we are creating has the

01:16:25.409 --> 01:16:27.969
<v Speaker 2>same tag that we are we're we're reading

01:16:27.969 --> 01:16:29.010
<v Speaker 2>the data from.

01:16:29.730 --> 01:16:32.769
<v Speaker 2>So the outgoing tag needs to be different

01:16:33.250 --> 01:16:35.570
<v Speaker 2>if we want to send that results to

01:16:35.570 --> 01:16:36.449
<v Speaker 2>a different endpoint.

01:16:37.725 --> 01:16:39.405
<v Speaker 1>I see what you're saying. I see what

01:16:39.405 --> 01:16:41.085
<v Speaker 1>you're saying. The first tag no. The first

01:16:41.085 --> 01:16:41.645
<v Speaker 2>one.

01:16:42.285 --> 01:16:43.005
<v Speaker 1>Yeah.

01:16:43.885 --> 01:16:46.365
<v Speaker 1>So, basically, the stream is gonna be named

01:16:46.365 --> 01:16:48.845
<v Speaker 1>Rawkode. So you can send that Rawkode to

01:16:48.845 --> 01:16:51.210
<v Speaker 1>Elasticsearch or Splunk or wherever you want,

01:16:51.690 --> 01:16:53.530
<v Speaker 1>and then we're reading from a different

01:16:54.730 --> 01:16:56.730
<v Speaker 1>tag. Yep. So if we just call the

01:16:56.730 --> 01:16:59.450
<v Speaker 0>tag that what is StreamRawkode and we're pulling

01:16:59.450 --> 01:17:01.530
<v Speaker 0>from TagRawkode. So now we have to modify

01:17:02.385 --> 01:17:05.105
<v Speaker 0>the log pipeline to add the Rawkode tag.

01:17:05.105 --> 01:17:08.625
<v Speaker 0>Right? Okay. Exactly. We'll add stream underscore Rawkode

01:17:08.625 --> 01:17:11.105
<v Speaker 1>to the first one too. So execs create

01:17:11.105 --> 01:17:13.264
<v Speaker 1>stream, stream underscore Rawkode.

01:17:14.465 --> 01:17:15.505
<v Speaker 0>Oh, right. Okay. Gotcha.

01:17:18.790 --> 01:17:19.590
<v Speaker 2>Perfect.

01:17:21.910 --> 01:17:23.750
<v Speaker 0>Okay. So does that mean we do have

01:17:23.750 --> 01:17:24.790
<v Speaker 0>to jump down

01:17:25.350 --> 01:17:26.070
<v Speaker 0>to

01:17:26.870 --> 01:17:29.030
<v Speaker 0>as do we add tags via the outputs,

01:17:29.030 --> 01:17:30.710
<v Speaker 0>or is that something we do with

01:17:31.505 --> 01:17:34.145
<v Speaker 1>So in here, let's also add a input

01:17:34.145 --> 01:17:36.224
<v Speaker 1>under the Fluent Bit configuration.

01:17:38.545 --> 01:17:41.425
<v Speaker 1>Yeah. We'll add a a input of

01:17:42.145 --> 01:17:43.264
<v Speaker 1>name CPU,

01:17:48.170 --> 01:17:49.610
<v Speaker 1>and then tag,

01:17:49.610 --> 01:17:52.010
<v Speaker 1>we will put Rawkode.

01:17:55.130 --> 01:17:56.570
<v Speaker 1>Perfect. Okay.

01:17:56.970 --> 01:17:59.370
<v Speaker 1>And we'll let we'll also need to delete

01:17:59.370 --> 01:18:01.875
<v Speaker 1>our grep because, otherwise, all our data flows

01:18:01.875 --> 01:18:03.955
<v Speaker 1>through the grep, and it will be deleted,

01:18:04.515 --> 01:18:06.675
<v Speaker 1>or it will only match things that have

01:18:06.675 --> 01:18:08.355
<v Speaker 1>that. So let's just delete that grep for

01:18:08.355 --> 01:18:08.835
<v Speaker 1>now.

01:18:09.315 --> 01:18:10.114
<v Speaker 1>Perfect.

01:18:10.915 --> 01:18:14.115
<v Speaker 1>And then we need to also add the

01:18:14.900 --> 01:18:16.579
<v Speaker 1>stream processor file

01:18:17.219 --> 01:18:19.860
<v Speaker 1>in the service configuration. So if we go

01:18:19.860 --> 01:18:22.020
<v Speaker 1>all the way back to the top, under

01:18:22.020 --> 01:18:22.899
<v Speaker 1>service,

01:18:23.139 --> 01:18:28.980
<v Speaker 1>yeah, streams_filestream.com.

01:18:28.980 --> 01:18:31.835
<v Speaker 1>Perfect. And now I believe it's defined above,

01:18:31.835 --> 01:18:33.195
<v Speaker 1>but let's just double check

01:18:33.675 --> 01:18:35.915
<v Speaker 1>the Yeah. We need a we're we're missing

01:18:35.915 --> 01:18:38.155
<v Speaker 2>an s on stream file. It's a streams

01:18:38.155 --> 01:18:38.875
<v Speaker 2>file.

01:18:39.435 --> 01:18:41.515
<v Speaker 1>Got it. Streams file, and then I think

01:18:41.515 --> 01:18:45.195
<v Speaker 1>custom_streams.com

01:18:48.210 --> 01:18:49.730
<v Speaker 1>for the filename.

01:18:50.450 --> 01:18:51.170
<v Speaker 0>Oh,

01:18:51.970 --> 01:18:52.690
<v Speaker 0>custom.

01:18:53.250 --> 01:18:55.090
<v Speaker 0>Do you want this to be like that?

01:18:55.250 --> 01:18:57.490
<v Speaker 1>Perfect. Perfect. Yeah. So if you There's a

01:18:57.490 --> 01:18:59.890
<v Speaker 2>typo there's a typo on the stream task.

01:18:59.890 --> 01:19:02.985
<v Speaker 2>In the filename, it say steams, not streams.

01:19:04.825 --> 01:19:07.065
<v Speaker 1>Ah, okay. Yeah. And if you go up

01:19:07.065 --> 01:19:08.425
<v Speaker 1>maybe 10 lines.

01:19:12.425 --> 01:19:15.300
<v Speaker 1>Yeah. The file name is Teams, just add

01:19:15.300 --> 01:19:17.460
<v Speaker 1>an r. This is why I never code

01:19:17.460 --> 01:19:19.059
<v Speaker 0>alone because I'm dreadful.

01:19:19.139 --> 01:19:19.619
<v Speaker 0>So

01:19:20.900 --> 01:19:23.060
<v Speaker 1>okay. You got it. Okay. Do we think

01:19:23.060 --> 01:19:24.739
<v Speaker 0>this is a valid configuration?

01:19:25.940 --> 01:19:27.780
<v Speaker 1>Fingers crossed. Let's go for it.

01:19:28.995 --> 01:19:32.195
<v Speaker 2>Oh, we need the output for stream Rawkode.

01:19:33.074 --> 01:19:35.315
<v Speaker 2>Oh. We have a matching rule. A match

01:19:36.755 --> 01:19:38.675
<v Speaker 1>Yeah. Yeah. We do. Okay. Let's just copy

01:19:38.675 --> 01:19:40.034
<v Speaker 1>one of those outputs

01:19:40.435 --> 01:19:42.675
<v Speaker 1>and then match Rawkode

01:19:43.590 --> 01:19:45.989
<v Speaker 1>stream underscore Rawkode. Excuse me.

01:19:49.909 --> 01:19:52.550
<v Speaker 1>And then for Logstash prefix, let's just use

01:19:52.550 --> 01:19:53.429
<v Speaker 1>Rawkode.

01:19:55.670 --> 01:19:56.949
<v Speaker 1>Perfect. Happy?

01:19:57.670 --> 01:19:58.630
<v Speaker 1>I'm very happy.

01:20:02.325 --> 01:20:04.485
<v Speaker 0>Alright. So we will have to rotate those

01:20:04.485 --> 01:20:07.045
<v Speaker 0>conflict maps ourselves because we didn't use helm.

01:20:07.045 --> 01:20:08.885
<v Speaker 0>So delete pod

01:20:08.885 --> 01:20:10.725
<v Speaker 0>l. I'm just gonna assume

01:20:10.805 --> 01:20:12.725
<v Speaker 0>well, our people will flip back maybe work.

01:20:16.860 --> 01:20:19.340
<v Speaker 1>No. I guess not. I have to specify

01:20:19.340 --> 01:20:21.340
<v Speaker 2>the the namespace maybe.

01:20:21.820 --> 01:20:24.219
<v Speaker 0>I meant the the namespace. We'll just

01:20:26.815 --> 01:20:28.094
<v Speaker 1>Choose one of them.

01:20:28.655 --> 01:20:30.574
<v Speaker 0>What labels do we have? I mean, I

01:20:30.574 --> 01:20:32.415
<v Speaker 0>could have deleted them manually by now of

01:20:32.415 --> 01:20:33.614
<v Speaker 0>course, but well

01:20:40.630 --> 01:20:42.470
<v Speaker 0>So we have a question. So while I

01:20:42.470 --> 01:20:43.750
<v Speaker 0>delete those,

01:20:44.470 --> 01:20:46.070
<v Speaker 0>Andres has asked, does

01:20:47.350 --> 01:20:51.430
<v Speaker 0>this intermediate aggregated result from the stream persist

01:20:51.910 --> 01:20:53.590
<v Speaker 0>during restarts?

01:20:53.670 --> 01:20:54.550
<v Speaker 0>How is it stored?

01:20:57.145 --> 01:20:58.105
<v Speaker 2>Not now. So

01:20:58.585 --> 01:21:01.545
<v Speaker 2>all aggregation window, it doesn't persist.

01:21:01.625 --> 01:21:03.785
<v Speaker 2>Right? And this is one of the incursion

01:21:03.785 --> 01:21:05.945
<v Speaker 2>that is coming up. Right now, everything runs

01:21:05.945 --> 01:21:06.505
<v Speaker 2>in memory.

01:21:07.560 --> 01:21:09.800
<v Speaker 0>Yeah. Alright. And, Andreas, may I spot you

01:21:09.800 --> 01:21:11.400
<v Speaker 0>the bug in our config? I named both

01:21:11.400 --> 01:21:13.960
<v Speaker 0>the outputs ES. Is that a problem?

01:21:14.760 --> 01:21:17.960
<v Speaker 1>So the it it's yeah. The name category

01:21:17.960 --> 01:21:20.600
<v Speaker 1>is just the type of output. So both

01:21:20.600 --> 01:21:22.915
<v Speaker 1>of them are named ES. So there should

01:21:22.915 --> 01:21:25.074
<v Speaker 1>be actually three outputs that are ES,

01:21:25.395 --> 01:21:27.475
<v Speaker 1>and it's just it it just means, okay.

01:21:27.475 --> 01:21:29.395
<v Speaker 1>We're outputting the three Elasticsearches.

01:21:35.640 --> 01:21:37.640
<v Speaker 0>Finally, I can type. There we go. Okay.

01:21:37.640 --> 01:21:38.760
<v Speaker 0>So we rotated

01:21:38.760 --> 01:21:40.200
<v Speaker 0>our Fluent Bit pods.

01:21:41.160 --> 01:21:43.800
<v Speaker 0>Hopefully we're not gonna see Crashly back off.

01:21:45.400 --> 01:21:46.520
<v Speaker 0>Let's have a wee,

01:21:46.840 --> 01:21:47.560
<v Speaker 0>a wee gander.

01:21:49.345 --> 01:21:50.625
<v Speaker 0>Wow. They seem happy.

01:21:51.025 --> 01:21:52.065
<v Speaker 0>I'm impressed.

01:21:53.505 --> 01:21:55.105
<v Speaker 0>I did my best to make them not

01:21:55.105 --> 01:21:57.585
<v Speaker 0>work so, you know. Alright.

01:21:58.545 --> 01:21:59.505
<v Speaker 0>So let's

01:21:59.905 --> 01:22:02.465
<v Speaker 0>report forward to Kibana. Right? And then what

01:22:02.465 --> 01:22:03.105
<v Speaker 0>we should

01:22:03.850 --> 01:22:05.930
<v Speaker 0>we wanna confirm that that looks okay there?

01:22:05.930 --> 01:22:07.690
<v Speaker 0>Is there do we use the Fluentdocs in

01:22:07.690 --> 01:22:09.530
<v Speaker 0>line? Let's just let's

01:22:09.530 --> 01:22:11.449
<v Speaker 1>just use Kibana. Let's see what we what

01:22:11.449 --> 01:22:14.010
<v Speaker 1>we got. We're we're being bold. We're being

01:22:14.010 --> 01:22:14.730
<v Speaker 1>bold.

01:22:16.090 --> 01:22:17.290
<v Speaker 1>And then we're gonna have to add a

01:22:17.290 --> 01:22:18.250
<v Speaker 1>new pattern as well.

01:22:19.185 --> 01:22:21.505
<v Speaker 0>Okay. Yeah. So the the okay. The Rawkode

01:22:21.505 --> 01:22:23.505
<v Speaker 0>pattern. So let's come back in here,

01:22:23.905 --> 01:22:25.105
<v Speaker 0>index patterns.

01:22:33.690 --> 01:22:36.010
<v Speaker 0>Nothing yet. Nothing yet.

01:22:46.705 --> 01:22:48.225
<v Speaker 2>Let's take a look at the logs of

01:22:48.225 --> 01:22:49.905
<v Speaker 2>one of the Fluent Bit bots.

01:22:50.545 --> 01:22:52.705
<v Speaker 0>I feel like that's admitting defeat, if I'm

01:22:52.705 --> 01:22:53.505
<v Speaker 0>being honest.

01:22:54.785 --> 01:22:55.825
<v Speaker 0>Right. Okay.

01:22:57.025 --> 01:22:59.530
<v Speaker 0>Log oops. Yeah. Typing

01:23:00.250 --> 01:23:01.050
<v Speaker 0>logs

01:23:01.050 --> 01:23:03.130
<v Speaker 0>and let's grab this one.

01:23:04.090 --> 01:23:06.330
<v Speaker 0>Yeah. See what I see. We gotta fail

01:23:06.330 --> 01:23:08.970
<v Speaker 0>to flush chunk. We are getting errors.

01:23:10.330 --> 01:23:12.650
<v Speaker 1>And it's the tail to the output.

01:23:14.415 --> 01:23:16.974
<v Speaker 1>Oh, it's showing a bunch. Our config map

01:23:16.974 --> 01:23:17.774
<v Speaker 0>is wrong?

01:23:18.895 --> 01:23:21.054
<v Speaker 2>I think so. Yes. There's something wrong. Oh,

01:23:21.054 --> 01:23:23.294
<v Speaker 0>could not initialize the stream processor.

01:23:24.014 --> 01:23:26.014
<v Speaker 0>Cannot open Fluent. Oh, it could it could

01:23:26.014 --> 01:23:26.974
<v Speaker 2>not read the file.

01:23:28.179 --> 01:23:29.379
<v Speaker 2>Custom screen.

01:23:29.780 --> 01:23:31.699
<v Speaker 2>Something to conflict map. Yeah.

01:23:32.579 --> 01:23:34.659
<v Speaker 0>Alright. Let's exec in.

01:23:36.820 --> 01:23:38.179
<v Speaker 0>Do you give me a shell?

01:23:39.619 --> 01:23:40.020
<v Speaker 0>No.

01:23:41.555 --> 01:23:44.675
<v Speaker 1>No shell. Yeah. No. You should use the

01:23:44.675 --> 01:23:47.075
<v Speaker 2>different Fluent Bit image because that one is

01:23:47.075 --> 01:23:48.114
<v Speaker 2>distroless,

01:23:48.115 --> 01:23:50.035
<v Speaker 2>so it's just a Fluent Bit binary.

01:23:50.275 --> 01:23:50.675
<v Speaker 2>Okay.

01:23:51.555 --> 01:23:53.235
<v Speaker 0>So do we believe

01:23:53.235 --> 01:23:54.835
<v Speaker 0>that that is a table in the file

01:23:54.835 --> 01:23:56.355
<v Speaker 0>name or that it's not in the version

01:23:56.355 --> 01:23:57.909
<v Speaker 0>of Fluent that we deployed?

01:23:58.870 --> 01:24:01.909
<v Speaker 2>Yeah. Let's set it again the conflict map.

01:24:02.230 --> 01:24:03.429
<v Speaker 0>Yeah. Let's do it.

01:24:05.670 --> 01:24:07.750
<v Speaker 0>So this is the fail that filled. Right?

01:24:07.830 --> 01:24:10.870
<v Speaker 0>Streams fail custom underscore streams dot conf.

01:24:12.315 --> 01:24:13.835
<v Speaker 0>So earlier, you did say it was just

01:24:13.835 --> 01:24:15.835
<v Speaker 0>streams dot conf. Was that not right?

01:24:17.275 --> 01:24:19.915
<v Speaker 1>I think it matches. So in your parser,

01:24:19.915 --> 01:24:22.394
<v Speaker 1>you have, like, custom parsers defined as data.

01:24:23.435 --> 01:24:24.315
<v Speaker 0>Right.

01:24:24.315 --> 01:24:24.954
<v Speaker 0>Okay.

01:24:25.835 --> 01:24:28.155
<v Speaker 0>So that So the other thing to check

01:24:28.070 --> 01:24:30.870
<v Speaker 1>is within your within the custom

01:24:31.270 --> 01:24:31.590
<v Speaker 1>dots

01:24:32.070 --> 01:24:33.910
<v Speaker 1>this is a bit of an annoying thing,

01:24:33.910 --> 01:24:37.270
<v Speaker 1>but is anything tab instead of spaced

01:24:38.070 --> 01:24:39.910
<v Speaker 1>within the customstreams.com?

01:24:46.695 --> 01:24:47.334
<v Speaker 1>No?

01:24:47.974 --> 01:24:48.775
<v Speaker 1>I

01:24:48.775 --> 01:24:51.894
<v Speaker 0>I I don't think so. No.

01:24:52.454 --> 01:24:52.855
<v Speaker 1>Okay.

01:24:54.670 --> 01:24:55.310
<v Speaker 2>Yeah.

01:24:55.470 --> 01:24:58.350
<v Speaker 2>Can you move our e our video images

01:24:58.350 --> 01:25:00.270
<v Speaker 2>a little bit down so I or Sorry.

01:25:00.350 --> 01:25:02.429
<v Speaker 2>Roll up the so

01:25:02.590 --> 01:25:03.950
<v Speaker 2>I can take a look at the code.

01:25:03.950 --> 01:25:04.590
<v Speaker 2>Yeah.

01:25:05.230 --> 01:25:08.270
<v Speaker 2>Okay. Create stream stream route code.

01:25:09.375 --> 01:25:12.494
<v Speaker 2>Okay. For the stream name, just put Rawkode.

01:25:13.215 --> 01:25:14.894
<v Speaker 2>I'm not sure if the unders I don't

01:25:14.894 --> 01:25:16.655
<v Speaker 2>remember if the underscore is.

01:25:17.054 --> 01:25:18.574
<v Speaker 2>Yeah. Create stream

01:25:19.054 --> 01:25:20.014
<v Speaker 2>Rawkode.

01:25:20.175 --> 01:25:22.255
<v Speaker 0>I'm breaking everything

01:25:22.940 --> 01:25:23.739
<v Speaker 0>there. Okay.

01:25:24.540 --> 01:25:26.060
<v Speaker 0>So create stream Rawkode.

01:25:27.980 --> 01:25:29.340
<v Speaker 2>Type, okay,

01:25:30.940 --> 01:25:32.300
<v Speaker 2>stream Rawkode.

01:25:33.260 --> 01:25:35.580
<v Speaker 2>Or you can put stream dot Rawkode.

01:25:35.735 --> 01:25:36.614
<v Speaker 2>Try that.

01:25:39.094 --> 01:25:39.894
<v Speaker 0>Yep.

01:25:43.974 --> 01:25:46.934
<v Speaker 2>From window tumbling fifteen

01:25:46.934 --> 01:25:47.814
<v Speaker 2>seconds.

01:25:49.494 --> 01:25:49.895
<v Speaker 2>Okay.

01:25:53.670 --> 01:25:56.229
<v Speaker 2>Anurag, do you think it's okay, that config?

01:25:56.710 --> 01:25:58.949
<v Speaker 1>Yeah. I think so. I think so.

01:25:59.110 --> 01:26:01.030
<v Speaker 1>It's it's pretty much the same one I

01:26:01.030 --> 01:26:02.949
<v Speaker 1>have. I think the only difference that I

01:26:02.949 --> 01:26:04.949
<v Speaker 1>have in my config is I have a

01:26:04.949 --> 01:26:07.475
<v Speaker 1>where clause at the end, but that's because,

01:26:07.475 --> 01:26:10.115
<v Speaker 1>like, I'm counting how many 200 errors I

01:26:10.115 --> 01:26:11.715
<v Speaker 1>experienced within Apache.

01:26:13.315 --> 01:26:15.315
<v Speaker 0>Okay. So I think I understand this now.

01:26:15.315 --> 01:26:17.075
<v Speaker 0>We're creating a new key in a config

01:26:17.075 --> 01:26:19.639
<v Speaker 0>map. It's called custom streams dot conf. So

01:26:19.639 --> 01:26:20.760
<v Speaker 0>we need to make sure that we load

01:26:20.760 --> 01:26:23.320
<v Speaker 0>that here, which we've got customstreams.com.

01:26:23.960 --> 01:26:25.960
<v Speaker 2>Mhmm. Can you add a new line after

01:26:25.960 --> 01:26:27.560
<v Speaker 2>the last SQL

01:26:27.560 --> 01:26:28.360
<v Speaker 2>query?

01:26:32.920 --> 01:26:33.239
<v Speaker 2>Yeah.

01:26:37.605 --> 01:26:38.405
<v Speaker 0>Okay.

01:26:41.285 --> 01:26:42.645
<v Speaker 0>There was a problem.

01:26:45.045 --> 01:26:46.405
<v Speaker 0>Interesting.

01:26:46.885 --> 01:26:49.420
<v Speaker 0>No changes that time. Let me make that

01:26:49.420 --> 01:26:51.020
<v Speaker 0>change again. I'm not sure why it said

01:26:51.020 --> 01:26:51.980
<v Speaker 0>there was a problem.

01:26:52.300 --> 01:26:54.220
<v Speaker 0>So we changed that, we replaced us with

01:26:54.220 --> 01:26:55.980
<v Speaker 0>a dot and we added a new line.

01:26:57.100 --> 01:26:59.180
<v Speaker 0>Okay. Yeah. Okay that time. Let's do the

01:26:59.180 --> 01:27:01.260
<v Speaker 0>delete one more time and I'm just gonna

01:27:01.260 --> 01:27:04.445
<v Speaker 0>check the daemon segments entire config map and

01:27:04.445 --> 01:27:06.525
<v Speaker 0>it's not selective. Although I guess it wouldn't

01:27:06.525 --> 01:27:07.085
<v Speaker 0>be, would it?

01:27:16.360 --> 01:27:19.640
<v Speaker 1>Cool. Looks like it is grabbing the default

01:27:19.640 --> 01:27:20.280
<v Speaker 1>one.

01:27:21.320 --> 01:27:23.719
<v Speaker 1>Oh, one one more thing. And the config

01:27:23.719 --> 01:27:25.880
<v Speaker 1>map, we forgot to modify is the input

01:27:25.880 --> 01:27:27.559
<v Speaker 1>needs to be stream dot

01:27:28.280 --> 01:27:29.320
<v Speaker 1>Rawkode as well.

01:27:31.755 --> 01:27:32.795
<v Speaker 0>Ah, okay.

01:27:34.955 --> 01:27:36.554
<v Speaker 1>So that CPU,

01:27:36.555 --> 01:27:37.755
<v Speaker 1>the tag. Yeah.

01:27:40.875 --> 01:27:43.035
<v Speaker 1>Oh, sorry. No. No. We're fine. It it's

01:27:43.114 --> 01:27:44.580
<v Speaker 1>it was fine as is. I'm I'm an

01:27:44.580 --> 01:27:45.459
<v Speaker 1>idiot. Sorry.

01:27:47.540 --> 01:27:49.699
<v Speaker 2>Okay. Alright. Cool. We're good. We should be

01:27:49.860 --> 01:27:51.460
<v Speaker 0>let's check the logs again then and see

01:27:51.460 --> 01:27:53.219
<v Speaker 0>if we're still getting any errors.

01:27:55.860 --> 01:27:57.940
<v Speaker 0>Oh, it's happy now. Oh, no. It still

01:27:58.100 --> 01:27:59.219
<v Speaker 0>it can't open this file.

01:28:00.815 --> 01:28:04.015
<v Speaker 1>Yeah. Still failing on that. It's odd.

01:28:04.735 --> 01:28:06.735
<v Speaker 2>It's a config map issue. Why?

01:28:07.135 --> 01:28:08.095
<v Speaker 0>Okay. So

01:28:08.575 --> 01:28:10.415
<v Speaker 0>let's try one more thing before we admit

01:28:10.415 --> 01:28:12.655
<v Speaker 0>defeat here. Okay? So you said I could

01:28:12.655 --> 01:28:14.095
<v Speaker 0>use a different image that would give me

01:28:14.095 --> 01:28:14.575
<v Speaker 0>a shell?

01:28:16.750 --> 01:28:19.469
<v Speaker 2>Yeah. Just append at the end dash deeper.

01:28:24.670 --> 01:28:26.670
<v Speaker 0>Alright. This one's gonna go first.

01:28:28.830 --> 01:28:31.704
<v Speaker 0>So in theory, I should be able to

01:28:34.985 --> 01:28:37.065
<v Speaker 0>oh, yeah. That one just died. Silly me.

01:28:37.065 --> 01:28:37.625
<v Speaker 0>Okay.

01:28:40.425 --> 01:28:41.945
<v Speaker 0>Let's grab

01:28:43.800 --> 01:28:44.679
<v Speaker 0>this one.

01:28:48.520 --> 01:28:49.719
<v Speaker 0>It's Alpine?

01:28:50.119 --> 01:28:51.079
<v Speaker 0>Yeah. Okay.

01:28:51.480 --> 01:28:53.719
<v Speaker 0>So the directory was and

01:28:55.400 --> 01:28:56.920
<v Speaker 0>then ATC

01:28:57.975 --> 01:29:00.375
<v Speaker 0>and we do not have our custom parsers

01:29:00.375 --> 01:29:01.094
<v Speaker 0>fail.

01:29:06.455 --> 01:29:08.855
<v Speaker 0>Let's check that map again

01:29:08.935 --> 01:29:10.375
<v Speaker 0>as a daemon set.

01:29:13.860 --> 01:29:15.380
<v Speaker 0>Yeah. These are all yeah. These are all

01:29:15.380 --> 01:29:17.380
<v Speaker 0>done as a sub paths. So

01:29:18.580 --> 01:29:20.420
<v Speaker 1>That's why. That's why.

01:29:21.540 --> 01:29:23.780
<v Speaker 0>Easy when you know how. Right? So streams

01:29:23.940 --> 01:29:24.100
<v Speaker 0>Yeah.

01:29:25.645 --> 01:29:27.485
<v Speaker 0>Name config

01:29:28.445 --> 01:29:30.284
<v Speaker 0>sub path custom.

01:29:31.645 --> 01:29:33.485
<v Speaker 1>Streams dot com.

01:29:34.364 --> 01:29:35.164
<v Speaker 0>Alright.

01:29:35.485 --> 01:29:36.685
<v Speaker 0>Let's see what we have.

01:29:41.200 --> 01:29:42.960
<v Speaker 0>I'm not sure if that four second one

01:29:42.960 --> 01:29:44.000
<v Speaker 0>is gonna be

01:29:48.560 --> 01:29:49.199
<v Speaker 0>I

01:29:49.600 --> 01:29:50.800
<v Speaker 0>mean we can check but I don't know

01:29:50.800 --> 01:29:52.320
<v Speaker 0>if that four second one was it terminating

01:29:52.320 --> 01:29:53.679
<v Speaker 0>from the last rollover

01:29:54.000 --> 01:29:54.480
<v Speaker 0>or not.

01:29:57.514 --> 01:29:58.235
<v Speaker 0>Yeah.

01:29:58.475 --> 01:30:00.235
<v Speaker 0>Probably not. Okay. So let's wait for the

01:30:00.235 --> 01:30:02.554
<v Speaker 0>next one which is just coming.

01:30:06.475 --> 01:30:07.275
<v Speaker 0>Alright.

01:30:07.355 --> 01:30:10.475
<v Speaker 0>Logs

01:30:08.330 --> 01:30:09.210
<v Speaker 0>f

01:30:09.290 --> 01:30:10.250
<v Speaker 0>and

01:30:10.490 --> 01:30:11.449
<v Speaker 0>let's try.

01:30:13.690 --> 01:30:16.010
<v Speaker 0>There we go. We have a stream. Stream

01:30:16.010 --> 01:30:19.690
<v Speaker 1>processor. Perfect. Started. Register task. Rawkode.

01:30:21.975 --> 01:30:24.054
<v Speaker 1>Let's be bold. Let's go to Kibana.

01:30:25.655 --> 01:30:27.735
<v Speaker 0>Okay. Let's see if this is gonna pick

01:30:27.735 --> 01:30:30.135
<v Speaker 0>that up. Maybe I need to refresh.

01:30:30.855 --> 01:30:32.775
<v Speaker 0>Oh, I'm not port forwarding, of course.

01:30:33.175 --> 01:30:34.615
<v Speaker 1>I was like, no.

01:30:40.960 --> 01:30:42.880
<v Speaker 2>So we might write a new tutorial for

01:30:42.880 --> 01:30:45.200
<v Speaker 2>this, you know, after this episode.

01:30:45.680 --> 01:30:47.440
<v Speaker 1>I I think, yeah, two things that I

01:30:47.440 --> 01:30:49.360
<v Speaker 1>see as good improvements. We should just add

01:30:49.360 --> 01:30:51.920
<v Speaker 1>stream processor files as part of the natural

01:30:51.920 --> 01:30:53.425
<v Speaker 1>helm charts.

01:30:53.985 --> 01:30:55.585
<v Speaker 1>So they're already there as per and as

01:30:55.585 --> 01:30:57.105
<v Speaker 1>the daemon set. So you can configure it

01:30:57.105 --> 01:30:58.625
<v Speaker 1>if you want it, but, you know, it's

01:30:58.625 --> 01:31:00.465
<v Speaker 1>empty if you don't need it.

01:31:03.665 --> 01:31:05.905
<v Speaker 0>Should we have to wait for

01:31:06.080 --> 01:31:07.760
<v Speaker 0>something to show up here?

01:31:08.320 --> 01:31:10.320
<v Speaker 2>Yeah. But it was fifteen seconds.

01:31:10.320 --> 01:31:10.640
<v Speaker 2>So

01:31:12.000 --> 01:31:14.480
<v Speaker 1>The window tumbling is fifteen seconds. I see.

01:31:20.285 --> 01:31:23.085
<v Speaker 1>I'm trying to think. We were ingesting the

01:31:23.085 --> 01:31:25.965
<v Speaker 1>raw code. We're doing account on fifteen seconds,

01:31:26.445 --> 01:31:27.405
<v Speaker 1>and then

01:31:27.725 --> 01:31:29.244
<v Speaker 1>it gets sent over.

01:31:31.565 --> 01:31:33.005
<v Speaker 0>Let me just

01:31:33.725 --> 01:31:36.340
<v Speaker 0>make sure we got happy Fluent bits.

01:31:38.980 --> 01:31:42.340
<v Speaker 1>Looks okay. Stream register task. So

01:31:42.980 --> 01:31:44.260
<v Speaker 0>this should be

01:31:45.860 --> 01:31:47.700
<v Speaker 0>let me open that conflict map one more

01:31:47.700 --> 01:31:48.020
<v Speaker 0>time.

01:31:51.864 --> 01:31:53.224
<v Speaker 0>That's the two instead.

01:31:55.065 --> 01:31:57.465
<v Speaker 0>So we created a stream which is

01:32:01.065 --> 01:32:01.625
<v Speaker 0>reading,

01:32:02.810 --> 01:32:04.889
<v Speaker 0>for creates a stream called Rawkode,

01:32:05.210 --> 01:32:07.290
<v Speaker 0>which is gonna rate new data with a

01:32:07.290 --> 01:32:08.969
<v Speaker 0>tag stream dot Rawkode.

01:32:09.210 --> 01:32:11.530
<v Speaker 0>And it's doing that based on anything that

01:32:11.530 --> 01:32:14.010
<v Speaker 0>comes through from a tag Rawkode.

01:32:14.985 --> 01:32:17.465
<v Speaker 0>And in order to facilitate the tag Rawkode,

01:32:17.465 --> 01:32:19.305
<v Speaker 0>we added a new output

01:32:19.465 --> 01:32:20.105
<v Speaker 0>here

01:32:20.585 --> 01:32:23.785
<v Speaker 0>which matches on Oh, it's it's streaming that

01:32:23.785 --> 01:32:24.745
<v Speaker 2>Rawkode.

01:32:25.305 --> 01:32:28.849
<v Speaker 2>There's no matching rule. Stream that Rawkode. Perfect.

01:32:28.849 --> 01:32:30.449
<v Speaker 1>That's excellent. Okay.

01:32:31.090 --> 01:32:31.889
<v Speaker 0>Alright.

01:32:32.610 --> 01:32:33.329
<v Speaker 0>Okay.

01:32:34.050 --> 01:32:35.889
<v Speaker 0>One more rotation. We should use this for

01:32:35.889 --> 01:32:38.289
<v Speaker 2>the session again. Right? To make it right.

01:32:38.770 --> 01:32:41.010
<v Speaker 0>I always find this kind of situation really

01:32:41.010 --> 01:32:43.325
<v Speaker 0>valuable, you know, because it just make sure

01:32:43.325 --> 01:32:45.645
<v Speaker 0>that you're not taking any assumptions. You understand

01:32:45.645 --> 01:32:47.085
<v Speaker 0>how to fix it, debug it. I think

01:32:47.085 --> 01:32:48.765
<v Speaker 0>there's a lot of value in understanding the

01:32:48.765 --> 01:32:50.845
<v Speaker 0>steps. Oh, absolutely. It's making a lot of

01:32:50.845 --> 01:32:52.605
<v Speaker 0>sense to me every time we change something,

01:32:52.605 --> 01:32:54.365
<v Speaker 0>I'm starting to get a picture how everything

01:32:54.365 --> 01:32:55.565
<v Speaker 0>comes together. So

01:32:56.045 --> 01:32:58.390
<v Speaker 0>yeah, let's get this port forward going. Wait

01:32:58.390 --> 01:33:01.110
<v Speaker 0>fifteen seconds and I'm sure we will have

01:33:01.110 --> 01:33:02.230
<v Speaker 0>everything we need.

01:33:03.670 --> 01:33:04.950
<v Speaker 1>I feel like I need to do like

01:33:04.950 --> 01:33:05.670
<v Speaker 1>a drum roll.

01:33:09.305 --> 01:33:12.425
<v Speaker 0>Hey. Look at that. There it is. Nice.

01:33:12.425 --> 01:33:14.344
<v Speaker 2>We got some numbers.

01:33:14.745 --> 01:33:16.745
<v Speaker 0>Alright. Let's connect

01:33:16.745 --> 01:33:18.185
<v Speaker 0>our timestamp field.

01:33:19.705 --> 01:33:22.025
<v Speaker 0>I'm assuming when we go to discover, is

01:33:22.025 --> 01:33:23.545
<v Speaker 0>this gonna show the counts?

01:33:25.410 --> 01:33:27.490
<v Speaker 1>Yeah. Yeah. Yeah. I think it so we

01:33:27.490 --> 01:33:29.010
<v Speaker 1>put count as

01:33:29.410 --> 01:33:31.410
<v Speaker 1>it's, like, total count or something?

01:33:32.130 --> 01:33:32.850
<v Speaker 2>Yeah.

01:33:35.250 --> 01:33:37.170
<v Speaker 1>I I think I changed the index on

01:33:37.170 --> 01:33:38.930
<v Speaker 1>the top left. Yeah.

01:33:39.090 --> 01:33:40.290
<v Speaker 2>Yeah. Yeah. Bit queue.

01:33:44.545 --> 01:33:46.465
<v Speaker 0>There we go. Total count.

01:33:47.425 --> 01:33:48.144
<v Speaker 1>Perfect.

01:33:48.225 --> 01:33:50.784
<v Speaker 1>I see. Real time aggregation

01:33:51.745 --> 01:33:53.185
<v Speaker 0>from our stream of logs.

01:33:54.889 --> 01:33:56.889
<v Speaker 1>Yeah. There's there's some really cool functions in

01:33:56.889 --> 01:33:58.170
<v Speaker 1>there as well. So you can do, like,

01:33:58.170 --> 01:34:00.329
<v Speaker 1>max, you can do min, average

01:34:00.810 --> 01:34:03.369
<v Speaker 1>of, like, metric values. You can do

01:34:04.409 --> 01:34:05.769
<v Speaker 1>time series prediction.

01:34:06.010 --> 01:34:08.825
<v Speaker 1>So you can say predict sixty seconds in

01:34:08.825 --> 01:34:10.745
<v Speaker 1>the future or, you know, ten hours in

01:34:10.745 --> 01:34:12.985
<v Speaker 1>the future what my CPU or memory usage

01:34:12.985 --> 01:34:13.784
<v Speaker 1>look like.

01:34:14.505 --> 01:34:17.145
<v Speaker 1>But, yeah, basically does that. So is one

01:34:17.145 --> 01:34:19.065
<v Speaker 0>of the use cases that this would facilitate

01:34:19.065 --> 01:34:20.505
<v Speaker 0>then? Like, you know,

01:34:20.900 --> 01:34:22.739
<v Speaker 0>got a distributed architecture

01:34:22.739 --> 01:34:25.540
<v Speaker 0>running on Kubernetes and hundreds if not thousands

01:34:25.540 --> 01:34:27.699
<v Speaker 0>of micro services and I wanna do some

01:34:27.699 --> 01:34:30.340
<v Speaker 0>sort of crude anomaly detection based on the

01:34:30.340 --> 01:34:32.260
<v Speaker 0>number of messages over a given window pair

01:34:32.260 --> 01:34:34.020
<v Speaker 0>of service. That's just gonna allow me to

01:34:34.020 --> 01:34:36.455
<v Speaker 0>layer in real time based on that stream

01:34:36.455 --> 01:34:38.375
<v Speaker 0>of logs. Is that roughly what the use

01:34:38.375 --> 01:34:39.255
<v Speaker 0>case is here?

01:34:39.735 --> 01:34:40.935
<v Speaker 1>Exactly.

01:34:40.935 --> 01:34:42.535
<v Speaker 1>Is prediction,

01:34:42.535 --> 01:34:43.815
<v Speaker 1>anomaly detection,

01:34:44.215 --> 01:34:46.535
<v Speaker 1>as well as reducing data. Give me a

01:34:46.535 --> 01:34:49.610
<v Speaker 1>summary of the of the 10,000 logs that

01:34:49.610 --> 01:34:50.410
<v Speaker 1>just appeared,

01:34:50.890 --> 01:34:52.410
<v Speaker 1>and then send me the summary. Don't send

01:34:52.410 --> 01:34:54.090
<v Speaker 1>me those 10,000 raw logs.

01:34:54.970 --> 01:34:55.850
<v Speaker 0>Awesome.

01:34:56.010 --> 01:34:57.530
<v Speaker 0>That is that's great. Let

01:34:58.570 --> 01:35:00.010
<v Speaker 0>me pop back over here.

01:35:01.050 --> 01:35:02.010
<v Speaker 0>I think

01:35:03.395 --> 01:35:05.235
<v Speaker 0>well, for a start, you know, that's all

01:35:05.235 --> 01:35:06.995
<v Speaker 0>really, really cool. I'm I'm really happy with

01:35:06.995 --> 01:35:08.515
<v Speaker 0>what we got covered, what we showed off

01:35:08.515 --> 01:35:10.195
<v Speaker 0>there. Is there anything else that you wanna

01:35:10.195 --> 01:35:12.355
<v Speaker 0>show before we disappear? I am cautious that

01:35:12.355 --> 01:35:13.875
<v Speaker 0>I've taken up a lot of your time,

01:35:13.875 --> 01:35:14.594
<v Speaker 0>so I'll

01:35:15.315 --> 01:35:16.915
<v Speaker 0>I'll I'll leave it in No. Actually, are

01:35:16.915 --> 01:35:18.515
<v Speaker 2>really happy about all of this.

01:35:19.200 --> 01:35:19.840
<v Speaker 2>Yeah.

01:35:20.480 --> 01:35:22.480
<v Speaker 2>Well, I I think that we have a

01:35:22.480 --> 01:35:24.880
<v Speaker 2>couple of news to share. So from a

01:35:24.880 --> 01:35:26.080
<v Speaker 2>pre perspective,

01:35:26.400 --> 01:35:28.960
<v Speaker 2>Fluent Bit one dot seven, which is like

01:35:28.960 --> 01:35:31.120
<v Speaker 2>a major release, is coming out in a

01:35:31.120 --> 01:35:33.725
<v Speaker 2>few weeks. We are targeting the end of

01:35:33.725 --> 01:35:36.045
<v Speaker 2>this month, maybe February

01:35:36.125 --> 01:35:37.165
<v Speaker 2>based on

01:35:37.405 --> 01:35:38.925
<v Speaker 2>on testing QA.

01:35:38.925 --> 01:35:41.565
<v Speaker 2>Right? We're working very close with Google, Amazon,

01:35:41.565 --> 01:35:42.285
<v Speaker 2>Microsoft.

01:35:42.685 --> 01:35:45.245
<v Speaker 2>And because this release, what is really important

01:35:45.245 --> 01:35:46.525
<v Speaker 2>is about performance.

01:35:47.190 --> 01:35:49.910
<v Speaker 2>Right? Fluent Bit has been times faster than

01:35:49.910 --> 01:35:51.750
<v Speaker 2>Fluentd for data processing,

01:35:51.750 --> 01:35:52.869
<v Speaker 2>data delivery,

01:35:53.270 --> 01:35:55.670
<v Speaker 2>but usually, there are big users that say,

01:35:55.670 --> 01:35:58.389
<v Speaker 2>no. I want higher throughput higher throughput.

01:35:58.630 --> 01:36:01.825
<v Speaker 2>I have 48 CPUs. Why don't use at

01:36:01.825 --> 01:36:03.265
<v Speaker 2>least a fraction of them?

01:36:03.505 --> 01:36:05.745
<v Speaker 2>So Fluent Bit used to be like single

01:36:05.745 --> 01:36:08.465
<v Speaker 2>core a c it's a single core. Yeah.

01:36:08.465 --> 01:36:09.745
<v Speaker 2>One single thread.

01:36:09.985 --> 01:36:12.625
<v Speaker 2>While working, it does a lot of asynchronous

01:36:12.625 --> 01:36:14.225
<v Speaker 2>IO with coroutines.

01:36:14.620 --> 01:36:16.620
<v Speaker 2>So it does a pretty nice job on

01:36:16.620 --> 01:36:19.099
<v Speaker 2>scheduling all that stuff internally

01:36:19.739 --> 01:36:20.940
<v Speaker 2>without blocking.

01:36:21.260 --> 01:36:23.980
<v Speaker 2>But in some cases, you need I need

01:36:23.980 --> 01:36:25.580
<v Speaker 2>to you know that you need to increase

01:36:25.580 --> 01:36:26.380
<v Speaker 2>your your throughput.

01:36:26.975 --> 01:36:29.375
<v Speaker 2>And one of the most expensive things on

01:36:29.375 --> 01:36:31.615
<v Speaker 2>all this pipeline is, like, for example, when

01:36:31.615 --> 01:36:34.014
<v Speaker 2>we send the data to Elasticsearch,

01:36:34.335 --> 01:36:36.975
<v Speaker 2>we need to convert back our binary data

01:36:36.975 --> 01:36:37.935
<v Speaker 2>representation

01:36:37.935 --> 01:36:39.775
<v Speaker 2>in message effect, which is like a kind

01:36:39.775 --> 01:36:41.695
<v Speaker 2>of JSON but in binary

01:36:42.210 --> 01:36:44.770
<v Speaker 2>to the expected payload by elastic, and that

01:36:44.770 --> 01:36:45.650
<v Speaker 2>is JSON.

01:36:45.970 --> 01:36:47.570
<v Speaker 2>And that is really expensive.

01:36:47.730 --> 01:36:50.449
<v Speaker 2>You know, composed JSON string is really expensive.

01:36:50.850 --> 01:36:52.850
<v Speaker 2>So if you have one pipeline where you

01:36:52.850 --> 01:36:53.970
<v Speaker 2>are sending the data out,

01:36:54.955 --> 01:36:56.795
<v Speaker 2>you need to convert that. So and that

01:36:56.795 --> 01:36:58.954
<v Speaker 2>blocks, you know, the other operations.

01:36:59.355 --> 01:37:01.515
<v Speaker 2>So the improvement that we have been working

01:37:01.515 --> 01:37:04.155
<v Speaker 2>for the latest weeks is to add multithreading

01:37:04.155 --> 01:37:04.954
<v Speaker 2>support.

01:37:05.435 --> 01:37:07.195
<v Speaker 2>So right now, when you're going to run

01:37:07.195 --> 01:37:10.369
<v Speaker 2>your output plug into your output destination, optionally,

01:37:10.369 --> 01:37:13.730
<v Speaker 2>you can say, please create two workers for

01:37:13.730 --> 01:37:14.689
<v Speaker 2>this output.

01:37:15.810 --> 01:37:18.050
<v Speaker 2>And, generally, there will be two parallel,

01:37:18.290 --> 01:37:21.090
<v Speaker 2>like, threads. Right? That when you're going to

01:37:21.090 --> 01:37:23.250
<v Speaker 2>send the data, this data will be processed.

01:37:23.535 --> 01:37:26.015
<v Speaker 2>All the JSON composer will happen in separate

01:37:26.015 --> 01:37:26.655
<v Speaker 2>thread,

01:37:27.535 --> 01:37:30.095
<v Speaker 2>you know, and that increase the throughput by

01:37:30.255 --> 01:37:32.095
<v Speaker 2>I don't know, Anurag, how many times? Like,

01:37:32.095 --> 01:37:33.455
<v Speaker 2>five times, 10 times?

01:37:34.495 --> 01:37:36.815
<v Speaker 1>We're we're shooting for Crazy. For a lot.

01:37:36.815 --> 01:37:38.900
<v Speaker 1>Yeah. So, yeah, that comes out the end

01:37:38.900 --> 01:37:40.340
<v Speaker 1>of the month, and then we also have

01:37:40.340 --> 01:37:41.699
<v Speaker 1>a conference for,

01:37:41.940 --> 01:37:42.979
<v Speaker 1>Fluentcon.

01:37:43.060 --> 01:37:44.739
<v Speaker 1>That's gonna be side by side with KubeCon

01:37:44.739 --> 01:37:45.300
<v Speaker 1>Europe.

01:37:45.620 --> 01:37:48.100
<v Speaker 1>The CFPs or the call for proposals opens

01:37:48.100 --> 01:37:49.059
<v Speaker 1>up next week,

01:37:49.460 --> 01:37:52.455
<v Speaker 1>so we encourage folks to, to apply. We'd

01:37:52.455 --> 01:37:54.534
<v Speaker 1>love to see sessions about float d, float

01:37:54.534 --> 01:37:55.094
<v Speaker 1>bit,

01:37:55.574 --> 01:37:57.335
<v Speaker 1>and, yeah, you'll, of course, be able to

01:37:57.335 --> 01:37:59.335
<v Speaker 1>come learn a lot more, of of all

01:37:59.335 --> 01:38:02.295
<v Speaker 1>the use cases, how folks in financial security,

01:38:02.295 --> 01:38:04.374
<v Speaker 1>etcetera, are using all this. So

01:38:05.094 --> 01:38:05.415
<v Speaker 1>awesome.

01:38:06.480 --> 01:38:09.680
<v Speaker 0>Well, that's awesome. I'm really excited. Looking forward

01:38:09.680 --> 01:38:11.920
<v Speaker 0>to 1.7. I can't wait to bench in

01:38:11.920 --> 01:38:13.520
<v Speaker 0>all of the conference talks as well and

01:38:13.520 --> 01:38:15.200
<v Speaker 0>learn a whole lot more. Thank you both

01:38:15.200 --> 01:38:16.320
<v Speaker 0>for taking the time out of your day

01:38:16.320 --> 01:38:18.480
<v Speaker 0>and joining me today. Really impressed with the

01:38:18.480 --> 01:38:20.240
<v Speaker 0>software. Can't wait to see what comes next,

01:38:20.235 --> 01:38:21.835
<v Speaker 0>and I hope you all have a great

01:38:21.835 --> 01:38:22.474
<v Speaker 0>weekend.

01:38:22.715 --> 01:38:25.114
<v Speaker 1>Thanks. You as well. Thanks for all. Cheers.

01:38:25.915 --> 01:38:26.474
<v Speaker 0>Bye.

01:38:27.114 --> 01:38:27.435
<v Speaker 0>Thanks.
