WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 07dd4290-47a1-419d-b510-3b3043c2038d
Created: 2025-04-29T22:16:24.297Z
Duration: 4185.0093
Channels: 1

00:01:15.705 --> 00:01:16.585
<v Speaker 0>Hello,

00:01:16.665 --> 00:01:17.465
<v Speaker 0>and welcome.

00:01:18.210 --> 00:01:19.650
<v Speaker 0>You know, I used to really like the

00:01:19.650 --> 00:01:21.330
<v Speaker 0>ending of the intro, and that noise is

00:01:21.330 --> 00:01:23.490
<v Speaker 0>really starting to create on me after 18

00:01:23.490 --> 00:01:26.130
<v Speaker 0>to nineteen fifty six. Oh, I like it.

00:01:26.130 --> 00:01:28.210
<v Speaker 1>I mean, the noise is a bit grating,

00:01:28.210 --> 00:01:29.890
<v Speaker 1>but, no, it's like it's a joke. Like

00:01:29.890 --> 00:01:31.810
<v Speaker 1>like, it has a narrative. I like it.

00:01:32.355 --> 00:01:33.955
<v Speaker 0>I took a lot of inspiration from the

00:01:33.955 --> 00:01:35.395
<v Speaker 0>IT crowd. I don't know if you've seen

00:01:35.395 --> 00:01:36.755
<v Speaker 0>that. At the end of their intro, it's

00:01:36.755 --> 00:01:39.475
<v Speaker 0>like this annoying crashing noise. Yeah. Yeah. Yeah.

00:01:39.475 --> 00:01:40.915
<v Speaker 1>Have you tried turning it off and on

00:01:40.915 --> 00:01:43.155
<v Speaker 1>again? Exactly. Exactly.

00:01:43.475 --> 00:01:45.075
<v Speaker 0>And so thank you for joining me today.

00:01:45.075 --> 00:01:46.995
<v Speaker 0>I'm here with Dan and Alan from Tilt.

00:01:47.040 --> 00:01:48.640
<v Speaker 0>We're gonna take a look at how to

00:01:48.640 --> 00:01:51.360
<v Speaker 0>make development against Kubernetes easier.

00:01:51.840 --> 00:01:54.320
<v Speaker 0>Welcome. Thank you for joining me. Yeah. Thanks

00:01:54.320 --> 00:01:56.080
<v Speaker 1>for having us. Good to be here.

00:01:56.800 --> 00:02:00.080
<v Speaker 2>Yep. Looking forward to talking a bunch about,

00:02:00.080 --> 00:02:01.745
<v Speaker 2>you know, containers,

00:02:01.745 --> 00:02:03.665
<v Speaker 2>crashing things, that kind of stuff.

00:02:04.945 --> 00:02:07.585
<v Speaker 0>Well, isn't the goal in dream of containers

00:02:07.585 --> 00:02:09.665
<v Speaker 0>that it makes all of our lives easier?

00:02:09.665 --> 00:02:10.785
<v Speaker 0>So, you know,

00:02:11.345 --> 00:02:14.785
<v Speaker 0>developing against Kubernetes should be by association easy.

00:02:14.865 --> 00:02:15.505
<v Speaker 0>Is that correct?

00:02:16.760 --> 00:02:17.960
<v Speaker 2>That is Yeah.

00:02:18.439 --> 00:02:19.400
<v Speaker 2>Should be.

00:02:22.040 --> 00:02:23.959
<v Speaker 1>Sorry, l. I think I spoke over you

00:02:23.959 --> 00:02:24.600
<v Speaker 1>there.

00:02:25.640 --> 00:02:28.040
<v Speaker 2>Yeah. It's kinda hard to coordinate. Right? We

00:02:28.040 --> 00:02:29.959
<v Speaker 2>should have, like, a little arrow or something.

00:02:31.355 --> 00:02:34.235
<v Speaker 2>No. Yeah. So developing Kubernetes should be very

00:02:34.235 --> 00:02:34.795
<v Speaker 2>easy.

00:02:35.435 --> 00:02:36.395
<v Speaker 2>Unfortunately,

00:02:36.395 --> 00:02:38.875
<v Speaker 2>out of the box, it's not. But fortunately,

00:02:39.115 --> 00:02:41.355
<v Speaker 2>there's people like me and Dan working on

00:02:41.355 --> 00:02:43.915
<v Speaker 2>tools to make that the case for you.

00:02:43.915 --> 00:02:44.235
<v Speaker 2>So

00:02:45.150 --> 00:02:47.470
<v Speaker 2>not all is lost. There is still hope.

00:02:48.269 --> 00:02:50.989
<v Speaker 0>So let's start with a basic question then.

00:02:50.989 --> 00:02:52.670
<v Speaker 0>What is Tilt?

00:02:54.510 --> 00:02:57.790
<v Speaker 1>Yeah. So Tilt's like a little it's a

00:02:57.790 --> 00:02:59.469
<v Speaker 1>program that runs on your laptop

00:03:00.055 --> 00:03:02.695
<v Speaker 1>and it watches what you're doing. So, like,

00:03:02.695 --> 00:03:05.575
<v Speaker 1>as you're coding, it sees what files you're

00:03:05.575 --> 00:03:06.295
<v Speaker 1>editing,

00:03:07.975 --> 00:03:10.055
<v Speaker 1>and it will run workflows,

00:03:10.055 --> 00:03:12.775
<v Speaker 1>like building container images and

00:03:13.255 --> 00:03:16.840
<v Speaker 1>Kubacuddle applying them and everything you need to

00:03:16.840 --> 00:03:17.400
<v Speaker 1>do

00:03:18.280 --> 00:03:21.320
<v Speaker 1>as you're developing. It will run those workflows,

00:03:21.640 --> 00:03:23.640
<v Speaker 1>and then it will show you what you

00:03:23.640 --> 00:03:24.600
<v Speaker 1>need to see,

00:03:24.920 --> 00:03:27.320
<v Speaker 1>which sometimes is logs

00:03:27.480 --> 00:03:28.680
<v Speaker 1>from the running

00:03:28.760 --> 00:03:29.480
<v Speaker 1>containers.

00:03:29.985 --> 00:03:32.465
<v Speaker 1>Sometimes it's build errors

00:03:32.705 --> 00:03:36.785
<v Speaker 1>from the build. Sometimes it's, hey. Your YAML

00:03:36.864 --> 00:03:38.465
<v Speaker 1>is misconfigured.

00:03:38.465 --> 00:03:41.025
<v Speaker 1>Sometimes it's this unit test is failing.

00:03:42.305 --> 00:03:44.705
<v Speaker 1>And to to save you from having to

00:03:44.705 --> 00:03:48.200
<v Speaker 1>play, like, 20 questions with Kubikudal

00:03:48.200 --> 00:03:51.080
<v Speaker 1>to figure out where the problem is as

00:03:51.080 --> 00:03:52.120
<v Speaker 1>you're developing.

00:03:57.480 --> 00:03:59.715
<v Speaker 0>Okay. So Tilt is a sorry,

00:03:59.955 --> 00:04:02.034
<v Speaker 0>Tilt is a tool that allows me to

00:04:02.034 --> 00:04:02.915
<v Speaker 0>describe

00:04:03.875 --> 00:04:05.555
<v Speaker 0>my application components,

00:04:05.555 --> 00:04:08.595
<v Speaker 0>and then it monitors my source code,

00:04:08.995 --> 00:04:10.834
<v Speaker 0>and then makes magic happen, and my things

00:04:10.834 --> 00:04:11.875
<v Speaker 0>run on Kubernetes.

00:04:12.510 --> 00:04:14.030
<v Speaker 0>And then you go a little bit beyond

00:04:14.030 --> 00:04:16.270
<v Speaker 0>that and you allow me to see logs.

00:04:16.270 --> 00:04:18.830
<v Speaker 0>Is that a good summation of what you

00:04:18.830 --> 00:04:19.470
<v Speaker 0>said? Let

00:04:19.950 --> 00:04:21.550
<v Speaker 2>me let me interrupt you a little bit.

00:04:21.550 --> 00:04:23.710
<v Speaker 2>So Dan talked a bunch about

00:04:23.950 --> 00:04:26.590
<v Speaker 2>basically the headaches that Tilt saves you from.

00:04:27.235 --> 00:04:29.475
<v Speaker 2>But I think it's also important to note

00:04:29.475 --> 00:04:32.355
<v Speaker 2>like what it is that it achieves once

00:04:32.355 --> 00:04:34.595
<v Speaker 2>everything is up and running. And then basically,

00:04:35.475 --> 00:04:36.355
<v Speaker 2>right now,

00:04:36.675 --> 00:04:39.795
<v Speaker 2>basically by default, let's say, Docker and Kubernetes,

00:04:40.600 --> 00:04:42.680
<v Speaker 2>As you're developing your application, every time you

00:04:42.680 --> 00:04:45.240
<v Speaker 2>make a change you have to kubectl apply,

00:04:45.240 --> 00:04:46.759
<v Speaker 2>docker build, docker push. You have to do

00:04:46.759 --> 00:04:49.639
<v Speaker 2>a bunch of things. It takes time and

00:04:49.639 --> 00:04:52.280
<v Speaker 2>most importantly, in my opinion, it takes cognitive

00:04:52.280 --> 00:04:54.325
<v Speaker 2>effort. So as a developer, you have to

00:04:54.325 --> 00:04:56.485
<v Speaker 2>stop coding and then get distracted typing a

00:04:56.485 --> 00:04:57.365
<v Speaker 2>bunch of commands.

00:04:57.845 --> 00:05:00.245
<v Speaker 2>So one is that Tilt saves you from

00:05:00.245 --> 00:05:02.485
<v Speaker 2>that. So everything is automated. You basically save

00:05:02.485 --> 00:05:05.765
<v Speaker 2>your file and your application gets updated live

00:05:05.765 --> 00:05:08.565
<v Speaker 2>on your developing cluster. Then you can

00:05:09.030 --> 00:05:11.349
<v Speaker 2>test the functionality that you just wrote or

00:05:11.349 --> 00:05:13.910
<v Speaker 2>you can go on and keep coding.

00:05:14.870 --> 00:05:16.710
<v Speaker 2>The other thing that it does is, one,

00:05:16.710 --> 00:05:18.710
<v Speaker 2>it automates it and the second thing is

00:05:18.710 --> 00:05:21.430
<v Speaker 2>it makes it very, very, very, very fast.

00:05:22.015 --> 00:05:24.335
<v Speaker 2>So you can have that workflow where every

00:05:24.335 --> 00:05:25.855
<v Speaker 2>time you make a change you rebuild an

00:05:25.855 --> 00:05:28.175
<v Speaker 2>image, you push it to a cluster, the

00:05:28.175 --> 00:05:29.935
<v Speaker 2>cluster Kubernetes

00:05:30.095 --> 00:05:32.095
<v Speaker 2>spins down one version, spins up the other

00:05:32.095 --> 00:05:33.855
<v Speaker 2>one, that whole thing. But that takes time.

00:05:34.270 --> 00:05:36.270
<v Speaker 2>And Tilt also allows you to do what

00:05:36.270 --> 00:05:38.509
<v Speaker 2>we call it live reload, other tools call

00:05:38.509 --> 00:05:39.710
<v Speaker 2>it hot reload.

00:05:39.789 --> 00:05:41.550
<v Speaker 2>Basically, what this means is you save your

00:05:41.550 --> 00:05:43.710
<v Speaker 2>file, the file gets synced up to your

00:05:43.710 --> 00:05:44.350
<v Speaker 2>cluster,

00:05:44.830 --> 00:05:47.389
<v Speaker 2>everything updates inside the container without killing the

00:05:47.389 --> 00:05:47.710
<v Speaker 2>container.

00:05:48.245 --> 00:05:50.645
<v Speaker 2>And the results of all this is basically

00:05:50.645 --> 00:05:52.405
<v Speaker 2>you save your file, you blink your eyes,

00:05:52.405 --> 00:05:54.565
<v Speaker 2>the new version's up and running. So, you

00:05:54.565 --> 00:05:56.085
<v Speaker 2>get that lots

00:05:56.085 --> 00:05:58.485
<v Speaker 2>of people mention that they miss

00:05:59.205 --> 00:06:01.770
<v Speaker 2>that instant feedback from when they were working

00:06:01.770 --> 00:06:03.450
<v Speaker 2>on, I don't know, Ruby on Rails or

00:06:03.450 --> 00:06:06.090
<v Speaker 2>something like that. And basically, Tilt lets you

00:06:06.090 --> 00:06:08.010
<v Speaker 2>achieve that but

00:06:08.889 --> 00:06:10.090
<v Speaker 2>with containers

00:06:10.090 --> 00:06:11.610
<v Speaker 2>running on Kubernetes.

00:06:11.770 --> 00:06:13.450
<v Speaker 2>So it's maximum convenience

00:06:13.450 --> 00:06:15.930
<v Speaker 2>and zero headache once everything is set up.

00:06:17.585 --> 00:06:19.025
<v Speaker 0>Okay. So I guess

00:06:19.265 --> 00:06:21.345
<v Speaker 0>it's fair to say then that Tilt exists

00:06:21.345 --> 00:06:23.985
<v Speaker 0>to make people's lives easier developing against Kubernetes.

00:06:23.985 --> 00:06:26.865
<v Speaker 0>Now are there any opinions with regards to

00:06:26.865 --> 00:06:28.305
<v Speaker 0>the toolings that I can work with, or

00:06:28.305 --> 00:06:30.065
<v Speaker 0>can I use Tilt to develop any application?

00:06:32.800 --> 00:06:33.360
<v Speaker 1>Yeah.

00:06:34.400 --> 00:06:37.040
<v Speaker 1>This is this is really important to us,

00:06:37.360 --> 00:06:38.320
<v Speaker 1>because, like,

00:06:38.800 --> 00:06:39.920
<v Speaker 1>some tools like,

00:06:40.480 --> 00:06:43.840
<v Speaker 1>Bazel or Kubernetes itself are very opinionated,

00:06:43.840 --> 00:06:45.705
<v Speaker 1>and they're like, we're going to get you

00:06:45.705 --> 00:06:46.905
<v Speaker 1>to a great place

00:06:47.145 --> 00:06:49.865
<v Speaker 1>once you adopt everything that we believe.

00:06:50.345 --> 00:06:52.985
<v Speaker 1>But with Tilt, we're really into mister Rogers

00:06:52.985 --> 00:06:53.945
<v Speaker 1>onboarding,

00:06:54.105 --> 00:06:56.345
<v Speaker 1>where mister Rogers, longtime

00:06:56.425 --> 00:06:59.370
<v Speaker 1>children's television show host, always said, I like

00:06:59.370 --> 00:07:00.810
<v Speaker 1>you just the way you are.

00:07:01.290 --> 00:07:03.530
<v Speaker 1>Tilt likes your project just the way it

00:07:03.530 --> 00:07:04.010
<v Speaker 1>is.

00:07:04.570 --> 00:07:06.650
<v Speaker 1>However you do YAML generation,

00:07:06.970 --> 00:07:09.370
<v Speaker 1>whatever you use to build images,

00:07:10.010 --> 00:07:13.375
<v Speaker 1>however you're running things, we want Tilt to

00:07:13.375 --> 00:07:16.655
<v Speaker 1>have the right, escape hooks so that you

00:07:16.655 --> 00:07:19.375
<v Speaker 1>can, make it fit with your project,

00:07:19.695 --> 00:07:20.975
<v Speaker 1>whatever you're doing.

00:07:22.815 --> 00:07:25.310
<v Speaker 0>K. So that sounds great then. I can

00:07:25.310 --> 00:07:28.030
<v Speaker 0>use Tilt to describe my application, make developing

00:07:28.030 --> 00:07:30.349
<v Speaker 0>against Kubernetes easier, and you don't have any

00:07:30.509 --> 00:07:32.750
<v Speaker 0>you don't mind which tools I'm using. So

00:07:33.069 --> 00:07:34.270
<v Speaker 0>that sounds pretty awesome

00:07:34.990 --> 00:07:38.375
<v Speaker 0>so far. I'm impressed. Now do you sorry.

00:07:38.375 --> 00:07:41.895
<v Speaker 2>One yeah. One important detail is that most

00:07:41.895 --> 00:07:43.974
<v Speaker 2>tools that are kind of in the same

00:07:43.974 --> 00:07:46.535
<v Speaker 2>realm as Tilts, they use YAML as the

00:07:46.535 --> 00:07:48.615
<v Speaker 2>config file. So the way you declare all

00:07:48.615 --> 00:07:50.775
<v Speaker 2>your services and you do all your automation

00:07:50.775 --> 00:07:53.810
<v Speaker 2>and etcetera is using YAML. And, YAML is

00:07:53.810 --> 00:07:55.970
<v Speaker 2>a flat config. It's not like a programming

00:07:55.970 --> 00:07:57.890
<v Speaker 2>language. It's not a full fledged thing that

00:07:57.890 --> 00:08:00.210
<v Speaker 2>can do anything you want, basically. It has

00:08:00.210 --> 00:08:01.250
<v Speaker 2>tons of limitations.

00:08:02.050 --> 00:08:04.574
<v Speaker 2>And, a big advantage of Tilt and even

00:08:04.574 --> 00:08:06.335
<v Speaker 2>before I joined Tilt, it's one of the

00:08:06.335 --> 00:08:08.735
<v Speaker 2>things I was working for another company in

00:08:08.735 --> 00:08:10.495
<v Speaker 2>this realm and I was thinking, Oh, damn.

00:08:10.495 --> 00:08:12.335
<v Speaker 2>If only we could do that. And that

00:08:12.335 --> 00:08:13.535
<v Speaker 2>is the fact that

00:08:14.255 --> 00:08:17.055
<v Speaker 2>config files for Tilts, they're made in Starlark.

00:08:17.350 --> 00:08:19.990
<v Speaker 2>And that is basically Python, slightly different.

00:08:20.790 --> 00:08:22.790
<v Speaker 2>So, you have loops, you have variables, you

00:08:22.790 --> 00:08:25.270
<v Speaker 2>can open files, you can run system commands,

00:08:25.430 --> 00:08:26.790
<v Speaker 2>you can do anything you want. So, it's

00:08:26.790 --> 00:08:29.270
<v Speaker 2>very easy to adapt whatever you have. And

00:08:29.270 --> 00:08:30.950
<v Speaker 2>when I say whatever I mean it because

00:08:30.950 --> 00:08:33.725
<v Speaker 2>we have people writing extensions for Tilts that

00:08:33.725 --> 00:08:36.284
<v Speaker 2>we could not even have dreamed of before.

00:08:37.964 --> 00:08:40.524
<v Speaker 2>People are automating stuff that we

00:08:40.845 --> 00:08:43.245
<v Speaker 2>need to stop and think to understand what

00:08:43.245 --> 00:08:44.685
<v Speaker 2>they're doing because it's something so,

00:08:45.220 --> 00:08:48.180
<v Speaker 2>basically, so outlandish for us. And what this

00:08:48.180 --> 00:08:50.740
<v Speaker 2>means is, literally, whatever you're doing, if your

00:08:50.740 --> 00:08:52.580
<v Speaker 2>computer can run it, Tilt can work with

00:08:52.580 --> 00:08:53.060
<v Speaker 2>it.

00:08:54.900 --> 00:08:56.100
<v Speaker 0>Okay. So

00:08:57.635 --> 00:08:59.955
<v Speaker 0>you're removing YAML from my life, which right

00:08:59.955 --> 00:09:01.475
<v Speaker 0>away gets a tick. I'm very happy with

00:09:01.475 --> 00:09:04.035
<v Speaker 0>that. But I have worked with with that

00:09:04.035 --> 00:09:06.675
<v Speaker 0>language before. Sorry. Starlock. Right? That's the one.

00:09:06.675 --> 00:09:08.035
<v Speaker 0>The same one that Bazel uses. Is that

00:09:08.035 --> 00:09:10.835
<v Speaker 0>correct? Yes. Or okay. And I have found

00:09:10.835 --> 00:09:12.080
<v Speaker 0>that quite

00:09:12.240 --> 00:09:14.480
<v Speaker 0>difficult. So I'm looking forward then today to

00:09:14.480 --> 00:09:16.400
<v Speaker 0>learning how I can put that behind me

00:09:16.400 --> 00:09:18.640
<v Speaker 0>then because I I tried to write Bazel

00:09:18.640 --> 00:09:21.440
<v Speaker 0>build files before. I love the idea, especially

00:09:21.440 --> 00:09:24.080
<v Speaker 0>as organizations are adopting mono repositories

00:09:24.245 --> 00:09:26.245
<v Speaker 0>of using Bazel as a build tool. Unfortunately,

00:09:26.245 --> 00:09:27.445
<v Speaker 0>that means you have to run Bazel as

00:09:27.445 --> 00:09:29.204
<v Speaker 0>a build tool, which I've not really appreciated

00:09:29.204 --> 00:09:29.845
<v Speaker 0>yet.

00:09:30.245 --> 00:09:31.764
<v Speaker 0>Yeah. And a part of that is config.

00:09:31.764 --> 00:09:33.125
<v Speaker 0>The other part is that I generally never

00:09:33.125 --> 00:09:35.125
<v Speaker 0>have Java on my machine. So there's a

00:09:35.125 --> 00:09:37.285
<v Speaker 0>few things there. Tilt is not running in

00:09:37.285 --> 00:09:39.940
<v Speaker 0>Java. Is that right? Correct. It's Go and

00:09:39.940 --> 00:09:41.700
<v Speaker 1>TypeScript for the UI.

00:09:42.580 --> 00:09:44.980
<v Speaker 0>Nice. I I like TypeScript, and I definitely

00:09:44.980 --> 00:09:47.140
<v Speaker 0>like Go. So that's we're we're running there.

00:09:47.300 --> 00:09:50.180
<v Speaker 0>As far as, you know, Tilt Go, is

00:09:50.180 --> 00:09:52.980
<v Speaker 0>this something that you feel that all development

00:09:52.980 --> 00:09:55.555
<v Speaker 0>teams deploying to Kubernetes should be using for

00:09:55.555 --> 00:09:57.715
<v Speaker 0>their development environments, or are there any caveats

00:09:57.715 --> 00:09:59.235
<v Speaker 0>around the usage of Tilt?

00:10:00.355 --> 00:10:00.595
<v Speaker 1>I

00:10:02.195 --> 00:10:05.155
<v Speaker 1>we we say if you use Kubernetes in

00:10:05.155 --> 00:10:08.710
<v Speaker 1>prod, you need Tilt for dev. I could

00:10:08.950 --> 00:10:11.990
<v Speaker 1>imagine, like, maybe you just have one Kubernetes

00:10:11.990 --> 00:10:12.950
<v Speaker 1>deployment

00:10:13.190 --> 00:10:13.910
<v Speaker 1>and,

00:10:13.990 --> 00:10:16.230
<v Speaker 1>you know, it's it's pretty small,

00:10:16.630 --> 00:10:19.510
<v Speaker 1>that image of, like, just the one box,

00:10:20.390 --> 00:10:22.070
<v Speaker 1>you know, on the back of a container

00:10:22.070 --> 00:10:22.790
<v Speaker 1>flatbed.

00:10:23.285 --> 00:10:26.405
<v Speaker 1>But if you're if you have multiple deployments,

00:10:26.405 --> 00:10:29.125
<v Speaker 1>if you're really using Kubernetes,

00:10:29.845 --> 00:10:30.485
<v Speaker 1>yeah,

00:10:30.885 --> 00:10:33.365
<v Speaker 1>you should probably be using Tilt,

00:10:34.245 --> 00:10:36.485
<v Speaker 1>I think. And if not,

00:10:37.125 --> 00:10:37.525
<v Speaker 1>you know,

00:10:38.750 --> 00:10:40.910
<v Speaker 1>do at me, which I think is something

00:10:40.910 --> 00:10:43.790
<v Speaker 1>that people don't say that much.

00:10:45.230 --> 00:10:46.270
<v Speaker 0>Alright.

00:10:46.270 --> 00:10:47.470
<v Speaker 0>Perfect. I think

00:10:48.029 --> 00:10:50.830
<v Speaker 0>my my interest is piqued. So I think

00:10:50.830 --> 00:10:52.675
<v Speaker 0>we should share my screen. We should go

00:10:52.675 --> 00:10:54.514
<v Speaker 0>through the installation and we should start to

00:10:54.514 --> 00:10:56.035
<v Speaker 0>see how Tilt is gonna make my life

00:10:56.035 --> 00:10:56.834
<v Speaker 0>easier.

00:10:57.634 --> 00:11:00.435
<v Speaker 0>So let me pop up the screen share.

00:11:03.394 --> 00:11:04.194
<v Speaker 1>There we go.

00:11:05.290 --> 00:11:09.050
<v Speaker 0>Alright. So I'm on the GitHub repository.

00:11:10.410 --> 00:11:11.770
<v Speaker 0>Is this the best place for me to

00:11:11.770 --> 00:11:13.930
<v Speaker 0>install it or should I go to tilt.dev?

00:11:13.930 --> 00:11:17.050
<v Speaker 1>Oh, I think if you go to docs.tilt.dev.

00:11:23.655 --> 00:11:25.415
<v Speaker 2>Here you have the here you have the

00:11:25.415 --> 00:11:28.375
<v Speaker 2>fancy guide and you just copy the instructions.

00:11:30.870 --> 00:11:31.670
<v Speaker 0>Alright.

00:11:31.670 --> 00:11:33.270
<v Speaker 0>So I can install Tilt with a nice

00:11:33.270 --> 00:11:34.710
<v Speaker 0>little curl command.

00:11:38.150 --> 00:11:40.310
<v Speaker 0>And I will allow that to paste.

00:11:43.110 --> 00:11:44.630
<v Speaker 0>And I'm sure this won't take more than

00:11:44.630 --> 00:11:45.430
<v Speaker 0>a few seconds.

00:11:46.445 --> 00:11:48.685
<v Speaker 0>I've never had troubles with installations, and that's

00:11:48.685 --> 00:11:50.365
<v Speaker 0>a complete lie. Every time I try to

00:11:50.365 --> 00:11:52.045
<v Speaker 0>install something on the stream, I seem to

00:11:52.045 --> 00:11:54.765
<v Speaker 0>break through or my Internet goes down or

00:11:54.765 --> 00:11:55.485
<v Speaker 0>anything.

00:11:56.125 --> 00:11:57.645
<v Speaker 0>This is looking much better.

00:11:58.125 --> 00:11:59.005
<v Speaker 2>Finger crossed.

00:12:03.639 --> 00:12:05.160
<v Speaker 0>Excellent. Okay. So

00:12:06.519 --> 00:12:07.480
<v Speaker 0>what it's

00:12:07.800 --> 00:12:09.560
<v Speaker 0>it's okay. So step two is I install

00:12:09.560 --> 00:12:11.480
<v Speaker 0>Tilt. Let's assume this is gonna complete in

00:12:11.480 --> 00:12:13.560
<v Speaker 0>the next few seconds. What what's my first

00:12:13.560 --> 00:12:15.945
<v Speaker 0>step if I have an existing project to

00:12:15.945 --> 00:12:18.425
<v Speaker 0>to integrate Tilt into my development workflow?

00:12:19.625 --> 00:12:21.785
<v Speaker 1>If you go back to the docs page,

00:12:21.785 --> 00:12:24.265
<v Speaker 1>there's a tutorial, the first fifteen minutes.

00:12:27.990 --> 00:12:29.190
<v Speaker 0>And awesome.

00:12:31.350 --> 00:12:33.350
<v Speaker 2>So what it says there is you're gonna

00:12:33.350 --> 00:12:35.670
<v Speaker 2>need the Tilt file and, you know, there's

00:12:35.670 --> 00:12:37.590
<v Speaker 2>a Dockerfile and Tilt has a Tilt file.

00:12:37.590 --> 00:12:38.390
<v Speaker 2>It's basically

00:12:39.030 --> 00:12:41.510
<v Speaker 2>in the Tilt file, you're telling Tilt, these

00:12:41.510 --> 00:12:42.310
<v Speaker 2>are my services.

00:12:42.894 --> 00:12:45.695
<v Speaker 2>This is where the the Docker files are.

00:12:45.695 --> 00:12:48.175
<v Speaker 2>This is where the YAMLs are. Run the

00:12:48.175 --> 00:12:50.735
<v Speaker 2>whole thing. Basically, that's what that's doing.

00:12:52.334 --> 00:12:55.214
<v Speaker 0>Okay. So we configure Tilt through a Tilt

00:12:55.214 --> 00:12:58.930
<v Speaker 0>file and then these these functions, extensions, what

00:12:58.930 --> 00:13:01.490
<v Speaker 0>do we what do we call these? Functions.

00:13:01.490 --> 00:13:01.970
<v Speaker 2>Those are built

00:13:02.610 --> 00:13:04.930
<v Speaker 2>yeah. Those are built in functions. Alright. So

00:13:04.930 --> 00:13:06.930
<v Speaker 0>we have functions to represent all of the

00:13:06.930 --> 00:13:09.410
<v Speaker 0>different tasks that I may have to complete.

00:13:09.555 --> 00:13:10.995
<v Speaker 0>I guess this is goes back to what

00:13:10.995 --> 00:13:13.315
<v Speaker 0>you were saying about other people building these

00:13:13.315 --> 00:13:16.115
<v Speaker 0>integration points for for libraries and tools that

00:13:16.115 --> 00:13:17.315
<v Speaker 0>necessarily

00:13:17.875 --> 00:13:19.555
<v Speaker 0>then directly come out of town.

00:13:20.035 --> 00:13:20.274
<v Speaker 0>Okay.

00:13:22.450 --> 00:13:24.930
<v Speaker 0>Now I realize I've already made one fatal

00:13:24.930 --> 00:13:25.650
<v Speaker 0>flaw

00:13:26.130 --> 00:13:28.770
<v Speaker 0>with my ex I have a application that

00:13:28.770 --> 00:13:30.850
<v Speaker 0>I cloned and that this is not a

00:13:30.850 --> 00:13:32.690
<v Speaker 0>daemon. It's not a long running process.

00:13:33.905 --> 00:13:36.465
<v Speaker 0>So I maybe want to pick something else.

00:13:36.465 --> 00:13:37.905
<v Speaker 0>Is that correct? What is it?

00:13:38.225 --> 00:13:40.625
<v Speaker 0>It's just a CLI application, which I would

00:13:40.625 --> 00:13:42.705
<v Speaker 0>never deploy to Kubernetes, and I clearly wasn't

00:13:42.705 --> 00:13:43.745
<v Speaker 0>thinking straight.

00:13:44.785 --> 00:13:47.665
<v Speaker 0>So I will quickly grab something else.

00:13:49.150 --> 00:13:55.950
<v Speaker 0>Let's

00:13:55.950 --> 00:13:56.590
<v Speaker 0>be brave.

00:14:03.574 --> 00:14:04.295
<v Speaker 0>So

00:14:04.454 --> 00:14:06.375
<v Speaker 0>okay. I guess I need to fill in

00:14:06.375 --> 00:14:07.735
<v Speaker 0>a few blanks here before I see a

00:14:07.735 --> 00:14:08.375
<v Speaker 0>project.

00:14:08.615 --> 00:14:11.014
<v Speaker 0>Now as part see, I have a like,

00:14:11.014 --> 00:14:13.175
<v Speaker 0>this can I deploy today project as a

00:14:13.175 --> 00:14:14.935
<v Speaker 0>static site, but it needs to be

00:14:15.770 --> 00:14:18.090
<v Speaker 0>compiled first and to those assets and then

00:14:18.090 --> 00:14:20.490
<v Speaker 0>deployed into container, and then I could deploy

00:14:20.490 --> 00:14:21.370
<v Speaker 0>that to NGINX

00:14:21.770 --> 00:14:24.170
<v Speaker 0>to Kubernetes with NGINX? Is that something that

00:14:24.170 --> 00:14:25.850
<v Speaker 0>would be a good fit for the Tilt

00:14:25.850 --> 00:14:26.490
<v Speaker 0>workflow?

00:14:26.810 --> 00:14:27.610
<v Speaker 1>Let's

00:14:27.690 --> 00:14:28.330
<v Speaker 1>let's see.

00:14:29.055 --> 00:14:30.495
<v Speaker 1>It

00:14:30.495 --> 00:14:33.455
<v Speaker 1>it it certainly should be for, like, the

00:14:33.455 --> 00:14:35.855
<v Speaker 1>first level when we get to how you

00:14:35.855 --> 00:14:38.095
<v Speaker 1>can really make it fast. There might be

00:14:38.095 --> 00:14:38.815
<v Speaker 1>some

00:14:39.375 --> 00:14:40.335
<v Speaker 1>interesting

00:14:41.535 --> 00:14:42.975
<v Speaker 1>questions and caveats.

00:14:45.510 --> 00:14:47.670
<v Speaker 2>Can you repeat that description? Because I got

00:14:47.670 --> 00:14:49.430
<v Speaker 2>a bit lost. I'm trying to think through

00:14:49.430 --> 00:14:50.470
<v Speaker 2>the mechanics.

00:14:50.950 --> 00:14:52.870
<v Speaker 0>Oh, yeah. Of course. No problem. It's it's

00:14:52.870 --> 00:14:55.910
<v Speaker 0>a a Next. Js website, which means what

00:14:55.910 --> 00:14:57.350
<v Speaker 0>I need to do is build a container

00:14:57.350 --> 00:15:00.435
<v Speaker 0>image which runs the next steps, which kinda

00:15:00.435 --> 00:15:01.954
<v Speaker 0>gives me some HTML,

00:15:01.954 --> 00:15:04.514
<v Speaker 0>CSS, and JavaScript into a directory, which I

00:15:04.514 --> 00:15:06.514
<v Speaker 0>would then want to bundle into an NGINX

00:15:06.514 --> 00:15:07.235
<v Speaker 0>container

00:15:07.475 --> 00:15:09.875
<v Speaker 0>and have that run-in Kubernetes.

00:15:10.995 --> 00:15:11.394
<v Speaker 0>Okay.

00:15:13.230 --> 00:15:16.029
<v Speaker 2>I think I stand with Dan in that

00:15:16.029 --> 00:15:16.910
<v Speaker 2>we'll see.

00:15:18.270 --> 00:15:20.430
<v Speaker 0>Yeah. Okay. Sorry. This is my fault. I

00:15:20.430 --> 00:15:22.670
<v Speaker 0>didn't really think about using the CI application

00:15:22.670 --> 00:15:24.110
<v Speaker 0>here, and then it just hit me as

00:15:24.110 --> 00:15:26.430
<v Speaker 0>we were talking. Like, that's not gonna work.

00:15:26.430 --> 00:15:28.755
<v Speaker 0>Like okay. Because I would never deploy a

00:15:28.755 --> 00:15:32.274
<v Speaker 0>CI application to the for that. Alright. So

00:15:32.274 --> 00:15:34.035
<v Speaker 0>I can create a Tilt fail.

00:15:35.235 --> 00:15:36.355
<v Speaker 0>And I'm assuming

00:15:36.835 --> 00:15:38.595
<v Speaker 0>I I'm just gonna kinda make some assumptions

00:15:38.595 --> 00:15:40.195
<v Speaker 0>here. Please feel free just to correct me

00:15:40.195 --> 00:15:41.795
<v Speaker 0>any point. But I'm assuming the first thing

00:15:41.795 --> 00:15:43.154
<v Speaker 0>I need to do is

00:15:43.430 --> 00:15:45.750
<v Speaker 0>build some sort of image for my application.

00:15:45.750 --> 00:15:46.710
<v Speaker 1>Oh, I I

00:15:48.950 --> 00:15:51.430
<v Speaker 1>oh, we we now I'm I'm the one

00:15:51.430 --> 00:15:53.110
<v Speaker 1>who's a bit embarrassed that we don't see

00:15:53.110 --> 00:15:55.350
<v Speaker 1>this more clearly in the documentation. You should

00:15:55.350 --> 00:15:57.910
<v Speaker 1>just tilt up, and tilt will watch your

00:15:57.910 --> 00:15:58.790
<v Speaker 1>tilt file

00:15:59.475 --> 00:16:02.195
<v Speaker 1>so you can like write it interactively.

00:16:05.555 --> 00:16:07.795
<v Speaker 2>Here here here's what you do. You create

00:16:07.795 --> 00:16:08.835
<v Speaker 2>a tilt file

00:16:09.395 --> 00:16:10.435
<v Speaker 2>and just

00:16:10.835 --> 00:16:12.755
<v Speaker 2>just put a tilt file there first and

00:16:12.755 --> 00:16:14.680
<v Speaker 2>tilt up and let's see what happens. And

00:16:14.680 --> 00:16:16.760
<v Speaker 2>then we're gonna increment your Tilt file as

00:16:16.760 --> 00:16:17.400
<v Speaker 2>we go.

00:16:18.520 --> 00:16:19.480
<v Speaker 0>Interesting.

00:16:19.480 --> 00:16:20.680
<v Speaker 0>Alright. I like it.

00:16:27.785 --> 00:16:30.665
<v Speaker 0>Okay. So I've got the the Tilt UI.

00:16:31.065 --> 00:16:33.625
<v Speaker 0>Okay. That makes sense. That's pretty cool. I

00:16:33.625 --> 00:16:34.345
<v Speaker 0>like that.

00:16:35.384 --> 00:16:38.584
<v Speaker 2>So no resources found. So you were looking

00:16:38.584 --> 00:16:40.425
<v Speaker 2>at the Docker

00:16:40.425 --> 00:16:41.545
<v Speaker 2>Docker build function.

00:16:42.130 --> 00:16:44.209
<v Speaker 2>So let's try putting one of those in

00:16:44.209 --> 00:16:46.130
<v Speaker 2>your in your Tilt file and let's see

00:16:46.130 --> 00:16:46.850
<v Speaker 2>what happens.

00:16:49.250 --> 00:16:50.690
<v Speaker 0>Okay. So

00:16:51.170 --> 00:16:54.449
<v Speaker 0>I'm assuming this is the tag for the

00:16:54.449 --> 00:16:55.170
<v Speaker 0>image.

00:16:55.329 --> 00:16:57.010
<v Speaker 0>So can I deploy

00:16:57.975 --> 00:16:58.615
<v Speaker 0>as

00:16:59.015 --> 00:17:01.015
<v Speaker 0>okay? So this is the the image name.

00:17:01.015 --> 00:17:02.455
<v Speaker 0>Is this a tag on the end?

00:17:03.495 --> 00:17:06.615
<v Speaker 1>Tilt will put those in. So Oh, okay.

00:17:07.734 --> 00:17:09.815
<v Speaker 0>So what what what's the second parameter then?

00:17:12.030 --> 00:17:14.910
<v Speaker 1>That's the directory that you'd like pass to

00:17:14.910 --> 00:17:16.029
<v Speaker 1>docker build.

00:17:16.829 --> 00:17:19.230
<v Speaker 0>Ah, the context. Got it. Okay. Yeah. So

00:17:19.230 --> 00:17:21.710
<v Speaker 0>I can just put a a dot there?

00:17:22.190 --> 00:17:22.829
<v Speaker 2>Mhmm. Yep.

00:17:23.565 --> 00:17:25.724
<v Speaker 0>Alright. Now I guess it would make sense

00:17:25.724 --> 00:17:26.924
<v Speaker 0>if I had a docker.

00:17:29.485 --> 00:17:31.164
<v Speaker 0>So we can do this quickly.

00:17:32.365 --> 00:17:33.485
<v Speaker 0>Copy

00:17:33.485 --> 00:17:35.164
<v Speaker 0>dot slash code

00:17:35.325 --> 00:17:36.205
<v Speaker 0>worker

00:17:36.570 --> 00:17:37.450
<v Speaker 0>code,

00:17:38.010 --> 00:17:39.769
<v Speaker 0>and then run

00:17:40.330 --> 00:17:42.009
<v Speaker 0>NPM install.

00:17:43.049 --> 00:17:45.289
<v Speaker 0>And if I check my package JSON,

00:17:51.225 --> 00:17:52.264
<v Speaker 0>export.

00:17:58.985 --> 00:17:59.945
<v Speaker 0>And

00:18:00.345 --> 00:18:02.265
<v Speaker 0>but I guess right away what I'm noticing

00:18:02.265 --> 00:18:03.465
<v Speaker 0>here is that

00:18:03.840 --> 00:18:06.559
<v Speaker 0>I just use my standard dev tooling

00:18:06.720 --> 00:18:08.640
<v Speaker 0>to a certain degree to get that container

00:18:08.640 --> 00:18:10.799
<v Speaker 0>image, and then this is where Tilt kicks

00:18:10.799 --> 00:18:13.999
<v Speaker 0>in and handles all the complicated orchestration components

00:18:14.000 --> 00:18:15.679
<v Speaker 0>and getting onto Kubernetes.

00:18:16.400 --> 00:18:17.600
<v Speaker 2>Mhmm. Okay.

00:18:19.815 --> 00:18:21.815
<v Speaker 0>So we'll call this my deploy step, and

00:18:21.815 --> 00:18:23.734
<v Speaker 0>I'll copy from zero

00:18:23.894 --> 00:18:24.854
<v Speaker 0>codes.

00:18:25.654 --> 00:18:27.735
<v Speaker 0>I think it's public. I'll I'll get this

00:18:27.735 --> 00:18:29.575
<v Speaker 0>wrong the first time, but it'll be it'll

00:18:29.575 --> 00:18:30.054
<v Speaker 0>be okay.

00:18:35.040 --> 00:18:36.320
<v Speaker 0>Now

00:18:36.320 --> 00:18:37.279
<v Speaker 0>should

00:18:40.000 --> 00:18:40.960
<v Speaker 0>oh, code

00:18:41.120 --> 00:18:42.080
<v Speaker 0>public.

00:18:42.080 --> 00:18:43.760
<v Speaker 0>Copy it to here, which is the standard

00:18:43.760 --> 00:18:45.600
<v Speaker 0>NGINX directory.

00:18:45.600 --> 00:18:47.680
<v Speaker 0>Okay. So my first question then would be,

00:18:49.304 --> 00:18:50.905
<v Speaker 0>would it make sense? Because I am not

00:18:50.905 --> 00:18:53.065
<v Speaker 0>got a % confidence in my ability to

00:18:53.065 --> 00:18:54.184
<v Speaker 0>write a Dockerfile

00:18:54.424 --> 00:18:57.625
<v Speaker 0>that quickly. Now should I be running Docker

00:18:57.625 --> 00:18:59.625
<v Speaker 0>image build locally till I'm happy with that

00:18:59.625 --> 00:19:01.385
<v Speaker 0>process, or is that something that Tilt can

00:19:01.385 --> 00:19:03.649
<v Speaker 0>do for me when I add the the

00:19:03.649 --> 00:19:05.010
<v Speaker 0>function to build the image and get the

00:19:05.010 --> 00:19:05.889
<v Speaker 0>errors back?

00:19:06.450 --> 00:19:07.330
<v Speaker 1>Exactly.

00:19:07.890 --> 00:19:10.849
<v Speaker 1>That that latter one. Yeah. So

00:19:11.330 --> 00:19:13.649
<v Speaker 1>if you just, like, yeah, try saving. Let's

00:19:13.649 --> 00:19:14.929
<v Speaker 1>see what happens in Tilt.

00:19:15.855 --> 00:19:16.975
<v Speaker 0>Okay.

00:19:16.975 --> 00:19:19.695
<v Speaker 0>So let's go back to our Tilt UI.

00:19:20.735 --> 00:19:22.894
<v Speaker 0>Alright. It it's something

00:19:25.135 --> 00:19:28.095
<v Speaker 0>Okay. So it says that it's kept my

00:19:28.095 --> 00:19:30.095
<v Speaker 0>image build because it has nowhere to deploy

00:19:30.095 --> 00:19:30.335
<v Speaker 0>it.

00:19:31.020 --> 00:19:33.740
<v Speaker 2>Yep. Now you need some Kubernetes YAML.

00:19:35.420 --> 00:19:38.220
<v Speaker 0>Alright. Unfortunately, I can generate that pretty quickly

00:19:38.220 --> 00:19:41.420
<v Speaker 0>too. So let's have a deployment dot YAML.

00:19:44.205 --> 00:19:45.965
<v Speaker 0>I love this. I don't know who wrote

00:19:45.965 --> 00:19:47.885
<v Speaker 0>this Kubernetes plug in for Versus code, but

00:19:47.885 --> 00:19:50.364
<v Speaker 0>it just simplified my life to no end.

00:19:50.684 --> 00:19:51.484
<v Speaker 0>So

00:19:53.965 --> 00:19:55.725
<v Speaker 0>the first question I have now is that

00:19:55.725 --> 00:19:57.245
<v Speaker 0>I know how to deploy NGINX.

00:19:57.700 --> 00:19:59.940
<v Speaker 0>What I don't know how to deploy is

00:19:59.940 --> 00:20:00.740
<v Speaker 0>my

00:20:00.900 --> 00:20:03.140
<v Speaker 0>Tilt one. So do I just put that

00:20:03.140 --> 00:20:05.860
<v Speaker 0>first parameter from my Tilt fail, which is

00:20:05.860 --> 00:20:07.780
<v Speaker 0>can I deploy? Yep.

00:20:08.340 --> 00:20:09.299
<v Speaker 0>And that's it.

00:20:10.580 --> 00:20:10.980
<v Speaker 0>Okay.

00:20:13.505 --> 00:20:15.424
<v Speaker 0>Oh, I didn't add the YAML. Okay. So

00:20:15.424 --> 00:20:17.024
<v Speaker 0>that's that's first lane here.

00:20:19.664 --> 00:20:21.264
<v Speaker 0>K. Tilt fail.

00:20:22.385 --> 00:20:24.705
<v Speaker 0>Is there a Versus code plugin for Tilt?

00:20:27.890 --> 00:20:29.490
<v Speaker 1>Not that I know of. If you set

00:20:29.490 --> 00:20:33.090
<v Speaker 1>it to Python, it will be fairly close.

00:20:33.090 --> 00:20:35.090
<v Speaker 1>It will give you syntax highlighting, but we'll

00:20:35.090 --> 00:20:36.690
<v Speaker 1>complain about undefined

00:20:37.330 --> 00:20:38.129
<v Speaker 1>functions.

00:20:38.770 --> 00:20:41.625
<v Speaker 0>Well, we can just ignore that. So I

00:20:41.625 --> 00:20:44.424
<v Speaker 2>I think someone wrote an extension to parse

00:20:44.424 --> 00:20:46.664
<v Speaker 2>Tilt files as Starlark.

00:20:47.304 --> 00:20:47.705
<v Speaker 2>I

00:20:48.265 --> 00:20:49.304
<v Speaker 2>I think someone

00:20:50.345 --> 00:20:52.105
<v Speaker 2>maybe that's only when you look at the

00:20:52.105 --> 00:20:53.705
<v Speaker 2>source code on GitHub. I don't know. But

00:20:53.705 --> 00:20:55.929
<v Speaker 2>I think there is something for Versus Code.

00:20:57.370 --> 00:21:00.890
<v Speaker 2>Also, something something that we don't recommend anymore,

00:21:00.890 --> 00:21:02.250
<v Speaker 2>but it's also a possibility.

00:21:02.970 --> 00:21:06.250
<v Speaker 2>So Tilt has has a CLI mode. So

00:21:06.250 --> 00:21:08.410
<v Speaker 2>run it runs things in the terminal and

00:21:08.410 --> 00:21:11.465
<v Speaker 2>then you you don't use the the dashboard

00:21:11.465 --> 00:21:13.625
<v Speaker 2>on the browser. You can run that CLI

00:21:13.625 --> 00:21:15.945
<v Speaker 2>on the terminal inside Versus Code. So that's

00:21:15.945 --> 00:21:16.985
<v Speaker 2>something you can do.

00:21:17.385 --> 00:21:19.225
<v Speaker 2>But we are kind of phasing out the

00:21:19.225 --> 00:21:21.945
<v Speaker 2>CLI and using more the browser dashboard.

00:21:22.370 --> 00:21:24.210
<v Speaker 2>So I'm not sure I would recommend that,

00:21:24.210 --> 00:21:25.490
<v Speaker 2>but it's a possibility.

00:21:26.450 --> 00:21:28.850
<v Speaker 0>So just so I can kinda see

00:21:29.170 --> 00:21:30.770
<v Speaker 0>it, what was the how do I do

00:21:30.770 --> 00:21:32.530
<v Speaker 0>the tilt in this command line mode?

00:21:36.274 --> 00:21:37.794
<v Speaker 0>I guess it's tilt up. I think you

00:21:37.794 --> 00:21:38.354
<v Speaker 0>do tilt

00:21:39.075 --> 00:21:39.955
<v Speaker 0>up,

00:21:40.115 --> 00:21:40.754
<v Speaker 1>but

00:21:41.394 --> 00:21:43.315
<v Speaker 1>you'll need to kill the other

00:21:43.875 --> 00:21:46.595
<v Speaker 1>to run Or just or just use another

00:21:46.595 --> 00:21:48.434
<v Speaker 2>parts just to see it now. So just

00:21:48.434 --> 00:21:50.835
<v Speaker 2>tilt up dash dash parts and just put,

00:21:51.550 --> 00:21:54.750
<v Speaker 2>like, ten three five six or something.

00:21:59.150 --> 00:22:01.470
<v Speaker 0>Okay. So is is dash leg dash dash

00:22:01.470 --> 00:22:03.390
<v Speaker 0>legacy the mode we're talking about? No. No.

00:22:03.390 --> 00:22:05.710
<v Speaker 2>No. Just tilt up dash dash part and

00:22:05.710 --> 00:22:07.070
<v Speaker 2>put some random number there.

00:22:08.965 --> 00:22:09.684
<v Speaker 2>Yep.

00:22:10.165 --> 00:22:12.245
<v Speaker 2>And now press t.

00:22:20.100 --> 00:22:21.380
<v Speaker 0>I quite like it.

00:22:22.100 --> 00:22:22.899
<v Speaker 0>Okay.

00:22:23.540 --> 00:22:26.020
<v Speaker 0>So I'm assuming that my web one is

00:22:26.020 --> 00:22:27.380
<v Speaker 0>still running, means

00:22:28.260 --> 00:22:29.700
<v Speaker 0>yeah. Yeah. Now

00:22:30.500 --> 00:22:32.980
<v Speaker 2>you're doing all the work twice. So ideally,

00:22:32.980 --> 00:22:33.780
<v Speaker 2>you would choose

00:22:34.455 --> 00:22:36.455
<v Speaker 0>Yeah. We'll we'll stick with the web UI.

00:22:36.455 --> 00:22:38.534
<v Speaker 0>I don't wanna use anything that's gonna disappear

00:22:38.534 --> 00:22:39.335
<v Speaker 0>eventually.

00:22:39.335 --> 00:22:39.734
<v Speaker 0>So

00:22:41.654 --> 00:22:44.134
<v Speaker 0>so what happens here is

00:22:45.015 --> 00:22:47.335
<v Speaker 0>okay. Let me scroll back up a little

00:22:47.335 --> 00:22:47.575
<v Speaker 0>bit.

00:22:48.720 --> 00:22:51.120
<v Speaker 0>So when we added the Kubernetes yep. Alright.

00:22:51.120 --> 00:22:51.600
<v Speaker 0>So no

00:22:53.040 --> 00:22:55.360
<v Speaker 0>that's my broken YAML. I fixed my broken

00:22:55.360 --> 00:22:56.240
<v Speaker 0>YAML.

00:22:56.320 --> 00:22:58.000
<v Speaker 0>It started building an image,

00:23:01.135 --> 00:23:03.615
<v Speaker 0>which actually appears to have worked.

00:23:04.335 --> 00:23:04.894
<v Speaker 0>It did

00:23:06.175 --> 00:23:08.174
<v Speaker 0>not push it and then it deployed

00:23:08.335 --> 00:23:09.455
<v Speaker 0>my application.

00:23:10.575 --> 00:23:13.135
<v Speaker 0>So it could actually be running.

00:23:16.170 --> 00:23:18.490
<v Speaker 2>Yeah. What what you would do now is

00:23:18.490 --> 00:23:20.650
<v Speaker 2>add a port forward so that you can

00:23:20.650 --> 00:23:23.370
<v Speaker 2>then access what's inside the container from the

00:23:23.450 --> 00:23:25.049
<v Speaker 2>your browser and local host.

00:23:25.450 --> 00:23:27.130
<v Speaker 0>And would I do that using

00:23:27.130 --> 00:23:29.955
<v Speaker 0>my Kubernetes tooling or is there something tilted?

00:23:29.955 --> 00:23:31.554
<v Speaker 2>Oh, no. No. Just just tilt.

00:23:31.795 --> 00:23:32.835
<v Speaker 2>There's a

00:23:33.235 --> 00:23:35.235
<v Speaker 2>maybe go back to the docs,

00:23:36.115 --> 00:23:37.635
<v Speaker 2>and and then you can just copy and

00:23:37.635 --> 00:23:38.434
<v Speaker 2>paste there.

00:23:40.195 --> 00:23:41.395
<v Speaker 2>Where is the part forward?

00:23:43.880 --> 00:23:46.840
<v Speaker 1>Yeah. That it just yeah. There we go.

00:23:50.600 --> 00:23:51.960
<v Speaker 0>Okay.

00:23:51.960 --> 00:23:53.320
<v Speaker 0>So I can

00:23:56.565 --> 00:23:58.725
<v Speaker 1>I think that's going to be engine x?

00:23:58.725 --> 00:24:00.164
<v Speaker 1>It's the name of the

00:24:02.325 --> 00:24:04.565
<v Speaker 1>the name of the Kubernetes object.

00:24:05.684 --> 00:24:07.845
<v Speaker 0>Yeah. That makes sense. So

00:24:09.480 --> 00:24:12.600
<v Speaker 0>that's automatically just gonna rerun that again,

00:24:12.760 --> 00:24:13.720
<v Speaker 0>I assume,

00:24:13.799 --> 00:24:14.519
<v Speaker 0>and

00:24:14.840 --> 00:24:16.600
<v Speaker 0>it's now rebuilding our image.

00:24:23.645 --> 00:24:25.325
<v Speaker 0>I mean, so right away, it's already taken

00:24:25.325 --> 00:24:26.845
<v Speaker 0>away three of the major pain points I

00:24:26.845 --> 00:24:29.325
<v Speaker 0>have when I developed against Kubernetes.

00:24:29.725 --> 00:24:31.005
<v Speaker 1>And

00:24:31.005 --> 00:24:33.325
<v Speaker 1>now if you go

00:24:33.325 --> 00:24:35.325
<v Speaker 1>to NGINX on the sidebar?

00:24:38.519 --> 00:24:41.480
<v Speaker 1>Oh, and if you either opt out or

00:24:41.480 --> 00:24:42.679
<v Speaker 1>opt in to the

00:24:43.320 --> 00:24:44.440
<v Speaker 1>analytics,

00:24:45.240 --> 00:24:47.320
<v Speaker 1>now you can see the port forward at

00:24:47.320 --> 00:24:47.799
<v Speaker 1>the top.

00:24:50.295 --> 00:24:51.095
<v Speaker 0>Yeah.

00:24:52.375 --> 00:24:53.575
<v Speaker 0>Engine x.

00:24:55.255 --> 00:24:55.975
<v Speaker 0>So

00:24:56.215 --> 00:24:58.215
<v Speaker 0>that also means my Dockerfail

00:24:58.215 --> 00:25:01.015
<v Speaker 0>worked, but didn't really work. I mean,

00:25:03.539 --> 00:25:04.419
<v Speaker 0>so

00:25:04.419 --> 00:25:07.539
<v Speaker 0>let me just clarify that then. Let let's

00:25:07.539 --> 00:25:09.619
<v Speaker 2>focus on the wins. It works. So

00:25:12.419 --> 00:25:14.820
<v Speaker 0>I ran an NPM

00:25:14.820 --> 00:25:15.299
<v Speaker 0>run.

00:25:18.075 --> 00:25:19.034
<v Speaker 0>I don't know.

00:25:19.915 --> 00:25:20.635
<v Speaker 0>Export.

00:25:20.795 --> 00:25:23.355
<v Speaker 0>Export. It was export, wasn't it? Mhmm.

00:25:23.675 --> 00:25:26.555
<v Speaker 0>And I'm assuming that the public directory was

00:25:26.635 --> 00:25:27.995
<v Speaker 0>oh, no. It's the public directory.

00:25:29.080 --> 00:25:31.480
<v Speaker 0>Oh, no. Out. L s out. Okay. So

00:25:31.480 --> 00:25:33.160
<v Speaker 0>it copies it from public, puts it into

00:25:33.160 --> 00:25:34.760
<v Speaker 0>out. So I just got that wrong. So

00:25:34.760 --> 00:25:37.080
<v Speaker 0>now I can update my Docker file.

00:25:37.400 --> 00:25:39.160
<v Speaker 0>And, this is just gonna just take that

00:25:39.160 --> 00:25:40.200
<v Speaker 0>change and

00:25:41.160 --> 00:25:41.720
<v Speaker 0>work.

00:25:43.875 --> 00:25:44.675
<v Speaker 0>There

00:25:44.675 --> 00:25:45.315
<v Speaker 0>we go.

00:25:48.675 --> 00:25:51.155
<v Speaker 0>So I guess my question now is, this

00:25:51.155 --> 00:25:52.915
<v Speaker 0>is leveraging just my

00:25:54.035 --> 00:25:56.660
<v Speaker 0>vanilla Docker setup to the point that I'm

00:25:56.660 --> 00:25:58.820
<v Speaker 0>gonna still get advantage of, like, all my

00:25:58.820 --> 00:26:01.139
<v Speaker 0>build cache. Although my Dockerfile is not really

00:26:01.140 --> 00:26:02.980
<v Speaker 0>made for caching right now with that copy

00:26:02.980 --> 00:26:05.220
<v Speaker 0>doc. You know, if I optimize my Dockerfile

00:26:05.220 --> 00:26:07.620
<v Speaker 0>here, it's only gonna rebuild from certain stages.

00:26:08.100 --> 00:26:08.900
<v Speaker 0>Okay. Yes.

00:26:10.775 --> 00:26:11.735
<v Speaker 2>Yeah. Go

00:26:12.775 --> 00:26:15.735
<v Speaker 2>ahead then. So it uses build kit if

00:26:15.735 --> 00:26:17.655
<v Speaker 1>you have it installed by default, so you

00:26:17.655 --> 00:26:18.855
<v Speaker 1>can use those.

00:26:19.095 --> 00:26:21.095
<v Speaker 1>And now what you're getting is

00:26:22.135 --> 00:26:22.615
<v Speaker 1>the,

00:26:23.350 --> 00:26:24.869
<v Speaker 1>you know, automated

00:26:24.870 --> 00:26:27.509
<v Speaker 1>nature of it and the UI. So if

00:26:27.509 --> 00:26:28.949
<v Speaker 1>you have more services,

00:26:28.950 --> 00:26:29.749
<v Speaker 1>you can

00:26:30.470 --> 00:26:32.710
<v Speaker 1>see them in the sidebar and, like, flip

00:26:32.710 --> 00:26:35.750
<v Speaker 1>between them, but we haven't done the the

00:26:35.750 --> 00:26:36.549
<v Speaker 1>live update

00:26:37.304 --> 00:26:38.184
<v Speaker 1>piece

00:26:38.184 --> 00:26:40.024
<v Speaker 1>to make it faster at all.

00:26:41.544 --> 00:26:43.705
<v Speaker 0>Okay. So in order for us let's let's

00:26:43.705 --> 00:26:45.465
<v Speaker 0>assume that this application is a bit more

00:26:45.465 --> 00:26:47.465
<v Speaker 0>feature complete than, like, in a static site.

00:26:47.465 --> 00:26:49.065
<v Speaker 0>So say I optimize the Dockerfile

00:26:49.840 --> 00:26:50.879
<v Speaker 0>so that we don't have to do the

00:26:50.879 --> 00:26:52.720
<v Speaker 0>NPM install every step. I think that's gonna

00:26:52.720 --> 00:26:53.440
<v Speaker 0>make this

00:26:53.679 --> 00:26:55.200
<v Speaker 0>a lot quicker for what we're doing because

00:26:55.200 --> 00:26:56.879
<v Speaker 0>the export takes less than a second.

00:26:57.279 --> 00:26:59.360
<v Speaker 0>And then I wanna add a database. Can

00:26:59.360 --> 00:27:01.039
<v Speaker 0>we kinda go through the process to see

00:27:01.039 --> 00:27:02.559
<v Speaker 0>multiple services here?

00:27:06.585 --> 00:27:08.105
<v Speaker 1>Yeah. You

00:27:10.265 --> 00:27:11.065
<v Speaker 1>you

00:27:12.425 --> 00:27:13.945
<v Speaker 1>would make another

00:27:14.665 --> 00:27:18.425
<v Speaker 1>call to Kate's YAML with the YAML for

00:27:18.425 --> 00:27:20.185
<v Speaker 1>your

00:27:19.590 --> 00:27:20.789
<v Speaker 1>other service.

00:27:24.150 --> 00:27:26.070
<v Speaker 0>Okay. So let's assume

00:27:28.630 --> 00:27:29.509
<v Speaker 0>let's

00:27:29.590 --> 00:27:30.630
<v Speaker 0>add Postgres.

00:27:36.125 --> 00:27:38.525
<v Speaker 0>Alright. Yeah. So I could so these would

00:27:38.525 --> 00:27:38.765
<v Speaker 0>be

00:27:39.565 --> 00:27:42.125
<v Speaker 0>would these be the same production YAML images

00:27:42.125 --> 00:27:43.085
<v Speaker 0>that I used,

00:27:43.405 --> 00:27:45.325
<v Speaker 0>or would there be anything there specific I

00:27:45.325 --> 00:27:47.164
<v Speaker 0>have to do or tweak

00:27:47.165 --> 00:27:47.645
<v Speaker 0>for this?

00:27:48.600 --> 00:27:49.399
<v Speaker 1>You

00:27:50.120 --> 00:27:52.840
<v Speaker 1>might not want as many, like, instances

00:27:53.000 --> 00:27:53.800
<v Speaker 1>as

00:27:53.800 --> 00:27:55.080
<v Speaker 1>your production.

00:27:55.880 --> 00:27:58.280
<v Speaker 1>What we've seen teams do is, like, if

00:27:58.280 --> 00:28:01.320
<v Speaker 1>you're already using Helm or Customize,

00:28:01.559 --> 00:28:03.905
<v Speaker 1>you, like, have, you know, a different set

00:28:03.905 --> 00:28:06.305
<v Speaker 1>of values. So it's, like, the same base

00:28:06.305 --> 00:28:07.184
<v Speaker 1>template,

00:28:07.505 --> 00:28:09.345
<v Speaker 1>but you might have, you know, just slightly

00:28:09.345 --> 00:28:10.544
<v Speaker 1>different values

00:28:11.185 --> 00:28:12.945
<v Speaker 1>so that you don't have, you know,

00:28:13.345 --> 00:28:16.785
<v Speaker 1>your development instance taking as many resources as

00:28:16.785 --> 00:28:17.985
<v Speaker 1>your production instance.

00:28:18.390 --> 00:28:20.390
<v Speaker 1>But otherwise, the same. Yeah.

00:28:22.710 --> 00:28:23.909
<v Speaker 0>Okay. So

00:28:27.910 --> 00:28:29.030
<v Speaker 0>I need to

00:28:29.750 --> 00:28:31.955
<v Speaker 0>I need to add my new resource. So

00:28:31.955 --> 00:28:34.355
<v Speaker 0>I don't like this resource. I know I

00:28:34.355 --> 00:28:35.875
<v Speaker 0>would never do Postgres this way. So I'm

00:28:35.875 --> 00:28:37.635
<v Speaker 0>gonna do it because I'm curious, and then

00:28:37.635 --> 00:28:39.235
<v Speaker 0>maybe we could talk about how I would

00:28:39.235 --> 00:28:42.515
<v Speaker 0>choose and customize to tweak my NGINX deployment,

00:28:42.515 --> 00:28:44.195
<v Speaker 0>but hang on for my Postgres one. Because

00:28:44.195 --> 00:28:45.730
<v Speaker 0>I feel like if I were trying to

00:28:45.730 --> 00:28:48.530
<v Speaker 0>build a production, like, development environment, Rawkode, that's

00:28:48.530 --> 00:28:49.489
<v Speaker 0>the tools I would

00:28:49.890 --> 00:28:51.650
<v Speaker 0>be that's the tools I think I would

00:28:51.650 --> 00:28:53.169
<v Speaker 0>choose. Yeah. Yeah.

00:28:53.890 --> 00:28:54.690
<v Speaker 0>Alright.

00:28:55.090 --> 00:28:58.245
<v Speaker 0>Oh, Postgres is now spinning up. So does

00:28:58.245 --> 00:29:00.404
<v Speaker 0>the orange mean it's pending?

00:29:00.565 --> 00:29:01.765
<v Speaker 2>It's working. Yeah.

00:29:03.445 --> 00:29:05.044
<v Speaker 0>Oh, no. No?

00:29:05.525 --> 00:29:06.245
<v Speaker 1>Yeah.

00:29:06.805 --> 00:29:10.165
<v Speaker 1>Orange means there's an alert, and you can

00:29:10.165 --> 00:29:11.684
<v Speaker 1>see that it's in a

00:29:13.525 --> 00:29:15.029
<v Speaker 1>a, yep, back off

00:29:16.150 --> 00:29:18.630
<v Speaker 1>loop. Yeah. I did provide the passwords, but

00:29:18.630 --> 00:29:20.550
<v Speaker 0>she cannot spin it up with the telling

00:29:20.550 --> 00:29:21.750
<v Speaker 0>them the passwords.

00:29:24.630 --> 00:29:25.269
<v Speaker 0>Environment,

00:29:25.830 --> 00:29:26.950
<v Speaker 0>postcard password,

00:29:28.405 --> 00:29:29.284
<v Speaker 0>password,

00:29:30.965 --> 00:29:33.845
<v Speaker 0>make it secure, one, three. Yeah.

00:29:38.885 --> 00:29:40.405
<v Speaker 0>It's green. Nice. Okay.

00:29:41.480 --> 00:29:43.240
<v Speaker 0>Although, does this orange bit mean I broke

00:29:43.240 --> 00:29:44.120
<v Speaker 0>NGINX?

00:29:45.240 --> 00:29:47.960
<v Speaker 0>That's that's gray bit. Sorry. Let's

00:29:50.520 --> 00:29:52.360
<v Speaker 1>oh, it's because

00:29:53.240 --> 00:29:56.520
<v Speaker 1>your Docker context for NGINX is docked.

00:29:57.025 --> 00:29:58.865
<v Speaker 1>It, like, includes

00:29:58.865 --> 00:30:00.945
<v Speaker 1>the postgres dot yaml.

00:30:01.745 --> 00:30:04.465
<v Speaker 1>And so you can there are, like, optional

00:30:04.625 --> 00:30:05.664
<v Speaker 1>parameters

00:30:05.745 --> 00:30:08.145
<v Speaker 1>to the Docker build so you can, like,

00:30:08.145 --> 00:30:09.024
<v Speaker 1>ignore

00:30:09.185 --> 00:30:11.985
<v Speaker 1>YAML files and things. So Tilt was,

00:30:12.510 --> 00:30:14.670
<v Speaker 1>you know, being helpful about something. You know,

00:30:14.670 --> 00:30:16.830
<v Speaker 1>you didn't actually care that this YAML was

00:30:16.830 --> 00:30:17.470
<v Speaker 1>in there,

00:30:17.870 --> 00:30:19.309
<v Speaker 1>but but it was.

00:30:20.350 --> 00:30:22.510
<v Speaker 0>Well, that respect my Docker ignore,

00:30:22.750 --> 00:30:24.510
<v Speaker 0>I guess. Okay. So I could do a

00:30:24.510 --> 00:30:26.590
<v Speaker 0>Docker ignore, and I'd say

00:30:26.830 --> 00:30:27.230
<v Speaker 0>I mean,

00:30:28.005 --> 00:30:29.605
<v Speaker 0>I can just just start on YAML for

00:30:29.605 --> 00:30:30.245
<v Speaker 0>now

00:30:30.405 --> 00:30:31.765
<v Speaker 0>and not that fast.

00:30:32.485 --> 00:30:34.645
<v Speaker 0>But I'm assuming that in itself will trigger

00:30:34.645 --> 00:30:36.805
<v Speaker 0>one rebuild, and then I'll be back to

00:30:36.805 --> 00:30:38.245
<v Speaker 0>normal. Okay. Yes.

00:30:39.365 --> 00:30:42.085
<v Speaker 1>I I agree. Let's see if the computer

00:30:42.085 --> 00:30:44.870
<v Speaker 1>agrees with I mean, we're up poking it.

00:30:44.870 --> 00:30:45.429
<v Speaker 1>But

00:30:47.110 --> 00:30:48.790
<v Speaker 0>Alright. This is this is cool. So I

00:30:48.790 --> 00:30:51.190
<v Speaker 0>tweak my Dockerfile. I'm using the build cache

00:30:51.190 --> 00:30:54.470
<v Speaker 0>to avoid a painful MPM install, and this

00:30:54.470 --> 00:30:56.070
<v Speaker 0>is much faster now. Like, that was a

00:30:56.070 --> 00:30:58.904
<v Speaker 0>few seconds, and I had my deployment. Now

00:30:58.904 --> 00:31:00.664
<v Speaker 0>the question is, did I actually fix it

00:31:00.664 --> 00:31:01.624
<v Speaker 0>or not? So

00:31:03.144 --> 00:31:03.784
<v Speaker 0>no.

00:31:04.745 --> 00:31:08.184
<v Speaker 2>No? Oops. So I take my challenge now.

00:31:08.184 --> 00:31:09.625
<v Speaker 0>I will try one more time and then

00:31:09.625 --> 00:31:10.745
<v Speaker 0>we'll just ignore it. But

00:31:11.600 --> 00:31:13.920
<v Speaker 0>if I do run our MIT

00:31:13.920 --> 00:31:16.880
<v Speaker 0>engine x and just go and save this,

00:31:18.160 --> 00:31:20.480
<v Speaker 0>I think maybe I got the directory wrong.

00:31:20.480 --> 00:31:22.000
<v Speaker 0>So if I look at the engine x

00:31:22.000 --> 00:31:23.040
<v Speaker 0>dot conf,

00:31:23.040 --> 00:31:24.240
<v Speaker 0>take a look at default.

00:31:28.695 --> 00:31:29.894
<v Speaker 0>Yeah. There we go.

00:31:30.455 --> 00:31:33.174
<v Speaker 0>So I just mounted it to the wrong

00:31:33.335 --> 00:31:34.134
<v Speaker 0>path.

00:31:34.695 --> 00:31:36.215
<v Speaker 0>Easy mistake to make.

00:31:38.934 --> 00:31:40.054
<v Speaker 0>This goes

00:31:40.500 --> 00:31:41.220
<v Speaker 0>here.

00:31:41.460 --> 00:31:43.300
<v Speaker 0>And then I will watch this nice little

00:31:43.300 --> 00:31:44.179
<v Speaker 0>UI.

00:31:45.940 --> 00:31:47.620
<v Speaker 0>It should go green pretty quickly.

00:31:54.684 --> 00:31:56.845
<v Speaker 2>These moments when we're waiting, always like to

00:31:56.845 --> 00:31:59.004
<v Speaker 2>think of silly computer jokes to tell.

00:32:00.284 --> 00:32:02.125
<v Speaker 2>Like, you know, I I would tell you

00:32:02.125 --> 00:32:04.445
<v Speaker 2>a UDP joke, but then I might have

00:32:04.445 --> 00:32:05.485
<v Speaker 2>to tell you again. So

00:32:08.100 --> 00:32:09.059
<v Speaker 0>Hey.

00:32:09.380 --> 00:32:10.340
<v Speaker 2>There you go.

00:32:10.740 --> 00:32:11.539
<v Speaker 0>Alright.

00:32:12.820 --> 00:32:15.940
<v Speaker 0>So my website, my million dollar application here,

00:32:15.940 --> 00:32:18.260
<v Speaker 0>can I deploy today? Yes. It is working.

00:32:20.684 --> 00:32:22.524
<v Speaker 0>Okay. Do you wanna do you wanna make

00:32:22.524 --> 00:32:24.845
<v Speaker 2>changes to it? Maybe tweak that text and

00:32:24.845 --> 00:32:26.044
<v Speaker 2>see how long it takes?

00:32:27.085 --> 00:32:28.284
<v Speaker 0>Yeah. Good idea.

00:32:28.524 --> 00:32:30.124
<v Speaker 0>So I can open up

00:32:30.764 --> 00:32:32.205
<v Speaker 0>I mean, don't still have a source code.

00:32:32.205 --> 00:32:34.924
<v Speaker 0>This is gonna make me millions, but it's

00:32:35.950 --> 00:32:38.989
<v Speaker 0>can I deploy today? Yes. Definitely.

00:32:42.669 --> 00:32:44.190
<v Speaker 0>And then we come back. Shit.

00:32:45.549 --> 00:32:48.270
<v Speaker 2>So now we're building an image and that's

00:32:48.270 --> 00:32:49.309
<v Speaker 2>why it takes a minute.

00:32:54.655 --> 00:32:56.655
<v Speaker 2>Now I have no idea how we're gonna

00:32:56.655 --> 00:32:57.215
<v Speaker 2>use,

00:32:57.455 --> 00:32:58.575
<v Speaker 2>live reload

00:32:58.575 --> 00:33:01.455
<v Speaker 2>on this setup, but I'm very curious to

00:33:01.455 --> 00:33:02.255
<v Speaker 2>find out.

00:33:03.215 --> 00:33:05.455
<v Speaker 0>Well, we could give it a

00:33:05.130 --> 00:33:07.370
<v Speaker 0>go. And if it doesn't work, I have

00:33:07.370 --> 00:33:09.770
<v Speaker 0>ahead of time pulled up some of these

00:33:09.770 --> 00:33:12.410
<v Speaker 0>example applications. So we can always pull down

00:33:12.970 --> 00:33:15.370
<v Speaker 0>one of these. But we can we can

00:33:15.370 --> 00:33:16.970
<v Speaker 0>go through the the motions of how we

00:33:16.970 --> 00:33:18.170
<v Speaker 0>would do this. And then if it doesn't

00:33:18.170 --> 00:33:21.205
<v Speaker 0>work, we'll we'll reevaluate. And I'm also keen

00:33:21.205 --> 00:33:24.244
<v Speaker 0>if we don't forget just to stop using

00:33:25.445 --> 00:33:26.245
<v Speaker 0>YAML

00:33:26.245 --> 00:33:27.765
<v Speaker 0>for Postgres. I'd really like to see that

00:33:27.765 --> 00:33:29.124
<v Speaker 0>help integration as well.

00:33:33.445 --> 00:33:35.445
<v Speaker 1>So if you go to the doc site,

00:33:39.630 --> 00:33:42.830
<v Speaker 1>and you go down yeah. The under enhancements,

00:33:42.830 --> 00:33:45.550
<v Speaker 1>the first one is faster development with live

00:33:45.550 --> 00:33:46.030
<v Speaker 1>update.

00:33:50.725 --> 00:33:51.445
<v Speaker 0>Okay.

00:33:51.525 --> 00:33:52.005
<v Speaker 0>So

00:33:52.485 --> 00:33:54.965
<v Speaker 1>And so the key here is

00:33:55.765 --> 00:33:56.565
<v Speaker 1>it's

00:33:56.565 --> 00:33:58.325
<v Speaker 1>doing docker build,

00:33:58.325 --> 00:34:00.565
<v Speaker 1>but, like, with live update, you're telling Tilt,

00:34:01.080 --> 00:34:03.159
<v Speaker 1>like, hey. Yeah. You can always still do

00:34:03.159 --> 00:34:04.359
<v Speaker 1>a docker build,

00:34:04.840 --> 00:34:07.880
<v Speaker 1>but there's also this, like, faster path where

00:34:07.880 --> 00:34:09.719
<v Speaker 1>I want to sync files

00:34:11.239 --> 00:34:12.040
<v Speaker 1>from

00:34:13.400 --> 00:34:14.599
<v Speaker 1>this directory

00:34:14.599 --> 00:34:17.234
<v Speaker 1>in you know, on my laptop to this

00:34:17.234 --> 00:34:19.315
<v Speaker 1>directory in the running container.

00:34:23.155 --> 00:34:25.635
<v Speaker 2>So then what do you think we should

00:34:25.635 --> 00:34:26.594
<v Speaker 2>suggest here?

00:34:27.650 --> 00:34:31.410
<v Speaker 2>Should we rebuild the NPM export stuff locally

00:34:31.410 --> 00:34:33.410
<v Speaker 2>and then sync those files to a running

00:34:33.410 --> 00:34:34.130
<v Speaker 2>container?

00:34:34.450 --> 00:34:35.890
<v Speaker 2>Or how would you do this?

00:34:36.610 --> 00:34:37.730
<v Speaker 1>So I think,

00:34:38.050 --> 00:34:38.530
<v Speaker 1>you

00:34:39.570 --> 00:34:41.264
<v Speaker 1>know, part

00:34:41.264 --> 00:34:43.425
<v Speaker 1>of like like, we want Tilt to work

00:34:43.425 --> 00:34:44.864
<v Speaker 1>with real cases.

00:34:44.944 --> 00:34:48.945
<v Speaker 1>And so, like, in real and developers

00:34:49.344 --> 00:34:51.744
<v Speaker 1>come up with shortcuts even though they don't,

00:34:51.744 --> 00:34:53.585
<v Speaker 1>like, always work. And so what I do

00:34:53.585 --> 00:34:56.049
<v Speaker 1>is probably have a live update that just

00:34:56.049 --> 00:34:56.929
<v Speaker 1>syncs,

00:34:57.010 --> 00:34:59.090
<v Speaker 1>you know, the PHP file

00:34:59.490 --> 00:35:00.609
<v Speaker 1>to the

00:35:00.849 --> 00:35:03.809
<v Speaker 1>the right place and kind of skips the

00:35:03.809 --> 00:35:04.690
<v Speaker 1>export,

00:35:05.410 --> 00:35:07.650
<v Speaker 1>which could get out of sync. And if

00:35:07.650 --> 00:35:10.345
<v Speaker 1>it does, you can, like, click rebuild in

00:35:10.345 --> 00:35:11.305
<v Speaker 1>the UI,

00:35:11.465 --> 00:35:13.225
<v Speaker 1>which will have it fall back

00:35:13.945 --> 00:35:16.105
<v Speaker 1>to the image build. So I think that

00:35:16.105 --> 00:35:18.905
<v Speaker 1>will, like, work in the, like, 90%

00:35:18.905 --> 00:35:19.625
<v Speaker 1>case.

00:35:20.185 --> 00:35:22.185
<v Speaker 0>Okay. So let me make this easier for

00:35:22.185 --> 00:35:22.665
<v Speaker 0>you both.

00:35:23.490 --> 00:35:25.570
<v Speaker 0>We don't need to use the

00:35:25.810 --> 00:35:27.170
<v Speaker 0>the export.

00:35:28.210 --> 00:35:30.210
<v Speaker 0>Let okay. I think I know

00:35:30.930 --> 00:35:32.130
<v Speaker 0>okay. I think I know what we have

00:35:32.130 --> 00:35:34.210
<v Speaker 0>to do, but what I'd really love to

00:35:34.210 --> 00:35:35.810
<v Speaker 0>understand is just a little bit about this

00:35:35.810 --> 00:35:38.875
<v Speaker 0>live update syntax. So what this does, if

00:35:38.875 --> 00:35:40.475
<v Speaker 0>I've understood correctly,

00:35:40.475 --> 00:35:41.995
<v Speaker 0>is runs

00:35:42.635 --> 00:35:43.915
<v Speaker 0>a container

00:35:44.155 --> 00:35:47.275
<v Speaker 0>and is managing the file synchronization into the

00:35:47.275 --> 00:35:50.235
<v Speaker 0>container and then running an arbitrary command when

00:35:50.235 --> 00:35:51.195
<v Speaker 0>those files change.

00:35:52.700 --> 00:35:54.460
<v Speaker 0>So what is the container

00:35:54.460 --> 00:35:56.700
<v Speaker 0>that is running? Because I have a multilayer

00:35:56.700 --> 00:35:58.700
<v Speaker 0>Dockerfile. Is that why this is a little

00:35:58.700 --> 00:35:59.820
<v Speaker 0>bit more complicated?

00:36:00.860 --> 00:36:01.500
<v Speaker 0>Yes.

00:36:01.900 --> 00:36:02.300
<v Speaker 1>It's

00:36:02.700 --> 00:36:03.740
<v Speaker 1>Tilt

00:36:03.740 --> 00:36:06.940
<v Speaker 1>isn't maintaining a separate container. It's just the

00:36:06.940 --> 00:36:07.500
<v Speaker 1>container,

00:36:08.244 --> 00:36:10.085
<v Speaker 1>like, that you're already

00:36:10.085 --> 00:36:10.885
<v Speaker 1>running.

00:36:12.565 --> 00:36:14.405
<v Speaker 0>Ah, okay. Right. I got it. I got

00:36:14.405 --> 00:36:17.365
<v Speaker 0>it. I got it. So the where you

00:36:17.365 --> 00:36:19.525
<v Speaker 2>have the text highlighted there, the line above

00:36:19.525 --> 00:36:21.445
<v Speaker 2>it docker build, it's doing the same as

00:36:21.445 --> 00:36:23.205
<v Speaker 2>you saw before. It just builds a container.

00:36:24.150 --> 00:36:27.030
<v Speaker 2>What happens is when the files specified

00:36:27.030 --> 00:36:29.430
<v Speaker 2>in the first arguments to the sync function

00:36:29.430 --> 00:36:30.310
<v Speaker 2>change,

00:36:30.549 --> 00:36:33.030
<v Speaker 2>it's going to update those files inside the

00:36:33.030 --> 00:36:33.670
<v Speaker 2>container.

00:36:34.630 --> 00:36:35.190
<v Speaker 2>And,

00:36:35.589 --> 00:36:37.270
<v Speaker 2>of course, sometimes you need to run a

00:36:37.270 --> 00:36:39.714
<v Speaker 2>special command like if your requirements change then

00:36:39.714 --> 00:36:40.595
<v Speaker 2>you need to

00:36:40.915 --> 00:36:43.315
<v Speaker 2>pip install your requirements in that example.

00:36:44.515 --> 00:36:46.995
<v Speaker 2>I hardly ever use the run function,

00:36:47.234 --> 00:36:49.234
<v Speaker 2>just the sync function. So basically, just tell

00:36:49.234 --> 00:36:49.715
<v Speaker 2>me

00:36:50.115 --> 00:36:51.954
<v Speaker 2>if these files change locally,

00:36:52.200 --> 00:36:55.560
<v Speaker 2>update those files inside the container. And basically,

00:36:55.560 --> 00:36:56.200
<v Speaker 2>that's it.

00:36:57.480 --> 00:36:58.520
<v Speaker 0>Okay. So

00:36:58.680 --> 00:37:00.040
<v Speaker 0>I think I know what we need to

00:37:00.040 --> 00:37:00.600
<v Speaker 0>do.

00:37:02.359 --> 00:37:04.440
<v Speaker 0>I'm sure I'm wrong, but I'll try anyway.

00:37:04.440 --> 00:37:07.400
<v Speaker 0>So we want to add a new parameter.

00:37:07.400 --> 00:37:09.315
<v Speaker 0>So it was just this,

00:37:10.675 --> 00:37:12.115
<v Speaker 0>and I'll put this down here so it

00:37:12.115 --> 00:37:13.635
<v Speaker 0>can imagine for example.

00:37:14.275 --> 00:37:16.195
<v Speaker 0>And I want to think

00:37:22.560 --> 00:37:25.760
<v Speaker 0>So this run trigger runs inside the container.

00:37:25.760 --> 00:37:26.640
<v Speaker 0>This sync

00:37:28.320 --> 00:37:30.320
<v Speaker 0>so with that sync, I mean, it expects

00:37:30.320 --> 00:37:31.520
<v Speaker 0>me to run,

00:37:31.760 --> 00:37:34.320
<v Speaker 0>like, an okay. Sorry. I'm not making any

00:37:34.320 --> 00:37:36.400
<v Speaker 0>sense right now. Let's take this out for

00:37:36.400 --> 00:37:36.880
<v Speaker 0>two seconds,

00:37:37.655 --> 00:37:39.415
<v Speaker 0>I'll show you what I mean. Is there

00:37:39.415 --> 00:37:41.415
<v Speaker 0>comments in the top file? Yes.

00:37:41.815 --> 00:37:42.455
<v Speaker 2>Mhmm.

00:37:42.855 --> 00:37:44.695
<v Speaker 1>But they're Python. Yeah.

00:37:45.815 --> 00:37:47.575
<v Speaker 0>Okay. So we don't need to use the

00:37:47.575 --> 00:37:48.375
<v Speaker 0>export.

00:37:48.375 --> 00:37:50.410
<v Speaker 0>If I come into my Dockerfile, and let's

00:37:50.410 --> 00:37:52.570
<v Speaker 0>just forget engine x, then we can run

00:37:52.570 --> 00:37:53.690
<v Speaker 0>the NPM

00:37:53.770 --> 00:37:54.970
<v Speaker 0>dev server.

00:37:55.370 --> 00:37:57.370
<v Speaker 0>Then what we can do is NPM

00:37:58.650 --> 00:37:59.450
<v Speaker 0>dev,

00:37:59.450 --> 00:38:01.610
<v Speaker 0>which should give us a more interactive style

00:38:01.610 --> 00:38:04.075
<v Speaker 0>environment. Let me just check. Yeah. So we

00:38:04.075 --> 00:38:05.995
<v Speaker 0>can just do this. I think and then

00:38:05.995 --> 00:38:07.835
<v Speaker 1>do you want that as an entry point?

00:38:08.955 --> 00:38:10.875
<v Speaker 1>Because I think run will run it, like,

00:38:10.875 --> 00:38:12.635
<v Speaker 1>while you're building the image.

00:38:13.275 --> 00:38:14.555
<v Speaker 0>Good catch. I

00:38:15.035 --> 00:38:16.475
<v Speaker 0>definitely do not want to run it in

00:38:16.475 --> 00:38:19.030
<v Speaker 0>the image, so that was a mistake.

00:38:19.430 --> 00:38:21.349
<v Speaker 0>Yeah. So we want entry point. We want

00:38:21.349 --> 00:38:22.230
<v Speaker 0>dev.

00:38:22.550 --> 00:38:23.270
<v Speaker 0>And

00:38:23.829 --> 00:38:25.750
<v Speaker 0>if I look at our UI,

00:38:27.430 --> 00:38:28.710
<v Speaker 0>let's see what happens here.

00:38:31.875 --> 00:38:33.715
<v Speaker 0>Because this is not a long

00:38:34.275 --> 00:38:37.075
<v Speaker 0>running process and then you run that container.

00:38:41.315 --> 00:38:42.355
<v Speaker 0>Give it a second.

00:39:03.005 --> 00:39:04.125
<v Speaker 0>Well, we broke.

00:39:06.045 --> 00:39:07.085
<v Speaker 0>Run that.

00:39:10.205 --> 00:39:11.165
<v Speaker 0>What's

00:39:11.165 --> 00:39:12.605
<v Speaker 0>developing without a few errors?

00:39:14.180 --> 00:39:16.660
<v Speaker 0>Always my errors, of course. Never the total.

00:39:16.660 --> 00:39:17.700
<v Speaker 0>It's just me.

00:39:18.740 --> 00:39:20.820
<v Speaker 0>You know, that was saying pepcak, you know,

00:39:20.820 --> 00:39:23.060
<v Speaker 0>problem exists between keyboard and chair. That's definitely

00:39:23.060 --> 00:39:24.820
<v Speaker 0>true for me. Yep.

00:39:25.380 --> 00:39:27.460
<v Speaker 2>That's why I use a standing desk, no

00:39:27.460 --> 00:39:27.780
<v Speaker 2>chair.

00:39:30.965 --> 00:39:33.605
<v Speaker 0>Alright. We have a dev server. So the

00:39:33.605 --> 00:39:36.005
<v Speaker 0>first hiccup is this port change, which I

00:39:36.005 --> 00:39:37.045
<v Speaker 0>can fix.

00:39:37.125 --> 00:39:39.525
<v Speaker 0>So that port is coming from

00:39:39.685 --> 00:39:40.565
<v Speaker 0>our

00:39:41.045 --> 00:39:41.845
<v Speaker 0>app here.

00:39:43.680 --> 00:39:46.000
<v Speaker 0>Oh, no. So that's a local port. So

00:39:46.000 --> 00:39:47.680
<v Speaker 0>that's not contained Yeah. I think it's coming

00:39:47.680 --> 00:39:49.600
<v Speaker 1>from the Dockerfile

00:39:49.600 --> 00:39:52.000
<v Speaker 1>or oh, no. This one. You're right. You're

00:39:52.000 --> 00:39:52.480
<v Speaker 1>right.

00:39:53.840 --> 00:39:55.760
<v Speaker 0>Which should reload,

00:39:55.760 --> 00:39:56.560
<v Speaker 0>and then

00:39:56.964 --> 00:39:59.045
<v Speaker 0>this shouldn't have changed here. So when that

00:39:59.045 --> 00:40:01.525
<v Speaker 0>goes green, I hopefully, I can just reload

00:40:01.525 --> 00:40:02.565
<v Speaker 0>this page.

00:40:09.045 --> 00:40:11.930
<v Speaker 1>I think I think there may just try

00:40:11.930 --> 00:40:12.730
<v Speaker 1>it again.

00:40:13.370 --> 00:40:14.890
<v Speaker 1>I think it it you may just have

00:40:14.890 --> 00:40:17.290
<v Speaker 1>caught it in the middle of the port

00:40:17.290 --> 00:40:17.930
<v Speaker 1>forward.

00:40:18.250 --> 00:40:21.210
<v Speaker 2>Yeah. Didn't didn't oh, there you go. Perfect.

00:40:22.650 --> 00:40:24.490
<v Speaker 0>Okay. So now I think we're in a

00:40:24.490 --> 00:40:27.245
<v Speaker 0>position where the live update sets the model

00:40:27.245 --> 00:40:28.365
<v Speaker 0>that you kind of expect. So

00:40:30.365 --> 00:40:33.085
<v Speaker 2>let's take pause because if this works right

00:40:33.085 --> 00:40:34.925
<v Speaker 2>now, it's gonna feel just like magic.

00:40:35.165 --> 00:40:37.085
<v Speaker 2>Let's go and do some magic now.

00:40:39.579 --> 00:40:41.900
<v Speaker 0>Alright. So I open the Tilt file. I'm

00:40:41.900 --> 00:40:43.820
<v Speaker 0>gonna bring this code back in.

00:40:44.700 --> 00:40:45.820
<v Speaker 0>And I

00:40:46.460 --> 00:40:48.540
<v Speaker 1>think you don't want any run. You just

00:40:48.540 --> 00:40:49.580
<v Speaker 1>want a sync.

00:40:49.980 --> 00:40:50.380
<v Speaker 0>Yeah.

00:40:51.494 --> 00:40:53.335
<v Speaker 0>Yeah. I'll I'll comment that out for now.

00:40:53.335 --> 00:40:55.095
<v Speaker 0>I I just wanna test the run trigger

00:40:55.095 --> 00:40:56.615
<v Speaker 0>thing. I'm a I'm a bit curious about

00:40:56.615 --> 00:40:57.255
<v Speaker 0>it. And

00:40:58.535 --> 00:41:00.775
<v Speaker 0>then this sync is what the files I

00:41:00.775 --> 00:41:02.214
<v Speaker 0>expect to

00:41:02.855 --> 00:41:05.609
<v Speaker 0>change as part of the build statement. Would

00:41:05.609 --> 00:41:07.210
<v Speaker 0>that would that just be dot, like, when

00:41:07.210 --> 00:41:08.250
<v Speaker 0>anything changes?

00:41:09.450 --> 00:41:10.329
<v Speaker 0>I think you

00:41:12.890 --> 00:41:15.130
<v Speaker 1>yes. That should work. Or would it be

00:41:15.130 --> 00:41:16.650
<v Speaker 0>public, which is where I

00:41:17.375 --> 00:41:19.694
<v Speaker 2>guess? Yeah. The the thing is you need

00:41:19.694 --> 00:41:22.095
<v Speaker 2>to choose what's gonna go where. So you

00:41:22.095 --> 00:41:24.974
<v Speaker 2>need to know what locally is gonna sync

00:41:24.974 --> 00:41:26.975
<v Speaker 2>to where inside the container.

00:41:27.214 --> 00:41:29.694
<v Speaker 2>So if you sync dot, it's gonna basically

00:41:29.694 --> 00:41:32.700
<v Speaker 2>put everything in your everything that's open on

00:41:32.700 --> 00:41:34.620
<v Speaker 2>the sidebar there into the container.

00:41:34.860 --> 00:41:36.220
<v Speaker 2>I think you don't want that.

00:41:37.340 --> 00:41:39.500
<v Speaker 0>Alright. So if I want to sync the

00:41:39.500 --> 00:41:41.420
<v Speaker 0>pages directory, which is the one I'm gonna

00:41:41.420 --> 00:41:42.460
<v Speaker 0>be modifying,

00:41:42.540 --> 00:41:45.365
<v Speaker 0>and then I put that into

00:41:45.445 --> 00:41:47.685
<v Speaker 0>oops. So where did I meant that? Slash

00:41:47.685 --> 00:41:50.725
<v Speaker 0>codes. Yep. So slash codes slash

00:41:51.204 --> 00:41:52.005
<v Speaker 0>pages.

00:41:52.005 --> 00:41:53.205
<v Speaker 2>Mhmm. Mhmm.

00:41:54.645 --> 00:41:56.805
<v Speaker 0>And let's pull up our UI, which is

00:41:56.805 --> 00:41:58.645
<v Speaker 0>now my source of healthiness, I guess.

00:42:03.180 --> 00:42:05.260
<v Speaker 0>And if this works, I should be able

00:42:05.260 --> 00:42:06.540
<v Speaker 0>to change my

00:42:07.740 --> 00:42:10.700
<v Speaker 0>my code HTML and set the pages directory,

00:42:10.700 --> 00:42:12.780
<v Speaker 0>and it will not do any more rebuilds.

00:42:12.780 --> 00:42:13.580
<v Speaker 0>It would just

00:42:14.465 --> 00:42:17.665
<v Speaker 0>match Yep. Let's try. Exactly.

00:42:18.065 --> 00:42:20.145
<v Speaker 0>Alright. So that reloaded.

00:42:21.585 --> 00:42:22.945
<v Speaker 0>Let's modify.

00:42:23.025 --> 00:42:25.505
<v Speaker 0>Let's fail again, and let's just revert it.

00:42:29.279 --> 00:42:31.599
<v Speaker 0>And I got hot reload from from

00:42:31.599 --> 00:42:32.560
<v Speaker 0>JavaScript.

00:42:33.920 --> 00:42:34.560
<v Speaker 0>Yeah.

00:42:34.720 --> 00:42:36.720
<v Speaker 0>That was awesome. That was really cool. And

00:42:36.720 --> 00:42:38.559
<v Speaker 1>if you go to the Tilt UI, you

00:42:38.559 --> 00:42:39.920
<v Speaker 1>can see what it did there.

00:42:42.365 --> 00:42:44.685
<v Speaker 0>One zero point one second to get that

00:42:44.685 --> 00:42:46.045
<v Speaker 0>change onto the container.

00:42:47.085 --> 00:42:48.605
<v Speaker 0>That's what that means. Right? I thought just

00:42:48.605 --> 00:42:50.205
<v Speaker 0>made that up. Yep.

00:42:52.365 --> 00:42:53.964
<v Speaker 1>0.13,

00:42:53.964 --> 00:42:55.325
<v Speaker 1>I guess. There's some rounding.

00:42:57.770 --> 00:43:00.090
<v Speaker 0>I'll take it. That's okay. Alright. Yeah.

00:43:01.130 --> 00:43:04.170
<v Speaker 0>Alright. That's impressive. Color me impressed. So

00:43:04.970 --> 00:43:06.810
<v Speaker 0>sorry. Need to go ahead. And the the

00:43:06.810 --> 00:43:09.595
<v Speaker 2>fun thing is that I think most front

00:43:09.595 --> 00:43:12.075
<v Speaker 2>end developers are used to having this live

00:43:12.075 --> 00:43:13.035
<v Speaker 2>refresh

00:43:13.355 --> 00:43:15.595
<v Speaker 2>depending on the framework they use but not

00:43:15.595 --> 00:43:18.555
<v Speaker 2>inside Kubernetes. Now you're doing this inside Kubernetes.

00:43:18.955 --> 00:43:21.995
<v Speaker 2>Sometimes we use a front end application to

00:43:21.995 --> 00:43:23.835
<v Speaker 2>show what's going on because it's easier to

00:43:23.835 --> 00:43:26.470
<v Speaker 2>see. Then people think, I've seen this before

00:43:26.470 --> 00:43:28.150
<v Speaker 2>in such and such framework.

00:43:28.309 --> 00:43:30.390
<v Speaker 2>But that's because we're just showing it using

00:43:30.390 --> 00:43:32.150
<v Speaker 2>a front end because it's more visual.

00:43:32.390 --> 00:43:34.390
<v Speaker 2>But this works for Go code. This works

00:43:34.390 --> 00:43:37.545
<v Speaker 2>for whatever back end language you're using. So

00:43:37.704 --> 00:43:40.425
<v Speaker 2>anything you're putting inside a container in Kubernetes,

00:43:40.425 --> 00:43:41.945
<v Speaker 2>you can use Live for Load for.

00:43:43.065 --> 00:43:44.505
<v Speaker 0>Very cool. Okay.

00:43:45.785 --> 00:43:46.905
<v Speaker 0>Alright. So

00:43:47.305 --> 00:43:50.025
<v Speaker 0>this run step piqued my interest. So I'm

00:43:50.025 --> 00:43:52.910
<v Speaker 0>curious, If I modify my package dot JSON,

00:43:52.910 --> 00:43:55.630
<v Speaker 0>which is kind of, hopefully, parallel to what

00:43:55.630 --> 00:43:57.869
<v Speaker 0>is happening with the Python example,

00:43:58.109 --> 00:44:00.349
<v Speaker 0>is that and I say trigger this failed

00:44:00.349 --> 00:44:01.310
<v Speaker 0>changes,

00:44:01.390 --> 00:44:01.869
<v Speaker 0>then

00:44:02.510 --> 00:44:03.390
<v Speaker 0>run

00:44:03.390 --> 00:44:05.230
<v Speaker 0>so that would be slash code

00:44:05.230 --> 00:44:05.710
<v Speaker 0>and

00:44:06.325 --> 00:44:07.605
<v Speaker 0>NPM install?

00:44:08.405 --> 00:44:09.205
<v Speaker 0>Yes.

00:44:11.765 --> 00:44:14.565
<v Speaker 1>And you could even say, you know what?

00:44:14.565 --> 00:44:16.005
<v Speaker 1>I don't want to do that in the

00:44:16.005 --> 00:44:16.885
<v Speaker 1>running container.

00:44:18.579 --> 00:44:20.500
<v Speaker 1>In that case, I want to, like, just

00:44:20.500 --> 00:44:22.819
<v Speaker 1>go back to, like, doing the fresh Docker

00:44:22.819 --> 00:44:23.620
<v Speaker 1>build.

00:44:23.859 --> 00:44:26.180
<v Speaker 1>So run should do what you described in

00:44:26.180 --> 00:44:27.140
<v Speaker 1>the container,

00:44:27.300 --> 00:44:29.780
<v Speaker 1>or there's also this fallback on

00:44:30.180 --> 00:44:31.060
<v Speaker 1>function

00:44:31.140 --> 00:44:32.420
<v Speaker 1>that lets you, like

00:44:34.085 --> 00:44:36.724
<v Speaker 1>yep. Change it. So it's, the power is

00:44:36.724 --> 00:44:38.005
<v Speaker 1>in your hands.

00:44:43.125 --> 00:44:45.204
<v Speaker 1>Okay. I'm

00:44:45.204 --> 00:44:46.325
<v Speaker 1>sorry. What was the

00:44:46.964 --> 00:44:48.085
<v Speaker 1>You should do what you said.

00:44:50.300 --> 00:44:53.260
<v Speaker 0>Oh, so automatically so if that command fails,

00:44:53.260 --> 00:44:55.500
<v Speaker 0>it will fall back and rebuild.

00:44:56.540 --> 00:44:59.340
<v Speaker 2>Is that Yeah. And and so I think

00:44:59.340 --> 00:45:02.380
<v Speaker 1>for this to work, you need to also

00:45:02.380 --> 00:45:05.500
<v Speaker 1>have a sync step for package dot JSON

00:45:05.875 --> 00:45:07.075
<v Speaker 1>because otherwise,

00:45:08.115 --> 00:45:10.835
<v Speaker 1>it will go, oh, like, package dot JSON.

00:45:10.835 --> 00:45:12.595
<v Speaker 1>That's a file that I don't know how

00:45:12.595 --> 00:45:13.475
<v Speaker 1>to sync.

00:45:13.715 --> 00:45:16.435
<v Speaker 1>So, like, you know, the idea that we

00:45:16.435 --> 00:45:17.635
<v Speaker 1>have with a

00:45:18.320 --> 00:45:20.320
<v Speaker 1>live update is that, like, when it doesn't

00:45:20.320 --> 00:45:23.680
<v Speaker 1>know like like, you're describing a fast path,

00:45:24.000 --> 00:45:26.640
<v Speaker 1>and sometimes you fall off that fast path,

00:45:26.800 --> 00:45:28.400
<v Speaker 1>like, if it doesn't know how to sync

00:45:28.400 --> 00:45:29.920
<v Speaker 1>package dot JSON.

00:45:30.000 --> 00:45:30.960
<v Speaker 1>So let's try this.

00:45:32.315 --> 00:45:33.835
<v Speaker 1>Yeah. This should work.

00:45:38.154 --> 00:45:40.155
<v Speaker 0>Alright. So let's modify

00:45:40.875 --> 00:45:41.755
<v Speaker 0>package

00:45:41.755 --> 00:45:43.755
<v Speaker 0>dot JSON, and let's add

00:45:45.950 --> 00:45:47.630
<v Speaker 0>I guess we could bump up a version

00:45:47.630 --> 00:45:50.510
<v Speaker 0>here. Right? So let's hope test package is

00:45:50.750 --> 00:45:51.470
<v Speaker 0>changed.

00:45:53.070 --> 00:45:54.990
<v Speaker 0>Yeah. Okay. We've got a few versions there.

00:45:54.990 --> 00:45:56.590
<v Speaker 0>So I just saved this.

00:45:57.870 --> 00:45:58.750
<v Speaker 0>Yeah. There we go.

00:46:04.165 --> 00:46:04.805
<v Speaker 0>Cool.

00:46:04.965 --> 00:46:07.525
<v Speaker 0>That that is that's a very nice feature.

00:46:07.525 --> 00:46:08.485
<v Speaker 0>I like that.

00:46:09.765 --> 00:46:10.965
<v Speaker 0>Let's tackle

00:46:11.285 --> 00:46:12.165
<v Speaker 0>Postgres.

00:46:12.484 --> 00:46:14.165
<v Speaker 0>How do I

00:46:14.900 --> 00:46:16.420
<v Speaker 0>how do I okay.

00:46:16.900 --> 00:46:18.020
<v Speaker 0>Let's how do I get rid of this

00:46:18.020 --> 00:46:20.260
<v Speaker 0>Postgres book, Yamal? And how do I consume

00:46:20.260 --> 00:46:21.620
<v Speaker 0>the Helm chart?

00:46:22.020 --> 00:46:22.580
<v Speaker 0>Or

00:46:27.195 --> 00:46:28.795
<v Speaker 1>So delete that

00:46:30.875 --> 00:46:31.755
<v Speaker 1>line,

00:46:31.755 --> 00:46:34.235
<v Speaker 1>and we should actually check perhaps,

00:46:35.435 --> 00:46:37.515
<v Speaker 1>Tilt didn't delete the

00:46:37.755 --> 00:46:38.635
<v Speaker 1>resource,

00:46:39.115 --> 00:46:41.755
<v Speaker 1>in your cluster, which maybe it should,

00:46:42.560 --> 00:46:45.120
<v Speaker 1>that's a different discussion.

00:46:50.000 --> 00:46:50.880
<v Speaker 0>Okay.

00:46:50.880 --> 00:46:54.000
<v Speaker 0>So I think I understand the challenge there.

00:46:54.480 --> 00:46:56.480
<v Speaker 0>So postcards are still running in my cluster.

00:46:57.465 --> 00:46:59.545
<v Speaker 0>Now does so what I the first question

00:46:59.545 --> 00:47:00.905
<v Speaker 0>that popped into my head there is if

00:47:00.905 --> 00:47:02.825
<v Speaker 0>I remove that from the file, Tilt reloads

00:47:02.825 --> 00:47:04.745
<v Speaker 0>that file, that resource no longer exists in

00:47:04.745 --> 00:47:05.865
<v Speaker 0>its vocabulary.

00:47:06.025 --> 00:47:08.665
<v Speaker 0>Do you store anything within the Kubernetes side

00:47:08.665 --> 00:47:11.865
<v Speaker 0>on annotations or labels to identify something as

00:47:11.480 --> 00:47:13.640
<v Speaker 0>a tilt orchestrated resource?

00:47:14.839 --> 00:47:15.560
<v Speaker 1>Yeah.

00:47:15.960 --> 00:47:16.680
<v Speaker 1>Yes.

00:47:17.160 --> 00:47:18.599
<v Speaker 1>There's metadata.

00:47:18.599 --> 00:47:20.760
<v Speaker 1>There's a managed by tilt

00:47:21.319 --> 00:47:22.520
<v Speaker 1>annotation,

00:47:22.680 --> 00:47:22.839
<v Speaker 1>and

00:47:24.245 --> 00:47:25.845
<v Speaker 1>it turns out that, like, there's a lot

00:47:25.845 --> 00:47:27.125
<v Speaker 1>of different expectations

00:47:27.125 --> 00:47:28.405
<v Speaker 1>you could have

00:47:29.045 --> 00:47:31.285
<v Speaker 1>for these. And so I think if you

00:47:31.285 --> 00:47:33.205
<v Speaker 1>run tilt down,

00:47:33.205 --> 00:47:34.005
<v Speaker 1>it will

00:47:34.805 --> 00:47:35.685
<v Speaker 1>delete

00:47:35.685 --> 00:47:36.325
<v Speaker 1>everything.

00:47:38.740 --> 00:47:41.300
<v Speaker 1>Yeah. And so it turns out life cycle

00:47:41.300 --> 00:47:43.540
<v Speaker 1>is hard. And in most of these cases,

00:47:43.540 --> 00:47:44.980
<v Speaker 1>because it's a development

00:47:45.460 --> 00:47:48.020
<v Speaker 1>instance, you know, it's it's kind

00:47:48.500 --> 00:47:51.105
<v Speaker 1>of just acceptable to say instead of figuring

00:47:51.105 --> 00:47:53.745
<v Speaker 1>out a model that the tool understands and

00:47:53.745 --> 00:47:56.945
<v Speaker 1>you understand, just, you know, delete everything

00:47:57.425 --> 00:47:58.945
<v Speaker 1>and start over

00:47:59.585 --> 00:48:01.265
<v Speaker 1>because, you know, this is kind of a

00:48:01.265 --> 00:48:03.905
<v Speaker 1>way to make your development instance cattle

00:48:05.710 --> 00:48:07.630
<v Speaker 1>in as opposed to pets.

00:48:09.150 --> 00:48:11.150
<v Speaker 0>Alright. Let me throw one and a half

00:48:11.150 --> 00:48:13.310
<v Speaker 0>questions at you there as a follow-up.

00:48:13.390 --> 00:48:14.030
<v Speaker 0>So

00:48:14.350 --> 00:48:16.830
<v Speaker 0>does Tilt Care of my Kubernetes cluster is

00:48:16.830 --> 00:48:18.190
<v Speaker 0>local or remote?

00:48:18.830 --> 00:48:19.230
<v Speaker 0>Nope.

00:48:20.775 --> 00:48:23.815
<v Speaker 0>So as the if I have a that

00:48:23.815 --> 00:48:25.255
<v Speaker 0>was a very quick answer. I like it.

00:48:25.255 --> 00:48:27.175
<v Speaker 0>If Kubernetes cluster is remote,

00:48:27.655 --> 00:48:29.494
<v Speaker 0>what if two developers are using Tilt at

00:48:29.494 --> 00:48:31.494
<v Speaker 0>the same time against the same cluster? Are

00:48:31.494 --> 00:48:34.040
<v Speaker 0>there challenges there? Or does that just work?

00:48:35.320 --> 00:48:38.280
<v Speaker 1>So I'll I'll maybe put an asterisk.

00:48:38.360 --> 00:48:41.080
<v Speaker 1>Tilt works with either local or remote,

00:48:41.240 --> 00:48:43.880
<v Speaker 1>but it has kinda like like, in it

00:48:43.880 --> 00:48:45.880
<v Speaker 1>will special case local clusters

00:48:46.285 --> 00:48:47.245
<v Speaker 1>to, like,

00:48:47.965 --> 00:48:50.765
<v Speaker 1>you know, push things in more optimal ways.

00:48:50.765 --> 00:48:52.605
<v Speaker 1>Like, it can skip the push,

00:48:52.925 --> 00:48:54.285
<v Speaker 1>and it will

00:48:54.685 --> 00:48:56.605
<v Speaker 1>require you to, like,

00:48:58.125 --> 00:48:59.645
<v Speaker 1>say which Kubernetes

00:48:59.645 --> 00:49:00.605
<v Speaker 1>context

00:49:00.605 --> 00:49:01.725
<v Speaker 1>are allowed

00:49:02.230 --> 00:49:04.870
<v Speaker 1>if it's not a local cluster so that

00:49:04.870 --> 00:49:07.510
<v Speaker 1>you can't, like, just start up Tilt against

00:49:07.510 --> 00:49:09.110
<v Speaker 1>a production cluster.

00:49:09.750 --> 00:49:10.390
<v Speaker 1>And

00:49:10.550 --> 00:49:14.070
<v Speaker 1>so if this were a remote cluster, you'd

00:49:14.070 --> 00:49:15.590
<v Speaker 1>have to kind of say, like, yes. I

00:49:15.590 --> 00:49:17.590
<v Speaker 1>want to use this context with Tilt.

00:49:18.145 --> 00:49:21.105
<v Speaker 1>And you'd probably also like, there's an extension

00:49:21.105 --> 00:49:22.945
<v Speaker 1>to add namespaces

00:49:23.105 --> 00:49:24.305
<v Speaker 1>to objects.

00:49:24.865 --> 00:49:27.105
<v Speaker 1>And so, like, in the Tilt file,

00:49:27.265 --> 00:49:30.145
<v Speaker 1>you could, like, take all the objects that

00:49:30.145 --> 00:49:32.225
<v Speaker 1>you're passing to Kubernetes YAML

00:49:32.619 --> 00:49:33.500
<v Speaker 1>And, like,

00:49:34.140 --> 00:49:36.859
<v Speaker 1>you can use you can, like, add your

00:49:36.859 --> 00:49:37.740
<v Speaker 1>username

00:49:38.380 --> 00:49:40.220
<v Speaker 1>to that namespace

00:49:40.300 --> 00:49:41.100
<v Speaker 1>by,

00:49:42.780 --> 00:49:43.420
<v Speaker 1>yeah,

00:49:44.460 --> 00:49:47.099
<v Speaker 1>using a function called local in the tilt

00:49:47.099 --> 00:49:50.174
<v Speaker 1>file to run a command. So you'd, like,

00:49:50.174 --> 00:49:52.815
<v Speaker 1>have a call local who am I, which

00:49:52.815 --> 00:49:55.135
<v Speaker 1>would return, I don't know, d mckay or

00:49:55.135 --> 00:49:58.654
<v Speaker 1>Rawkode or, like, awesome dude or whatever your

00:49:58.654 --> 00:50:01.130
<v Speaker 1>username is. And then that would actually be

00:50:01.130 --> 00:50:04.010
<v Speaker 1>a value in the Tilt file that you

00:50:04.010 --> 00:50:06.090
<v Speaker 1>pass in as the namespace.

00:50:07.450 --> 00:50:08.170
<v Speaker 0>Okay.

00:50:08.330 --> 00:50:09.450
<v Speaker 0>Got it. That makes sense.

00:50:13.865 --> 00:50:15.225
<v Speaker 2>I hear a cat.

00:50:15.545 --> 00:50:16.585
<v Speaker 1>Oh, yep.

00:50:17.704 --> 00:50:19.385
<v Speaker 0>Oh, yeah. There is a rule. If you

00:50:19.385 --> 00:50:21.385
<v Speaker 0>have animals, they always have to join us.

00:50:21.385 --> 00:50:24.585
<v Speaker 0>I'm actually Can you full screen the cat?

00:50:24.825 --> 00:50:26.345
<v Speaker 0>Yes. I can. Hold on.

00:50:27.240 --> 00:50:29.400
<v Speaker 1>He's our he's our Trigger,

00:50:29.480 --> 00:50:31.400
<v Speaker 1>which is to say he has three legs.

00:50:31.400 --> 00:50:33.800
<v Speaker 1>He's a rescue that we got a year

00:50:33.800 --> 00:50:35.400
<v Speaker 1>ago, and he is a very

00:50:36.920 --> 00:50:38.760
<v Speaker 1>curious and bitey guy.

00:50:40.845 --> 00:50:44.205
<v Speaker 0>I'm actually surrounded by animals. So I've got

00:50:44.205 --> 00:50:47.405
<v Speaker 0>five chinchillas over here, and I've got my

00:50:47.565 --> 00:50:50.045
<v Speaker 0>my ferret over here who's free roaming, who

00:50:50.045 --> 00:50:52.445
<v Speaker 0>sometimes joins the stream just to say hello.

00:50:52.445 --> 00:50:54.365
<v Speaker 0>And I have some some diggers in the

00:50:54.365 --> 00:50:57.260
<v Speaker 0>other room. And they're just over there chinchilling.

00:50:57.740 --> 00:51:00.300
<v Speaker 0>They are just chinchilling. Yeah. But I had

00:51:00.300 --> 00:51:01.820
<v Speaker 0>to turn my desk around. So my desk

00:51:01.820 --> 00:51:03.740
<v Speaker 0>in this office is a really weird angle

00:51:03.740 --> 00:51:05.660
<v Speaker 0>because people just kept asking me about my

00:51:05.660 --> 00:51:07.740
<v Speaker 0>animals during stand up all the time. Like,

00:51:07.740 --> 00:51:08.940
<v Speaker 0>oh, what's that? Sure.

00:51:11.394 --> 00:51:12.674
<v Speaker 0>Not that I don't like talking about my

00:51:12.674 --> 00:51:14.755
<v Speaker 0>animals, of course. But Yeah.

00:51:15.075 --> 00:51:15.875
<v Speaker 0>Alright.

00:51:16.914 --> 00:51:20.035
<v Speaker 0>Let's do the Helmy thingy. The Helmy thingy.

00:51:21.714 --> 00:51:23.555
<v Speaker 0>If I just search for Helm,

00:51:23.950 --> 00:51:26.510
<v Speaker 0>then Yeah. Let's let's see if our documentation's

00:51:26.510 --> 00:51:27.310
<v Speaker 2>up to date.

00:51:27.790 --> 00:51:29.710
<v Speaker 0>Yeah. I've been impressed with it so far.

00:51:29.710 --> 00:51:30.430
<v Speaker 0>So

00:51:30.670 --> 00:51:32.590
<v Speaker 0>I am just gonna copy

00:51:32.590 --> 00:51:34.510
<v Speaker 0>the I'm gonna copy the bit more complete

00:51:34.510 --> 00:51:36.430
<v Speaker 0>one. I'm feeling adventurous now. I'm getting the

00:51:36.430 --> 00:51:37.870
<v Speaker 0>hang of this. So

00:51:39.654 --> 00:51:41.255
<v Speaker 2>I'll be back in a second.

00:51:41.575 --> 00:51:42.695
<v Speaker 0>Yeah. No worries.

00:51:45.335 --> 00:51:47.015
<v Speaker 0>Oh, no. That's interesting.

00:51:47.015 --> 00:51:49.414
<v Speaker 0>Okay. So this is actually creating the YAML

00:51:49.414 --> 00:51:51.575
<v Speaker 0>and then I'm parsing it into a function.

00:51:51.654 --> 00:51:52.295
<v Speaker 0>Okay.

00:51:53.015 --> 00:51:55.780
<v Speaker 0>I need to discuss by my chart.

00:51:56.260 --> 00:51:58.660
<v Speaker 0>Now would that use Helm repositories that I

00:51:58.660 --> 00:52:01.059
<v Speaker 0>have configured locally, or it's just something I

00:52:01.059 --> 00:52:02.740
<v Speaker 0>need to do special there?

00:52:03.780 --> 00:52:04.099
<v Speaker 1>It

00:52:04.819 --> 00:52:07.300
<v Speaker 1>oh, you know, one of the advantages of

00:52:07.300 --> 00:52:09.220
<v Speaker 1>having a team is that

00:52:09.345 --> 00:52:12.545
<v Speaker 1>other people I'm not entirely sure. So let's

00:52:12.545 --> 00:52:13.105
<v Speaker 1>see.

00:52:14.385 --> 00:52:17.505
<v Speaker 1>We also can deploy a remote helm chart,

00:52:18.305 --> 00:52:20.705
<v Speaker 1>which we talk about. And

00:52:21.960 --> 00:52:24.120
<v Speaker 1>let's, yeah, let's let's

00:52:24.760 --> 00:52:28.120
<v Speaker 1>let's venture forth and see which

00:52:29.240 --> 00:52:32.360
<v Speaker 1>rocks we crash ourselves into with

00:52:32.440 --> 00:52:33.080
<v Speaker 1>gusto.

00:52:34.235 --> 00:52:37.035
<v Speaker 0>Sorry. I am no stranger to reading documentation.

00:52:37.035 --> 00:52:38.555
<v Speaker 0>In fact, the original name of the stream

00:52:38.555 --> 00:52:41.115
<v Speaker 0>was RTFM with Rawkode, but people voted against

00:52:41.115 --> 00:52:42.715
<v Speaker 0>it on Twitter. So I I got rid

00:52:42.715 --> 00:52:43.355
<v Speaker 0>of it.

00:52:44.395 --> 00:52:45.115
<v Speaker 0>So

00:52:45.515 --> 00:52:46.155
<v Speaker 0>let's see.

00:52:46.940 --> 00:52:49.740
<v Speaker 0>We can load a remote chart. We give

00:52:49.740 --> 00:52:50.700
<v Speaker 0>it a name,

00:52:51.100 --> 00:52:52.860
<v Speaker 0>and then we can execute it

00:52:53.420 --> 00:52:54.860
<v Speaker 0>like so. So let's see if I can

00:52:54.860 --> 00:52:56.300
<v Speaker 0>work this one out. If I go to

00:52:56.300 --> 00:52:57.980
<v Speaker 0>the Helmholt and

00:53:00.460 --> 00:53:01.820
<v Speaker 0>search for Postgres,

00:53:06.755 --> 00:53:08.115
<v Speaker 0>Let's use

00:53:11.315 --> 00:53:12.835
<v Speaker 0>is that the only four?

00:53:13.234 --> 00:53:14.435
<v Speaker 0>That's not right.

00:53:14.835 --> 00:53:15.955
<v Speaker 0>Let's try MongoDB.

00:53:28.770 --> 00:53:30.770
<v Speaker 0>Give me a chart I've used before, please.

00:53:34.095 --> 00:53:36.335
<v Speaker 0>Alright. Let's just pick something around on that.

00:53:36.335 --> 00:53:37.855
<v Speaker 0>It doesn't have to be a database.

00:53:39.135 --> 00:53:41.295
<v Speaker 0>Let's go with Bitnami

00:53:41.695 --> 00:53:42.575
<v Speaker 0>console.

00:53:44.575 --> 00:53:45.375
<v Speaker 0>So

00:53:46.415 --> 00:53:47.855
<v Speaker 0>that's

00:53:49.180 --> 00:53:51.740
<v Speaker 0>a okay. So extension helm remote. I don't

00:53:51.740 --> 00:53:53.660
<v Speaker 0>think I changed that because I'm obviously loading

00:53:53.660 --> 00:53:55.100
<v Speaker 0>some sort of extension,

00:53:55.180 --> 00:53:57.740
<v Speaker 0>given that name, and then I have this

00:53:57.740 --> 00:54:00.540
<v Speaker 0>chart name. So for me, would that be

00:54:01.775 --> 00:54:03.535
<v Speaker 0>no. I don't know. So

00:54:10.735 --> 00:54:12.895
<v Speaker 0>I do not have a local chart.

00:54:14.610 --> 00:54:16.370
<v Speaker 0>I think I'm gonna rate

00:54:16.370 --> 00:54:17.090
<v Speaker 0>it

00:54:17.490 --> 00:54:18.850
<v Speaker 0>with this extension.

00:54:19.330 --> 00:54:21.250
<v Speaker 1>So I think if you go for more

00:54:21.250 --> 00:54:23.890
<v Speaker 1>options, see the Helm remote read me just

00:54:23.890 --> 00:54:25.650
<v Speaker 1>a bit below your mouse,

00:54:25.890 --> 00:54:26.850
<v Speaker 1>there's a link there.

00:54:28.905 --> 00:54:30.105
<v Speaker 0>There

00:54:30.105 --> 00:54:30.825
<v Speaker 0>we go.

00:54:34.345 --> 00:54:37.065
<v Speaker 0>There. That's kinda that makes more sense.

00:54:38.585 --> 00:54:41.305
<v Speaker 0>Yeah. This example was not great for me,

00:54:41.305 --> 00:54:43.385
<v Speaker 0>but this one definitely helps.

00:54:44.360 --> 00:54:45.400
<v Speaker 0>Alright.

00:54:46.440 --> 00:54:46.920
<v Speaker 0>Oh,

00:54:50.040 --> 00:54:51.960
<v Speaker 0>Oh, chart name

00:54:53.480 --> 00:54:55.800
<v Speaker 0>will be we said console.

00:54:56.465 --> 00:54:59.985
<v Speaker 0>The repository URL I copied from Helm Hub.

00:55:01.185 --> 00:55:04.065
<v Speaker 0>I'm gonna give that a name of Bitnami.

00:55:04.065 --> 00:55:05.265
<v Speaker 0>And I wonder

00:55:07.345 --> 00:55:08.065
<v Speaker 0>my

00:55:08.145 --> 00:55:09.905
<v Speaker 0>console

00:55:11.780 --> 00:55:12.740
<v Speaker 0>And

00:55:15.140 --> 00:55:17.940
<v Speaker 0>so the values here is a list. Is

00:55:17.940 --> 00:55:19.940
<v Speaker 0>that multiple value fails

00:55:19.940 --> 00:55:22.260
<v Speaker 0>or is it key value

00:55:22.215 --> 00:55:23.095
<v Speaker 0>pairs?

00:55:24.455 --> 00:55:26.455
<v Speaker 0>Value fails. Right. Okay.

00:55:27.575 --> 00:55:27.975
<v Speaker 0>So

00:55:34.859 --> 00:55:35.980
<v Speaker 0>Let's see.

00:55:36.460 --> 00:55:39.019
<v Speaker 0>We'll have console values

00:55:39.019 --> 00:55:40.140
<v Speaker 0>dot yaml.

00:55:40.539 --> 00:55:41.819
<v Speaker 0>I'm gonna try not to see if this

00:55:41.819 --> 00:55:43.900
<v Speaker 0>failed because I'm assuming it'll be gonna break

00:55:43.900 --> 00:55:44.539
<v Speaker 0>everything.

00:55:46.994 --> 00:55:48.595
<v Speaker 1>I I think it will just, you know,

00:55:48.595 --> 00:55:50.355
<v Speaker 1>give a parse error in the

00:55:53.154 --> 00:55:55.075
<v Speaker 0>Oh, really? Okay. Let's see that. Blah blah

00:55:55.075 --> 00:55:55.875
<v Speaker 0>blah blah blah.

00:55:56.835 --> 00:55:58.515
<v Speaker 0>What happens if I do that?

00:55:59.954 --> 00:56:00.835
<v Speaker 0>Alright. Okay.

00:56:03.619 --> 00:56:06.819
<v Speaker 0>Cool. I was just curious. Yeah. No. We

00:56:06.819 --> 00:56:08.579
<v Speaker 1>we want to make it, you know, safe

00:56:08.579 --> 00:56:09.940
<v Speaker 1>for you to do things.

00:56:10.980 --> 00:56:12.819
<v Speaker 0>Well, I'm very glad that it doesn't just

00:56:12.819 --> 00:56:14.660
<v Speaker 0>kill the Tilt process, and I have the

00:56:14.660 --> 00:56:16.420
<v Speaker 0>opportunity to just go back and fix it.

00:56:16.420 --> 00:56:18.955
<v Speaker 0>So do it tail upping again. So that's

00:56:18.955 --> 00:56:19.435
<v Speaker 0>good.

00:56:20.395 --> 00:56:22.075
<v Speaker 2>We we have a we have a config

00:56:22.075 --> 00:56:24.795
<v Speaker 2>file that is safe for feline typists.

00:56:27.195 --> 00:56:28.795
<v Speaker 2>So, you know, if your cat walks over

00:56:28.795 --> 00:56:29.915
<v Speaker 2>your computer Yes.

00:56:33.195 --> 00:56:35.130
<v Speaker 0>Yes. That's a developer experience I hadn't really

00:56:35.130 --> 00:56:37.450
<v Speaker 0>thought of before, but yeah. My my favorite

00:56:37.450 --> 00:56:39.930
<v Speaker 0>loves to type in stuff random stuff.

00:56:41.690 --> 00:56:42.250
<v Speaker 0>So

00:56:43.210 --> 00:56:45.450
<v Speaker 0>I guess I don't really need to override

00:56:45.450 --> 00:56:48.605
<v Speaker 0>this value, the default one might be enough.

00:56:49.244 --> 00:56:51.005
<v Speaker 0>Plus, I don't know where it is. So

00:56:51.085 --> 00:56:52.445
<v Speaker 0>let's see. Get out

00:56:52.845 --> 00:56:53.885
<v Speaker 0>let me check.

00:56:56.285 --> 00:56:58.125
<v Speaker 0>Yeah. Okay. We'll make one change.

00:57:01.310 --> 00:57:02.270
<v Speaker 0>Console.

00:57:04.430 --> 00:57:05.390
<v Speaker 0>Values.

00:57:05.390 --> 00:57:05.870
<v Speaker 0>Okay.

00:57:08.430 --> 00:57:11.150
<v Speaker 0>Let's change

00:57:12.365 --> 00:57:13.885
<v Speaker 0>to data center name.

00:57:15.885 --> 00:57:17.485
<v Speaker 0>Okay. Rawkode.

00:57:19.244 --> 00:57:21.244
<v Speaker 0>So that should pull in my values. I

00:57:21.244 --> 00:57:23.565
<v Speaker 0>gave my release a name. I can take

00:57:23.565 --> 00:57:24.845
<v Speaker 0>out my random error.

00:57:25.460 --> 00:57:26.500
<v Speaker 0>So

00:57:26.579 --> 00:57:28.099
<v Speaker 0>my question here is,

00:57:28.420 --> 00:57:30.900
<v Speaker 0>how does Tilt discover these extensions? Is there

00:57:30.900 --> 00:57:33.380
<v Speaker 0>anything I need to do? Or does this

00:57:33.700 --> 00:57:35.380
<v Speaker 0>know what it was from a registry or

00:57:35.380 --> 00:57:36.900
<v Speaker 0>GitHub or or what?

00:57:37.380 --> 00:57:40.805
<v Speaker 1>Yep. Registry on Git sorry. L u Yeah.

00:57:41.045 --> 00:57:43.204
<v Speaker 2>We have a we have a tilt extensions

00:57:43.204 --> 00:57:44.085
<v Speaker 2>repo.

00:57:44.484 --> 00:57:46.565
<v Speaker 2>And then when you prepend

00:57:46.565 --> 00:57:49.365
<v Speaker 2>the load instruction with EXT

00:57:49.605 --> 00:57:52.164
<v Speaker 2>and all of that, then it just finds

00:57:52.164 --> 00:57:54.005
<v Speaker 2>the extension in the extension repo.

00:57:54.950 --> 00:57:55.589
<v Speaker 0>Okay.

00:57:55.910 --> 00:57:56.470
<v Speaker 0>Cool.

00:57:56.950 --> 00:57:58.710
<v Speaker 0>So I've saved that

00:58:01.750 --> 00:58:03.109
<v Speaker 0>and tried

00:58:03.109 --> 00:58:04.869
<v Speaker 0>that. I bet you I just don't have

00:58:04.869 --> 00:58:06.070
<v Speaker 0>helm installed,

00:58:08.069 --> 00:58:09.670
<v Speaker 0>which, of course, would be a bit of

00:58:09.670 --> 00:58:11.075
<v Speaker 0>a challenge. So

00:58:13.474 --> 00:58:15.075
<v Speaker 0>I'm starting to get very much used to

00:58:15.075 --> 00:58:16.674
<v Speaker 0>this Mac. I got this when I started

00:58:16.674 --> 00:58:18.515
<v Speaker 0>my new role, and I've been a Linux

00:58:18.515 --> 00:58:20.674
<v Speaker 0>user since I was, like, 16. So I

00:58:20.835 --> 00:58:21.955
<v Speaker 0>I'm hoping

00:58:22.355 --> 00:58:22.914
<v Speaker 0>this works.

00:58:24.170 --> 00:58:26.329
<v Speaker 2>Are you are you able to make the

00:58:26.329 --> 00:58:26.890
<v Speaker 2>change?

00:58:27.130 --> 00:58:28.329
<v Speaker 2>To make the jump?

00:58:29.609 --> 00:58:30.730
<v Speaker 0>It's been painful.

00:58:30.809 --> 00:58:32.490
<v Speaker 0>I keep kinda wanting to go back to

00:58:32.490 --> 00:58:34.569
<v Speaker 0>my Linux machine, but mostly for my window

00:58:34.569 --> 00:58:36.490
<v Speaker 0>manager and all my shortcuts, which have now

00:58:36.490 --> 00:58:38.495
<v Speaker 0>been disappeared. The good thing is that my

00:58:38.495 --> 00:58:40.655
<v Speaker 0>terminal hasn't really changed. I'm using all my

00:58:40.655 --> 00:58:42.975
<v Speaker 0>my Z Shell plugins. So it's going okay,

00:58:42.975 --> 00:58:44.895
<v Speaker 0>but I definitely I I've there's been some

00:58:44.895 --> 00:58:46.095
<v Speaker 0>friction and tension.

00:58:47.935 --> 00:58:48.335
<v Speaker 1>Yep.

00:58:50.900 --> 00:58:52.339
<v Speaker 0>Is that the right helm?

00:58:56.099 --> 00:58:57.380
<v Speaker 0>I bet you it's not.

00:58:58.900 --> 00:59:00.500
<v Speaker 0>Have I still told someone around? No. It

00:59:00.500 --> 00:59:02.500
<v Speaker 0>is. Okay. So we have helm. Oh, no.

00:59:02.500 --> 00:59:04.339
<v Speaker 0>But I haven't told I haven't changed the

00:59:04.339 --> 00:59:07.355
<v Speaker 0>fail. Tilt doesn't monitor my path for for

00:59:07.355 --> 00:59:08.075
<v Speaker 0>Helm. So

00:59:08.875 --> 00:59:10.155
<v Speaker 1>Yeah. You're correct.

00:59:12.155 --> 00:59:14.315
<v Speaker 0>Alright. Cool. There we go. So it's adding

00:59:14.315 --> 00:59:15.515
<v Speaker 0>the repository.

00:59:16.315 --> 00:59:17.595
<v Speaker 0>What have I got over here?

00:59:18.530 --> 00:59:19.250
<v Speaker 1>Sorry.

00:59:19.570 --> 00:59:20.210
<v Speaker 1>Like

00:59:20.450 --> 00:59:22.290
<v Speaker 1>I said, cricket is the ID.

00:59:23.810 --> 00:59:26.609
<v Speaker 2>It's it's super fun when when Dan does

00:59:26.609 --> 00:59:28.370
<v Speaker 2>that, like, in meetings and stuff.

00:59:28.930 --> 00:59:30.690
<v Speaker 2>Because you you never know you never know

00:59:30.690 --> 00:59:31.890
<v Speaker 2>if you said something

00:59:31.970 --> 00:59:33.890
<v Speaker 2>that makes no sense or if it's just

00:59:33.890 --> 00:59:37.305
<v Speaker 2>his cat. And look to, like, within two

00:59:37.305 --> 00:59:38.825
<v Speaker 1>parts in 10,000,

00:59:38.825 --> 00:59:41.385
<v Speaker 1>loading your Tilt file took five seconds.

00:59:44.345 --> 00:59:45.305
<v Speaker 2>That

00:59:45.785 --> 00:59:48.590
<v Speaker 2>is true. Just at the bottom there, successfully

00:59:48.590 --> 00:59:51.950
<v Speaker 1>loaded tilt file. Took 3.141

00:59:52.190 --> 00:59:53.950
<v Speaker 0>Oh, yeah. Four seconds.

00:59:57.310 --> 00:59:58.910
<v Speaker 0>I mean, good news is that I do

00:59:58.910 --> 01:00:00.910
<v Speaker 0>have a green my console now.

01:00:01.895 --> 01:00:04.775
<v Speaker 0>I have a restart here, but I did

01:00:04.775 --> 01:00:07.335
<v Speaker 0>just deploy a random chart without really tweaking

01:00:07.335 --> 01:00:09.255
<v Speaker 0>the parameters. So I'm gonna let that one

01:00:09.255 --> 01:00:09.895
<v Speaker 0>slide.

01:00:13.095 --> 01:00:14.055
<v Speaker 0>Alright.

01:00:14.055 --> 01:00:15.494
<v Speaker 0>So that could have been

01:00:15.960 --> 01:00:17.800
<v Speaker 0>a production post code or it could have

01:00:17.800 --> 01:00:19.400
<v Speaker 0>been a development production

01:00:20.520 --> 01:00:21.960
<v Speaker 0>could have been a post code to point

01:00:21.960 --> 01:00:24.760
<v Speaker 0>their helm with development environments configured through this

01:00:24.760 --> 01:00:25.720
<v Speaker 0>path here,

01:00:25.880 --> 01:00:27.560
<v Speaker 0>but it wasn't. But it did do what

01:00:27.560 --> 01:00:29.480
<v Speaker 0>it was supposed to do. So that's good.

01:00:30.925 --> 01:00:31.725
<v Speaker 0>Awesome.

01:00:32.925 --> 01:00:35.165
<v Speaker 0>Now one final thing,

01:00:35.484 --> 01:00:36.605
<v Speaker 0>and then we'll

01:00:36.925 --> 01:00:39.565
<v Speaker 0>we'll leave it as that. The customized thing

01:00:40.365 --> 01:00:42.285
<v Speaker 0>so the the one question I still got

01:00:42.285 --> 01:00:44.045
<v Speaker 0>kinda burning in my head right now.

01:00:45.119 --> 01:00:47.759
<v Speaker 0>The YAML files I usually have in my

01:00:47.759 --> 01:00:50.000
<v Speaker 0>repository are customized based so that I can

01:00:50.000 --> 01:00:52.240
<v Speaker 0>do multiple environments.

01:00:53.359 --> 01:00:54.880
<v Speaker 0>What is the workflow

01:00:54.880 --> 01:00:56.000
<v Speaker 0>for that?

01:00:56.480 --> 01:00:57.760
<v Speaker 0>I'm assuming

01:00:57.839 --> 01:00:58.559
<v Speaker 0>there's docs.

01:00:59.565 --> 01:01:00.365
<v Speaker 0>Yes.

01:01:02.925 --> 01:01:04.765
<v Speaker 0>Am I still yeah. That's still the helm

01:01:04.765 --> 01:01:05.405
<v Speaker 0>one.

01:01:07.565 --> 01:01:08.445
<v Speaker 2>I think for cost

01:01:09.085 --> 01:01:10.765
<v Speaker 2>yeah. I think for customize, you go to

01:01:10.765 --> 01:01:12.925
<v Speaker 2>the API and then you check the

01:01:13.085 --> 01:01:14.285
<v Speaker 2>customize function there.

01:01:15.540 --> 01:01:16.900
<v Speaker 2>So way at the bottom

01:01:20.980 --> 01:01:23.060
<v Speaker 2>no. Not not that much bottom bottom of

01:01:23.060 --> 01:01:23.860
<v Speaker 2>the menu.

01:01:25.620 --> 01:01:27.140
<v Speaker 2>Tilt to API reference.

01:01:29.885 --> 01:01:31.805
<v Speaker 2>There should be a customized function in there

01:01:31.805 --> 01:01:32.525
<v Speaker 2>somewhere.

01:01:33.325 --> 01:01:34.925
<v Speaker 0>Okay. So this is

01:01:35.245 --> 01:01:37.005
<v Speaker 0>this is all of the extensions.

01:01:43.500 --> 01:01:46.460
<v Speaker 2>If you control f, it's probably

01:01:46.780 --> 01:01:47.260
<v Speaker 2>easier. There

01:01:48.140 --> 01:01:48.780
<v Speaker 2>you go.

01:01:52.700 --> 01:01:54.460
<v Speaker 0>I think you just pointed to the customized

01:01:54.460 --> 01:01:55.980
<v Speaker 0>files. Right? Just

01:02:00.195 --> 01:02:02.835
<v Speaker 0>and I'd have to install customize first. Okay.

01:02:02.995 --> 01:02:05.075
<v Speaker 0>We don't need to go through that steps.

01:02:05.075 --> 01:02:07.235
<v Speaker 0>I've gotta trust that it just works. Plus,

01:02:07.235 --> 01:02:09.235
<v Speaker 0>I don't have any customized files locally.

01:02:09.395 --> 01:02:09.955
<v Speaker 0>So

01:02:10.275 --> 01:02:11.955
<v Speaker 0>let's take a look at that extension list

01:02:11.955 --> 01:02:12.995
<v Speaker 0>though. That was quite large.

01:02:16.930 --> 01:02:19.490
<v Speaker 2>These are the built in functions. The extensions

01:02:19.490 --> 01:02:21.090
<v Speaker 2>are are above that.

01:02:22.290 --> 01:02:24.690
<v Speaker 0>So I see decode JSON

01:02:24.690 --> 01:02:25.970
<v Speaker 0>and decode

01:02:26.050 --> 01:02:28.210
<v Speaker 0>YAML. What are the applications

01:02:28.210 --> 01:02:30.290
<v Speaker 0>or use cases for those kind of functions?

01:02:30.785 --> 01:02:33.025
<v Speaker 0>I'm not really picturing that right away.

01:02:34.225 --> 01:02:35.185
<v Speaker 1>So, like

01:02:37.345 --> 01:02:40.145
<v Speaker 1>yeah. Yeah. Yeah. You might want to,

01:02:41.665 --> 01:02:42.305
<v Speaker 1>like,

01:02:42.465 --> 01:02:46.260
<v Speaker 1>have different options for, like, which servers am

01:02:46.260 --> 01:02:47.780
<v Speaker 1>I running. Right? Like

01:02:48.740 --> 01:02:49.620
<v Speaker 1>and so

01:02:50.260 --> 01:02:52.340
<v Speaker 1>an example of that is maybe you want

01:02:52.340 --> 01:02:54.340
<v Speaker 1>to, like, have preferences

01:02:54.820 --> 01:02:56.260
<v Speaker 1>that are saved.

01:02:56.820 --> 01:02:59.220
<v Speaker 1>And so the tilt file can, like, read

01:02:59.220 --> 01:02:59.700
<v Speaker 1>those

01:03:00.035 --> 01:03:04.595
<v Speaker 1>from disk and then decode them, as JSON

01:03:04.595 --> 01:03:06.675
<v Speaker 1>into, like, Python

01:03:06.915 --> 01:03:07.635
<v Speaker 1>objects

01:03:07.795 --> 01:03:09.955
<v Speaker 1>that you can, like, dig into.

01:03:10.115 --> 01:03:10.595
<v Speaker 1>Or,

01:03:11.635 --> 01:03:14.380
<v Speaker 1>some p some teams some companies

01:03:14.460 --> 01:03:18.060
<v Speaker 1>that are bigger will actually have, like, each

01:03:18.060 --> 01:03:18.860
<v Speaker 1>team

01:03:20.460 --> 01:03:23.580
<v Speaker 1>you know, they maybe already have tooling

01:03:23.980 --> 01:03:26.940
<v Speaker 1>per service. And so they have shell scripts

01:03:27.204 --> 01:03:30.885
<v Speaker 1>that create JSON per service that, like, have

01:03:30.885 --> 01:03:31.765
<v Speaker 1>info.

01:03:32.085 --> 01:03:32.805
<v Speaker 1>And so

01:03:33.045 --> 01:03:34.565
<v Speaker 1>this is really a way

01:03:35.204 --> 01:03:37.525
<v Speaker 1>like, when we say mister Rogers,

01:03:38.165 --> 01:03:40.325
<v Speaker 1>Tilt likes your project just the way it

01:03:40.325 --> 01:03:42.390
<v Speaker 1>is, One of the ways that you, like,

01:03:42.390 --> 01:03:45.110
<v Speaker 1>need to interact with it is,

01:03:45.670 --> 01:03:48.150
<v Speaker 1>getting info from existing,

01:03:49.349 --> 01:03:51.190
<v Speaker 1>you know, scripts that,

01:03:51.990 --> 01:03:52.950
<v Speaker 1>generate JSON.

01:03:53.675 --> 01:03:56.235
<v Speaker 1>And so, like, it's not kind of useful

01:03:56.395 --> 01:03:59.115
<v Speaker 1>at this point of trying Tilt where you're

01:03:59.115 --> 01:04:01.675
<v Speaker 1>getting one thing set up. It's more how

01:04:01.675 --> 01:04:03.995
<v Speaker 1>do you get it to interact with, like,

01:04:04.555 --> 01:04:06.395
<v Speaker 1>bigger existing setups.

01:04:08.430 --> 01:04:10.830
<v Speaker 0>Okay. I think I understand that.

01:04:11.470 --> 01:04:13.630
<v Speaker 0>So there are two other things that kind

01:04:13.630 --> 01:04:16.030
<v Speaker 0>of pop out here. The Docker Compose function,

01:04:16.030 --> 01:04:18.190
<v Speaker 0>I'm assuming, similar to the helm, will allow

01:04:18.190 --> 01:04:20.030
<v Speaker 0>me to load the Docker Compose

01:04:20.515 --> 01:04:22.515
<v Speaker 0>and spend that those containers up in the

01:04:22.515 --> 01:04:24.275
<v Speaker 0>background as well. I

01:04:25.875 --> 01:04:26.435
<v Speaker 2>think

01:04:27.075 --> 01:04:28.515
<v Speaker 2>Dan would like to

01:04:28.915 --> 01:04:31.315
<v Speaker 2>go on a bit of a dive digression

01:04:31.315 --> 01:04:33.690
<v Speaker 2>here and just tell you that you don't

01:04:33.690 --> 01:04:35.610
<v Speaker 2>have to use Kubernetes to use Tilt. You

01:04:35.610 --> 01:04:38.410
<v Speaker 2>can also use Tilt with Docker Docker Compose.

01:04:38.810 --> 01:04:39.450
<v Speaker 1>Or

01:04:39.690 --> 01:04:40.570
<v Speaker 1>or or

01:04:40.970 --> 01:04:43.610
<v Speaker 1>just with running, like, processes.

01:04:43.610 --> 01:04:45.369
<v Speaker 1>Like, you might say, hey. My team, yeah,

01:04:45.369 --> 01:04:46.730
<v Speaker 1>we deployed to Kubernetes,

01:04:47.285 --> 01:04:49.125
<v Speaker 1>but most of the time, we're just running,

01:04:49.125 --> 01:04:51.205
<v Speaker 1>you know, like, go install

01:04:51.205 --> 01:04:53.685
<v Speaker 1>and then ghost, you know, like, and run

01:04:53.685 --> 01:04:56.885
<v Speaker 1>that server, or we're just running NPM dev

01:04:56.965 --> 01:04:57.765
<v Speaker 1>locally.

01:04:57.845 --> 01:05:00.460
<v Speaker 1>You still have this issue of, like, searching

01:05:00.460 --> 01:05:02.460
<v Speaker 1>between different log streams.

01:05:02.540 --> 01:05:05.580
<v Speaker 1>And so the Docker Compose stuff and the

01:05:05.580 --> 01:05:06.380
<v Speaker 1>local

01:05:07.660 --> 01:05:08.540
<v Speaker 1>resource,

01:05:08.940 --> 01:05:09.340
<v Speaker 1>like,

01:05:09.980 --> 01:05:12.300
<v Speaker 1>hey. Even if you don't use Kubernetes for

01:05:12.300 --> 01:05:14.860
<v Speaker 1>dev, you solve problems that Tilt solves.

01:05:15.735 --> 01:05:18.535
<v Speaker 1>Yeah. Thank you, l. It's it's like you've

01:05:18.535 --> 01:05:21.815
<v Speaker 1>met me and know what my hobby horses

01:05:21.815 --> 01:05:22.375
<v Speaker 1>are.

01:05:24.135 --> 01:05:25.575
<v Speaker 2>I I didn't I didn't know you were

01:05:25.575 --> 01:05:26.535
<v Speaker 2>into horses.

01:05:27.175 --> 01:05:27.895
<v Speaker 1>Oh,

01:05:28.135 --> 01:05:31.015
<v Speaker 1>that's actually a whole different story. But yeah.

01:05:32.750 --> 01:05:34.190
<v Speaker 0>Alright. Okay. That's just

01:05:35.070 --> 01:05:36.750
<v Speaker 0>it caught me off guard. I didn't realize

01:05:36.750 --> 01:05:39.470
<v Speaker 0>it till didn't actually have that dependency on

01:05:39.470 --> 01:05:42.349
<v Speaker 0>Kubernetes. So that's really cool as well. Alright.

01:05:42.349 --> 01:05:44.109
<v Speaker 0>I'm gonna throw one more question at you

01:05:44.109 --> 01:05:46.555
<v Speaker 0>and then we will we we will finish

01:05:46.555 --> 01:05:47.595
<v Speaker 0>up, and I'll let you get back to

01:05:47.595 --> 01:05:50.155
<v Speaker 0>your day. This includes syntax.

01:05:50.635 --> 01:05:52.875
<v Speaker 0>Is there a use case for multiple Tilt

01:05:52.875 --> 01:05:54.635
<v Speaker 0>files, or am I misunderstanding

01:05:54.635 --> 01:05:55.995
<v Speaker 0>what that would be used for?

01:05:57.995 --> 01:05:58.315
<v Speaker 1>Yeah.

01:06:00.050 --> 01:06:02.450
<v Speaker 1>When you get to, you know, a team

01:06:02.450 --> 01:06:03.090
<v Speaker 1>that

01:06:03.410 --> 01:06:06.450
<v Speaker 1>has, you know, maybe 15 different services,

01:06:06.610 --> 01:06:08.290
<v Speaker 1>you know, and you want to turn them

01:06:08.290 --> 01:06:11.090
<v Speaker 1>on or off or, you know, we have

01:06:11.090 --> 01:06:14.565
<v Speaker 1>orgs that have hundreds of engineers that are

01:06:14.565 --> 01:06:15.925
<v Speaker 1>using Tilt,

01:06:16.165 --> 01:06:17.445
<v Speaker 1>you know, then you

01:06:17.685 --> 01:06:20.085
<v Speaker 1>don't want to just have one file that

01:06:20.085 --> 01:06:21.445
<v Speaker 1>lists everything.

01:06:21.605 --> 01:06:23.925
<v Speaker 1>And so you want to break that up.

01:06:24.085 --> 01:06:24.965
<v Speaker 1>And so

01:06:26.600 --> 01:06:29.160
<v Speaker 1>that's you know, in in this example

01:06:29.640 --> 01:06:32.600
<v Speaker 1>that you're you're seeing, it's kind of contrived.

01:06:33.000 --> 01:06:34.600
<v Speaker 1>But, you know, how do you make a

01:06:34.600 --> 01:06:37.000
<v Speaker 1>tool that's use you know, where you can

01:06:37.000 --> 01:06:38.840
<v Speaker 1>play around with it like we have been

01:06:38.840 --> 01:06:39.800
<v Speaker 1>this hour,

01:06:39.880 --> 01:06:41.960
<v Speaker 1>but also that can scale to

01:06:42.654 --> 01:06:43.855
<v Speaker 1>hundreds of

01:06:45.134 --> 01:06:46.174
<v Speaker 1>engineers.

01:06:46.174 --> 01:06:49.214
<v Speaker 1>Right? And and dozens or hundreds of services.

01:06:49.214 --> 01:06:50.095
<v Speaker 1>Right? Like,

01:06:50.494 --> 01:06:53.214
<v Speaker 1>are different constraints and trade offs to make

01:06:53.214 --> 01:06:53.454
<v Speaker 1>there.

01:06:56.030 --> 01:06:58.270
<v Speaker 0>Okay. Yeah. So, I mean, that's a I

01:06:58.270 --> 01:06:59.550
<v Speaker 0>guess, what I've got in my head for

01:06:59.550 --> 01:07:00.990
<v Speaker 0>a use case there is, you know, each

01:07:00.990 --> 01:07:02.670
<v Speaker 0>individual team is gonna be working on their

01:07:02.670 --> 01:07:04.910
<v Speaker 0>independent service with their own Tilt fail. But

01:07:04.910 --> 01:07:06.270
<v Speaker 0>if you ever wanted to orchestrate or see

01:07:06.270 --> 01:07:08.109
<v Speaker 0>them all working together in a certain fashion,

01:07:08.109 --> 01:07:10.030
<v Speaker 0>then we could choose that include syntax

01:07:10.215 --> 01:07:11.655
<v Speaker 0>to push them all to

01:07:12.135 --> 01:07:13.495
<v Speaker 0>the cluster. Okay.

01:07:13.815 --> 01:07:14.535
<v Speaker 0>Got it.

01:07:15.415 --> 01:07:18.375
<v Speaker 0>Alright. Let me remove our screen share.

01:07:19.175 --> 01:07:20.295
<v Speaker 0>So that's been

01:07:20.535 --> 01:07:23.095
<v Speaker 0>exceptionally useful. I got a much better understanding

01:07:23.095 --> 01:07:24.855
<v Speaker 0>for how Tilt works. I'm very impressed.

01:07:25.580 --> 01:07:28.220
<v Speaker 0>We didn't actually have too many snags other

01:07:28.220 --> 01:07:30.460
<v Speaker 0>than my own inability to do stuff and

01:07:30.460 --> 01:07:31.020
<v Speaker 0>type.

01:07:31.420 --> 01:07:33.500
<v Speaker 0>But it just seemed to work really well.

01:07:33.740 --> 01:07:35.180
<v Speaker 0>It definitely was

01:07:35.340 --> 01:07:37.740
<v Speaker 0>a good developer experience for working against a

01:07:37.740 --> 01:07:39.980
<v Speaker 0>Kubernetes cluster. And now I know I don't

01:07:39.980 --> 01:07:42.245
<v Speaker 0>even need the Kubernetes cluster. So I'm gonna

01:07:42.245 --> 01:07:44.005
<v Speaker 0>have to start playing with this a whole

01:07:44.005 --> 01:07:44.805
<v Speaker 0>lot more.

01:07:45.045 --> 01:07:46.805
<v Speaker 0>Are there any final thoughts from either of

01:07:46.805 --> 01:07:48.645
<v Speaker 0>you before we wrap up for today?

01:07:49.925 --> 01:07:52.725
<v Speaker 1>I was also surprised we didn't run into

01:07:52.725 --> 01:07:53.365
<v Speaker 1>snags.

01:07:53.859 --> 01:07:54.660
<v Speaker 1>Honestly,

01:07:55.220 --> 01:07:57.859
<v Speaker 1>that was a pleasant surprise for me this

01:07:57.859 --> 01:08:00.980
<v Speaker 1>this morning. I'm in The US for European

01:08:00.980 --> 01:08:01.700
<v Speaker 1>viewers.

01:08:02.020 --> 01:08:04.099
<v Speaker 1>This has been great. Thanks for having us.

01:08:06.585 --> 01:08:07.225
<v Speaker 2>Yeah.

01:08:07.625 --> 01:08:08.265
<v Speaker 2>I

01:08:09.224 --> 01:08:12.185
<v Speaker 2>think, like, making sure that devs have a

01:08:12.185 --> 01:08:14.825
<v Speaker 2>good time while they're working is basically what

01:08:14.825 --> 01:08:17.224
<v Speaker 2>got me into this whole niche,

01:08:17.225 --> 01:08:19.670
<v Speaker 2>basically. So, like, for me I'm really happy

01:08:19.670 --> 01:08:21.430
<v Speaker 2>when when I see someone set something up

01:08:21.430 --> 01:08:22.950
<v Speaker 2>and they're like, oh, this is super easy

01:08:22.950 --> 01:08:24.950
<v Speaker 2>to to set up and now it's super

01:08:24.950 --> 01:08:26.870
<v Speaker 2>easy to use and now instead of worrying

01:08:26.870 --> 01:08:29.350
<v Speaker 2>about a hundred different things, can just I

01:08:29.510 --> 01:08:31.590
<v Speaker 2>can just do my focus on my code

01:08:31.590 --> 01:08:33.670
<v Speaker 2>and work on my project and I don't

01:08:33.670 --> 01:08:35.535
<v Speaker 2>have all those other headaches.

01:08:35.775 --> 01:08:38.015
<v Speaker 2>Then, at that point, they kind of forget

01:08:38.015 --> 01:08:40.015
<v Speaker 2>that they're using this tool for it.

01:08:41.535 --> 01:08:43.135
<v Speaker 2>I think it's like

01:08:44.015 --> 01:08:46.415
<v Speaker 2>in the movie industry they say that when

01:08:46.415 --> 01:08:49.055
<v Speaker 2>you do good CG, no one notices it's

01:08:49.055 --> 01:08:51.020
<v Speaker 2>there. I think Tilt has kind of that

01:08:51.020 --> 01:08:51.819
<v Speaker 2>objective.

01:08:52.779 --> 01:08:54.380
<v Speaker 2>When we do a really good job, the

01:08:54.380 --> 01:08:56.700
<v Speaker 2>developer can just focus on their on their

01:08:56.700 --> 01:08:59.180
<v Speaker 2>project, on what they really wanna achieve, and

01:08:59.180 --> 01:09:00.300
<v Speaker 2>we just get out of the way. I

01:09:00.300 --> 01:09:01.979
<v Speaker 2>think that is the that is the main

01:09:01.979 --> 01:09:02.220
<v Speaker 2>goal.

01:09:04.135 --> 01:09:05.974
<v Speaker 0>A very good goal to have. Definitely.

01:09:06.935 --> 01:09:08.534
<v Speaker 0>Alright. Well, I just wanna say thank you

01:09:08.534 --> 01:09:10.215
<v Speaker 0>to you both for joining me and and

01:09:10.215 --> 01:09:11.895
<v Speaker 0>guiding me through this today. It's been an

01:09:11.895 --> 01:09:14.215
<v Speaker 0>absolute pleasure, and I really appreciate your time.

01:09:14.215 --> 01:09:16.840
<v Speaker 0>So thank you very much. To people watching,

01:09:16.840 --> 01:09:18.680
<v Speaker 0>I hope you've enjoyed learning about Tilt, and

01:09:18.680 --> 01:09:19.960
<v Speaker 0>you can give it a try. And if

01:09:19.960 --> 01:09:22.200
<v Speaker 0>you do, right into snags, I'm sure Dan

01:09:22.200 --> 01:09:23.720
<v Speaker 0>and Ellen would be happy to answer questions

01:09:23.720 --> 01:09:25.720
<v Speaker 0>on Twitter. But I'm sure you would because

01:09:25.720 --> 01:09:27.000
<v Speaker 0>it just works.

01:09:27.319 --> 01:09:27.960
<v Speaker 0>Alright.

01:09:28.200 --> 01:09:30.465
<v Speaker 2>Thanks so much. Thank you. I'll speak to

01:09:30.465 --> 01:09:32.865
<v Speaker 0>you all soon. Have a nice day. Cheers.
