WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 2362ce53-8081-4656-a447-6984fefb65f9
Created: 2025-04-29T12:57:54.214Z
Duration: 4743.6807
Channels: 1

00:01:48.280 --> 00:01:51.800
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:01:51.800 --> 00:01:54.600
<v Speaker 0>Today is another episode of Rawkode Live where

00:01:54.600 --> 00:01:56.040
<v Speaker 0>we take a look at the tools that

00:01:56.040 --> 00:01:58.440
<v Speaker 0>are help shaping and making the Kubernetes and

00:01:58.440 --> 00:01:59.800
<v Speaker 0>cloud native ecosystem

00:01:59.800 --> 00:02:01.160
<v Speaker 0>that little bit easier.

00:02:01.715 --> 00:02:04.275
<v Speaker 0>And today, we're doing an update video

00:02:04.435 --> 00:02:06.355
<v Speaker 0>from when we previously took a look at

00:02:06.355 --> 00:02:10.195
<v Speaker 0>Clue CTL, Clue Control, Clue Cuddle, Clue Cuddle,

00:02:10.195 --> 00:02:11.395
<v Speaker 0>whatever you prefer.

00:02:11.635 --> 00:02:14.195
<v Speaker 0>And to give us a overview and guided

00:02:14.195 --> 00:02:16.610
<v Speaker 0>tour of the new features and updates as

00:02:16.610 --> 00:02:19.010
<v Speaker 0>its creator and maintainer.

00:02:19.250 --> 00:02:20.130
<v Speaker 0>Kotablock.

00:02:20.209 --> 00:02:22.050
<v Speaker 0>Hey, man. How's it going? Long time.

00:02:22.450 --> 00:02:24.450
<v Speaker 1>Hey. Thanks for having me. Yep. Long time

00:02:24.450 --> 00:02:26.689
<v Speaker 1>ago, and quite some things have happened in

00:02:26.689 --> 00:02:28.049
<v Speaker 1>the Kluctlical ecosystem.

00:02:28.985 --> 00:02:32.025
<v Speaker 0>Alright. Well, for anyone who is not familiar,

00:02:32.025 --> 00:02:33.785
<v Speaker 0>let's just do a little bit of context

00:02:33.785 --> 00:02:36.345
<v Speaker 0>and background. So number one, tell us who

00:02:36.345 --> 00:02:38.105
<v Speaker 0>you are. And number two, tell us what

00:02:38.105 --> 00:02:39.385
<v Speaker 0>Kluctl is,

00:02:39.545 --> 00:02:40.185
<v Speaker 0>please.

00:02:41.465 --> 00:02:42.665
<v Speaker 1>So I'm

00:02:42.665 --> 00:02:43.465
<v Speaker 1>Alex

00:02:43.705 --> 00:02:46.069
<v Speaker 1>or known as CoderBlock. If you see me

00:02:46.069 --> 00:02:49.190
<v Speaker 1>online, I'm a developer, DevOps engineer.

00:02:51.030 --> 00:02:53.110
<v Speaker 1>Depends on what I'm doing right now.

00:02:54.470 --> 00:02:55.750
<v Speaker 1>I'm working on

00:02:57.444 --> 00:03:00.565
<v Speaker 1>on my Kluctl project mostly when I have

00:03:00.565 --> 00:03:01.125
<v Speaker 1>time.

00:03:01.685 --> 00:03:04.645
<v Speaker 1>It's an Opsource project providing you the ability

00:03:04.645 --> 00:03:05.205
<v Speaker 1>to

00:03:05.685 --> 00:03:09.045
<v Speaker 1>manage and deploy complex and simple Kubernetes deployments.

00:03:10.810 --> 00:03:12.890
<v Speaker 1>Yeah. That's what I do. I'm also a

00:03:12.890 --> 00:03:13.690
<v Speaker 1>freelancer,

00:03:14.330 --> 00:03:15.130
<v Speaker 1>but I

00:03:16.170 --> 00:03:17.530
<v Speaker 1>let's put it this way. If I would

00:03:17.530 --> 00:03:18.090
<v Speaker 1>have

00:03:18.330 --> 00:03:20.570
<v Speaker 1>the possibility to work on Kluctl

00:03:20.570 --> 00:03:21.930
<v Speaker 1>all day, I would do that.

00:03:23.175 --> 00:03:23.815
<v Speaker 1>But

00:03:24.055 --> 00:03:25.415
<v Speaker 1>family has to be

00:03:25.895 --> 00:03:26.695
<v Speaker 1>provided.

00:03:27.175 --> 00:03:30.215
<v Speaker 0>Always. Definitely. Yeah. Priority.

00:03:30.695 --> 00:03:32.695
<v Speaker 0>Alright. Well, thank you for sharing.

00:03:33.175 --> 00:03:33.735
<v Speaker 0>So

00:03:34.135 --> 00:03:35.735
<v Speaker 0>I can't remember when we did our last

00:03:35.735 --> 00:03:37.255
<v Speaker 0>video, but, you know, the

00:03:38.510 --> 00:03:39.390
<v Speaker 0>do you know?

00:03:40.510 --> 00:03:42.349
<v Speaker 1>I think it's about a year ago. A

00:03:42.349 --> 00:03:44.030
<v Speaker 0>year? Wow. Okay. Cool.

00:03:44.269 --> 00:03:46.430
<v Speaker 1>Quite some time. But I have been keeping

00:03:46.430 --> 00:03:48.430
<v Speaker 0>an eye on the project because

00:03:48.590 --> 00:03:49.390
<v Speaker 0>it's

00:03:49.709 --> 00:03:52.349
<v Speaker 0>it's just super useful. Right? Anyone who's not

00:03:52.349 --> 00:03:54.510
<v Speaker 0>familiar with the last video of the demo

00:03:53.835 --> 00:03:55.275
<v Speaker 0>or even a project, I'll put a link

00:03:55.275 --> 00:03:57.595
<v Speaker 0>in the comments once we get started today.

00:03:57.595 --> 00:04:00.235
<v Speaker 0>But just go check it out. It's a

00:04:00.235 --> 00:04:02.955
<v Speaker 0>tool that kinda tries to enable new features

00:04:02.955 --> 00:04:05.195
<v Speaker 0>that just aren't possible with Kube control

00:04:05.515 --> 00:04:08.360
<v Speaker 0>and I think everyone who's watched any video

00:04:08.360 --> 00:04:10.600
<v Speaker 0>on this channel knows of my distaste for

00:04:10.600 --> 00:04:12.360
<v Speaker 0>helm and how that we need

00:04:12.600 --> 00:04:15.240
<v Speaker 0>better tooling to handle the complexities of a

00:04:15.240 --> 00:04:17.320
<v Speaker 0>modern application deployment to Kubernetes.

00:04:17.480 --> 00:04:19.160
<v Speaker 0>You know, let's face it. We're not getting

00:04:19.160 --> 00:04:21.805
<v Speaker 0>away with 20 lanes of a deployment YAML,

00:04:21.805 --> 00:04:23.565
<v Speaker 0>six lanes of a service, and then ingress.

00:04:23.565 --> 00:04:25.245
<v Speaker 0>It's just not the way the applications run

00:04:25.245 --> 00:04:26.605
<v Speaker 0>on Kubernetes anymore.

00:04:26.845 --> 00:04:28.845
<v Speaker 0>And Kluctl had one of those secret features,

00:04:28.845 --> 00:04:30.765
<v Speaker 0>which I've been longing for for so long,

00:04:30.765 --> 00:04:33.005
<v Speaker 0>which is the ability to augment template and

00:04:33.005 --> 00:04:36.340
<v Speaker 0>rich those manifests from end cluster resources,

00:04:36.419 --> 00:04:37.940
<v Speaker 0>which was the highlight of the last video

00:04:37.940 --> 00:04:38.660
<v Speaker 0>for me.

00:04:39.220 --> 00:04:41.460
<v Speaker 0>However, you've been adding loads of new features.

00:04:42.259 --> 00:04:43.699
<v Speaker 0>I've been keeping a little bit of an

00:04:43.699 --> 00:04:44.819
<v Speaker 0>eye on the release notes, and you've been

00:04:44.819 --> 00:04:46.419
<v Speaker 0>kind enough to share the blogs and stuff

00:04:46.419 --> 00:04:48.099
<v Speaker 0>in the Discord server as well, which has

00:04:48.099 --> 00:04:50.445
<v Speaker 0>been really cool. And I won't give anything

00:04:50.445 --> 00:04:52.445
<v Speaker 0>away. Maybe you wanna give us the TLDR,

00:04:52.445 --> 00:04:53.965
<v Speaker 0>the overview, the highlights of what we're gonna

00:04:53.965 --> 00:04:55.485
<v Speaker 0>be taking a look at today.

00:04:57.005 --> 00:04:58.525
<v Speaker 1>Yep. So

00:04:58.525 --> 00:05:00.765
<v Speaker 1>the ham thing was kind of

00:05:01.360 --> 00:05:03.120
<v Speaker 1>a motivation for me as well in the

00:05:03.120 --> 00:05:05.759
<v Speaker 1>beginning, but it's very important. Kluctl is not

00:05:05.759 --> 00:05:08.160
<v Speaker 1>a replacement for Helm. It's really

00:05:09.440 --> 00:05:11.680
<v Speaker 1>kind of an interface to

00:05:12.800 --> 00:05:14.560
<v Speaker 1>Helm and customize

00:05:15.735 --> 00:05:17.655
<v Speaker 1>and more. So it's built on top of

00:05:17.655 --> 00:05:20.615
<v Speaker 1>it to manage helm and manage, customize

00:05:21.255 --> 00:05:22.215
<v Speaker 1>and so on.

00:05:22.695 --> 00:05:23.655
<v Speaker 1>Yeah,

00:05:24.215 --> 00:05:25.495
<v Speaker 1>I think maybe

00:05:25.575 --> 00:05:27.335
<v Speaker 1>best is if I do a small

00:05:28.040 --> 00:05:30.440
<v Speaker 1>slide where I give an overview about what

00:05:30.440 --> 00:05:31.640
<v Speaker 1>Kluctl is,

00:05:31.960 --> 00:05:33.640
<v Speaker 1>do it as fast as possible so that

00:05:33.640 --> 00:05:34.920
<v Speaker 1>we can go into,

00:05:35.080 --> 00:05:36.440
<v Speaker 1>yeah, live coding

00:05:36.760 --> 00:05:39.000
<v Speaker 1>as fast as we can. Okay.

00:05:44.195 --> 00:05:45.555
<v Speaker 0>Pull up your slide, and then I'll share

00:05:45.555 --> 00:05:46.275
<v Speaker 0>your screen.

00:05:46.915 --> 00:05:47.955
<v Speaker 1>Yes.

00:05:47.955 --> 00:05:49.075
<v Speaker 1>Give me a second.

00:05:51.315 --> 00:05:51.955
<v Speaker 0>Okay.

00:05:52.435 --> 00:05:54.115
<v Speaker 0>Alright. Live. Take it away.

00:05:55.030 --> 00:05:55.750
<v Speaker 1>Okay.

00:05:56.070 --> 00:05:56.630
<v Speaker 1>So

00:05:57.110 --> 00:05:58.710
<v Speaker 1>as I said, I'm going to present

00:05:59.350 --> 00:06:00.870
<v Speaker 1>what Kluctl is.

00:06:00.870 --> 00:06:02.470
<v Speaker 1>Try to be as fast as possible. Best

00:06:02.470 --> 00:06:04.070
<v Speaker 1>is actually to look see video

00:06:04.790 --> 00:06:06.150
<v Speaker 1>that we made last year.

00:06:07.384 --> 00:06:09.305
<v Speaker 1>But yes, let's do it. So what is

00:06:09.305 --> 00:06:11.785
<v Speaker 1>Kluctl? Kluctl deployment Kluctl

00:06:11.785 --> 00:06:12.825
<v Speaker 1>is multiple things.

00:06:13.065 --> 00:06:16.745
<v Speaker 1>It allows you to define deployment projects

00:06:17.465 --> 00:06:20.264
<v Speaker 1>for simple, complex, small and large deployments. It

00:06:20.264 --> 00:06:22.479
<v Speaker 1>doesn't really matter. Deployments in the sense of

00:06:22.479 --> 00:06:24.720
<v Speaker 1>Kluctl are not Kubernetes

00:06:24.720 --> 00:06:26.160
<v Speaker 1>deployment objects.

00:06:26.160 --> 00:06:28.800
<v Speaker 1>They are like really the big picture, the

00:06:28.800 --> 00:06:29.600
<v Speaker 1>deployments

00:06:30.560 --> 00:06:31.600
<v Speaker 1>with everything.

00:06:32.080 --> 00:06:32.880
<v Speaker 1>Kluctl

00:06:32.880 --> 00:06:35.760
<v Speaker 1>is a CLI that allows you to deploy

00:06:36.125 --> 00:06:38.285
<v Speaker 1>these deployments in a push fashion.

00:06:39.885 --> 00:06:41.965
<v Speaker 1>This now the new things come.

00:06:42.525 --> 00:06:45.485
<v Speaker 1>The Kluctl GitOps controller allows you to deploy

00:06:45.485 --> 00:06:47.005
<v Speaker 1>stuff in a pull fashion

00:06:47.245 --> 00:06:50.845
<v Speaker 1>without losing the ability to do push

00:06:51.199 --> 00:06:53.520
<v Speaker 1>at the same time if you need to,

00:06:53.520 --> 00:06:55.040
<v Speaker 1>if there are ever any reason to do

00:06:55.040 --> 00:06:55.600
<v Speaker 1>that.

00:06:56.400 --> 00:06:58.320
<v Speaker 1>And the WebUI is also new, which gives

00:06:58.320 --> 00:07:01.600
<v Speaker 1>you visibility and control about your GitOps deployments

00:07:01.760 --> 00:07:04.560
<v Speaker 1>and also about your CLI deployments because both

00:07:04.560 --> 00:07:06.720
<v Speaker 1>are handled by the WebUI.

00:07:09.175 --> 00:07:11.575
<v Speaker 1>I'll continue to describe the projects

00:07:12.455 --> 00:07:13.415
<v Speaker 1>very fast.

00:07:14.295 --> 00:07:14.935
<v Speaker 1>So,

00:07:15.335 --> 00:07:18.295
<v Speaker 1>Kluctl deployment projects try to be as boilerplate

00:07:18.295 --> 00:07:20.375
<v Speaker 1>free as possible. That means you can always

00:07:20.375 --> 00:07:22.135
<v Speaker 1>start with a very small

00:07:22.630 --> 00:07:25.670
<v Speaker 1>deployment project, having the stuff that you need

00:07:25.670 --> 00:07:26.150
<v Speaker 1>to

00:07:27.110 --> 00:07:29.110
<v Speaker 1>do your current task. So for example, if

00:07:29.110 --> 00:07:30.790
<v Speaker 1>you just need to deploy NGINX,

00:07:30.950 --> 00:07:33.190
<v Speaker 1>you really just have one deployment YAML

00:07:34.230 --> 00:07:37.030
<v Speaker 1>that includes one deployment item, which is the

00:07:37.030 --> 00:07:38.685
<v Speaker 1>NGINX deployment

00:07:38.685 --> 00:07:40.365
<v Speaker 1>being a customization

00:07:40.605 --> 00:07:42.125
<v Speaker 1>or customized deployment.

00:07:43.485 --> 00:07:46.365
<v Speaker 1>And that's basically it. With these files, you

00:07:46.365 --> 00:07:48.205
<v Speaker 1>can already do your first deployment.

00:07:48.445 --> 00:07:49.485
<v Speaker 1>Then you see

00:07:49.645 --> 00:07:50.205
<v Speaker 1>CLI,

00:07:51.770 --> 00:07:53.770
<v Speaker 1>yeah, just to Kluctl deploy.

00:07:54.410 --> 00:07:56.650
<v Speaker 1>Very important, at this point, you already have

00:07:56.650 --> 00:07:58.810
<v Speaker 1>one of the most important features of Kluctl,

00:07:58.810 --> 00:08:00.330
<v Speaker 1>which is templating.

00:08:00.570 --> 00:08:02.970
<v Speaker 1>You can give the CLI arguments,

00:08:03.050 --> 00:08:04.410
<v Speaker 1>which are key value pairs.

00:08:05.675 --> 00:08:07.435
<v Speaker 1>Actually, key and

00:08:07.995 --> 00:08:10.395
<v Speaker 1>the value can be arbitrary YAML, so it

00:08:10.395 --> 00:08:11.435
<v Speaker 1>could be everything.

00:08:12.075 --> 00:08:13.755
<v Speaker 1>In this case, it's just a string, and

00:08:13.755 --> 00:08:16.395
<v Speaker 1>you can use it through simple Jinja templating

00:08:16.395 --> 00:08:18.555
<v Speaker 1>everywhere, including the customization YAML,

00:08:19.069 --> 00:08:20.110
<v Speaker 1>just everywhere.

00:08:21.949 --> 00:08:23.630
<v Speaker 1>David, if you have questions in between on

00:08:23.630 --> 00:08:25.710
<v Speaker 1>notes or something like that, just tell me

00:08:25.870 --> 00:08:28.190
<v Speaker 1>and I'll stop and explain something different. Yeah,

00:08:28.190 --> 00:08:28.430
<v Speaker 0>of course.

00:08:31.735 --> 00:08:32.375
<v Speaker 1>Also,

00:08:32.615 --> 00:08:34.455
<v Speaker 1>are built on top of each other. So,

00:08:34.455 --> 00:08:36.934
<v Speaker 1>as said, you try to start small.

00:08:37.335 --> 00:08:39.174
<v Speaker 1>And then, if you realize, for example, I

00:08:39.174 --> 00:08:41.735
<v Speaker 1>have a quite complex configuration when it comes

00:08:41.735 --> 00:08:42.695
<v Speaker 1>to the different

00:08:42.934 --> 00:08:43.495
<v Speaker 1>targets,

00:08:44.690 --> 00:08:46.690
<v Speaker 1>You can then use the next feature on

00:08:46.690 --> 00:08:47.810
<v Speaker 1>top of the

00:08:48.450 --> 00:08:49.570
<v Speaker 1>deployment project,

00:08:50.290 --> 00:08:52.690
<v Speaker 1>which is the Kluctl YAML defining your targets.

00:08:52.850 --> 00:08:55.170
<v Speaker 1>And the targets are kind of a shortcut

00:08:55.170 --> 00:08:57.250
<v Speaker 1>to what you would usually pass through the

00:08:57.250 --> 00:08:59.695
<v Speaker 1>CLI. For example, the arguments,

00:08:59.855 --> 00:09:02.175
<v Speaker 1>which you've seen before, we set environment

00:09:02.175 --> 00:09:02.895
<v Speaker 1>to

00:09:03.375 --> 00:09:05.135
<v Speaker 1>some value. We can do the same here

00:09:05.135 --> 00:09:06.815
<v Speaker 1>through the targets. And then the idea is

00:09:06.815 --> 00:09:09.535
<v Speaker 1>that instead of manually passing them time and

00:09:09.535 --> 00:09:12.220
<v Speaker 1>time again, you just do a deployment on

00:09:12.220 --> 00:09:13.100
<v Speaker 1>the target.

00:09:13.579 --> 00:09:15.819
<v Speaker 1>The idea is that you can also bind

00:09:15.819 --> 00:09:17.980
<v Speaker 1>targets to a context, for example. So you

00:09:17.980 --> 00:09:20.220
<v Speaker 1>can say that the simple target is always

00:09:20.220 --> 00:09:21.980
<v Speaker 1>deployed to cluster X,

00:09:22.220 --> 00:09:25.180
<v Speaker 1>while another target is deployed to cluster Y

00:09:26.045 --> 00:09:28.045
<v Speaker 1>with different configuration and so on.

00:09:31.325 --> 00:09:34.045
<v Speaker 1>Templating, as already mentioned, is kind of one

00:09:34.045 --> 00:09:36.525
<v Speaker 1>of the most important features. It's the glue.

00:09:37.565 --> 00:09:38.765
<v Speaker 1>It allows you to

00:09:39.860 --> 00:09:41.380
<v Speaker 1>use configuration

00:09:41.380 --> 00:09:42.820
<v Speaker 1>wherever you need it.

00:09:43.540 --> 00:09:45.060
<v Speaker 1>Of course, you should try to keep it

00:09:45.060 --> 00:09:46.899
<v Speaker 1>as simple as possible and not overdo the

00:09:46.899 --> 00:09:49.140
<v Speaker 1>templating because everyone knows how

00:09:49.620 --> 00:09:52.660
<v Speaker 1>templating can make life very hard. If you

00:09:52.660 --> 00:09:54.420
<v Speaker 1>look at hand charts, for example, it can

00:09:54.420 --> 00:09:54.980
<v Speaker 1>easily happen.

00:09:55.855 --> 00:09:57.615
<v Speaker 1>So in this case, let's say we need

00:09:57.615 --> 00:09:58.575
<v Speaker 1>replicas

00:09:58.575 --> 00:10:00.415
<v Speaker 1>being different on two different

00:10:01.455 --> 00:10:03.855
<v Speaker 1>targets. We could introduce that variable.

00:10:06.735 --> 00:10:06.975
<v Speaker 1>And

00:10:10.820 --> 00:10:12.820
<v Speaker 1>Okay, how to explain this?

00:10:15.620 --> 00:10:18.340
<v Speaker 1>Okay, I skipped one point. So

00:10:19.620 --> 00:10:22.180
<v Speaker 1>these variables can be passed through arguments,

00:10:22.180 --> 00:10:24.420
<v Speaker 1>since they are always prefixed with the args.

00:10:24.865 --> 00:10:27.345
<v Speaker 1>But you can also load variables and configuration

00:10:27.345 --> 00:10:29.905
<v Speaker 1>from files. There are multiple variable sources available.

00:10:29.905 --> 00:10:31.825
<v Speaker 1>File is a simple one. You can load

00:10:31.825 --> 00:10:32.705
<v Speaker 1>from git,

00:10:33.265 --> 00:10:36.065
<v Speaker 1>from different branches, tags, from master, main, whatever

00:10:36.065 --> 00:10:38.240
<v Speaker 1>you want. You can do HTTP

00:10:38.399 --> 00:10:41.199
<v Speaker 1>requests and load configuration from there. You can

00:10:41.199 --> 00:10:43.440
<v Speaker 1>use Vault, AWS secrets manager.

00:10:43.680 --> 00:10:45.760
<v Speaker 1>Azure is just being added right now and

00:10:45.760 --> 00:10:46.399
<v Speaker 1>so on.

00:10:46.959 --> 00:10:48.800
<v Speaker 0>It supports config maps as well. Right?

00:10:49.785 --> 00:10:50.585
<v Speaker 0>Sorry?

00:10:50.745 --> 00:10:52.825
<v Speaker 0>Does it can those configs not be loaded

00:10:52.825 --> 00:10:54.265
<v Speaker 0>from a config map? I think we we

00:10:54.265 --> 00:10:55.945
<v Speaker 0>did that last week. It can do that

00:10:55.945 --> 00:10:57.785
<v Speaker 1>as well. So you can also load

00:10:58.745 --> 00:11:01.225
<v Speaker 1>a YAML file from an existing config map

00:11:01.225 --> 00:11:02.185
<v Speaker 1>on the cluster

00:11:03.305 --> 00:11:07.290
<v Speaker 1>or from a secret, whatever you need. So

00:11:07.690 --> 00:11:09.930
<v Speaker 1>you can actually have information

00:11:09.930 --> 00:11:12.170
<v Speaker 1>inside the cluster to be used in the

00:11:12.170 --> 00:11:15.529
<v Speaker 1>deployments to do proper configuration of your targets.

00:11:16.089 --> 00:11:18.250
<v Speaker 1>For example, cluster name is a good example.

00:11:18.705 --> 00:11:21.265
<v Speaker 1>It doesn't make sense to have the cluster

00:11:21.265 --> 00:11:22.785
<v Speaker 1>name in all your deployment

00:11:23.505 --> 00:11:25.745
<v Speaker 1>projects or, for example, the base DNS name

00:11:25.745 --> 00:11:28.465
<v Speaker 1>where everything's served on. Instead of that, you

00:11:28.465 --> 00:11:29.665
<v Speaker 1>can have it in a conflict map on

00:11:29.665 --> 00:11:31.825
<v Speaker 1>the cluster, and every deployment can just load

00:11:31.825 --> 00:11:33.905
<v Speaker 1>it and use that for whatever it needs

00:11:33.905 --> 00:11:33.985
<v Speaker 1>it.

00:11:35.020 --> 00:11:36.780
<v Speaker 0>Yep. Perfect. Great feature.

00:11:37.100 --> 00:11:39.260
<v Speaker 1>Yeah. Makes things a lot easier. We had

00:11:39.260 --> 00:11:40.780
<v Speaker 1>that in the past where we had to

00:11:40.780 --> 00:11:43.100
<v Speaker 1>copy and paste all these configuration files to

00:11:43.100 --> 00:11:43.980
<v Speaker 1>all different

00:11:45.420 --> 00:11:47.580
<v Speaker 1>deployments that was

00:11:49.105 --> 00:11:50.065
<v Speaker 1>not very nice.

00:11:51.185 --> 00:11:52.465
<v Speaker 1>So in this example,

00:11:52.705 --> 00:11:54.225
<v Speaker 1>we have the deployment YAML.

00:11:55.185 --> 00:11:57.505
<v Speaker 1>In the old example, it was just including

00:11:57.505 --> 00:12:00.225
<v Speaker 1>the NGINX deployment. This time, it's also loading

00:12:00.225 --> 00:12:00.945
<v Speaker 1>some configuration.

00:12:01.350 --> 00:12:03.190
<v Speaker 1>And the idea is that templating is really

00:12:03.190 --> 00:12:06.389
<v Speaker 1>possible everywhere, so even while loading the configuration.

00:12:06.389 --> 00:12:08.550
<v Speaker 1>In this case, we have the target name.

00:12:09.670 --> 00:12:11.589
<v Speaker 1>If you look at the list of targets,

00:12:11.589 --> 00:12:13.510
<v Speaker 1>we always have the name of the target.

00:12:13.750 --> 00:12:15.350
<v Speaker 1>And we can, for example, already use it

00:12:15.350 --> 00:12:18.045
<v Speaker 1>to have some dynamic configuration loading. For example,

00:12:18.045 --> 00:12:20.925
<v Speaker 1>for the simple target, we would load

00:12:20.925 --> 00:12:23.245
<v Speaker 1>this configuration. For another target, we would load

00:12:23.245 --> 00:12:24.285
<v Speaker 1>this configuration

00:12:25.085 --> 00:12:27.085
<v Speaker 1>with having different replicas, for example.

00:12:27.565 --> 00:12:30.045
<v Speaker 1>And then, as described before, you do Closedale

00:12:30.045 --> 00:12:30.685
<v Speaker 1>deploy,

00:12:31.245 --> 00:12:33.405
<v Speaker 1>target another, and it will

00:12:33.640 --> 00:12:36.200
<v Speaker 1>also give you a diff and ask you

00:12:36.200 --> 00:12:37.720
<v Speaker 1>if you really want to apply it. And

00:12:37.720 --> 00:12:39.320
<v Speaker 1>then you say yes or no, and then

00:12:39.320 --> 00:12:40.520
<v Speaker 1>you actually apply it.

00:12:44.760 --> 00:12:46.839
<v Speaker 1>Next thing is

00:12:48.464 --> 00:12:49.825
<v Speaker 1>you want to say Sorry. No, no. Was

00:12:49.825 --> 00:12:51.505
<v Speaker 0>just saying cool. I don't mean to throw

00:12:51.505 --> 00:12:53.425
<v Speaker 0>you off there. Sorry. Yeah, we have a

00:12:53.425 --> 00:12:56.065
<v Speaker 1>little bit of lag, unfortunately. Network is really

00:12:56.065 --> 00:12:57.745
<v Speaker 1>bad in this office right now.

00:12:59.265 --> 00:12:59.584
<v Speaker 1>So

00:13:01.350 --> 00:13:03.670
<v Speaker 1>order and dependencies are easy to master.

00:13:03.990 --> 00:13:06.310
<v Speaker 1>It turned out that so this was also

00:13:06.310 --> 00:13:07.670
<v Speaker 1>one of the reasons why I even started

00:13:07.670 --> 00:13:08.470
<v Speaker 1>this project.

00:13:09.750 --> 00:13:12.310
<v Speaker 1>If you use Helm, just Helm,

00:13:13.030 --> 00:13:14.070
<v Speaker 1>you get into

00:13:14.774 --> 00:13:16.855
<v Speaker 1>problems when it comes to orchestration of all

00:13:16.855 --> 00:13:18.535
<v Speaker 1>the different Helm charts that need to be

00:13:18.535 --> 00:13:19.175
<v Speaker 1>installed.

00:13:21.095 --> 00:13:23.654
<v Speaker 1>There are solutions. Helm5, for example, can, I

00:13:23.654 --> 00:13:26.134
<v Speaker 1>think, define order? You can also do it

00:13:26.134 --> 00:13:26.774
<v Speaker 1>with Flux

00:13:27.260 --> 00:13:30.860
<v Speaker 1>by defining dependencies between Helm releases

00:13:30.860 --> 00:13:31.740
<v Speaker 1>and so on.

00:13:32.220 --> 00:13:33.900
<v Speaker 1>In ClueCDL,

00:13:34.380 --> 00:13:36.540
<v Speaker 1>it's

00:13:36.540 --> 00:13:38.779
<v Speaker 1>quite easy, actually. You just have the list

00:13:38.779 --> 00:13:40.380
<v Speaker 1>of deployments, and that's the order.

00:13:41.065 --> 00:13:42.105
<v Speaker 1>It's that easy.

00:13:42.425 --> 00:13:44.665
<v Speaker 1>The idea is that everything that you give

00:13:44.665 --> 00:13:47.545
<v Speaker 1>here is deployed in parallel until it reaches

00:13:47.545 --> 00:13:48.425
<v Speaker 1>a barrier.

00:13:49.065 --> 00:13:50.905
<v Speaker 1>Then it waits for everything to finish that's

00:13:50.905 --> 00:13:52.905
<v Speaker 1>above the barrier and then it continues with

00:13:52.905 --> 00:13:54.185
<v Speaker 1>the next one. So this

00:13:54.510 --> 00:13:56.510
<v Speaker 1>is all you need to have order and

00:13:56.510 --> 00:13:57.710
<v Speaker 1>dependency management.

00:14:01.230 --> 00:14:02.990
<v Speaker 1>So a good example is,

00:14:03.630 --> 00:14:06.510
<v Speaker 1>very often, have to deploy namespaces first,

00:14:06.830 --> 00:14:08.590
<v Speaker 1>and you cannot start to deploy something into

00:14:08.590 --> 00:14:09.390
<v Speaker 1>these namespaces

00:14:10.505 --> 00:14:12.265
<v Speaker 1>before the namespace is deployed.

00:14:13.145 --> 00:14:16.345
<v Speaker 1>Same with custom resource definitions. Selium, for example,

00:14:16.345 --> 00:14:18.985
<v Speaker 1>provides some. You cannot do anything before the

00:14:18.985 --> 00:14:21.305
<v Speaker 1>custom resource definitions are deployed. I mean, you

00:14:21.305 --> 00:14:22.505
<v Speaker 1>cannot deploy

00:14:22.760 --> 00:14:25.240
<v Speaker 1>the custom resources before the CRDs are deployed

00:14:25.240 --> 00:14:26.120
<v Speaker 1>and so on.

00:14:33.000 --> 00:14:34.840
<v Speaker 1>Hooks can be used to

00:14:35.240 --> 00:14:38.279
<v Speaker 1>even have more advanced

00:14:40.095 --> 00:14:42.255
<v Speaker 1>control about your deployments. For example,

00:14:42.495 --> 00:14:45.295
<v Speaker 1>Selium, even though stuff is

00:14:45.935 --> 00:14:48.575
<v Speaker 1>applied to the cluster, it's still not ready.

00:14:48.655 --> 00:14:50.415
<v Speaker 1>So you might need a hook that waits

00:14:50.415 --> 00:14:53.375
<v Speaker 1>for it to actually completely become ready. So

00:14:53.375 --> 00:14:55.399
<v Speaker 1>you can also do that with Hooks, for

00:14:55.399 --> 00:14:55.959
<v Speaker 1>example.

00:14:57.480 --> 00:14:59.560
<v Speaker 1>So

00:15:01.000 --> 00:15:03.160
<v Speaker 1>next thing is this is new since the

00:15:03.160 --> 00:15:05.480
<v Speaker 1>last time we did the last video.

00:15:06.440 --> 00:15:08.920
<v Speaker 1>And not really. At that time, I already

00:15:08.920 --> 00:15:10.519
<v Speaker 1>had an implementation of GitOps,

00:15:11.375 --> 00:15:14.335
<v Speaker 1>which tried to integrate itself into the Flux

00:15:14.335 --> 00:15:17.775
<v Speaker 1>ecosystem, but I realized pretty fast that

00:15:18.175 --> 00:15:21.215
<v Speaker 1>Kluctl does not depend on Flux and should

00:15:21.215 --> 00:15:22.415
<v Speaker 1>not depend on Flux.

00:15:22.990 --> 00:15:25.630
<v Speaker 1>And it should actually completely live on its

00:15:25.630 --> 00:15:27.710
<v Speaker 1>own. So the solution was to implement the

00:15:27.710 --> 00:15:29.070
<v Speaker 1>Clue Cutter controller,

00:15:30.190 --> 00:15:32.430
<v Speaker 1>which now completely lives on its own. It

00:15:32.430 --> 00:15:34.990
<v Speaker 1>provides a Clue serial deployment, CRD.

00:15:35.795 --> 00:15:37.795
<v Speaker 1>The idea is that the CRD implements the

00:15:37.795 --> 00:15:39.475
<v Speaker 1>same interface as the CLI.

00:15:39.635 --> 00:15:41.154
<v Speaker 1>So whatever you are

00:15:41.394 --> 00:15:43.795
<v Speaker 1>used to provide to the CLI, for example,

00:15:43.795 --> 00:15:45.075
<v Speaker 1>passing arguments,

00:15:45.475 --> 00:15:47.954
<v Speaker 1>passing tags, passing

00:15:52.020 --> 00:15:54.660
<v Speaker 1>options like dry run mode or

00:15:55.780 --> 00:15:58.100
<v Speaker 1>if it should wait or not can also

00:15:58.100 --> 00:15:59.940
<v Speaker 1>be passed through the Kluctlesteo deployment. So it

00:15:59.940 --> 00:16:01.540
<v Speaker 1>tries to mirror it one to one.

00:16:04.085 --> 00:16:05.605
<v Speaker 1>Yeah, here's a list of what you can

00:16:05.605 --> 00:16:08.325
<v Speaker 1>so, yeah, the target name, for example, it's

00:16:08.325 --> 00:16:09.605
<v Speaker 1>in the CRD.

00:16:09.925 --> 00:16:11.365
<v Speaker 1>You can define it through the CRD and

00:16:11.365 --> 00:16:12.965
<v Speaker 1>the CLI arguments.

00:16:14.565 --> 00:16:14.805
<v Speaker 1>Yeah.

00:16:17.370 --> 00:16:19.610
<v Speaker 1>Encryption is supported and can also be configured

00:16:19.610 --> 00:16:21.050
<v Speaker 1>through the CRD.

00:16:23.450 --> 00:16:24.490
<v Speaker 1>Very important,

00:16:24.730 --> 00:16:26.650
<v Speaker 1>if you start to use GitOps with the

00:16:26.650 --> 00:16:29.130
<v Speaker 1>Cluster Deployment CRD, you can still

00:16:29.690 --> 00:16:31.610
<v Speaker 1>use push based

00:16:33.154 --> 00:16:35.475
<v Speaker 1>deployments. So you can still use the CLI.

00:16:36.035 --> 00:16:37.714
<v Speaker 1>And you can mix it if you need

00:16:37.714 --> 00:16:40.115
<v Speaker 1>to if it makes sense, depends on your

00:16:40.115 --> 00:16:42.514
<v Speaker 1>use case. In my opinion, it makes sense.

00:16:42.514 --> 00:16:44.195
<v Speaker 1>For example, if you want to have

00:16:44.730 --> 00:16:46.730
<v Speaker 1>a dev environment where you want to have

00:16:47.130 --> 00:16:47.930
<v Speaker 1>iterations,

00:16:48.170 --> 00:16:50.010
<v Speaker 1>where you just want to try something out,

00:16:50.010 --> 00:16:52.170
<v Speaker 1>deploy it, try something out, deploy it.

00:16:53.370 --> 00:16:54.889
<v Speaker 1>And for prod, for example, you want to

00:16:54.889 --> 00:16:57.209
<v Speaker 1>have a proper GitOps workflow.

00:16:59.305 --> 00:17:01.225
<v Speaker 0>So the idea is that the same projects

00:17:01.225 --> 00:17:02.265
<v Speaker 1>allow you do

00:17:04.265 --> 00:17:04.905
<v Speaker 1>both.

00:17:09.545 --> 00:17:11.705
<v Speaker 1>Here's a simple example of a close to

00:17:11.705 --> 00:17:13.224
<v Speaker 1>the old deployment GitOps

00:17:14.120 --> 00:17:15.560
<v Speaker 1>deployment asset.

00:17:16.600 --> 00:17:18.840
<v Speaker 1>You give it the source, so the URL

00:17:18.840 --> 00:17:20.920
<v Speaker 1>of the Git repository,

00:17:21.880 --> 00:17:23.240
<v Speaker 1>some subdirectory,

00:17:23.400 --> 00:17:24.920
<v Speaker 1>target name, context.

00:17:25.160 --> 00:17:27.160
<v Speaker 1>So the default context means deploy to the

00:17:27.160 --> 00:17:29.315
<v Speaker 1>same cluster where the controller is running. You

00:17:29.315 --> 00:17:31.795
<v Speaker 1>can also give it context

00:17:31.795 --> 00:17:34.675
<v Speaker 1>to actually a full kube config through a

00:17:34.675 --> 00:17:36.195
<v Speaker 1>secret to another cluster.

00:17:37.955 --> 00:17:39.395
<v Speaker 1>You can tell it if it should prune

00:17:39.395 --> 00:17:41.555
<v Speaker 1>or not, if it should delete the whole

00:17:41.555 --> 00:17:43.075
<v Speaker 1>deployment on deletion of the

00:17:43.830 --> 00:17:45.029
<v Speaker 1>custom resource

00:17:45.830 --> 00:17:46.789
<v Speaker 1>and so on.

00:17:47.590 --> 00:17:48.389
<v Speaker 1>So you can

00:17:49.990 --> 00:17:51.830
<v Speaker 1>look at the Kluctl deployment. It will give

00:17:51.830 --> 00:17:53.909
<v Speaker 1>you some basic information. For example, if there's

00:17:53.909 --> 00:17:56.390
<v Speaker 1>some drift, it will do internal drift detection,

00:17:56.390 --> 00:17:57.669
<v Speaker 1>like figure out if something

00:17:58.255 --> 00:18:00.655
<v Speaker 1>has been changed by someone else than the

00:18:00.655 --> 00:18:01.534
<v Speaker 1>controller.

00:18:03.455 --> 00:18:05.455
<v Speaker 1>This is currently not implemented. I plan it

00:18:05.455 --> 00:18:06.975
<v Speaker 1>for one of the next releases.

00:18:08.015 --> 00:18:09.615
<v Speaker 1>Then you will also be able to trigger

00:18:09.615 --> 00:18:11.215
<v Speaker 1>a forced redeployment

00:18:11.215 --> 00:18:12.255
<v Speaker 1>through the CLI.

00:18:12.670 --> 00:18:14.909
<v Speaker 1>Currently, it's only possible through the WebUI

00:18:15.230 --> 00:18:18.590
<v Speaker 1>or through some manipulation of the custom resource.

00:18:23.310 --> 00:18:25.150
<v Speaker 1>The WebUI is also new.

00:18:25.955 --> 00:18:27.634
<v Speaker 1>I'm going to show it later as well.

00:18:28.275 --> 00:18:30.835
<v Speaker 1>The idea is that it shows you the

00:18:30.835 --> 00:18:33.394
<v Speaker 1>projects, so basically, git projects,

00:18:33.635 --> 00:18:34.755
<v Speaker 1>the targets

00:18:35.075 --> 00:18:38.514
<v Speaker 1>and the historical results from

00:18:38.595 --> 00:18:40.115
<v Speaker 1>commands that you did on these targets.

00:18:41.080 --> 00:18:43.560
<v Speaker 1>The UI is not the most beautiful UI

00:18:43.560 --> 00:18:46.200
<v Speaker 1>of the world. That happens when a developer

00:18:46.200 --> 00:18:47.320
<v Speaker 1>does React.

00:18:48.440 --> 00:18:50.360
<v Speaker 1>So if someone wants to improve it, I'm

00:18:50.360 --> 00:18:51.320
<v Speaker 1>happy for contributors.

00:18:54.595 --> 00:18:56.435
<v Speaker 1>Zwap UI is easy to start with. It

00:18:56.435 --> 00:18:57.235
<v Speaker 1>does not

00:18:57.635 --> 00:18:59.715
<v Speaker 1>you don't have to install it. I mean,

00:18:59.715 --> 00:19:01.715
<v Speaker 1>of course, it's recommended to install it because

00:19:01.715 --> 00:19:04.434
<v Speaker 1>then you have other features like OADC integration.

00:19:04.835 --> 00:19:06.195
<v Speaker 1>But if you just want to try it

00:19:06.195 --> 00:19:07.475
<v Speaker 1>out or

00:19:07.960 --> 00:19:09.559
<v Speaker 1>there is no way to install it somewhere

00:19:09.559 --> 00:19:10.200
<v Speaker 1>properly,

00:19:10.440 --> 00:19:13.399
<v Speaker 1>you can just run it through krlutecdlWebUI

00:19:13.399 --> 00:19:15.799
<v Speaker 1>run and it will just run locally

00:19:15.880 --> 00:19:17.960
<v Speaker 1>and connect to the remote cluster.

00:19:20.745 --> 00:19:22.585
<v Speaker 1>Multi cluster support is

00:19:22.825 --> 00:19:25.705
<v Speaker 1>implemented in some way, but it's still a

00:19:25.705 --> 00:19:27.625
<v Speaker 1>lot of stuff to do there. So it's

00:19:27.625 --> 00:19:29.305
<v Speaker 1>also very important. The UI is very early

00:19:29.305 --> 00:19:32.424
<v Speaker 1>stage, so a lot of improvements and features

00:19:32.505 --> 00:19:33.065
<v Speaker 1>will come.

00:19:34.260 --> 00:19:36.500
<v Speaker 1>But it's already good enough to

00:19:37.220 --> 00:19:38.740
<v Speaker 1>be of some

00:19:39.140 --> 00:19:40.980
<v Speaker 1>good help in daily business.

00:19:42.260 --> 00:19:44.580
<v Speaker 1>Yeah. That's it for now. Demo time.

00:19:46.020 --> 00:19:48.420
<v Speaker 1>Should I directly switch to demo time, or

00:19:48.420 --> 00:19:50.585
<v Speaker 1>do you want to say something or ask

00:19:50.585 --> 00:19:51.385
<v Speaker 1>something first?

00:19:51.705 --> 00:19:53.705
<v Speaker 0>No. Let's go straight into the XAML. I

00:19:53.705 --> 00:19:55.385
<v Speaker 0>have questions, but we'll bring them up as

00:19:55.385 --> 00:19:56.985
<v Speaker 0>we we work through the

00:19:57.225 --> 00:19:57.945
<v Speaker 1>the rest of Okay.

00:20:00.825 --> 00:20:02.745
<v Speaker 1>I prepared a little bit. I tried to

00:20:02.745 --> 00:20:05.479
<v Speaker 1>not prepare too much. What I prepared is

00:20:06.919 --> 00:20:08.519
<v Speaker 1>a Bootstrap deployment

00:20:08.520 --> 00:20:10.039
<v Speaker 1>and some applications

00:20:10.520 --> 00:20:13.239
<v Speaker 1>that we are going to deploy into a

00:20:13.720 --> 00:20:15.320
<v Speaker 1>kind cluster, a local kind cluster.

00:20:16.975 --> 00:20:19.774
<v Speaker 1>Reason I prepared this is in the previous

00:20:19.774 --> 00:20:21.294
<v Speaker 1>video, I did a full setup of a

00:20:21.294 --> 00:20:23.135
<v Speaker 1>project. So if you want to learn how

00:20:23.135 --> 00:20:25.215
<v Speaker 1>to do that, best is to watch that

00:20:25.215 --> 00:20:26.094
<v Speaker 1>video first.

00:20:26.495 --> 00:20:28.735
<v Speaker 1>And here, we assume that you already know

00:20:28.735 --> 00:20:29.934
<v Speaker 1>how to do that or

00:20:30.380 --> 00:20:31.820
<v Speaker 1>at least know how to figure out how

00:20:31.820 --> 00:20:32.540
<v Speaker 1>to do that.

00:20:35.340 --> 00:20:36.059
<v Speaker 1>So

00:20:37.820 --> 00:20:39.420
<v Speaker 1>let's open the terminal.

00:20:40.380 --> 00:20:42.220
<v Speaker 1>As said, I'm going to deploy this to

00:20:42.220 --> 00:20:43.420
<v Speaker 1>a local kind cluster.

00:20:43.894 --> 00:20:45.894
<v Speaker 1>I have some configuration here for the kind

00:20:45.894 --> 00:20:47.174
<v Speaker 1>cluster, which is a

00:20:47.575 --> 00:20:51.255
<v Speaker 1>one control plane to worker node setup running

00:20:51.255 --> 00:20:52.774
<v Speaker 1>locally in my Docker

00:20:53.495 --> 00:20:54.294
<v Speaker 1>setup.

00:20:55.174 --> 00:20:56.294
<v Speaker 1>To showcase

00:20:56.375 --> 00:20:59.095
<v Speaker 1>the capabilities of Clue CDL, I decided to

00:20:59.210 --> 00:21:00.970
<v Speaker 1>not give it a CNI

00:21:01.530 --> 00:21:03.690
<v Speaker 1>and disable KubeProxy

00:21:03.690 --> 00:21:05.769
<v Speaker 1>completely. That means we get a

00:21:06.330 --> 00:21:09.050
<v Speaker 1>naked cluster. It's not completely naked because it

00:21:09.050 --> 00:21:10.570
<v Speaker 1>still has CSI installed,

00:21:10.890 --> 00:21:12.809
<v Speaker 1>but at least there is no CNI,

00:21:12.810 --> 00:21:14.970
<v Speaker 1>and that means it's actually useless without

00:21:15.585 --> 00:21:17.264
<v Speaker 1>doing proper bootstrapping.

00:21:18.225 --> 00:21:19.985
<v Speaker 1>Let's create a cluster.

00:21:21.184 --> 00:21:23.184
<v Speaker 1>Of course, I'm in the wrong folder.

00:21:28.304 --> 00:21:28.705
<v Speaker 1>Okay.

00:21:35.559 --> 00:21:37.399
<v Speaker 1>So you can ask your questions in between

00:21:37.399 --> 00:21:39.320
<v Speaker 1>while we have we will have some waiting

00:21:39.320 --> 00:21:40.039
<v Speaker 1>times

00:21:40.760 --> 00:21:43.000
<v Speaker 1>when stuff starts up after bootstrapping.

00:21:43.835 --> 00:21:46.075
<v Speaker 0>Yeah. Well, I'm a big fan of people

00:21:46.075 --> 00:21:48.794
<v Speaker 0>deploying useless slash broken clusters.

00:21:48.875 --> 00:21:50.715
<v Speaker 0>So, you know, always fun to see.

00:21:51.195 --> 00:21:52.635
<v Speaker 0>Now you

00:21:52.635 --> 00:21:53.515
<v Speaker 0>said that

00:21:53.915 --> 00:21:55.515
<v Speaker 0>let's go back to the flux stuff you

00:21:55.515 --> 00:21:57.355
<v Speaker 0>were talking about, Eric. You said that Kluctl

00:21:57.355 --> 00:21:59.300
<v Speaker 0>tried to kind of integrate there, but you

00:21:59.300 --> 00:22:01.140
<v Speaker 0>decided that it should be a dependency about

00:22:01.140 --> 00:22:03.460
<v Speaker 0>your own controller. Yep. I mean, I'm just

00:22:03.460 --> 00:22:04.019
<v Speaker 0>curious.

00:22:04.420 --> 00:22:07.140
<v Speaker 0>Like, that's that's a mission. Right? Like, even

00:22:07.300 --> 00:22:09.700
<v Speaker 0>using something like controller runtime is still a

00:22:09.700 --> 00:22:11.294
<v Speaker 0>lot of effort and work that needs to

00:22:11.294 --> 00:22:13.215
<v Speaker 0>go into this. And as we've seen from

00:22:13.215 --> 00:22:15.534
<v Speaker 0>the example output, it does drift control and

00:22:15.534 --> 00:22:18.094
<v Speaker 0>status checks and all of this like Yep.

00:22:18.815 --> 00:22:22.174
<v Speaker 1>So what realized is that all the

00:22:22.495 --> 00:22:25.870
<v Speaker 1>controller related stuff, it's not that much actually

00:22:25.870 --> 00:22:27.549
<v Speaker 1>because the real

00:22:29.310 --> 00:22:32.190
<v Speaker 1>work has gone into CluSDL itself. So all

00:22:32.190 --> 00:22:34.830
<v Speaker 1>the drift detection, everything, all the features that

00:22:34.830 --> 00:22:36.110
<v Speaker 1>are in some way important

00:22:36.515 --> 00:22:37.955
<v Speaker 1>is already implemented

00:22:37.955 --> 00:22:40.435
<v Speaker 1>through Kluctl because all the features that you

00:22:40.435 --> 00:22:42.595
<v Speaker 1>get through the GitOps controller,

00:22:42.835 --> 00:22:44.835
<v Speaker 1>you already have them through the CLI.

00:22:44.915 --> 00:22:45.955
<v Speaker 1>So there was

00:22:47.155 --> 00:22:49.075
<v Speaker 1>at that point, it was not so much

00:22:49.075 --> 00:22:50.675
<v Speaker 1>effort to implement the

00:22:50.995 --> 00:22:51.635
<v Speaker 1>important features.

00:22:52.890 --> 00:22:54.410
<v Speaker 1>There was one dependency

00:22:54.410 --> 00:22:58.490
<v Speaker 1>in regard to Git repositories. So Flux uses

00:22:59.930 --> 00:23:00.730
<v Speaker 1>dedicated

00:23:01.290 --> 00:23:02.170
<v Speaker 1>CRDs

00:23:02.170 --> 00:23:02.890
<v Speaker 1>for

00:23:02.970 --> 00:23:05.770
<v Speaker 1>source management. So you have your Git repositories

00:23:05.770 --> 00:23:06.010
<v Speaker 1>to

00:23:06.625 --> 00:23:09.265
<v Speaker 1>actually load the code, and then you refer

00:23:09.265 --> 00:23:11.105
<v Speaker 1>it in your customizations,

00:23:11.105 --> 00:23:11.744
<v Speaker 1>for example.

00:23:12.304 --> 00:23:14.385
<v Speaker 1>And that's, for example, something that is not

00:23:14.385 --> 00:23:16.945
<v Speaker 1>really comparable to Kluctl because Kluctl does its

00:23:16.945 --> 00:23:17.504
<v Speaker 1>own

00:23:18.865 --> 00:23:21.265
<v Speaker 1>source

00:23:19.680 --> 00:23:21.600
<v Speaker 1>management or source control.

00:23:21.920 --> 00:23:24.240
<v Speaker 1>It does its own checking out of and

00:23:24.240 --> 00:23:25.680
<v Speaker 1>cloning of repositories.

00:23:25.680 --> 00:23:28.640
<v Speaker 1>It has git include. So if you have

00:23:28.880 --> 00:23:31.360
<v Speaker 1>maybe you remember the list of deployment items,

00:23:32.135 --> 00:23:33.575
<v Speaker 1>So far, just had

00:23:33.895 --> 00:23:36.135
<v Speaker 1>path entries, but there are also git

00:23:36.375 --> 00:23:40.055
<v Speaker 1>includes possible. So you can load git repositories

00:23:40.535 --> 00:23:43.655
<v Speaker 1>and have deployments scattered around

00:23:43.815 --> 00:23:44.935
<v Speaker 1>through multiple

00:23:45.095 --> 00:23:46.055
<v Speaker 1>repositories.

00:23:46.055 --> 00:23:48.280
<v Speaker 1>So this was all stuff

00:23:49.960 --> 00:23:53.000
<v Speaker 1>reusing stuff from Plux would not give any

00:23:53.000 --> 00:23:53.720
<v Speaker 1>benefit

00:23:53.800 --> 00:23:55.720
<v Speaker 1>because I would still have to do my

00:23:55.720 --> 00:23:57.000
<v Speaker 1>own stuff inside

00:23:57.080 --> 00:23:57.800
<v Speaker 1>ClueCL.

00:23:59.095 --> 00:24:00.695
<v Speaker 1>In the end, I decided to

00:24:01.174 --> 00:24:01.894
<v Speaker 1>completely

00:24:02.215 --> 00:24:04.214
<v Speaker 1>go on my own in that regard.

00:24:05.815 --> 00:24:07.975
<v Speaker 1>Unfortunately, I don't have an example of getting

00:24:07.975 --> 00:24:09.494
<v Speaker 1>oh, I actually have.

00:24:10.455 --> 00:24:12.294
<v Speaker 1>Maybe let's jump to that first before you

00:24:12.294 --> 00:24:15.030
<v Speaker 1>can oh, no. Let's do the Bootstrap deployment.

00:24:15.030 --> 00:24:17.030
<v Speaker 1>And while all this starts up, because it

00:24:17.030 --> 00:24:19.270
<v Speaker 1>takes some time, I'm going to explain the

00:24:19.270 --> 00:24:20.789
<v Speaker 1>Bootstrap deployment a little bit.

00:24:21.270 --> 00:24:23.989
<v Speaker 1>So as said, we now have a

00:24:25.110 --> 00:24:25.909
<v Speaker 1>naked

00:24:26.549 --> 00:24:27.910
<v Speaker 1>kind cluster locally.

00:24:29.225 --> 00:24:31.945
<v Speaker 1>It's not completely naked because it still has

00:24:33.065 --> 00:24:35.785
<v Speaker 1>CSI, for example, installed to local pass provisioner.

00:24:35.785 --> 00:24:37.865
<v Speaker 1>CoreDNS is preinstalled, but it's all not running

00:24:37.865 --> 00:24:39.304
<v Speaker 1>because the nodes are not ready.

00:24:39.545 --> 00:24:41.225
<v Speaker 1>We have three nodes. They are all not

00:24:41.225 --> 00:24:43.625
<v Speaker 1>ready because the networking is just not up

00:24:43.625 --> 00:24:44.025
<v Speaker 1>and running.

00:24:45.950 --> 00:24:47.469
<v Speaker 1>With the Bootstrap deployment,

00:24:47.629 --> 00:24:48.749
<v Speaker 1>we can now just

00:24:50.429 --> 00:24:51.949
<v Speaker 1>run ClueCDL Deploy.

00:24:52.590 --> 00:24:54.669
<v Speaker 1>It will do a dry run first.

00:24:54.830 --> 00:24:57.389
<v Speaker 1>The dry run, in this case, fails because

00:24:57.710 --> 00:25:00.575
<v Speaker 1>it cannot dry run stuff if some stuff

00:25:00.575 --> 00:25:02.415
<v Speaker 1>is missing. For example, the namespace has not

00:25:02.415 --> 00:25:03.455
<v Speaker 1>been created yet,

00:25:03.775 --> 00:25:05.535
<v Speaker 1>so it can try to simulate some of

00:25:05.535 --> 00:25:07.375
<v Speaker 1>that stuff, but it's not perfect.

00:25:08.015 --> 00:25:10.255
<v Speaker 1>So even so it tells me there are

00:25:10.255 --> 00:25:12.735
<v Speaker 1>errors, I know that if I actually apply

00:25:12.735 --> 00:25:14.495
<v Speaker 1>it, it will work after some time.

00:25:15.670 --> 00:25:17.910
<v Speaker 1>So I said, yes, we are going to

00:25:17.910 --> 00:25:19.830
<v Speaker 1>deploy this now. What's happening now is it

00:25:19.830 --> 00:25:21.909
<v Speaker 1>has applied already a few resources,

00:25:22.550 --> 00:25:24.070
<v Speaker 1>and then it encountered

00:25:25.830 --> 00:25:28.630
<v Speaker 1>Helm hook because Helm hooks are fully supported

00:25:28.790 --> 00:25:30.950
<v Speaker 1>and now waits for the hook to finish.

00:25:31.475 --> 00:25:32.835
<v Speaker 1>You should be able to see that on

00:25:32.835 --> 00:25:33.635
<v Speaker 1>the cluster.

00:25:33.955 --> 00:25:36.275
<v Speaker 1>So if you look at the pods so

00:25:36.275 --> 00:25:38.115
<v Speaker 1>you already see, Cilium

00:25:39.315 --> 00:25:40.595
<v Speaker 1>pods are starting up.

00:25:40.835 --> 00:25:42.275
<v Speaker 1>The Hubble generator

00:25:43.669 --> 00:25:46.070
<v Speaker 1>job is already running, which is the hooks

00:25:46.070 --> 00:25:47.590
<v Speaker 1>that we are currently waiting for.

00:25:48.070 --> 00:25:49.909
<v Speaker 1>And as said, this will take some time

00:25:49.909 --> 00:25:50.870
<v Speaker 1>until

00:25:50.870 --> 00:25:52.309
<v Speaker 1>all this is green.

00:25:57.645 --> 00:25:58.365
<v Speaker 1>So

00:25:58.845 --> 00:26:01.005
<v Speaker 1>maybe jump to the git includes that I

00:26:01.005 --> 00:26:04.045
<v Speaker 1>just mentioned. So the Bootstrap deployment

00:26:04.765 --> 00:26:05.485
<v Speaker 1>has

00:26:05.725 --> 00:26:09.165
<v Speaker 1>multiple deployment items that are being installed. Selium,

00:26:09.245 --> 00:26:10.445
<v Speaker 1>then it does the barrier.

00:26:10.920 --> 00:26:12.680
<v Speaker 1>Selium wait is a

00:26:13.160 --> 00:26:14.760
<v Speaker 1>just a small pot

00:26:15.240 --> 00:26:16.440
<v Speaker 1>that is kind of

00:26:17.720 --> 00:26:20.200
<v Speaker 1>to so that the deployment knows

00:26:20.280 --> 00:26:21.880
<v Speaker 1>the cluster is really up and running because

00:26:21.880 --> 00:26:23.640
<v Speaker 1>when the first pot can be started, we

00:26:23.640 --> 00:26:26.200
<v Speaker 1>know everything is fine. So I use a

00:26:26.475 --> 00:26:27.914
<v Speaker 1>simple hook to

00:26:28.475 --> 00:26:30.635
<v Speaker 1>make sure that we don't continue before it's

00:26:30.635 --> 00:26:32.554
<v Speaker 1>really up and running, the cluster.

00:26:34.075 --> 00:26:35.355
<v Speaker 1>Some namespaces.

00:26:35.835 --> 00:26:36.794
<v Speaker 1>In this case,

00:26:37.195 --> 00:26:39.595
<v Speaker 1>just the Ingress NGINX namespace that we can

00:26:39.595 --> 00:26:41.115
<v Speaker 1>later install the Ingress controller.

00:26:42.820 --> 00:26:44.019
<v Speaker 1>We have a barrier

00:26:44.580 --> 00:26:46.419
<v Speaker 1>in this case because we cannot install the

00:26:46.419 --> 00:26:48.979
<v Speaker 1>ingress controller before the namespace is actually there.

00:26:49.940 --> 00:26:52.259
<v Speaker 1>Then we have cert manager. I'm installing it,

00:26:52.259 --> 00:26:54.179
<v Speaker 1>but I'm not really using it in this

00:26:54.340 --> 00:26:56.980
<v Speaker 1>example because I don't have external DNS setup

00:26:56.980 --> 00:26:57.460
<v Speaker 1>and everything.

00:26:58.795 --> 00:26:59.434
<v Speaker 1>But

00:27:00.395 --> 00:27:02.475
<v Speaker 1>yes, maybe it's a good example to just

00:27:02.475 --> 00:27:05.115
<v Speaker 1>show that we do Helm here, for example.

00:27:05.595 --> 00:27:08.395
<v Speaker 1>So SAP Manager is actually a deployment item

00:27:08.395 --> 00:27:09.115
<v Speaker 1>that

00:27:09.355 --> 00:27:11.560
<v Speaker 1>pulls in a Hound chart. We give it

00:27:11.560 --> 00:27:12.679
<v Speaker 1>the repo,

00:27:13.000 --> 00:27:16.600
<v Speaker 1>chart name, chart version, release name, namespace.

00:27:17.560 --> 00:27:19.240
<v Speaker 1>This is I'm not going to explain this

00:27:19.240 --> 00:27:19.800
<v Speaker 1>part.

00:27:21.160 --> 00:27:22.360
<v Speaker 1>The good thing is

00:27:22.840 --> 00:27:25.415
<v Speaker 1>you can use templating here already, at least

00:27:25.415 --> 00:27:27.575
<v Speaker 1>partially, not everywhere, but partially. For example, I

00:27:27.575 --> 00:27:30.294
<v Speaker 1>could here already do some

00:27:30.375 --> 00:27:31.335
<v Speaker 1>fancy

00:27:31.815 --> 00:27:35.174
<v Speaker 1>templating to have a dynamic namespace, which we

00:27:35.495 --> 00:27:36.535
<v Speaker 1>actually will do later.

00:27:41.429 --> 00:27:43.029
<v Speaker 1>So what do we have here?

00:27:43.510 --> 00:27:46.230
<v Speaker 1>Yeah. I prepared the bootstrap deployment two hours

00:27:46.230 --> 00:27:48.710
<v Speaker 1>before the session, so it's not perfect.

00:27:49.750 --> 00:27:51.269
<v Speaker 0>When in run it again.

00:27:52.950 --> 00:27:56.044
<v Speaker 0>Sorry? When in run it again. Exactly.

00:27:56.125 --> 00:27:58.365
<v Speaker 1>And it tells us two objects are missing.

00:27:58.365 --> 00:27:59.325
<v Speaker 1>The SelumNetworkPolicy

00:27:59.325 --> 00:28:01.725
<v Speaker 1>did not finish for the template controller, which

00:28:01.725 --> 00:28:03.325
<v Speaker 1>I'm also going to show later.

00:28:03.725 --> 00:28:06.685
<v Speaker 1>The ingress did not finish. Probably, it actually

00:28:06.685 --> 00:28:07.805
<v Speaker 1>told us the

00:28:08.470 --> 00:28:10.870
<v Speaker 1>the webhook of the ingress controller was not

00:28:10.870 --> 00:28:14.070
<v Speaker 1>ready. So I forgot some barrier or some

00:28:14.470 --> 00:28:15.909
<v Speaker 1>weight readiness there.

00:28:16.630 --> 00:28:19.029
<v Speaker 1>So as you already said, let's just retry

00:28:19.029 --> 00:28:19.269
<v Speaker 1>it.

00:28:24.315 --> 00:28:27.035
<v Speaker 1>And this time, it should actually just start

00:28:27.035 --> 00:28:27.595
<v Speaker 1>up.

00:28:27.915 --> 00:28:31.035
<v Speaker 0>Yes. So it looks healthy now. Yeah.

00:28:31.675 --> 00:28:34.715
<v Speaker 1>It's now again waiting for the Selium weight

00:28:34.715 --> 00:28:35.275
<v Speaker 1>pot.

00:28:36.179 --> 00:28:38.259
<v Speaker 1>And it's finished as well now.

00:28:38.740 --> 00:28:41.700
<v Speaker 1>So yeah, it looks good. And now ingress

00:28:41.700 --> 00:28:42.899
<v Speaker 1>controller is being

00:28:43.940 --> 00:28:46.579
<v Speaker 1>deployed. So the hooks are actually rerun.

00:28:48.820 --> 00:28:49.459
<v Speaker 1>And

00:28:50.100 --> 00:28:51.700
<v Speaker 1>we are done. Everything is green now.

00:28:52.555 --> 00:28:53.755
<v Speaker 1>In this case,

00:28:54.475 --> 00:28:56.315
<v Speaker 1>I didn't check why it's happening.

00:28:58.715 --> 00:29:00.475
<v Speaker 1>Cellium is adding some

00:29:03.515 --> 00:29:04.075
<v Speaker 1>labels

00:29:05.090 --> 00:29:07.330
<v Speaker 1>into deployment that I don't know why. I

00:29:07.330 --> 00:29:08.930
<v Speaker 1>didn't check why it did that. But I

00:29:08.930 --> 00:29:11.170
<v Speaker 1>can see it. That's already nice. So I

00:29:11.170 --> 00:29:13.809
<v Speaker 1>know something is interfering with my deployments,

00:29:14.130 --> 00:29:15.810
<v Speaker 1>and I would be able to debug that

00:29:15.810 --> 00:29:16.050
<v Speaker 1>now.

00:29:19.115 --> 00:29:20.955
<v Speaker 1>So we have a

00:29:21.275 --> 00:29:22.795
<v Speaker 1>usable cluster now.

00:29:23.675 --> 00:29:25.915
<v Speaker 1>Very important, we have an Ingress controller and

00:29:25.915 --> 00:29:27.275
<v Speaker 1>we have the ClusterDealController

00:29:27.275 --> 00:29:27.995
<v Speaker 1>running.

00:29:28.075 --> 00:29:29.675
<v Speaker 1>I'm going to show the ClusterDealController

00:29:29.675 --> 00:29:30.395
<v Speaker 1>later.

00:29:30.795 --> 00:29:32.875
<v Speaker 1>What I can show already now is the

00:29:32.875 --> 00:29:33.675
<v Speaker 1>WebUI.

00:29:34.730 --> 00:29:35.530
<v Speaker 1>As said,

00:29:35.850 --> 00:29:36.970
<v Speaker 1>you can just

00:29:38.410 --> 00:29:40.090
<v Speaker 1>run it locally

00:29:40.090 --> 00:29:41.930
<v Speaker 1>via Kluctl dot slash WebUI run.

00:29:42.570 --> 00:29:44.330
<v Speaker 1>The default port is already used, so I

00:29:44.330 --> 00:29:45.530
<v Speaker 1>have to use another one right now.

00:29:47.995 --> 00:29:49.115
<v Speaker 1>And there it is.

00:29:49.435 --> 00:29:52.715
<v Speaker 1>So it's just using the current context, connecting

00:29:52.715 --> 00:29:53.755
<v Speaker 1>to the cluster,

00:29:53.995 --> 00:29:56.395
<v Speaker 1>reading all the necessary information, and it already

00:29:56.395 --> 00:29:59.195
<v Speaker 1>knows that there were some command line invocations,

00:29:59.915 --> 00:30:01.275
<v Speaker 1>the ones that we've just seen.

00:30:02.400 --> 00:30:03.679
<v Speaker 1>And we can

00:30:04.160 --> 00:30:06.400
<v Speaker 1>get some information about it. For command line

00:30:06.400 --> 00:30:08.559
<v Speaker 1>information, there's for command line

00:30:08.720 --> 00:30:11.360
<v Speaker 1>invocations, there's not much information available. But

00:30:12.640 --> 00:30:14.880
<v Speaker 1>what you can see is at least what

00:30:14.880 --> 00:30:16.400
<v Speaker 1>has happened. As an example,

00:30:17.044 --> 00:30:18.965
<v Speaker 1>what you have just seen in the

00:30:19.284 --> 00:30:21.445
<v Speaker 1>CLI output can also be seen here. So

00:30:21.445 --> 00:30:24.724
<v Speaker 1>the diff with the strange IDs being replaced.

00:30:24.965 --> 00:30:27.125
<v Speaker 1>We see that the two new objects have

00:30:27.125 --> 00:30:28.325
<v Speaker 1>been created that we've seen.

00:30:29.280 --> 00:30:32.000
<v Speaker 1>And we would see basically everything that we

00:30:32.000 --> 00:30:33.840
<v Speaker 1>see in the CLI here.

00:30:34.400 --> 00:30:36.640
<v Speaker 1>You can also see ODA results.

00:30:36.640 --> 00:30:38.400
<v Speaker 1>This is the first invocation we had. We

00:30:38.400 --> 00:30:40.080
<v Speaker 1>see a lot of new objects.

00:30:40.560 --> 00:30:41.760
<v Speaker 1>No changed objects.

00:30:44.065 --> 00:30:45.505
<v Speaker 1>We can also

00:30:45.505 --> 00:30:47.105
<v Speaker 1>open the complete

00:30:47.265 --> 00:30:48.625
<v Speaker 1>project here

00:30:49.985 --> 00:30:53.585
<v Speaker 1>and see all the rendered objects, applied objects,

00:30:54.305 --> 00:30:56.065
<v Speaker 1>on cluster objects and so on as an

00:30:56.065 --> 00:30:56.385
<v Speaker 1>example.

00:30:58.090 --> 00:30:59.450
<v Speaker 1>Let's see.

00:31:00.090 --> 00:31:02.090
<v Speaker 1>What do we have here? Here's some config

00:31:02.090 --> 00:31:02.729
<v Speaker 1>map.

00:31:03.130 --> 00:31:05.130
<v Speaker 1>And we see this is the version that

00:31:05.130 --> 00:31:06.249
<v Speaker 1>was rendered.

00:31:06.649 --> 00:31:08.570
<v Speaker 1>This is the version that got applied.

00:31:09.210 --> 00:31:11.130
<v Speaker 1>This is the remote version before we applied

00:31:11.130 --> 00:31:13.605
<v Speaker 1>it, so you can do some debugging here

00:31:13.605 --> 00:31:15.125
<v Speaker 1>to figure out what happened.

00:31:18.405 --> 00:31:19.125
<v Speaker 1>Yeah.

00:31:19.525 --> 00:31:22.005
<v Speaker 1>Any So because this wasn't installed, the way

00:31:22.005 --> 00:31:23.845
<v Speaker 0>that this is working right now is that

00:31:23.845 --> 00:31:26.570
<v Speaker 0>if you, on your local machine, have access

00:31:26.570 --> 00:31:28.970
<v Speaker 0>to the Kubernetes cluster and enough permissions to

00:31:28.970 --> 00:31:30.010
<v Speaker 0>be able to read,

00:31:30.250 --> 00:31:32.890
<v Speaker 0>I guess, the clear control custom resources, the

00:31:32.890 --> 00:31:35.130
<v Speaker 0>status fields, and so forth, then it's able

00:31:35.130 --> 00:31:36.890
<v Speaker 0>to just represent all of that on a

00:31:36.890 --> 00:31:38.505
<v Speaker 0>UI and you can just view it. But

00:31:38.505 --> 00:31:39.625
<v Speaker 0>like you said, like, you

00:31:40.025 --> 00:31:42.424
<v Speaker 0>don't get the OIDC integrations.

00:31:42.505 --> 00:31:45.065
<v Speaker 0>If you need a privileged user locally on

00:31:45.065 --> 00:31:46.425
<v Speaker 0>your own machine to be able to access

00:31:46.425 --> 00:31:48.425
<v Speaker 0>it. Okay. Yeah. I love that it shows

00:31:48.425 --> 00:31:50.585
<v Speaker 0>the command line implications, and it's not just

00:31:50.585 --> 00:31:53.625
<v Speaker 0>restricted to the clear control deployment CRD, which

00:31:53.625 --> 00:31:54.185
<v Speaker 0>is pricey.

00:31:54.720 --> 00:31:57.040
<v Speaker 1>That's what I tried to explain. The all

00:31:57.040 --> 00:31:59.920
<v Speaker 1>the functionality of Kluctl is part of Kluctl

00:31:59.920 --> 00:32:02.240
<v Speaker 1>itself. It's not part of the controller. The

00:32:02.240 --> 00:32:04.159
<v Speaker 1>controller is really just on top of it,

00:32:04.400 --> 00:32:07.200
<v Speaker 1>like an interface to what it already provides.

00:32:07.679 --> 00:32:08.240
<v Speaker 1>So

00:32:08.945 --> 00:32:10.705
<v Speaker 1>it doesn't really make a difference

00:32:13.184 --> 00:32:14.784
<v Speaker 1>what caused these

00:32:14.945 --> 00:32:17.184
<v Speaker 1>deployments. It's the same in the end.

00:32:18.705 --> 00:32:20.945
<v Speaker 1>Regarding the Z Chelsea command line, there are

00:32:20.945 --> 00:32:23.470
<v Speaker 1>some improvements that are planned because if you

00:32:23.470 --> 00:32:25.150
<v Speaker 1>have a lot of deployments and we have

00:32:25.150 --> 00:32:27.389
<v Speaker 1>clusters with a lot of deployments

00:32:27.870 --> 00:32:29.549
<v Speaker 1>where we also do a lot of manual

00:32:29.549 --> 00:32:32.429
<v Speaker 1>stuff because in daily work, it's required

00:32:32.910 --> 00:32:33.710
<v Speaker 1>for us,

00:32:34.190 --> 00:32:36.029
<v Speaker 1>it can the command line

00:32:36.510 --> 00:32:39.605
<v Speaker 1>cards can kind of it gets too much.

00:32:39.605 --> 00:32:42.405
<v Speaker 1>So there needs to be some some improvements

00:32:42.405 --> 00:32:45.765
<v Speaker 1>and filtering capabilities and so on. With regards

00:32:45.765 --> 00:32:47.445
<v Speaker 0>to the command line stuff, does it tell

00:32:47.445 --> 00:32:48.485
<v Speaker 0>you the user?

00:32:48.725 --> 00:32:50.405
<v Speaker 0>I know Kubernetes doesn't really have a concept

00:32:50.405 --> 00:32:52.005
<v Speaker 0>of user. Right? But it does have, like,

00:32:52.870 --> 00:32:53.669
<v Speaker 0>token,

00:32:53.830 --> 00:32:54.950
<v Speaker 0>has authentication.

00:32:54.950 --> 00:32:57.669
<v Speaker 0>Has any of that propagated into the history?

00:32:58.390 --> 00:32:59.429
<v Speaker 1>No.

00:32:59.990 --> 00:33:02.309
<v Speaker 1>Not yet. And I'm not sure if that's

00:33:02.309 --> 00:33:04.390
<v Speaker 1>even a good thing because

00:33:05.235 --> 00:33:07.715
<v Speaker 1>data protection in at least in Germany and

00:33:07.715 --> 00:33:09.154
<v Speaker 1>the EU,

00:33:10.434 --> 00:33:12.674
<v Speaker 1>not sure if they would be happy with

00:33:12.995 --> 00:33:15.795
<v Speaker 1>the I don't know. I'm not a lawyer,

00:33:15.795 --> 00:33:16.995
<v Speaker 1>so I don't want to

00:33:17.549 --> 00:33:20.190
<v Speaker 1>put personal information into some clusters.

00:33:20.669 --> 00:33:22.190
<v Speaker 1>Doesn't feel Makes sense.

00:33:25.950 --> 00:33:26.749
<v Speaker 1>Okay.

00:33:28.269 --> 00:33:30.590
<v Speaker 1>So I've shown you the

00:33:31.934 --> 00:33:33.534
<v Speaker 1>locally run version now.

00:33:33.855 --> 00:33:36.654
<v Speaker 1>I can also install it, as explained.

00:33:37.054 --> 00:33:39.855
<v Speaker 1>The Bootstrap deployment actually does that. So we

00:33:39.855 --> 00:33:41.134
<v Speaker 1>have a Kluctl

00:33:42.255 --> 00:33:44.735
<v Speaker 1>include here. Or maybe I can the list

00:33:44.735 --> 00:33:47.669
<v Speaker 1>of deployment items has different types of deployment

00:33:47.669 --> 00:33:50.629
<v Speaker 1>items. The most basic one is

00:33:51.270 --> 00:33:52.789
<v Speaker 1>referenced through path,

00:33:53.270 --> 00:33:55.110
<v Speaker 1>which is just a list of manifests or

00:33:55.110 --> 00:33:57.190
<v Speaker 1>it can be a customized deployment or it

00:33:57.190 --> 00:33:58.870
<v Speaker 1>can be a hound chart that is being

00:33:58.870 --> 00:33:59.190
<v Speaker 1>installed.

00:34:00.055 --> 00:34:02.615
<v Speaker 1>Then there are includes. Includes means

00:34:03.255 --> 00:34:06.135
<v Speaker 1>the path that I provide here contains another

00:34:06.135 --> 00:34:09.015
<v Speaker 1>Clue CDL deployment. So you can kind of

00:34:09.015 --> 00:34:11.415
<v Speaker 1>continue here the same way you did in

00:34:11.415 --> 00:34:13.495
<v Speaker 1>the root deployment. You again have a deployment

00:34:13.495 --> 00:34:13.895
<v Speaker 1>YAML,

00:34:14.449 --> 00:34:16.369
<v Speaker 1>and you have a list of deployment items,

00:34:16.369 --> 00:34:18.449
<v Speaker 1>and you could have the simple

00:34:18.849 --> 00:34:21.170
<v Speaker 1>items with the path here again. That's what

00:34:21.170 --> 00:34:22.449
<v Speaker 1>we have here, for example,

00:34:22.929 --> 00:34:24.289
<v Speaker 1>and so on. So you can have it

00:34:24.289 --> 00:34:25.570
<v Speaker 1>as deep as you want.

00:34:25.969 --> 00:34:27.810
<v Speaker 1>And the idea is that if you have

00:34:27.889 --> 00:34:28.769
<v Speaker 1>configuration

00:34:28.769 --> 00:34:32.074
<v Speaker 1>values loaded, you can pass them into sub

00:34:32.074 --> 00:34:33.355
<v Speaker 1>deployments as well,

00:34:33.594 --> 00:34:35.835
<v Speaker 1>as deep as you want. And at any

00:34:35.835 --> 00:34:38.875
<v Speaker 1>level, you can introduce new configuration that is

00:34:38.875 --> 00:34:41.514
<v Speaker 1>based on the one that was passed before

00:34:41.514 --> 00:34:42.955
<v Speaker 1>and so on. So you can

00:34:43.435 --> 00:34:44.315
<v Speaker 1>do

00:34:44.900 --> 00:34:46.260
<v Speaker 1>some nice things there.

00:34:46.900 --> 00:34:49.219
<v Speaker 1>In this case, we have a git include.

00:34:49.219 --> 00:34:50.580
<v Speaker 1>That's what I mentioned before.

00:34:50.900 --> 00:34:53.540
<v Speaker 1>This one is pointing to the public Kluctl

00:34:53.540 --> 00:34:56.900
<v Speaker 1>repository into the subdirectory install controller, which contains

00:34:56.900 --> 00:34:57.940
<v Speaker 1>the Kluctl deployment

00:34:58.505 --> 00:35:00.665
<v Speaker 1>that has all the necessary stuff to deploy

00:35:00.665 --> 00:35:02.665
<v Speaker 1>the ClueSlide controller.

00:35:02.905 --> 00:35:04.345
<v Speaker 1>Same with the WebUI.

00:35:05.705 --> 00:35:08.585
<v Speaker 1>This gives the basic installation of the controller.

00:35:08.585 --> 00:35:11.305
<v Speaker 1>For the controller, that's enough, actually. It doesn't

00:35:11.305 --> 00:35:12.585
<v Speaker 1>need anything else.

00:35:13.370 --> 00:35:14.490
<v Speaker 1>The WebUI,

00:35:14.490 --> 00:35:16.570
<v Speaker 1>because it's a very plain deployment

00:35:16.570 --> 00:35:18.730
<v Speaker 1>with just a service and no ingress and

00:35:18.730 --> 00:35:19.610
<v Speaker 1>stuff like that,

00:35:20.330 --> 00:35:22.250
<v Speaker 1>I think in most cases will require some

00:35:22.250 --> 00:35:22.970
<v Speaker 1>additional

00:35:23.130 --> 00:35:25.130
<v Speaker 1>stuff, which we see here.

00:35:25.850 --> 00:35:26.490
<v Speaker 1>So

00:35:27.305 --> 00:35:30.265
<v Speaker 1>we have an ingress also deployed after this,

00:35:31.385 --> 00:35:33.705
<v Speaker 1>which just gives us the web UIs through

00:35:33.705 --> 00:35:34.905
<v Speaker 1>the ingress controller.

00:35:35.785 --> 00:35:37.465
<v Speaker 1>I'm using local host TV,

00:35:37.865 --> 00:35:38.425
<v Speaker 1>which always

00:35:39.570 --> 00:35:42.530
<v Speaker 1>resolves to localhost, so one dot seven zero

00:35:42.530 --> 00:35:43.410
<v Speaker 1>zero one.

00:35:43.810 --> 00:35:45.730
<v Speaker 1>So if I go to that URL

00:35:48.290 --> 00:35:49.890
<v Speaker 1>where is my Chrome browser?

00:35:52.745 --> 00:35:54.105
<v Speaker 1>Why does it not work?

00:35:55.145 --> 00:35:56.585
<v Speaker 1>Okay. I first have to go to the

00:35:56.585 --> 00:35:58.025
<v Speaker 1>console and then

00:35:58.345 --> 00:36:01.545
<v Speaker 1>it works. I have just oh, okay. It's

00:36:01.545 --> 00:36:04.185
<v Speaker 1>already working. Great. So this is the UI

00:36:04.185 --> 00:36:05.305
<v Speaker 1>installed to the cluster.

00:36:06.200 --> 00:36:08.519
<v Speaker 1>If you install it without OIDC, it will

00:36:08.519 --> 00:36:11.640
<v Speaker 1>create some basic users, two users, one admin

00:36:11.640 --> 00:36:13.079
<v Speaker 1>user and one viewer user.

00:36:13.319 --> 00:36:15.079
<v Speaker 1>We are going to use the admin user.

00:36:16.119 --> 00:36:17.400
<v Speaker 1>The password

00:36:17.400 --> 00:36:17.720
<v Speaker 1>is,

00:36:18.225 --> 00:36:20.145
<v Speaker 1>by default, pre generated

00:36:20.225 --> 00:36:23.345
<v Speaker 1>by the WebUI itself and written into

00:36:24.065 --> 00:36:25.745
<v Speaker 1>the WebUI secret.

00:36:30.385 --> 00:36:32.550
<v Speaker 1>And, yeah, you see the same as before

00:36:32.550 --> 00:36:33.990
<v Speaker 1>with the difference that you can log out

00:36:33.990 --> 00:36:35.030
<v Speaker 1>now. So

00:36:35.670 --> 00:36:37.830
<v Speaker 1>for now on, I will use the installed

00:36:37.830 --> 00:36:39.830
<v Speaker 1>version instead of the local version.

00:36:39.990 --> 00:36:40.710
<v Speaker 0>Cool.

00:36:44.950 --> 00:36:45.510
<v Speaker 1>What else?

00:36:47.724 --> 00:36:48.285
<v Speaker 1>So,

00:36:48.525 --> 00:36:50.125
<v Speaker 1>as explained, we now have a basic cluster

00:36:50.125 --> 00:36:52.445
<v Speaker 1>up and running. We have bootstrapped it. Oh,

00:36:52.445 --> 00:36:54.925
<v Speaker 1>what? No, I do not want to move.

00:36:56.605 --> 00:36:59.245
<v Speaker 1>Okay, so we have the bootstrapped thing.

00:36:59.405 --> 00:37:00.285
<v Speaker 1>Now the idea is,

00:37:01.150 --> 00:37:02.590
<v Speaker 1>of course, that's

00:37:02.910 --> 00:37:04.670
<v Speaker 1>not enough. You, of course, also want to

00:37:04.670 --> 00:37:06.750
<v Speaker 1>have some applications deployed to it. I prepared

00:37:06.750 --> 00:37:10.190
<v Speaker 1>two applications, Podinfo and PotatoHat,

00:37:10.750 --> 00:37:12.750
<v Speaker 1>which we are going to deploy now.

00:37:13.310 --> 00:37:14.990
<v Speaker 1>Let's start with

00:37:17.435 --> 00:37:18.315
<v Speaker 1>maybe

00:37:18.715 --> 00:37:21.035
<v Speaker 1>Potato Head. It doesn't really matter.

00:37:22.955 --> 00:37:24.875
<v Speaker 1>This one is using

00:37:25.035 --> 00:37:26.395
<v Speaker 1>plain manifests

00:37:26.395 --> 00:37:27.195
<v Speaker 1>everywhere.

00:37:27.355 --> 00:37:29.195
<v Speaker 1>So we have a root deployment

00:37:29.559 --> 00:37:31.160
<v Speaker 1>that includes the

00:37:32.200 --> 00:37:34.040
<v Speaker 1>sub deployment of potato services.

00:37:34.599 --> 00:37:35.400
<v Speaker 1>This one

00:37:35.880 --> 00:37:39.240
<v Speaker 1>has some simple deployment items with customized deployments

00:37:39.240 --> 00:37:40.200
<v Speaker 1>having plain

00:37:42.279 --> 00:37:44.279
<v Speaker 1>manifests with some templating,

00:37:44.279 --> 00:37:44.839
<v Speaker 1>not too much,

00:37:45.835 --> 00:37:47.995
<v Speaker 1>just the stuff that is really necessary.

00:37:48.475 --> 00:37:50.395
<v Speaker 1>Sorry, I need to change something.

00:37:58.740 --> 00:38:01.300
<v Speaker 1>Yeah, plain manifest, nothing special.

00:38:01.460 --> 00:38:02.660
<v Speaker 1>Namespace again

00:38:02.980 --> 00:38:06.500
<v Speaker 1>with order being properly managed through a barrier.

00:38:06.900 --> 00:38:08.820
<v Speaker 1>And another special thing,

00:38:09.140 --> 00:38:11.460
<v Speaker 1>I called it the template service. This is

00:38:11.460 --> 00:38:12.820
<v Speaker 1>a deployment item

00:38:13.035 --> 00:38:15.275
<v Speaker 1>that has a little bit more of templating.

00:38:16.234 --> 00:38:18.234
<v Speaker 1>And the idea is that you can include

00:38:18.234 --> 00:38:20.795
<v Speaker 1>this one multiple times with different

00:38:21.674 --> 00:38:22.555
<v Speaker 1>configuration.

00:38:22.555 --> 00:38:25.275
<v Speaker 1>So the original potato services project

00:38:25.690 --> 00:38:26.490
<v Speaker 1>has,

00:38:27.770 --> 00:38:29.210
<v Speaker 1>I don't know, maybe like

00:38:30.090 --> 00:38:31.690
<v Speaker 1>seven microservices,

00:38:31.690 --> 00:38:33.610
<v Speaker 1>and each one has its own folder

00:38:34.090 --> 00:38:36.890
<v Speaker 1>kind of containing the same files. And I

00:38:36.890 --> 00:38:38.970
<v Speaker 1>changed it to have just one template

00:38:40.205 --> 00:38:41.485
<v Speaker 1>manifest folder,

00:38:42.205 --> 00:38:44.765
<v Speaker 1>and I'm including it multiple times. So for

00:38:44.765 --> 00:38:46.925
<v Speaker 1>example, for the hat, I am including it,

00:38:47.245 --> 00:38:50.045
<v Speaker 1>giving it some configuration. As said, on any

00:38:50.045 --> 00:38:52.365
<v Speaker 1>level in the deployment, you can introduce new

00:38:52.365 --> 00:38:55.165
<v Speaker 1>configurations that are then available from for the

00:38:56.420 --> 00:38:58.500
<v Speaker 1>deployment in question and all the sub deployments

00:38:58.500 --> 00:38:59.220
<v Speaker 1>of that.

00:39:00.339 --> 00:39:02.900
<v Speaker 1>So here, for example, we give it this

00:39:02.900 --> 00:39:03.700
<v Speaker 1>configuration.

00:39:03.940 --> 00:39:05.220
<v Speaker 1>Then we have the

00:39:06.099 --> 00:39:07.299
<v Speaker 1>leg deployment,

00:39:07.299 --> 00:39:08.660
<v Speaker 1>left leg and

00:39:08.964 --> 00:39:10.645
<v Speaker 1>later the right leg.

00:39:10.964 --> 00:39:13.045
<v Speaker 1>Some conditionals can be used. For example, if

00:39:13.045 --> 00:39:15.365
<v Speaker 1>you just want to have legs when legs

00:39:15.365 --> 00:39:18.245
<v Speaker 1>are actually enabled through the configuration.

00:39:19.605 --> 00:39:21.204
<v Speaker 1>So if this would be false, this would

00:39:21.204 --> 00:39:22.085
<v Speaker 1>be completely skipped.

00:39:23.970 --> 00:39:26.610
<v Speaker 1>What do we have here? Just an example

00:39:26.610 --> 00:39:28.770
<v Speaker 1>that you can also use JSON because it's

00:39:28.850 --> 00:39:30.210
<v Speaker 1>a subset of YAML.

00:39:31.330 --> 00:39:32.290
<v Speaker 1>Makes things

00:39:32.530 --> 00:39:33.730
<v Speaker 1>shorter in some cases.

00:39:39.704 --> 00:39:40.505
<v Speaker 1>Yeah.

00:39:41.464 --> 00:39:43.065
<v Speaker 1>Oh, maybe the configuration,

00:39:43.305 --> 00:39:44.265
<v Speaker 1>a little bit.

00:39:44.585 --> 00:39:47.305
<v Speaker 1>So this one is using a pattern that

00:39:47.305 --> 00:39:50.424
<v Speaker 1>I really like. We have some common configuration

00:39:50.424 --> 00:39:52.664
<v Speaker 1>loaded through the root deployment.

00:39:53.480 --> 00:39:55.000
<v Speaker 1>The common configuration,

00:39:55.000 --> 00:39:57.880
<v Speaker 1>for example, gives us some configuration about the

00:39:57.880 --> 00:40:00.040
<v Speaker 1>replicas for the different microservices.

00:40:00.279 --> 00:40:01.880
<v Speaker 1>It tells us that legs are by default

00:40:01.880 --> 00:40:04.359
<v Speaker 1>enabled because we need legs.

00:40:06.545 --> 00:40:07.665
<v Speaker 1>Here, we have

00:40:08.785 --> 00:40:10.385
<v Speaker 1>some image configuration,

00:40:11.025 --> 00:40:13.425
<v Speaker 1>which can, as you can see, pass from

00:40:13.425 --> 00:40:15.665
<v Speaker 1>the outside world as well through the

00:40:17.505 --> 00:40:18.545
<v Speaker 1>-a argument.

00:40:19.980 --> 00:40:21.020
<v Speaker 1>Base DNS,

00:40:21.020 --> 00:40:23.100
<v Speaker 1>which we are then using in ingresses.

00:40:23.980 --> 00:40:26.380
<v Speaker 1>Then the idea is that after loading the

00:40:26.380 --> 00:40:30.460
<v Speaker 1>command configuration, we can load more specific configuration.

00:40:31.020 --> 00:40:33.260
<v Speaker 1>And as already explained before, we can already

00:40:33.260 --> 00:40:35.405
<v Speaker 1>use templating here. So, for example, we say

00:40:35.405 --> 00:40:36.285
<v Speaker 1>that the

00:40:37.565 --> 00:40:40.445
<v Speaker 1>config file with the name envtype is loaded

00:40:40.445 --> 00:40:42.205
<v Speaker 1>here as well. The idea is that this

00:40:42.205 --> 00:40:43.245
<v Speaker 1>is merged.

00:40:43.724 --> 00:40:46.125
<v Speaker 1>So this one is loaded, building up the

00:40:46.125 --> 00:40:47.405
<v Speaker 1>templating context,

00:40:47.405 --> 00:40:49.770
<v Speaker 1>then this one is loaded. This one can

00:40:49.770 --> 00:40:52.170
<v Speaker 1>already use everything from the first one. So

00:40:52.170 --> 00:40:54.170
<v Speaker 1>everything that was defined here can be used

00:40:54.170 --> 00:40:54.730
<v Speaker 1>here.

00:40:55.130 --> 00:40:57.450
<v Speaker 1>And everything that this one defines

00:40:58.010 --> 00:41:00.090
<v Speaker 1>that was already there is overwritten,

00:41:00.090 --> 00:41:01.690
<v Speaker 1>so you can stack it on top of

00:41:01.690 --> 00:41:02.090
<v Speaker 1>each other.

00:41:02.755 --> 00:41:04.275
<v Speaker 1>So what do we have here? We have

00:41:04.275 --> 00:41:06.755
<v Speaker 1>the non prod deployment, which just overrides the

00:41:06.755 --> 00:41:07.795
<v Speaker 1>hat replicas.

00:41:07.795 --> 00:41:09.715
<v Speaker 1>Maybe we need some more hats in

00:41:09.955 --> 00:41:12.035
<v Speaker 1>non prod environments for whatever it is. We

00:41:12.035 --> 00:41:12.995
<v Speaker 1>don't need legs.

00:41:13.955 --> 00:41:15.955
<v Speaker 1>And for prod, we say front end should

00:41:15.955 --> 00:41:17.315
<v Speaker 1>be a little bit

00:41:18.400 --> 00:41:19.520
<v Speaker 1>more replicated.

00:41:19.760 --> 00:41:21.600
<v Speaker 1>We can also change the image here,

00:41:22.480 --> 00:41:24.880
<v Speaker 1>which is overriding what we've defined here.

00:41:25.360 --> 00:41:26.880
<v Speaker 1>So you can do whatever you want. It's

00:41:26.880 --> 00:41:27.680
<v Speaker 1>completely

00:41:29.440 --> 00:41:30.640
<v Speaker 1>free to free.

00:41:31.119 --> 00:41:31.360
<v Speaker 0>Cool.

00:41:34.795 --> 00:41:35.435
<v Speaker 1>So

00:41:36.475 --> 00:41:38.315
<v Speaker 1>I think I explained enough.

00:41:39.195 --> 00:41:41.115
<v Speaker 1>Let's deploy that thing.

00:41:43.835 --> 00:41:45.355
<v Speaker 1>This one has currently

00:41:45.355 --> 00:41:47.115
<v Speaker 1>defined two targets, test and prod.

00:41:47.690 --> 00:41:50.330
<v Speaker 1>They are currently deploying to the same cluster

00:41:50.330 --> 00:41:52.410
<v Speaker 1>to the same context, which is the one

00:41:52.570 --> 00:41:55.130
<v Speaker 1>configured right now. I could also say that

00:41:55.130 --> 00:41:57.610
<v Speaker 1>the context is fixed to, for example, this

00:41:57.610 --> 00:41:59.690
<v Speaker 1>one, which is the same right now. But

00:41:59.850 --> 00:42:01.370
<v Speaker 1>I think you can imagine what I could

00:42:01.370 --> 00:42:04.255
<v Speaker 1>do here. I could say that, okay, this

00:42:04.255 --> 00:42:05.935
<v Speaker 1>one should always go to this context and

00:42:05.935 --> 00:42:06.655
<v Speaker 1>so on

00:42:08.095 --> 00:42:09.135
<v Speaker 1>so that

00:42:09.695 --> 00:42:12.015
<v Speaker 1>errors are not happening so easily.

00:42:12.255 --> 00:42:14.095
<v Speaker 1>These are the arguments that you have maybe

00:42:14.095 --> 00:42:15.695
<v Speaker 1>seen here already,

00:42:15.855 --> 00:42:16.895
<v Speaker 1>which are being overwritten.

00:42:17.910 --> 00:42:19.910
<v Speaker 1>And, yeah, let's just do it.

00:42:20.230 --> 00:42:22.710
<v Speaker 1>Again, it tells us what it will do,

00:42:22.710 --> 00:42:24.070
<v Speaker 1>a lot of new objects.

00:42:24.150 --> 00:42:26.550
<v Speaker 1>We are happy with that. We say yes,

00:42:27.270 --> 00:42:28.390
<v Speaker 1>and we

00:42:29.270 --> 00:42:30.390
<v Speaker 1>see them appear.

00:42:31.295 --> 00:42:33.775
<v Speaker 1>A lot of potato hat services.

00:42:36.655 --> 00:42:38.495
<v Speaker 0>And two hats. And

00:42:39.135 --> 00:42:41.295
<v Speaker 1>two hats, yeah, as promised.

00:42:41.615 --> 00:42:43.375
<v Speaker 1>I can also do a prod deployment now.

00:42:45.410 --> 00:42:47.730
<v Speaker 1>Maybe one important thing is the namespace is

00:42:47.730 --> 00:42:48.610
<v Speaker 1>templated,

00:42:48.610 --> 00:42:50.290
<v Speaker 1>so we can deploy to the same cluster

00:42:50.290 --> 00:42:52.610
<v Speaker 1>multiple times just by using the target name

00:42:52.610 --> 00:42:53.650
<v Speaker 1>as a prefix.

00:42:55.970 --> 00:42:57.970
<v Speaker 1>And now we have another potato head.

00:42:59.205 --> 00:43:00.885
<v Speaker 1>I'm not going to open the ingress now

00:43:00.885 --> 00:43:02.405
<v Speaker 1>because it's nothing

00:43:03.205 --> 00:43:05.445
<v Speaker 1>nothing special here. Or do you want to

00:43:05.445 --> 00:43:06.085
<v Speaker 1>see it?

00:43:07.685 --> 00:43:08.885
<v Speaker 0>No. But I would like to see the

00:43:08.885 --> 00:43:09.765
<v Speaker 0>web UI again.

00:43:10.850 --> 00:43:13.570
<v Speaker 1>Oh, yeah. Sure. That's actually more interesting. So

00:43:13.570 --> 00:43:15.330
<v Speaker 1>more command line entries.

00:43:16.770 --> 00:43:18.850
<v Speaker 1>So this is still the cluster bootstrap. Nothing

00:43:18.850 --> 00:43:20.850
<v Speaker 1>has happened here. But we see that there

00:43:20.850 --> 00:43:23.330
<v Speaker 1>is a new project with tune new

00:43:23.330 --> 00:43:24.130
<v Speaker 1>targets,

00:43:24.130 --> 00:43:24.930
<v Speaker 1>prod and test,

00:43:25.875 --> 00:43:28.515
<v Speaker 1>both invoked through the command line and

00:43:29.155 --> 00:43:30.675
<v Speaker 1>actually see different

00:43:30.675 --> 00:43:33.155
<v Speaker 1>amount of new objects. That's probably because one

00:43:33.155 --> 00:43:35.635
<v Speaker 1>has lags enabled and the other one not.

00:43:37.155 --> 00:43:38.595
<v Speaker 1>So if you would check this, we would

00:43:38.595 --> 00:43:39.715
<v Speaker 1>see that this one

00:43:40.030 --> 00:43:42.110
<v Speaker 1>has lags and the other one does not

00:43:42.110 --> 00:43:43.070
<v Speaker 1>have lags.

00:43:44.910 --> 00:43:46.190
<v Speaker 1>Now maybe

00:43:46.670 --> 00:43:49.150
<v Speaker 1>to showcase the UI a little bit more,

00:43:50.030 --> 00:43:50.830
<v Speaker 1>let's

00:43:50.830 --> 00:43:52.350
<v Speaker 1>actually change something here.

00:43:54.795 --> 00:43:56.795
<v Speaker 1>Let's say non prod has

00:43:57.435 --> 00:43:59.355
<v Speaker 1>now three heads,

00:43:59.835 --> 00:44:01.115
<v Speaker 1>and we need some legs.

00:44:02.395 --> 00:44:03.275
<v Speaker 1>So we

00:44:03.595 --> 00:44:05.675
<v Speaker 1>realized not having legs is a bad idea.

00:44:07.010 --> 00:44:10.130
<v Speaker 1>So I'm redeploying test again. And as mentioned

00:44:10.130 --> 00:44:12.290
<v Speaker 1>before, it would show what it's going to

00:44:12.290 --> 00:44:14.610
<v Speaker 1>do. It tells us four new objects.

00:44:15.490 --> 00:44:16.850
<v Speaker 1>One has changed,

00:44:17.089 --> 00:44:18.609
<v Speaker 1>and this is the diff of the changed

00:44:18.609 --> 00:44:19.010
<v Speaker 1>objects.

00:44:19.575 --> 00:44:21.415
<v Speaker 1>This is what you would have expected.

00:44:21.815 --> 00:44:24.055
<v Speaker 1>So we say yes, and now it confirms

00:44:24.055 --> 00:44:25.895
<v Speaker 1>this is what I actually did.

00:44:27.095 --> 00:44:29.495
<v Speaker 1>And the UI is not popping up again.

00:44:30.935 --> 00:44:33.175
<v Speaker 1>And here, we see another card on top

00:44:33.175 --> 00:44:36.089
<v Speaker 1>of this one here, and we see four

00:44:36.089 --> 00:44:38.010
<v Speaker 1>new objects and one changed object.

00:44:38.569 --> 00:44:41.369
<v Speaker 1>We can see the legs have appeared and

00:44:41.369 --> 00:44:43.050
<v Speaker 1>the replicas have been changed.

00:44:44.170 --> 00:44:47.049
<v Speaker 1>We can now also undo what we did

00:44:47.049 --> 00:44:47.369
<v Speaker 1>here.

00:44:51.494 --> 00:44:53.015
<v Speaker 1>And now it's

00:44:53.015 --> 00:44:54.135
<v Speaker 1>also very interesting.

00:44:54.615 --> 00:44:56.934
<v Speaker 1>We have created new objects, and now these

00:44:56.934 --> 00:44:58.855
<v Speaker 1>objects are not in the deployment anymore because

00:44:58.855 --> 00:45:00.694
<v Speaker 1>we changed the configuration in a way that

00:45:00.694 --> 00:45:01.895
<v Speaker 1>makes them disappear.

00:45:02.375 --> 00:45:05.030
<v Speaker 1>That also means we usually want them to

00:45:05.030 --> 00:45:07.670
<v Speaker 1>get removed from the cluster as well. Kluctl

00:45:07.670 --> 00:45:09.750
<v Speaker 1>edu will detect that these objects are orphan

00:45:09.750 --> 00:45:10.310
<v Speaker 1>and

00:45:10.710 --> 00:45:12.550
<v Speaker 1>ask you actually,

00:45:12.630 --> 00:45:14.150
<v Speaker 1>not now, but I can do a prune

00:45:14.150 --> 00:45:16.070
<v Speaker 1>call afterwards to actually clean up the cluster.

00:45:16.715 --> 00:45:18.795
<v Speaker 1>So Bart, we can see replicas back to

00:45:18.795 --> 00:45:20.715
<v Speaker 1>two. We say, yes, we are happy with

00:45:20.715 --> 00:45:23.435
<v Speaker 1>that. And then we also say we actually

00:45:23.435 --> 00:45:26.475
<v Speaker 1>want to get rid of these orphan objects.

00:45:26.795 --> 00:45:28.155
<v Speaker 1>And then they are gone.

00:45:28.715 --> 00:45:29.995
<v Speaker 1>And the UI

00:45:30.520 --> 00:45:33.720
<v Speaker 1>will then show us that two commands have

00:45:33.720 --> 00:45:35.960
<v Speaker 1>been invoked. This is the first one

00:45:36.280 --> 00:45:37.880
<v Speaker 1>where we see the replicas.

00:45:38.040 --> 00:45:39.800
<v Speaker 1>It tells us even though

00:45:40.280 --> 00:45:42.200
<v Speaker 1>it did a few changes, it also detected

00:45:42.200 --> 00:45:43.080
<v Speaker 1>a few orphans.

00:45:44.035 --> 00:45:45.635
<v Speaker 1>But we then immediately

00:45:45.955 --> 00:45:48.995
<v Speaker 1>handled that situation and deleted them through the

00:45:48.995 --> 00:45:50.355
<v Speaker 1>prune invocation.

00:45:50.515 --> 00:45:52.035
<v Speaker 0>Nice. I like that.

00:45:54.755 --> 00:45:55.395
<v Speaker 1>So

00:45:56.595 --> 00:45:58.515
<v Speaker 1>let's keep it this way with the potato

00:45:58.515 --> 00:45:58.835
<v Speaker 1>hat.

00:46:02.480 --> 00:46:04.080
<v Speaker 1>Yeah. I think I have shown enough when

00:46:04.080 --> 00:46:06.000
<v Speaker 1>it comes to the push based

00:46:06.400 --> 00:46:07.040
<v Speaker 1>stuff.

00:46:08.080 --> 00:46:09.360
<v Speaker 1>How do you think?

00:46:10.640 --> 00:46:13.095
<v Speaker 0>Yeah. That's great. Definitely. Okay.

00:46:13.735 --> 00:46:16.375
<v Speaker 1>Cool. Then let's start with something new.

00:46:17.575 --> 00:46:19.335
<v Speaker 1>This is something I have not prepared. I'm

00:46:19.335 --> 00:46:21.815
<v Speaker 1>going to do it on the fly.

00:46:23.095 --> 00:46:25.415
<v Speaker 1>The good thing is you can manage ClueCDL

00:46:25.415 --> 00:46:27.095
<v Speaker 1>deployments through ClueCDL.

00:46:28.349 --> 00:46:29.710
<v Speaker 1>Makes sense because

00:46:30.109 --> 00:46:30.910
<v Speaker 1>why not?

00:46:31.549 --> 00:46:33.390
<v Speaker 1>So what we are going to do now

00:46:33.390 --> 00:46:34.030
<v Speaker 1>is

00:46:35.549 --> 00:46:36.990
<v Speaker 1>define Is that mean can do a handoff,

00:46:37.230 --> 00:46:39.549
<v Speaker 0>like where you do ClueControl

00:46:39.549 --> 00:46:40.910
<v Speaker 0>deploy locally,

00:46:40.910 --> 00:46:43.015
<v Speaker 0>which has a ClueControl deployment that then brings

00:46:43.015 --> 00:46:45.815
<v Speaker 0>itself under management. Right? Exactly.

00:46:45.815 --> 00:46:47.815
<v Speaker 1>That's what we actually do

00:46:48.215 --> 00:46:50.375
<v Speaker 1>all the time. So we have kind of

00:46:50.375 --> 00:46:53.415
<v Speaker 1>one entry point into GitOps. We deploy it

00:46:53.415 --> 00:46:55.095
<v Speaker 1>once, and then GitOps takes over.

00:46:56.460 --> 00:46:59.420
<v Speaker 1>So let's start with the podinfo

00:46:59.900 --> 00:47:01.340
<v Speaker 1>deployment this time.

00:47:02.619 --> 00:47:04.140
<v Speaker 1>Let's open the documentation

00:47:05.340 --> 00:47:07.340
<v Speaker 1>and figure out how to do that because

00:47:07.340 --> 00:47:09.180
<v Speaker 1>I cannot remember by myself.

00:47:09.845 --> 00:47:11.684
<v Speaker 1>I think I have it here already. So

00:47:11.684 --> 00:47:12.885
<v Speaker 1>kluctl.io

00:47:12.885 --> 00:47:15.125
<v Speaker 1>is the website having documentation

00:47:15.125 --> 00:47:18.085
<v Speaker 1>and examples and blog posts and tutorials.

00:47:19.204 --> 00:47:21.045
<v Speaker 1>And, of course, also the documentation for the

00:47:21.045 --> 00:47:21.765
<v Speaker 1>GitHub stuff.

00:47:23.190 --> 00:47:25.350
<v Speaker 1>So let's take this as an example

00:47:26.550 --> 00:47:27.350
<v Speaker 1>and

00:47:28.390 --> 00:47:29.510
<v Speaker 1>put it in here

00:47:29.990 --> 00:47:32.470
<v Speaker 1>and go through all the individual fields. So

00:47:32.470 --> 00:47:34.230
<v Speaker 1>this is pod info

00:47:34.885 --> 00:47:35.685
<v Speaker 1>interval.

00:47:35.685 --> 00:47:37.925
<v Speaker 1>Let's have a smaller one so that we

00:47:37.925 --> 00:47:39.365
<v Speaker 1>don't have to wait that long.

00:47:43.205 --> 00:47:44.165
<v Speaker 1>Let's

00:47:44.165 --> 00:47:47.045
<v Speaker 1>use this Git repository, but we use

00:47:47.730 --> 00:47:50.210
<v Speaker 1>the HTTP version, HTTPS,

00:47:50.210 --> 00:47:50.850
<v Speaker 1>I mean.

00:47:51.650 --> 00:47:52.450
<v Speaker 1>And

00:47:55.330 --> 00:47:58.369
<v Speaker 1>the path is an apps podinfo.

00:48:02.605 --> 00:48:05.244
<v Speaker 1>In most cases, we just have the path

00:48:05.244 --> 00:48:07.565
<v Speaker 1>submitted because we have the deployment on the

00:48:07.565 --> 00:48:08.765
<v Speaker 1>root level already.

00:48:09.244 --> 00:48:10.525
<v Speaker 1>Timeout

00:48:10.525 --> 00:48:11.244
<v Speaker 1>means

00:48:11.565 --> 00:48:12.444
<v Speaker 1>how

00:48:12.444 --> 00:48:13.165
<v Speaker 1>long

00:48:13.244 --> 00:48:15.800
<v Speaker 1>to wait until cancel everything. This is very

00:48:15.800 --> 00:48:16.360
<v Speaker 1>important

00:48:16.840 --> 00:48:19.160
<v Speaker 1>if you are waiting for stuff.

00:48:20.120 --> 00:48:21.960
<v Speaker 1>For example, the cluster bootstrap

00:48:21.960 --> 00:48:24.280
<v Speaker 1>would need a higher time out, if you

00:48:24.280 --> 00:48:25.480
<v Speaker 1>would like to do that.

00:48:26.040 --> 00:48:26.920
<v Speaker 1>Let's

00:48:26.920 --> 00:48:30.725
<v Speaker 1>deploy the target test first. Context is default,

00:48:31.205 --> 00:48:33.125
<v Speaker 1>which means deploy to the cluster

00:48:33.605 --> 00:48:35.365
<v Speaker 1>or the context that we are currently running

00:48:35.365 --> 00:48:36.005
<v Speaker 1>inside.

00:48:36.245 --> 00:48:37.525
<v Speaker 0>Is default the

00:48:38.085 --> 00:48:40.085
<v Speaker 0>default value? Can you just delete that lane?

00:48:41.460 --> 00:48:42.500
<v Speaker 1>No.

00:48:42.500 --> 00:48:44.580
<v Speaker 1>In that case, it will use the context

00:48:44.580 --> 00:48:46.180
<v Speaker 1>defined in the project.

00:48:48.020 --> 00:48:49.060
<v Speaker 1>In that case,

00:48:49.619 --> 00:48:51.700
<v Speaker 1>I think there is no context defined.

00:48:51.780 --> 00:48:53.700
<v Speaker 1>So let's assume here there would be a

00:48:53.700 --> 00:48:55.575
<v Speaker 1>context that would use this one, which will

00:48:55.575 --> 00:48:56.935
<v Speaker 1>not work because the

00:48:57.255 --> 00:48:59.575
<v Speaker 1>GitOps controller does not know about that context.

00:48:59.575 --> 00:49:00.855
<v Speaker 1>You would have to explicitly

00:49:00.855 --> 00:49:03.575
<v Speaker 1>give it a kubeconfig that has that context.

00:49:04.855 --> 00:49:06.055
<v Speaker 1>In most cases,

00:49:06.615 --> 00:49:08.695
<v Speaker 1>we don't do that. In most cases, we

00:49:08.695 --> 00:49:11.140
<v Speaker 1>just deploy to the default context, which means

00:49:11.140 --> 00:49:13.140
<v Speaker 1>into the cluster we are on right now.

00:49:13.380 --> 00:49:14.820
<v Speaker 1>We have one special case

00:49:15.300 --> 00:49:17.540
<v Speaker 1>where we have a cluster API

00:49:17.860 --> 00:49:19.300
<v Speaker 1>creating clusters

00:49:19.540 --> 00:49:22.420
<v Speaker 1>and then bootstrapping the workload cluster that is

00:49:22.420 --> 00:49:22.980
<v Speaker 1>being created

00:49:23.994 --> 00:49:25.835
<v Speaker 1>with the help of the kube configs that

00:49:25.835 --> 00:49:27.755
<v Speaker 1>is created by Cluster API.

00:49:27.915 --> 00:49:29.595
<v Speaker 1>So that's the case where, for example, we

00:49:29.595 --> 00:49:31.915
<v Speaker 1>would actually give it the real context name

00:49:32.075 --> 00:49:33.675
<v Speaker 1>and a kube config

00:49:35.770 --> 00:49:38.250
<v Speaker 1>Config with a secret ref and key and

00:49:38.250 --> 00:49:39.770
<v Speaker 1>so on. It's a little bit like what

00:49:39.770 --> 00:49:41.290
<v Speaker 1>you know from Kluctlx maybe

00:49:41.690 --> 00:49:44.170
<v Speaker 1>if you want to support multiple clusters.

00:49:45.850 --> 00:49:48.490
<v Speaker 1>Yeah. By default, pruning is disabled. Deletion is

00:49:48.490 --> 00:49:49.210
<v Speaker 1>disabled.

00:49:49.290 --> 00:49:50.970
<v Speaker 1>Let's ignore this one. I'm going to explain

00:49:50.970 --> 00:49:51.370
<v Speaker 1>that later.

00:49:52.835 --> 00:49:54.835
<v Speaker 1>But it makes sense to enable it. It's

00:49:54.835 --> 00:49:57.395
<v Speaker 1>disabled because it's really dangerous if you don't

00:49:57.395 --> 00:49:59.234
<v Speaker 1>know what you're doing. If you make a

00:49:59.234 --> 00:50:01.315
<v Speaker 1>mistake, you can easily just delete your whole

00:50:01.315 --> 00:50:04.115
<v Speaker 1>cluster. I think everyone who does GitOps

00:50:04.194 --> 00:50:06.194
<v Speaker 1>has made that experience in the past,

00:50:07.070 --> 00:50:08.190
<v Speaker 1>and it's painful.

00:50:08.510 --> 00:50:09.150
<v Speaker 1>So

00:50:09.630 --> 00:50:11.630
<v Speaker 1>default is to be on the safe side

00:50:11.630 --> 00:50:13.710
<v Speaker 1>and be very explicit about

00:50:14.190 --> 00:50:15.710
<v Speaker 1>these dangerous things.

00:50:17.390 --> 00:50:18.510
<v Speaker 1>And I think

00:50:19.550 --> 00:50:20.270
<v Speaker 1>that's it.

00:50:22.664 --> 00:50:24.744
<v Speaker 1>So you asked for the handoff. We could

00:50:24.744 --> 00:50:25.945
<v Speaker 1>do that. I could

00:50:26.585 --> 00:50:29.625
<v Speaker 1>put that into the podinfo deployment, for example,

00:50:30.025 --> 00:50:32.025
<v Speaker 1>and send to the handoff, but it would

00:50:32.025 --> 00:50:33.065
<v Speaker 1>be a little bit more

00:50:33.305 --> 00:50:34.265
<v Speaker 1>complicated.

00:50:34.984 --> 00:50:35.625
<v Speaker 1>So let's,

00:50:35.960 --> 00:50:37.640
<v Speaker 1>in this case, do it a little bit

00:50:37.640 --> 00:50:38.280
<v Speaker 1>easier.

00:50:41.640 --> 00:50:43.960
<v Speaker 1>Let's have its own deployment.

00:50:45.400 --> 00:50:47.480
<v Speaker 1>What I like to do is have a

00:50:47.480 --> 00:50:49.079
<v Speaker 1>directory structure, for example,

00:50:49.559 --> 00:50:49.799
<v Speaker 1>clusters.

00:50:50.865 --> 00:50:52.145
<v Speaker 1>Then we have

00:50:53.585 --> 00:50:54.945
<v Speaker 1>directories called

00:50:55.345 --> 00:50:57.265
<v Speaker 1>like, the clusters are named. And what you

00:50:57.265 --> 00:50:58.785
<v Speaker 1>can then do is

00:51:03.119 --> 00:51:04.080
<v Speaker 1>deployment.

00:51:04.240 --> 00:51:07.040
<v Speaker 1>So, we can do now something like

00:51:08.880 --> 00:51:09.760
<v Speaker 1>clusters

00:51:11.359 --> 00:51:12.160
<v Speaker 1>target.

00:51:12.160 --> 00:51:12.800
<v Speaker 1>Name.

00:51:14.720 --> 00:51:15.760
<v Speaker 1>And now,

00:51:16.640 --> 00:51:18.480
<v Speaker 1>we can create new clusters

00:51:21.595 --> 00:51:23.435
<v Speaker 1>based on directory names.

00:51:26.155 --> 00:51:27.835
<v Speaker 1>But we, of course, still need the targets,

00:51:27.835 --> 00:51:29.915
<v Speaker 1>so let's have a target named

00:51:30.474 --> 00:51:31.595
<v Speaker 1>kind, kind.

00:51:31.915 --> 00:51:33.595
<v Speaker 1>Oh, wait, let's

00:51:33.390 --> 00:51:35.470
<v Speaker 1>oh, yeah. That's what I did, actually.

00:51:36.990 --> 00:51:39.150
<v Speaker 1>We need a discriminator,

00:51:41.150 --> 00:51:42.270
<v Speaker 1>which is just

00:51:43.309 --> 00:51:46.109
<v Speaker 1>let's say GitOps. As the discriminator is used

00:51:46.109 --> 00:51:48.425
<v Speaker 1>to so everything that is created by Kluctl

00:51:48.425 --> 00:51:51.385
<v Speaker 1>gets labels attached that allow it to identify

00:51:51.385 --> 00:51:53.465
<v Speaker 1>everything that belongs to this deployment.

00:51:55.785 --> 00:51:57.465
<v Speaker 1>So actually, it should be

00:51:58.505 --> 00:51:59.785
<v Speaker 1>something like that.

00:52:00.345 --> 00:52:02.150
<v Speaker 1>So if you have multiple targets, for example,

00:52:02.150 --> 00:52:04.869
<v Speaker 1>you need different discriminators so that pruning actually

00:52:04.869 --> 00:52:07.109
<v Speaker 1>identifies the correct objects that need to be

00:52:07.109 --> 00:52:09.670
<v Speaker 1>pruned from a target or a deployment.

00:52:12.150 --> 00:52:14.710
<v Speaker 1>It's optional, it's recommended because without that, you

00:52:14.710 --> 00:52:15.430
<v Speaker 1>cannot do pruning.

00:52:18.055 --> 00:52:18.695
<v Speaker 1>So

00:52:20.375 --> 00:52:22.615
<v Speaker 1>let's put this into this one now.

00:52:23.655 --> 00:52:26.215
<v Speaker 1>And I think that's it. We now have

00:52:26.215 --> 00:52:26.855
<v Speaker 1>a

00:52:28.295 --> 00:52:30.535
<v Speaker 1>deployment that is responsible for

00:52:31.170 --> 00:52:32.610
<v Speaker 1>Clusidl deployments.

00:52:33.010 --> 00:52:34.530
<v Speaker 1>We can do the handoff here as well

00:52:34.530 --> 00:52:37.490
<v Speaker 1>now in a different way, but maybe let's

00:52:37.490 --> 00:52:38.369
<v Speaker 1>do that later.

00:52:38.609 --> 00:52:39.250
<v Speaker 1>So

00:52:41.250 --> 00:52:42.609
<v Speaker 1>let's go into GitOps.

00:52:45.075 --> 00:52:47.395
<v Speaker 1>We should now be able to

00:52:53.635 --> 00:52:56.035
<v Speaker 1>what is wrong? File is not a directory.

00:53:01.010 --> 00:53:03.010
<v Speaker 1>So what did I do wrong now?

00:53:12.465 --> 00:53:13.585
<v Speaker 1>Kluctl

00:53:13.585 --> 00:53:14.625
<v Speaker 1>dot Yamal.

00:53:15.345 --> 00:53:15.985
<v Speaker 1>Oh.

00:53:16.465 --> 00:53:18.225
<v Speaker 1>It's in the wrong directory. Right?

00:53:18.625 --> 00:53:20.705
<v Speaker 0>Oh, no. Looks like No. It's not it's

00:53:20.705 --> 00:53:21.985
<v Speaker 1>not the correct one.

00:53:22.865 --> 00:53:24.785
<v Speaker 1>So Kluctl dot Yamal.

00:53:25.345 --> 00:53:27.425
<v Speaker 1>K. This must be a very stupid mistake.

00:53:29.560 --> 00:53:30.600
<v Speaker 1>Oh, yeah.

00:53:31.720 --> 00:53:33.160
<v Speaker 0>Oh, your target name? No.

00:53:33.480 --> 00:53:35.160
<v Speaker 0>No. It's okay. I thought it was supposed

00:53:35.160 --> 00:53:36.520
<v Speaker 0>to be kind prod, but

00:53:37.400 --> 00:53:38.440
<v Speaker 0>maybe it's kind kind.

00:53:40.855 --> 00:53:42.695
<v Speaker 1>Yeah. In this case, we are referring

00:53:43.495 --> 00:53:44.535
<v Speaker 1>cluster names.

00:53:45.095 --> 00:53:47.015
<v Speaker 1>In this case, I just have this one.

00:53:47.735 --> 00:53:50.055
<v Speaker 1>Because we are managing GitOps on cluster level,

00:53:50.295 --> 00:53:52.615
<v Speaker 1>that cluster can deploy multiple targets and so

00:53:52.615 --> 00:53:53.740
<v Speaker 1>on. But it's

00:53:54.140 --> 00:53:56.540
<v Speaker 1>all up to you how you want to

00:53:56.860 --> 00:53:58.300
<v Speaker 1>manage this.

00:54:00.060 --> 00:54:01.180
<v Speaker 1>What

00:54:01.180 --> 00:54:02.380
<v Speaker 1>is wrong here?

00:54:04.460 --> 00:54:06.060
<v Speaker 1>Missing resource meter data.

00:54:09.455 --> 00:54:11.535
<v Speaker 0>Oh, wait. You've called the failed Kluctl dot

00:54:11.535 --> 00:54:13.935
<v Speaker 0>YAML, not dot Kluctl dot YAML.

00:54:17.695 --> 00:54:18.335
<v Speaker 1>Mhmm.

00:54:19.375 --> 00:54:20.575
<v Speaker 1>Okay. Did it start with a dot?

00:54:21.980 --> 00:54:24.540
<v Speaker 1>This one started with a dot. Yes. Alright.

00:54:24.540 --> 00:54:25.020
<v Speaker 0>Okay.

00:54:28.299 --> 00:54:29.900
<v Speaker 1>Target kind kind.

00:54:30.380 --> 00:54:31.580
<v Speaker 1>I don't get it.

00:54:32.859 --> 00:54:33.580
<v Speaker 1>Why

00:54:33.900 --> 00:54:35.180
<v Speaker 1>does this not work?

00:54:36.755 --> 00:54:37.715
<v Speaker 1>Let's

00:54:41.395 --> 00:54:42.275
<v Speaker 1>okay.

00:54:48.355 --> 00:54:49.955
<v Speaker 1>So it's already on the root level.

00:54:51.420 --> 00:54:53.500
<v Speaker 1>Dot Kluctl dot

00:54:54.380 --> 00:54:55.820
<v Speaker 1>Yamal.

00:54:56.940 --> 00:54:57.660
<v Speaker 1>Yeah.

00:55:02.460 --> 00:55:04.059
<v Speaker 1>This is really stupid right now.

00:55:05.505 --> 00:55:07.105
<v Speaker 1>Deployment.

00:55:07.184 --> 00:55:07.984
<v Speaker 1>What the

00:55:10.704 --> 00:55:11.505
<v Speaker 1>okay.

00:55:11.664 --> 00:55:14.305
<v Speaker 1>As assumed, it's a very stupid mistake.

00:55:17.630 --> 00:55:19.230
<v Speaker 0>Then if I do workday, because I didn't

00:55:19.230 --> 00:55:20.030
<v Speaker 0>spot it.

00:55:22.350 --> 00:55:25.550
<v Speaker 1>So, yeah, easy one. Oh, we already see

00:55:25.550 --> 00:55:27.470
<v Speaker 1>I made a mistake. I deployed to the

00:55:27.470 --> 00:55:29.950
<v Speaker 1>default namespace, which is usually not what you

00:55:29.950 --> 00:55:30.350
<v Speaker 1>want to do.

00:55:33.425 --> 00:55:34.705
<v Speaker 1>Let's use the

00:55:35.105 --> 00:55:35.905
<v Speaker 1>Kluctl

00:55:35.905 --> 00:55:37.105
<v Speaker 1>system namespace.

00:55:37.185 --> 00:55:38.225
<v Speaker 1>Very important,

00:55:39.265 --> 00:55:41.665
<v Speaker 1>the controller uses service accounts

00:55:42.145 --> 00:55:45.265
<v Speaker 1>for RBAC. So if you deploy

00:55:45.849 --> 00:55:47.770
<v Speaker 1>if you add a Clustered deployment to a

00:55:47.770 --> 00:55:49.849
<v Speaker 1>namespace, it will, by default, use the service

00:55:49.849 --> 00:55:51.370
<v Speaker 1>account of that namespace

00:55:51.690 --> 00:55:53.130
<v Speaker 1>to do the actual

00:55:53.450 --> 00:55:55.130
<v Speaker 1>deployment to the cluster.

00:55:55.290 --> 00:55:56.650
<v Speaker 1>You can override that

00:55:58.025 --> 00:56:00.025
<v Speaker 1>by giving it another service account name, but

00:56:00.025 --> 00:56:02.985
<v Speaker 1>usually, you don't need that. This means that

00:56:02.985 --> 00:56:05.225
<v Speaker 1>I cannot use the default namespace, for example,

00:56:05.225 --> 00:56:06.905
<v Speaker 1>because the service account doesn't even have the

00:56:06.905 --> 00:56:09.145
<v Speaker 1>necessary permissions to do the deployment.

00:56:09.545 --> 00:56:12.380
<v Speaker 1>I could introduce that by introducing a special

00:56:12.380 --> 00:56:15.420
<v Speaker 1>service account with all the necessary roles and

00:56:15.420 --> 00:56:17.980
<v Speaker 1>bindings and so on. But to make things

00:56:17.980 --> 00:56:20.140
<v Speaker 1>easier, I'm doing it this way now.

00:56:20.700 --> 00:56:22.220
<v Speaker 1>So now we see it's in the correct

00:56:22.220 --> 00:56:23.180
<v Speaker 1>namespace,

00:56:23.660 --> 00:56:25.020
<v Speaker 1>and let's go for it.

00:56:29.345 --> 00:56:31.585
<v Speaker 1>No error. That's always good.

00:56:32.145 --> 00:56:32.865
<v Speaker 1>And

00:56:35.025 --> 00:56:36.545
<v Speaker 1>something has happened.

00:56:36.705 --> 00:56:38.385
<v Speaker 1>That's not how I wanted to show it,

00:56:38.385 --> 00:56:40.785
<v Speaker 1>but we see that an ingress immediately appeared.

00:56:41.140 --> 00:56:43.780
<v Speaker 1>So on K9S, we should see the Kluctl

00:56:43.780 --> 00:56:45.140
<v Speaker 1>deployment object now.

00:56:45.780 --> 00:56:47.780
<v Speaker 1>And we see some information. We see the

00:56:47.780 --> 00:56:50.580
<v Speaker 1>name. Dry run is disabled. It was deployed

00:56:50.900 --> 00:56:53.220
<v Speaker 1>a few seconds ago. It's not ready.

00:56:53.825 --> 00:56:55.505
<v Speaker 1>It will only become ready when all the

00:56:55.505 --> 00:56:56.785
<v Speaker 1>deployments are green,

00:56:57.505 --> 00:56:59.905
<v Speaker 1>which will happen maybe in the next reconciliation

00:56:59.905 --> 00:57:02.465
<v Speaker 1>loop. So when one minute is over, it

00:57:02.465 --> 00:57:04.225
<v Speaker 1>will probably turn ready.

00:57:05.105 --> 00:57:06.945
<v Speaker 1>Yes, we already see it here. Validate has

00:57:06.945 --> 00:57:07.185
<v Speaker 1>failed.

00:57:08.880 --> 00:57:10.400
<v Speaker 1>No drift, which is good.

00:57:10.800 --> 00:57:13.200
<v Speaker 1>And let's see the same in the UI.

00:57:13.200 --> 00:57:15.040
<v Speaker 1>And what you see here now is

00:57:16.640 --> 00:57:18.640
<v Speaker 1>a new project appearing

00:57:19.040 --> 00:57:20.320
<v Speaker 1>with a target,

00:57:20.400 --> 00:57:21.520
<v Speaker 1>the podinfo test,

00:57:22.155 --> 00:57:23.515
<v Speaker 1>status information

00:57:23.995 --> 00:57:24.715
<v Speaker 1>and

00:57:24.955 --> 00:57:27.595
<v Speaker 1>the deployment that happened in the controller already.

00:57:28.075 --> 00:57:29.915
<v Speaker 1>And here, it's the same. We can see

00:57:29.915 --> 00:57:30.795
<v Speaker 1>the changes,

00:57:30.955 --> 00:57:33.035
<v Speaker 1>some new objects, nothing special.

00:57:33.435 --> 00:57:36.235
<v Speaker 1>And now, as mentioned, next reconciliation loop

00:57:36.390 --> 00:57:38.950
<v Speaker 1>turned its green because all the pods are

00:57:38.950 --> 00:57:39.670
<v Speaker 1>ready now.

00:57:40.789 --> 00:57:42.869
<v Speaker 1>We can do some stuff with that deployment

00:57:42.869 --> 00:57:46.070
<v Speaker 1>now. For example, we can force a reconciliation.

00:57:46.789 --> 00:57:48.630
<v Speaker 1>So it's happening before the one minute has

00:57:48.630 --> 00:57:50.789
<v Speaker 1>passed. We can tell it to validate now.

00:57:51.765 --> 00:57:54.165
<v Speaker 1>We can tell it to deploy now.

00:57:54.484 --> 00:57:56.724
<v Speaker 1>In this case, nothing will happen because nothing

00:57:56.724 --> 00:57:59.125
<v Speaker 1>has changed. It tells us result is empty,

00:57:59.125 --> 00:58:00.005
<v Speaker 1>nothing happens.

00:58:00.404 --> 00:58:02.805
<v Speaker 1>We can prune, but again, nothing will happen.

00:58:03.045 --> 00:58:05.365
<v Speaker 1>If we need to do some very strange

00:58:05.365 --> 00:58:06.005
<v Speaker 1>stuff

00:58:06.420 --> 00:58:08.740
<v Speaker 1>and we are afraid that GitOps will kill

00:58:08.740 --> 00:58:09.300
<v Speaker 1>us,

00:58:10.740 --> 00:58:13.140
<v Speaker 1>so for example, some refactorings in secret repositories,

00:58:13.140 --> 00:58:14.420
<v Speaker 1>we can always suspend

00:58:14.420 --> 00:58:16.740
<v Speaker 1>the deployments, so nothing bad will happen.

00:58:17.299 --> 00:58:18.740
<v Speaker 1>We can resume it again.

00:58:20.180 --> 00:58:21.140
<v Speaker 1>And

00:58:21.984 --> 00:58:24.705
<v Speaker 1>yeah, now let's actually do some

00:58:25.345 --> 00:58:26.145
<v Speaker 1>changes.

00:58:28.065 --> 00:58:28.705
<v Speaker 1>Actually,

00:58:30.625 --> 00:58:31.744
<v Speaker 1>let's

00:58:33.960 --> 00:58:35.400
<v Speaker 1>do something different.

00:58:35.640 --> 00:58:37.400
<v Speaker 1>So we have podinfo

00:58:37.400 --> 00:58:38.280
<v Speaker 1>test.

00:58:39.000 --> 00:58:41.240
<v Speaker 1>Let's also introduce podinfo

00:58:41.240 --> 00:58:42.599
<v Speaker 1>prod to the same cluster.

00:58:46.914 --> 00:58:49.635
<v Speaker 1>I'm not going to rename this one because

00:58:50.115 --> 00:58:52.674
<v Speaker 1>deleting and recreating this one means that due

00:58:52.674 --> 00:58:54.994
<v Speaker 1>to the delete being true, stuff is actually

00:58:54.994 --> 00:58:56.994
<v Speaker 1>getting deleted and recreated,

00:58:57.474 --> 00:58:59.395
<v Speaker 1>which in this case is probably Okay, but

00:58:59.395 --> 00:59:00.914
<v Speaker 1>let's not risk that.

00:59:02.000 --> 00:59:02.640
<v Speaker 1>So

00:59:03.359 --> 00:59:04.000
<v Speaker 1>prod,

00:59:05.280 --> 00:59:06.800
<v Speaker 1>and I think that's it.

00:59:08.400 --> 00:59:10.079
<v Speaker 1>It tells us when new object is being

00:59:10.079 --> 00:59:10.720
<v Speaker 1>created.

00:59:11.119 --> 00:59:11.840
<v Speaker 1>Yes.

00:59:12.799 --> 00:59:14.960
<v Speaker 1>And in the UI, we should see it

00:59:14.960 --> 00:59:15.599
<v Speaker 1>appear.

00:59:15.905 --> 00:59:18.625
<v Speaker 1>And we see another target, the prod target,

00:59:19.744 --> 00:59:22.385
<v Speaker 1>having some new objects and so on.

00:59:25.425 --> 00:59:26.465
<v Speaker 1>I

00:59:27.345 --> 00:59:28.464
<v Speaker 1>think we can

00:59:28.800 --> 00:59:30.560
<v Speaker 1>in this case, it maybe makes sense to

00:59:30.560 --> 00:59:32.000
<v Speaker 1>actually show the ingress.

00:59:32.080 --> 00:59:34.160
<v Speaker 1>So we have the test pod info

00:59:34.320 --> 00:59:36.720
<v Speaker 1>and the prod pod info, test and prod.

00:59:36.720 --> 00:59:37.600
<v Speaker 1>Let's

00:59:37.600 --> 00:59:38.720
<v Speaker 1>open this one.

00:59:39.120 --> 00:59:40.960
<v Speaker 1>I have to switch to HTTP because

00:59:42.000 --> 00:59:44.480
<v Speaker 1>and we have a green one, and

00:59:47.585 --> 00:59:49.025
<v Speaker 1>we have a blue one.

00:59:49.985 --> 00:59:52.465
<v Speaker 1>And this is simply because

00:59:53.185 --> 00:59:54.145
<v Speaker 1>we have

00:59:54.385 --> 00:59:57.185
<v Speaker 1>the same setup here, where we load

00:59:57.770 --> 01:00:00.570
<v Speaker 1>some configuration based on ENV type.

01:00:01.690 --> 01:00:02.730
<v Speaker 1>And here,

01:00:03.050 --> 01:00:05.770
<v Speaker 1>we just change the color depending on prod

01:00:05.770 --> 01:00:06.730
<v Speaker 1>or non prod.

01:00:07.369 --> 01:00:09.369
<v Speaker 1>So prod uses the default configuration and non

01:00:09.369 --> 01:00:11.130
<v Speaker 1>prod overrides the color to be green. So

01:00:11.130 --> 01:00:12.890
<v Speaker 1>default configuration is to be

01:00:13.325 --> 01:00:15.325
<v Speaker 1>blue, which comes through

01:00:16.605 --> 01:00:17.565
<v Speaker 1>this one.

01:00:19.645 --> 01:00:21.805
<v Speaker 1>What

01:00:21.805 --> 01:00:23.405
<v Speaker 1>else can we show now?

01:00:25.965 --> 01:00:28.045
<v Speaker 1>Yeah. Let's actually do some changes. So let's

01:00:28.045 --> 01:00:28.845
<v Speaker 1>say

01:00:34.320 --> 01:00:37.360
<v Speaker 1>let's say we want reds

01:00:37.360 --> 01:00:38.720
<v Speaker 1>on non prod,

01:00:38.880 --> 01:00:39.520
<v Speaker 1>and

01:00:40.400 --> 01:00:41.840
<v Speaker 1>we want

01:00:45.385 --> 01:00:48.345
<v Speaker 1>replicas on props to be different.

01:00:49.465 --> 01:00:51.625
<v Speaker 1>Okay, I made it a little bit unnecessary

01:00:51.865 --> 01:00:54.505
<v Speaker 1>complex here to showcase some stuff in the

01:00:54.505 --> 01:00:57.130
<v Speaker 1>past. We can also override that value through

01:00:57.130 --> 01:01:00.170
<v Speaker 1>the ARCs. As I described, the Kluctl deployment

01:01:00.170 --> 01:01:02.810
<v Speaker 1>is just an interface to the CLI. So

01:01:02.810 --> 01:01:04.570
<v Speaker 1>I can also just say

01:01:05.130 --> 01:01:07.050
<v Speaker 1>not an interface to the CLI, but it

01:01:07.050 --> 01:01:08.810
<v Speaker 1>has the same interface as the CLI.

01:01:09.625 --> 01:01:12.185
<v Speaker 1>So we know we can here give it

01:01:12.185 --> 01:01:13.545
<v Speaker 1>podinfo

01:01:14.825 --> 01:01:16.185
<v Speaker 1>replicas,

01:01:16.185 --> 01:01:18.585
<v Speaker 1>and let's say we want three replicas.

01:01:19.305 --> 01:01:21.305
<v Speaker 1>Let's hope this is not the default because

01:01:21.305 --> 01:01:23.145
<v Speaker 1>then nothing will happen. Yes, it's not the

01:01:23.145 --> 01:01:23.465
<v Speaker 1>default.

01:01:23.960 --> 01:01:25.480
<v Speaker 1>So what we did now is

01:01:25.880 --> 01:01:28.280
<v Speaker 1>we changed the non prod deployment.

01:01:28.599 --> 01:01:30.520
<v Speaker 1>We did not touch the prod deployment,

01:01:31.400 --> 01:01:34.359
<v Speaker 1>but we changed the GitOps object for prod,

01:01:34.359 --> 01:01:35.880
<v Speaker 1>which means it still has an effect.

01:01:37.434 --> 01:01:39.755
<v Speaker 1>Hope it's not too complicated what I'm doing

01:01:39.755 --> 01:01:40.315
<v Speaker 1>here.

01:01:41.595 --> 01:01:45.674
<v Speaker 1>Let's

01:01:45.674 --> 01:01:47.194
<v Speaker 1>just do a VIP commit.

01:01:52.650 --> 01:01:54.650
<v Speaker 1>And if you wait a minute now,

01:01:56.410 --> 01:01:58.810
<v Speaker 1>we should see that the WebUI

01:01:59.770 --> 01:02:01.369
<v Speaker 1>will update both,

01:02:01.369 --> 01:02:01.850
<v Speaker 1>actually.

01:02:02.250 --> 01:02:03.530
<v Speaker 1>But as I'm

01:02:03.770 --> 01:02:05.849
<v Speaker 1>I don't want to wait, I'm telling it

01:02:05.849 --> 01:02:06.809
<v Speaker 1>to reconcile now.

01:02:09.835 --> 01:02:11.355
<v Speaker 1>Nothing happens.

01:02:11.434 --> 01:02:12.875
<v Speaker 1>Oh, okay. No.

01:02:13.914 --> 01:02:14.555
<v Speaker 1>Okay.

01:02:15.275 --> 01:02:16.234
<v Speaker 1>No change.

01:02:18.075 --> 01:02:19.915
<v Speaker 1>Oh, actually, it didn't change.

01:02:20.315 --> 01:02:21.195
<v Speaker 1>No wait.

01:02:21.515 --> 01:02:23.035
<v Speaker 1>So

01:02:22.500 --> 01:02:24.100
<v Speaker 1>test has been deployed.

01:02:24.180 --> 01:02:26.820
<v Speaker 1>Something has changed. We can now verify that

01:02:27.060 --> 01:02:28.580
<v Speaker 1>it has become red.

01:02:29.380 --> 01:02:31.620
<v Speaker 1>It is already red. Funny.

01:02:33.060 --> 01:02:35.540
<v Speaker 1>So it reloaded itself, actually. Interesting.

01:02:37.255 --> 01:02:39.815
<v Speaker 1>This one, it's interesting that this one has

01:02:39.815 --> 01:02:41.015
<v Speaker 1>no effect now,

01:02:43.335 --> 01:02:44.135
<v Speaker 1>even though

01:02:44.775 --> 01:02:46.935
<v Speaker 1>it should. Let's force the deployment.

01:02:49.415 --> 01:02:50.455
<v Speaker 1>Didn't do anything.

01:02:54.260 --> 01:02:56.900
<v Speaker 1>Interesting. I might have missed something. So is

01:02:56.900 --> 01:02:58.660
<v Speaker 1>it really correct what I'm doing here?

01:02:58.980 --> 01:03:01.700
<v Speaker 1>So common setting says axe pod info dot

01:03:01.700 --> 01:03:02.420
<v Speaker 1>replicas.

01:03:04.785 --> 01:03:06.545
<v Speaker 1>Did actually no, I actually have to deploy

01:03:06.545 --> 01:03:08.065
<v Speaker 1>that, okay. So

01:03:08.944 --> 01:03:12.145
<v Speaker 1>I made a thinking around now. I assumed

01:03:12.145 --> 01:03:14.704
<v Speaker 1>that changing this would actually already have an

01:03:14.704 --> 01:03:16.465
<v Speaker 1>effect on the GitOps

01:03:16.625 --> 01:03:19.810
<v Speaker 1>deployment. But as the GitOps deployment itself are

01:03:19.810 --> 01:03:21.730
<v Speaker 1>not managed by GitOps right now, I could

01:03:21.730 --> 01:03:23.890
<v Speaker 1>introduce that, but maybe that's too much for

01:03:23.890 --> 01:03:24.370
<v Speaker 1>now.

01:03:25.490 --> 01:03:27.170
<v Speaker 1>Of course, nothing's happening. Yeah. Yeah. Yeah. Okay.

01:03:27.170 --> 01:03:29.490
<v Speaker 1>Yeah. I get it. I mean, you could

01:03:29.490 --> 01:03:31.170
<v Speaker 1>do it. That's what you asked with the

01:03:31.170 --> 01:03:33.730
<v Speaker 1>handoff. I can now act maybe let's do

01:03:33.730 --> 01:03:35.305
<v Speaker 1>it. Why not?

01:03:37.785 --> 01:03:39.545
<v Speaker 1>Let's have a GitOps YAML.

01:03:43.945 --> 01:03:44.825
<v Speaker 1>Call it

01:03:45.225 --> 01:03:45.945
<v Speaker 1>GitOps

01:03:48.260 --> 01:03:49.380
<v Speaker 1>GitOps

01:03:50.580 --> 01:03:51.540
<v Speaker 1>target is

01:03:51.700 --> 01:03:54.339
<v Speaker 1>kind to kind. Contact is default because we

01:03:54.339 --> 01:03:55.859
<v Speaker 1>are still deploying to the same cluster as

01:03:55.859 --> 01:03:57.220
<v Speaker 1>the controller is running on.

01:03:57.859 --> 01:03:59.700
<v Speaker 1>Let's do pruning and deletion. And

01:04:01.665 --> 01:04:03.985
<v Speaker 1>very important, I now really have to commit

01:04:03.985 --> 01:04:06.225
<v Speaker 1>and push it first, because if I deploy

01:04:06.225 --> 01:04:06.865
<v Speaker 1>that,

01:04:07.105 --> 01:04:09.745
<v Speaker 1>the controller will delete everything immediately because it's

01:04:09.745 --> 01:04:10.545
<v Speaker 1>not in Git.

01:04:12.225 --> 01:04:15.025
<v Speaker 1>That's the fun part about GitOps sometimes.

01:04:18.490 --> 01:04:19.530
<v Speaker 1>So now

01:04:19.530 --> 01:04:21.450
<v Speaker 1>I deploy it once

01:04:22.329 --> 01:04:24.650
<v Speaker 1>to activate the GitOps deployment. So we now

01:04:24.650 --> 01:04:26.490
<v Speaker 1>see there is a new Kluctl deployment being

01:04:26.490 --> 01:04:27.369
<v Speaker 1>the GitOps deployment.

01:04:28.464 --> 01:04:32.305
<v Speaker 1>The other one has changed now with the

01:04:32.305 --> 01:04:34.625
<v Speaker 1>thing that I was confused about.

01:04:35.345 --> 01:04:37.105
<v Speaker 1>And we should now see

01:04:39.345 --> 01:04:40.145
<v Speaker 1>so

01:04:40.145 --> 01:04:41.585
<v Speaker 1>prod has been deployed, nice.

01:04:42.880 --> 01:04:44.960
<v Speaker 1>Replicas has been changed, as expected.

01:04:45.599 --> 01:04:47.680
<v Speaker 1>Of course, we will not see anything different

01:04:47.680 --> 01:04:48.480
<v Speaker 1>here now.

01:04:49.440 --> 01:04:52.080
<v Speaker 1>And we should see the GitOps deployment.

01:04:52.080 --> 01:04:52.720
<v Speaker 1>Nice.

01:04:53.280 --> 01:04:55.520
<v Speaker 1>It tells us that there is a validation

01:04:55.520 --> 01:04:55.920
<v Speaker 1>error.

01:04:57.545 --> 01:04:58.425
<v Speaker 1>Ah, okay.

01:04:58.825 --> 01:05:01.785
<v Speaker 1>When it did the validation, the reconciliation was

01:05:01.785 --> 01:05:03.785
<v Speaker 1>not ready yet, not done yet for the

01:05:03.785 --> 01:05:04.425
<v Speaker 1>new

01:05:05.225 --> 01:05:07.385
<v Speaker 1>for one of the deployments, so it tells

01:05:07.385 --> 01:05:08.025
<v Speaker 1>us.

01:05:09.145 --> 01:05:10.985
<v Speaker 1>So it's red now. I need to drink

01:05:10.985 --> 01:05:11.225
<v Speaker 1>something.

01:05:12.860 --> 01:05:13.740
<v Speaker 0>Very cool.

01:05:16.540 --> 01:05:18.380
<v Speaker 1>So now, if I would have done what

01:05:18.380 --> 01:05:20.780
<v Speaker 1>I did before, it would actually happen. So

01:05:20.780 --> 01:05:22.780
<v Speaker 1>if I would change the pod info, Kluctl.com,

01:05:22.860 --> 01:05:23.260
<v Speaker 1>then

01:05:24.300 --> 01:05:25.580
<v Speaker 1>stuff would actually happen.

01:05:27.065 --> 01:05:29.385
<v Speaker 1>Not sure if I should showcase that now.

01:05:30.984 --> 01:05:33.704
<v Speaker 1>By the way, how long are we already

01:05:33.704 --> 01:05:34.505
<v Speaker 1>streaming?

01:05:34.505 --> 01:05:37.065
<v Speaker 1>Like, an hour? Yeah. An hour. What

01:05:38.025 --> 01:05:39.545
<v Speaker 1>do you think? How long should we continue?

01:05:41.680 --> 01:05:44.240
<v Speaker 1>I mean, I have change and then we'll

01:05:44.240 --> 01:05:45.040
<v Speaker 0>see what happens.

01:05:45.600 --> 01:05:47.680
<v Speaker 1>Okay. The one thing that's popped into my

01:05:47.680 --> 01:05:49.120
<v Speaker 0>head, right, is that,

01:05:49.440 --> 01:05:51.520
<v Speaker 0>you know, when it comes to the handoff,

01:05:51.600 --> 01:05:54.000
<v Speaker 0>I probably want as few pieces of YAML

01:05:54.000 --> 01:05:56.000
<v Speaker 0>as possible. Now I know that in

01:05:56.495 --> 01:05:59.375
<v Speaker 0>GetOps clusters can kind, we've got the GetOps.YAML,

01:05:59.375 --> 01:06:01.215
<v Speaker 0>the pod info prod, the pod info test.

01:06:01.215 --> 01:06:03.375
<v Speaker 0>But, I mean, I could just have one

01:06:03.375 --> 01:06:04.095
<v Speaker 0>global

01:06:05.055 --> 01:06:07.055
<v Speaker 0>deployment that does a whole bunch of includes.

01:06:07.055 --> 01:06:08.815
<v Speaker 0>Right? And then I don't have to Yeah.

01:06:09.215 --> 01:06:09.535
<v Speaker 1>Yeah.

01:06:11.270 --> 01:06:11.990
<v Speaker 1>So

01:06:13.349 --> 01:06:14.230
<v Speaker 1>for example,

01:06:14.710 --> 01:06:17.030
<v Speaker 1>we started with having a lot of Git

01:06:17.030 --> 01:06:20.069
<v Speaker 1>repositories being involved, doing hand off, hand off,

01:06:20.069 --> 01:06:21.030
<v Speaker 1>hand off, and

01:06:21.910 --> 01:06:23.590
<v Speaker 1>it can get really

01:06:24.390 --> 01:06:26.550
<v Speaker 1>hard to follow, let's put it this way.

01:06:27.305 --> 01:06:29.465
<v Speaker 1>We've just seen a very simple example. We

01:06:29.465 --> 01:06:31.385
<v Speaker 1>changed something and we're very confused that nothing

01:06:31.385 --> 01:06:32.025
<v Speaker 1>happens.

01:06:32.505 --> 01:06:35.145
<v Speaker 1>And this can become a lot worse if

01:06:35.145 --> 01:06:37.305
<v Speaker 1>too many Git repositories are involved

01:06:37.625 --> 01:06:40.265
<v Speaker 1>that, at the same time, are deployed through

01:06:40.265 --> 01:06:43.030
<v Speaker 1>Clusively Deployment Objects. So the other way is,

01:06:43.030 --> 01:06:44.390
<v Speaker 1>as you already mentioned,

01:06:44.390 --> 01:06:47.430
<v Speaker 1>just using git includes. So you have one

01:06:47.430 --> 01:06:48.470
<v Speaker 1>entry point,

01:06:48.869 --> 01:06:50.390
<v Speaker 1>and this one is doing everything.

01:06:51.670 --> 01:06:52.790
<v Speaker 1>But it all depends.

01:06:53.270 --> 01:06:56.165
<v Speaker 1>Sometimes deployments take so long that you actually

01:06:56.165 --> 01:06:58.165
<v Speaker 1>don't want to mix them with other stuff.

01:06:59.125 --> 01:07:01.845
<v Speaker 1>So it really depends on on your need.

01:07:01.925 --> 01:07:03.525
<v Speaker 0>Yeah. I guess it it depends where your

01:07:03.525 --> 01:07:05.285
<v Speaker 0>risk appetite is as well. Like, if you

01:07:05.285 --> 01:07:07.765
<v Speaker 0>just wanna automate everything and you'll lower it,

01:07:07.740 --> 01:07:09.660
<v Speaker 0>then sure have one. But maybe if you

01:07:09.660 --> 01:07:12.220
<v Speaker 0>wanna minimize the blast radius for errors and

01:07:12.220 --> 01:07:13.420
<v Speaker 0>having multiple

01:07:13.500 --> 01:07:14.300
<v Speaker 0>CRDs,

01:07:14.300 --> 01:07:18.060
<v Speaker 0>multiple deployments and isolating them to either get

01:07:18.060 --> 01:07:21.340
<v Speaker 0>repositories, CRDs, whatever is a better approach. My

01:07:21.340 --> 01:07:22.619
<v Speaker 0>risk adversity is

01:07:23.315 --> 01:07:24.914
<v Speaker 0>low. I don't care if I blow up

01:07:24.914 --> 01:07:26.835
<v Speaker 0>my production cluster, so I generally just go

01:07:26.835 --> 01:07:29.394
<v Speaker 0>for the was the minimal amount of Yamal

01:07:29.394 --> 01:07:31.795
<v Speaker 0>I need to approach. Yeah. This is cool.

01:07:31.795 --> 01:07:33.474
<v Speaker 0>Like, we've seen some really come up to

01:07:33.474 --> 01:07:35.634
<v Speaker 0>the project. The web UI is great. I

01:07:35.634 --> 01:07:36.275
<v Speaker 0>know you were

01:07:36.760 --> 01:07:38.840
<v Speaker 0>kind of self deprecating yourself and say this

01:07:38.840 --> 01:07:40.200
<v Speaker 0>is what happens when a developer does a

01:07:40.200 --> 01:07:42.200
<v Speaker 0>design or a UI, but to honest, look,

01:07:42.200 --> 01:07:44.600
<v Speaker 0>it's super functional. And it does does exactly

01:07:44.600 --> 01:07:45.960
<v Speaker 0>what it needs to do. It shows you

01:07:45.960 --> 01:07:47.640
<v Speaker 0>the changes and it gives you the ability

01:07:47.640 --> 01:07:50.685
<v Speaker 0>to interface with the controller for the revalidation,

01:07:50.685 --> 01:07:52.045
<v Speaker 0>for the reconciliation,

01:07:52.045 --> 01:07:54.045
<v Speaker 0>drift detection. Like, that is just perfect.

01:07:54.285 --> 01:07:56.125
<v Speaker 0>The controller itself is doing its job in

01:07:56.125 --> 01:07:58.525
<v Speaker 0>the background. Like, these are some wonderful updates

01:07:58.525 --> 01:08:01.325
<v Speaker 0>to an already pretty fantastic project. So I

01:08:01.325 --> 01:08:02.685
<v Speaker 0>I applaud you. Good work.

01:08:03.660 --> 01:08:04.380
<v Speaker 1>Thank you.

01:08:05.980 --> 01:08:07.420
<v Speaker 0>So I don't know if you have anything

01:08:07.420 --> 01:08:08.700
<v Speaker 0>else to show,

01:08:09.020 --> 01:08:10.859
<v Speaker 0>but maybe if you don't, you could just

01:08:10.859 --> 01:08:11.980
<v Speaker 0>tell us like,

01:08:12.540 --> 01:08:14.619
<v Speaker 0>what is what's next in your wish list

01:08:14.619 --> 01:08:16.300
<v Speaker 0>of ideas for click control? Where are you

01:08:16.300 --> 01:08:17.580
<v Speaker 0>going? What's going to be happening?

01:08:18.185 --> 01:08:19.625
<v Speaker 0>Yeah. Take it away.

01:08:20.825 --> 01:08:22.024
<v Speaker 1>So I

01:08:22.185 --> 01:08:22.824
<v Speaker 1>had

01:08:23.465 --> 01:08:25.304
<v Speaker 1>I planned to show more,

01:08:26.104 --> 01:08:27.224
<v Speaker 1>especially the

01:08:27.385 --> 01:08:30.745
<v Speaker 1>template controller, but this will take another thirty

01:08:30.745 --> 01:08:32.425
<v Speaker 1>minutes or so. Maybe that's already too much

01:08:32.425 --> 01:08:33.064
<v Speaker 1>for this session.

01:08:34.600 --> 01:08:36.760
<v Speaker 1>Maybe just a few words about that.

01:08:37.320 --> 01:08:39.720
<v Speaker 0>Yeah, sure. So in the ClueSlideal

01:08:40.200 --> 01:08:43.240
<v Speaker 1>ecosystem, there's also the template controller,

01:08:43.240 --> 01:08:44.440
<v Speaker 1>which is independent

01:08:44.440 --> 01:08:47.240
<v Speaker 1>from the ClueSlideal controller, so you can install

01:08:47.240 --> 01:08:50.335
<v Speaker 1>and run it on its own without any

01:08:50.335 --> 01:08:51.774
<v Speaker 1>dependencies into Kluctl.

01:08:52.335 --> 01:08:54.255
<v Speaker 1>And what it allows you is to take

01:08:54.255 --> 01:08:55.055
<v Speaker 1>arbitrary

01:08:55.055 --> 01:08:56.654
<v Speaker 0>on that page? Sorry.

01:08:57.375 --> 01:08:58.175
<v Speaker 1>Sorry?

01:08:58.175 --> 01:09:00.415
<v Speaker 0>Can you zoom in on that that YAML?

01:09:02.189 --> 01:09:05.309
<v Speaker 1>Do what? Zoom. Make it bigger. Zoom?

01:09:05.869 --> 01:09:06.589
<v Speaker 1>Sure.

01:09:07.149 --> 01:09:08.590
<v Speaker 1>If I figure out how to do that.

01:09:08.590 --> 01:09:09.469
<v Speaker 0>Command plus. Command

01:09:10.029 --> 01:09:13.069
<v Speaker 1>plus. Yes. Finally. Perfect. Thank you.

01:09:13.710 --> 01:09:14.109
<v Speaker 1>So,

01:09:15.245 --> 01:09:18.125
<v Speaker 1>yes, the idea is the object template takes

01:09:19.005 --> 01:09:20.925
<v Speaker 1>a matrix of input resources,

01:09:21.885 --> 01:09:23.645
<v Speaker 1>which is whatever you like, for example, a

01:09:23.645 --> 01:09:25.085
<v Speaker 1>config map or a secret

01:09:25.325 --> 01:09:27.645
<v Speaker 1>or a Clusiddial deployment or

01:09:27.725 --> 01:09:28.285
<v Speaker 1>a

01:09:28.570 --> 01:09:32.410
<v Speaker 1>Git projector or GitHub comment list, GitLab and

01:09:32.410 --> 01:09:33.050
<v Speaker 1>so on,

01:09:33.689 --> 01:09:34.250
<v Speaker 1>and

01:09:34.490 --> 01:09:36.810
<v Speaker 1>take a list of templates and then use

01:09:36.810 --> 01:09:40.170
<v Speaker 1>templating to generate an arbitrary set of other

01:09:40.170 --> 01:09:40.570
<v Speaker 1>objects.

01:09:42.285 --> 01:09:43.564
<v Speaker 1>It has multiple

01:09:43.885 --> 01:09:44.844
<v Speaker 1>use cases.

01:09:45.725 --> 01:09:48.364
<v Speaker 1>The original use case why I started that

01:09:48.364 --> 01:09:51.085
<v Speaker 1>was to have something like preview environments,

01:09:52.045 --> 01:09:53.965
<v Speaker 1>a little bit like what you know from

01:09:53.965 --> 01:09:56.284
<v Speaker 1>application sets from ArgoCity.

01:09:56.685 --> 01:09:56.925
<v Speaker 1>So,

01:09:57.820 --> 01:10:00.940
<v Speaker 1>for example, you have the git projector object,

01:10:01.580 --> 01:10:02.139
<v Speaker 1>which

01:10:04.780 --> 01:10:05.820
<v Speaker 1>internally

01:10:05.980 --> 01:10:08.380
<v Speaker 1>clones the git project and makes

01:10:08.699 --> 01:10:10.620
<v Speaker 1>parts of the repository

01:10:10.620 --> 01:10:11.179
<v Speaker 1>available

01:10:11.835 --> 01:10:14.074
<v Speaker 1>through the status of that

01:10:14.395 --> 01:10:15.275
<v Speaker 1>resource.

01:10:15.755 --> 01:10:17.434
<v Speaker 1>So if you apply that,

01:10:18.955 --> 01:10:21.915
<v Speaker 1>the resource will get the status populated with,

01:10:21.915 --> 01:10:23.835
<v Speaker 1>for example, a list of branches, a list

01:10:23.835 --> 01:10:26.475
<v Speaker 1>of file contents, whatever you configure it.

01:10:27.120 --> 01:10:28.880
<v Speaker 1>Based on that, you can use that as

01:10:28.880 --> 01:10:31.360
<v Speaker 1>the input into the object template

01:10:33.600 --> 01:10:36.240
<v Speaker 1>and tell it to generate, for example, Clusidl

01:10:36.240 --> 01:10:37.600
<v Speaker 1>deployment objects

01:10:37.600 --> 01:10:39.360
<v Speaker 1>based on the list of branches that you

01:10:39.360 --> 01:10:40.720
<v Speaker 1>found in some repository.

01:10:41.445 --> 01:10:44.885
<v Speaker 1>This basically allows you to do preview environments

01:10:45.844 --> 01:10:47.364
<v Speaker 1>depending on the

01:10:47.844 --> 01:10:48.645
<v Speaker 1>repositories

01:10:48.645 --> 01:10:50.005
<v Speaker 1>branches.

01:10:50.405 --> 01:10:51.604
<v Speaker 1>You can do the same,

01:10:52.724 --> 01:10:54.485
<v Speaker 1>but based on GitHub

01:10:56.940 --> 01:11:00.300
<v Speaker 1>pull requests. So instead of reading branches in

01:11:00.300 --> 01:11:02.140
<v Speaker 1>Git repositories, you can also tell it to

01:11:02.140 --> 01:11:03.659
<v Speaker 1>use the GitHub API

01:11:03.980 --> 01:11:04.780
<v Speaker 1>to

01:11:04.940 --> 01:11:07.099
<v Speaker 1>get a list of pull requests

01:11:07.180 --> 01:11:09.099
<v Speaker 1>and, based on that, create

01:11:09.980 --> 01:11:10.860
<v Speaker 1>preview environments.

01:11:11.925 --> 01:11:13.284
<v Speaker 1>Then you can use

01:11:14.005 --> 01:11:18.085
<v Speaker 1>GitHub comment objects to actually post some comments

01:11:18.085 --> 01:11:20.645
<v Speaker 1>into the pull requests that you just listed

01:11:20.645 --> 01:11:22.165
<v Speaker 1>and templated and so on.

01:11:25.050 --> 01:11:27.050
<v Speaker 1>Yes, the idea is that you can build

01:11:27.050 --> 01:11:27.929
<v Speaker 1>up your

01:11:28.330 --> 01:11:29.689
<v Speaker 1>whatever you

01:11:29.850 --> 01:11:33.449
<v Speaker 1>need in regard to dynamic creation of environments.

01:11:33.610 --> 01:11:35.530
<v Speaker 1>So this is one use case.

01:11:35.850 --> 01:11:37.850
<v Speaker 1>It's a pretty complicated use case.

01:11:39.175 --> 01:11:40.534
<v Speaker 1>It needs a lot of

01:11:41.094 --> 01:11:43.175
<v Speaker 1>YAML to set it up, a lot of

01:11:43.175 --> 01:11:44.215
<v Speaker 1>these thingies.

01:11:44.534 --> 01:11:46.695
<v Speaker 1>But in the future, I hope I can

01:11:46.695 --> 01:11:50.295
<v Speaker 1>provide some good example starting points how to

01:11:50.375 --> 01:11:51.175
<v Speaker 1>implement

01:11:51.255 --> 01:11:54.240
<v Speaker 1>preview environments with that. Another use case is

01:11:54.240 --> 01:11:55.120
<v Speaker 1>transformation

01:11:55.120 --> 01:11:57.840
<v Speaker 1>of secrets or other types of objects. For

01:11:57.840 --> 01:11:58.480
<v Speaker 1>example,

01:11:59.040 --> 01:12:01.840
<v Speaker 1>if you have some operator that creates a

01:12:01.840 --> 01:12:04.720
<v Speaker 1>Postgres password and username, you might need

01:12:05.095 --> 01:12:07.255
<v Speaker 1>that information somewhere else

01:12:08.135 --> 01:12:10.295
<v Speaker 1>in a JDBC

01:12:10.295 --> 01:12:11.574
<v Speaker 1>URL, for example.

01:12:13.175 --> 01:12:14.855
<v Speaker 1>So you can use that as an input

01:12:14.855 --> 01:12:17.495
<v Speaker 1>and create another secret that has a different

01:12:17.495 --> 01:12:18.535
<v Speaker 1>form of that secret,

01:12:19.739 --> 01:12:21.260
<v Speaker 1>which is very helpful,

01:12:21.420 --> 01:12:23.419
<v Speaker 1>especially for cross plane stuff

01:12:23.659 --> 01:12:25.899
<v Speaker 1>or the AWS

01:12:26.219 --> 01:12:28.379
<v Speaker 1>Kubernetes operators and so on.

01:12:30.699 --> 01:12:33.715
<v Speaker 1>Wow. So, yeah, that's a sneak preview. Maybe

01:12:33.715 --> 01:12:36.035
<v Speaker 1>we can, if if you're interested, have a

01:12:36.035 --> 01:12:38.034
<v Speaker 1>session just for that topic.

01:12:38.675 --> 01:12:41.715
<v Speaker 0>Yeah. Definitely. I think what would be really

01:12:41.715 --> 01:12:43.555
<v Speaker 0>interesting for us to do is obviously just

01:12:43.555 --> 01:12:45.500
<v Speaker 0>to get another session where we show the

01:12:45.500 --> 01:12:47.420
<v Speaker 0>preview environment based on a new pull request

01:12:47.420 --> 01:12:49.180
<v Speaker 0>and the comment and stuff like that. Yep.

01:12:49.180 --> 01:12:51.180
<v Speaker 0>But then, you know, the first time that

01:12:51.180 --> 01:12:52.540
<v Speaker 0>popped into my head as soon as I've

01:12:52.540 --> 01:12:54.300
<v Speaker 0>seen those those list of kind of I

01:12:54.300 --> 01:12:55.340
<v Speaker 0>don't know if you got them plug ins

01:12:55.340 --> 01:12:56.220
<v Speaker 0>or extensions,

01:12:56.460 --> 01:12:58.775
<v Speaker 0>but like how difficult would it be for

01:12:58.775 --> 01:13:00.775
<v Speaker 0>me to integrate that with another source? Like,

01:13:00.775 --> 01:13:02.935
<v Speaker 0>could I build preview environments based on tweaks?

01:13:02.935 --> 01:13:04.695
<v Speaker 0>Like, I think we could have some fun

01:13:04.695 --> 01:13:06.695
<v Speaker 0>than random shit there.

01:13:07.574 --> 01:13:08.135
<v Speaker 1>Definitely.

01:13:08.775 --> 01:13:10.775
<v Speaker 1>The idea is really the object

01:13:11.310 --> 01:13:12.269
<v Speaker 1>template,

01:13:12.349 --> 01:13:13.149
<v Speaker 1>so the

01:13:13.630 --> 01:13:17.229
<v Speaker 1>most important resource that this controller provides,

01:13:17.310 --> 01:13:19.469
<v Speaker 1>does not care what it loads.

01:13:19.710 --> 01:13:22.190
<v Speaker 1>It really here, it can load everything. So

01:13:22.190 --> 01:13:25.469
<v Speaker 1>if you come up with a controller operator

01:13:25.469 --> 01:13:26.429
<v Speaker 1>that loads tweets,

01:13:26.915 --> 01:13:29.155
<v Speaker 1>you can use the result of that here

01:13:30.035 --> 01:13:32.355
<v Speaker 1>without any the template controller.

01:13:33.795 --> 01:13:35.555
<v Speaker 0>Okay. I'm on it. I'm gonna make that

01:13:35.555 --> 01:13:36.114
<v Speaker 0>happen.

01:13:36.915 --> 01:13:37.554
<v Speaker 1>Nice.

01:13:38.835 --> 01:13:39.715
<v Speaker 1>Alright. Cool.

01:13:40.580 --> 01:13:41.300
<v Speaker 1>Okay.

01:13:41.460 --> 01:13:43.060
<v Speaker 0>Let's pop back over.

01:13:44.020 --> 01:13:45.139
<v Speaker 0>Mhmm. Yeah.

01:13:46.580 --> 01:13:48.980
<v Speaker 0>Alright. We covered a lot there. I had

01:13:48.980 --> 01:13:50.580
<v Speaker 0>no idea, but that that last set of

01:13:50.580 --> 01:13:52.740
<v Speaker 0>features either. That's that's wild. I can't believe

01:13:52.740 --> 01:13:54.635
<v Speaker 0>all that already exists. And it's only been

01:13:54.635 --> 01:13:56.715
<v Speaker 0>twelve months since we lasted the the demo.

01:13:56.715 --> 01:14:00.075
<v Speaker 0>So again, great work on this project and

01:14:00.155 --> 01:14:01.995
<v Speaker 0>it's it's just nice to see a bit

01:14:01.995 --> 01:14:03.195
<v Speaker 0>of alternatives,

01:14:03.195 --> 01:14:05.035
<v Speaker 0>but not just alternatives to this to this

01:14:05.035 --> 01:14:08.315
<v Speaker 0>call, but super powerful and flexible alternatives

01:14:08.315 --> 01:14:10.179
<v Speaker 0>just to score. So cool.

01:14:10.660 --> 01:14:11.219
<v Speaker 0>Alright.

01:14:12.660 --> 01:14:15.380
<v Speaker 0>Is that coming soon? Is that already available

01:14:15.380 --> 01:14:17.540
<v Speaker 0>for people to play with? And what what

01:14:17.540 --> 01:14:19.140
<v Speaker 0>else have you got on the the pipeline

01:14:19.140 --> 01:14:20.100
<v Speaker 0>for Kluctl?

01:14:20.900 --> 01:14:22.900
<v Speaker 1>So all this is already available. It's all

01:14:22.900 --> 01:14:23.940
<v Speaker 1>released, all usable.

01:14:25.415 --> 01:14:28.614
<v Speaker 1>All Kluctlr related is, I think, quite stable,

01:14:28.614 --> 01:14:31.094
<v Speaker 1>so I'm confident to use it in production.

01:14:31.575 --> 01:14:32.934
<v Speaker 1>Template controller,

01:14:33.415 --> 01:14:36.135
<v Speaker 1>yes, you can use it, but it's still

01:14:36.135 --> 01:14:39.175
<v Speaker 1>alpha, I would say, but still already

01:14:39.175 --> 01:14:39.895
<v Speaker 1>very powerful.

01:14:41.810 --> 01:14:43.409
<v Speaker 1>So what's in the pipeline?

01:14:43.490 --> 01:14:45.810
<v Speaker 1>The WebUI needs a lot of improvements.

01:14:46.050 --> 01:14:47.730
<v Speaker 1>The problem is I'm

01:14:47.730 --> 01:14:50.930
<v Speaker 1>not a UI designer. I'm also not good

01:14:50.930 --> 01:14:51.970
<v Speaker 1>at HTML,

01:14:51.970 --> 01:14:54.050
<v Speaker 1>CSS, JavaScript and all that.

01:14:54.370 --> 01:14:57.490
<v Speaker 1>I can do the most basic stuff, and

01:14:56.745 --> 01:14:57.625
<v Speaker 1>it was

01:14:58.025 --> 01:15:00.665
<v Speaker 1>with the help of some freelancers that I

01:15:02.425 --> 01:15:04.824
<v Speaker 1>hired. It was enough to implement

01:15:05.225 --> 01:15:06.344
<v Speaker 1>the WebUI.

01:15:07.865 --> 01:15:10.425
<v Speaker 1>But there's a lot that I wish that

01:15:10.425 --> 01:15:12.025
<v Speaker 1>I could finish in the next months.

01:15:16.000 --> 01:15:18.240
<v Speaker 1>For example, multi cluster support so that you

01:15:18.240 --> 01:15:20.480
<v Speaker 1>have one single instance of the WebUI managing

01:15:20.480 --> 01:15:21.680
<v Speaker 1>and visualizing

01:15:22.160 --> 01:15:23.440
<v Speaker 1>all your clusters.

01:15:24.480 --> 01:15:25.120
<v Speaker 1>That's something.

01:15:27.095 --> 01:15:27.975
<v Speaker 1>What else?

01:15:29.495 --> 01:15:31.895
<v Speaker 1>Yeah. Most of the stuff, Kluctlr related, is

01:15:31.895 --> 01:15:33.895
<v Speaker 1>actually just details,

01:15:33.975 --> 01:15:35.895
<v Speaker 1>like small features that need to be added.

01:15:35.895 --> 01:15:39.255
<v Speaker 1>I know you are asking for OCI integration

01:15:39.255 --> 01:15:41.655
<v Speaker 1>since quite some time, so that's maybe something

01:15:41.655 --> 01:15:43.095
<v Speaker 1>I should

01:15:44.030 --> 01:15:45.469
<v Speaker 1>actually tackle,

01:15:45.470 --> 01:15:47.230
<v Speaker 1>and it's not so complicated. I just need

01:15:47.230 --> 01:15:48.429
<v Speaker 1>to find time for that.

01:15:49.470 --> 01:15:51.310
<v Speaker 1>And it's Yeah. Just to context

01:15:52.510 --> 01:15:54.430
<v Speaker 1>Sorry. Hey. Just to add context to that.

01:15:54.430 --> 01:15:55.630
<v Speaker 0>Like, the reason that's important

01:15:56.135 --> 01:15:58.055
<v Speaker 0>to me is that I'm a big I

01:15:58.055 --> 01:16:00.135
<v Speaker 0>I use a lot of mono repositories.

01:16:00.135 --> 01:16:03.175
<v Speaker 0>Mhmm. And I like my Kubernetes YAML

01:16:03.255 --> 01:16:05.655
<v Speaker 0>to live as close to the application itself,

01:16:05.655 --> 01:16:07.335
<v Speaker 0>which means I have a mono repository

01:16:07.495 --> 01:16:09.975
<v Speaker 0>with dozens to hundreds of services all with

01:16:09.975 --> 01:16:11.015
<v Speaker 0>their own YAML. And

01:16:11.840 --> 01:16:14.480
<v Speaker 0>sure way that I could have Kluctl pull

01:16:14.480 --> 01:16:16.239
<v Speaker 0>in the entire model repository. And I'm sure

01:16:16.239 --> 01:16:18.159
<v Speaker 0>it does some great caching and only fetches

01:16:18.159 --> 01:16:20.000
<v Speaker 0>the latest version and stuff like that. Because

01:16:20.000 --> 01:16:22.239
<v Speaker 0>I just don't want all that code hanging

01:16:22.239 --> 01:16:23.760
<v Speaker 0>about in the cluster even though it's all

01:16:23.760 --> 01:16:25.039
<v Speaker 0>public either.

01:16:25.280 --> 01:16:27.039
<v Speaker 0>I think OCI is a great way of

01:16:27.039 --> 01:16:29.975
<v Speaker 0>being able to keep the developer workflow happy

01:16:29.975 --> 01:16:33.014
<v Speaker 0>and still satisfy the machines at runtime. So,

01:16:33.014 --> 01:16:35.014
<v Speaker 0>yeah, I would love to see that feature.

01:16:36.455 --> 01:16:37.255
<v Speaker 1>I know.

01:16:38.695 --> 01:16:39.574
<v Speaker 1>I said it's

01:16:40.240 --> 01:16:42.080
<v Speaker 1>in my head, I have it kind of

01:16:42.080 --> 01:16:44.560
<v Speaker 1>solved. It's really it's not complicated.

01:16:45.440 --> 01:16:48.320
<v Speaker 1>But the time. I mean Of course. Currently,

01:16:48.400 --> 01:16:50.240
<v Speaker 1>the state is still, when it comes to

01:16:50.240 --> 01:16:53.280
<v Speaker 1>developing and maintaining the project, it's mostly me.

01:16:54.285 --> 01:16:57.645
<v Speaker 1>Some it gets some checks. Some people are

01:16:57.645 --> 01:16:59.485
<v Speaker 1>showing up and implementing

01:16:59.965 --> 01:17:02.364
<v Speaker 1>smaller features. I hope it gets more. I

01:17:02.364 --> 01:17:03.244
<v Speaker 1>need support

01:17:03.565 --> 01:17:05.725
<v Speaker 1>as much as I can get contributors.

01:17:08.000 --> 01:17:10.640
<v Speaker 1>So, yeah, time is the limiting factor.

01:17:12.960 --> 01:17:15.120
<v Speaker 1>It would be just me deciding that I

01:17:15.120 --> 01:17:17.360
<v Speaker 1>would just work on Clue CDL. But

01:17:19.005 --> 01:17:21.245
<v Speaker 0>Well, hopefully, the people that tune in to

01:17:21.245 --> 01:17:23.245
<v Speaker 0>the previous episodes on this episode, their interest

01:17:23.245 --> 01:17:25.245
<v Speaker 0>has peaked. They can start to adopt the

01:17:25.245 --> 01:17:27.485
<v Speaker 0>control within their teams or organization,

01:17:27.565 --> 01:17:30.205
<v Speaker 0>and of course, contribute back whenever possible. So

01:17:30.205 --> 01:17:32.285
<v Speaker 0>definitely get involved and check out the GitHub

01:17:32.285 --> 01:17:32.765
<v Speaker 0>repository.

01:17:33.860 --> 01:17:35.780
<v Speaker 0>Is there anything else you would like to

01:17:35.780 --> 01:17:37.700
<v Speaker 0>share with us before we wrap up today's

01:17:37.700 --> 01:17:38.179
<v Speaker 0>session?

01:17:39.300 --> 01:17:41.940
<v Speaker 1>Can you repeat? Is there anything else you

01:17:41.940 --> 01:17:43.460
<v Speaker 0>would like to say, share?

01:17:44.180 --> 01:17:46.659
<v Speaker 0>I don't know. Before we before before

01:17:47.380 --> 01:17:48.100
<v Speaker 0>we say goodbye.

01:17:49.745 --> 01:17:51.985
<v Speaker 1>I think I've said said all.

01:17:52.465 --> 01:17:55.745
<v Speaker 1>Alright. So thanks for having me again. Thanks

01:17:55.745 --> 01:17:56.545
<v Speaker 1>for listening.

01:17:56.945 --> 01:17:59.185
<v Speaker 0>I know people get out. Definitely my

01:17:59.745 --> 01:18:01.825
<v Speaker 0>pleasure, and I hope that everyone else that

01:18:01.825 --> 01:18:03.830
<v Speaker 0>watches this is excited by the project as

01:18:03.830 --> 01:18:06.630
<v Speaker 0>I am. Some fantastic updates, and I can't

01:18:06.630 --> 01:18:09.270
<v Speaker 0>wait to do another episode and whenever that's

01:18:09.270 --> 01:18:10.870
<v Speaker 0>gonna be. So we'll we'll work that out

01:18:10.870 --> 01:18:12.870
<v Speaker 0>on a Discord. But Yep. Thank you for

01:18:12.870 --> 01:18:15.030
<v Speaker 0>joining me. Thank you for everyone that's watching.

01:18:15.030 --> 01:18:17.830
<v Speaker 0>We'll be back again soon, and have a

01:18:17.830 --> 01:18:18.230
<v Speaker 0>great day.

01:18:19.025 --> 01:18:19.745
<v Speaker 0>Thanks.

01:18:20.225 --> 01:18:20.705
<v Speaker 1>Bye bye.
