WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 48bf0561-c372-47cc-8c3e-c0d93cb07f4d
Created: 2025-04-29T21:45:46.244Z
Duration: 2710.0225
Channels: 1

00:01:24.090 --> 00:01:24.969
<v Speaker 0>Hello,

00:01:24.969 --> 00:01:27.610
<v Speaker 0>and welcome to today's episode of Rawkode live.

00:01:27.610 --> 00:01:29.210
<v Speaker 0>My name is David Mackay,

00:01:29.289 --> 00:01:32.009
<v Speaker 0>also known as Rawkode across the Internet.

00:01:32.090 --> 00:01:34.090
<v Speaker 0>Today, I am very happy to be joined

00:01:34.090 --> 00:01:34.969
<v Speaker 0>by

00:01:35.525 --> 00:01:38.645
<v Speaker 0>a cloud native ambassador and advocate for the

00:01:38.645 --> 00:01:40.085
<v Speaker 0>Cloud Native Computing Foundation.

00:01:40.325 --> 00:01:41.845
<v Speaker 0>Hello, Ihor. How are you?

00:01:43.365 --> 00:01:45.845
<v Speaker 1>I did. Doing great. Thank you for inviting

00:01:45.845 --> 00:01:47.365
<v Speaker 1>me. Really excited to be here.

00:01:48.540 --> 00:01:49.979
<v Speaker 0>Yeah. It's gonna be it's gonna be really

00:01:49.979 --> 00:01:51.420
<v Speaker 0>good. I think this is one of the

00:01:51.420 --> 00:01:54.460
<v Speaker 0>most important episodes that I've done today. Like,

00:01:54.540 --> 00:01:56.380
<v Speaker 0>normally, it's the hands on and playing with

00:01:56.380 --> 00:01:58.700
<v Speaker 0>our technology. But today, we're actually going to

00:01:58.700 --> 00:02:00.060
<v Speaker 0>tackle some of the more

00:02:00.715 --> 00:02:02.954
<v Speaker 0>meta questions around what is cloud native and

00:02:02.954 --> 00:02:04.475
<v Speaker 0>how to adopt cloud native and all of

00:02:04.475 --> 00:02:06.795
<v Speaker 0>this stuff that you know, people either read

00:02:06.795 --> 00:02:09.114
<v Speaker 0>about online or consume from talks at conferences.

00:02:09.114 --> 00:02:10.634
<v Speaker 0>But sometimes it's just nice to sit down

00:02:10.634 --> 00:02:12.875
<v Speaker 0>and get really specific and and and help

00:02:12.875 --> 00:02:14.155
<v Speaker 0>break down a few of the barriers to

00:02:14.155 --> 00:02:16.890
<v Speaker 0>cloud native adoption, which is why I'm so

00:02:16.890 --> 00:02:18.650
<v Speaker 0>excited for today's episode. I think it's gonna

00:02:18.650 --> 00:02:19.290
<v Speaker 0>be great.

00:02:19.610 --> 00:02:21.290
<v Speaker 1>Of course. I'll try it.

00:02:22.010 --> 00:02:23.450
<v Speaker 0>With that in mind, what I would suggest

00:02:23.450 --> 00:02:25.770
<v Speaker 0>to anyone watching live is that we really

00:02:25.770 --> 00:02:28.490
<v Speaker 0>do want participation with today's episode. So if

00:02:28.490 --> 00:02:30.010
<v Speaker 0>you have a question that you would like

00:02:30.010 --> 00:02:31.974
<v Speaker 0>us to answer and it could be anything

00:02:31.974 --> 00:02:33.974
<v Speaker 0>cloud native related, we'll do our best to

00:02:33.974 --> 00:02:36.135
<v Speaker 0>tackle that. The way to do that is

00:02:36.135 --> 00:02:38.535
<v Speaker 0>use the comment system on YouTube

00:02:38.775 --> 00:02:41.174
<v Speaker 0>or you can tweet either of us and

00:02:41.174 --> 00:02:42.534
<v Speaker 0>we'll do our best to bring that into

00:02:42.534 --> 00:02:43.254
<v Speaker 0>today's episode.

00:02:43.780 --> 00:02:45.940
<v Speaker 0>We do have a collection of questions that

00:02:45.940 --> 00:02:48.580
<v Speaker 0>either I, Ehore or people from our Discord

00:02:48.580 --> 00:02:50.980
<v Speaker 0>community or Twitter have submitted previously. So we're

00:02:50.980 --> 00:02:52.820
<v Speaker 0>gonna start with a few of those and

00:02:52.820 --> 00:02:54.100
<v Speaker 0>anything that you want us to drill down

00:02:54.100 --> 00:02:56.500
<v Speaker 0>onto, please do not be shy. Get those

00:02:56.500 --> 00:02:57.300
<v Speaker 0>questions into us.

00:02:58.735 --> 00:02:59.375
<v Speaker 0>So

00:02:59.614 --> 00:03:02.175
<v Speaker 0>let's start with a little bit of conversation

00:03:02.175 --> 00:03:03.215
<v Speaker 0>around you.

00:03:03.935 --> 00:03:06.095
<v Speaker 0>You are a developer advocate for the cloud

00:03:06.095 --> 00:03:07.694
<v Speaker 0>native computing foundation.

00:03:07.694 --> 00:03:09.615
<v Speaker 0>This must make you the foremost

00:03:10.095 --> 00:03:13.190
<v Speaker 0>authoritative answer on what is cloud native. Would

00:03:13.190 --> 00:03:14.550
<v Speaker 0>you would you agree with that?

00:03:15.430 --> 00:03:15.990
<v Speaker 1>Yeah.

00:03:16.950 --> 00:03:19.510
<v Speaker 1>Yes. So the the question about what is

00:03:19.510 --> 00:03:21.030
<v Speaker 1>cloud native is probably

00:03:21.510 --> 00:03:23.430
<v Speaker 1>the most one of the most simplest and

00:03:23.430 --> 00:03:26.230
<v Speaker 1>the one most complicated questions in the technology

00:03:26.230 --> 00:03:29.325
<v Speaker 1>world. So it may take a few hours

00:03:29.325 --> 00:03:31.725
<v Speaker 1>for us to discuss everything in details.

00:03:32.765 --> 00:03:33.805
<v Speaker 0>Alright. Well,

00:03:34.125 --> 00:03:36.364
<v Speaker 0>we can maybe we'll we'll go over the

00:03:36.444 --> 00:03:38.685
<v Speaker 0>let's say, with the abridged version, I think.

00:03:38.685 --> 00:03:40.765
<v Speaker 0>So, I mean, is it safe to say

00:03:40.765 --> 00:03:43.590
<v Speaker 0>that that your job, your role is to

00:03:43.590 --> 00:03:44.070
<v Speaker 0>help

00:03:44.629 --> 00:03:45.990
<v Speaker 0>people and promote

00:03:46.069 --> 00:03:47.989
<v Speaker 0>cloud native? Is is that what a developer

00:03:47.989 --> 00:03:50.630
<v Speaker 0>advocate at the CNCF is is responsible for?

00:03:50.870 --> 00:03:52.070
<v Speaker 1>Yeah. So

00:03:52.310 --> 00:03:55.910
<v Speaker 1>my job is an intersection between the classic

00:03:55.485 --> 00:03:58.525
<v Speaker 1>technical developer relations, like, in development, we'll go

00:03:58.525 --> 00:03:59.085
<v Speaker 1>see,

00:04:00.045 --> 00:04:02.925
<v Speaker 1>like, trying some new tools, working with the

00:04:02.925 --> 00:04:05.645
<v Speaker 1>developer communities, working with the technical communities,

00:04:07.720 --> 00:04:10.120
<v Speaker 1>writing some blog blog posts,

00:04:10.200 --> 00:04:12.520
<v Speaker 1>trying demos, and so on, and promoting

00:04:12.520 --> 00:04:14.040
<v Speaker 1>promoting technologies

00:04:14.040 --> 00:04:16.440
<v Speaker 1>across the across the technology world.

00:04:17.959 --> 00:04:20.360
<v Speaker 1>And at the same time, I'm also deeply

00:04:20.360 --> 00:04:24.485
<v Speaker 1>involved into the various program management aspects

00:04:24.485 --> 00:04:27.685
<v Speaker 1>and community management aspects of the cloud native

00:04:27.685 --> 00:04:30.965
<v Speaker 1>community. So we have some unique specifics of

00:04:30.965 --> 00:04:34.005
<v Speaker 1>of our organization. So cloud native computing foundation

00:04:34.005 --> 00:04:34.885
<v Speaker 1>is not regular.

00:04:36.020 --> 00:04:38.660
<v Speaker 1>Let's say, vendor or product company, we are

00:04:38.660 --> 00:04:39.300
<v Speaker 1>the

00:04:39.860 --> 00:04:42.180
<v Speaker 1>independent nonprofit foundation,

00:04:42.180 --> 00:04:45.380
<v Speaker 1>which is hosting various technologies under our umbrella.

00:04:45.380 --> 00:04:48.100
<v Speaker 1>And we're mostly we're mostly interested

00:04:48.100 --> 00:04:51.074
<v Speaker 1>in spreading the world around these technologies,

00:04:51.155 --> 00:04:54.595
<v Speaker 1>but not not adding some, you know, like,

00:04:54.595 --> 00:04:56.835
<v Speaker 1>some commercial focus to these technologies and so

00:04:56.835 --> 00:04:57.555
<v Speaker 1>on. So

00:04:57.875 --> 00:05:00.914
<v Speaker 1>my average job, it can be a bit

00:05:00.914 --> 00:05:03.235
<v Speaker 1>more different than the average

00:05:03.395 --> 00:05:07.060
<v Speaker 1>than the average day job, the average responsibilities

00:05:07.060 --> 00:05:09.460
<v Speaker 1>with the typical development we get from the

00:05:09.700 --> 00:05:11.940
<v Speaker 1>from the product company. At the same time,

00:05:11.940 --> 00:05:13.300
<v Speaker 1>we are all doing the same job. We're

00:05:13.300 --> 00:05:15.620
<v Speaker 1>promoting these technologies. We are connecting the bridges

00:05:15.620 --> 00:05:17.620
<v Speaker 1>between the technical

00:05:17.965 --> 00:05:21.245
<v Speaker 1>technical communities between the developers' communities and those

00:05:21.245 --> 00:05:23.565
<v Speaker 1>people who are trying to consume these technologies

00:05:23.565 --> 00:05:26.925
<v Speaker 1>are making decisions about implementation of these technologies

00:05:26.925 --> 00:05:28.685
<v Speaker 1>there in their ecosystems.

00:05:29.485 --> 00:05:32.044
<v Speaker 0>Awesome. Really cool. I mean, you get to,

00:05:32.659 --> 00:05:34.500
<v Speaker 0>you know, on one hand a play with

00:05:34.500 --> 00:05:36.659
<v Speaker 0>all of these technologies on a regular basis,

00:05:36.659 --> 00:05:38.819
<v Speaker 0>but b, you're also very closely connected to

00:05:38.819 --> 00:05:40.740
<v Speaker 0>the community through those initiatives that you just

00:05:40.740 --> 00:05:43.539
<v Speaker 0>mentioned. So you also get really good first

00:05:43.539 --> 00:05:45.780
<v Speaker 0>and second hand discourse with people that are

00:05:45.780 --> 00:05:48.259
<v Speaker 0>either adopting cloud native or already have adopted

00:05:48.259 --> 00:05:50.715
<v Speaker 0>cloud native. What I wanted and we're we're

00:05:50.715 --> 00:05:52.155
<v Speaker 0>gonna get all of that knowledge out of

00:05:52.155 --> 00:05:53.914
<v Speaker 0>your brain today and transmit that to everybody

00:05:53.914 --> 00:05:55.755
<v Speaker 0>that's watching on YouTube. So

00:05:56.395 --> 00:05:58.634
<v Speaker 0>oh, we have our first. Hello. Hello, John.

00:05:58.634 --> 00:06:00.634
<v Speaker 0>Thank you for tuning in. So

00:06:01.050 --> 00:06:03.290
<v Speaker 0>let's just try and see if we can

00:06:03.290 --> 00:06:05.050
<v Speaker 0>not spend a few hours, but maybe a

00:06:05.050 --> 00:06:06.330
<v Speaker 0>few minutes just covering

00:06:06.810 --> 00:06:08.410
<v Speaker 0>what is cloud native. If we had to

00:06:08.410 --> 00:06:09.530
<v Speaker 0>sum it up in

00:06:09.770 --> 00:06:11.770
<v Speaker 0>in a thirty second blurb, what do you

00:06:11.770 --> 00:06:15.195
<v Speaker 0>think the most important parts, components, concepts, etcetera

00:06:15.195 --> 00:06:16.795
<v Speaker 0>are of CloudNative?

00:06:17.435 --> 00:06:20.235
<v Speaker 1>The most important components of CloudNative

00:06:20.235 --> 00:06:23.835
<v Speaker 1>is an ability to bundle the different things

00:06:23.835 --> 00:06:24.955
<v Speaker 1>into some

00:06:25.610 --> 00:06:26.650
<v Speaker 1>into some

00:06:27.289 --> 00:06:30.250
<v Speaker 1>shippable and easily distributable units.

00:06:30.970 --> 00:06:33.129
<v Speaker 1>They typically call this containers,

00:06:33.129 --> 00:06:34.010
<v Speaker 1>but it's

00:06:34.090 --> 00:06:37.449
<v Speaker 1>like, being containerized is not absolutely necessary to

00:06:37.449 --> 00:06:40.009
<v Speaker 1>be to be to be cloud native.

00:06:41.005 --> 00:06:43.405
<v Speaker 1>At the same time, the the way to

00:06:43.405 --> 00:06:45.325
<v Speaker 1>implement your technologies,

00:06:45.485 --> 00:06:48.205
<v Speaker 1>like, we are exposing the APIs and

00:06:48.845 --> 00:06:51.085
<v Speaker 1>using some sort of mesh technologies

00:06:51.245 --> 00:06:52.285
<v Speaker 1>or

00:06:52.880 --> 00:06:56.000
<v Speaker 1>adapting adapting your tools to be easily deployed

00:06:56.000 --> 00:06:58.560
<v Speaker 1>on the different public or private clouds on

00:06:58.560 --> 00:07:01.280
<v Speaker 1>premises is the other essential parts of the

00:07:01.280 --> 00:07:02.720
<v Speaker 1>the cloud native world.

00:07:03.760 --> 00:07:05.535
<v Speaker 1>CNCF has its own

00:07:05.855 --> 00:07:08.735
<v Speaker 1>specific definition of what cloud native is. You

00:07:08.735 --> 00:07:10.255
<v Speaker 1>can find it under the

00:07:10.655 --> 00:07:11.455
<v Speaker 1>CNCF

00:07:11.455 --> 00:07:14.655
<v Speaker 1>repo on GitHub under CNCF two zero c

00:07:14.655 --> 00:07:17.135
<v Speaker 1>repo on GitHub. So you can find this

00:07:17.135 --> 00:07:18.335
<v Speaker 1>brief definition there.

00:07:19.810 --> 00:07:21.729
<v Speaker 1>On the various language, it's not only in

00:07:21.729 --> 00:07:24.610
<v Speaker 1>English, so I can share the link later.

00:07:24.690 --> 00:07:26.610
<v Speaker 1>And, probably, you did, it can share the

00:07:26.610 --> 00:07:28.930
<v Speaker 1>link later with with all the subscribers here.

00:07:28.930 --> 00:07:30.530
<v Speaker 1>But in general, again,

00:07:31.235 --> 00:07:33.795
<v Speaker 1>the cloud native technology is the technology can

00:07:33.955 --> 00:07:34.995
<v Speaker 1>that can be

00:07:35.315 --> 00:07:38.035
<v Speaker 1>easily used and easily packaged and easily distributed

00:07:38.035 --> 00:07:41.955
<v Speaker 1>across where platforms be platform agnostic and can

00:07:41.955 --> 00:07:42.915
<v Speaker 1>be easily

00:07:42.915 --> 00:07:44.595
<v Speaker 1>distributed across the across

00:07:49.500 --> 00:07:50.300
<v Speaker 0>I

00:07:53.020 --> 00:07:55.260
<v Speaker 0>don't know if that's my connection.

00:07:55.260 --> 00:07:56.940
<v Speaker 0>If anyone can still hear me, if you

00:07:56.940 --> 00:07:58.780
<v Speaker 0>can let me know, that would be grand.

00:07:58.780 --> 00:08:01.580
<v Speaker 0>Or if we have potentially just lost Ehar.

00:08:04.225 --> 00:08:06.305
<v Speaker 0>I'll wait for a thumbs up from somebody.

00:08:06.305 --> 00:08:08.305
<v Speaker 0>Otherwise, I'm going to the pub.

00:08:11.505 --> 00:08:14.544
<v Speaker 0>Oh, Ehar, are you back? I'm back. Yeah.

00:08:14.544 --> 00:08:16.945
<v Speaker 1>Sorry. I had some connectivity issues.

00:08:17.789 --> 00:08:20.030
<v Speaker 1>For some reason, they're happening exactly that time

00:08:20.030 --> 00:08:21.870
<v Speaker 1>when I went back to it to live.

00:08:22.669 --> 00:08:25.310
<v Speaker 0>Sorry. You seem to be perfectly great now.

00:08:25.310 --> 00:08:26.830
<v Speaker 0>So we'll just put that down as a

00:08:26.830 --> 00:08:28.669
<v Speaker 0>wee blurb, and we'll see what happens.

00:08:29.229 --> 00:08:29.710
<v Speaker 1>Alright.

00:08:31.335 --> 00:08:33.335
<v Speaker 0>Okay. So I think you you kinda covered

00:08:33.335 --> 00:08:35.335
<v Speaker 0>what cloud native was there. The the thing

00:08:35.335 --> 00:08:37.095
<v Speaker 0>that struck me right away was you

00:08:37.495 --> 00:08:40.934
<v Speaker 0>kinda you said that you don't need containers

00:08:41.174 --> 00:08:42.215
<v Speaker 0>to be cloud native.

00:08:42.770 --> 00:08:46.050
<v Speaker 1>You don't necessarily need containers. However,

00:08:46.290 --> 00:08:48.370
<v Speaker 1>in, like, 99%

00:08:48.450 --> 00:08:49.250
<v Speaker 1>of

00:08:50.050 --> 00:08:51.170
<v Speaker 1>different cases,

00:08:51.890 --> 00:08:54.690
<v Speaker 1>containers are essential. So containers is the organic

00:08:54.690 --> 00:08:56.690
<v Speaker 1>part of the cloud native world.

00:08:57.255 --> 00:08:59.335
<v Speaker 1>And if we'll come back again to the

00:08:59.335 --> 00:09:01.655
<v Speaker 1>history of the cloud native computer foundation as

00:09:01.655 --> 00:09:02.615
<v Speaker 1>an organization,

00:09:02.935 --> 00:09:05.895
<v Speaker 1>our first and second project was Kubernetes, project

00:09:05.895 --> 00:09:07.735
<v Speaker 1>that has been developed by Google

00:09:07.975 --> 00:09:08.535
<v Speaker 1>originally

00:09:09.080 --> 00:09:11.720
<v Speaker 1>to host to host containers

00:09:11.960 --> 00:09:15.320
<v Speaker 1>and to manage containers in the various scale

00:09:15.320 --> 00:09:19.640
<v Speaker 1>in various cases across the across the even

00:09:19.640 --> 00:09:20.360
<v Speaker 1>across the globe.

00:09:21.204 --> 00:09:23.524
<v Speaker 1>So the first project even for the foundation

00:09:23.524 --> 00:09:26.084
<v Speaker 1>was the container focused project. And most of

00:09:26.084 --> 00:09:27.925
<v Speaker 1>our projects in these days, they are also

00:09:27.925 --> 00:09:29.285
<v Speaker 1>container centric.

00:09:31.125 --> 00:09:33.125
<v Speaker 0>Yeah. I mean, I think just from my

00:09:33.125 --> 00:09:35.620
<v Speaker 0>own experience of speaking to people, you know,

00:09:35.620 --> 00:09:37.220
<v Speaker 0>you know, at events last year, of course,

00:09:37.220 --> 00:09:39.220
<v Speaker 0>not this year, but or even online this

00:09:39.220 --> 00:09:41.060
<v Speaker 0>year is that, you know, I think there's

00:09:41.060 --> 00:09:42.740
<v Speaker 0>this kind of I don't know if it's

00:09:43.380 --> 00:09:45.220
<v Speaker 0>maybe it's a rule or maybe it's some

00:09:45.459 --> 00:09:47.220
<v Speaker 0>sort of misconception, but the idea of the

00:09:47.220 --> 00:09:49.620
<v Speaker 0>cloud native and Kubernetes are actually entangled to

00:09:49.620 --> 00:09:51.845
<v Speaker 0>a certain point. And there's I I I

00:09:51.845 --> 00:09:53.524
<v Speaker 0>feel just on the conversation I had that

00:09:53.524 --> 00:09:55.445
<v Speaker 0>people don't think you can be cloud native

00:09:55.445 --> 00:09:57.685
<v Speaker 0>without Kubernetes. And is that something you you

00:09:57.685 --> 00:09:58.965
<v Speaker 0>would say is untrue then?

00:09:59.765 --> 00:10:02.565
<v Speaker 1>It's again, it's not it's not truly true

00:10:02.565 --> 00:10:05.410
<v Speaker 1>because you can write containers without Kubernetes. You

00:10:05.410 --> 00:10:07.730
<v Speaker 1>can be even a cloud native without containers.

00:10:08.130 --> 00:10:11.490
<v Speaker 1>However, again, Kubernetes is the essential part of

00:10:11.490 --> 00:10:14.770
<v Speaker 1>most of most of the container focused infrastructures

00:10:14.770 --> 00:10:16.930
<v Speaker 1>these these days. Most of most of the

00:10:16.930 --> 00:10:20.065
<v Speaker 1>container environments these days are powered by Kubernetes

00:10:20.065 --> 00:10:23.185
<v Speaker 1>for obvious reasons. Kubernetes has enough benefits of

00:10:23.185 --> 00:10:24.625
<v Speaker 1>why you shouldn't use it in in the

00:10:24.625 --> 00:10:25.585
<v Speaker 1>various cases.

00:10:26.065 --> 00:10:26.865
<v Speaker 1>However,

00:10:26.945 --> 00:10:29.505
<v Speaker 1>it's obvious that you shouldn't use the same

00:10:29.505 --> 00:10:32.750
<v Speaker 1>technology for all the cases throughout.

00:10:32.830 --> 00:10:35.790
<v Speaker 1>Whereas scenarios where Kubernetes is not is not

00:10:35.790 --> 00:10:36.910
<v Speaker 1>truly necessary,

00:10:37.070 --> 00:10:39.550
<v Speaker 1>can be you you can just use, for

00:10:39.550 --> 00:10:42.670
<v Speaker 1>example, Docker as the container runtime and the

00:10:42.670 --> 00:10:44.430
<v Speaker 1>basic container of the straight on your local

00:10:44.430 --> 00:10:47.545
<v Speaker 1>machine, for example, and so on. So container

00:10:47.945 --> 00:10:49.945
<v Speaker 1>containers and Kubernetes

00:10:51.625 --> 00:10:54.185
<v Speaker 1>pretty close to each other, but not synonyms.

00:10:55.705 --> 00:10:58.265
<v Speaker 0>Yeah. I guess maybe it would make sense

00:10:58.265 --> 00:10:59.785
<v Speaker 0>if we kinda try and cover what are

00:10:59.785 --> 00:11:00.265
<v Speaker 0>the

00:11:00.950 --> 00:11:03.830
<v Speaker 0>what are the main kind of problems that

00:11:03.830 --> 00:11:05.750
<v Speaker 0>cloud native can help organizations

00:11:06.070 --> 00:11:06.870
<v Speaker 0>solve?

00:11:07.030 --> 00:11:08.630
<v Speaker 0>Like, you know, we if we understand what

00:11:08.630 --> 00:11:10.070
<v Speaker 0>it is and we understand that maybe you

00:11:10.070 --> 00:11:12.310
<v Speaker 0>don't need Kubernetes, then what does cloud native

00:11:12.310 --> 00:11:13.350
<v Speaker 0>aim to solve? And then

00:11:14.095 --> 00:11:16.015
<v Speaker 0>maybe we'll lead us on to what Kubernetes

00:11:16.015 --> 00:11:18.175
<v Speaker 0>helps solve some of those challenges too.

00:11:18.895 --> 00:11:20.895
<v Speaker 1>Sure. We can come back to the to

00:11:20.895 --> 00:11:23.455
<v Speaker 1>the benefits of using containers themselves, not not

00:11:23.455 --> 00:11:24.815
<v Speaker 1>necessarily the

00:11:25.295 --> 00:11:25.935
<v Speaker 1>the

00:11:26.175 --> 00:11:28.654
<v Speaker 1>cloud native as an abstraction. So you you

00:11:28.654 --> 00:11:31.420
<v Speaker 1>can use containers everywhere it states. And one

00:11:31.420 --> 00:11:33.420
<v Speaker 1>of the benefits of using containers and packaging

00:11:33.420 --> 00:11:35.580
<v Speaker 1>your applications into containers is that you can

00:11:35.580 --> 00:11:38.060
<v Speaker 1>use, for example, your your local laptop to

00:11:38.060 --> 00:11:40.300
<v Speaker 1>write some application, bundle your call with some

00:11:40.300 --> 00:11:42.060
<v Speaker 1>container, do it, like, in a few commands

00:11:42.060 --> 00:11:43.985
<v Speaker 1>and then in a few seconds. And is

00:11:43.985 --> 00:11:45.665
<v Speaker 1>it the shipment run the same the same

00:11:45.665 --> 00:11:47.585
<v Speaker 1>the same application on

00:11:48.065 --> 00:11:49.904
<v Speaker 1>on the public cloud or in a private

00:11:49.904 --> 00:11:52.225
<v Speaker 1>cloud or in a remote data center that

00:11:52.225 --> 00:11:54.464
<v Speaker 1>is located in a few thousand kilometers from

00:11:54.464 --> 00:11:55.025
<v Speaker 1>you?

00:11:55.345 --> 00:11:58.305
<v Speaker 1>And this is one of the obvious benefits

00:11:58.305 --> 00:11:59.345
<v Speaker 1>of using containers.

00:11:59.710 --> 00:12:02.910
<v Speaker 1>And, again, being cloud native means that you

00:12:02.910 --> 00:12:04.990
<v Speaker 1>can you can use all the benefits that

00:12:04.990 --> 00:12:08.430
<v Speaker 1>that that that this extra environments can can

00:12:08.430 --> 00:12:09.390
<v Speaker 1>bring to you.

00:12:10.670 --> 00:12:14.510
<v Speaker 1>You know, like, there are even various

00:12:13.425 --> 00:12:16.065
<v Speaker 1>various cloud providers that are not only offering

00:12:16.065 --> 00:12:17.985
<v Speaker 1>their public cloud offerings. When I was speaking

00:12:17.985 --> 00:12:19.345
<v Speaker 1>speaking about cloud,

00:12:19.825 --> 00:12:20.785
<v Speaker 1>most people

00:12:21.585 --> 00:12:23.905
<v Speaker 1>when most people are speaking about cloud, they

00:12:23.905 --> 00:12:27.345
<v Speaker 1>are mostly using this term to to describe

00:12:27.345 --> 00:12:29.540
<v Speaker 1>some kind of public cloud, example, some well

00:12:29.540 --> 00:12:32.580
<v Speaker 1>known some well known infrastructure that is being

00:12:32.580 --> 00:12:35.700
<v Speaker 1>run somewhere by some third party vendor. They

00:12:35.700 --> 00:12:38.180
<v Speaker 1>don't have any access to the underlying infrastructure.

00:12:38.180 --> 00:12:39.620
<v Speaker 1>They don't have any control

00:12:39.940 --> 00:12:40.820
<v Speaker 1>to it.

00:12:41.220 --> 00:12:41.620
<v Speaker 1>However,

00:12:42.415 --> 00:12:44.495
<v Speaker 1>there's a concept of the on premises

00:12:44.975 --> 00:12:45.855
<v Speaker 1>infrastructure

00:12:45.855 --> 00:12:47.695
<v Speaker 1>or private cloud.

00:12:48.255 --> 00:12:48.895
<v Speaker 1>And

00:12:49.615 --> 00:12:51.615
<v Speaker 1>if you're using the private cloud, you're basically

00:12:51.615 --> 00:12:53.855
<v Speaker 1>using the same bare metal machines as you

00:12:53.855 --> 00:12:55.855
<v Speaker 1>can use in your in your regular physical

00:12:55.855 --> 00:12:58.649
<v Speaker 1>data center, and private cloud is essentially the

00:12:58.649 --> 00:13:00.090
<v Speaker 1>same physical data center.

00:13:00.410 --> 00:13:02.810
<v Speaker 1>However, with the with an additional

00:13:02.970 --> 00:13:05.209
<v Speaker 1>set of frustrations with the way

00:13:05.690 --> 00:13:08.250
<v Speaker 1>with an ability to control the infrastructure using

00:13:08.250 --> 00:13:11.130
<v Speaker 1>the API and the declarative way of managing

00:13:11.130 --> 00:13:11.690
<v Speaker 1>the things,

00:13:13.275 --> 00:13:15.595
<v Speaker 1>You can you can convert and you can

00:13:15.595 --> 00:13:17.035
<v Speaker 1>migrate your

00:13:17.515 --> 00:13:20.715
<v Speaker 1>your existing legacy workloads and the legacy ways

00:13:20.715 --> 00:13:23.835
<v Speaker 1>of using applications and deploying applications into something

00:13:23.835 --> 00:13:24.155
<v Speaker 1>different.

00:13:25.150 --> 00:13:27.710
<v Speaker 1>If we're speaking even about the hybrid cloud

00:13:27.710 --> 00:13:30.270
<v Speaker 1>approach, so you can you can even use

00:13:30.270 --> 00:13:32.830
<v Speaker 1>the same the same set of instructions, the

00:13:32.830 --> 00:13:33.310
<v Speaker 1>same

00:13:33.790 --> 00:13:36.430
<v Speaker 1>set of API rules in some cases where

00:13:36.430 --> 00:13:38.510
<v Speaker 1>you can run the same applications on the

00:13:38.510 --> 00:13:39.470
<v Speaker 1>private cloud

00:13:39.774 --> 00:13:42.095
<v Speaker 1>within your own data center on an in

00:13:42.095 --> 00:13:44.654
<v Speaker 1>a public cloud that has been been deployed

00:13:44.654 --> 00:13:45.455
<v Speaker 1>somewhere.

00:13:45.855 --> 00:13:47.535
<v Speaker 1>And here comes Kubernetes.

00:13:48.175 --> 00:13:50.175
<v Speaker 1>So this is this is the answer to

00:13:50.175 --> 00:13:51.935
<v Speaker 1>your to your next question that you were

00:13:51.935 --> 00:13:55.000
<v Speaker 1>about to ask, Nick. So why Kubernetes is

00:13:55.000 --> 00:13:55.639
<v Speaker 1>so

00:13:55.879 --> 00:13:58.440
<v Speaker 1>is is really beneficial for various use cases?

00:13:58.440 --> 00:14:00.040
<v Speaker 1>The reason is that you can use you

00:14:00.040 --> 00:14:02.040
<v Speaker 1>can use the same Kubernetes cluster

00:14:02.199 --> 00:14:05.639
<v Speaker 1>or the same way of controlling of controlling

00:14:05.639 --> 00:14:08.199
<v Speaker 1>the various Kubernetes clusters because of the Kubernetes

00:14:08.199 --> 00:14:10.365
<v Speaker 1>API, which is not changing

00:14:10.845 --> 00:14:12.925
<v Speaker 1>even despite the fact that you can you

00:14:12.925 --> 00:14:15.085
<v Speaker 1>can use the same Kubernetes cluster

00:14:16.045 --> 00:14:18.205
<v Speaker 1>in a in a public

00:14:18.205 --> 00:14:20.365
<v Speaker 1>cloud or you can use the different Kubernetes

00:14:20.365 --> 00:14:22.285
<v Speaker 1>cluster in a private cloud in your own

00:14:22.285 --> 00:14:25.490
<v Speaker 1>data center. But you'll still use Kubernetes,

00:14:25.490 --> 00:14:27.570
<v Speaker 1>the same code base of Kubernetes.

00:14:27.650 --> 00:14:29.810
<v Speaker 1>This means you will have the same stable

00:14:29.810 --> 00:14:30.610
<v Speaker 1>API.

00:14:30.770 --> 00:14:32.850
<v Speaker 1>You can simply run it even, you know,

00:14:32.850 --> 00:14:33.330
<v Speaker 1>like,

00:14:33.810 --> 00:14:35.570
<v Speaker 1>simple Biden commands, for example,

00:14:36.764 --> 00:14:39.805
<v Speaker 1>that will provision some applications for Kubernetes.

00:14:40.285 --> 00:14:43.245
<v Speaker 1>So Kubernetes is the next level of of

00:14:43.245 --> 00:14:44.365
<v Speaker 1>obstruction,

00:14:44.524 --> 00:14:46.764
<v Speaker 1>and it doesn't matter which kind of infrastructure

00:14:46.764 --> 00:14:47.725
<v Speaker 1>do you have

00:14:48.524 --> 00:14:50.045
<v Speaker 1>below the Kubernetes level.

00:14:50.680 --> 00:14:53.160
<v Speaker 1>Wherever you can deploy Kubernetes, you can you

00:14:53.160 --> 00:14:55.720
<v Speaker 1>can interact with Kubernetes. You shouldn't interact with

00:14:55.720 --> 00:14:59.080
<v Speaker 1>the underlying infrastructure directly if you are trying

00:14:59.080 --> 00:15:01.560
<v Speaker 1>to deploy manage your applications.

00:15:03.705 --> 00:15:05.065
<v Speaker 0>Okay. So

00:15:05.464 --> 00:15:07.625
<v Speaker 0>you can still be cloud native if you're

00:15:07.625 --> 00:15:08.985
<v Speaker 0>on a public cloud. You can still be

00:15:08.985 --> 00:15:10.665
<v Speaker 0>cloud native if if you're on private cloud

00:15:10.665 --> 00:15:12.585
<v Speaker 0>or bare metal or or multi cloud or

00:15:12.585 --> 00:15:14.904
<v Speaker 0>all these things. These are all cloud native.

00:15:14.904 --> 00:15:17.220
<v Speaker 0>You can use Kubernetes if you want or

00:15:17.220 --> 00:15:18.660
<v Speaker 0>containers if you want, but you're gonna get

00:15:18.660 --> 00:15:20.180
<v Speaker 0>a lot of benefits if you do. One

00:15:20.180 --> 00:15:21.459
<v Speaker 0>of them being that you just said there

00:15:21.459 --> 00:15:23.779
<v Speaker 0>is Kubernetes gives us an API we can

00:15:23.779 --> 00:15:26.500
<v Speaker 0>deploy to containers, give us the ability to

00:15:26.500 --> 00:15:28.899
<v Speaker 0>not just distribute the images, but have some

00:15:28.899 --> 00:15:31.005
<v Speaker 0>level of idempotency between what we run across

00:15:31.005 --> 00:15:31.645
<v Speaker 0>machines.

00:15:32.205 --> 00:15:33.725
<v Speaker 0>You know, there's there's already a lot of

00:15:33.725 --> 00:15:35.725
<v Speaker 0>layered benefits here that the more you you

00:15:35.725 --> 00:15:37.885
<v Speaker 0>know, what's that phrase? The sum of the

00:15:37.885 --> 00:15:39.085
<v Speaker 0>whole is greater than the sum of the

00:15:39.085 --> 00:15:40.525
<v Speaker 0>parts. Like when you add each of these

00:15:40.525 --> 00:15:42.845
<v Speaker 0>bits, you're just building out a more robust

00:15:42.845 --> 00:15:43.725
<v Speaker 0>and resilient system.

00:15:44.910 --> 00:15:47.230
<v Speaker 0>Would you say that is the goal for

00:15:47.230 --> 00:15:49.230
<v Speaker 0>for people that are adopting cloud native? Is

00:15:49.230 --> 00:15:50.029
<v Speaker 0>this just to

00:15:50.910 --> 00:15:53.149
<v Speaker 0>architect their systems in a way that is

00:15:53.149 --> 00:15:54.190
<v Speaker 0>more robust

00:15:54.190 --> 00:15:56.110
<v Speaker 0>or more scalable? Is that a core tenant

00:15:56.110 --> 00:15:57.149
<v Speaker 0>of of of cloud native?

00:15:57.735 --> 00:15:59.735
<v Speaker 1>It's it's one of the benefits, and it

00:15:59.815 --> 00:16:01.495
<v Speaker 1>this is this is one one of the

00:16:01.495 --> 00:16:03.335
<v Speaker 1>primary reasons why people

00:16:03.815 --> 00:16:05.255
<v Speaker 1>at companies

00:16:05.255 --> 00:16:07.975
<v Speaker 1>of the different different size and different scale

00:16:07.975 --> 00:16:10.775
<v Speaker 1>are implementing these tools and using these tools,

00:16:11.015 --> 00:16:11.895
<v Speaker 1>specifically Kubernetes.

00:16:12.399 --> 00:16:14.560
<v Speaker 1>Can use Kubernetes on a single node machine

00:16:14.560 --> 00:16:16.399
<v Speaker 1>on your local laptop, and you can also

00:16:16.399 --> 00:16:19.040
<v Speaker 1>use Kubernetes in your distributed

00:16:19.040 --> 00:16:21.920
<v Speaker 1>your distributed various data centers across the globe

00:16:21.920 --> 00:16:24.959
<v Speaker 1>with with the scale of the single cluster

00:16:24.959 --> 00:16:27.680
<v Speaker 1>of up to 5,000 nodes per cluster.

00:16:28.375 --> 00:16:29.015
<v Speaker 1>So

00:16:29.575 --> 00:16:31.895
<v Speaker 1>and you'll still use the same Kubernetes. So

00:16:31.895 --> 00:16:33.815
<v Speaker 1>this is the benefit. You'll still use the

00:16:33.815 --> 00:16:36.695
<v Speaker 1>same tool. You don't need to learn some

00:16:36.695 --> 00:16:39.175
<v Speaker 1>get another tool to to to use it

00:16:39.175 --> 00:16:40.135
<v Speaker 1>and to

00:16:40.375 --> 00:16:41.815
<v Speaker 1>transfer pieces of code there.

00:16:43.710 --> 00:16:46.030
<v Speaker 0>Okay then. So let's

00:16:47.150 --> 00:16:49.390
<v Speaker 0>let's continue down this path then. So

00:16:49.790 --> 00:16:52.030
<v Speaker 0>it's something that is very prominent

00:16:52.110 --> 00:16:54.190
<v Speaker 0>with with cloud native architectures and and people

00:16:54.190 --> 00:16:55.870
<v Speaker 0>that I speak to that are adopting this

00:16:55.870 --> 00:16:56.430
<v Speaker 0>this

00:16:56.995 --> 00:16:59.954
<v Speaker 0>methodology of building software is microservices.

00:17:00.194 --> 00:17:02.595
<v Speaker 0>And I believe that the CNCF original definition

00:17:02.595 --> 00:17:04.674
<v Speaker 0>did say that microservices

00:17:04.674 --> 00:17:05.474
<v Speaker 0>were

00:17:06.034 --> 00:17:07.875
<v Speaker 0>required to be cloud native. Is is that

00:17:07.875 --> 00:17:09.075
<v Speaker 0>still the case, or do you feel that

00:17:09.075 --> 00:17:10.674
<v Speaker 0>that's changed a little bit these days?

00:17:11.359 --> 00:17:12.160
<v Speaker 1>Yes

00:17:13.040 --> 00:17:15.840
<v Speaker 1>and no. So microservices should be there where

00:17:15.840 --> 00:17:17.359
<v Speaker 1>where they're required.

00:17:17.840 --> 00:17:20.240
<v Speaker 1>The same time, the cases where microservices are

00:17:20.240 --> 00:17:22.160
<v Speaker 1>required are almost everywhere.

00:17:23.440 --> 00:17:24.799
<v Speaker 1>The most typical

00:17:24.960 --> 00:17:28.774
<v Speaker 1>use case for still using some monolithic application

00:17:29.014 --> 00:17:31.974
<v Speaker 1>can be migrating this monolithic application

00:17:32.054 --> 00:17:35.495
<v Speaker 1>from the like, from some legacy workloads and

00:17:35.495 --> 00:17:36.375
<v Speaker 1>inability

00:17:36.375 --> 00:17:37.014
<v Speaker 1>to

00:17:38.294 --> 00:17:40.934
<v Speaker 1>to easily convert it into the microservice.

00:17:41.770 --> 00:17:44.010
<v Speaker 1>So I know that there are even some

00:17:44.010 --> 00:17:46.730
<v Speaker 1>customers and some companies that are using Kubernetes

00:17:46.730 --> 00:17:47.850
<v Speaker 1>even to

00:17:48.010 --> 00:17:50.650
<v Speaker 1>to bundle some things, some applications that have

00:17:50.650 --> 00:17:51.929
<v Speaker 1>been developed even,

00:17:52.490 --> 00:17:55.290
<v Speaker 1>like, twenty or thirty years ago in the

00:17:55.290 --> 00:17:58.914
<v Speaker 1>mainframe era, for example, that they're using Kubernetes.

00:17:59.075 --> 00:18:01.235
<v Speaker 1>They're using some kind of language to bundle

00:18:01.235 --> 00:18:02.514
<v Speaker 1>that code within

00:18:02.915 --> 00:18:05.235
<v Speaker 1>within some abstraction that can be easily consumed

00:18:05.235 --> 00:18:07.154
<v Speaker 1>by Kubernetes, and it can be

00:18:07.475 --> 00:18:09.554
<v Speaker 1>provisioned in the run of the Kubernetes cluster.

00:18:10.790 --> 00:18:12.950
<v Speaker 1>However, if you are if you are developing

00:18:12.950 --> 00:18:13.990
<v Speaker 1>and building

00:18:14.230 --> 00:18:17.350
<v Speaker 1>the new applications, specifically from scratch these days,

00:18:17.750 --> 00:18:18.549
<v Speaker 1>it's

00:18:18.870 --> 00:18:21.110
<v Speaker 1>more or less obvious for most cases that

00:18:21.110 --> 00:18:24.230
<v Speaker 1>you you may and should use microservices

00:18:24.375 --> 00:18:27.175
<v Speaker 1>because it's the most most efficient way of

00:18:27.175 --> 00:18:28.774
<v Speaker 1>managing various resources,

00:18:29.015 --> 00:18:32.135
<v Speaker 1>especially if we're speaking about the debate about

00:18:32.135 --> 00:18:32.774
<v Speaker 1>the

00:18:32.935 --> 00:18:34.775
<v Speaker 1>public cloud infrastructure.

00:18:34.775 --> 00:18:36.695
<v Speaker 1>For example, if you're not using some bare

00:18:36.695 --> 00:18:39.789
<v Speaker 1>metal machines which have kind of limited capacity,

00:18:39.950 --> 00:18:42.190
<v Speaker 1>comparing with the with the public cloud where

00:18:42.190 --> 00:18:44.830
<v Speaker 1>you can you can basically run anything and

00:18:44.830 --> 00:18:46.269
<v Speaker 1>everywhere anywhere,

00:18:46.350 --> 00:18:48.750
<v Speaker 1>so Microsoft is the preferred way of front

00:18:48.750 --> 00:18:49.789
<v Speaker 1>end applications.

00:18:50.190 --> 00:18:51.789
<v Speaker 1>It will be way more

00:18:52.195 --> 00:18:54.515
<v Speaker 1>way more resource efficient for you. It will

00:18:54.515 --> 00:18:55.794
<v Speaker 1>be way more

00:18:56.515 --> 00:18:58.835
<v Speaker 1>efficient in the terms of the life cycle

00:18:58.835 --> 00:19:01.475
<v Speaker 1>management of your applications and so. So there

00:19:01.475 --> 00:19:03.875
<v Speaker 1>are enough benefits why should you use microservices

00:19:03.875 --> 00:19:04.755
<v Speaker 1>these days.

00:19:05.075 --> 00:19:06.835
<v Speaker 1>However, as I mentioned before, it's not

00:19:07.460 --> 00:19:09.779
<v Speaker 1>you shouldn't use microservices everywhere,

00:19:09.780 --> 00:19:11.620
<v Speaker 1>like, in 100

00:19:11.700 --> 00:19:13.860
<v Speaker 1>of cases. If you feel that you don't

00:19:13.860 --> 00:19:14.900
<v Speaker 1>need microservices,

00:19:14.900 --> 00:19:16.100
<v Speaker 1>you probably don't need.

00:19:17.460 --> 00:19:18.900
<v Speaker 0>Okay. Let's

00:19:19.845 --> 00:19:21.924
<v Speaker 0>let's prod into that a little bit then.

00:19:21.924 --> 00:19:24.325
<v Speaker 0>So I think that's definitely a question that

00:19:24.325 --> 00:19:26.645
<v Speaker 0>probably most people have is, you know, I'm

00:19:26.645 --> 00:19:28.164
<v Speaker 0>starting on your side project.

00:19:28.485 --> 00:19:30.645
<v Speaker 0>You know, do I start with microservices

00:19:30.645 --> 00:19:32.565
<v Speaker 0>in which is that gonna have an effect

00:19:32.565 --> 00:19:34.164
<v Speaker 0>on the velocity that they could ship the

00:19:34.164 --> 00:19:36.779
<v Speaker 0>first version? Because they're, you know, there are

00:19:36.779 --> 00:19:38.859
<v Speaker 0>whole lot of challenges that come with microservices.

00:19:38.779 --> 00:19:40.779
<v Speaker 0>Mean, maybe we could talk about how Kubernetes

00:19:40.779 --> 00:19:42.539
<v Speaker 0>solves a few of those. Yep.

00:19:43.019 --> 00:19:44.700
<v Speaker 0>Or, you know, for someone starting up a

00:19:44.700 --> 00:19:46.860
<v Speaker 0>new state business or a new startup, you

00:19:46.860 --> 00:19:48.539
<v Speaker 0>know, building a monolith might just be a

00:19:48.539 --> 00:19:51.415
<v Speaker 0>lot quicker for them, but then the technical

00:19:51.415 --> 00:19:53.015
<v Speaker 0>debt they accrue as they build that out

00:19:53.015 --> 00:19:54.775
<v Speaker 0>is also gonna have all these challenges too.

00:19:54.775 --> 00:19:55.255
<v Speaker 0>Like,

00:19:55.735 --> 00:19:58.135
<v Speaker 0>what what is the answer? Is there a

00:19:58.135 --> 00:19:59.015
<v Speaker 0>single answer?

00:19:59.495 --> 00:20:01.095
<v Speaker 1>There is no single answer.

00:20:01.415 --> 00:20:03.495
<v Speaker 1>There is no single answer for all use

00:20:03.495 --> 00:20:04.695
<v Speaker 1>cases for

00:20:04.990 --> 00:20:06.669
<v Speaker 1>all companies,

00:20:06.669 --> 00:20:07.869
<v Speaker 1>for all applications,

00:20:07.950 --> 00:20:10.190
<v Speaker 1>for even all the types of applications.

00:20:10.750 --> 00:20:13.070
<v Speaker 1>There are various applications that can be easily

00:20:13.070 --> 00:20:16.269
<v Speaker 1>easily bundled and packaged into into Microsoft's

00:20:16.269 --> 00:20:19.735
<v Speaker 1>team. Even even some legacy applications that been

00:20:19.735 --> 00:20:22.695
<v Speaker 1>built, like, ten years ago, they can they

00:20:22.695 --> 00:20:25.415
<v Speaker 1>can be easily split into the Microsoft's phone

00:20:25.415 --> 00:20:28.455
<v Speaker 1>even today when we're speaking about some stateless

00:20:28.455 --> 00:20:28.935
<v Speaker 1>applications.

00:20:29.650 --> 00:20:31.970
<v Speaker 1>For example, some state of websites and and

00:20:31.970 --> 00:20:33.809
<v Speaker 1>so on. So some stuff something like that.

00:20:34.130 --> 00:20:36.850
<v Speaker 1>When we are speaking about some something more

00:20:36.850 --> 00:20:37.570
<v Speaker 1>complex,

00:20:38.050 --> 00:20:40.690
<v Speaker 1>especially when we're speaking about some cases where

00:20:40.690 --> 00:20:42.929
<v Speaker 1>where you have to store your data,

00:20:43.335 --> 00:20:44.534
<v Speaker 1>like databases

00:20:44.534 --> 00:20:45.815
<v Speaker 1>for some

00:20:48.135 --> 00:20:51.014
<v Speaker 1>some complex storage solutions,

00:20:51.654 --> 00:20:53.895
<v Speaker 1>especially in the African storage solutions. So probably

00:20:53.895 --> 00:20:56.429
<v Speaker 1>it's not the best case just to go

00:20:56.429 --> 00:20:59.549
<v Speaker 1>ahead and convert your existing applications into the

00:20:59.549 --> 00:21:01.309
<v Speaker 1>into the form of microservices.

00:21:01.389 --> 00:21:04.350
<v Speaker 1>You can also combine it. So there's no

00:21:04.350 --> 00:21:06.749
<v Speaker 1>direct answer. Should you use microservices

00:21:06.750 --> 00:21:07.389
<v Speaker 1>all

00:21:07.950 --> 00:21:09.389
<v Speaker 1>everywhere in all the cases?

00:21:09.985 --> 00:21:10.784
<v Speaker 1>However,

00:21:10.865 --> 00:21:14.544
<v Speaker 1>I would strongly encourage people to consider using

00:21:14.544 --> 00:21:15.664
<v Speaker 1>microservices.

00:21:15.664 --> 00:21:17.585
<v Speaker 1>And if there is a possibility to use

00:21:17.585 --> 00:21:19.505
<v Speaker 1>them and if there is a possibility to

00:21:19.505 --> 00:21:22.304
<v Speaker 1>be cloud native from from scratch,

00:21:22.304 --> 00:21:22.465
<v Speaker 1>from

00:21:23.580 --> 00:21:25.899
<v Speaker 1>from from the first steps, this should be

00:21:25.899 --> 00:21:28.220
<v Speaker 1>the it can be the preferred way of

00:21:28.220 --> 00:21:29.979
<v Speaker 1>fusing things these days.

00:21:30.220 --> 00:21:33.260
<v Speaker 0>Okay. So so right away, like, let's let's

00:21:33.260 --> 00:21:34.779
<v Speaker 0>try and play this on on both sides

00:21:34.779 --> 00:21:36.700
<v Speaker 0>of the fence then. Let's assume you and

00:21:36.700 --> 00:21:38.220
<v Speaker 0>I were speaking to a new company and

00:21:38.220 --> 00:21:40.125
<v Speaker 0>we're saying, like, microservices are the best way

00:21:40.125 --> 00:21:41.885
<v Speaker 0>for you to start this new application.

00:21:42.285 --> 00:21:44.285
<v Speaker 0>Now, immediately, to me, the first thing I'd

00:21:44.285 --> 00:21:46.205
<v Speaker 0>wanna say is is a tangible benefit is

00:21:46.205 --> 00:21:48.285
<v Speaker 0>the microservices should be small enough that they're

00:21:48.285 --> 00:21:50.925
<v Speaker 0>really easy to iterate on, build, test, and

00:21:50.925 --> 00:21:51.565
<v Speaker 0>deploy.

00:21:52.125 --> 00:21:54.845
<v Speaker 0>Are the other advantages then to microservices?

00:21:57.270 --> 00:22:00.390
<v Speaker 1>There are enough advantages around microservices.

00:22:00.390 --> 00:22:01.830
<v Speaker 1>So you can easily

00:22:02.710 --> 00:22:04.629
<v Speaker 1>again, you can easily develop them.

00:22:05.190 --> 00:22:07.670
<v Speaker 1>So if you can easily develop the different

00:22:07.670 --> 00:22:09.715
<v Speaker 1>components of the microservices microservices of

00:22:10.195 --> 00:22:13.075
<v Speaker 1>the microservices architecture just on the single atomic

00:22:13.075 --> 00:22:13.794
<v Speaker 1>basis.

00:22:13.955 --> 00:22:16.674
<v Speaker 1>The whole complex structure of the microservices application

00:22:16.674 --> 00:22:18.995
<v Speaker 1>compared to the monolithic application can be even

00:22:18.995 --> 00:22:21.475
<v Speaker 1>more complex because of the of these various

00:22:21.475 --> 00:22:23.554
<v Speaker 1>connections between the microservices

00:22:24.360 --> 00:22:26.840
<v Speaker 1>between the microsources pieces

00:22:26.840 --> 00:22:28.039
<v Speaker 1>and the

00:22:28.200 --> 00:22:30.680
<v Speaker 1>different ways and even probably even different language

00:22:30.680 --> 00:22:31.640
<v Speaker 1>languages

00:22:32.120 --> 00:22:35.400
<v Speaker 1>which are used to try different parts of

00:22:35.400 --> 00:22:36.920
<v Speaker 1>this microservices application.

00:22:39.355 --> 00:22:41.754
<v Speaker 1>Again, with monolithic application,

00:22:42.154 --> 00:22:43.835
<v Speaker 1>it's way easier for you. As I mentioned

00:22:43.835 --> 00:22:46.154
<v Speaker 1>before, there is a for some startup, it

00:22:46.154 --> 00:22:48.635
<v Speaker 1>can be way easier just to write some

00:22:48.635 --> 00:22:51.755
<v Speaker 1>monolithic application just from the scratch. Just try

00:22:51.755 --> 00:22:53.755
<v Speaker 1>some some basic things there and

00:22:54.700 --> 00:22:55.500
<v Speaker 1>ship it

00:22:55.740 --> 00:22:57.100
<v Speaker 1>even in production,

00:22:57.100 --> 00:22:59.980
<v Speaker 1>but what about scaling it? What about

00:23:00.380 --> 00:23:03.740
<v Speaker 1>migrating and distributing this this application

00:23:03.740 --> 00:23:04.940
<v Speaker 1>across

00:23:05.020 --> 00:23:07.020
<v Speaker 1>whereas cloud providers, for example?

00:23:07.475 --> 00:23:08.995
<v Speaker 1>So let's say you have

00:23:09.955 --> 00:23:12.275
<v Speaker 1>you have an analytic application that is being

00:23:12.275 --> 00:23:15.635
<v Speaker 1>run on the public cloud provider a,

00:23:15.795 --> 00:23:17.395
<v Speaker 1>but you may have some

00:23:17.875 --> 00:23:19.955
<v Speaker 1>issues with that cloud provider. You can have

00:23:19.955 --> 00:23:20.275
<v Speaker 1>some.

00:23:21.560 --> 00:23:24.200
<v Speaker 1>For example, your country can restrict your access

00:23:24.200 --> 00:23:26.840
<v Speaker 1>to that to that cloud provider,

00:23:26.840 --> 00:23:28.440
<v Speaker 1>like, on the next day, and you have

00:23:28.440 --> 00:23:29.960
<v Speaker 1>no access to that. And you

00:23:30.920 --> 00:23:33.835
<v Speaker 1>you're trying to migrate the the tool. You're

00:23:33.835 --> 00:23:36.235
<v Speaker 1>trying to migrate the the application to the

00:23:36.235 --> 00:23:37.434
<v Speaker 1>different place,

00:23:37.595 --> 00:23:40.634
<v Speaker 1>but the cloud provider b has no

00:23:41.195 --> 00:23:44.154
<v Speaker 1>has no direct way how can you just

00:23:44.235 --> 00:23:45.835
<v Speaker 1>click and run the same application

00:23:46.200 --> 00:23:48.120
<v Speaker 1>and migrate it from cloud for the data

00:23:48.120 --> 00:23:49.559
<v Speaker 1>to cloud provider b

00:23:49.799 --> 00:23:52.039
<v Speaker 1>or the different cases? Like, even even if

00:23:52.039 --> 00:23:54.039
<v Speaker 1>you have some, for example, billing issues with

00:23:54.039 --> 00:23:56.279
<v Speaker 1>your current cloud provider and you're trying to

00:23:56.279 --> 00:23:57.880
<v Speaker 1>resolve your issues with the

00:23:58.855 --> 00:24:01.414
<v Speaker 1>with the outstanding payments with your previous cloud

00:24:01.414 --> 00:24:03.414
<v Speaker 1>provider, but you already have enough credits on

00:24:03.414 --> 00:24:05.895
<v Speaker 1>the cloud provider b. So in the in

00:24:05.895 --> 00:24:08.534
<v Speaker 1>the microservices world, you can you can easily

00:24:08.534 --> 00:24:10.775
<v Speaker 1>move these pieces from cloud provider a to

00:24:10.775 --> 00:24:12.134
<v Speaker 1>the cloud provider b

00:24:12.215 --> 00:24:15.309
<v Speaker 1>and run them almost seamlessly. With the monolithic

00:24:15.309 --> 00:24:16.029
<v Speaker 1>tools,

00:24:16.190 --> 00:24:18.429
<v Speaker 1>it can be complicated. It's not necessarily complicated

00:24:18.429 --> 00:24:20.909
<v Speaker 1>in in all cases, but monolithic

00:24:21.149 --> 00:24:24.829
<v Speaker 1>monolithic application make makes you less flexible.

00:24:26.590 --> 00:24:28.830
<v Speaker 1>You are less flexible on also in terms

00:24:28.830 --> 00:24:29.629
<v Speaker 1>of development.

00:24:30.005 --> 00:24:32.085
<v Speaker 1>So if you if you are trying to

00:24:32.085 --> 00:24:33.045
<v Speaker 1>upgrade

00:24:33.045 --> 00:24:36.085
<v Speaker 1>some minor piece, but minor but essential piece

00:24:36.085 --> 00:24:38.245
<v Speaker 1>of your monolithic application will have to rebuild

00:24:38.245 --> 00:24:40.325
<v Speaker 1>the whole application. It will take some time.

00:24:40.325 --> 00:24:42.245
<v Speaker 1>It will take some development resources.

00:24:43.125 --> 00:24:43.845
<v Speaker 1>It may

00:24:44.179 --> 00:24:45.539
<v Speaker 1>it may have even

00:24:46.020 --> 00:24:47.460
<v Speaker 1>some compatibility

00:24:47.460 --> 00:24:49.620
<v Speaker 1>issues in the future. But if you upgrade

00:24:49.620 --> 00:24:51.059
<v Speaker 1>in the small piece of the model, we

00:24:51.059 --> 00:24:53.700
<v Speaker 1>take a look of the microservices application, I'm

00:24:53.700 --> 00:24:55.460
<v Speaker 1>sorry. If you upgrade in a small piece

00:24:55.460 --> 00:24:57.940
<v Speaker 1>of the microservices applications, you're just upgrading the

00:24:57.940 --> 00:25:00.495
<v Speaker 1>same that that single piece of that seed.

00:25:00.815 --> 00:25:02.975
<v Speaker 1>All the remaining all the remaining parts of

00:25:02.975 --> 00:25:04.975
<v Speaker 1>your microsources microsources

00:25:04.975 --> 00:25:08.815
<v Speaker 1>structure will remain the same and unchanged,

00:25:08.815 --> 00:25:10.975
<v Speaker 1>and we don't don't have to rebuild them

00:25:10.975 --> 00:25:13.615
<v Speaker 1>again from scratch and test the complete compatibility

00:25:13.615 --> 00:25:15.135
<v Speaker 1>with the new platform and so.

00:25:16.679 --> 00:25:18.440
<v Speaker 1>So, again, various cases,

00:25:18.760 --> 00:25:21.159
<v Speaker 1>if you're running if you're just running something

00:25:21.159 --> 00:25:24.679
<v Speaker 1>like the basic front end application

00:25:25.080 --> 00:25:27.799
<v Speaker 1>on a single machine that is located somewhere

00:25:27.799 --> 00:25:29.880
<v Speaker 1>and this is the primary business case for

00:25:29.880 --> 00:25:30.520
<v Speaker 1>your organization,

00:25:31.174 --> 00:25:33.735
<v Speaker 1>you may consider just using that static website

00:25:33.735 --> 00:25:36.135
<v Speaker 1>even not containerizing that just running something like

00:25:36.135 --> 00:25:37.815
<v Speaker 1>an engine x and that's it.

00:25:38.135 --> 00:25:39.895
<v Speaker 0>Yep. At the same time, if you'll run

00:25:39.895 --> 00:25:41.815
<v Speaker 1>different pieces of the application like the front

00:25:41.815 --> 00:25:42.855
<v Speaker 1>end front

00:25:42.934 --> 00:25:45.495
<v Speaker 1>end app, back end apps, some database,

00:25:46.130 --> 00:25:46.850
<v Speaker 1>some

00:25:47.170 --> 00:25:49.730
<v Speaker 1>as traditional pieces of code that should be

00:25:49.730 --> 00:25:51.730
<v Speaker 1>added as the extensions and so on. So

00:25:51.730 --> 00:25:54.370
<v Speaker 1>this was considered in a conversion days for

00:25:54.370 --> 00:25:56.290
<v Speaker 1>the capture into the microservices

00:25:56.290 --> 00:25:56.690
<v Speaker 1>one.

00:25:58.265 --> 00:25:59.785
<v Speaker 0>Okay. There I mean, there was a lot

00:25:59.785 --> 00:26:01.465
<v Speaker 0>there. There's some really great points I think

00:26:01.465 --> 00:26:03.145
<v Speaker 0>that people need to consider when they're they're

00:26:03.145 --> 00:26:05.305
<v Speaker 0>they're tasked with this question at their organization.

00:26:05.305 --> 00:26:06.905
<v Speaker 0>I mean, I think what I'm taking away

00:26:06.905 --> 00:26:08.665
<v Speaker 0>from what you said there is, like,

00:26:09.065 --> 00:26:11.385
<v Speaker 0>cloud native should probably be the default, and

00:26:11.385 --> 00:26:14.660
<v Speaker 0>you should identify which use cases, which applications

00:26:14.660 --> 00:26:16.980
<v Speaker 0>shouldn't be rather than the model if it's

00:26:16.980 --> 00:26:18.740
<v Speaker 0>a default and then trying to work out

00:26:18.740 --> 00:26:20.340
<v Speaker 0>when to be cloud native. So

00:26:21.220 --> 00:26:22.900
<v Speaker 0>the people that are listening to this should

00:26:22.900 --> 00:26:23.539
<v Speaker 0>just say,

00:26:24.020 --> 00:26:25.860
<v Speaker 0>this is a cloud native application until I

00:26:25.860 --> 00:26:27.815
<v Speaker 0>have a reason not to do it. Another

00:26:27.815 --> 00:26:29.575
<v Speaker 0>kind of really prominent thing that you were

00:26:30.135 --> 00:26:31.575
<v Speaker 0>you came back to a few times there

00:26:31.575 --> 00:26:32.534
<v Speaker 0>was just the

00:26:32.775 --> 00:26:35.174
<v Speaker 0>fact that the microservices allows you to contain

00:26:35.735 --> 00:26:38.055
<v Speaker 0>logic into small sections, small parts that we

00:26:38.055 --> 00:26:40.590
<v Speaker 0>can move out, we can replace, we we

00:26:40.590 --> 00:26:42.830
<v Speaker 0>can iterate on and the amount of knowledge

00:26:42.830 --> 00:26:43.950
<v Speaker 0>you need to be able to do that

00:26:43.950 --> 00:26:45.710
<v Speaker 0>is much more minimal than having to understand

00:26:45.710 --> 00:26:47.470
<v Speaker 0>like a whole car for instance. You might

00:26:47.470 --> 00:26:49.470
<v Speaker 0>just understand the steering wheel, the gearbox, the

00:26:49.470 --> 00:26:52.030
<v Speaker 0>clutch, etcetera. And I think that works really

00:26:52.030 --> 00:26:52.670
<v Speaker 0>well. So

00:26:53.775 --> 00:26:55.935
<v Speaker 0>let me turn the question around a little

00:26:55.935 --> 00:26:56.975
<v Speaker 0>bit then. Macro

00:26:57.615 --> 00:26:59.775
<v Speaker 0>services and cloud native architectures allow us to

00:26:59.775 --> 00:27:02.175
<v Speaker 0>build smaller components that we can understand. Do

00:27:02.175 --> 00:27:04.095
<v Speaker 0>we need to move the simplicity from our

00:27:04.095 --> 00:27:06.255
<v Speaker 0>app do we need to move complexity from

00:27:06.255 --> 00:27:08.540
<v Speaker 0>our applications or is it just pushed away

00:27:08.540 --> 00:27:09.100
<v Speaker 0>somewhere?

00:27:10.620 --> 00:27:12.539
<v Speaker 1>So fun fact that with

00:27:12.780 --> 00:27:15.900
<v Speaker 1>when we're comparing, again, microsources and monolithic

00:27:15.900 --> 00:27:19.740
<v Speaker 1>monolithic applications, we're adding extra complexity to to

00:27:19.740 --> 00:27:20.780
<v Speaker 1>the microservices

00:27:20.780 --> 00:27:21.420
<v Speaker 1>applications.

00:27:22.475 --> 00:27:24.075
<v Speaker 1>Because, again, you have to

00:27:24.635 --> 00:27:27.435
<v Speaker 1>you have to connect together various pieces of

00:27:27.435 --> 00:27:27.995
<v Speaker 1>the

00:27:28.395 --> 00:27:30.955
<v Speaker 1>different, like, different pieces of code.

00:27:31.195 --> 00:27:33.515
<v Speaker 1>For example, how can you hear how can

00:27:33.515 --> 00:27:35.515
<v Speaker 1>you bundle easily? How can you connect these

00:27:35.515 --> 00:27:37.120
<v Speaker 1>also piece of code that is written in

00:27:37.120 --> 00:27:38.639
<v Speaker 1>pilot, for example, in Go?

00:27:39.040 --> 00:27:39.840
<v Speaker 1>It's

00:27:39.919 --> 00:27:41.279
<v Speaker 1>almost impossible

00:27:41.440 --> 00:27:44.160
<v Speaker 1>in the in in the different in the

00:27:44.160 --> 00:27:46.639
<v Speaker 1>different cases, like, with the monolithic applications.

00:27:46.799 --> 00:27:48.080
<v Speaker 1>With microservices,

00:27:48.080 --> 00:27:50.559
<v Speaker 1>you'll have to add some extra extra level

00:27:50.559 --> 00:27:52.995
<v Speaker 1>of instructions just to connect it. In this

00:27:52.995 --> 00:27:55.315
<v Speaker 1>case, you'll you'll need you'll

00:27:55.315 --> 00:27:57.955
<v Speaker 1>need to have some universal set of set

00:27:57.955 --> 00:27:59.875
<v Speaker 1>of APIs within your application

00:28:00.115 --> 00:28:02.995
<v Speaker 1>where you can connect these different different pieces

00:28:02.995 --> 00:28:05.075
<v Speaker 1>of your applications that are located on a

00:28:05.075 --> 00:28:05.555
<v Speaker 1>different

00:28:06.620 --> 00:28:09.019
<v Speaker 1>different size of this field, let's call it.

00:28:09.340 --> 00:28:10.779
<v Speaker 1>Let's call it this way.

00:28:11.820 --> 00:28:14.539
<v Speaker 0>Yes. The minute we we apply this architecture

00:28:14.539 --> 00:28:16.700
<v Speaker 0>to our applications, we have a distributed application,

00:28:16.700 --> 00:28:18.779
<v Speaker 0>and that brings a whole host of complexity

00:28:18.779 --> 00:28:21.405
<v Speaker 0>to it. So whether services are getting simpler,

00:28:21.405 --> 00:28:22.924
<v Speaker 0>we're I guess that's all now in the

00:28:22.924 --> 00:28:25.485
<v Speaker 0>infrastructure there, which is where Kubernetes comes in

00:28:25.485 --> 00:28:27.085
<v Speaker 0>and and saves the day. Would you say

00:28:27.085 --> 00:28:28.365
<v Speaker 0>Kubernetes solves

00:28:28.924 --> 00:28:31.565
<v Speaker 0>a lot of the complexities or undistributed applications,

00:28:31.565 --> 00:28:32.525
<v Speaker 0>and how does it do that?

00:28:33.920 --> 00:28:38.240
<v Speaker 1>Again, Kubernetes is an extremely complex tool. So

00:28:38.480 --> 00:28:41.280
<v Speaker 1>it will add enough complexity to your general

00:28:41.280 --> 00:28:42.080
<v Speaker 1>architecture,

00:28:42.480 --> 00:28:43.760
<v Speaker 1>but it will remove

00:28:44.895 --> 00:28:45.775
<v Speaker 1>enough

00:28:45.775 --> 00:28:48.975
<v Speaker 1>endpoints for you to manage or and to

00:28:48.975 --> 00:28:51.615
<v Speaker 1>manage and to use your your whole

00:28:52.095 --> 00:28:53.455
<v Speaker 1>your whole level of

00:28:53.855 --> 00:28:57.294
<v Speaker 1>of the your whole set of instructions there.

00:28:57.535 --> 00:29:01.375
<v Speaker 1>So Kubernetes is an extremely complex tool, but

00:29:01.030 --> 00:29:03.750
<v Speaker 1>will simplify your life in some in some

00:29:03.750 --> 00:29:04.789
<v Speaker 1>different cases.

00:29:06.390 --> 00:29:07.110
<v Speaker 1>Again,

00:29:07.270 --> 00:29:08.629
<v Speaker 1>a good sample of

00:29:08.870 --> 00:29:11.510
<v Speaker 1>where where and how Kubernetes can be essential

00:29:11.510 --> 00:29:14.070
<v Speaker 1>for you, I just mentioned, like, five minutes

00:29:13.515 --> 00:29:15.675
<v Speaker 1>ago. So you can have you can run

00:29:15.675 --> 00:29:17.755
<v Speaker 1>the same set of applications and control them

00:29:17.755 --> 00:29:20.315
<v Speaker 1>from the single control plane, from the single

00:29:20.475 --> 00:29:21.674
<v Speaker 1>control point

00:29:21.995 --> 00:29:24.235
<v Speaker 1>even if your applications should be should be

00:29:24.235 --> 00:29:26.075
<v Speaker 1>provisioned in the private

00:29:26.075 --> 00:29:28.235
<v Speaker 1>cloud data center that is located in The

00:29:28.235 --> 00:29:29.115
<v Speaker 1>United States

00:29:29.490 --> 00:29:32.129
<v Speaker 1>and on a public cloud that is based

00:29:32.130 --> 00:29:33.970
<v Speaker 1>somewhere in Japan, for example.

00:29:34.770 --> 00:29:36.610
<v Speaker 1>But you can still control the same applications

00:29:36.610 --> 00:29:38.850
<v Speaker 1>from the same place, your single control plane,

00:29:38.850 --> 00:29:40.850
<v Speaker 1>and you, as an operator,

00:29:41.090 --> 00:29:43.570
<v Speaker 1>you'll you'll have to interact only with that

00:29:43.570 --> 00:29:45.465
<v Speaker 1>single control plane. Control plane. Everything else will

00:29:45.465 --> 00:29:46.905
<v Speaker 1>be handled by Kubernetes.

00:29:49.065 --> 00:29:49.784
<v Speaker 0>Excellent.

00:29:50.185 --> 00:29:53.065
<v Speaker 0>Let's tackle a viewer question then, which I

00:29:53.065 --> 00:29:55.545
<v Speaker 0>think kind of segues nicely right now. So

00:29:55.545 --> 00:29:56.825
<v Speaker 0>John McCabe is asking,

00:29:57.880 --> 00:29:59.640
<v Speaker 0>what are some of the common or avoidable

00:29:59.640 --> 00:30:02.919
<v Speaker 0>missteps or pitfalls when organizations adopt cloud native?

00:30:05.240 --> 00:30:06.200
<v Speaker 1>The most

00:30:06.760 --> 00:30:08.279
<v Speaker 1>the most common

00:30:08.440 --> 00:30:11.160
<v Speaker 1>the most common misstep is that

00:30:12.255 --> 00:30:14.815
<v Speaker 1>sometimes people are considering

00:30:15.535 --> 00:30:17.135
<v Speaker 1>cloud native as

00:30:18.415 --> 00:30:20.735
<v Speaker 1>you know, like, when people are considering that

00:30:20.735 --> 00:30:23.295
<v Speaker 1>cloud native can solve all their questions,

00:30:23.775 --> 00:30:24.335
<v Speaker 1>but

00:30:24.575 --> 00:30:25.375
<v Speaker 1>it doesn't.

00:30:26.640 --> 00:30:29.200
<v Speaker 1>And the reason here is that CloudNet is

00:30:29.200 --> 00:30:30.560
<v Speaker 1>not a silver bullet.

00:30:30.720 --> 00:30:33.360
<v Speaker 1>Kubernetes and containers are not a silver bullet.

00:30:33.440 --> 00:30:36.560
<v Speaker 1>You still have to develop your locations and

00:30:36.560 --> 00:30:37.600
<v Speaker 1>your

00:30:38.095 --> 00:30:41.055
<v Speaker 1>your configuration and and design your architecture in

00:30:41.055 --> 00:30:42.655
<v Speaker 1>the most efficient way.

00:30:42.735 --> 00:30:45.295
<v Speaker 1>You it's it's a big mistake

00:30:45.295 --> 00:30:47.615
<v Speaker 1>to to think that if even if you

00:30:47.615 --> 00:30:48.895
<v Speaker 1>develop your

00:30:48.975 --> 00:30:49.935
<v Speaker 1>architecture

00:30:49.935 --> 00:30:52.860
<v Speaker 1>and your application in in some where way

00:30:52.860 --> 00:30:55.180
<v Speaker 1>the next will solve it for you. It's

00:30:55.180 --> 00:30:56.059
<v Speaker 1>not the case.

00:30:57.660 --> 00:31:00.780
<v Speaker 1>Even even it will be more more difficult

00:31:00.780 --> 00:31:01.340
<v Speaker 1>to

00:31:01.580 --> 00:31:04.780
<v Speaker 1>to adapt and redesign your application and your

00:31:04.780 --> 00:31:07.755
<v Speaker 1>your architecture if you've if you develop this

00:31:07.755 --> 00:31:10.155
<v Speaker 1>in in some non efficient way and to

00:31:10.155 --> 00:31:12.475
<v Speaker 1>enhance it to be more efficient later.

00:31:13.195 --> 00:31:13.835
<v Speaker 1>So

00:31:15.515 --> 00:31:16.315
<v Speaker 1>the the

00:31:16.795 --> 00:31:18.475
<v Speaker 1>the the basic the basic

00:31:19.220 --> 00:31:21.140
<v Speaker 1>probably the basic point here,

00:31:21.460 --> 00:31:24.340
<v Speaker 1>you still have to write some good code

00:31:24.340 --> 00:31:26.420
<v Speaker 1>and some efficient code to be to be

00:31:26.420 --> 00:31:29.540
<v Speaker 1>to be run somewhere, and it doesn't matter

00:31:29.540 --> 00:31:31.220
<v Speaker 1>if we would be around containers,

00:31:31.425 --> 00:31:34.305
<v Speaker 1>we should buy Kubernetes or just be around

00:31:34.305 --> 00:31:36.545
<v Speaker 1>somewhere on the pure bimetal

00:31:36.545 --> 00:31:37.425
<v Speaker 1>SDS.

00:31:38.785 --> 00:31:39.585
<v Speaker 0>Yeah.

00:31:39.585 --> 00:31:41.345
<v Speaker 0>Definitely. I think that, you know, there's a

00:31:41.345 --> 00:31:43.025
<v Speaker 0>lot of maturity

00:31:43.025 --> 00:31:44.705
<v Speaker 0>with regards to writing software that has to

00:31:44.705 --> 00:31:45.745
<v Speaker 0>be kind of

00:31:46.490 --> 00:31:48.490
<v Speaker 0>understood and you have to have solved a

00:31:48.490 --> 00:31:49.929
<v Speaker 0>lot. You've you've got to understand some of

00:31:49.929 --> 00:31:51.850
<v Speaker 0>the problems that cloud native solves before you

00:31:51.850 --> 00:31:53.450
<v Speaker 0>can start applying it as a solution for

00:31:53.450 --> 00:31:55.769
<v Speaker 0>everything. I think is what's really important. And

00:31:55.769 --> 00:31:57.370
<v Speaker 0>that's kinda what I got from what you

00:31:57.370 --> 00:31:59.294
<v Speaker 0>were saying like Yeah. If you don't understand

00:31:59.455 --> 00:32:01.535
<v Speaker 0>the past problems and you're just applying a

00:32:01.535 --> 00:32:03.455
<v Speaker 0>solution that you don't really know what is

00:32:03.455 --> 00:32:05.614
<v Speaker 0>solving yet, and that's gonna lead you down

00:32:05.934 --> 00:32:07.695
<v Speaker 0>probably a trap, a whole bunch of errors

00:32:07.695 --> 00:32:10.255
<v Speaker 0>that otherwise you may have you may be

00:32:10.255 --> 00:32:12.440
<v Speaker 0>able to fix. I think I made it

00:32:12.440 --> 00:32:14.120
<v Speaker 0>right now. I get it. Okay. Yeah. So

00:32:15.000 --> 00:32:16.679
<v Speaker 0>It's something I I've seen a lot.

00:32:17.080 --> 00:32:18.200
<v Speaker 0>You know, I go to a lot of

00:32:18.200 --> 00:32:20.280
<v Speaker 0>conferences as I'm sure you do as well.

00:32:20.520 --> 00:32:21.320
<v Speaker 0>People

00:32:21.400 --> 00:32:23.000
<v Speaker 0>are always asking for what is what is

00:32:23.000 --> 00:32:24.120
<v Speaker 0>the first step?

00:32:24.360 --> 00:32:25.880
<v Speaker 0>And I'm I'm gonna

00:32:26.365 --> 00:32:27.885
<v Speaker 0>say what I normally say and then say

00:32:27.885 --> 00:32:29.164
<v Speaker 0>that it's also the worst advice that I

00:32:29.164 --> 00:32:30.605
<v Speaker 0>always give. And I still give this advice

00:32:30.605 --> 00:32:32.284
<v Speaker 0>but I think there's some there's a reason

00:32:32.284 --> 00:32:33.885
<v Speaker 0>for that. So when people say what is

00:32:33.885 --> 00:32:35.644
<v Speaker 0>the first step, I normally tell them just

00:32:35.965 --> 00:32:38.445
<v Speaker 0>containerize your application and and deploy it as

00:32:38.445 --> 00:32:40.205
<v Speaker 0>it is. Like, know, just getting

00:32:40.690 --> 00:32:42.210
<v Speaker 0>and and when I say that, what I'm

00:32:42.210 --> 00:32:43.410
<v Speaker 0>asking them to do is to build a

00:32:43.410 --> 00:32:45.250
<v Speaker 0>CI pipeline where they build an image and

00:32:45.250 --> 00:32:47.090
<v Speaker 0>run a places which pushes

00:32:47.090 --> 00:32:48.770
<v Speaker 0>them down the 12 factor path.

00:32:49.330 --> 00:32:50.850
<v Speaker 0>But then it's also the worst advice to

00:32:50.850 --> 00:32:52.690
<v Speaker 0>give because people take that container image and

00:32:52.690 --> 00:32:54.615
<v Speaker 0>throw Kubernetes. And it's the only service, the

00:32:54.615 --> 00:32:56.055
<v Speaker 0>only pod and they're just scaling it on

00:32:56.055 --> 00:32:58.375
<v Speaker 0>the architecture using the Kubernetes API.

00:32:58.695 --> 00:33:00.535
<v Speaker 0>And I think that's also has a huge

00:33:00.535 --> 00:33:03.335
<v Speaker 0>detrimental effect on them because they did again,

00:33:03.335 --> 00:33:05.575
<v Speaker 0>they don't understand the problems that Kubernetes is

00:33:05.575 --> 00:33:09.060
<v Speaker 0>solving with with networking and service discovery and

00:33:09.060 --> 00:33:10.900
<v Speaker 0>health checks and all this stuff because they're

00:33:10.900 --> 00:33:13.220
<v Speaker 0>not necessarily using those components.

00:33:14.100 --> 00:33:15.380
<v Speaker 0>So I'm curious.

00:33:16.660 --> 00:33:18.340
<v Speaker 0>I give a bad advice, it sounds, but

00:33:18.340 --> 00:33:20.695
<v Speaker 0>I'm hopefully trying to help people. What do

00:33:20.695 --> 00:33:22.215
<v Speaker 0>you think is, like, a good first step

00:33:22.215 --> 00:33:24.855
<v Speaker 0>for people that wanna adopt Cooper adopt cloud

00:33:24.855 --> 00:33:27.094
<v Speaker 0>native coming from maybe a monolithic background?

00:33:28.375 --> 00:33:31.255
<v Speaker 1>My first my advice about the first step

00:33:31.255 --> 00:33:33.575
<v Speaker 1>would be learn your own code.

00:33:34.410 --> 00:33:36.490
<v Speaker 1>Know what you are writing,

00:33:36.570 --> 00:33:38.650
<v Speaker 1>know what you are building, know what are

00:33:38.650 --> 00:33:39.370
<v Speaker 1>deploying.

00:33:40.650 --> 00:33:42.890
<v Speaker 1>If you if you don't know what what

00:33:42.890 --> 00:33:45.450
<v Speaker 1>you're using, you don't know what you're trying

00:33:45.450 --> 00:33:46.250
<v Speaker 1>to adopt

00:33:46.575 --> 00:33:48.975
<v Speaker 1>for the cloud native for the cloud native

00:33:48.975 --> 00:33:50.094
<v Speaker 1>infrastructure,

00:33:50.575 --> 00:33:52.575
<v Speaker 1>you there is a high chance that you'll

00:33:52.575 --> 00:33:54.495
<v Speaker 1>have some issues with with

00:33:54.495 --> 00:33:57.054
<v Speaker 1>the immediate adoption or you you may have

00:33:57.054 --> 00:33:59.695
<v Speaker 1>some issues later during the adoption cycle.

00:34:00.169 --> 00:34:02.330
<v Speaker 1>Learn what you want what you're doing,

00:34:02.809 --> 00:34:03.369
<v Speaker 1>and

00:34:03.690 --> 00:34:07.289
<v Speaker 1>the second the second first step is learn

00:34:07.289 --> 00:34:09.929
<v Speaker 1>that that technologies that you're planning to use.

00:34:09.929 --> 00:34:10.890
<v Speaker 1>Learn Kubernetes.

00:34:11.050 --> 00:34:13.244
<v Speaker 1>Play with Kubernetes. Play with Kubernetes, deploy on

00:34:13.244 --> 00:34:15.565
<v Speaker 1>each on your local machine, your local laptop,

00:34:15.565 --> 00:34:16.284
<v Speaker 1>for example.

00:34:16.605 --> 00:34:19.804
<v Speaker 1>Try to run some some basic applications, understand

00:34:20.125 --> 00:34:23.645
<v Speaker 1>what kind of potential even potential issues and

00:34:23.645 --> 00:34:25.724
<v Speaker 1>potential complexity that can Kubernetes

00:34:26.250 --> 00:34:28.650
<v Speaker 1>and to the application and that Kubernetes can

00:34:28.650 --> 00:34:29.850
<v Speaker 1>add to the environment.

00:34:31.210 --> 00:34:32.250
<v Speaker 1>Good case,

00:34:33.050 --> 00:34:34.410
<v Speaker 1>you may have the,

00:34:35.530 --> 00:34:37.050
<v Speaker 1>like, the tiny

00:34:37.050 --> 00:34:39.929
<v Speaker 1>tiny machine somewhere in a public cloud, you

00:34:39.929 --> 00:34:42.715
<v Speaker 1>know, data, etcetera. Whereas cloud providers that are

00:34:42.715 --> 00:34:45.675
<v Speaker 1>offering, like, something like the micro micro VM

00:34:45.675 --> 00:34:47.915
<v Speaker 1>or tiny VM or something like that, and

00:34:47.915 --> 00:34:49.995
<v Speaker 1>their public public cloud offerings,

00:34:50.235 --> 00:34:52.395
<v Speaker 1>typically, is a part of the free tier

00:34:52.395 --> 00:34:54.555
<v Speaker 1>where you can you you may receive

00:34:54.955 --> 00:34:56.635
<v Speaker 1>you may receive something like

00:34:57.810 --> 00:34:58.770
<v Speaker 1>500

00:34:58.770 --> 00:35:02.290
<v Speaker 1>megabytes of the of of RAM,

00:35:02.610 --> 00:35:05.570
<v Speaker 1>something like one virtual CPE, which is shared

00:35:05.570 --> 00:35:06.370
<v Speaker 1>across

00:35:06.770 --> 00:35:08.130
<v Speaker 1>across the whole

00:35:08.610 --> 00:35:11.490
<v Speaker 1>across the whole rack where this this machine

00:35:11.490 --> 00:35:14.935
<v Speaker 1>is this virtual machine is deployed. So sometimes

00:35:14.935 --> 00:35:17.735
<v Speaker 1>people are trying to use this this tiny

00:35:17.735 --> 00:35:20.855
<v Speaker 1>tiny VM, tiny machine to run Kubernetes and

00:35:20.855 --> 00:35:24.375
<v Speaker 1>run some applications within it. But

00:35:25.655 --> 00:35:27.490
<v Speaker 1>the typical Kubernetes cluster

00:35:27.490 --> 00:35:30.289
<v Speaker 1>these days might require around one one gigabyte

00:35:30.289 --> 00:35:33.010
<v Speaker 1>of RAM just to just run itself it

00:35:33.010 --> 00:35:35.090
<v Speaker 1>it it itself. So

00:35:35.970 --> 00:35:40.049
<v Speaker 1>you can run even Kubernetes itself without any

00:35:40.355 --> 00:35:42.675
<v Speaker 1>without any workloads on that machine.

00:35:42.835 --> 00:35:44.675
<v Speaker 1>But you can easily run your

00:35:44.755 --> 00:35:48.035
<v Speaker 1>your small single goal and based application there,

00:35:48.035 --> 00:35:48.915
<v Speaker 1>for example.

00:35:49.714 --> 00:35:52.355
<v Speaker 1>So, again, learn your code and learn your

00:35:52.355 --> 00:35:53.795
<v Speaker 1>tools that you're trying to use.

00:35:55.109 --> 00:35:57.270
<v Speaker 1>As much as as much as difficult to

00:35:57.270 --> 00:36:00.310
<v Speaker 1>run Kubernetes cluster on a 500

00:36:01.029 --> 00:36:02.790
<v Speaker 1>megabytes RAM machine,

00:36:03.670 --> 00:36:06.710
<v Speaker 1>the same in absolutely the same way, it's

00:36:06.585 --> 00:36:10.665
<v Speaker 1>terribly difficult to run some simple simple application

00:36:11.625 --> 00:36:12.505
<v Speaker 1>in a

00:36:12.905 --> 00:36:16.105
<v Speaker 1>highly highly distributed, highly scaled environment

00:36:16.425 --> 00:36:18.744
<v Speaker 1>on a few thousand nodes without any kind

00:36:18.744 --> 00:36:22.185
<v Speaker 1>of orchestration, without any kind of containerized solutions

00:36:22.185 --> 00:36:23.200
<v Speaker 1>like Kubernetes.

00:36:24.800 --> 00:36:26.160
<v Speaker 0>Okay. Awesome.

00:36:26.960 --> 00:36:27.600
<v Speaker 0>So

00:36:27.840 --> 00:36:30.080
<v Speaker 0>let's go back to something that you you

00:36:30.080 --> 00:36:32.240
<v Speaker 0>mentioned earlier. You when you were talking about

00:36:32.240 --> 00:36:33.040
<v Speaker 0>microservices,

00:36:33.040 --> 00:36:34.880
<v Speaker 0>you talked about databases.

00:36:34.880 --> 00:36:36.480
<v Speaker 0>Now we did have a a viewer submit

00:36:36.480 --> 00:36:38.994
<v Speaker 0>a question before we started, and their their

00:36:38.994 --> 00:36:40.835
<v Speaker 0>question was, do I really need a database

00:36:40.835 --> 00:36:41.875
<v Speaker 0>per service?

00:36:41.955 --> 00:36:43.715
<v Speaker 0>This sounds like an awful lot of work.

00:36:44.915 --> 00:36:47.395
<v Speaker 0>So do you have any thoughts or opinions

00:36:47.395 --> 00:36:49.635
<v Speaker 0>that or even advice to people that are

00:36:49.635 --> 00:36:51.795
<v Speaker 0>not sure how to structure their their stateful

00:36:51.795 --> 00:36:54.035
<v Speaker 0>services and databases and back end stores, etcetera?

00:36:54.810 --> 00:36:56.730
<v Speaker 1>Yeah. Again, it depends it depends on the

00:36:56.730 --> 00:36:57.610
<v Speaker 1>use cases

00:36:57.930 --> 00:36:59.850
<v Speaker 1>the use cases of your application

00:36:59.930 --> 00:37:02.330
<v Speaker 1>and the use cases for your databases.

00:37:02.970 --> 00:37:04.650
<v Speaker 1>The most typical way

00:37:05.930 --> 00:37:08.490
<v Speaker 1>especially the early days of Kubernetes that I've

00:37:08.490 --> 00:37:10.865
<v Speaker 1>I've been following, and I've I've noticed that

00:37:11.105 --> 00:37:14.224
<v Speaker 1>multiple companies and even multiple enterprises

00:37:14.224 --> 00:37:16.625
<v Speaker 1>have been using this that use can try

00:37:16.625 --> 00:37:19.265
<v Speaker 1>services in the cloud native the cloud native

00:37:19.265 --> 00:37:21.905
<v Speaker 1>technologies and the cloud native architecture

00:37:21.905 --> 00:37:23.025
<v Speaker 1>for the stateful

00:37:23.505 --> 00:37:24.785
<v Speaker 1>for the stateless services.

00:37:25.190 --> 00:37:27.110
<v Speaker 1>But for the stateful workloads,

00:37:27.270 --> 00:37:28.790
<v Speaker 1>you use some dedicated

00:37:29.110 --> 00:37:31.990
<v Speaker 1>use some dedicated database cluster that you that

00:37:31.990 --> 00:37:34.310
<v Speaker 1>is just plugged into your

00:37:34.630 --> 00:37:36.390
<v Speaker 1>Kubernetes cluster, for example.

00:37:36.870 --> 00:37:40.070
<v Speaker 1>So your database should not be necessarily

00:37:40.470 --> 00:37:42.715
<v Speaker 1>should not be necessarily containerized,

00:37:42.715 --> 00:37:45.515
<v Speaker 1>and it should not necessarily be being run

00:37:45.515 --> 00:37:48.235
<v Speaker 1>within within the Kubernetes cluster, for example.

00:37:48.795 --> 00:37:50.795
<v Speaker 1>But you can still use all the benefits

00:37:50.795 --> 00:37:53.515
<v Speaker 1>of using devs k full services with Kubernetes.

00:37:54.119 --> 00:37:57.319
<v Speaker 1>But, again, there are so many various cases

00:37:57.319 --> 00:38:00.760
<v Speaker 1>where you should use even databases with Kubernetes

00:38:01.000 --> 00:38:03.319
<v Speaker 1>and try enough cases where you shouldn't do

00:38:03.319 --> 00:38:03.800
<v Speaker 1>it.

00:38:05.720 --> 00:38:08.075
<v Speaker 0>Yeah. I I think I I think this

00:38:08.075 --> 00:38:09.994
<v Speaker 0>is a hot topic and a about

00:38:10.315 --> 00:38:12.635
<v Speaker 0>should I run staple workloads in in Kubernetes?

00:38:12.635 --> 00:38:15.115
<v Speaker 0>Yeah. I'm firmly on the yes. I think

00:38:15.115 --> 00:38:17.674
<v Speaker 0>we should be running a database using Kubernetes.

00:38:17.674 --> 00:38:20.315
<v Speaker 0>I think if we look at the benefits,

00:38:20.420 --> 00:38:22.820
<v Speaker 0>you know, of health checks, reconciliation,

00:38:23.620 --> 00:38:24.820
<v Speaker 0>as as long as you can solve the

00:38:24.820 --> 00:38:25.700
<v Speaker 0>storage

00:38:25.700 --> 00:38:27.140
<v Speaker 0>problem, you know, and we can talk about

00:38:27.140 --> 00:38:28.820
<v Speaker 0>CSI drivers. Not

00:38:29.060 --> 00:38:31.140
<v Speaker 0>something I'm particularly knowledgeable about, so maybe I'll

00:38:31.140 --> 00:38:32.500
<v Speaker 0>avoid that as as much as I can.

00:38:33.140 --> 00:38:34.974
<v Speaker 0>I think, you know, there's a lot of

00:38:34.974 --> 00:38:37.055
<v Speaker 0>benefits to having a stateful workloads in Kubernetes

00:38:37.055 --> 00:38:39.535
<v Speaker 0>and been able to plan and plan for

00:38:39.535 --> 00:38:41.615
<v Speaker 0>failures, know, like it's things aren't gonna go

00:38:41.615 --> 00:38:43.215
<v Speaker 0>wrong, but then we learn how to fix

00:38:43.215 --> 00:38:44.015
<v Speaker 0>them whereas

00:38:44.655 --> 00:38:47.215
<v Speaker 0>I don't know. I that the concept that

00:38:47.215 --> 00:38:49.215
<v Speaker 0>I've got a Kubernetes cluster, sorry I'm ranting

00:38:49.215 --> 00:38:50.970
<v Speaker 0>now. Got a Kubernetes cluster and I'm running

00:38:50.970 --> 00:38:52.970
<v Speaker 0>my state for workloads on VM somewhere else

00:38:52.970 --> 00:38:54.650
<v Speaker 0>that could still have the same problems they

00:38:54.650 --> 00:38:56.890
<v Speaker 0>would inside a container environment. I mean,

00:38:57.290 --> 00:38:59.610
<v Speaker 0>like, in fact, here's a question. Sorry. I'm

00:38:59.930 --> 00:39:01.450
<v Speaker 1>Of course. Going off on one.

00:39:03.085 --> 00:39:05.165
<v Speaker 0>I always tell people there's no difference from

00:39:05.165 --> 00:39:07.805
<v Speaker 0>running a database in Kubernetes using a host

00:39:07.805 --> 00:39:09.565
<v Speaker 0>path mount and fixing it to a node.

00:39:09.565 --> 00:39:11.405
<v Speaker 0>So there is just running that process on

00:39:11.405 --> 00:39:13.005
<v Speaker 0>a node. I mean, is that something you

00:39:13.005 --> 00:39:15.005
<v Speaker 0>would agree with or something that you you

00:39:15.005 --> 00:39:16.125
<v Speaker 0>think I should stop saying?

00:39:19.090 --> 00:39:19.810
<v Speaker 1>I

00:39:20.050 --> 00:39:21.890
<v Speaker 1>can't I can't respond immediately.

00:39:22.050 --> 00:39:23.810
<v Speaker 1>We have to we have to follow-up on

00:39:23.810 --> 00:39:24.450
<v Speaker 1>that.

00:39:25.810 --> 00:39:26.530
<v Speaker 1>So

00:39:26.610 --> 00:39:29.730
<v Speaker 1>as as you I'm not sure about the

00:39:30.210 --> 00:39:32.850
<v Speaker 1>about the correctness of this statement. So let's

00:39:33.145 --> 00:39:35.065
<v Speaker 1>let's skip this and discuss later.

00:39:35.865 --> 00:39:38.105
<v Speaker 0>No problem. I'll I'll maybe just run a

00:39:38.105 --> 00:39:39.625
<v Speaker 0>bit on Twitter at some point and have

00:39:39.625 --> 00:39:41.465
<v Speaker 0>the Internet tell me why I'm wrong. But

00:39:41.465 --> 00:39:43.225
<v Speaker 0>I Good good good good point for the

00:39:43.225 --> 00:39:44.905
<v Speaker 1>Twitter for the Twitter poll. Right?

00:39:46.710 --> 00:39:48.230
<v Speaker 0>Okay. Let's say I jump back to a

00:39:48.230 --> 00:39:50.630
<v Speaker 0>few of your questions then. So we

00:39:50.790 --> 00:39:52.950
<v Speaker 0>had a few questions that were essentially along

00:39:52.870 --> 00:39:54.630
<v Speaker 0>lines of do I need x in order

00:39:54.630 --> 00:39:55.670
<v Speaker 0>to be cognitive?

00:39:55.910 --> 00:39:57.350
<v Speaker 0>One of them was CICD.

00:39:57.350 --> 00:39:58.710
<v Speaker 0>One of them was good monitoring.

00:39:59.265 --> 00:40:01.345
<v Speaker 0>You know, are there any prerequisites

00:40:01.345 --> 00:40:02.625
<v Speaker 0>that people need to be

00:40:03.025 --> 00:40:05.184
<v Speaker 0>good with before they could be cloud native?

00:40:05.184 --> 00:40:07.025
<v Speaker 0>Or, I mean, is this just good code

00:40:07.025 --> 00:40:09.265
<v Speaker 0>hygiene in general? Like, people probably should have

00:40:09.265 --> 00:40:11.184
<v Speaker 0>CI and CD regardless of being cloud native.

00:40:11.490 --> 00:40:13.010
<v Speaker 0>What are your thoughts on that?

00:40:13.890 --> 00:40:16.130
<v Speaker 1>I agree I agree with your point on

00:40:16.130 --> 00:40:16.770
<v Speaker 1>on

00:40:17.170 --> 00:40:18.210
<v Speaker 1>call hygiene.

00:40:18.930 --> 00:40:20.850
<v Speaker 1>I agree with your with your points that

00:40:21.010 --> 00:40:23.970
<v Speaker 1>with your point that CI, CD tools are

00:40:23.970 --> 00:40:26.369
<v Speaker 1>mostly essential in the most in the most

00:40:26.369 --> 00:40:28.375
<v Speaker 1>complex environments these days.

00:40:29.414 --> 00:40:32.295
<v Speaker 1>Even if you're not using Kubernetes, for example,

00:40:32.295 --> 00:40:34.775
<v Speaker 1>or if you're not using the contrast clusters,

00:40:35.734 --> 00:40:37.734
<v Speaker 1>if you are running and if you're releasing

00:40:37.734 --> 00:40:38.455
<v Speaker 1>your applications

00:40:38.855 --> 00:40:41.420
<v Speaker 1>into it, if you're developing your applications frequently,

00:40:41.420 --> 00:40:43.900
<v Speaker 1>if you're releasing new pieces of code regularly,

00:40:44.060 --> 00:40:46.380
<v Speaker 1>you have to use the CI and CD

00:40:46.380 --> 00:40:47.420
<v Speaker 1>tools to

00:40:47.740 --> 00:40:48.460
<v Speaker 1>to

00:40:48.860 --> 00:40:50.540
<v Speaker 1>to deliver them properly.

00:40:51.580 --> 00:40:54.060
<v Speaker 1>So it's it's an unrelated

00:40:54.300 --> 00:40:57.335
<v Speaker 1>it's it's a related but unrelated topic to

00:40:57.335 --> 00:40:59.095
<v Speaker 1>to the cloud native world and to the

00:40:59.095 --> 00:41:02.295
<v Speaker 1>to the cloud native cloud native architecture markets.

00:41:02.375 --> 00:41:04.535
<v Speaker 1>It's a good practice to use CICD tools

00:41:04.535 --> 00:41:06.055
<v Speaker 1>with the complex environments.

00:41:06.295 --> 00:41:08.935
<v Speaker 1>It's not truly necessary in some cases. Again,

00:41:08.935 --> 00:41:09.815
<v Speaker 1>if you just

00:41:10.359 --> 00:41:12.600
<v Speaker 1>if you have just released your

00:41:12.680 --> 00:41:15.320
<v Speaker 1>your single version of your application and you

00:41:15.320 --> 00:41:17.480
<v Speaker 1>don't expect to release any any version of

00:41:17.480 --> 00:41:20.440
<v Speaker 1>your application in the over over single future.

00:41:20.440 --> 00:41:23.400
<v Speaker 1>So, again, CICD tools can x

00:41:23.244 --> 00:41:26.685
<v Speaker 1>CICD tools can add extra complexity to

00:41:27.244 --> 00:41:30.205
<v Speaker 1>to your code base and to your infrastructure.

00:41:30.685 --> 00:41:33.484
<v Speaker 1>But if you are releasing your your applications

00:41:33.484 --> 00:41:34.285
<v Speaker 1>frequently,

00:41:34.285 --> 00:41:36.125
<v Speaker 1>if you are releasing some updates frequently, so

00:41:36.125 --> 00:41:38.205
<v Speaker 1>you have deployed some patches there,

00:41:38.285 --> 00:41:40.070
<v Speaker 1>so you should use these tools.

00:41:40.310 --> 00:41:43.430
<v Speaker 1>Again, not necessarily with Kubernetes exactly and not

00:41:43.750 --> 00:41:46.790
<v Speaker 1>not only with Kubernetes clusters, but it's just

00:41:46.790 --> 00:41:47.350
<v Speaker 1>like

00:41:47.590 --> 00:41:50.150
<v Speaker 1>it's just a a good practice for everyone

00:41:50.150 --> 00:41:51.270
<v Speaker 1>who is doing this.

00:41:52.470 --> 00:41:53.510
<v Speaker 0>Alright. So,

00:41:54.995 --> 00:41:57.315
<v Speaker 0>yes, you should have CICD. Yes. You should

00:41:57.315 --> 00:41:58.435
<v Speaker 0>have good monitoring.

00:41:58.515 --> 00:42:01.075
<v Speaker 0>It's not necessarily a prerequisite to to call

00:42:01.075 --> 00:42:04.115
<v Speaker 0>the cloud native architecture. Exactly. Yes. Exactly. So

00:42:04.115 --> 00:42:06.035
<v Speaker 1>it's not a definition of cloud native to

00:42:06.035 --> 00:42:07.155
<v Speaker 1>use CICD.

00:42:07.155 --> 00:42:09.150
<v Speaker 1>Yeah. And it's not the definition of the

00:42:09.150 --> 00:42:10.430
<v Speaker 1>cloud native application,

00:42:10.590 --> 00:42:13.630
<v Speaker 1>but in the in theory. Right? But in

00:42:13.630 --> 00:42:15.790
<v Speaker 1>the practical world, not in most of the

00:42:15.790 --> 00:42:18.030
<v Speaker 1>use cases you should use, you you you

00:42:18.030 --> 00:42:20.270
<v Speaker 1>should have some good monitoring tool. You should

00:42:20.270 --> 00:42:21.470
<v Speaker 1>have some CICD

00:42:21.470 --> 00:42:24.315
<v Speaker 1>tools that will be embedded into your

00:42:24.555 --> 00:42:26.795
<v Speaker 1>into your architecture. It should be the organic

00:42:26.795 --> 00:42:28.155
<v Speaker 1>parts of your architecture.

00:42:29.195 --> 00:42:30.315
<v Speaker 0>I think I

00:42:30.555 --> 00:42:32.315
<v Speaker 0>think we've kind of also answered the final

00:42:32.315 --> 00:42:34.955
<v Speaker 0>viewer question there as well with with our

00:42:34.955 --> 00:42:37.720
<v Speaker 0>kind of answer there. The final question was,

00:42:37.799 --> 00:42:40.279
<v Speaker 0>you know, does Cloud Native complement or compete

00:42:40.279 --> 00:42:42.920
<v Speaker 0>with methodologies like agile and DevOps? And I

00:42:42.920 --> 00:42:45.160
<v Speaker 0>think the same answer applies here is that

00:42:45.160 --> 00:42:47.319
<v Speaker 0>you just should have all these good practices

00:42:47.319 --> 00:42:49.240
<v Speaker 0>in place regardless of being Cloud Native or

00:42:49.240 --> 00:42:51.185
<v Speaker 0>not. And then cloud native is just gonna

00:42:51.185 --> 00:42:53.985
<v Speaker 0>hopefully enrich those processes that you've already built

00:42:54.225 --> 00:42:57.665
<v Speaker 0>through good engineering, I guess. Yep. Yep. The

00:42:57.665 --> 00:42:59.745
<v Speaker 1>term DevOps or agile,

00:42:59.745 --> 00:43:02.785
<v Speaker 1>they've been they've been emerged way before cloud

00:43:02.785 --> 00:43:05.960
<v Speaker 1>native definition has emerged. But today

00:43:06.920 --> 00:43:10.040
<v Speaker 1>today, they're typically used in the same sentence.

00:43:10.280 --> 00:43:12.119
<v Speaker 1>Again, they're not sign in names. They're not

00:43:12.119 --> 00:43:13.400
<v Speaker 1>meaning the same,

00:43:13.640 --> 00:43:16.200
<v Speaker 1>but they are complementary

00:43:16.200 --> 00:43:16.840
<v Speaker 1>and

00:43:17.240 --> 00:43:20.680
<v Speaker 1>with with the cloud native technologies, you can

00:43:19.665 --> 00:43:21.425
<v Speaker 1>you can boost your

00:43:21.905 --> 00:43:23.825
<v Speaker 1>you can use your you can boost your

00:43:23.825 --> 00:43:27.105
<v Speaker 1>DevOps DevOps partners in a way more efficient

00:43:27.105 --> 00:43:29.745
<v Speaker 1>way that you can do before, like, ten

00:43:29.745 --> 00:43:31.825
<v Speaker 1>years ago, for example, when how many was

00:43:31.825 --> 00:43:32.225
<v Speaker 1>noticing.

00:43:33.970 --> 00:43:36.130
<v Speaker 0>Excellent. Cool. I think we've answered a lot

00:43:36.130 --> 00:43:38.130
<v Speaker 0>of of of really good questions there.

00:43:39.090 --> 00:43:39.730
<v Speaker 0>Awesome.

00:43:40.850 --> 00:43:42.530
<v Speaker 0>So is there Good news.

00:43:43.650 --> 00:43:45.250
<v Speaker 0>Yeah. Yeah. Yeah. No. It's like

00:43:46.065 --> 00:43:47.905
<v Speaker 0>it's such a I think there's a lot

00:43:47.905 --> 00:43:49.185
<v Speaker 0>of misconception. I think there's a lot of

00:43:49.185 --> 00:43:50.865
<v Speaker 0>ambiguity. I think people

00:43:50.945 --> 00:43:53.345
<v Speaker 0>you see so much, you know, on Twitter

00:43:53.345 --> 00:43:56.545
<v Speaker 0>and through articles about cloud native, about Kubernetes,

00:43:56.545 --> 00:43:58.800
<v Speaker 0>about all these tools. Of course, you know,

00:43:58.800 --> 00:44:01.600
<v Speaker 0>KubeCon and the CloudNativeCons are just such massive

00:44:01.600 --> 00:44:03.440
<v Speaker 0>events. So there's a lot of buzz and

00:44:03.440 --> 00:44:05.280
<v Speaker 0>a lot of I guess for the people

00:44:05.280 --> 00:44:07.440
<v Speaker 0>that haven't gone down this path yet, maybe

00:44:07.440 --> 00:44:09.040
<v Speaker 0>a lot of fear as well. It's quite

00:44:09.040 --> 00:44:12.545
<v Speaker 0>intimidating and, know, hopefully just taking a few

00:44:12.545 --> 00:44:14.464
<v Speaker 0>of these questions and giving people a little

00:44:14.464 --> 00:44:16.224
<v Speaker 0>bit of confidence and insight into what they

00:44:16.224 --> 00:44:17.825
<v Speaker 0>need to do this is really gonna help.

00:44:17.825 --> 00:44:19.825
<v Speaker 0>So thank you very much for joining me

00:44:19.825 --> 00:44:20.464
<v Speaker 0>today.

00:44:20.785 --> 00:44:22.545
<v Speaker 0>Thank you for inviting me. If you have

00:44:22.545 --> 00:44:24.704
<v Speaker 0>any final thoughts, you may drop them now.

00:44:24.704 --> 00:44:27.279
<v Speaker 0>Otherwise, again, thank you very much. It has

00:44:27.279 --> 00:44:28.400
<v Speaker 0>been an absolute pleasure.

00:44:28.640 --> 00:44:30.880
<v Speaker 1>Of course. Thank you for inviting me, and

00:44:30.960 --> 00:44:32.320
<v Speaker 1>glad to be here.

00:44:32.720 --> 00:44:34.480
<v Speaker 0>Alright. Well, thank you. You have a great

00:44:34.480 --> 00:44:36.079
<v Speaker 0>day, and I I will speak to you

00:44:36.079 --> 00:44:37.519
<v Speaker 0>soon. Adios. Sure.
