WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 3fcf2912-e9d6-4d75-82dc-20c3e7f10d25
Created: 2025-04-29T17:21:30.763Z
Duration: 6050.8247
Channels: 1

00:01:02.215 --> 00:01:05.494
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:01:05.494 --> 00:01:07.095
<v Speaker 0>Live at the Rawkode Academy.

00:01:07.255 --> 00:01:08.854
<v Speaker 0>I am your host Rawkode,

00:01:09.095 --> 00:01:11.174
<v Speaker 0>and I always kick myself for saying Rawkode

00:01:11.174 --> 00:01:13.174
<v Speaker 0>three times in such quick succession.

00:01:13.494 --> 00:01:17.015
<v Speaker 0>However, today we are taking a look at

00:01:15.330 --> 00:01:18.450
<v Speaker 0>the cloud native API gateway take. I'm really

00:01:18.450 --> 00:01:19.890
<v Speaker 0>excited to take a look at this project.

00:01:19.890 --> 00:01:21.890
<v Speaker 0>It brings a lot of features and functionality

00:01:21.890 --> 00:01:23.570
<v Speaker 0>to your cloud native architectures,

00:01:23.810 --> 00:01:25.010
<v Speaker 0>and we'll dive into that in just a

00:01:25.010 --> 00:01:25.490
<v Speaker 0>minute.

00:01:26.850 --> 00:01:28.485
<v Speaker 0>A little bit of housekeeping. If you're not

00:01:28.485 --> 00:01:30.485
<v Speaker 0>already subscribed to the channel, now would be

00:01:30.485 --> 00:01:32.164
<v Speaker 0>a really good time to click that button,

00:01:32.164 --> 00:01:33.445
<v Speaker 0>and feel free to click the bell to

00:01:33.445 --> 00:01:35.445
<v Speaker 0>get notifications for all new episodes.

00:01:35.685 --> 00:01:37.765
<v Speaker 0>I'd also like to encourage you to like,

00:01:37.765 --> 00:01:39.604
<v Speaker 0>comment, and share these videos to help other

00:01:39.604 --> 00:01:42.630
<v Speaker 0>people discover them. There are also membership packages

00:01:42.630 --> 00:01:45.190
<v Speaker 0>available at the academy starting as little as

00:01:45.190 --> 00:01:47.350
<v Speaker 0>$1 per month that allow you to support

00:01:47.510 --> 00:01:49.270
<v Speaker 0>this channel and all the content that is

00:01:49.270 --> 00:01:50.070
<v Speaker 0>being produced.

00:01:50.550 --> 00:01:52.950
<v Speaker 0>If you wanna continue your learning outside of

00:01:52.950 --> 00:01:54.905
<v Speaker 0>these videos, we have a rather active Discord

00:01:54.905 --> 00:01:56.825
<v Speaker 0>server where we talk about all things, cloud

00:01:56.825 --> 00:01:58.905
<v Speaker 0>native, Kubernetes, eBPF,

00:01:58.905 --> 00:02:00.505
<v Speaker 0>and everything in between.

00:02:00.825 --> 00:02:02.345
<v Speaker 0>So come and say hello, and I look

00:02:02.345 --> 00:02:03.465
<v Speaker 0>forward to meeting you.

00:02:04.105 --> 00:02:06.025
<v Speaker 0>Alright. To guide us on our journey today

00:02:06.025 --> 00:02:07.980
<v Speaker 0>into the Tyk API Gateway, I am joined

00:02:07.980 --> 00:02:09.740
<v Speaker 0>by Andy and Budap from a Tyk team.

00:02:09.740 --> 00:02:11.500
<v Speaker 0>Hi, both. How are you doing today?

00:02:13.500 --> 00:02:15.660
<v Speaker 1>Hey. Good. Thanks. Thank you for having us.

00:02:17.180 --> 00:02:18.620
<v Speaker 0>Well, thank you very much for joining me

00:02:18.620 --> 00:02:20.535
<v Speaker 0>today. It's gonna be a lot of fun

00:02:20.535 --> 00:02:22.215
<v Speaker 0>kicking the tires on this and seeing what

00:02:22.215 --> 00:02:23.655
<v Speaker 0>we can do with Tyk.

00:02:24.135 --> 00:02:26.935
<v Speaker 0>For anyone that is not familiar with yourselves,

00:02:26.935 --> 00:02:28.135
<v Speaker 0>could you please just do as an honor

00:02:28.135 --> 00:02:30.055
<v Speaker 0>of saying hello and introducing yourself? And we'll

00:02:30.055 --> 00:02:31.895
<v Speaker 0>start with you, Andy, on the left.

00:02:33.480 --> 00:02:35.960
<v Speaker 1>Yeah. Hi, everyone. I'm a

00:02:36.280 --> 00:02:40.200
<v Speaker 1>solutions architect at Tyk. I've been here for

00:02:41.000 --> 00:02:43.960
<v Speaker 1>somewhere between eighteen months and two years now.

00:02:45.245 --> 00:02:48.045
<v Speaker 1>So, yeah, I've been working in API management

00:02:48.045 --> 00:02:50.925
<v Speaker 1>a little while and, before that, quite a

00:02:50.925 --> 00:02:52.445
<v Speaker 1>bit of experience in

00:02:53.245 --> 00:02:54.605
<v Speaker 1>integration generally.

00:02:55.485 --> 00:03:01.245
<v Speaker 0>Thank you very much for sharing. And Buddha?

00:02:59.100 --> 00:03:01.740
<v Speaker 2>Hello, everyone. I am Buddha. I am a

00:03:01.740 --> 00:03:04.620
<v Speaker 2>product evangelist at Tyk, and I'm joining you

00:03:04.620 --> 00:03:06.060
<v Speaker 2>today from Singapore.

00:03:06.460 --> 00:03:08.380
<v Speaker 2>And just like Andy, actually, both of us,

00:03:08.380 --> 00:03:10.860
<v Speaker 2>we joined almost at the same time about

00:03:10.860 --> 00:03:13.435
<v Speaker 2>eighteen months ago, coincidentally

00:03:13.435 --> 00:03:15.754
<v Speaker 2>almost. And it so happened that we also

00:03:15.754 --> 00:03:17.435
<v Speaker 2>joined in right at the at the start

00:03:17.435 --> 00:03:19.275
<v Speaker 2>of the pandemic. So before I was done.

00:03:19.275 --> 00:03:20.235
<v Speaker 2>Unfortunately, we yeah.

00:03:21.435 --> 00:03:23.114
<v Speaker 2>Before it all went to hell, we joined

00:03:23.114 --> 00:03:24.075
<v Speaker 2>the company. So

00:03:25.250 --> 00:03:27.250
<v Speaker 2>but but it's been it's been quite fantastic

00:03:27.250 --> 00:03:28.610
<v Speaker 2>learning more about

00:03:29.010 --> 00:03:31.250
<v Speaker 2>API management. I think I've I've had worked

00:03:31.250 --> 00:03:32.530
<v Speaker 2>with APIs before,

00:03:33.010 --> 00:03:34.930
<v Speaker 2>but my journey into the world of API

00:03:34.930 --> 00:03:36.849
<v Speaker 2>management and what that entails with the API

00:03:36.849 --> 00:03:39.185
<v Speaker 2>gateways and all of the other things around

00:03:39.185 --> 00:03:41.345
<v Speaker 2>security and that abstraction, which we'll be talking

00:03:41.345 --> 00:03:42.145
<v Speaker 2>about today,

00:03:42.705 --> 00:03:45.345
<v Speaker 2>has been really, really fascinating to learn about.

00:03:45.425 --> 00:03:48.705
<v Speaker 2>And, that's that's fundamentally changed my perspective in

00:03:48.705 --> 00:03:51.505
<v Speaker 2>terms of how I would architect API based

00:03:51.505 --> 00:03:54.250
<v Speaker 2>solutions now. So, hopefully, that'll be something of

00:03:54.250 --> 00:03:56.730
<v Speaker 2>interest to people who are listening today as

00:03:56.730 --> 00:03:59.210
<v Speaker 2>well. So, yeah, looking forward to the session.

00:03:59.850 --> 00:04:01.850
<v Speaker 0>Alright. Thank you very much. And I I

00:04:01.850 --> 00:04:03.050
<v Speaker 0>like that you say you both joined the

00:04:03.050 --> 00:04:04.490
<v Speaker 0>company at the start of the pandemic. I

00:04:04.490 --> 00:04:06.090
<v Speaker 0>also changed job at the start of the

00:04:06.090 --> 00:04:08.625
<v Speaker 0>pandemic. And as such, I haven't actually met

00:04:08.625 --> 00:04:11.105
<v Speaker 0>most of my team, like, ever, which is

00:04:11.105 --> 00:04:11.665
<v Speaker 0>a

00:04:11.905 --> 00:04:13.504
<v Speaker 0>that was pretty crap. Right? You wanna be

00:04:13.504 --> 00:04:14.705
<v Speaker 0>able to meet up and and do the

00:04:14.705 --> 00:04:16.544
<v Speaker 0>on sites and stuff. But hopefully, things are

00:04:16.544 --> 00:04:17.185
<v Speaker 0>getting better now.

00:04:19.009 --> 00:04:21.810
<v Speaker 2>Absolutely. That's that's been exactly the thing. Because

00:04:21.970 --> 00:04:24.210
<v Speaker 2>when I joined, I think at that point,

00:04:24.210 --> 00:04:26.530
<v Speaker 2>Singapore was still okay, but they I think

00:04:26.530 --> 00:04:28.370
<v Speaker 2>Singapore was early in terms of going into

00:04:28.370 --> 00:04:29.170
<v Speaker 2>lockdowns.

00:04:29.570 --> 00:04:30.130
<v Speaker 2>So

00:04:30.610 --> 00:04:32.210
<v Speaker 2>I think as soon as I joined after

00:04:32.210 --> 00:04:33.895
<v Speaker 2>a couple of weeks, that was that was

00:04:33.895 --> 00:04:35.575
<v Speaker 2>the that was it. So work from home

00:04:35.575 --> 00:04:36.855
<v Speaker 2>was the norm pretty much.

00:04:37.495 --> 00:04:39.735
<v Speaker 2>So we've not ended up meeting either. So

00:04:39.735 --> 00:04:41.975
<v Speaker 2>fingers crossed, we'll we'll get that opportunity soon

00:04:41.975 --> 00:04:42.775
<v Speaker 2>enough. Yeah.

00:04:43.015 --> 00:04:44.615
<v Speaker 0>I think Singapore has done well. I don't

00:04:44.615 --> 00:04:45.895
<v Speaker 0>want us to try and test you about

00:04:45.895 --> 00:04:47.550
<v Speaker 0>the pandemic. Right? And I'm definitely not gonna

00:04:47.550 --> 00:04:49.230
<v Speaker 0>rant about The UK's handling of it, but

00:04:49.230 --> 00:04:51.310
<v Speaker 0>I do believe Singapore has done alright. So

00:04:51.310 --> 00:04:53.070
<v Speaker 0>that's good. Anyway,

00:04:53.470 --> 00:04:54.830
<v Speaker 0>I think we've got some slides from you,

00:04:54.830 --> 00:04:56.670
<v Speaker 0>Bitter. Right? You're gonna introduce us to to

00:04:56.670 --> 00:04:58.190
<v Speaker 0>Tyk, and then I'll do my best to

00:04:58.190 --> 00:04:59.950
<v Speaker 0>get some questions across to you as we

00:04:59.950 --> 00:05:02.590
<v Speaker 0>go. So if you wanna get your screen

00:05:02.115 --> 00:05:04.435
<v Speaker 0>prepared and to the audience, I would encourage

00:05:04.435 --> 00:05:06.914
<v Speaker 0>you to ask your questions. Drop them into

00:05:06.914 --> 00:05:08.115
<v Speaker 0>the chat, and I'll do my best to

00:05:08.115 --> 00:05:09.555
<v Speaker 0>relay them on to Andy and put it

00:05:09.555 --> 00:05:10.435
<v Speaker 0>as we go.

00:05:11.875 --> 00:05:12.275
<v Speaker 0>Okay.

00:05:14.160 --> 00:05:15.360
<v Speaker 2>Your screen is live.

00:05:16.160 --> 00:05:18.960
<v Speaker 0>Yeah. Take it away. I'll jump. Fantastic.

00:05:19.040 --> 00:05:20.640
<v Speaker 2>Okay. Yeah. So I thought I'll give a

00:05:20.640 --> 00:05:22.720
<v Speaker 2>quick introduction. These are just a few slides.

00:05:22.720 --> 00:05:24.240
<v Speaker 2>And when I say few, it's about six

00:05:24.240 --> 00:05:25.280
<v Speaker 2>or seven slides,

00:05:25.520 --> 00:05:27.040
<v Speaker 2>just to sort of set the scene for

00:05:27.040 --> 00:05:28.945
<v Speaker 2>today so that you understand a a little

00:05:28.945 --> 00:05:31.185
<v Speaker 2>bit about, what we do, really, and who

00:05:31.185 --> 00:05:32.465
<v Speaker 2>we are. So,

00:05:32.865 --> 00:05:35.025
<v Speaker 2>going into the world of cloud native API

00:05:35.025 --> 00:05:35.825
<v Speaker 2>management,

00:05:36.305 --> 00:05:39.185
<v Speaker 2>just a little bit about us, about Tyk,

00:05:39.425 --> 00:05:41.790
<v Speaker 2>how we began. We started off as an

00:05:41.790 --> 00:05:43.870
<v Speaker 2>open source project actually all the way back

00:05:43.870 --> 00:05:45.470
<v Speaker 2>in 02/2014.

00:05:45.470 --> 00:05:48.830
<v Speaker 2>Our founder, Martin, he pretty much was looking

00:05:48.830 --> 00:05:50.590
<v Speaker 2>for a solution. He found a couple of

00:05:50.590 --> 00:05:52.910
<v Speaker 2>them not particularly to his liking, so he

00:05:52.910 --> 00:05:54.910
<v Speaker 2>decided to just build one over a weekend.

00:05:54.910 --> 00:05:56.595
<v Speaker 2>And that project

00:05:57.074 --> 00:05:59.315
<v Speaker 2>gained some traction as he kept adding on

00:05:59.315 --> 00:06:01.794
<v Speaker 2>things to it. And eventually, we got to

00:06:01.794 --> 00:06:04.835
<v Speaker 2>commercializing the product in 02/2016.

00:06:05.155 --> 00:06:07.474
<v Speaker 2>So it's been a pretty solid journey over

00:06:07.474 --> 00:06:09.395
<v Speaker 2>the last, I think, about five years now

00:06:09.395 --> 00:06:09.955
<v Speaker 2>overall.

00:06:10.620 --> 00:06:11.500
<v Speaker 2>And

00:06:11.500 --> 00:06:13.660
<v Speaker 2>we've built our team pretty strongly over the

00:06:13.660 --> 00:06:15.500
<v Speaker 2>few years. And right now, I think we

00:06:15.500 --> 00:06:17.980
<v Speaker 2>have crossed our hundred team members mark,

00:06:18.620 --> 00:06:20.300
<v Speaker 2>and we are remote first. So I think

00:06:20.300 --> 00:06:22.300
<v Speaker 2>we were remote first before the pandemic hit.

00:06:22.300 --> 00:06:24.324
<v Speaker 2>So I think this has pretty much been

00:06:24.324 --> 00:06:26.485
<v Speaker 2>a norm for us in terms of working

00:06:26.485 --> 00:06:27.205
<v Speaker 2>styles.

00:06:27.605 --> 00:06:29.845
<v Speaker 2>Even though we do have offices in three

00:06:29.845 --> 00:06:33.445
<v Speaker 2>different locations at the moment, UK, Singapore, and

00:06:33.445 --> 00:06:35.525
<v Speaker 2>Atlanta in The United States, these are the

00:06:35.525 --> 00:06:38.030
<v Speaker 2>three main offices, but we have team members

00:06:38.030 --> 00:06:40.190
<v Speaker 2>in 27 different countries, I believe, at the

00:06:40.190 --> 00:06:40.750
<v Speaker 2>moment.

00:06:41.070 --> 00:06:43.150
<v Speaker 2>And so so we we could keep in

00:06:43.150 --> 00:06:46.190
<v Speaker 2>touch completely remotely anyway. So we are remote

00:06:46.190 --> 00:06:46.750
<v Speaker 2>first.

00:06:47.790 --> 00:06:49.685
<v Speaker 2>A little bit about the platform itself, and,

00:06:49.685 --> 00:06:50.884
<v Speaker 2>obviously, there there are a lot of things

00:06:50.884 --> 00:06:52.405
<v Speaker 2>that I can go on about. I think

00:06:52.405 --> 00:06:54.485
<v Speaker 2>we'll be demonstrating some of those things today,

00:06:54.485 --> 00:06:55.925
<v Speaker 2>but I I picked out a couple of

00:06:55.925 --> 00:06:58.005
<v Speaker 2>them which I thought might be useful for

00:06:58.005 --> 00:06:59.365
<v Speaker 2>people to know more about.

00:07:00.085 --> 00:07:01.605
<v Speaker 2>And that was firstly

00:07:01.845 --> 00:07:04.405
<v Speaker 2>that we are platform agnostic. What does that

00:07:04.405 --> 00:07:04.724
<v Speaker 2>mean?

00:07:05.630 --> 00:07:08.270
<v Speaker 2>We are an independent API management platform, which

00:07:08.270 --> 00:07:09.870
<v Speaker 2>means that we are not tied to any

00:07:09.870 --> 00:07:11.150
<v Speaker 2>particular ecosystem.

00:07:11.550 --> 00:07:13.230
<v Speaker 2>We are pretty much neutral when it comes

00:07:13.230 --> 00:07:16.830
<v Speaker 2>to vendors and hosting providers or any of

00:07:16.830 --> 00:07:18.430
<v Speaker 2>those other things that you might want.

00:07:19.465 --> 00:07:22.505
<v Speaker 2>We are independent of of infrastructure, so to

00:07:22.505 --> 00:07:24.905
<v Speaker 2>speak. We we pretty much work play well

00:07:24.905 --> 00:07:27.065
<v Speaker 2>with any of your existing stack.

00:07:27.385 --> 00:07:30.185
<v Speaker 2>And overall, from a component perspective, we have

00:07:31.410 --> 00:07:33.410
<v Speaker 2>a few different components, but three of them

00:07:33.410 --> 00:07:35.090
<v Speaker 2>primarily that we focus on.

00:07:35.730 --> 00:07:39.090
<v Speaker 2>Starting off with the open source API gateway,

00:07:39.090 --> 00:07:40.850
<v Speaker 2>which is what we are gonna be primarily

00:07:40.850 --> 00:07:42.050
<v Speaker 2>focusing on today.

00:07:42.450 --> 00:07:44.370
<v Speaker 2>And this is essentially the brains of the

00:07:44.370 --> 00:07:46.865
<v Speaker 2>operation. This is where all the and computation

00:07:46.865 --> 00:07:50.225
<v Speaker 2>primarily occurs when it comes to API management.

00:07:50.865 --> 00:07:53.345
<v Speaker 2>And that's coupled with our proprietary

00:07:54.145 --> 00:07:54.945
<v Speaker 2>dashboard,

00:07:54.945 --> 00:07:58.225
<v Speaker 2>which effectively provides a a graphic user interface

00:07:58.465 --> 00:08:00.865
<v Speaker 2>to interact with some of the capabilities that

00:08:00.865 --> 00:08:01.745
<v Speaker 2>we have in place.

00:08:02.440 --> 00:08:04.680
<v Speaker 2>And then we have a developer portal, which

00:08:04.680 --> 00:08:06.440
<v Speaker 2>is sort of like a lightweight

00:08:06.440 --> 00:08:08.920
<v Speaker 2>content management system in a in a sense,

00:08:08.920 --> 00:08:13.160
<v Speaker 2>which which enables you to catalog slash publish

00:08:13.160 --> 00:08:15.160
<v Speaker 2>the APIs that you've sort of managed through

00:08:15.160 --> 00:08:17.425
<v Speaker 2>Tyk or have developed as well.

00:08:17.825 --> 00:08:19.505
<v Speaker 2>So that those are the three main components.

00:08:19.505 --> 00:08:20.865
<v Speaker 2>There are a couple more that I'll touch

00:08:20.865 --> 00:08:23.185
<v Speaker 2>upon in in a little bit, but that's

00:08:23.185 --> 00:08:25.665
<v Speaker 2>sort of what the extent of our platform

00:08:25.665 --> 00:08:26.225
<v Speaker 2>is.

00:08:26.465 --> 00:08:28.305
<v Speaker 2>And I I said, we are light on

00:08:28.305 --> 00:08:29.185
<v Speaker 2>infrastructure,

00:08:29.185 --> 00:08:31.740
<v Speaker 2>and we are very, very extendable. So it's

00:08:31.740 --> 00:08:33.580
<v Speaker 2>very easy to extend the capabilities as well.

00:08:33.580 --> 00:08:34.940
<v Speaker 2>So things that you know, we we've got

00:08:34.940 --> 00:08:36.940
<v Speaker 2>a few capabilities coming out of the box.

00:08:37.260 --> 00:08:39.580
<v Speaker 2>But if that is not your liking, you

00:08:39.580 --> 00:08:41.980
<v Speaker 2>can very easily create your own plugins

00:08:42.059 --> 00:08:44.380
<v Speaker 2>in a few different languages, including,

00:08:44.700 --> 00:08:46.140
<v Speaker 2>well, JavaScript, Node. Js,

00:08:46.795 --> 00:08:49.435
<v Speaker 2>Python, and Go. Go is the language that

00:08:49.435 --> 00:08:51.755
<v Speaker 2>Tyk has been built on to keep things

00:08:51.755 --> 00:08:54.395
<v Speaker 2>really, really lightweight and and efficient.

00:08:54.795 --> 00:08:56.315
<v Speaker 2>But if you if you do choose to

00:08:56.315 --> 00:08:58.075
<v Speaker 2>do so, if you do choose to extend

00:08:58.075 --> 00:09:00.155
<v Speaker 2>the capabilities, you can do so in other

00:09:00.155 --> 00:09:00.955
<v Speaker 2>languages as well.

00:09:02.230 --> 00:09:05.350
<v Speaker 2>Then the third point is around flexibility where

00:09:05.350 --> 00:09:07.990
<v Speaker 2>we are capable of handling different API styles.

00:09:08.790 --> 00:09:11.030
<v Speaker 2>And by this, I mean, essentially, not just

00:09:11.030 --> 00:09:15.270
<v Speaker 2>REST endpoints or REST based API API

00:09:14.175 --> 00:09:17.214
<v Speaker 2>endpoints, which is typical for for most API

00:09:17.214 --> 00:09:18.335
<v Speaker 2>management platforms.

00:09:18.575 --> 00:09:21.055
<v Speaker 2>But we can also handle your more legacy

00:09:21.055 --> 00:09:22.735
<v Speaker 2>systems like like SOAP or

00:09:23.455 --> 00:09:25.455
<v Speaker 2>the more well, for the lack of better

00:09:25.455 --> 00:09:27.615
<v Speaker 2>word, the the newer evolution

00:09:27.695 --> 00:09:30.630
<v Speaker 2>of APIs, which is around GraphQL.

00:09:30.790 --> 00:09:32.389
<v Speaker 2>By no means a replacement of REST, but

00:09:32.389 --> 00:09:34.230
<v Speaker 2>it is a newer sort of technology, although

00:09:34.230 --> 00:09:35.589
<v Speaker 2>it's been around for a while. But we

00:09:35.589 --> 00:09:37.189
<v Speaker 2>are capable of handling all of these different

00:09:37.189 --> 00:09:39.350
<v Speaker 2>API styles. So regardless of what you have

00:09:39.350 --> 00:09:41.350
<v Speaker 2>as part of your stack, as part of

00:09:41.430 --> 00:09:42.550
<v Speaker 2>your API product,

00:09:43.185 --> 00:09:45.265
<v Speaker 2>you can use Tyk to to manage that,

00:09:45.265 --> 00:09:48.305
<v Speaker 2>secure it, and perhaps extend the capabilities as

00:09:48.305 --> 00:09:48.785
<v Speaker 2>well.

00:09:49.185 --> 00:09:51.265
<v Speaker 2>We have another component which we will be

00:09:51.265 --> 00:09:53.265
<v Speaker 2>showcasing towards the end of the session today,

00:09:53.265 --> 00:09:55.345
<v Speaker 2>which is called the universal data graph, which

00:09:55.345 --> 00:09:58.385
<v Speaker 2>enables you to actually stitch together data

00:09:58.130 --> 00:09:59.970
<v Speaker 2>from different data sources,

00:10:00.209 --> 00:10:00.930
<v Speaker 2>which means

00:10:01.250 --> 00:10:03.890
<v Speaker 2>if you do have REST endpoints, perhaps even

00:10:03.890 --> 00:10:06.130
<v Speaker 2>SOAP endpoints or GraphQL endpoints,

00:10:06.209 --> 00:10:09.010
<v Speaker 2>you can effectively combine all of those different

00:10:09.010 --> 00:10:11.330
<v Speaker 2>data sources, data from those different data sources,

00:10:11.330 --> 00:10:12.769
<v Speaker 2>and create a unified

00:10:13.725 --> 00:10:15.725
<v Speaker 2>schema out of it, a GraphQL schema, and

00:10:15.725 --> 00:10:17.884
<v Speaker 2>expose it out in that sense, in that

00:10:17.884 --> 00:10:19.485
<v Speaker 2>fashion. And we'll show you how you can

00:10:19.485 --> 00:10:21.644
<v Speaker 2>do that. Obviously, this this provides a big

00:10:21.644 --> 00:10:23.005
<v Speaker 2>benefit when it comes to, you know, if

00:10:23.005 --> 00:10:25.565
<v Speaker 2>you're looking to explore GraphQL or you're looking

00:10:25.565 --> 00:10:27.324
<v Speaker 2>to bring together data from different data sources,

00:10:27.540 --> 00:10:29.139
<v Speaker 2>you can do that in a low code

00:10:29.139 --> 00:10:31.220
<v Speaker 2>or, in this case, no code manner as

00:10:31.220 --> 00:10:33.459
<v Speaker 2>well. So we'll be showcasing this without having

00:10:33.459 --> 00:10:35.540
<v Speaker 2>to write any code whatsoever. No resolve was

00:10:35.540 --> 00:10:37.700
<v Speaker 2>required. No middleware required to do this.

00:10:38.180 --> 00:10:40.019
<v Speaker 2>And then finally, we fit really well with

00:10:40.019 --> 00:10:41.540
<v Speaker 2>your existing stack, sort of goes to that

00:10:41.540 --> 00:10:44.155
<v Speaker 2>platform agnostic view of our existence

00:10:44.315 --> 00:10:45.195
<v Speaker 2>where

00:10:45.275 --> 00:10:46.875
<v Speaker 2>if you have your existing

00:10:47.035 --> 00:10:49.355
<v Speaker 2>stack, if you have your existing products,

00:10:49.515 --> 00:10:51.835
<v Speaker 2>we try our best to essentially fit in

00:10:51.835 --> 00:10:54.555
<v Speaker 2>as seamlessly possible as seamlessly as possible with

00:10:54.555 --> 00:10:57.195
<v Speaker 2>that. So whether you're on Kubernetes, which is

00:10:57.630 --> 00:10:59.870
<v Speaker 2>you've got the Tyk operator, enables you to

00:10:59.870 --> 00:11:02.350
<v Speaker 2>manage that really, really easily, and we'll be

00:11:02.350 --> 00:11:03.950
<v Speaker 2>showcasing that as well. If

00:11:04.510 --> 00:11:05.310
<v Speaker 2>you are

00:11:05.630 --> 00:11:07.790
<v Speaker 2>looking at API governance, for instance, we have

00:11:07.790 --> 00:11:09.950
<v Speaker 2>open policy agent that will enable you to

00:11:09.950 --> 00:11:11.310
<v Speaker 2>do that in a very powerful way.

00:11:12.334 --> 00:11:14.254
<v Speaker 2>Or if you have if you want if

00:11:14.254 --> 00:11:17.134
<v Speaker 2>you already have identity providers that act as

00:11:17.134 --> 00:11:17.935
<v Speaker 2>authorization

00:11:17.935 --> 00:11:20.574
<v Speaker 2>servers within your organization, then we can really

00:11:20.654 --> 00:11:24.014
<v Speaker 2>easily integrate with that using the dynamic client

00:11:24.014 --> 00:11:26.420
<v Speaker 2>registration. Out of the box, we have abilities

00:11:26.420 --> 00:11:27.139
<v Speaker 2>to

00:11:27.620 --> 00:11:30.019
<v Speaker 2>integrate with Okta, Glue,

00:11:30.660 --> 00:11:31.620
<v Speaker 2>Keycloak,

00:11:32.180 --> 00:11:34.019
<v Speaker 2>but we are gonna be looking at further

00:11:34.019 --> 00:11:36.259
<v Speaker 2>additions to that as well. So we're pretty,

00:11:36.259 --> 00:11:37.860
<v Speaker 2>pretty flexible in that sense to do that.

00:11:39.655 --> 00:11:40.215
<v Speaker 2>K.

00:11:40.695 --> 00:11:42.055
<v Speaker 2>Just a little bit about the life cycle

00:11:42.055 --> 00:11:44.455
<v Speaker 2>management. Just for those who are new to

00:11:44.455 --> 00:11:46.535
<v Speaker 2>how the API life cycle sort of works,

00:11:46.535 --> 00:11:49.255
<v Speaker 2>especially around the API management journey of things,

00:11:49.335 --> 00:11:51.415
<v Speaker 2>there are usually two stakeholders. We look at

00:11:51.415 --> 00:11:54.630
<v Speaker 2>API providers, people who are creating the APIs

00:11:54.630 --> 00:11:56.710
<v Speaker 2>and making it available for consumption,

00:11:56.950 --> 00:11:58.470
<v Speaker 2>and the API consumers

00:11:58.550 --> 00:12:00.790
<v Speaker 2>who are effectively consuming

00:12:00.950 --> 00:12:02.950
<v Speaker 2>the API endpoints to build out their own

00:12:02.950 --> 00:12:03.590
<v Speaker 2>product.

00:12:03.910 --> 00:12:05.990
<v Speaker 2>So on the side of the API providers,

00:12:05.990 --> 00:12:08.790
<v Speaker 2>you effectively create, test, secure, and manage

00:12:09.575 --> 00:12:12.055
<v Speaker 2>your APIs on the side of the consumers.

00:12:12.055 --> 00:12:14.135
<v Speaker 2>You are looking to discover and find out

00:12:14.135 --> 00:12:16.615
<v Speaker 2>what what the available APIs are to you

00:12:16.615 --> 00:12:18.455
<v Speaker 2>and how you would go about using it,

00:12:18.695 --> 00:12:21.095
<v Speaker 2>develop products on top of those, consume it,

00:12:21.650 --> 00:12:24.050
<v Speaker 2>and then, of course, monitor and optimize depending

00:12:24.050 --> 00:12:25.970
<v Speaker 2>on how the consumption is happening on your

00:12:25.970 --> 00:12:26.530
<v Speaker 2>end.

00:12:26.850 --> 00:12:28.930
<v Speaker 2>So that's sort of a basic journey into

00:12:28.930 --> 00:12:30.690
<v Speaker 2>the API lifecycle management,

00:12:31.410 --> 00:12:33.570
<v Speaker 2>followed by what Tyk does in this space.

00:12:33.570 --> 00:12:36.245
<v Speaker 2>So from the API provider perspective, things like

00:12:36.245 --> 00:12:37.525
<v Speaker 2>access control,

00:12:37.605 --> 00:12:39.685
<v Speaker 2>your rate limiting, which is essentially

00:12:40.085 --> 00:12:42.965
<v Speaker 2>the limitations or limitations that you might want

00:12:42.965 --> 00:12:45.125
<v Speaker 2>to put in terms of how many requests

00:12:45.125 --> 00:12:46.725
<v Speaker 2>that you might want to

00:12:47.285 --> 00:12:49.765
<v Speaker 2>make available over a period of time. This

00:12:49.520 --> 00:12:51.680
<v Speaker 2>could be part of your API monetization strategy

00:12:51.680 --> 00:12:53.760
<v Speaker 2>or your load management strategy,

00:12:54.000 --> 00:12:55.680
<v Speaker 2>but that's available to you.

00:12:56.320 --> 00:12:58.720
<v Speaker 2>We've got an API designer that that provides

00:12:58.720 --> 00:13:00.560
<v Speaker 2>you a bit bit more of a user

00:13:00.560 --> 00:13:03.040
<v Speaker 2>interface to work with to to create or

00:13:03.040 --> 00:13:03.920
<v Speaker 2>manage your APIs,

00:13:04.404 --> 00:13:05.605
<v Speaker 2>analytics,

00:13:05.925 --> 00:13:09.205
<v Speaker 2>versioning, authorization, authentication from a security perspective.

00:13:09.845 --> 00:13:12.645
<v Speaker 2>From the API consumers perspective, we've got our

00:13:12.645 --> 00:13:13.605
<v Speaker 2>documentation,

00:13:14.165 --> 00:13:15.605
<v Speaker 2>which is, I think I mentioned around the

00:13:15.605 --> 00:13:18.165
<v Speaker 2>developer portal, which sort of handles the API

00:13:18.165 --> 00:13:19.445
<v Speaker 2>consumption aspect of things.

00:13:20.279 --> 00:13:23.080
<v Speaker 2>You can catalog your APIs and consume the

00:13:23.080 --> 00:13:25.320
<v Speaker 2>APIs that are available to you. You can

00:13:25.320 --> 00:13:27.800
<v Speaker 2>discover whatever is available to you and how

00:13:27.800 --> 00:13:30.120
<v Speaker 2>to make use of that through documentation.

00:13:30.680 --> 00:13:32.600
<v Speaker 2>So just as a as a simple sort

00:13:32.600 --> 00:13:35.005
<v Speaker 2>of starting point, and we'll obviously see some

00:13:35.005 --> 00:13:36.925
<v Speaker 2>of these in action shortly.

00:13:38.125 --> 00:13:39.725
<v Speaker 2>It's a little bit about the components that

00:13:39.725 --> 00:13:42.285
<v Speaker 2>we've got. This is not entirely exhaustive at

00:13:42.285 --> 00:13:43.325
<v Speaker 2>the moment, but these are sort of the

00:13:43.325 --> 00:13:44.605
<v Speaker 2>primary components

00:13:45.330 --> 00:13:47.410
<v Speaker 2>with the API gateway, which is our open

00:13:47.410 --> 00:13:49.570
<v Speaker 2>source component right at the center of it

00:13:49.570 --> 00:13:50.290
<v Speaker 2>all

00:13:50.770 --> 00:13:51.490
<v Speaker 2>with

00:13:51.730 --> 00:13:54.530
<v Speaker 2>the ways to interact with the gateway being

00:13:54.770 --> 00:13:57.890
<v Speaker 2>the dashboard, being the more graphic user interface

00:13:57.165 --> 00:13:59.165
<v Speaker 2>aspect of things. This is this is part

00:13:59.165 --> 00:14:01.165
<v Speaker 2>of the enterprise edition, not the open source

00:14:01.165 --> 00:14:03.324
<v Speaker 2>edition. As part of your open source edition,

00:14:03.324 --> 00:14:05.725
<v Speaker 2>you would have the command line interface coupled

00:14:05.725 --> 00:14:07.805
<v Speaker 2>with Tyk operator, especially if you're working with

00:14:07.805 --> 00:14:09.485
<v Speaker 2>the in the Kubernetes world

00:14:09.725 --> 00:14:11.084
<v Speaker 2>like we're gonna be doing today.

00:14:11.700 --> 00:14:13.940
<v Speaker 2>But these would be the ways to interact

00:14:13.940 --> 00:14:16.180
<v Speaker 2>with the gateway and the capabilities of the

00:14:16.180 --> 00:14:16.820
<v Speaker 2>gateway.

00:14:17.220 --> 00:14:18.900
<v Speaker 2>On the other end, we have the developer

00:14:18.900 --> 00:14:21.460
<v Speaker 2>portal, which is again the way to publish

00:14:21.460 --> 00:14:23.140
<v Speaker 2>or catalog your APIs.

00:14:23.300 --> 00:14:24.900
<v Speaker 2>And then you have the Tyk pump, which

00:14:24.900 --> 00:14:27.455
<v Speaker 2>is a component that enables you to. It's

00:14:27.455 --> 00:14:28.735
<v Speaker 2>essentially the observability

00:14:28.735 --> 00:14:29.935
<v Speaker 2>layer for,

00:14:30.335 --> 00:14:33.215
<v Speaker 2>the the API management platform before Tyk.

00:14:33.855 --> 00:14:35.375
<v Speaker 2>I don't I don't believe we're gonna be

00:14:35.375 --> 00:14:37.455
<v Speaker 2>going too deep into this today, but this

00:14:37.455 --> 00:14:39.375
<v Speaker 2>is essentially the component that enables you to

00:14:39.375 --> 00:14:43.490
<v Speaker 2>look at monitoring and logging and analytics and

00:14:43.490 --> 00:14:46.130
<v Speaker 2>all of those different things around observability.

00:14:46.529 --> 00:14:48.769
<v Speaker 1>It basically allows us to send any any

00:14:48.769 --> 00:14:52.370
<v Speaker 1>analytics data that's been generated as your gateway

00:14:52.370 --> 00:14:53.650
<v Speaker 1>handles traffic.

00:14:53.810 --> 00:14:55.570
<v Speaker 1>The pump allows you to send that

00:14:56.175 --> 00:14:59.375
<v Speaker 1>analytics data out to any third party

00:15:00.175 --> 00:15:01.535
<v Speaker 1>observability platform.

00:15:01.535 --> 00:15:05.535
<v Speaker 1>So maybe you're using Splunk or Prometheus or

00:15:06.335 --> 00:15:07.295
<v Speaker 1>an ELK Stack.

00:15:08.040 --> 00:15:09.720
<v Speaker 1>That's what it's there for, as well as

00:15:09.720 --> 00:15:10.839
<v Speaker 1>actually sending

00:15:11.240 --> 00:15:13.320
<v Speaker 1>analytics data into

00:15:13.959 --> 00:15:16.120
<v Speaker 1>our own platform if you wanted to use

00:15:16.120 --> 00:15:18.040
<v Speaker 1>the analytics that built that's built in with

00:15:18.040 --> 00:15:19.880
<v Speaker 1>the Tyk Enterprise edition.

00:15:21.035 --> 00:15:23.115
<v Speaker 0>Does this support in FluxDB? Because we know

00:15:23.115 --> 00:15:24.875
<v Speaker 0>that's the best type for your database.

00:15:27.115 --> 00:15:29.595
<v Speaker 1>I actually would have to check that, but

00:15:29.675 --> 00:15:30.795
<v Speaker 1>ring us a bell.

00:15:31.194 --> 00:15:32.954
<v Speaker 0>It does. I see it on the documentation

00:15:32.954 --> 00:15:33.355
<v Speaker 0>yesterday.

00:15:33.759 --> 00:15:35.279
<v Speaker 2>Yeah. Got it. Yeah.

00:15:35.600 --> 00:15:37.199
<v Speaker 2>Got that. We got that. Yeah. Yeah. I'm

00:15:37.199 --> 00:15:39.120
<v Speaker 0>a big fan of influx. Anyway, sorry.

00:15:41.920 --> 00:15:44.160
<v Speaker 2>No worries. No worries. Alright. Yeah. I think

00:15:44.160 --> 00:15:46.000
<v Speaker 2>I think I think, like like Andy mentioned,

00:15:46.000 --> 00:15:47.680
<v Speaker 2>I think it's very easy to plug into

00:15:47.839 --> 00:15:49.925
<v Speaker 2>plug in this data into external systems. Of

00:15:49.925 --> 00:15:52.885
<v Speaker 2>course, pump is what powers our internal analytics

00:15:52.885 --> 00:15:55.365
<v Speaker 2>platform and monitoring platform as well within Tyk

00:15:55.365 --> 00:15:57.045
<v Speaker 2>as part of our dashboard as well as

00:15:57.045 --> 00:15:59.524
<v Speaker 2>the gateway. But like you mentioned, you can

00:15:59.524 --> 00:16:01.605
<v Speaker 2>plug into external systems as well, which could

00:16:01.605 --> 00:16:03.830
<v Speaker 2>include even your BI tools potentially as well.

00:16:03.830 --> 00:16:04.310
<v Speaker 2>So

00:16:04.710 --> 00:16:06.630
<v Speaker 2>depending on what you choose to make use

00:16:06.630 --> 00:16:07.110
<v Speaker 2>of.

00:16:07.670 --> 00:16:09.750
<v Speaker 1>Yeah. It's an it's an open source component.

00:16:09.750 --> 00:16:12.230
<v Speaker 1>So if you did want to send Yeah.

00:16:12.310 --> 00:16:15.350
<v Speaker 1>Analytics data out to some observability or monitoring

00:16:15.350 --> 00:16:16.870
<v Speaker 1>platform that we don't currently spot,

00:16:17.695 --> 00:16:20.095
<v Speaker 1>you can write a a pump for it.

00:16:21.055 --> 00:16:22.334
<v Speaker 2>Yep. So I I think this one sort

00:16:22.334 --> 00:16:23.774
<v Speaker 2>of gives you that that idea as well.

00:16:23.774 --> 00:16:25.454
<v Speaker 2>So I think this is sort of a

00:16:25.454 --> 00:16:27.135
<v Speaker 2>little bit of a view of the open

00:16:27.135 --> 00:16:29.295
<v Speaker 2>source landscape within a within Tyk.

00:16:30.360 --> 00:16:32.600
<v Speaker 2>So I think the gateway itself looks at

00:16:32.600 --> 00:16:33.720
<v Speaker 2>things like security,

00:16:33.880 --> 00:16:36.680
<v Speaker 2>versioning, and body transforms, traffic control,

00:16:37.160 --> 00:16:39.880
<v Speaker 2>monitoring. And part of that monitoring extension, we

00:16:39.880 --> 00:16:41.880
<v Speaker 2>look at the Tyk pump. And like you

00:16:41.880 --> 00:16:43.880
<v Speaker 2>said, we've got we've got support for

00:16:44.285 --> 00:16:46.845
<v Speaker 2>Influx, Datadog, Elasticsearch,

00:16:47.405 --> 00:16:50.285
<v Speaker 2>Kafka as well as Splunk, Prometheus, Mosif.

00:16:50.525 --> 00:16:52.205
<v Speaker 2>We are we are soon gonna be adding

00:16:52.205 --> 00:16:54.285
<v Speaker 2>a couple more to it as well. But

00:16:54.285 --> 00:16:56.285
<v Speaker 2>it's it's really, really simple to extend this

00:16:56.285 --> 00:16:58.459
<v Speaker 2>capability. And if you if you do have

00:16:58.459 --> 00:17:00.540
<v Speaker 2>an observability platform that you have, it's very

00:17:00.540 --> 00:17:02.940
<v Speaker 2>easy to hook hook on to Tykbomb to

00:17:02.940 --> 00:17:04.539
<v Speaker 2>to gather that information.

00:17:04.940 --> 00:17:07.179
<v Speaker 2>So that's pretty much the Tykbomb we've got

00:17:07.179 --> 00:17:09.419
<v Speaker 2>at the moment. There is the identity broker

00:17:09.419 --> 00:17:11.819
<v Speaker 2>as well, which sort of connects to external

00:17:11.819 --> 00:17:13.260
<v Speaker 2>or custom identity providers.

00:17:14.435 --> 00:17:16.835
<v Speaker 2>So if you're looking at OAuth and third

00:17:16.835 --> 00:17:18.515
<v Speaker 2>party authorization

00:17:19.075 --> 00:17:21.395
<v Speaker 2>through any of these available systems, then you

00:17:21.395 --> 00:17:23.555
<v Speaker 2>can do that using the identity broker as

00:17:23.555 --> 00:17:24.034
<v Speaker 2>well.

00:17:25.234 --> 00:17:27.635
<v Speaker 2>And then finally, we've got our Tyk operator

00:17:27.635 --> 00:17:28.995
<v Speaker 2>for Kubernetes,

00:17:28.995 --> 00:17:30.920
<v Speaker 2>which is what we'll be demonstrating today,

00:17:31.160 --> 00:17:33.160
<v Speaker 2>coupled with the Tyk CLI,

00:17:33.480 --> 00:17:35.960
<v Speaker 2>which, again, this is this completes sort of

00:17:35.960 --> 00:17:38.840
<v Speaker 2>our open source API management offering at the

00:17:38.840 --> 00:17:39.320
<v Speaker 2>moment.

00:17:39.720 --> 00:17:41.400
<v Speaker 2>Just as an extension to this, of course,

00:17:41.400 --> 00:17:43.745
<v Speaker 2>we do have an enterprise edition edition for

00:17:43.745 --> 00:17:45.344
<v Speaker 2>Tyk as well where

00:17:45.825 --> 00:17:48.705
<v Speaker 2>some of these capabilities are primarily extended. The

00:17:48.705 --> 00:17:51.505
<v Speaker 2>base capability, the the open source gateway is

00:17:51.505 --> 00:17:53.505
<v Speaker 2>the same that powers both of our products.

00:17:53.505 --> 00:17:54.705
<v Speaker 2>So there is no

00:17:55.024 --> 00:17:56.320
<v Speaker 2>I would say there there are no two

00:17:56.320 --> 00:17:58.960
<v Speaker 2>separate products under the hood. You have the

00:17:58.960 --> 00:18:01.120
<v Speaker 2>API gateway, the same API gateway, open source

00:18:01.120 --> 00:18:03.760
<v Speaker 2>API gateway powering both of them. With the

00:18:03.760 --> 00:18:05.279
<v Speaker 2>enterprise edition, of course, a couple of things

00:18:05.279 --> 00:18:07.600
<v Speaker 2>just become a little bit easier in that

00:18:07.600 --> 00:18:09.600
<v Speaker 2>sense to to manage because you have a

00:18:09.845 --> 00:18:12.485
<v Speaker 2>nicer interface to sort of work with. A

00:18:12.485 --> 00:18:13.205
<v Speaker 2>couple of

00:18:13.525 --> 00:18:16.085
<v Speaker 2>things that are associated with the dashboard, for

00:18:16.085 --> 00:18:16.725
<v Speaker 2>instance,

00:18:17.045 --> 00:18:18.965
<v Speaker 2>like the open policy agent at the moment

00:18:18.965 --> 00:18:21.205
<v Speaker 2>and with the developer portal, like the the

00:18:21.205 --> 00:18:24.650
<v Speaker 2>dynamic client registration capability, for instance, Those are

00:18:24.650 --> 00:18:26.249
<v Speaker 2>a bit more of an enterprise

00:18:27.049 --> 00:18:29.049
<v Speaker 2>capability as it stands today.

00:18:29.370 --> 00:18:30.970
<v Speaker 2>And, of course, the bigger one that we

00:18:30.970 --> 00:18:32.970
<v Speaker 2>we are gonna be showcasing towards the end

00:18:32.970 --> 00:18:35.529
<v Speaker 2>is the universal data graph where

00:18:35.690 --> 00:18:36.970
<v Speaker 2>you really can

00:18:37.130 --> 00:18:38.009
<v Speaker 2>design

00:18:38.010 --> 00:18:40.730
<v Speaker 2>sort of your own

00:18:39.675 --> 00:18:42.555
<v Speaker 2>GraphQL schema based on existing infrastructure.

00:18:42.955 --> 00:18:46.475
<v Speaker 2>And that further enables you to publish those

00:18:46.795 --> 00:18:47.515
<v Speaker 2>those

00:18:48.475 --> 00:18:52.635
<v Speaker 2>schema stitched or sort of stitched data

00:18:51.690 --> 00:18:55.529
<v Speaker 2>from different sources as a GraphQL endpoint.

00:18:55.610 --> 00:18:57.049
<v Speaker 2>So I think that's sort of something that

00:18:57.049 --> 00:18:58.970
<v Speaker 2>is is better shown off towards the end,

00:18:58.970 --> 00:19:00.809
<v Speaker 2>but that is part of our enterprise edition

00:19:00.809 --> 00:19:02.970
<v Speaker 2>here as well. And further to that, we

00:19:02.970 --> 00:19:06.730
<v Speaker 2>have a multi data center bridge, MDCB offering,

00:19:06.730 --> 00:19:07.289
<v Speaker 2>which is

00:19:08.285 --> 00:19:11.164
<v Speaker 2>especially useful when you're looking to manage

00:19:11.885 --> 00:19:14.845
<v Speaker 2>Tyk across different multiple data centers,

00:19:15.405 --> 00:19:17.325
<v Speaker 2>whether that is within a particular region or

00:19:17.325 --> 00:19:19.405
<v Speaker 2>different data centers in the same region or

00:19:19.405 --> 00:19:21.820
<v Speaker 2>across multiple regions, you can handle that. You

00:19:21.820 --> 00:19:23.739
<v Speaker 2>can essentially install

00:19:23.740 --> 00:19:25.259
<v Speaker 2>or deploy local

00:19:26.059 --> 00:19:29.179
<v Speaker 2>instances of the gateway to provide all of

00:19:29.179 --> 00:19:30.539
<v Speaker 2>the processing power

00:19:30.700 --> 00:19:32.219
<v Speaker 2>at at a local level.

00:19:32.460 --> 00:19:34.220
<v Speaker 2>But you can manage all of that through

00:19:34.220 --> 00:19:37.644
<v Speaker 2>a centralized sort of control plane instead of

00:19:37.644 --> 00:19:39.964
<v Speaker 2>having to manage each of the different

00:19:40.205 --> 00:19:41.644
<v Speaker 2>gateways individually.

00:19:41.804 --> 00:19:43.084
<v Speaker 2>So essentially,

00:19:43.804 --> 00:19:46.125
<v Speaker 2>deploy locally and manage globally. That's sort of

00:19:46.125 --> 00:19:47.885
<v Speaker 2>the way to go with data center. Of

00:19:47.885 --> 00:19:49.804
<v Speaker 2>course, I've I've oversimplified that a little bit

00:19:50.440 --> 00:19:52.600
<v Speaker 2>because we can obviously go much deeper into

00:19:52.600 --> 00:19:53.559
<v Speaker 2>the data center

00:19:53.720 --> 00:19:56.360
<v Speaker 2>bridge. But I think as an introduction, I

00:19:56.360 --> 00:19:58.120
<v Speaker 2>think that sort of does hopefully a good

00:19:58.120 --> 00:20:00.520
<v Speaker 2>job. And from a from a offering as

00:20:00.520 --> 00:20:02.360
<v Speaker 1>well as the multi geo thing that the

00:20:02.360 --> 00:20:04.280
<v Speaker 1>MDCV is is also useful.

00:20:05.164 --> 00:20:07.004
<v Speaker 1>I think it's more with the

00:20:07.404 --> 00:20:09.804
<v Speaker 1>bigger clients that we work with where you

00:20:09.804 --> 00:20:12.445
<v Speaker 1>find the different business units or teams within

00:20:12.445 --> 00:20:15.804
<v Speaker 1>an organization. They want their own runtime environment.

00:20:15.804 --> 00:20:18.120
<v Speaker 1>They want their own gateway, but they want

00:20:18.120 --> 00:20:20.360
<v Speaker 1>everything to be managed through this central control

00:20:20.360 --> 00:20:22.919
<v Speaker 1>plane. So it also plays into that space.

00:20:24.840 --> 00:20:26.039
<v Speaker 2>Yep. Exactly.

00:20:26.600 --> 00:20:28.200
<v Speaker 2>And then finally, we've got our Tyk cloud

00:20:28.200 --> 00:20:30.200
<v Speaker 2>offering, which is sort of our our SaaS

00:20:30.200 --> 00:20:31.000
<v Speaker 2>offering in this case,

00:20:31.985 --> 00:20:33.665
<v Speaker 2>which is for you to get up and

00:20:33.665 --> 00:20:35.665
<v Speaker 2>running really quickly without having to think about

00:20:35.665 --> 00:20:37.105
<v Speaker 2>managing your infrastructure.

00:20:37.825 --> 00:20:40.145
<v Speaker 2>It is it is sort of part SaaS,

00:20:40.145 --> 00:20:42.545
<v Speaker 2>part orchestration because you can choose where you

00:20:42.545 --> 00:20:43.665
<v Speaker 2>want to deploy

00:20:43.789 --> 00:20:46.830
<v Speaker 2>your control plane as well as your

00:20:47.230 --> 00:20:50.830
<v Speaker 2>local instances of the of the local gateway,

00:20:50.830 --> 00:20:52.509
<v Speaker 2>the edge gateways as we call them.

00:20:53.230 --> 00:20:55.309
<v Speaker 2>And you can beyond just having a fully

00:20:55.309 --> 00:20:58.825
<v Speaker 2>managed solution with Tyk, you can also extend

00:20:58.825 --> 00:21:01.305
<v Speaker 2>that further as a hybrid solution where you

00:21:01.305 --> 00:21:04.665
<v Speaker 2>can use the Tyk control plane

00:21:04.745 --> 00:21:06.665
<v Speaker 2>on the cloud and connect

00:21:06.745 --> 00:21:09.385
<v Speaker 2>your local installations of

00:21:09.785 --> 00:21:11.385
<v Speaker 2>the local gateway,

00:21:11.830 --> 00:21:13.750
<v Speaker 2>which you can host in your own

00:21:14.390 --> 00:21:16.150
<v Speaker 2>private cloud if you do choose to do

00:21:16.150 --> 00:21:16.630
<v Speaker 2>so

00:21:17.030 --> 00:21:18.950
<v Speaker 2>or in your own infrastructure.

00:21:18.950 --> 00:21:21.030
<v Speaker 2>So that's sort of the the hybrid aspect

00:21:21.030 --> 00:21:23.430
<v Speaker 2>of this that comes along with the Tykloud.

00:21:26.034 --> 00:21:28.595
<v Speaker 2>I think with this, I think we'll dive

00:21:28.595 --> 00:21:30.434
<v Speaker 2>into today's sort of

00:21:31.235 --> 00:21:32.514
<v Speaker 2>today's demonstration,

00:21:32.595 --> 00:21:34.274
<v Speaker 2>and I'm gonna pass this on to Andy

00:21:34.274 --> 00:21:35.875
<v Speaker 2>to give you a little bit of more

00:21:35.875 --> 00:21:38.914
<v Speaker 2>into what the actual architecture of Tyk looks

00:21:38.914 --> 00:21:40.929
<v Speaker 2>like. And then right after this, we will

00:21:40.929 --> 00:21:42.769
<v Speaker 2>be heading on to the hands on session.

00:21:42.769 --> 00:21:44.289
<v Speaker 2>So over to you, Andy.

00:21:45.010 --> 00:21:48.529
<v Speaker 1>Yeah. Sure. So this this this architecture

00:21:48.529 --> 00:21:51.330
<v Speaker 1>schema that we're looking at actually covers both

00:21:51.649 --> 00:21:53.970
<v Speaker 1>the open source components and

00:21:54.565 --> 00:21:56.725
<v Speaker 1>some of the license component as well. So

00:21:56.725 --> 00:21:58.645
<v Speaker 1>it's a it's it's kind of a a

00:21:58.645 --> 00:21:59.765
<v Speaker 1>a simple

00:22:00.485 --> 00:22:02.165
<v Speaker 1>licensed architecture.

00:22:02.565 --> 00:22:04.485
<v Speaker 1>For what we're gonna be focusing on today

00:22:04.485 --> 00:22:07.045
<v Speaker 1>for the open source piece, that's essentially

00:22:08.150 --> 00:22:10.389
<v Speaker 1>a gateway that sits between

00:22:10.470 --> 00:22:11.109
<v Speaker 1>your

00:22:11.270 --> 00:22:12.710
<v Speaker 1>API clients

00:22:12.789 --> 00:22:13.590
<v Speaker 1>and

00:22:13.590 --> 00:22:15.350
<v Speaker 1>your upstream

00:22:15.429 --> 00:22:18.710
<v Speaker 1>services that are hosted on some API server.

00:22:18.950 --> 00:22:21.109
<v Speaker 1>And the gateway has one dependency,

00:22:21.190 --> 00:22:22.575
<v Speaker 1>which is Redis,

00:22:22.815 --> 00:22:23.934
<v Speaker 1>and we use that

00:22:24.815 --> 00:22:26.335
<v Speaker 1>to store

00:22:27.535 --> 00:22:30.655
<v Speaker 1>session tokens. So it might be API keys,

00:22:30.655 --> 00:22:31.374
<v Speaker 1>for example.

00:22:31.775 --> 00:22:32.815
<v Speaker 1>We also

00:22:33.135 --> 00:22:34.735
<v Speaker 1>temporarily store

00:22:34.735 --> 00:22:38.639
<v Speaker 1>analytics data in Redis before TykE pump picks

00:22:38.639 --> 00:22:41.119
<v Speaker 1>up that analytics data and sends it off,

00:22:41.440 --> 00:22:43.119
<v Speaker 1>where it needs to go. So,

00:22:43.519 --> 00:22:44.639
<v Speaker 1>in terms of,

00:22:45.440 --> 00:22:47.759
<v Speaker 1>an open source installation, it's pretty simple. It's

00:22:47.759 --> 00:22:50.480
<v Speaker 1>a gateway, and it's Redis and optionally pump.

00:22:53.865 --> 00:22:54.905
<v Speaker 2>Okay.

00:22:55.145 --> 00:22:56.905
<v Speaker 2>I think I'm gonna stop sharing the screen

00:22:56.905 --> 00:22:58.025
<v Speaker 2>now. I

00:22:59.785 --> 00:23:01.705
<v Speaker 2>do wonder if there are any questions that

00:23:01.705 --> 00:23:03.705
<v Speaker 2>might have already come up at this moment.

00:23:03.945 --> 00:23:05.625
<v Speaker 2>Otherwise, we can head on over to the

00:23:05.625 --> 00:23:06.265
<v Speaker 2>next segment.

00:23:06.950 --> 00:23:07.750
<v Speaker 0>Nothing

00:23:07.750 --> 00:23:09.750
<v Speaker 0>from the audience yet, but I'm sure they'll

00:23:09.750 --> 00:23:11.269
<v Speaker 0>be in with their questions soon.

00:23:11.590 --> 00:23:13.350
<v Speaker 0>I guess something that pops into my head

00:23:13.350 --> 00:23:15.990
<v Speaker 0>through that is, like, what what doesn't Tyk

00:23:15.990 --> 00:23:18.390
<v Speaker 0>do? Like, that was a healthy list of

00:23:18.390 --> 00:23:19.875
<v Speaker 0>features. Right? Like,

00:23:20.355 --> 00:23:22.515
<v Speaker 0>I mean, I guess that shows the maturity.

00:23:22.515 --> 00:23:24.755
<v Speaker 0>Like, I didn't realize Tyk was seven years

00:23:24.755 --> 00:23:26.835
<v Speaker 0>old at this point in time. So it's

00:23:26.835 --> 00:23:28.275
<v Speaker 0>been developed for a while. I didn't realize

00:23:28.275 --> 00:23:30.995
<v Speaker 0>the company had a hundred employees. I mean,

00:23:30.995 --> 00:23:33.635
<v Speaker 0>that's a sizable you know, that's no venture

00:23:33.635 --> 00:23:36.490
<v Speaker 0>beyond startup. Right? Like, Tyk must be

00:23:36.810 --> 00:23:38.250
<v Speaker 0>kicking a lot of ass. I imagine a

00:23:38.250 --> 00:23:39.610
<v Speaker 0>lot of people are using this and I'm

00:23:39.610 --> 00:23:41.930
<v Speaker 0>just really disappointed that I personally hadn't heard

00:23:41.930 --> 00:23:44.330
<v Speaker 0>about it until recently because it seems to

00:23:44.330 --> 00:23:46.169
<v Speaker 0>solve so many problems

00:23:46.330 --> 00:23:48.730
<v Speaker 0>that I have in API management and a

00:23:48.730 --> 00:23:50.665
<v Speaker 0>cloud native environment with microservices

00:23:50.665 --> 00:23:52.345
<v Speaker 0>with delegated authorization.

00:23:52.345 --> 00:23:53.705
<v Speaker 0>All all all these things

00:23:53.945 --> 00:23:56.345
<v Speaker 0>are super painful, and all this time Tyk

00:23:56.345 --> 00:23:58.105
<v Speaker 0>has been sitting there in open source land

00:23:58.105 --> 00:23:58.745
<v Speaker 0>and

00:23:58.985 --> 00:24:00.665
<v Speaker 0>gutted that I just missed it all this

00:24:00.665 --> 00:24:01.145
<v Speaker 0>time.

00:24:01.465 --> 00:24:05.065
<v Speaker 1>Yeah. We we sometimes call it batteries included,

00:24:05.065 --> 00:24:07.440
<v Speaker 1>so it's it's it's cloud native. It's pretty

00:24:07.440 --> 00:24:08.159
<v Speaker 1>lightweight.

00:24:08.400 --> 00:24:10.159
<v Speaker 1>It fits in nicely with

00:24:10.720 --> 00:24:13.760
<v Speaker 1>modern requirements around automation and CICD

00:24:13.760 --> 00:24:15.840
<v Speaker 1>and all of that. But it it remains

00:24:15.840 --> 00:24:18.720
<v Speaker 1>lightweight while still providing a ton of capability.

00:24:19.520 --> 00:24:20.000
<v Speaker 0>Awesome.

00:24:20.545 --> 00:24:22.385
<v Speaker 0>Well, I think we just dive straight in

00:24:22.385 --> 00:24:23.985
<v Speaker 0>and we start playing with it, and let's

00:24:23.985 --> 00:24:26.065
<v Speaker 0>see what we can do with Tyk. So

00:24:26.465 --> 00:24:28.705
<v Speaker 1>Let's do it. Let's pull up my screen

00:24:28.705 --> 00:24:29.424
<v Speaker 0>share.

00:24:30.145 --> 00:24:31.905
<v Speaker 0>I have the homepage here. For anyone who

00:24:31.905 --> 00:24:32.945
<v Speaker 0>wants to check it out at their own

00:24:32.945 --> 00:24:34.945
<v Speaker 0>time, you can visit tyk.io.

00:24:36.090 --> 00:24:38.490
<v Speaker 0>I also have access to the getting started

00:24:38.490 --> 00:24:40.490
<v Speaker 0>gate available via the documentation.

00:24:41.210 --> 00:24:44.650
<v Speaker 0>And I have one Kubernetes cluster ready for

00:24:44.650 --> 00:24:46.570
<v Speaker 0>us to start deploying too. But we haven't

00:24:46.570 --> 00:24:48.809
<v Speaker 0>done anything upfront other than provision a Kubernetes

00:24:48.809 --> 00:24:51.705
<v Speaker 0>cluster and everything else we will do as

00:24:51.705 --> 00:24:53.065
<v Speaker 0>we work through this.

00:24:55.145 --> 00:24:56.745
<v Speaker 0>So we do have a question if you

00:24:56.745 --> 00:24:58.585
<v Speaker 0>want to tackle that from Russell, which has

00:24:58.585 --> 00:25:00.185
<v Speaker 0>just slid in there before we started our

00:25:00.185 --> 00:25:02.665
<v Speaker 0>hands on component. So Russell asks,

00:25:03.540 --> 00:25:05.700
<v Speaker 0>why Redis when etcd seems to be the

00:25:05.700 --> 00:25:07.620
<v Speaker 0>default choice for key value storage and the

00:25:07.620 --> 00:25:08.980
<v Speaker 0>cloud native ecosystem?

00:25:09.380 --> 00:25:09.860
<v Speaker 0>I

00:25:11.780 --> 00:25:14.180
<v Speaker 1>mean, it was an an architecture choice going

00:25:14.180 --> 00:25:14.740
<v Speaker 1>back

00:25:14.980 --> 00:25:18.180
<v Speaker 1>four, five years. I don't know if

00:25:20.335 --> 00:25:22.015
<v Speaker 1>there is under consideration

00:25:22.015 --> 00:25:23.695
<v Speaker 1>something like etcd

00:25:23.695 --> 00:25:24.254
<v Speaker 1>to

00:25:25.375 --> 00:25:26.895
<v Speaker 1>to bring in in the future, but I

00:25:26.895 --> 00:25:28.815
<v Speaker 1>think Redis has served us pretty well

00:25:29.215 --> 00:25:30.415
<v Speaker 1>over the years so far.

00:25:31.550 --> 00:25:34.429
<v Speaker 0>Yeah. Redis is a great database.

00:25:34.670 --> 00:25:37.150
<v Speaker 0>Really, really fast. Written in c works really

00:25:37.150 --> 00:25:38.590
<v Speaker 0>well. Guess the

00:25:39.070 --> 00:25:40.350
<v Speaker 0>I mean, I'm I'm just gonna put words

00:25:40.350 --> 00:25:41.550
<v Speaker 0>in your mouth. I don't work for Tyk

00:25:41.550 --> 00:25:43.150
<v Speaker 0>or not even know why these decisions were

00:25:43.150 --> 00:25:43.390
<v Speaker 0>made.

00:25:44.225 --> 00:25:46.065
<v Speaker 0>But I would sometimes reach for Redis because

00:25:46.065 --> 00:25:48.785
<v Speaker 0>the operational complexity versus STDs are lot simpler.

00:25:49.185 --> 00:25:50.465
<v Speaker 0>And I wonder if maybe that was a

00:25:50.465 --> 00:25:53.665
<v Speaker 0>decision there. So good question, Russell. Hopefully, that

00:25:53.665 --> 00:25:55.105
<v Speaker 0>gives you some answers.

00:25:56.190 --> 00:25:56.830
<v Speaker 0>Okay.

00:25:58.190 --> 00:26:00.750
<v Speaker 0>So getting started guide. Now are we going

00:26:00.750 --> 00:26:02.190
<v Speaker 0>to run through

00:26:02.590 --> 00:26:04.590
<v Speaker 1>We're gonna do an install. So Yeah.

00:26:05.230 --> 00:26:07.870
<v Speaker 1>Let's try and run through this menu structure.

00:26:07.870 --> 00:26:09.709
<v Speaker 1>So install open source,

00:26:09.870 --> 00:26:10.590
<v Speaker 1>and then

00:26:11.245 --> 00:26:12.844
<v Speaker 1>for all of these different

00:26:13.164 --> 00:26:16.284
<v Speaker 1>flavors of installation, be it self managed license

00:26:16.284 --> 00:26:18.765
<v Speaker 1>or open source, there's there's all there's a

00:26:18.765 --> 00:26:20.765
<v Speaker 1>number of different options. So I think somewhere

00:26:20.765 --> 00:26:22.284
<v Speaker 1>either at the bottom of this page or

00:26:22.284 --> 00:26:23.644
<v Speaker 1>in the menu on the left,

00:26:23.965 --> 00:26:25.645
<v Speaker 1>we should be able to find our way

00:26:25.645 --> 00:26:26.125
<v Speaker 1>to

00:26:27.980 --> 00:26:29.820
<v Speaker 1>if you just scroll down the page,

00:26:31.020 --> 00:26:34.059
<v Speaker 1>then there's an OSS section in there.

00:26:36.460 --> 00:26:38.940
<v Speaker 1>And then I think probably from the left

00:26:38.940 --> 00:26:40.140
<v Speaker 1>hand navigation

00:26:40.665 --> 00:26:43.465
<v Speaker 1>on this page, you'll see open source installation.

00:26:44.185 --> 00:26:46.345
<v Speaker 1>Again, bunch of options because we can be

00:26:46.345 --> 00:26:49.785
<v Speaker 1>installed on bare metal or virtual machines or

00:26:50.745 --> 00:26:53.465
<v Speaker 1>Docker or Kubernetes. Let's go for a Kubernetes

00:26:53.465 --> 00:26:53.945
<v Speaker 1>install.

00:26:55.520 --> 00:26:57.360
<v Speaker 0>You read that name. Yeah.

00:26:57.679 --> 00:26:59.280
<v Speaker 1>I was hoping you were gonna go along

00:26:59.280 --> 00:27:01.040
<v Speaker 1>with this, then TykOSS

00:27:01.040 --> 00:27:02.080
<v Speaker 1>Helm chart is

00:27:02.720 --> 00:27:03.999
<v Speaker 1>how we shall do this.

00:27:04.400 --> 00:27:05.840
<v Speaker 0>Okay. So we do have a couple of

00:27:05.840 --> 00:27:07.855
<v Speaker 0>options here. Right? We can use the Helm

00:27:07.855 --> 00:27:11.215
<v Speaker 0>charts. We can deploy directly with manifest and

00:27:11.215 --> 00:27:12.975
<v Speaker 0>there as the operator. So are we going

00:27:12.975 --> 00:27:14.495
<v Speaker 0>with Helm now and we'll look at the

00:27:14.495 --> 00:27:17.375
<v Speaker 0>operator later? Is that the plan? Yeah. So

00:27:17.375 --> 00:27:18.734
<v Speaker 1>how it works is

00:27:18.975 --> 00:27:19.855
<v Speaker 1>for installation,

00:27:20.940 --> 00:27:23.100
<v Speaker 1>customers, most people we work with, they're gonna

00:27:23.100 --> 00:27:24.940
<v Speaker 1>use the Helm charts to actually

00:27:25.100 --> 00:27:27.500
<v Speaker 1>deploy Tyk, and then they would use the

00:27:27.500 --> 00:27:28.459
<v Speaker 1>operator

00:27:28.539 --> 00:27:32.139
<v Speaker 1>to actually publish API definitions and

00:27:33.835 --> 00:27:36.395
<v Speaker 1>actually, yeah, publish their runtime resource.

00:27:36.635 --> 00:27:38.875
<v Speaker 1>But the the the the the gateway itself

00:27:38.875 --> 00:27:40.555
<v Speaker 1>will install with Helm.

00:27:43.835 --> 00:27:46.570
<v Speaker 0>Cool. We have a cataculta scenario. Those are

00:27:46.570 --> 00:27:48.410
<v Speaker 0>all the latest. I think this just popped

00:27:48.410 --> 00:27:50.330
<v Speaker 1>up yesterday. So the

00:27:50.730 --> 00:27:53.530
<v Speaker 1>the the docs are, yeah, on under change

00:27:53.530 --> 00:27:54.330
<v Speaker 1>at the moment.

00:27:55.770 --> 00:27:57.290
<v Speaker 1>So I think if we wanna work in

00:27:57.290 --> 00:27:59.545
<v Speaker 1>your own terminal, in your own Yeah. This

00:27:59.545 --> 00:28:01.145
<v Speaker 2>is directly just This is this is something

00:28:01.145 --> 00:28:02.345
<v Speaker 2>that we've sort of we are sort of

00:28:02.345 --> 00:28:04.425
<v Speaker 2>introducing so that people can have a hands

00:28:04.425 --> 00:28:06.425
<v Speaker 2>on component really, really quickly early on if

00:28:06.425 --> 00:28:07.865
<v Speaker 2>they want to try it out without having

00:28:07.865 --> 00:28:09.785
<v Speaker 2>to set things up for themselves.

00:28:10.665 --> 00:28:13.145
<v Speaker 2>So, hopefully, that is gonna extend out to

00:28:12.870 --> 00:28:15.590
<v Speaker 2>other aspects of the of the documentation as

00:28:15.590 --> 00:28:17.110
<v Speaker 2>well. I think we've we've done a pretty

00:28:17.110 --> 00:28:18.950
<v Speaker 2>decent job getting it up and running so

00:28:18.950 --> 00:28:19.669
<v Speaker 2>far. So,

00:28:20.550 --> 00:28:23.190
<v Speaker 2>hopefully, next time we speak, we'll have a

00:28:23.190 --> 00:28:24.309
<v Speaker 2>even more complete

00:28:24.630 --> 00:28:27.525
<v Speaker 2>part of this. Nice. Well, I have added

00:28:27.525 --> 00:28:29.684
<v Speaker 0>the repository via Helm. I have run Helm

00:28:29.684 --> 00:28:33.445
<v Speaker 0>repo update. I have created the Tyk namespace.

00:28:34.405 --> 00:28:37.684
<v Speaker 0>And now we have to install Redis first.

00:28:38.165 --> 00:28:38.804
<v Speaker 1>Yep.

00:28:39.045 --> 00:28:41.860
<v Speaker 1>And this we we within our Helm charts,

00:28:41.860 --> 00:28:42.980
<v Speaker 1>we ship with a

00:28:43.860 --> 00:28:45.299
<v Speaker 1>a simple Redis,

00:28:45.300 --> 00:28:47.940
<v Speaker 1>which is really there just for,

00:28:48.180 --> 00:28:49.540
<v Speaker 1>I would say, evaluation,

00:28:49.540 --> 00:28:52.260
<v Speaker 1>just getting to know Tyk. There are official

00:28:53.265 --> 00:28:55.345
<v Speaker 1>Vietnamese charts as well that you'd be more

00:28:55.345 --> 00:28:57.505
<v Speaker 1>likely to use in a a real environment.

00:28:59.345 --> 00:29:00.385
<v Speaker 0>Okay.

00:29:01.185 --> 00:29:01.904
<v Speaker 0>So

00:29:02.545 --> 00:29:04.225
<v Speaker 0>I ran that. It looks like a Redis

00:29:04.225 --> 00:29:06.785
<v Speaker 0>was happy. I was oh, no. That's What's

00:29:06.785 --> 00:29:07.185
<v Speaker 1>that process?

00:29:11.630 --> 00:29:13.630
<v Speaker 0>Okay. There's our Redis inside. I was a

00:29:13.630 --> 00:29:14.990
<v Speaker 0>bit worried we weren't gonna get a happy

00:29:14.990 --> 00:29:17.230
<v Speaker 0>Redis because I don't remember if my cluster

00:29:17.230 --> 00:29:19.230
<v Speaker 0>has a CSI driver deployed,

00:29:19.310 --> 00:29:21.230
<v Speaker 0>but it looks like it's okay. So phew.

00:29:21.895 --> 00:29:23.414
<v Speaker 1>Phew. Yep.

00:29:23.895 --> 00:29:25.335
<v Speaker 0>And now we can install

00:29:25.495 --> 00:29:28.294
<v Speaker 0>take I'm assuming CEO's community edition.

00:29:29.575 --> 00:29:31.095
<v Speaker 1>That's right. Actually,

00:29:32.455 --> 00:29:34.295
<v Speaker 1>I was just gonna say before you do

00:29:34.295 --> 00:29:34.455
<v Speaker 1>that,

00:29:35.830 --> 00:29:38.150
<v Speaker 1>I think there's a little bit of configuration

00:29:38.150 --> 00:29:38.950
<v Speaker 1>to do.

00:29:40.470 --> 00:29:42.630
<v Speaker 1>So we might have to uninstall

00:29:42.630 --> 00:29:43.350
<v Speaker 1>that.

00:29:44.630 --> 00:29:46.630
<v Speaker 1>It's actually further down the page. So

00:29:48.325 --> 00:29:50.165
<v Speaker 1>it breaks all this down and there's a

00:29:50.165 --> 00:29:52.645
<v Speaker 1>step there where we actually there's some configuration

00:29:52.645 --> 00:29:54.165
<v Speaker 1>values. We should at least have a look

00:29:54.165 --> 00:29:57.045
<v Speaker 1>at that values dot YAML file. Yeah. Of

00:29:57.045 --> 00:29:59.125
<v Speaker 0>course. So I I I would uninstall what

00:29:59.125 --> 00:30:00.805
<v Speaker 1>you just installed and then

00:30:02.669 --> 00:30:05.149
<v Speaker 0>Okay. May maybe it just works, but

00:30:06.590 --> 00:30:08.270
<v Speaker 0>so Yeah. I I can remove it. It

00:30:08.270 --> 00:30:09.870
<v Speaker 0>it that's not a big deal. So we

00:30:09.870 --> 00:30:11.710
<v Speaker 0>can do a helm l s

00:30:13.390 --> 00:30:15.470
<v Speaker 0>at minus and take l s

00:30:16.205 --> 00:30:17.644
<v Speaker 0>and delete.

00:30:19.005 --> 00:30:20.365
<v Speaker 1>I mean, maybe if we could just leave

00:30:20.365 --> 00:30:21.565
<v Speaker 1>it, we could try it.

00:30:22.765 --> 00:30:26.045
<v Speaker 0>That's okay. Let's let's not introduce opportunity for

00:30:26.045 --> 00:30:27.405
<v Speaker 0>things to go wrong just because I'm too

00:30:27.405 --> 00:30:28.605
<v Speaker 0>quick to push the return key.

00:30:30.240 --> 00:30:32.720
<v Speaker 0>So we do have our values

00:30:33.520 --> 00:30:34.799
<v Speaker 0>dot YAML here.

00:30:35.760 --> 00:30:37.519
<v Speaker 0>So Assuming I should change this.

00:30:38.320 --> 00:30:39.760
<v Speaker 1>I think for now you can leave it.

00:30:39.760 --> 00:30:42.160
<v Speaker 1>It's up to you. Normally, you would, but,

00:30:42.160 --> 00:30:43.760
<v Speaker 1>yeah, we're gonna need whatever you put in

00:30:43.760 --> 00:30:45.695
<v Speaker 1>here, we're gonna need at some point.

00:30:47.455 --> 00:30:48.335
<v Speaker 1>And then

00:30:49.375 --> 00:30:50.495
<v Speaker 1>we have a

00:30:51.695 --> 00:30:54.175
<v Speaker 1>some options here that tells Tyk how it

00:30:54.175 --> 00:30:56.414
<v Speaker 1>needs to connect to Redis. So

00:30:56.655 --> 00:30:59.855
<v Speaker 1>there's two options. There's

00:30:59.250 --> 00:31:01.010
<v Speaker 1>that first part there, which is what we

00:31:01.010 --> 00:31:01.730
<v Speaker 1>should use,

00:31:02.690 --> 00:31:04.529
<v Speaker 1>that's, I I believe,

00:31:05.650 --> 00:31:07.650
<v Speaker 1>the Redis service that you should have running

00:31:07.650 --> 00:31:09.809
<v Speaker 1>now on port 6379.

00:31:10.450 --> 00:31:12.210
<v Speaker 0>Yeah. It seems this is the default, so

00:31:12.210 --> 00:31:13.490
<v Speaker 0>we should be okay just to leave that.

00:31:15.595 --> 00:31:16.394
<v Speaker 1>Yeah. Then

00:31:17.355 --> 00:31:19.195
<v Speaker 1>for what we're gonna do today, that's it.

00:31:19.195 --> 00:31:21.195
<v Speaker 1>We're not using Mongo. We're not using pump.

00:31:21.195 --> 00:31:21.674
<v Speaker 1>So

00:31:23.674 --> 00:31:26.075
<v Speaker 0>k. And then there's some gateway configuration around

00:31:26.075 --> 00:31:28.315
<v Speaker 0>as a daemon set, supposedly on node port,

00:31:28.315 --> 00:31:29.115
<v Speaker 0>cluster IP,

00:31:31.570 --> 00:31:33.970
<v Speaker 0>and then there's the pump config. Okay.

00:31:34.210 --> 00:31:34.850
<v Speaker 0>Yeah.

00:31:36.850 --> 00:31:38.290
<v Speaker 0>I'm just gonna I think there are other

00:31:38.290 --> 00:31:40.290
<v Speaker 0>than that as is should be okay. Just

00:31:40.290 --> 00:31:41.490
<v Speaker 1>running. We'll find out. We'll see.

00:31:43.865 --> 00:31:45.545
<v Speaker 0>So now if we take a look at

00:31:45.545 --> 00:31:46.825
<v Speaker 0>our namespace,

00:31:47.145 --> 00:31:49.545
<v Speaker 0>we have our three gateways running. That's because

00:31:49.545 --> 00:31:51.545
<v Speaker 0>it's a daemon set and I have a

00:31:52.585 --> 00:31:54.105
<v Speaker 0>I think a three node cluster.

00:31:56.720 --> 00:31:57.359
<v Speaker 1>Okay.

00:31:57.840 --> 00:31:58.720
<v Speaker 1>Interesting.

00:31:58.720 --> 00:31:59.279
<v Speaker 1>Right.

00:32:00.240 --> 00:32:01.519
<v Speaker 0>Is that what you expected?

00:32:02.720 --> 00:32:04.799
<v Speaker 1>I've never tried it on anything beyond a

00:32:04.799 --> 00:32:07.279
<v Speaker 1>a a one node cluster myself. So

00:32:08.240 --> 00:32:08.399
<v Speaker 1>yeah.

00:32:10.915 --> 00:32:13.475
<v Speaker 1>And that that that in terms of installation,

00:32:13.795 --> 00:32:15.475
<v Speaker 1>that's it. So we should have a gateway

00:32:15.475 --> 00:32:17.554
<v Speaker 1>there. So you should be able to

00:32:18.515 --> 00:32:19.794
<v Speaker 1>I would normally

00:32:21.555 --> 00:32:24.675
<v Speaker 1>port forward my my service so I can

00:32:24.675 --> 00:32:26.595
<v Speaker 1>hit my gateway from local host.

00:32:27.770 --> 00:32:29.049
<v Speaker 1>So I don't know if we can just

00:32:29.049 --> 00:32:30.649
<v Speaker 1>use one of those gateways.

00:32:36.890 --> 00:32:39.690
<v Speaker 1>And then 808443.

00:32:39.690 --> 00:32:39.929
<v Speaker 1>Perfect.

00:32:40.665 --> 00:32:43.465
<v Speaker 1>Yeah. And then if you've got another window,

00:32:44.425 --> 00:32:46.425
<v Speaker 1>there's a little health check we can try.

00:32:46.665 --> 00:32:48.265
<v Speaker 0>Yep. What's the path?

00:32:48.505 --> 00:32:49.385
<v Speaker 1>Slash hello.

00:32:54.080 --> 00:32:55.520
<v Speaker 0>Let me zoom in on that.

00:32:56.480 --> 00:32:58.640
<v Speaker 0>Oh, too much. Woah. It's okay to me.

00:33:00.000 --> 00:33:01.360
<v Speaker 0>There we go. So we got a status

00:33:01.360 --> 00:33:03.120
<v Speaker 0>pass. We get the version. I get a

00:33:03.120 --> 00:33:05.005
<v Speaker 0>little bit of description, and we get some

00:33:05.005 --> 00:33:07.005
<v Speaker 0>information about the Redis connection. So to you,

00:33:07.005 --> 00:33:08.605
<v Speaker 0>that looks like we have a healthy Tyk

00:33:08.605 --> 00:33:09.725
<v Speaker 0>gateway running.

00:33:10.365 --> 00:33:13.485
<v Speaker 1>To me, that looks pretty good. Yeah. Perfect.

00:33:13.804 --> 00:33:16.125
<v Speaker 0>There you go. Painless. Absolutely painless.

00:33:17.280 --> 00:33:18.960
<v Speaker 1>So So if we go back to the

00:33:18.960 --> 00:33:21.840
<v Speaker 1>docs now and on the left hand nav

00:33:22.960 --> 00:33:24.320
<v Speaker 1>under getting started,

00:33:29.134 --> 00:33:31.454
<v Speaker 1>And we can start with create an API.

00:33:33.134 --> 00:33:33.854
<v Speaker 1>And there's

00:33:34.414 --> 00:33:37.215
<v Speaker 1>three tabs there. Yep. Perfect. So open source

00:33:37.215 --> 00:33:38.574
<v Speaker 1>is the way we're gonna go.

00:33:39.774 --> 00:33:42.735
<v Speaker 1>So with with the open source gateway, there's

00:33:42.735 --> 00:33:45.570
<v Speaker 1>there's actually there's three ways to configure an

00:33:45.570 --> 00:33:46.210
<v Speaker 1>API.

00:33:47.010 --> 00:33:47.649
<v Speaker 1>So

00:33:48.130 --> 00:33:50.929
<v Speaker 1>the first way is to actually configure

00:33:51.090 --> 00:33:52.610
<v Speaker 1>an API definition,

00:33:52.610 --> 00:33:54.130
<v Speaker 1>which is just that it's it's it's a

00:33:54.130 --> 00:33:56.850
<v Speaker 1>JSON file. You would configure that on the

00:33:56.850 --> 00:33:57.570
<v Speaker 1>file system.

00:33:59.065 --> 00:34:02.425
<v Speaker 1>Option number two is to configure an API

00:34:02.425 --> 00:34:04.105
<v Speaker 1>via the gateway's

00:34:04.105 --> 00:34:05.385
<v Speaker 1>REST API,

00:34:05.865 --> 00:34:08.025
<v Speaker 1>and I I think that's what we'll do

00:34:08.025 --> 00:34:09.305
<v Speaker 1>next. And then

00:34:10.425 --> 00:34:12.850
<v Speaker 1>once we've been through that, we'll have a

00:34:12.850 --> 00:34:14.130
<v Speaker 1>look at how you would do this with

00:34:14.130 --> 00:34:15.410
<v Speaker 1>the operator as well.

00:34:16.369 --> 00:34:18.850
<v Speaker 0>Okay. So what you're saying there is to

00:34:18.850 --> 00:34:21.489
<v Speaker 0>get to find an API with the TykEatway,

00:34:21.730 --> 00:34:23.570
<v Speaker 0>we're gonna author something locally,

00:34:23.810 --> 00:34:25.730
<v Speaker 0>have the rest API of the gateway is

00:34:25.730 --> 00:34:27.494
<v Speaker 0>gonna do it. But at the same time,

00:34:27.494 --> 00:34:29.255
<v Speaker 0>or at least afterwards, we can use the

00:34:29.255 --> 00:34:31.094
<v Speaker 0>operator, which will allow us to use a

00:34:31.094 --> 00:34:34.534
<v Speaker 0>custom resource to apply the same thing. That's

00:34:34.534 --> 00:34:37.335
<v Speaker 1>right. So the operator essentially provides a number

00:34:37.335 --> 00:34:40.214
<v Speaker 1>of custom resource definitions that basically allow you

00:34:40.214 --> 00:34:40.295
<v Speaker 1>to

00:34:41.280 --> 00:34:43.440
<v Speaker 1>work with Tyk in the same way that

00:34:43.440 --> 00:34:44.160
<v Speaker 1>you would

00:34:44.400 --> 00:34:46.640
<v Speaker 1>any other kind of Kubernetes object or or

00:34:46.640 --> 00:34:47.680
<v Speaker 1>or primitive,

00:34:47.840 --> 00:34:49.440
<v Speaker 1>and it allows you to do this in

00:34:49.440 --> 00:34:51.440
<v Speaker 1>a kind of GitOps style

00:34:51.920 --> 00:34:52.960
<v Speaker 1>declarative

00:34:53.040 --> 00:34:54.080
<v Speaker 1>API management.

00:34:55.284 --> 00:34:57.525
<v Speaker 1>But if we if we start with step

00:34:57.525 --> 00:34:59.525
<v Speaker 1>two there, and so we've got a sample

00:34:59.525 --> 00:35:01.685
<v Speaker 1>API in the docs that we can use

00:35:01.685 --> 00:35:02.645
<v Speaker 1>just to

00:35:03.365 --> 00:35:05.845
<v Speaker 1>just to start things off, at the top

00:35:05.845 --> 00:35:07.845
<v Speaker 1>of that curl command, there is

00:35:09.000 --> 00:35:10.680
<v Speaker 1>an authorization header.

00:35:11.160 --> 00:35:13.160
<v Speaker 1>The value for that authorization

00:35:13.160 --> 00:35:15.720
<v Speaker 1>header should be your secret that was in

00:35:15.720 --> 00:35:16.280
<v Speaker 1>your

00:35:16.920 --> 00:35:19.400
<v Speaker 1>values dot YAML file. I can't remember if

00:35:19.400 --> 00:35:21.080
<v Speaker 1>we left it as changing it. I did

00:35:21.080 --> 00:35:23.400
<v Speaker 1>also notice as well, these docs have just

00:35:24.195 --> 00:35:26.195
<v Speaker 1>they've just been they've been through a bit

00:35:26.195 --> 00:35:28.035
<v Speaker 1>of a refresh, and it looks like something's

00:35:28.035 --> 00:35:30.115
<v Speaker 1>gone amiss. So at the bottom of that

00:35:30.115 --> 00:35:31.075
<v Speaker 1>kill command,

00:35:31.395 --> 00:35:33.235
<v Speaker 1>you'll notice there's

00:35:33.235 --> 00:35:34.275
<v Speaker 1>a missing

00:35:34.275 --> 00:35:35.875
<v Speaker 1>closing quote for the payload.

00:35:37.539 --> 00:35:39.540
<v Speaker 1>And we're also missing the

00:35:39.940 --> 00:35:42.819
<v Speaker 1>URL support and the path to the API

00:35:42.819 --> 00:35:44.579
<v Speaker 1>endpoint. So I can I can take you

00:35:44.579 --> 00:35:46.740
<v Speaker 1>through all of that? That has actually I've

00:35:46.740 --> 00:35:48.740
<v Speaker 1>I've put a PR and I'm just waiting

00:35:48.740 --> 00:35:49.539
<v Speaker 1>for that to be merged.

00:35:50.325 --> 00:35:53.285
<v Speaker 0>Alright. Okay. So let's go with create an

00:35:53.285 --> 00:35:54.245
<v Speaker 0>API.

00:35:55.685 --> 00:35:57.525
<v Speaker 0>We're dropping our curl.

00:35:59.765 --> 00:36:01.925
<v Speaker 1>I'll call host 88. Pilot's trying to get

00:36:02.805 --> 00:36:03.685
<v Speaker 0>Too fancy there.

00:36:04.910 --> 00:36:06.510
<v Speaker 0>Alright. The path is?

00:36:06.990 --> 00:36:08.430
<v Speaker 1>Slash type

00:36:10.670 --> 00:36:11.550
<v Speaker 1>slash

00:36:12.590 --> 00:36:13.390
<v Speaker 1>APIs.

00:36:13.470 --> 00:36:14.990
<v Speaker 0>Oh, the Copilot knows.

00:36:15.230 --> 00:36:15.870
<v Speaker 0>See?

00:36:16.430 --> 00:36:18.045
<v Speaker 0>I don't know if you've played with Copilot

00:36:18.045 --> 00:36:20.285
<v Speaker 0>yet on Versus Code, but it can read

00:36:20.285 --> 00:36:22.365
<v Speaker 0>my mind. It is ridiculous. Wow.

00:36:22.685 --> 00:36:24.685
<v Speaker 1>And I think that closing quote should be

00:36:24.685 --> 00:36:27.005
<v Speaker 1>a single quote. Yeah. Well, yeah. There's doubles

00:36:27.005 --> 00:36:29.005
<v Speaker 0>and syncs. Yeah. You're right. There we go.

00:36:29.005 --> 00:36:31.085
<v Speaker 0>If the syntax highlighting doesn't work, you've messed

00:36:31.085 --> 00:36:32.365
<v Speaker 0>up. That's my rule. Okay.

00:36:33.860 --> 00:36:36.260
<v Speaker 1>And then, yeah, change the secret, the authorization

00:36:36.260 --> 00:36:38.180
<v Speaker 1>header to whatever was in the file. I

00:36:38.180 --> 00:36:39.620
<v Speaker 1>think we left it as default.

00:36:40.100 --> 00:36:40.820
<v Speaker 0>Yep.

00:36:41.700 --> 00:36:43.860
<v Speaker 0>I'll just make this a a real script.

00:36:44.100 --> 00:36:45.860
<v Speaker 0>So that should be able to run

00:36:46.235 --> 00:36:48.475
<v Speaker 0>now. So this is going to

00:36:49.115 --> 00:36:51.115
<v Speaker 0>authorize against the Tyk Gateway,

00:36:51.675 --> 00:36:53.915
<v Speaker 0>sending a post request. The payload this is

00:36:53.915 --> 00:36:55.595
<v Speaker 0>how we describe an API then. So we

00:36:55.595 --> 00:36:56.555
<v Speaker 0>have to give it This is how we

00:36:56.795 --> 00:36:58.475
<v Speaker 1>yeah. In in the nonoperator

00:36:58.475 --> 00:36:59.195
<v Speaker 1>world,

00:36:59.355 --> 00:37:00.475
<v Speaker 1>this is how we

00:37:01.115 --> 00:37:01.595
<v Speaker 1>describe

00:37:02.000 --> 00:37:04.240
<v Speaker 1>an API. There's actually there's a hell of

00:37:04.240 --> 00:37:05.599
<v Speaker 1>a lot more that you could put in

00:37:05.599 --> 00:37:07.520
<v Speaker 1>here that we're kind of doing

00:37:08.640 --> 00:37:09.680
<v Speaker 1>bare minimum

00:37:10.079 --> 00:37:13.040
<v Speaker 1>hello world type at the moment. So just

00:37:13.040 --> 00:37:13.680
<v Speaker 1>the

00:37:14.095 --> 00:37:17.855
<v Speaker 1>fields that we need to publish this API.

00:37:17.855 --> 00:37:20.495
<v Speaker 1>That's essentially it's gonna be as simple as

00:37:20.495 --> 00:37:22.255
<v Speaker 1>it can get on Tyk. It's

00:37:22.975 --> 00:37:25.295
<v Speaker 1>gonna publish an API that should be keyless,

00:37:25.295 --> 00:37:26.335
<v Speaker 1>so we won't need

00:37:26.720 --> 00:37:30.000
<v Speaker 1>any kind of API key or other type

00:37:30.000 --> 00:37:31.839
<v Speaker 1>of token to be able to hit this,

00:37:31.920 --> 00:37:33.599
<v Speaker 1>and it's gonna proxy to this

00:37:34.799 --> 00:37:37.519
<v Speaker 1>request response service out on the Internet. Yeah.

00:37:37.519 --> 00:37:40.079
<v Speaker 0>Nice. HTTP, Ben. I like that. Yeah. It's

00:37:40.319 --> 00:37:40.720
<v Speaker 1>yeah.

00:37:41.454 --> 00:37:43.615
<v Speaker 0>Okay. Let's create our

00:37:43.615 --> 00:37:46.095
<v Speaker 0>API. So I'm gonna need to keep my

00:37:46.095 --> 00:37:48.575
<v Speaker 0>port forward running. So let's just Yep. Put

00:37:48.575 --> 00:37:49.215
<v Speaker 0>this.

00:37:51.694 --> 00:37:53.375
<v Speaker 0>And I should be able to just run

00:37:53.375 --> 00:37:54.734
<v Speaker 0>or create an API.

00:37:58.900 --> 00:37:59.940
<v Speaker 0>Did that work?

00:38:01.140 --> 00:38:01.860
<v Speaker 2>No.

00:38:05.220 --> 00:38:07.460
<v Speaker 0>Getting connection reset back here. Let me recreate

00:38:07.460 --> 00:38:08.100
<v Speaker 0>the port forward.

00:38:09.995 --> 00:38:11.515
<v Speaker 1>Oh, hang on a minute. Sorry. Go to

00:38:11.515 --> 00:38:12.795
<v Speaker 1>port forward again.

00:38:15.835 --> 00:38:17.195
<v Speaker 1>If you bring up

00:38:17.835 --> 00:38:20.155
<v Speaker 1>yeah. This port forward eighty eighty to four

00:38:20.155 --> 00:38:21.115
<v Speaker 1>four three, isn't it?

00:38:22.130 --> 00:38:24.130
<v Speaker 0>Yeah. What did I get here? Local host

00:38:24.130 --> 00:38:26.290
<v Speaker 0>a is it HTTPS or HTTP?

00:38:26.370 --> 00:38:27.330
<v Speaker 1>HTTP.

00:38:27.330 --> 00:38:28.930
<v Speaker 1>Sorry. That's it.

00:38:30.050 --> 00:38:32.290
<v Speaker 0>That's better. There we go. Yeah. You can

00:38:32.370 --> 00:38:33.810
<v Speaker 1>I mean, if you want to enable TLS,

00:38:33.810 --> 00:38:35.490
<v Speaker 1>there's options in there to do that?

00:38:35.890 --> 00:38:38.075
<v Speaker 1>But yeah. Does it have native

00:38:38.234 --> 00:38:40.234
<v Speaker 0>ACME slash let's encrypt support, or would that

00:38:40.234 --> 00:38:41.995
<v Speaker 0>be something I use cert manager for?

00:38:42.315 --> 00:38:44.635
<v Speaker 1>You use cert manager for that. Alright. Okay.

00:38:44.635 --> 00:38:47.434
<v Speaker 1>I think we as part of the operator

00:38:47.434 --> 00:38:48.395
<v Speaker 1>installation,

00:38:49.194 --> 00:38:50.714
<v Speaker 1>there's a step in there to actually

00:38:51.210 --> 00:38:52.730
<v Speaker 1>install cert manager.

00:38:53.609 --> 00:38:55.850
<v Speaker 1>You can actually build use operator to

00:38:56.730 --> 00:38:59.690
<v Speaker 1>operate this gateway that's running in your Kubernetes

00:38:59.690 --> 00:39:01.609
<v Speaker 1>cluster, you can also I'm not sure if

00:39:01.609 --> 00:39:04.330
<v Speaker 1>we mentioned, you can also use it to

00:39:04.890 --> 00:39:06.410
<v Speaker 1>publish APIs and control

00:39:07.085 --> 00:39:09.244
<v Speaker 1>non Kubernetes gateways as well. You could even

00:39:09.244 --> 00:39:10.445
<v Speaker 1>point it at a

00:39:10.684 --> 00:39:12.285
<v Speaker 1>a Tyk installation

00:39:12.285 --> 00:39:14.365
<v Speaker 1>in Tyk Cloud, a SaaS service.

00:39:14.684 --> 00:39:16.205
<v Speaker 1>So the operator itself

00:39:16.525 --> 00:39:18.605
<v Speaker 1>is dependent on Kubernetes,

00:39:18.605 --> 00:39:20.125
<v Speaker 1>but you don't have to use it to

00:39:20.125 --> 00:39:20.765
<v Speaker 1>manage

00:39:21.085 --> 00:39:22.285
<v Speaker 1>Kubernetes environments.

00:39:23.460 --> 00:39:24.500
<v Speaker 0>Okay. Cool.

00:39:24.740 --> 00:39:27.619
<v Speaker 0>Now if I'm following a lot blah blah

00:39:27.619 --> 00:39:29.780
<v Speaker 0>blah. If I'm following along correctly,

00:39:30.420 --> 00:39:32.180
<v Speaker 0>I I feel like I should be able

00:39:32.180 --> 00:39:34.180
<v Speaker 0>to run local host local host

00:39:34.500 --> 00:39:37.555
<v Speaker 0>hello world, and that would be proxied onto

00:39:37.555 --> 00:39:39.235
<v Speaker 0>the API, or is there something to the

00:39:39.235 --> 00:39:40.755
<v Speaker 0>path I need to augment it with in

00:39:40.755 --> 00:39:41.875
<v Speaker 0>order for that to work?

00:39:43.235 --> 00:39:45.155
<v Speaker 1>So you would you might need a closing

00:39:45.155 --> 00:39:48.355
<v Speaker 1>slash, and it's sometimes useful also to use.

00:39:48.355 --> 00:39:50.650
<v Speaker 1>There's a bunch of methods on HTTP, bin,

00:39:50.650 --> 00:39:52.890
<v Speaker 1>one of which I normally use is

00:39:53.290 --> 00:39:55.690
<v Speaker 1>a slash get operation.

00:39:57.290 --> 00:39:58.810
<v Speaker 1>But, yeah, try and try try and just

00:39:58.810 --> 00:39:59.530
<v Speaker 1>hit hello world.

00:40:04.984 --> 00:40:05.945
<v Speaker 0>Not quite.

00:40:07.545 --> 00:40:09.305
<v Speaker 0>So let's go through this. I wanna make

00:40:09.305 --> 00:40:11.225
<v Speaker 0>sure I understand this definition correctly.

00:40:12.424 --> 00:40:14.744
<v Speaker 0>Yeah. So we've added something to the tech

00:40:14.744 --> 00:40:17.289
<v Speaker 0>gateway that says if we ever request hello

00:40:17.289 --> 00:40:20.170
<v Speaker 0>dash world slash, the the prop the request

00:40:20.170 --> 00:40:22.170
<v Speaker 0>will be proxied through to the HTTP band

00:40:22.170 --> 00:40:24.490
<v Speaker 0>service that you have publicly available here.

00:40:25.690 --> 00:40:27.769
<v Speaker 0>Although it does this trip lesson path. I'm

00:40:27.769 --> 00:40:28.410
<v Speaker 0>not sure

00:40:28.730 --> 00:40:29.769
<v Speaker 0>what's happening there.

00:40:30.825 --> 00:40:32.265
<v Speaker 0>Oh, yes. Because when you pass it on

00:40:32.265 --> 00:40:33.865
<v Speaker 0>to the following service, it takes that path

00:40:33.865 --> 00:40:35.145
<v Speaker 0>off. Right? So it would just be slash

00:40:35.145 --> 00:40:37.225
<v Speaker 0>on the remote service. Okay.

00:40:38.425 --> 00:40:40.345
<v Speaker 0>And I don't think much of this is

00:40:40.345 --> 00:40:43.224
<v Speaker 0>particularly important for right now. That is except

00:40:43.224 --> 00:40:44.665
<v Speaker 0>for the keyless and off, we're just saying

00:40:44.665 --> 00:40:46.665
<v Speaker 0>that there's no authorization on the remote API.

00:40:48.320 --> 00:40:49.840
<v Speaker 0>Is there anything that you want to highlight

00:40:49.840 --> 00:40:51.520
<v Speaker 0>here? Or is it

00:40:52.080 --> 00:40:53.200
<v Speaker 0>am I correct to say that it's not

00:40:53.200 --> 00:40:54.080
<v Speaker 0>that important right now?

00:41:01.055 --> 00:41:03.055
<v Speaker 2>Andy, did we lose you? Yeah. I think

00:41:03.055 --> 00:41:04.255
<v Speaker 0>his Internet's gone.

00:41:05.855 --> 00:41:06.815
<v Speaker 0>It's

00:41:06.815 --> 00:41:07.935
<v Speaker 0>alright. Yeah. So

00:41:09.934 --> 00:41:11.615
<v Speaker 0>I kind of expected this to work.

00:41:12.750 --> 00:41:14.750
<v Speaker 2>Let's let's let's try try that a little

00:41:14.750 --> 00:41:16.670
<v Speaker 2>bit differently. Maybe just I think maybe we

00:41:16.670 --> 00:41:18.910
<v Speaker 2>don't need that x get for now. Let's

00:41:18.910 --> 00:41:20.750
<v Speaker 2>if we were to get rid of that,

00:41:21.550 --> 00:41:23.870
<v Speaker 2>just make the curl request. Is that

00:41:24.430 --> 00:41:27.150
<v Speaker 2>just not finding the way okay.

00:41:29.245 --> 00:41:29.965
<v Speaker 0>Yeah.

00:41:33.565 --> 00:41:35.405
<v Speaker 0>I mean, we did create the API, didn't

00:41:35.405 --> 00:41:35.965
<v Speaker 0>we?

00:41:36.365 --> 00:41:37.005
<v Speaker 0>Yeah.

00:41:37.405 --> 00:41:40.365
<v Speaker 0>We got 200 okay key hello world status

00:41:40.365 --> 00:41:41.565
<v Speaker 0>action added.

00:41:45.119 --> 00:41:47.680
<v Speaker 0>We should follow the documentation instead of me

00:41:47.680 --> 00:41:49.680
<v Speaker 0>making it up. Maybe that's a good idea.

00:41:50.880 --> 00:41:53.760
<v Speaker 0>So we we did see this. We're happy

00:41:53.760 --> 00:41:54.560
<v Speaker 0>with that.

00:41:55.599 --> 00:41:57.920
<v Speaker 0>Mhmm. Oh, so there's an API's invite to

00:41:57.920 --> 00:41:59.255
<v Speaker 0>pull them up. All you have to do

00:42:01.335 --> 00:42:03.575
<v Speaker 2>think yeah. That I think is the authorization.

00:42:04.375 --> 00:42:05.815
<v Speaker 0>Yeah. So we have to tell it to

00:42:05.815 --> 00:42:08.855
<v Speaker 0>reload or restart the pods. So let's try

00:42:08.855 --> 00:42:10.615
<v Speaker 0>the reload command then. So

00:42:11.510 --> 00:42:13.670
<v Speaker 0>let me fix it off. So

00:42:16.309 --> 00:42:18.790
<v Speaker 0>this is change me. Change This

00:42:19.510 --> 00:42:20.870
<v Speaker 0>is HTTP

00:42:23.109 --> 00:42:24.470
<v Speaker 0>local host,

00:42:24.710 --> 00:42:27.030
<v Speaker 0>and I am forwarding on 8,080,

00:42:27.405 --> 00:42:29.885
<v Speaker 0>and we're just passing a reload.

00:42:31.245 --> 00:42:33.565
<v Speaker 0>And that looks okay. So I think now

00:42:34.205 --> 00:42:35.565
<v Speaker 2>You need to you do need to hot

00:42:35.565 --> 00:42:37.325
<v Speaker 2>reload the the gateway, I think. So I

00:42:37.325 --> 00:42:38.685
<v Speaker 2>think that's that's why it's not picking up

00:42:38.685 --> 00:42:41.099
<v Speaker 2>the API otherwise. Yeah. I think that's what

00:42:41.099 --> 00:42:42.859
<v Speaker 2>we're missing. So I think it worked now.

00:42:42.859 --> 00:42:45.099
<v Speaker 2>Yeah. Yep. That's what was missing. Perfect. Yep.

00:42:45.099 --> 00:42:46.700
<v Speaker 2>So I I think if you do if

00:42:46.700 --> 00:42:48.220
<v Speaker 2>you run the same with the get at

00:42:48.220 --> 00:42:49.100
<v Speaker 2>the end of that,

00:42:50.059 --> 00:42:52.299
<v Speaker 2>so if you curl that with slash get,

00:42:52.299 --> 00:42:54.140
<v Speaker 2>yeah, I think you should get a little

00:42:54.140 --> 00:42:55.180
<v Speaker 2>bit nicer.

00:42:55.339 --> 00:42:56.585
<v Speaker 2>Yeah. I think you get this one, which

00:42:56.585 --> 00:42:58.105
<v Speaker 2>is a bit more easier to read rather

00:42:58.105 --> 00:43:00.184
<v Speaker 2>than a, you know, HTML sort of thing

00:43:00.184 --> 00:43:03.385
<v Speaker 2>coming through. Yeah. Definitely. Yeah. That's all. Yeah.

00:43:04.505 --> 00:43:06.905
<v Speaker 2>Okay. I think we've got Andy back in.

00:43:08.585 --> 00:43:10.025
<v Speaker 1>It was hard to lock it, didn't it?

00:43:11.740 --> 00:43:13.180
<v Speaker 2>Had to happen. We did talk about it

00:43:13.180 --> 00:43:14.620
<v Speaker 2>right at the beginning. It just had to

00:43:14.620 --> 00:43:15.100
<v Speaker 2>happen.

00:43:15.980 --> 00:43:18.540
<v Speaker 1>But we managed came back pretty quickly. But,

00:43:18.540 --> 00:43:20.300
<v Speaker 1>yeah, then I I had trouble getting back

00:43:20.300 --> 00:43:22.060
<v Speaker 1>in the session. But, anyway, I'm back here.

00:43:22.060 --> 00:43:24.620
<v Speaker 1>So yeah. Sorry about that. We're we're smashing

00:43:24.620 --> 00:43:27.155
<v Speaker 0>it. We're we're we're we're reading the documentation.

00:43:27.155 --> 00:43:28.035
<v Speaker 2>We we we

00:43:28.835 --> 00:43:30.675
<v Speaker 2>got through it. It was I think we

00:43:30.675 --> 00:43:32.195
<v Speaker 2>needed to hot reload the gateway. So I

00:43:32.195 --> 00:43:33.715
<v Speaker 2>think we just did that, and it seemed

00:43:33.715 --> 00:43:34.915
<v Speaker 2>to be working at the moment. So that's

00:43:34.915 --> 00:43:36.435
<v Speaker 1>not a problem. Will be the next step.

00:43:36.435 --> 00:43:37.235
<v Speaker 1>Yeah. Cool. Okay.

00:43:38.060 --> 00:43:39.820
<v Speaker 0>Okay. So we did the reload. I can

00:43:39.820 --> 00:43:41.740
<v Speaker 0>now proxy a request to the issue to

00:43:41.740 --> 00:43:43.020
<v Speaker 0>prevent instance,

00:43:43.660 --> 00:43:44.700
<v Speaker 0>and that's working

00:43:44.940 --> 00:43:45.900
<v Speaker 0>quite nicely.

00:43:46.700 --> 00:43:47.500
<v Speaker 1>Lovely.

00:43:47.500 --> 00:43:48.060
<v Speaker 1>Okay.

00:43:48.940 --> 00:43:51.660
<v Speaker 1>Right. So we've we've created an API using

00:43:51.660 --> 00:43:52.540
<v Speaker 1>the REST API.

00:43:54.275 --> 00:43:55.955
<v Speaker 1>We've we've hot reloaded.

00:43:56.115 --> 00:43:57.955
<v Speaker 1>There's other options in here to create a

00:43:57.955 --> 00:43:59.955
<v Speaker 1>file based, but I would suggest we move

00:43:59.955 --> 00:44:01.075
<v Speaker 1>on to actually

00:44:03.955 --> 00:44:06.115
<v Speaker 1>the next step in the tutorial. So I

00:44:06.115 --> 00:44:07.875
<v Speaker 1>think that will be access and API.

00:44:08.480 --> 00:44:10.079
<v Speaker 0>Oh, you might have asked a couple of

00:44:10.079 --> 00:44:11.760
<v Speaker 0>questions. We also have one in the chat.

00:44:11.760 --> 00:44:14.319
<v Speaker 0>So Yeah. Sure. Why is the hot reloaded

00:44:14.319 --> 00:44:14.559
<v Speaker 2>into

00:44:18.000 --> 00:44:19.440
<v Speaker 1>Say again. Sorry. I was just gonna ask

00:44:19.440 --> 00:44:21.279
<v Speaker 2>one one one final thing, one one thing.

00:44:21.825 --> 00:44:24.224
<v Speaker 2>Andy, do we need to hit any other

00:44:24.224 --> 00:44:26.305
<v Speaker 2>specific endpoint to for the hot reload to

00:44:26.305 --> 00:44:27.105
<v Speaker 2>take effect?

00:44:28.464 --> 00:44:31.505
<v Speaker 2>Something around the slash API slash reload or

00:44:31.505 --> 00:44:33.665
<v Speaker 2>something on those lines slash Tyk slash reload,

00:44:34.119 --> 00:44:35.720
<v Speaker 2>or are we good at the moment since

00:44:35.720 --> 00:44:37.080
<v Speaker 2>we are getting a response? Is there anything

00:44:37.080 --> 00:44:38.119
<v Speaker 2>else that we need to do to make

00:44:38.119 --> 00:44:39.640
<v Speaker 2>sure it's it's all okay? If you hit

00:44:39.640 --> 00:44:41.400
<v Speaker 1>that if you sent a request to that

00:44:41.400 --> 00:44:43.320
<v Speaker 1>slash tyk slash reload,

00:44:43.960 --> 00:44:44.760
<v Speaker 1>you're good.

00:44:45.560 --> 00:44:47.320
<v Speaker 0>We did And by virtue of the fact

00:44:47.320 --> 00:44:48.945
<v Speaker 1>that you were able to actually send request

00:44:48.945 --> 00:44:50.785
<v Speaker 1>and get a 200 response

00:44:50.945 --> 00:44:53.105
<v Speaker 1>suggests that it has hot reloaded.

00:44:53.585 --> 00:44:55.745
<v Speaker 0>So why is the hot reload not automatic

00:44:55.745 --> 00:44:58.225
<v Speaker 0>when I create new p i's APIs? Like,

00:44:58.225 --> 00:44:59.265
<v Speaker 0>why do I need

00:44:59.505 --> 00:45:00.545
<v Speaker 0>to manually do that?

00:45:02.470 --> 00:45:05.190
<v Speaker 1>In the enterprise edition, this is one of

00:45:05.350 --> 00:45:07.030
<v Speaker 1>I'm not sure it's a benefit, but that's

00:45:07.030 --> 00:45:09.510
<v Speaker 1>certainly something that happens. So when you in

00:45:09.510 --> 00:45:12.070
<v Speaker 1>the enterprise edition, you publish in the dashboard,

00:45:12.310 --> 00:45:14.710
<v Speaker 1>and then, basically, there's a a pub sub

00:45:14.710 --> 00:45:17.165
<v Speaker 1>channel between the dashboard and the gateways, and

00:45:17.165 --> 00:45:19.005
<v Speaker 1>they hot reload automatically.

00:45:19.325 --> 00:45:21.565
<v Speaker 1>In the gateways, why that is not built

00:45:21.565 --> 00:45:23.645
<v Speaker 1>in by default? I honestly I don't know.

00:45:23.645 --> 00:45:24.125
<v Speaker 1>But

00:45:26.605 --> 00:45:27.405
<v Speaker 0>Okay.

00:45:28.445 --> 00:45:29.165
<v Speaker 0>So

00:45:29.645 --> 00:45:31.485
<v Speaker 0>oh, yeah. We got a a question from

00:45:31.645 --> 00:45:32.285
<v Speaker 0>Russell

00:45:33.279 --> 00:45:36.400
<v Speaker 0>who is asking, so what logging does take

00:45:36.400 --> 00:45:37.280
<v Speaker 0>pervade?

00:45:39.519 --> 00:45:41.760
<v Speaker 0>Does the log acts like whenever I

00:45:41.920 --> 00:45:43.440
<v Speaker 0>is there an auto log for when I

00:45:43.440 --> 00:45:46.400
<v Speaker 0>create or delete or edit APIs? Is there

00:45:46.400 --> 00:45:48.615
<v Speaker 0>a logging when I access APIs? Like, what

00:45:48.615 --> 00:45:49.895
<v Speaker 0>kind of stuff does it emit?

00:45:50.775 --> 00:45:51.575
<v Speaker 1>There's

00:45:51.655 --> 00:45:54.215
<v Speaker 1>so there's a number of things. So as

00:45:54.295 --> 00:45:57.495
<v Speaker 1>as you send requests to the API,

00:45:57.495 --> 00:45:58.135
<v Speaker 1>analytics

00:45:58.615 --> 00:46:00.055
<v Speaker 1>logs are generated,

00:46:00.295 --> 00:46:03.580
<v Speaker 1>and that's where this component that we mentioned

00:46:03.580 --> 00:46:05.660
<v Speaker 1>in Buddha's intro,

00:46:06.619 --> 00:46:09.180
<v Speaker 1>we have this component called Tykbump pump, which

00:46:09.180 --> 00:46:11.020
<v Speaker 1>essentially allows you to take those

00:46:11.580 --> 00:46:14.780
<v Speaker 1>analytics logs, which could that could actually be

00:46:14.780 --> 00:46:16.940
<v Speaker 1>full payload information or it could just be

00:46:16.940 --> 00:46:17.580
<v Speaker 1>metadata

00:46:18.115 --> 00:46:21.475
<v Speaker 1>and forward those analytics logs

00:46:21.475 --> 00:46:23.715
<v Speaker 1>off to a third party analytics

00:46:23.715 --> 00:46:25.475
<v Speaker 1>or monitoring system.

00:46:26.675 --> 00:46:27.955
<v Speaker 1>There are also

00:46:29.315 --> 00:46:30.675
<v Speaker 1>audit logs that

00:46:31.730 --> 00:46:35.010
<v Speaker 1>that may be an enterprise thing I'd have

00:46:35.010 --> 00:46:36.609
<v Speaker 1>to check, but in some part of the

00:46:36.609 --> 00:46:39.170
<v Speaker 1>stack, there are also audit logs that show

00:46:39.170 --> 00:46:42.050
<v Speaker 1>you when an administrator has

00:46:42.130 --> 00:46:44.849
<v Speaker 1>published a new API definition, for example, or

00:46:44.849 --> 00:46:47.035
<v Speaker 1>maybe they've they've created a key, they've done

00:46:47.035 --> 00:46:47.675
<v Speaker 1>something

00:46:49.435 --> 00:46:51.835
<v Speaker 1>that we generated an audit event for.

00:46:52.635 --> 00:46:54.475
<v Speaker 0>Alright. Perfect. Thank you very much.

00:46:55.115 --> 00:46:57.035
<v Speaker 0>Okay. So what do wanna do next then,

00:46:57.035 --> 00:46:58.235
<v Speaker 0>Andy? What was it you said there?

00:46:59.070 --> 00:47:00.910
<v Speaker 1>So I think the next step, if we

00:47:00.910 --> 00:47:02.030
<v Speaker 1>just scroll up,

00:47:02.670 --> 00:47:03.390
<v Speaker 1>there's

00:47:04.030 --> 00:47:05.950
<v Speaker 1>a next the next step in the tutorial

00:47:05.950 --> 00:47:07.790
<v Speaker 1>is to access an API.

00:47:08.430 --> 00:47:10.110
<v Speaker 1>We'll have a quick look at that, and

00:47:10.110 --> 00:47:12.190
<v Speaker 1>we're we're gonna have to change something to

00:47:12.190 --> 00:47:12.830
<v Speaker 1>do this.

00:47:13.470 --> 00:47:14.590
<v Speaker 1>So this is

00:47:15.285 --> 00:47:17.925
<v Speaker 1>right now, we've got an API that was

00:47:18.005 --> 00:47:19.525
<v Speaker 1>we set it as keyless.

00:47:20.405 --> 00:47:22.724
<v Speaker 1>And so what we're gonna do instead now

00:47:22.724 --> 00:47:23.925
<v Speaker 1>is we're actually

00:47:24.085 --> 00:47:25.525
<v Speaker 1>let's first of all,

00:47:25.845 --> 00:47:28.165
<v Speaker 1>we'll publish a new API, and I'll I'll

00:47:28.165 --> 00:47:30.244
<v Speaker 1>I'll take you through what config

00:47:30.650 --> 00:47:33.130
<v Speaker 1>you need to provide for that. And then

00:47:33.130 --> 00:47:33.850
<v Speaker 1>we'll

00:47:35.050 --> 00:47:37.690
<v Speaker 1>generate an API key that we'll then use

00:47:37.690 --> 00:47:39.610
<v Speaker 1>at runtime to access

00:47:40.250 --> 00:47:41.850
<v Speaker 1>that secured API.

00:47:41.930 --> 00:47:43.690
<v Speaker 1>Did that make sense? It does. Yeah.

00:47:44.994 --> 00:47:46.515
<v Speaker 1>So I think if you go back to

00:47:46.515 --> 00:47:48.915
<v Speaker 1>the the definition that you had previously

00:47:52.035 --> 00:47:54.275
<v Speaker 1>and let's just create another version of this

00:47:54.275 --> 00:47:55.315
<v Speaker 1>and, yeah,

00:47:55.635 --> 00:47:57.555
<v Speaker 1>maybe call it hello world

00:47:57.875 --> 00:47:59.555
<v Speaker 1>two or something

00:48:01.870 --> 00:48:03.150
<v Speaker 1>Or whatever you want.

00:48:03.790 --> 00:48:06.590
<v Speaker 0>Create an API two. Why not?

00:48:09.950 --> 00:48:11.870
<v Speaker 0>Come on, computer. You can do this.

00:48:12.190 --> 00:48:14.670
<v Speaker 0>Okay. There we go. I mean, we could

00:48:14.670 --> 00:48:17.150
<v Speaker 1>just update that. We could

00:48:16.895 --> 00:48:18.974
<v Speaker 1>send a put request and update the existing

00:48:18.974 --> 00:48:20.494
<v Speaker 1>thing. But if we just create a new

00:48:20.494 --> 00:48:20.734
<v Speaker 1>one

00:48:21.775 --> 00:48:23.615
<v Speaker 1>so we'll give it a new name,

00:48:24.015 --> 00:48:26.015
<v Speaker 1>change the slug, change the ID.

00:48:26.815 --> 00:48:28.255
<v Speaker 1>Instead of use keyless,

00:48:28.820 --> 00:48:30.500
<v Speaker 1>if we change that to be

00:48:32.420 --> 00:48:34.740
<v Speaker 1>you could do that or you could just

00:48:34.740 --> 00:48:35.380
<v Speaker 1>simply

00:48:35.780 --> 00:48:39.140
<v Speaker 1>not have that configuration item and instead use

00:48:39.380 --> 00:48:41.060
<v Speaker 1>we'll put in there in its place,

00:48:41.540 --> 00:48:41.780
<v Speaker 1>use

00:48:42.795 --> 00:48:44.555
<v Speaker 1>stand use underscore

00:48:44.555 --> 00:48:45.515
<v Speaker 1>standard

00:48:45.595 --> 00:48:46.635
<v Speaker 1>underscore

00:48:47.035 --> 00:48:47.595
<v Speaker 1>auth.

00:48:48.234 --> 00:48:49.435
<v Speaker 0>Oh, look at that.

00:48:49.835 --> 00:48:52.155
<v Speaker 0>Oh, tried to and now it's no one

00:48:52.315 --> 00:48:53.115
<v Speaker 0>no other things I want.

00:48:55.320 --> 00:48:56.200
<v Speaker 1>Swagger.

00:48:56.200 --> 00:48:57.480
<v Speaker 1>I'm

00:48:57.480 --> 00:48:59.960
<v Speaker 1>sure it's off, but Yeah. Yeah.

00:49:00.360 --> 00:49:02.040
<v Speaker 1>And we'll set that to true.

00:49:03.720 --> 00:49:05.480
<v Speaker 0>Is that it? Yeah.

00:49:05.480 --> 00:49:07.320
<v Speaker 1>We've got the off header name.

00:49:10.244 --> 00:49:11.845
<v Speaker 1>Yeah. And then I think just change the

00:49:11.845 --> 00:49:13.205
<v Speaker 1>listen path that's

00:49:13.525 --> 00:49:14.724
<v Speaker 1>in there somewhere.

00:49:15.525 --> 00:49:16.965
<v Speaker 0>Oh, hello world tour.

00:49:17.285 --> 00:49:18.085
<v Speaker 1>Yeah.

00:49:18.565 --> 00:49:19.045
<v Speaker 1>Okay.

00:49:25.799 --> 00:49:26.680
<v Speaker 0>Done.

00:49:29.000 --> 00:49:30.279
<v Speaker 0>Cool. What's

00:49:30.839 --> 00:49:32.599
<v Speaker 0>really, the main difference here is we have

00:49:32.599 --> 00:49:34.839
<v Speaker 0>removed to use keyless, and instead we're using

00:49:34.839 --> 00:49:36.760
<v Speaker 0>standard off. So what what does that mean?

00:49:37.704 --> 00:49:40.665
<v Speaker 1>So it means to access this API night,

00:49:40.665 --> 00:49:42.585
<v Speaker 1>now you need to provide a

00:49:43.385 --> 00:49:44.825
<v Speaker 1>a bearer token

00:49:44.825 --> 00:49:45.785
<v Speaker 1>that's been

00:49:46.265 --> 00:49:47.145
<v Speaker 1>either

00:49:47.305 --> 00:49:48.345
<v Speaker 1>generated

00:49:48.425 --> 00:49:51.065
<v Speaker 1>by Tyk or imported in as a custom

00:49:51.065 --> 00:49:52.425
<v Speaker 1>API key into Tyk.

00:49:53.020 --> 00:49:53.660
<v Speaker 1>Okay.

00:49:53.980 --> 00:49:55.740
<v Speaker 1>And so, yeah, that that's the next part

00:49:55.740 --> 00:49:58.300
<v Speaker 1>of the tutorial. You you you publish an

00:49:58.300 --> 00:50:00.540
<v Speaker 1>API that's secured and then we generate an

00:50:00.540 --> 00:50:02.140
<v Speaker 1>API key. And so

00:50:03.020 --> 00:50:03.980
<v Speaker 1>if we

00:50:04.715 --> 00:50:05.675
<v Speaker 0>Copy this.

00:50:05.995 --> 00:50:07.435
<v Speaker 1>Take this and then we'll have a look

00:50:07.435 --> 00:50:09.275
<v Speaker 1>at it and we'll we'll chain we'll change

00:50:09.275 --> 00:50:11.195
<v Speaker 1>the API that it's trying to access. In

00:50:11.195 --> 00:50:13.115
<v Speaker 1>fact, I think it's just templated, so it

00:50:13.115 --> 00:50:14.075
<v Speaker 1>should be fine.

00:50:15.275 --> 00:50:17.275
<v Speaker 0>Okay. So this is create a key.

00:50:22.360 --> 00:50:24.120
<v Speaker 0>That should be change me.

00:50:25.480 --> 00:50:26.120
<v Speaker 0>Yeah.

00:50:26.600 --> 00:50:29.000
<v Speaker 0>Okay. So this is interesting.

00:50:29.000 --> 00:50:31.240
<v Speaker 0>Right? So when we create a take key,

00:50:31.640 --> 00:50:33.240
<v Speaker 0>we can actually set

00:50:34.045 --> 00:50:36.445
<v Speaker 0>quarters and rate limits that allow you to

00:50:36.445 --> 00:50:38.925
<v Speaker 1>access the That is really, really cool.

00:50:39.885 --> 00:50:40.525
<v Speaker 1>Yeah.

00:50:40.765 --> 00:50:42.925
<v Speaker 1>There is actually another way to do this,

00:50:42.925 --> 00:50:44.685
<v Speaker 1>which it's it's not part of the getting

00:50:44.685 --> 00:50:46.365
<v Speaker 1>started guide. So you can do all of

00:50:46.365 --> 00:50:48.470
<v Speaker 1>these things directly on a key, that's, I

00:50:48.470 --> 00:50:50.310
<v Speaker 1>suggest, that's what we carry on doing.

00:50:50.470 --> 00:50:51.670
<v Speaker 1>But there is also

00:50:52.869 --> 00:50:55.830
<v Speaker 1>another object in Tyk called a security policy,

00:50:56.309 --> 00:50:57.990
<v Speaker 1>and a security policy,

00:50:58.230 --> 00:51:00.630
<v Speaker 1>basically allows you to kind of centralize the

00:51:00.630 --> 00:51:03.615
<v Speaker 1>control of these keys such that imagine you've

00:51:03.615 --> 00:51:06.095
<v Speaker 1>got hundreds or thousands of these keys that

00:51:06.095 --> 00:51:08.495
<v Speaker 1>are set with certain rate limits and quotas

00:51:08.495 --> 00:51:09.455
<v Speaker 1>on day one.

00:51:09.695 --> 00:51:11.615
<v Speaker 1>If you wanted to go in and you

00:51:11.615 --> 00:51:12.495
<v Speaker 1>wanted to

00:51:13.215 --> 00:51:15.375
<v Speaker 1>update all of those rate limits rather than

00:51:15.375 --> 00:51:16.655
<v Speaker 1>updating all of the keys,

00:51:18.460 --> 00:51:20.780
<v Speaker 1>If you use policies instead, you can just

00:51:20.780 --> 00:51:23.340
<v Speaker 1>update the policy, which when you create a

00:51:23.340 --> 00:51:25.980
<v Speaker 1>key, you template on values from the policy.

00:51:25.980 --> 00:51:27.980
<v Speaker 1>So you see much the same configuration. You

00:51:27.980 --> 00:51:31.180
<v Speaker 1>see rate limits, API access control lists, all

00:51:31.180 --> 00:51:33.005
<v Speaker 1>of the same stuff. When you create a

00:51:33.005 --> 00:51:34.205
<v Speaker 1>key from a policy,

00:51:34.525 --> 00:51:36.445
<v Speaker 1>if you were to update that key, any

00:51:36.445 --> 00:51:37.245
<v Speaker 1>related

00:51:37.405 --> 00:51:39.165
<v Speaker 1>sorry. If you were to update that policy,

00:51:39.165 --> 00:51:41.245
<v Speaker 1>any related key would also get updated.

00:51:44.589 --> 00:51:45.230
<v Speaker 0>Okay.

00:51:45.390 --> 00:51:47.069
<v Speaker 0>So there are two things in my head.

00:51:47.069 --> 00:51:48.750
<v Speaker 0>I'll start with the the question first, and

00:51:48.750 --> 00:51:50.510
<v Speaker 0>then I'll add on the the weird thing

00:51:50.510 --> 00:51:52.590
<v Speaker 0>that I wanna break on this key. So

00:51:53.069 --> 00:51:55.150
<v Speaker 0>I I do a lot of automation with

00:51:55.150 --> 00:51:57.230
<v Speaker 0>the YouTube API, and I have very strict

00:51:57.230 --> 00:52:00.174
<v Speaker 0>quotas from Google on that YouTube API. Is

00:52:00.174 --> 00:52:01.934
<v Speaker 0>that something I would try to replicate or

00:52:01.934 --> 00:52:04.174
<v Speaker 0>emulate using a key intake? Or would I

00:52:04.174 --> 00:52:05.935
<v Speaker 0>just rely on YouTube returning

00:52:07.135 --> 00:52:09.455
<v Speaker 0>their quota saying I'm over? Like,

00:52:10.015 --> 00:52:11.694
<v Speaker 0>if you were doing that yourself, how would

00:52:11.694 --> 00:52:14.010
<v Speaker 0>you make that work? So just repeat that

00:52:14.010 --> 00:52:16.730
<v Speaker 1>again. So, yeah. Whenever I created the YouTube

00:52:16.730 --> 00:52:18.730
<v Speaker 0>API, I got a quota of, like,

00:52:19.050 --> 00:52:22.010
<v Speaker 0>a thousand requests per day. Now would I

00:52:22.010 --> 00:52:24.170
<v Speaker 0>then try and replicate that quota with a

00:52:24.170 --> 00:52:26.325
<v Speaker 0>take key so that I never really quite

00:52:26.325 --> 00:52:28.005
<v Speaker 0>hit the YouTube one, or would I just

00:52:28.005 --> 00:52:29.445
<v Speaker 0>rely on the YouTube one, throw in the

00:52:29.445 --> 00:52:31.445
<v Speaker 0>error anyway, and handle it externally?

00:52:32.565 --> 00:52:34.805
<v Speaker 1>So, typically, you offload

00:52:34.805 --> 00:52:36.245
<v Speaker 1>that kind of thing

00:52:36.725 --> 00:52:37.685
<v Speaker 1>onto Tyk.

00:52:38.580 --> 00:52:40.740
<v Speaker 1>So, yeah, quite often, we work with customers

00:52:40.740 --> 00:52:41.620
<v Speaker 1>that have

00:52:42.500 --> 00:52:43.380
<v Speaker 1>historically,

00:52:43.380 --> 00:52:45.540
<v Speaker 1>they've implement their own kind implemented their own

00:52:45.540 --> 00:52:47.700
<v Speaker 1>rate limiting or quota

00:52:47.940 --> 00:52:49.300
<v Speaker 1>quota system.

00:52:49.700 --> 00:52:52.260
<v Speaker 1>Generally, you just when you introduce a gateway

00:52:52.260 --> 00:52:54.195
<v Speaker 1>into the infrastructure,

00:52:54.195 --> 00:52:56.835
<v Speaker 1>usually, you would leave that type of thing

00:52:56.915 --> 00:52:59.075
<v Speaker 1>to be performed by the gateway.

00:53:00.035 --> 00:53:02.355
<v Speaker 1>If if you if if your if your

00:53:02.355 --> 00:53:04.995
<v Speaker 1>API if you're saying that YouTube YouTube's already

00:53:04.995 --> 00:53:07.235
<v Speaker 1>providing it, I would still

00:53:07.830 --> 00:53:09.270
<v Speaker 1>do it in Tyk.

00:53:10.310 --> 00:53:12.630
<v Speaker 1>Apart from anything else, if you use a

00:53:12.630 --> 00:53:15.830
<v Speaker 1>a Tyk API key, as requests come in,

00:53:15.830 --> 00:53:18.630
<v Speaker 1>you're gonna get analytics in Tyk via the

00:53:18.630 --> 00:53:20.150
<v Speaker 1>pump to understand

00:53:20.150 --> 00:53:22.150
<v Speaker 1>who's using what and when and how much.

00:53:23.035 --> 00:53:24.555
<v Speaker 1>We would tie

00:53:24.875 --> 00:53:26.475
<v Speaker 1>the analytics to the key.

00:53:27.275 --> 00:53:28.075
<v Speaker 1>We also have

00:53:28.635 --> 00:53:30.955
<v Speaker 1>we didn't configure it, but we've got rate

00:53:30.955 --> 00:53:32.875
<v Speaker 1>limits on a key are fairly typical.

00:53:33.035 --> 00:53:35.035
<v Speaker 1>We also allow you to configure rate limits

00:53:35.035 --> 00:53:37.670
<v Speaker 1>on an API definition. It's actually it's a

00:53:37.670 --> 00:53:39.670
<v Speaker 1>different use case at that point. That's more

00:53:39.670 --> 00:53:40.230
<v Speaker 1>about

00:53:40.630 --> 00:53:41.509
<v Speaker 1>protection.

00:53:41.509 --> 00:53:43.430
<v Speaker 1>So if you know your infrastructure can only

00:53:43.430 --> 00:53:44.070
<v Speaker 1>handle

00:53:44.470 --> 00:53:46.950
<v Speaker 1>so many requests per second, then it makes

00:53:46.950 --> 00:53:48.630
<v Speaker 1>sense to set a rate limit on the

00:53:48.630 --> 00:53:49.829
<v Speaker 1>API definition

00:53:50.390 --> 00:53:51.349
<v Speaker 1>rather than

00:53:52.265 --> 00:53:54.345
<v Speaker 1>setting rate limits per consumer.

00:53:54.985 --> 00:53:56.425
<v Speaker 0>Yeah. That makes a lot of sense. Thank

00:53:56.425 --> 00:53:58.345
<v Speaker 0>you for that. We have a a couple

00:53:58.345 --> 00:54:00.185
<v Speaker 0>of questions in the chat. So Bella is

00:54:00.185 --> 00:54:02.185
<v Speaker 0>asking, is it possible to set a client

00:54:02.185 --> 00:54:03.465
<v Speaker 0>max rate limit?

00:54:03.890 --> 00:54:05.250
<v Speaker 0>I'm not sure I understand that. I don't

00:54:05.250 --> 00:54:07.090
<v Speaker 0>know if that'll make sense for you.

00:54:07.570 --> 00:54:09.730
<v Speaker 0>So a max rate limit per client. Like

00:54:09.730 --> 00:54:10.450
<v Speaker 1>a rate

00:54:10.770 --> 00:54:12.370
<v Speaker 1>I mean, the rate limit we set is

00:54:12.370 --> 00:54:13.490
<v Speaker 1>the the

00:54:13.490 --> 00:54:15.170
<v Speaker 1>maximum. So if you were to

00:54:15.490 --> 00:54:19.155
<v Speaker 1>update that rate limit to be five requests

00:54:19.155 --> 00:54:20.275
<v Speaker 1>per minute

00:54:20.275 --> 00:54:23.075
<v Speaker 1>or or or second, that's the maximum amount

00:54:23.075 --> 00:54:24.035
<v Speaker 1>that they can send.

00:54:24.995 --> 00:54:27.155
<v Speaker 0>Okay. And one for the last question. Sorry.

00:54:27.155 --> 00:54:29.235
<v Speaker 2>I I think the question might be around,

00:54:29.875 --> 00:54:31.715
<v Speaker 2>if there is a restriction on the number

00:54:31.350 --> 00:54:33.190
<v Speaker 2>clients themselves rather than the request. I think

00:54:33.190 --> 00:54:35.110
<v Speaker 2>we go based on request. So regardless of

00:54:35.190 --> 00:54:37.510
<v Speaker 2>I'm assuming is it is it specific for

00:54:37.510 --> 00:54:39.430
<v Speaker 2>those requests to come from specific clients? I

00:54:39.430 --> 00:54:41.270
<v Speaker 2>would assume not. I think it's dependent on

00:54:41.270 --> 00:54:42.870
<v Speaker 2>the number of requests coming in.

00:54:43.270 --> 00:54:45.645
<v Speaker 1>So you set a rate limit per client.

00:54:45.645 --> 00:54:47.565
<v Speaker 1>That's what we're doing here. The rate limit

00:54:47.565 --> 00:54:49.645
<v Speaker 1>is tied to the key that we're creating.

00:54:49.885 --> 00:54:52.125
<v Speaker 1>There is also that other rate limit. So

00:54:52.125 --> 00:54:53.405
<v Speaker 1>we could have set a rate limit on

00:54:53.405 --> 00:54:54.285
<v Speaker 1>an API.

00:54:54.765 --> 00:54:57.565
<v Speaker 1>Say that rate limit was a hundred requests

00:54:58.050 --> 00:55:00.450
<v Speaker 1>per second, and then you start issuing keys

00:55:00.450 --> 00:55:01.810
<v Speaker 1>that have rate limits.

00:55:02.530 --> 00:55:05.170
<v Speaker 1>The rate limit on the API definition is

00:55:05.170 --> 00:55:07.170
<v Speaker 1>the one that rules all. So regardless of

00:55:07.170 --> 00:55:09.010
<v Speaker 1>where the requests are coming from,

00:55:09.410 --> 00:55:11.785
<v Speaker 1>if you hit that rate limit, you're gonna

00:55:11.785 --> 00:55:12.905
<v Speaker 1>start getting

00:55:13.545 --> 00:55:15.705
<v Speaker 1>four two nines or whatever it's gonna be.

00:55:17.945 --> 00:55:20.425
<v Speaker 0>Okay. Thank you. Okay. So we got one

00:55:20.425 --> 00:55:22.345
<v Speaker 0>more question from Russell who's asking

00:55:22.505 --> 00:55:24.985
<v Speaker 0>if those quotas could be part of a

00:55:25.320 --> 00:55:28.360
<v Speaker 0>group or company level rather than a key.

00:55:30.600 --> 00:55:31.880
<v Speaker 0>So could I set,

00:55:32.120 --> 00:55:34.760
<v Speaker 0>like, my say that you know, we see

00:55:34.760 --> 00:55:36.440
<v Speaker 0>org ID in here. Like, say I want

00:55:36.440 --> 00:55:39.400
<v Speaker 0>to split my team into multiple organizations. Can

00:55:39.400 --> 00:55:41.835
<v Speaker 0>the quotas be applied to that org ID?

00:55:44.715 --> 00:55:46.955
<v Speaker 1>I think there might be some kind of

00:55:46.955 --> 00:55:49.115
<v Speaker 1>organization quota. We might have to dip dip

00:55:49.115 --> 00:55:51.195
<v Speaker 1>into the docs there to check it. Yeah.

00:55:51.195 --> 00:55:52.795
<v Speaker 0>I guess you could always generate a key

00:55:52.795 --> 00:55:56.075
<v Speaker 0>per group or team with that. You

00:55:55.670 --> 00:55:58.790
<v Speaker 1>could have a key shared by members of

00:55:58.790 --> 00:56:01.190
<v Speaker 1>a team or group, I guess. Yeah. I'm

00:56:01.190 --> 00:56:03.190
<v Speaker 1>wondering whether there is actually. There's something at

00:56:03.190 --> 00:56:04.950
<v Speaker 1>the back of my mind that we've got

00:56:04.950 --> 00:56:06.310
<v Speaker 1>some kind of organization

00:56:06.310 --> 00:56:08.310
<v Speaker 1>quota as well, but I can't remember what

00:56:08.310 --> 00:56:08.870
<v Speaker 1>that looks like.

00:56:09.615 --> 00:56:10.735
<v Speaker 1>We can have a quick look in the

00:56:10.735 --> 00:56:12.495
<v Speaker 1>docs. I could have dreamed that.

00:56:14.175 --> 00:56:15.215
<v Speaker 0>Alright. Well

00:56:16.095 --> 00:56:17.375
<v Speaker 0>okay. So let's

00:56:17.775 --> 00:56:19.295
<v Speaker 0>can we change this

00:56:19.775 --> 00:56:22.095
<v Speaker 0>quota to be one request per minute just

00:56:22.095 --> 00:56:24.060
<v Speaker 0>so that we can, you know, contrive a

00:56:24.060 --> 00:56:25.900
<v Speaker 0>situation where we get we get we have

00:56:25.900 --> 00:56:26.620
<v Speaker 0>the quota.

00:56:27.100 --> 00:56:29.420
<v Speaker 1>You can you can generate another key.

00:56:32.220 --> 00:56:32.940
<v Speaker 1>So

00:56:34.620 --> 00:56:36.780
<v Speaker 0>So would that just be allowance one,

00:56:36.940 --> 00:56:37.740
<v Speaker 0>rate one?

00:56:39.125 --> 00:56:41.525
<v Speaker 1>I think the per is that's per

00:56:42.244 --> 00:56:44.325
<v Speaker 1>I think that's second. I'm just gonna bring

00:56:44.325 --> 00:56:46.405
<v Speaker 1>up the docs myself and just check this.

00:56:50.405 --> 00:56:51.925
<v Speaker 2>I think I think per is is per

00:56:51.925 --> 00:56:53.765
<v Speaker 2>second, I think. So I think if you

00:56:53.925 --> 00:56:55.390
<v Speaker 2>that's that's one of the best I can't

00:56:55.390 --> 00:56:57.150
<v Speaker 1>hear you very well, Budder. Sorry?

00:56:59.870 --> 00:57:01.390
<v Speaker 1>I can't hear you very well. I don't

00:57:01.390 --> 00:57:02.510
<v Speaker 1>know if that's just me or

00:57:05.790 --> 00:57:07.230
<v Speaker 2>Is it is it okay now? Are you

00:57:07.310 --> 00:57:08.910
<v Speaker 0>Oh, yeah. Budder, your audio has dropped.

00:57:13.765 --> 00:57:17.205
<v Speaker 2>What about now? Any changes? Anything? No. It's

00:57:17.205 --> 00:57:18.965
<v Speaker 0>still very, very, very quiet.

00:57:24.710 --> 00:57:26.710
<v Speaker 2>Well, I get you guys continue for the

00:57:26.710 --> 00:57:29.109
<v Speaker 2>time. Yes. Whatever you did there fixed it.

00:57:30.069 --> 00:57:30.869
<v Speaker 2>Okay.

00:57:31.589 --> 00:57:32.790
<v Speaker 2>Okay. Fine.

00:57:33.510 --> 00:57:34.630
<v Speaker 2>No. I was just saying, I think it

00:57:34.630 --> 00:57:36.230
<v Speaker 2>is per second. So it's a number of

00:57:36.230 --> 00:57:38.225
<v Speaker 2>requests you do per second. So I think

00:57:38.225 --> 00:57:39.985
<v Speaker 2>if you put it something like two requests

00:57:39.985 --> 00:57:41.265
<v Speaker 2>over ten seconds,

00:57:41.505 --> 00:57:43.265
<v Speaker 2>it'll be a little bit more visible,

00:57:43.265 --> 00:57:43.985
<v Speaker 2>I would imagine.

00:57:44.385 --> 00:57:47.025
<v Speaker 1>I think the allowance is actually deprecated. We'll

00:57:47.025 --> 00:57:48.785
<v Speaker 1>leave it in. But allowance and rate are

00:57:48.785 --> 00:57:50.720
<v Speaker 1>the same thing. And the rate is a

00:57:50.800 --> 00:57:52.880
<v Speaker 1>is that is that one so that that

00:57:52.880 --> 00:57:54.960
<v Speaker 1>the unit is second. So that's one request

00:57:54.960 --> 00:57:56.480
<v Speaker 1>per second you've got there.

00:57:57.760 --> 00:57:59.040
<v Speaker 2>So I I think one second might be

00:57:59.040 --> 00:58:00.880
<v Speaker 2>too small a time frame so for you

00:58:00.880 --> 00:58:02.400
<v Speaker 2>to check it out. So maybe if you

00:58:02.400 --> 00:58:05.200
<v Speaker 2>just do one rate per, I don't know,

00:58:05.295 --> 00:58:07.694
<v Speaker 2>three or five seconds perhaps over the Five

00:58:07.694 --> 00:58:08.815
<v Speaker 1>per 60

00:58:09.694 --> 00:58:12.015
<v Speaker 1>is something that's easy to check or or

00:58:12.015 --> 00:58:12.655
<v Speaker 1>one.

00:58:12.895 --> 00:58:14.895
<v Speaker 0>Yeah. Okay. Let's do two requests per one

00:58:14.895 --> 00:58:16.575
<v Speaker 0>minute. We can we can I can take

00:58:16.575 --> 00:58:18.750
<v Speaker 0>that fast? So and

00:58:19.150 --> 00:58:21.310
<v Speaker 0>this is gonna restrict access to our hello

00:58:21.310 --> 00:58:23.710
<v Speaker 0>world too, which is the API that we

00:58:23.710 --> 00:58:25.230
<v Speaker 0>have requiring

00:58:25.230 --> 00:58:26.590
<v Speaker 0>standard authentication.

00:58:26.590 --> 00:58:28.830
<v Speaker 0>So Yeah. Let's create our key then.

00:58:30.625 --> 00:58:31.505
<v Speaker 0>A

00:58:31.505 --> 00:58:32.225
<v Speaker 0>key.

00:58:32.625 --> 00:58:34.545
<v Speaker 1>That's a good point, actually. That key could

00:58:34.545 --> 00:58:36.705
<v Speaker 1>actually give you access to a bunch of

00:58:36.705 --> 00:58:37.905
<v Speaker 1>different APIs.

00:58:38.545 --> 00:58:40.225
<v Speaker 1>Or you

00:58:40.305 --> 00:58:42.145
<v Speaker 1>can actually go further than that, and you

00:58:42.145 --> 00:58:45.250
<v Speaker 1>can actually create keys that give access to

00:58:45.250 --> 00:58:48.050
<v Speaker 1>different paths within within different APIs.

00:58:49.089 --> 00:58:51.089
<v Speaker 1>So you might have some users that you

00:58:51.089 --> 00:58:52.370
<v Speaker 1>want to be able to access

00:58:53.329 --> 00:58:56.609
<v Speaker 1>all all all all paths within an API,

00:58:56.609 --> 00:58:58.610
<v Speaker 1>for example. There might be others that you

00:58:58.914 --> 00:59:00.194
<v Speaker 1>I don't know. You but you only wanna

00:59:00.194 --> 00:59:01.315
<v Speaker 1>be able you want to be able to

00:59:01.315 --> 00:59:02.515
<v Speaker 1>limit them to the

00:59:03.714 --> 00:59:04.515
<v Speaker 1>to the

00:59:04.914 --> 00:59:06.835
<v Speaker 1>get requests rather than be able to create

00:59:06.835 --> 00:59:07.954
<v Speaker 1>and update stuff.

00:59:10.595 --> 00:59:11.394
<v Speaker 0>Alright. Okay.

00:59:12.630 --> 00:59:14.390
<v Speaker 0>I'm get I'm getting cocky now. I think

00:59:14.390 --> 00:59:15.750
<v Speaker 0>I know what I'm doing. So

00:59:18.230 --> 00:59:19.670
<v Speaker 0>like, if we did this

00:59:21.910 --> 00:59:23.029
<v Speaker 0>oh, what did I get wrong?

00:59:26.954 --> 00:59:29.355
<v Speaker 1>In the header, you need authorization.

00:59:29.595 --> 00:59:31.755
<v Speaker 0>What? Oh, yeah. It's authorization

00:59:32.395 --> 00:59:35.275
<v Speaker 0>and then better space. Right? Like that. Yeah.

00:59:35.275 --> 00:59:36.875
<v Speaker 1>I mean, you don't actually need Barry. You

00:59:36.875 --> 00:59:38.714
<v Speaker 1>can it'll work if you include it, but

00:59:38.714 --> 00:59:39.435
<v Speaker 1>you don't need it.

00:59:42.850 --> 00:59:43.730
<v Speaker 0>Okay.

00:59:44.210 --> 00:59:45.330
<v Speaker 0>What have I broken?

00:59:46.450 --> 00:59:48.210
<v Speaker 0>I did call it hello world too, didn't

00:59:48.210 --> 00:59:50.130
<v Speaker 0>I? Oh, I've not created it yet. Bet

00:59:50.130 --> 00:59:50.610
<v Speaker 0>you.

00:59:53.010 --> 00:59:53.570
<v Speaker 0>Oh, I did.

01:00:00.125 --> 01:00:01.965
<v Speaker 0>Okay. I think I've done something wrong.

01:00:02.525 --> 01:00:03.805
<v Speaker 1>Let's so

01:00:04.285 --> 01:00:06.125
<v Speaker 1>the API did you hot reload?

01:00:06.444 --> 01:00:06.765
<v Speaker 0>No.

01:00:10.710 --> 01:00:13.510
<v Speaker 0>Okay. We've reloaded again, brother.

01:00:16.230 --> 01:00:18.230
<v Speaker 0>Access to this API has been disallowed. So

01:00:18.230 --> 01:00:20.310
<v Speaker 0>that means that my authentication failed?

01:00:21.750 --> 01:00:24.550
<v Speaker 1>It does. So either it means where it

01:00:24.550 --> 01:00:27.565
<v Speaker 1>thinks we're trying to hit an API that

01:00:27.565 --> 01:00:30.285
<v Speaker 1>this key hasn't been provided access to.

01:00:33.485 --> 01:00:34.605
<v Speaker 1>Did we definitely

01:00:35.245 --> 01:00:38.205
<v Speaker 0>API oh, the the case is different. So

01:00:43.140 --> 01:00:43.860
<v Speaker 0>Yeah.

01:00:46.339 --> 01:00:48.660
<v Speaker 1>Hello, world two. Hello, world two.

01:00:49.060 --> 01:00:51.780
<v Speaker 1>Is everything okay. I think the case

01:00:52.260 --> 01:00:53.220
<v Speaker 1>That might do it.

01:00:54.065 --> 01:00:55.665
<v Speaker 0>Oh, this one's got a small w in

01:00:55.665 --> 01:00:57.425
<v Speaker 0>it. I guess the slug doesn't really matter.

01:00:57.425 --> 01:00:59.905
<v Speaker 0>Right? It's the ID and the name.

01:01:00.065 --> 01:01:02.385
<v Speaker 1>The ID. Let's try it. Let's try recreating

01:01:02.385 --> 01:01:03.265
<v Speaker 0>that key.

01:01:03.905 --> 01:01:04.305
<v Speaker 1>Yeah.

01:01:06.240 --> 01:01:08.640
<v Speaker 0>And we get a new better token.

01:01:08.640 --> 01:01:10.400
<v Speaker 0>Do I need to reload for keys?

01:01:10.880 --> 01:01:13.920
<v Speaker 0>No. No? Okay. So we can

01:01:16.080 --> 01:01:17.600
<v Speaker 0>probably quicker to go this way.

01:01:22.375 --> 01:01:23.415
<v Speaker 0>Get

01:01:24.214 --> 01:01:27.174
<v Speaker 0>okay. That worked. So we've two per 60.

01:01:27.174 --> 01:01:29.175
<v Speaker 0>So this one should work again. And

01:01:29.815 --> 01:01:32.295
<v Speaker 0>we would expect now to potentially see

01:01:34.295 --> 01:01:34.775
<v Speaker 0>lefty.

01:01:35.440 --> 01:01:36.320
<v Speaker 2>There we go.

01:01:37.120 --> 01:01:38.240
<v Speaker 0>Oh, if I had to chat or tell

01:01:38.240 --> 01:01:40.560
<v Speaker 0>us we forgot to reload. Thanks, Moe.

01:01:43.440 --> 01:01:45.440
<v Speaker 0>Good to good to hear all paying attention.

01:01:45.920 --> 01:01:48.320
<v Speaker 0>Alright. I like that. I like being able

01:01:48.320 --> 01:01:50.744
<v Speaker 0>to define the keys, which APIs they can

01:01:50.744 --> 01:01:53.385
<v Speaker 0>access, build down all that rate limiting, etcetera,

01:01:53.385 --> 01:01:54.185
<v Speaker 0>into it.

01:01:54.744 --> 01:01:56.905
<v Speaker 0>It's a nice nice little feature.

01:01:59.944 --> 01:02:01.545
<v Speaker 1>Do you fancy having a crack at the

01:02:01.545 --> 01:02:04.310
<v Speaker 1>operator? Let's go for it. I'm feeling like

01:02:04.310 --> 01:02:06.230
<v Speaker 0>we can do this now. So

01:02:07.430 --> 01:02:08.470
<v Speaker 0>let's do

01:02:09.190 --> 01:02:10.710
<v Speaker 0>oh, is it getting started?

01:02:11.110 --> 01:02:11.830
<v Speaker 0>Install

01:02:12.550 --> 01:02:13.750
<v Speaker 0>open source.

01:02:14.390 --> 01:02:16.230
<v Speaker 1>Let's see if the operator's in the docs.

01:02:16.265 --> 01:02:17.865
<v Speaker 1>You might it might be as easy just

01:02:17.865 --> 01:02:20.345
<v Speaker 1>to go to the so the install instructions

01:02:20.345 --> 01:02:23.065
<v Speaker 1>for the operator are in the GitHub repo.

01:02:26.105 --> 01:02:27.385
<v Speaker 0>Yeah. I've got it here.

01:02:33.850 --> 01:02:36.490
<v Speaker 1>And there's a link there installing Tyk operator,

01:02:36.490 --> 01:02:37.610
<v Speaker 1>so let's do that.

01:02:39.690 --> 01:02:42.410
<v Speaker 1>We're just past the hour mark, but I

01:02:42.410 --> 01:02:43.530
<v Speaker 1>think we're good for time.

01:02:45.435 --> 01:02:47.835
<v Speaker 1>So all of the prereqs, I think we're

01:02:47.835 --> 01:02:48.555
<v Speaker 1>fine with.

01:02:51.115 --> 01:02:53.835
<v Speaker 0>It says cert manager must be installed.

01:02:54.395 --> 01:02:56.555
<v Speaker 1>Yeah. It's part of the instructions, so we'll

01:02:56.555 --> 01:02:58.155
<v Speaker 1>we'll we'll do that. That's included.

01:02:59.330 --> 01:03:01.410
<v Speaker 1>The operator so you can actually you can

01:03:01.410 --> 01:03:03.330
<v Speaker 1>point operator at both

01:03:03.970 --> 01:03:05.570
<v Speaker 1>an open source installation,

01:03:05.570 --> 01:03:06.930
<v Speaker 1>which is what we're gonna do, so we're

01:03:06.930 --> 01:03:08.850
<v Speaker 1>gonna point it at a gateway. If you're

01:03:08.850 --> 01:03:11.570
<v Speaker 1>running the enterprise edition of Tyk, then you

01:03:11.570 --> 01:03:13.974
<v Speaker 1>would point it at the dashboard

01:03:13.974 --> 01:03:14.775
<v Speaker 1>instead.

01:03:15.815 --> 01:03:17.495
<v Speaker 1>But for us, it's

01:03:17.974 --> 01:03:18.935
<v Speaker 1>a gateway.

01:03:19.255 --> 01:03:21.655
<v Speaker 1>So could you maybe just zoom in a

01:03:21.655 --> 01:03:22.615
<v Speaker 1>little bit? Just

01:03:24.135 --> 01:03:25.095
<v Speaker 1>perfect.

01:03:25.095 --> 01:03:28.055
<v Speaker 1>So we'll if we yeah. And you can

01:03:28.530 --> 01:03:30.850
<v Speaker 1>create a separate namespace for this, but equally,

01:03:30.850 --> 01:03:32.050
<v Speaker 1>if you wanted to run it in the

01:03:32.050 --> 01:03:34.370
<v Speaker 1>same name namespace as your gateway, that's fine

01:03:34.370 --> 01:03:35.010
<v Speaker 1>as well.

01:03:35.890 --> 01:03:37.490
<v Speaker 1>Just make sure that we update

01:03:38.610 --> 01:03:40.210
<v Speaker 1>any of the commands that we need to.

01:03:40.625 --> 01:03:43.025
<v Speaker 1>Okay. So let's just take

01:03:43.265 --> 01:03:44.385
<v Speaker 0>namespace.

01:03:44.785 --> 01:03:45.425
<v Speaker 1>Yeah.

01:03:46.704 --> 01:03:49.025
<v Speaker 0>Create a secret. And so the auth is

01:03:49.025 --> 01:03:50.625
<v Speaker 0>going to be our change me.

01:03:50.865 --> 01:03:51.665
<v Speaker 1>Correct.

01:03:51.905 --> 01:03:53.744
<v Speaker 0>And the org, I don't think we set

01:03:53.744 --> 01:03:56.380
<v Speaker 0>one. Is that just one? Think yeah. We

01:03:56.380 --> 01:03:58.060
<v Speaker 1>can use one. I think that's what was

01:03:58.060 --> 01:03:59.500
<v Speaker 1>actually set in those

01:04:00.060 --> 01:04:02.140
<v Speaker 1>definitions. To be honest, org is more an

01:04:02.140 --> 01:04:03.340
<v Speaker 1>enterprise thing.

01:04:03.820 --> 01:04:06.380
<v Speaker 1>It has more meaning because the the enterprise

01:04:06.380 --> 01:04:09.125
<v Speaker 1>product is the dashboard is multi tenant, an

01:04:09.125 --> 01:04:12.085
<v Speaker 1>organization equals a tenant, but we'll we'll set

01:04:12.085 --> 01:04:13.845
<v Speaker 1>that to one. This

01:04:14.805 --> 01:04:15.845
<v Speaker 1>should be

01:04:16.484 --> 01:04:17.205
<v Speaker 1>your

01:04:19.285 --> 01:04:22.165
<v Speaker 1>Kubernetes DNS for that type gateway

01:04:22.599 --> 01:04:24.120
<v Speaker 1>service. What's the mode?

01:04:24.839 --> 01:04:27.079
<v Speaker 1>If you go back to the dock, I

01:04:27.079 --> 01:04:28.040
<v Speaker 1>think it's

01:04:28.200 --> 01:04:31.800
<v Speaker 1>tight c or just c for yeah.

01:04:32.280 --> 01:04:34.040
<v Speaker 0>Okay. So we're putting on the same same

01:04:34.040 --> 01:04:35.800
<v Speaker 0>namespace, which means it should be able to

01:04:35.800 --> 01:04:38.795
<v Speaker 0>have it on just just take Time. I

01:04:38.795 --> 01:04:39.675
<v Speaker 0>guess we can

01:04:41.434 --> 01:04:43.115
<v Speaker 0>let's just expand that out

01:04:43.674 --> 01:04:45.434
<v Speaker 0>just in case. Was it just Tykall? Was

01:04:45.434 --> 01:04:46.315
<v Speaker 1>it Tykall?

01:04:46.474 --> 01:04:47.674
<v Speaker 1>I think if you have a look at

01:04:47.674 --> 01:04:48.795
<v Speaker 1>the service in

01:04:50.480 --> 01:04:52.640
<v Speaker 1>in Kubernetes, then it will be something like

01:04:52.640 --> 01:04:54.320
<v Speaker 1>type c headless.

01:04:55.839 --> 01:04:57.280
<v Speaker 1>Something something something.

01:04:58.480 --> 01:05:00.080
<v Speaker 0>Yep. You are correct.

01:05:00.319 --> 01:05:03.680
<v Speaker 0>Good catch. So let's set this to

01:05:04.674 --> 01:05:06.275
<v Speaker 0>first dot take dot s v c dot

01:05:06.275 --> 01:05:08.835
<v Speaker 0>cluster dot org. Okay. Let's do this.

01:05:11.075 --> 01:05:12.595
<v Speaker 0>We have our secret,

01:05:12.595 --> 01:05:14.915
<v Speaker 0>and then the next step is to

01:05:16.590 --> 01:05:17.150
<v Speaker 1>So there's

01:05:17.710 --> 01:05:19.950
<v Speaker 1>yeah. There's options here for the operator to

01:05:19.950 --> 01:05:22.110
<v Speaker 1>be able to just watch all namespaces or

01:05:22.110 --> 01:05:23.870
<v Speaker 1>if you're only interested in

01:05:24.190 --> 01:05:26.910
<v Speaker 1>watching certain namespaces, you can do that.

01:05:27.310 --> 01:05:29.390
<v Speaker 1>We can skip through some of this. The

01:05:29.390 --> 01:05:33.015
<v Speaker 1>next install instruction is, I think, will be

01:05:34.295 --> 01:05:37.095
<v Speaker 1>to install cert manager. So we can just

01:05:37.095 --> 01:05:37.975
<v Speaker 1>copy that.

01:05:41.815 --> 01:05:43.494
<v Speaker 1>Then Just a quick one to just just

01:05:43.494 --> 01:05:44.295
<v Speaker 2>point out.

01:05:45.095 --> 01:05:47.339
<v Speaker 2>You sort of I'm I'm hoping I'm audible

01:05:47.339 --> 01:05:47.980
<v Speaker 2>now.

01:05:48.220 --> 01:05:50.140
<v Speaker 2>When you when you created that service, I

01:05:50.140 --> 01:05:52.539
<v Speaker 2>think instead of using Tyk, I think it's

01:05:52.539 --> 01:05:55.019
<v Speaker 2>tk y as opposed to t yk. I

01:05:55.019 --> 01:05:57.099
<v Speaker 2>don't know if it is intentional or not.

01:05:57.579 --> 01:05:58.940
<v Speaker 2>If you go back to

01:05:59.260 --> 01:06:00.299
<v Speaker 2>the command line,

01:06:02.915 --> 01:06:05.075
<v Speaker 2>the service that you've got there.

01:06:06.755 --> 01:06:09.715
<v Speaker 1>Oh, there's a tky.svc.+dr.

01:06:09.715 --> 01:06:10.595
<v Speaker 1>Good spot.

01:06:12.275 --> 01:06:14.115
<v Speaker 2>Yeah. That's the headless.tky

01:06:14.115 --> 01:06:15.715
<v Speaker 2>instead of tyk. Yeah.

01:06:16.830 --> 01:06:18.830
<v Speaker 1>Yeah. We we might need to correct that.

01:06:19.470 --> 01:06:20.430
<v Speaker 0>Alright.

01:06:20.670 --> 01:06:21.070
<v Speaker 0>Secret.

01:06:30.835 --> 01:06:32.515
<v Speaker 0>It's gonna fail, so I'm gonna have to

01:06:32.515 --> 01:06:33.715
<v Speaker 0>delete it.

01:06:35.875 --> 01:06:37.555
<v Speaker 0>The secret.

01:06:42.035 --> 01:06:42.675
<v Speaker 0>Good catch.

01:06:43.350 --> 01:06:45.670
<v Speaker 0>So we've got cert manager.

01:06:45.670 --> 01:06:47.110
<v Speaker 0>We've got our secret.

01:06:47.590 --> 01:06:49.910
<v Speaker 0>Now we could deploy the CIDs.

01:06:51.110 --> 01:06:51.830
<v Speaker 1>Yep.

01:06:52.390 --> 01:06:54.150
<v Speaker 0>So it wants me to have this code

01:06:54.150 --> 01:06:54.950
<v Speaker 0>locally. Right?

01:06:58.385 --> 01:06:58.945
<v Speaker 1>No.

01:06:59.985 --> 01:07:00.945
<v Speaker 1>Oh, yeah.

01:07:01.665 --> 01:07:02.705
<v Speaker 1>Yeah. Sorry.

01:07:07.185 --> 01:07:09.745
<v Speaker 0>And the CRDs can just be applied

01:07:09.745 --> 01:07:10.545
<v Speaker 0>from there.

01:07:11.589 --> 01:07:14.390
<v Speaker 0>I guess that's not gonna be take operator

01:07:14.390 --> 01:07:15.990
<v Speaker 0>helm CRDs.

01:07:18.470 --> 01:07:19.510
<v Speaker 0>And lastly,

01:07:19.589 --> 01:07:20.470
<v Speaker 0>we can

01:07:20.710 --> 01:07:23.510
<v Speaker 0>install our helm chart, which is just gonna

01:07:23.510 --> 01:07:25.109
<v Speaker 0>give us a secret for configuration.

01:07:25.695 --> 01:07:27.935
<v Speaker 1>Yeah. We'll change that namespace as well.

01:07:30.655 --> 01:07:32.095
<v Speaker 0>Yep.

01:07:34.015 --> 01:07:35.615
<v Speaker 1>Just a second. Just go back to the

01:07:35.615 --> 01:07:35.935
<v Speaker 1>docs.

01:07:40.660 --> 01:07:42.100
<v Speaker 1>Yeah. That looks correct.

01:07:49.380 --> 01:07:50.740
<v Speaker 0>Okay.

01:07:50.900 --> 01:07:52.420
<v Speaker 0>Sorry about haven't finished.

01:07:59.785 --> 01:08:00.425
<v Speaker 0>Oh.

01:08:01.385 --> 01:08:02.345
<v Speaker 0>Uh-oh.

01:08:05.865 --> 01:08:06.585
<v Speaker 0>Describe.

01:08:08.310 --> 01:08:10.150
<v Speaker 0>Oh, it's a crash lit back off.

01:08:12.950 --> 01:08:14.390
<v Speaker 0>Hopefully, that's it just

01:08:15.030 --> 01:08:16.149
<v Speaker 0>getting healthy.

01:08:18.310 --> 01:08:20.310
<v Speaker 1>It could be, but it's been a while.

01:08:20.390 --> 01:08:21.910
<v Speaker 1>I'd be a little bit suspicious.

01:08:26.425 --> 01:08:27.944
<v Speaker 0>That's a fun message.

01:08:28.505 --> 01:08:30.425
<v Speaker 1>Error registering call only.

01:08:36.970 --> 01:08:39.290
<v Speaker 0>Okay. It's cert manager.

01:08:42.330 --> 01:08:43.850
<v Speaker 0>I mean, this is a one twenty two

01:08:43.850 --> 01:08:44.649
<v Speaker 0>cluster.

01:08:45.210 --> 01:08:46.970
<v Speaker 0>It could just be cert manager.

01:08:49.255 --> 01:08:51.335
<v Speaker 0>And it's a a newer version. I think

01:08:51.335 --> 01:08:53.335
<v Speaker 0>we installed one zero three, which is a

01:08:53.335 --> 01:08:54.295
<v Speaker 0>little bit old.

01:08:57.734 --> 01:09:00.055
<v Speaker 0>Let's just go over the top of it

01:09:00.055 --> 01:09:01.095
<v Speaker 0>and see if that helps.

01:09:13.599 --> 01:09:14.960
<v Speaker 0>Yeah. It seems about It looks a little

01:09:14.960 --> 01:09:16.159
<v Speaker 0>better now. Yeah. Yeah.

01:09:20.645 --> 01:09:22.965
<v Speaker 0>Okay. So let's try

01:09:25.045 --> 01:09:26.885
<v Speaker 1>I will have to to set up grid.

01:09:31.845 --> 01:09:33.604
<v Speaker 0>I thought you could do dash dash name.

01:09:35.350 --> 01:09:37.029
<v Speaker 0>Oh no, it would be dash dash install,

01:09:37.029 --> 01:09:39.029
<v Speaker 0>but we don't even need that anyway. Cool.

01:09:47.365 --> 01:09:50.324
<v Speaker 0>So we have our three gateways only now.

01:09:51.604 --> 01:09:53.604
<v Speaker 0>We have our operator container crane. So let's

01:09:53.604 --> 01:09:54.725
<v Speaker 0>just pull in the image.

01:09:56.565 --> 01:09:59.205
<v Speaker 0>So we got a comment from Chandra.

01:09:59.830 --> 01:10:01.910
<v Speaker 0>It might just be an API version deprecation.

01:10:01.910 --> 01:10:04.469
<v Speaker 0>Yeah. I think we just updated the the

01:10:04.469 --> 01:10:05.670
<v Speaker 0>new assert manager.

01:10:06.390 --> 01:10:08.230
<v Speaker 0>A lot changed with one twenty two. A

01:10:08.230 --> 01:10:10.949
<v Speaker 0>lot of APIs disappeared. So Right.

01:10:17.614 --> 01:10:19.854
<v Speaker 1>So while that's coming up, why don't we

01:10:22.094 --> 01:10:24.494
<v Speaker 1>head back to the docs for Tyk operator,

01:10:24.655 --> 01:10:26.494
<v Speaker 1>and we'll just try and

01:10:28.800 --> 01:10:31.040
<v Speaker 1>we can either build one from scratch, but

01:10:31.040 --> 01:10:32.960
<v Speaker 1>given it's ten past three, it might make

01:10:32.960 --> 01:10:35.360
<v Speaker 1>sense to just go into the samples and

01:10:36.880 --> 01:10:38.160
<v Speaker 1>so if you go back to the root

01:10:38.160 --> 01:10:40.240
<v Speaker 1>of Tyk operator, there's a config folder.

01:10:41.245 --> 01:10:41.965
<v Speaker 0>Yep.

01:10:42.205 --> 01:10:45.325
<v Speaker 1>And within there, there should be a samples

01:10:45.325 --> 01:10:46.284
<v Speaker 1>directory.

01:10:46.685 --> 01:10:48.605
<v Speaker 1>And then down the bottom or somewhere in

01:10:48.605 --> 01:10:49.965
<v Speaker 1>the middle, in fact, there's a h t

01:10:49.965 --> 01:10:51.804
<v Speaker 1>t b bin dot yaml.

01:10:53.165 --> 01:10:54.285
<v Speaker 1>We could work with that.

01:10:55.739 --> 01:10:57.340
<v Speaker 1>We might need to change the name and

01:10:57.340 --> 01:10:58.539
<v Speaker 1>the ID, but

01:10:58.940 --> 01:11:00.459
<v Speaker 1>just scroll up a bit.

01:11:00.780 --> 01:11:03.179
<v Speaker 1>There's just like a basic keyless thing, the

01:11:03.179 --> 01:11:05.579
<v Speaker 1>equivalent of what we did when we first

01:11:05.579 --> 01:11:08.459
<v Speaker 1>created an API using the gateway REST API.

01:11:08.860 --> 01:11:09.099
<v Speaker 0>Yep.

01:11:09.695 --> 01:11:11.215
<v Speaker 0>Okay. So we can do

01:11:12.015 --> 01:11:14.015
<v Speaker 0>let's call it c r dot yaml. Let's

01:11:14.015 --> 01:11:15.535
<v Speaker 0>define the new API.

01:11:16.335 --> 01:11:18.655
<v Speaker 1>Let's change the name. Something else.

01:11:20.255 --> 01:11:21.615
<v Speaker 0>So I don't think we have on code.

01:11:21.615 --> 01:11:23.055
<v Speaker 0>It should be better. It's just called hello

01:11:23.055 --> 01:11:24.415
<v Speaker 0>world. So we should be Oh, you're right.

01:11:24.415 --> 01:11:25.455
<v Speaker 1>Yeah. We should be fine.

01:11:27.050 --> 01:11:29.289
<v Speaker 0>It's not okay. Yeah. Let's just go to

01:11:29.369 --> 01:11:30.409
<v Speaker 0>I'm confident.

01:11:30.570 --> 01:11:31.530
<v Speaker 0>Gonna work.

01:11:32.489 --> 01:11:34.409
<v Speaker 0>Assuming So hope hopefully, the

01:11:35.530 --> 01:11:36.969
<v Speaker 1>it's still creating. Okay.

01:11:40.725 --> 01:11:41.764
<v Speaker 0>Let's see.

01:11:45.125 --> 01:11:46.804
<v Speaker 0>It's waiting for

01:11:53.850 --> 01:11:56.250
<v Speaker 1>Cert manager. That's not a certificate.

01:11:57.770 --> 01:12:00.090
<v Speaker 1>Setup failed for volume. Cert.

01:12:01.130 --> 01:12:02.330
<v Speaker 1>Webhook

01:12:02.410 --> 01:12:04.865
<v Speaker 1>service cert not found. Is this? I think

01:12:04.865 --> 01:12:06.865
<v Speaker 0>what happened is when we did the upgrade,

01:12:06.865 --> 01:12:08.705
<v Speaker 0>we skipped one of the hooks that's probably

01:12:08.705 --> 01:12:11.025
<v Speaker 0>required to generate the cert. Install and do

01:12:11.025 --> 01:12:11.745
<v Speaker 1>it again.

01:12:11.985 --> 01:12:12.705
<v Speaker 1>Yeah.

01:12:13.105 --> 01:12:15.345
<v Speaker 0>Sorry, Fu. Same for you to leave.

01:12:17.985 --> 01:12:19.425
<v Speaker 0>We could just do that again.

01:12:27.570 --> 01:12:28.290
<v Speaker 0>Okay.

01:12:31.170 --> 01:12:33.195
<v Speaker 0>There we go. Yeah. So

01:12:33.594 --> 01:12:35.594
<v Speaker 0>just that broken install. I think we missed

01:12:35.594 --> 01:12:37.435
<v Speaker 0>a hook, but we appear to be alright

01:12:37.435 --> 01:12:37.994
<v Speaker 0>now.

01:12:38.315 --> 01:12:40.074
<v Speaker 0>Yeah. There we go. Two of two ready.

01:12:40.475 --> 01:12:42.715
<v Speaker 0>So we can apply our c r dot

01:12:42.715 --> 01:12:43.355
<v Speaker 0>yaml

01:12:45.050 --> 01:12:45.849
<v Speaker 0>And

01:12:46.650 --> 01:12:48.010
<v Speaker 1>Yeah. So you could do that. If you

01:12:48.010 --> 01:12:51.050
<v Speaker 1>do that, k get tyk APIs now and

01:12:51.050 --> 01:12:53.210
<v Speaker 1>just see if it's actually there's a thing

01:12:53.210 --> 01:12:54.970
<v Speaker 1>configured that the operator's aware of.

01:13:01.785 --> 01:13:03.465
<v Speaker 1>Type slash tyk slash a p I if

01:13:03.465 --> 01:13:05.145
<v Speaker 1>you wanted to hit the rest of it.

01:13:08.265 --> 01:13:10.505
<v Speaker 1>Oh, my key. And you do the key

01:13:10.505 --> 01:13:12.585
<v Speaker 1>as well. I'm making this difficult for myself

01:13:12.585 --> 01:13:16.739
<v Speaker 0>now. What was it? X take authorization?

01:13:18.099 --> 01:13:19.699
<v Speaker 0>Very good. There we go.

01:13:21.619 --> 01:13:24.179
<v Speaker 0>So that means I'm just gonna feel really

01:13:24.179 --> 01:13:26.179
<v Speaker 0>confident now. I I really wanna get to

01:13:26.179 --> 01:13:28.020
<v Speaker 0>business demo too. So we should be able

01:13:28.020 --> 01:13:29.300
<v Speaker 0>to have HTTP

01:13:29.300 --> 01:13:31.085
<v Speaker 0>bin get now.

01:13:31.565 --> 01:13:32.285
<v Speaker 0>Yep.

01:13:33.965 --> 01:13:34.925
<v Speaker 0>Oh, reload.

01:13:36.685 --> 01:13:37.405
<v Speaker 1>No.

01:13:38.125 --> 01:13:39.565
<v Speaker 1>It shouldn't need to reload.

01:13:41.245 --> 01:13:43.405
<v Speaker 1>I'm doing so kubectl

01:13:44.365 --> 01:13:45.405
<v Speaker 1>get

01:13:46.360 --> 01:13:48.440
<v Speaker 1>tyk APIs, all one word.

01:13:52.520 --> 01:13:53.080
<v Speaker 0>Enabled.

01:14:01.035 --> 01:14:02.555
<v Speaker 1>The path is correct.

01:14:09.035 --> 01:14:11.195
<v Speaker 1>We might actually have to look in the

01:14:12.955 --> 01:14:14.235
<v Speaker 1>operator logs.

01:14:14.555 --> 01:14:15.275
<v Speaker 0>Oh, k.

01:14:16.650 --> 01:14:17.210
<v Speaker 1>But,

01:14:17.770 --> 01:14:20.329
<v Speaker 1>I think perhaps we just we'll move on.

01:14:22.410 --> 01:14:23.210
<v Speaker 0>The

01:14:23.290 --> 01:14:24.249
<v Speaker 0>manager.

01:14:24.730 --> 01:14:25.369
<v Speaker 2>Yeah.

01:14:27.130 --> 01:14:28.489
<v Speaker 0>So it did reconcile.

01:14:29.325 --> 01:14:31.725
<v Speaker 0>So I was a bit quick to skip

01:14:31.725 --> 01:14:33.485
<v Speaker 0>looking at this APIs, but we should be

01:14:33.485 --> 01:14:35.005
<v Speaker 0>able to see all the APIs registered with

01:14:35.005 --> 01:14:36.445
<v Speaker 0>the gateway. Right? So

01:14:39.245 --> 01:14:40.365
<v Speaker 0>there's hello world.

01:14:43.220 --> 01:14:44.660
<v Speaker 0>Hello world two.

01:14:53.860 --> 01:14:54.420
<v Speaker 1>And

01:14:56.660 --> 01:14:58.180
<v Speaker 0>do we have

01:14:59.855 --> 01:15:01.215
<v Speaker 0>h to be pinned?

01:15:02.975 --> 01:15:03.535
<v Speaker 0>No.

01:15:03.935 --> 01:15:06.255
<v Speaker 0>Okay. I don't think it worked. Correct. I

01:15:06.255 --> 01:15:07.614
<v Speaker 2>think I think it might need to you

01:15:07.614 --> 01:15:09.855
<v Speaker 2>might need to apply the file. No? I

01:15:09.855 --> 01:15:10.015
<v Speaker 2>think

01:15:11.000 --> 01:15:13.000
<v Speaker 1>I thought we already did that. But

01:15:13.800 --> 01:15:14.840
<v Speaker 0>Yeah.

01:15:14.840 --> 01:15:17.000
<v Speaker 0>Because we can run take APIs, and we

01:15:17.000 --> 01:15:19.000
<v Speaker 0>can see it here. Yeah. Type APIs thinks

01:15:19.000 --> 01:15:20.840
<v Speaker 1>it's there, but for one reason, I don't

01:15:20.840 --> 01:15:21.880
<v Speaker 1>know why. But

01:15:22.600 --> 01:15:24.360
<v Speaker 0>And the manager does seem to think it's

01:15:24.360 --> 01:15:25.000
<v Speaker 0>reconciled.

01:15:26.085 --> 01:15:28.005
<v Speaker 1>Are are there any errors in there if

01:15:28.005 --> 01:15:29.445
<v Speaker 1>we look a bit further up? Or

01:15:33.765 --> 01:15:34.325
<v Speaker 0>Creating.

01:15:39.679 --> 01:15:40.479
<v Speaker 0>Completed.

01:15:43.120 --> 01:15:46.400
<v Speaker 1>And that is definitely the gateway on the

01:15:46.400 --> 01:15:48.320
<v Speaker 1>node that we've been testing with.

01:15:50.080 --> 01:15:50.880
<v Speaker 1>Because I know you,

01:15:52.835 --> 01:15:54.995
<v Speaker 1>when we installed the gateway,

01:15:55.475 --> 01:15:56.755
<v Speaker 1>I think you said you had a three

01:15:56.755 --> 01:15:57.795
<v Speaker 1>node setup.

01:15:58.915 --> 01:16:00.835
<v Speaker 0>So they're not clustered by default?

01:16:01.075 --> 01:16:04.435
<v Speaker 1>Yeah. So that's the the clustering in the

01:16:05.890 --> 01:16:08.849
<v Speaker 1>open source gateway, that's not there by default.

01:16:09.170 --> 01:16:11.570
<v Speaker 1>And so, actually, yeah, if you're using the

01:16:11.570 --> 01:16:13.809
<v Speaker 1>operator, that's something you've got to think about.

01:16:13.890 --> 01:16:17.250
<v Speaker 1>We do have customers that run TykEatWay in

01:16:17.250 --> 01:16:17.970
<v Speaker 1>a kind of

01:16:18.635 --> 01:16:20.155
<v Speaker 1>highly available fashion.

01:16:20.555 --> 01:16:22.395
<v Speaker 1>I believe they use

01:16:22.875 --> 01:16:23.595
<v Speaker 1>the,

01:16:24.475 --> 01:16:27.275
<v Speaker 1>file system method to configure their APIs. So

01:16:27.275 --> 01:16:29.755
<v Speaker 1>either they're using some kind of shared file

01:16:29.755 --> 01:16:31.755
<v Speaker 1>system or some other way to make sure

01:16:32.010 --> 01:16:33.849
<v Speaker 1>that their APIs are published on all the

01:16:33.849 --> 01:16:36.169
<v Speaker 1>gateways, but there isn't any clustering

01:16:36.250 --> 01:16:39.129
<v Speaker 1>by default as part of that open source

01:16:39.610 --> 01:16:42.489
<v Speaker 1>deployment type. You you get that by default

01:16:42.489 --> 01:16:44.650
<v Speaker 1>if you use the the licensed version.

01:16:47.205 --> 01:16:47.925
<v Speaker 0>Right.

01:16:51.605 --> 01:16:52.405
<v Speaker 0>Okay.

01:16:52.885 --> 01:16:54.405
<v Speaker 0>So why does it deploy as a daemon

01:16:54.405 --> 01:16:55.844
<v Speaker 0>set? That seems a bit

01:16:56.804 --> 01:16:58.885
<v Speaker 0>strange. It's I mean, it's it's it's so

01:16:58.885 --> 01:17:01.200
<v Speaker 1>that's a default setting to get started within

01:17:01.200 --> 01:17:02.960
<v Speaker 1>the health checks charts. You can go in

01:17:02.960 --> 01:17:04.640
<v Speaker 1>and you can change that to be a

01:17:04.640 --> 01:17:05.760
<v Speaker 1>a deployment.

01:17:05.920 --> 01:17:06.480
<v Speaker 1>Maybe

01:17:07.040 --> 01:17:08.559
<v Speaker 1>we should have done that, actually.

01:17:09.520 --> 01:17:11.600
<v Speaker 0>Alright. I'm sorry. We have seen a lot

01:17:11.600 --> 01:17:13.855
<v Speaker 0>of really cool stuff. So

01:17:14.175 --> 01:17:15.615
<v Speaker 0>really nice.

01:17:15.615 --> 01:17:17.295
<v Speaker 0>I I like the operator. I'm gonna have

01:17:17.295 --> 01:17:18.655
<v Speaker 0>to play around with this a little bit

01:17:18.655 --> 01:17:20.815
<v Speaker 0>more. But in the interest of time today,

01:17:20.815 --> 01:17:21.935
<v Speaker 0>and I don't wanna keep you here all

01:17:21.935 --> 01:17:24.895
<v Speaker 0>afternoon, why don't we allow Buddha to run

01:17:24.895 --> 01:17:27.215
<v Speaker 0>through some of the shiny UI stuff that

01:17:27.215 --> 01:17:29.430
<v Speaker 0>we have available as well? But you wanna

01:17:29.430 --> 01:17:31.190
<v Speaker 0>pop your screen up, and we can jump

01:17:31.190 --> 01:17:32.070
<v Speaker 0>over to that?

01:17:33.350 --> 01:17:34.470
<v Speaker 2>Yep.

01:17:34.470 --> 01:17:36.150
<v Speaker 2>Great. Okay.

01:17:36.550 --> 01:17:37.110
<v Speaker 2>So

01:17:37.750 --> 01:17:39.510
<v Speaker 2>before I get started, there are a couple

01:17:39.510 --> 01:17:42.470
<v Speaker 2>of installations that I have. One is purely

01:17:42.470 --> 01:17:45.375
<v Speaker 2>the Tyk cloud, which I'll show you. And

01:17:45.375 --> 01:17:47.375
<v Speaker 2>the other one is a local installation that

01:17:47.375 --> 01:17:49.135
<v Speaker 2>I have on my own system.

01:17:49.535 --> 01:17:51.215
<v Speaker 2>So you can do either one. I'm not

01:17:51.215 --> 01:17:53.615
<v Speaker 2>gonna go through the installation process again, which

01:17:53.615 --> 01:17:54.975
<v Speaker 2>might take a little bit of time, but

01:17:54.975 --> 01:17:57.455
<v Speaker 2>it pretty much follows a similar structure. Maybe

01:17:57.455 --> 01:17:59.055
<v Speaker 2>it's actually, it might even be a little

01:17:59.055 --> 01:18:00.335
<v Speaker 2>bit easier in terms of installation.

01:18:00.870 --> 01:18:02.630
<v Speaker 2>Follow the docs. You'll be able to get

01:18:02.630 --> 01:18:04.230
<v Speaker 2>up and running really, really quickly.

01:18:04.550 --> 01:18:07.110
<v Speaker 2>The only difference between the cloud versus the

01:18:07.110 --> 01:18:10.310
<v Speaker 2>the enterprise edition for installation is that when

01:18:10.310 --> 01:18:11.670
<v Speaker 2>you're starting off with a free trial on

01:18:11.670 --> 01:18:13.990
<v Speaker 2>the cloud, it you don't need a license

01:18:13.990 --> 01:18:16.034
<v Speaker 2>key. I think for the local installation,

01:18:16.195 --> 01:18:18.195
<v Speaker 2>you will need a license trial license key

01:18:18.195 --> 01:18:19.955
<v Speaker 2>as well for that. So that's pretty much

01:18:19.955 --> 01:18:21.315
<v Speaker 2>the only difference. Otherwise,

01:18:21.955 --> 01:18:23.395
<v Speaker 2>you can pretty much do the same things

01:18:23.395 --> 01:18:26.195
<v Speaker 2>as you can do local versus cloud. So

01:18:26.195 --> 01:18:27.635
<v Speaker 2>I'll just show you the interface of both

01:18:27.635 --> 01:18:28.915
<v Speaker 2>of them just so that you know a

01:18:28.915 --> 01:18:31.039
<v Speaker 2>bit, And then I'll go into the universal

01:18:31.039 --> 01:18:31.679
<v Speaker 2>data.

01:18:32.159 --> 01:18:34.800
<v Speaker 0>Okey dokey. So let me share

01:18:34.800 --> 01:18:36.079
<v Speaker 2>the screen.

01:18:36.239 --> 01:18:37.760
<v Speaker 2>Hopefully, I'm just gonna share.

01:18:43.565 --> 01:18:46.844
<v Speaker 2>Alright. There we go. So this is the

01:18:46.844 --> 01:18:47.644
<v Speaker 2>Tykloud.

01:18:47.725 --> 01:18:49.804
<v Speaker 2>So this is sort of the overview of

01:18:49.804 --> 01:18:52.125
<v Speaker 2>what we are providing here. So Tykloud is

01:18:52.125 --> 01:18:54.205
<v Speaker 2>a little bit different from basic SaaS because

01:18:54.205 --> 01:18:56.045
<v Speaker 2>it's more of a it's sort of a

01:18:56.045 --> 01:18:57.165
<v Speaker 2>combination of

01:18:57.500 --> 01:19:00.700
<v Speaker 2>a completely managed solution plus an orchestration solution

01:19:00.700 --> 01:19:01.340
<v Speaker 2>as well,

01:19:01.740 --> 01:19:02.940
<v Speaker 2>where you can

01:19:03.580 --> 01:19:07.340
<v Speaker 2>choose regions to deploy your control plane as

01:19:07.340 --> 01:19:08.780
<v Speaker 2>well as edge gateway.

01:19:09.100 --> 01:19:12.860
<v Speaker 2>The control plane, which is essentially your your

01:19:11.445 --> 01:19:14.405
<v Speaker 2>dashboard for for management of your APIs, essentially

01:19:14.405 --> 01:19:16.565
<v Speaker 2>is in the region in which you are

01:19:16.565 --> 01:19:18.085
<v Speaker 2>based out of. So you that's a singular

01:19:18.085 --> 01:19:20.244
<v Speaker 2>region that you would choose. For instance, I

01:19:20.244 --> 01:19:21.844
<v Speaker 2>have chosen Singapore

01:19:22.405 --> 01:19:24.165
<v Speaker 2>at the moment, so my control plane is

01:19:24.165 --> 01:19:24.565
<v Speaker 2>gonna be

01:19:25.170 --> 01:19:27.090
<v Speaker 2>deployed in in Singapore.

01:19:27.890 --> 01:19:31.090
<v Speaker 2>And then within the control plane, you have

01:19:31.250 --> 01:19:34.770
<v Speaker 2>options to actually add on further gateways, local

01:19:34.770 --> 01:19:36.610
<v Speaker 2>gateways or edge gateways as we call it.

01:19:37.105 --> 01:19:39.425
<v Speaker 2>So I already have a setup with a

01:19:39.425 --> 01:19:40.705
<v Speaker 2>control plane and

01:19:41.025 --> 01:19:43.425
<v Speaker 2>the edge gateway. If I go into this,

01:19:45.585 --> 01:19:48.385
<v Speaker 2>you'll see that I've got my manager dashboard

01:19:48.385 --> 01:19:51.105
<v Speaker 2>here and developer portal all set up, which

01:19:51.105 --> 01:19:53.480
<v Speaker 2>I can access through this URL. And underneath

01:19:53.480 --> 01:19:56.440
<v Speaker 2>this all, I've got the edge gateway,

01:19:56.600 --> 01:19:58.520
<v Speaker 2>which is gonna be my localized gateway for

01:19:58.520 --> 01:20:00.280
<v Speaker 2>the processing part of things.

01:20:01.240 --> 01:20:03.560
<v Speaker 2>To just give you a sense of the

01:20:03.560 --> 01:20:04.120
<v Speaker 2>dashboards,

01:20:05.445 --> 01:20:06.565
<v Speaker 2>So

01:20:10.085 --> 01:20:11.685
<v Speaker 2>here you go. You've got your

01:20:12.005 --> 01:20:12.965
<v Speaker 2>dashboard,

01:20:13.525 --> 01:20:14.645
<v Speaker 2>which is essentially

01:20:15.765 --> 01:20:17.605
<v Speaker 2>an overview at the moment of all the

01:20:17.605 --> 01:20:19.205
<v Speaker 2>API activities that is going on. This is

01:20:19.205 --> 01:20:20.770
<v Speaker 2>as an overview. And And then you can

01:20:20.770 --> 01:20:22.690
<v Speaker 2>go into the specifics of this, which I'll

01:20:22.690 --> 01:20:23.570
<v Speaker 2>go over

01:20:23.730 --> 01:20:25.570
<v Speaker 2>when I switch on to the the on

01:20:25.570 --> 01:20:27.650
<v Speaker 2>premises version. But you can see your APIs

01:20:27.650 --> 01:20:28.929
<v Speaker 2>that you might have created.

01:20:29.330 --> 01:20:30.929
<v Speaker 2>You can have your policies and keys, which

01:20:30.929 --> 01:20:33.225
<v Speaker 2>I'll touch upon shortly as well. So it's

01:20:33.225 --> 01:20:35.225
<v Speaker 2>it's kind of like the a user interface

01:20:35.225 --> 01:20:37.305
<v Speaker 2>for you to interact with

01:20:37.625 --> 01:20:40.425
<v Speaker 2>whatever is going on at the gateway level

01:20:40.425 --> 01:20:42.585
<v Speaker 2>or whatever capabilities that you want to

01:20:42.825 --> 01:20:43.864
<v Speaker 2>make available.

01:20:44.185 --> 01:20:45.465
<v Speaker 2>The only other thing is in terms of

01:20:45.465 --> 01:20:47.385
<v Speaker 2>deployments and things like that, it's it's pretty

01:20:47.385 --> 01:20:49.600
<v Speaker 2>straightforward to do this over here

01:20:50.080 --> 01:20:52.560
<v Speaker 2>if you do choose to deploy a new

01:20:53.520 --> 01:20:55.680
<v Speaker 2>edge gateway. So if you're man trying to

01:20:55.680 --> 01:20:57.920
<v Speaker 2>manage multiple local gateways, you essentially put in

01:20:57.920 --> 01:21:00.080
<v Speaker 2>a name, you add in a type,

01:21:00.560 --> 01:21:02.400
<v Speaker 2>and then fill in a a few information,

01:21:02.400 --> 01:21:03.760
<v Speaker 2>and it would be ready to go for

01:21:03.760 --> 01:21:06.784
<v Speaker 2>you. The the interesting part is also around

01:21:07.425 --> 01:21:10.065
<v Speaker 2>versions because we do have certain versions available

01:21:10.065 --> 01:21:11.985
<v Speaker 2>already. The latest version that we're working on

01:21:11.985 --> 01:21:14.145
<v Speaker 2>right now is three point two point one.

01:21:14.145 --> 01:21:14.625
<v Speaker 2>And

01:21:15.505 --> 01:21:17.585
<v Speaker 2>but you can add older versions as well

01:21:17.585 --> 01:21:19.025
<v Speaker 2>if you do want to do so.

01:21:19.639 --> 01:21:21.800
<v Speaker 2>Probably not recommended, but in case that is

01:21:21.800 --> 01:21:23.079
<v Speaker 2>something that you're looking at.

01:21:24.040 --> 01:21:25.639
<v Speaker 2>So in the interest of time, I'm gonna

01:21:25.639 --> 01:21:27.800
<v Speaker 2>switch over to my local installation, which is

01:21:27.800 --> 01:21:29.560
<v Speaker 2>gonna seem very familiar. So this is a

01:21:29.560 --> 01:21:30.999
<v Speaker 2>local installation at the moment.

01:21:31.560 --> 01:21:33.320
<v Speaker 2>This should look very familiar from a dashboard

01:21:33.320 --> 01:21:33.800
<v Speaker 2>perspective,

01:21:34.554 --> 01:21:36.474
<v Speaker 2>very similar to what we had here with

01:21:36.474 --> 01:21:37.514
<v Speaker 2>the Tyk cloud.

01:21:38.155 --> 01:21:38.794
<v Speaker 2>And

01:21:39.355 --> 01:21:41.514
<v Speaker 2>in here, we've got a few different capabilities.

01:21:41.514 --> 01:21:43.675
<v Speaker 2>And so what I'm gonna be doing today

01:21:43.675 --> 01:21:46.235
<v Speaker 2>is that I'm gonna be showing you how

01:21:46.235 --> 01:21:47.114
<v Speaker 2>you can

01:21:47.514 --> 01:21:48.315
<v Speaker 2>use

01:21:48.870 --> 01:21:50.229
<v Speaker 2>two REST endpoints

01:21:50.469 --> 01:21:51.909
<v Speaker 2>and construct

01:21:52.310 --> 01:21:55.110
<v Speaker 2>a GraphQL schema using that. And then once

01:21:55.110 --> 01:21:56.790
<v Speaker 2>we have the GraphQL schema, we'll add in

01:21:56.790 --> 01:21:58.070
<v Speaker 2>a little bit of security

01:21:58.389 --> 01:22:00.550
<v Speaker 2>policy on top of that as well. So

01:22:00.790 --> 01:22:02.790
<v Speaker 2>before the example that I'm gonna be using,

01:22:02.790 --> 01:22:03.510
<v Speaker 2>I'm gonna be using

01:22:04.715 --> 01:22:08.155
<v Speaker 2>this user information, which I've gotten from the

01:22:08.155 --> 01:22:10.955
<v Speaker 2>website, jasonplaceholdertykico.com.

01:22:11.435 --> 01:22:13.515
<v Speaker 2>I'm gonna be using users, and I'm gonna

01:22:13.515 --> 01:22:15.995
<v Speaker 2>be mapping this as as in the form

01:22:15.995 --> 01:22:17.994
<v Speaker 2>of a GraphQL schema.

01:22:17.995 --> 01:22:19.115
<v Speaker 2>So, hopefully, this is visible,

01:22:20.489 --> 01:22:23.929
<v Speaker 2>And I'm gonna head back onto my installation,

01:22:24.170 --> 01:22:26.010
<v Speaker 2>head on over to APIs.

01:22:26.329 --> 01:22:27.849
<v Speaker 2>I've got a bunch of these already, but

01:22:27.849 --> 01:22:29.289
<v Speaker 2>I'm gonna create a new one.

01:22:30.250 --> 01:22:30.649
<v Speaker 2>This

01:22:31.289 --> 01:22:33.210
<v Speaker 2>is gonna be a GraphQL API. I'm gonna

01:22:33.210 --> 01:22:36.090
<v Speaker 2>call it

01:22:34.655 --> 01:22:35.535
<v Speaker 2>test

01:22:35.615 --> 01:22:37.455
<v Speaker 2>user info.

01:22:38.495 --> 01:22:40.655
<v Speaker 2>I'm gonna be choosing the universal data graph,

01:22:40.655 --> 01:22:42.815
<v Speaker 2>and I'm gonna be composing a new GraphQL

01:22:42.815 --> 01:22:43.615
<v Speaker 2>service.

01:22:44.415 --> 01:22:45.935
<v Speaker 2>So with that, I'm gonna hit configure.

01:22:47.100 --> 01:22:48.219
<v Speaker 2>To begin with,

01:22:48.540 --> 01:22:50.619
<v Speaker 2>again, you've got all of these different options,

01:22:50.699 --> 01:22:52.060
<v Speaker 2>which we can go into the details of

01:22:52.060 --> 01:22:53.820
<v Speaker 2>it for now. I'm gonna skip that. The

01:22:53.820 --> 01:22:55.580
<v Speaker 2>one that I'm interested in to begin with

01:22:55.580 --> 01:22:58.620
<v Speaker 2>is this authentication mode towards the end. I'm

01:22:58.620 --> 01:23:00.620
<v Speaker 2>just gonna make this keyless to begin with

01:23:01.405 --> 01:23:02.605
<v Speaker 2>and save it.

01:23:03.885 --> 01:23:06.045
<v Speaker 2>Back on into the user info,

01:23:06.125 --> 01:23:08.525
<v Speaker 2>and I'm gonna start constructing my schema.

01:23:08.925 --> 01:23:12.125
<v Speaker 2>So by default, of course, we have mutation

01:23:12.125 --> 01:23:14.605
<v Speaker 2>and query queries in there. I'm not gonna

01:23:14.605 --> 01:23:16.870
<v Speaker 2>use mutations for now, so I'm just gonna

01:23:16.870 --> 01:23:17.670
<v Speaker 2>skip that.

01:23:18.630 --> 01:23:21.030
<v Speaker 2>And before I change my query, I'm gonna

01:23:21.030 --> 01:23:23.110
<v Speaker 2>add in a new type called

01:23:23.350 --> 01:23:24.150
<v Speaker 2>user.

01:23:24.950 --> 01:23:27.190
<v Speaker 2>It's gonna map my user object. I'm not

01:23:27.190 --> 01:23:29.110
<v Speaker 2>gonna map everything. So if you see this

01:23:29.110 --> 01:23:30.150
<v Speaker 2>object has a few different

01:23:30.715 --> 01:23:32.475
<v Speaker 2>fields or keys,

01:23:32.475 --> 01:23:34.955
<v Speaker 2>which is ID, name, username, email. I'm just

01:23:34.955 --> 01:23:38.155
<v Speaker 2>gonna pick out the ID name and email

01:23:39.115 --> 01:23:40.235
<v Speaker 2>for demonstration.

01:23:40.235 --> 01:23:42.395
<v Speaker 2>So let's start off with ID,

01:23:43.675 --> 01:23:44.075
<v Speaker 2>and

01:23:46.080 --> 01:23:49.040
<v Speaker 2>we've got name, which is of type string,

01:23:49.360 --> 01:23:50.480
<v Speaker 2>and we've got

01:23:51.440 --> 01:23:52.239
<v Speaker 2>email.

01:23:53.600 --> 01:23:54.480
<v Speaker 2>So

01:23:55.520 --> 01:23:58.815
<v Speaker 2>that is that. An insight query, which is

01:23:58.815 --> 01:24:00.175
<v Speaker 2>what I'm gonna be using to make the

01:24:00.175 --> 01:24:03.215
<v Speaker 2>request, I'm just gonna call this get user

01:24:03.215 --> 01:24:04.094
<v Speaker 2>info.

01:24:04.815 --> 01:24:05.294
<v Speaker 2>And

01:24:05.695 --> 01:24:08.254
<v Speaker 2>this is gonna be of type user.

01:24:08.335 --> 01:24:09.534
<v Speaker 2>So what I can do here is, of

01:24:09.534 --> 01:24:11.250
<v Speaker 2>course, I can I can call the entire

01:24:11.250 --> 01:24:12.929
<v Speaker 2>list of users? There are 10 users that

01:24:12.929 --> 01:24:14.849
<v Speaker 2>are available at the moment. But what I

01:24:14.849 --> 01:24:17.010
<v Speaker 2>actually want to do is to actually query

01:24:17.010 --> 01:24:19.090
<v Speaker 2>a specific user. So in order to do

01:24:19.090 --> 01:24:19.570
<v Speaker 2>that,

01:24:20.449 --> 01:24:22.770
<v Speaker 2>as part of this offering, we've got slash

01:24:22.770 --> 01:24:24.770
<v Speaker 2>one will give me ID number one. So

01:24:24.770 --> 01:24:27.034
<v Speaker 2>if you do a slash ID number,

01:24:27.195 --> 01:24:30.954
<v Speaker 2>you get specific information for that particular user.

01:24:31.034 --> 01:24:33.275
<v Speaker 2>So I'm just gonna try to map that

01:24:33.275 --> 01:24:34.315
<v Speaker 2>over here.

01:24:34.554 --> 01:24:36.074
<v Speaker 2>So in order to do that, I'm gonna

01:24:36.074 --> 01:24:36.954
<v Speaker 2>add in

01:24:37.435 --> 01:24:38.554
<v Speaker 2>parameter.

01:24:38.554 --> 01:24:39.755
<v Speaker 2>I'm gonna call it ID.

01:24:43.480 --> 01:24:45.240
<v Speaker 2>With that, I'm gonna head on over to

01:24:45.240 --> 01:24:46.520
<v Speaker 2>my data sources.

01:24:47.640 --> 01:24:49.560
<v Speaker 2>And here, I need to just map out

01:24:49.560 --> 01:24:51.560
<v Speaker 2>this particular field. So I'm gonna define my

01:24:51.560 --> 01:24:52.120
<v Speaker 2>data source,

01:24:54.575 --> 01:24:55.695
<v Speaker 2>call it rest.

01:24:56.735 --> 01:24:58.735
<v Speaker 2>The URL is gonna be,

01:24:59.455 --> 01:25:01.695
<v Speaker 2>I'm just gonna take the first half first.

01:25:04.335 --> 01:25:07.695
<v Speaker 2>And here, because the ID is gonna be

01:25:07.695 --> 01:25:10.340
<v Speaker 2>dynamic, so I'm gonna map this using

01:25:10.580 --> 01:25:12.019
<v Speaker 2>my ID argument.

01:25:12.500 --> 01:25:13.860
<v Speaker 2>So if you just start with a curly

01:25:13.860 --> 01:25:15.780
<v Speaker 2>bracket, if you just add a curly bracket

01:25:15.780 --> 01:25:17.300
<v Speaker 2>to begin with, it'll give you a choice,

01:25:17.300 --> 01:25:19.540
<v Speaker 2>drop down choices of the IDs that we've

01:25:19.540 --> 01:25:20.019
<v Speaker 2>got.

01:25:20.659 --> 01:25:22.975
<v Speaker 2>As you can remember, as part of our

01:25:22.975 --> 01:25:24.495
<v Speaker 2>when we were defining it, we had the

01:25:24.495 --> 01:25:26.815
<v Speaker 2>ID parameter as part of the argument there.

01:25:27.295 --> 01:25:28.735
<v Speaker 2>I can give this a name. I can

01:25:28.735 --> 01:25:29.935
<v Speaker 2>call it user

01:25:29.935 --> 01:25:30.895
<v Speaker 2>info.

01:25:32.895 --> 01:25:34.975
<v Speaker 2>Method here is gonna be get,

01:25:36.330 --> 01:25:37.130
<v Speaker 2>and

01:25:37.210 --> 01:25:39.210
<v Speaker 2>that should be it. So if I update

01:25:39.210 --> 01:25:39.770
<v Speaker 2>this

01:25:40.170 --> 01:25:42.410
<v Speaker 2>and update my definition,

01:25:43.210 --> 01:25:45.370
<v Speaker 2>we do have an inbuilt playground which I

01:25:45.370 --> 01:25:46.810
<v Speaker 2>can make use of. So let me just

01:25:46.810 --> 01:25:48.090
<v Speaker 2>test that out here and hopefully,

01:25:49.485 --> 01:25:51.405
<v Speaker 2>say, I'm gonna try and make this a

01:25:51.405 --> 01:25:52.925
<v Speaker 2>little bit larger so that it's visible. So

01:25:52.925 --> 01:25:55.005
<v Speaker 2>I've got my get user info. I'm gonna

01:25:55.005 --> 01:25:56.844
<v Speaker 2>call it ID number one,

01:25:58.605 --> 01:25:59.405
<v Speaker 2>ID,

01:25:59.805 --> 01:26:00.845
<v Speaker 2>name, and email.

01:26:01.950 --> 01:26:04.350
<v Speaker 2>Everything goes well. I should be able to

01:26:04.350 --> 01:26:05.710
<v Speaker 2>get back that information.

01:26:06.270 --> 01:26:07.870
<v Speaker 2>So now imagine what's happening over here is

01:26:07.870 --> 01:26:09.790
<v Speaker 2>that we have effectively transformed

01:26:09.790 --> 01:26:10.830
<v Speaker 2>a REST

01:26:10.990 --> 01:26:13.070
<v Speaker 2>endpoint into GraphQL

01:26:13.150 --> 01:26:15.505
<v Speaker 2>without having to write any code whatsoever. We've

01:26:15.505 --> 01:26:18.465
<v Speaker 2>essentially configured that through the universal data graph,

01:26:18.465 --> 01:26:20.305
<v Speaker 2>which is obviously very powerful to begin with.

01:26:20.305 --> 01:26:21.665
<v Speaker 2>And if I were to change this ID

01:26:21.665 --> 01:26:23.985
<v Speaker 2>to three, I will obviously get back that

01:26:23.985 --> 01:26:25.505
<v Speaker 2>specific information as well.

01:26:25.985 --> 01:26:27.585
<v Speaker 2>And I can add on more fields if

01:26:27.585 --> 01:26:29.260
<v Speaker 2>I want to. What I want to do

01:26:29.260 --> 01:26:30.940
<v Speaker 2>as an extension to this is

01:26:31.260 --> 01:26:33.659
<v Speaker 2>as part of every user, the user also

01:26:33.820 --> 01:26:36.219
<v Speaker 2>users also have a to dos list.

01:26:36.699 --> 01:26:39.900
<v Speaker 2>I can access based on user slash ID

01:26:39.900 --> 01:26:42.724
<v Speaker 2>slash to dos. So this is something that

01:26:42.724 --> 01:26:43.764
<v Speaker 2>I'm just gonna

01:26:44.324 --> 01:26:46.565
<v Speaker 2>try and replicate at the moment. So I

01:26:46.565 --> 01:26:48.165
<v Speaker 2>want as part of so these are two

01:26:48.165 --> 01:26:50.005
<v Speaker 2>different endpoints. Right now, they are not really

01:26:50.005 --> 01:26:52.005
<v Speaker 2>connected. You have to call this particular endpoint

01:26:52.005 --> 01:26:53.525
<v Speaker 2>to be able to get that. What I'm

01:26:53.525 --> 01:26:54.724
<v Speaker 2>gonna try to do here

01:26:55.090 --> 01:26:57.170
<v Speaker 2>is I am going to

01:26:57.730 --> 01:26:58.690
<v Speaker 2>combine

01:26:58.850 --> 01:27:02.130
<v Speaker 2>these two different endpoints or information from these

01:27:02.130 --> 01:27:02.770
<v Speaker 2>endpoints.

01:27:03.010 --> 01:27:05.010
<v Speaker 2>So I've got I'm gonna create a new

01:27:05.330 --> 01:27:06.770
<v Speaker 2>object called to do.

01:27:07.744 --> 01:27:09.665
<v Speaker 2>Within that, I'm just gonna look at the

01:27:09.665 --> 01:27:12.224
<v Speaker 2>fields that are available. I've got user ID,

01:27:12.224 --> 01:27:13.744
<v Speaker 2>ID, title, and completed.

01:27:14.545 --> 01:27:17.425
<v Speaker 2>Gonna try and map that user ID,

01:27:18.385 --> 01:27:18.864
<v Speaker 2>integer,

01:27:19.830 --> 01:27:21.989
<v Speaker 2>d is an integer.

01:27:23.350 --> 01:27:24.150
<v Speaker 2>I believe

01:27:27.430 --> 01:27:28.550
<v Speaker 2>completed

01:27:29.510 --> 01:27:30.310
<v Speaker 2>is

01:27:30.870 --> 01:27:31.350
<v Speaker 2>boolean.

01:27:32.905 --> 01:27:33.545
<v Speaker 2>K.

01:27:34.025 --> 01:27:36.105
<v Speaker 2>I want this information to be available. So

01:27:36.105 --> 01:27:38.745
<v Speaker 2>when I'm querying a user information, I want

01:27:38.745 --> 01:27:40.905
<v Speaker 2>this to be available to me directly.

01:27:42.025 --> 01:27:43.784
<v Speaker 2>And for doing that, I'm gonna add in

01:27:43.784 --> 01:27:46.179
<v Speaker 2>a field called to dos, and I'm gonna

01:27:46.179 --> 01:27:48.020
<v Speaker 2>get back a list of to do, which

01:27:48.020 --> 01:27:50.019
<v Speaker 2>is why there is a square bracket there.

01:27:50.260 --> 01:27:51.940
<v Speaker 2>So I go into my data sources because

01:27:51.940 --> 01:27:53.380
<v Speaker 2>I want to I need to map out

01:27:53.380 --> 01:27:54.739
<v Speaker 2>my to dos as well.

01:27:55.460 --> 01:27:57.219
<v Speaker 2>I'm gonna define my data source.

01:27:57.460 --> 01:27:59.540
<v Speaker 2>I can use the template that I just

01:27:59.540 --> 01:27:59.940
<v Speaker 2>created

01:28:00.585 --> 01:28:02.185
<v Speaker 2>for the user info, so I can just

01:28:02.185 --> 01:28:02.905
<v Speaker 2>use that.

01:28:03.385 --> 01:28:05.465
<v Speaker 2>Get rid of this now

01:28:05.785 --> 01:28:08.345
<v Speaker 2>because what we're gonna be using here is

01:28:08.825 --> 01:28:10.985
<v Speaker 2>this, the ID of the type user,

01:28:11.065 --> 01:28:12.665
<v Speaker 2>which is object ID

01:28:13.120 --> 01:28:14.719
<v Speaker 2>and to dos here.

01:28:15.440 --> 01:28:16.960
<v Speaker 2>I'll change the name of my data source

01:28:16.960 --> 01:28:18.480
<v Speaker 2>to call it to dos.

01:28:19.760 --> 01:28:22.560
<v Speaker 2>Update my field now and update my API

01:28:22.560 --> 01:28:23.360
<v Speaker 2>definition.

01:28:24.800 --> 01:28:26.160
<v Speaker 2>Go back to my playground,

01:28:28.135 --> 01:28:29.175
<v Speaker 2>to dos,

01:28:29.735 --> 01:28:32.775
<v Speaker 2>let's say title and complete should

01:28:35.415 --> 01:28:37.574
<v Speaker 2>get back all the to dos of that

01:28:37.574 --> 01:28:40.054
<v Speaker 2>particular user. So I can obviously change up

01:28:40.054 --> 01:28:41.415
<v Speaker 2>my user and get the to dos of

01:28:41.415 --> 01:28:43.740
<v Speaker 2>that specific listing. But effectively, what we have

01:28:43.740 --> 01:28:45.820
<v Speaker 2>done here is we have combined

01:28:45.900 --> 01:28:49.420
<v Speaker 2>two different data sources and created a GraphQL

01:28:49.420 --> 01:28:51.580
<v Speaker 2>schema out of that. And now you can

01:28:51.580 --> 01:28:53.900
<v Speaker 2>query through that one single endpoint. You can

01:28:53.900 --> 01:28:56.300
<v Speaker 2>query both of those different data sources in

01:28:56.300 --> 01:28:57.180
<v Speaker 2>a combined manner.

01:28:57.745 --> 01:28:59.905
<v Speaker 2>So that is essentially the power of Universal

01:28:59.905 --> 01:29:01.825
<v Speaker 2>Data Graph. Of course, we can go further

01:29:01.825 --> 01:29:03.105
<v Speaker 2>into this also,

01:29:03.185 --> 01:29:05.185
<v Speaker 2>and we can add more data sources. There

01:29:05.185 --> 01:29:06.465
<v Speaker 2>is no limit to that.

01:29:06.945 --> 01:29:08.305
<v Speaker 2>But right now, I think I'm gonna just

01:29:08.305 --> 01:29:10.305
<v Speaker 2>stop here. What I'll do as an extension

01:29:10.305 --> 01:29:12.785
<v Speaker 2>to this, of course, is we already have

01:29:13.240 --> 01:29:14.280
<v Speaker 2>this endpoint.

01:29:14.360 --> 01:29:15.640
<v Speaker 2>I'm gonna show you a little bit about

01:29:15.640 --> 01:29:18.280
<v Speaker 2>the security feature aspect as well with a

01:29:18.280 --> 01:29:19.480
<v Speaker 2>couple of minutes to go.

01:29:21.400 --> 01:29:23.160
<v Speaker 2>One thing that we can do, I'm gonna

01:29:23.160 --> 01:29:24.200
<v Speaker 2>switch over to,

01:29:26.795 --> 01:29:29.275
<v Speaker 2>let's see, we do have an external playground

01:29:29.275 --> 01:29:31.435
<v Speaker 2>as well. So if you want to enable

01:29:31.435 --> 01:29:33.594
<v Speaker 2>that, we can enable the external playground

01:29:34.875 --> 01:29:36.235
<v Speaker 2>and hit update.

01:29:36.875 --> 01:29:38.715
<v Speaker 2>So the way to access this would be,

01:29:38.715 --> 01:29:42.554
<v Speaker 2>you use the API URL on top and

01:29:41.730 --> 01:29:44.610
<v Speaker 2>slash playground after that. So I'm just gonna

01:29:44.610 --> 01:29:45.489
<v Speaker 2>do this.

01:29:49.570 --> 01:29:50.849
<v Speaker 2>That loads up,

01:29:51.810 --> 01:29:53.329
<v Speaker 2>well, a GraphQL

01:29:54.130 --> 01:29:55.010
<v Speaker 2>playground.

01:29:55.170 --> 01:29:57.410
<v Speaker 2>And if I were to run my

01:30:00.025 --> 01:30:01.945
<v Speaker 2>query once again here, I should get this

01:30:01.945 --> 01:30:02.185
<v Speaker 2>back.

01:30:18.490 --> 01:30:21.050
<v Speaker 2>Okay. So I'm getting the information back. Now

01:30:21.050 --> 01:30:23.530
<v Speaker 2>let me head on over to policies.

01:30:24.245 --> 01:30:26.805
<v Speaker 2>So like Andy had mentioned previously, policies essentially

01:30:26.805 --> 01:30:28.885
<v Speaker 2>are like they define sort of the rules

01:30:28.885 --> 01:30:31.125
<v Speaker 2>of engagement when it comes to your security,

01:30:31.125 --> 01:30:32.165
<v Speaker 2>your rate limits,

01:30:32.405 --> 01:30:34.325
<v Speaker 2>and all the keys that are created based

01:30:34.325 --> 01:30:36.645
<v Speaker 2>on those policies will inherit all of the

01:30:36.725 --> 01:30:38.645
<v Speaker 2>settings or configuration that you have at that

01:30:38.645 --> 01:30:41.340
<v Speaker 2>policy level. So I'm gonna call it,

01:30:43.340 --> 01:30:45.820
<v Speaker 2>let's say, user. So I can I can

01:30:45.820 --> 01:30:48.700
<v Speaker 2>select this particular user info here?

01:30:49.580 --> 01:30:51.580
<v Speaker 2>Oh, I need to change the format. So

01:30:51.580 --> 01:30:53.580
<v Speaker 2>if I go back to my I APIs,

01:30:54.155 --> 01:30:56.475
<v Speaker 2>I'm gonna change my authentication type

01:30:56.955 --> 01:30:58.795
<v Speaker 2>to authentication token.

01:31:00.235 --> 01:31:01.275
<v Speaker 2>Hit update

01:31:01.595 --> 01:31:02.955
<v Speaker 2>on the policies,

01:31:03.355 --> 01:31:04.475
<v Speaker 2>add policy,

01:31:05.035 --> 01:31:07.115
<v Speaker 2>select the API. You can obviously add or

01:31:07.115 --> 01:31:08.475
<v Speaker 2>remove APIs if you want. There can be

01:31:08.475 --> 01:31:09.515
<v Speaker 2>multiple APIs in there.

01:31:10.760 --> 01:31:12.360
<v Speaker 2>I'm gonna hit configuration.

01:31:12.360 --> 01:31:13.960
<v Speaker 2>I need to give this a name, so

01:31:13.960 --> 01:31:15.159
<v Speaker 2>I'm gonna call it

01:31:15.640 --> 01:31:16.360
<v Speaker 2>test

01:31:17.160 --> 01:31:18.520
<v Speaker 2>info policy.

01:31:21.480 --> 01:31:22.200
<v Speaker 2>Is

01:31:22.395 --> 01:31:23.275
<v Speaker 2>never,

01:31:23.275 --> 01:31:25.275
<v Speaker 2>but you can choose a shorter time frame

01:31:25.275 --> 01:31:27.995
<v Speaker 2>if you want. And that will create my

01:31:27.995 --> 01:31:28.795
<v Speaker 2>policy.

01:31:29.995 --> 01:31:31.675
<v Speaker 2>Now once the policy has been created, I

01:31:31.675 --> 01:31:33.755
<v Speaker 2>can go in and create my key

01:31:33.915 --> 01:31:35.355
<v Speaker 2>based on that policy.

01:31:37.530 --> 01:31:39.530
<v Speaker 2>Just hit key here,

01:31:39.770 --> 01:31:42.010
<v Speaker 2>that's it. Pretty straightforward to do that. If

01:31:42.010 --> 01:31:44.090
<v Speaker 2>I head back over to my playground right

01:31:44.090 --> 01:31:45.210
<v Speaker 2>now, it should

01:31:45.450 --> 01:31:48.185
<v Speaker 2>prevent me from making this available. So I'm

01:31:48.185 --> 01:31:49.945
<v Speaker 2>gonna just add in my

01:31:51.545 --> 01:31:53.225
<v Speaker 2>diarization header.

01:31:57.625 --> 01:31:59.945
<v Speaker 2>Hopefully, this will get me back my information.

01:31:59.945 --> 01:32:01.945
<v Speaker 2>So now there is an authentication token that

01:32:01.945 --> 01:32:03.625
<v Speaker 2>is gonna be governing this.

01:32:04.400 --> 01:32:05.840
<v Speaker 2>One last thing that I want to show

01:32:05.840 --> 01:32:07.520
<v Speaker 2>as part of this, because we are talking

01:32:07.520 --> 01:32:10.079
<v Speaker 2>GraphQL endpoints, of course, GraphQL endpoints,

01:32:10.239 --> 01:32:12.239
<v Speaker 2>unlike REST, they don't just operate at the

01:32:12.239 --> 01:32:14.719
<v Speaker 2>HTTP layer, but they are also at the

01:32:14.719 --> 01:32:16.400
<v Speaker 2>data query layer as well. So there are

01:32:16.400 --> 01:32:18.639
<v Speaker 2>a couple of issues that that brings in,

01:32:19.165 --> 01:32:19.965
<v Speaker 2>which is

01:32:20.364 --> 01:32:22.284
<v Speaker 2>a, the depth of queries need to be

01:32:22.284 --> 01:32:24.445
<v Speaker 2>limited in some cases because you can have

01:32:24.445 --> 01:32:27.405
<v Speaker 2>nested queries which could balloon up too much,

01:32:27.405 --> 01:32:29.405
<v Speaker 2>that can result in a denial of service

01:32:29.405 --> 01:32:32.844
<v Speaker 2>attack, or it could pretty much hemorrhage your

01:32:33.245 --> 01:32:33.645
<v Speaker 2>server.

01:32:34.400 --> 01:32:36.960
<v Speaker 2>So in order to do that, here you've

01:32:36.960 --> 01:32:38.320
<v Speaker 2>got your query depth.

01:32:40.400 --> 01:32:42.480
<v Speaker 2>I'm gonna set this to

01:32:42.560 --> 01:32:43.360
<v Speaker 2>two,

01:32:44.480 --> 01:32:47.040
<v Speaker 2>and the way you look at this is

01:32:47.200 --> 01:32:48.480
<v Speaker 2>if you go back to the playground,

01:32:49.075 --> 01:32:51.235
<v Speaker 2>well, a hack that I use essentially is

01:32:51.235 --> 01:32:53.475
<v Speaker 2>to look at the open curly braces that

01:32:53.475 --> 01:32:54.835
<v Speaker 2>sort of gives me how deep we are

01:32:54.835 --> 01:32:55.955
<v Speaker 2>at the moment. So right now, we are

01:32:55.955 --> 01:32:58.755
<v Speaker 2>at one, two, three levels deep at the

01:32:58.755 --> 01:33:01.155
<v Speaker 2>moment. So if I were to go back

01:33:01.155 --> 01:33:01.795
<v Speaker 2>and

01:33:02.195 --> 01:33:03.315
<v Speaker 2>hit update on this,

01:33:04.660 --> 01:33:06.660
<v Speaker 2>because my I've I've set a maximum query

01:33:06.660 --> 01:33:07.780
<v Speaker 2>depth to number two,

01:33:08.500 --> 01:33:11.060
<v Speaker 2>this is gonna prevent me from going further.

01:33:11.300 --> 01:33:12.900
<v Speaker 2>But if I were to get rid of

01:33:12.900 --> 01:33:14.580
<v Speaker 2>the to dos part

01:33:15.380 --> 01:33:17.195
<v Speaker 2>and go in there, then it'll get me

01:33:17.195 --> 01:33:19.275
<v Speaker 2>back my information. So it sort of prevents

01:33:19.275 --> 01:33:21.355
<v Speaker 2>me from going too deep if that is

01:33:21.355 --> 01:33:22.554
<v Speaker 2>something that needs to be

01:33:23.035 --> 01:33:26.315
<v Speaker 2>configured there. That's one thing. I'm gonna reset

01:33:26.315 --> 01:33:26.875
<v Speaker 2>that.

01:33:27.115 --> 01:33:29.995
<v Speaker 2>And the other aspect is our field based

01:33:29.995 --> 01:33:32.100
<v Speaker 2>permissions. Now imagine

01:33:33.380 --> 01:33:36.020
<v Speaker 2>you have different APIs because with with GraphQL,

01:33:36.020 --> 01:33:38.340
<v Speaker 2>it brings a lot of flexibility to how

01:33:38.340 --> 01:33:40.820
<v Speaker 2>you're constructing your schema.

01:33:40.900 --> 01:33:43.140
<v Speaker 2>But also equally, it also exposes that information

01:33:43.140 --> 01:33:45.405
<v Speaker 2>to clients, and it gives pretty much puts

01:33:45.405 --> 01:33:47.324
<v Speaker 2>the onus on the clients to

01:33:47.885 --> 01:33:51.085
<v Speaker 2>request information, whatever information that they want. So

01:33:51.325 --> 01:33:53.245
<v Speaker 2>to sort of make sure that you're not

01:33:53.245 --> 01:33:55.805
<v Speaker 2>exposing things that you don't want exposed to

01:33:55.805 --> 01:33:56.685
<v Speaker 2>specific

01:33:56.685 --> 01:33:57.165
<v Speaker 2>clients,

01:33:57.670 --> 01:34:00.630
<v Speaker 2>you can put restrictions on the fields as

01:34:00.630 --> 01:34:02.469
<v Speaker 2>well. So for instance, I can do that

01:34:02.469 --> 01:34:04.789
<v Speaker 2>at that entire user level, so I can

01:34:04.789 --> 01:34:07.349
<v Speaker 2>deny access to the to do or the

01:34:07.349 --> 01:34:08.629
<v Speaker 2>or the user itself,

01:34:08.869 --> 01:34:10.550
<v Speaker 2>or I can look at specific fields.

01:34:10.975 --> 01:34:13.855
<v Speaker 2>So for instance, if I don't want email

01:34:13.855 --> 01:34:15.135
<v Speaker 2>to be available

01:34:15.455 --> 01:34:18.015
<v Speaker 2>for a particular user, then I can deny

01:34:18.015 --> 01:34:19.535
<v Speaker 2>access to that. So if I hit update

01:34:19.535 --> 01:34:20.335
<v Speaker 2>at the moment,

01:34:22.255 --> 01:34:24.410
<v Speaker 2>and if I were to hit play, it's

01:34:24.410 --> 01:34:26.570
<v Speaker 2>gonna tell me email is restricted on this

01:34:26.570 --> 01:34:29.050
<v Speaker 2>user, and I cannot query that information. So

01:34:29.050 --> 01:34:30.970
<v Speaker 2>if I would got rid of that, I

01:34:30.970 --> 01:34:32.489
<v Speaker 2>will get back my information.

01:34:32.970 --> 01:34:34.490
<v Speaker 2>I can also add in to dos because

01:34:34.490 --> 01:34:36.410
<v Speaker 2>we got got rid of query depth limiting,

01:34:36.410 --> 01:34:38.090
<v Speaker 2>and I can get that information back in

01:34:38.090 --> 01:34:38.410
<v Speaker 2>as well.

01:34:39.365 --> 01:34:41.205
<v Speaker 2>So that's about it. I think this was

01:34:41.205 --> 01:34:43.845
<v Speaker 2>a very, very fast tracked version or introduction

01:34:43.845 --> 01:34:46.485
<v Speaker 2>into the Universal Data Graph. Hopefully, this sort

01:34:46.485 --> 01:34:47.925
<v Speaker 2>of made sense, gave you a little bit

01:34:47.925 --> 01:34:50.325
<v Speaker 2>of a sense of how the dashboard works,

01:34:50.325 --> 01:34:52.550
<v Speaker 2>how you can set your policies. You obviously

01:34:52.550 --> 01:34:54.310
<v Speaker 2>set your rate limits and things like that

01:34:54.310 --> 01:34:56.550
<v Speaker 2>as well in a through this interface.

01:34:57.110 --> 01:34:58.870
<v Speaker 2>But I think I'm gonna just stop here

01:34:58.870 --> 01:35:00.230
<v Speaker 2>given that we're about

01:35:01.190 --> 01:35:03.030
<v Speaker 2>35 in the hour.

01:35:03.350 --> 01:35:05.030
<v Speaker 0>Alright. Thank stop sharing.

01:35:06.765 --> 01:35:08.364
<v Speaker 0>Oh, he pushed the wrong button.

01:35:11.805 --> 01:35:14.045
<v Speaker 0>That does happen, unfortunately. The hang up button

01:35:14.045 --> 01:35:15.645
<v Speaker 0>and the stop sharing button are right next

01:35:15.645 --> 01:35:17.565
<v Speaker 0>to each other. I have complained to Ecamm

01:35:17.565 --> 01:35:19.725
<v Speaker 0>a couple of times. It is not ideal.

01:35:20.260 --> 01:35:22.179
<v Speaker 0>We'll get better just a few seconds to

01:35:22.179 --> 01:35:22.900
<v Speaker 0>come back.

01:35:24.580 --> 01:35:25.300
<v Speaker 0>Maybe.

01:35:31.619 --> 01:35:33.139
<v Speaker 0>I hope he's not talking to himself.

01:35:35.155 --> 01:35:35.955
<v Speaker 1>Could be.

01:35:39.235 --> 01:35:42.435
<v Speaker 0>So how familiar are you with Universal Datagraph,

01:35:42.435 --> 01:35:42.995
<v Speaker 0>MB?

01:35:45.155 --> 01:35:46.995
<v Speaker 1>Yeah. I'm pretty familiar with it. It was

01:35:46.995 --> 01:35:47.715
<v Speaker 1>released about,

01:35:48.600 --> 01:35:50.920
<v Speaker 1>I'm not sure now, maybe six months ago.

01:35:51.480 --> 01:35:54.680
<v Speaker 1>So it's yeah. We're rolling out. Right now,

01:35:55.000 --> 01:35:55.800
<v Speaker 1>you can

01:35:56.840 --> 01:35:58.600
<v Speaker 1>stitch together GraphQL,

01:35:58.600 --> 01:36:01.000
<v Speaker 1>REST. You can even do SOAP as well,

01:36:01.000 --> 01:36:02.920
<v Speaker 1>but the idea is that, actually, we're gonna

01:36:02.920 --> 01:36:06.225
<v Speaker 1>be providing resolvers for things like I I

01:36:06.225 --> 01:36:08.225
<v Speaker 1>wouldn't like to say what next, but I

01:36:08.225 --> 01:36:09.985
<v Speaker 1>wouldn't be surprised if it was something like

01:36:09.985 --> 01:36:10.785
<v Speaker 1>Kafka.

01:36:11.025 --> 01:36:11.745
<v Speaker 1>Maybe

01:36:12.385 --> 01:36:14.545
<v Speaker 1>we'll even provide an SDK for

01:36:15.185 --> 01:36:17.825
<v Speaker 1>Tyk users to actually build these themselves as

01:36:17.825 --> 01:36:20.520
<v Speaker 1>well. Nice. And there's support for subscriptions

01:36:20.760 --> 01:36:24.280
<v Speaker 1>coming in and also Federation Federation Plus subscriptions.

01:36:24.600 --> 01:36:26.920
<v Speaker 0>Federation is something that I find really interesting.

01:36:26.920 --> 01:36:28.760
<v Speaker 0>I mean, I'm I'm curious, you know, as

01:36:29.720 --> 01:36:31.320
<v Speaker 0>you know, me just as a a solo

01:36:31.320 --> 01:36:34.035
<v Speaker 0>developer, like, do I have access to universal

01:36:34.035 --> 01:36:35.875
<v Speaker 0>data graph? Is it just a UI that's

01:36:35.875 --> 01:36:38.035
<v Speaker 0>behind the the paywall? Can I still leverage

01:36:38.035 --> 01:36:40.114
<v Speaker 0>some of that functionality? How does that work?

01:36:42.595 --> 01:36:43.795
<v Speaker 0>I better have to welcome back.

01:36:44.940 --> 01:36:46.460
<v Speaker 0>The hang up button's right next to the

01:36:46.460 --> 01:36:48.300
<v Speaker 0>stops the stop sharing button. I'm I'm really

01:36:48.300 --> 01:36:49.260
<v Speaker 0>sorry about that.

01:36:50.540 --> 01:36:52.540
<v Speaker 0>No worries. So all all the kind of

01:36:52.699 --> 01:36:54.380
<v Speaker 1>all that type of capability,

01:36:54.380 --> 01:36:56.300
<v Speaker 1>whether you run open source or whether you

01:36:56.300 --> 01:36:58.725
<v Speaker 1>run the enterprise edition, We don't

01:36:59.125 --> 01:37:00.885
<v Speaker 1>that there's nothing hidden in the gateway from

01:37:00.885 --> 01:37:02.005
<v Speaker 1>our open source

01:37:03.445 --> 01:37:04.965
<v Speaker 1>consumers, users.

01:37:05.125 --> 01:37:07.925
<v Speaker 1>I think with Universal Data Graph, you could

01:37:07.925 --> 01:37:10.245
<v Speaker 1>configure it using something like operator,

01:37:11.210 --> 01:37:12.810
<v Speaker 1>but it's pretty complicated,

01:37:12.810 --> 01:37:14.330
<v Speaker 1>and I think it's one of those things

01:37:14.330 --> 01:37:16.330
<v Speaker 1>where that's pretty

01:37:16.330 --> 01:37:18.969
<v Speaker 1>well suited to a UI rather than doing

01:37:18.969 --> 01:37:21.370
<v Speaker 1>it on the on the command line. Technically

01:37:21.370 --> 01:37:22.170
<v Speaker 1>possible.

01:37:22.330 --> 01:37:24.455
<v Speaker 1>Like I say, everything, we don't we don't

01:37:24.455 --> 01:37:26.135
<v Speaker 1>exclude any functionality

01:37:26.215 --> 01:37:28.215
<v Speaker 1>from the from the open

01:37:29.255 --> 01:37:31.255
<v Speaker 1>source users in terms of think of it

01:37:31.255 --> 01:37:32.695
<v Speaker 1>as runtime capability.

01:37:32.695 --> 01:37:35.335
<v Speaker 1>The the licensed product's really providing

01:37:36.135 --> 01:37:37.415
<v Speaker 1>a management layer

01:37:38.239 --> 01:37:41.040
<v Speaker 0>Nice. That's useful. It provides the UI that's

01:37:41.040 --> 01:37:43.840
<v Speaker 1>useful for especially for something like UDG.

01:37:44.000 --> 01:37:46.880
<v Speaker 1>It's also got enterprise y features like single

01:37:47.840 --> 01:37:50.640
<v Speaker 1>sign on and and and visibility as well.

01:37:50.640 --> 01:37:52.955
<v Speaker 1>So open source gateways are great, I think,

01:37:52.955 --> 01:37:54.635
<v Speaker 1>if you're working in a small team. But

01:37:54.635 --> 01:37:56.155
<v Speaker 1>if you're a large organization

01:37:56.155 --> 01:37:58.315
<v Speaker 1>where lots of people are working with with

01:37:58.315 --> 01:38:01.595
<v Speaker 1>Tyk, it's useful to have that management layer

01:38:01.595 --> 01:38:05.435
<v Speaker 1>layer that exposes everything that's configured to those

01:38:05.435 --> 01:38:06.075
<v Speaker 1>different users.

01:38:07.260 --> 01:38:09.260
<v Speaker 1>And then there's functions in there where, actually,

01:38:09.260 --> 01:38:11.260
<v Speaker 1>if you are working in a big company

01:38:11.260 --> 01:38:12.780
<v Speaker 1>with lots of different teams,

01:38:13.659 --> 01:38:15.900
<v Speaker 1>there's ways to kind of isolate and segregate

01:38:15.900 --> 01:38:17.980
<v Speaker 1>your installation so one team can work on

01:38:17.980 --> 01:38:18.699
<v Speaker 1>their APIs,

01:38:19.125 --> 01:38:21.125
<v Speaker 1>and another team can work on theirs without

01:38:21.125 --> 01:38:22.724
<v Speaker 1>stepping on each other's toes.

01:38:23.845 --> 01:38:26.485
<v Speaker 0>Alright. Perfect. Alright. Plenty there for me to

01:38:26.485 --> 01:38:29.605
<v Speaker 0>go and play with there. Any any last

01:38:29.605 --> 01:38:31.125
<v Speaker 0>words, Anthony, you want to share before we

01:38:31.125 --> 01:38:32.085
<v Speaker 0>say goodbye for today?

01:38:35.580 --> 01:38:37.980
<v Speaker 0>Besides, try it, Tyk. This is I I

01:38:37.980 --> 01:38:39.820
<v Speaker 2>I don't know if I'm I'm hopefully, I'm

01:38:39.820 --> 01:38:41.900
<v Speaker 2>audible. There's been a bit of a boo

01:38:41.900 --> 01:38:44.140
<v Speaker 2>boo there with, I think, the stop sharing

01:38:44.140 --> 01:38:45.099
<v Speaker 2>screen button.

01:38:45.340 --> 01:38:47.500
<v Speaker 2>I was like, what what just happened? Because

01:38:47.500 --> 01:38:50.114
<v Speaker 2>everything just went blank, but it's all good.

01:38:50.275 --> 01:38:53.075
<v Speaker 2>No. This has been fantastic going through going

01:38:53.075 --> 01:38:55.555
<v Speaker 2>through our installation process and just seeing somebody

01:38:55.555 --> 01:38:57.235
<v Speaker 2>else trying that out as well on a

01:38:57.235 --> 01:38:59.795
<v Speaker 2>on a live platform, of course. That's been

01:38:59.795 --> 01:39:01.555
<v Speaker 2>quite interesting to to go over.

01:39:02.160 --> 01:39:04.080
<v Speaker 2>What I would recommend is if if people

01:39:04.080 --> 01:39:06.239
<v Speaker 2>do want to obviously make try this out

01:39:06.239 --> 01:39:06.960
<v Speaker 2>themselves,

01:39:07.040 --> 01:39:09.440
<v Speaker 2>go ahead. Go over to the doc docs

01:39:09.440 --> 01:39:10.960
<v Speaker 2>and try it out for yourself.

01:39:11.199 --> 01:39:13.360
<v Speaker 2>If you do want to try out the

01:39:14.080 --> 01:39:16.080
<v Speaker 2>cloud trial or the the version that I

01:39:16.080 --> 01:39:18.065
<v Speaker 2>showcased to you, you can do that as

01:39:18.065 --> 01:39:20.065
<v Speaker 2>well. The installation guide for that is part

01:39:20.065 --> 01:39:22.145
<v Speaker 2>of docs. It's very, very straightforward to get

01:39:22.145 --> 01:39:24.385
<v Speaker 2>signed up for the cloud trial. I think

01:39:24.385 --> 01:39:26.225
<v Speaker 2>right at the moment, it's about fourteen days

01:39:26.225 --> 01:39:27.585
<v Speaker 2>that you can try it out for for

01:39:27.585 --> 01:39:30.225
<v Speaker 2>free. Then beyond that, I think you you

01:39:30.225 --> 01:39:31.344
<v Speaker 2>might have to pay for that.

01:39:31.989 --> 01:39:33.830
<v Speaker 2>But it's a very simple way for you

01:39:33.830 --> 01:39:35.110
<v Speaker 2>to get started with some of the more

01:39:35.110 --> 01:39:37.429
<v Speaker 2>enterprise editions if you want to do that.

01:39:37.750 --> 01:39:40.310
<v Speaker 2>But, like, we just went through, the overall

01:39:40.310 --> 01:39:42.550
<v Speaker 2>installation of the open source gateway is pretty

01:39:42.550 --> 01:39:44.310
<v Speaker 2>pretty pretty simple

01:39:44.310 --> 01:39:44.630
<v Speaker 2>as well.

01:39:45.695 --> 01:39:46.494
<v Speaker 0>Awesome.

01:39:46.735 --> 01:39:48.575
<v Speaker 0>Well, thank you both very much for joining

01:39:48.575 --> 01:39:50.815
<v Speaker 0>me today. It's a really cool product.

01:39:51.055 --> 01:39:52.895
<v Speaker 0>I'm looking forward to playing with it more,

01:39:52.895 --> 01:39:54.735
<v Speaker 0>and I I really appreciate you joining me

01:39:54.735 --> 01:39:56.655
<v Speaker 0>and sharing your insights and knowledge along the

01:39:56.655 --> 01:39:58.900
<v Speaker 0>way. So we'll leave it there. I'll let

01:39:58.900 --> 01:40:00.180
<v Speaker 0>you both get back to your day, and

01:40:00.180 --> 01:40:01.780
<v Speaker 0>I'll hopefully speak to you both again soon.

01:40:01.780 --> 01:40:03.540
<v Speaker 0>So have a nice one, and thank you

01:40:03.540 --> 01:40:04.179
<v Speaker 0>for joining Thank

01:40:04.980 --> 01:40:06.500
<v Speaker 1>you. Thanks so much. Thank you for having

01:40:06.500 --> 01:40:08.100
<v Speaker 2>us. Bye bye. Bye.
