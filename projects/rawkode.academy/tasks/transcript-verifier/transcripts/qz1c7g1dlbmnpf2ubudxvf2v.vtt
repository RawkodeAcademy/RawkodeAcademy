WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: d1ea6f2e-e806-48bb-9e26-566b57d87b57
Created: 2025-04-29T12:15:36.517Z
Duration: 2396.8398
Channels: 1

00:00:00.000 --> 00:00:01.439
<v Speaker 0>Again, if it's just you and I, it

00:00:01.439 --> 00:00:04.480
<v Speaker 0>doesn't really matter. But I'm so frustrated.

00:00:05.440 --> 00:00:06.480
<v Speaker 1>Well, hello again.

00:00:07.839 --> 00:00:09.519
<v Speaker 0>Alright. We're now live again. My audio is

00:00:09.519 --> 00:00:11.120
<v Speaker 0>working. I have no idea what happened.

00:00:12.175 --> 00:00:14.015
<v Speaker 0>Hopefully, few of you see this, but we're

00:00:14.015 --> 00:00:15.775
<v Speaker 0>gonna continue with the demo because that was

00:00:15.775 --> 00:00:18.335
<v Speaker 0>just getting good. And I was actually you

00:00:18.335 --> 00:00:19.935
<v Speaker 0>you were doing a Docker Compose demo, and

00:00:19.935 --> 00:00:21.375
<v Speaker 0>I was trying to throw questions at you.

00:00:21.375 --> 00:00:22.654
<v Speaker 0>And I was like, he's just ignoring me.

00:00:22.654 --> 00:00:23.455
<v Speaker 0>That's awfully rude.

00:00:25.310 --> 00:00:26.830
<v Speaker 1>That's right. That is the best way to

00:00:26.830 --> 00:00:28.110
<v Speaker 1>do a demo. Just, yeah,

00:00:28.670 --> 00:00:31.310
<v Speaker 1>just gonna keep going and not stop. Yep.

00:00:31.950 --> 00:00:33.470
<v Speaker 0>Alright. So I've I did have a few

00:00:33.470 --> 00:00:36.190
<v Speaker 0>questions. I thought I've been able to manage

00:00:36.190 --> 00:00:38.655
<v Speaker 0>the builders via Buildx on the CLI and

00:00:38.655 --> 00:00:40.335
<v Speaker 0>so the UI is obviously a nice touch.

00:00:40.335 --> 00:00:42.254
<v Speaker 0>But it does make me wonder, you know,

00:00:42.254 --> 00:00:43.054
<v Speaker 0>how much

00:00:44.335 --> 00:00:45.855
<v Speaker 0>you know, there are different types of organizations

00:00:45.855 --> 00:00:48.094
<v Speaker 0>out there. For me, I want you to

00:00:48.094 --> 00:00:49.295
<v Speaker 0>manage the builder. I don't have to care

00:00:49.295 --> 00:00:51.329
<v Speaker 0>about it. I probably wanna pack how much

00:00:51.329 --> 00:00:52.610
<v Speaker 0>RAM or CPU. I don't even know if

00:00:52.610 --> 00:00:54.050
<v Speaker 0>I get that much control. We didn't get

00:00:54.050 --> 00:00:55.809
<v Speaker 0>to go into that much detail. But what

00:00:55.809 --> 00:00:58.129
<v Speaker 0>about for larger customers enterprises?

00:00:58.129 --> 00:00:59.809
<v Speaker 0>I mean, are they able to provision these

00:00:59.809 --> 00:01:02.210
<v Speaker 0>managed things in their own cloud? Like,

00:01:03.255 --> 00:01:05.415
<v Speaker 0>how does that work for depending on a

00:01:05.415 --> 00:01:06.615
<v Speaker 0>startup and enterprise?

00:01:07.095 --> 00:01:09.415
<v Speaker 1>Yeah. Great question. So with this being the

00:01:09.415 --> 00:01:10.375
<v Speaker 1>initial release,

00:01:10.615 --> 00:01:11.975
<v Speaker 1>what we have today

00:01:12.375 --> 00:01:14.615
<v Speaker 1>is a a product that we manage everything

00:01:14.615 --> 00:01:14.935
<v Speaker 1>for you.

00:01:15.640 --> 00:01:17.880
<v Speaker 1>And so we we manage the builders, and

00:01:17.880 --> 00:01:19.320
<v Speaker 1>right as of today,

00:01:20.600 --> 00:01:22.759
<v Speaker 1>depending on which tier, there's a

00:01:23.000 --> 00:01:24.840
<v Speaker 1>and this is on the the product page

00:01:24.840 --> 00:01:26.680
<v Speaker 1>as well too, but there's really only two

00:01:26.680 --> 00:01:28.119
<v Speaker 1>different machine configurations,

00:01:28.360 --> 00:01:30.795
<v Speaker 1>and it's really based on whether you're personal

00:01:30.795 --> 00:01:32.955
<v Speaker 1>or whether you're enterprise customer.

00:01:34.075 --> 00:01:36.395
<v Speaker 1>And you can have multiple builders. Of course,

00:01:36.395 --> 00:01:37.994
<v Speaker 1>there's gonna be additional cost. So if you're

00:01:37.994 --> 00:01:39.835
<v Speaker 1>on a, you know, an enterprise that's got

00:01:39.835 --> 00:01:41.755
<v Speaker 1>a hundred developers or a thousand developers, obviously,

00:01:41.755 --> 00:01:43.595
<v Speaker 1>you're not gonna wanna share the same machine.

00:01:43.595 --> 00:01:46.250
<v Speaker 1>You can you can set up additional builders.

00:01:46.329 --> 00:01:48.009
<v Speaker 1>But as of today, yes, we do manage

00:01:48.009 --> 00:01:49.049
<v Speaker 1>all the infrastructure.

00:01:49.369 --> 00:01:51.049
<v Speaker 1>It is on the road map to provide

00:01:51.049 --> 00:01:52.250
<v Speaker 1>the ability to

00:01:54.409 --> 00:01:57.210
<v Speaker 1>to provide additional offerings, whether to run those

00:01:57.210 --> 00:01:58.890
<v Speaker 1>builders within your own infrastructure

00:01:58.890 --> 00:01:59.450
<v Speaker 1>or

00:02:00.525 --> 00:02:01.725
<v Speaker 1>even to continue

00:02:03.645 --> 00:02:05.885
<v Speaker 1>to use our builders within our our

00:02:05.965 --> 00:02:08.205
<v Speaker 1>own infrastructure, but maybe connect to resources that

00:02:08.205 --> 00:02:10.764
<v Speaker 1>require VPN access or, you know, inside of

00:02:10.764 --> 00:02:12.205
<v Speaker 1>your corporate networks and that kind of stuff.

00:02:12.205 --> 00:02:13.885
<v Speaker 1>So there's a lot of different

00:02:14.330 --> 00:02:15.930
<v Speaker 1>variants on the road map here. But, yeah,

00:02:15.930 --> 00:02:17.850
<v Speaker 1>this is just the initial release that provides

00:02:17.850 --> 00:02:18.410
<v Speaker 1>the

00:02:18.730 --> 00:02:21.210
<v Speaker 1>fully managed, we run it for you infrastructure.

00:02:22.090 --> 00:02:22.810
<v Speaker 0>Okay.

00:02:23.050 --> 00:02:23.690
<v Speaker 0>And

00:02:23.930 --> 00:02:26.090
<v Speaker 0>when you ran the Docker Compose up,

00:02:26.755 --> 00:02:29.635
<v Speaker 0>curious, you know, what's actually happening there? Is

00:02:29.635 --> 00:02:31.555
<v Speaker 0>that tearing up my local

00:02:32.755 --> 00:02:33.875
<v Speaker 0>directory,

00:02:34.115 --> 00:02:36.435
<v Speaker 0>sending it to the builder as doing the

00:02:36.435 --> 00:02:38.195
<v Speaker 0>build, and then we're pulling down the image?

00:02:38.195 --> 00:02:39.875
<v Speaker 0>Like, is that the kind of workflow that's

00:02:39.875 --> 00:02:40.115
<v Speaker 0>happening?

00:02:40.810 --> 00:02:42.090
<v Speaker 1>Yeah. So, actually,

00:02:43.290 --> 00:02:44.970
<v Speaker 1>how about that? So I'll bring it back

00:02:44.970 --> 00:02:46.010
<v Speaker 1>up, and we can

00:02:46.650 --> 00:02:48.010
<v Speaker 1>I'm just gonna have to change scene in

00:02:48.010 --> 00:02:50.409
<v Speaker 0>case it mutes me again, but let's see

00:02:50.409 --> 00:02:51.290
<v Speaker 0>what happens.

00:02:51.530 --> 00:02:53.849
<v Speaker 1>Alright. I can still hear you. Yeah. Although,

00:02:53.849 --> 00:02:55.689
<v Speaker 0>I've never got random videos showing up by

00:02:55.689 --> 00:02:55.849
<v Speaker 0>me.

00:03:04.145 --> 00:03:05.825
<v Speaker 0>You wanna share your screen?

00:03:05.825 --> 00:03:07.345
<v Speaker 1>Yep. And

00:03:08.385 --> 00:03:09.825
<v Speaker 1>there it is. K.

00:03:20.380 --> 00:03:20.860
<v Speaker 1>Alright.

00:03:24.555 --> 00:03:25.435
<v Speaker 1>Good to go?

00:03:26.155 --> 00:03:28.075
<v Speaker 0>Yeah. I mean, I'm sure I'll work out

00:03:28.075 --> 00:03:29.515
<v Speaker 0>how to get rid of our big faces

00:03:29.515 --> 00:03:31.115
<v Speaker 0>behind us at some point, but right now,

00:03:31.115 --> 00:03:33.035
<v Speaker 0>it's not I'm I'm not gonna fix it.

00:03:33.275 --> 00:03:35.355
<v Speaker 1>Sounds good. Alright. Then I'll I'll just continue

00:03:35.355 --> 00:03:37.640
<v Speaker 1>on. So when I do and and this

00:03:37.640 --> 00:03:39.320
<v Speaker 1>is actually the case for any build. So

00:03:39.320 --> 00:03:41.000
<v Speaker 1>even if I'm doing a local build,

00:03:41.480 --> 00:03:43.400
<v Speaker 1>and I'll I'll just run this and we

00:03:43.400 --> 00:03:46.200
<v Speaker 1>can see what's kinda happening here. So what

00:03:46.200 --> 00:03:47.320
<v Speaker 1>ends up happening is,

00:03:47.895 --> 00:03:49.495
<v Speaker 1>first off, it has to connect to, in

00:03:49.495 --> 00:03:51.175
<v Speaker 1>this case, it's connecting to the the Build

00:03:51.175 --> 00:03:53.495
<v Speaker 1>Cloud service because that's the builder that I'm

00:03:53.495 --> 00:03:55.415
<v Speaker 1>using. It's the driver. But even if I

00:03:55.415 --> 00:03:57.175
<v Speaker 1>were using the local driver, it's gonna have

00:03:57.175 --> 00:03:58.055
<v Speaker 1>to connect to

00:03:58.375 --> 00:04:01.175
<v Speaker 1>the local BuildKit engine that that's running. K?

00:04:01.410 --> 00:04:03.570
<v Speaker 1>And then from there, it's basically gonna load

00:04:03.570 --> 00:04:06.370
<v Speaker 1>the Dockerfile, and then based on the

00:04:06.370 --> 00:04:07.490
<v Speaker 1>Dockerfile,

00:04:07.490 --> 00:04:08.450
<v Speaker 1>so and

00:04:08.930 --> 00:04:11.970
<v Speaker 1>the Docker ignore file, it's gonna transfer context

00:04:11.970 --> 00:04:14.370
<v Speaker 1>for what's what do I actually need to

00:04:14.370 --> 00:04:16.395
<v Speaker 1>do this build? So in this particular case,

00:04:16.395 --> 00:04:18.075
<v Speaker 1>since I'm just doing a a build and

00:04:18.075 --> 00:04:20.075
<v Speaker 1>there's not actually any copies that are occurring

00:04:20.075 --> 00:04:21.995
<v Speaker 1>for the the dev stage, I'm just setting

00:04:21.995 --> 00:04:24.155
<v Speaker 1>the work directory and and whatnot, that's why

00:04:24.155 --> 00:04:26.395
<v Speaker 1>there's only two bytes. And, honestly, I'm not

00:04:26.395 --> 00:04:27.995
<v Speaker 1>sure why there's even two bytes there, but

00:04:27.995 --> 00:04:28.235
<v Speaker 1>whatever.

00:04:29.060 --> 00:04:31.540
<v Speaker 1>While while if I do a a, you

00:04:31.540 --> 00:04:32.740
<v Speaker 1>know, the full build,

00:04:33.460 --> 00:04:35.780
<v Speaker 1>what we'll see here is that the context

00:04:35.780 --> 00:04:37.140
<v Speaker 1>that it's gonna be sending

00:04:37.620 --> 00:04:39.540
<v Speaker 1>is a a little bit larger,

00:04:39.860 --> 00:04:42.100
<v Speaker 1>but even then, there's not that much because

00:04:42.100 --> 00:04:42.820
<v Speaker 1>it's all cached.

00:04:44.115 --> 00:04:46.035
<v Speaker 1>So it's computing all the check sums and

00:04:46.035 --> 00:04:47.875
<v Speaker 1>everything to to find out, do I have

00:04:47.875 --> 00:04:49.475
<v Speaker 1>cache hits or misses

00:04:49.555 --> 00:04:51.794
<v Speaker 1>or whatnot before it actually has to transfer

00:04:51.794 --> 00:04:52.995
<v Speaker 1>the actual files.

00:04:53.315 --> 00:04:54.675
<v Speaker 1>So in this case, if I were to

00:04:54.675 --> 00:04:56.514
<v Speaker 1>tweak this, and let's just, I don't know,

00:04:56.514 --> 00:04:57.955
<v Speaker 1>turn it to question marks. K?

00:04:58.879 --> 00:05:00.800
<v Speaker 1>Now what that's gonna do is invalidate that

00:05:00.800 --> 00:05:01.440
<v Speaker 1>layer,

00:05:01.759 --> 00:05:03.039
<v Speaker 1>and so what we'll see is that there's

00:05:03.039 --> 00:05:05.120
<v Speaker 1>gonna be more cache that more context that's

00:05:05.120 --> 00:05:08.000
<v Speaker 1>sent because that particular layer,

00:05:09.199 --> 00:05:11.599
<v Speaker 1>let it finish building here. The copy source,

00:05:12.185 --> 00:05:12.905
<v Speaker 1>since

00:05:13.705 --> 00:05:15.705
<v Speaker 1>that layer needs to be rebuilt, it's only

00:05:15.705 --> 00:05:16.985
<v Speaker 1>gonna send basically

00:05:17.705 --> 00:05:20.185
<v Speaker 1>this the files for this particular layer. So

00:05:20.185 --> 00:05:22.185
<v Speaker 1>it tries to be really smart about what

00:05:22.185 --> 00:05:24.825
<v Speaker 1>is actually needed to be transferred, because obviously,

00:05:24.825 --> 00:05:26.585
<v Speaker 1>if you end up transferring everything,

00:05:26.665 --> 00:05:28.380
<v Speaker 1>then that's gonna slow down things, especially for

00:05:28.380 --> 00:05:30.620
<v Speaker 1>larger projects and and whatnot. So it it

00:05:30.620 --> 00:05:32.460
<v Speaker 1>does try to be really smart of, hey,

00:05:32.460 --> 00:05:34.940
<v Speaker 1>we're not gonna send files for cache hits.

00:05:35.260 --> 00:05:37.260
<v Speaker 1>We're only gonna send things for the the

00:05:37.260 --> 00:05:39.020
<v Speaker 1>layers that need to be rebuilt, and then

00:05:39.020 --> 00:05:41.580
<v Speaker 1>even then, only the source directory

00:05:42.455 --> 00:05:44.535
<v Speaker 1>in combination with what's in the Docker ignore

00:05:44.535 --> 00:05:46.215
<v Speaker 1>file. So even though, like, I've got the

00:05:46.215 --> 00:05:48.535
<v Speaker 1>node modules and everything else here locally on

00:05:48.535 --> 00:05:50.455
<v Speaker 1>my machine, well, the node modules aren't in

00:05:50.455 --> 00:05:52.775
<v Speaker 1>the source directory, but it's, again, being smart

00:05:52.775 --> 00:05:54.215
<v Speaker 1>about what am I actually shipping

00:05:54.630 --> 00:05:56.390
<v Speaker 1>to the builder. And it does the same

00:05:56.390 --> 00:05:57.990
<v Speaker 1>thing even with the local builder, but you

00:05:57.990 --> 00:05:59.510
<v Speaker 1>just don't notice it as much because it's

00:05:59.510 --> 00:06:00.470
<v Speaker 1>all just local

00:06:00.790 --> 00:06:02.150
<v Speaker 1>file moving at that point.

00:06:02.710 --> 00:06:04.390
<v Speaker 1>Then once it's done, it does Did just

00:06:05.510 --> 00:06:06.870
<v Speaker 0>send that one file,

00:06:07.110 --> 00:06:08.630
<v Speaker 0>or did it send the whole source directory?

00:06:09.125 --> 00:06:10.725
<v Speaker 1>Good question. So it does send the whole

00:06:10.725 --> 00:06:12.405
<v Speaker 1>source directory in

00:06:13.525 --> 00:06:15.605
<v Speaker 1>in this case. Yep. So it's gonna

00:06:16.565 --> 00:06:17.845
<v Speaker 1>and that's actually

00:06:18.645 --> 00:06:20.565
<v Speaker 1>I wanna say that that our build team

00:06:20.565 --> 00:06:22.005
<v Speaker 1>is looking at how it can make that

00:06:22.005 --> 00:06:24.005
<v Speaker 1>smarter as well too. But as of today,

00:06:24.300 --> 00:06:25.820
<v Speaker 1>yeah, it's sending the

00:06:26.539 --> 00:06:29.260
<v Speaker 1>basically, just, yeah, the the contents of the

00:06:29.819 --> 00:06:32.060
<v Speaker 1>the source side here, in this case, the

00:06:32.060 --> 00:06:33.900
<v Speaker 1>whole source directory. Yep.

00:06:34.300 --> 00:06:34.940
<v Speaker 1>Okay.

00:06:36.220 --> 00:06:38.139
<v Speaker 1>And then from there, yeah, it builds the

00:06:38.139 --> 00:06:39.020
<v Speaker 1>images remotely,

00:06:39.435 --> 00:06:41.275
<v Speaker 1>and then it basically downloads it just as

00:06:41.275 --> 00:06:42.875
<v Speaker 1>as if it were a registry. So you

00:06:42.875 --> 00:06:44.475
<v Speaker 1>will see that all these layers were already

00:06:44.475 --> 00:06:46.315
<v Speaker 1>on my local machine. It's only the the

00:06:46.315 --> 00:06:47.755
<v Speaker 1>last layer that changed,

00:06:47.915 --> 00:06:49.355
<v Speaker 1>and so I'm only pulling down this, you

00:06:49.355 --> 00:06:50.155
<v Speaker 1>know, almost

00:06:50.555 --> 00:06:52.955
<v Speaker 1>81 and a half kilobytes worth of

00:06:53.940 --> 00:06:55.860
<v Speaker 1>content here. Yep.

00:06:56.180 --> 00:06:58.340
<v Speaker 0>Nice. Yeah. There's already improvements

00:06:58.580 --> 00:07:00.420
<v Speaker 0>performance improvements from that workflow.

00:07:00.820 --> 00:07:02.020
<v Speaker 0>Yeah. Just put the way that that works

00:07:02.020 --> 00:07:04.100
<v Speaker 0>and speeding things up, especially when a lot

00:07:04.100 --> 00:07:07.065
<v Speaker 0>of the network intensive stuff and even the

00:07:07.065 --> 00:07:09.625
<v Speaker 0>compilation stuff for different types of languages. You

00:07:09.625 --> 00:07:11.145
<v Speaker 0>know, that all happens in the cloud, which

00:07:11.145 --> 00:07:13.225
<v Speaker 0>is really what we wanna be seeing here.

00:07:13.225 --> 00:07:14.665
<v Speaker 0>So I like that.

00:07:15.305 --> 00:07:17.065
<v Speaker 1>Yeah. And I and I've seen with, you

00:07:17.065 --> 00:07:18.905
<v Speaker 1>know, projects that have lots of dependencies or

00:07:18.905 --> 00:07:20.505
<v Speaker 1>having to download lots of files. I mean,

00:07:20.505 --> 00:07:22.830
<v Speaker 1>the the advantage, again, with the Build Cloud

00:07:22.830 --> 00:07:25.069
<v Speaker 1>environment is that it's using the the network

00:07:25.069 --> 00:07:27.789
<v Speaker 1>pipeline the network pipes that exist on the

00:07:27.789 --> 00:07:30.189
<v Speaker 1>remote build service rather than what I have

00:07:30.189 --> 00:07:30.830
<v Speaker 1>at home.

00:07:31.150 --> 00:07:31.710
<v Speaker 1>And

00:07:32.110 --> 00:07:33.629
<v Speaker 1>I know we've all seen, you know, YARN

00:07:33.629 --> 00:07:36.349
<v Speaker 1>dependencies or REST dependencies or really any dependencies

00:07:36.349 --> 00:07:37.835
<v Speaker 1>can just take a long time to download

00:07:37.835 --> 00:07:38.475
<v Speaker 1>everything.

00:07:39.435 --> 00:07:40.235
<v Speaker 1>But having

00:07:40.395 --> 00:07:43.195
<v Speaker 1>fat fat network pipes in the cloud make

00:07:43.195 --> 00:07:44.395
<v Speaker 1>that go much faster.

00:07:44.795 --> 00:07:47.035
<v Speaker 0>Yeah. I mean, like I said earlier, with

00:07:47.035 --> 00:07:49.195
<v Speaker 0>the the dance class, you know, Monday nights

00:07:49.195 --> 00:07:50.715
<v Speaker 0>are when I'm there, and I had to

00:07:50.715 --> 00:07:53.120
<v Speaker 0>work from there this Monday. And it does

00:07:53.120 --> 00:07:55.600
<v Speaker 0>an NPM install, and it literally took about

00:07:55.600 --> 00:07:56.720
<v Speaker 0>thirty six minutes.

00:07:56.960 --> 00:07:59.600
<v Speaker 0>That's kind of what I'm like. These things

00:07:59.600 --> 00:08:02.160
<v Speaker 0>I don't need to run over my tethered

00:08:02.160 --> 00:08:04.720
<v Speaker 0>connection to my phone and some concrete building

00:08:04.720 --> 00:08:07.120
<v Speaker 0>with very poor connection. So Yeah.

00:08:07.755 --> 00:08:09.835
<v Speaker 1>Well, and and and a good point there.

00:08:09.835 --> 00:08:11.115
<v Speaker 1>I mean, so there's a good chance that

00:08:11.115 --> 00:08:12.795
<v Speaker 1>even with the the Dockerfile,

00:08:12.795 --> 00:08:14.555
<v Speaker 1>again, just depending on what you're building,

00:08:15.195 --> 00:08:17.595
<v Speaker 1>you may still be downloading all the the

00:08:17.595 --> 00:08:20.475
<v Speaker 1>the contents there, but with, you know, you're

00:08:20.475 --> 00:08:21.995
<v Speaker 1>doing an NPM install and it's having to

00:08:21.995 --> 00:08:24.449
<v Speaker 1>download every package, like, every single one of

00:08:24.449 --> 00:08:27.250
<v Speaker 1>those libraries is yet another network connection and

00:08:27.250 --> 00:08:29.970
<v Speaker 1>TLS negotiation and everything that has to occur

00:08:29.970 --> 00:08:33.570
<v Speaker 1>there. Well, if this happens in your build,

00:08:33.809 --> 00:08:35.330
<v Speaker 1>then your final image has

00:08:35.825 --> 00:08:37.585
<v Speaker 1>all that kind of packaged together, and so

00:08:37.585 --> 00:08:39.265
<v Speaker 1>you're just downloading, at the end the day,

00:08:39.265 --> 00:08:41.105
<v Speaker 1>a single tarball that has all that rather

00:08:41.105 --> 00:08:43.265
<v Speaker 1>than having to make those thousands of network

00:08:43.265 --> 00:08:45.825
<v Speaker 1>connections and everything else. So even if you

00:08:45.825 --> 00:08:47.105
<v Speaker 1>were downloading the same

00:08:47.585 --> 00:08:48.865
<v Speaker 1>net

00:08:48.640 --> 00:08:49.200
<v Speaker 1>content,

00:08:49.600 --> 00:08:51.279
<v Speaker 1>it's gonna be faster just because you're having

00:08:51.279 --> 00:08:53.279
<v Speaker 1>to even just do that many fewer network

00:08:53.279 --> 00:08:54.000
<v Speaker 1>connections.

00:08:54.720 --> 00:08:55.760
<v Speaker 0>Yeah. Definitely.

00:08:56.320 --> 00:08:59.680
<v Speaker 0>So I haven't played with Docker Build Cloud

00:08:59.680 --> 00:09:01.120
<v Speaker 0>yet. So if I ask you a question,

00:09:01.120 --> 00:09:02.399
<v Speaker 0>it doesn't make any sense. Feel free to

00:09:02.399 --> 00:09:04.655
<v Speaker 0>shoot me down. Sure. Go for it. I

00:09:04.655 --> 00:09:06.095
<v Speaker 0>do see that we can view the build

00:09:06.095 --> 00:09:08.575
<v Speaker 0>details and that's Docker desktop link. I'm assuming,

00:09:08.575 --> 00:09:11.295
<v Speaker 0>do we get to understand cache invalidations on

00:09:11.295 --> 00:09:13.615
<v Speaker 0>what's happening from Docker desktop and from the

00:09:13.615 --> 00:09:14.415
<v Speaker 0>web UI?

00:09:15.055 --> 00:09:17.295
<v Speaker 1>Yeah. So actually, if I click on this

00:09:17.295 --> 00:09:17.935
<v Speaker 1>here,

00:09:18.495 --> 00:09:19.215
<v Speaker 1>which I

00:09:19.829 --> 00:09:21.589
<v Speaker 1>seen that okay. Maybe the the Versus Code

00:09:21.589 --> 00:09:23.589
<v Speaker 1>integration isn't opening up, but I can just

00:09:23.589 --> 00:09:25.190
<v Speaker 1>jump over to it. So if we jump

00:09:25.190 --> 00:09:27.350
<v Speaker 1>jump over to Docker Desktop, what that's gonna

00:09:27.350 --> 00:09:30.230
<v Speaker 1>do is take me to the builds tab

00:09:30.230 --> 00:09:32.550
<v Speaker 1>here and basically just open up the the

00:09:32.550 --> 00:09:35.605
<v Speaker 1>build that just ran. K? And this gives

00:09:35.605 --> 00:09:37.445
<v Speaker 1>me a a lot of details, and I'll

00:09:37.445 --> 00:09:38.085
<v Speaker 1>admit, there's

00:09:38.805 --> 00:09:40.805
<v Speaker 1>it almost feels like there's too much details,

00:09:40.805 --> 00:09:41.845
<v Speaker 1>and so we're still doing a lot of

00:09:41.845 --> 00:09:42.885
<v Speaker 1>massaging of

00:09:43.445 --> 00:09:44.965
<v Speaker 1>what's the right way to present some of

00:09:44.965 --> 00:09:46.405
<v Speaker 1>this so it's not too overwhelming.

00:09:47.490 --> 00:09:48.610
<v Speaker 1>But it does give you a lot of

00:09:48.610 --> 00:09:50.210
<v Speaker 1>good insights in, okay, where

00:09:50.690 --> 00:09:52.690
<v Speaker 1>even this this build that took six point

00:09:52.690 --> 00:09:54.529
<v Speaker 1>four seconds, where was the build?

00:09:54.770 --> 00:09:57.089
<v Speaker 1>Where where was the time spent? Was it

00:09:57.089 --> 00:09:59.570
<v Speaker 1>spent on the the actual build or pulling

00:09:59.570 --> 00:10:01.845
<v Speaker 1>the layers? And, you know, the so there's

00:10:01.845 --> 00:10:03.525
<v Speaker 1>the the context transfer we were talking about

00:10:03.525 --> 00:10:04.085
<v Speaker 1>earlier

00:10:05.365 --> 00:10:06.725
<v Speaker 1>and whatnot. So it gives me a lot

00:10:06.725 --> 00:10:09.125
<v Speaker 1>of good details here, cache usage as well

00:10:09.125 --> 00:10:11.285
<v Speaker 1>too, how much cache is

00:10:11.605 --> 00:10:13.205
<v Speaker 1>being used. So there's there's quite a bit

00:10:13.205 --> 00:10:14.565
<v Speaker 1>here on the the initial screen.

00:10:15.370 --> 00:10:17.370
<v Speaker 1>It does tell me, hey. There here's the

00:10:17.370 --> 00:10:19.290
<v Speaker 1>dependencies. And what what's cool about this

00:10:19.850 --> 00:10:20.570
<v Speaker 1>is,

00:10:20.889 --> 00:10:23.129
<v Speaker 1>you know, if I jump back to the

00:10:23.129 --> 00:10:25.209
<v Speaker 1>the Docker file that we actually used here

00:10:25.610 --> 00:10:26.810
<v Speaker 1>let me make this a little bit smaller

00:10:26.810 --> 00:10:29.345
<v Speaker 1>here. I'm doing a multistage build or I'm

00:10:29.345 --> 00:10:31.584
<v Speaker 1>doing from node, but my final engine is

00:10:31.584 --> 00:10:32.464
<v Speaker 1>NGINX,

00:10:32.704 --> 00:10:33.745
<v Speaker 1>yet in my

00:10:34.144 --> 00:10:36.865
<v Speaker 1>build output here, it it understands that this

00:10:36.865 --> 00:10:38.065
<v Speaker 1>was a multistage

00:10:38.065 --> 00:10:40.944
<v Speaker 1>image, and, hey, you actually had multiple images

00:10:40.944 --> 00:10:42.570
<v Speaker 1>part of this. So I can kinda see

00:10:42.570 --> 00:10:44.329
<v Speaker 1>what were all the different images, the base

00:10:44.329 --> 00:10:45.529
<v Speaker 1>images that were used

00:10:45.850 --> 00:10:47.290
<v Speaker 1>in order for me to to do my

00:10:47.290 --> 00:10:48.089
<v Speaker 1>build here.

00:10:49.209 --> 00:10:50.250
<v Speaker 1>And if I had

00:10:51.370 --> 00:10:54.410
<v Speaker 1>additional provenance or SBOM attachments, etcetera, I can

00:10:54.410 --> 00:10:55.690
<v Speaker 1>see all that down here as well too.

00:10:55.845 --> 00:10:58.165
<v Speaker 1>There's even some open telemetry traces as well

00:10:58.165 --> 00:11:00.165
<v Speaker 1>too. So there there's a lot that

00:11:01.125 --> 00:11:02.084
<v Speaker 1>comes in here.

00:11:03.045 --> 00:11:05.125
<v Speaker 1>Any questions on the screen? Otherwise, I'll jump

00:11:05.125 --> 00:11:06.404
<v Speaker 1>to some of the other ones.

00:11:06.964 --> 00:11:08.884
<v Speaker 0>No. This is great visibility so far. I'm

00:11:08.884 --> 00:11:11.300
<v Speaker 0>I'm looking at it. K. And so, yeah,

00:11:11.300 --> 00:11:13.300
<v Speaker 1>source basically just here's the Docker file that

00:11:13.300 --> 00:11:13.940
<v Speaker 1>was built.

00:11:15.060 --> 00:11:15.860
<v Speaker 1>Logs,

00:11:15.940 --> 00:11:17.540
<v Speaker 1>you know, I think we've all had builds

00:11:17.540 --> 00:11:18.260
<v Speaker 1>in which,

00:11:19.300 --> 00:11:21.460
<v Speaker 1>you know, the the build ran and something

00:11:21.460 --> 00:11:23.940
<v Speaker 1>failed, and oops, the error message got collapsed

00:11:23.940 --> 00:11:27.445
<v Speaker 1>or swallowed up somewhere else or or whatnot,

00:11:27.685 --> 00:11:30.005
<v Speaker 1>and going into the the log output here,

00:11:30.965 --> 00:11:32.565
<v Speaker 1>we could see the all the output that

00:11:32.565 --> 00:11:34.805
<v Speaker 1>occurred as part of the build. It's all

00:11:34.805 --> 00:11:36.405
<v Speaker 1>the console output, and and you get it

00:11:36.405 --> 00:11:38.245
<v Speaker 1>in its full entirety, and you can also

00:11:38.245 --> 00:11:40.280
<v Speaker 1>see again, here are the layers that were

00:11:40.280 --> 00:11:40.920
<v Speaker 1>cached.

00:11:41.400 --> 00:11:43.320
<v Speaker 1>This particular one took four seconds. Here was

00:11:43.320 --> 00:11:45.080
<v Speaker 1>all the the output here. Looks like we

00:11:45.080 --> 00:11:47.240
<v Speaker 1>got some anti character stuff showing up here

00:11:47.240 --> 00:11:48.040
<v Speaker 1>too, but

00:11:48.680 --> 00:11:50.040
<v Speaker 1>but again, I I can see the full

00:11:50.040 --> 00:11:50.680
<v Speaker 1>log output.

00:11:51.404 --> 00:11:52.524
<v Speaker 1>And then finally,

00:11:52.764 --> 00:11:54.365
<v Speaker 1>the the tree.

00:11:54.445 --> 00:11:56.605
<v Speaker 1>This gives me a little bit of details

00:11:56.605 --> 00:11:57.964
<v Speaker 1>of kind of this

00:11:58.764 --> 00:12:01.565
<v Speaker 1>particular project over time. So, you know, this

00:12:01.565 --> 00:12:03.084
<v Speaker 1>was build number six, and this was a

00:12:03.084 --> 00:12:06.029
<v Speaker 1>build that occurred, you know, ten minutes ago,

00:12:06.029 --> 00:12:07.870
<v Speaker 1>and then another build that occurred about fifteen

00:12:07.870 --> 00:12:09.709
<v Speaker 1>minutes before that. And so it's kinda just

00:12:09.709 --> 00:12:12.110
<v Speaker 1>grouping it based on the the project name

00:12:12.110 --> 00:12:12.750
<v Speaker 1>here,

00:12:12.990 --> 00:12:14.589
<v Speaker 1>but I can see, you know, how's cache

00:12:14.589 --> 00:12:16.110
<v Speaker 1>usage over time. So the first time I

00:12:16.110 --> 00:12:18.195
<v Speaker 1>built this, it took forty seconds, but now

00:12:18.195 --> 00:12:20.195
<v Speaker 1>all my subsequent builds are, you know, four

00:12:20.195 --> 00:12:21.875
<v Speaker 1>to six second range.

00:12:23.315 --> 00:12:25.235
<v Speaker 1>And then I can troubleshoot and debug in

00:12:25.315 --> 00:12:26.355
<v Speaker 1>into some of those

00:12:26.675 --> 00:12:27.875
<v Speaker 1>builds as well.

00:12:28.275 --> 00:12:29.635
<v Speaker 1>So pretty cool.

00:12:30.515 --> 00:12:32.115
<v Speaker 0>Yeah. This feels like one of those things

00:12:32.115 --> 00:12:32.675
<v Speaker 0>that

00:12:33.240 --> 00:12:35.480
<v Speaker 0>the more you use these builders, the longer

00:12:35.480 --> 00:12:36.920
<v Speaker 0>they live, the more they do the cash

00:12:36.920 --> 00:12:39.400
<v Speaker 0>optimizations that these charts are really gonna start

00:12:39.400 --> 00:12:40.920
<v Speaker 0>to show you things that,

00:12:41.560 --> 00:12:42.120
<v Speaker 0>like,

00:12:42.520 --> 00:12:44.920
<v Speaker 0>that performance is gonna be undeniable after Yeah.

00:12:44.920 --> 00:12:47.880
<v Speaker 0>Four weeks, five weeks, especially as software's accurate.

00:12:48.635 --> 00:12:50.635
<v Speaker 0>Right? It's not like we're doing major rewrites,

00:12:50.635 --> 00:12:51.355
<v Speaker 0>I hope,

00:12:51.915 --> 00:12:53.115
<v Speaker 0>every We're

00:12:53.115 --> 00:12:55.595
<v Speaker 0>we're changing, adding a little bit of debugging,

00:12:55.595 --> 00:12:57.035
<v Speaker 0>adding a trace, adding

00:12:57.595 --> 00:12:59.835
<v Speaker 0>whatever, a new environment variable and

00:12:59.995 --> 00:13:00.795
<v Speaker 0>seeing

00:13:00.955 --> 00:13:03.355
<v Speaker 0>that progression of the cache being used over

00:13:03.355 --> 00:13:04.235
<v Speaker 0>long periods of time.

00:13:04.850 --> 00:13:07.570
<v Speaker 0>Mhmm. Yeah. That's gonna be super useful. Instead

00:13:07.570 --> 00:13:09.490
<v Speaker 0>of like what I do right now, I

00:13:09.490 --> 00:13:11.010
<v Speaker 0>am a sucker. I don't know if I'm

00:13:11.010 --> 00:13:12.610
<v Speaker 0>a sucker, but I

00:13:13.010 --> 00:13:14.290
<v Speaker 0>always just delete

00:13:14.610 --> 00:13:17.170
<v Speaker 0>every Docker image I've got every week, every

00:13:17.170 --> 00:13:19.090
<v Speaker 0>other week or whatever. I I clean things

00:13:19.090 --> 00:13:20.445
<v Speaker 0>up, I tidy up, I get rid of

00:13:20.445 --> 00:13:22.765
<v Speaker 0>caches and, you know, pushing all that to

00:13:22.765 --> 00:13:23.885
<v Speaker 0>the cloud where I don't even need to

00:13:23.885 --> 00:13:25.565
<v Speaker 0>worry about it anymore. And I'm still getting

00:13:25.565 --> 00:13:27.885
<v Speaker 0>that shared cache over long periods of time.

00:13:27.965 --> 00:13:30.685
<v Speaker 0>And again, especially with a team

00:13:30.925 --> 00:13:33.005
<v Speaker 0>that are able to reuse these caches. Like,

00:13:33.005 --> 00:13:35.005
<v Speaker 0>why should 10 developers all do the same

00:13:35.005 --> 00:13:37.329
<v Speaker 0>compute every single morning when it's just not

00:13:37.329 --> 00:13:39.569
<v Speaker 0>that necessary? I mean, I'm already sold. I

00:13:39.569 --> 00:13:41.810
<v Speaker 0>see the value of this kind of setup,

00:13:41.810 --> 00:13:43.889
<v Speaker 0>which is pretty nice. Yeah. And and so

00:13:43.889 --> 00:13:45.649
<v Speaker 1>to to even build on since you were

00:13:45.649 --> 00:13:47.889
<v Speaker 1>talking about the the team collaboration usage. Alright.

00:13:47.889 --> 00:13:48.690
<v Speaker 1>So let's

00:13:48.930 --> 00:13:50.370
<v Speaker 1>let's go back to my

00:13:50.985 --> 00:13:52.904
<v Speaker 1>my Docker file here, and let's

00:13:53.144 --> 00:13:55.464
<v Speaker 1>let's break it here. Okay? Let's say I

00:13:55.464 --> 00:13:56.505
<v Speaker 1>spelled public

00:13:56.985 --> 00:13:58.985
<v Speaker 1>with two c's accidentally. Okay?

00:13:59.305 --> 00:14:01.545
<v Speaker 1>And and now when I build this, okay,

00:14:01.545 --> 00:14:04.105
<v Speaker 1>obviously, is gonna break my build. Okay?

00:14:04.425 --> 00:14:06.505
<v Speaker 1>And when I when I do this build,

00:14:07.040 --> 00:14:09.280
<v Speaker 1>k, I I get my error message here,

00:14:09.520 --> 00:14:09.920
<v Speaker 1>and I

00:14:10.880 --> 00:14:12.560
<v Speaker 1>what I can do is if we jump

00:14:12.560 --> 00:14:14.480
<v Speaker 1>back to Docker Desktop, first off, I'm still

00:14:14.480 --> 00:14:16.400
<v Speaker 1>in the the build output from the previous

00:14:16.400 --> 00:14:17.680
<v Speaker 1>one, and it's already telling me, hey, there

00:14:17.680 --> 00:14:19.360
<v Speaker 1>was a failed build that that occurred

00:14:19.600 --> 00:14:20.240
<v Speaker 1>that's now,

00:14:20.825 --> 00:14:22.745
<v Speaker 1>I guess, kind of future in the history

00:14:22.745 --> 00:14:24.425
<v Speaker 1>of from the build that I was initially

00:14:24.425 --> 00:14:25.145
<v Speaker 1>looking at.

00:14:26.185 --> 00:14:27.705
<v Speaker 1>But I can see the the failed output

00:14:27.705 --> 00:14:30.345
<v Speaker 1>here. And while I know all these were

00:14:30.345 --> 00:14:31.385
<v Speaker 1>for myself,

00:14:31.465 --> 00:14:33.145
<v Speaker 1>but if what what's cool here is that

00:14:33.145 --> 00:14:34.985
<v Speaker 1>the build history is the build history for

00:14:34.985 --> 00:14:35.865
<v Speaker 1>that builder,

00:14:36.800 --> 00:14:38.560
<v Speaker 1>not just for myself.

00:14:38.639 --> 00:14:40.720
<v Speaker 1>And so if any of my colleagues

00:14:41.360 --> 00:14:43.839
<v Speaker 1>built this and created it, you know, during

00:14:43.839 --> 00:14:45.440
<v Speaker 1>this build, they ran into failure,

00:14:45.920 --> 00:14:47.519
<v Speaker 1>they could say, hey. I'm stuck with this.

00:14:47.519 --> 00:14:49.199
<v Speaker 1>Hey, Michael. Can you help me out here?

00:14:49.199 --> 00:14:50.800
<v Speaker 1>And I can look into the log output

00:14:50.800 --> 00:14:51.519
<v Speaker 1>and say, hey.

00:14:52.275 --> 00:14:54.355
<v Speaker 1>Here's where you here's where it's messed up,

00:14:54.435 --> 00:14:56.435
<v Speaker 1>and I can help walk them through. So

00:14:56.435 --> 00:14:59.635
<v Speaker 1>it's a collaborative debugging experience as well in

00:14:59.635 --> 00:15:02.115
<v Speaker 1>which, again, any team member, because it's a

00:15:02.115 --> 00:15:04.515
<v Speaker 1>shared runner, all these outputs, all this this

00:15:04.515 --> 00:15:06.769
<v Speaker 1>log, all all this stuff here is is

00:15:06.769 --> 00:15:08.529
<v Speaker 1>tied to the builder, and, again, I can

00:15:08.529 --> 00:15:10.850
<v Speaker 1>help troubleshoot and debug, which is really cool.

00:15:10.850 --> 00:15:12.290
<v Speaker 1>Actually, I'll I'll show

00:15:12.850 --> 00:15:14.209
<v Speaker 1>if I go to active builds, don't have

00:15:14.209 --> 00:15:15.730
<v Speaker 1>an active build, I'll just jump back over

00:15:15.730 --> 00:15:16.050
<v Speaker 1>to the

00:15:17.730 --> 00:15:20.045
<v Speaker 1>I won't switch the screens here, but I'm

00:15:20.045 --> 00:15:22.764
<v Speaker 1>gonna add more question marks to our React

00:15:22.764 --> 00:15:24.764
<v Speaker 1>component. And now if I kick off a

00:15:24.764 --> 00:15:25.325
<v Speaker 1>build,

00:15:25.644 --> 00:15:27.644
<v Speaker 1>which I just press enter here, we can

00:15:27.644 --> 00:15:29.805
<v Speaker 1>see that it shows me that there's the

00:15:29.805 --> 00:15:31.964
<v Speaker 1>the active build running right now. So I

00:15:31.964 --> 00:15:34.045
<v Speaker 1>can see kinda live here at all the

00:15:34.045 --> 00:15:36.220
<v Speaker 1>build builds that are running on this

00:15:37.580 --> 00:15:39.740
<v Speaker 1>in this particular environment, and then I can

00:15:39.740 --> 00:15:41.340
<v Speaker 1>see, yep, I I fixed the build,

00:15:41.820 --> 00:15:42.300
<v Speaker 1>and

00:15:43.100 --> 00:15:45.100
<v Speaker 1>there it is. So, again, it's trying to

00:15:45.100 --> 00:15:47.820
<v Speaker 1>help me have visibility across my entire team

00:15:47.820 --> 00:15:50.325
<v Speaker 1>with the shared runner, what's working, what's failed,

00:15:50.325 --> 00:15:52.245
<v Speaker 1>and and help troubleshoot. Because one of the

00:15:52.245 --> 00:15:53.445
<v Speaker 1>things that we see quite often is that

00:15:53.445 --> 00:15:55.925
<v Speaker 1>they're on teams, there are the experts,

00:15:56.485 --> 00:15:57.525
<v Speaker 1>and then there's

00:15:58.565 --> 00:16:00.485
<v Speaker 1>honestly, to to be completely honest, there's those

00:16:00.485 --> 00:16:03.080
<v Speaker 1>that don't care a squat for containers. They're

00:16:03.080 --> 00:16:05.080
<v Speaker 1>just like, just spin up the containerized environment,

00:16:05.080 --> 00:16:06.600
<v Speaker 1>get it out of my way, and let

00:16:06.600 --> 00:16:08.360
<v Speaker 1>me just focus on my code. And so

00:16:08.360 --> 00:16:10.600
<v Speaker 1>if something doesn't work right, this gives them

00:16:10.600 --> 00:16:12.840
<v Speaker 1>the opportunity to say, hey, you know, Docker

00:16:12.840 --> 00:16:14.680
<v Speaker 1>expert on my team, can you help me

00:16:14.680 --> 00:16:17.045
<v Speaker 1>troubleshoot why my build's not working here? And

00:16:17.045 --> 00:16:18.884
<v Speaker 1>now there's a a mechanism for them to

00:16:18.884 --> 00:16:20.404
<v Speaker 1>to be able to do that together.

00:16:20.565 --> 00:16:21.764
<v Speaker 1>So Nice.

00:16:22.485 --> 00:16:25.685
<v Speaker 0>Great. We've got a question in the comments.

00:16:26.644 --> 00:16:28.964
<v Speaker 0>The question is, how does this differ from

00:16:28.964 --> 00:16:31.524
<v Speaker 0>export Docker host equals and pointing it to

00:16:31.524 --> 00:16:34.930
<v Speaker 0>some sort of SSH or remote Docker engine?

00:16:36.290 --> 00:16:38.610
<v Speaker 1>Yeah. Good question. So, I mean, in that

00:16:38.610 --> 00:16:40.850
<v Speaker 1>case, you you kinda have a shared runner,

00:16:40.850 --> 00:16:41.330
<v Speaker 1>okay,

00:16:41.650 --> 00:16:43.010
<v Speaker 1>in which you're

00:16:43.410 --> 00:16:45.650
<v Speaker 1>assuming you share that SSH

00:16:45.730 --> 00:16:47.810
<v Speaker 1>builder with with everybody on the team, you're,

00:16:48.955 --> 00:16:50.155
<v Speaker 1>you know, you've got a shared cache. So

00:16:50.155 --> 00:16:52.395
<v Speaker 1>you're getting some of that advantage there.

00:16:52.955 --> 00:16:55.515
<v Speaker 1>But the disadvantage is, well, now you have

00:16:55.515 --> 00:16:56.715
<v Speaker 1>to manage that machine.

00:16:56.955 --> 00:16:58.635
<v Speaker 1>You're having to keep track of, okay, what

00:16:58.635 --> 00:17:00.875
<v Speaker 1>versions of of the operating system is it

00:17:00.875 --> 00:17:03.250
<v Speaker 1>running? Is it using the latest version of

00:17:03.250 --> 00:17:05.089
<v Speaker 1>the the Docker Builder? And, you know, just

00:17:05.089 --> 00:17:07.250
<v Speaker 1>all the tooling. Like, that's that's infrastructure you

00:17:07.250 --> 00:17:08.530
<v Speaker 1>have to control, you have to manage, and

00:17:08.530 --> 00:17:11.010
<v Speaker 1>and everything, which, you know, for some teams,

00:17:11.010 --> 00:17:12.770
<v Speaker 1>that that's totally fine, and and you can

00:17:12.770 --> 00:17:14.849
<v Speaker 1>certainly do that. The other thing is then

00:17:14.849 --> 00:17:16.544
<v Speaker 1>to and I know we haven't done any

00:17:16.544 --> 00:17:18.864
<v Speaker 1>multi architecture demos yet, but

00:17:19.345 --> 00:17:21.345
<v Speaker 1>if I wanted to build natively for AMD

00:17:21.345 --> 00:17:23.264
<v Speaker 1>sixty four and ARM sixty four, now

00:17:24.065 --> 00:17:26.385
<v Speaker 1>you could technically still do that with SSH

00:17:26.385 --> 00:17:28.224
<v Speaker 1>builders, but it's it's a little bit more

00:17:28.224 --> 00:17:28.945
<v Speaker 1>complicated,

00:17:29.745 --> 00:17:31.489
<v Speaker 1>and you're having to, again,

00:17:31.730 --> 00:17:33.409
<v Speaker 1>how do I scale this across my team?

00:17:33.409 --> 00:17:35.009
<v Speaker 1>Here's a bunch of configuration that you're gonna

00:17:35.009 --> 00:17:36.609
<v Speaker 1>have to set up across all your team

00:17:36.610 --> 00:17:39.009
<v Speaker 1>and whatnot. So this just is a little

00:17:39.009 --> 00:17:40.769
<v Speaker 1>bit more of a turnkey solution. It's fully

00:17:40.769 --> 00:17:41.409
<v Speaker 1>managed,

00:17:41.570 --> 00:17:42.929
<v Speaker 1>fully ready to go, and you can just

00:17:42.929 --> 00:17:44.450
<v Speaker 1>get up and going, and, again, you you

00:17:44.450 --> 00:17:46.129
<v Speaker 1>don't have to worry about the infrastructure.

00:17:46.289 --> 00:17:47.774
<v Speaker 0>Can Can we dive into that a little

00:17:47.774 --> 00:17:49.135
<v Speaker 0>bit? Because I think that's a really compelling

00:17:49.135 --> 00:17:49.854
<v Speaker 0>use case.

00:17:50.095 --> 00:17:51.855
<v Speaker 0>You know, so far what we've done is

00:17:51.855 --> 00:17:53.054
<v Speaker 0>you set your Docker

00:17:53.455 --> 00:17:56.095
<v Speaker 0>default builder to be a remote builder, which

00:17:56.095 --> 00:17:58.255
<v Speaker 0>I'm assuming is a single architecture machine. Right?

00:17:58.255 --> 00:18:01.549
<v Speaker 0>It's not running two CPUs and two kernels.

00:18:01.950 --> 00:18:04.110
<v Speaker 0>So if I want to do a multi

00:18:04.110 --> 00:18:06.750
<v Speaker 0>architecture build and I've got my default builder

00:18:06.750 --> 00:18:09.549
<v Speaker 0>set to an AMD sixty four somewhere,

00:18:09.789 --> 00:18:11.630
<v Speaker 0>what is actually what's happening for the ARM?

00:18:11.630 --> 00:18:12.750
<v Speaker 0>How does it delegate that?

00:18:13.485 --> 00:18:15.165
<v Speaker 1>Yeah. So let let's actually

00:18:15.805 --> 00:18:17.245
<v Speaker 1>let's give it a shot here. So I'll

00:18:17.245 --> 00:18:18.525
<v Speaker 1>just jump back to Versus Code. We'll use

00:18:18.525 --> 00:18:20.525
<v Speaker 1>the terminal here. Alright. So let's let's go

00:18:20.525 --> 00:18:22.365
<v Speaker 1>back to the the default

00:18:23.165 --> 00:18:26.125
<v Speaker 1>builder here. K? And if I do a

00:18:26.125 --> 00:18:29.710
<v Speaker 1>build x build, and let's specify multiple platforms

00:18:29.710 --> 00:18:31.470
<v Speaker 1>here, Linux AMD

00:18:31.550 --> 00:18:34.429
<v Speaker 1>sixty four, Linux ARM 64,

00:18:34.750 --> 00:18:37.710
<v Speaker 1>I'll just tag this sample React app. K.

00:18:37.710 --> 00:18:39.070
<v Speaker 1>Now when I do this right now,

00:18:40.165 --> 00:18:42.965
<v Speaker 1>it's actually gonna fail at first. K? And

00:18:42.965 --> 00:18:45.605
<v Speaker 1>this is actually something we're we're doing internally

00:18:45.605 --> 00:18:46.325
<v Speaker 1>to

00:18:49.765 --> 00:18:52.485
<v Speaker 1>without getting too much under the hood, the

00:18:52.725 --> 00:18:54.805
<v Speaker 1>image store that Docker Desktop uses

00:18:55.940 --> 00:18:57.299
<v Speaker 1>predates containerd,

00:18:57.540 --> 00:19:00.980
<v Speaker 1>and predates multi architecture and everything else. And

00:19:00.980 --> 00:19:02.980
<v Speaker 1>so it doesn't actually have support to be

00:19:02.980 --> 00:19:05.220
<v Speaker 1>able to store multiple architectures of the same

00:19:05.220 --> 00:19:06.899
<v Speaker 1>image as of today.

00:19:07.140 --> 00:19:08.340
<v Speaker 1>But there's been a lot of work, and

00:19:08.340 --> 00:19:09.700
<v Speaker 1>you've probably seen this show up in the

00:19:09.700 --> 00:19:10.900
<v Speaker 1>settings to be able to use,

00:19:11.885 --> 00:19:13.965
<v Speaker 1>for example, if we jump over there, to

00:19:13.965 --> 00:19:16.524
<v Speaker 1>use containerd for pulling and storing of images.

00:19:16.524 --> 00:19:17.804
<v Speaker 1>Like, this is work to be able to

00:19:17.804 --> 00:19:19.804
<v Speaker 1>do that, but as you can imagine, there's

00:19:19.804 --> 00:19:22.044
<v Speaker 1>a lot of plumbing in Docker Desktop that

00:19:22.044 --> 00:19:23.804
<v Speaker 1>has to get replaced in order to use

00:19:23.804 --> 00:19:25.085
<v Speaker 1>this tooling here.

00:19:25.770 --> 00:19:28.250
<v Speaker 1>And so once that's in place, then, yes,

00:19:28.250 --> 00:19:31.050
<v Speaker 1>this will work as you expect. K? But

00:19:31.050 --> 00:19:32.410
<v Speaker 0>with emulation. Right?

00:19:32.810 --> 00:19:34.410
<v Speaker 1>What? I'm sorry. What was that? But it

00:19:34.410 --> 00:19:36.330
<v Speaker 0>builds it with emulation when it's using the

00:19:36.330 --> 00:19:38.490
<v Speaker 0>container store. So so, yeah, what what I

00:19:38.490 --> 00:19:40.205
<v Speaker 1>have to do is, first, I have to

00:19:40.205 --> 00:19:42.285
<v Speaker 1>create basically a new builder.

00:19:42.445 --> 00:19:43.085
<v Speaker 1>K?

00:19:43.325 --> 00:19:45.485
<v Speaker 1>And what this is gonna do is it

00:19:45.485 --> 00:19:47.885
<v Speaker 1>basically creates a container engine that that BuildKit's

00:19:47.885 --> 00:19:48.765
<v Speaker 1>gonna run-in.

00:19:49.005 --> 00:19:49.565
<v Speaker 1>And

00:19:50.605 --> 00:19:53.245
<v Speaker 1>let's just say, let's use that, Nostalgic

00:19:53.565 --> 00:19:54.045
<v Speaker 1>Einstein,

00:19:56.020 --> 00:19:58.020
<v Speaker 1>which is such a fun name, which actually

00:19:58.180 --> 00:20:00.100
<v Speaker 1>maybe let's take a quick little tangent, shall

00:20:00.100 --> 00:20:00.500
<v Speaker 1>we?

00:20:01.300 --> 00:20:03.460
<v Speaker 1>Just a fun trivia fact here.

00:20:06.340 --> 00:20:08.420
<v Speaker 1>For folks that that don't know, all those

00:20:08.420 --> 00:20:09.060
<v Speaker 1>names

00:20:09.544 --> 00:20:10.504
<v Speaker 1>come from

00:20:11.145 --> 00:20:13.705
<v Speaker 1>here's the go code, the name generator.

00:20:14.025 --> 00:20:16.184
<v Speaker 1>And there's a you know, it takes a

00:20:16.184 --> 00:20:17.624
<v Speaker 1>random adjective

00:20:17.945 --> 00:20:18.984
<v Speaker 1>from the left

00:20:19.304 --> 00:20:21.705
<v Speaker 1>and then a a random scientist

00:20:21.705 --> 00:20:22.504
<v Speaker 1>or

00:20:22.904 --> 00:20:26.090
<v Speaker 1>notable scientists or hackers. There's a specifically call

00:20:26.250 --> 00:20:28.170
<v Speaker 1>a specific call out, please, for any amazing

00:20:28.170 --> 00:20:29.690
<v Speaker 1>man you add to the list, consider adding

00:20:29.690 --> 00:20:31.770
<v Speaker 1>equally amazing woman to it and vice versa.

00:20:31.850 --> 00:20:33.130
<v Speaker 1>And there's lots of information about it. So

00:20:33.130 --> 00:20:34.730
<v Speaker 1>if you're kinda like, wait. Who is this

00:20:34.730 --> 00:20:36.250
<v Speaker 1>random name that just showed up here?

00:20:36.810 --> 00:20:38.445
<v Speaker 1>Here's where you can find out. But the

00:20:38.445 --> 00:20:40.525
<v Speaker 1>fun trivia fact, k, if we go down

00:20:40.525 --> 00:20:41.965
<v Speaker 1>to the code at the bottom here

00:20:42.525 --> 00:20:44.445
<v Speaker 1>where it actually generates the names,

00:20:45.245 --> 00:20:47.725
<v Speaker 1>get random name, it gets the random left,

00:20:47.725 --> 00:20:49.085
<v Speaker 1>gets the random right, and if the final

00:20:49.085 --> 00:20:50.525
<v Speaker 1>name is boring Wozniak,

00:20:50.610 --> 00:20:52.929
<v Speaker 1>Steve Wozniak is not boring, go back and

00:20:52.929 --> 00:20:54.129
<v Speaker 1>get a new name. So

00:20:54.530 --> 00:20:56.130
<v Speaker 1>there's your random trivia fact for the day.

00:20:56.130 --> 00:20:57.809
<v Speaker 0>The only valid use of go to I

00:20:57.809 --> 00:21:00.610
<v Speaker 0>think I've ever seen. So Yeah. Exactly.

00:21:01.809 --> 00:21:04.130
<v Speaker 0>Alright. So I once got an angry, and

00:21:04.130 --> 00:21:05.410
<v Speaker 0>I that was the highlight for me.

00:21:07.205 --> 00:21:10.085
<v Speaker 1>Because it's totally true. Yeah. Exactly. So

00:21:10.725 --> 00:21:12.405
<v Speaker 1>anyways, now you know if if you're ever

00:21:12.405 --> 00:21:14.085
<v Speaker 1>in a, you know, Docker trivia, and it's

00:21:14.085 --> 00:21:15.525
<v Speaker 1>like, is never allowed to be boring? You

00:21:15.525 --> 00:21:17.044
<v Speaker 1>know it's Steve Wozniak. So

00:21:17.765 --> 00:21:19.850
<v Speaker 1>alright. So going back here, I so what

00:21:19.850 --> 00:21:21.770
<v Speaker 1>I've done is I've basically built a new

00:21:21.770 --> 00:21:22.650
<v Speaker 1>Buildx

00:21:22.730 --> 00:21:24.170
<v Speaker 1>engine that's gonna use,

00:21:24.810 --> 00:21:27.130
<v Speaker 1>basically, a container to do this build now,

00:21:27.930 --> 00:21:29.210
<v Speaker 1>and it then it's gonna use

00:21:29.930 --> 00:21:31.770
<v Speaker 1>inside of that, it has container d, and

00:21:31.770 --> 00:21:33.050
<v Speaker 1>it's gonna be used in the image store.

00:21:33.345 --> 00:21:36.625
<v Speaker 1>Now what's happening here is it's basically bootstrapping

00:21:36.625 --> 00:21:37.585
<v Speaker 1>this builder,

00:21:38.145 --> 00:21:39.264
<v Speaker 1>and then you'll see

00:21:40.465 --> 00:21:43.105
<v Speaker 1>all the different steps. I'll try to get

00:21:43.105 --> 00:21:44.385
<v Speaker 1>it so it doesn't scroll around too much.

00:21:45.529 --> 00:21:47.370
<v Speaker 1>But each of the the steps will have

00:21:47.529 --> 00:21:48.889
<v Speaker 1>okay. Is this the ARM sixty four or

00:21:48.889 --> 00:21:51.450
<v Speaker 1>AMD sixty four? Now since I'm on an

00:21:51.450 --> 00:21:52.809
<v Speaker 1>Apple Silicon machine,

00:21:55.289 --> 00:21:57.289
<v Speaker 1>downloading right now, so who knows what my

00:21:57.289 --> 00:21:58.730
<v Speaker 1>network connection looks like right now.

00:22:01.895 --> 00:22:04.695
<v Speaker 1>Yeah. You just started upload a download everything

00:22:05.255 --> 00:22:05.575
<v Speaker 1>here.

00:22:24.990 --> 00:22:25.869
<v Speaker 0>Alright.

00:22:26.429 --> 00:22:28.349
<v Speaker 0>It'll get there. Yep,

00:22:30.029 --> 00:22:30.750
<v Speaker 1>it's getting there.

00:22:32.475 --> 00:22:34.395
<v Speaker 1>Okay. So now we just discovered a new

00:22:34.395 --> 00:22:35.994
<v Speaker 1>reason for Docker Build Cloud.

00:22:36.554 --> 00:22:38.155
<v Speaker 1>Delegate all of your builds to the cloud

00:22:38.155 --> 00:22:39.755
<v Speaker 1>so you can do live streams without worrying

00:22:39.755 --> 00:22:40.715
<v Speaker 1>about your bandwidth.

00:22:44.155 --> 00:22:46.875
<v Speaker 0>It's it's it's an important concern. I'm with

00:22:46.875 --> 00:22:47.035
<v Speaker 0>you.

00:22:47.680 --> 00:22:49.360
<v Speaker 0>It it is.

00:22:50.320 --> 00:22:51.120
<v Speaker 1>Alright.

00:22:51.360 --> 00:22:52.240
<v Speaker 1>So

00:22:53.120 --> 00:22:56.160
<v Speaker 1>it's almost finishing downloading here. Oh, that sounds

00:22:56.160 --> 00:22:58.000
<v Speaker 0>weird. We're doomed now. That's it.

00:23:02.735 --> 00:23:04.335
<v Speaker 1>Russ just put in the comments. So it

00:23:04.335 --> 00:23:05.775
<v Speaker 1>was a perfect pause because I am on

00:23:05.775 --> 00:23:08.335
<v Speaker 1>Apple Silicon machine audio cuts out. Yeah.

00:23:11.775 --> 00:23:14.540
<v Speaker 1>Good call. Good call. Alright. So what's happening

00:23:14.540 --> 00:23:16.700
<v Speaker 1>here is you see that it's doing this

00:23:16.700 --> 00:23:17.820
<v Speaker 1>YARN install,

00:23:17.980 --> 00:23:19.740
<v Speaker 1>and it's doing it both for AMD sixty

00:23:19.740 --> 00:23:21.899
<v Speaker 1>four and ARM sixty four.

00:23:22.620 --> 00:23:23.340
<v Speaker 0>Yep.

00:23:24.700 --> 00:23:25.580
<v Speaker 1>And

00:23:26.545 --> 00:23:29.904
<v Speaker 1>since I'm on Apple Silicon, the ARM 64

00:23:29.985 --> 00:23:31.265
<v Speaker 1>will run natively,

00:23:31.425 --> 00:23:33.025
<v Speaker 1>and so you'll see that that step took

00:23:33.025 --> 00:23:34.465
<v Speaker 1>about twenty six seconds.

00:23:34.705 --> 00:23:37.185
<v Speaker 1>K? And, whoops, looks like I got a

00:23:37.185 --> 00:23:38.305
<v Speaker 1>error of some sort.

00:23:56.605 --> 00:23:59.164
<v Speaker 1>And but you'll see even just with this,

00:23:59.164 --> 00:23:59.724
<v Speaker 1>k,

00:24:00.524 --> 00:24:02.044
<v Speaker 1>the ARM 64,

00:24:02.044 --> 00:24:04.044
<v Speaker 1>it it finished in twenty six seconds to

00:24:04.044 --> 00:24:05.244
<v Speaker 1>download everything,

00:24:05.485 --> 00:24:08.605
<v Speaker 1>while the AMD sixty four variant was still

00:24:08.605 --> 00:24:12.100
<v Speaker 1>at forty six seconds and and failed. K?

00:24:12.179 --> 00:24:12.820
<v Speaker 1>So

00:24:13.380 --> 00:24:14.979
<v Speaker 1>and it would have taken I think,

00:24:15.940 --> 00:24:18.020
<v Speaker 1>at least in previous testing, it takes about

00:24:18.020 --> 00:24:19.460
<v Speaker 1>two to three minutes for it to to

00:24:19.460 --> 00:24:21.379
<v Speaker 1>do that yarn install while emulating,

00:24:21.780 --> 00:24:23.860
<v Speaker 1>and it it's just because it has to

00:24:23.860 --> 00:24:26.659
<v Speaker 1>emulate the AMD sixty four environment. I don't

00:24:26.659 --> 00:24:28.715
<v Speaker 1>have a AMD sixty four chip on my

00:24:28.715 --> 00:24:29.594
<v Speaker 1>machine here.

00:24:30.875 --> 00:24:32.474
<v Speaker 1>And so, yeah, it kinda stinks.

00:24:33.115 --> 00:24:35.115
<v Speaker 1>And I would say it's even more so

00:24:35.115 --> 00:24:37.195
<v Speaker 1>profound in, like, GitHub actions

00:24:37.514 --> 00:24:38.234
<v Speaker 1>where

00:24:38.715 --> 00:24:40.955
<v Speaker 1>I'm building my pipeline. In the in those

00:24:40.955 --> 00:24:41.274
<v Speaker 1>cases,

00:24:42.800 --> 00:24:45.679
<v Speaker 1>I'm most likely on AMD sixty four machine,

00:24:45.760 --> 00:24:47.440
<v Speaker 1>and then I'm having to emulate the ARM

00:24:47.440 --> 00:24:48.399
<v Speaker 1>side of things.

00:24:48.800 --> 00:24:49.440
<v Speaker 1>And

00:24:50.240 --> 00:24:51.760
<v Speaker 1>those builds can take a long time as

00:24:51.760 --> 00:24:52.159
<v Speaker 1>well.

00:24:52.800 --> 00:24:54.800
<v Speaker 0>Yeah. I've got an open source project written

00:24:54.800 --> 00:24:57.760
<v Speaker 0>in Rust called Contrail that we build for

00:24:58.215 --> 00:24:59.815
<v Speaker 0>a whole bunch of different

00:25:00.135 --> 00:25:01.095
<v Speaker 0>architectures.

00:25:01.095 --> 00:25:02.855
<v Speaker 0>And because it it can pretty much run

00:25:02.855 --> 00:25:05.015
<v Speaker 0>on anything and there's people doing weird para

00:25:05.015 --> 00:25:06.855
<v Speaker 0>PC stuff with it. But regardless,

00:25:07.095 --> 00:25:07.894
<v Speaker 0>the

00:25:08.455 --> 00:25:10.215
<v Speaker 0>just doing cross compilation

00:25:10.215 --> 00:25:12.934
<v Speaker 0>is is a very, slow process, particularly in

00:25:12.934 --> 00:25:14.429
<v Speaker 0>GitHub actions. So,

00:25:14.510 --> 00:25:16.909
<v Speaker 0>you know Yep. It it really is. Need

00:25:16.909 --> 00:25:18.669
<v Speaker 0>better tooling in this space.

00:25:19.870 --> 00:25:22.350
<v Speaker 0>Yeah. So And so And how how so

00:25:22.350 --> 00:25:23.710
<v Speaker 0>how do we do this with with Build

00:25:23.710 --> 00:25:24.270
<v Speaker 0>Cloud then?

00:25:26.044 --> 00:25:28.445
<v Speaker 1>Great question. So with Build Cloud, what's nice

00:25:28.445 --> 00:25:29.565
<v Speaker 1>about this is

00:25:30.044 --> 00:25:31.565
<v Speaker 1>here. Let me just do

00:25:31.885 --> 00:25:33.645
<v Speaker 1>Buildx LS, and I'll just show here all

00:25:33.645 --> 00:25:35.005
<v Speaker 1>the builders that I have on my machine

00:25:35.005 --> 00:25:36.924
<v Speaker 1>here. And what we'll see is that I've

00:25:36.924 --> 00:25:37.485
<v Speaker 1>got a builder.

00:25:38.010 --> 00:25:39.770
<v Speaker 1>K? And this is that that DevRel builder

00:25:39.770 --> 00:25:42.010
<v Speaker 1>that we had before, and it has already

00:25:42.010 --> 00:25:42.809
<v Speaker 1>configured.

00:25:42.890 --> 00:25:45.050
<v Speaker 1>Here's an ARM sixty four and then the

00:25:45.050 --> 00:25:46.490
<v Speaker 1>the AMD sixty four.

00:25:47.050 --> 00:25:49.130
<v Speaker 1>And so what's what's happening is, basically, there's

00:25:49.130 --> 00:25:50.890
<v Speaker 1>kinda two sub endpoints.

00:25:51.050 --> 00:25:52.090
<v Speaker 1>And so now if I

00:25:54.135 --> 00:25:56.775
<v Speaker 1>let's say alright. Let's use that builder, and

00:25:56.775 --> 00:25:58.215
<v Speaker 1>let's do that same build.

00:25:59.895 --> 00:26:00.534
<v Speaker 1>Oops.

00:26:03.335 --> 00:26:04.135
<v Speaker 1>Let's do push.

00:26:08.880 --> 00:26:11.440
<v Speaker 1>Yep. It's because I need to tag that

00:26:11.440 --> 00:26:13.200
<v Speaker 1>with my actual username here.

00:26:19.840 --> 00:26:21.680
<v Speaker 1>Oh, well, now a lot of it's cache,

00:26:23.445 --> 00:26:25.524
<v Speaker 1>But, again, it's it's gonna be using

00:26:26.485 --> 00:26:28.804
<v Speaker 1>the native node for AMD sixty four and

00:26:28.804 --> 00:26:30.565
<v Speaker 1>a native node for ARM 64, and so

00:26:30.565 --> 00:26:32.804
<v Speaker 1>there's no emulation that has to occur. It's

00:26:32.804 --> 00:26:34.724
<v Speaker 1>delegating the work to the right machine.

00:26:35.044 --> 00:26:36.725
<v Speaker 0>Yeah. I still think I appreciate that when

00:26:36.725 --> 00:26:38.730
<v Speaker 0>we created the builder earlier. I don't so

00:26:38.730 --> 00:26:40.890
<v Speaker 0>it's actually every time you create a Docker

00:26:40.890 --> 00:26:42.650
<v Speaker 0>build cloud builder,

00:26:42.810 --> 00:26:45.050
<v Speaker 0>it's creating a two node setup for AMD

00:26:45.050 --> 00:26:47.130
<v Speaker 0>sixty four and ARM 64. Is that right?

00:26:47.130 --> 00:26:48.330
<v Speaker 1>Correct. Yep. Okay.

00:26:49.304 --> 00:26:50.664
<v Speaker 1>Yeah. Okay. So, yeah, we saw that the

00:26:50.664 --> 00:26:53.065
<v Speaker 1>ARM 64 was cached, but the AMD sixty

00:26:53.065 --> 00:26:54.424
<v Speaker 1>four, since I I haven't done one of

00:26:54.424 --> 00:26:56.424
<v Speaker 1>those builds locally, okay, that took,

00:26:56.745 --> 00:26:59.544
<v Speaker 1>you know, about twelve seconds to do the

00:26:59.865 --> 00:27:00.825
<v Speaker 1>the whole build there.

00:27:03.150 --> 00:27:05.230
<v Speaker 1>And for both architectures,

00:27:05.630 --> 00:27:07.550
<v Speaker 1>including image pools and everything else, and and

00:27:07.550 --> 00:27:09.310
<v Speaker 1>pushing to to Docker Hub in thirty seven

00:27:09.310 --> 00:27:09.870
<v Speaker 1>seconds.

00:27:11.230 --> 00:27:12.830
<v Speaker 1>So, yeah, not too bad there.

00:27:13.390 --> 00:27:13.870
<v Speaker 0>I like it.

00:27:14.684 --> 00:27:17.164
<v Speaker 1>Yeah. So you you mentioned also

00:27:17.404 --> 00:27:19.404
<v Speaker 1>or we talked about GitHub actions for just

00:27:19.404 --> 00:27:21.725
<v Speaker 1>a second, so I can segue to that

00:27:21.725 --> 00:27:22.364
<v Speaker 1>for

00:27:22.845 --> 00:27:25.404
<v Speaker 1>and show for this particular project. I have

00:27:25.404 --> 00:27:26.524
<v Speaker 1>a GitHub action,

00:27:27.164 --> 00:27:27.404
<v Speaker 1>and

00:27:28.180 --> 00:27:29.940
<v Speaker 1>all I had to do is and and

00:27:29.940 --> 00:27:32.180
<v Speaker 1>this looks pretty consistent with what a lot

00:27:32.180 --> 00:27:33.460
<v Speaker 1>of folks will have for

00:27:33.780 --> 00:27:35.380
<v Speaker 1>a container image build

00:27:35.860 --> 00:27:37.860
<v Speaker 1>using the the Docker action. So, you know,

00:27:37.860 --> 00:27:39.299
<v Speaker 1>I log in to Docker Hub,

00:27:39.940 --> 00:27:41.654
<v Speaker 1>and then a lot of folks will have

00:27:41.654 --> 00:27:44.054
<v Speaker 1>this set up Buildx, especially if they're gonna

00:27:44.054 --> 00:27:46.215
<v Speaker 1>do multi architecture build. The only thing I

00:27:46.215 --> 00:27:48.294
<v Speaker 1>I had to swap out here, and this

00:27:48.294 --> 00:27:49.734
<v Speaker 1>was from a previous

00:27:49.735 --> 00:27:50.454
<v Speaker 1>demo,

00:27:50.695 --> 00:27:51.254
<v Speaker 1>but

00:27:51.495 --> 00:27:52.615
<v Speaker 1>I specified,

00:27:52.615 --> 00:27:54.215
<v Speaker 1>you know, the driver for Buildx is gonna

00:27:54.215 --> 00:27:56.375
<v Speaker 1>be cloud, and then here's the the endpoint.

00:27:56.830 --> 00:27:59.550
<v Speaker 1>Now in this particular case, I would have,

00:27:59.710 --> 00:28:01.870
<v Speaker 1>you know, Docker slash DevRel if I wanted

00:28:01.870 --> 00:28:03.070
<v Speaker 1>to use the same builder.

00:28:04.510 --> 00:28:06.270
<v Speaker 1>Thank you, Copilot, for giving me a suggestion.

00:28:06.270 --> 00:28:07.390
<v Speaker 1>That is not valid.

00:28:07.950 --> 00:28:09.710
<v Speaker 1>And and so now if I were to

00:28:09.710 --> 00:28:11.845
<v Speaker 1>build with, you know, commit this and push

00:28:11.845 --> 00:28:13.684
<v Speaker 1>it, my GitHub action would use the same

00:28:13.684 --> 00:28:15.684
<v Speaker 1>builder that we were just building with here

00:28:15.684 --> 00:28:17.925
<v Speaker 1>on on my local machine, which means my

00:28:17.925 --> 00:28:19.845
<v Speaker 1>CI pipeline gets all the same caches or

00:28:19.845 --> 00:28:21.525
<v Speaker 1>will populate caches, etcetera,

00:28:22.800 --> 00:28:24.400
<v Speaker 1>and leverage that same builder.

00:28:24.560 --> 00:28:26.720
<v Speaker 1>And then I can do, again, the the

00:28:26.720 --> 00:28:29.200
<v Speaker 1>native multi architecture build, and

00:28:30.080 --> 00:28:32.080
<v Speaker 1>it's gonna use those native nodes. So now

00:28:32.080 --> 00:28:34.320
<v Speaker 1>in my GitHub action, it's no longer going

00:28:34.320 --> 00:28:34.640
<v Speaker 1>to be,

00:28:36.725 --> 00:28:39.685
<v Speaker 1>you know, emulating those. And, actually, if I

00:28:39.685 --> 00:28:40.965
<v Speaker 1>jump over to the

00:28:41.445 --> 00:28:43.125
<v Speaker 1>browser here I know this was a little

00:28:43.125 --> 00:28:44.565
<v Speaker 1>while ago when I did the builds,

00:28:44.725 --> 00:28:47.925
<v Speaker 1>but this first commit was not using Docker

00:28:47.925 --> 00:28:48.485
<v Speaker 1>Build Cloud,

00:28:49.290 --> 00:28:50.890
<v Speaker 1>and so the build took about three minutes

00:28:50.890 --> 00:28:53.050
<v Speaker 1>because, again, it had to emulate everything on

00:28:53.050 --> 00:28:54.970
<v Speaker 1>the ARM side of things. While once I

00:28:54.970 --> 00:28:56.570
<v Speaker 1>used Build Cloud, it it dropped the build

00:28:56.570 --> 00:28:58.090
<v Speaker 1>to about twenty six seconds.

00:28:59.770 --> 00:29:01.770
<v Speaker 1>And, again, for just a little sample React

00:29:01.770 --> 00:29:03.450
<v Speaker 1>app, that's a pretty significant savings.

00:29:06.025 --> 00:29:07.625
<v Speaker 1>Now I know you've been, you know, talking

00:29:07.625 --> 00:29:09.225
<v Speaker 1>about Rust projects and whatnot, and so, yeah,

00:29:09.225 --> 00:29:11.465
<v Speaker 1>the more complex the project is, the more

00:29:11.465 --> 00:29:13.465
<v Speaker 1>you're gonna see the benefits that come out

00:29:13.465 --> 00:29:14.025
<v Speaker 1>with it. So

00:29:15.225 --> 00:29:17.065
<v Speaker 1>and it doesn't take much config. It's just

00:29:17.065 --> 00:29:19.225
<v Speaker 1>two lines of additional config I had to

00:29:19.225 --> 00:29:20.105
<v Speaker 1>provide. So

00:29:21.140 --> 00:29:23.220
<v Speaker 0>Alright. Well, I mean, I I don't think

00:29:23.220 --> 00:29:24.899
<v Speaker 0>there's any doubt in my mind that people

00:29:24.899 --> 00:29:26.260
<v Speaker 0>are watching this and going, I don't want

00:29:26.260 --> 00:29:28.019
<v Speaker 0>this. Like, I think this makes a lot

00:29:28.019 --> 00:29:30.500
<v Speaker 0>of sense to personal developers,

00:29:30.500 --> 00:29:31.380
<v Speaker 0>hobbyists,

00:29:31.380 --> 00:29:33.460
<v Speaker 0>as well as teams and enterprises. So

00:29:33.925 --> 00:29:35.285
<v Speaker 0>why don't you leave the bad news on

00:29:35.285 --> 00:29:36.725
<v Speaker 0>us? How much does it cost?

00:29:38.165 --> 00:29:40.965
<v Speaker 1>Yeah. There's always that question, So I'll jump

00:29:40.965 --> 00:29:42.485
<v Speaker 1>back to the product page, and and so

00:29:42.485 --> 00:29:43.684
<v Speaker 1>what we've got is

00:29:44.165 --> 00:29:46.965
<v Speaker 1>there's a a couple different tiers here. K?

00:29:47.285 --> 00:29:47.925
<v Speaker 1>And

00:29:48.440 --> 00:29:50.360
<v Speaker 1>so there's the personal, and then you can

00:29:50.360 --> 00:29:52.360
<v Speaker 1>actually see the the different builder sizes. So,

00:29:52.360 --> 00:29:54.520
<v Speaker 1>again, these aren't different sizes that you can

00:29:54.520 --> 00:29:56.840
<v Speaker 1>choose from. It's basically you're you're gonna get

00:29:56.840 --> 00:29:58.600
<v Speaker 1>the size for the the different tier that

00:29:58.600 --> 00:29:59.720
<v Speaker 1>that you've got right now.

00:30:01.320 --> 00:30:03.240
<v Speaker 1>And and so you'll see, okay, even for

00:30:03.240 --> 00:30:03.960
<v Speaker 1>personal, it's

00:30:04.735 --> 00:30:06.735
<v Speaker 1>eight core, 16 gig of RAM, and then

00:30:06.735 --> 00:30:08.095
<v Speaker 1>it changes once you get up to the

00:30:08.095 --> 00:30:08.654
<v Speaker 1>team.

00:30:09.615 --> 00:30:11.855
<v Speaker 1>Everybody gets the the native AMD and ARM

00:30:11.855 --> 00:30:12.575
<v Speaker 1>builders,

00:30:14.015 --> 00:30:15.695
<v Speaker 1>and and the way that billing works is

00:30:15.695 --> 00:30:17.559
<v Speaker 1>by minutes of usage.

00:30:17.559 --> 00:30:19.240
<v Speaker 1>Now the the the one caveat I'll mention

00:30:19.240 --> 00:30:21.320
<v Speaker 1>is when you're doing multi architecture builds, since

00:30:21.320 --> 00:30:23.559
<v Speaker 1>you're building on two nodes, even if you're

00:30:23.559 --> 00:30:26.279
<v Speaker 1>you're taking one minute, if it's multi architecture,

00:30:26.279 --> 00:30:28.600
<v Speaker 1>that's technically two minutes because you're using it

00:30:28.600 --> 00:30:30.840
<v Speaker 1>on two machines at at that point in

00:30:30.840 --> 00:30:32.845
<v Speaker 1>time, so just be aware of that.

00:30:33.165 --> 00:30:34.765
<v Speaker 1>And so you you get a certain number

00:30:34.765 --> 00:30:36.605
<v Speaker 1>of minutes. You can buy additional minutes,

00:30:37.565 --> 00:30:38.764
<v Speaker 1>and then there are

00:30:40.125 --> 00:30:42.605
<v Speaker 1>kind of throttles for the number of parallel

00:30:42.605 --> 00:30:43.965
<v Speaker 1>builds based on

00:30:45.910 --> 00:30:48.150
<v Speaker 1>the the tier that you have, and then

00:30:48.150 --> 00:30:49.990
<v Speaker 1>you can purchase additional

00:30:49.990 --> 00:30:51.750
<v Speaker 1>minutes as well too. So

00:30:54.310 --> 00:30:56.470
<v Speaker 1>and all of the pricing, everything is is

00:30:56.470 --> 00:30:57.190
<v Speaker 1>on the

00:30:57.830 --> 00:30:59.430
<v Speaker 1>let's see. Let's actually go up here.

00:31:00.135 --> 00:31:01.095
<v Speaker 1>Go to

00:31:02.695 --> 00:31:05.175
<v Speaker 1>my personal one here. So, yeah, as of

00:31:05.175 --> 00:31:07.015
<v Speaker 1>right now Now you can start turn free.

00:31:07.255 --> 00:31:09.735
<v Speaker 1>Yeah. So as of right now, we're we're

00:31:09.735 --> 00:31:11.175
<v Speaker 1>trying to encourage people to to try it

00:31:11.175 --> 00:31:11.975
<v Speaker 1>out. And so

00:31:12.500 --> 00:31:14.900
<v Speaker 1>so, yeah, the starter again, fifty minutes will

00:31:14.900 --> 00:31:15.860
<v Speaker 1>go really quickly.

00:31:16.980 --> 00:31:18.580
<v Speaker 1>And so, yeah, you can try it out

00:31:19.140 --> 00:31:19.940
<v Speaker 1>for free.

00:31:20.500 --> 00:31:21.860
<v Speaker 1>And then from there,

00:31:22.500 --> 00:31:23.300
<v Speaker 1>the team

00:31:23.460 --> 00:31:24.900
<v Speaker 1>the the build team,

00:31:25.785 --> 00:31:27.545
<v Speaker 1>Build Cloud team. Gosh. I can get words

00:31:27.545 --> 00:31:30.025
<v Speaker 1>right. It starts at $6 per user per

00:31:30.025 --> 00:31:31.785
<v Speaker 1>month, and then that gives you additional two

00:31:31.785 --> 00:31:34.025
<v Speaker 1>hundred minutes, and then you can buy reserve

00:31:34.025 --> 00:31:35.225
<v Speaker 1>minutes that then

00:31:35.785 --> 00:31:37.785
<v Speaker 1>let you kinda pull those minutes and whatnot.

00:31:37.785 --> 00:31:37.865
<v Speaker 1>So

00:31:39.350 --> 00:31:40.070
<v Speaker 0>Okay.

00:31:40.550 --> 00:31:42.790
<v Speaker 0>Alright. I'm gonna ask the hard question now.

00:31:43.990 --> 00:31:44.870
<v Speaker 1>Go for it.

00:31:45.670 --> 00:31:48.630
<v Speaker 0>Well, this pricing is per user per month.

00:31:48.630 --> 00:31:51.190
<v Speaker 0>Right? Now assume I'm on a starter plan,

00:31:51.190 --> 00:31:52.550
<v Speaker 0>which of course, I think everyone should just

00:31:52.550 --> 00:31:54.070
<v Speaker 0>go and try it because it's free. Right?

00:31:54.735 --> 00:31:56.735
<v Speaker 0>Yep. Does that just mean I get one

00:31:56.735 --> 00:31:58.415
<v Speaker 0>builder, or can I have 10 builders as

00:31:58.415 --> 00:31:59.934
<v Speaker 0>long as I don't have over fifty minutes?

00:32:00.095 --> 00:32:02.815
<v Speaker 0>I just So, yeah, we we do limit

00:32:02.815 --> 00:32:03.534
<v Speaker 1>right now

00:32:04.415 --> 00:32:06.495
<v Speaker 1>the the the free starter ones. You you

00:32:06.495 --> 00:32:08.495
<v Speaker 1>get one builder. Oh, okay. We we thought

00:32:08.495 --> 00:32:11.000
<v Speaker 1>about that loophole ourselves too. Yep. You you

00:32:11.000 --> 00:32:13.320
<v Speaker 1>do just get one builder. And, actually, one

00:32:13.320 --> 00:32:15.079
<v Speaker 0>of the things I'll mention too is the

00:32:15.159 --> 00:32:17.399
<v Speaker 1>$6 per user per month. Okay? So if

00:32:17.399 --> 00:32:19.559
<v Speaker 1>I've got five users, yeah, okay, I'm I'm

00:32:19.559 --> 00:32:22.120
<v Speaker 1>paying $30 a month, but each user gets

00:32:22.120 --> 00:32:24.679
<v Speaker 1>two hundred build minutes. So I'm I'm actually

00:32:24.679 --> 00:32:25.240
<v Speaker 1>getting

00:32:25.595 --> 00:32:28.075
<v Speaker 1>a thousand minutes at that point. So you're

00:32:28.075 --> 00:32:28.635
<v Speaker 1>getting

00:32:29.275 --> 00:32:32.315
<v Speaker 1>200 build minutes per user as well,

00:32:34.875 --> 00:32:36.154
<v Speaker 1>which I know isn't

00:32:36.475 --> 00:32:39.115
<v Speaker 1>quite crystal clear looking at this, but that's

00:32:39.115 --> 00:32:39.835
<v Speaker 1>how that's working.

00:32:41.330 --> 00:32:41.890
<v Speaker 0>Okay.

00:32:42.210 --> 00:32:43.810
<v Speaker 0>Yeah. I think it's one of these things

00:32:43.810 --> 00:32:45.170
<v Speaker 0>people can put their toe in the water,

00:32:45.170 --> 00:32:46.130
<v Speaker 0>see if they get you a set of

00:32:46.130 --> 00:32:48.050
<v Speaker 0>it, and then Yep. You know, $6 per

00:32:48.050 --> 00:32:48.610
<v Speaker 0>user.

00:32:48.930 --> 00:32:50.929
<v Speaker 0>When you look at those charts over time

00:32:51.490 --> 00:32:53.170
<v Speaker 0>and I'm not I'm not in sales, but

00:32:53.170 --> 00:32:54.925
<v Speaker 0>I just see the the value here. But

00:32:54.925 --> 00:32:56.685
<v Speaker 0>when you look at those charts, that that

00:32:56.685 --> 00:32:58.605
<v Speaker 0>seems like a no brainer for me. $66

00:32:58.605 --> 00:33:00.125
<v Speaker 0>per user per month for all of those

00:33:00.125 --> 00:33:01.805
<v Speaker 0>cool things that you're getting. So, yeah, I

00:33:01.805 --> 00:33:03.885
<v Speaker 0>hope people And I had I had to

00:33:03.885 --> 00:33:05.645
<v Speaker 1>find it, and so I I've got this

00:33:05.645 --> 00:33:08.009
<v Speaker 1>for you just just to to have it

00:33:08.009 --> 00:33:10.169
<v Speaker 1>since we talked about it earlier. So yeah.

00:33:10.889 --> 00:33:12.409
<v Speaker 0>There's there really is an s k c

00:33:12.409 --> 00:33:14.330
<v Speaker 0>d forever, but I I particularly love this

00:33:14.330 --> 00:33:16.889
<v Speaker 0>one just because throughout my my entire career,

00:33:16.889 --> 00:33:19.049
<v Speaker 0>it's always been applicable to bar wanting to

00:33:19.049 --> 00:33:20.490
<v Speaker 0>build and container energies,

00:33:20.775 --> 00:33:23.015
<v Speaker 0>doing get ups, compelling.

00:33:23.335 --> 00:33:25.255
<v Speaker 0>It's just Yep. Always there back at my

00:33:25.255 --> 00:33:26.934
<v Speaker 0>mind. It's so true.

00:33:27.655 --> 00:33:28.455
<v Speaker 0>Awesome.

00:33:28.775 --> 00:33:31.175
<v Speaker 0>Alright. Well, let's give people in the audience

00:33:31.175 --> 00:33:32.935
<v Speaker 0>a few minutes. If you have any questions,

00:33:32.935 --> 00:33:35.095
<v Speaker 0>please feel free to drop them into the

00:33:34.440 --> 00:33:35.799
<v Speaker 0>chat. I see that we have another one

00:33:35.799 --> 00:33:37.000
<v Speaker 0>from Russell, so I'll pull that up in

00:33:37.000 --> 00:33:38.759
<v Speaker 0>a second. I'm gonna move us back over

00:33:38.759 --> 00:33:40.199
<v Speaker 0>to big facey mode.

00:33:41.000 --> 00:33:42.600
<v Speaker 0>And before we get to any questions as

00:33:42.600 --> 00:33:44.200
<v Speaker 0>the as the trickle in, as the trickle

00:33:44.200 --> 00:33:46.919
<v Speaker 0>in, maybe you can tell us some super

00:33:46.919 --> 00:33:49.000
<v Speaker 0>top secret things that's happening in Docker. What

00:33:49.000 --> 00:33:50.200
<v Speaker 0>are we gonna see over the next three,

00:33:50.495 --> 00:33:51.375
<v Speaker 0>or nine months?

00:33:52.255 --> 00:33:54.335
<v Speaker 1>Yeah. Good question. So,

00:33:54.655 --> 00:33:56.655
<v Speaker 1>you know, I I think as

00:33:56.895 --> 00:33:59.535
<v Speaker 1>we started off this this conversation with, you

00:33:59.535 --> 00:34:02.255
<v Speaker 1>know, looking for opportunities to continue and just

00:34:02.335 --> 00:34:04.815
<v Speaker 1>invest and make things easier and continue to,

00:34:05.070 --> 00:34:07.230
<v Speaker 1>I mean, add new products and and new

00:34:07.230 --> 00:34:09.310
<v Speaker 1>capabilities to the the things that we have.

00:34:09.389 --> 00:34:11.869
<v Speaker 1>You know, we we've we started off, you

00:34:11.869 --> 00:34:13.469
<v Speaker 1>know, talked a little bit about Scout, and

00:34:13.469 --> 00:34:14.989
<v Speaker 1>so I expect to see more in that

00:34:14.989 --> 00:34:15.790
<v Speaker 1>space and,

00:34:16.750 --> 00:34:18.670
<v Speaker 1>you know, secure software supply chain. I know

00:34:18.670 --> 00:34:20.984
<v Speaker 1>there's we've thrown out a couple teasers around

00:34:20.984 --> 00:34:23.304
<v Speaker 1>container image signing and verification, so, you know,

00:34:23.304 --> 00:34:25.145
<v Speaker 1>be on the lookout for for things in

00:34:25.145 --> 00:34:25.945
<v Speaker 1>that space.

00:34:26.665 --> 00:34:28.665
<v Speaker 1>You know, in the local development, we've we've

00:34:28.665 --> 00:34:30.585
<v Speaker 1>talked a little bit about Docker debug

00:34:30.665 --> 00:34:33.145
<v Speaker 1>and the ability to kinda attach debuggers and

00:34:33.145 --> 00:34:35.719
<v Speaker 1>bring your own tools to images that don't

00:34:35.719 --> 00:34:38.920
<v Speaker 1>have tools already installed in. And and I

00:34:38.920 --> 00:34:40.440
<v Speaker 1>actually am a really big fan of that

00:34:40.440 --> 00:34:42.280
<v Speaker 1>because that means my final production images can

00:34:42.280 --> 00:34:44.679
<v Speaker 1>be really small, really lightweight

00:34:44.760 --> 00:34:46.280
<v Speaker 1>without having to package

00:34:46.520 --> 00:34:48.199
<v Speaker 1>all my debug tooling into it, and I

00:34:48.199 --> 00:34:51.295
<v Speaker 1>can bring it in along. So expect more

00:34:51.295 --> 00:34:52.175
<v Speaker 1>in that space,

00:34:52.655 --> 00:34:54.415
<v Speaker 1>how we can continue to help debug and

00:34:54.415 --> 00:34:55.215
<v Speaker 1>troubleshoot.

00:34:55.935 --> 00:34:57.775
<v Speaker 1>And then finally, just, again, thinking about this

00:34:57.775 --> 00:35:00.015
<v Speaker 1>kind of, as I talked about earlier, RemoCal

00:35:00.015 --> 00:35:00.895
<v Speaker 1>experience,

00:35:00.975 --> 00:35:02.735
<v Speaker 1>you know, Build Cloud, you know, Build is

00:35:02.735 --> 00:35:04.015
<v Speaker 1>just one area that,

00:35:04.790 --> 00:35:06.390
<v Speaker 1>you know, we've we've been able to to

00:35:06.390 --> 00:35:08.550
<v Speaker 1>make better, but continue to look more in

00:35:08.550 --> 00:35:09.990
<v Speaker 1>that space as well too of how we

00:35:09.990 --> 00:35:11.990
<v Speaker 1>can continue to to help just the development

00:35:11.990 --> 00:35:12.950
<v Speaker 1>experience be

00:35:13.270 --> 00:35:15.030
<v Speaker 1>a little bit easier. And and, personally, one

00:35:15.030 --> 00:35:16.070
<v Speaker 1>of the things I'm

00:35:16.470 --> 00:35:18.230
<v Speaker 1>trying to to look for as well, especially

00:35:18.435 --> 00:35:20.835
<v Speaker 1>with developer relations and training, education, like, how

00:35:20.835 --> 00:35:21.715
<v Speaker 1>do we just make

00:35:22.035 --> 00:35:24.115
<v Speaker 1>this whole space easier to understand and

00:35:24.515 --> 00:35:27.555
<v Speaker 1>because there's a lot. It's there's a large

00:35:27.555 --> 00:35:28.995
<v Speaker 1>mental model you have to have in your

00:35:28.995 --> 00:35:31.155
<v Speaker 1>head even really just to get going. So

00:35:31.155 --> 00:35:32.995
<v Speaker 1>how can we continue to make that easier

00:35:32.995 --> 00:35:33.315
<v Speaker 1>for people?

00:35:34.520 --> 00:35:36.839
<v Speaker 0>Yeah. You're right. It's a very volatile space.

00:35:36.839 --> 00:35:38.680
<v Speaker 0>It's constantly evolving,

00:35:38.760 --> 00:35:40.280
<v Speaker 0>and, you know, I feel like I have

00:35:40.280 --> 00:35:41.880
<v Speaker 0>to really put in a lot of effort

00:35:41.880 --> 00:35:43.560
<v Speaker 0>to keep up with all the advancements. And

00:35:43.560 --> 00:35:44.760
<v Speaker 0>then, I mean, I think about the people

00:35:44.760 --> 00:35:46.760
<v Speaker 0>that are been in this business for less

00:35:46.760 --> 00:35:48.200
<v Speaker 0>than three years or students coming out of

00:35:48.200 --> 00:35:51.255
<v Speaker 0>university. It's a lot. So It is. And

00:35:51.255 --> 00:35:52.454
<v Speaker 1>and, you know, and I didn't even talk

00:35:52.454 --> 00:35:54.295
<v Speaker 1>about, okay, you know, the the atomic jar

00:35:54.295 --> 00:35:56.454
<v Speaker 1>acquisition test containers, which I'm That was my

00:35:56.454 --> 00:35:57.335
<v Speaker 0>next question.

00:35:59.015 --> 00:36:00.615
<v Speaker 0>It's like Did you do it? Well, there's

00:36:00.615 --> 00:36:02.375
<v Speaker 0>more than one acquisition. Right? I mean, was

00:36:02.375 --> 00:36:04.280
<v Speaker 0>it two years ago? There was tell, you've

00:36:04.280 --> 00:36:06.200
<v Speaker 0>got the test container stuff now, and I'm

00:36:06.200 --> 00:36:08.440
<v Speaker 0>looking at this along with Docker Build Cloud.

00:36:08.440 --> 00:36:10.200
<v Speaker 0>And what I see is a really compelling

00:36:10.200 --> 00:36:12.520
<v Speaker 0>future for integration tests and CICD

00:36:12.520 --> 00:36:15.880
<v Speaker 0>and local developer experience, like merging composed with

00:36:15.880 --> 00:36:17.080
<v Speaker 0>tell test containers.

00:36:17.615 --> 00:36:19.454
<v Speaker 0>I mean, I would love to have all

00:36:19.454 --> 00:36:20.974
<v Speaker 0>those people in one room and just watch

00:36:20.974 --> 00:36:22.414
<v Speaker 0>them for a couple of days. I figured

00:36:22.414 --> 00:36:23.615
<v Speaker 0>that would be super exciting.

00:36:24.015 --> 00:36:26.734
<v Speaker 0>Imagine there's good stuff coming there, definitely. Yeah.

00:36:26.734 --> 00:36:29.055
<v Speaker 1>And and I'm excited too. Even just actually

00:36:29.055 --> 00:36:30.815
<v Speaker 1>earlier today, seeing some of the demos with

00:36:30.815 --> 00:36:32.734
<v Speaker 1>what the test containers team is doing with

00:36:32.734 --> 00:36:35.350
<v Speaker 1>some of these integration points and and everything.

00:36:35.350 --> 00:36:36.790
<v Speaker 1>They're like, you know, there's things we thought

00:36:36.790 --> 00:36:38.310
<v Speaker 1>about before, but now that we're under the

00:36:38.310 --> 00:36:39.670
<v Speaker 1>same roof as the rest of the Docker

00:36:39.670 --> 00:36:41.510
<v Speaker 1>team, like, there's some pretty cool stuff. And

00:36:41.510 --> 00:36:43.750
<v Speaker 1>I wish I could share more, but you'll

00:36:43.750 --> 00:36:44.790
<v Speaker 1>just have to stay tuned.

00:36:47.115 --> 00:36:47.915
<v Speaker 0>Awesome.

00:36:47.915 --> 00:36:50.155
<v Speaker 0>Alright. Let's get to Russell's question. First, he

00:36:50.155 --> 00:36:52.875
<v Speaker 0>says Docker Scout is awesome. That's awesome. Sweet.

00:36:53.435 --> 00:36:54.555
<v Speaker 0>And then he says,

00:36:54.955 --> 00:36:56.715
<v Speaker 0>I wanna I'm gonna put words in his

00:36:56.715 --> 00:36:58.155
<v Speaker 0>mouth. He wants to understand how these minutes

00:36:58.155 --> 00:36:59.915
<v Speaker 0>are shared at a team dynamic if someone

00:36:59.915 --> 00:37:01.435
<v Speaker 0>is off on leave for a month in

00:37:01.435 --> 00:37:03.620
<v Speaker 0>this five hundred minutes. Can you just maybe

00:37:03.620 --> 00:37:05.060
<v Speaker 0>dive into that a little a little bit

00:37:05.060 --> 00:37:07.460
<v Speaker 0>more? So so as of today, each of

00:37:07.460 --> 00:37:09.780
<v Speaker 1>those users are are basically contributing minutes to

00:37:09.780 --> 00:37:11.540
<v Speaker 1>a shared pool for that builder.

00:37:11.700 --> 00:37:14.420
<v Speaker 1>And so, yeah, if you've got three users

00:37:14.735 --> 00:37:16.575
<v Speaker 1>and each of them are bringing two hundred

00:37:16.575 --> 00:37:18.495
<v Speaker 1>minutes or whatever, that that six hundred minutes

00:37:18.495 --> 00:37:21.775
<v Speaker 1>shared for the entire pool of users for

00:37:21.775 --> 00:37:24.015
<v Speaker 1>that that builder. So they're not carved out.

00:37:24.015 --> 00:37:25.695
<v Speaker 1>Okay. User one has this much. User two

00:37:25.695 --> 00:37:27.375
<v Speaker 1>has that much, etcetera. It's it's a it's

00:37:27.375 --> 00:37:28.015
<v Speaker 1>a shared pool.

00:37:29.130 --> 00:37:29.690
<v Speaker 0>Awesome.

00:37:29.930 --> 00:37:30.810
<v Speaker 0>Alright. Well,

00:37:32.250 --> 00:37:34.170
<v Speaker 0>thank you so much for taking time out

00:37:34.170 --> 00:37:36.170
<v Speaker 0>of your day. Apologies to everyone who had

00:37:36.170 --> 00:37:38.490
<v Speaker 0>to change stream that way through. I still

00:37:38.490 --> 00:37:40.970
<v Speaker 0>have no idea what's happening there. But what

00:37:40.970 --> 00:37:42.985
<v Speaker 0>I'm gonna do is download all the bites

00:37:42.985 --> 00:37:44.825
<v Speaker 0>from both videos, join them together, and then

00:37:44.825 --> 00:37:46.905
<v Speaker 0>I'll reupload this as a single artifact. So

00:37:47.065 --> 00:37:49.305
<v Speaker 0>yeah. Sounds good. Would be confusing for people

00:37:49.305 --> 00:37:51.625
<v Speaker 0>later at all, but, you know That's right.

00:37:51.625 --> 00:37:52.985
<v Speaker 0>It'll work. Any

00:37:53.305 --> 00:37:54.985
<v Speaker 0>last words, anything you wanna share before we

00:37:54.985 --> 00:37:55.385
<v Speaker 0>say goodbye?

00:37:56.079 --> 00:37:57.440
<v Speaker 1>No. I just wanna say, you know, thanks

00:37:57.440 --> 00:37:58.960
<v Speaker 1>for having me, and thanks for the the

00:37:58.960 --> 00:38:01.440
<v Speaker 1>conversations and questions. And thanks for those that

00:38:01.440 --> 00:38:03.200
<v Speaker 1>are tuning in and asking questions and

00:38:03.839 --> 00:38:05.920
<v Speaker 1>kinda keeping us on our toes. We're we're

00:38:05.920 --> 00:38:07.280
<v Speaker 1>always excited to

00:38:07.994 --> 00:38:09.835
<v Speaker 1>to demo the things that we're talking about

00:38:09.835 --> 00:38:12.315
<v Speaker 1>and and and but also probably more important

00:38:12.315 --> 00:38:14.234
<v Speaker 1>to hear the feedback of, like, what would

00:38:14.234 --> 00:38:15.755
<v Speaker 1>you like to see? What would you

00:38:16.234 --> 00:38:18.234
<v Speaker 1>you know, what would actually help solve your

00:38:18.234 --> 00:38:19.835
<v Speaker 1>pain points? So keep that coming along as

00:38:19.835 --> 00:38:22.319
<v Speaker 1>well too. And I see Russell put in,

00:38:22.319 --> 00:38:23.520
<v Speaker 1>thanks for the demo. It was great even

00:38:23.520 --> 00:38:25.040
<v Speaker 1>with the light themed IDE.

00:38:25.359 --> 00:38:27.040
<v Speaker 1>I get it. I get it.

00:38:27.599 --> 00:38:30.480
<v Speaker 1>I I I'm personally a dark themed IDE

00:38:30.480 --> 00:38:32.319
<v Speaker 1>person, but I have found that when it

00:38:32.319 --> 00:38:34.079
<v Speaker 1>comes to presentations, I think the light screen

00:38:34.240 --> 00:38:36.915
<v Speaker 1>the light themes tend to give better contrast

00:38:36.915 --> 00:38:38.995
<v Speaker 1>for screen sharing and projection and all that

00:38:38.995 --> 00:38:39.635
<v Speaker 1>kind of stuff.

00:38:40.115 --> 00:38:42.915
<v Speaker 0>Yeah. I'm starting to yeah. A person follow

00:38:42.915 --> 00:38:45.075
<v Speaker 0>my system. So during the day, I typically

00:38:45.075 --> 00:38:47.475
<v Speaker 0>have a light themed IDE. And I think

00:38:47.475 --> 00:38:49.315
<v Speaker 0>for the first time in years, I streamed

00:38:49.315 --> 00:38:51.460
<v Speaker 0>at lunchtime, like, two weeks ago. And the

00:38:51.460 --> 00:38:54.020
<v Speaker 0>first comment was, can you use Docker?

00:38:55.220 --> 00:38:57.060
<v Speaker 0>I'm like, actually, I'm trying this thing where

00:38:57.060 --> 00:38:59.140
<v Speaker 0>I just let the computer decide what's best.

00:38:59.140 --> 00:39:00.820
<v Speaker 0>And I I'm enjoying it. I'm liking the

00:39:00.820 --> 00:39:04.900
<v Speaker 0>the change. So, anyway Yep. Yep. Absolutely. So

00:39:05.135 --> 00:39:07.694
<v Speaker 0>thanks again. It's been a pleasure. Yeah. Thank

00:39:07.694 --> 00:39:09.295
<v Speaker 0>you so much. As everyone watching, thank you

00:39:09.295 --> 00:39:10.974
<v Speaker 0>for tuning in. Thank you for your questions,

00:39:10.974 --> 00:39:12.255
<v Speaker 0>and we'll see you all next time. Have

00:39:12.255 --> 00:39:13.934
<v Speaker 0>a great day. Alrighty. Thanks all.
