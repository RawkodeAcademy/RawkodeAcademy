WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 81bee78a-9a41-4826-8fe8-0cb3c60a3385
Created: 2025-04-29T12:17:18.740Z
Duration: 512.2271
Channels: 1

00:00:00.560 --> 00:00:01.280
<v Speaker 0>Hello.

00:00:01.920 --> 00:00:04.560
<v Speaker 0>Welcome back to the Rawkode Academy.

00:00:05.680 --> 00:00:07.600
<v Speaker 0>Today, we're gonna take a look at a

00:00:07.600 --> 00:00:09.759
<v Speaker 0>project called Tetragon.

00:00:10.320 --> 00:00:14.075
<v Speaker 0>Tetragon is an EPBF based security and observability

00:00:14.075 --> 00:00:16.395
<v Speaker 0>tool with runtime enforcement.

00:00:16.395 --> 00:00:19.195
<v Speaker 0>Consumer policies written by you, Tetragon will run

00:00:19.195 --> 00:00:21.835
<v Speaker 0>across your fleet of infrastructure and assure that

00:00:21.835 --> 00:00:23.595
<v Speaker 0>your applications are behaving.

00:00:24.395 --> 00:00:25.914
<v Speaker 0>We'll be taking a look at a few

00:00:25.914 --> 00:00:27.675
<v Speaker 0>examples of what that actually means.

00:00:29.120 --> 00:00:30.160
<v Speaker 0>But, of course,

00:00:30.480 --> 00:00:32.320
<v Speaker 0>before we get into the really cool features

00:00:32.320 --> 00:00:33.360
<v Speaker 0>of Tetragon,

00:00:33.600 --> 00:00:35.280
<v Speaker 0>we need to get it running.

00:00:36.080 --> 00:00:38.000
<v Speaker 0>So in this quick video, let's take a

00:00:38.000 --> 00:00:39.840
<v Speaker 0>look and install on Tetragon

00:00:40.239 --> 00:00:42.160
<v Speaker 0>on to a Linux host.

00:00:43.335 --> 00:00:44.215
<v Speaker 0>Let's go.

00:00:46.615 --> 00:00:49.015
<v Speaker 0>So here we are on the Tetragon homepage.

00:00:49.895 --> 00:00:51.415
<v Speaker 0>First thing we're gonna do is go to

00:00:51.415 --> 00:00:52.295
<v Speaker 0>documentation.

00:00:52.375 --> 00:00:54.535
<v Speaker 0>From here, we're going to click on installation.

00:00:55.255 --> 00:00:57.175
<v Speaker 0>Now we should note there are multiple ways

00:00:57.175 --> 00:00:58.295
<v Speaker 0>to install Tetragon.

00:00:59.280 --> 00:01:01.600
<v Speaker 0>You can install Tetragon directly to the Linux

00:01:01.600 --> 00:01:03.120
<v Speaker 0>host, and it will run as a system

00:01:03.120 --> 00:01:04.240
<v Speaker 0>d service.

00:01:04.400 --> 00:01:06.320
<v Speaker 0>However, if you wish, you can deploy it

00:01:06.320 --> 00:01:08.480
<v Speaker 0>as a container or deploy it with a

00:01:08.480 --> 00:01:10.800
<v Speaker 0>Helm chart to Kubernetes. Now, of course, we're

00:01:10.800 --> 00:01:12.800
<v Speaker 0>gonna take a look at running Tetragon

00:01:12.800 --> 00:01:13.840
<v Speaker 0>with Kubernetes.

00:01:14.345 --> 00:01:15.945
<v Speaker 0>It is the best way to run it

00:01:15.945 --> 00:01:18.985
<v Speaker 0>because it hooks in to Kubernetes resource model

00:01:18.985 --> 00:01:20.985
<v Speaker 0>and allows you to configure Tetragon

00:01:20.985 --> 00:01:23.305
<v Speaker 0>with everyone's favorite programming language,

00:01:23.465 --> 00:01:25.465
<v Speaker 0>YAML, YAML, and more YAML.

00:01:26.460 --> 00:01:28.860
<v Speaker 0>Allowing us to use custom resource definitions to

00:01:28.860 --> 00:01:31.979
<v Speaker 0>configure Tetragon is just the easiest way when

00:01:31.979 --> 00:01:33.659
<v Speaker 0>you're shipping this stuff to production.

00:01:34.380 --> 00:01:36.220
<v Speaker 0>But if you just want to start playing

00:01:36.220 --> 00:01:38.540
<v Speaker 0>and exploring with Tetragon, installing it to a

00:01:38.540 --> 00:01:40.700
<v Speaker 0>Linux host is also just fine.

00:01:41.405 --> 00:01:43.564
<v Speaker 0>So let's get acquainted with Tetragon, and then

00:01:43.564 --> 00:01:46.045
<v Speaker 0>we'll take a look at the Kubernetes installation.

00:01:46.604 --> 00:01:48.125
<v Speaker 0>So from here, we can see that we

00:01:48.125 --> 00:01:50.765
<v Speaker 0>can grab Tetragon from the GitHub releases.

00:01:50.765 --> 00:01:54.125
<v Speaker 0>This is all pretty standard, pretty normal, no

00:01:54.125 --> 00:01:55.005
<v Speaker 0>surprises here.

00:01:56.000 --> 00:01:57.360
<v Speaker 0>Let's copy this command

00:01:57.600 --> 00:01:58.480
<v Speaker 0>and run.

00:02:02.400 --> 00:02:04.560
<v Speaker 0>We can then untar and

00:02:05.760 --> 00:02:06.960
<v Speaker 0>install

00:02:09.134 --> 00:02:10.175
<v Speaker 0>Child's play.

00:02:14.735 --> 00:02:16.255
<v Speaker 0>Now we can start

00:02:18.015 --> 00:02:19.455
<v Speaker 0>system t service.

00:02:19.615 --> 00:02:21.455
<v Speaker 0>I don't need sudo because,

00:02:21.455 --> 00:02:22.655
<v Speaker 0>hey, I'm Rawkode.

00:02:24.489 --> 00:02:26.890
<v Speaker 0>We can see that Tetragon is now running

00:02:26.890 --> 00:02:28.010
<v Speaker 0>on our host.

00:02:28.650 --> 00:02:29.450
<v Speaker 0>Awesome.

00:02:30.730 --> 00:02:33.930
<v Speaker 0>So now that Tetragon is running, let's see

00:02:33.930 --> 00:02:36.810
<v Speaker 0>it in action in its very simple form.

00:02:37.895 --> 00:02:39.415
<v Speaker 0>So let's run echo

00:02:40.375 --> 00:02:41.335
<v Speaker 0>wall

00:02:41.415 --> 00:02:42.215
<v Speaker 0>hello,

00:02:42.455 --> 00:02:45.015
<v Speaker 0>and we're gonna type this to at where

00:02:45.015 --> 00:02:47.255
<v Speaker 0>we do plus one minute.

00:02:47.415 --> 00:02:49.895
<v Speaker 0>This will run the wall command in exactly

00:02:49.895 --> 00:02:51.415
<v Speaker 0>one minute from now.

00:02:52.360 --> 00:02:54.520
<v Speaker 0>That gives us enough time to then use

00:02:54.520 --> 00:02:56.200
<v Speaker 0>the TetracylI

00:02:56.680 --> 00:02:58.920
<v Speaker 0>where we can run get events.

00:03:01.800 --> 00:03:03.640
<v Speaker 0>Get events is gonna show us all the

00:03:03.640 --> 00:03:05.400
<v Speaker 0>things that Tetragon is aware of in the

00:03:05.400 --> 00:03:05.800
<v Speaker 0>cluster

00:03:06.225 --> 00:03:08.945
<v Speaker 0>without any policies or configuration

00:03:09.745 --> 00:03:10.705
<v Speaker 0>at the moment.

00:03:12.545 --> 00:03:14.625
<v Speaker 0>And we can already see some processes running

00:03:14.625 --> 00:03:15.745
<v Speaker 0>in the background,

00:03:15.905 --> 00:03:17.585
<v Speaker 0>and there is our walk event.

00:03:20.489 --> 00:03:22.010
<v Speaker 0>And what we can see here is that

00:03:22.010 --> 00:03:24.489
<v Speaker 0>we got some JSON blobs here that tell

00:03:24.489 --> 00:03:26.569
<v Speaker 0>us that the wall command was executed with

00:03:26.569 --> 00:03:27.930
<v Speaker 0>the argument hello,

00:03:29.450 --> 00:03:30.490
<v Speaker 0>with the pit,

00:03:31.370 --> 00:03:32.330
<v Speaker 0>the shell,

00:03:32.489 --> 00:03:32.890
<v Speaker 0>times,

00:03:33.735 --> 00:03:35.894
<v Speaker 0>all the information that you need to understand

00:03:35.894 --> 00:03:37.815
<v Speaker 0>the processes on a Linux machine.

00:03:40.215 --> 00:03:41.815
<v Speaker 0>Now process management

00:03:41.974 --> 00:03:44.694
<v Speaker 0>or at least process visibility is something that

00:03:44.694 --> 00:03:46.855
<v Speaker 0>you get out of the box when you

00:03:46.855 --> 00:03:47.974
<v Speaker 0>are running Tetragon.

00:03:48.819 --> 00:03:50.660
<v Speaker 0>No matter what command I run on this

00:03:50.660 --> 00:03:52.260
<v Speaker 0>machine, we will see it in the get

00:03:52.260 --> 00:03:53.700
<v Speaker 0>events output.

00:03:54.660 --> 00:03:56.819
<v Speaker 0>Where Tetragon really shines is where we start

00:03:56.819 --> 00:03:59.860
<v Speaker 0>to enrich or add our own tracing policies,

00:04:00.525 --> 00:04:03.644
<v Speaker 0>hooking into the kernel and defining a set

00:04:03.644 --> 00:04:06.765
<v Speaker 0>of actions that should happen in response.

00:04:08.845 --> 00:04:10.365
<v Speaker 0>So let's take a quick look

00:04:11.084 --> 00:04:13.085
<v Speaker 0>at adding a tracing policy

00:04:14.125 --> 00:04:15.965
<v Speaker 0>that shows us whenever someone

00:04:16.440 --> 00:04:19.160
<v Speaker 0>is messing around with the modules loaded into

00:04:19.160 --> 00:04:20.680
<v Speaker 0>our Linux kernel.

00:04:21.240 --> 00:04:22.920
<v Speaker 0>So the first thing we're gonna do is

00:04:22.920 --> 00:04:23.960
<v Speaker 0>run tetra

00:04:24.600 --> 00:04:26.280
<v Speaker 0>tracing policy

00:04:26.520 --> 00:04:27.400
<v Speaker 0>list.

00:04:27.880 --> 00:04:29.160
<v Speaker 0>And you can see at the moment we

00:04:29.160 --> 00:04:31.960
<v Speaker 0>have no tracing policies added to Tetragon.

00:04:32.895 --> 00:04:35.295
<v Speaker 0>We can run that command again with add,

00:04:35.295 --> 00:04:37.455
<v Speaker 0>this time pointing it to our trace dot

00:04:37.455 --> 00:04:38.175
<v Speaker 0>YAML.

00:04:41.295 --> 00:04:42.815
<v Speaker 0>Now when we run the list, we can

00:04:42.815 --> 00:04:45.375
<v Speaker 0>see that we have something called monitor kernel

00:04:45.375 --> 00:04:46.975
<v Speaker 0>modules enabled true.

00:04:50.199 --> 00:04:51.720
<v Speaker 0>Now let's take a look at our trace

00:04:51.720 --> 00:04:52.600
<v Speaker 0>dot YAML.

00:04:53.720 --> 00:04:55.560
<v Speaker 0>We can see it looks like a Kubernetes

00:04:55.560 --> 00:04:58.280
<v Speaker 0>custom resource because it is a Kubernetes custom

00:04:58.280 --> 00:05:00.919
<v Speaker 0>resource. Even though we haven't deployed Tetragon to

00:05:00.919 --> 00:05:03.835
<v Speaker 0>Kubernetes yet, we're using the same configuration to

00:05:03.835 --> 00:05:05.755
<v Speaker 0>add our own tracing policies.

00:05:06.715 --> 00:05:09.195
<v Speaker 0>And here, we're specifically adding some k probes,

00:05:09.195 --> 00:05:10.315
<v Speaker 0>kernel probes,

00:05:10.475 --> 00:05:12.395
<v Speaker 0>to monitor for security

00:05:12.395 --> 00:05:14.475
<v Speaker 0>kernel events, such as module request,

00:05:15.040 --> 00:05:17.680
<v Speaker 0>read file, do in a module, and free

00:05:17.680 --> 00:05:18.400
<v Speaker 0>module.

00:05:19.280 --> 00:05:22.000
<v Speaker 0>Now there aren't any actions attached to this

00:05:22.000 --> 00:05:24.080
<v Speaker 0>policy yet, but what we will see is

00:05:24.080 --> 00:05:26.160
<v Speaker 0>that as we interact with kernel modules,

00:05:26.480 --> 00:05:28.640
<v Speaker 0>Tetragon will tell us everything that we need

00:05:28.640 --> 00:05:28.960
<v Speaker 0>to know.

00:05:31.735 --> 00:05:33.735
<v Speaker 0>So let's split this session in half

00:05:34.615 --> 00:05:36.775
<v Speaker 0>and SSH onto the machine.

00:05:40.615 --> 00:05:43.095
<v Speaker 0>On the top, we're going to run tetra

00:05:43.095 --> 00:05:43.895
<v Speaker 0>get

00:05:44.290 --> 00:05:45.170
<v Speaker 0>events.

00:05:45.490 --> 00:05:48.210
<v Speaker 0>This time we'll add the flag o compact

00:05:48.530 --> 00:05:50.210
<v Speaker 0>just so it doesn't take up as much

00:05:50.210 --> 00:05:52.850
<v Speaker 0>vertical real estate as we get more logs.

00:05:53.810 --> 00:05:56.130
<v Speaker 0>To confirm that this is still working, we'll

00:05:56.130 --> 00:05:58.770
<v Speaker 0>run l s and we see lots of

00:05:58.770 --> 00:05:59.170
<v Speaker 0>output.

00:06:00.485 --> 00:06:02.885
<v Speaker 0>So what about kernel modules?

00:06:03.125 --> 00:06:05.525
<v Speaker 0>Well, we can run l s mod,

00:06:06.085 --> 00:06:08.325
<v Speaker 0>and so far we're just seeing the processes

00:06:08.325 --> 00:06:09.365
<v Speaker 0>that we're running.

00:06:10.085 --> 00:06:13.125
<v Speaker 0>Well, let's run mod probe z f s.

00:06:14.789 --> 00:06:17.190
<v Speaker 0>And if we scroll up, of course, we

00:06:17.190 --> 00:06:19.190
<v Speaker 0>see the processes that were executed.

00:06:20.389 --> 00:06:22.789
<v Speaker 0>But we can also see after we executed

00:06:22.789 --> 00:06:24.310
<v Speaker 0>Modprobe ZFS,

00:06:24.310 --> 00:06:26.310
<v Speaker 0>we have all these syscalls that we asked

00:06:26.310 --> 00:06:27.349
<v Speaker 0>Tetragon to monitor.

00:06:27.935 --> 00:06:31.055
<v Speaker 0>Security kernel read fail, do in it module,

00:06:31.134 --> 00:06:34.175
<v Speaker 0>all the way down. The Modprobe handles dependencies

00:06:34.175 --> 00:06:36.335
<v Speaker 0>when you're loading a module onto the kernel.

00:06:36.335 --> 00:06:38.095
<v Speaker 0>So, of course, we're gonna see multiple modules

00:06:38.095 --> 00:06:41.775
<v Speaker 0>loaded before our Modprobe command exits with a

00:06:41.775 --> 00:06:43.134
<v Speaker 0>successful code of zero.

00:06:44.270 --> 00:06:45.710
<v Speaker 0>Neat. So we're not gonna take a look

00:06:45.710 --> 00:06:47.950
<v Speaker 0>at adding actions just yet. We're gonna dive

00:06:47.950 --> 00:06:50.350
<v Speaker 0>into that more as we explore process life

00:06:50.350 --> 00:06:51.470
<v Speaker 0>cycle and

00:06:51.790 --> 00:06:54.190
<v Speaker 0>file access in the next two videos. But

00:06:54.190 --> 00:06:56.935
<v Speaker 0>the takeaway so far is just that very

00:06:56.935 --> 00:06:58.935
<v Speaker 0>easy to get Tetragon running on a Linux

00:06:58.935 --> 00:06:59.575
<v Speaker 0>machine.

00:06:59.815 --> 00:07:01.975
<v Speaker 0>The Tetragon CLI allows you to add and

00:07:01.975 --> 00:07:03.575
<v Speaker 0>manage your tracing policies

00:07:03.575 --> 00:07:05.495
<v Speaker 0>as well as to get events to understand

00:07:05.495 --> 00:07:07.575
<v Speaker 0>what is happening within your system.

00:07:08.215 --> 00:07:10.750
<v Speaker 0>So I think it's about time we deployed

00:07:10.750 --> 00:07:12.110
<v Speaker 0>this to Kubernetes.

00:07:13.070 --> 00:07:15.230
<v Speaker 0>So to deploy on Kubernetes, we go back

00:07:15.230 --> 00:07:16.510
<v Speaker 0>to the documentation.

00:07:18.190 --> 00:07:19.950
<v Speaker 0>Now we're going to use Helm, so this

00:07:19.950 --> 00:07:21.790
<v Speaker 0>isn't anything you haven't seen before.

00:07:22.775 --> 00:07:24.294
<v Speaker 0>We add the repository,

00:07:24.455 --> 00:07:25.495
<v Speaker 0>do an update,

00:07:25.655 --> 00:07:26.854
<v Speaker 0>and ask it to install.

00:07:35.000 --> 00:07:36.680
<v Speaker 0>Can then run kubectl,

00:07:36.919 --> 00:07:38.200
<v Speaker 0>get pods all,

00:07:38.520 --> 00:07:40.840
<v Speaker 0>and we'll see that our Tetragon pods are

00:07:40.840 --> 00:07:43.320
<v Speaker 0>now spinning up. And this will just take

00:07:43.320 --> 00:07:46.120
<v Speaker 0>a moment. Now that it's running, we can

00:07:46.120 --> 00:07:47.000
<v Speaker 0>do a kubectl

00:07:47.164 --> 00:07:50.365
<v Speaker 0>by dash f using the same trace dot

00:07:50.365 --> 00:07:53.405
<v Speaker 0>YAML we used on the Linux machine.

00:07:54.764 --> 00:07:56.845
<v Speaker 0>From here, you can run get

00:07:57.085 --> 00:07:57.885
<v Speaker 0>tracing

00:07:58.764 --> 00:07:59.485
<v Speaker 0>policy

00:08:01.085 --> 00:08:02.604
<v Speaker 0>and dash o YAML

00:08:03.010 --> 00:08:06.130
<v Speaker 0>to confirm it's exact same module probe we

00:08:06.130 --> 00:08:07.330
<v Speaker 0>used earlier.

00:08:08.850 --> 00:08:09.490
<v Speaker 0>Awesome.

00:08:10.130 --> 00:08:14.050
<v Speaker 0>So that's installing and getting started with Tetragon.

00:08:14.290 --> 00:08:16.050
<v Speaker 0>There's a lot of really awesome features that

00:08:16.050 --> 00:08:18.365
<v Speaker 0>we're gonna dive into, so check out next

00:08:18.365 --> 00:08:21.005
<v Speaker 0>two videos as we explore how to build

00:08:21.005 --> 00:08:24.205
<v Speaker 0>automated actions and runtime enforcement,

00:08:24.925 --> 00:08:26.125
<v Speaker 0>file access,

00:08:26.125 --> 00:08:29.005
<v Speaker 0>and process life cycle across Kubernetes

00:08:29.005 --> 00:08:29.965
<v Speaker 0>and Linux.

00:08:30.365 --> 00:08:31.164
<v Speaker 0>We'll see you soon.
