WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 3d8d4c7d-2270-416b-9314-9ef02ebda335
Created: 2025-04-29T12:26:22.265Z
Duration: 5092.4907
Channels: 1

00:01:47.875 --> 00:01:51.155
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:01:51.155 --> 00:01:53.500
<v Speaker 0>I'm your host, David Flanagan, known across the

00:01:53.500 --> 00:01:54.700
<v Speaker 0>Internet as Rawkode.

00:01:54.940 --> 00:01:57.180
<v Speaker 0>Today is another episode of Rawkode Live, a

00:01:57.180 --> 00:01:59.260
<v Speaker 0>show where we get hands on with really

00:01:59.260 --> 00:02:00.140
<v Speaker 0>cool software

00:02:00.540 --> 00:02:02.700
<v Speaker 0>just in general within the cloud native space,

00:02:02.700 --> 00:02:04.460
<v Speaker 0>the Kubernetes space, the front end space, the

00:02:04.460 --> 00:02:06.300
<v Speaker 0>API space, you name it. And today is

00:02:06.300 --> 00:02:06.780
<v Speaker 0>no exception.

00:02:07.425 --> 00:02:09.505
<v Speaker 0>Today, we're taking a look at Grafbase.

00:02:09.505 --> 00:02:12.225
<v Speaker 0>It is a platform for building GraphQL based

00:02:12.225 --> 00:02:13.025
<v Speaker 0>APIs.

00:02:13.825 --> 00:02:15.585
<v Speaker 0>Now to join us today and guide us

00:02:15.585 --> 00:02:17.905
<v Speaker 0>on our journey is founder and CEO,

00:02:17.985 --> 00:02:19.905
<v Speaker 0>Frederick. Hello. How are you?

00:02:21.010 --> 00:02:21.810
<v Speaker 1>Hey.

00:02:21.970 --> 00:02:25.490
<v Speaker 1>Thanks for having me. No. My pleasure. It's

00:02:25.490 --> 00:02:27.250
<v Speaker 0>always a joy for me when there's a

00:02:27.250 --> 00:02:29.490
<v Speaker 0>product out there, a piece of software that

00:02:29.490 --> 00:02:31.490
<v Speaker 0>I discover and I'm like, I could use

00:02:31.490 --> 00:02:33.250
<v Speaker 0>that. And then when we get to do

00:02:33.250 --> 00:02:34.930
<v Speaker 0>a session on it, I'm always even more

00:02:34.930 --> 00:02:36.815
<v Speaker 0>pumped. And then to top it, the wee

00:02:36.815 --> 00:02:38.495
<v Speaker 0>cherry on the cake is this is all

00:02:38.495 --> 00:02:40.655
<v Speaker 0>powered by some pretty cool Rust code as

00:02:40.655 --> 00:02:43.055
<v Speaker 0>well. So, again, my pleasure. Thank you for

00:02:43.055 --> 00:02:44.015
<v Speaker 0>joining me today.

00:02:44.974 --> 00:02:47.535
<v Speaker 1>Thanks. Yes. My name is Yeah. Please go

00:02:47.535 --> 00:02:48.095
<v Speaker 0>take a minute.

00:02:48.700 --> 00:02:50.620
<v Speaker 1>Yeah. Yeah. My name is Frederick. I'm the

00:02:50.620 --> 00:02:52.220
<v Speaker 1>founder of Grafbase.

00:02:52.780 --> 00:02:54.459
<v Speaker 1>And just one

00:02:54.459 --> 00:02:57.260
<v Speaker 1>minute summary of Grafbase. It's a fully managed

00:02:57.260 --> 00:02:58.780
<v Speaker 1>GraphQL platform

00:02:59.019 --> 00:03:01.819
<v Speaker 1>with a focus on developer experience.

00:03:01.819 --> 00:03:02.459
<v Speaker 1>So we

00:03:02.855 --> 00:03:05.415
<v Speaker 1>or I I've been using GraphQL almost since

00:03:05.415 --> 00:03:06.135
<v Speaker 1>the beginning,

00:03:07.015 --> 00:03:08.135
<v Speaker 1>since 2015,

00:03:08.135 --> 00:03:10.455
<v Speaker 1>'20 '16. I was previously

00:03:10.615 --> 00:03:13.335
<v Speaker 1>the CTO at a company called The RealReal

00:03:13.335 --> 00:03:15.015
<v Speaker 1>based in San Francisco,

00:03:15.575 --> 00:03:17.335
<v Speaker 1>and we

00:03:17.420 --> 00:03:19.500
<v Speaker 1>were building front end experiences

00:03:19.500 --> 00:03:20.700
<v Speaker 1>as people do,

00:03:21.020 --> 00:03:24.380
<v Speaker 1>web and native iOS and Android. And

00:03:24.780 --> 00:03:27.820
<v Speaker 1>we had lots of data silos,

00:03:27.900 --> 00:03:31.180
<v Speaker 1>and we were using microservices and rest APIs.

00:03:31.180 --> 00:03:34.335
<v Speaker 1>And we discovered GraphQL as a way to

00:03:34.335 --> 00:03:36.735
<v Speaker 1>solve some of the challenges that we had,

00:03:36.735 --> 00:03:38.495
<v Speaker 1>you know, in terms of optimizing

00:03:39.295 --> 00:03:41.775
<v Speaker 1>for a number of requests, only fetching

00:03:42.095 --> 00:03:43.855
<v Speaker 1>what the the client needs.

00:03:44.920 --> 00:03:47.400
<v Speaker 1>So we we adopted GraphQL early on, and

00:03:47.400 --> 00:03:49.880
<v Speaker 1>I've been a fan ever since. When I

00:03:49.880 --> 00:03:50.520
<v Speaker 1>left

00:03:51.160 --> 00:03:53.720
<v Speaker 1>The RealReal three years ago, I decided to

00:03:53.720 --> 00:03:54.280
<v Speaker 1>build

00:03:54.680 --> 00:03:56.600
<v Speaker 1>a company called Grafbase,

00:03:56.600 --> 00:03:57.240
<v Speaker 1>which is

00:03:58.215 --> 00:04:01.415
<v Speaker 1>essentially a developer experience play to build and

00:04:01.415 --> 00:04:04.615
<v Speaker 1>deploy GraphQL API similar to what Netafy

00:04:04.855 --> 00:04:07.095
<v Speaker 1>and Rawkode have done for the front end

00:04:07.095 --> 00:04:07.895
<v Speaker 1>cloud

00:04:08.055 --> 00:04:10.615
<v Speaker 1>we are doing for the GraphQL

00:04:11.175 --> 00:04:11.575
<v Speaker 1>cloud.

00:04:13.220 --> 00:04:14.820
<v Speaker 0>Awesome. Thank you for sharing.

00:04:15.300 --> 00:04:16.660
<v Speaker 0>Let's touch on a few of those points

00:04:16.660 --> 00:04:19.060
<v Speaker 0>just because I feel there'll be good context

00:04:19.060 --> 00:04:20.020
<v Speaker 0>for the audience.

00:04:21.940 --> 00:04:24.100
<v Speaker 0>Now you said the GraphQL solves

00:04:24.180 --> 00:04:26.260
<v Speaker 0>a certain subset or a certain set of

00:04:26.260 --> 00:04:28.340
<v Speaker 0>challenges, right, that people have with with REST

00:04:28.335 --> 00:04:30.175
<v Speaker 0>APIs or REST like APIs.

00:04:30.335 --> 00:04:32.495
<v Speaker 0>I definitely feel the the same. I do

00:04:32.495 --> 00:04:35.615
<v Speaker 0>not enjoy building CRUD REST style APIs.

00:04:35.775 --> 00:04:37.775
<v Speaker 0>GraphQL comes with a type system, which I

00:04:37.775 --> 00:04:39.935
<v Speaker 0>think just solves more problems than we get,

00:04:39.935 --> 00:04:42.014
<v Speaker 0>but we do get some challenges.

00:04:42.590 --> 00:04:43.470
<v Speaker 0>Could

00:04:43.790 --> 00:04:45.710
<v Speaker 0>you maybe go into them in a little

00:04:45.710 --> 00:04:48.030
<v Speaker 0>bit more details where people struggle with GraphQL

00:04:48.030 --> 00:04:49.390
<v Speaker 0>and why they may want to look at

00:04:49.390 --> 00:04:52.190
<v Speaker 0>something like Grafbase and what challenges it solves?

00:04:54.030 --> 00:04:54.430
<v Speaker 1>Definitely.

00:04:55.515 --> 00:04:57.275
<v Speaker 1>So so, I mean, it's fair to say

00:04:57.275 --> 00:05:00.795
<v Speaker 1>that starting off building a REST API is

00:05:00.795 --> 00:05:01.595
<v Speaker 1>easier.

00:05:02.075 --> 00:05:05.035
<v Speaker 1>You can quickly, on any kind of framework

00:05:05.035 --> 00:05:07.195
<v Speaker 1>or language, set up a RESTful route.

00:05:07.950 --> 00:05:10.110
<v Speaker 1>You have a resource. You know? Typically, it

00:05:10.110 --> 00:05:12.350
<v Speaker 1>starts with users or something like that and

00:05:12.350 --> 00:05:15.150
<v Speaker 1>go posts, comments, or whatever it is you're

00:05:15.150 --> 00:05:17.390
<v Speaker 1>building. And it's it's quite intuitive,

00:05:17.870 --> 00:05:19.790
<v Speaker 1>but, you know, it's not documented

00:05:20.590 --> 00:05:24.110
<v Speaker 1>most likely. You probably don't have any types

00:05:23.085 --> 00:05:24.285
<v Speaker 1>or documentation,

00:05:24.285 --> 00:05:25.165
<v Speaker 1>like I said,

00:05:25.405 --> 00:05:27.884
<v Speaker 1>and you start building your your front end,

00:05:28.205 --> 00:05:29.245
<v Speaker 1>application.

00:05:30.764 --> 00:05:33.645
<v Speaker 1>But it's once you start re you know,

00:05:33.645 --> 00:05:36.685
<v Speaker 1>querying multiple things, you will make multiple requests

00:05:36.685 --> 00:05:37.645
<v Speaker 1>to your API.

00:05:38.180 --> 00:05:39.940
<v Speaker 1>So performance suffers

00:05:40.099 --> 00:05:41.139
<v Speaker 1>as well as,

00:05:41.620 --> 00:05:44.180
<v Speaker 1>fetching the data that you need to display

00:05:44.580 --> 00:05:47.460
<v Speaker 1>the page with REST. You know, it varies,

00:05:47.460 --> 00:05:49.060
<v Speaker 1>but most likely, you would just fetch the

00:05:49.060 --> 00:05:50.020
<v Speaker 1>whole resource

00:05:50.340 --> 00:05:52.180
<v Speaker 1>even if you only need a few a

00:05:52.180 --> 00:05:55.055
<v Speaker 1>subset of the fields of that resource.

00:05:55.055 --> 00:05:57.615
<v Speaker 1>So the payload is also bigger.

00:05:58.335 --> 00:06:00.655
<v Speaker 1>And when you start evolving the schema,

00:06:01.055 --> 00:06:02.975
<v Speaker 1>you've all seen it, you know, v one,

00:06:02.975 --> 00:06:05.135
<v Speaker 1>v two, v three, it's quite painful

00:06:05.455 --> 00:06:07.780
<v Speaker 1>to have multiple rest rest

00:06:08.259 --> 00:06:11.699
<v Speaker 1>endpoints of the same resource, and, GraphQL

00:06:11.699 --> 00:06:13.860
<v Speaker 1>really solves a lot of that. But to

00:06:13.860 --> 00:06:15.540
<v Speaker 1>address to address the question,

00:06:17.940 --> 00:06:20.979
<v Speaker 1>you know, building GraphQL APIs is has a

00:06:20.979 --> 00:06:22.740
<v Speaker 1>steeper learning curve. Right? So

00:06:23.275 --> 00:06:25.995
<v Speaker 1>I would say Grafbase helps to

00:06:26.315 --> 00:06:28.715
<v Speaker 1>we we want to help address that,

00:06:29.115 --> 00:06:31.195
<v Speaker 1>gap essentially where we wanna make it more

00:06:31.195 --> 00:06:34.235
<v Speaker 1>accessible to any engineer, but in particularly full

00:06:34.235 --> 00:06:37.130
<v Speaker 1>stack front end devs who might be building

00:06:37.130 --> 00:06:40.330
<v Speaker 1>a new GraphQL endpoint for their front

00:06:40.330 --> 00:06:42.330
<v Speaker 1>end application, and they have a bunch of

00:06:42.330 --> 00:06:44.410
<v Speaker 1>data sources that they need to,

00:06:45.210 --> 00:06:47.290
<v Speaker 1>you know, they need to fulfill their their

00:06:47.290 --> 00:06:48.730
<v Speaker 1>their pages or their screens.

00:06:49.675 --> 00:06:51.035
<v Speaker 1>And we

00:06:51.275 --> 00:06:52.315
<v Speaker 1>we built

00:06:52.794 --> 00:06:54.955
<v Speaker 1>a bunch of features for that. Right? So

00:06:54.955 --> 00:06:56.315
<v Speaker 1>one of them is what we call the

00:06:56.315 --> 00:06:57.195
<v Speaker 1>connectors

00:06:57.755 --> 00:07:00.075
<v Speaker 1>that you can then point

00:07:01.115 --> 00:07:01.514
<v Speaker 1>your

00:07:02.030 --> 00:07:02.830
<v Speaker 1>configuration

00:07:02.830 --> 00:07:04.830
<v Speaker 1>to, let's say, a GraphQL endpoint or an

00:07:04.830 --> 00:07:07.070
<v Speaker 1>open API, REST API spec

00:07:07.950 --> 00:07:10.430
<v Speaker 1>databases like Mongo or Postgres, and we will

00:07:10.430 --> 00:07:13.550
<v Speaker 1>then do a lot of that crowd work

00:07:13.550 --> 00:07:15.470
<v Speaker 1>for you. That's quite labor intensive.

00:07:16.985 --> 00:07:18.425
<v Speaker 1>But but even, like,

00:07:18.824 --> 00:07:22.104
<v Speaker 1>manually creating resolvers and defining types, we built

00:07:22.104 --> 00:07:24.745
<v Speaker 1>a an SDK in TypeScript

00:07:25.145 --> 00:07:27.305
<v Speaker 1>that makes it a bit easier and less

00:07:27.305 --> 00:07:28.504
<v Speaker 1>daunting, I would say.

00:07:29.950 --> 00:07:31.230
<v Speaker 0>Yeah. Definitely.

00:07:32.990 --> 00:07:34.510
<v Speaker 0>I love you know, you said at the

00:07:34.510 --> 00:07:38.110
<v Speaker 0>start, it's focuses on, like, developer experience.

00:07:38.430 --> 00:07:40.430
<v Speaker 0>And I think that that really comes through

00:07:40.430 --> 00:07:41.630
<v Speaker 0>when you start to play with the product.

00:07:41.965 --> 00:07:43.805
<v Speaker 0>And, you know, I have been exploring and

00:07:43.805 --> 00:07:45.164
<v Speaker 0>playing with this a few times now for

00:07:45.164 --> 00:07:46.605
<v Speaker 0>my own Academy API,

00:07:46.845 --> 00:07:49.645
<v Speaker 0>and everything was just really simple. And I

00:07:49.645 --> 00:07:51.965
<v Speaker 0>like that even though you built all of

00:07:51.965 --> 00:07:53.165
<v Speaker 0>this in Rust,

00:07:53.405 --> 00:07:55.460
<v Speaker 0>the TypeScript has the SDK because that's where

00:07:55.460 --> 00:07:58.500
<v Speaker 0>the developers are usually building these APIs are.

00:07:58.500 --> 00:08:00.340
<v Speaker 0>Right? You've went to them where you're using

00:08:00.500 --> 00:08:02.020
<v Speaker 0>I'm assuming, the one who put words in

00:08:02.020 --> 00:08:03.940
<v Speaker 0>your mouth. But I'm assuming you use TypeScript

00:08:03.940 --> 00:08:05.700
<v Speaker 0>and you didn't get people a Rust SDK

00:08:05.700 --> 00:08:06.100
<v Speaker 0>because

00:08:06.835 --> 00:08:08.035
<v Speaker 0>those are the people that are in this

00:08:08.035 --> 00:08:09.315
<v Speaker 0>space. These are the people that are building

00:08:09.315 --> 00:08:11.794
<v Speaker 0>these platforms or APIs. Is is that correct,

00:08:11.794 --> 00:08:13.155
<v Speaker 0>or did I just make that up?

00:08:14.835 --> 00:08:17.555
<v Speaker 1>No. I mean, it's certainly I would say

00:08:17.715 --> 00:08:19.555
<v Speaker 1>we have two kind of primary

00:08:20.780 --> 00:08:23.900
<v Speaker 1>audiences that use Grafbase. One is the front

00:08:23.900 --> 00:08:26.300
<v Speaker 1>end and mobile developers who

00:08:26.539 --> 00:08:28.620
<v Speaker 1>typically build what we call back end for

00:08:28.620 --> 00:08:31.500
<v Speaker 1>front end, which is a new GraphQL endpoint

00:08:31.500 --> 00:08:32.620
<v Speaker 1>from existing

00:08:32.620 --> 00:08:33.899
<v Speaker 1>APIs and data sources.

00:08:34.625 --> 00:08:37.265
<v Speaker 1>They really appreciate the TypeScript SDK that it

00:08:37.265 --> 00:08:39.184
<v Speaker 1>can live inside the mono repo

00:08:39.345 --> 00:08:40.544
<v Speaker 1>with cogeneration

00:08:40.544 --> 00:08:42.304
<v Speaker 1>and all of that stuff in one one

00:08:42.304 --> 00:08:44.545
<v Speaker 1>place. Right? So it's really great for them.

00:08:45.185 --> 00:08:47.904
<v Speaker 1>Then there's kind of the platform teams,

00:08:47.904 --> 00:08:49.024
<v Speaker 1>back end teams.

00:08:49.779 --> 00:08:51.540
<v Speaker 1>There it varies. You know? I think we

00:08:51.540 --> 00:08:54.500
<v Speaker 1>we still support SDL. Right? That's kind of

00:08:54.500 --> 00:08:57.700
<v Speaker 1>how we started actually because it is agnostic.

00:08:57.700 --> 00:08:58.260
<v Speaker 1>Right?

00:08:59.140 --> 00:09:01.779
<v Speaker 1>But who knows? We we might launch Python

00:09:01.779 --> 00:09:03.540
<v Speaker 1>and Rust SDKs in the future.

00:09:04.185 --> 00:09:06.585
<v Speaker 1>Because another thing we haven't talked about is

00:09:06.585 --> 00:09:07.465
<v Speaker 1>the fact that

00:09:09.065 --> 00:09:12.025
<v Speaker 1>we we deploy the API itself

00:09:12.025 --> 00:09:15.225
<v Speaker 1>to to the edge. Right? The edge the

00:09:15.225 --> 00:09:17.545
<v Speaker 1>global edge network of 300 locations

00:09:18.370 --> 00:09:21.090
<v Speaker 1>that runs your endpoint in a v eight

00:09:21.090 --> 00:09:21.970
<v Speaker 1>isolate.

00:09:22.130 --> 00:09:24.930
<v Speaker 1>So we compile from Rust to WebAssembly

00:09:26.130 --> 00:09:28.690
<v Speaker 1>to achieve that. Right? So you get if

00:09:28.690 --> 00:09:30.450
<v Speaker 1>you think about Lambda, which is like a

00:09:30.450 --> 00:09:31.410
<v Speaker 1>serverless function,

00:09:31.904 --> 00:09:35.425
<v Speaker 1>but it's globally distributed. So without cold starts,

00:09:35.425 --> 00:09:36.305
<v Speaker 1>you get fifteen,

00:09:37.425 --> 00:09:40.625
<v Speaker 1>twenty milliseconds response times on a cold boot

00:09:41.024 --> 00:09:43.185
<v Speaker 1>for your for your for for all your

00:09:43.185 --> 00:09:45.105
<v Speaker 1>users. Right? So it's really, really powerful if

00:09:45.105 --> 00:09:47.210
<v Speaker 1>you wanna do authentication,

00:09:47.450 --> 00:09:48.170
<v Speaker 1>caching,

00:09:48.570 --> 00:09:49.610
<v Speaker 1>personalization,

00:09:49.770 --> 00:09:52.010
<v Speaker 1>geo geolocation, that kind of stuff. It can

00:09:52.010 --> 00:09:54.649
<v Speaker 1>happen right next to user, and then you

00:09:54.649 --> 00:09:56.570
<v Speaker 1>can go back to the origin depending on

00:09:56.570 --> 00:09:58.010
<v Speaker 1>what you need to do. So it opens

00:09:58.010 --> 00:09:59.930
<v Speaker 1>up to this really cool use cases.

00:10:01.055 --> 00:10:02.735
<v Speaker 0>You're just seeing all the right things. I

00:10:02.735 --> 00:10:06.015
<v Speaker 0>mean, my favorite three buzzwords are Rust, WebAssembly,

00:10:06.015 --> 00:10:07.775
<v Speaker 0>and Edge. So, you know, tick tick and

00:10:07.775 --> 00:10:08.655
<v Speaker 0>and tick.

00:10:09.214 --> 00:10:11.935
<v Speaker 0>Let's let's touch on the Rust quickly before

00:10:11.855 --> 00:10:12.335
<v Speaker 0>oh,

00:10:12.735 --> 00:10:16.240
<v Speaker 0>yeah. I mean, I completely overengineering the Rawkode

00:10:16.240 --> 00:10:18.640
<v Speaker 0>Academy platform that we're launching. And I just

00:10:18.640 --> 00:10:20.320
<v Speaker 0>made this I was like, I'm not gonna

00:10:20.320 --> 00:10:21.280
<v Speaker 0>have a server

00:10:21.600 --> 00:10:24.400
<v Speaker 0>in AMS 1 or NYC or something like

00:10:24.400 --> 00:10:25.440
<v Speaker 0>that. So I want I want it to

00:10:25.440 --> 00:10:26.400
<v Speaker 0>run at the edge.

00:10:27.454 --> 00:10:28.975
<v Speaker 0>And I just have to know I mentioned

00:10:28.975 --> 00:10:30.574
<v Speaker 0>ever since. But I I I I'm not

00:10:30.574 --> 00:10:31.774
<v Speaker 0>gonna answer that just now. What I wanna

00:10:31.774 --> 00:10:33.774
<v Speaker 0>get into is Rust.

00:10:33.935 --> 00:10:36.495
<v Speaker 0>Now, Rust is not an easy language

00:10:36.654 --> 00:10:39.055
<v Speaker 0>language to learn. I've been writing Rust for

00:10:39.055 --> 00:10:40.975
<v Speaker 0>six or seven years now, and I still

00:10:40.975 --> 00:10:42.014
<v Speaker 0>suck at it. However,

00:10:42.550 --> 00:10:44.470
<v Speaker 0>I'm curious, did you have any experience with

00:10:44.470 --> 00:10:46.950
<v Speaker 0>Rust before going in to write in Grafbase,

00:10:46.950 --> 00:10:48.550
<v Speaker 0>or was this your first project, and what

00:10:48.550 --> 00:10:50.470
<v Speaker 0>has that learning curve been like if so?

00:10:52.470 --> 00:10:55.110
<v Speaker 1>Yeah. Great question. I mean, I I started

00:10:55.110 --> 00:10:56.230
<v Speaker 1>prototyping

00:10:56.310 --> 00:10:57.350
<v Speaker 1>in TypeScript,

00:10:57.745 --> 00:10:59.825
<v Speaker 1>like, sort of three plus years ago

00:11:00.225 --> 00:11:02.465
<v Speaker 1>just to get something up and running quickly.

00:11:02.465 --> 00:11:04.785
<v Speaker 1>It was, you know, really hacky and

00:11:05.105 --> 00:11:07.105
<v Speaker 1>probably I don't wanna share too much of

00:11:07.105 --> 00:11:09.185
<v Speaker 1>the of the first version was built, but

00:11:09.185 --> 00:11:11.105
<v Speaker 1>but it worked. Right? And then,

00:11:13.120 --> 00:11:14.560
<v Speaker 1>like, definitely,

00:11:14.720 --> 00:11:16.560
<v Speaker 1>the number one goal was to have something

00:11:16.560 --> 00:11:18.080
<v Speaker 1>that was performant,

00:11:18.720 --> 00:11:19.600
<v Speaker 1>scalable,

00:11:19.839 --> 00:11:22.080
<v Speaker 1>and compiled to WebAssembly

00:11:23.279 --> 00:11:25.760
<v Speaker 1>easily. Right? So the tooling for that was

00:11:25.760 --> 00:11:28.685
<v Speaker 1>really important. And, of course, something that was

00:11:28.685 --> 00:11:29.405
<v Speaker 1>typed,

00:11:29.805 --> 00:11:32.365
<v Speaker 1>something that developed like, something I can see

00:11:32.365 --> 00:11:35.005
<v Speaker 1>myself writing for the coming ten plus years.

00:11:35.965 --> 00:11:38.925
<v Speaker 1>And, you know, this was 2021.

00:11:39.830 --> 00:11:40.550
<v Speaker 1>So,

00:11:40.870 --> 00:11:43.750
<v Speaker 1>you know, WebAssembly was really mature and Rust

00:11:43.750 --> 00:11:46.230
<v Speaker 1>Rust itself was mature and was on the

00:11:46.230 --> 00:11:48.470
<v Speaker 1>rise, and it's still on the rise. So

00:11:48.630 --> 00:11:50.070
<v Speaker 1>it made a lot of sense for us

00:11:50.070 --> 00:11:52.390
<v Speaker 1>to to adopt it. But I've been using

00:11:52.390 --> 00:11:53.990
<v Speaker 1>it a bit on the side, honestly,

00:11:54.595 --> 00:11:57.315
<v Speaker 1>but my strategy was go out and hire,

00:11:58.035 --> 00:11:58.595
<v Speaker 1>like,

00:11:59.315 --> 00:12:01.635
<v Speaker 1>a players in the Rust space. Right? So

00:12:01.635 --> 00:12:03.715
<v Speaker 1>people who had been building Rust for several

00:12:03.715 --> 00:12:04.275
<v Speaker 1>years.

00:12:04.595 --> 00:12:06.915
<v Speaker 1>So we brought on really knowledgeable people on

00:12:06.915 --> 00:12:09.370
<v Speaker 1>the team, and that's really paid dividends

00:12:09.770 --> 00:12:11.690
<v Speaker 1>as we as we built Grafbase.

00:12:12.090 --> 00:12:12.970
<v Speaker 0>Awesome.

00:12:12.970 --> 00:12:15.050
<v Speaker 0>Love it. And maybe your team are the

00:12:15.050 --> 00:12:16.090
<v Speaker 0>people I should be heading up, and I

00:12:16.090 --> 00:12:17.690
<v Speaker 0>get stuck with a lifetime issue then because

00:12:17.690 --> 00:12:19.530
<v Speaker 0>that seems to happen very regularly.

00:12:20.490 --> 00:12:21.530
<v Speaker 0>No. Yes.

00:12:24.545 --> 00:12:26.785
<v Speaker 0>Yeah. Thank you for sharing all of that.

00:12:26.785 --> 00:12:28.625
<v Speaker 0>It was really interesting. I think now is

00:12:28.625 --> 00:12:31.504
<v Speaker 0>the time where we actually stop talking about

00:12:31.504 --> 00:12:33.665
<v Speaker 0>how awesome Grafbase is and actually show people

00:12:33.665 --> 00:12:34.865
<v Speaker 0>some of the things that they could do

00:12:34.865 --> 00:12:37.024
<v Speaker 0>with that. And I think, you know, as

00:12:37.024 --> 00:12:37.665
<v Speaker 0>we explore,

00:12:38.610 --> 00:12:40.450
<v Speaker 0>if there's any of the questions that people

00:12:40.450 --> 00:12:42.610
<v Speaker 0>have in the audience or something you want

00:12:42.610 --> 00:12:43.330
<v Speaker 0>to see,

00:12:43.650 --> 00:12:45.490
<v Speaker 0>just drop them into the comments. We're always

00:12:45.490 --> 00:12:48.370
<v Speaker 0>happy to to tweak things as required.

00:12:49.330 --> 00:12:51.170
<v Speaker 0>So let me pull up

00:12:52.644 --> 00:12:55.045
<v Speaker 0>my screen share where we have the Grafbase

00:12:55.045 --> 00:12:57.125
<v Speaker 0>website. You can find us at graphbase.com.

00:12:57.125 --> 00:12:59.765
<v Speaker 0>That is Grafbase, g r a f, base.

00:13:00.565 --> 00:13:02.005
<v Speaker 0>And now this is completely

00:13:02.805 --> 00:13:04.885
<v Speaker 0>pointless to today's demo. It's something that I

00:13:04.885 --> 00:13:06.084
<v Speaker 0>loved, and I don't know

00:13:06.430 --> 00:13:06.670
<v Speaker 0>if

00:13:07.230 --> 00:13:09.150
<v Speaker 0>it's just something I haven't seen before. But

00:13:09.150 --> 00:13:10.830
<v Speaker 0>I'm assuming you've right clicked on your logo

00:13:10.830 --> 00:13:11.790
<v Speaker 0>before. Right?

00:13:13.310 --> 00:13:14.270
<v Speaker 1>I think, yeah.

00:13:15.150 --> 00:13:16.990
<v Speaker 0>There's just this neat feature.

00:13:17.390 --> 00:13:19.070
<v Speaker 0>Oh, come on, computer. No. You're not gonna

00:13:19.070 --> 00:13:19.870
<v Speaker 0>do it. Oh, there we go.

00:13:22.154 --> 00:13:23.514
<v Speaker 0>Yeah. Don't know what's going on with my

00:13:23.514 --> 00:13:25.755
<v Speaker 0>computer. Yeah. Where it allows me to download

00:13:25.755 --> 00:13:27.515
<v Speaker 0>the icon or the full logo,

00:13:28.154 --> 00:13:30.235
<v Speaker 0>which is such such a nice touch.

00:13:31.435 --> 00:13:33.435
<v Speaker 0>Those small little details made me smile. I

00:13:33.435 --> 00:13:35.274
<v Speaker 0>just thought I would share that, but completely

00:13:35.274 --> 00:13:36.634
<v Speaker 0>irrelevant to what we're gonna look at.

00:13:39.000 --> 00:13:41.080
<v Speaker 0>So It's the small things in life.

00:13:41.880 --> 00:13:42.440
<v Speaker 0>It

00:13:43.320 --> 00:13:46.920
<v Speaker 0>was really weird. And again, not that relevant.

00:13:47.320 --> 00:13:49.080
<v Speaker 0>But I was exploring using Vivaldi as my

00:13:49.080 --> 00:13:49.560
<v Speaker 0>browser

00:13:49.955 --> 00:13:51.875
<v Speaker 0>and I right clicked like, I think Grafbase

00:13:51.875 --> 00:13:53.075
<v Speaker 0>was the first website I went on to

00:13:53.075 --> 00:13:54.275
<v Speaker 0>because I was preparing for this. And I

00:13:54.275 --> 00:13:55.475
<v Speaker 0>right clicked, and then I was like, oh,

00:13:55.475 --> 00:13:56.995
<v Speaker 0>that's a cool Vivaldi feature. And then it

00:13:56.995 --> 00:13:58.275
<v Speaker 0>didn't work in any other website, and then

00:13:58.275 --> 00:13:59.795
<v Speaker 0>I realized, oh, you have actually just built

00:13:59.795 --> 00:14:00.915
<v Speaker 0>that into your website.

00:14:01.155 --> 00:14:01.635
<v Speaker 0>And I was like,

00:14:02.290 --> 00:14:03.890
<v Speaker 0>you know, not only do you have a

00:14:03.890 --> 00:14:05.810
<v Speaker 0>commitment to the developer experience, but it goes

00:14:05.810 --> 00:14:07.410
<v Speaker 0>right across the stack. So

00:14:07.970 --> 00:14:10.050
<v Speaker 0>and so from here, what we get back

00:14:10.050 --> 00:14:11.650
<v Speaker 0>on track and we'll go to the documentation.

00:14:14.915 --> 00:14:16.995
<v Speaker 0>And as always in Rawkode Live, we haven't

00:14:16.995 --> 00:14:20.115
<v Speaker 0>really done anything in advance. Although, Frederick was

00:14:20.115 --> 00:14:23.635
<v Speaker 0>kind enough to provide a few little bits

00:14:23.635 --> 00:14:25.635
<v Speaker 0>of code to get us started. But we're

00:14:25.635 --> 00:14:27.795
<v Speaker 0>gonna start from zero and work towards getting

00:14:27.795 --> 00:14:28.274
<v Speaker 0>this working.

00:14:28.880 --> 00:14:31.120
<v Speaker 0>And we have a pretty cool couple of

00:14:31.120 --> 00:14:32.720
<v Speaker 0>things to show in the process.

00:14:34.240 --> 00:14:34.800
<v Speaker 0>So

00:14:35.600 --> 00:14:37.440
<v Speaker 0>the getting started guide here will guide you

00:14:37.440 --> 00:14:39.360
<v Speaker 0>through all the front ends and everything that

00:14:39.360 --> 00:14:40.400
<v Speaker 0>you need to know to build your first

00:14:40.400 --> 00:14:40.960
<v Speaker 0>API.

00:14:41.425 --> 00:14:43.585
<v Speaker 0>You can go to the quick start and

00:14:43.585 --> 00:14:45.345
<v Speaker 0>this is one of the things

00:14:46.545 --> 00:14:48.465
<v Speaker 0>that confused me first

00:14:49.665 --> 00:14:50.865
<v Speaker 0>is that you are

00:14:51.585 --> 00:14:53.905
<v Speaker 0>you have a Rust engine and CLI,

00:14:54.470 --> 00:14:55.110
<v Speaker 0>but you're

00:14:55.670 --> 00:14:58.070
<v Speaker 0>can deliver the binary to people via

00:14:58.950 --> 00:15:00.310
<v Speaker 0>NPM. Right?

00:15:00.950 --> 00:15:02.950
<v Speaker 0>That that's what's happening here. And that's not

00:15:03.030 --> 00:15:04.390
<v Speaker 0>that wasn't something I don't I don't think

00:15:04.390 --> 00:15:05.990
<v Speaker 0>I'd actually seen that before until I was

00:15:05.990 --> 00:15:07.350
<v Speaker 0>exploring Grafbase.

00:15:07.350 --> 00:15:09.425
<v Speaker 0>But I guess, again, it makes sense if

00:15:09.425 --> 00:15:11.745
<v Speaker 0>you're working or you're developing people that are

00:15:11.745 --> 00:15:13.264
<v Speaker 0>using your product to come from an a

00:15:13.264 --> 00:15:15.745
<v Speaker 0>node or TypeScript background. This is a pretty

00:15:15.745 --> 00:15:17.264
<v Speaker 0>nice way just to deliver that pain away

00:15:17.264 --> 00:15:19.024
<v Speaker 0>to them. I thought that was a nice

00:15:19.024 --> 00:15:19.264
<v Speaker 0>touch.

00:15:22.790 --> 00:15:24.950
<v Speaker 1>And it it is a thin wrapper on

00:15:24.950 --> 00:15:27.510
<v Speaker 1>on top. But but, yeah, NPM is most

00:15:27.510 --> 00:15:28.870
<v Speaker 1>people have it installed

00:15:29.110 --> 00:15:31.670
<v Speaker 1>whether you're a no developer or not. And

00:15:31.670 --> 00:15:32.230
<v Speaker 1>then

00:15:33.030 --> 00:15:35.190
<v Speaker 1>we are we are gonna publish to Homebrew

00:15:35.190 --> 00:15:35.750
<v Speaker 1>and

00:15:36.165 --> 00:15:37.204
<v Speaker 1>crates.i0

00:15:37.204 --> 00:15:37.845
<v Speaker 1>as well.

00:15:38.245 --> 00:15:39.925
<v Speaker 1>We're gonna resume crates.io.

00:15:39.925 --> 00:15:40.644
<v Speaker 1>It stopped

00:15:41.125 --> 00:15:43.204
<v Speaker 1>working for a bit, but those will also

00:15:43.204 --> 00:15:44.404
<v Speaker 1>be available soon.

00:15:46.805 --> 00:15:50.644
<v Speaker 0>Cool. Alright. So people can create their own

00:15:49.710 --> 00:15:52.510
<v Speaker 0>Grafbase project with NPS Graphbase then.

00:15:53.150 --> 00:15:55.230
<v Speaker 0>Now, let's take a look at what we're

00:15:55.230 --> 00:15:57.550
<v Speaker 0>starting at today. So this

00:15:58.670 --> 00:16:00.270
<v Speaker 0>well, we start with products.

00:16:00.590 --> 00:16:01.870
<v Speaker 0>It should be nice and simple. Right?

00:16:03.705 --> 00:16:05.225
<v Speaker 1>Mhmm. Okay.

00:16:06.105 --> 00:16:08.185
<v Speaker 0>So we have a package dot JSON

00:16:09.305 --> 00:16:11.705
<v Speaker 0>for a products API, and you put in

00:16:11.705 --> 00:16:13.305
<v Speaker 0>some of these scripts, which we'll get to

00:16:13.305 --> 00:16:14.025
<v Speaker 0>momentarily.

00:16:14.920 --> 00:16:17.000
<v Speaker 0>But in order to really kick things off,

00:16:17.640 --> 00:16:19.640
<v Speaker 0>this Grafbase is the CLI and this one

00:16:19.640 --> 00:16:21.800
<v Speaker 0>here is your TypeScript SDK.

00:16:23.240 --> 00:16:25.480
<v Speaker 0>And we have a Grafbase configuration.

00:16:26.520 --> 00:16:29.320
<v Speaker 0>So from what I understand from the documentation,

00:16:30.045 --> 00:16:31.885
<v Speaker 0>this is how you can spec out and

00:16:31.885 --> 00:16:34.045
<v Speaker 0>build a GraphQL API when you want to

00:16:34.045 --> 00:16:36.925
<v Speaker 0>start from nothing. This is the kind

00:16:37.085 --> 00:16:39.005
<v Speaker 0>of your phase one. Is that right?

00:16:40.524 --> 00:16:42.445
<v Speaker 1>Yeah. This is a

00:16:43.005 --> 00:16:44.605
<v Speaker 1>I guess we could take a step back

00:16:44.605 --> 00:16:46.320
<v Speaker 1>and talk about what

00:16:46.800 --> 00:16:49.519
<v Speaker 1>federation is and what a subgraph is,

00:16:49.920 --> 00:16:52.079
<v Speaker 1>and then, we can dive into

00:16:52.399 --> 00:16:53.440
<v Speaker 1>how to start

00:16:54.079 --> 00:16:55.519
<v Speaker 1>composing your schema.

00:16:56.000 --> 00:16:57.920
<v Speaker 0>Well, this is the standalone graph. Right? So,

00:16:57.920 --> 00:17:00.160
<v Speaker 0>like, there's no concept of federation or effluent

00:17:00.160 --> 00:17:00.880
<v Speaker 0>at at the moment.

00:17:02.155 --> 00:17:04.075
<v Speaker 1>Yeah. I mean, there's a few things sprinkled

00:17:04.075 --> 00:17:06.395
<v Speaker 1>in here that are relevant to federation.

00:17:06.875 --> 00:17:09.035
<v Speaker 1>Up top there, you we actually you'd say,

00:17:09.035 --> 00:17:10.635
<v Speaker 1>hey. This is a subgraph

00:17:10.714 --> 00:17:12.155
<v Speaker 1>in this time alone

00:17:12.875 --> 00:17:13.915
<v Speaker 1>arguments. And then

00:17:15.140 --> 00:17:17.139
<v Speaker 1>we also add, you know, the key

00:17:17.619 --> 00:17:19.859
<v Speaker 1>to the end of the product there. The

00:17:19.859 --> 00:17:22.900
<v Speaker 1>key we're saying the field ID is the

00:17:22.900 --> 00:17:25.220
<v Speaker 1>key, and that's a concept in federation.

00:17:26.419 --> 00:17:27.619
<v Speaker 1>And then we're yeah.

00:17:30.315 --> 00:17:31.594
<v Speaker 0>Okay. So Well,

00:17:32.875 --> 00:17:34.315
<v Speaker 0>I'll tell you what. Let's I'm gonna break

00:17:34.315 --> 00:17:36.794
<v Speaker 0>your example first. Right? Because I always like

00:17:36.794 --> 00:17:38.315
<v Speaker 0>to know how these things change things. So

00:17:38.315 --> 00:17:40.154
<v Speaker 0>if I remove that, that doesn't break anything.

00:17:40.154 --> 00:17:40.714
<v Speaker 0>Correct?

00:17:41.274 --> 00:17:42.634
<v Speaker 1>Yeah. That's right. And

00:17:42.955 --> 00:17:44.475
<v Speaker 0>we could just comment off the key.

00:17:46.190 --> 00:17:49.070
<v Speaker 0>And now we just have a standalone subgraph.

00:17:49.070 --> 00:17:51.630
<v Speaker 0>Is that is that correct? Yep. Yep. We

00:17:51.630 --> 00:17:53.230
<v Speaker 1>we we just have a a graph well,

00:17:53.470 --> 00:17:55.070
<v Speaker 0>we have the potential here to have a

00:17:55.070 --> 00:17:58.355
<v Speaker 0>GraphQL API. So let's let's get this working

00:17:58.355 --> 00:18:01.315
<v Speaker 0>so that people can see what Grafbase does,

00:18:01.315 --> 00:18:02.514
<v Speaker 0>and then then we'll come back to the

00:18:02.514 --> 00:18:03.075
<v Speaker 0>code.

00:18:03.315 --> 00:18:05.794
<v Speaker 0>Sorry. Sometimes I just like to go off

00:18:05.794 --> 00:18:07.554
<v Speaker 0>script and see what happens. But

00:18:08.115 --> 00:18:09.234
<v Speaker 0>we have

00:18:09.475 --> 00:18:10.034
<v Speaker 0>apps,

00:18:12.980 --> 00:18:15.220
<v Speaker 0>reviews. We got the reviews. Right?

00:18:16.660 --> 00:18:18.820
<v Speaker 1>Think it's products. Yeah. I

00:18:20.020 --> 00:18:21.860
<v Speaker 0>should never trust anything I say.

00:18:24.180 --> 00:18:27.140
<v Speaker 0>Now, you've already created those package scripts for

00:18:27.140 --> 00:18:28.975
<v Speaker 0>us. So, if I pop this open,

00:18:29.375 --> 00:18:29.934
<v Speaker 0>we

00:18:30.175 --> 00:18:32.415
<v Speaker 0>oh, wrong one. Let's pop the right one.

00:18:32.415 --> 00:18:33.855
<v Speaker 0>And we should be able to run an

00:18:33.855 --> 00:18:36.815
<v Speaker 0>NPM install followed by an NPM dev and

00:18:36.815 --> 00:18:38.575
<v Speaker 0>we get a GraphQL API.

00:18:38.735 --> 00:18:40.414
<v Speaker 0>So, let's just make sure that works.

00:18:41.295 --> 00:18:43.660
<v Speaker 0>Let's I don't have PMPM.

00:18:45.420 --> 00:18:46.620
<v Speaker 0>Do it this way.

00:18:51.420 --> 00:18:53.420
<v Speaker 0>While that runs just in case it's slow,

00:18:53.420 --> 00:18:54.300
<v Speaker 0>we did get a question.

00:18:54.995 --> 00:18:57.395
<v Speaker 0>Is there an install section and the documentation

00:18:57.395 --> 00:18:59.475
<v Speaker 0>for a non NPM install?

00:19:00.595 --> 00:19:01.955
<v Speaker 0>I don't think there is.

00:19:02.835 --> 00:19:05.075
<v Speaker 0>And, Frederick, can correct me if I'm wrong,

00:19:05.075 --> 00:19:06.435
<v Speaker 0>but if you go to GitHub,

00:19:07.470 --> 00:19:10.030
<v Speaker 0>Grafbase, Grafbase, there is a releases page with

00:19:10.030 --> 00:19:10.909
<v Speaker 0>binaries.

00:19:11.630 --> 00:19:14.269
<v Speaker 0>So you can download your binary here.

00:19:15.230 --> 00:19:18.190
<v Speaker 0>And you did mention that homebrew and cargo

00:19:18.190 --> 00:19:19.070
<v Speaker 0>install

00:19:19.470 --> 00:19:20.990
<v Speaker 0>will be options in the future.

00:19:21.975 --> 00:19:23.335
<v Speaker 1>Yes. Very soon.

00:19:23.495 --> 00:19:24.934
<v Speaker 1>But, yeah, that's a good point.

00:19:25.335 --> 00:19:28.055
<v Speaker 1>Yeah. You can download for your architecture

00:19:28.055 --> 00:19:29.414
<v Speaker 1>directly from GitHub.

00:19:30.695 --> 00:19:31.735
<v Speaker 0>Okay.

00:19:31.735 --> 00:19:34.135
<v Speaker 0>So we did that. We can now do

00:19:34.855 --> 00:19:35.335
<v Speaker 0>dev.

00:19:37.320 --> 00:19:37.960
<v Speaker 0>So

00:19:38.120 --> 00:19:40.360
<v Speaker 0>according to the Grafbase CLI, we now have

00:19:40.360 --> 00:19:43.400
<v Speaker 0>something running on port 4,001.

00:19:43.400 --> 00:19:45.080
<v Speaker 0>So if we jump back to our browser,

00:19:50.585 --> 00:19:52.985
<v Speaker 0>we get this user interface,

00:19:52.985 --> 00:19:54.585
<v Speaker 0>which has loaded the schema and we can

00:19:54.585 --> 00:19:56.185
<v Speaker 0>see that we have products.

00:19:56.905 --> 00:19:58.985
<v Speaker 0>And if you're familiar with GraphQL,

00:19:59.785 --> 00:20:02.105
<v Speaker 0>I'm assuming we can do product

00:20:02.710 --> 00:20:03.750
<v Speaker 0>ID

00:20:04.950 --> 00:20:05.830
<v Speaker 0>title.

00:20:06.710 --> 00:20:08.390
<v Speaker 0>And on the right, we get a response.

00:20:08.870 --> 00:20:10.710
<v Speaker 0>So that right in itself is just magic.

00:20:10.710 --> 00:20:11.910
<v Speaker 0>So now we need to show people how

00:20:11.910 --> 00:20:12.790
<v Speaker 0>that worked.

00:20:16.310 --> 00:20:16.630
<v Speaker 1>Yes.

00:20:18.965 --> 00:20:19.604
<v Speaker 0>So

00:20:19.765 --> 00:20:22.085
<v Speaker 0>let's go through this. We have a graph

00:20:22.085 --> 00:20:24.725
<v Speaker 0>based dot config. T s. And in this,

00:20:24.725 --> 00:20:27.124
<v Speaker 0>you're using the graph based TypeScript SDK

00:20:27.205 --> 00:20:30.164
<v Speaker 0>where you're saying we want a standalone graph,

00:20:30.164 --> 00:20:30.724
<v Speaker 0>an

00:20:31.044 --> 00:20:32.565
<v Speaker 0>API as I just call it for now.

00:20:33.500 --> 00:20:36.299
<v Speaker 0>You're then defining the types within this API.

00:20:36.299 --> 00:20:37.980
<v Speaker 0>So you're saying this is a product and

00:20:37.980 --> 00:20:40.620
<v Speaker 0>it has these properties, ID, title, description, and

00:20:40.620 --> 00:20:41.339
<v Speaker 0>price.

00:20:41.899 --> 00:20:45.019
<v Speaker 0>And then you're defining a query endpoint called

00:20:45.019 --> 00:20:45.659
<v Speaker 0>products

00:20:46.024 --> 00:20:47.224
<v Speaker 0>which returns

00:20:48.184 --> 00:20:49.704
<v Speaker 0>yeah. And I I actually

00:20:50.264 --> 00:20:51.784
<v Speaker 0>so you're just using the type. Right? You're

00:20:51.784 --> 00:20:53.864
<v Speaker 0>saying you're returning a list of products

00:20:54.264 --> 00:20:56.664
<v Speaker 0>and then has a resolver called products.

00:20:57.225 --> 00:20:59.625
<v Speaker 0>And we're not gonna touch on authentication or

00:20:59.625 --> 00:21:00.904
<v Speaker 0>anything like that right now, so we'll just

00:21:00.904 --> 00:21:03.440
<v Speaker 0>ignore this. And then you just export the

00:21:03.440 --> 00:21:05.280
<v Speaker 0>config with your graph.

00:21:05.680 --> 00:21:07.200
<v Speaker 0>I mean, that's the SDK in a nutshell.

00:21:07.200 --> 00:21:09.200
<v Speaker 0>This is how you define what the API

00:21:09.200 --> 00:21:09.760
<v Speaker 0>is,

00:21:10.080 --> 00:21:12.160
<v Speaker 0>but there is a resolver that we haven't

00:21:12.160 --> 00:21:13.200
<v Speaker 0>gotten to yet.

00:21:15.695 --> 00:21:17.374
<v Speaker 0>And if I said they're incorrect?

00:21:18.655 --> 00:21:20.495
<v Speaker 1>No. No. That's exactly right. I mean, they

00:21:20.495 --> 00:21:22.255
<v Speaker 1>they just the point here is this is

00:21:22.255 --> 00:21:23.534
<v Speaker 1>a code first

00:21:24.015 --> 00:21:26.655
<v Speaker 1>approach. So we're using a builder pattern essentially

00:21:26.655 --> 00:21:27.374
<v Speaker 1>to

00:21:27.934 --> 00:21:28.815
<v Speaker 1>define

00:21:28.815 --> 00:21:29.295
<v Speaker 1>your

00:21:30.450 --> 00:21:33.809
<v Speaker 1>schema using TypeScript. Right? So there's two camps.

00:21:33.809 --> 00:21:34.929
<v Speaker 1>Some people prefer

00:21:35.090 --> 00:21:36.209
<v Speaker 1>schema first.

00:21:36.610 --> 00:21:39.570
<v Speaker 1>Most people who are have built larger APIs

00:21:39.570 --> 00:21:41.490
<v Speaker 1>use code first, but there's no right or

00:21:41.490 --> 00:21:41.969
<v Speaker 1>wrong.

00:21:42.450 --> 00:21:44.690
<v Speaker 0>Yeah. I'm definitely an as code or code

00:21:44.690 --> 00:21:46.054
<v Speaker 0>first person.

00:21:46.215 --> 00:21:48.455
<v Speaker 0>Yeah. To me, it just resonates

00:21:48.695 --> 00:21:49.414
<v Speaker 0>better.

00:21:50.295 --> 00:21:51.815
<v Speaker 0>I guess one of the questions

00:21:52.775 --> 00:21:54.934
<v Speaker 0>I I've got here is like these

00:21:55.575 --> 00:21:57.495
<v Speaker 0>this way of describing a type is

00:21:58.080 --> 00:21:59.600
<v Speaker 0>very Grafbase specific.

00:22:00.320 --> 00:22:02.559
<v Speaker 0>Did you consider using any of the popular

00:22:02.559 --> 00:22:03.919
<v Speaker 0>libraries out there like

00:22:05.200 --> 00:22:07.840
<v Speaker 0>Zod or Tickbox or everyone that is the

00:22:07.840 --> 00:22:09.440
<v Speaker 0>way to scaffold this?

00:22:09.760 --> 00:22:10.320
<v Speaker 0>Yeah.

00:22:11.679 --> 00:22:13.039
<v Speaker 1>We're we're actually

00:22:13.405 --> 00:22:16.125
<v Speaker 1>we're working on opening this up so that

00:22:16.125 --> 00:22:17.005
<v Speaker 1>you can use

00:22:18.445 --> 00:22:20.284
<v Speaker 1>your own kind of way

00:22:21.005 --> 00:22:23.565
<v Speaker 1>of building and defining your schema.

00:22:23.885 --> 00:22:25.405
<v Speaker 1>So that's that's coming

00:22:25.730 --> 00:22:27.570
<v Speaker 1>coming quite soon as well. So you could

00:22:27.570 --> 00:22:28.690
<v Speaker 1>use your own

00:22:29.970 --> 00:22:32.610
<v Speaker 1>schema builder, GraphQL library,

00:22:32.770 --> 00:22:34.770
<v Speaker 1>and you can then just use the output

00:22:34.770 --> 00:22:38.770
<v Speaker 1>of that executable schema to deploy your and

00:22:38.770 --> 00:22:40.370
<v Speaker 1>run your graph with Grafbase.

00:22:40.610 --> 00:22:42.424
<v Speaker 0>Oh, nice. I like that.

00:22:44.105 --> 00:22:46.105
<v Speaker 0>Okay. So let's get back to the fact

00:22:46.105 --> 00:22:48.025
<v Speaker 0>that we ran a query and we got

00:22:48.025 --> 00:22:48.904
<v Speaker 0>data back.

00:22:49.145 --> 00:22:50.905
<v Speaker 0>This data comes from the fact that you

00:22:50.905 --> 00:22:52.345
<v Speaker 0>have said that we have some sort of

00:22:52.345 --> 00:22:52.985
<v Speaker 0>resolver,

00:22:53.480 --> 00:22:55.960
<v Speaker 0>which is just a string called products.

00:22:56.200 --> 00:22:58.120
<v Speaker 0>So this is one of the bits of

00:22:58.120 --> 00:23:01.080
<v Speaker 0>what Grafbase magic where you correlate the string

00:23:01.080 --> 00:23:02.920
<v Speaker 0>to a piece of code. Right?

00:23:05.735 --> 00:23:07.815
<v Speaker 1>Yeah. Exactly. So we kind of use the

00:23:07.815 --> 00:23:10.294
<v Speaker 1>file system here. Right? So you have

00:23:10.855 --> 00:23:12.934
<v Speaker 1>inside the folder resolvers,

00:23:12.935 --> 00:23:14.934
<v Speaker 1>which is a predefined

00:23:15.095 --> 00:23:15.895
<v Speaker 1>location.

00:23:16.295 --> 00:23:18.615
<v Speaker 1>There's a products dot t s file, and

00:23:18.615 --> 00:23:20.775
<v Speaker 1>that maps to the name products

00:23:21.360 --> 00:23:23.680
<v Speaker 1>that you define up there. And it returns

00:23:23.680 --> 00:23:26.000
<v Speaker 1>a static list of three products.

00:23:27.120 --> 00:23:28.000
<v Speaker 0>Awesome.

00:23:28.560 --> 00:23:30.880
<v Speaker 0>Now I guess this is just

00:23:31.520 --> 00:23:33.840
<v Speaker 0>TypeScript code. So while

00:23:34.075 --> 00:23:37.115
<v Speaker 0>a static array of data has been returned.

00:23:37.435 --> 00:23:40.315
<v Speaker 0>This could quite easily be executing SQL queries

00:23:40.315 --> 00:23:42.315
<v Speaker 0>against the database, MongoDB,

00:23:42.635 --> 00:23:45.595
<v Speaker 0>other GraphQL APIs, REST APIs, etcetera. Like, this

00:23:45.595 --> 00:23:46.315
<v Speaker 0>is where

00:23:46.870 --> 00:23:48.470
<v Speaker 0>you connect Grafbase

00:23:48.470 --> 00:23:50.549
<v Speaker 0>to your data model and

00:23:50.870 --> 00:23:51.989
<v Speaker 0>make things work.

00:23:53.510 --> 00:23:55.509
<v Speaker 1>Yeah. Yes. Exactly right.

00:23:56.630 --> 00:23:58.390
<v Speaker 1>And you can create as many resolvers as

00:23:58.390 --> 00:24:00.230
<v Speaker 1>you want. Right? So what we do under

00:24:00.230 --> 00:24:00.789
<v Speaker 1>the hood

00:24:01.215 --> 00:24:04.495
<v Speaker 1>similar to, let's say, Vercel, is we take

00:24:04.495 --> 00:24:05.054
<v Speaker 1>these

00:24:05.375 --> 00:24:07.535
<v Speaker 1>resolver functions. We bundle them, and then we

00:24:07.535 --> 00:24:10.095
<v Speaker 1>deploy them to its isolated

00:24:11.135 --> 00:24:13.215
<v Speaker 1>to to a v eight isolate, essentially, so

00:24:13.215 --> 00:24:14.655
<v Speaker 1>that whenever Quest comes in,

00:24:15.259 --> 00:24:16.539
<v Speaker 1>it gets run-in

00:24:17.500 --> 00:24:18.699
<v Speaker 1>in isolation.

00:24:19.580 --> 00:24:21.579
<v Speaker 1>So it's really, really fast and low latency.

00:24:22.299 --> 00:24:23.099
<v Speaker 0>Nice.

00:24:23.899 --> 00:24:25.899
<v Speaker 0>And it definitely sounds like we could have

00:24:25.899 --> 00:24:27.659
<v Speaker 0>an entire episode where we just talk about

00:24:27.659 --> 00:24:29.419
<v Speaker 0>that deployment model and how you're doing that

00:24:29.419 --> 00:24:31.695
<v Speaker 0>because there's a lot of interesting stuff there.

00:24:31.695 --> 00:24:33.055
<v Speaker 0>But but focus

00:24:33.055 --> 00:24:34.815
<v Speaker 0>on the code aspect for today.

00:24:35.055 --> 00:24:35.855
<v Speaker 0>So

00:24:36.255 --> 00:24:37.695
<v Speaker 0>we have products. And then if we take

00:24:37.695 --> 00:24:38.735
<v Speaker 0>a look at reviews,

00:24:38.815 --> 00:24:40.655
<v Speaker 0>it's pretty much the same.

00:24:42.015 --> 00:24:44.255
<v Speaker 0>Oh, they said they actually have they share

00:24:44.255 --> 00:24:44.895
<v Speaker 0>a type. Right?

00:24:47.000 --> 00:24:49.240
<v Speaker 1>Exactly. So this is another

00:24:49.480 --> 00:24:50.280
<v Speaker 1>standalone

00:24:50.280 --> 00:24:51.240
<v Speaker 1>subgraph,

00:24:51.800 --> 00:24:54.520
<v Speaker 1>and then the different it defines re the

00:24:54.520 --> 00:24:57.000
<v Speaker 1>review type, obviously. And what you do is

00:24:57.000 --> 00:24:58.120
<v Speaker 1>you open up

00:24:58.565 --> 00:25:01.125
<v Speaker 1>the product type, and this is where federation

00:25:01.365 --> 00:25:03.925
<v Speaker 1>comes in. You can then say, hey. On

00:25:03.925 --> 00:25:06.165
<v Speaker 1>the product type, I wanna add a reviews

00:25:06.165 --> 00:25:06.885
<v Speaker 1>field,

00:25:07.205 --> 00:25:08.725
<v Speaker 1>which then resolves

00:25:09.605 --> 00:25:12.405
<v Speaker 1>from the reviews resolver in this subgraph.

00:25:13.710 --> 00:25:14.429
<v Speaker 0>Neat.

00:25:14.670 --> 00:25:16.270
<v Speaker 0>Okay. Let's get back to this because we've

00:25:16.270 --> 00:25:17.470
<v Speaker 0>got something over here.

00:25:18.110 --> 00:25:21.630
<v Speaker 0>I removed the key here and the subgraph,

00:25:22.190 --> 00:25:24.190
<v Speaker 0>and we still got an API that worked,

00:25:24.190 --> 00:25:25.630
<v Speaker 0>resolved, that gave us data.

00:25:25.870 --> 00:25:28.590
<v Speaker 0>So I wanna bring back each of these

00:25:28.085 --> 00:25:30.805
<v Speaker 0>and talk about what that changes. So if

00:25:30.805 --> 00:25:32.644
<v Speaker 0>we bring back subgraph true,

00:25:32.805 --> 00:25:35.365
<v Speaker 0>what does this indicate to the Grafbase engine?

00:25:35.365 --> 00:25:36.565
<v Speaker 0>What does it tell it, and how does

00:25:36.565 --> 00:25:38.005
<v Speaker 0>it change the behavior?

00:25:39.125 --> 00:25:39.445
<v Speaker 1>Yeah.

00:25:40.580 --> 00:25:41.140
<v Speaker 1>So

00:25:41.380 --> 00:25:43.700
<v Speaker 1>the if you if you if you enable

00:25:43.700 --> 00:25:47.220
<v Speaker 1>subgraph behavior, you essentially expose

00:25:47.220 --> 00:25:47.860
<v Speaker 1>two

00:25:48.660 --> 00:25:49.380
<v Speaker 1>field

00:25:49.620 --> 00:25:51.620
<v Speaker 1>two fields two clear fields

00:25:51.860 --> 00:25:54.340
<v Speaker 1>that that are needed for

00:25:55.185 --> 00:25:56.705
<v Speaker 1>for kind of federated

00:25:56.705 --> 00:25:59.185
<v Speaker 1>queries to happen. Right? So there's a service

00:25:59.185 --> 00:26:02.305
<v Speaker 1>underscore service and underscore entities

00:26:02.465 --> 00:26:04.305
<v Speaker 1>query in there that's

00:26:04.945 --> 00:26:07.505
<v Speaker 1>that's that's required for this function properly.

00:26:08.920 --> 00:26:10.360
<v Speaker 1>You could see it. And if you enable

00:26:10.360 --> 00:26:13.240
<v Speaker 1>this and you open up Pathfinder again, Pathfinder

00:26:13.240 --> 00:26:14.040
<v Speaker 1>is our,

00:26:14.760 --> 00:26:17.559
<v Speaker 1>you know, in house GraphQL explorer we built.

00:26:17.640 --> 00:26:19.320
<v Speaker 0>Does that real oh, that reloads.

00:26:20.615 --> 00:26:21.254
<v Speaker 1>Yes.

00:26:22.294 --> 00:26:24.054
<v Speaker 1>So if you refresh the screen

00:26:28.534 --> 00:26:30.294
<v Speaker 0>I'll restart the Oh, yeah. You need sorry.

00:26:30.294 --> 00:26:31.654
<v Speaker 1>Yeah. You need to add ID as well.

00:26:32.070 --> 00:26:34.230
<v Speaker 0>Otherwise Alright. Okay. It it it needs at

00:26:34.230 --> 00:26:36.070
<v Speaker 1>at least one key

00:26:36.549 --> 00:26:37.509
<v Speaker 1>directive.

00:26:37.909 --> 00:26:39.109
<v Speaker 1>Yeah. There you go.

00:26:40.230 --> 00:26:42.229
<v Speaker 0>K. It detects the change,

00:26:43.429 --> 00:26:45.669
<v Speaker 0>and we have to They use either. Yeah.

00:26:46.230 --> 00:26:47.429
<v Speaker 0>Okay. So

00:26:48.034 --> 00:26:49.634
<v Speaker 0>what does the key do then?

00:26:50.674 --> 00:26:51.874
<v Speaker 1>So if you go

00:26:53.955 --> 00:26:55.955
<v Speaker 1>yeah. So the so the key essentially is

00:26:55.955 --> 00:26:58.434
<v Speaker 1>something that is needed to correlate

00:27:01.190 --> 00:27:03.590
<v Speaker 1>two types. Right? So if you wanna do

00:27:03.910 --> 00:27:05.910
<v Speaker 1>you know, if you're if you're querying

00:27:05.910 --> 00:27:07.029
<v Speaker 1>for products

00:27:07.190 --> 00:27:08.870
<v Speaker 1>and you wanna get reviews,

00:27:09.670 --> 00:27:10.549
<v Speaker 1>the the

00:27:10.790 --> 00:27:11.750
<v Speaker 1>the gateway

00:27:11.910 --> 00:27:14.309
<v Speaker 1>the federated gateway needs to know, okay.

00:27:14.630 --> 00:27:17.215
<v Speaker 1>How how do I join these essentially? Okay.

00:27:17.215 --> 00:27:19.054
<v Speaker 0>So you're kind of indicating that the ID

00:27:19.054 --> 00:27:21.534
<v Speaker 0>is the primary key of this type. Yes.

00:27:21.534 --> 00:27:23.774
<v Speaker 1>Exactly. If we go back to the

00:27:24.735 --> 00:27:25.615
<v Speaker 0>reviews one,

00:27:28.990 --> 00:27:31.309
<v Speaker 0>This also has an ID, but that's not

00:27:31.309 --> 00:27:33.870
<v Speaker 0>mentioned here because it just gets it from

00:27:33.870 --> 00:27:35.309
<v Speaker 0>the schema itself.

00:27:38.029 --> 00:27:40.750
<v Speaker 1>Yeah. Yeah. Because the, yeah, the the the

00:27:40.750 --> 00:27:43.789
<v Speaker 1>gateway already knows how to resolve products from

00:27:43.789 --> 00:27:44.590
<v Speaker 1>the product service,

00:27:45.195 --> 00:27:48.315
<v Speaker 1>but reviews will come from the review subgraph.

00:27:49.355 --> 00:27:50.874
<v Speaker 0>Okay. That makes sense.

00:27:51.995 --> 00:27:52.794
<v Speaker 0>Cool.

00:27:53.914 --> 00:27:54.715
<v Speaker 0>Alright.

00:27:54.715 --> 00:27:55.354
<v Speaker 0>So

00:27:55.755 --> 00:27:58.075
<v Speaker 0>I'm always curious just what's happening under the

00:27:58.075 --> 00:27:59.034
<v Speaker 0>hood. Like,

00:28:00.080 --> 00:28:01.760
<v Speaker 0>I need to see what these do.

00:28:05.360 --> 00:28:06.720
<v Speaker 0>K. So this returns

00:28:07.280 --> 00:28:08.640
<v Speaker 0>the STL.

00:28:08.880 --> 00:28:10.159
<v Speaker 0>Go figure. And

00:28:11.680 --> 00:28:12.080
<v Speaker 0>entities.

00:28:13.695 --> 00:28:15.294
<v Speaker 0>This looks like something to do with Grafgel

00:28:15.294 --> 00:28:16.174
<v Speaker 0>fragments,

00:28:16.174 --> 00:28:18.575
<v Speaker 0>is definitely not my strong suit, but

00:28:19.774 --> 00:28:21.134
<v Speaker 0>let's see what happens.

00:28:24.414 --> 00:28:26.174
<v Speaker 0>I guess that does something different.

00:28:30.890 --> 00:28:32.970
<v Speaker 0>Alright. Yeah. I don't understand what the entity's

00:28:32.970 --> 00:28:34.330
<v Speaker 0>endpoint is for.

00:28:36.090 --> 00:28:37.690
<v Speaker 0>But I'm assuming that's just the way that

00:28:37.690 --> 00:28:39.770
<v Speaker 0>the federated graph gets more information.

00:28:41.095 --> 00:28:42.695
<v Speaker 1>Yeah. Yeah. It's it's a different way of

00:28:42.695 --> 00:28:43.655
<v Speaker 1>introspecting

00:28:43.815 --> 00:28:45.175
<v Speaker 1>a subgraph essentially.

00:28:45.175 --> 00:28:46.295
<v Speaker 0>Alright. Okay. Gotcha.

00:28:48.135 --> 00:28:49.255
<v Speaker 0>So if we

00:28:50.455 --> 00:28:52.135
<v Speaker 0>you've already provided

00:28:53.110 --> 00:28:54.710
<v Speaker 0>know why my alt tab keeps going to

00:28:54.710 --> 00:28:55.990
<v Speaker 0>not where I want it to go. But

00:28:55.990 --> 00:28:58.229
<v Speaker 0>you've already provided a top level

00:28:59.669 --> 00:29:03.269
<v Speaker 0>package dot JSON where we can run PMPM

00:29:03.350 --> 00:29:04.229
<v Speaker 0>dev,

00:29:04.309 --> 00:29:06.309
<v Speaker 0>which will spin up everything together including the

00:29:06.309 --> 00:29:07.990
<v Speaker 0>federation, which we haven't looked at yet.

00:29:08.535 --> 00:29:10.615
<v Speaker 0>But let's do that

00:29:13.415 --> 00:29:14.055
<v Speaker 0>dev.

00:29:16.855 --> 00:29:17.495
<v Speaker 0>And

00:29:18.295 --> 00:29:21.095
<v Speaker 0>what this is doing is running each of

00:29:21.095 --> 00:29:22.935
<v Speaker 0>those graphs on their own

00:29:23.429 --> 00:29:24.309
<v Speaker 0>port,

00:29:24.389 --> 00:29:27.269
<v Speaker 0>but the federation one will delegate requests for

00:29:27.269 --> 00:29:29.669
<v Speaker 0>the types to the correct API, if I'm

00:29:29.669 --> 00:29:30.549
<v Speaker 0>not mistaken.

00:29:31.269 --> 00:29:31.909
<v Speaker 0>So

00:29:35.990 --> 00:29:38.549
<v Speaker 0>I'm assuming gateway on port 4,000 is where

00:29:38.549 --> 00:29:39.594
<v Speaker 0>we want to be.

00:29:40.554 --> 00:29:41.274
<v Speaker 1>Yeah.

00:29:48.955 --> 00:29:50.154
<v Speaker 0>That's my own API.

00:29:53.810 --> 00:29:56.049
<v Speaker 1>So, yeah, so now this is a

00:29:56.290 --> 00:29:59.330
<v Speaker 1>this is a clean slate. Right? So the

00:29:59.330 --> 00:30:00.769
<v Speaker 1>federated graph

00:30:00.930 --> 00:30:03.410
<v Speaker 1>has no no subgraphs.

00:30:03.410 --> 00:30:05.890
<v Speaker 1>No subgraphs have been published yet.

00:30:06.290 --> 00:30:07.570
<v Speaker 1>So the schema's empty.

00:30:09.605 --> 00:30:11.845
<v Speaker 1>So now what you need to do is

00:30:11.845 --> 00:30:12.964
<v Speaker 1>publish

00:30:13.445 --> 00:30:16.644
<v Speaker 1>the product graph first and then reviews, and

00:30:16.644 --> 00:30:17.445
<v Speaker 1>we can

00:30:17.924 --> 00:30:20.565
<v Speaker 1>we can look at the the schema after

00:30:20.565 --> 00:30:20.725
<v Speaker 1>that.

00:30:21.670 --> 00:30:23.910
<v Speaker 0>Right. Gotcha. Okay. So let's take a look

00:30:23.910 --> 00:30:25.670
<v Speaker 0>at the gateway first and then we can

00:30:25.670 --> 00:30:27.190
<v Speaker 0>publish to the gateway.

00:30:28.150 --> 00:30:30.870
<v Speaker 0>So this also has a Grafbase config where

00:30:30.870 --> 00:30:32.550
<v Speaker 0>we're saying that this is a federated one

00:30:32.550 --> 00:30:33.909
<v Speaker 0>and there's no other

00:30:35.525 --> 00:30:37.605
<v Speaker 0>there's nothing here that sells it where it's

00:30:37.605 --> 00:30:38.885
<v Speaker 0>reaching out to, which is why the schema

00:30:38.885 --> 00:30:40.244
<v Speaker 0>is empty. We have to

00:30:40.725 --> 00:30:43.924
<v Speaker 0>publish each individual graph to the federated graph

00:30:43.924 --> 00:30:45.284
<v Speaker 0>for it to be consumed.

00:30:45.924 --> 00:30:47.125
<v Speaker 0>So if we come over here,

00:30:53.870 --> 00:30:55.309
<v Speaker 0>we'll do product.

00:30:58.030 --> 00:30:59.630
<v Speaker 0>And it was

00:31:00.350 --> 00:31:01.710
<v Speaker 0>PMPM

00:31:02.505 --> 00:31:03.544
<v Speaker 0>publish dev,

00:31:04.185 --> 00:31:06.345
<v Speaker 0>I believe. Call on dev. Yep. K. That's

00:31:06.345 --> 00:31:06.905
<v Speaker 1>right.

00:31:09.145 --> 00:31:11.145
<v Speaker 0>This runs a Grafbase

00:31:11.145 --> 00:31:12.025
<v Speaker 0>publish

00:31:12.505 --> 00:31:13.385
<v Speaker 0>dev,

00:31:13.465 --> 00:31:15.145
<v Speaker 0>goes to the name of products and tells

00:31:15.145 --> 00:31:16.505
<v Speaker 0>it where to find that

00:31:16.970 --> 00:31:17.850
<v Speaker 0>API.

00:31:18.890 --> 00:31:20.890
<v Speaker 0>And if we come back to reviews

00:31:21.130 --> 00:31:22.490
<v Speaker 0>and do the same. May

00:31:22.890 --> 00:31:25.130
<v Speaker 1>maybe first, maybe we'll go back to Pathfinder

00:31:25.130 --> 00:31:26.970
<v Speaker 1>just so you can see the kind of

00:31:26.970 --> 00:31:27.929
<v Speaker 1>the progression.

00:31:28.090 --> 00:31:29.610
<v Speaker 1>So if you go to the schema page

00:31:29.610 --> 00:31:30.970
<v Speaker 1>where you can see the SDL,

00:31:31.675 --> 00:31:34.075
<v Speaker 1>there's yeah. There you go. So there you

00:31:34.075 --> 00:31:35.674
<v Speaker 1>can see product

00:31:35.835 --> 00:31:38.075
<v Speaker 1>and the query the products query. Right? One

00:31:38.075 --> 00:31:39.595
<v Speaker 1>sub graph. Makes sense?

00:31:40.155 --> 00:31:42.075
<v Speaker 0>Yeah. So we could start to query this

00:31:42.075 --> 00:31:42.715
<v Speaker 0>now.

00:31:43.835 --> 00:31:44.395
<v Speaker 0>Like so.

00:31:47.360 --> 00:31:50.240
<v Speaker 1>Alright. So now you're in team b,

00:31:50.560 --> 00:31:52.320
<v Speaker 1>and you wanna create your reviews

00:31:52.560 --> 00:31:53.520
<v Speaker 1>subgraph

00:31:53.840 --> 00:31:57.600
<v Speaker 1>that you publish to the federated graph without

00:31:58.000 --> 00:31:58.960
<v Speaker 1>touching

00:31:59.120 --> 00:32:00.800
<v Speaker 1>team a's code base.

00:32:02.035 --> 00:32:03.955
<v Speaker 1>So this is what this enables, essentially.

00:32:04.435 --> 00:32:06.115
<v Speaker 0>So let's go back to schema,

00:32:06.515 --> 00:32:08.595
<v Speaker 0>and now we have review.

00:32:10.355 --> 00:32:12.515
<v Speaker 1>And, also, you can see on the product

00:32:12.515 --> 00:32:14.275
<v Speaker 1>type, you can see the reviews field,

00:32:15.049 --> 00:32:17.610
<v Speaker 1>which will then resolve to the reviews of

00:32:17.610 --> 00:32:19.929
<v Speaker 1>Graf. And this is really Oh, we have

00:32:19.929 --> 00:32:20.970
<v Speaker 0>a good idea.

00:32:22.250 --> 00:32:24.249
<v Speaker 0>You've actually extended this type?

00:32:24.809 --> 00:32:25.450
<v Speaker 1>Yes.

00:32:25.850 --> 00:32:28.409
<v Speaker 0>Ah, I I didn't I didn't appreciate that

00:32:28.409 --> 00:32:29.530
<v Speaker 0>from the

00:32:30.394 --> 00:32:32.394
<v Speaker 0>the code. Let's look at that again.

00:32:36.394 --> 00:32:39.114
<v Speaker 0>And then on the config. Okay. So

00:32:40.154 --> 00:32:41.514
<v Speaker 0>team b has said, hey,

00:32:42.330 --> 00:32:44.330
<v Speaker 0>We wanna add something to product, and we

00:32:44.330 --> 00:32:46.649
<v Speaker 0>wanna make our reviews queryable from it.

00:32:47.769 --> 00:32:50.730
<v Speaker 0>That's nifty. I I didn't that that skipped

00:32:50.730 --> 00:32:52.090
<v Speaker 0>over me, and I've got a nice little

00:32:52.090 --> 00:32:53.529
<v Speaker 0>smile on my face now. So I like

00:32:53.529 --> 00:32:53.769
<v Speaker 0>that.

00:32:56.745 --> 00:32:59.384
<v Speaker 1>Yeah. These are the kind of moments that

00:32:59.465 --> 00:33:00.904
<v Speaker 0>make you appreciate

00:33:01.225 --> 00:33:02.744
<v Speaker 1>Grafge even more.

00:33:03.705 --> 00:33:05.465
<v Speaker 0>Alright. So let's

00:33:05.544 --> 00:33:06.424
<v Speaker 0>get reviews,

00:33:07.740 --> 00:33:09.500
<v Speaker 0>and we'll get content

00:33:09.660 --> 00:33:11.179
<v Speaker 0>and rating.

00:33:13.740 --> 00:33:14.940
<v Speaker 0>Wow. Look at that.

00:33:15.900 --> 00:33:16.940
<v Speaker 0>That's nice.

00:33:19.020 --> 00:33:20.620
<v Speaker 1>And then, you know, as you see this,

00:33:20.620 --> 00:33:22.845
<v Speaker 1>you you can then imagine, you know, engineering

00:33:22.845 --> 00:33:23.644
<v Speaker 1>teams,

00:33:24.045 --> 00:33:26.845
<v Speaker 1>two hundred or even thousands of engineers

00:33:27.405 --> 00:33:30.205
<v Speaker 1>collaborating on a super graph or a federated

00:33:30.205 --> 00:33:30.924
<v Speaker 1>graph

00:33:32.205 --> 00:33:34.045
<v Speaker 1>in Synchrony. You know? And this is what

00:33:34.045 --> 00:33:36.629
<v Speaker 1>this unlocks, and we can we can look

00:33:36.629 --> 00:33:39.109
<v Speaker 1>at things later. There's, you know, schema checks

00:33:39.429 --> 00:33:42.629
<v Speaker 1>that is essentially something you add for CICD

00:33:42.629 --> 00:33:44.870
<v Speaker 1>to make sure that what you're about to

00:33:44.870 --> 00:33:45.589
<v Speaker 1>publish

00:33:46.070 --> 00:33:47.190
<v Speaker 1>will be composable.

00:33:47.725 --> 00:33:49.965
<v Speaker 1>And there's a linting, and then there's operation

00:33:49.965 --> 00:33:51.884
<v Speaker 1>checks and all that stuff to make

00:33:52.205 --> 00:33:54.445
<v Speaker 1>to make this more seamless

00:33:54.445 --> 00:33:55.724
<v Speaker 1>for large teams.

00:33:57.485 --> 00:33:58.124
<v Speaker 0>Okay.

00:33:59.085 --> 00:34:00.125
<v Speaker 0>Now that you've

00:34:01.450 --> 00:34:03.529
<v Speaker 0>made me smile and be confused at the

00:34:03.529 --> 00:34:05.210
<v Speaker 0>same time, but I'm happy confused.

00:34:05.370 --> 00:34:08.010
<v Speaker 0>I'm really curious about this extension point because

00:34:08.969 --> 00:34:10.170
<v Speaker 0>one of the things I'm doing with the

00:34:10.170 --> 00:34:12.650
<v Speaker 0>Rawkode Academy API, like I said, WebAssembly,

00:34:12.650 --> 00:34:14.090
<v Speaker 0>Edge, and Rust,

00:34:15.050 --> 00:34:17.525
<v Speaker 0>is that I'm trying to get into position

00:34:17.525 --> 00:34:20.164
<v Speaker 0>where every like, it's not microservices.

00:34:20.164 --> 00:34:22.484
<v Speaker 0>It's literally every everything I deploy is like

00:34:22.484 --> 00:34:23.205
<v Speaker 0>a type.

00:34:23.684 --> 00:34:25.205
<v Speaker 0>And rather than me

00:34:25.444 --> 00:34:26.324
<v Speaker 0>changing

00:34:26.324 --> 00:34:27.685
<v Speaker 0>or doing migrations,

00:34:27.924 --> 00:34:29.684
<v Speaker 0>I'm using new services

00:34:30.150 --> 00:34:32.869
<v Speaker 0>to deploy new functionality and then trying to

00:34:33.109 --> 00:34:35.109
<v Speaker 0>bring all that data together at the front

00:34:35.109 --> 00:34:36.389
<v Speaker 0>end, which is why I was interested in

00:34:36.389 --> 00:34:37.670
<v Speaker 0>Grafbase in the first place.

00:34:37.909 --> 00:34:39.429
<v Speaker 0>But what I didn't appreciate is that I

00:34:39.429 --> 00:34:41.270
<v Speaker 0>could just take this type here. So I

00:34:41.270 --> 00:34:41.829
<v Speaker 0>wanna

00:34:42.855 --> 00:34:45.495
<v Speaker 0>I wanna copy your review service and tweak

00:34:45.495 --> 00:34:47.975
<v Speaker 0>it. And I'm curious, can we add arbitrary

00:34:47.975 --> 00:34:50.455
<v Speaker 0>scalars to the product rather than a type

00:34:50.455 --> 00:34:52.135
<v Speaker 0>preference? Would that still work?

00:34:53.815 --> 00:34:56.935
<v Speaker 1>Custom scalars is still work in progress. It's

00:34:56.935 --> 00:34:57.175
<v Speaker 1>coming.

00:34:57.789 --> 00:34:59.069
<v Speaker 0>Oh, just well, if I wanted add a

00:34:59.069 --> 00:35:00.430
<v Speaker 0>string or an integer.

00:35:01.150 --> 00:35:02.830
<v Speaker 1>Oh, yeah. Yeah. Sure. I mean,

00:35:03.150 --> 00:35:04.430
<v Speaker 1>go ahead and add.

00:35:04.990 --> 00:35:07.150
<v Speaker 0>Okay. So one of the use cases I've

00:35:07.150 --> 00:35:08.829
<v Speaker 0>got is, like, you know, say I have

00:35:08.990 --> 00:35:10.750
<v Speaker 0>you know, I I model my YouTube channel

00:35:10.750 --> 00:35:12.589
<v Speaker 0>on my on my type. So say I

00:35:12.589 --> 00:35:14.725
<v Speaker 0>have something called a livestream, and then I

00:35:14.725 --> 00:35:15.845
<v Speaker 0>decide I want to add a field to

00:35:15.845 --> 00:35:17.925
<v Speaker 0>that livestream. I'm very much trying to be

00:35:17.925 --> 00:35:20.165
<v Speaker 0>very particular about not adding migrations. I I

00:35:20.165 --> 00:35:21.925
<v Speaker 0>don't wanna get into migrations whatsoever.

00:35:23.285 --> 00:35:24.565
<v Speaker 0>But I could do this with a new

00:35:24.565 --> 00:35:25.845
<v Speaker 0>service that just injects,

00:35:27.270 --> 00:35:28.550
<v Speaker 0>Say it was a

00:35:28.870 --> 00:35:31.350
<v Speaker 0>thumbnail URL and I wanna add that. So

00:35:31.350 --> 00:35:32.710
<v Speaker 0>let's just let's just do it and see

00:35:32.710 --> 00:35:33.910
<v Speaker 0>if it works the way I think it

00:35:33.910 --> 00:35:35.510
<v Speaker 0>does because that would be really cool for

00:35:35.510 --> 00:35:35.990
<v Speaker 0>me.

00:35:37.430 --> 00:35:39.910
<v Speaker 0>Let's copy reviews and we'll call this

00:35:40.310 --> 00:35:41.750
<v Speaker 0>what else do products have?

00:35:42.525 --> 00:35:44.365
<v Speaker 0>We'll call it link. Right? This is our

00:35:44.365 --> 00:35:45.405
<v Speaker 0>link service.

00:35:47.164 --> 00:35:50.125
<v Speaker 0>And I'll delete the Grafbase.Directrix.

00:35:50.125 --> 00:35:51.805
<v Speaker 0>I think that may cause issues.

00:35:52.924 --> 00:35:55.325
<v Speaker 0>I'll change this to be link

00:35:55.645 --> 00:35:57.724
<v Speaker 0>and I'll give it a new port

00:35:58.779 --> 00:35:59.980
<v Speaker 0>like so.

00:36:01.740 --> 00:36:02.700
<v Speaker 0>And

00:36:02.779 --> 00:36:04.780
<v Speaker 0>we'll modify this. You wanna

00:36:05.740 --> 00:36:08.300
<v Speaker 1>change the name too in the published script.

00:36:08.859 --> 00:36:10.220
<v Speaker 1>The name of the subgraph.

00:36:12.845 --> 00:36:14.605
<v Speaker 0>Alright. Let's get there.

00:36:15.085 --> 00:36:17.245
<v Speaker 0>And I'm gonna do g dot string

00:36:19.645 --> 00:36:20.365
<v Speaker 0>like this.

00:36:23.090 --> 00:36:25.090
<v Speaker 0>And that you're you're saying this will allow

00:36:25.090 --> 00:36:27.650
<v Speaker 0>me to enrich that type with a new

00:36:27.650 --> 00:36:29.330
<v Speaker 0>value, which is very nice.

00:36:30.370 --> 00:36:33.090
<v Speaker 1>Yeah. Yeah. I mean, you'll need a resolver.

00:36:34.130 --> 00:36:35.650
<v Speaker 0>Mhmm. I mean, sure. In this case, it's

00:36:35.650 --> 00:36:37.090
<v Speaker 1>just an empty string. You could do that

00:36:37.090 --> 00:36:39.745
<v Speaker 1>too. But, typically, you have a you'll want

00:36:39.745 --> 00:36:42.065
<v Speaker 1>a resolver to return some data for that

00:36:42.065 --> 00:36:42.705
<v Speaker 1>field.

00:36:43.105 --> 00:36:44.705
<v Speaker 0>Okay. So link.

00:36:46.305 --> 00:36:47.825
<v Speaker 0>I'll gokagi.com,

00:36:52.440 --> 00:36:52.920
<v Speaker 0>Google

00:36:53.320 --> 00:36:53.960
<v Speaker 0>Com,

00:36:56.520 --> 00:36:58.280
<v Speaker 0>and we'd be remiss if we don't do

00:36:58.280 --> 00:36:59.640
<v Speaker 0>graphbased.com.

00:37:03.080 --> 00:37:04.200
<v Speaker 0>So

00:37:04.200 --> 00:37:05.880
<v Speaker 0>this isn't going to be a review. This

00:37:05.880 --> 00:37:06.840
<v Speaker 0>is now

00:37:07.295 --> 00:37:08.655
<v Speaker 0>a well, I guess this is just going

00:37:08.655 --> 00:37:10.335
<v Speaker 0>to be a link. Right? And

00:37:12.415 --> 00:37:14.735
<v Speaker 0>Yeah. Okay. Well, I guess it depends what

00:37:14.735 --> 00:37:16.815
<v Speaker 1>you if you wanna create a link object,

00:37:16.815 --> 00:37:18.895
<v Speaker 1>which is typically I recommend doing that.

00:37:19.869 --> 00:37:21.950
<v Speaker 1>Like, try to think of everything as types

00:37:21.950 --> 00:37:24.270
<v Speaker 1>or entities rather than just a string.

00:37:25.070 --> 00:37:28.190
<v Speaker 0>Okay. So we would have something like this.

00:37:28.910 --> 00:37:29.550
<v Speaker 1>Mhmm.

00:37:30.589 --> 00:37:32.750
<v Speaker 0>You know, just in the sake of completeness,

00:37:32.750 --> 00:37:35.405
<v Speaker 0>let's not leave any sort of whole thing.

00:37:35.405 --> 00:37:37.645
<v Speaker 0>Does that change my config then?

00:37:38.205 --> 00:37:39.805
<v Speaker 0>Or does this still Yep.

00:37:40.285 --> 00:37:42.045
<v Speaker 0>Just have a reference to my link object.

00:37:42.045 --> 00:37:42.605
<v Speaker 0>Right?

00:37:43.244 --> 00:37:44.045
<v Speaker 1>Exactly.

00:37:44.045 --> 00:37:44.925
<v Speaker 1>So you could

00:37:45.244 --> 00:37:46.925
<v Speaker 1>you need to define a,

00:37:47.619 --> 00:37:50.020
<v Speaker 1>up top, you know, a a link type,

00:37:50.500 --> 00:37:52.020
<v Speaker 1>a reference here.

00:37:58.660 --> 00:37:58.980
<v Speaker 0>Link.

00:38:02.154 --> 00:38:04.315
<v Speaker 0>And I'll need to rename that fail.

00:38:08.954 --> 00:38:09.675
<v Speaker 1>Link.

00:38:13.194 --> 00:38:14.395
<v Speaker 0>So I need to

00:38:15.595 --> 00:38:16.474
<v Speaker 0>type. Okay.

00:38:24.610 --> 00:38:25.090
<v Speaker 0>Link.

00:38:33.974 --> 00:38:34.775
<v Speaker 0>Alright.

00:38:40.375 --> 00:38:41.015
<v Speaker 0>So

00:38:44.055 --> 00:38:45.655
<v Speaker 0>with this resolver

00:38:47.980 --> 00:38:48.460
<v Speaker 0>What's

00:38:48.780 --> 00:38:50.460
<v Speaker 1>Is is it sorry. Is it a list

00:38:50.460 --> 00:38:52.300
<v Speaker 1>or maybe you wanna omit? Is it just

00:38:52.300 --> 00:38:53.100
<v Speaker 1>one link?

00:38:53.340 --> 00:38:54.860
<v Speaker 1>Maybe I wanna omit the list or not.

00:38:54.860 --> 00:38:57.100
<v Speaker 0>Yeah. It's just it's just one. Yeah. Okay.

00:38:57.100 --> 00:38:59.260
<v Speaker 1>Yeah. So I guess what I I'm curious,

00:38:59.260 --> 00:39:00.140
<v Speaker 0>right, is

00:39:01.735 --> 00:39:03.255
<v Speaker 0>how does it connect?

00:39:03.735 --> 00:39:05.175
<v Speaker 0>Oh, yeah. Because you got the idea of

00:39:05.175 --> 00:39:06.135
<v Speaker 0>key,

00:39:07.095 --> 00:39:08.855
<v Speaker 0>but I'm assuming the link

00:39:11.735 --> 00:39:14.135
<v Speaker 0>I'm confusing myself now. I'm wishing I hadn't

00:39:14.135 --> 00:39:16.520
<v Speaker 0>gone down this path. This ID here, is

00:39:16.520 --> 00:39:18.600
<v Speaker 0>this the product ID or the link ID?

00:39:19.160 --> 00:39:20.680
<v Speaker 1>This is the link ID.

00:39:21.240 --> 00:39:23.400
<v Speaker 0>Okay. So how does this resolver know to

00:39:23.400 --> 00:39:25.560
<v Speaker 0>fetch links for the product?

00:39:26.520 --> 00:39:29.160
<v Speaker 1>Yeah. So, you know, in the resolver

00:39:30.085 --> 00:39:32.325
<v Speaker 1>function signature, you have four.

00:39:32.965 --> 00:39:34.965
<v Speaker 1>The fur first thing is the root to

00:39:34.965 --> 00:39:36.645
<v Speaker 1>the parent, and in there, you could then

00:39:36.645 --> 00:39:37.445
<v Speaker 1>get the

00:39:37.845 --> 00:39:38.805
<v Speaker 1>roots

00:39:38.885 --> 00:39:40.405
<v Speaker 1>the calling, you know,

00:39:40.885 --> 00:39:43.370
<v Speaker 1>types ID. So you could you could kind

00:39:43.370 --> 00:39:44.650
<v Speaker 1>of deconstruct

00:39:44.650 --> 00:39:46.330
<v Speaker 1>here and just get ID if you wanted

00:39:46.330 --> 00:39:48.250
<v Speaker 1>to, and then you can use that to

00:39:48.250 --> 00:39:52.250
<v Speaker 1>fetch links for that product. Right? Okay. So

00:39:52.890 --> 00:39:54.090
<v Speaker 0>let's assume

00:39:54.905 --> 00:39:57.225
<v Speaker 0>someone's interest has peaked here. I I I

00:39:57.225 --> 00:39:59.065
<v Speaker 0>assume they are for sure. And they wanna

00:39:59.065 --> 00:40:00.585
<v Speaker 0>know how they work out what that signature

00:40:00.585 --> 00:40:01.945
<v Speaker 0>is from the documentation.

00:40:02.825 --> 00:40:05.945
<v Speaker 0>How how how do they get that? Resolvers

00:40:05.945 --> 00:40:08.425
<v Speaker 1>on the left. Mhmm. Section overview.

00:40:09.650 --> 00:40:11.810
<v Speaker 1>And here should be an example

00:40:13.170 --> 00:40:13.970
<v Speaker 1>somewhere.

00:40:13.970 --> 00:40:15.970
<v Speaker 0>Oh, yeah. Resolver function. Okay.

00:40:16.690 --> 00:40:18.130
<v Speaker 0>Rx in context.

00:40:27.704 --> 00:40:28.105
<v Speaker 0>Okay.

00:40:42.450 --> 00:40:44.690
<v Speaker 0>Right. Okay. Got it. So I'm assuming this

00:40:44.690 --> 00:40:46.050
<v Speaker 0>is kind of what we're trying to do

00:40:46.050 --> 00:40:48.290
<v Speaker 0>with the root and then extracting a value?

00:40:48.930 --> 00:40:49.650
<v Speaker 1>Yep.

00:40:49.730 --> 00:40:50.130
<v Speaker 0>Right.

00:40:55.535 --> 00:40:57.215
<v Speaker 0>Okay. So we pull that to.

00:40:58.575 --> 00:41:00.495
<v Speaker 0>So what's RxN? Sorry.

00:41:02.095 --> 00:41:04.815
<v Speaker 1>So so I guess it like, you think

00:41:04.815 --> 00:41:06.895
<v Speaker 1>about, like, root in this case,

00:41:07.455 --> 00:41:08.175
<v Speaker 1>you

00:41:08.415 --> 00:41:10.735
<v Speaker 1>have a product type. Right? So

00:41:11.340 --> 00:41:12.140
<v Speaker 1>the

00:41:12.300 --> 00:41:15.260
<v Speaker 1>link field is gonna get called from

00:41:15.340 --> 00:41:17.340
<v Speaker 1>the product type. So root

00:41:17.580 --> 00:41:20.300
<v Speaker 1>will have, you know, existing fields in there.

00:41:20.300 --> 00:41:22.460
<v Speaker 1>Right? So you have the ID, for example.

00:41:22.460 --> 00:41:24.300
<v Speaker 1>So that's gonna get passed in the root.

00:41:24.540 --> 00:41:25.180
<v Speaker 1>Args

00:41:25.464 --> 00:41:26.825
<v Speaker 1>is if you have

00:41:27.305 --> 00:41:28.105
<v Speaker 1>query,

00:41:28.105 --> 00:41:30.665
<v Speaker 1>like, if there were arguments to this link

00:41:30.665 --> 00:41:31.785
<v Speaker 1>field, let's say

00:41:32.585 --> 00:41:34.744
<v Speaker 1>I don't know. Maybe if Like, if we

00:41:34.744 --> 00:41:38.025
<v Speaker 0>touch something here where we said filter

00:41:38.265 --> 00:41:39.785
<v Speaker 0>name. Well,

00:41:39.785 --> 00:41:40.984
<v Speaker 1>but on the link

00:41:41.280 --> 00:41:43.200
<v Speaker 1>on the link field, for example.

00:41:43.600 --> 00:41:45.040
<v Speaker 1>Yeah. Like, that that would be for the

00:41:45.040 --> 00:41:45.920
<v Speaker 1>product's

00:41:46.000 --> 00:41:48.240
<v Speaker 1>resolver. You would get the args, and that's

00:41:48.240 --> 00:41:48.960
<v Speaker 1>the second.

00:41:49.840 --> 00:41:52.240
<v Speaker 0>Okay. So we can do something here equals

00:41:52.240 --> 00:41:52.960
<v Speaker 0>root,

00:41:53.120 --> 00:41:54.800
<v Speaker 0>and we're trying to fetch at the ID.

00:41:54.800 --> 00:41:56.160
<v Speaker 0>And you said that comes

00:41:56.375 --> 00:41:57.975
<v Speaker 0>I mean, would that just work?

00:41:58.775 --> 00:42:00.694
<v Speaker 1>Yeah. Yeah. You could deconstruct it there or

00:42:00.694 --> 00:42:02.695
<v Speaker 1>write in the signature itself.

00:42:03.174 --> 00:42:04.615
<v Speaker 1>Yeah. You could do that.

00:42:05.655 --> 00:42:07.255
<v Speaker 0>I'll leave it like this. Yeah.

00:42:07.974 --> 00:42:08.295
<v Speaker 1>Sure.

00:42:09.250 --> 00:42:11.330
<v Speaker 0>And I'm gonna get really nasty now. Right?

00:42:11.330 --> 00:42:11.970
<v Speaker 0>So

00:42:12.130 --> 00:42:13.890
<v Speaker 0>if I d equals one,

00:42:14.530 --> 00:42:16.290
<v Speaker 0>I'll assume it's gonna be a string.

00:42:18.610 --> 00:42:19.170
<v Speaker 1>Yes.

00:42:20.450 --> 00:42:21.890
<v Speaker 0>Which means we can remove the I d

00:42:21.890 --> 00:42:24.045
<v Speaker 0>from our I mean, it doesn't really have

00:42:24.045 --> 00:42:25.405
<v Speaker 0>to be a type now, but I I

00:42:25.405 --> 00:42:25.965
<v Speaker 0>guess

00:42:28.925 --> 00:42:30.685
<v Speaker 1>Oh, the link type is nice to have

00:42:30.685 --> 00:42:31.965
<v Speaker 1>an interface up there, I think.

00:42:35.010 --> 00:42:36.770
<v Speaker 0>Alright. I'll I'll remove the ID because I

00:42:36.770 --> 00:42:38.050
<v Speaker 0>don't think we need to, and we'll just

00:42:38.050 --> 00:42:39.170
<v Speaker 0>put URL. Okay.

00:42:41.570 --> 00:42:42.690
<v Speaker 0>And we'll have URL.

00:42:48.295 --> 00:42:50.135
<v Speaker 0>I'm sure people are watching me going, what

00:42:50.135 --> 00:42:52.135
<v Speaker 0>the hell is this idiot doing? But

00:42:54.055 --> 00:42:55.095
<v Speaker 0>we started.

00:42:55.175 --> 00:42:56.375
<v Speaker 0>I I feel like I need to do

00:42:56.375 --> 00:42:57.495
<v Speaker 0>it. The first

00:42:57.735 --> 00:42:58.855
<v Speaker 1>this is how database

00:42:59.415 --> 00:43:01.575
<v Speaker 1>this is why they haven't even started many

00:43:01.575 --> 00:43:02.135
<v Speaker 1>years ago.

00:43:03.599 --> 00:43:04.240
<v Speaker 0>So

00:43:04.400 --> 00:43:05.119
<v Speaker 0>alright.

00:43:07.200 --> 00:43:09.200
<v Speaker 0>Now we don't now we could just return.

00:43:10.079 --> 00:43:11.359
<v Speaker 0>You you get nothing.

00:43:11.680 --> 00:43:12.320
<v Speaker 0>So

00:43:13.680 --> 00:43:15.839
<v Speaker 0>this is a very crude resolver,

00:43:16.605 --> 00:43:19.565
<v Speaker 0>and it's returning a link. Can I annotate

00:43:19.565 --> 00:43:20.285
<v Speaker 0>that?

00:43:20.845 --> 00:43:21.485
<v Speaker 0>No.

00:43:24.685 --> 00:43:25.325
<v Speaker 1>Well,

00:43:26.525 --> 00:43:28.045
<v Speaker 1>we we do we can look at this

00:43:28.045 --> 00:43:29.965
<v Speaker 1>later if you want. There is a in

00:43:29.965 --> 00:43:31.645
<v Speaker 1>docs, there is this code gen,

00:43:34.300 --> 00:43:35.980
<v Speaker 1>experimental code generation

00:43:36.300 --> 00:43:38.460
<v Speaker 1>that allows you to do kind of strongly

00:43:38.460 --> 00:43:39.660
<v Speaker 1>typed resolvers.

00:43:39.900 --> 00:43:42.140
<v Speaker 1>Well yeah. I was just curious because my

00:43:42.140 --> 00:43:43.500
<v Speaker 0>interface is now unused.

00:43:43.740 --> 00:43:45.180
<v Speaker 0>So, I mean, I can just do this.

00:43:45.180 --> 00:43:45.660
<v Speaker 0>But

00:43:45.980 --> 00:43:47.740
<v Speaker 1>Yeah. Sure. You don't need to do it.

00:43:48.515 --> 00:43:50.675
<v Speaker 0>So let's go back to my madness over

00:43:50.675 --> 00:43:51.155
<v Speaker 0>here

00:43:51.715 --> 00:43:53.475
<v Speaker 0>where we have a URL

00:43:53.555 --> 00:43:54.915
<v Speaker 0>that's disappears

00:43:56.035 --> 00:43:58.115
<v Speaker 0>and this gets resolved with our resolver.

00:44:00.210 --> 00:44:02.690
<v Speaker 1>I I think you do need ID.

00:44:03.330 --> 00:44:04.930
<v Speaker 0>Because of the key. Otherwise,

00:44:05.170 --> 00:44:07.570
<v Speaker 1>the key will yeah. It will complain.

00:44:10.369 --> 00:44:11.010
<v Speaker 1>But

00:44:11.410 --> 00:44:11.650
<v Speaker 1>yeah.

00:44:13.265 --> 00:44:14.225
<v Speaker 0>I mean, does

00:44:15.345 --> 00:44:16.785
<v Speaker 0>it have to be unique? No. No.

00:44:17.905 --> 00:44:19.265
<v Speaker 1>I don't think so. No.

00:44:24.145 --> 00:44:26.465
<v Speaker 0>If this doesn't work, I'm very sorry. But

00:44:26.465 --> 00:44:28.280
<v Speaker 0>I was following a train of thought. So

00:44:29.080 --> 00:44:31.160
<v Speaker 1>But you need to also update the type

00:44:31.160 --> 00:44:33.400
<v Speaker 1>definition in the config. You need to add

00:44:33.400 --> 00:44:34.440
<v Speaker 1>ID there

00:44:35.320 --> 00:44:36.680
<v Speaker 1>to the yeah. Gotcha.

00:44:38.760 --> 00:44:41.480
<v Speaker 1>And then in the before you publish that,

00:44:41.480 --> 00:44:42.839
<v Speaker 1>go to the

00:44:43.815 --> 00:44:44.695
<v Speaker 1>package

00:44:44.695 --> 00:44:46.855
<v Speaker 1>script as well because it I think it

00:44:46.855 --> 00:44:48.855
<v Speaker 1>has the wrong name. No. I changed it.

00:44:48.855 --> 00:44:50.135
<v Speaker 1>Yeah. There you go. Oh, you did it.

00:44:50.135 --> 00:44:51.815
<v Speaker 1>Okay. I missed that. Okay.

00:44:53.255 --> 00:44:53.895
<v Speaker 0>So

00:44:54.455 --> 00:44:55.415
<v Speaker 0>let's see

00:44:55.734 --> 00:44:58.600
<v Speaker 0>what happens. So we can do a PMPM

00:44:58.600 --> 00:44:59.400
<v Speaker 0>install,

00:45:07.400 --> 00:45:08.680
<v Speaker 0>and we can add this.

00:45:09.805 --> 00:45:11.005
<v Speaker 0>Oh, no. We don't have to add it

00:45:11.005 --> 00:45:13.885
<v Speaker 0>because you're doing a global PMPM dev. Right?

00:45:13.885 --> 00:45:14.525
<v Speaker 0>So

00:45:18.125 --> 00:45:20.285
<v Speaker 0>I should be able to just

00:45:20.605 --> 00:45:21.885
<v Speaker 0>do PMPM.

00:45:23.049 --> 00:45:24.810
<v Speaker 0>I could check PMPM

00:45:25.530 --> 00:45:26.650
<v Speaker 0>publish

00:45:27.369 --> 00:45:27.849
<v Speaker 0>dev.

00:45:36.755 --> 00:45:38.275
<v Speaker 1>Oh, yeah. It's probably just because it's not

00:45:38.275 --> 00:45:40.435
<v Speaker 0>started. Yeah. Okay. Yeah. Yeah.

00:45:50.300 --> 00:45:52.460
<v Speaker 0>Requie the object not defined.

00:45:53.420 --> 00:45:54.780
<v Speaker 1>It's still okay.

00:45:55.420 --> 00:45:55.660
<v Speaker 1>What?

00:46:00.865 --> 00:46:02.625
<v Speaker 1>Oh, yeah. You don't have a you don't

00:46:02.625 --> 00:46:03.585
<v Speaker 1>have a query

00:46:03.985 --> 00:46:04.945
<v Speaker 1>in here.

00:46:06.065 --> 00:46:07.745
<v Speaker 1>But, no, you shouldn't have to.

00:46:08.545 --> 00:46:10.225
<v Speaker 0>I don't think we have a query anywhere

00:46:10.225 --> 00:46:10.865
<v Speaker 0>else.

00:46:11.665 --> 00:46:14.190
<v Speaker 1>No. You're right. Alright. Let's see if my

00:46:14.190 --> 00:46:17.150
<v Speaker 0>local check it out on my port. Right?

00:46:17.150 --> 00:46:17.710
<v Speaker 0>So

00:46:20.190 --> 00:46:22.350
<v Speaker 0>well, that might be an issue. Oh, no.

00:46:22.350 --> 00:46:22.830
<v Speaker 0>There we go.

00:46:25.925 --> 00:46:27.525
<v Speaker 1>Oh oh, I I know what happened. You

00:46:27.525 --> 00:46:29.365
<v Speaker 1>you actually stopped the whole thing. Right? So

00:46:29.365 --> 00:46:32.484
<v Speaker 1>if you stop it, the in memory representation

00:46:32.484 --> 00:46:34.165
<v Speaker 1>goes away in local devs. So you need

00:46:34.165 --> 00:46:34.645
<v Speaker 1>to

00:46:35.125 --> 00:46:36.885
<v Speaker 1>start over. So you need to,

00:46:37.365 --> 00:46:40.244
<v Speaker 1>you know, publish products, reviews, then link now

00:46:40.244 --> 00:46:41.125
<v Speaker 1>that everything is running.

00:46:44.220 --> 00:46:45.420
<v Speaker 0>Right. Okay.

00:46:49.180 --> 00:46:50.540
<v Speaker 1>We don't persist

00:46:50.940 --> 00:46:52.060
<v Speaker 1>the the state.

00:46:58.934 --> 00:47:00.055
<v Speaker 0>One link.

00:47:03.335 --> 00:47:04.375
<v Speaker 1>Oh. Okay.

00:47:22.164 --> 00:47:24.165
<v Speaker 0>I'm just breaking everything today.

00:47:24.644 --> 00:47:25.605
<v Speaker 0>There we go.

00:47:27.924 --> 00:47:29.605
<v Speaker 1>Alright. Here you go.

00:47:29.924 --> 00:47:30.885
<v Speaker 1>Well done.

00:47:33.204 --> 00:47:35.605
<v Speaker 0>Complete It worked. Random tangent, but

00:47:36.530 --> 00:47:38.050
<v Speaker 0>that is super powerful.

00:47:38.290 --> 00:47:40.690
<v Speaker 0>I am so happy and impressed.

00:47:41.250 --> 00:47:43.410
<v Speaker 0>And I had no idea that feature existed

00:47:43.570 --> 00:47:44.450
<v Speaker 0>whatsoever.

00:47:45.250 --> 00:47:46.770
<v Speaker 0>So, yeah, that's amazing.

00:47:48.609 --> 00:47:50.930
<v Speaker 0>Alright. Thank you for entertaining me. Let's get

00:47:50.930 --> 00:47:51.490
<v Speaker 0>back on track.

00:47:52.085 --> 00:47:52.724
<v Speaker 0>So

00:47:53.204 --> 00:47:54.565
<v Speaker 0>that's usually powerful.

00:47:56.005 --> 00:47:57.845
<v Speaker 0>And let's focus on that use case just

00:47:57.845 --> 00:47:59.605
<v Speaker 0>so that it's really cement that into people's

00:47:59.605 --> 00:48:00.165
<v Speaker 0>heads.

00:48:00.644 --> 00:48:03.125
<v Speaker 0>You're working with a whole bunch of teams.

00:48:03.125 --> 00:48:05.765
<v Speaker 0>You're all working towards one API

00:48:05.765 --> 00:48:08.300
<v Speaker 0>and, you know, traditional routes would be we

00:48:08.300 --> 00:48:11.020
<v Speaker 0>all build our different REST stuff. We stick

00:48:11.020 --> 00:48:13.340
<v Speaker 0>an API gateway in front of it and

00:48:13.340 --> 00:48:15.660
<v Speaker 0>then we hope that everything works together. But

00:48:15.660 --> 00:48:17.980
<v Speaker 0>what Grafbase is doing is different. The teams

00:48:17.980 --> 00:48:21.414
<v Speaker 0>are independently working on their own small little

00:48:21.414 --> 00:48:22.214
<v Speaker 0>part of a made

00:48:22.775 --> 00:48:24.775
<v Speaker 0>global graph, their own subgraph,

00:48:25.095 --> 00:48:26.694
<v Speaker 0>to find in their own types, their own

00:48:26.694 --> 00:48:28.455
<v Speaker 0>resolvers, and we're getting data.

00:48:28.775 --> 00:48:30.535
<v Speaker 0>They can then take their graphs that they're

00:48:30.535 --> 00:48:32.855
<v Speaker 0>happy with, they've tested, all good,

00:48:33.335 --> 00:48:34.375
<v Speaker 0>they publish it,

00:48:34.880 --> 00:48:36.880
<v Speaker 0>and the federated graph starts to pick all

00:48:36.880 --> 00:48:38.240
<v Speaker 0>this up. And we actually seen that in

00:48:38.240 --> 00:48:40.720
<v Speaker 0>in progress. Right? We published one. We checked

00:48:40.720 --> 00:48:42.160
<v Speaker 0>the schema. We published one. We checked the

00:48:42.160 --> 00:48:44.320
<v Speaker 0>schema. We're enriching it all the time.

00:48:45.120 --> 00:48:47.360
<v Speaker 0>Then there was the tangent. Okay. We realized

00:48:47.360 --> 00:48:49.920
<v Speaker 0>these subgraphs can actually extend other parts of

00:48:49.920 --> 00:48:50.320
<v Speaker 0>the graph.

00:48:51.405 --> 00:48:52.685
<v Speaker 0>I'm

00:48:52.685 --> 00:48:54.845
<v Speaker 0>assuming there's a schema registry that if my

00:48:54.845 --> 00:48:56.925
<v Speaker 0>link service tried to add ratings

00:48:56.925 --> 00:48:57.885
<v Speaker 0>or reviews,

00:48:58.125 --> 00:49:00.045
<v Speaker 0>we would get that error during publish and

00:49:00.045 --> 00:49:01.805
<v Speaker 0>say, sorry, you can't do this. This this

00:49:01.805 --> 00:49:02.605
<v Speaker 0>already exists.

00:49:05.140 --> 00:49:06.260
<v Speaker 0>That workflow

00:49:07.860 --> 00:49:10.340
<v Speaker 0>has gotta be an enabler for teams. It's

00:49:10.340 --> 00:49:11.700
<v Speaker 0>gotta be able they've gotta be able to

00:49:11.700 --> 00:49:13.700
<v Speaker 0>increase their velocity. They don't have to

00:49:14.020 --> 00:49:16.100
<v Speaker 0>worry too much about stepping on each other's

00:49:16.100 --> 00:49:16.980
<v Speaker 0>toes because

00:49:17.805 --> 00:49:19.244
<v Speaker 0>the graph consolidation,

00:49:19.244 --> 00:49:21.244
<v Speaker 0>the schema, all of that works together to

00:49:21.244 --> 00:49:23.005
<v Speaker 0>give them something that is guaranteed to be

00:49:23.005 --> 00:49:25.085
<v Speaker 0>correct or it'll fail to publish. Again, I

00:49:25.085 --> 00:49:26.605
<v Speaker 0>don't wanna put words in your mouth, but

00:49:26.605 --> 00:49:29.165
<v Speaker 0>does that sound correct? Is that what's happening

00:49:29.165 --> 00:49:29.405
<v Speaker 0>here?

00:49:30.420 --> 00:49:31.220
<v Speaker 1>Absolutely.

00:49:31.220 --> 00:49:33.220
<v Speaker 1>I mean, it it's it's exactly right. It's

00:49:33.220 --> 00:49:35.460
<v Speaker 1>built with this very use case in mind

00:49:35.460 --> 00:49:36.260
<v Speaker 1>where

00:49:36.500 --> 00:49:38.660
<v Speaker 1>your team evolves from

00:49:39.059 --> 00:49:40.580
<v Speaker 1>one monolithic

00:49:41.059 --> 00:49:43.300
<v Speaker 1>code base and graph into

00:49:43.300 --> 00:49:45.140
<v Speaker 1>multiple subgraphs. And

00:49:45.940 --> 00:49:49.035
<v Speaker 1>it's really, really nice to have some guardrails

00:49:49.435 --> 00:49:52.875
<v Speaker 1>around that and during CICD catch

00:49:53.195 --> 00:49:55.515
<v Speaker 1>issues so that when it goes to production,

00:49:55.515 --> 00:49:57.035
<v Speaker 1>you have confidence that

00:49:57.435 --> 00:49:58.635
<v Speaker 1>it should work. You know?

00:50:00.210 --> 00:50:02.369
<v Speaker 0>Okay. You mentioned CITD.

00:50:02.369 --> 00:50:04.369
<v Speaker 0>Well, I think that loops us nicely into

00:50:04.609 --> 00:50:06.530
<v Speaker 0>let's get this into

00:50:07.490 --> 00:50:08.290
<v Speaker 0>production.

00:50:09.810 --> 00:50:10.210
<v Speaker 0>And,

00:50:10.930 --> 00:50:12.130
<v Speaker 0>we could

00:50:12.725 --> 00:50:13.605
<v Speaker 0>repeat

00:50:13.685 --> 00:50:14.405
<v Speaker 0>those

00:50:14.485 --> 00:50:17.045
<v Speaker 0>published steps that we've done, but you actually

00:50:17.045 --> 00:50:19.685
<v Speaker 0>have an integration with GitHub to automate this

00:50:19.685 --> 00:50:20.965
<v Speaker 0>for people. Right?

00:50:21.685 --> 00:50:22.405
<v Speaker 1>Yes.

00:50:22.485 --> 00:50:23.205
<v Speaker 1>Exactly.

00:50:23.525 --> 00:50:25.365
<v Speaker 0>Okay. So I guess the first thing I

00:50:25.365 --> 00:50:26.805
<v Speaker 0>need to do is,

00:50:27.579 --> 00:50:29.420
<v Speaker 0>you know, we can stop testing this. We're

00:50:29.420 --> 00:50:30.940
<v Speaker 0>happy with it. I'll even just kind of

00:50:30.940 --> 00:50:32.380
<v Speaker 0>shut this window down.

00:50:32.780 --> 00:50:34.060
<v Speaker 0>We're in the top level.

00:50:34.540 --> 00:50:37.099
<v Speaker 0>I can just do my YOLO commit. In

00:50:37.099 --> 00:50:38.940
<v Speaker 0>fact, my workspace, has that got a wildcard

00:50:38.940 --> 00:50:41.099
<v Speaker 0>in it? Yeah. Cool. I was wondering how

00:50:41.099 --> 00:50:41.660
<v Speaker 0>that worked there.

00:50:43.315 --> 00:50:45.555
<v Speaker 0>We could do get in it.

00:50:48.035 --> 00:50:49.155
<v Speaker 0>Get at

00:50:51.315 --> 00:50:54.355
<v Speaker 0>ship being dot one. Right? This is it.

00:50:54.355 --> 00:50:56.115
<v Speaker 0>We're gonna start making money.

00:50:56.915 --> 00:50:58.755
<v Speaker 0>And I can push this.

00:50:59.769 --> 00:51:01.130
<v Speaker 0>Remote

00:51:01.450 --> 00:51:02.490
<v Speaker 0>l s.

00:51:02.569 --> 00:51:03.930
<v Speaker 0>Oh, list.

00:51:06.730 --> 00:51:08.490
<v Speaker 0>Why can I never remember how to do

00:51:08.490 --> 00:51:08.730
<v Speaker 0>that?

00:51:13.515 --> 00:51:14.795
<v Speaker 0>Don't know why I bother trying to use

00:51:14.795 --> 00:51:15.835
<v Speaker 0>the get commands.

00:51:16.155 --> 00:51:18.315
<v Speaker 0>So this is your upstream which we don't

00:51:18.315 --> 00:51:18.955
<v Speaker 0>need

00:51:20.555 --> 00:51:22.395
<v Speaker 0>and this is my federation. Okay. So we

00:51:22.395 --> 00:51:24.395
<v Speaker 0>can do a get push origin

00:51:24.635 --> 00:51:25.115
<v Speaker 0>main.

00:51:27.890 --> 00:51:29.410
<v Speaker 0>Now, that's not gonna do anything by default

00:51:29.410 --> 00:51:31.010
<v Speaker 0>yet because we've not hooked anything up. But

00:51:31.010 --> 00:51:33.650
<v Speaker 0>if we do go to GitHub,

00:51:36.770 --> 00:51:38.450
<v Speaker 0>I've got my ship b one here.

00:51:39.375 --> 00:51:41.775
<v Speaker 0>Shall we use the the Grafbase UI to

00:51:41.775 --> 00:51:44.175
<v Speaker 0>connect this all up and deploy to production?

00:51:44.735 --> 00:51:45.455
<v Speaker 1>Let's do it.

00:51:52.359 --> 00:51:54.280
<v Speaker 0>So let's sign in

00:52:02.119 --> 00:52:03.800
<v Speaker 0>and

00:52:04.925 --> 00:52:06.365
<v Speaker 0>create project.

00:52:09.565 --> 00:52:11.645
<v Speaker 0>I'm gonna have to adjust my permissions.

00:52:18.859 --> 00:52:21.500
<v Speaker 0>Federation demo. So I'm just given the Grafbase

00:52:21.500 --> 00:52:23.020
<v Speaker 0>application access

00:52:24.059 --> 00:52:25.420
<v Speaker 0>to what we need.

00:52:25.500 --> 00:52:26.859
<v Speaker 0>Here's my passkey.

00:52:28.140 --> 00:52:30.539
<v Speaker 1>Such a nice upgrade passkey.

00:52:30.755 --> 00:52:32.995
<v Speaker 0>Yeah. 100%.

00:52:36.195 --> 00:52:38.035
<v Speaker 0>Let's give this a wee refresh.

00:52:38.115 --> 00:52:40.515
<v Speaker 0>There we go. So I could just import

00:52:40.515 --> 00:52:41.315
<v Speaker 0>this repository.

00:52:43.380 --> 00:52:44.980
<v Speaker 0>I've never done this before, I don't know

00:52:44.980 --> 00:52:46.020
<v Speaker 0>what this looks like.

00:52:47.140 --> 00:52:49.700
<v Speaker 1>Yeah. So the two things to pay attention

00:52:49.700 --> 00:52:51.299
<v Speaker 1>to. One is the name of this. Because

00:52:51.299 --> 00:52:52.740
<v Speaker 1>I think the first thing you wanna do

00:52:52.740 --> 00:52:54.579
<v Speaker 1>is the gateway.

00:52:54.819 --> 00:52:57.140
<v Speaker 1>Right? You probably wanna give it federation demo

00:52:57.140 --> 00:52:59.059
<v Speaker 1>dash gateway or just the gateway.

00:52:59.664 --> 00:53:00.464
<v Speaker 0>Mhmm.

00:53:01.345 --> 00:53:03.424
<v Speaker 1>And then the root folder is gonna be

00:53:03.424 --> 00:53:04.945
<v Speaker 1>dot slash apps

00:53:05.265 --> 00:53:06.705
<v Speaker 1>slash gateway.

00:53:07.265 --> 00:53:08.865
<v Speaker 1>And that's it. If you have any end

00:53:08.865 --> 00:53:10.144
<v Speaker 1>bars, you can add them here, but we

00:53:10.144 --> 00:53:11.664
<v Speaker 1>don't. So go ahead and deploy.

00:53:14.730 --> 00:53:16.490
<v Speaker 0>Nice confetti. Confetti.

00:53:17.930 --> 00:53:19.450
<v Speaker 1>Yeah. We gotta celebrate.

00:53:20.730 --> 00:53:23.130
<v Speaker 1>Alright. So let's So now Should we take

00:53:23.130 --> 00:53:23.610
<v Speaker 0>a look at this?

00:53:26.905 --> 00:53:28.585
<v Speaker 0>Oh, we don't get Pathfinder

00:53:28.825 --> 00:53:29.545
<v Speaker 0>or

00:53:29.705 --> 00:53:32.105
<v Speaker 1>do we? Yeah. It's in the dashboard. It's

00:53:32.105 --> 00:53:34.345
<v Speaker 1>not Oh, yeah. Oh, yeah. Sure. Okay. Yeah.

00:53:34.345 --> 00:53:36.585
<v Speaker 1>Yeah. Well, okay. We'll give that a second.

00:53:36.585 --> 00:53:38.985
<v Speaker 1>So if you gotta it's it's usually quite

00:53:38.985 --> 00:53:40.985
<v Speaker 1>quick. I'm surprised it takes this long.

00:53:41.730 --> 00:53:44.210
<v Speaker 0>There we go. There you go. Okay. Yeah.

00:53:44.210 --> 00:53:47.410
<v Speaker 1>Empty, say, no nothing in schema yet.

00:53:48.050 --> 00:53:50.050
<v Speaker 1>And then go ahead and go to the

00:53:50.050 --> 00:53:50.610
<v Speaker 1>home

00:53:50.850 --> 00:53:52.530
<v Speaker 1>account overview and then create

00:53:53.825 --> 00:53:56.625
<v Speaker 1>three more, I guess, product reviews and links.

00:53:56.944 --> 00:53:57.825
<v Speaker 0>K.

00:53:58.144 --> 00:53:59.505
<v Speaker 0>So product

00:54:01.984 --> 00:54:02.945
<v Speaker 0>apps

00:54:03.025 --> 00:54:04.944
<v Speaker 0>product. Let me just copy that for next

00:54:04.944 --> 00:54:05.585
<v Speaker 0>time.

00:54:07.744 --> 00:54:08.065
<v Speaker 1>And

00:54:08.760 --> 00:54:24.760
<v Speaker 0>reviews

00:54:21.734 --> 00:54:22.535
<v Speaker 0>and

00:54:23.895 --> 00:54:24.295
<v Speaker 0>links.

00:54:36.440 --> 00:54:37.160
<v Speaker 0>Nice.

00:54:38.280 --> 00:54:38.920
<v Speaker 0>So

00:54:40.359 --> 00:54:41.160
<v Speaker 0>this is

00:54:41.800 --> 00:54:43.160
<v Speaker 0>oh, let well, let's come back to that.

00:54:43.160 --> 00:54:45.000
<v Speaker 0>Was wondering. Right? This is obviously connected to

00:54:45.000 --> 00:54:46.440
<v Speaker 0>get there. So if I do get pushed,

00:54:46.440 --> 00:54:48.040
<v Speaker 0>it's gonna do updates. We can confirm that

00:54:48.040 --> 00:54:48.840
<v Speaker 0>in a minute.

00:54:49.240 --> 00:54:51.265
<v Speaker 0>If we come over to our gateway I'm

00:54:51.265 --> 00:54:53.425
<v Speaker 0>assuming right now we we still don't have

00:54:53.425 --> 00:54:54.465
<v Speaker 0>any yeah.

00:54:55.265 --> 00:54:56.465
<v Speaker 0>So how do we

00:54:57.985 --> 00:54:59.825
<v Speaker 0>how do we see we're happy with our

00:54:59.825 --> 00:55:01.985
<v Speaker 0>subgraph? We wanna publish it to the federated.

00:55:03.130 --> 00:55:05.370
<v Speaker 1>Right. So what you wanna do here

00:55:05.930 --> 00:55:08.890
<v Speaker 1>is you go to the overview there, the

00:55:08.890 --> 00:55:10.250
<v Speaker 1>left tab

00:55:10.490 --> 00:55:12.330
<v Speaker 1>far left tab, and then you can see

00:55:12.330 --> 00:55:15.130
<v Speaker 1>the subgraph section. There's a snippet there. You

00:55:15.130 --> 00:55:15.690
<v Speaker 1>can

00:55:16.330 --> 00:55:17.770
<v Speaker 1>you can copy.

00:55:19.164 --> 00:55:19.885
<v Speaker 1>Yep.

00:55:21.164 --> 00:55:22.365
<v Speaker 1>And then

00:55:23.325 --> 00:55:25.805
<v Speaker 1>but what you need first is the schema

00:55:25.805 --> 00:55:27.565
<v Speaker 1>STL. Right? So this

00:55:27.805 --> 00:55:29.565
<v Speaker 1>this is typically something you do in the

00:55:29.565 --> 00:55:30.204
<v Speaker 1>CICD,

00:55:30.410 --> 00:55:32.410
<v Speaker 1>not in the terminal, like, one ops. But

00:55:32.410 --> 00:55:34.010
<v Speaker 1>for the demo, let's go ahead and do

00:55:34.010 --> 00:55:35.530
<v Speaker 1>that. So what you wanna do is Yeah.

00:55:35.930 --> 00:55:39.130
<v Speaker 1>Go to the products of Graf overview

00:55:39.370 --> 00:55:40.490
<v Speaker 1>in the dashboard.

00:55:40.890 --> 00:55:41.930
<v Speaker 0>Oh, yep.

00:55:42.410 --> 00:55:44.330
<v Speaker 1>I I open a new tab or something.

00:55:44.330 --> 00:55:47.315
<v Speaker 1>Okay. Fine. Go to the products one,

00:55:49.714 --> 00:55:51.635
<v Speaker 1>and then copy the URL.

00:55:52.595 --> 00:55:54.995
<v Speaker 1>So take the one the the bottom one.

00:55:55.555 --> 00:55:56.755
<v Speaker 0>Yep. Yep.

00:55:56.835 --> 00:55:58.675
<v Speaker 1>And then you go in the terminal.

00:55:59.730 --> 00:56:03.170
<v Speaker 1>You can do GB, just an alias install

00:56:03.170 --> 00:56:04.210
<v Speaker 1>introspect.

00:56:05.650 --> 00:56:08.770
<v Speaker 1>GB introspect or the Grafbase introspect,

00:56:08.770 --> 00:56:09.570
<v Speaker 1>and then

00:56:09.810 --> 00:56:10.930
<v Speaker 1>you paste the URL.

00:56:14.615 --> 00:56:17.815
<v Speaker 1>So this shows you the STL here. So

00:56:17.815 --> 00:56:20.295
<v Speaker 1>you'll pipe that to schema or, yeah, STL

00:56:20.295 --> 00:56:21.655
<v Speaker 1>dot GraphQL.

00:56:22.695 --> 00:56:24.535
<v Speaker 1>It's fine. And then

00:56:24.695 --> 00:56:26.695
<v Speaker 1>you go back to the dashboard for the

00:56:26.695 --> 00:56:27.175
<v Speaker 1>gateway,

00:56:29.880 --> 00:56:32.200
<v Speaker 1>and then you copy that snippet.

00:56:32.440 --> 00:56:33.640
<v Speaker 1>And that's how you

00:56:34.680 --> 00:56:37.640
<v Speaker 1>you wanna replace the the name. There you

00:56:37.640 --> 00:56:38.200
<v Speaker 1>go.

00:56:39.160 --> 00:56:41.079
<v Speaker 1>URL is the one you use above.

00:56:45.505 --> 00:56:47.585
<v Speaker 1>And then give it the product's

00:56:47.985 --> 00:56:48.625
<v Speaker 1>name.

00:56:51.745 --> 00:56:52.865
<v Speaker 1>That should be

00:56:53.505 --> 00:56:54.945
<v Speaker 1>what you need to publish

00:56:55.105 --> 00:56:56.545
<v Speaker 1>the first subgraph.

00:56:58.305 --> 00:56:59.185
<v Speaker 1>Oh, yeah. Okay.

00:57:00.039 --> 00:57:02.440
<v Speaker 0>Oh, because I I copied the MPX. Oh,

00:57:02.440 --> 00:57:03.160
<v Speaker 1>yeah. Yeah.

00:57:07.319 --> 00:57:09.880
<v Speaker 1>Okay. Alright. So let's refresh this.

00:57:10.440 --> 00:57:12.119
<v Speaker 0>I don't even have to. It's already showing

00:57:12.119 --> 00:57:13.240
<v Speaker 0>up, but there we go.

00:57:14.095 --> 00:57:15.775
<v Speaker 0>We now have our subgraph.

00:57:17.455 --> 00:57:18.175
<v Speaker 1>Yes.

00:57:23.855 --> 00:57:24.735
<v Speaker 0>Okay. Maybe?

00:57:25.295 --> 00:57:26.255
<v Speaker 1>Interesting.

00:57:26.255 --> 00:57:27.610
<v Speaker 1>So so what happens is Oh, there we

00:57:27.610 --> 00:57:28.570
<v Speaker 1>go. Registry.

00:57:28.570 --> 00:57:30.250
<v Speaker 1>Yeah. There is the registry

00:57:30.250 --> 00:57:32.170
<v Speaker 1>which triggers the deploy. So if you go

00:57:32.170 --> 00:57:34.250
<v Speaker 1>to the change log tab,

00:57:35.610 --> 00:57:38.170
<v Speaker 1>you can see what you just pushed here.

00:57:38.330 --> 00:57:40.810
<v Speaker 1>And then if you go to the deployments

00:57:40.810 --> 00:57:41.290
<v Speaker 1>tab,

00:57:42.155 --> 00:57:44.475
<v Speaker 1>you'll see that the schema registry

00:57:44.875 --> 00:57:45.915
<v Speaker 1>enabled

00:57:46.474 --> 00:57:48.795
<v Speaker 1>another deploy. There's a deployments tab there. There

00:57:48.795 --> 00:57:50.875
<v Speaker 1>you go. So you can see that, you

00:57:50.875 --> 00:57:53.915
<v Speaker 1>know, the registry initiated the deployment. Once the

00:57:53.915 --> 00:57:55.915
<v Speaker 1>deployment is done, you see the updated

00:57:56.395 --> 00:57:56.875
<v Speaker 1>version.

00:57:58.450 --> 00:58:01.490
<v Speaker 1>That This happens every time someone publishes

00:58:01.490 --> 00:58:02.530
<v Speaker 1>a new schema.

00:58:03.330 --> 00:58:05.250
<v Speaker 0>Okay. And I'm assuming there's a GitHub action

00:58:05.250 --> 00:58:07.650
<v Speaker 0>to automate that in a a workflow.

00:58:10.164 --> 00:58:13.204
<v Speaker 1>Yes. Exactly. So another thing we haven't touched

00:58:13.204 --> 00:58:15.045
<v Speaker 1>on is checks. So, typically, you run a

00:58:15.045 --> 00:58:17.925
<v Speaker 1>schema check if there's a checks out there,

00:58:18.404 --> 00:58:19.925
<v Speaker 1>which is essentially kind of

00:58:21.204 --> 00:58:22.005
<v Speaker 1>linting

00:58:22.244 --> 00:58:24.085
<v Speaker 1>operation checks, that kind of stuff you can

00:58:24.085 --> 00:58:25.340
<v Speaker 1>do, but I don't think we need to

00:58:25.340 --> 00:58:27.580
<v Speaker 1>go into it now. But typically run that,

00:58:27.580 --> 00:58:28.940
<v Speaker 1>assuming it's good,

00:58:29.180 --> 00:58:31.260
<v Speaker 1>you then go ahead and publish it. Otherwise,

00:58:31.500 --> 00:58:33.020
<v Speaker 1>the check becomes red,

00:58:33.260 --> 00:58:35.660
<v Speaker 1>which means there's something wrong with the the

00:58:35.660 --> 00:58:36.780
<v Speaker 1>schema you're trying to publish.

00:58:38.125 --> 00:58:39.085
<v Speaker 0>Nice.

00:58:41.085 --> 00:58:43.245
<v Speaker 0>Very, very cool. I like this. You also

00:58:43.245 --> 00:58:44.605
<v Speaker 0>provide analytics,

00:58:45.965 --> 00:58:48.205
<v Speaker 0>and I've seen in the documentation earlier,

00:58:48.445 --> 00:58:49.645
<v Speaker 0>there's authorization

00:58:49.645 --> 00:58:50.845
<v Speaker 0>and caching as well.

00:58:51.700 --> 00:58:52.340
<v Speaker 1>But

00:58:52.500 --> 00:58:55.300
<v Speaker 1>Yeah. There's a lot that Grafbase is making

00:58:55.300 --> 00:58:56.740
<v Speaker 0>your life a lot easier if you wanna

00:58:56.740 --> 00:58:58.420
<v Speaker 0>build out a GraphQL API.

00:58:59.860 --> 00:59:01.860
<v Speaker 1>That that's the goal. I I think edge

00:59:01.860 --> 00:59:05.060
<v Speaker 1>caching could be potentially another episode, but

00:59:05.300 --> 00:59:07.704
<v Speaker 1>it's it's it's super

00:59:07.704 --> 00:59:10.345
<v Speaker 1>exciting, I think. Because if you think about

00:59:10.345 --> 00:59:12.265
<v Speaker 1>the fact that you have compute

00:59:12.665 --> 00:59:14.345
<v Speaker 1>that's globally deployed,

00:59:15.305 --> 00:59:17.785
<v Speaker 1>the caching layer comes with it. Right? So

00:59:17.785 --> 00:59:18.505
<v Speaker 1>you can

00:59:18.905 --> 00:59:22.680
<v Speaker 1>really, really quickly, like, get cash response times

00:59:23.320 --> 00:59:26.200
<v Speaker 1>for everyone in the world. Right? So ecommerce,

00:59:26.760 --> 00:59:28.360
<v Speaker 1>travel, logistics,

00:59:29.000 --> 00:59:30.520
<v Speaker 1>some of the kind of use cases that

00:59:30.520 --> 00:59:32.040
<v Speaker 1>use Grafbase to

00:59:32.840 --> 00:59:35.924
<v Speaker 1>speed up response times, but also to protect

00:59:35.924 --> 00:59:37.765
<v Speaker 1>their back end. You know? It might be

00:59:37.765 --> 00:59:40.805
<v Speaker 1>using a third party vendor that's legacy or

00:59:40.805 --> 00:59:41.445
<v Speaker 1>slow,

00:59:42.085 --> 00:59:45.204
<v Speaker 1>but you're doing this lookup constantly. Caching can

00:59:45.204 --> 00:59:46.244
<v Speaker 1>really help there.

00:59:46.964 --> 00:59:47.685
<v Speaker 0>Yeah.

00:59:47.924 --> 00:59:48.404
<v Speaker 0>Very nice.

00:59:49.500 --> 00:59:51.900
<v Speaker 0>I'm curious. There's obviously

00:59:52.300 --> 00:59:54.460
<v Speaker 0>the Grafbase API itself.

00:59:56.220 --> 00:59:58.220
<v Speaker 0>I I guess you build up a Grafbase.

00:59:58.220 --> 00:59:59.020
<v Speaker 0>Is that right?

01:00:00.460 --> 01:00:01.980
<v Speaker 0>Or should I not ask that question?

01:00:02.220 --> 01:00:03.420
<v Speaker 1>We're

01:00:03.025 --> 01:00:05.585
<v Speaker 1>yeah. We we we no. No. No. You

01:00:05.585 --> 01:00:07.745
<v Speaker 1>should it's it's a really good question. We

01:00:07.825 --> 01:00:08.705
<v Speaker 1>we are

01:00:11.185 --> 01:00:13.105
<v Speaker 1>we are we are in in on the

01:00:13.185 --> 01:00:14.945
<v Speaker 1>we're in the process of dogfooding it. It's

01:00:14.945 --> 01:00:17.025
<v Speaker 1>not really quite there yet, but we will

01:00:17.025 --> 01:00:19.700
<v Speaker 1>get there this year. So Grafbase will be

01:00:19.700 --> 01:00:21.700
<v Speaker 1>built on Grafbase. And the reason is because

01:00:21.700 --> 01:00:23.860
<v Speaker 1>we haven't enabled support for

01:00:24.180 --> 01:00:25.619
<v Speaker 1>yet

01:00:25.619 --> 01:00:28.099
<v Speaker 1>as a customer of Grafbase. So we're building

01:00:28.099 --> 01:00:30.500
<v Speaker 1>a Rust, obviously, and we don't support Rust

01:00:30.500 --> 01:00:33.220
<v Speaker 1>resolvers yet. But when we do, we will

01:00:33.220 --> 01:00:33.619
<v Speaker 1>be able to.

01:00:34.395 --> 01:00:35.675
<v Speaker 0>Okay. Awesome.

01:00:36.395 --> 01:00:37.195
<v Speaker 0>Alright.

01:00:37.275 --> 01:00:38.635
<v Speaker 0>We kinda took a bit of a tangent

01:00:38.635 --> 01:00:40.875
<v Speaker 0>with my link syncing there. But, you know,

01:00:40.875 --> 01:00:41.995
<v Speaker 0>we still have a little bit of time

01:00:41.995 --> 01:00:43.675
<v Speaker 0>left. Is there anything you think would be

01:00:43.675 --> 01:00:45.755
<v Speaker 0>worth showing to people before we go back

01:00:45.755 --> 01:00:47.515
<v Speaker 0>to the the talking and questions?

01:00:52.670 --> 01:00:54.590
<v Speaker 0>We never really did connectors.

01:00:55.869 --> 01:00:58.830
<v Speaker 1>Yeah. We can we can maybe glance at

01:00:58.830 --> 01:00:59.390
<v Speaker 1>them.

01:00:59.790 --> 01:01:01.390
<v Speaker 1>We could maybe try one if you want.

01:01:01.390 --> 01:01:02.830
<v Speaker 1>But we do have, like we said, the

01:01:02.830 --> 01:01:04.190
<v Speaker 1>concept of connectors and

01:01:05.035 --> 01:01:06.475
<v Speaker 1>you know, essentially,

01:01:06.475 --> 01:01:09.195
<v Speaker 1>all APIs are just data passing. Right? That's

01:01:09.195 --> 01:01:11.835
<v Speaker 1>really what it is. So we we

01:01:11.915 --> 01:01:14.715
<v Speaker 1>we saw this pattern of connecting a data

01:01:14.715 --> 01:01:17.515
<v Speaker 1>source, exposing fields in your API schema.

01:01:17.850 --> 01:01:19.450
<v Speaker 1>It's quite repetitive

01:01:19.450 --> 01:01:23.370
<v Speaker 1>and mundane, so we build connectors that introspect

01:01:23.930 --> 01:01:26.730
<v Speaker 1>your schema and then generate the API schema

01:01:26.730 --> 01:01:27.450
<v Speaker 1>for you.

01:01:27.930 --> 01:01:30.650
<v Speaker 1>Depending on the quality of that schema,

01:01:30.975 --> 01:01:33.215
<v Speaker 1>it can look really great. Sometimes it's a

01:01:33.215 --> 01:01:34.255
<v Speaker 1>bit more awkward.

01:01:34.815 --> 01:01:37.695
<v Speaker 1>You know, open API can really vary, so

01:01:37.695 --> 01:01:39.215
<v Speaker 1>I would say some of them are good.

01:01:39.215 --> 01:01:40.815
<v Speaker 1>Some of them are not so good. But

01:01:40.975 --> 01:01:42.815
<v Speaker 1>what we typically see is people use

01:01:44.120 --> 01:01:46.040
<v Speaker 1>what they can to generate, and then they

01:01:46.040 --> 01:01:48.040
<v Speaker 1>can extend and customize

01:01:48.680 --> 01:01:51.960
<v Speaker 1>with the configuration file like like we did

01:01:52.280 --> 01:01:54.360
<v Speaker 1>in the in the subgraphs. So that's it's

01:01:54.360 --> 01:01:56.040
<v Speaker 1>a really nice kind of way to just

01:01:56.280 --> 01:01:58.200
<v Speaker 1>speed up your time to market.

01:02:00.475 --> 01:02:01.115
<v Speaker 0>Nice.

01:02:01.595 --> 01:02:03.115
<v Speaker 0>Yeah. I think a good example here is

01:02:03.115 --> 01:02:05.035
<v Speaker 0>obviously you can connect us to GraphQL. But,

01:02:05.035 --> 01:02:06.555
<v Speaker 0>you know, hooking it up to Postgres or

01:02:06.555 --> 01:02:08.715
<v Speaker 0>MongoDB and getting that not having to worry

01:02:08.715 --> 01:02:11.595
<v Speaker 0>about those resolvers as a that'd be big

01:02:11.595 --> 01:02:13.675
<v Speaker 0>time saver for people. I like that feature

01:02:13.675 --> 01:02:14.315
<v Speaker 0>as well. Yeah.

01:02:15.860 --> 01:02:17.540
<v Speaker 0>Alright. Let's Maybe we

01:02:18.580 --> 01:02:20.100
<v Speaker 1>could just feature

01:02:20.100 --> 01:02:21.220
<v Speaker 1>or highlight

01:02:21.460 --> 01:02:24.180
<v Speaker 1>some of the experimental stuff. We have KV,

01:02:24.580 --> 01:02:26.500
<v Speaker 1>which is a kind of key value store.

01:02:26.500 --> 01:02:28.260
<v Speaker 1>It's built in to the resolvers.

01:02:28.875 --> 01:02:30.715
<v Speaker 1>It's globally distributed as well.

01:02:31.195 --> 01:02:32.715
<v Speaker 1>So you can use that to kind of

01:02:32.715 --> 01:02:33.435
<v Speaker 1>store

01:02:33.675 --> 01:02:34.875
<v Speaker 1>things or,

01:02:36.715 --> 01:02:39.195
<v Speaker 1>yeah, use it like Redis, but it lives

01:02:39.195 --> 01:02:41.435
<v Speaker 1>at the edge. It's pretty cool feature.

01:02:41.595 --> 01:02:43.275
<v Speaker 0>Alright. Let's be brave. Let's do it.

01:02:45.850 --> 01:02:46.490
<v Speaker 1>Yeah.

01:02:48.490 --> 01:02:50.090
<v Speaker 0>Alright. Let's go here.

01:02:50.250 --> 01:02:52.410
<v Speaker 0>So and no. We shouldn't do it. Let's

01:02:52.410 --> 01:02:54.810
<v Speaker 0>just let's replace my link service because, you

01:02:54.810 --> 01:02:56.410
<v Speaker 0>know, it's pretty useless anyway.

01:02:57.855 --> 01:02:58.735
<v Speaker 0>So

01:02:58.735 --> 01:03:01.295
<v Speaker 0>we have to end the config, enable k

01:03:01.295 --> 01:03:01.855
<v Speaker 0>v.

01:03:04.575 --> 01:03:05.455
<v Speaker 0>Like so.

01:03:07.615 --> 01:03:09.535
<v Speaker 0>Now, I'm assuming

01:03:11.270 --> 01:03:12.230
<v Speaker 0>we could

01:03:14.630 --> 01:03:16.230
<v Speaker 0>add some sort of

01:03:17.190 --> 01:03:20.070
<v Speaker 0>wouldn't be type. Right? We'd add a mutation

01:03:20.070 --> 01:03:21.830
<v Speaker 0>to store a value.

01:03:22.470 --> 01:03:23.430
<v Speaker 0>Store store a link. Right?

01:03:24.815 --> 01:03:27.375
<v Speaker 0>Yep. Look at this. Copilot's trying to get

01:03:27.375 --> 01:03:28.335
<v Speaker 0>on board here.

01:03:30.655 --> 01:03:32.495
<v Speaker 0>Let's see how close it gets. Right?

01:03:33.295 --> 01:03:35.135
<v Speaker 0>So let's use the documentation.

01:03:35.695 --> 01:03:37.215
<v Speaker 0>We want to do a quick start,

01:03:38.240 --> 01:03:41.440
<v Speaker 0>And this has given us a resolver function

01:03:41.440 --> 01:03:44.240
<v Speaker 0>to get. So let's go to set

01:03:45.119 --> 01:03:46.560
<v Speaker 0>and we get this.

01:03:47.119 --> 01:03:48.319
<v Speaker 0>So copy

01:03:50.765 --> 01:03:52.525
<v Speaker 0>And I'll just leave this here.

01:03:56.445 --> 01:03:59.085
<v Speaker 1>Yeah. We don't support inline resolvers just yet,

01:03:59.085 --> 01:04:00.845
<v Speaker 1>but it's coming. So you need to create

01:04:00.845 --> 01:04:02.525
<v Speaker 1>separate resolver files.

01:04:03.900 --> 01:04:05.420
<v Speaker 0>Yeah. This has to go in a resolver

01:04:05.420 --> 01:04:08.140
<v Speaker 0>file. Right? Yeah. Yeah. Okay. For now. Okay.

01:04:08.140 --> 01:04:09.819
<v Speaker 0>So we'll just call this set dot t

01:04:09.819 --> 01:04:10.380
<v Speaker 0>s

01:04:12.059 --> 01:04:13.260
<v Speaker 0>where we export

01:04:13.260 --> 01:04:14.940
<v Speaker 0>and

01:04:16.944 --> 01:04:18.625
<v Speaker 0>we know that we could pull in this

01:04:18.625 --> 01:04:19.425
<v Speaker 0>route

01:04:22.464 --> 01:04:24.865
<v Speaker 0>and we can get the product ID.

01:04:25.984 --> 01:04:28.065
<v Speaker 0>So we'll use this as the key

01:04:29.105 --> 01:04:31.984
<v Speaker 0>and the value I'm assuming would be an

01:04:31.160 --> 01:04:32.040
<v Speaker 0>arg.

01:04:33.000 --> 01:04:34.280
<v Speaker 0>So we need this.

01:04:35.080 --> 01:04:35.800
<v Speaker 1>Yep.

01:04:37.000 --> 01:04:38.760
<v Speaker 0>And this would be arg, and we'll just

01:04:38.760 --> 01:04:39.960
<v Speaker 0>call this URL.

01:04:40.600 --> 01:04:42.600
<v Speaker 0>Not sure if that's gonna work, but

01:04:43.080 --> 01:04:44.600
<v Speaker 0>I think that looks okay to me.

01:04:46.395 --> 01:04:48.715
<v Speaker 1>Well, I think I think both both. The

01:04:48.715 --> 01:04:50.395
<v Speaker 1>key will be an arg too.

01:04:50.875 --> 01:04:52.635
<v Speaker 1>Like, you have an input arg.

01:04:52.715 --> 01:04:54.715
<v Speaker 1>You know Oh, yeah. Yeah. Object itself or

01:04:54.715 --> 01:04:57.515
<v Speaker 1>you have two input arg key value.

01:04:58.075 --> 01:04:59.995
<v Speaker 0>You're right. Yeah. Because we're not this doesn't

01:04:59.995 --> 01:05:02.049
<v Speaker 0>gonna be it's not we're not in line

01:05:02.049 --> 01:05:04.530
<v Speaker 0>of a product. This is a mutation query.

01:05:04.530 --> 01:05:06.290
<v Speaker 0>So yes. Yes. Which

01:05:06.770 --> 01:05:08.609
<v Speaker 0>means this now looks a bit silly, but

01:05:08.609 --> 01:05:09.330
<v Speaker 0>whatever.

01:05:09.410 --> 01:05:10.610
<v Speaker 0>It's okay.

01:05:11.170 --> 01:05:12.770
<v Speaker 0>So if we go back here, what I'm

01:05:12.770 --> 01:05:15.089
<v Speaker 0>not sure is what this mutation looks like.

01:05:15.089 --> 01:05:17.650
<v Speaker 0>So I'm gonna see, is there an example

01:05:18.685 --> 01:05:20.525
<v Speaker 0>rather than asking you to get it from

01:05:20.525 --> 01:05:21.405
<v Speaker 0>your head.

01:05:26.125 --> 01:05:27.725
<v Speaker 0>Mutation resolvers.

01:05:27.964 --> 01:05:28.685
<v Speaker 0>There we go.

01:05:31.940 --> 01:05:33.380
<v Speaker 0>And we'll call this

01:05:34.019 --> 01:05:35.220
<v Speaker 0>create link.

01:05:36.260 --> 01:05:38.339
<v Speaker 0>And we said that it needs an

01:05:39.539 --> 01:05:40.339
<v Speaker 0>ID

01:05:42.339 --> 01:05:43.380
<v Speaker 0>and a URL.

01:05:46.215 --> 01:05:47.175
<v Speaker 0>Like so.

01:05:47.255 --> 01:05:48.535
<v Speaker 0>And it returns.

01:05:49.495 --> 01:05:51.255
<v Speaker 0>We actually haven't said what returns, so I'll

01:05:51.255 --> 01:05:52.615
<v Speaker 0>just leave that as it is.

01:05:53.655 --> 01:05:55.095
<v Speaker 0>And we called it set.

01:05:55.815 --> 01:05:56.375
<v Speaker 0>So,

01:05:56.775 --> 01:05:58.695
<v Speaker 0>yeah, what what is the return here? Is

01:05:58.695 --> 01:05:59.495
<v Speaker 0>that just

01:06:00.650 --> 01:06:02.490
<v Speaker 0>because we're just in a k v set.

01:06:02.490 --> 01:06:04.650
<v Speaker 0>Should we be really returning the value?

01:06:05.370 --> 01:06:08.010
<v Speaker 1>Or Yeah. Sure. Alright. I mean, it doesn't

01:06:08.010 --> 01:06:09.850
<v Speaker 1>really matter. Yeah. Okay.

01:06:10.010 --> 01:06:12.650
<v Speaker 1>I mean, if the if it's a typically,

01:06:12.650 --> 01:06:13.690
<v Speaker 1>you return, like,

01:06:14.484 --> 01:06:16.565
<v Speaker 1>you know, the payload and there's a type

01:06:16.565 --> 01:06:18.565
<v Speaker 1>within there and if there's any errors. But

01:06:18.565 --> 01:06:20.325
<v Speaker 1>for now, you know, keep it simple.

01:06:20.565 --> 01:06:23.125
<v Speaker 0>Okay. Well, we're we're just

01:06:23.525 --> 01:06:25.765
<v Speaker 0>hacking this together to test out the KB.

01:06:25.765 --> 01:06:26.085
<v Speaker 0>So

01:06:27.120 --> 01:06:29.360
<v Speaker 0>let's go to our dev experience now. So

01:06:29.360 --> 01:06:31.120
<v Speaker 0>we're going back to link

01:06:31.520 --> 01:06:33.840
<v Speaker 0>and what we want to do is PNPM

01:06:33.840 --> 01:06:34.640
<v Speaker 0>dev.

01:06:36.160 --> 01:06:37.520
<v Speaker 0>Hopefully, it's not broken.

01:06:39.120 --> 01:06:40.800
<v Speaker 0>Seems happier than I expected.

01:06:43.435 --> 01:06:46.635
<v Speaker 0>And we go to path. Oh, my camera

01:06:46.635 --> 01:06:47.915
<v Speaker 0>just went off. I

01:06:50.155 --> 01:06:52.075
<v Speaker 0>wonder if it said battery exhausted before it

01:06:52.075 --> 01:06:52.875
<v Speaker 0>did that.

01:06:53.275 --> 01:06:54.234
<v Speaker 0>Let me grab my foot.

01:07:08.240 --> 01:07:08.640
<v Speaker 0>Okay.

01:07:13.085 --> 01:07:14.205
<v Speaker 0>Better. Okay.

01:07:17.485 --> 01:07:19.805
<v Speaker 0>So we don't have anything

01:07:20.365 --> 01:07:21.485
<v Speaker 0>here yet.

01:07:21.485 --> 01:07:21.725
<v Speaker 0>So

01:07:25.040 --> 01:07:26.480
<v Speaker 0>what did I get wrong?

01:07:32.400 --> 01:07:34.800
<v Speaker 1>Well, it's a mutation, so there's a set

01:07:34.960 --> 01:07:36.320
<v Speaker 1>a separate tab

01:07:37.015 --> 01:07:38.855
<v Speaker 1>in the in the UI. You see the

01:07:38.935 --> 01:07:40.615
<v Speaker 0>Oh. Mutation. Here you go.

01:07:41.415 --> 01:07:42.295
<v Speaker 0>Alright.

01:07:48.455 --> 01:07:48.775
<v Speaker 0>One.

01:07:51.670 --> 01:07:52.710
<v Speaker 0>Grafbase

01:07:52.710 --> 01:07:53.830
<v Speaker 0>dot com.

01:07:58.470 --> 01:08:00.550
<v Speaker 0>Do we just execute that like so?

01:08:01.910 --> 01:08:02.710
<v Speaker 0>Oh, yeah.

01:08:04.175 --> 01:08:06.015
<v Speaker 0>And that's the return value. Right?

01:08:06.655 --> 01:08:07.455
<v Speaker 0>Mhmm.

01:08:09.295 --> 01:08:09.855
<v Speaker 0>So now

01:08:15.615 --> 01:08:17.694
<v Speaker 1>And just while you do that, you know,

01:08:18.610 --> 01:08:20.050
<v Speaker 1>part of the DX you want to achieve

01:08:20.050 --> 01:08:22.290
<v Speaker 1>is you don't have to think about infrastructure.

01:08:22.290 --> 01:08:25.170
<v Speaker 1>You didn't have to brew install Redis

01:08:25.170 --> 01:08:27.729
<v Speaker 1>or set up any YAML files or anything.

01:08:27.729 --> 01:08:28.770
<v Speaker 1>It just works.

01:08:29.170 --> 01:08:32.050
<v Speaker 1>In development and in production, you have KB

01:08:32.050 --> 01:08:32.370
<v Speaker 1>store.

01:08:39.675 --> 01:08:41.194
<v Speaker 0>So I guess we'll need to write a

01:08:41.194 --> 01:08:43.594
<v Speaker 0>resolver to do the k v get. Right?

01:08:44.314 --> 01:08:45.034
<v Speaker 1>Yes.

01:08:45.115 --> 01:08:46.475
<v Speaker 1>You can hook it up to the one

01:08:46.475 --> 01:08:47.354
<v Speaker 1>you have, I guess. Right?

01:08:48.279 --> 01:08:49.560
<v Speaker 1>Just need to Oh, yeah. So we yeah.

01:08:49.560 --> 01:08:51.319
<v Speaker 0>We call this length, so then modify that

01:08:51.319 --> 01:08:53.960
<v Speaker 0>resolver. Okay. And that's what need to be

01:08:54.679 --> 01:08:56.359
<v Speaker 0>a ref

01:08:57.880 --> 01:08:58.760
<v Speaker 0>link

01:08:58.760 --> 01:08:59.559
<v Speaker 0>dot

01:08:59.560 --> 01:09:00.199
<v Speaker 0>list.

01:09:02.995 --> 01:09:05.234
<v Speaker 0>And then if we come to link,

01:09:06.035 --> 01:09:08.115
<v Speaker 0>let's take a look at the set example.

01:09:11.235 --> 01:09:13.715
<v Speaker 0>We can swap all of this though

01:09:15.660 --> 01:09:17.420
<v Speaker 0>and do a get

01:09:20.219 --> 01:09:21.019
<v Speaker 0>key

01:09:23.819 --> 01:09:25.739
<v Speaker 0>as long as we provide

01:09:27.739 --> 01:09:29.100
<v Speaker 0>arg or

01:09:29.100 --> 01:09:30.699
<v Speaker 0>expand this for key.

01:09:37.715 --> 01:09:38.594
<v Speaker 0>I think.

01:09:40.835 --> 01:09:43.234
<v Speaker 0>Challenge will be I do know IT and

01:09:43.234 --> 01:09:44.595
<v Speaker 0>URL is what we do in the set.

01:09:44.595 --> 01:09:45.154
<v Speaker 0>Right?

01:09:45.795 --> 01:09:46.274
<v Speaker 1>Yep.

01:09:52.000 --> 01:09:53.679
<v Speaker 0>Let's remove this product.

01:09:57.360 --> 01:09:58.800
<v Speaker 0>I don't know. How are you feeling about

01:09:58.800 --> 01:10:00.079
<v Speaker 0>that? Confident?

01:10:01.435 --> 01:10:03.275
<v Speaker 1>Yeah. Absolutely.

01:10:04.955 --> 01:10:05.675
<v Speaker 1>Alright.

01:10:10.155 --> 01:10:11.675
<v Speaker 0>So it's just compiling,

01:10:13.355 --> 01:10:13.995
<v Speaker 0>reloading.

01:10:19.600 --> 01:10:21.200
<v Speaker 0>Alright. Let's see.

01:10:24.960 --> 01:10:26.160
<v Speaker 0>Sure. It's my fault.

01:10:33.975 --> 01:10:35.895
<v Speaker 0>Alright. Let's walk let's step through it. We

01:10:35.895 --> 01:10:37.575
<v Speaker 0>have a type, we have an ID and

01:10:37.575 --> 01:10:38.455
<v Speaker 0>a URL.

01:10:39.735 --> 01:10:41.415
<v Speaker 0>We create something here.

01:10:43.440 --> 01:10:44.880
<v Speaker 0>We have a query.

01:10:46.800 --> 01:10:48.960
<v Speaker 0>So I'm assuming my k v get is

01:10:48.960 --> 01:10:50.800
<v Speaker 0>a bit wrong, but I made that up.

01:10:50.800 --> 01:10:51.760
<v Speaker 0>So that's

01:10:51.760 --> 01:10:53.040
<v Speaker 0>probably fair.

01:10:54.560 --> 01:10:56.320
<v Speaker 0>Let's come back to k v.

01:10:57.280 --> 01:10:58.800
<v Speaker 0>And I guess it's a list.

01:11:02.855 --> 01:11:05.094
<v Speaker 1>No. There's a guest as well. Okay. That's

01:11:05.094 --> 01:11:06.135
<v Speaker 1>the only one. Right?

01:11:10.934 --> 01:11:12.534
<v Speaker 1>Yeah. There I mean, it returns.

01:11:13.350 --> 01:11:15.750
<v Speaker 1>Might need to destruct. Oh, no. The problem

01:11:15.750 --> 01:11:19.110
<v Speaker 0>is then I'm

01:11:19.110 --> 01:11:20.630
<v Speaker 0>doing a get, but my

01:11:20.949 --> 01:11:23.030
<v Speaker 0>thing here was to return a list, but

01:11:23.030 --> 01:11:25.429
<v Speaker 0>it's actually just gonna be one link stored

01:11:25.429 --> 01:11:26.550
<v Speaker 0>at the key. Right?

01:11:27.695 --> 01:11:28.335
<v Speaker 0>Mhmm.

01:11:28.655 --> 01:11:30.015
<v Speaker 1>But I think you also need to think

01:11:30.015 --> 01:11:32.175
<v Speaker 1>of the return. Like, you need to destruct

01:11:32.975 --> 01:11:35.375
<v Speaker 1>like, look at the example and docs and

01:11:35.375 --> 01:11:37.055
<v Speaker 1>what you're doing there. You're just returning the

01:11:37.055 --> 01:11:37.775
<v Speaker 1>whole thing.

01:11:38.335 --> 01:11:39.135
<v Speaker 1>You need to, like

01:11:40.290 --> 01:11:41.890
<v Speaker 0>I guess I need to return the type

01:11:41.890 --> 01:11:44.210
<v Speaker 0>with the key and the URL with the

01:11:44.210 --> 01:11:44.850
<v Speaker 0>value.

01:11:47.010 --> 01:11:49.650
<v Speaker 1>Well, you're it's expecting a string, isn't it?

01:11:49.650 --> 01:11:50.850
<v Speaker 1>Or did you change that?

01:11:52.395 --> 01:11:54.155
<v Speaker 1>Oh, no. Sorry. Sorry. This is the get.

01:11:54.155 --> 01:11:55.835
<v Speaker 0>This is the get. Yeah. Yeah. I mean,

01:11:55.835 --> 01:11:57.755
<v Speaker 0>we could update we could update the mutations

01:11:57.755 --> 01:11:58.475
<v Speaker 0>also.

01:11:59.675 --> 01:12:01.995
<v Speaker 0>You're like, don't touch anything. Just make it

01:12:01.995 --> 01:12:03.114
<v Speaker 1>work. Alright.

01:12:03.835 --> 01:12:04.555
<v Speaker 1>That's okay.

01:12:05.640 --> 01:12:07.960
<v Speaker 0>Alright. Let's let's see where we are now.

01:12:07.960 --> 01:12:09.400
<v Speaker 0>Pathfinder.

01:12:12.679 --> 01:12:15.080
<v Speaker 1>But I think you need to, like, destruct

01:12:15.080 --> 01:12:16.840
<v Speaker 1>the the return still.

01:12:17.000 --> 01:12:17.320
<v Speaker 1>Missing.

01:12:20.375 --> 01:12:21.415
<v Speaker 0>Okay.

01:12:22.135 --> 01:12:23.895
<v Speaker 0>On the resolver, you mean. Right?

01:12:24.375 --> 01:12:25.735
<v Speaker 1>Yes. In the get.

01:12:25.975 --> 01:12:28.935
<v Speaker 0>So The Let's talk about the debugging. Can

01:12:28.935 --> 01:12:30.295
<v Speaker 0>I just do this?

01:12:37.079 --> 01:12:39.239
<v Speaker 1>Yeah. Yeah. I mean, you can if you

01:12:39.239 --> 01:12:42.280
<v Speaker 1>add a try catch maybe, you can see

01:12:42.280 --> 01:12:42.920
<v Speaker 1>what's going on.

01:12:50.925 --> 01:12:52.365
<v Speaker 1>You need to add like, if you look

01:12:52.365 --> 01:12:54.205
<v Speaker 1>at the example, you need to add a

01:12:54.925 --> 01:12:56.045
<v Speaker 1>curly brace

01:12:56.605 --> 01:12:58.045
<v Speaker 1>around the value,

01:12:58.365 --> 01:13:00.525
<v Speaker 1>like, const before value.

01:13:01.600 --> 01:13:02.719
<v Speaker 1>Like that. You see?

01:13:04.080 --> 01:13:05.679
<v Speaker 0>Yeah. Okay. Gotcha.

01:13:10.800 --> 01:13:12.880
<v Speaker 0>Oh, we probably don't need that

01:13:13.935 --> 01:13:14.895
<v Speaker 0>until we load.

01:13:26.610 --> 01:13:28.050
<v Speaker 1>It's really bizarre.

01:13:28.210 --> 01:13:29.730
<v Speaker 1>If you could you add a try catch

01:13:29.730 --> 01:13:30.449
<v Speaker 1>around?

01:13:32.929 --> 01:13:33.729
<v Speaker 0>Oops.

01:13:33.730 --> 01:13:35.810
<v Speaker 1>I wonder if it's just delayed. Like, it

01:13:35.810 --> 01:13:38.210
<v Speaker 1>looks try try rerunning the whole thing, and

01:13:38.210 --> 01:13:39.170
<v Speaker 1>that looks bizarre.

01:13:40.135 --> 01:13:41.815
<v Speaker 0>Yes.

01:13:41.815 --> 01:13:42.695
<v Speaker 0>I will.

01:13:44.695 --> 01:13:47.415
<v Speaker 0>Is there any sort of verbosity

01:13:47.415 --> 01:13:48.295
<v Speaker 0>on this?

01:13:51.895 --> 01:13:53.815
<v Speaker 1>Yeah. I mean, it is you can.

01:13:58.430 --> 01:14:00.350
<v Speaker 1>You can add if you wanna see debug

01:14:00.350 --> 01:14:02.270
<v Speaker 1>stuff, I mean, like, internal, you can add

01:14:02.270 --> 01:14:06.030
<v Speaker 1>trace trace too, but that's pretty verbose. So

01:14:06.030 --> 01:14:07.310
<v Speaker 1>you should see.

01:14:08.835 --> 01:14:10.915
<v Speaker 0>Let's try this. Oh, wait. That's in the

01:14:10.915 --> 01:14:11.715
<v Speaker 0>wrong bit.

01:14:13.875 --> 01:14:14.995
<v Speaker 1>Yeah. I know.

01:14:15.395 --> 01:14:16.115
<v Speaker 0>Okay.

01:14:16.595 --> 01:14:18.435
<v Speaker 0>And a restart is not gonna hurt anything.

01:14:18.435 --> 01:14:20.115
<v Speaker 0>So let's get that back up and running.

01:14:24.349 --> 01:14:26.030
<v Speaker 0>Go back to Pathfinder.

01:14:31.309 --> 01:14:33.070
<v Speaker 0>No. I've done something wrong.

01:14:33.469 --> 01:14:35.630
<v Speaker 1>Okay. The the other try catch around the

01:14:35.630 --> 01:14:36.989
<v Speaker 1>whole

01:14:37.875 --> 01:14:38.754
<v Speaker 1>the whole

01:14:39.635 --> 01:14:42.195
<v Speaker 1>like, from the start of the resolver to

01:14:42.195 --> 01:14:42.834
<v Speaker 1>the end.

01:14:43.875 --> 01:14:45.874
<v Speaker 1>Oh, I know what's missing. Sorry.

01:14:46.514 --> 01:14:48.755
<v Speaker 1>I was blind. So if you you see

01:14:48.755 --> 01:14:51.395
<v Speaker 1>the examples, you need in the context object,

01:14:51.395 --> 01:14:52.275
<v Speaker 1>you have KB.

01:14:52.920 --> 01:14:54.679
<v Speaker 1>You need to get it from somewhere.

01:14:55.560 --> 01:14:57.160
<v Speaker 1>Like, look at the docs. You know? See

01:14:57.160 --> 01:14:57.880
<v Speaker 1>what I mean?

01:15:02.120 --> 01:15:03.880
<v Speaker 1>I see it. There you go.

01:15:04.679 --> 01:15:05.400
<v Speaker 0>That'll do it.

01:15:08.085 --> 01:15:09.764
<v Speaker 1>I was wondering why it was, like, red

01:15:09.764 --> 01:15:11.764
<v Speaker 1>under. So now now I should have just

01:15:11.764 --> 01:15:13.925
<v Speaker 0>copied this whole result. Yeah. That was my

01:15:13.925 --> 01:15:14.244
<v Speaker 0>problem.

01:15:23.400 --> 01:15:25.560
<v Speaker 0>Oh, wait. Well, there's nothing to get yet.

01:15:25.560 --> 01:15:27.160
<v Speaker 0>Right? So let's bring back our mutation.

01:15:37.885 --> 01:15:39.805
<v Speaker 0>Just a try. We'll just debug this for

01:15:39.805 --> 01:15:40.925
<v Speaker 0>one more minute. We don't need to get

01:15:40.925 --> 01:15:41.645
<v Speaker 0>it working.

01:15:41.805 --> 01:15:43.325
<v Speaker 0>It was just me on the web. It's

01:15:43.325 --> 01:15:43.804
<v Speaker 1>all

01:15:44.925 --> 01:15:45.165
<v Speaker 1>good.

01:15:46.490 --> 01:15:48.410
<v Speaker 0>Console dot log e.

01:15:51.050 --> 01:15:53.130
<v Speaker 0>I'm gonna do a restart just to give

01:15:53.130 --> 01:15:55.130
<v Speaker 0>it the best chance. Although I don't think

01:15:55.130 --> 01:15:55.690
<v Speaker 0>we need it.

01:16:00.645 --> 01:16:03.284
<v Speaker 0>And let's hit the create.

01:16:04.885 --> 01:16:06.165
<v Speaker 0>I'm gonna do that again to see if

01:16:06.165 --> 01:16:07.205
<v Speaker 0>we got an error.

01:16:08.805 --> 01:16:10.485
<v Speaker 0>Although, I guess it didn't set over the

01:16:10.485 --> 01:16:11.045
<v Speaker 0>top.

01:16:13.765 --> 01:16:15.285
<v Speaker 0>Oh, okay. That's a different error.

01:16:17.430 --> 01:16:19.590
<v Speaker 0>And error code of infection links, a non

01:16:19.590 --> 01:16:22.150
<v Speaker 0>nullable value which is expected, but no value

01:16:22.150 --> 01:16:23.270
<v Speaker 0>was found.

01:16:25.030 --> 01:16:27.110
<v Speaker 0>So that tells me

01:16:41.340 --> 01:16:43.580
<v Speaker 0>Yeah. This is okay. So I'm calling a

01:16:43.580 --> 01:16:44.860
<v Speaker 0>get when we should be doing a list.

01:16:44.860 --> 01:16:45.420
<v Speaker 0>Right?

01:16:49.340 --> 01:16:50.699
<v Speaker 1>Well, list returns

01:16:50.940 --> 01:16:51.739
<v Speaker 1>everything.

01:16:52.220 --> 01:16:54.300
<v Speaker 0>Yeah. But we're doing a a get. So

01:16:54.300 --> 01:16:55.980
<v Speaker 0>our resolver expects there to be a a

01:16:55.980 --> 01:16:56.300
<v Speaker 0>key.

01:16:58.875 --> 01:17:01.195
<v Speaker 1>And are you passing the key or is

01:17:01.195 --> 01:17:01.755
<v Speaker 1>it

01:17:02.155 --> 01:17:03.355
<v Speaker 1>called something else?

01:17:04.395 --> 01:17:06.074
<v Speaker 1>Is it called ID maybe?

01:17:07.355 --> 01:17:09.035
<v Speaker 0>Well, I wasn't passing a key. So that

01:17:09.035 --> 01:17:09.595
<v Speaker 0>will be the problem.

01:17:11.050 --> 01:17:12.490
<v Speaker 0>Okay. But if we if we do this

01:17:12.490 --> 01:17:13.450
<v Speaker 0>as a list.

01:17:15.610 --> 01:17:17.210
<v Speaker 1>We need to map it to the

01:17:17.850 --> 01:17:21.130
<v Speaker 0>Ah, yeah. Okay. Let's

01:17:24.565 --> 01:17:26.804
<v Speaker 0>Okay. Let's just give it the right value.

01:17:26.804 --> 01:17:28.324
<v Speaker 0>So we need to send.

01:17:29.605 --> 01:17:31.685
<v Speaker 0>And again, you should ID or key.

01:17:37.880 --> 01:17:39.639
<v Speaker 0>Well, we haven't built this into the

01:17:40.679 --> 01:17:41.879
<v Speaker 0>we haven't oh.

01:17:42.520 --> 01:17:43.880
<v Speaker 0>Sorry. I'm here to say that as a

01:17:43.880 --> 01:17:46.119
<v Speaker 0>familiar here. We actually haven't built any sort

01:17:46.119 --> 01:17:48.280
<v Speaker 0>of query that takes a parameter. So

01:17:48.520 --> 01:17:50.855
<v Speaker 0>we need our Oh, okay. Thank you. This

01:17:50.855 --> 01:17:52.054
<v Speaker 0>gives us an ID.

01:17:53.574 --> 01:17:55.735
<v Speaker 0>And if we update our resolver, we don't

01:17:55.735 --> 01:17:57.335
<v Speaker 0>want a key. We want an ID

01:17:57.495 --> 01:18:00.054
<v Speaker 0>where we get an ID and we return

01:18:00.054 --> 01:18:00.934
<v Speaker 0>an ID.

01:18:01.335 --> 01:18:03.815
<v Speaker 0>See, these things are really simple when you're

01:18:03.815 --> 01:18:06.160
<v Speaker 0>not just me being a bit gunhole with

01:18:06.160 --> 01:18:07.440
<v Speaker 0>a typey typey.

01:18:07.600 --> 01:18:08.560
<v Speaker 0>So Yeah.

01:18:10.240 --> 01:18:12.000
<v Speaker 0>If we let all of this restart, we

01:18:12.000 --> 01:18:14.480
<v Speaker 0>should see that our schema changes.

01:18:14.720 --> 01:18:15.040
<v Speaker 0>Yep.

01:18:19.925 --> 01:18:22.085
<v Speaker 0>So let's call it our create.

01:18:26.245 --> 01:18:28.165
<v Speaker 0>Tom is in the chat telling us that

01:18:28.165 --> 01:18:30.165
<v Speaker 0>we're Yeah. Sorry. Hey. Hey. Thanks, Tom.

01:18:33.630 --> 01:18:35.869
<v Speaker 0>So this needs an

01:18:36.270 --> 01:18:37.150
<v Speaker 0>ID

01:18:37.790 --> 01:18:38.429
<v Speaker 0>one.

01:18:39.870 --> 01:18:41.389
<v Speaker 0>There we go.

01:18:44.270 --> 01:18:46.955
<v Speaker 0>There. So that was a a long way

01:18:46.955 --> 01:18:49.114
<v Speaker 0>to show off your k v feature.

01:18:51.275 --> 01:18:52.075
<v Speaker 1>Finally.

01:18:52.075 --> 01:18:52.875
<v Speaker 1>Well done.

01:18:54.395 --> 01:18:55.195
<v Speaker 1>Yeah.

01:18:55.435 --> 01:18:57.195
<v Speaker 0>It is a really cool feature and we're

01:18:57.195 --> 01:18:59.300
<v Speaker 0>not gonna go into the AI stuff now.

01:18:59.300 --> 01:19:01.380
<v Speaker 0>Not not with my ability to type code,

01:19:01.380 --> 01:19:03.700
<v Speaker 0>but you do have all of these AI

01:19:03.940 --> 01:19:04.980
<v Speaker 0>services

01:19:04.980 --> 01:19:07.140
<v Speaker 0>available with a bunch of language models, which

01:19:07.140 --> 01:19:10.580
<v Speaker 0>is very, very cool. Access to OpenAI Whisper,

01:19:10.580 --> 01:19:10.980
<v Speaker 0>Llama,

01:19:11.935 --> 01:19:14.095
<v Speaker 0>and I'm not familiar with these ones, but

01:19:14.095 --> 01:19:16.335
<v Speaker 0>very cool as well. Alright.

01:19:17.695 --> 01:19:19.535
<v Speaker 0>Let's get back to big face mode. Sorry.

01:19:19.535 --> 01:19:21.215
<v Speaker 0>I'm not gonna type any more code.

01:19:21.535 --> 01:19:22.815
<v Speaker 0>I can't be trusted.

01:19:23.295 --> 01:19:24.495
<v Speaker 0>Oh, where'd my camera go?

01:19:29.270 --> 01:19:31.590
<v Speaker 0>Oops. There we go. Alright.

01:19:33.350 --> 01:19:35.510
<v Speaker 0>Yeah. From Tom. Yeah. Thanks for hanging in

01:19:35.510 --> 01:19:37.030
<v Speaker 0>there, Tom. Thanks for your help.

01:19:39.270 --> 01:19:42.395
<v Speaker 0>I'll just reiterate. Right? Very cool platform. Makes

01:19:42.395 --> 01:19:45.035
<v Speaker 0>building GraphQL APIs easy as long as you

01:19:45.035 --> 01:19:46.555
<v Speaker 0>pay attention to the docs and don't try

01:19:46.555 --> 01:19:47.435
<v Speaker 0>and make it up.

01:19:48.235 --> 01:19:49.835
<v Speaker 0>The ability to hook into a key value

01:19:49.835 --> 01:19:51.675
<v Speaker 0>store is very, cool when you want, you

01:19:51.675 --> 01:19:53.355
<v Speaker 0>know there are probably a lot of use

01:19:53.355 --> 01:19:53.675
<v Speaker 0>cases

01:19:54.870 --> 01:19:57.190
<v Speaker 0>where you could survive on that without having

01:19:57.190 --> 01:19:58.950
<v Speaker 0>to reach out to resolvers. I guess it

01:19:58.950 --> 01:20:00.390
<v Speaker 0>also provides a nice cache in there, but

01:20:00.390 --> 01:20:01.990
<v Speaker 0>there's already a whole bunch of cache and

01:20:01.990 --> 01:20:03.670
<v Speaker 0>stuff that Grafbase provides if you go and

01:20:03.670 --> 01:20:05.030
<v Speaker 0>explore that in the documentation.

01:20:05.350 --> 01:20:08.230
<v Speaker 0>We've got connectors for Postgres, MongoDB, other GraphQL

01:20:08.230 --> 01:20:09.110
<v Speaker 0>APIs, and more.

01:20:09.825 --> 01:20:10.385
<v Speaker 0>I

01:20:10.785 --> 01:20:11.505
<v Speaker 0>think,

01:20:12.145 --> 01:20:14.305
<v Speaker 0>you know, we've we've shown enough. I'm assuming

01:20:14.305 --> 01:20:16.864
<v Speaker 0>people's interest has peaked. You've already said a

01:20:16.864 --> 01:20:19.025
<v Speaker 0>few times during this episode, there's more coming

01:20:19.025 --> 01:20:20.785
<v Speaker 0>soon or this is coming soon. So can

01:20:20.785 --> 01:20:22.465
<v Speaker 0>you in the last few minutes, can you

01:20:22.465 --> 01:20:23.825
<v Speaker 0>give us an idea of what the team

01:20:23.825 --> 01:20:25.580
<v Speaker 0>are working on just now? What are the

01:20:25.580 --> 01:20:27.420
<v Speaker 0>challenges you're trying to solve? What can people

01:20:27.420 --> 01:20:29.500
<v Speaker 0>expect over the next three to six months?

01:20:30.700 --> 01:20:31.580
<v Speaker 1>Absolutely.

01:20:31.580 --> 01:20:32.780
<v Speaker 1>So well,

01:20:33.660 --> 01:20:35.580
<v Speaker 1>the news of this week is we are

01:20:35.580 --> 01:20:38.060
<v Speaker 1>launching a brand new version of the dashboard.

01:20:38.060 --> 01:20:39.740
<v Speaker 1>It's something we've been building for a while,

01:20:40.335 --> 01:20:42.735
<v Speaker 1>Complete redesign, new stack.

01:20:43.855 --> 01:20:45.855
<v Speaker 1>We're really, really happy with it. We're just

01:20:45.855 --> 01:20:48.415
<v Speaker 1>figuring out the last pieces. That's coming very

01:20:48.415 --> 01:20:48.975
<v Speaker 1>soon.

01:20:50.255 --> 01:20:52.335
<v Speaker 1>Watch out for that announcement in Discord and

01:20:52.335 --> 01:20:52.735
<v Speaker 1>Twitter.

01:20:53.239 --> 01:20:55.880
<v Speaker 1>We just we are investing quite heavily in

01:20:55.880 --> 01:20:58.600
<v Speaker 1>analytics and security right now, so we're gonna

01:20:58.600 --> 01:20:59.079
<v Speaker 1>have

01:21:00.840 --> 01:21:03.560
<v Speaker 1>a bunch of things like field level analytics,

01:21:03.560 --> 01:21:04.280
<v Speaker 1>tracing.

01:21:05.160 --> 01:21:07.239
<v Speaker 1>That kind of stuff is coming quite soon

01:21:07.239 --> 01:21:11.395
<v Speaker 1>as well. We just launched automatic persistent queries,

01:21:12.035 --> 01:21:13.955
<v Speaker 1>which is a kind of performance

01:21:13.955 --> 01:21:14.755
<v Speaker 1>optimization

01:21:14.755 --> 01:21:16.275
<v Speaker 1>to avoid sending

01:21:16.515 --> 01:21:18.835
<v Speaker 1>the operation payload over and over.

01:21:19.235 --> 01:21:21.635
<v Speaker 1>And then soon, we're launching something called trusted

01:21:21.635 --> 01:21:22.595
<v Speaker 1>documents,

01:21:22.595 --> 01:21:23.715
<v Speaker 1>which is essentially a

01:21:24.239 --> 01:21:27.039
<v Speaker 1>security enabler where you can say these are

01:21:27.519 --> 01:21:30.079
<v Speaker 1>queries and mutations that are allowed to be

01:21:30.079 --> 01:21:32.239
<v Speaker 1>made to this graphical endpoint, and everything else

01:21:32.239 --> 01:21:33.359
<v Speaker 1>will be rejected.

01:21:33.920 --> 01:21:35.039
<v Speaker 1>We just launched

01:21:35.519 --> 01:21:37.920
<v Speaker 1>the ability to kind of disable introspection,

01:21:38.405 --> 01:21:40.405
<v Speaker 1>which is also quite common in production as

01:21:40.405 --> 01:21:41.285
<v Speaker 1>a security

01:21:42.085 --> 01:21:42.965
<v Speaker 1>precaution.

01:21:43.285 --> 01:21:46.005
<v Speaker 1>Batching is coming soon, rate limiting.

01:21:46.565 --> 01:21:50.165
<v Speaker 1>An HTTP connector is coming. So where you

01:21:50.485 --> 01:21:52.565
<v Speaker 1>might not have a schema, we're gonna enable

01:21:52.565 --> 01:21:53.765
<v Speaker 1>you to just write a,

01:21:54.280 --> 01:21:56.360
<v Speaker 1>you know, simple kind of mapping

01:21:56.920 --> 01:22:00.360
<v Speaker 1>connector to a REST API or otherwise

01:22:00.440 --> 01:22:02.199
<v Speaker 1>that doesn't currently exist.

01:22:03.320 --> 01:22:05.080
<v Speaker 1>And I think that the the biggest thing

01:22:05.080 --> 01:22:07.159
<v Speaker 1>we're working around is the ability to self

01:22:07.159 --> 01:22:07.800
<v Speaker 1>host

01:22:08.555 --> 01:22:09.435
<v Speaker 1>Grafbase.

01:22:09.435 --> 01:22:11.515
<v Speaker 1>Right? So there's two kind of things there.

01:22:11.515 --> 01:22:13.675
<v Speaker 1>One is a hybrid approach where you deploy

01:22:13.995 --> 01:22:16.554
<v Speaker 1>the gateway itself in your infrastructure.

01:22:16.635 --> 01:22:18.715
<v Speaker 1>It's quite common among enterprises.

01:22:19.435 --> 01:22:22.715
<v Speaker 1>But the rest kind of tracing, observability, security

01:22:22.795 --> 01:22:25.650
<v Speaker 1>is hosted by us. And then lastly, the

01:22:25.650 --> 01:22:27.970
<v Speaker 1>ability to deploy the whole platform

01:22:28.290 --> 01:22:29.890
<v Speaker 1>in your own infrastructure

01:22:29.890 --> 01:22:32.850
<v Speaker 1>is it's a big big undertaking, but it's

01:22:32.850 --> 01:22:33.330
<v Speaker 1>quite,

01:22:33.650 --> 01:22:37.090
<v Speaker 1>popular among federal and and and the likes

01:22:37.090 --> 01:22:39.825
<v Speaker 1>who might not have Internet or they don't

01:22:39.825 --> 01:22:40.865
<v Speaker 1>want Internet.

01:22:41.505 --> 01:22:42.705
<v Speaker 1>So that's also coming.

01:22:43.585 --> 01:22:44.465
<v Speaker 0>Awesome.

01:22:45.025 --> 01:22:47.025
<v Speaker 0>Lots of amazing stuff there, and,

01:22:48.385 --> 01:22:51.505
<v Speaker 0>I'm very excited to hopefully see, SQLite connector.

01:22:53.010 --> 01:22:54.929
<v Speaker 1>Yes. And that's also on the road map.

01:22:54.929 --> 01:22:56.130
<v Speaker 1>I forgot to mention that. We are

01:22:57.010 --> 01:22:58.929
<v Speaker 1>connectors take quite a bit of time, especially

01:22:58.929 --> 01:23:00.929
<v Speaker 1>database ones. Like, we spend a lot of

01:23:00.929 --> 01:23:01.489
<v Speaker 1>time

01:23:01.969 --> 01:23:04.929
<v Speaker 1>building the Postgres connector. We actually have some

01:23:04.929 --> 01:23:06.770
<v Speaker 1>of the core team from Prisma

01:23:07.035 --> 01:23:08.635
<v Speaker 1>join us to to,

01:23:09.595 --> 01:23:10.475
<v Speaker 1>to build

01:23:10.715 --> 01:23:12.715
<v Speaker 1>some of these the Mongo connector and Postgres

01:23:12.715 --> 01:23:15.595
<v Speaker 1>connector. And even with their experience, it took

01:23:15.595 --> 01:23:17.755
<v Speaker 1>took us quite a while to to build

01:23:17.755 --> 01:23:20.395
<v Speaker 1>one that is performant and scalable and avoids

01:23:20.395 --> 01:23:22.155
<v Speaker 1>n plus one queries and all that stuff.

01:23:22.080 --> 01:23:22.480
<v Speaker 1>Stuff.

01:23:22.960 --> 01:23:25.360
<v Speaker 0>Yeah. Tough tough challenges, but I'm glad you've

01:23:25.360 --> 01:23:26.800
<v Speaker 0>got good people working on it. Like you

01:23:26.800 --> 01:23:28.960
<v Speaker 0>said, hire hire the best engineers and you

01:23:28.960 --> 01:23:30.080
<v Speaker 0>build good software.

01:23:30.800 --> 01:23:31.440
<v Speaker 1>Yeah.

01:23:32.000 --> 01:23:33.840
<v Speaker 0>Alright. Well, thank you so much for your

01:23:33.840 --> 01:23:36.000
<v Speaker 0>time today and your patience as I was

01:23:36.000 --> 01:23:37.995
<v Speaker 0>going a bit hacky on things. But I

01:23:37.995 --> 01:23:39.835
<v Speaker 0>hope people enjoy Grafbase. Go check it out

01:23:39.835 --> 01:23:43.755
<v Speaker 0>at grafbase.com. As a reminder, that is grafbase.com.

01:23:44.075 --> 01:23:46.395
<v Speaker 0>Any final words, Frederic, before I say goodbye?

01:23:47.915 --> 01:23:50.489
<v Speaker 1>Thanks so much. You know, GrafQL is better

01:23:50.489 --> 01:23:52.090
<v Speaker 1>than Rust. That's all I can say.

01:23:54.010 --> 01:23:55.610
<v Speaker 0>We'll end on that note and then hit

01:23:55.610 --> 01:23:58.329
<v Speaker 0>or set the comments later. Alright. Alright. Thank

01:23:58.329 --> 01:23:59.369
<v Speaker 0>you all for watching. We'll see you all

01:23:59.369 --> 01:24:01.369
<v Speaker 0>soon. Have a good day. Bye. Thanks so

01:24:01.369 --> 01:24:01.530
<v Speaker 1>much.
