WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 3f7e82af-ae71-4b58-b4d8-fd44180e2ede
Created: 2025-06-05T21:57:18.218Z
Duration: 4057.2341
Channels: 1

00:00:02.560 --> 00:00:05.440
<v Speaker 0>Yo, it's your boy back in the place

00:00:05.440 --> 00:00:07.120
<v Speaker 0>to be. Livestreaming,

00:00:07.120 --> 00:00:09.519
<v Speaker 0>bringing the heat. Can't you see? Got something

00:00:09.519 --> 00:00:12.400
<v Speaker 0>special, something brand new, a guest and a

00:00:12.400 --> 00:00:14.905
<v Speaker 0>project just for you. Give it up for

00:00:14.905 --> 00:00:15.865
<v Speaker 0>Avital,

00:00:15.945 --> 00:00:16.985
<v Speaker 0>a mastermind

00:00:16.985 --> 00:00:19.545
<v Speaker 0>dropping knowledge, the future you'll find. He's brought

00:00:19.545 --> 00:00:21.145
<v Speaker 0>Cipher Netties.

00:00:21.625 --> 00:00:24.345
<v Speaker 0>It's the name changing the game. Ain't nothing

00:00:24.345 --> 00:00:25.385
<v Speaker 0>the same. Kubernetes

00:00:26.100 --> 00:00:29.780
<v Speaker 0>complex and deep, but Cypher query secrets they

00:00:29.780 --> 00:00:33.940
<v Speaker 0>keep. Unlock the power, simplify the task. Avital's

00:00:33.940 --> 00:00:37.220
<v Speaker 0>here, answers to ask. So grab your headphones,

00:00:37.220 --> 00:00:39.925
<v Speaker 0>get ready to vibe this live stream's fire.

00:00:39.925 --> 00:00:43.125
<v Speaker 0>We're taking your lives. Tech talking insights flowing

00:00:43.125 --> 00:00:45.285
<v Speaker 0>like a stream. Let's dive in deep to

00:00:45.285 --> 00:00:46.565
<v Speaker 0>Cypher Netty's dream.

00:00:57.290 --> 00:01:00.250
<v Speaker 0>Yo, it's your boy back in the place

00:01:00.250 --> 00:01:02.010
<v Speaker 0>to be. Livestreaming,

00:01:02.010 --> 00:01:04.330
<v Speaker 0>bringing the heat. Can't you see? Got something

00:01:04.330 --> 00:01:07.210
<v Speaker 0>special, something brand new, a guest and a

00:01:07.210 --> 00:01:09.594
<v Speaker 0>project just for you. Give it up for

00:01:09.594 --> 00:01:11.755
<v Speaker 0>Avi To, a mastermind

00:01:11.755 --> 00:01:14.314
<v Speaker 0>dropping knowledge, the future you'll find. He's brought

00:01:14.314 --> 00:01:15.914
<v Speaker 0>Cipher Netty.

00:01:16.475 --> 00:01:19.195
<v Speaker 0>It's the name changing the game ain't nothing

00:01:19.195 --> 00:01:20.795
<v Speaker 0>the same. Kubernetes

00:01:21.020 --> 00:01:24.620
<v Speaker 0>complex and deep, but Cypher query secrets they

00:01:24.620 --> 00:01:28.780
<v Speaker 0>keep. Unlock the power, simplify the task. Avital's

00:01:28.780 --> 00:01:32.140
<v Speaker 0>here, answer to ask. Go grab your headphones,

00:01:32.140 --> 00:01:33.020
<v Speaker 0>get ready to vibe.

00:01:52.579 --> 00:01:55.140
<v Speaker 0>So grab your headphones, get ready to vibe.

00:01:55.140 --> 00:01:56.180
<v Speaker 0>This livestream's

00:01:56.180 --> 00:01:59.380
<v Speaker 0>fire. We're taking you live. Tech talking insights

00:01:59.380 --> 00:02:01.780
<v Speaker 0>flowing like a stream. Let's dive in deep.

00:02:01.785 --> 00:02:03.065
<v Speaker 0>The Syphonetti's

00:02:03.065 --> 00:02:03.385
<v Speaker 0>dream.

00:02:26.700 --> 00:02:28.940
<v Speaker 1>To the Rawkode Academy. I'm your host, David

00:02:28.940 --> 00:02:32.135
<v Speaker 1>Flanagan, also known across the Internet as Rawkode.

00:02:32.135 --> 00:02:33.974
<v Speaker 1>And this is an episode of Rawkode Live

00:02:33.974 --> 00:02:35.735
<v Speaker 1>where we take a look at some of

00:02:35.735 --> 00:02:38.935
<v Speaker 1>the coolest and most interesting Kubernetes and cloud

00:02:38.935 --> 00:02:41.974
<v Speaker 1>native adjacent projects we can find. And today

00:02:41.974 --> 00:02:43.095
<v Speaker 1>is no exception.

00:02:43.710 --> 00:02:45.630
<v Speaker 1>We're taking a look at a new way

00:02:45.630 --> 00:02:48.510
<v Speaker 1>to work with Kubernetes and query Kubernetes using

00:02:48.510 --> 00:02:49.310
<v Speaker 1>a new

00:02:49.790 --> 00:02:51.790
<v Speaker 1>Cypher based language.

00:02:53.390 --> 00:02:53.950
<v Speaker 1>So

00:02:54.670 --> 00:02:55.630
<v Speaker 1>let's meet.

00:02:56.364 --> 00:02:58.045
<v Speaker 1>Sorry. There's something in my ear there. Let's

00:02:58.045 --> 00:03:00.525
<v Speaker 1>jump over and meet our guest for today.

00:03:01.724 --> 00:03:04.444
<v Speaker 1>Hello, Avital. How's it going, man? Hey, David.

00:03:04.444 --> 00:03:06.765
<v Speaker 2>How are you? Thanks for being good, man.

00:03:06.765 --> 00:03:07.405
<v Speaker 2>This was

00:03:07.965 --> 00:03:09.644
<v Speaker 2>of the coolest things I heard in a

00:03:09.644 --> 00:03:09.885
<v Speaker 2>while.

00:03:11.079 --> 00:03:14.439
<v Speaker 1>Yeah. I mean, I'm always absolutely astounded at

00:03:14.439 --> 00:03:16.519
<v Speaker 1>just how good AI music generation has gotten

00:03:16.519 --> 00:03:18.599
<v Speaker 1>these days and being able to put together,

00:03:18.599 --> 00:03:20.120
<v Speaker 1>you know, just a couple of minutes of

00:03:20.120 --> 00:03:20.920
<v Speaker 1>personalization

00:03:20.920 --> 00:03:22.760
<v Speaker 1>to thank the guests for coming on. You

00:03:22.760 --> 00:03:24.920
<v Speaker 1>know? It's it's just so nice. And Even

00:03:24.920 --> 00:03:27.295
<v Speaker 2>pronounce my name right. You know? Well, I

00:03:27.295 --> 00:03:29.295
<v Speaker 2>I more than yeah. That took a lot

00:03:29.295 --> 00:03:30.815
<v Speaker 1>of work. Like, you have to go out

00:03:30.815 --> 00:03:32.975
<v Speaker 1>and change. I couldn't just write Avital. I

00:03:32.975 --> 00:03:35.215
<v Speaker 1>had to phonetically do it. But same with

00:03:35.215 --> 00:03:37.215
<v Speaker 1>Cypher Netties and Kubernetes. I'm getting quite good

00:03:37.215 --> 00:03:38.655
<v Speaker 1>at just predicting how to get it to

00:03:38.655 --> 00:03:40.840
<v Speaker 1>say the right thing though. But, yeah. Four

00:03:40.840 --> 00:03:42.920
<v Speaker 1>e's. Yeah. Yeah.

00:03:44.600 --> 00:03:46.920
<v Speaker 1>But it's it's a pleasure to have you

00:03:46.920 --> 00:03:48.360
<v Speaker 1>join us today, and we're gonna be taking

00:03:48.360 --> 00:03:50.040
<v Speaker 1>a look at a project called Cypher Netties

00:03:50.040 --> 00:03:52.200
<v Speaker 1>that enables a new way to interact with

00:03:52.200 --> 00:03:54.520
<v Speaker 1>Kubernetes clusters. I could not be more excited

00:03:54.520 --> 00:03:56.145
<v Speaker 1>to take a look and show people how

00:03:56.145 --> 00:03:57.905
<v Speaker 1>this all works. However,

00:03:58.545 --> 00:04:00.545
<v Speaker 1>let's meet you first. Could you please take

00:04:00.545 --> 00:04:02.225
<v Speaker 1>a moment to introduce yourself and tell the

00:04:02.225 --> 00:04:04.945
<v Speaker 1>audience who you are? Yeah. So my name

00:04:04.945 --> 00:04:05.905
<v Speaker 2>is Avital.

00:04:05.905 --> 00:04:08.340
<v Speaker 2>I've been doing this for a while. I

00:04:08.340 --> 00:04:10.260
<v Speaker 2>started working with computers

00:04:10.500 --> 00:04:12.020
<v Speaker 2>when I was a young kid. I taught

00:04:12.020 --> 00:04:14.020
<v Speaker 2>myself programming when I was six. I got

00:04:14.020 --> 00:04:16.899
<v Speaker 2>my first computer and taught myself BASIC. I

00:04:16.899 --> 00:04:18.740
<v Speaker 2>think there was BASIC installed on the MS

00:04:18.740 --> 00:04:19.380
<v Speaker 2>DOS.

00:04:19.779 --> 00:04:20.340
<v Speaker 2>And

00:04:21.459 --> 00:04:24.075
<v Speaker 2>so I've pretty much been doing that since.

00:04:25.035 --> 00:04:26.555
<v Speaker 2>When I was 20,

00:04:26.715 --> 00:04:28.235
<v Speaker 2>I actually made it

00:04:28.955 --> 00:04:31.755
<v Speaker 2>big with my high school band. So I

00:04:31.755 --> 00:04:34.875
<v Speaker 2>had a semi successful career as a professional

00:04:34.875 --> 00:04:36.635
<v Speaker 2>musician during my twenties

00:04:36.920 --> 00:04:37.640
<v Speaker 2>and,

00:04:37.960 --> 00:04:40.520
<v Speaker 2>kind of from there, I kind of shifted

00:04:40.520 --> 00:04:41.320
<v Speaker 2>towards,

00:04:42.120 --> 00:04:44.840
<v Speaker 2>doing a career in the industry,

00:04:45.240 --> 00:04:45.720
<v Speaker 2>mostly

00:04:46.040 --> 00:04:47.880
<v Speaker 2>revolving around infrastructure.

00:04:47.880 --> 00:04:50.280
<v Speaker 2>I did some stuff with backend, front end

00:04:50.280 --> 00:04:51.800
<v Speaker 2>work, some full stack,

00:04:52.265 --> 00:04:53.145
<v Speaker 2>but

00:04:53.145 --> 00:04:55.705
<v Speaker 2>ultimately gravitated toward infra,

00:04:56.505 --> 00:04:59.385
<v Speaker 2>since container technology and Kubernetes started becoming a

00:04:59.385 --> 00:05:02.345
<v Speaker 2>thing, found myself really drawn into it. And

00:05:02.345 --> 00:05:04.665
<v Speaker 2>so this has been like the focus of

00:05:04.665 --> 00:05:06.265
<v Speaker 2>my career for the past ten years or

00:05:06.265 --> 00:05:06.425
<v Speaker 2>so.

00:05:07.600 --> 00:05:10.240
<v Speaker 1>Awesome. Thank you for sharing. I mean, I'm

00:05:10.240 --> 00:05:11.919
<v Speaker 1>now really curious about what type of music

00:05:11.919 --> 00:05:13.039
<v Speaker 1>you were playing in your band and what

00:05:13.039 --> 00:05:15.440
<v Speaker 1>instrument you played, you know? Well, my my

00:05:15.599 --> 00:05:17.599
<v Speaker 2>I got my face tattooed, so you can

00:05:17.599 --> 00:05:20.479
<v Speaker 2>probably guess that he was on the heavier

00:05:20.479 --> 00:05:21.440
<v Speaker 2>side of things.

00:05:22.775 --> 00:05:24.455
<v Speaker 1>Hey. Always a pleasure to have a fellow

00:05:24.455 --> 00:05:26.215
<v Speaker 1>metalhead on things, know, because

00:05:26.694 --> 00:05:28.215
<v Speaker 1>I could set and place some soil work

00:05:28.215 --> 00:05:29.735
<v Speaker 1>at the start of all these episodes. That'd

00:05:29.735 --> 00:05:30.935
<v Speaker 1>be a very happy man, but I don't

00:05:30.935 --> 00:05:32.615
<v Speaker 1>think the audience would appreciate it too much.

00:05:32.615 --> 00:05:33.255
<v Speaker 1>So

00:05:33.574 --> 00:05:36.215
<v Speaker 1>conversation for KubeCon, perhaps. Maybe we can do

00:05:36.215 --> 00:05:38.919
<v Speaker 1>that over a beer. However Sounds good. Today,

00:05:38.919 --> 00:05:40.120
<v Speaker 1>we're keeping things

00:05:40.360 --> 00:05:42.280
<v Speaker 1>geeky, techy, and Kubernetes.

00:05:42.360 --> 00:05:44.120
<v Speaker 1>That is a terrible I'm never saying that

00:05:44.120 --> 00:05:45.880
<v Speaker 1>again. There we go. Said that.

00:05:47.479 --> 00:05:49.800
<v Speaker 1>Could you tell us I wanna get into

00:05:49.800 --> 00:05:51.639
<v Speaker 1>the history of CipherNetties, but let's just start

00:05:51.639 --> 00:05:52.360
<v Speaker 1>with what is it?

00:05:53.005 --> 00:05:53.965
<v Speaker 2>Right. So,

00:05:54.765 --> 00:05:56.605
<v Speaker 2>so Cypher Netties is

00:05:56.925 --> 00:05:59.485
<v Speaker 2>what it sounds like. It's Cypher for Kubernetes

00:05:59.485 --> 00:06:00.845
<v Speaker 2>and Cypher,

00:06:01.005 --> 00:06:02.285
<v Speaker 2>for those of you who don't know what

00:06:02.285 --> 00:06:03.965
<v Speaker 2>Cypher is, is the

00:06:04.285 --> 00:06:06.445
<v Speaker 2>language from Neo4j,

00:06:06.445 --> 00:06:09.150
<v Speaker 2>which is one of the, I guess, pioneering

00:06:09.870 --> 00:06:11.150
<v Speaker 2>graph databases

00:06:11.630 --> 00:06:13.950
<v Speaker 2>that put graph technology in the center.

00:06:14.509 --> 00:06:14.910
<v Speaker 2>And

00:06:16.430 --> 00:06:19.310
<v Speaker 2>Cypher evolved over time into the GQL

00:06:19.310 --> 00:06:19.789
<v Speaker 2>standard,

00:06:21.025 --> 00:06:22.384
<v Speaker 2>which is like

00:06:22.384 --> 00:06:25.345
<v Speaker 2>being a franc of graph databases now,

00:06:25.745 --> 00:06:26.225
<v Speaker 2>but

00:06:27.264 --> 00:06:28.145
<v Speaker 2>Cypher,

00:06:28.145 --> 00:06:31.185
<v Speaker 2>the originals flavor of Cypher was the first

00:06:31.264 --> 00:06:34.385
<v Speaker 2>graph oriented query language that I came across.

00:06:34.705 --> 00:06:38.640
<v Speaker 2>And I remember this first interaction with Neo4j

00:06:39.360 --> 00:06:42.880
<v Speaker 2>and what Cypher does really cool is that

00:06:42.880 --> 00:06:43.920
<v Speaker 2>you use

00:06:45.600 --> 00:06:48.480
<v Speaker 2>ASCII art, I guess, to draw these patterns

00:06:48.480 --> 00:06:49.280
<v Speaker 2>using

00:06:49.680 --> 00:06:51.120
<v Speaker 2>parentheses and arrows,

00:06:51.735 --> 00:06:53.735
<v Speaker 2>and you draw these patterns that you want

00:06:53.735 --> 00:06:55.335
<v Speaker 2>to match on a graph

00:06:56.294 --> 00:06:59.814
<v Speaker 2>and get back or act on, like do

00:06:59.814 --> 00:07:01.735
<v Speaker 2>these CRUD operations on

00:07:02.055 --> 00:07:04.694
<v Speaker 2>instances in the graph that match the pattern,

00:07:04.694 --> 00:07:06.790
<v Speaker 2>the ASCII pattern that you drew.

00:07:07.750 --> 00:07:09.430
<v Speaker 2>This immediately,

00:07:09.750 --> 00:07:11.669
<v Speaker 2>like I fell in love with it immediately

00:07:11.669 --> 00:07:14.390
<v Speaker 2>because it turns all these joins

00:07:14.550 --> 00:07:17.509
<v Speaker 2>like joins that you express in SQL are

00:07:17.509 --> 00:07:19.270
<v Speaker 2>just expressed by a little arrow

00:07:19.990 --> 00:07:20.550
<v Speaker 2>in Cypher.

00:07:21.104 --> 00:07:23.505
<v Speaker 2>And it was, to me, it was, you

00:07:23.505 --> 00:07:25.185
<v Speaker 2>know, it was whimsical and

00:07:25.345 --> 00:07:26.944
<v Speaker 2>like creative

00:07:26.944 --> 00:07:28.065
<v Speaker 2>and fun,

00:07:28.224 --> 00:07:30.544
<v Speaker 2>even just one of those things that brings

00:07:30.544 --> 00:07:32.785
<v Speaker 2>a lot of fun into computing, you know?

00:07:32.785 --> 00:07:34.705
<v Speaker 2>And as I got more and more into

00:07:34.705 --> 00:07:38.560
<v Speaker 2>doing infra work, it always kept nagging me

00:07:38.560 --> 00:07:40.960
<v Speaker 2>that Cypher would be such a great language

00:07:40.960 --> 00:07:43.360
<v Speaker 2>for infrastructure because a lot of what we

00:07:43.360 --> 00:07:43.920
<v Speaker 2>do

00:07:44.240 --> 00:07:46.480
<v Speaker 2>when we communicate with each other and we're

00:07:46.480 --> 00:07:49.805
<v Speaker 2>doing design sessions on whiteboards is drawing like

00:07:49.805 --> 00:07:52.925
<v Speaker 2>node graphs, right? We're drawing these circles that

00:07:52.925 --> 00:07:55.485
<v Speaker 2>connect to each other to express our ideas.

00:07:55.805 --> 00:07:58.285
<v Speaker 2>And I always had like carried this notion

00:07:58.285 --> 00:07:59.965
<v Speaker 2>in my head that Cypher would be a

00:07:59.965 --> 00:08:03.245
<v Speaker 2>really great language for infrastructure from like going

00:08:03.245 --> 00:08:06.539
<v Speaker 2>from whiteboard to code kind of. So

00:08:06.939 --> 00:08:08.699
<v Speaker 2>over time I had,

00:08:09.819 --> 00:08:12.780
<v Speaker 2>like five years ago, I had this initial

00:08:12.780 --> 00:08:15.020
<v Speaker 2>attempt to do something with this,

00:08:16.300 --> 00:08:16.699
<v Speaker 2>which was,

00:08:17.595 --> 00:08:20.794
<v Speaker 2>I called it OpsLang and it was like

00:08:21.194 --> 00:08:24.474
<v Speaker 2>a language that would compile down to Terraform

00:08:24.474 --> 00:08:25.755
<v Speaker 2>or Vulumi

00:08:25.755 --> 00:08:29.194
<v Speaker 2>and would, would let you express like infrastructure

00:08:29.194 --> 00:08:31.595
<v Speaker 2>stuff using Cypher. But that was,

00:08:32.899 --> 00:08:34.899
<v Speaker 2>I guess not, not that well

00:08:35.140 --> 00:08:37.860
<v Speaker 2>directed or the idea in my head wasn't,

00:08:37.860 --> 00:08:39.620
<v Speaker 2>you know, complete yet.

00:08:40.659 --> 00:08:44.179
<v Speaker 2>But then five years later I revisited,

00:08:45.035 --> 00:08:46.475
<v Speaker 2>you know, we were,

00:08:46.795 --> 00:08:49.755
<v Speaker 2>I was leading the DevOps team in Lemonade

00:08:49.755 --> 00:08:52.315
<v Speaker 2>and we were dealing with this

00:08:53.675 --> 00:08:55.915
<v Speaker 2>cluster that was having this, you know, it

00:08:55.915 --> 00:08:57.835
<v Speaker 2>was a big dev cluster of 300 something

00:08:57.835 --> 00:09:00.569
<v Speaker 2>nodes, ingress controllers were going wild and we

00:09:00.569 --> 00:09:02.970
<v Speaker 2>had a theory and why this was happening.

00:09:03.129 --> 00:09:05.769
<v Speaker 2>But just to prove our theory, it took,

00:09:07.610 --> 00:09:08.649
<v Speaker 2>like this,

00:09:09.129 --> 00:09:10.649
<v Speaker 2>I guess 10 line,

00:09:11.274 --> 00:09:14.315
<v Speaker 2>10 lines of bash code piped and parsed

00:09:14.315 --> 00:09:17.115
<v Speaker 2>and, you know, nest UCTL commands and

00:09:17.915 --> 00:09:19.915
<v Speaker 2>just to prove that this is what was

00:09:19.915 --> 00:09:23.355
<v Speaker 2>going on. And then we had to actually

00:09:23.355 --> 00:09:25.680
<v Speaker 2>to, to implement this as a solution. We

00:09:25.680 --> 00:09:27.840
<v Speaker 2>had to write API code and we had

00:09:27.840 --> 00:09:28.800
<v Speaker 2>to like

00:09:28.960 --> 00:09:30.320
<v Speaker 2>implement an operator.

00:09:30.800 --> 00:09:31.280
<v Speaker 2>And

00:09:31.680 --> 00:09:34.000
<v Speaker 2>it's, you know, it nagged me at that

00:09:34.000 --> 00:09:37.040
<v Speaker 2>time that I could express this one thing

00:09:37.040 --> 00:09:39.760
<v Speaker 2>with this whole thing could be expressed with

00:09:39.375 --> 00:09:41.295
<v Speaker 2>one line of Cypher. Like if I had

00:09:41.295 --> 00:09:42.575
<v Speaker 2>Cypher for Kubernetes,

00:09:42.815 --> 00:09:44.815
<v Speaker 2>I could do this with, with just one

00:09:44.815 --> 00:09:46.015
<v Speaker 2>line, you know.

00:09:46.415 --> 00:09:49.215
<v Speaker 2>And that's when I started to actually build

00:09:49.215 --> 00:09:50.415
<v Speaker 2>Cypher Netties

00:09:50.575 --> 00:09:51.615
<v Speaker 2>initially

00:09:51.855 --> 00:09:55.215
<v Speaker 2>as just a tool that I could use

00:09:54.980 --> 00:09:55.540
<v Speaker 2>to,

00:09:56.900 --> 00:09:59.940
<v Speaker 2>to show that this was the actual problem.

00:09:59.940 --> 00:10:02.420
<v Speaker 2>Right? So just doing the read parts, not

00:10:02.420 --> 00:10:02.980
<v Speaker 2>even

00:10:03.780 --> 00:10:05.860
<v Speaker 2>full CRUD, but just be able to be

00:10:05.860 --> 00:10:08.500
<v Speaker 2>able to do like match this pattern

00:10:08.925 --> 00:10:10.685
<v Speaker 2>and return something.

00:10:10.845 --> 00:10:11.725
<v Speaker 2>Match

00:10:12.125 --> 00:10:13.005
<v Speaker 2>any

00:10:13.245 --> 00:10:14.285
<v Speaker 2>deployment

00:10:14.285 --> 00:10:17.245
<v Speaker 2>that is exposed by a service that has

00:10:17.245 --> 00:10:19.404
<v Speaker 2>an ingress routing into it

00:10:19.885 --> 00:10:20.605
<v Speaker 2>where

00:10:20.845 --> 00:10:23.400
<v Speaker 2>some of these conditions, you know, match and

00:10:23.400 --> 00:10:26.440
<v Speaker 2>just return all of these. So where the

00:10:26.440 --> 00:10:29.560
<v Speaker 2>deployment has zero replicas, just return all of

00:10:29.560 --> 00:10:30.120
<v Speaker 2>these.

00:10:30.600 --> 00:10:33.080
<v Speaker 2>So the ability to do this on a

00:10:33.080 --> 00:10:34.520
<v Speaker 2>large cluster

00:10:35.015 --> 00:10:36.455
<v Speaker 2>with a single command

00:10:36.615 --> 00:10:39.975
<v Speaker 2>that would also take rate limiting into account.

00:10:40.135 --> 00:10:41.975
<v Speaker 2>Right? Because API

00:10:41.975 --> 00:10:43.175
<v Speaker 2>server would

00:10:43.495 --> 00:10:46.375
<v Speaker 2>like, this is an example where kubectl would

00:10:46.375 --> 00:10:47.335
<v Speaker 2>fail because

00:10:47.630 --> 00:10:51.470
<v Speaker 2>there's rate limiting and stuff. So, and also

00:10:51.470 --> 00:10:53.790
<v Speaker 2>being able to compose this

00:10:54.350 --> 00:10:56.270
<v Speaker 2>ad hoc response

00:10:56.830 --> 00:10:57.550
<v Speaker 2>with

00:10:57.870 --> 00:10:58.589
<v Speaker 2>only

00:10:58.750 --> 00:11:02.990
<v Speaker 2>very specific fields from different resource kinds together.

00:11:04.735 --> 00:11:06.175
<v Speaker 2>So this was the

00:11:06.735 --> 00:11:08.815
<v Speaker 2>thing I started working on a year and

00:11:08.815 --> 00:11:10.255
<v Speaker 2>a half ago, almost a year and a

00:11:10.255 --> 00:11:10.975
<v Speaker 2>half ago.

00:11:11.615 --> 00:11:13.695
<v Speaker 2>This is what it started out from just

00:11:13.695 --> 00:11:16.015
<v Speaker 2>being able to do match this pattern and

00:11:16.015 --> 00:11:17.135
<v Speaker 2>return

00:11:17.010 --> 00:11:19.650
<v Speaker 2>these elements and these fields. And then I

00:11:19.650 --> 00:11:22.130
<v Speaker 2>found it so useful and it very quickly

00:11:22.130 --> 00:11:22.850
<v Speaker 2>became

00:11:23.650 --> 00:11:25.650
<v Speaker 2>an important tool in my belt, you know,

00:11:25.650 --> 00:11:27.250
<v Speaker 2>that I was using daily. So I just

00:11:27.250 --> 00:11:29.330
<v Speaker 2>kept extending it. And first I added

00:11:29.665 --> 00:11:32.465
<v Speaker 2>a match set to be able to update

00:11:32.465 --> 00:11:33.905
<v Speaker 2>like patch resources

00:11:34.065 --> 00:11:36.465
<v Speaker 2>and then came delete and then create. And

00:11:36.465 --> 00:11:38.785
<v Speaker 2>then I started improving the

00:11:39.105 --> 00:11:41.825
<v Speaker 2>language and adding more and more language features,

00:11:41.905 --> 00:11:43.505
<v Speaker 2>adding aggregation functions.

00:11:45.280 --> 00:11:48.160
<v Speaker 2>Yeah. And it's like in continuous motion ever

00:11:48.160 --> 00:11:50.160
<v Speaker 2>since, you know, every, every time

00:11:50.400 --> 00:11:52.880
<v Speaker 2>somebody and, well, first it was just me,

00:11:52.880 --> 00:11:55.120
<v Speaker 2>but then all of a sudden a community

00:11:55.120 --> 00:11:58.480
<v Speaker 2>started forming around this. I think somewhere around

00:11:58.480 --> 00:11:59.360
<v Speaker 2>last September,

00:12:01.205 --> 00:12:02.885
<v Speaker 2>it took me a year, I think, to

00:12:02.885 --> 00:12:05.045
<v Speaker 2>go from zero GitHub stars to 50. And

00:12:05.045 --> 00:12:06.805
<v Speaker 2>then in twenty four hours, it went from

00:12:06.805 --> 00:12:09.445
<v Speaker 2>50 to a hundred and then twenty four

00:12:09.445 --> 00:12:11.765
<v Speaker 2>hours more, it was 100 to 200

00:12:12.140 --> 00:12:14.860
<v Speaker 2>and then it built up to 500.

00:12:14.940 --> 00:12:15.660
<v Speaker 2>And then

00:12:16.220 --> 00:12:18.700
<v Speaker 2>in forty eight hours more, suddenly I was

00:12:18.700 --> 00:12:20.140
<v Speaker 2>on the front page of hacker news and

00:12:20.140 --> 00:12:22.380
<v Speaker 2>forty eight hours more, went from 500 to

00:12:22.380 --> 00:12:24.220
<v Speaker 2>a thousand. And now I'm all of a

00:12:24.220 --> 00:12:27.065
<v Speaker 2>sudden I'm counting and I'm counting my stars

00:12:27.065 --> 00:12:29.144
<v Speaker 2>in hundreds, you know, and not in singles

00:12:29.144 --> 00:12:32.904
<v Speaker 2>anymore. It's yeah. So, so a small community

00:12:32.904 --> 00:12:34.665
<v Speaker 2>started to form around this,

00:12:35.785 --> 00:12:38.904
<v Speaker 2>which is, which is crazy to me because

00:12:39.305 --> 00:12:42.330
<v Speaker 2>I kind of thought this was super niche

00:12:42.570 --> 00:12:45.050
<v Speaker 2>and I was going to develop in the

00:12:45.050 --> 00:12:46.730
<v Speaker 2>public and put it out there anyway. But

00:12:46.730 --> 00:12:49.370
<v Speaker 2>I thought if I find 10 people in

00:12:49.370 --> 00:12:51.850
<v Speaker 2>the world who are Cypher fans who work

00:12:51.850 --> 00:12:54.405
<v Speaker 2>with Kubernetes a lot, it would be cool.

00:12:54.405 --> 00:12:56.165
<v Speaker 2>You know, we could have a small community

00:12:56.485 --> 00:12:58.485
<v Speaker 2>and yeah, all of a sudden I have

00:12:58.485 --> 00:13:01.365
<v Speaker 2>users from all over the world, people working

00:13:01.365 --> 00:13:02.805
<v Speaker 2>in large environments,

00:13:02.805 --> 00:13:03.845
<v Speaker 2>large clusters,

00:13:03.845 --> 00:13:06.485
<v Speaker 2>which is where my problems were, you know,

00:13:06.485 --> 00:13:08.870
<v Speaker 2>and I find that these exact kind of

00:13:08.870 --> 00:13:09.590
<v Speaker 2>users

00:13:10.070 --> 00:13:10.870
<v Speaker 2>find,

00:13:11.110 --> 00:13:12.870
<v Speaker 2>you know, they get they get the value

00:13:12.870 --> 00:13:15.350
<v Speaker 2>from this tool and it's it's just incredible.

00:13:16.870 --> 00:13:19.110
<v Speaker 1>Yeah. There's there's a lot to unpack there,

00:13:19.110 --> 00:13:20.550
<v Speaker 1>but you're completely right.

00:13:21.795 --> 00:13:23.714
<v Speaker 1>I'll say first, you're like a thousand stars

00:13:23.714 --> 00:13:25.394
<v Speaker 1>away from VC funding. Right? So you just

00:13:25.394 --> 00:13:27.635
<v Speaker 1>gotta keep that hockey stick growth going. But

00:13:28.115 --> 00:13:29.635
<v Speaker 1>I think using

00:13:29.635 --> 00:13:31.795
<v Speaker 1>Cypher and, you know, a graph based query

00:13:31.795 --> 00:13:33.714
<v Speaker 1>language is such a clever move. Right? I

00:13:33.714 --> 00:13:35.714
<v Speaker 1>spend a lot of my time running kubectl

00:13:35.714 --> 00:13:36.115
<v Speaker 1>commands.

00:13:37.050 --> 00:13:39.290
<v Speaker 1>And because we have so many disparate resources

00:13:39.290 --> 00:13:40.570
<v Speaker 1>that are interconnected,

00:13:40.570 --> 00:13:42.490
<v Speaker 1>but, you know, not like a real graph,

00:13:42.490 --> 00:13:44.090
<v Speaker 1>you end up running one command here, getting

00:13:44.090 --> 00:13:46.170
<v Speaker 1>an output, run another command. At some point,

00:13:46.170 --> 00:13:48.250
<v Speaker 1>you start writing bash scripts. I'm now at

00:13:48.250 --> 00:13:50.650
<v Speaker 1>the stage where I've got TypeScript scripts, TypeScript

00:13:50.650 --> 00:13:50.970
<v Speaker 1>scripts,

00:13:51.935 --> 00:13:53.935
<v Speaker 1>where I'm, you know, hitting the Kube control

00:13:53.935 --> 00:13:56.655
<v Speaker 1>API server, parsing some JSON, running it through

00:13:56.655 --> 00:13:58.335
<v Speaker 1>a function, and it's a lot of work.

00:13:58.335 --> 00:13:59.615
<v Speaker 1>And the reason it's a lot of work

00:13:59.615 --> 00:14:01.775
<v Speaker 1>is because it's just not the right approach.

00:14:01.855 --> 00:14:03.775
<v Speaker 1>And then the minute I seen Cypher Netties,

00:14:03.775 --> 00:14:04.415
<v Speaker 1>I was like, oh,

00:14:05.390 --> 00:14:06.990
<v Speaker 1>you know, I've just been looking at the

00:14:06.990 --> 00:14:08.830
<v Speaker 1>problem the wrong way. When you flip it

00:14:08.830 --> 00:14:10.670
<v Speaker 1>on its head and actually use a language

00:14:10.670 --> 00:14:12.270
<v Speaker 1>that is built to do this kind of

00:14:12.270 --> 00:14:13.710
<v Speaker 1>graph traversal

00:14:13.950 --> 00:14:15.630
<v Speaker 1>Yes. Things start to click. And that was,

00:14:15.630 --> 00:14:17.070
<v Speaker 1>like, the the moment I was just like,

00:14:17.070 --> 00:14:18.350
<v Speaker 1>okay. Right. We need to we need to

00:14:18.350 --> 00:14:20.029
<v Speaker 1>show people this project. So I was very

00:14:20.029 --> 00:14:20.270
<v Speaker 1>excited.

00:14:21.904 --> 00:14:23.904
<v Speaker 2>Yeah. Thank you. Yeah. I think you you

00:14:23.904 --> 00:14:25.584
<v Speaker 2>you hit the spot. Like, this is the

00:14:25.584 --> 00:14:27.825
<v Speaker 2>exact problem that this is solving and

00:14:28.305 --> 00:14:30.865
<v Speaker 2>yeah. So thanks for thank you so much

00:14:30.865 --> 00:14:32.785
<v Speaker 2>for appreciating and inviting me to be on

00:14:32.785 --> 00:14:33.105
<v Speaker 2>the show.

00:14:34.510 --> 00:14:35.630
<v Speaker 1>Okay. Cool.

00:14:36.110 --> 00:14:37.390
<v Speaker 1>Well, I mean, I don't need to ask

00:14:37.390 --> 00:14:38.830
<v Speaker 1>you what the name means. I think that's

00:14:38.830 --> 00:14:40.270
<v Speaker 1>pretty self explanatory.

00:14:42.110 --> 00:14:44.430
<v Speaker 1>But I do think maybe we should, you

00:14:44.430 --> 00:14:45.470
<v Speaker 1>know, share a screen.

00:14:46.005 --> 00:14:48.165
<v Speaker 1>Yep. Do some examples, give people an idea

00:14:48.165 --> 00:14:49.605
<v Speaker 1>of how to get started, and then hopefully

00:14:49.605 --> 00:14:51.285
<v Speaker 1>we can explore some of those more difficult

00:14:51.285 --> 00:14:53.845
<v Speaker 1>use cases. I'm definitely curious to see what

00:14:53.845 --> 00:14:56.005
<v Speaker 1>you have been doing with CypherNet is beyond

00:14:56.005 --> 00:14:57.365
<v Speaker 1>what I think I would end up doing

00:14:57.365 --> 00:14:59.205
<v Speaker 1>with CypherNet. Yeah. Yeah.

00:14:59.285 --> 00:15:00.885
<v Speaker 1>Definitely. Pushes over here.

00:15:03.620 --> 00:15:05.140
<v Speaker 1>Now we see your terminal.

00:15:06.180 --> 00:15:08.500
<v Speaker 1>Yeah. Just take it away, and I'll throw

00:15:08.500 --> 00:15:10.180
<v Speaker 1>loads of questions at you as we go.

00:15:10.660 --> 00:15:13.860
<v Speaker 2>Sounds good. Okay. So let's just fire it

00:15:13.860 --> 00:15:17.154
<v Speaker 2>up. And so Cypher NetEase, the CLI actually

00:15:17.154 --> 00:15:17.955
<v Speaker 2>contains

00:15:17.955 --> 00:15:19.315
<v Speaker 2>a few applications,

00:15:20.355 --> 00:15:22.435
<v Speaker 2>but I'll start from the one

00:15:22.755 --> 00:15:24.834
<v Speaker 2>that I, that I started from, which is

00:15:24.834 --> 00:15:27.075
<v Speaker 2>a Cypher NetEase shell. It's just an interactive

00:15:27.075 --> 00:15:28.515
<v Speaker 2>shell that lets you write,

00:15:29.930 --> 00:15:33.050
<v Speaker 2>evaluate Cypher queries or Cypher Native queries,

00:15:33.210 --> 00:15:35.530
<v Speaker 2>right, in your terminal.

00:15:36.490 --> 00:15:37.370
<v Speaker 2>And so

00:15:38.730 --> 00:15:39.690
<v Speaker 2>this is the

00:15:40.170 --> 00:15:43.665
<v Speaker 2>very minimal example, right, of doing a match

00:15:43.665 --> 00:15:46.305
<v Speaker 2>return statement is I would match,

00:15:46.385 --> 00:15:49.105
<v Speaker 2>and then I would draw this pattern, right.

00:15:49.105 --> 00:15:49.745
<v Speaker 2>This,

00:15:50.545 --> 00:15:51.185
<v Speaker 2>graph node,

00:15:51.825 --> 00:15:55.025
<v Speaker 2>node graph pattern, and inside each node would

00:15:55.025 --> 00:15:57.025
<v Speaker 2>be a variable name.

00:15:57.825 --> 00:15:58.225
<v Speaker 2>D,

00:15:59.870 --> 00:16:00.590
<v Speaker 2>and

00:16:00.830 --> 00:16:01.870
<v Speaker 2>let's say

00:16:02.270 --> 00:16:04.750
<v Speaker 2>a Kubernetes kind in Cypher, this is called

00:16:04.750 --> 00:16:05.550
<v Speaker 2>the label,

00:16:06.110 --> 00:16:06.510
<v Speaker 2>but

00:16:08.830 --> 00:16:11.790
<v Speaker 2>Cypher Niddies, we use labels to denote resource

00:16:11.790 --> 00:16:14.590
<v Speaker 2>kinds, right? So match all deployments

00:16:14.565 --> 00:16:15.445
<v Speaker 2>that are

00:16:15.925 --> 00:16:17.125
<v Speaker 2>exposed by

00:16:17.205 --> 00:16:18.085
<v Speaker 2>services

00:16:18.805 --> 00:16:20.405
<v Speaker 2>and then return,

00:16:21.445 --> 00:16:22.245
<v Speaker 2>the

00:16:22.725 --> 00:16:25.045
<v Speaker 2>number of replicas in each deployment

00:16:25.365 --> 00:16:25.685
<v Speaker 2>and

00:16:26.990 --> 00:16:30.190
<v Speaker 2>the cluster IP of each service. Right.

00:16:30.509 --> 00:16:32.670
<v Speaker 2>And then this would return

00:16:33.069 --> 00:16:35.550
<v Speaker 2>a list of all deployments

00:16:37.629 --> 00:16:38.750
<v Speaker 2>and replicas.

00:16:41.215 --> 00:16:41.935
<v Speaker 2>Right?

00:16:42.255 --> 00:16:42.895
<v Speaker 2>And

00:16:43.215 --> 00:16:45.215
<v Speaker 2>their respective services

00:16:45.535 --> 00:16:47.295
<v Speaker 2>and cluster IPs.

00:16:47.695 --> 00:16:48.255
<v Speaker 2>And

00:16:49.215 --> 00:16:51.695
<v Speaker 2>I could refine this query further by adding

00:16:51.695 --> 00:16:56.095
<v Speaker 2>a where clause and say where the spec

00:16:55.300 --> 00:16:56.340
<v Speaker 2>replicas

00:16:56.340 --> 00:16:57.140
<v Speaker 2>is

00:16:57.380 --> 00:17:00.340
<v Speaker 2>large, let's say larger than two, greater than

00:17:00.340 --> 00:17:03.220
<v Speaker 2>two. And then I would only get back

00:17:03.220 --> 00:17:05.059
<v Speaker 2>billing service where I have

00:17:05.619 --> 00:17:06.339
<v Speaker 2>three rep,

00:17:07.955 --> 00:17:08.595
<v Speaker 2>And

00:17:09.075 --> 00:17:11.554
<v Speaker 2>this thing right here, this little arrow

00:17:11.635 --> 00:17:14.035
<v Speaker 2>is, is where all the magic happens, right?

00:17:14.035 --> 00:17:16.195
<v Speaker 2>This is the magic of CypherDesk. It's understanding

00:17:16.195 --> 00:17:17.395
<v Speaker 2>the connections

00:17:17.555 --> 00:17:20.194
<v Speaker 2>between resource kinds and

00:17:20.275 --> 00:17:21.155
<v Speaker 2>this chain

00:17:21.809 --> 00:17:22.369
<v Speaker 2>of,

00:17:23.009 --> 00:17:26.130
<v Speaker 2>so we're not limited to only two resource

00:17:26.130 --> 00:17:27.889
<v Speaker 2>kinds. Of course we could match,

00:17:28.929 --> 00:17:31.729
<v Speaker 2>that's for example, config maps,

00:17:32.769 --> 00:17:34.690
<v Speaker 2>all the config maps that are being used

00:17:34.690 --> 00:17:35.490
<v Speaker 2>by pods,

00:17:37.845 --> 00:17:41.125
<v Speaker 2>that belong in a replica sets

00:17:41.685 --> 00:17:43.765
<v Speaker 2>that belong in a deployment,

00:17:43.845 --> 00:17:45.525
<v Speaker 2>you know, and just,

00:17:46.085 --> 00:17:47.684
<v Speaker 2>return the

00:17:48.245 --> 00:17:51.445
<v Speaker 2>data from this config map and the P

00:17:52.020 --> 00:17:54.100
<v Speaker 2>let's say the phase of the pod

00:17:54.340 --> 00:17:55.620
<v Speaker 2>and the

00:17:55.780 --> 00:17:58.740
<v Speaker 2>name of the replica sets and a number

00:17:58.740 --> 00:17:59.700
<v Speaker 2>of replicas

00:17:59.700 --> 00:18:00.340
<v Speaker 2>and

00:18:00.660 --> 00:18:03.220
<v Speaker 2>the deployment. Right. And I would get this,

00:18:03.380 --> 00:18:06.100
<v Speaker 2>all the data, you know, from four different

00:18:06.100 --> 00:18:06.980
<v Speaker 2>resource kinds,

00:18:07.675 --> 00:18:08.875
<v Speaker 2>aggregated

00:18:09.195 --> 00:18:10.155
<v Speaker 2>in one

00:18:10.315 --> 00:18:11.835
<v Speaker 2>custom payload.

00:18:13.995 --> 00:18:15.995
<v Speaker 1>Yeah. Before you take anything else.

00:18:16.155 --> 00:18:18.555
<v Speaker 1>Mhmm. We we we need to take a

00:18:18.555 --> 00:18:20.235
<v Speaker 1>moment. Right? Because if there's anyone that's watching

00:18:20.235 --> 00:18:22.330
<v Speaker 1>that hasn't already sold on Cybernetics,

00:18:22.330 --> 00:18:23.770
<v Speaker 1>what the fuck is wrong with you? Right?

00:18:23.770 --> 00:18:25.049
<v Speaker 1>Because this is

00:18:25.929 --> 00:18:27.850
<v Speaker 1>like, it's the devil is in the details

00:18:27.850 --> 00:18:29.610
<v Speaker 1>here. There was just so much that I

00:18:29.610 --> 00:18:30.730
<v Speaker 1>think we need we're gonna have to go

00:18:30.730 --> 00:18:32.730
<v Speaker 1>over some of this. Right? But Yep. The

00:18:32.730 --> 00:18:33.370
<v Speaker 1>autocomplete,

00:18:33.705 --> 00:18:36.264
<v Speaker 1>I I wasn't expecting that. That was wonderful.

00:18:37.225 --> 00:18:38.505
<v Speaker 1>The relationship

00:18:38.505 --> 00:18:40.424
<v Speaker 1>inference is very cool. We could talk about

00:18:40.424 --> 00:18:42.345
<v Speaker 1>how you're doing that. I'm very curious. But

00:18:42.345 --> 00:18:43.945
<v Speaker 1>the thing that caught my eye right from

00:18:43.945 --> 00:18:45.784
<v Speaker 1>the very, very start is that when you

00:18:45.784 --> 00:18:47.144
<v Speaker 1>kicked off the CypherNet shell,

00:18:47.870 --> 00:18:50.190
<v Speaker 1>it actually analyzed the schema of the cluster

00:18:50.190 --> 00:18:51.950
<v Speaker 1>to build these types. Right? And when you

00:18:51.950 --> 00:18:53.550
<v Speaker 2>scroll up, there was just two log lines

00:18:53.550 --> 00:18:55.790
<v Speaker 1>that stood out as really, really awesome.

00:18:56.270 --> 00:18:58.590
<v Speaker 1>Now my first question was gonna be I'm

00:18:58.590 --> 00:18:59.950
<v Speaker 1>assuming the answer is a yes. Right? But

00:18:59.950 --> 00:19:01.550
<v Speaker 1>you're not just working with the core v

00:19:01.550 --> 00:19:04.315
<v Speaker 1>one APIs. I'm assuming it works with CRDs

00:19:04.315 --> 00:19:05.835
<v Speaker 1>within the cluster. It would work with your

00:19:05.835 --> 00:19:08.155
<v Speaker 2>CRDs, no problem, and it can even add

00:19:08.155 --> 00:19:09.434
<v Speaker 2>custom relationships.

00:19:10.875 --> 00:19:13.995
<v Speaker 2>So the relationship engine, yeah, that was, this

00:19:13.995 --> 00:19:16.480
<v Speaker 2>is something that's always in continuous right?

00:19:16.720 --> 00:19:18.960
<v Speaker 2>In the beginning, everything was hard coded. I

00:19:18.960 --> 00:19:20.720
<v Speaker 2>just had a list of,

00:19:21.919 --> 00:19:25.440
<v Speaker 2>resources or rules between two kinds

00:19:25.760 --> 00:19:28.080
<v Speaker 2>and each rule needs to contain

00:19:29.175 --> 00:19:31.175
<v Speaker 2>one or more criterions

00:19:31.175 --> 00:19:33.495
<v Speaker 2>for the, for the resources to match. So

00:19:33.495 --> 00:19:34.295
<v Speaker 2>for example,

00:19:34.775 --> 00:19:36.135
<v Speaker 2>a rule between,

00:19:38.135 --> 00:19:39.895
<v Speaker 2>replica sets and

00:19:39.975 --> 00:19:42.855
<v Speaker 2>deployments would be of course the owner reference,

00:19:42.935 --> 00:19:44.695
<v Speaker 2>from the metadata of the,

00:19:45.990 --> 00:19:50.070
<v Speaker 2>replica set needs to match the metadata name

00:19:50.150 --> 00:19:52.790
<v Speaker 2>on field on the deployment. And

00:19:53.830 --> 00:19:56.230
<v Speaker 2>so that's one rule between replica sets and

00:19:56.230 --> 00:19:57.510
<v Speaker 2>deployments. And I just had,

00:19:58.385 --> 00:20:00.945
<v Speaker 2>like, I guess a hundred or

00:20:01.425 --> 00:20:02.065
<v Speaker 2>so

00:20:02.305 --> 00:20:03.745
<v Speaker 2>hard coded rules.

00:20:05.825 --> 00:20:08.785
<v Speaker 2>For the first year or so, I want

00:20:08.785 --> 00:20:12.305
<v Speaker 2>to say of Cypher Native's development, this entire

00:20:12.305 --> 00:20:13.905
<v Speaker 2>relationship engine was just,

00:20:15.710 --> 00:20:18.590
<v Speaker 2>hard coded. Same goes for auto completion, like

00:20:18.590 --> 00:20:19.709
<v Speaker 2>resource specs.

00:20:19.870 --> 00:20:23.309
<v Speaker 2>I just asked an AI to generate a

00:20:23.309 --> 00:20:25.469
<v Speaker 2>bulk of, you know, just a huge

00:20:25.710 --> 00:20:28.565
<v Speaker 2>list of, for each resource guide in the

00:20:28.565 --> 00:20:29.924
<v Speaker 2>core resources

00:20:29.924 --> 00:20:31.924
<v Speaker 2>and in the V1 groups, you know, just

00:20:31.924 --> 00:20:32.724
<v Speaker 2>list

00:20:33.044 --> 00:20:34.004
<v Speaker 2>as many

00:20:34.325 --> 00:20:37.365
<v Speaker 2>adjacent paths as possible for each one. And

00:20:37.365 --> 00:20:39.044
<v Speaker 2>for a long time it was hard coded.

00:20:40.240 --> 00:20:43.279
<v Speaker 2>And I think it was around last September

00:20:43.360 --> 00:20:44.080
<v Speaker 2>that

00:20:44.160 --> 00:20:44.720
<v Speaker 2>I

00:20:45.120 --> 00:20:47.280
<v Speaker 2>kind of realized, okay, this is becoming a

00:20:47.280 --> 00:20:50.640
<v Speaker 2>serious thing. And people already started to ask,

00:20:50.640 --> 00:20:52.924
<v Speaker 2>you know, in the community and passing,

00:20:53.325 --> 00:20:55.645
<v Speaker 2>well, not really passing criticism, but asking me,

00:20:55.645 --> 00:20:56.925
<v Speaker 2>how did you do this? And I would

00:20:56.925 --> 00:20:58.765
<v Speaker 2>say, yeah, this is hard coded right now.

00:20:58.765 --> 00:21:01.725
<v Speaker 2>And eventually I'll get to do this. And,

00:21:03.165 --> 00:21:04.125
<v Speaker 2>so

00:21:04.205 --> 00:21:06.845
<v Speaker 2>once more people started actually,

00:21:07.340 --> 00:21:09.340
<v Speaker 2>not just using it but having their eyes

00:21:09.340 --> 00:21:11.100
<v Speaker 2>on the code, you know, when I realized,

00:21:11.100 --> 00:21:13.340
<v Speaker 2>okay, people are actually looking at this, better

00:21:13.340 --> 00:21:15.019
<v Speaker 2>save my reputation and

00:21:15.260 --> 00:21:17.419
<v Speaker 2>do something serious here. So

00:21:18.700 --> 00:21:19.500
<v Speaker 2>I started

00:21:19.934 --> 00:21:20.894
<v Speaker 2>doing

00:21:20.894 --> 00:21:23.375
<v Speaker 2>this thing where, where, when you connect to

00:21:23.375 --> 00:21:26.735
<v Speaker 2>the, when you launch Cypher Natives either into

00:21:26.735 --> 00:21:29.214
<v Speaker 2>the shell or the web client, which we'll

00:21:30.014 --> 00:21:31.695
<v Speaker 2>look into in a bit,

00:21:32.095 --> 00:21:33.455
<v Speaker 2>then it downloads

00:21:33.455 --> 00:21:36.109
<v Speaker 2>the open API schema from the,

00:21:36.509 --> 00:21:37.709
<v Speaker 2>from the cluster.

00:21:38.909 --> 00:21:41.709
<v Speaker 2>It generates all the auto completion,

00:21:43.230 --> 00:21:45.549
<v Speaker 2>specs for all the resource kinds that the

00:21:45.549 --> 00:21:46.669
<v Speaker 2>service supports

00:21:47.325 --> 00:21:50.684
<v Speaker 2>and no more hard coded auto completion anymore.

00:21:51.245 --> 00:21:53.804
<v Speaker 2>And then it starts scanning.

00:21:53.885 --> 00:21:56.365
<v Speaker 2>Well, it does a few things. So a

00:21:56.365 --> 00:21:58.845
<v Speaker 2>few of the, of those relationships are still

00:21:58.845 --> 00:22:01.085
<v Speaker 2>hard coded. This is, you know, this is

00:22:01.085 --> 00:22:02.900
<v Speaker 2>always a work in progress. I like to

00:22:02.900 --> 00:22:05.220
<v Speaker 2>say this is, yeah, right. This is continuous,

00:22:05.380 --> 00:22:06.179
<v Speaker 2>but something,

00:22:06.740 --> 00:22:09.140
<v Speaker 2>I think the most dramatic thing that I

00:22:09.140 --> 00:22:12.179
<v Speaker 2>did that I started doing there was just

00:22:12.179 --> 00:22:14.980
<v Speaker 2>looking up after I generated this list for

00:22:14.980 --> 00:22:17.620
<v Speaker 2>auto completion, right. I started going through field

00:22:17.620 --> 00:22:20.474
<v Speaker 2>names and then wherever I see a field

00:22:20.475 --> 00:22:23.195
<v Speaker 2>that ends with either ref

00:22:23.195 --> 00:22:23.995
<v Speaker 2>or

00:22:23.995 --> 00:22:26.074
<v Speaker 2>key ref or name,

00:22:26.715 --> 00:22:27.914
<v Speaker 2>then I would look

00:22:28.475 --> 00:22:29.434
<v Speaker 2>behind

00:22:29.434 --> 00:22:31.674
<v Speaker 2>that, you know, key ref or ref or

00:22:31.674 --> 00:22:33.595
<v Speaker 2>name. I would look at the word behind

00:22:33.595 --> 00:22:33.835
<v Speaker 2>that.

00:22:34.410 --> 00:22:36.650
<v Speaker 2>And I would look in the, in the

00:22:36.650 --> 00:22:37.610
<v Speaker 2>GVR

00:22:37.610 --> 00:22:39.690
<v Speaker 2>cache that I built from the open API

00:22:39.690 --> 00:22:42.090
<v Speaker 2>spec. If there's an actual resource kind

00:22:42.170 --> 00:22:44.730
<v Speaker 2>that matches this name. And if there is,

00:22:44.730 --> 00:22:47.635
<v Speaker 2>then I would just create this relationship. So

00:22:47.635 --> 00:22:48.274
<v Speaker 2>you could,

00:22:48.835 --> 00:22:50.674
<v Speaker 2>you can add a CRD

00:22:50.755 --> 00:22:54.674
<v Speaker 2>that has a field called deployment name

00:22:54.835 --> 00:22:57.795
<v Speaker 2>and Cypher Natives would automatically detect the relationship

00:22:57.795 --> 00:22:59.475
<v Speaker 2>between deployments and your,

00:23:00.434 --> 00:23:01.395
<v Speaker 2>in your CRD.

00:23:01.960 --> 00:23:04.120
<v Speaker 1>Yeah. I mean, like I said, the devil's

00:23:04.120 --> 00:23:06.600
<v Speaker 1>in the details here because in Kubernetes land,

00:23:06.600 --> 00:23:09.240
<v Speaker 1>there's no concept of relationships whatsoever. It's all

00:23:09.240 --> 00:23:10.520
<v Speaker 1>very loose definition.

00:23:10.600 --> 00:23:11.559
<v Speaker 1>I mean Yeah.

00:23:12.840 --> 00:23:15.914
<v Speaker 2>So so again, to me, this was if

00:23:15.914 --> 00:23:17.515
<v Speaker 2>I go back to that moment where I

00:23:17.515 --> 00:23:19.355
<v Speaker 2>was looking at all the API code that

00:23:19.355 --> 00:23:21.355
<v Speaker 2>we wrote and the operator that we were

00:23:21.355 --> 00:23:23.914
<v Speaker 2>implementing, and I thought to myself, this needs

00:23:23.914 --> 00:23:25.515
<v Speaker 2>to be internal.

00:23:25.515 --> 00:23:27.674
<v Speaker 2>Like Kubernetes needs to expose,

00:23:28.075 --> 00:23:29.835
<v Speaker 2>like to hold a graph model internally

00:23:30.370 --> 00:23:33.409
<v Speaker 2>and just have this language available to us.

00:23:33.409 --> 00:23:35.330
<v Speaker 2>Like I shouldn't be writing these

00:23:35.890 --> 00:23:36.770
<v Speaker 2>800

00:23:36.770 --> 00:23:38.210
<v Speaker 2>lines or 2,000

00:23:38.210 --> 00:23:41.330
<v Speaker 2>lines of operator code that everybody's writing. It's

00:23:41.330 --> 00:23:43.970
<v Speaker 2>always the same code. Like the actual business

00:23:43.970 --> 00:23:47.715
<v Speaker 2>logic inside most of these custom Kubernetes controllers,

00:23:47.715 --> 00:23:49.395
<v Speaker 2>especially the ones handling,

00:23:49.395 --> 00:23:51.635
<v Speaker 2>only handling internal resources,

00:23:51.875 --> 00:23:53.795
<v Speaker 2>it's not much. Like most of the code

00:23:53.795 --> 00:23:55.795
<v Speaker 2>is what everybody else is writing, all the

00:23:55.795 --> 00:23:56.755
<v Speaker 2>SKU builder

00:23:56.915 --> 00:23:58.434
<v Speaker 2>gen controller stuff.

00:23:58.755 --> 00:24:00.195
<v Speaker 2>So

00:24:00.500 --> 00:24:02.260
<v Speaker 2>to me, this was like a moment where

00:24:02.260 --> 00:24:04.419
<v Speaker 2>I figured I'm going to build the system

00:24:04.659 --> 00:24:07.460
<v Speaker 2>that can take these one liners, like these

00:24:07.460 --> 00:24:09.219
<v Speaker 2>Cypher one liners and

00:24:09.779 --> 00:24:12.260
<v Speaker 2>just run them continuously like an operator or

00:24:12.260 --> 00:24:13.700
<v Speaker 2>even listen to events.

00:24:14.179 --> 00:24:14.419
<v Speaker 2>And

00:24:15.235 --> 00:24:16.674
<v Speaker 2>yeah, so this is,

00:24:17.875 --> 00:24:19.234
<v Speaker 2>this was where I

00:24:19.875 --> 00:24:21.714
<v Speaker 2>came up with the idea for

00:24:22.034 --> 00:24:24.835
<v Speaker 2>actually building a mini operator framework

00:24:24.835 --> 00:24:25.955
<v Speaker 2>around this.

00:24:27.475 --> 00:24:27.715
<v Speaker 2>Yeah.

00:24:46.945 --> 00:24:48.065
<v Speaker 2>Are we back?

00:24:56.225 --> 00:24:58.465
<v Speaker 2>Hey. Hey. I'm not sure if I'm out

00:24:58.625 --> 00:24:59.825
<v Speaker 2>or if David is.

00:25:04.169 --> 00:25:06.009
<v Speaker 2>Let me stop my screen share.

00:25:07.450 --> 00:25:08.090
<v Speaker 2>We'll see.

00:25:33.300 --> 00:25:34.020
<v Speaker 2>Hey.

00:25:38.660 --> 00:25:40.580
<v Speaker 2>Well, I guess David is out, but I

00:25:40.580 --> 00:25:42.179
<v Speaker 2>might as well continue

00:25:42.340 --> 00:25:43.220
<v Speaker 2>demoing this.

00:25:46.155 --> 00:25:48.395
<v Speaker 2>So let me show off a few cool

00:25:48.395 --> 00:25:50.554
<v Speaker 2>other examples for stuff I use,

00:25:51.595 --> 00:25:53.674
<v Speaker 2>cipher nettings on the daily with,

00:25:55.115 --> 00:25:56.155
<v Speaker 2>which is not,

00:25:57.700 --> 00:26:00.980
<v Speaker 2>only match return. Like let's, let's look at

00:26:00.980 --> 00:26:02.419
<v Speaker 2>how this goes beyond the,

00:26:03.779 --> 00:26:05.619
<v Speaker 2>just doing read operations.

00:26:07.539 --> 00:26:07.779
<v Speaker 2>So,

00:26:09.554 --> 00:26:11.154
<v Speaker 2>let's say I wanted to

00:26:11.715 --> 00:26:13.074
<v Speaker 2>look at all pods.

00:26:15.154 --> 00:26:17.554
<v Speaker 1>Am I back? Yeah. You are.

00:26:19.315 --> 00:26:20.835
<v Speaker 2>Wanna be sure if you're Sorry. Yeah.

00:26:22.190 --> 00:26:24.030
<v Speaker 1>My Wi Fi decided that it's done for

00:26:24.030 --> 00:26:25.710
<v Speaker 1>the day, and I'm now tethering.

00:26:25.870 --> 00:26:28.350
<v Speaker 1>So thank you for I I don't know.

00:26:28.350 --> 00:26:29.630
<v Speaker 1>Maybe you sang a song or you've just

00:26:29.630 --> 00:26:31.309
<v Speaker 1>been showing off your No. Would kill something.

00:26:31.309 --> 00:26:33.309
<v Speaker 1>Yeah. I realized you dropped, and then I

00:26:33.309 --> 00:26:35.715
<v Speaker 2>figured, yeah, let's let's carry this thing.

00:26:36.755 --> 00:26:39.155
<v Speaker 2>But you joined right when I did. So,

00:26:39.155 --> 00:26:39.635
<v Speaker 2>okay.

00:26:41.635 --> 00:26:42.435
<v Speaker 2>All right. So,

00:26:43.635 --> 00:26:46.435
<v Speaker 2>so maybe I'll show, I'll show something beyond

00:26:46.435 --> 00:26:49.380
<v Speaker 2>the, like match return stuff. So for example,

00:26:49.620 --> 00:26:51.780
<v Speaker 2>this is something very common, right? That I

00:26:51.780 --> 00:26:54.100
<v Speaker 2>see people doing on the daily where,

00:26:55.380 --> 00:26:57.460
<v Speaker 2>and this is the example, actually the first

00:26:57.460 --> 00:26:59.300
<v Speaker 2>example I have on my readme, right. Which

00:26:59.300 --> 00:27:00.660
<v Speaker 2>is something a lot of people do, which

00:27:00.660 --> 00:27:02.580
<v Speaker 2>is like to match all pods where the,

00:27:02.914 --> 00:27:04.674
<v Speaker 2>where the status,

00:27:05.715 --> 00:27:06.514
<v Speaker 2>phase

00:27:06.674 --> 00:27:08.354
<v Speaker 2>of the pod isn't

00:27:08.434 --> 00:27:09.234
<v Speaker 2>running,

00:27:09.554 --> 00:27:11.715
<v Speaker 2>right. And then delete the pod,

00:27:13.554 --> 00:27:16.230
<v Speaker 2>right. Faulty service. I had one, I had

00:27:16.230 --> 00:27:17.190
<v Speaker 2>one let's,

00:27:17.910 --> 00:27:18.950
<v Speaker 2>I could show

00:27:19.270 --> 00:27:23.429
<v Speaker 2>match all pods and return the piece

00:27:23.430 --> 00:27:24.309
<v Speaker 2>status,

00:27:25.030 --> 00:27:25.909
<v Speaker 2>phase.

00:27:26.150 --> 00:27:28.550
<v Speaker 2>Right. And I can see, I have all

00:27:28.550 --> 00:27:29.430
<v Speaker 2>these pods.

00:27:29.855 --> 00:27:32.495
<v Speaker 2>This is running, this one's running and

00:27:32.575 --> 00:27:35.695
<v Speaker 2>faulty services. Well, it's, it's pending right now.

00:27:35.695 --> 00:27:36.255
<v Speaker 2>Right.

00:27:36.815 --> 00:27:39.135
<v Speaker 2>So if I run this query,

00:27:40.415 --> 00:27:40.895
<v Speaker 2>right.

00:27:41.295 --> 00:27:43.054
<v Speaker 2>It'll just delete the one

00:27:44.335 --> 00:27:44.735
<v Speaker 2>or,

00:27:46.260 --> 00:27:48.420
<v Speaker 2>or yeah. Or if I ask it to,

00:27:48.660 --> 00:27:51.460
<v Speaker 2>only match the ones that are running right.

00:27:51.460 --> 00:27:52.020
<v Speaker 2>And

00:27:52.580 --> 00:27:53.300
<v Speaker 2>set

00:27:53.700 --> 00:27:54.500
<v Speaker 2>their,

00:27:55.060 --> 00:27:55.940
<v Speaker 2>say

00:27:55.940 --> 00:27:56.660
<v Speaker 2>metadata,

00:27:58.255 --> 00:27:59.135
<v Speaker 2>annotations

00:27:59.135 --> 00:28:01.855
<v Speaker 2>foo equals bar. Right?

00:28:02.015 --> 00:28:02.654
<v Speaker 2>And,

00:28:05.695 --> 00:28:08.335
<v Speaker 2>what did I do wrong here? So rejected

00:28:08.335 --> 00:28:09.695
<v Speaker 2>due to an error in my

00:28:10.175 --> 00:28:10.895
<v Speaker 2>request. Oh,

00:28:11.620 --> 00:28:12.820
<v Speaker 2>Well, this isn't,

00:28:13.380 --> 00:28:14.419
<v Speaker 2>this isn't nice,

00:28:14.580 --> 00:28:15.059
<v Speaker 2>but,

00:28:17.539 --> 00:28:20.340
<v Speaker 2>I'll give another example. So let's match,

00:28:21.460 --> 00:28:22.659
<v Speaker 2>all deployments

00:28:22.659 --> 00:28:23.460
<v Speaker 2>where

00:28:23.715 --> 00:28:24.994
<v Speaker 2>the spec,

00:28:26.035 --> 00:28:27.075
<v Speaker 2>replicas

00:28:29.955 --> 00:28:31.155
<v Speaker 2>replicas

00:28:31.155 --> 00:28:33.154
<v Speaker 2>is higher than two,

00:28:34.355 --> 00:28:36.355
<v Speaker 2>return the metadata

00:28:36.914 --> 00:28:37.475
<v Speaker 2>name,

00:28:39.570 --> 00:28:42.450
<v Speaker 2>right? It's billing service. So let's ask it

00:28:42.450 --> 00:28:44.369
<v Speaker 2>to set the spec

00:28:44.530 --> 00:28:45.730
<v Speaker 2>replicas

00:28:45.730 --> 00:28:46.450
<v Speaker 2>to,

00:28:46.850 --> 00:28:48.850
<v Speaker 2>I don't know, one

00:28:49.250 --> 00:28:49.970
<v Speaker 2>or

00:28:50.130 --> 00:28:50.929
<v Speaker 2>four,

00:28:51.809 --> 00:28:53.890
<v Speaker 2>and it will patch

00:28:53.385 --> 00:28:55.785
<v Speaker 2>billing service. And then if I ask it

00:28:55.785 --> 00:28:56.345
<v Speaker 2>to,

00:28:57.225 --> 00:28:58.024
<v Speaker 2>return,

00:28:58.905 --> 00:29:00.664
<v Speaker 2>the number of replicas again,

00:29:01.785 --> 00:29:03.385
<v Speaker 2>I can see that patched up to four

00:29:03.385 --> 00:29:03.785
<v Speaker 2>because,

00:29:06.220 --> 00:29:07.259
<v Speaker 2>Similarly,

00:29:07.340 --> 00:29:09.500
<v Speaker 2>yeah, similarly, I could ask it to, you

00:29:09.500 --> 00:29:11.499
<v Speaker 2>know, use a, use a

00:29:11.820 --> 00:29:12.539
<v Speaker 2>complex

00:29:12.860 --> 00:29:15.820
<v Speaker 2>pattern here, like, like I showed before with

00:29:15.820 --> 00:29:18.860
<v Speaker 2>four or five or however many resource kinds

00:29:18.860 --> 00:29:20.185
<v Speaker 2>where with

00:29:20.665 --> 00:29:22.665
<v Speaker 2>one or more conditions in the where clause

00:29:22.665 --> 00:29:24.345
<v Speaker 2>and yeah, it'll just know how to patch

00:29:24.345 --> 00:29:25.065
<v Speaker 2>all of them.

00:29:26.985 --> 00:29:28.505
<v Speaker 1>Yeah, it's such a powerful

00:29:28.585 --> 00:29:28.985
<v Speaker 1>model.

00:29:32.500 --> 00:29:33.860
<v Speaker 1>Limits of what you could do with this

00:29:33.860 --> 00:29:35.460
<v Speaker 1>are pretty cool. I I like where it

00:29:35.460 --> 00:29:36.980
<v Speaker 1>goes, and it just simplifies a lot of

00:29:36.980 --> 00:29:40.340
<v Speaker 1>those tedious kubectl commands and piping through j

00:29:40.340 --> 00:29:42.020
<v Speaker 1>q and all this other stuff. Right? This

00:29:42.020 --> 00:29:43.779
<v Speaker 1>this is just a really elegant way of

00:29:43.779 --> 00:29:45.835
<v Speaker 1>working with it. And, again, it's because you've

00:29:45.835 --> 00:29:48.315
<v Speaker 1>approached it without looking at the existing query

00:29:48.315 --> 00:29:49.675
<v Speaker 1>methods and just came at it from a

00:29:49.675 --> 00:29:51.595
<v Speaker 1>different angle, which I think works really well.

00:29:51.755 --> 00:29:54.155
<v Speaker 1>And did you, during my absence, handle the

00:29:54.155 --> 00:29:55.435
<v Speaker 1>question from Alejandro?

00:29:56.315 --> 00:29:58.235
<v Speaker 2>I did not. Did not. I did not

00:29:58.235 --> 00:29:59.355
<v Speaker 2>realize it was

00:29:59.520 --> 00:30:00.640
<v Speaker 2>So Alejandro

00:30:00.640 --> 00:30:02.320
<v Speaker 1>is curious if he can use this from

00:30:02.320 --> 00:30:04.240
<v Speaker 1>Go. So I guess Yeah. Maybe you could

00:30:04.240 --> 00:30:06.240
<v Speaker 1>share some information on and as as CypherKnight

00:30:06.240 --> 00:30:07.760
<v Speaker 1>is written in Go, can people use it

00:30:07.760 --> 00:30:09.840
<v Speaker 1>as a library? What are they used?

00:30:10.480 --> 00:30:11.040
<v Speaker 2>Definitely.

00:30:11.325 --> 00:30:13.565
<v Speaker 2>So this, I think is a good is

00:30:13.565 --> 00:30:15.644
<v Speaker 2>maybe a good segue for like my

00:30:16.764 --> 00:30:20.365
<v Speaker 2>vision for this generally. Right? Or the why

00:30:20.365 --> 00:30:23.245
<v Speaker 2>I'm doing this, writing this shell. We'll look

00:30:23.245 --> 00:30:25.085
<v Speaker 2>in a minute, we'll look at the web

00:30:25.085 --> 00:30:27.480
<v Speaker 2>client and the operator framework that I built

00:30:27.480 --> 00:30:28.760
<v Speaker 2>around cybernetics.

00:30:29.800 --> 00:30:30.519
<v Speaker 2>So

00:30:30.920 --> 00:30:33.240
<v Speaker 2>my idea for this is that this is

00:30:33.240 --> 00:30:35.320
<v Speaker 2>a really great language and I just want

00:30:35.320 --> 00:30:37.880
<v Speaker 2>this to be a language for Kubernetes that's

00:30:37.880 --> 00:30:41.320
<v Speaker 2>available to any project out there. The latest

00:30:41.320 --> 00:30:44.485
<v Speaker 2>release that we did for Cypher NetEase v15,

00:30:45.125 --> 00:30:46.005
<v Speaker 2>which

00:30:46.005 --> 00:30:49.205
<v Speaker 2>was released just last week was very

00:30:49.205 --> 00:30:50.405
<v Speaker 2>much around

00:30:50.405 --> 00:30:52.645
<v Speaker 2>this, around the effort of

00:30:53.125 --> 00:30:56.325
<v Speaker 2>separating the language, like creating a clean interface

00:30:56.325 --> 00:30:59.639
<v Speaker 2>between the language and the actual Kubernetes provider.

00:30:59.880 --> 00:31:00.440
<v Speaker 2>So,

00:31:02.440 --> 00:31:03.720
<v Speaker 2>when you,

00:31:03.960 --> 00:31:06.039
<v Speaker 2>integrate this into Go,

00:31:06.679 --> 00:31:10.279
<v Speaker 2>you can use, so Syphonetics includes this package,

00:31:10.679 --> 00:31:11.799
<v Speaker 2>called core

00:31:12.034 --> 00:31:14.754
<v Speaker 2>and a provider called API

00:31:14.755 --> 00:31:15.554
<v Speaker 2>server,

00:31:15.715 --> 00:31:18.995
<v Speaker 2>which is a provider for running Kubernetes queries

00:31:18.995 --> 00:31:21.554
<v Speaker 2>against the API server of your cluster.

00:31:22.835 --> 00:31:25.234
<v Speaker 2>And you can just include this package.

00:31:25.475 --> 00:31:28.740
<v Speaker 2>And if your existing project is already a

00:31:28.740 --> 00:31:31.140
<v Speaker 2>Kubernetes project and you just want to,

00:31:31.620 --> 00:31:33.220
<v Speaker 2>include Cypher Netties,

00:31:33.700 --> 00:31:36.900
<v Speaker 2>support, then you can bring your own Kubernetes

00:31:36.900 --> 00:31:39.860
<v Speaker 2>client into Cypher Netties and they'll use that.

00:31:40.304 --> 00:31:41.744
<v Speaker 2>You can also,

00:31:42.225 --> 00:31:45.264
<v Speaker 2>just have the Cypher Natives core package spun

00:31:45.264 --> 00:31:46.304
<v Speaker 2>up its own,

00:31:47.264 --> 00:31:50.465
<v Speaker 2>set of like Kubernetes dynamic client and, and,

00:31:50.465 --> 00:31:50.864
<v Speaker 2>and,

00:31:51.585 --> 00:31:52.465
<v Speaker 2>discovery clients.

00:31:54.360 --> 00:31:55.560
<v Speaker 2>But additionally,

00:31:55.640 --> 00:31:57.480
<v Speaker 2>like, as I said, the interface is very

00:31:57.480 --> 00:31:58.360
<v Speaker 2>clean,

00:31:58.440 --> 00:32:01.880
<v Speaker 2>like cleanly separates the language from actually Kubernetes.

00:32:01.880 --> 00:32:05.560
<v Speaker 2>So even products that don't use Kubernetes,

00:32:05.640 --> 00:32:08.040
<v Speaker 2>like ones for big, larger observability

00:32:08.040 --> 00:32:08.760
<v Speaker 2>product

00:32:09.015 --> 00:32:12.935
<v Speaker 2>that use, I know, like reflect etcd into

00:32:12.935 --> 00:32:15.335
<v Speaker 2>Postgres or elastic search or something like that.

00:32:16.055 --> 00:32:18.695
<v Speaker 2>Then you can also implement a new provider

00:32:19.015 --> 00:32:21.655
<v Speaker 2>on top of our API server provider and

00:32:21.655 --> 00:32:25.120
<v Speaker 2>just change the GET requests, for example, to

00:32:25.120 --> 00:32:26.639
<v Speaker 2>read them from

00:32:26.799 --> 00:32:30.799
<v Speaker 2>Postgres or Elasticsearch or your custom backend. Right.

00:32:31.039 --> 00:32:32.559
<v Speaker 2>And all of these,

00:32:33.120 --> 00:32:33.919
<v Speaker 2>applications

00:32:34.159 --> 00:32:36.825
<v Speaker 2>that I built, the operator framework, the shell,

00:32:36.825 --> 00:32:39.385
<v Speaker 2>the web, I see them as proof of

00:32:39.385 --> 00:32:42.665
<v Speaker 2>concept, right? That the language has merit because

00:32:42.665 --> 00:32:45.225
<v Speaker 2>almost everybody that I show them this,

00:32:46.105 --> 00:32:48.105
<v Speaker 2>ask me something like, oh, so how can

00:32:48.105 --> 00:32:50.540
<v Speaker 2>I use this for alerts? Right? How can

00:32:50.540 --> 00:32:52.460
<v Speaker 2>I create metrics with this? Oh, this would

00:32:52.460 --> 00:32:53.980
<v Speaker 2>be great for showing me

00:32:54.300 --> 00:32:57.180
<v Speaker 2>best practices. Like where do I have misconfigurations

00:32:57.180 --> 00:32:58.860
<v Speaker 2>and stuff? So I think all of these

00:32:58.860 --> 00:33:00.620
<v Speaker 2>are great applicable

00:33:00.620 --> 00:33:01.419
<v Speaker 2>ideas

00:33:01.420 --> 00:33:04.365
<v Speaker 2>for cipher natives. And I just want the

00:33:04.365 --> 00:33:07.245
<v Speaker 2>the language to be out there, for other

00:33:07.245 --> 00:33:09.405
<v Speaker 2>go projects to be able to integrate and

00:33:09.405 --> 00:33:10.925
<v Speaker 2>build awesome stuff around.

00:33:12.845 --> 00:33:14.925
<v Speaker 1>Yeah. I mean, I think once you have,

00:33:15.370 --> 00:33:17.450
<v Speaker 1>I'm assuming I know. I've I've tried not

00:33:17.450 --> 00:33:19.289
<v Speaker 1>to make assumptions on behalf of other people.

00:33:19.289 --> 00:33:21.610
<v Speaker 1>Right? For me personally, I can see myself

00:33:21.610 --> 00:33:23.210
<v Speaker 1>coming up with a whole bunch of health

00:33:23.210 --> 00:33:25.049
<v Speaker 1>checks and safety queries that I wanna run

00:33:25.049 --> 00:33:28.090
<v Speaker 1>regularly against my cluster that do identify anomalies.

00:33:28.090 --> 00:33:30.090
<v Speaker 1>Now, of course, I've got monitoring and other

00:33:30.090 --> 00:33:30.490
<v Speaker 1>stuff. Right?

00:33:31.365 --> 00:33:33.365
<v Speaker 1>But those are read only and so require

00:33:33.365 --> 00:33:35.685
<v Speaker 1>manual intervention or other tooling. What I like

00:33:35.685 --> 00:33:37.445
<v Speaker 1>about the Cypher NetEase approach is that I

00:33:37.445 --> 00:33:39.044
<v Speaker 1>can actually build down some rather

00:33:39.365 --> 00:33:40.645
<v Speaker 1>well, I mean, you can start off with

00:33:40.645 --> 00:33:43.365
<v Speaker 1>primitive reconciliation where required, you know, opt in

00:33:43.365 --> 00:33:44.885
<v Speaker 1>the replicas if you need to, if things

00:33:44.885 --> 00:33:45.685
<v Speaker 1>are getting too slow.

00:33:47.000 --> 00:33:49.480
<v Speaker 1>But also I could I see a situation

00:33:49.480 --> 00:33:51.240
<v Speaker 1>where I have a runbook, like a Jupyter

00:33:51.240 --> 00:33:53.640
<v Speaker 1>Notebook that runs a various of these queries

00:33:53.640 --> 00:33:55.400
<v Speaker 1>and provides like a single pane of glass

00:33:55.400 --> 00:33:57.240
<v Speaker 1>into the cluster for people that, you know,

00:33:57.240 --> 00:33:59.000
<v Speaker 1>just aren't that clear of Kubernetes. Like, you

00:33:59.000 --> 00:34:00.840
<v Speaker 2>know, one of That would be incredible. Knowledge

00:34:00.840 --> 00:34:01.960
<v Speaker 1>as much as possible. Right?

00:34:02.905 --> 00:34:05.465
<v Speaker 1>Because, again, we can't expect everyone on the

00:34:05.465 --> 00:34:06.905
<v Speaker 1>team to be able to drop one into

00:34:06.905 --> 00:34:09.225
<v Speaker 1>a terminal, run 50 queries just to say,

00:34:09.225 --> 00:34:11.465
<v Speaker 1>is my cluster healthy? And, again, I know

00:34:11.465 --> 00:34:13.625
<v Speaker 1>people are screaming at me going, well, have

00:34:13.625 --> 00:34:15.705
<v Speaker 1>Grafana and have all these tools and spend

00:34:15.705 --> 00:34:16.900
<v Speaker 1>money here and then do all that. That.

00:34:16.900 --> 00:34:18.820
<v Speaker 1>Sometimes you just need to get into the

00:34:18.820 --> 00:34:21.139
<v Speaker 1>weeds of things. And I think there's a

00:34:21.139 --> 00:34:22.739
<v Speaker 1>time and a place. And I do have

00:34:22.739 --> 00:34:24.659
<v Speaker 1>monitoring, but sometimes I think I know better

00:34:24.659 --> 00:34:26.260
<v Speaker 1>than the monitoring, which is maybe a little

00:34:26.260 --> 00:34:28.180
<v Speaker 1>bit of a hubris. However,

00:34:28.739 --> 00:34:30.580
<v Speaker 1>does I think what you're everything you said

00:34:30.580 --> 00:34:32.205
<v Speaker 1>there is perfect as well. It's like, you

00:34:32.205 --> 00:34:33.965
<v Speaker 1>know, you proved the method in the language,

00:34:33.965 --> 00:34:35.805
<v Speaker 1>and I think the bounds of what you

00:34:35.805 --> 00:34:37.405
<v Speaker 1>could build on top of this and tools

00:34:37.405 --> 00:34:38.605
<v Speaker 1>and interfaces,

00:34:38.925 --> 00:34:41.245
<v Speaker 1>user interface, all of this is really exciting,

00:34:41.245 --> 00:34:42.765
<v Speaker 1>and I can't wait to see some more.

00:34:42.765 --> 00:34:43.245
<v Speaker 1>Before

00:34:43.965 --> 00:34:45.725
<v Speaker 1>we take a look at operators and and

00:34:45.725 --> 00:34:47.819
<v Speaker 1>web stuff, like, what else does the CLI

00:34:47.819 --> 00:34:49.980
<v Speaker 1>do? What else is available to people? Is

00:34:49.980 --> 00:34:51.420
<v Speaker 1>it just a shell or is there something

00:34:51.420 --> 00:34:51.900
<v Speaker 1>else?

00:34:52.299 --> 00:34:54.219
<v Speaker 2>So the shell is also

00:34:54.779 --> 00:34:57.180
<v Speaker 2>it also includes a web client and you

00:34:57.180 --> 00:34:58.700
<v Speaker 2>can actually also deploy

00:34:58.940 --> 00:35:01.019
<v Speaker 2>the operator, but that's more for testing and

00:35:01.019 --> 00:35:03.245
<v Speaker 2>dev work. The operator

00:35:03.405 --> 00:35:04.765
<v Speaker 2>also exists on

00:35:05.005 --> 00:35:06.525
<v Speaker 2>artifact hub, of course.

00:35:07.245 --> 00:35:07.725
<v Speaker 2>But,

00:35:09.005 --> 00:35:10.205
<v Speaker 2>so the shell,

00:35:11.885 --> 00:35:12.925
<v Speaker 2>Cypher,

00:35:13.005 --> 00:35:15.005
<v Speaker 2>Kubernetes, it has the

00:35:15.885 --> 00:35:17.165
<v Speaker 2>shell

00:35:18.780 --> 00:35:20.700
<v Speaker 2>application that we just saw. You can also

00:35:20.700 --> 00:35:23.820
<v Speaker 2>run single queries. So like Cypher Natives query

00:35:23.820 --> 00:35:24.540
<v Speaker 2>something.

00:35:24.620 --> 00:35:26.460
<v Speaker 1>I can just take this into Bash scripts.

00:35:26.780 --> 00:35:28.780
<v Speaker 2>Yeah. Yeah. Exactly. For CI,

00:35:29.100 --> 00:35:30.380
<v Speaker 2>manage p pod,

00:35:30.805 --> 00:35:31.845
<v Speaker 2>return

00:35:31.845 --> 00:35:33.205
<v Speaker 2>p. Right?

00:35:34.885 --> 00:35:37.045
<v Speaker 1>Can those queries be chained? Like, if I

00:35:37.045 --> 00:35:39.365
<v Speaker 1>do a match, find all pods, and I

00:35:39.365 --> 00:35:41.285
<v Speaker 1>wanna chain those results to another query, is

00:35:41.285 --> 00:35:42.485
<v Speaker 1>that something we can do with Cypher?

00:35:43.059 --> 00:35:46.339
<v Speaker 2>So not yet. Well, with actual Cypher, yes.

00:35:46.339 --> 00:35:48.500
<v Speaker 2>With Cypher Nitties, not yet. This is definitely

00:35:48.500 --> 00:35:51.460
<v Speaker 2>on the roadmap, but, but not yet.

00:35:52.740 --> 00:35:55.140
<v Speaker 2>And yeah, so besides

00:35:55.140 --> 00:35:57.940
<v Speaker 2>shell and query, which is what I started

00:35:57.940 --> 00:36:00.175
<v Speaker 2>off with, you know, and I was developing

00:36:00.175 --> 00:36:02.575
<v Speaker 2>the shell, adding auto completion, coloring, all of

00:36:02.575 --> 00:36:03.055
<v Speaker 2>this,

00:36:04.575 --> 00:36:05.855
<v Speaker 2>at one point,

00:36:06.175 --> 00:36:06.815
<v Speaker 2>you know,

00:36:07.935 --> 00:36:08.975
<v Speaker 2>I added,

00:36:09.535 --> 00:36:11.855
<v Speaker 2>a friend told me what, well, why won't

00:36:11.855 --> 00:36:14.670
<v Speaker 2>this draw graphs? Right. And I thought about

00:36:14.670 --> 00:36:16.750
<v Speaker 2>it and I kind of like in my

00:36:16.750 --> 00:36:18.910
<v Speaker 2>mind, went over it and I said, yeah,

00:36:18.910 --> 00:36:21.070
<v Speaker 2>I mean, I do collect all this info

00:36:21.230 --> 00:36:23.310
<v Speaker 2>and I have the relationship info. I can

00:36:23.310 --> 00:36:25.150
<v Speaker 2>just create a list of nodes and graphs

00:36:25.150 --> 00:36:27.310
<v Speaker 2>and just draw it. So I started out

00:36:27.310 --> 00:36:28.430
<v Speaker 2>by adding this

00:36:29.405 --> 00:36:31.565
<v Speaker 2>option in the, in the shell first, you

00:36:31.565 --> 00:36:32.685
<v Speaker 2>know, it was,

00:36:33.085 --> 00:36:34.605
<v Speaker 2>so this disabled

00:36:34.605 --> 00:36:36.845
<v Speaker 2>graph output, it's true by default, but if

00:36:36.845 --> 00:36:37.325
<v Speaker 2>you,

00:36:37.725 --> 00:36:39.485
<v Speaker 2>just run the backslash G

00:36:39.645 --> 00:36:40.605
<v Speaker 2>it'll start,

00:36:41.790 --> 00:36:45.230
<v Speaker 2>drawing graphs for everything to match. So let's

00:36:45.230 --> 00:36:46.910
<v Speaker 2>do this one again.

00:36:47.390 --> 00:36:49.550
<v Speaker 2>So match the configured maps into pods, into

00:36:49.550 --> 00:36:51.630
<v Speaker 2>record sets, into deployments and just return all

00:36:51.630 --> 00:36:52.590
<v Speaker 2>of this and it'll,

00:36:53.965 --> 00:36:56.045
<v Speaker 2>Oh no. So I have, I have an

00:36:56.045 --> 00:36:57.484
<v Speaker 2>issue here. I'm going to have to fix

00:36:57.484 --> 00:36:58.605
<v Speaker 2>this afterwards.

00:36:58.605 --> 00:37:00.765
<v Speaker 2>I'm sorry about that, but let's, but let's

00:37:00.765 --> 00:37:02.525
<v Speaker 2>actually look at this in the web, right?

00:37:02.525 --> 00:37:04.125
<v Speaker 2>Let's look at this in the web client.

00:37:04.205 --> 00:37:04.765
<v Speaker 2>So,

00:37:05.645 --> 00:37:08.365
<v Speaker 2>it'll send me into a local host 8080,

00:37:08.770 --> 00:37:09.650
<v Speaker 2>And then

00:37:10.050 --> 00:37:10.930
<v Speaker 2>let's,

00:37:12.050 --> 00:37:13.890
<v Speaker 2>let's see what do I have here. Oh,

00:37:13.890 --> 00:37:15.490
<v Speaker 2>yeah. I have I have pretty much the

00:37:15.490 --> 00:37:17.730
<v Speaker 2>same query here in in history. So is

00:37:17.730 --> 00:37:19.810
<v Speaker 1>that the query history from the interactive shell

00:37:19.810 --> 00:37:21.890
<v Speaker 1>as well? Is it Not from the shell.

00:37:21.890 --> 00:37:24.035
<v Speaker 2>This one actually stays in local storage in

00:37:24.035 --> 00:37:25.875
<v Speaker 2>the browser, but just so happens that I

00:37:25.875 --> 00:37:28.115
<v Speaker 2>have the same query because I was demoing,

00:37:28.275 --> 00:37:30.755
<v Speaker 2>before. So this is an example I like

00:37:30.755 --> 00:37:32.355
<v Speaker 2>to give, right? So,

00:37:32.595 --> 00:37:34.275
<v Speaker 2>you can see that it's, it gives us

00:37:34.275 --> 00:37:36.275
<v Speaker 2>a nice little graph representation

00:37:36.275 --> 00:37:36.515
<v Speaker 2>of,

00:37:37.800 --> 00:37:40.280
<v Speaker 2>of the deployment that goes into the replica

00:37:40.280 --> 00:37:42.360
<v Speaker 2>sets and going, goes into the pod and

00:37:42.360 --> 00:37:42.920
<v Speaker 2>the,

00:37:43.240 --> 00:37:45.880
<v Speaker 2>config map and just hovering over one would,

00:37:46.120 --> 00:37:48.280
<v Speaker 2>would narrow down the results that we see

00:37:48.280 --> 00:37:50.055
<v Speaker 2>on the, on the lessons. I mean, looks

00:37:50.055 --> 00:37:52.295
<v Speaker 1>familiar. This is the actual Neo4j

00:37:52.375 --> 00:37:53.495
<v Speaker 1>interface. So I

00:37:53.815 --> 00:37:55.815
<v Speaker 2>was paying tribute, you know, I was paying

00:37:55.815 --> 00:37:57.655
<v Speaker 2>tribute to the, to the,

00:37:58.375 --> 00:38:01.655
<v Speaker 2>program that got me hooked on Cypher, you

00:38:01.655 --> 00:38:02.215
<v Speaker 2>know, this is,

00:38:03.069 --> 00:38:06.109
<v Speaker 2>so let's see, imagine deployments and services and

00:38:06.109 --> 00:38:07.710
<v Speaker 2>return DS and,

00:38:08.030 --> 00:38:10.910
<v Speaker 2>here are all the deployments and services. And

00:38:10.910 --> 00:38:13.470
<v Speaker 2>let's say, I want to also see the,

00:38:14.270 --> 00:38:15.470
<v Speaker 2>the pods

00:38:15.470 --> 00:38:16.190
<v Speaker 2>and

00:38:17.355 --> 00:38:18.955
<v Speaker 2>replica sets, right.

00:38:19.675 --> 00:38:20.395
<v Speaker 2>The

00:38:20.475 --> 00:38:21.275
<v Speaker 2>P

00:38:21.595 --> 00:38:22.955
<v Speaker 2>yeah. And

00:38:23.115 --> 00:38:25.115
<v Speaker 2>just get all of these back and this

00:38:25.115 --> 00:38:26.315
<v Speaker 2>lets me kinda,

00:38:27.275 --> 00:38:28.635
<v Speaker 2>you know, focus

00:38:28.715 --> 00:38:29.595
<v Speaker 2>and

00:38:30.160 --> 00:38:31.840
<v Speaker 2>narrow down the results here.

00:38:32.240 --> 00:38:34.320
<v Speaker 2>And I added little options of

00:38:34.720 --> 00:38:37.920
<v Speaker 2>view underneath as Jason or YAML and filter

00:38:37.920 --> 00:38:39.440
<v Speaker 2>out the managed fields

00:38:39.520 --> 00:38:40.160
<v Speaker 2>that

00:38:40.320 --> 00:38:43.375
<v Speaker 2>usually nobody wants to look at and a

00:38:43.375 --> 00:38:45.454
<v Speaker 2>bunch of other options that kind of made

00:38:45.454 --> 00:38:47.375
<v Speaker 2>this my new daily driver.

00:38:47.615 --> 00:38:50.015
<v Speaker 2>I want to say I was doing this

00:38:50.015 --> 00:38:50.734
<v Speaker 2>more

00:38:50.815 --> 00:38:52.974
<v Speaker 2>kind of for PR reasons because I thought

00:38:52.974 --> 00:38:54.974
<v Speaker 2>it looked sexy and, you know, I'll put

00:38:54.974 --> 00:38:57.135
<v Speaker 2>the video out there and which it did,

00:38:57.135 --> 00:38:59.480
<v Speaker 2>you know, it brought, definitely brought more attention

00:38:59.480 --> 00:39:01.960
<v Speaker 2>to Cypher Nadees, but I actually found myself

00:39:01.960 --> 00:39:03.320
<v Speaker 2>using this more

00:39:03.480 --> 00:39:05.800
<v Speaker 2>than the interactive shell and just starting to

00:39:05.800 --> 00:39:08.840
<v Speaker 2>use the web interface, which is pretty cool.

00:39:09.880 --> 00:39:12.599
<v Speaker 2>So, so much so that I didn't notice

00:39:12.599 --> 00:39:14.214
<v Speaker 2>that the graph functionality

00:39:14.214 --> 00:39:15.735
<v Speaker 2>broke in the shell.

00:39:16.615 --> 00:39:18.375
<v Speaker 2>Like it did just now in the demo.

00:39:18.375 --> 00:39:20.055
<v Speaker 2>So I'm gonna run and fix that right

00:39:20.055 --> 00:39:21.255
<v Speaker 2>after our session.

00:39:22.214 --> 00:39:23.415
<v Speaker 1>Okay. Nice.

00:39:24.455 --> 00:39:26.455
<v Speaker 1>So what about a situation

00:39:27.175 --> 00:39:28.135
<v Speaker 1>where

00:39:30.299 --> 00:39:33.099
<v Speaker 1>it's unable to determine

00:39:33.180 --> 00:39:34.380
<v Speaker 1>a relationship?

00:39:34.380 --> 00:39:36.619
<v Speaker 1>Is it possible with the query language to

00:39:36.619 --> 00:39:38.779
<v Speaker 1>say that these are related on these fields

00:39:38.779 --> 00:39:41.500
<v Speaker 1>with this discriminator of some way like? Yes.

00:39:41.785 --> 00:39:42.425
<v Speaker 2>Yes.

00:39:43.305 --> 00:39:45.625
<v Speaker 2>Yes. So this is, this was something that

00:39:45.625 --> 00:39:48.345
<v Speaker 2>the community was asking for and I just

00:39:48.345 --> 00:39:48.985
<v Speaker 2>ended,

00:39:49.225 --> 00:39:51.145
<v Speaker 2>I just added at one point you can

00:39:51.145 --> 00:39:53.465
<v Speaker 2>see here that it says I added, it

00:39:53.465 --> 00:39:55.065
<v Speaker 2>found 79

00:39:55.065 --> 00:39:58.010
<v Speaker 2>internal relationship and one custom. So the custom

00:39:58.010 --> 00:40:00.170
<v Speaker 2>relationships you can put in your,

00:40:01.130 --> 00:40:02.730
<v Speaker 2>dot cipher Nidhi's,

00:40:03.290 --> 00:40:04.410
<v Speaker 2>relationships.

00:40:04.490 --> 00:40:06.490
<v Speaker 2>And if we look at that, that would

00:40:06.490 --> 00:40:09.210
<v Speaker 2>be a way to describe a relationship between,

00:40:09.210 --> 00:40:11.850
<v Speaker 2>for example, pods and deployments. Right.

00:40:12.330 --> 00:40:12.570
<v Speaker 2>So

00:40:13.265 --> 00:40:15.585
<v Speaker 2>a deployment owns a pod

00:40:15.905 --> 00:40:18.145
<v Speaker 2>if, and this is the criteria and it

00:40:18.145 --> 00:40:19.985
<v Speaker 2>only has a single criterion.

00:40:20.385 --> 00:40:21.745
<v Speaker 2>If the field

00:40:21.905 --> 00:40:22.705
<v Speaker 2>metadata

00:40:22.705 --> 00:40:23.505
<v Speaker 2>name

00:40:25.185 --> 00:40:27.105
<v Speaker 2>of the pod

00:40:28.550 --> 00:40:29.750
<v Speaker 2>contains

00:40:30.550 --> 00:40:33.270
<v Speaker 2>the metadata name of the deployment.

00:40:33.270 --> 00:40:35.190
<v Speaker 2>So just a demo,

00:40:35.350 --> 00:40:36.070
<v Speaker 2>you know,

00:40:37.750 --> 00:40:38.710
<v Speaker 2>pretty, you know,

00:40:40.565 --> 00:40:41.525
<v Speaker 2>optimistic

00:40:41.525 --> 00:40:42.725
<v Speaker 2>relationship

00:40:42.725 --> 00:40:44.805
<v Speaker 2>that I added just for, you know, testing

00:40:44.805 --> 00:40:47.605
<v Speaker 2>purposes or demo purposes right now. But let's

00:40:47.605 --> 00:40:50.405
<v Speaker 2>assume a deployment owns a pod, right? If

00:40:50.405 --> 00:40:51.845
<v Speaker 2>the, if the

00:40:52.085 --> 00:40:54.245
<v Speaker 2>name of the pod contains the name of

00:40:54.245 --> 00:40:57.569
<v Speaker 2>the deployment, right? So if it's a user's

00:40:57.569 --> 00:40:59.410
<v Speaker 2>service is the name of the deployment,

00:40:59.490 --> 00:41:02.609
<v Speaker 2>then it makes sense that user service,

00:41:02.849 --> 00:41:04.130
<v Speaker 2>7477

00:41:04.130 --> 00:41:04.850
<v Speaker 2>something

00:41:04.930 --> 00:41:07.490
<v Speaker 2>is related to that. So if I'll just

00:41:07.490 --> 00:41:10.605
<v Speaker 2>launch back into the show and match,

00:41:11.085 --> 00:41:12.685
<v Speaker 2>the deployments

00:41:14.605 --> 00:41:17.725
<v Speaker 2>that are connected to pods and return

00:41:17.885 --> 00:41:18.685
<v Speaker 2>the

00:41:22.445 --> 00:41:24.125
<v Speaker 2>spec replicas again

00:41:24.470 --> 00:41:26.550
<v Speaker 2>and the p status

00:41:26.869 --> 00:41:27.670
<v Speaker 2>status

00:41:27.670 --> 00:41:28.630
<v Speaker 2>phase.

00:41:30.470 --> 00:41:31.109
<v Speaker 2>Yeah.

00:41:31.829 --> 00:41:33.349
<v Speaker 2>So I get all of these.

00:41:33.910 --> 00:41:35.750
<v Speaker 1>Okay. I'm gonna I don't wanna put you

00:41:35.750 --> 00:41:37.029
<v Speaker 1>on a spot, so if this is too

00:41:37.029 --> 00:41:39.575
<v Speaker 1>tricky, we can follow-up later on this. Right?

00:41:39.575 --> 00:41:41.494
<v Speaker 1>But let's do a match query and find

00:41:41.494 --> 00:41:42.935
<v Speaker 1>all service accounts.

00:41:43.895 --> 00:41:45.255
<v Speaker 2>Let's start query

00:41:45.415 --> 00:41:48.135
<v Speaker 2>that'll find all service accounts. Alright. So let's

00:41:48.135 --> 00:41:49.415
<v Speaker 2>say s a

00:41:49.655 --> 00:41:51.175
<v Speaker 2>find all service

00:41:51.655 --> 00:41:52.695
<v Speaker 2>accounts. Right?

00:41:53.109 --> 00:41:53.910
<v Speaker 2>Return

00:41:54.150 --> 00:41:55.110
<v Speaker 2>as a,

00:41:55.910 --> 00:41:56.550
<v Speaker 2>whatever.

00:41:57.510 --> 00:41:58.950
<v Speaker 1>Yeah. Meditator. Name.

00:41:59.589 --> 00:42:01.510
<v Speaker 2>All right. Yeah. The name name is by

00:42:01.510 --> 00:42:03.750
<v Speaker 2>the way, is always returned by default, you

00:42:03.750 --> 00:42:06.310
<v Speaker 2>know, like a special name field, but yeah,

00:42:06.310 --> 00:42:07.670
<v Speaker 2>we can do this and it'll return the

00:42:07.670 --> 00:42:10.065
<v Speaker 2>name twice. So this is the only service

00:42:10.065 --> 00:42:12.385
<v Speaker 2>account I have right here. It's default one.

00:42:12.545 --> 00:42:14.945
<v Speaker 1>Okay. So can we now request the pods

00:42:14.945 --> 00:42:16.625
<v Speaker 1>that are using this service account?

00:42:17.505 --> 00:42:18.465
<v Speaker 2>Let's

00:42:18.465 --> 00:42:21.825
<v Speaker 2>see. Let's see. I'm gonna assume the inference

00:42:21.825 --> 00:42:23.660
<v Speaker 1>doesn't detect us. I was wondering if we

00:42:23.660 --> 00:42:24.700
<v Speaker 1>could do it manually.

00:42:25.020 --> 00:42:26.300
<v Speaker 1>And then there's the hard

00:42:26.700 --> 00:42:28.940
<v Speaker 1>mode as well. We we can try. We

00:42:28.940 --> 00:42:32.060
<v Speaker 2>can try. Let's see. So status phase.

00:42:32.460 --> 00:42:34.860
<v Speaker 2>Oh, it actually detected that all of these

00:42:34.860 --> 00:42:37.020
<v Speaker 2>are using the the default. And this is

00:42:37.020 --> 00:42:39.155
<v Speaker 2>not something I hard code service accounts into

00:42:39.155 --> 00:42:42.035
<v Speaker 2>pods. Definitely not. So probably pod

00:42:42.115 --> 00:42:42.675
<v Speaker 2>has

00:42:42.915 --> 00:42:43.555
<v Speaker 2>a service

00:42:43.795 --> 00:42:46.355
<v Speaker 2>account name on it. Yes. So just because

00:42:46.355 --> 00:42:47.955
<v Speaker 2>it ends with the word name,

00:42:48.195 --> 00:42:50.675
<v Speaker 2>then it looked up what's behind name, what

00:42:50.675 --> 00:42:52.595
<v Speaker 2>came before name and it was service account

00:42:52.869 --> 00:42:54.310
<v Speaker 2>and it realized,

00:42:54.310 --> 00:42:56.070
<v Speaker 2>oh, there is a GVR,

00:42:56.230 --> 00:42:58.790
<v Speaker 2>you know, called service accounts. So that matches

00:42:58.790 --> 00:43:01.589
<v Speaker 2>service accounts. So I would create the connection

00:43:01.589 --> 00:43:03.510
<v Speaker 2>between these two. And yeah, it just worked.

00:43:03.510 --> 00:43:05.435
<v Speaker 1>Let's let's try the hard mode question because

00:43:05.435 --> 00:43:07.035
<v Speaker 1>now I'm I'm feeling a bit more confident

00:43:07.035 --> 00:43:09.835
<v Speaker 1>that this might work. Alright. Alright. Let's find

00:43:09.835 --> 00:43:13.915
<v Speaker 2>service It surprised me too. You know? Let's

00:43:13.915 --> 00:43:16.395
<v Speaker 1>find service accounts and rule rule bindings.

00:43:17.210 --> 00:43:19.210
<v Speaker 2>Let's see. So service accounts

00:43:19.529 --> 00:43:20.569
<v Speaker 1>We may have to do this in the

00:43:20.569 --> 00:43:21.930
<v Speaker 1>cube system namespace.

00:43:22.809 --> 00:43:23.609
<v Speaker 2>Let's

00:43:23.609 --> 00:43:26.329
<v Speaker 2>see. Let's do that. Let's do that. Let's

00:43:26.329 --> 00:43:28.329
<v Speaker 2>go to cube system and

00:43:29.049 --> 00:43:29.930
<v Speaker 2>match

00:43:29.930 --> 00:43:30.650
<v Speaker 2>all,

00:43:31.049 --> 00:43:32.650
<v Speaker 2>service accounts

00:43:32.730 --> 00:43:35.825
<v Speaker 2>that connect into a role bindings.

00:43:35.984 --> 00:43:36.625
<v Speaker 1>Yeah.

00:43:44.225 --> 00:43:46.865
<v Speaker 2>Role binding metadata name. Yours whole thing.

00:43:49.100 --> 00:43:50.060
<v Speaker 2>Resource.

00:43:50.380 --> 00:43:52.780
<v Speaker 2>It's scan. So yeah. No. No. Relationship not

00:43:52.780 --> 00:43:54.940
<v Speaker 2>found. Yeah. It didn't detect the relationship between

00:43:54.940 --> 00:43:55.660
<v Speaker 2>those two.

00:43:56.140 --> 00:43:58.060
<v Speaker 1>Yeah. So we could probably write a custom

00:43:58.060 --> 00:44:00.300
<v Speaker 1>relationship to do that. And but let's let's

00:44:00.300 --> 00:44:01.740
<v Speaker 1>skip a step because I I I want

00:44:01.740 --> 00:44:03.255
<v Speaker 1>us to do a couple of, oh, I

00:44:03.255 --> 00:44:04.775
<v Speaker 1>don't know, like, maybe talk about the operator

00:44:04.775 --> 00:44:07.095
<v Speaker 1>before we finish. Right? But Okay. What I

00:44:07.095 --> 00:44:08.615
<v Speaker 1>actually want you to do is stay okay.

00:44:08.694 --> 00:44:10.615
<v Speaker 1>There's been a service accounts that have some

00:44:10.615 --> 00:44:12.295
<v Speaker 1>sort of role bindings, and then really what

00:44:12.295 --> 00:44:13.895
<v Speaker 1>I wanted to do is filter them on

00:44:13.895 --> 00:44:15.654
<v Speaker 1>the role bindings where they have certain permissions.

00:44:16.070 --> 00:44:17.670
<v Speaker 1>So let's just do the query of role

00:44:17.670 --> 00:44:19.190
<v Speaker 1>binders to see if we can find one

00:44:19.190 --> 00:44:21.030
<v Speaker 1>that has permission to create pods.

00:44:21.910 --> 00:44:23.990
<v Speaker 2>Mhmm. Yeah. I'm not I'm not sure if

00:44:23.990 --> 00:44:25.510
<v Speaker 2>I have one in this cluster, but let's

00:44:25.510 --> 00:44:27.830
<v Speaker 2>see. So That's why I said go to

00:44:27.830 --> 00:44:29.430
<v Speaker 1>cube system. So I'm assuming we'll be able

00:44:29.430 --> 00:44:31.030
<v Speaker 1>to work with system masters.

00:44:31.190 --> 00:44:35.215
<v Speaker 2>Mhmm. Mhmm. Let's let's first look at what

00:44:35.215 --> 00:44:36.575
<v Speaker 2>this returns. Right?

00:44:36.975 --> 00:44:37.615
<v Speaker 2>So,

00:44:39.055 --> 00:44:41.135
<v Speaker 2>well, we have a few role bindings. Right?

00:44:41.135 --> 00:44:42.655
<v Speaker 2>Let's Oh, you'll need to get the role

00:44:42.655 --> 00:44:43.295
<v Speaker 1>of that.

00:44:46.360 --> 00:44:47.160
<v Speaker 2>Mhmm.

00:44:48.600 --> 00:44:50.680
<v Speaker 1>So if you can then build the relationship

00:44:50.680 --> 00:44:52.840
<v Speaker 1>to the role or cluster role.

00:44:53.160 --> 00:44:54.760
<v Speaker 1>I don't know. Maybe that won't exist either,

00:44:54.760 --> 00:44:56.440
<v Speaker 1>but we can try. Let's see.

00:45:01.935 --> 00:45:04.575
<v Speaker 2>Yeah. So this works out of the box.

00:45:04.575 --> 00:45:06.975
<v Speaker 2>Row bindings into roles works. Yeah.

00:45:07.775 --> 00:45:09.775
<v Speaker 2>Mhmm. Okay. So can we see the whole

00:45:09.775 --> 00:45:10.815
<v Speaker 1>rule object?

00:45:12.655 --> 00:45:15.535
<v Speaker 1>Yeah. You just return r. Yeah. Yeah.

00:45:16.530 --> 00:45:18.050
<v Speaker 1>There we go. So now we've got access

00:45:18.050 --> 00:45:19.010
<v Speaker 1>to the rules

00:45:19.330 --> 00:45:21.250
<v Speaker 1>where we could create on

00:45:22.050 --> 00:45:23.570
<v Speaker 1>verbs create pods.

00:45:25.490 --> 00:45:26.770
<v Speaker 2>So rules,

00:45:27.170 --> 00:45:29.650
<v Speaker 2>verbs Our secrets secrets watch. Let's just keep

00:45:29.650 --> 00:45:30.770
<v Speaker 1>it simple for now. Right?

00:45:31.555 --> 00:45:32.275
<v Speaker 2>Mhmm.

00:45:32.595 --> 00:45:34.275
<v Speaker 1>So is that something we can query? So

00:45:34.275 --> 00:45:36.355
<v Speaker 1>we're looking for any role that has or

00:45:36.355 --> 00:45:38.035
<v Speaker 1>any role of a role binding that has

00:45:38.035 --> 00:45:40.035
<v Speaker 1>the ability to execute secrets

00:45:40.115 --> 00:45:40.915
<v Speaker 1>watch.

00:45:41.555 --> 00:45:42.675
<v Speaker 2>So where

00:45:42.915 --> 00:45:43.795
<v Speaker 2>role

00:45:45.395 --> 00:45:46.195
<v Speaker 2>Roles. Let's say,

00:45:47.529 --> 00:45:48.490
<v Speaker 2>Rules.

00:45:50.170 --> 00:45:51.369
<v Speaker 2>Rules. Sorry.

00:45:51.930 --> 00:45:52.970
<v Speaker 2>Rules.

00:45:53.609 --> 00:45:54.170
<v Speaker 2>Yeah.

00:45:55.450 --> 00:45:56.650
<v Speaker 2>Any. Right?

00:45:57.369 --> 00:45:57.930
<v Speaker 1>Verbs.

00:46:00.905 --> 00:46:02.425
<v Speaker 1>And we're looking for contains

00:46:02.425 --> 00:46:03.225
<v Speaker 1>watch.

00:46:03.625 --> 00:46:05.065
<v Speaker 1>Yeah. Contains

00:46:05.065 --> 00:46:05.945
<v Speaker 2>watch.

00:46:06.105 --> 00:46:07.305
<v Speaker 1>This is so cool. It

00:46:09.785 --> 00:46:12.505
<v Speaker 2>was expecting a number in an array index

00:46:12.505 --> 00:46:14.105
<v Speaker 2>and it got a star. It's supposed to

00:46:14.105 --> 00:46:15.680
<v Speaker 2>take a star as well. I'll check why

00:46:15.680 --> 00:46:17.599
<v Speaker 2>this didn't work, but, yeah, if I just

00:46:17.599 --> 00:46:19.359
<v Speaker 2>change it to zero, then, yeah, it detects

00:46:19.359 --> 00:46:20.160
<v Speaker 2>lot of these.

00:46:23.920 --> 00:46:25.760
<v Speaker 1>That is very, very interesting.

00:46:26.415 --> 00:46:27.775
<v Speaker 1>I mean, these are some of the more

00:46:27.775 --> 00:46:29.695
<v Speaker 1>difficult queries that I run against my clusters

00:46:29.695 --> 00:46:31.215
<v Speaker 1>on a regular basis, which is, you know,

00:46:31.215 --> 00:46:33.695
<v Speaker 1>trying to understand the security posture, who has

00:46:33.695 --> 00:46:35.455
<v Speaker 1>access, who has over permissions. And,

00:46:35.855 --> 00:46:37.215
<v Speaker 1>again, I do know there are tools I

00:46:37.215 --> 00:46:38.575
<v Speaker 1>can go pay for for this than some

00:46:38.575 --> 00:46:40.895
<v Speaker 1>open source tools, but sometimes I just like

00:46:40.895 --> 00:46:43.780
<v Speaker 1>to run some queries. Like, this I can't

00:46:43.780 --> 00:46:45.619
<v Speaker 1>believe how many this is like 80 characters

00:46:45.619 --> 00:46:47.780
<v Speaker 1>at most, and I'm getting a lot of

00:46:47.780 --> 00:46:49.620
<v Speaker 1>information back. To me, that is just

00:46:50.579 --> 00:46:51.540
<v Speaker 1>that is wonderful.

00:46:51.700 --> 00:46:52.740
<v Speaker 1>I mean, I could not be happy to.

00:46:52.740 --> 00:46:53.700
<v Speaker 2>Yeah.

00:46:53.700 --> 00:46:55.940
<v Speaker 2>This is what turned it very quickly into

00:46:55.940 --> 00:46:58.295
<v Speaker 2>a daily driver for me. You know, even

00:46:58.295 --> 00:47:00.615
<v Speaker 2>just the most simple stuff you can think

00:47:00.615 --> 00:47:01.974
<v Speaker 2>of just changing

00:47:01.974 --> 00:47:02.935
<v Speaker 2>a value

00:47:03.095 --> 00:47:05.815
<v Speaker 2>in a, in a Helm chart, right. And

00:47:05.815 --> 00:47:07.255
<v Speaker 2>then applying this chart.

00:47:07.494 --> 00:47:09.654
<v Speaker 2>And then I want to see the three

00:47:09.654 --> 00:47:12.579
<v Speaker 2>different resources that it changed and effect that

00:47:12.579 --> 00:47:14.660
<v Speaker 2>it had on specific fields, you know, just,

00:47:14.660 --> 00:47:17.140
<v Speaker 2>just doing this day to day, very basic

00:47:17.140 --> 00:47:20.260
<v Speaker 2>stuff, turn Cypher Nitties into a daily driver.

00:47:20.260 --> 00:47:22.579
<v Speaker 2>Like I can't do without this on the,

00:47:22.579 --> 00:47:25.235
<v Speaker 2>on the day for me, and I'm definitely

00:47:25.235 --> 00:47:27.875
<v Speaker 2>gonna fix the star not working here.

00:47:28.275 --> 00:47:30.275
<v Speaker 1>We try it just with the open close

00:47:30.275 --> 00:47:31.715
<v Speaker 1>squares. Would that work?

00:47:32.275 --> 00:47:33.795
<v Speaker 1>So just remove the zero?

00:47:34.115 --> 00:47:34.595
<v Speaker 2>No.

00:47:34.995 --> 00:47:36.755
<v Speaker 2>No, no. It's a, it's supposed to take

00:47:36.755 --> 00:47:39.075
<v Speaker 2>a, yeah, this is expected number and actually

00:47:39.075 --> 00:47:41.670
<v Speaker 2>I'm, yeah. So this is a regression because

00:47:41.670 --> 00:47:43.910
<v Speaker 2>I remember taking stars as well, but never

00:47:43.910 --> 00:47:45.910
<v Speaker 2>mind though. We'll we'll get this working.

00:47:46.310 --> 00:47:48.150
<v Speaker 2>There's gonna be a patch by the end

00:47:48.150 --> 00:47:50.070
<v Speaker 2>of the day for this. That will take

00:47:50.070 --> 00:47:50.710
<v Speaker 2>stars as well.

00:47:52.035 --> 00:47:52.595
<v Speaker 1>Alright.

00:47:52.994 --> 00:47:54.914
<v Speaker 1>Edward Hart, I've already popped a comment on

00:47:54.914 --> 00:47:56.434
<v Speaker 1>the screen, but he's really loving the look

00:47:56.434 --> 00:47:57.075
<v Speaker 1>of this.

00:47:57.395 --> 00:47:59.395
<v Speaker 1>And hi, Alejandro is asking, is this like

00:47:59.395 --> 00:48:01.475
<v Speaker 1>having a sequel there on top of Kubernetes?

00:48:01.954 --> 00:48:03.954
<v Speaker 1>I mean, yeah. It is So there's

00:48:04.920 --> 00:48:05.560
<v Speaker 2>there's prior

00:48:07.559 --> 00:48:10.599
<v Speaker 2>work, you know, there's, there's been other projects

00:48:10.599 --> 00:48:13.080
<v Speaker 2>that did this with SQL,

00:48:13.880 --> 00:48:14.360
<v Speaker 2>but

00:48:14.839 --> 00:48:16.119
<v Speaker 2>while SQL,

00:48:16.119 --> 00:48:18.645
<v Speaker 2>I think is a great choice for a

00:48:18.645 --> 00:48:22.325
<v Speaker 2>query language because everybody knows SQL and almost

00:48:22.325 --> 00:48:23.605
<v Speaker 2>nobody in the world

00:48:23.845 --> 00:48:24.965
<v Speaker 2>knows Cypher.

00:48:25.525 --> 00:48:28.565
<v Speaker 2>Well, most people from the data realm, right,

00:48:28.565 --> 00:48:29.845
<v Speaker 2>they know Cypher,

00:48:29.845 --> 00:48:31.685
<v Speaker 2>but not so much, not so many people

00:48:31.685 --> 00:48:33.780
<v Speaker 2>in operations and DevOps.

00:48:34.500 --> 00:48:35.140
<v Speaker 2>But

00:48:36.580 --> 00:48:38.420
<v Speaker 2>I think SQL,

00:48:38.580 --> 00:48:39.380
<v Speaker 2>fundamentally

00:48:39.380 --> 00:48:41.460
<v Speaker 2>for doing this kind of stuff, just having

00:48:41.460 --> 00:48:42.660
<v Speaker 2>to write joins,

00:48:42.660 --> 00:48:44.500
<v Speaker 2>you know, it's, to me it felt so

00:48:44.500 --> 00:48:44.900
<v Speaker 2>off.

00:48:45.885 --> 00:48:48.045
<v Speaker 2>I, I, it didn't even, you know, cross

00:48:48.045 --> 00:48:49.245
<v Speaker 2>my mind. It was,

00:48:49.885 --> 00:48:52.365
<v Speaker 2>I need Cypher for Kubernetes.

00:48:52.365 --> 00:48:54.925
<v Speaker 2>This was a, like a given for me.

00:48:54.925 --> 00:48:58.045
<v Speaker 2>So I did of course look into all

00:48:58.045 --> 00:49:00.125
<v Speaker 2>the projects that tried to do this before

00:49:00.125 --> 00:49:03.040
<v Speaker 2>me and all of them used SQL.

00:49:03.680 --> 00:49:06.000
<v Speaker 2>And I think Cypher is just a better

00:49:06.000 --> 00:49:08.320
<v Speaker 2>choice for this, you know, because I think

00:49:08.320 --> 00:49:10.720
<v Speaker 2>this little arrow, being able to do this,

00:49:10.720 --> 00:49:13.119
<v Speaker 2>you know, this is so powerful. There's so

00:49:13.119 --> 00:49:16.080
<v Speaker 2>much that that's happening behind these two characters.

00:49:16.455 --> 00:49:19.175
<v Speaker 2>That to me feels like magic, you know?

00:49:19.975 --> 00:49:21.895
<v Speaker 1>Yeah. Again, it's the

00:49:22.295 --> 00:49:25.175
<v Speaker 1>user experience and the ergonomics, right? You're working

00:49:25.175 --> 00:49:26.855
<v Speaker 1>with graph data, you need a language that

00:49:26.855 --> 00:49:29.349
<v Speaker 1>can understand and take away some of the

00:49:29.349 --> 00:49:32.550
<v Speaker 1>imperative nature. SQL with all these joins and

00:49:32.550 --> 00:49:34.070
<v Speaker 1>extra things like that,

00:49:34.550 --> 00:49:36.230
<v Speaker 1>it is not pleasant for this time of

00:49:36.230 --> 00:49:38.630
<v Speaker 1>structured data. So Yes. You know, I think

00:49:38.630 --> 00:49:41.190
<v Speaker 1>it's inside it's just an absolute brilliant project.

00:49:41.555 --> 00:49:42.835
<v Speaker 1>I mean, I'm gonna say this is the

00:49:42.835 --> 00:49:44.915
<v Speaker 1>coolest Kubernetes project I have seen this year.

00:49:44.915 --> 00:49:46.435
<v Speaker 1>And by this year, mean, in last ten

00:49:46.435 --> 00:49:48.275
<v Speaker 2>days. Not the last ten days, the last

00:49:48.275 --> 00:49:51.075
<v Speaker 1>twelve months. This is the coolest thing. I'm

00:49:51.075 --> 00:49:52.835
<v Speaker 2>humbled. Thank you so much for taking that.

00:49:52.915 --> 00:49:54.275
<v Speaker 2>Alright. You wanna take a look at the

00:49:54.275 --> 00:49:56.435
<v Speaker 2>operator real quick? So this is

00:49:57.040 --> 00:49:59.200
<v Speaker 2>going back, going back to the problem that

00:49:59.200 --> 00:50:01.760
<v Speaker 2>started it all. Right. I told you before

00:50:01.760 --> 00:50:03.119
<v Speaker 2>I was heading the,

00:50:03.520 --> 00:50:06.160
<v Speaker 2>DevOps, the infrastructure division in Lemonade,

00:50:06.400 --> 00:50:08.720
<v Speaker 2>and we had this big dev cluster, 300

00:50:08.720 --> 00:50:12.025
<v Speaker 2>something nodes, right? And these are all dev

00:50:12.025 --> 00:50:12.905
<v Speaker 2>environments.

00:50:12.905 --> 00:50:15.065
<v Speaker 2>So every night the cluster kind of goes

00:50:15.065 --> 00:50:17.225
<v Speaker 2>to sleep, right? And the way we, because

00:50:17.225 --> 00:50:18.905
<v Speaker 2>devs don't work at night and the way

00:50:18.905 --> 00:50:20.665
<v Speaker 2>we put it to sleep is we scale

00:50:20.665 --> 00:50:22.105
<v Speaker 2>down all the deployments.

00:50:22.539 --> 00:50:25.099
<v Speaker 2>And then over time we started noticing the

00:50:25.099 --> 00:50:27.579
<v Speaker 2>ingress controller growing wild

00:50:27.579 --> 00:50:28.300
<v Speaker 2>because

00:50:28.779 --> 00:50:29.500
<v Speaker 2>the,

00:50:30.539 --> 00:50:33.420
<v Speaker 2>let me boot up the shell and because,

00:50:33.900 --> 00:50:38.859
<v Speaker 2>if you looked at the deployments and

00:50:38.385 --> 00:50:40.385
<v Speaker 2>services that they connect to

00:50:40.625 --> 00:50:41.425
<v Speaker 2>and

00:50:41.585 --> 00:50:42.945
<v Speaker 2>exposed by ingresses,

00:50:42.945 --> 00:50:43.425
<v Speaker 2>right,

00:50:43.985 --> 00:50:47.105
<v Speaker 2>return the spec replicas

00:50:47.105 --> 00:50:49.985
<v Speaker 2>and return the S cluster

00:50:49.985 --> 00:50:51.905
<v Speaker 2>AP and the I

00:50:52.770 --> 00:50:53.650
<v Speaker 2>spec

00:50:54.210 --> 00:50:55.010
<v Speaker 2>ingress

00:50:55.330 --> 00:50:56.930
<v Speaker 2>class name,

00:50:57.010 --> 00:50:58.290
<v Speaker 2>right? So,

00:50:59.490 --> 00:51:01.650
<v Speaker 2>yeah, if you looked at these over time

00:51:01.650 --> 00:51:04.130
<v Speaker 2>NGINX Ingress started to grow

00:51:05.010 --> 00:51:06.610
<v Speaker 2>bonkers because

00:51:07.005 --> 00:51:09.724
<v Speaker 2>what we realized or what we were theorizing,

00:51:09.724 --> 00:51:11.165
<v Speaker 2>right, was that

00:51:12.125 --> 00:51:15.085
<v Speaker 2>there were missing endpoints because some of these

00:51:15.085 --> 00:51:18.444
<v Speaker 2>people were not bringing their environments back online,

00:51:19.480 --> 00:51:20.120
<v Speaker 2>right?

00:51:20.360 --> 00:51:22.840
<v Speaker 2>Either because they left the company or they

00:51:22.840 --> 00:51:24.760
<v Speaker 2>don't need the environment anymore,

00:51:24.840 --> 00:51:27.480
<v Speaker 2>or they went on vacation and so on

00:51:27.480 --> 00:51:30.040
<v Speaker 2>and so forth. Right. But we kept on

00:51:30.040 --> 00:51:32.440
<v Speaker 2>having a growing number of deployments

00:51:32.795 --> 00:51:35.515
<v Speaker 2>that actually had zero replicas.

00:51:35.755 --> 00:51:38.075
<v Speaker 2>And that caused the validation

00:51:38.155 --> 00:51:41.035
<v Speaker 2>webhooks of NGINX ingress to crash

00:51:41.355 --> 00:51:43.595
<v Speaker 2>over time in a larger cluster. You know,

00:51:43.595 --> 00:51:45.435
<v Speaker 2>the more missing end points it had, the

00:51:45.435 --> 00:51:48.030
<v Speaker 2>more CPU it was burning every time it

00:51:48.030 --> 00:51:49.550
<v Speaker 2>was doing config reloads.

00:51:49.550 --> 00:51:53.070
<v Speaker 2>And then our ingresses started failing altogether.

00:51:53.150 --> 00:51:54.910
<v Speaker 2>Right. So my thought was

00:51:55.630 --> 00:51:57.790
<v Speaker 2>we, all we need to do is find

00:51:57.790 --> 00:51:59.150
<v Speaker 2>all these deployments

00:51:59.230 --> 00:52:00.990
<v Speaker 2>that have zero replicas,

00:52:00.990 --> 00:52:01.950
<v Speaker 2>right? Like match.

00:52:02.605 --> 00:52:03.965
<v Speaker 2>So

00:52:04.845 --> 00:52:07.885
<v Speaker 2>do this thing right where

00:52:07.885 --> 00:52:10.125
<v Speaker 2>these spec replicas

00:52:10.125 --> 00:52:11.325
<v Speaker 2>equals zero.

00:52:11.965 --> 00:52:14.445
<v Speaker 2>And then instead of returning something set,

00:52:15.085 --> 00:52:15.485
<v Speaker 2>spec

00:52:15.950 --> 00:52:18.990
<v Speaker 2>ingress class name to

00:52:19.230 --> 00:52:20.430
<v Speaker 2>inactive,

00:52:20.430 --> 00:52:21.950
<v Speaker 2>right. Or something just

00:52:22.270 --> 00:52:25.150
<v Speaker 2>make, have the ingress control or not select.

00:52:25.550 --> 00:52:26.110
<v Speaker 2>Right.

00:52:26.910 --> 00:52:29.895
<v Speaker 2>And then, and then do the, and then

00:52:29.895 --> 00:52:32.135
<v Speaker 2>on the flip side, change it to active

00:52:32.215 --> 00:52:35.255
<v Speaker 2>if it has more than zero revenue. Right.

00:52:35.335 --> 00:52:36.295
<v Speaker 2>So that

00:52:37.015 --> 00:52:40.935
<v Speaker 2>was the initial idea that where I thought

00:52:40.070 --> 00:52:42.230
<v Speaker 2>I could express this whole thing in one

00:52:42.230 --> 00:52:44.230
<v Speaker 2>line of Cypher. It was this,

00:52:44.310 --> 00:52:44.790
<v Speaker 2>right?

00:52:45.110 --> 00:52:48.550
<v Speaker 2>So after almost a year of developing Cypher

00:52:48.550 --> 00:52:51.270
<v Speaker 2>Niddies and doing the shell and the shell

00:52:51.270 --> 00:52:52.869
<v Speaker 2>started to feel kind of mature,

00:52:53.445 --> 00:52:56.165
<v Speaker 2>that's where I said, okay, now I'm going

00:52:56.165 --> 00:52:59.605
<v Speaker 2>to build a mini operator framework around this.

00:52:59.925 --> 00:53:00.565
<v Speaker 2>And

00:53:01.125 --> 00:53:03.765
<v Speaker 2>so in my mind, I wish right. That

00:53:03.765 --> 00:53:04.725
<v Speaker 2>Kubernetes

00:53:04.725 --> 00:53:08.485
<v Speaker 2>hold held this internally and to express

00:53:10.160 --> 00:53:11.520
<v Speaker 2>decision making

00:53:11.680 --> 00:53:13.440
<v Speaker 2>like this in Kubernetes,

00:53:13.599 --> 00:53:15.440
<v Speaker 2>we can, we can express it with one

00:53:15.440 --> 00:53:16.000
<v Speaker 2>line.

00:53:16.319 --> 00:53:19.200
<v Speaker 2>Like ideally in my mind, Kubernetes would have

00:53:19.200 --> 00:53:21.680
<v Speaker 2>this custom resource where I can tell it,

00:53:21.975 --> 00:53:24.295
<v Speaker 2>or this is at least how I imagined

00:53:24.295 --> 00:53:27.495
<v Speaker 2>it. Let's go to a project Cyphernes

00:53:29.095 --> 00:53:29.895
<v Speaker 2>operator.

00:53:31.015 --> 00:53:32.055
<v Speaker 2>I have a

00:53:32.535 --> 00:53:33.975
<v Speaker 2>nice little sample here.

00:53:34.855 --> 00:53:37.815
<v Speaker 2>So dynamic operator, ingress activator,

00:53:38.030 --> 00:53:38.670
<v Speaker 2>right?

00:53:38.910 --> 00:53:39.630
<v Speaker 2>Where

00:53:39.790 --> 00:53:40.830
<v Speaker 2>on update,

00:53:41.869 --> 00:53:43.950
<v Speaker 2>right? It watches deployments.

00:53:46.030 --> 00:53:47.870
<v Speaker 2>This is a concept I kind of

00:53:48.990 --> 00:53:51.070
<v Speaker 2>invented for this, which is like a continuous

00:53:51.070 --> 00:53:54.475
<v Speaker 2>query or I called it a dynamic operator.

00:53:54.475 --> 00:53:55.115
<v Speaker 2>Right?

00:53:55.355 --> 00:53:57.515
<v Speaker 2>So this is a way to spawn

00:53:57.515 --> 00:54:00.635
<v Speaker 2>these many dynamic operators on the fly

00:54:01.275 --> 00:54:02.635
<v Speaker 2>and just tell them, Hey,

00:54:03.195 --> 00:54:04.715
<v Speaker 2>watch all the deployments

00:54:04.715 --> 00:54:06.635
<v Speaker 2>in the default namespace.

00:54:06.635 --> 00:54:08.715
<v Speaker 2>And when there's an update

00:54:09.170 --> 00:54:11.650
<v Speaker 2>match the deployment with

00:54:11.810 --> 00:54:12.370
<v Speaker 2>this

00:54:12.690 --> 00:54:14.850
<v Speaker 2>name, right. That connects to a service connects

00:54:14.850 --> 00:54:17.730
<v Speaker 2>to an ingress where the spec replicas is

00:54:17.730 --> 00:54:20.130
<v Speaker 2>zero would change the ingress class name to

00:54:20.130 --> 00:54:20.930
<v Speaker 2>inactive.

00:54:21.410 --> 00:54:23.490
<v Speaker 2>If it, and then run another query

00:54:24.545 --> 00:54:27.105
<v Speaker 2>where if it's larger than zero, change it

00:54:27.105 --> 00:54:29.265
<v Speaker 2>to active. So just run these two queries

00:54:29.265 --> 00:54:29.985
<v Speaker 2>whenever,

00:54:30.225 --> 00:54:31.105
<v Speaker 2>against

00:54:31.105 --> 00:54:34.225
<v Speaker 2>a certain deployment, whenever this deployment changes.

00:54:34.305 --> 00:54:34.865
<v Speaker 2>Right.

00:54:35.105 --> 00:54:37.425
<v Speaker 2>So let's look at this in action. If

00:54:37.425 --> 00:54:38.065
<v Speaker 2>I go to,

00:54:40.160 --> 00:54:41.200
<v Speaker 2>helm,

00:54:43.520 --> 00:54:46.000
<v Speaker 2>rights and let's do helm install,

00:54:49.280 --> 00:54:50.560
<v Speaker 2>install this,

00:54:50.960 --> 00:54:52.400
<v Speaker 2>install it into the,

00:54:54.255 --> 00:54:55.295
<v Speaker 2>into the cluster.

00:54:56.175 --> 00:54:59.135
<v Speaker 2>Let me open up the siphonase shell here.

00:55:00.335 --> 00:55:01.454
<v Speaker 2>Siphonase

00:55:01.454 --> 00:55:02.655
<v Speaker 2>shell.

00:55:04.335 --> 00:55:06.575
<v Speaker 2>And let's look again at

00:55:08.850 --> 00:55:10.210
<v Speaker 2>these, right?

00:55:12.210 --> 00:55:15.010
<v Speaker 2>So I have public API with one replica

00:55:15.010 --> 00:55:15.730
<v Speaker 2>and the

00:55:16.050 --> 00:55:18.530
<v Speaker 2>ingress class name is active here, right?

00:55:18.930 --> 00:55:20.450
<v Speaker 2>So let me apply

00:55:23.154 --> 00:55:24.035
<v Speaker 2>from the,

00:55:24.595 --> 00:55:25.795
<v Speaker 2>from that same,

00:55:25.954 --> 00:55:28.115
<v Speaker 2>or let's look at it before. Oh, we

00:55:28.115 --> 00:55:30.355
<v Speaker 2>just did actually. So let me apply this

00:55:30.355 --> 00:55:33.315
<v Speaker 2>dynamic operator, right? So apply,

00:55:35.315 --> 00:55:36.035
<v Speaker 2>test.

00:55:37.269 --> 00:55:39.109
<v Speaker 1>If you go dash f. Oh, yeah. Yeah.

00:55:39.109 --> 00:55:40.790
<v Speaker 2>Dash f. Test.

00:55:43.349 --> 00:55:44.310
<v Speaker 2>Oh, yeah.

00:55:49.670 --> 00:55:50.069
<v Speaker 2>Apply

00:55:50.825 --> 00:55:52.105
<v Speaker 2>test

00:55:52.105 --> 00:55:53.704
<v Speaker 2>E2E samples

00:55:53.704 --> 00:55:55.065
<v Speaker 2>and apply this,

00:55:55.464 --> 00:55:57.865
<v Speaker 2>dynamic operator Ingress activator

00:55:57.865 --> 00:56:01.545
<v Speaker 2>dynamic operator, right? So this is now applied

00:56:01.545 --> 00:56:04.105
<v Speaker 2>to the cluster. The Cypher Nades operator,

00:56:04.664 --> 00:56:07.680
<v Speaker 2>just detected it and it's, it created

00:56:07.680 --> 00:56:10.480
<v Speaker 2>this dynamic operator, right? It set up the

00:56:10.480 --> 00:56:12.000
<v Speaker 2>watcher for deployments

00:56:12.080 --> 00:56:14.240
<v Speaker 2>and whenever a deployment changes, it's just going

00:56:14.240 --> 00:56:15.920
<v Speaker 2>to run these two queries. So,

00:56:17.200 --> 00:56:18.880
<v Speaker 2>again, if I look at this, this is

00:56:18.880 --> 00:56:20.240
<v Speaker 2>public API with,

00:56:20.895 --> 00:56:24.895
<v Speaker 2>right. And then let's take this and say,

00:56:25.615 --> 00:56:26.015
<v Speaker 2>set

00:56:26.415 --> 00:56:27.135
<v Speaker 2>the

00:56:27.535 --> 00:56:28.175
<v Speaker 2>spec

00:56:28.335 --> 00:56:29.535
<v Speaker 2>replicas,

00:56:30.015 --> 00:56:31.695
<v Speaker 2>change this to zero.

00:56:32.175 --> 00:56:32.335
<v Speaker 2>Right.

00:56:33.210 --> 00:56:35.290
<v Speaker 2>So it patched it. And now if I

00:56:35.290 --> 00:56:38.250
<v Speaker 2>do the lookup again, I can see that

00:56:38.250 --> 00:56:40.970
<v Speaker 2>the dynamic operator changed it to inactive

00:56:41.450 --> 00:56:42.170
<v Speaker 2>and

00:56:42.490 --> 00:56:43.450
<v Speaker 2>back again,

00:56:43.770 --> 00:56:46.330
<v Speaker 2>set it to something else, one or two,

00:56:46.330 --> 00:56:46.570
<v Speaker 2>whatever,

00:56:47.205 --> 00:56:49.285
<v Speaker 2>and match it again, it'll set it to

00:56:49.285 --> 00:56:49.925
<v Speaker 2>active.

00:56:50.885 --> 00:56:53.765
<v Speaker 1>Nice. Very, very cool. Yeah. So this was

00:56:53.765 --> 00:56:55.845
<v Speaker 2>one year after I started working on it

00:56:55.845 --> 00:56:57.365
<v Speaker 2>and it finally

00:56:57.365 --> 00:56:58.245
<v Speaker 2>solved

00:56:58.325 --> 00:56:59.605
<v Speaker 2>the problem

00:56:59.685 --> 00:57:02.085
<v Speaker 2>that, you know, that sparked the idea initially.

00:57:04.470 --> 00:57:06.310
<v Speaker 1>That's very, very cool. I like that dynamic

00:57:06.310 --> 00:57:07.910
<v Speaker 1>operator thing. I mean, that looks back to

00:57:07.910 --> 00:57:09.350
<v Speaker 1>what I was saying earlier. I'd love to

00:57:09.350 --> 00:57:10.950
<v Speaker 1>be able to run things on a cadence

00:57:10.950 --> 00:57:13.110
<v Speaker 1>and do some debugging and health checking, and

00:57:13.110 --> 00:57:15.965
<v Speaker 1>it's already exists with the operator. So now

00:57:15.965 --> 00:57:17.485
<v Speaker 1>we just need to build the Jupyter Notebook

00:57:17.485 --> 00:57:19.485
<v Speaker 1>kernel and we'll be we'll be happy. So

00:57:19.725 --> 00:57:22.365
<v Speaker 2>That sounds incredible. It sounds incredible. I I

00:57:22.365 --> 00:57:24.765
<v Speaker 2>would love that. Something that popped into my

00:57:24.765 --> 00:57:26.365
<v Speaker 1>head is that, you know, we've been running

00:57:26.365 --> 00:57:28.845
<v Speaker 1>match statements against a single namespace. We've seen

00:57:28.845 --> 00:57:31.085
<v Speaker 1>how to switch namespace. Can we query the

00:57:31.085 --> 00:57:34.340
<v Speaker 1>entire cluster? Yes, definitely can.

00:57:35.380 --> 00:57:36.820
<v Speaker 2>In the shell, if I do,

00:57:37.220 --> 00:57:40.260
<v Speaker 2>namespace all, it'll go into this like namespaces

00:57:40.260 --> 00:57:42.820
<v Speaker 2>mode and then yeah, we can, we can

00:57:42.820 --> 00:57:44.100
<v Speaker 2>match

00:57:45.075 --> 00:57:46.115
<v Speaker 2>namespaces,

00:57:46.195 --> 00:57:47.075
<v Speaker 2>which have a

00:57:47.474 --> 00:57:49.315
<v Speaker 2>special relationship with,

00:57:49.955 --> 00:57:51.315
<v Speaker 2>with the rest of the,

00:57:51.715 --> 00:57:53.715
<v Speaker 2>so that's returned the

00:57:53.955 --> 00:57:55.955
<v Speaker 2>name of all the namespaces and the P

00:57:55.955 --> 00:57:57.795
<v Speaker 2>metadata name. And,

00:57:58.435 --> 00:57:59.955
<v Speaker 2>we can see all the

00:58:00.490 --> 00:58:01.290
<v Speaker 2>names,

00:58:01.290 --> 00:58:03.290
<v Speaker 2>all the different namespaces and the parts that

00:58:03.290 --> 00:58:05.210
<v Speaker 2>belong in them. And we can do the

00:58:05.210 --> 00:58:07.450
<v Speaker 2>same thing for nodes and yeah.

00:58:09.370 --> 00:58:10.330
<v Speaker 2>More,

00:58:10.330 --> 00:58:11.210
<v Speaker 2>even more than that,

00:58:12.585 --> 00:58:14.665
<v Speaker 2>switch back to default, even more than that,

00:58:14.665 --> 00:58:17.545
<v Speaker 2>it supports multi context queries.

00:58:17.545 --> 00:58:19.305
<v Speaker 2>I can do something like in,

00:58:20.585 --> 00:58:21.705
<v Speaker 2>so I have two

00:58:22.505 --> 00:58:24.905
<v Speaker 2>contexts here, right? Kind, kind and kind, kind

00:58:24.905 --> 00:58:26.185
<v Speaker 2>prods. So match

00:58:26.720 --> 00:58:29.519
<v Speaker 2>all the deployments into replica sets into pods

00:58:29.519 --> 00:58:32.079
<v Speaker 2>in both of these contexts.

00:58:32.079 --> 00:58:32.720
<v Speaker 2>Right.

00:58:32.960 --> 00:58:34.160
<v Speaker 2>And so

00:58:34.400 --> 00:58:36.320
<v Speaker 2>it'll tell me that in

00:58:36.720 --> 00:58:39.599
<v Speaker 2>kind kind prod, I have auth service with

00:58:39.599 --> 00:58:42.225
<v Speaker 2>one replica and the kind kind prod P

00:58:42.225 --> 00:58:44.785
<v Speaker 2>is, you know, it's just this, and this

00:58:44.785 --> 00:58:46.545
<v Speaker 2>is the replica sets that I have in

00:58:46.545 --> 00:58:47.665
<v Speaker 2>Kankind prod.

00:58:48.145 --> 00:58:50.865
<v Speaker 2>And this is from this context. From Kankind,

00:58:50.865 --> 00:58:51.825
<v Speaker 2>it has D.

00:58:52.465 --> 00:58:55.585
<v Speaker 2>So it even does like multi namespace, multi

00:58:55.585 --> 00:58:57.105
<v Speaker 2>cluster, what have you.

00:58:58.420 --> 00:59:00.580
<v Speaker 1>Honestly, I feel like just flipping my table

00:59:00.580 --> 00:59:02.100
<v Speaker 1>and storming off because it should not be

00:59:02.100 --> 00:59:03.220
<v Speaker 1>this cool. I mean

00:59:07.140 --> 00:59:08.900
<v Speaker 1>That's awesome. Again,

00:59:08.900 --> 00:59:10.994
<v Speaker 1>I mean, I just can't imagine people watching

00:59:10.994 --> 00:59:12.915
<v Speaker 1>this and not finding this really exciting for

00:59:12.915 --> 00:59:14.755
<v Speaker 1>change in the way they interact with Kubernetes

00:59:14.755 --> 00:59:15.955
<v Speaker 1>clusters. So

00:59:16.275 --> 00:59:17.954
<v Speaker 1>is there anything else you want to show

00:59:17.954 --> 00:59:19.954
<v Speaker 1>us before we jump back and ask a

00:59:19.954 --> 00:59:20.915
<v Speaker 1>few more questions?

00:59:21.075 --> 00:59:22.994
<v Speaker 2>No. I think this is about it.

00:59:26.170 --> 00:59:27.850
<v Speaker 1>Yeah. That's it. I just showed you these,

00:59:27.850 --> 00:59:30.010
<v Speaker 1>like, four amazing things, but, you know, until

00:59:30.010 --> 00:59:32.810
<v Speaker 1>next time. So let let's focus on you

00:59:32.810 --> 00:59:34.090
<v Speaker 1>people on this now.

00:59:34.330 --> 00:59:36.105
<v Speaker 1>It's a very good point from what I

00:59:36.105 --> 00:59:37.545
<v Speaker 1>can see? Right? Like, I don't see a

00:59:37.545 --> 00:59:39.305
<v Speaker 1>reason why people can't start using and adopting

00:59:39.305 --> 00:59:41.465
<v Speaker 1>this today. What do you see for the

00:59:41.465 --> 00:59:43.545
<v Speaker 1>future of Kubernetes? Where are you going? What's

00:59:43.545 --> 00:59:44.425
<v Speaker 1>on the roadmap?

00:59:44.665 --> 00:59:45.385
<v Speaker 2>Yeah.

00:59:46.025 --> 00:59:46.665
<v Speaker 2>So,

00:59:48.105 --> 00:59:49.945
<v Speaker 2>two parallel lines is,

00:59:50.650 --> 00:59:52.570
<v Speaker 2>first of all, there's a community building up

00:59:52.570 --> 00:59:54.810
<v Speaker 2>around this thing and people are asking for

00:59:54.810 --> 00:59:55.530
<v Speaker 2>features.

00:59:55.610 --> 00:59:57.530
<v Speaker 2>People want to see, want to have a

00:59:57.530 --> 00:59:58.970
<v Speaker 2>way to query metrics,

00:59:59.610 --> 01:00:02.984
<v Speaker 2>right. And set up alerts around this. So

01:00:02.984 --> 01:00:04.825
<v Speaker 2>I'm starting to think like, what would the

01:00:04.825 --> 01:00:07.865
<v Speaker 2>language around this would look like? You know,

01:00:07.944 --> 01:00:11.224
<v Speaker 2>watch something for return CPU.

01:00:12.025 --> 01:00:14.265
<v Speaker 2>We didn't even look into actually in the

01:00:14.265 --> 01:00:16.105
<v Speaker 2>demo now we didn't even look into aggregation

01:00:16.105 --> 01:00:16.904
<v Speaker 2>functions. And,

01:00:17.680 --> 01:00:19.360
<v Speaker 2>so you're able to aggregate,

01:00:19.840 --> 01:00:22.640
<v Speaker 2>CPU usage and memory usage and a bunch

01:00:22.640 --> 01:00:24.880
<v Speaker 2>of really cool stuff that this already does.

01:00:25.040 --> 01:00:26.880
<v Speaker 2>And I want to be able to,

01:00:27.360 --> 01:00:29.280
<v Speaker 2>give away to the users because this is

01:00:29.280 --> 01:00:32.465
<v Speaker 2>highly requested in community to query these metrics

01:00:32.465 --> 01:00:35.985
<v Speaker 2>over time and then do this decision making

01:00:35.985 --> 01:00:39.025
<v Speaker 2>like we saw in the operator based off.

01:00:39.585 --> 01:00:41.985
<v Speaker 2>So kind of like setting up alerts or

01:00:41.985 --> 01:00:44.225
<v Speaker 2>setting up, you know, different processes that happen,

01:00:45.210 --> 01:00:48.570
<v Speaker 2>using metrics. That's one thing. And I want

01:00:48.570 --> 01:00:50.410
<v Speaker 2>to keep extending the language

01:00:51.050 --> 01:00:53.130
<v Speaker 2>with more Cypher features.

01:00:53.210 --> 01:00:55.610
<v Speaker 2>So something that this doesn't yet do and

01:00:55.610 --> 01:00:57.770
<v Speaker 2>I really wanted to do is to be

01:00:57.770 --> 01:00:58.650
<v Speaker 2>able to also

01:00:59.055 --> 01:00:59.935
<v Speaker 2>use

01:00:59.935 --> 01:01:00.815
<v Speaker 2>patterns,

01:01:00.895 --> 01:01:03.694
<v Speaker 2>use ASCII art patterns inside where statements and

01:01:03.694 --> 01:01:05.215
<v Speaker 2>inside the lead statements.

01:01:05.375 --> 01:01:05.855
<v Speaker 2>So,

01:01:06.415 --> 01:01:07.455
<v Speaker 2>match,

01:01:07.935 --> 01:01:10.015
<v Speaker 2>all the config maps

01:01:10.815 --> 01:01:14.095
<v Speaker 2>where not config map connects to pod,

01:01:15.420 --> 01:01:17.820
<v Speaker 2>return this config map name. So return all

01:01:17.820 --> 01:01:19.820
<v Speaker 2>the names of config maps that are not

01:01:19.820 --> 01:01:22.620
<v Speaker 2>being used by any, by any pod. Right.

01:01:23.020 --> 01:01:23.580
<v Speaker 2>So,

01:01:24.140 --> 01:01:27.260
<v Speaker 2>this is, an extension of the language, which

01:01:27.260 --> 01:01:29.375
<v Speaker 2>would bring it, you know, more on par

01:01:29.375 --> 01:01:30.415
<v Speaker 2>with Cypher,

01:01:30.575 --> 01:01:32.895
<v Speaker 2>that I'm going to be diving into in

01:01:32.895 --> 01:01:34.095
<v Speaker 2>the near

01:01:34.095 --> 01:01:36.255
<v Speaker 2>or medium future, I guess.

01:01:36.815 --> 01:01:38.495
<v Speaker 2>But more long term,

01:01:38.895 --> 01:01:40.494
<v Speaker 2>like I said in the beginning, my vision

01:01:40.494 --> 01:01:41.295
<v Speaker 2>for this is not

01:01:42.210 --> 01:01:44.130
<v Speaker 2>to have a VC backed

01:01:44.210 --> 01:01:47.010
<v Speaker 2>product that I'm building around this. I want

01:01:47.010 --> 01:01:47.890
<v Speaker 2>this to be,

01:01:48.770 --> 01:01:49.650
<v Speaker 2>standardized

01:01:49.650 --> 01:01:52.050
<v Speaker 2>and I want this language to be available

01:01:52.930 --> 01:01:53.730
<v Speaker 2>ideally,

01:01:53.810 --> 01:01:55.810
<v Speaker 2>you know, and I know how much politics

01:01:55.810 --> 01:01:59.435
<v Speaker 2>is involved, but ideally just, you know, internally

01:01:59.435 --> 01:02:01.755
<v Speaker 2>held by Kubernetes and

01:02:01.995 --> 01:02:04.715
<v Speaker 2>because I don't see this as replacing

01:02:04.715 --> 01:02:05.515
<v Speaker 2>anything,

01:02:05.595 --> 01:02:07.835
<v Speaker 2>right? I see this as an extension to

01:02:07.835 --> 01:02:09.595
<v Speaker 2>like a missing tool

01:02:10.089 --> 01:02:12.010
<v Speaker 2>because this is how I experienced it. It's

01:02:12.010 --> 01:02:15.609
<v Speaker 2>a missing tool for seasoned Kubernetes professionals who've

01:02:15.609 --> 01:02:17.290
<v Speaker 2>been doing this for a long time. They

01:02:17.290 --> 01:02:19.770
<v Speaker 2>know the anatomy of their resources.

01:02:19.930 --> 01:02:20.570
<v Speaker 2>They know,

01:02:20.810 --> 01:02:23.369
<v Speaker 2>yeah. And they just need a, like they,

01:02:23.369 --> 01:02:26.305
<v Speaker 2>they end up writing all these long shell,

01:02:26.385 --> 01:02:30.065
<v Speaker 2>like write once read, never, you know,

01:02:30.785 --> 01:02:31.425
<v Speaker 2>shell,

01:02:31.745 --> 01:02:34.465
<v Speaker 2>one liners that pipe and parse hell.

01:02:34.945 --> 01:02:37.025
<v Speaker 2>I call this, you know, nested

01:02:37.025 --> 01:02:38.065
<v Speaker 2>cube control commands.

01:02:38.820 --> 01:02:39.460
<v Speaker 2>And

01:02:40.340 --> 01:02:42.580
<v Speaker 2>ideally this is what I want for this,

01:02:42.580 --> 01:02:43.700
<v Speaker 2>you know, to just

01:02:44.020 --> 01:02:46.580
<v Speaker 2>be available and to be standardized and to

01:02:46.580 --> 01:02:49.540
<v Speaker 2>become like another tool that's available to us

01:02:49.540 --> 01:02:51.060
<v Speaker 2>because I really feel like it's a missing,

01:02:51.744 --> 01:02:53.265
<v Speaker 2>and I don't think I'm the first one

01:02:53.265 --> 01:02:55.265
<v Speaker 2>who feels like it's a missing tool because

01:02:55.265 --> 01:02:57.585
<v Speaker 2>there's so much prior art of

01:02:58.705 --> 01:03:01.345
<v Speaker 2>projects that tried to like create a

01:03:01.665 --> 01:03:04.224
<v Speaker 2>SQL based query language for Kubernetes.

01:03:04.660 --> 01:03:06.420
<v Speaker 2>But I think this has a lot of

01:03:06.420 --> 01:03:08.180
<v Speaker 2>merit and it'll work for a lot of

01:03:08.180 --> 01:03:10.900
<v Speaker 2>people. And I actually think it's worth

01:03:11.940 --> 01:03:14.660
<v Speaker 2>picking up the new syntax because it puts

01:03:14.660 --> 01:03:16.820
<v Speaker 2>so much power in your hands and and

01:03:16.820 --> 01:03:18.900
<v Speaker 2>it's actually enjoyable too, you know.

01:03:21.434 --> 01:03:24.075
<v Speaker 1>So far, everything you've shown us has shown

01:03:24.075 --> 01:03:26.555
<v Speaker 1>how to take Cypher Netties and look inwards

01:03:26.555 --> 01:03:29.194
<v Speaker 1>with the cluster. Are there any plans to

01:03:29.194 --> 01:03:31.835
<v Speaker 1>then broaden the scope of that? I'm thinking

01:03:32.040 --> 01:03:34.920
<v Speaker 1>send web hooks and Slack notifications.

01:03:36.280 --> 01:03:36.760
<v Speaker 1>Like,

01:03:37.320 --> 01:03:39.160
<v Speaker 1>has there been any thoughts there? Like, it,

01:03:39.160 --> 01:03:40.200
<v Speaker 1>or is this fresh?

01:03:41.560 --> 01:03:43.080
<v Speaker 2>So there's been

01:03:43.640 --> 01:03:45.880
<v Speaker 2>some thoughts around this. I'm still not sure

01:03:45.880 --> 01:03:48.195
<v Speaker 2>yet how this is going to work out.

01:03:49.154 --> 01:03:51.875
<v Speaker 2>Because again, I want my fork, my focus

01:03:51.875 --> 01:03:53.714
<v Speaker 2>to be more and more around,

01:03:54.434 --> 01:03:57.635
<v Speaker 2>language feature development and less around, you know,

01:03:57.635 --> 01:04:00.200
<v Speaker 2>developing applications for this. But yeah, I would

01:04:00.200 --> 01:04:00.920
<v Speaker 2>love

01:04:01.079 --> 01:04:03.880
<v Speaker 2>like Cypher has this really cool notation for

01:04:03.880 --> 01:04:05.080
<v Speaker 2>using plugins,

01:04:05.559 --> 01:04:07.559
<v Speaker 2>using ampersand where you can tell it to

01:04:07.559 --> 01:04:10.119
<v Speaker 2>just like ampersand something, it'll shoot out an

01:04:10.119 --> 01:04:11.319
<v Speaker 2>external Java function.

01:04:11.795 --> 01:04:13.635
<v Speaker 2>And I think something like this would be

01:04:13.635 --> 01:04:15.635
<v Speaker 2>really cool, you know, so that if you

01:04:15.635 --> 01:04:18.275
<v Speaker 2>have a, like maybe a plugin system where

01:04:18.275 --> 01:04:20.115
<v Speaker 2>if you have this plugin installed,

01:04:20.275 --> 01:04:22.115
<v Speaker 2>where your Cypher Net is,

01:04:23.075 --> 01:04:24.675
<v Speaker 2>binary is or whatever,

01:04:24.915 --> 01:04:27.075
<v Speaker 2>then you can also ask it to like,

01:04:28.250 --> 01:04:30.410
<v Speaker 2>query some metrics over time

01:04:30.730 --> 01:04:31.530
<v Speaker 2>and

01:04:31.690 --> 01:04:34.810
<v Speaker 2>return an ampersand Slack something,

01:04:34.810 --> 01:04:36.890
<v Speaker 2>you know, they'll send a Slack message or

01:04:36.890 --> 01:04:38.970
<v Speaker 2>what have you. So I have, I have

01:04:38.970 --> 01:04:41.450
<v Speaker 2>some ideas, you know, brewing around this.

01:04:42.285 --> 01:04:44.205
<v Speaker 2>It's not yet, you know,

01:04:44.605 --> 01:04:46.125
<v Speaker 2>per se on the road map, but, yeah,

01:04:46.125 --> 01:04:48.205
<v Speaker 2>it's definitely definitely on my mind.

01:04:49.885 --> 01:04:50.605
<v Speaker 1>Awesome.

01:04:51.005 --> 01:04:52.365
<v Speaker 1>I mean, that was the the one thing

01:04:52.365 --> 01:04:53.885
<v Speaker 1>I thought would be really cool to build

01:04:53.885 --> 01:04:54.925
<v Speaker 1>on top of this. And I think a

01:04:54.925 --> 01:04:56.380
<v Speaker 1>plug in system would be a good way

01:04:56.380 --> 01:04:57.820
<v Speaker 1>to do it, especially if there's, like, a

01:04:57.820 --> 01:04:59.820
<v Speaker 1>web assembly runtime in the cluster where we

01:04:59.820 --> 01:05:01.980
<v Speaker 1>can give it access to some components like

01:05:01.980 --> 01:05:03.740
<v Speaker 1>HTTP requests or whatever.

01:05:03.980 --> 01:05:05.820
<v Speaker 1>Then at that point, you're just seeing, you

01:05:05.820 --> 01:05:07.180
<v Speaker 1>know, build whatever you want,

01:05:07.500 --> 01:05:09.180
<v Speaker 1>and it saves you that middle step of,

01:05:09.225 --> 01:05:10.745
<v Speaker 1>you know, I I I could imagine if

01:05:10.745 --> 01:05:11.785
<v Speaker 1>I were to try and do something like

01:05:11.785 --> 01:05:14.345
<v Speaker 1>this tomorrow, I would probably just write have

01:05:14.505 --> 01:05:16.665
<v Speaker 1>create a a job. Right? And just spend

01:05:16.665 --> 01:05:18.345
<v Speaker 1>it off run once to shut back down.

01:05:18.585 --> 01:05:20.025
<v Speaker 1>But we could cut out that middle point

01:05:20.025 --> 01:05:21.465
<v Speaker 1>with a plug in system. So I think

01:05:21.465 --> 01:05:23.545
<v Speaker 1>that would be a very interesting and exciting

01:05:23.545 --> 01:05:24.025
<v Speaker 1>approach.

01:05:25.100 --> 01:05:26.540
<v Speaker 1>But other than that, I mean, I've just

01:05:26.540 --> 01:05:28.140
<v Speaker 1>gotta say I'm really impressed. I think this

01:05:28.140 --> 01:05:30.700
<v Speaker 1>is a fantastic language. I hope people, again,

01:05:30.700 --> 01:05:32.540
<v Speaker 1>are as passionate and interested in it as

01:05:32.540 --> 01:05:34.540
<v Speaker 1>I am just from sixty minutes of your

01:05:34.540 --> 01:05:36.300
<v Speaker 1>time. I'm like, wow. Like, this is even

01:05:36.300 --> 01:05:37.820
<v Speaker 1>cooler than I thought it was coming into

01:05:37.820 --> 01:05:40.275
<v Speaker 1>the session. And I was already excited, so

01:05:40.275 --> 01:05:42.434
<v Speaker 1>this is awesome. Thank you so much for

01:05:42.434 --> 01:05:44.674
<v Speaker 1>your time. Any Thank you. Final words before

01:05:44.674 --> 01:05:46.755
<v Speaker 1>we wrap this up for today? Go check

01:05:46.755 --> 01:05:47.955
<v Speaker 2>out CyberKnities.

01:05:48.115 --> 01:05:52.194
<v Speaker 2>Our community is growing and we're always listening

01:05:52.194 --> 01:05:54.240
<v Speaker 2>to our users. You know, this is top

01:05:54.480 --> 01:05:56.880
<v Speaker 2>of mind always, you know, open an issue,

01:05:57.040 --> 01:05:58.320
<v Speaker 2>tell us what you want to see Cypher

01:05:58.320 --> 01:06:00.320
<v Speaker 2>Natives doing next and it'll be the first

01:06:00.320 --> 01:06:02.080
<v Speaker 2>thing we'll jump on. You know, it's the

01:06:02.080 --> 01:06:04.160
<v Speaker 2>most important thing for us is listening to

01:06:04.160 --> 01:06:06.400
<v Speaker 2>how people are actually using it and then

01:06:06.400 --> 01:06:06.960
<v Speaker 2>just,

01:06:07.200 --> 01:06:08.240
<v Speaker 2>you know, following along.

01:06:09.234 --> 01:06:10.035
<v Speaker 1>Awesome.

01:06:10.035 --> 01:06:12.195
<v Speaker 1>Well, if you are in London for KubeCon

01:06:12.195 --> 01:06:13.955
<v Speaker 1>in a couple of months time, the beers

01:06:13.955 --> 01:06:16.035
<v Speaker 1>are on me and Hopefully. Look back in

01:06:16.035 --> 01:06:16.675
<v Speaker 1>your brain.

01:06:17.155 --> 01:06:19.795
<v Speaker 1>Looking forward. Thank thank you all for watching.

01:06:19.795 --> 01:06:20.915
<v Speaker 1>Thank you for joining me, and we'll catch

01:06:20.915 --> 01:06:22.275
<v Speaker 1>you all next time. Have a good day.

01:06:44.954 --> 01:06:47.355
<v Speaker 0>Hit subscribe so you won't miss a beat.

01:06:47.355 --> 01:06:50.529
<v Speaker 0>More livestream tutorials can't be beat. Keep coding,

01:06:50.529 --> 01:06:52.529
<v Speaker 0>keep learning. It's the Rawkode way. We'll catch

01:06:52.529 --> 01:06:55.170
<v Speaker 0>you next time. Have an awesome day.

01:07:00.769 --> 01:07:01.890
<v Speaker 0>Hit subscribe

01:07:15.920 --> 01:07:18.000
<v Speaker 0>time. Have an awesome day.
