WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 720d5287-3d6b-4403-be96-429ba31a357d
Created: 2025-04-29T22:35:47.309Z
Duration: 2132.017
Channels: 1

00:00:02.080 --> 00:00:04.480
<v Speaker 0>Cool. We are now live.

00:00:08.800 --> 00:00:09.999
<v Speaker 0>You can

00:00:10.400 --> 00:00:12.719
<v Speaker 0>who wants to drive this? You want to

00:00:12.719 --> 00:00:14.480
<v Speaker 0>share your screen, or will I share mine?

00:00:25.335 --> 00:00:27.815
<v Speaker 0>I'll put in Slack just there.

00:00:43.935 --> 00:00:45.295
<v Speaker 1>I think I have to set up the

00:00:45.295 --> 00:00:46.735
<v Speaker 1>permissions for

00:00:47.535 --> 00:00:49.295
<v Speaker 1>the app to share screens.

00:01:01.420 --> 00:01:04.060
<v Speaker 0>Let's see. Have you had any problems with

00:01:04.299 --> 00:01:05.740
<v Speaker 1>it sharing screens

00:01:06.220 --> 00:01:07.340
<v Speaker 1>in Chrome?

00:01:07.740 --> 00:01:11.820
<v Speaker 0>You'll just need to open the accessibility

00:01:10.365 --> 00:01:13.564
<v Speaker 0>security privacy settings and enable screen sharing for

00:01:13.564 --> 00:01:14.204
<v Speaker 0>Chrome.

00:01:14.924 --> 00:01:18.445
<v Speaker 1>At in at the OSX level? Or Yeah.

00:01:18.445 --> 00:01:20.924
<v Speaker 0>In OSX level. So if you open preferences

00:01:21.965 --> 00:01:23.244
<v Speaker 0>and then go to

00:01:24.205 --> 00:01:25.244
<v Speaker 0>security and privacy,

00:01:27.539 --> 00:01:30.020
<v Speaker 0>and there is a screen recording

00:01:30.899 --> 00:01:32.500
<v Speaker 1>k. In the list, and then you can

00:01:32.500 --> 00:01:34.659
<v Speaker 0>just enable Chrome there. You don't actually need

00:01:34.659 --> 00:01:36.819
<v Speaker 0>to restart Chrome. You can you can just

00:01:36.819 --> 00:01:38.259
<v Speaker 0>ignore that border.

00:01:40.259 --> 00:01:40.819
<v Speaker 1>Gotcha.

00:01:46.715 --> 00:01:48.395
<v Speaker 1>Third time's a charm I have.

00:01:51.035 --> 00:01:52.875
<v Speaker 0>Hey. Alright. Cool.

00:01:53.275 --> 00:01:54.795
<v Speaker 0>Cool. You okay if I just put that

00:01:54.795 --> 00:01:55.355
<v Speaker 0>live now?

00:01:56.520 --> 00:01:58.360
<v Speaker 0>Sure. You can take your time. That's not

00:01:58.360 --> 00:02:00.280
<v Speaker 0>a rush. Alright. No. I'm yeah.

00:02:02.040 --> 00:02:02.759
<v Speaker 0>So

00:02:03.320 --> 00:02:05.799
<v Speaker 0>we now have a screen. We're creating a

00:02:05.799 --> 00:02:06.600
<v Speaker 0>repository.

00:02:11.205 --> 00:02:13.285
<v Speaker 1>And so the repository, we're gonna create I

00:02:13.285 --> 00:02:15.285
<v Speaker 1>don't know if there's a naming convention for

00:02:15.285 --> 00:02:16.725
<v Speaker 1>GitHub actions.

00:02:17.685 --> 00:02:18.965
<v Speaker 1>Let's go with

00:02:19.765 --> 00:02:20.245
<v Speaker 1>what?

00:02:23.160 --> 00:02:25.560
<v Speaker 1>Packet host project leader. Maybe we'll just call

00:02:25.560 --> 00:02:27.800
<v Speaker 1>it prod project Packet project.

00:02:28.040 --> 00:02:28.680
<v Speaker 1>And

00:02:30.520 --> 00:02:33.000
<v Speaker 1>later on, if this gets promoted

00:02:33.560 --> 00:02:34.200
<v Speaker 1>to

00:02:34.360 --> 00:02:35.480
<v Speaker 1>Packet

00:02:35.625 --> 00:02:38.185
<v Speaker 1>Packet Labs, then we'll maybe we'll drop off

00:02:38.185 --> 00:02:39.865
<v Speaker 1>the the Packet prefix.

00:03:03.255 --> 00:03:05.095
<v Speaker 1>All of the p letter

00:03:05.975 --> 00:03:06.775
<v Speaker 1>alliteration,

00:03:06.775 --> 00:03:08.615
<v Speaker 1>I'm very, like, aware of it when I'm

00:03:08.615 --> 00:03:09.575
<v Speaker 1>wearing headphones.

00:03:09.735 --> 00:03:10.615
<v Speaker 1>And it's like

00:03:13.095 --> 00:03:14.135
<v Speaker 1>and we'll

00:03:14.295 --> 00:03:15.815
<v Speaker 1>get started with all of these things.

00:03:24.030 --> 00:03:25.470
<v Speaker 1>Apache work for you?

00:03:28.190 --> 00:03:30.270
<v Speaker 0>I mean, I'm more of an MIT person,

00:03:30.270 --> 00:03:31.150
<v Speaker 0>but, you know,

00:03:32.394 --> 00:03:34.474
<v Speaker 0>I but I whenever I publish code, I

00:03:34.474 --> 00:03:36.314
<v Speaker 0>generally just, like, do whatever you want with

00:03:36.314 --> 00:03:37.915
<v Speaker 0>it. And I check MIT is probably the

00:03:37.915 --> 00:03:39.355
<v Speaker 0>most permissive license.

00:03:39.595 --> 00:03:40.235
<v Speaker 0>Yeah.

00:03:41.275 --> 00:03:43.515
<v Speaker 1>Yeah. I I tend to for things like

00:03:43.515 --> 00:03:44.954
<v Speaker 1>this, I tend to go with whatever license

00:03:44.954 --> 00:03:46.954
<v Speaker 1>is most common for that project type,

00:03:47.470 --> 00:03:49.390
<v Speaker 1>and I haven't done my research on this

00:03:49.390 --> 00:03:50.670
<v Speaker 1>one. But I'll I'll

00:03:51.630 --> 00:03:53.390
<v Speaker 1>reserve the right to change it later.

00:03:54.590 --> 00:03:57.630
<v Speaker 1>Packet project. That couldn't be confused for anything

00:03:57.630 --> 00:03:57.790
<v Speaker 1>else.

00:04:00.455 --> 00:04:02.614
<v Speaker 1>Alright. So let's see. What what do have

00:04:02.614 --> 00:04:04.775
<v Speaker 1>to do to create a GitHub action?

00:04:08.375 --> 00:04:10.534
<v Speaker 1>It should be premise what what it is

00:04:10.534 --> 00:04:11.735
<v Speaker 1>that we're trying to do here.

00:04:12.534 --> 00:04:15.015
<v Speaker 0>That might help one too. So

00:04:16.370 --> 00:04:18.210
<v Speaker 0>Marcus and I were just discussing.

00:04:19.570 --> 00:04:21.089
<v Speaker 0>We have this thing, I guess, on Friday.

00:04:21.089 --> 00:04:22.930
<v Speaker 0>Let's go back in time. We have this

00:04:22.930 --> 00:04:25.330
<v Speaker 0>thing on Fridays, the packet, where we can

00:04:25.330 --> 00:04:27.410
<v Speaker 0>allocate some of our time to hack on

00:04:27.410 --> 00:04:30.655
<v Speaker 0>pack, where we just build our build proof

00:04:30.655 --> 00:04:32.095
<v Speaker 0>of concept in things that we think are

00:04:32.095 --> 00:04:34.255
<v Speaker 0>gonna be useful internally and externally for people

00:04:34.255 --> 00:04:36.175
<v Speaker 0>who use the packet. And Marcus has an

00:04:36.175 --> 00:04:38.735
<v Speaker 0>idea that solves a common problem, and I'll

00:04:38.735 --> 00:04:39.935
<v Speaker 0>let you take it from there.

00:04:40.415 --> 00:04:42.960
<v Speaker 1>Yeah. So the the problem is that there

00:04:42.960 --> 00:04:44.160
<v Speaker 1>are a lot of different

00:04:45.040 --> 00:04:47.040
<v Speaker 1>open source packet projects

00:04:47.280 --> 00:04:48.480
<v Speaker 1>that have

00:04:48.720 --> 00:04:50.720
<v Speaker 1>the need for some end to end testing.

00:04:50.720 --> 00:04:52.000
<v Speaker 1>And whenever you have an end to end

00:04:52.000 --> 00:04:53.120
<v Speaker 1>testing environment,

00:04:53.200 --> 00:04:55.120
<v Speaker 1>you have the potential for

00:04:55.815 --> 00:04:57.495
<v Speaker 1>your provisioning to fail,

00:04:57.815 --> 00:05:00.775
<v Speaker 1>and that could leave behind artifacts that

00:05:01.095 --> 00:05:03.655
<v Speaker 1>are costly over time or

00:05:04.694 --> 00:05:07.815
<v Speaker 1>otherwise just get neglected or forgotten and could

00:05:07.815 --> 00:05:08.775
<v Speaker 1>become security risks.

00:05:09.270 --> 00:05:11.110
<v Speaker 1>So you wanna make sure that you're cleaning

00:05:11.110 --> 00:05:12.230
<v Speaker 1>up these,

00:05:12.710 --> 00:05:14.630
<v Speaker 1>failed artifact resources.

00:05:15.270 --> 00:05:17.350
<v Speaker 1>In Terraform, they have a concept called a

00:05:17.350 --> 00:05:18.150
<v Speaker 1>sweeper,

00:05:18.310 --> 00:05:20.790
<v Speaker 1>which is a set of, it's a an

00:05:21.510 --> 00:05:24.965
<v Speaker 1>extra testing step that runs, I believe, before

00:05:24.965 --> 00:05:25.925
<v Speaker 1>and after,

00:05:26.805 --> 00:05:28.085
<v Speaker 1>tests to

00:05:28.805 --> 00:05:32.085
<v Speaker 1>that is aware of the different resource labels

00:05:32.085 --> 00:05:32.805
<v Speaker 1>that,

00:05:33.205 --> 00:05:36.485
<v Speaker 1>indicate that a resource was created for testing.

00:05:36.565 --> 00:05:38.884
<v Speaker 1>So let's say you have a packet server

00:05:39.080 --> 00:05:39.800
<v Speaker 1>called

00:05:40.520 --> 00:05:42.520
<v Speaker 1>Terraform or TF test

00:05:42.840 --> 00:05:43.640
<v Speaker 1>foo,

00:05:43.640 --> 00:05:45.960
<v Speaker 1>then when the sweeper comes along, if it

00:05:45.960 --> 00:05:48.120
<v Speaker 1>sees anything named that way, it knows that

00:05:48.120 --> 00:05:49.560
<v Speaker 1>it's not supposed to be there, and it's

00:05:49.560 --> 00:05:50.760
<v Speaker 1>safe for it to delete it.

00:05:51.345 --> 00:05:52.625
<v Speaker 1>It's also possible

00:05:53.025 --> 00:05:53.665
<v Speaker 1>in

00:05:53.905 --> 00:05:56.545
<v Speaker 1>various environments to, say, delete

00:05:56.945 --> 00:05:57.665
<v Speaker 1>a

00:05:58.225 --> 00:05:59.505
<v Speaker 1>an entire project,

00:05:59.585 --> 00:06:01.425
<v Speaker 1>and that simplifies things because then you can

00:06:01.425 --> 00:06:02.945
<v Speaker 1>just say, do I have any projects matching

00:06:02.945 --> 00:06:05.425
<v Speaker 1>TF test something? I do. Let's delete it.

00:06:06.970 --> 00:06:08.490
<v Speaker 1>Now Packet

00:06:08.730 --> 00:06:11.530
<v Speaker 1>doesn't let you delete an entire project because

00:06:11.530 --> 00:06:14.490
<v Speaker 1>it wants you to confirm that the resources

00:06:14.490 --> 00:06:16.970
<v Speaker 1>that exist inside of that project are safe

00:06:16.970 --> 00:06:18.730
<v Speaker 1>to delete. So you have to delete them

00:06:18.730 --> 00:06:20.754
<v Speaker 1>one by one. In this case, we know

00:06:20.754 --> 00:06:22.995
<v Speaker 1>exactly what we want to delete. We're good.

00:06:23.155 --> 00:06:25.395
<v Speaker 1>And what we wanna do is make an

00:06:25.395 --> 00:06:27.794
<v Speaker 1>all purpose GitHub action

00:06:28.115 --> 00:06:29.955
<v Speaker 1>that can be used to

00:06:30.275 --> 00:06:31.155
<v Speaker 1>delete

00:06:31.474 --> 00:06:32.595
<v Speaker 1>a project

00:06:32.754 --> 00:06:33.794
<v Speaker 1>by

00:06:34.620 --> 00:06:37.980
<v Speaker 1>name. Maybe we could use this, filter syntax,

00:06:37.980 --> 00:06:39.980
<v Speaker 1>and maybe any projects that match a certain

00:06:39.980 --> 00:06:42.380
<v Speaker 1>name pattern can be deleted.

00:06:43.020 --> 00:06:44.060
<v Speaker 1>Or maybe

00:06:44.540 --> 00:06:47.100
<v Speaker 1>this tool might also be useful for creating

00:06:47.925 --> 00:06:48.885
<v Speaker 1>projects

00:06:49.044 --> 00:06:53.365
<v Speaker 1>and creating a project tokens project API tokens

00:06:53.365 --> 00:06:53.925
<v Speaker 1>for

00:06:54.245 --> 00:06:56.405
<v Speaker 1>for whatever your end to end testing environment

00:06:56.405 --> 00:06:57.365
<v Speaker 1>needs are.

00:06:58.405 --> 00:07:00.885
<v Speaker 1>So I think that this GitHub action has

00:07:01.520 --> 00:07:03.120
<v Speaker 1>maybe three things it could do.

00:07:03.520 --> 00:07:04.560
<v Speaker 1>The one that we're most

00:07:05.840 --> 00:07:08.160
<v Speaker 1>those three things are creating a project, deleting

00:07:08.160 --> 00:07:10.800
<v Speaker 1>a project, and creating project tokens. The thing

00:07:10.800 --> 00:07:12.319
<v Speaker 1>that we're most interested in right now is

00:07:12.319 --> 00:07:14.535
<v Speaker 1>just deleting a project. We can specify a

00:07:14.535 --> 00:07:16.135
<v Speaker 1>name for it and

00:07:16.775 --> 00:07:18.055
<v Speaker 1>let it go with that.

00:07:18.535 --> 00:07:20.215
<v Speaker 1>And so this is the first time creating

00:07:20.215 --> 00:07:21.574
<v Speaker 1>a GitHub action, so there's a lot of

00:07:21.574 --> 00:07:22.295
<v Speaker 1>unknowns.

00:07:24.695 --> 00:07:25.655
<v Speaker 0>Yeah.

00:07:25.655 --> 00:07:28.055
<v Speaker 0>I'm hoping it won't be terribly difficult.

00:07:30.190 --> 00:07:30.910
<v Speaker 0>So

00:07:31.950 --> 00:07:33.390
<v Speaker 0>I guess what we need to do first

00:07:33.390 --> 00:07:35.390
<v Speaker 0>is you've created a repository. So we just

00:07:35.390 --> 00:07:38.110
<v Speaker 0>initialize, like, a a gold project, I guess.

00:07:39.310 --> 00:07:40.830
<v Speaker 0>Like, before we have to get hub action,

00:07:40.830 --> 00:07:41.950
<v Speaker 0>I guess we still wanna be able to

00:07:41.950 --> 00:07:42.750
<v Speaker 0>run this locally.

00:07:44.525 --> 00:07:46.445
<v Speaker 1>Yeah. Let me add you as a collaborator

00:07:46.445 --> 00:07:47.965
<v Speaker 1>for what it's worth to.

00:07:49.245 --> 00:07:51.485
<v Speaker 1>Looks like that. Let me check this collaborator.

00:07:51.485 --> 00:07:53.245
<v Speaker 1>Oh, that's that's

00:07:53.245 --> 00:07:55.485
<v Speaker 1>gonna be my stop there. I I should

00:07:55.485 --> 00:07:57.485
<v Speaker 1>check my phone for that one. I don't

00:07:57.240 --> 00:07:59.319
<v Speaker 1>type it in. I won't do that, but

00:07:59.319 --> 00:08:01.480
<v Speaker 1>we'll just work with what we've got then.

00:08:01.560 --> 00:08:03.240
<v Speaker 1>So, yeah, let's start with some go.

00:08:04.360 --> 00:08:06.360
<v Speaker 0>Hey, Dan. Enjoying the stream.

00:08:07.960 --> 00:08:08.520
<v Speaker 1>Hey.

00:08:10.395 --> 00:08:13.514
<v Speaker 1>How many people can you have visually on

00:08:13.514 --> 00:08:15.595
<v Speaker 1>here? Can Dan join us? Up to 10.

00:08:15.595 --> 00:08:16.955
<v Speaker 0>If Dan wants to join us, he is

00:08:16.955 --> 00:08:18.555
<v Speaker 0>more than welcome to come and join us.

00:08:18.555 --> 00:08:19.835
<v Speaker 1>Come on, Dan. Don't be afraid.

00:08:21.949 --> 00:08:24.350
<v Speaker 0>If anyone wants to join or ask questions,

00:08:24.350 --> 00:08:27.550
<v Speaker 0>you can leave questions via Twitter, YouTube, or

00:08:27.550 --> 00:08:29.630
<v Speaker 0>Twitch. And if you want to join, drop

00:08:29.630 --> 00:08:30.750
<v Speaker 0>us a DM,

00:08:32.190 --> 00:08:34.125
<v Speaker 0>and we'll see what we can do. We

00:08:34.125 --> 00:08:35.725
<v Speaker 0>are kind of on a very tight schedule

00:08:35.725 --> 00:08:37.965
<v Speaker 0>as well. Yeah. This might be a to

00:08:37.965 --> 00:08:39.804
<v Speaker 1>be continued. Right? We've gotta jump off in

00:08:39.804 --> 00:08:40.525
<v Speaker 1>twenty five minutes.

00:08:47.570 --> 00:08:49.490
<v Speaker 0>Can you just zoom in in your terminal

00:08:49.490 --> 00:08:50.850
<v Speaker 0>a bit as well, please? Sure.

00:09:02.305 --> 00:09:05.025
<v Speaker 0>You're not even gonna, like, get Packet project

00:09:05.025 --> 00:09:07.585
<v Speaker 0>was possibly the worst repository name, I think.

00:09:07.665 --> 00:09:08.385
<v Speaker 0>Yeah.

00:09:09.185 --> 00:09:11.105
<v Speaker 1>What could it possibly do? Nobody knows.

00:09:14.639 --> 00:09:17.200
<v Speaker 1>And so let's see. The first thing, I

00:09:17.200 --> 00:09:19.120
<v Speaker 1>wonder if there's a GitHub actions

00:09:19.120 --> 00:09:21.440
<v Speaker 1>extension where you can just, like, create one.

00:09:21.920 --> 00:09:24.000
<v Speaker 1>We get all kinds of extensions. Right? We

00:09:24.000 --> 00:09:25.680
<v Speaker 1>have one for actions, GitHub actions.

00:09:27.505 --> 00:09:29.505
<v Speaker 0>I don't know if there's anything particularly special

00:09:29.505 --> 00:09:31.905
<v Speaker 0>about a GitHub action, though. Right? Like, it's

00:09:31.905 --> 00:09:32.625
<v Speaker 0>just a

00:09:33.905 --> 00:09:34.545
<v Speaker 0>command.

00:09:36.065 --> 00:09:38.465
<v Speaker 0>So I guess, in my head, what we

00:09:38.465 --> 00:09:39.745
<v Speaker 0>want is

00:09:40.730 --> 00:09:43.050
<v Speaker 0>say this is called packet sweeper.

00:09:43.530 --> 00:09:45.690
<v Speaker 0>We have a drunk packet sweeper and pass

00:09:45.690 --> 00:09:46.970
<v Speaker 0>in a product ID.

00:09:47.370 --> 00:09:48.730
<v Speaker 0>It would give you a list of the

00:09:49.370 --> 00:09:50.810
<v Speaker 0>it would give you a list of all

00:09:50.810 --> 00:09:52.810
<v Speaker 0>the resources that's potentially going to delete, and

00:09:52.810 --> 00:09:53.850
<v Speaker 0>then we could confirm it.

00:09:55.685 --> 00:09:57.204
<v Speaker 0>And then we can add the yellow flag

00:09:57.204 --> 00:09:59.365
<v Speaker 0>layer where it doesn't do the confirmation, and

00:09:59.365 --> 00:10:00.885
<v Speaker 0>it just starts deleting everything.

00:10:01.445 --> 00:10:05.204
<v Speaker 1>Yeah. So let's start with, like, aamain.com.

00:10:06.725 --> 00:10:07.045
<v Speaker 1>Yeah.

00:10:08.750 --> 00:10:10.990
<v Speaker 0>Can you just change your font size as

00:10:10.990 --> 00:10:12.830
<v Speaker 0>well? Oh, yeah. That's why.

00:10:17.630 --> 00:10:18.990
<v Speaker 0>Awesome. Perfect.

00:10:21.550 --> 00:10:23.505
<v Speaker 0>So what's the easiest way to consume the

00:10:23.505 --> 00:10:25.505
<v Speaker 0>Packet API from a Go project?

00:10:25.985 --> 00:10:27.585
<v Speaker 1>That would be Pack and Go.

00:10:28.065 --> 00:10:29.825
<v Speaker 1>So let's get that going in here.

00:10:37.810 --> 00:10:38.610
<v Speaker 1>For

00:10:38.690 --> 00:10:39.890
<v Speaker 1>git.com,

00:10:39.970 --> 00:10:41.650
<v Speaker 1>packing, toast,

00:10:41.650 --> 00:10:42.610
<v Speaker 1>packing go.

00:10:43.570 --> 00:10:45.730
<v Speaker 0>And this is just a client library? I'm

00:10:45.730 --> 00:10:47.264
<v Speaker 0>not familiar with packing go, so 'll need

00:10:47.264 --> 00:10:48.384
<v Speaker 0>to kinda keep it right here, but I'm

00:10:48.384 --> 00:10:50.545
<v Speaker 0>assuming that's a client library for speaking to

00:10:50.545 --> 00:10:51.264
<v Speaker 0>the API.

00:10:51.504 --> 00:10:53.665
<v Speaker 1>Yeah. That that's exactly what it is. It's

00:10:53.665 --> 00:10:55.824
<v Speaker 1>a client library for talking to the API.

00:10:55.824 --> 00:10:57.985
<v Speaker 1>We've got some examples

00:10:57.985 --> 00:10:59.985
<v Speaker 1>of it, which I can probably use to

00:11:00.710 --> 00:11:02.310
<v Speaker 1>work quickly provision

00:11:04.710 --> 00:11:05.430
<v Speaker 1>things.

00:11:05.750 --> 00:11:07.990
<v Speaker 1>Let me get this up and running.

00:11:08.310 --> 00:11:08.870
<v Speaker 1>There we go.

00:11:20.515 --> 00:11:21.315
<v Speaker 1>And

00:11:25.555 --> 00:11:27.395
<v Speaker 1>gonna need this project listing, Tim.

00:11:29.780 --> 00:11:30.580
<v Speaker 1>Alright.

00:11:31.140 --> 00:11:34.260
<v Speaker 1>This isn't specifying token, so we'll we'll need

00:11:34.260 --> 00:11:35.540
<v Speaker 1>support for tokens.

00:11:35.940 --> 00:11:36.900
<v Speaker 1>In the end,

00:11:38.260 --> 00:11:41.060
<v Speaker 1>we need this thing to take some parameters,

00:11:41.060 --> 00:11:42.660
<v Speaker 1>so we're gonna need to import OS.

00:11:45.824 --> 00:11:48.065
<v Speaker 1>And the first parameter that we're gonna be

00:11:48.065 --> 00:11:50.305
<v Speaker 1>interested in is the project ID.

00:11:52.225 --> 00:11:53.024
<v Speaker 1>So

00:11:56.384 --> 00:11:58.065
<v Speaker 1>project ID, what are we gonna call it?

00:11:59.090 --> 00:11:59.810
<v Speaker 1>Project

00:12:00.370 --> 00:12:01.170
<v Speaker 1>ID.

00:12:02.130 --> 00:12:04.290
<v Speaker 1>I'm gonna choose the environment. It's easy for

00:12:04.290 --> 00:12:04.690
<v Speaker 1>right now.

00:12:16.575 --> 00:12:18.415
<v Speaker 1>Because it's not being used. I've got every

00:12:18.415 --> 00:12:20.015
<v Speaker 1>possible winter in place.

00:12:20.335 --> 00:12:21.535
<v Speaker 1>We have a friend.

00:12:22.095 --> 00:12:23.295
<v Speaker 0>What's up, folks?

00:12:23.775 --> 00:12:24.495
<v Speaker 0>Hey,

00:12:25.055 --> 00:12:25.375
<v Speaker 1>Dan.

00:12:27.459 --> 00:12:29.380
<v Speaker 2>Happy to jump in here.

00:12:29.700 --> 00:12:31.860
<v Speaker 1>Awesome. This is a pretty sweet setup y'all

00:12:31.860 --> 00:12:32.660
<v Speaker 2>have going.

00:12:33.459 --> 00:12:35.620
<v Speaker 0>So this is just the most impromptu thing

00:12:35.620 --> 00:12:37.380
<v Speaker 0>I think we we've managed to do yet.

00:12:37.380 --> 00:12:39.060
<v Speaker 0>We were just, like, jumping on a Zoom,

00:12:39.060 --> 00:12:40.260
<v Speaker 0>and we're like, hey. We should, like, build

00:12:40.260 --> 00:12:41.700
<v Speaker 0>this thing. And then the next thing I

00:12:41.700 --> 00:12:44.155
<v Speaker 0>know, we are broadcasting it. And it's like,

00:12:44.555 --> 00:12:45.195
<v Speaker 0>you know,

00:12:45.915 --> 00:12:47.115
<v Speaker 0>I I I think that

00:12:47.515 --> 00:12:48.635
<v Speaker 0>it'll be fun.

00:12:49.035 --> 00:12:49.755
<v Speaker 1>So

00:12:51.515 --> 00:12:52.315
<v Speaker 1>then

00:12:53.675 --> 00:12:55.755
<v Speaker 1>then I there's a lot of cross playing

00:12:55.755 --> 00:12:57.435
<v Speaker 1>stuff in the past, including the cross playing

00:12:57.435 --> 00:12:58.235
<v Speaker 1>packet provider,

00:12:58.940 --> 00:12:59.580
<v Speaker 1>which

00:13:01.020 --> 00:13:03.339
<v Speaker 1>this will also be useful for for end

00:13:03.339 --> 00:13:05.020
<v Speaker 1>to end testing in that environment.

00:13:06.460 --> 00:13:08.140
<v Speaker 2>Yeah. For sure. I

00:13:08.700 --> 00:13:10.940
<v Speaker 2>I'm some of this packing guest stuff looks

00:13:10.940 --> 00:13:13.420
<v Speaker 2>pretty familiar as we're obviously using that for

00:13:13.545 --> 00:13:16.345
<v Speaker 2>all the stuff in the packet provider as

00:13:16.345 --> 00:13:17.785
<v Speaker 2>well. And it's nice to see

00:13:18.505 --> 00:13:20.024
<v Speaker 2>Marcus and I did a stream. I guess

00:13:20.024 --> 00:13:22.825
<v Speaker 2>it was over a month ago now working

00:13:22.825 --> 00:13:25.305
<v Speaker 2>on some of the packet provider stuff for

00:13:25.305 --> 00:13:26.185
<v Speaker 2>Crossplane

00:13:26.505 --> 00:13:28.745
<v Speaker 2>and trying to do some Tinker Bell stuff,

00:13:28.745 --> 00:13:29.225
<v Speaker 2>which we

00:13:30.640 --> 00:13:32.640
<v Speaker 2>debatably succeeded at.

00:13:33.600 --> 00:13:34.240
<v Speaker 2>But,

00:13:34.800 --> 00:13:36.480
<v Speaker 2>yeah, I'm excited to see

00:13:37.440 --> 00:13:39.760
<v Speaker 2>a little more focus on integrations and stuff

00:13:39.760 --> 00:13:41.280
<v Speaker 2>on the packet side. So I've definitely been

00:13:41.280 --> 00:13:43.200
<v Speaker 2>enjoying some of these streams lately you've been

00:13:43.200 --> 00:13:46.315
<v Speaker 2>doing, David. Oh, thank you. And I guess,

00:13:46.315 --> 00:13:47.995
<v Speaker 0>there's no big good thing to tell everyone

00:13:47.995 --> 00:13:49.275
<v Speaker 0>that you just agreed to join me on

00:13:49.275 --> 00:13:50.955
<v Speaker 0>the stream as well and we're gonna have

00:13:51.595 --> 00:13:53.035
<v Speaker 0>we're gonna be taking a look at the

00:13:53.035 --> 00:13:56.315
<v Speaker 0>seccomp operator, which I'm very excited about. Definitely.

00:13:56.315 --> 00:13:59.010
<v Speaker 2>Yeah. There's some super cool stuff. That's one

00:13:59.010 --> 00:14:00.850
<v Speaker 2>of the things in the one dot 19

00:14:00.850 --> 00:14:02.210
<v Speaker 2>release in Kubernetes,

00:14:02.210 --> 00:14:03.490
<v Speaker 2>came out Wednesday.

00:14:04.610 --> 00:14:06.290
<v Speaker 2>That that is one of the cooler

00:14:06.610 --> 00:14:08.850
<v Speaker 2>aspects, so excited to dive into that as

00:14:08.850 --> 00:14:08.930
<v Speaker 2>well.

00:14:10.145 --> 00:14:11.825
<v Speaker 0>Yeah. Set comp is one of those things

00:14:11.825 --> 00:14:13.905
<v Speaker 0>that I know I should be providing profiles

00:14:13.905 --> 00:14:15.905
<v Speaker 0>for applications, and then I'm just like, but

00:14:15.905 --> 00:14:17.665
<v Speaker 0>why is it so painful to do it?

00:14:17.665 --> 00:14:20.225
<v Speaker 0>Like Yeah. Yeah. No. That's a huge thing.

00:14:20.225 --> 00:14:22.385
<v Speaker 2>And, you know, the set comp operator addresses

00:14:22.385 --> 00:14:24.850
<v Speaker 2>some of that, but to be totally honest

00:14:24.850 --> 00:14:25.970
<v Speaker 2>with you, and we can get into this

00:14:25.970 --> 00:14:27.250
<v Speaker 2>more in that stream, but,

00:14:27.890 --> 00:14:29.970
<v Speaker 2>like, it's still hard to craft your seccomp

00:14:29.970 --> 00:14:32.130
<v Speaker 2>profiles. Right? So the operator is solving getting

00:14:32.130 --> 00:14:33.730
<v Speaker 2>those on your nodes and that sort of

00:14:33.730 --> 00:14:34.770
<v Speaker 2>thing in your cluster.

00:14:35.650 --> 00:14:38.035
<v Speaker 2>But we actually just had our first kinda,

00:14:38.035 --> 00:14:40.995
<v Speaker 2>like, community meeting for the seccomp operator yesterday,

00:14:41.235 --> 00:14:42.835
<v Speaker 2>and one of the things we're looking at

00:14:42.835 --> 00:14:43.395
<v Speaker 2>is

00:14:43.715 --> 00:14:45.875
<v Speaker 2>recording profiles. Right? So you can run your

00:14:45.875 --> 00:14:47.875
<v Speaker 2>pods and we'll record a profile and say,

00:14:47.875 --> 00:14:49.875
<v Speaker 2>hey. This is all the syscalls that your

00:14:50.620 --> 00:14:53.100
<v Speaker 2>process made while running. Would you like to,

00:14:53.100 --> 00:14:55.899
<v Speaker 2>you know, restart this with the profile applied,

00:14:55.899 --> 00:14:57.100
<v Speaker 2>and we'll put it on the node for

00:14:57.100 --> 00:14:58.699
<v Speaker 2>you? So those are all sorts of things

00:14:58.699 --> 00:15:00.699
<v Speaker 2>we're looking into, make that a little bit

00:15:00.699 --> 00:15:01.339
<v Speaker 2>easier.

00:15:01.740 --> 00:15:03.985
<v Speaker 0>So I tried to do that about nine

00:15:03.985 --> 00:15:05.264
<v Speaker 0>months ago, the start of the year, I

00:15:05.264 --> 00:15:07.745
<v Speaker 0>think it was. Mhmm. Using is way to

00:15:07.745 --> 00:15:09.105
<v Speaker 0>try and log all the syscalls that are

00:15:09.105 --> 00:15:10.065
<v Speaker 0>running.

00:15:10.065 --> 00:15:10.705
<v Speaker 0>Mhmm.

00:15:11.105 --> 00:15:12.545
<v Speaker 0>But then I I had to learn, you

00:15:12.545 --> 00:15:14.225
<v Speaker 0>know, eBPF, and that I was just like,

00:15:14.225 --> 00:15:15.665
<v Speaker 0>you know what? I I'm not doing this.

00:15:15.665 --> 00:15:17.505
<v Speaker 0>So Yeah. But there's someone else who's doing

00:15:17.505 --> 00:15:19.960
<v Speaker 0>it for me. Yeah. That's my preferred route

00:15:19.960 --> 00:15:21.720
<v Speaker 0>for everything. If someone else like, right now,

00:15:21.720 --> 00:15:22.920
<v Speaker 0>you know, Marcus is just sitting right on

00:15:22.920 --> 00:15:24.520
<v Speaker 0>the code, we just get to set chat.

00:15:24.520 --> 00:15:25.400
<v Speaker 1>So Yeah.

00:15:25.800 --> 00:15:27.880
<v Speaker 2>Yeah. This works for me. This is a

00:15:27.880 --> 00:15:29.880
<v Speaker 2>lot more relaxed than than some of the

00:15:29.880 --> 00:15:32.120
<v Speaker 2>streams we've done. I like this format. And

00:15:32.120 --> 00:15:33.695
<v Speaker 1>then you guys could just, like, banter about

00:15:33.695 --> 00:15:35.935
<v Speaker 1>whatever and then they actually, like, jump in

00:15:35.935 --> 00:15:38.255
<v Speaker 1>on things. This is you get a three

00:15:38.255 --> 00:15:39.935
<v Speaker 1>three person format

00:15:40.175 --> 00:15:42.975
<v Speaker 1>for TBS now. Yeah. No. I really think

00:15:42.975 --> 00:15:44.575
<v Speaker 2>the three people is really good because, like

00:15:44.575 --> 00:15:46.735
<v Speaker 2>you were saying, someone can be doing work.

00:15:46.735 --> 00:15:48.335
<v Speaker 2>Because, like, typically, if you have two people,

00:15:48.650 --> 00:15:50.410
<v Speaker 2>like, for instance, if it's just you and

00:15:50.410 --> 00:15:52.970
<v Speaker 2>Marcus, if Marcus is writing the code, like,

00:15:53.050 --> 00:15:54.730
<v Speaker 2>if you're asking him questions, it's gonna be

00:15:54.730 --> 00:15:56.730
<v Speaker 2>hard for him to focus on what he's

00:15:56.730 --> 00:15:58.890
<v Speaker 2>doing as well as engaging and have, like,

00:15:58.890 --> 00:16:00.650
<v Speaker 2>a conversation that's entertaining to viewers.

00:16:01.235 --> 00:16:02.834
<v Speaker 2>But this way, we kind of get a

00:16:02.834 --> 00:16:05.795
<v Speaker 2>a background track while people are watching Marcus'

00:16:05.795 --> 00:16:06.675
<v Speaker 2>work. Yeah.

00:16:08.274 --> 00:16:10.595
<v Speaker 0>Alright. So let's what what is it you're

00:16:10.595 --> 00:16:11.875
<v Speaker 0>doing right now, Mark? I wanna make you

00:16:11.875 --> 00:16:13.475
<v Speaker 0>talk with you both know that that Dan

00:16:13.475 --> 00:16:14.675
<v Speaker 0>just said that. So

00:16:15.634 --> 00:16:17.829
<v Speaker 0>we've got project ID, and you're just gonna

00:16:18.069 --> 00:16:19.269
<v Speaker 0>we're just gonna try and print a list

00:16:19.269 --> 00:16:21.589
<v Speaker 0>of devices. Oh, no. You're actually deleting them.

00:16:21.589 --> 00:16:23.269
<v Speaker 0>I mean Oh, yeah. No. This is yeah.

00:16:23.269 --> 00:16:24.790
<v Speaker 1>Hard hardcore. This

00:16:25.509 --> 00:16:27.750
<v Speaker 1>there's no going back here. We're gonna delete

00:16:27.750 --> 00:16:28.550
<v Speaker 1>everything

00:16:29.430 --> 00:16:32.745
<v Speaker 1>that might exist. So what things could exist

00:16:32.745 --> 00:16:34.265
<v Speaker 1>inside of a project?

00:16:35.865 --> 00:16:36.665
<v Speaker 0>Devices,

00:16:36.745 --> 00:16:38.185
<v Speaker 0>elastic IPs.

00:16:38.745 --> 00:16:40.665
<v Speaker 0>Yeah. Let's get rid of those two. Volumes.

00:16:45.900 --> 00:16:47.900
<v Speaker 1>Let's just get a I'm gonna go with

00:16:47.900 --> 00:16:48.780
<v Speaker 1>the generic

00:16:49.100 --> 00:16:50.620
<v Speaker 1>letter since

00:16:51.740 --> 00:16:53.980
<v Speaker 1>yeah. Alright. No. I guess not. Yeah. So

00:17:01.274 --> 00:17:02.875
<v Speaker 1>When you copy and paste in code, do

00:17:02.875 --> 00:17:04.234
<v Speaker 1>I get the get the

00:17:04.875 --> 00:17:06.315
<v Speaker 1>singular not the plural?

00:17:06.554 --> 00:17:09.514
<v Speaker 0>So I'm not the world's best gold developer,

00:17:09.515 --> 00:17:11.595
<v Speaker 0>but I'm assuming those red squiggly lines been

00:17:11.595 --> 00:17:11.915
<v Speaker 0>bad.

00:17:12.990 --> 00:17:14.589
<v Speaker 1>Oh, yeah. Well, let's see what I did

00:17:14.589 --> 00:17:15.149
<v Speaker 1>wrong.

00:17:16.190 --> 00:17:17.789
<v Speaker 1>Project list.

00:17:19.470 --> 00:17:21.390
<v Speaker 1>Two, there's a response that I don't care

00:17:21.390 --> 00:17:21.869
<v Speaker 1>about.

00:17:22.430 --> 00:17:23.309
<v Speaker 1>There we go.

00:17:23.710 --> 00:17:26.645
<v Speaker 1>And, obviously, I'm not checking for error. It's,

00:17:26.645 --> 00:17:28.725
<v Speaker 1>you know, what could go wrong? Yellow.

00:17:29.525 --> 00:17:30.644
<v Speaker 1>Let's do this.

00:17:37.045 --> 00:17:39.445
<v Speaker 0>So, Dan, do you understand

00:17:38.890 --> 00:17:40.570
<v Speaker 0>why we're building this? Did we could could

00:17:40.570 --> 00:17:42.010
<v Speaker 0>we make that clear, or do want me

00:17:42.010 --> 00:17:43.129
<v Speaker 0>to go over that again?

00:17:44.410 --> 00:17:46.410
<v Speaker 2>I I got the basic. I missed the

00:17:46.410 --> 00:17:47.769
<v Speaker 2>very beginning of the stream.

00:17:48.330 --> 00:17:50.650
<v Speaker 2>But, essentially, what this is supposed to be

00:17:50.650 --> 00:17:52.765
<v Speaker 2>a GitHub action, right, that does some checking

00:17:52.765 --> 00:17:55.085
<v Speaker 2>for things and packet related projects?

00:17:55.885 --> 00:17:57.565
<v Speaker 0>Yeah. So as we do more and more

00:17:57.565 --> 00:17:59.565
<v Speaker 0>end to end testing, we just need the

00:17:59.565 --> 00:18:02.125
<v Speaker 0>ability to have, like, these ephemeral projects and,

00:18:02.125 --> 00:18:04.125
<v Speaker 0>like, be able to clean them up. And

00:18:05.530 --> 00:18:08.010
<v Speaker 0>the API would allow you to remove a

00:18:08.010 --> 00:18:10.090
<v Speaker 0>project if it has any resources.

00:18:10.410 --> 00:18:12.809
<v Speaker 0>Gotcha. We just need to be able to

00:18:13.290 --> 00:18:15.690
<v Speaker 0>work out what those are, delete them. I'm

00:18:15.690 --> 00:18:17.210
<v Speaker 0>assuming we're gonna have to actually wait for

00:18:17.210 --> 00:18:19.050
<v Speaker 0>those to be deleted too before we eventually

00:18:19.050 --> 00:18:19.930
<v Speaker 0>remove the projects.

00:18:20.644 --> 00:18:23.205
<v Speaker 2>Yeah. I can't remember. Are these calls synchronous

00:18:23.205 --> 00:18:25.205
<v Speaker 2>or asynchronous when you make a delete call

00:18:25.205 --> 00:18:27.445
<v Speaker 2>here in the in the SDK?

00:18:27.764 --> 00:18:28.404
<v Speaker 1>I

00:18:28.644 --> 00:18:30.965
<v Speaker 1>I'm not a % sure. I think

00:18:33.470 --> 00:18:35.710
<v Speaker 1>I think that they trigger events that we

00:18:35.710 --> 00:18:37.630
<v Speaker 1>might have to follow. Mhmm.

00:18:40.030 --> 00:18:42.510
<v Speaker 1>Yeah. But that that would definitely that'll be

00:18:42.510 --> 00:18:44.590
<v Speaker 1>a problem for this. Something to figure out

00:18:44.750 --> 00:18:46.670
<v Speaker 1>next. Some looks like if you had something

00:18:46.670 --> 00:18:48.005
<v Speaker 2>that was continuously

00:18:48.005 --> 00:18:50.244
<v Speaker 2>reconciling the state of these things,

00:18:50.485 --> 00:18:51.924
<v Speaker 2>that that would be helpful.

00:18:52.725 --> 00:18:54.724
<v Speaker 1>What are you what are you suggesting, Tim?

00:18:54.885 --> 00:18:56.725
<v Speaker 2>I don't know. This is probably called cross

00:18:56.725 --> 00:18:58.804
<v Speaker 2>plane that might be useful. I don't know.

00:18:58.804 --> 00:19:00.965
<v Speaker 2>It seems like kind of heavy handed, right,

00:19:00.965 --> 00:19:03.340
<v Speaker 2>to, like, spin up a, like, a kind

00:19:03.340 --> 00:19:06.059
<v Speaker 2>cluster install cross plane and then, you know,

00:19:06.059 --> 00:19:08.620
<v Speaker 2>something to delete these things. But one of

00:19:08.620 --> 00:19:10.140
<v Speaker 2>the things that I've been thinking about a

00:19:10.140 --> 00:19:12.140
<v Speaker 2>lot lately and and not just me, other

00:19:12.140 --> 00:19:14.779
<v Speaker 2>folks in the cross plane community is, like,

00:19:14.779 --> 00:19:15.740
<v Speaker 2>if you could package

00:19:17.265 --> 00:19:20.145
<v Speaker 2>essentially, like, a a Docker image that was

00:19:20.145 --> 00:19:20.865
<v Speaker 2>kind,

00:19:21.665 --> 00:19:23.505
<v Speaker 2>cross plane, and then, like, you know, a

00:19:23.505 --> 00:19:25.825
<v Speaker 2>provider of your choice, then you could essentially

00:19:25.825 --> 00:19:28.465
<v Speaker 2>just run a single container and do, like,

00:19:28.785 --> 00:19:29.745
<v Speaker 2>almost like a,

00:19:30.500 --> 00:19:32.740
<v Speaker 2>you know, like a cron job or something

00:19:32.740 --> 00:19:36.580
<v Speaker 2>that ran, like, this the provider temporarily to

00:19:36.580 --> 00:19:38.340
<v Speaker 2>do things like cleanup like this or something

00:19:38.340 --> 00:19:38.980
<v Speaker 2>like that.

00:19:39.540 --> 00:19:41.220
<v Speaker 2>You know, I don't know what if there

00:19:41.220 --> 00:19:41.860
<v Speaker 2>would be

00:19:42.420 --> 00:19:44.500
<v Speaker 2>as many use cases as I'm thinking right

00:19:44.500 --> 00:19:44.660
<v Speaker 2>now,

00:19:45.975 --> 00:19:47.815
<v Speaker 2>but it would be something for sure to

00:19:47.815 --> 00:19:49.895
<v Speaker 2>experiment with and also could be useful for,

00:19:49.895 --> 00:19:51.735
<v Speaker 2>you know, local development and that sort of

00:19:51.735 --> 00:19:52.294
<v Speaker 2>thing.

00:19:53.495 --> 00:19:54.535
<v Speaker 0>I'm

00:19:54.535 --> 00:19:56.535
<v Speaker 0>surprised that is there not, like, a mock

00:19:56.535 --> 00:19:57.415
<v Speaker 0>Kubernetes

00:19:57.415 --> 00:19:59.720
<v Speaker 0>API server that could be used so you

00:19:59.720 --> 00:20:01.480
<v Speaker 0>could maybe run-in for a claim as I

00:20:01.480 --> 00:20:03.400
<v Speaker 0>was spending up a field with growing cluster

00:20:03.720 --> 00:20:04.520
<v Speaker 0>or API?

00:20:05.000 --> 00:20:05.960
<v Speaker 2>Yeah. So

00:20:06.920 --> 00:20:08.840
<v Speaker 2>sort of, yes. One of the things

00:20:09.560 --> 00:20:10.360
<v Speaker 2>that

00:20:11.000 --> 00:20:12.600
<v Speaker 2>you can actually do with crosswind is run

00:20:12.600 --> 00:20:13.560
<v Speaker 2>it in a tenant mode,

00:20:14.785 --> 00:20:16.785
<v Speaker 2>which allows you to essentially

00:20:16.945 --> 00:20:18.065
<v Speaker 2>run the

00:20:18.785 --> 00:20:20.625
<v Speaker 2>you know, like, if you're running controllers and

00:20:20.625 --> 00:20:22.145
<v Speaker 2>stuff like that, you have to actually have

00:20:22.145 --> 00:20:23.745
<v Speaker 2>infrastructure for that to run on in a

00:20:23.745 --> 00:20:25.185
<v Speaker 2>cluster to schedule that and that sort of

00:20:25.185 --> 00:20:26.385
<v Speaker 2>thing. You have to have a full cluster.

00:20:26.659 --> 00:20:29.140
<v Speaker 2>But then if you are actually just using

00:20:29.140 --> 00:20:30.580
<v Speaker 2>an API server to,

00:20:31.620 --> 00:20:33.700
<v Speaker 2>you know, for those providers to interact with,

00:20:33.700 --> 00:20:35.940
<v Speaker 2>you don't actually need that scheduling capability. All

00:20:35.940 --> 00:20:37.860
<v Speaker 2>you need is basically the API server and

00:20:37.860 --> 00:20:40.505
<v Speaker 2>a backing data store, typically, at CD. So

00:20:40.505 --> 00:20:42.905
<v Speaker 2>you could run a a very stripped down

00:20:42.905 --> 00:20:43.865
<v Speaker 2>Kubernetes,

00:20:43.865 --> 00:20:45.705
<v Speaker 2>which is basically just those two components

00:20:46.425 --> 00:20:49.305
<v Speaker 2>that essentially your providers would watch

00:20:50.185 --> 00:20:52.585
<v Speaker 2>and interact with because all that's doing is

00:20:52.585 --> 00:20:54.665
<v Speaker 2>basically storing state for you, right, and allowing

00:20:54.665 --> 00:20:56.799
<v Speaker 2>you to get that. So it's not fully

00:20:56.799 --> 00:20:59.199
<v Speaker 2>mocked because you are actually still running, like,

00:20:59.919 --> 00:21:02.239
<v Speaker 2>the, like, etcd and that sort of thing,

00:21:02.720 --> 00:21:04.960
<v Speaker 2>but you can run it, you know, for

00:21:04.960 --> 00:21:06.639
<v Speaker 2>instance, we have some end to end tests

00:21:06.639 --> 00:21:09.525
<v Speaker 2>that are using, like, the cube builder type

00:21:09.525 --> 00:21:12.165
<v Speaker 2>thing where you're actually just executing the binaries

00:21:12.165 --> 00:21:13.125
<v Speaker 2>behind the scenes

00:21:13.605 --> 00:21:14.965
<v Speaker 2>and talking to those.

00:21:15.765 --> 00:21:17.685
<v Speaker 2>And then those are running in a those

00:21:17.685 --> 00:21:18.965
<v Speaker 2>end to end tests are running into, a

00:21:18.965 --> 00:21:20.645
<v Speaker 2>cotton cluster or something like that.

00:21:20.965 --> 00:21:22.645
<v Speaker 2>So, yeah, that's definitely something

00:21:23.710 --> 00:21:25.789
<v Speaker 2>to look at there. I'd be interested in

00:21:25.789 --> 00:21:28.429
<v Speaker 2>a kind of like a CICD pipeline is

00:21:28.429 --> 00:21:29.950
<v Speaker 2>a a cool place to look at doing

00:21:29.950 --> 00:21:32.269
<v Speaker 2>that. So any GitHub action would be even

00:21:32.269 --> 00:21:34.429
<v Speaker 2>simpler because folks could just kinda, like, add

00:21:34.429 --> 00:21:35.630
<v Speaker 2>that to their project immediately.

00:21:40.424 --> 00:21:42.664
<v Speaker 0>That's a lot of to do statements. Yeah.

00:21:42.664 --> 00:21:44.345
<v Speaker 1>And what I realized in writing the to

00:21:44.345 --> 00:21:46.024
<v Speaker 1>dos is that I'm not gonna care about

00:21:46.024 --> 00:21:47.465
<v Speaker 1>any of the rest of this right now.

00:21:47.465 --> 00:21:49.465
<v Speaker 1>I'm just gonna care about deleting the devices.

00:21:50.960 --> 00:21:52.480
<v Speaker 0>Oh, yeah. Because we can just create a

00:21:52.480 --> 00:21:54.080
<v Speaker 0>project. I'll do that in there.

00:21:54.400 --> 00:21:55.120
<v Speaker 0>Yeah.

00:21:55.520 --> 00:21:57.920
<v Speaker 0>I'll create a project with one device,

00:21:57.920 --> 00:21:59.600
<v Speaker 0>and then we can just run it.

00:22:00.400 --> 00:22:03.440
<v Speaker 0>Yeah. So let's see what's device delete. It's

00:22:03.440 --> 00:22:05.280
<v Speaker 1>not checked. You'll find and delete a a

00:22:05.280 --> 00:22:07.175
<v Speaker 0>real server checks

00:22:07.175 --> 00:22:08.855
<v Speaker 0>with code that you've read in another three

00:22:08.855 --> 00:22:09.655
<v Speaker 0>and a half minutes.

00:22:10.055 --> 00:22:11.895
<v Speaker 1>Yeah. Do all of these

00:22:12.295 --> 00:22:15.735
<v Speaker 2>underlying clients implement this? They don't implement the

00:22:15.735 --> 00:22:17.815
<v Speaker 2>same interface. Right? So you can't just, like,

00:22:17.815 --> 00:22:19.895
<v Speaker 2>pass them in and just call delete on

00:22:19.895 --> 00:22:22.440
<v Speaker 2>all of them? Because their parameter

00:22:22.840 --> 00:22:23.400
<v Speaker 1>yeah.

00:22:23.640 --> 00:22:26.039
<v Speaker 1>Their their parameters are different. I wish. I

00:22:26.040 --> 00:22:26.600
<v Speaker 1>wish.

00:22:28.520 --> 00:22:30.200
<v Speaker 1>And, usually, when you want something like that,

00:22:30.200 --> 00:22:31.400
<v Speaker 1>you need to, like, pass in some sort

00:22:31.400 --> 00:22:33.925
<v Speaker 1>of function to do it or or set

00:22:33.925 --> 00:22:35.205
<v Speaker 1>of functions. Yeah.

00:22:35.605 --> 00:22:37.605
<v Speaker 2>That'd something you need to work after.

00:22:38.965 --> 00:22:39.525
<v Speaker 1>What is

00:22:40.165 --> 00:22:42.645
<v Speaker 1>What is the dot dot dot of

00:22:43.365 --> 00:22:45.765
<v Speaker 1>of functions that you would use as parameters?

00:22:45.765 --> 00:22:48.885
<v Speaker 1>What's the right go for terminology for that?

00:22:50.140 --> 00:22:52.380
<v Speaker 2>I would just call it, like, parameter expansion,

00:22:52.380 --> 00:22:54.300
<v Speaker 2>which I don't think is what Yeah. The

00:22:54.460 --> 00:22:55.820
<v Speaker 0>JavaScript and

00:22:56.300 --> 00:22:58.460
<v Speaker 0>another language, is just called the spread operator.

00:22:58.620 --> 00:22:59.260
<v Speaker 2>Yeah.

00:23:00.860 --> 00:23:02.540
<v Speaker 2>Yeah. I don't let me actually I'll look

00:23:02.540 --> 00:23:03.500
<v Speaker 2>that up

00:23:04.335 --> 00:23:06.335
<v Speaker 2>since I'm just the the guest here. I

00:23:06.335 --> 00:23:08.575
<v Speaker 2>I can be the the researcher as well.

00:23:09.135 --> 00:23:10.655
<v Speaker 0>But here's a random one for you, and

00:23:10.655 --> 00:23:12.575
<v Speaker 0>while you're doing that. Like, I've been writing

00:23:12.575 --> 00:23:13.934
<v Speaker 0>a lot more Rust this year,

00:23:14.414 --> 00:23:17.534
<v Speaker 0>and they have an operator called the TurboFish.

00:23:17.695 --> 00:23:19.294
<v Speaker 0>Have you seen the TurboFish?

00:23:19.455 --> 00:23:19.775
<v Speaker 1>Mhmm.

00:23:20.710 --> 00:23:23.750
<v Speaker 0>It's like this weird syntax for generic

00:23:23.750 --> 00:23:24.469
<v Speaker 0>functions.

00:23:25.590 --> 00:23:27.190
<v Speaker 0>I'll need to paste this somewhere. I'm not

00:23:27.190 --> 00:23:28.389
<v Speaker 0>gonna be able to describe what it looks

00:23:28.389 --> 00:23:30.149
<v Speaker 0>like, but it's the weirdest thing I've seen

00:23:30.149 --> 00:23:31.269
<v Speaker 0>in code in a long time.

00:23:32.495 --> 00:23:34.174
<v Speaker 0>Alright, Marcus.

00:23:34.415 --> 00:23:37.054
<v Speaker 0>I'm sending you an API key.

00:23:38.015 --> 00:23:38.655
<v Speaker 0>Oh,

00:23:39.055 --> 00:23:41.375
<v Speaker 0>is this for for my purposes here?

00:23:42.495 --> 00:23:44.095
<v Speaker 0>Yeah. For just so that you don't have

00:23:44.095 --> 00:23:45.695
<v Speaker 0>to wait on spending up a project. I

00:23:45.695 --> 00:23:47.990
<v Speaker 0>figured I would just just provide you. Do

00:23:47.990 --> 00:23:49.590
<v Speaker 1>you have a resource in there? I should

00:23:49.590 --> 00:23:51.270
<v Speaker 1>probably print what I'm deleting if that's the

00:23:51.270 --> 00:23:53.669
<v Speaker 1>case. There's a server called

00:23:54.309 --> 00:23:56.230
<v Speaker 0>1 T 1 Small X 80 6 0

00:23:56.230 --> 00:23:57.509
<v Speaker 0>1. Yes.

00:23:57.750 --> 00:23:59.110
<v Speaker 1>And you don't care if I delete it.

00:23:59.110 --> 00:23:59.270
<v Speaker 1>Right?

00:24:01.165 --> 00:24:02.765
<v Speaker 0>I do not mind if you delete it.

00:24:02.765 --> 00:24:05.405
<v Speaker 0>No. And I've sent you the project ID.

00:24:05.405 --> 00:24:06.845
<v Speaker 0>So you should have everything you need. And

00:24:06.845 --> 00:24:10.285
<v Speaker 0>I'll in fact, you'll oh, I created a

00:24:10.285 --> 00:24:12.685
<v Speaker 0>product a project API key. So, you know

00:24:14.250 --> 00:24:17.050
<v Speaker 1>So that should be better than right. You

00:24:17.050 --> 00:24:18.490
<v Speaker 1>you can delete the device, but you won't

00:24:18.490 --> 00:24:19.930
<v Speaker 0>be able to delete the project, I would

00:24:19.930 --> 00:24:20.570
<v Speaker 0>imagine.

00:24:21.370 --> 00:24:24.490
<v Speaker 2>Also, the official name for the the kind

00:24:24.490 --> 00:24:27.210
<v Speaker 2>of spread and go lang is very variadic

00:24:27.210 --> 00:24:28.170
<v Speaker 2>function parameters.

00:24:29.785 --> 00:24:32.425
<v Speaker 2>That's what waiting for. Variadic. I couldn't remember

00:24:32.425 --> 00:24:32.905
<v Speaker 2>that.

00:24:34.345 --> 00:24:36.825
<v Speaker 1>So that's our delete c calls it as

00:24:36.825 --> 00:24:37.385
<v Speaker 1>well.

00:24:38.025 --> 00:24:40.585
<v Speaker 1>Variate it. And we should wait for them,

00:24:40.585 --> 00:24:42.425
<v Speaker 1>but we'll maybe skip the waiting for now.

00:24:43.300 --> 00:24:45.539
<v Speaker 1>And what else do we wanna do?

00:24:45.780 --> 00:24:48.260
<v Speaker 1>Gonna delete them. I need to get into

00:24:48.260 --> 00:24:49.620
<v Speaker 1>a terminal

00:24:50.660 --> 00:24:52.340
<v Speaker 1>and handy way to

00:24:53.300 --> 00:24:55.059
<v Speaker 1>read in secrets

00:24:55.060 --> 00:24:57.140
<v Speaker 1>that somebody passes you in Slack

00:24:57.695 --> 00:24:59.215
<v Speaker 1>maybe we need to do this.

00:25:10.430 --> 00:25:12.670
<v Speaker 1>I can just type in whatever, and we're

00:25:12.670 --> 00:25:14.030
<v Speaker 1>good to go. Follow it up with a

00:25:14.030 --> 00:25:15.870
<v Speaker 1>clear right where the neck up.

00:25:16.270 --> 00:25:18.110
<v Speaker 1>It'd be wonderful. And now I'm gonna grab

00:25:18.110 --> 00:25:19.390
<v Speaker 1>that secret that you handed me.

00:25:25.055 --> 00:25:25.855
<v Speaker 1>Password,

00:25:25.855 --> 00:25:27.375
<v Speaker 1>one two three. Got it.

00:25:28.415 --> 00:25:29.775
<v Speaker 1>And

00:25:30.175 --> 00:25:31.455
<v Speaker 1>project ID,

00:25:35.135 --> 00:25:36.015
<v Speaker 1>it's same thing.

00:25:42.610 --> 00:25:44.129
<v Speaker 1>That one, did not

00:25:44.370 --> 00:25:45.970
<v Speaker 1>prompt it properly.

00:25:45.970 --> 00:25:46.690
<v Speaker 1>Let's do that again.

00:25:52.165 --> 00:25:52.885
<v Speaker 1>Okay.

00:25:53.125 --> 00:25:54.645
<v Speaker 1>I've got a project ID. I've got a

00:25:54.645 --> 00:25:57.684
<v Speaker 1>packet auth token. So let's see. Go run.

00:26:01.685 --> 00:26:03.845
<v Speaker 1>Yeah. What could go wrong? YOLO.

00:26:05.330 --> 00:26:07.010
<v Speaker 0>I love how you're not even commenting out

00:26:07.010 --> 00:26:09.810
<v Speaker 0>the delete. You're actually just gonna wait and

00:26:09.810 --> 00:26:10.769
<v Speaker 0>see what happens.

00:26:11.170 --> 00:26:12.370
<v Speaker 0>Alright. I need to give this thing a

00:26:12.370 --> 00:26:13.169
<v Speaker 1>name. Okay.

00:26:15.330 --> 00:26:18.130
<v Speaker 1>Github.com/display/packetproject.

00:26:19.294 --> 00:26:20.815
<v Speaker 1>What did I not comment, though?

00:26:22.895 --> 00:26:23.854
<v Speaker 1>What did say?

00:26:31.294 --> 00:26:32.414
<v Speaker 0>Arguments.

00:26:34.320 --> 00:26:36.480
<v Speaker 1>Which one? Is it the true? I thought

00:26:36.480 --> 00:26:38.239
<v Speaker 1>that it took a force true.

00:26:38.480 --> 00:26:41.919
<v Speaker 1>Oh, it doesn't. What happened? Devices delete.

00:26:42.080 --> 00:26:44.480
<v Speaker 1>Always trust the red speckle. Like, that's just

00:26:44.480 --> 00:26:45.200
<v Speaker 1>the rule.

00:26:45.360 --> 00:26:46.960
<v Speaker 1>Yeah. I thought I thought there was a

00:26:46.960 --> 00:26:49.735
<v Speaker 1>a force parameter to force it to detect.

00:26:49.735 --> 00:26:51.415
<v Speaker 1>I guess that's something that the the packet

00:26:51.415 --> 00:26:53.015
<v Speaker 1>UI does manually,

00:26:55.495 --> 00:26:57.575
<v Speaker 1>and this is something that, you know, definitely

00:26:57.575 --> 00:27:00.055
<v Speaker 1>needs to be improved as the the documentation

00:27:00.055 --> 00:27:00.855
<v Speaker 1>on each function.

00:27:05.990 --> 00:27:06.710
<v Speaker 1>Okay.

00:27:06.870 --> 00:27:07.830
<v Speaker 1>Packet

00:27:07.990 --> 00:27:10.070
<v Speaker 1>off to I read it, but I didn't

00:27:10.070 --> 00:27:11.030
<v Speaker 1>export it.

00:27:12.070 --> 00:27:13.350
<v Speaker 1>So I'll do this,

00:27:14.310 --> 00:27:15.750
<v Speaker 1>and I probably need to do the Symfony

00:27:15.750 --> 00:27:16.870
<v Speaker 1>project ID.

00:27:22.695 --> 00:27:23.975
<v Speaker 1>I think that an output

00:27:24.375 --> 00:27:26.535
<v Speaker 1>I assume your device has not been deleted.

00:27:26.535 --> 00:27:27.975
<v Speaker 1>Let's see what happened.

00:27:29.975 --> 00:27:32.295
<v Speaker 1>It didn't panic, though. It's a good sign.

00:27:40.120 --> 00:27:41.400
<v Speaker 0>But why is there a red square to

00:27:41.400 --> 00:27:43.320
<v Speaker 0>one device? Oh, yeah. What's the problem is

00:27:43.320 --> 00:27:43.879
<v Speaker 1>here?

00:27:45.000 --> 00:27:47.000
<v Speaker 0>Oh, because it's the it's not inside the

00:27:47.000 --> 00:27:48.934
<v Speaker 0>next bar. Right? Yeah.

00:27:54.855 --> 00:27:56.455
<v Speaker 0>Could you not just return earlier? I mean,

00:27:56.455 --> 00:27:57.415
<v Speaker 0>I don't wanna give you a shit for

00:27:57.415 --> 00:28:00.055
<v Speaker 0>your code not being very ergonomic, but come

00:28:00.055 --> 00:28:00.295
<v Speaker 0>on.

00:28:01.330 --> 00:28:03.409
<v Speaker 1>Do want me to exit early? Alright. Alright.

00:28:03.409 --> 00:28:03.969
<v Speaker 1>Fine.

00:28:04.769 --> 00:28:06.690
<v Speaker 1>I I just I have, like, this really

00:28:06.690 --> 00:28:07.409
<v Speaker 0>strong

00:28:07.649 --> 00:28:10.370
<v Speaker 0>hatred for else statements in any any code

00:28:10.370 --> 00:28:12.049
<v Speaker 0>at all. So Yeah. The

00:28:12.610 --> 00:28:13.409
<v Speaker 0>Golang

00:28:16.355 --> 00:28:17.955
<v Speaker 2>Yeah. You have the chance to there is

00:28:17.955 --> 00:28:20.355
<v Speaker 2>no yeah. The Golang went through probably would've

00:28:20.355 --> 00:28:21.634
<v Speaker 1>yelled at me for that too.

00:28:22.034 --> 00:28:23.234
<v Speaker 1>The Golang

00:28:23.235 --> 00:28:24.514
<v Speaker 1>CI went.

00:28:25.315 --> 00:28:26.834
<v Speaker 1>Alright. So now we're good.

00:28:27.394 --> 00:28:29.315
<v Speaker 0>So does the panic do an exit, or

00:28:29.315 --> 00:28:31.850
<v Speaker 0>do you have to return? Panic exits. Yeah.

00:28:31.850 --> 00:28:32.649
<v Speaker 1>It's fatal.

00:28:33.289 --> 00:28:34.489
<v Speaker 1>And there's no

00:28:35.370 --> 00:28:36.249
<v Speaker 1>yeah.

00:28:36.890 --> 00:28:38.330
<v Speaker 1>Do I need to return? It has a

00:28:38.330 --> 00:28:40.649
<v Speaker 1>complaint about needing a a bare return.

00:28:46.115 --> 00:28:49.075
<v Speaker 1>Nice. Cool. So now let's just dockerize this

00:28:49.075 --> 00:28:51.635
<v Speaker 1>and publish it in the GitHub actions. How

00:28:51.635 --> 00:28:53.235
<v Speaker 1>do you do that? We have five minutes.

00:28:53.235 --> 00:28:53.795
<v Speaker 1>Go.

00:28:54.835 --> 00:28:57.795
<v Speaker 1>It's gone. Like, there you go. It deleted.

00:28:58.770 --> 00:29:02.049
<v Speaker 1>Alright. So next step is publishing.

00:29:02.450 --> 00:29:03.970
<v Speaker 1>Let's get you back up.

00:29:04.770 --> 00:29:05.570
<v Speaker 1>Alright.

00:29:07.570 --> 00:29:08.690
<v Speaker 0>So we need a

00:29:08.930 --> 00:29:09.810
<v Speaker 0>Dockerfile,

00:29:12.774 --> 00:29:15.174
<v Speaker 0>and we need ARM 64 support. So, you

00:29:15.174 --> 00:29:16.374
<v Speaker 0>know, don't get lazy.

00:29:18.054 --> 00:29:20.534
<v Speaker 1>We all devices in project, by the way.

00:29:24.000 --> 00:29:25.120
<v Speaker 1>That's

00:29:25.120 --> 00:29:26.399
<v Speaker 1>what I wanna do. Mark

00:29:26.800 --> 00:29:29.760
<v Speaker 0>is agreeing that the red squiggle doesn't lie.

00:29:30.400 --> 00:29:31.279
<v Speaker 0>Well said.

00:29:32.720 --> 00:29:34.880
<v Speaker 1>Alright. So packet project, we've got that. So

00:29:34.880 --> 00:29:36.845
<v Speaker 1>what do we have instructions? Do you have

00:29:36.845 --> 00:29:38.445
<v Speaker 1>anybody dig up a link on how to

00:29:38.445 --> 00:29:40.365
<v Speaker 1>make a Docker

00:29:42.845 --> 00:29:43.565
<v Speaker 1>a

00:29:43.725 --> 00:29:45.965
<v Speaker 1>GitHub action friendly Dockerfile?

00:29:48.940 --> 00:29:50.540
<v Speaker 1>I assume it needs to be a Docker

00:29:50.540 --> 00:29:51.179
<v Speaker 1>file.

00:29:52.940 --> 00:29:54.620
<v Speaker 0>So, yeah, you have to build a container

00:29:54.620 --> 00:29:55.340
<v Speaker 0>image,

00:29:55.740 --> 00:29:57.900
<v Speaker 0>and I believe it has to be wrapped.

00:29:57.900 --> 00:29:59.900
<v Speaker 0>Like, all the examples I've seen before, was

00:29:59.980 --> 00:30:01.355
<v Speaker 0>hold on. I do understand.

00:30:01.675 --> 00:30:04.635
<v Speaker 0>It's generally, like, JavaScript fails, but then execs

00:30:04.635 --> 00:30:06.554
<v Speaker 0>out for the shell and runs a binary,

00:30:06.555 --> 00:30:08.315
<v Speaker 0>which is not great.

00:30:09.995 --> 00:30:11.275
<v Speaker 0>But that seems just to be the way

00:30:11.275 --> 00:30:11.995
<v Speaker 0>that it's done.

00:30:17.010 --> 00:30:18.130
<v Speaker 0>Let's see.

00:30:19.570 --> 00:30:21.490
<v Speaker 0>So there is a Cypress

00:30:21.490 --> 00:30:22.930
<v Speaker 0>oh, that's a big one.

00:30:25.170 --> 00:30:27.115
<v Speaker 1>Do we actually need an entry point shell

00:30:27.115 --> 00:30:29.115
<v Speaker 1>script, or is it enough to just run

00:30:29.275 --> 00:30:31.355
<v Speaker 1>the thing that we've compiled?

00:30:34.955 --> 00:30:36.875
<v Speaker 2>You should just go to run it directly

00:30:36.875 --> 00:30:37.835
<v Speaker 2>if you built it.

00:30:39.940 --> 00:30:41.460
<v Speaker 2>Wait. Are you are you building

00:30:41.780 --> 00:30:43.539
<v Speaker 2>I assume you're building it in the

00:30:44.580 --> 00:30:46.740
<v Speaker 2>in the image as well. So I

00:30:51.620 --> 00:30:54.125
<v Speaker 1>So I'm building oh, yeah. There's a main

00:30:54.125 --> 00:30:55.965
<v Speaker 1>site to make a builder staged.

00:30:56.765 --> 00:30:58.205
<v Speaker 2>Yeah. Well, I guess you don't have to

00:30:58.205 --> 00:31:00.044
<v Speaker 2>since this is just a a quick stream.

00:31:00.044 --> 00:31:01.885
<v Speaker 2>But Yeah. You could just do from this

00:31:01.885 --> 00:31:03.645
<v Speaker 2>builder and then copy it over to a

00:31:03.645 --> 00:31:05.485
<v Speaker 2>scratch image or something like that or just

00:31:05.485 --> 00:31:09.769
<v Speaker 2>drill us. Right. Any quick can't Scratch images.

00:31:10.890 --> 00:31:13.530
<v Speaker 1>Let's see. What was that, Marcus? Just looking

00:31:13.530 --> 00:31:15.289
<v Speaker 1>for any kind of quick examples I can

00:31:15.289 --> 00:31:16.730
<v Speaker 1>find of that. If only I knew a

00:31:16.730 --> 00:31:18.330
<v Speaker 1>project that uses Scratch

00:31:18.205 --> 00:31:19.085
<v Speaker 1>Docker

00:31:19.085 --> 00:31:21.325
<v Speaker 1>image. Yeah. Or you can just do it

00:31:21.325 --> 00:31:22.845
<v Speaker 0>from scratch. You don't need to do anything

00:31:22.845 --> 00:31:24.684
<v Speaker 0>special. I can walk you through that.

00:31:25.405 --> 00:31:27.245
<v Speaker 1>That's problem. Your Docker file?

00:31:27.965 --> 00:31:28.684
<v Speaker 1>Yeah.

00:31:29.565 --> 00:31:32.030
<v Speaker 0>Yeah. So just at the very yeah. Just

00:31:32.030 --> 00:31:34.110
<v Speaker 0>do it from scratch. That's it. But we're

00:31:34.110 --> 00:31:34.990
<v Speaker 1>still building.

00:31:35.390 --> 00:31:36.670
<v Speaker 1>The next one could be from

00:31:38.830 --> 00:31:40.670
<v Speaker 1>think we'd still wanna use Alpine for both,

00:31:40.670 --> 00:31:42.510
<v Speaker 1>but but I want is, like, the stage.

00:31:42.990 --> 00:31:44.285
<v Speaker 1>We wanna be able to copy it from

00:31:44.285 --> 00:31:46.284
<v Speaker 1>a build stage to a

00:31:48.125 --> 00:31:50.205
<v Speaker 1>to the So you can do a front

00:31:50.205 --> 00:31:52.045
<v Speaker 0>go line at the top, copy on all

00:31:52.045 --> 00:31:54.045
<v Speaker 0>the codes, then do a run go build,

00:31:54.045 --> 00:31:55.565
<v Speaker 0>and then fill that through in the next

00:31:55.565 --> 00:31:56.605
<v Speaker 0>stage. Yeah.

00:31:57.970 --> 00:31:59.009
<v Speaker 1>I'm going

00:31:59.809 --> 00:32:01.890
<v Speaker 1>do you wanna copy everything or it's already

00:32:01.890 --> 00:32:03.489
<v Speaker 1>here? It's already here? Just

00:32:04.049 --> 00:32:05.330
<v Speaker 1>copy main dot go.

00:32:06.690 --> 00:32:08.690
<v Speaker 1>And and the and the go mod and

00:32:08.690 --> 00:32:10.690
<v Speaker 1>the go to Just do dot dot.

00:32:11.895 --> 00:32:13.975
<v Speaker 1>Dot dot. Yeah. Okay. And then we want

00:32:13.975 --> 00:32:14.855
<v Speaker 1>to run.

00:32:15.735 --> 00:32:16.695
<v Speaker 1>Oh, build.

00:32:17.335 --> 00:32:18.775
<v Speaker 0>All good for the build cache. Now when

00:32:18.775 --> 00:32:20.615
<v Speaker 0>you change the read me, we're have to

00:32:20.615 --> 00:32:22.455
<v Speaker 0>recompile all that full 10 lines of code

00:32:22.455 --> 00:32:23.015
<v Speaker 0>we've got there.

00:32:24.000 --> 00:32:25.360
<v Speaker 1>Have you staged it?

00:32:27.040 --> 00:32:30.000
<v Speaker 1>Sorry? How do you stage this now? So

00:32:30.000 --> 00:32:31.920
<v Speaker 1>you can reference that as from zero or

00:32:31.920 --> 00:32:33.360
<v Speaker 1>after the from goal line, you can do

00:32:33.360 --> 00:32:35.280
<v Speaker 0>it as built, which is what I would

00:32:35.280 --> 00:32:36.800
<v Speaker 0>tend to do. And then that means it's

00:32:36.800 --> 00:32:39.845
<v Speaker 0>named as built. So from Golang space, a

00:32:39.845 --> 00:32:41.604
<v Speaker 0>s build. And

00:32:42.005 --> 00:32:43.924
<v Speaker 0>then you can copy from build now.

00:32:46.725 --> 00:32:48.245
<v Speaker 2>So from scratch there.

00:32:50.730 --> 00:32:52.250
<v Speaker 1>You guys don't like debugging.

00:32:52.250 --> 00:32:54.650
<v Speaker 1>I need that out on the shelf. And

00:32:54.650 --> 00:32:56.570
<v Speaker 2>then in your copy packet

00:32:56.570 --> 00:32:58.090
<v Speaker 2>project down there, you can do a a

00:32:58.090 --> 00:33:00.649
<v Speaker 2>dash dash from before your arguments. Right. Right.

00:33:02.890 --> 00:33:05.130
<v Speaker 2>I guess the output is it packet project?

00:33:05.695 --> 00:33:07.375
<v Speaker 1>It goes. Or is it just gonna be

00:33:07.375 --> 00:33:10.975
<v Speaker 2>main, I guess? So from equals build? Yeah.

00:33:11.375 --> 00:33:12.335
<v Speaker 1>That's good.

00:33:13.215 --> 00:33:15.535
<v Speaker 0>And there's no working directories in the top

00:33:15.535 --> 00:33:17.135
<v Speaker 0>one. I can't remember where it go. Does

00:33:17.135 --> 00:33:19.615
<v Speaker 0>it? I think it's slash go slash source.

00:33:19.615 --> 00:33:19.935
<v Speaker 2>Mhmm.

00:33:22.320 --> 00:33:24.000
<v Speaker 0>Yeah. I think it's slash go slash source.

00:33:24.000 --> 00:33:25.360
<v Speaker 0>We may have to confirm that.

00:33:25.680 --> 00:33:27.520
<v Speaker 2>Who needs a language server when you have

00:33:27.520 --> 00:33:29.840
<v Speaker 2>me and David live commenting here?

00:33:30.000 --> 00:33:32.640
<v Speaker 2>We are we are your squiggly lines.

00:33:33.680 --> 00:33:34.799
<v Speaker 1>Alright. So

00:33:35.040 --> 00:33:36.495
<v Speaker 1>do you think I need something else? Or

00:33:36.495 --> 00:33:38.335
<v Speaker 1>do think we've got what we need here?

00:33:38.575 --> 00:33:40.335
<v Speaker 0>Yeah. So the copy is not gonna work.

00:33:40.335 --> 00:33:42.175
<v Speaker 0>The so it's gonna be slash go slash

00:33:42.175 --> 00:33:43.535
<v Speaker 0>short slash

00:33:45.775 --> 00:33:47.295
<v Speaker 2>And then is it just gonna be called

00:33:47.295 --> 00:33:49.855
<v Speaker 2>main? I forget what the default is. I

00:33:49.855 --> 00:33:52.230
<v Speaker 2>haven't done a not dash o.

00:33:52.390 --> 00:33:54.230
<v Speaker 2>I mean, like, is the binary just gonna

00:33:54.230 --> 00:33:55.190
<v Speaker 2>be called main?

00:33:57.750 --> 00:33:59.270
<v Speaker 2>You know what I mean, Marcus?

00:33:59.670 --> 00:34:00.550
<v Speaker 1>Yeah.

00:34:00.550 --> 00:34:01.430
<v Speaker 1>I'm gonna see if

00:34:03.365 --> 00:34:06.245
<v Speaker 0>I would probably add one echo PWD or

00:34:06.245 --> 00:34:08.565
<v Speaker 0>something like that or so you can see

00:34:08.565 --> 00:34:10.645
<v Speaker 0>where it's building that Yeah. Because that path

00:34:10.645 --> 00:34:11.925
<v Speaker 0>is a guess. So

00:34:12.804 --> 00:34:14.005
<v Speaker 0>it's PWD.

00:34:15.389 --> 00:34:17.389
<v Speaker 2>Yeah. I think I think that it's gonna

00:34:17.389 --> 00:34:18.909
<v Speaker 2>be in Go source

00:34:18.989 --> 00:34:20.589
<v Speaker 2>slash I mean, it's just gonna be called

00:34:20.589 --> 00:34:21.949
<v Speaker 2>Go source main

00:34:22.270 --> 00:34:23.150
<v Speaker 2>likely.

00:34:25.710 --> 00:34:27.710
<v Speaker 1>So this is what the container looks like.

00:34:28.005 --> 00:34:30.484
<v Speaker 1>If I copy dot, it went into Go

00:34:30.484 --> 00:34:33.284
<v Speaker 1>was the default directory. Right.

00:34:34.085 --> 00:34:34.724
<v Speaker 1>So

00:34:34.964 --> 00:34:36.804
<v Speaker 1>should I worry about should if it's going

00:34:36.804 --> 00:34:38.645
<v Speaker 1>to the Go directory, does it matter?

00:34:39.525 --> 00:34:41.204
<v Speaker 2>We go back out to the Go directory

00:34:41.204 --> 00:34:43.739
<v Speaker 2>and see oh, wait. It didn't copy it

00:34:43.739 --> 00:34:45.980
<v Speaker 2>over, though, did it? I didn't. I just

00:34:45.980 --> 00:34:46.540
<v Speaker 1>ran.

00:34:46.940 --> 00:34:48.860
<v Speaker 1>Oh, I see. I see. Mhmm.

00:34:49.820 --> 00:34:51.340
<v Speaker 2>So you could copy it into source if

00:34:51.340 --> 00:34:52.380
<v Speaker 2>you wanted, but

00:34:53.420 --> 00:34:54.460
<v Speaker 2>oh, also, is it?

00:34:55.425 --> 00:34:57.745
<v Speaker 2>Oh, it's nine. Yeah. I'm gonna be here

00:34:57.745 --> 00:35:00.225
<v Speaker 2>in just a minute. Yeah. We gotta run

00:35:00.225 --> 00:35:01.345
<v Speaker 1>away too. But

00:35:02.385 --> 00:35:04.225
<v Speaker 0>I think, like, you you you did well.

00:35:04.225 --> 00:35:06.865
<v Speaker 0>You got really far in, like, under thirty

00:35:06.865 --> 00:35:08.300
<v Speaker 0>minutes. Yeah.

00:35:08.140 --> 00:35:10.060
<v Speaker 0>Don't know. Too long. There's so much there's

00:35:10.060 --> 00:35:11.020
<v Speaker 1>a lot of the

00:35:11.980 --> 00:35:12.940
<v Speaker 1>the mental

00:35:14.940 --> 00:35:15.900
<v Speaker 1>bifurcation.

00:35:16.780 --> 00:35:18.860
<v Speaker 0>Alright. Well, I guess we better go to

00:35:18.940 --> 00:35:21.965
<v Speaker 0>our meeting, but we will continue this next

00:35:21.965 --> 00:35:23.965
<v Speaker 0>week. So thank you both for joining me,

00:35:23.965 --> 00:35:25.245
<v Speaker 0>and thank you for taking all that code

00:35:25.245 --> 00:35:26.125
<v Speaker 0>markers. Catch

00:35:26.765 --> 00:35:27.645
<v Speaker 0>you all soon.

00:35:27.965 --> 00:35:29.085
<v Speaker 1>Yeah. See you.
