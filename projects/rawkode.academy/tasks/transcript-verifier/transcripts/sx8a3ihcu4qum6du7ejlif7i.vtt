WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: d9452a80-4a59-44a8-b3e5-1b52448fd3e2
Created: 2025-04-29T15:07:10.142Z
Duration: 1698.4069
Channels: 1

00:00:44.604 --> 00:00:45.324
<v Speaker 0>Hello,

00:00:45.484 --> 00:00:47.725
<v Speaker 0>and welcome back to the Rawkode Academy.

00:00:48.470 --> 00:00:51.430
<v Speaker 0>Today, I'm continuing my exploration

00:00:51.510 --> 00:00:52.629
<v Speaker 0>of Spin.

00:00:53.190 --> 00:00:55.590
<v Speaker 0>Spin is a microservice

00:00:55.590 --> 00:00:56.550
<v Speaker 0>framework

00:00:56.550 --> 00:00:58.390
<v Speaker 0>for web assembly applications

00:00:58.629 --> 00:01:00.309
<v Speaker 0>from the team at Fermion.

00:01:01.495 --> 00:01:04.375
<v Speaker 0>I've already done a quick exploration where I

00:01:04.375 --> 00:01:06.695
<v Speaker 0>wrote my first spin service,

00:01:06.854 --> 00:01:08.455
<v Speaker 0>and that was done two weeks ago on

00:01:08.455 --> 00:01:10.215
<v Speaker 0>this channel, search for spin, and you'll find

00:01:10.215 --> 00:01:12.055
<v Speaker 0>it. Feel free to go and watch that

00:01:12.055 --> 00:01:13.335
<v Speaker 0>before following on with this one.

00:01:13.980 --> 00:01:17.500
<v Speaker 0>This video, we're taking that initial application to

00:01:17.500 --> 00:01:18.460
<v Speaker 0>the next level.

00:01:18.860 --> 00:01:20.620
<v Speaker 0>What does a full stack

00:01:20.700 --> 00:01:22.700
<v Speaker 0>spin app look like?

00:01:23.500 --> 00:01:26.300
<v Speaker 0>So before we continue, we'll cover a few

00:01:26.300 --> 00:01:27.485
<v Speaker 0>things. One,

00:01:27.645 --> 00:01:30.204
<v Speaker 0>what do I mean by full stack? Well,

00:01:31.005 --> 00:01:33.165
<v Speaker 0>I mean, we have a website that has

00:01:33.165 --> 00:01:35.085
<v Speaker 0>been delivered by Fermion Cloud.

00:01:35.725 --> 00:01:38.125
<v Speaker 0>It has one or more API available to

00:01:38.125 --> 00:01:39.965
<v Speaker 0>it on the back end to do some

00:01:39.965 --> 00:01:42.524
<v Speaker 0>random arbitrary calculation of some kind,

00:01:43.620 --> 00:01:46.340
<v Speaker 0>And we can make the request from

00:01:47.140 --> 00:01:50.020
<v Speaker 0>the website to the API, deliver results for

00:01:50.020 --> 00:01:50.740
<v Speaker 0>the user.

00:01:51.460 --> 00:01:52.340
<v Speaker 0>Typically,

00:01:52.340 --> 00:01:54.660
<v Speaker 0>we're delivering a front end client to the

00:01:54.660 --> 00:01:56.844
<v Speaker 0>user through the website. We have an API

00:01:56.844 --> 00:01:59.244
<v Speaker 0>on the back end. Each API endpoint is

00:01:59.244 --> 00:02:01.484
<v Speaker 0>going to be its own spin component.

00:02:02.524 --> 00:02:03.164
<v Speaker 0>Now

00:02:04.284 --> 00:02:06.444
<v Speaker 0>one more caveat on that list of caveats

00:02:06.444 --> 00:02:08.044
<v Speaker 0>I wanna give you is that please do

00:02:08.044 --> 00:02:09.245
<v Speaker 0>not judge me for my code.

00:02:09.860 --> 00:02:11.460
<v Speaker 0>So the purpose

00:02:11.540 --> 00:02:13.060
<v Speaker 0>of today's demo

00:02:13.140 --> 00:02:15.220
<v Speaker 0>is to show you what the structure

00:02:15.540 --> 00:02:18.420
<v Speaker 0>of a multi component full stack spin application

00:02:18.420 --> 00:02:21.300
<v Speaker 0>looks like. Not necessarily the best way to

00:02:21.300 --> 00:02:23.005
<v Speaker 0>write a web for it or the best

00:02:23.005 --> 00:02:26.045
<v Speaker 0>way to write the API endpoint and rust

00:02:26.045 --> 00:02:27.005
<v Speaker 0>or grain.

00:02:28.525 --> 00:02:30.285
<v Speaker 0>I'm still learning this stuff.

00:02:31.485 --> 00:02:34.205
<v Speaker 0>So I'm not overly proud of the code.

00:02:34.540 --> 00:02:36.620
<v Speaker 0>However, it's a proof of concept. I wanted

00:02:36.620 --> 00:02:37.900
<v Speaker 0>to see what this looked like end to

00:02:37.900 --> 00:02:40.140
<v Speaker 0>end and what that developer experience felt like.

00:02:40.220 --> 00:02:41.900
<v Speaker 0>But I'm gonna show you all this. I

00:02:41.900 --> 00:02:43.820
<v Speaker 0>will publish the code to GitHub,

00:02:43.980 --> 00:02:45.660
<v Speaker 0>and I'm I'm glad actually, I'm gonna continue

00:02:45.660 --> 00:02:47.420
<v Speaker 0>to improve this.

00:02:47.660 --> 00:02:48.380
<v Speaker 0>Now

00:02:48.620 --> 00:02:49.340
<v Speaker 0>that I have

00:02:50.394 --> 00:02:51.995
<v Speaker 0>something that works,

00:02:53.034 --> 00:02:53.915
<v Speaker 0>I wanna,

00:02:54.474 --> 00:02:56.394
<v Speaker 0>you know what what but I'm prototyping. Right?

00:02:56.394 --> 00:02:57.355
<v Speaker 0>What I like to do is is make

00:02:57.355 --> 00:02:57.995
<v Speaker 0>it work.

00:02:58.474 --> 00:02:59.674
<v Speaker 0>Then I'll make it right, and then I'll

00:02:59.674 --> 00:03:01.674
<v Speaker 0>make it fast. This is this three step

00:03:01.674 --> 00:03:03.595
<v Speaker 0>adage that we've all heard as developers over

00:03:03.595 --> 00:03:05.680
<v Speaker 0>the last ten years, twenty years, however long

00:03:05.680 --> 00:03:07.920
<v Speaker 0>you've been doing this. I've made it work.

00:03:08.880 --> 00:03:11.680
<v Speaker 0>I actually really wanna use Spin for

00:03:12.240 --> 00:03:13.920
<v Speaker 0>some real applications.

00:03:14.160 --> 00:03:15.840
<v Speaker 0>You may have seen a video on the

00:03:15.840 --> 00:03:17.680
<v Speaker 0>academy last year, but I actually broke down

00:03:17.680 --> 00:03:19.280
<v Speaker 0>how all of the automation works for the

00:03:19.280 --> 00:03:19.920
<v Speaker 0>YouTube Academy.

00:03:20.375 --> 00:03:21.974
<v Speaker 0>And I wanna rebuild that in a cloud

00:03:21.974 --> 00:03:23.814
<v Speaker 0>native way with bits of web assembly scattered

00:03:23.814 --> 00:03:25.814
<v Speaker 0>through it. So I'm now wondering how do

00:03:25.814 --> 00:03:28.055
<v Speaker 0>I loop this in my automation. And I'm

00:03:28.055 --> 00:03:29.814
<v Speaker 0>gonna be rebuilding a lot of this. I'm

00:03:29.814 --> 00:03:31.575
<v Speaker 0>gonna start to do this the right way.

00:03:31.655 --> 00:03:33.734
<v Speaker 0>Spending a little bit more time not being

00:03:33.734 --> 00:03:35.575
<v Speaker 0>ashamed of my code and shipping it.

00:03:36.239 --> 00:03:38.319
<v Speaker 0>And then we'll talk about performance. I'm gonna

00:03:38.319 --> 00:03:40.079
<v Speaker 0>do another video on Fairman Cloud in a

00:03:40.079 --> 00:03:41.519
<v Speaker 0>couple of weeks where we look at what

00:03:41.519 --> 00:03:44.480
<v Speaker 0>the performance characteristics of this spend

00:03:44.480 --> 00:03:47.680
<v Speaker 0>development life cycle and workflow and production deployments

00:03:47.680 --> 00:03:48.159
<v Speaker 0>look like.

00:03:49.245 --> 00:03:51.485
<v Speaker 0>But that's the caveat stunt. Not proud of

00:03:51.485 --> 00:03:53.325
<v Speaker 0>the code. It does work. I'm gonna do

00:03:53.325 --> 00:03:54.925
<v Speaker 0>it more. I'm gonna make it right. So

00:03:54.925 --> 00:03:56.445
<v Speaker 0>I hope you're comfortable and happy with that

00:03:56.445 --> 00:03:57.405
<v Speaker 0>as I am.

00:03:58.205 --> 00:03:59.805
<v Speaker 0>I see we have a comment from Russell

00:03:59.805 --> 00:04:00.525
<v Speaker 0>in the chat.

00:04:02.870 --> 00:04:04.630
<v Speaker 0>Yeah. I do have a new video style.

00:04:04.630 --> 00:04:05.430
<v Speaker 0>I decided

00:04:05.670 --> 00:04:07.830
<v Speaker 0>to experiment a little bit. So I'm not

00:04:07.830 --> 00:04:09.910
<v Speaker 0>in my new office yet. I move into

00:04:09.910 --> 00:04:11.830
<v Speaker 0>my new office over the next couple of

00:04:11.830 --> 00:04:12.310
<v Speaker 0>days.

00:04:12.710 --> 00:04:14.150
<v Speaker 0>And as part of my new office,

00:04:14.995 --> 00:04:17.315
<v Speaker 0>I bought some new goodies. Some new green

00:04:17.315 --> 00:04:19.154
<v Speaker 0>screens, some new lighting, a whole bunch of

00:04:19.154 --> 00:04:21.075
<v Speaker 0>other things. None of that is set up

00:04:21.075 --> 00:04:22.835
<v Speaker 0>today, but it did make me pull out

00:04:22.835 --> 00:04:24.595
<v Speaker 0>all the stuff that I previously had to

00:04:24.595 --> 00:04:26.595
<v Speaker 0>kinda do a bit of stock and inventory.

00:04:26.595 --> 00:04:28.595
<v Speaker 0>And I decided to try and make this

00:04:28.595 --> 00:04:29.795
<v Speaker 0>a little bit more interactive.

00:04:30.240 --> 00:04:32.000
<v Speaker 0>And in fact, when we switch over

00:04:33.120 --> 00:04:35.360
<v Speaker 0>to the screen share, I'm in the corner,

00:04:35.360 --> 00:04:36.560
<v Speaker 0>we have the code.

00:04:36.880 --> 00:04:39.280
<v Speaker 0>I mean, I I think there's some merit

00:04:39.280 --> 00:04:41.599
<v Speaker 0>to this style, especially when it's just me

00:04:41.599 --> 00:04:42.160
<v Speaker 0>this year.

00:04:43.395 --> 00:04:45.155
<v Speaker 0>You know, I'm gonna try and focus on

00:04:45.155 --> 00:04:46.914
<v Speaker 0>getting the screen bigger and the text bigger

00:04:46.914 --> 00:04:48.354
<v Speaker 0>and me being able to interact with that.

00:04:48.354 --> 00:04:50.354
<v Speaker 0>I can't quite point to code yet, but,

00:04:50.354 --> 00:04:50.915
<v Speaker 0>you know,

00:04:52.034 --> 00:04:54.914
<v Speaker 0>as bigger green screens come, better lighting comes,

00:04:55.540 --> 00:04:58.100
<v Speaker 0>opens up new options. So, yeah, I'm experimenting.

00:04:58.100 --> 00:04:59.620
<v Speaker 0>Feel free to give me a thumbs up

00:04:59.620 --> 00:05:01.220
<v Speaker 0>or a thumbs down, Russell and anyone else

00:05:01.220 --> 00:05:02.020
<v Speaker 0>who's watching.

00:05:03.540 --> 00:05:05.860
<v Speaker 0>Now, this video, we're gonna spend the next

00:05:06.100 --> 00:05:07.620
<v Speaker 0>I'm not sure how long this be, twenty

00:05:07.620 --> 00:05:08.580
<v Speaker 0>minutes, twenty five minutes.

00:05:09.784 --> 00:05:11.944
<v Speaker 0>Taking a look at this application that I've

00:05:11.944 --> 00:05:12.425
<v Speaker 0>built.

00:05:13.064 --> 00:05:14.985
<v Speaker 0>A good thing that I'd like to build

00:05:14.985 --> 00:05:16.824
<v Speaker 0>as part of a here's how to build

00:05:16.824 --> 00:05:18.985
<v Speaker 0>distributed systems is a calculator,

00:05:19.384 --> 00:05:22.905
<v Speaker 0>where each service within the calculator is an

00:05:22.905 --> 00:05:26.000
<v Speaker 0>operation plus, minus, multiplication,

00:05:26.000 --> 00:05:26.720
<v Speaker 0>division,

00:05:27.039 --> 00:05:27.840
<v Speaker 0>cosine,

00:05:27.840 --> 00:05:28.480
<v Speaker 0>etcetera.

00:05:29.600 --> 00:05:32.639
<v Speaker 0>Today's is very simple. I've only implemented

00:05:33.039 --> 00:05:34.960
<v Speaker 0>addition and subtraction

00:05:35.759 --> 00:05:37.680
<v Speaker 0>very crudely, I may add. And I bet

00:05:37.680 --> 00:05:40.255
<v Speaker 0>you're going there. How can you implement subtracting

00:05:40.255 --> 00:05:42.655
<v Speaker 0>crudely? Okay. You're gonna see.

00:05:43.694 --> 00:05:45.294
<v Speaker 0>There's one other service here which I haven't

00:05:45.294 --> 00:05:46.815
<v Speaker 0>built yet, but as I go on and

00:05:46.815 --> 00:05:47.935
<v Speaker 0>make this right,

00:05:48.095 --> 00:05:49.775
<v Speaker 0>we are going to implement that. And I'll

00:05:49.775 --> 00:05:51.215
<v Speaker 0>probably do that one live actually because I'm

00:05:51.215 --> 00:05:53.375
<v Speaker 0>getting a lot more comfortable with the process

00:05:53.375 --> 00:05:54.414
<v Speaker 0>of Build to Spin application.

00:05:55.470 --> 00:05:57.230
<v Speaker 0>So let's just take a look. What we

00:05:57.230 --> 00:05:59.230
<v Speaker 0>have here is the calculator service. This is

00:05:59.230 --> 00:06:01.150
<v Speaker 0>the one that's not built and the one

00:06:01.150 --> 00:06:03.070
<v Speaker 0>that we will build together.

00:06:03.630 --> 00:06:05.390
<v Speaker 0>This is the one that's gonna take some

00:06:05.390 --> 00:06:06.750
<v Speaker 0>arbitrary

00:06:06.830 --> 00:06:09.070
<v Speaker 0>equation from the user via the front end

00:06:09.070 --> 00:06:09.790
<v Speaker 0>application

00:06:10.345 --> 00:06:11.305
<v Speaker 0>and

00:06:12.825 --> 00:06:14.985
<v Speaker 0>parse it. Build a

00:06:15.465 --> 00:06:17.625
<v Speaker 0>build a bunch of tokens that describe what

00:06:17.625 --> 00:06:19.145
<v Speaker 0>that equation looks like, so those can be

00:06:19.145 --> 00:06:21.705
<v Speaker 0>divided into operations and sent off to the

00:06:21.705 --> 00:06:22.585
<v Speaker 0>relevant microservices.

00:06:23.520 --> 00:06:24.320
<v Speaker 0>Potentially,

00:06:24.320 --> 00:06:25.680
<v Speaker 0>if we build the DAG of this, we

00:06:25.680 --> 00:06:27.920
<v Speaker 0>can do this highly concurrent, which would be

00:06:27.920 --> 00:06:28.880
<v Speaker 0>very, very cool.

00:06:29.440 --> 00:06:31.200
<v Speaker 0>But that's the make it right part, not

00:06:31.200 --> 00:06:32.960
<v Speaker 0>the part we're looking at today. So it's

00:06:32.960 --> 00:06:34.880
<v Speaker 0>currently empty. It's just the hello world rust

00:06:34.880 --> 00:06:35.280
<v Speaker 0>application.

00:06:35.794 --> 00:06:37.475
<v Speaker 0>But I do think we'll do this one

00:06:37.475 --> 00:06:38.915
<v Speaker 0>together because I think it will be a

00:06:38.915 --> 00:06:40.035
<v Speaker 0>whole lot of fun.

00:06:41.475 --> 00:06:43.635
<v Speaker 0>We have config and content,

00:06:44.115 --> 00:06:44.915
<v Speaker 0>modules,

00:06:44.995 --> 00:06:45.795
<v Speaker 0>scripts,

00:06:46.035 --> 00:06:46.915
<v Speaker 0>static,

00:06:47.074 --> 00:06:47.794
<v Speaker 0>and templates.

00:06:48.920 --> 00:06:52.200
<v Speaker 0>These are all part of Bartholomew.

00:06:52.360 --> 00:06:55.240
<v Speaker 0>This is the content management and front end

00:06:55.240 --> 00:06:56.120
<v Speaker 0>application.

00:06:56.440 --> 00:06:58.360
<v Speaker 0>This is a river project. This is the

00:06:58.360 --> 00:06:59.880
<v Speaker 0>main entry point for the user.

00:07:00.775 --> 00:07:03.815
<v Speaker 0>It has a markdown rendering to the front

00:07:03.815 --> 00:07:04.854
<v Speaker 0>end application.

00:07:04.854 --> 00:07:07.095
<v Speaker 0>I've written some very good JavaScript to make

00:07:07.095 --> 00:07:09.255
<v Speaker 0>the API endpoints to the back end.

00:07:09.655 --> 00:07:11.574
<v Speaker 0>As I was doing this, I realized there's

00:07:11.574 --> 00:07:14.680
<v Speaker 0>actually nothing stopping me from yeah. I can

00:07:14.680 --> 00:07:15.720
<v Speaker 0>use which

00:07:15.720 --> 00:07:17.160
<v Speaker 0>has some cool characteristics,

00:07:17.160 --> 00:07:19.080
<v Speaker 0>and I don't need to build

00:07:19.160 --> 00:07:20.919
<v Speaker 0>like an NPM run build or anything like

00:07:20.919 --> 00:07:22.680
<v Speaker 0>like a lit like a with Next.

00:07:23.160 --> 00:07:25.720
<v Speaker 0>And because the web assembly module handles everything

00:07:25.720 --> 00:07:26.520
<v Speaker 0>for our service.

00:07:27.795 --> 00:07:29.635
<v Speaker 0>But honestly, if I don't want that and

00:07:29.635 --> 00:07:31.395
<v Speaker 0>I'm not that tied to that approach, there's

00:07:31.395 --> 00:07:33.315
<v Speaker 0>no reason that this application couldn't be an

00:07:33.315 --> 00:07:35.235
<v Speaker 0>XGS application because

00:07:35.475 --> 00:07:36.595
<v Speaker 0>works

00:07:36.995 --> 00:07:39.235
<v Speaker 0>with Spin's file server component.

00:07:40.050 --> 00:07:41.250
<v Speaker 0>So as long as I can do an

00:07:41.250 --> 00:07:43.490
<v Speaker 0>NPM run build on an XGS application and

00:07:43.490 --> 00:07:45.650
<v Speaker 0>get a disk folder, I can serve that

00:07:45.650 --> 00:07:48.370
<v Speaker 0>over the file server component as well. So

00:07:48.370 --> 00:07:50.050
<v Speaker 0>depending on what you're looking to do,

00:07:50.770 --> 00:07:53.490
<v Speaker 0>I started very simple today with Bartholomew and

00:07:53.490 --> 00:07:55.465
<v Speaker 0>you'll see just what I mean. But I

00:07:55.465 --> 00:07:56.825
<v Speaker 0>think the next version of this where we

00:07:56.825 --> 00:07:58.825
<v Speaker 0>sit down and do this right, we'll see,

00:07:58.825 --> 00:08:00.185
<v Speaker 0>okay. What is the

00:08:00.905 --> 00:08:02.985
<v Speaker 0>status quo front end web development? Is it

00:08:02.985 --> 00:08:05.065
<v Speaker 0>next? Is it SvelteKit? Is it something else?

00:08:05.065 --> 00:08:06.505
<v Speaker 0>Remix? Astro?

00:08:06.905 --> 00:08:09.385
<v Speaker 0>Let's use that. Build it into the build

00:08:09.545 --> 00:08:10.105
<v Speaker 0>the pipeline,

00:08:10.729 --> 00:08:12.889
<v Speaker 0>and actually deliver over the failed server component.

00:08:12.889 --> 00:08:14.330
<v Speaker 0>And I think that'll be really interesting. So

00:08:14.330 --> 00:08:15.770
<v Speaker 0>I'm looking forward to doing that.

00:08:18.009 --> 00:08:19.850
<v Speaker 0>Lastly, we have two services here in the

00:08:19.850 --> 00:08:22.250
<v Speaker 0>middle, math minus and math plus.

00:08:23.355 --> 00:08:25.835
<v Speaker 0>These are two individual services deployed as web

00:08:25.835 --> 00:08:26.955
<v Speaker 0>assembly modules.

00:08:28.235 --> 00:08:30.395
<v Speaker 0>Again, the code is not great, but one

00:08:30.395 --> 00:08:32.395
<v Speaker 0>handles the subtraction. I don't know why didn't

00:08:32.395 --> 00:08:34.875
<v Speaker 0>call it mass subtraction. One handles the subtraction

00:08:34.875 --> 00:08:36.875
<v Speaker 0>operation and the other one handles the addition

00:08:36.875 --> 00:08:37.914
<v Speaker 0>or some operation.

00:08:38.630 --> 00:08:41.110
<v Speaker 0>So that's that's our structure. I

00:08:41.750 --> 00:08:44.149
<v Speaker 0>think as I build more of these, this

00:08:44.149 --> 00:08:46.230
<v Speaker 0>is gonna become my kind of my my

00:08:46.230 --> 00:08:48.790
<v Speaker 0>standard layout and kind of put that web

00:08:48.790 --> 00:08:51.589
<v Speaker 0>application, the user facing one first, top level.

00:08:51.750 --> 00:08:53.670
<v Speaker 0>I guess I could nest it in some

00:08:53.670 --> 00:08:56.095
<v Speaker 0>way. Maybe I'll explore that when I do

00:08:56.095 --> 00:08:57.295
<v Speaker 0>next JS stuff.

00:08:57.775 --> 00:09:00.175
<v Speaker 0>And my only regret with this layout is

00:09:00.175 --> 00:09:02.015
<v Speaker 0>that I didn't put math minus and plus

00:09:02.015 --> 00:09:03.855
<v Speaker 0>into a services folder, but again, that would

00:09:03.855 --> 00:09:05.215
<v Speaker 0>be really easy to do. And in fact,

00:09:05.215 --> 00:09:06.815
<v Speaker 0>we could do that live on the stream

00:09:06.815 --> 00:09:08.830
<v Speaker 0>if anyone even wants to see what that

00:09:08.830 --> 00:09:10.030
<v Speaker 0>looks like and what I need to update

00:09:10.030 --> 00:09:12.190
<v Speaker 0>to make that work, just say hey and

00:09:12.190 --> 00:09:13.310
<v Speaker 0>we'll make that happen.

00:09:14.750 --> 00:09:18.510
<v Speaker 0>So let's take a look at Bartholomew first.

00:09:18.990 --> 00:09:20.350
<v Speaker 0>So I do have

00:09:20.990 --> 00:09:22.190
<v Speaker 0>my application here.

00:09:23.214 --> 00:09:26.255
<v Speaker 0>What I love about Bartholomew is that we

00:09:26.255 --> 00:09:28.255
<v Speaker 0>have a content directory,

00:09:28.895 --> 00:09:30.895
<v Speaker 0>which does path based routing

00:09:31.135 --> 00:09:33.055
<v Speaker 0>and markdown generation.

00:09:33.375 --> 00:09:34.975
<v Speaker 0>Now I am going

00:09:35.855 --> 00:09:38.335
<v Speaker 0>to delete all this code for a few

00:09:38.335 --> 00:09:40.550
<v Speaker 0>minute. Hopefully not lose that on my paste

00:09:40.550 --> 00:09:42.390
<v Speaker 0>buffer actually. Let's just do that.

00:09:42.870 --> 00:09:44.630
<v Speaker 0>And say hello Spin and we'll just change

00:09:44.630 --> 00:09:46.470
<v Speaker 0>this to be hello Rawkode

00:09:46.470 --> 00:09:47.270
<v Speaker 0>live.

00:09:48.150 --> 00:09:50.710
<v Speaker 0>So we'll save this. We're gonna come back

00:09:50.710 --> 00:09:53.030
<v Speaker 0>over here to warp and I'm going to

00:09:53.030 --> 00:09:54.390
<v Speaker 0>run a Spin

00:09:54.995 --> 00:09:56.915
<v Speaker 0>up and a follow all, which will just

00:09:56.915 --> 00:09:59.395
<v Speaker 0>give me the logs to my terminal.

00:10:00.115 --> 00:10:02.515
<v Speaker 0>You've seen this on the previous spin video

00:10:02.515 --> 00:10:03.955
<v Speaker 0>if you saw that. If not,

00:10:04.275 --> 00:10:05.235
<v Speaker 0>no problem.

00:10:05.795 --> 00:10:07.075
<v Speaker 0>And we can see here each of the

00:10:07.075 --> 00:10:09.769
<v Speaker 0>services that we have deployed. We've got Bartholomew

00:10:09.769 --> 00:10:12.329
<v Speaker 0>available on Port 3000, which actually takes a

00:10:12.329 --> 00:10:15.050
<v Speaker 0>wildcard group. It's gonna listen to all paths

00:10:15.769 --> 00:10:18.730
<v Speaker 0>on slash that don't match any other path.

00:10:19.449 --> 00:10:21.290
<v Speaker 0>We then have our static fail server as

00:10:21.290 --> 00:10:23.690
<v Speaker 0>part of Bartholomew, which listens to slash static,

00:10:23.825 --> 00:10:25.985
<v Speaker 0>also a wildcard. So anything after that will

00:10:25.985 --> 00:10:27.985
<v Speaker 0>be delivered via the static fail system.

00:10:28.225 --> 00:10:29.985
<v Speaker 0>This is the same module, which I think

00:10:29.985 --> 00:10:32.464
<v Speaker 0>and but I know will deliver a Next.

00:10:32.464 --> 00:10:34.385
<v Speaker 0>Js or any other front end application

00:10:34.545 --> 00:10:35.025
<v Speaker 0>pretty nicely.

00:10:36.040 --> 00:10:38.040
<v Speaker 0>We have the calculator which we're not using,

00:10:38.040 --> 00:10:40.520
<v Speaker 0>and then Math plus and Math minus. I've

00:10:40.520 --> 00:10:42.760
<v Speaker 0>hidden them under an API endpoint

00:10:42.760 --> 00:10:44.680
<v Speaker 0>with the Math plus and Math

00:10:44.840 --> 00:10:46.040
<v Speaker 0>math parameter

00:10:46.920 --> 00:10:47.720
<v Speaker 0>on the path.

00:10:48.215 --> 00:10:50.615
<v Speaker 0>Now these are not sophisticated endpoints. I'm using

00:10:50.615 --> 00:10:52.695
<v Speaker 0>the query URL

00:10:53.415 --> 00:10:55.815
<v Speaker 0>to parse the the arguments that we passed

00:10:55.815 --> 00:10:57.495
<v Speaker 0>to each operation. The reason I did it

00:10:57.495 --> 00:10:58.775
<v Speaker 0>that way is when we look at the

00:10:58.775 --> 00:11:01.175
<v Speaker 0>Grain code, you'll see I had a few

00:11:01.420 --> 00:11:03.900
<v Speaker 0>challenges because I'd never written Grain before

00:11:04.380 --> 00:11:06.460
<v Speaker 0>and not just my own inability to write

00:11:06.460 --> 00:11:07.180
<v Speaker 0>Grain but

00:11:07.740 --> 00:11:10.060
<v Speaker 0>the standard library is still very early with

00:11:10.060 --> 00:11:11.180
<v Speaker 0>Grain.

00:11:11.260 --> 00:11:12.220
<v Speaker 0>I focused

00:11:12.220 --> 00:11:14.965
<v Speaker 0>on consistency of the parsing techniques rather than

00:11:14.965 --> 00:11:17.045
<v Speaker 0>in the Rust ecosystem jumping off, grabs and

00:11:17.045 --> 00:11:18.725
<v Speaker 0>creates, doing some proper parsing. Was like, you

00:11:18.725 --> 00:11:20.005
<v Speaker 0>know what? We'll just keep it crude on

00:11:20.005 --> 00:11:22.165
<v Speaker 0>both and then it's gonna be very similar.

00:11:23.445 --> 00:11:25.045
<v Speaker 0>So we can pop open our browser.

00:11:27.080 --> 00:11:28.600
<v Speaker 0>You can see I've already tried to have

00:11:28.600 --> 00:11:30.200
<v Speaker 0>local host on 3,000.

00:11:32.200 --> 00:11:33.320
<v Speaker 0>And here we go.

00:11:33.880 --> 00:11:36.280
<v Speaker 0>Let's zoom in. This is the standard

00:11:36.840 --> 00:11:37.880
<v Speaker 0>Bartholomew

00:11:37.880 --> 00:11:40.280
<v Speaker 0>theme and slots. We've got a sidebar. We've

00:11:40.280 --> 00:11:42.875
<v Speaker 0>some length. We've got the kind of attributions

00:11:42.875 --> 00:11:45.115
<v Speaker 0>here and then we've got Hello Rawkode live.

00:11:45.755 --> 00:11:47.515
<v Speaker 0>We could make changes to this if we

00:11:47.515 --> 00:11:49.435
<v Speaker 0>really wanted to. We can go into the

00:11:49.435 --> 00:11:50.155
<v Speaker 0>template.

00:11:50.715 --> 00:11:51.995
<v Speaker 0>We can look at main

00:11:52.235 --> 00:11:53.995
<v Speaker 0>and we can start to change this up.

00:11:54.030 --> 00:11:56.430
<v Speaker 0>This is gonna feel very similar to Hugo.

00:11:56.430 --> 00:11:57.950
<v Speaker 0>If you've used Hugo before and you come

00:11:57.950 --> 00:12:00.190
<v Speaker 0>from the go background and the go ecosystem,

00:12:00.830 --> 00:12:03.070
<v Speaker 0>we have templates, they have slots, we inject

00:12:03.070 --> 00:12:05.230
<v Speaker 0>stuff into the slots, we deliver a website.

00:12:05.470 --> 00:12:05.950
<v Speaker 0>That's it.

00:12:07.695 --> 00:12:09.535
<v Speaker 0>Simple. Right? Cool.

00:12:09.695 --> 00:12:12.335
<v Speaker 0>Now, I'm gonna bring back all of my

00:12:12.335 --> 00:12:13.695
<v Speaker 0>horrendous code.

00:12:18.175 --> 00:12:19.455
<v Speaker 0>And we're not gonna look at it just

00:12:19.455 --> 00:12:19.695
<v Speaker 0>yet.

00:12:21.000 --> 00:12:23.400
<v Speaker 0>Now, when we ran, spin up,

00:12:23.720 --> 00:12:25.560
<v Speaker 0>oh, we've got our logs. We can follow

00:12:25.560 --> 00:12:27.400
<v Speaker 0>along with everything that's happening too.

00:12:29.560 --> 00:12:31.560
<v Speaker 0>Hey. Russell says, more suppose

00:12:32.280 --> 00:12:34.520
<v Speaker 0>I can't speak to you. More space for

00:12:34.520 --> 00:12:36.040
<v Speaker 0>code, the better when you dive into it.

00:12:36.415 --> 00:12:38.335
<v Speaker 0>Yeah. I I think so. I'm looking forward

00:12:38.335 --> 00:12:39.455
<v Speaker 0>to, you know,

00:12:39.855 --> 00:12:41.375
<v Speaker 0>I shouldn't really move it now, but, you

00:12:41.375 --> 00:12:42.495
<v Speaker 0>know, been able to make this a bit

00:12:42.495 --> 00:12:44.255
<v Speaker 0>bigger, pull it over my face and not

00:12:44.255 --> 00:12:46.495
<v Speaker 0>lose too much, but there's still some tweaks

00:12:46.495 --> 00:12:47.215
<v Speaker 0>that need to be happening.

00:12:50.770 --> 00:12:52.130
<v Speaker 0>Cool. Yeah. So

00:12:52.450 --> 00:12:54.370
<v Speaker 0>we also have these other routes. So what

00:12:54.370 --> 00:12:56.210
<v Speaker 0>do those look like? Well, when we run

00:12:56.210 --> 00:12:57.650
<v Speaker 0>spin up, we get everything.

00:12:58.290 --> 00:13:00.210
<v Speaker 0>So we can pop open a new terminal

00:13:00.530 --> 00:13:03.090
<v Speaker 0>and we can run curl v API.

00:13:04.445 --> 00:13:05.565
<v Speaker 0>Fast.

00:13:05.965 --> 00:13:07.485
<v Speaker 0>Math minus,

00:13:08.205 --> 00:13:09.805
<v Speaker 0>and we'll get a 500.

00:13:09.885 --> 00:13:12.365
<v Speaker 0>Now my error handling is not great, has

00:13:12.365 --> 00:13:14.685
<v Speaker 0>to be better, but I know because I

00:13:14.685 --> 00:13:17.005
<v Speaker 0>wrote it that if we pass a question

00:13:17.005 --> 00:13:18.605
<v Speaker 0>mark for a query string

00:13:18.860 --> 00:13:21.500
<v Speaker 0>and two integers separated by a comma,

00:13:21.820 --> 00:13:24.380
<v Speaker 0>worst API ever of course. But I didn't

00:13:24.380 --> 00:13:26.460
<v Speaker 0>want to handle JSON parsing

00:13:26.460 --> 00:13:28.540
<v Speaker 0>and Grain because guess what? There is no

00:13:28.540 --> 00:13:31.100
<v Speaker 0>JSON parsing and Grain yet, which would make

00:13:31.100 --> 00:13:32.460
<v Speaker 0>you wonder why did I use Grain?

00:13:34.305 --> 00:13:35.505
<v Speaker 0>I was curious.

00:13:36.625 --> 00:13:38.545
<v Speaker 0>Probably won't stay in it for much longer.

00:13:38.705 --> 00:13:39.425
<v Speaker 0>However,

00:13:39.904 --> 00:13:41.665
<v Speaker 0>if we do a five and two,

00:13:42.065 --> 00:13:44.545
<v Speaker 0>we get a result of three.

00:13:45.024 --> 00:13:46.385
<v Speaker 0>So this is me

00:13:47.780 --> 00:13:49.540
<v Speaker 0>actually printing

00:13:49.860 --> 00:13:51.380
<v Speaker 0>JSON from

00:13:51.380 --> 00:13:55.540
<v Speaker 0>the Grain language, hence the extremely weird formatting.

00:13:56.100 --> 00:13:57.860
<v Speaker 0>With that being said, I think we should

00:13:57.860 --> 00:13:59.300
<v Speaker 0>look at the Grain code.

00:13:59.780 --> 00:14:02.180
<v Speaker 0>So let's pop open Math minus

00:14:02.485 --> 00:14:04.325
<v Speaker 0>and we have our main dot GR.

00:14:04.565 --> 00:14:05.205
<v Speaker 0>Now

00:14:05.605 --> 00:14:08.165
<v Speaker 0>there's a lot to love about Grain and

00:14:08.165 --> 00:14:11.765
<v Speaker 0>that is a truly WebAssembly native language and

00:14:11.765 --> 00:14:13.845
<v Speaker 0>that the only target is WebAssembly.

00:14:14.610 --> 00:14:16.930
<v Speaker 0>But it's a very early language as well.

00:14:16.930 --> 00:14:18.850
<v Speaker 0>It's currently on 0.5

00:14:18.850 --> 00:14:19.810
<v Speaker 0>I think.

00:14:20.209 --> 00:14:22.450
<v Speaker 0>There's lots of things just don't exist in

00:14:22.450 --> 00:14:24.610
<v Speaker 0>the ecosystem but you know what? It was

00:14:24.610 --> 00:14:26.690
<v Speaker 0>it was a whole lot of fun learning

00:14:26.690 --> 00:14:28.290
<v Speaker 0>the language and playing with it and I

00:14:28.290 --> 00:14:30.050
<v Speaker 0>actually I'm really excited to where it's gonna

00:14:30.050 --> 00:14:30.450
<v Speaker 0>be

00:14:30.975 --> 00:14:33.215
<v Speaker 0>in six months and twelve months time.

00:14:33.695 --> 00:14:35.375
<v Speaker 0>But not something I would ship to production.

00:14:35.375 --> 00:14:36.255
<v Speaker 0>Not today.

00:14:37.535 --> 00:14:38.095
<v Speaker 0>So

00:14:38.335 --> 00:14:41.295
<v Speaker 0>borrows a lot from the JavaScript

00:14:41.295 --> 00:14:43.935
<v Speaker 0>ecosystem and the Node. Js ecosystem and we

00:14:43.935 --> 00:14:45.695
<v Speaker 0>have import statements which then have a from

00:14:45.695 --> 00:14:46.335
<v Speaker 0>on the end.

00:14:47.750 --> 00:14:49.509
<v Speaker 0>We can, if we wish,

00:14:49.910 --> 00:14:51.509
<v Speaker 0>break this down and say that we only

00:14:51.509 --> 00:14:53.509
<v Speaker 0>want the two list function, but

00:14:53.829 --> 00:14:54.949
<v Speaker 0>based on the way that I have all

00:14:54.949 --> 00:14:57.750
<v Speaker 0>the code below, we're importing the entire package

00:14:57.990 --> 00:14:59.509
<v Speaker 0>so that we can call the functions and

00:14:59.509 --> 00:15:00.310
<v Speaker 0>properties of it.

00:15:01.555 --> 00:15:03.714
<v Speaker 0>I define a record, we're not using the

00:15:03.714 --> 00:15:05.954
<v Speaker 0>record, again, I was trying to marshal this

00:15:05.954 --> 00:15:07.954
<v Speaker 0>to JSON, but it doesn't really exist yet,

00:15:07.954 --> 00:15:09.475
<v Speaker 0>but it was fun to define a record.

00:15:09.475 --> 00:15:10.755
<v Speaker 0>We just say record and we give it

00:15:10.755 --> 00:15:12.355
<v Speaker 0>a name and then we describe it much

00:15:12.355 --> 00:15:14.595
<v Speaker 0>like a JSON object in JavaScript,

00:15:14.915 --> 00:15:16.035
<v Speaker 0>which I thought was quite nice.

00:15:16.680 --> 00:15:18.840
<v Speaker 0>And even though it's a really early language,

00:15:19.000 --> 00:15:21.720
<v Speaker 0>with Grain, we do get decent

00:15:21.720 --> 00:15:24.520
<v Speaker 0>integration with Versus Code. So we can kinda

00:15:24.520 --> 00:15:27.160
<v Speaker 0>see the same information here, but at least

00:15:27.160 --> 00:15:29.240
<v Speaker 0>it shows me that an LSP is trying

00:15:29.240 --> 00:15:32.005
<v Speaker 0>its best. So maybe more is gonna come

00:15:32.005 --> 00:15:32.645
<v Speaker 0>soon.

00:15:33.445 --> 00:15:35.205
<v Speaker 0>Down here, we can actually see the Rx

00:15:35.205 --> 00:15:36.965
<v Speaker 0>is an array of string, which we wouldn't

00:15:36.965 --> 00:15:39.525
<v Speaker 0>normally know. So the LSP did very well

00:15:39.525 --> 00:15:40.085
<v Speaker 0>there.

00:15:40.885 --> 00:15:44.005
<v Speaker 0>And what I really liked was throwing around

00:15:44.750 --> 00:15:47.470
<v Speaker 0>expect functions on results and options,

00:15:47.710 --> 00:15:49.550
<v Speaker 0>something that we can do in Rust,

00:15:50.029 --> 00:15:52.110
<v Speaker 0>but in the Grain language. So here I'm

00:15:52.110 --> 00:15:52.990
<v Speaker 0>actually saying,

00:15:53.550 --> 00:15:55.150
<v Speaker 0>we want to get the arguments.

00:15:55.630 --> 00:15:56.990
<v Speaker 0>So we're using argv

00:15:57.185 --> 00:15:59.824
<v Speaker 0>and this grain model or grain code, I'm

00:15:59.824 --> 00:16:01.505
<v Speaker 0>not sure what we call it and

00:16:01.505 --> 00:16:03.505
<v Speaker 0>if we don't get what we expect we're

00:16:03.505 --> 00:16:05.425
<v Speaker 0>gonna fail with failed to parse arguments

00:16:05.505 --> 00:16:07.425
<v Speaker 0>and what we're trying to actually do here

00:16:07.425 --> 00:16:09.904
<v Speaker 0>is pull out argv and we expect an

00:16:09.904 --> 00:16:10.545
<v Speaker 0>array of string.

00:16:11.370 --> 00:16:13.530
<v Speaker 0>So as long as we get some array

00:16:13.530 --> 00:16:14.810
<v Speaker 0>of strings of arguments,

00:16:15.210 --> 00:16:16.730
<v Speaker 0>we will pass the first check.

00:16:18.170 --> 00:16:20.410
<v Speaker 0>We then wanna pull them out. I've just

00:16:20.410 --> 00:16:22.810
<v Speaker 0>called this indices, but we're doing a

00:16:23.050 --> 00:16:24.890
<v Speaker 0>turn this array into a list

00:16:25.315 --> 00:16:27.795
<v Speaker 0>and then we're using the list semantics rather

00:16:27.795 --> 00:16:29.715
<v Speaker 0>than the array semantics that probably could just

00:16:29.715 --> 00:16:31.315
<v Speaker 0>have used array dot pop and then to

00:16:31.315 --> 00:16:32.835
<v Speaker 0>list on that. However,

00:16:33.155 --> 00:16:34.915
<v Speaker 0>I did the list dot drop which drops

00:16:34.915 --> 00:16:36.115
<v Speaker 0>one element from the list.

00:16:37.790 --> 00:16:40.430
<v Speaker 0>Next, I'm getting the equation,

00:16:40.750 --> 00:16:41.550
<v Speaker 0>which is

00:16:42.589 --> 00:16:44.430
<v Speaker 0>not really what we're doing. However, it'll do

00:16:44.430 --> 00:16:46.430
<v Speaker 0>for now. And all I'm doing here is

00:16:46.430 --> 00:16:49.470
<v Speaker 0>saying that I wanna pull out the first

00:16:49.470 --> 00:16:51.389
<v Speaker 0>value of the list. So I'm using list

00:16:51.389 --> 00:16:51.790
<v Speaker 0>dot n.

00:16:54.085 --> 00:16:55.365
<v Speaker 0>We this

00:16:56.485 --> 00:16:57.925
<v Speaker 0>actually gives me

00:16:58.805 --> 00:16:59.765
<v Speaker 0>something

00:16:59.765 --> 00:17:00.565
<v Speaker 0>like this.

00:17:02.805 --> 00:17:03.605
<v Speaker 0>Next,

00:17:03.765 --> 00:17:05.845
<v Speaker 0>we do a string dot split on the

00:17:05.845 --> 00:17:08.220
<v Speaker 0>comma and then array to list, we're pulling

00:17:08.220 --> 00:17:10.060
<v Speaker 0>it back to a list and then we're

00:17:10.060 --> 00:17:12.940
<v Speaker 0>using pars and on the nth element get

00:17:12.940 --> 00:17:15.260
<v Speaker 0>out. So these two code boxes are the

00:17:15.260 --> 00:17:17.260
<v Speaker 0>exact same. As you can tell,

00:17:17.740 --> 00:17:19.340
<v Speaker 0>this is a lot harder than Grain than

00:17:19.340 --> 00:17:20.804
<v Speaker 0>it would be in any other language, but

00:17:20.804 --> 00:17:22.404
<v Speaker 0>I felt committed at this point and I

00:17:22.404 --> 00:17:24.644
<v Speaker 0>wanted to see what this looked like. Because

00:17:24.644 --> 00:17:26.724
<v Speaker 0>when we use and build spin applications,

00:17:27.284 --> 00:17:29.445
<v Speaker 0>we could use any language that compels the

00:17:29.445 --> 00:17:30.404
<v Speaker 0>web assembly.

00:17:30.644 --> 00:17:32.644
<v Speaker 0>And that's fun. Right? I could have used

00:17:32.644 --> 00:17:34.325
<v Speaker 0>Swift, it'd probably been two lines of code.

00:17:34.325 --> 00:17:35.524
<v Speaker 0>I could have used Rust, it would have

00:17:35.524 --> 00:17:37.580
<v Speaker 0>been four or five lines of Could've used

00:17:37.580 --> 00:17:40.460
<v Speaker 0>Java, Scala, Clojure, any JVM language, any dot

00:17:40.460 --> 00:17:42.059
<v Speaker 0>net language, etcetera. However,

00:17:42.380 --> 00:17:43.900
<v Speaker 0>I was committed to this point.

00:17:44.540 --> 00:17:46.620
<v Speaker 0>So we're doing number dot parse in and

00:17:47.180 --> 00:17:49.260
<v Speaker 0>we're doing an option expect where we expect

00:17:49.260 --> 00:17:50.860
<v Speaker 0>to get some and to do back from

00:17:50.860 --> 00:17:52.220
<v Speaker 0>the center result expect

00:17:52.755 --> 00:17:53.635
<v Speaker 0>wrapping it.

00:17:54.035 --> 00:17:56.115
<v Speaker 0>Once we've done all the heavy lifting there

00:17:56.115 --> 00:17:58.195
<v Speaker 0>of parsing two things on the command line

00:17:58.195 --> 00:18:00.195
<v Speaker 0>or query string, we have to print the

00:18:00.195 --> 00:18:02.755
<v Speaker 0>headers, which is content type application JSON and

00:18:02.755 --> 00:18:04.595
<v Speaker 0>then I'm manually printing the JSON.

00:18:06.220 --> 00:18:08.380
<v Speaker 0>Now the challenge and why this had to

00:18:08.380 --> 00:18:08.859
<v Speaker 0>be

00:18:09.740 --> 00:18:11.259
<v Speaker 0>three print statements

00:18:11.260 --> 00:18:12.460
<v Speaker 0>is really funny.

00:18:12.860 --> 00:18:15.419
<v Speaker 0>It's because I couldn't do interpolation

00:18:15.419 --> 00:18:16.780
<v Speaker 0>or even concatenation

00:18:16.780 --> 00:18:17.340
<v Speaker 0>here

00:18:17.644 --> 00:18:20.445
<v Speaker 0>because there's no way to get a string

00:18:20.445 --> 00:18:22.284
<v Speaker 0>from a number in green. At least I

00:18:22.284 --> 00:18:23.804
<v Speaker 0>could not find out how to convert a

00:18:23.804 --> 00:18:24.764
<v Speaker 0>number to a string.

00:18:25.245 --> 00:18:27.565
<v Speaker 0>So instead of having a single print statement,

00:18:27.644 --> 00:18:29.485
<v Speaker 0>we had to have three and you can't

00:18:29.485 --> 00:18:31.565
<v Speaker 0>print without printing a new line in green.

00:18:31.565 --> 00:18:33.780
<v Speaker 0>At least I couldn't work it out, Which

00:18:33.780 --> 00:18:35.700
<v Speaker 0>is why we have this very awkwardly looking

00:18:35.700 --> 00:18:36.820
<v Speaker 0>JSON syntax.

00:18:36.820 --> 00:18:37.620
<v Speaker 0>However,

00:18:38.420 --> 00:18:39.940
<v Speaker 0>we don't need to save this.

00:18:40.660 --> 00:18:42.820
<v Speaker 0>As you can tell from here,

00:18:43.780 --> 00:18:44.420
<v Speaker 0>it works.

00:18:45.885 --> 00:18:48.285
<v Speaker 0>We do do we do pass five comma

00:18:48.285 --> 00:18:50.765
<v Speaker 0>two, we get a subtraction and the value

00:18:50.765 --> 00:18:52.685
<v Speaker 0>of two or the difference depending on what

00:18:52.685 --> 00:18:53.645
<v Speaker 0>you wanna call it.

00:18:55.325 --> 00:18:58.525
<v Speaker 0>In the same vein, we can run math

00:18:58.525 --> 00:18:58.925
<v Speaker 0>plus.

00:18:59.470 --> 00:19:01.470
<v Speaker 0>And we can say five and two and

00:19:01.470 --> 00:19:03.630
<v Speaker 0>we get result dot seven or result equals

00:19:03.630 --> 00:19:06.190
<v Speaker 0>seven and a proper JSON string with no

00:19:06.190 --> 00:19:07.150
<v Speaker 0>arbitrary

00:19:07.150 --> 00:19:09.950
<v Speaker 0>random new lines. And why is this? Well,

00:19:09.950 --> 00:19:11.150
<v Speaker 0>because our plus

00:19:11.310 --> 00:19:12.030
<v Speaker 0>function

00:19:12.590 --> 00:19:14.190
<v Speaker 0>is implemented in Rust.

00:19:15.845 --> 00:19:16.725
<v Speaker 0>Here,

00:19:16.725 --> 00:19:18.805
<v Speaker 0>we are using the Spin SDK, which is

00:19:18.805 --> 00:19:20.405
<v Speaker 0>quite nice. We are able to use a

00:19:20.405 --> 00:19:22.965
<v Speaker 0>procedural macro around our function, which says this

00:19:22.965 --> 00:19:24.645
<v Speaker 0>is the entry point or application that handles

00:19:24.645 --> 00:19:26.005
<v Speaker 0>all the glue.

00:19:26.245 --> 00:19:28.645
<v Speaker 0>We grab the URI query. We do a

00:19:28.645 --> 00:19:30.770
<v Speaker 0>string split. We do a map, convert it

00:19:30.770 --> 00:19:32.770
<v Speaker 0>to a u 64 n and then we

00:19:32.770 --> 00:19:33.649
<v Speaker 0>sum it up.

00:19:34.610 --> 00:19:37.090
<v Speaker 0>A lot nicer than the green approach.

00:19:37.890 --> 00:19:39.809
<v Speaker 0>Still a little bit awkward.

00:19:40.529 --> 00:19:42.049
<v Speaker 0>I shouldn't really need to parse the query

00:19:42.049 --> 00:19:43.330
<v Speaker 0>string. I should be able to pass in

00:19:43.330 --> 00:19:46.185
<v Speaker 0>a JSON body, serialize that out. That would

00:19:46.185 --> 00:19:48.185
<v Speaker 0>all work just fine but because I did

00:19:48.185 --> 00:19:49.465
<v Speaker 0>that the grain way,

00:19:50.105 --> 00:19:51.304
<v Speaker 0>that is what I went with.

00:19:52.345 --> 00:19:54.905
<v Speaker 0>From here, we're just doing a JSON object

00:19:54.905 --> 00:19:56.905
<v Speaker 0>of result sum and then spend it back

00:19:56.905 --> 00:19:57.784
<v Speaker 0>out here

00:19:58.025 --> 00:19:59.545
<v Speaker 0>with the response builder.

00:20:00.720 --> 00:20:02.799
<v Speaker 0>Much nicer. This is easier code to test.

00:20:02.799 --> 00:20:04.320
<v Speaker 0>I could extrapolate some of this to functions

00:20:04.320 --> 00:20:05.919
<v Speaker 0>that I really wanted to handle the query

00:20:05.919 --> 00:20:07.360
<v Speaker 0>string and the sums.

00:20:07.360 --> 00:20:08.239
<v Speaker 0>But however,

00:20:08.559 --> 00:20:10.960
<v Speaker 0>for a simple rust function and under 25

00:20:10.960 --> 00:20:12.640
<v Speaker 0>lines of code, this works really well.

00:20:15.285 --> 00:20:15.925
<v Speaker 0>So

00:20:16.405 --> 00:20:18.965
<v Speaker 0>we have two a two API endpoints that

00:20:18.965 --> 00:20:20.965
<v Speaker 0>work. They do addition and subtraction,

00:20:20.965 --> 00:20:23.125
<v Speaker 0>and we have a website. Well, let's take

00:20:23.125 --> 00:20:24.725
<v Speaker 0>a look at the website.

00:20:26.005 --> 00:20:28.290
<v Speaker 0>If I jump back over here and we

00:20:28.290 --> 00:20:28.930
<v Speaker 0>just

00:20:29.170 --> 00:20:31.890
<v Speaker 0>spin this back up again. And that's just

00:20:31.890 --> 00:20:34.050
<v Speaker 0>because I was messing around with HTML and

00:20:34.050 --> 00:20:34.850
<v Speaker 0>Bartholomew.

00:20:34.850 --> 00:20:36.850
<v Speaker 0>There's no live hot reloading. I

00:20:37.090 --> 00:20:39.170
<v Speaker 0>don't think so. Maybe that's a flag.

00:20:39.890 --> 00:20:41.330
<v Speaker 0>But if we jump back to the web

00:20:41.330 --> 00:20:41.890
<v Speaker 0>browser,

00:20:44.985 --> 00:20:46.665
<v Speaker 0>we have this. So,

00:20:48.505 --> 00:20:50.184
<v Speaker 0>hey, my lease just went out.

00:20:52.585 --> 00:20:55.065
<v Speaker 0>Okay. We have this. I've got a form

00:20:55.065 --> 00:20:57.225
<v Speaker 0>where we pass in number 10

00:20:57.870 --> 00:20:59.710
<v Speaker 0>and another number

00:21:00.030 --> 00:21:01.230
<v Speaker 0>76.

00:21:01.630 --> 00:21:03.150
<v Speaker 0>And we have this drop down where we

00:21:03.150 --> 00:21:05.950
<v Speaker 0>can see whether we want addition or subtraction.

00:21:06.270 --> 00:21:08.430
<v Speaker 0>So let's do addition first and we hit

00:21:08.430 --> 00:21:10.190
<v Speaker 0>submit and we get 86.

00:21:10.934 --> 00:21:13.095
<v Speaker 0>If I swap this round and do five

00:21:13.095 --> 00:21:14.294
<v Speaker 0>minus 12,

00:21:17.735 --> 00:21:19.254
<v Speaker 0>we get minus seven.

00:21:20.054 --> 00:21:20.774
<v Speaker 0>Now,

00:21:21.174 --> 00:21:22.695
<v Speaker 0>when we build this right

00:21:23.050 --> 00:21:25.050
<v Speaker 0>and we continue to, you know, make this

00:21:25.050 --> 00:21:27.370
<v Speaker 0>distributed calculator a bit more useful. What I

00:21:27.370 --> 00:21:28.890
<v Speaker 0>actually wanna be able to do

00:21:29.530 --> 00:21:30.250
<v Speaker 0>is,

00:21:30.490 --> 00:21:33.049
<v Speaker 0>you know, do the bot mass thing. Like,

00:21:33.690 --> 00:21:35.210
<v Speaker 0>what happens if we have

00:21:35.850 --> 00:21:36.810
<v Speaker 0>proper queries?

00:21:38.005 --> 00:21:40.085
<v Speaker 0>And what's gonna happen is the calculate function

00:21:40.085 --> 00:21:42.085
<v Speaker 0>will parse all this, build a token of

00:21:42.085 --> 00:21:43.845
<v Speaker 0>it, ship them off to the services, bring

00:21:43.845 --> 00:21:45.764
<v Speaker 0>it back and spit out the result.

00:21:46.005 --> 00:21:47.525
<v Speaker 0>That's where we're gonna be in a couple

00:21:47.525 --> 00:21:49.044
<v Speaker 0>of weeks. But for today,

00:21:49.684 --> 00:21:54.325
<v Speaker 0>you're getting 56 or fifty five fifty six

00:21:53.280 --> 00:21:54.400
<v Speaker 0>minus 12.

00:21:55.920 --> 00:21:57.440
<v Speaker 0>What does this look like from a code

00:21:57.440 --> 00:21:59.520
<v Speaker 0>point of view? Well, this is pretty standard

00:21:59.520 --> 00:22:01.200
<v Speaker 0>HTML and JavaScript.

00:22:01.520 --> 00:22:03.280
<v Speaker 0>Although it's my version of standard, it's not

00:22:03.280 --> 00:22:04.960
<v Speaker 0>a front end developer, so it's not exactly

00:22:04.960 --> 00:22:05.360
<v Speaker 0>nice.

00:22:05.985 --> 00:22:08.465
<v Speaker 0>However, inside of our index dot m d,

00:22:08.465 --> 00:22:09.904
<v Speaker 0>we can embed

00:22:09.985 --> 00:22:12.865
<v Speaker 0>script tags and other HTML tags. We're not

00:22:12.865 --> 00:22:13.745
<v Speaker 0>constrained,

00:22:13.745 --> 00:22:15.745
<v Speaker 0>but only markdown, which I thought was quite

00:22:15.745 --> 00:22:16.304
<v Speaker 0>nice.

00:22:17.345 --> 00:22:19.184
<v Speaker 0>So we define a really simple form,

00:22:20.050 --> 00:22:22.610
<v Speaker 0>which has an idea form. We turn off

00:22:22.610 --> 00:22:24.370
<v Speaker 0>the default submit handler so that we don't

00:22:24.370 --> 00:22:26.130
<v Speaker 0>refresh the page. We do that with on

00:22:26.130 --> 00:22:27.890
<v Speaker 0>submit equals return false.

00:22:28.210 --> 00:22:30.530
<v Speaker 0>We have an input for property one and

00:22:30.530 --> 00:22:32.610
<v Speaker 0>property two and then a select for the

00:22:32.610 --> 00:22:33.090
<v Speaker 0>operation.

00:22:34.975 --> 00:22:36.815
<v Speaker 0>That drop down should be between the values

00:22:36.815 --> 00:22:38.254
<v Speaker 0>for your exabyte.

00:22:39.855 --> 00:22:41.934
<v Speaker 0>I know it's not nice. I know. I

00:22:41.934 --> 00:22:43.934
<v Speaker 0>know. We're gonna make it right just not

00:22:43.934 --> 00:22:44.975
<v Speaker 0>in today's video.

00:22:45.375 --> 00:22:46.815
<v Speaker 0>And then we have a submit function.

00:22:47.269 --> 00:22:49.110
<v Speaker 0>I can't even spell results. So why don't

00:22:49.110 --> 00:22:51.190
<v Speaker 0>we fix that while we're here? And then

00:22:51.190 --> 00:22:53.750
<v Speaker 0>we have this empty span and paragraph where

00:22:53.750 --> 00:22:55.830
<v Speaker 0>we're gonna push the result from the response

00:22:55.830 --> 00:22:56.949
<v Speaker 0>of the API.

00:22:58.470 --> 00:23:00.470
<v Speaker 0>Next, we open up some script tags. We're

00:23:00.470 --> 00:23:02.549
<v Speaker 0>just defining a function to submit the form.

00:23:02.855 --> 00:23:05.095
<v Speaker 0>Now because this is just in the browser,

00:23:05.415 --> 00:23:06.534
<v Speaker 0>Bartholomew

00:23:06.855 --> 00:23:09.255
<v Speaker 0>as web assembly and that the server runs

00:23:09.255 --> 00:23:11.655
<v Speaker 0>on web assembly, it generates the HTML, but

00:23:11.655 --> 00:23:14.054
<v Speaker 0>the HTML still runs in your browser.

00:23:14.215 --> 00:23:15.735
<v Speaker 0>So we have access to all the browser

00:23:15.735 --> 00:23:16.215
<v Speaker 0>APIs,

00:23:17.230 --> 00:23:19.870
<v Speaker 0>which means we can do a fetch call.

00:23:19.870 --> 00:23:22.029
<v Speaker 0>We use the fetch API and we're just

00:23:22.029 --> 00:23:24.509
<v Speaker 0>doing some local run to slash API slash

00:23:24.509 --> 00:23:25.229
<v Speaker 0>math

00:23:25.389 --> 00:23:26.749
<v Speaker 0>with a horrible

00:23:26.990 --> 00:23:29.710
<v Speaker 0>operator to flip the operation from plus to

00:23:29.710 --> 00:23:31.230
<v Speaker 0>minus. Of course, we need to make that

00:23:31.230 --> 00:23:33.925
<v Speaker 0>better. Yes, Russell. It is tech debt.

00:23:34.325 --> 00:23:35.685
<v Speaker 0>Hold on. Let me pop that on the

00:23:35.685 --> 00:23:36.245
<v Speaker 0>screen.

00:23:36.645 --> 00:23:37.365
<v Speaker 0>Wanna

00:23:37.605 --> 00:23:38.885
<v Speaker 0>hide your critique.

00:23:39.925 --> 00:23:40.885
<v Speaker 0>I'll

00:23:40.885 --> 00:23:42.485
<v Speaker 0>try not to make it too small. There

00:23:42.485 --> 00:23:44.725
<v Speaker 0>we go. It is tech debt, but we're

00:23:44.725 --> 00:23:45.365
<v Speaker 0>gonna make it right.

00:23:46.940 --> 00:23:48.540
<v Speaker 0>So we send this off. We say that

00:23:48.540 --> 00:23:50.540
<v Speaker 0>this is a JSON response by using the

00:23:50.540 --> 00:23:51.499
<v Speaker 0>first promise

00:23:51.900 --> 00:23:54.620
<v Speaker 0>then we pull it out here. So I've

00:23:54.620 --> 00:23:57.020
<v Speaker 0>got some really crude console dot logs, make

00:23:57.020 --> 00:23:58.539
<v Speaker 0>sure that my thing was working.

00:23:58.780 --> 00:24:00.780
<v Speaker 0>And then we're using result dot enter dot

00:24:00.780 --> 00:24:01.980
<v Speaker 0>enter HTML,

00:24:02.375 --> 00:24:04.135
<v Speaker 0>set the data as a result.

00:24:05.575 --> 00:24:07.575
<v Speaker 0>Next, we just hook up the form listener.

00:24:07.575 --> 00:24:09.095
<v Speaker 0>So we're grabbing the form by the ID

00:24:09.095 --> 00:24:10.535
<v Speaker 0>and adding the event listener.

00:24:11.015 --> 00:24:12.535
<v Speaker 0>It was when I was putting all this

00:24:12.535 --> 00:24:15.500
<v Speaker 0>HTML and JavaScript together that I realized we

00:24:15.500 --> 00:24:17.260
<v Speaker 0>have really good frameworks for this. And if

00:24:17.260 --> 00:24:18.860
<v Speaker 0>we wanna build interactive

00:24:18.860 --> 00:24:20.220
<v Speaker 0>client side applications,

00:24:20.860 --> 00:24:22.700
<v Speaker 0>I would probably use SvelteKit or I would

00:24:22.700 --> 00:24:24.700
<v Speaker 0>use Next or Astro or

00:24:25.180 --> 00:24:26.940
<v Speaker 0>Remix. I think that's the four ones that

00:24:26.940 --> 00:24:29.180
<v Speaker 0>I played with and like to some degree.

00:24:29.180 --> 00:24:30.860
<v Speaker 0>At least they make my JavaScript not terrible.

00:24:32.035 --> 00:24:33.315
<v Speaker 0>And I was like, well,

00:24:33.555 --> 00:24:35.395
<v Speaker 0>I wonder if I can deliver that like

00:24:35.395 --> 00:24:35.955
<v Speaker 0>this.

00:24:36.275 --> 00:24:39.075
<v Speaker 0>So that's my next improvement. And in fact,

00:24:39.075 --> 00:24:40.835
<v Speaker 0>the next time we do the stream, we'll

00:24:40.835 --> 00:24:44.275
<v Speaker 0>be hooking in an existing JavaScript framework

00:24:44.515 --> 00:24:45.715
<v Speaker 0>with a build pipeline

00:24:45.930 --> 00:24:48.650
<v Speaker 0>and having that deployed with spend fail server

00:24:48.650 --> 00:24:51.050
<v Speaker 0>API or web assembly module.

00:24:51.610 --> 00:24:53.370
<v Speaker 0>So that's the next step. Then

00:24:53.770 --> 00:24:55.610
<v Speaker 0>we build the calculate service. And then we'll

00:24:55.610 --> 00:24:57.130
<v Speaker 0>do that live. We'll do that. We'll have

00:24:57.130 --> 00:24:57.530
<v Speaker 0>some fun.

00:24:58.735 --> 00:25:00.174
<v Speaker 0>But this works.

00:25:00.414 --> 00:25:03.215
<v Speaker 0>This is a working full stack application. And

00:25:03.215 --> 00:25:05.374
<v Speaker 0>I'm really happy with this. The code sucks,

00:25:05.455 --> 00:25:06.974
<v Speaker 0>but I think it shows

00:25:07.534 --> 00:25:08.174
<v Speaker 0>the

00:25:08.335 --> 00:25:10.654
<v Speaker 0>convenience that Spin can provide.

00:25:11.054 --> 00:25:13.135
<v Speaker 0>I get the same developer experience.

00:25:14.299 --> 00:25:16.140
<v Speaker 0>And you'll see here, this is me doing

00:25:16.140 --> 00:25:17.019
<v Speaker 0>a spin up.

00:25:18.059 --> 00:25:20.220
<v Speaker 0>When I'm happy with that, I can just

00:25:20.220 --> 00:25:22.059
<v Speaker 0>run a spin deploy.

00:25:22.860 --> 00:25:25.260
<v Speaker 0>And if we give that ten seconds or

00:25:25.260 --> 00:25:27.419
<v Speaker 0>so, in fact, there we go, we now

00:25:27.419 --> 00:25:28.539
<v Speaker 0>have this endpoint.

00:25:29.885 --> 00:25:31.484
<v Speaker 0>If I just click this,

00:25:32.284 --> 00:25:33.724
<v Speaker 0>we have my application

00:25:34.365 --> 00:25:37.164
<v Speaker 0>posted on Fermion Cloud where I can do

00:25:37.164 --> 00:25:38.044
<v Speaker 0>a 12

00:25:38.284 --> 00:25:39.965
<v Speaker 0>to minus

00:25:40.524 --> 00:25:40.924
<v Speaker 0>result.

00:25:42.760 --> 00:25:44.840
<v Speaker 0>And that makes me happy.

00:25:45.480 --> 00:25:46.119
<v Speaker 0>So

00:25:46.679 --> 00:25:50.039
<v Speaker 0>that is a full stack spin application

00:25:50.440 --> 00:25:52.679
<v Speaker 0>with a pretty nice developer experience,

00:25:52.760 --> 00:25:54.360
<v Speaker 0>very simple production,

00:25:56.155 --> 00:25:58.235
<v Speaker 0>with some notable rooms for improvement.

00:25:58.795 --> 00:26:00.315
<v Speaker 0>So I hope you like what you see.

00:26:00.315 --> 00:26:02.155
<v Speaker 0>I'll give you thirty seconds to throw any

00:26:02.155 --> 00:26:03.514
<v Speaker 0>questions into the comment.

00:26:04.075 --> 00:26:05.835
<v Speaker 0>But the next steps for this proof of

00:26:05.835 --> 00:26:06.475
<v Speaker 0>concept

00:26:06.955 --> 00:26:08.554
<v Speaker 0>are bringing in

00:26:08.790 --> 00:26:11.350
<v Speaker 0>hold on. I hate my green screen. Bringing

00:26:11.350 --> 00:26:11.910
<v Speaker 0>in a

00:26:13.270 --> 00:26:16.470
<v Speaker 0>JavaScript framework. I think I'm gonna use Astro.

00:26:16.470 --> 00:26:17.910
<v Speaker 0>It's the one I've been using to build

00:26:17.910 --> 00:26:19.350
<v Speaker 0>out the academy website.

00:26:19.510 --> 00:26:20.950
<v Speaker 0>So I I wanna see how what I

00:26:20.950 --> 00:26:22.150
<v Speaker 0>can do with it. And it also does

00:26:22.150 --> 00:26:24.365
<v Speaker 0>very nice static state generation very similar to

00:26:24.365 --> 00:26:25.325
<v Speaker 0>Bartholomew.

00:26:25.565 --> 00:26:27.565
<v Speaker 0>I think where Bartholomew shines us in the

00:26:27.565 --> 00:26:29.565
<v Speaker 0>same way that Hugo shines. Right? If you

00:26:29.565 --> 00:26:30.364
<v Speaker 0>don't have

00:26:30.684 --> 00:26:31.724
<v Speaker 0>a lot of

00:26:32.845 --> 00:26:35.164
<v Speaker 0>heavy JavaScript client side logic,

00:26:35.804 --> 00:26:38.205
<v Speaker 0>you just wanna take markdown content and render

00:26:38.205 --> 00:26:38.605
<v Speaker 0>it

00:26:39.010 --> 00:26:41.490
<v Speaker 0>as a a website, a static website for

00:26:41.490 --> 00:26:43.809
<v Speaker 0>documentation and other needs, our volume is gonna

00:26:43.809 --> 00:26:44.529
<v Speaker 0>be great.

00:26:45.250 --> 00:26:48.130
<v Speaker 0>But when we want to start interacting with

00:26:48.130 --> 00:26:51.730
<v Speaker 0>more spend components and services as API endpoints,

00:26:52.205 --> 00:26:54.685
<v Speaker 0>I think let's just start to leverage all

00:26:54.685 --> 00:26:55.245
<v Speaker 0>of this.

00:26:55.805 --> 00:26:58.045
<v Speaker 0>That's step one. And then step two, we

00:26:58.045 --> 00:26:59.245
<v Speaker 0>build the calculator.

00:27:01.245 --> 00:27:02.044
<v Speaker 0>Alright.

00:27:03.645 --> 00:27:06.125
<v Speaker 0>So thank you, Russell. Looking forward to the

00:27:06.125 --> 00:27:09.140
<v Speaker 0>CDs. I'm really enjoying playing with Spin. So,

00:27:09.140 --> 00:27:10.420
<v Speaker 0>you know, I can already see lots of

00:27:10.420 --> 00:27:12.259
<v Speaker 0>use cases for it. And I I love

00:27:12.260 --> 00:27:13.779
<v Speaker 0>WebAssembly anyway.

00:27:13.940 --> 00:27:16.260
<v Speaker 0>And so I'm gonna experiment more more languages.

00:27:16.260 --> 00:27:17.780
<v Speaker 0>I think we'll bring in a little bit

00:27:17.780 --> 00:27:19.860
<v Speaker 0>of Swift maybe for the calculate method. I'm

00:27:19.860 --> 00:27:20.180
<v Speaker 0>not sure.

00:27:21.215 --> 00:27:23.215
<v Speaker 0>Maybe some Scala. I'm feeling a little bit

00:27:23.215 --> 00:27:23.855
<v Speaker 0>brave.

00:27:24.335 --> 00:27:25.855
<v Speaker 0>But, yeah, I won't forget the logging and

00:27:25.855 --> 00:27:27.294
<v Speaker 0>I'm glad you're enjoying the series.

00:27:28.975 --> 00:27:29.695
<v Speaker 0>Alright.

00:27:30.735 --> 00:27:32.495
<v Speaker 0>Well, thank you all for tuning in.

00:27:34.320 --> 00:27:36.480
<v Speaker 0>Hopefully, that gives you an understanding of what

00:27:36.480 --> 00:27:38.719
<v Speaker 0>a full stack spin application looks like.

00:27:39.200 --> 00:27:41.120
<v Speaker 0>I think the structure works really well. I'm

00:27:41.120 --> 00:27:42.480
<v Speaker 0>now in a position where we could start

00:27:42.480 --> 00:27:44.479
<v Speaker 0>to lay it on more and more services.

00:27:45.120 --> 00:27:47.440
<v Speaker 0>We can use local based routing

00:27:47.625 --> 00:27:49.625
<v Speaker 0>with the services, which is nice. You know,

00:27:49.625 --> 00:27:51.145
<v Speaker 0>the web browser just had to call slash

00:27:51.145 --> 00:27:51.865
<v Speaker 0>API.

00:27:52.185 --> 00:27:54.105
<v Speaker 0>We're gonna layer on more of this. And

00:27:54.105 --> 00:27:55.945
<v Speaker 0>then when we're finished the calculator, I think

00:27:55.945 --> 00:27:58.345
<v Speaker 0>we'll time about something real for my real

00:27:58.345 --> 00:27:59.945
<v Speaker 0>Rawkode Academy automation.

00:28:00.540 --> 00:28:02.620
<v Speaker 0>So thank you for tuning in. I'll see

00:28:02.620 --> 00:28:03.660
<v Speaker 0>you all soon.

00:28:03.900 --> 00:28:05.180
<v Speaker 0>Have a wonderful day.

00:28:05.740 --> 00:28:06.300
<v Speaker 0>Adios.
