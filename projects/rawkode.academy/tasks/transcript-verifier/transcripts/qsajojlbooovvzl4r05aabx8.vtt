WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 6e2da928-c280-4157-bd5d-de947bf2dcc7
Created: 2025-04-29T21:37:16.526Z
Duration: 5211.5054
Channels: 1

00:00:59.860 --> 00:01:02.500
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:01:02.500 --> 00:01:03.380
<v Speaker 0>live.

00:01:03.620 --> 00:01:05.185
<v Speaker 0>Before we get started, I wanna thank my

00:01:05.185 --> 00:01:07.665
<v Speaker 0>employer Equinix Medal. They provide the time for

00:01:07.665 --> 00:01:09.424
<v Speaker 0>me to invest and to produce in this

00:01:09.424 --> 00:01:11.424
<v Speaker 0>material so that we can all learn together.

00:01:11.985 --> 00:01:13.505
<v Speaker 0>If you want to try out the platform,

00:01:13.505 --> 00:01:15.425
<v Speaker 0>please use the code Rawkode Live. This will

00:01:15.425 --> 00:01:17.490
<v Speaker 0>give you $50 of credits. You can splurge

00:01:17.490 --> 00:01:18.689
<v Speaker 0>that all in a few hours with some

00:01:18.689 --> 00:01:21.890
<v Speaker 0>beefy hardware with 400 terabytes of RAM, 400

00:01:21.890 --> 00:01:23.490
<v Speaker 0>gigabytes of RAM, would be a clever trick

00:01:23.490 --> 00:01:25.729
<v Speaker 0>and loads and loads of CPUs or you

00:01:25.729 --> 00:01:27.409
<v Speaker 0>could use it more wisely. I prefer the

00:01:27.409 --> 00:01:27.969
<v Speaker 0>former.

00:01:28.369 --> 00:01:30.210
<v Speaker 0>We're gonna take a look at OpenTelemetry

00:01:30.210 --> 00:01:32.995
<v Speaker 0>today. So I'm going to invite my wonderful

00:01:32.995 --> 00:01:34.355
<v Speaker 0>guests now.

00:01:35.235 --> 00:01:36.835
<v Speaker 0>Hello

00:01:36.835 --> 00:01:38.915
<v Speaker 0>Amy Toby and Liz Fong Jones. How are

00:01:38.915 --> 00:01:41.955
<v Speaker 0>you both today? Hello. Hello. I'm doing good.

00:01:42.195 --> 00:01:43.395
<v Speaker 0>Good and alright. There we go.

00:01:44.290 --> 00:01:44.930
<v Speaker 0>So

00:01:45.250 --> 00:01:47.409
<v Speaker 0>let's start with you, Amy. I like alphabetical

00:01:47.409 --> 00:01:50.050
<v Speaker 0>order lists. Can you just tell us who

00:01:50.050 --> 00:01:51.810
<v Speaker 0>you are, who you work for, and then

00:01:51.810 --> 00:01:53.090
<v Speaker 0>we'll move on to Les, and then we'll

00:01:53.090 --> 00:01:54.689
<v Speaker 0>get started with today's episode.

00:01:54.930 --> 00:01:57.170
<v Speaker 2>Alright. I'm Amy Toby. I've been in in

00:01:57.170 --> 00:01:59.535
<v Speaker 2>SRE since before it was called that, about

00:01:59.535 --> 00:02:02.095
<v Speaker 2>twenty years now. I work at Equinix Metal

00:02:02.095 --> 00:02:04.415
<v Speaker 2>with David, but in I am a principal

00:02:04.415 --> 00:02:06.495
<v Speaker 2>SRE in our software engineering group.

00:02:07.855 --> 00:02:08.975
<v Speaker 0>Okay. And Liz?

00:02:09.375 --> 00:02:11.535
<v Speaker 1>Hi. I'm Liz Fong Jones. I'm a principal

00:02:11.535 --> 00:02:13.695
<v Speaker 1>developer advocate at Honeycomb.io.

00:02:14.230 --> 00:02:17.190
<v Speaker 1>We are a company that helps developers understand

00:02:17.190 --> 00:02:19.510
<v Speaker 1>their software and how it's behaving in production,

00:02:20.070 --> 00:02:22.790
<v Speaker 1>and I am a contributor to OpenTelemetry.

00:02:23.990 --> 00:02:26.390
<v Speaker 0>Which is great because today, we're talking about

00:02:26.390 --> 00:02:27.430
<v Speaker 0>OpenTelemetry.

00:02:27.430 --> 00:02:29.755
<v Speaker 0>Could we maybe spend then the next, let's

00:02:29.755 --> 00:02:31.355
<v Speaker 0>say, couple of minutes and just kinda cover

00:02:31.355 --> 00:02:32.395
<v Speaker 0>what OpenTelemetry

00:02:32.395 --> 00:02:34.235
<v Speaker 0>is and what problem it's trying to solve?

00:02:34.395 --> 00:02:35.435
<v Speaker 1>Absolutely.

00:02:35.515 --> 00:02:37.035
<v Speaker 1>So OpenTelemetry

00:02:37.035 --> 00:02:40.475
<v Speaker 1>is a solution to the problem that previously

00:02:40.475 --> 00:02:42.715
<v Speaker 1>there were a number of different ways that

00:02:42.715 --> 00:02:44.475
<v Speaker 1>you could use to try to get your

00:02:44.700 --> 00:02:47.180
<v Speaker 1>data from your application into

00:02:47.260 --> 00:02:49.099
<v Speaker 1>platforms that could help you understand what was

00:02:49.099 --> 00:02:49.820
<v Speaker 1>going on.

00:02:50.140 --> 00:02:52.140
<v Speaker 1>So you can think of everything from New

00:02:52.140 --> 00:02:55.019
<v Speaker 1>Relic to Datadog to Splunk to kind of

00:02:55.019 --> 00:02:57.340
<v Speaker 1>more upstart modern tools like Honeycomb. Right? Like,

00:02:57.785 --> 00:03:00.584
<v Speaker 1>all these tools have their own kind of

00:03:00.584 --> 00:03:01.385
<v Speaker 1>explorers,

00:03:01.385 --> 00:03:02.585
<v Speaker 1>their own SDKs.

00:03:03.224 --> 00:03:05.465
<v Speaker 1>And, therefore, there is a high barrier to

00:03:05.465 --> 00:03:07.385
<v Speaker 1>kind of adding one to try it out,

00:03:07.385 --> 00:03:09.065
<v Speaker 1>to switching, to experimenting.

00:03:09.465 --> 00:03:11.065
<v Speaker 1>And each of us who are on the

00:03:11.065 --> 00:03:13.680
<v Speaker 1>vendor side had to reimplement the same kind

00:03:13.680 --> 00:03:16.640
<v Speaker 1>of SDKs to collect trace data, to kind

00:03:16.640 --> 00:03:17.200
<v Speaker 1>of

00:03:18.320 --> 00:03:19.760
<v Speaker 1>to to instrument

00:03:19.920 --> 00:03:21.440
<v Speaker 1>to instrument frameworks.

00:03:21.440 --> 00:03:21.920
<v Speaker 1>So

00:03:22.320 --> 00:03:24.720
<v Speaker 1>we all decided, basically, back in

00:03:25.615 --> 00:03:26.815
<v Speaker 1>2019

00:03:27.295 --> 00:03:29.295
<v Speaker 1>at at the end of 2018, actually, we've

00:03:29.295 --> 00:03:30.735
<v Speaker 1>been on this journey two years now,

00:03:31.615 --> 00:03:34.895
<v Speaker 1>to merge all of our open source efforts

00:03:34.895 --> 00:03:36.975
<v Speaker 1>and to combine them together into something called

00:03:36.975 --> 00:03:37.695
<v Speaker 1>OpenTelemetry.

00:03:38.140 --> 00:03:39.980
<v Speaker 1>So you may have heard of OpenTracing or

00:03:39.980 --> 00:03:42.140
<v Speaker 1>OpenCensus. Those are kind of the two predecessor

00:03:42.140 --> 00:03:44.060
<v Speaker 1>projects to OpenTelemetry.

00:03:44.060 --> 00:03:45.180
<v Speaker 1>But OpenTelemetry's

00:03:45.180 --> 00:03:46.620
<v Speaker 1>goal is to kind of unify all of

00:03:46.620 --> 00:03:48.620
<v Speaker 1>this that there's just one perspective on how

00:03:48.620 --> 00:03:49.739
<v Speaker 1>to do it and not three.

00:03:52.955 --> 00:03:54.955
<v Speaker 0>Awesome. Alright. So

00:03:55.435 --> 00:03:55.915
<v Speaker 0>let's

00:03:56.955 --> 00:03:59.754
<v Speaker 0>we have a couple of comments. So we

00:03:59.754 --> 00:04:00.395
<v Speaker 0>got

00:04:00.635 --> 00:04:04.075
<v Speaker 0>Waleed saying hello. Hello, Waleed. Sayam, thank you

00:04:04.075 --> 00:04:05.034
<v Speaker 0>for joining us again.

00:04:06.010 --> 00:04:06.730
<v Speaker 0>Now

00:04:06.810 --> 00:04:07.530
<v Speaker 0>the

00:04:07.690 --> 00:04:09.370
<v Speaker 0>the premise of this show is generally that

00:04:09.370 --> 00:04:11.290
<v Speaker 0>we try to do very little upfront. I

00:04:11.290 --> 00:04:12.810
<v Speaker 0>like everything to happen in front of the

00:04:12.810 --> 00:04:13.690
<v Speaker 0>viewer's eyes.

00:04:14.330 --> 00:04:16.089
<v Speaker 1>And I think that's really important because, like,

00:04:16.089 --> 00:04:18.089
<v Speaker 1>you know, Amy and I as principal engineers,

00:04:18.089 --> 00:04:20.595
<v Speaker 1>you know, we like to demonstrate to people

00:04:20.595 --> 00:04:22.275
<v Speaker 1>that, you know, hey. We as principal engineers

00:04:22.275 --> 00:04:24.435
<v Speaker 1>sometimes struggle with syntax. We as principal engineers

00:04:24.435 --> 00:04:26.595
<v Speaker 1>have our compilers, like, not work. Right? Like,

00:04:26.595 --> 00:04:28.115
<v Speaker 1>those are things that happen to everyone. We're

00:04:28.115 --> 00:04:29.875
<v Speaker 1>not, you know, perfect human beings just because

00:04:29.875 --> 00:04:30.675
<v Speaker 1>we're principal engineers.

00:04:31.410 --> 00:04:33.490
<v Speaker 2>I got some inkling, so I did cheat

00:04:33.490 --> 00:04:35.330
<v Speaker 2>a little bit and ran through some stuff.

00:04:35.330 --> 00:04:37.010
<v Speaker 2>But I think David's starting with a a

00:04:37.010 --> 00:04:40.530
<v Speaker 2>blank slate. So hope hopefully, we just eliminate

00:04:40.530 --> 00:04:42.850
<v Speaker 2>the the the really tedious bits.

00:04:43.905 --> 00:04:45.664
<v Speaker 0>Well, mean I think we're gonna up the

00:04:45.664 --> 00:04:47.425
<v Speaker 0>ante a little bit with this episode because

00:04:47.425 --> 00:04:49.985
<v Speaker 0>not only are we starting from mostly fresh

00:04:49.985 --> 00:04:51.425
<v Speaker 0>slate and I'll cover them mostly in a

00:04:51.425 --> 00:04:53.664
<v Speaker 0>second, but we're all working with a repository

00:04:53.664 --> 00:04:55.585
<v Speaker 0>that we have no experience with essentially. And

00:04:55.585 --> 00:04:56.865
<v Speaker 0>I don't think any of us are particularly

00:04:56.865 --> 00:04:59.025
<v Speaker 0>familiar with the project we're gonna use. So

00:04:59.200 --> 00:05:01.120
<v Speaker 0>let's cover the context then.

00:05:01.200 --> 00:05:02.240
<v Speaker 0>So

00:05:04.640 --> 00:05:06.400
<v Speaker 0>this is the I opened the wrong tab.

00:05:06.400 --> 00:05:08.800
<v Speaker 0>This is supposed to be tankerbell.org.

00:05:10.240 --> 00:05:11.280
<v Speaker 0>Okay, the problem.

00:05:12.825 --> 00:05:13.945
<v Speaker 0>Which

00:05:13.945 --> 00:05:17.065
<v Speaker 0>is a provisioning platform for bare metal and

00:05:17.065 --> 00:05:19.065
<v Speaker 0>Tinkerbell aims to solve the problem of I

00:05:19.065 --> 00:05:20.665
<v Speaker 0>have a bare metal machine, I wanna spin

00:05:20.665 --> 00:05:22.185
<v Speaker 0>it up, get an operating system on it

00:05:22.185 --> 00:05:23.625
<v Speaker 0>and make it available for someone to use

00:05:23.625 --> 00:05:24.905
<v Speaker 0>and provision their own software.

00:05:25.790 --> 00:05:27.790
<v Speaker 0>Now there's quite a lot involved with this,

00:05:27.790 --> 00:05:29.710
<v Speaker 0>there are many moving parts. So we're gonna

00:05:29.710 --> 00:05:30.750
<v Speaker 0>focus on

00:05:31.230 --> 00:05:33.390
<v Speaker 0>two aspects of it today hopefully,

00:05:33.390 --> 00:05:35.550
<v Speaker 0>which is if I move over here

00:05:35.950 --> 00:05:38.155
<v Speaker 0>and pull up the read me and the

00:05:38.155 --> 00:05:40.715
<v Speaker 0>tank CLI and the tank server.

00:05:41.115 --> 00:05:42.955
<v Speaker 0>Now these are the smallest kind of surfaces

00:05:42.955 --> 00:05:44.555
<v Speaker 0>that we can work on. The tank CLI

00:05:44.555 --> 00:05:46.315
<v Speaker 0>gives us some commands that we can run

00:05:46.315 --> 00:05:48.875
<v Speaker 0>that speaks to the tank server over gRPC.

00:05:49.035 --> 00:05:50.955
<v Speaker 0>Hopefully all very easy for us to instrument

00:05:50.955 --> 00:05:52.795
<v Speaker 0>with OpenTelemetry to a certain degree.

00:05:53.699 --> 00:05:55.300
<v Speaker 0>But there's still a lot of complexity in

00:05:55.300 --> 00:05:56.819
<v Speaker 0>this project as a whole. Now we got

00:05:56.819 --> 00:05:59.139
<v Speaker 0>very lucky and that a colleague of Amy

00:05:59.139 --> 00:06:01.539
<v Speaker 0>and I's Jason has worked on a tilt

00:06:01.539 --> 00:06:03.460
<v Speaker 0>file which I'm using today.

00:06:03.860 --> 00:06:05.940
<v Speaker 1>Tilt is amazing. I love it.

00:06:06.340 --> 00:06:08.615
<v Speaker 0>Yes. So this is the bit that has

00:06:08.615 --> 00:06:10.935
<v Speaker 0>not merged into the main branch yet

00:06:11.095 --> 00:06:13.495
<v Speaker 0>but it is available for everyone to use

00:06:13.575 --> 00:06:15.895
<v Speaker 0>and the reason I did this upfront is

00:06:15.895 --> 00:06:17.495
<v Speaker 0>that there's a whole bunch of dependencies that

00:06:17.495 --> 00:06:18.855
<v Speaker 0>happen in the background

00:06:19.095 --> 00:06:20.695
<v Speaker 0>lots of cache stuff that needs to be

00:06:20.695 --> 00:06:22.460
<v Speaker 0>available in Docker images. I don't really wanna

00:06:22.460 --> 00:06:23.980
<v Speaker 0>make everyone sit and watch this for twenty

00:06:23.980 --> 00:06:25.820
<v Speaker 0>minutes while it's spun up. So I have

00:06:25.820 --> 00:06:28.140
<v Speaker 0>done this upfront, I do apologize but we

00:06:28.140 --> 00:06:29.420
<v Speaker 0>are in a position now where we can

00:06:29.420 --> 00:06:31.100
<v Speaker 0>make changes to the CLI and the server

00:06:31.100 --> 00:06:33.420
<v Speaker 0>components and the auto live reload. That is

00:06:33.420 --> 00:06:35.655
<v Speaker 0>all I've done and like this will be

00:06:35.655 --> 00:06:37.895
<v Speaker 0>available on the main branch soon and to

00:06:37.895 --> 00:06:40.294
<v Speaker 0>make sure that worked, I did what any

00:06:40.294 --> 00:06:42.534
<v Speaker 0>senior developer would do and added a print

00:06:42.534 --> 00:06:44.375
<v Speaker 0>to standard out called help me too.

00:06:47.335 --> 00:06:48.630
<v Speaker 1>So I Hope I'm trapped in the server

00:06:48.630 --> 00:06:49.350
<v Speaker 1>factory.

00:06:51.030 --> 00:06:53.030
<v Speaker 0>And you can see hopefully if we've got

00:06:53.030 --> 00:06:54.630
<v Speaker 0>this right, if I just remove the two

00:06:54.630 --> 00:06:57.430
<v Speaker 0>then tell as amazing as it is detects

00:06:57.430 --> 00:06:59.750
<v Speaker 0>that change, rebuilds image, redeploys it and we

00:06:59.750 --> 00:07:00.950
<v Speaker 0>can see the help me is now available

00:07:00.950 --> 00:07:02.415
<v Speaker 0>here. So that's all we have done up

00:07:02.415 --> 00:07:04.815
<v Speaker 0>front. What that means is we have a

00:07:05.055 --> 00:07:07.055
<v Speaker 0>feedback loop for making changes to this, which

00:07:07.055 --> 00:07:07.935
<v Speaker 0>I'm hoping

00:07:08.335 --> 00:07:10.014
<v Speaker 0>is enough for you to to be able

00:07:10.014 --> 00:07:11.535
<v Speaker 0>to guide us through the process of adding

00:07:11.535 --> 00:07:14.450
<v Speaker 0>OpenTelemetry to this project. Does that all sound

00:07:14.450 --> 00:07:15.010
<v Speaker 0>good?

00:07:15.890 --> 00:07:18.610
<v Speaker 1>Great. Sounds perfect. We're all about short feedback

00:07:18.610 --> 00:07:20.050
<v Speaker 1>loops here at HoneyGo.

00:07:20.610 --> 00:07:21.330
<v Speaker 0>Awesome.

00:07:21.570 --> 00:07:22.850
<v Speaker 0>Alright. Well,

00:07:23.010 --> 00:07:24.770
<v Speaker 0>let's start then with

00:07:25.250 --> 00:07:27.490
<v Speaker 0>what is the first step, you know, as

00:07:27.490 --> 00:07:29.410
<v Speaker 0>someone working on a project

00:07:29.785 --> 00:07:32.505
<v Speaker 0>has this great idea. I wanna add OpenTelemetry

00:07:32.505 --> 00:07:34.185
<v Speaker 0>to it. What what is step one? What

00:07:34.185 --> 00:07:36.665
<v Speaker 0>what do we do here? Step one would

00:07:36.665 --> 00:07:39.385
<v Speaker 1>be, why don't we go through and look

00:07:39.385 --> 00:07:42.185
<v Speaker 1>at a sample Go application,

00:07:42.185 --> 00:07:44.585
<v Speaker 1>a sample Go server, that's a gRPC server,

00:07:45.340 --> 00:07:48.620
<v Speaker 1>to understand how does OpenTelemetry instrumentation work.

00:07:48.940 --> 00:07:50.140
<v Speaker 1>So if you go to

00:07:50.780 --> 00:07:56.780
<v Speaker 1>github.com/open-telemetry/opentelemetry-go,

00:07:57.845 --> 00:07:59.925
<v Speaker 1>without the dash this time. I know. We

00:07:59.925 --> 00:08:01.445
<v Speaker 1>couldn't get OpenTelemetry,

00:08:01.445 --> 00:08:03.845
<v Speaker 1>the GitHub name. Someone had squatted it.

00:08:04.405 --> 00:08:05.765
<v Speaker 1>If you're out there and you hear that

00:08:05.765 --> 00:08:08.725
<v Speaker 1>your organization owns Open dash or OpenTelemetry, one

00:08:08.725 --> 00:08:10.725
<v Speaker 1>word, we want to hear from you. Okay.

00:08:10.725 --> 00:08:11.925
<v Speaker 1>And now go to example.

00:08:13.500 --> 00:08:15.819
<v Speaker 1>And let's go pull up the gRPC server.

00:08:15.819 --> 00:08:17.260
<v Speaker 1>So it's under basic.

00:08:17.900 --> 00:08:18.540
<v Speaker 0>Basic.

00:08:19.900 --> 00:08:21.580
<v Speaker 1>And look at main.go.

00:08:22.860 --> 00:08:23.979
<v Speaker 1>I think this is it.

00:08:26.705 --> 00:08:28.545
<v Speaker 1>No. This one doesn't have the gRPC. There

00:08:28.545 --> 00:08:30.225
<v Speaker 1>is oh, I know where we moved that

00:08:30.225 --> 00:08:32.065
<v Speaker 1>to. We moved that to OpenTelemetry

00:08:32.065 --> 00:08:33.505
<v Speaker 1>Go contrib because

00:08:33.825 --> 00:08:34.145
<v Speaker 1>it's

00:08:35.424 --> 00:08:38.145
<v Speaker 1>we didn't want to make everyone importing OpenTelemetry

00:08:38.145 --> 00:08:41.265
<v Speaker 1>import all of import all of gRPC.

00:08:41.505 --> 00:08:43.000
<v Speaker 1>So now let's go to

00:08:44.200 --> 00:08:45.880
<v Speaker 1>instrumentation gRPC.

00:08:50.600 --> 00:08:52.120
<v Speaker 1>GitHub's run? Yep.

00:08:53.160 --> 00:08:55.080
<v Speaker 1>Yep. Probably there. Yep. Example.

00:08:55.875 --> 00:08:56.595
<v Speaker 1>Perfect.

00:08:56.755 --> 00:08:57.795
<v Speaker 1>And server.

00:08:59.395 --> 00:09:01.475
<v Speaker 1>Okay. So let's look at what a sample

00:09:01.475 --> 00:09:03.715
<v Speaker 1>application that's a gRPC application

00:09:04.195 --> 00:09:06.595
<v Speaker 1>instrumented with with OpenTelemetry looks like.

00:09:07.410 --> 00:09:09.010
<v Speaker 1>So here's the standard,

00:09:09.329 --> 00:09:10.610
<v Speaker 1>you know, say hello

00:09:11.009 --> 00:09:12.129
<v Speaker 1>open open

00:09:12.449 --> 00:09:15.410
<v Speaker 1>standard gRPC code for saying say hello.

00:09:16.050 --> 00:09:17.970
<v Speaker 1>So what you'll notice is that we haven't

00:09:17.970 --> 00:09:20.850
<v Speaker 1>actually changed the code very much for that.

00:09:21.605 --> 00:09:23.845
<v Speaker 1>But what we have changed is that we've

00:09:23.845 --> 00:09:26.645
<v Speaker 1>changed the instantiation of the gRPC server.

00:09:27.365 --> 00:09:28.725
<v Speaker 1>So if you scroll down,

00:09:29.925 --> 00:09:31.045
<v Speaker 1>you should see

00:09:31.845 --> 00:09:33.125
<v Speaker 1>that there is

00:09:33.845 --> 00:09:36.165
<v Speaker 1>it's still all boilerplate boilerplate.

00:09:36.165 --> 00:09:36.565
<v Speaker 1>Right there.

00:09:37.970 --> 00:09:41.410
<v Speaker 1>That we've configured a stream interceptor

00:09:41.810 --> 00:09:43.410
<v Speaker 1>that will automatically

00:09:43.570 --> 00:09:46.450
<v Speaker 1>create trace spans anytime a request is received

00:09:46.450 --> 00:09:47.410
<v Speaker 1>in the server.

00:09:47.730 --> 00:09:49.010
<v Speaker 1>So that's what we're going to need to

00:09:49.010 --> 00:09:51.490
<v Speaker 1>add to our gRPC instantiation

00:09:51.490 --> 00:09:54.505
<v Speaker 1>inside of inside of Tinkerbell.

00:09:56.904 --> 00:09:58.025
<v Speaker 0>Okay. So

00:09:58.425 --> 00:10:00.585
<v Speaker 0>just so that I understand that correctly then

00:10:00.585 --> 00:10:01.945
<v Speaker 0>is the OpenTelemetry,

00:10:01.945 --> 00:10:04.025
<v Speaker 0>when we add it to our Go package

00:10:04.025 --> 00:10:06.660
<v Speaker 0>as a dependency, it provides especially

00:10:06.660 --> 00:10:09.140
<v Speaker 0>the gRPC stuff just provides hooks that we

00:10:09.140 --> 00:10:10.900
<v Speaker 0>can just add to the server definition

00:10:11.300 --> 00:10:13.060
<v Speaker 0>that does all the instrumentation for us. Like,

00:10:13.060 --> 00:10:14.580
<v Speaker 0>we don't have to manually go an instrument

00:10:14.580 --> 00:10:17.220
<v Speaker 0>any of our gRPC functions or anything like

00:10:17.220 --> 00:10:19.860
<v Speaker 0>that. It adds the basic skeleton. Right? You

00:10:19.860 --> 00:10:21.460
<v Speaker 1>still have to add meat to the skeleton.

00:10:22.075 --> 00:10:23.755
<v Speaker 1>But if you don't have a skeleton, right,

00:10:23.755 --> 00:10:25.435
<v Speaker 1>like, your your body's gonna fall apart. Right?

00:10:25.435 --> 00:10:27.835
<v Speaker 1>So we kind of have Halloween. I know.

00:10:28.394 --> 00:10:29.915
<v Speaker 1>Day past Halloween, we can still be a

00:10:29.915 --> 00:10:31.274
<v Speaker 1>little spooky. Right? Like, if you don't have

00:10:31.274 --> 00:10:32.955
<v Speaker 1>a skeleton on the inside, like, everything's gonna

00:10:32.955 --> 00:10:34.714
<v Speaker 1>fall apart. Right? So either you can add

00:10:34.714 --> 00:10:36.780
<v Speaker 1>that skeleton by hand, or you can have

00:10:36.780 --> 00:10:39.340
<v Speaker 1>something helpful like hotel gRPC add the skeleton

00:10:39.340 --> 00:10:41.900
<v Speaker 1>for you. So the skeleton here is skeleton.

00:10:42.300 --> 00:10:44.940
<v Speaker 1>The skeleton here is RPC calls coming in

00:10:44.940 --> 00:10:47.660
<v Speaker 1>and leaving. Right? So when you issue an

00:10:47.660 --> 00:10:49.745
<v Speaker 1>RPC call, you want to have that instrumented.

00:10:49.745 --> 00:10:51.265
<v Speaker 1>When you receive an RPC call, you want

00:10:51.265 --> 00:10:52.865
<v Speaker 1>to have that instrumented as, hey. This is

00:10:52.865 --> 00:10:54.385
<v Speaker 1>a trace scan. This is your network.

00:10:54.785 --> 00:10:57.185
<v Speaker 1>What's not done automatically for you is adding

00:10:57.185 --> 00:10:59.904
<v Speaker 1>data on kind of some of the attributes

00:10:59.904 --> 00:11:02.290
<v Speaker 1>of what's happening. For instance, things like what

00:11:02.290 --> 00:11:03.170
<v Speaker 1>is the request

00:11:03.890 --> 00:11:06.050
<v Speaker 1>what server did you request? Right? What size

00:11:06.050 --> 00:11:07.330
<v Speaker 1>of server did you request?

00:11:08.130 --> 00:11:10.050
<v Speaker 1>Or where is the server located? Right? Like,

00:11:10.050 --> 00:11:12.370
<v Speaker 1>those are parameters that the generic framework cannot

00:11:12.370 --> 00:11:13.890
<v Speaker 1>possibly know about, so you have to manually

00:11:13.890 --> 00:11:16.574
<v Speaker 1>add them. Similarly, in the same way to

00:11:16.574 --> 00:11:18.654
<v Speaker 1>how we kind of added the help help,

00:11:18.654 --> 00:11:21.774
<v Speaker 1>right, like, into the into the console

00:11:22.014 --> 00:11:22.735
<v Speaker 1>output,

00:11:22.975 --> 00:11:24.654
<v Speaker 1>you can choose to add kind of logging

00:11:24.654 --> 00:11:26.815
<v Speaker 1>messages or up and attach them to trace

00:11:26.815 --> 00:11:28.255
<v Speaker 1>spans. Those are all things that you can

00:11:28.255 --> 00:11:30.180
<v Speaker 1>do, but you have to have a trace

00:11:30.180 --> 00:11:33.220
<v Speaker 1>span that's already instantiated to add those attributes

00:11:33.220 --> 00:11:34.980
<v Speaker 1>or or log events to.

00:11:36.660 --> 00:11:37.380
<v Speaker 0>Okay.

00:11:37.779 --> 00:11:38.420
<v Speaker 0>So

00:11:38.899 --> 00:11:41.380
<v Speaker 0>now we have to do this over here.

00:11:41.380 --> 00:11:43.060
<v Speaker 0>So let me to see

00:11:43.935 --> 00:11:46.495
<v Speaker 0>this is the server.main.go.

00:11:47.055 --> 00:11:49.855
<v Speaker 0>Now this is it? Yeah. This is. If

00:11:49.855 --> 00:11:51.695
<v Speaker 1>I had to guess, it's under a gRPC

00:11:51.695 --> 00:11:52.415
<v Speaker 1>server.

00:11:52.815 --> 00:11:54.495
<v Speaker 0>G r p ah.

00:11:54.655 --> 00:11:55.375
<v Speaker 0>Okay.

00:11:56.575 --> 00:11:58.575
<v Speaker 0>So we should see something that looks like.

00:12:00.620 --> 00:12:03.580
<v Speaker 1>Yep. Right there. Set up gRPC.

00:12:03.580 --> 00:12:05.420
<v Speaker 1>Right. GRPC new server.

00:12:05.740 --> 00:12:06.620
<v Speaker 0>Right. Okay.

00:12:07.820 --> 00:12:08.460
<v Speaker 0>So

00:12:08.780 --> 00:12:10.380
<v Speaker 0>do we have we need to then start.

00:12:10.380 --> 00:12:12.060
<v Speaker 0>I'm assuming we have to add something to

00:12:12.060 --> 00:12:13.975
<v Speaker 0>our goal dot mod that that tells it

00:12:13.975 --> 00:12:15.335
<v Speaker 0>to bring or just add the import to

00:12:15.335 --> 00:12:16.455
<v Speaker 0>the top of the file to tell it

00:12:16.455 --> 00:12:18.215
<v Speaker 0>to bring in the OpenTelemetry

00:12:18.615 --> 00:12:20.455
<v Speaker 1>code. That's correct. So if you go back

00:12:20.455 --> 00:12:21.415
<v Speaker 1>over to the exam,

00:12:22.295 --> 00:12:24.215
<v Speaker 1>you can see what the import is for

00:12:24.215 --> 00:12:25.335
<v Speaker 1>hotel gRPC.

00:12:27.690 --> 00:12:30.090
<v Speaker 1>Yep. Perfect. That'll do it.

00:12:35.370 --> 00:12:36.970
<v Speaker 0>I'm gonna not save that because I'm pretty

00:12:36.970 --> 00:12:38.490
<v Speaker 0>sure if I do, VSCool is gonna remove

00:12:38.490 --> 00:12:38.730
<v Speaker 0>it.

00:12:41.195 --> 00:12:42.875
<v Speaker 0>It's thinking about it. So helpful.

00:12:43.195 --> 00:12:43.995
<v Speaker 1>So helpful.

00:12:44.795 --> 00:12:46.955
<v Speaker 1>Okay. And then let's add the interceptor. Again,

00:12:46.955 --> 00:12:48.155
<v Speaker 1>you can basically

00:12:50.235 --> 00:12:52.395
<v Speaker 1>you can basically cut paste that. Oh, just

00:12:52.395 --> 00:12:55.035
<v Speaker 0>do that. Okay. So we want to

00:12:57.470 --> 00:12:59.470
<v Speaker 0>can I just copy all of that? So

00:12:59.470 --> 00:13:01.390
<v Speaker 1>you'll notice that when it says gRPC new

00:13:01.390 --> 00:13:03.149
<v Speaker 1>server, the interceptors

00:13:03.149 --> 00:13:05.710
<v Speaker 1>are passed as parameters to the new server,

00:13:05.870 --> 00:13:07.070
<v Speaker 1>whereas you're programmatically

00:13:07.535 --> 00:13:10.495
<v Speaker 1>constructing your list of server arguments in your

00:13:10.495 --> 00:13:13.455
<v Speaker 1>application. So you'll copy the gRPC lines here,

00:13:13.455 --> 00:13:16.335
<v Speaker 1>the stream interceptor and unary interceptor.

00:13:16.895 --> 00:13:18.495
<v Speaker 1>But where you paste them is not going

00:13:18.495 --> 00:13:20.175
<v Speaker 1>to be into gRPC new server

00:13:20.700 --> 00:13:21.500
<v Speaker 1>because

00:13:22.780 --> 00:13:24.940
<v Speaker 1>do you see, like, params..dot?

00:13:25.020 --> 00:13:27.020
<v Speaker 1>So you need to add to that params

00:13:27.020 --> 00:13:27.660
<v Speaker 1>list.

00:13:28.380 --> 00:13:29.660
<v Speaker 1>Ah. Yep.

00:13:29.980 --> 00:13:31.660
<v Speaker 0>So are we gonna call You already have

00:13:31.660 --> 00:13:33.115
<v Speaker 1>a from me? I

00:13:34.315 --> 00:13:36.395
<v Speaker 1>think it should coexist. I think you can

00:13:36.395 --> 00:13:37.915
<v Speaker 1>have more than one interceptor.

00:13:37.995 --> 00:13:38.795
<v Speaker 2>Does

00:13:39.195 --> 00:13:41.355
<v Speaker 2>the order matter? So so this is gonna

00:13:41.355 --> 00:13:43.115
<v Speaker 2>go, like, be in the call stack. Right?

00:13:43.115 --> 00:13:45.595
<v Speaker 2>Like, when the request comes in, gRPC is

00:13:45.595 --> 00:13:47.115
<v Speaker 2>gonna go through this list and call each

00:13:47.115 --> 00:13:49.399
<v Speaker 2>of these interceptors and pass it some data.

00:13:49.720 --> 00:13:52.199
<v Speaker 2>Mhmm. So we probably want it after that

00:13:52.199 --> 00:13:54.600
<v Speaker 2>TLS setup thing or before.

00:13:54.839 --> 00:13:57.000
<v Speaker 2>Like See, it works fine with permissive. It's

00:13:57.000 --> 00:13:58.920
<v Speaker 1>it'll work fine here. Right? Like, the credentials

00:13:58.920 --> 00:14:01.399
<v Speaker 1>are are automatic. Right? Or sorry. The credentials

00:14:01.399 --> 00:14:03.720
<v Speaker 1>are done on on init. Right? The credentials

00:14:03.720 --> 00:14:05.615
<v Speaker 1>are not per request. That should be fine.

00:14:06.655 --> 00:14:08.975
<v Speaker 0>Okay. Okay. So now if you save this

00:14:08.975 --> 00:14:11.215
<v Speaker 1>and then comment it oh, in fact,

00:14:12.335 --> 00:14:13.695
<v Speaker 1>the s code is detected and added it

00:14:13.695 --> 00:14:14.655
<v Speaker 1>already. Perfect.

00:14:16.095 --> 00:14:16.415
<v Speaker 1>Okay.

00:14:17.600 --> 00:14:21.120
<v Speaker 1>So that's great. But now in addition, what

00:14:21.120 --> 00:14:22.800
<v Speaker 1>we need to configure is we need to

00:14:22.800 --> 00:14:24.160
<v Speaker 1>configure a

00:14:24.240 --> 00:14:25.120
<v Speaker 1>exporter.

00:14:25.600 --> 00:14:27.360
<v Speaker 1>We need to configure an exporter so that

00:14:27.360 --> 00:14:29.360
<v Speaker 1>we can see where this output is going.

00:14:32.375 --> 00:14:33.895
<v Speaker 0>Versus code is is

00:14:36.375 --> 00:14:39.015
<v Speaker 1>Well, Versus code has gone a little rampant.

00:14:40.774 --> 00:14:41.334
<v Speaker 0>What?

00:14:43.014 --> 00:14:45.830
<v Speaker 0>Okay. We're good. We're good? Yeah. I didn't

00:14:45.830 --> 00:14:47.750
<v Speaker 2>touch it. Okay.

00:14:48.870 --> 00:14:50.790
<v Speaker 1>So first, let's check, make sure that it

00:14:50.790 --> 00:14:51.590
<v Speaker 1>compiles as is.

00:14:57.085 --> 00:14:58.445
<v Speaker 0>It's currently

00:14:58.685 --> 00:15:01.645
<v Speaker 0>building. Oh, we have a restarting

00:15:02.125 --> 00:15:03.085
<v Speaker 0>field container.

00:15:16.069 --> 00:15:17.990
<v Speaker 0>I think that was just that weird moment

00:15:17.990 --> 00:15:19.990
<v Speaker 0>where we had that weird paste three times

00:15:19.990 --> 00:15:21.670
<v Speaker 0>and I think we're Oh. They just back

00:15:21.670 --> 00:15:22.550
<v Speaker 0>up again.

00:15:23.029 --> 00:15:24.870
<v Speaker 2>Your database schema is out of date.

00:15:25.595 --> 00:15:27.355
<v Speaker 0>If that's just a a warning, we can

00:15:27.355 --> 00:15:28.955
<v Speaker 0>ignore that one. I've already

00:15:30.235 --> 00:15:31.675
<v Speaker 0>ignored that one.

00:15:32.395 --> 00:15:33.755
<v Speaker 0>Okay. Interesting.

00:15:34.075 --> 00:15:35.755
<v Speaker 0>We have a small problem.

00:15:40.420 --> 00:15:42.580
<v Speaker 2>Boots and oh, team server. I

00:15:43.140 --> 00:15:44.740
<v Speaker 0>mean, that's gonna show me the same that

00:15:44.740 --> 00:15:46.900
<v Speaker 0>I got anyway, but I'll just double check.

00:15:49.220 --> 00:15:51.540
<v Speaker 2>Make the same change locally and see what

00:15:51.540 --> 00:15:51.940
<v Speaker 2>it does.

00:15:53.964 --> 00:15:55.084
<v Speaker 1>Live debugging.

00:15:55.404 --> 00:15:57.084
<v Speaker 1>Live debugging is excellent.

00:15:57.565 --> 00:15:59.725
<v Speaker 0>Nothing ever works the first time.

00:16:00.125 --> 00:16:01.245
<v Speaker 1>No. Of course not.

00:16:03.084 --> 00:16:04.445
<v Speaker 0>So I just remove it. We'll make sure

00:16:04.445 --> 00:16:06.285
<v Speaker 0>that it goes back to a healthy state,

00:16:06.285 --> 00:16:06.845
<v Speaker 0>which

00:16:07.165 --> 00:16:09.324
<v Speaker 0>ah, I have insufficient

00:16:08.980 --> 00:16:11.220
<v Speaker 0>CPU potential. No.

00:16:14.020 --> 00:16:15.940
<v Speaker 1>I think I've found our one of our

00:16:15.940 --> 00:16:16.580
<v Speaker 1>problems.

00:16:16.900 --> 00:16:18.340
<v Speaker 1>Oh, it's serving now?

00:16:18.660 --> 00:16:21.300
<v Speaker 0>Yeah. But I removed the gRPC hotel stuff.

00:16:21.300 --> 00:16:23.595
<v Speaker 0>So So here's the other thing that we're

00:16:23.595 --> 00:16:26.235
<v Speaker 1>missing. There are some common init stuff that

00:16:26.235 --> 00:16:26.875
<v Speaker 1>we did

00:16:27.675 --> 00:16:30.555
<v Speaker 1>in the hotel con in the hotel config

00:16:31.514 --> 00:16:33.435
<v Speaker 1>in the example app that you have not

00:16:33.435 --> 00:16:35.240
<v Speaker 1>yet done here. So if you go back

00:16:35.240 --> 00:16:36.760
<v Speaker 1>to GitHub, and do you see where it

00:16:36.760 --> 00:16:38.120
<v Speaker 1>says config.init?

00:16:38.760 --> 00:16:40.840
<v Speaker 1>That is doing some boilerplate that we need

00:16:40.840 --> 00:16:41.720
<v Speaker 1>to also add.

00:16:42.120 --> 00:16:44.040
<v Speaker 1>So let's go look where that comes from.

00:16:44.040 --> 00:16:45.240
<v Speaker 1>So that comes from

00:16:46.120 --> 00:16:48.440
<v Speaker 1>it's common init code shared between the client

00:16:48.440 --> 00:16:49.560
<v Speaker 1>and server. So, yep,

00:16:50.404 --> 00:16:52.084
<v Speaker 1>that may be able to take you directly

00:16:52.084 --> 00:16:53.605
<v Speaker 1>there if GitHub let you.

00:16:53.925 --> 00:16:54.644
<v Speaker 1>Perfect.

00:16:56.884 --> 00:16:57.524
<v Speaker 1>So

00:16:57.845 --> 00:16:59.925
<v Speaker 1>this is the stuff that we also need

00:16:59.925 --> 00:17:01.365
<v Speaker 1>to put in,

00:17:01.925 --> 00:17:04.180
<v Speaker 1>except for this. This stuff is not specific

00:17:04.180 --> 00:17:06.020
<v Speaker 1>to gRPC. So instead of putting it in

00:17:06.020 --> 00:17:07.859
<v Speaker 1>the gRPC code, you should put this in

00:17:07.859 --> 00:17:08.740
<v Speaker 1>your main function.

00:17:09.220 --> 00:17:09.779
<v Speaker 1>So

00:17:10.099 --> 00:17:12.099
<v Speaker 1>you can literally just sleep all of that

00:17:12.099 --> 00:17:12.740
<v Speaker 1>in it,

00:17:13.619 --> 00:17:15.619
<v Speaker 1>and I would, like, call a function called

00:17:15.619 --> 00:17:17.619
<v Speaker 1>o Telenet or something. That way it's, like,

00:17:17.619 --> 00:17:19.755
<v Speaker 1>nicely modular and put it in your main

00:17:19.755 --> 00:17:20.395
<v Speaker 1>function.

00:17:21.195 --> 00:17:22.715
<v Speaker 0>Okay. So we go to our tank server

00:17:22.715 --> 00:17:25.435
<v Speaker 0>main. We're gonna drop in this edit function.

00:17:25.435 --> 00:17:27.595
<v Speaker 0>We're gonna give it a slightly better name.

00:17:27.994 --> 00:17:28.635
<v Speaker 1>Yep.

00:17:29.995 --> 00:17:31.675
<v Speaker 0>And let's see if that says.

00:17:32.070 --> 00:17:33.509
<v Speaker 0>Okay.

00:17:33.509 --> 00:17:34.070
<v Speaker 0>So

00:17:34.470 --> 00:17:36.629
<v Speaker 0>maybe missing a few things.

00:17:37.190 --> 00:17:39.110
<v Speaker 1>Yep. You're probably missing every single one of

00:17:39.110 --> 00:17:40.549
<v Speaker 1>those imports.

00:17:42.950 --> 00:17:44.870
<v Speaker 1>And even if you aren't, even if Odell

00:17:44.870 --> 00:17:46.470
<v Speaker 1>was not or even if the ESCO is

00:17:46.470 --> 00:17:47.794
<v Speaker 1>not able to figure it out, it'll resolve

00:17:47.794 --> 00:17:49.475
<v Speaker 1>the duplicates, so you'll be fine.

00:17:49.875 --> 00:17:51.715
<v Speaker 0>Yeah. I'm hoping when it saves, it'll just

00:17:51.875 --> 00:17:53.394
<v Speaker 0>yep. Yep. There you go.

00:17:54.434 --> 00:17:56.674
<v Speaker 1>Yeah. Wasn't able to figure out SDK trace.

00:17:56.995 --> 00:17:57.955
<v Speaker 1>So, unfortunately,

00:17:58.434 --> 00:18:00.835
<v Speaker 1>we have two packages named trace in OpenTelemetry.

00:18:00.835 --> 00:18:02.260
<v Speaker 1>One of them is SDK trace and the

00:18:02.260 --> 00:18:03.860
<v Speaker 1>other one is API trace.

00:18:04.260 --> 00:18:04.980
<v Speaker 1>So, therefore,

00:18:05.380 --> 00:18:07.780
<v Speaker 1>the name trace is not necessarily an ambiguous.

00:18:07.780 --> 00:18:09.779
<v Speaker 1>That's why we have SDK trace.

00:18:10.180 --> 00:18:12.180
<v Speaker 1>So this is actually a great opportunity to

00:18:12.180 --> 00:18:14.180
<v Speaker 1>talk about the difference between the API and

00:18:14.180 --> 00:18:15.220
<v Speaker 1>the SDK in hotel.

00:18:15.725 --> 00:18:17.405
<v Speaker 1>The API is what you use when you're

00:18:17.405 --> 00:18:19.725
<v Speaker 1>instrumenting your code. Right? So let's just say,

00:18:19.725 --> 00:18:21.085
<v Speaker 1>you know, this is a span, this is

00:18:21.085 --> 00:18:22.044
<v Speaker 1>a child span,

00:18:22.365 --> 00:18:24.365
<v Speaker 1>whereas the SDK is something that you configure

00:18:24.365 --> 00:18:26.205
<v Speaker 1>once per process initialization.

00:18:26.205 --> 00:18:27.485
<v Speaker 1>And the SDK is the thing that keeps

00:18:27.485 --> 00:18:29.085
<v Speaker 1>track of where am I writing out data.

00:18:29.085 --> 00:18:31.559
<v Speaker 1>Right? Like, what are my configuration options? Right?

00:18:31.559 --> 00:18:33.880
<v Speaker 1>So your application code doesn't need to worry

00:18:33.880 --> 00:18:36.120
<v Speaker 1>about the SDK except for in the one

00:18:36.120 --> 00:18:38.039
<v Speaker 1>place where you're where you're initializing your system

00:18:38.039 --> 00:18:39.159
<v Speaker 1>and configuring it.

00:18:40.440 --> 00:18:42.600
<v Speaker 1>And this means that libraries don't need to

00:18:42.600 --> 00:18:43.880
<v Speaker 1>have a

00:18:44.145 --> 00:18:45.585
<v Speaker 1>a OpenTelemetry

00:18:46.065 --> 00:18:48.544
<v Speaker 1>SDK. They just need to call the API.

00:18:49.185 --> 00:18:50.785
<v Speaker 2>So that's something I want to

00:18:51.665 --> 00:18:52.945
<v Speaker 2>get you to talk a little bit Liz,

00:18:52.945 --> 00:18:53.185
<v Speaker 2>was

00:18:54.065 --> 00:18:56.065
<v Speaker 2>so if what you just said means we

00:18:56.065 --> 00:18:58.980
<v Speaker 2>can start to lay in OpenTelemetry into this

00:18:58.980 --> 00:19:02.260
<v Speaker 2>open source software, and it can lay dormant

00:19:02.260 --> 00:19:04.340
<v Speaker 2>until somebody wants to turn it on or

00:19:04.340 --> 00:19:05.460
<v Speaker 2>hook it up to

00:19:06.020 --> 00:19:07.380
<v Speaker 2>Honeycomb or

00:19:07.700 --> 00:19:10.340
<v Speaker 2>LightStep or whatever. That's correct.

00:19:10.660 --> 00:19:11.300
<v Speaker 2>That's cool.

00:19:14.285 --> 00:19:16.605
<v Speaker 1>Okay. So does anyone know why my fatal

00:19:16.605 --> 00:19:17.644
<v Speaker 0>is showing me

00:19:20.925 --> 00:19:23.405
<v Speaker 1>Probably because your log package is not necessarily

00:19:23.405 --> 00:19:26.180
<v Speaker 1>the same log package package as as we're

00:19:26.180 --> 00:19:27.779
<v Speaker 1>as we're expecting. Just

00:19:28.260 --> 00:19:30.020
<v Speaker 2>see what autocomplete tells you that logger can

00:19:30.100 --> 00:19:31.380
<v Speaker 2>Oh, try logger.fatal.

00:19:31.380 --> 00:19:31.779
<v Speaker 1>You

00:19:32.340 --> 00:19:34.020
<v Speaker 1>have a logger here, so let's let's use

00:19:34.020 --> 00:19:36.180
<v Speaker 1>your logger. But that's initialized too. I guess

00:19:36.180 --> 00:19:37.940
<v Speaker 0>we can pass it into the hotel in

00:19:37.940 --> 00:19:39.779
<v Speaker 0>it. Right? So Sure.

00:19:39.940 --> 00:19:40.260
<v Speaker 0>Yep.

00:19:41.765 --> 00:19:44.165
<v Speaker 0>I don't go very often. Does someone wanna

00:19:44.165 --> 00:19:46.884
<v Speaker 0>take over for this little bit? What file?

00:19:48.085 --> 00:19:50.245
<v Speaker 0>I think Amy just volunteered. Go ahead. Which

00:19:50.245 --> 00:19:52.965
<v Speaker 2>file is that? Main go. Main dot go.

00:19:53.130 --> 00:19:54.730
<v Speaker 0>Yeah. So I guess we'd have to say

00:19:54.730 --> 00:19:56.570
<v Speaker 0>log and then put in a type or

00:19:57.770 --> 00:19:59.610
<v Speaker 1>You don't want log. That's going to cause

00:19:59.610 --> 00:20:00.730
<v Speaker 1>a type collision.

00:20:02.010 --> 00:20:03.610
<v Speaker 2>Yeah. I'll grab it in just a second.

00:20:03.690 --> 00:20:04.730
<v Speaker 2>Where's the interface?

00:20:09.715 --> 00:20:10.514
<v Speaker 1>Logger.

00:20:13.154 --> 00:20:14.754
<v Speaker 0>Pointer? Let's go pointer.

00:20:15.154 --> 00:20:17.394
<v Speaker 0>So while you're doing that, we did have

00:20:17.394 --> 00:20:19.794
<v Speaker 0>a question Yep. It'll work. A question if

00:20:19.794 --> 00:20:21.234
<v Speaker 0>we can tackle that right now.

00:20:21.955 --> 00:20:23.475
<v Speaker 1>Wait. Is it logger.logger,

00:20:23.475 --> 00:20:24.514
<v Speaker 1>or is it log.logger?

00:20:24.990 --> 00:20:27.070
<v Speaker 1>Pretty sure the package name is Logger is

00:20:27.070 --> 00:20:27.870
<v Speaker 2>loaded.

00:20:28.030 --> 00:20:29.470
<v Speaker 2>Let me fix it. No. But the the

00:20:29.470 --> 00:20:31.630
<v Speaker 1>package name for log for the capital l

00:20:31.630 --> 00:20:32.990
<v Speaker 1>logger is log.

00:20:33.150 --> 00:20:34.830
<v Speaker 1>The package name is log.

00:20:35.230 --> 00:20:35.950
<v Speaker 1>Is it?

00:20:36.510 --> 00:20:37.870
<v Speaker 2>Oh, I see. I see. Right.

00:20:41.965 --> 00:20:43.645
<v Speaker 1>We have a question saying if you have

00:20:43.645 --> 00:20:45.565
<v Speaker 1>the Prometheus interceptors not not enough, can it

00:20:45.565 --> 00:20:46.604
<v Speaker 1>feed OpenTelemetry?

00:20:47.164 --> 00:20:49.085
<v Speaker 1>Yes and no. Prometheus

00:20:49.085 --> 00:20:52.525
<v Speaker 1>can feed its metrics into the OpenTelemetry

00:20:52.525 --> 00:20:54.205
<v Speaker 1>collector to produce metrics,

00:20:55.279 --> 00:20:56.799
<v Speaker 1>But this should bring us to an excellent

00:20:56.799 --> 00:20:58.240
<v Speaker 1>occasion to talk about the difference between a

00:20:58.240 --> 00:20:59.440
<v Speaker 1>metric and a trace.

00:20:59.679 --> 00:21:01.840
<v Speaker 1>A metric is a pre aggregated point of

00:21:01.840 --> 00:21:03.919
<v Speaker 1>data. Right? Like, it's like a gauge that's,

00:21:03.919 --> 00:21:06.639
<v Speaker 1>you know, amount of CPU used or,

00:21:06.799 --> 00:21:08.480
<v Speaker 1>you know, amount of disk space used.

00:21:09.305 --> 00:21:11.305
<v Speaker 1>A or it's a counter, like number of

00:21:11.305 --> 00:21:12.345
<v Speaker 1>requests received.

00:21:12.825 --> 00:21:15.145
<v Speaker 1>Whereas tracing is a lot more granular. The

00:21:15.145 --> 00:21:18.825
<v Speaker 1>Prometheus exporter, by definition, is not capable of

00:21:18.825 --> 00:21:19.625
<v Speaker 1>producing

00:21:19.625 --> 00:21:21.785
<v Speaker 1>that fine grade data about the execution of

00:21:21.785 --> 00:21:23.420
<v Speaker 1>every request. I can tell you how many

00:21:23.420 --> 00:21:25.820
<v Speaker 1>requests you got, but, like, not how each

00:21:25.820 --> 00:21:27.019
<v Speaker 1>request executed.

00:21:28.060 --> 00:21:29.180
<v Speaker 1>So Prometheus

00:21:29.180 --> 00:21:32.140
<v Speaker 1>usage is not incompatible with OpenTelemetry. Right? Like,

00:21:32.140 --> 00:21:34.220
<v Speaker 1>you can feed Prometheus metrics into the hotel

00:21:34.220 --> 00:21:36.060
<v Speaker 1>collector onto your metrics platform

00:21:36.060 --> 00:21:38.285
<v Speaker 1>of choice. It's just that, you know, you

00:21:38.285 --> 00:21:40.125
<v Speaker 1>you would rather part of why we're going

00:21:40.125 --> 00:21:41.965
<v Speaker 1>through this exercise is to get that higher

00:21:41.965 --> 00:21:43.245
<v Speaker 1>granularity data.

00:21:45.485 --> 00:21:47.085
<v Speaker 0>Excellent. And I think

00:21:47.885 --> 00:21:49.885
<v Speaker 0>Amy's code has now got the hotel in

00:21:49.885 --> 00:21:50.445
<v Speaker 0>it happy.

00:21:50.880 --> 00:21:53.200
<v Speaker 0>So I'm assuming we can

00:21:53.600 --> 00:21:55.920
<v Speaker 0>after our logger here, let's just Yeah. With

00:21:55.920 --> 00:21:57.280
<v Speaker 0>the help me. We don't need Yeah. That

00:21:57.280 --> 00:21:59.680
<v Speaker 0>verification anymore as that we can just pass

00:21:59.680 --> 00:22:01.200
<v Speaker 0>in logger.

00:22:01.600 --> 00:22:02.320
<v Speaker 1>Yep.

00:22:02.720 --> 00:22:03.840
<v Speaker 1>I think that should do it.

00:22:05.755 --> 00:22:06.715
<v Speaker 0>Oh, I

00:22:08.315 --> 00:22:08.955
<v Speaker 0>think you want

00:22:09.675 --> 00:22:10.715
<v Speaker 2>I don't know if it needs to be

00:22:10.715 --> 00:22:12.394
<v Speaker 2>a pointer, but it'll do for now.

00:22:13.835 --> 00:22:15.675
<v Speaker 1>It's not Sure. Why not? Anymore, so I'm

00:22:15.675 --> 00:22:18.635
<v Speaker 0>not gonna complain. Okay. So that looks like

00:22:19.150 --> 00:22:20.830
<v Speaker 0>Versus code is happy, which is usually a

00:22:20.830 --> 00:22:22.830
<v Speaker 0>good indicator. I'm happy when it's happy. So

00:22:23.070 --> 00:22:24.269
<v Speaker 1>What does still think?

00:22:25.790 --> 00:22:28.110
<v Speaker 0>Let's pop over to tilt at

00:22:28.429 --> 00:22:30.110
<v Speaker 2>Tilt's always so critical.

00:22:31.870 --> 00:22:34.110
<v Speaker 0>We have a restart and failed container.

00:22:35.155 --> 00:22:36.914
<v Speaker 2>Did did it just build?

00:22:39.715 --> 00:22:41.075
<v Speaker 0>So it's currently

00:22:41.235 --> 00:22:43.395
<v Speaker 0>in this orange. Okay. Yeah. So it may

00:22:45.715 --> 00:22:47.075
<v Speaker 0>oh, wait. Wait. What was it?

00:22:49.650 --> 00:22:50.290
<v Speaker 0>K.

00:22:50.450 --> 00:22:53.490
<v Speaker 0>That might be it. Let's see. Alright. So

00:22:53.490 --> 00:22:56.530
<v Speaker 2>what's it complaining about? It's saying new config

00:22:56.530 --> 00:22:58.450
<v Speaker 1>file found, but that's info level.

00:22:59.570 --> 00:23:01.570
<v Speaker 1>Do we have the pod logs? Do the

00:23:01.570 --> 00:23:03.010
<v Speaker 1>pod logs tell us that there's, like, some

00:23:03.010 --> 00:23:04.610
<v Speaker 1>kind of a crash or something?

00:23:06.635 --> 00:23:08.875
<v Speaker 0>Okay. Let's take a look at that. So

00:23:08.955 --> 00:23:11.514
<v Speaker 0>we can do let's get pods.

00:23:14.875 --> 00:23:17.115
<v Speaker 0>Let's grab the most recent one. I think

00:23:17.115 --> 00:23:18.875
<v Speaker 0>that should match with what we get there

00:23:18.875 --> 00:23:20.690
<v Speaker 0>so we can try describe and see if

00:23:20.690 --> 00:23:22.130
<v Speaker 0>there's any other information.

00:23:25.730 --> 00:23:28.370
<v Speaker 0>Yeah. It looks like it is just crashing.

00:23:30.610 --> 00:23:32.210
<v Speaker 2>There is a Well, there are logs and

00:23:32.210 --> 00:23:33.730
<v Speaker 2>metrics. This would be so

00:23:34.610 --> 00:23:35.010
<v Speaker 2>easy.

00:23:38.235 --> 00:23:40.634
<v Speaker 0>So we're not really getting anything useful.

00:23:40.635 --> 00:23:42.075
<v Speaker 0>Now if we take out

00:23:42.875 --> 00:23:43.754
<v Speaker 0>and it

00:23:44.075 --> 00:23:45.595
<v Speaker 0>does well, if we take out the the

00:23:45.595 --> 00:23:46.875
<v Speaker 0>g r p c stuff, it does work.

00:23:46.875 --> 00:23:48.075
<v Speaker 0>So I'm trying to work out It it

00:23:48.075 --> 00:23:49.595
<v Speaker 2>does with the build it out there. Okay.

00:23:50.190 --> 00:23:52.590
<v Speaker 1>So we were able to run OTELLONIT, but

00:23:52.590 --> 00:23:54.749
<v Speaker 1>not the gRPC interceptor.

00:23:54.750 --> 00:23:56.429
<v Speaker 1>Can we can we try that to verify?

00:23:56.429 --> 00:23:58.190
<v Speaker 0>We can try that. So let's Yes. Let's

00:23:58.190 --> 00:24:00.190
<v Speaker 1>take out the gRPC interceptors.

00:24:01.549 --> 00:24:03.745
<v Speaker 1>Oops. You commented out one too many lines.

00:24:03.745 --> 00:24:06.065
<v Speaker 1>Yep. There we go. Okay. So let's try

00:24:06.065 --> 00:24:07.825
<v Speaker 1>that to see whether we're at least able

00:24:07.825 --> 00:24:09.665
<v Speaker 1>to initialize the hotel boilerplate.

00:24:18.560 --> 00:24:21.040
<v Speaker 0>Yep. It's green. It's health it's healthy.

00:24:21.280 --> 00:24:22.320
<v Speaker 1>Interesting.

00:24:22.720 --> 00:24:24.800
<v Speaker 1>Okay. So there's something about the interceptor that

00:24:24.800 --> 00:24:27.125
<v Speaker 1>is not happy. So let's try the theory

00:24:27.125 --> 00:24:28.084
<v Speaker 1>that maybe

00:24:28.245 --> 00:24:30.404
<v Speaker 1>trying to have two different interceptors is not

00:24:30.404 --> 00:24:32.245
<v Speaker 1>working. So let's comment out that and then

00:24:32.245 --> 00:24:34.325
<v Speaker 1>comment this and see whether that works.

00:24:35.445 --> 00:24:38.085
<v Speaker 1>I clearly don't know enough about gRPC interceptors.

00:24:38.820 --> 00:24:40.899
<v Speaker 1>This is a research thing for me to

00:24:40.899 --> 00:24:43.539
<v Speaker 1>learn about more later. It's green. I think

00:24:43.539 --> 00:24:44.419
<v Speaker 0>it works.

00:24:44.740 --> 00:24:46.259
<v Speaker 1>Did it recompile already?

00:24:47.139 --> 00:24:47.859
<v Speaker 1>Yeah.

00:24:48.419 --> 00:24:50.100
<v Speaker 1>Okay. So the answer is you cannot have

00:24:50.100 --> 00:24:52.259
<v Speaker 1>more than one interceptor. GRPC will crash the

00:24:52.259 --> 00:24:52.820
<v Speaker 1>server

00:24:53.059 --> 00:24:54.554
<v Speaker 1>without an error message if you have more

00:24:54.554 --> 00:24:56.474
<v Speaker 1>than one interceptor. Okay. Great. So

00:24:57.115 --> 00:24:59.114
<v Speaker 1>now let's fire up the CLI,

00:24:59.115 --> 00:25:01.114
<v Speaker 1>and let's establish a connection.

00:25:04.154 --> 00:25:04.794
<v Speaker 0>Okay.

00:25:04.955 --> 00:25:05.594
<v Speaker 0>So

00:25:06.554 --> 00:25:08.360
<v Speaker 0>I I made a small just fail that

00:25:08.360 --> 00:25:10.360
<v Speaker 0>hits the server. So that is called a

00:25:10.360 --> 00:25:11.399
<v Speaker 0>hardware list.

00:25:11.799 --> 00:25:13.080
<v Speaker 0>So we should have

00:25:13.160 --> 00:25:13.799
<v Speaker 0>some

00:25:14.280 --> 00:25:15.159
<v Speaker 0>something somewhere.

00:25:15.400 --> 00:25:17.720
<v Speaker 1>Okay. Great. Let's find out whether we got

00:25:17.720 --> 00:25:18.679
<v Speaker 1>a gRPC

00:25:20.255 --> 00:25:21.855
<v Speaker 1>let's let's find out whether we got a

00:25:21.855 --> 00:25:22.975
<v Speaker 1>gRPC call

00:25:23.535 --> 00:25:25.775
<v Speaker 1>recorded to our terminal.

00:25:26.975 --> 00:25:29.215
<v Speaker 1>So let's go over to the That's file.

00:25:29.215 --> 00:25:30.975
<v Speaker 1>Yep. Uh-huh. Yes. We did.

00:25:32.175 --> 00:25:32.575
<v Speaker 0>Yay.

00:25:33.529 --> 00:25:35.850
<v Speaker 0>Okay. Could could could we cover that then?

00:25:35.850 --> 00:25:38.249
<v Speaker 0>So we are not actually writing

00:25:38.250 --> 00:25:41.610
<v Speaker 0>that trace anywhere. So by default, the interceptor

00:25:41.610 --> 00:25:43.609
<v Speaker 0>just drops that into standard out?

00:25:44.169 --> 00:25:47.025
<v Speaker 1>The interceptor does not, but the boilerplate, if

00:25:47.025 --> 00:25:49.105
<v Speaker 1>you go back to the boilerplate in the

00:25:51.025 --> 00:25:52.065
<v Speaker 1>In Yep. Main.

00:25:52.545 --> 00:25:53.905
<v Speaker 1>In main dot go,

00:25:54.385 --> 00:25:56.945
<v Speaker 1>what you'll see is that it's configured

00:25:58.545 --> 00:25:59.905
<v Speaker 1>to write to

00:26:00.625 --> 00:26:02.990
<v Speaker 1>it's it's configured to write to write to

00:26:02.990 --> 00:26:03.790
<v Speaker 1>standard out.

00:26:04.510 --> 00:26:06.350
<v Speaker 1>We can change that. We can send this

00:26:06.350 --> 00:26:08.110
<v Speaker 1>output to Honeycomb instead.

00:26:09.550 --> 00:26:11.710
<v Speaker 1>Amy, do you have the Honeycomb API key?

00:26:11.950 --> 00:26:14.590
<v Speaker 2>I do. Let's Okay. Why don't you research

00:26:14.750 --> 00:26:16.350
<v Speaker 1>why don't we go find the Honeycomb API

00:26:16.350 --> 00:26:17.070
<v Speaker 1>key? Got

00:26:17.630 --> 00:26:20.125
<v Speaker 2>it. I'll send it to David so he

00:26:20.125 --> 00:26:21.805
<v Speaker 2>can, like, not try not to put it

00:26:21.805 --> 00:26:22.525
<v Speaker 2>on the screen.

00:26:23.645 --> 00:26:25.725
<v Speaker 0>Yep. That that's that's alright.

00:26:25.965 --> 00:26:27.165
<v Speaker 0>We can work I can make that work.

00:26:27.165 --> 00:26:28.205
<v Speaker 2>I'll I'll Slack it to you in the

00:26:28.205 --> 00:26:30.445
<v Speaker 0>background. Okay. So what are the first steps

00:26:30.445 --> 00:26:32.765
<v Speaker 0>then to sending this to to Honeycomb?

00:26:33.130 --> 00:26:34.729
<v Speaker 1>Okay. So,

00:26:34.730 --> 00:26:35.450
<v Speaker 1>again,

00:26:35.690 --> 00:26:37.530
<v Speaker 1>like, we like to walk through the journey

00:26:37.530 --> 00:26:39.610
<v Speaker 1>as if we were a user. So I

00:26:39.610 --> 00:26:41.610
<v Speaker 1>happen to know this, but let's go ahead

00:26:41.610 --> 00:26:42.169
<v Speaker 1>to

00:26:42.570 --> 00:26:44.409
<v Speaker 1>GitHub Honeycomb v o

00:26:44.730 --> 00:26:45.610
<v Speaker 1>OpenTelemetry

00:26:45.610 --> 00:26:46.490
<v Speaker 1>export or go.

00:26:47.985 --> 00:26:49.905
<v Speaker 2>I I don't currently have admin, so that

00:26:49.905 --> 00:26:52.145
<v Speaker 2>is a API key I found. So if

00:26:52.145 --> 00:26:53.745
<v Speaker 2>we accidentally expose it, we're gonna have to

00:26:53.745 --> 00:26:55.345
<v Speaker 2>go bother people to clean it up. So

00:26:55.505 --> 00:26:57.184
<v Speaker 1>You can create a new you can create

00:26:57.184 --> 00:26:59.665
<v Speaker 1>a new API key. I can. Just create

00:26:59.665 --> 00:27:01.425
<v Speaker 1>a new write only API key, and then

00:27:01.425 --> 00:27:02.705
<v Speaker 1>it's fine if it appears on stream.

00:27:03.280 --> 00:27:04.240
<v Speaker 1>It's

00:27:06.880 --> 00:27:10.080
<v Speaker 1>k. Alright. So just set that up. I

00:27:10.080 --> 00:27:11.520
<v Speaker 2>must be a team owner to create and

00:27:11.520 --> 00:27:12.799
<v Speaker 2>edit API keys.

00:27:12.880 --> 00:27:15.920
<v Speaker 1>Okay. Why don't I sneak Let me let

00:27:15.920 --> 00:27:16.880
<v Speaker 2>me just give me a second. I might

00:27:16.880 --> 00:27:17.840
<v Speaker 2>go get this one real quick.

00:27:19.745 --> 00:27:20.864
<v Speaker 2>I know people.

00:27:22.065 --> 00:27:23.664
<v Speaker 2>Although he's offline. So

00:27:23.985 --> 00:27:25.904
<v Speaker 2>Alright. I'm just gonna start copying the basic

00:27:25.904 --> 00:27:28.224
<v Speaker 0>code and see what happens. So Excellent.

00:27:28.945 --> 00:27:30.945
<v Speaker 2>That's how things are done these days. Yeah.

00:27:30.945 --> 00:27:31.904
<v Speaker 0>I'm okay with that bit.

00:27:32.470 --> 00:27:36.389
<v Speaker 1>Yep. It's completely normal for principal engineers to

00:27:36.389 --> 00:27:36.869
<v Speaker 1>do.

00:27:38.549 --> 00:27:40.149
<v Speaker 2>So you copy the case to me, but

00:27:40.149 --> 00:27:41.509
<v Speaker 0>then you kinda hammer on it for a

00:27:41.509 --> 00:27:42.950
<v Speaker 2>while, make it look okay.

00:27:44.565 --> 00:27:46.164
<v Speaker 0>Does this code go in our hotel in

00:27:46.164 --> 00:27:48.244
<v Speaker 0>it then and not in the gRPC stuff?

00:27:49.365 --> 00:27:51.845
<v Speaker 0>Yep. I'm assuming we maybe replace this part

00:27:51.845 --> 00:27:52.565
<v Speaker 0>here.

00:27:54.485 --> 00:27:56.724
<v Speaker 0>Let's mark this out for now.

00:27:59.205 --> 00:27:59.524
<v Speaker 1>Yep.

00:28:00.270 --> 00:28:01.950
<v Speaker 1>Similarly, your dataset.

00:28:04.590 --> 00:28:05.230
<v Speaker 0>Yep.

00:28:05.950 --> 00:28:08.350
<v Speaker 1>Don't turn on with debug enabled. We already

00:28:08.350 --> 00:28:08.910
<v Speaker 1>have

00:28:09.630 --> 00:28:11.790
<v Speaker 1>we already have, whatchamacallit,

00:28:14.535 --> 00:28:16.375
<v Speaker 1>standard out output. So

00:28:16.695 --> 00:28:18.695
<v Speaker 1>we don't we don't also need this,

00:28:19.255 --> 00:28:21.015
<v Speaker 1>and it's a handy demonstration.

00:28:21.655 --> 00:28:24.055
<v Speaker 0>Okay. But I do need the bracket. What's

00:28:24.055 --> 00:28:25.895
<v Speaker 1>your team name? Is it Equinix?

00:28:26.215 --> 00:28:26.535
<v Speaker 1>Yeah.

00:28:27.919 --> 00:28:28.639
<v Speaker 1>Great.

00:28:28.880 --> 00:28:30.480
<v Speaker 0>Okay. So now I need to understand what

00:28:30.480 --> 00:28:32.160
<v Speaker 0>that honeycomb is. So I'm just gonna copy

00:28:32.160 --> 00:28:33.119
<v Speaker 0>this URL

00:28:33.120 --> 00:28:35.359
<v Speaker 0>and hope that that magically does it.

00:28:38.320 --> 00:28:40.559
<v Speaker 0>And paste this and call this Yep. Honeycomb.

00:28:41.205 --> 00:28:42.004
<v Speaker 2>Yep.

00:28:42.164 --> 00:28:44.325
<v Speaker 2>I I also Oh, no. It's slash honeycomb.

00:28:44.325 --> 00:28:46.244
<v Speaker 1>It's slash honeycomb. Okay. Okay.

00:28:48.485 --> 00:28:51.284
<v Speaker 1>We took care of that for you. Yep.

00:28:51.605 --> 00:28:54.325
<v Speaker 0>Codependencies have always confused me. I try my

00:28:54.325 --> 00:28:54.485
<v Speaker 0>best.

00:28:56.149 --> 00:28:56.789
<v Speaker 1>Okay.

00:28:57.990 --> 00:28:59.190
<v Speaker 1>Finding an owner,

00:28:59.590 --> 00:29:01.029
<v Speaker 1>suing in as them.

00:29:02.390 --> 00:29:04.390
<v Speaker 2>He he's actually poking at it right now

00:29:04.390 --> 00:29:05.190
<v Speaker 2>too. Oh. So

00:29:06.390 --> 00:29:07.029
<v Speaker 1>Okay.

00:29:07.750 --> 00:29:09.669
<v Speaker 1>Great. In my case, I will leave leave

00:29:09.669 --> 00:29:10.390
<v Speaker 1>pseudo mode.

00:29:11.295 --> 00:29:14.255
<v Speaker 1>Okay. And you want to change your dataset

00:29:14.255 --> 00:29:18.415
<v Speaker 1>to be a descriptive dataset like OpenTelemetry Tinkerbell

00:29:18.415 --> 00:29:19.215
<v Speaker 1>or similar.

00:29:22.575 --> 00:29:24.909
<v Speaker 1>Yep. Or, like, dev Tinkerbell maybe since we're

00:29:24.909 --> 00:29:26.590
<v Speaker 1>using this for dev right now. You'll in

00:29:26.590 --> 00:29:28.429
<v Speaker 1>a production environment, you want to change this

00:29:28.429 --> 00:29:31.230
<v Speaker 1>to be configurable with a environment variable or

00:29:31.230 --> 00:29:31.870
<v Speaker 1>similar. But

00:29:32.669 --> 00:29:34.750
<v Speaker 1>and our service name is Tinkerbell.

00:29:36.055 --> 00:29:37.815
<v Speaker 2>But would would we wanna include things like

00:29:37.815 --> 00:29:39.575
<v Speaker 2>the environment name and stuff in that, or

00:29:39.575 --> 00:29:41.175
<v Speaker 2>would that just be the app and then

00:29:41.175 --> 00:29:43.335
<v Speaker 2>we could use other dimensions for, like You

00:29:43.335 --> 00:29:45.655
<v Speaker 1>probably want to have one dataset for environment,

00:29:45.655 --> 00:29:47.495
<v Speaker 1>so you would want to programmatically construct your

00:29:47.495 --> 00:29:48.135
<v Speaker 1>dataset name.

00:29:49.190 --> 00:29:50.870
<v Speaker 0>Okay. Can we kinda just break down some

00:29:50.870 --> 00:29:51.990
<v Speaker 0>of these terms, Jennifer?

00:29:52.390 --> 00:29:54.070
<v Speaker 0>Well, for me, that's not familiar. So when

00:29:54.070 --> 00:29:56.870
<v Speaker 0>we say dataset, based on the conversation that

00:29:56.870 --> 00:29:58.310
<v Speaker 0>you two are having, is that like a

00:29:58.310 --> 00:30:00.950
<v Speaker 0>table, a database, something that groups It's essentially

00:30:00.950 --> 00:30:03.270
<v Speaker 1>a database. Yes. It's a kind of unit

00:30:03.270 --> 00:30:05.304
<v Speaker 1>of of being able to look at your

00:30:05.304 --> 00:30:07.144
<v Speaker 1>data at least within Honeycomb.

00:30:07.225 --> 00:30:09.385
<v Speaker 1>So this concept does not necessarily have to

00:30:09.385 --> 00:30:10.664
<v Speaker 1>exist in OpenTelemetry,

00:30:10.664 --> 00:30:13.065
<v Speaker 1>which is why it's specific to the exporter.

00:30:14.265 --> 00:30:16.345
<v Speaker 0>Okay. And the service name, should that reflect

00:30:16.345 --> 00:30:18.985
<v Speaker 0>that this is the Tink server? Yes. Right.

00:30:18.985 --> 00:30:19.144
<v Speaker 0>Okay.

00:30:20.570 --> 00:30:22.970
<v Speaker 0>So we have our dev tanker bell database.

00:30:22.970 --> 00:30:24.890
<v Speaker 0>We're tagging these traces that they come from

00:30:24.890 --> 00:30:27.049
<v Speaker 0>a service called tank server. Yep.

00:30:28.010 --> 00:30:29.370
<v Speaker 0>We still have a little bit of red

00:30:29.370 --> 00:30:30.650
<v Speaker 0>squiggles. So let me see if I can

00:30:30.650 --> 00:30:32.250
<v Speaker 0>work that one out just now. So the

00:30:32.250 --> 00:30:34.570
<v Speaker 0>import seems to be okay, but this is

00:30:34.570 --> 00:30:35.130
<v Speaker 0>complaining.

00:30:38.035 --> 00:30:39.235
<v Speaker 1>Okay. So the dataset

00:30:40.115 --> 00:30:43.155
<v Speaker 1>Oh, it's because you already instantiated a another

00:30:43.155 --> 00:30:45.794
<v Speaker 1>exporter called standard out. So I would I

00:30:45.794 --> 00:30:48.595
<v Speaker 1>would, like, change exporter there just above to

00:30:48.595 --> 00:30:50.035
<v Speaker 1>say standard to say, like

00:30:51.160 --> 00:30:52.679
<v Speaker 1>yeah. So this is,

00:30:53.000 --> 00:30:53.720
<v Speaker 1>yep.

00:30:55.720 --> 00:30:57.720
<v Speaker 0>And then And then again there.

00:31:00.440 --> 00:31:01.559
<v Speaker 1>And then now

00:31:02.200 --> 00:31:04.840
<v Speaker 1>you want to pass another STD trace with

00:31:04.840 --> 00:31:05.320
<v Speaker 1>syncR,

00:31:07.085 --> 00:31:10.205
<v Speaker 1>Line 66. Yep. And pass in addition to

00:31:10.205 --> 00:31:12.445
<v Speaker 1>passing the standard out exporter, you want to

00:31:12.605 --> 00:31:13.164
<v Speaker 1>yep.

00:31:14.605 --> 00:31:14.924
<v Speaker 1>With

00:31:18.820 --> 00:31:19.780
<v Speaker 0>thinker,

00:31:19.780 --> 00:31:21.700
<v Speaker 0>and then we pass in our honeycomb. Right?

00:31:21.700 --> 00:31:23.220
<v Speaker 1>Yep. That's correct.

00:31:24.100 --> 00:31:25.059
<v Speaker 1>There you go.

00:31:26.100 --> 00:31:27.700
<v Speaker 1>That should roughly do it, and now we

00:31:27.700 --> 00:31:29.380
<v Speaker 1>just need that API key.

00:31:29.540 --> 00:31:31.460
<v Speaker 1>And as long as it's configured to be

00:31:31.460 --> 00:31:33.905
<v Speaker 1>a write only API key, it's safe to

00:31:33.905 --> 00:31:35.905
<v Speaker 1>expose it relatively straight to expose it on

00:31:35.905 --> 00:31:37.825
<v Speaker 1>stream, and you can just revoke it afterwards.

00:31:38.145 --> 00:31:40.304
<v Speaker 1>Worst case, someone writes, a hundred events into

00:31:40.304 --> 00:31:41.424
<v Speaker 1>your Honeycomb dataset.

00:31:42.304 --> 00:31:43.024
<v Speaker 1>Whatever.

00:31:43.585 --> 00:31:46.304
<v Speaker 0>Okay. So the Honeycomb exporter doesn't seem to

00:31:46.304 --> 00:31:47.985
<v Speaker 0>have a close. Can I just comment a

00:31:47.985 --> 00:31:48.145
<v Speaker 0>sec?

00:31:49.120 --> 00:31:52.240
<v Speaker 1>It should have a oh, that's out of

00:31:52.240 --> 00:31:53.519
<v Speaker 1>data documentation.

00:31:55.200 --> 00:31:56.720
<v Speaker 1>Let me see what that that ought to

00:31:56.720 --> 00:31:58.399
<v Speaker 1>be. I believe

00:31:58.640 --> 00:32:00.880
<v Speaker 1>that might be

00:32:05.725 --> 00:32:07.964
<v Speaker 1>let me check that. One second.

00:32:09.965 --> 00:32:11.485
<v Speaker 1>It does not have a close. It does

00:32:11.485 --> 00:32:12.044
<v Speaker 1>have a shutdown.

00:32:16.640 --> 00:32:18.480
<v Speaker 0>Okay. Shut down. Okay.

00:32:18.720 --> 00:32:19.920
<v Speaker 0>And I think

00:32:20.640 --> 00:32:22.960
<v Speaker 0>this is what we actually grabbed from the

00:32:22.960 --> 00:32:25.120
<v Speaker 0>honeycomb doc. So I'm gonna pull down the

00:32:25.120 --> 00:32:26.960
<v Speaker 0>other one, which I I think I just

00:32:26.960 --> 00:32:28.320
<v Speaker 0>got an update reference to.

00:32:29.455 --> 00:32:32.015
<v Speaker 1>Oh, yeah. Yeah. Yep. So that needs to

00:32:32.015 --> 00:32:32.815
<v Speaker 1>go down.

00:32:32.975 --> 00:32:33.615
<v Speaker 1>Yep.

00:32:33.935 --> 00:32:34.815
<v Speaker 0>And

00:32:35.695 --> 00:32:38.175
<v Speaker 1>You want that error nil above.

00:32:39.935 --> 00:32:42.735
<v Speaker 1>Because, otherwise, if creating the honeycomb exporter fails,

00:32:42.735 --> 00:32:45.030
<v Speaker 1>you want to have it fail out before

00:32:45.030 --> 00:32:45.350
<v Speaker 1>you

00:32:49.429 --> 00:32:51.270
<v Speaker 0>Sorry. Can you say that again? The line

00:32:51.270 --> 00:32:54.549
<v Speaker 1>65 to 67, move that above the instantiation

00:32:54.549 --> 00:32:56.630
<v Speaker 1>of the trace provider. Because, otherwise, if the

00:32:56.630 --> 00:32:57.510
<v Speaker 1>honeycomb

00:32:57.695 --> 00:32:59.135
<v Speaker 1>order instantiation

00:32:59.135 --> 00:32:59.855
<v Speaker 1>fails,

00:33:00.415 --> 00:33:02.655
<v Speaker 1>you want to know about it before you

00:33:03.215 --> 00:33:05.135
<v Speaker 2>Yeah. You have you have it stubbed to

00:33:05.135 --> 00:33:08.255
<v Speaker 2>underscore on the That means the context. Yep.

00:33:10.830 --> 00:33:12.830
<v Speaker 1>Yep. Background context is fine.

00:33:13.630 --> 00:33:14.590
<v Speaker 0>Why is it not

00:33:16.270 --> 00:33:17.789
<v Speaker 1>You don't have it loaded yet.

00:33:18.030 --> 00:33:21.230
<v Speaker 1>Or no. It's context. Like, context dot.

00:33:22.985 --> 00:33:25.865
<v Speaker 1>Okay. There we go. Oh,

00:33:26.745 --> 00:33:27.945
<v Speaker 0>that's not completed Do

00:33:28.585 --> 00:33:29.785
<v Speaker 1>we have the API key?

00:33:30.185 --> 00:33:32.265
<v Speaker 2>Yeah. David has it. You you can paste

00:33:32.265 --> 00:33:32.985
<v Speaker 2>that one.

00:33:33.785 --> 00:33:34.905
<v Speaker 2>I'm gonna add Did you send that? So

00:33:34.905 --> 00:33:35.945
<v Speaker 2>I can clean it up too. Yeah. Just

00:33:35.945 --> 00:33:37.225
<v Speaker 2>I just slapped it to you.

00:33:38.429 --> 00:33:39.870
<v Speaker 0>Okay. Do you want me to just paste

00:33:39.870 --> 00:33:40.590
<v Speaker 2>it in?

00:33:41.630 --> 00:33:43.629
<v Speaker 0>I'll just move this over here.

00:33:45.870 --> 00:33:47.470
<v Speaker 0>And this is a write only one, I

00:33:47.470 --> 00:33:48.510
<v Speaker 0>can share it, or do you want me

00:33:48.510 --> 00:33:48.669
<v Speaker 0>to

00:33:50.350 --> 00:33:51.229
<v Speaker 2>It is

00:33:51.630 --> 00:33:54.385
<v Speaker 2>no. It's fine for now. Yeah. I'll I'll

00:33:54.465 --> 00:33:55.905
<v Speaker 2>If there is a problem with it, we'll

00:33:55.905 --> 00:33:57.345
<v Speaker 1>forgive it on the back end. Don't worry

00:33:57.345 --> 00:33:57.985
<v Speaker 1>about it.

00:34:00.145 --> 00:34:02.465
<v Speaker 0>Alright. So I've dropped it in,

00:34:03.265 --> 00:34:05.105
<v Speaker 0>and I have closed that file. So we

00:34:05.105 --> 00:34:06.785
<v Speaker 0>can't open that file anymore. And if we

00:34:06.785 --> 00:34:08.705
<v Speaker 0>do, we'll just deprecate the key later. So

00:34:08.705 --> 00:34:11.080
<v Speaker 0>it's okay. Yep. Okay. Great. So now

00:34:11.880 --> 00:34:13.480
<v Speaker 1>let's go to tilt

00:34:13.560 --> 00:34:14.120
<v Speaker 1>and

00:34:15.000 --> 00:34:17.400
<v Speaker 1>having hit the having hit the endpoint.

00:34:19.639 --> 00:34:22.324
<v Speaker 1>So Yep. Okay. So we're serving. We successfully

00:34:22.324 --> 00:34:24.565
<v Speaker 1>in the Honeycomb Explorer. It hasn't failed. So

00:34:24.565 --> 00:34:26.244
<v Speaker 1>let's call the endpoint.

00:34:29.204 --> 00:34:30.005
<v Speaker 1>Oh.

00:34:31.364 --> 00:34:32.885
<v Speaker 1>Oh, try again, I think.

00:34:33.924 --> 00:34:35.525
<v Speaker 2>Yeah. There we go. Better. Okay.

00:34:36.530 --> 00:34:37.730
<v Speaker 2>Where is my email?

00:34:38.210 --> 00:34:39.810
<v Speaker 2>Gonna try to add David real quick to

00:34:39.810 --> 00:34:41.489
<v Speaker 0>an email. So if I understand what's just

00:34:41.489 --> 00:34:44.530
<v Speaker 0>happened there, we've added the Honeycomb exporter

00:34:44.530 --> 00:34:46.690
<v Speaker 0>to the gRPC plug in, and it's now

00:34:46.690 --> 00:34:48.609
<v Speaker 0>writing the trace data when we ever whenever

00:34:48.609 --> 00:34:50.770
<v Speaker 0>we had the tank server gRPC API and

00:34:50.770 --> 00:34:51.969
<v Speaker 0>sending that to Honeycomb.

00:34:52.585 --> 00:34:53.865
<v Speaker 1>That is correct.

00:34:54.665 --> 00:34:55.385
<v Speaker 1>Okay.

00:34:56.185 --> 00:34:57.065
<v Speaker 1>Unfortunately,

00:34:57.065 --> 00:34:58.665
<v Speaker 1>I am not yet seeing your data on

00:34:58.665 --> 00:35:00.585
<v Speaker 1>the back end, so let's see whether there's

00:35:00.585 --> 00:35:01.865
<v Speaker 1>any errors or anything.

00:35:04.185 --> 00:35:04.665
<v Speaker 1>Oh,

00:35:05.720 --> 00:35:07.880
<v Speaker 1>that doesn't look good. That sounds like we

00:35:07.880 --> 00:35:09.480
<v Speaker 1>have some kind of fatal error.

00:35:09.799 --> 00:35:12.039
<v Speaker 0>Oh, yep. Here we go. So our tell

00:35:12.200 --> 00:35:14.119
<v Speaker 0>is telling us that something went wrong.

00:35:18.119 --> 00:35:18.760
<v Speaker 1>Oh,

00:35:19.079 --> 00:35:20.359
<v Speaker 1>your defer is bad.

00:35:20.760 --> 00:35:21.079
<v Speaker 1>Oh.

00:35:21.714 --> 00:35:22.915
<v Speaker 1>I see the problem.

00:35:23.234 --> 00:35:25.395
<v Speaker 1>So what happened it out for now. Right?

00:35:26.115 --> 00:35:27.555
<v Speaker 2>Like, it's not the end of the world.

00:35:27.555 --> 00:35:29.875
<v Speaker 1>Yeah. You want to move that stuff into

00:35:29.875 --> 00:35:31.795
<v Speaker 1>your shutdown sequence.

00:35:31.795 --> 00:35:34.115
<v Speaker 1>Right? The problem is that it deferred at

00:35:34.115 --> 00:35:35.954
<v Speaker 1>the end of your main function, whereas your

00:35:35.954 --> 00:35:37.075
<v Speaker 1>main or, like, your

00:35:37.850 --> 00:35:40.650
<v Speaker 1>does that make sense? So the The defer

00:35:40.650 --> 00:35:42.010
<v Speaker 2>runs at the end of the function it's

00:35:42.010 --> 00:35:43.930
<v Speaker 2>in. Yeah. And you want you want it

00:35:43.930 --> 00:35:45.370
<v Speaker 2>on the to to run at the end

00:35:45.370 --> 00:35:47.050
<v Speaker 2>of main instead. Yep.

00:35:47.690 --> 00:35:49.290
<v Speaker 0>Okay. Do you wanna you wanna move that

00:35:49.290 --> 00:35:50.970
<v Speaker 0>to fair, and I'll just leave my screen

00:35:50.970 --> 00:35:52.330
<v Speaker 0>away from it because we have the token.

00:35:54.315 --> 00:35:55.675
<v Speaker 2>Have you got to print out?

00:35:55.995 --> 00:35:58.315
<v Speaker 2>Let's do this. I mean, you don't have

00:35:58.315 --> 00:35:59.115
<v Speaker 2>to run it.

00:35:59.675 --> 00:36:01.995
<v Speaker 1>You do not have to run it. However,

00:36:02.875 --> 00:36:05.275
<v Speaker 1>if you have a a graceful shutdown,

00:36:05.619 --> 00:36:07.220
<v Speaker 1>right, the idea is you don't want to

00:36:07.220 --> 00:36:09.220
<v Speaker 1>lose your traces that are in flight. Okay.

00:36:09.220 --> 00:36:10.900
<v Speaker 2>Where are we at? We're in hotel and

00:36:10.980 --> 00:36:11.620
<v Speaker 2>So

00:36:17.380 --> 00:36:19.075
<v Speaker 1>Yeah. You may need to make otal on

00:36:19.075 --> 00:36:21.075
<v Speaker 1>that return the honeycomb object or return, like,

00:36:21.075 --> 00:36:22.115
<v Speaker 1>a shutdown hook.

00:36:22.435 --> 00:36:23.795
<v Speaker 2>I was just gonna paste it in here

00:36:23.795 --> 00:36:26.115
<v Speaker 2>for now. So root command execute.

00:36:27.955 --> 00:36:29.395
<v Speaker 2>Right. That should be fine for now. Right?

00:36:30.770 --> 00:36:33.410
<v Speaker 2>It's not oh, oh, okay. I see.

00:36:36.770 --> 00:36:39.010
<v Speaker 1>Okay. Now I understand. Yes. Because we we

00:36:39.010 --> 00:36:40.850
<v Speaker 1>put it in the yeah. Okay.

00:36:43.010 --> 00:36:43.330
<v Speaker 1>Fun.

00:36:44.055 --> 00:36:45.255
<v Speaker 1>Fun. Fun. Fun.

00:36:47.575 --> 00:36:50.775
<v Speaker 2>Oh, my key key repeat still isn't working.

00:36:55.494 --> 00:36:56.855
<v Speaker 2>What's the type on that anyway?

00:37:00.960 --> 00:37:03.040
<v Speaker 1>It should be a

00:37:07.440 --> 00:37:08.160
<v Speaker 2>might be a.

00:37:13.105 --> 00:37:15.185
<v Speaker 1>It's a Honeycomb dot exporter.

00:37:23.265 --> 00:37:24.225
<v Speaker 0>The honey

00:37:24.890 --> 00:37:26.730
<v Speaker 1>Honeycomb dot exporter.

00:37:27.930 --> 00:37:29.690
<v Speaker 0>So what was the problem when we moved

00:37:29.690 --> 00:37:31.210
<v Speaker 0>the defer line down? It sounds like it

00:37:31.210 --> 00:37:33.050
<v Speaker 0>got a little bit more complicated. Because the

00:37:33.050 --> 00:37:34.490
<v Speaker 2>defer was was

00:37:34.970 --> 00:37:36.250
<v Speaker 2>wait. Oh,

00:37:37.050 --> 00:37:38.730
<v Speaker 2>right. There there we go.

00:37:39.210 --> 00:37:39.930
<v Speaker 2>That should do it.

00:37:42.005 --> 00:37:44.565
<v Speaker 1>So the defer was inside of our hotel

00:37:44.565 --> 00:37:47.365
<v Speaker 1>init function, but the hotel init function returns

00:37:47.365 --> 00:37:50.085
<v Speaker 1>control to the main function immediately.

00:37:50.885 --> 00:37:53.445
<v Speaker 1>Okay. The defer needs to make sure that

00:37:53.220 --> 00:37:55.540
<v Speaker 1>happens as part of cleanup after the rest

00:37:55.540 --> 00:37:56.820
<v Speaker 1>of main finishes.

00:37:57.380 --> 00:38:00.099
<v Speaker 1>So we needed to hoist the the close

00:38:00.099 --> 00:38:01.140
<v Speaker 1>function out.

00:38:03.220 --> 00:38:05.140
<v Speaker 0>Okay. So now we've done that. I think

00:38:05.140 --> 00:38:05.780
<v Speaker 1>that should work.

00:38:06.455 --> 00:38:08.775
<v Speaker 0>Alright. Well, our tank server

00:38:09.255 --> 00:38:11.015
<v Speaker 1>Is running. Sorry for Elite. We're not showing

00:38:11.015 --> 00:38:12.695
<v Speaker 0>the codes just because the API token was

00:38:12.695 --> 00:38:14.855
<v Speaker 0>there, but I will push this code to

00:38:14.855 --> 00:38:17.415
<v Speaker 0>my fork with the API key removed so

00:38:17.415 --> 00:38:19.015
<v Speaker 0>you can see that hotel in it function.

00:38:19.015 --> 00:38:19.415
<v Speaker 0>Don't worry.

00:38:21.180 --> 00:38:22.940
<v Speaker 0>Now the tank server says it was restarted

00:38:22.940 --> 00:38:24.220
<v Speaker 0>two minutes ago.

00:38:24.620 --> 00:38:26.780
<v Speaker 0>So have we definitely saved that file and

00:38:26.780 --> 00:38:28.780
<v Speaker 0>triggered a rebuild or is it just tell

00:38:28.220 --> 00:38:28.620
<v Speaker 0>is

00:38:31.340 --> 00:38:32.940
<v Speaker 2>I mean, I did it colon w.

00:38:37.335 --> 00:38:39.415
<v Speaker 1>You may need to trigger, like, an innocuous

00:38:39.415 --> 00:38:41.095
<v Speaker 1>change to some other file,

00:38:41.495 --> 00:38:43.335
<v Speaker 1>or you yeah. You can just press the

00:38:43.255 --> 00:38:45.335
<v Speaker 0>I'll just force a rebuild. We'll see what

00:38:45.335 --> 00:38:48.110
<v Speaker 0>happens here. So let's give that a couple

00:38:48.110 --> 00:38:48.910
<v Speaker 0>seconds.

00:38:48.990 --> 00:38:50.030
<v Speaker 0>It's now

00:38:52.270 --> 00:38:52.910
<v Speaker 0>running.

00:38:53.550 --> 00:38:55.070
<v Speaker 0>So if I run this again,

00:38:56.030 --> 00:38:58.750
<v Speaker 0>and it's pretty consistently now Now it's reliable.

00:38:58.750 --> 00:38:59.630
<v Speaker 1>Okay. I

00:39:00.910 --> 00:39:03.615
<v Speaker 1>see data. We have data. Okay. Yep. We

00:39:03.615 --> 00:39:06.335
<v Speaker 1>have data. David, I sent you an invite.

00:39:06.335 --> 00:39:07.375
<v Speaker 2>It should only take you a second if

00:39:07.375 --> 00:39:09.535
<v Speaker 2>you want to log in to Honeycomb.

00:39:11.055 --> 00:39:12.895
<v Speaker 2>It should be in your Equinix email.

00:39:13.215 --> 00:39:14.255
<v Speaker 0>Okay. No problem.

00:39:17.440 --> 00:39:19.280
<v Speaker 1>Let's look at some of these traces. So

00:39:19.280 --> 00:39:20.000
<v Speaker 1>earlier,

00:39:20.080 --> 00:39:21.760
<v Speaker 1>we were looking at the traces in, like,

00:39:21.760 --> 00:39:24.320
<v Speaker 1>a text format, like, not super informative.

00:39:28.000 --> 00:39:30.560
<v Speaker 1>So the goal here of using a visual

00:39:30.560 --> 00:39:32.495
<v Speaker 1>tool like Honeycomb or if you want pure

00:39:32.495 --> 00:39:33.855
<v Speaker 1>open source, Yeager,

00:39:34.095 --> 00:39:35.855
<v Speaker 1>etcetera, right, the beauty of this is you,

00:39:35.855 --> 00:39:37.775
<v Speaker 1>you know, can use the same instrumentation with

00:39:37.775 --> 00:39:39.295
<v Speaker 1>multiple different back ends.

00:39:40.735 --> 00:39:41.935
<v Speaker 1>Then you can see

00:39:42.335 --> 00:39:44.095
<v Speaker 1>in a little bit more detail what's going

00:39:44.095 --> 00:39:46.255
<v Speaker 1>on rather than just having the things printed

00:39:46.255 --> 00:39:47.135
<v Speaker 1>out to standard out.

00:39:51.050 --> 00:39:53.610
<v Speaker 0>Okay. So while I'm just quickly signing up

00:39:53.610 --> 00:39:55.290
<v Speaker 0>for the honeycomb thing here,

00:39:56.490 --> 00:39:59.370
<v Speaker 0>right now, we're instrumenting the gRPC server.

00:39:59.610 --> 00:40:00.250
<v Speaker 0>Mhmm.

00:40:00.890 --> 00:40:01.530
<v Speaker 0>Now

00:40:01.725 --> 00:40:03.325
<v Speaker 0>we if we wanted to track that trace

00:40:03.325 --> 00:40:05.005
<v Speaker 0>from the CLI, is that something that would

00:40:05.005 --> 00:40:06.605
<v Speaker 0>be just as trivial to to kind of

00:40:06.605 --> 00:40:07.165
<v Speaker 0>add?

00:40:07.725 --> 00:40:10.445
<v Speaker 1>Yes. That's essentially correct. So, again, we're basically

00:40:10.445 --> 00:40:11.565
<v Speaker 1>following the

00:40:12.045 --> 00:40:14.950
<v Speaker 1>hotel gRPC example except for

00:40:15.430 --> 00:40:17.270
<v Speaker 1>you want to look at the client directory

00:40:17.270 --> 00:40:18.070
<v Speaker 1>instead.

00:40:19.190 --> 00:40:19.910
<v Speaker 0>Okay.

00:40:20.390 --> 00:40:22.950
<v Speaker 0>This is Honeycomb. You should be able to

00:40:22.950 --> 00:40:24.470
<v Speaker 0>see that now. Let me see if I

00:40:24.470 --> 00:40:26.244
<v Speaker 0>can just zoom in a little bit. So

00:40:26.244 --> 00:40:28.165
<v Speaker 0>how do I see this trace data that

00:40:28.165 --> 00:40:29.925
<v Speaker 1>we Scroll down to the bottom. It'll show

00:40:29.925 --> 00:40:32.165
<v Speaker 1>you, like, a list of recent traces, so

00:40:32.165 --> 00:40:33.685
<v Speaker 1>you can just open one of them.

00:40:37.605 --> 00:40:39.125
<v Speaker 1>And you may want to collapse the left

00:40:39.125 --> 00:40:40.725
<v Speaker 1>sidebar so it's a little bit

00:40:41.045 --> 00:40:42.840
<v Speaker 0>Oh, there we go. Down at the bottom.

00:40:43.000 --> 00:40:43.880
<v Speaker 1>There we go.

00:40:45.400 --> 00:40:47.960
<v Speaker 0>Ah. So yeah. So you can see here

00:40:48.359 --> 00:40:49.480
<v Speaker 1>that we have

00:40:50.119 --> 00:40:52.200
<v Speaker 1>that the name of the gRPC

00:40:52.200 --> 00:40:53.240
<v Speaker 1>call being made.

00:40:54.200 --> 00:40:55.960
<v Speaker 1>You can see how long it took.

00:40:56.359 --> 00:40:57.655
<v Speaker 1>You can see how long it took in

00:40:57.655 --> 00:41:00.135
<v Speaker 1>comparison to other traces of that same name

00:41:00.135 --> 00:41:01.974
<v Speaker 1>or other spans of that same name. If

00:41:01.974 --> 00:41:03.174
<v Speaker 1>you scroll down on the right hand side

00:41:03.174 --> 00:41:04.135
<v Speaker 1>by fields,

00:41:04.775 --> 00:41:05.895
<v Speaker 1>you should be able to see a couple

00:41:05.895 --> 00:41:06.855
<v Speaker 1>of other fields

00:41:07.335 --> 00:41:09.174
<v Speaker 1>indicating, you know, hey. I'm a tank server.

00:41:10.070 --> 00:41:11.670
<v Speaker 1>My status code was 0,

00:41:12.470 --> 00:41:14.150
<v Speaker 1>and so so on and so forth.

00:41:14.870 --> 00:41:15.430
<v Speaker 1>So

00:41:15.910 --> 00:41:17.910
<v Speaker 1>as you can see, it doesn't have very

00:41:17.910 --> 00:41:20.150
<v Speaker 1>many fields. Right? It's only what gRPC was

00:41:20.150 --> 00:41:22.870
<v Speaker 1>able to automatically infer. So that's where the

00:41:22.870 --> 00:41:25.484
<v Speaker 1>thing that I mentioned about, you know, providing

00:41:25.484 --> 00:41:28.125
<v Speaker 1>additional information about the client or about the

00:41:28.125 --> 00:41:30.445
<v Speaker 1>request being made could be helpful here.

00:41:32.365 --> 00:41:34.924
<v Speaker 0>Okay. So as a how how would I

00:41:34.924 --> 00:41:37.790
<v Speaker 0>add extra context to that trace? Great. That's

00:41:37.790 --> 00:41:41.230
<v Speaker 1>a wonderful question. So let's pull up the

00:41:41.230 --> 00:41:42.750
<v Speaker 1>RPC handler.

00:41:44.110 --> 00:41:45.630
<v Speaker 0>Okay. So here.

00:41:47.150 --> 00:41:48.750
<v Speaker 0>Is this what you meant? Sorry.

00:41:49.310 --> 00:41:52.030
<v Speaker 1>No. The RPC handler for that get all

00:41:52.030 --> 00:41:52.350
<v Speaker 1>call.

00:41:52.845 --> 00:41:55.325
<v Speaker 0>Alright. Okay. Gotcha. Okay. So we wanna jump

00:41:55.325 --> 00:41:57.085
<v Speaker 0>into the hardware,

00:41:57.885 --> 00:42:00.925
<v Speaker 0>and it is this push call here is

00:42:00.925 --> 00:42:02.525
<v Speaker 0>what we triggered, I believe.

00:42:02.845 --> 00:42:04.205
<v Speaker 0>Oh, no. We did a list, didn't we?

00:42:04.205 --> 00:42:05.885
<v Speaker 1>No. You yeah. You did you did a

00:42:05.885 --> 00:42:06.125
<v Speaker 1>list.

00:42:09.910 --> 00:42:11.270
<v Speaker 1>Oh, there it is.

00:42:11.670 --> 00:42:12.310
<v Speaker 1>Yep.

00:42:14.550 --> 00:42:16.950
<v Speaker 1>Okay. Interesting. You do have a database, it

00:42:16.950 --> 00:42:17.510
<v Speaker 1>looks?

00:42:17.830 --> 00:42:19.910
<v Speaker 0>Yes. So that speaks to Postgres

00:42:19.910 --> 00:42:23.205
<v Speaker 0>database. It speaks to Postgres. Great. So

00:42:23.605 --> 00:42:24.964
<v Speaker 1>one thing that we'll do, maybe if we

00:42:24.964 --> 00:42:26.085
<v Speaker 1>have a little bit of extra time, I

00:42:26.085 --> 00:42:27.925
<v Speaker 1>don't want to do the CLI instrumentation today.

00:42:27.925 --> 00:42:28.885
<v Speaker 1>I don't think that's going to be as

00:42:28.885 --> 00:42:30.165
<v Speaker 1>useful for your viewers.

00:42:31.125 --> 00:42:32.885
<v Speaker 1>I think that the interesting thing would be

00:42:32.885 --> 00:42:35.230
<v Speaker 1>to instrument all handler, and then also if

00:42:35.230 --> 00:42:37.470
<v Speaker 1>we can instrument the database calls underneath it

00:42:37.470 --> 00:42:38.990
<v Speaker 1>so you can see out of the total

00:42:38.990 --> 00:42:40.430
<v Speaker 1>length of time that this is taking, how

00:42:40.430 --> 00:42:41.710
<v Speaker 1>much is in the database and how much

00:42:41.710 --> 00:42:42.750
<v Speaker 1>is in your opcode.

00:42:43.230 --> 00:42:44.030
<v Speaker 1>Okay.

00:42:44.750 --> 00:42:45.390
<v Speaker 1>Great.

00:42:45.710 --> 00:42:46.269
<v Speaker 1>So

00:42:46.845 --> 00:42:48.925
<v Speaker 1>if we pull up the documentation

00:42:48.925 --> 00:42:50.205
<v Speaker 1>for OpenTelemetry

00:42:50.285 --> 00:42:51.485
<v Speaker 1>so if you go to

00:42:51.725 --> 00:42:52.845
<v Speaker 1>in your browser

00:42:52.925 --> 00:42:53.725
<v Speaker 1>to

00:42:54.445 --> 00:42:57.005
<v Speaker 1>go.OpenTelemetry.i0

00:43:00.140 --> 00:43:02.539
<v Speaker 1>and go to the hotel, which is the

00:43:02.539 --> 00:43:03.900
<v Speaker 1>API documentation,

00:43:04.940 --> 00:43:06.380
<v Speaker 1>and go to subdirectories

00:43:06.380 --> 00:43:07.660
<v Speaker 1>trip API trace.

00:43:11.655 --> 00:43:13.015
<v Speaker 1>API trace.

00:43:13.735 --> 00:43:15.175
<v Speaker 1>Yep. There we go.

00:43:15.815 --> 00:43:16.615
<v Speaker 1>Perfect.

00:43:16.855 --> 00:43:18.615
<v Speaker 1>So now you can see all of the

00:43:18.615 --> 00:43:20.215
<v Speaker 1>things that are valid to do.

00:43:20.615 --> 00:43:21.975
<v Speaker 1>Now the first thing that you want to

00:43:21.975 --> 00:43:25.255
<v Speaker 1>do, remember that gRPC automatically set up for

00:43:25.255 --> 00:43:25.735
<v Speaker 1>us

00:43:26.349 --> 00:43:27.070
<v Speaker 1>the

00:43:27.310 --> 00:43:29.230
<v Speaker 1>the tracing of my request.

00:43:30.349 --> 00:43:32.190
<v Speaker 1>So that means that what we have to

00:43:32.190 --> 00:43:34.109
<v Speaker 1>do we don't have to instantiate any new

00:43:34.109 --> 00:43:36.430
<v Speaker 1>spans, but we have to find the

00:43:36.670 --> 00:43:38.750
<v Speaker 1>span, the hotel span that was created for

00:43:38.750 --> 00:43:40.910
<v Speaker 1>us. So for that, we need span from

00:43:40.910 --> 00:43:42.765
<v Speaker 1>context. So let's go look at the Go

00:43:42.765 --> 00:43:44.925
<v Speaker 1>documentation for span from context.

00:43:46.125 --> 00:43:47.325
<v Speaker 1>That one. Perfect.

00:43:49.085 --> 00:43:51.005
<v Speaker 1>Yep. So you want to call

00:43:52.685 --> 00:43:57.220
<v Speaker 1>go to OpenTelemetry.i0/hotel

00:43:57.220 --> 00:43:58.740
<v Speaker 1>API trace,

00:43:59.300 --> 00:44:01.460
<v Speaker 1>and you want API and you want trace

00:44:01.460 --> 00:44:03.220
<v Speaker 1>dot span from context and run it on

00:44:03.220 --> 00:44:05.300
<v Speaker 1>your current context that gRPC has passed you,

00:44:05.300 --> 00:44:06.820
<v Speaker 1>and it will give you an hotel span

00:44:06.820 --> 00:44:07.460
<v Speaker 1>object,

00:44:07.620 --> 00:44:09.380
<v Speaker 1>which has been helpfully shoved in the context.

00:44:09.380 --> 00:44:10.500
<v Speaker 1>So let's see what that might look like

00:44:10.500 --> 00:44:10.980
<v Speaker 1>in action.

00:44:13.625 --> 00:44:15.385
<v Speaker 1>So at the top of your function,

00:44:18.665 --> 00:44:20.345
<v Speaker 1>is your context object?

00:44:20.825 --> 00:44:21.545
<v Speaker 0>I'm

00:44:21.625 --> 00:44:23.225
<v Speaker 0>assuming it may be on the server.

00:44:23.945 --> 00:44:25.145
<v Speaker 1>Yeah. It's probably

00:44:26.520 --> 00:44:28.280
<v Speaker 0>Get workflow front? No. That won't be able

00:44:28.280 --> 00:44:28.760
<v Speaker 0>to.

00:44:29.080 --> 00:44:31.480
<v Speaker 1>This is where my gRPC knowledge fades off

00:44:31.480 --> 00:44:33.880
<v Speaker 1>a little bit. I think server is

00:44:34.840 --> 00:44:35.640
<v Speaker 2>it was in

00:44:36.360 --> 00:44:37.480
<v Speaker 2>we were just looking at it.

00:44:42.115 --> 00:44:43.795
<v Speaker 0>Yeah.

00:44:48.435 --> 00:44:50.195
<v Speaker 2>It's in gRPCserver.com,

00:44:50.755 --> 00:44:52.995
<v Speaker 2>and it does not have a context object.

00:44:53.555 --> 00:44:54.595
<v Speaker 2>So

00:44:55.635 --> 00:44:56.995
<v Speaker 2>where does that all get called?

00:44:58.990 --> 00:44:59.630
<v Speaker 1>I presume the

00:45:02.270 --> 00:45:05.470
<v Speaker 0>No. We we previously removed the Prometheus

00:45:05.950 --> 00:45:07.869
<v Speaker 0>thing from this, and I do see Prometheus

00:45:07.869 --> 00:45:10.190
<v Speaker 0>code here. So would that help us understand

00:45:10.190 --> 00:45:11.655
<v Speaker 0>where the context is if we look at

00:45:11.655 --> 00:45:14.295
<v Speaker 0>this Prometheus code, or is that No.

00:45:14.295 --> 00:45:16.455
<v Speaker 1>The Prometheus package may have its own way

00:45:16.455 --> 00:45:19.175
<v Speaker 1>of passing the the info. So,

00:45:22.055 --> 00:45:22.215
<v Speaker 1>normally,

00:45:24.050 --> 00:45:27.570
<v Speaker 1>like, I'm looking at at some example code,

00:45:28.850 --> 00:45:30.690
<v Speaker 1>and it looks like if you need a

00:45:30.690 --> 00:45:31.490
<v Speaker 1>context,

00:45:31.650 --> 00:45:34.050
<v Speaker 1>you should just make context the first

00:45:34.290 --> 00:45:36.210
<v Speaker 1>the the the first

00:45:36.610 --> 00:45:37.810
<v Speaker 1>method the first

00:45:38.535 --> 00:45:40.535
<v Speaker 1>thing that you take in your signature. Yeah.

00:45:40.535 --> 00:45:41.974
<v Speaker 2>That's what the I was just looking the

00:45:41.974 --> 00:45:43.655
<v Speaker 2>rest of the functions are doing, so I

00:45:43.655 --> 00:45:45.175
<v Speaker 2>can add that. Yep. Okay.

00:45:45.335 --> 00:45:47.015
<v Speaker 0>So we just add this context here and

00:45:47.015 --> 00:45:48.934
<v Speaker 0>g r p c c t x space

00:45:48.934 --> 00:45:52.375
<v Speaker 1>context c context dot. Yeah. Okay. Context.

00:45:57.319 --> 00:45:59.480
<v Speaker 1>Okay. So now you have your context. So

00:45:59.480 --> 00:46:00.920
<v Speaker 1>at the very top of your function, before

00:46:00.920 --> 00:46:02.279
<v Speaker 1>you do anything else, you probably want to

00:46:02.279 --> 00:46:03.720
<v Speaker 1>get the tray the tracer.

00:46:04.519 --> 00:46:05.160
<v Speaker 1>So

00:46:05.559 --> 00:46:06.920
<v Speaker 1>so remember, it's

00:46:07.240 --> 00:46:08.920
<v Speaker 1>it's trace dot

00:46:09.675 --> 00:46:11.915
<v Speaker 1>trace dot trace from connex.

00:46:13.595 --> 00:46:15.195
<v Speaker 1>Not not it's not a method of the

00:46:15.195 --> 00:46:16.875
<v Speaker 1>of the GoConnex. It's a method of o

00:46:17.035 --> 00:46:18.955
<v Speaker 1>of hotel trace. Oh, the hotel one. Okay.

00:46:18.955 --> 00:46:20.075
<v Speaker 0>Alright. Yep. So

00:46:21.835 --> 00:46:23.195
<v Speaker 0>hotel.trace.

00:46:23.440 --> 00:46:25.760
<v Speaker 0>Sorry. It should just be trace dot.

00:46:28.960 --> 00:46:29.600
<v Speaker 1>Yep.

00:46:30.160 --> 00:46:31.680
<v Speaker 1>Trace from contact

00:46:31.760 --> 00:46:33.200
<v Speaker 1>or spam from context.

00:46:38.805 --> 00:46:40.645
<v Speaker 0>No. That's all I have access to.

00:46:41.285 --> 00:46:42.725
<v Speaker 1>Yeah. It's I think it's using the wrong

00:46:42.725 --> 00:46:43.525
<v Speaker 1>trace.

00:46:44.085 --> 00:46:46.565
<v Speaker 1>Okay. Just just start typing span from hot

00:46:46.565 --> 00:46:47.525
<v Speaker 1>next or

00:46:48.245 --> 00:46:50.565
<v Speaker 1>yeah. There oh, I see. There's runtime trace.

00:46:50.565 --> 00:46:53.049
<v Speaker 1>Oh, I I delete that. It's it's it

00:46:53.049 --> 00:46:55.609
<v Speaker 1>picked up the wrong import. That's why. Okay.

00:46:55.770 --> 00:46:57.849
<v Speaker 1>Okay. So in your imports, let's let's just

00:46:57.849 --> 00:46:58.730
<v Speaker 1>do this now.

00:47:00.890 --> 00:47:02.490
<v Speaker 1>In your imports at the top.

00:47:04.410 --> 00:47:06.730
<v Speaker 1>Okay. So let's import

00:47:08.095 --> 00:47:18.335
<v Speaker 1>go.opentelemetry.i0/hotel/API/trace.

00:47:20.609 --> 00:47:23.089
<v Speaker 1>Great. Okay. Now we have the correct trace.

00:47:23.650 --> 00:47:26.289
<v Speaker 1>Hopefully, it doesn't delete it. I've not solved

00:47:26.289 --> 00:47:28.050
<v Speaker 0>it. So Okay.

00:47:28.369 --> 00:47:29.170
<v Speaker 0>Good.

00:47:29.170 --> 00:47:30.289
<v Speaker 0>You're mistyping.

00:47:30.289 --> 00:47:31.570
<v Speaker 0>Let's see if we get

00:47:32.529 --> 00:47:34.369
<v Speaker 0>there we go. Yay.

00:47:34.529 --> 00:47:34.930
<v Speaker 1>Okay.

00:47:38.035 --> 00:47:40.435
<v Speaker 1>Yep. Check the API docs. I think it

00:47:40.435 --> 00:47:41.555
<v Speaker 1>may potentially

00:47:41.555 --> 00:47:42.275
<v Speaker 1>error.

00:47:42.675 --> 00:47:44.835
<v Speaker 2>Yeah. I'm just pulling that back up.

00:47:48.435 --> 00:47:50.035
<v Speaker 2>It should be Oh, no. It just returns

00:47:50.035 --> 00:47:52.310
<v Speaker 1>spam. Great. Yeah. Yeah. Okay. We've sent it

00:47:52.310 --> 00:47:52.790
<v Speaker 1>using.

00:47:53.670 --> 00:47:54.630
<v Speaker 1>So now

00:47:54.870 --> 00:47:57.670
<v Speaker 1>we can add attributes. What are some useful

00:47:57.670 --> 00:48:00.550
<v Speaker 1>properties of this that may be helpful? Let's

00:48:00.710 --> 00:48:03.750
<v Speaker 1>let's add something saying the number of results.

00:48:03.750 --> 00:48:05.270
<v Speaker 1>That seems like a useful thing to do.

00:48:07.735 --> 00:48:09.575
<v Speaker 2>K. So we have the So at the

00:48:09.575 --> 00:48:10.215
<v Speaker 1>bottom

00:48:10.455 --> 00:48:13.255
<v Speaker 2>Yep. And then we do hardware.

00:48:13.255 --> 00:48:15.095
<v Speaker 2>We make a list. So right after that

00:48:15.095 --> 00:48:16.215
<v Speaker 2>error, we can go

00:48:16.935 --> 00:48:20.660
<v Speaker 1>Yep. So here, spin set attribute, I believe.

00:48:22.660 --> 00:48:23.540
<v Speaker 1>Attributes?

00:48:24.260 --> 00:48:25.700
<v Speaker 1>Yep. Set attributes.

00:48:27.220 --> 00:48:28.900
<v Speaker 1>And this takes a

00:48:29.140 --> 00:48:30.099
<v Speaker 1>OpenTelemetry

00:48:30.099 --> 00:48:31.620
<v Speaker 1>key value pair list.

00:48:31.940 --> 00:48:34.765
<v Speaker 1>So OpenTelemetry has it, like, you know, because

00:48:34.765 --> 00:48:35.965
<v Speaker 1>that was silly.

00:48:36.925 --> 00:48:39.245
<v Speaker 1>OpenTelemetry has its own key value pair

00:48:39.805 --> 00:48:41.885
<v Speaker 1>kind of yep. Is it

00:48:42.925 --> 00:48:44.205
<v Speaker 1>I think it's just

00:48:44.525 --> 00:48:45.725
<v Speaker 1>API.

00:48:46.045 --> 00:48:47.485
<v Speaker 1>I think it's in the API package.

00:48:48.380 --> 00:48:50.300
<v Speaker 1>Oh, okay. Do we need to import that

00:48:50.300 --> 00:48:52.060
<v Speaker 2>or let us Yeah. You'll need to import

00:48:52.060 --> 00:48:52.540
<v Speaker 1>it.

00:48:56.140 --> 00:48:58.220
<v Speaker 2>Just one level up from trace. Just l

00:48:58.220 --> 00:48:59.420
<v Speaker 1>tell slash API?

00:49:00.700 --> 00:49:02.385
<v Speaker 1>It's slash label.

00:49:03.025 --> 00:49:03.745
<v Speaker 2>Oh,

00:49:03.985 --> 00:49:04.785
<v Speaker 2>somebody

00:49:04.785 --> 00:49:05.745
<v Speaker 2>deleted me.

00:49:06.065 --> 00:49:07.905
<v Speaker 0>Yeah. I think just don't save the file,

00:49:07.905 --> 00:49:09.265
<v Speaker 0>and it should hopefully stay.

00:49:10.785 --> 00:49:12.785
<v Speaker 1>In no. It's not even under API. It's

00:49:12.785 --> 00:49:14.225
<v Speaker 1>just hotel slash label.

00:49:16.790 --> 00:49:19.270
<v Speaker 2>It did it again. It's second underscore. I

00:49:19.270 --> 00:49:19.830
<v Speaker 1>know.

00:49:20.390 --> 00:49:22.790
<v Speaker 1>It's the worst. It's the utter worst.

00:49:28.470 --> 00:49:32.470
<v Speaker 0>Alright. Well, maybe underscore once we've got some

00:49:30.915 --> 00:49:31.795
<v Speaker 0>coding.

00:49:32.355 --> 00:49:33.635
<v Speaker 2>Oh, it's label.

00:49:35.795 --> 00:49:37.955
<v Speaker 0>Okay. I'll remove it. Okay. You should be

00:49:37.955 --> 00:49:38.435
<v Speaker 0>good.

00:49:38.995 --> 00:49:39.475
<v Speaker 2>So

00:49:40.195 --> 00:49:42.515
<v Speaker 2>I'm importing from label dot?

00:49:42.675 --> 00:49:45.155
<v Speaker 1>Yep. And then label dot int.

00:49:45.475 --> 00:49:45.875
<v Speaker 1>So

00:49:46.980 --> 00:49:48.420
<v Speaker 1>capital I int.

00:49:50.740 --> 00:49:52.740
<v Speaker 1>Yep. And then now you pass the name

00:49:52.740 --> 00:49:54.580
<v Speaker 1>of the key, which is going to be

00:49:54.580 --> 00:49:55.700
<v Speaker 1>probably, like,

00:49:56.100 --> 00:49:57.220
<v Speaker 1>num results or something.

00:49:59.975 --> 00:50:02.295
<v Speaker 1>People in Honeycomb usually standards upon

00:50:02.375 --> 00:50:05.095
<v Speaker 1>either camel case or underscores. It doesn't really

00:50:05.095 --> 00:50:07.015
<v Speaker 1>matter which you pick. Right.

00:50:07.335 --> 00:50:09.415
<v Speaker 1>And then you want to pass the length

00:50:09.415 --> 00:50:09.975
<v Speaker 1>of your list.

00:50:12.330 --> 00:50:14.090
<v Speaker 0>But we also had a comment from one

00:50:14.090 --> 00:50:15.130
<v Speaker 0>of our colleagues,

00:50:15.210 --> 00:50:16.890
<v Speaker 0>Manny, who said that we could have got

00:50:16.890 --> 00:50:19.130
<v Speaker 0>the context from stream dot context in the

00:50:19.130 --> 00:50:21.850
<v Speaker 0>old method rather than adding a new

00:50:23.130 --> 00:50:25.370
<v Speaker 0>a new variable to the signature. It's Lin,

00:50:25.785 --> 00:50:27.065
<v Speaker 1>not Link. Dirt.

00:50:29.944 --> 00:50:31.465
<v Speaker 2>Do I need to derep that?

00:50:33.145 --> 00:50:34.664
<v Speaker 2>It should be fine with the pointer, shouldn't

00:50:34.664 --> 00:50:35.145
<v Speaker 2>it?

00:50:35.625 --> 00:50:37.625
<v Speaker 2>Oh, that's a it's not a list. Dirt.

00:50:37.625 --> 00:50:39.305
<v Speaker 1>That that's a that's a proto.

00:50:40.329 --> 00:50:40.970
<v Speaker 1>Yeah.

00:50:42.970 --> 00:50:44.730
<v Speaker 2>But am I coming then? So

00:50:45.609 --> 00:50:47.450
<v Speaker 2>we do stream that sent. Oh, it doesn't

00:50:47.450 --> 00:50:49.369
<v Speaker 2>actually store them. It just streams them straight

00:50:49.369 --> 00:50:50.650
<v Speaker 2>out of the database, so we'll just add

00:50:50.650 --> 00:50:51.530
<v Speaker 2>a little counter.

00:50:51.690 --> 00:50:53.049
<v Speaker 1>Yep. So you may need to

00:50:53.690 --> 00:50:54.010
<v Speaker 1>yep.

00:51:02.885 --> 00:51:03.685
<v Speaker 1>Great.

00:51:07.605 --> 00:51:08.005
<v Speaker 1>Cool.

00:51:08.910 --> 00:51:11.550
<v Speaker 1>Okay. Great. So now if you call it,

00:51:11.630 --> 00:51:13.470
<v Speaker 1>you should start seeing

00:51:13.950 --> 00:51:14.750
<v Speaker 1>results

00:51:14.750 --> 00:51:15.470
<v Speaker 1>with

00:51:21.035 --> 00:51:21.995
<v Speaker 1>You should start seeing

00:51:22.555 --> 00:51:24.475
<v Speaker 1>in Honeycomb, you should start seeing, hey. There

00:51:24.475 --> 00:51:26.235
<v Speaker 1>are zero results, I guess, until you add

00:51:26.235 --> 00:51:27.515
<v Speaker 1>hardware to the list.

00:51:29.035 --> 00:51:31.515
<v Speaker 0>Okay. Well, the tank server seems happy now,

00:51:31.515 --> 00:51:32.795
<v Speaker 0>so let's jump back over here.

00:51:34.340 --> 00:51:36.660
<v Speaker 0>And it's all crashing. That's awesome.

00:51:37.380 --> 00:51:39.860
<v Speaker 1>Okay. Now let's go to Honeycomb.

00:51:39.940 --> 00:51:40.420
<v Speaker 1>And

00:51:40.740 --> 00:51:41.940
<v Speaker 0>Oh, there it is.

00:51:45.860 --> 00:51:47.860
<v Speaker 1>Go to Honeycomb homepage. It's easier.

00:51:48.020 --> 00:51:49.380
<v Speaker 1>Upper left hand corner.

00:51:49.620 --> 00:51:50.020
<v Speaker 1>There.

00:51:50.475 --> 00:51:51.835
<v Speaker 1>And let's go look at one of the

00:51:51.835 --> 00:51:53.755
<v Speaker 1>most recent requests, which is a few seconds

00:51:53.755 --> 00:51:54.875
<v Speaker 1>ago. Yep.

00:51:56.395 --> 00:51:57.915
<v Speaker 1>So now you can see on that span

00:51:57.915 --> 00:52:00.155
<v Speaker 1>that there are scroll down to the bottom

00:52:00.155 --> 00:52:01.835
<v Speaker 1>of your list there. Yep.

00:52:03.840 --> 00:52:05.040
<v Speaker 1>You should see

00:52:07.120 --> 00:52:07.840
<v Speaker 0>oh.

00:52:08.720 --> 00:52:09.920
<v Speaker 0>They did not show?

00:52:10.560 --> 00:52:12.480
<v Speaker 1>We do not see here

00:52:12.880 --> 00:52:13.680
<v Speaker 1>the

00:52:15.040 --> 00:52:16.720
<v Speaker 1>the new attribute that we added.

00:52:18.535 --> 00:52:19.095
<v Speaker 1>Oh,

00:52:19.815 --> 00:52:22.055
<v Speaker 1>is that code even actually called if there

00:52:22.055 --> 00:52:23.015
<v Speaker 1>are no results?

00:52:23.895 --> 00:52:24.855
<v Speaker 2>Good call.

00:52:27.735 --> 00:52:28.935
<v Speaker 2>Well, actually wait.

00:52:30.215 --> 00:52:31.895
<v Speaker 2>No. Error get get all.

00:52:32.680 --> 00:52:33.640
<v Speaker 2>Oh, wait.

00:52:34.360 --> 00:52:37.640
<v Speaker 2>It's calling a function, so it's sending a

00:52:38.440 --> 00:52:40.520
<v Speaker 2>closure over count. So is it actually gonna

00:52:40.520 --> 00:52:43.320
<v Speaker 2>count? It's gonna still count zero. So

00:52:45.414 --> 00:52:47.974
<v Speaker 1>Should still count zero. Still be sending it.

00:52:47.974 --> 00:52:48.615
<v Speaker 2>Right?

00:52:50.775 --> 00:52:52.694
<v Speaker 2>Because get all takes that function and then

00:52:52.694 --> 00:52:54.214
<v Speaker 2>calls it for each result.

00:52:55.575 --> 00:52:57.734
<v Speaker 0>Should we just confirm that we actually this

00:52:57.734 --> 00:52:59.255
<v Speaker 0>this is the function that's being called?

00:53:00.390 --> 00:53:02.069
<v Speaker 1>Yeah. That might be useful to do as

00:53:02.069 --> 00:53:02.550
<v Speaker 1>well

00:53:02.869 --> 00:53:04.390
<v Speaker 1>because we don't know for sure.

00:53:04.710 --> 00:53:05.990
<v Speaker 0>Yeah. Let me just see what else we

00:53:05.990 --> 00:53:07.670
<v Speaker 0>have here. But I I, yeah, I think

00:53:07.670 --> 00:53:09.750
<v Speaker 0>that all is definite hopefully, is what we're

00:53:09.750 --> 00:53:11.349
<v Speaker 0>we're calling. And we're run Well, I can

00:53:11.349 --> 00:53:13.190
<v Speaker 1>tell you that the OpenTelemetry side is fine.

00:53:13.974 --> 00:53:15.415
<v Speaker 1>So it's just a matter of are we

00:53:15.415 --> 00:53:17.415
<v Speaker 1>calling the calling it appropriately.

00:53:17.494 --> 00:53:19.015
<v Speaker 1>And, also, I guess, are we using the

00:53:19.015 --> 00:53:20.295
<v Speaker 1>correct context object?

00:53:21.974 --> 00:53:23.655
<v Speaker 2>But I'm pretty sure the one that Manny

00:53:23.655 --> 00:53:25.095
<v Speaker 0>said. Because we had a comment from our

00:53:25.095 --> 00:53:27.335
<v Speaker 0>colleague who says we should be using

00:53:28.150 --> 00:53:29.510
<v Speaker 0>equals stream

00:53:29.830 --> 00:53:31.830
<v Speaker 0>dot context. So maybe that's just the fix

00:53:31.830 --> 00:53:32.470
<v Speaker 0>there.

00:53:32.790 --> 00:53:34.390
<v Speaker 1>Oh, yeah. Okay. Let's try that.

00:53:35.030 --> 00:53:37.990
<v Speaker 0>Okay. So let's just rebuild that with till

00:53:38.630 --> 00:53:40.310
<v Speaker 0>it doesn't seem to notice the change in

00:53:40.310 --> 00:53:41.430
<v Speaker 0>this file. So it might just need to

00:53:41.430 --> 00:53:42.310
<v Speaker 0>retweak to the setup.

00:53:45.244 --> 00:53:47.325
<v Speaker 0>And that should be healthy again.

00:53:47.644 --> 00:53:49.964
<v Speaker 0>Yep. Alright. Let's call it.

00:53:51.484 --> 00:53:52.845
<v Speaker 0>Couple of calls.

00:53:53.164 --> 00:53:54.445
<v Speaker 0>Jump back over here.

00:53:54.845 --> 00:53:55.484
<v Speaker 0>Home page.

00:53:58.530 --> 00:54:00.130
<v Speaker 0>Oh, wait. That's too much. Nope. You want

00:54:00.130 --> 00:54:01.970
<v Speaker 1>the one from a few seconds ago. Yep.

00:54:04.770 --> 00:54:06.530
<v Speaker 0>This one here. Yep. That'll be

00:54:09.410 --> 00:54:10.130
<v Speaker 2>let's see.

00:54:11.645 --> 00:54:12.365
<v Speaker 2>No.

00:54:13.724 --> 00:54:17.005
<v Speaker 1>Direct. At hardware service slash all. Yeah. It

00:54:17.005 --> 00:54:19.485
<v Speaker 1>it is calling hardware service slash all.

00:54:22.365 --> 00:54:22.925
<v Speaker 1>Not

00:54:23.500 --> 00:54:25.900
<v Speaker 1>are we in the first file? Just something

00:54:26.460 --> 00:54:28.620
<v Speaker 2>silly at the top of the You could

00:54:28.620 --> 00:54:30.140
<v Speaker 1>add a logger there to make sure that

00:54:30.140 --> 00:54:31.020
<v Speaker 1>it's actually

00:54:31.180 --> 00:54:32.620
<v Speaker 1>calling this code.

00:54:33.020 --> 00:54:34.780
<v Speaker 2>Oh, like a span dot

00:54:35.100 --> 00:54:36.300
<v Speaker 2>it's like span dot log?

00:54:38.184 --> 00:54:39.785
<v Speaker 2>I'm

00:54:39.785 --> 00:54:41.865
<v Speaker 2>just saying about regular log. It doesn't depend

00:54:41.865 --> 00:54:43.465
<v Speaker 1>upon the OTO subsystem.

00:54:43.625 --> 00:54:45.385
<v Speaker 1>That way we know for sure.

00:54:46.505 --> 00:54:48.665
<v Speaker 2>Do we have a log global logger handle?

00:54:48.665 --> 00:54:48.744
<v Speaker 2>Or

00:54:51.270 --> 00:54:52.950
<v Speaker 2>no. You gotta grab it. Okay.

00:54:53.670 --> 00:54:54.470
<v Speaker 2>Got it.

00:54:57.190 --> 00:54:58.870
<v Speaker 1>Do you normally wrap up your stream after

00:54:58.870 --> 00:55:00.790
<v Speaker 1>an hour, like, on the dot, or do

00:55:00.790 --> 00:55:02.710
<v Speaker 1>you let it go long sometimes?

00:55:02.790 --> 00:55:05.125
<v Speaker 0>No. No. There's There's been some that I've

00:55:05.125 --> 00:55:06.244
<v Speaker 0>planned for an hour that have lasted two

00:55:06.244 --> 00:55:07.765
<v Speaker 0>and a half or three. So, like,

00:55:08.085 --> 00:55:09.605
<v Speaker 0>as long as you both have time, I'm

00:55:09.605 --> 00:55:11.605
<v Speaker 0>happy to Yeah. I have time. Let's let's

00:55:11.605 --> 00:55:12.964
<v Speaker 1>keep let's keep going. Let's

00:55:13.684 --> 00:55:15.444
<v Speaker 1>while we debug this, why don't we add

00:55:15.444 --> 00:55:17.765
<v Speaker 1>some database instrumentation too since we know that

00:55:17.765 --> 00:55:20.710
<v Speaker 1>the automatic instrumentation of gRPC at least is

00:55:20.710 --> 00:55:21.270
<v Speaker 1>working?

00:55:22.150 --> 00:55:22.790
<v Speaker 0>Okay.

00:55:23.030 --> 00:55:24.869
<v Speaker 1>So let's go to

00:55:25.430 --> 00:55:27.430
<v Speaker 1>once Amy is done here, we'll go to

00:55:27.430 --> 00:55:29.510
<v Speaker 1>the hotel contrib repo and have a look

00:55:29.510 --> 00:55:31.030
<v Speaker 1>at the documentation for

00:55:31.910 --> 00:55:33.589
<v Speaker 1>you're using the standard

00:55:34.415 --> 00:55:35.215
<v Speaker 1>database

00:55:35.215 --> 00:55:36.255
<v Speaker 1>classes

00:55:36.255 --> 00:55:37.935
<v Speaker 1>in in GoA?

00:55:39.455 --> 00:55:40.815
<v Speaker 0>Let's see.

00:55:42.575 --> 00:55:44.495
<v Speaker 1>Why is it complaining about label now?

00:55:45.535 --> 00:55:47.295
<v Speaker 1>Did we we did use label. Right?

00:55:49.750 --> 00:55:52.950
<v Speaker 0>Yeah. Yeah. It's complaining that actually. Oh. So

00:55:53.190 --> 00:55:55.109
<v Speaker 0>maybe that's our problem. Maybe that's why is

00:55:55.109 --> 00:55:56.549
<v Speaker 1>that is that it never picked up our

00:55:56.549 --> 00:55:58.390
<v Speaker 1>change because it never compiled.

00:55:59.030 --> 00:56:00.545
<v Speaker 2>But here's we're using it. So

00:56:01.905 --> 00:56:05.905
<v Speaker 0>It says no package for import. Go OpenTelemetry.io.

00:56:08.225 --> 00:56:10.465
<v Speaker 1>Can I see your go dot mod?

00:56:10.545 --> 00:56:12.625
<v Speaker 1>Actually, I'll go look at it myself. What's

00:56:12.625 --> 00:56:13.585
<v Speaker 1>your go mod say?

00:56:14.559 --> 00:56:15.520
<v Speaker 1>GoMod

00:56:15.520 --> 00:56:16.480
<v Speaker 1>says

00:56:23.279 --> 00:56:24.720
<v Speaker 1>where is your GoMod?

00:56:27.839 --> 00:56:29.599
<v Speaker 1>Wait. That's weird. Why am I not?

00:56:30.335 --> 00:56:33.214
<v Speaker 1>I may need to refresh my my share.

00:56:33.214 --> 00:56:34.734
<v Speaker 1>I think it's a little confused.

00:56:36.894 --> 00:56:37.775
<v Speaker 1>See.

00:56:38.335 --> 00:56:40.095
<v Speaker 1>Version 13. Yeah. That's correct.

00:56:46.470 --> 00:56:47.830
<v Speaker 2>Are you looking at it different way for

00:56:47.830 --> 00:56:49.030
<v Speaker 2>me? Because I don't see it.

00:56:52.950 --> 00:56:55.270
<v Speaker 0>It's I stopped complaining there, if that helps.

00:56:56.230 --> 00:56:58.150
<v Speaker 0>Oh. I think the s code may just

00:56:58.150 --> 00:57:00.550
<v Speaker 0>be

00:57:00.865 --> 00:57:02.385
<v Speaker 0>problematic day. Yeah.

00:57:02.944 --> 00:57:05.025
<v Speaker 0>But it's not complaining about label anymore.

00:57:05.105 --> 00:57:07.825
<v Speaker 0>We let's see. Did we add a logger?

00:57:07.825 --> 00:57:09.505
<v Speaker 0>We did add a logger to this function.

00:57:09.505 --> 00:57:11.505
<v Speaker 0>So I'm going to trigger a Yep. Let's

00:57:11.505 --> 00:57:12.785
<v Speaker 1>try it and see what happens.

00:57:13.265 --> 00:57:13.505
<v Speaker 0>Tilt.

00:57:14.730 --> 00:57:16.810
<v Speaker 0>And we'll see if we see what was

00:57:16.810 --> 00:57:19.290
<v Speaker 0>the log message called hardware all.

00:57:23.050 --> 00:57:24.570
<v Speaker 0>Alright. So it's running.

00:57:25.130 --> 00:57:27.610
<v Speaker 1>Alright. Let's hit the endpoint.

00:57:31.735 --> 00:57:33.895
<v Speaker 0>And I do not see

00:57:34.615 --> 00:57:35.815
<v Speaker 0>her message.

00:57:38.135 --> 00:57:39.095
<v Speaker 1>So it called

00:57:40.455 --> 00:57:41.335
<v Speaker 1>Interesting.

00:57:43.750 --> 00:57:45.350
<v Speaker 0>The service button. No.

00:57:51.510 --> 00:57:52.549
<v Speaker 1>Okay.

00:57:54.234 --> 00:57:55.915
<v Speaker 1>Now we know we've been instrumenting the wrong

00:57:55.915 --> 00:57:56.635
<v Speaker 1>function.

00:58:01.115 --> 00:58:02.555
<v Speaker 0>What the hell Alright. What else do we

00:58:02.555 --> 00:58:03.835
<v Speaker 0>have then? Let's see.

00:58:05.035 --> 00:58:06.395
<v Speaker 0>So if we come to the

00:58:06.780 --> 00:58:09.900
<v Speaker 0>command root, we've got the RPC servers here.

00:58:09.900 --> 00:58:11.580
<v Speaker 0>I mean, it looks like we're definitely modifying

00:58:11.580 --> 00:58:12.540
<v Speaker 0>the correct one.

00:58:12.940 --> 00:58:15.180
<v Speaker 0>RPC servers tanked g r p c, g

00:58:15.180 --> 00:58:15.980
<v Speaker 0>rpc,

00:58:17.420 --> 00:58:20.385
<v Speaker 0>hardware Go. I mean, I I don't see

00:58:20.385 --> 00:58:22.625
<v Speaker 0>how we've been getting getting that wrong.

00:58:23.745 --> 00:58:25.105
<v Speaker 1>Yeah. That seems

00:58:25.505 --> 00:58:26.785
<v Speaker 1>this seems very

00:58:26.865 --> 00:58:28.145
<v Speaker 1>surprising.

00:58:34.079 --> 00:58:36.080
<v Speaker 0>So what can we do?

00:58:37.680 --> 00:58:40.880
<v Speaker 0>Now our tell also stopped noticing changes,

00:58:40.880 --> 00:58:43.359
<v Speaker 0>which I'm gonna assume is maybe potentially

00:58:43.359 --> 00:58:45.280
<v Speaker 0>related. So I'm just gonna add a comment

00:58:45.280 --> 00:58:46.319
<v Speaker 0>to this file.

00:58:47.214 --> 00:58:48.815
<v Speaker 0>Yeah. That's not triggering.

00:58:51.214 --> 00:58:52.974
<v Speaker 1>Yeah. I think that's a little concerning because

00:58:52.974 --> 00:58:55.214
<v Speaker 1>I'm curious whether Tilt is even building the

00:58:55.375 --> 00:58:57.135
<v Speaker 1>right. Like, is Tilt even building the correct

00:58:57.135 --> 00:58:59.775
<v Speaker 1>files. Right? But we are seeing the hotel

00:58:59.775 --> 00:59:01.870
<v Speaker 0>stuff from the hotel in it. So

00:59:02.750 --> 00:59:04.350
<v Speaker 1>That's correct, but it broke a little while.

00:59:04.350 --> 00:59:05.790
<v Speaker 1>Right? Like, it broke a little while after

00:59:05.790 --> 00:59:08.110
<v Speaker 1>that. So Alright. Let's

00:59:08.270 --> 00:59:10.830
<v Speaker 0>let's tilt up again just in case.

00:59:13.150 --> 00:59:14.110
<v Speaker 1>So Alright.

00:59:16.885 --> 00:59:18.484
<v Speaker 1>Do you need to tilt stop first or

00:59:18.484 --> 00:59:20.885
<v Speaker 1>not? I just killed it.

00:59:21.125 --> 00:59:23.525
<v Speaker 1>Okay. Great. Great. Great. If I reload this

00:59:23.525 --> 00:59:24.165
<v Speaker 0>here,

00:59:25.285 --> 00:59:27.204
<v Speaker 0>we can see there's no bringing everything back

00:59:27.204 --> 00:59:28.405
<v Speaker 0>up. We'll need to wait till all of

00:59:28.405 --> 00:59:30.620
<v Speaker 0>this screen. Okay. Great. While we do that,

00:59:30.620 --> 00:59:31.660
<v Speaker 1>why don't we go ahead and look up

00:59:31.660 --> 00:59:33.100
<v Speaker 1>how to instrument databases?

00:59:34.380 --> 00:59:36.140
<v Speaker 1>And we So you said coworkers that I'm

00:59:36.140 --> 00:59:38.220
<v Speaker 1>missing stand up because this is more important.

00:59:40.060 --> 00:59:42.060
<v Speaker 2>We're we're missing an all hands too. So

00:59:43.855 --> 00:59:45.295
<v Speaker 1>You can watch the tape of all hands

00:59:45.295 --> 00:59:46.495
<v Speaker 1>afterwards. It's fine.

00:59:52.255 --> 00:59:53.055
<v Speaker 0>I'm

00:59:53.055 --> 00:59:54.975
<v Speaker 0>just gonna poke around here and see that

00:59:54.975 --> 00:59:56.769
<v Speaker 0>I can see then. What kind of keys

00:59:56.769 --> 00:59:57.730
<v Speaker 2>are those, Liz?

00:59:58.849 --> 01:00:01.250
<v Speaker 1>This is the terrible keyboard that I'm getting

01:00:01.250 --> 01:00:02.210
<v Speaker 1>rid of soon.

01:00:02.930 --> 01:00:05.170
<v Speaker 1>I do not recommend this keyboard. It is

01:00:05.170 --> 01:00:06.930
<v Speaker 1>a Rawkat keyboard,

01:00:06.930 --> 01:00:10.049
<v Speaker 1>and it unfortunately has a tendency to have

01:00:10.049 --> 01:00:11.490
<v Speaker 1>key presses duplicate,

01:00:11.490 --> 01:00:14.435
<v Speaker 1>which pisses the heck out of me. So

01:00:14.435 --> 01:00:16.595
<v Speaker 1>I actually have a set of

01:00:16.755 --> 01:00:17.875
<v Speaker 1>cherry drums

01:00:18.275 --> 01:00:21.155
<v Speaker 1>and on a on a keyboard coming soon

01:00:21.315 --> 01:00:22.355
<v Speaker 1>from from.

01:00:26.500 --> 01:00:27.140
<v Speaker 1>Okay.

01:00:27.300 --> 01:00:30.260
<v Speaker 1>So we want the SQL documentation.

01:00:31.380 --> 01:00:34.180
<v Speaker 0>I found this import. Yep. I haven't found

01:00:34.180 --> 01:00:35.540
<v Speaker 0>any documentation,

01:00:35.540 --> 01:00:36.020
<v Speaker 0>but

01:00:36.500 --> 01:00:37.700
<v Speaker 0>can I just browse to that?

01:00:39.464 --> 01:00:40.025
<v Speaker 1>You

01:00:40.904 --> 01:00:43.065
<v Speaker 1>should be able to find

01:00:50.984 --> 01:00:51.305
<v Speaker 0>oh,

01:00:53.040 --> 01:00:55.920
<v Speaker 1>I think that is a temporarily missing feature

01:00:55.920 --> 01:00:58.880
<v Speaker 1>gap. Actually, I'm not sure that we have

01:00:59.440 --> 01:01:01.360
<v Speaker 1>the SQL stuff instrument. So

01:01:01.920 --> 01:01:04.080
<v Speaker 1>Well, I will We can just go the

01:01:04.080 --> 01:01:06.195
<v Speaker 2>the database classes are pretty straightforward. It's not

01:01:06.195 --> 01:01:08.035
<v Speaker 2>a Oh, yeah. Let's let's demonstrate how to

01:01:08.035 --> 01:01:10.275
<v Speaker 1>add new spans. Perfect. Let let's do that

01:01:10.275 --> 01:01:11.075
<v Speaker 1>then. We

01:01:11.715 --> 01:01:13.715
<v Speaker 1>automatic information is fun, but let's let's do

01:01:13.715 --> 01:01:14.835
<v Speaker 1>manual instrumentation.

01:01:15.555 --> 01:01:17.635
<v Speaker 2>Okay. In our DB So I'm assuming I

01:01:17.635 --> 01:01:19.395
<v Speaker 0>pulled back up the hardware stuff, and we're

01:01:19.395 --> 01:01:20.115
<v Speaker 0>looking for

01:01:21.280 --> 01:01:24.480
<v Speaker 0>the DB calls. Right? Yep. Yeah. There's Where

01:01:24.480 --> 01:01:26.880
<v Speaker 1>it says DB get all? Yep. So let's

01:01:26.880 --> 01:01:30.080
<v Speaker 0>pop over there. Let's Which driver that instrumented?

01:01:31.520 --> 01:01:32.960
<v Speaker 0>Hardware here, hopefully.

01:01:33.815 --> 01:01:35.015
<v Speaker 0>Yep. There we go.

01:01:36.135 --> 01:01:37.655
<v Speaker 0>So there's all.

01:01:38.135 --> 01:01:38.615
<v Speaker 0>Okay.

01:01:39.255 --> 01:01:39.975
<v Speaker 1>So

01:01:40.775 --> 01:01:43.095
<v Speaker 1>here, it's, like, running a query, right, with

01:01:43.095 --> 01:01:44.535
<v Speaker 1>the context, which which is fine.

01:01:46.180 --> 01:01:47.940
<v Speaker 1>But my question is,

01:01:48.660 --> 01:01:51.300
<v Speaker 1>where is it instance dot query? Where's the

01:01:51.300 --> 01:01:53.700
<v Speaker 1>code for in for for instance query?

01:01:55.140 --> 01:01:56.580
<v Speaker 0>Let's find it.

01:01:56.900 --> 01:01:57.780
<v Speaker 0>And then

01:02:01.805 --> 01:02:04.045
<v Speaker 1>Like, what type is instance?

01:02:04.365 --> 01:02:05.885
<v Speaker 1>It can we hook in a little bit

01:02:05.885 --> 01:02:07.565
<v Speaker 1>lower down? Yeah. Yeah. Alright. Here.

01:02:10.444 --> 01:02:11.565
<v Speaker 0>This what you wanted?

01:02:12.444 --> 01:02:14.525
<v Speaker 1>Yep. But this looks like it's in go

01:02:14.605 --> 01:02:16.680
<v Speaker 1>it this is in Go's library. Oh, it

01:02:16.680 --> 01:02:17.720
<v Speaker 0>is. Yeah. Okay.

01:02:18.119 --> 01:02:18.840
<v Speaker 0>Okay.

01:02:19.880 --> 01:02:21.720
<v Speaker 0>We have a tank DB struct with an

01:02:21.720 --> 01:02:23.080
<v Speaker 0>instance on it. Oh,

01:02:25.160 --> 01:02:27.560
<v Speaker 1>that that's doable. That's doable. Okay. So if

01:02:27.560 --> 01:02:28.520
<v Speaker 1>you have a tank DB,

01:02:29.545 --> 01:02:30.905
<v Speaker 1>that means that

01:02:31.225 --> 01:02:33.705
<v Speaker 1>if someone runs query right?

01:02:38.905 --> 01:02:40.745
<v Speaker 1>Right. If if someone is running a query

01:02:40.745 --> 01:02:42.985
<v Speaker 1>on it, then they're going to call the

01:02:42.985 --> 01:02:44.025
<v Speaker 1>internal methods. Right?

01:02:45.410 --> 01:02:47.809
<v Speaker 1>So we can create a span every time

01:02:47.809 --> 01:02:50.369
<v Speaker 1>the query method is called on TinkDB because

01:02:50.369 --> 01:02:51.170
<v Speaker 1>TinkDB

01:02:51.170 --> 01:02:51.970
<v Speaker 1>implements

01:02:51.970 --> 01:02:55.170
<v Speaker 1>SQL DB, and that's what's being called. Right?

01:02:56.529 --> 01:02:57.569
<v Speaker 0>Okay. That makes sense.

01:03:03.415 --> 01:03:04.135
<v Speaker 1>Okay.

01:03:04.695 --> 01:03:05.415
<v Speaker 1>So

01:03:10.215 --> 01:03:12.135
<v Speaker 1>where is

01:03:13.150 --> 01:03:15.710
<v Speaker 0>where? I I don't see it. They're all

01:03:15.710 --> 01:03:17.710
<v Speaker 2>kinda open coded. Right? Like, they're

01:03:19.070 --> 01:03:20.750
<v Speaker 2>if you go into the hardware.go

01:03:20.990 --> 01:03:23.470
<v Speaker 0>Yeah. There's this here. It's They're just open

01:03:23.470 --> 01:03:25.565
<v Speaker 2>written queries. So Right. No. No. No. I'm

01:03:25.565 --> 01:03:27.405
<v Speaker 1>I'm seeing the query function. Where is the

01:03:27.405 --> 01:03:29.005
<v Speaker 1>query function implemented

01:03:29.565 --> 01:03:30.765
<v Speaker 1>on TinkDB?

01:03:30.845 --> 01:03:31.484
<v Speaker 1>If

01:03:31.805 --> 01:03:33.805
<v Speaker 1>we go back to TinkDB and search queries

01:03:33.565 --> 01:03:36.525
<v Speaker 0>directly on TinkDB. Is is a struct that

01:03:36.525 --> 01:03:38.125
<v Speaker 2>just has a SQL pointer.

01:03:40.020 --> 01:03:42.900
<v Speaker 2>Instances just it's just a SQL pointer. So

01:03:42.900 --> 01:03:45.380
<v Speaker 2>it's calling the Golang package. Oh, calling the

01:03:45.380 --> 01:03:47.220
<v Speaker 1>Golang package underneath immediately.

01:03:47.460 --> 01:03:49.620
<v Speaker 1>Yep. So I guess naively we could start

01:03:49.620 --> 01:03:52.115
<v Speaker 0>by instrumenting it directly here, but ideally,

01:03:52.115 --> 01:03:54.115
<v Speaker 0>that we should be adding another layer instead

01:03:54.115 --> 01:03:55.875
<v Speaker 0>of tank d b to proxy the queries

01:03:55.875 --> 01:03:57.315
<v Speaker 0>so the instrumentation could be in a single

01:03:57.315 --> 01:03:59.875
<v Speaker 0>place. Is that Yep. That's correct.

01:04:00.195 --> 01:04:02.195
<v Speaker 1>Although, like, as I said, once we get

01:04:02.195 --> 01:04:02.435
<v Speaker 1>the

01:04:03.250 --> 01:04:05.570
<v Speaker 1>your future request for your future request is

01:04:05.570 --> 01:04:08.850
<v Speaker 1>noted to get SQL DB in auto instrumentation

01:04:08.850 --> 01:04:09.970
<v Speaker 1>ported over.

01:04:10.210 --> 01:04:11.730
<v Speaker 1>We have not yet done that from OpenTelemetry

01:04:11.730 --> 01:04:14.850
<v Speaker 1>slash OpenTelemetry, but we will. Okay. So

01:04:16.095 --> 01:04:17.455
<v Speaker 1>see here,

01:04:17.935 --> 01:04:19.295
<v Speaker 1>where is our context?

01:04:19.695 --> 01:04:21.375
<v Speaker 1>The problem is we don't have a context

01:04:21.375 --> 01:04:23.135
<v Speaker 1>object here. Right? Like, that's that's the thing

01:04:23.135 --> 01:04:24.095
<v Speaker 1>that worries me.

01:04:25.615 --> 01:04:26.255
<v Speaker 0>Yeah.

01:04:26.575 --> 01:04:28.575
<v Speaker 1>We kind of need that context. Some of

01:04:28.575 --> 01:04:30.760
<v Speaker 2>them have it. Just that one that one

01:04:30.760 --> 01:04:31.720
<v Speaker 2>call doesn't.

01:04:33.000 --> 01:04:35.480
<v Speaker 2>Why does just get all not have it?

01:04:35.720 --> 01:04:37.160
<v Speaker 2>But, like, we can just change it. Right?

01:04:37.160 --> 01:04:39.400
<v Speaker 2>Like Yep. We can change it. I'm gonna

01:04:39.400 --> 01:04:41.160
<v Speaker 2>change it in hardware to test the context

01:04:41.160 --> 01:04:43.415
<v Speaker 2>and then Okay. I was able to once

01:04:43.415 --> 01:04:45.815
<v Speaker 0>have it. Okay. Yep. Yeah. Let's let's make

01:04:45.815 --> 01:04:47.815
<v Speaker 1>it always always take the context.

01:04:50.055 --> 01:04:51.335
<v Speaker 0>So let me

01:04:53.015 --> 01:04:53.575
<v Speaker 0>follow.

01:04:58.440 --> 01:05:01.240
<v Speaker 0>Oh, fairness info on that. It was did

01:05:01.240 --> 01:05:03.560
<v Speaker 2>he pass this by around his pointers or

01:05:03.560 --> 01:05:04.440
<v Speaker 2>just Nope.

01:05:04.760 --> 01:05:06.680
<v Speaker 1>Nope. It's always passed by Volley.

01:05:10.214 --> 01:05:13.415
<v Speaker 2>K. So there's context context. It should be

01:05:13.415 --> 01:05:14.375
<v Speaker 2>good now.

01:05:15.335 --> 01:05:17.175
<v Speaker 0>Okay. So we have a context. Did I

01:05:17.175 --> 01:05:18.375
<v Speaker 2>totally break the build?

01:05:19.815 --> 01:05:21.015
<v Speaker 1>I'm sure we'll find out.

01:05:21.880 --> 01:05:24.200
<v Speaker 0>It looks okay. We're good. Nope.

01:05:24.440 --> 01:05:26.119
<v Speaker 1>Build failed expecting

01:05:26.359 --> 01:05:28.280
<v Speaker 0>Oh, yeah. N 51.

01:05:28.520 --> 01:05:30.200
<v Speaker 0>Oh, why did it not change orange here?

01:05:30.200 --> 01:05:31.000
<v Speaker 0>Never mind.

01:05:31.240 --> 01:05:32.520
<v Speaker 0>Okay. Yeah. So it did fail.

01:05:34.005 --> 01:05:35.924
<v Speaker 2>Did I guess I'm running the context passing?

01:05:35.924 --> 01:05:38.325
<v Speaker 0>On line 51 gRPC server.

01:05:39.365 --> 01:05:39.765
<v Speaker 1>What?

01:05:46.480 --> 01:05:47.680
<v Speaker 2>Looks like we accidentally

01:05:47.920 --> 01:05:48.880
<v Speaker 2>one of us

01:05:49.200 --> 01:05:50.640
<v Speaker 2>bumped the key here.

01:05:52.960 --> 01:05:54.640
<v Speaker 1>Yep. That would do it.

01:05:55.280 --> 01:05:56.000
<v Speaker 1>Okay.

01:05:56.400 --> 01:05:58.160
<v Speaker 1>Back over to TinkDB.

01:06:00.155 --> 01:06:02.555
<v Speaker 1>Oh, now we've got more interesting.

01:06:02.955 --> 01:06:05.195
<v Speaker 0>Cannot use DB as type.

01:06:05.915 --> 01:06:07.675
<v Speaker 0>TinkDB does not implement.

01:06:10.955 --> 01:06:11.355
<v Speaker 0>Oh.

01:06:12.470 --> 01:06:14.150
<v Speaker 0>Wait. What? Yeah. So we do have a

01:06:14.150 --> 01:06:15.750
<v Speaker 0>a Versus code that is showing us an

01:06:15.750 --> 01:06:16.470
<v Speaker 0>error.

01:06:21.430 --> 01:06:22.950
<v Speaker 2>Do that instance dot query.

01:06:25.185 --> 01:06:27.345
<v Speaker 0>Yeah. See here, we've got it doesn't accept

01:06:27.345 --> 01:06:28.465
<v Speaker 0>with DB here.

01:06:34.385 --> 01:06:35.025
<v Speaker 2>Oh,

01:06:37.985 --> 01:06:40.590
<v Speaker 2>I see. When it's building us Oh, okay.

01:06:41.630 --> 01:06:42.670
<v Speaker 2>Back in here.

01:06:42.990 --> 01:06:46.190
<v Speaker 2>Let's

01:06:46.190 --> 01:06:47.310
<v Speaker 2>do a quick

01:06:47.470 --> 01:06:49.630
<v Speaker 2>diff on this file. I bet we accidentally

01:06:49.630 --> 01:06:50.430
<v Speaker 2>deleted something.

01:06:58.245 --> 01:07:00.165
<v Speaker 2>I'm not trying to do this quickly in

01:07:00.325 --> 01:07:01.445
<v Speaker 2>the s code.

01:07:03.525 --> 01:07:04.805
<v Speaker 2>David, I think we should just look at

01:07:04.805 --> 01:07:06.245
<v Speaker 2>a quick diff of what we've changed all

01:07:06.245 --> 01:07:08.700
<v Speaker 2>we've changed in gRPC server, and then we'll

01:07:08.700 --> 01:07:09.900
<v Speaker 2>quickly see what happened.

01:07:17.180 --> 01:07:18.780
<v Speaker 0>I've got too much going on here.

01:07:19.420 --> 01:07:20.060
<v Speaker 1>That's fair.

01:07:21.825 --> 01:07:23.265
<v Speaker 0>Yeah.

01:07:24.785 --> 01:07:25.585
<v Speaker 0>There we go.

01:07:34.865 --> 01:07:37.345
<v Speaker 2>Hey. Hey, Liz. There's a question about

01:07:37.650 --> 01:07:39.730
<v Speaker 2>how would we make sure logs events do

01:07:39.730 --> 01:07:40.850
<v Speaker 2>we already read that one?

01:07:41.250 --> 01:07:43.730
<v Speaker 2>Are are are during this request are correlated

01:07:43.730 --> 01:07:44.850
<v Speaker 2>with traces?

01:07:45.089 --> 01:07:46.930
<v Speaker 1>Ah, the log correlation?

01:07:47.329 --> 01:07:49.329
<v Speaker 1>Yes. So instead of using your logger,

01:07:50.234 --> 01:07:53.275
<v Speaker 1>what you want to use is something called

01:07:53.515 --> 01:07:55.115
<v Speaker 1>a span event.

01:07:55.755 --> 01:07:57.755
<v Speaker 1>So you can just call

01:07:58.634 --> 01:07:59.914
<v Speaker 1>span.ads

01:08:00.394 --> 01:08:02.875
<v Speaker 1>add span event and then pass your your

01:08:02.875 --> 01:08:03.434
<v Speaker 1>message.

01:08:04.630 --> 01:08:06.710
<v Speaker 1>So it's just a change from using your

01:08:06.710 --> 01:08:09.750
<v Speaker 1>standard logger to using a span event,

01:08:10.470 --> 01:08:12.310
<v Speaker 1>and it'll automatically make it a child of

01:08:12.310 --> 01:08:13.110
<v Speaker 1>the trace.

01:08:15.590 --> 01:08:17.109
<v Speaker 1>Db.database.

01:08:17.109 --> 01:08:19.029
<v Speaker 1>So d b

01:08:22.645 --> 01:08:23.444
<v Speaker 2>comes

01:08:23.524 --> 01:08:25.045
<v Speaker 2>through from in

01:08:25.205 --> 01:08:26.324
<v Speaker 2>root.co,

01:08:28.005 --> 01:08:29.285
<v Speaker 2>and it is passed in.

01:08:32.780 --> 01:08:34.620
<v Speaker 0>Well, I think this should be d What's

01:08:34.620 --> 01:08:37.820
<v Speaker 1>your type definition where where where where where

01:08:37.820 --> 01:08:40.060
<v Speaker 1>databases is defined? Maybe that's d b dot

01:08:40.060 --> 01:08:41.100
<v Speaker 2>instance. Yeah.

01:08:44.540 --> 01:08:46.940
<v Speaker 2>What what does server take? Oh, it's private.

01:08:49.074 --> 01:08:50.514
<v Speaker 1>You shouldn't have to change that. I think

01:08:50.514 --> 01:08:52.834
<v Speaker 1>it's the interface definition for DB.

01:08:53.074 --> 01:08:53.554
<v Speaker 1>Right? Like

01:08:55.795 --> 01:08:58.274
<v Speaker 2>yeah. So I I don't get why it

01:08:58.274 --> 01:08:58.675
<v Speaker 2>broke.

01:08:59.890 --> 01:09:01.569
<v Speaker 1>I understand why it broke because you added

01:09:01.569 --> 01:09:04.609
<v Speaker 1>context. Right? You added context and function signature.

01:09:04.689 --> 01:09:07.250
<v Speaker 1>There are some other interface definition presumably for

01:09:07.250 --> 01:09:08.130
<v Speaker 1>testability

01:09:08.689 --> 01:09:10.450
<v Speaker 1>where you need to make it take context

01:09:10.450 --> 01:09:11.010
<v Speaker 1>now.

01:09:11.489 --> 01:09:13.744
<v Speaker 2>Oh, because it it was passed in or

01:09:13.744 --> 01:09:15.104
<v Speaker 2>or did we In all the other in

01:09:15.104 --> 01:09:16.864
<v Speaker 1>all the other methods, it was. But you

01:09:16.864 --> 01:09:19.184
<v Speaker 1>need to so we can you search your

01:09:19.184 --> 01:09:20.304
<v Speaker 1>your code base

01:09:20.545 --> 01:09:23.344
<v Speaker 1>for get all? Like, search your code base

01:09:23.344 --> 01:09:23.984
<v Speaker 1>for get all.

01:09:27.689 --> 01:09:28.729
<v Speaker 0>There

01:09:28.729 --> 01:09:30.890
<v Speaker 0>we go. Yep. There you go. It's right

01:09:30.890 --> 01:09:31.449
<v Speaker 1>there.

01:09:33.529 --> 01:09:34.729
<v Speaker 1>Nice. That should do it.

01:09:40.505 --> 01:09:41.864
<v Speaker 0>Messaging return.

01:09:41.945 --> 01:09:43.545
<v Speaker 0>Oh, no. Wait. Let's see.

01:09:44.185 --> 01:09:45.064
<v Speaker 0>Is that it?

01:09:45.545 --> 01:09:46.265
<v Speaker 1>No.

01:09:47.225 --> 01:09:48.665
<v Speaker 1>Force to recompile,

01:09:49.625 --> 01:09:51.625
<v Speaker 1>but also look at main go line 74.

01:09:51.625 --> 01:09:52.024
<v Speaker 1>Yeah.

01:09:55.330 --> 01:09:56.530
<v Speaker 1>As you can see, a lot of the

01:09:56.530 --> 01:09:58.930
<v Speaker 1>fiddly stuff is not actually a hotel. It's

01:09:58.930 --> 01:09:59.730
<v Speaker 1>just like

01:10:01.650 --> 01:10:03.010
<v Speaker 2>Yeah. We we kind of

01:10:04.210 --> 01:10:06.530
<v Speaker 2>expected a little bit of the this code

01:10:06.530 --> 01:10:07.489
<v Speaker 2>to fight us a little bit.

01:10:08.145 --> 01:10:09.905
<v Speaker 1>A little bit of spaghetti. Yeah.

01:10:11.105 --> 01:10:12.304
<v Speaker 0>Oh,

01:10:14.385 --> 01:10:15.344
<v Speaker 1>propagators.

01:10:16.545 --> 01:10:18.465
<v Speaker 1>It's a return. Oh, honeycomb export.

01:10:28.550 --> 01:10:30.710
<v Speaker 1>Alright. Hey. Now the auto build is working

01:10:30.710 --> 01:10:31.749
<v Speaker 1>again, at least.

01:10:32.789 --> 01:10:33.829
<v Speaker 0>We're getting there.

01:10:35.845 --> 01:10:36.965
<v Speaker 0>It's happy.

01:10:39.045 --> 01:10:40.565
<v Speaker 1>Up backup restarting.

01:10:40.725 --> 01:10:41.445
<v Speaker 0>So

01:10:42.885 --> 01:10:44.405
<v Speaker 0>I just made up what I added to

01:10:44.405 --> 01:10:46.485
<v Speaker 0>here. Maybe we should just undo this a

01:10:46.485 --> 01:10:48.565
<v Speaker 0>few times. It looks like maybe

01:10:54.770 --> 01:10:57.170
<v Speaker 0>this was the changes that you both made

01:10:57.170 --> 01:10:58.210
<v Speaker 0>off screen.

01:10:58.449 --> 01:11:00.290
<v Speaker 0>Is that right? Have I made that That

01:11:00.370 --> 01:11:02.530
<v Speaker 1>that's that's correct. That's correct. Right? Like, because

01:11:02.530 --> 01:11:04.625
<v Speaker 1>we had to pass in the honeycomb Exporter

01:11:04.625 --> 01:11:05.665
<v Speaker 1>to be able to

01:11:07.585 --> 01:11:10.225
<v Speaker 2>You don't wanna return star Honeycomb Exporter, please.

01:11:10.225 --> 01:11:12.705
<v Speaker 1>Yeah. You want to return regular Honeycomb Exporter.

01:11:14.145 --> 01:11:15.025
<v Speaker 2>It's in

01:11:15.505 --> 01:11:18.065
<v Speaker 2>pink server main. What's the Oh, we need

01:11:18.065 --> 01:11:20.145
<v Speaker 1>to we need to return

01:11:20.430 --> 01:11:22.670
<v Speaker 1>Alright. This this function signature needs to return

01:11:22.670 --> 01:11:25.230
<v Speaker 1>a pointer, not a not a concrete honeycomb

01:11:25.230 --> 01:11:26.110
<v Speaker 1>exporter.

01:11:29.150 --> 01:11:31.150
<v Speaker 1>So go to the function signature here.

01:11:32.765 --> 01:11:33.725
<v Speaker 2>Alright. We

01:11:34.205 --> 01:11:36.125
<v Speaker 2>we do need to report return a pointer

01:11:36.125 --> 01:11:38.045
<v Speaker 2>to the x. Yep. Yep. Right. That's exactly

01:11:38.045 --> 01:11:39.005
<v Speaker 1>correct. And then

01:11:39.405 --> 01:11:41.965
<v Speaker 2>down here, we're gonna go return

01:11:43.645 --> 01:11:46.285
<v Speaker 2>we have a honeycomb Ampersand honeycomb explorer, I

01:11:46.285 --> 01:11:46.445
<v Speaker 1>bet.

01:11:51.230 --> 01:11:53.070
<v Speaker 0>Yeah. We'll need to delete that API key

01:11:53.070 --> 01:11:55.389
<v Speaker 0>afterwards too. Yep. And I'll do that as

01:11:55.389 --> 01:11:56.669
<v Speaker 2>soon as we hang enough.

01:11:58.670 --> 01:11:59.309
<v Speaker 0>Oh,

01:11:59.710 --> 01:12:00.670
<v Speaker 0>what?

01:12:00.670 --> 01:12:02.030
<v Speaker 0>That's just missing there.

01:12:02.915 --> 01:12:05.555
<v Speaker 1>Yeah. What's complaining about? How are these things

01:12:05.555 --> 01:12:07.955
<v Speaker 1>all getting, like, randomly It's a it's already

01:12:07.955 --> 01:12:08.675
<v Speaker 2>a pointer.

01:12:09.235 --> 01:12:10.275
<v Speaker 1>Okay. Yeah.

01:12:11.155 --> 01:12:11.955
<v Speaker 2>Because we're probably

01:12:12.595 --> 01:12:14.355
<v Speaker 0>Type it over each other, I think. It's

01:12:14.355 --> 01:12:14.915
<v Speaker 0>okay.

01:12:15.635 --> 01:12:17.315
<v Speaker 0>Alright. Let's see what happens now.

01:12:22.230 --> 01:12:23.349
<v Speaker 2>Running starts.

01:12:26.469 --> 01:12:28.230
<v Speaker 0>Let's see. Can I

01:12:31.165 --> 01:12:33.085
<v Speaker 0>no? Server's not running.

01:12:33.165 --> 01:12:34.845
<v Speaker 2>The only way of tracing. This would be

01:12:34.845 --> 01:12:35.885
<v Speaker 2>so much easier.

01:12:38.125 --> 01:12:40.125
<v Speaker 1>Back off restarting failed container.

01:12:47.290 --> 01:12:48.489
<v Speaker 1>First to rebuild?

01:12:48.970 --> 01:12:49.370
<v Speaker 1>Yep.

01:13:03.895 --> 01:13:06.695
<v Speaker 0>Yeah. So it's compelling, but it's just not

01:13:06.695 --> 01:13:07.655
<v Speaker 0>running.

01:13:08.695 --> 01:13:10.615
<v Speaker 1>Did we accidentally revert the change with the

01:13:10.615 --> 01:13:11.255
<v Speaker 1>interceptors?

01:13:11.700 --> 01:13:13.540
<v Speaker 1>Is that is that what's happening here?

01:13:15.700 --> 01:13:17.540
<v Speaker 0>Very possibly. GRPC?

01:13:18.100 --> 01:13:20.020
<v Speaker 1>Yep. It would be in gRPC. There.

01:13:24.820 --> 01:13:27.220
<v Speaker 1>Including commenting out the Prometheus.

01:13:27.635 --> 01:13:29.315
<v Speaker 2>But something did go weird with that code

01:13:29.315 --> 01:13:31.075
<v Speaker 2>at one just a few minutes ago, so

01:13:31.075 --> 01:13:32.515
<v Speaker 2>I don't remember what we did.

01:13:33.395 --> 01:13:35.795
<v Speaker 0>Yeah. The Prometheus Okay. That's still commented out.

01:13:35.795 --> 01:13:36.755
<v Speaker 1>Okay. That's good.

01:13:38.355 --> 01:13:39.795
<v Speaker 2>There was one there was one more line

01:13:39.795 --> 01:13:40.675
<v Speaker 2>in here. That's right.

01:13:42.250 --> 01:13:43.929
<v Speaker 2>That set up that that

01:13:46.490 --> 01:13:48.170
<v Speaker 2>it did something I thought was important. I

01:13:48.170 --> 01:13:49.290
<v Speaker 2>don't remember what it was.

01:13:49.610 --> 01:13:51.130
<v Speaker 2>Can you can you do a diff on

01:13:51.130 --> 01:13:51.929
<v Speaker 2>this section

01:13:52.410 --> 01:13:52.970
<v Speaker 2>real quick?

01:13:58.705 --> 01:14:00.225
<v Speaker 0>Let's fail this one.

01:14:05.905 --> 01:14:07.585
<v Speaker 0>Oh, the creds is missing.

01:14:08.705 --> 01:14:10.705
<v Speaker 1>Oh, yep. The creds are missing.

01:14:11.480 --> 01:14:12.519
<v Speaker 1>That would do it.

01:14:14.199 --> 01:14:16.040
<v Speaker 1>Oh my goodness. That

01:14:16.040 --> 01:14:16.920
<v Speaker 2>looks important.

01:14:17.080 --> 01:14:18.519
<v Speaker 1>Yeah. It looks important.

01:14:19.640 --> 01:14:21.800
<v Speaker 0>I have no idea how that lane disappeared,

01:14:21.800 --> 01:14:22.120
<v Speaker 0>but

01:14:22.679 --> 01:14:23.960
<v Speaker 1>then the

01:14:24.395 --> 01:14:26.635
<v Speaker 2>The v yeah. The the curly brace disappeared

01:14:26.635 --> 01:14:28.955
<v Speaker 2>at some point too, so must be all

01:14:28.955 --> 01:14:31.034
<v Speaker 2>these sharing and everything overlapping.

01:14:31.114 --> 01:14:32.554
<v Speaker 1>Yeah. Okay.

01:14:34.395 --> 01:14:35.594
<v Speaker 2>Grumble grumble.

01:14:35.675 --> 01:14:38.875
<v Speaker 0>So it's Alright. Let's rebuild and see what

01:14:38.875 --> 01:14:39.195
<v Speaker 1>happens.

01:14:43.900 --> 01:14:45.820
<v Speaker 1>And then we can get back to the

01:14:46.060 --> 01:14:48.460
<v Speaker 1>gap we are we are shaving, which was

01:14:48.460 --> 01:14:50.619
<v Speaker 1>which was instrumenting the database call.

01:14:51.739 --> 01:14:52.699
<v Speaker 0>Still getting the Still failing?

01:14:58.305 --> 01:14:59.025
<v Speaker 1>Why?

01:15:00.305 --> 01:15:02.865
<v Speaker 1>Let's diff can we diff everything we've done

01:15:02.865 --> 01:15:03.585
<v Speaker 1>so far?

01:15:04.945 --> 01:15:07.185
<v Speaker 1>Curious what that global diff looks like.

01:15:09.140 --> 01:15:11.300
<v Speaker 0>Alright. So that's just the tank fail.

01:15:13.220 --> 01:15:15.940
<v Speaker 0>Main Go add it at OpenTelemetry.

01:15:16.660 --> 01:15:18.100
<v Speaker 1>Yeah. That looks fine.

01:15:19.140 --> 01:15:21.220
<v Speaker 1>Okay. Yeah. That differs in the main, so

01:15:21.220 --> 01:15:22.100
<v Speaker 0>that's okay.

01:15:22.420 --> 01:15:22.820
<v Speaker 1>Yep.

01:15:24.315 --> 01:15:26.474
<v Speaker 1>Yep. That looks fine.

01:15:28.715 --> 01:15:29.594
<v Speaker 0>Yep.

01:15:31.114 --> 01:15:32.554
<v Speaker 1>So that all looks okay.

01:15:33.275 --> 01:15:35.275
<v Speaker 0>Added the context. Added the Yep.

01:15:37.770 --> 01:15:40.090
<v Speaker 0>And that's go mod. That's very big.

01:15:42.010 --> 01:15:42.730
<v Speaker 1>Yep.

01:15:43.210 --> 01:15:45.050
<v Speaker 0>Let's go back up here.

01:15:46.650 --> 01:15:49.050
<v Speaker 0>Well, Prometheus gone. Hotel n.

01:15:49.290 --> 01:15:49.690
<v Speaker 1>Yeah.

01:15:52.275 --> 01:15:54.435
<v Speaker 2>Logger. Oh, you remove it you removed a

01:15:54.435 --> 01:15:56.114
<v Speaker 1>logger equals logline.

01:15:56.275 --> 01:15:58.755
<v Speaker 2>That might be important. That looks important.

01:16:00.995 --> 01:16:02.195
<v Speaker 0>Wrong way.

01:16:02.755 --> 01:16:04.515
<v Speaker 0>Okay. So Oh, yeah.

01:16:05.235 --> 01:16:06.515
<v Speaker 1>That was there before. Right?

01:16:07.700 --> 01:16:10.100
<v Speaker 2>I think so. So that's in the gRPC

01:16:10.100 --> 01:16:13.620
<v Speaker 0>main. Right? Okay. Yeah. Yeah. Just probably right

01:16:13.620 --> 01:16:14.580
<v Speaker 2>up that brace.

01:16:16.820 --> 01:16:18.740
<v Speaker 1>Okay. That'll probably get the build build going.

01:16:18.740 --> 01:16:20.980
<v Speaker 2>I'm wondering why they chose that in here.

01:16:20.980 --> 01:16:21.220
<v Speaker 2>Anyway.

01:16:23.725 --> 01:16:26.525
<v Speaker 0>Let's just keep blaming Versus code. Okay.

01:16:27.885 --> 01:16:29.085
<v Speaker 0>Alright. It's running.

01:16:30.685 --> 01:16:33.005
<v Speaker 1>Alright. Let's make sure that this works.

01:16:34.125 --> 01:16:35.245
<v Speaker 0>Yay. Hey.

01:16:36.870 --> 01:16:38.950
<v Speaker 1>I'm annoyed that it fails silently if you

01:16:38.950 --> 01:16:40.790
<v Speaker 1>don't do that. You know? Like, that that

01:16:40.790 --> 01:16:42.230
<v Speaker 1>that really bugs me.

01:16:42.710 --> 01:16:43.750
<v Speaker 1>But okay.

01:16:44.150 --> 01:16:44.949
<v Speaker 1>Great.

01:16:45.190 --> 01:16:46.790
<v Speaker 2>Back to where we were. Our result count

01:16:46.790 --> 01:16:47.750
<v Speaker 2>shows up now.

01:16:48.310 --> 01:16:49.670
<v Speaker 2>Oh, it does? Yeah.

01:16:51.235 --> 01:16:52.915
<v Speaker 1>Okay. So the problem was that it never

01:16:52.915 --> 01:16:55.795
<v Speaker 1>compiled after logger equals log disappeared.

01:16:57.315 --> 01:16:58.995
<v Speaker 1>So none of our other changes were making

01:16:58.995 --> 01:17:00.595
<v Speaker 1>it through. So now we can probably delete

01:17:00.595 --> 01:17:02.595
<v Speaker 1>that extra logline because we

01:17:03.300 --> 01:17:05.300
<v Speaker 2>Well, let's not delete anything until we get

01:17:05.300 --> 01:17:06.900
<v Speaker 2>through this next step. Yeah. Yeah. Okay. Let's

01:17:06.900 --> 01:17:08.340
<v Speaker 1>go back to the manual spans on the

01:17:08.340 --> 01:17:10.100
<v Speaker 0>DB cluster. Let's go to create manual span

01:17:10.100 --> 01:17:11.780
<v Speaker 1>from the DB. Okay.

01:17:12.180 --> 01:17:12.900
<v Speaker 0>So

01:17:14.260 --> 01:17:14.980
<v Speaker 0>which

01:17:15.220 --> 01:17:17.475
<v Speaker 0>let's see. Where is that function?

01:17:19.555 --> 01:17:21.715
<v Speaker 0>No. That was in hardware, wasn't it? Under

01:17:21.715 --> 01:17:23.475
<v Speaker 0>the DB. Okay. So this is where we

01:17:23.475 --> 01:17:26.035
<v Speaker 0>wanna add our span. Yep. So first, we

01:17:26.035 --> 01:17:28.275
<v Speaker 1>need a trace from context. Yep.

01:17:29.475 --> 01:17:32.940
<v Speaker 1>And remember, it's trace dot span from context.

01:17:35.980 --> 01:17:38.540
<v Speaker 0>And c t x. Okay. Yep.

01:17:39.180 --> 01:17:40.940
<v Speaker 1>And now we need to

01:17:42.140 --> 01:17:44.540
<v Speaker 1>set or we need to instantiate a new

01:17:44.540 --> 01:17:44.940
<v Speaker 1>span.

01:17:46.785 --> 01:17:48.785
<v Speaker 1>So we're going to

01:17:49.585 --> 01:17:51.985
<v Speaker 1>if you look at the documentation for for

01:17:51.985 --> 01:17:53.345
<v Speaker 1>the trace API

01:17:57.345 --> 01:17:58.865
<v Speaker 1>go docs again. Yep.

01:17:59.185 --> 01:18:01.105
<v Speaker 1>So look at the type methods on type

01:18:01.105 --> 01:18:01.505
<v Speaker 1>span.

01:18:05.700 --> 01:18:06.340
<v Speaker 1>Yep.

01:18:06.980 --> 01:18:08.900
<v Speaker 1>So to answer the question about what people

01:18:08.900 --> 01:18:11.300
<v Speaker 1>are saying earlier about trace logs, right, like,

01:18:11.300 --> 01:18:13.940
<v Speaker 1>add event. Right there. Add event. That's where

01:18:13.940 --> 01:18:16.340
<v Speaker 1>you would have added a, added your your

01:18:16.340 --> 01:18:19.144
<v Speaker 1>contextual logs. But instead of adding event,

01:18:19.545 --> 01:18:20.264
<v Speaker 1>what we're doing

01:18:20.905 --> 01:18:22.664
<v Speaker 1>sorry. It's answering the previous question of how

01:18:22.664 --> 01:18:24.905
<v Speaker 1>you add a lot logs. Here, though, we

01:18:24.905 --> 01:18:26.744
<v Speaker 1>need to create a new span.

01:18:27.224 --> 01:18:29.224
<v Speaker 1>So there should be a

01:18:32.409 --> 01:18:34.250
<v Speaker 0>I should read the docs instead of using

01:18:34.409 --> 01:18:35.610
<v Speaker 1>Read read the docs.

01:18:37.530 --> 01:18:39.050
<v Speaker 2>I'll I'll be right back.

01:18:39.530 --> 01:18:40.329
<v Speaker 0>Yeah. No problem.

01:18:43.785 --> 01:18:46.345
<v Speaker 1>Oh, why am I failing to remember how

01:18:46.345 --> 01:18:47.625
<v Speaker 1>to how to do this?

01:18:51.145 --> 01:18:52.665
<v Speaker 0>So when we call

01:18:52.825 --> 01:18:55.385
<v Speaker 0>trace span from context, that's returning a new

01:18:55.385 --> 01:18:56.585
<v Speaker 0>span, is it not? Or if I mess

01:18:56.585 --> 01:18:58.985
<v Speaker 2>up No. Spanner context returns our current span.

01:18:59.010 --> 01:19:01.090
<v Speaker 1>Ah, I remembered the deal. We don't need

01:19:01.570 --> 01:19:03.250
<v Speaker 1>we don't actually need to run span from

01:19:03.250 --> 01:19:04.769
<v Speaker 1>con or we will need to run span

01:19:04.769 --> 01:19:06.050
<v Speaker 1>from context later.

01:19:07.409 --> 01:19:09.809
<v Speaker 1>Potentially, no. We don't. Sorry.

01:19:10.050 --> 01:19:11.889
<v Speaker 1>The thing that we want is

01:19:12.825 --> 01:19:15.465
<v Speaker 1>to get our our trace provider

01:19:16.345 --> 01:19:19.065
<v Speaker 1>or trace dot start. Ah, that's it. Trace

01:19:19.065 --> 01:19:19.865
<v Speaker 1>dot start.

01:19:21.225 --> 01:19:24.185
<v Speaker 1>So something like let me paste it over.

01:19:24.265 --> 01:19:26.510
<v Speaker 1>Actually, why don't I can directly edit this,

01:19:26.510 --> 01:19:27.790
<v Speaker 1>can't I? Go for it.

01:19:28.590 --> 01:19:31.870
<v Speaker 1>Where are we? We're in database? Hardware.com. Hardware.go.

01:19:31.870 --> 01:19:33.949
<v Speaker 0>In database. Yeah. Great.

01:19:34.830 --> 01:19:37.150
<v Speaker 1>Where are we? Lane 156. Ah,

01:19:37.790 --> 01:19:38.590
<v Speaker 1>yes. Perfect.

01:19:39.045 --> 01:19:41.285
<v Speaker 1>K. So we want something like this.

01:19:59.429 --> 01:20:01.269
<v Speaker 1>So something like this.

01:20:01.670 --> 01:20:03.349
<v Speaker 1>Yep. That should do it.

01:20:05.190 --> 01:20:07.625
<v Speaker 1>And I hope it automatically inferred. No. It

01:20:07.625 --> 01:20:08.344
<v Speaker 1>did not.

01:20:08.665 --> 01:20:09.864
<v Speaker 1>So we need to

01:20:13.465 --> 01:20:16.105
<v Speaker 1>fix this or if it's not happy about

01:20:16.105 --> 01:20:16.744
<v Speaker 1>this.

01:20:16.985 --> 01:20:19.625
<v Speaker 0>I think the Versus Code web interface has

01:20:19.625 --> 01:20:22.425
<v Speaker 0>some sort of operational transformation bug

01:20:22.660 --> 01:20:24.179
<v Speaker 0>because I'm seeing

01:20:24.820 --> 01:20:26.180
<v Speaker 0>lots of duplications.

01:20:26.180 --> 01:20:27.700
<v Speaker 0>So I'm just Oh, no. I see it

01:20:27.700 --> 01:20:30.500
<v Speaker 2>too. Yeah. And it's gonna clean this up.

01:20:31.620 --> 01:20:33.460
<v Speaker 0>I think that is where we wanna be.

01:20:33.460 --> 01:20:36.545
<v Speaker 0>So I've saved that. Yep. Right? Yeah. Yep.

01:20:38.785 --> 01:20:41.105
<v Speaker 1>I'm gonna close my browser then to prevent

01:20:41.265 --> 01:20:42.785
<v Speaker 1>oh, no. It it did more of that.

01:20:42.785 --> 01:20:44.785
<v Speaker 1>Okay. I'm going to close my browser so

01:20:44.785 --> 01:20:46.145
<v Speaker 1>it stops do stops

01:20:48.130 --> 01:20:49.250
<v Speaker 1>messing this up.

01:20:49.490 --> 01:20:50.210
<v Speaker 0>Yeah.

01:20:50.450 --> 01:20:52.370
<v Speaker 0>I think it's okay. I think yeah. We're

01:20:52.370 --> 01:20:53.970
<v Speaker 0>we're good now. Okay. I'll look at the

01:20:53.970 --> 01:20:55.570
<v Speaker 1>top. Let's make sure my imports are correct.

01:20:59.635 --> 01:21:01.314
<v Speaker 1>Nope. That's bad too,

01:21:01.554 --> 01:21:02.914
<v Speaker 1>and we need API

01:21:02.915 --> 01:21:03.954
<v Speaker 1>trace as well.

01:21:04.514 --> 01:21:06.354
<v Speaker 0>Okay. So API

01:21:06.514 --> 01:21:07.394
<v Speaker 0>trace.

01:21:09.554 --> 01:21:11.475
<v Speaker 1>I think it might be just r slash

01:21:11.475 --> 01:21:13.394
<v Speaker 1>hotel slash global, not API

01:21:13.395 --> 01:21:14.114
<v Speaker 1>trace.

01:21:14.930 --> 01:21:15.890
<v Speaker 0>Okay.

01:21:18.050 --> 01:21:20.130
<v Speaker 0>Hotel global and API trace.

01:21:20.690 --> 01:21:22.050
<v Speaker 2>I wanna find out what feature that is

01:21:22.050 --> 01:21:23.250
<v Speaker 2>so I can make sure I always turn

01:21:23.250 --> 01:21:24.210
<v Speaker 2>it off.

01:21:25.650 --> 01:21:28.385
<v Speaker 2>Yeah. Delete stuff. It cleans up unused import.

01:21:28.385 --> 01:21:29.665
<v Speaker 0>So you have to add this underscore at

01:21:29.665 --> 01:21:31.025
<v Speaker 0>the start until you have code that you

01:21:31.025 --> 01:21:32.865
<v Speaker 1>need. It is API global. Sorry.

01:21:33.825 --> 01:21:35.905
<v Speaker 0>And it is API global. Okay.

01:21:36.305 --> 01:21:37.025
<v Speaker 1>Okay.

01:21:37.745 --> 01:21:38.145
<v Speaker 1>So

01:21:39.950 --> 01:21:42.270
<v Speaker 1>now let's go ahead and add with the

01:21:42.270 --> 01:21:45.230
<v Speaker 1>trace. Let's add add in some attributes to

01:21:45.230 --> 01:21:47.550
<v Speaker 1>the span. Oh, actually, we don't need the

01:21:47.550 --> 01:21:49.310
<v Speaker 1>trace library, I think, because we got the

01:21:49.310 --> 01:21:50.350
<v Speaker 1>span automatically. Okay.

01:21:51.895 --> 01:21:52.535
<v Speaker 1>So

01:21:53.255 --> 01:21:56.614
<v Speaker 1>what would be useful to remember from here?

01:21:58.055 --> 01:21:59.175
<v Speaker 1>What do we need?

01:22:00.135 --> 01:22:01.655
<v Speaker 2>Length of the query,

01:22:02.055 --> 01:22:04.295
<v Speaker 2>maybe the input parameters, like the hardware ID.

01:22:05.470 --> 01:22:07.630
<v Speaker 1>But this is get all. So get all.

01:22:08.590 --> 01:22:11.310
<v Speaker 1>Okay. So maybe there's just no no useful

01:22:11.310 --> 01:22:13.710
<v Speaker 1>info about the span to report. Great. Perfect.

01:22:13.870 --> 01:22:15.870
<v Speaker 1>Okay. Let's solder on and see whether we

01:22:15.870 --> 01:22:18.110
<v Speaker 1>get the get all span now in in

01:22:18.110 --> 01:22:18.670
<v Speaker 1>Honeycomb.

01:22:19.675 --> 01:22:22.074
<v Speaker 0>Should we just add something random so we

01:22:22.074 --> 01:22:23.594
<v Speaker 0>can see that coming through? I mean, make

01:22:23.594 --> 01:22:25.355
<v Speaker 1>it No. This this should make it come

01:22:25.355 --> 01:22:27.675
<v Speaker 1>through. Just it'll create just a span named

01:22:27.675 --> 01:22:30.315
<v Speaker 1>tink d b dot get all. Right? Okay.

01:22:30.315 --> 01:22:32.395
<v Speaker 0>I gotcha. This is creating the shell span.

01:22:32.395 --> 01:22:34.699
<v Speaker 1>So Let's check till it's still happy. So

01:22:34.699 --> 01:22:36.300
<v Speaker 2>it'll still get us, like, how long the

01:22:36.300 --> 01:22:37.340
<v Speaker 2>query took. Right?

01:22:37.660 --> 01:22:38.860
<v Speaker 1>Yeah. It'll still get us how long the

01:22:38.860 --> 01:22:42.140
<v Speaker 1>query took. So deployed thirty seconds ago. I

01:22:42.140 --> 01:22:44.140
<v Speaker 0>can still hit hardware less. So now we

01:22:44.140 --> 01:22:45.739
<v Speaker 0>wanna go to Honeycomb, and we should see

01:22:45.739 --> 01:22:47.755
<v Speaker 0>this getting a little bit more complicated. Right?

01:22:47.755 --> 01:22:49.514
<v Speaker 0>We should have Yep. Multiple.

01:22:51.195 --> 01:22:54.555
<v Speaker 2>That is correct. Oh, look. Two two colors.

01:23:00.480 --> 01:23:02.639
<v Speaker 1>The database is only half of the time.

01:23:03.520 --> 01:23:04.479
<v Speaker 1>That's cool.

01:23:05.840 --> 01:23:07.840
<v Speaker 0>Well, I guess there's nothing been returned. So

01:23:07.840 --> 01:23:10.320
<v Speaker 0>it's we don't have any hardware.

01:23:10.880 --> 01:23:12.515
<v Speaker 2>You have some files ready to add add

01:23:12.515 --> 01:23:13.955
<v Speaker 2>some. Right? Yeah. Should we should we should

01:23:13.955 --> 01:23:15.795
<v Speaker 0>we instrument add hardware first, or do you

01:23:15.795 --> 01:23:17.715
<v Speaker 0>want to just run add hardware? Let's just

01:23:17.715 --> 01:23:19.875
<v Speaker 1>add run. We're running a little short on

01:23:19.875 --> 01:23:22.435
<v Speaker 1>time. Let's let's let's just insert some things

01:23:22.435 --> 01:23:23.875
<v Speaker 1>into the database and now make it a

01:23:23.875 --> 01:23:24.755
<v Speaker 1>little bit slower.

01:23:25.235 --> 01:23:27.099
<v Speaker 2>I mean, this is per when I was

01:23:27.099 --> 01:23:29.019
<v Speaker 2>looking through this code last night, this is

01:23:29.019 --> 01:23:30.699
<v Speaker 2>way further than I thought we would get.

01:23:30.699 --> 01:23:31.260
<v Speaker 2>So

01:23:34.539 --> 01:23:35.340
<v Speaker 1>Honestly,

01:23:35.340 --> 01:23:37.019
<v Speaker 1>Versus code slowed us down the most out

01:23:37.019 --> 01:23:37.739
<v Speaker 1>of anything here.

01:23:38.614 --> 01:23:40.934
<v Speaker 0>Yeah. The share thing is really cool, though.

01:23:42.054 --> 01:23:44.054
<v Speaker 2>Well, I hope they keep working on it.

01:23:44.135 --> 01:23:45.735
<v Speaker 1>Yeah. I hope they keep working on it.

01:23:45.735 --> 01:23:48.375
<v Speaker 1>Okay. So we've just got to run this

01:23:48.375 --> 01:23:49.175
<v Speaker 0>command

01:23:49.415 --> 01:23:49.895
<v Speaker 0>and,

01:23:53.510 --> 01:23:55.829
<v Speaker 0>yep. That's the one. The hardware.

01:23:55.909 --> 01:23:57.030
<v Speaker 0>What was it?

01:23:57.429 --> 01:23:58.709
<v Speaker 0>Push fail.

01:24:01.670 --> 01:24:01.989
<v Speaker 0>Hard.

01:24:07.915 --> 01:24:09.995
<v Speaker 2>I think it went in. Oh, okay. I

01:24:09.995 --> 01:24:10.554
<v Speaker 0>know.

01:24:12.395 --> 01:24:14.795
<v Speaker 0>Ta da. Okay. So the next biblical hardware

01:24:14.795 --> 01:24:15.275
<v Speaker 0>list.

01:24:18.380 --> 01:24:19.980
<v Speaker 1>Okay. So now let's see what that looks

01:24:19.980 --> 01:24:21.019
<v Speaker 1>like in Honeycomb.

01:24:21.900 --> 01:24:23.019
<v Speaker 2>It looks the same.

01:24:23.739 --> 01:24:25.260
<v Speaker 1>Well, it looks the same, and we should

01:24:25.260 --> 01:24:27.580
<v Speaker 1>now see some attributes that are being set.

01:24:27.580 --> 01:24:29.099
<v Speaker 1>Like, we should be able to see the

01:24:29.340 --> 01:24:30.139
<v Speaker 1>Result count one.

01:24:31.935 --> 01:24:33.935
<v Speaker 2>So we we we got a record.

01:24:35.775 --> 01:24:37.535
<v Speaker 0>Do we have a result? Oh, we do.

01:24:37.535 --> 01:24:40.175
<v Speaker 0>Wait. Yeah. Yeah. And the database is now

01:24:40.175 --> 01:24:41.375
<v Speaker 0>the fastest part. So

01:24:44.210 --> 01:24:46.690
<v Speaker 0>it's weird. Okay. So that does beg the

01:24:46.690 --> 01:24:48.690
<v Speaker 1>question. Right? Like, why is it that the

01:24:49.010 --> 01:24:50.850
<v Speaker 1>that's why is it doing so much stuff

01:24:50.850 --> 01:24:52.690
<v Speaker 1>in the forty milliseconds before it actually talks

01:24:52.690 --> 01:24:54.210
<v Speaker 1>to the database? Right?

01:24:54.690 --> 01:24:56.935
<v Speaker 1>This is part of right. Like, instrumentation for

01:24:56.935 --> 01:24:58.535
<v Speaker 1>the sake of instrumentation is pointless. Right? Like,

01:24:58.535 --> 01:24:59.735
<v Speaker 1>the reason why we do this is to

01:24:59.815 --> 01:25:01.655
<v Speaker 1>and hover performance things or things that are

01:25:01.655 --> 01:25:03.815
<v Speaker 1>like, That's not doing what I expected it

01:25:03.815 --> 01:25:05.015
<v Speaker 1>to. Right? And then you dive in and

01:25:05.015 --> 01:25:05.735
<v Speaker 1>debug.

01:25:07.335 --> 01:25:10.135
<v Speaker 1>Cool. Well, I think this is probably a

01:25:09.590 --> 01:25:12.070
<v Speaker 1>good place to leave leave off and probably

01:25:12.070 --> 01:25:13.269
<v Speaker 1>wrap it up. Yeah?

01:25:13.750 --> 01:25:16.150
<v Speaker 0>Yeah. Definitely. That was super valuable to me

01:25:16.150 --> 01:25:17.909
<v Speaker 0>and up over to everyone else that was

01:25:17.909 --> 01:25:19.909
<v Speaker 0>watching. I think Amy and I can have

01:25:19.909 --> 01:25:21.989
<v Speaker 0>some fun adding instrumentation to this and try

01:25:21.989 --> 01:25:23.875
<v Speaker 0>and work out with that forty milliseconds is

01:25:23.875 --> 01:25:26.114
<v Speaker 0>going. But that was awesome. Thank you both

01:25:26.114 --> 01:25:27.554
<v Speaker 0>very much for joining me.

01:25:27.795 --> 01:25:28.914
<v Speaker 2>That was fun.

01:25:31.155 --> 01:25:33.074
<v Speaker 1>Alright. Well Any audience questions?

01:25:34.355 --> 01:25:36.275
<v Speaker 0>Oh yeah. If you have questions, you have

01:25:36.275 --> 01:25:37.875
<v Speaker 0>a few minutes to get them in

01:25:38.680 --> 01:25:41.080
<v Speaker 0>and we'll try our best to tackle them.

01:25:42.040 --> 01:25:43.880
<v Speaker 0>Didn't think was very happy. Think. In my

01:25:43.880 --> 01:25:44.520
<v Speaker 2>name.

01:25:45.400 --> 01:25:46.040
<v Speaker 2>Oh,

01:25:46.600 --> 01:25:48.120
<v Speaker 2>so much for So we've got a thank

01:25:48.120 --> 01:25:49.960
<v Speaker 0>you, that was really great. Thank you Jacob.

01:25:51.315 --> 01:25:53.954
<v Speaker 0>Another thank you from Mike. Thank you, Mike.

01:25:54.594 --> 01:25:56.515
<v Speaker 0>And we did answer the question earlier, didn't

01:25:56.515 --> 01:25:57.715
<v Speaker 0>we? Yes we did.

01:25:58.195 --> 01:25:59.474
<v Speaker 0>I think we're great.

01:26:01.155 --> 01:26:01.875
<v Speaker 2>Great.

01:26:02.195 --> 01:26:03.795
<v Speaker 2>Awesome thanks for tuning in.

01:26:04.515 --> 01:26:05.955
<v Speaker 0>Easier. That was a lot easier from the

01:26:05.955 --> 01:26:08.520
<v Speaker 0>point of view of importing OpenTelemetry

01:26:08.520 --> 01:26:11.560
<v Speaker 0>and getting started. The challenges we had were

01:26:11.560 --> 01:26:14.840
<v Speaker 0>completely unrelated which was frustrating but we got

01:26:14.840 --> 01:26:16.360
<v Speaker 0>there and then so thank

01:26:16.840 --> 01:26:18.360
<v Speaker 0>you both for joining me. Have an absolutely

01:26:18.360 --> 01:26:20.360
<v Speaker 0>great day and that was a pleasure. Thanks.
