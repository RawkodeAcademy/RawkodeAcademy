WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: ff0d5885-e0db-4423-9127-24f4176e2863
Created: 2025-04-29T13:45:07.889Z
Duration: 579.7624
Channels: 1

00:00:00.000 --> 00:00:02.000
<v Speaker 0>Are your container images

00:00:02.399 --> 00:00:05.680
<v Speaker 0>too big? Are your container images insecure?

00:00:05.680 --> 00:00:08.400
<v Speaker 0>The sad truth is for most people, the

00:00:08.400 --> 00:00:09.759
<v Speaker 0>answer is yes

00:00:10.000 --> 00:00:11.039
<v Speaker 0>and yes.

00:00:11.280 --> 00:00:12.320
<v Speaker 0>The challenge

00:00:12.400 --> 00:00:14.080
<v Speaker 0>is that making small,

00:00:14.080 --> 00:00:15.120
<v Speaker 0>slim, secure

00:00:15.435 --> 00:00:16.715
<v Speaker 0>container images

00:00:17.035 --> 00:00:19.994
<v Speaker 0>requires a lot of understanding and knowledge

00:00:20.395 --> 00:00:23.435
<v Speaker 0>of container layers and optimizing

00:00:23.435 --> 00:00:24.555
<v Speaker 0>those layers.

00:00:25.355 --> 00:00:27.035
<v Speaker 0>But what if there was an easier way?

00:00:28.090 --> 00:00:30.170
<v Speaker 0>Today, we're gonna take a look at Slim

00:00:30.170 --> 00:00:31.930
<v Speaker 0>Toolkit by Slim AI.

00:00:32.490 --> 00:00:34.970
<v Speaker 0>This is an auto magical tool

00:00:35.130 --> 00:00:38.090
<v Speaker 0>for taking your existing container image pipelines

00:00:38.330 --> 00:00:40.570
<v Speaker 0>and making them more secure

00:00:40.730 --> 00:00:41.450
<v Speaker 0>and smaller.

00:00:42.245 --> 00:00:44.645
<v Speaker 0>Let's take a look. Let's start with the

00:00:44.645 --> 00:00:48.245
<v Speaker 0>test from a Slim Toolkit website. First, docker

00:00:48.245 --> 00:00:49.045
<v Speaker 0>image

00:00:49.285 --> 00:00:51.845
<v Speaker 0>pull nginx 1.19.

00:00:54.900 --> 00:00:56.660
<v Speaker 0>This is pulling down a version of the

00:00:56.660 --> 00:00:58.100
<v Speaker 0>NGINX image.

00:00:58.260 --> 00:01:00.260
<v Speaker 0>And if we run an image LS, we'll

00:01:00.260 --> 00:01:02.900
<v Speaker 0>see that this is a 33

00:01:03.060 --> 00:01:04.260
<v Speaker 0>33

00:01:04.260 --> 00:01:05.220
<v Speaker 0>meg in size.

00:01:07.475 --> 00:01:09.955
<v Speaker 0>We can do a Slim build NGINX one

00:01:09.955 --> 00:01:12.995
<v Speaker 0>nineteen using the name of the container image

00:01:12.995 --> 00:01:15.395
<v Speaker 0>already available on the Docker daemon.

00:01:16.115 --> 00:01:18.354
<v Speaker 0>This is now entering HTTP

00:01:18.354 --> 00:01:19.155
<v Speaker 0>probe mode.

00:01:19.850 --> 00:01:21.850
<v Speaker 0>This means that they have a special sensor

00:01:21.850 --> 00:01:24.490
<v Speaker 0>probe that queries the container

00:01:24.570 --> 00:01:27.130
<v Speaker 0>on web ports and tries to detect which

00:01:27.130 --> 00:01:29.690
<v Speaker 0>passer available and hits them to understand the

00:01:29.690 --> 00:01:32.090
<v Speaker 0>runtime components of your container image.

00:01:33.305 --> 00:01:34.744
<v Speaker 0>Kinda cool. Right?

00:01:35.465 --> 00:01:38.185
<v Speaker 0>Well, let's run docker image l s now.

00:01:38.505 --> 00:01:40.905
<v Speaker 0>And you'll see we have a new nginx

00:01:40.905 --> 00:01:41.865
<v Speaker 0>dot slim

00:01:42.185 --> 00:01:46.024
<v Speaker 0>that is 12 meg, under 12 meg.

00:01:47.189 --> 00:01:48.549
<v Speaker 0>But the question is,

00:01:49.670 --> 00:01:50.630
<v Speaker 0>does it work?

00:01:51.670 --> 00:01:54.390
<v Speaker 0>Let's do docker container run dash r m

00:01:54.390 --> 00:01:56.710
<v Speaker 0>to clean up nginx.slim

00:01:56.789 --> 00:01:57.670
<v Speaker 0>latest.

00:01:58.310 --> 00:01:59.750
<v Speaker 0>And so that I can hit this on

00:01:59.750 --> 00:02:02.869
<v Speaker 0>my local machine, let's publish the port

00:02:04.174 --> 00:02:05.135
<v Speaker 0>like so.

00:02:06.575 --> 00:02:09.375
<v Speaker 0>We're now running NGINX and the Slim container

00:02:09.375 --> 00:02:12.015
<v Speaker 0>exposing as port 80 on port eighty eighty

00:02:12.015 --> 00:02:13.135
<v Speaker 0>on the host.

00:02:13.855 --> 00:02:15.694
<v Speaker 0>So let's add the port binding to my

00:02:15.694 --> 00:02:16.335
<v Speaker 0>browser

00:02:16.735 --> 00:02:17.775
<v Speaker 0>and there you have it.

00:02:18.760 --> 00:02:21.800
<v Speaker 0>We're now on NGINX homepage served

00:02:21.800 --> 00:02:24.600
<v Speaker 0>by a Slim Toolkit slimmed and hardened and

00:02:24.600 --> 00:02:25.560
<v Speaker 0>secured

00:02:26.040 --> 00:02:27.240
<v Speaker 0>container image.

00:02:27.320 --> 00:02:29.160
<v Speaker 0>Let's kick it up a little bit and

00:02:29.160 --> 00:02:33.240
<v Speaker 0>try Slim Toolkit on a real Rust project

00:02:32.925 --> 00:02:35.165
<v Speaker 0>that I'm a big fan of called dog.

00:02:35.565 --> 00:02:37.725
<v Speaker 0>Dog is a dag replacement

00:02:37.725 --> 00:02:39.565
<v Speaker 0>for doing DNS queries.

00:02:39.565 --> 00:02:41.885
<v Speaker 0>It's super awesome. Go check it out.

00:02:42.845 --> 00:02:45.805
<v Speaker 0>I've already cloned dog to this local directory.

00:02:47.239 --> 00:02:49.800
<v Speaker 0>And now we can do docker image build

00:02:50.120 --> 00:02:51.960
<v Speaker 0>and we'll call this dog latest

00:02:52.280 --> 00:02:53.800
<v Speaker 0>in the current directory.

00:02:55.959 --> 00:02:58.519
<v Speaker 0>This may take just a moment, so bear

00:02:58.519 --> 00:03:01.005
<v Speaker 0>with me. So when we run Docker image

00:03:01.005 --> 00:03:03.085
<v Speaker 0>l s, grep for dog, we can see

00:03:03.085 --> 00:03:05.405
<v Speaker 0>that the dog image is 97.5

00:03:05.405 --> 00:03:09.005
<v Speaker 0>meg. So let's build the Slim Toolkit version.

00:03:09.325 --> 00:03:11.325
<v Speaker 0>First, we need to provide

00:03:11.485 --> 00:03:13.300
<v Speaker 0>a small script,

00:03:13.300 --> 00:03:15.380
<v Speaker 0>which I call exec dot s h,

00:03:15.780 --> 00:03:18.020
<v Speaker 0>which will use the application

00:03:18.099 --> 00:03:20.180
<v Speaker 0>that we're building the Slim image for.

00:03:20.980 --> 00:03:22.819
<v Speaker 0>It's best to try and get a well

00:03:22.819 --> 00:03:24.900
<v Speaker 0>rounded set of commands that use most of

00:03:24.900 --> 00:03:25.700
<v Speaker 0>the features

00:03:25.985 --> 00:03:27.985
<v Speaker 0>so that the sensor has the ability to

00:03:27.985 --> 00:03:30.465
<v Speaker 0>give you an image with the least margin

00:03:30.465 --> 00:03:31.345
<v Speaker 0>of error.

00:03:31.825 --> 00:03:34.305
<v Speaker 0>Here, I'm just telling dog to do three

00:03:34.305 --> 00:03:36.465
<v Speaker 0>different types of DNS lookup.

00:03:36.705 --> 00:03:39.025
<v Speaker 0>I actually don't think this case it helps

00:03:39.025 --> 00:03:41.345
<v Speaker 0>or expands the functionality of the command,

00:03:41.970 --> 00:03:43.490
<v Speaker 0>but you never know.

00:03:44.769 --> 00:03:46.370
<v Speaker 0>Now we could do Slim Build

00:03:46.610 --> 00:03:49.569
<v Speaker 0>and turn off the http probe and turn

00:03:49.569 --> 00:03:52.530
<v Speaker 0>on the exec file probe like so,

00:03:52.930 --> 00:03:54.610
<v Speaker 0>telling it the image that we wish to

00:03:54.610 --> 00:03:57.695
<v Speaker 0>build. In this case, dog latest, which again

00:03:57.695 --> 00:03:59.455
<v Speaker 0>is 97.5

00:03:59.455 --> 00:04:00.175
<v Speaker 0>meg.

00:04:02.655 --> 00:04:04.735
<v Speaker 0>We can see from the output here that

00:04:04.735 --> 00:04:06.335
<v Speaker 0>our exec script ran

00:04:06.655 --> 00:04:09.775
<v Speaker 0>and then Slim optimized after inspecting

00:04:10.080 --> 00:04:11.040
<v Speaker 0>our image.

00:04:12.160 --> 00:04:14.800
<v Speaker 0>So now if we run docker image l

00:04:14.800 --> 00:04:17.040
<v Speaker 0>s again, grepping for dog,

00:04:17.519 --> 00:04:21.440
<v Speaker 0>we'll see that our dog latest image at

00:04:21.440 --> 00:04:22.560
<v Speaker 0>97.5

00:04:22.560 --> 00:04:25.440
<v Speaker 0>meg has been reduced to under 10.

00:04:26.325 --> 00:04:28.805
<v Speaker 0>That is a huge saving.

00:04:29.845 --> 00:04:31.285
<v Speaker 0>But the question is,

00:04:32.005 --> 00:04:33.365
<v Speaker 0>does it work?

00:04:34.645 --> 00:04:36.805
<v Speaker 0>Let's try Docker container,

00:04:36.965 --> 00:04:38.645
<v Speaker 0>clean up after ourselves,

00:04:39.125 --> 00:04:40.245
<v Speaker 0>doc.slim

00:04:40.820 --> 00:04:41.780
<v Speaker 0>latest,

00:04:42.260 --> 00:04:43.780
<v Speaker 0>where we wish to run

00:04:44.340 --> 00:04:45.060
<v Speaker 0>a

00:04:45.940 --> 00:04:50.020
<v Speaker 0>NS lookup on Rawkode.studio.

00:04:52.580 --> 00:04:54.260
<v Speaker 0>And don't forget to pass in the command

00:04:54.260 --> 00:04:54.900
<v Speaker 0>itself.

00:04:57.115 --> 00:04:58.955
<v Speaker 0>And we get the NS records.

00:04:59.755 --> 00:05:02.555
<v Speaker 0>We can now say, do a CNAME lookup

00:05:02.555 --> 00:05:06.715
<v Speaker 0>on community.rawkode.academy,

00:05:07.275 --> 00:05:09.915
<v Speaker 0>or even google.com.

00:05:13.280 --> 00:05:16.000
<v Speaker 0>It looks like our dog command

00:05:16.000 --> 00:05:16.720
<v Speaker 0>works.

00:05:17.040 --> 00:05:19.120
<v Speaker 0>So for our last trick,

00:05:19.360 --> 00:05:22.080
<v Speaker 0>I'm taking a real production application.

00:05:22.745 --> 00:05:25.545
<v Speaker 0>This is the Rawkode Academy website.

00:05:26.105 --> 00:05:28.505
<v Speaker 0>I've cloned it to a directory here. Now

00:05:28.505 --> 00:05:30.825
<v Speaker 0>the things you need to know are one,

00:05:30.985 --> 00:05:33.945
<v Speaker 0>this application has never had a Dockerfile before.

00:05:34.345 --> 00:05:36.980
<v Speaker 0>I've dropped one into the directory that I

00:05:36.980 --> 00:05:40.740
<v Speaker 0>literally found by googling for astro build Dockerfile.

00:05:41.060 --> 00:05:42.740
<v Speaker 0>It was the first hit in the astro

00:05:42.740 --> 00:05:43.460
<v Speaker 0>docs.

00:05:44.420 --> 00:05:47.940
<v Speaker 0>What's important here is this image is 100%

00:05:47.940 --> 00:05:49.140
<v Speaker 0>unoptimized.

00:05:49.765 --> 00:05:52.165
<v Speaker 0>I know this is not a Dockerfile I

00:05:52.165 --> 00:05:53.605
<v Speaker 0>should be using for production.

00:05:53.765 --> 00:05:54.405
<v Speaker 0>Why?

00:05:54.885 --> 00:05:56.805
<v Speaker 0>Well, I'm using Node LTS,

00:05:56.805 --> 00:05:58.965
<v Speaker 0>which is fine, but probably we should be

00:05:58.965 --> 00:06:00.325
<v Speaker 0>using Alpine to

00:06:01.365 --> 00:06:03.125
<v Speaker 0>keep our footprint small.

00:06:04.260 --> 00:06:06.180
<v Speaker 0>I think copying the entire

00:06:06.260 --> 00:06:07.700
<v Speaker 0>working directory

00:06:07.700 --> 00:06:11.060
<v Speaker 0>rather than copying in the package dot JSON.

00:06:11.060 --> 00:06:14.020
<v Speaker 0>Doing the NPM install, copying in the rest,

00:06:14.020 --> 00:06:16.419
<v Speaker 0>performing in a build step, copying the static

00:06:16.419 --> 00:06:18.100
<v Speaker 0>assets, blah blah blah blah blah.

00:06:18.884 --> 00:06:20.245
<v Speaker 0>I shouldn't need

00:06:20.405 --> 00:06:21.845
<v Speaker 0>to know all this stuff.

00:06:22.565 --> 00:06:24.565
<v Speaker 0>Most people don't.

00:06:26.645 --> 00:06:28.645
<v Speaker 0>We then just tell it to run the

00:06:28.645 --> 00:06:31.685
<v Speaker 0>application from the desk folder like nobody is

00:06:31.685 --> 00:06:32.085
<v Speaker 0>watching.

00:06:33.800 --> 00:06:36.040
<v Speaker 0>And if you do a build of this

00:06:36.040 --> 00:06:37.000
<v Speaker 0>Dockerfile

00:06:37.000 --> 00:06:39.000
<v Speaker 0>and do an LS and I'll just filter

00:06:39.000 --> 00:06:40.600
<v Speaker 0>for only this,

00:06:41.240 --> 00:06:44.200
<v Speaker 0>we have a container image at a whopping

00:06:44.360 --> 00:06:46.360
<v Speaker 0>1.4

00:06:46.360 --> 00:06:46.680
<v Speaker 0>gig.

00:06:47.294 --> 00:06:49.535
<v Speaker 0>Now I have written articles on how to

00:06:49.535 --> 00:06:50.975
<v Speaker 0>avoid this situation,

00:06:51.294 --> 00:06:53.134
<v Speaker 0>but what I'm about to show you is

00:06:53.134 --> 00:06:53.855
<v Speaker 0>magic.

00:06:54.495 --> 00:06:57.854
<v Speaker 0>You don't need to optimize anything. Docker Slim

00:06:57.854 --> 00:06:59.935
<v Speaker 0>will do it for you. To see what

00:06:59.935 --> 00:07:01.535
<v Speaker 0>our applications

00:07:01.159 --> 00:07:03.880
<v Speaker 0>should look like, let's run the big image.

00:07:04.439 --> 00:07:07.400
<v Speaker 0>We do docker container run dash dash r

00:07:07.400 --> 00:07:09.479
<v Speaker 0>m to clean it up when we're finished.

00:07:09.960 --> 00:07:11.400
<v Speaker 0>We have a port mount

00:07:11.879 --> 00:07:14.695
<v Speaker 0>and port eighty eighty just like before. This

00:07:14.695 --> 00:07:17.575
<v Speaker 0>time to port 3,000 within the container.

00:07:17.815 --> 00:07:19.175
<v Speaker 0>And then we provide

00:07:19.415 --> 00:07:20.455
<v Speaker 0>the image

00:07:20.935 --> 00:07:21.735
<v Speaker 0>name.

00:07:23.495 --> 00:07:25.015
<v Speaker 0>Now we can open

00:07:26.295 --> 00:07:28.935
<v Speaker 0>a previous NGINX page

00:07:29.860 --> 00:07:30.980
<v Speaker 0>and refresh.

00:07:32.020 --> 00:07:35.140
<v Speaker 0>And we get the Rawkode Academy website.

00:07:35.780 --> 00:07:37.460
<v Speaker 0>We can click on services,

00:07:37.940 --> 00:07:38.820
<v Speaker 0>shows,

00:07:39.620 --> 00:07:40.500
<v Speaker 0>community,

00:07:40.500 --> 00:07:42.660
<v Speaker 0>which is an external link, and so forth.

00:07:46.384 --> 00:07:47.745
<v Speaker 0>So let's try

00:07:47.905 --> 00:07:49.185
<v Speaker 0>the slim version.

00:07:49.985 --> 00:07:51.425
<v Speaker 0>First thing we need to do

00:07:51.824 --> 00:07:52.945
<v Speaker 0>is slim

00:07:53.025 --> 00:07:53.585
<v Speaker 0>build.

00:07:58.130 --> 00:08:00.370
<v Speaker 0>And then pass website

00:08:00.850 --> 00:08:01.730
<v Speaker 0>latest.

00:08:02.449 --> 00:08:04.449
<v Speaker 0>By default, Slim is going to use the

00:08:04.449 --> 00:08:05.250
<v Speaker 0>HTTP

00:08:05.250 --> 00:08:07.010
<v Speaker 0>probe. And by default,

00:08:07.169 --> 00:08:09.169
<v Speaker 0>that probe is going to check every page

00:08:09.169 --> 00:08:11.330
<v Speaker 0>for links to other pages on your website

00:08:11.475 --> 00:08:14.115
<v Speaker 0>and try to discover as much as possible.

00:08:15.155 --> 00:08:17.635
<v Speaker 0>So let's give that a moment to finish.

00:08:18.915 --> 00:08:19.795
<v Speaker 0>And done.

00:08:21.555 --> 00:08:22.835
<v Speaker 0>Let's take a look

00:08:23.075 --> 00:08:24.275
<v Speaker 0>at the image sizes.

00:08:25.270 --> 00:08:27.510
<v Speaker 0>Gripping for the websites alone.

00:08:28.870 --> 00:08:31.430
<v Speaker 0>As you can see, our original image was

00:08:31.430 --> 00:08:35.030
<v Speaker 0>over one gig pushing towards two.

00:08:35.830 --> 00:08:36.150
<v Speaker 0>Here,

00:08:37.015 --> 00:08:39.335
<v Speaker 0>our Slim image is a hundred meg.

00:08:39.654 --> 00:08:41.095
<v Speaker 0>So it begs the question,

00:08:41.495 --> 00:08:42.695
<v Speaker 0>does it work?

00:08:43.815 --> 00:08:46.535
<v Speaker 0>Let's copy our Docker run command and this

00:08:46.535 --> 00:08:48.135
<v Speaker 0>time we'll do website

00:08:48.214 --> 00:08:49.015
<v Speaker 0>dot Slim.

00:08:51.580 --> 00:08:53.020
<v Speaker 0>Then let's jump back

00:08:54.380 --> 00:08:55.580
<v Speaker 0>and refresh.

00:08:56.540 --> 00:08:58.220
<v Speaker 0>And that is looking

00:08:58.460 --> 00:08:59.900
<v Speaker 0>not too bad.

00:09:00.700 --> 00:09:03.020
<v Speaker 0>Let's click on services

00:09:03.305 --> 00:09:04.505
<v Speaker 0>and shows

00:09:05.305 --> 00:09:07.465
<v Speaker 0>and even Rawkode Live.

00:09:08.505 --> 00:09:09.305
<v Speaker 0>Hey,

00:09:09.625 --> 00:09:11.225
<v Speaker 0>that is pretty sweet.

00:09:11.625 --> 00:09:14.505
<v Speaker 0>So Slim Toolkit is a pretty amazing tool.

00:09:15.380 --> 00:09:17.380
<v Speaker 0>You don't need to fight with Docker files

00:09:17.380 --> 00:09:18.180
<v Speaker 0>anymore.

00:09:18.260 --> 00:09:20.740
<v Speaker 0>You don't need to grok and understand and

00:09:20.740 --> 00:09:23.380
<v Speaker 0>balance and juggle the layers to get the

00:09:23.380 --> 00:09:24.820
<v Speaker 0>output that you need.

00:09:25.700 --> 00:09:28.020
<v Speaker 0>With just a few commands, the Slim Toolkit

00:09:28.020 --> 00:09:29.540
<v Speaker 0>can take your huge

00:09:29.825 --> 00:09:32.465
<v Speaker 0>or maybe just chunky container images

00:09:32.785 --> 00:09:34.705
<v Speaker 0>and spit out a secure

00:09:34.705 --> 00:09:36.625
<v Speaker 0>and slim alternative.

00:09:37.105 --> 00:09:38.385
<v Speaker 0>So go check it out.

00:09:38.785 --> 00:09:39.505
<v Speaker 0>We'll see you soon.
