WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 3c0c6061-d096-47e5-9060-265e29c2b01b
Created: 2025-04-29T14:54:06.965Z
Duration: 5581.712
Channels: 1

00:02:41.375 --> 00:02:44.655
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:02:44.655 --> 00:02:47.135
<v Speaker 0>I'm your host, David Flanagan, also known across

00:02:47.135 --> 00:02:48.655
<v Speaker 0>the Internet as Rawkode.

00:02:49.200 --> 00:02:51.280
<v Speaker 0>Today, we are taking a look at a

00:02:51.280 --> 00:02:54.000
<v Speaker 0>API developer platform called WunderGraph.

00:02:54.000 --> 00:02:56.320
<v Speaker 0>And to guide us on today's journey, I

00:02:56.320 --> 00:02:58.160
<v Speaker 0>am joined by the founder,

00:02:59.040 --> 00:02:59.760
<v Speaker 0>Jens.

00:03:00.400 --> 00:03:02.960
<v Speaker 0>Good evening, Jens. How's it going? Good evening.

00:03:04.765 --> 00:03:07.084
<v Speaker 1>Nice. You helped me on the on the

00:03:07.084 --> 00:03:07.725
<v Speaker 1>show.

00:03:09.165 --> 00:03:11.004
<v Speaker 0>Yeah. I'm excited. I always love to play

00:03:11.004 --> 00:03:12.444
<v Speaker 0>with really cool technology.

00:03:12.444 --> 00:03:14.924
<v Speaker 0>And I think what makes this extra special

00:03:14.924 --> 00:03:17.405
<v Speaker 0>is like I was actually playing an experiment

00:03:17.405 --> 00:03:20.090
<v Speaker 0>with with with WunderGraph before we even discussed

00:03:20.090 --> 00:03:21.690
<v Speaker 0>doing a session together. And I was like,

00:03:21.690 --> 00:03:23.130
<v Speaker 0>this is really cool. Like, we we need

00:03:23.130 --> 00:03:25.050
<v Speaker 0>to to show this to people and and

00:03:25.050 --> 00:03:27.930
<v Speaker 0>and share it. So before

00:03:28.170 --> 00:03:30.010
<v Speaker 0>we talk about WunderGraph and

00:03:30.490 --> 00:03:32.170
<v Speaker 0>what that is and get started with the

00:03:32.170 --> 00:03:34.395
<v Speaker 0>hands on demo today, Could you just give

00:03:34.395 --> 00:03:36.715
<v Speaker 0>us the TLDR on who is Jens, what

00:03:36.715 --> 00:03:38.635
<v Speaker 0>you're up to, and anything else you wish

00:03:38.635 --> 00:03:39.275
<v Speaker 0>to share?

00:03:39.915 --> 00:03:40.475
<v Speaker 1>Sure.

00:03:40.875 --> 00:03:43.435
<v Speaker 1>Yeah. I'm Jens, the founder of WunderGraph. I'm

00:03:43.435 --> 00:03:44.315
<v Speaker 1>34.

00:03:44.875 --> 00:03:45.995
<v Speaker 1>I have two kids,

00:03:47.160 --> 00:03:49.400
<v Speaker 1>Leonie and Janik, one and three,

00:03:50.120 --> 00:03:52.360
<v Speaker 1>which are also in my avatar. I think,

00:03:52.360 --> 00:03:56.120
<v Speaker 1>like, family is probably the most important thing

00:03:56.280 --> 00:03:57.640
<v Speaker 1>in in my life.

00:03:58.840 --> 00:03:59.800
<v Speaker 1>Plus WunderGraph,

00:04:00.215 --> 00:04:02.935
<v Speaker 1>You know? Like, I have, like, three kids,

00:04:02.935 --> 00:04:04.135
<v Speaker 1>if you wanna say so.

00:04:05.175 --> 00:04:06.135
<v Speaker 1>But yeah.

00:04:07.175 --> 00:04:08.215
<v Speaker 1>I I think

00:04:08.695 --> 00:04:09.975
<v Speaker 1>the the and

00:04:09.975 --> 00:04:12.295
<v Speaker 1>the the the important bit here is

00:04:12.990 --> 00:04:14.350
<v Speaker 1>why WunderGraph?

00:04:14.350 --> 00:04:16.190
<v Speaker 1>And and if you look at my career,

00:04:16.830 --> 00:04:17.870
<v Speaker 1>I started

00:04:18.830 --> 00:04:21.470
<v Speaker 1>actually as an entrepreneur. I never studied

00:04:21.630 --> 00:04:23.790
<v Speaker 1>computer science or or anything. I wanted to

00:04:23.790 --> 00:04:26.435
<v Speaker 1>build a startup at the early age of

00:04:26.435 --> 00:04:27.555
<v Speaker 1>20.

00:04:27.555 --> 00:04:29.074
<v Speaker 1>I just wanted to build a startup, and

00:04:29.074 --> 00:04:31.235
<v Speaker 1>there was nobody who could build me an

00:04:31.235 --> 00:04:33.395
<v Speaker 1>iOS and an Android app, so I just

00:04:33.395 --> 00:04:35.634
<v Speaker 1>had to learn it myself. So there was

00:04:35.634 --> 00:04:38.115
<v Speaker 1>a guy on YouTube called Slide Nerd

00:04:38.970 --> 00:04:40.090
<v Speaker 1>from India

00:04:40.490 --> 00:04:43.530
<v Speaker 1>with the classic Indian accent. I I and

00:04:43.530 --> 00:04:46.250
<v Speaker 1>I learned Java from him, and it was

00:04:46.650 --> 00:04:48.730
<v Speaker 1>such a pain for the first couple of

00:04:48.730 --> 00:04:52.135
<v Speaker 1>months because I just didn't get computing and

00:04:52.135 --> 00:04:53.335
<v Speaker 1>and programming.

00:04:53.815 --> 00:04:55.255
<v Speaker 1>And yeah. But, eventually,

00:04:56.215 --> 00:04:58.695
<v Speaker 1>this whole thing, it turned into an app.

00:04:58.695 --> 00:04:59.415
<v Speaker 1>I learned

00:04:59.895 --> 00:05:02.935
<v Speaker 1>iOS programming and and Android. Later, I switched

00:05:02.935 --> 00:05:03.895
<v Speaker 1>to React Native.

00:05:04.430 --> 00:05:06.590
<v Speaker 1>I built my back end first in Java,

00:05:06.590 --> 00:05:08.190
<v Speaker 1>then I learned about Go.

00:05:09.069 --> 00:05:12.990
<v Speaker 1>And and, yeah, that startup eventually failed because

00:05:13.229 --> 00:05:15.469
<v Speaker 1>startups are hard, and we didn't have a

00:05:15.469 --> 00:05:18.354
<v Speaker 1>clue. But we learned a lot. And then,

00:05:18.995 --> 00:05:20.275
<v Speaker 1>yeah, I started,

00:05:20.995 --> 00:05:22.195
<v Speaker 1>like, a regular

00:05:22.435 --> 00:05:24.195
<v Speaker 1>career as a programmer,

00:05:24.675 --> 00:05:26.354
<v Speaker 1>turned architect

00:05:26.594 --> 00:05:27.555
<v Speaker 1>team lead.

00:05:28.034 --> 00:05:28.595
<v Speaker 1>And

00:05:28.835 --> 00:05:31.040
<v Speaker 1>through that career, I kind of learned the

00:05:31.040 --> 00:05:34.320
<v Speaker 1>the complexity of actually working with APIs.

00:05:34.880 --> 00:05:35.440
<v Speaker 1>And

00:05:35.920 --> 00:05:38.240
<v Speaker 1>at the last big company I worked for,

00:05:38.880 --> 00:05:41.920
<v Speaker 1>we had to integrate, like, 30 different services,

00:05:42.000 --> 00:05:43.680
<v Speaker 1>and it was a huge pain in the

00:05:43.680 --> 00:05:46.345
<v Speaker 1>ass. And we built our own REST APIs

00:05:46.345 --> 00:05:47.225
<v Speaker 1>and and

00:05:47.945 --> 00:05:50.505
<v Speaker 1>somehow cobbled everything together, the different

00:05:50.905 --> 00:05:51.705
<v Speaker 1>protocols

00:05:51.705 --> 00:05:54.585
<v Speaker 1>and and different APIs, and it was a

00:05:54.585 --> 00:05:55.385
<v Speaker 1>real mess.

00:05:56.985 --> 00:05:59.865
<v Speaker 1>And then I joined an API management company,

00:05:59.865 --> 00:06:02.770
<v Speaker 1>Tyke, where I learned a lot about API

00:06:02.770 --> 00:06:03.730
<v Speaker 1>gateways,

00:06:03.890 --> 00:06:05.970
<v Speaker 1>how they work, what they do, etcetera.

00:06:06.850 --> 00:06:08.290
<v Speaker 1>I was, like, two and a half years

00:06:08.290 --> 00:06:09.250
<v Speaker 1>at Tyke,

00:06:09.410 --> 00:06:10.850
<v Speaker 1>and I found that

00:06:11.810 --> 00:06:14.370
<v Speaker 1>there's a lot of, like, full stack developers

00:06:15.075 --> 00:06:17.875
<v Speaker 1>that don't know enough about API management,

00:06:18.195 --> 00:06:21.155
<v Speaker 1>and API management doesn't know enough about full

00:06:21.155 --> 00:06:22.275
<v Speaker 1>stack developers.

00:06:22.755 --> 00:06:24.915
<v Speaker 1>So what I wanted to create is a

00:06:24.915 --> 00:06:26.195
<v Speaker 1>developer experience

00:06:26.515 --> 00:06:27.715
<v Speaker 1>that puts together

00:06:28.430 --> 00:06:29.870
<v Speaker 1>full stack development,

00:06:30.430 --> 00:06:31.710
<v Speaker 1>API management,

00:06:31.949 --> 00:06:34.669
<v Speaker 1>and API integration. So I wanted to build

00:06:34.750 --> 00:06:35.949
<v Speaker 1>a toolset

00:06:36.110 --> 00:06:38.189
<v Speaker 1>where full stack developers

00:06:38.189 --> 00:06:39.229
<v Speaker 1>feel home.

00:06:39.710 --> 00:06:41.229
<v Speaker 1>They get the capabilities

00:06:41.475 --> 00:06:43.235
<v Speaker 1>of an API gateway

00:06:43.635 --> 00:06:44.515
<v Speaker 1>without

00:06:45.475 --> 00:06:48.915
<v Speaker 1>actually or without having the feeling of using

00:06:48.915 --> 00:06:50.355
<v Speaker 1>an API gateway.

00:06:50.515 --> 00:06:54.355
<v Speaker 1>Because if you talk API gateways like Thai,

00:06:54.355 --> 00:06:56.195
<v Speaker 1>Kong, Apigee, and so on and so forth,

00:06:56.750 --> 00:06:59.390
<v Speaker 1>These tools, they are user usually designed for

00:06:59.390 --> 00:07:02.110
<v Speaker 1>ops people. Like, you have a dashboard. You

00:07:02.110 --> 00:07:05.550
<v Speaker 1>configure it. It's like very heavyweight introducing

00:07:05.790 --> 00:07:08.430
<v Speaker 1>an API gateway to your stack. It's a

00:07:08.430 --> 00:07:10.830
<v Speaker 1>it's a complex thing, and it it completely

00:07:10.830 --> 00:07:12.110
<v Speaker 1>changes your architecture.

00:07:12.775 --> 00:07:15.415
<v Speaker 1>What I wanted to create with WunderGraph is

00:07:15.655 --> 00:07:16.935
<v Speaker 1>a simplified

00:07:17.095 --> 00:07:19.014
<v Speaker 1>architecture where you leverage

00:07:19.255 --> 00:07:20.134
<v Speaker 1>capabilities

00:07:20.134 --> 00:07:21.575
<v Speaker 1>of an API gateway,

00:07:21.895 --> 00:07:24.375
<v Speaker 1>but it still feels like you're just doing

00:07:24.535 --> 00:07:27.210
<v Speaker 1>full stack. So when you when you use

00:07:27.210 --> 00:07:28.170
<v Speaker 1>WunderGraph,

00:07:28.250 --> 00:07:30.970
<v Speaker 1>it looks more or less or very similar

00:07:30.970 --> 00:07:34.010
<v Speaker 1>to something like Next. Js, but you actually

00:07:34.330 --> 00:07:36.650
<v Speaker 1>have an API gateway. You have a back

00:07:36.650 --> 00:07:39.275
<v Speaker 1>end. You can put custom codes, and you

00:07:39.275 --> 00:07:41.355
<v Speaker 1>have a lot of functionality that that helps

00:07:41.355 --> 00:07:43.035
<v Speaker 1>you with API integration,

00:07:43.755 --> 00:07:46.715
<v Speaker 1>that integrates with your identity providers,

00:07:47.354 --> 00:07:49.995
<v Speaker 1>that solves a lot of enterprise

00:07:50.475 --> 00:07:52.475
<v Speaker 1>use cases when when you want to scale

00:07:52.475 --> 00:07:55.180
<v Speaker 1>something that you would not normally find in

00:07:55.180 --> 00:07:58.380
<v Speaker 1>a framework like Next. Js. But it's,

00:07:59.260 --> 00:08:01.500
<v Speaker 1>yeah, it's it's kind of like a special

00:08:01.820 --> 00:08:04.380
<v Speaker 1>developer experience if you if you have some

00:08:04.380 --> 00:08:04.780
<v Speaker 1>experience

00:08:05.365 --> 00:08:07.444
<v Speaker 1>in in the market and and what what

00:08:07.444 --> 00:08:09.604
<v Speaker 1>kind of tooling and and patterns can be

00:08:09.604 --> 00:08:10.165
<v Speaker 1>used,

00:08:10.564 --> 00:08:12.004
<v Speaker 1>I would say it's kind of like a

00:08:12.004 --> 00:08:13.845
<v Speaker 1>combination of Next. Js,

00:08:14.164 --> 00:08:16.164
<v Speaker 1>a back end for front end pattern,

00:08:16.245 --> 00:08:17.764
<v Speaker 1>and an API gateway

00:08:18.200 --> 00:08:19.400
<v Speaker 1>all together

00:08:19.720 --> 00:08:22.760
<v Speaker 1>in in one user experience. It's all

00:08:23.320 --> 00:08:24.200
<v Speaker 1>TypeScript.

00:08:24.920 --> 00:08:27.400
<v Speaker 1>So we use Go behind the scenes

00:08:27.720 --> 00:08:29.400
<v Speaker 1>for for performance

00:08:29.400 --> 00:08:29.960
<v Speaker 1>reasons,

00:08:30.405 --> 00:08:32.725
<v Speaker 1>but the user experience is TypeScript, so everything

00:08:32.725 --> 00:08:34.645
<v Speaker 1>is configured in TypeScript.

00:08:34.725 --> 00:08:36.885
<v Speaker 1>We use infrastructure

00:08:37.525 --> 00:08:39.845
<v Speaker 1>as code patterns, so there's no

00:08:40.165 --> 00:08:43.125
<v Speaker 1>GUI. There's no dashboard because developers

00:08:43.684 --> 00:08:46.060
<v Speaker 1>don't like to click around. They want to

00:08:46.060 --> 00:08:47.580
<v Speaker 1>code. They want to put their stuff in

00:08:47.580 --> 00:08:48.220
<v Speaker 1>Git.

00:08:48.540 --> 00:08:49.100
<v Speaker 1>And,

00:08:49.420 --> 00:08:51.500
<v Speaker 1>yeah, it's kind of like everything I hated

00:08:51.500 --> 00:08:53.020
<v Speaker 1>throughout my career,

00:08:53.420 --> 00:08:55.100
<v Speaker 1>I try to do better, and the result

00:08:55.100 --> 00:08:55.820
<v Speaker 1>is WunderGraph.

00:08:57.015 --> 00:08:59.335
<v Speaker 0>Alright. Awesome. There is a lot to unpack

00:08:59.335 --> 00:09:01.495
<v Speaker 0>there. So thank you for sharing all of

00:09:01.495 --> 00:09:03.655
<v Speaker 0>that. What I'll say is I also have

00:09:03.655 --> 00:09:05.655
<v Speaker 0>two young kids, four and one. So I

00:09:05.655 --> 00:09:07.655
<v Speaker 0>feel your pain and then I fuck. Because

00:09:07.655 --> 00:09:09.175
<v Speaker 0>I couldn't imagine trying to build a start

00:09:09.175 --> 00:09:11.335
<v Speaker 0>up with kids that young. Must be tough.

00:09:11.750 --> 00:09:12.870
<v Speaker 0>But awesome.

00:09:14.550 --> 00:09:17.270
<v Speaker 1>Can I comment on that? Of course. Yeah.

00:09:17.670 --> 00:09:20.950
<v Speaker 1>You know, the the right time, like the

00:09:20.950 --> 00:09:23.350
<v Speaker 1>the right time to lose weight is is

00:09:23.350 --> 00:09:24.149
<v Speaker 1>never

00:09:24.595 --> 00:09:26.915
<v Speaker 1>The the right time to have kids is

00:09:26.915 --> 00:09:28.835
<v Speaker 1>never. The right time to start a startup

00:09:28.835 --> 00:09:31.154
<v Speaker 1>is also never. You just have to do

00:09:31.154 --> 00:09:32.995
<v Speaker 1>things like you know, if you have kids

00:09:32.995 --> 00:09:35.154
<v Speaker 1>and you're like, should I start a startup?

00:09:35.154 --> 00:09:37.475
<v Speaker 1>The answer would usually or always be no.

00:09:37.850 --> 00:09:39.370
<v Speaker 1>Just go to a corporate.

00:09:39.770 --> 00:09:42.330
<v Speaker 1>And I I just said, like, fuck it.

00:09:42.330 --> 00:09:44.090
<v Speaker 1>We're we're gonna do this. Like, you know,

00:09:44.090 --> 00:09:44.970
<v Speaker 1>I I

00:09:45.850 --> 00:09:47.850
<v Speaker 1>sometimes in your life I don't know who

00:09:47.850 --> 00:09:49.930
<v Speaker 1>who else feels like that, but sometimes in

00:09:49.930 --> 00:09:52.170
<v Speaker 1>in your life, you find yourself in a

00:09:52.170 --> 00:09:55.105
<v Speaker 1>situation where you're like, I cannot work

00:09:55.425 --> 00:09:57.825
<v Speaker 1>at a company anymore. I must do this.

00:09:57.825 --> 00:10:01.665
<v Speaker 1>This is my mission. Like, WunderGraph must exist.

00:10:02.225 --> 00:10:04.065
<v Speaker 1>And and, yeah, that's just

00:10:04.464 --> 00:10:05.425
<v Speaker 1>my personality.

00:10:06.230 --> 00:10:08.710
<v Speaker 0>Yeah. Awesome. Well, congratulations.

00:10:09.030 --> 00:10:10.870
<v Speaker 0>I wish you all the best of luck,

00:10:10.870 --> 00:10:11.990
<v Speaker 0>but I know you're not gonna need it

00:10:11.990 --> 00:10:13.590
<v Speaker 0>because I played with WunderGraph and it's fucking

00:10:13.590 --> 00:10:16.310
<v Speaker 0>awesome. So I also quit my job in

00:10:16.310 --> 00:10:18.550
<v Speaker 0>September saying fuck it as well, but you

00:10:18.550 --> 00:10:20.975
<v Speaker 0>know, it's not a startup thing. I'm just

00:10:21.375 --> 00:10:22.175
<v Speaker 0>a

00:10:22.255 --> 00:10:25.135
<v Speaker 0>consultant, I guess. So no, it doesn't feel

00:10:25.135 --> 00:10:26.575
<v Speaker 0>as risky when it's just me.

00:10:27.295 --> 00:10:28.815
<v Speaker 0>Anyway, back on track.

00:10:30.175 --> 00:10:31.935
<v Speaker 0>I don't even know where we were anymore.

00:10:31.935 --> 00:10:34.335
<v Speaker 0>Yes. Yes. You were talking about logical technologies.

00:10:34.335 --> 00:10:36.730
<v Speaker 0>So you mentioned go. So I'm a big

00:10:36.730 --> 00:10:38.650
<v Speaker 0>fan of go. I'm I'm a even bigger

00:10:38.650 --> 00:10:40.890
<v Speaker 0>fan of typescript and I am a

00:10:41.850 --> 00:10:44.570
<v Speaker 0>huge advocate of everything as code.

00:10:45.050 --> 00:10:47.130
<v Speaker 0>The job I quit was from Pulumi. So

00:10:47.130 --> 00:10:48.970
<v Speaker 0>I spent the last year of my life

00:10:48.645 --> 00:10:50.405
<v Speaker 0>doing infrastructure. Uh-huh.

00:10:50.405 --> 00:10:52.645
<v Speaker 0>Yeah. Pulumi is big inspiration

00:10:52.645 --> 00:10:55.285
<v Speaker 1>for WunderGraph because we we you know, when

00:10:55.285 --> 00:10:58.325
<v Speaker 1>I saw Pulumi, I was like, hey. I

00:10:58.325 --> 00:10:59.685
<v Speaker 1>I can create

00:11:00.085 --> 00:11:02.645
<v Speaker 1>a bucket, and I can create a service

00:11:02.610 --> 00:11:04.850
<v Speaker 1>all by writing some TypeScript, and then I

00:11:04.850 --> 00:11:06.610
<v Speaker 1>do pull me up. And I was like,

00:11:06.769 --> 00:11:08.290
<v Speaker 1>this is what we need for.

00:11:09.089 --> 00:11:11.810
<v Speaker 1>It's interesting. I didn't know. Yeah. I mean,

00:11:11.810 --> 00:11:12.850
<v Speaker 0>I've been infrastructure

00:11:13.010 --> 00:11:15.329
<v Speaker 0>as coding everything for many years. I've been

00:11:15.329 --> 00:11:16.610
<v Speaker 0>using

00:11:16.265 --> 00:11:19.545
<v Speaker 0>TypeScript as a language for defining Kubernetes objects

00:11:19.545 --> 00:11:21.385
<v Speaker 0>for years prior to that. Was just in

00:11:21.385 --> 00:11:24.105
<v Speaker 0>Terraform. I've played with CDKTF.

00:11:24.425 --> 00:11:25.945
<v Speaker 0>And if in that, can describe stuff as

00:11:25.945 --> 00:11:28.025
<v Speaker 0>code makes me a very, very happy person.

00:11:28.025 --> 00:11:30.025
<v Speaker 0>Even things like Prisma, although it's not a

00:11:30.025 --> 00:11:32.810
<v Speaker 0>readily code, but that DSL for database migrations,

00:11:32.890 --> 00:11:34.010
<v Speaker 0>I think is very cool.

00:11:34.970 --> 00:11:37.290
<v Speaker 0>So, yeah, when you say this has got

00:11:37.290 --> 00:11:39.370
<v Speaker 0>an API that gives you that API is

00:11:39.370 --> 00:11:41.210
<v Speaker 0>code kind of mentality or infrastructure is code

00:11:41.210 --> 00:11:43.610
<v Speaker 0>mentality to work with your APIs. It's something

00:11:43.610 --> 00:11:46.295
<v Speaker 0>that I'm very passionate about. Another project that

00:11:46.295 --> 00:11:48.135
<v Speaker 0>I've been exploring a lot lately is Dagger,

00:11:48.135 --> 00:11:50.855
<v Speaker 0>which is CICD pipelines as code as well

00:11:50.855 --> 00:11:53.015
<v Speaker 0>using TypeScript. I always seem to come back

00:11:53.015 --> 00:11:55.495
<v Speaker 0>to TypeScript because and I'm assuming this is

00:11:55.495 --> 00:11:57.175
<v Speaker 0>one of the reasons that you probably picked

00:11:57.175 --> 00:11:59.470
<v Speaker 0>it in the project. It's just it's got

00:11:59.470 --> 00:12:02.350
<v Speaker 0>that right balance of approachable and accessible with

00:12:02.350 --> 00:12:03.790
<v Speaker 0>the tape semantics.

00:12:03.950 --> 00:12:05.230
<v Speaker 0>Like, you don't have to go learn the

00:12:05.230 --> 00:12:07.470
<v Speaker 0>borrow checker Rust for instance to get a

00:12:07.470 --> 00:12:10.110
<v Speaker 0>strongly typed system and TypeScript works really well.

00:12:10.110 --> 00:12:11.870
<v Speaker 0>I think it's a nice language for people

00:12:11.870 --> 00:12:14.384
<v Speaker 0>to to learn some of these more complex

00:12:14.384 --> 00:12:16.464
<v Speaker 0>intricacies of type based systems.

00:12:18.625 --> 00:12:20.225
<v Speaker 1>It's

00:12:20.225 --> 00:12:23.105
<v Speaker 1>an interesting topic because I actually like to

00:12:23.105 --> 00:12:23.825
<v Speaker 1>talk about

00:12:24.225 --> 00:12:26.144
<v Speaker 1>Rust, Go and TypeScript.

00:12:26.545 --> 00:12:27.425
<v Speaker 1>So for example,

00:12:28.050 --> 00:12:30.290
<v Speaker 1>the the gateway of WunderGraph, it's written in

00:12:30.290 --> 00:12:32.209
<v Speaker 1>Go, and I think it's the perfect language

00:12:32.209 --> 00:12:35.490
<v Speaker 1>because Go has this balance between it's crazy

00:12:35.490 --> 00:12:36.130
<v Speaker 1>fast,

00:12:36.850 --> 00:12:39.490
<v Speaker 1>and most of the time, you get it

00:12:39.490 --> 00:12:39.810
<v Speaker 1>right.

00:12:40.585 --> 00:12:43.145
<v Speaker 1>You don't need a borrow checker. Borrow checkers

00:12:43.145 --> 00:12:46.185
<v Speaker 1>are for super smart people who who solve

00:12:46.185 --> 00:12:47.625
<v Speaker 1>crazy hard problems.

00:12:48.025 --> 00:12:50.185
<v Speaker 1>We're just building an API gateway.

00:12:50.425 --> 00:12:52.745
<v Speaker 1>Yes. It's hard, but it's not

00:12:54.105 --> 00:12:55.545
<v Speaker 1>at the hard level.

00:12:56.720 --> 00:12:58.880
<v Speaker 1>Like, it's you know, we're not building an

00:12:58.880 --> 00:13:01.839
<v Speaker 1>aircraft or a tank. We're just getting

00:13:02.160 --> 00:13:03.600
<v Speaker 1>HTTP requests.

00:13:03.760 --> 00:13:07.360
<v Speaker 1>Go is perfect because it's it's much easier

00:13:07.360 --> 00:13:08.480
<v Speaker 1>to to

00:13:08.800 --> 00:13:12.285
<v Speaker 1>I feel super productive in Go. Whenever I

00:13:12.285 --> 00:13:14.845
<v Speaker 1>try to learn Rust, I feel very stupid.

00:13:15.165 --> 00:13:15.725
<v Speaker 1>And

00:13:16.365 --> 00:13:18.205
<v Speaker 1>TypeScript, on the other hand,

00:13:18.605 --> 00:13:19.325
<v Speaker 1>you know,

00:13:19.805 --> 00:13:20.845
<v Speaker 1>Go is

00:13:21.165 --> 00:13:23.085
<v Speaker 1>great if you do, like,

00:13:23.565 --> 00:13:27.050
<v Speaker 1>yeah, like, back end back end stuff. But

00:13:27.050 --> 00:13:29.210
<v Speaker 1>if you want to do something with the

00:13:29.210 --> 00:13:30.330
<v Speaker 1>user interface

00:13:30.410 --> 00:13:32.250
<v Speaker 1>or if you want to create code with

00:13:32.250 --> 00:13:35.050
<v Speaker 1>the user interface, like code as the interface,

00:13:35.290 --> 00:13:36.330
<v Speaker 1>I think TypeScript

00:13:36.695 --> 00:13:38.295
<v Speaker 1>with its rich

00:13:39.095 --> 00:13:39.975
<v Speaker 1>generic

00:13:39.975 --> 00:13:41.095
<v Speaker 1>capabilities,

00:13:41.255 --> 00:13:42.935
<v Speaker 1>it's the perfect language

00:13:43.575 --> 00:13:46.295
<v Speaker 1>for a user interface. If we think, you

00:13:46.295 --> 00:13:49.255
<v Speaker 1>know, not buttons, but for developers, the user

00:13:49.255 --> 00:13:51.740
<v Speaker 1>interface is the language. And I think TypeScript

00:13:51.740 --> 00:13:53.420
<v Speaker 1>is actually the best language

00:13:54.060 --> 00:13:55.180
<v Speaker 1>to create

00:13:55.580 --> 00:13:56.380
<v Speaker 1>amazing

00:13:56.540 --> 00:13:58.220
<v Speaker 1>developer experiences.

00:13:58.220 --> 00:14:00.620
<v Speaker 1>Like, that that's that's my love for for

00:14:00.620 --> 00:14:03.500
<v Speaker 1>TypeScript. So everything that should be super fast,

00:14:04.175 --> 00:14:05.214
<v Speaker 1>I would say,

00:14:05.615 --> 00:14:07.615
<v Speaker 1>Go. Everything that should be

00:14:08.014 --> 00:14:10.735
<v Speaker 1>pleasant to use, TypeScript, and everything that should

00:14:10.735 --> 00:14:12.095
<v Speaker 1>be super safe,

00:14:12.415 --> 00:14:15.134
<v Speaker 1>I would go Rust. But, yeah, for for

00:14:15.134 --> 00:14:17.935
<v Speaker 1>us, API gateway, Go is safe enough, I

00:14:17.935 --> 00:14:18.574
<v Speaker 1>would say.

00:14:19.055 --> 00:14:19.694
<v Speaker 0>Awesome.

00:14:20.450 --> 00:14:23.090
<v Speaker 0>Alright. Well, I don't wanna just keep talking

00:14:23.090 --> 00:14:25.090
<v Speaker 0>about programming languages all day. Although I'm more

00:14:25.090 --> 00:14:26.450
<v Speaker 0>than happy to sit and talk about all

00:14:26.450 --> 00:14:28.370
<v Speaker 0>three of those for the next three hours.

00:14:28.850 --> 00:14:30.850
<v Speaker 0>I do want us to to kind of

00:14:30.850 --> 00:14:33.890
<v Speaker 0>focus on WunderGraph and get hands on with

00:14:33.890 --> 00:14:35.855
<v Speaker 0>it. So we'll start the demo in a

00:14:35.855 --> 00:14:37.535
<v Speaker 0>few more minutes, but maybe we can give

00:14:37.455 --> 00:14:39.375
<v Speaker 0>you know, you kind of talked about

00:14:39.695 --> 00:14:40.895
<v Speaker 0>what it is or what you're trying to

00:14:40.895 --> 00:14:42.415
<v Speaker 0>achieve with it, but maybe we could be

00:14:42.415 --> 00:14:44.655
<v Speaker 0>very specific. What is that use case that

00:14:44.655 --> 00:14:46.655
<v Speaker 0>people should take away from today about why

00:14:46.655 --> 00:14:48.415
<v Speaker 0>they need to start using WunderGraph?

00:14:49.199 --> 00:14:49.920
<v Speaker 1>Yes.

00:14:50.160 --> 00:14:50.720
<v Speaker 1>So

00:14:51.120 --> 00:14:53.759
<v Speaker 1>I think one thing that's what I learned

00:14:53.759 --> 00:14:56.480
<v Speaker 1>in my career. One thing that is

00:14:57.439 --> 00:14:59.360
<v Speaker 1>probably true for every application

00:14:59.600 --> 00:15:00.320
<v Speaker 1>is

00:15:01.279 --> 00:15:03.519
<v Speaker 1>or every web application, you usually have a

00:15:03.519 --> 00:15:05.545
<v Speaker 1>front end, You have a back end, and

00:15:05.545 --> 00:15:07.465
<v Speaker 1>your back end doesn't talk

00:15:07.705 --> 00:15:10.265
<v Speaker 1>to a single database. That's almost never the

00:15:10.265 --> 00:15:10.745
<v Speaker 1>case.

00:15:11.705 --> 00:15:14.505
<v Speaker 1>What's more likely is your front end, you

00:15:14.505 --> 00:15:16.185
<v Speaker 1>have back end, and the back end talks

00:15:16.185 --> 00:15:19.079
<v Speaker 1>to hi, Jamie, by the way. The the

00:15:19.079 --> 00:15:20.600
<v Speaker 1>back end talks to

00:15:21.079 --> 00:15:23.399
<v Speaker 1>a database and a couple

00:15:23.560 --> 00:15:24.360
<v Speaker 1>other

00:15:25.480 --> 00:15:28.199
<v Speaker 1>services. Those could be internal services.

00:15:28.360 --> 00:15:31.240
<v Speaker 1>Those could be a partner APIs. Those could

00:15:31.240 --> 00:15:31.639
<v Speaker 1>be

00:15:32.415 --> 00:15:34.415
<v Speaker 1>third party services.

00:15:34.895 --> 00:15:37.455
<v Speaker 1>And one thing that's that's, like,

00:15:37.855 --> 00:15:40.255
<v Speaker 1>front and center to WunderGraph is the idea

00:15:40.255 --> 00:15:42.255
<v Speaker 1>of we have an opinion

00:15:42.415 --> 00:15:44.655
<v Speaker 1>on how you should put together

00:15:45.190 --> 00:15:45.990
<v Speaker 1>APIs.

00:15:45.990 --> 00:15:48.150
<v Speaker 1>And what that opinion does is,

00:15:49.590 --> 00:15:51.990
<v Speaker 1>you know, kind of like Laravel.

00:15:52.310 --> 00:15:54.150
<v Speaker 1>When Laravel was enough,

00:15:54.950 --> 00:15:56.790
<v Speaker 1>you had a structure of this is how

00:15:56.790 --> 00:15:58.945
<v Speaker 1>you write a controller, and you knew what

00:15:58.945 --> 00:16:00.225
<v Speaker 1>to do, and this is how you do

00:16:00.225 --> 00:16:01.185
<v Speaker 1>a migration.

00:16:01.505 --> 00:16:02.625
<v Speaker 1>And what we do

00:16:03.025 --> 00:16:04.385
<v Speaker 1>with APIs

00:16:04.625 --> 00:16:06.465
<v Speaker 1>is kind of like we're completely in the

00:16:06.465 --> 00:16:07.985
<v Speaker 1>stone age because

00:16:08.065 --> 00:16:10.145
<v Speaker 1>if you add APIs to a project,

00:16:10.910 --> 00:16:13.470
<v Speaker 1>it's kind of like implicitly

00:16:13.790 --> 00:16:15.310
<v Speaker 1>managing dependencies.

00:16:15.310 --> 00:16:16.830
<v Speaker 1>And, you know, for code,

00:16:17.150 --> 00:16:17.630
<v Speaker 1>like

00:16:18.430 --> 00:16:20.110
<v Speaker 1>Go, we have Go modules.

00:16:20.270 --> 00:16:21.950
<v Speaker 1>In Java, we have Maven.

00:16:22.350 --> 00:16:25.625
<v Speaker 1>And in in Node. Js, we have NPM.

00:16:25.865 --> 00:16:27.065
<v Speaker 1>And for APIs,

00:16:27.785 --> 00:16:29.545
<v Speaker 1>we have nothing. We just

00:16:29.865 --> 00:16:31.704
<v Speaker 1>do a fetch to Stripe

00:16:31.865 --> 00:16:33.865
<v Speaker 1>or we import an SDK.

00:16:33.865 --> 00:16:36.105
<v Speaker 1>And WunderGraph has an opinion here. We say,

00:16:37.320 --> 00:16:39.400
<v Speaker 1>we're not just an API gateway, and we're

00:16:39.400 --> 00:16:40.600
<v Speaker 1>not just a framework.

00:16:41.160 --> 00:16:44.280
<v Speaker 1>We try to be a package manager for

00:16:44.280 --> 00:16:45.160
<v Speaker 1>APIs,

00:16:45.160 --> 00:16:48.680
<v Speaker 1>and that changes everything because WunderGraph has the

00:16:48.680 --> 00:16:50.920
<v Speaker 1>concept of API dependencies.

00:16:51.295 --> 00:16:54.175
<v Speaker 1>So in WunderGraph, you can add APIs

00:16:54.415 --> 00:16:55.775
<v Speaker 1>as dependencies.

00:16:55.935 --> 00:16:56.895
<v Speaker 1>WunderGraph

00:16:56.975 --> 00:16:59.695
<v Speaker 1>turns all your API dependencies into a virtual

00:16:59.695 --> 00:17:01.935
<v Speaker 1>graph, which is simply

00:17:01.935 --> 00:17:03.695
<v Speaker 1>a GraphQL API.

00:17:04.095 --> 00:17:05.454
<v Speaker 1>And now you can treat

00:17:05.740 --> 00:17:07.899
<v Speaker 1>all these API dependencies like

00:17:07.980 --> 00:17:09.979
<v Speaker 1>a GraphQL API that's

00:17:10.220 --> 00:17:13.179
<v Speaker 1>only virtually exists because the moment you write

00:17:13.179 --> 00:17:14.460
<v Speaker 1>a GraphQL query,

00:17:14.779 --> 00:17:16.059
<v Speaker 1>we turn it into

00:17:16.859 --> 00:17:21.124
<v Speaker 1>adjacent RPC API because we treat security.

00:17:21.924 --> 00:17:24.645
<v Speaker 1>Like, security is super important for us. I

00:17:24.645 --> 00:17:27.284
<v Speaker 1>think most people shouldn't expose a GraphQL API.

00:17:27.444 --> 00:17:30.004
<v Speaker 1>So we kind of only use GraphQL

00:17:30.245 --> 00:17:31.364
<v Speaker 1>on the server

00:17:31.684 --> 00:17:34.245
<v Speaker 1>similar to SQL to talk to your API

00:17:34.245 --> 00:17:34.804
<v Speaker 1>dependencies.

00:17:35.100 --> 00:17:37.499
<v Speaker 1>And and that's, I think, the the

00:17:37.900 --> 00:17:41.019
<v Speaker 1>outstanding thing. That's the USP. That's what makes

00:17:41.020 --> 00:17:41.980
<v Speaker 1>WunderGraph

00:17:42.140 --> 00:17:43.980
<v Speaker 1>so different than anything else.

00:17:45.340 --> 00:17:47.260
<v Speaker 0>Okay. I'm gonna try and summarize that. And

00:17:47.260 --> 00:17:49.740
<v Speaker 0>if I get anything wrong, please correct me.

00:17:50.065 --> 00:17:51.345
<v Speaker 0>Yeah. So

00:17:51.585 --> 00:17:54.305
<v Speaker 0>WunderGraph gives me the ability to define external

00:17:54.305 --> 00:17:55.184
<v Speaker 0>APIs

00:17:55.345 --> 00:17:56.625
<v Speaker 0>as dependencies.

00:17:56.625 --> 00:17:59.424
<v Speaker 0>I'm assuming I point to some sort of

00:18:00.625 --> 00:18:03.345
<v Speaker 0>GraphQL API for introspection. I point to an

00:18:03.345 --> 00:18:04.625
<v Speaker 0>open

00:18:04.350 --> 00:18:05.629
<v Speaker 0>specification document

00:18:05.630 --> 00:18:08.110
<v Speaker 0>to understand that API. I don't know if

00:18:08.110 --> 00:18:09.870
<v Speaker 0>it supports other stuff. I know as there's

00:18:09.870 --> 00:18:12.510
<v Speaker 0>the database support as well. Those all get

00:18:12.510 --> 00:18:13.789
<v Speaker 0>created or

00:18:14.110 --> 00:18:16.590
<v Speaker 0>exposed as a virtual graph and the interface

00:18:16.835 --> 00:18:18.595
<v Speaker 0>for me and to other people to that

00:18:18.595 --> 00:18:20.835
<v Speaker 0>virtual graph is GraphQL. However,

00:18:21.395 --> 00:18:25.395
<v Speaker 0>you're parsing that GraphQL and then speaking JSON

00:18:25.395 --> 00:18:26.274
<v Speaker 0>RPC

00:18:26.275 --> 00:18:27.794
<v Speaker 0>to all the underlying

00:18:27.795 --> 00:18:29.155
<v Speaker 0>APIs below.

00:18:29.750 --> 00:18:31.110
<v Speaker 0>Was that was that correct? Did I get

00:18:31.110 --> 00:18:32.790
<v Speaker 0>everything wrong there? Almost.

00:18:32.790 --> 00:18:33.670
<v Speaker 1>So,

00:18:33.830 --> 00:18:35.270
<v Speaker 1>obviously, we talk

00:18:36.070 --> 00:18:38.630
<v Speaker 1>the language of the origin to the origin.

00:18:38.630 --> 00:18:41.190
<v Speaker 0>Yeah. Yeah. Yeah. Okay. But what we do

00:18:41.190 --> 00:18:43.915
<v Speaker 1>is on the front end side, we create

00:18:43.915 --> 00:18:45.835
<v Speaker 1>adjacent RPC API

00:18:45.835 --> 00:18:47.595
<v Speaker 1>that we also have

00:18:48.315 --> 00:18:49.915
<v Speaker 1>an an embedded

00:18:49.915 --> 00:18:51.195
<v Speaker 1>code generator.

00:18:51.275 --> 00:18:52.875
<v Speaker 1>So you define an operation,

00:18:53.115 --> 00:18:53.595
<v Speaker 1>like,

00:18:54.315 --> 00:18:55.035
<v Speaker 1>give me countries,

00:18:55.360 --> 00:18:56.479
<v Speaker 1>give me weather,

00:18:56.880 --> 00:18:58.479
<v Speaker 1>and combine that.

00:18:58.799 --> 00:19:02.159
<v Speaker 1>And from that, we generate an RPC endpoint,

00:19:02.399 --> 00:19:04.719
<v Speaker 1>and we generate a type safe client.

00:19:04.960 --> 00:19:05.519
<v Speaker 1>Because

00:19:06.080 --> 00:19:08.399
<v Speaker 1>one thing that I always found weird is,

00:19:08.735 --> 00:19:11.135
<v Speaker 1>you know, GraphQL is amazing because it's so

00:19:11.135 --> 00:19:13.295
<v Speaker 1>dynamic and you can query whatever you want.

00:19:13.535 --> 00:19:15.855
<v Speaker 1>But the moment you deploy something to production,

00:19:15.855 --> 00:19:18.015
<v Speaker 1>you will never change your queries because your

00:19:18.015 --> 00:19:20.575
<v Speaker 1>queries are not dynamic. Like, you have variables

00:19:20.655 --> 00:19:23.375
<v Speaker 1>where you can put an input at runtime.

00:19:23.615 --> 00:19:26.220
<v Speaker 1>But if you have a a view with

00:19:26.220 --> 00:19:27.740
<v Speaker 1>your your user

00:19:27.740 --> 00:19:28.700
<v Speaker 1>info

00:19:28.940 --> 00:19:29.740
<v Speaker 1>view,

00:19:30.860 --> 00:19:33.740
<v Speaker 1>you don't change the user info query at

00:19:33.740 --> 00:19:34.460
<v Speaker 1>runtime.

00:19:34.780 --> 00:19:35.340
<v Speaker 1>So

00:19:35.580 --> 00:19:38.945
<v Speaker 1>why would anybody want to expose a dynamic

00:19:38.945 --> 00:19:42.225
<v Speaker 1>API if you don't need a dynamic API

00:19:42.465 --> 00:19:43.425
<v Speaker 1>in production?

00:19:43.745 --> 00:19:45.425
<v Speaker 1>That's insecure. That's just,

00:19:47.105 --> 00:19:48.785
<v Speaker 1>yeah, making the the

00:19:49.345 --> 00:19:52.889
<v Speaker 1>the attack surface bigger. So that's that's why

00:19:53.130 --> 00:19:54.729
<v Speaker 1>WunderGraph by default,

00:19:54.890 --> 00:19:56.489
<v Speaker 1>like, just exposes

00:19:56.650 --> 00:19:59.370
<v Speaker 1>JSON RPC. And that's amazing because from JSON

00:19:59.370 --> 00:20:01.769
<v Speaker 1>RPC, we can also generate

00:20:01.770 --> 00:20:04.490
<v Speaker 1>an open API spec. We can generate a

00:20:04.490 --> 00:20:05.370
<v Speaker 1>postman collection.

00:20:06.115 --> 00:20:08.674
<v Speaker 1>So that means you add, like, three API

00:20:08.674 --> 00:20:11.075
<v Speaker 1>dependencies. You create a couple of operations.

00:20:11.635 --> 00:20:13.554
<v Speaker 1>You deploy that, and now you have a

00:20:13.554 --> 00:20:16.115
<v Speaker 1>Postman collection, and you can give that to

00:20:16.115 --> 00:20:18.670
<v Speaker 1>someone who wants to use your API. That

00:20:18.670 --> 00:20:20.830
<v Speaker 1>means they can just load it in Postman,

00:20:20.830 --> 00:20:22.190
<v Speaker 1>play with your API, and they don't have

00:20:22.190 --> 00:20:24.750
<v Speaker 1>to learn GraphQL. Because I think a lot

00:20:24.750 --> 00:20:25.470
<v Speaker 1>of people

00:20:26.110 --> 00:20:28.110
<v Speaker 1>just want to use your API, and there

00:20:28.110 --> 00:20:30.670
<v Speaker 1>should be as little friction as possible. And

00:20:30.670 --> 00:20:34.445
<v Speaker 1>not everybody wants and not everybody will learn

00:20:34.605 --> 00:20:35.485
<v Speaker 1>GraphQL.

00:20:37.565 --> 00:20:39.805
<v Speaker 0>Alright. Last question and then hands on, I

00:20:39.805 --> 00:20:42.924
<v Speaker 0>promise. So you mentioned something earlier,

00:20:43.645 --> 00:20:45.005
<v Speaker 0>back end for front end.

00:20:45.405 --> 00:20:47.899
<v Speaker 0>Yes. I think this is a term that

00:20:47.899 --> 00:20:48.940
<v Speaker 0>I definitely

00:20:49.019 --> 00:20:50.860
<v Speaker 0>am not that strong with, and I'm assuming

00:20:50.860 --> 00:20:52.299
<v Speaker 0>maybe other people in the audience may not

00:20:52.299 --> 00:20:53.980
<v Speaker 0>be that familiar with or understand what you

00:20:53.980 --> 00:20:55.179
<v Speaker 0>mean by that. But could you tell us

00:20:55.179 --> 00:20:56.779
<v Speaker 0>a little bit more about that pattern?

00:20:57.980 --> 00:20:59.259
<v Speaker 1>Yes. So

00:21:00.140 --> 00:21:03.415
<v Speaker 1>like a very common pattern in in enterprise

00:21:03.415 --> 00:21:07.335
<v Speaker 1>architecture is you have internal and external services,

00:21:07.655 --> 00:21:09.815
<v Speaker 1>and then someone says we need a new

00:21:09.815 --> 00:21:11.735
<v Speaker 1>project. We want to build an app. We

00:21:11.735 --> 00:21:13.015
<v Speaker 1>want to build a website.

00:21:13.495 --> 00:21:16.375
<v Speaker 1>And what you usually do is you

00:21:16.740 --> 00:21:18.740
<v Speaker 1>don't let this website talk to all the

00:21:18.740 --> 00:21:20.580
<v Speaker 1>services internal and external.

00:21:20.740 --> 00:21:21.460
<v Speaker 1>Instead,

00:21:21.700 --> 00:21:24.020
<v Speaker 1>you create a back end for front end,

00:21:24.020 --> 00:21:26.580
<v Speaker 1>so a specific back end for this front

00:21:26.580 --> 00:21:27.139
<v Speaker 1>end,

00:21:27.620 --> 00:21:31.060
<v Speaker 1>and it will supply the capabilities that only

00:21:31.060 --> 00:21:33.085
<v Speaker 1>this front end needs.

00:21:33.245 --> 00:21:33.884
<v Speaker 1>And

00:21:34.125 --> 00:21:35.644
<v Speaker 1>it's a very popular

00:21:36.365 --> 00:21:37.244
<v Speaker 1>pattern.

00:21:37.804 --> 00:21:39.004
<v Speaker 1>The problem is

00:21:39.165 --> 00:21:42.765
<v Speaker 1>if you look at frameworks like Redwood. Js

00:21:42.765 --> 00:21:43.405
<v Speaker 1>and others,

00:21:44.010 --> 00:21:45.210
<v Speaker 1>those always

00:21:45.290 --> 00:21:46.169
<v Speaker 1>assume

00:21:46.650 --> 00:21:47.929
<v Speaker 1>we have a database

00:21:48.250 --> 00:21:50.250
<v Speaker 1>as we're building something from scratch.

00:21:50.810 --> 00:21:53.210
<v Speaker 1>And it's not optimized for the use case

00:21:53.210 --> 00:21:56.650
<v Speaker 1>of we always we we already have APIs

00:21:56.650 --> 00:21:59.774
<v Speaker 1>like Stripe and Twilio and our database and

00:21:59.935 --> 00:22:01.215
<v Speaker 1>Kafka and whatnot.

00:22:01.615 --> 00:22:04.095
<v Speaker 1>And now we need an opinionated framework

00:22:04.175 --> 00:22:05.695
<v Speaker 1>to build a BFF.

00:22:05.775 --> 00:22:07.855
<v Speaker 1>So WunderGraph is optimized

00:22:07.935 --> 00:22:10.095
<v Speaker 1>for this use case where you say, okay.

00:22:10.095 --> 00:22:11.880
<v Speaker 1>I create I want to create a new

00:22:11.880 --> 00:22:13.720
<v Speaker 1>front end, and we already have a couple

00:22:13.720 --> 00:22:14.600
<v Speaker 1>of services

00:22:14.760 --> 00:22:15.400
<v Speaker 1>because,

00:22:17.000 --> 00:22:19.080
<v Speaker 1>obviously, everybody can build a back end for

00:22:19.080 --> 00:22:21.480
<v Speaker 1>front end from scratch. Just use, like, Fastify

00:22:21.480 --> 00:22:23.480
<v Speaker 1>or whatever you want. And then,

00:22:25.125 --> 00:22:27.605
<v Speaker 1>yeah, combine the services and do it manually.

00:22:27.605 --> 00:22:28.884
<v Speaker 1>But the question is,

00:22:29.365 --> 00:22:31.365
<v Speaker 1>do you actually want to invent

00:22:31.445 --> 00:22:33.125
<v Speaker 1>the right kind of patterns,

00:22:33.285 --> 00:22:35.365
<v Speaker 1>and do you want to think about how

00:22:35.365 --> 00:22:37.685
<v Speaker 1>to actually build a BFF, or do you

00:22:37.685 --> 00:22:39.924
<v Speaker 1>want to build on top of a framework

00:22:40.085 --> 00:22:40.725
<v Speaker 1>that

00:22:40.980 --> 00:22:42.900
<v Speaker 1>thinks about this topic for a couple of

00:22:42.900 --> 00:22:46.100
<v Speaker 1>years and the makers behind that and figured

00:22:46.100 --> 00:22:48.340
<v Speaker 1>out what are the what are the the

00:22:48.340 --> 00:22:49.539
<v Speaker 1>important bits

00:22:49.860 --> 00:22:52.419
<v Speaker 1>to to to do this in an efficient

00:22:52.419 --> 00:22:54.179
<v Speaker 1>way. And this way, you can

00:22:54.935 --> 00:22:55.975
<v Speaker 1>you can

00:22:56.295 --> 00:22:58.935
<v Speaker 1>not write a lot of code. Like, you

00:22:58.935 --> 00:23:01.975
<v Speaker 1>know, for from our business perspective, I I

00:23:01.975 --> 00:23:04.215
<v Speaker 1>think as a business, it's always super important

00:23:04.215 --> 00:23:07.495
<v Speaker 1>to write as little code as possible that

00:23:07.495 --> 00:23:10.529
<v Speaker 1>has nothing to do with your business. And

00:23:11.570 --> 00:23:14.210
<v Speaker 1>inventing patterns to create BFS,

00:23:14.850 --> 00:23:15.489
<v Speaker 1>that

00:23:15.650 --> 00:23:18.130
<v Speaker 1>shouldn't be like, you shouldn't be doing that.

00:23:18.130 --> 00:23:18.690
<v Speaker 1>Just

00:23:19.010 --> 00:23:21.090
<v Speaker 1>just built on top of something that already

00:23:21.090 --> 00:23:21.730
<v Speaker 1>works.

00:23:23.090 --> 00:23:25.165
<v Speaker 0>Sweet. On that, I think we'll go straight

00:23:25.165 --> 00:23:26.685
<v Speaker 0>over to the screen share, and we'll start

00:23:26.685 --> 00:23:28.925
<v Speaker 0>showing people what WunderGraph

00:23:28.925 --> 00:23:29.725
<v Speaker 0>can do.

00:23:31.005 --> 00:23:32.044
<v Speaker 0>Let's see.

00:23:32.685 --> 00:23:35.325
<v Speaker 1>What did we decide on again? Like, it's

00:23:35.325 --> 00:23:36.205
<v Speaker 1>going to be you. Right?

00:23:37.620 --> 00:23:39.380
<v Speaker 0>Yes. I think we agreed that I will

00:23:39.380 --> 00:23:42.020
<v Speaker 0>do Yeah. Okay. And we're gonna work through

00:23:42.020 --> 00:23:44.820
<v Speaker 0>some of the examples because there are quite

00:23:44.820 --> 00:23:47.860
<v Speaker 0>a few and the WunderGraph model repository.

00:23:48.260 --> 00:23:50.660
<v Speaker 0>Yes. I've got the website here and people

00:23:50.660 --> 00:23:52.500
<v Speaker 0>can find it at wundergraph.com.

00:23:53.225 --> 00:23:55.065
<v Speaker 0>Is a whole bunch of documentation,

00:23:56.105 --> 00:23:59.225
<v Speaker 0>but I think we're going straight to the

00:23:59.225 --> 00:24:00.745
<v Speaker 0>GitHub repository.

00:24:00.985 --> 00:24:02.904
<v Speaker 0>So let's get that. Yeah.

00:24:07.865 --> 00:24:09.225
<v Speaker 1>WunderGraph

00:24:08.740 --> 00:24:10.820
<v Speaker 1>and then WunderGraph again.

00:24:16.019 --> 00:24:17.940
<v Speaker 1>And by the way, one thing I can

00:24:17.940 --> 00:24:18.979
<v Speaker 1>mention is

00:24:19.299 --> 00:24:22.260
<v Speaker 1>WunderGraph is a % open source, Apache two

00:24:22.260 --> 00:24:22.659
<v Speaker 1>point o.

00:24:24.125 --> 00:24:26.285
<v Speaker 1>We believe in a healthy

00:24:26.285 --> 00:24:27.085
<v Speaker 1>community.

00:24:27.725 --> 00:24:28.285
<v Speaker 1>And,

00:24:28.925 --> 00:24:31.805
<v Speaker 1>yeah, there's no enterprise version or or anything.

00:24:31.805 --> 00:24:33.804
<v Speaker 1>So everything we talk about,

00:24:35.565 --> 00:24:37.485
<v Speaker 1>you can run it on your own. You

00:24:37.485 --> 00:24:40.045
<v Speaker 1>can debug everything, the Go part, the TypeScript

00:24:40.020 --> 00:24:42.260
<v Speaker 1>parts. It's everything is available.

00:24:43.140 --> 00:24:45.460
<v Speaker 0>Cool. But you are launching WunderGraph

00:24:45.460 --> 00:24:47.620
<v Speaker 0>close, right, to make it easier for people?

00:24:48.340 --> 00:24:48.740
<v Speaker 1>Yeah.

00:24:49.220 --> 00:24:51.460
<v Speaker 1>So the what what we do is very

00:24:51.460 --> 00:24:53.380
<v Speaker 1>similar to to Vercel.

00:24:54.955 --> 00:24:56.634
<v Speaker 1>WunderGraph, the framework itself,

00:24:57.115 --> 00:24:58.874
<v Speaker 1>I would call it, like, the the

00:24:59.115 --> 00:25:01.195
<v Speaker 1>Next. Js for back end.

00:25:01.674 --> 00:25:04.635
<v Speaker 1>And WunderGraph Cloud is, like, the the WunderGraph

00:25:04.635 --> 00:25:06.154
<v Speaker 1>to make it easy to

00:25:07.195 --> 00:25:09.274
<v Speaker 1>not do anything, just focus on coding.

00:25:10.850 --> 00:25:12.769
<v Speaker 0>That's my preferred approach.

00:25:13.090 --> 00:25:13.729
<v Speaker 0>So

00:25:14.450 --> 00:25:16.929
<v Speaker 0>are we working through this examples directory?

00:25:17.649 --> 00:25:20.049
<v Speaker 1>Yeah. So we have one example that's

00:25:20.929 --> 00:25:22.450
<v Speaker 1>Next. Js TypeScript

00:25:22.450 --> 00:25:26.575
<v Speaker 1>functions. So we recently added TypeScript functions, which

00:25:26.575 --> 00:25:28.335
<v Speaker 1>I think is so cool. So you can

00:25:28.335 --> 00:25:29.935
<v Speaker 1>go to that, and then you can

00:25:31.135 --> 00:25:33.295
<v Speaker 1>n p m I, and I think n

00:25:33.295 --> 00:25:34.655
<v Speaker 1>p m start,

00:25:34.815 --> 00:25:36.415
<v Speaker 1>and we should be good. Yeah.

00:25:38.170 --> 00:25:39.130
<v Speaker 1>Let's try it out.

00:25:50.825 --> 00:25:53.304
<v Speaker 0>Alright. So we have something running on

00:25:53.465 --> 00:25:55.225
<v Speaker 0>oh, it's open to. Yes.

00:25:58.745 --> 00:25:59.945
<v Speaker 1>So that's our

00:26:00.665 --> 00:26:01.385
<v Speaker 1>our

00:26:01.705 --> 00:26:02.424
<v Speaker 1>usual

00:26:02.585 --> 00:26:03.465
<v Speaker 1>starter package.

00:26:04.150 --> 00:26:05.750
<v Speaker 1>We already have an

00:26:05.750 --> 00:26:06.549
<v Speaker 1>operation

00:26:06.630 --> 00:26:07.429
<v Speaker 1>running

00:26:08.710 --> 00:26:11.030
<v Speaker 1>on the main page. That's Next. Js, and

00:26:11.030 --> 00:26:12.470
<v Speaker 1>we have WunderGraph running

00:26:12.710 --> 00:26:14.550
<v Speaker 1>behind the scenes. So that means we have

00:26:14.550 --> 00:26:15.909
<v Speaker 1>two services running.

00:26:15.990 --> 00:26:16.230
<v Speaker 1>And,

00:26:17.434 --> 00:26:19.434
<v Speaker 1>yeah. Maybe you wanna explore it a bit.

00:26:21.674 --> 00:26:23.195
<v Speaker 0>Okay. So I'm not I'm not sure what

00:26:23.195 --> 00:26:24.395
<v Speaker 0>I'm looking at. I'm looking at an XGS

00:26:24.395 --> 00:26:26.955
<v Speaker 0>website that is used speaking

00:26:27.195 --> 00:26:27.914
<v Speaker 0>to

00:26:28.235 --> 00:26:30.554
<v Speaker 0>the WunderGraph API

00:26:30.635 --> 00:26:31.595
<v Speaker 0>proxy.

00:26:32.315 --> 00:26:32.635
<v Speaker 1>Mhmm.

00:26:35.240 --> 00:26:36.920
<v Speaker 0>And if I push refresh, I'm not I

00:26:36.920 --> 00:26:38.680
<v Speaker 0>I I don't really know what's happening. So

00:26:38.680 --> 00:26:39.320
<v Speaker 0>maybe you can

00:26:41.480 --> 00:26:43.960
<v Speaker 1>Yeah. If you push refresh, it just

00:26:45.080 --> 00:26:48.120
<v Speaker 0>Says validating for truthful. One nanosecond.

00:26:48.440 --> 00:26:51.635
<v Speaker 1>Yeah. But the the SpaceX API, it's I

00:26:51.635 --> 00:26:52.674
<v Speaker 1>think it's static.

00:26:53.075 --> 00:26:55.554
<v Speaker 1>It's just a popular example when you use

00:26:56.915 --> 00:26:58.434
<v Speaker 1>a GraphQL APIs,

00:26:58.915 --> 00:27:00.195
<v Speaker 1>and that's why we put it here.

00:27:02.410 --> 00:27:03.930
<v Speaker 0>Yeah. So this is calling

00:27:04.410 --> 00:27:07.850
<v Speaker 0>the Dragon's operations endpoint on some service.

00:27:08.650 --> 00:27:09.530
<v Speaker 1>Exactly.

00:27:10.570 --> 00:27:12.170
<v Speaker 0>Alright. Let's take a look at the code.

00:27:12.170 --> 00:27:13.370
<v Speaker 0>Maybe that will

00:27:15.165 --> 00:27:16.365
<v Speaker 0>help me.

00:27:25.965 --> 00:27:28.125
<v Speaker 0>Okay. So when we push the refresh button,

00:27:29.800 --> 00:27:31.960
<v Speaker 0>we're calling dragons.mutate.

00:27:32.600 --> 00:27:33.800
<v Speaker 0>Dragons

00:27:33.800 --> 00:27:38.200
<v Speaker 0>is using use query from the WunderGraph generated

00:27:38.600 --> 00:27:39.560
<v Speaker 0>SDK,

00:27:39.720 --> 00:27:40.440
<v Speaker 0>I guess. Mhmm.

00:27:42.164 --> 00:27:44.164
<v Speaker 0>And I don't know what the operation Dragon

00:27:44.164 --> 00:27:45.924
<v Speaker 0>is coming from, but I'm assuming

00:27:47.684 --> 00:27:50.565
<v Speaker 0>there's something in here that defines that probably

00:27:50.565 --> 00:27:52.244
<v Speaker 0>in the GraphQL schema.

00:27:53.845 --> 00:27:55.870
<v Speaker 1>Is there a .WunderGraph

00:27:55.870 --> 00:27:57.149
<v Speaker 1>directory somewhere?

00:27:57.230 --> 00:27:59.310
<v Speaker 0>There is. It's just very small because the

00:27:59.310 --> 00:28:01.310
<v Speaker 0>size of the explorer, but it is here.

00:28:01.310 --> 00:28:02.750
<v Speaker 0>Yep. And I see operations.

00:28:03.550 --> 00:28:04.190
<v Speaker 1>Okay.

00:28:07.150 --> 00:28:09.950
<v Speaker 0>Okay. So you're proxying the SpaceX

00:28:10.015 --> 00:28:10.894
<v Speaker 0>API.

00:28:12.415 --> 00:28:13.215
<v Speaker 1>Correct.

00:28:14.655 --> 00:28:15.374
<v Speaker 1>Okay.

00:28:17.215 --> 00:28:18.894
<v Speaker 1>And here's something interesting.

00:28:19.455 --> 00:28:20.735
<v Speaker 1>If you look at line two.

00:28:23.260 --> 00:28:24.460
<v Speaker 1>Oh, yeah. You can make it a bit

00:28:24.460 --> 00:28:26.779
<v Speaker 1>bigger. That would definitely help the audience.

00:28:28.140 --> 00:28:30.460
<v Speaker 1>You see that k. I I I don't

00:28:30.460 --> 00:28:33.259
<v Speaker 1>know if you know the the SpaceX API,

00:28:33.420 --> 00:28:35.420
<v Speaker 1>but the SpaceX API itself,

00:28:36.235 --> 00:28:36.794
<v Speaker 1>it is

00:28:37.355 --> 00:28:39.755
<v Speaker 1>it has the root field dragons. But here,

00:28:39.755 --> 00:28:41.994
<v Speaker 1>we see SpaceX underscore dragons.

00:28:42.315 --> 00:28:46.794
<v Speaker 1>And if we go to the wundergaf.config.ts,

00:28:47.195 --> 00:28:49.289
<v Speaker 1>we can get some hints why this is

00:28:49.289 --> 00:28:49.929
<v Speaker 1>happening.

00:28:50.890 --> 00:28:51.849
<v Speaker 1>So here,

00:28:52.010 --> 00:28:54.570
<v Speaker 1>we are introspecting the APIs we're using.

00:28:55.370 --> 00:28:57.690
<v Speaker 1>Dragon starts from the SpaceX API,

00:28:58.010 --> 00:29:02.169
<v Speaker 1>and one concept we have is API namespacing.

00:29:02.804 --> 00:29:04.724
<v Speaker 1>So when we started

00:29:04.884 --> 00:29:05.524
<v Speaker 1>exploring

00:29:05.764 --> 00:29:07.044
<v Speaker 1>like, this is kind of like, I don't

00:29:07.044 --> 00:29:09.125
<v Speaker 1>know, a year ago or something. When we

00:29:09.125 --> 00:29:10.324
<v Speaker 1>started exploring

00:29:10.644 --> 00:29:12.324
<v Speaker 1>to automatically

00:29:12.725 --> 00:29:14.244
<v Speaker 1>combine APIs,

00:29:14.565 --> 00:29:18.085
<v Speaker 1>what we quickly found is that

00:29:17.510 --> 00:29:19.750
<v Speaker 1>when you try to combine multiple APIs, you

00:29:19.750 --> 00:29:21.350
<v Speaker 1>run into naming collisions.

00:29:22.070 --> 00:29:25.270
<v Speaker 1>And so to mitigate that and to to

00:29:25.270 --> 00:29:27.430
<v Speaker 1>not have the user manually

00:29:27.750 --> 00:29:31.110
<v Speaker 1>change APIs or or have to rename stuff,

00:29:31.430 --> 00:29:32.390
<v Speaker 1>you can put

00:29:32.765 --> 00:29:35.085
<v Speaker 1>each API into its own namespace,

00:29:35.485 --> 00:29:37.244
<v Speaker 1>and this way it's isolated.

00:29:37.644 --> 00:29:40.125
<v Speaker 1>So that means if you go to the

00:29:40.125 --> 00:29:42.604
<v Speaker 1>generated folder, we can actually look at the

00:29:42.605 --> 00:29:44.044
<v Speaker 1>the resulting

00:29:44.205 --> 00:29:47.005
<v Speaker 1>GraphQL schema when we combine everything. There's a

00:29:46.770 --> 00:29:48.529
<v Speaker 1>GraphQL schema file somewhere.

00:29:48.770 --> 00:29:50.930
<v Speaker 1>It's the only GraphQL file. Yeah. And then

00:29:50.930 --> 00:29:52.930
<v Speaker 1>if you go to the search for the

00:29:52.930 --> 00:29:55.170
<v Speaker 1>type query, then you can see our entry

00:29:55.170 --> 00:29:55.809
<v Speaker 1>points.

00:29:57.330 --> 00:29:57.970
<v Speaker 1>Yes.

00:29:58.210 --> 00:30:00.210
<v Speaker 1>And here you can see, okay, we have

00:30:00.210 --> 00:30:02.130
<v Speaker 1>the SpaceX APIs, and if you scroll a

00:30:02.130 --> 00:30:02.530
<v Speaker 1>bit more,

00:30:04.735 --> 00:30:08.095
<v Speaker 1>then you see here's countries and then weather.

00:30:08.095 --> 00:30:09.775
<v Speaker 1>And each of them is in their own

00:30:09.775 --> 00:30:14.175
<v Speaker 1>namespace types TypeScript. GraphQL has no namespacing by

00:30:14.175 --> 00:30:14.815
<v Speaker 1>itself,

00:30:15.775 --> 00:30:18.175
<v Speaker 1>so we can fix that on our own.

00:30:20.169 --> 00:30:22.649
<v Speaker 0>Okay. Do you expose,

00:30:23.770 --> 00:30:26.650
<v Speaker 0>like, GraphQL playground at a graphical or anything

00:30:26.650 --> 00:30:28.570
<v Speaker 0>like that for me to play around with

00:30:28.570 --> 00:30:29.210
<v Speaker 0>this?

00:30:29.450 --> 00:30:31.129
<v Speaker 1>Yes. You can go to

00:30:31.770 --> 00:30:32.730
<v Speaker 1>local host

00:30:33.405 --> 00:30:34.285
<v Speaker 1>port

00:30:34.285 --> 00:30:36.684
<v Speaker 1>nine nine nine one slash

00:30:36.685 --> 00:30:37.565
<v Speaker 1>GraphQL.

00:30:42.525 --> 00:30:43.965
<v Speaker 0>Okay. Cool.

00:30:44.125 --> 00:30:45.405
<v Speaker 0>So if I type query,

00:30:47.000 --> 00:30:49.240
<v Speaker 0>and I'm assuming the documentation

00:30:51.639 --> 00:30:53.559
<v Speaker 0>oh, nope. Wrong button.

00:30:54.279 --> 00:30:56.519
<v Speaker 0>How'd you get the documentation to show up?

00:30:58.360 --> 00:31:00.004
<v Speaker 1>Good question. Question. Here.

00:31:00.645 --> 00:31:01.445
<v Speaker 1>Yep.

00:31:01.924 --> 00:31:03.924
<v Speaker 0>So I could query

00:31:04.245 --> 00:31:05.604
<v Speaker 0>SpaceX ship.

00:31:10.404 --> 00:31:12.485
<v Speaker 0>I don't know why my autocomplete isn't working.

00:31:12.485 --> 00:31:14.565
<v Speaker 0>It normally works on this

00:31:16.940 --> 00:31:20.139
<v Speaker 0>ship. Oh, ships. Okay. Let's do ships.

00:31:23.260 --> 00:31:23.739
<v Speaker 0>So

00:31:27.179 --> 00:31:29.684
<v Speaker 0>this is a list of all the spaceships.

00:31:30.565 --> 00:31:31.125
<v Speaker 0>Right?

00:31:31.445 --> 00:31:32.164
<v Speaker 0>Mhmm.

00:31:33.365 --> 00:31:34.804
<v Speaker 0>And we can get

00:31:35.125 --> 00:31:36.085
<v Speaker 0>active

00:31:37.845 --> 00:31:38.485
<v Speaker 0>class.

00:31:41.480 --> 00:31:43.480
<v Speaker 0>What else? Mission. Oh, no. It's gonna be

00:31:43.480 --> 00:31:44.919
<v Speaker 0>a nested object and I don't wanna have

00:31:44.919 --> 00:31:46.599
<v Speaker 0>to find the docs for it. So

00:31:47.399 --> 00:31:48.519
<v Speaker 0>let's do this.

00:31:50.360 --> 00:31:50.919
<v Speaker 0>Cool.

00:31:51.320 --> 00:31:53.399
<v Speaker 0>So let me try and understand

00:31:53.404 --> 00:31:54.124
<v Speaker 0>then.

00:31:54.924 --> 00:31:55.724
<v Speaker 0>This

00:31:56.044 --> 00:31:58.924
<v Speaker 0>GraphQL starter thing that we have here

00:31:59.804 --> 00:32:02.924
<v Speaker 0>is configured by the dot WunderGraph directory

00:32:03.325 --> 00:32:05.885
<v Speaker 0>where we have this operations file.

00:32:07.170 --> 00:32:08.770
<v Speaker 0>Nope. Not that one. Where

00:32:13.810 --> 00:32:15.250
<v Speaker 0>did it where was API

00:32:15.410 --> 00:32:18.370
<v Speaker 1>What what when the graph config Yes. So

00:32:19.330 --> 00:32:21.010
<v Speaker 0>here you can define

00:32:21.865 --> 00:32:23.145
<v Speaker 0>any GraphQL

00:32:23.145 --> 00:32:24.024
<v Speaker 0>API,

00:32:24.184 --> 00:32:26.105
<v Speaker 0>have a introspect and

00:32:26.105 --> 00:32:28.745
<v Speaker 0>then make it available over one single API

00:32:28.745 --> 00:32:31.145
<v Speaker 0>endpoint. This is what this demo is showcasing.

00:32:31.145 --> 00:32:33.705
<v Speaker 0>How we could speak to a country's API,

00:32:33.705 --> 00:32:36.679
<v Speaker 0>a weather API, and a SpaceX API, expose

00:32:36.679 --> 00:32:37.879
<v Speaker 0>them over one

00:32:38.840 --> 00:32:40.440
<v Speaker 0>API for you to query.

00:32:40.920 --> 00:32:43.080
<v Speaker 1>Yes. And if you make, like, a new

00:32:43.080 --> 00:32:45.000
<v Speaker 1>line here and you type introspect

00:32:45.000 --> 00:32:45.960
<v Speaker 1>and dot,

00:32:49.080 --> 00:32:51.480
<v Speaker 1>you can see we can also introspect

00:32:51.585 --> 00:32:52.864
<v Speaker 1>Apollo Federation,

00:32:53.345 --> 00:32:54.304
<v Speaker 1>MongoDB,

00:32:54.304 --> 00:32:55.184
<v Speaker 1>MySQL,

00:32:55.184 --> 00:32:56.145
<v Speaker 1>OpenAPI

00:32:56.145 --> 00:32:58.705
<v Speaker 1>with a file so we could supply an

00:32:58.705 --> 00:33:01.504
<v Speaker 1>OpenAPI file and then PlanetScale,

00:33:01.505 --> 00:33:03.745
<v Speaker 1>Postgres, SQLite, and SQL Server.

00:33:06.520 --> 00:33:09.240
<v Speaker 0>Okay. So these are the compatible

00:33:09.240 --> 00:33:11.640
<v Speaker 1>data sources we can introspect and add to

00:33:11.640 --> 00:33:12.200
<v Speaker 1>our

00:33:12.520 --> 00:33:13.720
<v Speaker 1>virtual graph.

00:33:15.240 --> 00:33:17.960
<v Speaker 0>Nice. Okay. Well, not just GraphQL. I could

00:33:17.960 --> 00:33:20.414
<v Speaker 0>speak to a whole bunch of databases,

00:33:20.414 --> 00:33:23.054
<v Speaker 0>Postgres and MySQL being pretty popular, PlanetScale's in

00:33:23.054 --> 00:33:23.774
<v Speaker 0>there too.

00:33:24.015 --> 00:33:26.735
<v Speaker 0>And I guess MongoDB for people playing with

00:33:26.735 --> 00:33:27.294
<v Speaker 0>Atlas.

00:33:27.775 --> 00:33:29.534
<v Speaker 0>Yeah. It's pretty neat. So

00:33:32.015 --> 00:33:33.534
<v Speaker 0>you mentioned like

00:33:34.760 --> 00:33:36.200
<v Speaker 0>these get versions.

00:33:36.760 --> 00:33:37.399
<v Speaker 0>Like,

00:33:38.120 --> 00:33:39.720
<v Speaker 0>how are these versions? Like, you talked about

00:33:39.720 --> 00:33:41.960
<v Speaker 0>them as sorry. Not version, but as dependencies.

00:33:41.960 --> 00:33:43.400
<v Speaker 0>Right? So is that what you mean when

00:33:43.400 --> 00:33:44.520
<v Speaker 0>we say we break this in as a

00:33:44.520 --> 00:33:45.320
<v Speaker 0>dependency?

00:33:46.280 --> 00:33:48.985
<v Speaker 1>Yes. So you introspect them here, and then

00:33:49.065 --> 00:33:50.985
<v Speaker 1>at the bottom in line 30, you see

00:33:50.985 --> 00:33:53.065
<v Speaker 1>configure WunderGraph application.

00:33:53.385 --> 00:33:54.905
<v Speaker 1>And here, we can add our

00:33:55.705 --> 00:33:56.665
<v Speaker 1>APIs,

00:33:56.825 --> 00:33:59.305
<v Speaker 1>and then we can configure code generators,

00:33:59.730 --> 00:34:02.450
<v Speaker 1>course for a our API gateway. We can

00:34:02.450 --> 00:34:03.889
<v Speaker 1>configure authentication,

00:34:04.850 --> 00:34:05.809
<v Speaker 1>security.

00:34:06.370 --> 00:34:09.010
<v Speaker 1>For example, here, we can enable or disable

00:34:09.010 --> 00:34:10.290
<v Speaker 1>the GraphQL endpoint.

00:34:10.690 --> 00:34:10.929
<v Speaker 1>And,

00:34:12.234 --> 00:34:14.155
<v Speaker 1>yeah, at the end of the day, this

00:34:14.155 --> 00:34:17.355
<v Speaker 1>gives us our API gateway. But as I

00:34:17.355 --> 00:34:18.155
<v Speaker 1>said before,

00:34:18.395 --> 00:34:19.435
<v Speaker 1>you almost

00:34:19.435 --> 00:34:20.715
<v Speaker 1>don't notice

00:34:20.715 --> 00:34:22.474
<v Speaker 1>that you're using an API gateway.

00:34:24.030 --> 00:34:24.750
<v Speaker 0>Okay.

00:34:25.710 --> 00:34:26.910
<v Speaker 0>So I'm curious

00:34:27.230 --> 00:34:30.190
<v Speaker 0>because this was obviously an example from your

00:34:30.190 --> 00:34:31.230
<v Speaker 0>repository.

00:34:31.710 --> 00:34:34.830
<v Speaker 0>If I am a developer tomorrow and I

00:34:34.830 --> 00:34:37.005
<v Speaker 0>want to bring WunderGraph into my application,

00:34:37.165 --> 00:34:38.764
<v Speaker 0>how much of this is generated and how

00:34:38.764 --> 00:34:40.045
<v Speaker 0>much of this is stuff that I need

00:34:40.045 --> 00:34:42.605
<v Speaker 0>to type to, you know, provide the boilerplate

00:34:42.605 --> 00:34:44.045
<v Speaker 0>and the glue for this to work?

00:34:44.764 --> 00:34:47.324
<v Speaker 1>Yeah. So the generated folder

00:34:47.484 --> 00:34:48.284
<v Speaker 1>is generated.

00:34:51.020 --> 00:34:52.300
<v Speaker 1>What you need is

00:34:53.260 --> 00:34:54.540
<v Speaker 1>the WunderGraph

00:34:55.260 --> 00:34:56.380
<v Speaker 1>config TS

00:34:56.780 --> 00:34:57.980
<v Speaker 1>and the operations

00:34:58.300 --> 00:34:59.260
<v Speaker 1>TS,

00:34:59.260 --> 00:35:01.180
<v Speaker 1>and I think there's a third file.

00:35:02.780 --> 00:35:04.865
<v Speaker 1>It's just a bit small. Here, you can

00:35:04.865 --> 00:35:08.225
<v Speaker 1>configure defaults for your operations, for example. Yes.

00:35:08.704 --> 00:35:10.145
<v Speaker 1>And this one

00:35:10.464 --> 00:35:12.705
<v Speaker 1>is the hooks configuration.

00:35:12.865 --> 00:35:14.625
<v Speaker 1>So, for example, if you want to do

00:35:14.625 --> 00:35:15.425
<v Speaker 1>something

00:35:15.585 --> 00:35:17.265
<v Speaker 1>before or after

00:35:17.840 --> 00:35:21.200
<v Speaker 1>the Dragon's operation is being called, you can

00:35:21.200 --> 00:35:22.560
<v Speaker 1>define hooks here

00:35:22.720 --> 00:35:24.800
<v Speaker 1>using TypeScript, and then you can hook into

00:35:24.800 --> 00:35:26.800
<v Speaker 1>the life cycle of an operation.

00:35:27.920 --> 00:35:30.320
<v Speaker 1>So we have a command. I think it's

00:35:30.320 --> 00:35:30.880
<v Speaker 1>something

00:35:31.235 --> 00:35:34.595
<v Speaker 1>like Wunder CTL in it or something similar.

00:35:34.675 --> 00:35:35.875
<v Speaker 1>I think create

00:35:35.875 --> 00:35:37.715
<v Speaker 1>WunderGraph app in it,

00:35:38.115 --> 00:35:40.515
<v Speaker 1>and that scaffolds you these couple of files.

00:35:40.835 --> 00:35:42.595
<v Speaker 1>And that's more or less what you need,

00:35:42.595 --> 00:35:44.070
<v Speaker 1>and and the rest is just, just,

00:35:45.350 --> 00:35:48.150
<v Speaker 1>yeah, NPM start, and everything else is is

00:35:48.150 --> 00:35:49.030
<v Speaker 1>generated.

00:35:49.350 --> 00:35:51.350
<v Speaker 1>So it's it's pretty lightweight.

00:35:51.910 --> 00:35:52.630
<v Speaker 0>Okay.

00:35:53.270 --> 00:35:55.190
<v Speaker 0>What are these operations

00:35:55.350 --> 00:35:56.070
<v Speaker 0>then?

00:35:56.310 --> 00:35:59.590
<v Speaker 0>Like, if we've already introspect the remote APIs

00:35:59.205 --> 00:36:01.605
<v Speaker 0>and we've got the ability to query them,

00:36:02.005 --> 00:36:04.245
<v Speaker 0>what what is the operation? Is that as

00:36:04.245 --> 00:36:05.445
<v Speaker 0>constraining

00:36:05.445 --> 00:36:07.925
<v Speaker 0>the different types of queries or or I

00:36:07.925 --> 00:36:09.285
<v Speaker 0>don't know. I'm I'm not gonna guess. I'll

00:36:09.285 --> 00:36:09.925
<v Speaker 0>let you go.

00:36:10.405 --> 00:36:10.725
<v Speaker 1>Yeah.

00:36:11.380 --> 00:36:13.140
<v Speaker 1>The operations folder

00:36:13.460 --> 00:36:14.500
<v Speaker 1>defines

00:36:14.500 --> 00:36:15.140
<v Speaker 1>our

00:36:16.660 --> 00:36:18.580
<v Speaker 1>JSON RPC router.

00:36:18.900 --> 00:36:21.460
<v Speaker 1>So for example, we have in the root,

00:36:21.460 --> 00:36:22.100
<v Speaker 1>we have

00:36:22.420 --> 00:36:23.780
<v Speaker 1>I don't know. It's so small. It's like

00:36:23.780 --> 00:36:27.205
<v Speaker 1>countries. Right? Yep. Countries, dragons, or weather.

00:36:27.925 --> 00:36:30.565
<v Speaker 1>Okay. So if you open a curl

00:36:31.765 --> 00:36:33.045
<v Speaker 1>in terminal

00:36:39.020 --> 00:36:40.300
<v Speaker 1>and you do

00:36:40.540 --> 00:36:41.500
<v Speaker 1>http

00:36:41.500 --> 00:36:43.180
<v Speaker 1>colon slash slash

00:36:43.580 --> 00:36:45.660
<v Speaker 1>local host nine nine nine one,

00:36:47.660 --> 00:36:49.100
<v Speaker 1>and then slash operations,

00:36:52.575 --> 00:36:53.535
<v Speaker 1>and then

00:36:54.335 --> 00:36:55.375
<v Speaker 1>dragons.

00:37:00.975 --> 00:37:02.975
<v Speaker 1>Yeah. With capital d. Sorry.

00:37:06.759 --> 00:37:07.960
<v Speaker 1>Now we're calling

00:37:08.599 --> 00:37:10.440
<v Speaker 1>this file, more or less,

00:37:11.000 --> 00:37:13.160
<v Speaker 1>or we're calling the operation that was defined

00:37:13.160 --> 00:37:14.200
<v Speaker 1>in this file.

00:37:15.880 --> 00:37:16.759
<v Speaker 0>Right.

00:37:16.759 --> 00:37:17.079
<v Speaker 0>Okay.

00:37:18.565 --> 00:37:20.005
<v Speaker 1>And you could also do you have a

00:37:20.005 --> 00:37:21.205
<v Speaker 1>Postman installed,

00:37:21.285 --> 00:37:22.005
<v Speaker 1>by the way?

00:37:23.525 --> 00:37:24.085
<v Speaker 1>No.

00:37:24.725 --> 00:37:25.525
<v Speaker 1>No.

00:37:25.525 --> 00:37:26.245
<v Speaker 1>Okay.

00:37:26.405 --> 00:37:28.725
<v Speaker 1>That that's unfortunate. But I I can just

00:37:28.725 --> 00:37:30.485
<v Speaker 1>tell you, if you go to the generator

00:37:30.645 --> 00:37:32.805
<v Speaker 1>sure. I could do a preinstall Postman.

00:37:33.750 --> 00:37:34.390
<v Speaker 1>Okay.

00:37:35.270 --> 00:37:36.550
<v Speaker 0>It won't take long.

00:37:37.270 --> 00:37:37.910
<v Speaker 1>Yeah.

00:37:40.230 --> 00:37:41.190
<v Speaker 1>We

00:37:43.110 --> 00:37:45.510
<v Speaker 1>can use the time. Go to your

00:37:46.150 --> 00:37:49.035
<v Speaker 1>go to your playground where you created your

00:37:49.035 --> 00:37:50.555
<v Speaker 1>own operation because

00:37:51.355 --> 00:37:52.635
<v Speaker 1>you can have your own

00:37:53.595 --> 00:37:55.995
<v Speaker 1>operation. So copy this thing here.

00:37:56.555 --> 00:37:59.435
<v Speaker 0>Yep. Yes. And now go to the operations

00:37:59.435 --> 00:37:59.835
<v Speaker 1>folder,

00:38:00.330 --> 00:38:02.970
<v Speaker 1>create a new file, and let's call this

00:38:02.970 --> 00:38:05.930
<v Speaker 1>ships or whatever you want inside the operations

00:38:05.930 --> 00:38:08.810
<v Speaker 1>folder. Right? Yeah. Ships dot GraphQL.

00:38:09.530 --> 00:38:11.610
<v Speaker 1>That's the convention. Okay. Save it.

00:38:12.250 --> 00:38:14.730
<v Speaker 1>Great. And now let's call

00:38:15.130 --> 00:38:16.490
<v Speaker 1>ships

00:38:16.175 --> 00:38:17.055
<v Speaker 1>in call.

00:38:20.815 --> 00:38:22.815
<v Speaker 1>Ah, Rawkode. Okay. Yeah.

00:38:23.695 --> 00:38:24.655
<v Speaker 1>Yes. That's

00:38:25.775 --> 00:38:27.695
<v Speaker 0>Yeah. Okay. So that's the the bit of

00:38:27.695 --> 00:38:28.575
<v Speaker 0>information

00:38:28.575 --> 00:38:30.290
<v Speaker 0>that I think was important there for me

00:38:30.290 --> 00:38:31.490
<v Speaker 0>is because

00:38:31.970 --> 00:38:34.610
<v Speaker 0>when we have this graphical playground, the graphical

00:38:34.610 --> 00:38:36.050
<v Speaker 0>playground style setup,

00:38:36.210 --> 00:38:38.610
<v Speaker 0>we can make any arbitrary query we want

00:38:38.610 --> 00:38:40.130
<v Speaker 0>against any of the APIs that have been

00:38:40.130 --> 00:38:42.530
<v Speaker 0>introspective or made available via the proxy.

00:38:42.770 --> 00:38:43.090
<v Speaker 0>But actually,

00:38:44.214 --> 00:38:47.015
<v Speaker 0>really what these people what developers should be

00:38:47.015 --> 00:38:48.215
<v Speaker 0>doing is

00:38:49.494 --> 00:38:52.375
<v Speaker 0>defining all the different queries as operations

00:38:52.775 --> 00:38:56.295
<v Speaker 0>and consuming them from the RPC

00:38:56.535 --> 00:38:59.460
<v Speaker 0>API and Yes. Rather than speaking directly.

00:38:59.460 --> 00:39:00.020
<v Speaker 0>Yeah.

00:39:01.220 --> 00:39:03.140
<v Speaker 1>Go go to the front end code, like

00:39:03.140 --> 00:39:04.900
<v Speaker 1>the where you've called

00:39:05.140 --> 00:39:08.100
<v Speaker 1>the Dragon's API from the front end.

00:39:08.500 --> 00:39:09.140
<v Speaker 1>Yes.

00:39:09.380 --> 00:39:09.940
<v Speaker 1>So

00:39:10.455 --> 00:39:12.455
<v Speaker 1>when you go to operation name and you

00:39:12.455 --> 00:39:14.615
<v Speaker 1>you remove dragons and you

00:39:15.895 --> 00:39:17.415
<v Speaker 1>trigger auto completion

00:39:19.415 --> 00:39:20.295
<v Speaker 0>Oh,

00:39:20.535 --> 00:39:21.655
<v Speaker 0>hey. That's cool.

00:39:21.895 --> 00:39:22.775
<v Speaker 1>That's Rawkode.

00:39:25.670 --> 00:39:28.230
<v Speaker 1>And now if you check, for example, in

00:39:28.230 --> 00:39:29.829
<v Speaker 1>line 10, you make a new line and

00:39:29.829 --> 00:39:31.830
<v Speaker 1>you check what dragons contains

00:39:33.670 --> 00:39:34.150
<v Speaker 1>data,

00:39:40.515 --> 00:39:42.035
<v Speaker 1>And you see what

00:39:42.275 --> 00:39:44.035
<v Speaker 1>data is actually inside

00:39:44.515 --> 00:39:45.475
<v Speaker 1>this thing.

00:39:49.234 --> 00:39:50.915
<v Speaker 0>Hey. That's pretty nice.

00:39:52.115 --> 00:39:52.835
<v Speaker 1>And,

00:39:53.234 --> 00:39:53.714
<v Speaker 1>you know,

00:39:54.840 --> 00:39:58.680
<v Speaker 1>now the audience would think, yeah, yes, cogeneration

00:39:58.680 --> 00:39:59.560
<v Speaker 1>exists.

00:39:59.640 --> 00:40:00.600
<v Speaker 1>Sure.

00:40:01.560 --> 00:40:03.640
<v Speaker 1>Everything exists. It's just a question of do

00:40:03.640 --> 00:40:05.240
<v Speaker 1>you want to care or do you want

00:40:05.240 --> 00:40:06.280
<v Speaker 1>to have something

00:40:06.440 --> 00:40:07.080
<v Speaker 1>that

00:40:07.855 --> 00:40:10.335
<v Speaker 1>just works and that figured out all the

00:40:10.575 --> 00:40:12.655
<v Speaker 1>hard details? And for example, we we don't

00:40:12.655 --> 00:40:15.135
<v Speaker 1>reinvent the wheel. We integrate with

00:40:15.855 --> 00:40:17.135
<v Speaker 1>SWR

00:40:17.135 --> 00:40:18.575
<v Speaker 1>and React Curry.

00:40:18.975 --> 00:40:20.895
<v Speaker 1>So we have other examples that

00:40:21.295 --> 00:40:22.095
<v Speaker 1>wrap

00:40:22.255 --> 00:40:22.975
<v Speaker 1>WunderGraph,

00:40:23.349 --> 00:40:26.390
<v Speaker 1>the WunderGraph TypeScript client, which is TypeSave,

00:40:27.030 --> 00:40:29.750
<v Speaker 1>and we wrap this with SWR and React

00:40:29.750 --> 00:40:30.390
<v Speaker 1>Query.

00:40:30.550 --> 00:40:32.870
<v Speaker 1>So you get the benefits of React Query

00:40:33.109 --> 00:40:35.990
<v Speaker 1>with WunderGraph RPC functions.

00:40:36.310 --> 00:40:37.270
<v Speaker 1>And you can

00:40:37.775 --> 00:40:39.855
<v Speaker 1>you can just call your virtual graph and

00:40:39.855 --> 00:40:40.415
<v Speaker 1>you

00:40:40.735 --> 00:40:42.335
<v Speaker 1>you know, if you look at this, you

00:40:42.335 --> 00:40:44.335
<v Speaker 1>might be thinking I'm doing GraphQL. Right? It

00:40:44.335 --> 00:40:46.415
<v Speaker 1>it looks like GraphQL. It feels like GraphQL.

00:40:46.415 --> 00:40:48.895
<v Speaker 1>It's not GraphQL, and you don't

00:40:48.895 --> 00:40:51.935
<v Speaker 1>care. And it's secure. And for example, if

00:40:51.935 --> 00:40:52.575
<v Speaker 1>you define

00:40:53.769 --> 00:40:56.890
<v Speaker 1>a an input, go let's go back to

00:40:57.210 --> 00:40:59.369
<v Speaker 1>that's a great exercise. Let's make this more

00:40:59.369 --> 00:41:01.930
<v Speaker 1>dynamic. Go to your Rawkode operation.

00:41:05.769 --> 00:41:08.010
<v Speaker 1>Does SpaceX ships? Does it if you if

00:41:08.010 --> 00:41:10.515
<v Speaker 1>you does it have any kind of input?

00:41:10.755 --> 00:41:12.755
<v Speaker 1>Like, can we can we

00:41:13.075 --> 00:41:15.395
<v Speaker 1>on ships, can we define any kind of

00:41:15.955 --> 00:41:16.835
<v Speaker 1>dynamic

00:41:17.155 --> 00:41:18.115
<v Speaker 1>parameter?

00:41:18.275 --> 00:41:18.915
<v Speaker 0>Let's see.

00:41:25.940 --> 00:41:29.300
<v Speaker 0>Yes. It's got find and it's got limits,

00:41:29.300 --> 00:41:31.300
<v Speaker 0>offsets, and sorts. So I guess we could

00:41:31.460 --> 00:41:33.060
<v Speaker 1>Let let let's just add a limit or

00:41:33.060 --> 00:41:33.380
<v Speaker 1>something.

00:41:36.015 --> 00:41:36.655
<v Speaker 0>Okay.

00:41:37.695 --> 00:41:40.655
<v Speaker 0>So let's test this works. Let's do limit

00:41:40.655 --> 00:41:41.535
<v Speaker 0>five.

00:41:42.575 --> 00:41:44.335
<v Speaker 1>No. We we need to define

00:41:44.575 --> 00:41:46.335
<v Speaker 1>a I I well, I just wanted to

00:41:46.335 --> 00:41:48.494
<v Speaker 0>make sure it worked in this API first.

00:41:48.494 --> 00:41:49.055
<v Speaker 1>Okay. Okay.

00:41:49.839 --> 00:41:52.320
<v Speaker 1>Right. Yeah. Okay. So this is our new

00:41:52.320 --> 00:41:53.200
<v Speaker 0>operation.

00:41:53.839 --> 00:41:54.640
<v Speaker 1>Make it

00:41:55.200 --> 00:41:57.359
<v Speaker 1>but not not hard code. Make it a

00:41:57.359 --> 00:42:00.320
<v Speaker 1>variable. So you define a variable after query.

00:42:00.320 --> 00:42:02.640
<v Speaker 1>Okay. You know GraphQL bit. Right? Yeah.

00:42:03.395 --> 00:42:05.555
<v Speaker 1>Are you not the variable starts with the

00:42:05.555 --> 00:42:06.115
<v Speaker 1>dollar. Yeah.

00:42:17.430 --> 00:42:19.510
<v Speaker 0>I I I can't remember the exact syntax,

00:42:19.510 --> 00:42:20.869
<v Speaker 0>but it seems to be yelling at you.

00:42:20.869 --> 00:42:23.590
<v Speaker 1>It is offset and then colon,

00:42:24.790 --> 00:42:26.950
<v Speaker 1>and I guess it needs to be int.

00:42:27.270 --> 00:42:29.030
<v Speaker 0>Oh, yeah. Okay. Cool.

00:42:31.350 --> 00:42:31.750
<v Speaker 0>Yes.

00:42:32.885 --> 00:42:34.085
<v Speaker 1>Is that correct?

00:42:34.325 --> 00:42:36.645
<v Speaker 0>It's just claiming that it's a

00:42:37.205 --> 00:42:38.885
<v Speaker 0>capital I. Capital I. Yep.

00:42:40.085 --> 00:42:40.725
<v Speaker 1>Okay.

00:42:40.885 --> 00:42:42.645
<v Speaker 1>And those are optional? Right.

00:42:44.100 --> 00:42:47.060
<v Speaker 1>Okay. Copy this into your Rawkode operation.

00:42:49.540 --> 00:42:52.260
<v Speaker 1>Okay. Save it. Now let's go to curl

00:42:52.260 --> 00:42:52.980
<v Speaker 1>and

00:42:55.460 --> 00:42:56.660
<v Speaker 1>run it again

00:42:57.505 --> 00:42:58.545
<v Speaker 1>like before.

00:42:58.625 --> 00:42:59.665
<v Speaker 1>Okay? And,

00:43:01.345 --> 00:43:03.505
<v Speaker 1>like, go cursor up

00:43:03.744 --> 00:43:05.425
<v Speaker 1>so we can type it again.

00:43:06.465 --> 00:43:08.385
<v Speaker 1>And then add a current parameter

00:43:08.625 --> 00:43:09.425
<v Speaker 1>offset,

00:43:09.425 --> 00:43:11.345
<v Speaker 1>for example, or whatever it was.

00:43:18.050 --> 00:43:19.810
<v Speaker 1>Did that work? May maybe we need to

00:43:19.810 --> 00:43:21.570
<v Speaker 1>do, like, limit, I think.

00:43:23.905 --> 00:43:25.265
<v Speaker 0>Yeah. Let's do one.

00:43:29.825 --> 00:43:30.465
<v Speaker 1>Yes.

00:43:31.425 --> 00:43:34.545
<v Speaker 1>So now we've created a rest API that

00:43:34.545 --> 00:43:37.770
<v Speaker 1>takes those parameters. Try to set limit equals

00:43:37.770 --> 00:43:38.410
<v Speaker 1>true.

00:43:46.250 --> 00:43:48.650
<v Speaker 1>That's a bad request because we have JSON

00:43:48.650 --> 00:43:51.655
<v Speaker 1>schema validation on this endpoint

00:43:52.055 --> 00:43:55.015
<v Speaker 1>that validates it must be a number.

00:43:56.775 --> 00:43:57.494
<v Speaker 0>Okay.

00:43:58.694 --> 00:44:00.855
<v Speaker 0>I wanna make sure I understand this correctly.

00:44:00.855 --> 00:44:02.855
<v Speaker 0>Every time we define an operation,

00:44:03.015 --> 00:44:04.375
<v Speaker 0>we're writing GraphQL

00:44:04.375 --> 00:44:07.020
<v Speaker 0>as a way to spec whatever APIs are

00:44:07.020 --> 00:44:10.060
<v Speaker 0>being stitched together by the API proxy.

00:44:10.620 --> 00:44:13.180
<v Speaker 0>Behind the scenes, this is actually generating

00:44:13.340 --> 00:44:13.980
<v Speaker 0>the

00:44:14.220 --> 00:44:15.180
<v Speaker 0>TypeScript

00:44:15.180 --> 00:44:16.860
<v Speaker 0>SDK or client

00:44:16.940 --> 00:44:18.860
<v Speaker 0>based on all of the type inferences that

00:44:18.860 --> 00:44:21.474
<v Speaker 0>can make against those different things, Which is

00:44:21.474 --> 00:44:22.835
<v Speaker 0>why we have the ability

00:44:23.635 --> 00:44:25.155
<v Speaker 0>to say from here

00:44:26.035 --> 00:44:26.915
<v Speaker 0>to

00:44:27.474 --> 00:44:29.475
<v Speaker 0>understand what this actually

00:44:30.035 --> 00:44:30.995
<v Speaker 0>returns.

00:44:31.474 --> 00:44:32.115
<v Speaker 0>I'm How

00:44:34.275 --> 00:44:35.075
<v Speaker 0>do I

00:44:35.950 --> 00:44:38.190
<v Speaker 0>can I add the limit as a query

00:44:38.190 --> 00:44:41.070
<v Speaker 0>parameter to Yeah? That that should be field.

00:44:41.070 --> 00:44:42.750
<v Speaker 1>It's called, I think, input.

00:44:44.830 --> 00:44:45.470
<v Speaker 0>Yep.

00:44:45.950 --> 00:44:48.270
<v Speaker 0>And it's all typed as well. That is

00:44:48.270 --> 00:44:48.910
<v Speaker 0>really cool.

00:44:51.885 --> 00:44:53.965
<v Speaker 0>I like that because then I could just

00:44:54.285 --> 00:44:55.645
<v Speaker 0>I I don't remember how to write code

00:44:55.645 --> 00:44:57.245
<v Speaker 0>anymore. I don't know if I say that

00:44:57.245 --> 00:44:59.645
<v Speaker 0>enough, but I rely on Versus code and

00:44:59.645 --> 00:45:01.965
<v Speaker 0>language server protocols and type systems

00:45:02.205 --> 00:45:03.965
<v Speaker 0>more now than ever. And I've been doing

00:45:03.965 --> 00:45:06.089
<v Speaker 0>this for twenty years. Like, it just I

00:45:06.089 --> 00:45:07.690
<v Speaker 0>I now just fall back on it because

00:45:07.690 --> 00:45:09.609
<v Speaker 0>it's just so easy, and it's usually smarter

00:45:09.609 --> 00:45:12.250
<v Speaker 0>than I am, which I really appreciate. So

00:45:13.609 --> 00:45:16.170
<v Speaker 1>yeah. But, you know, let let's say so

00:45:16.170 --> 00:45:17.289
<v Speaker 1>now we have this operation.

00:45:18.145 --> 00:45:20.465
<v Speaker 1>And let let's say the result

00:45:20.465 --> 00:45:21.985
<v Speaker 1>that we're getting back,

00:45:22.305 --> 00:45:24.465
<v Speaker 1>it is not making us happy. We we

00:45:24.465 --> 00:45:26.705
<v Speaker 1>want to customize it. We want to do

00:45:26.705 --> 00:45:27.265
<v Speaker 1>better.

00:45:29.665 --> 00:45:31.905
<v Speaker 1>We should go fully custom because we want

00:45:31.905 --> 00:45:34.330
<v Speaker 1>to manipulate the data before returning to the

00:45:34.330 --> 00:45:35.130
<v Speaker 1>client. Right?

00:45:35.530 --> 00:45:36.330
<v Speaker 1>Okay.

00:45:37.050 --> 00:45:38.090
<v Speaker 1>Let's create

00:45:38.650 --> 00:45:41.130
<v Speaker 1>a TypeScript function to do that.

00:45:41.530 --> 00:45:44.089
<v Speaker 1>So if we go to our operations directory.

00:45:46.345 --> 00:45:47.065
<v Speaker 0>Mhmm.

00:45:47.545 --> 00:45:49.705
<v Speaker 1>Create a TypeScript file

00:45:50.985 --> 00:45:53.305
<v Speaker 1>with a unique name we didn't use before,

00:45:53.305 --> 00:45:54.985
<v Speaker 1>so not Rawkode again.

00:45:56.345 --> 00:45:56.665
<v Speaker 1>And Jens.

00:45:58.390 --> 00:46:00.070
<v Speaker 1>Yance. Okay. Awesome.

00:46:01.910 --> 00:46:03.910
<v Speaker 1>And then you start typing

00:46:04.950 --> 00:46:05.830
<v Speaker 1>create

00:46:06.470 --> 00:46:07.750
<v Speaker 1>export default.

00:46:07.750 --> 00:46:10.150
<v Speaker 1>Sorry. That's a convention export default.

00:46:11.015 --> 00:46:12.535
<v Speaker 1>Create operation.

00:46:16.615 --> 00:46:17.975
<v Speaker 0>What's a create operation?

00:46:19.175 --> 00:46:20.855
<v Speaker 1>Just type create operation.

00:46:22.215 --> 00:46:24.855
<v Speaker 1>Yeah. Import this and then dot

00:46:25.730 --> 00:46:26.610
<v Speaker 1>query

00:46:28.450 --> 00:46:29.250
<v Speaker 1>and then

00:46:29.970 --> 00:46:30.770
<v Speaker 1>function

00:46:31.089 --> 00:46:33.970
<v Speaker 1>with input and stuff. Yeah. Make an object,

00:46:33.970 --> 00:46:36.370
<v Speaker 1>create a handler. It's an async func

00:46:36.609 --> 00:46:37.650
<v Speaker 1>that takes

00:46:38.530 --> 00:46:39.090
<v Speaker 1>yes.

00:46:39.935 --> 00:46:42.895
<v Speaker 0>Copilot is kind of driving. Copilot

00:46:43.055 --> 00:46:45.295
<v Speaker 1>is great. And return

00:46:46.415 --> 00:46:49.535
<v Speaker 1>an object like hello or whatever you want.

00:46:51.935 --> 00:46:55.359
<v Speaker 1>Okay. And save this. Uh-huh. Awesome. And go

00:46:55.359 --> 00:46:56.960
<v Speaker 1>to your front end

00:46:57.280 --> 00:46:58.160
<v Speaker 1>code

00:47:00.000 --> 00:47:01.520
<v Speaker 1>and call Jens

00:47:02.080 --> 00:47:03.280
<v Speaker 1>as operation name.

00:47:07.485 --> 00:47:09.725
<v Speaker 0>Now we're getting the the our inputs are

00:47:09.725 --> 00:47:10.605
<v Speaker 0>invalid.

00:47:11.085 --> 00:47:12.845
<v Speaker 0>I'm assuming because there's none. So

00:47:13.485 --> 00:47:15.725
<v Speaker 1>Just remove. Yeah. Okay. So does that mean

00:47:15.725 --> 00:47:17.245
<v Speaker 0>we can That's

00:47:17.245 --> 00:47:19.645
<v Speaker 1>our front end now. Yeah. Call it.

00:47:20.605 --> 00:47:21.645
<v Speaker 1>Let's call it. Yes.

00:47:25.780 --> 00:47:26.500
<v Speaker 0>Okay.

00:47:26.740 --> 00:47:29.140
<v Speaker 1>So before, we were like, okay.

00:47:29.460 --> 00:47:31.380
<v Speaker 1>We're talking API dependencies.

00:47:31.380 --> 00:47:33.300
<v Speaker 1>Now we want to build something custom.

00:47:34.655 --> 00:47:37.055
<v Speaker 1>And next step is you put it together.

00:47:37.055 --> 00:47:40.095
<v Speaker 1>So you go back to your Yen's function,

00:47:41.455 --> 00:47:42.015
<v Speaker 1>and

00:47:42.335 --> 00:47:44.015
<v Speaker 1>there you have the CTX.

00:47:44.095 --> 00:47:44.735
<v Speaker 1>So

00:47:45.135 --> 00:47:47.695
<v Speaker 1>make some room for a CTX dot

00:47:48.490 --> 00:47:49.930
<v Speaker 1>internal client

00:47:51.930 --> 00:47:52.810
<v Speaker 1>dot

00:47:55.130 --> 00:47:55.850
<v Speaker 1>query

00:47:56.250 --> 00:47:57.050
<v Speaker 1>queries

00:47:57.610 --> 00:47:58.490
<v Speaker 1>and then

00:47:58.650 --> 00:47:59.610
<v Speaker 1>Rawkode.

00:48:02.170 --> 00:48:04.810
<v Speaker 1>And that's

00:48:03.515 --> 00:48:04.795
<v Speaker 1>an async

00:48:05.355 --> 00:48:06.235
<v Speaker 1>thing.

00:48:06.475 --> 00:48:08.955
<v Speaker 1>Yeah. Limit to whatever you want. Okay.

00:48:10.795 --> 00:48:13.275
<v Speaker 1>And put it into an object, like, const

00:48:13.275 --> 00:48:14.315
<v Speaker 1>what you want,

00:48:15.915 --> 00:48:18.610
<v Speaker 1>and then you can do some manipulation.

00:48:26.050 --> 00:48:28.610
<v Speaker 0>It's yelling at me because it's the potential

00:48:28.610 --> 00:48:30.050
<v Speaker 0>undefeigned nature, obviously.

00:48:32.505 --> 00:48:33.945
<v Speaker 1>Ships is ships?

00:48:34.265 --> 00:48:37.224
<v Speaker 0>What I'll do is add just a response

00:48:37.305 --> 00:48:38.185
<v Speaker 0>data.

00:48:41.144 --> 00:48:42.025
<v Speaker 0>What's that?

00:48:43.785 --> 00:48:45.385
<v Speaker 0>Oh, it could be undefined.

00:48:46.184 --> 00:48:48.904
<v Speaker 0>Alright. Well, TypeScript is pretty smart. So as

00:48:48.240 --> 00:48:49.440
<v Speaker 0>long as we say,

00:48:52.400 --> 00:48:53.600
<v Speaker 0>return blah,

00:48:54.320 --> 00:48:56.000
<v Speaker 0>that frees this up.

00:48:58.800 --> 00:49:01.200
<v Speaker 0>And we can map over all the ships

00:49:04.585 --> 00:49:06.105
<v Speaker 0>and join.

00:49:07.144 --> 00:49:09.145
<v Speaker 0>But I could just join. I could not.

00:49:09.224 --> 00:49:10.665
<v Speaker 0>No. Because I need the name.

00:49:16.505 --> 00:49:18.640
<v Speaker 1>I think after ships, you need a question

00:49:18.640 --> 00:49:19.280
<v Speaker 1>mark.

00:49:21.280 --> 00:49:22.960
<v Speaker 0>But the map should work over and I

00:49:25.440 --> 00:49:27.040
<v Speaker 0>the map should work on an empty list.

00:49:27.040 --> 00:49:27.600
<v Speaker 0>Right?

00:49:28.560 --> 00:49:30.480
<v Speaker 1>But it's not an empty list.

00:49:30.720 --> 00:49:31.840
<v Speaker 1>It can be undefined.

00:49:33.825 --> 00:49:35.585
<v Speaker 0>Oh, yeah. Let's try calling this.

00:49:44.240 --> 00:49:46.240
<v Speaker 0>Alright. Let's change the limit.

00:49:52.079 --> 00:49:52.720
<v Speaker 0>Cool.

00:49:53.599 --> 00:49:57.440
<v Speaker 0>So using these completely TypeScript based handlers,

00:49:58.000 --> 00:49:59.839
<v Speaker 0>we can

00:49:59.345 --> 00:50:01.105
<v Speaker 0>call any of the other

00:50:01.345 --> 00:50:03.984
<v Speaker 0>queries through this internal client, which gives us

00:50:03.984 --> 00:50:05.905
<v Speaker 0>back the typed response. We can

00:50:06.545 --> 00:50:08.785
<v Speaker 0>mutate that data however we want and then

00:50:08.785 --> 00:50:10.305
<v Speaker 0>spread it straight back in.

00:50:10.704 --> 00:50:12.704
<v Speaker 0>That's pretty cool. Go to your front end

00:50:12.704 --> 00:50:13.265
<v Speaker 1>code.

00:50:15.560 --> 00:50:16.360
<v Speaker 1>Uh-huh.

00:50:18.040 --> 00:50:18.600
<v Speaker 1>And

00:50:18.840 --> 00:50:20.200
<v Speaker 1>add an input.

00:50:20.600 --> 00:50:22.680
<v Speaker 1>Like ah, no. We we don't yet have

00:50:22.680 --> 00:50:24.200
<v Speaker 1>an input. Right? Let's

00:50:24.360 --> 00:50:26.200
<v Speaker 1>let's go back to the to the function.

00:50:26.840 --> 00:50:29.080
<v Speaker 1>Let's go back to the function.

00:50:29.560 --> 00:50:29.880
<v Speaker 1>Yes.

00:50:32.095 --> 00:50:34.895
<v Speaker 1>Yeah. Add an input, and that's a

00:50:35.454 --> 00:50:38.974
<v Speaker 1>Zot object. So besides import, create operation, after

00:50:38.974 --> 00:50:41.775
<v Speaker 1>create operation, just add comma Zot.

00:50:45.770 --> 00:50:47.850
<v Speaker 1>Mhmm. And then create an object.

00:50:48.730 --> 00:50:50.090
<v Speaker 1>And here, we can

00:50:52.730 --> 00:50:54.570
<v Speaker 1>we we could make a limit, like and

00:50:54.570 --> 00:50:56.010
<v Speaker 1>make it a number. Right?

00:50:57.849 --> 00:50:59.685
<v Speaker 1>Yeah. Z number.

00:51:00.165 --> 00:51:03.525
<v Speaker 1>Okay. And then instead of passing five, pass

00:51:03.525 --> 00:51:04.965
<v Speaker 1>CTX input

00:51:06.805 --> 00:51:07.445
<v Speaker 1>limit.

00:51:07.845 --> 00:51:08.565
<v Speaker 1>Yep.

00:51:10.245 --> 00:51:11.285
<v Speaker 1>Go to your front end.

00:51:15.310 --> 00:51:17.550
<v Speaker 1>And add the input object.

00:51:19.230 --> 00:51:19.950
<v Speaker 1>Okay.

00:51:20.110 --> 00:51:20.590
<v Speaker 1>Submit.

00:51:23.565 --> 00:51:25.085
<v Speaker 1>Does our front end work?

00:51:25.565 --> 00:51:26.765
<v Speaker 0>No. Because

00:51:27.565 --> 00:51:29.085
<v Speaker 0>we changed the data structure.

00:51:29.805 --> 00:51:30.525
<v Speaker 1>Oh.

00:51:32.045 --> 00:51:34.045
<v Speaker 0>Although it's actually not complaining about the data

00:51:34.045 --> 00:51:35.724
<v Speaker 0>structure. It's complaining about

00:51:38.000 --> 00:51:40.080
<v Speaker 0>random other stuff. So maybe it does work.

00:51:40.080 --> 00:51:41.359
<v Speaker 0>How do I get to the front end?

00:51:41.359 --> 00:51:42.000
<v Speaker 0>It was

00:51:43.119 --> 00:51:44.400
<v Speaker 1>Local host

00:51:44.480 --> 00:51:45.680
<v Speaker 1>CK, I think.

00:51:53.125 --> 00:51:54.325
<v Speaker 0>Yeah. It's working.

00:51:54.805 --> 00:51:55.525
<v Speaker 1>Okay.

00:51:56.085 --> 00:51:57.845
<v Speaker 1>And now something interesting

00:51:58.405 --> 00:51:59.445
<v Speaker 1>that we

00:52:01.125 --> 00:52:03.605
<v Speaker 1>where we took some inspiration from tRPC.

00:52:03.765 --> 00:52:06.485
<v Speaker 1>If you go back to your function

00:52:08.410 --> 00:52:10.570
<v Speaker 1>where we call it the the input

00:52:11.850 --> 00:52:14.570
<v Speaker 1>for example, if you change number

00:52:14.570 --> 00:52:16.730
<v Speaker 1>just out of like, it doesn't make sense,

00:52:16.730 --> 00:52:18.330
<v Speaker 1>but change number to stream

00:52:19.770 --> 00:52:21.610
<v Speaker 1>and go to your front end code

00:52:23.845 --> 00:52:25.685
<v Speaker 1>no. The front end code. Sorry.

00:52:28.325 --> 00:52:29.765
<v Speaker 1>And go to the input.

00:52:30.484 --> 00:52:33.365
<v Speaker 1>You will see it pops an arrow immediately,

00:52:33.765 --> 00:52:34.805
<v Speaker 1>and that's

00:52:34.964 --> 00:52:37.125
<v Speaker 1>because we're exposing

00:52:38.010 --> 00:52:38.810
<v Speaker 1>or

00:52:38.810 --> 00:52:40.010
<v Speaker 1>we infer

00:52:40.250 --> 00:52:41.770
<v Speaker 1>the TypeScript types

00:52:42.170 --> 00:52:43.210
<v Speaker 1>from the

00:52:43.530 --> 00:52:45.370
<v Speaker 1>Zot object definition,

00:52:46.170 --> 00:52:48.410
<v Speaker 1>and we export it with

00:52:49.450 --> 00:52:50.570
<v Speaker 1>export type

00:52:51.210 --> 00:52:53.815
<v Speaker 1>and import type into the front end behind

00:52:53.815 --> 00:52:55.735
<v Speaker 1>the scenes. Like, you didn't see that. If

00:52:55.735 --> 00:52:57.655
<v Speaker 1>you look into generated

00:52:57.655 --> 00:52:59.735
<v Speaker 1>Next. Js, you will see it actually.

00:53:00.055 --> 00:53:02.615
<v Speaker 1>But we have a direct connection between

00:53:02.935 --> 00:53:04.935
<v Speaker 1>front end code and and back end code,

00:53:04.935 --> 00:53:06.615
<v Speaker 1>and that gives you this immediate

00:53:07.050 --> 00:53:09.770
<v Speaker 1>feedback loop if you're creating TypeScript functions.

00:53:09.930 --> 00:53:11.610
<v Speaker 0>Yeah. That's one of those big selling points

00:53:11.610 --> 00:53:14.170
<v Speaker 0>about tRPC that people always rave about is

00:53:14.170 --> 00:53:16.330
<v Speaker 0>the fact that you get this consistency

00:53:16.330 --> 00:53:17.770
<v Speaker 0>across the types

00:53:18.010 --> 00:53:19.450
<v Speaker 0>for back end and front end. And it

00:53:19.450 --> 00:53:20.090
<v Speaker 0>is it's

00:53:21.045 --> 00:53:22.485
<v Speaker 0>Yeah. Very cool.

00:53:23.205 --> 00:53:25.765
<v Speaker 1>So what what you get here is a

00:53:25.765 --> 00:53:26.485
<v Speaker 1>smooth

00:53:26.805 --> 00:53:28.325
<v Speaker 1>transition between

00:53:28.964 --> 00:53:30.485
<v Speaker 1>oh, I just create

00:53:31.125 --> 00:53:31.525
<v Speaker 1>I

00:53:32.900 --> 00:53:34.740
<v Speaker 1>I I just create a

00:53:36.100 --> 00:53:38.100
<v Speaker 1>graph to operation. That's enough.

00:53:38.820 --> 00:53:40.820
<v Speaker 1>Until you reach a point where you say,

00:53:40.980 --> 00:53:42.580
<v Speaker 1>it needs to be customized. I need to

00:53:42.580 --> 00:53:44.580
<v Speaker 1>call five APIs and combine them in a

00:53:44.580 --> 00:53:46.315
<v Speaker 1>certain way, and I want to manipulate the

00:53:46.315 --> 00:53:47.755
<v Speaker 1>data because it's not in the right shape

00:53:47.755 --> 00:53:49.035
<v Speaker 1>we need for the front end.

00:53:49.595 --> 00:53:50.715
<v Speaker 1>And then you go

00:53:50.955 --> 00:53:52.315
<v Speaker 1>the TypeScript route,

00:53:52.475 --> 00:53:54.795
<v Speaker 1>and you can always choose, like, what is

00:53:54.795 --> 00:53:56.155
<v Speaker 1>the way to go. But you see from

00:53:56.155 --> 00:53:57.515
<v Speaker 1>the front end experience,

00:53:57.755 --> 00:53:59.195
<v Speaker 1>like, front end client,

00:53:59.515 --> 00:54:01.950
<v Speaker 1>it doesn't didn't change a bit. It is

00:54:01.950 --> 00:54:04.590
<v Speaker 1>the same experience, and that's what we're trying

00:54:04.590 --> 00:54:06.830
<v Speaker 1>to do. We try to make a very

00:54:06.830 --> 00:54:07.470
<v Speaker 1>smooth

00:54:07.710 --> 00:54:10.110
<v Speaker 1>transition between I'm just calling a service and

00:54:10.110 --> 00:54:12.270
<v Speaker 1>it's fine. The way the data comes back

00:54:12.270 --> 00:54:13.150
<v Speaker 1>is okay.

00:54:13.310 --> 00:54:14.990
<v Speaker 1>Two, I need to build something custom.

00:54:15.825 --> 00:54:18.224
<v Speaker 1>But from a client perspective, it's the same

00:54:18.224 --> 00:54:21.025
<v Speaker 1>interface. Nothing new to learn, nothing to change.

00:54:23.185 --> 00:54:23.825
<v Speaker 0>Yeah.

00:54:24.385 --> 00:54:25.185
<v Speaker 0>It's

00:54:25.345 --> 00:54:27.665
<v Speaker 0>it's really interesting because WunderGraph

00:54:27.665 --> 00:54:29.825
<v Speaker 0>is in this space where I can't really

00:54:29.825 --> 00:54:30.625
<v Speaker 0>work out

00:54:31.299 --> 00:54:33.460
<v Speaker 0>who it competes with because it does so

00:54:33.460 --> 00:54:34.500
<v Speaker 0>much. Like,

00:54:35.940 --> 00:54:36.740
<v Speaker 0>do you,

00:54:37.299 --> 00:54:38.900
<v Speaker 0>you know, as a founder,

00:54:38.900 --> 00:54:41.700
<v Speaker 0>right, do you see WunderGraph as competing with

00:54:41.700 --> 00:54:44.740
<v Speaker 0>the likes of Hasura or with TRPC

00:54:44.740 --> 00:54:47.565
<v Speaker 0>with with both with Take? Like,

00:54:47.885 --> 00:54:49.325
<v Speaker 0>what where do you where do you position

00:54:49.325 --> 00:54:50.925
<v Speaker 0>it? Where do you feel that this is?

00:54:53.485 --> 00:54:55.245
<v Speaker 0>This is a WunderGraph question.

00:54:55.965 --> 00:54:56.685
<v Speaker 1>WunderGraph

00:54:56.845 --> 00:54:58.365
<v Speaker 1>is in the category

00:54:58.525 --> 00:55:00.125
<v Speaker 1>where you collapse

00:55:01.000 --> 00:55:03.640
<v Speaker 1>seven tools into one, and you're like

00:55:03.960 --> 00:55:05.000
<v Speaker 0>Yeah. I

00:55:05.720 --> 00:55:06.440
<v Speaker 1>you know?

00:55:07.320 --> 00:55:08.760
<v Speaker 1>So I'm now,

00:55:09.160 --> 00:55:11.400
<v Speaker 1>I don't know, more than ten years in

00:55:11.400 --> 00:55:12.520
<v Speaker 1>in IT,

00:55:13.160 --> 00:55:15.000
<v Speaker 1>and I learned so many things about,

00:55:15.755 --> 00:55:17.595
<v Speaker 1>this is what I said before, why I

00:55:17.595 --> 00:55:19.755
<v Speaker 1>created WunderGraph. So many things I hate

00:55:20.075 --> 00:55:20.795
<v Speaker 1>doing,

00:55:22.155 --> 00:55:24.155
<v Speaker 1>because it's boring and repetitive.

00:55:24.475 --> 00:55:27.035
<v Speaker 1>And WunderGraph is the result that gives you

00:55:27.035 --> 00:55:28.475
<v Speaker 1>in the end the stack

00:55:29.035 --> 00:55:31.670
<v Speaker 1>where you where you don't have to do

00:55:31.670 --> 00:55:33.349
<v Speaker 1>the the mundane

00:55:33.430 --> 00:55:35.670
<v Speaker 1>things again. Like, you know, the way we

00:55:35.670 --> 00:55:38.790
<v Speaker 1>just transitioned between TypeScript and GraphQL,

00:55:40.150 --> 00:55:42.555
<v Speaker 1>the same way you could now add an

00:55:42.555 --> 00:55:45.355
<v Speaker 1>OpenID Connect provider like all zero,

00:55:45.994 --> 00:55:46.555
<v Speaker 1>and

00:55:47.115 --> 00:55:48.875
<v Speaker 1>then you have authentication.

00:55:49.115 --> 00:55:50.395
<v Speaker 1>And what is special

00:55:50.795 --> 00:55:52.635
<v Speaker 1>about WunderGraph here is

00:55:53.515 --> 00:55:56.609
<v Speaker 1>we kind of, in some way, like obviously,

00:55:56.609 --> 00:55:59.010
<v Speaker 1>it's not the the main purpose, but we

00:55:59.010 --> 00:56:01.570
<v Speaker 1>are similar to something like Firebase,

00:56:01.970 --> 00:56:03.090
<v Speaker 1>but we don't

00:56:03.490 --> 00:56:04.450
<v Speaker 1>dictate

00:56:04.849 --> 00:56:08.025
<v Speaker 1>a specific back end. You can you can

00:56:08.025 --> 00:56:10.025
<v Speaker 1>say, I have my GraphQL. I have my

00:56:10.025 --> 00:56:11.545
<v Speaker 1>REST. I have my database.

00:56:12.025 --> 00:56:14.025
<v Speaker 1>We don't tell you where those need to

00:56:14.025 --> 00:56:15.545
<v Speaker 1>be and which provider.

00:56:15.785 --> 00:56:17.945
<v Speaker 1>We also don't tell you what authentication

00:56:18.984 --> 00:56:21.385
<v Speaker 1>provider to use. It could be Azure. It

00:56:21.385 --> 00:56:22.105
<v Speaker 1>could be Clerk.

00:56:23.010 --> 00:56:25.970
<v Speaker 1>With WunderGraph, you can glue it together

00:56:26.450 --> 00:56:27.810
<v Speaker 1>in a coherent

00:56:28.290 --> 00:56:29.730
<v Speaker 1>developer experience

00:56:29.970 --> 00:56:31.170
<v Speaker 1>that feels like

00:56:31.810 --> 00:56:33.410
<v Speaker 1>it is Firebase,

00:56:33.650 --> 00:56:35.330
<v Speaker 1>but the components

00:56:34.895 --> 00:56:37.615
<v Speaker 1>can be anything that you bring.

00:56:38.175 --> 00:56:39.295
<v Speaker 1>And so we

00:56:39.775 --> 00:56:42.575
<v Speaker 1>we're kind of like an anti vendor login

00:56:42.815 --> 00:56:44.255
<v Speaker 1>login tool.

00:56:44.655 --> 00:56:46.974
<v Speaker 1>At the same time, it feels like we

00:56:46.974 --> 00:56:49.260
<v Speaker 1>are a vendor lock in tool

00:56:49.420 --> 00:56:52.460
<v Speaker 1>because it feels like it's one experience,

00:56:53.100 --> 00:56:55.020
<v Speaker 1>but you can bring the components,

00:56:55.660 --> 00:56:57.580
<v Speaker 1>you know, if that makes sense.

00:56:59.340 --> 00:57:00.060
<v Speaker 0>Yeah. Definitely.

00:57:02.454 --> 00:57:03.095
<v Speaker 0>So

00:57:04.615 --> 00:57:06.135
<v Speaker 0>I'm trying to think of some

00:57:06.695 --> 00:57:08.535
<v Speaker 0>use cases that I think are quite novel

00:57:08.535 --> 00:57:09.895
<v Speaker 0>and interesting here.

00:57:10.214 --> 00:57:12.455
<v Speaker 0>One of the things that always frustrates me

00:57:12.615 --> 00:57:13.495
<v Speaker 0>about

00:57:13.974 --> 00:57:15.095
<v Speaker 0>GraphQL

00:57:15.335 --> 00:57:16.295
<v Speaker 0>is

00:57:17.950 --> 00:57:19.390
<v Speaker 0>aggregate root functions,

00:57:19.550 --> 00:57:21.630
<v Speaker 0>like trying to get counts while creating data.

00:57:21.630 --> 00:57:24.270
<v Speaker 0>I think it's very difficult to kind of

00:57:24.270 --> 00:57:25.630
<v Speaker 0>stitch those things together.

00:57:25.870 --> 00:57:27.150
<v Speaker 0>I'm curious, can we

00:57:27.550 --> 00:57:29.950
<v Speaker 0>can we try and do that with WunderGraph

00:57:29.950 --> 00:57:31.835
<v Speaker 0>and see what others like? What I mean

00:57:31.835 --> 00:57:33.915
<v Speaker 0>is what I'd really love to be able

00:57:33.915 --> 00:57:35.755
<v Speaker 0>to do and this might be so easy

00:57:35.755 --> 00:57:38.395
<v Speaker 0>that you're just gonna go like, sure. But

00:57:38.395 --> 00:57:40.955
<v Speaker 0>what if we query all the dragons,

00:57:41.835 --> 00:57:43.115
<v Speaker 0>get in their names,

00:57:44.155 --> 00:57:45.595
<v Speaker 0>but also return

00:57:46.420 --> 00:57:47.220
<v Speaker 0>the

00:57:47.300 --> 00:57:50.260
<v Speaker 0>number of active dragons as well as the

00:57:50.260 --> 00:57:52.180
<v Speaker 0>number of total dragons. Like

00:57:52.820 --> 00:57:54.260
<v Speaker 0>to me, if I were doing this with

00:57:54.260 --> 00:57:55.700
<v Speaker 0>GraphQL, it would be a bit of a

00:57:55.700 --> 00:57:56.340
<v Speaker 0>pain.

00:57:56.900 --> 00:57:58.500
<v Speaker 0>I'm curious if we can make that a

00:57:58.500 --> 00:57:59.220
<v Speaker 0>nice

00:57:59.460 --> 00:58:02.285
<v Speaker 0>API with Wunder Graph. Does that make sense?

00:58:04.285 --> 00:58:06.445
<v Speaker 1>Yeah. I get it. But

00:58:06.924 --> 00:58:09.005
<v Speaker 1>I I would love to show off

00:58:09.484 --> 00:58:11.484
<v Speaker 1>one feature of WunderGraph.

00:58:11.484 --> 00:58:14.365
<v Speaker 1>Maybe we can do a cross API join.

00:58:16.000 --> 00:58:17.119
<v Speaker 0>That sounds

00:58:17.119 --> 00:58:19.520
<v Speaker 0>even more exciting. Let's do that.

00:58:21.200 --> 00:58:21.839
<v Speaker 1>Okay.

00:58:22.960 --> 00:58:25.520
<v Speaker 1>Can you go to the WunderGraph config TS?

00:58:26.640 --> 00:58:28.640
<v Speaker 1>Want to check if we have the dependencies

00:58:28.640 --> 00:58:29.039
<v Speaker 1>we need.

00:58:30.935 --> 00:58:33.095
<v Speaker 1>Okay. We have countries. We have better. Okay.

00:58:33.095 --> 00:58:34.055
<v Speaker 1>Let's create

00:58:34.375 --> 00:58:36.455
<v Speaker 1>a new operation. We call it join.

00:58:39.895 --> 00:58:42.615
<v Speaker 0>Alright. Is that a TypeScript or GraphQL operation?

00:58:42.775 --> 00:58:43.655
<v Speaker 1>GraphQL.

00:58:49.340 --> 00:58:52.140
<v Speaker 1>Okay. And let's start with countries.

00:58:54.380 --> 00:58:56.234
<v Speaker 1>Countries and then countries.

00:58:57.194 --> 00:59:00.474
<v Speaker 1>No. Just do countries country. Otherwise, I don't

00:59:00.474 --> 00:59:02.315
<v Speaker 1>want to make too many API calls.

00:59:02.954 --> 00:59:03.595
<v Speaker 1>Yeah.

00:59:03.755 --> 00:59:04.474
<v Speaker 1>Country.

00:59:04.795 --> 00:59:06.555
<v Speaker 1>ID, name, and capital.

00:59:11.150 --> 00:59:13.390
<v Speaker 0>Alright. So don't think IDs are too much.

00:59:14.350 --> 00:59:16.350
<v Speaker 1>Yeah. ID is cool. And it takes a

00:59:16.350 --> 00:59:19.150
<v Speaker 1>parameter, I think, the country code.

00:59:19.870 --> 00:59:21.550
<v Speaker 1>Yeah. Code. Make that a variable.

00:59:30.705 --> 00:59:33.345
<v Speaker 1>I think it's ID capital ID.

00:59:36.990 --> 00:59:37.790
<v Speaker 0>No.

00:59:38.270 --> 00:59:40.350
<v Speaker 1>No. No. The instead of string, it should

00:59:40.350 --> 00:59:42.990
<v Speaker 1>be capital ID. Oh, sorry. Alright. Okay.

00:59:46.190 --> 00:59:49.310
<v Speaker 1>Yeah. ID is a very weird scalar in

00:59:49.310 --> 00:59:51.965
<v Speaker 1>GraphQL because it can be according to the

00:59:51.965 --> 00:59:52.765
<v Speaker 1>specification,

00:59:52.765 --> 00:59:54.845
<v Speaker 1>it can be a string or a number.

00:59:55.245 --> 00:59:55.805
<v Speaker 1>Like,

00:59:56.205 --> 00:59:57.565
<v Speaker 1>it's kind of like a union.

00:59:58.045 --> 01:00:00.365
<v Speaker 1>You know, we we we're talking about input

01:00:00.365 --> 01:00:03.645
<v Speaker 1>unions for seven hundred years already, and they

01:00:03.645 --> 01:00:05.420
<v Speaker 1>still are not in the spec. But we

01:00:05.420 --> 01:00:07.500
<v Speaker 1>already have an input union, which is ID.

01:00:07.500 --> 01:00:08.300
<v Speaker 1>It can be

01:00:08.620 --> 01:00:09.740
<v Speaker 1>int or,

01:00:10.940 --> 01:00:13.020
<v Speaker 1>yeah, number or string. Okay. So that's our

01:00:13.020 --> 01:00:16.220
<v Speaker 1>starting point. Let's curl it. Or no. You

01:00:16.220 --> 01:00:19.035
<v Speaker 1>installed Postman. Let's Postman it.

01:00:19.755 --> 01:00:21.435
<v Speaker 1>Now it's time for Postman.

01:00:31.035 --> 01:00:31.435
<v Speaker 1>Okay.

01:00:33.680 --> 01:00:34.800
<v Speaker 1>Click import.

01:00:37.279 --> 01:00:38.960
<v Speaker 0>I've never just put some before. Give me

01:00:38.960 --> 01:00:41.200
<v Speaker 0>a moment. Where's import? Oh, there we go.

01:00:41.200 --> 01:00:44.640
<v Speaker 1>Oh, yeah. There. And select our generated

01:00:44.640 --> 01:00:45.520
<v Speaker 1>directory

01:00:45.520 --> 01:00:48.079
<v Speaker 1>from our project in the examples

01:00:48.444 --> 01:00:49.085
<v Speaker 1>thingy.

01:01:12.100 --> 01:01:15.060
<v Speaker 0>What's it called? Dot oh, dot WunderGraph. Right?

01:01:16.420 --> 01:01:16.900
<v Speaker 1>Yep.

01:01:17.355 --> 01:01:18.555
<v Speaker 0>It's not finding it.

01:01:21.435 --> 01:01:23.995
<v Speaker 1>Are you in the directory of the project?

01:01:25.195 --> 01:01:27.115
<v Speaker 0>No. It's in the examples. Yeah. Yeah. Alright.

01:01:27.115 --> 01:01:27.995
<v Speaker 0>Okay. Yeah. Yeah.

01:01:28.715 --> 01:01:31.915
<v Speaker 1>Examples then types Next. Js TypeScript functions, I

01:01:31.915 --> 01:01:32.075
<v Speaker 1>think.

01:01:40.450 --> 01:01:42.290
<v Speaker 0>Generate

01:01:42.290 --> 01:01:42.850
<v Speaker 0>it.

01:01:43.250 --> 01:01:45.010
<v Speaker 0>So the whole generated directory?

01:01:45.890 --> 01:01:48.210
<v Speaker 1>No. Generate it. There should be some file

01:01:48.690 --> 01:01:51.615
<v Speaker 1>a JSON file with Postman in the name.

01:01:51.615 --> 01:01:54.735
<v Speaker 1>Like, I don't know, something postman collection. Directory,

01:01:54.735 --> 01:01:56.015
<v Speaker 0>so maybe we need to do this.

01:02:02.270 --> 01:02:03.310
<v Speaker 0>Oh, come on.

01:02:04.430 --> 01:02:06.670
<v Speaker 0>How do we show dot files on this

01:02:06.670 --> 01:02:07.390
<v Speaker 0>thing?

01:02:09.630 --> 01:02:11.630
<v Speaker 1>Control shift dot.

01:02:11.790 --> 01:02:12.430
<v Speaker 0>Control.

01:02:15.045 --> 01:02:15.845
<v Speaker 0>Alright.

01:02:19.045 --> 01:02:20.085
<v Speaker 0>No. I don't think it

01:02:24.724 --> 01:02:26.085
<v Speaker 0>I'm gonna Google it.

01:02:26.405 --> 01:02:29.690
<v Speaker 0>Mac OS finder tool dot files.

01:02:32.010 --> 01:02:33.849
<v Speaker 1>Or is it command shift dot?

01:02:40.329 --> 01:02:41.049
<v Speaker 1>Let me check.

01:02:43.184 --> 01:02:45.185
<v Speaker 0>Maybe it just doesn't work in this little.

01:02:46.625 --> 01:02:48.464
<v Speaker 0>Was let's drag it in.

01:02:48.865 --> 01:02:50.625
<v Speaker 1>Yeah. You can drag it also.

01:02:51.744 --> 01:02:53.904
<v Speaker 0>Who'd have thought Mac OS finder would be

01:02:53.904 --> 01:02:54.464
<v Speaker 0>our downfall?

01:03:00.230 --> 01:03:02.150
<v Speaker 0>Yeah. It's okay. So dot fails work from

01:03:02.150 --> 01:03:04.790
<v Speaker 0>here. Just not in that little thing. Okay.

01:03:04.790 --> 01:03:05.830
<v Speaker 0>So generated

01:03:06.870 --> 01:03:09.110
<v Speaker 0>and then we wanna post man JSON.

01:03:09.590 --> 01:03:10.470
<v Speaker 1>Yeah. That's good.

01:03:13.925 --> 01:03:17.605
<v Speaker 1>Cool. And then pop up WunderGraph queries.

01:03:18.325 --> 01:03:19.765
<v Speaker 1>And what was

01:03:20.405 --> 01:03:22.725
<v Speaker 1>is it to join? Okay. And now you

01:03:22.725 --> 01:03:23.045
<v Speaker 1>can call.

01:03:26.680 --> 01:03:28.760
<v Speaker 1>Ah, yeah. You need to click the button

01:03:28.760 --> 01:03:29.560
<v Speaker 1>for code

01:03:30.680 --> 01:03:31.800
<v Speaker 1>and put

01:03:32.520 --> 01:03:33.560
<v Speaker 1>some code.

01:03:33.880 --> 01:03:34.600
<v Speaker 1>Okay.

01:03:35.560 --> 01:03:36.760
<v Speaker 1>We have London.

01:03:36.920 --> 01:03:40.005
<v Speaker 1>That's the starting point. So that that's that's

01:03:40.005 --> 01:03:42.244
<v Speaker 1>for the people who like to share an

01:03:42.244 --> 01:03:43.685
<v Speaker 1>API they've created.

01:03:44.005 --> 01:03:45.205
<v Speaker 1>So WunderGraph,

01:03:45.205 --> 01:03:48.005
<v Speaker 1>by default, creates a Postman collection in the

01:03:48.005 --> 01:03:50.885
<v Speaker 1>generated folder from all your operations. In that

01:03:50.885 --> 01:03:53.700
<v Speaker 1>way, you can send the Postman collection to

01:03:53.700 --> 01:03:55.860
<v Speaker 1>your to your users, and now you can

01:03:56.260 --> 01:03:57.780
<v Speaker 1>they can explore your

01:03:58.660 --> 01:04:00.500
<v Speaker 1>your REST API you created.

01:04:01.540 --> 01:04:03.620
<v Speaker 0>Nice. I like it. So now we're gonna

01:04:03.620 --> 01:04:06.385
<v Speaker 0>add the weather to this. Right? Yeah. Now

01:04:06.385 --> 01:04:09.424
<v Speaker 1>now we want weather for a capital. So

01:04:09.424 --> 01:04:10.865
<v Speaker 1>after codes,

01:04:11.025 --> 01:04:13.425
<v Speaker 1>you make a little space, and we need

01:04:14.144 --> 01:04:16.385
<v Speaker 1>new variable, which is going to be no.

01:04:16.385 --> 01:04:19.105
<v Speaker 1>After code in the in the variable definition.

01:04:19.105 --> 01:04:22.369
<v Speaker 1>Yeah. We make a city variable, which is

01:04:22.369 --> 01:04:23.090
<v Speaker 1>a string.

01:04:24.930 --> 01:04:27.810
<v Speaker 1>And after the variable, we type an at

01:04:29.650 --> 01:04:30.369
<v Speaker 1>at

01:04:30.609 --> 01:04:31.250
<v Speaker 1>internal.

01:04:33.075 --> 01:04:36.115
<v Speaker 1>No. Not internal operation, just at internal.

01:04:37.555 --> 01:04:39.955
<v Speaker 1>Yes. Okay. That makes

01:04:40.355 --> 01:04:43.075
<v Speaker 1>that's something it's a it's a convention. But

01:04:43.075 --> 01:04:45.234
<v Speaker 1>this means we now have a space

01:04:46.580 --> 01:04:48.020
<v Speaker 1>to store something.

01:04:48.260 --> 01:04:50.820
<v Speaker 1>And after capital in line four,

01:04:50.980 --> 01:04:53.540
<v Speaker 1>you can now write at export

01:04:55.060 --> 01:04:55.860
<v Speaker 1>right

01:04:55.860 --> 01:04:56.580
<v Speaker 1>behind

01:04:56.900 --> 01:04:58.740
<v Speaker 1>capital

01:05:00.185 --> 01:05:02.345
<v Speaker 1>In line four after Capital.

01:05:04.185 --> 01:05:05.545
<v Speaker 1>Not before, after.

01:05:06.745 --> 01:05:07.465
<v Speaker 1>Sorry.

01:05:07.785 --> 01:05:09.705
<v Speaker 0>Bet you went through it. Done the typing,

01:05:09.705 --> 01:05:10.185
<v Speaker 0>though.

01:05:10.665 --> 01:05:14.185
<v Speaker 1>Yeah. It's a it's a yes. Just follow

01:05:14.960 --> 01:05:15.760
<v Speaker 1>Postman.

01:05:16.720 --> 01:05:17.680
<v Speaker 0>Copilot.

01:05:17.760 --> 01:05:21.440
<v Speaker 1>Copilot. Yes. So when we execute the field

01:05:21.440 --> 01:05:22.480
<v Speaker 1>capital,

01:05:22.960 --> 01:05:24.160
<v Speaker 1>we export

01:05:24.799 --> 01:05:26.160
<v Speaker 1>the value into

01:05:27.055 --> 01:05:29.695
<v Speaker 1>the variable. Oh, not capital, but city.

01:05:29.935 --> 01:05:31.535
<v Speaker 1>Export it into city.

01:05:32.015 --> 01:05:32.735
<v Speaker 1>Okay.

01:05:32.895 --> 01:05:34.895
<v Speaker 1>And now we use another

01:05:35.135 --> 01:05:37.935
<v Speaker 1>feature that is WunderGraph specific.

01:05:38.175 --> 01:05:41.055
<v Speaker 1>So make a new line after line four

01:05:43.250 --> 01:05:45.330
<v Speaker 1>and type underscore join.

01:05:46.530 --> 01:05:47.250
<v Speaker 1>Yes.

01:05:47.410 --> 01:05:49.890
<v Speaker 1>And then, like, braces and stuff.

01:05:50.530 --> 01:05:52.210
<v Speaker 1>And what it does is

01:05:52.370 --> 01:05:54.050
<v Speaker 1>join embeds

01:05:54.050 --> 01:05:56.770
<v Speaker 1>a second query type. Like, remove this on

01:05:56.770 --> 01:05:57.865
<v Speaker 1>stuff. It's wrong.

01:05:58.265 --> 01:05:58.905
<v Speaker 1>Like

01:05:59.065 --> 01:06:02.745
<v Speaker 1>yeah. So this embeds a second query

01:06:02.905 --> 01:06:05.385
<v Speaker 1>into the first. So now you can start

01:06:05.385 --> 01:06:06.585
<v Speaker 1>with weather.

01:06:08.265 --> 01:06:10.665
<v Speaker 1>Weather gets city by name,

01:06:11.065 --> 01:06:12.105
<v Speaker 1>and then,

01:06:14.849 --> 01:06:16.610
<v Speaker 1>yeah, just pick some fields.

01:06:16.770 --> 01:06:17.410
<v Speaker 1>Weather,

01:06:19.329 --> 01:06:21.570
<v Speaker 1>blah blah, summary, temperature.

01:06:21.570 --> 01:06:23.730
<v Speaker 1>I think you need to select on summary.

01:06:26.690 --> 01:06:27.490
<v Speaker 1>Description.

01:06:27.570 --> 01:06:27.890
<v Speaker 1>Yep.

01:06:29.305 --> 01:06:30.425
<v Speaker 1>Icon title.

01:06:43.720 --> 01:06:44.840
<v Speaker 0>This is Yep.

01:06:48.920 --> 01:06:51.319
<v Speaker 1>Wind. Okay. We get it. I have a

01:06:51.319 --> 01:06:52.680
<v Speaker 0>query. Cool.

01:06:53.235 --> 01:06:55.075
<v Speaker 1>Okay. Save this. I don't have to look

01:06:55.075 --> 01:06:57.715
<v Speaker 0>up any documentation for this API whatsoever. I

01:06:57.715 --> 01:06:59.795
<v Speaker 0>was just all complete in my way through

01:06:59.795 --> 01:07:02.595
<v Speaker 0>every moment. That that's that's fun. And by

01:07:02.595 --> 01:07:04.035
<v Speaker 1>the way, the more you use

01:07:05.475 --> 01:07:06.675
<v Speaker 1>the more you use

01:07:07.795 --> 01:07:10.570
<v Speaker 1>Copilot for this, like, for me, I don't

01:07:10.570 --> 01:07:12.330
<v Speaker 1>know why, but for me, it's

01:07:12.330 --> 01:07:15.050
<v Speaker 1>auto completes weather and stuff automatically.

01:07:15.050 --> 01:07:17.530
<v Speaker 1>Like, it somehow knows about these APIs already.

01:07:19.050 --> 01:07:21.370
<v Speaker 0>Okay. So let's go back to Postman?

01:07:22.010 --> 01:07:22.650
<v Speaker 1>Yes.

01:07:22.970 --> 01:07:23.849
<v Speaker 1>And just call it.

01:07:27.695 --> 01:07:28.815
<v Speaker 1>Yeah. That's it.

01:07:29.295 --> 01:07:31.295
<v Speaker 1>We joined two APIs.

01:07:34.975 --> 01:07:35.455
<v Speaker 0>Nice.

01:07:39.480 --> 01:07:40.920
<v Speaker 0>It's almost like magic.

01:07:42.040 --> 01:07:42.760
<v Speaker 1>Almost.

01:07:43.240 --> 01:07:45.960
<v Speaker 1>Like, it's it's kinda like a join, but

01:07:45.960 --> 01:07:48.200
<v Speaker 1>not tables, but across APIs.

01:07:49.640 --> 01:07:51.640
<v Speaker 0>Yeah. And it just reflects the structure of

01:07:51.640 --> 01:07:53.640
<v Speaker 0>this this query here. So I'm assuming, like,

01:07:54.105 --> 01:07:55.625
<v Speaker 0>the GraphQL approach,

01:07:56.425 --> 01:07:58.505
<v Speaker 0>you can throw these things together pretty quickly.

01:07:58.505 --> 01:07:59.705
<v Speaker 0>And if you want to change the shape

01:07:59.705 --> 01:08:01.865
<v Speaker 0>of it, you just create the TypeScript function

01:08:01.865 --> 01:08:03.385
<v Speaker 0>and call it that way.

01:08:05.705 --> 01:08:06.984
<v Speaker 0>Because I'm assuming we could do the exact

01:08:06.984 --> 01:08:08.425
<v Speaker 0>same in TypeScript with,

01:08:09.770 --> 01:08:10.810
<v Speaker 0>let's see.

01:08:12.330 --> 01:08:14.170
<v Speaker 0>So if I wanted to get the city

01:08:15.290 --> 01:08:17.529
<v Speaker 0>I'm feeling too brave now. That's just gonna

01:08:18.170 --> 01:08:19.529
<v Speaker 0>be my downfall.

01:08:21.930 --> 01:08:22.250
<v Speaker 0>Country

01:08:25.835 --> 01:08:26.875
<v Speaker 0>input

01:08:27.995 --> 01:08:28.555
<v Speaker 0>codes.

01:08:29.995 --> 01:08:33.035
<v Speaker 0>I'm not gonna worry about the variables.

01:08:33.515 --> 01:08:35.675
<v Speaker 0>So that should fetch my city and then

01:08:35.675 --> 01:08:36.555
<v Speaker 0>I could do weather.

01:08:40.030 --> 01:08:41.790
<v Speaker 0>And there is a question coming, but I'm

01:08:41.790 --> 01:08:42.590
<v Speaker 0>trying to

01:08:44.430 --> 01:08:46.270
<v Speaker 0>get through this first.

01:08:49.310 --> 01:08:50.350
<v Speaker 0>City,

01:08:51.150 --> 01:08:53.085
<v Speaker 0>which is going to be our city dot

01:08:53.085 --> 01:08:53.804
<v Speaker 0>data

01:08:56.524 --> 01:08:57.645
<v Speaker 0>capital

01:08:57.725 --> 01:08:58.685
<v Speaker 0>name,

01:08:59.564 --> 01:09:01.085
<v Speaker 0>or maybe that is the name.

01:09:02.045 --> 01:09:03.005
<v Speaker 0>Yeah. Mhmm.

01:09:05.405 --> 01:09:07.405
<v Speaker 0>And then my response

01:09:14.460 --> 01:09:16.700
<v Speaker 0>could just be whatever shape of data I

01:09:16.700 --> 01:09:18.219
<v Speaker 0>want. So we'll call this

01:09:19.020 --> 01:09:19.979
<v Speaker 0>capital

01:09:21.020 --> 01:09:24.540
<v Speaker 0>and

01:09:21.835 --> 01:09:23.274
<v Speaker 0>temperature.

01:09:26.234 --> 01:09:29.194
<v Speaker 0>It's complaining. It's it's ridiculous.

01:09:30.954 --> 01:09:32.635
<v Speaker 1>City is probably

01:09:33.354 --> 01:09:34.394
<v Speaker 1>requesting

01:09:35.994 --> 01:09:38.590
<v Speaker 1>a string, not string, or undefined. Right?

01:09:40.750 --> 01:09:42.350
<v Speaker 0>I mean, I guess I could just default

01:09:42.350 --> 01:09:42.990
<v Speaker 0>this to the

01:09:50.350 --> 01:09:53.114
<v Speaker 1>Something is wrong with weather and temperature.

01:09:54.875 --> 01:09:55.594
<v Speaker 0>Oh.

01:09:57.594 --> 01:09:58.314
<v Speaker 1>Ah,

01:09:58.395 --> 01:09:59.594
<v Speaker 1>can see by name.

01:10:01.275 --> 01:10:03.915
<v Speaker 1>You see, Copilot needs to learn a a

01:10:03.915 --> 01:10:06.474
<v Speaker 1>little more about

01:10:05.770 --> 01:10:07.050
<v Speaker 1>what you're doing here.

01:10:10.090 --> 01:10:10.729
<v Speaker 0>Okay.

01:10:11.290 --> 01:10:13.209
<v Speaker 0>So now our Yen's API

01:10:14.090 --> 01:10:15.690
<v Speaker 0>could take an input, but I've hard coded

01:10:15.690 --> 01:10:17.370
<v Speaker 0>it to GP, which is then gonna go

01:10:17.370 --> 01:10:19.165
<v Speaker 0>fetch the weather. And then I define the

01:10:19.165 --> 01:10:21.325
<v Speaker 0>shape of the data that gets turned back

01:10:21.325 --> 01:10:23.885
<v Speaker 0>to the client. So if we come to

01:10:23.885 --> 01:10:24.685
<v Speaker 0>Jens

01:10:26.605 --> 01:10:27.965
<v Speaker 0>I broke it.

01:10:28.285 --> 01:10:29.725
<v Speaker 1>No. You need to put an input.

01:10:30.780 --> 01:10:33.019
<v Speaker 1>You're ignoring it, but it's still in the

01:10:33.179 --> 01:10:35.179
<v Speaker 1>in the JSON schema validation.

01:10:36.699 --> 01:10:37.659
<v Speaker 0>See, this

01:10:38.940 --> 01:10:40.380
<v Speaker 0>is very interesting.

01:10:41.179 --> 01:10:41.659
<v Speaker 0>Like, that

01:10:42.515 --> 01:10:44.114
<v Speaker 0>was just so easy

01:10:44.755 --> 01:10:46.995
<v Speaker 0>to decide that I want to expose two

01:10:46.995 --> 01:10:48.675
<v Speaker 0>bits of information to people when they give

01:10:48.675 --> 01:10:50.195
<v Speaker 0>me a country code because I want to

01:10:50.195 --> 01:10:51.555
<v Speaker 0>tell them the name of the capital and

01:10:51.555 --> 01:10:52.514
<v Speaker 0>the actual

01:10:53.635 --> 01:10:54.514
<v Speaker 0>temperature.

01:10:55.555 --> 01:10:57.555
<v Speaker 0>And I could just dictate that. Like now

01:10:57.555 --> 01:10:58.979
<v Speaker 0>we have the system.

01:11:00.179 --> 01:11:02.900
<v Speaker 0>You know, let me back up a bit.

01:11:02.900 --> 01:11:04.579
<v Speaker 0>So I wanna make sure that I

01:11:05.059 --> 01:11:06.980
<v Speaker 0>get the importance of this in my header

01:11:06.980 --> 01:11:09.940
<v Speaker 0>graph. It's like, we have this divide. Right?

01:11:09.940 --> 01:11:12.659
<v Speaker 0>And I'll use a product like asura as

01:11:12.659 --> 01:11:15.885
<v Speaker 0>a demonstration here. Right? Really great product, but

01:11:15.885 --> 01:11:16.525
<v Speaker 0>very

01:11:16.925 --> 01:11:19.885
<v Speaker 0>operational centric. Like, you know, some team manages

01:11:19.885 --> 01:11:21.485
<v Speaker 0>that. They connect it to a database to

01:11:21.485 --> 01:11:22.844
<v Speaker 0>define the schema.

01:11:22.925 --> 01:11:24.685
<v Speaker 0>Like, a front end developer is not going

01:11:24.685 --> 01:11:25.565
<v Speaker 0>to come along,

01:11:25.885 --> 01:11:28.760
<v Speaker 0>modify the Hasura metadata to expose the data

01:11:28.760 --> 01:11:30.040
<v Speaker 0>that they want in the format that they

01:11:30.040 --> 01:11:30.920
<v Speaker 0>want, etcetera.

01:11:31.880 --> 01:11:34.520
<v Speaker 0>But WunderGraph changes that because we have this

01:11:34.520 --> 01:11:37.320
<v Speaker 0>TypeScript API to everything, which is very familiar

01:11:37.320 --> 01:11:39.239
<v Speaker 0>to both back end developers, full stack developers

01:11:39.239 --> 01:11:40.440
<v Speaker 0>or front end developers.

01:11:40.840 --> 01:11:42.840
<v Speaker 0>Where it can coexist in a model repository

01:11:42.840 --> 01:11:45.025
<v Speaker 0>with a generated client let's say by say,

01:11:45.025 --> 01:11:46.864
<v Speaker 0>is that the front end developer can come

01:11:46.864 --> 01:11:49.025
<v Speaker 0>along and say, actually, I want an API

01:11:49.025 --> 01:11:50.625
<v Speaker 0>endpoint that returns data as it looks like

01:11:50.625 --> 01:11:52.224
<v Speaker 0>this. They stretch a few things together and

01:11:52.224 --> 01:11:53.344
<v Speaker 0>they've got what they need and they can

01:11:53.344 --> 01:11:55.744
<v Speaker 0>do it all in the same pull request

01:11:55.744 --> 01:11:57.425
<v Speaker 0>and update their client code at the same

01:11:57.425 --> 01:11:57.664
<v Speaker 0>time.

01:11:58.440 --> 01:12:00.280
<v Speaker 0>And that's an enabler that I just don't

01:12:00.280 --> 01:12:03.320
<v Speaker 0>think these other products offer in this space.

01:12:03.880 --> 01:12:05.960
<v Speaker 0>And I hope that that makes sense to

01:12:05.960 --> 01:12:07.640
<v Speaker 0>people and it's not just waffle dribbling out

01:12:07.640 --> 01:12:09.640
<v Speaker 0>my mouth, but it's just such a powerful

01:12:09.640 --> 01:12:10.199
<v Speaker 0>feature.

01:12:11.160 --> 01:12:13.745
<v Speaker 1>Yeah. You know, one more thing. Now go

01:12:13.745 --> 01:12:15.185
<v Speaker 1>to the front end code

01:12:15.345 --> 01:12:17.585
<v Speaker 1>and check what is the response shape gonna

01:12:17.585 --> 01:12:18.305
<v Speaker 1>look like.

01:12:19.825 --> 01:12:22.785
<v Speaker 1>Like, here, we call Jens. So it's the

01:12:22.785 --> 01:12:24.945
<v Speaker 1>name is dragons and check what is the

01:12:24.945 --> 01:12:27.670
<v Speaker 1>the response type of dragons. So if you

01:12:27.750 --> 01:12:30.149
<v Speaker 1>in line 15, if you type dragons

01:12:30.230 --> 01:12:31.590
<v Speaker 1>or here yeah.

01:12:33.190 --> 01:12:33.989
<v Speaker 1>Data.

01:12:35.349 --> 01:12:37.909
<v Speaker 1>You see you have capital and and temperature.

01:12:37.909 --> 01:12:40.469
<v Speaker 1>That's what we returned from our API.

01:12:41.614 --> 01:12:42.414
<v Speaker 0>Mhmm.

01:12:42.574 --> 01:12:43.054
<v Speaker 0>Nice.

01:12:47.855 --> 01:12:49.135
<v Speaker 0>I could have a lot of fun with

01:12:49.135 --> 01:12:49.695
<v Speaker 0>that.

01:12:50.655 --> 01:12:51.295
<v Speaker 1>Yeah.

01:12:52.335 --> 01:12:54.255
<v Speaker 0>Alright. Sorry. I just see everybody's

01:12:54.720 --> 01:12:56.400
<v Speaker 0>comments trying to tell me how to show

01:12:56.400 --> 01:12:58.400
<v Speaker 0>the the dot fails. Thank you, everybody.

01:12:59.600 --> 01:13:00.880
<v Speaker 1>Yeah.

01:13:00.880 --> 01:13:02.559
<v Speaker 1>You have a helpful community.

01:13:03.040 --> 01:13:03.679
<v Speaker 0>Yeah.

01:13:04.400 --> 01:13:05.199
<v Speaker 0>Alright.

01:13:05.600 --> 01:13:07.680
<v Speaker 0>Abdul saying, and no need for a GUI

01:13:07.680 --> 01:13:10.435
<v Speaker 0>like Hasura. Yeah. I mean, Azure you use

01:13:10.435 --> 01:13:12.355
<v Speaker 0>the web interface to configure everything or you

01:13:12.355 --> 01:13:14.115
<v Speaker 0>can use your YAML metadata. It's a bit

01:13:14.115 --> 01:13:14.835
<v Speaker 0>awkward

01:13:15.155 --> 01:13:17.395
<v Speaker 0>and especially for me when I do want

01:13:17.395 --> 01:13:18.835
<v Speaker 0>everything to be code.

01:13:19.315 --> 01:13:21.395
<v Speaker 0>It's like my my default now is just

01:13:21.395 --> 01:13:23.790
<v Speaker 0>gonna be not to ship Azure anywhere and

01:13:23.790 --> 01:13:25.869
<v Speaker 0>just to create a WunderGraph API

01:13:25.869 --> 01:13:28.749
<v Speaker 0>because then I have this dynamic ability to

01:13:29.949 --> 01:13:32.510
<v Speaker 0>duplicate my queries if I want with different

01:13:32.510 --> 01:13:34.670
<v Speaker 0>names, version them if I wanted to because

01:13:34.670 --> 01:13:36.715
<v Speaker 0>we could do that as code and change

01:13:36.715 --> 01:13:38.635
<v Speaker 0>the shape of things by writing these TypeScript

01:13:38.635 --> 01:13:39.435
<v Speaker 0>handlers.

01:13:39.595 --> 01:13:40.555
<v Speaker 0>Like, it's just

01:13:41.115 --> 01:13:42.635
<v Speaker 0>very nifty. I think it

01:13:43.435 --> 01:13:45.435
<v Speaker 0>alright. You know the the Sorry. I only

01:13:45.435 --> 01:13:47.515
<v Speaker 0>go. Just just to comment on this. The

01:13:47.515 --> 01:13:48.555
<v Speaker 1>problem with

01:13:48.875 --> 01:13:50.795
<v Speaker 1>user interfaces is

01:13:51.650 --> 01:13:53.330
<v Speaker 1>if someone wants to

01:13:54.050 --> 01:13:56.210
<v Speaker 1>replicate what we just did,

01:13:57.090 --> 01:13:59.010
<v Speaker 1>you just type the code. You can you

01:13:59.010 --> 01:14:01.570
<v Speaker 1>can follow the code. If we had to

01:14:01.570 --> 01:14:02.610
<v Speaker 1>click buttons,

01:14:03.090 --> 01:14:05.410
<v Speaker 1>you cannot store button clicks in Git.

01:14:06.445 --> 01:14:08.285
<v Speaker 1>If you want to follow what we just

01:14:08.285 --> 01:14:10.204
<v Speaker 1>did here, the combination,

01:14:10.205 --> 01:14:12.844
<v Speaker 1>the the all this stuff, you can now

01:14:12.844 --> 01:14:14.364
<v Speaker 1>put it in a Git repo,

01:14:15.165 --> 01:14:16.925
<v Speaker 1>and everybody would understand

01:14:17.485 --> 01:14:20.285
<v Speaker 1>how we change these operations, how we define

01:14:20.285 --> 01:14:20.925
<v Speaker 1>the Yance

01:14:21.349 --> 01:14:23.670
<v Speaker 1>operation. Like, everything is in Git. It is

01:14:23.670 --> 01:14:25.030
<v Speaker 1>versioned automatically.

01:14:26.309 --> 01:14:27.829
<v Speaker 1>If you click buttons,

01:14:28.309 --> 01:14:30.789
<v Speaker 1>you first have to think about, okay, how

01:14:30.789 --> 01:14:32.389
<v Speaker 1>can we do, like, a

01:14:32.710 --> 01:14:36.195
<v Speaker 1>revision or embed a revision system into the

01:14:36.195 --> 01:14:38.995
<v Speaker 1>user interface so that people can understand what

01:14:38.995 --> 01:14:39.795
<v Speaker 1>changes

01:14:40.115 --> 01:14:42.755
<v Speaker 1>were made to the system last night because

01:14:42.755 --> 01:14:44.435
<v Speaker 1>this morning, everything is breaking?

01:14:46.820 --> 01:14:49.539
<v Speaker 0>Yep. So everything in WunderGraph, everything you change

01:14:49.539 --> 01:14:53.139
<v Speaker 1>to your WunderGraph application, it's visible because you

01:14:53.380 --> 01:14:55.699
<v Speaker 1>it's code. You put it in Git. There's

01:14:55.860 --> 01:14:57.780
<v Speaker 1>there's no GUI because

01:14:58.340 --> 01:15:00.420
<v Speaker 1>I don't want a GUI. You know, everything

01:15:00.420 --> 01:15:03.185
<v Speaker 1>we just did, we we always kept typing,

01:15:03.185 --> 01:15:05.105
<v Speaker 1>and it was efficient. And we have this

01:15:05.105 --> 01:15:07.665
<v Speaker 1>is what I said in the beginning. TypeScript

01:15:07.665 --> 01:15:09.025
<v Speaker 1>is the interface

01:15:09.345 --> 01:15:10.625
<v Speaker 1>for developers.

01:15:10.865 --> 01:15:14.065
<v Speaker 1>It's the perfect developer interface. We don't need

01:15:14.380 --> 01:15:16.460
<v Speaker 1>buttons or GUIs.

01:15:16.460 --> 01:15:18.300
<v Speaker 1>We we need good

01:15:18.620 --> 01:15:21.100
<v Speaker 1>TypeScript definitions so that we don't have to

01:15:21.100 --> 01:15:23.020
<v Speaker 1>think about what is limit. Is it a

01:15:23.020 --> 01:15:23.660
<v Speaker 1>number?

01:15:23.820 --> 01:15:25.340
<v Speaker 1>The IDE tells you. You,

01:15:26.585 --> 01:15:28.824
<v Speaker 1>you know, you can just type away. Also,

01:15:28.905 --> 01:15:30.824
<v Speaker 1>GraphQL with its amazing

01:15:31.145 --> 01:15:32.425
<v Speaker 1>auto completion,

01:15:33.225 --> 01:15:35.144
<v Speaker 1>just type away. You know?

01:15:37.545 --> 01:15:39.065
<v Speaker 0>Alright. We're getting

01:15:39.385 --> 01:15:42.330
<v Speaker 0>pretty close to time, and I've been I've

01:15:42.330 --> 01:15:43.770
<v Speaker 0>been showing things that I just thought were

01:15:43.770 --> 01:15:45.850
<v Speaker 0>interesting. Is there anything else from these example

01:15:45.850 --> 01:15:47.530
<v Speaker 0>repositories that you would like to show people

01:15:47.530 --> 01:15:49.050
<v Speaker 0>before we finish up today?

01:15:50.810 --> 01:15:52.330
<v Speaker 1>No. I think we're pretty much at the

01:15:52.330 --> 01:15:54.250
<v Speaker 1>core. Like, you could now add

01:15:54.265 --> 01:15:57.225
<v Speaker 1>You could add more services like federation,

01:15:57.225 --> 01:15:59.225
<v Speaker 1>stuff like that. In the end, the the

01:15:59.225 --> 01:16:00.905
<v Speaker 1>DX would be very similar.

01:16:01.065 --> 01:16:03.145
<v Speaker 1>Like, you know, you have use query here.

01:16:03.145 --> 01:16:05.465
<v Speaker 1>You could also import use auth.

01:16:05.705 --> 01:16:07.865
<v Speaker 1>And whatever auth provider you add,

01:16:08.510 --> 01:16:10.830
<v Speaker 1>you can just call it. You don't have

01:16:10.830 --> 01:16:12.830
<v Speaker 1>to add any other dependencies.

01:16:14.430 --> 01:16:15.470
<v Speaker 1>No. I think

01:16:16.110 --> 01:16:16.830
<v Speaker 1>we're we're

01:16:17.630 --> 01:16:18.350
<v Speaker 1>ah,

01:16:18.670 --> 01:16:20.510
<v Speaker 1>Ray just mentioned directives.

01:16:20.935 --> 01:16:24.055
<v Speaker 1>Yeah. Okay. We we can talk about role

01:16:24.055 --> 01:16:26.695
<v Speaker 1>based access if if you want. Like, okay.

01:16:26.695 --> 01:16:29.015
<v Speaker 1>We we don't have enough time for adding

01:16:29.015 --> 01:16:31.495
<v Speaker 1>authentication now. But if you go to one

01:16:31.495 --> 01:16:32.695
<v Speaker 1>of the operations,

01:16:32.855 --> 01:16:33.735
<v Speaker 1>like dragons,

01:16:33.735 --> 01:16:34.215
<v Speaker 1>for example,

01:16:36.150 --> 01:16:38.789
<v Speaker 1>And after dragons, you type at

01:16:40.469 --> 01:16:41.349
<v Speaker 1>r back.

01:16:42.710 --> 01:16:43.989
<v Speaker 1>Yes. And then

01:16:46.710 --> 01:16:47.430
<v Speaker 1>open, like,

01:16:48.605 --> 01:16:51.085
<v Speaker 1>open the function. Yes. And you

01:16:51.085 --> 01:16:53.085
<v Speaker 1>could say require match all

01:16:55.005 --> 01:16:56.445
<v Speaker 1>and make an array.

01:16:58.765 --> 01:17:01.725
<v Speaker 1>And inside this array, admin.

01:17:01.725 --> 01:17:01.965
<v Speaker 1>Yep.

01:17:02.730 --> 01:17:03.770
<v Speaker 1>Save it

01:17:04.090 --> 01:17:06.090
<v Speaker 1>and call this function, and you will see

01:17:06.090 --> 01:17:06.889
<v Speaker 1>it will

01:17:07.290 --> 01:17:08.889
<v Speaker 1>not work because

01:17:09.370 --> 01:17:11.610
<v Speaker 1>we don't have role admin.

01:17:13.050 --> 01:17:13.849
<v Speaker 0>Four

01:17:14.010 --> 01:17:17.125
<v Speaker 0>zero one. Yeah. So you could now add

01:17:17.125 --> 01:17:18.885
<v Speaker 1>an authentication provider,

01:17:19.365 --> 01:17:21.765
<v Speaker 1>and we have a callback function

01:17:21.925 --> 01:17:25.685
<v Speaker 1>like a hook where when someone authenticates,

01:17:25.685 --> 01:17:28.005
<v Speaker 1>you can write the TypeScript function to give

01:17:28.005 --> 01:17:30.320
<v Speaker 1>them roles, and you can define what roles

01:17:30.320 --> 01:17:31.760
<v Speaker 1>exist in your realm.

01:17:32.080 --> 01:17:34.320
<v Speaker 1>And now you could say, okay.

01:17:34.960 --> 01:17:35.760
<v Speaker 1>If

01:17:35.760 --> 01:17:38.000
<v Speaker 1>my name is Rawkode or my email is

01:17:38.000 --> 01:17:39.360
<v Speaker 1>something Rawkode

01:17:39.520 --> 01:17:40.320
<v Speaker 1>whatever,

01:17:40.480 --> 01:17:43.200
<v Speaker 1>I give myself the role admin, and then

01:17:43.200 --> 01:17:45.995
<v Speaker 1>you would be allowed to actually use this

01:17:46.315 --> 01:17:48.074
<v Speaker 1>this operation. But

01:17:48.795 --> 01:17:50.635
<v Speaker 0>Yeah. Must admit that's possible in in a

01:17:50.635 --> 01:17:51.435
<v Speaker 0>TypeScript

01:17:51.595 --> 01:17:52.235
<v Speaker 0>too.

01:17:54.715 --> 01:17:57.435
<v Speaker 1>Type you can write CTX user,

01:17:58.315 --> 01:17:59.675
<v Speaker 1>and you can say roles.

01:18:01.890 --> 01:18:03.490
<v Speaker 1>And Or includes.

01:18:04.850 --> 01:18:06.530
<v Speaker 1>Yes. Something, I guess.

01:18:12.050 --> 01:18:13.890
<v Speaker 0>How do I return, like, a four zero

01:18:13.890 --> 01:18:14.370
<v Speaker 0>one then?

01:18:15.775 --> 01:18:17.135
<v Speaker 1>Yeah. That's

01:18:17.455 --> 01:18:20.015
<v Speaker 1>the missing feature I'm currently working on.

01:18:22.815 --> 01:18:25.535
<v Speaker 0>Alright. Like, we released functions

01:18:25.855 --> 01:18:26.815
<v Speaker 1>Tuesday

01:18:26.815 --> 01:18:28.895
<v Speaker 1>this week. Oh, wow. And

01:18:30.340 --> 01:18:33.060
<v Speaker 0>Okay. So that's pretty fresh off the okay.

01:18:33.060 --> 01:18:35.540
<v Speaker 1>Yeah. Yeah. It it's it's pretty fresh, and

01:18:37.220 --> 01:18:38.580
<v Speaker 1>we need to add

01:18:39.780 --> 01:18:40.820
<v Speaker 1>a way of

01:18:41.140 --> 01:18:42.260
<v Speaker 1>returning unauthorized.

01:18:43.455 --> 01:18:44.735
<v Speaker 1>But yeah.

01:18:45.695 --> 01:18:48.255
<v Speaker 0>Oh, I've got if it does include admin.

01:18:48.255 --> 01:18:49.215
<v Speaker 0>Okay. So

01:18:50.255 --> 01:18:52.014
<v Speaker 0>so that should give me an error.

01:18:53.054 --> 01:18:55.054
<v Speaker 1>Yeah. I think it will actually time out

01:18:55.054 --> 01:18:55.855
<v Speaker 1>because

01:18:56.160 --> 01:18:57.920
<v Speaker 1>we're we're not yet

01:18:58.240 --> 01:19:00.160
<v Speaker 1>properly handling those errors.

01:19:01.840 --> 01:19:04.160
<v Speaker 1>You you you caught us on the on

01:19:04.160 --> 01:19:06.800
<v Speaker 1>the alpha stage here. Hey. You gave me

01:19:06.800 --> 01:19:08.800
<v Speaker 0>TypeScript functions, and I I wanna start using

01:19:08.800 --> 01:19:11.344
<v Speaker 0>them for everything now. So I'm gonna I'll

01:19:11.344 --> 01:19:13.185
<v Speaker 0>get a feature request in for the ability

01:19:13.185 --> 01:19:14.704
<v Speaker 0>to augment this Alright.

01:19:16.625 --> 01:19:18.625
<v Speaker 0>That's awesome. Let me put us back into

01:19:18.625 --> 01:19:20.785
<v Speaker 0>to big face mode. So what I would

01:19:20.785 --> 01:19:22.385
<v Speaker 0>say is if you have any questions and

01:19:22.385 --> 01:19:24.465
<v Speaker 0>you're watching, you've got a couple of minutes

01:19:24.465 --> 01:19:26.810
<v Speaker 0>to drop them in to the chat. Well,

01:19:26.810 --> 01:19:28.650
<v Speaker 0>Jens and I have a quick conversation.

01:19:29.210 --> 01:19:30.570
<v Speaker 0>So just

01:19:30.570 --> 01:19:33.370
<v Speaker 0>first, thank you. This is a really cool

01:19:33.370 --> 01:19:35.130
<v Speaker 0>project. I've got so many different cases that

01:19:35.770 --> 01:19:36.889
<v Speaker 0>I want. Literally,

01:19:37.770 --> 01:19:39.915
<v Speaker 0>you know, I reached out because I was

01:19:39.915 --> 01:19:42.875
<v Speaker 0>experimenting with using this. Have real things that

01:19:42.875 --> 01:19:43.915
<v Speaker 0>I want to do with it. And I

01:19:43.915 --> 01:19:45.675
<v Speaker 0>just thought, you know what, this is cool.

01:19:45.755 --> 01:19:47.594
<v Speaker 0>So thank you for spending time with me

01:19:47.594 --> 01:19:49.994
<v Speaker 0>today and showing us this. And why don't

01:19:49.994 --> 01:19:51.275
<v Speaker 0>you give us a little bit of a

01:19:51.275 --> 01:19:51.994
<v Speaker 0>flavor on

01:19:52.660 --> 01:19:55.380
<v Speaker 0>where you're going with WunderGraph? Like, what does

01:19:55.380 --> 01:19:56.900
<v Speaker 0>the next three months or six months look

01:19:56.900 --> 01:19:58.739
<v Speaker 0>like? What are your priorities?

01:19:59.300 --> 01:20:01.300
<v Speaker 0>What's coming down the line for people that

01:20:01.300 --> 01:20:02.099
<v Speaker 0>are curious?

01:20:02.740 --> 01:20:03.940
<v Speaker 1>Yes. So

01:20:04.660 --> 01:20:06.934
<v Speaker 1>in the next couple of weeks, we launch

01:20:06.934 --> 01:20:07.414
<v Speaker 1>the

01:20:07.815 --> 01:20:10.695
<v Speaker 1>so our cloud is currently in alpha stage.

01:20:10.695 --> 01:20:12.374
<v Speaker 1>We launch our cloud

01:20:12.775 --> 01:20:14.534
<v Speaker 1>to to beta,

01:20:15.974 --> 01:20:16.854
<v Speaker 1>which means

01:20:17.494 --> 01:20:19.494
<v Speaker 1>from like, you now have a repo with

01:20:19.494 --> 01:20:20.855
<v Speaker 1>the dot WunderGraph folder.

01:20:21.600 --> 01:20:22.320
<v Speaker 1>And

01:20:22.560 --> 01:20:23.600
<v Speaker 1>in in

01:20:23.760 --> 01:20:27.120
<v Speaker 1>WunderGraph cloud, you select this repo from your

01:20:27.120 --> 01:20:28.160
<v Speaker 1>Git repo,

01:20:29.280 --> 01:20:32.239
<v Speaker 1>and then everything gets deployed automatically

01:20:32.400 --> 01:20:34.080
<v Speaker 1>in whatever location you want.

01:20:34.725 --> 01:20:36.085
<v Speaker 1>You get analytics.

01:20:36.085 --> 01:20:37.684
<v Speaker 1>You get edge caching.

01:20:38.405 --> 01:20:40.724
<v Speaker 1>You get, like, what you would expect

01:20:40.885 --> 01:20:43.045
<v Speaker 1>from an API deployment

01:20:43.284 --> 01:20:43.844
<v Speaker 1>thing.

01:20:44.244 --> 01:20:46.565
<v Speaker 1>And what's on the road map is, like,

01:20:46.565 --> 01:20:48.720
<v Speaker 1>we want to bring collaboration so we can

01:20:48.720 --> 01:20:50.480
<v Speaker 1>work with the team. We want to closely

01:20:50.480 --> 01:20:53.440
<v Speaker 1>integrate with services like Vercel.

01:20:53.520 --> 01:20:56.160
<v Speaker 1>So your front end on Vercel, your back

01:20:56.160 --> 01:20:57.599
<v Speaker 1>end on WunderGraph.

01:20:58.080 --> 01:20:59.119
<v Speaker 1>And another

01:20:59.600 --> 01:21:01.840
<v Speaker 1>from super important thing for me is when

01:21:01.840 --> 01:21:02.960
<v Speaker 1>you integrate APIs,

01:21:04.094 --> 01:21:04.734
<v Speaker 1>what

01:21:05.534 --> 01:21:07.054
<v Speaker 1>is kind of like

01:21:07.295 --> 01:21:08.494
<v Speaker 1>apparent is

01:21:09.054 --> 01:21:10.734
<v Speaker 1>it doesn't always work.

01:21:11.215 --> 01:21:13.374
<v Speaker 1>Like, let's say you have an operation.

01:21:13.695 --> 01:21:15.614
<v Speaker 1>It needs to call into three services

01:21:16.130 --> 01:21:19.490
<v Speaker 1>to to to complete the workflow, like get

01:21:19.490 --> 01:21:20.929
<v Speaker 1>some data from Stripe,

01:21:21.810 --> 01:21:23.650
<v Speaker 1>put some data in your database, and then

01:21:23.650 --> 01:21:26.770
<v Speaker 1>call another service to to send an email

01:21:26.770 --> 01:21:29.490
<v Speaker 1>and and whatnot. And this can fail sometimes.

01:21:30.095 --> 01:21:33.055
<v Speaker 1>What we are also bringing to WunderGraph is

01:21:33.295 --> 01:21:34.094
<v Speaker 1>something

01:21:34.575 --> 01:21:36.015
<v Speaker 1>quite similar to

01:21:36.175 --> 01:21:37.055
<v Speaker 1>temporal.

01:21:37.375 --> 01:21:41.375
<v Speaker 1>So I call this feature WunderGraph machines,

01:21:41.695 --> 01:21:43.215
<v Speaker 1>which will be resilient

01:21:44.720 --> 01:21:45.920
<v Speaker 1>state machines,

01:21:46.240 --> 01:21:49.840
<v Speaker 1>essentially. So background workers, but not background workers

01:21:49.840 --> 01:21:50.880
<v Speaker 1>as you think,

01:21:51.280 --> 01:21:53.280
<v Speaker 1>like, much more elegant,

01:21:53.600 --> 01:21:55.040
<v Speaker 1>kind of like a

01:21:55.520 --> 01:21:56.640
<v Speaker 1>React component,

01:21:57.375 --> 01:21:58.894
<v Speaker 1>but it's a state machine.

01:21:59.454 --> 01:22:02.094
<v Speaker 1>And you can retry things, and you can

01:22:02.094 --> 01:22:05.135
<v Speaker 1>design long running operations and workflows and and

01:22:05.135 --> 01:22:06.014
<v Speaker 1>crons.

01:22:06.094 --> 01:22:09.135
<v Speaker 1>And we will also be adding an event

01:22:09.295 --> 01:22:11.855
<v Speaker 1>system, so like a pops up system where

01:22:11.855 --> 01:22:12.175
<v Speaker 1>you can,

01:22:13.010 --> 01:22:15.570
<v Speaker 1>for example, send an event to a WunderGraph

01:22:15.570 --> 01:22:17.650
<v Speaker 1>machine, and it can react to that because

01:22:17.650 --> 01:22:18.770
<v Speaker 1>it's a state machine.

01:22:19.170 --> 01:22:19.730
<v Speaker 1>And

01:22:20.530 --> 01:22:22.530
<v Speaker 1>you can subscribe to events

01:22:22.610 --> 01:22:23.970
<v Speaker 1>by a state machine,

01:22:24.210 --> 01:22:25.810
<v Speaker 1>which gives you a whole new way of

01:22:25.810 --> 01:22:26.290
<v Speaker 1>designing

01:22:26.765 --> 01:22:27.725
<v Speaker 1>applications.

01:22:27.725 --> 01:22:28.925
<v Speaker 1>And all this, again,

01:22:29.245 --> 01:22:31.485
<v Speaker 1>TypeScript interface, very elegant.

01:22:31.805 --> 01:22:33.804
<v Speaker 1>You can call it from your functions,

01:22:34.205 --> 01:22:34.925
<v Speaker 1>etcetera.

01:22:35.085 --> 01:22:37.085
<v Speaker 1>And the the the real purpose here is

01:22:37.085 --> 01:22:37.645
<v Speaker 1>to

01:22:38.285 --> 01:22:38.685
<v Speaker 1>you know,

01:22:39.829 --> 01:22:42.150
<v Speaker 1>most people, when we talk about APIs, we

01:22:42.150 --> 01:22:44.869
<v Speaker 1>talk about, okay. Let's create some cruds things,

01:22:44.869 --> 01:22:47.270
<v Speaker 1>and that's that's really the simple stuff. But

01:22:47.270 --> 01:22:49.909
<v Speaker 1>what the developer experience, I want to create

01:22:49.909 --> 01:22:50.389
<v Speaker 1>is resilient,

01:22:52.405 --> 01:22:54.804
<v Speaker 1>long running state machines where

01:22:55.125 --> 01:22:57.124
<v Speaker 1>if a user signs up

01:22:57.205 --> 01:22:59.604
<v Speaker 1>with your SaaS application,

01:22:59.844 --> 01:23:02.645
<v Speaker 1>you can actually create a state machine for

01:23:02.645 --> 01:23:03.525
<v Speaker 1>this user,

01:23:03.925 --> 01:23:05.205
<v Speaker 1>and you can send

01:23:07.480 --> 01:23:10.199
<v Speaker 1>events to this state machine whenever you want,

01:23:10.360 --> 01:23:12.840
<v Speaker 1>and this can transition the state machine into

01:23:12.840 --> 01:23:15.560
<v Speaker 1>different states. Like, for example, if you want

01:23:15.560 --> 01:23:18.599
<v Speaker 1>to to create something like, you

01:23:19.320 --> 01:23:21.639
<v Speaker 1>can have a state machine for your organization.

01:23:22.005 --> 01:23:24.725
<v Speaker 1>And if someone wants to join this organization,

01:23:24.725 --> 01:23:27.364
<v Speaker 1>you can send it an event. So in

01:23:27.364 --> 01:23:29.764
<v Speaker 1>a a state machine or a WunderGraph machine,

01:23:29.764 --> 01:23:32.324
<v Speaker 1>it will have, like, a storage. And it's

01:23:32.324 --> 01:23:35.125
<v Speaker 1>what's also very important is it's going to

01:23:35.125 --> 01:23:36.485
<v Speaker 1>be serverless.

01:23:36.790 --> 01:23:39.270
<v Speaker 1>So you don't have to think about where

01:23:39.270 --> 01:23:41.909
<v Speaker 1>does it run. Does it actually run? Is

01:23:41.909 --> 01:23:44.550
<v Speaker 1>it sleeping or or whatnot? Because it can

01:23:44.550 --> 01:23:46.550
<v Speaker 1>sleep, and it will cost you nothing if

01:23:46.550 --> 01:23:47.349
<v Speaker 1>it sleeps.

01:23:47.670 --> 01:23:50.505
<v Speaker 1>And the whole thing is to rethink

01:23:50.824 --> 01:23:54.184
<v Speaker 1>APIs and and workflows because sometimes, you know,

01:23:54.185 --> 01:23:56.025
<v Speaker 1>when we do a deployment

01:23:56.105 --> 01:23:57.145
<v Speaker 1>in WunderGraph,

01:23:57.145 --> 01:23:59.465
<v Speaker 1>what we do is we go to fly.io.

01:23:59.465 --> 01:24:02.344
<v Speaker 1>That's our the provider where we run our

01:24:02.344 --> 01:24:04.665
<v Speaker 1>stuff on, and we do a bunch of

01:24:04.770 --> 01:24:07.330
<v Speaker 1>API calls. Like, we create an app an

01:24:07.330 --> 01:24:07.889
<v Speaker 1>an

01:24:08.290 --> 01:24:10.290
<v Speaker 1>application. They call this application.

01:24:10.690 --> 01:24:13.330
<v Speaker 1>Then you create a fly machine.

01:24:13.970 --> 01:24:14.929
<v Speaker 1>You have

01:24:15.330 --> 01:24:17.755
<v Speaker 1>to build an image. You have to deploy

01:24:17.755 --> 01:24:20.155
<v Speaker 1>that image, and this takes for the first

01:24:20.155 --> 01:24:22.795
<v Speaker 1>run about two minutes and subsequent

01:24:22.875 --> 01:24:25.275
<v Speaker 1>builds around, like, twenty seconds.

01:24:25.755 --> 01:24:28.074
<v Speaker 1>And this is a very long running operation.

01:24:28.475 --> 01:24:29.835
<v Speaker 1>And similar to temporal,

01:24:30.480 --> 01:24:32.480
<v Speaker 1>we want to allow you to build

01:24:33.280 --> 01:24:35.680
<v Speaker 1>in a very, like, elegant way,

01:24:35.840 --> 01:24:38.160
<v Speaker 1>kind of like React components,

01:24:38.160 --> 01:24:40.240
<v Speaker 1>but without returning HTML,

01:24:40.240 --> 01:24:41.680
<v Speaker 1>just return state.

01:24:42.240 --> 01:24:44.955
<v Speaker 1>We want to allow you to build resilient

01:24:44.955 --> 01:24:48.475
<v Speaker 1>state machines so that you you can define

01:24:48.635 --> 01:24:51.435
<v Speaker 1>workflows. You can define crumbs. You can,

01:24:51.755 --> 01:24:54.635
<v Speaker 1>yeah, just define state in your opera in

01:24:54.635 --> 01:24:57.195
<v Speaker 1>your application in a whole new way, and

01:24:58.650 --> 01:25:00.650
<v Speaker 1>it's going to be fun. Like,

01:25:01.850 --> 01:25:03.770
<v Speaker 1>you know, it's it's such a pain in

01:25:03.770 --> 01:25:05.449
<v Speaker 1>the ass if you want to build something

01:25:05.449 --> 01:25:06.170
<v Speaker 1>like

01:25:06.330 --> 01:25:07.769
<v Speaker 1>WunderGraph today,

01:25:07.930 --> 01:25:10.170
<v Speaker 1>and you have to integrate with partners like

01:25:10.170 --> 01:25:10.889
<v Speaker 1>Fly,

01:25:11.449 --> 01:25:12.250
<v Speaker 1>you have to.

01:25:13.135 --> 01:25:15.454
<v Speaker 1>It is so hard to build resilient

01:25:16.014 --> 01:25:18.415
<v Speaker 1>functions. Like, you cannot just call Fly and

01:25:18.415 --> 01:25:21.614
<v Speaker 1>everything flies because sometimes it doesn't.

01:25:21.775 --> 01:25:24.014
<v Speaker 1>How do you retry? How do you and,

01:25:24.735 --> 01:25:27.120
<v Speaker 1>of course, I can have temporal, but now

01:25:27.120 --> 01:25:29.760
<v Speaker 1>I need someone who understands temporal and deploys

01:25:29.760 --> 01:25:31.200
<v Speaker 1>it. Or do I use the cloud, and

01:25:31.200 --> 01:25:33.520
<v Speaker 1>how do I embed it into my thing?

01:25:33.520 --> 01:25:35.360
<v Speaker 1>And what I really just want to do

01:25:35.360 --> 01:25:36.880
<v Speaker 1>is, you know, I call my from my

01:25:36.880 --> 01:25:39.440
<v Speaker 1>front end, I can call the function. And

01:25:39.440 --> 01:25:42.065
<v Speaker 1>from my function, I can call a WunderGraph

01:25:42.065 --> 01:25:44.864
<v Speaker 1>machine, and that's everything I need. And so

01:25:44.864 --> 01:25:46.224
<v Speaker 1>we really try to

01:25:46.705 --> 01:25:47.905
<v Speaker 1>to unpack

01:25:47.905 --> 01:25:49.985
<v Speaker 1>the hard things into

01:25:50.225 --> 01:25:51.104
<v Speaker 1>super

01:25:51.265 --> 01:25:54.385
<v Speaker 1>simple solutions that everybody can understand. And I

01:25:54.385 --> 01:25:57.719
<v Speaker 1>think even a front end developer with some

01:25:57.719 --> 01:25:59.719
<v Speaker 1>experience will be able to build

01:26:00.040 --> 01:26:00.920
<v Speaker 1>resilient

01:26:00.920 --> 01:26:03.239
<v Speaker 1>workflows and long running operations

01:26:03.400 --> 01:26:04.999
<v Speaker 1>with WunderGraph machines.

01:26:05.320 --> 01:26:08.520
<v Speaker 1>So that's what's going to come in the

01:26:08.520 --> 01:26:09.320
<v Speaker 1>next month.

01:26:09.639 --> 01:26:10.599
<v Speaker 0>And the next month?

01:26:11.195 --> 01:26:11.994
<v Speaker 0>Wow.

01:26:12.395 --> 01:26:13.755
<v Speaker 0>Or months. Yeah.

01:26:14.155 --> 01:26:14.875
<v Speaker 1>Months.

01:26:15.275 --> 01:26:16.155
<v Speaker 0>Alright.

01:26:16.315 --> 01:26:18.715
<v Speaker 0>We'll definitely have to get something else scheduled

01:26:18.715 --> 01:26:19.995
<v Speaker 0>then to

01:26:19.995 --> 01:26:22.235
<v Speaker 0>do a follow-up. I would love to. That

01:26:22.235 --> 01:26:23.275
<v Speaker 0>would be amazing.

01:26:23.435 --> 01:26:25.950
<v Speaker 0>I have one question in the comments, and

01:26:25.950 --> 01:26:27.470
<v Speaker 0>then I'll let you go because I know

01:26:27.470 --> 01:26:28.910
<v Speaker 0>that's also getting quite late for you over

01:26:28.910 --> 01:26:31.470
<v Speaker 0>there. But Abdul is asking, what other data

01:26:31.470 --> 01:26:33.630
<v Speaker 0>sources are on your road map for WunderGraph?

01:26:35.710 --> 01:26:36.750
<v Speaker 1>Yes. So

01:26:38.270 --> 01:26:38.670
<v Speaker 1>currently,

01:26:39.665 --> 01:26:40.785
<v Speaker 1>I would say

01:26:41.025 --> 01:26:43.505
<v Speaker 1>something that is very interesting for us is

01:26:43.505 --> 01:26:45.745
<v Speaker 1>gRPC and async API

01:26:45.905 --> 01:26:47.985
<v Speaker 1>or more specifically Kafka.

01:26:48.545 --> 01:26:51.345
<v Speaker 1>So super interesting. By the way, we also

01:26:51.345 --> 01:26:52.545
<v Speaker 1>want to expose

01:26:53.090 --> 01:26:54.050
<v Speaker 1>gRPC

01:26:54.210 --> 01:26:56.770
<v Speaker 1>from WunderGraph. So recently, we thought about,

01:26:58.690 --> 01:26:58.930
<v Speaker 1>like

01:26:59.970 --> 01:27:01.250
<v Speaker 1>you know, we have those

01:27:01.730 --> 01:27:04.210
<v Speaker 1>those JSON RPC operations,

01:27:04.450 --> 01:27:06.050
<v Speaker 1>which we currently like, we have our own

01:27:06.050 --> 01:27:07.570
<v Speaker 1>spec, how we do JSON RPC,

01:27:08.085 --> 01:27:11.125
<v Speaker 1>and we can create a Postman collection,

01:27:11.285 --> 01:27:13.365
<v Speaker 1>it would actually be quite simple for us

01:27:13.365 --> 01:27:16.405
<v Speaker 1>to also add a gRPC endpoint,

01:27:16.885 --> 01:27:19.285
<v Speaker 1>which means everybody who

01:27:20.020 --> 01:27:23.219
<v Speaker 1>can generate a gRPC client in Python,

01:27:23.860 --> 01:27:27.780
<v Speaker 1>Ruby, Java, whatever, can call your WunderGraph API.

01:27:27.780 --> 01:27:30.100
<v Speaker 1>So you get a hell lot more options

01:27:30.100 --> 01:27:31.940
<v Speaker 1>for people to call your API. I think

01:27:31.940 --> 01:27:32.500
<v Speaker 1>that's amazing.

01:27:34.845 --> 01:27:36.764
<v Speaker 1>And regarding origins,

01:27:37.005 --> 01:27:39.885
<v Speaker 1>yeah, I think Kafka and and message

01:27:40.045 --> 01:27:42.045
<v Speaker 1>brokers like RabbitMQ,

01:27:42.045 --> 01:27:43.005
<v Speaker 1>super important

01:27:43.325 --> 01:27:45.324
<v Speaker 1>that you can go, like, async.

01:27:45.885 --> 01:27:47.565
<v Speaker 1>And also gRPC

01:27:47.565 --> 01:27:49.900
<v Speaker 1>just as an internal system. I think that's

01:27:49.900 --> 01:27:50.940
<v Speaker 1>that's very important.

01:27:51.180 --> 01:27:53.340
<v Speaker 1>By the way, one one thing I forgot

01:27:53.340 --> 01:27:56.380
<v Speaker 1>to mention for the road map is we

01:27:56.380 --> 01:27:58.380
<v Speaker 1>are also going to be focusing a lot

01:27:58.380 --> 01:27:59.500
<v Speaker 1>on WunderGraph

01:27:59.500 --> 01:28:02.114
<v Speaker 1>help in the future. You know, when we

01:28:02.114 --> 01:28:04.755
<v Speaker 1>started talking it, I I spoke about

01:28:06.675 --> 01:28:08.274
<v Speaker 1>API dependencies

01:28:08.594 --> 01:28:10.755
<v Speaker 1>and the API package manager.

01:28:11.155 --> 01:28:13.474
<v Speaker 1>And one one core feature of WunderGraph

01:28:14.010 --> 01:28:16.329
<v Speaker 1>that we wanna focus more in the future

01:28:16.329 --> 01:28:19.210
<v Speaker 1>is actually sharing APIs. Like, when you do

01:28:19.210 --> 01:28:22.329
<v Speaker 1>introspect GraphQL and introspect something else,

01:28:22.809 --> 01:28:24.489
<v Speaker 1>it means that you need to

01:28:24.809 --> 01:28:26.329
<v Speaker 1>be able to introspect those.

01:28:27.005 --> 01:28:27.644
<v Speaker 1>But

01:28:28.045 --> 01:28:30.925
<v Speaker 1>what if someone could just share an NPM

01:28:30.925 --> 01:28:32.124
<v Speaker 1>package with you,

01:28:32.525 --> 01:28:34.605
<v Speaker 1>and that's your import, and it will be

01:28:34.605 --> 01:28:36.525
<v Speaker 1>type safe out of the box? So what

01:28:36.525 --> 01:28:39.405
<v Speaker 1>we're building is like an NPM

01:28:39.660 --> 01:28:41.580
<v Speaker 1>for APIs where I can

01:28:42.140 --> 01:28:44.700
<v Speaker 1>build a collection of my internal APIs,

01:28:45.020 --> 01:28:46.940
<v Speaker 1>publish them to the hub, and the rest

01:28:46.940 --> 01:28:49.100
<v Speaker 1>of my team or another company, they can

01:28:49.260 --> 01:28:51.580
<v Speaker 1>then import those APIs and add them to

01:28:51.580 --> 01:28:53.180
<v Speaker 1>their retrographic.

01:28:53.260 --> 01:28:54.994
<v Speaker 1>That's that makes

01:28:55.474 --> 01:28:58.275
<v Speaker 1>using and reusing APIs

01:28:58.594 --> 01:29:00.994
<v Speaker 1>a lot or or sharing a a lot

01:29:00.994 --> 01:29:03.554
<v Speaker 1>easier, and we we want to to definitely

01:29:03.554 --> 01:29:05.474
<v Speaker 1>also focus on on that end.

01:29:06.594 --> 01:29:07.474
<v Speaker 1>Yeah. Just

01:29:07.840 --> 01:29:09.360
<v Speaker 1>give people a way of

01:29:09.600 --> 01:29:10.960
<v Speaker 1>sharing APIs.

01:29:11.280 --> 01:29:12.719
<v Speaker 1>You know, sharing is caring.

01:29:13.840 --> 01:29:14.719
<v Speaker 0>Awesome.

01:29:14.719 --> 01:29:16.719
<v Speaker 0>Well, thank you for sharing that road map

01:29:16.719 --> 01:29:18.400
<v Speaker 0>with us as well. And it's great to

01:29:18.400 --> 01:29:20.560
<v Speaker 0>see I mean, there's a lot of really

01:29:19.635 --> 01:29:22.114
<v Speaker 0>interesting stuff there that you're trying to tackle.

01:29:22.355 --> 01:29:24.675
<v Speaker 0>The state machine temporal thing is something again

01:29:24.675 --> 01:29:26.034
<v Speaker 0>that resonates. I think we play with all

01:29:26.034 --> 01:29:28.034
<v Speaker 0>the same technologies. That's that's what our current

01:29:28.034 --> 01:29:29.235
<v Speaker 0>team I'm seeing here is that we have

01:29:29.235 --> 01:29:31.635
<v Speaker 0>very similar interests. I host my own temporal

01:29:31.635 --> 01:29:33.635
<v Speaker 0>cluster on a Kubernetes cluster.

01:29:34.360 --> 01:29:36.600
<v Speaker 0>And it's hard. And but I want the

01:29:36.600 --> 01:29:37.400
<v Speaker 0>semantics

01:29:37.400 --> 01:29:40.440
<v Speaker 0>because temporal has this concept of activities where

01:29:40.440 --> 01:29:42.200
<v Speaker 0>you have this guarantee that things could be

01:29:42.200 --> 01:29:44.600
<v Speaker 0>retried if they fail and and really strict

01:29:44.600 --> 01:29:45.240
<v Speaker 0>error handling.

01:29:46.345 --> 01:29:47.945
<v Speaker 0>And I do want an easier API for

01:29:47.945 --> 01:29:49.225
<v Speaker 0>that. Like, I don't want to host my

01:29:49.225 --> 01:29:52.105
<v Speaker 0>own temporal. So consider me user number one

01:29:52.105 --> 01:29:54.265
<v Speaker 0>for when you have something there with the

01:29:54.265 --> 01:29:56.745
<v Speaker 0>the state. You know, we we just defined

01:29:56.825 --> 01:29:58.265
<v Speaker 1>a TypeScript function. Right?

01:29:59.460 --> 01:30:00.739
<v Speaker 1>And I believe

01:30:01.060 --> 01:30:03.219
<v Speaker 1>creating a resilient workflow

01:30:03.380 --> 01:30:05.699
<v Speaker 1>should be as simple as creating

01:30:05.860 --> 01:30:07.540
<v Speaker 1>another TypeScript functions.

01:30:07.620 --> 01:30:08.179
<v Speaker 1>And

01:30:08.500 --> 01:30:10.099
<v Speaker 1>with WunderGraph Cloud,

01:30:10.580 --> 01:30:12.980
<v Speaker 1>you don't deploy anything, and you you don't

01:30:12.980 --> 01:30:15.695
<v Speaker 1>even switch context. You just create,

01:30:16.175 --> 01:30:19.054
<v Speaker 1>like, a I don't know, export default,

01:30:19.375 --> 01:30:20.574
<v Speaker 1>create machine

01:30:20.815 --> 01:30:22.334
<v Speaker 1>something, and it

01:30:22.895 --> 01:30:24.574
<v Speaker 1>will be resilient. And

01:30:25.215 --> 01:30:27.710
<v Speaker 1>that's just it, like, yeah,

01:30:27.950 --> 01:30:30.750
<v Speaker 1>don't worry about stuff. Get you you know,

01:30:30.750 --> 01:30:33.310
<v Speaker 1>like, for your business purpose, how much does

01:30:33.310 --> 01:30:34.510
<v Speaker 1>it actually matter?

01:30:34.670 --> 01:30:36.110
<v Speaker 1>And is it not a waste of time?

01:30:36.110 --> 01:30:38.030
<v Speaker 1>And we know the answer is yes, that

01:30:38.030 --> 01:30:40.750
<v Speaker 1>you run your own Kubernetes cluster and temporal.

01:30:40.750 --> 01:30:43.075
<v Speaker 1>Like, you know, it can break. You have

01:30:43.075 --> 01:30:46.435
<v Speaker 1>to understand temporal. Maybe they there's something, like,

01:30:46.435 --> 01:30:48.515
<v Speaker 1>you need to patch it. Like, I guess

01:30:48.515 --> 01:30:51.075
<v Speaker 1>it's a great exercise for you to run

01:30:51.075 --> 01:30:53.075
<v Speaker 1>it on your own. And I don't know.

01:30:53.075 --> 01:30:54.755
<v Speaker 1>Like, running Kubernetes

01:30:54.390 --> 01:30:56.230
<v Speaker 1>on your own is, like, such a pain

01:30:56.230 --> 01:30:58.469
<v Speaker 1>in the ass. Like, everything can go wrong.

01:30:58.950 --> 01:30:59.510
<v Speaker 1>And

01:31:01.270 --> 01:31:01.989
<v Speaker 1>if

01:31:02.310 --> 01:31:04.470
<v Speaker 1>you're building you know, this is the thing

01:31:04.470 --> 01:31:07.030
<v Speaker 1>you've you only learn if you're a startup

01:31:07.030 --> 01:31:07.510
<v Speaker 1>founder.

01:31:07.965 --> 01:31:09.725
<v Speaker 1>You have so much pressure.

01:31:10.765 --> 01:31:12.445
<v Speaker 1>You really want to outsource

01:31:12.445 --> 01:31:14.845
<v Speaker 1>everything that has nothing to do with your

01:31:14.845 --> 01:31:18.045
<v Speaker 1>business. So for us, I would never allow

01:31:18.045 --> 01:31:19.325
<v Speaker 1>anybody to run

01:31:19.850 --> 01:31:22.170
<v Speaker 1>a Kubernetes cluster if we if we are

01:31:22.170 --> 01:31:24.330
<v Speaker 1>not past, like, series a or something and

01:31:24.330 --> 01:31:26.170
<v Speaker 1>we have so much money

01:31:26.410 --> 01:31:27.690
<v Speaker 1>that we

01:31:27.930 --> 01:31:30.090
<v Speaker 1>really don't care. You know?

01:31:30.810 --> 01:31:33.290
<v Speaker 0>I mean, teaching people Kubernetes is

01:31:33.705 --> 01:31:35.785
<v Speaker 0>pretty much where 90% of my income comes

01:31:35.785 --> 01:31:37.785
<v Speaker 0>from helping people operate Kubernetes. So I I

01:31:37.785 --> 01:31:39.145
<v Speaker 0>really do need to be good at it.

01:31:39.145 --> 01:31:41.545
<v Speaker 0>So Okay. Yeah. That in in that case,

01:31:41.545 --> 01:31:44.265
<v Speaker 1>oh, obviously. Sure. It as a teacher, it

01:31:44.265 --> 01:31:45.785
<v Speaker 0>makes sense. But temporal, though, I don't I

01:31:45.785 --> 01:31:47.145
<v Speaker 0>don't have to be running my own temporal

01:31:47.145 --> 01:31:48.860
<v Speaker 0>cluster, and I prefer not to. But I

01:31:48.860 --> 01:31:51.100
<v Speaker 0>am I I've loosed the pricing of temporal

01:31:51.100 --> 01:31:53.100
<v Speaker 0>cloud and like fuck that. Like, there's no

01:31:53.100 --> 01:31:54.620
<v Speaker 0>way I'm giving them that money when I

01:31:54.620 --> 01:31:56.460
<v Speaker 0>can fight it myself. So

01:31:57.740 --> 01:31:58.219
<v Speaker 0>alright.

01:31:58.940 --> 01:32:01.100
<v Speaker 0>Again, thank you so much for spending time

01:32:01.100 --> 01:32:03.740
<v Speaker 0>with me. Really cool project. We'll definitely reach

01:32:03.740 --> 01:32:05.795
<v Speaker 0>out in a month when you have the

01:32:05.795 --> 01:32:07.395
<v Speaker 0>state machine stuff ready. I'm gonna hold you

01:32:07.395 --> 01:32:08.835
<v Speaker 0>to that date now. I'll set it up

01:32:08.835 --> 01:32:11.315
<v Speaker 0>a flyer somewhere and we'll get Yes. Scheduled.

01:32:11.315 --> 01:32:13.075
<v Speaker 0>But have a wonderful evening.

01:32:13.315 --> 01:32:14.995
<v Speaker 0>Go spend some time with your kids if

01:32:14.995 --> 01:32:16.435
<v Speaker 0>it's not their bedtime yet, and I will

01:32:16.435 --> 01:32:17.235
<v Speaker 0>speak to you again soon.

01:32:18.120 --> 01:32:20.840
<v Speaker 1>Thank you, man. Well, super cool. Have

01:32:20.920 --> 01:32:21.800
<v Speaker 0>a great day. Bye.
