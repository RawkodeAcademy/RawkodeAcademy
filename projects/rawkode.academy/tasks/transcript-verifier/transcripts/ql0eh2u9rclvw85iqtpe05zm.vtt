WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 26ad4e06-6b66-4247-b8bc-c6fd171ba533
Created: 2025-04-29T21:17:46.040Z
Duration: 2214.0012
Channels: 1

00:00:51.900 --> 00:00:54.220
<v Speaker 0>Hello, friends from the future. It is metal

00:00:54.220 --> 00:00:55.980
<v Speaker 0>Monday, so that means I will be joined

00:00:55.980 --> 00:00:58.940
<v Speaker 0>by two of my favorite Equinix metal heads

00:00:58.940 --> 00:01:01.820
<v Speaker 0>to look over ways of bootstrapping your servers.

00:01:01.820 --> 00:01:04.540
<v Speaker 0>So we'll look at earlier in previous weeks,

00:01:04.540 --> 00:01:05.820
<v Speaker 0>we looked at ways to

00:01:06.924 --> 00:01:09.405
<v Speaker 0>bring up Equinix metal servers, and now we're

00:01:09.405 --> 00:01:11.405
<v Speaker 0>going to do something with them or at

00:01:11.405 --> 00:01:13.085
<v Speaker 0>least get them ready to do something.

00:01:13.325 --> 00:01:15.005
<v Speaker 0>Today, I'll be joined by

00:01:15.165 --> 00:01:16.365
<v Speaker 0>McKay and

00:01:17.884 --> 00:01:18.365
<v Speaker 0>Tom.

00:01:19.430 --> 00:01:20.470
<v Speaker 1>Hey. Hey.

00:01:23.430 --> 00:01:26.070
<v Speaker 0>Good Monday morning afternoon. How are you both?

00:01:27.990 --> 00:01:30.070
<v Speaker 2>Yeah. I'm doing alright. Thank you. Not too

00:01:30.070 --> 00:01:31.510
<v Speaker 2>bad. I'm starting my day with a livestream

00:01:31.510 --> 00:01:33.030
<v Speaker 1>with you two. That would be living the

00:01:33.030 --> 00:01:33.670
<v Speaker 1>dream, my friends.

00:01:34.465 --> 00:01:35.105
<v Speaker 2>Perfect.

00:01:35.345 --> 00:01:36.625
<v Speaker 1>Suck up.

00:01:38.145 --> 00:01:39.505
<v Speaker 1>I gotta keep make sure you keep inviting

00:01:39.505 --> 00:01:40.305
<v Speaker 1>me back.

00:01:43.745 --> 00:01:45.505
<v Speaker 2>Alright. So what what what are we what

00:01:45.505 --> 00:01:46.625
<v Speaker 2>are we each doing here today?

00:01:47.630 --> 00:01:49.870
<v Speaker 1>Well, I'm gonna kick off and kick

00:01:49.870 --> 00:01:51.790
<v Speaker 1>us off and show how

00:01:52.110 --> 00:01:53.310
<v Speaker 1>to provision

00:01:53.630 --> 00:01:54.350
<v Speaker 1>your

00:01:54.590 --> 00:01:55.390
<v Speaker 1>server

00:01:55.390 --> 00:01:58.510
<v Speaker 1>with Ansible and and go ahead and install

00:01:58.510 --> 00:02:00.270
<v Speaker 1>install it as an NGINX

00:02:00.270 --> 00:02:01.630
<v Speaker 1>server and get you up and running.

00:02:04.395 --> 00:02:05.755
<v Speaker 1>Everybody else wanna say what they're doing or

00:02:05.755 --> 00:02:06.634
<v Speaker 1>just jump in?

00:02:08.395 --> 00:02:10.395
<v Speaker 2>Yeah. Sure. I'll be look yep.

00:02:11.275 --> 00:02:11.995
<v Speaker 2>No. You go first.

00:02:14.350 --> 00:02:15.710
<v Speaker 0>I'll be look I'll be looking at doing

00:02:15.710 --> 00:02:18.350
<v Speaker 0>the same with Terraform and Cloud in it.

00:02:19.710 --> 00:02:20.670
<v Speaker 2>And I,

00:02:21.150 --> 00:02:23.310
<v Speaker 2>go figure, I'm doing pretty much the same.

00:02:23.310 --> 00:02:25.390
<v Speaker 2>So I will be using

00:02:25.790 --> 00:02:28.430
<v Speaker 2>following on from what I did last week

00:02:27.195 --> 00:02:29.435
<v Speaker 2>using preliminary automate the bare metal. I'll now

00:02:29.435 --> 00:02:31.435
<v Speaker 2>be using the user data to provision

00:02:31.675 --> 00:02:34.875
<v Speaker 2>SaltStack which will then handle the bit strappy

00:02:34.875 --> 00:02:37.595
<v Speaker 2>process. So we've got three awesome tools all

00:02:37.595 --> 00:02:39.995
<v Speaker 2>doing hopefully close enough to the same thing.

00:02:42.870 --> 00:02:45.190
<v Speaker 2>You wanna share your screen, Tom? Tom, you

00:02:45.190 --> 00:02:46.630
<v Speaker 2>are on mute.

00:02:47.670 --> 00:02:49.430
<v Speaker 1>Perfect. I'm gonna jump in right now.

00:02:50.870 --> 00:02:52.870
<v Speaker 1>Alright. So you can see here, I've got

00:02:52.870 --> 00:02:54.629
<v Speaker 1>our UI so that we can track the

00:02:54.629 --> 00:02:56.629
<v Speaker 1>process and I've got no servers yet.

00:02:57.125 --> 00:03:00.245
<v Speaker 1>What I have here is, we've created a

00:03:00.245 --> 00:03:01.765
<v Speaker 1>project just called demo.

00:03:02.405 --> 00:03:05.364
<v Speaker 1>Within it, we have, we have the commands

00:03:05.364 --> 00:03:06.405
<v Speaker 1>to provision,

00:03:06.405 --> 00:03:09.045
<v Speaker 1>and we set up the Ansible tasks

00:03:09.204 --> 00:03:10.245
<v Speaker 1>of creating

00:03:10.490 --> 00:03:13.050
<v Speaker 1>an Ubuntu device. You can see right here

00:03:13.050 --> 00:03:16.170
<v Speaker 1>that we've already put in our SSH key.

00:03:16.170 --> 00:03:17.610
<v Speaker 2>Can you just put in on that, please,

00:03:17.610 --> 00:03:19.050
<v Speaker 2>Tom? I can.

00:03:22.650 --> 00:03:24.010
<v Speaker 1>Can you see now? Is that good?

00:03:24.935 --> 00:03:25.575
<v Speaker 1>Yeah.

00:03:25.894 --> 00:03:27.974
<v Speaker 1>We've got our project ID which I found

00:03:27.974 --> 00:03:30.694
<v Speaker 1>right here when you're using Edge Metal or

00:03:30.694 --> 00:03:32.935
<v Speaker 1>Equinix Metal. You can see behind the project,

00:03:32.935 --> 00:03:34.694
<v Speaker 1>there's a full project ID. I copied that,

00:03:34.694 --> 00:03:36.855
<v Speaker 1>brought it over. I'm creating

00:03:37.415 --> 00:03:38.534
<v Speaker 1>Metal Monday live.

00:03:39.240 --> 00:03:40.920
<v Speaker 1>I went ahead and decided we're gonna run

00:03:40.920 --> 00:03:42.920
<v Speaker 1>Ubuntu 18 o four,

00:03:43.240 --> 00:03:45.560
<v Speaker 1>picked our server size as a c three

00:03:45.560 --> 00:03:47.880
<v Speaker 1>medium, and I am gonna do this out

00:03:47.880 --> 00:03:49.880
<v Speaker 1>in out of the bay. What we set

00:03:49.880 --> 00:03:52.760
<v Speaker 1>up in the, user data here because what

00:03:52.760 --> 00:03:53.880
<v Speaker 1>we have to do is we have to

00:03:54.105 --> 00:03:56.665
<v Speaker 1>run a local Ansible install to

00:03:57.224 --> 00:03:58.584
<v Speaker 1>install Ansible

00:03:58.584 --> 00:04:00.665
<v Speaker 1>on the server once it's created so that

00:04:00.665 --> 00:04:02.025
<v Speaker 1>Ansible can then

00:04:02.665 --> 00:04:03.465
<v Speaker 1>install

00:04:03.545 --> 00:04:04.345
<v Speaker 1>NGINX.

00:04:04.345 --> 00:04:05.944
<v Speaker 1>So we're getting really meta here. Right?

00:04:07.970 --> 00:04:09.650
<v Speaker 1>And what we have here, we're gonna go

00:04:09.650 --> 00:04:10.930
<v Speaker 1>on and update

00:04:10.930 --> 00:04:12.530
<v Speaker 1>the server once it's up. We're gonna get

00:04:13.010 --> 00:04:14.849
<v Speaker 1>we're gonna pull in Ansible, and we're gonna

00:04:14.849 --> 00:04:16.370
<v Speaker 1>clone a guest that we created.

00:04:16.610 --> 00:04:18.769
<v Speaker 1>So in addition to our local inventory, which

00:04:18.769 --> 00:04:21.584
<v Speaker 1>tells Ansible what to run locally on our

00:04:21.584 --> 00:04:22.225
<v Speaker 1>machine,

00:04:22.705 --> 00:04:25.185
<v Speaker 1>we have set up a guest with an

00:04:25.185 --> 00:04:28.385
<v Speaker 1>inventory that's just setting our route as the

00:04:28.385 --> 00:04:30.945
<v Speaker 1>Ansible user as route, the Ansible host as

00:04:30.945 --> 00:04:32.785
<v Speaker 1>local host, and the Ansible connection as local

00:04:32.785 --> 00:04:35.265
<v Speaker 1>so that everything is being deployed directly onto

00:04:36.520 --> 00:04:37.560
<v Speaker 1>the server.

00:04:37.880 --> 00:04:40.040
<v Speaker 1>And then within our main we've got our

00:04:40.040 --> 00:04:42.440
<v Speaker 1>main dot yaml, which is telling Ansible exactly

00:04:42.440 --> 00:04:44.440
<v Speaker 1>what to do. So with that, we're gonna

00:04:44.440 --> 00:04:45.560
<v Speaker 1>just run

00:04:48.680 --> 00:04:50.520
<v Speaker 1>the Ansible playbook create that we have,

00:04:51.285 --> 00:04:52.805
<v Speaker 1>and we will watch this.

00:04:56.725 --> 00:04:58.725
<v Speaker 1>Ansible, the error arguments required.

00:04:59.604 --> 00:05:01.604
<v Speaker 2>Yeah. So it should be Ansible playbook dash

00:05:01.604 --> 00:05:04.005
<v Speaker 2>I then inventory fail and then We forgot

00:05:04.005 --> 00:05:05.445
<v Speaker 1>the inventory file. Yep. Yeah.

00:05:15.700 --> 00:05:16.100
<v Speaker 1>Here.

00:05:19.775 --> 00:05:22.014
<v Speaker 1>This is why I don't do live demos.

00:05:22.014 --> 00:05:22.495
<v Speaker 1>Right?

00:05:23.055 --> 00:05:24.415
<v Speaker 1>So let's see here.

00:05:26.895 --> 00:05:28.255
<v Speaker 2>Like, want want me to change want me

00:05:28.255 --> 00:05:31.055
<v Speaker 2>to change your life for the better? Yeah.

00:05:31.135 --> 00:05:32.655
<v Speaker 2>Alright. Well, I hit control u.

00:05:36.440 --> 00:05:39.800
<v Speaker 2>Control u. Alright. And then control r.

00:05:41.560 --> 00:05:43.240
<v Speaker 2>And then type ansible.

00:05:44.600 --> 00:05:46.360
<v Speaker 2>And then hit control r again.

00:05:47.880 --> 00:05:48.360
<v Speaker 2>And again.

00:05:49.155 --> 00:05:50.115
<v Speaker 2>And again

00:05:51.315 --> 00:05:53.074
<v Speaker 2>until you find the command.

00:05:54.835 --> 00:05:55.875
<v Speaker 1>It's not there.

00:05:58.514 --> 00:05:59.395
<v Speaker 2>Okay. Control

00:05:59.715 --> 00:06:00.354
<v Speaker 2>c.

00:06:00.675 --> 00:06:00.995
<v Speaker 1>Just

00:06:02.354 --> 00:06:02.595
<v Speaker 1>it out.

00:06:03.440 --> 00:06:05.280
<v Speaker 1>Alright. So let's go here. We've got

00:06:06.080 --> 00:06:07.920
<v Speaker 1>it's a playbook I.

00:06:08.479 --> 00:06:10.720
<v Speaker 1>And we're gonna just pull the inventory file,

00:06:10.800 --> 00:06:13.520
<v Speaker 1>which is in the root. Right? Inventory.

00:06:15.215 --> 00:06:16.175
<v Speaker 2>Mhmm. K.

00:06:17.935 --> 00:06:19.295
<v Speaker 2>And then it should just be the path

00:06:19.295 --> 00:06:21.615
<v Speaker 2>to your playbook. So based on that directory

00:06:21.615 --> 00:06:23.295
<v Speaker 2>tree I see there, I think it's like

00:06:23.295 --> 00:06:26.255
<v Speaker 2>dot slash provision slash task Yep. Slash playbook

00:06:26.255 --> 00:06:26.895
<v Speaker 2>create.

00:06:27.455 --> 00:06:28.415
<v Speaker 1>Book

00:06:28.655 --> 00:06:29.455
<v Speaker 1>create

00:06:29.455 --> 00:06:30.655
<v Speaker 1>dot yaml.

00:06:33.069 --> 00:06:34.669
<v Speaker 2>Phew. And we are in business.

00:06:35.470 --> 00:06:37.630
<v Speaker 1>Okay. Little hiccup from a computer restart, but

00:06:37.630 --> 00:06:39.710
<v Speaker 1>we are good now. Let me refresh this.

00:06:39.710 --> 00:06:41.870
<v Speaker 1>We should see after we've got

00:06:43.975 --> 00:06:46.134
<v Speaker 1>it failed. Can you zoom in on that,

00:06:46.134 --> 00:06:48.775
<v Speaker 2>please? Yeah. It should say my API token.

00:06:50.455 --> 00:06:52.375
<v Speaker 2>Oh, yeah. You'll need to export that. It's

00:06:52.375 --> 00:06:54.615
<v Speaker 1>required. So let's stop sharing while I get

00:06:54.615 --> 00:06:55.414
<v Speaker 1>my API token.

00:06:58.050 --> 00:06:59.729
<v Speaker 2>Welcome to intermission.

00:06:59.969 --> 00:07:02.370
<v Speaker 1>We have this all set up.

00:07:03.009 --> 00:07:03.889
<v Speaker 1>Let's see.

00:07:05.409 --> 00:07:07.009
<v Speaker 2>That's the joy of doing You got some

00:07:08.770 --> 00:07:11.090
<v Speaker 0>have some intermission music, maybe something like Ramstein

00:07:11.090 --> 00:07:11.650
<v Speaker 0>or something.

00:07:13.535 --> 00:07:16.575
<v Speaker 2>No. There's a track from an offspring album,

00:07:16.735 --> 00:07:17.455
<v Speaker 2>actually

00:07:17.935 --> 00:07:20.014
<v Speaker 2>called intermission. And I I well, I used

00:07:20.014 --> 00:07:21.055
<v Speaker 2>to be a DJ in an eight club,

00:07:21.055 --> 00:07:22.095
<v Speaker 2>I used to play that all the time

00:07:22.095 --> 00:07:23.455
<v Speaker 2>to really piss people off.

00:07:25.110 --> 00:07:26.070
<v Speaker 2>Let's see.

00:07:31.270 --> 00:07:32.070
<v Speaker 1>My

00:07:33.350 --> 00:07:35.350
<v Speaker 1>somehow my token disappeared.

00:07:39.075 --> 00:07:40.355
<v Speaker 2>Let's try.

00:07:41.635 --> 00:07:43.075
<v Speaker 1>Get a new one real quick.

00:07:46.755 --> 00:07:48.195
<v Speaker 2>I don't know if this is gonna play

00:07:48.195 --> 00:07:48.915
<v Speaker 2>actually.

00:07:52.355 --> 00:07:54.250
<v Speaker 2>Do you hear that? You I we don't

00:07:54.250 --> 00:07:54.970
<v Speaker 1>hear it.

00:07:55.450 --> 00:07:56.170
<v Speaker 0>No.

00:07:57.930 --> 00:07:58.970
<v Speaker 2>Damn you, computer.

00:08:02.330 --> 00:08:04.330
<v Speaker 1>Alright. Got my new API key. Now we're

00:08:04.330 --> 00:08:06.890
<v Speaker 1>gonna just export it real quick in terminal.

00:08:20.540 --> 00:08:23.260
<v Speaker 1>Okay. Now let's share screen again,

00:08:23.420 --> 00:08:25.020
<v Speaker 1>and we'll give this a second go.

00:08:26.300 --> 00:08:27.820
<v Speaker 2>I've got confidence in you, Tom.

00:08:39.815 --> 00:08:41.095
<v Speaker 1>Alright. Here we go.

00:08:45.495 --> 00:08:46.135
<v Speaker 1>Okay.

00:08:56.100 --> 00:08:59.140
<v Speaker 1>Packet API token. I've got the API token.

00:09:00.964 --> 00:09:02.884
<v Speaker 2>Wait. You flashed it now. You might as

00:09:02.884 --> 00:09:04.324
<v Speaker 2>well just share it and delete it. I

00:09:04.324 --> 00:09:05.925
<v Speaker 1>might as well. We'll just delete it. Yeah.

00:09:05.925 --> 00:09:08.805
<v Speaker 1>We're good. It it was there. Okay.

00:09:09.285 --> 00:09:11.685
<v Speaker 1>So I've got the packet API token here.

00:09:15.380 --> 00:09:15.940
<v Speaker 2>Copy.

00:09:38.700 --> 00:09:40.460
<v Speaker 2>Yeah. The problem with the first one because

00:09:40.460 --> 00:09:41.740
<v Speaker 2>I could see it just The space. In

00:09:41.740 --> 00:09:43.580
<v Speaker 2>there. Yeah. The space. The space in front

00:09:43.580 --> 00:09:44.860
<v Speaker 1>of it. Yep.

00:09:45.180 --> 00:09:45.900
<v Speaker 1>Yep.

00:09:47.500 --> 00:09:49.100
<v Speaker 1>It's that trivial.

00:09:50.060 --> 00:09:51.580
<v Speaker 1>So getting

00:09:55.915 --> 00:09:58.075
<v Speaker 1>a change? Alright. It is done. So let's

00:09:58.075 --> 00:09:59.355
<v Speaker 1>go here and let's look

00:09:59.755 --> 00:10:01.755
<v Speaker 1>at our servers.

00:10:02.635 --> 00:10:04.795
<v Speaker 1>They're deploying. So we can see here exactly

00:10:04.795 --> 00:10:06.394
<v Speaker 1>what's happening just like we did before.

00:10:06.959 --> 00:10:08.639
<v Speaker 1>This will take a little longer than our

00:10:08.639 --> 00:10:09.360
<v Speaker 1>our

00:10:09.519 --> 00:10:11.279
<v Speaker 1>deploy that we did a couple weeks ago

00:10:11.279 --> 00:10:12.639
<v Speaker 1>when we were showing how to do this

00:10:12.639 --> 00:10:13.600
<v Speaker 1>through UI

00:10:13.759 --> 00:10:15.519
<v Speaker 1>because, of course, we're

00:10:15.920 --> 00:10:18.320
<v Speaker 1>provisioning the server and then installing

00:10:18.560 --> 00:10:19.519
<v Speaker 1>NGINX on it.

00:10:20.455 --> 00:10:22.935
<v Speaker 2>Well, main takes a few minutes too. So

00:10:22.935 --> 00:10:24.535
<v Speaker 2>will I swap just now and then we'll

00:10:24.535 --> 00:10:26.375
<v Speaker 2>come back to you? Yeah. Let's do that.

00:10:26.375 --> 00:10:27.975
<v Speaker 1>You can go on and spin yours up.

00:10:27.975 --> 00:10:29.415
<v Speaker 1>And then we'll we'll check them both to

00:10:29.415 --> 00:10:30.455
<v Speaker 1>make sure they work and we'll be good

00:10:30.455 --> 00:10:31.015
<v Speaker 1>to go.

00:10:32.055 --> 00:10:32.535
<v Speaker 2>Nice.

00:10:32.880 --> 00:10:36.320
<v Speaker 2>Okay. So let's see what I have.

00:10:39.040 --> 00:10:41.200
<v Speaker 2>So I'm using Pulumi and TypeScript.

00:10:41.360 --> 00:10:44.400
<v Speaker 2>That's my favorite combination of infrastructures code these

00:10:44.400 --> 00:10:44.640
<v Speaker 2>days.

00:10:45.215 --> 00:10:48.015
<v Speaker 2>Now the reason why, I'll explain.

00:10:48.335 --> 00:10:50.335
<v Speaker 2>In fact, I should spin this up first.

00:10:52.495 --> 00:10:53.935
<v Speaker 2>This is where I'm pulling me up.

00:10:59.820 --> 00:11:02.459
<v Speaker 2>So it's gonna create a salt master and

00:11:02.459 --> 00:11:04.700
<v Speaker 2>two salt minions. We'll hit yes.

00:11:05.420 --> 00:11:06.779
<v Speaker 2>Go away. Okay. So

00:11:07.899 --> 00:11:10.540
<v Speaker 2>the reason I like using Pulumi and TypeScript

00:11:10.540 --> 00:11:12.645
<v Speaker 2>is that I can define helper functions and

00:11:12.645 --> 00:11:13.925
<v Speaker 2>you'll see I'm using a few of them

00:11:13.925 --> 00:11:16.485
<v Speaker 2>here already. So the first one I do

00:11:16.485 --> 00:11:18.565
<v Speaker 2>is usually I provide some sort of platform

00:11:18.565 --> 00:11:20.725
<v Speaker 2>which is like a god object I guess

00:11:20.725 --> 00:11:22.405
<v Speaker 2>where I store the

00:11:23.285 --> 00:11:24.565
<v Speaker 2>the state of the universe.

00:11:25.660 --> 00:11:27.260
<v Speaker 2>I then have a helper function called create

00:11:27.260 --> 00:11:29.580
<v Speaker 2>assault master which just takes in the platform

00:11:29.580 --> 00:11:31.900
<v Speaker 2>and a name and then we export the

00:11:31.900 --> 00:11:34.220
<v Speaker 2>IPv4 address so that it can be consumed

00:11:34.220 --> 00:11:35.420
<v Speaker 2>by other scripts.

00:11:36.620 --> 00:11:39.020
<v Speaker 2>I then have another helper function called create

00:11:39.020 --> 00:11:41.915
<v Speaker 2>assault minion which takes the platform and name,

00:11:41.915 --> 00:11:43.755
<v Speaker 2>but then also the master because we have

00:11:43.755 --> 00:11:46.394
<v Speaker 2>to configure where that master actually is.

00:11:46.954 --> 00:11:49.355
<v Speaker 2>And we can specify the, you know, the

00:11:49.355 --> 00:11:50.875
<v Speaker 2>type of machine that we're looking to use

00:11:50.875 --> 00:11:52.235
<v Speaker 2>in the operating system.

00:11:52.634 --> 00:11:53.995
<v Speaker 2>And I've just made that so that we

00:11:53.995 --> 00:11:56.634
<v Speaker 2>can have a bit of a heterogeneous

00:11:55.890 --> 00:11:58.050
<v Speaker 2>cluster even though I'm not specifically doing that

00:11:58.050 --> 00:11:58.770
<v Speaker 2>anyway.

00:11:59.810 --> 00:12:01.810
<v Speaker 2>The platform object

00:12:01.970 --> 00:12:04.290
<v Speaker 2>really just as a wrapper around some config

00:12:04.290 --> 00:12:05.890
<v Speaker 2>that is required right now so you can

00:12:05.890 --> 00:12:08.130
<v Speaker 2>see that the project ID is returned and

00:12:08.130 --> 00:12:10.805
<v Speaker 2>that's really it for the moment. I won't

00:12:10.805 --> 00:12:12.325
<v Speaker 2>go through all of this code but our

00:12:12.325 --> 00:12:13.765
<v Speaker 2>salt master, we

00:12:14.245 --> 00:12:15.685
<v Speaker 2>actually interpret

00:12:16.085 --> 00:12:18.165
<v Speaker 2>some Python code that we use for salt

00:12:18.165 --> 00:12:19.925
<v Speaker 2>grains which I'll talk about later.

00:12:21.045 --> 00:12:22.885
<v Speaker 2>We then specify all the bits and pieces

00:12:22.885 --> 00:12:24.649
<v Speaker 2>that we need and we pass on the

00:12:24.649 --> 00:12:27.690
<v Speaker 2>user data which we are rendering also using

00:12:27.690 --> 00:12:28.730
<v Speaker 2>mustache.

00:12:28.810 --> 00:12:30.490
<v Speaker 2>One of the really cool things about using

00:12:30.490 --> 00:12:32.250
<v Speaker 2>TypeScript is I have access to all of

00:12:32.250 --> 00:12:34.010
<v Speaker 2>NPM which is pretty sweet.

00:12:35.050 --> 00:12:36.649
<v Speaker 2>Now this is what we pass into the

00:12:36.649 --> 00:12:37.610
<v Speaker 2>user data.

00:12:37.769 --> 00:12:38.410
<v Speaker 2>So you know,

00:12:39.495 --> 00:12:41.735
<v Speaker 2>we've got an apt get update, we install

00:12:41.735 --> 00:12:43.735
<v Speaker 2>salt, we have to kinda work out where

00:12:43.735 --> 00:12:44.295
<v Speaker 2>the

00:12:45.175 --> 00:12:47.335
<v Speaker 2>what address to bind the salt master on,

00:12:47.335 --> 00:12:49.095
<v Speaker 2>so the only lessons on the private network

00:12:49.095 --> 00:12:51.015
<v Speaker 2>and not the public network and that's what

00:12:51.015 --> 00:12:52.535
<v Speaker 2>I'm doing when I write this configuration.

00:12:53.250 --> 00:12:55.250
<v Speaker 2>We also configure the salt master as its

00:12:55.250 --> 00:12:56.130
<v Speaker 2>own minion

00:12:56.450 --> 00:12:58.690
<v Speaker 2>so that it can be provisioned by itself,

00:12:58.690 --> 00:12:59.650
<v Speaker 2>very meta

00:12:59.890 --> 00:13:02.290
<v Speaker 2>and then we configure the startup state. So

00:13:02.290 --> 00:13:04.930
<v Speaker 2>we're actually telling this salt machine, hey, when

00:13:04.930 --> 00:13:07.305
<v Speaker 2>you start the minion process, make sure you're

00:13:07.305 --> 00:13:08.825
<v Speaker 2>in a high state. A high state is

00:13:08.825 --> 00:13:10.185
<v Speaker 2>just what salt calls

00:13:10.585 --> 00:13:11.785
<v Speaker 2>reconciliation.

00:13:11.785 --> 00:13:13.065
<v Speaker 2>It just means hey,

00:13:13.945 --> 00:13:15.945
<v Speaker 2>install or provision or configure whatever we need

00:13:15.945 --> 00:13:17.385
<v Speaker 2>to on this machine every time the salt

00:13:17.385 --> 00:13:18.025
<v Speaker 2>menu starts.

00:13:19.220 --> 00:13:21.940
<v Speaker 2>I'm also using a guest which I'll show

00:13:21.940 --> 00:13:23.380
<v Speaker 2>you in just a second

00:13:24.020 --> 00:13:26.820
<v Speaker 2>because what happens with this user data is

00:13:26.820 --> 00:13:29.380
<v Speaker 2>that it installs salt and then we use

00:13:29.380 --> 00:13:31.620
<v Speaker 2>this guest as a representation of our

00:13:32.605 --> 00:13:35.245
<v Speaker 2>provisioning, our configuration management repository.

00:13:35.644 --> 00:13:36.845
<v Speaker 2>I guess it was just an easy way

00:13:36.845 --> 00:13:38.444
<v Speaker 2>to do that and then we render the

00:13:38.444 --> 00:13:40.125
<v Speaker 2>template and accept the key.

00:13:42.444 --> 00:13:45.165
<v Speaker 2>Let's see. Grab one more tab.

00:13:46.580 --> 00:13:48.580
<v Speaker 2>And

00:13:52.660 --> 00:13:54.820
<v Speaker 2>my guest is as basic as can be.

00:13:54.820 --> 00:13:55.460
<v Speaker 2>So

00:13:55.860 --> 00:13:59.540
<v Speaker 2>although your configuration management repository will be a

00:13:59.540 --> 00:14:01.620
<v Speaker 2>little bit more sophisticated than this.

00:14:02.155 --> 00:14:03.835
<v Speaker 2>For now, I just wanna show

00:14:04.315 --> 00:14:06.155
<v Speaker 2>much in the same way that Tom and

00:14:06.155 --> 00:14:07.675
<v Speaker 2>Jeremy are doing too is that we can

00:14:07.675 --> 00:14:09.755
<v Speaker 2>install NGINX here and you don't have to

00:14:09.755 --> 00:14:11.435
<v Speaker 2>worry about what a top fail is. This

00:14:11.435 --> 00:14:13.435
<v Speaker 2>is just a salt construct. We'll take a

00:14:13.435 --> 00:14:14.075
<v Speaker 2>look at that later.

00:14:15.300 --> 00:14:17.380
<v Speaker 2>Back over to you Tom, we'll come back

00:14:17.380 --> 00:14:18.820
<v Speaker 2>when mains is done.

00:14:20.900 --> 00:14:22.020
<v Speaker 2>Oh, I just

00:14:22.900 --> 00:14:24.260
<v Speaker 2>just booted Tom.

00:14:25.380 --> 00:14:27.220
<v Speaker 2>I meant to stop sharing my screen.

00:14:28.225 --> 00:14:29.584
<v Speaker 2>You meant you'll need to share your screen

00:14:29.584 --> 00:14:32.384
<v Speaker 2>again, Tom. Sorry about that. Alright. So we

00:14:32.384 --> 00:14:34.225
<v Speaker 1>can see here this has

00:14:35.425 --> 00:14:36.225
<v Speaker 1>run.

00:14:36.464 --> 00:14:37.824
<v Speaker 1>It built our

00:14:38.144 --> 00:14:40.064
<v Speaker 1>it provisioned our server. Now what we're gonna

00:14:40.064 --> 00:14:42.464
<v Speaker 1>do is live check and make sure we

00:14:42.740 --> 00:14:43.060
<v Speaker 1>are

00:14:43.620 --> 00:14:45.300
<v Speaker 1>everything worked correctly and see if we have

00:14:45.300 --> 00:14:46.500
<v Speaker 1>our NGINX server.

00:14:47.540 --> 00:14:49.540
<v Speaker 1>And good news. We got exactly what we

00:14:49.540 --> 00:14:52.740
<v Speaker 1>expected. So this all worked. Again, like

00:14:53.300 --> 00:14:54.500
<v Speaker 1>David said,

00:14:54.740 --> 00:14:56.899
<v Speaker 1>your setup, your configuration,

00:14:56.980 --> 00:14:57.540
<v Speaker 1>your

00:14:57.795 --> 00:14:58.995
<v Speaker 1>I guess all of this is gonna be

00:14:58.995 --> 00:15:00.435
<v Speaker 1>different. This is just for a very basic

00:15:00.435 --> 00:15:02.355
<v Speaker 1>NGINX server that we're not actually doing anything

00:15:02.355 --> 00:15:04.515
<v Speaker 1>with yet just to show how it works.

00:15:05.635 --> 00:15:06.755
<v Speaker 1>And I don't think that was enough time

00:15:06.755 --> 00:15:08.515
<v Speaker 1>for yours to provision, was it?

00:15:09.235 --> 00:15:12.755
<v Speaker 2>I I think I I spoke enough that

00:15:11.900 --> 00:15:13.580
<v Speaker 2>mine's probably finished.

00:15:13.980 --> 00:15:16.300
<v Speaker 2>Let me let let's check. Alright?

00:15:17.820 --> 00:15:18.940
<v Speaker 2>New.

00:15:22.460 --> 00:15:24.860
<v Speaker 2>Yeah. It's still creating okay. Because I'm using,

00:15:25.735 --> 00:15:27.334
<v Speaker 2>there's a good point actually.

00:15:27.894 --> 00:15:30.615
<v Speaker 2>There's a dependency in my setup and you

00:15:30.615 --> 00:15:31.415
<v Speaker 2>can see

00:15:31.894 --> 00:15:33.334
<v Speaker 2>when we

00:15:33.814 --> 00:15:35.334
<v Speaker 2>create the minions,

00:15:35.814 --> 00:15:39.175
<v Speaker 2>they have a hard dependency on the salt

00:15:38.820 --> 00:15:41.860
<v Speaker 2>master existing because they need to configure.

00:15:43.380 --> 00:15:45.140
<v Speaker 2>They need the IP address of the salt

00:15:45.140 --> 00:15:47.540
<v Speaker 2>master. So that's why mains is not happening

00:15:47.540 --> 00:15:49.620
<v Speaker 2>in parallel. So my salt master has to

00:15:49.620 --> 00:15:51.700
<v Speaker 2>get healthy first before that IP address can

00:15:51.700 --> 00:15:53.140
<v Speaker 2>be passed on to the minions. So mine

00:15:53.140 --> 00:15:54.915
<v Speaker 2>as well take a few more minutes because

00:15:54.915 --> 00:15:56.115
<v Speaker 2>of that dependency.

00:15:56.435 --> 00:15:58.435
<v Speaker 1>Yours is just phoning home right now.

00:15:59.395 --> 00:16:02.915
<v Speaker 2>Is mine phoning home? Mhmm. I guess, yeah.

00:16:02.915 --> 00:16:04.675
<v Speaker 2>I could always pull up the Echinox console

00:16:04.675 --> 00:16:05.155
<v Speaker 2>right now.

00:16:10.529 --> 00:16:11.810
<v Speaker 2>Which project?

00:16:13.730 --> 00:16:16.529
<v Speaker 2>It'll be this one. Seven one five eight?

00:16:17.490 --> 00:16:18.610
<v Speaker 2>Yeah. That's the one.

00:16:27.945 --> 00:16:29.305
<v Speaker 2>Come on, internet.

00:16:29.625 --> 00:16:31.225
<v Speaker 2>I know I'm streaming but you're better than

00:16:31.225 --> 00:16:31.465
<v Speaker 2>this.

00:16:39.230 --> 00:16:42.670
<v Speaker 2>We have a hello from Atikris eighty four.

00:16:42.670 --> 00:16:44.269
<v Speaker 2>Atikris.

00:16:49.069 --> 00:16:50.509
<v Speaker 2>I just had to go again. There we

00:16:50.509 --> 00:16:50.670
<v Speaker 2>go.

00:16:51.585 --> 00:16:53.985
<v Speaker 2>Let's see what our wonderful progress bar says

00:16:53.985 --> 00:16:56.865
<v Speaker 2>that is phoning home. Let's copy the IP

00:16:56.865 --> 00:16:57.745
<v Speaker 2>address.

00:16:58.625 --> 00:17:00.545
<v Speaker 2>I'll just try and get on it already.

00:17:02.865 --> 00:17:04.544
<v Speaker 2>That's a good sign.

00:17:05.425 --> 00:17:06.305
<v Speaker 2>Ignore that bit.

00:17:08.600 --> 00:17:11.560
<v Speaker 2>Alright. So let's see how far into the

00:17:13.560 --> 00:17:14.920
<v Speaker 2>setup we are.

00:17:15.960 --> 00:17:17.720
<v Speaker 2>Is it done? Okay. Cool.

00:17:18.440 --> 00:17:19.079
<v Speaker 2>So

00:17:19.720 --> 00:17:21.320
<v Speaker 2>this user data

00:17:22.214 --> 00:17:24.214
<v Speaker 2>on the salt master side,

00:17:24.295 --> 00:17:26.214
<v Speaker 2>know, install as a salt master and a

00:17:26.214 --> 00:17:28.615
<v Speaker 2>salt minion. Right? So that can provision itself.

00:17:29.015 --> 00:17:30.375
<v Speaker 2>And then automatically

00:17:30.375 --> 00:17:32.455
<v Speaker 2>accepts its own key

00:17:33.095 --> 00:17:33.735
<v Speaker 2>because

00:17:34.820 --> 00:17:37.940
<v Speaker 2>I'm gonna trust that nothing could interfere with

00:17:37.940 --> 00:17:39.780
<v Speaker 2>that setup in that moment in time and

00:17:39.780 --> 00:17:42.179
<v Speaker 2>that process. I do not automatically set the

00:17:42.179 --> 00:17:44.660
<v Speaker 2>keys from the subsequent menu nodes because that

00:17:44.660 --> 00:17:46.340
<v Speaker 2>would be an attack vector that I'm not

00:17:46.340 --> 00:17:48.815
<v Speaker 2>allowing to protect against right now. All that

00:17:48.815 --> 00:17:50.335
<v Speaker 2>means is that if I run salt key

00:17:50.335 --> 00:17:51.215
<v Speaker 2>dash l,

00:17:51.535 --> 00:17:54.255
<v Speaker 2>we'll see that the master was automatically accepted

00:17:54.335 --> 00:17:57.215
<v Speaker 2>and really to be honest because that's already

00:17:57.215 --> 00:17:58.815
<v Speaker 2>happened, I am gonna assume

00:17:59.929 --> 00:18:01.690
<v Speaker 2>I have NGINX which I do.

00:18:02.650 --> 00:18:04.169
<v Speaker 1>Alright, we're two for two.

00:18:04.490 --> 00:18:06.730
<v Speaker 2>I'm not finished yet Tom. Alright. I was

00:18:06.730 --> 00:18:08.409
<v Speaker 1>just celebrating. I'm excited.

00:18:10.809 --> 00:18:12.970
<v Speaker 2>So we have installed NGINX on the Saltmaster

00:18:12.970 --> 00:18:14.890
<v Speaker 2>but we should now be in a position

00:18:14.890 --> 00:18:17.485
<v Speaker 2>where Pulumi is spinning up our two menu

00:18:17.485 --> 00:18:19.805
<v Speaker 2>notes as well. So what's gonna happen here

00:18:19.805 --> 00:18:21.405
<v Speaker 2>is those two menu notes are gonna come

00:18:21.405 --> 00:18:23.245
<v Speaker 2>online. They're gonna be configured with the IP

00:18:23.245 --> 00:18:25.165
<v Speaker 2>address from my salt master. They're gonna send

00:18:25.165 --> 00:18:27.565
<v Speaker 2>a key request to the salt master

00:18:27.725 --> 00:18:29.245
<v Speaker 2>and I should be able to accept that

00:18:29.245 --> 00:18:30.125
<v Speaker 2>key request too.

00:18:30.809 --> 00:18:32.809
<v Speaker 2>And when I do the high state that

00:18:32.809 --> 00:18:34.889
<v Speaker 2>we've defined as a startup state will run

00:18:34.889 --> 00:18:38.409
<v Speaker 2>on the menu machines and also provision NGINX.

00:18:38.730 --> 00:18:39.209
<v Speaker 2>I

00:18:40.649 --> 00:18:42.409
<v Speaker 2>guess we can trust me for now that

00:18:42.409 --> 00:18:44.009
<v Speaker 2>it works rather than giving us the few

00:18:44.009 --> 00:18:46.325
<v Speaker 2>minutes that we need. I mean, let's see

00:18:46.325 --> 00:18:48.565
<v Speaker 2>how far We can check back. We're not

00:18:48.565 --> 00:18:50.884
<v Speaker 1>very far yet. Alright. Yeah. So we we

00:18:50.884 --> 00:18:52.164
<v Speaker 2>can always check back at that and then

00:18:52.164 --> 00:18:53.044
<v Speaker 2>we can talk about future

00:18:53.524 --> 00:18:54.164
<v Speaker 2>potential Jeremy.

00:18:58.404 --> 00:18:59.919
<v Speaker 1>It's a good thing about doing this together.

00:18:59.919 --> 00:19:01.440
<v Speaker 1>When one of when we stall, we can

00:19:01.440 --> 00:19:02.639
<v Speaker 1>pass it on. Right?

00:19:05.679 --> 00:19:06.559
<v Speaker 0>Perfect.

00:19:06.639 --> 00:19:08.720
<v Speaker 0>Alright. Where are we? Extra screen.

00:19:15.665 --> 00:19:17.345
<v Speaker 2>Jeremy's like, shit. I thought I had more

00:19:17.345 --> 00:19:17.665
<v Speaker 2>time.

00:19:25.610 --> 00:19:26.650
<v Speaker 0>I'll take the

00:19:29.450 --> 00:19:31.609
<v Speaker 0>yeah. Where are we at? We're talking

00:19:32.809 --> 00:19:36.490
<v Speaker 0>using Terraform to add Cloudinet to

00:19:38.155 --> 00:19:40.875
<v Speaker 0>one of our metal servers. So I will

00:19:40.875 --> 00:19:41.755
<v Speaker 0>show

00:19:44.075 --> 00:19:44.955
<v Speaker 0>my

00:19:45.195 --> 00:19:47.595
<v Speaker 0>Metal Monday Terraform config.

00:19:47.915 --> 00:19:49.995
<v Speaker 0>And so that's gonna look very much like

00:19:49.995 --> 00:19:50.715
<v Speaker 0>the

00:19:51.190 --> 00:19:53.430
<v Speaker 0>one that we saw in in weeks past.

00:19:53.430 --> 00:19:55.670
<v Speaker 0>We can probably provide a provide a link

00:19:55.670 --> 00:19:56.710
<v Speaker 0>to that, but

00:19:57.670 --> 00:19:59.190
<v Speaker 0>our provider

00:19:59.590 --> 00:20:01.670
<v Speaker 0>still named packet, so that'll still work.

00:20:02.950 --> 00:20:05.430
<v Speaker 0>You've seen the portion with a project ID

00:20:05.430 --> 00:20:06.985
<v Speaker 0>and so on. The,

00:20:07.625 --> 00:20:09.544
<v Speaker 0>only two parts here that are changed

00:20:09.784 --> 00:20:11.384
<v Speaker 0>are adding a

00:20:11.465 --> 00:20:12.345
<v Speaker 0>template

00:20:12.345 --> 00:20:13.065
<v Speaker 0>file,

00:20:13.465 --> 00:20:16.184
<v Speaker 0>an example from our friends at HashiCorp that

00:20:16.184 --> 00:20:18.984
<v Speaker 0>has brings up a Go web application,

00:20:19.945 --> 00:20:20.424
<v Speaker 0>and,

00:20:20.985 --> 00:20:22.025
<v Speaker 0>that'll be

00:20:22.570 --> 00:20:25.370
<v Speaker 0>injected into the user data when our

00:20:25.850 --> 00:20:28.810
<v Speaker 0>machine that we're calling Metal Monday, a t

00:20:28.810 --> 00:20:32.410
<v Speaker 0>one small in New Jersey with Ubuntu

00:20:32.570 --> 00:20:33.610
<v Speaker 0>and our

00:20:34.090 --> 00:20:35.370
<v Speaker 0>SSH key

00:20:35.865 --> 00:20:37.225
<v Speaker 0>comes up.

00:20:37.705 --> 00:20:38.664
<v Speaker 0>And so

00:20:38.905 --> 00:20:40.105
<v Speaker 0>going over to

00:20:44.185 --> 00:20:46.425
<v Speaker 0>I will drop in here what the

00:20:47.890 --> 00:20:50.450
<v Speaker 0>what that particular ad web app YAML file

00:20:50.450 --> 00:20:51.169
<v Speaker 0>looks like.

00:21:04.505 --> 00:21:06.105
<v Speaker 0>And that's just getting

00:21:08.025 --> 00:21:09.304
<v Speaker 0>a go link package,

00:21:10.105 --> 00:21:11.304
<v Speaker 0>make me a directory,

00:21:12.105 --> 00:21:14.810
<v Speaker 0>putting that in the path, and then grabbing

00:21:14.810 --> 00:21:17.450
<v Speaker 0>the example code from

00:21:17.530 --> 00:21:18.409
<v Speaker 0>GitHub.

00:21:21.050 --> 00:21:22.169
<v Speaker 0>And then now

00:21:22.970 --> 00:21:24.650
<v Speaker 0>that looks like

00:21:26.025 --> 00:21:29.065
<v Speaker 0>there is a I had the foresight

00:21:29.065 --> 00:21:30.905
<v Speaker 0>to to poke the button

00:21:31.065 --> 00:21:32.025
<v Speaker 0>and

00:21:33.065 --> 00:21:35.705
<v Speaker 0>and bring up that machine already, and let's

00:21:35.705 --> 00:21:37.065
<v Speaker 0>see if it's in our

00:21:38.985 --> 00:21:40.185
<v Speaker 0>in our dashboard.

00:21:44.860 --> 00:21:46.620
<v Speaker 0>Yeah. There's one called OpenNebula.

00:21:46.620 --> 00:21:48.780
<v Speaker 0>And so if I if I rerun that,

00:21:48.780 --> 00:21:50.620
<v Speaker 0>it'll probably give it the give it the

00:21:50.620 --> 00:21:51.659
<v Speaker 0>correct name.

00:21:51.740 --> 00:21:53.900
<v Speaker 0>But it looks like that is

00:21:56.515 --> 00:21:57.955
<v Speaker 0>up and running.

00:21:58.035 --> 00:21:59.395
<v Speaker 0>And we'll

00:22:02.835 --> 00:22:05.075
<v Speaker 0>check back into that machine in just a

00:22:05.075 --> 00:22:06.995
<v Speaker 0>moment to see if it's run the

00:22:08.210 --> 00:22:09.809
<v Speaker 0>run that cloud in it.

00:22:13.810 --> 00:22:14.290
<v Speaker 0>Okay.

00:22:22.665 --> 00:22:24.585
<v Speaker 0>Do you have a I Let's swipe back

00:22:24.585 --> 00:22:25.865
<v Speaker 0>to you let's swipe back to yours for

00:22:25.865 --> 00:22:27.145
<v Speaker 0>validation real quick.

00:22:30.025 --> 00:22:31.145
<v Speaker 2>So mine's just finished.

00:22:31.880 --> 00:22:33.720
<v Speaker 2>Thank you for filling up some time.

00:22:34.120 --> 00:22:35.240
<v Speaker 0>So

00:22:36.760 --> 00:22:39.160
<v Speaker 2>the menus were much quicker than my slot

00:22:39.160 --> 00:22:41.320
<v Speaker 2>master, which was good. Plus they could happen

00:22:41.320 --> 00:22:43.559
<v Speaker 2>concurrently because there was no dependencies.

00:22:43.560 --> 00:22:45.415
<v Speaker 2>So what that means is

00:22:46.615 --> 00:22:47.495
<v Speaker 2>we can

00:22:47.735 --> 00:22:49.895
<v Speaker 2>browse to here and

00:22:50.055 --> 00:22:51.735
<v Speaker 2>I've not checked. There

00:22:52.295 --> 00:22:54.215
<v Speaker 2>won't be any NGINX yet,

00:22:54.295 --> 00:22:56.775
<v Speaker 2>of course, because we have the key problem.

00:22:56.775 --> 00:22:56.935
<v Speaker 2>So

00:22:57.870 --> 00:23:00.429
<v Speaker 2>if I hit there, yep. Not working.

00:23:01.470 --> 00:23:03.470
<v Speaker 2>So we can jump back onto that salt

00:23:03.470 --> 00:23:04.509
<v Speaker 2>master.

00:23:05.150 --> 00:23:06.830
<v Speaker 2>Is that the right IP address? Nope. I've

00:23:06.830 --> 00:23:08.110
<v Speaker 2>just used an old one.

00:23:08.430 --> 00:23:09.470
<v Speaker 2>Let's

00:23:09.470 --> 00:23:10.190
<v Speaker 2>copy that.

00:23:13.304 --> 00:23:14.825
<v Speaker 2>Okay. I had it here, didn't I? There

00:23:14.825 --> 00:23:16.985
<v Speaker 2>we go. We can run salt key dash

00:23:16.985 --> 00:23:18.184
<v Speaker 2>l and what we should see now is

00:23:18.184 --> 00:23:20.105
<v Speaker 2>that we have two unaccepted keys from menu

00:23:20.105 --> 00:23:21.465
<v Speaker 2>one and menu two.

00:23:21.705 --> 00:23:23.304
<v Speaker 2>I can just go ahead and say accept

00:23:23.304 --> 00:23:25.945
<v Speaker 2>all of those. I'm pretty confident that those

00:23:25.945 --> 00:23:27.225
<v Speaker 2>are the two machine types back.

00:23:27.990 --> 00:23:30.470
<v Speaker 2>Run stop key dash l and we now

00:23:30.470 --> 00:23:32.230
<v Speaker 2>have three accepted keys.

00:23:33.350 --> 00:23:35.270
<v Speaker 2>Now I'm not gonna do anything else because

00:23:35.270 --> 00:23:37.990
<v Speaker 2>we're gonna rely on the high state startup

00:23:37.990 --> 00:23:39.670
<v Speaker 2>state to do everything that we need.

00:23:40.595 --> 00:23:41.475
<v Speaker 2>Which means,

00:23:42.355 --> 00:23:43.635
<v Speaker 2>if I hit refresh,

00:23:43.795 --> 00:23:45.635
<v Speaker 2>we now have NGINX across all of those

00:23:45.635 --> 00:23:46.355
<v Speaker 2>machines.

00:23:46.915 --> 00:23:47.955
<v Speaker 1>That was fast.

00:23:48.675 --> 00:23:50.915
<v Speaker 2>Yeah. Cell stack is ridiculously

00:23:50.915 --> 00:23:53.155
<v Speaker 2>fast. That was fast. You know, if I

00:23:53.155 --> 00:23:55.659
<v Speaker 2>do like salt star test a ping, know,

00:23:55.659 --> 00:23:57.500
<v Speaker 2>we can execute arbitrary commands on all of

00:23:57.500 --> 00:23:59.739
<v Speaker 2>these. I really do love salt stack.

00:24:00.140 --> 00:24:01.019
<v Speaker 2>Let's do

00:24:01.740 --> 00:24:02.859
<v Speaker 2>who am I?

00:24:03.820 --> 00:24:05.659
<v Speaker 2>You know, so I mean, I think that's

00:24:05.659 --> 00:24:07.179
<v Speaker 2>one of the superpowers of salt and I

00:24:07.179 --> 00:24:08.539
<v Speaker 2>won't spend too much time on it because

00:24:08.539 --> 00:24:10.705
<v Speaker 2>it's the premise or the concept of what

00:24:10.705 --> 00:24:12.865
<v Speaker 2>we're trying to portray today. But I definitely

00:24:12.865 --> 00:24:15.345
<v Speaker 2>will be doing much more content on salt.

00:24:15.345 --> 00:24:17.664
<v Speaker 2>As that is an event queue driven system,

00:24:17.825 --> 00:24:19.905
<v Speaker 2>when every time we execute a command here

00:24:19.905 --> 00:24:21.505
<v Speaker 2>or test up paying or any sort of

00:24:21.505 --> 00:24:23.105
<v Speaker 2>state that we want to run, it publishes

00:24:23.105 --> 00:24:24.970
<v Speaker 2>a message on the queue which are consumed

00:24:24.970 --> 00:24:27.130
<v Speaker 2>concurrently and in parallel by all the minion

00:24:27.130 --> 00:24:29.770
<v Speaker 2>machines who then send a response back along

00:24:29.770 --> 00:24:33.609
<v Speaker 2>the event bus. So it scales ridiculously.

00:24:34.409 --> 00:24:36.250
<v Speaker 2>Doesn't matter if you're running a single machine

00:24:36.250 --> 00:24:38.970
<v Speaker 2>or thousands of machines, SaltStack is a pretty

00:24:38.970 --> 00:24:39.610
<v Speaker 2>wicked tool.

00:24:41.424 --> 00:24:42.065
<v Speaker 2>And

00:24:42.945 --> 00:24:45.344
<v Speaker 2>you know, guest was really simple.

00:24:45.904 --> 00:24:47.585
<v Speaker 2>You know, this is what it took to

00:24:47.585 --> 00:24:49.424
<v Speaker 2>install NGINX for me to use the machines.

00:24:49.424 --> 00:24:51.585
<v Speaker 2>I just say, hey, there's this package called

00:24:51.585 --> 00:24:53.105
<v Speaker 2>NGINX and I want you to install it

00:24:53.105 --> 00:24:54.705
<v Speaker 2>for me and it just kinda works.

00:24:55.590 --> 00:24:57.269
<v Speaker 2>So very very cool software.

00:25:00.950 --> 00:25:03.509
<v Speaker 2>Yeah. Awesome. I'm very happy with that.

00:25:04.230 --> 00:25:05.990
<v Speaker 1>I am too. I'm pretty impressed by the

00:25:05.990 --> 00:25:06.230
<v Speaker 1>speed.

00:25:07.414 --> 00:25:08.534
<v Speaker 2>Yeah. Definitely.

00:25:08.934 --> 00:25:10.375
<v Speaker 1>Especially comparing it to what we were just

00:25:10.375 --> 00:25:11.654
<v Speaker 1>doing with Ansible. Right?

00:25:12.615 --> 00:25:14.934
<v Speaker 2>So I mean, I guess we can talk

00:25:14.934 --> 00:25:17.495
<v Speaker 2>about the differences between these these approaches and

00:25:17.495 --> 00:25:18.855
<v Speaker 2>then the cloud and that one as well

00:25:18.855 --> 00:25:19.335
<v Speaker 2>is that,

00:25:19.910 --> 00:25:21.269
<v Speaker 2>you know. So

00:25:22.710 --> 00:25:24.710
<v Speaker 2>bootstrapping process is very different from what you

00:25:24.710 --> 00:25:26.070
<v Speaker 2>did, from what I did and and what

00:25:26.070 --> 00:25:27.750
<v Speaker 2>Jeremy is doing for each of those. We

00:25:27.750 --> 00:25:29.030
<v Speaker 2>can I guess if we wanna talk about

00:25:29.030 --> 00:25:30.470
<v Speaker 2>the pros and cons or anything like that,

00:25:30.470 --> 00:25:30.630
<v Speaker 2>but

00:25:31.605 --> 00:25:32.804
<v Speaker 2>your process

00:25:32.804 --> 00:25:34.164
<v Speaker 2>Tom was

00:25:34.165 --> 00:25:36.245
<v Speaker 2>you run Ansible in your own machine

00:25:36.645 --> 00:25:37.205
<v Speaker 2>Mhmm?

00:25:37.684 --> 00:25:40.245
<v Speaker 2>To speak to the Equinix metal API, the

00:25:40.245 --> 00:25:42.485
<v Speaker 2>provision and instance, the user data that you

00:25:42.485 --> 00:25:45.620
<v Speaker 2>write as a bash script which installs Ansible,

00:25:45.620 --> 00:25:48.340
<v Speaker 2>pulls down an Ansible playbook and then runs

00:25:48.340 --> 00:25:48.899
<v Speaker 2>it.

00:25:50.020 --> 00:25:51.940
<v Speaker 2>That is great for people that are familiar

00:25:51.940 --> 00:25:52.980
<v Speaker 2>with Ansible,

00:25:53.460 --> 00:25:55.620
<v Speaker 2>but there's no constant reconciliation.

00:25:55.620 --> 00:25:57.140
<v Speaker 2>Ansible is

00:25:58.235 --> 00:25:59.995
<v Speaker 2>Ansible is a task winner

00:26:00.395 --> 00:26:01.915
<v Speaker 2>and so if you want to if you

00:26:01.915 --> 00:26:03.595
<v Speaker 2>want to reprovision that machine or make sure

00:26:03.595 --> 00:26:05.275
<v Speaker 2>that it always stays in checks and the

00:26:05.275 --> 00:26:06.955
<v Speaker 2>only option that you have is to have

00:26:06.955 --> 00:26:08.715
<v Speaker 2>a cron job that runs every hour, every

00:26:08.715 --> 00:26:10.475
<v Speaker 2>day, every week and runs the same playbook

00:26:10.475 --> 00:26:11.435
<v Speaker 2>and runs the same playbook.

00:26:12.250 --> 00:26:14.570
<v Speaker 2>What's different to the salt approach is that

00:26:14.570 --> 00:26:17.130
<v Speaker 2>I have Pulumi which spends up the instance,

00:26:17.130 --> 00:26:18.809
<v Speaker 2>it writes the bash script user data, so

00:26:18.809 --> 00:26:20.330
<v Speaker 2>very similar to what you did.

00:26:21.130 --> 00:26:23.210
<v Speaker 2>My user data also installs salt but once

00:26:23.210 --> 00:26:24.010
<v Speaker 2>salt is running,

00:26:25.385 --> 00:26:26.825
<v Speaker 2>it runs forever.

00:26:27.304 --> 00:26:29.784
<v Speaker 2>It's continually setting there running, it's gonna always

00:26:29.784 --> 00:26:31.304
<v Speaker 2>make sure that the state that we need

00:26:31.304 --> 00:26:32.345
<v Speaker 2>to be in, that's what the high state

00:26:32.345 --> 00:26:33.784
<v Speaker 2>means, it's like make sure this machine is

00:26:33.784 --> 00:26:34.984
<v Speaker 2>always in the state.

00:26:35.625 --> 00:26:37.465
<v Speaker 2>And salt will make sure that if engine

00:26:37.465 --> 00:26:39.280
<v Speaker 2>x is ever removed, it re installs it,

00:26:39.280 --> 00:26:41.440
<v Speaker 2>if the fail gets changed, it reconfigures it

00:26:41.440 --> 00:26:43.680
<v Speaker 2>etcetera. So the slightly different ways of working

00:26:43.680 --> 00:26:45.360
<v Speaker 2>depending on your use case.

00:26:46.000 --> 00:26:48.240
<v Speaker 2>Sure. The downside to my approach is that

00:26:48.240 --> 00:26:49.120
<v Speaker 2>salt is always running.

00:26:51.485 --> 00:26:53.485
<v Speaker 2>SALT does, SALT is not

00:26:55.005 --> 00:26:57.725
<v Speaker 2>it's had CVEs as recently as last week,

00:26:57.725 --> 00:26:59.165
<v Speaker 2>you know. So

00:26:59.405 --> 00:27:00.205
<v Speaker 2>when I,

00:27:00.605 --> 00:27:02.125
<v Speaker 2>what I mean by that, I'll try not

00:27:02.125 --> 00:27:03.645
<v Speaker 0>to mince my words too much but

00:27:04.210 --> 00:27:06.930
<v Speaker 2>I can run any command I want on

00:27:06.930 --> 00:27:07.810
<v Speaker 2>this machine.

00:27:08.450 --> 00:27:10.530
<v Speaker 2>Alright. I mean I don't care about these

00:27:10.530 --> 00:27:12.290
<v Speaker 0>boxes anymore and that should fail because it

00:27:12.290 --> 00:27:13.650
<v Speaker 0>should tell me that I need no preserve

00:27:13.650 --> 00:27:14.290
<v Speaker 2>root.

00:27:15.090 --> 00:27:15.410
<v Speaker 2>So

00:27:15.904 --> 00:27:16.784
<v Speaker 2>there we go.

00:27:17.664 --> 00:27:20.065
<v Speaker 2>So I didn't blow away those boxes but

00:27:20.465 --> 00:27:22.384
<v Speaker 2>you can see how dangerous that

00:27:22.465 --> 00:27:23.104
<v Speaker 2>is.

00:27:23.585 --> 00:27:25.985
<v Speaker 2>So if someone can't We can can see

00:27:25.985 --> 00:27:26.544
<v Speaker 0>it see it.

00:27:27.919 --> 00:27:28.639
<v Speaker 2>Oh.

00:27:30.960 --> 00:27:32.879
<v Speaker 2>Oh, yeah. There we go. Yay.

00:27:34.720 --> 00:27:36.080
<v Speaker 2>So you could see I I have to

00:27:36.080 --> 00:27:38.320
<v Speaker 0>speak for the audience. Yes. Thanks. I I

00:27:38.320 --> 00:27:39.919
<v Speaker 2>was thought I was still sharing my screen.

00:27:40.240 --> 00:27:42.434
<v Speaker 2>But you could see how dangerous the salt

00:27:42.434 --> 00:27:45.554
<v Speaker 2>master running there. Now I've taken some precautions

00:27:45.554 --> 00:27:47.315
<v Speaker 2>and that a, I only bind the salt

00:27:47.315 --> 00:27:49.315
<v Speaker 2>API to the private network on the Equinix

00:27:49.315 --> 00:27:52.195
<v Speaker 2>metal machines. Right? So like, there's no public

00:27:52.195 --> 00:27:53.315
<v Speaker 2>attack vector here.

00:27:53.635 --> 00:27:56.115
<v Speaker 2>However, have other software on the machines which

00:27:56.115 --> 00:27:58.590
<v Speaker 2>then exposes the host to that attacker, they

00:27:58.590 --> 00:28:00.270
<v Speaker 2>then have access to they have the ability

00:28:00.270 --> 00:28:02.430
<v Speaker 2>to run any arbitrary command across my entire

00:28:02.430 --> 00:28:03.390
<v Speaker 2>infrastructure

00:28:03.710 --> 00:28:04.990
<v Speaker 2>at a drop of a hat.

00:28:05.710 --> 00:28:07.390
<v Speaker 2>So yeah, reconciliation,

00:28:07.390 --> 00:28:08.990
<v Speaker 2>that style is great but we have to

00:28:08.990 --> 00:28:11.005
<v Speaker 2>be careful about that being used as an

00:28:11.005 --> 00:28:12.925
<v Speaker 2>attack factor. As I said, Salt has had

00:28:12.925 --> 00:28:13.804
<v Speaker 0>CVEs

00:28:13.885 --> 00:28:15.965
<v Speaker 0>last week and had CVEs last year. It's

00:28:15.965 --> 00:28:18.205
<v Speaker 0>always gonna have CVEs probably for remote code

00:28:18.205 --> 00:28:19.005
<v Speaker 0>execution.

00:28:19.085 --> 00:28:21.085
<v Speaker 0>So keep it patched, keep updated, but you

00:28:21.085 --> 00:28:22.525
<v Speaker 0>know, there's a lot of power in having

00:28:22.525 --> 00:28:24.205
<v Speaker 0>that available to us. Whereas Ansible

00:28:24.630 --> 00:28:27.110
<v Speaker 0>doesn't have that attack surface because we have

00:28:27.110 --> 00:28:28.950
<v Speaker 0>to initiate that task run, it's not always

00:28:28.950 --> 00:28:31.590
<v Speaker 0>there etcetera. So pros and cons to both

00:28:31.590 --> 00:28:33.830
<v Speaker 2>is I guess really what I was saying.

00:28:36.710 --> 00:28:38.785
<v Speaker 2>Unsure. What I would suggest, I mean, if

00:28:38.785 --> 00:28:40.625
<v Speaker 2>if you're watching and you have questions,

00:28:41.185 --> 00:28:42.545
<v Speaker 2>maybe we can try and

00:28:43.425 --> 00:28:45.985
<v Speaker 2>Jeremy, you want to show anything else? Yeah.

00:28:45.985 --> 00:28:46.705
<v Speaker 0>Yeah. Yeah. We're

00:28:47.745 --> 00:28:49.665
<v Speaker 2>Before I just keep waffling and take up

00:28:49.665 --> 00:28:50.225
<v Speaker 2>all of our time.

00:28:52.330 --> 00:28:54.489
<v Speaker 0>We're back to screen number two. And so

00:28:54.730 --> 00:28:57.210
<v Speaker 0>I was going to once the once the

00:28:57.210 --> 00:28:58.489
<v Speaker 0>machine had come up,

00:28:58.809 --> 00:29:00.009
<v Speaker 0>take and

00:29:00.409 --> 00:29:01.529
<v Speaker 0>go visit it.

00:29:01.850 --> 00:29:02.249
<v Speaker 0>So

00:29:03.690 --> 00:29:05.610
<v Speaker 0>drag a terminal back in here. Perfect.

00:29:08.735 --> 00:29:10.174
<v Speaker 0>That's the IP

00:29:10.255 --> 00:29:11.294
<v Speaker 0>of the

00:29:11.615 --> 00:29:13.374
<v Speaker 0>docs, which is

00:29:14.895 --> 00:29:17.535
<v Speaker 0>that's coming from here. And so here is

00:29:17.535 --> 00:29:18.174
<v Speaker 0>our

00:29:19.615 --> 00:29:20.975
<v Speaker 0>here is our dashboard.

00:29:20.975 --> 00:29:21.855
<v Speaker 0>Right now, we have

00:29:24.510 --> 00:29:26.910
<v Speaker 0>80 1 40 7 70 5 70 8

00:29:26.910 --> 00:29:27.710
<v Speaker 0>11.

00:29:28.990 --> 00:29:31.549
<v Speaker 0>Telling you this makes no difference because you

00:29:31.549 --> 00:29:32.669
<v Speaker 0>don't have my

00:29:33.309 --> 00:29:34.190
<v Speaker 0>private key.

00:29:36.135 --> 00:29:37.414
<v Speaker 0>And so

00:29:38.215 --> 00:29:39.575
<v Speaker 0>we are on that

00:29:41.335 --> 00:29:43.575
<v Speaker 0>there now. If we want to see what

00:29:43.575 --> 00:29:44.534
<v Speaker 0>what

00:29:45.415 --> 00:29:48.135
<v Speaker 0>went into this machine as user data,

00:29:48.535 --> 00:29:50.375
<v Speaker 0>we can take and click on the

00:29:50.940 --> 00:29:52.539
<v Speaker 0>correct window here.

00:29:57.659 --> 00:30:00.140
<v Speaker 0>There it is. Yep. So we said we

00:30:00.140 --> 00:30:01.419
<v Speaker 0>want the packages

00:30:01.659 --> 00:30:02.380
<v Speaker 0>go and go.

00:30:03.965 --> 00:30:05.805
<v Speaker 0>We want to create a

00:30:07.005 --> 00:30:08.205
<v Speaker 0>create that directory,

00:30:09.245 --> 00:30:11.085
<v Speaker 0>put it in the path, and get

00:30:12.685 --> 00:30:13.485
<v Speaker 0>and

00:30:14.205 --> 00:30:16.045
<v Speaker 0>we pulled down that code from GitHub.

00:30:17.590 --> 00:30:19.350
<v Speaker 0>Looks like that was the thing that happened.

00:30:20.150 --> 00:30:21.590
<v Speaker 0>I'm trapped on the edge of my screen

00:30:21.590 --> 00:30:23.350
<v Speaker 0>because I'm running a second one here.

00:30:24.630 --> 00:30:26.790
<v Speaker 0>And they're arrayed up and down instead of

00:30:26.790 --> 00:30:29.350
<v Speaker 0>side by side because, of course, they are.

00:30:30.415 --> 00:30:31.215
<v Speaker 2>Nice.

00:30:34.335 --> 00:30:37.215
<v Speaker 0>Okay. We will swap over to

00:30:47.440 --> 00:30:50.000
<v Speaker 0>That should've been a thing. Is there a

00:30:50.000 --> 00:30:50.720
<v Speaker 0>code there?

00:30:55.695 --> 00:30:57.695
<v Speaker 2>Yeah. You're in the home directory and not

00:30:57.695 --> 00:30:59.455
<v Speaker 2>the home Terraform.

00:30:59.775 --> 00:31:00.095
<v Speaker 2>Yeah.

00:31:09.430 --> 00:31:10.309
<v Speaker 0>Okay.

00:31:12.390 --> 00:31:14.470
<v Speaker 0>I wanna be in, Go.

00:31:28.845 --> 00:31:29.804
<v Speaker 2>Rawkode.

00:31:30.525 --> 00:31:31.245
<v Speaker 0>Yeah.

00:31:33.725 --> 00:31:34.765
<v Speaker 0>There should be a

00:31:38.365 --> 00:31:38.925
<v Speaker 2>So, I mean,

00:31:40.190 --> 00:31:42.190
<v Speaker 2>I could try and speculate if you want

00:31:42.190 --> 00:31:44.270
<v Speaker 2>or do you want a minute? I mean

00:31:44.430 --> 00:31:45.870
<v Speaker 0>No. Go for it.

00:31:46.910 --> 00:31:47.630
<v Speaker 2>So

00:31:47.790 --> 00:31:49.390
<v Speaker 2>it looks like

00:31:49.790 --> 00:31:52.045
<v Speaker 2>the run commands have happened. Right? Because I

00:31:52.045 --> 00:31:54.445
<v Speaker 2>do see the go terraform go and export

00:31:54.445 --> 00:31:56.125
<v Speaker 2>path. The directory is there.

00:31:56.605 --> 00:32:00.044
<v Speaker 2>But yeah. I'm assuming the go get failed.

00:32:01.965 --> 00:32:04.060
<v Speaker 2>I mean, can confirm that. There's a code

00:32:04.060 --> 00:32:06.780
<v Speaker 2>and a log output and bar log, etcetera.

00:32:06.780 --> 00:32:07.820
<v Speaker 2>We could take a look in that and

00:32:07.820 --> 00:32:08.780
<v Speaker 2>see what happens.

00:32:08.940 --> 00:32:10.060
<v Speaker 2>But I think it was close.

00:32:17.185 --> 00:32:19.105
<v Speaker 0>Yeah. I could either do that or just

00:32:19.105 --> 00:32:20.544
<v Speaker 0>go grab it go

00:32:20.865 --> 00:32:22.385
<v Speaker 0>go grab it again, but that sort of

00:32:22.385 --> 00:32:23.585
<v Speaker 0>defeats the purpose.

00:32:25.905 --> 00:32:27.825
<v Speaker 2>Alright. We could just talk about it a

00:32:27.825 --> 00:32:29.665
<v Speaker 2>certain way because I think, like, we still

00:32:29.665 --> 00:32:31.505
<v Speaker 2>got a few questions we can answer.

00:32:31.905 --> 00:32:32.385
<v Speaker 0>Sure enough.

00:32:34.600 --> 00:32:36.200
<v Speaker 2>So I don't know about

00:32:36.920 --> 00:32:37.639
<v Speaker 2>y'all,

00:32:37.800 --> 00:32:39.399
<v Speaker 2>but when I speak to people,

00:32:40.120 --> 00:32:41.480
<v Speaker 2>you know, one of the one of the

00:32:41.480 --> 00:32:44.280
<v Speaker 2>challenges that they have is like there there's

00:32:44.280 --> 00:32:46.680
<v Speaker 2>really good tooling and we've covered many examples

00:32:46.680 --> 00:32:48.434
<v Speaker 2>of this now about how do I get

00:32:48.434 --> 00:32:50.514
<v Speaker 2>a machine on Equinix metal.

00:32:50.995 --> 00:32:52.835
<v Speaker 2>But then the the challenge after that is

00:32:52.835 --> 00:32:54.835
<v Speaker 2>is how, you know, the bootstrapping process, what

00:32:54.835 --> 00:32:56.595
<v Speaker 2>we're covering today is how do I get

00:32:56.595 --> 00:32:58.515
<v Speaker 2>something on it that can then provision what

00:32:58.515 --> 00:33:00.755
<v Speaker 2>I want? Like I have configuration management and

00:33:00.755 --> 00:33:02.300
<v Speaker 2>I have the ability to spin up the

00:33:02.300 --> 00:33:04.140
<v Speaker 2>devices, how do I manage them together? And

00:33:04.140 --> 00:33:04.779
<v Speaker 2>I think,

00:33:05.260 --> 00:33:07.260
<v Speaker 2>you know, the three examples we've provided today

00:33:07.260 --> 00:33:09.900
<v Speaker 2>of using user data or using cloud in

00:33:09.900 --> 00:33:12.220
<v Speaker 2>it to then bootstrap the machine to get

00:33:12.220 --> 00:33:14.060
<v Speaker 2>it in a position where it can begin

00:33:14.495 --> 00:33:17.775
<v Speaker 2>to function, to serve software, to serve users,

00:33:17.775 --> 00:33:20.015
<v Speaker 2>etcetera. It's just something that can be a

00:33:20.015 --> 00:33:21.695
<v Speaker 2>little bit tricky to navigate and I think

00:33:21.695 --> 00:33:24.335
<v Speaker 2>we were showing three really practical ways of

00:33:24.335 --> 00:33:25.855
<v Speaker 2>handling that step.

00:33:27.230 --> 00:33:28.830
<v Speaker 2>I mean, I think Mainz is the best,

00:33:29.070 --> 00:33:31.310
<v Speaker 2>but, you know, no disrespect to Clued in

00:33:31.310 --> 00:33:32.910
<v Speaker 2>it or Ansible, but I'm a big soul

00:33:32.910 --> 00:33:33.710
<v Speaker 2>advocate.

00:33:33.950 --> 00:33:35.310
<v Speaker 2>I think it's an awesome tool.

00:33:37.070 --> 00:33:38.270
<v Speaker 2>Anything you just wanna add?

00:33:39.884 --> 00:33:42.044
<v Speaker 0>Yeah. I suppose that's not those aren't the

00:33:42.044 --> 00:33:44.044
<v Speaker 0>only ones just as we showed multiple ways

00:33:44.044 --> 00:33:46.684
<v Speaker 0>to do things before. There's the there's the

00:33:46.684 --> 00:33:47.884
<v Speaker 0>language SDKs.

00:33:47.884 --> 00:33:49.644
<v Speaker 0>The you can you can accomplish the same

00:33:49.644 --> 00:33:51.085
<v Speaker 0>thing because all of these

00:33:51.809 --> 00:33:53.970
<v Speaker 0>all of these methods are using the API.

00:33:53.970 --> 00:33:56.610
<v Speaker 0>And so if you wanna make handcrafted artisanal

00:33:56.610 --> 00:33:59.330
<v Speaker 0>API requests or roll your own for a

00:33:59.330 --> 00:34:00.849
<v Speaker 0>very specific use case,

00:34:01.490 --> 00:34:03.330
<v Speaker 0>you can go you can go that way

00:34:03.330 --> 00:34:03.649
<v Speaker 0>also.

00:34:06.075 --> 00:34:07.355
<v Speaker 2>Yeah. Definitely.

00:34:07.435 --> 00:34:09.435
<v Speaker 2>There's

00:34:09.435 --> 00:34:12.074
<v Speaker 2>definitely many, many ways to cover this this

00:34:12.074 --> 00:34:13.675
<v Speaker 2>this gap, I guess.

00:34:17.275 --> 00:34:17.755
<v Speaker 2>Tom?

00:34:20.560 --> 00:34:21.119
<v Speaker 2>He's got

00:34:25.199 --> 00:34:27.600
<v Speaker 2>Tom, you're on mute. You're on mute. Again,

00:34:27.600 --> 00:34:29.600
<v Speaker 2>man. Nope. Yes. Yes. There are sorry. I

00:34:29.600 --> 00:34:31.920
<v Speaker 1>had a barking dog I didn't think everybody

00:34:31.920 --> 00:34:32.880
<v Speaker 1>would wanna listen to.

00:34:33.815 --> 00:34:35.175
<v Speaker 2>We like dogs here.

00:34:36.534 --> 00:34:38.694
<v Speaker 1>I have a my my dogs were yipping

00:34:38.694 --> 00:34:40.534
<v Speaker 1>at the front door, so not the most

00:34:40.694 --> 00:34:42.214
<v Speaker 1>exciting noise in the background. But now that

00:34:42.214 --> 00:34:43.815
<v Speaker 1>I guess I took the time to explain

00:34:43.815 --> 00:34:44.934
<v Speaker 1>that, it would have been just easier to

00:34:44.934 --> 00:34:45.654
<v Speaker 1>let them bark. Right?

00:34:47.570 --> 00:34:49.650
<v Speaker 2>Or you could just remember to unmute and

00:34:49.650 --> 00:34:50.690
<v Speaker 2>be professional.

00:34:50.770 --> 00:34:53.890
<v Speaker 2>Ouch.

00:34:55.890 --> 00:34:57.970
<v Speaker 2>Too harsh for the morning time. I forget

00:34:57.970 --> 00:34:59.010
<v Speaker 2>that it's early for you both.

00:35:00.905 --> 00:35:03.065
<v Speaker 2>Alright. I'll rain the sarcasm in.

00:35:05.145 --> 00:35:06.744
<v Speaker 2>Yeah, I think we've shown some really cool

00:35:06.744 --> 00:35:08.665
<v Speaker 2>tools here. I mean, Ansible and Salt Sack

00:35:08.665 --> 00:35:10.744
<v Speaker 2>are really popular. Cloud on it is extremely

00:35:10.744 --> 00:35:13.305
<v Speaker 2>popular too, know. Being comfortable with these tools

00:35:13.305 --> 00:35:14.825
<v Speaker 2>and understanding how to apply them in this

00:35:14.825 --> 00:35:16.744
<v Speaker 2>in this form, I think is really important.

00:35:17.680 --> 00:35:19.200
<v Speaker 2>And let us know or reach out to

00:35:19.200 --> 00:35:21.440
<v Speaker 2>us on Twitter or in the comment section

00:35:21.440 --> 00:35:23.440
<v Speaker 2>and let us know what else or problems

00:35:23.440 --> 00:35:26.320
<v Speaker 2>you have scaling your bare metal deployments and

00:35:26.320 --> 00:35:28.880
<v Speaker 2>we'll be sure to purchase more content with

00:35:28.880 --> 00:35:31.120
<v Speaker 2>some solutions and I'm sure many more challenges

00:35:31.120 --> 00:35:31.600
<v Speaker 2>as well.

00:35:34.184 --> 00:35:35.865
<v Speaker 1>Yep. What is that what is that Twitter

00:35:35.865 --> 00:35:36.505
<v Speaker 0>account?

00:35:39.785 --> 00:35:40.905
<v Speaker 2>On you go, Tom.

00:35:41.305 --> 00:35:43.225
<v Speaker 1>Oh, at equinix

00:35:43.545 --> 00:35:46.664
<v Speaker 1>metal, e q u I n I x

00:35:46.710 --> 00:35:49.270
<v Speaker 1>metal, m e t a l. And, yeah,

00:35:49.270 --> 00:35:50.470
<v Speaker 1>you can ask any questions. We'd love to

00:35:50.470 --> 00:35:52.150
<v Speaker 1>start getting more involvement from you all, letting

00:35:52.150 --> 00:35:53.430
<v Speaker 1>us know what you wanna hear on Metal

00:35:53.430 --> 00:35:54.070
<v Speaker 1>Mondays.

00:35:54.950 --> 00:35:57.270
<v Speaker 0>K. We also hang out on Slack.

00:35:57.510 --> 00:36:01.270
<v Speaker 0>And as you might expect, that's slack.equinixmetal.com

00:36:01.704 --> 00:36:03.545
<v Speaker 0>and available for

00:36:03.944 --> 00:36:06.025
<v Speaker 0>questions. Or if you've done something that you're

00:36:06.025 --> 00:36:07.224
<v Speaker 0>very proud of and would like to show

00:36:07.224 --> 00:36:09.944
<v Speaker 0>it off, I'd love to see it. Yep.

00:36:09.944 --> 00:36:10.665
<v Speaker 1>For sure.

00:36:12.665 --> 00:36:15.480
<v Speaker 2>Awesome. Well, thank you for joining us again.

00:36:15.480 --> 00:36:18.600
<v Speaker 2>We will be back next Monday with more

00:36:18.600 --> 00:36:20.360
<v Speaker 2>cool stuff. I don't know what that is

00:36:20.360 --> 00:36:21.560
<v Speaker 2>yet. We'll need to

00:36:22.600 --> 00:36:24.440
<v Speaker 2>have a quick consult.

00:36:24.520 --> 00:36:27.995
<v Speaker 2>But we will do something extremely awesome. Right?

00:36:27.995 --> 00:36:28.875
<v Speaker 2>Hopefully,

00:36:28.955 --> 00:36:30.235
<v Speaker 2>maybe. Kinda.

00:36:30.715 --> 00:36:31.835
<v Speaker 1>Extremely

00:36:31.835 --> 00:36:33.835
<v Speaker 1>awesome and totally metal. I've got nowhere to

00:36:33.835 --> 00:36:35.195
<v Speaker 2>go here. Some did take me out this

00:36:35.195 --> 00:36:36.235
<v Speaker 2>hole really quickly, but

00:36:37.835 --> 00:36:39.435
<v Speaker 1>That's when you just end with a quick

00:36:39.435 --> 00:36:41.920
<v Speaker 1>buy and kill the feed. Right? Yeah. We

00:36:41.920 --> 00:36:43.920
<v Speaker 0>work. Yeah. Yeah. I I think mom's calling.

00:36:45.520 --> 00:36:46.240
<v Speaker 1>Alright.

00:36:46.960 --> 00:36:48.560
<v Speaker 1>We'll be back next week. Thank you for

00:36:48.560 --> 00:36:49.760
<v Speaker 2>tuning in, and we'll speak to you all

00:36:49.760 --> 00:36:51.600
<v Speaker 2>soon. Have a nice day. Cheers. Happy Monday.
