WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: bb8d054f-b485-4a91-8dce-b36afa346c75
Created: 2025-04-29T18:16:59.666Z
Duration: 4065.96
Channels: 1

00:00:53.210 --> 00:00:55.850
<v Speaker 0>Hello and welcome to another episode of Rawkode

00:00:55.850 --> 00:00:57.930
<v Speaker 0>live. I am your host Rawkode.

00:00:58.170 --> 00:00:59.530
<v Speaker 0>Today we are going to be taking a

00:00:59.530 --> 00:01:00.650
<v Speaker 0>look at Pixie,

00:01:00.650 --> 00:01:04.250
<v Speaker 0>an open source tool for zero code instrumentation

00:01:04.250 --> 00:01:06.010
<v Speaker 0>of Kubernetes and your applications.

00:01:06.625 --> 00:01:08.304
<v Speaker 0>Before we take a look at that, there's

00:01:08.304 --> 00:01:09.585
<v Speaker 0>a little bit of housekeeping.

00:01:09.984 --> 00:01:12.064
<v Speaker 0>If you're not already subscribed to the YouTube

00:01:12.064 --> 00:01:13.585
<v Speaker 0>channel, I would encourage you to do so

00:01:13.585 --> 00:01:15.664
<v Speaker 0>now. Click subscribe and click the bell and

00:01:15.664 --> 00:01:17.744
<v Speaker 0>you will get notifications for all new episodes

00:01:17.744 --> 00:01:20.100
<v Speaker 0>of Rawkode live. Every week, I try to

00:01:20.100 --> 00:01:22.100
<v Speaker 0>explore as much of the cloud native ecosystem

00:01:22.100 --> 00:01:23.860
<v Speaker 0>as I can to bring you all of

00:01:23.860 --> 00:01:25.220
<v Speaker 0>the knowledge that you need to learn this

00:01:25.220 --> 00:01:26.020
<v Speaker 0>mess together.

00:01:26.340 --> 00:01:28.100
<v Speaker 0>And of course, we have a Discord server

00:01:28.100 --> 00:01:29.780
<v Speaker 0>available at Rawkode.chat.

00:01:29.780 --> 00:01:31.860
<v Speaker 0>If you wanna chat about Kubernetes, Cloud Native,

00:01:31.860 --> 00:01:33.745
<v Speaker 0>Rock Music or anything in between, come and

00:01:33.745 --> 00:01:35.665
<v Speaker 0>say hello. There's over 400 of us in

00:01:35.665 --> 00:01:38.065
<v Speaker 0>there now chatting away, having some fun.

00:01:38.705 --> 00:01:41.105
<v Speaker 0>Alright. Now, Pixie. In order to guide me

00:01:41.105 --> 00:01:43.105
<v Speaker 0>today, I'm joined by Natalie Serino from the

00:01:43.105 --> 00:01:45.105
<v Speaker 0>Pixie team. Hi there, Natalie. How are you?

00:01:45.760 --> 00:01:47.920
<v Speaker 1>Hey there. Doing great. How are you doing?

00:01:48.000 --> 00:01:50.400
<v Speaker 0>I'm very well. Thank you. Thank you for

00:01:50.400 --> 00:01:53.360
<v Speaker 0>joining us today. Can you just take a

00:01:53.360 --> 00:01:55.200
<v Speaker 0>few moments to share a little bit about

00:01:55.200 --> 00:01:56.560
<v Speaker 0>you and tell us who you are?

00:01:57.360 --> 00:01:59.280
<v Speaker 1>Yeah, totally. So

00:01:59.695 --> 00:02:02.975
<v Speaker 1>I am Natalie. I am a engineer on

00:02:02.975 --> 00:02:04.335
<v Speaker 1>the Pixie team.

00:02:05.455 --> 00:02:06.255
<v Speaker 1>Pixie

00:02:06.575 --> 00:02:09.135
<v Speaker 1>was acquired by New Relic in December and

00:02:09.135 --> 00:02:11.775
<v Speaker 1>so part of that company as well.

00:02:13.680 --> 00:02:16.240
<v Speaker 1>Before I came in the observability space, was

00:02:16.240 --> 00:02:17.920
<v Speaker 1>in the data space. So I guess that's

00:02:17.920 --> 00:02:20.560
<v Speaker 1>my little micro background and wanted to go

00:02:20.560 --> 00:02:22.880
<v Speaker 1>look for interesting data problems and I think

00:02:22.880 --> 00:02:24.800
<v Speaker 1>observability is a great example of one of

00:02:24.800 --> 00:02:24.960
<v Speaker 1>them.

00:02:26.685 --> 00:02:28.765
<v Speaker 0>Awesome. Yeah. There's there's definitely a lot of

00:02:28.765 --> 00:02:31.245
<v Speaker 0>data in the observability space especially as we

00:02:31.245 --> 00:02:33.965
<v Speaker 0>are starting to see more teams and organizations,

00:02:33.965 --> 00:02:36.845
<v Speaker 0>adult micro services with distributed tracing, like that

00:02:36.845 --> 00:02:38.765
<v Speaker 0>data is growing at crazy rates.

00:02:40.709 --> 00:02:43.030
<v Speaker 1>Yep. And like most data problems like, you

00:02:43.030 --> 00:02:45.269
<v Speaker 1>know, collecting the data is half the battle.

00:02:45.269 --> 00:02:45.750
<v Speaker 1>Yes.

00:02:47.030 --> 00:02:47.830
<v Speaker 0>Definitely.

00:02:47.909 --> 00:02:49.830
<v Speaker 0>And I'm I mean, let let's just start

00:02:49.830 --> 00:02:51.909
<v Speaker 0>talking about Pixie because I'm I'm really curious.

00:02:51.909 --> 00:02:54.015
<v Speaker 0>This has been one of the the most

00:02:54.015 --> 00:02:56.255
<v Speaker 0>requested technologies that I've been asked to cover

00:02:56.255 --> 00:02:57.935
<v Speaker 0>on this show. So I'm really excited to

00:02:57.935 --> 00:03:00.175
<v Speaker 0>bring this to people but it says here

00:03:00.175 --> 00:03:02.255
<v Speaker 0>on the website that we can instantly debug

00:03:02.255 --> 00:03:03.935
<v Speaker 0>applications on Kubernetes

00:03:04.175 --> 00:03:06.735
<v Speaker 0>and it doesn't require any instrumentation.

00:03:06.735 --> 00:03:08.175
<v Speaker 0>Do you wanna share a little bit about

00:03:08.175 --> 00:03:08.335
<v Speaker 0>that?

00:03:09.370 --> 00:03:11.610
<v Speaker 1>Yeah. I think that that's a really exciting

00:03:11.610 --> 00:03:14.170
<v Speaker 1>thing about Pixie that drew me to working

00:03:14.170 --> 00:03:16.570
<v Speaker 1>on the project in the first place because

00:03:16.890 --> 00:03:17.930
<v Speaker 1>I think that,

00:03:18.810 --> 00:03:20.570
<v Speaker 1>you know, historically,

00:03:20.570 --> 00:03:22.650
<v Speaker 1>there's been a lot of challenge with collecting

00:03:22.650 --> 00:03:24.805
<v Speaker 1>the data that we need in order to

00:03:24.805 --> 00:03:28.005
<v Speaker 1>successfully debug our production systems. And, you know,

00:03:28.005 --> 00:03:28.565
<v Speaker 1>what,

00:03:29.125 --> 00:03:31.605
<v Speaker 1>myself and the other members of Pixie found

00:03:31.605 --> 00:03:34.725
<v Speaker 1>in the past is that debugging your developer

00:03:34.725 --> 00:03:37.525
<v Speaker 1>environment is one thing, but debugging a production

00:03:37.525 --> 00:03:39.550
<v Speaker 1>environment is completely different.

00:03:39.790 --> 00:03:40.270
<v Speaker 1>And,

00:03:40.750 --> 00:03:42.430
<v Speaker 1>it feels like you're riding blind a lot

00:03:42.430 --> 00:03:44.269
<v Speaker 1>of the time, and we'd like to have

00:03:44.269 --> 00:03:46.030
<v Speaker 1>access to a lot of the same data

00:03:46.030 --> 00:03:48.110
<v Speaker 1>that we can easily get in our development

00:03:48.110 --> 00:03:48.990
<v Speaker 1>environments.

00:03:49.470 --> 00:03:51.230
<v Speaker 1>So I think that was kind of one

00:03:51.230 --> 00:03:53.605
<v Speaker 1>of the initial inspirations for it. And,

00:03:54.325 --> 00:03:56.005
<v Speaker 1>you know, this coincided

00:03:56.245 --> 00:03:57.045
<v Speaker 1>with

00:03:57.045 --> 00:03:57.765
<v Speaker 1>the,

00:03:57.845 --> 00:03:59.765
<v Speaker 1>you know, kind of popularization

00:03:59.765 --> 00:04:00.485
<v Speaker 1>and,

00:04:01.285 --> 00:04:04.644
<v Speaker 1>you know, adoption of eBPF in the Linux

00:04:04.644 --> 00:04:05.445
<v Speaker 1>kernel,

00:04:05.605 --> 00:04:06.405
<v Speaker 1>popularized,

00:04:06.405 --> 00:04:08.485
<v Speaker 1>like, in large part by Brendan Gregg who

00:04:08.850 --> 00:04:10.450
<v Speaker 1>has done a lot of amazing work in

00:04:10.450 --> 00:04:11.650
<v Speaker 1>the space. And

00:04:12.850 --> 00:04:14.530
<v Speaker 1>I guess just a little bit of background

00:04:14.530 --> 00:04:16.850
<v Speaker 1>on eBPF for people who, you know, aren't

00:04:16.850 --> 00:04:18.050
<v Speaker 1>as familiar with it.

00:04:18.850 --> 00:04:19.890
<v Speaker 1>It's basically

00:04:20.050 --> 00:04:21.570
<v Speaker 1>like, I think of it as a way

00:04:21.570 --> 00:04:23.975
<v Speaker 1>of registering hooks in the Linux kernel.

00:04:24.294 --> 00:04:26.935
<v Speaker 1>So anytime you open a file or anytime

00:04:26.935 --> 00:04:29.255
<v Speaker 1>you drop a packet or anytime,

00:04:29.655 --> 00:04:31.735
<v Speaker 1>you know, you receive a request on the

00:04:31.735 --> 00:04:34.294
<v Speaker 1>network, all these things you can put hooks

00:04:34.294 --> 00:04:35.335
<v Speaker 1>into and,

00:04:35.735 --> 00:04:37.335
<v Speaker 1>you know, tell the kernel to run a

00:04:37.335 --> 00:04:40.910
<v Speaker 1>function that you register with it. And that

00:04:40.910 --> 00:04:41.710
<v Speaker 1>actually

00:04:41.789 --> 00:04:43.790
<v Speaker 1>has huge, huge

00:04:44.669 --> 00:04:47.550
<v Speaker 1>benefits for things like security where you can

00:04:47.550 --> 00:04:49.789
<v Speaker 1>use it to put in really,

00:04:50.030 --> 00:04:53.065
<v Speaker 1>advanced in networking rules, but it also has

00:04:53.065 --> 00:04:55.625
<v Speaker 1>great implications for observability because

00:04:55.865 --> 00:04:58.665
<v Speaker 1>it basically gives us a handle on the

00:04:58.665 --> 00:05:02.104
<v Speaker 1>total state of your system without having to

00:05:02.104 --> 00:05:03.544
<v Speaker 1>put any code changes

00:05:03.990 --> 00:05:07.030
<v Speaker 1>or anything like that in to collect that

00:05:07.030 --> 00:05:10.150
<v Speaker 1>data. And we found that we can collect

00:05:10.150 --> 00:05:12.150
<v Speaker 1>a very rich set of data and we're

00:05:12.150 --> 00:05:13.590
<v Speaker 1>only scratching the surface.

00:05:14.389 --> 00:05:17.030
<v Speaker 1>We can use eBPF and Pixie to automatically

00:05:17.030 --> 00:05:17.669
<v Speaker 1>collect

00:05:17.895 --> 00:05:19.895
<v Speaker 1>full body requests made by,

00:05:20.215 --> 00:05:21.815
<v Speaker 1>you know, anywhere in your cluster,

00:05:22.375 --> 00:05:23.415
<v Speaker 1>you know, DNS

00:05:23.574 --> 00:05:25.495
<v Speaker 1>stuff, you know, MySQL,

00:05:25.574 --> 00:05:26.455
<v Speaker 1>Postgres,

00:05:26.775 --> 00:05:29.574
<v Speaker 1>and also things like network statistics and system

00:05:29.574 --> 00:05:32.300
<v Speaker 1>metrics. So we're really excited because

00:05:32.620 --> 00:05:34.620
<v Speaker 1>in, you know, basically what you'll see as

00:05:34.620 --> 00:05:37.420
<v Speaker 1>a pretty quick deploy process, you basically get

00:05:37.420 --> 00:05:39.980
<v Speaker 1>all that information immediately when it would have

00:05:39.980 --> 00:05:41.260
<v Speaker 1>previously taken months to get.

00:05:43.414 --> 00:05:46.615
<v Speaker 0>Yeah. Definitely. I think EBPF is just one

00:05:46.615 --> 00:05:48.455
<v Speaker 0>of the coolest technologies that we have right

00:05:48.455 --> 00:05:50.935
<v Speaker 0>now. There's there's so much cool stuff you

00:05:50.935 --> 00:05:52.215
<v Speaker 0>can do with it with regards to these

00:05:52.215 --> 00:05:54.535
<v Speaker 0>probes and the kernel hooks and and such.

00:05:54.535 --> 00:05:56.439
<v Speaker 0>I was I had never really thought about

00:05:56.439 --> 00:05:59.080
<v Speaker 0>it before as an application for collecting telemetry

00:05:59.080 --> 00:06:00.759
<v Speaker 0>but it's like without having to modify my

00:06:00.759 --> 00:06:02.919
<v Speaker 0>code but you know what now that I've

00:06:02.919 --> 00:06:05.240
<v Speaker 0>seen Pixie's website and I've heard you talk

00:06:05.240 --> 00:06:06.680
<v Speaker 0>about it like I'm like yeah, like why

00:06:06.680 --> 00:06:09.035
<v Speaker 0>why wouldn't we do this because you know,

00:06:09.035 --> 00:06:10.875
<v Speaker 0>the kernel is our our application is an

00:06:10.875 --> 00:06:12.715
<v Speaker 0>interface to the kernel like we

00:06:12.955 --> 00:06:15.675
<v Speaker 0>already know what's happening at some level within

00:06:15.675 --> 00:06:16.555
<v Speaker 0>that stack.

00:06:16.795 --> 00:06:19.355
<v Speaker 0>There's metrics from it and other things.

00:06:20.715 --> 00:06:21.035
<v Speaker 0>Okay.

00:06:22.360 --> 00:06:23.240
<v Speaker 0>Also, there's

00:06:24.040 --> 00:06:25.400
<v Speaker 0>I should really just show my screen. Shouldn't

00:06:25.400 --> 00:06:27.160
<v Speaker 0>I? Let's pop that up. There

00:06:27.640 --> 00:06:29.320
<v Speaker 0>was a oh, no. It's gone. There was

00:06:29.320 --> 00:06:31.160
<v Speaker 0>a banner at the top that says that

00:06:31.160 --> 00:06:33.960
<v Speaker 0>Pixie is moving to the CNCF as well.

00:06:33.960 --> 00:06:36.120
<v Speaker 0>So the Pixie is completely open source and

00:06:36.120 --> 00:06:38.414
<v Speaker 0>soon to be a CNCF sandbox project. Project.

00:06:38.414 --> 00:06:39.455
<v Speaker 0>Is is that correct?

00:06:39.935 --> 00:06:41.615
<v Speaker 1>Yeah. I'm really glad you brought that up

00:06:41.615 --> 00:06:44.574
<v Speaker 1>because it's, you know, recent news and we're

00:06:44.574 --> 00:06:45.935
<v Speaker 1>so excited about it.

00:06:47.055 --> 00:06:50.175
<v Speaker 1>So I guess just like little historically, Pixie

00:06:50.254 --> 00:06:52.895
<v Speaker 1>was originally a startup. And then when,

00:06:53.410 --> 00:06:55.650
<v Speaker 1>you know, we decided to partner up with

00:06:55.650 --> 00:06:57.810
<v Speaker 1>New Relic and, you know, join them,

00:06:58.370 --> 00:07:00.290
<v Speaker 1>you know, we were really excited that they

00:07:00.290 --> 00:07:02.770
<v Speaker 1>shared our vision of reaching even more developers

00:07:02.770 --> 00:07:05.570
<v Speaker 1>than before. And, you know, in this space,

00:07:05.570 --> 00:07:06.210
<v Speaker 1>you know,

00:07:07.125 --> 00:07:09.445
<v Speaker 1>open source is really important for people. People

00:07:09.445 --> 00:07:11.685
<v Speaker 1>really like to build on top of open

00:07:11.685 --> 00:07:14.725
<v Speaker 1>source stacks. And so we were really, really

00:07:14.725 --> 00:07:16.965
<v Speaker 1>happy that they shared our vision of turning

00:07:16.965 --> 00:07:19.125
<v Speaker 1>Pixie into an open source project.

00:07:19.685 --> 00:07:20.245
<v Speaker 1>And

00:07:20.580 --> 00:07:22.020
<v Speaker 1>with the CNCF,

00:07:22.020 --> 00:07:24.500
<v Speaker 1>with the amazing caliber of projects that they

00:07:24.500 --> 00:07:27.860
<v Speaker 1>have in, you know, in the CNCF, we're

00:07:27.860 --> 00:07:30.260
<v Speaker 1>so thrilled to be a sandbox project that

00:07:30.260 --> 00:07:30.820
<v Speaker 1>was,

00:07:31.220 --> 00:07:33.380
<v Speaker 1>you know, made a formal few weeks ago

00:07:33.380 --> 00:07:35.220
<v Speaker 1>that they've decided to accept us as a

00:07:35.220 --> 00:07:38.795
<v Speaker 1>sandbox project. And so we're really excited to

00:07:38.795 --> 00:07:41.675
<v Speaker 1>have, you know, like, tighter relationships with those

00:07:41.675 --> 00:07:44.635
<v Speaker 1>projects and also just show our commitment to

00:07:44.635 --> 00:07:46.955
<v Speaker 1>remaining a truly open source project.

00:07:47.755 --> 00:07:50.970
<v Speaker 1>Pixie is entirely open source and licensed under

00:07:50.970 --> 00:07:52.810
<v Speaker 1>Apache two point o, and it's gonna stay

00:07:52.810 --> 00:07:54.970
<v Speaker 1>that way. So that's our commitment to our

00:07:54.970 --> 00:07:57.930
<v Speaker 1>users that that is what the situation is

00:07:57.930 --> 00:08:00.570
<v Speaker 1>gonna be going forward, and joining CNCF is

00:08:00.570 --> 00:08:01.690
<v Speaker 1>a good way to show that.

00:08:03.055 --> 00:08:05.535
<v Speaker 0>Alright. So everyone watching today

00:08:05.775 --> 00:08:08.495
<v Speaker 0>has the opportunity to learn Pixie, use it

00:08:08.495 --> 00:08:10.495
<v Speaker 0>in their own applications and never have to

00:08:10.495 --> 00:08:12.014
<v Speaker 0>pay a dime, which I think is pretty

00:08:12.014 --> 00:08:14.335
<v Speaker 0>sweet. And they don't have to use New

00:08:14.335 --> 00:08:16.014
<v Speaker 0>Relic just to clarify, right? Like you can

00:08:16.014 --> 00:08:18.415
<v Speaker 0>use Pixie without using New Relic at all.

00:08:18.480 --> 00:08:20.560
<v Speaker 0>So New Relic are essentially just

00:08:21.360 --> 00:08:22.320
<v Speaker 0>helping

00:08:22.320 --> 00:08:25.120
<v Speaker 0>Pixie grow but not integrate and enter product

00:08:25.120 --> 00:08:27.280
<v Speaker 0>or something like that? Like Pixie is its

00:08:27.280 --> 00:08:29.920
<v Speaker 0>own thing, right? Yeah. It's a good question.

00:08:29.920 --> 00:08:30.480
<v Speaker 1>So,

00:08:31.280 --> 00:08:33.505
<v Speaker 1>you know, if you if you were wanting

00:08:33.505 --> 00:08:35.745
<v Speaker 1>to use the purely open source, like self

00:08:35.745 --> 00:08:38.225
<v Speaker 1>hosted version of Pixie, all of those components

00:08:38.225 --> 00:08:40.945
<v Speaker 1>are available and we have docs on how

00:08:40.945 --> 00:08:43.585
<v Speaker 1>to get started with that. We also have

00:08:43.745 --> 00:08:46.785
<v Speaker 1>a version of Pixie where the cloud component

00:08:46.785 --> 00:08:47.779
<v Speaker 1>is hosted,

00:08:48.260 --> 00:08:49.060
<v Speaker 1>by us,

00:08:50.100 --> 00:08:51.540
<v Speaker 1>with a very,

00:08:51.540 --> 00:08:53.940
<v Speaker 1>very generous free tier where,

00:08:54.660 --> 00:08:56.339
<v Speaker 1>you know, if you want to do a

00:08:56.339 --> 00:08:58.500
<v Speaker 1>little bit less legwork in getting started,

00:08:58.980 --> 00:09:02.565
<v Speaker 1>then you can, you know, have us host

00:09:02.565 --> 00:09:03.845
<v Speaker 1>the cloud side of that.

00:09:04.725 --> 00:09:07.125
<v Speaker 1>Now New Relic has really awesome integrations with

00:09:07.125 --> 00:09:09.285
<v Speaker 1>Pixie, but Pixie is its own thing. So

00:09:09.285 --> 00:09:10.485
<v Speaker 1>you don't have to use New Relic to

00:09:10.485 --> 00:09:11.445
<v Speaker 1>use Pixie.

00:09:12.325 --> 00:09:12.965
<v Speaker 0>Awesome.

00:09:13.925 --> 00:09:16.165
<v Speaker 0>Okay. Should we get this installed into our

00:09:16.165 --> 00:09:16.485
<v Speaker 0>cluster?

00:09:16.980 --> 00:09:18.019
<v Speaker 1>Let's do it.

00:09:18.899 --> 00:09:21.060
<v Speaker 0>Alright. Now I can already tell from the

00:09:21.060 --> 00:09:24.339
<v Speaker 0>homepage here, we have every developer's favorite

00:09:24.579 --> 00:09:26.579
<v Speaker 0>curl bash. Is that the way that you

00:09:26.579 --> 00:09:27.779
<v Speaker 0>must install today?

00:09:28.100 --> 00:09:29.540
<v Speaker 1>Yeah. I mean, if you go into our

00:09:29.540 --> 00:09:31.725
<v Speaker 1>docs, you can see that there's other ways

00:09:31.725 --> 00:09:34.285
<v Speaker 1>to install as well for people that prefer

00:09:34.285 --> 00:09:35.245
<v Speaker 1>other modes.

00:09:35.964 --> 00:09:37.565
<v Speaker 1>But I think that

00:09:38.445 --> 00:09:40.845
<v Speaker 1>yeah. If you go to install schemes,

00:09:41.805 --> 00:09:43.325
<v Speaker 1>and you can just click on the, like,

00:09:43.325 --> 00:09:45.325
<v Speaker 1>a parent of that, like, schemes.

00:09:45.930 --> 00:09:48.650
<v Speaker 1>Oh, yeah. Never mind. It just did what?

00:09:49.050 --> 00:09:51.529
<v Speaker 1>But we have helm based and, you know,

00:09:51.529 --> 00:09:53.690
<v Speaker 1>YAML based installs as well for people who

00:09:53.690 --> 00:09:55.130
<v Speaker 1>prefer to go that route.

00:09:56.810 --> 00:09:58.890
<v Speaker 1>But I think that for the purposes of

00:09:58.890 --> 00:10:00.810
<v Speaker 1>this, I think that I recommend

00:10:01.305 --> 00:10:04.024
<v Speaker 1>starting with the bash based install. Yep. You

00:10:04.024 --> 00:10:06.105
<v Speaker 0>don't have to convince me. I'm so Okay.

00:10:07.464 --> 00:10:10.425
<v Speaker 0>So, this is obviously running on my local

00:10:10.425 --> 00:10:13.145
<v Speaker 0>machine. So, is this going to install Pixie

00:10:13.225 --> 00:10:15.360
<v Speaker 0>CLI to my machine? Is it gonna install

00:10:15.360 --> 00:10:17.360
<v Speaker 0>something to my Kubernetes cluster? What should I

00:10:17.360 --> 00:10:18.160
<v Speaker 0>expect here?

00:10:18.879 --> 00:10:20.879
<v Speaker 1>So what this is gonna do is install

00:10:20.879 --> 00:10:23.600
<v Speaker 1>the Pixie CLI locally to you and you're

00:10:23.600 --> 00:10:24.399
<v Speaker 1>going to

00:10:25.040 --> 00:10:25.839
<v Speaker 1>authenticate

00:10:26.079 --> 00:10:26.720
<v Speaker 1>with

00:10:27.035 --> 00:10:27.915
<v Speaker 1>oh, I,

00:10:28.475 --> 00:10:31.035
<v Speaker 1>we use Gmail or G Suite for authentication

00:10:31.035 --> 00:10:33.915
<v Speaker 1>in this version, so hopefully that's okay and

00:10:33.915 --> 00:10:35.675
<v Speaker 1>you have a personal Gmail account you can

00:10:35.675 --> 00:10:37.915
<v Speaker 1>link it to. Yeah. No problem.

00:10:39.035 --> 00:10:40.955
<v Speaker 1>So it's gonna install a CLI and then

00:10:40.955 --> 00:10:44.290
<v Speaker 1>basically ask you to sign up. Oh, you'll

00:10:44.290 --> 00:10:45.570
<v Speaker 1>wanna sign up actually

00:10:46.290 --> 00:10:48.050
<v Speaker 1>unless you've logged in before.

00:10:48.610 --> 00:10:50.050
<v Speaker 0>Oh, yeah. Yeah. Okay.

00:10:50.610 --> 00:10:51.570
<v Speaker 0>Good catch.

00:10:51.810 --> 00:10:52.770
<v Speaker 1>Yeah. Yeah.

00:10:53.089 --> 00:10:54.290
<v Speaker 1>Sign up with Google.

00:10:54.850 --> 00:10:56.850
<v Speaker 1>And then if that's a good Gmail for

00:10:56.850 --> 00:10:58.050
<v Speaker 1>you, then that's great for us.

00:11:01.685 --> 00:11:03.524
<v Speaker 1>Oh, maybe you have actually signed up in

00:11:03.524 --> 00:11:04.245
<v Speaker 1>the past.

00:11:05.765 --> 00:11:08.005
<v Speaker 1>Oh, no. Okay. Sorry. It just lagged. Okay.

00:11:08.005 --> 00:11:09.125
<v Speaker 1>It looks like it worked.

00:11:11.125 --> 00:11:13.524
<v Speaker 1>Okay. Sweet. Yeah. It may be okay. And

00:11:13.685 --> 00:11:17.320
<v Speaker 1>so, you know, basically, the Pixie CLI has

00:11:17.320 --> 00:11:19.080
<v Speaker 1>a lot of stuff that you can do.

00:11:19.160 --> 00:11:20.840
<v Speaker 1>The first thing that most people do is

00:11:20.840 --> 00:11:24.040
<v Speaker 1>install Pixie itself onto their Kubernetes cluster.

00:11:24.120 --> 00:11:25.560
<v Speaker 1>But before you do that,

00:11:26.120 --> 00:11:27.640
<v Speaker 1>I just wanna point out that we have,

00:11:27.640 --> 00:11:30.040
<v Speaker 1>like, two modes that we can install Pixie.

00:11:30.785 --> 00:11:32.704
<v Speaker 1>One way that,

00:11:32.865 --> 00:11:33.505
<v Speaker 1>you know,

00:11:34.144 --> 00:11:36.625
<v Speaker 1>is kind of the default and it uses,

00:11:37.264 --> 00:11:38.625
<v Speaker 1>persistent volumes

00:11:38.625 --> 00:11:41.345
<v Speaker 1>and PebbleDB is the backing store. But we

00:11:41.345 --> 00:11:42.065
<v Speaker 1>also support

00:11:42.590 --> 00:11:44.030
<v Speaker 1>a version that

00:11:44.110 --> 00:11:47.230
<v Speaker 1>uses the etcd operator, which doesn't require persistent

00:11:47.230 --> 00:11:48.110
<v Speaker 1>volumes.

00:11:48.350 --> 00:11:50.990
<v Speaker 1>So I think that for this cluster, what

00:11:50.990 --> 00:11:53.630
<v Speaker 1>we might wanna do is use that version

00:11:53.630 --> 00:11:54.190
<v Speaker 1>of Pixie.

00:11:56.375 --> 00:11:58.535
<v Speaker 0>Yeah. Okay. Happy with that.

00:12:00.375 --> 00:12:02.295
<v Speaker 1>Because I think that you mentioned that, the

00:12:02.295 --> 00:12:03.495
<v Speaker 1>persistent volumes,

00:12:03.654 --> 00:12:05.975
<v Speaker 1>like, may need to be set up. So,

00:12:06.455 --> 00:12:08.560
<v Speaker 1>let's just skip that and just go straight

00:12:08.560 --> 00:12:10.560
<v Speaker 1>to it. Yeah. I'm okay with that. This

00:12:10.560 --> 00:12:12.320
<v Speaker 0>is a a bare metal cluster, and I

00:12:12.320 --> 00:12:14.560
<v Speaker 0>do provision Rooka on them, but it's definitely

00:12:14.560 --> 00:12:16.160
<v Speaker 0>not something I'm happy to try and debug

00:12:16.160 --> 00:12:18.480
<v Speaker 0>live. So if there's a a no PVC

00:12:18.480 --> 00:12:20.560
<v Speaker 0>option, I'm definitely gonna gonna grab that.

00:12:21.235 --> 00:12:23.955
<v Speaker 1>Yeah. So if you do PX deploy dash

00:12:23.955 --> 00:12:26.115
<v Speaker 1>space dash h, then we can see the

00:12:26.115 --> 00:12:28.035
<v Speaker 1>deploy option. So what you have there is

00:12:28.035 --> 00:12:29.395
<v Speaker 1>all the options for,

00:12:29.955 --> 00:12:32.355
<v Speaker 1>you know, the PX command. So we can

00:12:32.355 --> 00:12:34.995
<v Speaker 1>see that dash o gives us use etcd

00:12:34.995 --> 00:12:35.800
<v Speaker 1>operator. Operator,

00:12:36.600 --> 00:12:38.759
<v Speaker 1>and that's the one that we are, you

00:12:38.759 --> 00:12:40.360
<v Speaker 1>know, looking at right now.

00:12:40.839 --> 00:12:42.199
<v Speaker 1>So let's see what happens.

00:12:42.920 --> 00:12:44.360
<v Speaker 0>Okay. So that's all I need. It's just

00:12:44.360 --> 00:12:46.360
<v Speaker 0>that flag to see who's the operator. Nothing

00:12:46.360 --> 00:12:48.705
<v Speaker 0>else is required? Yeah. It's gonna try to

00:12:48.705 --> 00:12:51.585
<v Speaker 1>deploy to your local Kubernetes context, your current

00:12:51.585 --> 00:12:53.905
<v Speaker 1>context. And so if you need to switch

00:12:53.905 --> 00:12:55.185
<v Speaker 1>context, then,

00:12:56.945 --> 00:12:59.025
<v Speaker 1>you know, that would be something good to

00:12:59.025 --> 00:12:59.505
<v Speaker 1>do.

00:13:00.065 --> 00:13:02.145
<v Speaker 0>Nope. I am on my Pixie one

00:13:02.810 --> 00:13:04.170
<v Speaker 0>three node cluster,

00:13:04.250 --> 00:13:05.529
<v Speaker 0>so we should be okay.

00:13:05.850 --> 00:13:06.810
<v Speaker 1>Okay. Great.

00:13:09.770 --> 00:13:12.649
<v Speaker 1>Okay. So this is okay because this is

00:13:12.649 --> 00:13:15.425
<v Speaker 1>a bare metal Kubernetes cluster, which should still

00:13:15.425 --> 00:13:17.425
<v Speaker 1>work even though it's giving you a scary

00:13:17.425 --> 00:13:20.144
<v Speaker 1>warning message, and we like to ride dangerously.

00:13:21.024 --> 00:13:23.024
<v Speaker 0>Alright. So just say yes. Life on the

00:13:23.024 --> 00:13:23.584
<v Speaker 0>edge.

00:13:23.985 --> 00:13:26.865
<v Speaker 1>Life on the edge. Quite literally because Pixie

00:13:26.865 --> 00:13:29.105
<v Speaker 1>actually collects and stores all of its data

00:13:29.105 --> 00:13:31.370
<v Speaker 1>on the edge rather than shipping it off

00:13:31.370 --> 00:13:32.330
<v Speaker 1>to a cloud.

00:13:33.050 --> 00:13:34.170
<v Speaker 0>Ah, okay.

00:13:35.610 --> 00:13:38.250
<v Speaker 0>So it's creating a namespace,

00:13:39.530 --> 00:13:41.850
<v Speaker 0>looking for a previous installation, I guess, and

00:13:41.850 --> 00:13:43.610
<v Speaker 0>cleaning up. Now we're getting some secrets and

00:13:43.610 --> 00:13:44.650
<v Speaker 0>some config maps.

00:13:45.925 --> 00:13:47.204
<v Speaker 0>I guess this is just a good

00:13:48.004 --> 00:13:50.805
<v Speaker 1>You know, Pixie is like a Kubernetes it's

00:13:50.805 --> 00:13:53.764
<v Speaker 1>a set of Kubernetes services, basically. And so

00:13:53.764 --> 00:13:55.365
<v Speaker 1>we have some dependencies,

00:13:55.365 --> 00:13:58.084
<v Speaker 1>like, you know, we'll be deploying NATs

00:13:58.490 --> 00:14:00.810
<v Speaker 1>and etcd, and then also

00:14:00.889 --> 00:14:01.769
<v Speaker 1>deploying

00:14:01.769 --> 00:14:02.330
<v Speaker 1>the,

00:14:03.290 --> 00:14:05.690
<v Speaker 1>what we call the Vizier PEM nodes, which

00:14:05.690 --> 00:14:08.490
<v Speaker 1>are the ones that are responsible for

00:14:08.810 --> 00:14:11.850
<v Speaker 1>actually deploying the eBPF probes and collecting the

00:14:11.850 --> 00:14:12.970
<v Speaker 1>data that you can query.

00:14:14.955 --> 00:14:15.595
<v Speaker 0>Okay.

00:14:17.195 --> 00:14:18.795
<v Speaker 0>Well, I'm a big fan of NAT, so

00:14:18.795 --> 00:14:20.955
<v Speaker 0>that's cool. So I'm assuming we've got collectors

00:14:20.955 --> 00:14:23.195
<v Speaker 0>that are publishing messages to NATs and then

00:14:23.195 --> 00:14:25.355
<v Speaker 0>are those being consumed by some sort of

00:14:25.675 --> 00:14:26.475
<v Speaker 0>workers?

00:14:26.795 --> 00:14:28.480
<v Speaker 0>I'm just gonna guess how your software works

00:14:28.480 --> 00:14:29.840
<v Speaker 0>now. Sorry. Yeah. I know. It's a great

00:14:29.840 --> 00:14:32.080
<v Speaker 1>question. We're also really big fans of NATs

00:14:32.080 --> 00:14:33.200
<v Speaker 1>as well. So,

00:14:34.080 --> 00:14:34.880
<v Speaker 1>basically,

00:14:35.680 --> 00:14:37.040
<v Speaker 1>what we have is,

00:14:37.680 --> 00:14:40.895
<v Speaker 1>a PEM node will be deployed on or

00:14:40.895 --> 00:14:42.575
<v Speaker 1>a PEM pod will be deployed on every

00:14:42.575 --> 00:14:43.695
<v Speaker 1>node in your cluster,

00:14:43.935 --> 00:14:45.855
<v Speaker 1>unless you have something like a taint that

00:14:45.855 --> 00:14:46.735
<v Speaker 1>blocks it.

00:14:47.135 --> 00:14:49.855
<v Speaker 1>And so these PEM nodes are going to

00:14:49.855 --> 00:14:52.895
<v Speaker 1>deploy the BPF probes and start collecting data

00:14:52.895 --> 00:14:55.660
<v Speaker 1>and storing it, you know, within the PEM.

00:14:56.460 --> 00:14:59.180
<v Speaker 1>So the data is actually not being sent

00:14:59.180 --> 00:15:01.260
<v Speaker 1>over NATs. It's actually just being stored on

00:15:01.260 --> 00:15:03.740
<v Speaker 1>the node that it exists on because

00:15:03.820 --> 00:15:05.740
<v Speaker 1>we really wanna be a low burden to

00:15:05.740 --> 00:15:07.820
<v Speaker 1>the network and just kind of keep data

00:15:07.820 --> 00:15:09.635
<v Speaker 1>where it's collected. That's one of the things

00:15:09.635 --> 00:15:11.475
<v Speaker 1>that, you know, we're trying to do.

00:15:12.035 --> 00:15:12.675
<v Speaker 1>So,

00:15:13.475 --> 00:15:15.714
<v Speaker 1>but, you know, we use NATs for lots

00:15:15.714 --> 00:15:17.795
<v Speaker 1>of different stuff, like communicating

00:15:17.795 --> 00:15:20.115
<v Speaker 1>the current state of the PEMs and make

00:15:20.115 --> 00:15:21.555
<v Speaker 1>sure they're healthy or

00:15:21.890 --> 00:15:24.210
<v Speaker 1>sending messages about Kubernetes

00:15:24.210 --> 00:15:26.370
<v Speaker 1>metadata that, you know, the PEMs need to

00:15:26.370 --> 00:15:28.290
<v Speaker 1>be aware of when a query is run.

00:15:29.650 --> 00:15:30.770
<v Speaker 0>Alright. Okay.

00:15:31.170 --> 00:15:33.330
<v Speaker 0>Well, it looks like everything has deployed and

00:15:33.330 --> 00:15:36.370
<v Speaker 0>now we're waiting for those PEMs slash

00:15:36.690 --> 00:15:37.250
<v Speaker 0>Kelvin.

00:15:39.355 --> 00:15:40.795
<v Speaker 1>Yeah. So basically,

00:15:41.195 --> 00:15:43.275
<v Speaker 1>at this point, all of the prerequisites

00:15:43.275 --> 00:15:45.835
<v Speaker 1>for the cluster have been deployed and now

00:15:45.835 --> 00:15:48.075
<v Speaker 1>the PEMs themselves are being launched.

00:15:48.635 --> 00:15:49.675
<v Speaker 1>Kelvin is

00:15:49.995 --> 00:15:51.355
<v Speaker 1>you can kind of think of it as

00:15:51.355 --> 00:15:51.835
<v Speaker 1>like

00:15:52.439 --> 00:15:54.759
<v Speaker 1>the collector node because when you run a

00:15:54.759 --> 00:15:58.360
<v Speaker 1>query, you may be asking about data on

00:15:58.360 --> 00:16:00.519
<v Speaker 1>multiple PEMs at once and they need a

00:16:00.519 --> 00:16:02.519
<v Speaker 1>common place to send it to for the

00:16:02.519 --> 00:16:04.040
<v Speaker 1>reduced stage of the query if you think

00:16:04.040 --> 00:16:06.519
<v Speaker 1>of it that way. So Kelvin fulfills that

00:16:06.519 --> 00:16:06.839
<v Speaker 1>role.

00:16:08.135 --> 00:16:08.775
<v Speaker 0>Okay.

00:16:09.655 --> 00:16:11.735
<v Speaker 0>We have a question on the chat which

00:16:11.735 --> 00:16:13.975
<v Speaker 0>I'll throw up for you. But Noel is

00:16:13.975 --> 00:16:15.815
<v Speaker 0>asking what is Sentry?

00:16:16.455 --> 00:16:18.855
<v Speaker 1>Oh, yeah. That's a good question. So, Sentry

00:16:18.855 --> 00:16:19.495
<v Speaker 1>is,

00:16:20.215 --> 00:16:22.615
<v Speaker 1>something that allows us to track errors

00:16:23.040 --> 00:16:23.760
<v Speaker 1>in,

00:16:24.240 --> 00:16:26.640
<v Speaker 1>Pixie when people run into problems.

00:16:27.360 --> 00:16:28.400
<v Speaker 1>I think that,

00:16:28.720 --> 00:16:29.440
<v Speaker 1>you know,

00:16:30.240 --> 00:16:31.760
<v Speaker 1>that is something that,

00:16:32.320 --> 00:16:33.200
<v Speaker 1>is,

00:16:34.640 --> 00:16:36.320
<v Speaker 1>going to be optional.

00:16:36.735 --> 00:16:37.295
<v Speaker 1>So

00:16:38.495 --> 00:16:40.255
<v Speaker 1>people can kind of choose if they want

00:16:40.255 --> 00:16:41.935
<v Speaker 1>to let us know when they're having a

00:16:42.095 --> 00:16:43.215
<v Speaker 1>some kind of crash.

00:16:43.535 --> 00:16:45.615
<v Speaker 0>Yeah. I think I've I've used Sentry before.

00:16:45.615 --> 00:16:47.214
<v Speaker 0>It's like an SDK you can bundle in

00:16:47.214 --> 00:16:49.615
<v Speaker 0>your application which catches exceptions and then throws

00:16:49.615 --> 00:16:52.120
<v Speaker 0>them off to the Sentry thing and can

00:16:52.120 --> 00:16:53.319
<v Speaker 0>keep an eye on them and see how

00:16:53.319 --> 00:16:55.000
<v Speaker 0>often they know recur and such like that.

00:16:55.000 --> 00:16:56.360
<v Speaker 0>It's a it's a really cool open source

00:16:56.360 --> 00:16:57.480
<v Speaker 0>tool as well, I believe.

00:16:58.120 --> 00:17:00.040
<v Speaker 1>Yeah. It's it's a really good way of

00:17:00.040 --> 00:17:00.920
<v Speaker 1>finding out,

00:17:01.319 --> 00:17:03.399
<v Speaker 1>you know, what your problems are and what

00:17:03.399 --> 00:17:05.319
<v Speaker 1>problems your users are running into that you

00:17:05.319 --> 00:17:06.119
<v Speaker 1>may not be hearing about.

00:17:06.805 --> 00:17:08.724
<v Speaker 0>Yeah. In a former life, I used to

00:17:08.724 --> 00:17:10.645
<v Speaker 0>work on Android and iOS apps, and we

00:17:10.645 --> 00:17:13.605
<v Speaker 0>always bundled Sentry. And it's it's overwhelming in

00:17:13.605 --> 00:17:15.845
<v Speaker 0>that context when you've got enough users. So

00:17:16.805 --> 00:17:18.964
<v Speaker 0>I don't recommend it for that use case.

00:17:19.770 --> 00:17:22.330
<v Speaker 1>So it looks like it's successfully deployed, which

00:17:22.330 --> 00:17:24.569
<v Speaker 1>is great. The demo gods are with us.

00:17:27.130 --> 00:17:28.970
<v Speaker 1>So I don't know before we use the

00:17:28.970 --> 00:17:30.970
<v Speaker 1>UI if you wanna try running a query

00:17:30.970 --> 00:17:33.210
<v Speaker 1>in the CLI just to kinda show off

00:17:33.210 --> 00:17:34.410
<v Speaker 1>the fact that you don't even have to

00:17:34.410 --> 00:17:35.050
<v Speaker 1>leave the terminal.

00:17:36.595 --> 00:17:37.235
<v Speaker 0>So

00:17:37.475 --> 00:17:39.795
<v Speaker 0>just just to clarify then, right, like that

00:17:40.035 --> 00:17:42.914
<v Speaker 1>Yeah. That PX deploy dash o

00:17:43.235 --> 00:17:45.395
<v Speaker 0>Mhmm. Has done everything. We're we're now collecting

00:17:45.395 --> 00:17:46.755
<v Speaker 0>telemetry from this cluster.

00:17:47.730 --> 00:17:49.970
<v Speaker 1>Yeah, that's right. Previously where you might have

00:17:49.970 --> 00:17:51.170
<v Speaker 1>had to spend quite a bit of time

00:17:51.170 --> 00:17:53.009
<v Speaker 1>investing in the

00:17:53.330 --> 00:17:54.690
<v Speaker 1>data collection,

00:17:55.250 --> 00:17:57.490
<v Speaker 1>it's basically been entirely done for us in

00:17:57.490 --> 00:17:58.289
<v Speaker 1>this process.

00:17:59.250 --> 00:18:01.650
<v Speaker 1>You can always extend the data that we

00:18:01.650 --> 00:18:04.365
<v Speaker 1>collect. We have the ability for you to

00:18:04.365 --> 00:18:07.165
<v Speaker 1>deploy custom BPF traces and things like that.

00:18:07.165 --> 00:18:07.645
<v Speaker 1>But,

00:18:08.125 --> 00:18:09.725
<v Speaker 1>you know, right out of the box, you

00:18:09.725 --> 00:18:12.685
<v Speaker 1>get access to all of your HTTP

00:18:12.685 --> 00:18:15.005
<v Speaker 1>requests, your c SQL requests,

00:18:15.085 --> 00:18:16.445
<v Speaker 1>your CPU usage,

00:18:16.970 --> 00:18:18.570
<v Speaker 1>how loaded is your network,

00:18:19.050 --> 00:18:20.890
<v Speaker 1>you know, just with this one command.

00:18:22.170 --> 00:18:22.650
<v Speaker 0>Okay.

00:18:23.770 --> 00:18:25.610
<v Speaker 0>So you suggested we can do something on

00:18:25.610 --> 00:18:27.930
<v Speaker 0>the command line here to to actually introspect

00:18:27.930 --> 00:18:28.890
<v Speaker 0>that in some way. So

00:18:29.635 --> 00:18:31.715
<v Speaker 1>Why don't you do PX script list and

00:18:31.715 --> 00:18:33.955
<v Speaker 1>then we can kinda see, like, if anything

00:18:33.955 --> 00:18:36.114
<v Speaker 1>pops out to you as something that's interesting.

00:18:38.355 --> 00:18:40.434
<v Speaker 1>There's a lot of results here, but

00:18:41.635 --> 00:18:43.715
<v Speaker 1>I can also recommend a few if that's

00:18:43.715 --> 00:18:44.754
<v Speaker 1>easier. But,

00:18:45.475 --> 00:18:47.370
<v Speaker 1>you know, I think a good one to

00:18:48.730 --> 00:18:50.330
<v Speaker 1>maybe a really simple one to do is

00:18:50.330 --> 00:18:51.690
<v Speaker 1>p x namespaces.

00:18:51.690 --> 00:18:53.450
<v Speaker 1>Just kinda tells you what are the namespaces

00:18:53.450 --> 00:18:54.570
<v Speaker 1>that you have running.

00:18:55.610 --> 00:18:57.129
<v Speaker 1>So if you do

00:18:58.090 --> 00:19:00.345
<v Speaker 1>p x run, you can just do space

00:19:00.345 --> 00:19:03.304
<v Speaker 1>p x slash namespaces to execute that script.

00:19:09.145 --> 00:19:09.625
<v Speaker 0>Right.

00:19:11.650 --> 00:19:13.410
<v Speaker 1>We can kinda see this is a very

00:19:13.410 --> 00:19:15.890
<v Speaker 1>simple script. There's a lot fancier ones, but

00:19:15.890 --> 00:19:18.210
<v Speaker 1>just didn't wanna overwhelm people all at once

00:19:18.210 --> 00:19:19.330
<v Speaker 1>in the CLI.

00:19:19.650 --> 00:19:21.890
<v Speaker 1>So we can see the different namespaces that

00:19:21.890 --> 00:19:23.890
<v Speaker 1>we have, the number of pods and services

00:19:23.890 --> 00:19:25.995
<v Speaker 1>that they have, as well as the resource

00:19:25.995 --> 00:19:29.115
<v Speaker 1>consumption that we're seeing aggregated by namespace.

00:19:30.475 --> 00:19:31.755
<v Speaker 0>Okay. So yeah.

00:19:32.235 --> 00:19:33.355
<v Speaker 0>So I

00:19:33.355 --> 00:19:34.635
<v Speaker 0>just want to make sure I understand this

00:19:34.635 --> 00:19:36.475
<v Speaker 0>correctly. So PX run allows me to run

00:19:36.475 --> 00:19:39.195
<v Speaker 0>Pixie scripts. What what what is a Pixie

00:19:39.195 --> 00:19:40.600
<v Speaker 0>script look like? Can we can we look

00:19:40.600 --> 00:19:42.119
<v Speaker 0>at what that that was?

00:19:42.520 --> 00:19:44.840
<v Speaker 1>I'm so glad you asked. That's

00:19:44.840 --> 00:19:46.840
<v Speaker 1>one of my favorite parts about Pixie actually

00:19:46.840 --> 00:19:47.559
<v Speaker 1>because

00:19:47.640 --> 00:19:49.559
<v Speaker 1>we made it a 100%

00:19:49.559 --> 00:19:51.080
<v Speaker 1>scriptable platform.

00:19:51.400 --> 00:19:53.345
<v Speaker 1>And what that means is that the scripts

00:19:53.345 --> 00:19:54.785
<v Speaker 1>that you write or the scripts that we

00:19:54.785 --> 00:19:56.785
<v Speaker 1>have provided right out of the box are

00:19:56.785 --> 00:19:59.025
<v Speaker 1>the thing that you use across the UI,

00:19:59.025 --> 00:20:01.184
<v Speaker 1>the CLI, and our client APIs.

00:20:01.505 --> 00:20:04.145
<v Speaker 1>So it's one consistent way to run queries.

00:20:05.670 --> 00:20:07.510
<v Speaker 1>Pixie's language is

00:20:07.670 --> 00:20:08.470
<v Speaker 1>Pythonic,

00:20:08.470 --> 00:20:10.390
<v Speaker 1>so we use Python syntax so that people

00:20:10.390 --> 00:20:12.550
<v Speaker 1>don't have to learn a brand new syntax.

00:20:13.030 --> 00:20:15.350
<v Speaker 1>And we were really inspired by,

00:20:16.070 --> 00:20:19.030
<v Speaker 1>Pandas, if anyone's familiar with that, which allows

00:20:19.030 --> 00:20:20.070
<v Speaker 1>people to,

00:20:20.870 --> 00:20:23.325
<v Speaker 1>you know, it's a really great tool for,

00:20:23.885 --> 00:20:26.525
<v Speaker 1>cleaning up, preparing, and analyzing your datasets in

00:20:26.525 --> 00:20:27.245
<v Speaker 1>Python.

00:20:27.645 --> 00:20:29.725
<v Speaker 1>And we found that all the stuff it

00:20:29.725 --> 00:20:31.805
<v Speaker 1>does, we also need to do those things.

00:20:31.805 --> 00:20:33.725
<v Speaker 1>So we decided to just follow their API

00:20:33.725 --> 00:20:36.149
<v Speaker 1>rather than reinvent the wheel. So when you

00:20:36.149 --> 00:20:37.509
<v Speaker 1>look at it, it will kinda just look

00:20:37.509 --> 00:20:38.789
<v Speaker 1>like Python code.

00:20:40.549 --> 00:20:42.469
<v Speaker 1>If you wanna look at scripts,

00:20:43.350 --> 00:20:44.870
<v Speaker 1>one way that you could do that is

00:20:44.870 --> 00:20:46.470
<v Speaker 1>you could clone our repo, and I can

00:20:46.470 --> 00:20:47.830
<v Speaker 1>show you where the scripts are in there.

00:20:48.154 --> 00:20:50.715
<v Speaker 1>Or we could just open the UI and

00:20:50.715 --> 00:20:53.115
<v Speaker 1>then we can always inspect the script that's

00:20:53.115 --> 00:20:54.554
<v Speaker 1>generating a given view.

00:20:55.755 --> 00:20:57.835
<v Speaker 0>Okay. So if I click this link here

00:20:57.835 --> 00:20:59.595
<v Speaker 0>that it gave me after I ran.

00:21:00.350 --> 00:21:01.230
<v Speaker 0>Okay.

00:21:01.230 --> 00:21:03.230
<v Speaker 0>Let's let's clarify the most important thing we'll

00:21:03.230 --> 00:21:05.710
<v Speaker 0>clarify today. The command pronunciation.

00:21:05.710 --> 00:21:08.190
<v Speaker 0>Is it Pixie or Pix or PX?

00:21:08.750 --> 00:21:10.270
<v Speaker 1>I don't know, man. I mean, I kinda

00:21:10.270 --> 00:21:12.270
<v Speaker 1>like to watch Flame Wars, so maybe we

00:21:12.270 --> 00:21:15.344
<v Speaker 1>should explicitly not weigh in here and then

00:21:15.345 --> 00:21:17.904
<v Speaker 1>see if people develop a strong consensus.

00:21:18.384 --> 00:21:20.945
<v Speaker 1>But I I will admit I say PX.

00:21:20.945 --> 00:21:23.985
<v Speaker 0>PX. Okay. I'll I'll go with PX. I'll

00:21:23.985 --> 00:21:25.345
<v Speaker 0>I'll I'll go with you, but the audience

00:21:25.345 --> 00:21:26.784
<v Speaker 0>can feel free to bring in their own

00:21:26.784 --> 00:21:27.184
<v Speaker 0>flavor.

00:21:27.960 --> 00:21:30.440
<v Speaker 0>So let's see if I can actually log

00:21:30.440 --> 00:21:31.799
<v Speaker 0>in after that little

00:21:32.440 --> 00:21:34.120
<v Speaker 0>maybe full pie. Yeah. Flash.

00:21:41.174 --> 00:21:42.854
<v Speaker 0>It worked. Okay. Cool.

00:21:43.015 --> 00:21:44.375
<v Speaker 1>Yeah. So as you can see, when you

00:21:44.375 --> 00:21:45.815
<v Speaker 1>run a script in the CLI, you have

00:21:45.815 --> 00:21:47.495
<v Speaker 1>the ability to click and just access that

00:21:47.495 --> 00:21:49.015
<v Speaker 1>same exact thing in the UI if you

00:21:49.015 --> 00:21:50.774
<v Speaker 1>wanna send it to someone or something like

00:21:50.774 --> 00:21:51.335
<v Speaker 1>that.

00:21:53.495 --> 00:21:54.855
<v Speaker 0>Okay. So

00:21:55.350 --> 00:21:56.950
<v Speaker 0>so many questions.

00:21:59.510 --> 00:22:01.990
<v Speaker 0>So there's no data leaving

00:22:03.910 --> 00:22:05.990
<v Speaker 0>my servers to go to the

00:22:06.550 --> 00:22:09.910
<v Speaker 0>to go to your servers, right? Is this

00:22:08.965 --> 00:22:10.805
<v Speaker 0>querying my cluster?

00:22:11.285 --> 00:22:13.445
<v Speaker 0>I I how does the data transfer work

00:22:13.445 --> 00:22:16.325
<v Speaker 0>here? Yeah. Let's dive in. So we want

00:22:16.325 --> 00:22:18.085
<v Speaker 1>to store data on the edge that it

00:22:18.085 --> 00:22:18.885
<v Speaker 1>was collected.

00:22:19.445 --> 00:22:21.605
<v Speaker 1>We think that that is a really good

00:22:21.605 --> 00:22:24.805
<v Speaker 1>way to lower the network utilization because in

00:22:24.220 --> 00:22:26.300
<v Speaker 1>your production system, you don't wanna be maxing

00:22:26.300 --> 00:22:28.700
<v Speaker 1>out your network cards sending out telemetry data.

00:22:29.580 --> 00:22:31.420
<v Speaker 1>So that's a really good thing from a

00:22:31.420 --> 00:22:33.740
<v Speaker 1>system perspective, but it's also a good thing

00:22:33.740 --> 00:22:35.900
<v Speaker 1>from a privacy perspective because

00:22:36.060 --> 00:22:37.535
<v Speaker 1>we Pixie

00:22:37.535 --> 00:22:38.735
<v Speaker 1>pedal. That's funny.

00:22:39.295 --> 00:22:41.535
<v Speaker 1>Because, you know, we recognize that, you know,

00:22:41.535 --> 00:22:43.775
<v Speaker 1>telemetry data is sensitive. And when you keep

00:22:43.775 --> 00:22:45.855
<v Speaker 1>it where it was collected, that's a way

00:22:45.855 --> 00:22:47.695
<v Speaker 1>of adding another layer of privacy.

00:22:48.015 --> 00:22:48.575
<v Speaker 1>So

00:22:49.159 --> 00:22:51.080
<v Speaker 1>we have two modes with Pixie.

00:22:52.120 --> 00:22:53.399
<v Speaker 1>The first mode,

00:22:54.200 --> 00:22:54.840
<v Speaker 1>basically

00:22:55.080 --> 00:22:57.799
<v Speaker 1>uses Pixie Cloud as a proxy

00:22:57.880 --> 00:23:00.359
<v Speaker 1>so that when the UI has a query,

00:23:00.360 --> 00:23:02.520
<v Speaker 1>it proxies it through Pixie Cloud. And in

00:23:02.520 --> 00:23:05.575
<v Speaker 1>this form, the data is always traveled entirely

00:23:05.575 --> 00:23:06.455
<v Speaker 1>encrypted,

00:23:06.695 --> 00:23:09.255
<v Speaker 1>never persisted on the Pixie Cloud side of

00:23:09.255 --> 00:23:12.054
<v Speaker 1>things. But for people who would prefer

00:23:12.215 --> 00:23:14.375
<v Speaker 1>that this not be the case, we also

00:23:14.375 --> 00:23:18.050
<v Speaker 1>have data isolation mode, which basically says when

00:23:18.050 --> 00:23:19.250
<v Speaker 1>I'm running the UI,

00:23:19.330 --> 00:23:21.890
<v Speaker 1>I will actually query my cluster directly,

00:23:22.210 --> 00:23:24.210
<v Speaker 1>and there won't be any proxying.

00:23:24.690 --> 00:23:27.090
<v Speaker 1>This can have downsides because you always need

00:23:27.090 --> 00:23:29.090
<v Speaker 1>to be able to access the Kubernetes cluster

00:23:29.090 --> 00:23:30.450
<v Speaker 1>when you use the UI.

00:23:31.090 --> 00:23:32.210
<v Speaker 1>And so we think that,

00:23:33.225 --> 00:23:35.305
<v Speaker 1>you know, both modes are valid, but we

00:23:35.305 --> 00:23:37.305
<v Speaker 1>default to the pass through mode because of

00:23:37.305 --> 00:23:39.865
<v Speaker 1>the user experience it provides while still maintaining

00:23:39.865 --> 00:23:41.785
<v Speaker 1>the promise that we don't persist it anywhere

00:23:41.785 --> 00:23:42.264
<v Speaker 1>else.

00:23:43.305 --> 00:23:44.504
<v Speaker 0>Okay. Perfect.

00:23:44.745 --> 00:23:46.665
<v Speaker 0>We have another question in the chat, which

00:23:47.309 --> 00:23:49.789
<v Speaker 0>doesn't really is very specific to this, but

00:23:49.950 --> 00:23:52.510
<v Speaker 0>Vikram is asking, can we run the UI

00:23:52.510 --> 00:23:54.429
<v Speaker 0>on our own cluster or local host? Is

00:23:54.429 --> 00:23:55.229
<v Speaker 0>that an option?

00:23:55.950 --> 00:23:57.710
<v Speaker 1>Yeah. It is. So if you do the

00:23:57.710 --> 00:23:59.870
<v Speaker 1>fully self hosted version of Pixie

00:24:00.755 --> 00:24:02.674
<v Speaker 1>and you can, you know, just check out

00:24:02.674 --> 00:24:05.075
<v Speaker 1>the docs for how to run that, then

00:24:05.075 --> 00:24:07.634
<v Speaker 1>you would be basically running it yourself.

00:24:08.195 --> 00:24:10.755
<v Speaker 0>Got it. Okay. So this is the same

00:24:10.755 --> 00:24:12.755
<v Speaker 0>representation of what we got on the command

00:24:12.755 --> 00:24:15.394
<v Speaker 0>line here where we have a kind of

00:24:15.880 --> 00:24:18.679
<v Speaker 0>TLDR on our namespaces and what's running in

00:24:18.679 --> 00:24:21.080
<v Speaker 0>them. Then we've got telemetry

00:24:21.160 --> 00:24:24.039
<v Speaker 0>showing us disk throughput

00:24:24.120 --> 00:24:24.840
<v Speaker 0>and

00:24:26.040 --> 00:24:29.160
<v Speaker 0>yeah. Desk throughput and network stats. I'm sure

00:24:29.160 --> 00:24:30.120
<v Speaker 0>there was some network there.

00:24:30.904 --> 00:24:33.784
<v Speaker 1>Mhmm. Maybe. There might not be. Maybe I

00:24:33.784 --> 00:24:35.544
<v Speaker 1>should change the script. But I wanted to

00:24:35.544 --> 00:24:37.065
<v Speaker 1>start really simple because

00:24:37.225 --> 00:24:38.904
<v Speaker 1>I think this is a good before we

00:24:38.904 --> 00:24:40.424
<v Speaker 1>dive into kind of the rest of what's

00:24:40.424 --> 00:24:42.985
<v Speaker 1>going on here, I wanted to just show

00:24:42.985 --> 00:24:44.424
<v Speaker 1>the script for this view.

00:24:46.640 --> 00:24:48.560
<v Speaker 1>So if you scroll up and then you

00:24:48.560 --> 00:24:51.920
<v Speaker 1>click that little bit, that little, like, cursor,

00:24:51.920 --> 00:24:53.200
<v Speaker 1>yeah, that editor,

00:24:54.320 --> 00:24:56.640
<v Speaker 1>basically, you can see the code that produces

00:24:56.640 --> 00:24:57.680
<v Speaker 1>the script.

00:25:00.080 --> 00:25:00.400
<v Speaker 1>So,

00:25:02.515 --> 00:25:05.955
<v Speaker 1>basically, you can see the namespaces for cluster

00:25:06.035 --> 00:25:08.515
<v Speaker 1>function will produce the table that is the

00:25:08.515 --> 00:25:10.515
<v Speaker 1>top one. It's basically getting a list of

00:25:10.515 --> 00:25:11.475
<v Speaker 1>namespaces

00:25:11.475 --> 00:25:12.835
<v Speaker 1>in the current cluster.

00:25:13.715 --> 00:25:15.155
<v Speaker 1>And then

00:25:14.970 --> 00:25:15.690
<v Speaker 1>one,

00:25:16.090 --> 00:25:18.490
<v Speaker 1>the next function is producing an overview of

00:25:18.490 --> 00:25:20.890
<v Speaker 1>the resource consumption by namespace. So these are

00:25:20.890 --> 00:25:22.809
<v Speaker 1>the two views that we're computing.

00:25:24.809 --> 00:25:25.609
<v Speaker 0>Okay.

00:25:25.690 --> 00:25:27.610
<v Speaker 0>Yeah. It does just look like Python code.

00:25:28.735 --> 00:25:30.815
<v Speaker 1>Yeah. And that that is that is by

00:25:30.815 --> 00:25:31.934
<v Speaker 1>design because

00:25:32.095 --> 00:25:35.054
<v Speaker 1>we're making this for developers and we,

00:25:35.215 --> 00:25:38.735
<v Speaker 1>as developers, want our observability pipelines to be

00:25:38.735 --> 00:25:40.014
<v Speaker 1>more like writing code.

00:25:40.575 --> 00:25:42.654
<v Speaker 0>Okay. But for people that don't wanna mess

00:25:42.654 --> 00:25:45.000
<v Speaker 1>with the custom scripts, you don't have to.

00:25:45.000 --> 00:25:46.440
<v Speaker 1>We have a ton of scripts that ship

00:25:46.440 --> 00:25:48.520
<v Speaker 1>right off the bat, but we do find

00:25:48.520 --> 00:25:51.160
<v Speaker 1>that, you know, power users who really like

00:25:51.160 --> 00:25:53.560
<v Speaker 1>to get into it do enjoy writing custom

00:25:53.560 --> 00:25:55.960
<v Speaker 1>queries and drilling into stuff that's like especially

00:25:55.960 --> 00:25:57.240
<v Speaker 1>important for them in particular.

00:25:58.225 --> 00:26:00.544
<v Speaker 0>Well, yeah, I guess because, you know, Pixie

00:26:00.544 --> 00:26:02.625
<v Speaker 0>understands what data is being collected that you

00:26:02.625 --> 00:26:04.784
<v Speaker 0>can already produce all these scripts up front

00:26:04.784 --> 00:26:07.105
<v Speaker 0>that just represent that in the best possible

00:26:07.105 --> 00:26:08.065
<v Speaker 0>way. So

00:26:08.385 --> 00:26:10.144
<v Speaker 0>it kind of makes a lot of sense.

00:26:10.225 --> 00:26:11.345
<v Speaker 0>What's a VED spec?

00:26:11.910 --> 00:26:14.150
<v Speaker 0>Is this just a display we've got here?

00:26:14.390 --> 00:26:16.310
<v Speaker 1>Exactly. It's just telling you how you wanna

00:26:16.310 --> 00:26:18.309
<v Speaker 1>lay out the results of the query.

00:26:18.470 --> 00:26:20.950
<v Speaker 1>So we have more than just tables as

00:26:20.950 --> 00:26:23.190
<v Speaker 1>we'll see if, you know, we go into

00:26:23.190 --> 00:26:24.390
<v Speaker 1>the cluster view, for example.

00:26:26.205 --> 00:26:26.765
<v Speaker 1>But

00:26:27.005 --> 00:26:28.925
<v Speaker 1>with the VisBag, you can specify what type

00:26:28.925 --> 00:26:31.565
<v Speaker 1>of visualization you want. So I recommend switching

00:26:31.565 --> 00:26:33.805
<v Speaker 1>to PX cluster because that's kind of like

00:26:33.805 --> 00:26:35.565
<v Speaker 1>the starting view that we show to people

00:26:35.565 --> 00:26:36.205
<v Speaker 1>in most cases.

00:26:38.880 --> 00:26:40.399
<v Speaker 1>And I can walk you through what we're

00:26:40.399 --> 00:26:42.239
<v Speaker 1>seeing here if that would be helpful.

00:26:43.919 --> 00:26:45.600
<v Speaker 0>Yes. I see a graph, but I'm not

00:26:45.600 --> 00:26:47.679
<v Speaker 0>entirely sure what the graph is representing.

00:26:48.799 --> 00:26:51.120
<v Speaker 1>Yeah. So this is our service map.

00:26:51.705 --> 00:26:54.505
<v Speaker 1>So it looks like we're detecting services on

00:26:54.505 --> 00:26:57.304
<v Speaker 1>your cluster, but we're not necessarily

00:26:57.784 --> 00:26:58.744
<v Speaker 1>detecting

00:26:59.144 --> 00:27:00.264
<v Speaker 1>the services

00:27:00.664 --> 00:27:02.184
<v Speaker 1>talking to each other.

00:27:02.745 --> 00:27:04.424
<v Speaker 1>And that can happen when a pod isn't

00:27:04.424 --> 00:27:06.265
<v Speaker 1>part of a service and it's talking to

00:27:06.265 --> 00:27:07.929
<v Speaker 1>things. So this is it.

00:27:08.250 --> 00:27:09.529
<v Speaker 1>You know, it may not be the prettiest

00:27:09.529 --> 00:27:11.929
<v Speaker 1>graph, but it, you know, we we often

00:27:11.929 --> 00:27:13.289
<v Speaker 1>see results like that.

00:27:14.250 --> 00:27:15.609
<v Speaker 1>If you scroll down,

00:27:16.730 --> 00:27:18.570
<v Speaker 1>you can see the list of nodes.

00:27:18.889 --> 00:27:20.570
<v Speaker 1>And if you look at the node name,

00:27:21.205 --> 00:27:22.405
<v Speaker 1>you can actually

00:27:22.645 --> 00:27:25.285
<v Speaker 1>click that link and actually be taken to

00:27:25.285 --> 00:27:27.125
<v Speaker 1>a view about that node.

00:27:27.765 --> 00:27:30.725
<v Speaker 1>So we really wanna make a really easy

00:27:30.725 --> 00:27:32.485
<v Speaker 1>drill down experience for people.

00:27:32.805 --> 00:27:34.885
<v Speaker 1>And so we have these hyperlinks embedded in

00:27:34.885 --> 00:27:37.490
<v Speaker 1>our tables in multiple places where you can

00:27:37.490 --> 00:27:39.010
<v Speaker 1>just click a link to see more about

00:27:39.010 --> 00:27:39.970
<v Speaker 1>that entity.

00:27:40.530 --> 00:27:42.610
<v Speaker 1>So here we see the pods that are

00:27:42.610 --> 00:27:43.810
<v Speaker 1>running on this node,

00:27:43.970 --> 00:27:46.370
<v Speaker 1>the CPU usage of the node, and other

00:27:46.370 --> 00:27:48.210
<v Speaker 1>things like the traffic and the bytes.

00:27:50.144 --> 00:27:50.864
<v Speaker 0>Nice.

00:27:52.144 --> 00:27:53.904
<v Speaker 0>I like it when you get shared cursors

00:27:53.904 --> 00:27:56.144
<v Speaker 0>like this across panels and graphs.

00:27:57.024 --> 00:27:58.784
<v Speaker 1>Yeah. Because some the shared lining it up

00:27:58.784 --> 00:28:01.105
<v Speaker 1>like these two things happen the same.

00:28:03.460 --> 00:28:05.780
<v Speaker 0>So this is a bespoke UI. Right? This

00:28:05.780 --> 00:28:07.780
<v Speaker 0>is this is written just for Pixie. Like,

00:28:07.780 --> 00:28:09.860
<v Speaker 0>do people have the option to use Grafana

00:28:09.860 --> 00:28:12.020
<v Speaker 0>if they want or would you encourage using

00:28:12.020 --> 00:28:13.540
<v Speaker 0>the the Pixie dashboards?

00:28:14.020 --> 00:28:15.780
<v Speaker 1>You know, it depends on, you know, your

00:28:16.165 --> 00:28:19.045
<v Speaker 1>unique situation. So we do have a Grafana

00:28:19.045 --> 00:28:21.365
<v Speaker 1>plugin that's available and open source.

00:28:21.605 --> 00:28:24.085
<v Speaker 1>So if that's the environment you're comfortable in,

00:28:24.405 --> 00:28:26.645
<v Speaker 1>you can configure Pixie as a data source

00:28:26.645 --> 00:28:29.045
<v Speaker 1>and use it to help build your Grafana

00:28:29.045 --> 00:28:29.605
<v Speaker 1>dashboards.

00:28:31.000 --> 00:28:32.440
<v Speaker 1>But if you

00:28:32.679 --> 00:28:34.599
<v Speaker 1>kind of just want a super easy

00:28:34.919 --> 00:28:36.600
<v Speaker 1>like, you don't have to, you know, set

00:28:36.600 --> 00:28:38.440
<v Speaker 1>that up or whatnot. You can also just

00:28:38.440 --> 00:28:40.440
<v Speaker 1>use the UI and, you

00:28:41.240 --> 00:28:42.919
<v Speaker 1>know, we think that either one is a

00:28:42.919 --> 00:28:45.935
<v Speaker 1>good thing to do. But the flame graph,

00:28:45.935 --> 00:28:48.735
<v Speaker 1>yeah, I'm glad that's being called out. So,

00:28:49.295 --> 00:28:50.975
<v Speaker 1>yeah, that's only a new feature we're pretty

00:28:50.975 --> 00:28:52.414
<v Speaker 1>excited about because,

00:28:52.895 --> 00:28:55.375
<v Speaker 1>you know, this kind of data can be

00:28:55.375 --> 00:28:57.615
<v Speaker 1>kind of hard to get in most cases.

00:28:57.615 --> 00:28:57.775
<v Speaker 1>So,

00:28:59.380 --> 00:29:01.860
<v Speaker 1>we're basically running profilers

00:29:01.860 --> 00:29:03.379
<v Speaker 1>on your,

00:29:03.380 --> 00:29:05.700
<v Speaker 1>you know, various nodes and seeing like where

00:29:05.700 --> 00:29:06.980
<v Speaker 1>is the time being spent.

00:29:08.179 --> 00:29:08.740
<v Speaker 1>And,

00:29:09.860 --> 00:29:11.940
<v Speaker 1>we have heard that people really like that

00:29:11.940 --> 00:29:13.860
<v Speaker 1>because it can help isolate bottlenecks.

00:29:15.884 --> 00:29:17.964
<v Speaker 0>Yeah. That's pretty nice. I like that.

00:29:18.684 --> 00:29:20.445
<v Speaker 0>I wanna see what other scripts we've got.

00:29:20.445 --> 00:29:22.445
<v Speaker 0>Oh. Oh. I just zoomed. That was cool.

00:29:23.164 --> 00:29:24.364
<v Speaker 1>Oh, yeah. Yeah.

00:29:25.005 --> 00:29:26.364
<v Speaker 1>Oh, that is nice.

00:29:27.005 --> 00:29:27.884
<v Speaker 0>There we go.

00:29:28.445 --> 00:29:30.480
<v Speaker 0>I kinda wish I had like planned ahead

00:29:30.480 --> 00:29:32.560
<v Speaker 0>and stuck a few thousand workloads or something

00:29:32.560 --> 00:29:34.480
<v Speaker 0>on this cluster to kinda see more but

00:29:34.480 --> 00:29:36.320
<v Speaker 0>we're still getting a lot, mean considering this

00:29:36.320 --> 00:29:39.760
<v Speaker 0>is a really vanilla Kubernetes cluster that's just

00:29:39.760 --> 00:29:42.320
<v Speaker 0>running the control plane Rawk and Cilium. We're

00:29:42.320 --> 00:29:45.445
<v Speaker 0>already getting a whole wealth of information out

00:29:45.445 --> 00:29:47.844
<v Speaker 0>of this immediately which is pretty nice.

00:29:48.565 --> 00:29:51.044
<v Speaker 0>We have a question from Noel if you

00:29:51.044 --> 00:29:53.044
<v Speaker 0>want to tackle that and Noel is asking

00:29:53.044 --> 00:29:55.924
<v Speaker 0>does this profiling have an impact on

00:29:56.130 --> 00:29:58.769
<v Speaker 0>you know, our CPU and memory and such?

00:29:59.890 --> 00:30:01.889
<v Speaker 1>Yeah. For sure. So, you

00:30:02.450 --> 00:30:03.409
<v Speaker 1>know, with

00:30:03.650 --> 00:30:06.690
<v Speaker 1>these types of tools, we realized that it's

00:30:06.690 --> 00:30:09.570
<v Speaker 1>so important for us to take as minimal

00:30:09.570 --> 00:30:11.725
<v Speaker 1>of a footprint as possible while still providing

00:30:11.725 --> 00:30:13.085
<v Speaker 1>really rich geometry.

00:30:13.245 --> 00:30:13.884
<v Speaker 1>Because,

00:30:14.525 --> 00:30:16.285
<v Speaker 1>you know, I take it very seriously what

00:30:16.285 --> 00:30:18.125
<v Speaker 1>runs on my production cluster, and I don't

00:30:18.125 --> 00:30:19.965
<v Speaker 1>want that to be something that in a

00:30:19.965 --> 00:30:21.885
<v Speaker 1>bad time is eating, like, 50% of my

00:30:21.885 --> 00:30:24.605
<v Speaker 1>CPU or something like that. And so with

00:30:24.605 --> 00:30:25.325
<v Speaker 1>that being said,

00:30:26.440 --> 00:30:27.080
<v Speaker 1>we

00:30:28.360 --> 00:30:31.640
<v Speaker 1>we target that Pixie will use under 2%

00:30:31.640 --> 00:30:32.760
<v Speaker 1>of the CPU

00:30:33.240 --> 00:30:35.240
<v Speaker 1>of each of the nodes. But,

00:30:35.800 --> 00:30:37.960
<v Speaker 1>you know, just for some buffer room and

00:30:37.960 --> 00:30:39.960
<v Speaker 1>practice, we say that it should say under

00:30:39.960 --> 00:30:42.034
<v Speaker 1>5%. But we're always looking to drive that

00:30:42.034 --> 00:30:42.594
<v Speaker 1>down.

00:30:44.195 --> 00:30:44.994
<v Speaker 0>Okay.

00:30:46.515 --> 00:30:48.595
<v Speaker 0>Can we confirm that through the what's being

00:30:48.595 --> 00:30:49.234
<v Speaker 0>logged?

00:30:49.554 --> 00:30:52.274
<v Speaker 1>Oh, hell hell yeah. Definitely. So if you

00:30:52.274 --> 00:30:55.635
<v Speaker 1>wanna go click on the PL Vizier pen

00:30:55.635 --> 00:30:57.620
<v Speaker 1>pod in this you don't even have to

00:30:57.620 --> 00:30:59.140
<v Speaker 1>exit out of this view. You see that

00:30:59.140 --> 00:31:01.940
<v Speaker 1>PL Vizier PEM pod? Yep. So let's let's

00:31:01.940 --> 00:31:03.299
<v Speaker 1>take a look and see if we're living

00:31:03.299 --> 00:31:04.580
<v Speaker 1>up to that. If not, I can file

00:31:04.580 --> 00:31:05.379
<v Speaker 1>some bugs.

00:31:08.179 --> 00:31:10.580
<v Speaker 1>So Oh, wow. That's the CPU usage for

00:31:10.580 --> 00:31:12.674
<v Speaker 1>this pod and it looks like we are

00:31:12.674 --> 00:31:15.394
<v Speaker 1>seeing under 2%. So that 5%

00:31:15.394 --> 00:31:17.714
<v Speaker 1>qualification, I guess, wasn't necessary here.

00:31:19.475 --> 00:31:21.554
<v Speaker 0>Yeah. So we can actually see yeah. We've

00:31:21.554 --> 00:31:23.635
<v Speaker 0>got all the major stats on this pod

00:31:24.049 --> 00:31:25.649
<v Speaker 0>and what what is happening.

00:31:26.130 --> 00:31:28.929
<v Speaker 0>Are these functions and syscalls? Pod two.

00:31:30.850 --> 00:31:32.850
<v Speaker 1>Oh, sorry. I think I missed that. Are

00:31:32.850 --> 00:31:35.730
<v Speaker 0>these the functions or syscalls that that application's

00:31:35.730 --> 00:31:36.049
<v Speaker 0>calling?

00:31:37.665 --> 00:31:41.105
<v Speaker 1>You know, so for compiled languages, we're actually

00:31:41.105 --> 00:31:42.865
<v Speaker 1>able to get the function names.

00:31:43.345 --> 00:31:45.585
<v Speaker 1>And so if you're running a c plus

00:31:45.585 --> 00:31:47.265
<v Speaker 1>plus c or go

00:31:47.505 --> 00:31:50.720
<v Speaker 1>application for example, we're actually able to extract

00:31:50.720 --> 00:31:53.600
<v Speaker 1>out the functions themselves and how much time

00:31:53.600 --> 00:31:55.919
<v Speaker 1>that they are each causing, not just the

00:31:55.919 --> 00:31:56.879
<v Speaker 1>system calls.

00:31:58.799 --> 00:31:59.519
<v Speaker 0>Okay.

00:31:59.919 --> 00:32:01.360
<v Speaker 1>So you'll see a lot of C plus

00:32:01.360 --> 00:32:02.720
<v Speaker 1>plus in there because that's what the PEM

00:32:02.720 --> 00:32:03.600
<v Speaker 1>is made on.

00:32:04.445 --> 00:32:05.965
<v Speaker 0>That's pretty

00:32:06.445 --> 00:32:07.164
<v Speaker 0>magic.

00:32:07.405 --> 00:32:09.245
<v Speaker 0>I like that. I wanna look at something

00:32:09.245 --> 00:32:10.845
<v Speaker 0>else now. Can I just change pod?

00:32:11.165 --> 00:32:13.965
<v Speaker 0>Yeah. You can change pod for sure. You

00:32:14.925 --> 00:32:16.285
<v Speaker 1>know, you can

00:32:17.080 --> 00:32:19.000
<v Speaker 1>also like as you were doing browse the

00:32:19.000 --> 00:32:20.920
<v Speaker 1>scripts and see what is up with those.

00:32:21.480 --> 00:32:23.080
<v Speaker 0>Yeah. We can definitely take a look at

00:32:23.080 --> 00:32:24.760
<v Speaker 0>more scripts. So this this is our Cilium

00:32:24.760 --> 00:32:26.520
<v Speaker 0>pod which you know handles all of the

00:32:26.520 --> 00:32:27.320
<v Speaker 0>networking

00:32:27.880 --> 00:32:30.120
<v Speaker 0>because he's making HTTP requests.

00:32:30.360 --> 00:32:32.520
<v Speaker 0>I'm curious then, like does

00:32:33.015 --> 00:32:34.535
<v Speaker 0>Pixie understand

00:32:34.535 --> 00:32:37.335
<v Speaker 0>all the major protocols like HTTP,

00:32:37.335 --> 00:32:38.294
<v Speaker 0>gRPC,

00:32:38.455 --> 00:32:40.375
<v Speaker 0>Kafka or

00:32:40.375 --> 00:32:41.175
<v Speaker 0>does

00:32:41.175 --> 00:32:43.174
<v Speaker 0>it does it not care about that stuff?

00:32:44.135 --> 00:32:44.775
<v Speaker 1>Yeah.

00:32:45.255 --> 00:32:47.815
<v Speaker 1>You know anything that uses HTTP

00:32:48.299 --> 00:32:50.459
<v Speaker 1>you know, will automatically be traced.

00:32:50.539 --> 00:32:53.340
<v Speaker 1>So sometimes those protocols will use HTTP, you

00:32:53.340 --> 00:32:55.740
<v Speaker 1>know, kind of underneath the hood. But we

00:32:55.740 --> 00:32:58.299
<v Speaker 1>also do support, like, many different protocols in

00:32:58.299 --> 00:32:59.179
<v Speaker 1>addition to that.

00:32:59.500 --> 00:33:01.340
<v Speaker 1>And we have a list on our doc

00:33:00.975 --> 00:33:03.215
<v Speaker 1>page, but I can just rattle off some

00:33:03.215 --> 00:33:03.934
<v Speaker 1>examples.

00:33:04.895 --> 00:33:06.654
<v Speaker 1>We support MySQL,

00:33:06.815 --> 00:33:07.774
<v Speaker 1>Cassandra,

00:33:08.015 --> 00:33:08.975
<v Speaker 1>Postgres.

00:33:10.015 --> 00:33:11.215
<v Speaker 1>We support

00:33:11.615 --> 00:33:12.174
<v Speaker 1>DNS.

00:33:13.390 --> 00:33:16.910
<v Speaker 1>We support encrypted encrypted HTTP traffic in addition

00:33:16.910 --> 00:33:18.909
<v Speaker 1>to unencrypted HTTP traffic.

00:33:20.830 --> 00:33:21.789
<v Speaker 1>We have

00:33:22.670 --> 00:33:25.230
<v Speaker 1>support for other ones, and I'm just blanking

00:33:25.230 --> 00:33:26.554
<v Speaker 1>a little bit. But if you wanna just

00:33:26.554 --> 00:33:27.674
<v Speaker 1>pull up the docs, we can take a

00:33:27.674 --> 00:33:29.595
<v Speaker 0>look. Yeah. Yeah. Definitely. I'd only expect you

00:33:29.595 --> 00:33:30.875
<v Speaker 0>to remember all this off the top of

00:33:30.875 --> 00:33:31.514
<v Speaker 0>your head.

00:33:32.075 --> 00:33:33.755
<v Speaker 1>So if you go to supported protocols at

00:33:33.755 --> 00:33:35.835
<v Speaker 1>the very top of the if you scroll

00:33:35.835 --> 00:33:37.355
<v Speaker 1>up Yeah. Supported protocols. Yeah.

00:33:39.030 --> 00:33:40.950
<v Speaker 1>Yeah. Oh, I forgot Redis. Redis is a

00:33:40.950 --> 00:33:41.590
<v Speaker 1>big one.

00:33:41.990 --> 00:33:44.150
<v Speaker 1>And we're always looking to add more protocols.

00:33:44.150 --> 00:33:46.230
<v Speaker 1>So Kafka is a very interesting one.

00:33:47.270 --> 00:33:49.750
<v Speaker 0>Okay. So at my applications, all my cluster

00:33:49.750 --> 00:33:51.510
<v Speaker 0>where Pixie is deployed is used in h

00:33:51.510 --> 00:33:52.710
<v Speaker 0>t t p, h t p two, g

00:33:52.710 --> 00:33:53.830
<v Speaker 0>r p c d n s, etcetera,

00:33:54.735 --> 00:33:57.695
<v Speaker 0>telemetry is automatically gonna be collected for me.

00:33:58.255 --> 00:34:00.895
<v Speaker 1>Mhmm. And we'll also ship Pixie with views

00:34:00.895 --> 00:34:03.535
<v Speaker 1>that query that data and present it to

00:34:03.535 --> 00:34:05.374
<v Speaker 1>you in an easy to consume fashion.

00:34:05.615 --> 00:34:06.174
<v Speaker 1>So

00:34:06.815 --> 00:34:09.430
<v Speaker 1>support that protocol, like, also includes like,

00:34:09.670 --> 00:34:11.750
<v Speaker 1>you know, scripts that you can easily access.

00:34:13.110 --> 00:34:15.590
<v Speaker 0>Okay. That is very very cool.

00:34:16.469 --> 00:34:18.390
<v Speaker 0>Okay. So we can see the processes on

00:34:18.390 --> 00:34:18.949
<v Speaker 0>our pod.

00:34:20.645 --> 00:34:21.925
<v Speaker 0>Network stats.

00:34:23.284 --> 00:34:24.885
<v Speaker 1>Yeah. I really be able to see stuff

00:34:24.885 --> 00:34:26.165
<v Speaker 1>by container too.

00:34:27.364 --> 00:34:30.085
<v Speaker 0>Even just seeing the request being made, we've

00:34:30.085 --> 00:34:32.724
<v Speaker 0>got the p 99 here. That's just invaluable

00:34:32.724 --> 00:34:34.645
<v Speaker 0>information when you're debugging microservices.

00:34:35.239 --> 00:34:36.920
<v Speaker 0>Very, Yeah. And I don't know how easy

00:34:36.920 --> 00:34:38.440
<v Speaker 1>this is to discover, but if you see

00:34:38.440 --> 00:34:40.599
<v Speaker 1>those little, like, white tick marks, if you

00:34:40.599 --> 00:34:41.159
<v Speaker 1>click,

00:34:41.559 --> 00:34:43.000
<v Speaker 1>like, let's say, like, the one in the

00:34:43.000 --> 00:34:44.679
<v Speaker 1>middle of the bar in the latency p

00:34:44.679 --> 00:34:45.480
<v Speaker 1>99 section.

00:34:47.895 --> 00:34:49.975
<v Speaker 1>So if you just click another one Oh.

00:34:50.135 --> 00:34:52.135
<v Speaker 1>Oh, is it? Yeah. If you just click

00:34:52.135 --> 00:34:52.695
<v Speaker 1>that,

00:34:54.935 --> 00:34:56.295
<v Speaker 1>it switches everything

00:34:57.815 --> 00:34:59.495
<v Speaker 1>to p 50. So now you can see

00:34:59.495 --> 00:35:01.255
<v Speaker 1>all the fifties. So you can drill down

00:35:01.255 --> 00:35:03.890
<v Speaker 1>into p 50, p 90 and p 99

00:35:03.890 --> 00:35:05.890
<v Speaker 1>in this column. And you can sort as

00:35:05.890 --> 00:35:06.290
<v Speaker 1>well.

00:35:07.410 --> 00:35:08.690
<v Speaker 0>Okay. Got it.

00:35:09.010 --> 00:35:10.609
<v Speaker 0>And then if I expand it, I can

00:35:10.609 --> 00:35:12.530
<v Speaker 0>just actually see those values here too.

00:35:13.809 --> 00:35:15.490
<v Speaker 1>Yeah. That's useful when you have a lot

00:35:15.435 --> 00:35:17.035
<v Speaker 1>columns in the result table and you kind

00:35:17.035 --> 00:35:18.715
<v Speaker 1>of want to look into a particular record

00:35:18.715 --> 00:35:19.515
<v Speaker 1>in detail.

00:35:21.835 --> 00:35:22.555
<v Speaker 0>Okay.

00:35:24.555 --> 00:35:26.635
<v Speaker 0>That was impressive. I really liked that.

00:35:28.730 --> 00:35:29.450
<v Speaker 1>Let's take a look

00:35:30.730 --> 00:35:33.210
<v Speaker 0>at another script. Do you want me to

00:35:33.210 --> 00:35:34.410
<v Speaker 0>pick one or is there something you'd like

00:35:34.410 --> 00:35:35.850
<v Speaker 0>to take a look at here?

00:35:36.970 --> 00:35:40.315
<v Speaker 1>Let's do NetFlow graph. I really always enjoy

00:35:40.315 --> 00:35:41.115
<v Speaker 1>that one.

00:35:43.835 --> 00:35:45.275
<v Speaker 1>And you're gonna have to put a namespace

00:35:45.275 --> 00:35:46.235
<v Speaker 1>in. So

00:35:46.715 --> 00:35:48.635
<v Speaker 1>if you want, you can put in PL

00:35:48.635 --> 00:35:50.395
<v Speaker 1>because I know that one exists, or you

00:35:50.395 --> 00:35:51.835
<v Speaker 1>can put in one of the namespaces you're

00:35:51.835 --> 00:35:52.795
<v Speaker 1>interested in looking at.

00:35:54.150 --> 00:35:56.390
<v Speaker 0>The type one is not, like, giving me

00:35:56.390 --> 00:35:57.910
<v Speaker 1>a If you click on the if you

00:35:57.910 --> 00:35:59.750
<v Speaker 1>click on namespace to filter on.

00:36:01.829 --> 00:36:02.230
<v Speaker 1>Is it

00:36:03.829 --> 00:36:05.349
<v Speaker 1>if you so you see where it has

00:36:05.349 --> 00:36:07.385
<v Speaker 1>the text namespace to filter on? Oh, yeah.

00:36:07.385 --> 00:36:08.585
<v Speaker 0>Yeah. Alright. Okay.

00:36:08.825 --> 00:36:10.744
<v Speaker 1>Yeah. You just type p l or or

00:36:10.744 --> 00:36:12.425
<v Speaker 1>default. Default works too.

00:36:15.305 --> 00:36:16.185
<v Speaker 0>There we go.

00:36:20.589 --> 00:36:22.910
<v Speaker 1>So it's a little bit overwhelming, but what

00:36:22.910 --> 00:36:24.190
<v Speaker 1>we're seeing is

00:36:24.750 --> 00:36:26.829
<v Speaker 1>a map of the network traffic that we

00:36:26.829 --> 00:36:28.350
<v Speaker 1>have in this namespace.

00:36:29.310 --> 00:36:31.070
<v Speaker 1>And we try to resolve as best we

00:36:31.070 --> 00:36:34.670
<v Speaker 1>can all the places that

00:36:33.195 --> 00:36:34.955
<v Speaker 1>your different pods are talking to.

00:36:35.275 --> 00:36:37.355
<v Speaker 0>Okay. So we can actually see which of

00:36:37.355 --> 00:36:38.395
<v Speaker 0>the Pixie

00:36:38.635 --> 00:36:41.195
<v Speaker 0>pods are communicating with one another

00:36:41.515 --> 00:36:43.995
<v Speaker 0>through all these lanes. What's the difference between

00:36:43.995 --> 00:36:47.035
<v Speaker 0>the blue and the gray kinda node representation?

00:36:47.940 --> 00:36:48.660
<v Speaker 1>Mhmm.

00:36:48.980 --> 00:36:50.020
<v Speaker 1>Yeah. So,

00:36:50.579 --> 00:36:51.300
<v Speaker 1>basically,

00:36:51.619 --> 00:36:53.300
<v Speaker 1>the blue is more like,

00:36:53.780 --> 00:36:55.540
<v Speaker 1>it's more considered like remote,

00:36:56.500 --> 00:36:57.140
<v Speaker 1>I guess.

00:36:57.700 --> 00:37:00.500
<v Speaker 1>So the non blue is the pod in

00:37:00.500 --> 00:37:02.980
<v Speaker 1>your namespace, and then the blue is anyone

00:37:02.980 --> 00:37:05.175
<v Speaker 1>else that it's talking to because we have

00:37:05.175 --> 00:37:07.175
<v Speaker 1>that namespace filter in here and that filters

00:37:07.175 --> 00:37:08.215
<v Speaker 1>the gray ones.

00:37:08.535 --> 00:37:10.535
<v Speaker 1>But we know that these pods may be

00:37:10.535 --> 00:37:12.295
<v Speaker 1>talking to destinations

00:37:12.455 --> 00:37:14.775
<v Speaker 1>outside the namespace or even outside the cluster

00:37:14.775 --> 00:37:16.535
<v Speaker 1>and we wanna still represent that information.

00:37:18.050 --> 00:37:19.090
<v Speaker 0>Okay.

00:37:19.570 --> 00:37:21.730
<v Speaker 0>What happens if I click enable hierarchy down

00:37:21.730 --> 00:37:22.290
<v Speaker 0>here?

00:37:22.530 --> 00:37:23.570
<v Speaker 1>Let's see.

00:37:27.250 --> 00:37:29.650
<v Speaker 1>Sometimes that can be a nicer representation.

00:37:29.970 --> 00:37:31.010
<v Speaker 0>Oh, I can zoom.

00:37:31.570 --> 00:37:33.650
<v Speaker 1>Mhmm. Mhmm. And drag it around. Yep.

00:37:34.585 --> 00:37:36.345
<v Speaker 1>So now we can see more clusters of

00:37:36.345 --> 00:37:37.065
<v Speaker 1>behavior.

00:37:38.185 --> 00:37:39.865
<v Speaker 0>There we go. That's a bit better.

00:37:40.265 --> 00:37:42.265
<v Speaker 1>Mhmm. Yeah. The other one was a little

00:37:42.265 --> 00:37:43.625
<v Speaker 1>a little extra.

00:37:47.470 --> 00:37:48.430
<v Speaker 0>That's cool.

00:37:49.550 --> 00:37:51.790
<v Speaker 0>I mean, how does it get like the

00:37:51.870 --> 00:37:54.510
<v Speaker 0>the domain names if it's encrypted traffic?

00:37:55.310 --> 00:37:56.750
<v Speaker 0>Or is that all it gets? It doesn't

00:37:56.750 --> 00:37:57.710
<v Speaker 0>get paths and such?

00:37:58.925 --> 00:38:01.405
<v Speaker 0>I'm not actually sure. Well, we Pixie has

00:38:01.405 --> 00:38:03.725
<v Speaker 1>access to be able to trace the the

00:38:03.725 --> 00:38:05.805
<v Speaker 1>encrypted traffic when it's unencrypted

00:38:05.885 --> 00:38:07.965
<v Speaker 1>by the system. So we can actually give

00:38:07.965 --> 00:38:09.165
<v Speaker 1>you a full request

00:38:09.245 --> 00:38:11.485
<v Speaker 1>because we're collecting it in the place that

00:38:11.485 --> 00:38:13.805
<v Speaker 1>it is already encrypt unencrypted, if that makes

00:38:13.805 --> 00:38:15.400
<v Speaker 1>sense. Yes. Okay.

00:38:16.040 --> 00:38:16.920
<v Speaker 0>There's

00:38:16.920 --> 00:38:18.840
<v Speaker 0>a loud siren. Hopefully you can hear that.

00:38:18.840 --> 00:38:19.240
<v Speaker 1>Okay.

00:38:21.000 --> 00:38:22.360
<v Speaker 0>So then we've got

00:38:23.800 --> 00:38:25.800
<v Speaker 0>so this is just all the requests. Okay.

00:38:25.800 --> 00:38:27.880
<v Speaker 0>So we can see where where the source

00:38:27.880 --> 00:38:29.480
<v Speaker 0>was, where the destination was

00:38:29.805 --> 00:38:32.445
<v Speaker 0>and we've got bytes sent and bytes received.

00:38:33.085 --> 00:38:34.765
<v Speaker 1>Yeah. This can often be a pretty eye

00:38:34.765 --> 00:38:36.925
<v Speaker 1>opening view for our users and

00:38:37.085 --> 00:38:37.805
<v Speaker 1>it

00:38:38.045 --> 00:38:41.005
<v Speaker 1>can produce some unexpected results sometimes. We often

00:38:41.005 --> 00:38:44.125
<v Speaker 1>hear things like, wait, those two things shouldn't

00:38:44.125 --> 00:38:44.684
<v Speaker 1>be talking.

00:38:45.490 --> 00:38:46.530
<v Speaker 1>What the heck?

00:38:48.370 --> 00:38:49.650
<v Speaker 0>Yeah. Yeah.

00:38:50.370 --> 00:38:51.810
<v Speaker 0>It's just good to get in, like these

00:38:51.810 --> 00:38:53.010
<v Speaker 0>are things I think that are so easy

00:38:53.010 --> 00:38:55.250
<v Speaker 0>to overlook in your clusters that you just,

00:38:55.250 --> 00:38:57.490
<v Speaker 0>you know, you don't have observability in them

00:38:57.490 --> 00:38:59.010
<v Speaker 0>or you just forget or you're gonna do

00:38:59.010 --> 00:39:00.370
<v Speaker 0>it later and like

00:39:01.194 --> 00:39:02.635
<v Speaker 0>this took all this took me all of

00:39:02.635 --> 00:39:05.275
<v Speaker 0>what ten seconds to deploy and get this.

00:39:05.434 --> 00:39:07.515
<v Speaker 0>So yeah. Very

00:39:08.315 --> 00:39:10.155
<v Speaker 0>very cool. EPPF is so cool.

00:39:11.194 --> 00:39:13.515
<v Speaker 1>Really it's really cool stuff and we're really

00:39:13.515 --> 00:39:15.115
<v Speaker 1>excited to be building this because,

00:39:15.680 --> 00:39:17.760
<v Speaker 1>you know, as developers, we're trying to build

00:39:17.760 --> 00:39:19.600
<v Speaker 1>the thing that we ourselves want.

00:39:21.040 --> 00:39:23.360
<v Speaker 1>Oh, so this funcs is basically, like,

00:39:24.000 --> 00:39:25.520
<v Speaker 1>trying to help the user if they wanna

00:39:25.520 --> 00:39:27.360
<v Speaker 1>compose their own queries and they wanna know

00:39:27.360 --> 00:39:28.480
<v Speaker 1>what functions are available.

00:39:29.165 --> 00:39:29.805
<v Speaker 1>Now,

00:39:30.045 --> 00:39:31.885
<v Speaker 1>this also exists in our docs and I

00:39:31.885 --> 00:39:33.805
<v Speaker 1>would argue it may be more easily consumable

00:39:33.805 --> 00:39:35.085
<v Speaker 1>in the docs, but,

00:39:35.645 --> 00:39:38.045
<v Speaker 1>just an example of the type of kind

00:39:38.045 --> 00:39:39.885
<v Speaker 1>of like helper view that we can also

00:39:39.885 --> 00:39:42.045
<v Speaker 1>provide in addition to the more typical views.

00:39:43.230 --> 00:39:45.310
<v Speaker 0>Yeah. I I kind of accidentally clicked on

00:39:45.310 --> 00:39:47.390
<v Speaker 0>that. Wasn't something I intended to click on

00:39:47.390 --> 00:39:47.710
<v Speaker 0>so

00:39:48.190 --> 00:39:48.990
<v Speaker 1>Oh, okay.

00:39:50.030 --> 00:39:51.950
<v Speaker 0>But I was getting when I clicked on

00:39:51.950 --> 00:39:53.070
<v Speaker 0>it, I like, oh, wonder what this is

00:39:53.070 --> 00:39:55.150
<v Speaker 0>and then I had no idea so I'm

00:39:55.150 --> 00:39:55.950
<v Speaker 0>glad you explained it.

00:39:57.174 --> 00:39:59.015
<v Speaker 0>Alright. Let's take a look at maybe two

00:39:59.015 --> 00:40:00.615
<v Speaker 0>more and then we can see what other

00:40:00.615 --> 00:40:02.935
<v Speaker 0>functionality we we have available here.

00:40:03.494 --> 00:40:06.055
<v Speaker 1>Maybe HTTP data could be a good one.

00:40:06.055 --> 00:40:07.095
<v Speaker 0>HTTP.

00:40:08.470 --> 00:40:09.910
<v Speaker 1>I think that a lot of times, like,

00:40:09.910 --> 00:40:11.590
<v Speaker 1>it's good to see the computer results, but

00:40:11.590 --> 00:40:13.190
<v Speaker 1>I also just love to see the raw

00:40:13.190 --> 00:40:14.310
<v Speaker 1>data sometimes.

00:40:14.710 --> 00:40:16.790
<v Speaker 1>And this is a very raw view. It's

00:40:16.790 --> 00:40:18.870
<v Speaker 1>a little I would expand a row because

00:40:18.870 --> 00:40:20.070
<v Speaker 1>it's it's very wide.

00:40:22.515 --> 00:40:24.435
<v Speaker 1>But this is the type of information that

00:40:24.435 --> 00:40:26.835
<v Speaker 1>we're able to collect. We're able to collect

00:40:26.835 --> 00:40:29.955
<v Speaker 1>the request and response body, the headers, the

00:40:29.955 --> 00:40:32.595
<v Speaker 1>time, the pod that it happened on,

00:40:32.994 --> 00:40:33.714
<v Speaker 1>the path.

00:40:36.400 --> 00:40:38.560
<v Speaker 0>Yeah. So we've got full visibility and to

00:40:38.560 --> 00:40:41.120
<v Speaker 0>each of the HTTP requests that were captured

00:40:41.200 --> 00:40:42.480
<v Speaker 0>by Pixie. Right.

00:40:42.800 --> 00:40:45.520
<v Speaker 1>Right. Okay. And each protocol will have its

00:40:45.520 --> 00:40:47.760
<v Speaker 1>own kind of equivalent view of just looking

00:40:47.760 --> 00:40:48.480
<v Speaker 1>at the raw data.

00:40:49.224 --> 00:40:52.265
<v Speaker 0>So I'm curious, like, you know, we're using

00:40:52.265 --> 00:40:54.425
<v Speaker 0>Pixie scripts that are just pre canned for

00:40:54.425 --> 00:40:56.665
<v Speaker 0>us. Like, if I wanted to be able

00:40:56.665 --> 00:40:57.385
<v Speaker 0>to see,

00:40:57.785 --> 00:41:00.025
<v Speaker 0>you know, because this is, you know, HTTP

00:41:00.025 --> 00:41:00.425
<v Speaker 0>aware,

00:41:01.000 --> 00:41:02.520
<v Speaker 0>it possible for me to see all the

00:41:02.520 --> 00:41:04.360
<v Speaker 0>four hundreds or five hundreds and be able

00:41:04.360 --> 00:41:05.320
<v Speaker 0>to keep

00:41:05.320 --> 00:41:07.640
<v Speaker 0>a track of things that are maybe broken

00:41:07.640 --> 00:41:09.160
<v Speaker 0>in my custom? Oh,

00:41:09.800 --> 00:41:10.680
<v Speaker 1>definitely.

00:41:10.920 --> 00:41:11.480
<v Speaker 1>So

00:41:12.600 --> 00:41:14.840
<v Speaker 1>we do capture the codes and that's,

00:41:15.465 --> 00:41:16.985
<v Speaker 1>you know, one of the ways that we

00:41:16.985 --> 00:41:17.865
<v Speaker 1>produce

00:41:18.425 --> 00:41:20.745
<v Speaker 1>plots of, like, errors per service and things

00:41:20.745 --> 00:41:21.465
<v Speaker 1>like that.

00:41:22.025 --> 00:41:23.545
<v Speaker 1>Maybe it would be good to

00:41:24.265 --> 00:41:27.065
<v Speaker 1>busy response status, c 200. So you can

00:41:27.065 --> 00:41:30.240
<v Speaker 1>write a pixel script that, you know, aggregates

00:41:30.240 --> 00:41:32.320
<v Speaker 1>on response status or,

00:41:32.800 --> 00:41:34.160
<v Speaker 1>you know, does all the things with the

00:41:34.160 --> 00:41:35.760
<v Speaker 1>code or counts the number of things that

00:41:35.760 --> 00:41:37.120
<v Speaker 1>are not success.

00:41:37.600 --> 00:41:38.880
<v Speaker 1>We do that in a lot of our

00:41:38.880 --> 00:41:41.200
<v Speaker 1>scripts. And so, like, any of these parameters

00:41:41.200 --> 00:41:43.395
<v Speaker 1>that you see, like, you can write scripts

00:41:43.395 --> 00:41:45.635
<v Speaker 1>to analyze. And we hope that the default

00:41:45.635 --> 00:41:46.835
<v Speaker 1>scripts we provide

00:41:46.995 --> 00:41:47.795
<v Speaker 1>cover,

00:41:47.795 --> 00:41:49.955
<v Speaker 1>you know, maybe, like, all the common cases

00:41:49.955 --> 00:41:51.795
<v Speaker 1>so that people don't have to do unnecessary

00:41:51.795 --> 00:41:54.275
<v Speaker 1>work. But if there's something special you wanna

00:41:54.275 --> 00:41:55.660
<v Speaker 1>ask, then,

00:41:55.980 --> 00:41:57.580
<v Speaker 1>you know, this type of data you can

00:41:57.580 --> 00:41:58.620
<v Speaker 1>just query out.

00:42:00.940 --> 00:42:01.980
<v Speaker 0>Okay.

00:42:02.380 --> 00:42:04.380
<v Speaker 0>So do you want to do something with

00:42:04.380 --> 00:42:05.340
<v Speaker 0>that or do you want to take a

00:42:05.340 --> 00:42:06.700
<v Speaker 0>look at one more script and then move

00:42:06.700 --> 00:42:07.900
<v Speaker 0>on to that? What's your preference?

00:42:09.555 --> 00:42:11.315
<v Speaker 1>I don't know. Both are pretty good.

00:42:13.075 --> 00:42:15.234
<v Speaker 1>Why don't we edit this script and just

00:42:15.234 --> 00:42:16.755
<v Speaker 1>make it only show errors?

00:42:16.915 --> 00:42:19.155
<v Speaker 0>Alright. Okay. So we So let's go to

00:42:19.155 --> 00:42:20.355
<v Speaker 1>the pixel script.

00:42:20.515 --> 00:42:22.275
<v Speaker 0>So sorry. Are you saying is it pixel

00:42:22.275 --> 00:42:22.755
<v Speaker 0>script?

00:42:23.220 --> 00:42:24.180
<v Speaker 1>PixelScript.

00:42:24.180 --> 00:42:26.660
<v Speaker 1>Yeah. You can say PixieScript too. Either one.

00:42:26.660 --> 00:42:28.740
<v Speaker 1>But, it's technically PixelScript.

00:42:28.820 --> 00:42:29.859
<v Speaker 1>PXL

00:42:29.859 --> 00:42:32.420
<v Speaker 1>is how it's spelled. Gotcha. Okay. Yeah.

00:42:32.820 --> 00:42:34.020
<v Speaker 1>I think it'll be fun to make a

00:42:34.020 --> 00:42:36.340
<v Speaker 1>little modification to this to this script.

00:42:37.965 --> 00:42:40.125
<v Speaker 1>So, basically, what this script is doing is

00:42:40.125 --> 00:42:42.125
<v Speaker 1>it's pulling the HTTP data,

00:42:42.445 --> 00:42:44.845
<v Speaker 1>and it's extracting a little bit more metadata

00:42:44.845 --> 00:42:47.085
<v Speaker 1>to show in the results because

00:42:47.325 --> 00:42:49.805
<v Speaker 1>we're able to resolve things like the namespace

00:42:49.805 --> 00:42:52.365
<v Speaker 1>and the node and the pod that each

00:42:52.365 --> 00:42:52.765
<v Speaker 1>request,

00:42:53.190 --> 00:42:55.030
<v Speaker 1>you know, handed on happened

00:42:55.430 --> 00:42:57.750
<v Speaker 1>on. And Mhmm. We're also dropping some columns

00:42:57.750 --> 00:42:59.430
<v Speaker 1>that we don't think are maybe that useful

00:42:59.430 --> 00:43:00.150
<v Speaker 1>to people.

00:43:00.630 --> 00:43:03.430
<v Speaker 0>So I'm assuming based on kinda what I

00:43:03.430 --> 00:43:05.349
<v Speaker 0>see that there's probably like a d f

00:43:05.349 --> 00:43:07.735
<v Speaker 0>filter. Is that would that be right? You're

00:43:07.735 --> 00:43:09.095
<v Speaker 1>so close, but,

00:43:10.055 --> 00:43:11.175
<v Speaker 1>I'll tell you the,

00:43:12.055 --> 00:43:14.135
<v Speaker 1>I'll tell you the syntax. So you'll say

00:43:14.295 --> 00:43:17.015
<v Speaker 1>d and and you'll actually yeah. So d

00:43:17.015 --> 00:43:17.655
<v Speaker 1>f

00:43:18.055 --> 00:43:19.335
<v Speaker 1>equals

00:43:19.190 --> 00:43:20.150
<v Speaker 1>d f

00:43:20.790 --> 00:43:22.550
<v Speaker 1>and then we're gonna put brackets,

00:43:23.030 --> 00:43:24.230
<v Speaker 1>like square brackets.

00:43:24.470 --> 00:43:26.630
<v Speaker 1>And then this is basically pandas' way of

00:43:26.630 --> 00:43:28.230
<v Speaker 1>doing a filter and we're gonna put a

00:43:28.230 --> 00:43:29.030
<v Speaker 1>boolean

00:43:29.270 --> 00:43:30.390
<v Speaker 1>condition in here.

00:43:31.110 --> 00:43:33.910
<v Speaker 1>And that boolean condition will be used as

00:43:33.910 --> 00:43:35.185
<v Speaker 1>the filter condition.

00:43:35.424 --> 00:43:37.665
<v Speaker 0>Alright. So we'll have to, like, say status

00:43:38.065 --> 00:43:40.065
<v Speaker 0>greater than 400?

00:43:41.184 --> 00:43:43.744
<v Speaker 1>Yeah. But, the only modification that you you

00:43:43.744 --> 00:43:45.585
<v Speaker 1>got almost perfectly is that you'll do d

00:43:45.585 --> 00:43:47.505
<v Speaker 1>f dot resp status because we have to

00:43:47.505 --> 00:43:50.980
<v Speaker 1>specify which data frame, the column exists on.

00:43:51.140 --> 00:43:53.380
<v Speaker 1>So let's try running that

00:43:53.620 --> 00:43:55.060
<v Speaker 1>and see what we see.

00:43:57.860 --> 00:44:00.100
<v Speaker 1>And if you collapse you can collapse that

00:44:00.340 --> 00:44:01.060
<v Speaker 1>editor.

00:44:03.140 --> 00:44:05.460
<v Speaker 1>And now we'll see only

00:44:06.885 --> 00:44:08.645
<v Speaker 1>response statuses

00:44:08.645 --> 00:44:09.445
<v Speaker 0>that are Mhmm.

00:44:13.365 --> 00:44:14.565
<v Speaker 0>That's pretty nifty.

00:44:15.525 --> 00:44:17.205
<v Speaker 0>That's quite a lot. There's actually more than

00:44:17.205 --> 00:44:18.565
<v Speaker 0>I was expecting.

00:44:19.285 --> 00:44:20.005
<v Speaker 1>Yeah. Was

00:44:21.579 --> 00:44:23.579
<v Speaker 0>Alright. Now if I wanted to do like

00:44:23.579 --> 00:44:25.420
<v Speaker 0>an aggregate count of that, is that something

00:44:25.420 --> 00:44:27.260
<v Speaker 0>I can do in Pixelscript as well?

00:44:27.660 --> 00:44:29.660
<v Speaker 1>Oh yeah. Why don't we count it by

00:44:29.660 --> 00:44:30.300
<v Speaker 1>pod?

00:44:30.859 --> 00:44:32.460
<v Speaker 0>Alright. Okay. That sounds good.

00:44:32.859 --> 00:44:35.165
<v Speaker 0>I'm not gonna try and guess that. We're

00:44:35.165 --> 00:44:37.165
<v Speaker 1>gonna take off the d f. Head because

00:44:37.165 --> 00:44:39.325
<v Speaker 0>we don't need that. That's just basically saying

00:44:39.325 --> 00:44:41.005
<v Speaker 1>I only need a thousand records.

00:44:41.484 --> 00:44:43.325
<v Speaker 1>So I'll just walk you through. So you're

00:44:43.325 --> 00:44:45.005
<v Speaker 1>gonna d d f equals

00:44:47.340 --> 00:44:49.420
<v Speaker 1>Is that equals? It looks like a dash,

00:44:49.420 --> 00:44:51.900
<v Speaker 1>but maybe it's not. It's equals. Yeah. Okay.

00:44:51.900 --> 00:44:54.300
<v Speaker 1>Okay. And then you're gonna do d f

00:44:54.300 --> 00:44:55.660
<v Speaker 1>dot group by.

00:44:58.220 --> 00:45:01.785
<v Speaker 1>And No. It's it's just, like, just all

00:45:01.785 --> 00:45:04.025
<v Speaker 1>lowercase, no, underscore.

00:45:04.025 --> 00:45:04.665
<v Speaker 1>Okay.

00:45:04.985 --> 00:45:06.905
<v Speaker 1>And then you can do parens.

00:45:07.785 --> 00:45:10.505
<v Speaker 1>And then in, quotes in single quotes or

00:45:10.505 --> 00:45:12.025
<v Speaker 1>you could do double actually too. You'll do

00:45:12.025 --> 00:45:14.250
<v Speaker 1>pod. So, basically, this is saying we're we're

00:45:14.250 --> 00:45:16.490
<v Speaker 1>doing an aggregate that's gonna group by pod.

00:45:16.810 --> 00:45:19.450
<v Speaker 1>And then after that, after the last paren,

00:45:20.170 --> 00:45:22.490
<v Speaker 1>you're gonna do dot ag or

00:45:24.730 --> 00:45:26.490
<v Speaker 1>or a a g g.

00:45:26.730 --> 00:45:27.850
<v Speaker 0>Oh, ag. Correct. Okay.

00:45:28.865 --> 00:45:31.185
<v Speaker 1>And then in here, let's name the output

00:45:31.185 --> 00:45:33.425
<v Speaker 1>column. So let's just say, like, num underscore

00:45:33.425 --> 00:45:34.225
<v Speaker 1>errors.

00:45:34.545 --> 00:45:35.825
<v Speaker 1>It doesn't have to be in quotes. It

00:45:35.825 --> 00:45:38.145
<v Speaker 1>will just be, like, a key

00:45:38.464 --> 00:45:39.345
<v Speaker 1>Mhmm. Argument.

00:45:39.585 --> 00:45:40.385
<v Speaker 1>And then equals.

00:45:44.000 --> 00:45:45.920
<v Speaker 1>And then we're gonna have, like, a tuple

00:45:45.920 --> 00:45:46.560
<v Speaker 1>here.

00:45:46.960 --> 00:45:48.960
<v Speaker 1>And the first element of the tuple is

00:45:48.960 --> 00:45:50.480
<v Speaker 1>gonna be the input column.

00:45:51.040 --> 00:45:52.480
<v Speaker 1>So let's just say,

00:45:52.960 --> 00:45:54.160
<v Speaker 1>time underscore.

00:45:54.320 --> 00:45:56.800
<v Speaker 1>Doesn't really matter because we're doing account.

00:45:58.095 --> 00:45:59.935
<v Speaker 1>And then that will be in quotes.

00:46:02.815 --> 00:46:03.935
<v Speaker 1>And then comma

00:46:04.175 --> 00:46:06.494
<v Speaker 1>p x dot count. And so, basically, what

00:46:06.494 --> 00:46:08.735
<v Speaker 1>this and then that will yeah. It perfect.

00:46:08.895 --> 00:46:11.295
<v Speaker 1>So what that's basically saying and our docs

00:46:11.295 --> 00:46:13.450
<v Speaker 1>have more detailed information for how to compose

00:46:13.450 --> 00:46:15.930
<v Speaker 1>these queries if that was, like, completely alien.

00:46:17.290 --> 00:46:19.850
<v Speaker 1>It does it does follow the panda's API.

00:46:20.330 --> 00:46:22.410
<v Speaker 1>So there is a method to a method

00:46:22.410 --> 00:46:24.890
<v Speaker 1>to it, and then the docs basically tell

00:46:24.890 --> 00:46:26.410
<v Speaker 1>you about all of these different things you

00:46:26.410 --> 00:46:27.850
<v Speaker 1>can do so you can use them for

00:46:27.850 --> 00:46:30.704
<v Speaker 1>reference. But what this is saying is take

00:46:30.704 --> 00:46:32.785
<v Speaker 1>the pod column and then count the number

00:46:32.785 --> 00:46:34.465
<v Speaker 1>of errors per pod.

00:46:35.905 --> 00:46:38.065
<v Speaker 0>Okay. So will I hit run on this?

00:46:38.065 --> 00:46:38.944
<v Speaker 1>Yeah. Hit run.

00:46:41.400 --> 00:46:42.280
<v Speaker 1>We can

00:46:42.680 --> 00:46:44.280
<v Speaker 0>There we go. And it looks like

00:46:44.520 --> 00:46:45.640
<v Speaker 1>looks like

00:46:46.280 --> 00:46:48.200
<v Speaker 1>core DNS pods are a source of the

00:46:48.200 --> 00:46:51.240
<v Speaker 1>four four or 400 plus errors. So that

00:46:51.319 --> 00:46:53.000
<v Speaker 1>Yeah. Is something that we learned about your

00:46:53.000 --> 00:46:55.480
<v Speaker 1>cluster today. And that's within the last five

00:46:55.480 --> 00:46:55.720
<v Speaker 0>minutes?

00:46:56.855 --> 00:46:59.335
<v Speaker 0>Yeah. Is that Yeah. Okay. So you can

00:46:59.335 --> 00:47:01.494
<v Speaker 1>edit that to be bigger or smaller but,

00:47:01.494 --> 00:47:03.174
<v Speaker 1>know, we find that people tend to be

00:47:03.174 --> 00:47:05.655
<v Speaker 1>most interested in looking at

00:47:08.454 --> 00:47:10.214
<v Speaker 1>Oh, you made you made a mistake. We

00:47:10.214 --> 00:47:11.415
<v Speaker 1>need to work on the UX for this

00:47:11.415 --> 00:47:12.940
<v Speaker 1>a little bit. You actually have to do

00:47:12.940 --> 00:47:15.100
<v Speaker 1>negative because it's like a relative Yeah.

00:47:15.660 --> 00:47:17.340
<v Speaker 0>Of course. That makes sense.

00:47:19.420 --> 00:47:21.180
<v Speaker 1>But I I consider that to be kinda

00:47:21.180 --> 00:47:22.860
<v Speaker 1>our bad, not yours because it would be

00:47:22.860 --> 00:47:23.980
<v Speaker 1>very easy to make that mistake.

00:47:25.955 --> 00:47:26.675
<v Speaker 0>Okay.

00:47:28.595 --> 00:47:30.435
<v Speaker 0>So if someone else wants to learn how

00:47:30.435 --> 00:47:31.715
<v Speaker 0>to write Pexelscript,

00:47:31.715 --> 00:47:33.635
<v Speaker 0>I'm assuming they come into here.

00:47:34.115 --> 00:47:36.035
<v Speaker 0>We've got is it just reference?

00:47:36.355 --> 00:47:38.195
<v Speaker 1>Mhmm. So in operators,

00:47:38.195 --> 00:47:38.595
<v Speaker 1>for example,

00:47:40.100 --> 00:47:42.020
<v Speaker 1>you can click on ag and then see,

00:47:42.020 --> 00:47:43.620
<v Speaker 1>you know, that's what we did.

00:47:48.580 --> 00:47:49.780
<v Speaker 0>There we go.

00:47:50.420 --> 00:47:50.900
<v Speaker 0>Excellent.

00:47:52.815 --> 00:47:55.295
<v Speaker 0>Okay. Let's tackle a couple of questions and

00:47:55.295 --> 00:47:56.815
<v Speaker 0>then we'll we'll we'll see what else we

00:47:56.815 --> 00:47:59.935
<v Speaker 0>can do here. So Suresh is asking,

00:48:00.974 --> 00:48:02.895
<v Speaker 0>are there any improvements to go e b

00:48:02.895 --> 00:48:04.815
<v Speaker 0>p f observability done

00:48:04.815 --> 00:48:06.335
<v Speaker 0>and are they available open source?

00:48:07.180 --> 00:48:09.340
<v Speaker 0>I I guess the rest is asking whether

00:48:09.340 --> 00:48:11.100
<v Speaker 0>they know that the Pixie team is is

00:48:11.100 --> 00:48:14.380
<v Speaker 0>is working on Go eBPF and contributing there.

00:48:14.620 --> 00:48:15.500
<v Speaker 0>I'm not sure.

00:48:16.380 --> 00:48:17.420
<v Speaker 1>Yeah. So

00:48:17.900 --> 00:48:19.820
<v Speaker 1>I would say that we're more consumers of

00:48:19.820 --> 00:48:20.780
<v Speaker 1>eBPF

00:48:21.580 --> 00:48:22.060
<v Speaker 1>but,

00:48:22.445 --> 00:48:25.325
<v Speaker 1>you know, we hope that the stuff that

00:48:25.325 --> 00:48:26.285
<v Speaker 1>we provide

00:48:26.605 --> 00:48:28.605
<v Speaker 1>can be an example to other people who

00:48:28.605 --> 00:48:30.205
<v Speaker 1>wanna use eBPF

00:48:30.205 --> 00:48:31.165
<v Speaker 1>themselves.

00:48:31.565 --> 00:48:34.205
<v Speaker 1>And so you can look at our,

00:48:34.765 --> 00:48:36.365
<v Speaker 1>you know, repo and see what we do

00:48:36.365 --> 00:48:38.320
<v Speaker 1>as an inspiration for how you can also

00:48:38.320 --> 00:48:39.360
<v Speaker 1>incorporate it.

00:48:40.480 --> 00:48:41.120
<v Speaker 0>Okay.

00:48:41.680 --> 00:48:43.040
<v Speaker 0>And I'll just put up a comment from

00:48:43.040 --> 00:48:44.480
<v Speaker 0>Noel who's enjoying

00:48:44.880 --> 00:48:47.520
<v Speaker 0>my editor there on core DNS. I never

00:48:47.520 --> 00:48:50.079
<v Speaker 0>said I would produce a Philly working cluster.

00:48:50.079 --> 00:48:52.240
<v Speaker 0>Just just enough. That's as that's as good

00:48:52.240 --> 00:48:52.720
<v Speaker 0>as it gets.

00:48:53.664 --> 00:48:55.025
<v Speaker 1>It's not uncommon.

00:48:55.585 --> 00:48:57.825
<v Speaker 0>Well, Kubernetes is hard. So

00:48:59.505 --> 00:49:01.664
<v Speaker 0>alright. So we've got links to the Grafana

00:49:01.664 --> 00:49:04.224
<v Speaker 0>data source plugin here. Let's say we've got

00:49:04.224 --> 00:49:05.744
<v Speaker 0>some API documentation.

00:49:07.200 --> 00:49:09.040
<v Speaker 0>Oh, that go reference docs. Okay.

00:49:09.840 --> 00:49:12.640
<v Speaker 1>Yeah. So basically, we have client libraries if

00:49:12.640 --> 00:49:14.320
<v Speaker 1>you want to automate,

00:49:14.640 --> 00:49:17.200
<v Speaker 1>you know, pixies pixel scripts and use the

00:49:17.200 --> 00:49:18.560
<v Speaker 1>results to drive

00:49:18.720 --> 00:49:19.599
<v Speaker 1>CICD

00:49:19.599 --> 00:49:22.515
<v Speaker 1>stuff or, you know, we have a tutorial

00:49:22.515 --> 00:49:24.435
<v Speaker 1>to set up a Slack bot that can

00:49:24.435 --> 00:49:26.595
<v Speaker 1>ping you with results of,

00:49:27.075 --> 00:49:28.755
<v Speaker 1>you know, pixel scripts.

00:49:29.795 --> 00:49:31.714
<v Speaker 1>That can be, you know, a pretty quick

00:49:31.714 --> 00:49:33.875
<v Speaker 1>way to get alerts about what's happening in

00:49:33.875 --> 00:49:36.050
<v Speaker 1>your cluster if you, you know, wanted to

00:49:36.050 --> 00:49:37.650
<v Speaker 1>have been warned sooner about those four zero

00:49:37.650 --> 00:49:39.010
<v Speaker 1>four's or something like that.

00:49:40.930 --> 00:49:43.650
<v Speaker 0>Yeah. This I mean, I'm not gonna sit

00:49:43.650 --> 00:49:45.410
<v Speaker 0>and work through all of this documentation but

00:49:45.410 --> 00:49:46.610
<v Speaker 0>I think I'll be playing with this at

00:49:46.610 --> 00:49:47.730
<v Speaker 0>some point in the near future.

00:49:48.735 --> 00:49:51.295
<v Speaker 0>Now you mentioned alerts and there's a Slack

00:49:51.295 --> 00:49:52.735
<v Speaker 0>alert tutorial here.

00:49:53.375 --> 00:49:55.615
<v Speaker 0>Mhmm. Do you wanna work through this and

00:49:55.615 --> 00:49:57.215
<v Speaker 0>and take a look at the process involved

00:49:57.215 --> 00:49:59.135
<v Speaker 0>there, maybe setting up an alert? Like I

00:49:59.135 --> 00:50:00.415
<v Speaker 0>don't think we need to throw it to

00:50:00.415 --> 00:50:02.655
<v Speaker 0>Slack, we can use a HTTP banner or

00:50:02.655 --> 00:50:03.215
<v Speaker 0>something but

00:50:04.110 --> 00:50:06.670
<v Speaker 0>unless unless it's a Slack function, I'm I'm

00:50:06.670 --> 00:50:10.510
<v Speaker 0>not so for this tutorial, we've actually like,

00:50:10.590 --> 00:50:12.670
<v Speaker 1>you know, made all the boilerplate to like

00:50:12.670 --> 00:50:14.830
<v Speaker 0>Oh, okay. Do the Slack ping and stuff

00:50:14.830 --> 00:50:15.550
<v Speaker 1>like that.

00:50:16.030 --> 00:50:18.430
<v Speaker 1>So it might be easiest to do. So,

00:50:19.704 --> 00:50:21.305
<v Speaker 1>you know, we don't have to do it,

00:50:21.305 --> 00:50:22.744
<v Speaker 1>but this is just a quick way of

00:50:22.744 --> 00:50:24.905
<v Speaker 1>basically looking at 400

00:50:24.984 --> 00:50:27.464
<v Speaker 1>errors in your different services and just being

00:50:27.464 --> 00:50:28.505
<v Speaker 1>alerted to that.

00:50:30.345 --> 00:50:31.944
<v Speaker 1>I did it in a few minutes last

00:50:31.944 --> 00:50:33.224
<v Speaker 1>night and it's pretty easy.

00:50:34.820 --> 00:50:36.500
<v Speaker 1>So we can dive into this if you

00:50:36.500 --> 00:50:38.100
<v Speaker 1>think that that would be a good thing.

00:50:38.500 --> 00:50:40.340
<v Speaker 0>Well, yeah. I think, you know, what we've

00:50:40.340 --> 00:50:42.340
<v Speaker 0>shown so far let me just close that

00:50:42.340 --> 00:50:43.300
<v Speaker 0>one. Is,

00:50:43.700 --> 00:50:46.580
<v Speaker 0>you know, Pixie is already collecting a wealth

00:50:46.580 --> 00:50:48.260
<v Speaker 0>of information on my cluster and I haven't

00:50:48.260 --> 00:50:50.095
<v Speaker 0>done anything. Alright. So we've got a big

00:50:50.095 --> 00:50:52.335
<v Speaker 0>massive text there like I want this.

00:50:52.975 --> 00:50:54.095
<v Speaker 0>But now we've taking a look at the

00:50:54.095 --> 00:50:56.015
<v Speaker 0>scripts and there's loads there, know, we could

00:50:56.015 --> 00:50:57.055
<v Speaker 0>always take a look at a few more

00:50:57.055 --> 00:50:59.375
<v Speaker 0>just before we finish but there's always different

00:50:59.375 --> 00:51:01.375
<v Speaker 0>representations of things happening in my cluster.

00:51:02.130 --> 00:51:03.970
<v Speaker 0>We then modified a script and we're able

00:51:03.970 --> 00:51:05.329
<v Speaker 0>to actually get a count of the four

00:51:05.329 --> 00:51:06.930
<v Speaker 0>zero four as we see core DNS is

00:51:06.930 --> 00:51:07.650
<v Speaker 0>unhappy

00:51:07.890 --> 00:51:10.289
<v Speaker 0>and what I'm thinking is like, there's definitely

00:51:10.289 --> 00:51:12.369
<v Speaker 0>something I would want an alert from. I'd

00:51:12.369 --> 00:51:14.049
<v Speaker 0>want to know if

00:51:14.235 --> 00:51:15.115
<v Speaker 0>I have

00:51:15.995 --> 00:51:17.435
<v Speaker 0>I don't know, I don't know if we

00:51:17.435 --> 00:51:18.955
<v Speaker 0>can work out like the medians or what

00:51:18.955 --> 00:51:20.475
<v Speaker 0>the standard deviation is and stuff but I

00:51:20.475 --> 00:51:22.075
<v Speaker 0>probably want to learn something

00:51:22.395 --> 00:51:24.315
<v Speaker 0>with those four zero four's. So maybe if

00:51:24.315 --> 00:51:25.835
<v Speaker 0>we can put that together that would choose

00:51:25.835 --> 00:51:27.595
<v Speaker 0>a nice end to end example of what

00:51:27.595 --> 00:51:29.355
<v Speaker 0>what Pixie is bringing to my cluster.

00:51:29.960 --> 00:51:31.480
<v Speaker 1>Yeah. That sounds great. Why don't we just

00:51:31.480 --> 00:51:33.320
<v Speaker 1>work through that tutorial and

00:51:33.480 --> 00:51:35.720
<v Speaker 1>you know, just bang it out.

00:51:36.920 --> 00:51:37.720
<v Speaker 0>Okay.

00:51:38.039 --> 00:51:38.680
<v Speaker 0>So

00:51:40.519 --> 00:51:41.720
<v Speaker 0>do I need to do all the Slack

00:51:41.720 --> 00:51:43.160
<v Speaker 0>setup or can we just do the actual

00:51:43.160 --> 00:51:44.279
<v Speaker 0>Pixie bit and have it?

00:51:45.755 --> 00:51:47.835
<v Speaker 1>Let me let me do the

00:51:48.555 --> 00:51:50.795
<v Speaker 1>I'm gonna create a private channel in the

00:51:50.795 --> 00:51:52.715
<v Speaker 1>Pixie community repo

00:51:53.355 --> 00:51:54.475
<v Speaker 1>and

00:51:54.475 --> 00:51:57.195
<v Speaker 1>then we can use I'll create the slack

00:51:57.195 --> 00:51:59.330
<v Speaker 1>bot on my side. Okay.

00:51:59.810 --> 00:52:01.890
<v Speaker 0>Yeah. Because I just realized that they don't

00:52:01.890 --> 00:52:02.770
<v Speaker 0>have a Slack.

00:52:04.770 --> 00:52:06.210
<v Speaker 1>Right. Right. So,

00:52:06.690 --> 00:52:08.850
<v Speaker 1>like, let me just get that started

00:52:09.090 --> 00:52:10.610
<v Speaker 1>and I can

00:52:11.115 --> 00:52:13.275
<v Speaker 1>send that to you. And in the meantime,

00:52:14.315 --> 00:52:17.755
<v Speaker 1>you're gonna wanna track down the cluster ID

00:52:18.235 --> 00:52:20.795
<v Speaker 1>and create an API key in Pixie. So

00:52:20.795 --> 00:52:23.995
<v Speaker 1>why don't we parallelize this Mhmm. And you

00:52:23.995 --> 00:52:25.995
<v Speaker 1>can collect those pieces of information. And I

00:52:25.995 --> 00:52:27.355
<v Speaker 1>can help you find them if you have

00:52:27.355 --> 00:52:26.690
<v Speaker 1>trouble. Information and I can help you find

00:52:26.690 --> 00:52:29.650
<v Speaker 1>them if you have trouble. Okay. So should

00:52:29.650 --> 00:52:31.569
<v Speaker 0>I do the Pixie deploy just now? The

00:52:31.569 --> 00:52:32.530
<v Speaker 0>demo deploy?

00:52:33.490 --> 00:52:35.410
<v Speaker 1>I don't think that you have to but

00:52:35.650 --> 00:52:38.130
<v Speaker 0>Alright. Okay. I think that's just if people

00:52:38.130 --> 00:52:39.970
<v Speaker 1>wanna see more data but I don't think

00:52:39.970 --> 00:52:40.770
<v Speaker 1>that that's necessary.

00:52:41.525 --> 00:52:44.405
<v Speaker 0>Alright. Okay. That's deploying the Pixie Socks shop

00:52:44.405 --> 00:52:46.405
<v Speaker 0>demo. I guess that's a micro service thing.

00:52:46.405 --> 00:52:47.685
<v Speaker 0>Okay. Yeah. We're gonna have to make a

00:52:47.685 --> 00:52:49.925
<v Speaker 1>little modification to the pixel script

00:52:50.165 --> 00:52:53.205
<v Speaker 1>because it filters on that particular namespace, but

00:52:53.205 --> 00:52:55.125
<v Speaker 1>we can just quickly modify that. That won't

00:52:55.125 --> 00:52:55.605
<v Speaker 1>be a problem.

00:52:56.430 --> 00:52:58.910
<v Speaker 0>Okay. Sounds good. So I'm running

00:52:59.550 --> 00:53:02.350
<v Speaker 0>Pixie get Visiers and

00:53:02.670 --> 00:53:05.470
<v Speaker 0>I have my cluster ID. That was easy.

00:53:05.869 --> 00:53:06.590
<v Speaker 1>Mhmm.

00:53:06.670 --> 00:53:08.990
<v Speaker 0>Okay. And then now I need an API

00:53:08.990 --> 00:53:10.750
<v Speaker 0>key, so I'm gonna follow the docs for

00:53:10.750 --> 00:53:11.230
<v Speaker 0>that too.

00:53:17.235 --> 00:53:18.595
<v Speaker 0>Nice and easy as well.

00:53:22.515 --> 00:53:22.835
<v Speaker 0>Perfect.

00:53:25.640 --> 00:53:26.360
<v Speaker 0>Alright.

00:53:26.680 --> 00:53:28.280
<v Speaker 0>Should I clone the

00:53:28.760 --> 00:53:30.040
<v Speaker 0>demo repository?

00:53:33.000 --> 00:53:33.880
<v Speaker 1>Yeah. Please do.

00:53:45.255 --> 00:53:45.975
<v Speaker 0>Select.

00:53:48.375 --> 00:53:49.815
<v Speaker 0>Does it matter if I pick go or

00:53:49.815 --> 00:53:50.455
<v Speaker 0>python?

00:53:50.855 --> 00:53:52.295
<v Speaker 0>Nope. Nope. Okay.

00:53:56.390 --> 00:53:58.790
<v Speaker 0>I'll do Python because the instructions are Python.

00:53:59.109 --> 00:54:00.070
<v Speaker 1>There you go.

00:54:03.910 --> 00:54:05.349
<v Speaker 0>Oh, I don't have pet. Okay. We'll do

00:54:05.349 --> 00:54:05.589
<v Speaker 0>go.

00:54:11.515 --> 00:54:12.635
<v Speaker 0>Alright.

00:54:14.635 --> 00:54:17.275
<v Speaker 0>So export my cluster ID.

00:54:18.954 --> 00:54:20.395
<v Speaker 0>I'll let that build first.

00:54:21.880 --> 00:54:24.600
<v Speaker 1>And, you know, you'll wanna actually modify the

00:54:24.600 --> 00:54:27.160
<v Speaker 1>pixel script where we filter on namespace.

00:54:27.320 --> 00:54:29.320
<v Speaker 1>So I would just find that in the

00:54:29.320 --> 00:54:31.400
<v Speaker 1>HTTP errors dot pixel,

00:54:31.800 --> 00:54:34.840
<v Speaker 1>and I would just delete that line that

00:54:34.840 --> 00:54:35.720
<v Speaker 1>does that filter.

00:54:37.745 --> 00:54:39.745
<v Speaker 0>Right. Okay. Yeah. I can do that.

00:54:48.465 --> 00:54:48.945
<v Speaker 0>Okay.

00:54:50.130 --> 00:54:53.170
<v Speaker 0>So I need to grab my API key

00:54:55.809 --> 00:54:58.050
<v Speaker 0>and then you want me to

00:55:00.289 --> 00:55:01.410
<v Speaker 0>modify this.

00:55:05.195 --> 00:55:06.875
<v Speaker 0>PxDoc.

00:55:07.515 --> 00:55:08.555
<v Speaker 0>There we go.

00:55:10.795 --> 00:55:12.955
<v Speaker 0>And can I just use the PR namespace?

00:55:13.835 --> 00:55:15.675
<v Speaker 1>Yep. That works. You can also just take

00:55:15.675 --> 00:55:17.195
<v Speaker 1>it out altogether and just do a class

00:55:17.195 --> 00:55:17.835
<v Speaker 1>namespaces.

00:55:19.400 --> 00:55:21.559
<v Speaker 0>Done. Alright. So I'm assuming I have to

00:55:21.559 --> 00:55:23.240
<v Speaker 0>do a go build again. I'm assuming that's

00:55:23.240 --> 00:55:24.920
<v Speaker 0>maybe templated in somewhere.

00:55:26.359 --> 00:55:28.119
<v Speaker 1>It's I I don't think so. Think you

00:55:28.119 --> 00:55:29.160
<v Speaker 1>can just do go run.

00:55:30.615 --> 00:55:31.495
<v Speaker 0>And

00:55:31.575 --> 00:55:34.055
<v Speaker 0>all I need now is a Slack bot

00:55:34.055 --> 00:55:34.855
<v Speaker 0>token.

00:55:40.455 --> 00:55:42.215
<v Speaker 1>Yes. I'm about to send that to you.

00:55:42.760 --> 00:55:44.920
<v Speaker 1>But first, I'm gonna create the channel.

00:55:45.160 --> 00:55:45.720
<v Speaker 0>Mhmm.

00:55:47.480 --> 00:55:49.720
<v Speaker 0>Oh, I'm being mocked again by Noel. Come

00:55:49.720 --> 00:55:51.960
<v Speaker 0>on, Noel. Be nice to me. I

00:55:51.960 --> 00:55:54.440
<v Speaker 0>am always flashing API tokens on this show.

00:55:54.440 --> 00:55:56.360
<v Speaker 0>That's true. But I always delete them straight

00:55:56.360 --> 00:55:57.320
<v Speaker 0>after. I promise.

00:56:07.905 --> 00:56:10.145
<v Speaker 0>Okay and then once we have our Slackbot

00:56:10.145 --> 00:56:12.945
<v Speaker 0>token we're gonna do a go run Slackbot.

00:56:14.460 --> 00:56:16.860
<v Speaker 0>And that's us. Yep. Easy. Okay.

00:56:17.580 --> 00:56:19.260
<v Speaker 1>Okay. I'm gonna add you

00:56:19.900 --> 00:56:21.580
<v Speaker 1>and I'm going to

00:56:23.260 --> 00:56:24.300
<v Speaker 1>invite the bot.

00:56:37.335 --> 00:56:39.494
<v Speaker 0>Okay. I see Pixie alerting

00:56:39.494 --> 00:56:40.934
<v Speaker 0>added to the channel.

00:56:41.690 --> 00:56:44.570
<v Speaker 1>Okay. I'm sending you the code over DM.

00:56:44.650 --> 00:56:45.930
<v Speaker 0>Thank you. Alright.

00:56:48.970 --> 00:56:50.730
<v Speaker 0>So you're happy for me to share the

00:56:50.730 --> 00:56:53.529
<v Speaker 0>Pixie test Pixie alerting channel on the stream?

00:56:54.395 --> 00:56:55.275
<v Speaker 1>Mhmm.

00:56:57.515 --> 00:56:58.474
<v Speaker 0>Alright.

00:56:58.474 --> 00:56:59.355
<v Speaker 0>There we go.

00:56:59.915 --> 00:57:01.755
<v Speaker 1>Oh, actually, one more thing. We have to

00:57:01.755 --> 00:57:02.795
<v Speaker 1>edit the channel

00:57:03.355 --> 00:57:06.555
<v Speaker 1>in the script itself in the code because

00:57:07.589 --> 00:57:10.069
<v Speaker 1>it actually but but you do export first.

00:57:10.069 --> 00:57:11.190
<v Speaker 1>Do the export first.

00:57:11.349 --> 00:57:13.190
<v Speaker 0>Okay. I'll do that over here so people

00:57:13.190 --> 00:57:14.230
<v Speaker 0>don't see that.

00:57:15.990 --> 00:57:18.470
<v Speaker 0>Okay. And then we wanna modify our pixel

00:57:18.470 --> 00:57:19.190
<v Speaker 0>script.

00:57:19.750 --> 00:57:21.509
<v Speaker 1>Oh, you did that, so that's great.

00:57:22.605 --> 00:57:24.445
<v Speaker 1>Okay. And then could we also modify the

00:57:24.445 --> 00:57:25.085
<v Speaker 1>function?

00:57:27.885 --> 00:57:29.885
<v Speaker 1>It's not in the script, actually. It's in

00:57:29.885 --> 00:57:30.445
<v Speaker 1>the

00:57:31.965 --> 00:57:34.125
<v Speaker 1>so if you do Oh, Slack button. Oh,

00:57:34.525 --> 00:57:36.940
<v Speaker 0>don't open the binary. There we go. Yeah.

00:57:36.940 --> 00:57:38.300
<v Speaker 1>So now we're gonna just

00:57:38.940 --> 00:57:41.580
<v Speaker 1>yeah. So just change that. I named it

00:57:41.580 --> 00:57:43.260
<v Speaker 1>test Pixie alerting.

00:57:43.740 --> 00:57:45.020
<v Speaker 1>So we're gonna just

00:57:45.580 --> 00:57:46.540
<v Speaker 1>yeah. Great.

00:57:49.115 --> 00:57:50.875
<v Speaker 1>So let's try go run. Let's see if

00:57:50.875 --> 00:57:51.595
<v Speaker 1>it works.

00:57:56.954 --> 00:57:59.355
<v Speaker 0>Yeah. We we did everything there.

00:57:59.595 --> 00:58:00.315
<v Speaker 1>I think so.

00:58:03.710 --> 00:58:04.830
<v Speaker 1>Hey. It works.

00:58:05.150 --> 00:58:07.310
<v Speaker 1>You can maybe just show the Slack.

00:58:07.550 --> 00:58:08.670
<v Speaker 0>Oh, look at that.

00:58:10.030 --> 00:58:12.350
<v Speaker 0>So Pixie Alerting sent us a message telling

00:58:12.350 --> 00:58:14.990
<v Speaker 0>us that we had four x x spikes

00:58:14.990 --> 00:58:16.109
<v Speaker 0>in the last five minutes.

00:58:17.015 --> 00:58:17.815
<v Speaker 1>Mhmm.

00:58:18.535 --> 00:58:20.775
<v Speaker 1>And you can, you know, obviously,

00:58:22.055 --> 00:58:24.215
<v Speaker 1>you know, make it more conditional and things

00:58:24.215 --> 00:58:26.695
<v Speaker 1>like that or run a different script, but,

00:58:26.775 --> 00:58:28.695
<v Speaker 1>you know, we just wanted to kind of

00:58:28.695 --> 00:58:30.775
<v Speaker 1>set up the full end to end thing

00:58:30.775 --> 00:58:33.380
<v Speaker 1>for people with an easy to use example

00:58:33.540 --> 00:58:35.940
<v Speaker 1>that they can then customize to their case.

00:58:36.580 --> 00:58:39.380
<v Speaker 0>Okay. So I mean, that's the exact

00:58:40.260 --> 00:58:42.660
<v Speaker 0>thing that we discovered with my core DNS.

00:58:42.660 --> 00:58:44.420
<v Speaker 0>So was that just complete serendipity that that's

00:58:44.420 --> 00:58:45.940
<v Speaker 0>what the alerting script was set up to

00:58:45.940 --> 00:58:48.645
<v Speaker 0>be? I think a lot of people are

00:58:48.645 --> 00:58:50.645
<v Speaker 1>interested in HTTP

00:58:50.645 --> 00:58:52.805
<v Speaker 1>errors. Alright. Okay. So I would say it's

00:58:52.805 --> 00:58:53.605
<v Speaker 1>serendipitous,

00:58:53.605 --> 00:58:55.285
<v Speaker 1>but I would also say that,

00:58:56.005 --> 00:58:57.685
<v Speaker 1>you know, we try to target a common

00:58:57.685 --> 00:58:58.165
<v Speaker 1>use case.

00:58:59.380 --> 00:59:00.020
<v Speaker 0>Okay.

00:59:00.260 --> 00:59:01.620
<v Speaker 0>Are you happy for us just to kinda

00:59:01.620 --> 00:59:03.380
<v Speaker 0>take a look at that script and actually

00:59:03.380 --> 00:59:03.940
<v Speaker 0>see

00:59:04.420 --> 00:59:06.900
<v Speaker 0>what we have here? Let's do it. Yep.

00:59:06.900 --> 00:59:08.020
<v Speaker 0>Okay. So

00:59:08.260 --> 00:59:10.340
<v Speaker 0>we've got an import p x. I'm assuming

00:59:10.340 --> 00:59:13.300
<v Speaker 0>that's just our our Pixie data frame integration

00:59:13.300 --> 00:59:13.620
<v Speaker 0>thing.

00:59:14.484 --> 00:59:15.125
<v Speaker 1>Yeah.

00:59:15.365 --> 00:59:17.445
<v Speaker 1>That's basically the module that we, you know,

00:59:17.445 --> 00:59:18.005
<v Speaker 1>provide.

00:59:19.765 --> 00:59:22.645
<v Speaker 0>Okay. The table is the HTTP events. So

00:59:22.645 --> 00:59:24.724
<v Speaker 0>how would I find what that table is

00:59:24.724 --> 00:59:26.405
<v Speaker 0>from my Pixie UI?

00:59:26.960 --> 00:59:28.480
<v Speaker 0>Like if I've got data that I wanna

00:59:28.480 --> 00:59:30.079
<v Speaker 0>start writing my own Pixie script from or

00:59:30.079 --> 00:59:31.280
<v Speaker 0>would I just copy it?

00:59:32.559 --> 00:59:34.000
<v Speaker 1>Like, are you saying that like could you

00:59:34.000 --> 00:59:35.520
<v Speaker 1>just copy the script itself?

00:59:35.920 --> 00:59:37.440
<v Speaker 0>Yeah. I was curious how did I know

00:59:37.599 --> 00:59:40.559
<v Speaker 0>how do I know what tables I have

00:59:39.295 --> 00:59:40.095
<v Speaker 0>available?

00:59:40.095 --> 00:59:41.855
<v Speaker 1>Oh, okay. Here. Let's scroll up

00:59:42.655 --> 00:59:44.415
<v Speaker 1>and we're gonna exit out of this one

00:59:44.415 --> 00:59:47.375
<v Speaker 1>if that's okay and go to PX slash

00:59:47.375 --> 00:59:47.935
<v Speaker 1>schema.

00:59:52.850 --> 00:59:54.290
<v Speaker 1>I see you already scrolled up. Was the

00:59:54.290 --> 00:59:55.730
<v Speaker 1>one scrolled down. So,

00:59:58.690 --> 01:00:00.530
<v Speaker 1>in here, what you can see is all

01:00:00.530 --> 01:00:02.290
<v Speaker 1>the different tables in Pixie,

01:00:02.690 --> 01:00:05.195
<v Speaker 1>and the description of what they do. And

01:00:05.195 --> 01:00:06.955
<v Speaker 1>then in the next table, you can see

01:00:06.955 --> 01:00:08.635
<v Speaker 1>all the different columns they have

01:00:08.955 --> 01:00:11.355
<v Speaker 1>and what you can find out about them.

01:00:12.715 --> 01:00:14.395
<v Speaker 0>Okay. There we go. So that's how I

01:00:14.395 --> 01:00:16.715
<v Speaker 0>discover tables and columns that are available for

01:00:16.715 --> 01:00:18.475
<v Speaker 0>me to put in my script. Okay. Got

01:00:18.475 --> 01:00:20.210
<v Speaker 0>it. Yeah. Because that's not something you could

01:00:20.210 --> 01:00:22.450
<v Speaker 1>just infer. We have to document that.

01:00:22.930 --> 01:00:24.770
<v Speaker 1>I mean, it is documented but we also

01:00:24.770 --> 01:00:26.210
<v Speaker 1>want it to be programmatically

01:00:26.210 --> 01:00:27.330
<v Speaker 1>generated as well.

01:00:27.970 --> 01:00:30.849
<v Speaker 0>Yeah. That makes sense. Okay. So much like

01:00:30.849 --> 01:00:33.010
<v Speaker 0>the web UI, we've got our start time

01:00:33.010 --> 01:00:33.170
<v Speaker 0>here.

01:00:34.185 --> 01:00:34.985
<v Speaker 0>Now

01:00:34.985 --> 01:00:37.625
<v Speaker 0>we're looking for greater than 400 again. That

01:00:37.625 --> 01:00:38.985
<v Speaker 0>was just complete

01:00:39.305 --> 01:00:40.985
<v Speaker 0>luck that we happened to have the same

01:00:40.985 --> 01:00:42.745
<v Speaker 0>query but like you said, it's a common

01:00:42.745 --> 01:00:44.905
<v Speaker 0>use case. It makes sense. Yeah.

01:00:45.545 --> 01:00:45.945
<v Speaker 0>Now.

01:00:47.019 --> 01:00:49.579
<v Speaker 1>I promise it was legitimately already that way

01:00:49.579 --> 01:00:50.460
<v Speaker 1>for months. Okay,

01:00:53.099 --> 01:00:55.740
<v Speaker 0>so now we're pulling things from our data

01:00:55.740 --> 01:00:57.980
<v Speaker 0>frame context and to the top level data

01:00:57.980 --> 01:00:59.579
<v Speaker 0>frame. Assume that's just because we want access

01:00:59.579 --> 01:01:01.315
<v Speaker 0>to the namespace in the service and the

01:01:01.315 --> 01:01:02.755
<v Speaker 0>data that we're working with

01:01:03.235 --> 01:01:05.795
<v Speaker 0>then we have our group by service

01:01:05.795 --> 01:01:06.595
<v Speaker 0>aggregating

01:01:06.595 --> 01:01:09.555
<v Speaker 0>the error count and total request count.

01:01:09.955 --> 01:01:11.155
<v Speaker 1>Mhmm. Okay.

01:01:11.315 --> 01:01:13.075
<v Speaker 0>And then we get PX display.

01:01:15.200 --> 01:01:17.680
<v Speaker 0>What does PX display do? Is that can

01:01:17.680 --> 01:01:20.320
<v Speaker 0>I tweak that to display different visualizations?

01:01:20.960 --> 01:01:22.000
<v Speaker 1>Yeah. So

01:01:22.640 --> 01:01:24.240
<v Speaker 1>basically, the way you can think of it

01:01:24.240 --> 01:01:26.319
<v Speaker 1>is there's two ways to write a pixel

01:01:26.319 --> 01:01:26.640
<v Speaker 1>spread.

01:01:27.165 --> 01:01:29.245
<v Speaker 1>The first is with the VizSpec, which is

01:01:29.245 --> 01:01:31.085
<v Speaker 1>what you see if you want fancy charts

01:01:31.085 --> 01:01:32.125
<v Speaker 1>and things like that.

01:01:32.765 --> 01:01:35.165
<v Speaker 1>But the second is if you're lazy like

01:01:35.165 --> 01:01:37.085
<v Speaker 1>me and you just wanna produce a bunch

01:01:37.085 --> 01:01:37.885
<v Speaker 1>of tables,

01:01:38.285 --> 01:01:39.965
<v Speaker 1>you can use this way. And in this

01:01:39.965 --> 01:01:42.800
<v Speaker 1>way, we'll basically basically say that anything you

01:01:42.800 --> 01:01:44.880
<v Speaker 1>call p x dot display on will just

01:01:44.880 --> 01:01:45.760
<v Speaker 1>be outputted.

01:01:46.000 --> 01:01:47.200
<v Speaker 0>Got it. Okay.

01:01:47.600 --> 01:01:48.240
<v Speaker 0>Now

01:01:49.520 --> 01:01:51.280
<v Speaker 0>I I I could just run this in

01:01:51.280 --> 01:01:53.840
<v Speaker 0>the browser to like get live feedback into

01:01:53.840 --> 01:01:55.040
<v Speaker 0>what I'm doing and then

01:01:55.674 --> 01:01:58.154
<v Speaker 0>move it into like the Go tooling and

01:01:58.154 --> 01:02:00.394
<v Speaker 0>do things that way so like the UI

01:02:00.394 --> 01:02:01.674
<v Speaker 0>would be a good way to build these

01:02:01.674 --> 01:02:03.035
<v Speaker 0>out and then I could put them into

01:02:03.035 --> 01:02:05.755
<v Speaker 0>other tooling, is that what you you yeah.

01:02:05.755 --> 01:02:08.315
<v Speaker 0>Okay. I'm glad I I understand that then.

01:02:08.315 --> 01:02:10.154
<v Speaker 0>And now with regards to the Go code

01:02:10.154 --> 01:02:10.474
<v Speaker 0>here,

01:02:11.120 --> 01:02:13.600
<v Speaker 0>is this just using the Pixie API to

01:02:13.600 --> 01:02:15.680
<v Speaker 0>be able to coordinate setting up the alert

01:02:15.680 --> 01:02:16.560
<v Speaker 0>and then

01:02:17.360 --> 01:02:18.560
<v Speaker 0>publish to

01:02:19.040 --> 01:02:19.840
<v Speaker 0>Slack?

01:02:20.240 --> 01:02:22.640
<v Speaker 0>Mhmm. Okay. So the Slack alerting code isn't

01:02:22.640 --> 01:02:25.760
<v Speaker 0>something that's available and like the the PX

01:02:26.214 --> 01:02:27.015
<v Speaker 0>module.

01:02:27.015 --> 01:02:29.095
<v Speaker 0>It's just it's just regular go code.

01:02:29.815 --> 01:02:33.095
<v Speaker 0>Okay. That's right. That's right. Because the pixel

01:02:33.095 --> 01:02:35.494
<v Speaker 1>scripts, you know, that's for clearing data. And

01:02:35.494 --> 01:02:37.495
<v Speaker 1>then because of the API,

01:02:37.815 --> 01:02:40.214
<v Speaker 1>you can embed those results into whatever control

01:02:40.214 --> 01:02:41.335
<v Speaker 1>flow logic you want.

01:02:43.060 --> 01:02:45.300
<v Speaker 0>Okay. The the full picture now is starting

01:02:45.300 --> 01:02:47.460
<v Speaker 0>to cement in my mind. So I've got

01:02:47.540 --> 01:02:49.540
<v Speaker 1>Yeah. Yeah. I've got pixel. I can create

01:02:49.540 --> 01:02:51.859
<v Speaker 0>a data. I could build my visualizations,

01:02:51.859 --> 01:02:53.300
<v Speaker 0>and then we've got to go into Python

01:02:53.300 --> 01:02:54.845
<v Speaker 0>SDKs if I wanna be able to take

01:02:54.845 --> 01:02:56.525
<v Speaker 0>that tool into my own infrastructure,

01:02:56.525 --> 01:02:57.885
<v Speaker 0>where I can do alerts and a whole

01:02:57.885 --> 01:02:58.845
<v Speaker 0>bunch of other things.

01:02:59.484 --> 01:03:01.645
<v Speaker 0>Mez? Yeah. Here here's something quick we could

01:03:01.645 --> 01:03:04.365
<v Speaker 1>do actually. K. Let's just run that pixel

01:03:04.365 --> 01:03:06.285
<v Speaker 1>script with the CLI just so you can

01:03:06.285 --> 01:03:07.645
<v Speaker 1>show the interoperability.

01:03:07.885 --> 01:03:10.340
<v Speaker 0>Mhmm. If you just do p x run

01:03:10.980 --> 01:03:13.220
<v Speaker 1>and then dash f to save file

01:03:13.620 --> 01:03:16.100
<v Speaker 1>and then HTTP errors, it will just run

01:03:16.100 --> 01:03:18.100
<v Speaker 1>and produce the results in the CLI.

01:03:18.900 --> 01:03:21.300
<v Speaker 0>Oh, I changed directory, so I need to

01:03:21.380 --> 01:03:21.940
<v Speaker 1>Oh, okay.

01:03:23.954 --> 01:03:25.075
<v Speaker 0>Pixie one

01:03:25.635 --> 01:03:26.355
<v Speaker 0>cube.

01:03:31.635 --> 01:03:32.675
<v Speaker 0>Nice.

01:03:33.555 --> 01:03:35.555
<v Speaker 1>So that can be another way to iterate

01:03:35.555 --> 01:03:37.859
<v Speaker 1>on it. And we have a I would

01:03:37.859 --> 01:03:40.339
<v Speaker 1>compare another version of the or another command

01:03:40.339 --> 01:03:42.500
<v Speaker 1>in CLI that's like I would compare it

01:03:42.500 --> 01:03:44.579
<v Speaker 1>to, like, k nines where it's, like, more

01:03:44.579 --> 01:03:46.819
<v Speaker 1>interactive and you can, like, switch scripts and

01:03:46.819 --> 01:03:48.099
<v Speaker 1>drill down easily.

01:03:48.740 --> 01:03:50.500
<v Speaker 1>But just for the purpose of this, it

01:03:50.500 --> 01:03:52.525
<v Speaker 1>was just easy to do PX run.

01:03:53.085 --> 01:03:54.765
<v Speaker 1>And the one I'm referring to is PX

01:03:54.765 --> 01:03:55.405
<v Speaker 1>live.

01:04:00.845 --> 01:04:02.845
<v Speaker 1>So you wanna do control k,

01:04:04.525 --> 01:04:06.570
<v Speaker 1>and then just select a script. That's a

01:04:06.570 --> 01:04:07.210
<v Speaker 1>good one.

01:04:09.450 --> 01:04:11.530
<v Speaker 1>But any of them honestly. Yeah. That's good.

01:04:13.450 --> 01:04:14.570
<v Speaker 0>Oh, nice.

01:04:17.770 --> 01:04:19.850
<v Speaker 0>Alright. I'm running out of adjectives for being

01:04:19.850 --> 01:04:21.370
<v Speaker 0>impressed here. You're gonna have to slow down.

01:04:24.515 --> 01:04:26.515
<v Speaker 0>Yeah. I I I love that I can

01:04:26.515 --> 01:04:27.075
<v Speaker 0>work

01:04:27.315 --> 01:04:29.395
<v Speaker 0>in a pretty feature rich way from the

01:04:29.395 --> 01:04:31.795
<v Speaker 0>command line or the UI or even from

01:04:31.795 --> 01:04:32.835
<v Speaker 0>the SDKs

01:04:32.994 --> 01:04:35.075
<v Speaker 0>like, you know, as a as a developer

01:04:35.075 --> 01:04:37.599
<v Speaker 0>just having those availabilities to me and being

01:04:37.599 --> 01:04:39.359
<v Speaker 0>able to work and what works best for

01:04:39.359 --> 01:04:41.440
<v Speaker 0>me or my team, my organization.

01:04:41.520 --> 01:04:43.520
<v Speaker 0>Yeah. This is just pretty well rounded. I'm

01:04:43.520 --> 01:04:45.440
<v Speaker 0>really impressed with this. How is this just

01:04:45.440 --> 01:04:46.880
<v Speaker 0>a startup? I don't get it.

01:04:47.359 --> 01:04:49.040
<v Speaker 0>It feels more mature than that.

01:04:51.115 --> 01:04:52.715
<v Speaker 1>Well, I mean, you know, we're no longer

01:04:52.715 --> 01:04:54.155
<v Speaker 1>a startup. We're now a part of New

01:04:54.155 --> 01:04:55.355
<v Speaker 1>Relic which is great.

01:04:56.075 --> 01:04:57.835
<v Speaker 1>But yeah, when we were acquired we were

01:04:57.835 --> 01:04:59.915
<v Speaker 1>I think 10 or 12 people. So,

01:05:00.475 --> 01:05:02.555
<v Speaker 1>you know, we're just really passionate about making

01:05:02.555 --> 01:05:04.555
<v Speaker 1>this a great experience for developers like us

01:05:04.555 --> 01:05:06.670
<v Speaker 1>is what I would say. Yeah. Normally when

01:05:06.670 --> 01:05:09.230
<v Speaker 0>I have, you know, companies that are relatively

01:05:09.230 --> 01:05:10.910
<v Speaker 0>new, they're like, okay, it's like, don't click

01:05:10.910 --> 01:05:12.270
<v Speaker 0>on this and don't run this and don't

01:05:12.270 --> 01:05:14.590
<v Speaker 0>notice this and everything we've done here has

01:05:14.590 --> 01:05:16.510
<v Speaker 0>just worked right out of the box. So

01:05:16.510 --> 01:05:16.990
<v Speaker 0>very

01:05:17.390 --> 01:05:18.350
<v Speaker 0>nice. Okay.

01:05:20.865 --> 01:05:22.945
<v Speaker 0>I I'm I'm guessing I don't know. Have

01:05:22.945 --> 01:05:24.705
<v Speaker 0>we taken a look at most of the

01:05:24.705 --> 01:05:26.545
<v Speaker 0>functionality or is there anything else you would

01:05:26.545 --> 01:05:27.905
<v Speaker 0>like us to look at before we wrap

01:05:27.905 --> 01:05:28.785
<v Speaker 0>up for today?

01:05:29.265 --> 01:05:30.705
<v Speaker 1>You know, I could go on and on

01:05:30.705 --> 01:05:32.865
<v Speaker 1>but I think that, you know, for the

01:05:32.865 --> 01:05:33.985
<v Speaker 1>benefit of the audience,

01:05:34.780 --> 01:05:36.540
<v Speaker 1>we could we could call here and we

01:05:36.540 --> 01:05:39.020
<v Speaker 1>can just say that anyone who's interested in

01:05:39.020 --> 01:05:41.100
<v Speaker 1>learning more should check out our docs or

01:05:41.100 --> 01:05:42.380
<v Speaker 1>our GitHub repo.

01:05:43.180 --> 01:05:45.580
<v Speaker 1>You know, please file issues for problems that

01:05:45.580 --> 01:05:47.660
<v Speaker 1>you see, and we'd also love for people

01:05:47.660 --> 01:05:49.180
<v Speaker 1>to join our Slack community.

01:05:51.095 --> 01:05:53.175
<v Speaker 0>Awesome. Yeah. I will make sure there is

01:05:53.175 --> 01:05:55.095
<v Speaker 0>a a link to the Slack community and

01:05:55.095 --> 01:05:57.015
<v Speaker 0>the show notes. It's also available on the

01:05:57.015 --> 01:05:58.215
<v Speaker 0>Pixie website.

01:05:59.494 --> 01:06:01.815
<v Speaker 0>Yeah. You should all just definitely go check

01:06:01.815 --> 01:06:03.900
<v Speaker 0>it out. You've seen now in the last

01:06:03.900 --> 01:06:05.980
<v Speaker 0>hour how easy that was to get started

01:06:05.980 --> 01:06:07.900
<v Speaker 0>and the features just keep coming.

01:06:08.780 --> 01:06:10.619
<v Speaker 0>We got one question in the chat but

01:06:10.619 --> 01:06:12.300
<v Speaker 0>I think we already answered it but I'll

01:06:12.300 --> 01:06:13.740
<v Speaker 0>do it again just in case Bob didn't

01:06:13.740 --> 01:06:15.715
<v Speaker 0>miss the start But can the whole stack

01:06:15.715 --> 01:06:17.795
<v Speaker 0>be self hosted? And if not, is it

01:06:17.795 --> 01:06:18.835
<v Speaker 0>on the road map?

01:06:19.395 --> 01:06:21.235
<v Speaker 1>Yeah. Love to emphasize this.

01:06:21.635 --> 01:06:23.875
<v Speaker 1>Pixie is entirely open sourced.

01:06:23.955 --> 01:06:26.275
<v Speaker 1>So even though we went with the free

01:06:26.275 --> 01:06:29.155
<v Speaker 1>hosted option today, you can entirely self host

01:06:29.155 --> 01:06:30.500
<v Speaker 1>it and,

01:06:30.980 --> 01:06:32.740
<v Speaker 1>you know, the instructions for that are in

01:06:32.740 --> 01:06:34.099
<v Speaker 1>our docs or you can check out our

01:06:34.099 --> 01:06:35.780
<v Speaker 1>GitHub repo to learn more about how to

01:06:35.780 --> 01:06:36.340
<v Speaker 1>do that.

01:06:37.859 --> 01:06:38.420
<v Speaker 0>Awesome.

01:06:38.740 --> 01:06:40.900
<v Speaker 0>Alright. Thank you very much, Natalie. That was

01:06:40.900 --> 01:06:43.140
<v Speaker 0>a great tour of Pixie. There was a

01:06:43.140 --> 01:06:45.235
<v Speaker 0>lot to love there. Definitely gonna be kicking

01:06:45.235 --> 01:06:46.835
<v Speaker 0>the tires on this more with some real

01:06:46.835 --> 01:06:48.915
<v Speaker 0>clusters. I just wanted to thank you for

01:06:48.915 --> 01:06:50.595
<v Speaker 0>taking the time out of your day for

01:06:50.595 --> 01:06:52.115
<v Speaker 0>for guiding us through this and sharing your

01:06:52.115 --> 01:06:53.955
<v Speaker 0>knowledge with us. It was an absolute pleasure.

01:06:54.355 --> 01:06:56.529
<v Speaker 1>Yeah. It was really great, you know, diving

01:06:56.529 --> 01:06:58.130
<v Speaker 1>into it with you as well. It's always

01:06:58.130 --> 01:07:00.049
<v Speaker 1>fun to see it from a new perspective,

01:07:00.049 --> 01:07:01.490
<v Speaker 1>like from someone who hasn't looked at it

01:07:01.490 --> 01:07:03.170
<v Speaker 1>before because I look at it all day.

01:07:03.170 --> 01:07:03.570
<v Speaker 1>So

01:07:04.930 --> 01:07:06.930
<v Speaker 0>Alright. Well, thank you again. Have a wonderful

01:07:06.930 --> 01:07:08.210
<v Speaker 0>day and I'll speak to you again soon.

01:07:08.694 --> 01:07:10.855
<v Speaker 1>Yeah. Thank you so much. Alright. Thanks. Bye.
