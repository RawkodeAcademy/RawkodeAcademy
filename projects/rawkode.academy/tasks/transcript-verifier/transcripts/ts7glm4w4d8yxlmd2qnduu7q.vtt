WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 90c6feb7-b601-4461-acb2-925ac8888690
Created: 2025-04-29T14:35:35.940Z
Duration: 966.37463
Channels: 1

00:00:05.040 --> 00:00:08.240
<v Speaker 0>Hello, and welcome back to Rawkode Academy.

00:00:08.960 --> 00:00:12.240
<v Speaker 0>Today, we're continuing the complete guide to Kubescape.

00:00:13.214 --> 00:00:15.295
<v Speaker 0>Kubescape is a tool that allows you to

00:00:15.295 --> 00:00:18.735
<v Speaker 0>scan your Kubernetes manifest and clusters to detect

00:00:18.735 --> 00:00:19.775
<v Speaker 0>misconfiguration

00:00:19.775 --> 00:00:21.454
<v Speaker 0>and security violations

00:00:21.935 --> 00:00:22.734
<v Speaker 0>using

00:00:22.895 --> 00:00:25.055
<v Speaker 0>all the popular is that the right word?

00:00:25.590 --> 00:00:26.390
<v Speaker 0>Popular

00:00:26.470 --> 00:00:29.670
<v Speaker 0>security posture frameworks like MITRE,

00:00:29.830 --> 00:00:30.550
<v Speaker 0>SIS,

00:00:31.030 --> 00:00:31.910
<v Speaker 0>NSA,

00:00:32.310 --> 00:00:34.070
<v Speaker 0>ARMOR BEST, etcetera.

00:00:35.270 --> 00:00:37.030
<v Speaker 0>Today, we're gonna take a look at building

00:00:37.030 --> 00:00:38.230
<v Speaker 0>our own framework.

00:00:38.755 --> 00:00:40.195
<v Speaker 0>You can do this on easy mode with

00:00:40.195 --> 00:00:42.835
<v Speaker 0>ARMOR cloud, and we'll walk through exactly that.

00:00:42.835 --> 00:00:44.995
<v Speaker 0>However, I wanna dive in to what it

00:00:44.995 --> 00:00:47.395
<v Speaker 0>takes to build your own framework

00:00:47.555 --> 00:00:50.355
<v Speaker 0>on your own machine with your own JSON

00:00:51.490 --> 00:00:53.970
<v Speaker 0>and no cloud. But let's take a look.

00:00:54.210 --> 00:00:56.290
<v Speaker 0>Alright. Let's take a look at easy mode

00:00:56.290 --> 00:00:57.010
<v Speaker 0>first.

00:01:00.770 --> 00:01:02.050
<v Speaker 0>So this is ARMOR cloud,

00:01:04.045 --> 00:01:05.885
<v Speaker 0>which you'll have seen from the first two

00:01:05.885 --> 00:01:07.405
<v Speaker 0>videos in this course.

00:01:08.284 --> 00:01:10.445
<v Speaker 0>We're gonna click on my face and go

00:01:10.445 --> 00:01:11.325
<v Speaker 0>to settings.

00:01:12.925 --> 00:01:14.604
<v Speaker 0>From here, you'll see that I have three

00:01:14.604 --> 00:01:15.405
<v Speaker 0>inactive

00:01:15.405 --> 00:01:16.365
<v Speaker 0>clusters.

00:01:16.604 --> 00:01:18.284
<v Speaker 0>We're just gonna ignore that for today.

00:01:19.950 --> 00:01:22.110
<v Speaker 0>On the left, we have posture,

00:01:22.430 --> 00:01:23.710
<v Speaker 0>which has frameworks

00:01:25.710 --> 00:01:26.830
<v Speaker 0>and controls.

00:01:29.790 --> 00:01:31.390
<v Speaker 0>So let's click on frameworks.

00:01:34.015 --> 00:01:36.174
<v Speaker 0>Here, you'll see that we have all controls,

00:01:36.174 --> 00:01:40.015
<v Speaker 0>ARMOR best, DevOps best, MITRE, NSA and SIS.

00:01:40.414 --> 00:01:42.655
<v Speaker 0>We are gonna use the new framework button

00:01:42.655 --> 00:01:45.055
<v Speaker 0>to create our new framework.

00:01:45.615 --> 00:01:47.295
<v Speaker 0>See, I told you this was easy.

00:01:49.670 --> 00:01:52.230
<v Speaker 0>So let's name this Rawkode cloud.

00:01:52.710 --> 00:01:54.790
<v Speaker 0>I'm calling it Rawkode cloud because this is

00:01:54.790 --> 00:01:57.270
<v Speaker 0>the framework we are creating using the cloud.

00:01:58.230 --> 00:01:59.670
<v Speaker 0>And I don't want it to clash with

00:01:59.670 --> 00:02:01.750
<v Speaker 0>what we do on the command line shortly.

00:02:02.745 --> 00:02:05.305
<v Speaker 0>You can give it any description you want.

00:02:08.425 --> 00:02:09.625
<v Speaker 0>Funny. Right?

00:02:10.505 --> 00:02:13.305
<v Speaker 0>Next, you can select the controls

00:02:13.785 --> 00:02:15.705
<v Speaker 0>that you want to check for.

00:02:18.340 --> 00:02:19.940
<v Speaker 0>So let's search for host.

00:02:20.180 --> 00:02:21.540
<v Speaker 0>We want to ensure

00:02:21.620 --> 00:02:24.340
<v Speaker 0>that there is no host page access,

00:02:24.659 --> 00:02:26.180
<v Speaker 0>container host ports,

00:02:26.340 --> 00:02:28.020
<v Speaker 0>or host path mounts.

00:02:29.459 --> 00:02:30.579
<v Speaker 0>We click apply,

00:02:31.695 --> 00:02:33.135
<v Speaker 0>And if we scroll down,

00:02:33.455 --> 00:02:34.895
<v Speaker 0>we have Rawkode Cloud,

00:02:35.055 --> 00:02:38.175
<v Speaker 0>any description you want with three controls.

00:02:39.135 --> 00:02:41.855
<v Speaker 0>Now we can edit this whenever we want

00:02:42.175 --> 00:02:44.895
<v Speaker 0>and bring in new controls whenever we want.

00:02:46.280 --> 00:02:48.360
<v Speaker 0>Now why do I think this is important?

00:02:49.320 --> 00:02:50.600
<v Speaker 0>Well, I've worked

00:02:50.760 --> 00:02:53.160
<v Speaker 0>with a lot of I've worked with a

00:02:53.160 --> 00:02:55.240
<v Speaker 0>lot of teams that want to improve their

00:02:55.240 --> 00:02:56.520
<v Speaker 0>security posture,

00:02:57.080 --> 00:02:59.800
<v Speaker 0>but they can find the default policies overwhelming.

00:03:00.694 --> 00:03:02.855
<v Speaker 0>It can be quite intimidating when you see

00:03:02.855 --> 00:03:05.254
<v Speaker 0>that you have so many violations

00:03:05.254 --> 00:03:08.855
<v Speaker 0>across so many Kubernetes manifests across so many

00:03:08.855 --> 00:03:10.375
<v Speaker 0>Kubernetes clusters.

00:03:11.575 --> 00:03:13.735
<v Speaker 0>And what they want is just the easy

00:03:13.735 --> 00:03:16.490
<v Speaker 0>mode. Well, how do I just check for

00:03:16.490 --> 00:03:18.330
<v Speaker 0>like the really bad stuff?

00:03:18.730 --> 00:03:20.650
<v Speaker 0>Because you know, there may only be a

00:03:20.650 --> 00:03:22.650
<v Speaker 0>few rules that you wanna start out with,

00:03:23.050 --> 00:03:24.330
<v Speaker 0>but when you build

00:03:24.490 --> 00:03:25.610
<v Speaker 0>that habit,

00:03:26.810 --> 00:03:28.090
<v Speaker 0>you show people progress.

00:03:30.035 --> 00:03:32.515
<v Speaker 0>This kind of change becomes a lot easier,

00:03:32.835 --> 00:03:34.995
<v Speaker 0>especially when you're working with developers

00:03:35.315 --> 00:03:37.315
<v Speaker 0>who just may not be accustomed to this

00:03:37.315 --> 00:03:39.635
<v Speaker 0>terminology and smishy smashy language.

00:03:40.675 --> 00:03:43.370
<v Speaker 0>Now now that we've created our new framework

00:03:43.370 --> 00:03:46.730
<v Speaker 0>on ARML cloud, we can pull that down

00:03:46.730 --> 00:03:48.330
<v Speaker 0>to our local CLI.

00:03:49.049 --> 00:03:50.490
<v Speaker 0>Alright. Let's get started.

00:03:51.610 --> 00:03:52.970
<v Speaker 0>The first thing you need to do to

00:03:52.970 --> 00:03:54.569
<v Speaker 0>make your life a little bit easier on

00:03:54.569 --> 00:03:56.650
<v Speaker 0>the CLI is to export

00:03:56.565 --> 00:03:57.444
<v Speaker 0>KS

00:03:57.444 --> 00:03:58.245
<v Speaker 0>account

00:03:59.125 --> 00:04:01.525
<v Speaker 0>and set this to your account ID. If

00:04:01.525 --> 00:04:03.045
<v Speaker 0>you're not sure where to find that,

00:04:03.364 --> 00:04:04.565
<v Speaker 0>go to the cloud,

00:04:04.805 --> 00:04:05.925
<v Speaker 0>click your name,

00:04:06.325 --> 00:04:07.445
<v Speaker 0>and click copy.

00:04:10.165 --> 00:04:10.724
<v Speaker 0>Like so.

00:04:12.569 --> 00:04:13.210
<v Speaker 0>Now,

00:04:13.930 --> 00:04:15.050
<v Speaker 0>you can list

00:04:15.530 --> 00:04:16.649
<v Speaker 0>your frameworks.

00:04:19.850 --> 00:04:21.370
<v Speaker 0>And you'll see at the bottom, we have

00:04:21.370 --> 00:04:22.250
<v Speaker 0>Rawkode Cloud.

00:04:24.305 --> 00:04:26.625
<v Speaker 0>If you want to, you can cache these

00:04:26.625 --> 00:04:27.585
<v Speaker 0>offline

00:04:27.985 --> 00:04:29.185
<v Speaker 0>with download

00:04:29.345 --> 00:04:30.705
<v Speaker 0>artifacts.

00:04:33.665 --> 00:04:36.385
<v Speaker 0>And you'll see it's downloaded our Rawkode Cloud

00:04:36.865 --> 00:04:38.385
<v Speaker 0>and to the current directory.

00:04:38.819 --> 00:04:39.380
<v Speaker 0>So

00:04:39.860 --> 00:04:41.060
<v Speaker 0>if we take a look at the current

00:04:41.060 --> 00:04:43.620
<v Speaker 0>directory, we'll see all of the frameworks,

00:04:44.099 --> 00:04:46.180
<v Speaker 0>plus I have a deployment YAML,

00:04:46.500 --> 00:04:48.500
<v Speaker 0>some queue, and my own JSON.

00:04:48.900 --> 00:04:50.340
<v Speaker 0>We'll get to that in just a minute.

00:04:51.985 --> 00:04:53.665
<v Speaker 0>Let's run Kubescape

00:04:53.665 --> 00:04:54.545
<v Speaker 0>scan

00:04:55.345 --> 00:04:56.465
<v Speaker 0>Rawkode

00:04:56.465 --> 00:04:57.345
<v Speaker 0>cloud

00:04:58.305 --> 00:04:59.105
<v Speaker 0>dot.

00:04:59.825 --> 00:05:01.585
<v Speaker 0>I'm saying that I want to scan that

00:05:01.585 --> 00:05:04.145
<v Speaker 0>deployment dot YAML in this current directory

00:05:04.225 --> 00:05:06.790
<v Speaker 0>against my Rawkode cloud framework.

00:05:13.030 --> 00:05:15.350
<v Speaker 0>Now we can see the violations.

00:05:15.350 --> 00:05:17.670
<v Speaker 0>Now this is a very standard NGINX deployment

00:05:17.670 --> 00:05:20.115
<v Speaker 0>dot YAML. We don't have resource memory limit

00:05:20.115 --> 00:05:21.235
<v Speaker 0>requests, etcetera.

00:05:22.514 --> 00:05:24.675
<v Speaker 0>I'm not doing the good security stuff to

00:05:24.675 --> 00:05:26.755
<v Speaker 0>block privilege escalation

00:05:27.315 --> 00:05:29.235
<v Speaker 0>and I'm pulling it from a random Docker.

00:05:29.235 --> 00:05:31.075
<v Speaker 0>Well, I'm pulling it from the Docker Hub

00:05:31.075 --> 00:05:33.730
<v Speaker 0>registry. I don't have really any labels blah

00:05:33.730 --> 00:05:36.050
<v Speaker 0>blah blah blah blah. Thank you, Kubescape.

00:05:38.210 --> 00:05:38.850
<v Speaker 0>So

00:05:39.330 --> 00:05:40.610
<v Speaker 0>that's kinda cool.

00:05:40.770 --> 00:05:42.930
<v Speaker 0>And I would encourage you and I can't

00:05:42.930 --> 00:05:45.490
<v Speaker 0>stress this enough. I encourage you to use

00:05:45.490 --> 00:05:46.610
<v Speaker 0>ARMOR cloud,

00:05:46.850 --> 00:05:49.975
<v Speaker 0>build your frameworks from there, expand on them,

00:05:49.975 --> 00:05:51.975
<v Speaker 0>bake them into your CI process. We've already

00:05:51.975 --> 00:05:54.855
<v Speaker 0>done a video on CICD with Kubescape. So

00:05:54.855 --> 00:05:57.015
<v Speaker 0>go watch that next if you haven't already.

00:05:58.455 --> 00:05:59.095
<v Speaker 0>But

00:06:00.375 --> 00:06:01.575
<v Speaker 0>but

00:06:03.020 --> 00:06:04.220
<v Speaker 0>what if you want to do it the

00:06:04.220 --> 00:06:05.020
<v Speaker 0>hard way?

00:06:06.380 --> 00:06:08.220
<v Speaker 0>What if you want to build your own

00:06:08.220 --> 00:06:09.660
<v Speaker 0>framework locally

00:06:11.180 --> 00:06:12.780
<v Speaker 0>using your own tooling

00:06:13.020 --> 00:06:14.700
<v Speaker 0>without interacting with Rawkode?

00:06:19.065 --> 00:06:19.945
<v Speaker 0>Unfortunately,

00:06:20.985 --> 00:06:23.465
<v Speaker 0>this is all very undocumented and it took

00:06:23.465 --> 00:06:26.345
<v Speaker 0>a lot of reverse engineering and by reverse

00:06:26.345 --> 00:06:29.305
<v Speaker 0>engineering, I mean, just scrolling through GitHub code

00:06:29.625 --> 00:06:31.225
<v Speaker 0>to work out how this all works.

00:06:32.020 --> 00:06:34.180
<v Speaker 0>Let's build our own framework on the command

00:06:34.180 --> 00:06:34.820
<v Speaker 0>line.

00:06:35.860 --> 00:06:37.060
<v Speaker 0>Now why

00:06:37.380 --> 00:06:38.660
<v Speaker 0>am I gonna show you how to do

00:06:38.660 --> 00:06:39.140
<v Speaker 0>this

00:06:39.700 --> 00:06:42.420
<v Speaker 0>when building a framework is so easy on

00:06:42.420 --> 00:06:43.220
<v Speaker 0>ARMOR cloud?

00:06:44.635 --> 00:06:47.275
<v Speaker 0>Well, because I also wanted to explore and

00:06:47.275 --> 00:06:48.155
<v Speaker 0>experiment

00:06:48.395 --> 00:06:50.235
<v Speaker 0>with building my own controls.

00:06:52.955 --> 00:06:56.155
<v Speaker 0>ARMOR cloud is great for taking existing controls,

00:06:56.155 --> 00:06:59.400
<v Speaker 0>packaging them up, and iterating or expanding on

00:06:59.400 --> 00:07:01.639
<v Speaker 0>them to secure your security posture.

00:07:02.039 --> 00:07:03.319
<v Speaker 0>But if you want to write your own

00:07:03.319 --> 00:07:05.160
<v Speaker 0>controls, it really means

00:07:05.800 --> 00:07:07.639
<v Speaker 0>speaking to someone at ARMOR

00:07:07.800 --> 00:07:09.240
<v Speaker 0>or filing a pull request.

00:07:11.415 --> 00:07:12.055
<v Speaker 0>So

00:07:12.455 --> 00:07:14.215
<v Speaker 0>what if we just wanna iterate and hack

00:07:14.215 --> 00:07:15.175
<v Speaker 0>on locally?

00:07:16.295 --> 00:07:18.775
<v Speaker 0>So let's take a look at the ARMOR

00:07:18.775 --> 00:07:21.655
<v Speaker 0>best JSON that we got during the Kubescape

00:07:21.655 --> 00:07:23.095
<v Speaker 0>download artifacts.

00:07:26.010 --> 00:07:27.290
<v Speaker 0>And what we can see

00:07:27.610 --> 00:07:29.770
<v Speaker 0>is that a framework

00:07:30.169 --> 00:07:32.330
<v Speaker 0>is a JSON object. Now you probably already

00:07:32.330 --> 00:07:33.850
<v Speaker 0>knew that because you've seen the downloads when

00:07:33.850 --> 00:07:35.530
<v Speaker 0>I ran cubescape download. Yeah, nah, nah,

00:07:37.215 --> 00:07:40.335
<v Speaker 0>But it has an array object with controls.

00:07:41.455 --> 00:07:43.135
<v Speaker 0>Each of these controls

00:07:43.215 --> 00:07:45.935
<v Speaker 0>has some attributes which we can ignore for

00:07:45.935 --> 00:07:47.775
<v Speaker 0>now and some rules.

00:07:50.030 --> 00:07:51.390
<v Speaker 0>Then these rules

00:07:51.710 --> 00:07:54.750
<v Speaker 0>match against resources within our cluster

00:07:56.350 --> 00:07:58.270
<v Speaker 0>and then some other mumbo jumbo.

00:07:59.790 --> 00:08:01.150
<v Speaker 0>Let's take a look

00:08:01.755 --> 00:08:03.115
<v Speaker 0>at all controls.

00:08:05.275 --> 00:08:07.675
<v Speaker 0>Here we have forbidden container registries.

00:08:11.115 --> 00:08:13.995
<v Speaker 0>It too has some rules where it wants

00:08:13.995 --> 00:08:15.035
<v Speaker 0>to block

00:08:15.195 --> 00:08:17.035
<v Speaker 0>certain image registries.

00:08:18.860 --> 00:08:21.420
<v Speaker 0>Now you can see here that the language

00:08:21.500 --> 00:08:22.780
<v Speaker 0>for this rule

00:08:22.940 --> 00:08:24.060
<v Speaker 0>is Regal.

00:08:24.460 --> 00:08:26.780
<v Speaker 0>If you're not familiar with Regal, it's the

00:08:26.780 --> 00:08:29.500
<v Speaker 0>policy language from the Open Policy Agent project.

00:08:30.765 --> 00:08:33.005
<v Speaker 0>Now if you're thinking the existence

00:08:33.005 --> 00:08:35.005
<v Speaker 0>of this flag means, hey, cool. I thought

00:08:35.005 --> 00:08:36.445
<v Speaker 0>you thought that Ragel, maybe I can write

00:08:36.445 --> 00:08:38.125
<v Speaker 0>my policy in another language.

00:08:38.605 --> 00:08:39.565
<v Speaker 0>Unfortunately,

00:08:40.044 --> 00:08:42.205
<v Speaker 0>this is the code that runs your policy.

00:08:42.205 --> 00:08:44.445
<v Speaker 0>Ragel and Ragel two are the only supported

00:08:44.445 --> 00:08:45.565
<v Speaker 0>languages at the moment.

00:08:46.300 --> 00:08:48.140
<v Speaker 0>But maybe this will change in the future.

00:08:48.140 --> 00:08:50.060
<v Speaker 0>I think it would be kinda interesting to

00:08:50.060 --> 00:08:52.940
<v Speaker 0>see STARLARG or common expression language as an

00:08:52.940 --> 00:08:54.700
<v Speaker 0>option for right of policies.

00:08:56.620 --> 00:08:58.380
<v Speaker 0>Again, we match on the resources that we

00:08:58.380 --> 00:08:59.260
<v Speaker 0>want to apply this to.

00:09:00.464 --> 00:09:02.385
<v Speaker 0>And the last thing that we haven't really

00:09:02.385 --> 00:09:03.024
<v Speaker 0>covered

00:09:03.265 --> 00:09:05.105
<v Speaker 0>is that we have to rule itself.

00:09:06.385 --> 00:09:08.385
<v Speaker 0>Now this is just because the shift is

00:09:08.385 --> 00:09:11.745
<v Speaker 0>JSON. We have a complex string stored as

00:09:11.745 --> 00:09:13.745
<v Speaker 0>a string value. It has new lines as

00:09:13.745 --> 00:09:15.825
<v Speaker 0>tab characters, it has comments, it's got code.

00:09:16.440 --> 00:09:18.840
<v Speaker 0>This is not a pleasant experience to modify

00:09:18.840 --> 00:09:21.240
<v Speaker 0>your own custom framework and controls locally, but

00:09:21.240 --> 00:09:23.400
<v Speaker 0>again, again, it's not made to work like

00:09:23.400 --> 00:09:24.120
<v Speaker 0>that yet.

00:09:25.320 --> 00:09:27.400
<v Speaker 0>This is just me hacking around on stuff

00:09:27.400 --> 00:09:28.680
<v Speaker 0>that I shouldn't be hacking around on.

00:09:29.565 --> 00:09:32.045
<v Speaker 0>And I thought, well, what if we wrote

00:09:32.045 --> 00:09:33.005
<v Speaker 0>it in queue?

00:09:33.485 --> 00:09:36.605
<v Speaker 0>We could export the queue to JSON

00:09:37.005 --> 00:09:39.245
<v Speaker 0>and use the custom framework that way.

00:09:39.965 --> 00:09:41.805
<v Speaker 0>And that's the path that I went down.

00:09:43.490 --> 00:09:44.930
<v Speaker 0>Let's pop up in the queue.

00:09:47.410 --> 00:09:49.010
<v Speaker 0>I'm a big fan of queue.

00:09:49.170 --> 00:09:51.090
<v Speaker 0>It allows us to do cool things

00:09:51.650 --> 00:09:54.610
<v Speaker 0>that we can't do with JSON, YAML, and

00:09:54.850 --> 00:09:56.770
<v Speaker 0>other formats that we've been stuck with for

00:09:56.770 --> 00:09:57.410
<v Speaker 0>many years now.

00:09:58.505 --> 00:10:00.265
<v Speaker 0>So I encourage you all to go and

00:10:00.265 --> 00:10:02.105
<v Speaker 0>find Q tutorials online

00:10:02.585 --> 00:10:05.385
<v Speaker 0>and improve your data configuration lives.

00:10:06.425 --> 00:10:09.145
<v Speaker 0>First thing I do is I'm setting a

00:10:09.145 --> 00:10:10.265
<v Speaker 0>private variable.

00:10:11.279 --> 00:10:12.560
<v Speaker 0>Now I'm not going to go into queue

00:10:12.560 --> 00:10:14.000
<v Speaker 0>in a lot of detail, but understand that

00:10:14.000 --> 00:10:16.400
<v Speaker 0>a private variable is anything with an underscore.

00:10:16.800 --> 00:10:18.880
<v Speaker 0>When I run queue export,

00:10:18.880 --> 00:10:20.480
<v Speaker 0>that will be wiped off the face of

00:10:20.480 --> 00:10:21.280
<v Speaker 0>the planet.

00:10:21.680 --> 00:10:23.440
<v Speaker 0>We're using it to avoid a little bit

00:10:23.440 --> 00:10:26.075
<v Speaker 0>of duplication further down in the queue. Now

00:10:26.075 --> 00:10:28.635
<v Speaker 0>my usage of it here is relatively contrived,

00:10:28.635 --> 00:10:29.835
<v Speaker 0>but I wanted to show you one of

00:10:29.835 --> 00:10:32.235
<v Speaker 0>the small little perks of using queue for

00:10:32.235 --> 00:10:33.515
<v Speaker 0>this kind of tool chain.

00:10:35.115 --> 00:10:36.155
<v Speaker 0>We name

00:10:39.860 --> 00:10:41.459
<v Speaker 0>we name our framework,

00:10:43.380 --> 00:10:45.779
<v Speaker 0>and then we start to add controls.

00:10:46.180 --> 00:10:49.459
<v Speaker 0>I've called this control, you know, Rawkode Academy

00:10:49.459 --> 00:10:50.260
<v Speaker 0>images.

00:10:50.660 --> 00:10:51.459
<v Speaker 0>Description?

00:10:51.779 --> 00:10:52.100
<v Speaker 0>Well,

00:10:53.225 --> 00:10:56.024
<v Speaker 0>Rawkode Academy is risky. We don't trust them.

00:10:56.024 --> 00:10:58.745
<v Speaker 0>Remediation path? Don't use their images.

00:10:59.705 --> 00:11:02.505
<v Speaker 0>Once you have a control, a control has

00:11:02.505 --> 00:11:03.225
<v Speaker 0>rules.

00:11:04.265 --> 00:11:06.105
<v Speaker 0>Here we have our first rule called no

00:11:06.105 --> 00:11:06.904
<v Speaker 0>RKA

00:11:07.144 --> 00:11:07.625
<v Speaker 0>images,

00:11:08.959 --> 00:11:10.880
<v Speaker 0>and then we have a rule.

00:11:11.440 --> 00:11:13.839
<v Speaker 0>So already with q we have access to

00:11:13.839 --> 00:11:15.360
<v Speaker 0>multiline strings.

00:11:15.759 --> 00:11:17.839
<v Speaker 0>That means that we actually get a relatively

00:11:17.839 --> 00:11:20.160
<v Speaker 0>pleasant experience for editing

00:11:20.415 --> 00:11:21.775
<v Speaker 0>the Regal code.

00:11:24.495 --> 00:11:26.654
<v Speaker 0>It's worth pointing out that the q team

00:11:26.654 --> 00:11:29.535
<v Speaker 0>are working on embed like syntax similar to

00:11:29.535 --> 00:11:31.375
<v Speaker 0>what you get with Go embed.

00:11:31.935 --> 00:11:34.255
<v Speaker 0>Meaning, in the future, we'll actually be able

00:11:34.255 --> 00:11:37.350
<v Speaker 0>to do policy dot rego and load it

00:11:37.350 --> 00:11:38.550
<v Speaker 0>from its own file.

00:11:38.870 --> 00:11:40.630
<v Speaker 0>That's really cool because it means that we'll

00:11:40.630 --> 00:11:42.550
<v Speaker 0>get rego based syntaxing because it's in a

00:11:42.550 --> 00:11:43.510
<v Speaker 0>rego file.

00:11:43.990 --> 00:11:45.910
<v Speaker 0>So cool thing to look forward to in

00:11:45.910 --> 00:11:46.550
<v Speaker 0>the future.

00:11:47.190 --> 00:11:49.110
<v Speaker 0>Now if you're gonna go down the path

00:11:49.495 --> 00:11:52.295
<v Speaker 0>of writing your own controls this way,

00:11:53.095 --> 00:11:55.015
<v Speaker 0>there's a caveat. Remember,

00:11:55.255 --> 00:11:57.415
<v Speaker 0>it's not built to do this quite yet.

00:11:57.975 --> 00:12:00.055
<v Speaker 0>So you have to name your package ARMOR

00:12:00.055 --> 00:12:02.695
<v Speaker 0>built ins. This is just a caveat right

00:12:02.695 --> 00:12:02.935
<v Speaker 0>now.

00:12:03.570 --> 00:12:05.970
<v Speaker 0>I'll include an issue in the description if

00:12:05.970 --> 00:12:08.050
<v Speaker 0>you wanna track and see when that changes.

00:12:09.890 --> 00:12:11.890
<v Speaker 0>Other than that, you're right in straight up

00:12:11.890 --> 00:12:12.610
<v Speaker 0>Regal.

00:12:12.770 --> 00:12:14.610
<v Speaker 0>That means you can actually use the Regal

00:12:14.610 --> 00:12:17.330
<v Speaker 0>playground to test your policies or

00:12:17.675 --> 00:12:20.714
<v Speaker 0>even open Regal Toolchain locally.

00:12:20.954 --> 00:12:22.074
<v Speaker 0>It's up to you.

00:12:23.595 --> 00:12:26.154
<v Speaker 0>Here, we define untrusted image,

00:12:27.194 --> 00:12:29.915
<v Speaker 0>which pulls out the pod from our list

00:12:29.915 --> 00:12:30.634
<v Speaker 0>of resources.

00:12:32.690 --> 00:12:34.290
<v Speaker 0>We pull out the kind and make an

00:12:34.290 --> 00:12:36.610
<v Speaker 0>assertion that this is only gonna apply where

00:12:36.610 --> 00:12:38.130
<v Speaker 0>the kind equals a pod.

00:12:39.569 --> 00:12:41.170
<v Speaker 0>Next, we iterate

00:12:41.329 --> 00:12:43.010
<v Speaker 0>over all the containers.

00:12:43.329 --> 00:12:45.569
<v Speaker 0>Now iterators and Rego are a little bit

00:12:45.569 --> 00:12:46.915
<v Speaker 0>weird and you have to get used to

00:12:46.915 --> 00:12:49.235
<v Speaker 0>them. Just know that when we reference something

00:12:49.235 --> 00:12:51.075
<v Speaker 0>with a variable like I here,

00:12:51.475 --> 00:12:53.875
<v Speaker 0>we're gonna loop over that list.

00:12:55.395 --> 00:12:58.675
<v Speaker 0>All subsequent assertions will be against each item

00:12:58.675 --> 00:12:59.555
<v Speaker 0>and that list.

00:13:02.240 --> 00:13:02.880
<v Speaker 0>Next,

00:13:03.520 --> 00:13:05.360
<v Speaker 0>we pull out the path to help us

00:13:05.360 --> 00:13:08.399
<v Speaker 0>provide good debug and error messages for failing

00:13:08.399 --> 00:13:09.200
<v Speaker 0>policies.

00:13:09.760 --> 00:13:11.120
<v Speaker 0>We grab the image

00:13:11.520 --> 00:13:13.760
<v Speaker 0>and we call the RKA repo check function

00:13:13.760 --> 00:13:14.959
<v Speaker 0>against that image.

00:13:15.584 --> 00:13:18.144
<v Speaker 0>This function is extremely trivial.

00:13:19.185 --> 00:13:21.425
<v Speaker 0>We call the start of function to check

00:13:21.425 --> 00:13:25.504
<v Speaker 0>if our image starts with ghcr.i0/RawkodeAcademy.

00:13:27.990 --> 00:13:29.270
<v Speaker 0>If we get a failure,

00:13:30.630 --> 00:13:32.230
<v Speaker 0>we provide a message

00:13:32.630 --> 00:13:35.190
<v Speaker 0>that tells the user what went wrong,

00:13:36.390 --> 00:13:37.510
<v Speaker 0>and that's it.

00:13:38.870 --> 00:13:40.550
<v Speaker 0>We set the rule language to Rigo,

00:13:41.425 --> 00:13:43.825
<v Speaker 0>We tell it which resources to match against,

00:13:44.225 --> 00:13:47.265
<v Speaker 0>and we provide some description and remediation instructions

00:13:47.265 --> 00:13:49.185
<v Speaker 0>for this particular rule.

00:13:50.225 --> 00:13:51.825
<v Speaker 0>We have to provide a list of control

00:13:51.825 --> 00:13:52.865
<v Speaker 0>IDs at the bottom.

00:13:53.680 --> 00:13:56.080
<v Speaker 0>Hence, I'm using my private variable to loop

00:13:56.080 --> 00:13:56.800
<v Speaker 0>that in.

00:13:58.560 --> 00:13:59.440
<v Speaker 0>That's it.

00:14:00.160 --> 00:14:02.000
<v Speaker 0>So how do we run this locally?

00:14:02.560 --> 00:14:04.000
<v Speaker 0>Well, the first thing you're gonna want to

00:14:04.000 --> 00:14:06.080
<v Speaker 0>do is the q export

00:14:06.400 --> 00:14:07.600
<v Speaker 0>of Rawkode.q.

00:14:08.985 --> 00:14:11.464
<v Speaker 0>This now gives us a JSON object that

00:14:11.464 --> 00:14:12.985
<v Speaker 0>we can store locally and

00:14:13.545 --> 00:14:14.904
<v Speaker 0>I'm going to store this

00:14:15.464 --> 00:14:17.865
<v Speaker 0>in Rawkode dot JSON. We're now in a

00:14:17.865 --> 00:14:18.505
<v Speaker 0>position

00:14:20.105 --> 00:14:22.185
<v Speaker 0>where we can see Kubescape scan

00:14:22.550 --> 00:14:24.870
<v Speaker 0>use from, which means that we want to

00:14:24.870 --> 00:14:27.509
<v Speaker 0>use a local policy or framework,

00:14:28.069 --> 00:14:30.709
<v Speaker 0>and then specify in Rawkode dot JSON.

00:14:31.829 --> 00:14:33.990
<v Speaker 0>I'm then going to run that against my

00:14:33.990 --> 00:14:34.949
<v Speaker 0>deployment YAML,

00:14:35.714 --> 00:14:37.315
<v Speaker 0>and I'm just telling us to spell out

00:14:37.315 --> 00:14:39.475
<v Speaker 0>the results as JSON and a control format

00:14:39.475 --> 00:14:41.395
<v Speaker 0>rather than a resource format.

00:14:44.675 --> 00:14:46.595
<v Speaker 0>You now have our report dot JSON because

00:14:46.595 --> 00:14:47.315
<v Speaker 0>of our flags,

00:14:47.990 --> 00:14:50.470
<v Speaker 0>and we can see our high severity, no

00:14:50.470 --> 00:14:53.910
<v Speaker 0>Rawkode Academy images has failed on one resource

00:14:54.149 --> 00:14:56.389
<v Speaker 0>for the Rawkode framework.

00:14:56.790 --> 00:14:57.589
<v Speaker 0>Neat.

00:14:59.750 --> 00:15:01.350
<v Speaker 0>So as we can see, if we want

00:15:01.350 --> 00:15:02.949
<v Speaker 0>to remove this violation,

00:15:03.955 --> 00:15:06.435
<v Speaker 0>we can update our deployment dot YAML,

00:15:07.155 --> 00:15:09.715
<v Speaker 0>and we're gonna use a slightly more trusted

00:15:10.435 --> 00:15:11.875
<v Speaker 0>NGINX image.

00:15:12.995 --> 00:15:14.675
<v Speaker 0>Now we don't need all of these flags,

00:15:14.675 --> 00:15:16.835
<v Speaker 0>we just need use from and a scan

00:15:16.835 --> 00:15:18.195
<v Speaker 0>target like so.

00:15:19.380 --> 00:15:22.020
<v Speaker 0>And now we have no failed resource.

00:15:22.420 --> 00:15:24.820
<v Speaker 0>So this could be a really interesting way

00:15:25.139 --> 00:15:27.140
<v Speaker 0>to build up your own framework

00:15:27.300 --> 00:15:29.060
<v Speaker 0>with your own controls.

00:15:29.700 --> 00:15:31.940
<v Speaker 0>You can write your own Rego and ship

00:15:31.940 --> 00:15:32.740
<v Speaker 0>them via git.

00:15:34.045 --> 00:15:36.285
<v Speaker 0>You can hook this into your CI process

00:15:36.845 --> 00:15:39.165
<v Speaker 0>and improve your security posture

00:15:39.325 --> 00:15:40.845
<v Speaker 0>step by step,

00:15:41.245 --> 00:15:42.685
<v Speaker 0>control by control.

00:15:43.485 --> 00:15:45.805
<v Speaker 0>Now I do strongly encourage you just to

00:15:45.805 --> 00:15:48.030
<v Speaker 0>use ARMOR cloud, but if you need to

00:15:48.030 --> 00:15:50.030
<v Speaker 0>go down the custom controls path and custom

00:15:50.030 --> 00:15:50.830
<v Speaker 0>Regal,

00:15:50.990 --> 00:15:53.070
<v Speaker 0>that's just how to do it. So if

00:15:53.070 --> 00:15:54.990
<v Speaker 0>you found this useful or you need some

00:15:54.990 --> 00:15:57.550
<v Speaker 0>help, drop straight into the comment section.

00:15:58.510 --> 00:16:00.510
<v Speaker 0>Until next time, have a great day. I'll

00:16:00.510 --> 00:16:00.990
<v Speaker 0>see you soon.
