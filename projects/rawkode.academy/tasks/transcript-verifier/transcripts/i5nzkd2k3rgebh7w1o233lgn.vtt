WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 4e9d0b37-ba31-497f-aa96-e891f2d7adbd
Created: 2025-04-29T11:56:14.946Z
Duration: 5470.2563
Channels: 1

00:02:33.525 --> 00:02:36.805
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:02:36.805 --> 00:02:39.605
<v Speaker 0>I am your host, Rawkode. Although, to my

00:02:39.605 --> 00:02:41.365
<v Speaker 0>wife and kids, David Flanagan,

00:02:41.525 --> 00:02:43.444
<v Speaker 0>and to my neighbors in this office box,

00:02:43.444 --> 00:02:44.965
<v Speaker 0>the guy that has been playing Linkin Park

00:02:44.965 --> 00:02:46.644
<v Speaker 0>far too loud for the last forty eight

00:02:46.644 --> 00:02:48.540
<v Speaker 0>hours. So welcome back.

00:02:49.020 --> 00:02:51.100
<v Speaker 0>Today, are carrying on with a Rawkode live

00:02:51.100 --> 00:02:52.540
<v Speaker 0>series in which we take a look at

00:02:52.540 --> 00:02:55.900
<v Speaker 0>awesome projects and cloud native and wider space

00:02:55.900 --> 00:02:58.940
<v Speaker 0>that help make building distributed systems easier. And

00:02:58.940 --> 00:03:00.940
<v Speaker 0>today, we are taking a look at Restate,

00:03:01.515 --> 00:03:03.515
<v Speaker 0>which is found at Restate.dev,

00:03:03.515 --> 00:03:04.555
<v Speaker 0>and I am joined

00:03:04.795 --> 00:03:06.635
<v Speaker 0>by one of the maintainers

00:03:07.435 --> 00:03:07.755
<v Speaker 0>Hi.

00:03:08.235 --> 00:03:10.715
<v Speaker 1>How's it How's it going? Not too bad.

00:03:10.715 --> 00:03:11.755
<v Speaker 1>Not too bad. How are you?

00:03:12.315 --> 00:03:12.715
<v Speaker 0>Yeah.

00:03:13.790 --> 00:03:15.790
<v Speaker 0>Just enjoying the day. It's a nice easy

00:03:15.790 --> 00:03:17.230
<v Speaker 0>start to the week, especially when I get

00:03:17.230 --> 00:03:18.510
<v Speaker 0>to sit in front of the camera and

00:03:18.510 --> 00:03:20.030
<v Speaker 0>play with some awesome technology.

00:03:20.350 --> 00:03:22.110
<v Speaker 0>But before we get into that, why don't

00:03:22.110 --> 00:03:23.950
<v Speaker 0>you tell us a little bit about you?

00:03:24.750 --> 00:03:26.830
<v Speaker 1>Sure. Yeah. So I'm Jack.

00:03:26.990 --> 00:03:30.055
<v Speaker 1>I'm a senior engineer at Restate. I focus

00:03:30.055 --> 00:03:31.974
<v Speaker 1>mostly on the cloud platform and the Go

00:03:31.974 --> 00:03:33.495
<v Speaker 1>SDK and a little bit of the TypeScript

00:03:33.495 --> 00:03:35.094
<v Speaker 1>SDK, which I think we'll be getting into

00:03:35.094 --> 00:03:35.735
<v Speaker 1>today.

00:03:36.614 --> 00:03:38.694
<v Speaker 1>I spent pretty much my entire career in

00:03:38.694 --> 00:03:39.655
<v Speaker 1>cloud native

00:03:40.215 --> 00:03:41.575
<v Speaker 1>starting off at Monzo

00:03:42.189 --> 00:03:44.590
<v Speaker 1>where I was doing, like, security for Kubernetes,

00:03:44.590 --> 00:03:45.070
<v Speaker 1>basically.

00:03:46.349 --> 00:03:47.870
<v Speaker 1>And that was pretty fun because we have

00:03:47.870 --> 00:03:49.469
<v Speaker 1>literally 1,500

00:03:49.469 --> 00:03:50.909
<v Speaker 1>services at the time, and I think now

00:03:50.909 --> 00:03:52.110
<v Speaker 1>they're, like, 3,000.

00:03:52.590 --> 00:03:54.829
<v Speaker 1>Actually went really viral on Twitter, like, four

00:03:54.829 --> 00:03:57.145
<v Speaker 1>years ago for tweeting an image of all

00:03:57.145 --> 00:03:59.225
<v Speaker 1>of our services talking to each other, and

00:03:59.225 --> 00:04:00.905
<v Speaker 1>all these people were retweeting it being like,

00:04:00.905 --> 00:04:02.825
<v Speaker 1>this is such a bad design and trends

00:04:02.825 --> 00:04:05.065
<v Speaker 1>and failures are gonna destroy you, all those

00:04:05.065 --> 00:04:06.745
<v Speaker 1>kinds of stuff. I'm like, oh, wait. The

00:04:06.745 --> 00:04:08.505
<v Speaker 1>retry failure application.

00:04:08.505 --> 00:04:10.790
<v Speaker 1>And so that's kind of what started to

00:04:10.790 --> 00:04:12.870
<v Speaker 1>get me really passionate about, like, making distributed

00:04:12.870 --> 00:04:13.910
<v Speaker 1>systems work,

00:04:14.150 --> 00:04:16.390
<v Speaker 1>removing these problems, distracting them away.

00:04:17.350 --> 00:04:19.430
<v Speaker 1>After that, went to Apple. I worked at

00:04:19.430 --> 00:04:20.310
<v Speaker 1>SRE.

00:04:20.470 --> 00:04:22.229
<v Speaker 1>I saw what it's like to, like, really

00:04:22.229 --> 00:04:26.125
<v Speaker 1>maintain extremely large complicated systems, like highly multi

00:04:26.125 --> 00:04:29.005
<v Speaker 1>tenant teams, teams that maybe don't do always

00:04:29.005 --> 00:04:30.845
<v Speaker 1>the right thing. And that was really fun

00:04:30.845 --> 00:04:31.485
<v Speaker 1>as well.

00:04:31.884 --> 00:04:33.884
<v Speaker 1>Yeah. That that led me to Restate where,

00:04:34.125 --> 00:04:35.805
<v Speaker 1>I guess, our mission is to try and

00:04:36.550 --> 00:04:40.630
<v Speaker 1>make it easier to build complex interrelated systems.

00:04:40.630 --> 00:04:42.150
<v Speaker 1>I mean, even when you have two processes

00:04:42.150 --> 00:04:43.670
<v Speaker 1>running on the same machine,

00:04:44.150 --> 00:04:46.790
<v Speaker 1>you have an system that can fail in

00:04:46.790 --> 00:04:48.630
<v Speaker 1>their communication. Then you have two different machines

00:04:48.630 --> 00:04:50.550
<v Speaker 1>against even worse and two different data centers

00:04:50.550 --> 00:04:51.430
<v Speaker 1>in two different countries.

00:04:52.935 --> 00:04:54.375
<v Speaker 1>So many companies

00:04:54.935 --> 00:04:57.574
<v Speaker 1>are struggling with just splitting one process into

00:04:57.574 --> 00:04:59.655
<v Speaker 1>two, and I guess Restate is

00:04:59.974 --> 00:05:01.974
<v Speaker 1>trying to make those things a lot better

00:05:01.974 --> 00:05:03.095
<v Speaker 1>than they were before.

00:05:03.335 --> 00:05:06.550
<v Speaker 1>So yeah. That's funny. So is the TLDR

00:05:06.550 --> 00:05:08.310
<v Speaker 0>from that that we should just build monolithic

00:05:08.310 --> 00:05:10.470
<v Speaker 0>applications and deploy them on a single box?

00:05:11.030 --> 00:05:13.190
<v Speaker 1>I think if that box is a mainframe,

00:05:13.750 --> 00:05:15.590
<v Speaker 1>then yes. I think absolutely.

00:05:16.389 --> 00:05:17.669
<v Speaker 1>I mean, I guess for me, like, the

00:05:17.669 --> 00:05:20.035
<v Speaker 1>pitch I always had at Monzo was Microsoft's

00:05:20.035 --> 00:05:21.635
<v Speaker 1>weren't solving a

00:05:21.875 --> 00:05:23.475
<v Speaker 1>tech problem there. They were solving, like, an

00:05:23.475 --> 00:05:25.395
<v Speaker 1>organizational problem. Like, they made it so much

00:05:25.395 --> 00:05:26.115
<v Speaker 1>easier

00:05:26.435 --> 00:05:28.835
<v Speaker 1>to have teams that don't have to, like,

00:05:28.835 --> 00:05:31.235
<v Speaker 1>have shared design reviews or have, like Yeah.

00:05:31.315 --> 00:05:32.035
<v Speaker 1>Shared,

00:05:32.435 --> 00:05:34.900
<v Speaker 1>you know, complexity, a lot lots of concern

00:05:34.900 --> 00:05:35.620
<v Speaker 1>about,

00:05:36.100 --> 00:05:37.860
<v Speaker 1>shared libraries and things like that. Instead, we

00:05:37.860 --> 00:05:40.740
<v Speaker 1>just had these really simple RPC contracts,

00:05:40.740 --> 00:05:43.380
<v Speaker 1>and teams could just develop really quickly independently.

00:05:43.380 --> 00:05:45.380
<v Speaker 1>And that's what got me hooked on this.

00:05:46.500 --> 00:05:46.740
<v Speaker 1>And,

00:05:47.395 --> 00:05:49.634
<v Speaker 1>yeah, to make that work, you need this,

00:05:49.634 --> 00:05:51.555
<v Speaker 1>like, incredible platform team, and they were they

00:05:51.555 --> 00:05:53.395
<v Speaker 1>were so good, the team of the Monzo.

00:05:53.395 --> 00:05:54.995
<v Speaker 1>And and, yeah, that's what got me passionate

00:05:54.995 --> 00:05:56.194
<v Speaker 1>about. Like, if you can make the platform

00:05:56.194 --> 00:05:57.074
<v Speaker 1>good enough,

00:05:57.395 --> 00:05:59.155
<v Speaker 1>then you can get it to the point

00:05:59.155 --> 00:06:02.060
<v Speaker 1>that it's almost as technically good as being

00:06:02.060 --> 00:06:04.540
<v Speaker 1>on a mainframe, like massive IBM machine.

00:06:05.660 --> 00:06:08.460
<v Speaker 1>But you get these massive development developer experience

00:06:08.460 --> 00:06:10.380
<v Speaker 1>advantages if you can allow teams to operate

00:06:10.380 --> 00:06:11.660
<v Speaker 1>independently and so on.

00:06:12.140 --> 00:06:13.900
<v Speaker 1>So, yeah, that's my mission really is to

00:06:13.900 --> 00:06:14.940
<v Speaker 1>make to make this better.

00:06:15.715 --> 00:06:17.794
<v Speaker 0>Nice. I love that we have very similar

00:06:17.794 --> 00:06:19.555
<v Speaker 0>mission. I mean, I think we've both been

00:06:19.555 --> 00:06:21.395
<v Speaker 0>on this cloud now space for a while.

00:06:21.395 --> 00:06:24.195
<v Speaker 0>And I always tell people that microservices

00:06:24.195 --> 00:06:25.715
<v Speaker 0>microservices

00:06:25.955 --> 00:06:27.395
<v Speaker 0>are are really simple. That's the whole point

00:06:27.395 --> 00:06:28.430
<v Speaker 0>of them. Right? You're supposed to be able

00:06:28.430 --> 00:06:29.390
<v Speaker 0>to fit them in your head and be

00:06:29.390 --> 00:06:31.310
<v Speaker 0>able to rewrite them rather than change them,

00:06:31.310 --> 00:06:34.110
<v Speaker 0>but that complexity doesn't disappear. It's it's been

00:06:34.110 --> 00:06:36.750
<v Speaker 0>pushed down to platform and infrastructure layers where

00:06:36.750 --> 00:06:38.110
<v Speaker 0>they have to build a lot of tooling

00:06:38.110 --> 00:06:39.710
<v Speaker 0>and automation and remediation.

00:06:40.190 --> 00:06:43.145
<v Speaker 0>Everything has to happen there. But as in

00:06:43.145 --> 00:06:45.705
<v Speaker 0>the let's make developers' lives easier. Let's have

00:06:45.705 --> 00:06:47.865
<v Speaker 0>them focus on what they enjoy doing.

00:06:48.825 --> 00:06:50.025
<v Speaker 0>And I think, yes, there's

00:06:50.505 --> 00:06:52.185
<v Speaker 0>there's a lot of trade offs of every

00:06:52.185 --> 00:06:53.785
<v Speaker 0>approach to building software.

00:06:53.865 --> 00:06:56.105
<v Speaker 0>But I think in 2024, when we have

00:06:56.105 --> 00:06:58.550
<v Speaker 0>things like Restate and other tools, as we'll

00:06:58.550 --> 00:06:59.270
<v Speaker 0>see today,

00:06:59.910 --> 00:07:03.030
<v Speaker 0>these harder challenges are getting easier too, which

00:07:03.030 --> 00:07:05.030
<v Speaker 0>is wonderful, and I'm excited to share that

00:07:05.030 --> 00:07:05.669
<v Speaker 0>with people.

00:07:06.470 --> 00:07:07.270
<v Speaker 1>Absolutely.

00:07:07.430 --> 00:07:09.750
<v Speaker 1>Yeah. So the methodology that it seems to

00:07:09.750 --> 00:07:11.235
<v Speaker 1>exist, like, in the world and what I've

00:07:11.235 --> 00:07:12.915
<v Speaker 1>always experienced is, like, you have some kind

00:07:12.915 --> 00:07:14.995
<v Speaker 1>of mismatch of, like, k v stores,

00:07:15.475 --> 00:07:16.275
<v Speaker 1>queues,

00:07:17.315 --> 00:07:18.515
<v Speaker 1>RPC frameworks,

00:07:18.515 --> 00:07:19.555
<v Speaker 1>retries,

00:07:20.195 --> 00:07:22.115
<v Speaker 1>and the end result can be, like, really

00:07:22.115 --> 00:07:24.540
<v Speaker 1>reliable and really good. But that's quite a

00:07:24.540 --> 00:07:25.980
<v Speaker 1>lot of mental load for engineers, and they

00:07:25.980 --> 00:07:27.740
<v Speaker 1>have to worry about things like added potency

00:07:27.740 --> 00:07:29.820
<v Speaker 1>and just lots of new concepts. So

00:07:30.780 --> 00:07:33.020
<v Speaker 1>my hope is that we can start to

00:07:33.020 --> 00:07:34.780
<v Speaker 1>unify some of these tools together

00:07:35.260 --> 00:07:35.980
<v Speaker 1>and just

00:07:36.765 --> 00:07:39.245
<v Speaker 1>bring the code back to being 95%

00:07:39.245 --> 00:07:41.005
<v Speaker 1>business logic. You can never pretend that the

00:07:41.005 --> 00:07:43.005
<v Speaker 1>distribution system's not there or, like, the network

00:07:43.005 --> 00:07:45.645
<v Speaker 1>isn't there. That's it's it's fantasy. But can

00:07:45.645 --> 00:07:47.885
<v Speaker 1>we get much more of the proportion of

00:07:47.885 --> 00:07:48.925
<v Speaker 1>the code to be

00:07:49.330 --> 00:07:51.010
<v Speaker 1>business logic and not

00:07:51.650 --> 00:07:54.850
<v Speaker 1>instantiate Kafka client or, you know, is this

00:07:54.850 --> 00:07:57.330
<v Speaker 1>a retry or check the token against the

00:07:57.330 --> 00:07:59.889
<v Speaker 1>DB to see if we failed? These sorts

00:07:59.889 --> 00:08:00.610
<v Speaker 1>of things

00:08:00.850 --> 00:08:02.715
<v Speaker 1>occupy a lot of time

00:08:02.955 --> 00:08:04.955
<v Speaker 1>at microservices businesses, and that's that's what I

00:08:04.955 --> 00:08:05.915
<v Speaker 1>like to sort out.

00:08:06.635 --> 00:08:09.035
<v Speaker 0>Nice. Now I I don't wanna spoil too

00:08:09.035 --> 00:08:10.235
<v Speaker 0>much for the people that are watching, but

00:08:10.235 --> 00:08:13.195
<v Speaker 0>I will clarify that I am using Restate

00:08:13.195 --> 00:08:15.595
<v Speaker 0>right now in the Rawkode Academy infrastructure.

00:08:15.675 --> 00:08:17.035
<v Speaker 0>And the first thing we deployed

00:08:18.790 --> 00:08:20.710
<v Speaker 0>was turned out to be the easiest kind

00:08:20.710 --> 00:08:21.910
<v Speaker 0>of code I've ever read in my life,

00:08:21.910 --> 00:08:23.830
<v Speaker 0>but it's actually quite complicated what's happening underneath

00:08:23.830 --> 00:08:25.910
<v Speaker 0>the hood. And it's what when people register

00:08:25.910 --> 00:08:27.670
<v Speaker 0>for the Rawkode Academy website,

00:08:28.070 --> 00:08:29.910
<v Speaker 0>we also create a user account for them.

00:08:30.325 --> 00:08:32.725
<v Speaker 0>But we don't activate their account until they've

00:08:32.725 --> 00:08:34.885
<v Speaker 0>verified their email address. And we were able

00:08:34.885 --> 00:08:37.125
<v Speaker 0>to hook that up at one lane of,

00:08:37.125 --> 00:08:39.285
<v Speaker 0>like, recent magical magic

00:08:39.445 --> 00:08:41.205
<v Speaker 0>that just kinda sits there forever and says,

00:08:41.205 --> 00:08:43.205
<v Speaker 0>I'm gonna wait until you've proven to me

00:08:43.205 --> 00:08:45.760
<v Speaker 0>that this account is active. It is astounding

00:08:45.760 --> 00:08:47.760
<v Speaker 0>to see. And Yep. We're gonna show And

00:08:47.760 --> 00:08:49.360
<v Speaker 0>this is all running serverless as well. Right?

00:08:49.360 --> 00:08:50.880
<v Speaker 1>So when we say wait, what do we

00:08:50.880 --> 00:08:52.320
<v Speaker 1>really mean? I guess we'll get into that,

00:08:52.320 --> 00:08:53.920
<v Speaker 1>but that's that's the exciting thing.

00:08:54.480 --> 00:08:55.200
<v Speaker 0>Awesome.

00:08:55.440 --> 00:08:56.080
<v Speaker 0>Alright.

00:08:56.400 --> 00:08:58.400
<v Speaker 0>So I've went on a tangent already. Let's

00:08:58.400 --> 00:09:00.045
<v Speaker 0>back up a bit for people that are

00:09:00.045 --> 00:09:01.485
<v Speaker 0>watching, and they're still like, wait. What what

00:09:01.485 --> 00:09:03.165
<v Speaker 0>the fuck is a Restate? Like, maybe we

00:09:03.165 --> 00:09:04.845
<v Speaker 0>can give them the the patch. What what

00:09:04.845 --> 00:09:07.405
<v Speaker 0>does Restate deliver for the average developer that

00:09:07.405 --> 00:09:10.205
<v Speaker 0>wants to build fault on distributed systems?

00:09:10.925 --> 00:09:11.565
<v Speaker 1>Yeah. So

00:09:12.250 --> 00:09:13.530
<v Speaker 1>guess I'll start with the sort of the

00:09:13.530 --> 00:09:15.210
<v Speaker 1>primitive that we offer, and then I'll I'll

00:09:15.290 --> 00:09:16.490
<v Speaker 1>maybe I can go into, like, how it

00:09:16.490 --> 00:09:18.650
<v Speaker 1>fits inside the infrastructure. So so what we

00:09:18.650 --> 00:09:19.770
<v Speaker 1>offer is

00:09:20.330 --> 00:09:22.650
<v Speaker 1>suspendable functions. And what I mean by that

00:09:22.650 --> 00:09:23.690
<v Speaker 1>is

00:09:24.275 --> 00:09:27.635
<v Speaker 1>code that can save its progress kind of

00:09:27.635 --> 00:09:28.675
<v Speaker 1>at any point,

00:09:29.235 --> 00:09:30.915
<v Speaker 1>and resume later. So if you've come from

00:09:30.915 --> 00:09:32.435
<v Speaker 1>a Go background, this might sound a little

00:09:32.435 --> 00:09:34.115
<v Speaker 1>bit like a distributed coroutine.

00:09:34.355 --> 00:09:37.075
<v Speaker 1>If you come from a JavaScript

00:09:36.690 --> 00:09:38.370
<v Speaker 1>background, maybe you might think of this as

00:09:38.370 --> 00:09:40.290
<v Speaker 1>being like a distributed async run time or,

00:09:40.290 --> 00:09:41.570
<v Speaker 1>like, async event loop.

00:09:43.010 --> 00:09:44.770
<v Speaker 1>And, yeah, this is a

00:09:45.410 --> 00:09:47.570
<v Speaker 1>little bit of a new concept, but the

00:09:47.570 --> 00:09:50.050
<v Speaker 1>idea is that when your program fails, for

00:09:50.050 --> 00:09:52.645
<v Speaker 1>example, like, the machine dies or crashes, we

00:09:52.645 --> 00:09:54.964
<v Speaker 1>can resume from that point onwards. But it's

00:09:54.964 --> 00:09:56.565
<v Speaker 1>a lot more interesting than just failure because

00:09:56.565 --> 00:09:59.445
<v Speaker 1>there's also this idea of, like, sometimes

00:09:59.525 --> 00:10:01.685
<v Speaker 1>code, it's a lot more helpful if you

00:10:01.685 --> 00:10:03.605
<v Speaker 1>could just think of it as waiting for

00:10:03.605 --> 00:10:05.765
<v Speaker 1>something, like, for a long time, like, even

00:10:05.765 --> 00:10:08.220
<v Speaker 1>for a week. And you can't really write

00:10:08.220 --> 00:10:10.540
<v Speaker 1>code that way because you're guaranteed to hit

00:10:10.540 --> 00:10:12.620
<v Speaker 1>some kind of infrastructure failure if you wait

00:10:12.620 --> 00:10:13.660
<v Speaker 1>for long enough.

00:10:14.380 --> 00:10:16.300
<v Speaker 1>Or if you're running serverless, you're being billed

00:10:16.300 --> 00:10:18.620
<v Speaker 1>by the second. So the fact that the

00:10:18.620 --> 00:10:21.339
<v Speaker 1>code can sort of invisibly or somewhat invisibly

00:10:21.765 --> 00:10:24.725
<v Speaker 1>save its progress, shut down, and then resume

00:10:24.725 --> 00:10:26.565
<v Speaker 1>at that point at a later date when

00:10:26.565 --> 00:10:28.725
<v Speaker 1>the thing it's waiting for is done, that's

00:10:28.725 --> 00:10:30.485
<v Speaker 1>really useful primitive. Sounds like that's the one

00:10:30.485 --> 00:10:31.765
<v Speaker 1>that you were using, which I mentioned we'll

00:10:31.765 --> 00:10:32.645
<v Speaker 1>go into. But,

00:10:33.525 --> 00:10:34.965
<v Speaker 1>so that's that's what we're trying to offer.

00:10:35.680 --> 00:10:38.240
<v Speaker 1>The way that it works is by writing

00:10:38.240 --> 00:10:40.480
<v Speaker 1>down more. So applications right now,

00:10:41.280 --> 00:10:43.360
<v Speaker 1>are not particularly stateful, or we don't see

00:10:43.360 --> 00:10:44.800
<v Speaker 1>them as being super stateful other than what

00:10:44.800 --> 00:10:46.560
<v Speaker 1>they save in the database. And saving something

00:10:46.560 --> 00:10:48.485
<v Speaker 1>in the database is something that engineers have

00:10:48.485 --> 00:10:49.845
<v Speaker 1>to, like, deliberately do.

00:10:50.725 --> 00:10:52.165
<v Speaker 1>And kind of the more you write down

00:10:52.165 --> 00:10:53.764
<v Speaker 1>or the more you say, the better. And

00:10:53.764 --> 00:10:55.685
<v Speaker 1>when we write to Kafka, we are also

00:10:55.685 --> 00:10:57.445
<v Speaker 1>writing something down. I mean, it it it

00:10:57.445 --> 00:10:58.964
<v Speaker 1>may not feel that way, but Kafka is

00:10:58.964 --> 00:11:00.005
<v Speaker 1>like a durable

00:11:00.245 --> 00:11:02.165
<v Speaker 1>log and can actually store messages for a

00:11:02.165 --> 00:11:02.964
<v Speaker 1>really long time. Right?

00:11:03.650 --> 00:11:04.210
<v Speaker 1>So

00:11:05.250 --> 00:11:07.250
<v Speaker 1>we are making it much easier to write

00:11:07.250 --> 00:11:07.970
<v Speaker 1>things down.

00:11:08.370 --> 00:11:11.010
<v Speaker 1>For example, when you make an RPC between

00:11:11.010 --> 00:11:13.250
<v Speaker 1>two services, that's gonna be persisted.

00:11:13.570 --> 00:11:15.010
<v Speaker 1>When you do something

00:11:15.595 --> 00:11:18.395
<v Speaker 1>like, create an item potency token, that's gonna

00:11:18.395 --> 00:11:19.355
<v Speaker 1>be persisted,

00:11:20.475 --> 00:11:22.875
<v Speaker 1>and lots of other things as well. And

00:11:22.955 --> 00:11:24.395
<v Speaker 1>we try and do this without really changing

00:11:24.395 --> 00:11:25.755
<v Speaker 1>the way you write code at all.

00:11:27.355 --> 00:11:29.675
<v Speaker 1>The end result is that the program can

00:11:29.675 --> 00:11:30.555
<v Speaker 1>be stopped

00:11:30.910 --> 00:11:33.150
<v Speaker 1>and then resumed and all the previous values

00:11:33.150 --> 00:11:35.310
<v Speaker 1>filled in and then continue from where it

00:11:35.310 --> 00:11:36.990
<v Speaker 1>was. And that's what allows us to do

00:11:36.990 --> 00:11:39.150
<v Speaker 1>things like sleep for a week or or

00:11:39.150 --> 00:11:40.910
<v Speaker 1>wait for a user input for a year.

00:11:40.910 --> 00:11:42.990
<v Speaker 1>I mean, these sorts of suspendable properties are

00:11:42.990 --> 00:11:44.430
<v Speaker 1>really helpful, but it's also really helpful

00:11:44.995 --> 00:11:47.555
<v Speaker 1>for failure of any kind. I mean, obviously,

00:11:47.555 --> 00:11:49.475
<v Speaker 1>some types of failure, like user failures,

00:11:49.795 --> 00:11:50.275
<v Speaker 1>like

00:11:50.675 --> 00:11:52.835
<v Speaker 1>or, like, the infrastructure just isn't running. These

00:11:52.835 --> 00:11:54.435
<v Speaker 1>things are difficult to deal with, but things

00:11:54.435 --> 00:11:56.755
<v Speaker 1>like the network failing or the user closing

00:11:56.755 --> 00:11:58.355
<v Speaker 1>the browser tab or these sorts of things.

00:11:59.060 --> 00:12:02.339
<v Speaker 1>By writing more down, we can allow complex

00:12:02.339 --> 00:12:04.260
<v Speaker 1>workflows to resume from the point to which

00:12:04.260 --> 00:12:05.060
<v Speaker 1>they failed.

00:12:05.860 --> 00:12:07.140
<v Speaker 1>And this makes it a lot easier to

00:12:07.140 --> 00:12:09.140
<v Speaker 1>reason about idempotency because if you think about,

00:12:09.140 --> 00:12:10.260
<v Speaker 1>like, 10 steps

00:12:10.500 --> 00:12:12.339
<v Speaker 1>and you get to the ninth, if we

00:12:12.339 --> 00:12:14.715
<v Speaker 1>then start from the beginning, making that whole

00:12:14.715 --> 00:12:17.915
<v Speaker 1>thing idempotent is quite tricky. But with Restate,

00:12:17.915 --> 00:12:19.275
<v Speaker 1>you kind of only have to worry about

00:12:19.275 --> 00:12:21.835
<v Speaker 1>that last step. Like, maybe it could be

00:12:21.835 --> 00:12:23.835
<v Speaker 1>run again if it, like, failed before we

00:12:23.835 --> 00:12:25.995
<v Speaker 1>managed to save the result, but we know

00:12:25.995 --> 00:12:28.100
<v Speaker 1>that the previous steps that were saved, they

00:12:28.100 --> 00:12:30.900
<v Speaker 1>will never run again. And that's makes things

00:12:30.900 --> 00:12:32.420
<v Speaker 1>a lot easier for engineers.

00:12:33.220 --> 00:12:34.500
<v Speaker 1>So this is sort of Can I challenge

00:12:34.500 --> 00:12:36.340
<v Speaker 0>one of the things you said there? Yep.

00:12:36.740 --> 00:12:39.220
<v Speaker 0>You said that it doesn't change the way

00:12:39.220 --> 00:12:42.185
<v Speaker 0>that we write code. And I've actually found

00:12:42.345 --> 00:12:44.105
<v Speaker 0>no. I'm saying I'm gonna say you're wrong,

00:12:44.105 --> 00:12:46.505
<v Speaker 0>but I kinda am. Right? I've

00:12:46.505 --> 00:12:47.705
<v Speaker 0>actually found this made my code a lot

00:12:47.705 --> 00:12:50.985
<v Speaker 0>simpler because we have this linear flow of

00:12:50.985 --> 00:12:52.585
<v Speaker 0>what things are supposed to do, and I

00:12:52.585 --> 00:12:54.505
<v Speaker 0>found myself I've not had to reach for,

00:12:54.505 --> 00:12:57.220
<v Speaker 0>like, state machines and complex modeling of these

00:12:57.220 --> 00:12:59.300
<v Speaker 0>situations anymore because we are able to map

00:12:59.300 --> 00:13:01.540
<v Speaker 0>things as a linear progression of events.

00:13:01.940 --> 00:13:03.460
<v Speaker 0>And I have found that things are are

00:13:03.460 --> 00:13:04.740
<v Speaker 0>just a lot easier. I'm not sitting there

00:13:04.740 --> 00:13:06.260
<v Speaker 0>going, oh, I'm in this You're right. Waiting

00:13:06.260 --> 00:13:07.140
<v Speaker 0>for activation,

00:13:07.700 --> 00:13:08.900
<v Speaker 0>and I'm not having to worry about item

00:13:08.900 --> 00:13:10.580
<v Speaker 0>potency of the first nine steps. You're right.

00:13:10.580 --> 00:13:12.464
<v Speaker 0>Like, that is a challenge, but that that

00:13:12.464 --> 00:13:15.025
<v Speaker 0>suspendable linear progression does change the way that

00:13:15.025 --> 00:13:16.464
<v Speaker 0>we write code, but for the better, I

00:13:16.464 --> 00:13:16.945
<v Speaker 0>drastically

00:13:17.265 --> 00:13:18.545
<v Speaker 1>So I think what I really mean is

00:13:18.545 --> 00:13:20.065
<v Speaker 1>you don't have to write the code much

00:13:20.065 --> 00:13:21.505
<v Speaker 1>differently to if it was just running on

00:13:21.505 --> 00:13:23.985
<v Speaker 1>your laptop. And, for example, waiting for input,

00:13:23.985 --> 00:13:25.585
<v Speaker 1>it was just the process was just waiting

00:13:25.910 --> 00:13:27.670
<v Speaker 1>or sleeping for a month. It was just

00:13:27.670 --> 00:13:29.350
<v Speaker 1>sleeping, you kept it on under your desk

00:13:29.350 --> 00:13:31.030
<v Speaker 1>or whatever, which is a perfectly fine way

00:13:31.030 --> 00:13:32.390
<v Speaker 1>to write software. But the moment that you

00:13:32.390 --> 00:13:35.030
<v Speaker 1>go serverless or really into any, like, Kubernetes

00:13:35.030 --> 00:13:38.470
<v Speaker 1>environment, all these things become somewhat impossible. So

00:13:38.585 --> 00:13:40.985
<v Speaker 1>that's the world we want. It's, like, super

00:13:40.985 --> 00:13:41.945
<v Speaker 1>imperative,

00:13:41.945 --> 00:13:44.025
<v Speaker 1>like, coding on a Commodore sixty four.

00:13:44.345 --> 00:13:46.025
<v Speaker 1>The thing that the code says it's doing

00:13:46.025 --> 00:13:47.145
<v Speaker 1>is what it's doing.

00:13:47.865 --> 00:13:50.105
<v Speaker 1>The right way to do it without Restate,

00:13:50.105 --> 00:13:52.185
<v Speaker 1>as you said, is, like, actors

00:13:52.425 --> 00:13:52.985
<v Speaker 1>and

00:13:53.279 --> 00:13:54.160
<v Speaker 1>queues

00:13:54.160 --> 00:13:55.440
<v Speaker 1>and complex

00:13:55.440 --> 00:13:57.440
<v Speaker 1>systems, and they do change the way you

00:13:57.440 --> 00:13:59.440
<v Speaker 1>write code. And there's absolutely nothing wrong with

00:13:59.440 --> 00:14:01.600
<v Speaker 1>them. They are amazing tools, but our hope

00:14:01.600 --> 00:14:04.320
<v Speaker 1>is that we can distill down their properties

00:14:04.480 --> 00:14:06.079
<v Speaker 1>with a different API.

00:14:07.040 --> 00:14:08.480
<v Speaker 1>And maybe that brings me on to

00:14:09.045 --> 00:14:11.445
<v Speaker 1>the position of the infrastructure because, essentially,

00:14:11.845 --> 00:14:13.285
<v Speaker 1>we do look a little bit like a

00:14:13.285 --> 00:14:14.885
<v Speaker 1>a message queue. We look a little bit

00:14:14.885 --> 00:14:17.125
<v Speaker 1>like a Kafka. We're a stateful message queue.

00:14:17.125 --> 00:14:18.485
<v Speaker 1>It's a streaming system,

00:14:19.685 --> 00:14:22.700
<v Speaker 1>and we have similar properties to if you

00:14:22.700 --> 00:14:24.780
<v Speaker 1>split your application up into lots of event

00:14:24.780 --> 00:14:27.340
<v Speaker 1>handlers that, you know, every single step is

00:14:27.340 --> 00:14:28.940
<v Speaker 1>its own event handler, and you would just

00:14:28.940 --> 00:14:30.620
<v Speaker 1>kind of hop between each step with the

00:14:30.620 --> 00:14:32.300
<v Speaker 1>state that needs to be sent between each

00:14:32.300 --> 00:14:34.220
<v Speaker 1>step. And that, by the way, is exactly

00:14:34.220 --> 00:14:37.365
<v Speaker 1>how we built complex distributed systems at Monzo,

00:14:37.365 --> 00:14:41.125
<v Speaker 1>was, we would just put everything into handlers.

00:14:41.285 --> 00:14:42.645
<v Speaker 1>If it needs to be reliable, it's in

00:14:42.645 --> 00:14:45.205
<v Speaker 1>another handler. And that is really a lot

00:14:45.205 --> 00:14:48.005
<v Speaker 1>lot harder. So, yeah, that's what I'm excited

00:14:48.005 --> 00:14:50.220
<v Speaker 1>about is is maybe you can just write,

00:14:50.220 --> 00:14:52.620
<v Speaker 1>do this thing, then do this thing,

00:14:52.860 --> 00:14:54.540
<v Speaker 1>then wait for this thing for a week,

00:14:54.620 --> 00:14:55.660
<v Speaker 1>then sleep,

00:14:55.660 --> 00:14:57.100
<v Speaker 1>whatever you wanna do. And it it would

00:14:57.100 --> 00:14:59.260
<v Speaker 1>just look like the simplest code, but

00:14:59.740 --> 00:15:00.860
<v Speaker 1>has different properties.

00:15:01.825 --> 00:15:04.385
<v Speaker 0>Alright. I'm I'm really disappointed that we're fifteen

00:15:04.385 --> 00:15:05.745
<v Speaker 0>minutes in and no one has said rushed

00:15:05.745 --> 00:15:07.024
<v Speaker 0>yet. So I just thought I'd get that

00:15:07.024 --> 00:15:07.745
<v Speaker 0>out of the way.

00:15:09.024 --> 00:15:10.225
<v Speaker 0>I try not to go that long with

00:15:10.225 --> 00:15:11.025
<v Speaker 0>it. That's true.

00:15:11.745 --> 00:15:13.825
<v Speaker 1>But we get we get criticized for for

00:15:13.825 --> 00:15:15.990
<v Speaker 1>advertising that we're for Rust. And part of

00:15:15.990 --> 00:15:17.510
<v Speaker 1>the reason for that was that until about

00:15:17.510 --> 00:15:19.350
<v Speaker 1>this week, we didn't have a Rust SDK.

00:15:19.590 --> 00:15:20.790
<v Speaker 1>So now we do. We can say that

00:15:20.790 --> 00:15:22.230
<v Speaker 1>we're There's a Rust SDK.

00:15:22.470 --> 00:15:25.030
<v Speaker 1>That is as of, like, right now. Yeah.

00:15:25.030 --> 00:15:25.510
<v Speaker 1>Yeah.

00:15:26.950 --> 00:15:29.190
<v Speaker 0>Okay. That's just changed the entire session.

00:15:30.230 --> 00:15:31.605
<v Speaker 1>Okay. Well, maybe we should talk about that

00:15:31.605 --> 00:15:32.485
<v Speaker 1>as well. But

00:15:32.965 --> 00:15:34.405
<v Speaker 1>we have been criticized in the past because

00:15:34.405 --> 00:15:36.325
<v Speaker 1>it's like, yeah, you're building with Rust, but

00:15:36.325 --> 00:15:37.925
<v Speaker 1>you're not building for Rust people. Okay. Well,

00:15:37.925 --> 00:15:39.605
<v Speaker 1>now we are. But but it's true that

00:15:39.605 --> 00:15:41.685
<v Speaker 1>our first SDKs with Java and TypeScript, now

00:15:41.685 --> 00:15:44.005
<v Speaker 1>we also have Go, Python, and and Rust.

00:15:44.005 --> 00:15:46.850
<v Speaker 1>So things are expanding expanding fast on that

00:15:46.850 --> 00:15:48.610
<v Speaker 1>front. I think there's obviously a lot of

00:15:48.610 --> 00:15:50.850
<v Speaker 0>frustration in the developer community where people are

00:15:50.850 --> 00:15:52.290
<v Speaker 0>rewriting things in Rust that maybe don't need

00:15:52.290 --> 00:15:53.970
<v Speaker 0>to be re rewritten in Rust. But I

00:15:53.970 --> 00:15:56.529
<v Speaker 0>think something like Restate should be written in

00:15:56.529 --> 00:15:58.370
<v Speaker 0>Rust, but it doesn't necessarily mean the end

00:15:58.370 --> 00:15:58.770
<v Speaker 0>consumer

00:15:59.375 --> 00:16:01.135
<v Speaker 0>is gonna be written all their stuff and

00:16:01.135 --> 00:16:02.894
<v Speaker 0>Rust. And I think I think they need

00:16:02.894 --> 00:16:05.695
<v Speaker 1>to know TypeScript is yeah. Yeah. I don't

00:16:05.695 --> 00:16:06.654
<v Speaker 1>think they need to mind, but I think

00:16:06.654 --> 00:16:08.495
<v Speaker 1>the the really exciting thing about Restate from,

00:16:08.495 --> 00:16:10.815
<v Speaker 1>like, a operator perspective is that it's like

00:16:10.815 --> 00:16:11.535
<v Speaker 1>a single binary.

00:16:12.730 --> 00:16:14.250
<v Speaker 1>It's really easy to get running. Like, you

00:16:14.250 --> 00:16:15.610
<v Speaker 1>can run it on your machine. That's not

00:16:15.610 --> 00:16:17.290
<v Speaker 1>like the dev server. When you type restate

00:16:17.290 --> 00:16:20.009
<v Speaker 1>dash server presenter, you're running, like, the actual

00:16:20.009 --> 00:16:21.930
<v Speaker 1>thing, and it's once exactly the same way

00:16:21.930 --> 00:16:23.690
<v Speaker 1>on your laptop as it would when it's

00:16:23.690 --> 00:16:25.370
<v Speaker 1>running on cloud or when it's running, like,

00:16:25.370 --> 00:16:26.649
<v Speaker 1>on the AWS box or whatever.

00:16:28.115 --> 00:16:29.795
<v Speaker 1>And I think that's that's cool, and and

00:16:29.795 --> 00:16:31.475
<v Speaker 1>Rust gives us a lot of nice properties

00:16:31.475 --> 00:16:32.675
<v Speaker 1>there about it being

00:16:32.995 --> 00:16:34.435
<v Speaker 1>very low dependency.

00:16:35.075 --> 00:16:36.595
<v Speaker 1>And we don't we don't ever wanna have

00:16:36.595 --> 00:16:38.915
<v Speaker 1>to rely on, an external, like, etcd or

00:16:38.915 --> 00:16:40.755
<v Speaker 1>something like that, partly because, you know, several

00:16:40.755 --> 00:16:42.380
<v Speaker 1>of us at Restate have had a really

00:16:42.380 --> 00:16:45.500
<v Speaker 1>negative experiences running complex distributed systems that have,

00:16:45.500 --> 00:16:47.740
<v Speaker 1>like, 10 components and and rely on, like,

00:16:47.740 --> 00:16:49.579
<v Speaker 1>other distributed systems as well and so on.

00:16:49.579 --> 00:16:51.660
<v Speaker 1>So we want it to be so easy

00:16:51.660 --> 00:16:52.380
<v Speaker 1>to operate,

00:16:53.180 --> 00:16:54.779
<v Speaker 1>and we also want it to be really,

00:16:54.779 --> 00:16:56.940
<v Speaker 1>really, really fast. Like, we want

00:16:57.445 --> 00:16:59.845
<v Speaker 1>complex workflows to have single

00:16:59.845 --> 00:17:01.524
<v Speaker 1>digit millisecond overhead

00:17:01.845 --> 00:17:03.764
<v Speaker 1>from all of the writing things down. And

00:17:03.764 --> 00:17:05.365
<v Speaker 1>to do that, you need to build a

00:17:05.365 --> 00:17:07.524
<v Speaker 1>new kind of streaming storage system

00:17:08.325 --> 00:17:10.645
<v Speaker 1>and making that distributed and fault tolerant and

00:17:10.645 --> 00:17:11.684
<v Speaker 1>still really performant.

00:17:11.990 --> 00:17:14.150
<v Speaker 1>It's not very easy. And, unfortunately, I have

00:17:14.150 --> 00:17:15.510
<v Speaker 1>some smart people working on that.

00:17:15.990 --> 00:17:18.230
<v Speaker 1>And they are using Rust, and thank thank

00:17:18.230 --> 00:17:20.390
<v Speaker 1>goodness for that because I think it's it's

00:17:20.390 --> 00:17:22.150
<v Speaker 1>a big help on performance for sure. And

00:17:22.150 --> 00:17:23.750
<v Speaker 1>I can't write C plus plus to save

00:17:23.750 --> 00:17:24.710
<v Speaker 1>my life, so I don't know what else

00:17:24.710 --> 00:17:26.755
<v Speaker 1>we'd be doing. Yeah. Rest is a great

00:17:26.755 --> 00:17:28.915
<v Speaker 0>language for it, especially with SPTK and IO

00:17:28.915 --> 00:17:29.554
<v Speaker 0>integration.

00:17:29.955 --> 00:17:32.115
<v Speaker 0>It's like right into Linux disks. It's just

00:17:32.115 --> 00:17:34.435
<v Speaker 0>never been faster. There's a lot of really

00:17:34.435 --> 00:17:36.034
<v Speaker 0>exciting work going in that space.

00:17:36.515 --> 00:17:38.515
<v Speaker 0>Yep. Now I'll just I'll call it out

00:17:38.515 --> 00:17:40.430
<v Speaker 0>because you didn't. You know, I'm gonna say

00:17:40.430 --> 00:17:42.190
<v Speaker 0>all nine out of ten nine out of

00:17:42.190 --> 00:17:45.070
<v Speaker 0>10 times problems with distributed systems as etcd.

00:17:45.070 --> 00:17:46.670
<v Speaker 0>Like, it's not set for purpose. We should

00:17:46.670 --> 00:17:48.350
<v Speaker 0>not be running it. I don't know why

00:17:48.350 --> 00:17:50.429
<v Speaker 0>we're in this situation with Kubernetes. You're right.

00:17:50.990 --> 00:17:52.910
<v Speaker 1>Even better is when you have your DNS

00:17:52.910 --> 00:17:55.725
<v Speaker 1>backed by then you're really winning. But, yeah,

00:17:55.725 --> 00:17:57.485
<v Speaker 1>I mean, god, it's such a nightmare to

00:17:57.485 --> 00:17:58.845
<v Speaker 1>run. And I'm so glad that we don't

00:17:58.845 --> 00:18:00.605
<v Speaker 1>rely on anything like that. Zookeeper is worse.

00:18:00.605 --> 00:18:01.965
<v Speaker 1>I think it's fair to say. At least

00:18:01.965 --> 00:18:03.245
<v Speaker 1>Kafka is fine. We got off of that

00:18:03.245 --> 00:18:05.164
<v Speaker 1>one. Yeah. I I do like that Kafka

00:18:05.164 --> 00:18:07.899
<v Speaker 0>when start using Kafka for that rather than

00:18:07.980 --> 00:18:09.740
<v Speaker 0>think that's why I I stopped using Kafka

00:18:09.740 --> 00:18:11.340
<v Speaker 0>because of those Zookeeper stuff. I had too

00:18:11.340 --> 00:18:13.100
<v Speaker 0>many problems. I I started looking out there.

00:18:13.100 --> 00:18:15.100
<v Speaker 0>Red Panda is a great one. It it

00:18:15.100 --> 00:18:16.460
<v Speaker 0>requires Zookeeper.

00:18:16.460 --> 00:18:18.220
<v Speaker 1>We've taken a lot of inspiration from them.

00:18:18.220 --> 00:18:20.945
<v Speaker 1>They're also obsessive about this zero dependency, simple

00:18:20.945 --> 00:18:22.784
<v Speaker 1>single binary, this kind of stuff. This is

00:18:22.784 --> 00:18:25.025
<v Speaker 1>really, really awesome. Except they went c plus

00:18:25.025 --> 00:18:27.105
<v Speaker 0>plus and you went to rest. So Yeah.

00:18:27.105 --> 00:18:27.744
<v Speaker 1>Exactly.

00:18:28.465 --> 00:18:30.625
<v Speaker 0>Alright. Russell's in the chat saying, so this

00:18:30.625 --> 00:18:32.144
<v Speaker 0>is the async of event

00:18:32.385 --> 00:18:33.345
<v Speaker 0>driven programming.

00:18:34.010 --> 00:18:35.530
<v Speaker 0>Right? Absolutely.

00:18:35.530 --> 00:18:38.490
<v Speaker 1>I often use this expression distributed async await,

00:18:38.490 --> 00:18:40.330
<v Speaker 1>but it doesn't mean something to everyone.

00:18:40.730 --> 00:18:41.850
<v Speaker 1>And I think this is something we struggle

00:18:41.850 --> 00:18:43.850
<v Speaker 1>with in Restate because depending on what language

00:18:43.850 --> 00:18:46.090
<v Speaker 1>you come from, I should probably be using

00:18:46.090 --> 00:18:46.650
<v Speaker 1>different words.

00:18:48.095 --> 00:18:50.014
<v Speaker 1>And that the SDK is also, of course,

00:18:50.014 --> 00:18:52.575
<v Speaker 1>different depending on the languages, but we're not

00:18:52.815 --> 00:18:54.495
<v Speaker 1>like, the thing we're really passionate about is

00:18:54.495 --> 00:18:55.934
<v Speaker 1>the runtime and, like, the thing that makes

00:18:55.934 --> 00:18:57.934
<v Speaker 1>this performant and successful. And we want the

00:18:57.934 --> 00:19:00.370
<v Speaker 1>SDK to be whatever makes sense to our

00:19:00.370 --> 00:19:01.890
<v Speaker 1>users, but it help it hurts us in

00:19:01.890 --> 00:19:03.010
<v Speaker 1>communication because,

00:19:03.490 --> 00:19:06.370
<v Speaker 1>yeah, async gateway turns off anyone who doesn't

00:19:06.370 --> 00:19:08.130
<v Speaker 1>like async gateway, which is, like, I don't

00:19:08.130 --> 00:19:09.410
<v Speaker 1>know, half of engineers, maybe.

00:19:11.625 --> 00:19:12.505
<v Speaker 0>Alright.

00:19:13.145 --> 00:19:16.585
<v Speaker 0>Well, I am gonna get my screen ready

00:19:16.585 --> 00:19:17.865
<v Speaker 0>for us to start taking a look at

00:19:17.865 --> 00:19:19.545
<v Speaker 0>the docs and and show people where they

00:19:19.545 --> 00:19:21.225
<v Speaker 0>can get started with us as well.

00:19:21.945 --> 00:19:22.505
<v Speaker 0>So,

00:19:22.985 --> 00:19:24.585
<v Speaker 0>yeah, thank you, Russell, for jumping in the

00:19:24.585 --> 00:19:26.399
<v Speaker 0>chat, and then someone confirmed that. I don't

00:19:26.399 --> 00:19:28.559
<v Speaker 0>know if Ahmed is maybe on the Restate

00:19:28.559 --> 00:19:31.440
<v Speaker 0>team for Yes. He's a he's a principal

00:19:31.440 --> 00:19:32.959
<v Speaker 1>engineer working on the runtime.

00:19:33.519 --> 00:19:35.919
<v Speaker 1>If we have any really complex questions about

00:19:35.919 --> 00:19:37.919
<v Speaker 1>the distributed architecture, you know, maybe he could

00:19:37.919 --> 00:19:38.720
<v Speaker 1>reply in the comments.

00:19:39.785 --> 00:19:41.544
<v Speaker 0>And do we have anyone here that's gonna

00:19:41.544 --> 00:19:43.304
<v Speaker 0>tell us how to work the Rust SDK?

00:19:43.304 --> 00:19:44.664
<v Speaker 0>Because now that's the only thing I want

00:19:44.664 --> 00:19:45.225
<v Speaker 0>to do.

00:19:46.985 --> 00:19:49.304
<v Speaker 1>Definitely not me, but I'm never trying it

00:19:49.304 --> 00:19:51.625
<v Speaker 1>so far. I have no idea who's watching.

00:19:52.180 --> 00:19:54.180
<v Speaker 0>No one hasn't ever changed it. I thought

00:19:54.260 --> 00:19:55.940
<v Speaker 0>let's let's try. We'll do a second one.

00:19:55.940 --> 00:19:56.659
<v Speaker 1>Don't worry.

00:19:57.940 --> 00:20:00.020
<v Speaker 0>Alright. I am gonna throw up the screen

00:20:00.020 --> 00:20:00.820
<v Speaker 0>share,

00:20:01.220 --> 00:20:02.820
<v Speaker 0>and we can just talk about how people

00:20:02.820 --> 00:20:04.260
<v Speaker 0>get started with that. I mean, it's our

00:20:04.260 --> 00:20:05.540
<v Speaker 0>NF and I've messed up. We haven't covered.

00:20:05.565 --> 00:20:06.764
<v Speaker 0>Like, how do you feel that we've given

00:20:06.764 --> 00:20:08.365
<v Speaker 0>people a good overview of what Restate is

00:20:08.365 --> 00:20:11.164
<v Speaker 0>and what are levers? Yeah. I hope so.

00:20:14.365 --> 00:20:15.325
<v Speaker 0>Righty.

00:20:15.325 --> 00:20:17.565
<v Speaker 0>So here is the Restate.dev

00:20:17.565 --> 00:20:18.125
<v Speaker 0>website.

00:20:19.519 --> 00:20:21.759
<v Speaker 0>It is one point o

00:20:21.840 --> 00:20:24.639
<v Speaker 0>with a cloud offering and seed funding.

00:20:25.120 --> 00:20:27.679
<v Speaker 0>I mean, it feels to me that Restate

00:20:27.679 --> 00:20:29.120
<v Speaker 0>is about two weeks old. I know I

00:20:29.120 --> 00:20:31.200
<v Speaker 0>know it's not because we've been chatting for

00:20:31.200 --> 00:20:31.999
<v Speaker 0>a while now,

00:20:32.320 --> 00:20:34.785
<v Speaker 0>but it's been I mean, you did not

00:20:34.785 --> 00:20:36.145
<v Speaker 0>waste time getting to that one point o,

00:20:36.145 --> 00:20:37.665
<v Speaker 0>I've gotta say. Like, a lot of projects

00:20:37.665 --> 00:20:39.585
<v Speaker 0>these days, especially in cloud native, I feel

00:20:39.585 --> 00:20:41.025
<v Speaker 0>like they've been around for ten years and

00:20:41.025 --> 00:20:42.625
<v Speaker 0>they're still in zero point twelve point one

00:20:42.625 --> 00:20:43.345
<v Speaker 0>seven six.

00:20:43.665 --> 00:20:45.665
<v Speaker 0>Like Yep. Clearly, you said a mission and

00:20:45.665 --> 00:20:47.530
<v Speaker 0>you're like, we want to deliver best. This

00:20:47.530 --> 00:20:48.810
<v Speaker 0>is what we're gonna deliver, and we got

00:20:48.810 --> 00:20:50.650
<v Speaker 0>there. Maybe you could talk about that. Mission.

00:20:50.650 --> 00:20:52.090
<v Speaker 1>And and really what we know is about

00:20:52.090 --> 00:20:55.050
<v Speaker 1>stability promises, and that's that's really scary and

00:20:55.050 --> 00:20:57.050
<v Speaker 1>stressful thing. It's an early stage startup. It's

00:20:57.050 --> 00:20:58.650
<v Speaker 1>like, are we sure that our feature surface

00:20:58.650 --> 00:21:00.170
<v Speaker 1>now is the one that we want to,

00:21:00.170 --> 00:21:01.370
<v Speaker 1>like, stand by for

00:21:01.645 --> 00:21:02.924
<v Speaker 1>I don't know how long.

00:21:04.125 --> 00:21:07.485
<v Speaker 1>But, yeah, we we have to be stable,

00:21:07.485 --> 00:21:09.965
<v Speaker 1>really, to persuade people to rely on us

00:21:09.965 --> 00:21:12.125
<v Speaker 1>for them, like, most critical use cases. We're

00:21:12.125 --> 00:21:13.965
<v Speaker 1>not like a monitoring tool. If it goes

00:21:13.965 --> 00:21:16.080
<v Speaker 1>down, would be really annoying, but you know

00:21:16.160 --> 00:21:17.440
<v Speaker 1>or if it changes the API, it would

00:21:17.440 --> 00:21:19.519
<v Speaker 1>be annoying, but fundamentally, it's fixable.

00:21:19.840 --> 00:21:22.320
<v Speaker 1>We are asking permission to be one of

00:21:22.320 --> 00:21:24.160
<v Speaker 1>the most critical components of infrastructure, and that's

00:21:24.160 --> 00:21:25.600
<v Speaker 1>why stability is so important.

00:21:26.720 --> 00:21:27.760
<v Speaker 0>K. Awesome.

00:21:28.575 --> 00:21:30.174
<v Speaker 0>So if we scroll down, you're kind of

00:21:30.174 --> 00:21:31.855
<v Speaker 0>already summarizing a few of the main use

00:21:31.855 --> 00:21:33.455
<v Speaker 0>cases. We've got workflows

00:21:34.014 --> 00:21:35.534
<v Speaker 0>as code, and we can see a nice

00:21:35.534 --> 00:21:37.135
<v Speaker 0>example here. I'll quickly work it if I

00:21:37.135 --> 00:21:38.254
<v Speaker 0>can see what that's doing.

00:21:38.654 --> 00:21:40.894
<v Speaker 0>So you're creating a new Restate service,

00:21:41.215 --> 00:21:42.414
<v Speaker 0>and there's a handler.

00:21:42.575 --> 00:21:44.580
<v Speaker 0>And then maybe we can just give people

00:21:44.580 --> 00:21:46.500
<v Speaker 0>a bit of context on what context dot

00:21:46.500 --> 00:21:48.660
<v Speaker 0>run means. I mean, this is how Restate

00:21:48.660 --> 00:21:50.980
<v Speaker 0>handles, what, side effects? Is that the right

00:21:50.980 --> 00:21:52.340
<v Speaker 0>way to put it? Yeah.

00:21:52.340 --> 00:21:54.500
<v Speaker 1>So things that you want to happen ideally

00:21:54.500 --> 00:21:55.140
<v Speaker 1>only once.

00:21:56.054 --> 00:21:58.294
<v Speaker 1>And once they've happened, we'll save the result,

00:21:58.294 --> 00:22:00.855
<v Speaker 1>and we would guarantee that on failure or,

00:22:00.855 --> 00:22:03.414
<v Speaker 1>you know, anything like that, it won't need

00:22:03.414 --> 00:22:04.855
<v Speaker 1>to happen again and its result will just

00:22:04.855 --> 00:22:05.654
<v Speaker 1>be filled in.

00:22:06.615 --> 00:22:07.334
<v Speaker 0>Nice.

00:22:07.575 --> 00:22:09.975
<v Speaker 0>And there's also the Java example sitting here

00:22:09.975 --> 00:22:11.600
<v Speaker 0>front and center, which has already hurt my

00:22:11.600 --> 00:22:13.520
<v Speaker 0>eyes. But, you know Yeah. That's the void.

00:22:13.520 --> 00:22:14.559
<v Speaker 1>Yeah. I

00:22:15.120 --> 00:22:17.040
<v Speaker 0>think that's an important I think that was

00:22:17.040 --> 00:22:18.080
<v Speaker 0>a really clever I don't know who it

00:22:18.080 --> 00:22:19.680
<v Speaker 0>restates, said list, you know, like, at Java

00:22:19.680 --> 00:22:22.240
<v Speaker 0>early. But, know, the enterprise world and the

00:22:22.240 --> 00:22:23.680
<v Speaker 0>Java world have been doing

00:22:24.595 --> 00:22:27.315
<v Speaker 0>BP and m and workflows and event driven

00:22:27.315 --> 00:22:29.554
<v Speaker 0>systems and actor driven system and all this

00:22:29.634 --> 00:22:32.355
<v Speaker 0>for decades. Like, this is not new paradigms

00:22:32.355 --> 00:22:33.715
<v Speaker 0>for them. So I think that's a really

00:22:33.715 --> 00:22:36.834
<v Speaker 0>slick move to just support that world completely.

00:22:37.315 --> 00:22:40.030
<v Speaker 1>Also, all of my founders, they built Apache

00:22:40.030 --> 00:22:41.870
<v Speaker 1>Flink, which is like a streaming system, which

00:22:41.870 --> 00:22:43.230
<v Speaker 1>is all written in Java.

00:22:43.470 --> 00:22:45.470
<v Speaker 1>So thank god Restate is not written in

00:22:45.470 --> 00:22:47.470
<v Speaker 1>Java because I personally really, really, really hate

00:22:47.470 --> 00:22:48.190
<v Speaker 1>Java.

00:22:48.270 --> 00:22:49.390
<v Speaker 1>But these

00:22:49.550 --> 00:22:51.230
<v Speaker 1>guys really know how to write Java, they

00:22:51.230 --> 00:22:52.830
<v Speaker 1>really understand that world. So I think it

00:22:52.830 --> 00:22:54.270
<v Speaker 1>was it was always a big priority for

00:22:54.270 --> 00:22:54.350
<v Speaker 1>us.

00:22:55.195 --> 00:22:57.915
<v Speaker 0>I think Java is is I don't think

00:22:57.995 --> 00:23:00.315
<v Speaker 0>I can't personally see it ever getting back

00:23:00.315 --> 00:23:03.595
<v Speaker 0>into developer hands. Like, developers are front forward

00:23:03.595 --> 00:23:05.835
<v Speaker 0>future facing, front facing, whatever you wanna say.

00:23:06.235 --> 00:23:08.429
<v Speaker 0>It just feels like legacy to me, but

00:23:08.429 --> 00:23:09.549
<v Speaker 0>then I am wearing a go t shirt.

00:23:09.549 --> 00:23:11.549
<v Speaker 0>I am writing Rusty and Day Out. I

00:23:11.549 --> 00:23:13.230
<v Speaker 0>am playing with shiny new languages. You know,

00:23:13.230 --> 00:23:14.510
<v Speaker 0>I could sit here and talk about pony

00:23:14.510 --> 00:23:15.950
<v Speaker 0>lang for the next six weeks, and nobody

00:23:15.950 --> 00:23:17.070
<v Speaker 0>would even know what the hell I'm talking

00:23:17.070 --> 00:23:18.669
<v Speaker 0>about. But it's a super cool language,

00:23:19.070 --> 00:23:20.669
<v Speaker 0>even if slightly academic.

00:23:21.549 --> 00:23:22.775
<v Speaker 0>And And I don't know if Java can

00:23:22.775 --> 00:23:24.775
<v Speaker 1>make is where where the work is getting

00:23:24.775 --> 00:23:27.255
<v Speaker 1>done for most of the world. And,

00:23:27.655 --> 00:23:29.735
<v Speaker 1>and I guess for us, like, the more

00:23:29.815 --> 00:23:30.695
<v Speaker 1>traditional,

00:23:31.095 --> 00:23:33.415
<v Speaker 1>your software systems are, like, the more excited

00:23:33.415 --> 00:23:34.455
<v Speaker 1>we are because

00:23:34.800 --> 00:23:36.000
<v Speaker 1>I think we have a huge amount of

00:23:36.000 --> 00:23:37.600
<v Speaker 1>value to people that are cloud native, many

00:23:37.600 --> 00:23:39.680
<v Speaker 1>of those people have already learned how to

00:23:39.680 --> 00:23:41.680
<v Speaker 1>solve these problems that I'm discussing. I think

00:23:41.680 --> 00:23:44.160
<v Speaker 1>they can solve them easier with Restate. But

00:23:44.160 --> 00:23:45.920
<v Speaker 1>there's another group of people that it's like,

00:23:45.920 --> 00:23:47.360
<v Speaker 1>they are actually struggling to get off of

00:23:47.360 --> 00:23:48.880
<v Speaker 1>mainframes or they are struggling to get off

00:23:48.880 --> 00:23:49.520
<v Speaker 1>of monoliths.

00:23:50.005 --> 00:23:52.325
<v Speaker 1>And for me, like, that's even more exciting

00:23:52.325 --> 00:23:54.085
<v Speaker 1>because there's so much value to be unlocked

00:23:54.085 --> 00:23:56.085
<v Speaker 1>there if we can help them do those

00:23:56.085 --> 00:23:56.565
<v Speaker 1>things.

00:23:58.005 --> 00:24:00.645
<v Speaker 0>Alright. Awesome. I'm gonna pick one more randomly

00:24:00.645 --> 00:24:02.165
<v Speaker 0>just to see what code it gives us.

00:24:02.830 --> 00:24:05.149
<v Speaker 0>I mentioned state machines, so let's pop that

00:24:05.149 --> 00:24:07.230
<v Speaker 0>open. So this one actually has a state

00:24:07.230 --> 00:24:08.269
<v Speaker 0>machine example

00:24:08.830 --> 00:24:10.990
<v Speaker 0>implemented with a switch case. Not the worst

00:24:10.990 --> 00:24:12.589
<v Speaker 0>way to do it. So

00:24:14.029 --> 00:24:15.710
<v Speaker 1>there's actually something coming out this week. I

00:24:15.710 --> 00:24:17.235
<v Speaker 1>don't know if you you've used xState, The

00:24:17.395 --> 00:24:18.675
<v Speaker 0>Yeah. I love x state. I use it

00:24:18.675 --> 00:24:19.554
<v Speaker 0>all of them. So

00:24:20.355 --> 00:24:22.275
<v Speaker 1>we have made it possible to turn any

00:24:22.275 --> 00:24:24.835
<v Speaker 1>x state state machine into a Restate service,

00:24:24.915 --> 00:24:26.595
<v Speaker 1>and it can run serverless.

00:24:26.595 --> 00:24:29.395
<v Speaker 1>So you can have these, like, virtual state

00:24:29.395 --> 00:24:31.555
<v Speaker 1>machines running in the cloud invisibly

00:24:31.870 --> 00:24:34.429
<v Speaker 1>and move between these different states, and we

00:24:34.429 --> 00:24:36.029
<v Speaker 1>will just store all the results. But the

00:24:36.029 --> 00:24:37.870
<v Speaker 1>the critical primitive here that you can see

00:24:37.870 --> 00:24:39.710
<v Speaker 1>is context dot set. So

00:24:40.190 --> 00:24:42.190
<v Speaker 1>Restate has a type of service called a

00:24:42.190 --> 00:24:44.750
<v Speaker 1>virtual object, and those objects have a key.

00:24:45.495 --> 00:24:47.575
<v Speaker 1>And therefore, in a sense, they have, like,

00:24:47.575 --> 00:24:49.815
<v Speaker 1>unlimited number of objects. Each one kind of

00:24:49.815 --> 00:24:51.174
<v Speaker 1>has its own state,

00:24:51.655 --> 00:24:54.055
<v Speaker 1>and that's durable. That persists beyond the handler.

00:24:54.055 --> 00:24:55.815
<v Speaker 1>I mean, it can exist forever. So you

00:24:55.815 --> 00:24:57.335
<v Speaker 1>could use it where you would use Redis.

00:24:57.570 --> 00:24:59.409
<v Speaker 1>You could even use it where you would

00:24:59.409 --> 00:25:02.210
<v Speaker 1>use Dynamo or, like, any other database just

00:25:02.210 --> 00:25:03.729
<v Speaker 1>to keep how you store, essentially.

00:25:05.169 --> 00:25:05.729
<v Speaker 1>And

00:25:06.130 --> 00:25:07.570
<v Speaker 1>what's cool is

00:25:07.730 --> 00:25:10.690
<v Speaker 1>you have, like, guaranteed lock over that state

00:25:10.690 --> 00:25:13.515
<v Speaker 1>while your handler is running, and that makes

00:25:13.515 --> 00:25:14.875
<v Speaker 1>a lot of things a lot easier. But

00:25:14.875 --> 00:25:17.275
<v Speaker 1>because it's specifically on that key, you're not,

00:25:17.275 --> 00:25:19.035
<v Speaker 1>like, locking a whole table or anything like

00:25:19.035 --> 00:25:20.875
<v Speaker 1>that, and that makes that makes this quite

00:25:20.875 --> 00:25:22.555
<v Speaker 1>simple to reason about when you're dealing with,

00:25:22.555 --> 00:25:24.875
<v Speaker 1>like, distributed state. So for state machine, it

00:25:24.875 --> 00:25:26.075
<v Speaker 1>just means you can just, like, write

00:25:26.770 --> 00:25:28.210
<v Speaker 1>the various fields down.

00:25:28.530 --> 00:25:30.529
<v Speaker 1>But if you wanna do things really fancy,

00:25:30.530 --> 00:25:32.690
<v Speaker 1>we now have this x state integration. And

00:25:32.929 --> 00:25:34.530
<v Speaker 1>and there, what we do is we just

00:25:34.530 --> 00:25:37.010
<v Speaker 1>basically save the whole state of the x

00:25:37.010 --> 00:25:39.410
<v Speaker 1>state state machine to a JSON blob, and

00:25:39.410 --> 00:25:41.330
<v Speaker 1>then we rehydrate it whenever the next event

00:25:41.330 --> 00:25:41.730
<v Speaker 1>comes in.

00:25:42.835 --> 00:25:43.794
<v Speaker 0>That's awesome.

00:25:44.274 --> 00:25:46.034
<v Speaker 0>The reason I like Restate is because the

00:25:46.034 --> 00:25:48.514
<v Speaker 0>company behind it has the the ability to

00:25:48.514 --> 00:25:50.274
<v Speaker 0>actually visualize the state machines in a really

00:25:50.274 --> 00:25:52.274
<v Speaker 0>nice way, which is great for documentation.

00:25:52.674 --> 00:25:53.634
<v Speaker 1>Absolutely.

00:25:53.715 --> 00:25:55.715
<v Speaker 1>And I think we we would also like

00:25:55.715 --> 00:25:57.620
<v Speaker 1>to have more in this regard because Restate

00:25:57.620 --> 00:25:59.380
<v Speaker 1>has a lot of information about what applications

00:25:59.380 --> 00:26:01.380
<v Speaker 1>are doing. We understand these steps,

00:26:01.860 --> 00:26:03.460
<v Speaker 1>you know, the run steps and also the

00:26:03.460 --> 00:26:04.820
<v Speaker 1>calls between services.

00:26:05.220 --> 00:26:06.660
<v Speaker 1>You know, it's actually quite hard to create

00:26:06.660 --> 00:26:08.420
<v Speaker 1>a call graph between all of your services.

00:26:08.420 --> 00:26:09.460
<v Speaker 1>You can kinda get it out of this

00:26:09.460 --> 00:26:10.420
<v Speaker 1>deal and void whatever.

00:26:11.515 --> 00:26:13.515
<v Speaker 1>But, like, we have all of this information,

00:26:14.395 --> 00:26:16.635
<v Speaker 1>also what you're storing and reading from the

00:26:16.635 --> 00:26:17.914
<v Speaker 1>the key value store.

00:26:18.235 --> 00:26:18.794
<v Speaker 1>So

00:26:19.115 --> 00:26:20.795
<v Speaker 1>we think we could do a really cool

00:26:20.795 --> 00:26:21.755
<v Speaker 1>visualization.

00:26:21.835 --> 00:26:23.755
<v Speaker 0>So you're gonna provide Amonzo

00:26:23.755 --> 00:26:25.860
<v Speaker 0>Death Star as a service for people to

00:26:25.860 --> 00:26:27.540
<v Speaker 0>allow them to have their own image of

00:26:27.540 --> 00:26:28.500
<v Speaker 0>their architecture.

00:26:28.900 --> 00:26:30.980
<v Speaker 1>Yeah. Maybe the cool graph, but also, like,

00:26:30.980 --> 00:26:32.500
<v Speaker 1>for individual implication,

00:26:32.500 --> 00:26:34.420
<v Speaker 1>what happened? Like, what did it do? Where

00:26:34.420 --> 00:26:35.860
<v Speaker 1>did it fail? A little bit like step

00:26:35.860 --> 00:26:37.220
<v Speaker 1>function. This is what people love about step

00:26:37.220 --> 00:26:38.820
<v Speaker 1>functions. They just hate everything else.

00:26:39.625 --> 00:26:41.705
<v Speaker 1>Yeah. So that's what I would like to

00:26:41.705 --> 00:26:42.664
<v Speaker 1>have for sure.

00:26:43.304 --> 00:26:45.465
<v Speaker 0>Alright. Before we we start typing code, there's

00:26:45.465 --> 00:26:46.905
<v Speaker 0>just one other thing that you said that

00:26:46.905 --> 00:26:49.225
<v Speaker 0>I wish was interesting. Right? And you said

00:26:49.225 --> 00:26:51.304
<v Speaker 0>that there's locking that happens on the key

00:26:51.304 --> 00:26:51.705
<v Speaker 0>level.

00:26:52.630 --> 00:26:55.190
<v Speaker 0>So does that mean being built in rush,

00:26:55.190 --> 00:26:58.150
<v Speaker 0>you're hooking on to, like, I'm assuming Axiom

00:26:58.150 --> 00:27:00.710
<v Speaker 0>or some of the other actor primitives

00:27:00.870 --> 00:27:04.070
<v Speaker 0>there to give every key message box with

00:27:04.275 --> 00:27:06.595
<v Speaker 0>like, if I say update this thing and

00:27:06.595 --> 00:27:08.115
<v Speaker 0>then another request comes in, this is update

00:27:08.115 --> 00:27:10.355
<v Speaker 0>this thing. You're not dismissing the second one.

00:27:10.355 --> 00:27:13.235
<v Speaker 0>It's getting queued and then executed after. Right?

00:27:13.235 --> 00:27:14.835
<v Speaker 0>Okay. I think the right way to think

00:27:14.835 --> 00:27:18.010
<v Speaker 1>about it is it's as if these RPCs

00:27:18.010 --> 00:27:20.490
<v Speaker 1>are going through Kafka in both directions.

00:27:21.450 --> 00:27:24.010
<v Speaker 1>But the critical difference, and really wouldn't work

00:27:24.170 --> 00:27:26.090
<v Speaker 1>very well with Kafka, is that Kafka would

00:27:26.090 --> 00:27:29.290
<v Speaker 1>have partitions to have many keys. Mhmm. And

00:27:29.290 --> 00:27:29.930
<v Speaker 1>a single

00:27:30.825 --> 00:27:33.705
<v Speaker 1>stuck request or failing request or whatever would

00:27:33.705 --> 00:27:35.625
<v Speaker 1>block the whole partition. And you might only

00:27:35.625 --> 00:27:37.544
<v Speaker 1>have, I don't know, 64 partitions or something.

00:27:37.544 --> 00:27:39.304
<v Speaker 1>So Restate, we don't have header line blocking

00:27:39.304 --> 00:27:41.625
<v Speaker 1>like that. So you can only block the

00:27:41.625 --> 00:27:44.105
<v Speaker 1>key, which would be the user ID or

00:27:44.105 --> 00:27:45.465
<v Speaker 1>whatever. So a user can be in a

00:27:45.465 --> 00:27:46.264
<v Speaker 1>bad state,

00:27:46.585 --> 00:27:47.840
<v Speaker 1>but not a whole partition. And if you

00:27:47.840 --> 00:27:49.840
<v Speaker 1>ever managed Kafka, you would know that these

00:27:49.840 --> 00:27:52.560
<v Speaker 1>block partitions are, like, bane of your life.

00:27:52.560 --> 00:27:54.240
<v Speaker 0>Yep. I've been there. So,

00:27:55.040 --> 00:27:56.720
<v Speaker 1>yeah, so that that's what makes it kind

00:27:56.720 --> 00:27:58.400
<v Speaker 1>of possible for for us to not have

00:27:58.400 --> 00:28:00.480
<v Speaker 1>these, like, nasty side effects between different users.

00:28:02.045 --> 00:28:04.125
<v Speaker 1>So, yeah, it's a it's a pattern I've

00:28:04.125 --> 00:28:05.645
<v Speaker 1>actually seen is that people have an RPC

00:28:05.645 --> 00:28:08.045
<v Speaker 1>framework where all requests and responses go through

00:28:08.045 --> 00:28:10.205
<v Speaker 1>a queue. And that that's essentially the primitive

00:28:10.205 --> 00:28:11.245
<v Speaker 1>of how it works, and it gives you

00:28:11.245 --> 00:28:12.284
<v Speaker 1>this really nice

00:28:12.525 --> 00:28:13.565
<v Speaker 1>linearizability

00:28:13.830 --> 00:28:15.349
<v Speaker 1>over a particular user.

00:28:15.830 --> 00:28:17.909
<v Speaker 1>Like, for a particular key on a particular

00:28:17.909 --> 00:28:20.390
<v Speaker 1>service, they will process every request in sequence.

00:28:20.390 --> 00:28:22.149
<v Speaker 1>And that that actually just makes life a

00:28:22.149 --> 00:28:24.309
<v Speaker 1>lot easier. It doesn't, in my experience, have

00:28:24.309 --> 00:28:27.005
<v Speaker 1>a significant performance impact. And we also have

00:28:27.005 --> 00:28:29.164
<v Speaker 1>these shared handlers that get a read only

00:28:29.164 --> 00:28:31.164
<v Speaker 1>view of a snapshot of state,

00:28:32.125 --> 00:28:33.565
<v Speaker 1>and they can run concurrently.

00:28:34.284 --> 00:28:34.924
<v Speaker 1>And

00:28:35.485 --> 00:28:37.565
<v Speaker 1>even if you're not doing things with state,

00:28:37.565 --> 00:28:39.410
<v Speaker 1>this just gives you, like, a lock primitive,

00:28:39.410 --> 00:28:40.610
<v Speaker 1>basically. It gives you, like, a little bit

00:28:40.610 --> 00:28:42.210
<v Speaker 1>of a read write lock primitive,

00:28:42.450 --> 00:28:44.210
<v Speaker 1>where you can have some handlers that will

00:28:44.210 --> 00:28:44.850
<v Speaker 1>always

00:28:45.010 --> 00:28:47.010
<v Speaker 1>run only one at a time and some

00:28:47.010 --> 00:28:48.770
<v Speaker 1>handlers that can run concurrently, and this is

00:28:48.770 --> 00:28:49.010
<v Speaker 1>just

00:28:49.809 --> 00:28:50.529
<v Speaker 1>generally,

00:28:50.610 --> 00:28:51.970
<v Speaker 1>that's all you need, I find.

00:28:52.865 --> 00:28:53.745
<v Speaker 0>Awesome.

00:28:54.225 --> 00:28:56.225
<v Speaker 0>Alright. I'll show off the nice diagrams, talk

00:28:56.225 --> 00:28:58.065
<v Speaker 0>about Rust a little bit more, and then

00:28:58.065 --> 00:29:00.705
<v Speaker 0>let's get into the docs. Okay. Alright.

00:29:01.825 --> 00:29:03.505
<v Speaker 0>So our plan today

00:29:03.825 --> 00:29:05.345
<v Speaker 0>is really to get people a taste of

00:29:05.345 --> 00:29:07.190
<v Speaker 0>how they get started with Restate. What that

00:29:07.190 --> 00:29:09.830
<v Speaker 0>local developer experience looks like, how they write

00:29:09.830 --> 00:29:12.390
<v Speaker 0>their first durable function,

00:29:12.870 --> 00:29:14.310
<v Speaker 0>and then we'll try and later on a

00:29:14.310 --> 00:29:16.470
<v Speaker 0>little bit explore new things. So especially trying

00:29:16.470 --> 00:29:18.470
<v Speaker 0>to get the concepts and the primitives in

00:29:18.470 --> 00:29:20.070
<v Speaker 0>there so that people can just understand that

00:29:20.070 --> 00:29:22.595
<v Speaker 0>lingo and then Mhmm. Hopefully start to build

00:29:22.595 --> 00:29:23.154
<v Speaker 0>something.

00:29:23.715 --> 00:29:26.115
<v Speaker 1>Sounds good. And we said we'd start with

00:29:26.115 --> 00:29:26.914
<v Speaker 0>TypeScript.

00:29:26.995 --> 00:29:28.595
<v Speaker 0>I mean, is there a magic link for

00:29:28.595 --> 00:29:30.034
<v Speaker 0>me to get a Rust SDK? I'm just

00:29:30.034 --> 00:29:31.474
<v Speaker 0>asking. I'm not saying we do it.

00:29:31.875 --> 00:29:33.154
<v Speaker 1>Not in the docs,

00:29:33.235 --> 00:29:34.995
<v Speaker 1>but, you know, maybe soon. I'll send you

00:29:34.995 --> 00:29:35.154
<v Speaker 1>something.

00:29:36.320 --> 00:29:39.440
<v Speaker 0>Right. Okay. Now, from my end, and I

00:29:39.440 --> 00:29:41.120
<v Speaker 0>should have done this in advance, is I

00:29:41.120 --> 00:29:42.960
<v Speaker 0>will need to set up a couple of

00:29:42.960 --> 00:29:45.200
<v Speaker 0>things because I am on Nexus and I

00:29:45.200 --> 00:29:47.280
<v Speaker 0>can't just download planaries like an idiot.

00:29:48.175 --> 00:29:49.215
<v Speaker 1>Of course not.

00:29:51.215 --> 00:29:52.414
<v Speaker 0>I really yeah.

00:29:54.655 --> 00:29:56.895
<v Speaker 1>The daily experience here, I imagine.

00:29:58.415 --> 00:29:59.135
<v Speaker 0>No. I mean,

00:30:01.230 --> 00:30:03.150
<v Speaker 0>within my own repository, like, I have my

00:30:03.390 --> 00:30:04.990
<v Speaker 0>I use dev env, which gives you this

00:30:04.990 --> 00:30:06.509
<v Speaker 0>wonderful load next file.

00:30:06.990 --> 00:30:09.070
<v Speaker 0>Mhmm. And I use Progen, which generates new

00:30:09.070 --> 00:30:11.070
<v Speaker 0>services for me with everything I need. So

00:30:11.070 --> 00:30:12.749
<v Speaker 0>it's just I've got it all down.

00:30:13.309 --> 00:30:14.350
<v Speaker 0>But I don't like to do too much

00:30:14.350 --> 00:30:15.950
<v Speaker 0>in advance before these sessions, but then this

00:30:15.950 --> 00:30:18.075
<v Speaker 0>is important for the audience. This is just

00:30:18.955 --> 00:30:20.635
<v Speaker 0>me being annoyed. So

00:30:21.035 --> 00:30:22.635
<v Speaker 0>and I'm

00:30:22.635 --> 00:30:25.195
<v Speaker 0>gonna enable TypeScript and JavaScript. We actually don't

00:30:25.195 --> 00:30:26.394
<v Speaker 0>need anything else

00:30:27.195 --> 00:30:28.315
<v Speaker 0>from next.

00:30:29.930 --> 00:30:32.250
<v Speaker 0>And what I love now why have I

00:30:32.250 --> 00:30:33.930
<v Speaker 0>got so many spaces? Oh, there's my mono

00:30:33.930 --> 00:30:35.690
<v Speaker 0>repository because I was working on it this

00:30:35.690 --> 00:30:36.570
<v Speaker 0>morning. Mhmm.

00:30:37.450 --> 00:30:39.450
<v Speaker 0>And then I hit return, and now I

00:30:39.450 --> 00:30:40.330
<v Speaker 0>should have

00:30:41.610 --> 00:30:41.930
<v Speaker 0>node.

00:30:42.655 --> 00:30:44.975
<v Speaker 0>Nice. But I won't have NPM because I

00:30:44.975 --> 00:30:46.335
<v Speaker 0>forgot to do

00:30:48.095 --> 00:30:49.134
<v Speaker 0>NPM.

00:30:49.455 --> 00:30:51.215
<v Speaker 0>Now, normally, I would use button, but I'm

00:30:51.215 --> 00:30:52.895
<v Speaker 0>not gonna rock the boat that much today.

00:30:52.895 --> 00:30:54.575
<v Speaker 0>So It does actually work, by the way,

00:30:54.575 --> 00:30:55.055
<v Speaker 1>for the record.

00:30:57.019 --> 00:30:57.659
<v Speaker 0>I

00:30:57.820 --> 00:30:59.500
<v Speaker 0>I I just think bun is such a

00:30:59.500 --> 00:31:01.820
<v Speaker 0>pleasant tool to Yeah. It's so much easier

00:31:01.820 --> 00:31:03.740
<v Speaker 1>to just do bun run for everything. Yeah.

00:31:03.740 --> 00:31:05.659
<v Speaker 1>I use it also for demos a lot.

00:31:06.220 --> 00:31:06.779
<v Speaker 0>Yeah.

00:31:07.100 --> 00:31:09.899
<v Speaker 0>But I wanna the docs are using MPX,

00:31:10.024 --> 00:31:12.424
<v Speaker 0>so I wanna just stick with what the

00:31:12.424 --> 00:31:14.424
<v Speaker 0>docs are doing. Yeah. Keep it simple. Yeah.

00:31:14.424 --> 00:31:16.505
<v Speaker 0>So this gives us our first example, which

00:31:16.505 --> 00:31:18.584
<v Speaker 0>is just gonna create a greeter function,

00:31:19.225 --> 00:31:21.065
<v Speaker 0>and we can just run these commands like

00:31:21.065 --> 00:31:21.384
<v Speaker 0>so.

00:31:25.370 --> 00:31:27.450
<v Speaker 0>There there are a whole bunch of examples

00:31:27.450 --> 00:31:29.370
<v Speaker 0>and templates. Right? And if people want to

00:31:29.370 --> 00:31:30.809
<v Speaker 0>see what else is available,

00:31:31.850 --> 00:31:33.929
<v Speaker 0>they come to this examples repository?

00:31:34.250 --> 00:31:35.289
<v Speaker 1>Yeah. Exactly.

00:31:35.370 --> 00:31:38.375
<v Speaker 0>And the templates are here. So Yeah. So,

00:31:38.375 --> 00:31:39.815
<v Speaker 1>also, you can get these templates from the

00:31:39.815 --> 00:31:41.655
<v Speaker 1>Restate CLI. So I guess we'll download that

00:31:41.655 --> 00:31:43.015
<v Speaker 1>a little bit later. But once you have

00:31:43.015 --> 00:31:45.095
<v Speaker 1>that, you can just do Restate Example,

00:31:45.335 --> 00:31:47.335
<v Speaker 1>and it can give you, like, a starter

00:31:47.335 --> 00:31:49.095
<v Speaker 1>TypeScript repo or it can give you a

00:31:49.095 --> 00:31:51.255
<v Speaker 1>starter go or or or really anything. And

00:31:51.255 --> 00:31:52.455
<v Speaker 1>that that's often a good way to get

00:31:52.455 --> 00:31:52.695
<v Speaker 1>started.

00:31:53.390 --> 00:31:54.269
<v Speaker 0>Nice.

00:31:55.149 --> 00:31:57.070
<v Speaker 0>Alright. Let's see where we are. We've got

00:31:57.070 --> 00:31:59.549
<v Speaker 0>stuff and things. I've got my code. And

00:31:59.950 --> 00:32:02.190
<v Speaker 0>if I pull up this template here

00:32:04.350 --> 00:32:05.549
<v Speaker 0>let me oh,

00:32:05.950 --> 00:32:06.990
<v Speaker 0>I mean, that's the only way to do

00:32:06.990 --> 00:32:07.149
<v Speaker 0>it.

00:32:07.975 --> 00:32:09.734
<v Speaker 0>Just change the font size.

00:32:10.054 --> 00:32:12.054
<v Speaker 0>24 doesn't feel enough today.

00:32:13.174 --> 00:32:15.014
<v Speaker 0>Yeah. It's better. It's good.

00:32:15.335 --> 00:32:16.934
<v Speaker 0>Do you wanna just walk us through what's

00:32:16.934 --> 00:32:18.375
<v Speaker 0>happening here? Then we'll run it and give

00:32:18.375 --> 00:32:20.215
<v Speaker 0>people an idea of what's happening what what

00:32:20.215 --> 00:32:23.090
<v Speaker 0>it looks like. Absolutely. Yeah. Okay. So,

00:32:23.330 --> 00:32:25.169
<v Speaker 1>yeah, let's start at the bottom. So we

00:32:25.169 --> 00:32:27.649
<v Speaker 1>are creating a new Restate endpoint.

00:32:27.890 --> 00:32:29.729
<v Speaker 1>What we really mean by that is, like,

00:32:29.890 --> 00:32:30.529
<v Speaker 1>essentially

00:32:30.850 --> 00:32:33.650
<v Speaker 1>a process running on a port, but actually

00:32:33.650 --> 00:32:35.490
<v Speaker 1>behind that, there can be any number of

00:32:35.490 --> 00:32:36.835
<v Speaker 1>services. This This is a little bit like

00:32:36.835 --> 00:32:38.434
<v Speaker 1>a sort of gRPC server,

00:32:38.515 --> 00:32:40.355
<v Speaker 1>and all of Restate has these, like, RPC

00:32:40.355 --> 00:32:41.794
<v Speaker 1>stuff semantics.

00:32:42.195 --> 00:32:44.914
<v Speaker 1>And we bind to that endpoint a service,

00:32:45.475 --> 00:32:46.754
<v Speaker 1>which we create in line.

00:32:47.315 --> 00:32:49.635
<v Speaker 1>So we mentioned before that there are virtual

00:32:49.635 --> 00:32:52.229
<v Speaker 1>objects. There are also services which are unkeyed

00:32:52.470 --> 00:32:53.990
<v Speaker 1>and don't have state. And then there are

00:32:53.990 --> 00:32:55.029
<v Speaker 1>also workflows,

00:32:55.029 --> 00:32:57.110
<v Speaker 1>which are kind of an interesting special case

00:32:57.110 --> 00:32:59.029
<v Speaker 1>of virtual objects that can be very useful.

00:33:00.149 --> 00:33:03.164
<v Speaker 1>So we create a new service, and we

00:33:03.164 --> 00:33:05.085
<v Speaker 1>define it as having the name greeter, and

00:33:05.085 --> 00:33:06.445
<v Speaker 1>we give it one handler.

00:33:07.325 --> 00:33:09.325
<v Speaker 1>And that handler is greet, and the greet

00:33:09.325 --> 00:33:10.124
<v Speaker 1>handler

00:33:10.365 --> 00:33:12.284
<v Speaker 1>a handler really is just any function that

00:33:12.284 --> 00:33:13.004
<v Speaker 1>accepts

00:33:13.164 --> 00:33:14.284
<v Speaker 1>the context

00:33:14.284 --> 00:33:16.620
<v Speaker 1>or for a staple handler. It might be

00:33:16.620 --> 00:33:17.740
<v Speaker 1>an object context,

00:33:18.860 --> 00:33:19.419
<v Speaker 1>and

00:33:19.740 --> 00:33:21.820
<v Speaker 1>any input parameter can be a string, can

00:33:21.820 --> 00:33:23.260
<v Speaker 1>be an object with fields. It doesn't really

00:33:23.260 --> 00:33:24.780
<v Speaker 1>matter. This is all gonna be encoded by

00:33:24.780 --> 00:33:27.179
<v Speaker 1>default with JSON, but this is also configurable.

00:33:27.820 --> 00:33:29.820
<v Speaker 1>And then handlers can just return or throw.

00:33:30.245 --> 00:33:31.925
<v Speaker 1>So it's quite a simple way of defining

00:33:31.925 --> 00:33:34.325
<v Speaker 1>handlers. It's probably recognizable if you've come from,

00:33:34.325 --> 00:33:35.684
<v Speaker 1>like, the tRPC world.

00:33:36.085 --> 00:33:38.725
<v Speaker 1>Yep. And through TypeScript type magic,

00:33:38.965 --> 00:33:40.325
<v Speaker 1>exactly like tRPC,

00:33:40.805 --> 00:33:44.405
<v Speaker 1>you can have clients for other services and

00:33:44.405 --> 00:33:46.260
<v Speaker 1>the types kind of all work, which is

00:33:46.260 --> 00:33:48.180
<v Speaker 1>really nice. And actually, in many ways, it's

00:33:48.180 --> 00:33:49.780
<v Speaker 1>a better experience than almost any other language

00:33:49.780 --> 00:33:51.540
<v Speaker 1>we have an SDK for because TypeScript is

00:33:51.540 --> 00:33:53.620
<v Speaker 1>so powerful for this Yeah.

00:33:54.180 --> 00:33:55.780
<v Speaker 1>Which is really cool. So, yeah, that's it.

00:33:55.780 --> 00:33:56.980
<v Speaker 1>And then at the end, we're listening on

00:33:56.980 --> 00:33:58.340
<v Speaker 1>ninety eighty, which is the port that we

00:33:58.340 --> 00:34:00.275
<v Speaker 1>we tend to use. And the way Restate

00:34:00.275 --> 00:34:02.674
<v Speaker 1>works from architecture perspective, I I recognize I

00:34:02.674 --> 00:34:03.715
<v Speaker 1>didn't say this before,

00:34:04.035 --> 00:34:07.075
<v Speaker 1>Restate calls your services. So it's not quite

00:34:07.075 --> 00:34:08.594
<v Speaker 1>like a queue in the sense that you

00:34:08.594 --> 00:34:10.994
<v Speaker 1>create workers and, like, pull down messages and

00:34:10.994 --> 00:34:11.475
<v Speaker 1>process them.

00:34:12.210 --> 00:34:14.530
<v Speaker 1>You can actually run your pods,

00:34:14.530 --> 00:34:16.690
<v Speaker 1>like, kind of fairly normally, including behind load

00:34:16.690 --> 00:34:17.410
<v Speaker 1>balances,

00:34:17.489 --> 00:34:19.250
<v Speaker 1>and Restate will just call them over HTTP

00:34:19.250 --> 00:34:21.969
<v Speaker 1>two. But you don't call your services directly.

00:34:22.210 --> 00:34:23.969
<v Speaker 1>It needs to be called through re the,

00:34:23.969 --> 00:34:26.435
<v Speaker 1>like, the Restate binary because Restate is doing

00:34:26.435 --> 00:34:28.675
<v Speaker 1>this, like, magical stuff behind the scenes.

00:34:29.875 --> 00:34:31.395
<v Speaker 1>And and in fact, you can have a

00:34:31.395 --> 00:34:33.875
<v Speaker 1>long lived HTTP request to Restate, and it

00:34:33.875 --> 00:34:36.275
<v Speaker 1>might make lots of short invocations to your

00:34:36.275 --> 00:34:38.675
<v Speaker 1>underlying service. It might be making Lambda invocations.

00:34:38.670 --> 00:34:40.270
<v Speaker 1>You know, there might be thousands of such

00:34:40.270 --> 00:34:42.109
<v Speaker 1>invocations, but to you, it just looks like

00:34:42.109 --> 00:34:44.830
<v Speaker 1>a sim simple, you know, HTTP request.

00:34:45.549 --> 00:34:47.710
<v Speaker 1>So that's that's roughly how the protocol works.

00:34:48.589 --> 00:34:50.590
<v Speaker 1>Yeah. In this case, we're serving on ITT.

00:34:51.309 --> 00:34:51.949
<v Speaker 0>Thanks.

00:34:53.824 --> 00:34:56.224
<v Speaker 0>So I'm gonna just copy this because there's

00:34:56.224 --> 00:34:58.144
<v Speaker 0>one thing I think we'll say, right, is

00:34:58.144 --> 00:34:58.705
<v Speaker 0>that

00:34:59.105 --> 00:35:00.705
<v Speaker 0>Restate isn't particularly

00:35:04.224 --> 00:35:06.560
<v Speaker 0>opinionated in how you structure your codes. Like

00:35:06.560 --> 00:35:08.240
<v Speaker 0>like you said, you write your code your

00:35:08.240 --> 00:35:10.240
<v Speaker 0>own way. Right? So if I call this

00:35:11.200 --> 00:35:13.200
<v Speaker 0>Scotland, I will need to obviously go and

00:35:13.200 --> 00:35:14.480
<v Speaker 0>Restate again,

00:35:15.520 --> 00:35:17.119
<v Speaker 0>is that you can just structure your code

00:35:17.119 --> 00:35:19.280
<v Speaker 0>however you want. I'm exporting this function.

00:35:20.035 --> 00:35:21.395
<v Speaker 0>I can then import

00:35:22.675 --> 00:35:23.715
<v Speaker 0>Scotland,

00:35:24.515 --> 00:35:26.115
<v Speaker 0>and then we can just layer on these

00:35:26.115 --> 00:35:28.755
<v Speaker 0>bindings, right, to add of course, many services

00:35:28.755 --> 00:35:31.155
<v Speaker 0>as as we want. So Yeah. Absolutely.

00:35:34.280 --> 00:35:36.280
<v Speaker 1>Or you can indeed you can define the

00:35:36.280 --> 00:35:38.040
<v Speaker 1>Restate dot service in the other file and

00:35:38.040 --> 00:35:39.480
<v Speaker 1>import that, all that sort of thing. The

00:35:39.480 --> 00:35:41.080
<v Speaker 1>only thing you need to be cautious of

00:35:41.160 --> 00:35:43.000
<v Speaker 1>is when you are trying to just have

00:35:43.000 --> 00:35:44.520
<v Speaker 1>a client for a service,

00:35:44.760 --> 00:35:46.520
<v Speaker 1>you generally wanna make sure you're only importing

00:35:46.520 --> 00:35:47.160
<v Speaker 1>types

00:35:47.395 --> 00:35:49.395
<v Speaker 1>and don't import the whole file because otherwise

00:35:49.395 --> 00:35:51.475
<v Speaker 1>at runtime, you could be importing all of

00:35:51.475 --> 00:35:52.675
<v Speaker 1>the handlers,

00:35:52.835 --> 00:35:54.995
<v Speaker 1>which maybe doesn't matter. But if you have,

00:35:54.995 --> 00:35:56.435
<v Speaker 1>like, a large mono repo, it will start

00:35:56.435 --> 00:35:57.155
<v Speaker 1>to matter.

00:35:57.475 --> 00:35:59.315
<v Speaker 1>So this is actually also quite similar to

00:35:59.315 --> 00:36:00.675
<v Speaker 1>CRPC the way we've approached it.

00:36:02.670 --> 00:36:05.550
<v Speaker 0>Alright. I'm just gonna make this different so

00:36:05.550 --> 00:36:06.750
<v Speaker 0>we can call these.

00:36:07.230 --> 00:36:07.710
<v Speaker 0>Mhmm.

00:36:10.670 --> 00:36:12.030
<v Speaker 0>Well, I don't know how to get a

00:36:12.030 --> 00:36:12.750
<v Speaker 0>whiskey emoji.

00:36:17.525 --> 00:36:19.045
<v Speaker 0>There we go. I had to giggle it.

00:36:19.045 --> 00:36:21.125
<v Speaker 0>That's unbelievable. Yeah. The movie picker wasn't working.

00:36:21.285 --> 00:36:21.925
<v Speaker 0>Idea.

00:36:22.964 --> 00:36:24.725
<v Speaker 0>I wonder if I could just have said

00:36:25.204 --> 00:36:26.405
<v Speaker 0>whiskey emoji,

00:36:26.645 --> 00:36:27.444
<v Speaker 0>mister AI.

00:36:29.270 --> 00:36:30.070
<v Speaker 1>Woah.

00:36:30.070 --> 00:36:30.710
<v Speaker 1>Okay.

00:36:31.030 --> 00:36:33.270
<v Speaker 1>That's very cool. I don't have any AI

00:36:33.270 --> 00:36:34.310
<v Speaker 1>systems. So

00:36:35.270 --> 00:36:36.310
<v Speaker 0>Yeah.

00:36:36.310 --> 00:36:37.990
<v Speaker 0>Copilot is fantastic.

00:36:38.230 --> 00:36:39.750
<v Speaker 0>I happen to in to explore

00:36:40.230 --> 00:36:42.310
<v Speaker 0>other ones, but because I was writing Versus

00:36:42.310 --> 00:36:44.675
<v Speaker 0>code, I just Mhmm. It's it's For sure.

00:36:44.835 --> 00:36:46.035
<v Speaker 0>Okay. So

00:36:46.275 --> 00:36:48.835
<v Speaker 0>let's go back to the documentation. Right? So

00:36:50.275 --> 00:36:52.275
<v Speaker 0>we did this, and then all we need

00:36:52.275 --> 00:36:54.355
<v Speaker 0>to do to run this new service is

00:36:54.355 --> 00:36:57.190
<v Speaker 0>to do an NPM run app dev. Now

00:36:57.190 --> 00:36:59.670
<v Speaker 0>the app dev, I'm assuming, is just a

00:36:59.670 --> 00:37:02.310
<v Speaker 0>script in our package. Yep. Yep. It's using

00:37:02.310 --> 00:37:03.510
<v Speaker 1>TS node dev.

00:37:04.230 --> 00:37:04.950
<v Speaker 0>K.

00:37:05.270 --> 00:37:06.550
<v Speaker 0>So NPM

00:37:06.870 --> 00:37:07.750
<v Speaker 0>NPM

00:37:07.750 --> 00:37:09.270
<v Speaker 0>run app dev.

00:37:10.674 --> 00:37:12.674
<v Speaker 0>Now is is that enough? Are we are

00:37:12.674 --> 00:37:13.715
<v Speaker 0>we are we working?

00:37:14.515 --> 00:37:16.835
<v Speaker 1>No. Because we need to run Restate. Otherwise,

00:37:16.835 --> 00:37:18.674
<v Speaker 1>it would be quite a magical library for

00:37:18.674 --> 00:37:20.355
<v Speaker 1>all the things that I said without running

00:37:20.355 --> 00:37:22.674
<v Speaker 1>anything else. But, unfortunately, no. That's that's another

00:37:22.674 --> 00:37:22.915
<v Speaker 1>thing.

00:37:23.910 --> 00:37:25.510
<v Speaker 0>Right. Well, I think this is this is

00:37:25.510 --> 00:37:28.069
<v Speaker 0>cool for people to to understand. With Restate,

00:37:28.069 --> 00:37:28.790
<v Speaker 0>you need

00:37:29.030 --> 00:37:30.390
<v Speaker 0>a Restate server,

00:37:30.710 --> 00:37:32.950
<v Speaker 0>and then your your functions,

00:37:32.950 --> 00:37:35.589
<v Speaker 0>your services, your workflows, those are all deployed

00:37:35.589 --> 00:37:37.350
<v Speaker 0>by you where wherever

00:37:37.510 --> 00:37:38.630
<v Speaker 0>you want. I use the workers.

00:37:39.645 --> 00:37:41.965
<v Speaker 0>But yeah. Okay. Exactly. Yep.

00:37:42.605 --> 00:37:43.165
<v Speaker 1>And

00:37:43.645 --> 00:37:45.245
<v Speaker 1>yeah. So in that sense, we can sometimes

00:37:45.245 --> 00:37:47.005
<v Speaker 1>look a bit like an API gateway.

00:37:48.365 --> 00:37:50.045
<v Speaker 1>So or a little bit like a service

00:37:50.045 --> 00:37:51.005
<v Speaker 1>mesh even.

00:37:51.245 --> 00:37:53.565
<v Speaker 1>So but I just sometimes people really don't

00:37:53.565 --> 00:37:55.725
<v Speaker 1>like these these kind of concepts, so it's

00:37:55.440 --> 00:37:57.280
<v Speaker 1>it's I never know whether to mention them.

00:37:57.280 --> 00:37:59.280
<v Speaker 1>But something like a durable API gateway or

00:37:59.280 --> 00:38:01.280
<v Speaker 1>a durable service mesh might be a good

00:38:01.280 --> 00:38:02.480
<v Speaker 1>way to think about Restate.

00:38:03.359 --> 00:38:05.839
<v Speaker 0>Alright. So now it's telling us you need

00:38:05.839 --> 00:38:07.040
<v Speaker 0>a server.

00:38:07.359 --> 00:38:08.800
<v Speaker 0>Now this is where things are gonna get

00:38:08.800 --> 00:38:09.200
<v Speaker 0>interesting.

00:38:10.244 --> 00:38:12.085
<v Speaker 0>Is that a static, like, a pile binary?

00:38:12.805 --> 00:38:14.964
<v Speaker 1>It is. Is that gonna it should That's

00:38:14.964 --> 00:38:16.565
<v Speaker 0>fine. Static is okay.

00:38:17.605 --> 00:38:19.525
<v Speaker 0>Static is should be Muzel. Yeah.

00:38:20.325 --> 00:38:21.924
<v Speaker 1>This is a real test to see if

00:38:21.924 --> 00:38:23.125
<v Speaker 1>this works on a next machine.

00:38:29.560 --> 00:38:32.040
<v Speaker 1>Oh my goodness. Yeah. That's great. Yeah. Okay.

00:38:32.040 --> 00:38:33.960
<v Speaker 1>Cool. Nothing better than we are are fine.

00:38:33.960 --> 00:38:36.040
<v Speaker 0>The minute there's any dynamic linking, I mean,

00:38:36.040 --> 00:38:37.640
<v Speaker 0>I just say goodbye and we say, we'll

00:38:37.640 --> 00:38:38.680
<v Speaker 0>meet you in the pub next week or

00:38:38.680 --> 00:38:39.320
<v Speaker 0>about something. But

00:38:40.680 --> 00:38:43.375
<v Speaker 0>Yeah. Okay. So we have a Restate server

00:38:43.535 --> 00:38:44.415
<v Speaker 0>running

00:38:44.494 --> 00:38:46.335
<v Speaker 0>on 000

00:38:46.335 --> 00:38:50.095
<v Speaker 0>binding port eighty eighty. We have our JavaScript

00:38:50.255 --> 00:38:52.015
<v Speaker 0>Express Lake server

00:38:52.175 --> 00:38:56.010
<v Speaker 0>running here on ninety eighty. So now we

00:38:56.010 --> 00:38:58.010
<v Speaker 0>need to do a little bit of glue

00:38:58.330 --> 00:38:59.530
<v Speaker 0>magic. Yeah.

00:39:00.170 --> 00:39:00.730
<v Speaker 0>And

00:39:01.930 --> 00:39:03.530
<v Speaker 0>as it's telling us here, I need to

00:39:03.530 --> 00:39:06.090
<v Speaker 0>do this, yeah, MPX, but we have to

00:39:06.090 --> 00:39:09.290
<v Speaker 0>register our deployment with the Restate server.

00:39:10.525 --> 00:39:11.565
<v Speaker 1>Exactly. Yeah.

00:39:11.885 --> 00:39:13.885
<v Speaker 1>And what let me maybe expand on what

00:39:13.885 --> 00:39:14.925
<v Speaker 1>deployment means,

00:39:15.405 --> 00:39:17.245
<v Speaker 1>and this is a very overloaded term in

00:39:17.245 --> 00:39:19.965
<v Speaker 1>distributed systems, I suppose. For us, a deployment

00:39:19.965 --> 00:39:21.885
<v Speaker 1>is referring to, like, that that physical

00:39:22.670 --> 00:39:25.390
<v Speaker 1>location at which services run, but many services

00:39:25.390 --> 00:39:27.390
<v Speaker 1>might run there. So your deployment might be

00:39:27.390 --> 00:39:28.830
<v Speaker 1>a Lambda ARN

00:39:29.070 --> 00:39:31.550
<v Speaker 1>or a URL to a Cloudflare worker or

00:39:31.550 --> 00:39:34.110
<v Speaker 1>a local host port, but but it's

00:39:34.110 --> 00:39:36.190
<v Speaker 1>completely unrelated to what services might exist.

00:39:37.464 --> 00:39:38.425
<v Speaker 1>So you

00:39:39.224 --> 00:39:41.704
<v Speaker 1>have a Restate Cloud setup, it looks like,

00:39:41.704 --> 00:39:44.185
<v Speaker 1>and you're currently configured. So you need to

00:39:44.185 --> 00:39:45.545
<v Speaker 1>do Restate

00:39:46.585 --> 00:39:48.744
<v Speaker 1>config use end for local, and then it

00:39:48.744 --> 00:39:50.585
<v Speaker 1>will start talking to your local Restate service

00:39:50.585 --> 00:39:52.025
<v Speaker 1>instead of your cloud service.

00:39:52.460 --> 00:39:53.900
<v Speaker 1>We're getting ahead of ourselves.

00:39:56.059 --> 00:39:57.900
<v Speaker 1>There we go. Right. I was just gonna

00:39:57.900 --> 00:40:00.539
<v Speaker 0>blow away that older entry, but that's

00:40:00.539 --> 00:40:01.260
<v Speaker 0>nicer.

00:40:03.260 --> 00:40:05.260
<v Speaker 0>Cool. Alright. So it's telling us it wants

00:40:05.260 --> 00:40:05.980
<v Speaker 0>to create a deployment.

00:40:06.625 --> 00:40:08.225
<v Speaker 0>There are two services that want to be

00:40:08.225 --> 00:40:10.225
<v Speaker 0>added, Greater and Scotland.

00:40:10.225 --> 00:40:12.065
<v Speaker 0>It gives us the inputs and output values

00:40:12.065 --> 00:40:14.065
<v Speaker 0>for these, and we can choose to accept

00:40:14.065 --> 00:40:16.945
<v Speaker 0>or deny. So we now have two services

00:40:16.945 --> 00:40:19.825
<v Speaker 0>deployed to Restate server being delivered via whatever

00:40:19.825 --> 00:40:20.625
<v Speaker 0>means we want.

00:40:21.490 --> 00:40:23.090
<v Speaker 0>Easy. Job done.

00:40:24.610 --> 00:40:26.930
<v Speaker 0>Alright. We're we're just getting to the easy

00:40:26.930 --> 00:40:29.490
<v Speaker 0>stuff. Right? Yeah. Yeah. Yeah. Yeah. Absolutely.

00:40:31.010 --> 00:40:31.970
<v Speaker 0>Alright.

00:40:31.970 --> 00:40:32.530
<v Speaker 0>So

00:40:32.850 --> 00:40:34.450
<v Speaker 0>I thought, oh, I'm surprised to have Carl.

00:40:34.450 --> 00:40:37.645
<v Speaker 0>That's good. Okay. So we could do Carl

00:40:37.645 --> 00:40:39.325
<v Speaker 0>to the Restate server. And this is just

00:40:39.325 --> 00:40:41.165
<v Speaker 0>the gRPC. Right? We're just doing

00:40:41.805 --> 00:40:42.205
<v Speaker 0>yeah.

00:40:42.925 --> 00:40:44.925
<v Speaker 1>Except no proto. I should have already said

00:40:44.925 --> 00:40:46.605
<v Speaker 1>this. When we first started Restate, there was

00:40:46.605 --> 00:40:48.380
<v Speaker 1>a lot of proto stuff and we just

00:40:48.380 --> 00:40:50.540
<v Speaker 1>quickly realized that the developer experience is really

00:40:50.540 --> 00:40:51.820
<v Speaker 1>bad in most languages.

00:40:52.860 --> 00:40:55.340
<v Speaker 1>So it's it's everything's just JSON, essentially.

00:40:56.140 --> 00:40:58.300
<v Speaker 1>We we don't actually this Restate service does

00:40:58.300 --> 00:41:01.105
<v Speaker 1>not server does not inspect at all what

00:41:01.105 --> 00:41:02.545
<v Speaker 1>the bodies are, so it just gets passed

00:41:02.545 --> 00:41:04.305
<v Speaker 1>to the SDKs. But the SDKs by default

00:41:04.305 --> 00:41:05.745
<v Speaker 1>will use JSON and put up.

00:41:07.265 --> 00:41:08.065
<v Speaker 0>I

00:41:09.265 --> 00:41:11.345
<v Speaker 0>do like that it's issued to be based

00:41:11.345 --> 00:41:13.665
<v Speaker 0>and not proto. It does simplify Yeah. Yeah.

00:41:13.665 --> 00:41:14.465
<v Speaker 1>Was such a nightmare.

00:41:15.350 --> 00:41:17.350
<v Speaker 0>Yeah. Pavel's in the chat saying that that

00:41:17.350 --> 00:41:21.190
<v Speaker 0>binary is a statically 1.1 binary that's apparently

00:41:21.190 --> 00:41:22.710
<v Speaker 0>hot off the presses. I'm sure I think

00:41:22.710 --> 00:41:24.790
<v Speaker 1>it's today or last yesterday evening that it

00:41:24.790 --> 00:41:27.430
<v Speaker 1>came out. Yeah. Sweet. I like bleeding edge.

00:41:28.230 --> 00:41:29.815
<v Speaker 0>So we got our high, but now, of

00:41:29.815 --> 00:41:32.055
<v Speaker 0>course, I'm gonna test our Scotland One. So

00:41:32.055 --> 00:41:33.495
<v Speaker 0>pop back over.

00:41:35.815 --> 00:41:37.255
<v Speaker 0>What did I call it?

00:41:39.095 --> 00:41:41.015
<v Speaker 1>I think it's Scotland slash greets. No? Oh,

00:41:41.015 --> 00:41:43.790
<v Speaker 1>no. Scotland slash Scotland. Scotland.

00:41:47.230 --> 00:41:49.310
<v Speaker 0>Way. Nice. Nice. I

00:41:50.590 --> 00:41:52.350
<v Speaker 0>mean, there's not a lot to that, but

00:41:52.350 --> 00:41:54.110
<v Speaker 0>I think what's really powerful is just what

00:41:54.110 --> 00:41:56.875
<v Speaker 0>we're getting there, that bedrock of just a

00:41:56.875 --> 00:41:58.875
<v Speaker 0>system that we can now build. I don't

00:41:58.875 --> 00:42:00.235
<v Speaker 0>want to say anything, but I'm gonna say

00:42:00.235 --> 00:42:02.795
<v Speaker 0>almost anything on. Right? Question

00:42:04.635 --> 00:42:05.995
<v Speaker 1>from Russell in chat.

00:42:08.155 --> 00:42:09.515
<v Speaker 1>If you stop the process, do need to

00:42:09.515 --> 00:42:11.995
<v Speaker 1>reregister? No. So Restate is, like, stateful,

00:42:12.480 --> 00:42:13.840
<v Speaker 1>of course. I guess that's how it works.

00:42:13.840 --> 00:42:14.960
<v Speaker 1>So not only do you not need to

00:42:14.960 --> 00:42:17.440
<v Speaker 1>reregister services, but if you stop the process

00:42:17.440 --> 00:42:19.680
<v Speaker 1>halfway through an invocation

00:42:20.000 --> 00:42:22.560
<v Speaker 1>and resume Restate, the invocation will complete.

00:42:23.600 --> 00:42:26.000
<v Speaker 1>So you should be able to halfway through

00:42:26.000 --> 00:42:27.280
<v Speaker 1>a request kill

00:42:27.615 --> 00:42:28.895
<v Speaker 1>Restate service,

00:42:28.975 --> 00:42:30.495
<v Speaker 1>the underlying service,

00:42:30.895 --> 00:42:32.895
<v Speaker 1>the whole machine, the whole data center,

00:42:33.855 --> 00:42:35.375
<v Speaker 1>and start everything back up again, and it

00:42:35.375 --> 00:42:36.815
<v Speaker 1>should finish. Now, obviously, if you had an

00:42:36.815 --> 00:42:38.095
<v Speaker 1>HTTP request open,

00:42:38.655 --> 00:42:41.135
<v Speaker 1>we but not magical. We can't currently keep

00:42:41.135 --> 00:42:43.400
<v Speaker 1>the TCP connection open. But when we have

00:42:43.400 --> 00:42:45.400
<v Speaker 1>multiple reset instances as part of a distributed

00:42:45.400 --> 00:42:46.200
<v Speaker 1>architecture,

00:42:46.360 --> 00:42:47.640
<v Speaker 1>you would be able to kill any of

00:42:47.640 --> 00:42:49.320
<v Speaker 1>them except for the one you're connected to.

00:42:49.960 --> 00:42:51.640
<v Speaker 1>But everything will always finish.

00:42:51.880 --> 00:42:53.400
<v Speaker 0>Can we demo that in a special way?

00:42:53.400 --> 00:42:55.905
<v Speaker 0>I've got an idea. Right? Yes. Yes. Yes.

00:42:55.905 --> 00:42:57.105
<v Speaker 0>We can use it. We can use a

00:42:57.105 --> 00:42:58.945
<v Speaker 0>Restate CLI to actually

00:42:59.425 --> 00:43:00.865
<v Speaker 0>and I can't remember the command, so please

00:43:00.865 --> 00:43:02.225
<v Speaker 0>help me out here. How do I list

00:43:02.225 --> 00:43:03.425
<v Speaker 0>the invocations?

00:43:04.225 --> 00:43:05.665
<v Speaker 1>It'll be in l s.

00:43:08.250 --> 00:43:10.090
<v Speaker 1>And there should be a way to watch

00:43:10.090 --> 00:43:11.530
<v Speaker 1>or you can just do watch dash n

00:43:11.530 --> 00:43:12.170
<v Speaker 1>one.

00:43:15.770 --> 00:43:18.170
<v Speaker 1>There we go. Okay. That was easy.

00:43:19.530 --> 00:43:21.585
<v Speaker 0>I like it, mate. Like, I always quote

00:43:21.585 --> 00:43:23.025
<v Speaker 0>myself, and I feel so cringey when I

00:43:23.025 --> 00:43:24.785
<v Speaker 0>do it. Right? But the best developer experience

00:43:24.785 --> 00:43:26.945
<v Speaker 0>is where I can be successful with intuition

00:43:26.945 --> 00:43:29.585
<v Speaker 0>rather than informed decisions, and that was intuition.

00:43:29.665 --> 00:43:32.145
<v Speaker 0>So Yeah. Props. Yeah. So we can call

00:43:32.145 --> 00:43:34.145
<v Speaker 0>Scotland again, and it's too fast for the

00:43:34.145 --> 00:43:36.339
<v Speaker 0>invocation to even show that there. Right? So

00:43:36.579 --> 00:43:39.460
<v Speaker 0>Yep. Let's add a new let's modify Scott

00:43:39.460 --> 00:43:40.740
<v Speaker 0>because one of the things we can do

00:43:40.740 --> 00:43:41.860
<v Speaker 0>is not respond

00:43:42.020 --> 00:43:42.900
<v Speaker 0>right away.

00:43:43.380 --> 00:43:43.940
<v Speaker 1>Yep.

00:43:45.540 --> 00:43:48.260
<v Speaker 0>So we could do and, again, I'm gonna

00:43:48.260 --> 00:43:49.460
<v Speaker 0>mess this up. Sleep.

00:43:51.005 --> 00:43:53.085
<v Speaker 0>And this is measured in milliseconds. So what

00:43:53.085 --> 00:43:54.765
<v Speaker 0>is five no. What is one minute in

00:43:54.765 --> 00:43:55.645
<v Speaker 0>milliseconds?

00:43:55.965 --> 00:43:57.085
<v Speaker 1>50,000.

00:43:57.485 --> 00:43:58.605
<v Speaker 0>50 thousand?

00:43:58.845 --> 00:43:59.725
<v Speaker 0>60 Yeah.

00:44:01.085 --> 00:44:02.685
<v Speaker 0>I was about to look really stupid there.

00:44:05.250 --> 00:44:05.970
<v Speaker 0>So

00:44:06.130 --> 00:44:08.050
<v Speaker 0>and let that that's a bit high. Let's

00:44:08.050 --> 00:44:10.290
<v Speaker 0>go with two seconds first before I go

00:44:10.290 --> 00:44:11.330
<v Speaker 0>show in

00:44:11.650 --> 00:44:12.930
<v Speaker 0>Yeah. What I'm trying to show. So if

00:44:12.930 --> 00:44:14.610
<v Speaker 0>we do that, how's that? I'd have to

00:44:14.610 --> 00:44:15.810
<v Speaker 0>redeploy my service.

00:44:17.010 --> 00:44:19.090
<v Speaker 1>No. Do maybe just needed the NPM dev

00:44:19.090 --> 00:44:19.730
<v Speaker 1>to rerun?

00:44:22.205 --> 00:44:23.245
<v Speaker 1>Should've worked.

00:44:24.685 --> 00:44:25.565
<v Speaker 0>Maybe not

00:44:25.965 --> 00:44:27.645
<v Speaker 0>on a well, it's not a watch. Maybe

00:44:27.645 --> 00:44:29.725
<v Speaker 1>it's not respawning correctly. Yeah.

00:44:30.365 --> 00:44:31.725
<v Speaker 0>Okay. But it seemed to think it'd been

00:44:31.725 --> 00:44:32.205
<v Speaker 1>modified.

00:44:33.750 --> 00:44:35.590
<v Speaker 1>Should we go back? Oh, oh, wait.

00:44:38.870 --> 00:44:39.590
<v Speaker 1>JavaScript.

00:44:39.990 --> 00:44:41.510
<v Speaker 1>You've been writing to Restate. Yeah.

00:44:42.150 --> 00:44:43.830
<v Speaker 0>So now we have our two second delay.

00:44:43.830 --> 00:44:46.845
<v Speaker 0>So let's bump this up, and let's say

00:44:47.005 --> 00:44:48.765
<v Speaker 0>thirty seconds is how long it's gonna take

00:44:48.765 --> 00:44:50.845
<v Speaker 0>us to stop the Restate server, bring it

00:44:50.845 --> 00:44:52.845
<v Speaker 0>back. Now we're not gonna get a response

00:44:53.405 --> 00:44:55.965
<v Speaker 0>to the CLI, but we should see the

00:44:55.965 --> 00:44:56.765
<v Speaker 0>implications. Right?

00:44:57.400 --> 00:45:00.120
<v Speaker 0>So We should see the implications. Exactly. Yep.

00:45:00.280 --> 00:45:01.320
<v Speaker 0>Alright. So

00:45:01.960 --> 00:45:03.080
<v Speaker 0>thirty seconds.

00:45:03.640 --> 00:45:04.200
<v Speaker 0>No.

00:45:07.320 --> 00:45:08.040
<v Speaker 0>Yeah.

00:45:08.680 --> 00:45:10.415
<v Speaker 1>Yeah. Yeah. And why don't we start with

00:45:10.415 --> 00:45:12.175
<v Speaker 1>not stopping Restate? Why don't we just start

00:45:12.255 --> 00:45:13.855
<v Speaker 1>stop the service? Because it can be cool

00:45:13.855 --> 00:45:15.535
<v Speaker 1>to watch the HTTP actually finish if you

00:45:15.535 --> 00:45:18.095
<v Speaker 1>stop the service. Ah, okay.

00:45:19.295 --> 00:45:21.375
<v Speaker 1>You close that. So we have our implication

00:45:21.375 --> 00:45:21.775
<v Speaker 0>here,

00:45:22.970 --> 00:45:25.049
<v Speaker 0>which just tells us that things are okay.

00:45:25.049 --> 00:45:26.810
<v Speaker 0>We can restart that service.

00:45:27.210 --> 00:45:28.490
<v Speaker 1>So you might wanna do

00:45:29.690 --> 00:45:31.130
<v Speaker 1>once we have the ID, we can also

00:45:31.130 --> 00:45:32.650
<v Speaker 1>do in describe, and you'll get a little

00:45:32.650 --> 00:45:34.010
<v Speaker 1>bit more information about it.

00:45:34.650 --> 00:45:36.915
<v Speaker 1>Anyway, it's about to run. So Yeah. That

00:45:37.155 --> 00:45:39.155
<v Speaker 0>And it will continue the sleep. But what's

00:45:39.155 --> 00:45:41.395
<v Speaker 1>interesting here, it's not gonna continue the sleep

00:45:41.395 --> 00:45:43.155
<v Speaker 1>from the start because that would be really

00:45:43.155 --> 00:45:44.995
<v Speaker 1>annoying because then if you keep failing, it's

00:45:44.995 --> 00:45:46.915
<v Speaker 1>just gonna do the sleep, like, with the

00:45:46.915 --> 00:45:48.275
<v Speaker 1>original wake up time.

00:45:48.515 --> 00:45:51.230
<v Speaker 1>Mhmm. So you actually shouldn't affect how the

00:45:51.230 --> 00:45:52.829
<v Speaker 1>curl appears at all, the fact that you

00:45:52.829 --> 00:45:53.710
<v Speaker 1>stopped the service.

00:45:54.190 --> 00:45:56.030
<v Speaker 0>And in fact, we could demonstrate that by

00:45:56.030 --> 00:45:57.230
<v Speaker 0>just printing out.

00:45:58.750 --> 00:46:00.109
<v Speaker 0>I I I don't know if I'm teaching

00:46:00.109 --> 00:46:01.790
<v Speaker 0>people how to, like, suck eggs. Right? But

00:46:01.950 --> 00:46:03.630
<v Speaker 0>So if you you should use context dot

00:46:03.630 --> 00:46:05.150
<v Speaker 1>console dot log, I think.

00:46:06.875 --> 00:46:07.595
<v Speaker 1>Yes.

00:46:07.675 --> 00:46:09.994
<v Speaker 0>Alright. Interesting. So logging is an interesting one

00:46:09.994 --> 00:46:11.515
<v Speaker 1>because how does Restate work?

00:46:11.675 --> 00:46:13.755
<v Speaker 1>It actually does run the function from the

00:46:13.755 --> 00:46:14.715
<v Speaker 1>start. It

00:46:15.275 --> 00:46:17.115
<v Speaker 1>just fills in all the sort of meaningful

00:46:17.115 --> 00:46:19.035
<v Speaker 1>side effects from what happened last time. And

00:46:19.035 --> 00:46:19.994
<v Speaker 1>that means that if you just do a

00:46:19.994 --> 00:46:22.349
<v Speaker 1>console dot log, it will usually log again

00:46:22.349 --> 00:46:23.390
<v Speaker 1>on resumption.

00:46:24.270 --> 00:46:26.430
<v Speaker 1>If you use context dot console dot log,

00:46:26.430 --> 00:46:28.510
<v Speaker 1>it will usually not, but it it just

00:46:28.589 --> 00:46:31.150
<v Speaker 1>it still can in some situations. Let's see.

00:46:32.589 --> 00:46:33.069
<v Speaker 0>Okay.

00:46:36.585 --> 00:46:37.545
<v Speaker 0>So here,

00:46:37.625 --> 00:46:39.225
<v Speaker 0>we have You can see that's the first

00:46:39.225 --> 00:46:40.425
<v Speaker 1>invoke. Yeah.

00:46:40.665 --> 00:46:42.105
<v Speaker 0>We can shut that down.

00:46:42.825 --> 00:46:44.745
<v Speaker 0>Yep. We can just, you know, do something

00:46:44.745 --> 00:46:46.585
<v Speaker 0>for ten seconds. I'm just trying to make

00:46:46.585 --> 00:46:48.505
<v Speaker 0>sure that we that comes back just in

00:46:48.505 --> 00:46:50.505
<v Speaker 0>time for that thirty second. Yeah. Exactly.

00:46:51.600 --> 00:46:52.960
<v Speaker 0>Alright.

00:46:52.960 --> 00:46:54.880
<v Speaker 0>It's been long enough, so we can restart

00:46:54.880 --> 00:46:55.440
<v Speaker 0>that.

00:46:55.680 --> 00:46:57.040
<v Speaker 0>It's gonna do the magic.

00:46:57.760 --> 00:46:59.680
<v Speaker 1>K. It's getting resumed. It didn't do the

00:46:59.680 --> 00:47:01.440
<v Speaker 1>original log again, which is cool.

00:47:03.600 --> 00:47:05.120
<v Speaker 0>Oh, yeah. I don't even think about that.

00:47:05.120 --> 00:47:08.055
<v Speaker 0>Of course. Yeah. There we go. 37. Yeah.

00:47:08.055 --> 00:47:10.375
<v Speaker 1>Exactly. 17 to 30¢. That is that not

00:47:10.375 --> 00:47:11.175
<v Speaker 0>magical?

00:47:11.175 --> 00:47:12.135
<v Speaker 0>Like Yeah.

00:47:13.175 --> 00:47:14.535
<v Speaker 1>That is the essence of it. This is

00:47:14.535 --> 00:47:15.815
<v Speaker 1>the essence of function.

00:47:15.974 --> 00:47:18.855
<v Speaker 0>It's ridiculous. Yeah. It's just Yeah. Coding has

00:47:18.855 --> 00:47:20.375
<v Speaker 0>never been this easy. This is just joy

00:47:20.375 --> 00:47:21.895
<v Speaker 0>in my face. This is what pure joy

00:47:21.895 --> 00:47:22.295
<v Speaker 0>looks like.

00:47:23.070 --> 00:47:23.870
<v Speaker 1>Absolutely.

00:47:24.270 --> 00:47:26.350
<v Speaker 1>And then what's even cooler, right, is so

00:47:26.350 --> 00:47:27.950
<v Speaker 1>let's say that we deployed this on a

00:47:27.950 --> 00:47:28.590
<v Speaker 1>Lambda.

00:47:28.830 --> 00:47:31.070
<v Speaker 1>It wouldn't sleep at all. Like, the process

00:47:31.070 --> 00:47:33.310
<v Speaker 1>wouldn't wait for a millisecond. It would just

00:47:33.310 --> 00:47:36.430
<v Speaker 1>immediately stop. And then thirty seconds later, it's

00:47:36.430 --> 00:47:38.815
<v Speaker 1>a completely new Lambda invocation. What's cool about

00:47:38.815 --> 00:47:40.575
<v Speaker 1>that is the way that Lambda is built

00:47:40.575 --> 00:47:42.655
<v Speaker 1>is, like, each invocation is really, really cheap,

00:47:42.655 --> 00:47:44.495
<v Speaker 1>and you just pay for, like, milliseconds.

00:47:44.575 --> 00:47:46.335
<v Speaker 1>So you're getting something a lot closer to

00:47:46.335 --> 00:47:49.135
<v Speaker 1>the Cloudflare worker primitive where you pay for

00:47:49.135 --> 00:47:51.215
<v Speaker 1>CPU time and you don't pay for IO

00:47:51.215 --> 00:47:53.880
<v Speaker 1>time, which in practice on Lambda is impossible.

00:47:53.880 --> 00:47:55.720
<v Speaker 1>But this is something we, like, want to

00:47:55.720 --> 00:47:57.640
<v Speaker 1>help people get to on Lambda because Lambda

00:47:57.640 --> 00:47:58.680
<v Speaker 1>is such a great platform.

00:47:59.000 --> 00:48:00.599
<v Speaker 0>So, I mean, I don't wanna get into

00:48:00.599 --> 00:48:02.040
<v Speaker 0>the depths of it. Right? But I have

00:48:02.040 --> 00:48:04.440
<v Speaker 0>always been curious. How are you hydrating this

00:48:04.440 --> 00:48:06.520
<v Speaker 0>function to a point that it can,

00:48:07.725 --> 00:48:08.445
<v Speaker 0>like,

00:48:09.245 --> 00:48:11.485
<v Speaker 0>jump through to that next stage? Like, what

00:48:11.645 --> 00:48:13.805
<v Speaker 1>So every line is right.

00:48:13.965 --> 00:48:16.525
<v Speaker 1>We're not doing any magic. We're not saving

00:48:16.525 --> 00:48:18.605
<v Speaker 1>stacks or stuff like that because that will

00:48:18.605 --> 00:48:20.285
<v Speaker 1>never work when you change your code. It

00:48:20.285 --> 00:48:21.990
<v Speaker 1>will just the whole thing with a segfault.

00:48:21.990 --> 00:48:24.070
<v Speaker 1>We still run every line of code,

00:48:24.470 --> 00:48:24.950
<v Speaker 1>but

00:48:25.670 --> 00:48:26.390
<v Speaker 1>we

00:48:26.630 --> 00:48:28.790
<v Speaker 1>are sort of injecting the value. So when

00:48:28.790 --> 00:48:30.630
<v Speaker 1>you do a context dot run, we're gonna

00:48:30.630 --> 00:48:32.230
<v Speaker 1>be like, oh, we did that before, so

00:48:32.230 --> 00:48:34.310
<v Speaker 1>we'll just immediately return the value that we

00:48:34.310 --> 00:48:35.590
<v Speaker 1>saved. When you do a sleep,

00:48:36.174 --> 00:48:38.095
<v Speaker 1>we are figuring out how much time we

00:48:38.095 --> 00:48:39.295
<v Speaker 1>actually need to wait for.

00:48:40.414 --> 00:48:42.494
<v Speaker 1>When you do context.contel.log,

00:48:42.494 --> 00:48:44.255
<v Speaker 1>we check, are we replaying?

00:48:44.494 --> 00:48:46.894
<v Speaker 1>By which, I mean, we're zipping through the

00:48:46.894 --> 00:48:48.414
<v Speaker 1>function to the point that we left off.

00:48:48.414 --> 00:48:50.015
<v Speaker 1>If we're replaying, we just don't emit any

00:48:50.015 --> 00:48:51.770
<v Speaker 1>logs. But if we're not replaying, then we

00:48:51.770 --> 00:48:52.250
<v Speaker 1>will.

00:48:52.810 --> 00:48:54.250
<v Speaker 1>So these are So is that just like

00:48:54.250 --> 00:48:55.050
<v Speaker 0>memoization

00:48:55.050 --> 00:48:58.570
<v Speaker 0>based on our invocation key and some representation

00:48:58.570 --> 00:49:00.890
<v Speaker 0>of this line of code? Well, that's exactly

00:49:00.890 --> 00:49:02.650
<v Speaker 1>right. It's it's memoization

00:49:03.995 --> 00:49:06.075
<v Speaker 1>of of a journal. A journal is just

00:49:06.075 --> 00:49:08.635
<v Speaker 1>a list of operations that you completed, but

00:49:08.635 --> 00:49:10.555
<v Speaker 1>the actual number is very small. I mean,

00:49:10.555 --> 00:49:11.755
<v Speaker 1>it's basically runs,

00:49:12.075 --> 00:49:12.955
<v Speaker 1>sleeps,

00:49:14.075 --> 00:49:15.595
<v Speaker 1>calls to other services,

00:49:15.915 --> 00:49:18.400
<v Speaker 1>get and set. So writing an SDK is

00:49:18.400 --> 00:49:21.040
<v Speaker 1>basically implementing a state machine over these operations.

00:49:21.120 --> 00:49:23.200
<v Speaker 1>But the fundamental thing is you are writing

00:49:23.200 --> 00:49:23.920
<v Speaker 1>this log.

00:49:24.160 --> 00:49:26.880
<v Speaker 1>The log must be stored by Restate successfully

00:49:26.880 --> 00:49:28.080
<v Speaker 1>before you continue,

00:49:28.400 --> 00:49:31.575
<v Speaker 1>and then our job is to give you

00:49:31.575 --> 00:49:33.735
<v Speaker 1>back that log as quickly as possible on

00:49:33.735 --> 00:49:36.455
<v Speaker 1>resumption and therefore have a very low overhead.

00:49:37.735 --> 00:49:39.735
<v Speaker 1>And so there's this logs per invocation,

00:49:39.735 --> 00:49:42.135
<v Speaker 1>but also Restate itself is a massive distributed

00:49:42.135 --> 00:49:44.190
<v Speaker 1>log, And all of those little logs kinda

00:49:44.190 --> 00:49:46.430
<v Speaker 1>filter into that and create one big log

00:49:46.430 --> 00:49:47.790
<v Speaker 1>for your entire system.

00:49:48.510 --> 00:49:50.190
<v Speaker 1>And it's very pretty, really.

00:49:51.630 --> 00:49:53.470
<v Speaker 1>But, yeah, that's how it works.

00:49:55.070 --> 00:49:55.790
<v Speaker 0>Okay.

00:49:56.270 --> 00:49:56.990
<v Speaker 0>So

00:49:58.295 --> 00:50:00.135
<v Speaker 0>we we obviously don't have a a plan

00:50:00.135 --> 00:50:03.015
<v Speaker 0>for what we're gonna demo, but we started

00:50:03.015 --> 00:50:05.015
<v Speaker 0>to say we. Right? I've dragged this down

00:50:05.015 --> 00:50:07.175
<v Speaker 0>to Scottish team here. So now I'm thinking,

00:50:07.895 --> 00:50:09.815
<v Speaker 0>can we write and I don't know if

00:50:09.815 --> 00:50:12.375
<v Speaker 0>this is interesting or too trivial, but say

00:50:12.375 --> 00:50:14.770
<v Speaker 0>a flow where we can use signals to

00:50:14.770 --> 00:50:16.609
<v Speaker 0>say, a whiskey, drink a whiskey, drink a

00:50:16.609 --> 00:50:18.530
<v Speaker 0>whiskey till it falls over after so many

00:50:18.530 --> 00:50:21.410
<v Speaker 0>whiskeys. Like, show a stateful workflow where we

00:50:21.410 --> 00:50:21.970
<v Speaker 0>are

00:50:22.690 --> 00:50:23.890
<v Speaker 0>sending events

00:50:23.890 --> 00:50:26.290
<v Speaker 0>or messages to then change the output of

00:50:26.290 --> 00:50:27.010
<v Speaker 0>the workflow.

00:50:27.410 --> 00:50:27.810
<v Speaker 1>Okay.

00:50:28.345 --> 00:50:29.065
<v Speaker 1>Sounds

00:50:29.225 --> 00:50:31.385
<v Speaker 1>good. Does that show enough, or should we

00:50:31.385 --> 00:50:33.625
<v Speaker 0>just go with one of the the demos,

00:50:33.785 --> 00:50:34.665
<v Speaker 0>the examples?

00:50:35.705 --> 00:50:37.225
<v Speaker 1>I mean, I was also wondering, do you

00:50:37.225 --> 00:50:39.225
<v Speaker 1>have any because you're running recent production. Right?

00:50:39.225 --> 00:50:40.905
<v Speaker 1>Do you have any anything that you actually

00:50:40.905 --> 00:50:42.665
<v Speaker 1>wanna build for Rawkode? I mean, is that

00:50:42.665 --> 00:50:44.380
<v Speaker 1>if maybe we could be helpful in some

00:50:44.380 --> 00:50:44.860
<v Speaker 1>way?

00:50:46.060 --> 00:50:48.460
<v Speaker 0>I do. I'm now just worried that I'm

00:50:48.460 --> 00:50:50.300
<v Speaker 0>gonna have to give people context and we

00:50:50.300 --> 00:50:52.380
<v Speaker 1>have Okay. Yeah. Yeah. Sorry, man. I mean

00:50:52.620 --> 00:50:53.180
<v Speaker 0>okay. Let's

00:50:54.220 --> 00:50:55.914
<v Speaker 0>what what we can right, is that I'll

00:50:55.914 --> 00:50:57.755
<v Speaker 0>show you the one that we have deployed,

00:50:57.755 --> 00:50:59.115
<v Speaker 0>and I can tell you what I'm doing

00:50:59.115 --> 00:50:59.915
<v Speaker 0>next.

00:50:59.994 --> 00:51:01.195
<v Speaker 0>So Mhmm.

00:51:04.075 --> 00:51:05.515
<v Speaker 0>Projects Academy

00:51:09.035 --> 00:51:09.890
<v Speaker 0>and RPC.

00:51:09.970 --> 00:51:11.650
<v Speaker 0>So I started off content.

00:51:11.810 --> 00:51:13.730
<v Speaker 0>This is gonna turn into, like, a you

00:51:13.730 --> 00:51:16.690
<v Speaker 0>help me session, but whatever. That's great, though.

00:51:16.690 --> 00:51:17.170
<v Speaker 1>No?

00:51:17.970 --> 00:51:18.770
<v Speaker 0>So

00:51:18.930 --> 00:51:20.530
<v Speaker 0>like I said earlier, I implemented

00:51:21.090 --> 00:51:23.090
<v Speaker 0>the user activation story. Now

00:51:23.745 --> 00:51:25.265
<v Speaker 0>the way I thought I was gonna do

00:51:25.265 --> 00:51:27.425
<v Speaker 0>this, and it it goes against everything I

00:51:27.425 --> 00:51:28.945
<v Speaker 0>wanted to do. So I have changed tack

00:51:28.945 --> 00:51:30.785
<v Speaker 0>a little bit. As I thought, I'll just

00:51:30.785 --> 00:51:31.745
<v Speaker 0>have an RPC

00:51:32.305 --> 00:51:33.105
<v Speaker 0>system,

00:51:33.425 --> 00:51:35.425
<v Speaker 0>which is, you know, publicly browsable,

00:51:35.905 --> 00:51:37.665
<v Speaker 0>rpc.RawkodeAcademy,

00:51:38.790 --> 00:51:40.390
<v Speaker 0>and you just get this web picture. It's

00:51:40.390 --> 00:51:42.710
<v Speaker 0>a Astral website that is deployed to Cloudflare

00:51:42.710 --> 00:51:44.630
<v Speaker 0>functions and pages

00:51:45.510 --> 00:51:48.470
<v Speaker 0>where I have pages configured for the Restate

00:51:48.470 --> 00:51:49.430
<v Speaker 0>entry point,

00:51:49.750 --> 00:51:51.845
<v Speaker 0>which is just me making sure I can

00:51:51.845 --> 00:51:54.005
<v Speaker 0>pass on requests via the different handlers to

00:51:54.005 --> 00:51:55.765
<v Speaker 0>Restate. Like, nothing magic there. It's not that

00:51:55.765 --> 00:51:56.405
<v Speaker 0>important.

00:51:56.805 --> 00:51:57.525
<v Speaker 0>But

00:51:57.845 --> 00:52:00.325
<v Speaker 0>we do have this user registered event,

00:52:01.125 --> 00:52:02.645
<v Speaker 0>which can come in, and I'm using some

00:52:02.645 --> 00:52:04.405
<v Speaker 0>trigger dot dev and some Restate here. So

00:52:04.405 --> 00:52:05.950
<v Speaker 0>I'll try not to go on it too

00:52:05.950 --> 00:52:07.310
<v Speaker 0>much. Right? But we have a web hook

00:52:07.310 --> 00:52:08.830
<v Speaker 0>from Workhorse,

00:52:09.230 --> 00:52:11.790
<v Speaker 0>which is closed source thing, which I didn't

00:52:11.790 --> 00:52:13.310
<v Speaker 0>think I would use until I see that

00:52:13.310 --> 00:52:14.830
<v Speaker 0>you get your first million daily

00:52:14.990 --> 00:52:16.910
<v Speaker 0>monthly active users for free. And I'll say,

00:52:16.910 --> 00:52:18.190
<v Speaker 0>I'm never gonna have more than a million,

00:52:18.190 --> 00:52:19.230
<v Speaker 0>so that's just free.

00:52:19.790 --> 00:52:21.745
<v Speaker 0>Yep. And I like free stuff.

00:52:22.145 --> 00:52:22.785
<v Speaker 1>Mhmm.

00:52:23.025 --> 00:52:25.825
<v Speaker 0>Where we have a Restate client, and then

00:52:25.985 --> 00:52:28.145
<v Speaker 0>depending on the event that we get, we

00:52:28.145 --> 00:52:28.785
<v Speaker 0>are

00:52:29.825 --> 00:52:30.625
<v Speaker 0>using

00:52:30.625 --> 00:52:33.105
<v Speaker 0>our handlers from Restate to trigger the user

00:52:33.105 --> 00:52:35.630
<v Speaker 0>created, which creates our workflow. And then when

00:52:35.630 --> 00:52:37.390
<v Speaker 0>we receive the email verification,

00:52:37.390 --> 00:52:38.990
<v Speaker 0>we then trigger that.

00:52:39.950 --> 00:52:41.230
<v Speaker 0>That's it. Yep.

00:52:41.630 --> 00:52:43.309
<v Speaker 0>These are just functions where we get the

00:52:43.309 --> 00:52:44.829
<v Speaker 0>client. We submit.

00:52:45.869 --> 00:52:46.829
<v Speaker 0>I'm assuming

00:52:47.150 --> 00:52:48.829
<v Speaker 0>people are easy to follow along with this.

00:52:49.215 --> 00:52:50.255
<v Speaker 0>There's nothing

00:52:50.655 --> 00:52:53.455
<v Speaker 0>weird or interesting happening here. It's worth noting

00:52:53.455 --> 00:52:54.815
<v Speaker 1>that these are clients

00:52:55.295 --> 00:52:57.695
<v Speaker 1>for users outside of Restate. So there's a

00:52:57.695 --> 00:52:58.895
<v Speaker 1>kind of a concept of, like, you're either

00:52:58.895 --> 00:53:00.735
<v Speaker 1>in a Restate service or you're just out

00:53:00.735 --> 00:53:02.415
<v Speaker 1>of the code. And, course, Restate services have

00:53:02.415 --> 00:53:03.775
<v Speaker 1>to interact with the rest of the world.

00:53:03.775 --> 00:53:05.520
<v Speaker 1>So what we do in TypeScript is we

00:53:05.520 --> 00:53:06.800
<v Speaker 1>have these typed clients

00:53:07.280 --> 00:53:09.280
<v Speaker 1>that give you basically the same API for

00:53:09.280 --> 00:53:10.400
<v Speaker 1>calling services,

00:53:10.800 --> 00:53:13.040
<v Speaker 1>except they actually go through the Restate ingress,

00:53:13.040 --> 00:53:14.400
<v Speaker 1>which are running on eighty eighty.

00:53:15.520 --> 00:53:17.520
<v Speaker 1>And as such, they don't have exactly the

00:53:17.520 --> 00:53:20.365
<v Speaker 1>same magical properties of, like, RPCs can't fail,

00:53:20.365 --> 00:53:22.045
<v Speaker 1>for example. They can still fail,

00:53:22.365 --> 00:53:25.164
<v Speaker 1>but they have support idempotency keys, so you

00:53:25.164 --> 00:53:26.845
<v Speaker 1>can generally come up with a very simple

00:53:26.845 --> 00:53:29.165
<v Speaker 1>RPC retry type mechanism.

00:53:29.644 --> 00:53:31.404
<v Speaker 1>And then, of course, once your request gets

00:53:31.404 --> 00:53:33.244
<v Speaker 1>into Restate Land, then it has all these

00:53:33.244 --> 00:53:33.565
<v Speaker 1>properties.

00:53:34.560 --> 00:53:35.200
<v Speaker 0>Yeah.

00:53:36.080 --> 00:53:37.760
<v Speaker 0>I guess worth pointing out is we are

00:53:37.760 --> 00:53:40.400
<v Speaker 0>using the idempotency key here. So Mhmm. Whenever

00:53:40.400 --> 00:53:43.040
<v Speaker 0>Rawkode sends us a webhook that is individually

00:53:43.040 --> 00:53:43.840
<v Speaker 0>keyed,

00:53:43.920 --> 00:53:45.680
<v Speaker 0>and we will never send an email twice

00:53:45.680 --> 00:53:48.320
<v Speaker 0>because we have this idempotency key in theory

00:53:48.320 --> 00:53:49.280
<v Speaker 0>and hopefully in practice.

00:53:50.055 --> 00:53:52.615
<v Speaker 0>That happened yet, so that's good. Now

00:53:53.734 --> 00:53:55.735
<v Speaker 0>the next thing is the actual,

00:53:56.454 --> 00:53:58.694
<v Speaker 0>you know, the registered handler itself. Now what's

00:53:58.694 --> 00:54:00.214
<v Speaker 0>cool here and but I don't wanna show

00:54:00.214 --> 00:54:01.895
<v Speaker 0>the code yet because just to make sure

00:54:01.895 --> 00:54:02.934
<v Speaker 0>people understand what's happening.

00:54:03.740 --> 00:54:05.900
<v Speaker 0>Anyone can register on Rawkode Academy.

00:54:06.940 --> 00:54:08.140
<v Speaker 0>But what we don't want to do is

00:54:08.140 --> 00:54:09.900
<v Speaker 0>send an email to someone who hasn't verified

00:54:09.900 --> 00:54:11.900
<v Speaker 0>to that as their email. That's gonna lead

00:54:11.900 --> 00:54:13.820
<v Speaker 0>to spam or abuse.

00:54:14.059 --> 00:54:14.619
<v Speaker 0>So,

00:54:15.260 --> 00:54:17.345
<v Speaker 0>I mean, we could just spend thirty seconds

00:54:17.345 --> 00:54:19.184
<v Speaker 0>on how we should do this without Restate.

00:54:19.184 --> 00:54:20.625
<v Speaker 0>Like, if you had to build this yourself,

00:54:20.625 --> 00:54:21.665
<v Speaker 0>what we should be doing?

00:54:23.585 --> 00:54:24.305
<v Speaker 1>So

00:54:25.744 --> 00:54:28.385
<v Speaker 1>I guess you can write into the database

00:54:28.385 --> 00:54:29.905
<v Speaker 1>once they've been verified.

00:54:30.380 --> 00:54:32.380
<v Speaker 1>That's easy, at least. So once they click

00:54:32.380 --> 00:54:33.980
<v Speaker 1>the verification link, that's gonna write a key

00:54:33.980 --> 00:54:36.380
<v Speaker 1>to database. Okay. No problem. The annoying thing

00:54:36.380 --> 00:54:37.900
<v Speaker 1>is that I have to, like, scan the

00:54:37.900 --> 00:54:40.460
<v Speaker 1>database to or, like, nightly or whatever to

00:54:40.460 --> 00:54:42.460
<v Speaker 1>see who's been verified in the last day

00:54:42.460 --> 00:54:43.820
<v Speaker 1>or whatever and send messages.

00:54:44.475 --> 00:54:46.715
<v Speaker 1>Or I can alternatively do some kind of

00:54:46.715 --> 00:54:48.795
<v Speaker 1>event emitter thing. So when I write that

00:54:48.795 --> 00:54:49.435
<v Speaker 1>key,

00:54:49.675 --> 00:54:53.275
<v Speaker 1>I also emit an event with, PubSub or

00:54:53.275 --> 00:54:53.835
<v Speaker 1>something.

00:54:54.075 --> 00:54:56.315
<v Speaker 1>And then I have a PubSub consumer running

00:54:56.315 --> 00:54:57.275
<v Speaker 1>in a process somewhere,

00:54:57.730 --> 00:54:59.330
<v Speaker 1>and that is the thing that actually sends

00:54:59.330 --> 00:55:02.050
<v Speaker 1>emails in response to those events. So probably

00:55:02.050 --> 00:55:03.970
<v Speaker 1>need to use a database and a queue

00:55:03.970 --> 00:55:06.290
<v Speaker 1>and have a few different handlers, like, interrelated

00:55:06.290 --> 00:55:07.250
<v Speaker 1>with each other.

00:55:07.890 --> 00:55:10.130
<v Speaker 0>Yeah. And there's there's challenges with that approach.

00:55:10.130 --> 00:55:11.890
<v Speaker 0>Right? And I'm hoping this is familiar to

00:55:11.890 --> 00:55:13.570
<v Speaker 0>people. If you go with the batch approach,

00:55:13.545 --> 00:55:15.944
<v Speaker 0>which is, like, when someone does verify the

00:55:15.944 --> 00:55:17.944
<v Speaker 0>email address, we are gonna write something into

00:55:17.944 --> 00:55:21.145
<v Speaker 0>table called verified with a time stamp. Every

00:55:21.145 --> 00:55:22.665
<v Speaker 0>night, you look for people to verify that

00:55:22.665 --> 00:55:24.185
<v Speaker 0>day, and you start sending emails.

00:55:24.505 --> 00:55:26.025
<v Speaker 0>Not a great approach. Who wants a verified

00:55:26.184 --> 00:55:28.390
<v Speaker 0>who wants a email twenty four hours later.

00:55:28.390 --> 00:55:30.310
<v Speaker 0>Right? I said, it's not cool.

00:55:31.110 --> 00:55:34.310
<v Speaker 0>Yep. The the real time approach, you've got

00:55:34.310 --> 00:55:35.670
<v Speaker 0>two ways of doing that. One, you can

00:55:35.670 --> 00:55:37.270
<v Speaker 0>do CDC on the database.

00:55:37.830 --> 00:55:40.310
<v Speaker 0>That requires more configuration,

00:55:40.630 --> 00:55:43.214
<v Speaker 0>set up pub subs, all that stuff. Or

00:55:43.214 --> 00:55:44.974
<v Speaker 0>you write to Kafka, but then you've got

00:55:44.974 --> 00:55:46.654
<v Speaker 0>the dual rate problem, which is well covered

00:55:46.654 --> 00:55:48.255
<v Speaker 0>in a federated systems and that can you

00:55:48.255 --> 00:55:50.174
<v Speaker 0>publish it to Kafka without confirm that it's

00:55:50.174 --> 00:55:52.255
<v Speaker 0>been activated in the database because you can't

00:55:52.255 --> 00:55:54.734
<v Speaker 0>do a transaction across two different systems? So

00:55:54.734 --> 00:55:55.775
<v Speaker 0>it's a such a simple

00:55:56.540 --> 00:55:58.700
<v Speaker 0>problem on the surface, but actually doing it

00:55:58.700 --> 00:55:59.980
<v Speaker 0>in a resilient way

00:56:00.300 --> 00:56:02.380
<v Speaker 0>requires effort and due care.

00:56:04.220 --> 00:56:06.859
<v Speaker 0>And here's the function. So there is a

00:56:06.859 --> 00:56:08.060
<v Speaker 0>lot going on here because I've been playing

00:56:08.060 --> 00:56:10.060
<v Speaker 0>with context set and phases and trying to,

00:56:10.185 --> 00:56:12.025
<v Speaker 0>you know, just explore Restate in a bit

00:56:12.025 --> 00:56:12.745
<v Speaker 0>more detail.

00:56:13.065 --> 00:56:14.745
<v Speaker 0>But all I the only line of code

00:56:14.745 --> 00:56:16.745
<v Speaker 0>that is important here is that when a

00:56:16.745 --> 00:56:20.025
<v Speaker 0>user is registered, we use this durable promise.

00:56:21.145 --> 00:56:23.465
<v Speaker 0>And I'm just waiting for an event on

00:56:23.465 --> 00:56:26.630
<v Speaker 0>this user ID that says that that user

00:56:26.630 --> 00:56:27.990
<v Speaker 0>has verified their email.

00:56:28.790 --> 00:56:30.870
<v Speaker 0>That's it. That's that's that entire system that

00:56:30.870 --> 00:56:31.910
<v Speaker 0>we just described.

00:56:32.870 --> 00:56:34.390
<v Speaker 0>And then everything after that is just me

00:56:34.390 --> 00:56:36.230
<v Speaker 0>sending an email, which is run

00:56:36.550 --> 00:56:38.550
<v Speaker 0>handled via context dot run so that it

00:56:38.550 --> 00:56:41.105
<v Speaker 0>is hopefully only ever gonna run one. Well,

00:56:41.265 --> 00:56:43.025
<v Speaker 0>do you see guaranteed to only ever run

00:56:43.025 --> 00:56:44.865
<v Speaker 0>once? I'm not sure. So this is impossible

00:56:44.865 --> 00:56:45.585
<v Speaker 1>because

00:56:45.665 --> 00:56:47.585
<v Speaker 1>you could get to the last line of

00:56:47.585 --> 00:56:50.145
<v Speaker 1>the function and the process could die, and

00:56:50.145 --> 00:56:52.145
<v Speaker 1>and we we just don't have any information

00:56:52.145 --> 00:56:53.799
<v Speaker 1>to know whether it ran or not. What

00:56:53.799 --> 00:56:55.480
<v Speaker 1>we say is that after there's been a

00:56:55.480 --> 00:56:57.720
<v Speaker 1>successful completion that's committed to Restate and we

00:56:57.720 --> 00:56:59.319
<v Speaker 1>move on to the next step, it will

00:56:59.319 --> 00:57:00.359
<v Speaker 1>never run again.

00:57:00.520 --> 00:57:02.520
<v Speaker 1>And this basically just makes item potency a

00:57:02.520 --> 00:57:03.000
<v Speaker 1>lot

00:57:03.640 --> 00:57:04.839
<v Speaker 1>easier to reason about.

00:57:07.925 --> 00:57:09.285
<v Speaker 1>In this case, I think it is technically

00:57:09.285 --> 00:57:10.805
<v Speaker 1>possible that you could send the email twice.

00:57:10.805 --> 00:57:12.405
<v Speaker 1>And I think if recent accepts an item

00:57:12.405 --> 00:57:13.445
<v Speaker 1>code as a key,

00:57:13.685 --> 00:57:15.605
<v Speaker 1>you could just inject one in there, and

00:57:15.605 --> 00:57:16.885
<v Speaker 1>that would solve that problem.

00:57:17.285 --> 00:57:19.205
<v Speaker 0>Yeah. I mean, the challenge is I'm running

00:57:19.205 --> 00:57:20.805
<v Speaker 0>this in the cloud for workers, which don't

00:57:20.805 --> 00:57:24.040
<v Speaker 0>cover guarantees that my worker won't be killed

00:57:24.040 --> 00:57:26.040
<v Speaker 0>or whatever. So, yeah, there there's

00:57:26.840 --> 00:57:27.880
<v Speaker 0>and that could be a problem. I think

00:57:27.880 --> 00:57:29.240
<v Speaker 1>it should still be possible

00:57:29.400 --> 00:57:31.400
<v Speaker 1>if you do, context dot rand dot u

00:57:31.400 --> 00:57:32.520
<v Speaker 1>u I d, then you get a u

00:57:32.520 --> 00:57:33.640
<v Speaker 1>u I d and that will stay the

00:57:33.640 --> 00:57:35.285
<v Speaker 1>same. And then you can pass that on

00:57:35.285 --> 00:57:37.204
<v Speaker 1>to to resend. But, I mean, yeah, also,

00:57:37.204 --> 00:57:39.605
<v Speaker 1>resend probably can't guarantee it without some kind

00:57:39.605 --> 00:57:42.325
<v Speaker 1>of inbound item urgency key. No. Technically,

00:57:42.325 --> 00:57:44.085
<v Speaker 1>it's just not possible without a without a

00:57:44.085 --> 00:57:46.325
<v Speaker 1>state identifier to prevent emails from being sent

00:57:46.325 --> 00:57:46.885
<v Speaker 1>twice.

00:57:47.285 --> 00:57:49.365
<v Speaker 0>But it's as close to

00:57:49.790 --> 00:57:52.030
<v Speaker 0>guaranteed as we're gonna get. I'm gonna I'll

00:57:52.030 --> 00:57:53.630
<v Speaker 0>I'll say that. I'm quite happy to go

00:57:53.630 --> 00:57:55.070
<v Speaker 0>in there. If

00:57:55.710 --> 00:57:57.630
<v Speaker 0>want, if you're not Absolutely. Yeah. Yeah. But

00:57:57.630 --> 00:57:58.990
<v Speaker 0>I just love so, again,

00:57:59.470 --> 00:58:01.150
<v Speaker 0>that's just how I guarantee that we don't

00:58:01.150 --> 00:58:03.055
<v Speaker 0>send an email to our users There's no

00:58:03.055 --> 00:58:05.215
<v Speaker 0>pops up. There's no CDC. There's no writing

00:58:05.215 --> 00:58:06.975
<v Speaker 0>to external data sources.

00:58:07.615 --> 00:58:10.095
<v Speaker 0>It's just a promise waiting for an event.

00:58:10.095 --> 00:58:11.695
<v Speaker 0>And I think that is just Yep.

00:58:12.735 --> 00:58:15.055
<v Speaker 1>But it basically it is the pops up

00:58:14.670 --> 00:58:16.829
<v Speaker 1>approach that we discussed. I mean, Restate is

00:58:16.829 --> 00:58:18.590
<v Speaker 1>essentially splitting your handler

00:58:18.750 --> 00:58:19.470
<v Speaker 1>into

00:58:20.190 --> 00:58:22.910
<v Speaker 1>a before event received step, which would be

00:58:22.910 --> 00:58:24.190
<v Speaker 1>one handler. Otherwise,

00:58:24.589 --> 00:58:25.869
<v Speaker 1>an event receiver

00:58:25.869 --> 00:58:27.230
<v Speaker 1>and then what to do when the event

00:58:27.230 --> 00:58:29.685
<v Speaker 1>is received. And it's got the KV in

00:58:29.685 --> 00:58:31.525
<v Speaker 1>there, like the KV read and write. It's

00:58:31.525 --> 00:58:33.525
<v Speaker 1>got the event reserve receive

00:58:33.605 --> 00:58:35.845
<v Speaker 1>and send, but it's just all in the

00:58:35.845 --> 00:58:38.005
<v Speaker 1>same handler. And that I guess that's the

00:58:38.005 --> 00:58:39.845
<v Speaker 1>that's the magic really, but it it's still,

00:58:39.845 --> 00:58:41.910
<v Speaker 1>like, the best in class approach, I guess.

00:58:41.910 --> 00:58:43.990
<v Speaker 1>Yeah. There's no hacks. We're still just doing

00:58:43.990 --> 00:58:45.990
<v Speaker 1>pops up. We haven't invented, like, a new

00:58:45.990 --> 00:58:48.950
<v Speaker 1>distributed systems approach. We just kind of give

00:58:48.950 --> 00:58:50.390
<v Speaker 1>a new different API, I guess, if that

00:58:50.390 --> 00:58:51.030
<v Speaker 1>makes sense.

00:58:52.069 --> 00:58:53.590
<v Speaker 0>Yeah. That makes sense to me.

00:58:54.230 --> 00:58:55.829
<v Speaker 0>So the bet that I hadn't showed here

00:58:55.829 --> 00:58:57.190
<v Speaker 0>is we just added

00:58:57.444 --> 00:58:58.565
<v Speaker 0>a new I don't know if you call

00:58:58.565 --> 00:59:00.325
<v Speaker 0>it functions, endpoints, whatever,

00:59:00.565 --> 00:59:01.525
<v Speaker 0>to this,

00:59:02.405 --> 00:59:04.645
<v Speaker 0>which just resolves that promise for us, and

00:59:04.645 --> 00:59:06.085
<v Speaker 0>then I'm triggering that

00:59:06.325 --> 00:59:08.005
<v Speaker 0>by just pulling out the client and calling

00:59:08.005 --> 00:59:10.244
<v Speaker 0>that as a function. I mean, it is

00:59:12.750 --> 00:59:14.670
<v Speaker 1>So this this named promise thing is, like,

00:59:14.670 --> 00:59:16.830
<v Speaker 1>a really handy feature of the workflow primitive

00:59:16.830 --> 00:59:18.430
<v Speaker 1>in particular, and that's that's kinda what we

00:59:18.430 --> 00:59:20.430
<v Speaker 1>created workflows for us to have this concept.

00:59:20.430 --> 00:59:22.110
<v Speaker 1>But we in general, in Restate, we have

00:59:22.110 --> 00:59:23.230
<v Speaker 1>these things called awakables,

00:59:23.694 --> 00:59:25.215
<v Speaker 1>and they're basically, like,

00:59:25.615 --> 00:59:27.855
<v Speaker 1>promises that you can share between services, and

00:59:27.855 --> 00:59:29.535
<v Speaker 1>they can be resolved with any value or

00:59:29.535 --> 00:59:31.535
<v Speaker 1>rejected with an error. So you could pass

00:59:31.535 --> 00:59:34.974
<v Speaker 1>around awakable IDs and basically have, like, really

00:59:34.974 --> 00:59:38.335
<v Speaker 1>complicated async processes between services, and and awakables

00:59:38.335 --> 00:59:38.974
<v Speaker 1>can be

00:59:39.750 --> 00:59:40.550
<v Speaker 1>also

00:59:41.350 --> 00:59:43.350
<v Speaker 1>resolved at the ingress. So you can have,

00:59:43.350 --> 00:59:45.510
<v Speaker 1>like, an inbound web hook that results awakable.

00:59:45.510 --> 00:59:47.590
<v Speaker 1>But the special case, like, the simplest special

00:59:47.590 --> 00:59:49.510
<v Speaker 1>case of of awakables is in this workflow

00:59:49.510 --> 00:59:51.990
<v Speaker 1>setup where you're mostly trying to communicate between

00:59:51.990 --> 00:59:54.355
<v Speaker 1>handlers of the same workflow. And for most

00:59:54.355 --> 00:59:57.075
<v Speaker 1>purposes, that is really, really, like, easy and

00:59:57.075 --> 00:59:59.075
<v Speaker 1>kind of simple. And I guess our approach

00:59:59.075 --> 01:00:00.995
<v Speaker 1>is we wanna make it possible to build

01:00:00.995 --> 01:00:02.835
<v Speaker 1>anything. Like, you can actually build a distributed

01:00:02.835 --> 01:00:04.835
<v Speaker 1>queue, for example, on top of Restate using

01:00:04.835 --> 01:00:05.795
<v Speaker 1>wakeables.

01:00:05.795 --> 01:00:07.250
<v Speaker 1>We wanna make it possible to do anything,

01:00:07.250 --> 01:00:08.930
<v Speaker 1>but we wanna make it easy to just

01:00:09.170 --> 01:00:11.650
<v Speaker 1>kind of do a workflow that does simple

01:00:11.650 --> 01:00:13.090
<v Speaker 1>things and not have to worry about, like,

01:00:13.090 --> 01:00:14.690
<v Speaker 1>creating complicated processes,

01:00:14.690 --> 01:00:15.170
<v Speaker 1>essentially.

01:00:16.770 --> 01:00:17.250
<v Speaker 0>Awesome.

01:00:18.145 --> 01:00:19.665
<v Speaker 0>Alright. So that leads us on to the

01:00:19.665 --> 01:00:21.585
<v Speaker 0>next step. It's that I've had decided

01:00:22.545 --> 01:00:25.585
<v Speaker 0>this isn't good enough. And for not not

01:00:25.585 --> 01:00:26.625
<v Speaker 0>Restate.

01:00:26.705 --> 01:00:27.665
<v Speaker 0>Let me clarify.

01:00:29.505 --> 01:00:31.985
<v Speaker 0>My deployment mechanism here is I'm essentially built

01:00:31.985 --> 01:00:34.065
<v Speaker 0>in this monolithic RPC

01:00:34.509 --> 01:00:36.910
<v Speaker 0>deployment where if I break it, I'm actually

01:00:36.910 --> 01:00:38.829
<v Speaker 0>breaking a whole bunch of different handles. Now

01:00:38.829 --> 01:00:41.309
<v Speaker 0>we get guarantees and result resiliency by going

01:00:41.309 --> 01:00:41.869
<v Speaker 0>through

01:00:42.109 --> 01:00:42.990
<v Speaker 0>Restate.

01:00:43.470 --> 01:00:45.150
<v Speaker 0>Mhmm. But everything else in my system is

01:00:45.150 --> 01:00:47.950
<v Speaker 0>deployed as individual workflow workers, and that's the

01:00:47.950 --> 01:00:49.725
<v Speaker 0>approach that I started to take when I

01:00:49.725 --> 01:00:51.725
<v Speaker 0>was looking at my technology service.

01:00:52.365 --> 01:00:54.845
<v Speaker 0>So if we pop back up

01:00:55.485 --> 01:00:58.525
<v Speaker 0>this is where I'm worried about just oversharing

01:00:58.525 --> 01:01:00.285
<v Speaker 0>on what's actually happening here.

01:01:00.525 --> 01:01:03.165
<v Speaker 1>Okay. No worries. But any service that we

01:01:03.165 --> 01:01:03.725
<v Speaker 0>have

01:01:04.800 --> 01:01:07.280
<v Speaker 0>gets boiled down to a data model, a

01:01:07.280 --> 01:01:09.280
<v Speaker 0>read model, and a write model. The write

01:01:09.280 --> 01:01:11.200
<v Speaker 0>model is all handled via RPC.

01:01:11.920 --> 01:01:12.560
<v Speaker 0>So

01:01:12.960 --> 01:01:15.040
<v Speaker 0>just tell me if I'm glossing over anything

01:01:15.040 --> 01:01:16.560
<v Speaker 0>too much here. Oh, that makes sense. We

01:01:16.560 --> 01:01:18.720
<v Speaker 0>have a a schema defined in Drezel,

01:01:19.585 --> 01:01:21.905
<v Speaker 0>and we're using the Drezel Valley bot

01:01:22.385 --> 01:01:24.385
<v Speaker 0>plug in for everyone who's not aware of

01:01:24.385 --> 01:01:26.545
<v Speaker 0>what that is. Valley bot is like Zod.

01:01:26.545 --> 01:01:28.545
<v Speaker 0>It gives us TypeScript types that we can

01:01:28.545 --> 01:01:31.025
<v Speaker 0>reuse in other parts of the system. So

01:01:31.240 --> 01:01:33.960
<v Speaker 1>Okay. While this data model allows me to

01:01:33.960 --> 01:01:35.880
<v Speaker 0>write to the database, I'm actually not handling

01:01:35.880 --> 01:01:36.840
<v Speaker 0>the rights

01:01:36.840 --> 01:01:39.720
<v Speaker 0>and the service for reasons I can

01:01:40.200 --> 01:01:41.560
<v Speaker 0>I I can get into if we wanna

01:01:41.560 --> 01:01:43.160
<v Speaker 0>go into it deeper? Mhmm. But just though

01:01:43.160 --> 01:01:44.760
<v Speaker 0>we have a schema here, and then the

01:01:44.760 --> 01:01:47.455
<v Speaker 0>read model is all delivered via graph based.

01:01:48.494 --> 01:01:50.175
<v Speaker 0>Graph based is the GraphQL

01:01:53.055 --> 01:01:53.695
<v Speaker 0>Mhmm.

01:01:54.255 --> 01:01:56.015
<v Speaker 0>Front end kind of thing where I could

01:01:56.015 --> 01:01:58.095
<v Speaker 0>just say I have I have this type.

01:01:58.095 --> 01:02:00.015
<v Speaker 0>This is the query I wanna satisfy,

01:02:00.015 --> 01:02:01.615
<v Speaker 0>and it does it does it does all

01:02:01.615 --> 01:02:03.840
<v Speaker 0>the jobs. The resolver for this is

01:02:06.160 --> 01:02:08.000
<v Speaker 0>using the Dresol client to query the table

01:02:08.000 --> 01:02:09.760
<v Speaker 0>and done. Now the reason

01:02:10.160 --> 01:02:12.240
<v Speaker 0>this is over the more complicated than I'm

01:02:12.240 --> 01:02:13.680
<v Speaker 0>getting into is that

01:02:14.135 --> 01:02:16.694
<v Speaker 0>in some cases in fact, let's just show

01:02:16.694 --> 01:02:18.214
<v Speaker 0>this off because this is where things get

01:02:18.214 --> 01:02:19.095
<v Speaker 0>a little weird.

01:02:19.974 --> 01:02:22.934
<v Speaker 0>Now most people would have shows

01:02:22.934 --> 01:02:24.455
<v Speaker 0>service, which I do,

01:02:24.855 --> 01:02:26.454
<v Speaker 0>which has all of my shows on my

01:02:26.454 --> 01:02:27.015
<v Speaker 0>YouTube channel.

01:02:27.600 --> 01:02:30.000
<v Speaker 0>Mhmm. I then have a people service, which

01:02:30.000 --> 01:02:31.280
<v Speaker 0>has all of the people that have been

01:02:31.280 --> 01:02:33.360
<v Speaker 0>guests. And the reason I separate these things

01:02:33.360 --> 01:02:35.120
<v Speaker 0>is so that the schemas are small,

01:02:35.440 --> 01:02:37.280
<v Speaker 0>migrations are nonexistent,

01:02:37.760 --> 01:02:39.680
<v Speaker 0>and I can replace the service. Like, the

01:02:39.600 --> 01:02:40.320
<v Speaker 0>cloud Objects,

01:02:40.640 --> 01:02:42.480
<v Speaker 0>basically. They're a little bit like virtual objects.

01:02:43.224 --> 01:02:45.945
<v Speaker 0>But then I needed to then say, people

01:02:45.945 --> 01:02:47.465
<v Speaker 0>can be a host of a show.

01:02:48.105 --> 01:02:50.105
<v Speaker 1>So I needed a new service for that.

01:02:50.425 --> 01:02:52.505
<v Speaker 0>Now what Graphbase does is it actually allows

01:02:52.505 --> 01:02:53.065
<v Speaker 0>me

01:02:53.464 --> 01:02:56.105
<v Speaker 0>to define fragments of these types and does

01:02:56.105 --> 01:02:57.385
<v Speaker 0>the aggregation at the front.

01:02:58.160 --> 01:02:59.760
<v Speaker 0>So what I'm saying here is that we

01:02:59.760 --> 01:03:02.080
<v Speaker 0>have a person which is not resolvable

01:03:02.080 --> 01:03:04.000
<v Speaker 0>because this is not the person in service,

01:03:04.000 --> 01:03:05.520
<v Speaker 0>but we know that they have an ID

01:03:05.520 --> 01:03:06.960
<v Speaker 0>and that's how they're keyed.

01:03:07.200 --> 01:03:09.600
<v Speaker 1>So it's a foreign key essentially. Exactly. Yeah.

01:03:09.600 --> 01:03:12.240
<v Speaker 0>We're doing distributed foreign keys across services.

01:03:13.805 --> 01:03:16.445
<v Speaker 0>Then the show is a service, which is

01:03:16.445 --> 01:03:17.965
<v Speaker 0>also keyed with an ID.

01:03:18.445 --> 01:03:20.605
<v Speaker 0>It's also not resolvable, although we don't mark

01:03:20.605 --> 01:03:22.765
<v Speaker 0>it as not resolvable because we have this

01:03:22.765 --> 01:03:24.925
<v Speaker 0>new property that we want to add

01:03:25.165 --> 01:03:25.565
<v Speaker 0>to it.

01:03:26.280 --> 01:03:27.880
<v Speaker 1>Mhmm. And what we're saying is we want

01:03:27.880 --> 01:03:29.160
<v Speaker 0>to people to be able to create a

01:03:29.160 --> 01:03:31.720
<v Speaker 0>host switch resolves to a person using this

01:03:31.720 --> 01:03:32.600
<v Speaker 0>resolver.

01:03:33.320 --> 01:03:34.280
<v Speaker 0>What

01:03:34.920 --> 01:03:36.680
<v Speaker 0>that means is I get

01:03:36.840 --> 01:03:39.080
<v Speaker 0>this very cool API, and I'll just log

01:03:39.080 --> 01:03:40.760
<v Speaker 0>in to GraphQL quickly because I don't have

01:03:40.760 --> 01:03:43.345
<v Speaker 0>a GraphQL client available right now.

01:03:43.744 --> 01:03:44.385
<v Speaker 0>Mhmm.

01:03:48.944 --> 01:03:50.464
<v Speaker 0>See, this is the rabbit hole I was

01:03:50.464 --> 01:03:52.385
<v Speaker 0>worried about going down. No. No. It's okay.

01:03:52.385 --> 01:03:53.825
<v Speaker 1>This is pretty cool. I think it's so

01:03:53.825 --> 01:03:55.750
<v Speaker 1>interesting to look at, like, real world real

01:03:55.750 --> 01:03:57.030
<v Speaker 1>world Restate usage.

01:03:58.390 --> 01:04:01.110
<v Speaker 0>Okay. So here's my single API where I

01:04:01.110 --> 01:04:02.710
<v Speaker 0>can do a query, and I can say,

01:04:02.710 --> 01:04:04.390
<v Speaker 0>give me all my shows

01:04:04.550 --> 01:04:07.030
<v Speaker 0>where the host and get me the

01:04:07.590 --> 01:04:08.470
<v Speaker 0>the forename.

01:04:10.285 --> 01:04:12.045
<v Speaker 0>This is where it's not gonna work. Right?

01:04:16.685 --> 01:04:18.205
<v Speaker 0>Don't do it to me.

01:04:19.085 --> 01:04:21.245
<v Speaker 0>Ah. Oh, there you go. Great. But we

01:04:21.245 --> 01:04:22.445
<v Speaker 0>didn't get the show name. So

01:04:24.820 --> 01:04:26.420
<v Speaker 0>so here we are. Right? We have Rawkode

01:04:26.420 --> 01:04:28.100
<v Speaker 0>Live, and we have a host with a

01:04:28.100 --> 01:04:28.740
<v Speaker 0>four name of

01:04:30.020 --> 01:04:32.020
<v Speaker 0>Mhmm. Oh, yeah. It's just it's just weird

01:04:32.020 --> 01:04:32.820
<v Speaker 0>formatting.

01:04:32.820 --> 01:04:34.660
<v Speaker 0>There we go. That must be good. So

01:04:34.660 --> 01:04:36.900
<v Speaker 0>that's actually creating the show's service,

01:04:37.914 --> 01:04:39.275
<v Speaker 0>the people service,

01:04:39.835 --> 01:04:41.835
<v Speaker 0>and then the aggregation service injecting all that

01:04:41.835 --> 01:04:44.474
<v Speaker 0>thing. So this is distributed join, essentially. You're

01:04:44.474 --> 01:04:47.115
<v Speaker 1>you're joining across two different distributed services. Yeah.

01:04:47.115 --> 01:04:48.155
<v Speaker 0>Ex exactly.

01:04:48.875 --> 01:04:50.714
<v Speaker 0>So And is this all hitting the same

01:04:50.714 --> 01:04:53.230
<v Speaker 1>underlying database or are they No. No. No.

01:04:53.390 --> 01:04:56.589
<v Speaker 0>Every service has its own lib sql, terso

01:04:56.589 --> 01:04:58.509
<v Speaker 0>db. So SQL

01:04:58.509 --> 01:05:01.390
<v Speaker 0>lite, which makes local development experience very nice.

01:05:01.869 --> 01:05:04.349
<v Speaker 1>Okay. Got you. Now this presents a problem.

01:05:04.485 --> 01:05:06.005
<v Speaker 0>And this is why Restate is such a

01:05:06.005 --> 01:05:08.245
<v Speaker 0>big part of my architecture now. Because

01:05:08.485 --> 01:05:10.485
<v Speaker 0>if I want to create a new show,

01:05:10.485 --> 01:05:12.325
<v Speaker 0>a new person, and a host of a

01:05:12.325 --> 01:05:12.805
<v Speaker 0>show,

01:05:13.525 --> 01:05:15.525
<v Speaker 0>that is actually a multi

01:05:15.605 --> 01:05:18.405
<v Speaker 0>step. Right? I have to create the show,

01:05:18.405 --> 01:05:20.760
<v Speaker 0>create the person, and then say that that

01:05:20.760 --> 01:05:22.760
<v Speaker 0>person is then a host of a show.

01:05:22.920 --> 01:05:24.440
<v Speaker 0>But I can't just insert

01:05:24.840 --> 01:05:26.840
<v Speaker 0>values into a table anymore.

01:05:27.640 --> 01:05:30.120
<v Speaker 1>I restate different services. I see. Yes. Of

01:05:30.120 --> 01:05:33.674
<v Speaker 1>course. Yeah. Yeah. So Restate becomes the orchestrator

01:05:33.674 --> 01:05:35.914
<v Speaker 0>of these rights so that when I do

01:05:35.914 --> 01:05:36.474
<v Speaker 0>have

01:05:37.835 --> 01:05:41.115
<v Speaker 0>GraphQL endpoint and the same, it's a mutation

01:05:41.115 --> 01:05:42.795
<v Speaker 0>and, say, we say create show.

01:05:48.120 --> 01:05:49.560
<v Speaker 0>I'm not gonna actually do this. It's not

01:05:49.560 --> 01:05:51.480
<v Speaker 0>gonna work. Hosts,

01:05:51.480 --> 01:05:54.040
<v Speaker 0>and that could be Rawkode is the idea.

01:05:54.040 --> 01:05:54.920
<v Speaker 0>Like, whatever.

01:05:56.200 --> 01:05:57.640
<v Speaker 0>This has to have a resolver that can

01:05:57.640 --> 01:05:59.800
<v Speaker 0>create the show, but then has to guarantee

01:05:59.800 --> 01:06:02.225
<v Speaker 0>that the Rawkode exists and then create it

01:06:02.225 --> 01:06:03.265
<v Speaker 0>with another server.

01:06:03.745 --> 01:06:05.505
<v Speaker 0>But it gets quite complicated from our right

01:06:05.505 --> 01:06:07.425
<v Speaker 0>perspective, but I'm okay taking on that burden

01:06:07.425 --> 01:06:09.105
<v Speaker 0>because I get the read API that I

01:06:09.105 --> 01:06:11.345
<v Speaker 0>want for the website, the platform, the apps,

01:06:11.345 --> 01:06:13.585
<v Speaker 0>all of the automation. Oh, you. Great. Very

01:06:13.585 --> 01:06:13.745
<v Speaker 0>cool.

01:06:14.970 --> 01:06:16.970
<v Speaker 0>So I know we're we're deteriorating the fuck

01:06:16.970 --> 01:06:18.170
<v Speaker 0>now, but let me go back to the

01:06:18.170 --> 01:06:18.650
<v Speaker 1>technology.

01:06:18.970 --> 01:06:20.970
<v Speaker 1>Really understand the problem now. I I was

01:06:20.970 --> 01:06:22.410
<v Speaker 1>waiting for it to get to, like, the

01:06:22.490 --> 01:06:24.170
<v Speaker 1>restate bit. I totally understand. This is a

01:06:24.170 --> 01:06:26.170
<v Speaker 1>dual right. You've disaggregated.

01:06:27.065 --> 01:06:29.145
<v Speaker 1>Yeah. I mean, Ahmed's in the comments saying,

01:06:29.145 --> 01:06:30.665
<v Speaker 1>just do the whole thing and reset, mate.

01:06:30.665 --> 01:06:31.545
<v Speaker 1>Problem solved.

01:06:34.825 --> 01:06:36.745
<v Speaker 1>That is actually a dual right. But

01:06:36.985 --> 01:06:38.505
<v Speaker 1>you still have foreign I mean, you still

01:06:38.505 --> 01:06:40.025
<v Speaker 1>have foreign keys and re I mean, we

01:06:40.025 --> 01:06:41.465
<v Speaker 1>still have this concept in Restate. You still

01:06:41.465 --> 01:06:43.970
<v Speaker 1>have, like, IDs and, I mean, you know,

01:06:43.970 --> 01:06:46.130
<v Speaker 1>keys for virtual objects, and you still have

01:06:46.130 --> 01:06:48.609
<v Speaker 1>to read across two different services and write

01:06:48.609 --> 01:06:50.930
<v Speaker 1>across two different services. The difference would be

01:06:51.410 --> 01:06:53.650
<v Speaker 1>the right sort of can't fail,

01:06:53.650 --> 01:06:54.609
<v Speaker 1>I guess, in a

01:06:55.250 --> 01:06:58.635
<v Speaker 1>they can't transiently fail. So if you risk

01:06:58.635 --> 01:07:00.795
<v Speaker 1>right call 1 and then call 2 to

01:07:00.795 --> 01:07:02.315
<v Speaker 1>do the first right and the second right,

01:07:02.315 --> 01:07:03.515
<v Speaker 1>you don't have to have a lock or

01:07:03.515 --> 01:07:04.955
<v Speaker 1>a transaction or anything like that because Restate

01:07:04.955 --> 01:07:06.475
<v Speaker 1>would guarantee they would run to the end.

01:07:06.635 --> 01:07:07.835
<v Speaker 1>But you can still do this even if

01:07:07.835 --> 01:07:09.515
<v Speaker 1>they're external systems, even if you have to

01:07:09.515 --> 01:07:10.875
<v Speaker 1>talk to these services that aren't running at

01:07:10.875 --> 01:07:12.640
<v Speaker 1>Restate. It's just easier if they do run

01:07:12.640 --> 01:07:14.320
<v Speaker 1>at Restate, of course. Well,

01:07:17.920 --> 01:07:19.920
<v Speaker 0>we are quickly running out of time, and

01:07:19.920 --> 01:07:21.360
<v Speaker 0>you've given me lots of fit for thought

01:07:21.360 --> 01:07:23.760
<v Speaker 0>there. I'm gonna suggest that maybe there's

01:07:24.375 --> 01:07:26.295
<v Speaker 0>a part two where we can actually dive

01:07:26.295 --> 01:07:27.735
<v Speaker 0>into how we could put in a virtual

01:07:27.735 --> 01:07:30.055
<v Speaker 0>object approach and and build something out.

01:07:30.535 --> 01:07:32.375
<v Speaker 0>But I'll finish my train of thought and

01:07:32.375 --> 01:07:34.375
<v Speaker 0>just where I am with the technology service.

01:07:35.095 --> 01:07:37.175
<v Speaker 0>Now Restate as an opinionated about where my

01:07:37.175 --> 01:07:38.680
<v Speaker 0>services are deployed. The fact that I was

01:07:38.680 --> 01:07:40.840
<v Speaker 0>putting them into a single RPC deployment was

01:07:40.840 --> 01:07:43.160
<v Speaker 0>for convenience at the start, but now I'm

01:07:43.160 --> 01:07:43.960
<v Speaker 0>like, actually,

01:07:44.840 --> 01:07:47.400
<v Speaker 0>what I need is inside this technology service

01:07:47.400 --> 01:07:49.240
<v Speaker 0>is a Restate directory,

01:07:49.800 --> 01:07:51.480
<v Speaker 0>which has a single handler, which I deploy

01:07:51.480 --> 01:07:53.835
<v Speaker 0>to cloud for workers and register with the

01:07:53.835 --> 01:07:55.915
<v Speaker 0>server. And that way, I can share

01:07:56.315 --> 01:07:56.955
<v Speaker 0>my

01:07:57.755 --> 01:07:59.835
<v Speaker 0>Drezel value dot schema, which allows me to

01:07:59.835 --> 01:08:01.595
<v Speaker 0>do the input validation

01:08:01.675 --> 01:08:04.155
<v Speaker 0>before doing the right to the Turtle database.

01:08:04.155 --> 01:08:06.474
<v Speaker 0>And that's gonna be my model moving forward

01:08:06.474 --> 01:08:08.300
<v Speaker 0>for every single right within the system. So

01:08:08.300 --> 01:08:10.380
<v Speaker 0>every write is going through Restate. Nothing will

01:08:10.380 --> 01:08:11.420
<v Speaker 0>go through GraphQL.

01:08:11.500 --> 01:08:12.860
<v Speaker 0>It's all gonna be RPC.

01:08:13.100 --> 01:08:15.900
<v Speaker 0>But instead of having a single RPC service,

01:08:15.900 --> 01:08:18.620
<v Speaker 0>I'm gonna have many, many RPC services that

01:08:18.620 --> 01:08:21.020
<v Speaker 0>Restate as the orchestrator of.

01:08:21.420 --> 01:08:23.965
<v Speaker 1>Yep. Yep. And do you think that these

01:08:23.965 --> 01:08:25.404
<v Speaker 1>rights will still go

01:08:25.724 --> 01:08:28.204
<v Speaker 1>Restate and then a non Restate service and

01:08:28.204 --> 01:08:30.125
<v Speaker 1>then Terso, or would you be happy for

01:08:30.125 --> 01:08:30.844
<v Speaker 1>them to be

01:08:31.724 --> 01:08:33.804
<v Speaker 1>talking to the database directly from Restate? In

01:08:33.804 --> 01:08:35.724
<v Speaker 1>which case, things I think would be a

01:08:35.724 --> 01:08:38.020
<v Speaker 1>lot easier. I'm gonna have Restate talk to

01:08:38.020 --> 01:08:39.300
<v Speaker 0>the database, and we can I mean, we've

01:08:39.300 --> 01:08:40.660
<v Speaker 0>got twenty minutes? Okay. So you We could

01:08:40.660 --> 01:08:42.420
<v Speaker 0>probably do this thing. About convert yeah. I

01:08:42.420 --> 01:08:44.180
<v Speaker 1>think we could convert one of these

01:08:44.740 --> 01:08:47.700
<v Speaker 0>Because the Dressel's client is regular. Object. Right?

01:08:48.435 --> 01:08:49.234
<v Speaker 0>So and

01:08:49.875 --> 01:08:51.554
<v Speaker 0>so let's just say we had

01:08:53.314 --> 01:08:54.194
<v Speaker 0>Restate.

01:08:56.034 --> 01:08:57.554
<v Speaker 0>I'll be bold now because I do have

01:08:57.554 --> 01:08:58.755
<v Speaker 0>buttoned this dev in.

01:09:01.074 --> 01:09:01.954
<v Speaker 0>And

01:09:03.559 --> 01:09:06.359
<v Speaker 0>I'm just gonna delete that. Holding one. Why

01:09:06.359 --> 01:09:07.639
<v Speaker 1>don't you try the there should be a

01:09:07.639 --> 01:09:09.239
<v Speaker 1>BUN template. Oh, have you used the BUN

01:09:09.239 --> 01:09:11.239
<v Speaker 1>template for Restate? No.

01:09:11.639 --> 01:09:13.479
<v Speaker 1>There should be if you do Restate example,

01:09:13.479 --> 01:09:15.719
<v Speaker 1>like, the CLI. Oh, there is. Okay. Yeah.

01:09:15.719 --> 01:09:16.519
<v Speaker 1>Yeah. You should try that.

01:09:17.224 --> 01:09:19.064
<v Speaker 0>Well, I don't have the CLI.

01:09:19.304 --> 01:09:21.465
<v Speaker 0>But I'm installing MPX. No?

01:09:23.224 --> 01:09:24.824
<v Speaker 1>Oh, sorry. You're in a different directory, so

01:09:24.824 --> 01:09:26.505
<v Speaker 1>you have, like, totally different tools now, don't

01:09:26.505 --> 01:09:26.984
<v Speaker 1>you?

01:09:27.864 --> 01:09:29.465
<v Speaker 0>Oh, Restate there for it.

01:09:30.344 --> 01:09:31.784
<v Speaker 1>Yeah. Exactly. Yeah.

01:09:33.210 --> 01:09:34.090
<v Speaker 0>That's it.

01:09:36.250 --> 01:09:38.090
<v Speaker 0>Okay. So we can do ban

01:09:38.170 --> 01:09:38.969
<v Speaker 0>run

01:09:38.970 --> 01:09:40.329
<v Speaker 0>at least date.

01:09:43.290 --> 01:09:44.170
<v Speaker 1>Example

01:09:44.490 --> 01:09:45.210
<v Speaker 1>done, I think.

01:09:46.435 --> 01:09:47.795
<v Speaker 0>Let's just pull it up. So

01:09:50.915 --> 01:09:52.275
<v Speaker 1>No. I don't think it's used there because

01:09:52.275 --> 01:09:53.795
<v Speaker 1>you don't have the CLI yet there.

01:09:56.355 --> 01:09:58.195
<v Speaker 1>Maybe I don't know where it would be

01:09:58.195 --> 01:09:58.435
<v Speaker 1>used.

01:09:59.070 --> 01:09:59.710
<v Speaker 1>Operate.

01:10:00.190 --> 01:10:01.950
<v Speaker 0>We can just run help. Just give it

01:10:01.950 --> 01:10:02.590
<v Speaker 1>a try.

01:10:04.110 --> 01:10:04.750
<v Speaker 0>Oh.

01:10:05.790 --> 01:10:07.550
<v Speaker 0>Because it's in my globals.

01:10:08.750 --> 01:10:09.230
<v Speaker 0>Oh, no.

01:10:13.455 --> 01:10:16.175
<v Speaker 1>That looks right. There we go. Yes. Okay.

01:10:16.175 --> 01:10:17.695
<v Speaker 1>So it should be example.

01:10:17.775 --> 01:10:19.135
<v Speaker 1>Yeah. I think you just run example, and

01:10:19.135 --> 01:10:20.255
<v Speaker 1>then it will ask you.

01:10:20.895 --> 01:10:22.495
<v Speaker 1>You can just do example. It will ask

01:10:22.495 --> 01:10:23.614
<v Speaker 1>you what you wanna do.

01:10:25.135 --> 01:10:25.935
<v Speaker 1>Yeah.

01:10:26.415 --> 01:10:27.055
<v Speaker 1>TypeScript

01:10:28.690 --> 01:10:30.370
<v Speaker 1>Fun. Hello. Well, it's nice.

01:10:33.810 --> 01:10:34.690
<v Speaker 0>Alright.

01:10:34.770 --> 01:10:37.650
<v Speaker 0>Let's just I'm just gonna extract this up.

01:10:39.090 --> 01:10:40.770
<v Speaker 0>Won't pull it that way. Don't mind.

01:10:44.925 --> 01:10:46.764
<v Speaker 0>Don't know what temp does this the ZIP.

01:10:46.764 --> 01:10:48.204
<v Speaker 1>You don't need the ZIP. Don't worry.

01:10:48.525 --> 01:10:49.244
<v Speaker 0>Alright.

01:10:49.965 --> 01:10:52.604
<v Speaker 0>Okay. So now we have a Restate

01:10:53.085 --> 01:10:55.405
<v Speaker 0>reader service and button. Yeah. And I'll just

01:10:55.405 --> 01:10:56.445
<v Speaker 0>make sure that works.

01:10:56.929 --> 01:10:58.610
<v Speaker 0>So I should be able to do

01:11:00.210 --> 01:11:01.810
<v Speaker 1>I don't know what the script is for

01:11:01.810 --> 01:11:04.449
<v Speaker 1>BUN. It's just dev. Oh, there we go.

01:11:04.449 --> 01:11:06.690
<v Speaker 0>Dev. Alright. Okay. Unify

01:11:06.690 --> 01:11:08.210
<v Speaker 1>those. BUN install.

01:11:15.614 --> 01:11:17.695
<v Speaker 1>Yeah. Just got it running on another port.

01:11:19.775 --> 01:11:21.135
<v Speaker 1>Not that one, I think.

01:11:21.614 --> 01:11:22.335
<v Speaker 1>That one. Yeah.

01:11:23.880 --> 01:11:25.880
<v Speaker 0>Okay. Nice. Good. So now we have a

01:11:25.880 --> 01:11:28.600
<v Speaker 0>service. So now what we wanna be able

01:11:28.600 --> 01:11:29.400
<v Speaker 0>to do here

01:11:30.280 --> 01:11:32.120
<v Speaker 0>is called create

01:11:32.280 --> 01:11:33.160
<v Speaker 0>technology.

01:11:34.200 --> 01:11:36.040
<v Speaker 0>I don't think that's really important, but I

01:11:36.040 --> 01:11:36.520
<v Speaker 0>don't know.

01:11:38.565 --> 01:11:39.525
<v Speaker 0>Technologies

01:11:41.045 --> 01:11:41.925
<v Speaker 0>create.

01:11:46.965 --> 01:11:48.565
<v Speaker 0>And that's one step closer.

01:11:53.780 --> 01:11:55.540
<v Speaker 0>This could literally be the first public user

01:11:55.540 --> 01:11:58.100
<v Speaker 0>to just release 1.1. Yeah. I mean, yeah.

01:11:58.420 --> 01:12:00.500
<v Speaker 1>It's true. You sure you don't wanna do

01:12:00.500 --> 01:12:01.700
<v Speaker 0>this with Rust? No. I mean, I'm just

01:12:01.940 --> 01:12:02.420
<v Speaker 1>No. No. No.

01:12:04.635 --> 01:12:07.195
<v Speaker 0>Okay. So we already have types here. So

01:12:07.195 --> 01:12:08.795
<v Speaker 0>let's do import

01:12:09.035 --> 01:12:09.755
<v Speaker 0>from

01:12:10.075 --> 01:12:10.955
<v Speaker 0>Drizzle.

01:12:11.035 --> 01:12:16.955
<v Speaker 0>Drizzle

01:12:18.559 --> 01:12:19.519
<v Speaker 0>schema,

01:12:19.760 --> 01:12:20.400
<v Speaker 0>so

01:12:20.639 --> 01:12:21.039
<v Speaker 0>no.

01:12:22.800 --> 01:12:25.039
<v Speaker 0>I wouldn't normally import them like this.

01:12:25.760 --> 01:12:26.320
<v Speaker 0>I

01:12:26.719 --> 01:12:27.439
<v Speaker 0>would

01:12:29.440 --> 01:12:30.959
<v Speaker 0>but workspace it.

01:12:31.360 --> 01:12:32.079
<v Speaker 0>But

01:12:33.315 --> 01:12:34.755
<v Speaker 1>And are the Drizzle,

01:12:34.755 --> 01:12:36.675
<v Speaker 1>like, operations, like, when you do get and

01:12:36.675 --> 01:12:38.515
<v Speaker 1>set, are they sort of idempotent?

01:12:38.515 --> 01:12:40.435
<v Speaker 1>Like, how how does Drizzle do I guess,

01:12:40.435 --> 01:12:41.635
<v Speaker 1>is that transactional?

01:12:42.755 --> 01:12:44.035
<v Speaker 0>I mean, I could do it. But would

01:12:43.875 --> 01:12:45.395
<v Speaker 1>would it always be, like, create

01:12:45.790 --> 01:12:47.870
<v Speaker 1>create if not exists in this sort of

01:12:47.870 --> 01:12:50.270
<v Speaker 1>thing or up update or insert this sort

01:12:50.270 --> 01:12:52.350
<v Speaker 1>thing? I I think it's just doing an

01:12:52.350 --> 01:12:53.229
<v Speaker 0>insert.

01:12:53.630 --> 01:12:54.349
<v Speaker 1>Okay.

01:12:54.830 --> 01:12:56.030
<v Speaker 0>But, you know, we don't need to get

01:12:56.030 --> 01:12:56.829
<v Speaker 0>into the

01:12:57.230 --> 01:12:59.309
<v Speaker 0>technicalities of it right now.

01:12:59.630 --> 01:12:59.870
<v Speaker 1>Okay.

01:13:01.265 --> 01:13:04.145
<v Speaker 0>This gives us a TypeScript type.

01:13:05.345 --> 01:13:06.865
<v Speaker 0>I wonder if I can just do

01:13:10.465 --> 01:13:11.665
<v Speaker 1>Should be able to. Yeah.

01:13:15.420 --> 01:13:17.260
<v Speaker 0>Type off. Maybe import type. Or

01:13:17.740 --> 01:13:18.460
<v Speaker 0>There

01:13:19.100 --> 01:13:19.820
<v Speaker 0>we go.

01:13:20.700 --> 01:13:22.780
<v Speaker 0>And now we just have something where I

01:13:22.780 --> 01:13:23.659
<v Speaker 0>could say

01:13:23.900 --> 01:13:26.945
<v Speaker 0>technology.no.

01:13:30.305 --> 01:13:32.305
<v Speaker 0>We'll get to it in a minute. I'm

01:13:32.305 --> 01:13:34.225
<v Speaker 0>sure we can work it out. So Mhmm.

01:13:38.560 --> 01:13:41.120
<v Speaker 0>See, as a value, let's let's just

01:13:41.680 --> 01:13:43.280
<v Speaker 0>let's not get ahead of myself. Right? Let's

01:13:43.280 --> 01:13:45.440
<v Speaker 0>just take something. Because

01:13:45.520 --> 01:13:46.960
<v Speaker 0>what I could do now is I can

01:13:46.960 --> 01:13:49.200
<v Speaker 0>use my technologies and search schema.

01:13:53.345 --> 01:13:54.785
<v Speaker 0>We may have to look up the Drezel

01:13:54.785 --> 01:13:55.505
<v Speaker 0>docs.

01:13:55.585 --> 01:13:57.105
<v Speaker 0>There's a validate function.

01:13:57.905 --> 01:13:59.825
<v Speaker 1>Maybe I have to copy for whatever handler

01:13:59.825 --> 01:14:01.345
<v Speaker 1>you currently have. Right?

01:14:02.785 --> 01:14:03.585
<v Speaker 0>It's broken.

01:14:04.510 --> 01:14:06.190
<v Speaker 0>I'm actually because as you could tell, I'm

01:14:06.190 --> 01:14:07.790
<v Speaker 0>on a branch where I've been rewriting this.

01:14:07.790 --> 01:14:08.830
<v Speaker 1>Oh, okay. Yeah. Yeah.

01:14:10.510 --> 01:14:12.510
<v Speaker 0>Here. Create insert schema.

01:14:14.430 --> 01:14:17.070
<v Speaker 0>And then Oh, it's we can call pars

01:14:17.070 --> 01:14:18.670
<v Speaker 0>passing in the schema. Okay.

01:14:24.025 --> 01:14:24.585
<v Speaker 0>So

01:14:25.625 --> 01:14:26.185
<v Speaker 0>pars.

01:14:34.840 --> 01:14:36.440
<v Speaker 0>I'm gonna have to add Drizzle

01:14:37.320 --> 01:14:39.640
<v Speaker 0>Mhmm. To this. This is where I should

01:14:39.640 --> 01:14:41.240
<v Speaker 0>have done it as up on workspace.

01:14:43.235 --> 01:14:45.234
<v Speaker 0>That's what I get for being half assed.

01:14:45.474 --> 01:14:46.914
<v Speaker 0>I mean, I don't really need this package

01:14:46.914 --> 01:14:48.274
<v Speaker 0>dot JSON. Right?

01:14:49.315 --> 01:14:50.514
<v Speaker 0>I just need these

01:14:50.835 --> 01:14:51.874
<v Speaker 0>dependencies.

01:14:52.835 --> 01:14:54.275
<v Speaker 1>Yeah. Yeah. I shouldn't need it, but I

01:14:54.275 --> 01:14:55.554
<v Speaker 1>don't think so. As long as I'm than

01:14:55.554 --> 01:14:57.315
<v Speaker 0>me duplicating all of this. Now I know

01:14:57.315 --> 01:14:59.550
<v Speaker 0>there's cleaner, nicer ways to do this.

01:15:01.710 --> 01:15:02.989
<v Speaker 0>Let's just take that out.

01:15:11.715 --> 01:15:14.275
<v Speaker 0>Scripts is fine. Dependencies.

01:15:19.395 --> 01:15:21.874
<v Speaker 0>Dev dependency is probably okay.

01:15:22.114 --> 01:15:24.114
<v Speaker 0>But Yeah. But don't need anything.

01:15:24.995 --> 01:15:25.395
<v Speaker 0>Okay.

01:15:27.090 --> 01:15:27.810
<v Speaker 0>So

01:15:27.970 --> 01:15:29.250
<v Speaker 0>I could do we should be able to

01:15:29.250 --> 01:15:31.570
<v Speaker 0>run button install. It does appear directory.

01:15:31.890 --> 01:15:34.770
<v Speaker 1>Mhmm. This now means I can get parse,

01:15:34.770 --> 01:15:36.690
<v Speaker 0>which is probably morning because it's not used.

01:15:36.690 --> 01:15:37.570
<v Speaker 0>That's okay.

01:15:37.970 --> 01:15:40.450
<v Speaker 0>And and here, we can see

01:15:40.770 --> 01:15:41.810
<v Speaker 0>parse

01:15:42.665 --> 01:15:44.425
<v Speaker 0>like so. So now we know we have

01:15:44.425 --> 01:15:45.785
<v Speaker 0>a valid technology.

01:15:46.425 --> 01:15:48.025
<v Speaker 0>And I'll pull those docs back up. And

01:15:48.025 --> 01:15:49.225
<v Speaker 1>if we don't, I guess, we would usually

01:15:49.225 --> 01:15:51.145
<v Speaker 1>throw a terminal error, which is, like, telling

01:15:51.145 --> 01:15:51.945
<v Speaker 1>Restate

01:15:52.265 --> 01:15:54.505
<v Speaker 1>this is, like, never gonna succeed because the

01:15:54.505 --> 01:15:55.385
<v Speaker 1>input is

01:15:55.545 --> 01:15:55.865
<v Speaker 1>bad.

01:15:56.840 --> 01:15:57.560
<v Speaker 0>Yeah.

01:15:57.720 --> 01:15:59.000
<v Speaker 0>The problem we have

01:15:59.400 --> 01:16:01.400
<v Speaker 0>now is when I generate a type client

01:16:01.400 --> 01:16:02.920
<v Speaker 0>for the service, I'm not gonna get the

01:16:02.920 --> 01:16:04.120
<v Speaker 0>fields that I actually need to be able

01:16:04.120 --> 01:16:05.160
<v Speaker 0>to fill in. So I need to do

01:16:05.160 --> 01:16:06.920
<v Speaker 0>this, and I do need to solve that.

01:16:06.920 --> 01:16:08.840
<v Speaker 1>You need to solve the type of schema

01:16:08.840 --> 01:16:10.520
<v Speaker 1>thing. Yep. Yep. Yeah. I need to work

01:16:10.520 --> 01:16:11.400
<v Speaker 0>out that. So

01:16:12.885 --> 01:16:14.725
<v Speaker 0>but in theory, I should now be able

01:16:14.725 --> 01:16:15.445
<v Speaker 0>to do

01:16:17.685 --> 01:16:19.045
<v Speaker 0>if we import

01:16:22.725 --> 01:16:23.845
<v Speaker 0>knowledge's table,

01:16:26.310 --> 01:16:27.910
<v Speaker 0>Start my imports for me.

01:16:29.030 --> 01:16:30.870
<v Speaker 0>I was hoping that we'd move that here.

01:16:33.350 --> 01:16:35.270
<v Speaker 0>And Rusta would have done it for me.

01:16:35.270 --> 01:16:35.989
<v Speaker 0>Yeah.

01:16:36.630 --> 01:16:39.155
<v Speaker 0>Oh, that didn't even work. Right. Now we

01:16:39.155 --> 01:16:40.594
<v Speaker 0>can just say technologies

01:16:47.635 --> 01:16:49.475
<v Speaker 0>well, that's that this is the tape. That's

01:16:49.475 --> 01:16:50.755
<v Speaker 0>that's interesting. Okay.

01:16:54.750 --> 01:16:56.110
<v Speaker 0>Let me pull up my graph here. So

01:16:56.110 --> 01:16:57.790
<v Speaker 0>I've forgotten how to drizzle now. It's it's

01:16:57.790 --> 01:16:58.749
<v Speaker 0>too much pressure.

01:17:00.270 --> 01:17:01.869
<v Speaker 0>Oh, yeah. That looks right. Yeah.

01:17:02.989 --> 01:17:04.030
<v Speaker 1>That looks right. Okay.

01:17:07.895 --> 01:17:10.375
<v Speaker 0>Stop watching me. Alright. Okay.

01:17:11.255 --> 01:17:12.135
<v Speaker 0>Import

01:17:13.175 --> 01:17:14.215
<v Speaker 0>import

01:17:16.535 --> 01:17:17.494
<v Speaker 0>schema.

01:17:18.535 --> 01:17:20.055
<v Speaker 1>That might be the type you were missing

01:17:20.055 --> 01:17:21.735
<v Speaker 1>for oh, no. That could be the insert

01:17:21.735 --> 01:17:22.295
<v Speaker 1>schema.

01:17:23.150 --> 01:17:24.750
<v Speaker 0>That's the star.

01:17:25.150 --> 01:17:26.670
<v Speaker 0>So Oh.

01:17:27.470 --> 01:17:29.310
<v Speaker 0>Which is gonna have to go up one

01:17:29.310 --> 01:17:30.429
<v Speaker 0>more directory.

01:17:30.670 --> 01:17:32.190
<v Speaker 0>Yeah. No. Yeah.

01:17:34.830 --> 01:17:35.790
<v Speaker 0>Yeah. Okay.

01:17:36.910 --> 01:17:37.470
<v Speaker 0>Schema.

01:17:37.895 --> 01:17:40.135
<v Speaker 0>So now this is actually d p

01:17:40.855 --> 01:17:41.894
<v Speaker 0>insert

01:17:42.935 --> 01:17:45.255
<v Speaker 0>and technologies table two. Okay.

01:17:45.655 --> 01:17:47.255
<v Speaker 0>No. This is untyped.

01:17:47.495 --> 01:17:47.815
<v Speaker 0>So

01:17:50.150 --> 01:17:52.390
<v Speaker 0>and it wanted an extra argument.

01:17:54.550 --> 01:17:57.190
<v Speaker 0>I'm just gonna use the docs because I

01:17:57.190 --> 01:17:58.630
<v Speaker 0>have no idea what I'm doing.

01:18:00.150 --> 01:18:01.030
<v Speaker 0>Users values.

01:18:03.035 --> 01:18:04.635
<v Speaker 1>So you do the table first and then

01:18:04.635 --> 01:18:06.155
<v Speaker 1>the right. Yeah. Yeah. Okay.

01:18:12.315 --> 01:18:13.114
<v Speaker 1>Done.

01:18:13.275 --> 01:18:13.835
<v Speaker 1>Nice.

01:18:15.850 --> 01:18:17.370
<v Speaker 1>So if that's the last step, you don't

01:18:17.370 --> 01:18:18.890
<v Speaker 1>even need to use a context dot run

01:18:18.890 --> 01:18:19.690
<v Speaker 1>because,

01:18:19.930 --> 01:18:22.010
<v Speaker 1>I mean, it's the last step anyway. It's

01:18:22.010 --> 01:18:24.410
<v Speaker 1>nothing afterwards would ever happen.

01:18:27.290 --> 01:18:27.610
<v Speaker 0>Yeah.

01:18:28.915 --> 01:18:31.155
<v Speaker 0>Well, that would work. That would kinda work.

01:18:31.875 --> 01:18:33.395
<v Speaker 1>And then if you need to do, like,

01:18:33.395 --> 01:18:34.114
<v Speaker 1>multiple

01:18:34.275 --> 01:18:35.475
<v Speaker 1>of these calls,

01:18:35.795 --> 01:18:37.715
<v Speaker 1>like, you're calling technologies create and then you're

01:18:37.715 --> 01:18:39.235
<v Speaker 1>calling something else dot create.

01:18:39.635 --> 01:18:42.300
<v Speaker 0>So technology says the easiest service, and it

01:18:42.300 --> 01:18:44.699
<v Speaker 0>doesn't have any dependencies. It just needs to

01:18:44.699 --> 01:18:45.900
<v Speaker 0>set a service. But, you know, if we

01:18:45.900 --> 01:18:47.980
<v Speaker 0>were doing a more complex example, like the

01:18:47.980 --> 01:18:48.939
<v Speaker 0>show hosts,

01:18:49.260 --> 01:18:51.020
<v Speaker 0>yes, we would have to first do a

01:18:51.020 --> 01:18:52.780
<v Speaker 0>query to make sure the show exists, make

01:18:52.780 --> 01:18:54.060
<v Speaker 0>a query to make sure the

01:18:54.645 --> 01:18:56.164
<v Speaker 0>person exists,

01:18:56.485 --> 01:18:58.485
<v Speaker 0>then do the answer, assuming they're not already

01:18:58.485 --> 01:19:00.324
<v Speaker 0>inserted into the thing. So there's all there

01:19:00.324 --> 01:19:02.164
<v Speaker 0>is a lot more logic. This is the

01:19:02.164 --> 01:19:04.485
<v Speaker 0>most primitive version of the right that we

01:19:04.485 --> 01:19:05.764
<v Speaker 0>could possibly do.

01:19:06.244 --> 01:19:07.844
<v Speaker 0>Yeah. What I'm curious about is where I

01:19:07.844 --> 01:19:09.125
<v Speaker 0>can get that typed work.

01:19:15.760 --> 01:19:16.640
<v Speaker 0>It could be a

01:19:19.040 --> 01:19:21.840
<v Speaker 0>No. That's just that's a actual table. So

01:19:22.000 --> 01:19:22.240
<v Speaker 0>Mhmm.

01:19:23.795 --> 01:19:25.315
<v Speaker 0>There must be a way to infer. Oh,

01:19:25.315 --> 01:19:27.715
<v Speaker 0>there is a infer function. Right? So

01:19:28.114 --> 01:19:30.114
<v Speaker 0>but I'm doing that with the

01:19:30.994 --> 01:19:32.034
<v Speaker 0>insert schema.

01:19:42.070 --> 01:19:43.510
<v Speaker 1>This is voodoo to me.

01:19:43.830 --> 01:19:45.750
<v Speaker 1>Yeah. Probably this TypeScript type stuff is that

01:19:45.750 --> 01:19:47.510
<v Speaker 1>when it when it's not working, it's, like,

01:19:47.510 --> 01:19:49.590
<v Speaker 1>impossible to figure out why. And when it

01:19:49.590 --> 01:19:50.710
<v Speaker 1>works, it's, like, so magic.

01:19:51.525 --> 01:19:53.765
<v Speaker 0>Yeah. I I don't think it's important for

01:19:53.765 --> 01:19:54.325
<v Speaker 0>the

01:19:54.645 --> 01:19:56.565
<v Speaker 0>the demo. Like, the fact that I have

01:19:56.565 --> 01:19:58.565
<v Speaker 0>this function, which I can now deploy and

01:19:58.565 --> 01:20:00.485
<v Speaker 0>register with the thing is is important. I

01:20:00.485 --> 01:20:01.525
<v Speaker 0>would love to be able to run it.

01:20:01.525 --> 01:20:02.885
<v Speaker 0>I don't think it's gonna work right now.

01:20:02.885 --> 01:20:04.725
<v Speaker 0>And it's more than about my Libiscale client,

01:20:04.725 --> 01:20:05.685
<v Speaker 0>which I've not seen before.

01:20:07.670 --> 01:20:09.510
<v Speaker 0>I'm not sure. Is that just because of

01:20:09.510 --> 01:20:10.709
<v Speaker 0>this TS config?

01:20:10.790 --> 01:20:12.550
<v Speaker 1>Yeah. Maybe I haven't imported it.

01:20:13.190 --> 01:20:14.710
<v Speaker 1>Like, because Well, I have a I moved

01:20:14.710 --> 01:20:16.550
<v Speaker 0>it in the title. Right?

01:20:16.550 --> 01:20:17.989
<v Speaker 0>So And you definitely have it at the

01:20:17.989 --> 01:20:20.869
<v Speaker 1>root. So we're we're using this TS config.

01:20:23.165 --> 01:20:24.685
<v Speaker 0>So I might be able to just nuke

01:20:24.685 --> 01:20:26.045
<v Speaker 0>your Restate one.

01:20:26.685 --> 01:20:28.605
<v Speaker 1>Oh, yeah. Yeah. You probably didn't need that.

01:20:31.245 --> 01:20:32.925
<v Speaker 0>Restart Oh, yeah. That fixes the yeah.

01:20:33.485 --> 01:20:34.605
<v Speaker 1>Yeah. Nice.

01:20:35.085 --> 01:20:37.645
<v Speaker 0>And I curious if that fixes. No.

01:20:38.340 --> 01:20:40.100
<v Speaker 0>I can get to that type, but I

01:20:40.100 --> 01:20:40.820
<v Speaker 0>can't

01:20:41.860 --> 01:20:44.100
<v Speaker 0>I'm not quite getting the exact type information

01:20:44.100 --> 01:20:45.540
<v Speaker 0>that I expect here, but I think that's

01:20:45.540 --> 01:20:47.540
<v Speaker 0>possible because of this any type.

01:20:48.020 --> 01:20:49.460
<v Speaker 0>Like, if I break everything,

01:20:49.940 --> 01:20:52.180
<v Speaker 0>this definitely fails. Ah, okay. Yeah.

01:20:53.025 --> 01:20:55.105
<v Speaker 0>So, yeah, there's something that I'm gonna have

01:20:55.105 --> 01:20:56.225
<v Speaker 0>to work out. I'm not gonna be able

01:20:56.225 --> 01:20:57.505
<v Speaker 0>to do it in nine minutes on this

01:20:57.505 --> 01:20:59.664
<v Speaker 0>session. Alright. That's fine. That's totally fine.

01:21:00.065 --> 01:21:01.505
<v Speaker 0>I think that's pretty cool.

01:21:02.225 --> 01:21:03.985
<v Speaker 0>And it's something I need to get working

01:21:04.620 --> 01:21:07.180
<v Speaker 0>today anyway. This was after the session. This

01:21:07.180 --> 01:21:08.540
<v Speaker 0>is what I was gonna be working on

01:21:08.540 --> 01:21:09.820
<v Speaker 0>for the rest of the day.

01:21:10.540 --> 01:21:12.140
<v Speaker 0>And I feel the point here, right, is

01:21:12.140 --> 01:21:13.740
<v Speaker 1>that, like, you haven't really written, in this

01:21:13.740 --> 01:21:15.420
<v Speaker 1>case, the service in any in any different

01:21:15.420 --> 01:21:17.420
<v Speaker 1>way. And the main benefit we're getting from

01:21:17.420 --> 01:21:19.340
<v Speaker 1>from Restate here is just for the communication

01:21:19.340 --> 01:21:22.245
<v Speaker 1>between services that that becomes, like, exactly once

01:21:22.245 --> 01:21:23.684
<v Speaker 1>guaranteed, essentially.

01:21:24.085 --> 01:21:25.364
<v Speaker 1>And if you can just make that d

01:21:25.364 --> 01:21:27.284
<v Speaker 1>b dot insert step idempotent,

01:21:27.605 --> 01:21:29.765
<v Speaker 1>that's I think that's important as well. If

01:21:29.765 --> 01:21:31.525
<v Speaker 1>you can do that, then the whole thing

01:21:31.844 --> 01:21:33.765
<v Speaker 1>that that's basically the root of the distributed

01:21:33.765 --> 01:21:35.800
<v Speaker 1>systems problem here. As long as the database

01:21:35.800 --> 01:21:37.000
<v Speaker 1>right is unimportant,

01:21:37.000 --> 01:21:38.760
<v Speaker 1>everything else should work with Restate.

01:21:40.600 --> 01:21:41.800
<v Speaker 0>Yeah. I mean,

01:21:42.440 --> 01:21:44.040
<v Speaker 0>I can start a transaction,

01:21:44.920 --> 01:21:46.920
<v Speaker 0>and then it becomes an item. At least

01:21:46.920 --> 01:21:48.680
<v Speaker 0>it's either gonna success or fail. It's gonna

01:21:48.680 --> 01:21:50.704
<v Speaker 0>be atomic. And then that Yeah. Atomic is

01:21:50.704 --> 01:21:53.025
<v Speaker 1>easy with databases, but the critical thing is

01:21:53.025 --> 01:21:55.264
<v Speaker 1>that it's, it's like an update if if

01:21:55.264 --> 01:21:57.585
<v Speaker 1>exists. It's like insert or update is that

01:21:57.585 --> 01:21:59.344
<v Speaker 1>one. I'm I'm not a ShysQL expert, but

01:21:59.344 --> 01:22:00.704
<v Speaker 1>I think that's the critical thing. It needs

01:22:00.704 --> 01:22:03.600
<v Speaker 1>to not fail if the exists. If the

01:22:03.600 --> 01:22:05.280
<v Speaker 0>row exists. I want it to fail.

01:22:05.680 --> 01:22:07.600
<v Speaker 1>Oh, you do? Okay. But what if, let's

01:22:07.600 --> 01:22:10.160
<v Speaker 1>say, it gets past the DB right, but

01:22:10.160 --> 01:22:12.800
<v Speaker 1>then TURCE fails or whatever, and then it

01:22:12.800 --> 01:22:14.480
<v Speaker 1>wrote to the database, but it never returned

01:22:14.480 --> 01:22:14.960
<v Speaker 1>200.

01:22:15.375 --> 01:22:17.294
<v Speaker 1>Then Restate will retry. Right?

01:22:17.855 --> 01:22:19.614
<v Speaker 1>Then we'll write it again, and then it'll

01:22:19.614 --> 01:22:20.574
<v Speaker 1>fail permanently.

01:22:21.054 --> 01:22:21.614
<v Speaker 1>So,

01:22:22.094 --> 01:22:23.614
<v Speaker 1>yeah, why why why would it need to

01:22:23.614 --> 01:22:25.135
<v Speaker 1>fail if if the rows are already there?

01:22:25.135 --> 01:22:27.375
<v Speaker 1>Isn't that 200 okay? Like, we're out and

01:22:27.375 --> 01:22:28.175
<v Speaker 1>put it and we're okay.

01:22:30.130 --> 01:22:31.889
<v Speaker 0>Yeah. I suppose we can do an answer

01:22:31.889 --> 01:22:35.010
<v Speaker 0>on update. Like, that would Yeah. Would work.

01:22:35.010 --> 01:22:36.609
<v Speaker 1>Generally, I would say that's better.

01:22:37.329 --> 01:22:40.530
<v Speaker 0>Does support that anyway on conflicting data update,

01:22:40.530 --> 01:22:41.570
<v Speaker 0>and then we specify.

01:22:41.809 --> 01:22:43.570
<v Speaker 1>Okay. Great. So that's really all you need

01:22:43.275 --> 01:22:45.275
<v Speaker 1>for this to be, like, a well behaved

01:22:45.275 --> 01:22:47.275
<v Speaker 1>Restate service. So the idea is that, like

01:22:47.594 --> 01:22:49.594
<v Speaker 0>Like so. We we are kind of saying

01:22:49.594 --> 01:22:52.715
<v Speaker 1>here that failures are all transient failures should

01:22:52.715 --> 01:22:54.554
<v Speaker 1>be retried. The other type of non transient

01:22:54.554 --> 01:22:56.155
<v Speaker 1>failure that we shouldn't retry is the one

01:22:56.155 --> 01:22:58.370
<v Speaker 1>where it is valid as false. In that

01:22:58.370 --> 01:22:59.890
<v Speaker 1>scenario, I think we should throw a terminal

01:22:59.890 --> 01:23:00.449
<v Speaker 1>error

01:23:01.890 --> 01:23:03.890
<v Speaker 1>and then just say, look. The request parameters

01:23:03.890 --> 01:23:04.610
<v Speaker 1>are wrong.

01:23:05.650 --> 01:23:06.450
<v Speaker 0>Sweet.

01:23:06.450 --> 01:23:08.770
<v Speaker 0>Alright. I am gonna be sat here for

01:23:08.770 --> 01:23:10.930
<v Speaker 0>the next three hours at least working on

01:23:10.930 --> 01:23:12.770
<v Speaker 0>tidying this up because I'm now in a

01:23:12.770 --> 01:23:14.265
<v Speaker 0>position where I was like like,

01:23:15.065 --> 01:23:16.825
<v Speaker 0>I could put this in a Restate folder,

01:23:16.905 --> 01:23:17.305
<v Speaker 0>but,

01:23:18.585 --> 01:23:20.345
<v Speaker 0>I mean, there's nothing yeah. This has got

01:23:20.345 --> 01:23:21.785
<v Speaker 0>us on No. I'm not knowing what, you

01:23:21.785 --> 01:23:23.225
<v Speaker 1>know, what other kind of services you need

01:23:23.225 --> 01:23:25.545
<v Speaker 1>really than these kinds of services because yeah.

01:23:25.545 --> 01:23:27.829
<v Speaker 1>I mean, it's but our hope is that

01:23:27.829 --> 01:23:30.389
<v Speaker 1>we make every handler a bit better. Some

01:23:30.389 --> 01:23:33.030
<v Speaker 1>handlers, make, like, a million times better so

01:23:33.030 --> 01:23:35.190
<v Speaker 1>that every handler is, like, enough improved that

01:23:35.190 --> 01:23:36.469
<v Speaker 1>it's kind of worth using.

01:23:37.829 --> 01:23:39.750
<v Speaker 0>Yeah. I'm very excited to play this now.

01:23:39.750 --> 01:23:41.885
<v Speaker 0>This is this is a lot lot for

01:23:41.885 --> 01:23:43.965
<v Speaker 0>my setup. So I

01:23:44.125 --> 01:23:46.125
<v Speaker 0>will definitely be doing some videos once I

01:23:46.125 --> 01:23:47.724
<v Speaker 0>get this all working on

01:23:48.045 --> 01:23:49.885
<v Speaker 0>how this all fits together. But my my

01:23:49.885 --> 01:23:52.765
<v Speaker 0>main objective was data model, read model, write

01:23:52.765 --> 01:23:56.060
<v Speaker 0>model. And between graph based, Restate, and Drezel,

01:23:56.060 --> 01:23:57.660
<v Speaker 0>I have those three components.

01:23:59.900 --> 01:24:02.220
<v Speaker 0>And I I am very excited once I

01:24:02.300 --> 01:24:04.300
<v Speaker 0>Mhmm. Deal with the TypeScript thing here, once

01:24:04.300 --> 01:24:05.020
<v Speaker 0>I deal with that.

01:24:06.415 --> 01:24:07.855
<v Speaker 0>I agree. And it's a it's a simple

01:24:07.855 --> 01:24:10.094
<v Speaker 0>thing. I'm gonna go after this session. I'm

01:24:10.095 --> 01:24:12.255
<v Speaker 0>gonna pop this back to to Big Face

01:24:12.255 --> 01:24:12.815
<v Speaker 0>mode.

01:24:14.575 --> 01:24:16.495
<v Speaker 0>Once I go through the Dursle docs, I'm

01:24:16.495 --> 01:24:19.135
<v Speaker 0>sure there's a page on getting that that

01:24:19.135 --> 01:24:20.989
<v Speaker 0>type and using it as a TypeScript type,

01:24:20.989 --> 01:24:23.230
<v Speaker 0>and that's the final the final straw. So

01:24:23.710 --> 01:24:24.429
<v Speaker 1>Exactly.

01:24:24.590 --> 01:24:26.590
<v Speaker 1>Yeah. I mean, you could actually have something,

01:24:26.590 --> 01:24:28.670
<v Speaker 1>by the way, that sort of there's there's

01:24:28.670 --> 01:24:30.590
<v Speaker 1>like a concept of high order services. So

01:24:30.590 --> 01:24:32.030
<v Speaker 1>you could actually have a thing that just

01:24:32.030 --> 01:24:33.895
<v Speaker 1>takes a table and turns it into a

01:24:33.895 --> 01:24:35.655
<v Speaker 1>Restate service that does the crud that you've

01:24:35.655 --> 01:24:37.575
<v Speaker 1>just shown. So it does validation,

01:24:37.575 --> 01:24:39.655
<v Speaker 1>returning a terminal error if it doesn't validate,

01:24:39.975 --> 01:24:41.655
<v Speaker 1>and then does the update and or up

01:24:41.815 --> 01:24:43.975
<v Speaker 1>sorry, the insert or update. You can have

01:24:43.975 --> 01:24:45.975
<v Speaker 1>this that just converts any table into any

01:24:45.975 --> 01:24:46.935
<v Speaker 1>Restate service

01:24:47.370 --> 01:24:48.890
<v Speaker 1>and not even have to write this slide

01:24:48.890 --> 01:24:50.090
<v Speaker 1>boilerplate each time.

01:24:50.970 --> 01:24:52.330
<v Speaker 1>That could be kinda cool.

01:24:53.450 --> 01:24:54.010
<v Speaker 0>Yeah.

01:24:54.410 --> 01:24:56.330
<v Speaker 0>I I don't fully understand that. But

01:24:58.250 --> 01:25:00.170
<v Speaker 1>The point being is, like, the service that

01:25:00.170 --> 01:25:02.010
<v Speaker 1>you've just written, it would look exactly the

01:25:02.010 --> 01:25:03.545
<v Speaker 1>same if the table was different. Right? It's

01:25:03.545 --> 01:25:05.945
<v Speaker 1>just accept an input, check that the input

01:25:05.945 --> 01:25:08.344
<v Speaker 1>matches the schema for this table that's previously

01:25:08.105 --> 01:25:10.025
<v Speaker 1>Yeah. Yeah. Yeah. And then do the update.

01:25:10.025 --> 01:25:11.465
<v Speaker 1>So there's no reason to write it for

01:25:11.465 --> 01:25:12.905
<v Speaker 1>each one. You can just have a single

01:25:12.905 --> 01:25:15.465
<v Speaker 1>implementation of, like, for the a function that

01:25:15.465 --> 01:25:17.770
<v Speaker 1>turns a table into a Restate service, then

01:25:17.770 --> 01:25:19.370
<v Speaker 1>you could just bind all of those services

01:25:19.370 --> 01:25:20.330
<v Speaker 1>for each table.

01:25:20.650 --> 01:25:22.489
<v Speaker 1>You only have to write that handler once.

01:25:22.890 --> 01:25:24.090
<v Speaker 0>Oh, yeah. I mean, I it could be

01:25:24.090 --> 01:25:26.250
<v Speaker 0>a generic handler that takes a test. Exactly.

01:25:26.250 --> 01:25:28.730
<v Speaker 0>Yeah. Yeah. Yeah. Okay. Oh, wow. That's pretty

01:25:28.730 --> 01:25:29.050
<v Speaker 0>slick.

01:25:29.755 --> 01:25:31.675
<v Speaker 1>Yeah. Yeah. It should work. I mean, for

01:25:31.675 --> 01:25:33.515
<v Speaker 0>the simple use cases where it's

01:25:34.155 --> 01:25:35.595
<v Speaker 1>If it's just crud. I mean, if you're

01:25:35.595 --> 01:25:37.595
<v Speaker 1>doing some kind of other complex stuff, then,

01:25:37.595 --> 01:25:38.795
<v Speaker 1>yeah, you would still write the handler. But

01:25:38.795 --> 01:25:40.155
<v Speaker 1>but, yeah, there's no point writing these crud

01:25:40.155 --> 01:25:41.595
<v Speaker 1>handlers over and over again. You can just,

01:25:42.315 --> 01:25:43.915
<v Speaker 1>you can just you're sort of writing like

01:25:43.915 --> 01:25:44.475
<v Speaker 1>a

01:25:45.110 --> 01:25:47.510
<v Speaker 1>you're kind of converting a database table into

01:25:47.510 --> 01:25:49.270
<v Speaker 1>a Restate service. So you're handling all of

01:25:49.270 --> 01:25:51.909
<v Speaker 1>the types of failure, like schema being invalid,

01:25:51.909 --> 01:25:53.429
<v Speaker 1>the the write failing,

01:25:53.670 --> 01:25:55.349
<v Speaker 1>and those become, Restate

01:25:55.670 --> 01:25:58.125
<v Speaker 1>services as errors as RPC errors. And then

01:25:58.125 --> 01:25:59.725
<v Speaker 1>once it's an RPC handler, you have all

01:25:59.725 --> 01:26:01.965
<v Speaker 1>of Restate's properties, like the RPC will happen

01:26:01.965 --> 01:26:03.965
<v Speaker 1>once and will always complete and things like

01:26:03.965 --> 01:26:06.364
<v Speaker 1>that, and you they'll go through invocations. So

01:26:06.365 --> 01:26:07.805
<v Speaker 1>this is a really nice thing, and something

01:26:07.805 --> 01:26:09.325
<v Speaker 1>we would really like in the future is

01:26:09.830 --> 01:26:12.470
<v Speaker 1>maybe even Restate can even do SQL operations

01:26:12.470 --> 01:26:13.910
<v Speaker 1>for you. So you wouldn't even need to

01:26:13.910 --> 01:26:15.910
<v Speaker 1>write such a wrapper, but you can sort

01:26:15.910 --> 01:26:17.590
<v Speaker 1>of do context dot SQL,

01:26:18.070 --> 01:26:20.710
<v Speaker 1>and we would manage the transaction

01:26:20.950 --> 01:26:24.470
<v Speaker 1>and guarantee that it only happens once and

01:26:22.935 --> 01:26:24.855
<v Speaker 1>this kind of matches. So nice. Yeah. Watch

01:26:24.855 --> 01:26:26.375
<v Speaker 1>this space, but we would love to do

01:26:26.375 --> 01:26:26.775
<v Speaker 1>that.

01:26:28.055 --> 01:26:30.295
<v Speaker 0>Alright. I have taken up enough of your

01:26:30.295 --> 01:26:33.335
<v Speaker 0>time for the Rawkode Academy self help program.

01:26:33.335 --> 01:26:33.735
<v Speaker 0>So

01:26:34.455 --> 01:26:35.895
<v Speaker 1>Well, let's do a part two because this

01:26:35.895 --> 01:26:36.695
<v Speaker 1>is actually really interesting.

01:26:37.460 --> 01:26:39.699
<v Speaker 0>Yeah. I'll get a few steps forward. So

01:26:39.699 --> 01:26:41.060
<v Speaker 0>I so we get to that point where

01:26:41.060 --> 01:26:42.820
<v Speaker 0>I think it's more interesting for the viewer

01:26:42.820 --> 01:26:45.219
<v Speaker 0>to see a more complete system rather than

01:26:45.219 --> 01:26:46.900
<v Speaker 0>what is right now very early

01:26:47.219 --> 01:26:49.940
<v Speaker 0>prototype proof of concept. But I like that

01:26:49.940 --> 01:26:52.325
<v Speaker 0>generic handler idea. I can share that in

01:26:52.325 --> 01:26:53.445
<v Speaker 0>my BUN workspace,

01:26:53.525 --> 01:26:55.605
<v Speaker 0>and the simple things can just pull that

01:26:55.605 --> 01:26:57.525
<v Speaker 0>through, and that's gonna be amazing.

01:26:57.845 --> 01:26:59.925
<v Speaker 0>And then I can get on to the

01:26:59.925 --> 01:27:01.765
<v Speaker 0>more advanced use cases where we have real

01:27:01.765 --> 01:27:03.525
<v Speaker 0>workflows with real challenges.

01:27:03.925 --> 01:27:05.605
<v Speaker 0>And then we can look back and say,

01:27:05.605 --> 01:27:05.765
<v Speaker 0>okay.

01:27:06.810 --> 01:27:08.889
<v Speaker 0>Here's where we are. What's the next steps?

01:27:08.969 --> 01:27:10.650
<v Speaker 0>Yeah. Well, I I know it's gonna be

01:27:10.650 --> 01:27:11.689
<v Speaker 0>worth it. Yeah.

01:27:12.730 --> 01:27:13.369
<v Speaker 0>Alright.

01:27:14.489 --> 01:27:16.249
<v Speaker 0>Something I'd like to finish on

01:27:16.969 --> 01:27:19.305
<v Speaker 0>is just to talk about what's next. Now

01:27:19.305 --> 01:27:21.385
<v Speaker 0>Restate is already a one point o release.

01:27:21.385 --> 01:27:22.985
<v Speaker 0>You've got that seed funding.

01:27:23.225 --> 01:27:25.545
<v Speaker 0>You've mentioned context or SQL, which doesn't exist

01:27:25.545 --> 01:27:26.905
<v Speaker 0>but could exist. Maybe you could share a

01:27:26.905 --> 01:27:28.345
<v Speaker 0>bit of light on what's on the road

01:27:28.345 --> 01:27:30.025
<v Speaker 0>map. What are you working on as a

01:27:30.025 --> 01:27:30.985
<v Speaker 0>company and a team?

01:27:32.230 --> 01:27:34.710
<v Speaker 1>Yeah. So I would say 85% of the

01:27:34.710 --> 01:27:37.110
<v Speaker 1>resources right now at Restate are are working

01:27:37.110 --> 01:27:38.469
<v Speaker 1>on distributed runtime.

01:27:39.590 --> 01:27:40.469
<v Speaker 1>So, like,

01:27:41.030 --> 01:27:43.590
<v Speaker 1>you know, for context, we have come from

01:27:43.590 --> 01:27:45.795
<v Speaker 1>the world of, like, building distributed systems, and

01:27:45.795 --> 01:27:47.395
<v Speaker 1>we have designed Restate from the ground up

01:27:47.395 --> 01:27:49.875
<v Speaker 1>to be distributed. But right now, we've been

01:27:49.875 --> 01:27:51.635
<v Speaker 1>running a bi a single binary today. Right?

01:27:51.635 --> 01:27:53.155
<v Speaker 1>And that binary is a single process. And

01:27:53.155 --> 01:27:54.275
<v Speaker 1>a lot of the things that we're talking

01:27:54.275 --> 01:27:55.955
<v Speaker 1>about are way easier in a single process.

01:27:56.690 --> 01:27:58.770
<v Speaker 1>We haven't taken those easy routes, but we

01:27:58.770 --> 01:28:01.010
<v Speaker 1>need to prove that now. We are distributing

01:28:01.010 --> 01:28:02.850
<v Speaker 1>Restate. We're making it work in high availability

01:28:02.850 --> 01:28:04.769
<v Speaker 1>setups, so, like, active, passive,

01:28:05.010 --> 01:28:05.889
<v Speaker 1>but also,

01:28:06.210 --> 01:28:09.409
<v Speaker 1>like, fully distributed sharded setups, like, ten, twenty,

01:28:09.409 --> 01:28:10.130
<v Speaker 1>50 nodes.

01:28:11.145 --> 01:28:13.385
<v Speaker 1>And, yeah, the designer always accounted for that

01:28:13.385 --> 01:28:15.545
<v Speaker 1>at the start, but to actually build, like,

01:28:15.545 --> 01:28:18.504
<v Speaker 1>a distributed system with virtual consensus

01:28:18.824 --> 01:28:21.145
<v Speaker 1>from scratch and Rust is obviously a huge

01:28:21.145 --> 01:28:22.505
<v Speaker 1>amount of work. I would say we are

01:28:22.505 --> 01:28:25.290
<v Speaker 1>now in the last stages of that, but

01:28:25.290 --> 01:28:28.090
<v Speaker 1>it's kind of taking up all energy.

01:28:28.170 --> 01:28:29.929
<v Speaker 1>And this is really exciting because

01:28:30.730 --> 01:28:32.330
<v Speaker 1>we want it to be possible that you

01:28:32.330 --> 01:28:34.730
<v Speaker 1>can kill half of the restate instances or

01:28:34.730 --> 01:28:37.875
<v Speaker 1>lose a DC or whatever and have milliseconds

01:28:37.875 --> 01:28:39.555
<v Speaker 1>of fail over time or even no fail

01:28:39.555 --> 01:28:42.035
<v Speaker 1>over time. That's that's really important as part

01:28:42.035 --> 01:28:42.835
<v Speaker 1>of our mission.

01:28:44.035 --> 01:28:45.795
<v Speaker 1>So, yeah, that's that's what I'm excited about.

01:28:45.795 --> 01:28:47.395
<v Speaker 1>I'm really, really hopeful that we'll have something

01:28:47.395 --> 01:28:48.435
<v Speaker 1>there, like, very soon.

01:28:49.330 --> 01:28:50.130
<v Speaker 0>Nice.

01:28:50.130 --> 01:28:50.850
<v Speaker 0>Awesome.

01:28:51.650 --> 01:28:54.450
<v Speaker 0>Any final words before we depart for today?

01:28:55.730 --> 01:28:57.490
<v Speaker 1>No. I think we covered everything. Had a

01:28:57.490 --> 01:28:59.410
<v Speaker 1>really awesome time, so thanks very much. It's

01:28:59.410 --> 01:29:01.890
<v Speaker 1>been brilliant. Really appreciate you taking the time

01:29:01.890 --> 01:29:04.725
<v Speaker 0>to, you know, share your story, the Restate

01:29:04.725 --> 01:29:07.045
<v Speaker 0>story, and even help me debugging and planning

01:29:07.045 --> 01:29:09.685
<v Speaker 0>some future Academy features. So, again, thank you

01:29:09.685 --> 01:29:11.605
<v Speaker 0>so much for your time. We'll definitely reach

01:29:11.605 --> 01:29:13.605
<v Speaker 0>out and get a part two in the

01:29:13.605 --> 01:29:15.285
<v Speaker 0>future, and I'm excited to see what you

01:29:15.285 --> 01:29:16.485
<v Speaker 0>and the team at Restate too.

01:29:17.780 --> 01:29:19.620
<v Speaker 1>Awesome. Well, thanks very much. I'll see you

01:29:19.620 --> 01:29:21.540
<v Speaker 1>next time. Yeah. For everyone watching, thank you

01:29:21.540 --> 01:29:23.540
<v Speaker 0>very much. Feel free to say something in

01:29:23.540 --> 01:29:25.060
<v Speaker 0>the comments as we bid you a do.

01:29:25.060 --> 01:29:26.260
<v Speaker 0>Have a great day and the rest of

01:29:26.260 --> 01:29:27.060
<v Speaker 0>the week. Bye.
