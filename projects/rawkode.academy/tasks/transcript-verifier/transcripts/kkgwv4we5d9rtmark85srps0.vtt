WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: ae9cefa6-c83a-40bc-ad70-a4a9e06a7988
Created: 2025-06-05T21:51:24.950Z
Duration: 4849.058
Channels: 1

00:00:10.240 --> 00:00:12.960
<v Speaker 0>Clouds amaze

00:00:13.325 --> 00:00:14.684
<v Speaker 0>A tangle

00:00:14.684 --> 00:00:15.644
<v Speaker 0>thread,

00:00:16.765 --> 00:00:18.445
<v Speaker 0>servers spin

00:00:19.564 --> 00:00:20.525
<v Speaker 0>inside

00:00:20.525 --> 00:00:21.965
<v Speaker 0>your head.

00:00:22.765 --> 00:00:25.404
<v Speaker 0>But a new dawn breaks,

00:00:42.535 --> 00:00:46.135
<v Speaker 0>Thorsten ons will show the key to build

00:00:46.135 --> 00:00:47.095
<v Speaker 0>and run

00:00:47.415 --> 00:00:48.295
<v Speaker 0>effortlessly.

00:01:13.075 --> 00:01:13.475
<v Speaker 0>to

00:01:20.515 --> 00:01:21.075
<v Speaker 0>Going

00:01:51.659 --> 00:01:52.700
<v Speaker 0>Innovate.

00:01:52.700 --> 00:01:55.900
<v Speaker 0>Spin it up. The future's bright.

00:01:56.140 --> 00:01:57.500
<v Speaker 0>Microservices

00:01:57.500 --> 00:01:59.100
<v Speaker 0>taking flight.

00:01:59.259 --> 00:02:02.380
<v Speaker 0>Thorsed and hunts, I'll show the key to

00:02:02.380 --> 00:02:03.740
<v Speaker 0>build and run

00:02:37.035 --> 00:02:41.035
<v Speaker 1>Hello, and welcome back to the Rawkode Academy.

00:02:41.195 --> 00:02:43.275
<v Speaker 1>This is Rawkode Live, the show where we

00:02:43.275 --> 00:02:45.755
<v Speaker 1>take a look at cool open source projects

00:02:45.755 --> 00:02:47.515
<v Speaker 1>in the cloud native space.

00:02:48.530 --> 00:02:51.170
<v Speaker 1>Today, we're gonna take a look at Fermion

00:02:51.170 --> 00:02:52.050
<v Speaker 1>Spin

00:02:52.050 --> 00:02:55.170
<v Speaker 1>but through a slightly different lens based on

00:02:55.170 --> 00:02:57.330
<v Speaker 1>some of the announcements they made just last

00:02:57.330 --> 00:02:59.010
<v Speaker 1>week at KubeCon.

00:02:59.490 --> 00:03:01.330
<v Speaker 1>Guiding us today is

00:03:02.455 --> 00:03:04.935
<v Speaker 1>Thurston Hands. Welcome back. How are you?

00:03:05.334 --> 00:03:08.135
<v Speaker 2>Hi, David. Thanks again for having me, and

00:03:08.135 --> 00:03:10.375
<v Speaker 2>hello, everybody on the stream.

00:03:10.855 --> 00:03:13.495
<v Speaker 1>Yeah. Always an absolute pleasure. For anyone who

00:03:13.495 --> 00:03:16.135
<v Speaker 1>hasn't caught us, you know, streaming together before,

00:03:16.135 --> 00:03:17.950
<v Speaker 1>could you just tell people who you are

00:03:17.950 --> 00:03:18.990
<v Speaker 1>and what you're up to?

00:03:19.470 --> 00:03:20.030
<v Speaker 2>Yep.

00:03:20.270 --> 00:03:22.830
<v Speaker 2>As David already mentioned, my name is Thorsten.

00:03:22.830 --> 00:03:25.710
<v Speaker 2>I work as a senior cloud advocate with,

00:03:25.870 --> 00:03:26.750
<v Speaker 2>Fermion,

00:03:27.150 --> 00:03:28.510
<v Speaker 2>where I mainly,

00:03:28.510 --> 00:03:30.845
<v Speaker 2>you know, am on streams,

00:03:31.245 --> 00:03:33.005
<v Speaker 2>write technical docs,

00:03:33.005 --> 00:03:33.725
<v Speaker 2>blogs,

00:03:33.805 --> 00:03:34.365
<v Speaker 2>or,

00:03:34.685 --> 00:03:36.125
<v Speaker 2>help developers

00:03:36.125 --> 00:03:39.245
<v Speaker 2>taking our products and services and our open

00:03:39.245 --> 00:03:41.805
<v Speaker 2>source projects to build software,

00:03:42.445 --> 00:03:43.005
<v Speaker 2>for

00:03:43.880 --> 00:03:46.280
<v Speaker 2>the upcoming future, right, for the next

00:03:47.400 --> 00:03:49.240
<v Speaker 2>decade, maybe. Yeah.

00:03:50.120 --> 00:03:51.560
<v Speaker 1>Awesome. Thank you.

00:03:51.960 --> 00:03:54.440
<v Speaker 1>And, you were at KubeCon last week on

00:03:54.440 --> 00:03:56.520
<v Speaker 1>the Vermeion booth talking about all the wonderful

00:03:56.520 --> 00:03:58.120
<v Speaker 1>things that the team have been up to.

00:03:58.275 --> 00:04:01.075
<v Speaker 1>So I know there's a number of announcements.

00:04:01.075 --> 00:04:02.834
<v Speaker 1>Do you wanna give us the the quick

00:04:02.834 --> 00:04:04.915
<v Speaker 1>rundown of what Fermion has been doing in

00:04:04.915 --> 00:04:06.835
<v Speaker 1>the last couple of months?

00:04:07.314 --> 00:04:10.275
<v Speaker 2>Yeah. Sure. So, yeah, the both of us,

00:04:10.435 --> 00:04:13.635
<v Speaker 2>were in, in in London for KubeCon EU.

00:04:14.230 --> 00:04:17.269
<v Speaker 2>And, yeah, as David mentioned, we we, had

00:04:17.269 --> 00:04:19.910
<v Speaker 2>a booth there and we introduced,

00:04:20.070 --> 00:04:22.070
<v Speaker 2>Fermion Wasm functions,

00:04:23.350 --> 00:04:27.510
<v Speaker 2>which is basically a fully managed hosted service

00:04:27.135 --> 00:04:31.535
<v Speaker 2>that we provide on top of Akamai's global

00:04:31.935 --> 00:04:33.455
<v Speaker 2>connected network.

00:04:34.095 --> 00:04:35.455
<v Speaker 2>So we took

00:04:35.775 --> 00:04:38.175
<v Speaker 2>like over the last couple of months,

00:04:38.335 --> 00:04:41.295
<v Speaker 2>we we took the way how we run

00:04:41.295 --> 00:04:42.655
<v Speaker 2>SpinApps

00:04:42.210 --> 00:04:43.410
<v Speaker 2>in dense

00:04:43.410 --> 00:04:44.530
<v Speaker 2>and available

00:04:44.690 --> 00:04:45.490
<v Speaker 2>fashion

00:04:46.050 --> 00:04:46.770
<v Speaker 2>and

00:04:47.010 --> 00:04:49.090
<v Speaker 2>put that together with

00:04:49.250 --> 00:04:52.130
<v Speaker 2>Akamai's globally distributed network

00:04:52.130 --> 00:04:53.330
<v Speaker 2>and locations

00:04:53.330 --> 00:04:55.330
<v Speaker 2>that they have around the globe

00:04:56.245 --> 00:04:56.965
<v Speaker 2>to,

00:04:57.365 --> 00:05:00.485
<v Speaker 2>you know, basically provide a service where we

00:05:00.485 --> 00:05:01.845
<v Speaker 2>as developers can

00:05:02.965 --> 00:05:05.925
<v Speaker 2>just take our spin apps, deploy them there,

00:05:05.925 --> 00:05:08.085
<v Speaker 2>and we don't have to care about nitty

00:05:08.085 --> 00:05:09.365
<v Speaker 2>gritty details like

00:05:09.620 --> 00:05:13.460
<v Speaker 2>selecting a region. Right? So apps are always

00:05:13.699 --> 00:05:15.620
<v Speaker 2>available and requests

00:05:15.620 --> 00:05:18.500
<v Speaker 2>are routed to the closest data center depending

00:05:18.500 --> 00:05:19.220
<v Speaker 2>on from

00:05:19.780 --> 00:05:22.340
<v Speaker 2>where the request is hitting

00:05:22.715 --> 00:05:23.595
<v Speaker 2>the app,

00:05:24.315 --> 00:05:26.395
<v Speaker 2>which is basically in a nutshell,

00:05:26.794 --> 00:05:29.675
<v Speaker 2>what Fermion Wasm functions is and what we

00:05:29.675 --> 00:05:30.235
<v Speaker 2>were,

00:05:30.634 --> 00:05:31.675
<v Speaker 2>working on,

00:05:32.155 --> 00:05:33.755
<v Speaker 2>the last couple of months.

00:05:34.634 --> 00:05:35.995
<v Speaker 1>Yeah. I think that

00:05:36.450 --> 00:05:39.410
<v Speaker 1>the understated thing about this, right, is like,

00:05:39.410 --> 00:05:41.650
<v Speaker 1>you know, anyone who has watched more than

00:05:41.650 --> 00:05:43.490
<v Speaker 1>one video on this channel knows I love

00:05:43.490 --> 00:05:46.450
<v Speaker 1>WebAssembly and building applications with this pattern. And

00:05:46.450 --> 00:05:49.330
<v Speaker 1>I always talk about the performance characteristics

00:05:49.330 --> 00:05:52.275
<v Speaker 1>of shipping WebAssembly. Right? When we start a

00:05:52.275 --> 00:05:52.995
<v Speaker 1>container,

00:05:53.315 --> 00:05:55.475
<v Speaker 1>we're measuring it in hundreds of milliseconds,

00:05:55.635 --> 00:05:56.355
<v Speaker 1>typically.

00:05:56.675 --> 00:05:58.915
<v Speaker 1>However, when we're measuring WebAssembly,

00:05:58.915 --> 00:06:01.395
<v Speaker 1>we're measuring in nanoseconds before that thing is

00:06:01.395 --> 00:06:04.115
<v Speaker 1>actually returning some data back to the user.

00:06:04.595 --> 00:06:06.900
<v Speaker 1>And, you know, the not the problem with

00:06:06.900 --> 00:06:08.420
<v Speaker 1>Fairmair Cloud, I don't wanna frame it in

00:06:08.420 --> 00:06:10.260
<v Speaker 1>that way, but Fairmair on Cloud, I believe

00:06:10.260 --> 00:06:12.980
<v Speaker 1>was like single region for the entirety of

00:06:12.980 --> 00:06:15.540
<v Speaker 1>this kind of, you know, cloud

00:06:15.620 --> 00:06:16.260
<v Speaker 1>life,

00:06:16.580 --> 00:06:18.420
<v Speaker 1>which means you have to fight the latency.

00:06:18.420 --> 00:06:20.260
<v Speaker 1>If that user is in Australia, if they're

00:06:20.260 --> 00:06:22.504
<v Speaker 1>in Asia, if they're in Europe, you don't

00:06:22.504 --> 00:06:24.264
<v Speaker 1>really know where that server is and you

00:06:24.264 --> 00:06:26.585
<v Speaker 1>could be measuring it in fifty milliseconds or

00:06:26.585 --> 00:06:28.104
<v Speaker 1>we could be measuring it in three hundred

00:06:28.104 --> 00:06:28.905
<v Speaker 1>milliseconds,

00:06:28.985 --> 00:06:30.185
<v Speaker 1>which is not the end of the world,

00:06:30.185 --> 00:06:32.585
<v Speaker 1>especially when WebAssembly is fast. However,

00:06:32.985 --> 00:06:36.400
<v Speaker 1>when you partner with Akamai, who probably have

00:06:36.400 --> 00:06:39.040
<v Speaker 1>one of the biggest networks in the world,

00:06:39.520 --> 00:06:42.160
<v Speaker 1>we're now getting this double whammy of, well,

00:06:42.160 --> 00:06:44.160
<v Speaker 1>we're gonna get that first bay or that

00:06:44.240 --> 00:06:45.760
<v Speaker 1>we're gonna get that latency down to an

00:06:45.760 --> 00:06:48.400
<v Speaker 1>absolute minimum and then the runtime and the

00:06:48.400 --> 00:06:50.160
<v Speaker 1>execution of that WebAssembly binary

00:06:50.585 --> 00:06:52.825
<v Speaker 1>is then equally fast. And then it's like,

00:06:52.825 --> 00:06:54.585
<v Speaker 1>who doesn't want that? Like, that is just

00:06:54.585 --> 00:06:56.345
<v Speaker 1>the absolute ideal scenario

00:06:56.585 --> 00:06:58.505
<v Speaker 1>for anyone that wants to ship

00:06:58.665 --> 00:07:00.745
<v Speaker 1>and have their users be happy on a

00:07:00.745 --> 00:07:02.345
<v Speaker 1>performance level at least. You know, you still

00:07:02.345 --> 00:07:03.945
<v Speaker 1>gotta write good code. Right? You know, we

00:07:03.945 --> 00:07:06.190
<v Speaker 1>can't teach people everything. But when you remove

00:07:06.190 --> 00:07:08.830
<v Speaker 1>that infrastructure component and that networking component,

00:07:08.910 --> 00:07:10.669
<v Speaker 1>I mean, that's a win. I I mean,

00:07:10.669 --> 00:07:12.270
<v Speaker 1>hands down, that is absolute win. I was

00:07:12.270 --> 00:07:14.190
<v Speaker 1>so thrilled to see this announcement. So

00:07:14.910 --> 00:07:17.230
<v Speaker 2>Yeah. Yeah. So basically how we phrased it,

00:07:17.230 --> 00:07:17.710
<v Speaker 2>we,

00:07:18.350 --> 00:07:22.405
<v Speaker 2>you know, we married the fastest fastest serverless

00:07:22.405 --> 00:07:25.605
<v Speaker 2>compute with the fastest network available

00:07:26.325 --> 00:07:30.565
<v Speaker 2>to to provide, like, lowest latency for execution.

00:07:30.565 --> 00:07:31.125
<v Speaker 2>Right?

00:07:31.765 --> 00:07:34.405
<v Speaker 2>Of of serverless of serverless workloads here.

00:07:35.570 --> 00:07:37.330
<v Speaker 2>Yeah. And the cool thing is,

00:07:38.210 --> 00:07:39.730
<v Speaker 2>for us as developers,

00:07:39.730 --> 00:07:42.770
<v Speaker 2>nothing changes. Right? We can still use

00:07:43.410 --> 00:07:46.210
<v Speaker 2>Spin to for creating WebAssembly

00:07:46.210 --> 00:07:47.090
<v Speaker 2>workloads,

00:07:47.090 --> 00:07:50.355
<v Speaker 2>or you can create them using different tool

00:07:50.355 --> 00:07:53.075
<v Speaker 2>chains as long as they align with Wazi

00:07:53.075 --> 00:07:55.715
<v Speaker 2>incoming HTTP handler, for example, right,

00:07:56.195 --> 00:07:58.915
<v Speaker 2>to build apps and deploy them there.

00:07:59.235 --> 00:07:59.875
<v Speaker 2>However,

00:08:00.115 --> 00:08:02.755
<v Speaker 2>as always, we are super keen to deliver

00:08:02.755 --> 00:08:04.970
<v Speaker 2>a great developer experience

00:08:05.050 --> 00:08:05.850
<v Speaker 2>and,

00:08:06.010 --> 00:08:09.610
<v Speaker 2>you know, extended the spin CLI to make

00:08:09.610 --> 00:08:12.330
<v Speaker 2>it aware of that new Fermian functions

00:08:12.330 --> 00:08:13.450
<v Speaker 2>service,

00:08:14.010 --> 00:08:16.650
<v Speaker 2>where you can deploy your apps. You can,

00:08:16.650 --> 00:08:19.255
<v Speaker 2>you know, inspect all the apps running on

00:08:19.255 --> 00:08:20.855
<v Speaker 2>your account and,

00:08:21.014 --> 00:08:24.134
<v Speaker 2>you know, different, like, inner loop concerns are

00:08:24.134 --> 00:08:25.495
<v Speaker 2>obviously addressed,

00:08:26.294 --> 00:08:27.735
<v Speaker 2>by default. Yeah.

00:08:28.615 --> 00:08:29.495
<v Speaker 1>Awesome.

00:08:30.055 --> 00:08:31.655
<v Speaker 1>So do you wanna give us a bit

00:08:31.655 --> 00:08:33.414
<v Speaker 1>of a rundown on what is you're gonna

00:08:33.414 --> 00:08:34.750
<v Speaker 1>be walking us through today? I mean, I

00:08:34.750 --> 00:08:36.190
<v Speaker 1>think we've all got a pretty good idea

00:08:36.190 --> 00:08:38.029
<v Speaker 1>based on what we're talking about. But, yeah,

00:08:38.029 --> 00:08:39.630
<v Speaker 1>what are you gonna be showing us how

00:08:39.630 --> 00:08:40.669
<v Speaker 1>to achieve today?

00:08:41.950 --> 00:08:42.589
<v Speaker 2>Sure.

00:08:43.230 --> 00:08:44.670
<v Speaker 2>So can

00:08:45.230 --> 00:08:46.750
<v Speaker 1>You want me to jump over to the

00:08:46.750 --> 00:08:49.925
<v Speaker 1>screen share? Yeah. That will be great. Alright.

00:08:50.805 --> 00:08:54.005
<v Speaker 1>You are now live. Take it away, Thorsten.

00:08:54.085 --> 00:08:56.965
<v Speaker 2>Okay. Cool. Thank you. So what we're looking

00:08:56.965 --> 00:09:00.085
<v Speaker 2>at right now is basically the announcement post.

00:09:00.405 --> 00:09:02.325
<v Speaker 2>I think we can put that link in

00:09:02.325 --> 00:09:04.800
<v Speaker 2>in the show notes later on,

00:09:06.000 --> 00:09:06.800
<v Speaker 2>which is,

00:09:07.519 --> 00:09:09.440
<v Speaker 2>you know, giving you an, you know, an

00:09:09.440 --> 00:09:12.399
<v Speaker 2>overview of what Fermion Wasm function is, what

00:09:12.399 --> 00:09:14.240
<v Speaker 2>it offers in more detail.

00:09:15.519 --> 00:09:16.720
<v Speaker 2>Obviously, as always,

00:09:17.415 --> 00:09:19.495
<v Speaker 2>we try to provide

00:09:20.455 --> 00:09:22.295
<v Speaker 2>best in class documentation.

00:09:22.775 --> 00:09:26.455
<v Speaker 2>And if you're familiar with what we do,

00:09:27.095 --> 00:09:28.615
<v Speaker 2>with Spin and

00:09:28.695 --> 00:09:29.735
<v Speaker 2>SpinCube,

00:09:29.895 --> 00:09:33.610
<v Speaker 2>c or the CNCF projects we, contributed.

00:09:35.769 --> 00:09:39.449
<v Speaker 2>We have obviously reworked our website to make

00:09:39.449 --> 00:09:42.009
<v Speaker 2>it a little bit, like, clearer where to

00:09:42.009 --> 00:09:44.889
<v Speaker 2>start. Right? So as a developer, you obviously

00:09:44.889 --> 00:09:48.255
<v Speaker 2>start with building apps. But at some point

00:09:48.255 --> 00:09:50.735
<v Speaker 2>in time, you wanna deploy and run them.

00:09:50.735 --> 00:09:53.375
<v Speaker 2>And there is right now a new section

00:09:53.375 --> 00:09:54.255
<v Speaker 2>over here,

00:09:54.575 --> 00:09:56.095
<v Speaker 2>fermion WASN functions,

00:09:56.095 --> 00:09:59.295
<v Speaker 2>which, you know, gives you all like details

00:09:59.295 --> 00:10:01.775
<v Speaker 2>about how to do x, y, and z

00:10:02.300 --> 00:10:04.620
<v Speaker 2>within fermion wasn't functions.

00:10:05.019 --> 00:10:08.459
<v Speaker 2>But also there is the request access button

00:10:08.459 --> 00:10:11.019
<v Speaker 2>because right now it's in preview and we

00:10:11.019 --> 00:10:14.380
<v Speaker 2>have to or we let people in once

00:10:14.380 --> 00:10:17.740
<v Speaker 2>you, you know, request access to the service.

00:10:18.675 --> 00:10:21.235
<v Speaker 2>So that's a great resource where you can

00:10:21.235 --> 00:10:22.595
<v Speaker 2>find samples,

00:10:22.595 --> 00:10:23.475
<v Speaker 2>tutorials,

00:10:23.475 --> 00:10:26.435
<v Speaker 2>you know, guiding the you as a developer,

00:10:26.915 --> 00:10:29.315
<v Speaker 2>through the process of building your apps and

00:10:29.315 --> 00:10:32.820
<v Speaker 2>getting them deployed to Fermion Wasm functions and

00:10:32.820 --> 00:10:34.340
<v Speaker 2>also some like,

00:10:35.540 --> 00:10:36.420
<v Speaker 2>let's say,

00:10:37.140 --> 00:10:41.380
<v Speaker 2>more details about how this works. And I

00:10:41.380 --> 00:10:43.779
<v Speaker 2>think that's a good starting point to to

00:10:43.779 --> 00:10:44.980
<v Speaker 2>become a little bit more

00:10:45.555 --> 00:10:46.435
<v Speaker 2>technical.

00:10:46.435 --> 00:10:46.915
<v Speaker 2>Right?

00:10:47.395 --> 00:10:50.355
<v Speaker 2>So our service comes with,

00:10:51.075 --> 00:10:53.155
<v Speaker 2>with its own registry.

00:10:53.155 --> 00:10:54.275
<v Speaker 2>Right? So

00:10:54.515 --> 00:10:55.555
<v Speaker 2>as for

00:10:56.435 --> 00:10:58.275
<v Speaker 2>like more than a year or

00:10:58.750 --> 00:11:01.070
<v Speaker 2>more than a year, yes. I think we,

00:11:01.310 --> 00:11:03.230
<v Speaker 2>we stick to OCI

00:11:03.390 --> 00:11:04.750
<v Speaker 2>artifacts

00:11:04.750 --> 00:11:07.870
<v Speaker 2>as distributable units for spin ups.

00:11:08.270 --> 00:11:09.950
<v Speaker 2>So if you build a spin up and

00:11:09.950 --> 00:11:12.495
<v Speaker 2>you wanna distribute that, you always end up

00:11:12.495 --> 00:11:15.295
<v Speaker 2>with an OCI artifact that is pushed to

00:11:15.295 --> 00:11:18.175
<v Speaker 2>some sort of OCI registry. So basically a

00:11:18.175 --> 00:11:21.055
<v Speaker 2>registry that implements the Docker registry two dot

00:11:21.055 --> 00:11:21.935
<v Speaker 2>0 standard.

00:11:22.334 --> 00:11:25.375
<v Speaker 2>And, yeah, we provide one as part of

00:11:25.375 --> 00:11:26.735
<v Speaker 2>Fermion Wasm functions,

00:11:28.800 --> 00:11:30.400
<v Speaker 2>which basically

00:11:30.720 --> 00:11:32.480
<v Speaker 2>receives your workload

00:11:32.560 --> 00:11:33.839
<v Speaker 2>and ensures

00:11:33.839 --> 00:11:35.520
<v Speaker 2>that it is deployed

00:11:35.520 --> 00:11:38.640
<v Speaker 2>across the globe. And as soon as all

00:11:38.640 --> 00:11:40.960
<v Speaker 2>the regions report back that the app is

00:11:40.960 --> 00:11:41.600
<v Speaker 2>up and running,

00:11:42.445 --> 00:11:43.565
<v Speaker 2>We register

00:11:43.565 --> 00:11:45.565
<v Speaker 2>a sub domain name for you with an

00:11:45.565 --> 00:11:48.845
<v Speaker 2>HTTPS certificate so that you can immediately

00:11:49.485 --> 00:11:52.365
<v Speaker 2>invoke or send requests to your workload.

00:11:53.084 --> 00:11:56.170
<v Speaker 2>Or you can if you use or if

00:11:56.170 --> 00:11:58.570
<v Speaker 2>you are already using Akamai products, you can

00:11:58.570 --> 00:12:02.090
<v Speaker 2>integrate them with existing Akamai products. Right? That's

00:12:02.090 --> 00:12:04.890
<v Speaker 2>possible. So to route through a property,

00:12:05.850 --> 00:12:08.170
<v Speaker 2>how it is called in Akamai

00:12:08.810 --> 00:12:10.650
<v Speaker 2>to your fermion wasn't functions.

00:12:12.514 --> 00:12:14.435
<v Speaker 2>On the back end side,

00:12:15.074 --> 00:12:18.435
<v Speaker 2>nothing changed. Right? So you can still interact

00:12:18.435 --> 00:12:20.595
<v Speaker 2>with databases,

00:12:20.834 --> 00:12:23.154
<v Speaker 2>with key value stores.

00:12:23.394 --> 00:12:26.550
<v Speaker 2>And again, we provide as part of our

00:12:26.550 --> 00:12:29.190
<v Speaker 2>service offering a globally distributed

00:12:29.990 --> 00:12:32.790
<v Speaker 2>key value store that you can just use

00:12:32.790 --> 00:12:34.070
<v Speaker 2>as you're

00:12:34.550 --> 00:12:37.270
<v Speaker 2>used to use it with, Firming Cloud, for

00:12:37.270 --> 00:12:40.475
<v Speaker 2>example. Right? So it's really like an an

00:12:40.475 --> 00:12:41.435
<v Speaker 2>incarnation

00:12:41.435 --> 00:12:44.235
<v Speaker 2>at the next evolution step on how to

00:12:44.235 --> 00:12:45.035
<v Speaker 2>run,

00:12:45.835 --> 00:12:47.355
<v Speaker 2>spin apps on

00:12:47.675 --> 00:12:49.915
<v Speaker 2>a fully managed platform.

00:12:51.195 --> 00:12:52.315
<v Speaker 2>Alright. So,

00:12:52.795 --> 00:12:55.360
<v Speaker 2>what do you need to get started? I

00:12:55.360 --> 00:12:56.399
<v Speaker 2>think that's always,

00:12:56.640 --> 00:12:58.080
<v Speaker 2>the most important

00:12:58.080 --> 00:13:00.960
<v Speaker 2>information for us as developers.

00:13:01.600 --> 00:13:04.160
<v Speaker 2>So I have installed

00:13:04.720 --> 00:13:07.525
<v Speaker 2>spin on my oops. Yep. Spin

00:13:07.765 --> 00:13:09.205
<v Speaker 2>dash dash version

00:13:09.205 --> 00:13:12.645
<v Speaker 2>on my machine in the latest stable release.

00:13:13.205 --> 00:13:16.165
<v Speaker 2>That's version three dot two dot o.

00:13:16.725 --> 00:13:18.725
<v Speaker 2>And I have also

00:13:19.205 --> 00:13:22.165
<v Speaker 2>installed a new plugin that's called

00:13:22.709 --> 00:13:23.510
<v Speaker 2>AKA.

00:13:26.310 --> 00:13:30.550
<v Speaker 2>That's basically the plugin, you know, for interacting

00:13:30.550 --> 00:13:33.750
<v Speaker 2>with Fermian Wasm functions. You you see already

00:13:33.750 --> 00:13:35.829
<v Speaker 2>like familiar

00:13:35.135 --> 00:13:38.095
<v Speaker 2>sub commands like apps, manage applications,

00:13:38.415 --> 00:13:41.055
<v Speaker 2>or to deploy an app, to log in,

00:13:41.214 --> 00:13:42.415
<v Speaker 2>and so on and so forth. So we

00:13:42.415 --> 00:13:44.815
<v Speaker 2>will go through that entire

00:13:45.055 --> 00:13:46.095
<v Speaker 2>workflow,

00:13:46.335 --> 00:13:48.850
<v Speaker 2>once we have implemented an app that we

00:13:48.850 --> 00:13:50.290
<v Speaker 2>can deploy

00:13:50.450 --> 00:13:51.890
<v Speaker 2>to the service.

00:13:53.810 --> 00:13:56.850
<v Speaker 2>The most important question at this point might

00:13:56.850 --> 00:13:59.570
<v Speaker 2>be how can I get that ECA plugin?

00:14:00.050 --> 00:14:02.050
<v Speaker 2>And again, the documentation

00:14:02.050 --> 00:14:04.505
<v Speaker 2>provides a quick start where you can, you

00:14:04.505 --> 00:14:07.145
<v Speaker 2>know, find information on how to install Spin

00:14:07.145 --> 00:14:07.705
<v Speaker 2>and

00:14:08.665 --> 00:14:10.185
<v Speaker 2>how to install

00:14:10.265 --> 00:14:12.825
<v Speaker 2>the plugin, the ECA plugin that I have

00:14:12.825 --> 00:14:14.905
<v Speaker 2>already installed on my machine.

00:14:15.465 --> 00:14:18.680
<v Speaker 2>This is especially handy if you have already

00:14:18.680 --> 00:14:21.240
<v Speaker 2>spin installed on your machine or if you

00:14:21.240 --> 00:14:24.840
<v Speaker 2>installed it before we release that plugin. Right.

00:14:27.720 --> 00:14:28.360
<v Speaker 2>As always,

00:14:29.075 --> 00:14:32.115
<v Speaker 2>language specific tooling is required. So if you

00:14:32.115 --> 00:14:35.395
<v Speaker 2>want to write your apps in JavaScript, TypeScript,

00:14:35.395 --> 00:14:38.035
<v Speaker 2>you need node installed in your machine. If

00:14:38.035 --> 00:14:40.035
<v Speaker 2>you want to write your apps in Rust,

00:14:40.275 --> 00:14:43.240
<v Speaker 2>you need Rust installed with the Wasm 32

00:14:43.240 --> 00:14:45.080
<v Speaker 2>WasiP one target.

00:14:45.560 --> 00:14:48.440
<v Speaker 2>And if you wanna write your apps in

00:14:48.440 --> 00:14:51.800
<v Speaker 2>Go, then you need TinyGo installed in a

00:14:51.800 --> 00:14:54.360
<v Speaker 2>recent version. I think I've installed

00:14:54.600 --> 00:14:56.680
<v Speaker 2>let me check TinyGo

00:14:56.680 --> 00:14:57.400
<v Speaker 2>version

00:14:57.915 --> 00:14:58.635
<v Speaker 2>o

00:14:58.715 --> 00:15:00.955
<v Speaker 2>36. I think 37

00:15:00.955 --> 00:15:02.235
<v Speaker 2>is already out.

00:15:02.955 --> 00:15:05.515
<v Speaker 2>So that will also work.

00:15:05.915 --> 00:15:09.115
<v Speaker 2>But keep in mind to also upgrade your

00:15:09.115 --> 00:15:09.995
<v Speaker 2>templates because

00:15:10.620 --> 00:15:12.380
<v Speaker 2>there was a rename

00:15:12.380 --> 00:15:16.860
<v Speaker 2>of the entire Wasm 32 Wasi platforms

00:15:17.100 --> 00:15:18.700
<v Speaker 2>at the beginning of the year.

00:15:19.260 --> 00:15:22.140
<v Speaker 2>So for Rust, for example, it's now called

00:15:22.140 --> 00:15:26.075
<v Speaker 2>Wasi 32 Wasi P one. And for TinyGo

00:15:26.075 --> 00:15:27.995
<v Speaker 2>there was a change as well. Right. So

00:15:27.995 --> 00:15:30.154
<v Speaker 2>if you encounter some errors

00:15:30.394 --> 00:15:31.915
<v Speaker 2>following the guide,

00:15:32.235 --> 00:15:35.035
<v Speaker 2>building the app, it chances are pretty high

00:15:35.035 --> 00:15:38.315
<v Speaker 2>that there is that you hit exactly that,

00:15:38.475 --> 00:15:39.995
<v Speaker 2>you know, change from

00:15:40.300 --> 00:15:42.380
<v Speaker 2>the underlying platform name.

00:15:43.180 --> 00:15:45.660
<v Speaker 2>But that's all we need. Right? We need

00:15:45.660 --> 00:15:46.380
<v Speaker 2>on,

00:15:47.020 --> 00:15:49.740
<v Speaker 2>the spin, installed on on the machine. We

00:15:49.740 --> 00:15:53.500
<v Speaker 2>need language specific tooling and that Akamai

00:15:53.660 --> 00:15:55.260
<v Speaker 2>or the Akka plugin.

00:15:56.485 --> 00:15:59.125
<v Speaker 2>So the service is a multi tenant

00:15:59.125 --> 00:15:59.845
<v Speaker 2>service,

00:16:00.084 --> 00:16:02.565
<v Speaker 2>which means we have to authenticate

00:16:02.565 --> 00:16:04.644
<v Speaker 2>in in some way. Right? And,

00:16:05.204 --> 00:16:07.845
<v Speaker 2>you know, we use a lot of GitHub,

00:16:07.845 --> 00:16:10.240
<v Speaker 2>so we have we use GitHub as an

00:16:10.240 --> 00:16:11.199
<v Speaker 2>authentication

00:16:11.199 --> 00:16:12.079
<v Speaker 2>provider.

00:16:12.319 --> 00:16:15.199
<v Speaker 2>So once you have requested access, you know,

00:16:15.199 --> 00:16:17.760
<v Speaker 2>and the onboarding is completed,

00:16:18.560 --> 00:16:21.199
<v Speaker 2>you can do a spin aka login over

00:16:21.199 --> 00:16:21.440
<v Speaker 2>here.

00:16:23.225 --> 00:16:24.105
<v Speaker 2>And

00:16:24.105 --> 00:16:27.065
<v Speaker 2>that is a regular device code flow over

00:16:27.065 --> 00:16:30.425
<v Speaker 2>here where I can say, I wanna authenticate

00:16:30.425 --> 00:16:32.345
<v Speaker 2>with my individual

00:16:33.385 --> 00:16:36.425
<v Speaker 2>GitHub account and then I have to grant

00:16:36.425 --> 00:16:37.945
<v Speaker 2>the CLI

00:16:37.670 --> 00:16:39.670
<v Speaker 2>the permissions to interact

00:16:39.830 --> 00:16:43.830
<v Speaker 2>with fermion wasn't functions on my behalf. Right?

00:16:44.390 --> 00:16:46.790
<v Speaker 2>So I can, can I can close that

00:16:46.790 --> 00:16:48.070
<v Speaker 2>tab right now.

00:16:48.630 --> 00:16:49.110
<v Speaker 2>And

00:16:49.430 --> 00:16:52.230
<v Speaker 2>as you can already see, it welcomes me.

00:16:52.685 --> 00:16:55.644
<v Speaker 2>And now I have access to, you know,

00:16:55.644 --> 00:16:56.765
<v Speaker 2>my account

00:16:57.084 --> 00:17:00.204
<v Speaker 2>where I can do things like obviously deploy

00:17:00.204 --> 00:17:02.365
<v Speaker 2>apps or I can simply say

00:17:02.925 --> 00:17:04.444
<v Speaker 2>apps list

00:17:04.525 --> 00:17:07.690
<v Speaker 2>to explore what's already there. And as you

00:17:07.690 --> 00:17:09.690
<v Speaker 2>can see, I played around a bit

00:17:10.089 --> 00:17:12.730
<v Speaker 2>with Fermin Wasserman's Yeah, you've got a couple.

00:17:14.010 --> 00:17:15.690
<v Speaker 2>Yeah, and I cleaned up a couple of

00:17:15.690 --> 00:17:17.049
<v Speaker 2>them already before

00:17:17.530 --> 00:17:18.089
<v Speaker 2>the stream.

00:17:19.045 --> 00:17:21.205
<v Speaker 2>So, yeah, you get like, you know, the

00:17:21.205 --> 00:17:24.645
<v Speaker 2>list of apps deployed to your account. And

00:17:24.724 --> 00:17:27.205
<v Speaker 2>as as you mentioned, David,

00:17:27.205 --> 00:17:29.205
<v Speaker 2>the both of us were at KubeCon.

00:17:29.205 --> 00:17:31.605
<v Speaker 2>So let's take this one for example.

00:17:31.925 --> 00:17:33.924
<v Speaker 2>You can do a spin archive

00:17:33.925 --> 00:17:35.599
<v Speaker 2>apps info.

00:17:35.600 --> 00:17:38.240
<v Speaker 2>I think it was without a dash. Yeah.

00:17:38.240 --> 00:17:39.679
<v Speaker 2>It was without a dash.

00:17:40.480 --> 00:17:41.519
<v Speaker 2>And you can see

00:17:41.919 --> 00:17:44.799
<v Speaker 2>that I deployed. However, never invoke the app.

00:17:44.799 --> 00:17:46.320
<v Speaker 2>No. I did not invoke it in the

00:17:46.320 --> 00:17:47.039
<v Speaker 2>last seven days.

00:17:48.345 --> 00:17:50.345
<v Speaker 2>So I deployed an app there

00:17:51.065 --> 00:17:54.025
<v Speaker 2>that is available at this URL and it

00:17:54.025 --> 00:17:55.225
<v Speaker 2>basically prints

00:17:55.225 --> 00:17:56.264
<v Speaker 2>hello world,

00:17:56.505 --> 00:17:58.504
<v Speaker 2>you know, a quick

00:17:59.145 --> 00:18:00.345
<v Speaker 2>verification

00:18:00.345 --> 00:18:01.144
<v Speaker 2>demo.

00:18:01.865 --> 00:18:02.664
<v Speaker 2>Yeah. So

00:18:03.070 --> 00:18:04.830
<v Speaker 2>I think the key point is it's a

00:18:04.830 --> 00:18:06.110
<v Speaker 2>super intuitive,

00:18:06.670 --> 00:18:09.710
<v Speaker 2>sub command to the SPIN CLI

00:18:09.790 --> 00:18:12.110
<v Speaker 2>addressing like day to day,

00:18:12.990 --> 00:18:13.710
<v Speaker 2>concerns.

00:18:14.350 --> 00:18:17.470
<v Speaker 2>And we will obviously, right now, start building

00:18:17.470 --> 00:18:17.870
<v Speaker 2>something.

00:18:18.794 --> 00:18:19.274
<v Speaker 2>And,

00:18:19.595 --> 00:18:22.235
<v Speaker 2>for those of you were on or joined

00:18:22.235 --> 00:18:25.195
<v Speaker 2>the last stream where I, ran into some

00:18:25.195 --> 00:18:28.075
<v Speaker 2>issues with the ET router in in in

00:18:28.075 --> 00:18:29.034
<v Speaker 2>TypeScript,

00:18:29.434 --> 00:18:31.195
<v Speaker 2>there are also great news,

00:18:31.835 --> 00:18:33.195
<v Speaker 2>in regards to

00:18:35.090 --> 00:18:36.850
<v Speaker 2>the HTTP

00:18:36.850 --> 00:18:38.770
<v Speaker 2>TypeScript and JavaScript

00:18:38.770 --> 00:18:39.650
<v Speaker 2>templates.

00:18:40.130 --> 00:18:41.730
<v Speaker 2>Let's say, hello,

00:18:43.730 --> 00:18:44.850
<v Speaker 2>fermion

00:18:45.170 --> 00:18:46.770
<v Speaker 2>wasm functions,

00:18:46.850 --> 00:18:49.115
<v Speaker 2>and let's edit two to be safe. I

00:18:49.115 --> 00:18:50.715
<v Speaker 2>think I have one already.

00:18:52.715 --> 00:18:55.275
<v Speaker 2>So we updated JavaScript

00:18:55.275 --> 00:18:59.115
<v Speaker 2>and TypeScript templates since, David and I were

00:18:59.115 --> 00:19:00.075
<v Speaker 2>on stream,

00:19:00.315 --> 00:19:01.035
<v Speaker 2>last time.

00:19:01.880 --> 00:19:05.640
<v Speaker 2>And the new templates allow you to choose,

00:19:06.040 --> 00:19:09.720
<v Speaker 2>from different routers because I think,

00:19:10.440 --> 00:19:12.200
<v Speaker 2>I like Hono pretty,

00:19:12.520 --> 00:19:13.880
<v Speaker 2>a lot and,

00:19:14.200 --> 00:19:15.720
<v Speaker 2>I think it's

00:19:15.485 --> 00:19:17.485
<v Speaker 2>API is super memorable

00:19:17.485 --> 00:19:18.765
<v Speaker 2>for at least to me.

00:19:19.165 --> 00:19:19.885
<v Speaker 2>And

00:19:20.605 --> 00:19:23.485
<v Speaker 2>but maybe you wanna roll without an HTTP

00:19:23.485 --> 00:19:25.885
<v Speaker 2>router. Right? That's now also possible.

00:19:26.845 --> 00:19:28.605
<v Speaker 2>So let's I like Hono as well. It's

00:19:28.605 --> 00:19:31.400
<v Speaker 1>a great little mini framework. And, you're right.

00:19:31.400 --> 00:19:33.559
<v Speaker 1>The developer experience, the API surface of it

00:19:33.559 --> 00:19:34.600
<v Speaker 1>is is slick.

00:19:34.920 --> 00:19:37.320
<v Speaker 2>Yeah. It it is it is super great,

00:19:37.320 --> 00:19:39.880
<v Speaker 2>especially, like, it's middleware APIs.

00:19:39.880 --> 00:19:40.919
<v Speaker 2>I like them,

00:19:41.160 --> 00:19:42.360
<v Speaker 2>a lot. And,

00:19:42.920 --> 00:19:46.055
<v Speaker 2>yeah, stumbled upon it couple of a while

00:19:46.055 --> 00:19:47.095
<v Speaker 2>ago and

00:19:47.495 --> 00:19:49.655
<v Speaker 2>yeah. So we updated our templates.

00:19:49.655 --> 00:19:51.095
<v Speaker 2>So that's,

00:19:51.575 --> 00:19:52.855
<v Speaker 2>also new.

00:19:53.015 --> 00:19:55.815
<v Speaker 2>So let's jump right into Hello

00:19:55.815 --> 00:19:57.735
<v Speaker 2>Fermion Wasm Functions two.

00:19:58.890 --> 00:20:00.490
<v Speaker 2>Let's open up code

00:20:00.890 --> 00:20:03.610
<v Speaker 2>and let's increase the font size a bit.

00:20:03.930 --> 00:20:04.650
<v Speaker 2>Again,

00:20:05.210 --> 00:20:06.090
<v Speaker 2>nothing,

00:20:06.410 --> 00:20:09.530
<v Speaker 2>new over here. Right? We have package JSON

00:20:09.530 --> 00:20:11.770
<v Speaker 2>like a idiomatic

00:20:11.930 --> 00:20:12.970
<v Speaker 2>an idiomatic

00:20:14.095 --> 00:20:16.975
<v Speaker 2>JavaScript or TypeScript in that case project.

00:20:17.055 --> 00:20:18.975
<v Speaker 2>However, right now the dependency

00:20:18.975 --> 00:20:21.375
<v Speaker 2>added to the project is Hono instead

00:20:21.935 --> 00:20:24.815
<v Speaker 2>of Ity. But you can choose whatever,

00:20:24.815 --> 00:20:26.655
<v Speaker 2>know, which router you want.

00:20:27.730 --> 00:20:30.130
<v Speaker 2>So before diving into code, let me do

00:20:30.130 --> 00:20:33.169
<v Speaker 2>one thing. Let's do a quick spin build

00:20:33.409 --> 00:20:36.929
<v Speaker 2>because spin build also runs an NPM install

00:20:36.929 --> 00:20:40.610
<v Speaker 2>if that hasn't been executed in that project

00:20:40.924 --> 00:20:43.404
<v Speaker 2>to pull down the dependencies

00:20:43.405 --> 00:20:44.124
<v Speaker 2>and

00:20:44.445 --> 00:20:46.284
<v Speaker 2>which, you know, is basically,

00:20:47.164 --> 00:20:49.565
<v Speaker 2>turning on the lights to get IntelliSense

00:20:49.565 --> 00:20:51.965
<v Speaker 2>and auto completion and stuff like that in

00:20:51.965 --> 00:20:53.005
<v Speaker 2>in Versus Code.

00:20:54.610 --> 00:20:55.330
<v Speaker 2>Alright.

00:20:55.890 --> 00:20:56.850
<v Speaker 2>So the

00:20:57.570 --> 00:21:00.690
<v Speaker 2>the skeleton that we create when using Hono

00:21:00.690 --> 00:21:02.929
<v Speaker 2>is giving like, you know,

00:21:03.250 --> 00:21:06.770
<v Speaker 2>simple guidelines on how you can use capabilities

00:21:06.770 --> 00:21:08.929
<v Speaker 2>provided by Hono such as the built in

00:21:08.929 --> 00:21:09.410
<v Speaker 2>logger,

00:21:10.975 --> 00:21:13.615
<v Speaker 2>a middleware that adds a response header

00:21:13.934 --> 00:21:15.855
<v Speaker 2>and to get routes.

00:21:16.095 --> 00:21:20.495
<v Speaker 2>Right? So pretty pretty default hello world experience.

00:21:21.215 --> 00:21:23.535
<v Speaker 2>Let's let's save that as it is and

00:21:23.535 --> 00:21:25.790
<v Speaker 2>we will, you know, change that and enhance

00:21:25.790 --> 00:21:26.429
<v Speaker 2>that

00:21:26.670 --> 00:21:28.030
<v Speaker 2>during the stream.

00:21:29.390 --> 00:21:30.590
<v Speaker 2>But let's let's

00:21:30.670 --> 00:21:32.510
<v Speaker 2>let's give it a try. Right? Let's say

00:21:32.510 --> 00:21:35.390
<v Speaker 2>it's been built. So we updated couple of

00:21:35.790 --> 00:21:38.270
<v Speaker 2>yeah. I removed couple of comments. So let's

00:21:38.270 --> 00:21:39.070
<v Speaker 2>build that again.

00:21:40.085 --> 00:21:40.885
<v Speaker 2>And

00:21:41.125 --> 00:21:43.205
<v Speaker 2>now that is built, I can do the

00:21:43.365 --> 00:21:46.645
<v Speaker 2>usual spin up to test it on my

00:21:46.645 --> 00:21:48.005
<v Speaker 2>local machine.

00:21:48.005 --> 00:21:50.005
<v Speaker 2>I can curl

00:21:50.485 --> 00:21:53.045
<v Speaker 2>local host 3,000.

00:21:53.720 --> 00:21:56.120
<v Speaker 2>I get back Hello Spin and I think

00:21:56.120 --> 00:21:58.440
<v Speaker 2>if I say Hello no, not greeting me.

00:21:58.440 --> 00:21:59.559
<v Speaker 2>Let's greet David.

00:21:59.880 --> 00:22:01.880
<v Speaker 2>There you go. You get Hello David. This

00:22:01.880 --> 00:22:02.680
<v Speaker 2>time that is

00:22:03.560 --> 00:22:05.080
<v Speaker 2>if we look at the headers, we get

00:22:05.080 --> 00:22:08.465
<v Speaker 2>JSON back. In contrast, the root route was

00:22:08.465 --> 00:22:09.584
<v Speaker 2>a plain text

00:22:09.825 --> 00:22:11.024
<v Speaker 2>response.

00:22:12.144 --> 00:22:14.384
<v Speaker 2>Okay. So it works on it works on

00:22:14.384 --> 00:22:15.264
<v Speaker 2>my machine.

00:22:15.505 --> 00:22:16.384
<v Speaker 2>That's great.

00:22:16.865 --> 00:22:19.024
<v Speaker 2>We see that we get logs

00:22:19.024 --> 00:22:22.065
<v Speaker 2>provided by the Hono Logger middleware.

00:22:23.390 --> 00:22:25.630
<v Speaker 2>Let's take that app and let's deploy to

00:22:25.630 --> 00:22:27.229
<v Speaker 2>Firmin Wasm functions,

00:22:27.309 --> 00:22:29.950
<v Speaker 2>which is as easy as doing a spin

00:22:30.029 --> 00:22:31.389
<v Speaker 2>echo deploy.

00:22:31.870 --> 00:22:33.549
<v Speaker 2>And right now it's taking,

00:22:33.789 --> 00:22:36.669
<v Speaker 2>you know, the Wasm file, the spin manifest,

00:22:37.065 --> 00:22:39.144
<v Speaker 2>creates an OCI artifact,

00:22:39.384 --> 00:22:42.585
<v Speaker 2>push that to the wasm func fermion wasm

00:22:42.585 --> 00:22:43.464
<v Speaker 2>functions

00:22:43.625 --> 00:22:44.584
<v Speaker 2>registry.

00:22:45.544 --> 00:22:46.104
<v Speaker 2>And

00:22:46.825 --> 00:22:50.504
<v Speaker 2>now it's deploying the application across the globe

00:22:50.190 --> 00:22:52.830
<v Speaker 2>into all the regions that are part of

00:22:52.830 --> 00:22:53.709
<v Speaker 2>the service.

00:22:54.669 --> 00:22:56.269
<v Speaker 1>So we had a question on the chat

00:22:56.269 --> 00:22:58.190
<v Speaker 1>about that. Sure. Actually, I'm gonna bring it

00:22:58.190 --> 00:23:00.429
<v Speaker 1>in now. But Paul was asking how many

00:23:00.429 --> 00:23:02.190
<v Speaker 1>pops are there on this network? How many

00:23:02.190 --> 00:23:03.470
<v Speaker 1>regions are we deploying to?

00:23:04.375 --> 00:23:06.534
<v Speaker 2>So there's a difference between,

00:23:07.015 --> 00:23:08.775
<v Speaker 2>points of presence POPs

00:23:08.775 --> 00:23:09.495
<v Speaker 2>and,

00:23:09.975 --> 00:23:10.695
<v Speaker 2>regions.

00:23:11.415 --> 00:23:14.455
<v Speaker 2>I I'm not hundred percent confident how many

00:23:14.455 --> 00:23:16.295
<v Speaker 2>regions. Let me quickly look up.

00:23:19.700 --> 00:23:22.340
<v Speaker 2>Let me quickly look up. So

00:23:24.500 --> 00:23:25.940
<v Speaker 2>list of countries

00:23:26.100 --> 00:23:28.100
<v Speaker 2>is pretty damn long.

00:23:30.260 --> 00:23:33.780
<v Speaker 2>Try to come up with Oh, we have

00:23:32.905 --> 00:23:34.985
<v Speaker 2>over 4,200

00:23:35.065 --> 00:23:38.265
<v Speaker 2>edge points of presence on the Akamai connected

00:23:38.265 --> 00:23:39.065
<v Speaker 2>network.

00:23:41.305 --> 00:23:42.825
<v Speaker 2>And the

00:23:42.825 --> 00:23:45.784
<v Speaker 2>service is right now we operate it

00:23:46.025 --> 00:23:50.570
<v Speaker 2>not in all regions provided by Akamai.

00:23:50.890 --> 00:23:53.770
<v Speaker 2>So if I remember correctly, we're currently running

00:23:53.770 --> 00:23:57.130
<v Speaker 2>in six regions as part of the preview.

00:23:57.610 --> 00:24:01.075
<v Speaker 2>However, we are super happy to stamp out

00:24:01.075 --> 00:24:04.195
<v Speaker 2>new regions and, you know, grow during the

00:24:04.195 --> 00:24:05.555
<v Speaker 2>preview period

00:24:05.555 --> 00:24:06.274
<v Speaker 2>as well.

00:24:06.755 --> 00:24:09.315
<v Speaker 2>So I think yesterday and the day before

00:24:09.315 --> 00:24:09.795
<v Speaker 2>we,

00:24:10.355 --> 00:24:12.860
<v Speaker 2>extended and or we we added two more

00:24:12.860 --> 00:24:14.780
<v Speaker 2>regions before that we were running on four

00:24:14.780 --> 00:24:15.500
<v Speaker 2>regions.

00:24:15.660 --> 00:24:18.059
<v Speaker 2>So that's growing but obviously

00:24:18.300 --> 00:24:21.420
<v Speaker 2>once we move out or graduate out of

00:24:21.420 --> 00:24:25.500
<v Speaker 2>the current preview phase, we will distribute it

00:24:24.915 --> 00:24:28.355
<v Speaker 2>across all the date, all the regions that

00:24:28.355 --> 00:24:29.315
<v Speaker 2>we could

00:24:29.555 --> 00:24:30.595
<v Speaker 2>deploy

00:24:30.595 --> 00:24:31.235
<v Speaker 2>to.

00:24:32.115 --> 00:24:33.395
<v Speaker 1>Awesome. Thank you.

00:24:33.955 --> 00:24:35.395
<v Speaker 2>Yeah. Great

00:24:35.635 --> 00:24:38.675
<v Speaker 2>question, Paul. Sorry for not remembering

00:24:38.675 --> 00:24:39.395
<v Speaker 2>the number

00:24:39.890 --> 00:24:43.090
<v Speaker 2>from top of my head. But, yeah, it's,

00:24:43.169 --> 00:24:45.570
<v Speaker 2>more than 4,200

00:24:46.130 --> 00:24:46.929
<v Speaker 2>POPs.

00:24:47.010 --> 00:24:50.289
<v Speaker 2>Okay. So in the meantime, deployment it roughly

00:24:50.289 --> 00:24:53.265
<v Speaker 2>takes a minute or so to deploy or

00:24:53.265 --> 00:24:55.585
<v Speaker 2>to ensure that the app is deployed across

00:24:55.585 --> 00:24:56.624
<v Speaker 2>all the regions.

00:24:57.025 --> 00:24:59.505
<v Speaker 2>It happens in parallel so we expect like

00:24:59.505 --> 00:25:02.065
<v Speaker 2>the same you know time frame no matter

00:25:02.065 --> 00:25:03.504
<v Speaker 2>how many regions

00:25:03.585 --> 00:25:04.705
<v Speaker 2>participate,

00:25:04.865 --> 00:25:06.865
<v Speaker 2>or are part of the service offering.

00:25:07.300 --> 00:25:09.380
<v Speaker 2>And we end up with a

00:25:10.260 --> 00:25:11.220
<v Speaker 2>generated,

00:25:11.620 --> 00:25:14.820
<v Speaker 2>sub domain under echar.fermion.tech,

00:25:15.220 --> 00:25:16.740
<v Speaker 2>which you can obviously,

00:25:16.900 --> 00:25:17.700
<v Speaker 2>you know,

00:25:17.940 --> 00:25:18.820
<v Speaker 2>put behind

00:25:19.795 --> 00:25:22.755
<v Speaker 2>your first, or your first line of of

00:25:22.755 --> 00:25:25.315
<v Speaker 2>defense or your DNS configuration,

00:25:25.315 --> 00:25:27.235
<v Speaker 2>right, to expose it under your,

00:25:27.555 --> 00:25:29.715
<v Speaker 2>domain name. So let's curl it.

00:25:30.755 --> 00:25:32.275
<v Speaker 2>And we get a hello spin.

00:25:32.435 --> 00:25:34.115
<v Speaker 2>And I think it was hello

00:25:34.620 --> 00:25:35.899
<v Speaker 2>raw

00:25:36.060 --> 00:25:37.580
<v Speaker 2>code, let's do that.

00:25:38.140 --> 00:25:41.020
<v Speaker 2>And there we go. And we get back,

00:25:41.820 --> 00:25:44.620
<v Speaker 2>the expected result. If we

00:25:45.180 --> 00:25:47.500
<v Speaker 2>take a look at the headers right now,

00:25:48.835 --> 00:25:51.235
<v Speaker 2>oops, dash I, we

00:25:52.355 --> 00:25:53.715
<v Speaker 2>can see that

00:25:53.955 --> 00:25:55.475
<v Speaker 2>the closest one,

00:25:55.715 --> 00:25:57.075
<v Speaker 2>for me is

00:25:57.075 --> 00:25:58.435
<v Speaker 2>the European

00:25:58.435 --> 00:25:59.875
<v Speaker 2>Central region

00:25:59.875 --> 00:26:00.515
<v Speaker 2>in,

00:26:00.995 --> 00:26:02.995
<v Speaker 2>in the Akamai

00:26:03.190 --> 00:26:04.070
<v Speaker 2>cloud.

00:26:04.710 --> 00:26:07.270
<v Speaker 2>This is due to the fact that I'm

00:26:07.430 --> 00:26:11.270
<v Speaker 2>based close like 150 kilometers away from Frankfurt.

00:26:11.830 --> 00:26:12.549
<v Speaker 2>So,

00:26:13.590 --> 00:26:16.790
<v Speaker 2>yeah. If I would live like couple of

00:26:16.790 --> 00:26:18.310
<v Speaker 2>kilometers further

00:26:18.310 --> 00:26:18.710
<v Speaker 2>south,

00:26:19.264 --> 00:26:21.825
<v Speaker 2>chances would be better to end up in

00:26:21.825 --> 00:26:23.104
<v Speaker 2>a France

00:26:23.105 --> 00:26:25.105
<v Speaker 2>region because

00:26:25.105 --> 00:26:27.024
<v Speaker 2>there I'm so close to,

00:26:27.345 --> 00:26:28.704
<v Speaker 2>to the France border.

00:26:29.024 --> 00:26:31.105
<v Speaker 2>But that's like an indicator that you can

00:26:31.105 --> 00:26:34.625
<v Speaker 2>see, hey, which which region handled that particular

00:26:34.770 --> 00:26:35.650
<v Speaker 2>request.

00:26:35.650 --> 00:26:37.730
<v Speaker 1>Can you drop that URL in the the

00:26:37.730 --> 00:26:39.570
<v Speaker 1>chat for me? I'm I'm just curious. I

00:26:39.570 --> 00:26:40.850
<v Speaker 1>wanna I wanna see if I'm gonna get

00:26:40.850 --> 00:26:43.010
<v Speaker 1>EU Central or something else. Sure.

00:26:43.250 --> 00:26:45.970
<v Speaker 2>Let me copy that. And,

00:26:48.370 --> 00:26:49.490
<v Speaker 2>there we

00:26:49.810 --> 00:26:50.130
<v Speaker 2>go.

00:26:51.955 --> 00:26:54.274
<v Speaker 1>Thank you very much. Did you get it?

00:26:54.275 --> 00:26:56.195
<v Speaker 1>I I got it. Yeah. Okay. Cool.

00:27:02.690 --> 00:27:04.129
<v Speaker 1>I got Paris.

00:27:04.130 --> 00:27:05.409
<v Speaker 1>There you go. Paris.

00:27:06.610 --> 00:27:07.490
<v Speaker 2>Interesting.

00:27:08.530 --> 00:27:11.170
<v Speaker 2>Well, yeah, I guess that's a good I'm

00:27:11.170 --> 00:27:14.210
<v Speaker 1>in Scotland. So Oh, okay. That's pretty good.

00:27:14.210 --> 00:27:15.170
<v Speaker 1>Yeah. I'll take that.

00:27:16.695 --> 00:27:20.534
<v Speaker 2>There's there's another interesting header added over here.

00:27:20.534 --> 00:27:23.575
<v Speaker 2>We have that x Envoy upstream service time,

00:27:23.735 --> 00:27:25.414
<v Speaker 2>which is basically telling you,

00:27:25.975 --> 00:27:28.775
<v Speaker 2>after entering the network, the Akamai network, how

00:27:28.775 --> 00:27:31.720
<v Speaker 2>long in milliseconds did it take to process

00:27:31.720 --> 00:27:33.239
<v Speaker 2>that entire request.

00:27:33.559 --> 00:27:34.999
<v Speaker 2>And we see four

00:27:35.320 --> 00:27:36.279
<v Speaker 2>which is

00:27:36.759 --> 00:27:39.559
<v Speaker 2>that's I executed the request couple of times.

00:27:39.559 --> 00:27:43.080
<v Speaker 2>It's higher as I expected it and that's

00:27:43.080 --> 00:27:45.755
<v Speaker 2>due to the fact that the app writes

00:27:45.755 --> 00:27:48.315
<v Speaker 2>to standard out. Right? Which is always an

00:27:48.315 --> 00:27:49.274
<v Speaker 2>expensive,

00:27:49.755 --> 00:27:51.114
<v Speaker 2>action. Right?

00:27:51.674 --> 00:27:54.874
<v Speaker 2>So if you strive for best perf,

00:27:55.355 --> 00:27:56.234
<v Speaker 2>obviously,

00:27:56.394 --> 00:27:58.075
<v Speaker 2>Rust is faster

00:27:58.154 --> 00:28:00.720
<v Speaker 2>or Rust code compiled to WebAssembly.

00:28:00.800 --> 00:28:04.880
<v Speaker 2>That's the alright. The the the correct explanation

00:28:05.040 --> 00:28:08.720
<v Speaker 2>is faster than taking JavaScript or TypeScript and

00:28:08.720 --> 00:28:10.480
<v Speaker 2>compile it onto WebAssembly

00:28:10.640 --> 00:28:13.815
<v Speaker 2>because the binary does not have to, you

00:28:13.815 --> 00:28:15.895
<v Speaker 2>know, doesn't have to contain

00:28:15.895 --> 00:28:18.855
<v Speaker 2>a run time like a JavaScript run time.

00:28:19.735 --> 00:28:22.135
<v Speaker 2>So there are ways to get even lower

00:28:22.135 --> 00:28:23.174
<v Speaker 2>like to

00:28:23.895 --> 00:28:25.415
<v Speaker 2>one millisecond or less.

00:28:26.429 --> 00:28:27.070
<v Speaker 2>Okay.

00:28:27.230 --> 00:28:29.629
<v Speaker 2>Now we have that hello world deployed

00:28:29.789 --> 00:28:32.029
<v Speaker 2>and we can do spin

00:28:32.029 --> 00:28:34.429
<v Speaker 2>echo logs over here

00:28:35.630 --> 00:28:38.429
<v Speaker 2>to get like the logs that this particular

00:28:38.429 --> 00:28:39.549
<v Speaker 2>app produces.

00:28:40.465 --> 00:28:41.585
<v Speaker 2>And the,

00:28:41.985 --> 00:28:45.504
<v Speaker 2>plugin is smart enough to recognize, hey, you're

00:28:45.504 --> 00:28:47.424
<v Speaker 2>still in that folder

00:28:47.664 --> 00:28:49.985
<v Speaker 2>where you created that application.

00:28:49.985 --> 00:28:51.664
<v Speaker 2>So it can determine

00:28:51.985 --> 00:28:54.225
<v Speaker 2>the actual name of the application

00:28:54.409 --> 00:28:55.210
<v Speaker 2>by

00:28:55.210 --> 00:28:56.090
<v Speaker 2>investigating

00:28:56.090 --> 00:28:58.809
<v Speaker 2>the local, the current folder. Right? So if

00:28:58.809 --> 00:29:00.889
<v Speaker 2>I step out of this folder

00:29:01.929 --> 00:29:04.409
<v Speaker 2>and if I do a spin oops spin

00:29:04.409 --> 00:29:06.649
<v Speaker 2>echo logs it says hey there is no

00:29:06.649 --> 00:29:08.875
<v Speaker 2>spin TOML. Right? I can't find I don't

00:29:08.875 --> 00:29:10.874
<v Speaker 2>know which logs I should present.

00:29:11.434 --> 00:29:14.155
<v Speaker 2>So I can say, there's Hello KubeCon. Okay.

00:29:14.155 --> 00:29:16.315
<v Speaker 2>I don't know if that one create logs.

00:29:16.795 --> 00:29:19.434
<v Speaker 2>Fermion wasn't functions two, then I provide the

00:29:19.434 --> 00:29:21.515
<v Speaker 2>name of the app. Right. And I can,

00:29:21.515 --> 00:29:23.035
<v Speaker 2>you know, obviously also

00:29:23.690 --> 00:29:26.809
<v Speaker 2>inspect how an app behaves at run time.

00:29:26.809 --> 00:29:28.650
<v Speaker 2>If I don't have access to the source

00:29:28.650 --> 00:29:31.450
<v Speaker 2>code or if I am in a different

00:29:31.530 --> 00:29:34.730
<v Speaker 2>like corner on my on my hard disk.

00:29:37.575 --> 00:29:40.375
<v Speaker 2>Cool. So this is like super sample a

00:29:40.375 --> 00:29:42.135
<v Speaker 2>super simple hello world.

00:29:42.695 --> 00:29:47.175
<v Speaker 2>But what are like typical use cases. Right.

00:29:47.175 --> 00:29:49.495
<v Speaker 2>So we we thought about,

00:29:50.135 --> 00:29:50.855
<v Speaker 2>besides,

00:29:51.390 --> 00:29:54.030
<v Speaker 2>let's call it line of business applications.

00:29:54.030 --> 00:29:56.910
<v Speaker 2>So I don't know, crud over a database

00:29:56.910 --> 00:29:57.710
<v Speaker 2>or,

00:29:57.710 --> 00:29:58.350
<v Speaker 2>you

00:29:58.990 --> 00:29:59.470
<v Speaker 2>know,

00:29:59.870 --> 00:30:00.669
<v Speaker 2>interacting

00:30:01.070 --> 00:30:03.230
<v Speaker 2>with the key value or loading data from

00:30:03.230 --> 00:30:04.750
<v Speaker 2>a key value store. What are what are

00:30:04.750 --> 00:30:06.030
<v Speaker 2>typical use cases?

00:30:07.765 --> 00:30:09.525
<v Speaker 2>And what we created,

00:30:09.525 --> 00:30:11.525
<v Speaker 2>this is a public repository.

00:30:11.525 --> 00:30:14.485
<v Speaker 2>And again, I will post the link to

00:30:14.485 --> 00:30:16.725
<v Speaker 2>or will send the link to you, David.

00:30:18.325 --> 00:30:19.285
<v Speaker 2>This one

00:30:20.429 --> 00:30:21.229
<v Speaker 2>where,

00:30:22.269 --> 00:30:23.869
<v Speaker 2>everyone could explore

00:30:23.870 --> 00:30:26.830
<v Speaker 2>couple of samples that we created as part

00:30:26.830 --> 00:30:29.389
<v Speaker 2>of tutorials or just that we think

00:30:29.789 --> 00:30:34.245
<v Speaker 2>are super valuable for you know doing computation

00:30:34.245 --> 00:30:36.164
<v Speaker 2>close to the user

00:30:36.245 --> 00:30:38.884
<v Speaker 2>instead of, you know, routing the request around

00:30:38.884 --> 00:30:41.764
<v Speaker 2>the globe to a data center that

00:30:41.924 --> 00:30:43.605
<v Speaker 2>is has been selected.

00:30:45.310 --> 00:30:47.390
<v Speaker 2>So there are a couple of AB testing

00:30:47.390 --> 00:30:48.270
<v Speaker 2>scenarios,

00:30:48.270 --> 00:30:49.630
<v Speaker 2>traffic filtering,

00:30:49.630 --> 00:30:50.110
<v Speaker 2>blocking

00:30:50.430 --> 00:30:54.270
<v Speaker 2>requests based on users country and and stuff

00:30:54.270 --> 00:30:57.310
<v Speaker 2>like that. Right? Response header modification,

00:30:59.045 --> 00:31:01.044
<v Speaker 2>gated gated access,

00:31:01.045 --> 00:31:02.485
<v Speaker 2>so a limit access,

00:31:02.645 --> 00:31:05.605
<v Speaker 2>that's that's also pretty interesting. So imagine you

00:31:05.605 --> 00:31:06.325
<v Speaker 2>have like,

00:31:06.965 --> 00:31:08.404
<v Speaker 2>you you are

00:31:08.565 --> 00:31:10.085
<v Speaker 2>you have no embargo.

00:31:10.085 --> 00:31:12.165
<v Speaker 2>Right? And you wanna do a a hard

00:31:12.165 --> 00:31:15.659
<v Speaker 2>launch launch at at at a particular time,

00:31:16.380 --> 00:31:19.340
<v Speaker 2>then you can easily because that execution

00:31:19.340 --> 00:31:21.740
<v Speaker 2>is so fast, right, you can just say,

00:31:21.740 --> 00:31:22.940
<v Speaker 2>hey, up until

00:31:23.340 --> 00:31:24.139
<v Speaker 2>eleven,

00:31:24.940 --> 00:31:26.539
<v Speaker 2>11:59,

00:31:26.940 --> 00:31:28.220
<v Speaker 2>fifty nine

00:31:28.615 --> 00:31:29.494
<v Speaker 2>AM,

00:31:29.654 --> 00:31:31.974
<v Speaker 2>return a 04:04 and

00:31:33.255 --> 00:31:34.934
<v Speaker 2>starting at noon

00:31:35.015 --> 00:31:37.414
<v Speaker 2>just open the gate and let people in.

00:31:37.414 --> 00:31:37.815
<v Speaker 2>Right?

00:31:38.455 --> 00:31:41.095
<v Speaker 2>So there are interesting scenarios that you could

00:31:41.095 --> 00:31:44.360
<v Speaker 2>could achieve with running closer to user when

00:31:44.360 --> 00:31:46.440
<v Speaker 2>you could place computation,

00:31:47.800 --> 00:31:51.880
<v Speaker 2>yeah, with low latency instead of, the the

00:31:51.880 --> 00:31:53.560
<v Speaker 2>regular way to the data center.

00:31:55.895 --> 00:31:57.735
<v Speaker 2>Yeah. And I thought it would be great

00:31:57.735 --> 00:32:00.295
<v Speaker 2>to take one of the examples and implement

00:32:00.295 --> 00:32:01.654
<v Speaker 2>it from scratch.

00:32:01.895 --> 00:32:02.855
<v Speaker 2>So

00:32:03.335 --> 00:32:05.895
<v Speaker 2>I would say like a simple

00:32:06.790 --> 00:32:08.710
<v Speaker 2>AB testing scenario,

00:32:09.350 --> 00:32:11.510
<v Speaker 2>to return different content,

00:32:12.950 --> 00:32:14.150
<v Speaker 2>based on

00:32:14.950 --> 00:32:17.590
<v Speaker 2>a key value store. So obviously,

00:32:17.590 --> 00:32:19.750
<v Speaker 2>and I think this is super important for

00:32:19.750 --> 00:32:20.310
<v Speaker 2>like

00:32:20.735 --> 00:32:21.615
<v Speaker 2>enterprise

00:32:21.615 --> 00:32:22.495
<v Speaker 2>scenarios

00:32:22.495 --> 00:32:23.855
<v Speaker 2>or like,

00:32:24.415 --> 00:32:26.255
<v Speaker 2>you know, extending existing,

00:32:26.735 --> 00:32:28.015
<v Speaker 2>software products.

00:32:28.415 --> 00:32:31.695
<v Speaker 2>You can provide your own key value store.

00:32:31.695 --> 00:32:34.270
<v Speaker 2>Right? That could be in your cloud of

00:32:34.270 --> 00:32:36.430
<v Speaker 2>choice. That could be, I don't know, a

00:32:36.430 --> 00:32:39.310
<v Speaker 2>hosted one that you expose through your private

00:32:39.310 --> 00:32:39.950
<v Speaker 2>network.

00:32:40.270 --> 00:32:43.310
<v Speaker 2>Whatever. Right? You can provide your own, but

00:32:43.310 --> 00:32:47.310
<v Speaker 2>we also provide a globally distributed

00:32:46.725 --> 00:32:49.044
<v Speaker 2>key value store as part of the service

00:32:49.044 --> 00:32:51.205
<v Speaker 2>offering. And that's what I will use for

00:32:51.205 --> 00:32:53.364
<v Speaker 2>demonstration purposes right now.

00:32:54.885 --> 00:32:58.085
<v Speaker 2>Okay. We start again with, or let's let's

00:32:58.085 --> 00:33:00.730
<v Speaker 2>check what we have over here. Good. So

00:33:00.730 --> 00:33:04.250
<v Speaker 2>let's do a spin a new t http

00:33:04.250 --> 00:33:07.130
<v Speaker 2>t s again and I think after that

00:33:07.130 --> 00:33:08.970
<v Speaker 2>one we will do a simple rust to

00:33:08.970 --> 00:33:11.610
<v Speaker 2>illustrate that every language works.

00:33:13.305 --> 00:33:15.545
<v Speaker 2>But let's say this is the AB

00:33:16.265 --> 00:33:17.385
<v Speaker 2>key value,

00:33:19.465 --> 00:33:21.065
<v Speaker 2>AB testing

00:33:21.065 --> 00:33:23.145
<v Speaker 2>sample. Let's go that way.

00:33:24.745 --> 00:33:27.385
<v Speaker 2>Okay. We wanna respond to everything and

00:33:27.690 --> 00:33:30.089
<v Speaker 2>I like Hono, so let's stick with Hono.

00:33:30.570 --> 00:33:33.209
<v Speaker 2>And let's do a spin build again to

00:33:33.289 --> 00:33:36.250
<v Speaker 2>ensure all the dependencies are installed. Can I

00:33:36.250 --> 00:33:38.250
<v Speaker 1>ask some questions just about Sure? The setup

00:33:38.250 --> 00:33:40.265
<v Speaker 1>right now? So, you know, this is the

00:33:40.265 --> 00:33:42.105
<v Speaker 1>second time we spun up a a TypeScript

00:33:42.105 --> 00:33:44.105
<v Speaker 1>thing. And I think, you know, anyone following

00:33:44.105 --> 00:33:45.465
<v Speaker 1>along at home that wants to do this

00:33:45.465 --> 00:33:47.544
<v Speaker 1>too. What they're gonna see is one, NPM

00:33:47.544 --> 00:33:49.544
<v Speaker 1>is you and node are used by default

00:33:49.544 --> 00:33:52.664
<v Speaker 1>and webpack is used as a bundle. So

00:33:52.920 --> 00:33:54.680
<v Speaker 1>as someone who writes a lot of TypeScript

00:33:54.680 --> 00:33:56.920
<v Speaker 1>myself, there's obviously a lot of momentum now

00:33:56.920 --> 00:33:59.560
<v Speaker 1>to alternative run times. I'm talking about Dino

00:33:59.560 --> 00:34:00.679
<v Speaker 1>and Bunn,

00:34:00.840 --> 00:34:01.960
<v Speaker 1>as well as

00:34:02.200 --> 00:34:03.160
<v Speaker 1>almost

00:34:03.160 --> 00:34:05.960
<v Speaker 1>mass migration away from webpack to things like

00:34:05.960 --> 00:34:06.680
<v Speaker 1>ES build.

00:34:07.365 --> 00:34:10.085
<v Speaker 1>So my curiosity is like, okay, do I

00:34:10.085 --> 00:34:13.045
<v Speaker 1>have the options to use BUN or Deno

00:34:13.045 --> 00:34:13.925
<v Speaker 1>instead?

00:34:14.005 --> 00:34:15.685
<v Speaker 1>Can I replace Webpack?

00:34:15.685 --> 00:34:17.605
<v Speaker 1>And if I can, is this as simple

00:34:17.605 --> 00:34:19.764
<v Speaker 1>as me creating a new template and submitting

00:34:19.764 --> 00:34:21.445
<v Speaker 1>a PR? Like, how does this all work

00:34:21.445 --> 00:34:24.030
<v Speaker 1>under the hood? That's a that's a pretty

00:34:24.030 --> 00:34:26.510
<v Speaker 2>good question. So let's

00:34:27.310 --> 00:34:30.430
<v Speaker 2>take that question and go to the Spin.

00:34:30.430 --> 00:34:31.790
<v Speaker 2>Js SDK.

00:34:31.790 --> 00:34:32.350
<v Speaker 2>So,

00:34:32.670 --> 00:34:33.550
<v Speaker 2>obviously, the

00:34:34.405 --> 00:34:38.085
<v Speaker 2>JS SDK as all the all the spin

00:34:38.085 --> 00:34:39.045
<v Speaker 2>repositories

00:34:39.045 --> 00:34:41.925
<v Speaker 2>has been moved from the Fermion organization

00:34:42.165 --> 00:34:45.365
<v Speaker 2>to the spin framework organization on GitHub as

00:34:45.365 --> 00:34:48.240
<v Speaker 2>part of Spin being accepted

00:34:48.320 --> 00:34:51.760
<v Speaker 2>as a CNCF sandbox project. So that's why

00:34:51.760 --> 00:34:53.520
<v Speaker 2>there is a different URL.

00:34:53.760 --> 00:34:56.480
<v Speaker 2>And there is the Spin, JS SDK.

00:34:57.920 --> 00:34:58.560
<v Speaker 2>So

00:34:59.365 --> 00:35:01.125
<v Speaker 2>there are templates

00:35:01.205 --> 00:35:02.485
<v Speaker 2>that, you know,

00:35:02.965 --> 00:35:04.165
<v Speaker 2>are provided

00:35:04.165 --> 00:35:06.165
<v Speaker 2>that you can install

00:35:06.245 --> 00:35:07.605
<v Speaker 2>on your machine.

00:35:07.925 --> 00:35:10.405
<v Speaker 2>Obviously, you can roll your own templates.

00:35:10.805 --> 00:35:12.885
<v Speaker 2>So if we

00:35:12.290 --> 00:35:14.369
<v Speaker 2>sneak into pull requests,

00:35:14.690 --> 00:35:17.810
<v Speaker 2>there is ad support for Yarn,

00:35:18.290 --> 00:35:20.690
<v Speaker 2>which we postponed a bit because,

00:35:21.010 --> 00:35:23.410
<v Speaker 2>we brought in Hono and we did some

00:35:23.410 --> 00:35:24.690
<v Speaker 2>major refactorings

00:35:24.690 --> 00:35:27.090
<v Speaker 2>about modules modularization

00:35:27.705 --> 00:35:30.825
<v Speaker 2>that I that I will explain in a

00:35:30.825 --> 00:35:31.385
<v Speaker 2>second.

00:35:31.705 --> 00:35:32.345
<v Speaker 2>But

00:35:32.585 --> 00:35:34.345
<v Speaker 2>in regards to,

00:35:34.745 --> 00:35:35.705
<v Speaker 2>the build

00:35:35.785 --> 00:35:37.545
<v Speaker 2>tool chain and

00:35:38.505 --> 00:35:39.785
<v Speaker 2>package managers,

00:35:40.425 --> 00:35:41.625
<v Speaker 2>there is obviously

00:35:41.705 --> 00:35:44.680
<v Speaker 2>a way to, you know, customize

00:35:44.680 --> 00:35:47.000
<v Speaker 2>what happens. A spin template,

00:35:47.160 --> 00:35:48.920
<v Speaker 2>let me let me zoom in a bit,

00:35:48.920 --> 00:35:52.040
<v Speaker 2>always consists of two things. You have that

00:35:52.040 --> 00:35:55.000
<v Speaker 2>metadata file that describes what this template is

00:35:55.000 --> 00:35:55.480
<v Speaker 2>all about,

00:35:57.875 --> 00:36:00.275
<v Speaker 2>That could have like parameters.

00:36:00.275 --> 00:36:03.315
<v Speaker 2>Right? So HTTP router being the new one

00:36:03.315 --> 00:36:04.115
<v Speaker 2>over here.

00:36:04.595 --> 00:36:05.715
<v Speaker 2>And we have

00:36:06.035 --> 00:36:08.755
<v Speaker 2>there are two ways how you can create

00:36:08.755 --> 00:36:10.355
<v Speaker 2>a new component

00:36:10.355 --> 00:36:13.000
<v Speaker 2>in Spin. One is that spin new that

00:36:13.000 --> 00:36:15.240
<v Speaker 2>I did like two times right now. I

00:36:15.240 --> 00:36:16.440
<v Speaker 2>choose a template

00:36:16.680 --> 00:36:18.520
<v Speaker 2>and then basically everything

00:36:18.599 --> 00:36:21.000
<v Speaker 2>from the content folder over here will be

00:36:21.000 --> 00:36:22.520
<v Speaker 2>dumped to your

00:36:22.680 --> 00:36:24.279
<v Speaker 2>desired folder. Right?

00:36:25.105 --> 00:36:28.065
<v Speaker 2>With some, you know, replacement happening in in

00:36:28.065 --> 00:36:30.145
<v Speaker 2>template files and so and so on and

00:36:30.145 --> 00:36:30.865
<v Speaker 2>so forth.

00:36:31.185 --> 00:36:34.065
<v Speaker 2>However, there's a second way. You can always

00:36:34.065 --> 00:36:37.265
<v Speaker 2>add an additional component to an existing spin

00:36:37.265 --> 00:36:39.970
<v Speaker 2>app. And that's, you know, I think it's

00:36:39.970 --> 00:36:43.089
<v Speaker 2>valuable to understand that that's why there is

00:36:43.089 --> 00:36:44.130
<v Speaker 2>a dedicated

00:36:44.130 --> 00:36:45.010
<v Speaker 2>component

00:36:45.010 --> 00:36:45.970
<v Speaker 2>TXT,

00:36:46.690 --> 00:36:49.650
<v Speaker 2>over here that will be merged into your

00:36:49.650 --> 00:36:50.450
<v Speaker 2>existing

00:36:50.450 --> 00:36:51.410
<v Speaker 2>spin.toml.

00:36:52.025 --> 00:36:54.905
<v Speaker 2>And if we look into the package JSON,

00:36:54.905 --> 00:36:57.465
<v Speaker 2>you can see there's right now npm

00:36:57.945 --> 00:36:58.985
<v Speaker 2>npx

00:36:58.985 --> 00:36:59.945
<v Speaker 2>webpack

00:37:00.185 --> 00:37:02.105
<v Speaker 2>being executed

00:37:02.345 --> 00:37:03.385
<v Speaker 2>before

00:37:03.945 --> 00:37:06.920
<v Speaker 2>j two wasm is basically responsible for taking

00:37:06.920 --> 00:37:10.440
<v Speaker 2>the JavaScript source code that Webpack created with

00:37:10.440 --> 00:37:11.640
<v Speaker 2>our templates and,

00:37:12.359 --> 00:37:15.240
<v Speaker 2>you know, turning that into into WebAssembly.

00:37:15.640 --> 00:37:17.960
<v Speaker 2>So obviously you could like

00:37:18.535 --> 00:37:19.815
<v Speaker 2>submit a PR,

00:37:19.975 --> 00:37:22.375
<v Speaker 2>replace Webpack with ES build.

00:37:23.095 --> 00:37:24.375
<v Speaker 2>Definitely possible.

00:37:24.375 --> 00:37:24.855
<v Speaker 2>Right?

00:37:27.015 --> 00:37:28.855
<v Speaker 2>Regarding the runtime,

00:37:29.175 --> 00:37:29.415
<v Speaker 2>so

00:37:31.190 --> 00:37:32.549
<v Speaker 2>the JavaScript,

00:37:32.710 --> 00:37:33.510
<v Speaker 2>SDK

00:37:33.510 --> 00:37:35.030
<v Speaker 2>for Spin and

00:37:35.510 --> 00:37:38.150
<v Speaker 2>the underlying tools, the build tools,

00:37:38.470 --> 00:37:41.910
<v Speaker 2>so Spin framework build tools, they're responsible for

00:37:41.910 --> 00:37:45.325
<v Speaker 2>turning your JavaScript source code into WebAssembly. And

00:37:45.325 --> 00:37:47.884
<v Speaker 2>as part of that, a runtime must be

00:37:47.884 --> 00:37:50.924
<v Speaker 2>shipped or must be compiled to WebAssembly as

00:37:50.924 --> 00:37:51.484
<v Speaker 2>well.

00:37:51.884 --> 00:37:55.405
<v Speaker 2>And we are currently using Starling

00:37:56.125 --> 00:37:57.085
<v Speaker 2>Monkey,

00:37:57.805 --> 00:37:58.845
<v Speaker 2>which is a

00:37:59.460 --> 00:38:01.220
<v Speaker 2>bytecode alliance

00:38:01.220 --> 00:38:02.020
<v Speaker 2>project

00:38:03.140 --> 00:38:05.620
<v Speaker 2>that is, you know, the

00:38:05.940 --> 00:38:06.740
<v Speaker 2>runtime.

00:38:06.740 --> 00:38:09.940
<v Speaker 2>I I think it roots from SpiderMonkey the

00:38:11.060 --> 00:38:11.940
<v Speaker 2>runtime

00:38:11.940 --> 00:38:13.780
<v Speaker 2>the from from Firefox.

00:38:13.780 --> 00:38:14.020
<v Speaker 2>Right?

00:38:15.095 --> 00:38:17.895
<v Speaker 2>It in addition to other runtimes,

00:38:17.974 --> 00:38:18.535
<v Speaker 2>is

00:38:19.734 --> 00:38:22.615
<v Speaker 2>it implements all the service worker specs and

00:38:22.615 --> 00:38:24.535
<v Speaker 2>so on and so forth so that, you

00:38:24.535 --> 00:38:25.015
<v Speaker 2>know,

00:38:25.494 --> 00:38:28.055
<v Speaker 2>regular like fetch APIs work as you would

00:38:28.055 --> 00:38:29.015
<v Speaker 2>expect them to work.

00:38:30.480 --> 00:38:32.640
<v Speaker 2>Swapping out that one is

00:38:32.880 --> 00:38:34.240
<v Speaker 2>also possible,

00:38:34.240 --> 00:38:36.880
<v Speaker 2>right, as long as the desired runtime could

00:38:36.880 --> 00:38:38.320
<v Speaker 2>be turned into

00:38:39.040 --> 00:38:40.640
<v Speaker 2>Wazi or WASM

00:38:40.720 --> 00:38:42.000
<v Speaker 2>Wazi P

00:38:42.320 --> 00:38:43.944
<v Speaker 2>two compliant,

00:38:44.185 --> 00:38:46.905
<v Speaker 2>component or in a WASM WebAssembly component.

00:38:48.665 --> 00:38:52.185
<v Speaker 2>Yeah. So I don't know if Deno or

00:38:52.185 --> 00:38:53.145
<v Speaker 2>Bunn

00:38:53.145 --> 00:38:55.065
<v Speaker 2>could be turned I I haven't looked into

00:38:55.065 --> 00:38:57.224
<v Speaker 2>that, to be honest. Deno can certainly

00:38:57.570 --> 00:38:58.290
<v Speaker 1>run

00:38:58.690 --> 00:39:00.210
<v Speaker 1>and import Wasm?

00:39:01.490 --> 00:39:02.850
<v Speaker 1>But I I I don't think moving away

00:39:02.850 --> 00:39:04.370
<v Speaker 1>from Starland Monkey is a good idea. I

00:39:04.370 --> 00:39:06.210
<v Speaker 1>think that that is the right move. I

00:39:06.210 --> 00:39:08.370
<v Speaker 1>I think looking now that I understand how

00:39:08.370 --> 00:39:09.810
<v Speaker 1>this is built under the hood, if you

00:39:09.810 --> 00:39:11.865
<v Speaker 1>go back to your template one. Right? Yeah.

00:39:11.865 --> 00:39:13.785
<v Speaker 1>Really, I just need to update the build

00:39:13.785 --> 00:39:16.345
<v Speaker 1>steps in my package JSON. Like, webpack, I'm

00:39:16.345 --> 00:39:18.105
<v Speaker 1>pretty sure I can remove. Even Dino has

00:39:18.105 --> 00:39:19.545
<v Speaker 1>a bundle command, which will give me a

00:39:19.545 --> 00:39:21.945
<v Speaker 1>bundle dot j s. So Mhmm. Then I

00:39:21.945 --> 00:39:24.665
<v Speaker 1>could just run the j to BASM

00:39:25.240 --> 00:39:27.800
<v Speaker 1>and hopefully, would work. What is the responsibility

00:39:27.800 --> 00:39:29.320
<v Speaker 1>then? Sorry. I know we're getting into the

00:39:29.320 --> 00:39:31.400
<v Speaker 1>weeds of it now. What is the responsibility

00:39:31.400 --> 00:39:33.480
<v Speaker 1>of the build tools package? What is that

00:39:33.480 --> 00:39:34.040
<v Speaker 1>doing?

00:39:35.640 --> 00:39:37.720
<v Speaker 2>So that's a good question.

00:39:37.800 --> 00:39:40.335
<v Speaker 2>Top of my head, we

00:39:40.335 --> 00:39:41.135
<v Speaker 2>have to

00:39:41.375 --> 00:39:43.055
<v Speaker 2>look into that. Let me Yeah. Go take

00:39:43.055 --> 00:39:43.695
<v Speaker 1>a look.

00:39:46.655 --> 00:39:48.095
<v Speaker 2>Spin framework.

00:39:48.335 --> 00:39:49.375
<v Speaker 2>Come

00:39:49.455 --> 00:39:49.935
<v Speaker 2>on.

00:39:50.655 --> 00:39:54.160
<v Speaker 2>So the build tools, I expect them to

00:39:54.160 --> 00:39:55.440
<v Speaker 2>be good.

00:39:57.200 --> 00:39:59.200
<v Speaker 2>No, maybe it's Maybe it's on the JS

00:39:59.200 --> 00:40:01.520
<v Speaker 1>SDK. Yeah, maybe it's a yeah,

00:40:02.720 --> 00:40:05.280
<v Speaker 2>that was wrong. Maybe it's a package being

00:40:06.945 --> 00:40:07.745
<v Speaker 2>packages.

00:40:08.625 --> 00:40:11.025
<v Speaker 2>So the, yeah, there it is. Oh

00:40:11.025 --> 00:40:13.425
<v Speaker 2>yeah, it's basically wrapping

00:40:13.425 --> 00:40:14.465
<v Speaker 2>componentized

00:40:14.465 --> 00:40:15.345
<v Speaker 2>JS

00:40:15.345 --> 00:40:16.225
<v Speaker 2>and yeah.

00:40:16.385 --> 00:40:18.145
<v Speaker 2>Oh, so wrapping up with them. Yeah, it

00:40:18.145 --> 00:40:19.905
<v Speaker 2>was basically me

00:40:19.905 --> 00:40:20.705
<v Speaker 2>catching

00:40:20.705 --> 00:40:23.090
<v Speaker 2>up with like recent

00:40:23.090 --> 00:40:23.970
<v Speaker 2>modifications

00:40:25.410 --> 00:40:27.090
<v Speaker 2>right now, a talk.

00:40:29.490 --> 00:40:30.050
<v Speaker 2>So

00:40:30.690 --> 00:40:32.850
<v Speaker 2>over the past couple of months, there was

00:40:32.850 --> 00:40:34.770
<v Speaker 2>a lot of there were a lot of

00:40:34.770 --> 00:40:35.410
<v Speaker 2>improvements

00:40:35.655 --> 00:40:38.935
<v Speaker 2>to the JavaScript SDK and the JavaScript,

00:40:39.095 --> 00:40:39.975
<v Speaker 2>templates,

00:40:40.615 --> 00:40:42.775
<v Speaker 2>that happened. Right? So

00:40:43.175 --> 00:40:44.135
<v Speaker 2>our

00:40:44.135 --> 00:40:45.495
<v Speaker 2>intention was

00:40:45.735 --> 00:40:47.415
<v Speaker 2>to make spin

00:40:47.415 --> 00:40:51.160
<v Speaker 2>projects with TypeScript and JavaScript more and more

00:40:51.160 --> 00:40:52.040
<v Speaker 2>idiomatic.

00:40:52.040 --> 00:40:55.400
<v Speaker 2>Right? Couple of weeks ago you ended up

00:40:55.400 --> 00:40:58.280
<v Speaker 2>with a folder, a nitwit configuration

00:40:58.280 --> 00:41:01.800
<v Speaker 2>file that deploy that defines which which

00:41:01.965 --> 00:41:04.765
<v Speaker 2>which as web assembly interface types

00:41:05.005 --> 00:41:05.885
<v Speaker 2>words

00:41:06.205 --> 00:41:08.285
<v Speaker 2>must be imported

00:41:08.285 --> 00:41:12.045
<v Speaker 2>by your component and what's exported. Right? And

00:41:12.045 --> 00:41:14.445
<v Speaker 2>although that is super useful

00:41:14.525 --> 00:41:17.085
<v Speaker 2>at to some degree if you wanna you

00:41:17.085 --> 00:41:17.325
<v Speaker 2>know

00:41:17.940 --> 00:41:21.220
<v Speaker 2>become or implement more advanced capabilities

00:41:21.220 --> 00:41:22.980
<v Speaker 2>or to to

00:41:23.380 --> 00:41:24.260
<v Speaker 2>compose

00:41:24.260 --> 00:41:25.140
<v Speaker 2>complex

00:41:25.140 --> 00:41:27.380
<v Speaker 2>systems for multiple components.

00:41:27.619 --> 00:41:30.180
<v Speaker 2>Things like that become super important and and

00:41:30.180 --> 00:41:32.660
<v Speaker 2>and you know you wanna tailor that

00:41:32.925 --> 00:41:34.205
<v Speaker 2>maybe at some point.

00:41:34.845 --> 00:41:37.005
<v Speaker 2>But for the majority

00:41:37.085 --> 00:41:39.805
<v Speaker 2>of workloads where you wanna, you know, create

00:41:39.805 --> 00:41:40.845
<v Speaker 2>an API

00:41:41.085 --> 00:41:43.405
<v Speaker 2>or interact with as we are going to

00:41:43.405 --> 00:41:45.165
<v Speaker 2>do with key value store,

00:41:45.405 --> 00:41:45.965
<v Speaker 2>you

00:41:46.619 --> 00:41:48.460
<v Speaker 2>we wanted to have the,

00:41:49.019 --> 00:41:52.380
<v Speaker 2>project as clean and simple as possible. So

00:41:52.380 --> 00:41:53.260
<v Speaker 2>we try

00:41:53.339 --> 00:41:56.619
<v Speaker 2>we try to, you know, pack more and

00:41:56.619 --> 00:41:57.820
<v Speaker 2>more into

00:41:58.140 --> 00:41:59.445
<v Speaker 2>like dependencies

00:41:59.445 --> 00:42:02.805
<v Speaker 2>that we add to the project instead of,

00:42:03.605 --> 00:42:05.685
<v Speaker 2>having you to maintain

00:42:05.685 --> 00:42:08.485
<v Speaker 2>or to track that in your source in

00:42:08.485 --> 00:42:09.365
<v Speaker 2>your source control.

00:42:12.270 --> 00:42:13.710
<v Speaker 2>Yep. Alright.

00:42:14.190 --> 00:42:14.830
<v Speaker 2>So,

00:42:17.550 --> 00:42:18.990
<v Speaker 2>once we are here,

00:42:21.710 --> 00:42:22.350
<v Speaker 2>we

00:42:22.830 --> 00:42:23.550
<v Speaker 2>also

00:42:23.790 --> 00:42:26.030
<v Speaker 2>started

00:42:24.905 --> 00:42:26.345
<v Speaker 2>modularizing

00:42:26.345 --> 00:42:26.905
<v Speaker 2>the,

00:42:27.385 --> 00:42:30.265
<v Speaker 2>Spin SDK for JavaScript so that you can

00:42:30.265 --> 00:42:31.385
<v Speaker 2>now precisely

00:42:31.385 --> 00:42:33.865
<v Speaker 2>pick and choose different capabilities

00:42:33.865 --> 00:42:35.545
<v Speaker 2>when building Spin apps.

00:42:36.105 --> 00:42:38.105
<v Speaker 2>And which is basically what we will do

00:42:38.105 --> 00:42:38.744
<v Speaker 2>in a second.

00:42:39.540 --> 00:42:42.980
<v Speaker 2>So we created an app right over here,

00:42:42.980 --> 00:42:45.860
<v Speaker 2>the AB testing sample app. We build it.

00:42:45.860 --> 00:42:48.420
<v Speaker 2>So we downloaded and the dependencies

00:42:48.420 --> 00:42:50.180
<v Speaker 2>and we turned it into

00:42:50.580 --> 00:42:52.340
<v Speaker 2>a web assembly module.

00:42:52.340 --> 00:42:54.180
<v Speaker 2>You know, that was just me to ensure

00:42:54.180 --> 00:42:57.434
<v Speaker 2>my Versus Code is happy and I get,

00:42:57.434 --> 00:42:59.194
<v Speaker 2>you know, IntelliSense

00:42:59.194 --> 00:43:02.075
<v Speaker 2>and stuff like that. So the idea is

00:43:02.075 --> 00:43:03.595
<v Speaker 2>to implement an AB,

00:43:03.915 --> 00:43:05.515
<v Speaker 2>an AB testing

00:43:05.994 --> 00:43:09.350
<v Speaker 2>and based on key value store. So what

00:43:09.350 --> 00:43:11.270
<v Speaker 2>I have to do right now is I

00:43:11.270 --> 00:43:13.270
<v Speaker 2>do a NPM install

00:43:13.990 --> 00:43:16.070
<v Speaker 2>at spin framework

00:43:16.470 --> 00:43:18.870
<v Speaker 2>forward slash spin dash k v,

00:43:20.710 --> 00:43:23.385
<v Speaker 2>which, you know, adds that as a dependency

00:43:23.385 --> 00:43:25.065
<v Speaker 2>to my application.

00:43:25.145 --> 00:43:26.825
<v Speaker 2>And from now on,

00:43:27.385 --> 00:43:29.065
<v Speaker 2>I can use the spin,

00:43:29.625 --> 00:43:30.505
<v Speaker 2>APIs

00:43:30.665 --> 00:43:32.585
<v Speaker 2>as, you know, as I'm

00:43:32.985 --> 00:43:34.265
<v Speaker 2>used to use them.

00:43:34.665 --> 00:43:35.865
<v Speaker 2>So I can say,

00:43:36.105 --> 00:43:37.865
<v Speaker 2>over here import

00:43:38.930 --> 00:43:40.050
<v Speaker 2>k star

00:43:40.930 --> 00:43:43.010
<v Speaker 2>as k v from

00:43:43.250 --> 00:43:44.930
<v Speaker 2>add spin framework.

00:43:45.730 --> 00:43:46.849
<v Speaker 2>There we go.

00:43:47.730 --> 00:43:50.210
<v Speaker 2>And now I could start using them.

00:43:51.525 --> 00:43:53.525
<v Speaker 2>So we'll do that in a second, but

00:43:53.525 --> 00:43:56.005
<v Speaker 2>first let me do some housekeeping

00:43:56.005 --> 00:43:57.125
<v Speaker 2>over here.

00:44:00.484 --> 00:44:03.285
<v Speaker 2>Alright. So we still have the

00:44:03.990 --> 00:44:06.790
<v Speaker 2>the logger. Yeah. Let's let's have logger. Let's

00:44:06.790 --> 00:44:08.550
<v Speaker 2>stick with them and,

00:44:08.950 --> 00:44:10.470
<v Speaker 2>we wanna basically

00:44:10.790 --> 00:44:11.670
<v Speaker 2>expose

00:44:11.670 --> 00:44:14.150
<v Speaker 2>a get endpoint at root route,

00:44:14.710 --> 00:44:16.310
<v Speaker 2>which gets the context

00:44:17.195 --> 00:44:18.395
<v Speaker 2>from Honu.

00:44:19.515 --> 00:44:22.395
<v Speaker 2>And over here, we will do the following.

00:44:24.155 --> 00:44:24.795
<v Speaker 2>So

00:44:25.994 --> 00:44:27.115
<v Speaker 2>let's say

00:44:27.515 --> 00:44:28.315
<v Speaker 2>every

00:44:29.035 --> 00:44:29.755
<v Speaker 2>even

00:44:29.835 --> 00:44:32.555
<v Speaker 2>request

00:44:30.700 --> 00:44:32.380
<v Speaker 2>should return

00:44:32.460 --> 00:44:33.500
<v Speaker 2>something

00:44:34.620 --> 00:44:35.500
<v Speaker 2>different

00:44:35.900 --> 00:44:39.820
<v Speaker 2>from every odd request. That's the overall idea

00:44:39.820 --> 00:44:41.340
<v Speaker 2>of that sample. Right?

00:44:41.740 --> 00:44:44.460
<v Speaker 2>And to do that we track like every

00:44:44.460 --> 00:44:45.500
<v Speaker 2>invocation

00:44:45.500 --> 00:44:46.380
<v Speaker 2>of that

00:44:46.845 --> 00:44:48.365
<v Speaker 2>of that application.

00:44:49.565 --> 00:44:51.165
<v Speaker 2>So we can use

00:44:51.244 --> 00:44:53.485
<v Speaker 2>whole new middleware middleware for that.

00:44:53.805 --> 00:44:55.965
<v Speaker 2>So that's async.

00:44:57.005 --> 00:44:58.845
<v Speaker 2>And again, we get the context

00:44:59.859 --> 00:45:01.460
<v Speaker 2>and we get next.

00:45:01.859 --> 00:45:03.860
<v Speaker 2>Alright. So this is basically

00:45:04.260 --> 00:45:05.780
<v Speaker 2>allows us to run

00:45:05.940 --> 00:45:07.380
<v Speaker 2>code before

00:45:07.380 --> 00:45:08.260
<v Speaker 2>the

00:45:08.340 --> 00:45:09.140
<v Speaker 2>actual

00:45:09.940 --> 00:45:10.820
<v Speaker 2>handler

00:45:11.385 --> 00:45:12.505
<v Speaker 2>handler

00:45:13.545 --> 00:45:16.025
<v Speaker 2>and then we say await,

00:45:16.585 --> 00:45:17.305
<v Speaker 2>next.

00:45:18.345 --> 00:45:21.785
<v Speaker 2>And then we can run code after the

00:45:21.785 --> 00:45:22.585
<v Speaker 2>actual

00:45:22.585 --> 00:45:24.745
<v Speaker 2>handler. And that that's what I meant at

00:45:24.745 --> 00:45:26.585
<v Speaker 2>the beginning of the stream with I really

00:45:26.585 --> 00:45:27.145
<v Speaker 2>like

00:45:27.400 --> 00:45:28.120
<v Speaker 2>their,

00:45:28.680 --> 00:45:29.720
<v Speaker 2>their middleware

00:45:29.720 --> 00:45:32.120
<v Speaker 2>syntax and the way of how to structure

00:45:32.120 --> 00:45:34.920
<v Speaker 2>your app. It it reminds me a little

00:45:34.920 --> 00:45:38.280
<v Speaker 2>bit to, you know, like aspect oriented

00:45:38.280 --> 00:45:41.555
<v Speaker 2>programming where you can take an existing application

00:45:41.555 --> 00:45:42.595
<v Speaker 2>and enhance,

00:45:43.155 --> 00:45:46.355
<v Speaker 2>your handlers or enhance your app before the

00:45:46.355 --> 00:45:48.915
<v Speaker 2>actual handler or before the handlers and after

00:45:48.915 --> 00:45:49.875
<v Speaker 2>the handlers.

00:45:50.434 --> 00:45:52.035
<v Speaker 2>I like that approach,

00:45:52.275 --> 00:45:52.835
<v Speaker 2>really much.

00:45:53.820 --> 00:45:55.340
<v Speaker 2>And I mean, a great use case here

00:45:55.340 --> 00:45:58.060
<v Speaker 1>is, like, making sure you respond to your

00:45:58.060 --> 00:46:00.780
<v Speaker 1>users or customers as quickly as possible. And

00:46:00.780 --> 00:46:02.780
<v Speaker 1>then anything that can happen after the fact,

00:46:02.780 --> 00:46:04.940
<v Speaker 1>you know, I'm thinking analytics or event processing

00:46:04.940 --> 00:46:06.700
<v Speaker 1>and stuff, you just do that after. And

00:46:06.700 --> 00:46:08.540
<v Speaker 1>then it doesn't affect that response latency.

00:46:09.225 --> 00:46:12.025
<v Speaker 2>Right. Right. There's so there are numerous numerous

00:46:13.385 --> 00:46:15.705
<v Speaker 2>use cases where this is super handy, right,

00:46:15.705 --> 00:46:18.025
<v Speaker 2>where you can send a response and keep

00:46:18.025 --> 00:46:21.385
<v Speaker 2>on computing to finalize or to, you know,

00:46:21.385 --> 00:46:23.860
<v Speaker 2>whatever. Take your bucket

00:46:23.860 --> 00:46:26.820
<v Speaker 2>of data that you collected throughout the request

00:46:26.820 --> 00:46:29.540
<v Speaker 2>but then push it to whatever back end

00:46:29.540 --> 00:46:31.780
<v Speaker 2>you you have to push it to but

00:46:31.780 --> 00:46:34.580
<v Speaker 2>already present the answer to the user.

00:46:35.475 --> 00:46:37.235
<v Speaker 2>And and we lose slightly,

00:46:37.555 --> 00:46:41.075
<v Speaker 2>something something something similar to that. Right. So

00:46:41.075 --> 00:46:42.835
<v Speaker 2>the idea the idea is to have a

00:46:42.835 --> 00:46:45.475
<v Speaker 2>counter. Right. So let's say interface

00:46:45.635 --> 00:46:46.595
<v Speaker 2>counter,

00:46:46.995 --> 00:46:48.355
<v Speaker 2>which has a count,

00:46:48.595 --> 00:46:50.195
<v Speaker 2>that's obviously a number

00:46:50.970 --> 00:46:53.770
<v Speaker 2>And we wanna store and retrieve that from

00:46:53.770 --> 00:46:54.570
<v Speaker 2>the key.

00:46:55.369 --> 00:46:58.090
<v Speaker 2>So I like to get rid of magic

00:46:58.090 --> 00:47:01.609
<v Speaker 2>strings. So let's say hits is a constant,

00:47:01.609 --> 00:47:03.050
<v Speaker 2>that's our key,

00:47:03.450 --> 00:47:04.730
<v Speaker 2>that we will use.

00:47:05.849 --> 00:47:07.975
<v Speaker 2>And let me push the code a little

00:47:07.975 --> 00:47:09.335
<v Speaker 2>bit to the upper.

00:47:10.935 --> 00:47:11.735
<v Speaker 2>So

00:47:11.975 --> 00:47:15.175
<v Speaker 2>key value as always in in spin, we

00:47:15.175 --> 00:47:17.575
<v Speaker 2>have the concept of a store. So k

00:47:17.575 --> 00:47:18.215
<v Speaker 2>v,

00:47:18.455 --> 00:47:20.215
<v Speaker 2>you can see you can open a named

00:47:20.215 --> 00:47:22.970
<v Speaker 2>store or you can open the default

00:47:22.970 --> 00:47:25.370
<v Speaker 2>store which is the store with the name

00:47:25.690 --> 00:47:26.650
<v Speaker 2>default.

00:47:28.170 --> 00:47:30.970
<v Speaker 2>So let's open the default store over here

00:47:31.770 --> 00:47:34.810
<v Speaker 2>and let's initialize the counter for now.

00:47:35.130 --> 00:47:37.770
<v Speaker 2>Counter equals

00:47:37.985 --> 00:47:38.785
<v Speaker 2>count

00:47:39.025 --> 00:47:40.145
<v Speaker 2>is zero

00:47:40.545 --> 00:47:41.985
<v Speaker 2>as count as

00:47:43.265 --> 00:47:44.065
<v Speaker 2>counter.

00:47:44.065 --> 00:47:47.185
<v Speaker 2>As as soon as the microphone is above

00:47:47.185 --> 00:47:48.385
<v Speaker 2>my keyboard,

00:47:48.545 --> 00:47:51.210
<v Speaker 2>it feels wrong. Right? It

00:47:51.930 --> 00:47:53.610
<v Speaker 1>Yeah. Every time there's a camera in my

00:47:53.610 --> 00:47:56.090
<v Speaker 1>face, my typing goes to absolute crap. It's

00:47:56.090 --> 00:47:57.690
<v Speaker 1>just it's a rule. Right? That's it. That's

00:47:57.690 --> 00:47:59.690
<v Speaker 1>how it works. That yeah. That is how

00:47:59.690 --> 00:48:01.130
<v Speaker 2>it is. That's true.

00:48:01.369 --> 00:48:03.210
<v Speaker 2>Okay. So we initialized

00:48:03.210 --> 00:48:05.685
<v Speaker 2>that counter with zero because

00:48:05.685 --> 00:48:08.005
<v Speaker 2>it could be the case that my app

00:48:08.005 --> 00:48:09.685
<v Speaker 2>has never been invoked.

00:48:09.925 --> 00:48:12.405
<v Speaker 2>Right? And I wanna use that value from

00:48:12.565 --> 00:48:13.445
<v Speaker 2>at that point.

00:48:13.685 --> 00:48:15.685
<v Speaker 2>So let's say store,

00:48:16.485 --> 00:48:16.965
<v Speaker 2>if

00:48:18.090 --> 00:48:20.810
<v Speaker 2>a value at key exists,

00:48:20.810 --> 00:48:24.330
<v Speaker 2>then we obviously wanna take that value instead.

00:48:24.570 --> 00:48:25.690
<v Speaker 2>So we can say

00:48:26.170 --> 00:48:28.250
<v Speaker 2>get JSON over here,

00:48:28.650 --> 00:48:32.555
<v Speaker 2>at position key and cast that inch to

00:48:32.555 --> 00:48:34.315
<v Speaker 2>into a counter again.

00:48:35.355 --> 00:48:37.915
<v Speaker 2>So this is basically

00:48:39.195 --> 00:48:39.995
<v Speaker 2>if,

00:48:40.315 --> 00:48:40.955
<v Speaker 2>you know,

00:48:41.275 --> 00:48:43.195
<v Speaker 2>no one execute or hit

00:48:43.435 --> 00:48:45.595
<v Speaker 2>send a request to our app, we start

00:48:45.595 --> 00:48:48.440
<v Speaker 2>with the count of zero. Otherwise, we just

00:48:48.440 --> 00:48:51.079
<v Speaker 2>take it from the key value store and

00:48:51.079 --> 00:48:54.760
<v Speaker 2>use whatever is stored in key value store.

00:48:55.400 --> 00:48:58.920
<v Speaker 2>And now we can easily pass that, you

00:48:58.920 --> 00:48:59.960
<v Speaker 2>know, count

00:49:00.435 --> 00:49:01.075
<v Speaker 2>to,

00:49:01.875 --> 00:49:05.315
<v Speaker 2>the handler before invoking it by saying, hey

00:49:05.315 --> 00:49:06.275
<v Speaker 2>context,

00:49:06.435 --> 00:49:08.915
<v Speaker 2>please set a value called cup

00:49:10.035 --> 00:49:11.235
<v Speaker 2>called count

00:49:11.395 --> 00:49:13.475
<v Speaker 2>to counter dot count.

00:49:14.880 --> 00:49:17.599
<v Speaker 2>Okay. Then we invoke our handler.

00:49:18.160 --> 00:49:20.640
<v Speaker 2>So let's implement that and that's that's pretty

00:49:20.640 --> 00:49:24.079
<v Speaker 2>straight forward. Right. We again have to load

00:49:24.079 --> 00:49:25.119
<v Speaker 2>the count,

00:49:25.760 --> 00:49:27.840
<v Speaker 2>so we can say count

00:49:28.640 --> 00:49:29.599
<v Speaker 2>count

00:49:29.994 --> 00:49:30.955
<v Speaker 2>equals

00:49:31.435 --> 00:49:34.395
<v Speaker 2>number. So we parse whatever we get,

00:49:34.875 --> 00:49:37.675
<v Speaker 2>to a number because this API returns an

00:49:37.675 --> 00:49:38.315
<v Speaker 2>any,

00:49:38.875 --> 00:49:40.075
<v Speaker 2>add position,

00:49:40.555 --> 00:49:41.515
<v Speaker 2>count.

00:49:41.755 --> 00:49:44.555
<v Speaker 2>Okay. Let's

00:49:45.860 --> 00:49:47.700
<v Speaker 2>get rid of that one as well.

00:49:48.180 --> 00:49:48.900
<v Speaker 2>Const

00:49:49.140 --> 00:49:50.260
<v Speaker 2>context.

00:49:51.700 --> 00:49:53.060
<v Speaker 2>Oh, that's rust.

00:49:53.300 --> 00:49:54.500
<v Speaker 2>Context key

00:49:54.660 --> 00:49:55.540
<v Speaker 2>equals,

00:49:55.780 --> 00:49:57.300
<v Speaker 2>and let's say count,

00:49:58.164 --> 00:50:00.885
<v Speaker 2>and let's use single quotes over there as

00:50:00.885 --> 00:50:04.244
<v Speaker 2>well. So let's use that as

00:50:05.845 --> 00:50:08.085
<v Speaker 2>the value and then we can grab that

00:50:08.085 --> 00:50:10.164
<v Speaker 2>from here and get rid of the magic

00:50:10.164 --> 00:50:10.885
<v Speaker 2>string.

00:50:11.045 --> 00:50:13.780
<v Speaker 2>Okay. So we have the count right now

00:50:13.780 --> 00:50:14.900
<v Speaker 2>as a number

00:50:15.700 --> 00:50:17.460
<v Speaker 2>and then we can easily say,

00:50:19.060 --> 00:50:21.220
<v Speaker 2>let's roll with if count,

00:50:21.220 --> 00:50:22.580
<v Speaker 2>if count,

00:50:23.300 --> 00:50:26.580
<v Speaker 2>modulo two

00:50:25.315 --> 00:50:26.675
<v Speaker 2>equals null,

00:50:27.555 --> 00:50:30.595
<v Speaker 2>then we wanna return, let's say return c

00:50:30.595 --> 00:50:31.955
<v Speaker 2>dot HTML,

00:50:33.715 --> 00:50:34.675
<v Speaker 2>h one.

00:50:37.155 --> 00:50:38.355
<v Speaker 2>Let's say even

00:50:40.059 --> 00:50:42.060
<v Speaker 2>and otherwise let's return

00:50:42.859 --> 00:50:43.580
<v Speaker 2>over

00:50:43.980 --> 00:50:46.619
<v Speaker 2>here. Right. Just a simple example.

00:50:47.020 --> 00:50:49.020
<v Speaker 2>So we have successfully

00:50:49.020 --> 00:50:51.740
<v Speaker 2>read the value from key value store. We

00:50:51.740 --> 00:50:55.315
<v Speaker 2>have implemented like the AB testing algorithm,

00:50:55.315 --> 00:50:56.355
<v Speaker 2>super fancy,

00:50:57.075 --> 00:51:00.355
<v Speaker 2>right now. So what's missing? Obviously, we somehow

00:51:00.355 --> 00:51:02.035
<v Speaker 2>have to store the value.

00:51:02.835 --> 00:51:04.755
<v Speaker 2>And this is what we wanna do after

00:51:05.250 --> 00:51:06.450
<v Speaker 2>the invocation.

00:51:06.450 --> 00:51:08.770
<v Speaker 2>But we can't simply, you know, set it

00:51:08.770 --> 00:51:12.050
<v Speaker 2>as it is. We have to increment it.

00:51:12.130 --> 00:51:14.610
<v Speaker 2>So we say counter dot count

00:51:15.570 --> 00:51:19.490
<v Speaker 2>plus, equals counter dot count plus one.

00:51:20.085 --> 00:51:22.805
<v Speaker 2>Obviously we can also use the shortcut there.

00:51:23.045 --> 00:51:23.685
<v Speaker 2>But

00:51:23.925 --> 00:51:26.245
<v Speaker 2>ultimately we call store

00:51:26.405 --> 00:51:27.765
<v Speaker 2>set JSON

00:51:28.165 --> 00:51:30.725
<v Speaker 2>and we set at position key,

00:51:30.885 --> 00:51:32.085
<v Speaker 2>we set counter.

00:51:35.240 --> 00:51:38.600
<v Speaker 2>Okay. So that's basically the implementation

00:51:38.600 --> 00:51:41.480
<v Speaker 2>of our app that we now wanna deploy

00:51:41.480 --> 00:51:42.200
<v Speaker 2>to

00:51:42.280 --> 00:51:43.880
<v Speaker 2>Fermi and Watson functions.

00:51:44.360 --> 00:51:47.560
<v Speaker 2>However, there's one thing, one important thing missing.

00:51:48.155 --> 00:51:52.234
<v Speaker 2>As always, WebAssembly has that deny by default

00:51:52.234 --> 00:51:55.995
<v Speaker 2>security mechanisms. So we can't make use of,

00:51:56.795 --> 00:51:58.395
<v Speaker 2>external resources

00:51:58.474 --> 00:51:59.355
<v Speaker 2>without

00:51:59.355 --> 00:52:02.234
<v Speaker 2>specifying that and a key value store is

00:52:02.234 --> 00:52:03.435
<v Speaker 2>no exception here.

00:52:04.630 --> 00:52:06.310
<v Speaker 2>So that happens in

00:52:06.790 --> 00:52:09.750
<v Speaker 2>the spin manifest where I can say, hey,

00:52:09.750 --> 00:52:11.350
<v Speaker 2>my AB testing

00:52:11.350 --> 00:52:12.870
<v Speaker 2>sample component

00:52:13.510 --> 00:52:15.590
<v Speaker 2>should or requires

00:52:15.750 --> 00:52:17.430
<v Speaker 2>a key value

00:52:17.830 --> 00:52:18.470
<v Speaker 2>store.

00:52:19.335 --> 00:52:21.575
<v Speaker 2>So you could request multiple

00:52:22.055 --> 00:52:25.415
<v Speaker 2>and as I use that open default method,

00:52:25.815 --> 00:52:27.255
<v Speaker 2>right, that's just

00:52:27.335 --> 00:52:28.935
<v Speaker 2>syntactic sugar

00:52:29.255 --> 00:52:30.615
<v Speaker 2>that

00:52:31.175 --> 00:52:32.135
<v Speaker 2>executes

00:52:32.135 --> 00:52:33.175
<v Speaker 2>open

00:52:34.640 --> 00:52:35.520
<v Speaker 2>default.

00:52:35.840 --> 00:52:36.560
<v Speaker 2>Right.

00:52:37.120 --> 00:52:39.920
<v Speaker 2>So that's why I have to explicitly

00:52:40.240 --> 00:52:42.080
<v Speaker 2>provide or ask

00:52:42.320 --> 00:52:43.040
<v Speaker 2>to

00:52:43.280 --> 00:52:45.920
<v Speaker 2>make use of a key value store called

00:52:45.920 --> 00:52:46.480
<v Speaker 2>default.

00:52:48.965 --> 00:52:50.725
<v Speaker 2>Okay. I think

00:52:50.805 --> 00:52:53.285
<v Speaker 2>that's ready for testing or

00:52:53.445 --> 00:52:56.725
<v Speaker 2>compiling first and then testing. Right. So it's

00:52:56.725 --> 00:52:59.925
<v Speaker 2>been built. It recognized. Okay. There was some

00:52:59.925 --> 00:53:00.725
<v Speaker 2>code change.

00:53:01.930 --> 00:53:03.530
<v Speaker 2>So there we go.

00:53:04.330 --> 00:53:05.850
<v Speaker 2>App built successfully

00:53:05.850 --> 00:53:07.770
<v Speaker 2>and spin up again.

00:53:08.650 --> 00:53:10.890
<v Speaker 2>Now I can see, okay,

00:53:10.970 --> 00:53:13.850
<v Speaker 2>you requested the default key value store.

00:53:15.325 --> 00:53:17.485
<v Speaker 2>In the case of doing a simple spin

00:53:17.485 --> 00:53:18.045
<v Speaker 2>up,

00:53:18.365 --> 00:53:21.085
<v Speaker 2>spin will take care of creating a SQL

00:53:21.085 --> 00:53:23.325
<v Speaker 2>like database for you

00:53:23.485 --> 00:53:25.965
<v Speaker 2>that acts as a key value store on

00:53:25.965 --> 00:53:26.845
<v Speaker 2>your local machine.

00:53:27.830 --> 00:53:29.110
<v Speaker 2>So let's

00:53:29.190 --> 00:53:31.110
<v Speaker 2>do our curl

00:53:31.190 --> 00:53:32.630
<v Speaker 2>local host

00:53:32.630 --> 00:53:33.910
<v Speaker 2>3,000

00:53:34.550 --> 00:53:36.230
<v Speaker 2>and we get even and we get odd

00:53:36.230 --> 00:53:37.670
<v Speaker 2>and we get even and we get odd

00:53:37.670 --> 00:53:39.110
<v Speaker 2>and we get even and we get odd

00:53:39.110 --> 00:53:40.550
<v Speaker 2>and so on and so forth. Right?

00:53:41.484 --> 00:53:45.085
<v Speaker 2>So simple key value based AB testing.

00:53:46.365 --> 00:53:49.325
<v Speaker 2>So now let's take this one and throw

00:53:49.325 --> 00:53:51.325
<v Speaker 2>it over the wall to

00:53:52.125 --> 00:53:53.325
<v Speaker 2>fermin walls and functions.

00:53:54.400 --> 00:53:56.400
<v Speaker 2>And that's again as you see us doing

00:53:56.400 --> 00:53:58.320
<v Speaker 2>a spin aka deploy.

00:53:59.600 --> 00:54:02.080
<v Speaker 2>And the same thing we saw earlier, right?

00:54:03.120 --> 00:54:06.400
<v Speaker 2>Packaging the app, distributing it, and making it

00:54:06.400 --> 00:54:07.200
<v Speaker 2>available

00:54:07.200 --> 00:54:08.160
<v Speaker 2>across the globe.

00:54:10.635 --> 00:54:12.635
<v Speaker 2>Are there questions that we can take in

00:54:12.635 --> 00:54:13.275
<v Speaker 2>those 60

00:54:14.235 --> 00:54:15.435
<v Speaker 1>I mean, I have one.

00:54:15.675 --> 00:54:16.955
<v Speaker 2>Sure. Go ahead.

00:54:19.275 --> 00:54:21.755
<v Speaker 1>Now that, you know, we've got these WebAssembly

00:54:21.755 --> 00:54:24.400
<v Speaker 1>functions on the Akamai network. Right? We've already

00:54:24.400 --> 00:54:26.320
<v Speaker 1>discussed the matters of that and the fact

00:54:26.320 --> 00:54:27.920
<v Speaker 1>that it is one of the biggest networks

00:54:27.920 --> 00:54:29.760
<v Speaker 1>in the world and you're adding new regions.

00:54:29.760 --> 00:54:30.720
<v Speaker 1>Right? So

00:54:30.960 --> 00:54:33.600
<v Speaker 1>as the Akamai CDN in front of this,

00:54:33.600 --> 00:54:35.520
<v Speaker 1>and I'm asking that because I'm curious. If

00:54:35.520 --> 00:54:37.840
<v Speaker 1>I return a cache control header on some

00:54:37.840 --> 00:54:38.560
<v Speaker 1>of these functions,

00:54:39.525 --> 00:54:42.565
<v Speaker 1>will the CDN cache that for subsequent requests?

00:54:44.005 --> 00:54:46.005
<v Speaker 2>That's a pretty good question.

00:54:46.165 --> 00:54:49.765
<v Speaker 2>And I think we were already at this

00:54:49.765 --> 00:54:50.325
<v Speaker 2>one.

00:54:50.645 --> 00:54:51.285
<v Speaker 2>Right?

00:54:51.684 --> 00:54:53.125
<v Speaker 2>I shall brought that. Right?

00:54:53.720 --> 00:54:55.560
<v Speaker 2>It's not there, right?

00:54:57.000 --> 00:55:00.440
<v Speaker 2>Yeah, there we go. Right? So we can

00:55:00.599 --> 00:55:01.400
<v Speaker 2>obviously

00:55:01.480 --> 00:55:02.599
<v Speaker 2>integrate

00:55:02.599 --> 00:55:04.599
<v Speaker 2>with the CDN which sits in front.

00:55:05.160 --> 00:55:07.000
<v Speaker 1>Alright, so can we add a cache control

00:55:07.000 --> 00:55:09.000
<v Speaker 1>header to the endpoint then?

00:55:10.375 --> 00:55:11.015
<v Speaker 2>Sure.

00:55:11.175 --> 00:55:12.215
<v Speaker 2>Let's try.

00:55:12.535 --> 00:55:13.975
<v Speaker 1>I know this is gonna then add another

00:55:13.975 --> 00:55:15.495
<v Speaker 1>sixty seconds and I'll have to think of

00:55:15.495 --> 00:55:16.455
<v Speaker 1>another question.

00:55:18.935 --> 00:55:22.055
<v Speaker 2>But let's try it. Oops. Even.

00:55:22.135 --> 00:55:22.615
<v Speaker 2>Yep.

00:55:23.260 --> 00:55:25.980
<v Speaker 2>Odd. Even. Odd. Even. Odd. Even. Odd. So

00:55:25.980 --> 00:55:27.740
<v Speaker 1>let's break that then with cache control. Let's

00:55:27.740 --> 00:55:31.020
<v Speaker 2>break it by adding cache control header. Okay.

00:55:31.100 --> 00:55:33.340
<v Speaker 2>Let me let me do one thing. Let's

00:55:33.340 --> 00:55:36.645
<v Speaker 2>let me quickly curl no. Not curling that

00:55:36.645 --> 00:55:37.205
<v Speaker 2>one.

00:55:38.165 --> 00:55:39.525
<v Speaker 2>Let me curl

00:55:39.525 --> 00:55:40.405
<v Speaker 2>this one,

00:55:41.925 --> 00:55:43.445
<v Speaker 2>with dash I.

00:55:44.885 --> 00:55:47.845
<v Speaker 2>So these are the default headers. Okay. Obviously,

00:55:47.845 --> 00:55:49.925
<v Speaker 2>we have more latency because we right now

00:55:49.925 --> 00:55:51.525
<v Speaker 2>talk to that

00:55:51.890 --> 00:55:53.970
<v Speaker 2>this to add to that key value store

00:55:53.970 --> 00:55:54.610
<v Speaker 2>right,

00:55:55.090 --> 00:55:57.410
<v Speaker 2>but yeah let's go to,

00:55:58.370 --> 00:55:59.330
<v Speaker 2>this one

00:56:00.210 --> 00:56:02.450
<v Speaker 2>and let's easily,

00:56:03.090 --> 00:56:05.810
<v Speaker 2>we can do that over here

00:56:07.315 --> 00:56:08.755
<v Speaker 2>See dot

00:56:08.915 --> 00:56:09.635
<v Speaker 2>header,

00:56:10.835 --> 00:56:13.075
<v Speaker 2>that is is that property.

00:56:13.955 --> 00:56:16.755
<v Speaker 2>Okay. So we can nope. I think we

00:56:16.755 --> 00:56:17.955
<v Speaker 2>can simply set that.

00:56:19.290 --> 00:56:19.930
<v Speaker 2>Yep.

00:56:20.330 --> 00:56:20.890
<v Speaker 2>And

00:56:21.130 --> 00:56:22.570
<v Speaker 2>what do you want? Do you want

00:56:23.290 --> 00:56:25.530
<v Speaker 1>it needs to be cache dash control.

00:56:25.690 --> 00:56:28.250
<v Speaker 2>Cache control. Okay. You'd have to set max

00:56:28.250 --> 00:56:29.450
<v Speaker 1>dash age

00:56:29.450 --> 00:56:30.330
<v Speaker 1>equals

00:56:30.410 --> 00:56:31.850
<v Speaker 1>ten for ten seconds.

00:56:32.650 --> 00:56:33.850
<v Speaker 1>Ten equals get it.

00:56:34.535 --> 00:56:37.015
<v Speaker 2>Oh, yeah. Sorry. Sure. Yeah. Makes sense. Yeah.

00:56:37.015 --> 00:56:39.655
<v Speaker 1>So that should set. Remember that's response for

00:56:39.655 --> 00:56:40.615
<v Speaker 1>twenty seconds.

00:56:40.935 --> 00:56:42.935
<v Speaker 2>Okay. So let's

00:56:43.655 --> 00:56:44.615
<v Speaker 2>do that.

00:56:45.895 --> 00:56:49.540
<v Speaker 2>Oops. Like this. Okay. Cool. So let's do

00:56:49.540 --> 00:56:51.300
<v Speaker 2>spin our card.

00:56:52.180 --> 00:56:53.540
<v Speaker 1>Do you have to build it first? Spin

00:56:53.540 --> 00:56:54.340
<v Speaker 1>build. Good

00:56:55.940 --> 00:56:56.260
<v Speaker 2>catch.

00:57:00.055 --> 00:57:01.655
<v Speaker 2>But I think

00:57:04.615 --> 00:57:05.975
<v Speaker 2>you can

00:57:06.215 --> 00:57:07.015
<v Speaker 2>easily

00:57:07.015 --> 00:57:10.215
<v Speaker 2>also use the DashBash build, the same experience

00:57:10.215 --> 00:57:12.375
<v Speaker 2>as you have for spin up or spin

00:57:12.375 --> 00:57:13.335
<v Speaker 2>deploy.

00:57:17.895 --> 00:57:19.050
<v Speaker 1>Right? So Okay. That deploys.

00:57:19.050 --> 00:57:21.690
<v Speaker 1>I've got more questions for you. Sure. So

00:57:22.730 --> 00:57:25.530
<v Speaker 1>these examples are great. Right? They're really revealing

00:57:25.530 --> 00:57:27.690
<v Speaker 1>how the Akamai integration works and the cool

00:57:27.690 --> 00:57:29.065
<v Speaker 1>things we can do and the whole new

00:57:29.065 --> 00:57:30.345
<v Speaker 1>stuff. The whole new stuff is great. Like,

00:57:30.345 --> 00:57:32.345
<v Speaker 1>that is now my default for all typescript.

00:57:32.905 --> 00:57:33.305
<v Speaker 1>I

00:57:33.945 --> 00:57:35.305
<v Speaker 1>was never a big fan of it. I

00:57:35.305 --> 00:57:36.105
<v Speaker 1>like clonal.

00:57:36.825 --> 00:57:39.225
<v Speaker 1>Now what if I need some

00:57:39.465 --> 00:57:40.425
<v Speaker 1>credentials

00:57:40.425 --> 00:57:42.985
<v Speaker 1>and configuration passed into my application? What if

00:57:42.985 --> 00:57:44.880
<v Speaker 1>I want an endpoint for, like, an s

00:57:44.880 --> 00:57:46.480
<v Speaker 1>three bucket and I also wanna pass in

00:57:46.480 --> 00:57:48.880
<v Speaker 1>the access and secret key as secrets? What

00:57:48.880 --> 00:57:51.760
<v Speaker 1>is the flow to do that? Good question.

00:57:51.760 --> 00:57:52.640
<v Speaker 2>Good question.

00:57:52.960 --> 00:57:54.080
<v Speaker 2>So

00:57:54.160 --> 00:57:55.200
<v Speaker 2>as

00:57:55.755 --> 00:57:59.835
<v Speaker 2>obviously there are sensitive and non sensitive configuration

00:57:59.835 --> 00:58:01.674
<v Speaker 2>data that you want to use within your

00:58:01.674 --> 00:58:02.555
<v Speaker 2>application.

00:58:03.275 --> 00:58:06.555
<v Speaker 2>And you can specify them as part of,

00:58:06.714 --> 00:58:07.515
<v Speaker 2>executing

00:58:07.515 --> 00:58:08.714
<v Speaker 2>SpinAccordeploy.

00:58:09.440 --> 00:58:12.080
<v Speaker 2>So there are flags where you can specify

00:58:12.160 --> 00:58:13.680
<v Speaker 2>your configuration

00:58:13.680 --> 00:58:16.880
<v Speaker 2>values and that's and the important thing is

00:58:17.120 --> 00:58:17.520
<v Speaker 2>the,

00:58:18.000 --> 00:58:21.600
<v Speaker 2>value or the configuration values are tied

00:58:21.865 --> 00:58:24.185
<v Speaker 2>to that particular deployment.

00:58:24.185 --> 00:58:27.465
<v Speaker 2>Right? Because right now I'm issuing the second

00:58:27.465 --> 00:58:28.345
<v Speaker 2>deployment

00:58:28.345 --> 00:58:30.745
<v Speaker 2>of that app. Right? And it could be

00:58:30.745 --> 00:58:33.065
<v Speaker 2>the case that I introduced

00:58:33.065 --> 00:58:37.050
<v Speaker 2>variables with that update right now that haven't

00:58:37.050 --> 00:58:39.370
<v Speaker 2>hasn't haven't been there

00:58:39.530 --> 00:58:40.330
<v Speaker 2>before.

00:58:40.410 --> 00:58:43.530
<v Speaker 2>So I think that's something if you

00:58:43.930 --> 00:58:46.410
<v Speaker 2>start adding variables to your spin app and

00:58:46.410 --> 00:58:49.450
<v Speaker 2>you wanna do spin aka deploy

00:58:50.415 --> 00:58:51.375
<v Speaker 2>variable.

00:58:51.375 --> 00:58:53.935
<v Speaker 2>You see, there are some,

00:58:53.935 --> 00:58:54.495
<v Speaker 2>I

00:58:54.895 --> 00:58:56.415
<v Speaker 2>hope not that

00:58:57.135 --> 00:59:00.175
<v Speaker 2>sensitive. No, not non sensitive variables

00:59:00.175 --> 00:59:01.775
<v Speaker 2>that I specified over here.

00:59:03.970 --> 00:59:08.290
<v Speaker 2>On the service level, obviously, everything is encrypted.

00:59:08.850 --> 00:59:11.010
<v Speaker 2>All the variables are encrypted

00:59:11.010 --> 00:59:12.450
<v Speaker 2>and only

00:59:13.250 --> 00:59:14.210
<v Speaker 2>exposed

00:59:14.210 --> 00:59:16.450
<v Speaker 2>to that particular deployment

00:59:16.450 --> 00:59:19.625
<v Speaker 2>or version of your app on your account.

00:59:21.385 --> 00:59:23.705
<v Speaker 1>Does that mean every version or every deploy

00:59:23.705 --> 00:59:25.465
<v Speaker 1>gets its own unique URL?

00:59:26.025 --> 00:59:26.825
<v Speaker 2>No.

00:59:26.825 --> 00:59:29.865
<v Speaker 2>It does not. We are currently operating

00:59:29.865 --> 00:59:31.785
<v Speaker 2>in latest

00:59:32.025 --> 00:59:32.825
<v Speaker 2>is

00:59:32.984 --> 00:59:36.059
<v Speaker 2>available at. It's always, you know, like, this

00:59:36.059 --> 00:59:38.619
<v Speaker 2>one is always pointing to the latest version.

00:59:38.940 --> 00:59:40.700
<v Speaker 1>Okay. Gotcha. Okay.

00:59:42.299 --> 00:59:43.580
<v Speaker 2>So let's try

00:59:43.900 --> 00:59:47.339
<v Speaker 2>if we broke our AP testing on purpose.

00:59:47.579 --> 00:59:48.859
<v Speaker 2>So we get even.

00:59:49.505 --> 00:59:50.545
<v Speaker 2>We get even.

00:59:50.785 --> 00:59:53.185
<v Speaker 2>We get even. We get even. Can you

00:59:53.185 --> 00:59:54.465
<v Speaker 1>add a dash I to that? We should

00:59:54.465 --> 00:59:56.865
<v Speaker 1>be able to see the cache Sure. Off

00:59:56.865 --> 00:59:57.905
<v Speaker 1>as well. Right?

00:59:58.945 --> 01:00:00.865
<v Speaker 1>Yeah. There we go. Fine.

01:00:01.985 --> 01:00:04.385
<v Speaker 2>The the funny thing is, you know, that

01:00:04.590 --> 01:00:08.430
<v Speaker 2>I bet the first request after cache expiration

01:00:08.430 --> 01:00:10.510
<v Speaker 2>will also be even because the value is

01:00:10.510 --> 01:00:12.190
<v Speaker 2>now even in in

01:00:12.270 --> 01:00:13.550
<v Speaker 2>key value store.

01:00:14.110 --> 01:00:15.790
<v Speaker 1>Well, it looks like the value should change.

01:00:15.870 --> 01:00:17.310
<v Speaker 1>Yeah. There we go. Yeah. There we go.

01:00:17.310 --> 01:00:19.445
<v Speaker 1>That's awesome. Yeah. I I didn't know if

01:00:19.445 --> 01:00:20.965
<v Speaker 1>that was gonna work, but having the Akamai

01:00:20.965 --> 01:00:22.485
<v Speaker 1>CDN sit in front of all,

01:00:22.885 --> 01:00:25.285
<v Speaker 1>that's that's super cool. I love that. Yeah.

01:00:25.845 --> 01:00:28.645
<v Speaker 2>Yeah. Okay. So we have that. We already

01:00:28.645 --> 01:00:29.605
<v Speaker 2>explored

01:00:30.485 --> 01:00:33.040
<v Speaker 2>logs. Right? So that was a spin,

01:00:33.680 --> 01:00:35.520
<v Speaker 2>aka logs. Right?

01:00:36.480 --> 01:00:39.040
<v Speaker 2>Sure. That should work. If the app write

01:00:39.040 --> 01:00:42.000
<v Speaker 2>logs, and I Mhmm. Yep. Some logs. Yeah.

01:00:42.000 --> 01:00:43.839
<v Speaker 1>Only two requests, which is exactly what I

01:00:43.839 --> 01:00:45.760
<v Speaker 1>would expect with the cache control. So, yeah.

01:00:45.760 --> 01:00:47.615
<v Speaker 1>Lovely. Yeah. Okay.

01:00:47.935 --> 01:00:50.575
<v Speaker 2>On top of that, we are obviously,

01:00:50.895 --> 01:00:52.175
<v Speaker 2>you know, adding

01:00:52.255 --> 01:00:54.575
<v Speaker 2>more and more capabilities

01:00:54.734 --> 01:00:57.855
<v Speaker 2>to the Spin AKA or to to Firm

01:00:57.855 --> 01:01:00.655
<v Speaker 2>and Wasm functions and to the

01:01:01.214 --> 01:01:01.775
<v Speaker 2>AKA

01:01:02.100 --> 01:01:03.780
<v Speaker 2>plugin that we provide.

01:01:04.180 --> 01:01:06.820
<v Speaker 2>You can generate tokens in order to do

01:01:06.820 --> 01:01:10.100
<v Speaker 2>CI CD workflows where it deploys straight from

01:01:10.100 --> 01:01:12.820
<v Speaker 2>get up actions to gear account on Mhmm.

01:01:12.820 --> 01:01:15.220
<v Speaker 2>Fermion WASM functions. I think that's,

01:01:15.780 --> 01:01:18.135
<v Speaker 2>so let me quickly give,

01:01:18.855 --> 01:01:20.935
<v Speaker 2>folks an overview of what you can expect

01:01:20.935 --> 01:01:23.735
<v Speaker 2>there, right. You can create, delete list and

01:01:23.735 --> 01:01:24.615
<v Speaker 2>regenerate

01:01:24.615 --> 01:01:27.175
<v Speaker 2>personal access tokens. What do you expect from,

01:01:27.175 --> 01:01:28.295
<v Speaker 2>you know, to

01:01:28.615 --> 01:01:28.855
<v Speaker 2>to

01:01:29.850 --> 01:01:31.850
<v Speaker 2>basically do continuous deployment?

01:01:32.170 --> 01:01:33.530
<v Speaker 2>Can I ask you another question? Is that

01:01:33.530 --> 01:01:35.610
<v Speaker 1>okay? Sure. Alright. Don't mean to cut you

01:01:35.610 --> 01:01:38.570
<v Speaker 1>off. All this stuff is what I would

01:01:38.570 --> 01:01:41.370
<v Speaker 1>expect to work with the Spin cloud plugin.

01:01:41.370 --> 01:01:43.875
<v Speaker 1>Right? Like, there's a lot of overlap here

01:01:43.875 --> 01:01:45.555
<v Speaker 1>between the ACA and the cloud. So my

01:01:45.555 --> 01:01:46.675
<v Speaker 1>curiosity is,

01:01:47.075 --> 01:01:49.155
<v Speaker 1>one, if I log in if you log

01:01:49.155 --> 01:01:50.995
<v Speaker 1>in to Fairmion Cloud, will you see your

01:01:50.995 --> 01:01:53.395
<v Speaker 1>ACA functions next to your normal functions? And

01:01:53.395 --> 01:01:55.075
<v Speaker 1>secondly, do we get all the same features

01:01:55.075 --> 01:01:57.090
<v Speaker 1>we had with Fairmion Cloud? Can I do

01:01:57.090 --> 01:01:59.810
<v Speaker 1>a custom domain on a Akamai deployment?

01:02:01.010 --> 01:02:03.970
<v Speaker 2>So both are great questions. So a, to

01:02:03.970 --> 01:02:06.050
<v Speaker 2>answer the first one, if you log into

01:02:06.050 --> 01:02:07.810
<v Speaker 2>cloud.fermion.com,

01:02:07.810 --> 01:02:09.090
<v Speaker 2>you won't see,

01:02:09.330 --> 01:02:12.610
<v Speaker 2>your workloads deployed to Fermion WASM functions.

01:02:15.595 --> 01:02:16.555
<v Speaker 2>We're

01:02:16.555 --> 01:02:18.075
<v Speaker 2>still in in preview.

01:02:18.474 --> 01:02:19.435
<v Speaker 2>Maybe there

01:02:20.795 --> 01:02:22.555
<v Speaker 2>maybe there will be a new UI. I

01:02:22.555 --> 01:02:23.115
<v Speaker 2>don't know.

01:02:23.674 --> 01:02:25.674
<v Speaker 2>I don't know yet, to be honest. I

01:02:25.674 --> 01:02:26.155
<v Speaker 2>don't know yet.

01:02:28.220 --> 01:02:31.420
<v Speaker 2>So know that you can't explore like the

01:02:32.460 --> 01:02:36.059
<v Speaker 2>Fermin Wasm functions from within Fermin Cloud because

01:02:36.059 --> 01:02:40.060
<v Speaker 2>those are two two separate like platforms.

01:02:40.940 --> 01:02:43.795
<v Speaker 2>The way how the entire like, you know,

01:02:43.795 --> 01:02:46.915
<v Speaker 2>building blocks of that service are different as

01:02:46.915 --> 01:02:49.795
<v Speaker 2>they are on on on Fermion Cloud.

01:02:50.355 --> 01:02:50.915
<v Speaker 2>And,

01:02:51.155 --> 01:02:52.995
<v Speaker 2>the other question was,

01:02:53.635 --> 01:02:54.595
<v Speaker 2>if you,

01:02:54.995 --> 01:02:57.110
<v Speaker 2>you know, what's the feature

01:02:57.110 --> 01:02:58.390
<v Speaker 2>compare comparison

01:02:58.390 --> 01:03:01.350
<v Speaker 2>or comparative to to Firming Cloud,

01:03:01.670 --> 01:03:03.190
<v Speaker 2>especially regarding,

01:03:03.670 --> 01:03:04.870
<v Speaker 2>custom domains.

01:03:05.110 --> 01:03:06.150
<v Speaker 2>For example,

01:03:06.550 --> 01:03:07.990
<v Speaker 2>our intention is

01:03:08.325 --> 01:03:11.285
<v Speaker 2>as we run on top of Akamai to

01:03:11.285 --> 01:03:12.165
<v Speaker 2>integrate

01:03:12.165 --> 01:03:13.525
<v Speaker 2>with Akamai's

01:03:13.525 --> 01:03:14.484
<v Speaker 2>services.

01:03:14.484 --> 01:03:15.045
<v Speaker 2>And

01:03:16.085 --> 01:03:19.365
<v Speaker 2>in Akamai there's a service called properties,

01:03:19.445 --> 01:03:22.210
<v Speaker 2>which basically allows you to bring

01:03:22.690 --> 01:03:23.890
<v Speaker 2>your own domain,

01:03:23.890 --> 01:03:24.370
<v Speaker 2>maybe

01:03:25.330 --> 01:03:26.130
<v Speaker 2>use

01:03:26.210 --> 01:03:28.210
<v Speaker 2>Acme or let's encrypt to

01:03:28.850 --> 01:03:31.010
<v Speaker 2>acquire an SSL certificate,

01:03:31.010 --> 01:03:33.010
<v Speaker 2>bring your own SSL certificate,

01:03:33.250 --> 01:03:34.610
<v Speaker 2>configure your

01:03:34.785 --> 01:03:37.664
<v Speaker 2>either simple or really sophisticated

01:03:37.664 --> 01:03:39.105
<v Speaker 2>routing rules,

01:03:39.105 --> 01:03:41.825
<v Speaker 2>and then, you know, route to

01:03:41.825 --> 01:03:43.984
<v Speaker 2>the fermion wasn't functions.

01:03:45.984 --> 01:03:48.545
<v Speaker 2>So that's how it is

01:03:47.970 --> 01:03:50.609
<v Speaker 2>today. That's how we designed that service to

01:03:50.609 --> 01:03:53.890
<v Speaker 2>integrate seamlessly with what's in front of

01:03:54.210 --> 01:03:56.290
<v Speaker 2>in front of our service in

01:03:56.530 --> 01:03:57.490
<v Speaker 2>Akamai.

01:03:58.609 --> 01:03:59.250
<v Speaker 2>And

01:03:59.410 --> 01:04:03.155
<v Speaker 2>yes, so slightly different as you may already

01:04:03.155 --> 01:04:04.115
<v Speaker 2>know from

01:04:04.595 --> 01:04:08.035
<v Speaker 2>or as the experience is with Fermi Cloud.

01:04:08.675 --> 01:04:10.755
<v Speaker 1>Right. But as you said, this is in

01:04:10.755 --> 01:04:13.075
<v Speaker 1>preview. There's still a lot of things to

01:04:13.075 --> 01:04:14.755
<v Speaker 1>come down the road. So, yeah, it's very

01:04:14.755 --> 01:04:16.035
<v Speaker 1>exciting to see where we are at the

01:04:16.035 --> 01:04:16.195
<v Speaker 1>moment.

01:04:16.839 --> 01:04:19.560
<v Speaker 2>Yeah. Yeah. And one part of that preview

01:04:19.560 --> 01:04:22.360
<v Speaker 2>is, we have unstable cron jobs.

01:04:23.880 --> 01:04:26.599
<v Speaker 2>So, this is under active,

01:04:26.839 --> 01:04:27.800
<v Speaker 2>development.

01:04:27.800 --> 01:04:29.160
<v Speaker 2>Right? Because, I mean,

01:04:30.125 --> 01:04:32.765
<v Speaker 2>building real world application HTTP

01:04:32.765 --> 01:04:35.484
<v Speaker 2>is could be like a great entry point

01:04:35.484 --> 01:04:38.045
<v Speaker 2>to trigger a function. But also, I mean,

01:04:38.204 --> 01:04:40.845
<v Speaker 2>maybe you wanna run something on a schedule.

01:04:40.845 --> 01:04:43.740
<v Speaker 2>Right? So And build my own status page,

01:04:43.820 --> 01:04:45.020
<v Speaker 1>my own health checks.

01:04:45.340 --> 01:04:46.620
<v Speaker 2>For example, yes.

01:04:47.180 --> 01:04:50.300
<v Speaker 2>So we try to, you know, always iterate

01:04:50.300 --> 01:04:52.860
<v Speaker 2>super fast and, you know, keep it simple

01:04:53.020 --> 01:04:54.140
<v Speaker 2>yet maintain

01:04:54.140 --> 01:04:57.455
<v Speaker 2>like the DX that we know. So creating

01:04:58.735 --> 01:05:01.615
<v Speaker 2>creating a cron job is as easy

01:05:02.175 --> 01:05:05.135
<v Speaker 2>as saying cron. Oh, there was one create

01:05:05.535 --> 01:05:07.775
<v Speaker 2>and let's say root route

01:05:09.320 --> 01:05:11.880
<v Speaker 2>cron, let's give it a name, root.

01:05:12.200 --> 01:05:13.880
<v Speaker 2>So every second

01:05:13.880 --> 01:05:14.760
<v Speaker 2>minute

01:05:15.480 --> 01:05:18.200
<v Speaker 2>send a request to the root route at

01:05:18.200 --> 01:05:19.400
<v Speaker 2>forward slash

01:05:19.480 --> 01:05:22.280
<v Speaker 2>and cron dash root is just the name

01:05:22.280 --> 01:05:24.755
<v Speaker 2>for my cron job so that I can

01:05:25.075 --> 01:05:25.955
<v Speaker 2>I

01:05:26.195 --> 01:05:26.835
<v Speaker 2>can

01:05:26.995 --> 01:05:29.715
<v Speaker 2>inspect or I can see it when

01:05:29.955 --> 01:05:32.035
<v Speaker 2>I do a cron list? And right now

01:05:32.035 --> 01:05:35.235
<v Speaker 2>the service will simply invoke that route

01:05:35.475 --> 01:05:37.075
<v Speaker 2>every second minute.

01:05:38.019 --> 01:05:40.900
<v Speaker 2>Right. So that's how it is today. We

01:05:40.900 --> 01:05:41.540
<v Speaker 2>are

01:05:42.500 --> 01:05:46.019
<v Speaker 2>obviously, you know, iterating over there and you

01:05:46.019 --> 01:05:49.059
<v Speaker 2>know, adding more and more capabilities

01:05:49.059 --> 01:05:49.859
<v Speaker 2>to

01:05:50.345 --> 01:05:53.704
<v Speaker 2>to features like for example, Cron to make

01:05:53.704 --> 01:05:56.345
<v Speaker 2>it like full fledged and, you know, bring

01:05:56.424 --> 01:05:58.105
<v Speaker 2>more and more capabilities

01:05:58.184 --> 01:05:58.905
<v Speaker 2>there.

01:05:59.625 --> 01:06:00.265
<v Speaker 1>Awesome.

01:06:01.224 --> 01:06:04.025
<v Speaker 2>Okay. So this is

01:06:03.920 --> 01:06:06.720
<v Speaker 2>cron we have deployed. Oh, we can do

01:06:06.720 --> 01:06:08.400
<v Speaker 2>a spin aker

01:06:08.800 --> 01:06:09.520
<v Speaker 2>app

01:06:10.400 --> 01:06:11.840
<v Speaker 2>apps info.

01:06:11.840 --> 01:06:12.880
<v Speaker 2>Let's do that.

01:06:14.400 --> 01:06:16.000
<v Speaker 2>So we saw, yeah,

01:06:16.320 --> 01:06:18.000
<v Speaker 2>fundamental metrics. Again,

01:06:19.674 --> 01:06:20.315
<v Speaker 2>yeah,

01:06:20.635 --> 01:06:23.194
<v Speaker 2>this is part of now trying to give

01:06:23.194 --> 01:06:25.674
<v Speaker 2>the developers some insights about how the app

01:06:25.674 --> 01:06:27.595
<v Speaker 2>behaves at runtime. That could be logs, that

01:06:27.595 --> 01:06:28.635
<v Speaker 2>could be metrics.

01:06:28.954 --> 01:06:29.434
<v Speaker 2>Right?

01:06:29.835 --> 01:06:30.555
<v Speaker 2>So

01:06:31.515 --> 01:06:32.795
<v Speaker 2>basically laying the foundation.

01:06:34.779 --> 01:06:35.339
<v Speaker 2>Cool.

01:06:36.940 --> 01:06:38.380
<v Speaker 2>There's one more thing.

01:06:39.980 --> 01:06:42.220
<v Speaker 2>The nice part, one of the nice parts

01:06:42.220 --> 01:06:45.180
<v Speaker 2>of WebAssembly is its portability,

01:06:45.259 --> 01:06:45.900
<v Speaker 2>right?

01:06:46.380 --> 01:06:46.940
<v Speaker 2>So,

01:06:47.259 --> 01:06:48.059
<v Speaker 2>we,

01:06:48.059 --> 01:06:49.019
<v Speaker 2>although we

01:06:49.385 --> 01:06:50.185
<v Speaker 2>extended

01:06:50.185 --> 01:06:51.224
<v Speaker 2>SpinCLI

01:06:51.224 --> 01:06:52.425
<v Speaker 2>by adding that,

01:06:52.905 --> 01:06:56.505
<v Speaker 2>ECA plug in and, you know, creating the

01:06:56.505 --> 01:06:58.984
<v Speaker 2>service, so the the the cloud side of

01:06:58.984 --> 01:06:59.305
<v Speaker 2>things,

01:07:02.040 --> 01:07:04.680
<v Speaker 2>we did not change anything to the SpinApps.

01:07:04.680 --> 01:07:05.640
<v Speaker 2>So SpinApps

01:07:05.640 --> 01:07:08.360
<v Speaker 2>remain like a WebAssembly component

01:07:08.600 --> 01:07:11.320
<v Speaker 2>that exports a given capability,

01:07:11.320 --> 01:07:14.520
<v Speaker 2>that imports given capabilities from the underlying run

01:07:14.520 --> 01:07:15.080
<v Speaker 2>time,

01:07:15.800 --> 01:07:17.720
<v Speaker 2>which means

01:07:17.055 --> 01:07:20.015
<v Speaker 2>we still can do things like taking the

01:07:20.015 --> 01:07:21.215
<v Speaker 2>same spin app

01:07:21.535 --> 01:07:25.295
<v Speaker 2>and say spin registry push and call that

01:07:25.295 --> 01:07:26.895
<v Speaker 2>AB testing

01:07:27.055 --> 01:07:29.454
<v Speaker 2>for one hour. So TTLSH

01:07:29.454 --> 01:07:31.135
<v Speaker 2>is like a femoral

01:07:30.960 --> 01:07:33.040
<v Speaker 2>We can browse the website in the meantime

01:07:33.040 --> 01:07:34.240
<v Speaker 2>while it's pushing.

01:07:35.760 --> 01:07:36.880
<v Speaker 2>TTLSH

01:07:36.880 --> 01:07:40.080
<v Speaker 2>is an anonymous and ephemeral docker image registry

01:07:40.080 --> 01:07:42.160
<v Speaker 2>where you can store your OCI

01:07:42.480 --> 01:07:43.200
<v Speaker 2>artifacts.

01:07:43.605 --> 01:07:47.525
<v Speaker 2>And basically the TTL is defined by the

01:07:47.525 --> 01:07:49.845
<v Speaker 2>tag that you provide when pushing

01:07:50.005 --> 01:07:52.085
<v Speaker 2>your artifact. So everyone

01:07:52.325 --> 01:07:53.605
<v Speaker 2>could right now,

01:07:53.845 --> 01:07:54.485
<v Speaker 2>you

01:07:54.725 --> 01:07:54.885
<v Speaker 2>know,

01:07:55.650 --> 01:07:58.210
<v Speaker 2>take the AB testing app in the next,

01:07:58.450 --> 01:08:01.090
<v Speaker 2>fifty nine minutes and couple of seconds

01:08:01.329 --> 01:08:02.930
<v Speaker 2>and run that on

01:08:03.170 --> 01:08:03.970
<v Speaker 2>maybe

01:08:05.569 --> 01:08:06.930
<v Speaker 2>it's all machine,

01:08:07.170 --> 01:08:08.690
<v Speaker 2>using the

01:08:08.690 --> 01:08:09.970
<v Speaker 2>dash dash from,

01:08:11.465 --> 01:08:12.265
<v Speaker 2>Yeah.

01:08:12.585 --> 01:08:14.025
<v Speaker 2>AB testing

01:08:14.025 --> 01:08:15.145
<v Speaker 2>one h.

01:08:15.385 --> 01:08:17.625
<v Speaker 2>Oh, think it no. It's not from. It's

01:08:18.665 --> 01:08:19.304
<v Speaker 2>spin

01:08:19.625 --> 01:08:21.064
<v Speaker 2>up dash dash from.

01:08:21.545 --> 01:08:24.185
<v Speaker 2>There we go. Right. So that pulls the

01:08:24.185 --> 01:08:26.185
<v Speaker 2>OCI artifact and you can do that on

01:08:26.185 --> 01:08:28.239
<v Speaker 2>your machine right now and you will end

01:08:28.239 --> 01:08:30.639
<v Speaker 2>up with the same app running on your

01:08:30.639 --> 01:08:31.359
<v Speaker 2>machine.

01:08:31.760 --> 01:08:32.399
<v Speaker 2>So

01:08:32.960 --> 01:08:35.199
<v Speaker 2>we have the app running on

01:08:35.359 --> 01:08:37.039
<v Speaker 2>for a minwasm functions.

01:08:37.600 --> 01:08:40.080
<v Speaker 2>We can run it locally using spin up.

01:08:40.425 --> 01:08:43.465
<v Speaker 2>But we can also go ahead and simply

01:08:43.785 --> 01:08:45.304
<v Speaker 2>deploy to Kubernetes.

01:08:45.305 --> 01:08:48.024
<v Speaker 2>So I have a Kubernetes cluster over here.

01:08:48.024 --> 01:08:49.625
<v Speaker 2>Let's say k get

01:08:50.185 --> 01:08:51.545
<v Speaker 2>n s for example,

01:08:52.265 --> 01:08:54.104
<v Speaker 2>that's

01:08:53.300 --> 01:08:56.260
<v Speaker 2>thirty five days old. Which one is it?

01:08:56.580 --> 01:08:59.939
<v Speaker 2>Yeah. It's an AKS cluster with SpinCube running

01:08:59.939 --> 01:09:00.979
<v Speaker 2>on top of it.

01:09:01.380 --> 01:09:05.380
<v Speaker 2>So that is SpinCube.def.

01:09:05.460 --> 01:09:07.455
<v Speaker 2>Right? That's also

01:09:07.695 --> 01:09:09.854
<v Speaker 2>it's a sub project of spin,

01:09:10.015 --> 01:09:12.495
<v Speaker 2>which means this is also CNCF,

01:09:12.495 --> 01:09:15.455
<v Speaker 2>also a part of the CNCF sandbox project,

01:09:15.935 --> 01:09:18.975
<v Speaker 2>which allows you to run your serverless workloads

01:09:18.975 --> 01:09:21.295
<v Speaker 2>on your Kubernetes cluster

01:09:21.030 --> 01:09:23.270
<v Speaker 2>right besides your containerized

01:09:23.270 --> 01:09:24.310
<v Speaker 2>workloads.

01:09:25.189 --> 01:09:26.149
<v Speaker 2>So you can,

01:09:26.470 --> 01:09:28.630
<v Speaker 2>right now, simply do a spin

01:09:28.950 --> 01:09:30.790
<v Speaker 2>cube scaffold,

01:09:31.030 --> 01:09:32.149
<v Speaker 2>scaffold

01:09:32.550 --> 01:09:33.350
<v Speaker 2>from

01:09:33.350 --> 01:09:36.710
<v Speaker 2>point to the however

01:09:36.524 --> 01:09:39.724
<v Speaker 2>I called it AB testing for one hour.

01:09:41.804 --> 01:09:44.045
<v Speaker 2>Point to the OCI artifact.

01:09:44.925 --> 01:09:47.965
<v Speaker 2>Right. And without further ado it's just printing

01:09:47.965 --> 01:09:51.085
<v Speaker 2>it to standard out so we can tailor

01:09:51.085 --> 01:09:53.690
<v Speaker 2>this. We can for example say replicas.

01:09:53.690 --> 01:09:55.850
<v Speaker 2>I want to start with 10 replicas.

01:09:56.250 --> 01:09:58.490
<v Speaker 2>I want to integrate HPA. I want to

01:09:58.490 --> 01:10:01.370
<v Speaker 2>integrate KEDA. If you have KEDA deployed to

01:10:01.370 --> 01:10:03.690
<v Speaker 2>your cluster to scale horizontally

01:10:04.055 --> 01:10:07.815
<v Speaker 2>based on how I call it contextual load.

01:10:07.895 --> 01:10:08.535
<v Speaker 2>Right?

01:10:10.135 --> 01:10:13.095
<v Speaker 2>But we we could simply say, hey deploy

01:10:13.095 --> 01:10:13.815
<v Speaker 2>this

01:10:15.015 --> 01:10:16.455
<v Speaker 2>using kubectl

01:10:16.455 --> 01:10:17.575
<v Speaker 2>apply

01:10:18.120 --> 01:10:20.920
<v Speaker 2>and take STD in. So we pipe

01:10:21.240 --> 01:10:21.880
<v Speaker 2>the

01:10:22.280 --> 01:10:23.320
<v Speaker 2>manifest

01:10:23.400 --> 01:10:25.880
<v Speaker 2>to standard in of the following command, which

01:10:25.880 --> 01:10:27.400
<v Speaker 2>is kubectl apply.

01:10:28.760 --> 01:10:32.040
<v Speaker 2>And basically in our Kubernetes cluster, we now

01:10:32.040 --> 01:10:33.640
<v Speaker 2>get a spin app

01:10:34.474 --> 01:10:35.754
<v Speaker 2>AB testing.

01:10:37.434 --> 01:10:38.874
<v Speaker 2>Let's do a wide.

01:10:39.195 --> 01:10:41.594
<v Speaker 2>This is the new one which is pulling

01:10:41.594 --> 01:10:44.074
<v Speaker 2>the image, so let's kill the old one.

01:10:44.395 --> 01:10:47.994
<v Speaker 2>K delete spin app AB spin.

01:10:48.650 --> 01:10:49.770
<v Speaker 2>So let's

01:10:50.810 --> 01:10:52.650
<v Speaker 2>k get spin app.

01:10:53.450 --> 01:10:55.370
<v Speaker 2>So there is an executor, there is an

01:10:55.370 --> 01:10:55.850
<v Speaker 2>operator

01:10:56.490 --> 01:10:59.610
<v Speaker 2>deployed to the Kubernetes cluster that watches exactly

01:10:59.610 --> 01:11:00.810
<v Speaker 2>that CRD.

01:11:01.290 --> 01:11:02.650
<v Speaker 2>I deployed one

01:11:02.885 --> 01:11:06.005
<v Speaker 2>and then the operator goes, moves on and

01:11:06.005 --> 01:11:09.525
<v Speaker 2>creates a deployment for you. Right. I specified

01:11:09.525 --> 01:11:10.485
<v Speaker 2>replica

01:11:10.965 --> 01:11:13.285
<v Speaker 2>or I removed the replica. No, I specified

01:11:13.285 --> 01:11:15.685
<v Speaker 2>replica as one. Right. That's why we see

01:11:15.685 --> 01:11:16.885
<v Speaker 2>desired one,

01:11:17.285 --> 01:11:18.485
<v Speaker 2>ready one right now.

01:11:19.579 --> 01:11:22.619
<v Speaker 2>So we see also a pod,

01:11:22.780 --> 01:11:23.419
<v Speaker 2>however,

01:11:23.900 --> 01:11:27.099
<v Speaker 2>the pod does not consist of containers instead

01:11:27.099 --> 01:11:29.739
<v Speaker 2>that's just a sub process or process

01:11:30.460 --> 01:11:33.175
<v Speaker 2>on the underlying node. Right? So there's no

01:11:33.175 --> 01:11:35.095
<v Speaker 2>container involved here.

01:11:35.975 --> 01:11:38.935
<v Speaker 2>And also the operator creates a service for

01:11:38.935 --> 01:11:41.335
<v Speaker 2>you allowing you to route

01:11:41.575 --> 01:11:42.615
<v Speaker 2>requests

01:11:42.695 --> 01:11:45.255
<v Speaker 2>to your spin apps. And if you scale

01:11:45.255 --> 01:11:48.055
<v Speaker 2>out, you know, the Kubernetes service does it's

01:11:47.640 --> 01:11:51.320
<v Speaker 2>thing to a router request to one

01:11:51.320 --> 01:11:52.680
<v Speaker 2>of the replicas.

01:11:52.920 --> 01:11:55.400
<v Speaker 2>So we can do kubectl

01:11:55.400 --> 01:11:58.920
<v Speaker 2>or no, let's say k port forward

01:11:59.775 --> 01:12:00.655
<v Speaker 2>forward

01:12:00.975 --> 01:12:04.415
<v Speaker 2>to the service or we could immediately directly

01:12:04.415 --> 01:12:08.335
<v Speaker 2>point to port as well. So AB testing,

01:12:08.574 --> 01:12:10.735
<v Speaker 2>let's say localhost 8,080

01:12:10.975 --> 01:12:13.054
<v Speaker 2>to port 80 of that port.

01:12:15.500 --> 01:12:17.820
<v Speaker 2>And now we can call curl

01:12:17.820 --> 01:12:18.860
<v Speaker 2>8,080.

01:12:21.340 --> 01:12:25.340
<v Speaker 2>And we have the same app without recompilation,

01:12:25.420 --> 01:12:26.540
<v Speaker 2>without anything

01:12:26.780 --> 01:12:27.660
<v Speaker 2>running

01:12:27.660 --> 01:12:31.505
<v Speaker 2>on an AKS cluster right now. And to

01:12:31.505 --> 01:12:34.545
<v Speaker 2>be honest, I can't remember which architecture

01:12:34.545 --> 01:12:35.344
<v Speaker 2>it

01:12:35.425 --> 01:12:36.304
<v Speaker 2>was using.

01:12:36.625 --> 01:12:37.744
<v Speaker 2>So let's check.

01:12:39.425 --> 01:12:40.304
<v Speaker 2>Oh,

01:12:40.304 --> 01:12:42.224
<v Speaker 2>I don't know if you see the architecture

01:12:42.224 --> 01:12:42.625
<v Speaker 2>there.

01:12:43.620 --> 01:12:46.580
<v Speaker 2>No. Let's do a KDescribe

01:12:46.580 --> 01:12:47.380
<v Speaker 2>node.

01:12:49.300 --> 01:12:50.420
<v Speaker 2>And I guess

01:12:51.380 --> 01:12:54.340
<v Speaker 2>we can see AMD sixty four is it

01:12:54.340 --> 01:12:54.900
<v Speaker 2>for here.

01:12:55.435 --> 01:12:57.195
<v Speaker 2>However, it doesn't matter. It could be an

01:12:57.195 --> 01:12:59.594
<v Speaker 2>ARM 64, right? If you wanna lower your

01:12:59.594 --> 01:13:02.395
<v Speaker 2>cloud spendings, maybe it's smarter to roll with

01:13:02.395 --> 01:13:05.114
<v Speaker 2>an ARM 64 instead of AMD sixty four.

01:13:05.515 --> 01:13:08.395
<v Speaker 2>And the fact that we use WebAssembly means

01:13:08.395 --> 01:13:09.755
<v Speaker 2>we don't have to

01:13:10.110 --> 01:13:12.429
<v Speaker 2>do multi arc builds, we don't have to

01:13:12.429 --> 01:13:14.670
<v Speaker 2>cross compile things, we can just take the

01:13:14.670 --> 01:13:15.709
<v Speaker 2>same workload

01:13:16.030 --> 01:13:18.830
<v Speaker 2>and run it on different operating systems on

01:13:18.830 --> 01:13:20.110
<v Speaker 2>different architectures.

01:13:21.550 --> 01:13:24.510
<v Speaker 1>Alright. One more question for you then. Sure.

01:13:25.145 --> 01:13:27.785
<v Speaker 1>That OCIR effect that you have pushed our

01:13:27.785 --> 01:13:29.385
<v Speaker 1>registry, if I

01:13:30.105 --> 01:13:30.825
<v Speaker 1>have

01:13:31.705 --> 01:13:32.505
<v Speaker 1>configuration

01:13:32.905 --> 01:13:34.425
<v Speaker 1>which may be sensitive,

01:13:34.425 --> 01:13:36.585
<v Speaker 1>is it inside of that OCIR effect?

01:13:38.190 --> 01:13:39.870
<v Speaker 1>Is that something people should be aware of

01:13:39.870 --> 01:13:41.230
<v Speaker 1>not to push to public

01:13:41.630 --> 01:13:44.030
<v Speaker 1>registries if there are sensitive information?

01:13:44.030 --> 01:13:45.870
<v Speaker 2>That's a good that's a good question. So

01:13:45.870 --> 01:13:48.990
<v Speaker 2>if we go into the source code of

01:13:48.990 --> 01:13:49.550
<v Speaker 2>our app,

01:13:50.034 --> 01:13:50.914
<v Speaker 2>So

01:13:51.474 --> 01:13:55.795
<v Speaker 2>what how how do you provide configuration

01:13:55.795 --> 01:13:58.675
<v Speaker 2>data? It does not matter sensitive or not

01:13:58.755 --> 01:14:00.914
<v Speaker 2>in the first place to your spin app

01:14:00.914 --> 01:14:02.755
<v Speaker 2>is you specify

01:14:02.755 --> 01:14:04.514
<v Speaker 2>a variables

01:14:04.620 --> 01:14:06.940
<v Speaker 2>block over here where you can say for

01:14:06.940 --> 01:14:07.660
<v Speaker 2>example,

01:14:08.380 --> 01:14:09.580
<v Speaker 2>log level

01:14:11.580 --> 01:14:12.460
<v Speaker 2>default

01:14:12.460 --> 01:14:15.500
<v Speaker 2>equals debug something like that. Right?

01:14:15.900 --> 01:14:18.860
<v Speaker 2>Then you so once you have defined a

01:14:18.860 --> 01:14:21.675
<v Speaker 2>variable that allows the run time to pick

01:14:21.675 --> 01:14:23.275
<v Speaker 2>up for example

01:14:24.395 --> 01:14:26.074
<v Speaker 2>an environment variable

01:14:26.074 --> 01:14:28.554
<v Speaker 2>to read that value.

01:14:29.594 --> 01:14:31.435
<v Speaker 2>However you have

01:14:31.435 --> 01:14:34.955
<v Speaker 2>to explicitly give your component access to that

01:14:35.929 --> 01:14:36.809
<v Speaker 2>variable

01:14:36.969 --> 01:14:38.010
<v Speaker 2>testing

01:14:38.489 --> 01:14:39.849
<v Speaker 2>sample

01:14:39.850 --> 01:14:41.449
<v Speaker 2>dot variables.

01:14:41.530 --> 01:14:43.690
<v Speaker 2>Right? And then you can say,

01:14:43.690 --> 01:14:46.730
<v Speaker 2>hey, take this from the application

01:14:46.730 --> 01:14:49.425
<v Speaker 2>variables. Right. So simple interpolation

01:14:49.425 --> 01:14:50.784
<v Speaker 2>syntax over here.

01:14:51.985 --> 01:14:55.104
<v Speaker 2>So now let's say you wanna have connection

01:14:55.105 --> 01:14:55.985
<v Speaker 2>string

01:14:55.985 --> 01:14:56.945
<v Speaker 2>over there.

01:14:58.065 --> 01:15:01.309
<v Speaker 2>Obviously you could specify it over here but

01:15:01.309 --> 01:15:03.309
<v Speaker 2>then it would be part of the OCR

01:15:03.309 --> 01:15:04.110
<v Speaker 2>artifact.

01:15:04.590 --> 01:15:06.749
<v Speaker 2>So there is and now I

01:15:07.070 --> 01:15:09.709
<v Speaker 2>hope it is secure

01:15:10.270 --> 01:15:11.309
<v Speaker 2>secure

01:15:12.285 --> 01:15:13.324
<v Speaker 2>true and

01:15:13.804 --> 01:15:16.204
<v Speaker 2>we can test if that's the right one.

01:15:16.525 --> 01:15:17.324
<v Speaker 2>Okay.

01:15:21.885 --> 01:15:24.765
<v Speaker 2>Let's say that. Right. And being

01:15:24.765 --> 01:15:27.565
<v Speaker 2>able to use interpolation syntax over here allows

01:15:27.565 --> 01:15:29.720
<v Speaker 2>you to do things like for example,

01:15:30.280 --> 01:15:31.160
<v Speaker 2>Redis

01:15:34.040 --> 01:15:36.040
<v Speaker 2>something like that. Right? If you want to

01:15:36.360 --> 01:15:37.000
<v Speaker 2>combine

01:15:37.720 --> 01:15:38.600
<v Speaker 2>multiple

01:15:39.320 --> 01:15:42.200
<v Speaker 2>application variables into a single

01:15:43.465 --> 01:15:44.345
<v Speaker 2>value.

01:15:44.905 --> 01:15:45.785
<v Speaker 2>So

01:15:45.945 --> 01:15:49.065
<v Speaker 2>I think it is either secure or sensitive.

01:15:49.065 --> 01:15:51.145
<v Speaker 2>Let's try spin

01:15:51.145 --> 01:15:53.865
<v Speaker 2>up. I don't have to build. Okay, it's

01:15:53.865 --> 01:15:54.745
<v Speaker 2>secret.

01:15:54.745 --> 01:15:55.385
<v Speaker 2>Secret.

01:15:55.625 --> 01:15:56.105
<v Speaker 2>There we go.

01:15:57.260 --> 01:16:00.700
<v Speaker 2>Yeah. This is Okay. Then secret. Okay. So

01:16:01.660 --> 01:16:04.300
<v Speaker 2>if you push your app to Kubernetes or

01:16:04.300 --> 01:16:05.500
<v Speaker 2>if you push your app to as an

01:16:05.500 --> 01:16:07.500
<v Speaker 2>OCR artifact somewhere. Right.

01:16:08.060 --> 01:16:08.460
<v Speaker 2>Obviously,

01:16:08.945 --> 01:16:12.465
<v Speaker 2>the default values specified or hard coded over

01:16:12.465 --> 01:16:13.025
<v Speaker 2>here

01:16:13.585 --> 01:16:15.745
<v Speaker 2>are part of that one layer in that

01:16:15.745 --> 01:16:17.025
<v Speaker 2>OCR artifact.

01:16:17.345 --> 01:16:18.705
<v Speaker 2>The other values

01:16:18.865 --> 01:16:19.585
<v Speaker 2>are

01:16:20.305 --> 01:16:21.345
<v Speaker 2>read

01:16:21.690 --> 01:16:24.410
<v Speaker 2>when the application is bootstrap.

01:16:24.410 --> 01:16:27.050
<v Speaker 2>Right? And that means we have to load

01:16:27.050 --> 01:16:29.850
<v Speaker 2>them from somewhere. And from somewhere could be

01:16:29.850 --> 01:16:31.130
<v Speaker 2>a Kubernetes

01:16:31.210 --> 01:16:34.525
<v Speaker 2>config map, a Kubernetes secret. It could be

01:16:34.525 --> 01:16:37.245
<v Speaker 2>a HashiCorp Vault instance and so on and

01:16:37.245 --> 01:16:38.844
<v Speaker 2>so forth. So there are different

01:16:39.085 --> 01:16:39.724
<v Speaker 2>like

01:16:39.885 --> 01:16:40.765
<v Speaker 2>configuration

01:16:40.765 --> 01:16:42.125
<v Speaker 2>data providers

01:16:42.125 --> 01:16:44.045
<v Speaker 2>supported by SPIN that

01:16:45.085 --> 01:16:48.685
<v Speaker 2>you can integrate to load those values

01:16:48.130 --> 01:16:49.250
<v Speaker 2>instead of

01:16:49.410 --> 01:16:51.330
<v Speaker 2>hard coding them as I did with the

01:16:51.330 --> 01:16:54.290
<v Speaker 2>lock level which I could overwrite obviously.

01:16:56.450 --> 01:16:58.770
<v Speaker 2>Or you know to you know bring the

01:16:58.770 --> 01:16:59.570
<v Speaker 2>connection

01:16:59.730 --> 01:17:01.250
<v Speaker 2>string maybe from

01:17:01.695 --> 01:17:03.695
<v Speaker 2>a HashiCorp Vault which is like

01:17:04.015 --> 01:17:05.455
<v Speaker 2>a way more

01:17:05.855 --> 01:17:07.135
<v Speaker 2>realistic

01:17:07.135 --> 01:17:08.015
<v Speaker 2>data

01:17:08.015 --> 01:17:11.855
<v Speaker 2>storage for sensitive data than an environment variable

01:17:11.855 --> 01:17:12.975
<v Speaker 2>or a ConfigMap.

01:17:13.800 --> 01:17:15.800
<v Speaker 2>Yeah. Nice. So that's

01:17:15.800 --> 01:17:17.399
<v Speaker 2>the way how you could prevent

01:17:18.760 --> 01:17:21.639
<v Speaker 2>yourself from leaking sensitive information

01:17:22.119 --> 01:17:23.399
<v Speaker 2>in the first place.

01:17:23.880 --> 01:17:27.000
<v Speaker 2>But still, I mean, even if your workload

01:17:27.155 --> 01:17:30.755
<v Speaker 2>does not require a sensitive configuration data, it's

01:17:30.755 --> 01:17:34.435
<v Speaker 2>still it is still your IP. Right?

01:17:34.995 --> 01:17:36.755
<v Speaker 2>So you obviously

01:17:37.075 --> 01:17:39.635
<v Speaker 2>can use things like spin

01:17:39.795 --> 01:17:40.755
<v Speaker 2>OCI

01:17:40.835 --> 01:17:43.280
<v Speaker 2>login or spin

01:17:43.280 --> 01:17:44.240
<v Speaker 2>registry

01:17:44.240 --> 01:17:47.920
<v Speaker 2>isn't they're an alias, right, for registry.

01:17:47.920 --> 01:17:48.720
<v Speaker 2>OCI

01:17:48.720 --> 01:17:51.040
<v Speaker 2>is an alias for the registry command

01:17:51.120 --> 01:17:53.520
<v Speaker 2>and there is an login command

01:17:53.840 --> 01:17:56.880
<v Speaker 2>that you can use to authenticate

01:17:56.880 --> 01:17:59.040
<v Speaker 2>against

01:17:58.005 --> 01:17:59.125
<v Speaker 2>your

01:17:59.205 --> 01:18:00.005
<v Speaker 2>protected

01:18:00.005 --> 01:18:01.605
<v Speaker 2>OCR registry

01:18:02.965 --> 01:18:04.645
<v Speaker 2>before pushing there.

01:18:05.285 --> 01:18:06.005
<v Speaker 1>Awesome.

01:18:06.165 --> 01:18:07.125
<v Speaker 1>Love it.

01:18:08.485 --> 01:18:10.165
<v Speaker 1>Alright. Anything else you want to show us

01:18:10.165 --> 01:18:11.445
<v Speaker 1>or can I move us back over to

01:18:11.445 --> 01:18:12.085
<v Speaker 1>big face mode?

01:18:13.000 --> 01:18:16.199
<v Speaker 2>Let's move back to the face mode.

01:18:18.760 --> 01:18:21.159
<v Speaker 1>Alright. That was that was awesome. Such a

01:18:21.159 --> 01:18:23.400
<v Speaker 1>good demo. Thank you for, you know, taking

01:18:23.400 --> 01:18:25.239
<v Speaker 1>almost ninety minutes out of your day to

01:18:25.239 --> 01:18:27.000
<v Speaker 1>set and guide us through that. I love

01:18:27.275 --> 01:18:30.315
<v Speaker 1>the trajectory of where Vermeion and Spin are

01:18:30.315 --> 01:18:30.874
<v Speaker 1>going,

01:18:31.514 --> 01:18:33.835
<v Speaker 1>being able to deploy this to the Akamai

01:18:33.835 --> 01:18:35.594
<v Speaker 1>network. I think it's an absolute game changer

01:18:35.594 --> 01:18:37.835
<v Speaker 1>for people that need to write performing applications

01:18:37.835 --> 01:18:40.314
<v Speaker 1>for our customers and users around the world.

01:18:40.315 --> 01:18:41.994
<v Speaker 1>And I'm very excited to ship some of

01:18:41.994 --> 01:18:44.570
<v Speaker 1>my own stuff this way as well. I've

01:18:44.570 --> 01:18:45.849
<v Speaker 1>got a lot on my to do list

01:18:45.849 --> 01:18:46.409
<v Speaker 1>now.

01:18:47.050 --> 01:18:48.249
<v Speaker 2>Awesome. Yeah.

01:18:48.969 --> 01:18:50.969
<v Speaker 2>From my point of view, thanks again for

01:18:50.969 --> 01:18:54.329
<v Speaker 2>having me here at Rawkode. It was an

01:18:54.329 --> 01:18:55.849
<v Speaker 2>absolute blast to

01:18:56.765 --> 01:19:00.205
<v Speaker 2>present and, you know, talk about Fermin Walls

01:19:00.205 --> 01:19:01.645
<v Speaker 2>and Functions. And,

01:19:02.125 --> 01:19:04.205
<v Speaker 2>yeah, as I as I said

01:19:04.205 --> 01:19:07.165
<v Speaker 2>at the beginning, it is public it is

01:19:07.165 --> 01:19:08.445
<v Speaker 2>a preview and we

01:19:09.100 --> 01:19:11.740
<v Speaker 2>if you wanna play explore it, you wanna

01:19:11.740 --> 01:19:12.940
<v Speaker 2>run something there,

01:19:13.180 --> 01:19:13.740
<v Speaker 2>just

01:19:14.380 --> 01:19:16.380
<v Speaker 2>sign up to get access.

01:19:16.540 --> 01:19:18.780
<v Speaker 2>We are happy to let people in and

01:19:19.100 --> 01:19:21.180
<v Speaker 2>we are listening for feedback. So there is

01:19:21.180 --> 01:19:23.260
<v Speaker 2>a feedback command in the CLI.

01:19:24.555 --> 01:19:26.155
<v Speaker 2>Just let us know

01:19:26.715 --> 01:19:28.074
<v Speaker 2>what you think about Alright.

01:19:29.995 --> 01:19:31.515
<v Speaker 1>Well, thank you for your time. To everyone

01:19:31.515 --> 01:19:33.114
<v Speaker 1>that watched, enjoy it, and thank you for

01:19:33.114 --> 01:19:35.195
<v Speaker 1>watching, and we'll see you all next time.

01:19:35.275 --> 01:19:37.675
<v Speaker 1>Have a great day. Thank you. Bye bye.

01:20:06.375 --> 01:20:01.895
<v Speaker 2>Rawkode Hit subscribe so you won't miss a

01:20:01.895 --> 01:20:05.094
<v Speaker 0>beat. More livestream tutorials can't be beat. Keep

01:20:04.920 --> 01:20:07.239
<v Speaker 0>coding, keep learning. It's the Rawkode way. We'll

01:20:07.239 --> 01:20:08.120
<v Speaker 2>catch you next time.
