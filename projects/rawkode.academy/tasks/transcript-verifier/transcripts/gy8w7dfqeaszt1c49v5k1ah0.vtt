WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 0bca0f44-7c36-48c8-8968-46bfbf0462fc
Created: 2025-04-29T17:46:05.684Z
Duration: 3567.288
Channels: 1

00:01:14.690 --> 00:01:15.490
<v Speaker 0>Hello,

00:01:15.570 --> 00:01:19.010
<v Speaker 0>and welcome to today's episode of Rawkode Live.

00:01:19.250 --> 00:01:21.330
<v Speaker 0>I'm your host, David Flanagan, but you may

00:01:21.330 --> 00:01:23.330
<v Speaker 0>know me as Rawkode. Go figure.

00:01:24.450 --> 00:01:27.090
<v Speaker 0>We've got a really cool episode today. We're

00:01:27.090 --> 00:01:29.010
<v Speaker 0>taking a look at a tool to help

00:01:29.010 --> 00:01:31.245
<v Speaker 0>make your Kubernetes lives easier.

00:01:31.245 --> 00:01:33.005
<v Speaker 0>Who doesn't want that, right?

00:01:33.325 --> 00:01:35.245
<v Speaker 0>We're gonna be taking a look at Lens

00:01:35.245 --> 00:01:36.685
<v Speaker 0>from Marantus,

00:01:36.845 --> 00:01:38.525
<v Speaker 0>but before we do that, we've got a

00:01:38.525 --> 00:01:40.045
<v Speaker 0>little bit of housekeeping.

00:01:40.125 --> 00:01:40.205
<v Speaker 0>So

00:01:41.580 --> 00:01:43.820
<v Speaker 0>I say this every week. If you're not

00:01:43.820 --> 00:01:45.900
<v Speaker 0>subscribed to the channel, now is the time

00:01:45.900 --> 00:01:48.460
<v Speaker 0>to do so. Please subscribe and click that

00:01:48.460 --> 00:01:50.780
<v Speaker 0>bell. You will get notifications for all new

00:01:50.780 --> 00:01:52.140
<v Speaker 0>episodes of Rawkode Live.

00:01:52.540 --> 00:01:54.220
<v Speaker 0>I'm gonna do my best to produce materials

00:01:54.220 --> 00:01:55.980
<v Speaker 0>to help us navigate this vast cloud native

00:01:55.980 --> 00:01:58.225
<v Speaker 0>landscape together, and I would appreciate you joining,

00:01:58.225 --> 00:01:59.025
<v Speaker 0>engaging,

00:01:59.025 --> 00:02:01.425
<v Speaker 0>chatting in the comments, and having some fun.

00:02:01.905 --> 00:02:03.665
<v Speaker 0>We also have a Discord server. Feel free

00:02:03.665 --> 00:02:05.265
<v Speaker 0>to join at rockload.chat.

00:02:05.265 --> 00:02:07.265
<v Speaker 0>There's nearly 500 of us in there now

00:02:07.265 --> 00:02:09.425
<v Speaker 0>talking about all things cloud native and Kubernetes.

00:02:09.425 --> 00:02:10.785
<v Speaker 0>So come and say hello, and I look

00:02:10.785 --> 00:02:11.505
<v Speaker 0>forward to meeting you.

00:02:12.430 --> 00:02:15.549
<v Speaker 0>Also, there are Rawkode membership packages from as

00:02:15.549 --> 00:02:16.750
<v Speaker 0>low as 99p

00:02:16.750 --> 00:02:18.510
<v Speaker 0>per month to support this channel,

00:02:18.829 --> 00:02:21.390
<v Speaker 0>and also there is incubating and graduating levels.

00:02:21.390 --> 00:02:23.230
<v Speaker 0>Incubating is for people that wanna join us

00:02:23.230 --> 00:02:26.405
<v Speaker 0>and do live courses and workshops. Currently, are

00:02:26.405 --> 00:02:28.965
<v Speaker 0>working through a course on influx DB two.

00:02:29.125 --> 00:02:30.724
<v Speaker 0>We had an episode today where we explored

00:02:30.724 --> 00:02:32.565
<v Speaker 0>the Flux language and how to query time

00:02:32.565 --> 00:02:33.445
<v Speaker 0>series data.

00:02:33.685 --> 00:02:35.205
<v Speaker 0>I wanna thank Kevin who signed up today

00:02:35.205 --> 00:02:37.205
<v Speaker 0>for incubating level and Noel who has already

00:02:37.205 --> 00:02:38.405
<v Speaker 0>been in there, and there's a few other

00:02:38.405 --> 00:02:40.245
<v Speaker 0>of you. Remember to join the Discord and

00:02:40.245 --> 00:02:41.284
<v Speaker 0>connect your YouTube

00:02:42.180 --> 00:02:44.740
<v Speaker 0>Alright. That is the housekeeping done. We are

00:02:44.740 --> 00:02:47.460
<v Speaker 0>going to meet Edward from the Lens team

00:02:47.460 --> 00:02:49.380
<v Speaker 0>at MERANTIS. Hey, man. How's it going?

00:02:49.860 --> 00:02:51.860
<v Speaker 1>It's going well, David. Thank you. Thank you

00:02:51.860 --> 00:02:54.505
<v Speaker 1>for having me today. How are you? Very

00:02:54.505 --> 00:02:56.345
<v Speaker 0>well. Today has been a good day, and

00:02:56.345 --> 00:02:58.425
<v Speaker 0>I'm excited to to play with Lens. I

00:02:58.425 --> 00:03:00.105
<v Speaker 0>always like it when I get a tool

00:03:00.105 --> 00:03:01.705
<v Speaker 0>that I played with and I enjoy and

00:03:01.705 --> 00:03:03.225
<v Speaker 0>then get to learn more about it today.

00:03:03.225 --> 00:03:05.065
<v Speaker 0>So this is gonna be an awesome episode.

00:03:05.705 --> 00:03:06.505
<v Speaker 1>Awesome.

00:03:06.505 --> 00:03:07.625
<v Speaker 1>I'm looking forward to it.

00:03:08.280 --> 00:03:09.960
<v Speaker 0>Do you wanna take a minute and just

00:03:10.040 --> 00:03:12.280
<v Speaker 0>for anyone who's not familiar with you and

00:03:12.280 --> 00:03:14.520
<v Speaker 0>Mirantis and Lens, just give us a little

00:03:14.520 --> 00:03:15.800
<v Speaker 0>bit of an introduction, please?

00:03:16.360 --> 00:03:18.840
<v Speaker 1>Absolutely. Absolutely. So first off, I wanna thank

00:03:18.840 --> 00:03:20.440
<v Speaker 1>you for having me here today and the

00:03:20.440 --> 00:03:22.760
<v Speaker 1>audience. Hello. I'm Edward Ianell, and I'm part

00:03:22.760 --> 00:03:24.505
<v Speaker 1>of the team.

00:03:24.505 --> 00:03:26.665
<v Speaker 1>I'm specifically on the product team, and I'm

00:03:26.665 --> 00:03:28.825
<v Speaker 1>focused on open source technologies

00:03:28.825 --> 00:03:30.745
<v Speaker 1>like Lens and k zero s, which is

00:03:30.745 --> 00:03:32.585
<v Speaker 1>a lightweight Kubernetes distro.

00:03:32.665 --> 00:03:32.985
<v Speaker 1>And,

00:03:33.785 --> 00:03:35.785
<v Speaker 1>more of my day to day responsibilities

00:03:35.785 --> 00:03:36.505
<v Speaker 1>is

00:03:36.905 --> 00:03:37.545
<v Speaker 1>really

00:03:37.950 --> 00:03:40.590
<v Speaker 1>seeking out the pain points within Kubernetes and

00:03:40.590 --> 00:03:43.630
<v Speaker 1>other cloud native technologies to help and try

00:03:43.630 --> 00:03:46.750
<v Speaker 1>to streamline developer and operator initiatives when working

00:03:46.750 --> 00:03:47.870
<v Speaker 1>with these technologies.

00:03:48.110 --> 00:03:51.150
<v Speaker 1>So, that's my main focus, and Lens is

00:03:51.150 --> 00:03:54.005
<v Speaker 1>something that I actually stumble up upon prior

00:03:54.005 --> 00:03:55.685
<v Speaker 1>to even being a part of the Lens

00:03:55.685 --> 00:03:57.525
<v Speaker 1>team while I was at Marantus.

00:03:57.525 --> 00:03:58.565
<v Speaker 1>And we acquired,

00:03:58.805 --> 00:04:01.045
<v Speaker 1>the Lens and the team of Lens,

00:04:01.525 --> 00:04:04.085
<v Speaker 1>back in August of last year. And I

00:04:04.085 --> 00:04:05.845
<v Speaker 1>was using the tool before we even acquired

00:04:05.845 --> 00:04:07.920
<v Speaker 1>them. And once

00:04:08.080 --> 00:04:10.640
<v Speaker 1>I, we acquired them, I was begging to

00:04:10.640 --> 00:04:12.640
<v Speaker 1>join the team actually. So this was something

00:04:12.640 --> 00:04:14.240
<v Speaker 1>I wanted to do quite a lot, and

00:04:14.240 --> 00:04:16.399
<v Speaker 1>this is how I got this cool little

00:04:16.399 --> 00:04:19.120
<v Speaker 1>Lens hoodie, which, people are able to get

00:04:19.120 --> 00:04:20.399
<v Speaker 1>if they would like to join our Slack

00:04:20.399 --> 00:04:23.245
<v Speaker 1>channel. I'm always giving away free hoodies. So

00:04:23.245 --> 00:04:25.645
<v Speaker 1>again, David, thanks for having me. Looking forward

00:04:25.645 --> 00:04:26.925
<v Speaker 1>to this wonderful session.

00:04:28.045 --> 00:04:29.085
<v Speaker 0>Awesome. Great.

00:04:30.125 --> 00:04:30.845
<v Speaker 0>Introduction.

00:04:31.165 --> 00:04:32.845
<v Speaker 0>Yeah. People get in the Slack channel. Get

00:04:32.845 --> 00:04:34.605
<v Speaker 0>yourself a hoodie because those are pretty sweet.

00:04:35.320 --> 00:04:36.040
<v Speaker 0>Alright.

00:04:36.680 --> 00:04:38.680
<v Speaker 0>I believe you're gonna start us off with

00:04:38.680 --> 00:04:40.760
<v Speaker 0>some slides to talk about what Lens is

00:04:40.760 --> 00:04:42.520
<v Speaker 0>and why people should be interested in it,

00:04:42.520 --> 00:04:43.880
<v Speaker 0>and then we're gonna do a hands on

00:04:43.880 --> 00:04:44.600
<v Speaker 0>demo.

00:04:44.920 --> 00:04:47.720
<v Speaker 0>You wanna Absolutely. Get your screen up and

00:04:47.720 --> 00:04:49.000
<v Speaker 0>we'll kick this thing off.

00:04:50.725 --> 00:04:52.164
<v Speaker 1>Sounds good. And let me know if you

00:04:52.164 --> 00:04:53.365
<v Speaker 1>can see my screen.

00:04:56.965 --> 00:05:00.085
<v Speaker 0>Yes. I see the Kubernetes IDE five. All

00:05:00.085 --> 00:05:03.044
<v Speaker 0>yours, Edward. Awesome. Well, again, thank you, David.

00:05:03.125 --> 00:05:03.685
<v Speaker 1>So

00:05:04.085 --> 00:05:06.660
<v Speaker 1>hello, everyone. I'm looking forward to this awesome

00:05:06.660 --> 00:05:08.900
<v Speaker 1>session. And as David mentioned, we will be

00:05:08.900 --> 00:05:10.660
<v Speaker 1>doing two things. One, we'll take a look

00:05:10.660 --> 00:05:12.660
<v Speaker 1>at these slides. It's just an overview for

00:05:12.660 --> 00:05:14.260
<v Speaker 1>us to get a better understanding of what

00:05:14.260 --> 00:05:15.620
<v Speaker 1>Lens IDE,

00:05:15.780 --> 00:05:18.020
<v Speaker 1>some of the features that are within the

00:05:18.020 --> 00:05:18.660
<v Speaker 1>IDE,

00:05:18.845 --> 00:05:21.645
<v Speaker 1>and why developers or operators should be utilizing

00:05:21.645 --> 00:05:23.325
<v Speaker 1>this open source technology.

00:05:23.965 --> 00:05:26.925
<v Speaker 1>From there, we'll transition into a live demo

00:05:26.925 --> 00:05:29.325
<v Speaker 1>where we'll go through the key features,

00:05:29.885 --> 00:05:32.380
<v Speaker 1>as well as what a developer may use

00:05:32.380 --> 00:05:34.540
<v Speaker 1>Lens for, an operator may use Lens for,

00:05:34.540 --> 00:05:36.860
<v Speaker 1>an SRE may be using Lens for. And

00:05:36.860 --> 00:05:38.700
<v Speaker 1>then after that, we'll actually take a look

00:05:38.700 --> 00:05:41.180
<v Speaker 1>at something that's quite cool, and it was

00:05:41.180 --> 00:05:43.980
<v Speaker 1>released with our newest release, which is Lens

00:05:43.980 --> 00:05:47.020
<v Speaker 1>five. We released that back in June of

00:05:47.375 --> 00:05:49.455
<v Speaker 1>this year, and we'll be taking a look

00:05:49.455 --> 00:05:51.215
<v Speaker 1>at how you can share access

00:05:51.455 --> 00:05:54.255
<v Speaker 1>to a Kubernetes cluster securely

00:05:54.255 --> 00:05:55.935
<v Speaker 1>through Lens Spaces.

00:05:56.095 --> 00:05:58.095
<v Speaker 1>So that's another exciting thing that we'll be

00:05:58.095 --> 00:05:59.055
<v Speaker 1>taking a look at today.

00:05:59.630 --> 00:06:02.350
<v Speaker 1>So without further ado, let's jump straight into

00:06:02.350 --> 00:06:03.630
<v Speaker 1>it. I know this is going to be

00:06:03.630 --> 00:06:05.870
<v Speaker 1>a jam packed session. And, thank you all

00:06:05.870 --> 00:06:08.590
<v Speaker 1>for joining us today. I'm quite excited about

00:06:08.590 --> 00:06:09.230
<v Speaker 1>this one.

00:06:10.190 --> 00:06:12.030
<v Speaker 1>So we can skip over this slide. We

00:06:12.030 --> 00:06:14.235
<v Speaker 1>already talked about it, but, again, responsible for

00:06:14.235 --> 00:06:16.555
<v Speaker 1>growth and developer relations here at Orantis.

00:06:16.555 --> 00:06:18.075
<v Speaker 1>We'll skip through this slide.

00:06:19.435 --> 00:06:21.515
<v Speaker 1>So I'm sure we all know this already,

00:06:21.515 --> 00:06:22.635
<v Speaker 1>but I'll just touch on it a little

00:06:22.635 --> 00:06:24.715
<v Speaker 1>bit. Kubernetes is quite challenging.

00:06:25.035 --> 00:06:28.315
<v Speaker 1>People, organizations invest in Kubernetes and other cloud

00:06:28.315 --> 00:06:29.195
<v Speaker 1>native technologies,

00:06:29.569 --> 00:06:31.250
<v Speaker 1>but they may not be seeing that return

00:06:31.250 --> 00:06:33.729
<v Speaker 1>on investment that they should when working with

00:06:33.729 --> 00:06:35.490
<v Speaker 1>containers or Kubernetes.

00:06:35.569 --> 00:06:37.490
<v Speaker 1>This is kind of where Lens comes in.

00:06:37.490 --> 00:06:39.330
<v Speaker 1>Lens is a 100%

00:06:39.330 --> 00:06:42.690
<v Speaker 1>open source technology. That's a developer friendly desktop

00:06:42.690 --> 00:06:43.569
<v Speaker 1>application

00:06:43.745 --> 00:06:46.305
<v Speaker 1>meant for all of your Kubernetes needs. It

00:06:46.305 --> 00:06:49.345
<v Speaker 1>works with any certified Kubernetes distro,

00:06:49.425 --> 00:06:51.505
<v Speaker 1>whether that is GKE,

00:06:51.505 --> 00:06:52.385
<v Speaker 1>EKS,

00:06:52.385 --> 00:06:55.505
<v Speaker 1>k zeros, k three s, mini queue, and

00:06:55.505 --> 00:06:56.065
<v Speaker 1>so forth.

00:06:59.080 --> 00:07:01.080
<v Speaker 1>I did wanna bring some stats up. The

00:07:01.160 --> 00:07:03.080
<v Speaker 1>these are roughly a month old or so

00:07:03.080 --> 00:07:04.760
<v Speaker 1>as you guys can or two months old,

00:07:04.760 --> 00:07:05.480
<v Speaker 1>actually.

00:07:05.880 --> 00:07:08.120
<v Speaker 1>But we are the self proclaimed, and I

00:07:08.120 --> 00:07:09.400
<v Speaker 1>I like to mention that we are the

00:07:09.400 --> 00:07:12.200
<v Speaker 1>self proclaimed world's most popular Kubernetes

00:07:12.200 --> 00:07:12.840
<v Speaker 1>IDE.

00:07:13.645 --> 00:07:14.525
<v Speaker 1>Currently,

00:07:14.525 --> 00:07:16.845
<v Speaker 1>on GitHub, we have 15,000

00:07:16.845 --> 00:07:18.205
<v Speaker 1>GitHub stargazers,

00:07:18.205 --> 00:07:19.565
<v Speaker 1>which is a fantastic

00:07:19.565 --> 00:07:21.885
<v Speaker 1>achievement from the team. And I do want

00:07:21.885 --> 00:07:24.365
<v Speaker 1>to thank the community for this. We cannot

00:07:24.365 --> 00:07:26.750
<v Speaker 1>be at this pace and at this level

00:07:26.750 --> 00:07:28.750
<v Speaker 1>of, GitHub stargazers

00:07:28.750 --> 00:07:31.390
<v Speaker 1>without the amazing cloud native ecosystem and the

00:07:31.390 --> 00:07:33.390
<v Speaker 1>community that we're all within.

00:07:34.350 --> 00:07:36.270
<v Speaker 1>We also have 250,000

00:07:36.270 --> 00:07:38.910
<v Speaker 1>users that are using the the tool itself,

00:07:39.135 --> 00:07:40.975
<v Speaker 1>and we have roughly 80,000

00:07:40.975 --> 00:07:42.495
<v Speaker 1>people using it daily.

00:07:43.215 --> 00:07:45.855
<v Speaker 1>And we've seen over a 60,000

00:07:45.855 --> 00:07:48.415
<v Speaker 1>different clusters in the last thirty days, and

00:07:48.415 --> 00:07:50.255
<v Speaker 1>we always have some telemetry to be able

00:07:50.255 --> 00:07:52.575
<v Speaker 1>to tell us, what type of clusters people

00:07:52.575 --> 00:07:53.055
<v Speaker 1>are using.

00:07:55.590 --> 00:07:56.150
<v Speaker 1>So

00:07:56.629 --> 00:07:58.070
<v Speaker 1>before moving on,

00:07:58.310 --> 00:08:00.310
<v Speaker 1>into the demo itself, where you are going

00:08:00.310 --> 00:08:01.909
<v Speaker 1>to take a look at the features at

00:08:01.909 --> 00:08:03.590
<v Speaker 1>a glance, I'm going to talk to these

00:08:03.590 --> 00:08:06.150
<v Speaker 1>slides. I do want to mention that these

00:08:06.150 --> 00:08:08.845
<v Speaker 1>are just some of the features that we

00:08:08.845 --> 00:08:11.324
<v Speaker 1>will be presenting in the slide deck itself,

00:08:11.405 --> 00:08:13.085
<v Speaker 1>but we'll be taking a look at many

00:08:13.085 --> 00:08:16.525
<v Speaker 1>different things that, you can do within Lens

00:08:16.525 --> 00:08:19.324
<v Speaker 1>once you have that desktop application downloaded and

00:08:19.324 --> 00:08:20.925
<v Speaker 1>installed on your operating system.

00:08:24.430 --> 00:08:27.229
<v Speaker 1>Excellent. So the first one is a unified

00:08:27.229 --> 00:08:28.110
<v Speaker 1>catalog.

00:08:28.110 --> 00:08:30.349
<v Speaker 1>The unified catalog should be thought of as

00:08:30.349 --> 00:08:32.350
<v Speaker 1>a cloud native directory, at least that's what

00:08:32.350 --> 00:08:33.870
<v Speaker 1>I like to think of it as, where

00:08:33.870 --> 00:08:36.350
<v Speaker 1>you can bring your clusters, your services, your

00:08:36.350 --> 00:08:39.044
<v Speaker 1>workloads, tools that you may be using in

00:08:39.044 --> 00:08:40.565
<v Speaker 1>one beautiful place,

00:08:40.804 --> 00:08:43.765
<v Speaker 1>which makes it a directory. Users of Lens

00:08:43.765 --> 00:08:44.725
<v Speaker 1>can actually

00:08:45.125 --> 00:08:48.405
<v Speaker 1>very easily filter between these different resources

00:08:48.725 --> 00:08:52.170
<v Speaker 1>and, assign labels to these resources to really

00:08:52.170 --> 00:08:55.770
<v Speaker 1>easily recall what type of resource that particular

00:08:55.770 --> 00:08:58.490
<v Speaker 1>asset may be, whether it's a Kubernetes cluster

00:08:58.490 --> 00:09:00.890
<v Speaker 1>or a new Lens space or a web

00:09:00.890 --> 00:09:01.530
<v Speaker 1>link,

00:09:01.850 --> 00:09:03.690
<v Speaker 1>and so forth. And we'll touch on some

00:09:03.690 --> 00:09:06.090
<v Speaker 1>of these things actually in the demo itself.

00:09:06.595 --> 00:09:08.435
<v Speaker 1>So that's the catalog. I think of it

00:09:08.435 --> 00:09:10.275
<v Speaker 1>as a cloud native directory.

00:09:12.995 --> 00:09:16.035
<v Speaker 1>The next thing are two very useful things

00:09:16.035 --> 00:09:17.715
<v Speaker 1>to improve efficiency

00:09:17.875 --> 00:09:20.995
<v Speaker 1>when working with Lens and Kubernetes,

00:09:20.995 --> 00:09:23.570
<v Speaker 1>of course. So the first is the hotbar,

00:09:23.570 --> 00:09:24.770
<v Speaker 1>which is going to be on the left

00:09:24.770 --> 00:09:27.250
<v Speaker 1>hand side of the Lens desktop application,

00:09:27.330 --> 00:09:28.930
<v Speaker 1>and this should be thought of as, like,

00:09:28.930 --> 00:09:31.890
<v Speaker 1>the main navigation of Lens. And what I

00:09:31.890 --> 00:09:33.890
<v Speaker 1>use the hotbar for is to really create

00:09:33.890 --> 00:09:35.490
<v Speaker 1>specific workflows

00:09:35.490 --> 00:09:38.285
<v Speaker 1>within my environment within Lens. I can have

00:09:38.285 --> 00:09:40.445
<v Speaker 1>different spaces, and spaces are,

00:09:40.925 --> 00:09:43.485
<v Speaker 1>collaborative spaces where you can add Kubernetes clusters

00:09:43.485 --> 00:09:45.325
<v Speaker 1>to and share that with your team. Talk

00:09:45.325 --> 00:09:47.165
<v Speaker 1>about that more in a second, where I

00:09:47.165 --> 00:09:49.485
<v Speaker 1>can add my clusters to the hotbar itself.

00:09:49.800 --> 00:09:52.279
<v Speaker 1>So I can easily navigate from cluster to

00:09:52.279 --> 00:09:55.320
<v Speaker 1>cluster regardless of the Kubernetes distro.

00:09:56.440 --> 00:09:57.000
<v Speaker 1>And,

00:09:57.320 --> 00:10:00.200
<v Speaker 1>we have the command palette, which is, another

00:10:00.200 --> 00:10:02.680
<v Speaker 1>great resource to work much more efficiently within

00:10:02.680 --> 00:10:05.415
<v Speaker 1>Lens. The command palette should be thought of

00:10:05.415 --> 00:10:08.535
<v Speaker 1>as or it is keyboard shortcuts to perform

00:10:08.535 --> 00:10:11.655
<v Speaker 1>specific actions. Right? So for example, adding a

00:10:11.655 --> 00:10:12.935
<v Speaker 1>cluster to Lens,

00:10:14.135 --> 00:10:17.130
<v Speaker 1>viewing viewing a specific pod when you're within

00:10:17.130 --> 00:10:19.130
<v Speaker 1>a cluster, you can use a quick shortcut

00:10:19.130 --> 00:10:21.529
<v Speaker 1>to be able to actually access this particular

00:10:21.529 --> 00:10:23.370
<v Speaker 1>item or feature or whatever you may be

00:10:23.370 --> 00:10:26.410
<v Speaker 1>doing very, very quickly. So these are two

00:10:26.410 --> 00:10:29.290
<v Speaker 1>things that help our users work much more

00:10:29.290 --> 00:10:31.050
<v Speaker 1>efficiently when leveraging Kubernetes.

00:10:31.215 --> 00:10:33.775
<v Speaker 1>The hotbar, and it's the command palette.

00:10:36.735 --> 00:10:38.575
<v Speaker 1>So this is actually one of my favorite

00:10:38.575 --> 00:10:40.255
<v Speaker 1>features within Lens, and it's,

00:10:40.975 --> 00:10:43.135
<v Speaker 1>I call it the pre built in Prometheus.

00:10:43.890 --> 00:10:44.770
<v Speaker 1>Lens

00:10:44.770 --> 00:10:45.490
<v Speaker 1>automagically

00:10:45.730 --> 00:10:47.330
<v Speaker 1>yeah. I used automagically.

00:10:47.330 --> 00:10:49.650
<v Speaker 1>It's new word I'm using, David. So

00:10:50.290 --> 00:10:53.090
<v Speaker 1>so Lens automagically,

00:10:53.410 --> 00:10:55.890
<v Speaker 1>allows you to leverage a prebuilt in Prometheus

00:10:55.890 --> 00:10:58.450
<v Speaker 1>directly into your cluster, meaning I can very

00:10:58.450 --> 00:11:01.645
<v Speaker 1>easily see how my cluster is performing in

00:11:01.645 --> 00:11:04.605
<v Speaker 1>the last hour from the CPU to the

00:11:04.605 --> 00:11:05.325
<v Speaker 1>memory,

00:11:05.485 --> 00:11:07.565
<v Speaker 1>the disk, and so forth. And I can

00:11:07.565 --> 00:11:09.245
<v Speaker 1>also see the total nodes,

00:11:09.565 --> 00:11:12.445
<v Speaker 1>the total capacity, the actual usage that I'm

00:11:12.445 --> 00:11:14.589
<v Speaker 1>using, and that, again, is all in the

00:11:14.589 --> 00:11:16.990
<v Speaker 1>last hour, and it's a very granular view.

00:11:16.990 --> 00:11:18.350
<v Speaker 1>So we'll take a look at this,

00:11:19.550 --> 00:11:20.830
<v Speaker 1>in just a bit.

00:11:22.510 --> 00:11:25.550
<v Speaker 1>The next thing, and this is actually probably

00:11:25.550 --> 00:11:28.285
<v Speaker 1>my favorite feature within Lens because I find

00:11:28.285 --> 00:11:30.365
<v Speaker 1>it to be the most useful, and this

00:11:30.365 --> 00:11:31.885
<v Speaker 1>is the smart terminal.

00:11:32.205 --> 00:11:35.005
<v Speaker 1>The smart terminal is is quite important,

00:11:35.325 --> 00:11:37.565
<v Speaker 1>to to our users and myself. And the

00:11:37.565 --> 00:11:39.885
<v Speaker 1>reason for this is within Lens, you may

00:11:39.885 --> 00:11:40.925
<v Speaker 1>be working with

00:11:41.245 --> 00:11:43.200
<v Speaker 1>many different clusters.

00:11:43.360 --> 00:11:45.120
<v Speaker 1>Right? So I could be working with five,

00:11:45.120 --> 00:11:48.240
<v Speaker 1>ten, 15, even 30 different clusters and more.

00:11:48.320 --> 00:11:50.399
<v Speaker 1>And I need to be able to always

00:11:50.399 --> 00:11:53.680
<v Speaker 1>match to the correct Kubernetes cluster endpoint. Right?

00:11:53.680 --> 00:11:56.525
<v Speaker 1>That the API endpoint of that cluster. So

00:11:56.525 --> 00:11:58.845
<v Speaker 1>when I switch from cluster to cluster,

00:11:58.925 --> 00:12:00.525
<v Speaker 1>Lens automatically,

00:12:01.165 --> 00:12:04.365
<v Speaker 1>matches to the correct cluster API endpoint,

00:12:04.445 --> 00:12:06.205
<v Speaker 1>which is so important. Right? Because if I'm

00:12:06.205 --> 00:12:07.805
<v Speaker 1>switching from cluster to cluster,

00:12:08.205 --> 00:12:10.845
<v Speaker 1>I know that I'm connected to that correct

00:12:10.845 --> 00:12:13.980
<v Speaker 1>Kubernetes endpoint when working with that cluster. So

00:12:13.980 --> 00:12:16.540
<v Speaker 1>this is extremely useful when working with multiple

00:12:16.540 --> 00:12:19.820
<v Speaker 1>Kubernetes clusters, maybe a production cluster, development cluster,

00:12:19.820 --> 00:12:21.420
<v Speaker 1>or even different distros.

00:12:21.580 --> 00:12:23.100
<v Speaker 1>You can be assured

00:12:23.100 --> 00:12:25.580
<v Speaker 1>that you are always in the correct

00:12:26.285 --> 00:12:28.765
<v Speaker 1>cluster endpoint, right, that you're always matching to

00:12:28.765 --> 00:12:31.005
<v Speaker 1>that correct cluster API version,

00:12:31.165 --> 00:12:33.885
<v Speaker 1>which is extremely important. Another thing I wanna

00:12:33.885 --> 00:12:36.605
<v Speaker 1>mention is that Lens always

00:12:36.605 --> 00:12:39.325
<v Speaker 1>automatically connects to the correct kubectl

00:12:39.325 --> 00:12:40.125
<v Speaker 1>and helm

00:12:40.630 --> 00:12:42.870
<v Speaker 1>sticking to that correct version,

00:12:43.269 --> 00:12:45.750
<v Speaker 1>within the terminal itself, which is a fantastic

00:12:45.750 --> 00:12:47.670
<v Speaker 1>feature as well. And we'll take a look

00:12:47.670 --> 00:12:48.949
<v Speaker 1>at these things in the demo.

00:12:52.385 --> 00:12:53.745
<v Speaker 1>So the next one,

00:12:54.145 --> 00:12:56.464
<v Speaker 1>another one of my favorite features probably, maybe

00:12:56.464 --> 00:12:58.785
<v Speaker 1>third three or four down the list, when

00:12:58.785 --> 00:13:00.705
<v Speaker 1>it comes to my favorite, but, this is

00:13:00.705 --> 00:13:03.505
<v Speaker 1>being able to deploy Helm charts very easily.

00:13:03.665 --> 00:13:05.185
<v Speaker 1>So Lens has

00:13:05.600 --> 00:13:09.120
<v Speaker 1>the ability to view thousands of publicly available

00:13:09.120 --> 00:13:10.640
<v Speaker 1>made Helm charts,

00:13:10.880 --> 00:13:12.480
<v Speaker 1>and you can manage these directly in your

00:13:12.480 --> 00:13:15.040
<v Speaker 1>cluster. Meaning, I can deploy a Helm chart

00:13:15.040 --> 00:13:17.280
<v Speaker 1>directly to my cluster in a matter of

00:13:17.280 --> 00:13:17.760
<v Speaker 1>seconds,

00:13:18.125 --> 00:13:18.845
<v Speaker 1>maybe

00:13:19.005 --> 00:13:20.685
<v Speaker 1>yeah. Or in in the matter of seconds

00:13:20.685 --> 00:13:22.605
<v Speaker 1>with one or two different clicks.

00:13:23.084 --> 00:13:25.885
<v Speaker 1>So this is extremely useful, when viewing different

00:13:25.885 --> 00:13:27.644
<v Speaker 1>Helm charts or trying to deploy them directly

00:13:27.644 --> 00:13:29.885
<v Speaker 1>onto your cluster, and we will actually be

00:13:29.885 --> 00:13:31.325
<v Speaker 1>doing that today as well. We'll take a

00:13:31.325 --> 00:13:32.980
<v Speaker 1>look at some Helm charts, the Helm charts

00:13:32.980 --> 00:13:34.100
<v Speaker 1>that are available.

00:13:34.180 --> 00:13:36.580
<v Speaker 1>We'll, we'll install a Helm chart directly to

00:13:36.580 --> 00:13:37.460
<v Speaker 1>our cluster.

00:13:37.620 --> 00:13:39.700
<v Speaker 1>And, depending on the Helm chart itself, we

00:13:39.700 --> 00:13:41.300
<v Speaker 1>may even port forward into the application.

00:13:45.875 --> 00:13:47.075
<v Speaker 1>Extensions.

00:13:47.154 --> 00:13:49.315
<v Speaker 1>So this is my second favorite feature,

00:13:49.795 --> 00:13:53.555
<v Speaker 1>and there's a couple reasons why. So extensions

00:13:53.555 --> 00:13:54.195
<v Speaker 1>are,

00:13:54.995 --> 00:13:57.555
<v Speaker 1>plugins built directly on top of Lens.

00:13:57.635 --> 00:13:59.635
<v Speaker 1>And the reason why this is so valuable

00:13:59.635 --> 00:14:02.060
<v Speaker 1>is, let's say, for example, that,

00:14:03.180 --> 00:14:05.100
<v Speaker 1>I am a startup within the cloud native

00:14:05.100 --> 00:14:06.060
<v Speaker 1>ecosystem,

00:14:06.060 --> 00:14:07.100
<v Speaker 1>and I

00:14:07.339 --> 00:14:10.220
<v Speaker 1>have built a product tool or service that

00:14:10.220 --> 00:14:12.459
<v Speaker 1>is able to tell me vulnerabilities

00:14:12.459 --> 00:14:14.060
<v Speaker 1>within a Kubernetes cluster.

00:14:15.415 --> 00:14:18.375
<v Speaker 1>So that startup organization and so forth can

00:14:18.375 --> 00:14:20.295
<v Speaker 1>build a plug in on top of Lens

00:14:21.254 --> 00:14:23.815
<v Speaker 1>where they can leverage our users, or our

00:14:23.815 --> 00:14:25.574
<v Speaker 1>users can leverage that technology

00:14:25.654 --> 00:14:28.134
<v Speaker 1>to be able to very easily understand the

00:14:28.134 --> 00:14:29.014
<v Speaker 1>vulnerabilities

00:14:29.014 --> 00:14:30.960
<v Speaker 1>within that cluster itself.

00:14:31.280 --> 00:14:33.760
<v Speaker 1>Right? So it's twofold. One, our users get

00:14:33.760 --> 00:14:35.440
<v Speaker 1>to leverage new technologies,

00:14:35.760 --> 00:14:38.560
<v Speaker 1>and two, our partners and the community and

00:14:38.560 --> 00:14:39.920
<v Speaker 1>the the ecosystem

00:14:39.920 --> 00:14:42.480
<v Speaker 1>can leverage our users to get up and

00:14:42.480 --> 00:14:45.120
<v Speaker 1>running very quickly if their product service open

00:14:45.120 --> 00:14:48.475
<v Speaker 1>source technology is brand new. Right? So currently,

00:14:48.475 --> 00:14:50.955
<v Speaker 1>we have over a hundred different extensions built

00:14:50.955 --> 00:14:52.955
<v Speaker 1>on top of Lens. Many of these I

00:14:52.955 --> 00:14:55.595
<v Speaker 1>do wanna mention are not publicly available,

00:14:55.675 --> 00:14:57.595
<v Speaker 1>but we do have 10 or 15 different

00:14:57.595 --> 00:14:59.755
<v Speaker 1>publicly available extensions made

00:15:00.209 --> 00:15:02.610
<v Speaker 1>for the community. Some are built by Team

00:15:02.610 --> 00:15:04.930
<v Speaker 1>Lens, and others are built by awesome,

00:15:05.170 --> 00:15:06.689
<v Speaker 1>partner technologies

00:15:06.689 --> 00:15:09.490
<v Speaker 1>and companies like Aqua Security,

00:15:09.730 --> 00:15:10.529
<v Speaker 1>Kubernetes,

00:15:12.225 --> 00:15:13.185
<v Speaker 1>QCost,

00:15:13.185 --> 00:15:15.105
<v Speaker 1>and so forth. So we'll take a look

00:15:15.105 --> 00:15:17.185
<v Speaker 1>at some of these extensions as well towards

00:15:17.185 --> 00:15:18.945
<v Speaker 1>the end of the hands on demo.

00:15:21.665 --> 00:15:22.865
<v Speaker 1>And lastly,

00:15:22.945 --> 00:15:25.745
<v Speaker 1>spaces. I touched on this just slightly when

00:15:25.745 --> 00:15:27.185
<v Speaker 1>we were taking a look at the unified

00:15:27.185 --> 00:15:27.745
<v Speaker 1>catalog,

00:15:28.200 --> 00:15:30.920
<v Speaker 1>and spaces should be thought of as a

00:15:30.920 --> 00:15:34.600
<v Speaker 1>centralized cloud based offering on top of Lens.

00:15:35.080 --> 00:15:37.400
<v Speaker 1>Really, what it allows our users to do

00:15:37.400 --> 00:15:38.920
<v Speaker 1>is build collaborative

00:15:38.920 --> 00:15:39.800
<v Speaker 1>spaces

00:15:39.880 --> 00:15:42.840
<v Speaker 1>where you can add specific Kubernetes clusters to

00:15:42.840 --> 00:15:43.480
<v Speaker 1>that space,

00:15:43.935 --> 00:15:46.335
<v Speaker 1>and then you can invite a teammate member

00:15:46.335 --> 00:15:47.695
<v Speaker 1>or a colleague

00:15:48.015 --> 00:15:50.255
<v Speaker 1>to that space, and they will be able

00:15:50.255 --> 00:15:51.455
<v Speaker 1>to have specific,

00:15:52.175 --> 00:15:55.215
<v Speaker 1>access to whatever's within that space. Currently, it

00:15:55.215 --> 00:15:56.015
<v Speaker 1>only works for,

00:15:56.950 --> 00:15:58.870
<v Speaker 1>excuse me, Kubernetes clusters,

00:15:58.870 --> 00:16:00.790
<v Speaker 1>but we do have some exciting different things

00:16:00.790 --> 00:16:02.150
<v Speaker 1>we will be releasing,

00:16:02.470 --> 00:16:04.310
<v Speaker 1>in the road map and in the future.

00:16:04.470 --> 00:16:06.630
<v Speaker 1>So, that's important to keep in mind. But

00:16:06.630 --> 00:16:07.750
<v Speaker 1>long story short,

00:16:08.070 --> 00:16:12.095
<v Speaker 1>Lens Spaces allows Kubernetes cluster admins to share

00:16:12.095 --> 00:16:15.135
<v Speaker 1>access to their Kubernetes cluster securely.

00:16:17.134 --> 00:16:19.214
<v Speaker 1>Well, excellent. We took a look at many

00:16:19.214 --> 00:16:22.175
<v Speaker 1>different features already from the unified catalog,

00:16:22.254 --> 00:16:23.375
<v Speaker 1>the hotbar,

00:16:23.375 --> 00:16:26.574
<v Speaker 1>the command palette, the pre built in Prometheus,

00:16:26.960 --> 00:16:28.880
<v Speaker 1>deploying helm charts,

00:16:29.360 --> 00:16:30.320
<v Speaker 1>extensions,

00:16:30.320 --> 00:16:32.080
<v Speaker 1>and of course, Lens spaces.

00:16:32.400 --> 00:16:34.160
<v Speaker 1>From here, I think we're actually going to

00:16:34.160 --> 00:16:37.120
<v Speaker 1>transition directly into the demo itself, where we'll

00:16:37.120 --> 00:16:38.400
<v Speaker 1>take a look at Lens,

00:16:38.800 --> 00:16:40.160
<v Speaker 1>how to get started,

00:16:40.160 --> 00:16:42.400
<v Speaker 1>some of the cool features in action.

00:16:42.855 --> 00:16:44.615
<v Speaker 1>And then if we have time towards the

00:16:44.615 --> 00:16:48.615
<v Speaker 1>end, we actually will share a Kubernetes cluster

00:16:48.615 --> 00:16:50.214
<v Speaker 1>with David today,

00:16:51.334 --> 00:16:53.334
<v Speaker 1>and it should be an exciting session. So

00:16:53.334 --> 00:16:55.095
<v Speaker 1>once again, I wanna thank you, David, for

00:16:55.095 --> 00:16:57.255
<v Speaker 1>having me and the audience with us today.

00:16:57.740 --> 00:17:00.459
<v Speaker 1>I'm looking forward to this to this demo,

00:17:00.459 --> 00:17:02.940
<v Speaker 1>and, hopefully, nothing breaks, you know, in in

00:17:02.940 --> 00:17:04.859
<v Speaker 1>live sessions that can happen. But I have

00:17:04.859 --> 00:17:07.260
<v Speaker 1>a feeling I have a feeling it won't

00:17:07.260 --> 00:17:10.220
<v Speaker 1>happen to us today. So without further ado,

00:17:10.220 --> 00:17:12.220
<v Speaker 1>let's jump directly into the hands on demo

00:17:12.424 --> 00:17:14.345
<v Speaker 1>where we'll be taking a look at Lens,

00:17:14.345 --> 00:17:16.184
<v Speaker 1>the Kubernetes IDE.

00:17:17.145 --> 00:17:19.625
<v Speaker 0>I don't wanna worry you, Edward, but, I

00:17:19.625 --> 00:17:21.224
<v Speaker 0>mean, I just look at clusters and they

00:17:21.224 --> 00:17:23.464
<v Speaker 0>break. I'm just I'm just saying.

00:17:24.825 --> 00:17:27.090
<v Speaker 1>Yes. Yes. And and they do break and

00:17:27.090 --> 00:17:28.770
<v Speaker 1>they do break, and let's hope nothing breaks

00:17:28.770 --> 00:17:30.370
<v Speaker 1>now. I've I've been taking a look at

00:17:30.370 --> 00:17:31.650
<v Speaker 1>some of my clusters.

00:17:31.890 --> 00:17:32.450
<v Speaker 1>So,

00:17:32.930 --> 00:17:35.490
<v Speaker 1>everyone, this is Lens. Whoops.

00:17:35.810 --> 00:17:37.810
<v Speaker 1>This is Lens here. And, David, you still

00:17:37.810 --> 00:17:39.650
<v Speaker 1>can see my screen. Correct? We can. Yeah.

00:17:39.970 --> 00:17:40.450
<v Speaker 1>Excellent.

00:17:40.945 --> 00:17:43.105
<v Speaker 1>So this is Lens. When you're first brought

00:17:43.105 --> 00:17:45.985
<v Speaker 1>into Lens, you're actually brought into that catalog

00:17:45.985 --> 00:17:48.545
<v Speaker 1>screen that that we talked about about that

00:17:48.545 --> 00:17:51.025
<v Speaker 1>cloud native directory where you can bring different

00:17:51.345 --> 00:17:52.785
<v Speaker 1>tools, clusters,

00:17:52.785 --> 00:17:54.625
<v Speaker 1>web links, spaces to

00:17:55.090 --> 00:17:57.650
<v Speaker 1>to be able to very easily filter and

00:17:57.650 --> 00:18:00.130
<v Speaker 1>manage all your different cloud native resources.

00:18:00.370 --> 00:18:02.530
<v Speaker 1>Currently, there's only a couple of things supported,

00:18:02.530 --> 00:18:04.210
<v Speaker 1>and I do wanna mention that the catalog

00:18:04.210 --> 00:18:05.170
<v Speaker 1>was released,

00:18:05.570 --> 00:18:06.770
<v Speaker 1>back in June of this year.

00:18:07.915 --> 00:18:09.755
<v Speaker 1>But we do plan on releasing

00:18:09.915 --> 00:18:12.235
<v Speaker 1>many other resources that can fit within the

00:18:12.235 --> 00:18:14.315
<v Speaker 1>catalog, like specific automations

00:18:14.315 --> 00:18:15.275
<v Speaker 1>and tools,

00:18:15.515 --> 00:18:17.195
<v Speaker 1>that our users can leverage.

00:18:17.435 --> 00:18:19.195
<v Speaker 1>Right now, we have our spaces.

00:18:20.490 --> 00:18:23.290
<v Speaker 1>And, again, that's that centralized cloud based offering

00:18:23.290 --> 00:18:25.450
<v Speaker 1>that allows us to share access to Kubernetes

00:18:25.450 --> 00:18:26.649
<v Speaker 1>cluster securely.

00:18:26.970 --> 00:18:29.210
<v Speaker 1>We have our web links within our within

00:18:29.210 --> 00:18:31.929
<v Speaker 1>our catalog as well. Anything can be added

00:18:31.929 --> 00:18:33.450
<v Speaker 1>here. So one of the things I like

00:18:33.450 --> 00:18:35.395
<v Speaker 1>to do since I'm I'm not the most

00:18:35.395 --> 00:18:37.715
<v Speaker 1>advanced Kubernetes user, I'm I'm not a novice

00:18:37.715 --> 00:18:38.355
<v Speaker 1>either,

00:18:38.515 --> 00:18:40.195
<v Speaker 1>but, I like to have, like, a Qt

00:18:40.195 --> 00:18:41.475
<v Speaker 1>CTL cheat sheet.

00:18:42.115 --> 00:18:42.755
<v Speaker 1>So,

00:18:43.235 --> 00:18:45.475
<v Speaker 1>you guys can see that here. And just

00:18:45.475 --> 00:18:47.475
<v Speaker 1>since we're talking about it real quick, if

00:18:47.475 --> 00:18:49.075
<v Speaker 1>I click this icon here in the hot

00:18:49.075 --> 00:18:51.470
<v Speaker 1>bar, I'm immediately brought up to this Kubernetes

00:18:51.470 --> 00:18:52.350
<v Speaker 1>cheat sheet,

00:18:52.990 --> 00:18:53.629
<v Speaker 1>right,

00:18:53.950 --> 00:18:56.110
<v Speaker 1>which is which is quite powerful. And this

00:18:56.110 --> 00:18:58.110
<v Speaker 1>one's built by Mirantis, but there's many others

00:18:58.110 --> 00:19:00.990
<v Speaker 1>that I leverage as well, within the ecosystem.

00:19:00.990 --> 00:19:03.870
<v Speaker 1>And there's some fantastic

00:19:02.445 --> 00:19:05.164
<v Speaker 1>ones built by many different companies and developers

00:19:05.164 --> 00:19:06.204
<v Speaker 1>and so forth.

00:19:06.365 --> 00:19:08.284
<v Speaker 1>So, I like to utilize a cheat sheet

00:19:08.284 --> 00:19:10.524
<v Speaker 1>depending on the activity that I'm doing.

00:19:10.845 --> 00:19:12.924
<v Speaker 1>And again, those are the web links.

00:19:13.325 --> 00:19:15.485
<v Speaker 1>Then we have our clusters within our catalog

00:19:15.485 --> 00:19:17.980
<v Speaker 1>as well. All of these different clusters,

00:19:18.060 --> 00:19:20.140
<v Speaker 1>and we can see within the source

00:19:21.340 --> 00:19:22.220
<v Speaker 1>column,

00:19:22.300 --> 00:19:23.980
<v Speaker 1>we can see that some of these clusters

00:19:23.980 --> 00:19:26.540
<v Speaker 1>are local, and some are attached to Lendspaces.

00:19:26.540 --> 00:19:28.460
<v Speaker 1>We'll talk about the clusters that are attached

00:19:28.460 --> 00:19:29.580
<v Speaker 1>to Lendspaces

00:19:29.580 --> 00:19:32.325
<v Speaker 1>a little bit more in just a moment.

00:19:33.285 --> 00:19:35.365
<v Speaker 1>From here, what I really want to do

00:19:35.365 --> 00:19:38.645
<v Speaker 1>is actually begin taking a look at the

00:19:38.645 --> 00:19:42.165
<v Speaker 1>true functionality behind Lens. The catalog is fantastic

00:19:42.165 --> 00:19:44.085
<v Speaker 1>when trying to access different resources,

00:19:44.510 --> 00:19:47.470
<v Speaker 1>but the true power behind Lens is the

00:19:47.470 --> 00:19:50.590
<v Speaker 1>full situational awareness that you get when working

00:19:50.590 --> 00:19:52.190
<v Speaker 1>with Kubernetes clusters.

00:19:52.270 --> 00:19:53.790
<v Speaker 1>So on the left hand side, we can

00:19:53.790 --> 00:19:55.790
<v Speaker 1>see my hotbar here. I have a k

00:19:55.790 --> 00:19:56.590
<v Speaker 1>zeros cluster.

00:19:56.975 --> 00:19:58.815
<v Speaker 1>We don't see any Prometheus here as of

00:19:58.815 --> 00:20:00.575
<v Speaker 1>right now, and the reason for this is

00:20:00.575 --> 00:20:02.815
<v Speaker 1>I have not checked the box to have

00:20:02.815 --> 00:20:05.455
<v Speaker 1>the prebuilt in Prometheus launch on this cluster,

00:20:05.455 --> 00:20:07.455
<v Speaker 1>but we we will do this. Then I

00:20:07.455 --> 00:20:08.735
<v Speaker 1>have my mini cube cluster,

00:20:09.679 --> 00:20:11.520
<v Speaker 1>right, where that's when you can actually see

00:20:11.520 --> 00:20:13.119
<v Speaker 1>the prebuilt in Prometheus.

00:20:13.200 --> 00:20:15.200
<v Speaker 1>We can see how it's performing in the

00:20:15.200 --> 00:20:17.999
<v Speaker 1>last hour from the CPU to the memory,

00:20:18.400 --> 00:20:21.200
<v Speaker 1>the total capacity, the number of pods. And

00:20:21.200 --> 00:20:23.225
<v Speaker 1>here at the bottom of this overview screen,

00:20:23.225 --> 00:20:25.225
<v Speaker 1>we can always see real time events that

00:20:25.225 --> 00:20:26.905
<v Speaker 1>are pushed to us as a user.

00:20:27.065 --> 00:20:28.905
<v Speaker 1>Right? So we can see if there's any,

00:20:29.225 --> 00:20:31.545
<v Speaker 1>problems, if we need to debug an object

00:20:31.545 --> 00:20:34.265
<v Speaker 1>and so forth right here in this spot.

00:20:34.665 --> 00:20:37.625
<v Speaker 1>Then we also have our GKE cluster. Again,

00:20:37.625 --> 00:20:38.585
<v Speaker 1>it's missing

00:20:38.770 --> 00:20:40.530
<v Speaker 1>the Prometheus configuration,

00:20:40.530 --> 00:20:43.250
<v Speaker 1>which is absolutely fine. We will actually install

00:20:43.250 --> 00:20:44.929
<v Speaker 1>it and push it directly onto our cluster

00:20:44.929 --> 00:20:45.970
<v Speaker 1>in just a moment.

00:20:46.610 --> 00:20:49.330
<v Speaker 1>And then here, I do wanna mention that

00:20:49.330 --> 00:20:52.765
<v Speaker 1>this is a demo cluster built by some

00:20:52.765 --> 00:20:55.165
<v Speaker 1>of our, team members here at MERANTIS, and

00:20:55.165 --> 00:20:57.485
<v Speaker 1>this cluster is shared with me. So this

00:20:57.485 --> 00:20:59.325
<v Speaker 1>is not my cluster. I did not add

00:20:59.325 --> 00:21:00.605
<v Speaker 1>it to Lens itself.

00:21:01.005 --> 00:21:03.245
<v Speaker 1>This is just a cluster that's shared with

00:21:03.245 --> 00:21:06.045
<v Speaker 1>me through Lens Spaces, which is quite, quite

00:21:06.045 --> 00:21:06.365
<v Speaker 1>cool.

00:21:07.480 --> 00:21:09.559
<v Speaker 1>That being said, let's actually take a look

00:21:09.559 --> 00:21:11.240
<v Speaker 1>at how you can add a cluster to

00:21:11.240 --> 00:21:13.720
<v Speaker 1>Lens. So if you navigate to your catalog,

00:21:13.720 --> 00:21:14.919
<v Speaker 1>click clusters,

00:21:14.919 --> 00:21:17.079
<v Speaker 1>there will be a plus icon here.

00:21:17.320 --> 00:21:18.919
<v Speaker 1>In this plus icon,

00:21:19.159 --> 00:21:21.455
<v Speaker 1>there's two ways to add a cluster. Only

00:21:21.455 --> 00:21:23.055
<v Speaker 1>really one way for the user to do

00:21:23.055 --> 00:21:25.775
<v Speaker 1>it, but Lens actually automatically searches

00:21:25.775 --> 00:21:28.815
<v Speaker 1>for a QConfig file on your operating system,

00:21:28.815 --> 00:21:30.975
<v Speaker 1>and it will add that cluster directly to

00:21:30.975 --> 00:21:33.295
<v Speaker 1>Lens without you having to do anything once

00:21:33.295 --> 00:21:34.815
<v Speaker 1>you hit that plus icon, of course.

00:21:35.860 --> 00:21:38.900
<v Speaker 1>Or you can copy the q config file

00:21:38.900 --> 00:21:40.419
<v Speaker 1>directly into this,

00:21:41.059 --> 00:21:43.059
<v Speaker 1>let's call it a terminal, and you can

00:21:43.059 --> 00:21:44.179
<v Speaker 1>add the clusters.

00:21:44.580 --> 00:21:45.940
<v Speaker 1>So those are the two ways to add

00:21:45.940 --> 00:21:47.299
<v Speaker 1>clusters directly to Lens.

00:21:48.465 --> 00:21:51.265
<v Speaker 1>Going back to my k zeros cluster, let's

00:21:51.265 --> 00:21:53.105
<v Speaker 1>actually jump into the settings here.

00:21:53.505 --> 00:21:55.424
<v Speaker 1>Right clicking on the hotbar icon will bring

00:21:55.424 --> 00:21:56.544
<v Speaker 1>us to our settings,

00:21:57.265 --> 00:21:58.624
<v Speaker 1>and we have several different,

00:21:58.865 --> 00:22:01.025
<v Speaker 1>functions that we can perform. So the first

00:22:01.025 --> 00:22:02.225
<v Speaker 1>thing is we can always give it a

00:22:02.225 --> 00:22:05.390
<v Speaker 1>name, which for this demonstration, I'm just calling

00:22:05.390 --> 00:22:06.830
<v Speaker 1>it what it is, which is a k

00:22:06.830 --> 00:22:08.030
<v Speaker 1>zero s cluster.

00:22:08.350 --> 00:22:09.950
<v Speaker 1>And we can give it an icon. And

00:22:09.950 --> 00:22:11.310
<v Speaker 1>the reason why this is awesome, and we

00:22:11.310 --> 00:22:12.830
<v Speaker 1>touched on this a little bit, in the

00:22:12.830 --> 00:22:16.190
<v Speaker 1>slide deck, but it's that efficiency aspect. Right?

00:22:16.190 --> 00:22:18.190
<v Speaker 1>Being able to navigate from cluster to cluster

00:22:18.190 --> 00:22:21.125
<v Speaker 1>very easily just by an icon. So as

00:22:21.125 --> 00:22:22.165
<v Speaker 1>we can see, we can see this is

00:22:22.165 --> 00:22:23.365
<v Speaker 1>a k zero. We can see this is

00:22:23.365 --> 00:22:25.685
<v Speaker 1>the Mini Cube logo, and here's a GKD

00:22:25.685 --> 00:22:28.565
<v Speaker 1>cluster as well. Going back to our settings,

00:22:29.445 --> 00:22:31.045
<v Speaker 1>we are actually gonna drop down to the

00:22:31.045 --> 00:22:31.765
<v Speaker 1>Lens metrics,

00:22:32.509 --> 00:22:35.149
<v Speaker 1>and we're gonna add the metrics directly to

00:22:35.149 --> 00:22:38.029
<v Speaker 1>our cluster by doggling these doggles here.

00:22:38.669 --> 00:22:39.869
<v Speaker 1>Click apply,

00:22:40.509 --> 00:22:42.750
<v Speaker 1>and this is where something may break. Let's

00:22:42.750 --> 00:22:45.149
<v Speaker 1>hope not, but, I'm I'm sure it's gonna

00:22:45.149 --> 00:22:47.309
<v Speaker 1>be fine. We have multiple different Kubernetes clusters

00:22:47.309 --> 00:22:50.565
<v Speaker 1>here already. So, even if something did happen,

00:22:50.565 --> 00:22:52.565
<v Speaker 1>which I highly doubt it will, but even

00:22:52.565 --> 00:22:54.005
<v Speaker 1>if something did, we can always switch to

00:22:54.005 --> 00:22:56.085
<v Speaker 1>a different cluster. Right? And then take a

00:22:56.085 --> 00:22:56.725
<v Speaker 1>look at,

00:22:57.365 --> 00:22:59.605
<v Speaker 1>all of the features from that cluster itself.

00:23:00.085 --> 00:23:02.005
<v Speaker 1>So let's just close this here.

00:23:03.200 --> 00:23:04.320
<v Speaker 1>Go to nodes.

00:23:04.640 --> 00:23:07.440
<v Speaker 1>Let's see if it begins to actually add

00:23:07.520 --> 00:23:10.320
<v Speaker 1>the pre built in Prometheus slowly but surely.

00:23:10.320 --> 00:23:11.920
<v Speaker 1>It may take a while to do this

00:23:11.920 --> 00:23:13.600
<v Speaker 1>since it's actually installing it.

00:23:16.255 --> 00:23:18.095
<v Speaker 1>So it did not wanna do it. Let's

00:23:18.095 --> 00:23:19.535
<v Speaker 1>see what's going on here.

00:23:22.575 --> 00:23:24.815
<v Speaker 1>Maybe if we come back to it in

00:23:24.815 --> 00:23:26.175
<v Speaker 1>just a second. Let's see.

00:23:28.130 --> 00:23:30.130
<v Speaker 1>We'll go to settings one more time. Let's

00:23:30.130 --> 00:23:31.809
<v Speaker 1>just take a look at what's happening.

00:23:32.770 --> 00:23:34.770
<v Speaker 1>We have auto detect. Yes.

00:23:35.730 --> 00:23:37.170
<v Speaker 1>And then Lensmetrics.

00:23:37.570 --> 00:23:38.930
<v Speaker 1>They're toggled. Okay.

00:23:40.215 --> 00:23:42.215
<v Speaker 1>Generally, I think this takes a couple minutes

00:23:42.215 --> 00:23:44.615
<v Speaker 1>to do, which is absolutely fine. But from

00:23:44.615 --> 00:23:47.014
<v Speaker 1>here, we'll just jump into our Minikube cluster.

00:23:47.975 --> 00:23:50.375
<v Speaker 1>Now within our Minikube cluster, we do have

00:23:50.375 --> 00:23:52.615
<v Speaker 1>that prebuilt in Prometheus directly pushed to our

00:23:52.615 --> 00:23:54.659
<v Speaker 1>cluster. And as mentioned, we can see how

00:23:54.659 --> 00:23:56.419
<v Speaker 1>it's performing in the last hour.

00:23:56.820 --> 00:23:58.820
<v Speaker 1>On the bottom, this plus icon, you can

00:23:58.820 --> 00:24:01.460
<v Speaker 1>do two very cool functions. You can open

00:24:01.460 --> 00:24:03.940
<v Speaker 1>up a terminal session, which is that smart

00:24:03.940 --> 00:24:06.980
<v Speaker 1>terminal that we mentioned already, where it automagically

00:24:06.980 --> 00:24:09.835
<v Speaker 1>matches to the correct cluster endpoint. So if

00:24:09.835 --> 00:24:11.355
<v Speaker 1>I write kubectl

00:24:11.355 --> 00:24:12.315
<v Speaker 1>git nodes,

00:24:13.755 --> 00:24:15.114
<v Speaker 1>you can see the version.

00:24:15.355 --> 00:24:15.994
<v Speaker 1>Right?

00:24:16.394 --> 00:24:17.274
<v Speaker 1>Kubectl

00:24:17.274 --> 00:24:18.154
<v Speaker 1>version.

00:24:19.355 --> 00:24:21.355
<v Speaker 1>You can see the git version. And if

00:24:21.355 --> 00:24:22.955
<v Speaker 1>I switch to my k zeros cluster,

00:24:23.430 --> 00:24:25.190
<v Speaker 1>and there's the Prometheus as we can see.

00:24:25.190 --> 00:24:26.630
<v Speaker 1>So it just took a couple minutes to

00:24:26.630 --> 00:24:27.830
<v Speaker 1>do. Right?

00:24:28.150 --> 00:24:29.750
<v Speaker 1>If we switch to my k zeros cluster,

00:24:29.750 --> 00:24:31.190
<v Speaker 1>we can see it's connecting to the correct

00:24:31.190 --> 00:24:31.990
<v Speaker 1>endpoint,

00:24:33.990 --> 00:24:35.430
<v Speaker 1>and we can see it's a different Git

00:24:35.430 --> 00:24:37.430
<v Speaker 1>version. Right? So whenever we're navigating

00:24:37.945 --> 00:24:39.304
<v Speaker 1>to a new cluster,

00:24:39.465 --> 00:24:42.745
<v Speaker 1>it's automatically doing this on its own. So

00:24:42.745 --> 00:24:45.785
<v Speaker 1>we are reducing user error here when switching

00:24:45.785 --> 00:24:47.865
<v Speaker 1>from cluster to cluster, and you can see

00:24:47.865 --> 00:24:50.185
<v Speaker 1>it's different for our GKD cluster as well.

00:24:50.400 --> 00:24:53.040
<v Speaker 1>So that's the smart terminal, and it's extremely

00:24:53.040 --> 00:24:56.000
<v Speaker 1>important to note that Lens and we'll be

00:24:56.000 --> 00:24:57.440
<v Speaker 1>taking a look at this in a moment.

00:24:57.440 --> 00:24:59.520
<v Speaker 1>But Lens is always leveraging

00:24:59.600 --> 00:25:02.320
<v Speaker 1>your role based access control from your QConfig

00:25:02.320 --> 00:25:04.495
<v Speaker 1>file. If you do not have the correct

00:25:04.495 --> 00:25:07.934
<v Speaker 1>permissions from your QConfig file, those particular

00:25:07.935 --> 00:25:10.095
<v Speaker 1>functions and things that you may want to

00:25:10.095 --> 00:25:11.695
<v Speaker 1>do to your cluster that you will be

00:25:11.695 --> 00:25:12.815
<v Speaker 1>unable to do.

00:25:13.295 --> 00:25:14.815
<v Speaker 1>So let's move on from here.

00:25:15.215 --> 00:25:17.215
<v Speaker 1>We have our nodes. Again, we can view

00:25:17.215 --> 00:25:19.580
<v Speaker 1>our nodes, how they're performing in the last

00:25:19.580 --> 00:25:21.500
<v Speaker 1>hour from the CPU to the memory, the

00:25:21.500 --> 00:25:23.580
<v Speaker 1>disk, the pods, and so forth,

00:25:23.980 --> 00:25:26.620
<v Speaker 1>and we get all of the details associated

00:25:26.620 --> 00:25:29.180
<v Speaker 1>to this particular object. Right? So we have

00:25:29.180 --> 00:25:31.674
<v Speaker 1>our labels. We have the operating system. We

00:25:31.674 --> 00:25:33.595
<v Speaker 1>have the OS image. We have the kernel

00:25:33.595 --> 00:25:35.674
<v Speaker 1>version. We have the container runtime,

00:25:35.674 --> 00:25:38.955
<v Speaker 1>the cubelet version, and, of course, the capacity

00:25:38.955 --> 00:25:41.274
<v Speaker 1>and all of the pods that are associated

00:25:41.274 --> 00:25:43.770
<v Speaker 1>to this node as well. Right, which is

00:25:43.770 --> 00:25:44.570
<v Speaker 1>extremely

00:25:44.570 --> 00:25:46.330
<v Speaker 1>useful for one debugging

00:25:46.330 --> 00:25:48.490
<v Speaker 1>or just trying to navigate through your cluster

00:25:48.490 --> 00:25:51.850
<v Speaker 1>very easily without having to write any KubeCTL.

00:25:52.010 --> 00:25:54.170
<v Speaker 1>Right? So I know many developers that like

00:25:54.170 --> 00:25:56.730
<v Speaker 1>to take this route or even operators, SREs

00:25:56.730 --> 00:25:58.415
<v Speaker 1>that like to take this route because it's

00:25:58.415 --> 00:25:59.775
<v Speaker 1>going to save them a lot of time

00:25:59.775 --> 00:26:02.335
<v Speaker 1>instead of always having to write, within the

00:26:02.335 --> 00:26:03.135
<v Speaker 1>CLI

00:26:03.135 --> 00:26:05.134
<v Speaker 1>different command lines and so forth.

00:26:05.775 --> 00:26:07.215
<v Speaker 1>So if I chose to do so, I

00:26:07.215 --> 00:26:09.054
<v Speaker 1>can actually click into one of these pods.

00:26:09.215 --> 00:26:12.040
<v Speaker 1>And, again, we're given a granular view of

00:26:12.040 --> 00:26:14.520
<v Speaker 1>how that particular pod is performing in the

00:26:14.520 --> 00:26:17.240
<v Speaker 1>last hour with all of the details necessary

00:26:17.240 --> 00:26:17.960
<v Speaker 1>again.

00:26:19.080 --> 00:26:21.480
<v Speaker 1>From here, I do wanna highlight some of

00:26:21.480 --> 00:26:24.280
<v Speaker 1>the functions that you can perform within Lens

00:26:24.280 --> 00:26:26.600
<v Speaker 1>as well, again, based off of your RBAC.

00:26:26.600 --> 00:26:29.385
<v Speaker 1>Right? We're always leveraging your RBAC for your

00:26:29.385 --> 00:26:31.385
<v Speaker 1>Kubernetes cluster. So we can shell into the

00:26:31.385 --> 00:26:31.945
<v Speaker 1>node.

00:26:32.424 --> 00:26:35.145
<v Speaker 1>We can the node. We can drain the

00:26:35.145 --> 00:26:36.985
<v Speaker 1>node. And, of course, we can edit this

00:26:36.985 --> 00:26:38.745
<v Speaker 1>resource, right, if we choose to do so

00:26:38.745 --> 00:26:41.630
<v Speaker 1>hitting that pencil icon. We can begin configuring,

00:26:41.630 --> 00:26:44.270
<v Speaker 1>debugging, and making changes here if we choose

00:26:44.270 --> 00:26:45.149
<v Speaker 1>to do so,

00:26:45.950 --> 00:26:48.590
<v Speaker 1>which is quite, quite awesome. So we'll close

00:26:48.590 --> 00:26:51.630
<v Speaker 1>this again. And, of course, we can delete

00:26:51.630 --> 00:26:53.985
<v Speaker 1>it, which is something I don't want to

00:26:53.985 --> 00:26:56.305
<v Speaker 1>do for for for all honestly.

00:26:56.625 --> 00:26:58.065
<v Speaker 1>But that that is something we can do

00:26:58.065 --> 00:27:00.705
<v Speaker 1>as well. From here, we'll transition to our

00:27:00.705 --> 00:27:02.785
<v Speaker 1>workloads, and we get an overview screen here

00:27:02.785 --> 00:27:03.425
<v Speaker 1>as well.

00:27:03.985 --> 00:27:06.225
<v Speaker 1>You can see your pods, your deployments, your

00:27:06.225 --> 00:27:08.730
<v Speaker 1>staple sets, and so forth. I wanna mention

00:27:08.730 --> 00:27:10.250
<v Speaker 1>that these green,

00:27:10.650 --> 00:27:13.050
<v Speaker 1>color code that we see is good. So,

00:27:13.050 --> 00:27:15.690
<v Speaker 1>typically, if something was wrong with our cluster

00:27:15.690 --> 00:27:17.690
<v Speaker 1>or within one of these objects, whether it's

00:27:17.690 --> 00:27:19.850
<v Speaker 1>a pod, a deployment, and so forth, we'll

00:27:19.850 --> 00:27:23.294
<v Speaker 1>actually have different color codes throughout this sphere.

00:27:23.375 --> 00:27:24.415
<v Speaker 1>So we can have,

00:27:24.815 --> 00:27:27.295
<v Speaker 1>maybe running with, say, 12, and then it

00:27:27.295 --> 00:27:29.134
<v Speaker 1>would say warning message one,

00:27:29.215 --> 00:27:30.735
<v Speaker 1>for example, on the pods.

00:27:31.135 --> 00:27:32.815
<v Speaker 1>Currently, we do not have any of those,

00:27:32.815 --> 00:27:34.895
<v Speaker 1>which is fantastic. I know this cluster is

00:27:34.895 --> 00:27:38.255
<v Speaker 1>performing fun. And on the bottom here, and

00:27:37.669 --> 00:27:39.990
<v Speaker 1>this is actually one of my favorite extensions

00:27:39.990 --> 00:27:41.669
<v Speaker 1>ever built, and it's built by one of

00:27:41.669 --> 00:27:44.309
<v Speaker 1>our developers here at, Orion, this is Team

00:27:44.309 --> 00:27:45.429
<v Speaker 1>Lens specifically.

00:27:45.590 --> 00:27:47.350
<v Speaker 1>And this is something we'll take a look

00:27:47.350 --> 00:27:48.950
<v Speaker 1>at in just a bit as well,

00:27:49.270 --> 00:27:51.270
<v Speaker 1>when we get to the extensions

00:27:50.835 --> 00:27:54.674
<v Speaker 1>side. But this is a beautiful extension that

00:27:54.674 --> 00:27:56.995
<v Speaker 1>allows us to see how all of our

00:27:56.995 --> 00:28:00.034
<v Speaker 1>Kubernetes resources and objects are related to one

00:28:00.034 --> 00:28:02.115
<v Speaker 1>another. Right? So zooming in, we can see

00:28:02.115 --> 00:28:02.835
<v Speaker 1>our Prometheus,

00:28:03.260 --> 00:28:05.580
<v Speaker 1>everything that it's associated with, and then, of

00:28:05.580 --> 00:28:07.020
<v Speaker 1>course, we can get details

00:28:07.100 --> 00:28:09.820
<v Speaker 1>into this config map, the namespace,

00:28:09.820 --> 00:28:12.060
<v Speaker 1>and so forth. And then clicking on it

00:28:12.060 --> 00:28:14.220
<v Speaker 1>gives us that granular view again,

00:28:14.540 --> 00:28:15.740
<v Speaker 1>of that object

00:28:16.540 --> 00:28:18.220
<v Speaker 1>deployment pod, whatever it may be.

00:28:18.865 --> 00:28:21.505
<v Speaker 1>Right? Yeah. That resource topology map is pretty

00:28:21.505 --> 00:28:23.904
<v Speaker 0>sweet. I like that. It's it's awesome. Right?

00:28:23.904 --> 00:28:25.184
<v Speaker 1>And you know what's so cool about it

00:28:25.184 --> 00:28:28.225
<v Speaker 1>too is when you're working with, a massive

00:28:28.225 --> 00:28:29.104
<v Speaker 1>cluster.

00:28:29.505 --> 00:28:31.265
<v Speaker 1>Right? I mean, this is this is a

00:28:31.265 --> 00:28:32.784
<v Speaker 1>smaller cluster, but when you're working with a

00:28:32.784 --> 00:28:36.225
<v Speaker 1>massive cluster and being able to see how

00:28:34.680 --> 00:28:35.560
<v Speaker 1>how everything's,

00:28:35.800 --> 00:28:37.240
<v Speaker 1>connected and,

00:28:37.800 --> 00:28:40.040
<v Speaker 1>and with all the objects and resources, it's

00:28:40.040 --> 00:28:42.280
<v Speaker 1>absolutely awesome. So, yeah, I love this one

00:28:42.280 --> 00:28:45.240
<v Speaker 1>as well. It's actually my favorite currently made,

00:28:45.400 --> 00:28:46.760
<v Speaker 1>available extension,

00:28:47.320 --> 00:28:48.840
<v Speaker 1>and I I leverage it all the time.

00:28:49.215 --> 00:28:51.375
<v Speaker 1>So from here, we'll click into pods. There's

00:28:51.375 --> 00:28:52.575
<v Speaker 1>several ways to do so. You can do

00:28:52.575 --> 00:28:53.934
<v Speaker 1>it from the overview screen or you can

00:28:53.934 --> 00:28:56.414
<v Speaker 1>click pods here, and it immediately gives us

00:28:56.414 --> 00:28:57.695
<v Speaker 1>this beautiful,

00:28:58.015 --> 00:28:59.134
<v Speaker 1>user interface

00:28:59.135 --> 00:29:01.855
<v Speaker 1>where we can filter very quickly. So again,

00:29:01.855 --> 00:29:03.775
<v Speaker 1>if this is a massive cluster with, let's

00:29:03.775 --> 00:29:06.910
<v Speaker 1>say, 50 to a hundred different pods, for

00:29:06.910 --> 00:29:10.350
<v Speaker 1>example, we can very easily navigate,

00:29:10.590 --> 00:29:12.750
<v Speaker 1>based off of the filters here. I do

00:29:12.750 --> 00:29:14.590
<v Speaker 1>wanna mention these filters are very similar to,

00:29:14.590 --> 00:29:18.270
<v Speaker 1>like, Excel, for example, or Google Sheets, where

00:29:17.565 --> 00:29:19.404
<v Speaker 1>if you have a filter going, so if

00:29:19.404 --> 00:29:21.484
<v Speaker 1>I'm gonna filter by default namespaces,

00:29:21.565 --> 00:29:24.524
<v Speaker 1>this will actually follow us everywhere throughout Lens.

00:29:24.605 --> 00:29:27.084
<v Speaker 1>So it's very important to notice and

00:29:27.485 --> 00:29:28.684
<v Speaker 1>know this is happening.

00:29:30.240 --> 00:29:32.240
<v Speaker 1>When I first was using Lens,

00:29:32.480 --> 00:29:34.080
<v Speaker 1>I I swear to you guys,

00:29:34.480 --> 00:29:36.480
<v Speaker 1>I had it filtered for one of these

00:29:36.480 --> 00:29:37.679
<v Speaker 1>different namespaces,

00:29:37.680 --> 00:29:39.440
<v Speaker 1>and I thought I was going in going

00:29:39.440 --> 00:29:40.400
<v Speaker 1>in insane

00:29:40.400 --> 00:29:43.040
<v Speaker 1>searching for other deployments and pods and so

00:29:43.040 --> 00:29:45.225
<v Speaker 1>forth because it was filtered down by the

00:29:45.225 --> 00:29:47.465
<v Speaker 1>namespace. So I do wanna mention that, you

00:29:47.465 --> 00:29:49.625
<v Speaker 1>do need to uncheck the filter as you

00:29:49.625 --> 00:29:50.905
<v Speaker 1>navigate through

00:29:51.065 --> 00:29:51.705
<v Speaker 1>Lens.

00:29:52.105 --> 00:29:54.905
<v Speaker 1>It's quite important to mention. Again, you can

00:29:54.905 --> 00:29:56.825
<v Speaker 1>also search for specific pods here.

00:29:57.440 --> 00:30:00.399
<v Speaker 1>You can view the status and so forth.

00:30:01.040 --> 00:30:02.640
<v Speaker 1>And the reason why, again, this is so

00:30:02.640 --> 00:30:05.200
<v Speaker 1>valuable is if you have a massive cluster,

00:30:05.440 --> 00:30:07.440
<v Speaker 1>you have to perform various different command lines

00:30:07.440 --> 00:30:09.120
<v Speaker 1>to view all of your objects

00:30:11.775 --> 00:30:13.855
<v Speaker 1>within your cluster. So I just ran a

00:30:13.855 --> 00:30:16.015
<v Speaker 1>quick command line, and now we can see,

00:30:16.335 --> 00:30:19.054
<v Speaker 1>all of the different objects within our cluster.

00:30:19.055 --> 00:30:19.695
<v Speaker 1>Right?

00:30:20.495 --> 00:30:22.575
<v Speaker 1>Very, very easily when they were created, when

00:30:22.575 --> 00:30:24.655
<v Speaker 1>they're running. But then, again, if you wanna

00:30:24.655 --> 00:30:26.175
<v Speaker 1>view a specific object,

00:30:26.840 --> 00:30:28.920
<v Speaker 1>you would have to run another command line

00:30:28.920 --> 00:30:32.200
<v Speaker 1>to access that that that object as well.

00:30:32.200 --> 00:30:34.200
<v Speaker 1>Right? Compared to with Lens, I can just

00:30:34.200 --> 00:30:36.520
<v Speaker 1>click directly into this controller.

00:30:37.000 --> 00:30:39.800
<v Speaker 1>I can view the metrics immediately of this

00:30:39.800 --> 00:30:42.785
<v Speaker 1>pod, see how it's performing, again, from CPU,

00:30:42.785 --> 00:30:45.745
<v Speaker 1>memory, network, etcetera. And then, again, I have

00:30:45.745 --> 00:30:48.865
<v Speaker 1>very various different functions that I can perform

00:30:48.865 --> 00:30:50.465
<v Speaker 1>as well. Like, I can show them to

00:30:50.465 --> 00:30:52.785
<v Speaker 1>the pod. I can view the logs, which

00:30:52.785 --> 00:30:54.945
<v Speaker 1>is a fantastic resource. You can search through

00:30:54.945 --> 00:30:57.240
<v Speaker 1>the logs. You can actually download the logs

00:30:57.240 --> 00:30:59.160
<v Speaker 1>as well. You can share them with a

00:30:59.160 --> 00:31:00.520
<v Speaker 1>colleague, for example,

00:31:01.480 --> 00:31:02.600
<v Speaker 1>and so forth.

00:31:02.680 --> 00:31:03.320
<v Speaker 1>Right?

00:31:03.800 --> 00:31:05.160
<v Speaker 1>And again,

00:31:05.640 --> 00:31:08.280
<v Speaker 1>you can edit that resource directly within Lens.

00:31:08.280 --> 00:31:10.280
<v Speaker 1>Right? And that's what makes it that IDE

00:31:10.955 --> 00:31:13.595
<v Speaker 1>is being able to to edit these resources.

00:31:14.395 --> 00:31:16.395
<v Speaker 1>One thing I do wanna showcase

00:31:16.395 --> 00:31:18.235
<v Speaker 1>before moving on is,

00:31:18.875 --> 00:31:21.755
<v Speaker 1>the ability to create a resource directly into

00:31:21.755 --> 00:31:23.930
<v Speaker 1>our cluster here. So when I click this

00:31:23.930 --> 00:31:25.850
<v Speaker 1>icon, we actually have some cool templates that

00:31:25.850 --> 00:31:27.930
<v Speaker 1>you can leverage right off the bat. So,

00:31:28.170 --> 00:31:29.690
<v Speaker 1>we can do a deployment. This will deploy

00:31:29.690 --> 00:31:32.010
<v Speaker 1>an NGINX deployment directly into Lens

00:31:32.650 --> 00:31:34.810
<v Speaker 1>as you guys can see, and I can

00:31:34.810 --> 00:31:37.049
<v Speaker 1>create it and close it, and it immediately

00:31:37.130 --> 00:31:40.625
<v Speaker 1>deploys this resource directly into our deployments.

00:31:41.185 --> 00:31:43.425
<v Speaker 1>I've deployed this already, so that's why you

00:31:43.425 --> 00:31:45.505
<v Speaker 1>can see the date is four days ago.

00:31:46.305 --> 00:31:48.465
<v Speaker 1>And the neat thing about Lens is we

00:31:48.465 --> 00:31:50.545
<v Speaker 1>really do leverage Kubernetes

00:31:51.230 --> 00:31:53.630
<v Speaker 1>to to scale our different workloads and our

00:31:53.630 --> 00:31:56.270
<v Speaker 1>deployments. Right? So I'm using the user interface

00:31:56.270 --> 00:31:58.750
<v Speaker 1>here to actually scale this deployment up, so

00:31:58.750 --> 00:32:00.110
<v Speaker 1>I can scale it up to, like, let's

00:32:00.110 --> 00:32:01.070
<v Speaker 1>say, 30.

00:32:01.470 --> 00:32:02.830
<v Speaker 1>And if I jump to my pods,

00:32:03.385 --> 00:32:06.024
<v Speaker 1>we begin creating all of these different,

00:32:06.825 --> 00:32:07.705
<v Speaker 1>containers,

00:32:07.945 --> 00:32:09.625
<v Speaker 1>right, all in real time. And, of course,

00:32:09.625 --> 00:32:11.304
<v Speaker 1>this is Kubernetes doing this.

00:32:11.625 --> 00:32:14.025
<v Speaker 1>Right? But we're just using the user interface

00:32:14.025 --> 00:32:16.345
<v Speaker 1>without having to write any command line to

00:32:16.345 --> 00:32:19.450
<v Speaker 1>scale this up, which I think is, quite

00:32:19.450 --> 00:32:20.570
<v Speaker 1>quite valuable.

00:32:21.850 --> 00:32:24.010
<v Speaker 1>So that's a very neat feature as well.

00:32:24.010 --> 00:32:25.610
<v Speaker 1>And if I jump back to my deployments,

00:32:25.610 --> 00:32:27.130
<v Speaker 1>I'll grab this NGINX.

00:32:27.130 --> 00:32:28.570
<v Speaker 1>It's still processing,

00:32:28.650 --> 00:32:30.809
<v Speaker 1>and here's that resource map that we can

00:32:30.809 --> 00:32:32.410
<v Speaker 1>see that's going crazy right now.

00:32:34.075 --> 00:32:35.835
<v Speaker 1>But these are all those deployments, and they're

00:32:35.835 --> 00:32:38.154
<v Speaker 1>the same deployment. So four, very, very cool.

00:32:38.635 --> 00:32:40.955
<v Speaker 1>And, again, we see all of the details

00:32:40.955 --> 00:32:43.595
<v Speaker 1>associated to this deployment. I'm gonna scale this

00:32:43.595 --> 00:32:44.315
<v Speaker 1>back down.

00:32:44.715 --> 00:32:46.955
<v Speaker 1>My machine is screaming at me right now.

00:32:48.769 --> 00:32:50.369
<v Speaker 1>So we'll scale it back down.

00:32:51.330 --> 00:32:54.049
<v Speaker 1>And if we scroll down, we begin terminating

00:32:54.049 --> 00:32:55.329
<v Speaker 1>these containers,

00:32:55.570 --> 00:32:57.249
<v Speaker 1>right, all in real time.

00:32:59.889 --> 00:33:01.089
<v Speaker 0>Can I ask a question?

00:33:01.330 --> 00:33:01.970
<v Speaker 1>Absolutely.

00:33:03.005 --> 00:33:05.405
<v Speaker 0>So, I mean, this is really cool. Right?

00:33:05.405 --> 00:33:07.885
<v Speaker 0>And been able to navigate through pods, deployment,

00:33:07.885 --> 00:33:09.965
<v Speaker 0>Steven sets, people sets, all of that. Like,

00:33:09.965 --> 00:33:11.805
<v Speaker 0>that's probably 80%

00:33:11.805 --> 00:33:13.805
<v Speaker 0>of what I need to do. But what

00:33:13.805 --> 00:33:15.565
<v Speaker 0>about custom resources?

00:33:15.885 --> 00:33:16.845
<v Speaker 0>Does Lens

00:33:17.170 --> 00:33:19.490
<v Speaker 0>understand custom resources? Now let me center out

00:33:19.490 --> 00:33:21.330
<v Speaker 0>with those with the same kind of nice

00:33:21.330 --> 00:33:22.370
<v Speaker 0>visual UI?

00:33:22.930 --> 00:33:25.650
<v Speaker 1>Absolutely. Yes. So we do have custom resources

00:33:25.650 --> 00:33:27.090
<v Speaker 1>here. I don't have any

00:33:27.810 --> 00:33:29.810
<v Speaker 1>added to my cluster, but you absolutely can

00:33:29.810 --> 00:33:32.105
<v Speaker 1>bring in, like, for example, like, Istio or

00:33:32.105 --> 00:33:34.345
<v Speaker 1>something along the lines of that directly to

00:33:34.345 --> 00:33:36.425
<v Speaker 1>your cluster. So I don't have any on

00:33:36.425 --> 00:33:38.265
<v Speaker 1>this cluster, but, yes, to answer your question,

00:33:38.265 --> 00:33:38.825
<v Speaker 1>you can.

00:33:39.385 --> 00:33:40.905
<v Speaker 0>K. We also have a question from the

00:33:40.905 --> 00:33:42.185
<v Speaker 0>chat if you want that just now, or

00:33:42.185 --> 00:33:43.065
<v Speaker 0>do you wanna wait?

00:33:43.385 --> 00:33:45.440
<v Speaker 1>Sure. What is it? Russell

00:33:45.440 --> 00:33:46.559
<v Speaker 0>is asking,

00:33:46.560 --> 00:33:49.520
<v Speaker 0>what filtering does a log view have? Can

00:33:49.520 --> 00:33:51.280
<v Speaker 0>I use a regex to search?

00:33:52.400 --> 00:33:53.920
<v Speaker 1>One more time. I'm sorry. I missed that,

00:33:53.920 --> 00:33:55.680
<v Speaker 1>David. Russell wants to know from the log

00:33:55.680 --> 00:33:57.535
<v Speaker 0>view on the pause, do we have the

00:33:57.535 --> 00:34:00.175
<v Speaker 0>ability to filter those logs, and can I

00:34:00.175 --> 00:34:02.735
<v Speaker 0>use regular expressions to filter that if needed?

00:34:03.135 --> 00:34:05.375
<v Speaker 1>I believe so. Yes. I I do believe

00:34:05.375 --> 00:34:05.934
<v Speaker 1>so.

00:34:06.495 --> 00:34:07.775
<v Speaker 1>Let's take a look here.

00:34:10.870 --> 00:34:14.310
<v Speaker 1>Maybe wrong, but I believe you can, actually.

00:34:14.550 --> 00:34:16.550
<v Speaker 0>I think maybe the search at the top

00:34:16.550 --> 00:34:17.110
<v Speaker 0>right.

00:34:17.590 --> 00:34:19.430
<v Speaker 1>Yep. There it is. Yep.

00:34:20.150 --> 00:34:22.790
<v Speaker 0>So if you just type tools, does that

00:34:23.594 --> 00:34:25.195
<v Speaker 0>okay. So it's like a highlight kind of

00:34:25.195 --> 00:34:26.715
<v Speaker 0>search. Got it. Okay. Yeah.

00:34:26.955 --> 00:34:27.915
<v Speaker 0>That makes sense.

00:34:28.635 --> 00:34:29.515
<v Speaker 1>Awesome.

00:34:29.915 --> 00:34:31.035
<v Speaker 1>Let's close this.

00:34:31.435 --> 00:34:31.835
<v Speaker 1>And,

00:34:32.715 --> 00:34:34.554
<v Speaker 1>so as you guys saw, we just deployed

00:34:34.554 --> 00:34:36.315
<v Speaker 1>a resource directly into,

00:34:36.474 --> 00:34:38.554
<v Speaker 1>our cluster as well, which was the NGINX

00:34:38.554 --> 00:34:39.114
<v Speaker 1>deployment.

00:34:39.410 --> 00:34:42.370
<v Speaker 1>We scaled that up leveraging leveraging Lens.

00:34:42.450 --> 00:34:44.130
<v Speaker 1>So couple of things we've taken a look

00:34:44.130 --> 00:34:47.250
<v Speaker 1>at already. Right? That multi cluster management tool.

00:34:47.650 --> 00:34:50.130
<v Speaker 1>Right? Switching from cluster to cluster while always

00:34:50.130 --> 00:34:53.410
<v Speaker 1>maintaining the correct Kubernetes endpoint, extremely important when

00:34:53.410 --> 00:34:55.010
<v Speaker 1>working with many different clusters.

00:34:55.625 --> 00:34:57.625
<v Speaker 1>We took a look at the pre built

00:34:57.625 --> 00:35:00.025
<v Speaker 1>in Prometheus that allows us to understand how

00:35:00.025 --> 00:35:02.105
<v Speaker 1>our cluster's performing in the last hour from

00:35:02.105 --> 00:35:03.705
<v Speaker 1>the CPU to the memory,

00:35:03.865 --> 00:35:06.665
<v Speaker 1>the nodes, the pods, the capacity. And here,

00:35:06.665 --> 00:35:08.105
<v Speaker 1>we have a we have a warning message

00:35:08.105 --> 00:35:10.025
<v Speaker 1>as I talked about earlier. So if I

00:35:10.025 --> 00:35:12.640
<v Speaker 1>open this up, it's going to give us

00:35:12.640 --> 00:35:13.520
<v Speaker 1>details

00:35:13.600 --> 00:35:15.280
<v Speaker 1>on this particular object,

00:35:15.840 --> 00:35:17.520
<v Speaker 1>excuse me, which is a pod.

00:35:19.280 --> 00:35:22.000
<v Speaker 1>Scrolling down, we can see the events and

00:35:22.000 --> 00:35:23.760
<v Speaker 1>the more warning message here.

00:35:24.444 --> 00:35:27.405
<v Speaker 1>Right? So this is gonna help us debug,

00:35:27.405 --> 00:35:28.925
<v Speaker 1>troubleshoot, and so forth,

00:35:29.244 --> 00:35:30.925
<v Speaker 1>within this particular object.

00:35:31.005 --> 00:35:33.165
<v Speaker 1>Then we can, of course, view the logs

00:35:33.805 --> 00:35:34.765
<v Speaker 1>and go from there.

00:35:37.510 --> 00:35:39.910
<v Speaker 1>We also took a look at accessing

00:35:39.910 --> 00:35:41.510
<v Speaker 1>various different objects,

00:35:41.590 --> 00:35:43.590
<v Speaker 1>one object to the other. We deployed a

00:35:43.590 --> 00:35:44.390
<v Speaker 1>resource.

00:35:44.950 --> 00:35:47.030
<v Speaker 1>We looked at the Prometheus.

00:35:47.110 --> 00:35:49.670
<v Speaker 1>And from here, we're gonna transition into actually

00:35:49.670 --> 00:35:51.270
<v Speaker 1>taking a look at the helm charts,

00:35:51.725 --> 00:35:53.005
<v Speaker 1>the extensions,

00:35:53.085 --> 00:35:54.685
<v Speaker 1>and then we will also

00:35:54.845 --> 00:35:57.565
<v Speaker 1>create a new space, add a cluster to

00:35:57.565 --> 00:36:00.365
<v Speaker 1>that space, share that space with David, and

00:36:00.365 --> 00:36:02.285
<v Speaker 1>he'll be able to see that cluster as

00:36:02.285 --> 00:36:02.765
<v Speaker 1>well.

00:36:03.485 --> 00:36:06.125
<v Speaker 1>So from here, to be able to access

00:36:06.520 --> 00:36:07.080
<v Speaker 1>your,

00:36:07.960 --> 00:36:10.040
<v Speaker 1>Helm charts or down in this app section,

00:36:10.040 --> 00:36:11.160
<v Speaker 1>you click charts,

00:36:12.680 --> 00:36:14.280
<v Speaker 1>and then it'll immediately

00:36:14.440 --> 00:36:16.360
<v Speaker 1>start bringing up all of the charts and

00:36:16.360 --> 00:36:19.015
<v Speaker 1>the repos it's associated to. So I I

00:36:19.015 --> 00:36:20.215
<v Speaker 1>do wanna mention that,

00:36:21.415 --> 00:36:22.535
<v Speaker 1>my current

00:36:23.415 --> 00:36:25.575
<v Speaker 1>Lens desktop application, the way it's set up

00:36:25.575 --> 00:36:27.975
<v Speaker 1>is I'm only going after certain repos as

00:36:27.975 --> 00:36:30.375
<v Speaker 1>you guys can see here. And to do

00:36:30.455 --> 00:36:32.135
<v Speaker 1>to change this, I believe you go to

00:36:32.135 --> 00:36:32.695
<v Speaker 1>preferences.

00:36:34.000 --> 00:36:34.960
<v Speaker 1>Let's see.

00:36:36.800 --> 00:36:39.600
<v Speaker 1>Yes. And then here within this Helm chart

00:36:39.600 --> 00:36:40.400
<v Speaker 1>section,

00:36:40.560 --> 00:36:42.720
<v Speaker 1>you can add a custom Helm repo, or

00:36:42.720 --> 00:36:44.640
<v Speaker 1>you can add, you know, from the thousands

00:36:44.640 --> 00:36:47.040
<v Speaker 1>of repos that are publicly made available here.

00:36:47.445 --> 00:36:47.925
<v Speaker 1>Right?

00:36:48.725 --> 00:36:50.405
<v Speaker 1>I only use certain ones. So I use

00:36:50.405 --> 00:36:51.285
<v Speaker 1>Morentis.

00:36:51.285 --> 00:36:53.605
<v Speaker 1>I use Bitnami. I use Stable, and that's

00:36:53.605 --> 00:36:56.165
<v Speaker 1>really it. This Cloudflare one, I don't even

00:36:56.165 --> 00:36:58.325
<v Speaker 1>think I use. So I can remove that,

00:36:58.565 --> 00:37:00.085
<v Speaker 1>and then we can navigate back to our

00:37:00.085 --> 00:37:02.609
<v Speaker 1>applications or our Helm charts, and we can

00:37:02.609 --> 00:37:04.609
<v Speaker 1>search for particular helm charts as well. Right?

00:37:04.609 --> 00:37:06.289
<v Speaker 1>So if I wanna deploy a WordPress helm

00:37:06.289 --> 00:37:06.849
<v Speaker 1>chart,

00:37:07.970 --> 00:37:09.089
<v Speaker 1>you click here.

00:37:09.569 --> 00:37:12.369
<v Speaker 1>It's immediately going to give me all details

00:37:12.369 --> 00:37:13.170
<v Speaker 1>associated

00:37:13.170 --> 00:37:14.770
<v Speaker 1>to this chart itself.

00:37:15.010 --> 00:37:16.690
<v Speaker 1>Right? Who's maintaining it,

00:37:17.635 --> 00:37:20.755
<v Speaker 1>where it lives, keywords it's associated with, and,

00:37:20.755 --> 00:37:22.755
<v Speaker 1>of course, how to get started with this

00:37:22.755 --> 00:37:24.275
<v Speaker 1>home chart. If you even chose to do

00:37:24.275 --> 00:37:24.755
<v Speaker 1>this,

00:37:25.075 --> 00:37:27.635
<v Speaker 1>on your own, right, without deploying it through

00:37:27.635 --> 00:37:28.995
<v Speaker 1>Lens, like, you can do it to the

00:37:28.995 --> 00:37:30.675
<v Speaker 1>terminal or command line and so forth.

00:37:32.010 --> 00:37:33.370
<v Speaker 1>Scrolling back up,

00:37:34.170 --> 00:37:36.170
<v Speaker 1>we're gonna install the sound chart.

00:37:38.170 --> 00:37:40.330
<v Speaker 1>Let's actually close this pod stuff out.

00:37:41.370 --> 00:37:43.130
<v Speaker 1>And this usually takes a couple minutes as

00:37:43.130 --> 00:37:45.850
<v Speaker 1>well just as we did with the Prometheus

00:37:45.850 --> 00:37:48.285
<v Speaker 1>that we saw on the k zeros cluster.

00:37:48.605 --> 00:37:49.805
<v Speaker 1>Some details.

00:37:50.365 --> 00:37:51.805
<v Speaker 1>You can make some changes here if you

00:37:51.805 --> 00:37:52.925
<v Speaker 1>chose to do so.

00:37:53.725 --> 00:37:55.005
<v Speaker 1>We'll click install.

00:38:05.800 --> 00:38:06.600
<v Speaker 1>And

00:38:06.760 --> 00:38:09.080
<v Speaker 1>it's been installed to our cluster. So several

00:38:09.080 --> 00:38:10.600
<v Speaker 1>ways to access it, you can view the

00:38:10.600 --> 00:38:11.160
<v Speaker 1>release here.

00:38:15.625 --> 00:38:18.265
<v Speaker 1>And we can see all of the resources

00:38:18.265 --> 00:38:20.664
<v Speaker 1>that were created for this Helm chart, the

00:38:20.664 --> 00:38:23.545
<v Speaker 1>service accounts, the secrets, the config map, and

00:38:23.545 --> 00:38:24.665
<v Speaker 1>so forth.

00:38:24.744 --> 00:38:25.065
<v Speaker 1>Right?

00:38:26.200 --> 00:38:28.600
<v Speaker 1>So so that's very awesome to see. Another

00:38:28.600 --> 00:38:30.840
<v Speaker 1>thing I wanna point out is actually the

00:38:30.840 --> 00:38:31.640
<v Speaker 1>ability

00:38:31.960 --> 00:38:32.520
<v Speaker 1>to,

00:38:33.480 --> 00:38:35.720
<v Speaker 1>port forward directly into this application.

00:38:35.880 --> 00:38:37.960
<v Speaker 1>So this should work fine,

00:38:38.040 --> 00:38:38.600
<v Speaker 1>I imagine.

00:38:40.425 --> 00:38:41.865
<v Speaker 1>Just a second.

00:38:42.185 --> 00:38:43.865
<v Speaker 1>So if I chose to put forward into

00:38:43.865 --> 00:38:44.105
<v Speaker 1>it,

00:38:55.280 --> 00:38:57.200
<v Speaker 1>It's taking longer than usual.

00:39:00.000 --> 00:39:02.079
<v Speaker 0>Yeah. I was wondering if that that delay

00:39:02.079 --> 00:39:03.760
<v Speaker 0>was normal or if it was just having

00:39:03.760 --> 00:39:05.760
<v Speaker 0>a wee spending problem to itself there.

00:39:06.079 --> 00:39:09.040
<v Speaker 1>Yeah. It's it's not normal, actually. I wonder

00:39:09.040 --> 00:39:09.440
<v Speaker 1>if

00:39:09.995 --> 00:39:13.195
<v Speaker 1>my computer is just going crazy.

00:39:13.355 --> 00:39:15.195
<v Speaker 0>Still to cover them from those 30 pods

00:39:15.195 --> 00:39:17.435
<v Speaker 0>you spun up, I think. Yeah. Exactly.

00:39:17.435 --> 00:39:20.235
<v Speaker 1>The the mini q cluster, it is it

00:39:20.235 --> 00:39:22.315
<v Speaker 1>doesn't like it. So let's give it one

00:39:22.315 --> 00:39:24.160
<v Speaker 1>more try. Let's see if we can get

00:39:24.160 --> 00:39:25.360
<v Speaker 1>into this port.

00:39:27.280 --> 00:39:28.240
<v Speaker 1>Come on.

00:39:30.400 --> 00:39:32.960
<v Speaker 1>Def the longest it's taken. That's fine. Let's

00:39:32.960 --> 00:39:33.280
<v Speaker 1>actually

00:39:34.480 --> 00:39:37.005
<v Speaker 1>this won't work. I doubt it. Yeah. But,

00:39:37.405 --> 00:39:39.565
<v Speaker 1>unfortunately, it's not working here, everybody.

00:39:40.045 --> 00:39:41.484
<v Speaker 1>Part of the live demo. Right?

00:39:42.125 --> 00:39:42.685
<v Speaker 1>But,

00:39:43.244 --> 00:39:45.325
<v Speaker 1>you can port forward directly into the application

00:39:45.325 --> 00:39:47.325
<v Speaker 1>also on BLNs. What you would do is

00:39:47.325 --> 00:39:48.125
<v Speaker 1>you go to services.

00:39:48.750 --> 00:39:49.950
<v Speaker 1>That's

00:39:49.950 --> 00:39:50.430
<v Speaker 1>why.

00:39:50.830 --> 00:39:52.750
<v Speaker 0>I don't think it's got any endpoint yet.

00:39:52.990 --> 00:39:54.270
<v Speaker 1>Yeah. Exactly.

00:39:55.950 --> 00:39:57.790
<v Speaker 1>And so forth. So,

00:39:58.190 --> 00:39:58.830
<v Speaker 1>anyways,

00:39:59.390 --> 00:40:02.270
<v Speaker 1>that is port forwarding, and that is in

00:40:01.515 --> 00:40:03.674
<v Speaker 1>installing a Helm chart directly to our to

00:40:03.674 --> 00:40:05.595
<v Speaker 1>our app to our cluster. Are the pods

00:40:05.595 --> 00:40:06.474
<v Speaker 0>running yet?

00:40:07.115 --> 00:40:08.474
<v Speaker 1>Let's take a look.

00:40:10.474 --> 00:40:13.035
<v Speaker 1>So we have some problems. Unbound immediate persistent

00:40:13.035 --> 00:40:14.394
<v Speaker 1>volume claims. Yeah.

00:40:14.990 --> 00:40:16.990
<v Speaker 1>Yeah. Yeah. Yeah. So so we're having some

00:40:16.990 --> 00:40:18.829
<v Speaker 1>problems here as you guys can see, and

00:40:18.829 --> 00:40:20.670
<v Speaker 1>then we get that message that's,

00:40:21.549 --> 00:40:24.109
<v Speaker 1>that's directly built into our into into Lens

00:40:24.109 --> 00:40:26.190
<v Speaker 1>as well. Scrolling scrolling down, we can see

00:40:26.190 --> 00:40:27.549
<v Speaker 1>a little bit more about it. Zero to

00:40:27.549 --> 00:40:29.869
<v Speaker 1>one nodes are available. One pod has unbound

00:40:29.869 --> 00:40:31.230
<v Speaker 1>immediate

00:40:30.945 --> 00:40:31.985
<v Speaker 1>volume claims.

00:40:32.225 --> 00:40:35.265
<v Speaker 1>So, again, if you chose to troubleshoot this,

00:40:35.265 --> 00:40:37.585
<v Speaker 1>you have the ability to do so,

00:40:37.825 --> 00:40:40.065
<v Speaker 1>relatively quickly, and I think this is another

00:40:40.065 --> 00:40:40.785
<v Speaker 1>reason why,

00:40:41.425 --> 00:40:43.345
<v Speaker 1>we weren't able to pull forward. But that

00:40:43.345 --> 00:40:45.585
<v Speaker 1>being said, let's not troubleshoot this right now.

00:40:46.539 --> 00:40:48.700
<v Speaker 1>There it goes. But it it doesn't work

00:40:48.700 --> 00:40:51.180
<v Speaker 1>because as David mentioned, there's no endpoint currently.

00:40:51.180 --> 00:40:52.460
<v Speaker 0>You should be able to pull forward to

00:40:52.460 --> 00:40:54.220
<v Speaker 0>that NGINX one, though, if you wanna do

00:40:54.220 --> 00:40:56.460
<v Speaker 0>that instead. Let's give that a shot. Yeah.

00:40:56.460 --> 00:40:57.500
<v Speaker 1>Let's go to deployments.

00:40:59.045 --> 00:41:01.365
<v Speaker 1>But, actually, we'll go to services.

00:41:01.365 --> 00:41:02.005
<v Speaker 1>Whoops.

00:41:03.525 --> 00:41:04.885
<v Speaker 1>Where did you go?

00:41:05.204 --> 00:41:06.964
<v Speaker 0>Oh, it's just part okay. It's just a

00:41:06.964 --> 00:41:08.805
<v Speaker 0>deployment. There's no service for it.

00:41:09.525 --> 00:41:11.204
<v Speaker 1>Yeah. That's what it's exactly.

00:41:13.059 --> 00:41:15.140
<v Speaker 1>It's still trying to open that for after

00:41:15.140 --> 00:41:17.220
<v Speaker 1>I clicked all of those things. That's funny.

00:41:17.779 --> 00:41:19.700
<v Speaker 1>Excellent. So we talked a little bit about

00:41:19.700 --> 00:41:21.220
<v Speaker 1>home charts, but now let's take a look

00:41:21.220 --> 00:41:21.780
<v Speaker 1>at

00:41:22.980 --> 00:41:23.619
<v Speaker 1>our

00:41:24.660 --> 00:41:26.339
<v Speaker 1>oh, we had a crash, guys.

00:41:28.505 --> 00:41:29.865
<v Speaker 0>That'll be the last time you spin up

00:41:29.865 --> 00:41:31.465
<v Speaker 0>30 pods on your own machine.

00:41:31.785 --> 00:41:34.105
<v Speaker 1>Yeah. Yeah. Yeah. Exactly. And in a in

00:41:34.105 --> 00:41:36.185
<v Speaker 1>a live demo as well. So we're we're

00:41:36.185 --> 00:41:37.945
<v Speaker 1>gonna get away from this mini cube cluster

00:41:37.945 --> 00:41:39.225
<v Speaker 1>for now. We'll go back to my case

00:41:39.225 --> 00:41:41.590
<v Speaker 1>zeros cluster and stay away from that. So

00:41:41.590 --> 00:41:43.350
<v Speaker 1>now let's talk about extensions.

00:41:43.430 --> 00:41:45.830
<v Speaker 1>And, currently, I have one extension added to

00:41:45.830 --> 00:41:48.550
<v Speaker 1>this Kubernetes cluster, which is the resource map.

00:41:48.550 --> 00:41:49.830
<v Speaker 1>To add extensions,

00:41:50.470 --> 00:41:52.150
<v Speaker 1>very simple. You click Lens on the top

00:41:52.150 --> 00:41:53.830
<v Speaker 1>and left side, click extensions,

00:41:55.425 --> 00:41:56.785
<v Speaker 1>and you would

00:41:57.505 --> 00:41:59.825
<v Speaker 1>install the extensions that are available

00:42:00.625 --> 00:42:03.105
<v Speaker 1>to publicly available, or you can bring your

00:42:03.105 --> 00:42:04.625
<v Speaker 1>own as well. So here are some extensions

00:42:04.625 --> 00:42:07.425
<v Speaker 1>that are publicly available. We have Moreintas container

00:42:07.425 --> 00:42:08.225
<v Speaker 1>cloud extension,

00:42:08.650 --> 00:42:10.890
<v Speaker 1>which, allows you to connect,

00:42:11.290 --> 00:42:12.650
<v Speaker 1>your MCC

00:42:13.210 --> 00:42:14.010
<v Speaker 1>infra,

00:42:14.170 --> 00:42:17.050
<v Speaker 1>and your Morantis Kubernetes engine cluster directly to

00:42:17.050 --> 00:42:19.450
<v Speaker 1>Lens without actually having to add that QConfig

00:42:19.450 --> 00:42:22.010
<v Speaker 1>file or have Lens search for it on

00:42:22.010 --> 00:42:25.184
<v Speaker 1>your operating system. You have the starboard extension

00:42:25.184 --> 00:42:26.545
<v Speaker 1>by Aqua Security.

00:42:26.625 --> 00:42:28.464
<v Speaker 1>This is an amazing extension that shows you

00:42:28.464 --> 00:42:29.505
<v Speaker 1>vulnerabilities

00:42:29.505 --> 00:42:32.464
<v Speaker 1>within your cluster as, within your cluster,

00:42:32.625 --> 00:42:34.785
<v Speaker 1>and you have several different, fun ones as

00:42:34.785 --> 00:42:36.464
<v Speaker 1>well. One of the funnest ones, but I

00:42:36.464 --> 00:42:38.144
<v Speaker 1>haven't used in a long time. Yeah. I

00:42:38.144 --> 00:42:41.740
<v Speaker 1>said funnest, but, it's space invaders.

00:42:41.819 --> 00:42:44.220
<v Speaker 1>You can actually kill pods

00:42:44.220 --> 00:42:46.140
<v Speaker 1>through this game. I don't know if it's

00:42:46.140 --> 00:42:47.819
<v Speaker 1>been updated in a while, so it may

00:42:47.819 --> 00:42:49.260
<v Speaker 1>not work. But let's actually,

00:42:50.700 --> 00:42:52.540
<v Speaker 1>grab it and download it and see

00:42:53.145 --> 00:42:53.785
<v Speaker 1>if,

00:42:54.025 --> 00:42:56.585
<v Speaker 1>we can spin this up in our cluster.

00:42:57.305 --> 00:42:59.385
<v Speaker 1>Again, I haven't used this in a while,

00:42:59.385 --> 00:43:01.385
<v Speaker 1>and I know we don't really maintain this

00:43:01.385 --> 00:43:03.225
<v Speaker 1>one. It was more of an experiment.

00:43:04.025 --> 00:43:06.185
<v Speaker 1>So going here, we can search for it.

00:43:06.185 --> 00:43:07.305
<v Speaker 1>Look for our downloads.

00:43:08.289 --> 00:43:10.849
<v Speaker 1>Let's just grab the name Lens app. Okay.

00:43:19.895 --> 00:43:23.015
<v Speaker 1>No memory. There it is. Space Invaders.

00:43:25.734 --> 00:43:27.815
<v Speaker 1>And then it'll begin installing to our desktop

00:43:27.815 --> 00:43:28.695
<v Speaker 1>application.

00:43:29.015 --> 00:43:31.175
<v Speaker 1>You can see it was successfully installed,

00:43:31.335 --> 00:43:34.180
<v Speaker 1>and we get a status that it's incompatible.

00:43:34.180 --> 00:43:36.580
<v Speaker 1>So it has not been updated in quite

00:43:36.580 --> 00:43:38.900
<v Speaker 1>some time. So I'm gonna uninstall this, but

00:43:38.900 --> 00:43:40.420
<v Speaker 1>we'll take a look at that resource map

00:43:40.420 --> 00:43:42.020
<v Speaker 1>that is already installed,

00:43:42.340 --> 00:43:44.100
<v Speaker 1>directly to our desktop application,

00:43:44.340 --> 00:43:46.020
<v Speaker 1>which, is something we took a look at

00:43:46.020 --> 00:43:46.340
<v Speaker 1>earlier.

00:43:47.165 --> 00:43:49.325
<v Speaker 1>So I'll just touch on this just one

00:43:49.325 --> 00:43:50.285
<v Speaker 1>more time here,

00:43:50.605 --> 00:43:52.205
<v Speaker 1>since we talked about it already.

00:43:52.365 --> 00:43:55.005
<v Speaker 1>But here's our Kubernetes resource manifest, which will

00:43:55.005 --> 00:43:57.244
<v Speaker 1>show us how all of our objects and

00:43:57.244 --> 00:43:57.965
<v Speaker 1>resources,

00:43:58.685 --> 00:44:00.925
<v Speaker 1>are connected to one another. And, of course,

00:44:00.925 --> 00:44:01.965
<v Speaker 1>you can get the details.

00:44:02.619 --> 00:44:04.700
<v Speaker 1>You could hover over them and view them.

00:44:04.700 --> 00:44:06.780
<v Speaker 1>And then, again, you can click directly into

00:44:06.780 --> 00:44:07.340
<v Speaker 1>them,

00:44:07.660 --> 00:44:10.780
<v Speaker 1>right, and get that much more granular view

00:44:10.859 --> 00:44:13.260
<v Speaker 1>of that particular resource. So the stateful set

00:44:13.260 --> 00:44:14.220
<v Speaker 1>Prometheus,

00:44:14.220 --> 00:44:15.820
<v Speaker 1>the CPU, all the way to the file

00:44:15.820 --> 00:44:16.220
<v Speaker 1>system.

00:44:16.825 --> 00:44:18.585
<v Speaker 1>Right? And, of course, we can jump into

00:44:18.585 --> 00:44:21.545
<v Speaker 1>this resource and make some configuration changes as

00:44:21.545 --> 00:44:22.025
<v Speaker 1>well.

00:44:23.305 --> 00:44:23.945
<v Speaker 1>So

00:44:24.185 --> 00:44:25.865
<v Speaker 1>many things we've covered already,

00:44:26.105 --> 00:44:27.785
<v Speaker 1>and the last thing I really wanna try

00:44:27.785 --> 00:44:28.345
<v Speaker 1>to

00:44:28.665 --> 00:44:31.065
<v Speaker 1>get into this demo is Lenspaces,

00:44:31.065 --> 00:44:31.785
<v Speaker 1>which is our

00:44:32.470 --> 00:44:33.270
<v Speaker 1>newest,

00:44:33.830 --> 00:44:36.230
<v Speaker 1>feature and release brought to Lens, and it's

00:44:36.230 --> 00:44:38.550
<v Speaker 1>actually a very, very cool release. Again, it's

00:44:38.550 --> 00:44:41.750
<v Speaker 1>a centralized cloud based offering that allows cluster

00:44:41.750 --> 00:44:42.630
<v Speaker 1>admins

00:44:42.630 --> 00:44:45.270
<v Speaker 1>the ability to create these secure spaces

00:44:45.845 --> 00:44:48.085
<v Speaker 1>that allows you to share access to a

00:44:48.085 --> 00:44:49.285
<v Speaker 1>Kubernetes cluster.

00:44:49.924 --> 00:44:51.605
<v Speaker 1>So you're not giving anybody access to your

00:44:51.605 --> 00:44:52.565
<v Speaker 1>KubeConfig.

00:44:52.644 --> 00:44:54.484
<v Speaker 1>You're actually just giving them access to the

00:44:54.484 --> 00:44:56.964
<v Speaker 1>cluster. And, initially, it's just like a read

00:44:56.964 --> 00:44:57.685
<v Speaker 1>only.

00:44:57.765 --> 00:44:59.525
<v Speaker 1>Right? And then you would actually have to

00:44:59.580 --> 00:45:01.820
<v Speaker 1>change the role bindings and and the roles

00:45:01.820 --> 00:45:04.380
<v Speaker 1>within that cluster and that QConfig file to

00:45:04.380 --> 00:45:06.780
<v Speaker 1>give them further access. So for example, if

00:45:06.780 --> 00:45:08.300
<v Speaker 1>I wanted to give developers,

00:45:08.620 --> 00:45:10.540
<v Speaker 1>access to a Kubernetes cluster, maybe they want

00:45:10.540 --> 00:45:12.540
<v Speaker 1>a few logs of a microservice or something

00:45:12.540 --> 00:45:14.995
<v Speaker 1>along these lines, they can do so once

00:45:14.995 --> 00:45:17.075
<v Speaker 1>you make a little bit of changes

00:45:17.075 --> 00:45:18.355
<v Speaker 1>to the kube config.

00:45:18.595 --> 00:45:20.835
<v Speaker 1>So from here, what I'm going to do

00:45:21.235 --> 00:45:23.235
<v Speaker 1>is I'm going to create a space. I'll

00:45:23.235 --> 00:45:24.595
<v Speaker 1>click this plus icon.

00:45:25.635 --> 00:45:26.995
<v Speaker 1>We're gonna call it Rawkode.

00:45:28.029 --> 00:45:29.070
<v Speaker 1>Good name.

00:45:29.950 --> 00:45:31.230
<v Speaker 1>Not create space.

00:45:32.109 --> 00:45:33.470
<v Speaker 1>Ah, I know why.

00:45:33.789 --> 00:45:35.869
<v Speaker 1>It's because I have too many spaces.

00:45:37.390 --> 00:45:39.630
<v Speaker 1>Let's go to my profile, spaces.

00:45:43.035 --> 00:45:44.395
<v Speaker 1>We can leave that one,

00:45:45.194 --> 00:45:47.595
<v Speaker 1>and we'll leave this one as well.

00:45:49.674 --> 00:45:51.355
<v Speaker 1>K. Now let's create a new space.

00:45:58.700 --> 00:46:00.300
<v Speaker 1>Could not create space.

00:46:00.460 --> 00:46:02.700
<v Speaker 0>Is it because my username is Rawkode?

00:46:03.339 --> 00:46:05.819
<v Speaker 1>No. No. I I don't think so. Let's

00:46:05.819 --> 00:46:06.140
<v Speaker 1>try.

00:46:11.415 --> 00:46:13.575
<v Speaker 1>I think it has to do with,

00:46:13.815 --> 00:46:17.175
<v Speaker 1>how many spaces and clusters I've shared.

00:46:17.735 --> 00:46:19.015
<v Speaker 1>Let's try IoT.

00:46:19.495 --> 00:46:20.215
<v Speaker 1>Wow.

00:46:21.335 --> 00:46:23.015
<v Speaker 1>Maybe it does have something to do with

00:46:23.015 --> 00:46:24.860
<v Speaker 1>your with your username. I'm gonna have to

00:46:24.860 --> 00:46:26.220
<v Speaker 1>take that back to the team and and

00:46:26.220 --> 00:46:28.700
<v Speaker 1>see exactly what happened here,

00:46:29.820 --> 00:46:32.460
<v Speaker 1>because that is a little bit alarming.

00:46:33.260 --> 00:46:33.980
<v Speaker 1>Anyways,

00:46:34.140 --> 00:46:36.474
<v Speaker 1>now that we've created our space, what we

00:46:36.474 --> 00:46:38.234
<v Speaker 1>can do is we can actually add our

00:46:38.234 --> 00:46:40.875
<v Speaker 1>cluster directly to this space. So if I

00:46:40.875 --> 00:46:43.435
<v Speaker 1>take this Minikube cluster, I can share it,

00:46:46.395 --> 00:46:48.315
<v Speaker 1>and we can share it to this IoT

00:46:48.315 --> 00:46:48.875
<v Speaker 1>space.

00:46:50.530 --> 00:46:52.050
<v Speaker 1>Here, what we need to do is we

00:46:52.050 --> 00:46:54.690
<v Speaker 1>actually need to install cluster connect directly to

00:46:54.690 --> 00:46:57.090
<v Speaker 1>our cluster. This creates an end to end

00:46:57.090 --> 00:46:58.130
<v Speaker 1>encrypted

00:46:58.130 --> 00:46:59.570
<v Speaker 1>tunneling between,

00:46:59.890 --> 00:47:02.610
<v Speaker 1>the cluster and the API itself. So clicking

00:47:02.610 --> 00:47:04.930
<v Speaker 1>here, install cluster and share.

00:47:12.444 --> 00:47:14.765
<v Speaker 1>So we've added that to our cluster.

00:47:14.845 --> 00:47:16.285
<v Speaker 1>Now what I actually have to do is

00:47:16.285 --> 00:47:18.684
<v Speaker 1>I need to invite David to this space,

00:47:18.684 --> 00:47:20.045
<v Speaker 1>and then he'll be able to see the

00:47:20.045 --> 00:47:21.810
<v Speaker 1>space and have some,

00:47:22.210 --> 00:47:24.770
<v Speaker 1>access to that Kubernetes cluster. Again, it's read

00:47:24.770 --> 00:47:25.810
<v Speaker 1>only initially.

00:47:25.890 --> 00:47:28.450
<v Speaker 1>You would have to alter the role binding,

00:47:28.770 --> 00:47:30.450
<v Speaker 1>and the R back to be able to

00:47:30.450 --> 00:47:32.450
<v Speaker 1>actually give him further access to that to

00:47:32.450 --> 00:47:33.330
<v Speaker 1>that cluster itself.

00:47:33.835 --> 00:47:35.995
<v Speaker 1>It's quite secure. So Could we have a

00:47:35.995 --> 00:47:37.515
<v Speaker 0>a question on that in the chat if

00:47:37.515 --> 00:47:40.395
<v Speaker 0>you're happy to Sure. Sure. So Russell

00:47:40.395 --> 00:47:41.195
<v Speaker 0>asking,

00:47:41.195 --> 00:47:44.075
<v Speaker 0>is the authentication mechanism using RBAC or something

00:47:44.075 --> 00:47:45.115
<v Speaker 0>else entirely?

00:47:45.355 --> 00:47:47.035
<v Speaker 0>So I think what Russell is asking there

00:47:47.035 --> 00:47:48.860
<v Speaker 0>is when we install

00:47:49.100 --> 00:47:50.140
<v Speaker 0>ClusterConnect,

00:47:50.140 --> 00:47:51.660
<v Speaker 0>is it creating

00:47:51.660 --> 00:47:55.340
<v Speaker 0>an RBAC, a role and a service account?

00:47:55.340 --> 00:47:56.460
<v Speaker 1>It is. Okay.

00:47:56.780 --> 00:47:59.420
<v Speaker 1>It is. Yes. It absolutely is. So now

00:47:59.420 --> 00:47:59.900
<v Speaker 1>we'll click.

00:48:00.785 --> 00:48:02.465
<v Speaker 1>This is you, correct, David? I believe it

00:48:02.465 --> 00:48:04.785
<v Speaker 1>is. Well, I'll ask you. That is me.

00:48:04.785 --> 00:48:05.505
<v Speaker 0>That's me.

00:48:05.985 --> 00:48:07.665
<v Speaker 1>And we'll click share cluster.

00:48:09.265 --> 00:48:11.505
<v Speaker 1>So I've sent you the invite,

00:48:11.825 --> 00:48:13.505
<v Speaker 1>and what I will do now is I

00:48:13.505 --> 00:48:16.060
<v Speaker 1>will actually stop sharing, and if you can

00:48:16.060 --> 00:48:17.020
<v Speaker 1>begin sharing,

00:48:17.500 --> 00:48:19.500
<v Speaker 1>Lens and your screen, and we can go

00:48:19.500 --> 00:48:20.140
<v Speaker 1>from there.

00:48:20.940 --> 00:48:21.740
<v Speaker 1>Done.

00:48:22.380 --> 00:48:23.660
<v Speaker 1>So jumping back.

00:48:24.460 --> 00:48:26.780
<v Speaker 1>Stop sharing. You know, I almost clicked hang

00:48:26.780 --> 00:48:27.900
<v Speaker 1>up. That was a close

00:48:28.434 --> 00:48:29.715
<v Speaker 1>Wouldn't be the first time.

00:48:30.035 --> 00:48:31.475
<v Speaker 1>I can see your screen.

00:48:31.795 --> 00:48:32.435
<v Speaker 1>You

00:48:33.155 --> 00:48:34.674
<v Speaker 1>said it wouldn't be the first time? Yeah.

00:48:34.674 --> 00:48:36.434
<v Speaker 0>I've been hung up on before and not

00:48:36.434 --> 00:48:38.755
<v Speaker 0>intentionally. Of course. Of course. But I That's

00:48:38.755 --> 00:48:40.914
<v Speaker 1>that's funny. So from here, what you'll have

00:48:40.914 --> 00:48:42.674
<v Speaker 1>to do actually is you'll navigate to the

00:48:42.674 --> 00:48:45.180
<v Speaker 1>Rawk on the bottom right. You're using it,

00:48:45.740 --> 00:48:47.820
<v Speaker 1>and you'll click my profile.

00:48:48.940 --> 00:48:50.620
<v Speaker 1>And here, you'll click spaces,

00:48:51.420 --> 00:48:53.100
<v Speaker 1>and then you should see an invitation to

00:48:53.100 --> 00:48:53.900
<v Speaker 1>that space.

00:48:54.140 --> 00:48:56.220
<v Speaker 1>Once you accept that invitation,

00:48:56.220 --> 00:48:58.780
<v Speaker 1>you can navigate back to your catalog

00:48:58.704 --> 00:49:01.345
<v Speaker 1>where that space now lives in that, like,

00:49:01.345 --> 00:49:02.785
<v Speaker 1>directory that we mentioned,

00:49:03.665 --> 00:49:05.585
<v Speaker 1>and just clicking that x icon at the

00:49:05.585 --> 00:49:07.345
<v Speaker 1>top right will allow you to do so.

00:49:07.345 --> 00:49:09.505
<v Speaker 0>It created a default space of my username.

00:49:09.505 --> 00:49:11.505
<v Speaker 0>I think that Yeah. That explains why That

00:49:11.505 --> 00:49:12.145
<v Speaker 1>is what

00:49:13.744 --> 00:49:15.180
<v Speaker 1>happened. That is what happened. Yes. Yes. Yes.

00:49:15.180 --> 00:49:16.300
<v Speaker 1>That is what happened.

00:49:16.940 --> 00:49:18.780
<v Speaker 1>And then catalog exactly.

00:49:19.420 --> 00:49:19.980
<v Speaker 1>And

00:49:20.940 --> 00:49:22.780
<v Speaker 1>there you can see those clusters.

00:49:23.020 --> 00:49:24.540
<v Speaker 1>Right? The Lenspace cluster

00:49:25.704 --> 00:49:28.665
<v Speaker 1>from here. And it looks like it added,

00:49:28.984 --> 00:49:30.585
<v Speaker 1>your own clusters already,

00:49:31.065 --> 00:49:32.825
<v Speaker 1>to to Lens. At at least that's what

00:49:32.825 --> 00:49:34.825
<v Speaker 1>it looks like. So clicking that,

00:49:36.905 --> 00:49:39.305
<v Speaker 1>and then you can click click to open

00:49:40.869 --> 00:49:43.270
<v Speaker 1>on that big m I button on the

00:49:43.270 --> 00:49:43.750
<v Speaker 1>left.

00:49:44.070 --> 00:49:45.830
<v Speaker 0>Oh, right. Yep.

00:49:46.070 --> 00:49:48.310
<v Speaker 1>And then it's gonna begin opening that cluster

00:49:48.310 --> 00:49:51.590
<v Speaker 1>itself directly to your Lens desktop application.

00:49:51.670 --> 00:49:53.109
<v Speaker 1>Remember guys,

00:49:53.270 --> 00:49:55.430
<v Speaker 1>it's only read access initially, so he will

00:49:55.430 --> 00:49:57.595
<v Speaker 1>not be able to perform specific functions. That's

00:49:57.595 --> 00:49:59.195
<v Speaker 1>why he doesn't see the Prometheus.

00:49:59.195 --> 00:50:00.475
<v Speaker 1>Let's see if you can even take a

00:50:00.475 --> 00:50:01.675
<v Speaker 1>look at the nodes.

00:50:07.035 --> 00:50:09.115
<v Speaker 1>I'm curious. It does show you.

00:50:10.050 --> 00:50:11.810
<v Speaker 1>But if you tried to do any admin

00:50:11.810 --> 00:50:12.930
<v Speaker 1>functions here,

00:50:13.090 --> 00:50:15.170
<v Speaker 1>like drain the node or shell into the

00:50:15.170 --> 00:50:16.930
<v Speaker 1>pod or something along these lines You feeling

00:50:16.930 --> 00:50:17.490
<v Speaker 1>brave?

00:50:18.050 --> 00:50:19.010
<v Speaker 1>Try it.

00:50:22.210 --> 00:50:22.850
<v Speaker 0>Dreads.

00:50:27.975 --> 00:50:29.335
<v Speaker 1>Well, excellent.

00:50:29.415 --> 00:50:29.815
<v Speaker 1>So,

00:50:30.215 --> 00:50:31.815
<v Speaker 1>as you guys can see,

00:50:32.375 --> 00:50:33.015
<v Speaker 1>we

00:50:34.055 --> 00:50:36.890
<v Speaker 1>shared a space with David and,

00:50:37.370 --> 00:50:39.450
<v Speaker 1>added that cluster to that space, and now

00:50:39.450 --> 00:50:42.330
<v Speaker 1>he had access to that cluster itself,

00:50:42.330 --> 00:50:44.490
<v Speaker 1>which is so, so cool. Yeah. He can

00:50:44.490 --> 00:50:46.090
<v Speaker 1>view some of the resources, some of the

00:50:46.090 --> 00:50:48.010
<v Speaker 1>pods, some of the objects here, but he

00:50:48.010 --> 00:50:50.535
<v Speaker 1>won't be able to perform anything that can

00:50:50.535 --> 00:50:51.734
<v Speaker 1>scare us. See if you can view the

00:50:51.734 --> 00:50:52.775
<v Speaker 1>logs, David.

00:50:55.655 --> 00:50:56.935
<v Speaker 1>On the top right.

00:50:57.974 --> 00:51:00.295
<v Speaker 0>Yeah. There it is. Yeah. One over. Yep.

00:51:04.250 --> 00:51:06.010
<v Speaker 1>Nope. I don't think so.

00:51:06.250 --> 00:51:07.050
<v Speaker 0>Okay.

00:51:07.050 --> 00:51:08.810
<v Speaker 0>We don't have any, I guess.

00:51:09.770 --> 00:51:11.849
<v Speaker 1>Or or that could be the case. Yeah.

00:51:11.849 --> 00:51:13.210
<v Speaker 1>What are we looking at?

00:51:14.410 --> 00:51:15.210
<v Speaker 1>WordPress.

00:51:15.290 --> 00:51:17.290
<v Speaker 0>It looks like your WordPress is finally happy.

00:51:18.665 --> 00:51:19.305
<v Speaker 1>Now?

00:51:21.385 --> 00:51:23.065
<v Speaker 0>Think it's didn't wanna be.

00:51:27.145 --> 00:51:30.265
<v Speaker 0>Yeah. Hold on. Let's see. Let's

00:51:30.265 --> 00:51:31.305
<v Speaker 1>see. I'm curious.

00:51:35.110 --> 00:51:37.110
<v Speaker 1>It's the spinning wheel of death. When that

00:51:37.110 --> 00:51:39.750
<v Speaker 1>happens on my MacBook, I wanna cry sometimes.

00:51:41.030 --> 00:51:42.870
<v Speaker 0>Yeah. Maybe I don't have permissions to set

00:51:42.870 --> 00:51:43.750
<v Speaker 0>up a port forward.

00:51:44.555 --> 00:51:45.515
<v Speaker 1>Exactly.

00:51:45.515 --> 00:51:48.955
<v Speaker 1>Exactly. I am actually releasing a blog where

00:51:48.955 --> 00:51:51.515
<v Speaker 1>I have a guide on how to give

00:51:51.755 --> 00:51:53.995
<v Speaker 1>new permissions directly to

00:51:54.795 --> 00:51:56.955
<v Speaker 1>a user that wants it for for their

00:51:56.955 --> 00:51:59.050
<v Speaker 1>specific space. Oh, you can use the logs.

00:51:59.050 --> 00:52:00.890
<v Speaker 0>Yes. NGINX doesn't have any logs, but the

00:52:00.890 --> 00:52:02.970
<v Speaker 0>WordPress app definitely does seem to have some.

00:52:02.970 --> 00:52:04.410
<v Speaker 0>So there we go.

00:52:05.450 --> 00:52:06.330
<v Speaker 0>That's cool.

00:52:06.890 --> 00:52:08.809
<v Speaker 0>So this is your local cluster on your

00:52:08.809 --> 00:52:11.290
<v Speaker 0>own machine that you're sharing to me via

00:52:11.530 --> 00:52:12.570
<v Speaker 0>Lenspaces.

00:52:13.050 --> 00:52:13.450
<v Speaker 1>Exactly.

00:52:16.225 --> 00:52:19.105
<v Speaker 1>Yeah. Exactly. And, again, that's done by cluster

00:52:19.105 --> 00:52:19.905
<v Speaker 1>connect,

00:52:19.985 --> 00:52:21.505
<v Speaker 1>which is an end to end encryption that

00:52:21.505 --> 00:52:23.585
<v Speaker 1>creates that tunneling that that we talked about

00:52:23.585 --> 00:52:24.305
<v Speaker 1>already.

00:52:25.025 --> 00:52:27.025
<v Speaker 1>What kind of technology is the tunnel using?

00:52:27.025 --> 00:52:28.145
<v Speaker 1>Something like WireGuard?

00:52:29.380 --> 00:52:32.260
<v Speaker 1>That's actually an excellent question, the FireFlash.

00:52:32.500 --> 00:52:34.340
<v Speaker 1>I don't have that answer for you right

00:52:34.340 --> 00:52:36.820
<v Speaker 1>now, and I apologize for that. I do

00:52:36.820 --> 00:52:38.420
<v Speaker 1>know it's a Damian set, but I do

00:52:38.420 --> 00:52:41.300
<v Speaker 1>not know exactly what the technology is itself.

00:52:41.700 --> 00:52:42.980
<v Speaker 1>But you can access

00:52:43.494 --> 00:52:46.455
<v Speaker 1>the open source technology, which is called BoardD.

00:52:46.775 --> 00:52:48.615
<v Speaker 1>It's created by Team Lens, and you can

00:52:48.615 --> 00:52:49.175
<v Speaker 1>actually

00:52:49.815 --> 00:52:51.415
<v Speaker 1>spin this up on your own. So it

00:52:51.415 --> 00:52:53.495
<v Speaker 1>doesn't have to be used for Lenspaces.

00:52:54.295 --> 00:52:56.775
<v Speaker 1>So I know that doesn't answer your question,

00:52:56.775 --> 00:52:58.695
<v Speaker 1>and I apologize for that, but you can

00:52:58.695 --> 00:52:59.980
<v Speaker 1>access four d

00:53:00.460 --> 00:53:02.540
<v Speaker 1>and just grab it and be able to

00:53:02.540 --> 00:53:05.820
<v Speaker 1>actually create this similar experience without Lenspaces.

00:53:07.260 --> 00:53:09.100
<v Speaker 0>I tried to edit your surface, but I

00:53:09.100 --> 00:53:10.300
<v Speaker 0>got permission to find.

00:53:10.860 --> 00:53:12.060
<v Speaker 1>Dang. Good.

00:53:12.220 --> 00:53:12.540
<v Speaker 1>Good.

00:53:13.464 --> 00:53:15.945
<v Speaker 0>I like I like that. Lens spaces is

00:53:15.945 --> 00:53:18.745
<v Speaker 0>pretty nice. That was well, it was seamless.

00:53:18.825 --> 00:53:20.825
<v Speaker 0>Just opening up Yeah. It's joining it and

00:53:20.825 --> 00:53:23.704
<v Speaker 0>then poking around like a very curious rabbit,

00:53:23.704 --> 00:53:24.665
<v Speaker 0>but very nice.

00:53:25.065 --> 00:53:27.620
<v Speaker 1>Yeah. Yeah. Yeah. And this is something that

00:53:27.620 --> 00:53:28.340
<v Speaker 1>I think,

00:53:28.740 --> 00:53:29.140
<v Speaker 1>many

00:53:29.700 --> 00:53:32.340
<v Speaker 1>of us may have troubles with, whether you're

00:53:32.340 --> 00:53:34.820
<v Speaker 1>a cluster admin or a developer needing access

00:53:34.820 --> 00:53:36.740
<v Speaker 1>to to a QConfig file. Because we're never

00:53:36.740 --> 00:53:38.980
<v Speaker 1>giving you access to the QConfig file. Right?

00:53:38.980 --> 00:53:41.060
<v Speaker 1>You're getting access to that space. And based

00:53:41.060 --> 00:53:43.255
<v Speaker 1>off of the RBAC and the role bindings,

00:53:43.255 --> 00:53:45.175
<v Speaker 1>you can give them further access to that

00:53:45.175 --> 00:53:45.895
<v Speaker 1>cluster,

00:53:46.295 --> 00:53:49.335
<v Speaker 1>which is super, super useful. And, as mentioned,

00:53:49.335 --> 00:53:51.735
<v Speaker 1>I am releasing a blog, either today or

00:53:51.735 --> 00:53:52.455
<v Speaker 1>tomorrow.

00:53:52.855 --> 00:53:54.535
<v Speaker 1>It'll be on my Medium channel and on

00:53:54.535 --> 00:53:56.615
<v Speaker 1>Team Lens where I actually have a guide

00:53:56.615 --> 00:53:58.920
<v Speaker 1>on how to give the correct role bindings,

00:53:58.920 --> 00:54:00.920
<v Speaker 1>let's say, for a developer that wants to

00:54:00.920 --> 00:54:01.640
<v Speaker 1>access,

00:54:02.040 --> 00:54:04.119
<v Speaker 1>a Kubelet namespace or something along these lines

00:54:04.119 --> 00:54:06.119
<v Speaker 1>or a default namespace or whatever the namespace

00:54:06.119 --> 00:54:06.920
<v Speaker 1>may be,

00:54:07.240 --> 00:54:08.680
<v Speaker 1>and a specific team.

00:54:09.160 --> 00:54:10.680
<v Speaker 1>So one thing we didn't take a look

00:54:10.680 --> 00:54:12.600
<v Speaker 1>at here is I just added you as

00:54:12.600 --> 00:54:14.635
<v Speaker 1>a member, but you can actually create a

00:54:14.635 --> 00:54:17.275
<v Speaker 1>team within that space, and then that team

00:54:17.355 --> 00:54:19.035
<v Speaker 1>will be given specific

00:54:19.035 --> 00:54:19.914
<v Speaker 1>permissions

00:54:19.914 --> 00:54:21.835
<v Speaker 1>based again off that role binding that we

00:54:21.835 --> 00:54:24.555
<v Speaker 1>would do, to the KubeConfig file itself.

00:54:24.795 --> 00:54:25.035
<v Speaker 1>So

00:54:25.830 --> 00:54:27.510
<v Speaker 1>you're just a member right now, but if

00:54:27.510 --> 00:54:29.430
<v Speaker 1>I created a team for developers and then

00:54:29.430 --> 00:54:30.950
<v Speaker 1>I added that particular

00:54:30.950 --> 00:54:33.270
<v Speaker 1>command line and that snippet, that code itself,

00:54:34.390 --> 00:54:36.230
<v Speaker 1>I can easily give you

00:54:37.350 --> 00:54:41.110
<v Speaker 1>specific access to namespaces and so forth, whatever

00:54:40.815 --> 00:54:43.214
<v Speaker 1>functions you're trying to perform to that cluster.

00:54:43.214 --> 00:54:46.015
<v Speaker 1>So we're seeing many users, leveraging this for,

00:54:46.015 --> 00:54:48.335
<v Speaker 1>let's say, for example, viewing logs of microservices

00:54:48.335 --> 00:54:51.535
<v Speaker 1>or applications and so forth so forth. Right?

00:54:51.855 --> 00:54:53.694
<v Speaker 1>So extremely useful, and I think we all

00:54:53.694 --> 00:54:54.734
<v Speaker 1>know how challenging

00:54:55.110 --> 00:54:57.750
<v Speaker 1>sharing access to a Kubernetes cluster may be.

00:54:57.910 --> 00:54:59.590
<v Speaker 1>Viral, VPNs,

00:54:59.830 --> 00:55:02.470
<v Speaker 1>air gap tunneling, all these different parameters

00:55:02.470 --> 00:55:03.750
<v Speaker 1>that we need to jump through in the

00:55:03.750 --> 00:55:05.590
<v Speaker 1>hoop hoop. So this is why we develop

00:55:05.590 --> 00:55:07.990
<v Speaker 1>Length Spaces because we're hoping that it actually

00:55:07.990 --> 00:55:08.550
<v Speaker 1>helps

00:55:09.565 --> 00:55:12.045
<v Speaker 1>our users and the cloud native ecosystem.

00:55:14.045 --> 00:55:16.125
<v Speaker 0>Nice. Very, very cool. I like this a

00:55:16.125 --> 00:55:16.685
<v Speaker 0>lot.

00:55:17.565 --> 00:55:18.525
<v Speaker 0>So well,

00:55:19.725 --> 00:55:21.405
<v Speaker 0>it looks like we got a comment. Maybe

00:55:21.405 --> 00:55:23.085
<v Speaker 0>it's from someone on your team, Ty Martin?

00:55:23.900 --> 00:55:25.900
<v Speaker 1>I've never met Tai Martin. No. So but

00:55:25.900 --> 00:55:28.540
<v Speaker 1>that's agent's model is an outbound connection to

00:55:28.540 --> 00:55:30.220
<v Speaker 1>the Spaces service, which works as a secure

00:55:30.220 --> 00:55:31.820
<v Speaker 1>proxy. That is correct. Yes.

00:55:32.460 --> 00:55:33.980
<v Speaker 0>There we go. Thank you, Tai.

00:55:34.300 --> 00:55:36.460
<v Speaker 1>Is there a favorite place to search for

00:55:36.460 --> 00:55:38.860
<v Speaker 1>extensions? Absolutely, Daniel. So

00:55:39.125 --> 00:55:41.285
<v Speaker 1>the best way to access extensions is actually

00:55:41.285 --> 00:55:43.125
<v Speaker 1>what I showcased. So if you just go

00:55:43.125 --> 00:55:44.244
<v Speaker 1>to the Lens application,

00:55:44.645 --> 00:55:46.165
<v Speaker 1>go to that extensions,

00:55:46.645 --> 00:55:49.684
<v Speaker 1>icon, it will link you directly to,

00:55:50.005 --> 00:55:52.805
<v Speaker 1>all of the publicly made available extensions that

00:55:52.805 --> 00:55:54.964
<v Speaker 1>Team Lens has vetted of being safe.

00:55:57.420 --> 00:55:59.580
<v Speaker 1>This first line. We have another question by

00:55:59.580 --> 00:56:01.260
<v Speaker 1>Russell. I'll take a look at this. Can

00:56:01.260 --> 00:56:04.300
<v Speaker 1>Lens compare clusters? Example, a Teams test versus

00:56:04.300 --> 00:56:06.460
<v Speaker 1>live clusters to highlight differences.

00:56:06.860 --> 00:56:08.620
<v Speaker 1>No. I I do not believe we can

00:56:08.620 --> 00:56:09.900
<v Speaker 1>do that. No. But that's actually

00:56:11.195 --> 00:56:13.675
<v Speaker 1>really good feedback, and I'm going to take,

00:56:13.915 --> 00:56:16.075
<v Speaker 1>note of this if you guys don't mind,

00:56:18.235 --> 00:56:21.435
<v Speaker 1>because that's actually super interesting. Thanks for pointing

00:56:21.435 --> 00:56:23.195
<v Speaker 1>that out, Russell. But, no, we can't do

00:56:23.195 --> 00:56:24.955
<v Speaker 1>that as a right mark. That's first line

00:56:24.955 --> 00:56:25.835
<v Speaker 1>of authors

00:56:26.715 --> 00:56:28.380
<v Speaker 1>highlight a lot of

00:56:29.180 --> 00:56:31.740
<v Speaker 1>That's actually a super good idea. And and,

00:56:31.740 --> 00:56:34.060
<v Speaker 1>Kai, I also wanna thank you for jumping

00:56:34.060 --> 00:56:36.060
<v Speaker 1>in and answering that question for me. I

00:56:36.060 --> 00:56:38.460
<v Speaker 1>really do appreciate that. Thank you.

00:56:40.175 --> 00:56:41.615
<v Speaker 0>Sweet. Awesome.

00:56:41.935 --> 00:56:44.015
<v Speaker 0>Well, thank you very much for taking time

00:56:44.015 --> 00:56:45.695
<v Speaker 0>out of your day and and joining us

00:56:45.695 --> 00:56:46.255
<v Speaker 0>and

00:56:46.655 --> 00:56:48.815
<v Speaker 0>showing us all the features of Lens. I

00:56:48.815 --> 00:56:50.255
<v Speaker 0>think we can all agree it's a pretty

00:56:50.255 --> 00:56:51.215
<v Speaker 0>impressive tool.

00:56:51.375 --> 00:56:54.010
<v Speaker 0>I think the extension thing is awesome, and

00:56:54.010 --> 00:56:55.610
<v Speaker 0>I'd love to see what people come up

00:56:55.610 --> 00:56:58.090
<v Speaker 0>with there. There must be so many random

00:56:58.090 --> 00:56:58.810
<v Speaker 0>ideas

00:56:58.970 --> 00:57:00.810
<v Speaker 0>bouncing around in people's heads, and I can't

00:57:00.810 --> 00:57:01.770
<v Speaker 0>wait to see them. So

00:57:02.810 --> 00:57:06.170
<v Speaker 1>Yes. Agreed. Agreed. For example, cube cost has

00:57:06.170 --> 00:57:07.805
<v Speaker 1>a great one, which will tell you how

00:57:07.805 --> 00:57:10.285
<v Speaker 1>much you're spending on your Kubernetes clusters. Right?

00:57:10.365 --> 00:57:12.205
<v Speaker 1>It'll it'll break it down for you and

00:57:12.205 --> 00:57:13.885
<v Speaker 1>so forth. I mean, similar to what some

00:57:13.885 --> 00:57:15.805
<v Speaker 1>of these public cloud offerings do for us.

00:57:15.805 --> 00:57:18.525
<v Speaker 1>Right? But it's very, very cool. It's directly

00:57:18.605 --> 00:57:21.085
<v Speaker 1>intertwined with with Lens, and there's many different

00:57:21.085 --> 00:57:23.040
<v Speaker 1>extensions. So I agree with you. That's super

00:57:23.040 --> 00:57:25.600
<v Speaker 1>awesome. One thing I did wanna do, the

00:57:25.600 --> 00:57:27.520
<v Speaker 1>last thing, David, if you don't mind, is

00:57:27.520 --> 00:57:30.480
<v Speaker 1>just share a screen with our contact information

00:57:30.480 --> 00:57:32.640
<v Speaker 1>where people can find us, if they have

00:57:32.640 --> 00:57:34.160
<v Speaker 1>any questions for me, if they have questions

00:57:34.160 --> 00:57:35.520
<v Speaker 1>for the team, if they wanna join the

00:57:35.520 --> 00:57:37.200
<v Speaker 1>Slack channel, if they wanna receive a hoodie

00:57:37.355 --> 00:57:40.555
<v Speaker 1>as well. So Yeah. Go for it. Awesome.

00:57:40.555 --> 00:57:42.075
<v Speaker 1>So I'll share my screen one more time,

00:57:42.075 --> 00:57:42.635
<v Speaker 1>everybody.

00:57:43.355 --> 00:57:45.355
<v Speaker 1>I know we're at an hour now.

00:57:46.154 --> 00:57:48.954
<v Speaker 1>And last thing, here's where you can find

00:57:48.954 --> 00:57:49.355
<v Speaker 1>Lens.

00:57:49.930 --> 00:57:52.170
<v Speaker 1>You can also download it from our website.

00:57:52.250 --> 00:57:54.890
<v Speaker 1>There's my email at Morantis. Here's a Lens

00:57:54.890 --> 00:57:55.610
<v Speaker 1>email.

00:57:55.770 --> 00:57:58.170
<v Speaker 1>And join our Slack community, and feel free

00:57:58.170 --> 00:58:00.090
<v Speaker 1>to ping me. Just ping me on Slack

00:58:00.090 --> 00:58:02.865
<v Speaker 1>or ask questions on Slack. All of our

00:58:02.865 --> 00:58:04.545
<v Speaker 1>team members are there, and some of the

00:58:04.545 --> 00:58:07.425
<v Speaker 1>really core developers and contributors to the open

00:58:07.425 --> 00:58:10.385
<v Speaker 1>source project are there answering questions day after

00:58:10.385 --> 00:58:12.465
<v Speaker 1>day. And if you're interested in a hoodie

00:58:12.465 --> 00:58:14.385
<v Speaker 1>depending on where you are in the world,

00:58:14.780 --> 00:58:16.780
<v Speaker 1>I'm more than happy to send send you

00:58:16.780 --> 00:58:18.859
<v Speaker 1>guys some cool hoodies and swag.

00:58:19.099 --> 00:58:21.740
<v Speaker 1>We we want everybody to feel extremely welcome

00:58:21.740 --> 00:58:24.140
<v Speaker 1>to the community because, again, we could not

00:58:24.140 --> 00:58:26.619
<v Speaker 1>be where we are today without the amazing

00:58:26.619 --> 00:58:27.820
<v Speaker 1>cloud native ecosystem.

00:58:28.715 --> 00:58:30.795
<v Speaker 1>So thank you all again. And, David, thank

00:58:30.795 --> 00:58:31.275
<v Speaker 1>you.

00:58:32.315 --> 00:58:34.635
<v Speaker 0>Alright. I will definitely drop those links into

00:58:34.635 --> 00:58:36.715
<v Speaker 0>the show notes as well and the description.

00:58:36.715 --> 00:58:38.315
<v Speaker 0>So I'll make it easy for everyone to

00:58:38.315 --> 00:58:40.635
<v Speaker 0>click, get some information, and get the hoodie.

00:58:41.270 --> 00:58:42.310
<v Speaker 0>Alright. Well,

00:58:43.190 --> 00:58:45.670
<v Speaker 0>thank you again. Really cool product. Great seeing

00:58:45.670 --> 00:58:46.950
<v Speaker 0>that start to finish.

00:58:47.190 --> 00:58:48.950
<v Speaker 0>Everyone, go check it out. Let me know

00:58:48.950 --> 00:58:51.190
<v Speaker 0>how you get on. Join the Discord, and

00:58:51.190 --> 00:58:52.869
<v Speaker 0>I'll speak to you soon. Edward, thanks again.

00:58:52.869 --> 00:58:55.030
<v Speaker 0>Have a great day. Okay? You too. Thank

00:58:55.030 --> 00:58:55.510
<v Speaker 1>you. Bye bye.
