WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 417edaeb-410a-41d0-a53d-2c774791e3b4
Created: 2025-04-29T14:28:48.919Z
Duration: 1102.908
Channels: 1

00:00:00.000 --> 00:00:02.320
<v Speaker 0>Hello, and welcome back to the complete guide

00:00:02.320 --> 00:00:04.640
<v Speaker 0>to spin at the Rawkode Academy.

00:00:05.120 --> 00:00:06.960
<v Speaker 0>Today, we're taking a look at the Node

00:00:06.960 --> 00:00:08.320
<v Speaker 0>JS SDK.

00:00:08.880 --> 00:00:11.039
<v Speaker 0>Much like the other SDK walkthroughs,

00:00:11.040 --> 00:00:12.080
<v Speaker 0>we're gonna cover

00:00:12.394 --> 00:00:14.715
<v Speaker 0>everything that you need to get started right

00:00:14.715 --> 00:00:16.555
<v Speaker 0>in your first WebAssembly

00:00:16.555 --> 00:00:17.435
<v Speaker 0>microservice

00:00:17.435 --> 00:00:19.355
<v Speaker 0>web Vermeion spin.

00:00:19.914 --> 00:00:21.115
<v Speaker 0>Let's dive right in.

00:00:21.515 --> 00:00:24.715
<v Speaker 0>Alright. Let's get started with the Node. Js

00:00:24.715 --> 00:00:25.355
<v Speaker 0>SDK.

00:00:27.940 --> 00:00:29.860
<v Speaker 0>The most common things you'll need to do

00:00:29.860 --> 00:00:31.220
<v Speaker 0>with the Spin SDK

00:00:31.619 --> 00:00:32.340
<v Speaker 0>is

00:00:32.820 --> 00:00:34.020
<v Speaker 0>your first endpoint.

00:00:34.660 --> 00:00:36.900
<v Speaker 0>When you run Spin New, it generates a

00:00:36.900 --> 00:00:38.980
<v Speaker 0>simple endpoint that just says, hello.

00:00:40.665 --> 00:00:42.745
<v Speaker 0>I'll guide you through the code that is

00:00:42.745 --> 00:00:44.825
<v Speaker 0>involved and the setup to get that running

00:00:44.825 --> 00:00:45.625
<v Speaker 0>locally.

00:00:47.065 --> 00:00:50.585
<v Speaker 0>Next, we'll grab some HTTP request headers,

00:00:51.065 --> 00:00:53.545
<v Speaker 0>then the body, then the query params,

00:00:53.890 --> 00:00:54.930
<v Speaker 0>and lastly,

00:00:55.170 --> 00:00:57.329
<v Speaker 0>we'll speak to another service.

00:00:57.730 --> 00:01:00.210
<v Speaker 0>When you start to build out your microservices,

00:01:00.210 --> 00:01:02.850
<v Speaker 0>you're inevitably gonna wanna speak to, well, one,

00:01:02.850 --> 00:01:05.489
<v Speaker 0>other microservices or two, other things on the

00:01:05.489 --> 00:01:06.049
<v Speaker 0>Internet.

00:01:06.450 --> 00:01:07.765
<v Speaker 0>So I'll show you how to get started

00:01:07.765 --> 00:01:11.205
<v Speaker 0>using Spin's SDK for outbound HTTP connections.

00:01:12.885 --> 00:01:15.125
<v Speaker 0>If you need any help, please feel free

00:01:15.125 --> 00:01:17.284
<v Speaker 0>to drop into the comment section. I'll keep

00:01:17.284 --> 00:01:18.485
<v Speaker 0>an eye on it, and I'll do my

00:01:18.485 --> 00:01:19.604
<v Speaker 0>best to help you get on your way.

00:01:20.979 --> 00:01:23.299
<v Speaker 0>So let's start looking at code.

00:01:24.259 --> 00:01:26.100
<v Speaker 0>So the first thing we want to do,

00:01:26.579 --> 00:01:28.659
<v Speaker 0>from PMPM and so on,

00:01:29.619 --> 00:01:32.020
<v Speaker 0>or whatever package manager you prefer to use.

00:01:33.775 --> 00:01:35.615
<v Speaker 0>Now that we have our dependencies,

00:01:35.615 --> 00:01:37.695
<v Speaker 0>we can pop open our index dot t

00:01:37.695 --> 00:01:38.175
<v Speaker 0>s.

00:01:38.655 --> 00:01:41.055
<v Speaker 0>You'll see here that the Spin SDK exposes

00:01:41.055 --> 00:01:44.495
<v Speaker 0>handle request, HTTP request, and HTTP response.

00:01:45.880 --> 00:01:47.320
<v Speaker 0>The handle request

00:01:47.400 --> 00:01:49.640
<v Speaker 0>is just a type definition that describes the

00:01:49.640 --> 00:01:52.360
<v Speaker 0>function that handles an HTTP request and spits

00:01:52.360 --> 00:01:54.040
<v Speaker 0>back an HTTP response.

00:01:55.080 --> 00:01:57.320
<v Speaker 0>HTTP request and HTTP response

00:01:57.865 --> 00:01:59.865
<v Speaker 0>are just object that allow us to grab

00:01:59.865 --> 00:02:02.505
<v Speaker 0>information about the request and our response.

00:02:04.985 --> 00:02:05.625
<v Speaker 0>Simple.

00:02:07.065 --> 00:02:09.465
<v Speaker 0>Now because we're using TypeScript today,

00:02:09.865 --> 00:02:12.825
<v Speaker 0>we have really great language server protocol

00:02:13.470 --> 00:02:16.110
<v Speaker 0>and our IDEs understand the code inside and

00:02:16.110 --> 00:02:16.590
<v Speaker 0>out.

00:02:17.150 --> 00:02:19.310
<v Speaker 0>You can click on HTTP response, and you'll

00:02:19.310 --> 00:02:20.750
<v Speaker 0>see the interface definition.

00:02:21.470 --> 00:02:23.230
<v Speaker 0>The only thing to know is that our

00:02:23.230 --> 00:02:24.590
<v Speaker 0>body is in a rebuffer.

00:02:25.335 --> 00:02:27.415
<v Speaker 0>If you're not familiar with the semantics of

00:02:27.415 --> 00:02:28.295
<v Speaker 0>WebAssembly,

00:02:28.375 --> 00:02:29.255
<v Speaker 0>essentially,

00:02:29.495 --> 00:02:30.215
<v Speaker 0>everything

00:02:30.295 --> 00:02:32.695
<v Speaker 0>is an array of integers or bytes.

00:02:33.175 --> 00:02:34.375
<v Speaker 0>I think that's right.

00:02:34.775 --> 00:02:36.935
<v Speaker 0>So we can't just throw text back down

00:02:36.935 --> 00:02:37.335
<v Speaker 0>the pipe.

00:02:38.550 --> 00:02:41.270
<v Speaker 0>Hence, we use the text encoder to encode

00:02:41.270 --> 00:02:44.150
<v Speaker 0>a string value into the array buffer.

00:02:44.550 --> 00:02:47.430
<v Speaker 0>Other than that, you're just writing standard TypeScript

00:02:47.430 --> 00:02:48.230
<v Speaker 0>code.

00:02:49.750 --> 00:02:51.670
<v Speaker 0>Let's run this and see what it looks

00:02:51.670 --> 00:02:51.910
<v Speaker 0>like.

00:02:53.235 --> 00:02:55.555
<v Speaker 0>We can run spin build

00:02:59.555 --> 00:03:01.795
<v Speaker 0>to compile our web assembly module.

00:03:02.194 --> 00:03:04.115
<v Speaker 0>We can then run spin up

00:03:04.915 --> 00:03:05.954
<v Speaker 0>with follow all,

00:03:08.550 --> 00:03:10.790
<v Speaker 0>Make our first request to our Node. Js

00:03:10.790 --> 00:03:11.670
<v Speaker 0>service.

00:03:15.110 --> 00:03:16.710
<v Speaker 0>And that's going to return a four zero

00:03:16.710 --> 00:03:17.990
<v Speaker 0>four, because as you can see at the

00:03:17.990 --> 00:03:19.830
<v Speaker 0>top of my screen, the endpoint that we

00:03:19.830 --> 00:03:21.590
<v Speaker 0>need is slash hello.

00:03:22.525 --> 00:03:24.845
<v Speaker 0>Now we have our hello from the Node

00:03:24.845 --> 00:03:26.285
<v Speaker 0>JS SDK,

00:03:26.845 --> 00:03:28.125
<v Speaker 0>and that's pretty sweet.

00:03:28.365 --> 00:03:30.445
<v Speaker 0>Alright. Let's take a look at headers.

00:03:31.245 --> 00:03:32.605
<v Speaker 0>First thing we wanna do

00:03:33.965 --> 00:03:36.799
<v Speaker 0>is grab our header or at least a

00:03:36.799 --> 00:03:38.480
<v Speaker 0>header that we're going to provide

00:03:40.000 --> 00:03:41.440
<v Speaker 0>called x name.

00:03:43.840 --> 00:03:45.760
<v Speaker 0>I'm just gonna pass my own name in

00:03:45.760 --> 00:03:48.319
<v Speaker 0>as a request header and we're gonna transform

00:03:48.319 --> 00:03:51.439
<v Speaker 0>it and propagate it back onto the response

00:03:51.245 --> 00:03:53.085
<v Speaker 0>and then include it in the body.

00:03:53.725 --> 00:03:54.845
<v Speaker 0>Super exciting.

00:03:56.205 --> 00:03:58.205
<v Speaker 0>Now we're gonna add some debug here.

00:03:58.605 --> 00:04:01.805
<v Speaker 0>Name is x n, like so.

00:04:02.205 --> 00:04:05.245
<v Speaker 0>Where the warning console dot debug is not

00:04:05.245 --> 00:04:06.525
<v Speaker 0>supported and spin

00:04:07.030 --> 00:04:08.790
<v Speaker 0>with the Spin SDK.

00:04:08.950 --> 00:04:10.950
<v Speaker 0>So you'll get function not found.

00:04:13.110 --> 00:04:16.310
<v Speaker 0>Now let's modify the response headers to include

00:04:16.709 --> 00:04:17.830
<v Speaker 0>x name

00:04:18.790 --> 00:04:21.430
<v Speaker 0>where we do x name and we'll transform

00:04:21.430 --> 00:04:21.910
<v Speaker 0>it

00:04:22.695 --> 00:04:24.055
<v Speaker 0>just to uppercase.

00:04:24.295 --> 00:04:25.655
<v Speaker 0>Nothing exciting,

00:04:25.815 --> 00:04:27.815
<v Speaker 0>but enough that we're doing something with it

00:04:27.815 --> 00:04:29.015
<v Speaker 0>we can see visually.

00:04:29.975 --> 00:04:31.575
<v Speaker 0>We could see on our response.

00:04:32.695 --> 00:04:35.655
<v Speaker 0>Lastly, we'll update the body

00:04:38.509 --> 00:04:39.310
<v Speaker 0>like so.

00:04:40.190 --> 00:04:42.190
<v Speaker 0>There is a few things to note here.

00:04:42.750 --> 00:04:45.550
<v Speaker 0>One, this is standard TypeScript code with the

00:04:45.550 --> 00:04:48.110
<v Speaker 0>exception of console dot debug. Nothing else here

00:04:48.110 --> 00:04:51.389
<v Speaker 0>is unique. We assign with constant assignment.

00:04:52.975 --> 00:04:55.535
<v Speaker 0>We're using string functions on strings,

00:04:57.215 --> 00:04:58.255
<v Speaker 0>and we have

00:04:58.735 --> 00:05:01.935
<v Speaker 0>template literals where we can interpolate variables.

00:05:02.335 --> 00:05:06.175
<v Speaker 0>All standard Node. Js, JavaScript, TypeScript stuff.

00:05:09.600 --> 00:05:12.400
<v Speaker 0>Your dev loop, it's around spin build and

00:05:12.400 --> 00:05:13.280
<v Speaker 0>spin up.

00:05:13.520 --> 00:05:15.200
<v Speaker 0>And I would encourage that you add follow

00:05:15.200 --> 00:05:16.880
<v Speaker 0>all so you can see the logs on

00:05:16.880 --> 00:05:17.440
<v Speaker 0>the console.

00:05:18.574 --> 00:05:21.455
<v Speaker 0>This will compile your program to a web

00:05:21.455 --> 00:05:23.455
<v Speaker 0>assembly module or binary

00:05:24.895 --> 00:05:26.575
<v Speaker 0>where we can run curl.

00:05:26.975 --> 00:05:29.055
<v Speaker 0>I'm adding dash v so that we can

00:05:29.055 --> 00:05:30.575
<v Speaker 0>see the response headers,

00:05:30.895 --> 00:05:33.055
<v Speaker 0>and I'm gonna add my own header on

00:05:33.055 --> 00:05:33.615
<v Speaker 0>the request.

00:05:35.910 --> 00:05:37.510
<v Speaker 0>And we'll set that to David.

00:05:38.470 --> 00:05:41.430
<v Speaker 0>Now we can request local host 3,000

00:05:42.470 --> 00:05:44.710
<v Speaker 0>slash hello, which is the endpoint that we

00:05:44.710 --> 00:05:46.630
<v Speaker 0>have configured and the spin dot toml.

00:05:47.145 --> 00:05:48.585
<v Speaker 0>We'll take a look at that in just

00:05:48.585 --> 00:05:49.305
<v Speaker 0>a second.

00:05:51.145 --> 00:05:52.505
<v Speaker 0>As you can see here,

00:05:53.625 --> 00:05:55.705
<v Speaker 0>our console printed name

00:05:55.705 --> 00:05:56.745
<v Speaker 0>is David.

00:05:58.104 --> 00:06:00.345
<v Speaker 0>We can see the response header of x

00:06:00.345 --> 00:06:02.264
<v Speaker 0>name is David in uppercase,

00:06:03.010 --> 00:06:05.169
<v Speaker 0>as well as the original x name of

00:06:05.169 --> 00:06:07.170
<v Speaker 0>David in the body response.

00:06:08.210 --> 00:06:09.970
<v Speaker 0>Now the other thing to note here

00:06:11.250 --> 00:06:13.490
<v Speaker 0>is that the HTP framework is part of

00:06:13.490 --> 00:06:14.370
<v Speaker 0>Spin's SDK,

00:06:14.935 --> 00:06:17.815
<v Speaker 0>always lowercases all of the headers.

00:06:18.294 --> 00:06:20.854
<v Speaker 0>Even though I passed it in as x

00:06:20.854 --> 00:06:22.295
<v Speaker 0>name like so,

00:06:22.935 --> 00:06:24.935
<v Speaker 0>this would actually give us an error and

00:06:24.935 --> 00:06:25.735
<v Speaker 0>a crash

00:06:26.215 --> 00:06:28.695
<v Speaker 0>because that key does not exist on the

00:06:28.695 --> 00:06:30.215
<v Speaker 0>object or the record.

00:06:31.220 --> 00:06:33.540
<v Speaker 0>So just keep that in mind. Always lower

00:06:33.540 --> 00:06:35.620
<v Speaker 0>case your header names.

00:06:36.660 --> 00:06:39.220
<v Speaker 0>So that's headers. Hopefully, nice and simple,

00:06:39.460 --> 00:06:40.740
<v Speaker 0>but nice to understand

00:06:40.900 --> 00:06:42.900
<v Speaker 0>how to fetch them and how to use

00:06:42.900 --> 00:06:43.140
<v Speaker 0>them.

00:06:44.425 --> 00:06:45.145
<v Speaker 0>Okay.

00:06:45.545 --> 00:06:47.945
<v Speaker 0>Let's understand the request body.

00:06:49.625 --> 00:06:51.865
<v Speaker 0>Let's do body equals

00:06:51.865 --> 00:06:52.825
<v Speaker 0>request

00:06:53.305 --> 00:06:54.265
<v Speaker 0>dot body.

00:06:55.305 --> 00:06:58.030
<v Speaker 0>If we hover over the variable, we get

00:06:58.030 --> 00:07:00.750
<v Speaker 0>our intelligent information from the IDE.

00:07:00.830 --> 00:07:03.150
<v Speaker 0>So this is either on a rebuffer or

00:07:03.150 --> 00:07:04.110
<v Speaker 0>undefined.

00:07:05.710 --> 00:07:07.470
<v Speaker 0>So let's do good error checking.

00:07:08.830 --> 00:07:10.510
<v Speaker 0>And if we don't have a body,

00:07:11.550 --> 00:07:13.230
<v Speaker 0>we'll return

00:07:12.915 --> 00:07:15.315
<v Speaker 0>a 400 and say this is a bad

00:07:15.315 --> 00:07:16.115
<v Speaker 0>request.

00:07:16.915 --> 00:07:19.475
<v Speaker 0>Now we do a console log for body,

00:07:19.475 --> 00:07:21.395
<v Speaker 0>not to print it out, but just to

00:07:21.395 --> 00:07:24.915
<v Speaker 0>understand where the TypeScript compiler thinks we are.

00:07:25.475 --> 00:07:27.630
<v Speaker 0>We can hover over and we'll see that

00:07:27.630 --> 00:07:30.110
<v Speaker 0>it's narrowed the scope of the type.

00:07:30.430 --> 00:07:32.510
<v Speaker 0>And now knows that beyond this point, we

00:07:32.510 --> 00:07:34.110
<v Speaker 0>always have an array buffer.

00:07:34.590 --> 00:07:36.750
<v Speaker 0>And in fact, let's actually run this and

00:07:36.750 --> 00:07:38.190
<v Speaker 0>see what we get on the terminal.

00:07:40.344 --> 00:07:41.705
<v Speaker 0>So we're gonna run,

00:07:42.185 --> 00:07:45.384
<v Speaker 0>spin build, spin up, follow-up.

00:07:45.865 --> 00:07:47.225
<v Speaker 0>There's a pattern here.

00:07:48.104 --> 00:07:50.504
<v Speaker 0>Next, we'll run the curl and we'll just

00:07:50.504 --> 00:07:51.944
<v Speaker 0>keep the same stuff that we had from

00:07:51.944 --> 00:07:52.824
<v Speaker 0>the previous request.

00:07:54.560 --> 00:07:56.320
<v Speaker 0>And you'll see here that we have an

00:07:56.320 --> 00:07:57.760
<v Speaker 0>object array buffer.

00:07:58.320 --> 00:08:01.120
<v Speaker 0>We're not actually getting a string. Again, web

00:08:01.120 --> 00:08:03.920
<v Speaker 0>assembly works with integers and bytes.

00:08:05.120 --> 00:08:06.560
<v Speaker 0>So let's get a string.

00:08:09.445 --> 00:08:11.285
<v Speaker 0>The easiest way to do this is to

00:08:11.285 --> 00:08:13.125
<v Speaker 0>say body string equals

00:08:14.485 --> 00:08:15.445
<v Speaker 0>buffer

00:08:15.525 --> 00:08:16.645
<v Speaker 0>dot from

00:08:17.125 --> 00:08:19.845
<v Speaker 0>passing on our body

00:08:20.980 --> 00:08:22.420
<v Speaker 0>and calling to string.

00:08:23.700 --> 00:08:25.540
<v Speaker 0>Now we can do a console log of

00:08:25.540 --> 00:08:27.860
<v Speaker 0>body string, and for good measure,

00:08:28.980 --> 00:08:31.060
<v Speaker 0>we can include it on the body response.

00:08:36.035 --> 00:08:37.155
<v Speaker 0>We come back,

00:08:37.635 --> 00:08:38.674
<v Speaker 0>we build,

00:08:39.635 --> 00:08:40.355
<v Speaker 0>and we wait.

00:08:44.030 --> 00:08:46.110
<v Speaker 0>And why does it look like nothing happened?

00:08:47.390 --> 00:08:48.590
<v Speaker 0>Well, nothing did.

00:08:48.910 --> 00:08:50.990
<v Speaker 0>We can see a blank line coming through.

00:08:51.470 --> 00:08:53.630
<v Speaker 0>What do we need to do? Include a

00:08:53.630 --> 00:08:54.270
<v Speaker 0>body.

00:08:54.590 --> 00:08:56.590
<v Speaker 0>Well, let's do dash d, and we'll pass

00:08:56.590 --> 00:08:58.750
<v Speaker 0>through an empty JSON object.

00:09:00.185 --> 00:09:01.865
<v Speaker 0>Now we can see that the body is

00:09:01.865 --> 00:09:04.745
<v Speaker 0>printed above in the logs and as well

00:09:04.745 --> 00:09:06.105
<v Speaker 0>as in a response

00:09:06.185 --> 00:09:07.225
<v Speaker 0>on the bottom.

00:09:08.825 --> 00:09:09.545
<v Speaker 0>Perfect.

00:09:10.425 --> 00:09:11.945
<v Speaker 0>So let's take a look at one more

00:09:11.945 --> 00:09:13.945
<v Speaker 0>thing before we move on to query strings.

00:09:15.600 --> 00:09:17.600
<v Speaker 0>I'm going to define an interface

00:09:18.160 --> 00:09:19.680
<v Speaker 0>called request

00:09:19.680 --> 00:09:20.560
<v Speaker 0>body.

00:09:21.360 --> 00:09:23.520
<v Speaker 0>And that's I'm going to have a string

00:09:23.520 --> 00:09:24.320
<v Speaker 0>name.

00:09:25.520 --> 00:09:28.000
<v Speaker 0>Down here, I'm going to say that my

00:09:28.000 --> 00:09:30.400
<v Speaker 0>request body is equal

00:09:30.725 --> 00:09:32.085
<v Speaker 0>to my request

00:09:32.485 --> 00:09:33.525
<v Speaker 0>dot JSON.

00:09:35.365 --> 00:09:38.085
<v Speaker 0>Now we haven't done any type matching here,

00:09:38.245 --> 00:09:39.045
<v Speaker 0>which means

00:09:40.165 --> 00:09:42.245
<v Speaker 0>we don't get auto complete

00:09:42.245 --> 00:09:43.445
<v Speaker 0>on our request body.

00:09:44.300 --> 00:09:47.820
<v Speaker 0>But the JSON function will parse the body

00:09:48.060 --> 00:09:49.180
<v Speaker 0>of this JSON.

00:09:50.939 --> 00:09:51.660
<v Speaker 0>Now

00:09:51.899 --> 00:09:54.139
<v Speaker 0>we can't just say that this is our

00:09:54.139 --> 00:09:56.459
<v Speaker 0>request body. What we actually need to do

00:09:56.459 --> 00:09:57.259
<v Speaker 0>here

00:09:58.355 --> 00:10:01.315
<v Speaker 0>is choose TypeScript's concept of as

00:10:01.475 --> 00:10:02.834
<v Speaker 0>a request body.

00:10:03.555 --> 00:10:06.355
<v Speaker 0>Now down here, we can see got the

00:10:06.355 --> 00:10:06.995
<v Speaker 0>name

00:10:07.235 --> 00:10:08.915
<v Speaker 0>request body

00:10:08.995 --> 00:10:10.435
<v Speaker 0>with auto complete

00:10:11.075 --> 00:10:11.475
<v Speaker 0>name.

00:10:13.770 --> 00:10:15.850
<v Speaker 0>So let's run spin build

00:10:18.250 --> 00:10:20.010
<v Speaker 0>and send a curl request.

00:10:20.330 --> 00:10:21.930
<v Speaker 0>This time passing through

00:10:22.810 --> 00:10:24.170
<v Speaker 0>the body with JSON.

00:10:27.075 --> 00:10:29.154
<v Speaker 0>And we got the name David.

00:10:31.075 --> 00:10:33.555
<v Speaker 0>So let's send a call request this time

00:10:34.355 --> 00:10:35.315
<v Speaker 0>with that

00:10:36.355 --> 00:10:37.875
<v Speaker 0>and we get undefined.

00:10:38.595 --> 00:10:40.355
<v Speaker 0>So it's always wise to remember

00:10:40.890 --> 00:10:44.650
<v Speaker 0>that while you're developing and writing and TypeScript,

00:10:44.810 --> 00:10:47.610
<v Speaker 0>that all that type information disappears

00:10:47.610 --> 00:10:49.770
<v Speaker 0>off to the at runtime.

00:10:50.890 --> 00:10:53.050
<v Speaker 0>So if you do need to make sure

00:10:53.050 --> 00:10:55.210
<v Speaker 0>your types are valid at runtime,

00:10:55.575 --> 00:10:57.815
<v Speaker 0>I recommend checking out Zod.

00:10:59.415 --> 00:11:01.095
<v Speaker 0>You can do a PMPM

00:11:01.895 --> 00:11:02.855
<v Speaker 0>install Zod.

00:11:04.535 --> 00:11:05.495
<v Speaker 0>From there,

00:11:05.895 --> 00:11:07.815
<v Speaker 0>you can define your Zod object.

00:11:21.530 --> 00:11:23.930
<v Speaker 0>You can see that our request body equals

00:11:23.930 --> 00:11:24.730
<v Speaker 0>Zod object,

00:11:25.425 --> 00:11:26.785
<v Speaker 0>which has a shape

00:11:27.185 --> 00:11:28.385
<v Speaker 0>of Zod string.

00:11:30.625 --> 00:11:33.425
<v Speaker 0>Now instead of defining our interface as a

00:11:33.425 --> 00:11:34.385
<v Speaker 0>duplication,

00:11:34.625 --> 00:11:35.985
<v Speaker 0>we can remove this

00:11:36.545 --> 00:11:38.385
<v Speaker 0>and we can say type

00:11:40.279 --> 00:11:41.560
<v Speaker 0>request body,

00:11:42.200 --> 00:11:43.480
<v Speaker 0>sort of fair,

00:11:44.040 --> 00:11:45.880
<v Speaker 0>type of request body.

00:11:46.600 --> 00:11:48.839
<v Speaker 0>So now we have two definitions of request

00:11:48.839 --> 00:11:51.000
<v Speaker 0>body in the same scope. One is a

00:11:51.000 --> 00:11:53.080
<v Speaker 0>value and one is a type, and that's

00:11:53.080 --> 00:11:53.880
<v Speaker 0>okay in TypeScript.

00:11:54.955 --> 00:11:56.555
<v Speaker 0>So we can choose to leave this as

00:11:56.555 --> 00:11:57.275
<v Speaker 0>it is,

00:11:57.915 --> 00:12:00.635
<v Speaker 0>but use our request body value to do

00:12:00.635 --> 00:12:02.955
<v Speaker 0>a parse on the object and see if

00:12:02.955 --> 00:12:03.755
<v Speaker 0>it's valid.

00:12:04.155 --> 00:12:05.595
<v Speaker 0>And you can see Copilot

00:12:05.595 --> 00:12:07.355
<v Speaker 0>already there with the answer.

00:12:09.520 --> 00:12:10.960
<v Speaker 0>So let's recompile

00:12:14.160 --> 00:12:15.920
<v Speaker 0>and send our field request

00:12:19.280 --> 00:12:21.120
<v Speaker 0>once the server is listening.

00:12:22.880 --> 00:12:24.080
<v Speaker 0>And now

00:12:24.024 --> 00:12:26.024
<v Speaker 0>we have a big large error telling us

00:12:26.024 --> 00:12:27.545
<v Speaker 0>that our types are invalid.

00:12:27.625 --> 00:12:29.545
<v Speaker 0>This may not be the best approach,

00:12:30.185 --> 00:12:31.945
<v Speaker 0>especially for production systems.

00:12:32.345 --> 00:12:33.945
<v Speaker 0>So you can change this

00:12:34.584 --> 00:12:35.625
<v Speaker 0>to safe parts.

00:12:37.020 --> 00:12:38.700
<v Speaker 0>Now this won't crash,

00:12:39.100 --> 00:12:41.820
<v Speaker 0>but you will have to evaluate the response.

00:12:43.740 --> 00:12:45.660
<v Speaker 0>You can then use response

00:12:45.980 --> 00:12:47.180
<v Speaker 0>dot success

00:12:47.580 --> 00:12:49.900
<v Speaker 0>to decide if you need to continue or

00:12:49.900 --> 00:12:51.420
<v Speaker 0>present the user with an error.

00:12:53.505 --> 00:12:55.585
<v Speaker 0>So this audio is really cool. If you

00:12:55.585 --> 00:12:58.385
<v Speaker 0>need runtime type safety and your Node. Js

00:12:58.385 --> 00:12:59.505
<v Speaker 0>microservices,

00:12:59.905 --> 00:13:00.865
<v Speaker 0>check it out.

00:13:02.305 --> 00:13:03.745
<v Speaker 0>Let's move on to query strings.

00:13:04.630 --> 00:13:07.589
<v Speaker 0>Now there's nothing special provided for you to

00:13:07.589 --> 00:13:09.670
<v Speaker 0>handle a query string. You will have to

00:13:09.670 --> 00:13:12.070
<v Speaker 0>parse it through regular Node JS code,

00:13:12.790 --> 00:13:14.310
<v Speaker 0>which means we're gonna have to pull in

00:13:14.310 --> 00:13:15.670
<v Speaker 0>the QS library.

00:13:18.964 --> 00:13:21.685
<v Speaker 0>You can do PMPM install QS.

00:13:24.084 --> 00:13:26.885
<v Speaker 0>From here, we can import star as QS

00:13:26.885 --> 00:13:27.685
<v Speaker 0>from

00:13:28.084 --> 00:13:28.565
<v Speaker 0>QS.

00:13:33.590 --> 00:13:34.390
<v Speaker 0>Like so.

00:13:35.830 --> 00:13:37.350
<v Speaker 0>Now that we have QS,

00:13:38.230 --> 00:13:39.670
<v Speaker 0>we can parse

00:13:39.670 --> 00:13:40.550
<v Speaker 0>the query string.

00:13:42.405 --> 00:13:43.685
<v Speaker 0>Let's do a const

00:13:44.085 --> 00:13:47.205
<v Speaker 0>query string equals q s dot parse.

00:13:47.685 --> 00:13:50.085
<v Speaker 0>Now the thing that's important to remember here,

00:13:51.205 --> 00:13:53.045
<v Speaker 0>that we have a request URI,

00:13:53.525 --> 00:13:55.205
<v Speaker 0>but the query string library

00:13:55.765 --> 00:13:57.365
<v Speaker 0>splits on the ampersand,

00:13:57.770 --> 00:13:59.370
<v Speaker 0>which means we still have the path in

00:13:59.370 --> 00:14:01.530
<v Speaker 0>there. So we have to manually

00:14:02.570 --> 00:14:04.570
<v Speaker 0>split the path off.

00:14:04.970 --> 00:14:06.810
<v Speaker 0>So we can just do split

00:14:08.650 --> 00:14:10.330
<v Speaker 0>based on question mark

00:14:10.810 --> 00:14:12.330
<v Speaker 0>and then grab the right hand side.

00:14:13.875 --> 00:14:16.274
<v Speaker 0>Next, we can just do console log and

00:14:16.274 --> 00:14:17.555
<v Speaker 0>say hello

00:14:17.714 --> 00:14:18.595
<v Speaker 0>limit

00:14:19.074 --> 00:14:20.035
<v Speaker 0>limit

00:14:20.195 --> 00:14:20.995
<v Speaker 0>like so.

00:14:21.795 --> 00:14:24.274
<v Speaker 0>So let's set our limit to be equal

00:14:24.274 --> 00:14:25.875
<v Speaker 0>to query string

00:14:27.129 --> 00:14:28.730
<v Speaker 0>dot limit.

00:14:28.970 --> 00:14:31.209
<v Speaker 0>Well, that copilot pick a default 10.

00:14:32.089 --> 00:14:34.329
<v Speaker 0>Now we can use the syntax

00:14:34.329 --> 00:14:36.089
<v Speaker 0>because if we click on parse,

00:14:36.889 --> 00:14:39.209
<v Speaker 0>we see it returns a parse queues

00:14:39.665 --> 00:14:42.305
<v Speaker 0>and this is just a string indexable object.

00:14:42.704 --> 00:14:44.464
<v Speaker 0>So this should just work.

00:14:45.105 --> 00:14:47.985
<v Speaker 0>So let's build and run. We can do

00:14:47.985 --> 00:14:50.704
<v Speaker 0>spin build up and follow.

00:14:53.110 --> 00:14:54.710
<v Speaker 0>We can now do curl

00:14:55.350 --> 00:14:57.990
<v Speaker 0>local host 3,000

00:14:58.150 --> 00:14:59.270
<v Speaker 0>slash load,

00:15:00.070 --> 00:15:02.710
<v Speaker 0>and we see the default limit of 10.

00:15:03.670 --> 00:15:05.030
<v Speaker 0>In order to change this,

00:15:07.165 --> 00:15:09.084
<v Speaker 0>we have to quote our URL because of

00:15:09.084 --> 00:15:10.125
<v Speaker 0>the question mark

00:15:10.764 --> 00:15:13.084
<v Speaker 0>and set limit equals five.

00:15:13.805 --> 00:15:15.404
<v Speaker 0>And as you can see on the top,

00:15:15.485 --> 00:15:17.884
<v Speaker 0>we have the query string parsed and our

00:15:17.884 --> 00:15:18.764
<v Speaker 0>limit processed.

00:15:20.250 --> 00:15:23.850
<v Speaker 0>Alright. Last but not least, outbound HTTP.

00:15:25.050 --> 00:15:26.970
<v Speaker 0>You'll be pleased to know that you just

00:15:26.970 --> 00:15:29.770
<v Speaker 0>get to use the regular fetch API.

00:15:30.890 --> 00:15:32.250
<v Speaker 0>What does that mean? Well,

00:15:34.625 --> 00:15:37.265
<v Speaker 0>it means we get a const response

00:15:37.345 --> 00:15:38.305
<v Speaker 0>equals

00:15:38.385 --> 00:15:41.265
<v Speaker 0>await fetch tanker Copilot,

00:15:41.584 --> 00:15:45.105
<v Speaker 0>and let's actually just grab google.com.

00:15:47.060 --> 00:15:48.020
<v Speaker 0>That's it.

00:15:48.340 --> 00:15:50.340
<v Speaker 0>You'll see here, we have a response with

00:15:50.340 --> 00:15:51.540
<v Speaker 0>a fetch result.

00:15:52.900 --> 00:15:54.100
<v Speaker 0>So let's grab

00:15:54.900 --> 00:15:56.900
<v Speaker 0>the response body,

00:15:57.540 --> 00:15:59.380
<v Speaker 0>which equals await

00:15:59.700 --> 00:16:00.660
<v Speaker 0>response

00:16:00.820 --> 00:16:01.620
<v Speaker 0>dot text.

00:16:02.975 --> 00:16:05.055
<v Speaker 0>There's nothing new here. You don't need to

00:16:05.055 --> 00:16:08.415
<v Speaker 0>learn anything else. This is standard fetch API.

00:16:08.975 --> 00:16:12.255
<v Speaker 0>Let's do a console dot log response

00:16:12.894 --> 00:16:13.454
<v Speaker 0>body.

00:16:15.134 --> 00:16:15.935
<v Speaker 0>Next,

00:16:16.255 --> 00:16:18.700
<v Speaker 0>guess what we're gonna run? Spin,

00:16:18.700 --> 00:16:19.420
<v Speaker 0>build,

00:16:19.580 --> 00:16:20.940
<v Speaker 0>up, follow.

00:16:21.740 --> 00:16:23.820
<v Speaker 0>And we'll do a nice simple request,

00:16:24.540 --> 00:16:26.780
<v Speaker 0>local host 3,000

00:16:27.500 --> 00:16:27.820
<v Speaker 0>hello.

00:16:31.465 --> 00:16:34.105
<v Speaker 0>Now if you've seen the other walk throughs

00:16:34.105 --> 00:16:35.545
<v Speaker 0>for the other SDKs,

00:16:35.945 --> 00:16:38.665
<v Speaker 0>you'll see that we always had destination

00:16:38.665 --> 00:16:39.545
<v Speaker 0>not allowed.

00:16:40.025 --> 00:16:43.465
<v Speaker 0>Spin ships with secure default, which mean you

00:16:43.465 --> 00:16:46.040
<v Speaker 0>can only make outbound request to domains and

00:16:46.040 --> 00:16:49.000
<v Speaker 0>destinations that you specifically allow.

00:16:51.160 --> 00:16:53.720
<v Speaker 0>We can modify that in the spin.com.

00:16:54.360 --> 00:16:55.880
<v Speaker 0>Let's pop over to here.

00:16:59.525 --> 00:17:01.605
<v Speaker 0>Each component that you have

00:17:01.845 --> 00:17:04.724
<v Speaker 0>can define the allowed HTTP

00:17:04.724 --> 00:17:05.525
<v Speaker 0>host.

00:17:06.724 --> 00:17:10.085
<v Speaker 0>From here, we can set google.com.

00:17:11.765 --> 00:17:13.685
<v Speaker 0>Let's run our spin, build up,

00:17:16.319 --> 00:17:18.720
<v Speaker 0>and replicate our current request,

00:17:20.800 --> 00:17:21.599
<v Speaker 0>like so.

00:17:24.400 --> 00:17:26.319
<v Speaker 0>And as you can see on the server

00:17:26.319 --> 00:17:28.645
<v Speaker 0>logs at the top, we have the output

00:17:28.645 --> 00:17:31.525
<v Speaker 0>from google.com being console.log.

00:17:33.845 --> 00:17:36.245
<v Speaker 0>Now if you don't want to restrict outbound

00:17:36.245 --> 00:17:38.565
<v Speaker 0>access and you want to allow anything for

00:17:38.565 --> 00:17:41.125
<v Speaker 0>whatever reason, I promise, I don't judge.

00:17:42.140 --> 00:17:44.860
<v Speaker 0>You can change allowed HTTP hosts to be

00:17:44.860 --> 00:17:47.659
<v Speaker 0>insecure colon allowed dash all.

00:17:48.140 --> 00:17:50.220
<v Speaker 0>This will allow you to request any website

00:17:50.220 --> 00:17:51.259
<v Speaker 0>that you want.

00:17:52.779 --> 00:17:56.299
<v Speaker 0>That's it. We've covered the Node. Js, specifically

00:17:56.299 --> 00:17:58.914
<v Speaker 0>with TypeScript SDK for Spin.

00:17:59.794 --> 00:18:01.875
<v Speaker 0>I hope you found this useful. If so,

00:18:01.875 --> 00:18:03.154
<v Speaker 0>jump into the comments.

00:18:03.315 --> 00:18:05.554
<v Speaker 0>If you run into problems, jump into the

00:18:05.554 --> 00:18:06.274
<v Speaker 0>comments.

00:18:07.075 --> 00:18:08.595
<v Speaker 0>And if you want to see more videos

00:18:08.595 --> 00:18:11.794
<v Speaker 0>like this, click thumb up, subscribe, and go

00:18:11.794 --> 00:18:13.075
<v Speaker 0>check out Fermion Spin.

00:18:13.850 --> 00:18:15.610
<v Speaker 0>Happy hacking. I'll see you next time.
