WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 7f469366-8926-44d7-a79e-df00969d31ef
Created: 2025-04-29T13:15:10.085Z
Duration: 560.2228
Channels: 1

00:00:00.000 --> 00:00:02.800
<v Speaker 0>Hello and welcome back to the Rawkode Academy.

00:00:02.800 --> 00:00:05.359
<v Speaker 0>I'm your host David Flanagan and today we

00:00:05.359 --> 00:00:08.719
<v Speaker 0>are continuing with the complete guide to Spin.

00:00:08.880 --> 00:00:11.280
<v Speaker 0>Continuing on with the real world examples,

00:00:11.280 --> 00:00:12.960
<v Speaker 0>today we're gonna take a look at how

00:00:12.960 --> 00:00:14.080
<v Speaker 0>we can use Spin

00:00:14.345 --> 00:00:16.265
<v Speaker 0>the back end service to speak to a

00:00:16.265 --> 00:00:17.385
<v Speaker 0>remote API.

00:00:17.545 --> 00:00:19.945
<v Speaker 0>We have to deal with cars, authentication,

00:00:20.265 --> 00:00:23.545
<v Speaker 0>key values and even the key value explorer.

00:00:23.545 --> 00:00:25.945
<v Speaker 0>Something we haven't seen before in this course.

00:00:26.390 --> 00:00:28.630
<v Speaker 0>Our mission is to integrate with the Blue

00:00:28.630 --> 00:00:29.910
<v Speaker 0>Sky API.

00:00:30.070 --> 00:00:32.070
<v Speaker 0>What we wanna do is grab a post

00:00:32.070 --> 00:00:35.110
<v Speaker 0>from Blue Sky, fetch it over the API

00:00:35.190 --> 00:00:37.030
<v Speaker 0>and display it on our website.

00:00:37.110 --> 00:00:38.550
<v Speaker 0>For that, we're going to use a web

00:00:38.550 --> 00:00:40.710
<v Speaker 0>component. Before we dive into how we make

00:00:40.710 --> 00:00:42.824
<v Speaker 0>this happen, let's take a look at the

00:00:42.824 --> 00:00:45.144
<v Speaker 0>code in action. So we can pop over

00:00:45.144 --> 00:00:47.385
<v Speaker 0>here to the browser where we have my

00:00:47.385 --> 00:00:50.265
<v Speaker 0>first class UI skills as always. Black text

00:00:50.265 --> 00:00:51.545
<v Speaker 0>on a white background.

00:00:51.704 --> 00:00:53.545
<v Speaker 0>Here it says the skies are blue.

00:00:54.330 --> 00:00:56.730
<v Speaker 0>We can hit refresh, the page reloads

00:00:56.890 --> 00:00:59.850
<v Speaker 0>and everything is as we expect. So let's

00:00:59.850 --> 00:01:02.650
<v Speaker 0>drop in a blue sky URL.

00:01:03.050 --> 00:01:04.890
<v Speaker 0>We have paced. We can see this is

00:01:04.890 --> 00:01:06.650
<v Speaker 0>staging.bsky.app

00:01:06.650 --> 00:01:08.730
<v Speaker 0>with a post ID, which is a post

00:01:08.730 --> 00:01:10.784
<v Speaker 0>from myself. We click embed

00:01:10.945 --> 00:01:12.625
<v Speaker 0>and we can see all the details that

00:01:12.625 --> 00:01:15.345
<v Speaker 0>we need. Now the UI is not great,

00:01:15.424 --> 00:01:16.145
<v Speaker 0>of course,

00:01:16.465 --> 00:01:19.345
<v Speaker 0>but we do get my name, my handle,

00:01:19.345 --> 00:01:22.384
<v Speaker 0>my profile photo and the contents of the

00:01:22.384 --> 00:01:23.345
<v Speaker 0>post itself.

00:01:23.830 --> 00:01:25.990
<v Speaker 0>So how do we make this happen?

00:01:26.310 --> 00:01:28.390
<v Speaker 0>Well, this is a lit web component.

00:01:28.710 --> 00:01:30.710
<v Speaker 0>We can open bluesky.ts

00:01:30.950 --> 00:01:32.950
<v Speaker 0>and I'm not gonna spend too much time

00:01:32.950 --> 00:01:34.869
<v Speaker 0>on this web component because it's just a

00:01:34.869 --> 00:01:37.030
<v Speaker 0>vehicle to show the post all the cool

00:01:37.030 --> 00:01:39.375
<v Speaker 0>stuff happens on the back end. But this

00:01:39.375 --> 00:01:41.615
<v Speaker 0>web component has some properties with the fields

00:01:41.615 --> 00:01:43.774
<v Speaker 0>that we've seen on the UI. The link,

00:01:43.774 --> 00:01:45.774
<v Speaker 0>whether it's been fetched or not, my display

00:01:45.774 --> 00:01:47.215
<v Speaker 0>name, the avatar,

00:01:47.295 --> 00:01:49.454
<v Speaker 0>the handle, and the post. If we pop

00:01:49.454 --> 00:01:50.015
<v Speaker 0>down,

00:01:50.414 --> 00:01:52.015
<v Speaker 0>we can see we have an input box

00:01:52.015 --> 00:01:54.015
<v Speaker 0>and a button. You've seen these too.

00:01:54.680 --> 00:01:56.680
<v Speaker 0>We have the ability to render it as

00:01:56.680 --> 00:01:59.400
<v Speaker 0>beautifully as I did and then the embed

00:01:59.400 --> 00:02:00.120
<v Speaker 0>itself.

00:02:00.920 --> 00:02:03.160
<v Speaker 0>The embed link is a remote call to

00:02:03.160 --> 00:02:06.280
<v Speaker 0>Fermion Cloud with my back end app ID.

00:02:06.440 --> 00:02:08.485
<v Speaker 0>We send a push request, the fact that

00:02:08.485 --> 00:02:10.965
<v Speaker 0>we're sending JSON and we send the link.

00:02:11.125 --> 00:02:13.525
<v Speaker 0>That's all. Once the information is provided to

00:02:13.525 --> 00:02:15.445
<v Speaker 0>the browser, it can be rendered with the

00:02:15.445 --> 00:02:16.405
<v Speaker 0>web component.

00:02:17.365 --> 00:02:19.045
<v Speaker 0>So let's see how we made this work

00:02:19.045 --> 00:02:21.590
<v Speaker 0>with Fermion Spin. Here, I have a back

00:02:21.590 --> 00:02:22.630
<v Speaker 0>end directory

00:02:22.630 --> 00:02:25.030
<v Speaker 0>which contains all of the code using the

00:02:25.030 --> 00:02:26.230
<v Speaker 0>Spin framework.

00:02:26.310 --> 00:02:27.830
<v Speaker 0>If we pop open index,

00:02:28.150 --> 00:02:30.870
<v Speaker 0>you'll see that I'm using Fermion's TypeScript SDK

00:02:30.870 --> 00:02:33.510
<v Speaker 0>for this project, but of course, it's WebAssembly.

00:02:33.510 --> 00:02:35.095
<v Speaker 0>I could have used Rust. I could have

00:02:35.095 --> 00:02:37.095
<v Speaker 0>used c sharp. I could have used whatever

00:02:37.095 --> 00:02:39.495
<v Speaker 0>I want. We specify the input which is

00:02:39.495 --> 00:02:41.895
<v Speaker 0>just an interface where we get a link.

00:02:41.975 --> 00:02:43.415
<v Speaker 0>We're just using this so that we can

00:02:43.415 --> 00:02:45.735
<v Speaker 0>deserialize the input as it comes to our

00:02:45.735 --> 00:02:46.775
<v Speaker 0>handle request function.

00:02:47.270 --> 00:02:49.110
<v Speaker 0>Now something that we haven't seen a lot

00:02:49.110 --> 00:02:51.510
<v Speaker 0>of with our spend project so far is

00:02:51.510 --> 00:02:52.710
<v Speaker 0>handling cars.

00:02:53.110 --> 00:02:55.510
<v Speaker 0>This is really important when you're providing a

00:02:55.510 --> 00:02:58.310
<v Speaker 0>remote API that can be specifically called from

00:02:58.310 --> 00:03:00.710
<v Speaker 0>a browser because the minute the browser is

00:03:00.710 --> 00:03:01.110
<v Speaker 0>involved,

00:03:01.545 --> 00:03:03.705
<v Speaker 0>cross origin request policies

00:03:03.785 --> 00:03:05.385
<v Speaker 0>become mandatory.

00:03:05.545 --> 00:03:07.224
<v Speaker 0>So we're just making sure that if we

00:03:07.224 --> 00:03:10.025
<v Speaker 0>do receive an options request on our Spin

00:03:10.025 --> 00:03:10.825
<v Speaker 0>application

00:03:10.825 --> 00:03:12.905
<v Speaker 0>that we say, hey. We allow you to

00:03:12.905 --> 00:03:14.425
<v Speaker 0>call this from anywhere. We are a public

00:03:14.425 --> 00:03:14.905
<v Speaker 0>API.

00:03:15.430 --> 00:03:17.430
<v Speaker 0>We're gonna allow you to request a content

00:03:17.430 --> 00:03:19.830
<v Speaker 0>type, which could be application JSON,

00:03:19.830 --> 00:03:21.350
<v Speaker 0>and we're gonna allow you to send an

00:03:21.350 --> 00:03:23.750
<v Speaker 0>options request, which we are responding to as

00:03:23.750 --> 00:03:25.430
<v Speaker 0>well as a post request.

00:03:25.670 --> 00:03:29.030
<v Speaker 0>Next, we're using the Fermion Cloud key value

00:03:29.030 --> 00:03:29.510
<v Speaker 0>store.

00:03:30.055 --> 00:03:32.135
<v Speaker 0>Here we use the Spin SDK, we get

00:03:32.135 --> 00:03:34.535
<v Speaker 0>the key v namespace and then we open

00:03:34.535 --> 00:03:35.815
<v Speaker 0>the default store.

00:03:35.975 --> 00:03:38.775
<v Speaker 0>We're doing this because we actually have variables

00:03:38.775 --> 00:03:41.095
<v Speaker 0>that we need to persist over time. The

00:03:41.095 --> 00:03:42.615
<v Speaker 0>blue sky API

00:03:42.615 --> 00:03:45.495
<v Speaker 0>gives us back an access token and a

00:03:44.910 --> 00:03:46.190
<v Speaker 0>refresh token

00:03:46.350 --> 00:03:47.630
<v Speaker 0>when we authenticate.

00:03:47.710 --> 00:03:49.150
<v Speaker 0>We don't want to do this every single

00:03:49.150 --> 00:03:51.550
<v Speaker 0>time. That access token may be valid for

00:03:51.550 --> 00:03:53.790
<v Speaker 0>an hour, six hours, or even a week.

00:03:54.110 --> 00:03:56.110
<v Speaker 0>So store it in a cache and refresh

00:03:56.110 --> 00:03:56.990
<v Speaker 0>it as required.

00:03:57.495 --> 00:03:58.935
<v Speaker 0>What we do here is we say that

00:03:58.935 --> 00:04:01.255
<v Speaker 0>if the off token k v key does

00:04:01.255 --> 00:04:03.575
<v Speaker 0>not exist, we're going to go through the

00:04:03.575 --> 00:04:05.815
<v Speaker 0>create first session flow

00:04:05.975 --> 00:04:07.335
<v Speaker 0>and we'll take a look at that in

00:04:07.335 --> 00:04:07.975
<v Speaker 0>a moment.

00:04:08.535 --> 00:04:11.015
<v Speaker 0>If anything goes wrong, we return an error.

00:04:11.370 --> 00:04:15.050
<v Speaker 0>Assuming that the authentication token was successful,

00:04:15.210 --> 00:04:17.290
<v Speaker 0>then we can decode and grab that value

00:04:17.290 --> 00:04:19.610
<v Speaker 0>from the key value store and start to

00:04:19.610 --> 00:04:21.610
<v Speaker 0>build our blue sky request.

00:04:21.610 --> 00:04:24.305
<v Speaker 0>Now this code is not particularly fancy. We're

00:04:24.305 --> 00:04:26.145
<v Speaker 0>just splitting the link to grab out the

00:04:26.145 --> 00:04:28.944
<v Speaker 0>correct portions to get the handle and the

00:04:28.944 --> 00:04:31.185
<v Speaker 0>post ID. As you can see, I'm lettering

00:04:31.185 --> 00:04:33.585
<v Speaker 0>all of my code with console dot log

00:04:33.585 --> 00:04:34.865
<v Speaker 0>debugging statements.

00:04:35.025 --> 00:04:37.905
<v Speaker 0>I can fetch this from Fermion Cloud's UI

00:04:37.560 --> 00:04:40.280
<v Speaker 0>to understand what's going wrong when something goes

00:04:40.280 --> 00:04:42.360
<v Speaker 0>wrong. It's nice being able to hook into

00:04:42.360 --> 00:04:44.360
<v Speaker 0>all the standard print line debugging tools that

00:04:44.360 --> 00:04:46.600
<v Speaker 0>we've got experience with over the last one

00:04:46.600 --> 00:04:48.919
<v Speaker 0>year, five years, or even twenty years. From

00:04:48.919 --> 00:04:50.440
<v Speaker 0>here, we do a whole bunch of nested

00:04:50.440 --> 00:04:53.145
<v Speaker 0>awaits to grab the blue sky profile so

00:04:53.145 --> 00:04:55.385
<v Speaker 0>that we can get the distributed identifier

00:04:55.385 --> 00:04:57.225
<v Speaker 0>for this ID. Don't worry if you're not

00:04:57.225 --> 00:04:59.385
<v Speaker 0>familiar with the lexicon of blue sky, but

00:04:59.385 --> 00:05:01.625
<v Speaker 0>a dead or a distributed identifier is how

00:05:01.625 --> 00:05:04.190
<v Speaker 0>we're able to then make further requests to

00:05:04.190 --> 00:05:05.070
<v Speaker 0>the API.

00:05:05.310 --> 00:05:07.710
<v Speaker 0>Then we'd nest up our awaits again, this

00:05:07.710 --> 00:05:08.910
<v Speaker 0>time using

00:05:08.990 --> 00:05:12.110
<v Speaker 0>the XRPC endpoint getPostThread

00:05:12.350 --> 00:05:13.710
<v Speaker 0>where we pass

00:05:13.870 --> 00:05:14.910
<v Speaker 0>the DID

00:05:14.910 --> 00:05:17.229
<v Speaker 0>and the post ID. From here, we have

00:05:17.229 --> 00:05:19.815
<v Speaker 0>everything that we need. We can see got

00:05:19.815 --> 00:05:21.895
<v Speaker 0>the post, return it to a hundred and

00:05:21.895 --> 00:05:24.535
<v Speaker 0>dump it straight back to the user. From

00:05:24.535 --> 00:05:27.735
<v Speaker 0>there, it can be displayed. Now there's something

00:05:27.735 --> 00:05:29.095
<v Speaker 0>else that we have to go through here

00:05:29.095 --> 00:05:31.495
<v Speaker 0>and that is that create first session flow.

00:05:31.949 --> 00:05:34.750
<v Speaker 0>If we do not have an access token,

00:05:35.229 --> 00:05:37.630
<v Speaker 0>then we need to do the authentication dance.

00:05:37.949 --> 00:05:40.270
<v Speaker 0>Again, we pull out a k v store

00:05:40.270 --> 00:05:41.789
<v Speaker 0>to make sure that we can get and

00:05:41.789 --> 00:05:42.750
<v Speaker 0>set values.

00:05:42.910 --> 00:05:45.150
<v Speaker 0>Now we're looking for values to exist here

00:05:45.150 --> 00:05:47.875
<v Speaker 0>or else this is never gonna work. Notably,

00:05:47.875 --> 00:05:49.955
<v Speaker 0>we need a username and a password for

00:05:49.955 --> 00:05:50.835
<v Speaker 0>blue sky.

00:05:51.155 --> 00:05:53.315
<v Speaker 0>If those don't exist, we can never log

00:05:53.315 --> 00:05:56.195
<v Speaker 0>in. If they do exist, we grab them

00:05:56.354 --> 00:05:58.835
<v Speaker 0>and we hit the create session endpoint on

00:05:58.835 --> 00:06:00.275
<v Speaker 0>the blue sky API.

00:06:00.450 --> 00:06:01.970
<v Speaker 0>If this is successful,

00:06:02.690 --> 00:06:04.930
<v Speaker 0>we store the off token as off token

00:06:04.930 --> 00:06:06.130
<v Speaker 0>and k v.

00:06:06.850 --> 00:06:09.650
<v Speaker 0>Neat. So how do we get that username

00:06:09.650 --> 00:06:12.450
<v Speaker 0>and password in to our key value store?

00:06:12.690 --> 00:06:14.210
<v Speaker 0>Well, let's take a look at our spend

00:06:14.210 --> 00:06:16.985
<v Speaker 0>dot toml. Currently, we're deploying our Blue Sky

00:06:16.985 --> 00:06:19.544
<v Speaker 0>API like we do everything else.

00:06:19.625 --> 00:06:22.664
<v Speaker 0>We specify the source, we enable the default

00:06:22.664 --> 00:06:24.025
<v Speaker 0>key value store

00:06:24.504 --> 00:06:26.025
<v Speaker 0>and we make sure that we are allowed

00:06:26.025 --> 00:06:28.425
<v Speaker 0>to make HTTP request to the blue sky

00:06:28.425 --> 00:06:29.465
<v Speaker 0>dot social API.

00:06:29.890 --> 00:06:33.330
<v Speaker 0>However, we've added one additional component to this

00:06:33.330 --> 00:06:36.290
<v Speaker 0>deployment and that is the KV explorer,

00:06:36.290 --> 00:06:38.770
<v Speaker 0>which is available on the root internal

00:06:38.770 --> 00:06:41.170
<v Speaker 0>slash k v dash explorer.

00:06:41.330 --> 00:06:44.130
<v Speaker 0>This is an awesome component provided by Radu

00:06:44.130 --> 00:06:46.474
<v Speaker 0>from the Fermion team and it gives you

00:06:46.474 --> 00:06:47.435
<v Speaker 0>a UI

00:06:47.595 --> 00:06:49.914
<v Speaker 0>to browse and set and interact

00:06:49.914 --> 00:06:52.715
<v Speaker 0>with your key value store. In fact, if

00:06:52.715 --> 00:06:55.194
<v Speaker 0>we come over here, we can browse to

00:06:55.194 --> 00:06:57.035
<v Speaker 0>our Fermion cloud URL

00:06:57.275 --> 00:06:58.794
<v Speaker 0>and add internal

00:06:59.115 --> 00:06:59.915
<v Speaker 0>KV

00:06:59.995 --> 00:07:00.634
<v Speaker 0>explorer

00:07:00.800 --> 00:07:03.040
<v Speaker 0>and we get this UI. It uses basic

00:07:03.040 --> 00:07:03.920
<v Speaker 0>authentication

00:07:03.920 --> 00:07:06.160
<v Speaker 0>which is set in the KV itself and

00:07:06.160 --> 00:07:07.760
<v Speaker 0>I'll go over how to set that for

00:07:07.760 --> 00:07:09.760
<v Speaker 0>the first time in just a moment. But

00:07:09.760 --> 00:07:10.640
<v Speaker 0>from here,

00:07:11.200 --> 00:07:13.360
<v Speaker 0>I can take a look at my username

00:07:13.245 --> 00:07:15.324
<v Speaker 0>and I see that it is Rawkode dot

00:07:15.324 --> 00:07:17.565
<v Speaker 0>dev. I could show you the password, but

00:07:17.565 --> 00:07:19.485
<v Speaker 0>let's not do that. The credentials for the

00:07:19.485 --> 00:07:22.365
<v Speaker 0>KV itself are stored in KV credentials.

00:07:22.604 --> 00:07:24.205
<v Speaker 0>Now I don't mention them.

00:07:24.285 --> 00:07:25.805
<v Speaker 0>They're Rawkode Rawkode

00:07:26.000 --> 00:07:29.120
<v Speaker 0>because I'll delete this application before I publish

00:07:29.120 --> 00:07:31.840
<v Speaker 0>the video. And if I don't, have fun.

00:07:32.080 --> 00:07:34.400
<v Speaker 0>We then have our off token, which again,

00:07:34.400 --> 00:07:35.760
<v Speaker 0>I'm not going to show you as it

00:07:35.760 --> 00:07:37.680
<v Speaker 0>will allow you to authenticate and speak to

00:07:37.680 --> 00:07:39.680
<v Speaker 0>the Blue Sky API as myself.

00:07:40.125 --> 00:07:42.205
<v Speaker 0>But this is very cool. From here, I

00:07:42.205 --> 00:07:43.725
<v Speaker 0>can set new keys.

00:07:43.885 --> 00:07:46.045
<v Speaker 0>I could say the ABCDEF

00:07:46.045 --> 00:07:48.525
<v Speaker 0>equals to 123456

00:07:48.525 --> 00:07:49.645
<v Speaker 0>and click add.

00:07:49.965 --> 00:07:51.805
<v Speaker 0>We can view the value and delete it

00:07:51.805 --> 00:07:52.365
<v Speaker 0>if we wish.

00:07:52.950 --> 00:07:54.950
<v Speaker 0>This is a really neat component to add

00:07:54.950 --> 00:07:56.550
<v Speaker 0>just to make your lives a little bit

00:07:56.550 --> 00:07:58.950
<v Speaker 0>easier when you're getting things set up. But

00:07:58.950 --> 00:08:01.350
<v Speaker 0>how do we set that initial key value

00:08:01.350 --> 00:08:02.230
<v Speaker 0>credential?

00:08:02.390 --> 00:08:04.070
<v Speaker 0>Let's go back to the CLI

00:08:04.150 --> 00:08:06.775
<v Speaker 0>where we could do a spend deploy. However,

00:08:06.775 --> 00:08:08.375
<v Speaker 0>before we do the spin deploy, we're gonna

00:08:08.375 --> 00:08:11.575
<v Speaker 0>modify it where we're gonna say key value

00:08:13.415 --> 00:08:15.255
<v Speaker 0>k v credentials equals

00:08:15.415 --> 00:08:17.735
<v Speaker 0>and I will set this to Rawkode

00:08:18.055 --> 00:08:20.360
<v Speaker 0>password. Now if you recall when I showed

00:08:20.360 --> 00:08:22.760
<v Speaker 0>you my credentials, they were Rawkode Rawkode.

00:08:23.000 --> 00:08:24.840
<v Speaker 0>Now when we do the deploy, this will

00:08:24.840 --> 00:08:27.240
<v Speaker 0>override the value and this is the best

00:08:27.240 --> 00:08:28.919
<v Speaker 0>way and the easiest way to set it

00:08:28.919 --> 00:08:30.440
<v Speaker 0>on that first deploy.

00:08:30.919 --> 00:08:32.440
<v Speaker 0>So let's click the link

00:08:32.905 --> 00:08:35.065
<v Speaker 0>And now we have to log in again

00:08:35.145 --> 00:08:36.585
<v Speaker 0>and we'll say Rawkode

00:08:37.465 --> 00:08:38.265
<v Speaker 0>password,

00:08:38.664 --> 00:08:41.065
<v Speaker 0>like so. We can view the credentials and

00:08:41.065 --> 00:08:43.465
<v Speaker 0>even delete them. Perfect.

00:08:43.625 --> 00:08:45.400
<v Speaker 0>So there you have it. A real world

00:08:45.400 --> 00:08:48.120
<v Speaker 0>component to integrate with the Blue Sky API.

00:08:48.120 --> 00:08:50.120
<v Speaker 0>We take a look at handling course request

00:08:50.120 --> 00:08:51.960
<v Speaker 0>with Fermion endpoints,

00:08:51.960 --> 00:08:54.040
<v Speaker 0>leveraging the key value store

00:08:54.200 --> 00:08:57.400
<v Speaker 0>even at runtime to store our authentication token

00:08:57.625 --> 00:09:00.825
<v Speaker 0>and a wonderful component to browse and explore

00:09:00.825 --> 00:09:03.305
<v Speaker 0>the key value store making your debugging life

00:09:03.305 --> 00:09:05.865
<v Speaker 0>that little bit easier. So go forth, have

00:09:05.865 --> 00:09:06.585
<v Speaker 0>some fun.

00:09:06.905 --> 00:09:09.065
<v Speaker 0>Spin is evolving at a crazy pace and

00:09:09.065 --> 00:09:10.985
<v Speaker 0>these videos will continue to come showing you

00:09:10.985 --> 00:09:12.767
<v Speaker 0>everything that you need to know to be

00:09:12.767 --> 00:09:15.567
<v Speaker 0>successful with Vermillion Spin. Have a great day.
