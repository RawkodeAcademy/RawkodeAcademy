WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 52ad8d46-a4c0-4d76-ac1c-51429807d8e9
Created: 2025-06-05T21:57:34.660Z
Duration: 2295.693
Channels: 1

00:00:00.160 --> 00:00:02.000
<v Speaker 0>Server side WebAssembly,

00:00:02.000 --> 00:00:04.000
<v Speaker 0>where variations range from 0.3

00:00:04.000 --> 00:00:06.640
<v Speaker 0>to three to 25. In this episode, we

00:00:06.640 --> 00:00:09.679
<v Speaker 1>get to chat with Mikkel about WebAssembly then

00:00:09.679 --> 00:00:13.519
<v Speaker 1>and now, Spin three point o, Wazi 0.3,

00:00:13.955 --> 00:00:16.355
<v Speaker 1>and Spin moving into a sandbox project for

00:00:16.355 --> 00:00:17.314
<v Speaker 1>the CNCF.

00:00:17.315 --> 00:00:19.555
<v Speaker 0>And Laura took her shot. She got us

00:00:19.555 --> 00:00:21.154
<v Speaker 0>talking about the enterprise,

00:00:21.235 --> 00:00:22.435
<v Speaker 0>FML.

00:00:22.435 --> 00:00:24.115
<v Speaker 1>Of course, I had to. At least we

00:00:24.115 --> 00:00:26.970
<v Speaker 1>talked about Ross. Enjoy this episode. Welcome, Mikkel.

00:00:26.970 --> 00:00:28.650
<v Speaker 0>Thank you for joining us. This is Cloud

00:00:28.650 --> 00:00:30.730
<v Speaker 0>Native Compass, and we are excited to pick

00:00:30.730 --> 00:00:34.330
<v Speaker 0>your brain on everything cloud native Fermion, WebAssembly,

00:00:34.330 --> 00:00:35.210
<v Speaker 0>and Spin.

00:00:35.450 --> 00:00:37.770
<v Speaker 0>For anyone who is not familiar with you,

00:00:37.770 --> 00:00:39.945
<v Speaker 0>Fermion, or Spin, please feel free to introduce

00:00:39.945 --> 00:00:42.024
<v Speaker 0>yourself now. Thank you, David, and thanks for

00:00:42.024 --> 00:00:43.864
<v Speaker 2>having me here. So my name is Miguel

00:00:43.864 --> 00:00:46.745
<v Speaker 2>Marc Hannait. I am Danish, which is why

00:00:46.745 --> 00:00:49.145
<v Speaker 2>you would hear that weird surname. I am

00:00:49.145 --> 00:00:51.420
<v Speaker 2>the head of product and developer relationship at

00:00:51.420 --> 00:00:53.660
<v Speaker 2>Fermi where I've been for and now I

00:00:53.660 --> 00:00:55.100
<v Speaker 2>actually don't know whether it's two or three

00:00:55.100 --> 00:00:57.500
<v Speaker 2>years. So you pick whichever one you want.

00:00:57.500 --> 00:00:59.660
<v Speaker 2>I think it's actually three years. At Fermi

00:00:59.660 --> 00:01:00.620
<v Speaker 2>we are doing

00:01:01.020 --> 00:01:02.940
<v Speaker 2>web assembly. We talk about it as the

00:01:02.940 --> 00:01:05.284
<v Speaker 2>next wave of cloud computing, which is why

00:01:05.284 --> 00:01:07.765
<v Speaker 2>it's so well aligned with the topic of

00:01:07.844 --> 00:01:10.005
<v Speaker 2>cloud native, hopefully you're gonna talk about today.

00:01:10.005 --> 00:01:12.645
<v Speaker 2>Prior to being at Fermion, I spent more

00:01:12.645 --> 00:01:15.444
<v Speaker 2>than ten years in Microsoft building various cloud

00:01:15.444 --> 00:01:17.765
<v Speaker 2>services and developer tools there, which is also

00:01:17.765 --> 00:01:19.444
<v Speaker 2>where I met Matt Adrado, who are the

00:01:19.444 --> 00:01:20.164
<v Speaker 2>founders of Fermion,

00:01:20.750 --> 00:01:22.750
<v Speaker 2>and how they sort of got involved in

00:01:22.750 --> 00:01:24.910
<v Speaker 2>all of this. Excellent. Awesome. Thank you. Now,

00:01:24.910 --> 00:01:27.070
<v Speaker 0>of course, I want to chat about Spin,

00:01:27.070 --> 00:01:29.390
<v Speaker 0>which as of November, only a few months

00:01:29.390 --> 00:01:32.270
<v Speaker 0>ago, released version three. The pace at which

00:01:32.270 --> 00:01:34.685
<v Speaker 0>that project is evolving is fantastic to watch.

00:01:34.685 --> 00:01:35.965
<v Speaker 0>But I think we should set a little

00:01:35.965 --> 00:01:36.845
<v Speaker 0>bit of context

00:01:37.405 --> 00:01:39.325
<v Speaker 0>and just talk about WebAssembly and the evolution

00:01:39.325 --> 00:01:40.925
<v Speaker 0>of that over the last three years if

00:01:40.925 --> 00:01:42.845
<v Speaker 0>you've seen it. No surprise to anyone who's

00:01:42.845 --> 00:01:44.445
<v Speaker 0>listened to this podcast before or seen any

00:01:44.445 --> 00:01:45.885
<v Speaker 0>of my YouTube stuff. I'm quite bullish on

00:01:45.885 --> 00:01:46.445
<v Speaker 0>WebAssembly.

00:01:46.820 --> 00:01:48.420
<v Speaker 0>I think it's an enabler and something that

00:01:48.420 --> 00:01:50.340
<v Speaker 0>everyone needs to start paying more attention to.

00:01:50.340 --> 00:01:52.180
<v Speaker 0>And I'd love to hear your version of

00:01:52.180 --> 00:01:54.420
<v Speaker 0>it as someone from the inside who's actively

00:01:54.420 --> 00:01:56.420
<v Speaker 0>trying to make this possible for developers to

00:01:56.420 --> 00:01:58.500
<v Speaker 0>adopt and succeed with WebAssembly.

00:01:58.580 --> 00:02:00.340
<v Speaker 0>What have those last three years been like

00:02:00.340 --> 00:02:02.495
<v Speaker 0>for you, and how is WebAssembly evolving? The

00:02:02.495 --> 00:02:04.415
<v Speaker 2>last few years, and I actually think it's

00:02:04.415 --> 00:02:06.095
<v Speaker 2>three years now that I get to think

00:02:06.095 --> 00:02:09.695
<v Speaker 2>about it. Thank you, Laura. You're keeping straight.

00:02:10.574 --> 00:02:13.215
<v Speaker 2>He actually says something about how quick time

00:02:13.215 --> 00:02:15.135
<v Speaker 2>has passed, but also how much have happened.

00:02:15.135 --> 00:02:17.599
<v Speaker 2>Like you have that weird paradox that you

00:02:17.599 --> 00:02:19.520
<v Speaker 2>feel like time just like snaps away. But

00:02:19.520 --> 00:02:20.959
<v Speaker 2>then on the other hand side, there's so

00:02:20.959 --> 00:02:22.720
<v Speaker 2>many things have happened. And I actually think

00:02:22.720 --> 00:02:24.959
<v Speaker 2>that's a good indication that a lot has

00:02:24.959 --> 00:02:27.520
<v Speaker 2>happened. We moved, we really moved forward and

00:02:27.520 --> 00:02:30.235
<v Speaker 2>just to think back to even November when

00:02:30.235 --> 00:02:31.675
<v Speaker 2>we did spin three point and where we

00:02:31.675 --> 00:02:33.515
<v Speaker 2>are today, even all has happened.

00:02:33.755 --> 00:02:36.075
<v Speaker 2>So yeah, so it's an interesting space.

00:02:36.075 --> 00:02:38.315
<v Speaker 2>I think over the last three years, the

00:02:38.315 --> 00:02:40.635
<v Speaker 2>whole ecosystem around WebAssembly

00:02:40.635 --> 00:02:41.435
<v Speaker 2>has

00:02:41.770 --> 00:02:43.930
<v Speaker 2>my first encounter with it when I joined

00:02:43.930 --> 00:02:46.090
<v Speaker 2>Fermion three years ago was just trying to

00:02:46.090 --> 00:02:48.090
<v Speaker 2>figure out what's even going on here, what's

00:02:48.090 --> 00:02:50.010
<v Speaker 2>the ecosystem trying to accomplish.

00:02:50.970 --> 00:02:53.050
<v Speaker 2>Lots and lots of really great and promising

00:02:53.050 --> 00:02:53.930
<v Speaker 2>visionary stuff,

00:02:54.975 --> 00:02:57.855
<v Speaker 2>but less practical things that were usable and

00:02:57.855 --> 00:03:00.415
<v Speaker 2>approachable for people to actually do things with.

00:03:00.415 --> 00:03:02.975
<v Speaker 2>Whereas over these three years that has really

00:03:02.975 --> 00:03:05.135
<v Speaker 2>flipped. I think a lot of the visions

00:03:05.135 --> 00:03:07.650
<v Speaker 2>has come to fruition and I hope we

00:03:07.650 --> 00:03:09.890
<v Speaker 2>get to talk about the upcoming Wazio three

00:03:09.890 --> 00:03:12.769
<v Speaker 2>as well, which is another big milestone

00:03:12.769 --> 00:03:14.690
<v Speaker 2>in what you can do with WebAssembly,

00:03:14.690 --> 00:03:16.050
<v Speaker 2>but also seeing

00:03:16.849 --> 00:03:18.690
<v Speaker 2>Spin and a lot of other projects in

00:03:18.690 --> 00:03:19.730
<v Speaker 2>the WebAssembly space,

00:03:20.275 --> 00:03:22.995
<v Speaker 2>really bringing this in the hands of developers

00:03:22.995 --> 00:03:25.315
<v Speaker 2>that it's easy to get to. There's great

00:03:25.315 --> 00:03:26.675
<v Speaker 2>developer experiences.

00:03:26.675 --> 00:03:28.435
<v Speaker 2>You can easily build applications,

00:03:28.995 --> 00:03:30.675
<v Speaker 2>manage services

00:03:30.675 --> 00:03:32.515
<v Speaker 2>popping up so it's easy for you to

00:03:32.515 --> 00:03:34.790
<v Speaker 2>actually run them. The ability to run things

00:03:34.790 --> 00:03:38.310
<v Speaker 2>in Kubernetes and really try to get WebAssembly

00:03:38.310 --> 00:03:41.270
<v Speaker 2>as a core primitive of cloud computing

00:03:41.430 --> 00:03:44.230
<v Speaker 2>in all those places where you expect to,

00:03:44.390 --> 00:03:46.629
<v Speaker 2>or where you do cloud native computing today.

00:03:46.629 --> 00:03:48.709
<v Speaker 2>And I think that's, I used the tagline,

00:03:48.709 --> 00:03:50.795
<v Speaker 2>the next wave of cloud computing when I

00:03:50.795 --> 00:03:52.795
<v Speaker 2>introduced myself. I think I did, something along

00:03:52.795 --> 00:03:54.474
<v Speaker 2>the lines. But that's really what we think

00:03:54.474 --> 00:03:55.754
<v Speaker 2>about WebAssembly

00:03:55.754 --> 00:03:56.315
<v Speaker 2>here

00:03:56.555 --> 00:03:58.635
<v Speaker 2>in the progression that we've seen from all

00:03:58.635 --> 00:04:00.635
<v Speaker 2>the way back from physical servers to virtual

00:04:00.635 --> 00:04:03.240
<v Speaker 2>servers to containers, and then being WebAssembly. And

00:04:03.240 --> 00:04:04.600
<v Speaker 2>the new kid on the block in terms

00:04:04.600 --> 00:04:06.920
<v Speaker 2>of that core primitive into how we do

00:04:06.920 --> 00:04:09.320
<v Speaker 2>cloud native things. Thanks. There's quite a lot

00:04:09.320 --> 00:04:11.560
<v Speaker 0>I feel we can dig into there. And

00:04:11.560 --> 00:04:13.080
<v Speaker 0>I'm gonna try and knock you down.

00:04:13.720 --> 00:04:16.040
<v Speaker 0>Love that, the next wave of cloud computing.

00:04:16.040 --> 00:04:17.160
<v Speaker 0>And I think we'll just, we'll leave this

00:04:17.160 --> 00:04:18.200
<v Speaker 0>here. We're gonna come back to this to

00:04:18.200 --> 00:04:20.825
<v Speaker 0>talk about how building WebAssembly applications and operating

00:04:20.825 --> 00:04:23.545
<v Speaker 0>WebAssembly applications is different from traditional container based

00:04:23.545 --> 00:04:25.625
<v Speaker 0>or VM based applications. Let's Yeah. Come back

00:04:25.625 --> 00:04:28.025
<v Speaker 0>to that for sure. But you talked about

00:04:28.105 --> 00:04:30.585
<v Speaker 0>Wazee 0.3

00:04:30.745 --> 00:04:32.920
<v Speaker 0>there. Yep. And I don't wanna be foolish,

00:04:32.920 --> 00:04:34.920
<v Speaker 0>but I'm gonna try and see. When WebAssembly

00:04:34.920 --> 00:04:36.600
<v Speaker 0>first came out, it was just the browser

00:04:36.600 --> 00:04:40.040
<v Speaker 0>based sandbox. Wazee is what brought WebAssembly to

00:04:40.040 --> 00:04:42.040
<v Speaker 0>the server. And I believe 0.1,

00:04:42.040 --> 00:04:43.400
<v Speaker 0>there was no such thing as the component

00:04:43.400 --> 00:04:46.200
<v Speaker 0>model. The runtimes all implemented their own interface

00:04:45.615 --> 00:04:47.775
<v Speaker 0>things. And then with 0.2,

00:04:47.775 --> 00:04:49.694
<v Speaker 0>the component model came along and says, actually,

00:04:49.694 --> 00:04:52.495
<v Speaker 0>let's have shared interfaces to provide shared behaviors

00:04:52.495 --> 00:04:54.014
<v Speaker 0>with different implementations.

00:04:54.095 --> 00:04:55.854
<v Speaker 0>And I believe the Fermion team was maybe

00:04:55.854 --> 00:04:57.694
<v Speaker 0>not spearheaded. Maybe you were spearheaded, but you

00:04:57.694 --> 00:05:00.500
<v Speaker 0>were definitely a major part of that conversation.

00:05:00.580 --> 00:05:02.340
<v Speaker 0>As we progress to 0.3,

00:05:02.340 --> 00:05:05.540
<v Speaker 0>is this us leading to something that is

00:05:05.780 --> 00:05:08.180
<v Speaker 0>truly ubiquitous from a WebAssembly and server side

00:05:08.180 --> 00:05:09.700
<v Speaker 0>point of view for people to adopt it

00:05:09.700 --> 00:05:12.295
<v Speaker 0>now? Because in my head in one of

00:05:12.295 --> 00:05:13.975
<v Speaker 0>the conversations I have, I'm I'm now gonna

00:05:13.975 --> 00:05:15.255
<v Speaker 0>go on for ages and chat. When I

00:05:15.255 --> 00:05:17.095
<v Speaker 0>go to conferences, I'm always going, web assembly,

00:05:17.095 --> 00:05:18.455
<v Speaker 0>and waving my hands and trying to get

00:05:18.455 --> 00:05:20.215
<v Speaker 0>people to listen to me. And one of

00:05:20.215 --> 00:05:22.295
<v Speaker 0>the major concerns is the 0.2 from the

00:05:22.295 --> 00:05:25.419
<v Speaker 0>Vazee. Isn't that too early? On opposite side

00:05:25.419 --> 00:05:26.620
<v Speaker 0>of this, we've got spend, which is on

00:05:26.620 --> 00:05:27.979
<v Speaker 0>version three, which is built on top of

00:05:27.979 --> 00:05:31.020
<v Speaker 0>Wazi zero point x. So what is the

00:05:31.020 --> 00:05:33.180
<v Speaker 0>stability here? How do we get people to

00:05:33.419 --> 00:05:35.500
<v Speaker 0>There's two questions here. One, what is 0.3?

00:05:35.500 --> 00:05:37.180
<v Speaker 0>Where is this taking us? And then it's

00:05:36.780 --> 00:05:38.699
<v Speaker 0>Are we at a stable point for people

00:05:38.699 --> 00:05:40.139
<v Speaker 0>to start kicking the tires on this stuff?

00:05:40.535 --> 00:05:42.695
<v Speaker 2>Yes, I like to think of these in

00:05:42.695 --> 00:05:44.695
<v Speaker 2>terms of, if you were to look for

00:05:44.695 --> 00:05:45.735
<v Speaker 2>stability,

00:05:45.815 --> 00:05:48.455
<v Speaker 2>you should not, so WASI is a specification,

00:05:48.455 --> 00:05:50.695
<v Speaker 2>let's start there, like WASI specification, right? And

00:05:50.695 --> 00:05:51.815
<v Speaker 2>the specification

00:05:51.975 --> 00:05:54.935
<v Speaker 2>typically has a long time to move from

00:05:54.935 --> 00:05:57.550
<v Speaker 2>releases to releases in terms of there's a

00:05:57.550 --> 00:05:59.630
<v Speaker 2>lot of alignment and agreement that needs to

00:05:59.630 --> 00:06:00.990
<v Speaker 2>happen in the ecosystem,

00:06:01.310 --> 00:06:03.070
<v Speaker 2>which I think is good because the specification

00:06:03.070 --> 00:06:07.150
<v Speaker 2>needs time to prove itself before it stabilizes,

00:06:07.230 --> 00:06:09.550
<v Speaker 2>because that's gonna end up being the foundation

00:06:09.550 --> 00:06:12.805
<v Speaker 2>where, you know, main promise of longevity

00:06:12.805 --> 00:06:15.044
<v Speaker 2>of what you end up building comes in,

00:06:15.125 --> 00:06:18.565
<v Speaker 2>promises of portability between implementations and so on

00:06:18.565 --> 00:06:20.324
<v Speaker 2>and so forth. That's where you snap that

00:06:20.324 --> 00:06:22.565
<v Speaker 2>to in terms of what the specification is.

00:06:22.565 --> 00:06:24.485
<v Speaker 2>And there are definitely scenarios where some of

00:06:24.485 --> 00:06:25.750
<v Speaker 2>that has

00:06:25.830 --> 00:06:27.910
<v Speaker 2>more impact and is more important than other

00:06:27.910 --> 00:06:28.630
<v Speaker 2>scenarios.

00:06:28.870 --> 00:06:31.590
<v Speaker 2>So if you think about the runtime implementation,

00:06:31.590 --> 00:06:34.470
<v Speaker 2>so for instance, WasmTime is one of the

00:06:34.550 --> 00:06:37.605
<v Speaker 2>most popular Wasi runtimes that exist. I think

00:06:37.605 --> 00:06:38.965
<v Speaker 2>there's a nuance to this is like how

00:06:38.965 --> 00:06:42.245
<v Speaker 2>do you even apply your versioning concepts because

00:06:42.245 --> 00:06:45.685
<v Speaker 2>wasn't time is I think version 25

00:06:45.685 --> 00:06:48.565
<v Speaker 2>or something like that, because they basically have

00:06:48.565 --> 00:06:50.565
<v Speaker 2>a way of saying every time we do

00:06:50.565 --> 00:06:52.485
<v Speaker 2>a version, we do a major version release,

00:06:52.485 --> 00:06:54.219
<v Speaker 2>and that's how you can think about the

00:06:54.219 --> 00:06:56.139
<v Speaker 2>runtime and what they do. But what most

00:06:56.139 --> 00:06:58.219
<v Speaker 2>people will end up taking a direct dependency

00:06:58.219 --> 00:07:00.539
<v Speaker 2>on would be those, the tools and the

00:07:00.539 --> 00:07:02.699
<v Speaker 2>implementations which they as developers

00:07:02.780 --> 00:07:05.259
<v Speaker 2>would write against, SPIN being one of those,

00:07:05.419 --> 00:07:08.060
<v Speaker 2>Which is a framework and a developer tool

00:07:08.335 --> 00:07:10.974
<v Speaker 2>is where you're gonna meet WebAssembly in many

00:07:10.974 --> 00:07:12.655
<v Speaker 2>cases. And there are other examples of SPIN

00:07:12.655 --> 00:07:13.375
<v Speaker 2>as well, and

00:07:14.014 --> 00:07:16.574
<v Speaker 2>more of these come up in various scenarios.

00:07:17.215 --> 00:07:20.014
<v Speaker 2>And SPIN then across its major versions,

00:07:20.095 --> 00:07:23.294
<v Speaker 2>that obviously has support for the underlying specifications,

00:07:23.455 --> 00:07:25.840
<v Speaker 2>but SPIN is I think is where that's

00:07:25.840 --> 00:07:27.920
<v Speaker 2>at least been our approach to that project

00:07:27.920 --> 00:07:29.520
<v Speaker 2>has been like, SPIN is where we're gonna

00:07:29.520 --> 00:07:32.080
<v Speaker 2>give you the promises of backward compatibility and

00:07:32.080 --> 00:07:34.560
<v Speaker 2>we have across SPIN one and two and

00:07:34.560 --> 00:07:36.240
<v Speaker 2>three, which we're at right now as the

00:07:36.240 --> 00:07:36.800
<v Speaker 2>major versions,

00:07:37.335 --> 00:07:39.255
<v Speaker 2>kept the backward compatibility

00:07:39.255 --> 00:07:40.775
<v Speaker 2>for things that we have been able to

00:07:40.775 --> 00:07:43.015
<v Speaker 2>run previously, which means you can still run

00:07:43.015 --> 00:07:45.735
<v Speaker 2>things that are not your SWSI-one

00:07:45.975 --> 00:07:48.055
<v Speaker 2>even with Spin three point zero, so if

00:07:48.055 --> 00:07:49.895
<v Speaker 2>you wrote into that specification,

00:07:49.895 --> 00:07:51.575
<v Speaker 2>that's still supported at that point.

00:07:52.055 --> 00:07:53.940
<v Speaker 2>So I think it's important for people in

00:07:53.940 --> 00:07:55.460
<v Speaker 2>terms of how they think about this, what

00:07:55.460 --> 00:07:57.780
<v Speaker 2>are the tools they're gonna implement against, what

00:07:57.780 --> 00:08:00.099
<v Speaker 2>is the direct dependency they have and do

00:08:00.099 --> 00:08:02.819
<v Speaker 2>they rely on that dependency to do the

00:08:02.819 --> 00:08:05.540
<v Speaker 2>long term support across the specification grabbing?

00:08:05.699 --> 00:08:07.300
<v Speaker 2>At least that's how I think about it

00:08:07.300 --> 00:08:07.699
<v Speaker 2>and

00:08:08.425 --> 00:08:10.985
<v Speaker 2>knowing that we are early on with some

00:08:10.985 --> 00:08:12.745
<v Speaker 2>of the specification pieces,

00:08:13.225 --> 00:08:14.745
<v Speaker 2>at least I think it's important for the

00:08:14.745 --> 00:08:17.545
<v Speaker 2>frameworks that people use directly that they help

00:08:17.545 --> 00:08:20.185
<v Speaker 2>with the promise of longer term support and

00:08:20.185 --> 00:08:21.145
<v Speaker 2>backward compatibility.

00:08:21.660 --> 00:08:23.820
<v Speaker 0>Yeah, you've just, you talking there for a

00:08:23.820 --> 00:08:25.020
<v Speaker 0>few minutes has given me a kind of

00:08:25.020 --> 00:08:26.940
<v Speaker 0>a eureka moment in my head. And I

00:08:26.940 --> 00:08:28.700
<v Speaker 0>think I'm going to condense everything you've just

00:08:28.700 --> 00:08:30.300
<v Speaker 0>said until a single sentence, and I hope

00:08:30.300 --> 00:08:32.140
<v Speaker 0>you're not too offended. But I

00:08:32.540 --> 00:08:34.300
<v Speaker 0>think from a developer standpoint,

00:08:34.380 --> 00:08:37.535
<v Speaker 0>exactly what I want is slow moving specifications

00:08:37.695 --> 00:08:39.934
<v Speaker 0>that I can trust to still be there,

00:08:39.934 --> 00:08:42.575
<v Speaker 0>but fast moving implementations that can iterate and

00:08:42.575 --> 00:08:44.415
<v Speaker 0>provide me what I need to be successful

00:08:44.415 --> 00:08:45.375
<v Speaker 0>as a developer.

00:08:45.615 --> 00:08:46.815
<v Speaker 2>Can I write that down?

00:08:48.655 --> 00:08:50.495
<v Speaker 2>I'll just say that next time, Rob.

00:08:52.390 --> 00:08:54.710
<v Speaker 0>Yeah, I've never viewed it through that lens

00:08:54.710 --> 00:08:57.030
<v Speaker 0>before, but yeah, I want my specifications to

00:08:57.030 --> 00:08:58.790
<v Speaker 0>evolve slowly

00:08:58.790 --> 00:09:02.390
<v Speaker 0>with the implementations providing that testbed to iterate

00:09:02.390 --> 00:09:04.950
<v Speaker 0>advance, test things, kick the tires and all

00:09:04.950 --> 00:09:06.550
<v Speaker 0>that. So I really like that. And even

00:09:06.550 --> 00:09:09.405
<v Speaker 0>though the Wazee specification is 0.2

00:09:09.405 --> 00:09:11.485
<v Speaker 0>moving on to 0.3, these things have been

00:09:11.485 --> 00:09:13.325
<v Speaker 0>in the works for a long time as

00:09:13.325 --> 00:09:15.565
<v Speaker 0>well. WebAssembly is not exactly a new concept.

00:09:15.565 --> 00:09:18.125
<v Speaker 0>It's been around since, I don't know just

00:09:18.125 --> 00:09:19.245
<v Speaker 0>threw out a year and hope that I'm

00:09:19.245 --> 00:09:20.845
<v Speaker 0>right. But I think it's like 2016, '20

00:09:20.845 --> 00:09:21.885
<v Speaker 0>'17, maybe I'm wrong.

00:09:22.620 --> 00:09:23.900
<v Speaker 1>That's a great question.

00:09:24.300 --> 00:09:26.540
<v Speaker 2>It is actually know what that was. Someone

00:09:26.540 --> 00:09:28.140
<v Speaker 2>should go and Google it, but yeah. No.

00:09:28.140 --> 00:09:30.700
<v Speaker 2>But you're probably right. Yeah. So I was

00:09:30.700 --> 00:09:32.940
<v Speaker 1>gonna say now I'm not as up on

00:09:32.940 --> 00:09:34.380
<v Speaker 1>WebAssembly as David is.

00:09:35.245 --> 00:09:37.485
<v Speaker 1>I'm kind of that person in the call.

00:09:37.805 --> 00:09:41.005
<v Speaker 1>But last I remember, there was a move

00:09:41.005 --> 00:09:42.365
<v Speaker 1>from building

00:09:42.365 --> 00:09:45.005
<v Speaker 1>on top of I think it was Nomad,

00:09:45.005 --> 00:09:47.085
<v Speaker 1>and now it mostly builds on top of

00:09:47.085 --> 00:09:49.965
<v Speaker 1>Kubernetes. So from, like, an operator standpoint, I'm

00:09:49.965 --> 00:09:52.670
<v Speaker 1>curious from that perspective of

00:09:52.830 --> 00:09:56.350
<v Speaker 1>has that move been a significant one? Throw

00:09:56.350 --> 00:09:58.110
<v Speaker 1>this out there. As you start thinking for

00:09:58.110 --> 00:10:01.390
<v Speaker 1>like spin four point zero and whatever's next

00:10:01.390 --> 00:10:03.310
<v Speaker 1>for web assembly, are you thinking that you'll

00:10:03.310 --> 00:10:04.990
<v Speaker 1>probably stay on Kubernetes or do you think

00:10:04.990 --> 00:10:08.024
<v Speaker 1>you might branch out to try to encourage

00:10:08.024 --> 00:10:09.225
<v Speaker 1>even more adoption?

00:10:09.625 --> 00:10:11.944
<v Speaker 2>I'm pretty sure Kubernetes is the path to

00:10:11.944 --> 00:10:15.144
<v Speaker 2>get adoption. I think if anything you will

00:10:15.144 --> 00:10:16.665
<v Speaker 2>find in most

00:10:17.064 --> 00:10:18.665
<v Speaker 2>companies that run Thing,

00:10:19.240 --> 00:10:21.160
<v Speaker 2>is that you can be pretty certain as

00:10:21.160 --> 00:10:23.800
<v Speaker 2>a developer, if you hand over a container

00:10:23.800 --> 00:10:25.960
<v Speaker 2>to your operations department, they know how to

00:10:25.960 --> 00:10:29.000
<v Speaker 2>run it. And they probably will use Kubernetes

00:10:29.000 --> 00:10:29.640
<v Speaker 2>in

00:10:30.120 --> 00:10:30.920
<v Speaker 2>95%

00:10:30.920 --> 00:10:32.520
<v Speaker 2>of the cases or something like that. So

00:10:32.520 --> 00:10:33.880
<v Speaker 2>I think that's a given for sort of

00:10:33.880 --> 00:10:35.535
<v Speaker 2>like the mass adoption.

00:10:35.935 --> 00:10:38.015
<v Speaker 2>It's true that at Fermion we did create

00:10:38.015 --> 00:10:39.935
<v Speaker 2>something we called the Fermion platform

00:10:40.095 --> 00:10:43.135
<v Speaker 2>on Nome to begin with, mainly because we

00:10:45.055 --> 00:10:47.695
<v Speaker 2>didn't see a good solution to run other

00:10:47.695 --> 00:10:50.095
<v Speaker 2>types of workers inside of Kubernetes than containers.

00:10:50.529 --> 00:10:52.210
<v Speaker 2>And that was really the main thing why

00:10:52.210 --> 00:10:53.810
<v Speaker 2>we picked up Nomad at that point in

00:10:53.810 --> 00:10:55.730
<v Speaker 2>time because Nomad are able to run even

00:10:55.730 --> 00:10:57.810
<v Speaker 2>just processes along with containers and other things

00:10:57.810 --> 00:10:59.410
<v Speaker 2>and that's how we package that.

00:10:59.970 --> 00:11:02.370
<v Speaker 2>So the big invention that happened there, was

00:11:02.370 --> 00:11:04.904
<v Speaker 2>together with, well actually Microsoft did a concept

00:11:04.904 --> 00:11:06.024
<v Speaker 2>called RunWasi

00:11:06.024 --> 00:11:06.745
<v Speaker 2>which

00:11:08.904 --> 00:11:10.745
<v Speaker 2>evolved into a way of providing a shim

00:11:10.745 --> 00:11:12.425
<v Speaker 2>for containerd, the runtime,

00:11:12.825 --> 00:11:14.825
<v Speaker 2>to not only be able to run containers

00:11:14.825 --> 00:11:16.665
<v Speaker 2>but also to run WebAssembly

00:11:17.065 --> 00:11:19.920
<v Speaker 2>natively so to speak. So you don't grab

00:11:19.920 --> 00:11:22.480
<v Speaker 2>a WebAssembly in a container, you basically run

00:11:22.480 --> 00:11:25.280
<v Speaker 2>the WebAssembly directly. And with that component,

00:11:25.440 --> 00:11:27.200
<v Speaker 2>it sort of saw like what

00:11:27.520 --> 00:11:28.720
<v Speaker 2>we didn't take on at that point in

00:11:28.720 --> 00:11:31.440
<v Speaker 2>time is you now have native WebAssembly support

00:11:31.440 --> 00:11:32.560
<v Speaker 2>in Kubernetes

00:11:32.720 --> 00:11:34.720
<v Speaker 2>by using ContainerD and using that shim,

00:11:35.255 --> 00:11:37.415
<v Speaker 2>which means that it makes so much more

00:11:37.415 --> 00:11:39.175
<v Speaker 2>sense to start running inside of Kubernetes. So

00:11:39.175 --> 00:11:40.775
<v Speaker 2>if you take that compared with the breadth

00:11:40.775 --> 00:11:42.535
<v Speaker 2>of adoption of Kubernetes,

00:11:42.535 --> 00:11:44.215
<v Speaker 2>I think that's definitely the way forward. That

00:11:44.215 --> 00:11:44.935
<v Speaker 1>makes sense.

00:11:45.335 --> 00:11:47.815
<v Speaker 0>Yeah, and to add on more context there,

00:11:47.815 --> 00:11:49.630
<v Speaker 0>just because like this is now my dream

00:11:49.630 --> 00:11:51.870
<v Speaker 0>saturation. We're talking about WebAssembly and Kubernetes, same

00:11:51.870 --> 00:11:54.030
<v Speaker 0>as it. So if we bring in some

00:11:54.030 --> 00:11:55.630
<v Speaker 0>rust Yeah. I was gonna say, where's the

00:11:55.630 --> 00:11:56.990
<v Speaker 1>rust in here? Let's go.

00:11:57.470 --> 00:12:00.030
<v Speaker 0>The reason that serverless workloads on top of

00:12:00.030 --> 00:12:00.670
<v Speaker 0>Kubernetes

00:12:01.155 --> 00:12:03.235
<v Speaker 0>sometimes have a bad time and get a

00:12:03.235 --> 00:12:05.955
<v Speaker 0>bad reputation is because in order to actually

00:12:05.955 --> 00:12:08.915
<v Speaker 0>start a container or a pod inside of

00:12:08.915 --> 00:12:10.515
<v Speaker 0>Kubernetes, there are a whole bunch of assumptions

00:12:10.515 --> 00:12:11.635
<v Speaker 0>that needs to be made. One is it

00:12:11.635 --> 00:12:13.475
<v Speaker 0>needs to speak to the CNI and get

00:12:13.475 --> 00:12:15.075
<v Speaker 0>an IP address. It needs to speak to

00:12:15.075 --> 00:12:17.050
<v Speaker 0>the Linux kernel and get C groups and

00:12:17.050 --> 00:12:19.770
<v Speaker 0>namespaces and all this stuff. Meaning that the

00:12:19.770 --> 00:12:21.530
<v Speaker 0>base or the bottom line for starting a

00:12:21.530 --> 00:12:24.250
<v Speaker 0>container is actually measured in usually hundreds of

00:12:24.250 --> 00:12:25.930
<v Speaker 0>milliseconds. Those are ways to improve that, but

00:12:25.930 --> 00:12:28.170
<v Speaker 0>hundreds of milliseconds. Yep. And for why was

00:12:28.170 --> 00:12:29.735
<v Speaker 0>something I don't think that makes sense. I

00:12:29.735 --> 00:12:31.415
<v Speaker 0>believe it's who's

00:12:31.415 --> 00:12:33.175
<v Speaker 0>always talking about the invocation of the startup

00:12:33.175 --> 00:12:35.574
<v Speaker 0>time for WebAssembly binary is measured in nanoseconds

00:12:35.574 --> 00:12:36.695
<v Speaker 0>and not milliseconds.

00:12:36.695 --> 00:12:39.975
<v Speaker 0>Yeah. That is true. Yeah. Why would you

00:12:39.975 --> 00:12:42.454
<v Speaker 0>take all of that performance improvements and throw

00:12:42.454 --> 00:12:44.214
<v Speaker 0>it away just to run it on Kubernetes?

00:12:44.375 --> 00:12:45.350
<v Speaker 0>There's There's a lot of things that need

00:12:45.350 --> 00:12:47.350
<v Speaker 0>to need to be challenged and changed there.

00:12:47.350 --> 00:12:48.950
<v Speaker 0>And I loved what the Microsoft team are

00:12:48.950 --> 00:12:51.750
<v Speaker 0>doing with to enable this because Yeah. It

00:12:51.750 --> 00:12:54.070
<v Speaker 0>provides that new bedroom, found your framework that

00:12:54.070 --> 00:12:55.990
<v Speaker 0>allows these web assembly applications to maintain

00:12:56.875 --> 00:12:57.835
<v Speaker 0>velocity

00:12:58.395 --> 00:13:01.435
<v Speaker 0>without sacrificing the runtime environment. Because Michael just

00:13:01.435 --> 00:13:03.275
<v Speaker 0>said, everyone has Kubernetes.

00:13:03.915 --> 00:13:05.835
<v Speaker 0>I don't even think Hashi corporate running Nomad

00:13:05.835 --> 00:13:07.115
<v Speaker 0>anymore. They're a bit of a keep going

00:13:07.115 --> 00:13:08.475
<v Speaker 0>too talking about Kubernetes.

00:13:09.115 --> 00:13:11.490
<v Speaker 2>So That is Yeah. I don't know. The

00:13:11.490 --> 00:13:13.090
<v Speaker 0>the fact that we can have

00:13:13.410 --> 00:13:17.010
<v Speaker 0>our stateful container based databases running side by

00:13:17.010 --> 00:13:20.290
<v Speaker 0>side with a future of hopefully WebAssembly invocations,

00:13:20.450 --> 00:13:22.450
<v Speaker 0>think is a a powerful future that we

00:13:22.450 --> 00:13:24.290
<v Speaker 0>should all be aspiring to eventually. And it's

00:13:24.290 --> 00:13:26.135
<v Speaker 0>it's just how do we get there? How

00:13:26.135 --> 00:13:28.055
<v Speaker 0>do we onboard with developers? And I'm sure

00:13:28.055 --> 00:13:29.415
<v Speaker 0>Michael's got all these answers in his back

00:13:29.415 --> 00:13:31.575
<v Speaker 0>pocket. We can dive into that. Yeah.

00:13:31.815 --> 00:13:33.735
<v Speaker 0>But how do we go from okay. We've

00:13:33.735 --> 00:13:35.815
<v Speaker 0>got last easy 0.3 coming up. Hot on

00:13:35.815 --> 00:13:38.055
<v Speaker 0>our heels. We've got spend cube now, which

00:13:38.055 --> 00:13:39.850
<v Speaker 0>is open source and released to allow these

00:13:39.850 --> 00:13:41.930
<v Speaker 0>people to run these WebAssembly workloads natively on

00:13:41.930 --> 00:13:44.010
<v Speaker 0>Kubernetes, say by say, but from everything else.

00:13:44.410 --> 00:13:45.610
<v Speaker 0>We now need to get them right in

00:13:45.610 --> 00:13:46.970
<v Speaker 0>Kubernetes application,

00:13:47.050 --> 00:13:48.410
<v Speaker 0>WebAssembly applications.

00:13:48.730 --> 00:13:50.810
<v Speaker 0>And now we're on to Spend three. Like,

00:13:50.810 --> 00:13:52.410
<v Speaker 0>why don't you give us the TLDR? Why

00:13:52.410 --> 00:13:54.175
<v Speaker 0>should people start paying more attention to spend

00:13:54.175 --> 00:13:56.015
<v Speaker 0>and what did the V3 release bring to

00:13:56.015 --> 00:13:58.415
<v Speaker 0>the table? So I think I just wanna

00:13:58.415 --> 00:13:59.775
<v Speaker 2>make a small remark on what you said

00:13:59.775 --> 00:14:01.775
<v Speaker 2>on the performance thing, because the way that

00:14:01.775 --> 00:14:03.695
<v Speaker 2>I think about that, Maya, is that

00:14:04.175 --> 00:14:05.935
<v Speaker 2>I think what we've done with Ron Wassey

00:14:05.935 --> 00:14:09.055
<v Speaker 2>and SpinCube, so SpinCube being the project that

00:14:08.660 --> 00:14:11.460
<v Speaker 2>pulls all these things together with ECHELM child

00:14:11.460 --> 00:14:13.220
<v Speaker 2>installs and then you just deploy the Spin

00:14:13.220 --> 00:14:15.540
<v Speaker 2>app, but basically it's all the underlying technology

00:14:15.540 --> 00:14:17.060
<v Speaker 2>stacked up and operators and so on and

00:14:17.060 --> 00:14:17.620
<v Speaker 2>so forth,

00:14:18.100 --> 00:14:20.180
<v Speaker 2>is we've ensured that Kubernetes is sort of

00:14:20.180 --> 00:14:22.500
<v Speaker 2>a, that a Spin application, WebAssembly can become

00:14:22.500 --> 00:14:24.944
<v Speaker 2>a first class citizen inside of Kubernetes, right?

00:14:24.944 --> 00:14:27.505
<v Speaker 2>So when you operate these in Kubernetes,

00:14:27.745 --> 00:14:29.665
<v Speaker 2>you operate them same way you would operate

00:14:29.665 --> 00:14:31.904
<v Speaker 2>the container there, which also gives you the

00:14:31.904 --> 00:14:34.464
<v Speaker 2>huge benefits that the whole ecosystem around Kubernetes

00:14:34.464 --> 00:14:36.305
<v Speaker 2>just worked with this. Last week I did

00:14:36.305 --> 00:14:38.570
<v Speaker 2>a recording of an introduction to SpinCube that

00:14:38.570 --> 00:14:40.250
<v Speaker 2>involves showing how you can just apply a

00:14:40.250 --> 00:14:42.970
<v Speaker 2>Kita scaler to your WebAssembly workloads, right? The

00:14:42.970 --> 00:14:44.890
<v Speaker 2>same way you do to your container workloads,

00:14:44.890 --> 00:14:46.490
<v Speaker 2>which is a really good example of just

00:14:46.490 --> 00:14:48.650
<v Speaker 2>fitting into the broader ecosystem, which I think

00:14:48.650 --> 00:14:50.730
<v Speaker 2>is part of the answer to getting the

00:14:50.730 --> 00:14:53.765
<v Speaker 2>adoption, right? Like the same way that operations

00:14:53.765 --> 00:14:57.365
<v Speaker 2>teams or platform engineering teams provide platforms that

00:14:57.365 --> 00:14:59.845
<v Speaker 2>support containers is really easy for them to

00:14:59.845 --> 00:15:02.245
<v Speaker 2>enable now just supporting WebAssembly inside of the

00:15:02.245 --> 00:15:04.085
<v Speaker 2>same platform that way. I think the missing

00:15:04.085 --> 00:15:06.410
<v Speaker 2>piece there to your point about performance is

00:15:06.410 --> 00:15:08.570
<v Speaker 2>work to be done to have Kubernetes being

00:15:08.570 --> 00:15:11.130
<v Speaker 2>a first class host for WebAssembly,

00:15:11.370 --> 00:15:13.450
<v Speaker 2>meaning that you actually get the full benefits

00:15:13.450 --> 00:15:16.410
<v Speaker 2>of, for instance, the scaling to zero and

00:15:16.410 --> 00:15:18.725
<v Speaker 2>starting from zero, lack of the, not the

00:15:18.725 --> 00:15:20.884
<v Speaker 2>lack of cold start, but the fact that

00:15:20.884 --> 00:15:22.565
<v Speaker 2>there hardly is any cold start going from

00:15:22.565 --> 00:15:24.644
<v Speaker 2>not having a WebAssembly component loaded and then

00:15:24.644 --> 00:15:27.125
<v Speaker 2>loading it, we've done run times in that,

00:15:27.125 --> 00:15:30.165
<v Speaker 2>around that as a commercial project for Fermiad,

00:15:30.165 --> 00:15:33.370
<v Speaker 2>where basically we can host 10,000 applications, WebExplained

00:15:33.370 --> 00:15:35.530
<v Speaker 2>applications on a single Kubernetes node, but we

00:15:35.530 --> 00:15:38.250
<v Speaker 2>can't do that in the Kubernetes model because

00:15:38.250 --> 00:15:40.330
<v Speaker 2>of pod limits and those type of things,

00:15:40.330 --> 00:15:41.850
<v Speaker 2>which means we have to break out of

00:15:41.850 --> 00:15:44.490
<v Speaker 2>that being the first class citizen. So there

00:15:44.490 --> 00:15:46.245
<v Speaker 2>is that trade off there, right? That sort

00:15:46.245 --> 00:15:47.845
<v Speaker 2>of speaks to that. But I think being

00:15:47.845 --> 00:15:49.765
<v Speaker 2>a first class citizen in Kubernetes is part

00:15:49.765 --> 00:15:52.005
<v Speaker 2>of the road to adoption. So back to

00:15:52.005 --> 00:15:54.085
<v Speaker 2>your question, David, about what we've done in

00:15:54.085 --> 00:15:56.005
<v Speaker 2>Spin three point the main things that we

00:15:56.005 --> 00:15:57.605
<v Speaker 2>have been focusing on in Spin three point

00:15:57.605 --> 00:16:00.230
<v Speaker 2>zero is this idea of WebAssembly Components. And

00:16:00.230 --> 00:16:02.470
<v Speaker 2>it's actually also a good sort of, there's

00:16:02.470 --> 00:16:03.910
<v Speaker 2>a tie back to when we talked about

00:16:03.910 --> 00:16:05.110
<v Speaker 2>WOSI three

00:16:05.269 --> 00:16:06.790
<v Speaker 2>and that being sort of the next release

00:16:06.790 --> 00:16:07.910
<v Speaker 2>of the specification.

00:16:08.230 --> 00:16:10.069
<v Speaker 2>The major, the sort of the marquee feature

00:16:10.069 --> 00:16:12.550
<v Speaker 2>that WOSI three will bring in the specification

00:16:12.550 --> 00:16:13.990
<v Speaker 2>is to be able to do

00:16:14.745 --> 00:16:17.865
<v Speaker 2>combination of async and sync programming between components.

00:16:17.865 --> 00:16:19.065
<v Speaker 2>So we might wanna talk a little bit

00:16:19.065 --> 00:16:21.385
<v Speaker 2>about what WebAssembly components are so that we

00:16:21.385 --> 00:16:23.305
<v Speaker 2>get an idea of what this is. So

00:16:23.305 --> 00:16:25.464
<v Speaker 2>WASI stands for the WebAssembly System Interface. So

00:16:25.464 --> 00:16:27.945
<v Speaker 2>it's basically a set of APIs that you

00:16:28.025 --> 00:16:30.025
<v Speaker 2>need to implement if you create a WASI

00:16:30.230 --> 00:16:32.630
<v Speaker 2>compliant runtime, which means that it's a virtual

00:16:32.630 --> 00:16:35.590
<v Speaker 2>machine, it's like an operating system, so if

00:16:35.590 --> 00:16:37.110
<v Speaker 2>you write a WebAssembly

00:16:37.110 --> 00:16:39.990
<v Speaker 2>and using these APIs, you expect that WebAssembly

00:16:39.990 --> 00:16:41.350
<v Speaker 2>to be able to run inside a WASI

00:16:41.350 --> 00:16:44.045
<v Speaker 2>compliant runtime. But WASI is also just, so

00:16:44.045 --> 00:16:46.605
<v Speaker 2>together with WSC, a way of describing those

00:16:46.605 --> 00:16:48.125
<v Speaker 2>APIs and interfaces

00:16:48.204 --> 00:16:51.165
<v Speaker 2>called WIT, which is the WebAssembly interface type

00:16:51.165 --> 00:16:53.884
<v Speaker 2>language was developed, but it actually enables you

00:16:53.884 --> 00:16:55.884
<v Speaker 2>to define your own set of interfaces and

00:16:55.884 --> 00:16:58.990
<v Speaker 2>APIs through WIT. And what's interesting about WID

00:16:58.990 --> 00:17:00.910
<v Speaker 2>is that WID operates,

00:17:00.990 --> 00:17:01.470
<v Speaker 2>well,

00:17:01.870 --> 00:17:03.150
<v Speaker 2>is meant to bridge

00:17:03.550 --> 00:17:05.630
<v Speaker 2>the same way that a WebAssembly you can

00:17:05.630 --> 00:17:08.030
<v Speaker 2>say is portable runtime because it's a byte

00:17:08.030 --> 00:17:09.550
<v Speaker 2>code format and you have this virtual machine.

00:17:10.115 --> 00:17:11.795
<v Speaker 2>What Wid enables us to do is have

00:17:11.795 --> 00:17:14.435
<v Speaker 2>the definition that the programming languages now can

00:17:14.435 --> 00:17:15.234
<v Speaker 2>understand.

00:17:15.555 --> 00:17:17.234
<v Speaker 2>So you can have a definition of an

00:17:17.234 --> 00:17:20.115
<v Speaker 2>interface that you can provide in a Rust

00:17:20.115 --> 00:17:20.915
<v Speaker 2>implementation

00:17:20.915 --> 00:17:21.635
<v Speaker 2>and

00:17:21.875 --> 00:17:23.955
<v Speaker 2>use in a JavaScript implementation,

00:17:23.955 --> 00:17:26.629
<v Speaker 2>which means that you can actually have libraries,

00:17:27.429 --> 00:17:28.950
<v Speaker 2>which is what we would normally call them

00:17:28.950 --> 00:17:30.789
<v Speaker 2>when we're in a single programming language,

00:17:31.350 --> 00:17:33.750
<v Speaker 2>from other programming language that you use in

00:17:33.750 --> 00:17:35.990
<v Speaker 2>whatever code you're writing today. And in the

00:17:35.990 --> 00:17:38.630
<v Speaker 2>WebAssembly world, we call these, when they're compiled,

00:17:38.630 --> 00:17:41.015
<v Speaker 2>we call them components. So you can implement

00:17:41.015 --> 00:17:43.495
<v Speaker 2>a WebAssembly component in a given programming language

00:17:43.495 --> 00:17:45.335
<v Speaker 2>that you can now go and use in

00:17:45.335 --> 00:17:48.215
<v Speaker 2>another WebAssembly component written in another programming language.

00:17:48.215 --> 00:17:49.735
<v Speaker 2>There's a path of this which is just

00:17:49.735 --> 00:17:51.895
<v Speaker 2>polyglot development and then it's like, well I

00:17:51.895 --> 00:17:53.950
<v Speaker 2>don't wanna break down my libraries in different

00:17:53.950 --> 00:17:54.989
<v Speaker 2>programming languages,

00:17:55.470 --> 00:17:58.190
<v Speaker 2>I use one programming language, already right. But

00:17:58.270 --> 00:18:00.350
<v Speaker 2>there's another path of this, there's another way

00:18:00.350 --> 00:18:01.950
<v Speaker 2>of telling the story, which is maybe it's

00:18:01.950 --> 00:18:04.190
<v Speaker 2>the package manager and all package managers. Like,

00:18:04.190 --> 00:18:06.990
<v Speaker 2>you know, if someone wrote a really secure

00:18:06.990 --> 00:18:09.275
<v Speaker 2>and fast Postgres driver

00:18:09.275 --> 00:18:09.914
<v Speaker 2>in

00:18:10.235 --> 00:18:11.355
<v Speaker 2>given language,

00:18:11.435 --> 00:18:13.115
<v Speaker 2>we don't have to write a Postgres driver

00:18:13.115 --> 00:18:15.035
<v Speaker 2>in all these other languages when we're using

00:18:15.035 --> 00:18:16.075
<v Speaker 2>the WebAssembly

00:18:16.235 --> 00:18:18.795
<v Speaker 2>world because we can basically just use that

00:18:18.795 --> 00:18:21.820
<v Speaker 2>component from other programming languages. So the component

00:18:21.820 --> 00:18:23.740
<v Speaker 2>model is a core focus in three point

00:18:23.740 --> 00:18:26.059
<v Speaker 2>where now between these libraries we're actually able

00:18:26.059 --> 00:18:29.740
<v Speaker 2>to combine synchronous and asynchronous functions that work

00:18:29.740 --> 00:18:31.419
<v Speaker 2>inside of each of these components,

00:18:31.659 --> 00:18:34.700
<v Speaker 2>unlocking a whole breadth of scenarios, particularly around

00:18:34.700 --> 00:18:35.100
<v Speaker 2>streams

00:18:35.595 --> 00:18:37.195
<v Speaker 2>and other things where you want to stream

00:18:37.195 --> 00:18:38.315
<v Speaker 2>data with that, I think is one of

00:18:38.315 --> 00:18:40.475
<v Speaker 2>the typical use cases that will light up

00:18:40.475 --> 00:18:40.955
<v Speaker 2>there.

00:18:41.995 --> 00:18:42.634
<v Speaker 2>Yeah.

00:18:42.875 --> 00:18:43.914
<v Speaker 0>So this means,

00:18:44.955 --> 00:18:46.635
<v Speaker 0>I haven't been keeping up with 0.3, so

00:18:46.635 --> 00:18:47.755
<v Speaker 0>this is new to me, but I'm loving

00:18:47.755 --> 00:18:48.794
<v Speaker 0>where else is going already.

00:18:49.350 --> 00:18:52.390
<v Speaker 0>This is essentially like a distributed promise across

00:18:52.390 --> 00:18:53.909
<v Speaker 0>any language

00:18:53.990 --> 00:18:56.309
<v Speaker 0>where, again, if I got an async function

00:18:56.309 --> 00:18:57.990
<v Speaker 0>in JavaScript, it does a fetch request to

00:18:57.990 --> 00:19:00.150
<v Speaker 0>our remote host, but I call that from

00:19:00.150 --> 00:19:00.549
<v Speaker 0>Rust.

00:19:01.475 --> 00:19:03.795
<v Speaker 0>It's able to handle the promise in JavaScript

00:19:03.795 --> 00:19:05.955
<v Speaker 0>for a short no response, but it's handled

00:19:05.955 --> 00:19:07.475
<v Speaker 0>at the WebAssembly

00:19:07.475 --> 00:19:10.035
<v Speaker 0>world point of view rather than in each

00:19:10.035 --> 00:19:12.034
<v Speaker 0>individual component itself. Is that correct?

00:19:12.915 --> 00:19:13.795
<v Speaker 2>Yes.

00:19:14.450 --> 00:19:15.809
<v Speaker 2>I said that like a yes and no

00:19:15.809 --> 00:19:18.210
<v Speaker 0>rather than just a yes, but. Yeah, yeah,

00:19:18.210 --> 00:19:19.330
<v Speaker 2>I don't know what the no would be,

00:19:19.330 --> 00:19:21.490
<v Speaker 2>yes. That's really cool, I like where that's

00:19:21.490 --> 00:19:21.970
<v Speaker 0>going.

00:19:22.290 --> 00:19:22.929
<v Speaker 2>The

00:19:23.330 --> 00:19:25.010
<v Speaker 2>main thing here that we've discovered is that

00:19:25.010 --> 00:19:28.050
<v Speaker 2>there are certain frameworks and programming languages that

00:19:28.050 --> 00:19:30.445
<v Speaker 2>like makes such heavy use of async. So

00:19:30.445 --> 00:19:32.205
<v Speaker 2>one of the things that people may have

00:19:32.365 --> 00:19:34.605
<v Speaker 2>stumbled upon when they've been looking into WebAssembly

00:19:34.605 --> 00:19:35.725
<v Speaker 2>is like, but there are all these things

00:19:35.725 --> 00:19:36.924
<v Speaker 2>you can't do, right?

00:19:37.245 --> 00:19:40.044
<v Speaker 2>There's probably still like garbage collection, multithreading of

00:19:40.044 --> 00:19:41.980
<v Speaker 2>things that people used to take on to,

00:19:41.980 --> 00:19:44.540
<v Speaker 2>and there's definitely things, because it's not a

00:19:44.540 --> 00:19:46.860
<v Speaker 2>full operating system, like it's not a full

00:19:46.860 --> 00:19:47.659
<v Speaker 2>DIPC

00:19:47.660 --> 00:19:49.179
<v Speaker 2>compatible thing like

00:19:49.420 --> 00:19:51.340
<v Speaker 2>people expect other places. A lot of these

00:19:51.340 --> 00:19:54.059
<v Speaker 2>frameworks just take assumptions that we're not able

00:19:54.059 --> 00:19:55.260
<v Speaker 2>to honor WebAssembly

00:19:55.405 --> 00:19:57.405
<v Speaker 2>yet, right? So it's just yet another step

00:19:57.405 --> 00:20:00.125
<v Speaker 2>on this ladder of making more, I think

00:20:00.125 --> 00:20:00.764
<v Speaker 2>really

00:20:01.165 --> 00:20:03.325
<v Speaker 2>the effect of this will be that more

00:20:03.325 --> 00:20:06.285
<v Speaker 2>stock libraries you get from your NPMs and

00:20:06.285 --> 00:20:09.900
<v Speaker 2>your cargo or your NuGet or wherever, we'll

00:20:09.900 --> 00:20:12.060
<v Speaker 2>actually just work at WebAssembly once we have

00:20:12.060 --> 00:20:14.460
<v Speaker 2>o three o working. That's really the net

00:20:14.460 --> 00:20:16.540
<v Speaker 2>effect of this. People just compile down to

00:20:16.540 --> 00:20:18.460
<v Speaker 1>one layer and everything can work together.

00:20:18.700 --> 00:20:21.260
<v Speaker 1>It makes sense. Yeah. Yeah. Just preaching

00:20:21.765 --> 00:20:24.005
<v Speaker 0>to myself here. I'm a Polyglot developer. I

00:20:24.005 --> 00:20:25.205
<v Speaker 0>don't as much as I would like to

00:20:25.205 --> 00:20:27.365
<v Speaker 0>write most things in Rust. Yeah. I definitely

00:20:27.365 --> 00:20:29.605
<v Speaker 0>appreciate having that option to jump out to

00:20:29.605 --> 00:20:31.605
<v Speaker 0>writing some goal where it's appropriate.

00:20:31.845 --> 00:20:34.085
<v Speaker 0>I like writing a lecture. I like playing

00:20:33.600 --> 00:20:35.760
<v Speaker 0>with Ponyline. I like playing with Zig. If

00:20:35.760 --> 00:20:37.200
<v Speaker 0>there's a language that's of an interest, I

00:20:37.200 --> 00:20:38.880
<v Speaker 0>generally like to play with it. And I

00:20:38.880 --> 00:20:40.080
<v Speaker 0>feel like WebAssembly

00:20:40.080 --> 00:20:42.559
<v Speaker 0>and especially Wazi and server side stuff just

00:20:42.559 --> 00:20:43.999
<v Speaker 0>allows me to sit down

00:20:44.400 --> 00:20:47.245
<v Speaker 0>and experiment with all these things. And having

00:20:47.245 --> 00:20:49.005
<v Speaker 0>spent the first ten years of my life

00:20:49.005 --> 00:20:51.165
<v Speaker 0>writing nothing but C in parallel, you get

00:20:51.165 --> 00:20:53.005
<v Speaker 0>locked into how things are done in those

00:20:53.005 --> 00:20:53.804
<v Speaker 0>ecosystems.

00:20:53.885 --> 00:20:55.725
<v Speaker 0>And it's not until you start experimenting and

00:20:55.725 --> 00:20:57.645
<v Speaker 0>playing with more languages that I feel that

00:20:57.645 --> 00:21:00.044
<v Speaker 0>I broadened as a developer and began to

00:21:00.044 --> 00:21:02.940
<v Speaker 0>pick up new patterns and new paradigms. And

00:21:03.340 --> 00:21:05.260
<v Speaker 0>I think made me a better and stronger

00:21:05.260 --> 00:21:07.500
<v Speaker 0>developer. I encourage people to look at it

00:21:07.500 --> 00:21:09.100
<v Speaker 0>from that lens. Don't just set and rate

00:21:09.100 --> 00:21:11.100
<v Speaker 0>go because the entire cloud native ecosystem is

00:21:11.100 --> 00:21:13.180
<v Speaker 0>in go. There's a lot to learn from

00:21:13.180 --> 00:21:15.100
<v Speaker 0>Lust and Elixir and Zig and all these

00:21:15.100 --> 00:21:16.700
<v Speaker 0>other really cool languages. Just this week,

00:21:17.265 --> 00:21:19.905
<v Speaker 0>I've seen a language library shared on Gab.

00:21:19.905 --> 00:21:21.585
<v Speaker 0>Someone starred it, and it was an actor

00:21:21.585 --> 00:21:23.585
<v Speaker 0>framework written in Swift.

00:21:24.065 --> 00:21:25.985
<v Speaker 0>And I like distributed systems. I like actor

00:21:25.985 --> 00:21:27.825
<v Speaker 0>based systems, and I've never played with Swift.

00:21:27.825 --> 00:21:29.185
<v Speaker 0>So I went and lost three hours of

00:21:29.185 --> 00:21:31.280
<v Speaker 0>my day just playing and taking it down.

00:21:31.280 --> 00:21:32.480
<v Speaker 0>But it's fun. You've got to find the

00:21:32.480 --> 00:21:33.200
<v Speaker 0>moments as

00:21:33.760 --> 00:21:35.440
<v Speaker 0>well when you're doing this stuff, right? That's

00:21:35.440 --> 00:21:37.440
<v Speaker 0>what stops you hopefully from burning out and

00:21:37.440 --> 00:21:39.440
<v Speaker 0>just having a smile on your face when

00:21:39.440 --> 00:21:42.080
<v Speaker 0>you do. I mean, just the diversity of

00:21:42.080 --> 00:21:44.160
<v Speaker 2>ideas that are implemented and concepts that are

00:21:44.160 --> 00:21:45.440
<v Speaker 2>implemented, just like,

00:21:45.680 --> 00:21:47.465
<v Speaker 2>I think enables you to reasoning about things

00:21:47.465 --> 00:21:49.304
<v Speaker 2>in a different way. Just like hearing other

00:21:49.304 --> 00:21:52.744
<v Speaker 2>people's opinions, which is also always inspiring.

00:21:52.745 --> 00:21:53.624
<v Speaker 2>Definitely.

00:21:54.345 --> 00:21:56.825
<v Speaker 1>Just hear that you're enabling David's Oh, Shining

00:21:56.825 --> 00:21:58.585
<v Speaker 1>Syndrome is what I'm hearing.

00:21:58.825 --> 00:21:59.144
<v Speaker 1>So

00:22:00.049 --> 00:22:02.049
<v Speaker 1>that's very classic, it's very nice. Yeah, it

00:22:02.049 --> 00:22:03.649
<v Speaker 2>is. And I thank them for it.

00:22:04.530 --> 00:22:05.489
<v Speaker 2>There's a

00:22:06.130 --> 00:22:08.289
<v Speaker 2>very specific scenario that we did

00:22:08.690 --> 00:22:10.850
<v Speaker 2>end up writing the other for a few

00:22:10.850 --> 00:22:12.850
<v Speaker 2>weeks back because someone requested it, which was

00:22:12.850 --> 00:22:14.770
<v Speaker 2>like, hey, I'm a JavaScript developer and I

00:22:14.770 --> 00:22:15.409
<v Speaker 2>wanna do something

00:22:16.024 --> 00:22:18.345
<v Speaker 2>really easy that I can ploy into low

00:22:18.345 --> 00:22:20.505
<v Speaker 2>compute environment, but I actually wanna do image

00:22:20.505 --> 00:22:22.345
<v Speaker 2>manipulation. What's a great way of doing image

00:22:22.345 --> 00:22:24.585
<v Speaker 2>manipulation in JavaScript? We can just implement a

00:22:24.585 --> 00:22:26.505
<v Speaker 2>component in Rust over here and use a

00:22:26.505 --> 00:22:29.559
<v Speaker 2>really efficient Rust library to do image manipulation,

00:22:29.559 --> 00:22:31.720
<v Speaker 2>expose the features to an interface defining bit

00:22:31.720 --> 00:22:33.640
<v Speaker 2>and now you just wrap the ACP request

00:22:33.640 --> 00:22:35.159
<v Speaker 2>in your JavaScript and you call into the

00:22:35.159 --> 00:22:36.760
<v Speaker 2>Rust component that actually does some of the

00:22:36.760 --> 00:22:39.000
<v Speaker 2>heavy lifting, right? So I think there's another

00:22:39.000 --> 00:22:40.440
<v Speaker 2>thing which is using

00:22:40.679 --> 00:22:43.159
<v Speaker 2>some of these programming languages appropriately

00:22:44.255 --> 00:22:46.975
<v Speaker 2>really easy. JavaScript is easy with ACP and

00:22:46.975 --> 00:22:47.614
<v Speaker 2>JSON,

00:22:48.095 --> 00:22:50.255
<v Speaker 2>Rust is not necessarily easy with ACP and

00:22:50.255 --> 00:22:52.174
<v Speaker 2>JSON, but it can do other things well.

00:22:52.255 --> 00:22:54.575
<v Speaker 2>So I think that's a good sort of

00:22:54.575 --> 00:22:56.975
<v Speaker 2>more down to earth practical use case

00:22:57.409 --> 00:22:59.570
<v Speaker 2>for this type of polyglot. Right. Yeah. And

00:22:59.570 --> 00:23:01.730
<v Speaker 0>if we also expand the scope a little

00:23:01.730 --> 00:23:04.370
<v Speaker 0>bit, people write servers, people write applications that

00:23:04.370 --> 00:23:06.130
<v Speaker 0>run server sites. Some people write applications that

00:23:06.130 --> 00:23:08.370
<v Speaker 0>run front end. There's desktop applications. There's mobile

00:23:08.370 --> 00:23:11.090
<v Speaker 0>applications. There's a lot of opportunity for interrupt,

00:23:11.575 --> 00:23:13.895
<v Speaker 0>but they require you to use different language.

00:23:13.895 --> 00:23:15.735
<v Speaker 0>Yes. Sure. You can use electron for desktop

00:23:15.735 --> 00:23:17.255
<v Speaker 0>and mobile on our end. But we all

00:23:17.255 --> 00:23:19.415
<v Speaker 0>like native feeling apps that work well within

00:23:19.415 --> 00:23:20.615
<v Speaker 0>each ecosystem.

00:23:20.695 --> 00:23:23.095
<v Speaker 0>Web Assembly gives us this wonderful integration point

00:23:23.095 --> 00:23:23.815
<v Speaker 0>as well where

00:23:24.310 --> 00:23:27.190
<v Speaker 0>you can have shared type definitions that can

00:23:27.190 --> 00:23:30.230
<v Speaker 0>be consumed across the entire stack, which Yeah.

00:23:30.230 --> 00:23:31.270
<v Speaker 0>I mean, I spent a lot of time

00:23:31.270 --> 00:23:33.510
<v Speaker 0>doing this with JSON schema and GraphQL and

00:23:33.510 --> 00:23:36.070
<v Speaker 0>a whole bunch of other type languages. And

00:23:36.070 --> 00:23:37.510
<v Speaker 0>then you're always compiling

00:23:37.510 --> 00:23:40.255
<v Speaker 0>the language specific assets for this. And it's

00:23:40.255 --> 00:23:41.855
<v Speaker 0>cumbersome. It's painful, especially

00:23:42.335 --> 00:23:44.575
<v Speaker 0>when you go across multiple repositories and multiple

00:23:44.575 --> 00:23:46.815
<v Speaker 0>projects and you've got versioning and distribution.

00:23:47.215 --> 00:23:48.095
<v Speaker 0>Sure.

00:23:48.415 --> 00:23:49.775
<v Speaker 0>I could throw all an MPM, but I

00:23:49.775 --> 00:23:51.695
<v Speaker 0>wanna do that. No. And I think there's

00:23:51.695 --> 00:23:53.535
<v Speaker 0>better ways now. And WebAssembly is front and

00:23:53.535 --> 00:23:55.135
<v Speaker 0>center with that regard, at least in my

00:23:55.135 --> 00:23:57.309
<v Speaker 0>opinion. So, again, I said I'm bullish. I'm

00:23:57.309 --> 00:23:58.750
<v Speaker 0>not gonna even shy away from saying that

00:23:58.750 --> 00:24:00.429
<v Speaker 0>I really like where WebAssembly is going and

00:24:00.429 --> 00:24:01.870
<v Speaker 0>more people need to be doing this. So

00:24:02.190 --> 00:24:04.669
<v Speaker 1>From an enterprise standpoint, though, it's actually very

00:24:04.669 --> 00:24:07.150
<v Speaker 1>useful because you're not really having to deal

00:24:07.150 --> 00:24:08.990
<v Speaker 1>with a lot of the how do I

00:24:08.990 --> 00:24:11.215
<v Speaker 1>chase the new thing that I need to

00:24:11.215 --> 00:24:12.975
<v Speaker 1>do and get more developers to work on

00:24:12.975 --> 00:24:14.975
<v Speaker 1>that, but I still need to maintain

00:24:15.375 --> 00:24:17.375
<v Speaker 1>all of these tools and things that I've

00:24:17.375 --> 00:24:20.335
<v Speaker 1>built that are running in older development systems

00:24:20.335 --> 00:24:21.774
<v Speaker 1>and older languages.

00:24:22.255 --> 00:24:25.009
<v Speaker 1>So you can't staff up for everything if

00:24:25.009 --> 00:24:27.169
<v Speaker 1>you have to constantly move around. Whereas if

00:24:27.169 --> 00:24:28.690
<v Speaker 1>you only had to have one person be

00:24:28.690 --> 00:24:30.049
<v Speaker 1>able to build in this, one person be

00:24:30.049 --> 00:24:31.169
<v Speaker 1>able to build in that, and they can

00:24:31.169 --> 00:24:33.009
<v Speaker 1>build different components and put it together or

00:24:33.009 --> 00:24:35.330
<v Speaker 1>one team, I should say, an enterprise is

00:24:35.330 --> 00:24:36.370
<v Speaker 1>gonna find that very useful.

00:24:36.915 --> 00:24:39.075
<v Speaker 1>So I can definitely see the value there,

00:24:39.075 --> 00:24:40.995
<v Speaker 1>especially if you're building on what is the

00:24:40.995 --> 00:24:42.035
<v Speaker 1>de facto

00:24:42.195 --> 00:24:42.915
<v Speaker 1>operation

00:24:43.155 --> 00:24:46.035
<v Speaker 1>system, which is Kubernetes right now. So that

00:24:46.035 --> 00:24:47.635
<v Speaker 1>makes perfect sense. We

00:24:48.915 --> 00:24:50.355
<v Speaker 2>talked about a lot of the component stuff

00:24:50.355 --> 00:24:51.555
<v Speaker 2>in terms of benefits

00:24:51.880 --> 00:24:53.479
<v Speaker 2>it gives to developers.

00:24:53.799 --> 00:24:55.159
<v Speaker 2>There are fun parts that you can do

00:24:55.159 --> 00:24:57.000
<v Speaker 2>on the runtime side of things as well,

00:24:57.000 --> 00:24:58.760
<v Speaker 2>and part of three point we actually released

00:24:58.760 --> 00:25:01.400
<v Speaker 2>a feature we call selected deployments, means that

00:25:01.400 --> 00:25:02.679
<v Speaker 2>you can define,

00:25:02.840 --> 00:25:04.760
<v Speaker 2>so considering the scenarios, when you write a

00:25:04.760 --> 00:25:06.520
<v Speaker 2>spin application that you can expose

00:25:07.005 --> 00:25:09.965
<v Speaker 2>individual components, it's typically HTTP endpoints, right, because

00:25:09.965 --> 00:25:12.685
<v Speaker 2>these are serverless function models, so you create

00:25:12.685 --> 00:25:15.245
<v Speaker 2>an HTTP event, an HTTP handler. Within that

00:25:15.245 --> 00:25:17.325
<v Speaker 2>handler you can take dependencies and other components

00:25:17.325 --> 00:25:18.605
<v Speaker 2>that you bring in, but you can also

00:25:18.605 --> 00:25:20.445
<v Speaker 2>split up the applications in

00:25:20.845 --> 00:25:21.645
<v Speaker 2>multiple handlers.

00:25:22.060 --> 00:25:23.900
<v Speaker 2>With selected deployments, what you can do is

00:25:23.900 --> 00:25:25.260
<v Speaker 2>now if you go and deploy this into

00:25:25.260 --> 00:25:27.820
<v Speaker 2>Kubernetes for instance, you can actually define which

00:25:27.820 --> 00:25:30.700
<v Speaker 2>components you want to deploy on various

00:25:30.940 --> 00:25:32.940
<v Speaker 2>node types or node pools inside of your

00:25:32.940 --> 00:25:34.620
<v Speaker 2>Kubernetes cluster, even if there are some of

00:25:34.620 --> 00:25:35.500
<v Speaker 2>them you don't want to deploy.

00:25:36.315 --> 00:25:38.394
<v Speaker 2>So there are lots of benefits you can

00:25:38.394 --> 00:25:39.995
<v Speaker 2>get on the runtime side once you have

00:25:39.995 --> 00:25:41.754
<v Speaker 2>things broken out into components,

00:25:41.995 --> 00:25:43.995
<v Speaker 2>one of those being this breaking up the

00:25:43.995 --> 00:25:47.034
<v Speaker 2>application. Another thing we've done as experiments in

00:25:47.034 --> 00:25:50.539
<v Speaker 2>other runtimes is de duplicating components. If you

00:25:50.539 --> 00:25:52.059
<v Speaker 2>know Windows and dot net, there's a global

00:25:52.059 --> 00:25:54.380
<v Speaker 2>assembly cache concept in dot net, I think

00:25:54.380 --> 00:25:55.820
<v Speaker 2>it's actually dot net content, it must be

00:25:55.820 --> 00:25:57.980
<v Speaker 2>outside of Windows as well. Anyways, I used

00:25:57.980 --> 00:26:00.140
<v Speaker 2>to know about it from Windows back in

00:26:00.140 --> 00:26:01.900
<v Speaker 2>the days. But basically at run time what

00:26:01.900 --> 00:26:03.179
<v Speaker 2>you can do is, let's go back to

00:26:03.179 --> 00:26:04.860
<v Speaker 2>the example of the image transformation.

00:26:05.135 --> 00:26:07.375
<v Speaker 2>Let's say 100 people deploys

00:26:07.375 --> 00:26:08.255
<v Speaker 2>applications

00:26:08.255 --> 00:26:10.735
<v Speaker 2>into your system that all makes use of

00:26:10.735 --> 00:26:13.615
<v Speaker 2>that same image transformation component, we only need

00:26:13.615 --> 00:26:16.015
<v Speaker 2>to host it one time and we actually

00:26:16.015 --> 00:26:17.295
<v Speaker 2>unin the system

00:26:17.830 --> 00:26:20.550
<v Speaker 2>and all of these applications and other components

00:26:20.550 --> 00:26:21.830
<v Speaker 2>that make use of it

00:26:22.230 --> 00:26:24.470
<v Speaker 2>will just run that. So there are lots

00:26:24.470 --> 00:26:26.070
<v Speaker 2>of great things you can do there both

00:26:26.070 --> 00:26:28.550
<v Speaker 2>in terms of less footprint at deployment time,

00:26:28.710 --> 00:26:30.630
<v Speaker 2>but going back to your enterprise scenario, Laura,

00:26:30.630 --> 00:26:32.390
<v Speaker 2>again, those things like how can you actually

00:26:32.390 --> 00:26:35.514
<v Speaker 2>patch things in the system. But you can

00:26:35.514 --> 00:26:37.674
<v Speaker 2>just upgrade that one component if there's a

00:26:37.674 --> 00:26:39.434
<v Speaker 2>security thing that needs to come in, now

00:26:39.434 --> 00:26:41.835
<v Speaker 2>all the applications are using the updated, right?

00:26:41.835 --> 00:26:43.755
<v Speaker 2>Even if it's in a distributed system and

00:26:43.755 --> 00:26:45.674
<v Speaker 2>not necessarily on a single machine. That makes

00:26:45.674 --> 00:26:46.234
<v Speaker 1>sense.

00:26:46.554 --> 00:26:47.274
<v Speaker 1>Yeah. It's a good model.

00:26:47.929 --> 00:26:48.570
<v Speaker 2>Yeah.

00:26:48.890 --> 00:26:50.890
<v Speaker 2>Use the model. I'm

00:26:50.890 --> 00:26:52.890
<v Speaker 1>just thinking in terms of massive enterprises with

00:26:52.890 --> 00:26:54.730
<v Speaker 1>lots of things going on and just only

00:26:54.730 --> 00:26:56.250
<v Speaker 1>having to fix it once and having to

00:26:56.250 --> 00:26:58.730
<v Speaker 1>stay up once to do a deployment in

00:26:58.730 --> 00:27:00.490
<v Speaker 1>the middle of the night is very nice.

00:27:00.605 --> 00:27:01.245
<v Speaker 2>Yes.

00:27:02.045 --> 00:27:04.125
<v Speaker 1>Instead of having to have four deployment windows

00:27:04.125 --> 00:27:05.725
<v Speaker 1>that I have to go deal with over

00:27:05.725 --> 00:27:07.165
<v Speaker 1>the course of a week to handle a

00:27:07.165 --> 00:27:08.445
<v Speaker 1>security vulnerability.

00:27:08.605 --> 00:27:09.645
<v Speaker 0>Alright. Let's

00:27:09.965 --> 00:27:12.365
<v Speaker 0>get away from the enterprise chat because we

00:27:12.365 --> 00:27:14.125
<v Speaker 0>we we don't wanna offend the cloud native

00:27:14.125 --> 00:27:15.179
<v Speaker 0>folks. And

00:27:15.580 --> 00:27:17.179
<v Speaker 0>no. What I'm thinking is Don't they work

00:27:17.179 --> 00:27:18.059
<v Speaker 2>in enterprises?

00:27:18.779 --> 00:27:21.179
<v Speaker 0>Yeah. Small ones. Okay. Little ones. It's not

00:27:21.179 --> 00:27:22.460
<v Speaker 1>that one. No. I don't know. Maybe it's

00:27:22.460 --> 00:27:24.620
<v Speaker 0>just my cloudy judgment. But enterprises, I hear

00:27:24.620 --> 00:27:27.580
<v Speaker 0>Java, Tomcat, scary stuff, virtual machines.

00:27:27.820 --> 00:27:29.980
<v Speaker 0>Supposed like, bed work on here. Right?

00:27:30.745 --> 00:27:31.465
<v Speaker 1>Maybe?

00:27:31.945 --> 00:27:35.145
<v Speaker 2>What? Sorry? Java. I'm just kidding. David and

00:27:35.145 --> 00:27:36.345
<v Speaker 1>just look horrified. I think she's trying to

00:27:36.345 --> 00:27:38.424
<v Speaker 0>convince you to build the web assembly Tomcat.

00:27:38.424 --> 00:27:41.065
<v Speaker 0>No. Thank you. I'm good. I'm

00:27:41.065 --> 00:27:42.745
<v Speaker 1>more just trying to horrify you, David. So,

00:27:42.745 --> 00:27:44.830
<v Speaker 1>it's all good. Anyway, what was your question?

00:27:44.830 --> 00:27:46.590
<v Speaker 0>No, I was thinking, I think we've said

00:27:46.590 --> 00:27:48.830
<v Speaker 0>lots of nice things about WebAssembly. We're seeing

00:27:48.830 --> 00:27:49.630
<v Speaker 0>momentum,

00:27:49.630 --> 00:27:51.950
<v Speaker 0>there's pace, there's philosophy, all these wonderful things

00:27:51.950 --> 00:27:54.030
<v Speaker 0>we want from a budding new ecosystem. The

00:27:54.030 --> 00:27:55.710
<v Speaker 0>next wave of cloud computing, if you will,

00:27:55.710 --> 00:27:55.790
<v Speaker 0>right?

00:27:57.265 --> 00:27:59.905
<v Speaker 0>How are Fairmount approaching the idea of getting

00:27:59.905 --> 00:28:02.145
<v Speaker 0>individual developers to say, okay, I want to

00:28:02.145 --> 00:28:04.065
<v Speaker 0>write my next thing in WebAssembly?

00:28:04.065 --> 00:28:06.465
<v Speaker 0>Because I imagine that is a challenge, right?

00:28:06.465 --> 00:28:08.145
<v Speaker 0>People are still setting their ways, we're ready

00:28:08.145 --> 00:28:10.625
<v Speaker 0>to go and ship a container, second them

00:28:10.625 --> 00:28:11.265
<v Speaker 0>onto Kubernetes.

00:28:11.640 --> 00:28:14.200
<v Speaker 0>What does it look like? How I'm assuming

00:28:14.200 --> 00:28:16.040
<v Speaker 0>you go to conferences, you speak to people,

00:28:16.040 --> 00:28:17.960
<v Speaker 0>they have the moment, but they'll think, that

00:28:17.960 --> 00:28:19.960
<v Speaker 0>seems really cool. How do you deliver that

00:28:19.960 --> 00:28:21.960
<v Speaker 0>to the individual developer? Because then I'm sure

00:28:21.960 --> 00:28:23.640
<v Speaker 0>they eventually go to an enterprise, but I

00:28:23.640 --> 00:28:25.080
<v Speaker 0>don't care. But how do you put that

00:28:25.080 --> 00:28:27.175
<v Speaker 0>smile on a developer's face? We showed them

00:28:27.175 --> 00:28:28.135
<v Speaker 2>the thing, right?

00:28:31.495 --> 00:28:33.335
<v Speaker 2>Hard to do in a podcast like this.

00:28:33.495 --> 00:28:35.175
<v Speaker 2>I think one of our taglines like sixty

00:28:35.175 --> 00:28:37.575
<v Speaker 2>six seconds from blinking cursor to deploy the

00:28:37.575 --> 00:28:41.250
<v Speaker 2>application. Like the light weight ness. I don't

00:28:41.250 --> 00:28:43.169
<v Speaker 2>even know if that's a word, but it

00:28:43.169 --> 00:28:43.969
<v Speaker 2>yeah,

00:28:44.370 --> 00:28:46.370
<v Speaker 2>after the whole thing just to have been

00:28:46.370 --> 00:28:48.690
<v Speaker 2>a I think it's enabled us to be

00:28:48.690 --> 00:28:50.610
<v Speaker 2>able to create like one of the best

00:28:50.610 --> 00:28:53.764
<v Speaker 2>developers experience I've been part of creating.

00:28:54.085 --> 00:28:55.925
<v Speaker 2>To give you some of those examples, there's

00:28:55.925 --> 00:28:57.925
<v Speaker 2>a simple CLI tool that you download, and

00:28:57.925 --> 00:28:59.205
<v Speaker 2>by the way, we didn't talk about this

00:28:59.205 --> 00:29:00.725
<v Speaker 2>yet, but both Spin

00:29:00.805 --> 00:29:03.924
<v Speaker 2>SpinCube, the project to get things into Kubernetes,

00:29:04.165 --> 00:29:06.805
<v Speaker 2>are becoming CNCF sandbox projects at the moment,

00:29:06.805 --> 00:29:07.045
<v Speaker 2>they're

00:29:07.630 --> 00:29:09.789
<v Speaker 2>the process of onboarding,

00:29:10.270 --> 00:29:12.590
<v Speaker 2>so this is now a CNCF based project.

00:29:12.590 --> 00:29:15.309
<v Speaker 2>There are other CNCF projects around WebAssembly as

00:29:15.309 --> 00:29:17.309
<v Speaker 2>well that people should go and check out.

00:29:17.950 --> 00:29:18.669
<v Speaker 2>So it's

00:29:19.390 --> 00:29:20.830
<v Speaker 2>been open source all along, but it's not

00:29:20.830 --> 00:29:22.544
<v Speaker 2>a Fermi and owned thing anymore, it's now

00:29:22.544 --> 00:29:24.625
<v Speaker 2>in the CNCF, which is super nice. You

00:29:24.625 --> 00:29:25.904
<v Speaker 2>download a CLI

00:29:26.065 --> 00:29:27.745
<v Speaker 2>and that's really all you have to do.

00:29:27.745 --> 00:29:30.224
<v Speaker 2>You don't, and you need your programming

00:29:30.544 --> 00:29:33.184
<v Speaker 2>language tool change and there are like heavy

00:29:33.184 --> 00:29:36.240
<v Speaker 2>dependencies. I know container runtimes are probably almost

00:29:36.240 --> 00:29:38.480
<v Speaker 2>everywhere again, so whether that's a heavy dependency

00:29:38.480 --> 00:29:39.679
<v Speaker 2>or not, but you still need it if

00:29:39.679 --> 00:29:41.519
<v Speaker 2>you wanna run containers, And even if you

00:29:41.519 --> 00:29:42.879
<v Speaker 2>wanna do Kubernetes stuff,

00:29:43.360 --> 00:29:46.639
<v Speaker 2>you either run K3D or micro K8s, whatever

00:29:46.639 --> 00:29:48.159
<v Speaker 2>you do locally and all of these things.

00:29:48.159 --> 00:29:50.045
<v Speaker 2>None of this is needed here. So being

00:29:50.045 --> 00:29:51.885
<v Speaker 2>able to go through that experience of having

00:29:51.885 --> 00:29:54.605
<v Speaker 2>just a CLI, writing a simple function handler,

00:29:55.005 --> 00:29:57.405
<v Speaker 2>running it locally where you could build in

00:29:57.405 --> 00:29:59.965
<v Speaker 2>key value stores and other things that we

00:29:59.965 --> 00:30:01.645
<v Speaker 2>can do again because of this whole WASI

00:30:01.645 --> 00:30:03.980
<v Speaker 2>model, like we can plug in underlying data

00:30:03.980 --> 00:30:06.779
<v Speaker 2>store implementation through those interfaces

00:30:07.019 --> 00:30:08.940
<v Speaker 2>and being able to deploy that either into

00:30:08.940 --> 00:30:11.659
<v Speaker 2>Kubernetes cluster and SpinCube or into a managed

00:30:11.659 --> 00:30:13.820
<v Speaker 2>service like Fermion Cloud, which is run these

00:30:13.820 --> 00:30:15.260
<v Speaker 2>serverless functions at scale,

00:30:16.635 --> 00:30:19.435
<v Speaker 2>That is sixty six seconds to have things

00:30:19.435 --> 00:30:20.235
<v Speaker 2>in the cloud,

00:30:20.555 --> 00:30:22.635
<v Speaker 2>which find it super, super hard to get

00:30:22.635 --> 00:30:23.995
<v Speaker 2>to anywhere elsewhere.

00:30:24.635 --> 00:30:26.554
<v Speaker 2>I know when people talk a lot about,

00:30:26.555 --> 00:30:29.355
<v Speaker 2>typically when people talk about PaaS, they always

00:30:29.355 --> 00:30:31.115
<v Speaker 2>end up referring back to Heroku

00:30:31.670 --> 00:30:33.830
<v Speaker 2>as being sort of the golden standard of

00:30:33.830 --> 00:30:35.830
<v Speaker 2>how you want to build a good developer

00:30:35.830 --> 00:30:36.549
<v Speaker 2>platform.

00:30:36.630 --> 00:30:38.630
<v Speaker 2>And I think we've actually come super, super

00:30:38.630 --> 00:30:41.990
<v Speaker 2>close to that without having to lock people

00:30:41.990 --> 00:30:45.110
<v Speaker 2>into particular programming languages or frameworks or other

00:30:45.110 --> 00:30:47.225
<v Speaker 2>things that they can do because it's all

00:30:47.225 --> 00:30:49.145
<v Speaker 2>based of WebAssembly and the standards that are

00:30:49.145 --> 00:30:51.065
<v Speaker 2>behind that. I hope some of those things

00:30:51.065 --> 00:30:52.905
<v Speaker 2>are the things that would put developers

00:30:52.985 --> 00:30:54.105
<v Speaker 2>smile on,

00:30:54.585 --> 00:30:55.945
<v Speaker 2>which I thought was part of your question

00:30:55.945 --> 00:30:56.985
<v Speaker 2>as well, David.

00:30:57.785 --> 00:30:58.985
<v Speaker 2>Definitely SpinCube

00:30:58.985 --> 00:31:01.210
<v Speaker 2>is one of those, like making it super,

00:31:01.210 --> 00:31:03.370
<v Speaker 2>super easy to have a way, place to

00:31:03.370 --> 00:31:05.930
<v Speaker 2>run these things, right? Starting to see some

00:31:05.930 --> 00:31:09.450
<v Speaker 2>enterprises experimenting with lighting up SpinCube as part

00:31:09.450 --> 00:31:11.690
<v Speaker 2>of their Kubernetes based platforms,

00:31:11.930 --> 00:31:14.970
<v Speaker 2>really just gives developers the deployment endpoint that

00:31:14.970 --> 00:31:18.075
<v Speaker 2>they need to start running these things. Yeah.

00:31:18.075 --> 00:31:19.675
<v Speaker 0>I was really hoping that you went on

00:31:19.675 --> 00:31:21.915
<v Speaker 0>the developer experience angle, and you totally did.

00:31:21.915 --> 00:31:23.515
<v Speaker 0>So that's fantastic because

00:31:23.595 --> 00:31:26.635
<v Speaker 0>you mentioned Heroku there. And I'm

00:31:26.635 --> 00:31:29.035
<v Speaker 0>old enough that I remember when Heroku deployed

00:31:29.035 --> 00:31:30.955
<v Speaker 0>or launched, and I shut my first thing.

00:31:31.420 --> 00:31:33.179
<v Speaker 0>And I didn't write a single config.

00:31:33.500 --> 00:31:35.420
<v Speaker 0>I just did a get pushed to remote.

00:31:35.420 --> 00:31:37.580
<v Speaker 0>It wasn't mine. It's the a Roku and

00:31:37.580 --> 00:31:39.260
<v Speaker 0>all of a sudden, it knew what type

00:31:39.260 --> 00:31:41.740
<v Speaker 0>of application I had. It put it into

00:31:41.740 --> 00:31:44.275
<v Speaker 0>production and it's about a URL. And that

00:31:44.275 --> 00:31:46.035
<v Speaker 0>was a moment. That was that's a eureka

00:31:46.035 --> 00:31:47.955
<v Speaker 0>moment. That's wow. Like, deploying has never been

00:31:47.955 --> 00:31:48.995
<v Speaker 0>as easy before.

00:31:49.395 --> 00:31:50.195
<v Speaker 0>And I think

00:31:50.515 --> 00:31:52.755
<v Speaker 0>for spend for me, and I can't remember

00:31:52.755 --> 00:31:54.355
<v Speaker 0>when this was or whatever, but it was

00:31:54.355 --> 00:31:56.755
<v Speaker 0>when the spend add command was added and

00:31:56.755 --> 00:31:59.260
<v Speaker 0>I was able to just add new multi

00:31:59.260 --> 00:32:02.380
<v Speaker 0>language polyglot, whatever you wanna say, components to

00:32:02.380 --> 00:32:04.300
<v Speaker 0>a single application where all the routing was

00:32:04.300 --> 00:32:06.300
<v Speaker 0>handled for me and I could invoke each

00:32:06.300 --> 00:32:07.100
<v Speaker 0>different thing

00:32:07.740 --> 00:32:08.460
<v Speaker 0>easily.

00:32:08.620 --> 00:32:10.620
<v Speaker 0>That was, oh, wow. This changes the game

00:32:10.620 --> 00:32:12.300
<v Speaker 0>because it just gets rid of so many

00:32:12.300 --> 00:32:14.715
<v Speaker 0>different challenges with RAIN applications.

00:32:14.955 --> 00:32:17.035
<v Speaker 0>And that's why we look at Kubernetes and

00:32:17.035 --> 00:32:18.795
<v Speaker 0>can you be successful with Kubernetes on its

00:32:18.795 --> 00:32:21.195
<v Speaker 0>own? But really you need service meshes and

00:32:21.195 --> 00:32:23.035
<v Speaker 0>you need server ability tools and you need

00:32:23.035 --> 00:32:24.795
<v Speaker 0>get ops and you need platform

00:32:25.035 --> 00:32:27.355
<v Speaker 0>engineering and all this stuff. And then you

00:32:27.355 --> 00:32:30.009
<v Speaker 0>get spend coming along and you just do

00:32:30.009 --> 00:32:32.250
<v Speaker 0>spend deploy and spend build and spend up.

00:32:32.250 --> 00:32:33.850
<v Speaker 0>And it doesn't matter how many components are.

00:32:33.850 --> 00:32:36.330
<v Speaker 0>It just handles that for you. And it's

00:32:36.330 --> 00:32:38.809
<v Speaker 0>like, show me a better developer experience, anyone.

00:32:38.809 --> 00:32:41.405
<v Speaker 0>Like, that's an an open challenge. Like, I

00:32:41.405 --> 00:32:42.765
<v Speaker 0>just don't think what it is. That's a

00:32:42.765 --> 00:32:44.284
<v Speaker 1>bear with Okay. I feel like we're doing

00:32:44.284 --> 00:32:45.965
<v Speaker 0>a nice journey here and we're getting close

00:32:45.965 --> 00:32:47.164
<v Speaker 0>to wrapping up.

00:32:47.405 --> 00:32:49.245
<v Speaker 0>But let's let's we'll put smiles on developer

00:32:49.245 --> 00:32:51.645
<v Speaker 0>spaces. They see the magic. And now we're

00:32:51.645 --> 00:32:53.085
<v Speaker 0>talking about productionization.

00:32:53.085 --> 00:32:54.525
<v Speaker 0>There was something that caught my eye. It

00:32:54.525 --> 00:32:57.110
<v Speaker 0>was Ben v which was the OpenTelemetry

00:32:57.110 --> 00:32:58.790
<v Speaker 0>integration. Yeah. Maybe you can share a little

00:32:58.790 --> 00:33:00.630
<v Speaker 0>bit of light on as we move to

00:33:00.630 --> 00:33:03.030
<v Speaker 0>pushing more WebAssembly into production, how important that

00:33:03.030 --> 00:33:04.470
<v Speaker 0>is and what's coming next.

00:33:05.030 --> 00:33:06.710
<v Speaker 2>Yeah, the main thing we did in Spin

00:33:06.710 --> 00:33:07.190
<v Speaker 2>three

00:33:07.590 --> 00:33:09.190
<v Speaker 2>point zero is actually to have the runtime

00:33:09.190 --> 00:33:10.630
<v Speaker 2>being

00:33:10.024 --> 00:33:13.304
<v Speaker 2>instrumenting the path to invoking your components.

00:33:13.465 --> 00:33:15.065
<v Speaker 2>So think about it as a runtime, your

00:33:15.065 --> 00:33:16.664
<v Speaker 2>app is like the guest running on top

00:33:16.664 --> 00:33:17.705
<v Speaker 2>of the runtime,

00:33:18.184 --> 00:33:20.985
<v Speaker 2>which means that out of the box, and

00:33:20.985 --> 00:33:23.065
<v Speaker 2>there's actually a, we have column plugins to

00:33:23.065 --> 00:33:24.505
<v Speaker 2>the Spin CLI, the developer experience,

00:33:25.070 --> 00:33:27.390
<v Speaker 2>so you could run a command called spin

00:33:27.390 --> 00:33:29.149
<v Speaker 2>plugin install otel,

00:33:29.310 --> 00:33:31.390
<v Speaker 2>and then when you do the local running

00:33:31.390 --> 00:33:33.390
<v Speaker 2>of your spin application, which obviously is the

00:33:33.390 --> 00:33:34.509
<v Speaker 2>command spin up,

00:33:34.750 --> 00:33:37.005
<v Speaker 2>you do spin otel up, and if you

00:33:37.005 --> 00:33:38.845
<v Speaker 2>do those commands, what you get is a

00:33:38.845 --> 00:33:41.325
<v Speaker 2>local Jager instance that just immediately shows you

00:33:41.325 --> 00:33:43.325
<v Speaker 2>the spans when you call into your WebAssembly

00:33:43.325 --> 00:33:46.285
<v Speaker 2>components, and you can start imagining how you

00:33:46.285 --> 00:33:47.965
<v Speaker 2>can see a span of the request came

00:33:47.965 --> 00:33:48.445
<v Speaker 2>in,

00:33:48.925 --> 00:33:51.245
<v Speaker 2>one component was loaded, that component called another

00:33:51.245 --> 00:33:53.130
<v Speaker 2>component, may have called a third component, and

00:33:53.130 --> 00:33:55.130
<v Speaker 2>when we get async, you can start seeing

00:33:55.130 --> 00:33:56.650
<v Speaker 2>those things coming back and you just get

00:33:56.650 --> 00:33:58.170
<v Speaker 2>all these spans and things out of the

00:33:58.170 --> 00:33:58.650
<v Speaker 2>box.

00:33:59.450 --> 00:34:02.250
<v Speaker 2>That also is translated into SpinCube, so when

00:34:02.250 --> 00:34:04.490
<v Speaker 2>you deploy things into SpinCube, can either have

00:34:04.490 --> 00:34:07.495
<v Speaker 2>a global or namespace scope or whatever your

00:34:07.495 --> 00:34:09.415
<v Speaker 2>scope is, OTL configuration.

00:34:09.415 --> 00:34:12.135
<v Speaker 2>So all the spin applications just start pushing

00:34:12.135 --> 00:34:14.935
<v Speaker 2>traces and spans into your OTL instances.

00:34:15.175 --> 00:34:16.375
<v Speaker 2>So I think the main thing there is

00:34:16.375 --> 00:34:19.260
<v Speaker 2>just going where the ecosystem already are, right?

00:34:19.500 --> 00:34:22.380
<v Speaker 2>Is where if you build a platform based

00:34:22.380 --> 00:34:23.420
<v Speaker 2>on Kubernetes,

00:34:23.420 --> 00:34:25.179
<v Speaker 2>there is a high likelihood that you have

00:34:25.179 --> 00:34:28.219
<v Speaker 2>some OTIF based monitoring system observability

00:34:28.219 --> 00:34:29.340
<v Speaker 2>system already.

00:34:29.340 --> 00:34:31.739
<v Speaker 2>So obviously these workloads just need to fit

00:34:31.739 --> 00:34:34.324
<v Speaker 2>into that ecosystem as easy as possible. And

00:34:34.324 --> 00:34:36.484
<v Speaker 2>again, taking it back to the developer experience

00:34:36.484 --> 00:34:38.404
<v Speaker 2>is just take some of those concerns away

00:34:38.404 --> 00:34:40.244
<v Speaker 2>because why? If we have a good enough

00:34:40.244 --> 00:34:42.964
<v Speaker 2>solution that solves for the 80, if not

00:34:42.964 --> 00:34:44.724
<v Speaker 2>even more use cases,

00:34:45.204 --> 00:34:46.324
<v Speaker 2>why even

00:34:46.710 --> 00:34:48.390
<v Speaker 2>make it your concern

00:34:48.710 --> 00:34:50.710
<v Speaker 2>from the get go, right? You get stuff

00:34:50.710 --> 00:34:52.790
<v Speaker 2>out of the box and obviously you could

00:34:52.790 --> 00:34:54.869
<v Speaker 2>be able to start implementing your own stance

00:34:54.869 --> 00:34:56.710
<v Speaker 2>and so on and so forth in the

00:34:56.710 --> 00:34:58.710
<v Speaker 2>code that you write, but really

00:34:58.790 --> 00:35:00.230
<v Speaker 2>out of the box you get all these

00:35:00.230 --> 00:35:02.025
<v Speaker 2>things where you can start just measuring

00:35:02.505 --> 00:35:04.665
<v Speaker 2>the execution time off your component and so

00:35:04.665 --> 00:35:06.424
<v Speaker 2>on and so forth and have that as

00:35:06.424 --> 00:35:07.065
<v Speaker 2>you know,

00:35:07.865 --> 00:35:09.545
<v Speaker 2>a thing you don't have to think about,

00:35:09.944 --> 00:35:12.585
<v Speaker 2>but it's just there. Makes sense. Awesome.

00:35:12.744 --> 00:35:15.865
<v Speaker 0>Yeah. All right, last question. What's next for

00:35:15.865 --> 00:35:18.180
<v Speaker 0>SPIN? Main thing right now is actually the

00:35:18.180 --> 00:35:20.420
<v Speaker 2>whole CNCF onboarding. It's quite a piece

00:35:21.140 --> 00:35:23.300
<v Speaker 2>of work getting it in, and it will

00:35:23.300 --> 00:35:25.700
<v Speaker 2>probably resolve in a four point zero, main

00:35:25.700 --> 00:35:27.460
<v Speaker 2>reason being we have to do breaking changes

00:35:27.460 --> 00:35:29.300
<v Speaker 2>of a bunch of namespaces and things in

00:35:29.300 --> 00:35:32.195
<v Speaker 2>there that were previously assigned with, or subject

00:35:32.195 --> 00:35:34.115
<v Speaker 2>with Fermion as a company, which will now

00:35:34.115 --> 00:35:35.795
<v Speaker 2>be, I think I have spinner spin framework,

00:35:35.795 --> 00:35:37.395
<v Speaker 2>I don't know, think the GitHub is called

00:35:37.395 --> 00:35:39.875
<v Speaker 2>spin framework now, where both spin and spin

00:35:39.875 --> 00:35:41.875
<v Speaker 2>kupil land, as there's a whole bunch of

00:35:41.875 --> 00:35:43.315
<v Speaker 2>work that we actually have to do to

00:35:43.315 --> 00:35:45.450
<v Speaker 2>wrap all of that up. But obviously,

00:35:46.170 --> 00:35:48.490
<v Speaker 2>Wasi three point zero is a little bit

00:35:48.490 --> 00:35:50.490
<v Speaker 2>of a way out in terms of timeline

00:35:50.490 --> 00:35:51.770
<v Speaker 2>for the specification,

00:35:52.410 --> 00:35:52.890
<v Speaker 2>but

00:35:53.290 --> 00:35:55.610
<v Speaker 2>our hope is that we'll be able to

00:35:55.610 --> 00:35:58.570
<v Speaker 2>contribute a snapshot of Wasi three in the

00:35:58.570 --> 00:36:01.025
<v Speaker 2>next release of Spin, and other than that,

00:36:01.025 --> 00:36:02.545
<v Speaker 2>I think we spend a lot of time

00:36:02.545 --> 00:36:05.105
<v Speaker 2>on really improving the JavaScript experience.

00:36:05.105 --> 00:36:06.705
<v Speaker 2>It would actually be more interesting to talk

00:36:06.705 --> 00:36:09.265
<v Speaker 2>about the JavaScript SDK version three and the

00:36:09.265 --> 00:36:11.505
<v Speaker 2>upcoming version four of JavaScript SDK,

00:36:11.840 --> 00:36:13.840
<v Speaker 2>but that could maybe be another episode.

00:36:14.160 --> 00:36:16.000
<v Speaker 2>But a lot have happened on the JavaScript

00:36:16.000 --> 00:36:18.240
<v Speaker 2>side to make that a much more pleasant

00:36:18.240 --> 00:36:20.880
<v Speaker 2>experience around Spin. Other than that, given it's

00:36:20.880 --> 00:36:23.280
<v Speaker 2>a CNCF project now everyone is able to

00:36:23.280 --> 00:36:25.115
<v Speaker 2>come and contribute to what the roadmap should

00:36:25.115 --> 00:36:26.555
<v Speaker 2>look like and their ideas and what they

00:36:26.555 --> 00:36:28.075
<v Speaker 2>would like to see from the framework.

00:36:28.474 --> 00:36:30.395
<v Speaker 2>So I highly encourage everyone to seek that

00:36:30.395 --> 00:36:32.155
<v Speaker 2>out and be part of it. Good luck

00:36:32.155 --> 00:36:33.275
<v Speaker 1>with that transition.

00:36:33.355 --> 00:36:34.555
<v Speaker 1>Thank It's

00:36:34.555 --> 00:36:36.155
<v Speaker 1>a good road to be on. It's a

00:36:36.155 --> 00:36:37.435
<v Speaker 1>long road, but it's a good road. It

00:36:37.435 --> 00:36:39.630
<v Speaker 2>definitely is. I mean, are we casting bets

00:36:39.630 --> 00:36:42.510
<v Speaker 0>on when the Linux Foundation launches the WebAssembly

00:36:42.510 --> 00:36:44.830
<v Speaker 0>Foundation? Because surely that's right around the corner.

00:36:45.150 --> 00:36:47.390
<v Speaker 0>There's a DevRel Foundation now, so why not

00:36:47.390 --> 00:36:49.550
<v Speaker 0>why not WebAssembly one? That makes more sense.

00:36:49.550 --> 00:36:52.015
<v Speaker 1>That's fair. That's fair. Dora, I'll cut out.

00:36:52.015 --> 00:36:53.775
<v Speaker 0>I'm not gonna mourn a bit on foundation

00:36:53.775 --> 00:36:56.655
<v Speaker 0>on this. I could. Alright. Any last questions,

00:36:56.655 --> 00:36:58.975
<v Speaker 0>Laura? No. It's just always good to hear

00:36:58.975 --> 00:37:00.655
<v Speaker 1>a little bit more about WebAssembly.

00:37:00.895 --> 00:37:03.375
<v Speaker 1>And I know just itching David's, oh, shiny

00:37:03.375 --> 00:37:05.049
<v Speaker 1>itch is always a good thing too. All

00:37:05.049 --> 00:37:06.490
<v Speaker 0>right. Then we'll give Michael a chance to

00:37:06.490 --> 00:37:08.650
<v Speaker 0>say goodbye. Do you have any parting words

00:37:08.650 --> 00:37:10.329
<v Speaker 0>or Anthony you'd like to share with our

00:37:10.329 --> 00:37:10.890
<v Speaker 0>audience?

00:37:11.530 --> 00:37:13.770
<v Speaker 2>Oh, thanks. Thanks for having me here. Thanks

00:37:13.770 --> 00:37:15.369
<v Speaker 2>for inviting me to come and talk about

00:37:15.369 --> 00:37:16.170
<v Speaker 2>WebAssembly.

00:37:16.170 --> 00:37:17.690
<v Speaker 2>It's always good to

00:37:18.234 --> 00:37:20.234
<v Speaker 2>see you guys in person. Thank you for

00:37:20.234 --> 00:37:21.994
<v Speaker 1>coming on. It's been good to Connor's right

00:37:21.994 --> 00:37:24.555
<v Speaker 0>around the corner. Oh yeah, that's true. That's

00:37:24.555 --> 00:37:26.395
<v Speaker 2>true. I will definitely be there. Also, there's

00:37:26.395 --> 00:37:27.435
<v Speaker 2>Wasserm.io

00:37:27.435 --> 00:37:29.195
<v Speaker 2>just the week before, so if you rather

00:37:29.195 --> 00:37:31.995
<v Speaker 2>go to Barcelona Thursday, Friday, and maybe stay

00:37:32.315 --> 00:37:35.090
<v Speaker 2>over the weekend, I'll definitely recommend coming to

00:37:35.090 --> 00:37:35.970
<v Speaker 2>Watson.io.

00:37:36.130 --> 00:37:38.290
<v Speaker 1>There you go. There you go. Really good.

00:37:38.290 --> 00:37:40.210
<v Speaker 0>Links in the show notes. I see you

00:37:40.210 --> 00:37:41.090
<v Speaker 0>in London

00:37:41.250 --> 00:37:42.930
<v Speaker 0>to everyone who listen. Thank you for joining

00:37:42.930 --> 00:37:44.130
<v Speaker 0>us. Thanks.

00:37:44.130 --> 00:37:45.170
<v Speaker 1>Thanks, folks.

00:37:45.650 --> 00:37:47.994
<v Speaker 1>Thanks for joining us. If you wanna keep

00:37:47.994 --> 00:37:50.315
<v Speaker 0>up with us, consider subscribing to the podcast

00:37:50.315 --> 00:37:53.035
<v Speaker 0>on your favorite podcasting app or even go

00:37:53.035 --> 00:37:55.355
<v Speaker 0>to CloudNativeCompass.fm.

00:37:55.355 --> 00:37:56.795
<v Speaker 1>And if you want us to talk with

00:37:56.795 --> 00:38:00.230
<v Speaker 1>someone specific or cover a specific topic, reach

00:38:00.230 --> 00:38:02.630
<v Speaker 1>out to us on any social media platform.

00:38:02.869 --> 00:38:05.190
<v Speaker 0>Until next time when Exploring the Cloud Native

00:38:05.190 --> 00:38:05.910
<v Speaker 0>Landscape

00:38:05.990 --> 00:38:08.710
<v Speaker 0>on 3. On 3. 1,

00:38:08.950 --> 00:38:09.590
<v Speaker 0>2,

00:38:09.750 --> 00:38:10.470
<v Speaker 0>3.

00:38:11.030 --> 00:38:12.710
<v Speaker 0>Don't forget your Don't forget your compass.
