WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 600178e8-d4b8-4ea5-92de-0e35db516d8a
Created: 2025-06-05T21:57:05.895Z
Duration: 5427.357
Channels: 1

00:00:01.599 --> 00:00:02.960
<v Speaker 0>David Flanagan

00:00:02.960 --> 00:00:05.280
<v Speaker 0>here. Let's take a dive.

00:00:06.240 --> 00:00:07.680
<v Speaker 0>Tonight the spotlight's

00:00:07.680 --> 00:00:09.839
<v Speaker 0>not on the host you see.

00:00:11.200 --> 00:00:13.665
<v Speaker 0>It's on a piece of tech meets Spice

00:00:13.665 --> 00:00:14.625
<v Speaker 0>DB.

00:00:16.065 --> 00:00:17.744
<v Speaker 0>Fine grained permissions

00:00:18.305 --> 00:00:19.904
<v Speaker 0>done the modern way.

00:00:20.865 --> 00:00:22.145
<v Speaker 0>Gonna unpack

00:00:22.145 --> 00:00:24.705
<v Speaker 0>it all starting today.

00:00:24.865 --> 00:00:25.744
<v Speaker 0>Oh,

00:00:26.225 --> 00:00:26.545
<v Speaker 0>Spice

00:01:05.355 --> 00:01:07.355
<v Speaker 0>He'll share the insights,

00:01:07.595 --> 00:01:09.435
<v Speaker 0>show us how it's done.

00:01:10.315 --> 00:01:12.715
<v Speaker 0>The power of Spice DB

00:01:12.715 --> 00:01:14.475
<v Speaker 0>second to none.

00:01:17.515 --> 00:01:19.595
<v Speaker 0>Raw code live

00:01:19.595 --> 00:01:20.795
<v Speaker 0>with

00:01:53.500 --> 00:01:56.540
<v Speaker 1>Alright. Hello, everyone, and welcome back to Rawkode

00:01:56.540 --> 00:01:58.140
<v Speaker 1>Live at the Rawkode Academy.

00:01:58.300 --> 00:02:01.515
<v Speaker 1>I'm your host, Rawkode, sometimes known as David

00:02:01.515 --> 00:02:03.994
<v Speaker 1>Flanagan. And today on Rawkode Live, we are

00:02:03.994 --> 00:02:06.475
<v Speaker 1>taking a look at another exciting open source

00:02:06.475 --> 00:02:08.235
<v Speaker 1>project called SpiceDB.

00:02:08.555 --> 00:02:10.155
<v Speaker 1>And I'm really excited for this. I wanted

00:02:10.155 --> 00:02:11.515
<v Speaker 1>to do an episode on this for a

00:02:11.515 --> 00:02:13.275
<v Speaker 1>while because this is something that I have

00:02:13.275 --> 00:02:15.035
<v Speaker 1>personally implemented

00:02:14.560 --> 00:02:16.879
<v Speaker 1>badly at nearly every job I have ever

00:02:16.879 --> 00:02:18.880
<v Speaker 1>had, and that is authorization.

00:02:19.280 --> 00:02:21.200
<v Speaker 1>So today, we're gonna see how to do

00:02:21.200 --> 00:02:22.560
<v Speaker 1>this right.

00:02:23.120 --> 00:02:24.720
<v Speaker 1>And to guide us on our journey today,

00:02:24.720 --> 00:02:25.680
<v Speaker 1>I am joined

00:02:27.885 --> 00:02:31.165
<v Speaker 1>there we go. From Jimmy, cofounder and CPO

00:02:31.165 --> 00:02:33.885
<v Speaker 1>at Offset and maintainer of SpaceDB.

00:02:33.885 --> 00:02:35.085
<v Speaker 1>Hey. How's it going, man?

00:02:35.965 --> 00:02:37.565
<v Speaker 2>Good. Good. Thanks for having me.

00:02:38.125 --> 00:02:40.125
<v Speaker 1>Absolute pleasure. I like I said, I'm really

00:02:40.125 --> 00:02:42.204
<v Speaker 1>excited for this episode. It's a great piece

00:02:41.910 --> 00:02:43.510
<v Speaker 1>of tech, and I'm looking forward to showing

00:02:43.510 --> 00:02:45.430
<v Speaker 1>people how to get started and hope to

00:02:45.430 --> 00:02:46.790
<v Speaker 1>be successful. And

00:02:47.190 --> 00:02:48.950
<v Speaker 1>I can only imagine the amount of times

00:02:48.950 --> 00:02:52.390
<v Speaker 1>I've seen permissions and authorization done badly in

00:02:52.390 --> 00:02:53.990
<v Speaker 1>my life that you must have seen a

00:02:53.990 --> 00:02:56.390
<v Speaker 1>whole lot more. But before we get into

00:02:56.390 --> 00:02:56.550
<v Speaker 1>that,

00:02:57.415 --> 00:02:59.015
<v Speaker 1>could you just take a moment, say hello,

00:02:59.015 --> 00:03:00.615
<v Speaker 1>and introduce yourself to the audience?

00:03:01.334 --> 00:03:03.975
<v Speaker 2>Sure. Hey, everyone. I'm Jimmy Zelinsky.

00:03:04.295 --> 00:03:06.055
<v Speaker 2>I'm one of the cofounders of a company

00:03:06.055 --> 00:03:07.175
<v Speaker 2>called OpZed.

00:03:07.255 --> 00:03:08.935
<v Speaker 2>I'm sure we're gonna get way deeper into

00:03:08.935 --> 00:03:11.255
<v Speaker 2>that in this this call, but

00:03:11.790 --> 00:03:13.710
<v Speaker 2>I guess my background is just both in

00:03:13.710 --> 00:03:16.030
<v Speaker 2>product and engineering as a software engineer for

00:03:16.030 --> 00:03:16.750
<v Speaker 2>many years,

00:03:17.390 --> 00:03:19.390
<v Speaker 2>mostly working in kind of like background kind

00:03:19.390 --> 00:03:21.310
<v Speaker 2>of cloud native ecosystem,

00:03:22.030 --> 00:03:23.390
<v Speaker 2>just kind of as it all emerged

00:03:23.955 --> 00:03:26.595
<v Speaker 2>And, I kinda transitioned as I had more

00:03:26.595 --> 00:03:29.715
<v Speaker 2>opinions on how things should be architected

00:03:29.715 --> 00:03:31.715
<v Speaker 2>into more product leading role.

00:03:32.114 --> 00:03:34.194
<v Speaker 2>But, yeah, I have worked on a bunch

00:03:34.194 --> 00:03:37.555
<v Speaker 2>of, like, main projects in the CNCF space

00:03:37.700 --> 00:03:38.819
<v Speaker 2>and then also,

00:03:39.060 --> 00:03:41.860
<v Speaker 2>I'm an OCI maintainer. So that's the standards

00:03:41.860 --> 00:03:43.060
<v Speaker 2>for containers.

00:03:44.580 --> 00:03:46.340
<v Speaker 1>Awesome. Thank you so much for sharing all

00:03:46.340 --> 00:03:46.820
<v Speaker 1>that.

00:03:47.220 --> 00:03:49.459
<v Speaker 1>Alright. Let's talk about SpaceDB then and give

00:03:49.459 --> 00:03:51.540
<v Speaker 1>people a bit more, of a background of

00:03:51.540 --> 00:03:53.540
<v Speaker 1>understanding than what they're gonna see today. Right?

00:03:53.595 --> 00:03:54.235
<v Speaker 1>So

00:03:54.715 --> 00:03:57.915
<v Speaker 1>I said SpaceDB is their authorization.

00:03:57.995 --> 00:04:00.075
<v Speaker 1>Right? And then I'm assuming

00:04:00.155 --> 00:04:02.315
<v Speaker 1>this is something that, you know, maybe not

00:04:02.315 --> 00:04:04.795
<v Speaker 1>all projects, but I'd say a large percentage

00:04:04.795 --> 00:04:07.355
<v Speaker 1>of projects need to handle permissions of some

00:04:07.355 --> 00:04:08.715
<v Speaker 1>sort in their application.

00:04:09.650 --> 00:04:11.570
<v Speaker 1>And, yeah, I wasn't lying. I've built this

00:04:11.570 --> 00:04:14.050
<v Speaker 1>wrong so many times in my career, or

00:04:14.050 --> 00:04:15.970
<v Speaker 1>at least I've taken a rather naive approach

00:04:15.970 --> 00:04:17.890
<v Speaker 1>to permissions. And SpaceDB,

00:04:17.890 --> 00:04:20.610
<v Speaker 1>especially when you start to play with it,

00:04:21.330 --> 00:04:23.170
<v Speaker 1>it reveals so much about why I've been

00:04:23.170 --> 00:04:25.254
<v Speaker 1>wrong in my entire career. And I'll share

00:04:25.254 --> 00:04:26.694
<v Speaker 1>more of it as as we go, but

00:04:26.694 --> 00:04:27.974
<v Speaker 1>maybe you could give us a bit of

00:04:27.974 --> 00:04:29.574
<v Speaker 1>the background. Right? How did you end up

00:04:29.574 --> 00:04:32.215
<v Speaker 1>in this space? Why is the Zanzibar paper

00:04:32.455 --> 00:04:35.014
<v Speaker 1>inspiring in this open source project? And how

00:04:35.014 --> 00:04:36.775
<v Speaker 1>can we do permissions? Like, what is the

00:04:36.775 --> 00:04:38.534
<v Speaker 1>landscape of permissions that you've seen in your

00:04:38.534 --> 00:04:40.170
<v Speaker 1>past and where we are today? And that's

00:04:40.170 --> 00:04:41.370
<v Speaker 1>a lot. Sorry. I just threw that right

00:04:41.370 --> 00:04:43.370
<v Speaker 1>at you, but, you know, good luck. Yeah.

00:04:43.370 --> 00:04:46.090
<v Speaker 2>No. That's a great great kind of intro

00:04:46.090 --> 00:04:47.290
<v Speaker 2>context laying.

00:04:48.090 --> 00:04:50.090
<v Speaker 2>Kind of as you were saying,

00:04:50.810 --> 00:04:52.490
<v Speaker 2>I personally have also

00:04:52.970 --> 00:04:56.385
<v Speaker 2>seen every rendition of kind of authorization or

00:04:56.385 --> 00:04:57.665
<v Speaker 2>permissions implemented

00:04:57.665 --> 00:04:59.585
<v Speaker 2>across a bunch of different applications I worked

00:04:59.585 --> 00:05:00.705
<v Speaker 2>on in my career.

00:05:01.025 --> 00:05:01.505
<v Speaker 2>And

00:05:01.825 --> 00:05:03.825
<v Speaker 2>the reality

00:05:03.825 --> 00:05:06.545
<v Speaker 2>for this is there's been years and years

00:05:06.545 --> 00:05:08.225
<v Speaker 2>of research in the authorization space,

00:05:08.650 --> 00:05:11.770
<v Speaker 2>but there's not really a strong cohesive

00:05:11.770 --> 00:05:14.410
<v Speaker 2>narrative in the space or best practices that

00:05:14.410 --> 00:05:15.930
<v Speaker 2>are well described in

00:05:16.970 --> 00:05:19.850
<v Speaker 2>a way that most developers are educated.

00:05:20.250 --> 00:05:23.370
<v Speaker 2>So when it comes time to build this

00:05:22.294 --> 00:05:25.175
<v Speaker 2>part of the functionality for your application,

00:05:25.255 --> 00:05:27.014
<v Speaker 2>a lot of folks just don't really know

00:05:27.014 --> 00:05:29.735
<v Speaker 2>what to do. They hear their end customers

00:05:29.735 --> 00:05:31.495
<v Speaker 2>throughout terms like RBAC,

00:05:32.135 --> 00:05:34.775
<v Speaker 2>and they kind of have used other applications,

00:05:34.775 --> 00:05:37.255
<v Speaker 2>something like GitHub probably where they they know

00:05:37.255 --> 00:05:40.350
<v Speaker 2>there's like organizations and teams and roles, and

00:05:40.350 --> 00:05:42.750
<v Speaker 2>they could probably model something just similar enough

00:05:42.750 --> 00:05:43.389
<v Speaker 2>to that.

00:05:44.990 --> 00:05:45.870
<v Speaker 2>But I guess,

00:05:46.349 --> 00:05:48.990
<v Speaker 2>just taking a step back, my background and,

00:05:48.990 --> 00:05:50.990
<v Speaker 2>like, the the main project that kind of,

00:05:50.990 --> 00:05:51.550
<v Speaker 2>like, inspired

00:05:52.635 --> 00:05:55.755
<v Speaker 2>most of our work transitioning to work on

00:05:55.755 --> 00:05:58.155
<v Speaker 2>SpiceDB and founding Offset was

00:05:59.275 --> 00:05:59.915
<v Speaker 2>actually

00:06:00.075 --> 00:06:03.035
<v Speaker 2>Quay, which is the first private Docker registry.

00:06:04.970 --> 00:06:05.530
<v Speaker 2>So,

00:06:05.770 --> 00:06:07.850
<v Speaker 2>my cofounders and myself worked on that back

00:06:07.850 --> 00:06:09.770
<v Speaker 2>in the day and this was before kind

00:06:09.770 --> 00:06:13.770
<v Speaker 2>of Docker even had any, enterprise or way

00:06:13.770 --> 00:06:16.330
<v Speaker 2>to store images in a registry privately.

00:06:16.570 --> 00:06:18.650
<v Speaker 2>There is only the public index of images

00:06:18.650 --> 00:06:21.205
<v Speaker 2>that people could share. And when you think

00:06:21.205 --> 00:06:24.005
<v Speaker 2>about it, the core differentiating feature, like the

00:06:24.005 --> 00:06:26.005
<v Speaker 2>main feature between

00:06:26.165 --> 00:06:28.485
<v Speaker 2>Quay at the time and kind of like

00:06:28.485 --> 00:06:30.645
<v Speaker 2>the open Docker index

00:06:31.125 --> 00:06:32.485
<v Speaker 2>was authorization.

00:06:32.645 --> 00:06:34.740
<v Speaker 2>That that was it. The ability for you

00:06:34.740 --> 00:06:36.900
<v Speaker 2>to make images private. That was the core

00:06:36.900 --> 00:06:37.700
<v Speaker 2>functionality.

00:06:37.700 --> 00:06:39.780
<v Speaker 2>Everything else was just kind of layering on

00:06:39.780 --> 00:06:41.860
<v Speaker 2>kind of nice to have, but where,

00:06:42.260 --> 00:06:44.180
<v Speaker 2>where rubber meets the road and where people

00:06:44.340 --> 00:06:46.580
<v Speaker 2>what they were paying for ultimately was the

00:06:46.580 --> 00:06:49.875
<v Speaker 2>authorization scheme built on top of the standard

00:06:49.875 --> 00:06:50.675
<v Speaker 2>container

00:06:50.675 --> 00:06:51.395
<v Speaker 2>registry.

00:06:52.755 --> 00:06:55.715
<v Speaker 2>During that journey, we realized there were some

00:06:55.715 --> 00:06:56.835
<v Speaker 2>features that

00:06:57.155 --> 00:06:59.475
<v Speaker 2>the juice just wasn't worth the squeeze to

00:06:59.475 --> 00:07:00.195
<v Speaker 2>implement

00:07:00.675 --> 00:07:01.555
<v Speaker 2>the proper

00:07:02.139 --> 00:07:05.500
<v Speaker 2>security primitives in our authorization model to even

00:07:05.500 --> 00:07:06.620
<v Speaker 2>ship those features.

00:07:06.860 --> 00:07:08.139
<v Speaker 2>And even to this day, a bunch of

00:07:08.139 --> 00:07:10.460
<v Speaker 2>those features have never shipped in Quay simply

00:07:10.460 --> 00:07:12.699
<v Speaker 2>because it would take too long to really

00:07:12.699 --> 00:07:14.620
<v Speaker 2>go through with a fine tooth comb,

00:07:14.940 --> 00:07:17.305
<v Speaker 2>the custom code we had built and,

00:07:17.865 --> 00:07:18.665
<v Speaker 2>kind of

00:07:19.145 --> 00:07:21.784
<v Speaker 2>cohesively create a new model, test it, build

00:07:21.784 --> 00:07:24.745
<v Speaker 2>our confidence in it, get security auditors in

00:07:24.745 --> 00:07:26.425
<v Speaker 2>there so they can look over it before

00:07:26.425 --> 00:07:28.905
<v Speaker 2>it ever gets deployed to, an enterprise environment.

00:07:28.905 --> 00:07:32.080
<v Speaker 2>Right? And, it just takes really senior engineers

00:07:32.080 --> 00:07:34.000
<v Speaker 2>to kind of go through that. There's very

00:07:34.000 --> 00:07:37.120
<v Speaker 2>painstaking progress or a process, and there's time

00:07:37.120 --> 00:07:39.599
<v Speaker 2>to be spent better elsewhere on the project,

00:07:39.599 --> 00:07:42.160
<v Speaker 2>building out some other more important feature.

00:07:42.319 --> 00:07:44.505
<v Speaker 2>So sometimes you just get into this little

00:07:44.505 --> 00:07:46.745
<v Speaker 2>rut. They're like a local maximum.

00:07:46.825 --> 00:07:49.065
<v Speaker 2>The features you can actually build just based

00:07:49.065 --> 00:07:50.665
<v Speaker 2>on your authorization system.

00:07:50.745 --> 00:07:52.185
<v Speaker 2>And we just kinda looked at ourselves, and

00:07:52.185 --> 00:07:54.345
<v Speaker 2>we're like, there's gotta be another way. Right?

00:07:54.345 --> 00:07:55.625
<v Speaker 2>There's always a better way to do it.

00:07:56.810 --> 00:07:59.450
<v Speaker 2>And that was largely when Google published the

00:07:59.450 --> 00:08:00.730
<v Speaker 2>Zanzibar paper,

00:08:01.050 --> 00:08:03.530
<v Speaker 2>and that paper kind of models the system

00:08:03.530 --> 00:08:04.890
<v Speaker 2>that Google designed

00:08:06.250 --> 00:08:08.650
<v Speaker 2>internally. This was originally actually to drive kind

00:08:08.650 --> 00:08:11.215
<v Speaker 2>of the functionality in Google plus if you're

00:08:11.215 --> 00:08:12.255
<v Speaker 2>familiar with that.

00:08:13.615 --> 00:08:14.175
<v Speaker 2>And

00:08:14.495 --> 00:08:17.215
<v Speaker 2>the the really interesting thing about Google's paper

00:08:17.215 --> 00:08:18.735
<v Speaker 2>and the reason why I think it's, like,

00:08:18.735 --> 00:08:20.335
<v Speaker 2>more novel than a lot of the other

00:08:20.335 --> 00:08:23.455
<v Speaker 2>kind of authorization authorization research that came out,

00:08:24.860 --> 00:08:25.740
<v Speaker 2>mostly

00:08:25.740 --> 00:08:28.380
<v Speaker 2>because it talks about a cohesive system.

00:08:28.700 --> 00:08:31.180
<v Speaker 2>If you go and read papers on authorization

00:08:31.180 --> 00:08:34.220
<v Speaker 2>or even blog posts, you'll hear about RBAK

00:08:34.220 --> 00:08:37.020
<v Speaker 2>and ABAC, and they'll talk about this concept,

00:08:37.020 --> 00:08:37.660
<v Speaker 2>these ideas

00:08:38.059 --> 00:08:40.154
<v Speaker 2>for how you can organize stuff, but they

00:08:40.154 --> 00:08:42.315
<v Speaker 2>won't tell you, like, this is what a

00:08:42.315 --> 00:08:43.434
<v Speaker 2>comprehensive

00:08:43.515 --> 00:08:47.435
<v Speaker 2>deployed real world system looks like built with

00:08:47.435 --> 00:08:48.475
<v Speaker 2>these ideas.

00:08:48.714 --> 00:08:51.355
<v Speaker 2>And the Zanzibar paper is that. It's actually

00:08:51.355 --> 00:08:53.274
<v Speaker 2>kind of a retrospective

00:08:54.149 --> 00:08:54.950
<v Speaker 2>paper

00:08:54.950 --> 00:08:57.269
<v Speaker 2>looking back on the system they built, how

00:08:57.269 --> 00:08:59.269
<v Speaker 2>it scaled, how how they ran it in

00:08:59.269 --> 00:09:01.269
<v Speaker 2>production for a while, the things they have

00:09:01.269 --> 00:09:01.830
<v Speaker 2>learned,

00:09:02.149 --> 00:09:04.389
<v Speaker 2>and it gives you the holistic perspective to

00:09:04.389 --> 00:09:05.510
<v Speaker 2>kind of understand,

00:09:05.910 --> 00:09:09.035
<v Speaker 2>what goes into a robust authorization

00:09:09.035 --> 00:09:11.915
<v Speaker 2>system and the framework that drives it. So

00:09:12.555 --> 00:09:13.915
<v Speaker 2>I hope I did a good job answering

00:09:13.915 --> 00:09:14.635
<v Speaker 2>your question.

00:09:15.195 --> 00:09:17.835
<v Speaker 1>Yeah. Definitely. For sure. And then I think

00:09:17.835 --> 00:09:19.355
<v Speaker 1>it leads us in nicely as we kinda

00:09:19.355 --> 00:09:21.355
<v Speaker 1>explore SpaceDB in more detail.

00:09:22.230 --> 00:09:23.829
<v Speaker 1>But I'm also gonna come back to my

00:09:23.829 --> 00:09:26.310
<v Speaker 1>my failures throughout my career because I feel

00:09:26.310 --> 00:09:28.550
<v Speaker 1>like there's a certain pivot point where you

00:09:28.550 --> 00:09:29.990
<v Speaker 1>realize just how important

00:09:30.230 --> 00:09:33.510
<v Speaker 1>correct offset permissions are in your application because

00:09:33.829 --> 00:09:36.470
<v Speaker 1>they're not something that are easy to fix

00:09:36.470 --> 00:09:37.269
<v Speaker 1>retroactively.

00:09:37.625 --> 00:09:39.865
<v Speaker 1>And I'm I'm sure if that resonates with

00:09:39.865 --> 00:09:41.785
<v Speaker 1>anyone that been in in my position, hopefully,

00:09:41.785 --> 00:09:43.464
<v Speaker 1>maybe your position at some point too. Right?

00:09:43.464 --> 00:09:45.865
<v Speaker 1>But let's assume you start off with a

00:09:45.865 --> 00:09:48.105
<v Speaker 1>simple application and you start off with a

00:09:48.105 --> 00:09:50.264
<v Speaker 1>simple RBAC model. Right? A user has some

00:09:50.264 --> 00:09:52.264
<v Speaker 1>sort of role and that role has permissions

00:09:52.264 --> 00:09:52.825
<v Speaker 1>across

00:09:53.090 --> 00:09:55.330
<v Speaker 1>everything in the system. That's typically how I

00:09:55.330 --> 00:09:56.290
<v Speaker 1>used to do it. Right?

00:09:56.770 --> 00:09:58.370
<v Speaker 1>You say a user is an editor. They

00:09:58.370 --> 00:10:00.610
<v Speaker 1>can edit articles. Job done. Right? You never

00:10:00.610 --> 00:10:02.690
<v Speaker 1>really take it any finer grained than that.

00:10:03.010 --> 00:10:05.250
<v Speaker 1>And then at some point in my application,

00:10:05.250 --> 00:10:06.894
<v Speaker 1>we decided, okay. Well, actually, people are gonna

00:10:06.894 --> 00:10:08.894
<v Speaker 1>have multiple roles because we can have editors,

00:10:08.894 --> 00:10:10.255
<v Speaker 1>but you could also be an admin and

00:10:10.255 --> 00:10:11.295
<v Speaker 1>you could also be this. And this is

00:10:11.295 --> 00:10:13.135
<v Speaker 1>where we go from this flat one to

00:10:13.135 --> 00:10:15.135
<v Speaker 1>one mapping of roles to users.

00:10:15.615 --> 00:10:16.975
<v Speaker 1>If you were silly enough to build it

00:10:16.975 --> 00:10:18.575
<v Speaker 1>that way, which, of course, I have many

00:10:18.575 --> 00:10:18.735
<v Speaker 1>times.

00:10:19.660 --> 00:10:21.420
<v Speaker 1>And then you you start getting fancy. And,

00:10:21.420 --> 00:10:23.420
<v Speaker 1>again, I'll lean on my own experience where,

00:10:23.420 --> 00:10:24.860
<v Speaker 1>like, why don't we just store an integer

00:10:24.860 --> 00:10:26.620
<v Speaker 1>and where they, like, shift some bets for

00:10:26.620 --> 00:10:28.460
<v Speaker 1>every role and then if that bets active,

00:10:28.460 --> 00:10:30.780
<v Speaker 1>you'd and then it sounds fancy and it

00:10:30.780 --> 00:10:32.220
<v Speaker 1>sounds cool and then you realize you're in

00:10:32.220 --> 00:10:33.420
<v Speaker 1>a world of heart later on.

00:10:34.175 --> 00:10:36.175
<v Speaker 1>That doesn't scale either. But then you're so

00:10:36.175 --> 00:10:37.695
<v Speaker 1>ingrained in this model

00:10:37.935 --> 00:10:39.375
<v Speaker 1>that whenever you want to do anything that

00:10:39.375 --> 00:10:41.855
<v Speaker 1>is truly sophisticated and goes beyond the simple

00:10:41.855 --> 00:10:44.334
<v Speaker 1>RBAK premise, it fails substantially.

00:10:44.894 --> 00:10:46.095
<v Speaker 1>And this is I don't know if there's

00:10:46.095 --> 00:10:48.330
<v Speaker 1>a certain point where or a type of

00:10:48.330 --> 00:10:50.090
<v Speaker 1>system maybe this is a a good question.

00:10:50.090 --> 00:10:52.570
<v Speaker 1>Right? Like, at what point do you need

00:10:53.050 --> 00:10:56.410
<v Speaker 1>a SpaceDB verity just flipping a column in

00:10:56.410 --> 00:10:58.810
<v Speaker 1>a database? And the example I had in

00:10:58.810 --> 00:11:00.490
<v Speaker 1>my head is, like, fine. If you've got

00:11:01.115 --> 00:11:03.435
<v Speaker 1>a flat system with user rules and content,

00:11:03.435 --> 00:11:03.915
<v Speaker 1>fine.

00:11:04.714 --> 00:11:06.475
<v Speaker 1>I think it be again, the quick example

00:11:06.475 --> 00:11:08.074
<v Speaker 1>is perfect. Right? You've got user

00:11:08.394 --> 00:11:09.995
<v Speaker 1>generated content,

00:11:09.995 --> 00:11:11.995
<v Speaker 1>and their permissions are not gonna be something

00:11:11.995 --> 00:11:12.555
<v Speaker 1>that is

00:11:13.760 --> 00:11:15.520
<v Speaker 1>easily baked into the system as a whole.

00:11:15.520 --> 00:11:16.800
<v Speaker 1>I don't even know if I'm explaining this

00:11:16.800 --> 00:11:19.760
<v Speaker 1>correctly, but there's definitely a point where SpiceDB

00:11:19.760 --> 00:11:22.000
<v Speaker 1>and this model and the Zanzibar implementation, all

00:11:22.000 --> 00:11:23.520
<v Speaker 1>of this comes together, and it's like a

00:11:23.520 --> 00:11:25.440
<v Speaker 1>eureka moment. And I wish I had it

00:11:25.440 --> 00:11:27.360
<v Speaker 1>sooner, but I didn't. And yeah.

00:11:27.865 --> 00:11:29.945
<v Speaker 1>Maybe you can kind of get this, like

00:11:30.585 --> 00:11:31.065
<v Speaker 1>but

00:11:32.425 --> 00:11:33.865
<v Speaker 1>I'm gonna keep just talking at you, then

00:11:33.865 --> 00:11:35.545
<v Speaker 1>you can just keep nodding at me. But

00:11:35.945 --> 00:11:38.905
<v Speaker 1>let's try and find our actionable question here.

00:11:39.385 --> 00:11:41.865
<v Speaker 2>Where do you see think I know your

00:11:41.130 --> 00:11:43.050
<v Speaker 2>question. Your question is, like, when do you

00:11:43.050 --> 00:11:45.450
<v Speaker 2>introduce something like a SpiceDB in in a

00:11:45.450 --> 00:11:46.650
<v Speaker 2>project. Right?

00:11:47.050 --> 00:11:48.810
<v Speaker 1>Well, I was actually gonna make it simpler

00:11:48.810 --> 00:11:50.810
<v Speaker 1>to start and lean into that. Right? Should

00:11:50.810 --> 00:11:53.050
<v Speaker 1>every system use SpiceDB? Let's start with that.

00:11:54.545 --> 00:11:55.985
<v Speaker 2>I think the answer to that is no.

00:11:55.985 --> 00:11:58.465
<v Speaker 2>Right? If you're if you're just building an

00:11:58.465 --> 00:12:00.465
<v Speaker 2>MVP of your app, like, you you're a

00:12:00.465 --> 00:12:03.185
<v Speaker 2>startup founder and you're trying to test to

00:12:03.185 --> 00:12:05.345
<v Speaker 2>see if an idea has product market fit

00:12:05.345 --> 00:12:06.945
<v Speaker 2>and you're really early into the process,

00:12:07.509 --> 00:12:10.310
<v Speaker 2>I do not think outside of a couple

00:12:10.550 --> 00:12:12.310
<v Speaker 2>niche kind of domains,

00:12:12.310 --> 00:12:13.509
<v Speaker 2>so say you're,

00:12:13.829 --> 00:12:15.910
<v Speaker 2>trying to build a healthcare startup or something

00:12:15.910 --> 00:12:18.310
<v Speaker 2>like that, where you're gonna have more sensitive

00:12:18.310 --> 00:12:20.790
<v Speaker 2>authorization logic, things where you're like managing

00:12:21.745 --> 00:12:25.105
<v Speaker 2>when doctors are assigned to particular offices in

00:12:25.105 --> 00:12:27.825
<v Speaker 2>these particular hours. They're allowed access to this

00:12:27.825 --> 00:12:29.105
<v Speaker 2>customer information,

00:12:29.904 --> 00:12:31.825
<v Speaker 2>like or this patient information.

00:12:31.985 --> 00:12:33.904
<v Speaker 2>If you know there's something like that, you

00:12:33.904 --> 00:12:36.464
<v Speaker 2>probably wanna invest in SpiceDB really early on.

00:12:36.959 --> 00:12:39.120
<v Speaker 2>Otherwise, if you're kind of building a standard

00:12:39.120 --> 00:12:41.920
<v Speaker 2>SaaS app, the very beginning of your project

00:12:41.920 --> 00:12:43.920
<v Speaker 2>when you're kind of, like, trying to find

00:12:43.920 --> 00:12:46.000
<v Speaker 2>your initial customers, things like that,

00:12:46.319 --> 00:12:47.759
<v Speaker 2>it's just not the right time for something

00:12:47.759 --> 00:12:49.600
<v Speaker 2>like this. Like, you're gonna be writing a

00:12:49.600 --> 00:12:51.005
<v Speaker 2>lot of code you're gonna end up throwing

00:12:51.005 --> 00:12:53.885
<v Speaker 2>away later. And I think the the point

00:12:53.885 --> 00:12:56.205
<v Speaker 2>is you should be focusing on kind of,

00:12:56.205 --> 00:12:58.685
<v Speaker 2>like, figuring out if your product is gonna

00:12:58.685 --> 00:12:59.405
<v Speaker 2>succeed.

00:12:59.725 --> 00:13:02.525
<v Speaker 2>But there comes this kind of phase of

00:13:02.525 --> 00:13:04.445
<v Speaker 2>when you're developing your product

00:13:05.529 --> 00:13:07.370
<v Speaker 2>where the customers are gonna start coming to

00:13:07.370 --> 00:13:10.330
<v Speaker 2>you, probably enterprises depending on what software you're

00:13:10.330 --> 00:13:13.050
<v Speaker 2>building, and they're gonna start asking for things

00:13:13.050 --> 00:13:16.089
<v Speaker 2>like, hey. We're trying to model our, like,

00:13:16.089 --> 00:13:18.170
<v Speaker 2>structure of our business so that we can

00:13:18.170 --> 00:13:20.330
<v Speaker 2>have multiple teams inside your application.

00:13:20.925 --> 00:13:22.925
<v Speaker 2>And I feel like once you get to

00:13:22.925 --> 00:13:23.965
<v Speaker 2>that point where,

00:13:24.445 --> 00:13:27.645
<v Speaker 2>the customer feedback is flowing that you need

00:13:27.645 --> 00:13:30.685
<v Speaker 2>better kind of organization around your resources

00:13:30.765 --> 00:13:32.925
<v Speaker 2>and the permissions that are maybe trying to

00:13:32.925 --> 00:13:34.125
<v Speaker 2>sink in even,

00:13:34.925 --> 00:13:35.565
<v Speaker 2>that's

00:13:36.200 --> 00:13:38.200
<v Speaker 2>when you need to start evaluating something like

00:13:38.200 --> 00:13:41.480
<v Speaker 2>SpiceDB or other authorization tooling because now you're

00:13:41.480 --> 00:13:43.480
<v Speaker 2>kind of it's it's not just like, okay,

00:13:43.480 --> 00:13:45.560
<v Speaker 2>we've proven out our idea. Now it's looking

00:13:45.560 --> 00:13:47.400
<v Speaker 2>at it as like an investment into the

00:13:47.400 --> 00:13:49.560
<v Speaker 2>future of the product and giving yourself

00:13:50.834 --> 00:13:52.035
<v Speaker 2>a foundation

00:13:52.035 --> 00:13:53.394
<v Speaker 2>that you can change

00:13:53.555 --> 00:13:56.194
<v Speaker 2>and maintain the velocity with which you're developing

00:13:56.194 --> 00:13:58.274
<v Speaker 2>your application. Because if you end up building

00:13:58.274 --> 00:14:00.834
<v Speaker 2>something yourself, it'll probably work for a little

00:14:00.834 --> 00:14:02.915
<v Speaker 2>bit, but also you're not giving yourself kinda

00:14:02.915 --> 00:14:06.180
<v Speaker 2>like that foundational piece that you can mold

00:14:06.180 --> 00:14:08.340
<v Speaker 2>in different ways. So you're gonna build something

00:14:08.340 --> 00:14:09.780
<v Speaker 2>really brittle, and then you're gonna throw it

00:14:09.780 --> 00:14:11.140
<v Speaker 2>away and have to rebuild it. And then

00:14:11.140 --> 00:14:14.100
<v Speaker 2>you'll build the new thing also brittle

00:14:14.260 --> 00:14:16.260
<v Speaker 2>for the new requirements, and then you're gonna

00:14:16.260 --> 00:14:18.020
<v Speaker 2>throw that away eventually when you get even

00:14:18.020 --> 00:14:20.255
<v Speaker 2>more requirements. Right? And it's just rinse and

00:14:20.255 --> 00:14:20.894
<v Speaker 2>repeat.

00:14:21.214 --> 00:14:21.695
<v Speaker 2>And

00:14:22.415 --> 00:14:25.694
<v Speaker 2>folks don't as they're building their application, they're

00:14:25.694 --> 00:14:27.055
<v Speaker 2>not thinking about how to make,

00:14:27.454 --> 00:14:29.375
<v Speaker 2>the most robust authorization

00:14:29.375 --> 00:14:31.774
<v Speaker 2>foundation that's future proof for them, that's gonna

00:14:31.774 --> 00:14:33.375
<v Speaker 2>be easy for them to maintain over time.

00:14:33.860 --> 00:14:36.420
<v Speaker 2>That's something that only people working full time

00:14:36.420 --> 00:14:38.579
<v Speaker 2>on authorization systems think about.

00:14:39.060 --> 00:14:40.339
<v Speaker 2>So really,

00:14:41.060 --> 00:14:42.740
<v Speaker 2>I think it's at that phase where, like,

00:14:42.740 --> 00:14:44.740
<v Speaker 2>the customers are coming to you asking for

00:14:44.740 --> 00:14:46.660
<v Speaker 2>these things that you need to consider, like,

00:14:46.660 --> 00:14:49.075
<v Speaker 2>okay, I need real tooling for this that's

00:14:49.154 --> 00:14:51.235
<v Speaker 2>that I'm going to invest in and invest

00:14:51.235 --> 00:14:53.315
<v Speaker 2>in my product over time. And and that's

00:14:53.315 --> 00:14:55.394
<v Speaker 2>that's really when I would say start looking

00:14:55.394 --> 00:14:56.834
<v Speaker 2>at something like SpiceDB

00:14:56.834 --> 00:14:58.834
<v Speaker 2>or plenty of the other tooling that exists

00:14:58.834 --> 00:15:01.199
<v Speaker 2>for an authorization. Just don't build the stuff

00:15:01.199 --> 00:15:03.839
<v Speaker 2>yourself because I think that's where people fall

00:15:03.839 --> 00:15:05.760
<v Speaker 2>into the trap of hurting themselves over and

00:15:05.760 --> 00:15:06.880
<v Speaker 2>over and over again.

00:15:08.320 --> 00:15:10.000
<v Speaker 1>Alright. Awesome. Thank you.

00:15:10.480 --> 00:15:11.760
<v Speaker 1>So you mentioned,

00:15:12.654 --> 00:15:16.175
<v Speaker 1>you know, SpaceDB is inspired by the Zanzibar

00:15:16.175 --> 00:15:17.775
<v Speaker 1>paper. You've kinda touched on that a little

00:15:17.775 --> 00:15:19.055
<v Speaker 1>bit. Maybe we could go into a bit

00:15:19.055 --> 00:15:20.975
<v Speaker 1>more detail, you know, for the people watching.

00:15:20.975 --> 00:15:22.975
<v Speaker 1>What is different from, you know, the naive

00:15:22.975 --> 00:15:26.415
<v Speaker 1>implementations I talked about versus what SpaceDB

00:15:26.130 --> 00:15:28.210
<v Speaker 1>is doing. Like, how do people make that

00:15:28.210 --> 00:15:30.770
<v Speaker 1>cognitive shift from, okay, I know this to,

00:15:30.770 --> 00:15:32.450
<v Speaker 1>okay, I need to start doing this.

00:15:34.050 --> 00:15:36.130
<v Speaker 2>Yeah. I think to some degree,

00:15:37.250 --> 00:15:39.330
<v Speaker 2>the most naive take people have when they

00:15:39.330 --> 00:15:40.930
<v Speaker 2>build authorization themselves

00:15:41.105 --> 00:15:43.185
<v Speaker 2>is they probably store

00:15:43.425 --> 00:15:45.665
<v Speaker 2>some data in their database. Like, say they're

00:15:45.665 --> 00:15:47.745
<v Speaker 2>building a Rails app, they're gonna do what

00:15:47.745 --> 00:15:49.905
<v Speaker 2>they do with everything when they're building a

00:15:49.905 --> 00:15:52.225
<v Speaker 2>Rails app. They're probably gonna use their the

00:15:52.225 --> 00:15:53.425
<v Speaker 2>active record ORM

00:15:53.670 --> 00:15:56.310
<v Speaker 2>to model some some tables that they're gonna

00:15:56.310 --> 00:15:58.630
<v Speaker 2>store inside their database and they're probably gonna

00:15:58.630 --> 00:16:00.630
<v Speaker 2>pull that data down when a request comes

00:16:00.630 --> 00:16:03.269
<v Speaker 2>in and then they're gonna execute some Ruby

00:16:03.269 --> 00:16:05.110
<v Speaker 2>code that has custom logic in it to

00:16:05.110 --> 00:16:07.190
<v Speaker 2>interpret that data to say like, alright, is

00:16:07.190 --> 00:16:09.110
<v Speaker 2>this person allowed to perform this action?

00:16:10.635 --> 00:16:13.275
<v Speaker 2>And kind of the major problem there is,

00:16:13.275 --> 00:16:13.755
<v Speaker 2>like,

00:16:14.235 --> 00:16:17.115
<v Speaker 2>the the data that gets stored in the

00:16:17.115 --> 00:16:17.835
<v Speaker 2>database,

00:16:18.235 --> 00:16:20.075
<v Speaker 2>I never told you anything about structure or

00:16:20.075 --> 00:16:22.555
<v Speaker 2>shape. Right? And then the logic written in

00:16:22.555 --> 00:16:24.699
<v Speaker 2>Ruby, never told you what any of that

00:16:24.699 --> 00:16:27.259
<v Speaker 2>logic actually is. And those are both gonna

00:16:27.259 --> 00:16:28.860
<v Speaker 2>change a lot over time.

00:16:30.060 --> 00:16:31.420
<v Speaker 2>And it's gonna be a lot of complexity

00:16:31.420 --> 00:16:32.779
<v Speaker 2>management around that.

00:16:33.259 --> 00:16:35.740
<v Speaker 2>The other question that you have in this

00:16:35.740 --> 00:16:37.899
<v Speaker 2>this kind of system is

00:16:38.695 --> 00:16:40.855
<v Speaker 2>that it works when it's a monolith, but

00:16:40.855 --> 00:16:43.255
<v Speaker 2>like you start introducing microservices

00:16:43.654 --> 00:16:45.975
<v Speaker 2>and now that data lives inside of the

00:16:45.975 --> 00:16:47.654
<v Speaker 2>monolith database.

00:16:47.654 --> 00:16:50.295
<v Speaker 2>But say you have another service and it

00:16:50.295 --> 00:16:51.894
<v Speaker 2>needs to check some of those permissions.

00:16:52.340 --> 00:16:53.780
<v Speaker 2>What you end up doing is, like, you

00:16:53.780 --> 00:16:56.100
<v Speaker 2>build this ad hoc permissions API into your

00:16:56.100 --> 00:16:59.460
<v Speaker 2>monolith. And now that's, like, not great because

00:16:59.460 --> 00:17:01.300
<v Speaker 2>the whole point of microservices is to get

00:17:01.300 --> 00:17:03.460
<v Speaker 2>the monolith out of the critical path. Right?

00:17:03.460 --> 00:17:05.619
<v Speaker 2>And, like, kind of break down pieces into

00:17:05.619 --> 00:17:06.900
<v Speaker 2>orthogonal components.

00:17:07.665 --> 00:17:10.465
<v Speaker 2>But now everything has to check preflight things

00:17:10.465 --> 00:17:12.464
<v Speaker 2>to the monolith before it can do work.

00:17:12.545 --> 00:17:14.625
<v Speaker 2>So you kind of get into this place

00:17:14.785 --> 00:17:15.345
<v Speaker 2>where,

00:17:16.385 --> 00:17:18.944
<v Speaker 2>it's definitely not gonna last you forever. Right?

00:17:19.265 --> 00:17:22.705
<v Speaker 2>And so the Zanzibar paper says, alright. You

00:17:22.880 --> 00:17:24.480
<v Speaker 2>you could abstract

00:17:24.640 --> 00:17:27.200
<v Speaker 2>the code that you've written in your monolith

00:17:27.200 --> 00:17:28.720
<v Speaker 2>and pull that out,

00:17:29.600 --> 00:17:31.680
<v Speaker 2>and use it as a library, but still

00:17:31.680 --> 00:17:33.600
<v Speaker 2>doesn't solve that problem, that data living inside

00:17:33.600 --> 00:17:36.925
<v Speaker 2>the monolith database until you have a centralized

00:17:36.925 --> 00:17:38.205
<v Speaker 2>kind of authorization

00:17:38.205 --> 00:17:39.965
<v Speaker 2>service at your business.

00:17:40.285 --> 00:17:41.645
<v Speaker 2>So the same way you would make a

00:17:41.645 --> 00:17:43.885
<v Speaker 2>microservice of other domains, why don't you have

00:17:43.885 --> 00:17:46.684
<v Speaker 2>a microservice that's dedicated to checking permissions?

00:17:47.885 --> 00:17:50.445
<v Speaker 2>And what's really cool about that idea

00:17:50.790 --> 00:17:53.670
<v Speaker 2>is that can be shared across your entire

00:17:53.670 --> 00:17:54.790
<v Speaker 2>product portfolio.

00:17:54.790 --> 00:17:58.070
<v Speaker 2>It's not just used for one particular app.

00:17:59.190 --> 00:18:01.830
<v Speaker 2>So that means you can implement these really

00:18:01.830 --> 00:18:03.030
<v Speaker 2>interesting experiences.

00:18:03.635 --> 00:18:05.555
<v Speaker 2>So say you're Google, and this is a

00:18:05.555 --> 00:18:08.915
<v Speaker 2>real example. If you're Google and you, if

00:18:08.915 --> 00:18:09.475
<v Speaker 2>you

00:18:09.875 --> 00:18:12.675
<v Speaker 2>open up Gmail and you paste in a

00:18:12.675 --> 00:18:14.915
<v Speaker 2>Google Doc link and then try to email

00:18:14.915 --> 00:18:15.475
<v Speaker 2>it to someone,

00:18:16.710 --> 00:18:19.430
<v Speaker 2>Gmail will actually preflight a request to Zansbar

00:18:19.430 --> 00:18:21.669
<v Speaker 2>that says, can the email recipient

00:18:21.670 --> 00:18:22.870
<v Speaker 2>actually see,

00:18:23.110 --> 00:18:24.870
<v Speaker 2>like, do they have access to read this

00:18:24.870 --> 00:18:25.909
<v Speaker 2>Google Doc?

00:18:26.150 --> 00:18:26.710
<v Speaker 2>And

00:18:27.670 --> 00:18:28.870
<v Speaker 2>Google Docs

00:18:28.870 --> 00:18:29.990
<v Speaker 2>has no idea.

00:18:30.745 --> 00:18:33.624
<v Speaker 2>It doesn't share any code with Google Drive.

00:18:34.105 --> 00:18:36.664
<v Speaker 2>There's there's no kind of shared logic there.

00:18:36.664 --> 00:18:38.825
<v Speaker 2>All it's doing is is sending a request

00:18:38.825 --> 00:18:42.184
<v Speaker 2>to Zanzibar saying like, hey, does this email

00:18:42.184 --> 00:18:43.385
<v Speaker 2>have access to this URL?

00:18:44.580 --> 00:18:45.220
<v Speaker 2>And

00:18:45.380 --> 00:18:47.780
<v Speaker 2>you get to build these deep experiences. That's

00:18:47.780 --> 00:18:50.340
<v Speaker 2>a really powerful experience. Actually, if if you

00:18:50.340 --> 00:18:51.940
<v Speaker 2>say like if it finds that the person

00:18:51.940 --> 00:18:54.100
<v Speaker 2>doesn't have access, can actually remediate it then

00:18:54.100 --> 00:18:55.860
<v Speaker 2>and there in in Gmail

00:18:56.500 --> 00:18:58.659
<v Speaker 2>as well. So you can give people access

00:18:58.820 --> 00:19:00.260
<v Speaker 2>without

00:18:59.914 --> 00:19:02.635
<v Speaker 2>the back ends having any shared code, which

00:19:02.635 --> 00:19:03.674
<v Speaker 2>is kind of crazy.

00:19:04.315 --> 00:19:06.715
<v Speaker 2>But you can build these super deep integrated

00:19:06.715 --> 00:19:09.034
<v Speaker 2>experiences once you have all the permissions kind

00:19:09.034 --> 00:19:11.434
<v Speaker 2>of living in a centralized place. Another example

00:19:11.434 --> 00:19:13.270
<v Speaker 2>would be like, if

00:19:13.270 --> 00:19:17.030
<v Speaker 2>you are an engineer at Atlassian building confluence,

00:19:17.190 --> 00:19:19.350
<v Speaker 2>you could write rules like if a Jira

00:19:19.350 --> 00:19:22.950
<v Speaker 2>ticket is embedded in this confluence page, if

00:19:22.950 --> 00:19:24.950
<v Speaker 2>someone has access to this confluence page, they

00:19:24.950 --> 00:19:27.685
<v Speaker 2>should inherit access to the Jira tickets that

00:19:27.685 --> 00:19:30.325
<v Speaker 2>also live inside of that page. So now

00:19:30.325 --> 00:19:32.245
<v Speaker 2>you get kind of like this really,

00:19:32.485 --> 00:19:34.325
<v Speaker 2>nice kind of cross

00:19:34.645 --> 00:19:36.085
<v Speaker 2>product unified

00:19:36.325 --> 00:19:39.045
<v Speaker 2>view of kind of permissions across your product

00:19:39.045 --> 00:19:39.365
<v Speaker 2>suite.

00:19:39.980 --> 00:19:41.660
<v Speaker 2>I just don't think there is many other

00:19:41.660 --> 00:19:42.380
<v Speaker 2>solutions

00:19:42.460 --> 00:19:44.220
<v Speaker 2>in the space that give you that kind

00:19:44.220 --> 00:19:45.100
<v Speaker 2>of experience

00:19:45.260 --> 00:19:47.500
<v Speaker 2>and give you that kind of central central

00:19:47.500 --> 00:19:49.980
<v Speaker 2>way to manage and model and understand the

00:19:49.980 --> 00:19:51.945
<v Speaker 2>permissions across your products. So

00:19:53.304 --> 00:19:56.745
<v Speaker 1>Alright. Yeah. Fantastic answer. So I think with

00:19:56.745 --> 00:19:59.705
<v Speaker 1>that, we've hopefully given everyone watching enough context

00:19:59.705 --> 00:20:00.664
<v Speaker 1>to understand

00:20:00.904 --> 00:20:02.825
<v Speaker 1>the old, the new, and now we can

00:20:02.825 --> 00:20:05.519
<v Speaker 1>guide them through some steps. I'll also just

00:20:05.519 --> 00:20:08.159
<v Speaker 1>show there's some content on the Offset YouTube

00:20:08.159 --> 00:20:08.879
<v Speaker 1>channel,

00:20:08.960 --> 00:20:10.639
<v Speaker 1>which was invaluable to me when I was

00:20:10.639 --> 00:20:12.399
<v Speaker 1>learning the SpaceDB, which is the session where

00:20:12.399 --> 00:20:14.159
<v Speaker 1>you built think it was the GitHub permissions

00:20:14.159 --> 00:20:15.279
<v Speaker 1>model video.

00:20:16.240 --> 00:20:18.639
<v Speaker 1>That is a if this video doesn't help

00:20:18.639 --> 00:20:20.465
<v Speaker 1>you, which I hope it does, go check

00:20:20.465 --> 00:20:22.065
<v Speaker 1>that one out later. So

00:20:22.385 --> 00:20:25.025
<v Speaker 1>I am going to share my screen, and

00:20:25.025 --> 00:20:27.025
<v Speaker 1>we will kick this off.

00:20:29.985 --> 00:20:30.625
<v Speaker 2>Alright.

00:20:33.980 --> 00:20:35.500
<v Speaker 1>No computer signal.

00:20:43.260 --> 00:20:45.100
<v Speaker 2>It'll pop up that it was, like, requesting

00:20:45.100 --> 00:20:47.285
<v Speaker 2>me to share my screen. I'm not sure

00:20:47.285 --> 00:20:49.764
<v Speaker 2>that was right. Well, I changed it over.

00:20:49.765 --> 00:20:51.924
<v Speaker 1>So it it should just be me now,

00:20:51.924 --> 00:20:53.124
<v Speaker 1>and here we go.

00:20:53.525 --> 00:20:54.164
<v Speaker 1>Perfect.

00:20:55.045 --> 00:20:58.165
<v Speaker 1>Alright. So this is offset.com/spacedb.

00:20:58.820 --> 00:21:00.820
<v Speaker 1>From here, you can learn more about how

00:21:00.820 --> 00:21:01.940
<v Speaker 1>to work with things,

00:21:02.260 --> 00:21:04.580
<v Speaker 1>understand the lexicon, and then there's a guide

00:21:04.580 --> 00:21:06.500
<v Speaker 1>over here to learn the basics,

00:21:06.820 --> 00:21:08.500
<v Speaker 1>as well as a few other useful pieces

00:21:08.500 --> 00:21:11.060
<v Speaker 1>of documentation for anyone working through learning in

00:21:11.060 --> 00:21:11.620
<v Speaker 1>SpaceDB.

00:21:12.655 --> 00:21:14.335
<v Speaker 1>It is, of course, open source, so feel

00:21:14.335 --> 00:21:16.095
<v Speaker 1>free to check out the repository.

00:21:16.175 --> 00:21:18.815
<v Speaker 1>Something that I also found useful is examples

00:21:18.815 --> 00:21:19.695
<v Speaker 1>repository,

00:21:19.695 --> 00:21:22.735
<v Speaker 1>particularly the schemas directory. It's good for understanding

00:21:22.735 --> 00:21:24.575
<v Speaker 1>how to model certain use cases.

00:21:25.330 --> 00:21:28.530
<v Speaker 1>And we also have the SpaceDB or the

00:21:28.530 --> 00:21:29.330
<v Speaker 1>offset

00:21:29.410 --> 00:21:31.250
<v Speaker 1>playground, which allows you to

00:21:31.650 --> 00:21:34.930
<v Speaker 1>run tests against the models and definitions that

00:21:34.930 --> 00:21:35.809
<v Speaker 1>you put together.

00:21:36.370 --> 00:21:38.530
<v Speaker 1>So given all of this, I'm hoping that

00:21:38.530 --> 00:21:40.455
<v Speaker 1>we can come up with some interest in

00:21:40.455 --> 00:21:41.654
<v Speaker 1>use cases

00:21:42.695 --> 00:21:44.775
<v Speaker 1>just to show people how to build that

00:21:44.775 --> 00:21:47.174
<v Speaker 1>model. Because, again, I'm not coming into this

00:21:47.174 --> 00:21:47.975
<v Speaker 1>completely,

00:21:47.975 --> 00:21:49.735
<v Speaker 1>you know, often with Rawkode Live is, like,

00:21:49.735 --> 00:21:51.335
<v Speaker 1>I've never heard of the project before. I've

00:21:51.335 --> 00:21:52.615
<v Speaker 1>heard of it. I've never played about it.

00:21:52.615 --> 00:21:53.975
<v Speaker 1>And we're supposed to be a little bit

00:21:53.975 --> 00:21:54.615
<v Speaker 1>further along.

00:21:55.640 --> 00:21:57.159
<v Speaker 1>So, hopefully, we can just

00:21:57.640 --> 00:21:59.400
<v Speaker 1>take some of my challenges. And for me,

00:21:59.400 --> 00:22:01.720
<v Speaker 1>the challenge was building the schema, the model,

00:22:01.720 --> 00:22:04.039
<v Speaker 1>understanding how to put that together rather than

00:22:04.039 --> 00:22:05.720
<v Speaker 1>interacting with the code and speaking to the

00:22:05.720 --> 00:22:08.120
<v Speaker 1>database and and querying things. So I really

00:22:08.120 --> 00:22:10.315
<v Speaker 1>want us to spend, not labor it, but

00:22:10.315 --> 00:22:11.674
<v Speaker 1>spend a bigger amount of time because your

00:22:11.674 --> 00:22:13.755
<v Speaker 1>people understand how to put that together. That

00:22:13.755 --> 00:22:14.394
<v Speaker 1>makes sense?

00:22:15.914 --> 00:22:17.355
<v Speaker 2>Yeah. I think that makes sense and it's

00:22:17.355 --> 00:22:19.995
<v Speaker 2>definitely the place you probably wanna spend the

00:22:19.995 --> 00:22:21.595
<v Speaker 2>most time. Conceptually,

00:22:21.595 --> 00:22:23.835
<v Speaker 2>I'm pretty sure most people that are, like,

00:22:23.835 --> 00:22:26.100
<v Speaker 2>jumping into this are gonna understand,

00:22:26.420 --> 00:22:28.340
<v Speaker 2>oh, okay. This is how you deploy something

00:22:28.340 --> 00:22:29.940
<v Speaker 2>on Kubernetes that's

00:22:30.020 --> 00:22:32.340
<v Speaker 2>cloud native and package it as a container.

00:22:32.420 --> 00:22:33.460
<v Speaker 2>And that's pretty much

00:22:34.180 --> 00:22:36.260
<v Speaker 2>all it takes to run SpiceDB.

00:22:36.260 --> 00:22:37.700
<v Speaker 2>It's mostly just

00:22:37.940 --> 00:22:39.395
<v Speaker 2>like, what's the value for you and how

00:22:39.395 --> 00:22:41.715
<v Speaker 2>are you modeling your domain? That's probably where

00:22:41.715 --> 00:22:43.875
<v Speaker 2>people want to learn the most and understand

00:22:43.875 --> 00:22:46.595
<v Speaker 2>the most. So totally agree. I think that

00:22:46.595 --> 00:22:48.675
<v Speaker 1>it's where the cognitive shift is. Again, we've

00:22:48.675 --> 00:22:49.635
<v Speaker 1>all you know, everyone

00:22:50.490 --> 00:22:52.090
<v Speaker 1>can't keep putting words in people's eyes. I'm

00:22:52.090 --> 00:22:53.850
<v Speaker 1>gonna assume most people have worked with permissions

00:22:53.850 --> 00:22:55.370
<v Speaker 1>are now back to some degree.

00:22:55.690 --> 00:22:57.930
<v Speaker 1>And I hope that they come into it

00:22:57.930 --> 00:22:59.930
<v Speaker 1>with their own use cases so we can

00:22:59.930 --> 00:23:01.130
<v Speaker 1>show them how to go from a use

00:23:01.130 --> 00:23:02.650
<v Speaker 1>case to build in the model, then we

00:23:02.650 --> 00:23:04.250
<v Speaker 1>can get into playing playing with it in

00:23:04.250 --> 00:23:06.545
<v Speaker 1>other regards. Nobody on this channel needs to

00:23:06.545 --> 00:23:07.905
<v Speaker 1>know how to do a Helm Deploy. Like,

00:23:07.905 --> 00:23:09.745
<v Speaker 1>we're way past that now. So at least

00:23:09.745 --> 00:23:11.185
<v Speaker 1>I hope we're 2025,

00:23:11.185 --> 00:23:12.304
<v Speaker 1>so fingers crossed.

00:23:12.865 --> 00:23:13.424
<v Speaker 1>Alright.

00:23:13.745 --> 00:23:17.025
<v Speaker 1>Now in the documentation, you do cover modeling

00:23:17.025 --> 00:23:18.945
<v Speaker 1>and concepts and stuff like this, and there

00:23:18.945 --> 00:23:20.625
<v Speaker 1>are examples here that we could

00:23:21.400 --> 00:23:23.240
<v Speaker 1>kinda lean into and show. And I think

00:23:23.240 --> 00:23:25.080
<v Speaker 1>maybe we just pick one and start with

00:23:25.080 --> 00:23:28.120
<v Speaker 1>that. Possibly just the I think the the

00:23:28.120 --> 00:23:30.040
<v Speaker 1>blog one here. Does that have a yeah.

00:23:30.040 --> 00:23:32.120
<v Speaker 1>Schema here. So maybe we can kinda work

00:23:32.120 --> 00:23:33.800
<v Speaker 1>through this, but then we can tackle it

00:23:33.800 --> 00:23:35.400
<v Speaker 1>and talk about maybe something that's a bit

00:23:35.400 --> 00:23:37.775
<v Speaker 1>more cloud native. And then I'll throw this

00:23:37.775 --> 00:23:39.215
<v Speaker 1>to the audience. Right?

00:23:39.535 --> 00:23:41.215
<v Speaker 1>If you don't give me a suggestion in

00:23:41.215 --> 00:23:42.735
<v Speaker 1>the next five minutes of something that you

00:23:42.735 --> 00:23:44.894
<v Speaker 1>would like to see modeled with the schema,

00:23:45.135 --> 00:23:46.975
<v Speaker 1>just to put, you know, Jimmy on the

00:23:46.975 --> 00:23:49.055
<v Speaker 1>spot, then we'll go with one of my

00:23:49.055 --> 00:23:51.350
<v Speaker 1>own things that I actually need for the

00:23:51.350 --> 00:23:53.750
<v Speaker 1>Rawkode Academy platform, and I can provide more

00:23:53.750 --> 00:23:55.270
<v Speaker 1>context on that as we go.

00:23:56.070 --> 00:23:58.870
<v Speaker 1>Now when people are adopting and they want

00:23:58.870 --> 00:24:01.430
<v Speaker 1>to start bringing SpaceDB into their infrastructure or

00:24:01.430 --> 00:24:01.910
<v Speaker 1>offset,

00:24:04.385 --> 00:24:05.825
<v Speaker 1>I think you kind of said it a

00:24:05.825 --> 00:24:07.024
<v Speaker 1>minute ago. Right? But the first thing we

00:24:07.024 --> 00:24:09.105
<v Speaker 1>need to have is that knowledge of the

00:24:09.105 --> 00:24:12.385
<v Speaker 1>domain. What are we building the model and

00:24:12.385 --> 00:24:13.424
<v Speaker 1>the schema

00:24:13.424 --> 00:24:16.225
<v Speaker 1>for to get started? And in this documentation

00:24:16.225 --> 00:24:18.705
<v Speaker 1>example, we talk about protecting the blog. So

00:24:18.870 --> 00:24:21.270
<v Speaker 1>I'm assuming the context is you're building a

00:24:21.270 --> 00:24:23.669
<v Speaker 1>website, it has some sort of articles,

00:24:24.150 --> 00:24:27.030
<v Speaker 1>and you have two different roles. Someone who

00:24:27.030 --> 00:24:28.790
<v Speaker 1>could read an article, someone who can write

00:24:28.790 --> 00:24:30.390
<v Speaker 1>an article, and maybe even as a third

00:24:30.390 --> 00:24:32.710
<v Speaker 1>where someone can edit an article that has

00:24:32.710 --> 00:24:34.985
<v Speaker 1>already been written or published. And we could

00:24:34.985 --> 00:24:36.425
<v Speaker 1>take this even deeper if we want to,

00:24:36.425 --> 00:24:38.184
<v Speaker 1>but we'll keep it superficial for now.

00:24:38.745 --> 00:24:40.505
<v Speaker 1>When you have that domain knowledge,

00:24:40.585 --> 00:24:43.225
<v Speaker 1>as rating your schema step number one for

00:24:43.225 --> 00:24:44.345
<v Speaker 1>adopting SpaceDB.

00:24:47.860 --> 00:24:48.499
<v Speaker 2>Yes.

00:24:49.779 --> 00:24:51.299
<v Speaker 2>Sorry about that. Yeah.

00:24:52.500 --> 00:24:53.299
<v Speaker 1>Alright.

00:24:53.539 --> 00:24:55.539
<v Speaker 1>I mean, I love talking to myself, but

00:24:55.539 --> 00:24:57.539
<v Speaker 1>a conversation sometimes works a little bit better.

00:24:57.539 --> 00:24:58.019
<v Speaker 1>So

00:24:59.460 --> 00:25:01.355
<v Speaker 1>oh, we can just get a run through

00:25:01.355 --> 00:25:04.394
<v Speaker 1>this. The the language, is this something that

00:25:04.394 --> 00:25:05.995
<v Speaker 1>people have seen before? Did I mean, I'm

00:25:05.995 --> 00:25:08.794
<v Speaker 1>assuming you just based loosely on JSON with

00:25:08.794 --> 00:25:10.794
<v Speaker 1>some typing information. That was the idea was

00:25:10.794 --> 00:25:12.554
<v Speaker 1>to make it seem somewhat familiar to people.

00:25:13.080 --> 00:25:14.919
<v Speaker 1>But I'm curious if there's anything that I

00:25:15.159 --> 00:25:15.640
<v Speaker 1>I mean, I

00:25:16.600 --> 00:25:17.960
<v Speaker 1>it's just based on something else that I

00:25:17.960 --> 00:25:19.720
<v Speaker 1>have no knowledge of. I'm curious. Yeah. I

00:25:19.720 --> 00:25:21.159
<v Speaker 2>I can kinda tell you the history of

00:25:21.159 --> 00:25:22.759
<v Speaker 2>this. It's actually really funny.

00:25:23.080 --> 00:25:25.960
<v Speaker 2>So inside the Zanzibar paper, they kind of

00:25:26.120 --> 00:25:28.120
<v Speaker 2>have their own kind of syntax

00:25:28.155 --> 00:25:30.554
<v Speaker 2>where they're kind of modeling the different,

00:25:31.435 --> 00:25:35.035
<v Speaker 2>object types is that's the the SpiceDB terminology

00:25:35.035 --> 00:25:36.475
<v Speaker 2>for this. And

00:25:37.515 --> 00:25:39.435
<v Speaker 2>we built, like, a custom parser for it

00:25:39.435 --> 00:25:42.090
<v Speaker 2>at first, and we're it was really slow

00:25:42.090 --> 00:25:43.610
<v Speaker 2>and we're like, this is such a weird

00:25:43.610 --> 00:25:45.370
<v Speaker 2>format. Why did they do this? It took

00:25:45.370 --> 00:25:47.610
<v Speaker 2>us, I forget how many months before we

00:25:47.610 --> 00:25:50.250
<v Speaker 2>realized it was just the protobuf text format

00:25:50.490 --> 00:25:51.610
<v Speaker 2>and we're

00:25:51.610 --> 00:25:52.250
<v Speaker 2>face palmed

00:25:52.875 --> 00:25:53.595
<v Speaker 2>because

00:25:54.155 --> 00:25:56.075
<v Speaker 2>Joey, one of my cofounders, literally

00:25:56.715 --> 00:25:59.435
<v Speaker 2>worked on Stubby and protobuf at Google for

00:25:59.435 --> 00:26:01.275
<v Speaker 2>many years, so he's super

00:26:01.595 --> 00:26:03.515
<v Speaker 2>deeply familiar with this whole tool chain.

00:26:04.740 --> 00:26:05.779
<v Speaker 2>But, yeah,

00:26:06.100 --> 00:26:08.820
<v Speaker 2>we basically realized, like, at Google they have

00:26:08.820 --> 00:26:11.220
<v Speaker 2>lots of tooling around ProtoBuff and just everything

00:26:11.220 --> 00:26:12.260
<v Speaker 2>is ProtoBuff,

00:26:12.260 --> 00:26:13.220
<v Speaker 2>but, like,

00:26:13.540 --> 00:26:16.659
<v Speaker 2>that's not really super ergonomic outside of Google.

00:26:16.820 --> 00:26:17.220
<v Speaker 2>So

00:26:18.105 --> 00:26:20.184
<v Speaker 2>we kind of squinted at how they were

00:26:20.184 --> 00:26:22.825
<v Speaker 2>doing things and kind of envisioned something that

00:26:22.825 --> 00:26:24.825
<v Speaker 2>was at least more user friendly.

00:26:25.145 --> 00:26:25.705
<v Speaker 2>And

00:26:26.184 --> 00:26:29.065
<v Speaker 2>we've actually seen a lot of other projects

00:26:29.065 --> 00:26:30.505
<v Speaker 2>that are kind of loosely in the same

00:26:30.505 --> 00:26:31.785
<v Speaker 2>space as SpiceDB

00:26:31.890 --> 00:26:34.850
<v Speaker 2>then adopt a very, very similar syntax, which

00:26:34.850 --> 00:26:36.450
<v Speaker 2>means I feel like we kind of like

00:26:36.450 --> 00:26:37.890
<v Speaker 2>knocked it out of the park in terms

00:26:37.890 --> 00:26:40.770
<v Speaker 2>of making something like understandable

00:26:40.770 --> 00:26:42.049
<v Speaker 2>and reasonable.

00:26:42.210 --> 00:26:44.130
<v Speaker 2>But no, this is kind of a custom

00:26:44.130 --> 00:26:45.490
<v Speaker 2>domain specific language,

00:26:46.285 --> 00:26:48.125
<v Speaker 2>kind of loosely inspired, like,

00:26:48.605 --> 00:26:51.565
<v Speaker 2>kinda just like c style, like languages.

00:26:51.725 --> 00:26:53.645
<v Speaker 2>But the idea is you're kind of defining

00:26:53.645 --> 00:26:55.965
<v Speaker 2>the different types of objects that live in

00:26:55.965 --> 00:26:56.764
<v Speaker 2>your system

00:26:56.925 --> 00:27:00.445
<v Speaker 2>and then you define relations between those objects.

00:27:01.970 --> 00:27:03.970
<v Speaker 2>So in this case, can see we we're

00:27:03.970 --> 00:27:06.130
<v Speaker 2>defining like a user, but then you you

00:27:06.130 --> 00:27:07.730
<v Speaker 2>need the users to exist so that when

00:27:07.730 --> 00:27:09.810
<v Speaker 2>you start talking about posts, you can say,

00:27:09.890 --> 00:27:11.890
<v Speaker 2>okay. There are readers of a post which

00:27:11.890 --> 00:27:13.570
<v Speaker 2>are users and there are writers of a

00:27:13.570 --> 00:27:14.850
<v Speaker 2>post which are users.

00:27:15.170 --> 00:27:16.130
<v Speaker 2>But you could define

00:27:16.645 --> 00:27:17.924
<v Speaker 2>any type of

00:27:18.325 --> 00:27:20.245
<v Speaker 2>object that you need to represent in your

00:27:20.245 --> 00:27:22.965
<v Speaker 2>kind of applications or your domain and then

00:27:22.965 --> 00:27:25.284
<v Speaker 2>use those, to create relations.

00:27:25.445 --> 00:27:27.205
<v Speaker 2>And then we have this distinction between a

00:27:27.205 --> 00:27:29.205
<v Speaker 2>relation and a permission. You can think of

00:27:29.205 --> 00:27:32.005
<v Speaker 2>a permission as like the end API

00:27:31.669 --> 00:27:34.309
<v Speaker 2>that you want applications to call into when

00:27:34.309 --> 00:27:36.710
<v Speaker 2>they want to check a permission.

00:27:37.029 --> 00:27:37.429
<v Speaker 2>So,

00:27:37.909 --> 00:27:40.710
<v Speaker 2>here in this kind of blog example, we

00:27:40.710 --> 00:27:43.270
<v Speaker 2>say permission read and you can see we

00:27:43.270 --> 00:27:44.950
<v Speaker 2>actually have this additional syntax.

00:27:45.190 --> 00:27:48.335
<v Speaker 2>You're not just saying permission read equals reader,

00:27:49.375 --> 00:27:51.534
<v Speaker 2>but we're actually talking about,

00:27:51.934 --> 00:27:54.654
<v Speaker 2>using the set semantics here to

00:27:54.895 --> 00:27:57.774
<v Speaker 2>define all the possible ways you could have

00:27:57.774 --> 00:27:58.735
<v Speaker 2>read access.

00:28:00.259 --> 00:28:02.820
<v Speaker 2>And basically what we're we're doing by saying

00:28:02.820 --> 00:28:05.379
<v Speaker 2>reader plus writer here is saying that if

00:28:05.379 --> 00:28:07.379
<v Speaker 2>you're a writer, you also inherit

00:28:07.379 --> 00:28:08.419
<v Speaker 2>the read,

00:28:09.059 --> 00:28:09.699
<v Speaker 2>permission.

00:28:09.940 --> 00:28:12.179
<v Speaker 2>So there is no scenario where someone should

00:28:12.179 --> 00:28:12.979
<v Speaker 2>be given,

00:28:13.299 --> 00:28:16.235
<v Speaker 2>write access where they don't also get read

00:28:16.235 --> 00:28:16.955
<v Speaker 2>access.

00:28:17.275 --> 00:28:18.635
<v Speaker 2>And by doing it this way, it's it's

00:28:18.635 --> 00:28:19.915
<v Speaker 2>actually super powerful.

00:28:21.915 --> 00:28:23.995
<v Speaker 2>You could actually make this even more powerful

00:28:23.995 --> 00:28:24.955
<v Speaker 2>if you say,

00:28:25.675 --> 00:28:28.555
<v Speaker 2>permission read equals reader plus write

00:28:28.880 --> 00:28:31.760
<v Speaker 2>and you actually reference the other permission, the

00:28:31.760 --> 00:28:32.800
<v Speaker 2>write permission

00:28:32.960 --> 00:28:33.760
<v Speaker 2>because

00:28:33.920 --> 00:28:35.760
<v Speaker 2>the the main advantage to doing that is

00:28:35.760 --> 00:28:37.440
<v Speaker 2>actually then if you change,

00:28:38.080 --> 00:28:40.880
<v Speaker 2>the definition for who gets write access,

00:28:41.200 --> 00:28:44.080
<v Speaker 2>that all propagates down to the read

00:28:44.545 --> 00:28:45.985
<v Speaker 2>permission definition.

00:28:46.065 --> 00:28:47.265
<v Speaker 2>So if you change,

00:28:47.665 --> 00:28:49.665
<v Speaker 2>how people can get write access to this

00:28:49.665 --> 00:28:51.505
<v Speaker 2>document, say you have like an admin or

00:28:51.505 --> 00:28:52.544
<v Speaker 2>something like that,

00:28:52.945 --> 00:28:55.505
<v Speaker 2>and you just updated the write permission to

00:28:55.505 --> 00:28:58.460
<v Speaker 2>say like, write is writers plus admins,

00:28:58.539 --> 00:29:00.620
<v Speaker 2>that would flow then all the way down

00:29:00.620 --> 00:29:02.940
<v Speaker 2>to the read permission if you defined that

00:29:02.940 --> 00:29:04.539
<v Speaker 2>in terms of the write permission.

00:29:05.020 --> 00:29:06.460
<v Speaker 2>So you kind of get like this really

00:29:06.460 --> 00:29:10.135
<v Speaker 2>natural inheritance and like, dry, like don't repeat

00:29:10.135 --> 00:29:12.455
<v Speaker 2>yourself syntax when you kind of modeled things

00:29:12.455 --> 00:29:13.174
<v Speaker 2>this way.

00:29:13.495 --> 00:29:16.215
<v Speaker 2>But yeah, the original Zanzibar syntax was pretty

00:29:16.215 --> 00:29:17.095
<v Speaker 2>confusing

00:29:17.095 --> 00:29:19.175
<v Speaker 2>and we kind of like distilled it down

00:29:19.175 --> 00:29:21.414
<v Speaker 2>to just kind of like very simple,

00:29:22.215 --> 00:29:24.615
<v Speaker 2>definitions of permissions and relations.

00:29:24.855 --> 00:29:27.450
<v Speaker 2>So I think that's like a a pretty

00:29:27.450 --> 00:29:29.930
<v Speaker 2>good high level description here. But, yeah, it's

00:29:29.930 --> 00:29:31.210
<v Speaker 2>totally inspired

00:29:31.210 --> 00:29:33.210
<v Speaker 2>just to, like, look familiar, but there really

00:29:33.210 --> 00:29:34.730
<v Speaker 2>wasn't much we could lean on in the

00:29:34.730 --> 00:29:35.690
<v Speaker 2>space beyond,

00:29:36.250 --> 00:29:39.130
<v Speaker 2>kind of the core data that

00:29:39.674 --> 00:29:42.554
<v Speaker 2>basically Google was using for in their protobufs.

00:29:43.914 --> 00:29:45.114
<v Speaker 1>Alright. Awesome.

00:29:46.235 --> 00:29:47.434
<v Speaker 1>Okay. So

00:29:47.674 --> 00:29:49.674
<v Speaker 1>I wanna make sure that I mean, that

00:29:49.674 --> 00:29:50.794
<v Speaker 1>that history

00:29:50.794 --> 00:29:52.715
<v Speaker 1>was great. That actually reveals a lot more.

00:29:52.830 --> 00:29:54.510
<v Speaker 1>I love those kind of simple questions where

00:29:54.510 --> 00:29:55.950
<v Speaker 1>you get a lot more of it. Like,

00:29:55.950 --> 00:29:57.070
<v Speaker 1>that was fantastic.

00:29:57.309 --> 00:29:58.830
<v Speaker 1>But, you know, as far as, you know,

00:29:58.830 --> 00:30:01.549
<v Speaker 1>people watching this, we've got definition, which you

00:30:01.549 --> 00:30:03.870
<v Speaker 1>said defines an object type. Right? So these

00:30:03.870 --> 00:30:05.950
<v Speaker 1>are the things that exist to entities perhaps

00:30:05.950 --> 00:30:08.269
<v Speaker 1>in your application or your whatever it is

00:30:08.269 --> 00:30:08.669
<v Speaker 1>you're building.

00:30:09.525 --> 00:30:11.205
<v Speaker 1>We then have the permissions. These are the

00:30:11.365 --> 00:30:13.205
<v Speaker 1>I'm assuming the lowest level of thing. You

00:30:13.205 --> 00:30:15.525
<v Speaker 1>have some ability to do something on some

00:30:15.525 --> 00:30:16.245
<v Speaker 1>object.

00:30:16.725 --> 00:30:17.685
<v Speaker 1>Again,

00:30:17.685 --> 00:30:19.365
<v Speaker 1>here is read and write. And then we

00:30:19.365 --> 00:30:21.940
<v Speaker 1>have the relations. I'm assuming, you know, we've

00:30:21.940 --> 00:30:24.179
<v Speaker 1>got relation reader, relation writer, we could have

00:30:24.179 --> 00:30:26.100
<v Speaker 1>relation owner or like you could build this

00:30:26.100 --> 00:30:27.860
<v Speaker 1>out to map to the domain of whatever

00:30:27.860 --> 00:30:29.059
<v Speaker 1>is that you're trying

00:30:29.380 --> 00:30:30.179
<v Speaker 1>to model.

00:30:30.899 --> 00:30:33.154
<v Speaker 1>Are all those is there any other, you

00:30:33.154 --> 00:30:35.875
<v Speaker 1>know, terms, lexicon that we're going to approach

00:30:35.875 --> 00:30:37.875
<v Speaker 1>as we start to model with SpaceDB that

00:30:37.875 --> 00:30:39.554
<v Speaker 1>people may need to be familiar with?

00:30:40.195 --> 00:30:42.195
<v Speaker 2>There are more advanced ones, but I think

00:30:42.195 --> 00:30:44.755
<v Speaker 2>for, like, this core kind of example of

00:30:44.755 --> 00:30:46.195
<v Speaker 2>just, the blog posts,

00:30:46.434 --> 00:30:47.794
<v Speaker 2>I think this is really all you need.

00:30:49.700 --> 00:30:50.419
<v Speaker 1>Okay.

00:30:50.980 --> 00:30:52.419
<v Speaker 1>So let me scroll down here and we

00:30:52.419 --> 00:30:54.019
<v Speaker 1>have the ability to see how to work

00:30:54.019 --> 00:30:57.779
<v Speaker 1>with the node APIs and even the ZCLI.

00:30:57.779 --> 00:30:59.059
<v Speaker 1>Maybe you could give the audience a bit

00:30:59.059 --> 00:31:01.700
<v Speaker 1>of understanding and what is the ZCLI

00:31:01.700 --> 00:31:03.139
<v Speaker 1>and and how should they and when should

00:31:03.139 --> 00:31:03.620
<v Speaker 1>they use it?

00:31:04.875 --> 00:31:07.115
<v Speaker 2>Yeah. So it's kind of unfortunate because we

00:31:07.115 --> 00:31:09.035
<v Speaker 2>had this command line tool that we named

00:31:09.035 --> 00:31:11.435
<v Speaker 2>Zed and then, like, the Zed editor came

00:31:11.435 --> 00:31:13.755
<v Speaker 2>out, like, a year later or something,

00:31:14.075 --> 00:31:14.635
<v Speaker 2>which

00:31:15.115 --> 00:31:17.435
<v Speaker 2>is just, like, way more I guess, like,

00:31:17.670 --> 00:31:19.430
<v Speaker 2>it's not that it's more popular, it's just

00:31:19.430 --> 00:31:22.630
<v Speaker 2>it's more applicable to more developers. Every developer

00:31:22.630 --> 00:31:24.950
<v Speaker 2>has every text editor installed on their machine,

00:31:25.510 --> 00:31:27.910
<v Speaker 2>but it's unfortunate naming conflict, but Zed is

00:31:27.910 --> 00:31:30.790
<v Speaker 2>our command line interface to interact with SpiceDB

00:31:30.790 --> 00:31:31.190
<v Speaker 2>clusters.

00:31:32.404 --> 00:31:34.565
<v Speaker 2>So the cool thing here is Zed is

00:31:34.565 --> 00:31:36.804
<v Speaker 2>kind of like a wrapper around our API,

00:31:37.205 --> 00:31:38.964
<v Speaker 2>in a CLI tool.

00:31:39.205 --> 00:31:41.924
<v Speaker 2>There's a bit more functionality than that, but

00:31:41.924 --> 00:31:43.524
<v Speaker 2>it's really nice if you just wanna like

00:31:43.524 --> 00:31:46.380
<v Speaker 2>poke at a SpiceDB instance or a cluster,

00:31:46.380 --> 00:31:49.419
<v Speaker 2>pull down some data, read it, manipulate it.

00:31:50.299 --> 00:31:52.140
<v Speaker 2>You don't actually have to like sit down

00:31:52.140 --> 00:31:54.299
<v Speaker 2>and write code, instead you can just kind

00:31:54.299 --> 00:31:55.899
<v Speaker 2>of use and and,

00:31:56.460 --> 00:31:58.220
<v Speaker 2>even write bash scripts if you needed to

00:31:58.220 --> 00:31:59.500
<v Speaker 2>using the ZCLI

00:31:59.500 --> 00:32:01.395
<v Speaker 2>to to poke at it. So all these

00:32:01.395 --> 00:32:02.915
<v Speaker 2>examples were kind of showing you how you

00:32:02.915 --> 00:32:05.475
<v Speaker 2>would implement it inside of a programming language,

00:32:05.475 --> 00:32:07.875
<v Speaker 2>which was typically how you would integrate with

00:32:07.875 --> 00:32:10.435
<v Speaker 2>your kind of applications in your product suite.

00:32:10.915 --> 00:32:13.350
<v Speaker 2>You would actually maybe not for a schema,

00:32:13.350 --> 00:32:15.110
<v Speaker 2>some people manage the life cycle of their

00:32:15.110 --> 00:32:16.870
<v Speaker 2>schema in like a CICD,

00:32:17.110 --> 00:32:17.830
<v Speaker 2>flow,

00:32:18.070 --> 00:32:18.549
<v Speaker 2>but,

00:32:19.430 --> 00:32:22.710
<v Speaker 2>most other things like actually calling check permissions

00:32:22.710 --> 00:32:24.309
<v Speaker 2>and and things like that,

00:32:24.630 --> 00:32:27.745
<v Speaker 2>folks are going to be writing that from

00:32:27.745 --> 00:32:30.065
<v Speaker 2>from inside their applications.

00:32:30.465 --> 00:32:30.785
<v Speaker 2>So,

00:32:31.425 --> 00:32:33.025
<v Speaker 2>the difference with Zed is,

00:32:33.425 --> 00:32:35.025
<v Speaker 2>it's kind of more of a sysadmin or

00:32:35.025 --> 00:32:37.265
<v Speaker 2>like ops tool for you to poke at

00:32:37.265 --> 00:32:39.745
<v Speaker 2>the cluster and kind of ask it questions,

00:32:39.745 --> 00:32:42.650
<v Speaker 2>debug it. We even have like really compelling

00:32:43.370 --> 00:32:45.610
<v Speaker 2>features like an explain flag that helps you

00:32:45.610 --> 00:32:48.250
<v Speaker 2>debug why a request was particularly slow.

00:32:49.050 --> 00:32:51.290
<v Speaker 2>So all the instructions in this guide also

00:32:51.290 --> 00:32:52.730
<v Speaker 2>show you how to use it using zed

00:32:52.730 --> 00:32:54.170
<v Speaker 2>if you don't wanna sit down and write

00:32:54.170 --> 00:32:55.290
<v Speaker 2>code in a programming language.

00:32:57.545 --> 00:32:58.345
<v Speaker 1>Perfect.

00:32:58.345 --> 00:32:59.065
<v Speaker 1>Alright.

00:32:59.385 --> 00:33:00.025
<v Speaker 1>Now

00:33:00.345 --> 00:33:02.345
<v Speaker 1>this says here, you know, we're talking about

00:33:02.345 --> 00:33:03.465
<v Speaker 1>migrations

00:33:03.465 --> 00:33:05.865
<v Speaker 1>and we have a schema. Obviously, these evolve

00:33:05.865 --> 00:33:06.745
<v Speaker 1>over time.

00:33:07.065 --> 00:33:07.625
<v Speaker 1>So

00:33:07.960 --> 00:33:10.840
<v Speaker 1>assuming I am vape coding my way through

00:33:10.840 --> 00:33:12.840
<v Speaker 1>some sort of schema here and I change

00:33:12.840 --> 00:33:14.520
<v Speaker 1>user and I say, you know what? That's

00:33:14.520 --> 00:33:17.480
<v Speaker 1>a very vague term to define what, you

00:33:17.640 --> 00:33:19.960
<v Speaker 1>know, some actor within my system is. And,

00:33:19.960 --> 00:33:21.745
<v Speaker 1>actually, what I wanna call them, I use

00:33:21.745 --> 00:33:23.585
<v Speaker 1>my own experience, like the Rawkode Academy has

00:33:23.585 --> 00:33:26.065
<v Speaker 1>learners. So I'm like, okay. Let's just search

00:33:26.065 --> 00:33:28.544
<v Speaker 1>and replace user to learner. I had go.

00:33:28.865 --> 00:33:30.385
<v Speaker 1>What are the gotchas that people should be

00:33:30.385 --> 00:33:32.065
<v Speaker 1>aware of, and how do we handle schema

00:33:32.065 --> 00:33:32.864
<v Speaker 1>evolution

00:33:32.865 --> 00:33:34.065
<v Speaker 1>when working with SpaceDB?

00:33:35.600 --> 00:33:37.840
<v Speaker 2>Yeah. So first off,

00:33:38.880 --> 00:33:41.760
<v Speaker 2>SpiceDB itself is basically gonna be doing tons

00:33:41.760 --> 00:33:44.080
<v Speaker 2>of validation around the data that's already written

00:33:44.080 --> 00:33:46.400
<v Speaker 2>to a SpiceDB and the schema. So if

00:33:46.400 --> 00:33:48.480
<v Speaker 2>you make a change, like rename

00:33:48.480 --> 00:33:50.400
<v Speaker 2>user to learner,

00:33:51.335 --> 00:33:54.055
<v Speaker 2>but you already have data written inside SpiceDB

00:33:54.055 --> 00:33:57.255
<v Speaker 2>that created users, for example, or associated users

00:33:57.255 --> 00:33:58.135
<v Speaker 2>with posts,

00:33:59.335 --> 00:34:01.495
<v Speaker 2>and you go to try to apply that

00:34:01.495 --> 00:34:04.055
<v Speaker 2>schema, SpiceDB is actually gonna warn you. It's

00:34:04.055 --> 00:34:05.495
<v Speaker 2>gonna throw up an error and say like,

00:34:05.600 --> 00:34:07.440
<v Speaker 2>hey, you're trying to do this thing, but

00:34:07.440 --> 00:34:09.360
<v Speaker 2>that would potentially leave

00:34:09.520 --> 00:34:12.000
<v Speaker 2>data you've written to SpiceDB dangling.

00:34:12.719 --> 00:34:15.199
<v Speaker 2>The idea being like it wouldn't be associated

00:34:15.199 --> 00:34:17.520
<v Speaker 2>with any objects in your schema, so like

00:34:17.520 --> 00:34:19.199
<v Speaker 2>that data would still be written but not

00:34:19.199 --> 00:34:21.735
<v Speaker 2>be used, which could be surprising if you

00:34:21.735 --> 00:34:24.695
<v Speaker 2>ever in the future wrote another schema

00:34:24.775 --> 00:34:27.975
<v Speaker 2>that created a user type and you forgot

00:34:27.975 --> 00:34:29.735
<v Speaker 2>that you had written data about users. Now

00:34:29.735 --> 00:34:31.895
<v Speaker 2>all of a sudden those that that data

00:34:31.895 --> 00:34:34.455
<v Speaker 2>would come alive and start changing permissions in

00:34:34.455 --> 00:34:35.655
<v Speaker 2>a way you probably didn't expect.

00:34:36.910 --> 00:34:38.350
<v Speaker 2>So we do lots of validation to make

00:34:38.350 --> 00:34:40.350
<v Speaker 2>sure you're not necessarily doing

00:34:41.710 --> 00:34:43.949
<v Speaker 2>anything surprising or doing something that might bite

00:34:43.949 --> 00:34:44.910
<v Speaker 2>you in the future.

00:34:45.469 --> 00:34:47.390
<v Speaker 2>That being said, there

00:34:48.750 --> 00:34:49.870
<v Speaker 2>are a lot of tricks.

00:34:50.295 --> 00:34:52.135
<v Speaker 2>I wouldn't say tricks. There's a lot of

00:34:52.135 --> 00:34:54.934
<v Speaker 2>things that, you can do in SpiceDB

00:34:54.934 --> 00:34:56.534
<v Speaker 2>that you really wouldn't be able to do

00:34:56.534 --> 00:34:57.975
<v Speaker 2>in a lot of other systems,

00:34:58.214 --> 00:34:59.335
<v Speaker 2>like redefining

00:34:59.335 --> 00:35:01.494
<v Speaker 2>a permission to be backwards compatible.

00:35:03.090 --> 00:35:03.890
<v Speaker 2>And

00:35:04.130 --> 00:35:06.050
<v Speaker 2>doing that kind of lets you iterate on

00:35:06.050 --> 00:35:07.650
<v Speaker 2>these schemas over time

00:35:07.890 --> 00:35:08.450
<v Speaker 2>and,

00:35:08.690 --> 00:35:11.970
<v Speaker 2>not necessarily break existing applications as you add

00:35:11.970 --> 00:35:12.930
<v Speaker 2>new logic,

00:35:13.250 --> 00:35:15.250
<v Speaker 2>and then slowly gives you the opportunity to

00:35:15.250 --> 00:35:17.945
<v Speaker 2>kind of like deprecate the old one. Oftentimes,

00:35:19.145 --> 00:35:20.985
<v Speaker 2>when you want to actually make a change,

00:35:20.985 --> 00:35:22.825
<v Speaker 2>it's it's often just a one line change

00:35:22.825 --> 00:35:24.585
<v Speaker 2>in the schema and you actually don't have

00:35:24.585 --> 00:35:27.145
<v Speaker 2>to touch code anywhere because you've centralized that

00:35:27.145 --> 00:35:28.345
<v Speaker 2>data and,

00:35:29.145 --> 00:35:31.859
<v Speaker 2>and all that logic of how folks get

00:35:31.859 --> 00:35:33.940
<v Speaker 2>access to something into SpiceDB,

00:35:33.940 --> 00:35:35.700
<v Speaker 2>your end applications, they're just kind of making

00:35:35.700 --> 00:35:36.980
<v Speaker 2>these API calls.

00:35:37.299 --> 00:35:40.420
<v Speaker 2>And, the more the more granular actually your

00:35:40.420 --> 00:35:43.380
<v Speaker 2>applications are to making these API calls so

00:35:43.380 --> 00:35:45.625
<v Speaker 2>they can do things like, can this API

00:35:45.625 --> 00:35:47.385
<v Speaker 2>key access this post?

00:35:47.464 --> 00:35:48.585
<v Speaker 2>By doing that,

00:35:50.025 --> 00:35:51.305
<v Speaker 2>you you

00:35:52.105 --> 00:35:54.585
<v Speaker 2>have all the freedom in SpiceDB to completely

00:35:54.585 --> 00:35:57.785
<v Speaker 2>redefine how API keys get associated with users.

00:35:57.785 --> 00:36:00.070
<v Speaker 2>Maybe they go through a service account transitory

00:36:00.070 --> 00:36:01.990
<v Speaker 2>through that. Maybe you didn't have that service

00:36:01.990 --> 00:36:03.910
<v Speaker 2>account at the beginning, but now you do.

00:36:04.230 --> 00:36:07.349
<v Speaker 2>But because your end application only asked about

00:36:07.349 --> 00:36:09.110
<v Speaker 2>the API keys access,

00:36:09.750 --> 00:36:11.750
<v Speaker 2>you can add that layer of indirection and

00:36:11.750 --> 00:36:13.109
<v Speaker 2>not have to touch any code in your

00:36:13.109 --> 00:36:15.655
<v Speaker 2>application because you were just focused on the

00:36:15.655 --> 00:36:17.575
<v Speaker 2>exact primitives you had at hand. You had

00:36:17.575 --> 00:36:19.335
<v Speaker 2>the API key and you had like the

00:36:19.335 --> 00:36:20.935
<v Speaker 2>post they were trying to access.

00:36:22.055 --> 00:36:24.454
<v Speaker 2>And then the other important thing to add

00:36:24.454 --> 00:36:26.535
<v Speaker 2>here, great example with users,

00:36:28.320 --> 00:36:32.000
<v Speaker 2>Spice TV doesn't necessarily prescribe how users should

00:36:32.000 --> 00:36:32.640
<v Speaker 2>look.

00:36:33.760 --> 00:36:34.560
<v Speaker 2>Inside

00:36:34.720 --> 00:36:37.600
<v Speaker 2>of Google and in the Zanzibar paper,

00:36:37.840 --> 00:36:39.680
<v Speaker 2>Google works out this assumption that they all

00:36:39.680 --> 00:36:42.075
<v Speaker 2>have the same of core identity provider,

00:36:42.395 --> 00:36:44.555
<v Speaker 2>and at Google, that service is called Gaia.

00:36:44.635 --> 00:36:45.595
<v Speaker 2>And at Gaia,

00:36:45.915 --> 00:36:46.715
<v Speaker 2>every

00:36:46.715 --> 00:36:49.835
<v Speaker 2>user boils down to a super big unsigned

00:36:49.835 --> 00:36:51.755
<v Speaker 2>in 64 bit integer.

00:36:52.315 --> 00:36:54.715
<v Speaker 2>Spice DB doesn't make that same assumption

00:36:55.130 --> 00:36:57.530
<v Speaker 2>because that's not how the real world works,

00:36:57.690 --> 00:36:59.690
<v Speaker 2>and we actually let you model very complex

00:36:59.690 --> 00:37:00.330
<v Speaker 2>users,

00:37:00.490 --> 00:37:02.890
<v Speaker 2>using the same primitives you would model, anything

00:37:02.890 --> 00:37:04.250
<v Speaker 2>else in SpiceDB.

00:37:04.490 --> 00:37:06.170
<v Speaker 2>So you could have like a really robust

00:37:06.170 --> 00:37:10.730
<v Speaker 2>system where users have a different login providers

00:37:11.265 --> 00:37:14.464
<v Speaker 2>and different credentials and different services accounts and

00:37:14.464 --> 00:37:16.545
<v Speaker 2>API tokens, and you can model all of

00:37:16.545 --> 00:37:18.145
<v Speaker 2>these things kind of custom to your end

00:37:18.145 --> 00:37:20.145
<v Speaker 2>use case. And then as long as your

00:37:20.145 --> 00:37:22.785
<v Speaker 2>application is asking like that last that last

00:37:22.785 --> 00:37:25.830
<v Speaker 2>primitive, that very bottom primitive, you can refactor

00:37:25.830 --> 00:37:27.590
<v Speaker 2>all that stuff, change it all, adopt a

00:37:27.590 --> 00:37:31.270
<v Speaker 2>new, identity platform, swap identity platforms

00:37:31.430 --> 00:37:33.910
<v Speaker 2>and, your application code just doesn't need to

00:37:33.910 --> 00:37:36.150
<v Speaker 2>change. So that was a lot of information,

00:37:36.390 --> 00:37:37.350
<v Speaker 2>but, yeah.

00:37:37.895 --> 00:37:38.855
<v Speaker 2>Basically,

00:37:38.855 --> 00:37:40.535
<v Speaker 2>we're we're giving you as many guarantees as

00:37:40.535 --> 00:37:42.214
<v Speaker 2>we possibly can as you iterate on these

00:37:42.214 --> 00:37:43.895
<v Speaker 2>systems because that's that's a lot of the

00:37:43.895 --> 00:37:46.295
<v Speaker 2>value is making sure that you're confident,

00:37:46.535 --> 00:37:47.655
<v Speaker 2>in these changes.

00:37:47.815 --> 00:37:49.575
<v Speaker 2>And a lot of folks end up basically

00:37:49.575 --> 00:37:50.214
<v Speaker 2>using

00:37:50.799 --> 00:37:54.800
<v Speaker 2>CICD around making changes to their their schemas.

00:37:55.200 --> 00:37:57.440
<v Speaker 2>And you can actually write test cases and

00:37:57.440 --> 00:37:59.520
<v Speaker 2>assertions and negative assertions,

00:38:00.000 --> 00:38:02.400
<v Speaker 2>and even kind of exhaustively generate all the

00:38:02.400 --> 00:38:04.720
<v Speaker 2>paths through the graph that space does driving

00:38:04.720 --> 00:38:05.440
<v Speaker 2>SpiceDB

00:38:05.615 --> 00:38:08.335
<v Speaker 2>to kind of discover any anomalies in a

00:38:08.335 --> 00:38:11.135
<v Speaker 2>system you've modeled. And because it's centralized, you

00:38:11.135 --> 00:38:12.974
<v Speaker 2>know that, like, everything is represented in that

00:38:12.974 --> 00:38:14.974
<v Speaker 2>one place rather than you kinda play, like,

00:38:14.974 --> 00:38:16.255
<v Speaker 2>whack a mole and see, like, what is

00:38:16.255 --> 00:38:19.135
<v Speaker 2>the subtle interaction between, like, microservices

00:38:19.220 --> 00:38:21.859
<v Speaker 2>a's permissions and microservices b. It doesn't matter

00:38:21.859 --> 00:38:23.460
<v Speaker 2>because they're all in the one central,

00:38:23.700 --> 00:38:25.940
<v Speaker 2>kinda schema for SpiceDB when you when you

00:38:25.940 --> 00:38:27.380
<v Speaker 2>do it this way. So

00:38:28.180 --> 00:38:30.260
<v Speaker 2>lots of information. Sorry about that.

00:38:30.980 --> 00:38:33.145
<v Speaker 1>Information is good. I mean, that's what people

00:38:33.145 --> 00:38:35.225
<v Speaker 1>are tuning in to learn and to understand,

00:38:35.225 --> 00:38:37.945
<v Speaker 1>you know. These things especially when you're, you

00:38:37.945 --> 00:38:39.225
<v Speaker 1>know, if you're at a stage in your

00:38:39.225 --> 00:38:41.785
<v Speaker 1>application where you're looking at SpaceDB and Zanzibar

00:38:41.785 --> 00:38:43.385
<v Speaker 1>and all these other things. Right? It's like

00:38:44.265 --> 00:38:45.545
<v Speaker 1>I mean, I hope a lot of people

00:38:45.545 --> 00:38:47.385
<v Speaker 1>are doing domain driven design. They understand their

00:38:47.385 --> 00:38:49.640
<v Speaker 1>domains. They understand their body context. They understand

00:38:49.640 --> 00:38:51.640
<v Speaker 1>everything with not everything, but, you know, there's

00:38:51.640 --> 00:38:52.200
<v Speaker 1>a good

00:38:52.680 --> 00:38:55.400
<v Speaker 1>a good baseline understanding of what is their

00:38:55.400 --> 00:38:57.000
<v Speaker 1>modeling. Because I do think that is really

00:38:57.000 --> 00:38:59.400
<v Speaker 1>important and it's gonna help them prevent, hopefully,

00:38:59.400 --> 00:39:01.240
<v Speaker 1>a lot of naive assumptions and errors down

00:39:01.240 --> 00:39:02.760
<v Speaker 1>the line. So, you know,

00:39:03.815 --> 00:39:06.135
<v Speaker 1>people are hopefully in the right trajectory. I

00:39:06.215 --> 00:39:08.775
<v Speaker 1>mean, I don't see WordPress adopting SpaceDB anytime

00:39:08.775 --> 00:39:09.415
<v Speaker 1>soon,

00:39:09.655 --> 00:39:11.735
<v Speaker 1>but, you know, more mature applications and enterprise

00:39:11.735 --> 00:39:13.895
<v Speaker 1>applications, this stuff is super important.

00:39:14.535 --> 00:39:16.135
<v Speaker 1>So we're now in a position where, you

00:39:16.135 --> 00:39:18.770
<v Speaker 1>know, we've got definitions of object types. We're

00:39:18.770 --> 00:39:21.010
<v Speaker 1>building relations. We're doing permissions,

00:39:21.330 --> 00:39:23.010
<v Speaker 1>but we actually have all we have so

00:39:23.010 --> 00:39:25.010
<v Speaker 1>far is schema. Right? There's no actual data.

00:39:25.010 --> 00:39:27.490
<v Speaker 1>And this is where we get into the

00:39:27.490 --> 00:39:29.570
<v Speaker 1>the ZCLI or, again, you can use any

00:39:29.570 --> 00:39:31.505
<v Speaker 1>of code examples, but you have to define

00:39:31.505 --> 00:39:32.545
<v Speaker 1>the relationships.

00:39:32.545 --> 00:39:34.785
<v Speaker 1>This is the ability to grant permissions

00:39:35.905 --> 00:39:39.425
<v Speaker 1>to these types within your systems with other

00:39:39.425 --> 00:39:40.625
<v Speaker 1>objects. And

00:39:40.945 --> 00:39:43.585
<v Speaker 1>and here's a, you know, nice simple example.

00:39:43.585 --> 00:39:45.640
<v Speaker 1>We just create a relationship between some post

00:39:45.640 --> 00:39:48.600
<v Speaker 1>with ID one, writer to user Emilia. I

00:39:48.600 --> 00:39:49.080
<v Speaker 1>mean,

00:39:49.720 --> 00:39:51.480
<v Speaker 1>I'm not assuming people here are gonna be

00:39:51.480 --> 00:39:53.240
<v Speaker 1>set and using the ZCLI to do this.

00:39:53.240 --> 00:39:55.080
<v Speaker 1>I hope you're doing this in code.

00:39:55.400 --> 00:39:58.040
<v Speaker 1>But what is or what have you seen

00:39:58.040 --> 00:39:59.560
<v Speaker 1>with people that are doing this and adopting

00:39:59.560 --> 00:40:01.425
<v Speaker 1>this? You know, assuming they're not in a

00:40:01.425 --> 00:40:03.425
<v Speaker 1>a greenfield project, they've got some sort of

00:40:03.425 --> 00:40:04.225
<v Speaker 1>existing

00:40:05.505 --> 00:40:07.585
<v Speaker 1>system and they have to do some sort

00:40:07.585 --> 00:40:10.785
<v Speaker 1>of bulk migration of permissions and entities to

00:40:10.785 --> 00:40:13.025
<v Speaker 1>SpaceDB. Is that something where the ZCLI is

00:40:13.025 --> 00:40:14.305
<v Speaker 1>gonna help them? Is it something where you

00:40:14.305 --> 00:40:16.280
<v Speaker 1>just expect them to write a script? Is

00:40:16.280 --> 00:40:18.920
<v Speaker 1>there preexisting tools? Like, how do people with

00:40:18.920 --> 00:40:22.200
<v Speaker 1>existing data and infrastructure and applications migrate to

00:40:22.200 --> 00:40:23.400
<v Speaker 1>a SpaceDB world?

00:40:24.599 --> 00:40:26.599
<v Speaker 2>Yeah. That's a super good question. I mean,

00:40:26.599 --> 00:40:28.760
<v Speaker 2>it's the user journey for most of kind

00:40:28.760 --> 00:40:30.359
<v Speaker 2>of the adopters for SpaceDB.

00:40:31.295 --> 00:40:32.095
<v Speaker 2>I think

00:40:33.535 --> 00:40:35.375
<v Speaker 2>mostly we recommend, and this is kind of

00:40:35.375 --> 00:40:37.055
<v Speaker 2>true almost for all technologies,

00:40:37.135 --> 00:40:39.375
<v Speaker 2>you probably shouldn't just overhaul

00:40:40.015 --> 00:40:41.855
<v Speaker 2>an entire system and just

00:40:42.255 --> 00:40:44.255
<v Speaker 2>lift and shift, pick up everything, put it

00:40:44.255 --> 00:40:45.135
<v Speaker 2>in the new thing,

00:40:45.455 --> 00:40:47.109
<v Speaker 2>the old thing. What you really want to

00:40:47.109 --> 00:40:49.190
<v Speaker 2>do is kind of make yourself familiar

00:40:49.350 --> 00:40:51.750
<v Speaker 2>with the newer system and kind of be

00:40:51.750 --> 00:40:52.870
<v Speaker 2>able to onboard

00:40:53.350 --> 00:40:54.470
<v Speaker 2>that technology

00:40:54.470 --> 00:40:56.550
<v Speaker 2>as like your team gets familiar with the

00:40:56.550 --> 00:40:58.550
<v Speaker 2>technology and kind of like levels up their

00:40:58.550 --> 00:41:01.270
<v Speaker 2>skills for operationalizing it and just understanding how

00:41:01.270 --> 00:41:01.750
<v Speaker 2>to use it.

00:41:03.145 --> 00:41:05.705
<v Speaker 2>So what we normally recommend is actually

00:41:05.785 --> 00:41:08.424
<v Speaker 2>focusing on one particular use case if you're

00:41:08.424 --> 00:41:10.904
<v Speaker 2>not a greenfield application that knows you need

00:41:10.904 --> 00:41:11.465
<v Speaker 2>this.

00:41:11.944 --> 00:41:13.785
<v Speaker 2>And that use case is probably something you

00:41:13.785 --> 00:41:16.170
<v Speaker 2>would struggle with to implement yourself. So maybe

00:41:16.170 --> 00:41:19.130
<v Speaker 2>a customer recommend or requires

00:41:19.290 --> 00:41:21.770
<v Speaker 2>that you build recursive teams. So in your

00:41:21.770 --> 00:41:23.690
<v Speaker 2>system, you need teams that can embed other

00:41:23.690 --> 00:41:24.330
<v Speaker 2>teams

00:41:24.570 --> 00:41:26.970
<v Speaker 2>and you don't know how deeply nested that

00:41:26.970 --> 00:41:27.530
<v Speaker 2>needs to go,

00:41:28.355 --> 00:41:30.115
<v Speaker 2>but you also don't know how you'd implement

00:41:30.115 --> 00:41:32.035
<v Speaker 2>that yourself. Maybe your

00:41:32.194 --> 00:41:34.035
<v Speaker 2>your SaaS app that's written on top of

00:41:34.035 --> 00:41:37.315
<v Speaker 2>MySQL and MySQL, unlike Postgres, doesn't have recursive

00:41:37.315 --> 00:41:38.035
<v Speaker 2>joins.

00:41:38.275 --> 00:41:40.370
<v Speaker 2>So if you were storing something inside your

00:41:40.370 --> 00:41:41.090
<v Speaker 2>database,

00:41:41.330 --> 00:41:43.330
<v Speaker 2>the kind of natural inclination there would be

00:41:43.330 --> 00:41:45.250
<v Speaker 2>like, okay. I would use a recursive join

00:41:45.250 --> 00:41:46.690
<v Speaker 2>to just keep arbitrarily

00:41:46.690 --> 00:41:50.050
<v Speaker 2>digging out and, kind of chasing foreign keys

00:41:50.050 --> 00:41:50.930
<v Speaker 2>to the same table.

00:41:52.515 --> 00:41:54.674
<v Speaker 2>But like if you have a database system

00:41:54.674 --> 00:41:56.115
<v Speaker 2>that doesn't support that,

00:41:56.515 --> 00:41:57.395
<v Speaker 2>how

00:41:57.474 --> 00:41:59.234
<v Speaker 2>would you even implement that? You would pull

00:41:59.234 --> 00:42:00.755
<v Speaker 2>that out in a logic maybe. A lot

00:42:00.755 --> 00:42:01.875
<v Speaker 2>of people get stuck,

00:42:02.115 --> 00:42:04.115
<v Speaker 2>on certain features like this.

00:42:04.595 --> 00:42:06.980
<v Speaker 2>And then that, I think those features are

00:42:06.980 --> 00:42:08.580
<v Speaker 2>the ones that are like a really good

00:42:08.580 --> 00:42:12.100
<v Speaker 2>opportunity to introduce a new technology like SpiceDB.

00:42:12.900 --> 00:42:14.500
<v Speaker 2>So you would say, okay. I'm just gonna

00:42:14.500 --> 00:42:16.420
<v Speaker 2>start with this one feature. What's the minimal

00:42:16.420 --> 00:42:18.555
<v Speaker 2>set of data that I need to get

00:42:18.555 --> 00:42:20.315
<v Speaker 2>to drive this feature?

00:42:20.635 --> 00:42:23.035
<v Speaker 2>And the interesting thing about SpiceDB is at

00:42:23.035 --> 00:42:25.115
<v Speaker 2>its core, it kind of works as a

00:42:25.115 --> 00:42:26.155
<v Speaker 2>graph database.

00:42:27.515 --> 00:42:29.755
<v Speaker 2>And how kind of graph databases work is

00:42:29.755 --> 00:42:32.490
<v Speaker 2>there isn't like a create a user in

00:42:32.490 --> 00:42:34.250
<v Speaker 2>a graph database. That's not really how it

00:42:34.250 --> 00:42:34.890
<v Speaker 2>works.

00:42:35.290 --> 00:42:38.010
<v Speaker 2>In graph databases, you just build these kind

00:42:38.010 --> 00:42:40.010
<v Speaker 2>of relations between things.

00:42:40.330 --> 00:42:40.890
<v Speaker 2>So

00:42:41.850 --> 00:42:44.810
<v Speaker 2>for example, the commands we have here for

00:42:44.810 --> 00:42:46.115
<v Speaker 2>Zed says,

00:42:46.755 --> 00:42:47.954
<v Speaker 2>we're associating

00:42:47.954 --> 00:42:50.194
<v Speaker 2>a user Amelia as a writer for post

00:42:50.194 --> 00:42:53.075
<v Speaker 2>one. There's no thing that we said where

00:42:53.075 --> 00:42:54.835
<v Speaker 2>we created Amelia.

00:42:54.835 --> 00:42:56.994
<v Speaker 2>There's no, like, create user Amelia. That doesn't

00:42:56.994 --> 00:43:00.240
<v Speaker 2>exist. Just the mere existence of Amelia of

00:43:00.240 --> 00:43:02.640
<v Speaker 2>a link basically existing in the system between

00:43:02.640 --> 00:43:04.960
<v Speaker 2>a post and Amelia is what makes Amelia

00:43:04.960 --> 00:43:07.040
<v Speaker 2>kind of alive in the system.

00:43:07.680 --> 00:43:11.120
<v Speaker 2>If Amelia wasn't didn't have any relationships whatsoever,

00:43:11.120 --> 00:43:13.120
<v Speaker 2>if you asked if Amelia has access, the

00:43:13.120 --> 00:43:14.800
<v Speaker 2>answer would just be no because there's no

00:43:14.800 --> 00:43:17.174
<v Speaker 2>data at all related to Amelia in the

00:43:17.174 --> 00:43:17.734
<v Speaker 2>system.

00:43:18.535 --> 00:43:19.255
<v Speaker 2>So

00:43:19.414 --> 00:43:21.815
<v Speaker 2>that aspect alone makes it so you actually

00:43:21.815 --> 00:43:23.654
<v Speaker 2>don't have to load as much data as

00:43:23.654 --> 00:43:25.414
<v Speaker 2>you think in a splice DB. There's no

00:43:25.414 --> 00:43:26.694
<v Speaker 2>thing where you need to be like, all

00:43:26.694 --> 00:43:28.855
<v Speaker 2>right, let's sync all the users into here

00:43:29.070 --> 00:43:31.710
<v Speaker 2>unless you needed some kind of attribute between

00:43:31.710 --> 00:43:32.750
<v Speaker 2>the users,

00:43:32.990 --> 00:43:34.750
<v Speaker 2>and something else represented.

00:43:35.630 --> 00:43:37.710
<v Speaker 2>So that cuts down a lot. The Zed

00:43:37.710 --> 00:43:40.270
<v Speaker 2>tool does have so there are bulk import

00:43:40.270 --> 00:43:42.830
<v Speaker 2>and export APIs in SpiceDB.

00:43:43.115 --> 00:43:46.155
<v Speaker 2>Zed does actually expose all that and gives

00:43:46.155 --> 00:43:48.075
<v Speaker 2>you kind of flags for, like, batching and

00:43:48.075 --> 00:43:51.115
<v Speaker 2>things like that. If you, wanted to kind

00:43:51.115 --> 00:43:53.755
<v Speaker 2>of export something into SpiceDB

00:43:53.835 --> 00:43:55.115
<v Speaker 2>really efficiently,

00:43:55.674 --> 00:43:57.275
<v Speaker 2>it's basically a batch script away.

00:43:57.994 --> 00:44:00.680
<v Speaker 2>But then some folks also just

00:44:01.160 --> 00:44:03.559
<v Speaker 2>kind of lazy load this stuff. So you'd

00:44:03.559 --> 00:44:06.040
<v Speaker 2>integrate it into your application and then when

00:44:06.040 --> 00:44:08.040
<v Speaker 2>that data is first necessary,

00:44:08.119 --> 00:44:10.280
<v Speaker 2>your application actually like write some data into

00:44:10.280 --> 00:44:12.035
<v Speaker 2>SpiceDB and it would kind of be like

00:44:12.035 --> 00:44:14.355
<v Speaker 2>a piecemeal migration. There's a lot of different

00:44:14.355 --> 00:44:15.475
<v Speaker 2>ways you can actually

00:44:16.115 --> 00:44:17.795
<v Speaker 2>do all this stuff, but I think it

00:44:17.795 --> 00:44:20.275
<v Speaker 2>depends on kind of how you're adopting the

00:44:20.275 --> 00:44:21.075
<v Speaker 2>technology

00:44:21.075 --> 00:44:23.155
<v Speaker 2>and what feature you're trying to drive.

00:44:23.940 --> 00:44:25.700
<v Speaker 2>So I hope that answered the question.

00:44:26.260 --> 00:44:27.060
<v Speaker 1>Yeah.

00:44:27.060 --> 00:44:28.820
<v Speaker 1>I believe it did. Definitely.

00:44:30.020 --> 00:44:30.740
<v Speaker 1>Alright.

00:44:30.820 --> 00:44:33.380
<v Speaker 1>I like that. It's kind of decoupled. Right?

00:44:33.380 --> 00:44:35.700
<v Speaker 1>But I think it also pronounced perfect. The

00:44:35.700 --> 00:44:37.460
<v Speaker 1>data is decoupled from the actual system.

00:44:37.965 --> 00:44:39.885
<v Speaker 1>You know, we have written and said, Emilia

00:44:39.885 --> 00:44:42.125
<v Speaker 1>can write to post one.

00:44:42.845 --> 00:44:44.445
<v Speaker 1>What is the

00:44:44.525 --> 00:44:47.965
<v Speaker 1>process then if I've been very silly in

00:44:47.965 --> 00:44:49.485
<v Speaker 1>my architecture and

00:44:50.319 --> 00:44:53.040
<v Speaker 1>users handle is their idea using permissions and

00:44:53.040 --> 00:44:55.280
<v Speaker 1>not some sort of UUID or good,

00:44:55.599 --> 00:44:57.760
<v Speaker 1>and then they have the ability in the

00:44:57.760 --> 00:44:59.520
<v Speaker 1>system to rename themselves.

00:45:00.079 --> 00:45:01.839
<v Speaker 1>Is there the ability is then for me

00:45:01.839 --> 00:45:04.155
<v Speaker 1>to speak to SpiceDB and say, please treat

00:45:04.155 --> 00:45:06.315
<v Speaker 1>user Emilia now as user

00:45:07.035 --> 00:45:07.755
<v Speaker 1>x.

00:45:08.955 --> 00:45:10.555
<v Speaker 2>So there there is not.

00:45:11.035 --> 00:45:12.715
<v Speaker 2>I could actually see

00:45:13.035 --> 00:45:15.115
<v Speaker 2>a way to move forward with that would

00:45:15.115 --> 00:45:17.195
<v Speaker 2>be, like, adding yet another layer of indirection

00:45:17.195 --> 00:45:17.915
<v Speaker 2>above user

00:45:18.380 --> 00:45:20.140
<v Speaker 2>and then create like a

00:45:20.380 --> 00:45:22.700
<v Speaker 2>I don't know, like an actual core user

00:45:22.700 --> 00:45:24.700
<v Speaker 2>and then you treat user as an alias.

00:45:25.180 --> 00:45:26.220
<v Speaker 2>So you

00:45:26.380 --> 00:45:28.620
<v Speaker 2>could work your way out of that situation.

00:45:28.620 --> 00:45:30.300
<v Speaker 2>There isn't like a mass rename

00:45:31.885 --> 00:45:34.285
<v Speaker 2>built into SpiceDB or anything like that.

00:45:34.924 --> 00:45:37.404
<v Speaker 2>That being said, we do recommend you use

00:45:37.404 --> 00:45:38.205
<v Speaker 2>kind of

00:45:39.724 --> 00:45:43.164
<v Speaker 2>not always GUIDs but like usually unique identifiers

00:45:43.164 --> 00:45:43.404
<v Speaker 2>here.

00:45:44.000 --> 00:45:46.240
<v Speaker 2>We definitely tell all of our customers you

00:45:46.240 --> 00:45:49.280
<v Speaker 2>shouldn't be storing any like PII or anything

00:45:49.280 --> 00:45:51.599
<v Speaker 2>like super super coupled to any of this

00:45:51.599 --> 00:45:52.080
<v Speaker 2>stuff.

00:45:52.960 --> 00:45:55.200
<v Speaker 2>It does it does make actually like as

00:45:55.200 --> 00:45:57.200
<v Speaker 2>a human interacting with things like on the

00:45:57.200 --> 00:45:59.545
<v Speaker 2>command line a little bit more annoying when

00:45:59.545 --> 00:46:00.505
<v Speaker 2>it's just, like,

00:46:00.905 --> 00:46:02.185
<v Speaker 2>all GUIDs,

00:46:02.185 --> 00:46:03.785
<v Speaker 2>basically. You just see the type and then,

00:46:03.785 --> 00:46:05.385
<v Speaker 2>like, a really big number or something like

00:46:05.385 --> 00:46:05.865
<v Speaker 2>that.

00:46:06.825 --> 00:46:07.385
<v Speaker 2>But

00:46:07.625 --> 00:46:10.025
<v Speaker 2>that being said, like, it is the right

00:46:10.025 --> 00:46:11.705
<v Speaker 2>way you should be modeling these things is

00:46:11.705 --> 00:46:13.065
<v Speaker 2>using kind of these core,

00:46:14.450 --> 00:46:15.890
<v Speaker 2>I guess things you think of as a

00:46:15.890 --> 00:46:18.769
<v Speaker 2>primary key in a database, like identifiers for

00:46:18.769 --> 00:46:20.130
<v Speaker 2>your different objects

00:46:20.450 --> 00:46:22.529
<v Speaker 2>so that you do have the freedom to

00:46:22.529 --> 00:46:25.170
<v Speaker 2>kind of rename these things because at

00:46:25.410 --> 00:46:27.165
<v Speaker 2>like the core, you really don't want kind

00:46:27.165 --> 00:46:30.045
<v Speaker 2>of metadata stored in your authorization system. That's

00:46:30.045 --> 00:46:32.285
<v Speaker 2>like for the end applications.

00:46:32.445 --> 00:46:34.925
<v Speaker 2>So you really don't care about usernames

00:46:34.925 --> 00:46:37.325
<v Speaker 2>when you're talking about permissions. If they're coupled

00:46:37.325 --> 00:46:39.965
<v Speaker 2>to usernames, it's actually really scary because

00:46:40.130 --> 00:46:42.690
<v Speaker 2>you have to consider, like, those renaming semantics

00:46:42.690 --> 00:46:44.690
<v Speaker 2>you were just talking about where, like, what

00:46:44.690 --> 00:46:47.490
<v Speaker 2>happens if someone, changes their name to someone

00:46:47.490 --> 00:46:49.970
<v Speaker 2>who, like, maybe deleted their account, but, like,

00:46:49.970 --> 00:46:52.450
<v Speaker 2>you didn't delete all the relationships associated with

00:46:52.450 --> 00:46:55.025
<v Speaker 2>it? If you rename someone, do they inherit

00:46:55.025 --> 00:46:56.944
<v Speaker 2>a whole bunch of data that, like, you

00:46:56.944 --> 00:46:59.505
<v Speaker 2>didn't intend? Right? So there's all kinds of

00:46:59.505 --> 00:47:01.424
<v Speaker 2>really scary edge cases we're trying to, like,

00:47:01.424 --> 00:47:03.825
<v Speaker 2>push you towards avoiding by saying, like, hey.

00:47:03.825 --> 00:47:05.905
<v Speaker 2>You should probably probably just use IDs for

00:47:05.905 --> 00:47:06.704
<v Speaker 2>everything over here.

00:47:07.599 --> 00:47:10.400
<v Speaker 2>Little little worse on the DevX side,

00:47:10.400 --> 00:47:13.119
<v Speaker 2>but, like, the trade off long term for

00:47:13.119 --> 00:47:14.960
<v Speaker 2>kind of the correctness of your system and

00:47:14.960 --> 00:47:17.760
<v Speaker 2>chances of you making a mistake that's security

00:47:17.760 --> 00:47:19.359
<v Speaker 2>critical go way down.

00:47:20.945 --> 00:47:23.265
<v Speaker 1>Yeah. I mean, if we identify the modalities

00:47:23.265 --> 00:47:25.505
<v Speaker 1>of people that are working with SpiceDB,

00:47:25.505 --> 00:47:27.025
<v Speaker 1>they're probably not gonna be set and using

00:47:27.025 --> 00:47:29.585
<v Speaker 1>the ZCLI for their day in, day out.

00:47:29.585 --> 00:47:30.945
<v Speaker 1>Like, it may be used as some sort

00:47:30.945 --> 00:47:32.705
<v Speaker 1>of query tool, but that lack of developer

00:47:32.705 --> 00:47:34.890
<v Speaker 1>experience with the IDs, I think, is acceptable

00:47:34.890 --> 00:47:36.970
<v Speaker 1>for a more scalable and longer term system.

00:47:36.970 --> 00:47:39.050
<v Speaker 1>So I think yeah. You know, we should

00:47:39.050 --> 00:47:40.970
<v Speaker 1>not be using document titles as our primary

00:47:40.970 --> 00:47:43.930
<v Speaker 1>ID, etcetera. I think we're, again, we're we're

00:47:43.930 --> 00:47:45.690
<v Speaker 1>past that, but you never know.

00:47:46.890 --> 00:47:48.569
<v Speaker 1>Alright. I think we kinda covered,

00:47:49.115 --> 00:47:51.035
<v Speaker 1>you know, this schema and working with the

00:47:51.035 --> 00:47:53.194
<v Speaker 1>ZCLI and how relationships work. I think if

00:47:53.194 --> 00:47:54.795
<v Speaker 1>we head over to the playground now, maybe

00:47:54.795 --> 00:47:56.395
<v Speaker 1>we can pick one of these examples and

00:47:56.395 --> 00:47:57.435
<v Speaker 1>find something that's

00:47:57.755 --> 00:47:59.835
<v Speaker 1>a bit more interesting to dive into more

00:47:59.835 --> 00:48:01.994
<v Speaker 1>of the the schema semantics and how this

00:48:01.994 --> 00:48:04.040
<v Speaker 1>works. Do you have a a personal favorite

00:48:04.040 --> 00:48:05.720
<v Speaker 1>from the example schemas that you would like

00:48:05.720 --> 00:48:06.920
<v Speaker 1>to kinda talk about?

00:48:08.760 --> 00:48:11.320
<v Speaker 2>I mean, probably scrolling up.

00:48:12.600 --> 00:48:14.280
<v Speaker 2>I mean, we kind of already talked about

00:48:14.280 --> 00:48:16.520
<v Speaker 2>the simple role based access control one.

00:48:16.920 --> 00:48:19.145
<v Speaker 2>Maybe the caveat one is an interesting one

00:48:19.145 --> 00:48:20.425
<v Speaker 2>to really dive into

00:48:21.465 --> 00:48:22.505
<v Speaker 2>because this

00:48:22.665 --> 00:48:24.825
<v Speaker 2>is kind of like a functionality

00:48:24.825 --> 00:48:25.545
<v Speaker 2>that

00:48:25.785 --> 00:48:28.985
<v Speaker 2>maybe the beginner wouldn't know exists in Spice

00:48:28.985 --> 00:48:31.625
<v Speaker 2>TV but is actually super, super critical for

00:48:31.625 --> 00:48:32.825
<v Speaker 2>a lot of different use cases.

00:48:34.210 --> 00:48:35.250
<v Speaker 2>You'll notice

00:48:35.410 --> 00:48:37.010
<v Speaker 2>in the definition that

00:48:37.170 --> 00:48:39.090
<v Speaker 2>you just pulled up, there is kind of

00:48:39.090 --> 00:48:40.450
<v Speaker 2>this definition

00:48:40.450 --> 00:48:41.410
<v Speaker 2>document.

00:48:41.490 --> 00:48:44.130
<v Speaker 2>We kind of already have seen something similar

00:48:44.130 --> 00:48:46.610
<v Speaker 2>to that, but you'll notice after relation

00:48:46.610 --> 00:48:48.130
<v Speaker 2>reader, we have this pipe

00:48:48.605 --> 00:48:50.765
<v Speaker 2>there. And so that's kinda similar if you're

00:48:50.765 --> 00:48:52.205
<v Speaker 2>familiar with TypeScript.

00:48:52.765 --> 00:48:54.845
<v Speaker 2>We actually let you kind of union type.

00:48:54.845 --> 00:48:57.805
<v Speaker 2>So, you could say, like, readers are users

00:48:57.805 --> 00:48:58.365
<v Speaker 2>or,

00:48:59.325 --> 00:49:01.805
<v Speaker 2>I don't know, API keys. You you can

00:49:01.805 --> 00:49:03.645
<v Speaker 2>actually make it so multiple types can be

00:49:03.645 --> 00:49:05.800
<v Speaker 2>assigned to the reader relation.

00:49:06.680 --> 00:49:08.200
<v Speaker 2>But what we're actually doing here is we're

00:49:08.200 --> 00:49:09.800
<v Speaker 2>saying it can be a user or it

00:49:09.800 --> 00:49:13.079
<v Speaker 2>can be a user with this particular caveat

00:49:13.079 --> 00:49:14.840
<v Speaker 2>named only on Tuesday.

00:49:15.400 --> 00:49:19.160
<v Speaker 2>And caveats are kind of a concept that

00:49:19.245 --> 00:49:21.725
<v Speaker 2>the team created. It's not a thing that

00:49:21.725 --> 00:49:24.285
<v Speaker 2>exists inside the Zansbar paper, we did collaborate

00:49:24.285 --> 00:49:26.205
<v Speaker 2>with Netflix on its creation,

00:49:26.685 --> 00:49:28.205
<v Speaker 2>for one of their use cases.

00:49:28.765 --> 00:49:30.845
<v Speaker 2>But it basically lets you,

00:49:31.405 --> 00:49:35.190
<v Speaker 2>kind of do more dynamic relationships

00:49:35.350 --> 00:49:37.110
<v Speaker 2>inside of SpiceDB.

00:49:37.190 --> 00:49:39.190
<v Speaker 2>This unlocks all kinds of kind of,

00:49:40.150 --> 00:49:42.710
<v Speaker 2>basically ABAC style use cases,

00:49:43.190 --> 00:49:45.825
<v Speaker 2>attribute based access control, the idea that you

00:49:45.825 --> 00:49:48.785
<v Speaker 2>can have dynamic attributes coming in as well

00:49:48.785 --> 00:49:51.905
<v Speaker 2>as basically to augment the data that's already

00:49:51.905 --> 00:49:53.825
<v Speaker 2>living inside of SpiceDB.

00:49:54.305 --> 00:49:55.905
<v Speaker 2>And then you can kind of execute some

00:49:55.905 --> 00:49:56.705
<v Speaker 2>logic

00:49:56.705 --> 00:49:58.865
<v Speaker 2>on that context that you're providing

00:49:59.060 --> 00:50:01.220
<v Speaker 2>to say yes or no whether or not,

00:50:01.540 --> 00:50:03.220
<v Speaker 2>a particular relationship,

00:50:03.619 --> 00:50:05.620
<v Speaker 2>living inside of SpiceDB is valid.

00:50:05.940 --> 00:50:06.340
<v Speaker 2>So,

00:50:06.820 --> 00:50:08.500
<v Speaker 2>that that's a really abstract,

00:50:08.980 --> 00:50:10.580
<v Speaker 2>way to describe it, but let me make

00:50:10.580 --> 00:50:11.540
<v Speaker 2>it a little bit more concrete.

00:50:12.885 --> 00:50:14.725
<v Speaker 2>Here we have a caveat named only on

00:50:14.725 --> 00:50:16.725
<v Speaker 2>Tuesday and it's really, really simple. You pass

00:50:16.725 --> 00:50:18.165
<v Speaker 2>in a string, which is the day of

00:50:18.165 --> 00:50:20.085
<v Speaker 2>the week, and if the string you passed

00:50:20.085 --> 00:50:21.925
<v Speaker 2>in equals Tuesday,

00:50:22.085 --> 00:50:24.405
<v Speaker 2>then the caveat evaluates to yes.

00:50:24.980 --> 00:50:28.900
<v Speaker 2>So when you write a relationship to SpiceDB

00:50:28.900 --> 00:50:29.539
<v Speaker 2>about,

00:50:30.180 --> 00:50:30.900
<v Speaker 2>basically

00:50:30.980 --> 00:50:31.700
<v Speaker 2>users,

00:50:31.859 --> 00:50:33.380
<v Speaker 2>you would include,

00:50:34.099 --> 00:50:34.900
<v Speaker 2>for

00:50:34.900 --> 00:50:36.740
<v Speaker 2>users with a reader on this document. So

00:50:36.740 --> 00:50:38.660
<v Speaker 2>when you're actually saying, okay, this user is

00:50:38.660 --> 00:50:39.619
<v Speaker 2>a particular reader

00:50:40.745 --> 00:50:42.025
<v Speaker 2>on this document,

00:50:42.425 --> 00:50:44.185
<v Speaker 2>you can also provide

00:50:44.345 --> 00:50:45.305
<v Speaker 2>context

00:50:46.585 --> 00:50:49.625
<v Speaker 2>for this caveat or associate this caveat with

00:50:49.625 --> 00:50:50.665
<v Speaker 2>the relationship.

00:50:50.905 --> 00:50:53.460
<v Speaker 2>And what that's gonna say is, okay, this

00:50:53.460 --> 00:50:54.100
<v Speaker 2>user

00:50:54.260 --> 00:50:56.500
<v Speaker 2>is going to have reader for this document,

00:50:56.580 --> 00:50:58.820
<v Speaker 2>but only if this caveat is true.

00:50:59.300 --> 00:51:02.020
<v Speaker 2>So that is going to require requesters

00:51:02.020 --> 00:51:04.500
<v Speaker 2>to provide the day of the week when

00:51:04.500 --> 00:51:06.980
<v Speaker 2>they do a permissions check that requires this

00:51:06.980 --> 00:51:07.220
<v Speaker 2>data.

00:51:08.394 --> 00:51:10.395
<v Speaker 2>So that makes it really, really powerful,

00:51:10.795 --> 00:51:12.714
<v Speaker 2>because you can kind of add all kinds

00:51:12.714 --> 00:51:15.595
<v Speaker 2>of dynamic aspects. You might say like this

00:51:16.075 --> 00:51:17.674
<v Speaker 2>person is allowed to do this thing, but

00:51:17.674 --> 00:51:19.914
<v Speaker 2>only if the IP address they're using to

00:51:19.914 --> 00:51:22.520
<v Speaker 2>connect is from a particular subnet. So it's

00:51:22.520 --> 00:51:24.440
<v Speaker 2>like from our private network, which means they're

00:51:24.440 --> 00:51:25.400
<v Speaker 2>on the VPN.

00:51:25.480 --> 00:51:27.080
<v Speaker 2>Right? You can encode all of this logic

00:51:27.080 --> 00:51:29.880
<v Speaker 2>now inside of SpiceDB and enforce that to

00:51:29.880 --> 00:51:30.440
<v Speaker 2>make,

00:51:31.400 --> 00:51:33.560
<v Speaker 2>the relationship stored in it true or false

00:51:33.560 --> 00:51:36.675
<v Speaker 2>depending on, like, completely variable context. That maybe

00:51:36.675 --> 00:51:38.515
<v Speaker 2>it doesn't make sense to save that data

00:51:38.515 --> 00:51:41.315
<v Speaker 2>inside of SpiceDB because it's changing too fast.

00:51:41.475 --> 00:51:43.395
<v Speaker 2>Like saving the IP address of a particular

00:51:43.395 --> 00:51:45.395
<v Speaker 2>user probably isn't a great thing to store

00:51:45.395 --> 00:51:47.555
<v Speaker 2>inside of SpiceDB because it's constantly changing.

00:51:48.970 --> 00:51:50.810
<v Speaker 2>So you probably just wanna provide that as

00:51:50.810 --> 00:51:53.530
<v Speaker 2>context if it is critical to your decision

00:51:53.530 --> 00:51:55.210
<v Speaker 2>making for authorization.

00:51:56.170 --> 00:51:57.850
<v Speaker 2>The other thing to note here is,

00:51:58.170 --> 00:52:00.650
<v Speaker 2>the caveat language, the thing we're using to,

00:52:00.890 --> 00:52:03.290
<v Speaker 2>kind of write day of week equals equals

00:52:03.290 --> 00:52:03.770
<v Speaker 2>Tuesday.

00:52:04.175 --> 00:52:07.055
<v Speaker 2>This is using cell. If you're familiar with

00:52:07.055 --> 00:52:09.855
<v Speaker 2>Kubernetes, this is the the policy language built

00:52:09.855 --> 00:52:11.135
<v Speaker 2>into Kubernetes.

00:52:12.015 --> 00:52:14.335
<v Speaker 2>I think it's probably the best way forward

00:52:14.335 --> 00:52:16.494
<v Speaker 2>when it comes to kind of policy

00:52:17.280 --> 00:52:18.640
<v Speaker 2>purely because

00:52:19.440 --> 00:52:21.600
<v Speaker 2>it is not Turing complete and we can

00:52:21.600 --> 00:52:23.760
<v Speaker 2>kind of guarantee based on,

00:52:24.320 --> 00:52:27.440
<v Speaker 2>what's written by parsing the syntax tree actually

00:52:27.440 --> 00:52:29.440
<v Speaker 2>how fast it's going to execute and then

00:52:29.440 --> 00:52:30.560
<v Speaker 2>it has bounded execution.

00:52:31.065 --> 00:52:32.905
<v Speaker 2>So unlike a lot of other kind of

00:52:32.905 --> 00:52:34.185
<v Speaker 2>policy languages

00:52:34.425 --> 00:52:36.665
<v Speaker 2>where you can just keep stacking policies or

00:52:36.665 --> 00:52:38.825
<v Speaker 2>you like really don't know how long something

00:52:38.825 --> 00:52:40.905
<v Speaker 2>is going to execute, we can actually put

00:52:40.905 --> 00:52:44.230
<v Speaker 2>limits in SpiceDB that say these policies have

00:52:44.230 --> 00:52:47.670
<v Speaker 2>to execute within this amount of like milliseconds.

00:52:47.990 --> 00:52:49.830
<v Speaker 2>So we can still guarantee that you're gonna

00:52:49.830 --> 00:52:52.150
<v Speaker 2>hit SLAs that you have, in terms of

00:52:52.150 --> 00:52:54.550
<v Speaker 2>latency for getting these responses back.

00:52:54.790 --> 00:52:57.430
<v Speaker 2>It was just a really, really powerful primitive,

00:52:57.750 --> 00:52:59.590
<v Speaker 2>for defining these policies

00:53:00.605 --> 00:53:02.204
<v Speaker 2>in a way that they're not gonna inhibit

00:53:02.204 --> 00:53:04.685
<v Speaker 2>you because kind of the stance that,

00:53:05.405 --> 00:53:07.565
<v Speaker 2>we at AuthZED have is if you can

00:53:07.565 --> 00:53:09.964
<v Speaker 2>represent it as data, it's way better and

00:53:09.964 --> 00:53:12.204
<v Speaker 2>by data, I mean relationships living inside of

00:53:12.204 --> 00:53:12.845
<v Speaker 2>SpiceDB.

00:53:13.070 --> 00:53:15.710
<v Speaker 2>It's preferable to store things as much as

00:53:15.710 --> 00:53:17.790
<v Speaker 2>possible as data because that data can be

00:53:17.790 --> 00:53:19.390
<v Speaker 2>indexed and you can query it in a

00:53:19.390 --> 00:53:20.590
<v Speaker 2>bunch of different ways.

00:53:22.030 --> 00:53:24.110
<v Speaker 2>That is a more powerful experience than having

00:53:24.110 --> 00:53:26.030
<v Speaker 2>to execute code to say yes or no

00:53:26.030 --> 00:53:28.885
<v Speaker 2>for something because if you wanted to say,

00:53:28.885 --> 00:53:30.565
<v Speaker 2>give me the list of all the users

00:53:30.565 --> 00:53:32.725
<v Speaker 2>that have access to this particular thing,

00:53:33.444 --> 00:53:36.405
<v Speaker 2>that means you would have to go through

00:53:36.645 --> 00:53:39.365
<v Speaker 2>every single user and execute a policy on

00:53:39.365 --> 00:53:41.365
<v Speaker 2>each and every single one to filter that

00:53:41.365 --> 00:53:43.820
<v Speaker 2>list if it was purely just being done

00:53:43.820 --> 00:53:46.700
<v Speaker 2>with a policy language versus if it's represented

00:53:46.700 --> 00:53:49.100
<v Speaker 2>as data, you can actually just query that

00:53:49.100 --> 00:53:51.580
<v Speaker 2>data and it's probably indexed in something like

00:53:51.580 --> 00:53:54.060
<v Speaker 2>SpiceDB where you can then just traverse

00:53:54.375 --> 00:53:56.295
<v Speaker 2>that, kind of how that data is laid

00:53:56.295 --> 00:53:58.535
<v Speaker 2>out on disk to determine what those users

00:53:58.535 --> 00:54:00.455
<v Speaker 2>are and just return them very quickly.

00:54:00.695 --> 00:54:01.095
<v Speaker 2>So,

00:54:01.495 --> 00:54:03.335
<v Speaker 2>we think it's a more predictable and more

00:54:03.335 --> 00:54:06.535
<v Speaker 2>reliable way to have everything be data driven

00:54:06.620 --> 00:54:08.140
<v Speaker 2>and then you just sprinkle on a little

00:54:08.140 --> 00:54:09.500
<v Speaker 2>bit of policy where you need it and

00:54:09.500 --> 00:54:11.020
<v Speaker 2>make sure it's bounded.

00:54:11.420 --> 00:54:12.780
<v Speaker 2>So that's kind of like the idea behind

00:54:12.780 --> 00:54:13.740
<v Speaker 2>caveats.

00:54:13.900 --> 00:54:14.460
<v Speaker 2>And

00:54:15.420 --> 00:54:17.180
<v Speaker 2>yeah, if you kind of like jump through,

00:54:17.180 --> 00:54:19.180
<v Speaker 2>you can see test relationships on the different

00:54:19.180 --> 00:54:19.900
<v Speaker 2>tabs at the top.

00:54:20.875 --> 00:54:22.875
<v Speaker 2>We kind of have put in some relationships

00:54:22.875 --> 00:54:24.155
<v Speaker 2>and you can see on the right hand

00:54:24.155 --> 00:54:27.275
<v Speaker 2>side there's the space for the actual caveat

00:54:27.275 --> 00:54:27.995
<v Speaker 2>name

00:54:29.195 --> 00:54:29.915
<v Speaker 2>and

00:54:30.315 --> 00:54:32.235
<v Speaker 2>you can write assertions about this or expected

00:54:32.235 --> 00:54:33.035
<v Speaker 2>relations.

00:54:33.035 --> 00:54:35.140
<v Speaker 2>But yeah, This UI

00:54:35.220 --> 00:54:37.380
<v Speaker 2>also, I just wanna to mention,

00:54:37.860 --> 00:54:40.980
<v Speaker 2>this whole UI is running both SpiceDB and

00:54:40.980 --> 00:54:43.380
<v Speaker 2>Zed just compiled to WebAssembly.

00:54:43.380 --> 00:54:44.740
<v Speaker 2>And then we kind of have a custom

00:54:44.740 --> 00:54:46.100
<v Speaker 2>UI built in Monaco,

00:54:46.494 --> 00:54:48.974
<v Speaker 2>very similar to our Versus Code plugin. So

00:54:48.974 --> 00:54:50.895
<v Speaker 2>this is kind of just like very similar

00:54:50.895 --> 00:54:52.655
<v Speaker 2>to a Versus Code plugin, just like running

00:54:52.655 --> 00:54:54.655
<v Speaker 2>purely in your browser, but we just took

00:54:54.655 --> 00:54:56.494
<v Speaker 2>everything and compiled it to WebAssembly to get

00:54:56.494 --> 00:54:58.494
<v Speaker 2>that to work. So it's real splice d

00:54:58.494 --> 00:55:00.255
<v Speaker 2>b running in in your browser. It's real

00:55:00.255 --> 00:55:02.020
<v Speaker 2>zed running in your browser to to to

00:55:02.020 --> 00:55:03.780
<v Speaker 2>do all this and drive this experience.

00:55:05.060 --> 00:55:07.540
<v Speaker 1>Wow. Very, very cool. Yeah. I

00:55:07.860 --> 00:55:10.500
<v Speaker 1>love following the WebAssembly thing right now. Just

00:55:10.500 --> 00:55:12.020
<v Speaker 1>seems to getting more and more powerful. I've

00:55:12.020 --> 00:55:13.300
<v Speaker 1>even seen something a couple of weeks ago

00:55:13.300 --> 00:55:15.460
<v Speaker 1>where someone compiled Postgres to run inside of

00:55:15.460 --> 00:55:18.224
<v Speaker 1>the browser, and you're like, why? But also

00:55:18.224 --> 00:55:19.345
<v Speaker 1>very cool. So

00:55:20.865 --> 00:55:22.944
<v Speaker 2>Yeah. What what's really neat about this is

00:55:22.944 --> 00:55:24.625
<v Speaker 2>because it's all real when you kind of,

00:55:24.625 --> 00:55:27.105
<v Speaker 2>like, hit the download button or export it,

00:55:27.265 --> 00:55:29.025
<v Speaker 2>that's all kind of portable. So you can,

00:55:29.025 --> 00:55:30.730
<v Speaker 2>like, work on something and iterate on the

00:55:30.730 --> 00:55:32.730
<v Speaker 2>playground, share it with, like, your coworkers, and

00:55:32.730 --> 00:55:34.250
<v Speaker 2>then when you're all good, you just, like,

00:55:34.250 --> 00:55:35.609
<v Speaker 2>export it and then load it right into

00:55:35.609 --> 00:55:37.130
<v Speaker 2>SpiceDB and you're good to go.

00:55:38.809 --> 00:55:40.730
<v Speaker 1>Okay. So let me

00:55:41.225 --> 00:55:43.785
<v Speaker 1>try and pivot this caveat example to one

00:55:43.785 --> 00:55:44.985
<v Speaker 1>of the use cases that I've got for

00:55:44.985 --> 00:55:48.185
<v Speaker 1>the Rawkode Academy. So I'm about to deploy

00:55:48.185 --> 00:55:50.425
<v Speaker 1>the ability to react to videos as you

00:55:50.425 --> 00:55:51.545
<v Speaker 1>watch them on the website.

00:55:51.865 --> 00:55:54.750
<v Speaker 1>However, I don't want fake reactions and fake

00:55:54.750 --> 00:55:56.190
<v Speaker 1>comments on the video. I actually want to

00:55:56.190 --> 00:55:57.950
<v Speaker 1>make sure that people have watched a certain

00:55:57.950 --> 00:56:00.030
<v Speaker 1>percentage of a video in order to thumb

00:56:00.030 --> 00:56:01.950
<v Speaker 1>it up, thumb it down, love heart, or

00:56:01.950 --> 00:56:04.670
<v Speaker 1>even comment and tell me, you know, how

00:56:04.670 --> 00:56:06.670
<v Speaker 1>annoying my audio is this week, which is

00:56:06.670 --> 00:56:09.165
<v Speaker 1>a very common complaint. So would I use

00:56:09.165 --> 00:56:12.365
<v Speaker 1>a caveat then to say, you know, has

00:56:12.445 --> 00:56:13.245
<v Speaker 1>watched,

00:56:14.205 --> 00:56:16.445
<v Speaker 1>you know, 50% or something like that? I

00:56:16.445 --> 00:56:17.965
<v Speaker 1>guess that would be like a PT and

00:56:17.965 --> 00:56:19.885
<v Speaker 1>then it takes a percentage

00:56:20.045 --> 00:56:22.125
<v Speaker 1>and that would be an integer or an

00:56:22.205 --> 00:56:23.485
<v Speaker 1>I'm not sure what the

00:56:24.270 --> 00:56:26.430
<v Speaker 1>I'm not sure. N number?

00:56:28.030 --> 00:56:28.350
<v Speaker 1>N

00:56:28.990 --> 00:56:30.270
<v Speaker 1>think it should have been. I think I

00:56:30.270 --> 00:56:32.910
<v Speaker 2>think you're good. Order is is the opposite.

00:56:32.990 --> 00:56:34.990
<v Speaker 2>I'm pretty sure. I'm I think it's, like,

00:56:34.990 --> 00:56:35.550
<v Speaker 1>the n percentage.

00:56:37.015 --> 00:56:39.015
<v Speaker 1>And because this is just salary, I can

00:56:39.015 --> 00:56:41.335
<v Speaker 1>say, alright, if it's greater than a 50.

00:56:41.735 --> 00:56:44.215
<v Speaker 1>So Yeah. If if I have this caveat,

00:56:44.935 --> 00:56:46.535
<v Speaker 1>I wanna make sure I understand this bit

00:56:46.535 --> 00:56:48.135
<v Speaker 1>because this bit is actually new to me.

00:56:48.135 --> 00:56:50.375
<v Speaker 1>I don't fully understand this. Right? So we've

00:56:50.375 --> 00:56:50.695
<v Speaker 1>got a

00:56:51.560 --> 00:56:53.400
<v Speaker 1>let's call it a video.

00:56:53.880 --> 00:56:55.400
<v Speaker 1>We've got people that are allowed to watch

00:56:55.400 --> 00:56:56.120
<v Speaker 1>a video.

00:56:57.320 --> 00:56:58.920
<v Speaker 1>I guess it's a watcher.

00:57:00.680 --> 00:57:02.520
<v Speaker 1>And and then messing up all your tests

00:57:02.520 --> 00:57:04.655
<v Speaker 1>as well. Right? But you have the ability

00:57:04.655 --> 00:57:06.494
<v Speaker 1>to watch a video if you're a watcher.

00:57:06.494 --> 00:57:07.935
<v Speaker 1>And what we're saying is that

00:57:08.415 --> 00:57:11.375
<v Speaker 1>all users can watch or users bug a

00:57:11.375 --> 00:57:13.135
<v Speaker 1>caveat. So the caveat is a piece of

00:57:13.135 --> 00:57:14.575
<v Speaker 1>data on the user,

00:57:15.295 --> 00:57:17.135
<v Speaker 1>an attribute, if you will. Right?

00:57:19.250 --> 00:57:21.490
<v Speaker 1>So is that Yeah. The the way to

00:57:21.490 --> 00:57:23.490
<v Speaker 2>think about this is, like, this is you're

00:57:23.490 --> 00:57:26.530
<v Speaker 2>expressing types right now. So you're saying that

00:57:26.770 --> 00:57:29.650
<v Speaker 2>you can assign either users with no caveat.

00:57:29.650 --> 00:57:31.089
<v Speaker 2>That's what the first thing to the left

00:57:31.089 --> 00:57:33.195
<v Speaker 2>of the bar is. That's just saying, you

00:57:33.195 --> 00:57:34.635
<v Speaker 2>could just assign a regular user to this

00:57:34.635 --> 00:57:36.795
<v Speaker 2>and they don't require the caveat. And if

00:57:36.795 --> 00:57:38.955
<v Speaker 2>you if you write that relationship,

00:57:39.115 --> 00:57:41.195
<v Speaker 2>that means that user doesn't care whether they're

00:57:41.195 --> 00:57:42.475
<v Speaker 2>at 50%

00:57:42.475 --> 00:57:45.035
<v Speaker 2>or not. They won't require that context when

00:57:45.035 --> 00:57:47.275
<v Speaker 2>you ask, like, are they a watcher or

00:57:47.275 --> 00:57:47.435
<v Speaker 2>not.

00:57:49.190 --> 00:57:51.829
<v Speaker 2>So that's one option. You could delete that

00:57:51.829 --> 00:57:54.549
<v Speaker 2>left everything left of the bar, like including

00:57:54.549 --> 00:57:55.270
<v Speaker 2>the bar,

00:57:56.230 --> 00:57:58.789
<v Speaker 2>and then that would just say, okay, every

00:57:58.789 --> 00:58:01.109
<v Speaker 2>single watcher, every single user you're going to

00:58:01.109 --> 00:58:03.855
<v Speaker 2>write here has to have this caveat associated

00:58:03.855 --> 00:58:05.055
<v Speaker 2>with it. Right?

00:58:05.695 --> 00:58:08.495
<v Speaker 2>Which means whenever you write any of them,

00:58:08.735 --> 00:58:10.095
<v Speaker 2>like, then,

00:58:10.975 --> 00:58:14.175
<v Speaker 2>you have to at runtime provide

00:58:14.335 --> 00:58:15.375
<v Speaker 2>the percentage

00:58:16.200 --> 00:58:17.480
<v Speaker 2>whether the

00:58:17.640 --> 00:58:19.640
<v Speaker 2>percentage is gonna be greater than 50 or

00:58:19.640 --> 00:58:20.760
<v Speaker 2>not. So,

00:58:21.560 --> 00:58:23.960
<v Speaker 2>if you write a relationship that is a

00:58:23.960 --> 00:58:24.599
<v Speaker 2>user,

00:58:24.920 --> 00:58:26.920
<v Speaker 2>with this caveat and then

00:58:27.160 --> 00:58:29.400
<v Speaker 2>when you pass in at runtime, say they're

00:58:29.480 --> 00:58:31.745
<v Speaker 2>they hit zero or, well, first of all,

00:58:31.745 --> 00:58:34.305
<v Speaker 2>let's say if you don't provide anything whatsoever,

00:58:34.305 --> 00:58:36.145
<v Speaker 2>zero context, it's gonna actually throw an error

00:58:36.145 --> 00:58:37.425
<v Speaker 2>and say, like, you need to provide me

00:58:37.425 --> 00:58:39.185
<v Speaker 2>a context if you want this to work.

00:58:39.985 --> 00:58:42.305
<v Speaker 2>And then you'll it will even tell you

00:58:42.305 --> 00:58:43.985
<v Speaker 2>specifically what you need to provide. It'll tell

00:58:43.985 --> 00:58:45.425
<v Speaker 2>you you're missing the percentage here.

00:58:46.750 --> 00:58:47.550
<v Speaker 2>And then

00:58:48.190 --> 00:58:49.950
<v Speaker 2>you would update your request and say, like,

00:58:49.950 --> 00:58:51.869
<v Speaker 2>okay. Here's my percentage. Basically, you're not even

00:58:51.869 --> 00:58:53.309
<v Speaker 2>gonna be able to run the permissions check

00:58:53.309 --> 00:58:56.349
<v Speaker 2>until you actually provide the context, which is

00:58:56.509 --> 00:58:58.270
<v Speaker 2>the the percentage.

00:58:58.670 --> 00:58:59.150
<v Speaker 2>Otherwise,

00:59:00.535 --> 00:59:02.935
<v Speaker 2>like, you just don't have enough information

00:59:03.895 --> 00:59:06.615
<v Speaker 2>to actually solve this this request

00:59:06.615 --> 00:59:08.775
<v Speaker 2>because what it's gonna do is it's gonna

00:59:08.775 --> 00:59:12.055
<v Speaker 2>basically find gather up all the users and

00:59:12.055 --> 00:59:14.570
<v Speaker 2>then what it has to do to evaluate

00:59:14.570 --> 00:59:16.410
<v Speaker 2>the users to say whether or not those

00:59:16.410 --> 00:59:19.130
<v Speaker 2>relationships are even worth considering is

00:59:19.610 --> 00:59:22.330
<v Speaker 2>plug in your context value, like your percentage,

00:59:22.730 --> 00:59:24.410
<v Speaker 2>and then it's gonna execute the caveat for

00:59:24.410 --> 00:59:26.195
<v Speaker 2>all of them and then it's going to

00:59:26.195 --> 00:59:28.035
<v Speaker 2>filter them based off of that result.

00:59:28.275 --> 00:59:30.675
<v Speaker 2>So, the other interesting thing just to note

00:59:30.675 --> 00:59:31.875
<v Speaker 2>with caveats is,

00:59:32.755 --> 00:59:34.035
<v Speaker 2>say you had multiple

00:59:34.195 --> 00:59:36.355
<v Speaker 2>parameters going into this caveat,

00:59:36.515 --> 00:59:37.395
<v Speaker 2>you can actually

00:59:38.300 --> 00:59:41.180
<v Speaker 2>partially evaluate them, so partially apply,

00:59:42.619 --> 00:59:44.619
<v Speaker 2>at different points in time. So you could

00:59:44.619 --> 00:59:45.500
<v Speaker 2>actually say,

00:59:45.820 --> 00:59:47.500
<v Speaker 2>when you go to write a user, you

00:59:47.500 --> 00:59:49.660
<v Speaker 2>could actually pre apply a percentage

00:59:49.740 --> 00:59:51.900
<v Speaker 2>and say, like, this is the permanent percentage

00:59:51.900 --> 00:59:54.085
<v Speaker 2>that's written to this user. I know they

00:59:54.085 --> 00:59:54.965
<v Speaker 2>hit 50,

00:59:55.205 --> 00:59:56.565
<v Speaker 2>so they're good forever.

00:59:56.725 --> 00:59:59.125
<v Speaker 2>And for future requests to them, I don't

00:59:59.125 --> 01:00:01.045
<v Speaker 2>need to provide the context, so I'm just

01:00:01.045 --> 01:00:01.845
<v Speaker 2>gonna write

01:00:02.005 --> 01:00:04.165
<v Speaker 2>when I say this user is a watcher,

01:00:04.165 --> 01:00:05.845
<v Speaker 2>I'm also gonna write and say, like, and

01:00:05.845 --> 01:00:09.685
<v Speaker 2>the context includes that they already hit 50%

01:00:08.550 --> 01:00:10.230
<v Speaker 2>on the on the video.

01:00:10.630 --> 01:00:11.110
<v Speaker 2>So,

01:00:11.910 --> 01:00:15.350
<v Speaker 2>you actually have this this kind of duality

01:00:15.350 --> 01:00:17.590
<v Speaker 2>of like when you care to provide the

01:00:17.590 --> 01:00:18.310
<v Speaker 2>context,

01:00:18.390 --> 01:00:19.910
<v Speaker 2>some of it can be at the time

01:00:19.910 --> 01:00:21.510
<v Speaker 2>at which you write the relationship and some

01:00:21.510 --> 01:00:22.550
<v Speaker 2>of it can be at the time you

01:00:22.550 --> 01:00:24.464
<v Speaker 2>actually make the query to say, like, I'm

01:00:24.464 --> 01:00:25.665
<v Speaker 2>checking this permission.

01:00:26.785 --> 01:00:29.345
<v Speaker 2>It's really powerful when you start kind of

01:00:29.345 --> 01:00:31.184
<v Speaker 2>pre reapplying some,

01:00:31.424 --> 01:00:33.345
<v Speaker 2>parameters to the caveats,

01:00:33.585 --> 01:00:35.505
<v Speaker 2>but that's probably more advanced of the use

01:00:35.505 --> 01:00:35.664
<v Speaker 2>case.

01:00:37.150 --> 01:00:39.150
<v Speaker 1>Alright. So what I'm taking away from this

01:00:39.150 --> 01:00:40.670
<v Speaker 1>is that this is a horrible way for

01:00:40.670 --> 01:00:42.590
<v Speaker 1>me to build my 50% thing. I should

01:00:42.590 --> 01:00:43.870
<v Speaker 1>not do it this way because it would

01:00:43.870 --> 01:00:46.670
<v Speaker 1>require for every single user that I create

01:00:46.670 --> 01:00:47.470
<v Speaker 1>to have

01:00:47.790 --> 01:00:48.590
<v Speaker 1>a caveat,

01:00:48.984 --> 01:00:50.744
<v Speaker 1>which I then provide a value at runtime,

01:00:50.744 --> 01:00:52.025
<v Speaker 1>which doesn't make a lot of sense. So

01:00:52.025 --> 01:00:54.025
<v Speaker 1>realistically, if I were modeling this,

01:00:54.265 --> 01:00:55.545
<v Speaker 1>I would probably just want to make sure

01:00:55.545 --> 01:00:56.984
<v Speaker 1>a user has watched a certain amount of

01:00:56.984 --> 01:00:59.065
<v Speaker 1>content and then consider them trusted and give

01:00:59.065 --> 01:01:00.345
<v Speaker 1>them a new role, and then they have

01:01:00.345 --> 01:01:01.865
<v Speaker 1>the ability to comment and thumbs up or

01:01:01.865 --> 01:01:04.390
<v Speaker 1>something like that. Yeah. That's a good way

01:01:04.390 --> 01:01:06.070
<v Speaker 2>to do it. But if you really wanna

01:01:06.070 --> 01:01:08.310
<v Speaker 2>do, this is actually totally fine. There are

01:01:08.310 --> 01:01:10.790
<v Speaker 2>trade offs associated with it. It totally works.

01:01:10.950 --> 01:01:13.270
<v Speaker 2>But, yeah, I would definitely lean towards

01:01:13.670 --> 01:01:15.510
<v Speaker 2>some other kind of flag you can set

01:01:15.510 --> 01:01:17.270
<v Speaker 2>on the account to say, like, alright. Yeah.

01:01:17.270 --> 01:01:18.310
<v Speaker 2>This this one's legit.

01:01:19.335 --> 01:01:20.775
<v Speaker 1>Yeah. So I don't mean to drag you

01:01:20.775 --> 01:01:22.295
<v Speaker 1>onto a livestream just to get my support

01:01:22.295 --> 01:01:24.135
<v Speaker 1>calls answered. But, you know, let's tackle one

01:01:24.135 --> 01:01:26.055
<v Speaker 1>more use case. Right? Let's imagine

01:01:26.535 --> 01:01:29.095
<v Speaker 1>I publish a course and everyone gets general

01:01:29.095 --> 01:01:31.335
<v Speaker 1>availability access on a certain date. However, I

01:01:31.335 --> 01:01:33.575
<v Speaker 1>want to give trusted community members access two

01:01:33.575 --> 01:01:35.910
<v Speaker 1>weeks before. Is that something you would model

01:01:35.910 --> 01:01:37.270
<v Speaker 1>as data using

01:01:37.990 --> 01:01:39.030
<v Speaker 1>SpiceDB?

01:01:39.670 --> 01:01:42.550
<v Speaker 2>Yeah, absolutely. There's another feature and it gets

01:01:42.550 --> 01:01:43.590
<v Speaker 2>used similar

01:01:43.590 --> 01:01:44.310
<v Speaker 2>to

01:01:44.869 --> 01:01:46.790
<v Speaker 2>where you're using the caveat. If used as

01:01:46.790 --> 01:01:47.750
<v Speaker 2>part of the types

01:01:48.645 --> 01:01:50.805
<v Speaker 2>that you define on a relation, you can

01:01:50.805 --> 01:01:53.205
<v Speaker 2>actually use this feature we call the wildcard,

01:01:53.205 --> 01:01:55.125
<v Speaker 2>which is effectively the idea of public or

01:01:55.125 --> 01:01:56.405
<v Speaker 2>not. It says,

01:01:56.725 --> 01:01:58.005
<v Speaker 2>when the wildcard

01:01:58.085 --> 01:02:00.245
<v Speaker 2>is written to this value, so the wildcard

01:02:00.245 --> 01:02:02.485
<v Speaker 2>is actually, it's both a type and it's

01:02:02.485 --> 01:02:05.080
<v Speaker 2>a relationship that you can write. So,

01:02:05.560 --> 01:02:07.000
<v Speaker 2>the idea is,

01:02:07.720 --> 01:02:11.160
<v Speaker 2>you can say relation watcher user or

01:02:11.480 --> 01:02:12.760
<v Speaker 2>wildcard user.

01:02:14.280 --> 01:02:14.599
<v Speaker 2>And

01:02:16.164 --> 01:02:18.005
<v Speaker 2>the reason why you do that is you're

01:02:18.005 --> 01:02:20.484
<v Speaker 2>saying like, do I want this relation

01:02:20.484 --> 01:02:23.125
<v Speaker 2>to be allowed to use the wildcard?

01:02:23.365 --> 01:02:23.925
<v Speaker 2>So

01:02:24.325 --> 01:02:26.565
<v Speaker 2>fundamentally we let you kind of use the

01:02:26.565 --> 01:02:28.484
<v Speaker 2>type system to gate what things are allowed

01:02:28.484 --> 01:02:30.750
<v Speaker 2>to actually be wild carded or not, but

01:02:30.750 --> 01:02:32.510
<v Speaker 2>then when you you can actually write a

01:02:32.510 --> 01:02:35.390
<v Speaker 2>relationship that says basically user star is allowed

01:02:35.390 --> 01:02:37.870
<v Speaker 2>to access this thing. And so that means

01:02:37.950 --> 01:02:40.910
<v Speaker 2>any user, any user you provide whatsoever is

01:02:40.910 --> 01:02:43.390
<v Speaker 2>going to just get true for that particular

01:02:43.390 --> 01:02:44.270
<v Speaker 2>relation.

01:02:44.270 --> 01:02:46.185
<v Speaker 2>They're they're totally good. Sorry if there's a

01:02:46.185 --> 01:02:47.945
<v Speaker 2>little background noise. But

01:02:48.585 --> 01:02:49.385
<v Speaker 2>basically

01:02:49.465 --> 01:02:51.465
<v Speaker 2>what you could do then is say, all

01:02:51.465 --> 01:02:53.785
<v Speaker 2>right, my trusted users, I'm going to add

01:02:53.785 --> 01:02:56.185
<v Speaker 2>them by name or by ID, right? You're

01:02:56.185 --> 01:02:58.105
<v Speaker 2>going to add them individually to give them

01:02:58.105 --> 01:02:59.970
<v Speaker 2>real access and then when your date that

01:02:59.970 --> 01:03:00.770
<v Speaker 2>you're launching

01:03:01.010 --> 01:03:01.810
<v Speaker 2>publicly

01:03:01.810 --> 01:03:02.450
<v Speaker 2>hits,

01:03:02.610 --> 01:03:04.690
<v Speaker 2>then you would write the wildcard relation and

01:03:04.690 --> 01:03:07.010
<v Speaker 2>say like, all right, gates are open now,

01:03:07.010 --> 01:03:09.010
<v Speaker 2>everyone can access this. It doesn't matter whether

01:03:09.010 --> 01:03:11.730
<v Speaker 2>you're in the kind of private list before

01:03:12.125 --> 01:03:13.405
<v Speaker 2>And that would be like a really good

01:03:13.405 --> 01:03:15.005
<v Speaker 2>way to to model kind of like that

01:03:15.005 --> 01:03:15.965
<v Speaker 2>early access.

01:03:17.325 --> 01:03:19.325
<v Speaker 1>Okay. So, you know, people are working on

01:03:19.325 --> 01:03:20.605
<v Speaker 1>CMS systems,

01:03:20.845 --> 01:03:22.525
<v Speaker 1>etcetera, and they want an article to go

01:03:22.525 --> 01:03:23.805
<v Speaker 1>live at a certain date,

01:03:24.125 --> 01:03:26.285
<v Speaker 1>they would set up some sort of automation

01:03:26.285 --> 01:03:28.680
<v Speaker 1>that runs on a cron every hour. Okay.

01:03:28.680 --> 01:03:30.040
<v Speaker 1>With the go live date is now a

01:03:30.040 --> 01:03:32.280
<v Speaker 1>hit, you're writing to SpiceDB and saying this

01:03:32.280 --> 01:03:33.320
<v Speaker 1>is now available

01:03:33.960 --> 01:03:36.120
<v Speaker 1>to everyone. That is the the secret sauce

01:03:36.120 --> 01:03:36.600
<v Speaker 1>there

01:03:37.240 --> 01:03:39.480
<v Speaker 1>rather than develop caveats and pass in the

01:03:39.480 --> 01:03:41.240
<v Speaker 1>date for every request. So that seems like

01:03:41.240 --> 01:03:41.880
<v Speaker 1>it could be.

01:03:42.945 --> 01:03:43.745
<v Speaker 2>Absolutely.

01:03:43.745 --> 01:03:46.145
<v Speaker 2>Yeah. Because the caveats, the other thing just

01:03:46.145 --> 01:03:47.985
<v Speaker 2>consider with them is like, they kind of

01:03:47.985 --> 01:03:49.025
<v Speaker 2>live forever.

01:03:49.425 --> 01:03:51.505
<v Speaker 2>Like, once you write a relationship that is

01:03:51.505 --> 01:03:53.825
<v Speaker 2>caveated, that caveat will live with that relationship

01:03:53.825 --> 01:03:55.505
<v Speaker 2>forever. So if you do something like a

01:03:55.505 --> 01:03:57.505
<v Speaker 2>date and it's gonna have an expiration,

01:03:57.505 --> 01:03:57.825
<v Speaker 2>for example,

01:03:59.140 --> 01:04:00.660
<v Speaker 2>there's like no

01:04:01.460 --> 01:04:04.020
<v Speaker 2>process going through and like that understands the

01:04:04.020 --> 01:04:06.020
<v Speaker 2>custom cell code that you've written that says

01:04:06.020 --> 01:04:07.860
<v Speaker 2>like, oh, this will never this caveat, it

01:04:07.860 --> 01:04:09.540
<v Speaker 2>will never evaluate to true ever in the

01:04:09.540 --> 01:04:11.300
<v Speaker 2>future. So that's like kind of on the

01:04:11.300 --> 01:04:13.644
<v Speaker 2>user to say like, all right, this this

01:04:13.644 --> 01:04:15.244
<v Speaker 2>doesn't make sense anymore. I would have to

01:04:15.244 --> 01:04:16.765
<v Speaker 2>go in and delete all these or like

01:04:16.765 --> 01:04:19.405
<v Speaker 2>replace them all with non caveated versions,

01:04:20.045 --> 01:04:21.805
<v Speaker 2>because there is this trade off where like

01:04:21.805 --> 01:04:24.045
<v Speaker 2>you're gonna have to evaluate the caveat going

01:04:24.045 --> 01:04:24.285
<v Speaker 2>forward.

01:04:25.490 --> 01:04:27.970
<v Speaker 2>And like basically to solve that for the

01:04:27.970 --> 01:04:29.170
<v Speaker 2>most common use case

01:04:29.490 --> 01:04:30.289
<v Speaker 2>and more,

01:04:30.690 --> 01:04:32.690
<v Speaker 2>maybe not the most recent, but maybe two

01:04:32.690 --> 01:04:34.369
<v Speaker 2>versions ago of SpliceDB,

01:04:34.369 --> 01:04:37.329
<v Speaker 2>we actually released first class support for expiring

01:04:37.329 --> 01:04:37.970
<v Speaker 2>relationships,

01:04:38.315 --> 01:04:41.275
<v Speaker 2>which was one of the, most common usages

01:04:41.275 --> 01:04:42.475
<v Speaker 2>of caveats.

01:04:43.115 --> 01:04:45.355
<v Speaker 2>Users basically one wanted that to be way

01:04:45.355 --> 01:04:47.435
<v Speaker 2>more performant because it is so common and

01:04:47.435 --> 01:04:49.195
<v Speaker 2>for us to kind of like SpaceDB to

01:04:49.195 --> 01:04:51.355
<v Speaker 2>do the internal garbage collection to say like,

01:04:51.355 --> 01:04:54.040
<v Speaker 2>okay, like this relationship,

01:04:54.040 --> 01:04:56.119
<v Speaker 2>it expires on this date after that point

01:04:56.119 --> 01:04:58.280
<v Speaker 2>in time, it's no longer relevant, which means

01:04:58.280 --> 01:05:00.200
<v Speaker 2>you should just delete it. So SpiceDB should

01:05:00.200 --> 01:05:01.640
<v Speaker 2>just go through and kind of delete all

01:05:01.640 --> 01:05:03.080
<v Speaker 2>the expired

01:05:03.080 --> 01:05:03.720
<v Speaker 2>relationships.

01:05:04.484 --> 01:05:06.644
<v Speaker 2>And we can do that because it understands

01:05:06.644 --> 01:05:09.204
<v Speaker 2>expiring relationships and not like the custom caveat

01:05:09.204 --> 01:05:10.565
<v Speaker 2>code that you've written.

01:05:10.964 --> 01:05:13.045
<v Speaker 2>So now that super common use case is

01:05:13.045 --> 01:05:16.005
<v Speaker 2>built in and really, really optimized and there

01:05:16.160 --> 01:05:18.160
<v Speaker 2>are some users for some use cases that

01:05:18.160 --> 01:05:20.800
<v Speaker 2>are just using all expiring relationships

01:05:20.880 --> 01:05:24.080
<v Speaker 2>and just, like, constantly kind of retouching

01:05:24.080 --> 01:05:26.320
<v Speaker 2>those relationships to keep them alive over time.

01:05:26.320 --> 01:05:28.080
<v Speaker 2>But they have, like, this default case where,

01:05:28.080 --> 01:05:30.835
<v Speaker 2>like, if nothing were to happen, like, this

01:05:30.835 --> 01:05:33.235
<v Speaker 2>per all these permissions would just totally cease

01:05:33.235 --> 01:05:34.435
<v Speaker 2>to exist anymore,

01:05:34.755 --> 01:05:36.995
<v Speaker 2>which is really, really powerful and interesting use

01:05:36.995 --> 01:05:37.475
<v Speaker 2>case.

01:05:38.755 --> 01:05:40.915
<v Speaker 1>Yeah. That's fantastic. I had no idea about

01:05:40.915 --> 01:05:43.075
<v Speaker 1>that feature, but I'm definitely interested in playing

01:05:43.075 --> 01:05:44.275
<v Speaker 1>with that. So I'm assuming

01:05:44.880 --> 01:05:47.279
<v Speaker 1>when I'm using, say, the Node. Js SDK,

01:05:47.279 --> 01:05:49.359
<v Speaker 1>the Go SDK, and I create that relationship,

01:05:49.359 --> 01:05:51.760
<v Speaker 1>there's just metadata. I say expire in July,

01:05:51.760 --> 01:05:54.000
<v Speaker 1>'90 days, whatever, and that just is all

01:05:54.000 --> 01:05:55.520
<v Speaker 1>handled for me automatically.

01:05:56.079 --> 01:05:58.960
<v Speaker 2>Yep. Absolutely. And it's actually, like, a really

01:05:58.960 --> 01:06:00.000
<v Speaker 2>subtle thing because

01:06:00.735 --> 01:06:03.935
<v Speaker 2>notoriously distributed systems and, like, clocks

01:06:03.935 --> 01:06:06.335
<v Speaker 2>are not, like, friends is the best way

01:06:06.335 --> 01:06:07.135
<v Speaker 2>to put that.

01:06:07.695 --> 01:06:09.775
<v Speaker 2>In distributed systems, you really have to use

01:06:09.775 --> 01:06:11.855
<v Speaker 2>kind of events and the ordering of events

01:06:11.855 --> 01:06:15.070
<v Speaker 2>to determine things and causality to kind of

01:06:15.070 --> 01:06:17.390
<v Speaker 2>understand how the system works overall.

01:06:17.710 --> 01:06:18.910
<v Speaker 2>You can't just, like, look at a clock

01:06:18.910 --> 01:06:20.910
<v Speaker 2>because not everyone's clocks are synced and there's

01:06:20.910 --> 01:06:22.990
<v Speaker 2>things like leap seconds that can totally just

01:06:22.990 --> 01:06:23.630
<v Speaker 2>destroy,

01:06:23.950 --> 01:06:25.790
<v Speaker 2>a lot of your intuition around kind of

01:06:25.790 --> 01:06:27.150
<v Speaker 2>time and the ordering of things.

01:06:29.105 --> 01:06:29.984
<v Speaker 2>Fundamentally,

01:06:29.984 --> 01:06:32.545
<v Speaker 2>expiring relationships actually is associated with time though,

01:06:32.545 --> 01:06:34.865
<v Speaker 2>so there's kind of like this this friction

01:06:34.865 --> 01:06:37.105
<v Speaker 2>where these features are kind of at odds.

01:06:37.105 --> 01:06:38.545
<v Speaker 2>So we do the best we can to

01:06:38.545 --> 01:06:40.145
<v Speaker 2>kind of like push that down in the

01:06:40.145 --> 01:06:41.825
<v Speaker 2>way that makes the most sense rather than

01:06:41.825 --> 01:06:44.140
<v Speaker 2>like folks kind of like providing time from

01:06:44.140 --> 01:06:45.820
<v Speaker 2>like their app servers and like the app

01:06:45.820 --> 01:06:47.420
<v Speaker 2>servers are totally out of sync with like

01:06:47.420 --> 01:06:50.380
<v Speaker 2>SpiceDB. So we try to based on kind

01:06:50.380 --> 01:06:52.380
<v Speaker 2>of like what your data storage backend is

01:06:52.380 --> 01:06:53.420
<v Speaker 2>for SpiceDB,

01:06:53.420 --> 01:06:55.100
<v Speaker 2>we try to do like the best possible

01:06:55.100 --> 01:06:57.375
<v Speaker 2>thing there to make all this work. But

01:06:57.375 --> 01:06:58.815
<v Speaker 2>I just wanted to add that caveat,

01:06:59.695 --> 01:07:01.375
<v Speaker 2>because I think a lot of the distributed

01:07:01.375 --> 01:07:03.375
<v Speaker 2>systems folks would be like, something

01:07:03.775 --> 01:07:06.335
<v Speaker 2>about that doesn't seem right, if you're kind

01:07:06.335 --> 01:07:08.255
<v Speaker 2>of like using wall clocks for for some

01:07:08.255 --> 01:07:08.735
<v Speaker 2>of this stuff.

01:07:09.390 --> 01:07:11.309
<v Speaker 2>But, yeah, everything else in SPICE TP is

01:07:11.309 --> 01:07:13.230
<v Speaker 2>all kind of under the hood using event

01:07:13.230 --> 01:07:16.270
<v Speaker 2>based kind of vector clocks as typical distributed

01:07:16.270 --> 01:07:17.230
<v Speaker 2>systems would.

01:07:18.190 --> 01:07:19.310
<v Speaker 1>Alright. Awesome.

01:07:20.910 --> 01:07:22.585
<v Speaker 1>I want us to kinda explore the the

01:07:22.585 --> 01:07:24.905
<v Speaker 1>test relationships and assertions before we finish. I'll

01:07:24.905 --> 01:07:26.505
<v Speaker 1>be very brief with this last question then.

01:07:26.505 --> 01:07:28.265
<v Speaker 1>But you have mentioned, you know, clocks and,

01:07:28.265 --> 01:07:30.185
<v Speaker 1>you know, distributed systems, just vector clocks and

01:07:30.185 --> 01:07:31.385
<v Speaker 1>all these fancy things.

01:07:31.785 --> 01:07:33.385
<v Speaker 1>But let's talk about caching.

01:07:33.705 --> 01:07:36.345
<v Speaker 1>Now, if I'm building the system and say

01:07:36.345 --> 01:07:39.110
<v Speaker 1>I am I have an expiry relationship,

01:07:40.310 --> 01:07:42.470
<v Speaker 1>whether that's minutes, hours, whatever. Right? There's something

01:07:42.470 --> 01:07:44.470
<v Speaker 1>here that has to expire and I'm sending

01:07:44.470 --> 01:07:46.150
<v Speaker 1>a request to SpaceDB,

01:07:46.790 --> 01:07:49.030
<v Speaker 1>is it normal practice to say, okay, I'm

01:07:49.030 --> 01:07:51.444
<v Speaker 1>going to trust this for a percentage of

01:07:51.444 --> 01:07:54.005
<v Speaker 1>time as the expiration passed back with the

01:07:54.005 --> 01:07:56.085
<v Speaker 1>the request. Is that something I can figure?

01:07:56.085 --> 01:07:57.924
<v Speaker 1>Or would you just say that the performance

01:07:57.924 --> 01:07:59.125
<v Speaker 1>of SpaceDB

01:07:59.285 --> 01:08:01.204
<v Speaker 1>and, you know, the domain that is in,

01:08:01.204 --> 01:08:03.365
<v Speaker 1>which is, you know, security and permissions,

01:08:03.444 --> 01:08:05.045
<v Speaker 1>you should never catch. Like, what are your

01:08:05.045 --> 01:08:07.650
<v Speaker 1>thoughts on scaling and operating this thing as

01:08:07.650 --> 01:08:08.770
<v Speaker 1>I build out my system?

01:08:09.810 --> 01:08:10.450
<v Speaker 2>Yeah.

01:08:10.849 --> 01:08:12.530
<v Speaker 2>A good way to think of, like, what

01:08:12.530 --> 01:08:16.450
<v Speaker 2>SpliceDB even fundamentally is, is it's a really

01:08:16.450 --> 01:08:17.569
<v Speaker 2>sophisticated

01:08:17.569 --> 01:08:18.609
<v Speaker 2>distributed cache.

01:08:19.115 --> 01:08:21.755
<v Speaker 2>So kind of, we call it a database,

01:08:21.835 --> 01:08:23.755
<v Speaker 2>but it's a little bit different from a

01:08:23.755 --> 01:08:27.035
<v Speaker 2>lot of other databases. It's probably like closest

01:08:27.035 --> 01:08:30.395
<v Speaker 2>to like Redis in this sense in that,

01:08:30.795 --> 01:08:33.529
<v Speaker 2>Spice TV itself to kind of hit your

01:08:33.529 --> 01:08:36.729
<v Speaker 2>low latency kind of authorization requirements. Right? If

01:08:36.729 --> 01:08:38.649
<v Speaker 2>we like take a huge step back,

01:08:39.210 --> 01:08:40.809
<v Speaker 2>before you do any work on any of

01:08:40.809 --> 01:08:42.649
<v Speaker 2>your API servers, like you first have to

01:08:42.649 --> 01:08:44.090
<v Speaker 2>check a permission to see if the user

01:08:44.090 --> 01:08:45.529
<v Speaker 2>is allowed to do the thing,

01:08:46.170 --> 01:08:47.050
<v Speaker 2>which means

01:08:47.445 --> 01:08:49.445
<v Speaker 2>before you do any work, have to do

01:08:49.445 --> 01:08:49.925
<v Speaker 2>this.

01:08:50.325 --> 01:08:51.925
<v Speaker 2>And then you also have to consider there's

01:08:51.925 --> 01:08:53.285
<v Speaker 2>gonna be a network opt to the service.

01:08:53.285 --> 01:08:54.564
<v Speaker 2>So there's gonna be like at least one

01:08:54.564 --> 01:08:56.165
<v Speaker 2>or two milliseconds where you like reach out

01:08:56.165 --> 01:08:58.085
<v Speaker 2>to Display TV and ask it for something.

01:08:58.645 --> 01:08:59.765
<v Speaker 2>And already,

01:08:59.845 --> 01:09:01.524
<v Speaker 2>depending on a whole bunch of use cases,

01:09:01.524 --> 01:09:03.920
<v Speaker 2>maybe you want, maybe your SLA is like

01:09:03.920 --> 01:09:06.239
<v Speaker 2>ten milliseconds and we've already used two to

01:09:06.239 --> 01:09:09.040
<v Speaker 2>talk to Spice TV. Right? So basically Spice

01:09:09.040 --> 01:09:11.359
<v Speaker 2>TV's goal is to keep as much as

01:09:11.359 --> 01:09:12.800
<v Speaker 2>possible in memory,

01:09:13.520 --> 01:09:15.600
<v Speaker 2>ready to be served directly back to the

01:09:15.600 --> 01:09:17.600
<v Speaker 2>user, to the application

01:09:18.784 --> 01:09:21.664
<v Speaker 2>basically as quickly as it possibly can.

01:09:22.465 --> 01:09:24.944
<v Speaker 2>That being said, we keep as much as

01:09:24.944 --> 01:09:28.225
<v Speaker 2>possible in memory to do that and

01:09:28.225 --> 01:09:28.784
<v Speaker 2>then

01:09:29.425 --> 01:09:30.224
<v Speaker 2>what

01:09:30.225 --> 01:09:33.585
<v Speaker 2>the structure of kind of SpaceDB looks like

01:09:32.550 --> 01:09:35.029
<v Speaker 2>is we break down requests recursively

01:09:35.029 --> 01:09:36.869
<v Speaker 2>into kind of structural

01:09:36.869 --> 01:09:38.949
<v Speaker 2>kind of traversals through a graph

01:09:39.189 --> 01:09:40.550
<v Speaker 2>and cache

01:09:40.550 --> 01:09:42.069
<v Speaker 2>partial evaluations

01:09:42.069 --> 01:09:44.309
<v Speaker 2>of the graph and how you kind of

01:09:44.309 --> 01:09:45.510
<v Speaker 2>travel through that graph.

01:09:46.594 --> 01:09:48.594
<v Speaker 2>And so, like, if you have two permissions

01:09:48.594 --> 01:09:51.234
<v Speaker 2>checks and structurally they share some of the

01:09:51.234 --> 01:09:53.234
<v Speaker 2>same data they have to, like, go through,

01:09:54.035 --> 01:09:56.915
<v Speaker 2>so say you had, like, the reader permission

01:09:56.915 --> 01:09:58.675
<v Speaker 2>and then the writer permission from the blog

01:09:58.675 --> 01:09:59.315
<v Speaker 2>post earlier,

01:09:59.750 --> 01:10:01.829
<v Speaker 2>but the writer permission was also,

01:10:02.469 --> 01:10:04.710
<v Speaker 2>sorry. The the reader permission was also defined

01:10:04.710 --> 01:10:06.870
<v Speaker 2>by talking about the writer permission. Right? It's

01:10:06.870 --> 01:10:08.309
<v Speaker 2>also checking writers.

01:10:08.790 --> 01:10:11.110
<v Speaker 2>If you did a permissions check on writers

01:10:11.190 --> 01:10:12.790
<v Speaker 2>and then you did a permissions check on

01:10:12.790 --> 01:10:13.270
<v Speaker 2>readers,

01:10:13.625 --> 01:10:16.105
<v Speaker 2>half of the permissions check for the reader

01:10:16.105 --> 01:10:17.784
<v Speaker 2>would already be cached

01:10:17.864 --> 01:10:19.785
<v Speaker 2>because you already looked at all the readers

01:10:19.785 --> 01:10:21.785
<v Speaker 2>for that particular or sorry. You already looked

01:10:21.785 --> 01:10:23.545
<v Speaker 2>at all the writers for that particular thing.

01:10:23.545 --> 01:10:24.985
<v Speaker 2>So that means half of the work of

01:10:24.985 --> 01:10:27.980
<v Speaker 2>figuring out whether someone has permission was already

01:10:27.980 --> 01:10:30.540
<v Speaker 2>kind of preloaded and pre cached in SpaceDB

01:10:30.540 --> 01:10:32.300
<v Speaker 2>by the time you did that. So,

01:10:33.020 --> 01:10:34.620
<v Speaker 2>we're doing a lot to keep as much

01:10:34.620 --> 01:10:36.780
<v Speaker 2>kind of in memory lazily,

01:10:37.180 --> 01:10:39.020
<v Speaker 2>kind of as you request things

01:10:39.815 --> 01:10:42.215
<v Speaker 2>to kind of maximize memory usage, but then

01:10:42.215 --> 01:10:44.135
<v Speaker 2>also like make sure that cache hit rates

01:10:44.135 --> 01:10:45.574
<v Speaker 2>incredibly high.

01:10:45.895 --> 01:10:47.815
<v Speaker 2>The really nice thing about all this stuff

01:10:47.815 --> 01:10:49.574
<v Speaker 2>is it's kind of temporal.

01:10:49.815 --> 01:10:53.080
<v Speaker 2>So, after like maybe two hours, like, that

01:10:53.080 --> 01:10:55.880
<v Speaker 2>old permissions data, probably never gonna get queried

01:10:55.880 --> 01:10:57.640
<v Speaker 2>again, so we can actually just evict that

01:10:57.640 --> 01:11:00.120
<v Speaker 2>stuff from memory. So we're we're not necessarily,

01:11:00.120 --> 01:11:02.840
<v Speaker 2>like, hanging on to stuff indefinitely in memory.

01:11:03.160 --> 01:11:05.080
<v Speaker 2>So we can actually be pretty lean as

01:11:05.080 --> 01:11:07.080
<v Speaker 2>to, like, what our memory footprint is while

01:11:07.080 --> 01:11:09.535
<v Speaker 2>trying to keep as much in memory as

01:11:09.535 --> 01:11:11.775
<v Speaker 2>possible. So if your question is like, should

01:11:11.775 --> 01:11:13.455
<v Speaker 2>I be caching these things? I would say

01:11:13.455 --> 01:11:16.255
<v Speaker 2>the most sophisticated cache you would already have

01:11:16.255 --> 01:11:17.935
<v Speaker 2>is literally SpiceDB.

01:11:18.735 --> 01:11:21.295
<v Speaker 2>So if if you're kind of having issues

01:11:21.295 --> 01:11:24.130
<v Speaker 2>where you want something to be cached, what

01:11:24.130 --> 01:11:26.370
<v Speaker 2>you can do is just deploy a SpiceDB

01:11:26.370 --> 01:11:29.409
<v Speaker 2>more close to that particular endpoint.

01:11:30.290 --> 01:11:32.690
<v Speaker 2>So say like you are running SpiceDB in

01:11:32.690 --> 01:11:34.290
<v Speaker 2>one particular region,

01:11:34.850 --> 01:11:36.770
<v Speaker 2>in a cloud provider, but then you have

01:11:36.770 --> 01:11:39.275
<v Speaker 2>this one use case where like maybe you

01:11:39.275 --> 01:11:39.995
<v Speaker 2>have, like,

01:11:40.475 --> 01:11:43.275
<v Speaker 2>a hundred thousand queries per second. You might

01:11:43.275 --> 01:11:45.995
<v Speaker 2>actually wanna just dedicate another SpiceDB cluster just

01:11:45.995 --> 01:11:47.515
<v Speaker 2>sitting right in front of that. The same

01:11:47.515 --> 01:11:50.315
<v Speaker 2>shared data, it's all using the same, canonical

01:11:50.315 --> 01:11:51.675
<v Speaker 2>data and relationship storage,

01:11:52.140 --> 01:11:54.860
<v Speaker 2>but this one is just running directly for

01:11:54.860 --> 01:11:56.860
<v Speaker 2>that one use case. So all of the

01:11:56.860 --> 01:11:57.739
<v Speaker 2>caching

01:11:57.900 --> 01:12:00.219
<v Speaker 2>built into SpiceDB itself is just gonna be

01:12:00.219 --> 01:12:02.060
<v Speaker 2>focused on that one particular use case and

01:12:02.060 --> 01:12:05.580
<v Speaker 2>optimizing that one. So there's definitely different architectural

01:12:05.580 --> 01:12:08.015
<v Speaker 2>ways you can deploy SpiceDB to hit your

01:12:08.015 --> 01:12:08.655
<v Speaker 2>cache

01:12:08.895 --> 01:12:09.775
<v Speaker 2>hit goals.

01:12:10.415 --> 01:12:12.495
<v Speaker 2>But I don't think that

01:12:13.295 --> 01:12:14.255
<v Speaker 2>writing a

01:12:14.575 --> 01:12:16.815
<v Speaker 2>naive cache in front of the service is

01:12:16.815 --> 01:12:18.094
<v Speaker 2>probably going to

01:12:19.535 --> 01:12:20.975
<v Speaker 2>include all of the

01:12:21.455 --> 01:12:24.440
<v Speaker 2>semantics you need to encapsulate consistency and the

01:12:24.440 --> 01:12:25.320
<v Speaker 2>correctness

01:12:25.320 --> 01:12:26.440
<v Speaker 2>of the permissions

01:12:26.840 --> 01:12:28.920
<v Speaker 2>because if you think about it a stale

01:12:28.920 --> 01:12:29.639
<v Speaker 2>permission,

01:12:30.440 --> 01:12:32.840
<v Speaker 2>basically making an authorization decision based off of

01:12:32.840 --> 01:12:35.320
<v Speaker 2>a stale permission is a security vulnerability.

01:12:35.685 --> 01:12:37.765
<v Speaker 2>So, like, this is some kind of scary

01:12:37.765 --> 01:12:39.925
<v Speaker 2>critical data. Like, you you really don't wanna

01:12:39.925 --> 01:12:41.685
<v Speaker 2>try to, like, just use naive,

01:12:42.005 --> 01:12:43.125
<v Speaker 2>kind of caching,

01:12:43.365 --> 01:12:47.445
<v Speaker 2>mechanisms and especially when people can revoke permissions

01:12:47.445 --> 01:12:49.365
<v Speaker 2>kind of dynamically throughout the whole system.

01:12:51.020 --> 01:12:52.780
<v Speaker 1>Alright. I feel like I just got into

01:12:52.780 --> 01:12:55.340
<v Speaker 1>trouble, but that was totally worth it. So

01:12:55.980 --> 01:12:58.380
<v Speaker 1>thank you for for covering all that. That's

01:12:58.380 --> 01:13:00.060
<v Speaker 2>a super fair question. A lot of people

01:13:00.060 --> 01:13:02.220
<v Speaker 2>ask us about that. But, like, once you

01:13:02.220 --> 01:13:03.820
<v Speaker 2>understand what Spice TV is doing, you're like,

01:13:03.820 --> 01:13:05.465
<v Speaker 2>oh, okay. Yeah. I wasn't gonna do better

01:13:05.465 --> 01:13:06.105
<v Speaker 2>than that.

01:13:06.825 --> 01:13:08.425
<v Speaker 1>Yeah. I mean, we could go into the

01:13:08.425 --> 01:13:10.665
<v Speaker 1>whole cluster and topology and the best way

01:13:10.665 --> 01:13:12.505
<v Speaker 1>to architect this, but we are very short

01:13:12.505 --> 01:13:13.625
<v Speaker 1>in time and I don't want us to

01:13:13.625 --> 01:13:15.385
<v Speaker 1>to kinda run over. So maybe that's a

01:13:15.385 --> 01:13:17.865
<v Speaker 1>a session for another day or maybe people

01:13:17.865 --> 01:13:19.385
<v Speaker 1>should just check out offset.com

01:13:19.385 --> 01:13:20.949
<v Speaker 1>and and use the managed model. Because I

01:13:20.949 --> 01:13:22.229
<v Speaker 1>mean, that's just a lot easier.

01:13:22.630 --> 01:13:24.309
<v Speaker 1>But we'll talk about that when we finish.

01:13:24.790 --> 01:13:25.349
<v Speaker 1>So

01:13:26.150 --> 01:13:28.710
<v Speaker 1>we I've broken the relationships by changing the

01:13:28.710 --> 01:13:30.710
<v Speaker 1>entire schema of a model now. So, you

01:13:30.710 --> 01:13:32.389
<v Speaker 1>know, in order to show how these work

01:13:32.389 --> 01:13:34.389
<v Speaker 1>and how people can do some validations, I'd

01:13:34.389 --> 01:13:36.835
<v Speaker 1>like to update our tests and our sessions

01:13:36.835 --> 01:13:39.074
<v Speaker 1>to reflect what we're now doing with users,

01:13:39.074 --> 01:13:41.155
<v Speaker 1>videos, watchers, the watch permission

01:13:41.315 --> 01:13:43.715
<v Speaker 1>even if we don't use the caveat. So

01:13:43.715 --> 01:13:46.355
<v Speaker 1>we've got some video here. We've got a

01:13:46.355 --> 01:13:46.915
<v Speaker 1>watcher.

01:13:47.800 --> 01:13:49.239
<v Speaker 1>I can just type in this like a

01:13:49.239 --> 01:13:50.840
<v Speaker 1>spreadsheet, which is lovely.

01:13:51.080 --> 01:13:53.640
<v Speaker 1>I'm updating the relations. So what we're seeing

01:13:53.640 --> 01:13:55.000
<v Speaker 1>here is that we have some sort of

01:13:55.000 --> 01:13:56.440
<v Speaker 1>type user that

01:13:56.920 --> 01:14:00.360
<v Speaker 1>has a watcher relation to a document. Now

01:14:00.360 --> 01:14:01.800
<v Speaker 1>we don't have documents.

01:14:01.880 --> 01:14:03.239
<v Speaker 1>We made this a video.

01:14:04.175 --> 01:14:06.575
<v Speaker 1>So I'm assuming I'm fixing this. Please let

01:14:06.575 --> 01:14:07.775
<v Speaker 1>me know if I Yeah. You are. You

01:14:07.775 --> 01:14:10.095
<v Speaker 2>are. Some things are turning green. It's throwing

01:14:10.095 --> 01:14:12.175
<v Speaker 2>different errors. The nice thing is there's kind

01:14:12.175 --> 01:14:13.855
<v Speaker 2>of autocomplete all built into this stuff too.

01:14:13.855 --> 01:14:15.295
<v Speaker 2>You saw, like, video autocompleted.

01:14:15.710 --> 01:14:17.550
<v Speaker 2>Another thing just to note in the top

01:14:17.550 --> 01:14:19.310
<v Speaker 2>left corner, like right below where it says

01:14:19.310 --> 01:14:21.630
<v Speaker 2>schema, there's kind of this toggle right now

01:14:21.630 --> 01:14:23.550
<v Speaker 2>it's on like the grid kind of Excel

01:14:23.550 --> 01:14:25.790
<v Speaker 2>mode, but you can also hit like the

01:14:25.790 --> 01:14:27.710
<v Speaker 2>angle brackets, which is going to put it

01:14:27.710 --> 01:14:29.925
<v Speaker 2>in text format. And so say you wanted

01:14:29.925 --> 01:14:31.925
<v Speaker 2>to make like a ton of changes all

01:14:31.925 --> 01:14:33.525
<v Speaker 2>at once, you can actually use kind of

01:14:33.525 --> 01:14:36.805
<v Speaker 2>the find and replace shortcuts in Code right

01:14:36.805 --> 01:14:40.245
<v Speaker 2>here, like kind of mass, like bulk change

01:14:40.245 --> 01:14:42.250
<v Speaker 2>some things. So you could do, like, find

01:14:42.250 --> 01:14:45.370
<v Speaker 2>and replace on, the only only on Tuesday

01:14:45.370 --> 01:14:47.369
<v Speaker 2>and replace it with, your

01:14:47.929 --> 01:14:48.489
<v Speaker 2>your,

01:14:48.730 --> 01:14:51.929
<v Speaker 2>caveat for watchers being over 50%.

01:14:53.290 --> 01:14:55.130
<v Speaker 1>Alright. That was very helpful because I was

01:14:55.130 --> 01:14:58.055
<v Speaker 1>able to then switch from the watch permission

01:14:58.375 --> 01:15:00.935
<v Speaker 1>from the relation. So if we pop back

01:15:00.935 --> 01:15:02.615
<v Speaker 1>here, we should be green, which means that

01:15:02.615 --> 01:15:04.695
<v Speaker 1>Fred and Tom can both watch videos on

01:15:04.695 --> 01:15:06.055
<v Speaker 1>SpaceDB and Kafka.

01:15:06.535 --> 01:15:08.135
<v Speaker 2>If you look at the bottom too, there's

01:15:08.135 --> 01:15:09.975
<v Speaker 2>there's this kinda check watches

01:15:10.230 --> 01:15:11.910
<v Speaker 2>at the very bottom that's kind of going

01:15:11.910 --> 01:15:13.910
<v Speaker 2>off. And so if you kinda you can

01:15:13.910 --> 01:15:15.750
<v Speaker 2>drag that bar a little bit further up

01:15:15.750 --> 01:15:17.350
<v Speaker 2>and you can see more, I believe.

01:15:19.510 --> 01:15:20.550
<v Speaker 2>Maybe not.

01:15:22.925 --> 01:15:25.485
<v Speaker 2>This is saying watch is the name of

01:15:25.485 --> 01:15:27.165
<v Speaker 2>the permission and not the relation.

01:15:29.085 --> 01:15:31.725
<v Speaker 1>Oh, so I actually That means watchers. Yeah.

01:15:31.725 --> 01:15:32.285
<v Speaker 2>Yep.

01:15:34.285 --> 01:15:36.445
<v Speaker 1>Alright. Let's just update my schema.

01:15:36.445 --> 01:15:37.005
<v Speaker 1>Watcher.

01:15:40.780 --> 01:15:42.219
<v Speaker 1>No. That made it worse.

01:15:46.620 --> 01:15:48.460
<v Speaker 1>Ah, okay. Because of the like because I

01:15:48.460 --> 01:15:50.460
<v Speaker 1>changed the schema. Oh, yeah. Okay. Yeah. You

01:15:50.460 --> 01:15:52.060
<v Speaker 2>could just change that to just user if

01:15:52.060 --> 01:15:53.420
<v Speaker 2>you want and to just drop the caveat

01:15:53.420 --> 01:15:55.395
<v Speaker 2>altogether. We don't need to use that caveat.

01:15:55.395 --> 01:15:57.475
<v Speaker 1>Right? So now we've got this wonderful feedback

01:15:57.475 --> 01:15:59.075
<v Speaker 1>loop. Right? I'm evolving

01:15:59.075 --> 01:16:00.195
<v Speaker 1>my schema.

01:16:00.435 --> 01:16:01.715
<v Speaker 1>I've got data,

01:16:01.875 --> 01:16:03.955
<v Speaker 1>which we can look at in multiple fashions

01:16:03.955 --> 01:16:06.240
<v Speaker 1>to understand what is going on here. We

01:16:06.240 --> 01:16:07.600
<v Speaker 1>then have these assertions,

01:16:07.600 --> 01:16:09.120
<v Speaker 1>so we can actually run these. They should

01:16:09.120 --> 01:16:10.560
<v Speaker 1>fail now. Right? So

01:16:11.040 --> 01:16:13.200
<v Speaker 1>it's not even validating because we don't have

01:16:13.200 --> 01:16:14.880
<v Speaker 1>documents anymore. So

01:16:15.200 --> 01:16:16.400
<v Speaker 1>let's say document

01:16:18.000 --> 01:16:18.880
<v Speaker 1>and video.

01:16:20.395 --> 01:16:22.235
<v Speaker 1>And if we don't have the first doc,

01:16:22.235 --> 01:16:23.755
<v Speaker 1>we have the space d b

01:16:25.114 --> 01:16:26.394
<v Speaker 1>and Kafka.

01:16:27.675 --> 01:16:29.434
<v Speaker 1>And then we'll get into the

01:16:30.074 --> 01:16:31.915
<v Speaker 1>the differences here in just a moment. Let

01:16:31.915 --> 01:16:32.875
<v Speaker 1>me see if I can get the validation

01:16:32.875 --> 01:16:33.755
<v Speaker 1>to pass first.

01:16:34.730 --> 01:16:37.050
<v Speaker 1>And then we don't need any

01:16:37.370 --> 01:16:39.370
<v Speaker 1>caveats. We're not playing with those at the

01:16:39.370 --> 01:16:39.929
<v Speaker 1>moment.

01:16:40.810 --> 01:16:41.530
<v Speaker 1>So

01:16:42.330 --> 01:16:44.329
<v Speaker 1>is oh, view.

01:16:47.610 --> 01:16:48.170
<v Speaker 1>Watcher.

01:16:49.105 --> 01:16:51.184
<v Speaker 2>Yeah. Then I think you got some

01:16:51.425 --> 01:16:53.344
<v Speaker 2>quotes at the beginning of

01:16:54.065 --> 01:16:56.224
<v Speaker 2>line two and seven. You've got, like, a

01:16:56.224 --> 01:16:59.185
<v Speaker 2>single quote at the very beginning there. I

01:16:59.185 --> 01:17:01.505
<v Speaker 1>recently switched my keyboard to one that has

01:17:01.665 --> 01:17:04.730
<v Speaker 1>these new magnetic switches, and it's very eager

01:17:04.730 --> 01:17:06.730
<v Speaker 1>to type now. So yeah.

01:17:07.850 --> 01:17:09.850
<v Speaker 1>Alright. What did I get wrong now? So

01:17:09.850 --> 01:17:13.050
<v Speaker 1>filter validate. We've got some sort of problem

01:17:14.170 --> 01:17:16.890
<v Speaker 1>and it's saying a relation or permission to

01:17:16.890 --> 01:17:17.370
<v Speaker 1>exist.

01:17:18.125 --> 01:17:19.965
<v Speaker 2>Yeah. So this is actually telling you that

01:17:19.965 --> 01:17:22.685
<v Speaker 2>the the assertions themselves are failing. So what

01:17:22.685 --> 01:17:25.405
<v Speaker 2>you've written is is totally valid, but it's

01:17:25.405 --> 01:17:27.485
<v Speaker 2>telling you that, hey, I actually am looking

01:17:27.485 --> 01:17:30.364
<v Speaker 2>to see if user Tom is a watcher

01:17:30.364 --> 01:17:31.245
<v Speaker 2>and they are not.

01:17:33.139 --> 01:17:35.699
<v Speaker 1>And the reason that is is

01:17:35.860 --> 01:17:36.820
<v Speaker 1>because

01:17:37.380 --> 01:17:40.340
<v Speaker 1>I don't know. Because Tom is a watcher

01:17:40.340 --> 01:17:42.179
<v Speaker 2>on Kafka and not SPOTCP. Yeah.

01:17:47.015 --> 01:17:49.415
<v Speaker 1>Alright. So we switched this.

01:17:49.815 --> 01:17:51.415
<v Speaker 1>This is cool because now we're we're seeing

01:17:51.415 --> 01:17:53.735
<v Speaker 1>how this works. Alright? So let's return it

01:17:53.735 --> 01:17:56.295
<v Speaker 1>again, and this bit's okay. But now we've

01:17:56.295 --> 01:17:58.135
<v Speaker 1>got a cert caveated. So we don't have

01:17:58.135 --> 01:18:00.375
<v Speaker 1>caveats, but we can build specific test cases

01:18:00.770 --> 01:18:03.090
<v Speaker 1>to check that the caveats do pass when

01:18:03.090 --> 01:18:05.329
<v Speaker 1>they are applicable. So I will remove this.

01:18:06.130 --> 01:18:07.570
<v Speaker 1>And then we have a final one, which

01:18:07.570 --> 01:18:08.769
<v Speaker 1>is to assert false.

01:18:10.690 --> 01:18:12.610
<v Speaker 2>Yeah. This is saying that Tom is is

01:18:12.610 --> 01:18:14.770
<v Speaker 2>definitely not a watcher on SpliceDB.

01:18:15.265 --> 01:18:17.745
<v Speaker 2>And if we recall correctly, we never wrote

01:18:17.745 --> 01:18:20.385
<v Speaker 2>a relationship that gave Tom a watcher on

01:18:20.385 --> 01:18:21.344
<v Speaker 2>SpiceDB,

01:18:21.745 --> 01:18:22.704
<v Speaker 2>only Fred.

01:18:24.385 --> 01:18:26.145
<v Speaker 1>Alright. So why am I getting

01:18:26.625 --> 01:18:28.945
<v Speaker 1>is this just an old failure? Or Yeah.

01:18:28.945 --> 01:18:30.945
<v Speaker 2>You're just on the last validation run tab.

01:18:31.160 --> 01:18:33.880
<v Speaker 2>So because the last one succeeded, it's just

01:18:33.880 --> 01:18:36.280
<v Speaker 2>showing you old errors. That's specifically what that

01:18:36.280 --> 01:18:36.920
<v Speaker 2>is for.

01:18:37.880 --> 01:18:38.600
<v Speaker 2>Alright.

01:18:39.240 --> 01:18:41.960
<v Speaker 1>Yeah. And then This this tab, this last

01:18:41.960 --> 01:18:44.280
<v Speaker 2>tab, expected relations, I actually love this tab,

01:18:44.280 --> 01:18:46.040
<v Speaker 2>but I think most people struggle to understand

01:18:46.040 --> 01:18:46.600
<v Speaker 2>what it says.

01:18:47.715 --> 01:18:50.435
<v Speaker 2>This one is literally saying

01:18:50.995 --> 01:18:52.995
<v Speaker 2>the of the lines where the squiggles are

01:18:52.995 --> 01:18:55.155
<v Speaker 2>right now, like one and and four.

01:18:55.635 --> 01:18:57.955
<v Speaker 2>You you basically write these and then you

01:18:57.955 --> 01:18:58.435
<v Speaker 2>say,

01:18:59.075 --> 01:19:01.610
<v Speaker 2>please tell me all of the users that

01:19:01.610 --> 01:19:03.210
<v Speaker 2>have access to this permission.

01:19:04.330 --> 01:19:07.690
<v Speaker 2>And then if you hit compute and diff,

01:19:08.650 --> 01:19:10.170
<v Speaker 2>that button on the right,

01:19:10.890 --> 01:19:12.970
<v Speaker 2>it's actually showing you a diff of, like,

01:19:12.970 --> 01:19:15.735
<v Speaker 2>what's gonna change. Like, it ran through all

01:19:15.735 --> 01:19:17.895
<v Speaker 2>the data you had in the graph, and

01:19:17.895 --> 01:19:19.014
<v Speaker 2>it determined

01:19:19.175 --> 01:19:21.494
<v Speaker 2>that for the video Kafka,

01:19:21.975 --> 01:19:24.375
<v Speaker 2>there's only one watcher, and that's Tom. And

01:19:24.375 --> 01:19:26.614
<v Speaker 2>then it even tells you why. It's because

01:19:26.614 --> 01:19:29.360
<v Speaker 2>there is a direct relationship written where Tom

01:19:29.360 --> 01:19:30.320
<v Speaker 2>has specifically

01:19:30.480 --> 01:19:32.559
<v Speaker 2>given video Kafka watcher.

01:19:32.960 --> 01:19:34.639
<v Speaker 2>So if you imagine you have something more

01:19:34.639 --> 01:19:37.520
<v Speaker 2>complicated, this is gonna generate a giant kind

01:19:37.520 --> 01:19:40.639
<v Speaker 2>of full exhaustive list of how everyone got

01:19:40.639 --> 01:19:41.840
<v Speaker 2>access to everything.

01:19:42.335 --> 01:19:43.935
<v Speaker 2>And the nice thing of having this kind

01:19:43.935 --> 01:19:46.255
<v Speaker 2>of, like, diffing syntax is you can kind

01:19:46.255 --> 01:19:48.655
<v Speaker 2>of have what you assume to be true

01:19:48.735 --> 01:19:52.094
<v Speaker 2>and then what the computer ultimately finds as

01:19:52.175 --> 01:19:52.894
<v Speaker 2>reality,

01:19:52.975 --> 01:19:55.390
<v Speaker 2>and then it's just gonna highlight very specifically

01:19:55.390 --> 01:19:57.470
<v Speaker 2>the differences so that you can find any,

01:19:57.470 --> 01:19:59.630
<v Speaker 2>like, oops. I definitely didn't think about that

01:19:59.630 --> 01:20:01.710
<v Speaker 2>or, like, this user shouldn't have access to

01:20:01.710 --> 01:20:02.190
<v Speaker 2>that.

01:20:02.910 --> 01:20:04.990
<v Speaker 2>And you can imagine this is incredibly powerful

01:20:04.990 --> 01:20:06.670
<v Speaker 2>when you have, like, a really complicated model

01:20:06.670 --> 01:20:08.830
<v Speaker 2>or you're modeling your whole kind of product

01:20:08.830 --> 01:20:09.630
<v Speaker 2>portfolio

01:20:10.195 --> 01:20:12.435
<v Speaker 2>because now you know that, like, your system

01:20:12.435 --> 01:20:14.994
<v Speaker 2>is actually bulletproof. Like, you've walked through

01:20:15.315 --> 01:20:18.114
<v Speaker 2>all the possible, like, ways folks could get

01:20:18.114 --> 01:20:21.155
<v Speaker 2>access to things and exhaustively at least.

01:20:21.475 --> 01:20:24.190
<v Speaker 2>I recommend folks don't, like, handwrite these, but

01:20:24.190 --> 01:20:27.150
<v Speaker 2>just, like, review what ones are generated to

01:20:27.150 --> 01:20:28.750
<v Speaker 2>make sure that, like, your model is actually

01:20:28.750 --> 01:20:30.829
<v Speaker 2>representing the thing in your head and, like,

01:20:30.829 --> 01:20:33.630
<v Speaker 2>react like, reality where rubber meets the road

01:20:33.630 --> 01:20:35.710
<v Speaker 2>is is actually what you think it is,

01:20:36.195 --> 01:20:38.355
<v Speaker 2>and, no one has access to a particular

01:20:38.355 --> 01:20:39.955
<v Speaker 2>thing that they they shouldn't.

01:20:40.675 --> 01:20:42.995
<v Speaker 1>Nice. What I like here is that I've

01:20:42.995 --> 01:20:44.915
<v Speaker 1>looking for a video called Tom, which now

01:20:44.915 --> 01:20:46.595
<v Speaker 1>doesn't exist. So now we have no Tom

01:20:46.595 --> 01:20:49.075
<v Speaker 1>video watchers. But I'm assuming if I just

01:20:48.690 --> 01:20:50.290
<v Speaker 1>come in here and say SpaceDB

01:20:50.290 --> 01:20:52.449
<v Speaker 1>and then compute is gonna tell me that

01:20:52.449 --> 01:20:53.489
<v Speaker 1>Fred. Yeah.

01:20:54.210 --> 01:20:55.809
<v Speaker 1>That's awesome. I like that.

01:20:56.930 --> 01:20:58.690
<v Speaker 2>Yeah. It's super cool. I feel there there

01:20:58.690 --> 01:21:00.770
<v Speaker 2>isn't really like a good explanation written somewhere

01:21:00.770 --> 01:21:02.610
<v Speaker 2>that's like, this is exactly how you use

01:21:02.610 --> 01:21:05.514
<v Speaker 2>this tab. But holy holy crap. That's like

01:21:05.514 --> 01:21:07.034
<v Speaker 2>super, super powerful.

01:21:07.914 --> 01:21:08.554
<v Speaker 1>Yeah.

01:21:09.034 --> 01:21:10.795
<v Speaker 1>So I think we've covered a lot. Right?

01:21:10.795 --> 01:21:13.514
<v Speaker 1>You can generate schemas, build relationships,

01:21:13.755 --> 01:21:14.875
<v Speaker 1>make assertions,

01:21:14.875 --> 01:21:16.554
<v Speaker 1>and then you have expected relations at the

01:21:16.554 --> 01:21:18.795
<v Speaker 1>other end. This becomes a complete test suite

01:21:18.570 --> 01:21:20.570
<v Speaker 1>for the data that is your permission model

01:21:20.810 --> 01:21:23.449
<v Speaker 1>across your entire application. And, you know, there's

01:21:23.449 --> 01:21:25.050
<v Speaker 1>a bunch of schemas here and there's also

01:21:25.050 --> 01:21:28.010
<v Speaker 1>the schemas and the examples repository. So I

01:21:28.010 --> 01:21:29.849
<v Speaker 1>encourage people just to go and play with

01:21:29.849 --> 01:21:31.210
<v Speaker 1>this. You know, I didn't have to run

01:21:31.210 --> 01:21:33.184
<v Speaker 1>any commands my machine. I don't have to

01:21:33.184 --> 01:21:35.344
<v Speaker 1>run any Docker containers. The playground was just

01:21:35.344 --> 01:21:37.425
<v Speaker 1>sat there ready to let us explore

01:21:37.585 --> 01:21:38.625
<v Speaker 1>and learn,

01:21:38.625 --> 01:21:41.025
<v Speaker 1>which is invaluable. And now that I know

01:21:41.025 --> 01:21:43.105
<v Speaker 1>it's all done with WebAssembly with a real

01:21:43.105 --> 01:21:44.625
<v Speaker 1>space DB, it's just made it a little

01:21:44.625 --> 01:21:45.985
<v Speaker 1>bit cooler. So awesome.

01:21:47.320 --> 01:21:48.840
<v Speaker 2>Yeah. The other thing I'd just add here

01:21:48.840 --> 01:21:51.000
<v Speaker 2>is it's almost the exact same code that

01:21:51.000 --> 01:21:53.080
<v Speaker 2>runs inside the Versus Code extension. So also

01:21:53.080 --> 01:21:54.679
<v Speaker 2>if you wanna do those stuff locally, like

01:21:54.679 --> 01:21:56.679
<v Speaker 2>maybe you don't you don't trust like this

01:21:56.679 --> 01:21:58.920
<v Speaker 2>cloud hosted play.allsaid.com.

01:21:59.155 --> 01:22:01.555
<v Speaker 2>The Playground itself is open source, you could

01:22:01.555 --> 01:22:03.795
<v Speaker 2>just run your own hosted instance, or you

01:22:03.795 --> 01:22:05.715
<v Speaker 2>could just do it all inside Versus Code

01:22:05.715 --> 01:22:06.995
<v Speaker 2>in your own editor.

01:22:07.075 --> 01:22:07.315
<v Speaker 2>So

01:22:08.595 --> 01:22:09.315
<v Speaker 1>Sweet.

01:22:09.795 --> 01:22:12.275
<v Speaker 1>Alright. I'm gonna pop us back over to

01:22:12.275 --> 01:22:14.010
<v Speaker 1>big face mode, and we can

01:22:15.530 --> 01:22:18.170
<v Speaker 1>finish this off. So I really appreciate you

01:22:18.170 --> 01:22:20.250
<v Speaker 1>just you know, that's been, an hour and

01:22:20.250 --> 01:22:21.610
<v Speaker 1>a half of your time to sit here

01:22:21.610 --> 01:22:23.770
<v Speaker 1>and and just cover what I'm sure is

01:22:23.770 --> 01:22:26.015
<v Speaker 1>is really simple basic stuff for you, but

01:22:26.015 --> 01:22:27.535
<v Speaker 1>I hope this is valuable to people that

01:22:27.535 --> 01:22:29.855
<v Speaker 1>are looking to improve their permissions game, adopt

01:22:29.855 --> 01:22:30.735
<v Speaker 1>SpiceDB,

01:22:30.735 --> 01:22:33.215
<v Speaker 1>and just, you know, take their application to

01:22:33.215 --> 01:22:35.215
<v Speaker 1>that kind of next level, more cloud native

01:22:35.215 --> 01:22:38.330
<v Speaker 1>and better than naive assumptions. Because we've all

01:22:38.330 --> 01:22:40.890
<v Speaker 1>done, you know, permission one, user one, user

01:22:40.890 --> 01:22:42.970
<v Speaker 1>two, permission two columns and databases, and we

01:22:42.970 --> 01:22:45.130
<v Speaker 1>know it's wrong. But there's never been,

01:22:45.370 --> 01:22:46.250
<v Speaker 1>I feel,

01:22:46.410 --> 01:22:47.930
<v Speaker 1>an easier way to do it than there

01:22:47.930 --> 01:22:49.610
<v Speaker 1>is today with space to be. So I

01:22:49.610 --> 01:22:51.210
<v Speaker 1>really, again, appreciate your time and thank you

01:22:51.210 --> 01:22:52.010
<v Speaker 1>so much for joining me.

01:22:52.855 --> 01:22:54.054
<v Speaker 1>Do you wanna

01:22:54.855 --> 01:22:56.215
<v Speaker 1>just take a couple of minutes to tell

01:22:56.215 --> 01:22:58.775
<v Speaker 1>us, you know, is SpaceDB finished? Is Offset

01:22:58.775 --> 01:23:01.415
<v Speaker 1>finished? What's coming next? What challenges? What problems

01:23:01.415 --> 01:23:02.855
<v Speaker 1>are you solving next? And what should people

01:23:02.855 --> 01:23:03.495
<v Speaker 1>look forward to?

01:23:04.820 --> 01:23:08.020
<v Speaker 2>Yeah, mean, all software is never finished, right?

01:23:08.100 --> 01:23:10.260
<v Speaker 2>Software has to kind of like live and

01:23:10.260 --> 01:23:12.500
<v Speaker 2>breathe just like people. There's always going to

01:23:12.500 --> 01:23:14.340
<v Speaker 2>be folks kind of working on

01:23:15.060 --> 01:23:17.219
<v Speaker 2>maintaining it and adding new features

01:23:17.540 --> 01:23:18.900
<v Speaker 2>that customers require.

01:23:19.665 --> 01:23:21.505
<v Speaker 2>Like I said, just two

01:23:21.905 --> 01:23:24.385
<v Speaker 2>versions ago, we launched a pretty major feature

01:23:24.385 --> 01:23:27.185
<v Speaker 2>like the expiring relationships that fundamentally changes how

01:23:27.185 --> 01:23:28.864
<v Speaker 2>a lot of people use SpiceDB.

01:23:29.025 --> 01:23:29.585
<v Speaker 2>So

01:23:29.825 --> 01:23:33.040
<v Speaker 2>like that clearly means we're not done, SpiceDB

01:23:33.040 --> 01:23:36.800
<v Speaker 2>isn't done. Is it production ready and used

01:23:36.800 --> 01:23:39.520
<v Speaker 2>by some of the largest companies on the

01:23:39.520 --> 01:23:42.080
<v Speaker 2>planet? Yes. So it's probably

01:23:42.960 --> 01:23:45.040
<v Speaker 2>good enough for a lot of use cases

01:23:45.040 --> 01:23:46.240
<v Speaker 2>that you would consider it for,

01:23:47.655 --> 01:23:50.934
<v Speaker 2>but I would say there's

01:23:50.934 --> 01:23:52.934
<v Speaker 2>always kind of work in progress around kind

01:23:52.934 --> 01:23:55.175
<v Speaker 2>of developer experience and making sure these things

01:23:55.175 --> 01:23:55.974
<v Speaker 2>operate

01:23:56.054 --> 01:23:56.774
<v Speaker 2>how

01:23:57.175 --> 01:23:58.855
<v Speaker 2>humans want them to operate.

01:23:59.350 --> 01:24:01.430
<v Speaker 2>So a lot of other kind of authorization

01:24:01.430 --> 01:24:04.150
<v Speaker 2>solutions are focused on solving kind of authorization

01:24:04.150 --> 01:24:07.030
<v Speaker 2>for like one app, but SpiceDB is kind

01:24:07.030 --> 01:24:07.909
<v Speaker 2>of a

01:24:08.310 --> 01:24:09.190
<v Speaker 2>solution

01:24:09.190 --> 01:24:11.750
<v Speaker 2>that's kind of targeting your platform team running

01:24:11.750 --> 01:24:14.885
<v Speaker 2>this across a product portfolio or across your

01:24:14.885 --> 01:24:15.764
<v Speaker 2>whole business.

01:24:16.164 --> 01:24:18.405
<v Speaker 2>So to that end, that means we're actually

01:24:18.405 --> 01:24:20.405
<v Speaker 2>integrating with a lot of different teams. There's

01:24:20.405 --> 01:24:22.965
<v Speaker 2>like often a platform team operating SpiceDB at

01:24:22.965 --> 01:24:25.925
<v Speaker 2>their business and then there's app developers integrating

01:24:25.925 --> 01:24:27.604
<v Speaker 2>their products with SpiceDB.

01:24:27.684 --> 01:24:27.925
<v Speaker 2>And

01:24:28.860 --> 01:24:30.619
<v Speaker 2>we kind of have to make all these

01:24:30.619 --> 01:24:34.300
<v Speaker 2>folks have better experience user experience and

01:24:35.179 --> 01:24:37.659
<v Speaker 2>and an experience that they can kind of

01:24:37.659 --> 01:24:39.179
<v Speaker 2>collaborate with each other.

01:24:39.580 --> 01:24:40.540
<v Speaker 2>So a lot of,

01:24:40.940 --> 01:24:43.534
<v Speaker 2>the focus in the open source more recently

01:24:43.534 --> 01:24:45.295
<v Speaker 2>has been around taking

01:24:45.375 --> 01:24:47.295
<v Speaker 2>schema snippets like,

01:24:47.695 --> 01:24:49.295
<v Speaker 2>what we were just kind of working on

01:24:49.295 --> 01:24:50.895
<v Speaker 2>and being able to package those up and

01:24:50.895 --> 01:24:51.775
<v Speaker 2>share them.

01:24:52.175 --> 01:24:54.014
<v Speaker 2>And that way, if you had a really

01:24:54.014 --> 01:24:55.775
<v Speaker 2>big deployment and you wanted to kind of

01:24:55.775 --> 01:24:58.270
<v Speaker 2>like break down your schema and have this

01:24:58.270 --> 01:25:00.750
<v Speaker 2>team own this portion of the schema,

01:25:01.150 --> 01:25:03.550
<v Speaker 2>and write tests for that and understand that.

01:25:03.550 --> 01:25:05.470
<v Speaker 2>And then this other team owns this portion

01:25:05.470 --> 01:25:08.030
<v Speaker 2>of the schema. And then when you apply

01:25:08.030 --> 01:25:10.750
<v Speaker 2>that to SpiceDB finally, like it combines them

01:25:10.750 --> 01:25:13.115
<v Speaker 2>all together, runs all the tests, make sure

01:25:13.115 --> 01:25:14.795
<v Speaker 2>that there's, like, a comprehensive,

01:25:15.115 --> 01:25:15.995
<v Speaker 2>kind of,

01:25:16.635 --> 01:25:19.915
<v Speaker 2>correct schema and migration path to that new

01:25:19.915 --> 01:25:20.715
<v Speaker 2>schema.

01:25:21.755 --> 01:25:23.835
<v Speaker 2>And and I think that, like, this kind

01:25:23.835 --> 01:25:24.235
<v Speaker 2>of

01:25:24.880 --> 01:25:28.480
<v Speaker 2>workflow around kind of folks collaborating both internally,

01:25:28.560 --> 01:25:29.920
<v Speaker 2>but also externally.

01:25:30.000 --> 01:25:32.560
<v Speaker 2>So say you build a SpiceDB integration with

01:25:32.560 --> 01:25:34.640
<v Speaker 2>your open source project, it'd be cool if

01:25:34.640 --> 01:25:37.120
<v Speaker 2>you could package that integration with a schema

01:25:37.355 --> 01:25:39.755
<v Speaker 2>package as well so that anyone that wants

01:25:39.755 --> 01:25:41.755
<v Speaker 2>to use that can just, like, import this

01:25:41.755 --> 01:25:44.155
<v Speaker 2>part of the schema into their schema, and

01:25:44.155 --> 01:25:45.594
<v Speaker 2>now they can run this other kind of

01:25:45.594 --> 01:25:47.915
<v Speaker 2>integration tool and get it all for free

01:25:47.915 --> 01:25:49.114
<v Speaker 2>inside of their,

01:25:49.435 --> 01:25:51.195
<v Speaker 2>inside their SpiceDB deployment.

01:25:51.500 --> 01:25:53.900
<v Speaker 2>So we're kind of playing with, a lot

01:25:53.900 --> 01:25:56.060
<v Speaker 2>of that, like the packaging space right now

01:25:56.060 --> 01:25:57.820
<v Speaker 2>to see if we can enable, like, a

01:25:57.820 --> 01:25:59.900
<v Speaker 2>really nice, integration story

01:26:00.060 --> 01:26:03.420
<v Speaker 2>both internally across teams, but externally across software

01:26:03.420 --> 01:26:03.820
<v Speaker 2>projects.

01:26:04.825 --> 01:26:07.385
<v Speaker 2>And all that's open source and, folks can

01:26:07.385 --> 01:26:09.785
<v Speaker 2>play with play with it today. Right now,

01:26:09.785 --> 01:26:11.465
<v Speaker 2>it's built into Zed, but in the future,

01:26:11.465 --> 01:26:13.625
<v Speaker 2>we're looking to build it directly into SpiceDB.

01:26:13.865 --> 01:26:15.545
<v Speaker 2>So there's an issue on Zed where,

01:26:16.025 --> 01:26:17.945
<v Speaker 2>kind of documents the whole thing that folks

01:26:17.945 --> 01:26:19.550
<v Speaker 2>can use to get started with. And then

01:26:19.550 --> 01:26:21.150
<v Speaker 2>there's just flags built into zed to start

01:26:21.150 --> 01:26:22.189
<v Speaker 2>playing with it today.

01:26:23.630 --> 01:26:25.230
<v Speaker 1>Yeah. That would be a really awesome feature

01:26:25.230 --> 01:26:27.869
<v Speaker 1>because most people's domains are not novel. Right?

01:26:27.869 --> 01:26:29.630
<v Speaker 1>We're all solving the same problem to some

01:26:29.630 --> 01:26:32.750
<v Speaker 1>degree. So why not reissue reuse and reshare

01:26:32.750 --> 01:26:34.995
<v Speaker 1>some of this logic? I love that. That's

01:26:34.995 --> 01:26:35.795
<v Speaker 1>a great idea.

01:26:36.755 --> 01:26:39.795
<v Speaker 1>Alright. Any last words before we say goodbye?

01:26:41.875 --> 01:26:44.994
<v Speaker 2>Don't build your own authorization. That's not that

01:26:45.074 --> 01:26:46.594
<v Speaker 2>is like my number one thing. I end

01:26:46.594 --> 01:26:48.690
<v Speaker 2>all my talks, like any kind of public

01:26:48.690 --> 01:26:49.490
<v Speaker 2>engagements

01:26:49.490 --> 01:26:52.050
<v Speaker 2>with that. And like SpiceDB,

01:26:52.050 --> 01:26:53.570
<v Speaker 2>it's a really cool system.

01:26:53.810 --> 01:26:55.730
<v Speaker 2>Obviously, think it's cool because I built it,

01:26:55.730 --> 01:26:57.730
<v Speaker 2>but maybe it's not the right solution for

01:26:57.730 --> 01:26:59.010
<v Speaker 2>where you are as a business.

01:27:00.075 --> 01:27:02.315
<v Speaker 2>But if there is one lesson I've learned

01:27:02.315 --> 01:27:05.035
<v Speaker 2>throughout this whole thing, diving into the authorization

01:27:05.035 --> 01:27:07.114
<v Speaker 2>space when my background kind of wasn't that

01:27:07.114 --> 01:27:09.114
<v Speaker 2>before as pure distributed systems,

01:27:10.315 --> 01:27:12.315
<v Speaker 2>it's just that folks should not be building

01:27:12.315 --> 01:27:12.955
<v Speaker 2>it themselves.

01:27:13.540 --> 01:27:14.739
<v Speaker 2>Folks today,

01:27:15.540 --> 01:27:18.980
<v Speaker 2>they wouldn't dream of building a custom database

01:27:18.980 --> 01:27:21.060
<v Speaker 2>for every single kind of SaaS app that

01:27:21.060 --> 01:27:23.540
<v Speaker 2>they build. They know that they shouldn't be

01:27:23.540 --> 01:27:24.900
<v Speaker 2>building their own database,

01:27:25.139 --> 01:27:27.695
<v Speaker 2>but there's just as much research and authorization.

01:27:27.695 --> 01:27:29.615
<v Speaker 2>All that research started around the same time

01:27:29.615 --> 01:27:31.135
<v Speaker 2>as database research,

01:27:31.135 --> 01:27:32.655
<v Speaker 2>but folks still think they can go out

01:27:32.655 --> 01:27:35.055
<v Speaker 2>and, like, build a custom authorization model that's

01:27:35.055 --> 01:27:36.815
<v Speaker 2>gonna solve the problem for themselves,

01:27:37.375 --> 01:27:40.335
<v Speaker 2>with no, like, experience or backing or research

01:27:40.335 --> 01:27:40.895
<v Speaker 2>whatsoever.

01:27:41.320 --> 01:27:43.000
<v Speaker 2>So I just think that's, like, a huge

01:27:43.000 --> 01:27:45.240
<v Speaker 2>gap right now in the industry that, like,

01:27:45.240 --> 01:27:47.080
<v Speaker 2>this mindset needs to change.

01:27:47.320 --> 01:27:49.800
<v Speaker 2>Folks need to realize that they should be

01:27:49.800 --> 01:27:52.200
<v Speaker 2>kind of using foundational tools to help them

01:27:52.200 --> 01:27:54.360
<v Speaker 2>model this stuff. Whether that tool is placed

01:27:54.360 --> 01:27:55.885
<v Speaker 2>to be or not, that remains to be

01:27:55.885 --> 01:27:57.324
<v Speaker 2>said. That's your decision,

01:27:57.645 --> 01:27:59.005
<v Speaker 2>but you should go out and look at

01:27:59.005 --> 01:28:01.485
<v Speaker 2>SpiceDB and maybe look at other alternatives

01:28:01.645 --> 01:28:04.445
<v Speaker 2>so that you don't kind of build yourself

01:28:04.445 --> 01:28:06.204
<v Speaker 2>into a corner

01:28:06.605 --> 01:28:08.844
<v Speaker 2>with your own kind of custom logic code

01:28:08.844 --> 01:28:10.685
<v Speaker 2>that no one else can help you with

01:28:10.410 --> 01:28:12.489
<v Speaker 2>because you invented that. So

01:28:14.410 --> 01:28:17.130
<v Speaker 1>Awesome. Alright. Again, I really appreciate your time.

01:28:17.130 --> 01:28:18.410
<v Speaker 1>Thank you so much for joining me. I

01:28:18.410 --> 01:28:20.570
<v Speaker 1>hope you have a wonderful morning,

01:28:20.570 --> 01:28:22.570
<v Speaker 1>evening, lunch, whatever it is where you are,

01:28:22.570 --> 01:28:24.010
<v Speaker 1>and I'll speak to you again soon. And

01:28:24.010 --> 01:28:26.010
<v Speaker 1>to everyone watching, have a great day. Thank

01:28:26.010 --> 01:28:26.250
<v Speaker 1>you.
