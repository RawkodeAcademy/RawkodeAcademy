WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e889e671-4056-4f60-9c5d-d7e78163c129
Created: 2025-04-29T13:22:24.134Z
Duration: 3570.957
Channels: 1

00:02:48.040 --> 00:02:48.920
<v Speaker 0>Hello,

00:02:48.920 --> 00:02:51.560
<v Speaker 0>and welcome back to the Rawkode Academy. I'm

00:02:51.560 --> 00:02:53.239
<v Speaker 0>your host, David Flanagan.

00:02:53.239 --> 00:02:54.840
<v Speaker 0>Although you could find me across the Internet

00:02:54.840 --> 00:02:56.040
<v Speaker 0>as Rawkode.

00:02:56.359 --> 00:02:58.280
<v Speaker 0>Today, we're back for a new episode of

00:02:58.280 --> 00:03:00.115
<v Speaker 0>Rawkode live where we take a look at

00:03:00.115 --> 00:03:02.835
<v Speaker 0>the local development environment experience or at least

00:03:02.835 --> 00:03:05.155
<v Speaker 0>develop it locally against a Kubernetes cluster for

00:03:05.155 --> 00:03:07.475
<v Speaker 0>all of your Kubernetes cloud native software development

00:03:07.475 --> 00:03:10.515
<v Speaker 0>needs. That is a perpetually difficult problem to

00:03:10.515 --> 00:03:12.275
<v Speaker 0>solve. And today, we're taking a look at

00:03:12.275 --> 00:03:14.995
<v Speaker 0>a new ish solution called Mutter d.

00:03:15.800 --> 00:03:17.560
<v Speaker 0>To guide us on our journey to explore

00:03:17.560 --> 00:03:19.160
<v Speaker 0>this technology, we have

00:03:20.760 --> 00:03:24.040
<v Speaker 0>Avaram and I'll from the MetalBear Cool team.

00:03:24.040 --> 00:03:25.480
<v Speaker 0>Hi there. How are you doing?

00:03:26.600 --> 00:03:27.480
<v Speaker 1>Great.

00:03:27.800 --> 00:03:29.880
<v Speaker 0>Is it MetalBear Cool or just MetalBear? I

00:03:29.880 --> 00:03:31.160
<v Speaker 0>never know whether to call you by, like,

00:03:31.215 --> 00:03:33.455
<v Speaker 0>the Twitter handle or like where your company

00:03:33.455 --> 00:03:34.015
<v Speaker 0>name.

00:03:34.815 --> 00:03:36.415
<v Speaker 1>Metal bear was taken.

00:03:36.415 --> 00:03:36.895
<v Speaker 1>So

00:03:37.775 --> 00:03:39.614
<v Speaker 1>we had a A lot of people, a

00:03:39.614 --> 00:03:41.855
<v Speaker 2>lot of different people. So good stuff.

00:03:42.334 --> 00:03:45.610
<v Speaker 0>Nice. Well, before we dive into kinda what

00:03:45.610 --> 00:03:48.010
<v Speaker 0>matter is, can you both just take a

00:03:48.010 --> 00:03:49.930
<v Speaker 0>moment to introduce yourself, share a little bit

00:03:49.930 --> 00:03:51.690
<v Speaker 0>more about you, and then we'll kick things

00:03:51.690 --> 00:03:53.610
<v Speaker 0>off. Let's start with you in the middle,

00:03:53.610 --> 00:03:54.250
<v Speaker 0>Aviram.

00:03:55.290 --> 00:03:57.784
<v Speaker 1>Hi, everyone. I'm Aviram. I'm a middle of

00:03:57.784 --> 00:03:59.065
<v Speaker 3>the CEO and

00:03:59.305 --> 00:04:00.345
<v Speaker 3>maintainer.

00:04:01.144 --> 00:04:02.185
<v Speaker 3>My experience

00:04:02.185 --> 00:04:04.665
<v Speaker 3>is mostly security level,

00:04:05.065 --> 00:04:08.025
<v Speaker 3>but less experience was back in engineer. I

00:04:09.065 --> 00:04:10.504
<v Speaker 3>met in

00:04:11.150 --> 00:04:12.270
<v Speaker 3>last company

00:04:12.590 --> 00:04:14.430
<v Speaker 3>and where we faced a lot of issues

00:04:14.430 --> 00:04:16.510
<v Speaker 3>together in the back end side. And

00:04:16.990 --> 00:04:19.390
<v Speaker 3>that's what led us to build mirrord and

00:04:19.390 --> 00:04:19.870
<v Speaker 3>start.

00:04:23.565 --> 00:04:26.445
<v Speaker 2>Yeah. And and I'm. I'm a director

00:04:27.005 --> 00:04:28.285
<v Speaker 2>and CTO.

00:04:28.925 --> 00:04:30.764
<v Speaker 2>I'm I live in Tel Aviv. I have

00:04:30.764 --> 00:04:33.324
<v Speaker 2>a technical background that I won't bore you

00:04:33.324 --> 00:04:33.885
<v Speaker 2>with.

00:04:34.285 --> 00:04:36.044
<v Speaker 2>My dog here, but my feet is very

00:04:36.044 --> 00:04:36.845
<v Speaker 2>uneducated,

00:04:36.845 --> 00:04:39.550
<v Speaker 2>so please excuse any sharp yips.

00:04:40.350 --> 00:04:42.030
<v Speaker 2>And happy to be here.

00:04:43.949 --> 00:04:46.110
<v Speaker 0>Alright. Thank you both for joining us.

00:04:47.150 --> 00:04:48.350
<v Speaker 0>Alright. So

00:04:49.229 --> 00:04:50.669
<v Speaker 0>we've gotten a few hellos in the chat

00:04:50.669 --> 00:04:52.110
<v Speaker 0>and a comment about the audio. I'll look

00:04:52.110 --> 00:04:53.870
<v Speaker 0>into that in a second. Don't worry. And

00:04:53.870 --> 00:04:55.175
<v Speaker 0>we'll get it fixed in a moment.

00:04:55.655 --> 00:04:57.735
<v Speaker 0>Maybe we can start off then

00:04:58.055 --> 00:04:59.335
<v Speaker 0>by understanding

00:04:59.895 --> 00:05:02.854
<v Speaker 0>what mirrord is and the problem that is

00:05:02.854 --> 00:05:04.935
<v Speaker 0>trying to solve. Now I said this at

00:05:04.935 --> 00:05:07.129
<v Speaker 0>the start. Right? And I feel that this

00:05:07.129 --> 00:05:09.129
<v Speaker 0>is just one something that's always been difficult

00:05:09.129 --> 00:05:10.090
<v Speaker 0>in Kubernetes.

00:05:10.250 --> 00:05:11.770
<v Speaker 0>And I'm hoping what we're gonna look at

00:05:11.770 --> 00:05:13.449
<v Speaker 0>today, you're just gonna give me like the

00:05:13.449 --> 00:05:16.009
<v Speaker 0>golden path, the shining light that just makes

00:05:16.009 --> 00:05:17.930
<v Speaker 0>all of this easier. So let's

00:05:18.090 --> 00:05:20.569
<v Speaker 0>cover what is mother d and the problem

00:05:20.569 --> 00:05:21.210
<v Speaker 0>that addresses.

00:05:22.765 --> 00:05:23.885
<v Speaker 1>Yeah. So

00:05:25.085 --> 00:05:27.885
<v Speaker 3>in the easiest way to describe mirrordea is

00:05:27.885 --> 00:05:31.085
<v Speaker 3>the way to execute your local process service

00:05:31.725 --> 00:05:33.645
<v Speaker 3>in the cost context of the cloud environment.

00:05:33.645 --> 00:05:35.885
<v Speaker 3>And what it means is that mirrordea

00:05:36.740 --> 00:05:38.900
<v Speaker 3>plugs into your ID as an

00:05:39.620 --> 00:05:41.380
<v Speaker 3>a plug in that you can just enable,

00:05:41.380 --> 00:05:43.780
<v Speaker 3>disable, or comes a CLI, which you can

00:05:43.780 --> 00:05:45.540
<v Speaker 1>use to execute your services.

00:05:45.699 --> 00:05:47.860
<v Speaker 3>And once you enable mirrordea or execute the

00:05:47.860 --> 00:05:50.745
<v Speaker 3>process with mirrordea, what it does, it brings

00:05:50.745 --> 00:05:53.625
<v Speaker 3>you the environment level of your remote service.

00:05:53.785 --> 00:05:54.425
<v Speaker 3>It

00:05:55.065 --> 00:05:57.225
<v Speaker 3>lets you access the remote files without doing

00:05:57.225 --> 00:06:00.505
<v Speaker 3>any mounts, without copying, doing any changes of

00:06:00.505 --> 00:06:02.185
<v Speaker 3>your local machine. Everything is done in the

00:06:02.185 --> 00:06:02.745
<v Speaker 3>process level.

00:06:03.470 --> 00:06:05.950
<v Speaker 3>It lets you access the remote services.

00:06:06.590 --> 00:06:08.510
<v Speaker 3>So anything you have on the remote cluster

00:06:08.510 --> 00:06:10.990
<v Speaker 3>that is accessible to it, Kafka, Redis, any

00:06:10.990 --> 00:06:13.150
<v Speaker 3>any any network resource is available also to

00:06:13.150 --> 00:06:14.750
<v Speaker 3>you, including DNS.

00:06:15.324 --> 00:06:15.885
<v Speaker 3>And

00:06:16.604 --> 00:06:18.125
<v Speaker 3>for the fourth thing that it does, it

00:06:18.125 --> 00:06:21.485
<v Speaker 3>lets you get incoming traffic of the service.

00:06:21.565 --> 00:06:23.565
<v Speaker 1>So that comes in three modes. The first

00:06:23.565 --> 00:06:24.444
<v Speaker 1>one is enabling

00:06:24.685 --> 00:06:25.725
<v Speaker 1>so yeah. Yeah.

00:06:26.685 --> 00:06:28.764
<v Speaker 1>You asked me to say? Okay.

00:06:29.820 --> 00:06:31.420
<v Speaker 3>So and and

00:06:31.980 --> 00:06:35.580
<v Speaker 3>three modes of the incoming traffic is, a

00:06:35.580 --> 00:06:37.980
<v Speaker 3>a you can either mirror the incoming streams.

00:06:37.980 --> 00:06:39.900
<v Speaker 3>So any streaming coming to your remote service

00:06:39.900 --> 00:06:42.380
<v Speaker 3>is also duplicated to your local service, hence,

00:06:42.380 --> 00:06:42.700
<v Speaker 1>mirrord. Secondly,

00:06:44.675 --> 00:06:46.915
<v Speaker 3>you can steal traffic

00:06:47.875 --> 00:06:50.115
<v Speaker 3>of a specific port to your local to

00:06:50.115 --> 00:06:52.995
<v Speaker 3>your local service. Or the third option is

00:06:52.995 --> 00:06:55.555
<v Speaker 3>that you can steal HTTP traffic based on

00:06:55.555 --> 00:06:56.595
<v Speaker 3>headers or

00:06:57.270 --> 00:07:00.550
<v Speaker 3>API tests and HTTP filters in general.

00:07:01.190 --> 00:07:03.350
<v Speaker 1>And that's like the gist in a few

00:07:03.350 --> 00:07:04.070
<v Speaker 1>words.

00:07:06.230 --> 00:07:06.950
<v Speaker 0>Awesome.

00:07:07.510 --> 00:07:09.110
<v Speaker 0>Alright. I'm just gonna mute you for a

00:07:09.110 --> 00:07:10.390
<v Speaker 0>second to see if a bit of noise

00:07:10.390 --> 00:07:10.950
<v Speaker 0>goes away.

00:07:14.425 --> 00:07:15.305
<v Speaker 0>It did.

00:07:16.425 --> 00:07:18.105
<v Speaker 1>So the noise come to me?

00:07:18.345 --> 00:07:19.945
<v Speaker 0>Yeah. I think it's like

00:07:21.465 --> 00:07:23.305
<v Speaker 0>oh, I don't know. It's like when? I

00:07:23.305 --> 00:07:24.905
<v Speaker 0>don't know. It's like a weird

00:07:26.960 --> 00:07:29.360
<v Speaker 2>Is it windy where you are? Okay.

00:07:30.000 --> 00:07:30.720
<v Speaker 2>I

00:07:31.040 --> 00:07:32.320
<v Speaker 1>have air condition on.

00:07:32.480 --> 00:07:35.280
<v Speaker 1>Maybe it's better now. I'm using the camera.

00:07:35.840 --> 00:07:37.200
<v Speaker 0>Oh, yeah. Yeah. The microphone now.

00:07:37.895 --> 00:07:40.295
<v Speaker 0>Yes. That that the the AC noise has

00:07:40.295 --> 00:07:42.455
<v Speaker 0>now disappeared. That is amazing. Well done.

00:07:43.175 --> 00:07:45.895
<v Speaker 1>Well, so so I was understood. Like, I

00:07:45.895 --> 00:07:48.295
<v Speaker 1>I can repeat myself. I actually I jumped

00:07:48.295 --> 00:07:50.135
<v Speaker 1>into directly what it does instead of talking

00:07:50.135 --> 00:07:51.655
<v Speaker 1>about a problem, which is what I usually

00:07:51.655 --> 00:07:52.535
<v Speaker 1>do because I'm

00:07:53.699 --> 00:07:55.940
<v Speaker 1>Well, I think I could cover the the

00:07:55.940 --> 00:07:56.900
<v Speaker 0>problem. Like,

00:07:57.220 --> 00:07:58.980
<v Speaker 0>I have explored a lot of tools.

00:08:02.419 --> 00:08:04.500
<v Speaker 0>I've explored a lot of tools

00:08:04.819 --> 00:08:06.900
<v Speaker 0>at the Kubernetes space, you know, especially in

00:08:06.900 --> 00:08:08.604
<v Speaker 0>the development space. And a lot of them

00:08:08.604 --> 00:08:11.004
<v Speaker 0>all take the same approach to this developer

00:08:11.004 --> 00:08:12.925
<v Speaker 0>experience thing, right, which is

00:08:13.324 --> 00:08:13.884
<v Speaker 0>to

00:08:14.604 --> 00:08:16.764
<v Speaker 0>it's funny that the person that reported this

00:08:16.764 --> 00:08:18.284
<v Speaker 0>audio thing and that has now just given

00:08:18.284 --> 00:08:19.884
<v Speaker 0>us a thumbs up saying it's fixed. His

00:08:19.884 --> 00:08:21.880
<v Speaker 0>name is wind. So yeah.

00:08:22.759 --> 00:08:24.280
<v Speaker 0>Don't know why I found that funny.

00:08:25.000 --> 00:08:26.199
<v Speaker 0>But they they all take the same approach

00:08:26.199 --> 00:08:27.960
<v Speaker 0>to this problem of providing the developer experience.

00:08:27.960 --> 00:08:29.960
<v Speaker 0>Right? And that seems to be we're either

00:08:29.960 --> 00:08:33.080
<v Speaker 0>going to do some weird fail system mount

00:08:33.245 --> 00:08:35.964
<v Speaker 0>into a remote container, which we all know

00:08:35.964 --> 00:08:37.565
<v Speaker 0>is slow. Right? This is even slow in

00:08:37.565 --> 00:08:39.964
<v Speaker 0>Docker desktop for local development. Right? We can't

00:08:39.964 --> 00:08:43.164
<v Speaker 0>even build a PHP app under interpreted language

00:08:43.245 --> 00:08:44.925
<v Speaker 0>and sync the fails. That doesn't mean we

00:08:44.925 --> 00:08:46.524
<v Speaker 0>have to wait five seconds to refresh on

00:08:46.524 --> 00:08:47.790
<v Speaker 0>the web page. Right? And if we can't

00:08:47.790 --> 00:08:48.990
<v Speaker 0>do that, we can't do it over our

00:08:48.990 --> 00:08:49.550
<v Speaker 0>network.

00:08:50.190 --> 00:08:51.870
<v Speaker 0>And the other approach, which we've seen through

00:08:51.870 --> 00:08:53.950
<v Speaker 0>tools like scaffold as well, actually, let's just

00:08:53.950 --> 00:08:55.790
<v Speaker 0>build a container image locally because, you know,

00:08:55.790 --> 00:08:57.390
<v Speaker 0>that should be faster. But then we have

00:08:57.390 --> 00:08:59.950
<v Speaker 0>to sync the missing layers for that container

00:08:59.950 --> 00:09:01.390
<v Speaker 0>image to the remote cluster and get it

00:09:01.390 --> 00:09:03.785
<v Speaker 0>in some way. Like, they all make this

00:09:03.785 --> 00:09:06.025
<v Speaker 0>a very failed system centric problem.

00:09:06.585 --> 00:09:08.345
<v Speaker 0>And what I like about matter d is

00:09:08.345 --> 00:09:09.545
<v Speaker 0>that there's no

00:09:09.545 --> 00:09:12.105
<v Speaker 0>fail system problem. You've made a a networking

00:09:12.105 --> 00:09:15.240
<v Speaker 0>problem and you tackle this by doing magic

00:09:15.240 --> 00:09:16.680
<v Speaker 0>as far as I'm concerned with the way

00:09:16.680 --> 00:09:18.360
<v Speaker 0>that the packets are sent between the cluster

00:09:18.360 --> 00:09:20.200
<v Speaker 0>back to the user thing in a way

00:09:20.200 --> 00:09:21.240
<v Speaker 0>that gives them

00:09:21.720 --> 00:09:24.120
<v Speaker 0>not just a remote developer experience, but an

00:09:24.120 --> 00:09:26.440
<v Speaker 0>integrated developer experience where it allows them to

00:09:26.440 --> 00:09:27.480
<v Speaker 0>communicate and consume

00:09:28.045 --> 00:09:30.205
<v Speaker 0>work with cluster services and all of that.

00:09:30.925 --> 00:09:33.405
<v Speaker 0>I know my knowledge here is very fuzzy,

00:09:33.405 --> 00:09:34.845
<v Speaker 0>so I'm gonna need you to to jump

00:09:34.845 --> 00:09:36.525
<v Speaker 0>in and talk a bit more about why

00:09:36.525 --> 00:09:38.125
<v Speaker 0>you plan to own this approach and how

00:09:38.125 --> 00:09:40.445
<v Speaker 0>this actually works from the the magic in

00:09:40.445 --> 00:09:41.405
<v Speaker 0>network inside of things.

00:09:42.410 --> 00:09:43.130
<v Speaker 1>Yeah.

00:09:43.450 --> 00:09:43.850
<v Speaker 1>So

00:09:44.570 --> 00:09:48.010
<v Speaker 1>I think it it's it starts from the

00:09:48.490 --> 00:09:50.010
<v Speaker 1>experience that me and the other in the

00:09:50.010 --> 00:09:50.810
<v Speaker 1>last company,

00:09:50.970 --> 00:09:53.850
<v Speaker 1>and that's where the most valuable

00:09:54.330 --> 00:09:55.050
<v Speaker 1>process

00:09:55.770 --> 00:09:58.084
<v Speaker 1>step in the process we had is deploying

00:09:58.084 --> 00:09:59.045
<v Speaker 1>to staging.

00:09:59.204 --> 00:10:00.964
<v Speaker 1>So we had, like, a vast

00:10:01.685 --> 00:10:03.445
<v Speaker 1>data for each customer.

00:10:03.845 --> 00:10:06.964
<v Speaker 1>Everything very complex, and each customer, it was

00:10:07.444 --> 00:10:08.565
<v Speaker 1>a big enterprises.

00:10:08.644 --> 00:10:11.365
<v Speaker 1>And each customer, they own features and data,

00:10:11.365 --> 00:10:13.089
<v Speaker 1>and it involved AI

00:10:13.649 --> 00:10:14.529
<v Speaker 1>and ML.

00:10:15.010 --> 00:10:16.930
<v Speaker 1>So a lot of stuff needed to be

00:10:16.930 --> 00:10:18.690
<v Speaker 1>set up just to test the most basic

00:10:18.690 --> 00:10:19.410
<v Speaker 1>things.

00:10:19.730 --> 00:10:22.449
<v Speaker 1>So when you write write it unit

00:10:22.449 --> 00:10:25.649
<v Speaker 1>tests, integration tests, it never really

00:10:26.264 --> 00:10:28.024
<v Speaker 1>covers what you would see in production, what

00:10:28.024 --> 00:10:30.185
<v Speaker 1>you'd see in real life. And that's why

00:10:30.185 --> 00:10:31.865
<v Speaker 1>staging was the most valuable

00:10:32.504 --> 00:10:34.345
<v Speaker 1>environment because we had some of the traffic

00:10:34.345 --> 00:10:37.065
<v Speaker 1>duplicated into it so we could have real

00:10:37.065 --> 00:10:40.345
<v Speaker 1>data to interact with. And what happened

00:10:40.345 --> 00:10:40.985
<v Speaker 1>is that

00:10:41.630 --> 00:10:44.910
<v Speaker 1>we set up the very, very, very cool

00:10:44.910 --> 00:10:48.110
<v Speaker 1>stage environment where we can throw all the

00:10:48.350 --> 00:10:50.110
<v Speaker 1>versions at, but then we had a queue

00:10:50.110 --> 00:10:50.590
<v Speaker 1>where

00:10:51.230 --> 00:10:53.710
<v Speaker 1>each engineer needed to see that there's no

00:10:53.710 --> 00:10:56.565
<v Speaker 1>other engineers deploying the service. And each time

00:10:56.565 --> 00:10:58.485
<v Speaker 1>the service spend there, you didn't want them

00:10:58.485 --> 00:10:59.365
<v Speaker 1>to cross

00:11:00.485 --> 00:11:01.925
<v Speaker 1>cross contaminate

00:11:01.925 --> 00:11:04.325
<v Speaker 1>each other. And then you had the issue

00:11:04.325 --> 00:11:05.685
<v Speaker 1>of that, okay. You had an issue. You

00:11:05.685 --> 00:11:07.940
<v Speaker 1>need to hold for all back. So usually

00:11:07.940 --> 00:11:10.260
<v Speaker 1>happens in companies is that they just say,

00:11:10.260 --> 00:11:12.820
<v Speaker 1>okay. So staging needs to be stable.

00:11:13.060 --> 00:11:15.460
<v Speaker 1>So we need to do as many tests

00:11:15.540 --> 00:11:18.180
<v Speaker 1>as possible. So they do TDD. There are

00:11:18.180 --> 00:11:19.780
<v Speaker 1>tons of tests, and then they hit production

00:11:19.780 --> 00:11:22.205
<v Speaker 1>and still it doesn't work. Why? Because Azure

00:11:22.685 --> 00:11:25.085
<v Speaker 1>doesn't deploy the API version you expected. And

00:11:25.085 --> 00:11:26.845
<v Speaker 1>that's that's really sorry. Like, I had a

00:11:26.845 --> 00:11:28.045
<v Speaker 1>bug with Azure

00:11:28.285 --> 00:11:30.685
<v Speaker 1>Azure Blob Storage. It was a

00:11:30.925 --> 00:11:33.565
<v Speaker 1>specific version in our region wasn't deployed yet,

00:11:33.565 --> 00:11:35.165
<v Speaker 1>but the SDK had it. And so so

00:11:35.165 --> 00:11:37.460
<v Speaker 1>it worked locally because I used region, but

00:11:37.460 --> 00:11:38.900
<v Speaker 1>then when I plugged it to real environment,

00:11:38.900 --> 00:11:40.820
<v Speaker 1>it didn't work and it broke. Of course,

00:11:40.820 --> 00:11:43.300
<v Speaker 1>that's an issue also from the vendor side.

00:11:43.620 --> 00:11:45.940
<v Speaker 1>But, I mean, those those kind of mistakes

00:11:45.940 --> 00:11:46.660
<v Speaker 1>happen.

00:11:46.820 --> 00:11:47.460
<v Speaker 1>And what

00:11:47.940 --> 00:11:49.780
<v Speaker 1>and that led us to realize that we

00:11:49.780 --> 00:11:52.020
<v Speaker 1>want to enable developers

00:11:51.375 --> 00:11:54.975
<v Speaker 1>and engineers use staging as their development environment.

00:11:55.375 --> 00:11:56.015
<v Speaker 1>And

00:11:56.335 --> 00:11:58.975
<v Speaker 1>we started by just letting them get plugged

00:11:58.975 --> 00:12:00.735
<v Speaker 1>into staging so they can walk

00:12:02.015 --> 00:12:02.975
<v Speaker 1>continuously

00:12:02.975 --> 00:12:05.529
<v Speaker 1>against it. And as we develop more features,

00:12:05.529 --> 00:12:08.490
<v Speaker 1>we enable better concurrency walk in the staging

00:12:08.490 --> 00:12:12.410
<v Speaker 1>without breaking shutter. So that's, like, the general

00:12:12.410 --> 00:12:13.930
<v Speaker 1>flow of mind we had.

00:12:15.930 --> 00:12:16.250
<v Speaker 0>Okay.

00:12:20.015 --> 00:12:20.255
<v Speaker 0>What

00:12:21.055 --> 00:12:23.295
<v Speaker 0>like, this is one of these weird subjects.

00:12:23.295 --> 00:12:24.175
<v Speaker 0>Right? Like,

00:12:24.735 --> 00:12:26.575
<v Speaker 0>would you just let it feels to me

00:12:26.575 --> 00:12:28.175
<v Speaker 0>I could let people test and prod with

00:12:28.175 --> 00:12:29.935
<v Speaker 0>this tool. Right? And

00:12:30.255 --> 00:12:31.055
<v Speaker 0>at what point,

00:12:31.860 --> 00:12:33.940
<v Speaker 0>like, is that a sign of maturity of

00:12:33.940 --> 00:12:35.540
<v Speaker 0>your infrastructure if you could do this in

00:12:35.540 --> 00:12:36.980
<v Speaker 0>prod, or would you just always say always

00:12:36.980 --> 00:12:39.620
<v Speaker 0>do the staging? I I don't know. Like,

00:12:39.779 --> 00:12:41.300
<v Speaker 0>staging to me always just feels like an

00:12:41.460 --> 00:12:42.180
<v Speaker 2>a

00:12:42.740 --> 00:12:44.755
<v Speaker 0>Yeah. I think question because, you know, that's

00:12:44.755 --> 00:12:46.435
<v Speaker 2>that's sort of where we started. You know?

00:12:46.435 --> 00:12:47.714
<v Speaker 2>Or things like, why not do it in

00:12:47.714 --> 00:12:48.355
<v Speaker 2>prod?

00:12:48.515 --> 00:12:50.595
<v Speaker 2>Which it became very clear

00:12:51.875 --> 00:12:54.195
<v Speaker 2>very, very early that no one's gonna run

00:12:54.195 --> 00:12:56.834
<v Speaker 2>it in prod anytime soon. Like, you need

00:12:56.834 --> 00:12:57.955
<v Speaker 2>an established

00:12:58.889 --> 00:13:00.170
<v Speaker 2>product, and and

00:13:00.649 --> 00:13:03.050
<v Speaker 2>it's sort of a spectrum. You you got

00:13:03.050 --> 00:13:05.050
<v Speaker 2>prod, which is, of course, the best

00:13:05.769 --> 00:13:08.250
<v Speaker 2>replication of production. But then you've got staging,

00:13:08.250 --> 00:13:10.010
<v Speaker 2>which is, on one hand,

00:13:10.410 --> 00:13:13.394
<v Speaker 2>a good replication, but you're not as scared

00:13:13.394 --> 00:13:16.195
<v Speaker 2>of scared of trying tools on it, breaking

00:13:16.195 --> 00:13:18.595
<v Speaker 2>it, etcetera. And so, you know, that's where

00:13:18.595 --> 00:13:19.394
<v Speaker 2>we landed

00:13:19.795 --> 00:13:23.154
<v Speaker 2>for the initial stage. We are seeing a,

00:13:23.154 --> 00:13:23.875
<v Speaker 2>you know,

00:13:24.995 --> 00:13:28.450
<v Speaker 2>some organizations that are less afraid

00:13:28.770 --> 00:13:32.210
<v Speaker 2>of deploying things on production and so are

00:13:32.210 --> 00:13:35.810
<v Speaker 2>trying to to do it without our encouragement.

00:13:36.930 --> 00:13:37.570
<v Speaker 2>And,

00:13:39.010 --> 00:13:40.690
<v Speaker 2>yeah, and and we we are thinking of

00:13:40.690 --> 00:13:41.570
<v Speaker 2>it as a possible

00:13:42.265 --> 00:13:43.785
<v Speaker 2>future for mirrordies,

00:13:44.105 --> 00:13:45.705
<v Speaker 2>but we think that there is enough, you

00:13:45.705 --> 00:13:47.305
<v Speaker 2>know, meet in the staging for,

00:13:47.705 --> 00:13:49.625
<v Speaker 2>you know, for for the time being.

00:13:49.945 --> 00:13:51.385
<v Speaker 0>Yeah. I mean, I I don't wanna turn

00:13:51.385 --> 00:13:53.545
<v Speaker 0>in the listen to a political discussion about,

00:13:53.545 --> 00:13:55.145
<v Speaker 0>you know, testing and prod or whatnot.

00:13:56.170 --> 00:13:58.410
<v Speaker 0>But I've I've yet to see a good

00:13:58.410 --> 00:14:01.050
<v Speaker 0>staging environment that actually has,

00:14:01.530 --> 00:14:03.530
<v Speaker 0>you know, they're always very good from an

00:14:03.530 --> 00:14:05.610
<v Speaker 0>automation point of view and your production environment

00:14:05.610 --> 00:14:07.370
<v Speaker 0>really does look like a staging environment. And

00:14:07.370 --> 00:14:08.570
<v Speaker 0>this is just the people that I've seen.

00:14:08.570 --> 00:14:10.090
<v Speaker 0>I'm not saying this is all super nice

00:14:10.090 --> 00:14:12.095
<v Speaker 0>clusters in the world. But the path that

00:14:12.095 --> 00:14:13.855
<v Speaker 0>always falls down is when it comes to

00:14:13.855 --> 00:14:17.615
<v Speaker 0>data, the actual usage patterns within that cluster.

00:14:17.695 --> 00:14:19.375
<v Speaker 0>Now I have seen people that just take

00:14:19.375 --> 00:14:21.615
<v Speaker 0>a seven day old snapshot of production and

00:14:21.615 --> 00:14:22.894
<v Speaker 0>put it in station, and I think that's

00:14:22.894 --> 00:14:25.295
<v Speaker 0>a terrible idea as well. But

00:14:25.600 --> 00:14:27.920
<v Speaker 0>again, not not a topic of today's discussion.

00:14:27.920 --> 00:14:29.920
<v Speaker 0>But I do love that we could use

00:14:29.920 --> 00:14:31.920
<v Speaker 0>the traffic cloning

00:14:31.920 --> 00:14:34.000
<v Speaker 0>stuff within mirrord to inject

00:14:34.000 --> 00:14:37.120
<v Speaker 0>something into production, get real data without the

00:14:37.600 --> 00:14:40.400
<v Speaker 0>blast radius of that interception being

00:14:40.565 --> 00:14:41.285
<v Speaker 0>real

00:14:41.445 --> 00:14:42.165
<v Speaker 0>data.

00:14:42.725 --> 00:14:43.925
<v Speaker 0>We can get into that as we cover

00:14:43.925 --> 00:14:45.125
<v Speaker 0>the usage and take look at it in

00:14:45.125 --> 00:14:46.485
<v Speaker 0>more in more detail. I I I wanted

00:14:46.485 --> 00:14:48.404
<v Speaker 1>to add that in the first version of

00:14:48.404 --> 00:14:50.325
<v Speaker 1>PRD, where it is, it was just a

00:14:50.325 --> 00:14:51.845
<v Speaker 1>v s code extension very

00:14:52.084 --> 00:14:52.644
<v Speaker 1>early,

00:14:52.890 --> 00:14:55.450
<v Speaker 1>like, barely it was a barely walking MVP

00:14:55.450 --> 00:14:56.810
<v Speaker 1>that we just wanted to see how we

00:14:56.810 --> 00:14:57.850
<v Speaker 1>will react to it.

00:14:58.570 --> 00:15:00.810
<v Speaker 1>And when we posted it to hacking news,

00:15:00.810 --> 00:15:02.490
<v Speaker 1>we did a show h n. We we

00:15:02.490 --> 00:15:04.490
<v Speaker 1>we also put it in the marketing in

00:15:04.490 --> 00:15:06.330
<v Speaker 1>all the content that we said, mirror

00:15:06.815 --> 00:15:10.095
<v Speaker 1>production data and traffic into your local machine.

00:15:10.175 --> 00:15:11.774
<v Speaker 1>And all the people in hacking news were

00:15:11.774 --> 00:15:14.175
<v Speaker 1>like, no. Don't do that. So yes. Wait.

00:15:14.175 --> 00:15:16.975
<v Speaker 1>Because I didn't really know. The immediate typical

00:15:16.975 --> 00:15:19.295
<v Speaker 1>hacking news response that, oh, no. You you've

00:15:19.295 --> 00:15:22.079
<v Speaker 1>insane. Don't don't do that. So yeah. Well,

00:15:22.079 --> 00:15:23.680
<v Speaker 0>of course, you know, the risk appetite from

00:15:23.680 --> 00:15:24.000
<v Speaker 0>organize

00:15:24.800 --> 00:15:26.959
<v Speaker 0>to organization is always very different. And, you

00:15:26.959 --> 00:15:28.079
<v Speaker 0>know, hacker news,

00:15:28.399 --> 00:15:30.079
<v Speaker 0>I I don't think they're my people. There

00:15:30.079 --> 00:15:30.800
<v Speaker 0>is. So

00:15:31.199 --> 00:15:34.565
<v Speaker 0>I I am less risk averse. So we

00:15:34.805 --> 00:15:36.645
<v Speaker 0>we have a couple of notes and a

00:15:36.645 --> 00:15:38.645
<v Speaker 0>question I think in the comments just now

00:15:38.645 --> 00:15:39.045
<v Speaker 0>from when

00:15:39.685 --> 00:15:41.605
<v Speaker 0>so let's see. When they're saying that they

00:15:41.605 --> 00:15:43.445
<v Speaker 0>have an environment for end to end testing,

00:15:43.445 --> 00:15:45.285
<v Speaker 0>would this tool help developers to work when

00:15:45.285 --> 00:15:46.165
<v Speaker 0>they run their tests?

00:15:47.080 --> 00:15:49.399
<v Speaker 0>They're looking at this from the SRE perspective

00:15:49.399 --> 00:15:51.800
<v Speaker 0>where they don't have much dev and saves.

00:15:52.520 --> 00:15:53.080
<v Speaker 0>Yeah.

00:15:54.920 --> 00:15:55.640
<v Speaker 1>Yeah.

00:15:55.800 --> 00:15:57.800
<v Speaker 1>I just dropped it to that side. So

00:15:57.800 --> 00:15:58.680
<v Speaker 1>the answer is yes.

00:15:59.475 --> 00:16:01.955
<v Speaker 1>We see people running. You can run test.

00:16:01.955 --> 00:16:03.075
<v Speaker 1>You can run anything

00:16:03.475 --> 00:16:04.835
<v Speaker 1>that you can run. And we also see

00:16:04.835 --> 00:16:05.875
<v Speaker 1>companies

00:16:05.955 --> 00:16:08.835
<v Speaker 1>integrating mirrordine to the CI. So now you

00:16:08.835 --> 00:16:11.875
<v Speaker 1>have, like imagine you have your stable cluster,

00:16:12.460 --> 00:16:14.779
<v Speaker 1>and let's say you have all the stable

00:16:14.779 --> 00:16:17.420
<v Speaker 1>version of everything. So instead of doing a

00:16:17.420 --> 00:16:20.620
<v Speaker 1>blue blue green kind of redeployment into the

00:16:20.779 --> 00:16:23.420
<v Speaker 1>real environment, you just run the CI using

00:16:23.420 --> 00:16:26.495
<v Speaker 1>mirrordeep inside the staging cluster, and then you

00:16:26.495 --> 00:16:27.214
<v Speaker 1>get

00:16:27.455 --> 00:16:28.495
<v Speaker 1>partial

00:16:28.495 --> 00:16:31.055
<v Speaker 1>traffic just for your test to test it.

00:16:31.055 --> 00:16:32.495
<v Speaker 1>And once it's done, you can deploy it

00:16:32.495 --> 00:16:34.334
<v Speaker 1>to the real environment. So that's, like, another

00:16:34.334 --> 00:16:36.735
<v Speaker 1>use case we see. That's less than our

00:16:36.735 --> 00:16:38.495
<v Speaker 1>focus right now, but, like, mirroring is a

00:16:38.495 --> 00:16:39.774
<v Speaker 1>tool, so you can do whatever you want

00:16:39.774 --> 00:16:41.615
<v Speaker 1>with it. So and we see that happening.

00:16:44.380 --> 00:16:45.100
<v Speaker 0>Cool.

00:16:46.140 --> 00:16:46.940
<v Speaker 0>Alright.

00:16:48.700 --> 00:16:51.020
<v Speaker 0>So there was a diagram that we said

00:16:51.020 --> 00:16:52.860
<v Speaker 0>we were gonna talk about how matter do

00:16:52.860 --> 00:16:54.060
<v Speaker 0>you in fact, before we even get to

00:16:54.060 --> 00:16:55.975
<v Speaker 0>that, am I pronouncing that right? I know

00:16:55.975 --> 00:16:57.655
<v Speaker 0>that's, like, the tech question that everybody always

00:16:57.655 --> 00:16:59.655
<v Speaker 0>ask, but is it mirrord? Is it mirrord?

00:16:59.655 --> 00:17:01.815
<v Speaker 0>Is it something peculiar?

00:17:02.215 --> 00:17:03.495
<v Speaker 0>How do you see it?

00:17:03.895 --> 00:17:05.895
<v Speaker 2>It is it is mirrordy.

00:17:06.900 --> 00:17:08.900
<v Speaker 2>Tragically, a lot of people do think it's

00:17:08.900 --> 00:17:10.020
<v Speaker 2>mirrord, but,

00:17:11.460 --> 00:17:13.460
<v Speaker 2>yeah, it's the it's the tech pronunciation,

00:17:13.460 --> 00:17:14.819
<v Speaker 2>building its pronunciation.

00:17:15.540 --> 00:17:17.700
<v Speaker 0>Alright. And how would you spell that

00:17:17.940 --> 00:17:19.059
<v Speaker 0>cube command?

00:17:19.300 --> 00:17:20.339
<v Speaker 0>How do you pronounce that?

00:17:22.804 --> 00:17:25.204
<v Speaker 0>The the tool that you're using here. Yeah.

00:17:25.204 --> 00:17:26.164
<v Speaker 1>You mirrord.

00:17:26.964 --> 00:17:28.725
<v Speaker 0>Oh, no. No. It's alright. I'm just I'm

00:17:28.725 --> 00:17:31.044
<v Speaker 0>now just asking how you pronounce cube CTL.

00:17:31.044 --> 00:17:33.125
<v Speaker 0>Is it cube control, cube huddle? Ah, cube

00:17:33.125 --> 00:17:34.404
<v Speaker 1>CTL. Yeah.

00:17:34.885 --> 00:17:35.445
<v Speaker 2>Cube CTL.

00:17:36.059 --> 00:17:38.619
<v Speaker 0>Alright. Cool. I'll pick you in the SQL.

00:17:38.779 --> 00:17:40.539
<v Speaker 1>That's that's

00:17:40.539 --> 00:17:42.700
<v Speaker 1>the real it it in discussion.

00:17:43.899 --> 00:17:45.259
<v Speaker 0>Oh, I don't know if I'm on board

00:17:45.259 --> 00:17:46.940
<v Speaker 0>with SQL, but, again, I don't wanna turn

00:17:46.940 --> 00:17:48.379
<v Speaker 0>this into any sort of

00:17:49.500 --> 00:17:50.380
<v Speaker 0>pronunciation war.

00:17:51.115 --> 00:17:52.394
<v Speaker 0>Okay. So

00:17:52.715 --> 00:17:54.715
<v Speaker 0>I'm gonna pull up the website, then let's

00:17:54.715 --> 00:17:55.995
<v Speaker 0>dive into a little bit more about the

00:17:55.995 --> 00:17:59.115
<v Speaker 0>technical understanding of how this all works. So

00:17:59.115 --> 00:18:00.715
<v Speaker 0>here we have the mirrordea website if you

00:18:00.715 --> 00:18:03.835
<v Speaker 0>wanna check this out. It's available at mirrordea.dev.

00:18:04.480 --> 00:18:06.880
<v Speaker 0>And if we go back to the home

00:18:06.880 --> 00:18:07.679
<v Speaker 0>page,

00:18:08.080 --> 00:18:10.080
<v Speaker 0>there's a diagram at the bottom that tries

00:18:10.080 --> 00:18:12.799
<v Speaker 0>to talk about how this works.

00:18:13.200 --> 00:18:15.600
<v Speaker 0>Do you wanna go over this either of

00:18:15.600 --> 00:18:18.000
<v Speaker 0>you and talk about the networking stuff that's

00:18:18.000 --> 00:18:19.039
<v Speaker 0>going on within the cluster?

00:18:20.695 --> 00:18:23.414
<v Speaker 2>Yeah. Let's let's really quickly go over what

00:18:23.414 --> 00:18:25.975
<v Speaker 2>mirrordea does. Right? So mirrordea has two components,

00:18:25.975 --> 00:18:28.455
<v Speaker 2>the the layer or the client and the

00:18:28.455 --> 00:18:29.254
<v Speaker 2>agent.

00:18:29.735 --> 00:18:31.735
<v Speaker 2>And what happens when you run mirrordea is

00:18:31.735 --> 00:18:34.294
<v Speaker 2>that the layer is injected into the process,

00:18:34.909 --> 00:18:36.269
<v Speaker 2>and it overrides

00:18:36.590 --> 00:18:38.109
<v Speaker 2>low level function calls.

00:18:38.270 --> 00:18:40.190
<v Speaker 2>So, you know, file reads,

00:18:40.270 --> 00:18:40.909
<v Speaker 2>traffic,

00:18:41.309 --> 00:18:42.749
<v Speaker 2>outgoing traffic, etcetera.

00:18:44.270 --> 00:18:46.749
<v Speaker 2>And then it proxies them essentially

00:18:47.309 --> 00:18:49.470
<v Speaker 2>to to the cloud through the agent.

00:18:50.014 --> 00:18:52.014
<v Speaker 2>Right? So the agent, when when you run

00:18:52.014 --> 00:18:55.534
<v Speaker 2>mirrord is is is set up then. It's

00:18:55.855 --> 00:18:58.414
<v Speaker 2>it's a temporary agent. It cleans itself up

00:18:58.414 --> 00:19:00.174
<v Speaker 2>when you finish the execution,

00:19:00.414 --> 00:19:03.375
<v Speaker 2>and it runs adjacent to the pod that

00:19:03.375 --> 00:19:04.815
<v Speaker 2>you wanna impersonate.

00:19:05.850 --> 00:19:08.810
<v Speaker 2>And so the most basic flow to illustrate

00:19:08.810 --> 00:19:10.330
<v Speaker 2>this is a file read. Right? So if

00:19:10.330 --> 00:19:12.570
<v Speaker 2>you process, you're trying to read a file

00:19:12.570 --> 00:19:13.289
<v Speaker 2>locally,

00:19:13.530 --> 00:19:16.330
<v Speaker 2>mirrord would intercept that call and then pass

00:19:16.330 --> 00:19:18.010
<v Speaker 2>that to the agent, and the agent would

00:19:18.010 --> 00:19:20.605
<v Speaker 2>read the file from the pod instead. Right?

00:19:20.605 --> 00:19:23.164
<v Speaker 2>But we do the same thing for traffic

00:19:23.164 --> 00:19:25.244
<v Speaker 2>and for environment variables,

00:19:25.325 --> 00:19:26.924
<v Speaker 2>and that's how we achieve sort of a

00:19:26.924 --> 00:19:27.804
<v Speaker 2>hermetic

00:19:28.924 --> 00:19:31.164
<v Speaker 2>wrapping of your local process to, you know,

00:19:31.164 --> 00:19:33.485
<v Speaker 2>make it think that it's running remotely even

00:19:33.485 --> 00:19:35.565
<v Speaker 2>though the code is actually running

00:19:35.730 --> 00:19:37.090
<v Speaker 2>on your local machine.

00:19:39.090 --> 00:19:42.370
<v Speaker 0>Okay. So it's just like an LD preload

00:19:42.370 --> 00:19:45.409
<v Speaker 0>syscall hijacking within the pods.

00:19:45.890 --> 00:19:46.529
<v Speaker 0>Okay.

00:19:47.330 --> 00:19:47.889
<v Speaker 0>So

00:19:48.304 --> 00:19:50.225
<v Speaker 0>mean Not within the pods.

00:19:50.625 --> 00:19:52.465
<v Speaker 1>Wait. The the the

00:19:53.505 --> 00:19:55.264
<v Speaker 1>injection happens locally.

00:19:55.585 --> 00:19:57.265
<v Speaker 1>On the remote side, we don't do we

00:19:57.265 --> 00:19:59.825
<v Speaker 1>don't touch the real process. We just enter

00:19:59.825 --> 00:20:02.510
<v Speaker 1>the Linux namespaces of it so we can

00:20:02.510 --> 00:20:03.869
<v Speaker 1>access the same resources,

00:20:03.870 --> 00:20:06.270
<v Speaker 1>but we don't touch the remote process unless

00:20:06.270 --> 00:20:07.630
<v Speaker 1>you do a pause and then we pause

00:20:07.630 --> 00:20:10.270
<v Speaker 1>the process. But it's more of a advanced

00:20:10.270 --> 00:20:10.909
<v Speaker 1>feature.

00:20:12.429 --> 00:20:13.070
<v Speaker 0>Okay.

00:20:13.710 --> 00:20:15.230
<v Speaker 0>And I guess you aren't gonna do in

00:20:15.230 --> 00:20:17.230
<v Speaker 0>fail syncing, but it's very selective based on

00:20:17.230 --> 00:20:19.925
<v Speaker 0>the read Cisco. Right? I mean Yeah. So

00:20:19.925 --> 00:20:22.085
<v Speaker 0>so so the fail, it's still I mean,

00:20:22.085 --> 00:20:23.685
<v Speaker 0>it's not syncing the whole fail system, but

00:20:23.685 --> 00:20:26.165
<v Speaker 0>you are literally transporting the base off that

00:20:26.165 --> 00:20:27.125
<v Speaker 0>fail. Right?

00:20:27.605 --> 00:20:29.525
<v Speaker 1>Yeah. But, usually, what happens is that the

00:20:29.525 --> 00:20:31.445
<v Speaker 1>file reads are usually for secrets,

00:20:31.685 --> 00:20:34.040
<v Speaker 1>mounts, like, yeah, they're not usually, they don't

00:20:34.040 --> 00:20:36.200
<v Speaker 1>really they don't really read the data unless

00:20:36.200 --> 00:20:37.320
<v Speaker 1>there's, like, maybe

00:20:37.640 --> 00:20:38.440
<v Speaker 1>some

00:20:39.320 --> 00:20:42.120
<v Speaker 1>static database. But I I don't think we

00:20:42.120 --> 00:20:44.919
<v Speaker 1>have seen that use case very often. And

00:20:44.919 --> 00:20:46.039
<v Speaker 1>and and then

00:20:46.600 --> 00:20:49.375
<v Speaker 1>another thing that's very cool is that everything

00:20:49.375 --> 00:20:52.174
<v Speaker 1>is configurable. So you can say this regex

00:20:52.255 --> 00:20:55.374
<v Speaker 1>access it locally, this regex access it remotely,

00:20:55.375 --> 00:20:57.294
<v Speaker 1>and then you can mix and match. So

00:20:57.294 --> 00:20:58.735
<v Speaker 1>if there's a big file, you can just

00:20:58.735 --> 00:21:00.895
<v Speaker 1>make it pretty locally so you wouldn't you

00:21:00.895 --> 00:21:02.975
<v Speaker 1>wouldn't wouldn't have any latency there.

00:21:05.320 --> 00:21:05.879
<v Speaker 0>Cool.

00:21:06.520 --> 00:21:09.000
<v Speaker 0>I think it's time to jump into our

00:21:09.000 --> 00:21:11.159
<v Speaker 0>live section. Actually, just to show this working

00:21:11.159 --> 00:21:12.600
<v Speaker 0>so that the audience can get a feel

00:21:12.600 --> 00:21:14.600
<v Speaker 0>for what the process looks like to actually

00:21:14.600 --> 00:21:15.799
<v Speaker 0>build and develop

00:21:16.200 --> 00:21:18.120
<v Speaker 0>using Mutter d as their tool.

00:21:18.975 --> 00:21:21.375
<v Speaker 0>So to do that, I believe Avram is

00:21:21.375 --> 00:21:23.695
<v Speaker 0>going to guide us through a demo.

00:21:25.295 --> 00:21:27.695
<v Speaker 1>Yes. Absolutely. You're happy to do that now?

00:21:28.255 --> 00:21:30.175
<v Speaker 1>Yeah. Happy to do it always. That's like

00:21:30.175 --> 00:21:31.855
<v Speaker 1>a yeah. He's always joking that I'm like,

00:21:31.770 --> 00:21:34.170
<v Speaker 1>oh, you want I'm always offering people to

00:21:34.170 --> 00:21:35.850
<v Speaker 1>see a demo, and he's like, stop offering

00:21:35.850 --> 00:21:36.730
<v Speaker 1>people demo.

00:21:37.050 --> 00:21:38.970
<v Speaker 0>Alright. Well, if you're good at we're good

00:21:40.650 --> 00:21:42.330
<v Speaker 0>we've got one more know it's appropriate.

00:21:42.490 --> 00:21:43.050
<v Speaker 1>Right, Dale?

00:21:47.005 --> 00:21:50.045
<v Speaker 1>Yeah. So just to put it in a

00:21:50.045 --> 00:21:52.684
<v Speaker 1>context, so in our demo, we set up

00:21:52.684 --> 00:21:54.684
<v Speaker 1>a very by the way, you can see

00:21:54.684 --> 00:21:56.044
<v Speaker 1>my screen. Right? Yeah.

00:21:56.285 --> 00:21:57.405
<v Speaker 0>But do you mind if I throw a

00:21:57.405 --> 00:21:58.684
<v Speaker 0>couple of questions from the chat at you

00:21:58.684 --> 00:22:00.859
<v Speaker 0>first before we dive into that? Sorry. Sure.

00:22:01.659 --> 00:22:04.139
<v Speaker 0>Alright. So we've got one back, and one

00:22:04.139 --> 00:22:07.179
<v Speaker 0>was asking, is the partial traffic just splitting

00:22:07.179 --> 00:22:09.419
<v Speaker 0>on entry to the pod or container?

00:22:10.380 --> 00:22:11.980
<v Speaker 1>Yeah. So does

00:22:12.539 --> 00:22:13.419
<v Speaker 1>that's configurable.

00:22:13.684 --> 00:22:16.965
<v Speaker 1>So the default the default configuration would be

00:22:16.965 --> 00:22:18.004
<v Speaker 1>mirroring. So

00:22:18.405 --> 00:22:21.524
<v Speaker 1>it's not splitting. It's just you got the

00:22:21.525 --> 00:22:23.924
<v Speaker 1>same stream as the remote part. But if

00:22:23.924 --> 00:22:26.005
<v Speaker 1>you are hijacking the traffic, we call it

00:22:26.005 --> 00:22:26.725
<v Speaker 1>stealing,

00:22:27.365 --> 00:22:27.924
<v Speaker 1>that would

00:22:28.405 --> 00:22:30.290
<v Speaker 1>yeah. We split it. And then based on

00:22:30.290 --> 00:22:32.290
<v Speaker 1>the filters or based on just the the

00:22:32.290 --> 00:22:34.690
<v Speaker 1>port being stolen as well, and we plan

00:22:34.690 --> 00:22:36.929
<v Speaker 1>to have more capability on on top of

00:22:36.929 --> 00:22:39.090
<v Speaker 1>it based on the requirements from the users.

00:22:40.370 --> 00:22:41.009
<v Speaker 0>Okay.

00:22:41.490 --> 00:22:44.130
<v Speaker 0>And in true Russell fashion, who's the regular

00:22:44.130 --> 00:22:46.125
<v Speaker 0>on this channel, there's always a funny comment

00:22:46.125 --> 00:22:48.365
<v Speaker 0>followed by a real question. So apparently,

00:22:48.845 --> 00:22:50.765
<v Speaker 0>SQL is pronounced squirrel.

00:22:51.005 --> 00:22:52.845
<v Speaker 0>I haven't heard that before, but, you know,

00:22:52.845 --> 00:22:53.565
<v Speaker 0>feel free.

00:22:54.285 --> 00:22:56.125
<v Speaker 0>Now the question is, does mother do you

00:22:56.125 --> 00:22:58.125
<v Speaker 0>work with multiple users at the same time?

00:22:59.420 --> 00:23:01.340
<v Speaker 0>Does it separate the hijacking

00:23:01.420 --> 00:23:03.580
<v Speaker 0>of two devs, a and b, use mother

00:23:03.580 --> 00:23:06.139
<v Speaker 0>d with dev a hat mother with dev

00:23:06.220 --> 00:23:07.899
<v Speaker 0>a hat dev b's service?

00:23:08.700 --> 00:23:09.260
<v Speaker 1>Yeah. So

00:23:12.485 --> 00:23:13.365
<v Speaker 1>so

00:23:13.925 --> 00:23:15.925
<v Speaker 1>so it depends on the exact configuration. Like,

00:23:15.925 --> 00:23:18.485
<v Speaker 1>if you do mirroring, then you both will

00:23:18.485 --> 00:23:20.325
<v Speaker 1>get a mirror probably, and that would probably

00:23:20.325 --> 00:23:21.125
<v Speaker 1>work.

00:23:21.685 --> 00:23:25.045
<v Speaker 1>But that's what we call mirrordial that's why

00:23:25.045 --> 00:23:26.885
<v Speaker 1>we build what we call mirrordial teams,

00:23:27.230 --> 00:23:29.550
<v Speaker 1>which is a control plane for mirrordial. And

00:23:29.550 --> 00:23:30.990
<v Speaker 1>what it enables you to do is really

00:23:30.990 --> 00:23:33.950
<v Speaker 1>work concurrently multiple users on the same service

00:23:33.950 --> 00:23:36.190
<v Speaker 1>exactly. So if you and I work on

00:23:36.190 --> 00:23:38.110
<v Speaker 1>the same cluster, but each of one of

00:23:38.110 --> 00:23:40.190
<v Speaker 1>us works on a different service, then we

00:23:40.190 --> 00:23:41.470
<v Speaker 1>wouldn't have conflicts.

00:23:41.550 --> 00:23:43.655
<v Speaker 1>But if we want to work on the

00:23:43.655 --> 00:23:46.615
<v Speaker 1>same service, then the mirrordial teams

00:23:46.855 --> 00:23:49.655
<v Speaker 1>enables you to have multiple sessions on the

00:23:49.655 --> 00:23:52.295
<v Speaker 1>same target at the same time by giving

00:23:52.295 --> 00:23:54.615
<v Speaker 1>you synchronization primitives and also

00:23:55.015 --> 00:23:57.415
<v Speaker 1>making sure that you don't override each other.

00:23:59.220 --> 00:24:00.340
<v Speaker 0>Alright. Awesome.

00:24:00.660 --> 00:24:03.059
<v Speaker 0>Wendy also says thank you for that answer.

00:24:03.060 --> 00:24:05.300
<v Speaker 0>So I won't interrupt you anymore. Please feel

00:24:05.300 --> 00:24:07.220
<v Speaker 0>free to carry on with your demo.

00:24:07.700 --> 00:24:09.780
<v Speaker 1>Yeah. Feel free to disrupt me. I like

00:24:09.780 --> 00:24:10.260
<v Speaker 1>disruptions.

00:24:12.325 --> 00:24:14.565
<v Speaker 1>So yeah. So and, by the way, if

00:24:14.565 --> 00:24:16.565
<v Speaker 1>if we do help to clear this up,

00:24:16.565 --> 00:24:19.205
<v Speaker 1>but this is our setup. It's it's supposed

00:24:19.205 --> 00:24:20.164
<v Speaker 1>to be quite,

00:24:20.965 --> 00:24:22.164
<v Speaker 1>like, cover

00:24:22.405 --> 00:24:25.150
<v Speaker 1>very common use cases, but be very small.

00:24:25.150 --> 00:24:26.510
<v Speaker 1>So bear with me.

00:24:27.070 --> 00:24:27.630
<v Speaker 1>So

00:24:28.190 --> 00:24:31.070
<v Speaker 1>the cloud in our case is me, the

00:24:31.070 --> 00:24:34.430
<v Speaker 1>client. I can access IP visit counter, which

00:24:34.430 --> 00:24:37.230
<v Speaker 1>implements one API called count.

00:24:37.684 --> 00:24:39.445
<v Speaker 1>And what count does, it

00:24:39.765 --> 00:24:41.284
<v Speaker 1>takes my IP

00:24:42.165 --> 00:24:43.044
<v Speaker 1>and then

00:24:43.365 --> 00:24:46.085
<v Speaker 1>calls another service called IP info that provides

00:24:46.085 --> 00:24:47.684
<v Speaker 1>information about that IP.

00:24:48.005 --> 00:24:51.365
<v Speaker 1>It saves the IP to Redis in order

00:24:50.640 --> 00:24:52.800
<v Speaker 1>to store the the amount of the the

00:24:52.800 --> 00:24:55.280
<v Speaker 1>count of how many times I've seen this

00:24:55.280 --> 00:24:57.520
<v Speaker 1>IP. And it also sends the IP to

00:24:57.520 --> 00:24:58.480
<v Speaker 1>a Kafka

00:24:59.520 --> 00:25:00.159
<v Speaker 1>topic,

00:25:00.320 --> 00:25:02.799
<v Speaker 1>which an another service

00:25:03.200 --> 00:25:04.480
<v Speaker 1>cons consumes

00:25:04.684 --> 00:25:07.965
<v Speaker 1>and just prints the messages it gets from

00:25:07.965 --> 00:25:10.124
<v Speaker 1>them. So that's the setup.

00:25:10.845 --> 00:25:13.164
<v Speaker 1>Many questions, David? Does it make sense?

00:25:14.285 --> 00:25:15.404
<v Speaker 0>Nope. Makes sense.

00:25:15.804 --> 00:25:16.365
<v Speaker 1>Awesome.

00:25:17.180 --> 00:25:19.900
<v Speaker 1>So, David, what do you prefer? IntelliJ or

00:25:19.900 --> 00:25:20.860
<v Speaker 1>Versus Code?

00:25:23.020 --> 00:25:24.940
<v Speaker 0>I have a very strict rule, and I

00:25:24.940 --> 00:25:26.940
<v Speaker 0>have no JVM installed on any of my

00:25:26.940 --> 00:25:27.500
<v Speaker 0>machines. So,

00:25:29.485 --> 00:25:31.484
<v Speaker 0>yeah, I guess, PS code wins.

00:25:32.125 --> 00:25:33.965
<v Speaker 2>I thought you weren't doing politics.

00:25:34.924 --> 00:25:37.645
<v Speaker 2>I I I mean, it's tech. Everything's politics.

00:25:37.645 --> 00:25:38.844
<v Speaker 0>Right? But I

00:25:39.404 --> 00:25:40.524
<v Speaker 0>I I mean,

00:25:40.924 --> 00:25:42.284
<v Speaker 0>no. I can't do it. I can't run

00:25:42.284 --> 00:25:43.085
<v Speaker 0>the GVM. Sorry.

00:25:44.330 --> 00:25:46.570
<v Speaker 1>Yeah. I can blame you. Yeah. So we'll

00:25:46.570 --> 00:25:49.529
<v Speaker 1>use this code for example. Let me find

00:25:50.410 --> 00:25:51.529
<v Speaker 1>my window.

00:25:51.610 --> 00:25:54.570
<v Speaker 0>We also accept NeoVem, Vem, or Helix. All

00:25:54.570 --> 00:25:55.450
<v Speaker 0>acceptable answers.

00:26:00.505 --> 00:26:01.304
<v Speaker 1>Yeah.

00:26:06.265 --> 00:26:07.705
<v Speaker 0>Why do you do you use, Yael?

00:26:10.340 --> 00:26:12.179
<v Speaker 2>I'm I'm Versus Code. I was just trying

00:26:12.179 --> 00:26:15.700
<v Speaker 2>to rile rile up a conflict with Versus

00:26:15.700 --> 00:26:17.940
<v Speaker 2>Code. I mean, I've gotta say, like Versus

00:26:17.940 --> 00:26:20.419
<v Speaker 0>Code, language server supports. I mean, it's just

00:26:20.419 --> 00:26:22.685
<v Speaker 0>a and it it's still quite fast even

00:26:22.685 --> 00:26:24.365
<v Speaker 0>though it's an electron based application. I've gotta

00:26:24.365 --> 00:26:26.045
<v Speaker 0>say, they got a lot of things right.

00:26:26.045 --> 00:26:27.565
<v Speaker 0>It's a pleasant experience.

00:26:29.645 --> 00:26:33.485
<v Speaker 1>Okay. So you can see on Intel. Sorry.

00:26:33.485 --> 00:26:34.524
<v Speaker 2>Go ahead, everyone.

00:26:35.165 --> 00:26:36.045
<v Speaker 1>Yeah.

00:26:36.045 --> 00:26:37.565
<v Speaker 1>So you can see my screen now. Alright?

00:26:38.309 --> 00:26:39.830
<v Speaker 0>We could see your Versus code. Yep. You

00:26:39.830 --> 00:26:41.190
<v Speaker 0>got a terminal at the bottom. You got

00:26:41.190 --> 00:26:43.190
<v Speaker 0>some code above it. Yes.

00:26:43.510 --> 00:26:44.149
<v Speaker 1>Yeah.

00:26:44.390 --> 00:26:46.870
<v Speaker 1>I zoomed in. I did you know? And,

00:26:46.870 --> 00:26:48.470
<v Speaker 1>like, if the zoom is okay, you see

00:26:48.470 --> 00:26:49.509
<v Speaker 1>good enough?

00:26:50.390 --> 00:26:51.990
<v Speaker 0>And one more with her. Yeah. Yeah. Yeah.

00:26:51.990 --> 00:26:52.950
<v Speaker 0>I think that's good there.

00:26:53.745 --> 00:26:54.625
<v Speaker 1>Awesome.

00:26:54.705 --> 00:26:55.265
<v Speaker 1>So

00:26:55.585 --> 00:26:57.664
<v Speaker 1>so this is our cluster. It has

00:26:58.225 --> 00:27:00.145
<v Speaker 1>nothing that is not the service that we

00:27:00.145 --> 00:27:02.145
<v Speaker 1>talked about. So we have the IP info

00:27:02.145 --> 00:27:05.185
<v Speaker 1>service, IP info cons consumer, and a IP

00:27:05.185 --> 00:27:05.825
<v Speaker 1>business counter.

00:27:07.950 --> 00:27:10.990
<v Speaker 1>I need to restart the consumer because

00:27:11.070 --> 00:27:13.150
<v Speaker 1>it dies. I didn't do any option there.

00:27:13.150 --> 00:27:15.630
<v Speaker 1>That's like I'm not a very proficient goer.

00:27:15.630 --> 00:27:17.550
<v Speaker 1>I just like that. We did a very

00:27:17.550 --> 00:27:19.870
<v Speaker 1>fast Wow. A rule out restart instead of

00:27:19.870 --> 00:27:22.110
<v Speaker 0>just deleting all the pods. That's classy.

00:27:23.525 --> 00:27:24.085
<v Speaker 1>Yeah.

00:27:24.805 --> 00:27:25.524
<v Speaker 1>Yeah.

00:27:28.245 --> 00:27:29.365
<v Speaker 1>So this

00:27:29.365 --> 00:27:30.404
<v Speaker 1>is our cluster.

00:27:30.485 --> 00:27:32.645
<v Speaker 1>So we have all the services here, and

00:27:32.645 --> 00:27:34.485
<v Speaker 1>we'll start by just showing

00:27:34.885 --> 00:27:35.525
<v Speaker 1>like this.

00:27:37.700 --> 00:27:39.860
<v Speaker 1>The API, what it does. So this is

00:27:39.860 --> 00:27:41.940
<v Speaker 1>on the remote. You can also like, other

00:27:41.940 --> 00:27:43.779
<v Speaker 1>people on the stream watching us, you can

00:27:43.779 --> 00:27:46.260
<v Speaker 1>also access it and see it for yourself.

00:27:46.260 --> 00:27:47.139
<v Speaker 1>This is all

00:27:47.620 --> 00:27:48.019
<v Speaker 1>new.

00:27:48.755 --> 00:27:50.914
<v Speaker 1>And you can see the account increasing

00:27:51.475 --> 00:27:54.434
<v Speaker 1>each time I have the request. Now I

00:27:54.434 --> 00:27:56.834
<v Speaker 1>want to start working on it. So

00:27:57.075 --> 00:27:58.595
<v Speaker 1>this is the service. This is the actual

00:27:58.595 --> 00:28:00.755
<v Speaker 1>code. It's a very complex code that does

00:28:00.755 --> 00:28:01.875
<v Speaker 1>this magic.

00:28:03.580 --> 00:28:06.860
<v Speaker 1>And we'll start by putting a breakpoint on

00:28:06.860 --> 00:28:10.220
<v Speaker 1>domain just to show how it starts working.

00:28:10.380 --> 00:28:13.100
<v Speaker 1>And when we install mirrord, that's what we

00:28:13.100 --> 00:28:14.379
<v Speaker 1>get. We get a little

00:28:16.085 --> 00:28:17.685
<v Speaker 1>I'm not sure how you call it. Like,

00:28:17.685 --> 00:28:18.645
<v Speaker 1>label

00:28:18.645 --> 00:28:21.765
<v Speaker 1>button I don't know. Menu menu, which you

00:28:21.765 --> 00:28:23.525
<v Speaker 1>can click. And once I click it, it

00:28:23.525 --> 00:28:24.164
<v Speaker 1>enables.

00:28:24.325 --> 00:28:27.605
<v Speaker 1>So this haven't done anything. This just, like,

00:28:27.605 --> 00:28:28.565
<v Speaker 1>toggle the

00:28:29.525 --> 00:28:31.600
<v Speaker 1>usage of. And the next time I run

00:28:31.600 --> 00:28:33.919
<v Speaker 1>my service, it would use mirroring.

00:28:34.640 --> 00:28:35.759
<v Speaker 1>And this

00:28:37.520 --> 00:28:39.679
<v Speaker 1>this one would use a configuration

00:28:40.000 --> 00:28:42.640
<v Speaker 1>that I will show in one sec. So

00:28:42.640 --> 00:28:44.480
<v Speaker 1>I can I can use it without any

00:28:44.480 --> 00:28:44.960
<v Speaker 1>configuration?

00:28:45.365 --> 00:28:47.525
<v Speaker 1>But just for the sake of this demonstration,

00:28:47.525 --> 00:28:50.085
<v Speaker 1>I would I would use this configuration.

00:28:50.245 --> 00:28:52.005
<v Speaker 1>It's not supposed to be here.

00:28:53.045 --> 00:28:54.805
<v Speaker 1>So what I put in the configuration is

00:28:54.805 --> 00:28:56.965
<v Speaker 1>target. Maybe I'll remove that to show you

00:28:56.965 --> 00:28:59.000
<v Speaker 1>how it works for, like, Moscow,

00:28:59.000 --> 00:29:00.279
<v Speaker 1>more common scenario.

00:29:00.840 --> 00:29:01.559
<v Speaker 1>And

00:29:02.360 --> 00:29:03.959
<v Speaker 1>yeah. So this is configuration.

00:29:03.960 --> 00:29:06.519
<v Speaker 1>We still and we'll send traffic only that

00:29:06.519 --> 00:29:07.799
<v Speaker 1>has this header,

00:29:08.039 --> 00:29:10.200
<v Speaker 1>and we'll re reload more files. We'll have

00:29:10.200 --> 00:29:12.415
<v Speaker 1>outgoing traffic, and this is pretty much default.

00:29:12.415 --> 00:29:13.935
<v Speaker 1>This is the only custom thing that was

00:29:13.935 --> 00:29:15.215
<v Speaker 1>done in this configuration.

00:29:16.495 --> 00:29:18.175
<v Speaker 1>Yeah. So now I can just go do

00:29:18.175 --> 00:29:18.815
<v Speaker 1>my

00:29:19.055 --> 00:29:20.495
<v Speaker 1>code, click

00:29:20.895 --> 00:29:21.615
<v Speaker 1>debug.

00:29:22.815 --> 00:29:23.935
<v Speaker 1>Oh, don't update now.

00:29:27.029 --> 00:29:27.830
<v Speaker 1>Sorry.

00:29:28.470 --> 00:29:30.309
<v Speaker 1>We had a new version, and I haven't

00:29:30.309 --> 00:29:32.789
<v Speaker 1>done it yet. So, hopefully, it won't break

00:29:32.789 --> 00:29:33.349
<v Speaker 1>anything.

00:29:33.669 --> 00:29:35.590
<v Speaker 0>We're back to testing them prod again. It's

00:29:35.590 --> 00:29:36.710
<v Speaker 0>okay. Yeah.

00:29:40.245 --> 00:29:42.325
<v Speaker 0>So can I just clarify a few things?

00:29:43.684 --> 00:29:47.445
<v Speaker 0>This is a mirrordy Versus code extension.

00:29:47.924 --> 00:29:50.405
<v Speaker 0>And just by being in this main dot

00:29:50.405 --> 00:29:52.245
<v Speaker 0>goal for the IP visit counter,

00:29:53.030 --> 00:29:56.150
<v Speaker 0>the majority extension has this JSON file loaded

00:29:56.150 --> 00:29:56.710
<v Speaker 0>and

00:29:57.270 --> 00:30:00.150
<v Speaker 0>knows how to replace that service or how

00:30:00.150 --> 00:30:02.309
<v Speaker 0>to intercept the traffic for that service within

00:30:02.309 --> 00:30:02.789
<v Speaker 0>the cluster.

00:30:04.965 --> 00:30:06.245
<v Speaker 1>Yeah. So the

00:30:06.245 --> 00:30:08.804
<v Speaker 1>the configuration file isn't required. Like, it what

00:30:08.804 --> 00:30:10.325
<v Speaker 1>what we do is pretty

00:30:10.485 --> 00:30:11.845
<v Speaker 1>much everything is very

00:30:14.085 --> 00:30:16.164
<v Speaker 1>self configured and very opinionated.

00:30:16.164 --> 00:30:16.325
<v Speaker 1>So

00:30:16.980 --> 00:30:19.059
<v Speaker 1>you don't need to configure, like, what,

00:30:19.620 --> 00:30:22.100
<v Speaker 1>like, what what I show right now. So

00:30:22.100 --> 00:30:24.500
<v Speaker 1>I removed the target, so now it will

00:30:24.500 --> 00:30:26.179
<v Speaker 1>let me choose. So now

00:30:26.900 --> 00:30:28.500
<v Speaker 1>I run it, and now I can choose

00:30:28.500 --> 00:30:30.580
<v Speaker 1>which target I want to mirror.

00:30:30.915 --> 00:30:32.915
<v Speaker 1>So I'm running the service,

00:30:32.915 --> 00:30:34.835
<v Speaker 1>so I will mirror that.

00:30:38.515 --> 00:30:40.435
<v Speaker 1>And then it does this is when we

00:30:40.435 --> 00:30:42.355
<v Speaker 1>spawn the agent, and now it's ready.

00:30:42.675 --> 00:30:44.435
<v Speaker 1>And now we see the service running, and

00:30:44.435 --> 00:30:46.180
<v Speaker 1>the breakpoint is hit. And you can notice

00:30:46.180 --> 00:30:48.900
<v Speaker 1>that this so the the process, everything is

00:30:48.900 --> 00:30:50.980
<v Speaker 1>running locally, the service itself.

00:30:51.140 --> 00:30:54.500
<v Speaker 1>So now we've hit the load config breakpoint.

00:30:54.660 --> 00:30:56.340
<v Speaker 1>We'll step into that.

00:30:56.660 --> 00:30:58.660
<v Speaker 1>And what we do is pretty much very

00:30:58.660 --> 00:31:01.860
<v Speaker 1>common thing. We load settings from the environment

00:31:01.275 --> 00:31:02.235
<v Speaker 1>So

00:31:03.275 --> 00:31:05.435
<v Speaker 1>I can just go over that, and then

00:31:05.435 --> 00:31:07.755
<v Speaker 1>let's inspect the config. We can see that

00:31:07.755 --> 00:31:10.315
<v Speaker 1>we got some information from it. That's not

00:31:10.315 --> 00:31:12.795
<v Speaker 1>for my environment. That's what's obtained from the

00:31:12.795 --> 00:31:13.674
<v Speaker 1>remote service.

00:31:14.075 --> 00:31:14.715
<v Speaker 1>And now

00:31:15.740 --> 00:31:18.300
<v Speaker 1>what's a very common thing we do is

00:31:18.300 --> 00:31:19.179
<v Speaker 1>we read

00:31:19.420 --> 00:31:21.740
<v Speaker 1>file for secrets and stuff. So in this

00:31:21.740 --> 00:31:23.980
<v Speaker 1>case, we have this path we want to

00:31:23.980 --> 00:31:27.260
<v Speaker 1>read. This path doesn't exist on my machine.

00:31:27.980 --> 00:31:30.184
<v Speaker 1>Either it's mounted, there is no remote. It's

00:31:30.265 --> 00:31:32.425
<v Speaker 1>no. It's running locally. That's what part of

00:31:32.425 --> 00:31:33.705
<v Speaker 1>the magical community.

00:31:34.184 --> 00:31:35.705
<v Speaker 1>So we get here. And

00:31:37.545 --> 00:31:39.785
<v Speaker 1>now we can see that it was loaded.

00:31:39.785 --> 00:31:42.505
<v Speaker 1>And the loading happened from the remote part,

00:31:42.505 --> 00:31:44.940
<v Speaker 1>so we actually got the remote file. If

00:31:44.940 --> 00:31:46.380
<v Speaker 1>you have any secret, any

00:31:46.860 --> 00:31:49.259
<v Speaker 1>anything that comes from the remote pod,

00:31:49.260 --> 00:31:50.380
<v Speaker 1>you immediately

00:31:50.380 --> 00:31:52.140
<v Speaker 1>add it because you have the and

00:31:52.140 --> 00:31:52.779
<v Speaker 1>you have the.

00:31:53.260 --> 00:31:55.580
<v Speaker 1>So now it goes through connecting to all

00:31:55.580 --> 00:31:57.659
<v Speaker 1>sort of stuff, and we just skip that.

00:31:58.299 --> 00:32:00.299
<v Speaker 1>And we have the service running now,

00:32:00.885 --> 00:32:02.805
<v Speaker 1>and you can see it's running on port

00:32:02.805 --> 00:32:05.525
<v Speaker 1>80, which is the same port the real

00:32:05.525 --> 00:32:06.885
<v Speaker 1>service is running on.

00:32:08.005 --> 00:32:10.005
<v Speaker 1>Now I can do curl,

00:32:10.245 --> 00:32:11.924
<v Speaker 1>and you see that nothing happened.

00:32:12.085 --> 00:32:14.210
<v Speaker 1>Why nothing happened is because

00:32:14.450 --> 00:32:16.690
<v Speaker 1>I've put in my configuration file,

00:32:17.090 --> 00:32:18.850
<v Speaker 1>not this configuration file.

00:32:19.170 --> 00:32:21.090
<v Speaker 1>This configuration file, because I want to still

00:32:21.090 --> 00:32:23.010
<v Speaker 1>traffic only with this header.

00:32:23.250 --> 00:32:25.934
<v Speaker 0>So now I will place this header, and

00:32:25.934 --> 00:32:27.695
<v Speaker 1>the breakpoint is hit. And you can see

00:32:27.695 --> 00:32:29.614
<v Speaker 1>also the request is being installed.

00:32:29.615 --> 00:32:31.855
<v Speaker 1>Why is it stopped? Because it's me holding

00:32:31.855 --> 00:32:33.695
<v Speaker 1>the request, and I didn't need to respond.

00:32:33.695 --> 00:32:35.854
<v Speaker 1>So I just let it go,

00:32:38.654 --> 00:32:41.054
<v Speaker 1>and you can see the response coming in.

00:32:43.150 --> 00:32:43.870
<v Speaker 0>Thanks.

00:32:45.710 --> 00:32:46.430
<v Speaker 1>Yeah.

00:32:46.590 --> 00:32:47.950
<v Speaker 1>Any questions so far?

00:32:50.350 --> 00:32:52.030
<v Speaker 0>No. That makes a lot more sense just

00:32:52.030 --> 00:32:54.110
<v Speaker 0>in that one little demo.

00:32:54.430 --> 00:32:55.870
<v Speaker 0>You know, I was thinking about it completely

00:32:55.870 --> 00:32:57.695
<v Speaker 0>the wrong way when I was talking about,

00:32:57.935 --> 00:32:59.135
<v Speaker 0>you know, the rates,

00:32:59.855 --> 00:33:01.375
<v Speaker 0>you know, during the interception and the part.

00:33:01.375 --> 00:33:02.975
<v Speaker 0>But, of course, it's it's just all running

00:33:02.975 --> 00:33:04.495
<v Speaker 0>locally, and it's to make sure that when

00:33:04.495 --> 00:33:06.815
<v Speaker 0>I wanna consume Kubernetes secrets or even environment

00:33:06.815 --> 00:33:08.414
<v Speaker 0>variables for several discovery,

00:33:08.415 --> 00:33:10.640
<v Speaker 0>any of this stuff that it works even

00:33:10.640 --> 00:33:12.080
<v Speaker 0>though we're running everything

00:33:12.240 --> 00:33:13.119
<v Speaker 0>locally.

00:33:13.200 --> 00:33:14.960
<v Speaker 0>But, yeah, just like a late bulb opens.

00:33:14.960 --> 00:33:16.320
<v Speaker 0>Oh, yeah. Of course. That's of course, it

00:33:16.320 --> 00:33:17.600
<v Speaker 0>makes total sense. I was just being a

00:33:17.600 --> 00:33:19.520
<v Speaker 0>bit bit a bit tough, but, you know,

00:33:19.520 --> 00:33:20.880
<v Speaker 0>hopefully, I had two coffees to taste, so

00:33:20.880 --> 00:33:21.280
<v Speaker 0>that's okay.

00:33:21.965 --> 00:33:24.445
<v Speaker 0>Yeah. So that that really helped. That

00:33:25.325 --> 00:33:27.005
<v Speaker 0>yeah. Good. Yeah. I think I think one

00:33:27.005 --> 00:33:28.765
<v Speaker 1>of one of the things we we see

00:33:28.765 --> 00:33:30.685
<v Speaker 1>come on with people is that when we

00:33:30.685 --> 00:33:33.405
<v Speaker 1>experiment with mirrordea, like, verbally and also from

00:33:33.405 --> 00:33:35.965
<v Speaker 1>documentation, they don't really get a grasp. Like,

00:33:35.965 --> 00:33:36.845
<v Speaker 1>they imagine a lot of,

00:33:37.620 --> 00:33:40.180
<v Speaker 1>like, people promise thirty seconds and very quick

00:33:40.180 --> 00:33:42.580
<v Speaker 1>and magic, and, like, they don't expect that.

00:33:42.980 --> 00:33:45.140
<v Speaker 1>Right? And and when they actually see a

00:33:45.140 --> 00:33:46.179
<v Speaker 1>demo from Unity,

00:33:46.420 --> 00:33:48.580
<v Speaker 1>they say, oh, this is actually different than

00:33:48.580 --> 00:33:51.220
<v Speaker 1>what we've seen in other in other things.

00:33:51.220 --> 00:33:51.460
<v Speaker 1>So,

00:33:53.065 --> 00:33:55.625
<v Speaker 1>yeah, I think a demo a demo also

00:33:55.625 --> 00:33:56.505
<v Speaker 1>of of

00:33:57.785 --> 00:33:58.745
<v Speaker 1>really heads.

00:33:59.465 --> 00:34:01.945
<v Speaker 1>Yeah. So this is the more simple

00:34:02.425 --> 00:34:03.065
<v Speaker 1>example.

00:34:05.149 --> 00:34:07.710
<v Speaker 1>And now we can go into a bit

00:34:07.710 --> 00:34:08.750
<v Speaker 1>more deeper

00:34:09.310 --> 00:34:11.310
<v Speaker 1>example. So what we do in the request

00:34:11.469 --> 00:34:13.070
<v Speaker 1>so I said it sends a request to

00:34:13.070 --> 00:34:14.190
<v Speaker 1>the upstream service.

00:34:14.589 --> 00:34:16.429
<v Speaker 1>And the upstream service,

00:34:16.670 --> 00:34:17.869
<v Speaker 1>we propagate

00:34:17.869 --> 00:34:18.349
<v Speaker 1>headers,

00:34:18.905 --> 00:34:21.864
<v Speaker 1>which is very use common. You can also

00:34:21.864 --> 00:34:25.464
<v Speaker 1>use observability headers that usually propagate to web,

00:34:25.464 --> 00:34:26.665
<v Speaker 1>like, it's race saving.

00:34:26.984 --> 00:34:28.824
<v Speaker 1>And you can use that also to

00:34:29.705 --> 00:34:32.105
<v Speaker 1>steal traffic based on that. And then

00:34:33.304 --> 00:34:34.185
<v Speaker 1>when we do that,

00:34:35.600 --> 00:34:37.280
<v Speaker 1>we go to the other service, which is

00:34:37.280 --> 00:34:38.480
<v Speaker 1>the upstream service.

00:34:39.520 --> 00:34:41.840
<v Speaker 1>And I will also steer on the based

00:34:41.840 --> 00:34:43.120
<v Speaker 1>on the same header filter.

00:34:46.960 --> 00:34:47.760
<v Speaker 1>So

00:34:47.760 --> 00:34:50.000
<v Speaker 1>now let's go to the code ID info

00:34:53.734 --> 00:34:56.214
<v Speaker 1>wait. It contains something I didn't want to

00:34:56.214 --> 00:34:57.174
<v Speaker 1>show. One second.

00:35:04.680 --> 00:35:05.960
<v Speaker 1>I don't see that.

00:35:09.320 --> 00:35:11.400
<v Speaker 1>So this is my code, and now I

00:35:11.400 --> 00:35:12.360
<v Speaker 1>will run it.

00:35:15.240 --> 00:35:17.240
<v Speaker 1>And if you notice, the info which returned

00:35:17.240 --> 00:35:17.480
<v Speaker 1>was.

00:35:18.755 --> 00:35:20.995
<v Speaker 1>And now this version that I have locally

00:35:20.995 --> 00:35:22.515
<v Speaker 1>is LovesAAA,

00:35:23.155 --> 00:35:25.955
<v Speaker 1>which is you a A is an acronym

00:35:25.955 --> 00:35:26.755
<v Speaker 1>for,

00:35:28.035 --> 00:35:29.635
<v Speaker 1>I don't know, something.

00:35:30.275 --> 00:35:32.115
<v Speaker 0>So DNAForAPV6.

00:35:32.115 --> 00:35:32.355
<v Speaker 0>Right?

00:35:33.060 --> 00:35:33.700
<v Speaker 1>Yeah.

00:35:37.140 --> 00:35:38.500
<v Speaker 1>Yeah. So now I can

00:35:39.060 --> 00:35:40.740
<v Speaker 1>you can see that the real service is

00:35:40.740 --> 00:35:43.620
<v Speaker 1>answering. And when I do the header,

00:35:44.260 --> 00:35:46.340
<v Speaker 1>it propagates and then gets to me. So

00:35:46.340 --> 00:35:47.940
<v Speaker 1>now I can still let service inside the

00:35:47.940 --> 00:35:50.625
<v Speaker 1>cluster that isn't even in being ingressed

00:35:50.945 --> 00:35:52.705
<v Speaker 1>and exposed externally.

00:35:53.825 --> 00:35:55.105
<v Speaker 1>I mean, now we can see the response.

00:35:55.105 --> 00:35:56.945
<v Speaker 1>It's also for my local service.

00:35:57.585 --> 00:35:59.825
<v Speaker 1>Yeah. And that's, like, the very basic

00:36:00.545 --> 00:36:01.665
<v Speaker 1>demo demo.

00:36:03.060 --> 00:36:04.900
<v Speaker 1>Yeah. I think

00:36:06.580 --> 00:36:07.460
<v Speaker 1>we can

00:36:08.740 --> 00:36:09.940
<v Speaker 1>stop it here

00:36:10.100 --> 00:36:11.940
<v Speaker 1>for now. Like, we go we can go,

00:36:11.940 --> 00:36:13.300
<v Speaker 1>like, more interactive. But

00:36:15.174 --> 00:36:16.135
<v Speaker 0>Yeah. So

00:36:16.375 --> 00:36:18.055
<v Speaker 0>the so this call so this is working

00:36:18.055 --> 00:36:19.335
<v Speaker 0>with it. If I tried to read from

00:36:19.335 --> 00:36:21.174
<v Speaker 0>the environment, it's intercepted. If I wanna read

00:36:21.174 --> 00:36:23.015
<v Speaker 0>from a fail, it's intercepted. If I make

00:36:23.015 --> 00:36:25.654
<v Speaker 0>a DNS resolution or network request, I'm assuming

00:36:25.654 --> 00:36:28.990
<v Speaker 0>that gives intercepted and handled appropriately too. And,

00:36:29.150 --> 00:36:30.990
<v Speaker 0>I mean, not really that relevant maybe to

00:36:30.990 --> 00:36:32.430
<v Speaker 0>the audience, but I'm just curious because I

00:36:32.430 --> 00:36:34.110
<v Speaker 0>work in a lot of Kubernetes,

00:36:34.110 --> 00:36:35.550
<v Speaker 0>like, controllers and operators.

00:36:35.790 --> 00:36:37.870
<v Speaker 0>If I wanna hook into the Kubernetes API,

00:36:37.870 --> 00:36:39.550
<v Speaker 0>use the service account, get a lease and

00:36:39.550 --> 00:36:40.990
<v Speaker 0>stuff like that, that would all just work.

00:36:41.855 --> 00:36:44.734
<v Speaker 1>Yeah. So funny story. So we said we

00:36:44.734 --> 00:36:47.135
<v Speaker 1>developed mirrordial teams. Mirrordial teams is an operator.

00:36:47.135 --> 00:36:48.735
<v Speaker 1>So we dug for the lot. So

00:36:49.135 --> 00:36:51.535
<v Speaker 1>and and the operator wants to the cluster,

00:36:51.535 --> 00:36:53.615
<v Speaker 1>and then the operator of mirrordial, the sponsor

00:36:53.615 --> 00:36:55.135
<v Speaker 1>instance of mirrordial.

00:36:55.135 --> 00:36:56.494
<v Speaker 1>We debug it using mirrordial.

00:36:57.720 --> 00:36:59.880
<v Speaker 1>So, if this works and not releases and

00:36:59.880 --> 00:37:02.840
<v Speaker 1>everything, we actually had a very, tough bug,

00:37:03.800 --> 00:37:04.840
<v Speaker 1>where,

00:37:05.800 --> 00:37:08.040
<v Speaker 1>I can't remember what exactly happened.

00:37:15.445 --> 00:37:16.565
<v Speaker 1>What happened?

00:37:19.605 --> 00:37:22.965
<v Speaker 1>Yeah. Okay. So funny story. So we I

00:37:22.965 --> 00:37:24.245
<v Speaker 1>debugged the operator,

00:37:24.645 --> 00:37:25.925
<v Speaker 1>and then

00:37:26.100 --> 00:37:28.900
<v Speaker 1>I saw that it access it's accessing the

00:37:29.220 --> 00:37:31.780
<v Speaker 1>external IP of the Kube API because it

00:37:31.780 --> 00:37:33.940
<v Speaker 1>uses the Kube API. And I didn't understand

00:37:33.940 --> 00:37:35.620
<v Speaker 1>why. And then what

00:37:36.100 --> 00:37:38.420
<v Speaker 1>I found out is that the

00:37:39.060 --> 00:37:41.835
<v Speaker 1>we use Kubernetes, which is great great for

00:37:41.835 --> 00:37:43.195
<v Speaker 1>developing

00:37:44.715 --> 00:37:46.875
<v Speaker 1>Kubernetes APIs in Rust.

00:37:47.115 --> 00:37:47.515
<v Speaker 1>And

00:37:47.915 --> 00:37:49.595
<v Speaker 1>the the the first thing it does, it

00:37:49.595 --> 00:37:51.275
<v Speaker 1>looks up for a cube config.

00:37:51.835 --> 00:37:54.810
<v Speaker 1>And we exclude it by default stuffs that

00:37:54.810 --> 00:37:57.290
<v Speaker 1>come from slash users because that's usually stuff

00:37:57.290 --> 00:37:58.970
<v Speaker 1>you want to be obtained locally.

00:38:00.250 --> 00:38:01.850
<v Speaker 1>We have a lot of defaults to make

00:38:01.850 --> 00:38:04.890
<v Speaker 1>a very seamless experience. So it actually used

00:38:04.890 --> 00:38:08.090
<v Speaker 1>my local cube config file instead of using

00:38:08.090 --> 00:38:09.930
<v Speaker 1>the environment variables of the remote

00:38:10.865 --> 00:38:12.785
<v Speaker 1>of the remote cluster. So I I was

00:38:12.785 --> 00:38:14.305
<v Speaker 1>like it took me, like, two days to

00:38:14.305 --> 00:38:15.105
<v Speaker 1>realize

00:38:15.105 --> 00:38:17.745
<v Speaker 1>that was going on. It was tough. But

00:38:19.265 --> 00:38:20.865
<v Speaker 1>yeah. And and now we are explicit.

00:38:22.065 --> 00:38:23.825
<v Speaker 1>Use only classic.

00:38:24.224 --> 00:38:24.704
<v Speaker 1>So yeah.

00:38:26.090 --> 00:38:27.770
<v Speaker 0>Nice. I think that's the first time I've

00:38:27.770 --> 00:38:30.010
<v Speaker 0>mentioned Rust, which I'm actually surprised about because

00:38:30.010 --> 00:38:31.610
<v Speaker 0>normally, like, that's the first thing I try

00:38:31.610 --> 00:38:33.210
<v Speaker 0>and say in every stream. But it is

00:38:33.210 --> 00:38:34.570
<v Speaker 0>all written in Rust. Right?

00:38:35.610 --> 00:38:36.250
<v Speaker 1>Yeah.

00:38:37.050 --> 00:38:39.195
<v Speaker 1>Everything that's not extensions,

00:38:39.195 --> 00:38:41.755
<v Speaker 1>which we have to conform to the SDKs

00:38:41.755 --> 00:38:43.195
<v Speaker 1>of the vendors.

00:38:43.195 --> 00:38:43.675
<v Speaker 1>Yeah.

00:38:44.075 --> 00:38:46.955
<v Speaker 1>Everything is rust. Yeah. I really like Kubernetes.

00:38:46.955 --> 00:38:48.235
<v Speaker 0>It's a very cool project.

00:38:48.715 --> 00:38:50.795
<v Speaker 0>Yeah. We do have some Unmaintained also.

00:38:51.760 --> 00:38:52.320
<v Speaker 0>Sorry?

00:38:52.880 --> 00:38:55.120
<v Speaker 1>Well maintained also. Like Oh, yeah. Yes. We

00:38:55.120 --> 00:38:55.600
<v Speaker 1>we

00:38:56.000 --> 00:38:57.440
<v Speaker 1>send a lot of stuff out to him,

00:38:57.440 --> 00:38:59.680
<v Speaker 1>and he's very responsive and very friendly. Really

00:38:59.680 --> 00:39:00.560
<v Speaker 1>appreciate him.

00:39:01.040 --> 00:39:01.680
<v Speaker 2>Yeah.

00:39:01.840 --> 00:39:04.800
<v Speaker 0>Alright. We've got some questions. So let's let's

00:39:04.800 --> 00:39:07.255
<v Speaker 0>start with the one from.

00:39:08.295 --> 00:39:10.295
<v Speaker 0>If my local process runs on Port 80

00:39:10.295 --> 00:39:12.455
<v Speaker 0>and the service is on Port 88, can

00:39:12.455 --> 00:39:14.455
<v Speaker 0>I matter eighty eighty to remote Port 8

00:39:14.455 --> 00:39:15.335
<v Speaker 0>locally?

00:39:15.575 --> 00:39:16.695
<v Speaker 0>So do you have do you have any

00:39:16.695 --> 00:39:18.855
<v Speaker 0>control over the the way the ports work?

00:39:19.970 --> 00:39:21.569
<v Speaker 1>Yeah. So maybe I'll share my screen for

00:39:21.569 --> 00:39:23.890
<v Speaker 1>that because think we're gonna one too. Yeah.

00:39:23.890 --> 00:39:24.450
<v Speaker 1>So

00:39:26.930 --> 00:39:28.849
<v Speaker 1>like we said, we we really like having

00:39:29.010 --> 00:39:31.329
<v Speaker 1>like, we we desire the user experience to

00:39:31.329 --> 00:39:32.690
<v Speaker 1>be that you can just plug it in

00:39:32.690 --> 00:39:35.184
<v Speaker 1>and and it works for you. But as

00:39:35.184 --> 00:39:37.265
<v Speaker 1>you want the more advanced configuration, we have

00:39:37.265 --> 00:39:39.505
<v Speaker 1>tons of configuration for you. So

00:39:39.744 --> 00:39:41.585
<v Speaker 1>in this case, we're talking about the incoming

00:39:41.585 --> 00:39:44.785
<v Speaker 1>traffic. So we have here port mapping. And

00:39:44.785 --> 00:39:47.905
<v Speaker 1>port mapping, you can say exactly that. It's

00:39:47.905 --> 00:39:49.664
<v Speaker 1>also auto completed to,

00:39:51.050 --> 00:39:52.410
<v Speaker 1>yeah, the same map

00:39:53.050 --> 00:39:55.770
<v Speaker 1>and mapping. So that this says that, okay.

00:39:55.850 --> 00:39:58.410
<v Speaker 1>Locally, I listen on 80, but remotely, I

00:39:58.410 --> 00:40:00.410
<v Speaker 1>want to steal or mirror

00:40:00.650 --> 00:40:01.610
<v Speaker 1>eighty eighty.

00:40:03.610 --> 00:40:06.704
<v Speaker 0>Okay. And does this just use whatever cube

00:40:06.704 --> 00:40:08.464
<v Speaker 0>context I'm on? I'm assuming you're not having

00:40:08.464 --> 00:40:10.384
<v Speaker 0>to provide any other information. I'm just making

00:40:10.384 --> 00:40:12.464
<v Speaker 0>sure that your current session is using the

00:40:12.464 --> 00:40:14.224
<v Speaker 0>right or you can also point to a

00:40:14.224 --> 00:40:15.345
<v Speaker 0>second. Okay.

00:40:15.904 --> 00:40:17.904
<v Speaker 1>But it gives us the other local one.

00:40:17.904 --> 00:40:21.460
<v Speaker 1>Yeah. We use the default API of QRS,

00:40:21.460 --> 00:40:22.100
<v Speaker 1>which does

00:40:22.740 --> 00:40:25.220
<v Speaker 1>you have a cube config end, which also

00:40:25.220 --> 00:40:27.060
<v Speaker 1>cube context should set.

00:40:27.300 --> 00:40:29.220
<v Speaker 1>So, basically, yes, it should work quite quite

00:40:29.220 --> 00:40:32.260
<v Speaker 1>seamlessly with the Kubernetes experience of your local

00:40:32.260 --> 00:40:32.580
<v Speaker 1>machine.

00:40:33.605 --> 00:40:35.444
<v Speaker 0>And can I set the context if I

00:40:35.444 --> 00:40:37.605
<v Speaker 0>have a KubeConfig with multiple context,

00:40:38.085 --> 00:40:40.244
<v Speaker 0>or would I have to switch locally first?

00:40:42.244 --> 00:40:44.164
<v Speaker 1>Yeah. You you need to switch it locally

00:40:44.164 --> 00:40:46.724
<v Speaker 1>first. Yeah. I think that's probably expected, so

00:40:46.724 --> 00:40:47.444
<v Speaker 0>no big deal.

00:40:48.140 --> 00:40:49.980
<v Speaker 0>Alright. Russell asked,

00:40:50.460 --> 00:40:52.380
<v Speaker 0>sorry. I think I missed it. Are the

00:40:52.380 --> 00:40:54.620
<v Speaker 0>files red just in time? So when a

00:40:54.620 --> 00:40:56.780
<v Speaker 0>syscall is executed, or do you do any

00:40:56.780 --> 00:40:58.380
<v Speaker 0>scanning parsing to pull them at the start

00:40:58.380 --> 00:40:58.940
<v Speaker 0>of the session?

00:41:00.795 --> 00:41:02.315
<v Speaker 1>You can answer it now.

00:41:04.795 --> 00:41:06.395
<v Speaker 0>Yeah. Yeah. I think we've seen that through

00:41:06.395 --> 00:41:08.075
<v Speaker 0>the the breakpoints. Yeah. So

00:41:09.355 --> 00:41:11.994
<v Speaker 2>Yeah. I actually saw that Mugul from our

00:41:11.994 --> 00:41:13.675
<v Speaker 2>team answered in the chat. But just to

00:41:13.675 --> 00:41:15.595
<v Speaker 2>reiterate, the the read just in time.

00:41:16.220 --> 00:41:17.820
<v Speaker 2>We hope the file reads.

00:41:19.099 --> 00:41:21.020
<v Speaker 2>And so when I when your process tries

00:41:21.020 --> 00:41:23.020
<v Speaker 2>to read the file, that's when we pass

00:41:23.339 --> 00:41:25.420
<v Speaker 2>it to the agent. Agent reads the file,

00:41:25.900 --> 00:41:26.859
<v Speaker 2>pass it back to you.

00:41:28.585 --> 00:41:29.305
<v Speaker 0>Okay.

00:41:31.065 --> 00:41:33.945
<v Speaker 0>Alright. Went says awesome. We will test this

00:41:33.945 --> 00:41:36.425
<v Speaker 0>in our environment. It's good to see. Russell

00:41:37.545 --> 00:41:39.385
<v Speaker 0>has been in your documentation

00:41:39.385 --> 00:41:40.825
<v Speaker 0>and sees that it had sent to the

00:41:40.825 --> 00:41:42.665
<v Speaker 0>epsies who works with first spells tool.

00:41:43.599 --> 00:41:45.520
<v Speaker 0>I mean, I'm assuming it worked with with

00:41:45.520 --> 00:41:47.680
<v Speaker 0>most applications. Is that a fair assumption? Are

00:41:47.680 --> 00:41:49.280
<v Speaker 0>there any gotchas that people should be aware

00:41:49.280 --> 00:41:49.680
<v Speaker 0>of?

00:41:50.560 --> 00:41:51.200
<v Speaker 1>Yeah.

00:41:51.599 --> 00:41:54.640
<v Speaker 1>It works with most applications, like, applications that

00:41:54.640 --> 00:41:55.920
<v Speaker 1>I would say love people.

00:41:57.435 --> 00:42:00.395
<v Speaker 1>And, like, yeah, the exclusion would be Go

00:42:00.395 --> 00:42:02.395
<v Speaker 1>on Linux that tries to

00:42:03.355 --> 00:42:06.715
<v Speaker 1>go to direct Cisco, and then we directly

00:42:06.715 --> 00:42:08.315
<v Speaker 1>hook the Cisco

00:42:08.580 --> 00:42:11.620
<v Speaker 1>calls of Go. So that's what Russell meant.

00:42:11.620 --> 00:42:13.460
<v Speaker 1>Like, we put specific we we have a

00:42:13.460 --> 00:42:14.100
<v Speaker 1>specific

00:42:14.900 --> 00:42:18.420
<v Speaker 1>stream or customization to work with Go. Currently,

00:42:18.420 --> 00:42:20.420
<v Speaker 1>we work with Go only on

00:42:21.635 --> 00:42:24.275
<v Speaker 1>x 64, which is the common processor,

00:42:24.515 --> 00:42:26.275
<v Speaker 1>and we need to add

00:42:26.675 --> 00:42:27.955
<v Speaker 1>the same for

00:42:27.955 --> 00:42:28.595
<v Speaker 1>ARM,

00:42:28.915 --> 00:42:31.155
<v Speaker 1>but we haven't gone there yet. Usually,

00:42:31.715 --> 00:42:33.795
<v Speaker 1>people just prefer to run it locally. So

00:42:33.795 --> 00:42:34.915
<v Speaker 1>on macOS,

00:42:34.915 --> 00:42:38.250
<v Speaker 1>they can't use a directical Cisco because

00:42:39.290 --> 00:42:42.410
<v Speaker 1>Apple doesn't provide stable internal API. So that's

00:42:42.410 --> 00:42:44.250
<v Speaker 1>nice. Thank you, Apple.

00:42:45.530 --> 00:42:47.530
<v Speaker 0>Yeah. Working on a Mac just gets easier

00:42:47.530 --> 00:42:49.130
<v Speaker 0>and easier. Right? Anyway,

00:42:50.685 --> 00:42:52.765
<v Speaker 0>let's talk about, like,

00:42:53.565 --> 00:42:55.325
<v Speaker 0>you know, let's say I I just

00:42:55.885 --> 00:42:57.725
<v Speaker 0>I wanna make my life easier for developers

00:42:57.725 --> 00:42:59.645
<v Speaker 0>and my team. I think matter is easy

00:42:59.645 --> 00:43:00.445
<v Speaker 0>answer.

00:43:01.005 --> 00:43:02.605
<v Speaker 0>No. Do I just start going to all

00:43:02.605 --> 00:43:04.685
<v Speaker 0>of my projects, all of my repositories and

00:43:04.685 --> 00:43:06.730
<v Speaker 0>adding the matter d dot JSON?

00:43:06.809 --> 00:43:09.769
<v Speaker 0>Do I put make fail targets in where

00:43:09.769 --> 00:43:11.050
<v Speaker 0>people can just run

00:43:11.210 --> 00:43:13.210
<v Speaker 0>the matter d CLI? Like, how do people

00:43:13.210 --> 00:43:15.450
<v Speaker 0>get started? What's the preferred way? What's the

00:43:15.450 --> 00:43:17.609
<v Speaker 0>most what's the lowest friction way for teams

00:43:17.609 --> 00:43:19.609
<v Speaker 0>to start adopting us across all of their

00:43:19.609 --> 00:43:19.930
<v Speaker 0>services?

00:43:21.565 --> 00:43:22.445
<v Speaker 1>So

00:43:24.125 --> 00:43:26.925
<v Speaker 1>Let me prefix that. Right? Because there's a

00:43:26.925 --> 00:43:28.285
<v Speaker 0>bit of context in my head that I've

00:43:28.285 --> 00:43:29.485
<v Speaker 0>not really verbalized.

00:43:29.645 --> 00:43:31.085
<v Speaker 0>And what I was saying really is that

00:43:31.085 --> 00:43:32.765
<v Speaker 0>that's better data JSON. Does it just work

00:43:32.765 --> 00:43:34.045
<v Speaker 0>with the Versus code extension? Does it work

00:43:34.045 --> 00:43:35.980
<v Speaker 0>with the CLI? What's the preferred approach for

00:43:35.980 --> 00:43:37.100
<v Speaker 0>teams moving forward?

00:43:37.260 --> 00:43:37.900
<v Speaker 1>Yeah.

00:43:38.540 --> 00:43:39.180
<v Speaker 1>So,

00:43:39.420 --> 00:43:40.780
<v Speaker 1>basically, what the

00:43:40.940 --> 00:43:43.180
<v Speaker 1>extensions do is they use the CLI. So

00:43:43.180 --> 00:43:45.100
<v Speaker 1>everything works with a config file. So everything

00:43:45.100 --> 00:43:46.220
<v Speaker 1>that you can do in the extension, you

00:43:46.220 --> 00:43:47.420
<v Speaker 1>can do in the CLI.

00:43:47.900 --> 00:43:50.765
<v Speaker 1>The extensions are just, like, giving better use

00:43:50.765 --> 00:43:52.125
<v Speaker 1>experience and better

00:43:52.765 --> 00:43:55.565
<v Speaker 1>settings when it comes running from ID.

00:43:55.885 --> 00:43:58.365
<v Speaker 1>In public, what we see people sometimes, they

00:43:58.365 --> 00:44:00.845
<v Speaker 1>execute via the CLI using make files, using

00:44:00.845 --> 00:44:01.964
<v Speaker 1>trust files, using

00:44:02.285 --> 00:44:04.120
<v Speaker 1>Bazel, and then they

00:44:04.920 --> 00:44:07.000
<v Speaker 1>use the ID to yeah.

00:44:07.560 --> 00:44:09.480
<v Speaker 1>They use it to we just had someone

00:44:09.480 --> 00:44:11.000
<v Speaker 1>in the discordash in.

00:44:11.560 --> 00:44:13.800
<v Speaker 1>I not the first one. It's, like, the

00:44:13.800 --> 00:44:16.120
<v Speaker 1>third people a person that they asked about

00:44:16.120 --> 00:44:16.280
<v Speaker 1>it.

00:44:17.085 --> 00:44:19.405
<v Speaker 1>And then they launch it using immunity,

00:44:19.405 --> 00:44:21.645
<v Speaker 1>and then they attach the debugger, for example,

00:44:21.645 --> 00:44:23.645
<v Speaker 1>using the IDK. That's

00:44:23.725 --> 00:44:25.645
<v Speaker 1>less of how we see it being used,

00:44:25.645 --> 00:44:27.085
<v Speaker 1>but, of course, anyone can adopt it in

00:44:27.085 --> 00:44:28.525
<v Speaker 1>any way they can they want.

00:44:31.119 --> 00:44:33.359
<v Speaker 1>Yeah. So so when it comes to adoption,

00:44:33.359 --> 00:44:35.280
<v Speaker 1>so I think one of the advantages, like,

00:44:35.280 --> 00:44:37.359
<v Speaker 1>compared to other alternatives, is that you don't

00:44:37.359 --> 00:44:38.880
<v Speaker 1>have to install it for everyone. You can

00:44:39.040 --> 00:44:41.760
<v Speaker 1>like, I'm I'd be around my IC, mirroring.

00:44:41.760 --> 00:44:43.359
<v Speaker 1>I can just get started, and that's also

00:44:43.359 --> 00:44:44.880
<v Speaker 1>what we see. We see people getting started.

00:44:45.015 --> 00:44:47.174
<v Speaker 1>Initially, use it for the specific use case.

00:44:47.174 --> 00:44:49.095
<v Speaker 1>Like, I would say, one of the first

00:44:49.095 --> 00:44:50.135
<v Speaker 1>use cases they

00:44:50.454 --> 00:44:52.135
<v Speaker 1>that comes to their mind is that they

00:44:52.135 --> 00:44:54.375
<v Speaker 1>want to debug. Right? That's an ability we

00:44:54.375 --> 00:44:55.895
<v Speaker 1>lost as back end engineers.

00:44:56.135 --> 00:44:58.375
<v Speaker 1>Like, oh, we just add logs at the

00:44:58.375 --> 00:45:01.150
<v Speaker 1>tracing and deploy. And, like, in the best

00:45:01.150 --> 00:45:02.670
<v Speaker 1>case, you know, we can attach a debugger

00:45:02.670 --> 00:45:04.030
<v Speaker 1>to the remote environment,

00:45:04.190 --> 00:45:06.590
<v Speaker 1>but, like, it it's not very comfortable.

00:45:07.150 --> 00:45:09.070
<v Speaker 1>And, like, the first thing they use mirrordial

00:45:09.070 --> 00:45:11.550
<v Speaker 1>is for actually debugging using the ID.

00:45:12.110 --> 00:45:14.705
<v Speaker 1>And then as they use it more

00:45:14.705 --> 00:45:17.185
<v Speaker 1>from and as they use mirroring more and

00:45:17.185 --> 00:45:18.465
<v Speaker 1>they gain

00:45:19.265 --> 00:45:21.745
<v Speaker 1>and they get more confident with it, they

00:45:21.745 --> 00:45:23.665
<v Speaker 1>realize they can just use it for developing

00:45:23.665 --> 00:45:26.385
<v Speaker 1>on a daily on a continuous basis. So

00:45:26.385 --> 00:45:27.825
<v Speaker 1>now I can just each

00:45:29.770 --> 00:45:31.530
<v Speaker 1>change of code I do can just run

00:45:31.530 --> 00:45:33.210
<v Speaker 1>it in a few minutes in a remote

00:45:33.210 --> 00:45:35.130
<v Speaker 1>environment, see that it works, and then write

00:45:35.130 --> 00:45:36.970
<v Speaker 1>the test. So instead of, like, thinking about

00:45:36.970 --> 00:45:38.890
<v Speaker 1>all the scenarios I'm gonna meet, what kind

00:45:38.890 --> 00:45:40.970
<v Speaker 1>of database, what data in the database, what

00:45:41.130 --> 00:45:43.045
<v Speaker 1>what's the relation? Can just plug it in,

00:45:43.045 --> 00:45:45.525
<v Speaker 1>see what happens. Okay. This works. Okay. Let's

00:45:45.525 --> 00:45:47.925
<v Speaker 1>write a test that's covered. Cover more,

00:45:48.805 --> 00:45:50.485
<v Speaker 1>let's say, mild

00:45:51.205 --> 00:45:53.765
<v Speaker 1>mild cases, but not like the extreme edge

00:45:53.765 --> 00:45:55.445
<v Speaker 1>cases to cover everything so it would work

00:45:55.445 --> 00:45:56.005
<v Speaker 1>in any case.

00:45:57.440 --> 00:45:58.000
<v Speaker 1>And,

00:45:58.480 --> 00:46:00.320
<v Speaker 1>yeah, I would say that's, like, usually

00:46:01.040 --> 00:46:01.920
<v Speaker 1>the road.

00:46:03.599 --> 00:46:06.240
<v Speaker 0>Okay. Let's dive into this config a little

00:46:06.240 --> 00:46:08.720
<v Speaker 0>bit deeper then. So right here, we have

00:46:08.720 --> 00:46:09.760
<v Speaker 0>an HTTP filter.

00:46:10.655 --> 00:46:12.895
<v Speaker 0>We're doing a header filter. We're looking for

00:46:12.895 --> 00:46:15.455
<v Speaker 0>the PG tenant as other. Is there any

00:46:15.455 --> 00:46:17.695
<v Speaker 0>interpolation on this file? Can I use an

00:46:17.695 --> 00:46:19.935
<v Speaker 0>environment variable to put in my username

00:46:20.815 --> 00:46:22.974
<v Speaker 0>just to pull out certain things? And I'm

00:46:22.974 --> 00:46:24.415
<v Speaker 0>thinking this is on a get repository. It's

00:46:24.415 --> 00:46:25.455
<v Speaker 0>shared with the entire team.

00:46:26.920 --> 00:46:29.400
<v Speaker 0>Can we inject something in there?

00:46:30.200 --> 00:46:32.440
<v Speaker 1>Yeah. Actually, that's a good idea. We haven't

00:46:32.440 --> 00:46:33.640
<v Speaker 1>thought about it yet.

00:46:34.520 --> 00:46:37.000
<v Speaker 1>But, yeah, in interpolating

00:46:37.800 --> 00:46:40.200
<v Speaker 1>settings, like, the team is also on the

00:46:40.200 --> 00:46:41.800
<v Speaker 1>chat, so that's

00:46:41.484 --> 00:46:42.605
<v Speaker 1>great initiative.

00:46:43.565 --> 00:46:43.805
<v Speaker 1>But

00:46:44.845 --> 00:46:47.405
<v Speaker 1>so right now, it's static. Like, you can

00:46:47.405 --> 00:46:49.484
<v Speaker 1>commit it, but you can it it's not

00:46:49.484 --> 00:46:50.685
<v Speaker 1>something you can

00:46:51.484 --> 00:46:53.325
<v Speaker 1>reinterpret or extrapolate

00:46:53.770 --> 00:46:55.370
<v Speaker 1>for all of that matters,

00:46:55.610 --> 00:46:56.170
<v Speaker 1>unfortunately.

00:46:56.570 --> 00:46:58.570
<v Speaker 1>But I I that's a good idea.

00:46:59.130 --> 00:47:01.210
<v Speaker 0>Okay. And are there any other

00:47:01.450 --> 00:47:04.010
<v Speaker 0>l seven aware failures beyond HTTP? Does it

00:47:04.010 --> 00:47:05.450
<v Speaker 0>understand gRPC,

00:47:05.450 --> 00:47:06.570
<v Speaker 0>Kafka?

00:47:06.650 --> 00:47:08.090
<v Speaker 0>What else's options are?

00:47:08.855 --> 00:47:09.494
<v Speaker 1>Yeah.

00:47:10.055 --> 00:47:12.375
<v Speaker 1>So when we talk about like, we divide

00:47:12.375 --> 00:47:14.454
<v Speaker 1>it into two categories, like, you have incoming

00:47:14.454 --> 00:47:16.775
<v Speaker 1>and you have outgoing. So, you know, Kafka,

00:47:16.775 --> 00:47:19.414
<v Speaker 1>you pull. We don't consider it incoming. We

00:47:19.414 --> 00:47:22.214
<v Speaker 1>talk about the network stack. Like, is it

00:47:22.214 --> 00:47:24.214
<v Speaker 1>an outgoing connection? Is it an incoming connection?

00:47:25.070 --> 00:47:26.910
<v Speaker 1>So on the outgoing level,

00:47:27.310 --> 00:47:30.030
<v Speaker 1>which applies to Kafka, we don't do anything

00:47:30.510 --> 00:47:32.270
<v Speaker 1>special. We just let you connect to remote

00:47:32.270 --> 00:47:34.430
<v Speaker 1>service. We do plan to have more, like,

00:47:34.430 --> 00:47:35.630
<v Speaker 1>filters and

00:47:35.950 --> 00:47:37.550
<v Speaker 1>and smart

00:47:37.995 --> 00:47:39.995
<v Speaker 1>application level protocol

00:47:40.235 --> 00:47:41.195
<v Speaker 1>features.

00:47:41.195 --> 00:47:43.355
<v Speaker 1>But right now, it's just, like, plain connection.

00:47:43.355 --> 00:47:45.035
<v Speaker 1>So anything you can connect to, you can

00:47:45.035 --> 00:47:47.355
<v Speaker 1>connect to from to the remote service.

00:47:47.835 --> 00:47:49.595
<v Speaker 1>And in terms of the incoming,

00:47:49.835 --> 00:47:51.195
<v Speaker 1>right now, we support

00:47:51.355 --> 00:47:52.715
<v Speaker 1>h t p one, two,

00:47:53.500 --> 00:47:55.580
<v Speaker 1>and that covers gRPC.

00:47:55.660 --> 00:47:57.420
<v Speaker 1>So as far as we know,

00:47:58.300 --> 00:47:59.340
<v Speaker 1>gRPC

00:48:00.060 --> 00:48:03.580
<v Speaker 1>is over HTTP usually, HTTP two. And the

00:48:03.580 --> 00:48:05.740
<v Speaker 1>headers of the metadata

00:48:05.415 --> 00:48:06.855
<v Speaker 1>of a gRPC,

00:48:06.855 --> 00:48:09.255
<v Speaker 1>the back of the thing goes into HTTP.

00:48:09.255 --> 00:48:12.135
<v Speaker 1>So you can also use the HTTP

00:48:12.135 --> 00:48:12.935
<v Speaker 1>primitives

00:48:12.935 --> 00:48:15.655
<v Speaker 1>to filter and work with gRPC. So

00:48:16.775 --> 00:48:19.820
<v Speaker 0>Are there any problems with TLS to interfere

00:48:19.820 --> 00:48:21.420
<v Speaker 0>with this, or does it just work out

00:48:21.420 --> 00:48:22.220
<v Speaker 0>of the box?

00:48:22.780 --> 00:48:23.420
<v Speaker 1>Yeah.

00:48:23.980 --> 00:48:24.940
<v Speaker 1>So in

00:48:25.580 --> 00:48:28.060
<v Speaker 1>let's say, the best practice

00:48:28.140 --> 00:48:29.500
<v Speaker 1>when you use

00:48:30.060 --> 00:48:31.020
<v Speaker 1>MTLS,

00:48:31.020 --> 00:48:32.060
<v Speaker 1>in cluster TLS,

00:48:33.075 --> 00:48:35.234
<v Speaker 1>usually have a sidecar. The application doesn't do

00:48:35.234 --> 00:48:37.555
<v Speaker 1>TLS. I I hope for I mean, like,

00:48:37.555 --> 00:48:38.995
<v Speaker 1>unless you do an operator.

00:48:40.195 --> 00:48:42.835
<v Speaker 1>The t TLS is done on a sidecar.

00:48:42.994 --> 00:48:44.835
<v Speaker 1>And, also, in the an operator, actually, you

00:48:44.835 --> 00:48:46.670
<v Speaker 1>can do a cycle. But, usually, it's a

00:48:46.670 --> 00:48:49.310
<v Speaker 1>site code. And then because MewD enters the

00:48:49.310 --> 00:48:51.630
<v Speaker 1>Linux name of the real process, we just

00:48:51.630 --> 00:48:52.990
<v Speaker 1>get the plain traffic.

00:48:53.230 --> 00:48:55.550
<v Speaker 0>So once TLS termination happens at the same

00:48:55.550 --> 00:48:57.710
<v Speaker 0>card, then the local traffic is unencrypted, then

00:48:57.710 --> 00:48:59.070
<v Speaker 0>it just it should just work that way.

00:48:59.555 --> 00:49:00.115
<v Speaker 1>Yeah.

00:49:00.755 --> 00:49:02.355
<v Speaker 1>But if you use TLS,

00:49:02.595 --> 00:49:03.715
<v Speaker 1>you can't

00:49:03.715 --> 00:49:06.355
<v Speaker 1>use the the HTTP filters. You can just

00:49:06.355 --> 00:49:08.355
<v Speaker 1>steer the port, and then you terminate it

00:49:08.355 --> 00:49:10.115
<v Speaker 1>locally. So that would work. Like, that's how

00:49:10.115 --> 00:49:12.115
<v Speaker 1>we develop with the operators, for example.

00:49:13.500 --> 00:49:14.220
<v Speaker 0>K.

00:49:14.540 --> 00:49:15.500
<v Speaker 0>I think last

00:49:15.820 --> 00:49:18.780
<v Speaker 0>question from me right now. So if anyone

00:49:18.780 --> 00:49:20.540
<v Speaker 0>watching has anything they wanna ask before we

00:49:20.540 --> 00:49:22.060
<v Speaker 0>finish up, please feel free to drop it

00:49:22.060 --> 00:49:23.900
<v Speaker 0>into the comment section.

00:49:24.060 --> 00:49:24.540
<v Speaker 0>But I

00:49:25.180 --> 00:49:26.620
<v Speaker 0>looking oh, yeah. I was just doing basically

00:49:26.700 --> 00:49:28.380
<v Speaker 0>I'm looking at your config, but it disappeared.

00:49:28.380 --> 00:49:30.755
<v Speaker 0>But it doesn't matter. I was looking at

00:49:30.755 --> 00:49:33.315
<v Speaker 0>your conflict and you're targeting a deployment called

00:49:33.315 --> 00:49:36.515
<v Speaker 0>IP info. Think it was. Does that inject

00:49:36.515 --> 00:49:37.075
<v Speaker 0>the

00:49:37.475 --> 00:49:39.235
<v Speaker 0>oh, does that work for all the pods

00:49:39.235 --> 00:49:41.155
<v Speaker 0>and the deployment? Is it just a specific

00:49:41.155 --> 00:49:43.660
<v Speaker 0>one? How I mean, it doesn't even matter.

00:49:43.660 --> 00:49:45.340
<v Speaker 0>I'm not sure. Like, how does that work?

00:49:45.900 --> 00:49:46.540
<v Speaker 1>Yeah.

00:49:46.860 --> 00:49:48.620
<v Speaker 1>So in the open source version, what it

00:49:48.620 --> 00:49:50.540
<v Speaker 1>does in the when you specify deployment, you

00:49:50.540 --> 00:49:52.700
<v Speaker 1>just choose a random pod. Like, the first

00:49:52.700 --> 00:49:53.980
<v Speaker 1>one it encounters,

00:49:53.980 --> 00:49:55.020
<v Speaker 1>which means random.

00:49:56.175 --> 00:49:58.335
<v Speaker 1>In the operator, it enables you to really

00:49:58.335 --> 00:50:00.415
<v Speaker 1>work on deployment. So now instead of stealing

00:50:00.415 --> 00:50:01.775
<v Speaker 1>from one pod, you can steal from the

00:50:02.735 --> 00:50:05.295
<v Speaker 1>all of replicas of the same deployment.

00:50:06.495 --> 00:50:07.535
<v Speaker 1>Yes. So it's a good question.

00:50:08.840 --> 00:50:10.120
<v Speaker 2>Okay. Awesome.

00:50:10.200 --> 00:50:12.040
<v Speaker 0>Alright. I'm not sure if Dimitri is on

00:50:12.040 --> 00:50:13.560
<v Speaker 0>your team or not. But Dimitri has commented

00:50:13.560 --> 00:50:16.120
<v Speaker 0>saying that some things can be overwritten by

00:50:16.200 --> 00:50:17.880
<v Speaker 0>environment variables, but not all.

00:50:20.360 --> 00:50:21.960
<v Speaker 0>Is Dimitri on your team or just a

00:50:21.960 --> 00:50:22.760
<v Speaker 0>random helper? Yeah.

00:50:23.835 --> 00:50:24.315
<v Speaker 1>Yeah.

00:50:28.075 --> 00:50:28.475
<v Speaker 2>Alright.

00:50:29.835 --> 00:50:32.075
<v Speaker 0>Perfect. Alright. We got a question from why

00:50:32.075 --> 00:50:33.595
<v Speaker 0>I'm all who messed up again.

00:50:33.915 --> 00:50:35.915
<v Speaker 0>Shame. I guess you could always watch back.

00:50:35.915 --> 00:50:37.840
<v Speaker 0>It's on YouTube. But the question was, can

00:50:37.840 --> 00:50:39.520
<v Speaker 0>I matter to an app running on my

00:50:39.520 --> 00:50:40.160
<v Speaker 0>host?

00:50:40.320 --> 00:50:42.800
<v Speaker 0>Would be perfect for the build to pricing

00:50:42.880 --> 00:50:43.600
<v Speaker 0>cycle.

00:50:43.760 --> 00:50:44.960
<v Speaker 1>Yes.

00:50:44.960 --> 00:50:47.040
<v Speaker 1>Exactly. That that's what we really does.

00:50:48.400 --> 00:50:50.240
<v Speaker 1>And we agree. It's perfect.

00:50:50.880 --> 00:50:53.285
<v Speaker 0>Yeah. Good. Just jump back to the start.

00:50:53.285 --> 00:50:54.964
<v Speaker 0>Check it out. The demo was cool. I

00:50:54.964 --> 00:50:55.925
<v Speaker 0>hope it helps.

00:50:56.244 --> 00:50:58.964
<v Speaker 0>Question from Russell. When you steal traffic, can

00:50:58.964 --> 00:51:00.884
<v Speaker 0>you steal a subset traffic with a certain

00:51:00.884 --> 00:51:01.845
<v Speaker 0>header set?

00:51:02.085 --> 00:51:03.605
<v Speaker 0>I think that's what we showed. Right?

00:51:04.005 --> 00:51:06.580
<v Speaker 1>Yeah. So we showed that. You can still

00:51:06.580 --> 00:51:08.020
<v Speaker 1>base on header filtering.

00:51:08.020 --> 00:51:09.860
<v Speaker 1>You can still base on path, and we're

00:51:09.860 --> 00:51:12.020
<v Speaker 1>happy to add any more filtering

00:51:12.180 --> 00:51:12.740
<v Speaker 1>conditions

00:51:13.540 --> 00:51:15.780
<v Speaker 1>that users want. Okay? Just request it.

00:51:16.955 --> 00:51:19.035
<v Speaker 0>Alright. Thank you from why I'm all I

00:51:19.035 --> 00:51:20.715
<v Speaker 0>guess we confirmed exactly what they needed to

00:51:20.715 --> 00:51:21.915
<v Speaker 0>hear. Alright.

00:51:22.075 --> 00:51:25.195
<v Speaker 0>Let's talk about the future then. I think

00:51:25.195 --> 00:51:27.515
<v Speaker 0>we've covered the problem pretty well. I think

00:51:27.515 --> 00:51:29.275
<v Speaker 0>we've seen there's a really good solution, the

00:51:29.275 --> 00:51:31.750
<v Speaker 0>integration with Versus Code. Any of those intelligent

00:51:31.750 --> 00:51:33.190
<v Speaker 0>people out there. I'm sure it's just as

00:51:33.190 --> 00:51:34.390
<v Speaker 0>good, but

00:51:34.869 --> 00:51:36.549
<v Speaker 0>we now have a tool chain that allows

00:51:36.549 --> 00:51:38.789
<v Speaker 0>us to develop a a pretty strong developer

00:51:38.789 --> 00:51:39.750
<v Speaker 0>experience.

00:51:39.990 --> 00:51:42.950
<v Speaker 0>And what's coming in the future? You've met

00:51:43.109 --> 00:51:44.789
<v Speaker 0>mentioned matter of data for Teams. Maybe you

00:51:44.789 --> 00:51:46.230
<v Speaker 0>can talk about more of it there and

00:51:46.230 --> 00:51:48.125
<v Speaker 0>maybe what else is what what's on your

00:51:48.125 --> 00:51:49.565
<v Speaker 0>road map or agenda for the open source

00:51:49.565 --> 00:51:50.445
<v Speaker 0>plan as well?

00:51:51.165 --> 00:51:51.725
<v Speaker 1>Yeah.

00:51:53.085 --> 00:51:53.725
<v Speaker 1>So

00:51:55.565 --> 00:51:58.365
<v Speaker 1>there is mostly to enhance the experience of

00:51:58.365 --> 00:52:00.845
<v Speaker 1>mirrordial, like, cover more use cases and become,

00:52:00.845 --> 00:52:02.860
<v Speaker 1>like so right now, start mirroring. And when

00:52:02.860 --> 00:52:05.420
<v Speaker 1>we try to to start from the very

00:52:05.420 --> 00:52:08.380
<v Speaker 1>primitive, like, we really like going very lean

00:52:08.380 --> 00:52:10.700
<v Speaker 1>and see what users react to best. That's

00:52:10.700 --> 00:52:12.460
<v Speaker 1>what we did from the start and what's

00:52:12.460 --> 00:52:13.900
<v Speaker 1>we what we want to keep doing. We

00:52:13.900 --> 00:52:15.740
<v Speaker 1>do have, like, a a more,

00:52:16.734 --> 00:52:19.295
<v Speaker 1>like, broad road map, but, essentially, that's what

00:52:19.295 --> 00:52:20.735
<v Speaker 1>we do. But in terms of

00:52:21.455 --> 00:52:23.535
<v Speaker 1>of what we want to do, so so

00:52:25.935 --> 00:52:28.095
<v Speaker 1>so the longer term vision is that community

00:52:28.175 --> 00:52:29.455
<v Speaker 1>starts with a very

00:52:30.140 --> 00:52:33.260
<v Speaker 1>intuitive and naive way. So just steers traffic

00:52:33.260 --> 00:52:35.900
<v Speaker 1>and just redirects traffic to the cluster. Seems

00:52:35.900 --> 00:52:37.740
<v Speaker 1>easy, but it provides a better user experience

00:52:37.740 --> 00:52:39.260
<v Speaker 1>than any other solution

00:52:39.500 --> 00:52:41.740
<v Speaker 1>you would have. But as we develop it,

00:52:41.740 --> 00:52:44.300
<v Speaker 1>we had HTTP header filter. We're gonna have

00:52:44.300 --> 00:52:46.495
<v Speaker 1>application filters for the outgoing traffic. So now

00:52:46.495 --> 00:52:48.895
<v Speaker 1>you can duplicate the Kafka messages. You can

00:52:50.015 --> 00:52:51.855
<v Speaker 1>provide the best way to work on the

00:52:51.855 --> 00:52:53.695
<v Speaker 1>remote environment without

00:52:54.095 --> 00:52:55.295
<v Speaker 1>while controlling

00:52:55.295 --> 00:52:57.215
<v Speaker 1>that your effect on it. So

00:52:58.240 --> 00:52:59.920
<v Speaker 1>that is to make mirrord the

00:53:00.720 --> 00:53:02.160
<v Speaker 1>tool you can use daily,

00:53:02.480 --> 00:53:03.360
<v Speaker 1>and

00:53:03.840 --> 00:53:05.040
<v Speaker 1>enables you,

00:53:05.840 --> 00:53:07.040
<v Speaker 1>let's say, the best

00:53:07.600 --> 00:53:10.400
<v Speaker 1>way of isolating yourself while developing while not

00:53:10.400 --> 00:53:12.160
<v Speaker 1>really spinning up the whole environment. So we

00:53:12.160 --> 00:53:14.245
<v Speaker 1>get the best of both worlds. You get

00:53:14.245 --> 00:53:16.645
<v Speaker 1>a real mature remote environment

00:53:16.725 --> 00:53:19.285
<v Speaker 1>while, you're able to control and not

00:53:20.325 --> 00:53:21.525
<v Speaker 1>contaminate it.

00:53:23.365 --> 00:53:23.685
<v Speaker 0>K.

00:53:26.440 --> 00:53:28.760
<v Speaker 0>Alright. Let's gonna ask the question that's been

00:53:28.760 --> 00:53:29.960
<v Speaker 0>on my head for the last fifty three

00:53:29.960 --> 00:53:30.760
<v Speaker 0>minutes now.

00:53:31.320 --> 00:53:33.000
<v Speaker 0>Why is there a GitHub, like, behind you

00:53:33.000 --> 00:53:34.120
<v Speaker 0>and not a mail there?

00:53:34.520 --> 00:53:35.880
<v Speaker 0>I wanna see one of those lights in

00:53:35.880 --> 00:53:36.440
<v Speaker 0>the mail there.

00:53:38.984 --> 00:53:41.625
<v Speaker 1>Sorry. What's the question? I didn't get it.

00:53:41.625 --> 00:53:43.464
<v Speaker 0>You've got a GitHub lamp behind you. Right?

00:53:43.464 --> 00:53:44.905
<v Speaker 0>The neon sign? I

00:53:45.385 --> 00:53:46.984
<v Speaker 0>mean, I'm looking at the middle there.

00:53:48.664 --> 00:53:49.385
<v Speaker 2>Neon sign.

00:53:50.680 --> 00:53:51.640
<v Speaker 2>Yeah.

00:53:51.640 --> 00:53:53.080
<v Speaker 2>He didn't get a free neon sign from

00:53:53.080 --> 00:53:55.400
<v Speaker 2>metal there, only from GitHub. So Oh, you

00:53:55.400 --> 00:53:56.600
<v Speaker 0>need to make that happen for the next

00:53:56.600 --> 00:53:58.120
<v Speaker 0>time we have an episode. I'll take that.

00:53:58.120 --> 00:54:00.680
<v Speaker 0>Yeah. LED sign. We'll go. We just have

00:54:00.680 --> 00:54:01.560
<v Speaker 1>shots right now.

00:54:03.335 --> 00:54:06.055
<v Speaker 1>Let's see it. One second. Yeah. There we

00:54:06.055 --> 00:54:08.375
<v Speaker 0>go. The full thing. Nice. Very cool.

00:54:09.734 --> 00:54:11.575
<v Speaker 0>Like it. Way, Al is the

00:54:12.055 --> 00:54:12.695
<v Speaker 1>creative

00:54:13.174 --> 00:54:14.214
<v Speaker 1>director of.

00:54:14.454 --> 00:54:17.174
<v Speaker 1>All the ideas of design that's where it

00:54:17.174 --> 00:54:19.370
<v Speaker 1>come from is steam in hell.

00:54:20.010 --> 00:54:21.530
<v Speaker 1>I'm like, oh, no. It's just I

00:54:21.930 --> 00:54:24.970
<v Speaker 2>do outsource, so I know the audience. So

00:54:25.690 --> 00:54:28.010
<v Speaker 1>Yeah. I look into brand enhancement,

00:54:28.010 --> 00:54:30.090
<v Speaker 1>but it doesn't do actual design. It's it's

00:54:30.090 --> 00:54:32.695
<v Speaker 1>better than, like, it's on my level. So

00:54:33.655 --> 00:54:35.335
<v Speaker 0>Yeah. I mean, I do a lot of

00:54:35.335 --> 00:54:36.855
<v Speaker 0>front end design, but I go I go

00:54:36.855 --> 00:54:38.615
<v Speaker 0>as far as black text in my background.

00:54:38.615 --> 00:54:39.815
<v Speaker 0>That's as good as I can get with

00:54:39.815 --> 00:54:40.535
<v Speaker 0>CSS.

00:54:42.295 --> 00:54:42.935
<v Speaker 1>Same.

00:54:43.175 --> 00:54:43.575
<v Speaker 0>Alright.

00:54:43.980 --> 00:54:46.860
<v Speaker 0>Where can people learn more? Do you have

00:54:46.860 --> 00:54:49.820
<v Speaker 0>a Discord, a Slack community, a Discourse? How

00:54:49.820 --> 00:54:51.260
<v Speaker 0>can people get involved?

00:54:51.660 --> 00:54:53.500
<v Speaker 0>You know, do you have PRs?

00:54:53.500 --> 00:54:56.460
<v Speaker 0>Welcome. Issues, easy, get started, all labels. Like,

00:54:56.895 --> 00:54:58.735
<v Speaker 0>tell people how they can help you out

00:54:58.735 --> 00:55:00.895
<v Speaker 0>with with what you're doing at mirrordea. So

00:55:01.775 --> 00:55:02.735
<v Speaker 1>we have a

00:55:03.215 --> 00:55:04.335
<v Speaker 1>disco channel.

00:55:04.735 --> 00:55:06.575
<v Speaker 1>We like to see it as a back

00:55:06.575 --> 00:55:09.135
<v Speaker 1>end engineers community. So it's like you have

00:55:09.135 --> 00:55:11.055
<v Speaker 1>mirroring channels and you have general channels. You

00:55:11.055 --> 00:55:13.000
<v Speaker 1>can use any of those. Like, if you

00:55:13.000 --> 00:55:14.759
<v Speaker 1>use mirroring, you can ask questions for support

00:55:14.759 --> 00:55:15.480
<v Speaker 1>or maybe

00:55:16.920 --> 00:55:18.839
<v Speaker 1>get mentored for a PR.

00:55:19.079 --> 00:55:21.000
<v Speaker 1>And, yeah, we welcome PRs to all of

00:55:21.000 --> 00:55:23.079
<v Speaker 1>our repositories. Like, there's big open issues. We

00:55:23.079 --> 00:55:23.880
<v Speaker 1>try to level those.

00:55:24.835 --> 00:55:26.675
<v Speaker 1>So if you want to hit an issue,

00:55:26.675 --> 00:55:28.675
<v Speaker 1>let us know. Happy to jump on this

00:55:28.675 --> 00:55:30.115
<v Speaker 1>call, explain it further,

00:55:30.915 --> 00:55:31.795
<v Speaker 1>help you

00:55:32.035 --> 00:55:33.555
<v Speaker 1>get started, help you

00:55:33.955 --> 00:55:36.275
<v Speaker 1>get into Rust, get into Kubernetes, this kind

00:55:36.275 --> 00:55:36.835
<v Speaker 1>of stuff.

00:55:37.475 --> 00:55:39.235
<v Speaker 1>I'm not sure if it's the first project

00:55:39.235 --> 00:55:41.290
<v Speaker 1>to get into Rust, to be honest, because,

00:55:41.369 --> 00:55:43.290
<v Speaker 1>like, we have maybe at some point that

00:55:43.290 --> 00:55:44.170
<v Speaker 1>are simple.

00:55:44.650 --> 00:55:46.329
<v Speaker 1>But, like, if you want to do advanced

00:55:46.329 --> 00:55:47.050
<v Speaker 1>Rust,

00:55:47.369 --> 00:55:49.690
<v Speaker 1>I would say that's a very good project

00:55:49.690 --> 00:55:50.569
<v Speaker 1>to look at it.

00:55:52.625 --> 00:55:55.585
<v Speaker 1>Yeah. So happy to see all of you

00:55:55.585 --> 00:55:56.705
<v Speaker 2>in Discord,

00:55:57.984 --> 00:56:00.785
<v Speaker 1>and feel free to reach out Discord, GitHub.

00:56:02.065 --> 00:56:04.385
<v Speaker 1>I don't know. Any means of communication

00:56:04.625 --> 00:56:06.944
<v Speaker 1>that is not, like, coming to my front

00:56:06.944 --> 00:56:08.520
<v Speaker 1>door. Like, you can come in to my

00:56:08.520 --> 00:56:11.480
<v Speaker 1>front door, but, like, invite them. So Awesome.

00:56:13.320 --> 00:56:15.320
<v Speaker 0>Well, I encourage people to join the Discord.

00:56:15.320 --> 00:56:16.440
<v Speaker 0>Check out the project.

00:56:17.000 --> 00:56:18.840
<v Speaker 0>If you enjoy it, you run into any

00:56:18.840 --> 00:56:21.885
<v Speaker 0>problems, open issues, comment on this video, and

00:56:21.885 --> 00:56:23.485
<v Speaker 0>we'll do your best to get you some

00:56:23.485 --> 00:56:24.045
<v Speaker 0>help.

00:56:24.365 --> 00:56:26.685
<v Speaker 0>We have one question as snuck in right

00:56:26.685 --> 00:56:28.205
<v Speaker 0>at the end there. So we'll answer that,

00:56:28.205 --> 00:56:29.805
<v Speaker 0>and then we'll wrap up for today. But

00:56:29.805 --> 00:56:31.165
<v Speaker 0>YMO asks,

00:56:31.725 --> 00:56:33.805
<v Speaker 0>there is Go code in the repository. Does

00:56:33.805 --> 00:56:35.085
<v Speaker 0>that mean that you have an SDK and

00:56:35.085 --> 00:56:36.285
<v Speaker 0>Go people can embed?

00:56:37.340 --> 00:56:38.300
<v Speaker 1>So

00:56:38.300 --> 00:56:40.700
<v Speaker 1>that's a great question, actually, because we don't

00:56:40.700 --> 00:56:43.260
<v Speaker 1>have any SDK. You just run your process

00:56:43.260 --> 00:56:44.140
<v Speaker 1>using Unity.

00:56:44.380 --> 00:56:45.820
<v Speaker 1>I didn't show that, but you can run

00:56:45.820 --> 00:56:47.740
<v Speaker 1>curl using Unity. Like, we had a user

00:56:47.740 --> 00:56:48.540
<v Speaker 1>saying that

00:56:49.340 --> 00:56:50.140
<v Speaker 1>that

00:56:50.780 --> 00:56:53.035
<v Speaker 1>used to upload configuration into the cluster. I

00:56:53.035 --> 00:56:54.635
<v Speaker 1>assume that was, like, a XTP or something

00:56:54.635 --> 00:56:56.875
<v Speaker 1>like that. And it just just kill to

00:56:56.875 --> 00:56:59.915
<v Speaker 1>post that request into the XTP.

00:57:00.075 --> 00:57:01.595
<v Speaker 1>So you can run everything

00:57:01.755 --> 00:57:03.755
<v Speaker 1>on your machine. So go comparison to a

00:57:03.755 --> 00:57:05.675
<v Speaker 1>binary, and then we run it using. So

00:57:05.690 --> 00:57:07.770
<v Speaker 1>anything that is a binary, can use mirroring

00:57:07.770 --> 00:57:10.410
<v Speaker 1>with. No SDK. No integration needed to do

00:57:10.410 --> 00:57:12.970
<v Speaker 1>from your side. Just plug it into your

00:57:12.970 --> 00:57:14.730
<v Speaker 1>ID and start working on it.

00:57:15.850 --> 00:57:18.250
<v Speaker 0>Awesome. Thank you for that. Alright. We'll finish

00:57:18.250 --> 00:57:19.944
<v Speaker 0>with Russell's comment saying thank you for the

00:57:19.944 --> 00:57:21.385
<v Speaker 0>demo. Matter of the looks like the future

00:57:21.385 --> 00:57:23.464
<v Speaker 0>of developing in Kubernetes. I don't think I

00:57:23.464 --> 00:57:25.865
<v Speaker 0>can see anything better than that. So we'll

00:57:25.865 --> 00:57:27.944
<v Speaker 0>wrap up. And thank you both for joining

00:57:27.944 --> 00:57:29.944
<v Speaker 0>me and for sharing your knowledge and everything

00:57:29.944 --> 00:57:31.305
<v Speaker 0>that we've learned about Matter of the

00:57:32.345 --> 00:57:34.425
<v Speaker 0>is there any final words before we finish

00:57:34.425 --> 00:57:34.585
<v Speaker 0>up?

00:57:35.520 --> 00:57:37.280
<v Speaker 1>Wait. We show pets? I I can I

00:57:37.280 --> 00:57:39.920
<v Speaker 1>can bring Jimmy in? Yeah. Yeah. Yeah. Right.

00:57:39.920 --> 00:57:40.320
<v Speaker 1>Jimmy.

00:57:41.280 --> 00:57:42.320
<v Speaker 2>Jimmy. He

00:57:43.680 --> 00:57:44.800
<v Speaker 2>was crying. So

00:57:47.200 --> 00:57:48.080
<v Speaker 1>This is Jimmy.

00:57:48.805 --> 00:57:50.885
<v Speaker 1>He's a little demon.

00:57:52.485 --> 00:57:54.805
<v Speaker 1>He wants to Yeah. Anyone joining Middlebury gets

00:57:54.805 --> 00:57:56.165
<v Speaker 2>a free yeah.

00:57:56.565 --> 00:57:57.525
<v Speaker 0>A free dog?

00:57:57.925 --> 00:58:00.645
<v Speaker 2>Free dog. Yeah. Did we not mention that?

00:58:01.599 --> 00:58:02.480
<v Speaker 2>Alright,

00:58:03.599 --> 00:58:05.600
<v Speaker 0>I'll send my CV right after this call.

00:58:06.880 --> 00:58:07.840
<v Speaker 1>Yeah. Yeah.

00:58:08.720 --> 00:58:10.560
<v Speaker 0>Alright. Any more pets to be shown? You

00:58:10.560 --> 00:58:11.440
<v Speaker 0>got one there?

00:58:12.560 --> 00:58:15.280
<v Speaker 1>Yeah. It's serious. It's haunted.

00:58:16.455 --> 00:58:17.735
<v Speaker 2>And then all that.

00:58:18.935 --> 00:58:20.215
<v Speaker 0>I don't I don't have mine in my

00:58:20.215 --> 00:58:21.975
<v Speaker 0>office. My my pets are all at home,

00:58:21.975 --> 00:58:24.055
<v Speaker 0>but next time, for sure, I'll bring some

00:58:24.055 --> 00:58:24.935
<v Speaker 0>in for the day.

00:58:25.895 --> 00:58:28.375
<v Speaker 0>Alright. Well, thank you again. It's been an

00:58:28.375 --> 00:58:30.790
<v Speaker 0>absolute pleasure. And I really love what are

00:58:30.790 --> 00:58:33.030
<v Speaker 0>doing. I hope everyone else enjoys this demo,

00:58:33.030 --> 00:58:34.549
<v Speaker 0>and we'll see you all soon. Have a

00:58:34.549 --> 00:58:35.190
<v Speaker 0>good day.

00:58:35.670 --> 00:58:37.589
<v Speaker 1>Awesome. Thank you. Bye, everyone.
