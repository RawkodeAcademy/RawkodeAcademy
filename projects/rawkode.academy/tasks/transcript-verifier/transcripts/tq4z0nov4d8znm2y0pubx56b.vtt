WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: f5234630-84b8-4c0c-8dc8-90edd75e0896
Created: 2025-04-29T22:36:26.307Z
Duration: 4110.0225
Channels: 1

00:02:28.340 --> 00:02:31.060
<v Speaker 0>Hello. And we are now live.

00:02:31.700 --> 00:02:33.380
<v Speaker 0>Hello, Jason. How are you?

00:02:33.859 --> 00:02:36.019
<v Speaker 1>I'm doing good. How are you doing today?

00:02:36.465 --> 00:02:39.185
<v Speaker 0>I'm very well. Thank you. I'm excited.

00:02:39.185 --> 00:02:41.905
<v Speaker 0>I'm I'm really looking forward to today's session.

00:02:42.545 --> 00:02:44.785
<v Speaker 0>So for people that are tuning in,

00:02:45.105 --> 00:02:46.705
<v Speaker 0>we are going to cover

00:02:47.425 --> 00:02:50.545
<v Speaker 0>Kubernetes deployments using the Cluster API

00:02:50.940 --> 00:02:54.060
<v Speaker 0>on bare metal compute using Packet host.

00:02:54.780 --> 00:02:56.459
<v Speaker 0>Now I know a few of those words,

00:02:56.459 --> 00:02:59.500
<v Speaker 0>which is really cool. And I'm expecting Jason

00:02:59.500 --> 00:03:02.459
<v Speaker 0>here who now we're colleagues. We work together

00:03:02.459 --> 00:03:04.700
<v Speaker 0>at Packet as of, what, two weeks ago

00:03:04.700 --> 00:03:04.940
<v Speaker 0>now?

00:03:05.865 --> 00:03:08.025
<v Speaker 1>I think this is my third week. So

00:03:08.185 --> 00:03:10.425
<v Speaker 1>Third week. Yeah. It's

00:03:10.505 --> 00:03:12.825
<v Speaker 1>it's gone fast, but it's been fun.

00:03:13.225 --> 00:03:14.025
<v Speaker 0>Awesome.

00:03:14.425 --> 00:03:15.145
<v Speaker 0>So do

00:03:15.625 --> 00:03:17.625
<v Speaker 0>if you don't mind, can you just

00:03:18.345 --> 00:03:21.590
<v Speaker 0>explain to me what Kubernetes is? I will

00:03:21.590 --> 00:03:23.830
<v Speaker 0>do that to you. What Cluster API

00:03:24.150 --> 00:03:26.550
<v Speaker 0>what the Cluster API is? Let's assume I'm

00:03:26.550 --> 00:03:28.230
<v Speaker 0>okay with Kubernetes and and

00:03:30.069 --> 00:03:32.550
<v Speaker 1>So Cluster API is basically

00:03:32.870 --> 00:03:34.150
<v Speaker 1>a way

00:03:34.150 --> 00:03:35.510
<v Speaker 1>of declarative

00:03:36.205 --> 00:03:38.125
<v Speaker 1>declaratively defining Kubernetes

00:03:38.125 --> 00:03:39.085
<v Speaker 1>clusters

00:03:39.405 --> 00:03:41.485
<v Speaker 1>using Kubernetes primitives.

00:03:41.965 --> 00:03:42.525
<v Speaker 1>So,

00:03:42.765 --> 00:03:43.965
<v Speaker 1>you know, basically,

00:03:44.045 --> 00:03:45.725
<v Speaker 1>when the project was started,

00:03:46.205 --> 00:03:48.444
<v Speaker 1>you know, we decided that, you know, we

00:03:48.444 --> 00:03:50.845
<v Speaker 1>have this declarative system for defining,

00:03:51.150 --> 00:03:53.790
<v Speaker 1>you know, basically applications and running them.

00:03:54.189 --> 00:03:56.030
<v Speaker 1>Wouldn't it be great if we could also,

00:03:56.030 --> 00:03:58.350
<v Speaker 1>you know, define infrastructure this way

00:03:58.590 --> 00:03:59.630
<v Speaker 1>and manage

00:03:59.790 --> 00:04:03.310
<v Speaker 1>the Kubernetes clusters themselves this way? So that's

00:04:03.310 --> 00:04:04.350
<v Speaker 1>kind of what,

00:04:04.750 --> 00:04:05.150
<v Speaker 1>you know,

00:04:05.905 --> 00:04:08.305
<v Speaker 1>started Cluster API as a project

00:04:08.545 --> 00:04:10.944
<v Speaker 1>was taking those declarative concepts that you get

00:04:10.944 --> 00:04:13.425
<v Speaker 1>in Kubernetes and moving them over to

00:04:14.224 --> 00:04:15.985
<v Speaker 1>not just infrastructure management,

00:04:15.985 --> 00:04:18.785
<v Speaker 1>but specifically managing Kubernetes clusters themselves.

00:04:19.480 --> 00:04:21.400
<v Speaker 1>And that includes, you know,

00:04:21.880 --> 00:04:24.200
<v Speaker 1>basically, the entire life cycle of a Kubernetes

00:04:24.200 --> 00:04:26.440
<v Speaker 1>cluster from installation

00:04:26.920 --> 00:04:27.800
<v Speaker 1>to

00:04:27.800 --> 00:04:30.440
<v Speaker 1>ongoing operation. You would wanna scale the cluster

00:04:30.440 --> 00:04:32.120
<v Speaker 1>up, scale the cluster down

00:04:32.515 --> 00:04:34.035
<v Speaker 1>to upgrades,

00:04:34.035 --> 00:04:36.355
<v Speaker 1>and then tearing those clusters down when you're

00:04:36.355 --> 00:04:37.155
<v Speaker 1>done with them.

00:04:39.155 --> 00:04:41.475
<v Speaker 0>Okay. So that so I can define a

00:04:41.475 --> 00:04:44.035
<v Speaker 0>Kubernetes cluster instead of Kubernetes cluster to get

00:04:44.035 --> 00:04:44.915
<v Speaker 0>a Kubernetes cluster?

00:04:45.760 --> 00:04:47.520
<v Speaker 1>Yes. Right. Awesome.

00:04:48.080 --> 00:04:51.120
<v Speaker 0>So I guess my first question there is,

00:04:51.120 --> 00:04:52.080
<v Speaker 0>is this a

00:04:53.520 --> 00:04:55.200
<v Speaker 0>I I mean, when I first started using

00:04:55.200 --> 00:04:58.000
<v Speaker 0>Kubernetes, the model seemed to be that we

00:04:58.160 --> 00:04:59.675
<v Speaker 0>or at least maybe it's the organizations I

00:04:59.675 --> 00:05:01.355
<v Speaker 0>was working with. We had one cluster to

00:05:01.355 --> 00:05:03.275
<v Speaker 0>rule them all. Like, one massive cluster, we

00:05:03.275 --> 00:05:05.035
<v Speaker 0>ran all of our workloads on it.

00:05:05.435 --> 00:05:07.595
<v Speaker 0>And is that not best practice anymore? Is

00:05:07.595 --> 00:05:08.795
<v Speaker 0>the cluster API

00:05:08.955 --> 00:05:11.195
<v Speaker 0>a sign that we should have smaller many

00:05:11.195 --> 00:05:12.794
<v Speaker 0>clusters many smaller clusters?

00:05:13.740 --> 00:05:16.140
<v Speaker 1>So I think there are varying use cases

00:05:16.380 --> 00:05:19.020
<v Speaker 1>depending on your workload, what you're trying to

00:05:19.020 --> 00:05:21.420
<v Speaker 1>get out of the workload that will determine,

00:05:21.740 --> 00:05:23.820
<v Speaker 1>you know, how big of a Kubernetes cluster

00:05:23.820 --> 00:05:24.940
<v Speaker 1>are you running.

00:05:25.180 --> 00:05:27.340
<v Speaker 1>You know, are you specifically trying to

00:05:28.165 --> 00:05:31.365
<v Speaker 1>fully optimize your resources to the maximum to

00:05:31.365 --> 00:05:34.085
<v Speaker 1>get maximum bin packing for your applications?

00:05:34.485 --> 00:05:36.005
<v Speaker 1>In that case, it makes sense to run

00:05:36.005 --> 00:05:37.605
<v Speaker 1>a really large cluster

00:05:37.685 --> 00:05:39.925
<v Speaker 1>and run everything in that one cluster because

00:05:39.925 --> 00:05:42.189
<v Speaker 1>you can get kind of the best resource

00:05:42.189 --> 00:05:43.070
<v Speaker 1>utilization

00:05:43.229 --> 00:05:45.150
<v Speaker 1>for your applications that way.

00:05:45.470 --> 00:05:48.990
<v Speaker 1>However, it also creates basically a singular failure

00:05:48.990 --> 00:05:51.310
<v Speaker 1>domain around that Kubernetes cluster.

00:05:51.710 --> 00:05:53.629
<v Speaker 1>So even though you would loo if you

00:05:53.629 --> 00:05:55.710
<v Speaker 1>lose the control plane of a Kubernetes cluster,

00:05:56.435 --> 00:05:58.995
<v Speaker 1>you generally still have your applications running in

00:05:58.995 --> 00:05:59.475
<v Speaker 1>there,

00:06:00.435 --> 00:06:02.354
<v Speaker 1>but you'd lose the ability to manage those

00:06:02.354 --> 00:06:03.155
<v Speaker 1>applications.

00:06:04.115 --> 00:06:06.115
<v Speaker 1>You know, you can't scale those applications to

00:06:06.115 --> 00:06:08.194
<v Speaker 1>meet demand. You can't push updates to those

00:06:08.194 --> 00:06:11.300
<v Speaker 1>applications if the control plane is down. So,

00:06:11.300 --> 00:06:13.460
<v Speaker 1>you know, being able to, you know, spin

00:06:13.460 --> 00:06:15.700
<v Speaker 1>up multiple Kubernetes clusters

00:06:15.940 --> 00:06:18.820
<v Speaker 1>allows you to create much smaller failure domains

00:06:18.820 --> 00:06:19.540
<v Speaker 1>around

00:06:19.780 --> 00:06:21.220
<v Speaker 1>the clusters themselves.

00:06:21.780 --> 00:06:24.395
<v Speaker 1>And in the past, it was pretty prohibitive

00:06:24.395 --> 00:06:26.555
<v Speaker 1>to have many small clusters

00:06:26.875 --> 00:06:29.995
<v Speaker 1>mainly because, you know, installing

00:06:29.995 --> 00:06:32.475
<v Speaker 1>and managing the life cycle of those clusters

00:06:32.475 --> 00:06:34.875
<v Speaker 1>was a very labor intensive process.

00:06:35.620 --> 00:06:37.620
<v Speaker 1>And if you can declaratively

00:06:37.620 --> 00:06:39.860
<v Speaker 1>define those clusters and manage them,

00:06:40.259 --> 00:06:42.259
<v Speaker 1>then it's much easier to spin up and

00:06:42.259 --> 00:06:44.180
<v Speaker 1>tear down clusters as you need them.

00:06:46.340 --> 00:06:46.980
<v Speaker 0>Okay.

00:06:47.220 --> 00:06:48.099
<v Speaker 0>So

00:06:48.965 --> 00:06:51.445
<v Speaker 0>I write a manifest. We're gonna walk through

00:06:51.445 --> 00:06:53.685
<v Speaker 0>all of this. So, you know, if you're

00:06:53.685 --> 00:06:55.045
<v Speaker 0>tuned in, you can you can watch me

00:06:55.045 --> 00:06:56.485
<v Speaker 0>make a mess of this or hopefully be

00:06:56.485 --> 00:06:57.205
<v Speaker 0>successful.

00:06:57.365 --> 00:06:59.285
<v Speaker 0>But I write a manifest to spin up

00:06:59.285 --> 00:07:00.405
<v Speaker 0>a Kubernetes cluster.

00:07:01.340 --> 00:07:02.139
<v Speaker 0>Now

00:07:02.539 --> 00:07:04.780
<v Speaker 0>the state of that cluster, I'm assuming, is

00:07:04.780 --> 00:07:07.580
<v Speaker 0>stored within the controller cluster.

00:07:07.660 --> 00:07:10.460
<v Speaker 0>Is that using Kubernetes primitives as well, like

00:07:10.460 --> 00:07:12.940
<v Speaker 0>secrets, or how how does that work?

00:07:14.205 --> 00:07:15.245
<v Speaker 1>Yeah. So

00:07:15.485 --> 00:07:18.445
<v Speaker 1>we generally have the concept of a management

00:07:18.445 --> 00:07:19.485
<v Speaker 1>cluster with

00:07:19.805 --> 00:07:22.525
<v Speaker 1>Cluster API, and that's basically just a Kubernetes

00:07:22.525 --> 00:07:25.645
<v Speaker 1>cluster that is running the Cluster API controllers

00:07:25.645 --> 00:07:26.125
<v Speaker 1>themselves.

00:07:26.840 --> 00:07:27.720
<v Speaker 1>And

00:07:27.720 --> 00:07:30.200
<v Speaker 1>that will store kind of the external state

00:07:30.200 --> 00:07:33.560
<v Speaker 1>of the cluster, you know, what cloud provider

00:07:33.560 --> 00:07:34.520
<v Speaker 1>resources

00:07:35.000 --> 00:07:37.640
<v Speaker 1>you're using for that cluster, how many

00:07:38.520 --> 00:07:40.840
<v Speaker 1>nodes you have in that cluster, what's the

00:07:40.840 --> 00:07:42.675
<v Speaker 1>state of the control plane, which version is

00:07:42.675 --> 00:07:43.794
<v Speaker 1>that control plane,

00:07:44.275 --> 00:07:45.315
<v Speaker 1>things like that.

00:07:46.034 --> 00:07:49.474
<v Speaker 1>The actual state for the workload clusters themselves,

00:07:49.474 --> 00:07:51.715
<v Speaker 1>which we, you know, we refer to the

00:07:51.715 --> 00:07:54.594
<v Speaker 1>clusters that are managed by cluster APIs, workload

00:07:54.594 --> 00:07:55.074
<v Speaker 1>cluster,

00:07:55.910 --> 00:07:58.630
<v Speaker 1>that's stored within the etcd

00:07:59.430 --> 00:08:02.870
<v Speaker 1>cluster that's present inside that cluster itself.

00:08:03.430 --> 00:08:06.150
<v Speaker 1>So, you know, if the management cluster goes

00:08:06.150 --> 00:08:06.790
<v Speaker 1>away

00:08:07.110 --> 00:08:08.070
<v Speaker 1>for any reason,

00:08:08.615 --> 00:08:11.175
<v Speaker 1>you know, the clusters are still fully functional

00:08:11.175 --> 00:08:13.175
<v Speaker 1>and the control plans for those clusters are

00:08:13.175 --> 00:08:14.455
<v Speaker 1>still fully functional.

00:08:14.615 --> 00:08:16.215
<v Speaker 1>The only thing that you really lose is

00:08:16.215 --> 00:08:17.495
<v Speaker 1>the ability to

00:08:18.295 --> 00:08:21.735
<v Speaker 1>manage the individual clusters until you restore that

00:08:21.735 --> 00:08:22.535
<v Speaker 1>management cluster.

00:08:24.800 --> 00:08:26.560
<v Speaker 0>So that makes me think. I mean, could

00:08:26.560 --> 00:08:29.199
<v Speaker 0>I use a GitOps model for the management

00:08:29.199 --> 00:08:30.639
<v Speaker 0>cluster to be able to tear that down

00:08:30.639 --> 00:08:32.640
<v Speaker 0>and restore that relatively

00:08:32.640 --> 00:08:33.520
<v Speaker 0>painlessly?

00:08:34.240 --> 00:08:35.200
<v Speaker 1>Absolutely.

00:08:35.360 --> 00:08:37.200
<v Speaker 1>That was the idea behind

00:08:37.784 --> 00:08:40.105
<v Speaker 1>driving a declarative model was,

00:08:40.745 --> 00:08:42.584
<v Speaker 1>you know, people already have

00:08:43.304 --> 00:08:47.225
<v Speaker 1>methods of storing, you know, declarative resources,

00:08:47.305 --> 00:08:50.985
<v Speaker 1>whether it's more traditional configuration management like Puppet

00:08:50.985 --> 00:08:51.865
<v Speaker 1>Chef or

00:08:52.820 --> 00:08:55.620
<v Speaker 1>even CF engine or or using

00:08:55.620 --> 00:08:58.420
<v Speaker 1>a more cloud native model like GitOps,

00:08:58.820 --> 00:09:00.900
<v Speaker 1>you know, they can use those same

00:09:01.140 --> 00:09:04.580
<v Speaker 1>tools to manage Kubernetes clusters with Cluster API.

00:09:05.665 --> 00:09:06.385
<v Speaker 0>Awesome.

00:09:07.185 --> 00:09:10.545
<v Speaker 0>Alright. Subjective question. Is Cluster API the best

00:09:10.545 --> 00:09:12.465
<v Speaker 0>way to deploy a new cluster?

00:09:14.145 --> 00:09:16.465
<v Speaker 1>And I will say, you know, it really

00:09:16.465 --> 00:09:17.825
<v Speaker 1>depends on your use cases.

00:09:18.800 --> 00:09:20.960
<v Speaker 1>There are some folks that are already using

00:09:20.960 --> 00:09:22.960
<v Speaker 1>other tooling that exists,

00:09:23.280 --> 00:09:25.760
<v Speaker 1>in which case, you know, that's something that

00:09:25.760 --> 00:09:27.760
<v Speaker 1>their group knows already.

00:09:28.880 --> 00:09:31.360
<v Speaker 1>It generally makes sense to, you know, continue

00:09:31.360 --> 00:09:33.440
<v Speaker 1>using what you know if you're happy with

00:09:33.440 --> 00:09:33.600
<v Speaker 1>it.

00:09:34.375 --> 00:09:36.535
<v Speaker 1>If you are searching for something new, I

00:09:36.535 --> 00:09:40.375
<v Speaker 1>would suggest at least exploring Cluster API.

00:09:40.774 --> 00:09:43.095
<v Speaker 1>And what we're seeing is is,

00:09:43.495 --> 00:09:45.334
<v Speaker 1>you know, when we built Cluster API, we

00:09:45.334 --> 00:09:47.255
<v Speaker 1>didn't necessarily build it as

00:09:47.840 --> 00:09:49.600
<v Speaker 1>the end user interface,

00:09:49.680 --> 00:09:52.480
<v Speaker 1>you know, for installing Kubernetes clusters. It's not

00:09:52.480 --> 00:09:55.040
<v Speaker 1>an easy button necessarily to Kubernetes.

00:09:55.680 --> 00:09:58.960
<v Speaker 1>The idea was specifically around trying to build

00:09:58.960 --> 00:10:01.360
<v Speaker 1>something that higher level tooling could

00:10:01.520 --> 00:10:04.584
<v Speaker 1>build upon to kind of create those easy

00:10:04.584 --> 00:10:05.865
<v Speaker 1>button installers.

00:10:06.024 --> 00:10:08.425
<v Speaker 1>And we're starting to see adoption

00:10:09.305 --> 00:10:10.024
<v Speaker 1>for,

00:10:10.265 --> 00:10:12.985
<v Speaker 1>know, other tooling with Cluster API.

00:10:13.545 --> 00:10:14.585
<v Speaker 1>For example,

00:10:14.745 --> 00:10:15.144
<v Speaker 1>you know,

00:10:16.600 --> 00:10:18.360
<v Speaker 1>there there's actually,

00:10:18.680 --> 00:10:21.240
<v Speaker 1>you know, Kubernetes products on the market today

00:10:21.240 --> 00:10:23.720
<v Speaker 1>that run based on Cluster API on the

00:10:23.720 --> 00:10:24.440
<v Speaker 1>back end.

00:10:25.879 --> 00:10:27.240
<v Speaker 0>Okay. That's

00:10:27.399 --> 00:10:28.199
<v Speaker 0>really cool.

00:10:28.765 --> 00:10:30.765
<v Speaker 0>We already have our first question from a

00:10:30.765 --> 00:10:33.005
<v Speaker 0>familiar face, so I'm gonna drop that in.

00:10:33.725 --> 00:10:35.404
<v Speaker 0>From Daniel Fennerin,

00:10:35.725 --> 00:10:37.805
<v Speaker 0>why do we think the Cluster API came

00:10:37.805 --> 00:10:40.445
<v Speaker 0>about? What were the issues with existing tooling?

00:10:40.445 --> 00:10:42.605
<v Speaker 0>And he mentions KubeSpray as an example.

00:10:44.420 --> 00:10:47.620
<v Speaker 1>So there were various different issues depending on

00:10:47.620 --> 00:10:50.100
<v Speaker 1>which tool you're talking about. And I don't

00:10:50.100 --> 00:10:52.420
<v Speaker 1>necessarily wanna pick on any specific tool because

00:10:52.420 --> 00:10:54.740
<v Speaker 1>all of these tools came about because of

00:10:55.140 --> 00:10:57.140
<v Speaker 1>specific needs that weren't met at the time.

00:10:58.295 --> 00:11:00.774
<v Speaker 1>But one of the challenges is is that

00:11:00.774 --> 00:11:02.615
<v Speaker 1>a lot of the tooling may be very

00:11:02.615 --> 00:11:05.255
<v Speaker 1>specific with how you need to run it.

00:11:05.255 --> 00:11:07.255
<v Speaker 1>You need to use a specific type

00:11:07.654 --> 00:11:08.935
<v Speaker 1>of configuration

00:11:08.935 --> 00:11:12.089
<v Speaker 1>management tool to manage your clusters.

00:11:12.490 --> 00:11:13.130
<v Speaker 1>Or,

00:11:13.850 --> 00:11:15.850
<v Speaker 1>you know, it was a very they have

00:11:15.850 --> 00:11:17.850
<v Speaker 1>very imperative models. You have to run the

00:11:17.850 --> 00:11:20.010
<v Speaker 1>installer. You have to run the upgrader,

00:11:20.170 --> 00:11:21.769
<v Speaker 1>and you have to build if you want

00:11:21.769 --> 00:11:23.529
<v Speaker 1>to have declarative management, you would have to

00:11:23.529 --> 00:11:24.730
<v Speaker 1>build that around the tooling.

00:11:25.524 --> 00:11:28.245
<v Speaker 1>So, you know, the idea with Cluster API

00:11:28.245 --> 00:11:29.685
<v Speaker 1>was specifically

00:11:30.165 --> 00:11:32.165
<v Speaker 1>not being overly opinionated

00:11:32.165 --> 00:11:33.445
<v Speaker 1>in those areas

00:11:33.605 --> 00:11:35.045
<v Speaker 1>so that it can be used in a

00:11:35.045 --> 00:11:36.885
<v Speaker 1>more general purpose fashion

00:11:37.205 --> 00:11:40.565
<v Speaker 1>and, ideally, would gain adoption from those more

00:11:41.040 --> 00:11:42.800
<v Speaker 1>kind of opinionated tools.

00:11:44.560 --> 00:11:48.399
<v Speaker 0>Okay. Right. I'm excited. I'm definitely interested to

00:11:48.399 --> 00:11:49.920
<v Speaker 0>see how far I can get along here.

00:11:49.920 --> 00:11:50.480
<v Speaker 0>So

00:11:50.800 --> 00:11:53.199
<v Speaker 0>what we're gonna do now is we're gonna

00:11:53.199 --> 00:11:54.480
<v Speaker 0>just use the documentation.

00:11:55.154 --> 00:11:56.675
<v Speaker 0>I'm gonna do my best to walk through

00:11:56.675 --> 00:11:58.834
<v Speaker 0>these steps. I have your wonderful guidance as

00:11:58.834 --> 00:12:00.915
<v Speaker 0>I go. What I would suggest to anyone

00:12:00.915 --> 00:12:02.755
<v Speaker 0>who's watching, if you have questions, you can

00:12:02.755 --> 00:12:04.115
<v Speaker 0>drop them into YouTube,

00:12:04.435 --> 00:12:06.675
<v Speaker 0>Twitter, or Twitch, and we will do our

00:12:06.675 --> 00:12:08.115
<v Speaker 0>best to answer them as we go.

00:12:09.569 --> 00:12:10.690
<v Speaker 0>So let's

00:12:11.410 --> 00:12:12.769
<v Speaker 0>pop open my screen.

00:12:13.329 --> 00:12:16.130
<v Speaker 0>We are gonna deploy on Packet today. There

00:12:16.130 --> 00:12:19.170
<v Speaker 0>is a Packet provider for the Cluster API.

00:12:20.050 --> 00:12:22.209
<v Speaker 0>I always see that shortened to CAPI. Do

00:12:22.209 --> 00:12:23.009
<v Speaker 0>we call it CAPI?

00:12:24.855 --> 00:12:27.654
<v Speaker 1>So it's it's a challenge because

00:12:27.815 --> 00:12:29.415
<v Speaker 1>if we, you know,

00:12:29.975 --> 00:12:32.135
<v Speaker 1>call out the long name, it's it's really

00:12:32.135 --> 00:12:34.055
<v Speaker 1>a mouthful. And if you say it a

00:12:34.055 --> 00:12:36.214
<v Speaker 1>lot of times as we generally do in

00:12:36.214 --> 00:12:36.615
<v Speaker 1>meetings,

00:12:37.260 --> 00:12:39.980
<v Speaker 1>So we generally like to abbreviate it to,

00:12:40.220 --> 00:12:41.900
<v Speaker 1>you know, a shorter way to say things

00:12:41.900 --> 00:12:44.700
<v Speaker 1>when we're, you know, among folks that are

00:12:44.700 --> 00:12:46.300
<v Speaker 1>commonly working on it.

00:12:46.620 --> 00:12:47.260
<v Speaker 1>But,

00:12:48.060 --> 00:12:49.900
<v Speaker 1>you know, it's really about the context. I

00:12:49.900 --> 00:12:52.645
<v Speaker 1>I try not to abbreviate it if I'm

00:12:52.645 --> 00:12:54.485
<v Speaker 1>not speaking to folks that I know already

00:12:54.485 --> 00:12:56.165
<v Speaker 1>understand the abbreviations.

00:12:56.645 --> 00:12:58.805
<v Speaker 0>That's a good rule. I like that rule.

00:12:59.925 --> 00:13:03.765
<v Speaker 0>Alright. So we have here the Cluster API

00:13:04.085 --> 00:13:04.645
<v Speaker 0>book.

00:13:05.550 --> 00:13:07.630
<v Speaker 0>But I think we've covered the why,

00:13:07.950 --> 00:13:10.990
<v Speaker 0>Cluster API. So let's go straight to the

00:13:11.630 --> 00:13:12.590
<v Speaker 0>quick start.

00:13:12.990 --> 00:13:14.590
<v Speaker 0>Alright. So the only things I need to

00:13:14.590 --> 00:13:16.110
<v Speaker 0>get started are

00:13:17.470 --> 00:13:18.430
<v Speaker 0>cube control

00:13:18.995 --> 00:13:19.875
<v Speaker 0>and

00:13:20.195 --> 00:13:23.955
<v Speaker 0>some version of Docker and Kubernetes.

00:13:25.075 --> 00:13:27.075
<v Speaker 0>So I am prepared.

00:13:28.755 --> 00:13:29.395
<v Speaker 0>And,

00:13:30.274 --> 00:13:30.755
<v Speaker 0>hopefully,

00:13:32.040 --> 00:13:35.560
<v Speaker 0>we have cube control one eighteen, client state,

00:13:35.560 --> 00:13:37.720
<v Speaker 0>and cube control one sixteen.

00:13:38.920 --> 00:13:40.279
<v Speaker 0>And trust me if they ship with the

00:13:40.279 --> 00:13:43.080
<v Speaker 0>beta, but one sixteen dot six beta zero.

00:13:43.240 --> 00:13:45.160
<v Speaker 0>So that is okay. Right? You're happy with

00:13:45.160 --> 00:13:46.360
<v Speaker 0>that that version requirement.

00:13:47.485 --> 00:13:48.045
<v Speaker 1>Yes.

00:13:48.605 --> 00:13:51.005
<v Speaker 1>Awesome. And the only reason why we have

00:13:51.005 --> 00:13:53.725
<v Speaker 1>a requirement on one sixteen is because we're

00:13:53.725 --> 00:13:55.085
<v Speaker 1>specifically using

00:13:55.885 --> 00:13:58.445
<v Speaker 1>CRD based resources if, you know,

00:13:59.760 --> 00:14:01.680
<v Speaker 1>if it wasn't for that, you know, there

00:14:01.680 --> 00:14:03.840
<v Speaker 1>wouldn't be a real minimum version.

00:14:04.480 --> 00:14:06.400
<v Speaker 0>Yeah. Okay. Good to know.

00:14:07.280 --> 00:14:08.240
<v Speaker 0>Next,

00:14:08.240 --> 00:14:09.520
<v Speaker 0>we need cluster

00:14:09.520 --> 00:14:10.640
<v Speaker 0>cluster

00:14:10.720 --> 00:14:12.560
<v Speaker 0>control. I was gonna say cluster CTL, but

00:14:12.560 --> 00:14:14.080
<v Speaker 0>then I say cube control, and I am

00:14:14.080 --> 00:14:16.995
<v Speaker 0>confusing myself. So cluster control, I'm gonna call

00:14:16.995 --> 00:14:19.475
<v Speaker 0>it. That's I've I've never committed that. So

00:14:20.195 --> 00:14:22.755
<v Speaker 0>and I need to just confirm that that

00:14:22.755 --> 00:14:23.475
<v Speaker 0>works,

00:14:26.035 --> 00:14:28.274
<v Speaker 0>and I'm good. And are any minimum requirements

00:14:28.274 --> 00:14:30.035
<v Speaker 0>I need for this? Or zero three eight,

00:14:30.035 --> 00:14:30.755
<v Speaker 0>am I good to go?

00:14:31.910 --> 00:14:34.149
<v Speaker 1>That should be good to go. The only

00:14:34.149 --> 00:14:36.470
<v Speaker 1>thing with the specific version is is it

00:14:36.470 --> 00:14:39.430
<v Speaker 1>might affect which, you know, defaults it uses.

00:14:39.589 --> 00:14:40.790
<v Speaker 1>But 038,

00:14:40.790 --> 00:14:42.310
<v Speaker 1>I believe, is the latest release.

00:14:43.029 --> 00:14:45.430
<v Speaker 0>Okay. Is my text large enough on that

00:14:45.430 --> 00:14:46.790
<v Speaker 0>screen? Do you think it should be bigger?

00:14:48.654 --> 00:14:51.135
<v Speaker 1>It probably wouldn't hurt to make it a

00:14:51.135 --> 00:14:52.175
<v Speaker 1>little bit bigger.

00:14:57.535 --> 00:14:58.895
<v Speaker 0>Alright. Let's go with that.

00:15:01.700 --> 00:15:02.340
<v Speaker 0>So

00:15:02.740 --> 00:15:04.980
<v Speaker 0>task one, initialize

00:15:04.980 --> 00:15:06.900
<v Speaker 0>a management cluster.

00:15:09.460 --> 00:15:10.180
<v Speaker 0>Oh,

00:15:10.340 --> 00:15:13.140
<v Speaker 0>and we have instructions for packet. I

00:15:13.380 --> 00:15:15.140
<v Speaker 0>wonder if that's a real API token or

00:15:15.140 --> 00:15:16.260
<v Speaker 0>someone just made that out.

00:15:18.035 --> 00:15:19.795
<v Speaker 1>If I remember correctly,

00:15:19.795 --> 00:15:22.115
<v Speaker 1>it was just a random string that was

00:15:22.115 --> 00:15:24.675
<v Speaker 1>added for the purpose of the documentation.

00:15:25.795 --> 00:15:28.435
<v Speaker 0>Okay. Good. Good call to make on the

00:15:28.435 --> 00:15:30.435
<v Speaker 0>text bigger. We've already had a thank you

00:15:30.435 --> 00:15:32.515
<v Speaker 0>from Lewis. Thank you, Lewis.

00:15:33.510 --> 00:15:34.710
<v Speaker 0>Right. So

00:15:35.350 --> 00:15:37.830
<v Speaker 0>now because this is a livestream, and I

00:15:37.830 --> 00:15:39.590
<v Speaker 0>don't want to expose any keys,

00:15:42.870 --> 00:15:44.070
<v Speaker 0>I need

00:15:44.230 --> 00:15:44.870
<v Speaker 0>to

00:15:47.084 --> 00:15:48.605
<v Speaker 0>I did this before,

00:15:49.245 --> 00:15:50.685
<v Speaker 0>but let's do again.

00:15:52.125 --> 00:15:53.644
<v Speaker 0>And I'm going to run

00:15:54.605 --> 00:15:55.725
<v Speaker 0>the edit command.

00:15:56.365 --> 00:15:59.165
<v Speaker 0>So I'm assuming that when I run cluster

00:15:59.165 --> 00:16:00.285
<v Speaker 0>control in a

00:16:00.685 --> 00:16:01.885
<v Speaker 0>infrastructure packet,

00:16:02.360 --> 00:16:04.680
<v Speaker 0>So does that mean the providers are all

00:16:04.680 --> 00:16:06.920
<v Speaker 0>baked in to cluster control,

00:16:06.920 --> 00:16:08.920
<v Speaker 0>or is that gonna download some binaries behind

00:16:08.920 --> 00:16:10.759
<v Speaker 0>the scenes? What what's happening when I run

00:16:10.759 --> 00:16:11.560
<v Speaker 0>this command?

00:16:12.120 --> 00:16:14.199
<v Speaker 1>So by default, what it's going to do

00:16:14.199 --> 00:16:16.759
<v Speaker 1>is it's going to reach out on

00:16:18.225 --> 00:16:21.745
<v Speaker 1>the Internet to GitHub releases for the various

00:16:21.745 --> 00:16:22.464
<v Speaker 1>related

00:16:22.704 --> 00:16:25.505
<v Speaker 1>providers. So there's more than one type of

00:16:25.505 --> 00:16:27.265
<v Speaker 1>provider in Cluster API.

00:16:28.065 --> 00:16:30.225
<v Speaker 1>We have the infrastructure provider, which in this

00:16:30.225 --> 00:16:31.024
<v Speaker 1>case is Packet.

00:16:31.640 --> 00:16:34.200
<v Speaker 1>It will reach out to the cluster API

00:16:34.200 --> 00:16:35.960
<v Speaker 1>provider packet repo,

00:16:36.040 --> 00:16:37.560
<v Speaker 1>inspect the releases,

00:16:37.960 --> 00:16:40.120
<v Speaker 1>look for the latest compatible

00:16:40.840 --> 00:16:42.840
<v Speaker 1>version of the packet provider

00:16:43.160 --> 00:16:45.885
<v Speaker 1>that is compatible with this version of cluster

00:16:45.885 --> 00:16:47.565
<v Speaker 1>cuddle, cluster control,

00:16:47.885 --> 00:16:50.845
<v Speaker 1>whatever we wanna call it. And it will

00:16:50.845 --> 00:16:52.845
<v Speaker 1>also do the same for the core cluster

00:16:52.845 --> 00:16:54.125
<v Speaker 1>API components

00:16:54.445 --> 00:16:55.085
<v Speaker 1>and

00:16:55.245 --> 00:16:57.965
<v Speaker 1>the bootstrap provider and the control plane provider,

00:16:57.965 --> 00:17:00.125
<v Speaker 1>which if you don't specify in this case,

00:17:00.125 --> 00:17:03.000
<v Speaker 1>will default to kubeadm.

00:17:03.959 --> 00:17:05.799
<v Speaker 0>Alright. Okay. So this is gonna use q

00:17:05.799 --> 00:17:07.000
<v Speaker 0>d kubeadm

00:17:07.000 --> 00:17:07.640
<v Speaker 0>under the

00:17:08.520 --> 00:17:11.319
<v Speaker 0>just because I'm a curious individual.

00:17:12.440 --> 00:17:14.599
<v Speaker 0>I'm gonna run a get paused on all

00:17:14.599 --> 00:17:15.240
<v Speaker 0>namespaces.

00:17:16.185 --> 00:17:18.105
<v Speaker 0>And just so I can see what's happening

00:17:18.105 --> 00:17:19.865
<v Speaker 0>on this cluster when

00:17:19.865 --> 00:17:22.105
<v Speaker 0>we have the management or control plan.

00:17:22.745 --> 00:17:24.665
<v Speaker 0>Management cluster. Yeah. Let's do that.

00:17:28.025 --> 00:17:30.185
<v Speaker 0>Oh, it says install in manager as well.

00:17:31.360 --> 00:17:34.400
<v Speaker 1>It is installing cert manager, and the main

00:17:34.400 --> 00:17:37.279
<v Speaker 1>purpose there is is because each of

00:17:37.600 --> 00:17:41.120
<v Speaker 1>the different providers is actually a set of

00:17:41.120 --> 00:17:42.720
<v Speaker 1>Kubernetes controllers

00:17:43.355 --> 00:17:47.035
<v Speaker 1>that also have webhooks for providing validation,

00:17:47.035 --> 00:17:48.075
<v Speaker 1>defaulting,

00:17:48.315 --> 00:17:51.515
<v Speaker 1>and, in some cases, API version conversions.

00:17:52.075 --> 00:17:53.915
<v Speaker 1>Start manager automates

00:17:53.915 --> 00:17:56.315
<v Speaker 1>the certificate management for those components.

00:17:57.120 --> 00:17:58.720
<v Speaker 0>I got it. Okay.

00:17:59.040 --> 00:18:00.080
<v Speaker 0>Cool. So

00:18:00.880 --> 00:18:01.679
<v Speaker 0>that was

00:18:02.160 --> 00:18:03.200
<v Speaker 0>pretty quick.

00:18:03.440 --> 00:18:04.480
<v Speaker 0>That was

00:18:05.600 --> 00:18:07.679
<v Speaker 0>much quicker than I was expecting.

00:18:08.000 --> 00:18:10.320
<v Speaker 0>That's good. So I'm gonna have to

00:18:13.925 --> 00:18:15.525
<v Speaker 0>okay. So do we have our

00:18:15.845 --> 00:18:16.725
<v Speaker 0>own

00:18:16.725 --> 00:18:19.125
<v Speaker 0>namespace for everything we just created there?

00:18:19.685 --> 00:18:22.245
<v Speaker 1>There will be a few different namespaces depending

00:18:22.245 --> 00:18:25.205
<v Speaker 1>on the provider. Each provider is deployed in

00:18:25.205 --> 00:18:27.205
<v Speaker 1>its own namespace to avoid

00:18:27.980 --> 00:18:30.140
<v Speaker 1>kind of issues because we allow

00:18:30.300 --> 00:18:34.140
<v Speaker 1>specifying providers that aren't known upfront. So anybody

00:18:34.140 --> 00:18:36.860
<v Speaker 1>can kinda create their own Cluster API provider,

00:18:36.860 --> 00:18:39.420
<v Speaker 1>and we wanted to limit the ability of

00:18:39.420 --> 00:18:42.060
<v Speaker 1>that you know, any provider deployed from accessing

00:18:42.060 --> 00:18:43.340
<v Speaker 1>data from other providers.

00:18:44.595 --> 00:18:46.034
<v Speaker 0>Okay. That makes sense.

00:18:46.275 --> 00:18:48.835
<v Speaker 0>So cert manager, you've you've kind of covered

00:18:48.835 --> 00:18:51.794
<v Speaker 0>there. We've got the CAPI webhook system,

00:18:54.275 --> 00:18:56.195
<v Speaker 0>push up system control plan, and then the

00:18:56.195 --> 00:18:57.155
<v Speaker 0>packet setting. So

00:19:00.080 --> 00:19:01.200
<v Speaker 1>here One of the

00:19:02.159 --> 00:19:04.159
<v Speaker 1>of the things that may not

00:19:05.440 --> 00:19:06.960
<v Speaker 1>make a whole lot of sense to begin

00:19:06.960 --> 00:19:08.159
<v Speaker 1>with is the fact that we have a

00:19:08.159 --> 00:19:09.279
<v Speaker 1>separate webhook

00:19:09.440 --> 00:19:10.399
<v Speaker 1>namespace.

00:19:10.720 --> 00:19:12.399
<v Speaker 1>And that's mainly because

00:19:12.765 --> 00:19:15.165
<v Speaker 1>at the current time, the multitenancy

00:19:15.165 --> 00:19:17.404
<v Speaker 1>model for Cluster API is

00:19:17.965 --> 00:19:20.284
<v Speaker 1>deploying those resources per namespace.

00:19:20.685 --> 00:19:23.404
<v Speaker 1>And if you have API conversion webhooks,

00:19:23.565 --> 00:19:26.285
<v Speaker 1>you can't specify on a CRD multiple

00:19:27.280 --> 00:19:29.200
<v Speaker 1>webhooks or conversions

00:19:30.000 --> 00:19:32.320
<v Speaker 1>to be able to work with that kind

00:19:32.320 --> 00:19:34.720
<v Speaker 1>of namespace multitenancy model.

00:19:34.960 --> 00:19:37.200
<v Speaker 1>So all of the webhooks exist in one

00:19:37.200 --> 00:19:38.159
<v Speaker 1>namespace,

00:19:39.200 --> 00:19:43.235
<v Speaker 1>have no RBAC defined. So they can only

00:19:43.235 --> 00:19:45.715
<v Speaker 1>operate on the input that they're given and

00:19:45.715 --> 00:19:48.595
<v Speaker 1>provide the the expected output. They can't actually

00:19:48.595 --> 00:19:50.355
<v Speaker 1>query additional resources.

00:19:51.075 --> 00:19:52.835
<v Speaker 1>We are working for the future to build

00:19:52.835 --> 00:19:55.155
<v Speaker 1>in kind of native multitenancy,

00:19:55.155 --> 00:19:57.235
<v Speaker 1>which will then move the webhooks into,

00:19:57.780 --> 00:20:00.179
<v Speaker 1>you know, the same namespace as the providers.

00:20:01.060 --> 00:20:02.179
<v Speaker 0>So is that

00:20:02.740 --> 00:20:03.620
<v Speaker 0>multitenancy

00:20:03.620 --> 00:20:04.580
<v Speaker 0>and that

00:20:04.900 --> 00:20:07.059
<v Speaker 0>say, have two different teams

00:20:07.620 --> 00:20:09.540
<v Speaker 0>deploying onto packet. Would they be able to

00:20:09.540 --> 00:20:12.340
<v Speaker 0>deploy two different packet providers to the cluster?

00:20:12.975 --> 00:20:14.014
<v Speaker 1>Or Yeah.

00:20:15.695 --> 00:20:16.815
<v Speaker 1>So there's,

00:20:16.975 --> 00:20:20.335
<v Speaker 1>you know, there's the use case of separating,

00:20:20.335 --> 00:20:23.135
<v Speaker 1>you know, different users being able to create,

00:20:23.135 --> 00:20:25.455
<v Speaker 1>you know, and manage different clusters.

00:20:25.775 --> 00:20:28.170
<v Speaker 1>But then there's also you can provide you

00:20:28.170 --> 00:20:30.490
<v Speaker 1>know, if you deploy two different packet providers,

00:20:30.490 --> 00:20:32.650
<v Speaker 1>you can point them at different credentials

00:20:32.890 --> 00:20:35.050
<v Speaker 1>for each of the providers, and then you

00:20:35.050 --> 00:20:35.610
<v Speaker 1>have,

00:20:36.570 --> 00:20:39.130
<v Speaker 1>you know, the ability to use multiple accounts

00:20:39.130 --> 00:20:40.730
<v Speaker 1>with Cluster API that way.

00:20:42.034 --> 00:20:43.394
<v Speaker 0>Okay. Cool.

00:20:45.075 --> 00:20:47.394
<v Speaker 0>Alright. Let's see what we got next then.

00:20:47.394 --> 00:20:49.715
<v Speaker 0>So our install went fine, and now we

00:20:49.715 --> 00:20:52.274
<v Speaker 0>want to create our first cluster.

00:20:53.875 --> 00:20:56.434
<v Speaker 0>So if I run cluster control

00:20:56.434 --> 00:20:57.235
<v Speaker 0>config

00:20:57.235 --> 00:20:57.794
<v Speaker 0>cluster,

00:20:59.280 --> 00:21:01.359
<v Speaker 0>I will get some YAML back?

00:21:02.400 --> 00:21:03.039
<v Speaker 1>Yes.

00:21:04.559 --> 00:21:05.840
<v Speaker 1>So, basically,

00:21:06.799 --> 00:21:08.960
<v Speaker 1>the the idea of this command is is

00:21:08.960 --> 00:21:11.840
<v Speaker 1>that each of the providers publishes

00:21:11.840 --> 00:21:13.120
<v Speaker 1>kind of a generic

00:21:13.355 --> 00:21:14.635
<v Speaker 1>set of templates

00:21:14.795 --> 00:21:16.635
<v Speaker 1>that can be used and

00:21:16.795 --> 00:21:17.674
<v Speaker 1>define

00:21:17.755 --> 00:21:20.475
<v Speaker 1>certain variables that they expect the user to

00:21:20.475 --> 00:21:21.515
<v Speaker 1>replace for

00:21:21.675 --> 00:21:24.554
<v Speaker 1>kind of common kind of cluster deployments.

00:21:25.275 --> 00:21:27.835
<v Speaker 1>This command basically reaches out

00:21:29.330 --> 00:21:31.570
<v Speaker 1>the same way to GitHub releases,

00:21:31.570 --> 00:21:32.690
<v Speaker 1>inspects the

00:21:32.930 --> 00:21:35.570
<v Speaker 1>cluster templates that are published for the provider,

00:21:35.970 --> 00:21:37.970
<v Speaker 1>and, you know, allows you to do the

00:21:37.970 --> 00:21:39.330
<v Speaker 1>variable substitution

00:21:39.730 --> 00:21:42.050
<v Speaker 1>and output that to a YAML file that

00:21:42.050 --> 00:21:44.130
<v Speaker 1>you can then feed in to create the

00:21:44.130 --> 00:21:44.450
<v Speaker 1>cluster.

00:21:46.225 --> 00:21:46.945
<v Speaker 0>Cool.

00:21:48.305 --> 00:21:50.465
<v Speaker 0>Right. Let's see what happened. Oh,

00:21:53.185 --> 00:21:54.705
<v Speaker 0>unexpected argument.

00:21:54.705 --> 00:21:57.265
<v Speaker 0>I'm assuming, potentially, like, a cluster name?

00:21:58.370 --> 00:21:59.089
<v Speaker 1>Yes.

00:22:04.529 --> 00:22:05.409
<v Speaker 0>Okay.

00:22:05.809 --> 00:22:06.849
<v Speaker 0>So

00:22:07.490 --> 00:22:09.089
<v Speaker 0>we will call this

00:22:10.210 --> 00:22:11.409
<v Speaker 0>livestream cluster.

00:22:16.184 --> 00:22:18.745
<v Speaker 1>And this is where you see the variables

00:22:18.745 --> 00:22:20.904
<v Speaker 1>that are published for the provider.

00:22:21.625 --> 00:22:24.904
<v Speaker 1>We recently added support for setting defaults for

00:22:24.904 --> 00:22:26.904
<v Speaker 1>some of these variables, but that,

00:22:28.300 --> 00:22:30.300
<v Speaker 1>we haven't added that to the packet provider

00:22:30.300 --> 00:22:32.380
<v Speaker 1>yet. We're looking to add that shortly.

00:22:33.580 --> 00:22:36.540
<v Speaker 0>Okay. So I can, according to this message,

00:22:36.540 --> 00:22:40.220
<v Speaker 0>either use environment variables or a cluster control

00:22:40.220 --> 00:22:41.580
<v Speaker 0>config

00:22:41.025 --> 00:22:41.825
<v Speaker 0>fail.

00:22:41.985 --> 00:22:43.425
<v Speaker 0>I I think I like the sound of

00:22:43.425 --> 00:22:44.225
<v Speaker 0>a fail

00:22:44.305 --> 00:22:47.265
<v Speaker 0>better. Oh, we have documentation tools.

00:22:47.345 --> 00:22:47.905
<v Speaker 0>So

00:22:50.385 --> 00:22:53.025
<v Speaker 0>is there a example of the fail approach?

00:22:54.920 --> 00:22:56.840
<v Speaker 1>I don't think so,

00:22:58.040 --> 00:23:00.120
<v Speaker 1>off the top of my head. If I'm

00:23:00.120 --> 00:23:01.159
<v Speaker 1>not mistaken,

00:23:01.240 --> 00:23:02.360
<v Speaker 1>it's just,

00:23:03.080 --> 00:23:05.160
<v Speaker 1>an I and I based definition

00:23:05.160 --> 00:23:07.640
<v Speaker 1>similar to what you see with the environment

00:23:07.640 --> 00:23:08.120
<v Speaker 1>variables.

00:23:09.554 --> 00:23:11.794
<v Speaker 0>Alright. Well, I'm

00:23:12.115 --> 00:23:13.794
<v Speaker 0>not brave enough to try and see if

00:23:13.794 --> 00:23:16.275
<v Speaker 0>that works. So what I'll do is build

00:23:16.275 --> 00:23:16.914
<v Speaker 0>the

00:23:17.635 --> 00:23:19.475
<v Speaker 0>end virus dot x h,

00:23:19.635 --> 00:23:21.955
<v Speaker 0>and I'll just source it when I run.

00:23:22.275 --> 00:23:23.155
<v Speaker 0>So

00:23:24.230 --> 00:23:25.030
<v Speaker 0>do I need

00:23:26.310 --> 00:23:29.510
<v Speaker 1>You'll probably wanna replace that project ID with

00:23:29.510 --> 00:23:31.190
<v Speaker 1>the correct project ID.

00:23:31.510 --> 00:23:33.430
<v Speaker 0>I'm kinda tempted to try it, to be

00:23:33.430 --> 00:23:34.390
<v Speaker 0>honest. I mean,

00:23:36.070 --> 00:23:39.110
<v Speaker 0>it looks almost legit. Like like well, maybe

00:23:39.455 --> 00:23:41.695
<v Speaker 0>yeah. Almost legit. Okay.

00:23:42.015 --> 00:23:43.934
<v Speaker 0>So let's get this done.

00:23:44.895 --> 00:23:47.375
<v Speaker 0>That's not secret, so we can just grab

00:23:47.375 --> 00:23:48.414
<v Speaker 0>that from here.

00:23:50.415 --> 00:23:52.015
<v Speaker 0>Yeah. That is the same format. I think

00:23:52.015 --> 00:23:53.770
<v Speaker 0>that was a legit project ID. I'm sure

00:23:53.770 --> 00:23:55.450
<v Speaker 0>it doesn't exist anymore, and no one can

00:23:55.450 --> 00:23:58.169
<v Speaker 0>use it. It's just same as the key.

00:23:58.970 --> 00:24:01.210
<v Speaker 0>Am I deployed to Likely, if you wanna

00:24:01.210 --> 00:24:03.210
<v Speaker 1>be able to access this cluster afterwards, you

00:24:03.210 --> 00:24:05.130
<v Speaker 1>might wanna set the SSH key too.

00:24:05.745 --> 00:24:07.985
<v Speaker 1>But I know you know how to recover,

00:24:08.385 --> 00:24:10.465
<v Speaker 1>you know, from that scenario anyway.

00:24:11.665 --> 00:24:14.705
<v Speaker 0>Yes. We could. But I'll I'll try oh,

00:24:14.705 --> 00:24:16.065
<v Speaker 0>yeah. So this is just gonna be a

00:24:16.065 --> 00:24:17.425
<v Speaker 0>public key. Right? Okay.

00:24:19.240 --> 00:24:22.200
<v Speaker 0>Fidelity Amsterdam one, I'm gonna go with the

00:24:22.200 --> 00:24:23.559
<v Speaker 0>node operating system.

00:24:24.200 --> 00:24:26.360
<v Speaker 0>And I'm assuming not every operating system is

00:24:26.360 --> 00:24:28.760
<v Speaker 0>gonna be supported because that's the same support

00:24:28.760 --> 00:24:30.039
<v Speaker 0>as q b d d the q b

00:24:30.039 --> 00:24:31.000
<v Speaker 0>d m, I would imagine.

00:24:31.825 --> 00:24:34.465
<v Speaker 1>There is that bit, and there's also a

00:24:34.465 --> 00:24:35.345
<v Speaker 1>bit of

00:24:36.225 --> 00:24:38.625
<v Speaker 1>expectation on the packet provider with how we're

00:24:38.625 --> 00:24:40.865
<v Speaker 1>doing the bootstrapping today that

00:24:41.105 --> 00:24:42.465
<v Speaker 1>it expects to be

00:24:43.025 --> 00:24:46.140
<v Speaker 1>at least Debian, if not, Ubuntu. So we

00:24:46.140 --> 00:24:47.660
<v Speaker 1>probably don't wanna change that.

00:24:48.060 --> 00:24:48.540
<v Speaker 1>Okay.

00:24:51.100 --> 00:24:53.100
<v Speaker 0>Let's get my public key.

00:24:54.380 --> 00:24:56.940
<v Speaker 1>That SSH key is actually going to be

00:24:56.940 --> 00:24:59.900
<v Speaker 1>an SSH key name that's defined in packet.

00:25:01.375 --> 00:25:04.014
<v Speaker 0>Oh, of course, it will be. Right. Okay.

00:25:12.095 --> 00:25:13.775
<v Speaker 0>We can delete test here. I'm sure that

00:25:13.775 --> 00:25:14.414
<v Speaker 0>won't break anything.

00:25:17.429 --> 00:25:18.070
<v Speaker 0>Okay.

00:25:18.710 --> 00:25:21.589
<v Speaker 0>So not my public key. It's the name,

00:25:21.750 --> 00:25:23.029
<v Speaker 0>which is that.

00:25:23.669 --> 00:25:25.350
<v Speaker 0>I don't need to modify the pod or

00:25:25.350 --> 00:25:26.709
<v Speaker 0>service CIDRs.

00:25:28.789 --> 00:25:31.590
<v Speaker 0>And depending on availability in and one, those

00:25:31.590 --> 00:25:33.725
<v Speaker 0>may or may not be available. So let's

00:25:33.725 --> 00:25:34.845
<v Speaker 0>just quickly

00:25:37.325 --> 00:25:38.684
<v Speaker 0>check first.

00:25:40.685 --> 00:25:41.725
<v Speaker 0>New

00:25:42.525 --> 00:25:43.405
<v Speaker 0>on demand.

00:25:47.000 --> 00:25:49.399
<v Speaker 0>T one smalls. When they're listed here, I

00:25:49.399 --> 00:25:51.080
<v Speaker 0>generally find that's a good indicator that they're

00:25:51.080 --> 00:25:53.879
<v Speaker 0>available, so we should be okay.

00:25:56.519 --> 00:25:58.919
<v Speaker 0>So I need to run

00:26:02.405 --> 00:26:03.525
<v Speaker 0>this again,

00:26:03.925 --> 00:26:06.245
<v Speaker 0>but first, I have to source

00:26:17.220 --> 00:26:18.900
<v Speaker 1>Kubernetes version.

00:26:18.900 --> 00:26:19.299
<v Speaker 1>And

00:26:19.780 --> 00:26:21.700
<v Speaker 1>if you go back to the quick start,

00:26:22.100 --> 00:26:23.060
<v Speaker 1>some of these,

00:26:23.300 --> 00:26:25.380
<v Speaker 1>some of the variables that are exposed can

00:26:25.380 --> 00:26:28.820
<v Speaker 1>actually be specified as command line arguments to

00:26:28.820 --> 00:26:30.660
<v Speaker 1>cluster cuddle config itself.

00:26:30.900 --> 00:26:33.024
<v Speaker 1>So if you just scroll down a little

00:26:33.024 --> 00:26:33.584
<v Speaker 1>bit,

00:26:34.865 --> 00:26:39.024
<v Speaker 1>you'll see the example also includes the Kubernetes

00:26:39.024 --> 00:26:39.744
<v Speaker 1>version

00:26:39.985 --> 00:26:43.585
<v Speaker 1>and the number of, control plane machines to

00:26:43.585 --> 00:26:44.544
<v Speaker 1>use as well

00:26:45.120 --> 00:26:45.760
<v Speaker 1>and

00:26:46.160 --> 00:26:49.279
<v Speaker 1>the worker machine count, which defaults to zero.

00:26:50.480 --> 00:26:53.200
<v Speaker 0>Okay. Well, with today being the 01/19 release

00:26:53.200 --> 00:26:54.480
<v Speaker 0>date, do you think it's gonna work?

00:26:57.535 --> 00:27:00.255
<v Speaker 1>I would not guarantee it.

00:27:00.415 --> 00:27:01.855
<v Speaker 1>There there's also

00:27:02.815 --> 00:27:05.534
<v Speaker 1>the the way that we're bootstrapping right now

00:27:05.535 --> 00:27:07.935
<v Speaker 1>also has a little bit of impact on

00:27:07.935 --> 00:27:08.735
<v Speaker 1>this, and

00:27:09.900 --> 00:27:11.660
<v Speaker 1>some of the work that we're doing with

00:27:11.660 --> 00:27:13.740
<v Speaker 1>the packet provider is to kind of get

00:27:13.740 --> 00:27:15.020
<v Speaker 1>it up to speed with some of the

00:27:15.020 --> 00:27:16.540
<v Speaker 1>other providers that are out there.

00:27:17.100 --> 00:27:19.500
<v Speaker 1>So I think that, you know, the the

00:27:19.500 --> 00:27:22.060
<v Speaker 1>Kubernetes version that we define here doesn't actually

00:27:22.060 --> 00:27:23.740
<v Speaker 1>impact the packet provider today.

00:27:25.495 --> 00:27:26.695
<v Speaker 0>Okay. Got it.

00:27:27.975 --> 00:27:30.294
<v Speaker 0>Okay. So we wanna run

00:27:30.455 --> 00:27:33.575
<v Speaker 0>this command again, and we're gonna specify

00:27:33.654 --> 00:27:34.855
<v Speaker 0>those flags.

00:27:38.350 --> 00:27:39.309
<v Speaker 0>There we go.

00:27:45.630 --> 00:27:46.429
<v Speaker 0>Alright.

00:27:46.830 --> 00:27:48.749
<v Speaker 0>So let's save this.

00:27:50.750 --> 00:27:51.869
<v Speaker 0>My stream

00:27:52.029 --> 00:27:52.669
<v Speaker 0>cluster.

00:27:54.565 --> 00:27:55.445
<v Speaker 0>Yeah. No.

00:27:56.805 --> 00:27:59.605
<v Speaker 0>Because this wrote it to copy quick start.

00:27:59.605 --> 00:28:00.725
<v Speaker 0>So I'm assuming

00:28:01.685 --> 00:28:03.605
<v Speaker 0>we're we're not actually created cluster yet. That's

00:28:03.605 --> 00:28:04.645
<v Speaker 0>just to configure it.

00:28:05.700 --> 00:28:06.979
<v Speaker 1>K. Yes.

00:28:08.019 --> 00:28:10.019
<v Speaker 1>It'll be this next command when you actually

00:28:10.019 --> 00:28:10.899
<v Speaker 1>run the

00:28:11.539 --> 00:28:14.899
<v Speaker 1>cube cuddle, cube CTL apply that you'll actually

00:28:14.899 --> 00:28:15.940
<v Speaker 1>create the cluster.

00:28:16.659 --> 00:28:17.379
<v Speaker 0>Okay.

00:28:17.539 --> 00:28:19.139
<v Speaker 0>Let's do that then. So

00:28:23.755 --> 00:28:26.235
<v Speaker 0>apply dash f livestream

00:28:26.235 --> 00:28:27.115
<v Speaker 0>cluster.

00:28:29.515 --> 00:28:30.715
<v Speaker 0>Too easy.

00:28:32.555 --> 00:28:33.195
<v Speaker 1>Now

00:28:33.755 --> 00:28:35.115
<v Speaker 1>one of the things you can do is

00:28:35.115 --> 00:28:38.610
<v Speaker 1>you can do cube cube cuddle get cluster

00:28:38.610 --> 00:28:39.889
<v Speaker 1>dash API,

00:28:40.289 --> 00:28:42.529
<v Speaker 1>and it will actually give you all of

00:28:42.529 --> 00:28:44.609
<v Speaker 1>the cluster API resources

00:28:46.210 --> 00:28:46.929
<v Speaker 1>that are defined.

00:28:50.785 --> 00:28:53.025
<v Speaker 0>Oh, okay. Alright. Okay. So

00:28:54.385 --> 00:28:55.745
<v Speaker 0>we have

00:28:55.825 --> 00:28:56.385
<v Speaker 0>some

00:28:56.785 --> 00:28:58.465
<v Speaker 0>okay. So we got four different

00:28:58.785 --> 00:29:01.345
<v Speaker 0>cube admin, QBD, and context. We got one

00:29:01.345 --> 00:29:02.625
<v Speaker 0>for the control plan,

00:29:02.785 --> 00:29:04.065
<v Speaker 0>each for worker nodes,

00:29:06.920 --> 00:29:08.280
<v Speaker 0>conflict template.

00:29:08.280 --> 00:29:09.720
<v Speaker 0>I'm not sure what that is.

00:29:11.400 --> 00:29:13.320
<v Speaker 0>We have our machine deployment.

00:29:13.720 --> 00:29:15.960
<v Speaker 0>So that's In in some cases, we have

00:29:15.960 --> 00:29:19.000
<v Speaker 1>kind of template resources, and that QBATM config

00:29:19.000 --> 00:29:21.080
<v Speaker 1>template is

00:29:20.545 --> 00:29:22.465
<v Speaker 1>one of those. It's attached to

00:29:23.665 --> 00:29:25.745
<v Speaker 1>a machine deployment resource,

00:29:25.745 --> 00:29:28.225
<v Speaker 1>and it kind of stamps out individual

00:29:28.625 --> 00:29:31.905
<v Speaker 1>kubeadm configs for each of the individual machines

00:29:31.905 --> 00:29:32.625
<v Speaker 1>that it creates.

00:29:33.420 --> 00:29:35.420
<v Speaker 0>Okay. So this is the template, and then

00:29:35.420 --> 00:29:37.180
<v Speaker 0>I can actually see here by the naming

00:29:37.180 --> 00:29:40.060
<v Speaker 0>that each of the worker nodes is using

00:29:40.060 --> 00:29:41.740
<v Speaker 0>that template. Mean, so I could have multiple

00:29:41.740 --> 00:29:42.620
<v Speaker 0>templates

00:29:42.780 --> 00:29:43.980
<v Speaker 0>to deploy different

00:29:44.620 --> 00:29:46.300
<v Speaker 0>like, if I wanted to have different node

00:29:46.300 --> 00:29:48.220
<v Speaker 0>groups, node pills, whatever they're called, where I

00:29:48.220 --> 00:29:48.460
<v Speaker 0>have

00:29:49.345 --> 00:29:51.664
<v Speaker 0>three t one small workers and then 12

00:29:51.664 --> 00:29:53.505
<v Speaker 0>c one large arms or something like that,

00:29:53.505 --> 00:29:55.904
<v Speaker 0>those would be templated machines. Right?

00:29:56.625 --> 00:29:59.984
<v Speaker 1>Those would be more around the infrastructure templates.

00:30:00.065 --> 00:30:03.024
<v Speaker 1>The kubeadm config templates are going to impact

00:30:03.200 --> 00:30:05.920
<v Speaker 1>kind of the kubeadm config that's fed into

00:30:05.920 --> 00:30:07.039
<v Speaker 1>bootstrapping.

00:30:07.440 --> 00:30:10.160
<v Speaker 1>So whether it's the initial nodes and taints

00:30:10.160 --> 00:30:11.040
<v Speaker 1>and annotations

00:30:11.040 --> 00:30:13.920
<v Speaker 1>for a specific node or if you wanted

00:30:13.920 --> 00:30:15.280
<v Speaker 1>to specify different

00:30:15.280 --> 00:30:15.920
<v Speaker 1>kind of

00:30:16.585 --> 00:30:18.425
<v Speaker 1>cloud provider or,

00:30:18.585 --> 00:30:20.825
<v Speaker 1>you know, anything, you know, specific to the

00:30:20.825 --> 00:30:22.105
<v Speaker 1>kubatem config.

00:30:24.185 --> 00:30:25.465
<v Speaker 0>Interesting.

00:30:26.425 --> 00:30:27.385
<v Speaker 0>Could I

00:30:27.625 --> 00:30:30.505
<v Speaker 0>using Cluster API, have a cluster that spans

00:30:30.505 --> 00:30:32.659
<v Speaker 0>more than one cloud provider?

00:30:34.580 --> 00:30:38.020
<v Speaker 1>Technically, you probably could create one. I wouldn't

00:30:38.020 --> 00:30:40.580
<v Speaker 1>necessarily recommend it just because

00:30:40.820 --> 00:30:41.460
<v Speaker 1>the,

00:30:41.780 --> 00:30:44.180
<v Speaker 1>you know, the way that the cloud controller

00:30:44.180 --> 00:30:45.300
<v Speaker 1>managers work,

00:30:45.784 --> 00:30:47.384
<v Speaker 1>they don't necessarily

00:30:47.784 --> 00:30:50.104
<v Speaker 1>play nice around those scenarios,

00:30:50.585 --> 00:30:52.024
<v Speaker 1>especially when you look at some of the

00:30:52.024 --> 00:30:53.304
<v Speaker 1>behavior like

00:30:53.625 --> 00:30:54.985
<v Speaker 1>deleting instances

00:30:54.985 --> 00:30:56.424
<v Speaker 1>if it can't find

00:30:57.065 --> 00:31:00.200
<v Speaker 1>a node resource related to it or, you

00:31:00.200 --> 00:31:02.360
<v Speaker 1>know, the other way around. It'll delete a

00:31:02.360 --> 00:31:03.640
<v Speaker 1>node resource if,

00:31:03.800 --> 00:31:04.440
<v Speaker 1>you know,

00:31:05.400 --> 00:31:07.400
<v Speaker 1>you know, it doesn't see one for it.

00:31:08.120 --> 00:31:10.200
<v Speaker 0>Yeah. That makes sense. Even halfway through that

00:31:10.200 --> 00:31:11.720
<v Speaker 0>question when I was asking that, I realized

00:31:11.720 --> 00:31:13.480
<v Speaker 0>I'm about how bad an idea that would

00:31:13.480 --> 00:31:13.640
<v Speaker 0>be.

00:31:14.615 --> 00:31:18.295
<v Speaker 0>Alright. So we got our control plane machines

00:31:18.295 --> 00:31:20.855
<v Speaker 0>now. So there's some vocabulary here then. Right?

00:31:20.855 --> 00:31:22.775
<v Speaker 0>So we have machine deployment,

00:31:23.015 --> 00:31:23.575
<v Speaker 0>machine

00:31:23.815 --> 00:31:24.695
<v Speaker 0>a machine

00:31:24.935 --> 00:31:25.495
<v Speaker 0>set.

00:31:26.855 --> 00:31:27.095
<v Speaker 0>Yeah.

00:31:27.860 --> 00:31:29.460
<v Speaker 0>There is a machine set.

00:31:30.340 --> 00:31:32.500
<v Speaker 1>If you think about kind of some of

00:31:32.500 --> 00:31:35.860
<v Speaker 1>the existing Kubernetes concepts that that you know,

00:31:36.100 --> 00:31:38.260
<v Speaker 1>you have a pod, which is roughly equivalent

00:31:38.260 --> 00:31:40.500
<v Speaker 1>to a machine in Cluster API.

00:31:41.534 --> 00:31:43.695
<v Speaker 1>And then building on top of that machine,

00:31:43.695 --> 00:31:45.134
<v Speaker 1>we have machine sets,

00:31:45.455 --> 00:31:48.095
<v Speaker 1>which basically manages multiple replicas

00:31:48.095 --> 00:31:49.854
<v Speaker 1>of, you know, machines

00:31:50.254 --> 00:31:51.054
<v Speaker 1>similarly

00:31:51.054 --> 00:31:54.014
<v Speaker 1>to how a replica set manages multiple pods.

00:31:54.470 --> 00:31:56.789
<v Speaker 1>And then on top of that, you have

00:31:56.870 --> 00:31:58.309
<v Speaker 1>the machine deployment

00:31:58.390 --> 00:32:01.429
<v Speaker 1>that kind of manages a declarative config

00:32:01.910 --> 00:32:04.470
<v Speaker 1>across different replica sets

00:32:04.630 --> 00:32:07.030
<v Speaker 1>or machine sets similar to the way that

00:32:07.030 --> 00:32:09.430
<v Speaker 1>a Kubernetes deployment manages replica sets.

00:32:10.835 --> 00:32:13.235
<v Speaker 0>So I'm curious. Like, you know, could I

00:32:13.235 --> 00:32:16.115
<v Speaker 0>modify the replicas on this machine set demo?

00:32:16.195 --> 00:32:17.715
<v Speaker 0>Would would that work? Would that spin up

00:32:17.715 --> 00:32:18.515
<v Speaker 0>a new machine?

00:32:19.795 --> 00:32:22.275
<v Speaker 1>It would, but I would recommend doing that

00:32:22.275 --> 00:32:24.995
<v Speaker 1>on the machine deployment, not the machine set.

00:32:24.995 --> 00:32:27.940
<v Speaker 1>Otherwise, the machine deployment would go back.

00:32:28.340 --> 00:32:30.180
<v Speaker 0>Oh, so it's the same hierarchy then. Like,

00:32:30.180 --> 00:32:32.180
<v Speaker 0>a deployment to replica set. This is a

00:32:32.180 --> 00:32:35.220
<v Speaker 0>machine deployment to machine set. Right? Exactly.

00:32:36.260 --> 00:32:36.660
<v Speaker 0>Okay.

00:32:38.434 --> 00:32:40.674
<v Speaker 1>And because I'm curious

00:32:41.475 --> 00:32:43.955
<v Speaker 1>go ahead. And they also expose the

00:32:45.075 --> 00:32:47.395
<v Speaker 1>the scale sub resource so you can actually

00:32:47.395 --> 00:32:47.955
<v Speaker 1>use

00:32:48.595 --> 00:32:50.674
<v Speaker 1>cube cuddle, cube control scale

00:32:51.075 --> 00:32:53.554
<v Speaker 1>to scale the machine deployments and control planes.

00:32:53.554 --> 00:32:55.609
<v Speaker 0>Oh, sweet. That's pretty cool.

00:32:57.210 --> 00:32:59.210
<v Speaker 0>Alright. I'm just gonna save that then.

00:32:59.529 --> 00:33:00.969
<v Speaker 0>I can run

00:33:01.769 --> 00:33:02.890
<v Speaker 0>Clip CTL

00:33:02.890 --> 00:33:04.970
<v Speaker 0>get Cluster API again.

00:33:07.365 --> 00:33:09.445
<v Speaker 0>And I'm gonna oh, there we go. Oh,

00:33:09.445 --> 00:33:11.445
<v Speaker 0>so these are all pending. I think we've

00:33:11.445 --> 00:33:11.924
<v Speaker 0>had

00:33:14.085 --> 00:33:15.765
<v Speaker 0>I bet you that machine type is not

00:33:15.765 --> 00:33:17.605
<v Speaker 0>gonna be available after all.

00:33:18.005 --> 00:33:20.645
<v Speaker 1>So the reason why they're pending right now

00:33:21.150 --> 00:33:24.190
<v Speaker 1>is because the control plane is not fully

00:33:24.190 --> 00:33:25.070
<v Speaker 1>ready yet

00:33:25.390 --> 00:33:28.270
<v Speaker 1>because Cluster API doesn't current currently

00:33:28.510 --> 00:33:29.870
<v Speaker 1>automatically manage

00:33:30.110 --> 00:33:32.030
<v Speaker 1>the CNI provider.

00:33:32.190 --> 00:33:33.790
<v Speaker 1>So if you jump back to the quick

00:33:33.790 --> 00:33:35.870
<v Speaker 1>start, you'll see there's a step to

00:33:36.815 --> 00:33:38.735
<v Speaker 1>deploy a CNI provider.

00:33:40.175 --> 00:33:42.975
<v Speaker 1>But first, you'll actually need to retrieve the

00:33:43.215 --> 00:33:44.975
<v Speaker 1>cube config for the cluster.

00:33:45.215 --> 00:33:47.295
<v Speaker 1>And then once you deploy the CNI provider,

00:33:47.295 --> 00:33:48.335
<v Speaker 1>everything else will spin up.

00:33:49.190 --> 00:33:50.950
<v Speaker 0>Alright. So I'm just getting two ego then.

00:33:50.950 --> 00:33:52.230
<v Speaker 0>You tell them I just looked at it.

00:33:52.230 --> 00:33:54.950
<v Speaker 0>Got it. Alright. So let's just do all

00:33:54.950 --> 00:33:56.309
<v Speaker 0>the command that tells me to do. So

00:33:56.309 --> 00:33:58.629
<v Speaker 0>I run get cluster all namespaces.

00:33:59.670 --> 00:34:01.509
<v Speaker 0>Does my livestream cluster?

00:34:01.990 --> 00:34:02.549
<v Speaker 0>Cool.

00:34:03.895 --> 00:34:06.055
<v Speaker 0>And then we wanna make sure the control

00:34:06.055 --> 00:34:07.255
<v Speaker 0>plan is up.

00:34:10.855 --> 00:34:11.895
<v Speaker 0>Replicas

00:34:11.975 --> 00:34:13.815
<v Speaker 0>updated unavailable.

00:34:13.895 --> 00:34:16.215
<v Speaker 0>So is that still maybe just provisioning behind

00:34:16.215 --> 00:34:18.460
<v Speaker 0>the scenes, or is that an error I

00:34:18.460 --> 00:34:19.420
<v Speaker 0>can ignore?

00:34:20.140 --> 00:34:21.500
<v Speaker 1>So one of the things we can do

00:34:21.500 --> 00:34:23.340
<v Speaker 1>is we can look up the

00:34:23.820 --> 00:34:25.340
<v Speaker 1>the packet machines.

00:34:25.820 --> 00:34:27.980
<v Speaker 1>So if we do you can just do

00:34:27.980 --> 00:34:29.420
<v Speaker 1>the kubectl get

00:34:29.580 --> 00:34:31.500
<v Speaker 1>cluster API again, and we can just look

00:34:31.500 --> 00:34:34.645
<v Speaker 1>at those packet machines, and then that will

00:34:35.045 --> 00:34:37.925
<v Speaker 1>tell us where in the process we are.

00:34:39.125 --> 00:34:40.804
<v Speaker 0>Or any way for me to use, like,

00:34:40.804 --> 00:34:44.005
<v Speaker 0>the kubectl logs command to get event information

00:34:44.005 --> 00:34:46.244
<v Speaker 0>or to the describe command to

00:34:46.630 --> 00:34:47.989
<v Speaker 0>to debug this? We do

00:34:48.389 --> 00:34:51.030
<v Speaker 1>do publish events. You could you can run

00:34:51.030 --> 00:34:52.949
<v Speaker 1>kubectl get events, or

00:34:53.510 --> 00:34:56.710
<v Speaker 1>you could go into the the actual logs.

00:34:56.710 --> 00:34:58.070
<v Speaker 1>We try to avoid

00:34:58.710 --> 00:35:01.994
<v Speaker 1>requiring users to do that just because there's

00:35:01.994 --> 00:35:04.235
<v Speaker 1>a lot of verbose information that

00:35:04.315 --> 00:35:05.995
<v Speaker 1>is really hard to parse.

00:35:06.234 --> 00:35:08.875
<v Speaker 1>We've been trying to move more towards conditions

00:35:08.875 --> 00:35:10.235
<v Speaker 1>on the individual

00:35:10.555 --> 00:35:11.355
<v Speaker 1>resources

00:35:11.355 --> 00:35:12.075
<v Speaker 1>to

00:35:12.474 --> 00:35:14.075
<v Speaker 1>provide user facing information.

00:35:15.860 --> 00:35:16.500
<v Speaker 0>Okay.

00:35:16.980 --> 00:35:18.100
<v Speaker 0>That makes sense.

00:35:18.900 --> 00:35:21.380
<v Speaker 0>So the phase on our

00:35:21.620 --> 00:35:24.420
<v Speaker 0>machine control play as provisioning. So I guess

00:35:24.420 --> 00:35:25.380
<v Speaker 0>we just

00:35:26.340 --> 00:35:26.980
<v Speaker 0>be patient.

00:35:28.545 --> 00:35:30.865
<v Speaker 1>Yep. And if I had to guess right

00:35:30.865 --> 00:35:31.425
<v Speaker 1>now,

00:35:31.905 --> 00:35:34.385
<v Speaker 1>the machine's probably still bootstrapping.

00:35:40.464 --> 00:35:42.145
<v Speaker 0>I just like looking at things. I'm just

00:35:42.145 --> 00:35:44.224
<v Speaker 0>gonna

00:35:43.580 --> 00:35:46.380
<v Speaker 0>start describing things and see what's going on.

00:35:47.100 --> 00:35:49.100
<v Speaker 0>So I think you're right. It's probably still

00:35:49.100 --> 00:35:50.060
<v Speaker 0>bit strapping.

00:35:50.860 --> 00:35:51.820
<v Speaker 0>I mean, I trust you.

00:35:55.145 --> 00:35:57.704
<v Speaker 0>Alright. So these are IP addresses. I mean,

00:35:57.704 --> 00:35:59.865
<v Speaker 0>I guess, theory, I could SSH onto this

00:35:59.865 --> 00:36:02.185
<v Speaker 0>machine. I could start running PS. I'd be

00:36:02.185 --> 00:36:04.105
<v Speaker 0>looking for the usual candidates. I guess, there's

00:36:04.105 --> 00:36:05.065
<v Speaker 0>gonna be, like,

00:36:06.425 --> 00:36:10.025
<v Speaker 0>Qibla, maybe the API server process, etcetera. So

00:36:10.660 --> 00:36:12.500
<v Speaker 0>or I could be patient, and we could

00:36:12.500 --> 00:36:14.580
<v Speaker 0>talk about something else as well.

00:36:15.540 --> 00:36:17.780
<v Speaker 1>And and, basically, what we're doing when we

00:36:17.780 --> 00:36:20.900
<v Speaker 1>bootstrap the machines, we're injecting a Cloudinet config

00:36:20.900 --> 00:36:22.020
<v Speaker 1>into the user data.

00:36:22.685 --> 00:36:25.165
<v Speaker 1>And in the case of the packet provider,

00:36:25.165 --> 00:36:26.925
<v Speaker 1>it's actually downloading

00:36:27.325 --> 00:36:28.845
<v Speaker 1>all of the dependencies.

00:36:28.845 --> 00:36:31.965
<v Speaker 1>So it's downloading Docker. It's downloading,

00:36:32.925 --> 00:36:35.805
<v Speaker 1>you know, the Kubernetes binaries and installing those.

00:36:35.805 --> 00:36:38.205
<v Speaker 1>So it takes a little bit longer than

00:36:39.220 --> 00:36:41.860
<v Speaker 1>some of the other providers at this time.

00:36:42.660 --> 00:36:45.300
<v Speaker 0>Yeah. We can take a look at that.

00:36:45.620 --> 00:36:47.780
<v Speaker 0>So there is an endpoint we can hit.

00:36:49.620 --> 00:36:50.900
<v Speaker 0>Metadata.packet.net

00:36:50.900 --> 00:36:53.060
<v Speaker 0>slash user data, which will actually show us

00:36:53.060 --> 00:36:54.420
<v Speaker 0>that provisioning script.

00:36:59.515 --> 00:37:01.995
<v Speaker 0>We got some key configuration.

00:37:02.714 --> 00:37:05.115
<v Speaker 0>These are all generated by cert manager. Right?

00:37:06.234 --> 00:37:08.155
<v Speaker 1>Those ones are actually generated by

00:37:09.120 --> 00:37:11.040
<v Speaker 1>the Cluster API Bootstrap.

00:37:11.040 --> 00:37:13.360
<v Speaker 1>Well, no, the control plane provider

00:37:14.160 --> 00:37:17.120
<v Speaker 1>to generate the CAs that are used during

00:37:17.120 --> 00:37:17.680
<v Speaker 1>the

00:37:17.920 --> 00:37:18.960
<v Speaker 1>provisioning process.

00:37:21.135 --> 00:37:23.295
<v Speaker 0>K. And then we get a

00:37:23.535 --> 00:37:24.655
<v Speaker 0>cube ADM

00:37:24.655 --> 00:37:25.775
<v Speaker 0>configuration.

00:37:27.775 --> 00:37:29.615
<v Speaker 0>Let's go by cluster name,

00:37:33.135 --> 00:37:34.335
<v Speaker 0>Kubernetes version,

00:37:38.080 --> 00:37:41.120
<v Speaker 0>And those are actual provisioning steps then.

00:37:42.720 --> 00:37:44.640
<v Speaker 1>Yep. And those are the actual steps that

00:37:44.640 --> 00:37:46.960
<v Speaker 1>we're adding in for the packet provider to

00:37:47.200 --> 00:37:48.560
<v Speaker 1>kind of

00:37:48.345 --> 00:37:50.185
<v Speaker 1>work around the fact that we don't have

00:37:50.185 --> 00:37:52.825
<v Speaker 1>a prebaked image to use for Cluster API

00:37:52.825 --> 00:37:53.705
<v Speaker 1>at this time.

00:37:54.825 --> 00:37:55.545
<v Speaker 0>So is there

00:37:56.744 --> 00:37:59.225
<v Speaker 0>if not now, you know, hypothetically, whether it'd

00:37:59.225 --> 00:38:00.920
<v Speaker 0>be in three or six months, but this

00:38:00.920 --> 00:38:03.640
<v Speaker 0>is using Docker. It's the runtime implementation. Is

00:38:03.640 --> 00:38:05.000
<v Speaker 0>there the option to swap that out for

00:38:05.000 --> 00:38:06.680
<v Speaker 0>container d or something else?

00:38:07.320 --> 00:38:10.600
<v Speaker 1>So in general, for Cluster API, there's a

00:38:10.600 --> 00:38:11.640
<v Speaker 1>Kubernetes

00:38:11.640 --> 00:38:12.920
<v Speaker 1>SIGs project

00:38:13.080 --> 00:38:13.800
<v Speaker 1>image builder,

00:38:14.415 --> 00:38:17.615
<v Speaker 1>and we generally bake pre bake the images

00:38:17.615 --> 00:38:20.255
<v Speaker 1>for the various cloud providers. We haven't gotten

00:38:20.255 --> 00:38:21.855
<v Speaker 1>a packet added to that yet.

00:38:22.015 --> 00:38:24.175
<v Speaker 1>But when we do, that project already defaults

00:38:24.175 --> 00:38:27.055
<v Speaker 1>to using container d. Oh, sweet. Good.

00:38:29.400 --> 00:38:31.160
<v Speaker 0>So if I wanna see how far along

00:38:31.160 --> 00:38:32.119
<v Speaker 0>this is,

00:38:32.200 --> 00:38:33.000
<v Speaker 0>then

00:38:35.160 --> 00:38:37.720
<v Speaker 1>Probably the easiest way would be to, just

00:38:37.720 --> 00:38:39.800
<v Speaker 1>inspect the Cloudinet logs.

00:38:40.280 --> 00:38:42.359
<v Speaker 1>So if you look at specifically,

00:38:42.599 --> 00:38:43.559
<v Speaker 1>varlog,

00:38:43.720 --> 00:38:46.405
<v Speaker 1>Cloudinet-output.log,

00:38:46.405 --> 00:38:47.125
<v Speaker 1>I think.

00:38:54.645 --> 00:38:55.204
<v Speaker 0>Oopsie.

00:38:59.460 --> 00:39:00.660
<v Speaker 0>That looks bad.

00:39:04.339 --> 00:39:06.260
<v Speaker 1>Oh, you know what?

00:39:10.260 --> 00:39:11.700
<v Speaker 0>Is it a good what or a bad

00:39:11.700 --> 00:39:11.859
<v Speaker 0>what?

00:39:15.555 --> 00:39:16.515
<v Speaker 1>Well, I'm

00:39:17.075 --> 00:39:18.915
<v Speaker 1>so So it looks like it's trying to

00:39:18.915 --> 00:39:21.955
<v Speaker 0>start Kubernetes/admin.com.

00:39:24.755 --> 00:39:27.235
<v Speaker 1>Let's take a look at the other

00:39:27.315 --> 00:39:28.195
<v Speaker 1>Cloudinet log.

00:39:31.450 --> 00:39:32.490
<v Speaker 0>Yep. Okay.

00:39:33.610 --> 00:39:35.290
<v Speaker 0>So let's open that.

00:39:36.570 --> 00:39:36.970
<v Speaker 0>Log.

00:39:48.335 --> 00:39:50.974
<v Speaker 1>I'm wondering if we're hitting an issue because

00:39:50.974 --> 00:39:52.734
<v Speaker 1>maybe the 01/19

00:39:52.734 --> 00:39:54.335
<v Speaker 1>release is out.

00:39:59.580 --> 00:40:00.860
<v Speaker 0>I don't know if no. That can't be

00:40:00.860 --> 00:40:02.460
<v Speaker 0>the right version because that's 01/19/2011.

00:40:02.460 --> 00:40:04.220
<v Speaker 0>So I just Yeah. That's it in it.

00:40:04.220 --> 00:40:04.700
<v Speaker 0>Yeah.

00:40:08.540 --> 00:40:10.300
<v Speaker 0>Oh, yeah. So what you were saying when

00:40:10.300 --> 00:40:13.195
<v Speaker 0>we ran the the provision and step the

00:40:13.195 --> 00:40:16.075
<v Speaker 0>YAML generation step was to take Kubernetes version

00:40:16.075 --> 00:40:18.475
<v Speaker 0>as ignored by the packet provider for now?

00:40:18.875 --> 00:40:21.195
<v Speaker 0>Mhmm. Yeah. Okay. Got it.

00:40:22.234 --> 00:40:24.875
<v Speaker 1>Well, sort of. So it's fed into the

00:40:25.630 --> 00:40:26.430
<v Speaker 1>kubeadm

00:40:26.430 --> 00:40:27.230
<v Speaker 1>bootstrapping

00:40:27.230 --> 00:40:28.110
<v Speaker 1>config.

00:40:29.550 --> 00:40:31.070
<v Speaker 1>So if we look at

00:40:33.550 --> 00:40:35.390
<v Speaker 1>we can check to see that file on

00:40:35.390 --> 00:40:38.030
<v Speaker 1>disk. I would expect that to be I

00:40:38.030 --> 00:40:39.790
<v Speaker 1>think it's written into a temp directory.

00:40:42.935 --> 00:40:44.535
<v Speaker 0>So where should I go? Sorry.

00:40:45.175 --> 00:40:46.375
<v Speaker 1>Let's go back to that,

00:40:47.575 --> 00:40:49.415
<v Speaker 1>the the user data script.

00:40:50.215 --> 00:40:52.695
<v Speaker 0>Ah, yeah. Okay. So

00:40:57.349 --> 00:40:59.430
<v Speaker 1>so if we look at that, we're, you

00:40:59.430 --> 00:41:02.230
<v Speaker 1>know, making sure the swap's off. You know,

00:41:02.230 --> 00:41:02.869
<v Speaker 1>we're

00:41:03.430 --> 00:41:05.750
<v Speaker 1>getting those packages. We we can check to

00:41:05.750 --> 00:41:08.789
<v Speaker 1>see if, you know, we actually completed any

00:41:08.789 --> 00:41:09.589
<v Speaker 1>of those steps.

00:41:10.315 --> 00:41:11.915
<v Speaker 1>Yep. Yeah. Docker. It looks like it got

00:41:11.915 --> 00:41:13.755
<v Speaker 0>past Docker. So we can

00:41:15.915 --> 00:41:18.395
<v Speaker 0>assuming the ping is unlikely to cause any

00:41:18.395 --> 00:41:19.435
<v Speaker 0>errors. So

00:41:19.835 --> 00:41:21.515
<v Speaker 0>well, we just run the try to rerun

00:41:21.515 --> 00:41:22.795
<v Speaker 1>that. Yep. Yeah.

00:41:23.195 --> 00:41:24.555
<v Speaker 0>Badly, we're on the same page.

00:41:27.690 --> 00:41:29.210
<v Speaker 0>Ah, okay. Yeah. So

00:41:30.250 --> 00:41:32.330
<v Speaker 1>So so it was that Kubernetes version we

00:41:32.330 --> 00:41:34.490
<v Speaker 1>specified that that got us.

00:41:37.210 --> 00:41:40.125
<v Speaker 0>Yeah. So, yeah, the cubelet is one eighteen

00:41:40.125 --> 00:41:42.685
<v Speaker 0>eight. The control plane is one seventeen three.

00:41:42.685 --> 00:41:44.525
<v Speaker 0>So should we just tear this down and

00:41:44.525 --> 00:41:46.925
<v Speaker 0>provision with one eighteen eight? Would that fix

00:41:46.925 --> 00:41:47.485
<v Speaker 0>it?

00:41:48.045 --> 00:41:49.325
<v Speaker 1>So let's

00:41:49.325 --> 00:41:51.965
<v Speaker 1>try something something different. Let's go in and

00:41:51.965 --> 00:41:54.760
<v Speaker 1>just modify the resources to be one eighteen

00:41:54.760 --> 00:41:55.480
<v Speaker 1>eight.

00:41:58.680 --> 00:42:00.840
<v Speaker 1>Okay. So there's gonna be two places. There's

00:42:00.840 --> 00:42:02.600
<v Speaker 1>gonna be the cube ADM control plane, and

00:42:02.600 --> 00:42:05.080
<v Speaker 1>then there's going to be, the machine deployment

00:42:05.080 --> 00:42:06.120
<v Speaker 1>that we have defined.

00:42:07.295 --> 00:42:08.095
<v Speaker 0>Can I

00:42:08.415 --> 00:42:09.295
<v Speaker 0>modify

00:42:09.295 --> 00:42:12.415
<v Speaker 0>an Earth generated YAML and reapply? Would that

00:42:12.415 --> 00:42:12.975
<v Speaker 0>work?

00:42:15.215 --> 00:42:17.375
<v Speaker 1>Yeah. That that would work, or you can

00:42:17.375 --> 00:42:20.655
<v Speaker 1>just, kubectl edit the actual resources.

00:42:26.349 --> 00:42:28.109
<v Speaker 0>What you wanna do? It's your call.

00:42:28.589 --> 00:42:29.790
<v Speaker 0>Edit resources?

00:42:32.430 --> 00:42:33.390
<v Speaker 1>Yeah. Why not?

00:42:35.175 --> 00:42:37.735
<v Speaker 0>Alright. So we're gonna modify.

00:42:38.135 --> 00:42:39.735
<v Speaker 0>Should we do the control plane first or

00:42:39.735 --> 00:42:41.175
<v Speaker 0>the machine deployments?

00:42:41.575 --> 00:42:43.495
<v Speaker 0>The control plane is the one that's hanging

00:42:43.495 --> 00:42:45.415
<v Speaker 0>up right now. So well,

00:42:45.655 --> 00:42:47.175
<v Speaker 1>yeah, let's go ahead and do that one.

00:42:47.829 --> 00:42:49.270
<v Speaker 0>The demo, we have to fix the machine

00:42:49.270 --> 00:42:51.510
<v Speaker 0>deployments really, really quickly, or do we have

00:42:51.510 --> 00:42:52.550
<v Speaker 0>a better time?

00:42:52.869 --> 00:42:55.430
<v Speaker 0>We'll we'll have time. Alright. Okay. So we

00:42:55.430 --> 00:42:55.910
<v Speaker 0>want to

00:42:56.869 --> 00:42:59.670
<v Speaker 0>I'm gonna run get cluster API again. So

00:42:59.910 --> 00:43:01.270
<v Speaker 0>what we want to change

00:43:03.925 --> 00:43:04.805
<v Speaker 0>is

00:43:04.885 --> 00:43:06.485
<v Speaker 0>the control.

00:43:07.365 --> 00:43:09.925
<v Speaker 0>No. You're gonna is it the cluster?

00:43:10.165 --> 00:43:10.805
<v Speaker 1>No.

00:43:11.125 --> 00:43:13.045
<v Speaker 1>It'll be it's down at the bottom of

00:43:13.045 --> 00:43:13.605
<v Speaker 1>the screen.

00:43:15.810 --> 00:43:18.530
<v Speaker 0>There you go. This one here? Yes.

00:43:18.850 --> 00:43:19.570
<v Speaker 0>Okay.

00:43:21.890 --> 00:43:24.050
<v Speaker 0>It could be the end control plan.

00:43:25.890 --> 00:43:26.850
<v Speaker 0>Livestream.

00:43:31.525 --> 00:43:34.405
<v Speaker 0>If I search for 1.seventeen,

00:43:35.204 --> 00:43:36.724
<v Speaker 0>not in the annotations,

00:43:37.444 --> 00:43:40.085
<v Speaker 0>and we want 118Dot8.

00:43:40.085 --> 00:43:40.404
<v Speaker 0>Right?

00:43:41.500 --> 00:43:44.060
<v Speaker 0>Yep. That's the word. The error message we

00:43:44.060 --> 00:43:44.700
<v Speaker 0>see in

00:43:45.500 --> 00:43:46.940
<v Speaker 0>the logs.

00:43:49.260 --> 00:43:51.820
<v Speaker 0>So I'm that going to shut

00:43:51.820 --> 00:43:54.460
<v Speaker 0>down this machine and reprovision in Newborn?

00:43:56.954 --> 00:43:59.115
<v Speaker 1>So, actually, we're gonna end up in a

00:43:59.115 --> 00:44:02.474
<v Speaker 1>weird situation here specifically around the control plane.

00:44:03.434 --> 00:44:04.555
<v Speaker 0>That's alright. I think we're

00:44:05.355 --> 00:44:07.755
<v Speaker 1>Well, the problem is is because we've already

00:44:09.320 --> 00:44:12.360
<v Speaker 1>technically attempted to initialize the control plane,

00:44:13.160 --> 00:44:15.560
<v Speaker 1>we won't actually try to reinitialize

00:44:15.560 --> 00:44:17.480
<v Speaker 1>the control plane with the change.

00:44:18.440 --> 00:44:20.200
<v Speaker 1>And that's basically to

00:44:20.680 --> 00:44:24.535
<v Speaker 1>prevent the situation where somebody accidentally scales down

00:44:24.535 --> 00:44:27.095
<v Speaker 1>their control plane to zero and then scaled

00:44:27.095 --> 00:44:29.095
<v Speaker 1>it back up. We didn't wanna present the

00:44:29.095 --> 00:44:30.375
<v Speaker 1>situation where

00:44:30.455 --> 00:44:33.095
<v Speaker 1>somebody thinks that their cluster is healthy,

00:44:33.415 --> 00:44:35.015
<v Speaker 1>but they've just wiped out all the data

00:44:35.015 --> 00:44:35.815
<v Speaker 1>of their cluster.

00:44:39.370 --> 00:44:40.090
<v Speaker 0>Okay.

00:44:42.170 --> 00:44:44.090
<v Speaker 0>That sounds like a good thing, which is

00:44:44.090 --> 00:44:44.890
<v Speaker 0>good. Yeah.

00:44:45.370 --> 00:44:48.010
<v Speaker 0>So what's our what's our next step here?

00:44:48.970 --> 00:44:50.890
<v Speaker 1>So we we may want to go ahead

00:44:50.890 --> 00:44:53.035
<v Speaker 1>and delete this cluster and start over with

00:44:53.035 --> 00:44:53.995
<v Speaker 1>that in mind.

00:44:57.275 --> 00:45:00.235
<v Speaker 0>Delete. Delete. Delete. Okay. I think that's fine.

00:45:00.235 --> 00:45:02.475
<v Speaker 0>So I am going to modify this, and

00:45:02.475 --> 00:45:04.235
<v Speaker 0>we do have a question.

00:45:04.395 --> 00:45:04.715
<v Speaker 0>So

00:45:07.980 --> 00:45:10.860
<v Speaker 0>Adrian has asked, can I provide a custom

00:45:10.860 --> 00:45:12.460
<v Speaker 0>Cloud configuration?

00:45:13.740 --> 00:45:16.860
<v Speaker 1>Yes. So you can definitely specify

00:45:17.260 --> 00:45:19.900
<v Speaker 1>additions to the Cloud Init configuration if you're

00:45:19.900 --> 00:45:22.220
<v Speaker 1>using the default Cube ATM control plane.

00:45:23.085 --> 00:45:25.325
<v Speaker 1>You can specify any of the,

00:45:26.525 --> 00:45:30.365
<v Speaker 1>you know, kubeadm configuration itself. You can specify

00:45:31.244 --> 00:45:33.005
<v Speaker 1>commands to run before

00:45:33.645 --> 00:45:36.285
<v Speaker 1>the kubeadm and it'll join command is run,

00:45:36.920 --> 00:45:39.080
<v Speaker 1>and you can specify some other kind of

00:45:39.080 --> 00:45:41.560
<v Speaker 1>Cloudinet specific things around

00:45:42.440 --> 00:45:44.520
<v Speaker 1>users, NTP servers,

00:45:44.760 --> 00:45:46.600
<v Speaker 1>SSH keys, things like that.

00:45:48.520 --> 00:45:49.080
<v Speaker 0>Cool.

00:45:51.225 --> 00:45:51.945
<v Speaker 0>So

00:45:52.105 --> 00:45:54.185
<v Speaker 0>I think what's happening now

00:45:55.625 --> 00:45:57.945
<v Speaker 0>is it's still deleting the old one. So

00:45:57.945 --> 00:45:59.625
<v Speaker 0>when I apply the new one, we're gonna

00:45:59.625 --> 00:46:01.465
<v Speaker 0>have a better delay. So in order to

00:46:01.465 --> 00:46:03.865
<v Speaker 0>speed this up, what I'm gonna do is

00:46:03.865 --> 00:46:05.865
<v Speaker 0>if we run this again

00:46:06.860 --> 00:46:08.460
<v Speaker 0>with different name,

00:46:12.060 --> 00:46:13.740
<v Speaker 0>that should still just start spinning up. It's

00:46:13.740 --> 00:46:15.500
<v Speaker 0>still waiting on the old one to delete.

00:46:15.900 --> 00:46:16.620
<v Speaker 0>Exactly.

00:46:17.180 --> 00:46:19.340
<v Speaker 0>Okay. But I'm now gonna have to replace

00:46:19.340 --> 00:46:21.340
<v Speaker 0>1Dot17Dot3

00:46:22.855 --> 00:46:24.375
<v Speaker 0>and 118 again.

00:46:29.095 --> 00:46:29.975
<v Speaker 0>Apply.

00:46:30.055 --> 00:46:31.335
<v Speaker 0>I don't know why I keep typing it

00:46:31.335 --> 00:46:33.415
<v Speaker 0>in. I never did that. Alright. Okay.

00:46:35.079 --> 00:46:37.160
<v Speaker 0>Now if I run get

00:46:38.680 --> 00:46:39.480
<v Speaker 0>q

00:46:39.960 --> 00:46:41.480
<v Speaker 0>a d m control

00:46:41.480 --> 00:46:42.360
<v Speaker 0>plans,

00:46:45.480 --> 00:46:47.495
<v Speaker 0>and we're just gonna have to wait a

00:46:47.495 --> 00:46:49.975
<v Speaker 0>moment or two while that machine gets provisioned

00:46:49.975 --> 00:46:52.855
<v Speaker 0>and the cloud and it kicks in again.

00:46:55.095 --> 00:46:56.535
<v Speaker 0>There we go. Cool.

00:47:03.220 --> 00:47:04.579
<v Speaker 0>I guess we can jump back to the

00:47:04.579 --> 00:47:06.500
<v Speaker 0>quick start just now and assume

00:47:06.740 --> 00:47:09.380
<v Speaker 0>that besides our little version on full path,

00:47:09.380 --> 00:47:11.380
<v Speaker 0>that things are gonna spin up quite nicely

00:47:11.380 --> 00:47:11.940
<v Speaker 0>for us.

00:47:12.915 --> 00:47:14.835
<v Speaker 0>So next, we need to

00:47:15.315 --> 00:47:17.715
<v Speaker 0>deploy a networking solution.

00:47:19.395 --> 00:47:21.795
<v Speaker 1>And, yeah, basically, we're gonna have to wait

00:47:21.795 --> 00:47:23.955
<v Speaker 1>until the workload cluster

00:47:24.115 --> 00:47:25.715
<v Speaker 1>control plane is available

00:47:26.035 --> 00:47:26.755
<v Speaker 1>because

00:47:27.290 --> 00:47:29.130
<v Speaker 1>in order to deploy the CNI, you have

00:47:29.130 --> 00:47:31.690
<v Speaker 1>to deploy it against the cluster itself.

00:47:32.970 --> 00:47:35.369
<v Speaker 0>Yeah. That that that makes perfect sense. So

00:47:35.369 --> 00:47:38.250
<v Speaker 0>it seems from this documentation here that I'm

00:47:38.250 --> 00:47:40.890
<v Speaker 0>assuming I can use any CNI, and Calico

00:47:40.890 --> 00:47:41.690
<v Speaker 0>here is just

00:47:42.285 --> 00:47:43.805
<v Speaker 0>a default suggestion?

00:47:44.444 --> 00:47:46.285
<v Speaker 1>So if you're running through the quick start

00:47:46.285 --> 00:47:48.125
<v Speaker 1>with the default configuration,

00:47:49.085 --> 00:47:51.085
<v Speaker 1>Calico is known to work. So if you

00:47:51.085 --> 00:47:52.605
<v Speaker 1>looked the

00:47:52.605 --> 00:47:54.285
<v Speaker 1>pod CIDR that we specified

00:47:55.400 --> 00:47:57.240
<v Speaker 1>when we created the cluster

00:47:57.320 --> 00:47:59.080
<v Speaker 1>with the environment variables

00:47:59.320 --> 00:48:02.680
<v Speaker 1>is also the same default as Calico uses.

00:48:03.240 --> 00:48:05.400
<v Speaker 1>If you are using a different CNI, you

00:48:05.400 --> 00:48:08.200
<v Speaker 1>may have to modify that or potentially some

00:48:08.200 --> 00:48:08.680
<v Speaker 1>other

00:48:09.605 --> 00:48:11.125
<v Speaker 1>Qubitium configuration

00:48:11.125 --> 00:48:13.205
<v Speaker 1>to work with that CNI provider.

00:48:15.285 --> 00:48:16.005
<v Speaker 0>Okay.

00:48:16.484 --> 00:48:18.645
<v Speaker 0>Is that something you see that would potentially

00:48:18.645 --> 00:48:20.805
<v Speaker 0>be added to cluster control in the future

00:48:20.805 --> 00:48:23.045
<v Speaker 0>where I could specify the CNI and it

00:48:22.680 --> 00:48:25.000
<v Speaker 0>tweak the generated channel in some way?

00:48:25.319 --> 00:48:27.240
<v Speaker 0>Like, would it know? Or as you think

00:48:27.240 --> 00:48:29.080
<v Speaker 0>that's at the scope for cluster control.

00:48:29.720 --> 00:48:31.079
<v Speaker 1>So it's one of the things that we're

00:48:31.079 --> 00:48:33.559
<v Speaker 1>looking at kind of longer term. How do

00:48:33.559 --> 00:48:34.680
<v Speaker 1>we incorporate

00:48:35.319 --> 00:48:37.285
<v Speaker 1>with, you know, different,

00:48:37.525 --> 00:48:40.405
<v Speaker 1>you know, deployments that we don't necessarily want

00:48:40.405 --> 00:48:42.965
<v Speaker 1>to manage the life cycle of specifically in

00:48:42.965 --> 00:48:44.085
<v Speaker 1>Cluster API?

00:48:45.365 --> 00:48:48.565
<v Speaker 1>So right now, there's a new feature

00:48:50.390 --> 00:48:52.790
<v Speaker 1>that you can use to just specify arbitrary

00:48:52.790 --> 00:48:54.870
<v Speaker 1>YAML to deploy at runtime.

00:48:55.590 --> 00:48:57.670
<v Speaker 1>But longer term, we're looking at how can

00:48:57.670 --> 00:49:00.070
<v Speaker 1>we align with projects like the cluster add

00:49:00.070 --> 00:49:01.510
<v Speaker 1>ons project

00:49:01.990 --> 00:49:02.550
<v Speaker 1>and

00:49:03.190 --> 00:49:05.270
<v Speaker 1>use something like that for managing the life

00:49:05.270 --> 00:49:06.070
<v Speaker 1>cycle of

00:49:06.684 --> 00:49:08.205
<v Speaker 1>things like CNI.

00:49:08.444 --> 00:49:11.005
<v Speaker 1>But then even longer term, how can we

00:49:11.164 --> 00:49:13.805
<v Speaker 1>leverage projects like that to expose

00:49:14.204 --> 00:49:16.285
<v Speaker 1>some of these things that may need to

00:49:16.285 --> 00:49:17.325
<v Speaker 1>be modified

00:49:17.484 --> 00:49:19.645
<v Speaker 1>or that we may need to modify in

00:49:19.645 --> 00:49:20.204
<v Speaker 1>the

00:49:21.579 --> 00:49:23.580
<v Speaker 1>Cluster API side to

00:49:24.380 --> 00:49:26.299
<v Speaker 1>help enable some of this stuff. So right

00:49:26.299 --> 00:49:29.420
<v Speaker 1>now, you need to manage that stuff externally,

00:49:29.660 --> 00:49:31.740
<v Speaker 1>but we're looking longer term, you know, how

00:49:31.740 --> 00:49:34.540
<v Speaker 1>can we investigate ways to kind of automate

00:49:34.540 --> 00:49:36.460
<v Speaker 1>some of that complexity in the future. And

00:49:36.605 --> 00:49:38.684
<v Speaker 1>we don't necessarily have the answers for how

00:49:38.684 --> 00:49:39.885
<v Speaker 1>that's gonna happen yet,

00:49:40.605 --> 00:49:42.204
<v Speaker 1>but but it is something that we want

00:49:42.204 --> 00:49:43.965
<v Speaker 1>to help solve for users.

00:49:45.005 --> 00:49:46.925
<v Speaker 0>Do you see this as something that

00:49:47.724 --> 00:49:50.045
<v Speaker 0>would potentially package up into, like, a Helm

00:49:50.045 --> 00:49:51.964
<v Speaker 0>chart or use it in JSON or anything

00:49:51.964 --> 00:49:53.420
<v Speaker 0>like that to distribute

00:49:53.660 --> 00:49:55.099
<v Speaker 0>prebaked configurations?

00:49:57.099 --> 00:49:57.900
<v Speaker 1>Potentially,

00:49:58.700 --> 00:50:00.380
<v Speaker 1>with the kind of

00:50:01.019 --> 00:50:04.380
<v Speaker 1>cluster resource set feature that's there for deploying

00:50:04.380 --> 00:50:05.500
<v Speaker 1>arbitrary YAML,

00:50:06.425 --> 00:50:07.705
<v Speaker 1>if that exposed

00:50:07.705 --> 00:50:08.505
<v Speaker 1>specific,

00:50:08.825 --> 00:50:10.825
<v Speaker 1>you know, environment variables,

00:50:11.705 --> 00:50:13.625
<v Speaker 1>you know, that we can use for

00:50:13.865 --> 00:50:16.985
<v Speaker 1>kind of replacement in similar ways that we're

00:50:16.985 --> 00:50:18.905
<v Speaker 1>using on the cluster template,

00:50:19.340 --> 00:50:20.460
<v Speaker 1>you know, today,

00:50:21.100 --> 00:50:23.020
<v Speaker 1>you can do something similar to that right

00:50:23.020 --> 00:50:26.300
<v Speaker 1>now. But you would kinda have to predict,

00:50:26.700 --> 00:50:29.500
<v Speaker 1>you know, all of the various permutations

00:50:29.740 --> 00:50:31.100
<v Speaker 1>with that right now.

00:50:31.500 --> 00:50:31.820
<v Speaker 1>So

00:50:33.975 --> 00:50:34.935
<v Speaker 1>maybe.

00:50:35.255 --> 00:50:36.215
<v Speaker 1>I

00:50:36.295 --> 00:50:38.215
<v Speaker 1>I don't know what those are gonna you

00:50:38.215 --> 00:50:41.175
<v Speaker 1>know, how that integration's gonna look. But if

00:50:41.175 --> 00:50:45.015
<v Speaker 1>anybody listening has ideas, please come and present

00:50:45.015 --> 00:50:45.255
<v Speaker 1>them.

00:50:47.660 --> 00:50:48.779
<v Speaker 0>Okay.

00:50:48.779 --> 00:50:50.619
<v Speaker 0>Cool. Let's keep an eye on that space

00:50:50.619 --> 00:50:51.180
<v Speaker 0>then.

00:50:53.180 --> 00:50:55.339
<v Speaker 0>So I'm not worried. I I'm sure this

00:50:55.339 --> 00:50:56.940
<v Speaker 0>is gonna be available shortly.

00:50:56.940 --> 00:50:57.580
<v Speaker 0>But

00:50:57.900 --> 00:51:00.140
<v Speaker 0>should we jump onto this machine and and

00:51:00.140 --> 00:51:01.545
<v Speaker 0>check CloudEdit for

00:51:03.625 --> 00:51:05.625
<v Speaker 0>just to Yeah. Prove that it worked. Right?

00:51:06.665 --> 00:51:08.185
<v Speaker 0>Like I said, I'm not worried.

00:51:08.905 --> 00:51:09.465
<v Speaker 0>Mhmm.

00:51:15.464 --> 00:51:16.345
<v Speaker 0>Let's see.

00:51:17.330 --> 00:51:19.570
<v Speaker 0>Okay. So it's at the docker step.

00:51:23.490 --> 00:51:25.010
<v Speaker 0>QVDM is running.

00:51:25.330 --> 00:51:26.610
<v Speaker 0>That's a good sign.

00:51:27.490 --> 00:51:30.130
<v Speaker 0>Yep. So we can probably tell that Cloudinet

00:51:30.130 --> 00:51:31.090
<v Speaker 1>out We have a kiblet.

00:51:35.435 --> 00:51:36.795
<v Speaker 0>Yeah. Yeah. We yeah. We can we can

00:51:36.795 --> 00:51:37.995
<v Speaker 0>go tell that log.

00:51:40.395 --> 00:51:41.995
<v Speaker 0>Or I can just keep correcting until I

00:51:41.995 --> 00:51:43.515
<v Speaker 0>see more and more cubes in front of

00:51:43.515 --> 00:51:43.755
<v Speaker 0>me.

00:51:46.340 --> 00:51:48.980
<v Speaker 0>Okay. Let's do it the proper way.

00:51:50.820 --> 00:51:51.860
<v Speaker 0>So

00:51:51.860 --> 00:51:54.660
<v Speaker 0>right now, it's deploying a static manifest.

00:51:54.820 --> 00:51:56.180
<v Speaker 0>That's awesome.

00:51:56.660 --> 00:51:58.180
<v Speaker 0>Our control plane is happy.

00:51:59.175 --> 00:51:59.975
<v Speaker 1>Yep.

00:52:01.015 --> 00:52:03.415
<v Speaker 0>That QB to enjoy command for public IP

00:52:03.415 --> 00:52:05.255
<v Speaker 0>address and token should probably disappear.

00:52:07.175 --> 00:52:08.455
<v Speaker 1>It's a good thing this is a short

00:52:08.455 --> 00:52:09.655
<v Speaker 1>lived cluster. Right?

00:52:12.215 --> 00:52:13.495
<v Speaker 0>Why can I not take?

00:52:19.090 --> 00:52:20.930
<v Speaker 0>Did my machine disappear?

00:52:23.970 --> 00:52:24.770
<v Speaker 0>Close.

00:52:27.595 --> 00:52:29.035
<v Speaker 0>Not sure if I lost my connection or

00:52:29.035 --> 00:52:31.115
<v Speaker 0>not, but I'll just ignore it. I'm going

00:52:31.115 --> 00:52:32.955
<v Speaker 0>to assume if I run

00:52:33.035 --> 00:52:33.755
<v Speaker 0>get

00:52:34.475 --> 00:52:35.435
<v Speaker 0>QVDN.

00:52:39.849 --> 00:52:42.010
<v Speaker 0>I was not

00:52:42.010 --> 00:52:43.130
<v Speaker 0>ready yet.

00:52:44.810 --> 00:52:46.570
<v Speaker 1>At this point, it should

00:52:46.810 --> 00:52:49.210
<v Speaker 1>be ready enough that if you

00:52:50.089 --> 00:52:53.210
<v Speaker 1>retrieve that cube config secret, you can query

00:52:54.055 --> 00:52:54.695
<v Speaker 1>that

00:52:54.935 --> 00:52:57.575
<v Speaker 1>control plan and see the status.

00:52:59.655 --> 00:53:01.895
<v Speaker 0>So is there a convenience way of getting

00:53:01.895 --> 00:53:03.655
<v Speaker 0>that, or do I SSH back into that

00:53:03.655 --> 00:53:04.375
<v Speaker 0>machine?

00:53:04.695 --> 00:53:06.535
<v Speaker 1>So if you look back at the quick

00:53:06.535 --> 00:53:09.640
<v Speaker 1>start, there's a Oh. Set of commands in

00:53:09.640 --> 00:53:10.200
<v Speaker 1>there.

00:53:14.840 --> 00:53:17.240
<v Speaker 1>Right down there, the the

00:53:18.280 --> 00:53:20.840
<v Speaker 1>oh, I forgot. We added a

00:53:21.605 --> 00:53:22.805
<v Speaker 1>a friendly command

00:53:22.964 --> 00:53:25.765
<v Speaker 1>to retrieve the Kube config with ClusterCuddle.

00:53:25.765 --> 00:53:27.925
<v Speaker 1>So let's we can give that a shot.

00:53:28.805 --> 00:53:31.204
<v Speaker 1>Oh, wait. No. It that version hasn't released

00:53:31.204 --> 00:53:32.964
<v Speaker 1>yet, so let's let's run the workaround.

00:53:34.460 --> 00:53:36.780
<v Speaker 0>Ah, yes. Zero three nine. Okay.

00:53:38.779 --> 00:53:41.579
<v Speaker 0>Oh. Correct. I need to That command and

00:53:41.579 --> 00:53:43.740
<v Speaker 1>the warning there should be Oh, alright. Okay.

00:53:43.740 --> 00:53:44.700
<v Speaker 0>Okay. So

00:53:44.940 --> 00:53:47.835
<v Speaker 0>this is the painful way. That's the nice

00:53:47.835 --> 00:53:49.835
<v Speaker 0>way that just doesn't exist yet. Got it.

00:53:49.835 --> 00:53:50.475
<v Speaker 0>Yep.

00:53:51.115 --> 00:53:52.075
<v Speaker 0>Painful

00:53:52.075 --> 00:53:54.155
<v Speaker 0>is okay. Painful. So

00:53:54.555 --> 00:53:55.515
<v Speaker 0>I need to

00:53:56.635 --> 00:53:57.995
<v Speaker 0>rename this

00:53:59.280 --> 00:54:00.880
<v Speaker 0>to livestream.

00:54:00.880 --> 00:54:02.960
<v Speaker 0>Let's see if it config admin.

00:54:04.320 --> 00:54:07.280
<v Speaker 1>Was it livestream two for that cluster?

00:54:09.040 --> 00:54:09.680
<v Speaker 0>It was.

00:54:13.205 --> 00:54:15.525
<v Speaker 0>I just did not and that looks good.

00:54:16.405 --> 00:54:18.885
<v Speaker 0>So if I do cube

00:54:19.685 --> 00:54:21.365
<v Speaker 0>config equals

00:54:24.099 --> 00:54:25.220
<v Speaker 0>do I have to cat it or is

00:54:25.220 --> 00:54:26.900
<v Speaker 0>it path? I can never remember.

00:54:27.940 --> 00:54:28.579
<v Speaker 1>I

00:54:29.940 --> 00:54:31.380
<v Speaker 1>cat is the safe way.

00:54:33.220 --> 00:54:34.900
<v Speaker 1>And I think it's I don't think there's

00:54:34.900 --> 00:54:37.060
<v Speaker 1>an underscore in there, if I'm not mistaken.

00:54:39.295 --> 00:54:40.095
<v Speaker 0>Get

00:54:40.735 --> 00:54:41.455
<v Speaker 0>all.

00:54:47.455 --> 00:54:49.775
<v Speaker 0>Yeah. I found it. Okay. So

00:54:50.349 --> 00:54:50.910
<v Speaker 0>Oh,

00:54:51.150 --> 00:54:53.150
<v Speaker 0>yeah. It needs the path there. Sorry.

00:54:53.950 --> 00:54:55.230
<v Speaker 1>Long day.

00:54:58.190 --> 00:55:00.349
<v Speaker 1>I say it. 10:56 in the morning. Right?

00:55:04.365 --> 00:55:05.725
<v Speaker 1>And at this point, you can

00:55:06.685 --> 00:55:08.045
<v Speaker 1>I was gonna say, at this point, you

00:55:08.045 --> 00:55:09.725
<v Speaker 1>can use that kube config to deploy the

00:55:09.725 --> 00:55:11.645
<v Speaker 1>CNI, and then we should see everything

00:55:11.885 --> 00:55:14.605
<v Speaker 1>become ready and and everything else spin up?

00:55:16.045 --> 00:55:18.700
<v Speaker 0>Got it. Okay. So we're not gonna rock

00:55:18.700 --> 00:55:21.420
<v Speaker 0>the boat too much here, and we're oh,

00:55:21.420 --> 00:55:23.339
<v Speaker 0>that's that's keep coming right

00:55:24.059 --> 00:55:25.660
<v Speaker 0>in front of me. Okay. So

00:55:25.740 --> 00:55:26.780
<v Speaker 0>let's

00:55:28.380 --> 00:55:30.845
<v Speaker 0>do this. I'll just keep doing it with

00:55:30.845 --> 00:55:32.525
<v Speaker 0>the environment variables since it works.

00:55:44.980 --> 00:55:47.059
<v Speaker 0>So I guess that's pulling images right now

00:55:47.059 --> 00:55:47.700
<v Speaker 0>for

00:55:48.420 --> 00:55:50.020
<v Speaker 0>the things that it needs.

00:55:50.660 --> 00:55:53.140
<v Speaker 1>And and if you go back to the

00:55:54.180 --> 00:55:56.820
<v Speaker 1>the management cluster and run

00:55:56.900 --> 00:55:58.980
<v Speaker 1>get cluster API, you should see some of

00:55:58.980 --> 00:56:01.825
<v Speaker 1>those additional resources start spinning up.

00:56:07.184 --> 00:56:07.825
<v Speaker 0>We

00:56:08.065 --> 00:56:08.945
<v Speaker 0>have

00:56:11.025 --> 00:56:14.385
<v Speaker 0>oh, that's the old control plan

00:56:14.130 --> 00:56:16.050
<v Speaker 0>or new control plan.

00:56:19.170 --> 00:56:20.930
<v Speaker 0>We have an initialized

00:56:21.329 --> 00:56:22.609
<v Speaker 0>control plan.

00:56:22.609 --> 00:56:22.930
<v Speaker 0>Good.

00:56:27.125 --> 00:56:28.965
<v Speaker 0>Is our provisioning.

00:56:31.525 --> 00:56:33.925
<v Speaker 0>I guess we just give that another moment.

00:56:35.045 --> 00:56:37.205
<v Speaker 1>Yeah. It might take a little bit for

00:56:37.605 --> 00:56:39.605
<v Speaker 1>it to realize that it's

00:56:40.720 --> 00:56:42.880
<v Speaker 1>Yep. Alright. So we have our our workers

00:56:42.880 --> 00:56:45.040
<v Speaker 0>are very much on their way. That's good.

00:56:47.680 --> 00:56:49.440
<v Speaker 0>So let's step back, Rose, while

00:56:50.480 --> 00:56:52.320
<v Speaker 0>is that it? Does it work?

00:56:53.445 --> 00:56:55.605
<v Speaker 1>Yeah. I mean, now you can,

00:56:56.005 --> 00:56:58.405
<v Speaker 1>I I would probably wait until everything finishes

00:56:58.405 --> 00:57:00.165
<v Speaker 1>deploying? But then at that point, you can

00:57:00.165 --> 00:57:01.285
<v Speaker 1>go ahead and deploy

00:57:01.445 --> 00:57:03.205
<v Speaker 1>any types of workloads you need to the

00:57:03.205 --> 00:57:04.085
<v Speaker 1>workload cluster.

00:57:06.250 --> 00:57:06.970
<v Speaker 0>Awesome.

00:57:07.690 --> 00:57:10.730
<v Speaker 0>K. So let's run our cluster API once

00:57:10.730 --> 00:57:11.450
<v Speaker 0>more.

00:57:12.730 --> 00:57:15.130
<v Speaker 0>We got lots of ready machines.

00:57:19.530 --> 00:57:21.370
<v Speaker 0>Our control plane now says ready.

00:57:21.825 --> 00:57:23.105
<v Speaker 0>I'm assuming this is If

00:57:25.025 --> 00:57:26.785
<v Speaker 1>you see the control plane's also on its

00:57:26.785 --> 00:57:29.345
<v Speaker 1>way to scaling up to three replicas as

00:57:29.345 --> 00:57:29.825
<v Speaker 1>well,

00:57:30.785 --> 00:57:32.545
<v Speaker 1>and it'll scale up got an AJ control

00:57:32.545 --> 00:57:33.585
<v Speaker 0>plane as well.

00:57:34.065 --> 00:57:34.385
<v Speaker 0>Yep.

00:57:36.849 --> 00:57:37.570
<v Speaker 0>Okay.

00:57:39.090 --> 00:57:40.530
<v Speaker 0>She's getting interesting.

00:57:41.410 --> 00:57:44.210
<v Speaker 0>Not that it wasn't interesting, of course. Does

00:57:45.090 --> 00:57:47.330
<v Speaker 0>it configure SCD backups for me as well?

00:57:47.330 --> 00:57:48.369
<v Speaker 0>That would be pretty sweet.

00:57:48.995 --> 00:57:50.115
<v Speaker 1>It does not.

00:57:51.075 --> 00:57:53.635
<v Speaker 1>You know, we we had talked about it,

00:57:53.955 --> 00:57:56.355
<v Speaker 1>but even if you do SCD backups, it

00:57:56.355 --> 00:57:59.155
<v Speaker 1>doesn't necessarily guarantee the state of your,

00:57:59.475 --> 00:58:01.795
<v Speaker 1>you know, cluster being in a good state,

00:58:01.795 --> 00:58:04.750
<v Speaker 1>especially once you start throwing in persistent volumes

00:58:04.750 --> 00:58:07.950
<v Speaker 1>and things like that. So we generally recommend

00:58:08.589 --> 00:58:12.750
<v Speaker 1>folks use some type of Kubernetes specific backup

00:58:13.710 --> 00:58:17.150
<v Speaker 1>utility against their workload clusters if there's data

00:58:17.150 --> 00:58:18.829
<v Speaker 1>that they care about, whether it's

00:58:19.525 --> 00:58:20.805
<v Speaker 1>something like

00:58:20.965 --> 00:58:23.685
<v Speaker 1>Valero or or, you know, anything else in

00:58:23.685 --> 00:58:24.485
<v Speaker 1>that space.

00:58:25.765 --> 00:58:26.485
<v Speaker 0>Okay.

00:58:30.805 --> 00:58:32.245
<v Speaker 0>I don't know whether I should just be

00:58:32.245 --> 00:58:34.245
<v Speaker 0>patient or I should just keep poking at

00:58:34.245 --> 00:58:34.805
<v Speaker 0>things. But

00:58:37.660 --> 00:58:39.180
<v Speaker 1>And it's just gonna take a little bit

00:58:39.180 --> 00:58:41.420
<v Speaker 1>of time because we are dealing with,

00:58:42.780 --> 00:58:44.940
<v Speaker 1>you know, bare metal servers that take a

00:58:44.940 --> 00:58:46.620
<v Speaker 1>little bit more time to come up. And

00:58:46.620 --> 00:58:48.700
<v Speaker 1>then the way the packet provider is doing

00:58:48.700 --> 00:58:49.580
<v Speaker 1>the bootstrapping,

00:58:50.025 --> 00:58:52.105
<v Speaker 1>you know, downloading all the binaries on the

00:58:52.105 --> 00:58:53.705
<v Speaker 1>fly takes a little bit longer.

00:58:55.944 --> 00:58:57.224
<v Speaker 0>Yeah. I mean, we do

00:58:58.025 --> 00:59:00.744
<v Speaker 0>we have seen that our control plane is

00:59:00.744 --> 00:59:02.744
<v Speaker 0>scaling up, and we have got worker machines

00:59:02.744 --> 00:59:05.464
<v Speaker 0>being deployed. That's pretty awesome.

00:59:09.430 --> 00:59:10.710
<v Speaker 0>So

00:59:13.990 --> 00:59:15.430
<v Speaker 0>let's go back to

00:59:15.670 --> 00:59:16.470
<v Speaker 0>this cluster.

00:59:17.795 --> 00:59:18.755
<v Speaker 0>When

00:59:18.755 --> 00:59:20.275
<v Speaker 0>I get when I run git all, I

00:59:20.275 --> 00:59:23.155
<v Speaker 0>was expecting to see some sort of could

00:59:23.155 --> 00:59:25.235
<v Speaker 0>proxy Calico pods.

00:59:27.235 --> 00:59:28.995
<v Speaker 0>Because I'm not good on namespaces. Right?

00:59:34.050 --> 00:59:34.930
<v Speaker 0>Silly me.

00:59:35.410 --> 00:59:36.930
<v Speaker 0>So we do have

00:59:38.130 --> 00:59:38.849
<v Speaker 0>that's cool.

00:59:47.675 --> 00:59:49.115
<v Speaker 0>Okay. Perfect.

00:59:50.075 --> 00:59:51.755
<v Speaker 1>Could also run some, like,

00:59:51.995 --> 00:59:54.555
<v Speaker 1>kubectl get nodes on there. And,

00:59:54.955 --> 00:59:56.555
<v Speaker 1>generally, if things are in the process of

00:59:56.555 --> 00:59:57.435
<v Speaker 1>bootstrapping,

00:59:57.435 --> 00:59:58.235
<v Speaker 1>you can see,

00:59:58.635 --> 01:00:01.160
<v Speaker 1>you know, part of the progress there as

01:00:01.160 --> 01:00:01.720
<v Speaker 1>well.

01:00:06.680 --> 01:00:08.760
<v Speaker 0>So it does say that my

01:00:11.240 --> 01:00:12.839
<v Speaker 0>worker nodes are ready.

01:00:14.045 --> 01:00:16.125
<v Speaker 0>So I guess I can deploy something.

01:00:16.925 --> 01:00:17.645
<v Speaker 0>Yeah.

01:00:20.765 --> 01:00:22.125
<v Speaker 0>Let's go with index.

01:00:33.900 --> 01:00:34.860
<v Speaker 0>Resource

01:00:34.860 --> 01:00:35.580
<v Speaker 0>on it.

01:00:40.620 --> 01:00:41.660
<v Speaker 0>That

01:00:41.655 --> 01:00:44.295
<v Speaker 0>should be okay. So I can do oh,

01:00:44.295 --> 01:00:46.455
<v Speaker 0>I need my special config.

01:00:47.815 --> 01:00:48.455
<v Speaker 0>I

01:00:49.095 --> 01:00:49.495
<v Speaker 0>Internet.

01:00:58.069 --> 01:00:59.270
<v Speaker 0>If I get bugs.

01:01:02.069 --> 01:01:04.630
<v Speaker 0>Let's take a watch on oh, we'll find

01:01:04.630 --> 01:01:06.310
<v Speaker 0>a watch if it's already running.

01:01:07.750 --> 01:01:08.390
<v Speaker 0>So

01:01:09.225 --> 01:01:11.065
<v Speaker 0>I see we do have a question out

01:01:11.065 --> 01:01:11.945
<v Speaker 1>there too.

01:01:13.385 --> 01:01:14.505
<v Speaker 0>Ah, cool.

01:01:15.465 --> 01:01:17.465
<v Speaker 0>Oh, wait. Pocket fence.

01:01:18.665 --> 01:01:20.745
<v Speaker 0>That's how I learn, I mean, I I

01:01:20.745 --> 01:01:23.385
<v Speaker 0>I just type as many describe commands and

01:01:23.385 --> 01:01:25.065
<v Speaker 0>edit commands as I can until I know

01:01:25.065 --> 01:01:27.200
<v Speaker 0>what's going on. So okay.

01:01:28.240 --> 01:01:28.960
<v Speaker 0>So

01:01:30.160 --> 01:01:33.120
<v Speaker 0>we have a question. Does Cluster API

01:01:33.359 --> 01:01:35.760
<v Speaker 0>orchestrate Kubernetes upgrades?

01:01:37.200 --> 01:01:38.720
<v Speaker 1>And yes. Yes. It does.

01:01:39.645 --> 01:01:41.325
<v Speaker 1>That's one of the things that we introduced

01:01:41.325 --> 01:01:43.405
<v Speaker 1>with v one alpha three with the cube

01:01:43.405 --> 01:01:44.845
<v Speaker 1>ADM control plane.

01:01:45.725 --> 01:01:48.525
<v Speaker 1>We've always been able to orchestrate the upgrades

01:01:48.525 --> 01:01:51.325
<v Speaker 1>of machine deployments because we have the declarative

01:01:51.325 --> 01:01:52.285
<v Speaker 1>config there.

01:01:53.405 --> 01:01:56.440
<v Speaker 1>You can't necessarily do this in a very

01:01:56.440 --> 01:01:58.600
<v Speaker 1>good way with the packet provider because as

01:01:58.600 --> 01:02:01.480
<v Speaker 1>you've seen, the way that we kinda bootstrap

01:02:01.480 --> 01:02:04.600
<v Speaker 1>causes some issues with it. But assuming that

01:02:04.600 --> 01:02:07.320
<v Speaker 1>wasn't an issue, you can basically just upgrade

01:02:07.695 --> 01:02:10.575
<v Speaker 1>or update the version on the machine deployment,

01:02:10.575 --> 01:02:13.215
<v Speaker 1>and it would orchestrate the rolling update of

01:02:13.215 --> 01:02:14.495
<v Speaker 1>those worker nodes.

01:02:14.655 --> 01:02:16.495
<v Speaker 1>But with v one alpha three, when we

01:02:16.495 --> 01:02:18.655
<v Speaker 1>introduced kubatem control plane,

01:02:19.455 --> 01:02:22.095
<v Speaker 1>that also provides the same mechanism there.

01:02:23.690 --> 01:02:25.609
<v Speaker 0>Does it do is it an in place

01:02:25.609 --> 01:02:27.849
<v Speaker 0>upgrade, or is it terminate and then reprovision

01:02:27.849 --> 01:02:28.970
<v Speaker 0>on new machines?

01:02:29.529 --> 01:02:31.450
<v Speaker 1>It does not actually do an in place

01:02:31.450 --> 01:02:32.170
<v Speaker 1>upgrade.

01:02:32.569 --> 01:02:35.289
<v Speaker 1>We wanted to avoid some of the complexity

01:02:35.289 --> 01:02:35.529
<v Speaker 1>there.

01:02:36.265 --> 01:02:38.345
<v Speaker 1>So what it does is it will spin

01:02:38.345 --> 01:02:39.465
<v Speaker 1>up a new

01:02:40.345 --> 01:02:41.145
<v Speaker 1>instance.

01:02:41.145 --> 01:02:43.065
<v Speaker 1>It will run kubeadm

01:02:43.065 --> 01:02:44.985
<v Speaker 1>join to join the existing

01:02:45.545 --> 01:02:47.785
<v Speaker 1>control plane instances, and then it will

01:02:48.450 --> 01:02:50.369
<v Speaker 1>remove one of the existing ones, and it

01:02:50.369 --> 01:02:52.609
<v Speaker 1>will continue on that until it's made it

01:02:52.609 --> 01:02:53.890
<v Speaker 1>through all the replicas.

01:02:54.690 --> 01:02:56.850
<v Speaker 0>So in a bare mail configuration

01:02:59.890 --> 01:03:01.970
<v Speaker 0>sorry. So is that upgrading the control plane

01:03:01.970 --> 01:03:03.010
<v Speaker 0>or just the worker nodes?

01:03:04.475 --> 01:03:06.395
<v Speaker 1>Both with the default configuration,

01:03:07.195 --> 01:03:07.995
<v Speaker 1>it will

01:03:08.555 --> 01:03:10.875
<v Speaker 1>assuming you upgrade both you know, upgrade

01:03:11.275 --> 01:03:13.595
<v Speaker 1>the definition on the machine machine deployment and

01:03:13.595 --> 01:03:15.275
<v Speaker 1>the Kubernetes control plane,

01:03:15.435 --> 01:03:17.915
<v Speaker 1>it's the same process. It will surge up

01:03:19.140 --> 01:03:20.420
<v Speaker 1>for the replacement

01:03:20.420 --> 01:03:21.300
<v Speaker 1>and then,

01:03:22.260 --> 01:03:23.940
<v Speaker 1>you know, remove instances

01:03:24.420 --> 01:03:25.540
<v Speaker 1>along the way.

01:03:26.180 --> 01:03:28.420
<v Speaker 0>So I'm assuming it's waiting till SED is

01:03:28.420 --> 01:03:30.740
<v Speaker 0>is replicated there to the new

01:03:31.140 --> 01:03:33.700
<v Speaker 0>notes and then strips them back down. Okay.

01:03:34.135 --> 01:03:36.215
<v Speaker 1>Correct. Yep. Yeah. We wait until,

01:03:36.455 --> 01:03:38.695
<v Speaker 1>ETCD is in a healthy state. We also

01:03:38.695 --> 01:03:39.735
<v Speaker 1>verify that,

01:03:40.295 --> 01:03:43.495
<v Speaker 1>the static pod manifest for the controller manager,

01:03:43.495 --> 01:03:44.615
<v Speaker 1>the scheduler,

01:03:44.695 --> 01:03:46.135
<v Speaker 1>and the API server

01:03:46.320 --> 01:03:48.640
<v Speaker 1>are in a good state before we kind

01:03:48.640 --> 01:03:50.160
<v Speaker 1>of continue in the process.

01:03:51.120 --> 01:03:53.600
<v Speaker 0>Yeah. You're pretty much removing all the pain

01:03:53.600 --> 01:03:55.440
<v Speaker 0>from every Kubernetes upgrade I've ever done in

01:03:55.440 --> 01:03:56.960
<v Speaker 0>my entire life. So

01:03:58.080 --> 01:04:00.000
<v Speaker 0>so this is exciting for me.

01:04:00.714 --> 01:04:02.315
<v Speaker 0>Now I did try to do a port

01:04:02.315 --> 01:04:04.395
<v Speaker 0>forward to my engine x pod.

01:04:07.515 --> 01:04:09.755
<v Speaker 0>I'm not sure why that wouldn't work.

01:04:11.835 --> 01:04:12.795
<v Speaker 0>Alright.

01:04:12.795 --> 01:04:15.730
<v Speaker 0>It's not that important. I can oh, I'm

01:04:15.730 --> 01:04:17.170
<v Speaker 0>getting pod not banned.

01:04:23.970 --> 01:04:25.810
<v Speaker 0>Well, it's to be like, it was

01:04:26.210 --> 01:04:28.210
<v Speaker 0>then expose it over a service or just

01:04:28.210 --> 01:04:29.250
<v Speaker 0>a service prefix.

01:04:30.065 --> 01:04:31.505
<v Speaker 0>It's just me being,

01:04:32.385 --> 01:04:34.145
<v Speaker 0>you know, a better than an idiot.

01:04:36.145 --> 01:04:36.945
<v Speaker 0>That's okay.

01:04:38.865 --> 01:04:39.665
<v Speaker 0>Awesome.

01:04:41.265 --> 01:04:43.585
<v Speaker 0>That was amazing. Thank you very much.

01:04:44.225 --> 01:04:46.720
<v Speaker 0>Thank you. I now know what the Cluster

01:04:46.720 --> 01:04:47.600
<v Speaker 0>API

01:04:48.400 --> 01:04:50.640
<v Speaker 0>does, and I've now spun up my own

01:04:50.640 --> 01:04:53.760
<v Speaker 0>Kubernetes cluster on packet. That is pretty sweet.

01:04:54.960 --> 01:04:56.880
<v Speaker 1>And then you can start getting into some,

01:04:57.215 --> 01:04:59.055
<v Speaker 1>you know, fun down the line. You can

01:04:59.055 --> 01:05:01.535
<v Speaker 1>throw in things like the cluster autoscaler into

01:05:01.535 --> 01:05:04.655
<v Speaker 1>the mix and start automating scaling of these

01:05:04.655 --> 01:05:05.855
<v Speaker 1>clusters as well.

01:05:07.855 --> 01:05:08.255
<v Speaker 0>So

01:05:10.119 --> 01:05:13.320
<v Speaker 0>the I can run the cluster autoscaler

01:05:13.400 --> 01:05:14.200
<v Speaker 0>to

01:05:15.800 --> 01:05:18.600
<v Speaker 0>add new nodes when, what, CPU and memory

01:05:18.600 --> 01:05:20.120
<v Speaker 0>get above a certain threshold,

01:05:21.000 --> 01:05:21.800
<v Speaker 1>etcetera.

01:05:21.800 --> 01:05:24.465
<v Speaker 1>By by default, with the kind of

01:05:24.785 --> 01:05:26.065
<v Speaker 1>cluster API

01:05:26.865 --> 01:05:29.585
<v Speaker 1>integration for Cluster Autoscaler, what it'll do is

01:05:29.585 --> 01:05:30.625
<v Speaker 1>it'll look at

01:05:31.265 --> 01:05:32.865
<v Speaker 1>the scheduling constraints

01:05:32.865 --> 01:05:35.744
<v Speaker 1>of the workload cluster. So

01:05:36.330 --> 01:05:38.650
<v Speaker 1>if you have any pods that are pending,

01:05:39.530 --> 01:05:42.570
<v Speaker 1>it'll try to determine how many resources it

01:05:42.570 --> 01:05:44.330
<v Speaker 1>needs to spin up for there so it'll

01:05:44.330 --> 01:05:48.010
<v Speaker 1>scale up your machine deployments appropriately for you.

01:05:48.170 --> 01:05:50.570
<v Speaker 1>And then if you start ending up with

01:05:50.570 --> 01:05:51.610
<v Speaker 1>too much

01:05:52.265 --> 01:05:53.945
<v Speaker 1>excess resources,

01:05:53.945 --> 01:05:56.745
<v Speaker 1>it'll start scaling those resources back down.

01:05:57.785 --> 01:05:58.825
<v Speaker 0>Okay.

01:06:00.745 --> 01:06:02.265
<v Speaker 0>Okay. Well, I don't I don't wanna take

01:06:02.265 --> 01:06:03.785
<v Speaker 0>up too much more of your time by

01:06:03.785 --> 01:06:06.070
<v Speaker 0>installing that. That's not deployed by default. Right?

01:06:06.070 --> 01:06:07.590
<v Speaker 0>That's an add on that I would then

01:06:07.590 --> 01:06:09.670
<v Speaker 0>add to my cluster. Okay. Then I think

01:06:09.670 --> 01:06:11.910
<v Speaker 0>you've just, you know, verbally agreed to do

01:06:11.910 --> 01:06:13.750
<v Speaker 0>another session with me when we dig into

01:06:13.750 --> 01:06:15.910
<v Speaker 0>some of the extra features and of the

01:06:15.910 --> 01:06:18.150
<v Speaker 0>cluster API and the other scaler. So, you

01:06:18.150 --> 01:06:18.869
<v Speaker 0>know, thanks for that.

01:06:19.785 --> 01:06:21.545
<v Speaker 1>Yeah. We can definitely do that.

01:06:21.944 --> 01:06:23.785
<v Speaker 1>We we'll need to wait till some of

01:06:23.785 --> 01:06:24.345
<v Speaker 1>the

01:06:24.905 --> 01:06:26.665
<v Speaker 1>the changes are

01:06:26.905 --> 01:06:28.984
<v Speaker 1>you know, that are currently in flight land

01:06:28.984 --> 01:06:31.145
<v Speaker 1>because right now, you would need kind of

01:06:31.145 --> 01:06:33.545
<v Speaker 1>like a self hosted cluster API cluster to

01:06:33.545 --> 01:06:34.425
<v Speaker 1>make it work. So,

01:06:35.540 --> 01:06:38.020
<v Speaker 1>you know, once those changes land, then you'll

01:06:38.020 --> 01:06:40.500
<v Speaker 1>be able to run, you know, multiple autoscalers

01:06:40.500 --> 01:06:42.740
<v Speaker 1>and manage multiple workload clusters,

01:06:42.980 --> 01:06:45.060
<v Speaker 1>you know, within a single management cluster.

01:06:46.100 --> 01:06:47.060
<v Speaker 0>Very, very cool.

01:06:47.715 --> 01:06:49.955
<v Speaker 0>Alright. Is there anything else you would like

01:06:49.955 --> 01:06:51.795
<v Speaker 0>to share with people before we finish up

01:06:51.795 --> 01:06:53.955
<v Speaker 0>for the this afternoon of the morning for

01:06:53.955 --> 01:06:54.595
<v Speaker 0>yourself?

01:06:55.395 --> 01:06:57.795
<v Speaker 1>Not that I can think of. It's been

01:06:57.795 --> 01:07:00.595
<v Speaker 1>a pleasure to, work through this with you

01:07:00.210 --> 01:07:02.130
<v Speaker 1>today. No. Thank you very much for joining

01:07:02.130 --> 01:07:03.730
<v Speaker 0>me. It was really interesting to walk through

01:07:03.730 --> 01:07:05.170
<v Speaker 0>that and just see how it all works

01:07:05.170 --> 01:07:06.450
<v Speaker 0>and, you know, be able to ask those

01:07:06.450 --> 01:07:08.369
<v Speaker 0>questions to someone who's really close to this

01:07:08.369 --> 01:07:10.210
<v Speaker 0>is just, you know, invaluable. So, you know,

01:07:10.210 --> 01:07:11.090
<v Speaker 0>thank you again.

01:07:11.570 --> 01:07:13.730
<v Speaker 0>I'm looking forward to future updates, and I

01:07:13.730 --> 01:07:15.215
<v Speaker 0>can't wait to see where this goes. So

01:07:15.215 --> 01:07:16.735
<v Speaker 0>again, thank you for joining me. Have a

01:07:16.735 --> 01:07:17.855
<v Speaker 0>nice day, and I will speak to you

01:07:17.855 --> 01:07:18.415
<v Speaker 0>soon.

01:07:19.135 --> 01:07:19.615
<v Speaker 0>Adios.
