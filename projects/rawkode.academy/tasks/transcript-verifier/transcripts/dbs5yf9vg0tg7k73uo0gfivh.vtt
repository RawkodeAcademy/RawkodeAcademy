WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e11e5d52-10ba-43bf-97e8-351e943c6ec7
Created: 2025-04-29T21:58:36.803Z
Duration: 5535.0254
Channels: 1

00:01:34.515 --> 00:01:35.475
<v Speaker 0>Hello.

00:01:35.554 --> 00:01:37.475
<v Speaker 0>And welcome to today's episode.

00:01:37.875 --> 00:01:40.835
<v Speaker 0>Today, we are continuing the series with Laravel

00:01:40.835 --> 00:01:44.194
<v Speaker 0>working on a local development environment with Docker.

00:01:44.640 --> 00:01:47.120
<v Speaker 0>And we will also cover deploying our Laravel

00:01:47.120 --> 00:01:47.840
<v Speaker 0>application

00:01:48.080 --> 00:01:51.280
<v Speaker 0>with Kubernetes. Hopefully, the production like uncover all

00:01:51.280 --> 00:01:52.480
<v Speaker 0>the good bits in between.

00:01:52.880 --> 00:01:54.640
<v Speaker 0>As you'll seen in previous episodes, if you've

00:01:54.640 --> 00:01:56.560
<v Speaker 0>seen them, this is not always plain sailing,

00:01:56.560 --> 00:01:57.920
<v Speaker 0>but I will do my best to make

00:01:57.920 --> 00:01:59.520
<v Speaker 0>this work as best as we can.

00:02:00.535 --> 00:02:03.095
<v Speaker 0>I'm very fortunate today to be joined by

00:02:03.095 --> 00:02:05.415
<v Speaker 0>again, Kieran McNulty. Always a pleasure to have

00:02:05.415 --> 00:02:07.415
<v Speaker 0>you back. And a new guest today, we

00:02:07.415 --> 00:02:09.735
<v Speaker 0>have Alex Bowers who is our resident Laravel

00:02:09.735 --> 00:02:11.575
<v Speaker 0>expert who is gonna make sure that we

00:02:11.575 --> 00:02:13.975
<v Speaker 0>don't mess up too much again. Hey. How

00:02:13.975 --> 00:02:16.180
<v Speaker 0>are you both then? I'm good. Thank you.

00:02:17.140 --> 00:02:19.700
<v Speaker 0>No pressure, Alex. But now everything lies on

00:02:19.700 --> 00:02:21.380
<v Speaker 0>your shoulders as Kieran and I have proved

00:02:21.380 --> 00:02:24.340
<v Speaker 0>ourselves useless a few times now. So Well,

00:02:24.340 --> 00:02:25.940
<v Speaker 1>the odds and issue last week definitely wouldn't

00:02:25.940 --> 00:02:27.140
<v Speaker 1>have been something I caught because I did

00:02:27.140 --> 00:02:28.660
<v Speaker 1>not know that was a thing. So

00:02:29.140 --> 00:02:29.700
<v Speaker 1>yeah.

00:02:29.940 --> 00:02:32.235
<v Speaker 1>We'll see how it goes. Yeah. If I

00:02:32.235 --> 00:02:33.915
<v Speaker 0>don't sorry. I only got kitchen. I like

00:02:33.915 --> 00:02:35.595
<v Speaker 2>this new idea of drafting people in from

00:02:35.595 --> 00:02:36.635
<v Speaker 2>the comments.

00:02:37.355 --> 00:02:37.915
<v Speaker 0>Yeah.

00:02:38.395 --> 00:02:40.315
<v Speaker 0>You comment a lot. Come and join us.

00:02:40.395 --> 00:02:41.515
<v Speaker 0>I think what was

00:02:41.915 --> 00:02:43.275
<v Speaker 0>in fact, we got really lucky I think

00:02:43.275 --> 00:02:44.955
<v Speaker 0>last time and we'll cover what we we

00:02:44.955 --> 00:02:47.920
<v Speaker 0>went over. But the artisan file being used

00:02:47.920 --> 00:02:49.920
<v Speaker 0>to detect the root directory was actually a

00:02:49.920 --> 00:02:51.520
<v Speaker 0>random comment as well from someone that was

00:02:51.520 --> 00:02:54.240
<v Speaker 0>watching, which really saves us probably hours if

00:02:54.240 --> 00:02:55.040
<v Speaker 0>not days.

00:02:55.280 --> 00:02:56.480
<v Speaker 1>And then on that week or

00:02:58.925 --> 00:03:00.285
<v Speaker 0>We'll see how we get on today. I'm

00:03:00.285 --> 00:03:02.045
<v Speaker 0>not sure how many more of these we're

00:03:02.045 --> 00:03:04.365
<v Speaker 0>gonna have. I think we're close. We have

00:03:04.365 --> 00:03:06.605
<v Speaker 0>a pretty good setup. There's lot of stuff

00:03:06.605 --> 00:03:08.045
<v Speaker 1>in Laravel that's still not being covered yet

00:03:08.045 --> 00:03:08.525
<v Speaker 1>though.

00:03:09.245 --> 00:03:10.045
<v Speaker 0>Maybe

00:03:10.045 --> 00:03:11.805
<v Speaker 0>this is a bad idea. Alright.

00:03:14.180 --> 00:03:15.860
<v Speaker 0>Let's go for where we are. That's a

00:03:15.860 --> 00:03:17.540
<v Speaker 0>bit of a a recap. I'll pop up

00:03:17.540 --> 00:03:18.420
<v Speaker 0>my screen.

00:03:19.780 --> 00:03:20.740
<v Speaker 0>And

00:03:20.980 --> 00:03:22.580
<v Speaker 0>I think what we'll do is we'll start

00:03:22.580 --> 00:03:23.540
<v Speaker 0>with the

00:03:26.894 --> 00:03:28.655
<v Speaker 0>how do I expect this to work? Right?

00:03:28.655 --> 00:03:29.215
<v Speaker 0>So

00:03:30.334 --> 00:03:31.694
<v Speaker 0>what we have and I'll go over the

00:03:31.694 --> 00:03:32.735
<v Speaker 0>files in a moment.

00:03:33.055 --> 00:03:34.655
<v Speaker 0>But what we should have is an environment

00:03:34.655 --> 00:03:35.775
<v Speaker 0>where I can run

00:03:36.734 --> 00:03:39.375
<v Speaker 0>shell and everything should just be working. This

00:03:39.375 --> 00:03:40.094
<v Speaker 0>is the plan. Right?

00:03:40.920 --> 00:03:42.760
<v Speaker 0>That should spin up. In fact, we can

00:03:42.760 --> 00:03:45.239
<v Speaker 0>see it's got our MariaDB running. We have

00:03:45.239 --> 00:03:46.200
<v Speaker 0>a PHPFPM

00:03:46.200 --> 00:03:48.760
<v Speaker 0>container running, which is serving our PHP assets.

00:03:48.760 --> 00:03:51.480
<v Speaker 0>We have NGINX running, which is serving our

00:03:52.360 --> 00:03:53.800
<v Speaker 0>static assets,

00:03:53.800 --> 00:03:53.879
<v Speaker 0>and

00:03:54.695 --> 00:03:55.655
<v Speaker 0>we have

00:03:56.135 --> 00:03:58.295
<v Speaker 0>no no nodes. So we maybe didn't automate

00:03:58.295 --> 00:03:59.335
<v Speaker 0>that last time.

00:04:00.055 --> 00:04:02.775
<v Speaker 2>We did. The engine x doesn't depend on

00:04:02.775 --> 00:04:03.335
<v Speaker 2>it.

00:04:04.215 --> 00:04:05.015
<v Speaker 0>Alright.

00:04:05.575 --> 00:04:05.975
<v Speaker 0>So

00:04:07.330 --> 00:04:08.050
<v Speaker 0>should definitely

00:04:09.410 --> 00:04:10.290
<v Speaker 0>fix that.

00:04:10.690 --> 00:04:12.210
<v Speaker 0>Now if I take a look at our

00:04:12.210 --> 00:04:14.050
<v Speaker 0>PHP configuration,

00:04:15.730 --> 00:04:18.209
<v Speaker 0>I don't know. NGINX is serving. So browsing

00:04:18.209 --> 00:04:19.490
<v Speaker 0>to eighty eighty

00:04:19.810 --> 00:04:20.610
<v Speaker 0>should

00:04:21.575 --> 00:04:23.015
<v Speaker 0>get me something.

00:04:30.535 --> 00:04:32.215
<v Speaker 0>We've got some work to do. If if

00:04:32.215 --> 00:04:34.055
<v Speaker 1>we never use to log in, which is

00:04:34.280 --> 00:04:35.240
<v Speaker 1>something.

00:04:35.400 --> 00:04:37.160
<v Speaker 1>So PHP is working. It looks like it's

00:04:37.160 --> 00:04:38.920
<v Speaker 1>not it's a few stuff isn't working there.

00:04:39.240 --> 00:04:41.320
<v Speaker 0>Yes. So the chances are that in our

00:04:41.320 --> 00:04:43.880
<v Speaker 0>last episode, working with the the node

00:04:44.360 --> 00:04:46.840
<v Speaker 0>NPM style workflow, we just did our position

00:04:46.840 --> 00:04:49.400
<v Speaker 0>right now where we don't actually have those

00:04:49.400 --> 00:04:51.945
<v Speaker 0>assets being delivered. Is it worth just before

00:04:51.945 --> 00:04:53.465
<v Speaker 1>you do anything, be compiling all of those

00:04:53.465 --> 00:04:54.985
<v Speaker 1>assets just to make sure that they're all

00:04:54.985 --> 00:04:55.705
<v Speaker 1>present?

00:04:56.985 --> 00:04:58.745
<v Speaker 1>Hello, it says? Oh, no. Yeah. Got letter

00:04:58.745 --> 00:05:00.505
<v Speaker 1>4. 4 0 4. Okay. So

00:05:00.905 --> 00:05:02.665
<v Speaker 0>let's go over that then. So

00:05:03.169 --> 00:05:05.650
<v Speaker 0>our main focus last time was

00:05:05.810 --> 00:05:07.810
<v Speaker 0>this node workflow here.

00:05:08.050 --> 00:05:10.290
<v Speaker 0>Mhmm. What we wanted to do was provide

00:05:10.290 --> 00:05:12.930
<v Speaker 0>something that would run an MPM run watch

00:05:12.930 --> 00:05:14.690
<v Speaker 0>in the background continually

00:05:15.090 --> 00:05:17.490
<v Speaker 0>working on the asset completion for us. Now

00:05:17.490 --> 00:05:18.610
<v Speaker 0>this actually looks

00:05:19.504 --> 00:05:21.504
<v Speaker 0>okay, but the problem we had last time

00:05:21.504 --> 00:05:24.544
<v Speaker 0>was we needed Artisan to exist in order

00:05:24.544 --> 00:05:27.185
<v Speaker 0>for our assets to be put in the

00:05:27.185 --> 00:05:28.145
<v Speaker 0>right directory.

00:05:28.544 --> 00:05:30.305
<v Speaker 0>So let's confirm that.

00:05:30.544 --> 00:05:33.025
<v Speaker 2>And, David, that that volume, the assets were

00:05:33.025 --> 00:05:33.824
<v Speaker 2>being put into,

00:05:34.620 --> 00:05:36.620
<v Speaker 2>is it likely that's been removed from your

00:05:36.620 --> 00:05:37.980
<v Speaker 2>machine in the last week?

00:05:40.780 --> 00:05:41.900
<v Speaker 0>Yeah. Definitely.

00:05:42.060 --> 00:05:42.700
<v Speaker 0>For sure.

00:05:43.820 --> 00:05:45.580
<v Speaker 0>I I delete liberally.

00:05:45.580 --> 00:05:47.980
<v Speaker 0>So So we have to have never been

00:05:47.980 --> 00:05:50.224
<v Speaker 2>compiled yet. It might be all works if

00:05:50.224 --> 00:05:51.025
<v Speaker 2>we start there.

00:05:51.824 --> 00:05:55.104
<v Speaker 0>Okay. So first problem. There's no MPM container

00:05:55.104 --> 00:05:57.664
<v Speaker 0>running, and that's because our d shell environment

00:05:57.664 --> 00:05:59.985
<v Speaker 0>is very specific with the dependencies. And we

00:05:59.985 --> 00:06:02.810
<v Speaker 0>haven't actually made anything dependent or node dependency

00:06:02.810 --> 00:06:04.970
<v Speaker 0>because if I recall correctly, we had a

00:06:04.970 --> 00:06:06.330
<v Speaker 0>recursive dependency.

00:06:08.090 --> 00:06:09.610
<v Speaker 0>Don't remember that. Right?

00:06:10.330 --> 00:06:12.250
<v Speaker 0>We do. So let's take a look at

00:06:12.250 --> 00:06:13.770
<v Speaker 0>the make fail.

00:06:14.410 --> 00:06:15.765
<v Speaker 0>And We'll just spend a few minutes. I

00:06:15.765 --> 00:06:17.365
<v Speaker 0>think it's important to remember where we are

00:06:17.365 --> 00:06:19.925
<v Speaker 0>exactly rather than weighing in it. So

00:06:20.485 --> 00:06:22.565
<v Speaker 0>d shell environment spends up NGINX in the

00:06:22.565 --> 00:06:23.285
<v Speaker 0>background,

00:06:23.685 --> 00:06:26.485
<v Speaker 0>and then it spends up PHP

00:06:26.485 --> 00:06:29.285
<v Speaker 0>and our dependencies of PHP will be spun

00:06:29.285 --> 00:06:31.080
<v Speaker 0>up for us. So if we come back

00:06:31.080 --> 00:06:33.080
<v Speaker 0>to our Docker Compose file, we can see

00:06:33.400 --> 00:06:35.320
<v Speaker 0>that it depends on MariaDB and that is

00:06:35.320 --> 00:06:37.400
<v Speaker 0>created for us, but that is it. There's

00:06:37.400 --> 00:06:38.520
<v Speaker 0>nothing currently

00:06:39.960 --> 00:06:41.400
<v Speaker 0>that starts node.

00:06:42.855 --> 00:06:45.575
<v Speaker 0>Now if I remember correctly, the challenge with

00:06:45.815 --> 00:06:47.655
<v Speaker 0>automating that was

00:06:48.375 --> 00:06:51.335
<v Speaker 0>we have a shared volume between NGINX and

00:06:51.335 --> 00:06:53.895
<v Speaker 0>node. They're both consuming this public volume.

00:06:53.895 --> 00:06:54.215
<v Speaker 0>Mhmm.

00:06:55.480 --> 00:06:56.440
<v Speaker 0>And

00:06:58.360 --> 00:07:00.040
<v Speaker 0>could we get away with that? And we're

00:07:00.040 --> 00:07:01.800
<v Speaker 0>just saying that our PHP

00:07:02.200 --> 00:07:03.720
<v Speaker 0>no. Okay. So we can't add it to

00:07:03.720 --> 00:07:06.200
<v Speaker 0>PHP because PHP is a dependency on engine

00:07:06.200 --> 00:07:08.040
<v Speaker 0>x. And engine x wouldn't be able to

00:07:08.040 --> 00:07:10.200
<v Speaker 0>satisfy the dependency, but also depending on node.

00:07:11.194 --> 00:07:12.395
<v Speaker 0>So we can

00:07:13.754 --> 00:07:15.435
<v Speaker 0>let's see what happens. Yeah.

00:07:15.835 --> 00:07:17.195
<v Speaker 2>I see that. Right?

00:07:18.395 --> 00:07:19.115
<v Speaker 0>Alright.

00:07:19.275 --> 00:07:20.955
<v Speaker 0>So we're just gonna add that dependency. I

00:07:20.955 --> 00:07:22.474
<v Speaker 0>am gonna add the artist on file because

00:07:22.474 --> 00:07:24.474
<v Speaker 0>we did cover that. We know that the

00:07:24.474 --> 00:07:26.155
<v Speaker 0>assets go in the wrong direction

00:07:26.640 --> 00:07:28.160
<v Speaker 0>if we do not have

00:07:29.120 --> 00:07:30.640
<v Speaker 0>that fail existing.

00:07:30.960 --> 00:07:32.000
<v Speaker 1>Mhmm. Yeah.

00:07:32.560 --> 00:07:34.640
<v Speaker 0>And in theory, I should

00:07:35.680 --> 00:07:36.880
<v Speaker 0>be able to run this again.

00:07:40.335 --> 00:07:42.414
<v Speaker 0>We have a node container, so our watch

00:07:42.414 --> 00:07:43.535
<v Speaker 0>should be running.

00:07:45.694 --> 00:07:48.095
<v Speaker 0>And we got an exit one. Okay.

00:07:48.815 --> 00:07:50.655
<v Speaker 0>Let's put out the logs on our node

00:07:50.655 --> 00:07:51.375
<v Speaker 0>application.

00:07:57.100 --> 00:07:59.260
<v Speaker 0>Cross end of not found.

00:08:04.460 --> 00:08:05.020
<v Speaker 0>Interesting.

00:08:09.145 --> 00:08:09.945
<v Speaker 0>So

00:08:12.585 --> 00:08:15.145
<v Speaker 0>anyone know what cross env is?

00:08:16.025 --> 00:08:18.104
<v Speaker 1>It's a node package that's

00:08:19.305 --> 00:08:20.985
<v Speaker 1>the pain of my life whenever you try

00:08:20.985 --> 00:08:21.865
<v Speaker 1>and do stuff with NPM.

00:08:22.360 --> 00:08:24.840
<v Speaker 0>Okay. Perfect. So the problem here is NPM

00:08:24.840 --> 00:08:26.440
<v Speaker 0>run watch as in doing an NPM install

00:08:26.440 --> 00:08:27.800
<v Speaker 0>first. Yes.

00:08:28.200 --> 00:08:28.920
<v Speaker 0>Okay.

00:08:29.720 --> 00:08:31.880
<v Speaker 0>So the way that we wanna tackle that

00:08:32.840 --> 00:08:35.400
<v Speaker 0>is probably by bringing on a custom build

00:08:35.400 --> 00:08:38.184
<v Speaker 0>step where it runs a Docker image, which

00:08:38.184 --> 00:08:40.105
<v Speaker 0>is run NPM install as part of the

00:08:40.105 --> 00:08:41.945
<v Speaker 0>build process and then

00:08:42.824 --> 00:08:44.345
<v Speaker 0>no. Because we went to over we've got

00:08:44.345 --> 00:08:45.385
<v Speaker 0>the volume there.

00:08:46.185 --> 00:08:47.625
<v Speaker 0>So we need we actually need to do

00:08:47.625 --> 00:08:49.160
<v Speaker 0>this and say, we're gonna need to make

00:08:49.160 --> 00:08:51.480
<v Speaker 0>target that this runs that ensures the MPM

00:08:51.480 --> 00:08:53.480
<v Speaker 0>install happens before

00:08:53.480 --> 00:08:55.240
<v Speaker 0>the run watch install happens.

00:08:55.560 --> 00:08:56.680
<v Speaker 2>Yeah. We don't need to build it into

00:08:56.680 --> 00:08:58.040
<v Speaker 2>the image because this is a and sort

00:08:58.040 --> 00:08:58.760
<v Speaker 2>of a femoral

00:08:59.160 --> 00:08:59.720
<v Speaker 0>Exactly.

00:09:00.635 --> 00:09:02.714
<v Speaker 1>Then Plus we have the shared volume, which

00:09:02.714 --> 00:09:04.475
<v Speaker 0>would just blow away over the top of

00:09:04.475 --> 00:09:06.875
<v Speaker 0>it, so it wouldn't work. So okay. Step

00:09:06.875 --> 00:09:08.875
<v Speaker 0>one. Let's let's get this sorted then.

00:09:09.675 --> 00:09:11.035
<v Speaker 0>So we're gonna do

00:09:13.595 --> 00:09:14.795
<v Speaker 0>node assets,

00:09:15.460 --> 00:09:17.540
<v Speaker 0>which is going to ensure we have an

00:09:17.540 --> 00:09:20.100
<v Speaker 0>NPM install followed by an NPM

00:09:20.100 --> 00:09:20.820
<v Speaker 0>run

00:09:20.980 --> 00:09:21.780
<v Speaker 0>watch.

00:09:21.940 --> 00:09:23.060
<v Speaker 0>It's in central.

00:09:24.340 --> 00:09:26.820
<v Speaker 0>If we update our Docker compose file here,

00:09:29.815 --> 00:09:31.415
<v Speaker 0>where you can just say make.

00:09:32.694 --> 00:09:33.495
<v Speaker 0>And

00:09:34.615 --> 00:09:36.935
<v Speaker 0>I'm assuming that make is gonna exist inside

00:09:36.935 --> 00:09:37.894
<v Speaker 0>this container.

00:09:38.055 --> 00:09:40.615
<v Speaker 2>I was gonna ask that. How many people

00:09:40.615 --> 00:09:43.095
<v Speaker 2>try and make their containers pretty lean, don't

00:09:43.095 --> 00:09:45.279
<v Speaker 2>they? How many actually include Make?

00:09:46.800 --> 00:09:49.200
<v Speaker 0>Anything that's based on a Ubuntu Debian will

00:09:49.200 --> 00:09:50.240
<v Speaker 0>come with Make.

00:09:50.959 --> 00:09:51.839
<v Speaker 0>Pretty sure.

00:09:53.440 --> 00:09:55.600
<v Speaker 0>The Alpine variants generally don't

00:09:56.000 --> 00:09:57.040
<v Speaker 0>there we go. We're good.

00:09:59.265 --> 00:10:00.865
<v Speaker 1>You need to mount the Makefile as well

00:10:00.865 --> 00:10:01.425
<v Speaker 1>then.

00:10:02.625 --> 00:10:03.425
<v Speaker 0>Gotcha.

00:10:05.024 --> 00:10:06.865
<v Speaker 0>Hey, Aaron, on your keep already.

00:10:08.305 --> 00:10:09.745
<v Speaker 0>Oh, we might add our Makefile.

00:10:13.490 --> 00:10:16.130
<v Speaker 0>And by magic, we're running our one single

00:10:16.130 --> 00:10:17.810
<v Speaker 0>command that we want to be our entry

00:10:17.810 --> 00:10:19.330
<v Speaker 0>point to this application.

00:10:21.810 --> 00:10:23.090
<v Speaker 0>That looks pretty good.

00:10:24.290 --> 00:10:25.170
<v Speaker 2>Can you see the logs?

00:10:27.105 --> 00:10:27.985
<v Speaker 0>Logs.

00:10:30.305 --> 00:10:31.265
<v Speaker 0>Hold on.

00:10:36.464 --> 00:10:39.024
<v Speaker 0>Okay. MPM blah blah blah off the codes.

00:10:42.649 --> 00:10:44.730
<v Speaker 0>What we're assuming here then is when this

00:10:44.730 --> 00:10:46.810
<v Speaker 0>completes, I should be able to browse to

00:10:46.810 --> 00:10:47.690
<v Speaker 0>the application.

00:10:50.970 --> 00:10:52.009
<v Speaker 0>Should should.

00:10:56.045 --> 00:10:58.925
<v Speaker 0>So while that's working, let's encourage

00:10:58.925 --> 00:11:00.685
<v Speaker 0>people to ask oh,

00:11:02.204 --> 00:11:04.125
<v Speaker 0>well, we have some comments already. So yeah.

00:11:04.125 --> 00:11:05.565
<v Speaker 0>I was gonna say we should encourage people

00:11:05.565 --> 00:11:07.565
<v Speaker 0>to leave comments. We will act we'll answer

00:11:07.565 --> 00:11:09.245
<v Speaker 0>as many questions as we can handle.

00:11:09.940 --> 00:11:11.300
<v Speaker 0>And if you want us to cover that's

00:11:11.300 --> 00:11:12.820
<v Speaker 0>not been covered yet, feel free to let

00:11:12.820 --> 00:11:14.339
<v Speaker 0>us know in the comments too.

00:11:16.899 --> 00:11:18.660
<v Speaker 0>Okay. What do we got so far?

00:11:20.579 --> 00:11:22.735
<v Speaker 0>Oh, we got a comment from Robert. This

00:11:22.735 --> 00:11:25.375
<v Speaker 0>episode will be useful. Yep. I really hope

00:11:25.375 --> 00:11:25.935
<v Speaker 0>so.

00:11:28.095 --> 00:11:29.855
<v Speaker 0>I'm I'm really hoping this is the first

00:11:29.855 --> 00:11:32.895
<v Speaker 0>episode where we're not a problem driven development

00:11:32.895 --> 00:11:35.230
<v Speaker 0>and we actually, you know, can do the

00:11:35.230 --> 00:11:36.910
<v Speaker 0>things that we wanna do. But I'm not

00:11:36.910 --> 00:11:39.389
<v Speaker 0>gonna get I'm not gonna get make too

00:11:39.389 --> 00:11:40.350
<v Speaker 0>many assumptions.

00:11:40.750 --> 00:11:41.389
<v Speaker 0>Yeah.

00:11:42.350 --> 00:11:44.110
<v Speaker 0>Else have we got? So we have a

00:11:44.110 --> 00:11:45.310
<v Speaker 0>comment from

00:11:45.630 --> 00:11:46.269
<v Speaker 0>Mackey's.

00:11:46.524 --> 00:11:48.365
<v Speaker 0>You're brand new to this project. You're calling

00:11:48.365 --> 00:11:49.485
<v Speaker 0>the repo. How would I make sure my

00:11:49.485 --> 00:11:51.885
<v Speaker 0>note requirements were installed? Oh, we just answered

00:11:51.885 --> 00:11:54.205
<v Speaker 0>that by absolute sure luck. So yep. We

00:11:54.205 --> 00:11:55.885
<v Speaker 0>are using a meet target as part of

00:11:55.885 --> 00:11:57.485
<v Speaker 0>the node entry point there.

00:11:57.885 --> 00:12:00.125
<v Speaker 0>And We're just tackling that problem.

00:12:00.819 --> 00:12:03.220
<v Speaker 0>Good. So, yeah, keep those comments coming.

00:12:03.779 --> 00:12:04.420
<v Speaker 0>And

00:12:06.180 --> 00:12:07.540
<v Speaker 0>look at that.

00:12:08.019 --> 00:12:08.660
<v Speaker 2>Easy.

00:12:09.060 --> 00:12:10.420
<v Speaker 0>Easy. Alright.

00:12:11.779 --> 00:12:14.579
<v Speaker 0>So as pre populated the username and password,

00:12:14.579 --> 00:12:15.779
<v Speaker 0>which I'm gonna assume work.

00:12:17.645 --> 00:12:19.965
<v Speaker 0>Good. It's leading us on nicely to something

00:12:19.965 --> 00:12:21.245
<v Speaker 0>we haven't covered yet.

00:12:21.485 --> 00:12:23.085
<v Speaker 2>We got to run the migrations.

00:12:23.565 --> 00:12:25.405
<v Speaker 0>And we got to do the migrations.

00:12:25.805 --> 00:12:27.165
<v Speaker 1>How did you manage to log in last

00:12:27.165 --> 00:12:28.685
<v Speaker 1>time then? Had you run them manually in

00:12:28.685 --> 00:12:29.085
<v Speaker 1>DHL?

00:12:30.600 --> 00:12:33.080
<v Speaker 0>Yes. That we yeah.

00:12:33.320 --> 00:12:34.520
<v Speaker 1>Because that's I might have been episode one.

00:12:34.520 --> 00:12:35.960
<v Speaker 1>I should just check it all works.

00:12:36.600 --> 00:12:38.680
<v Speaker 0>Okay. So we're we're in pretty good shape

00:12:38.680 --> 00:12:41.080
<v Speaker 0>then. I'm happy with that. Mhmm. Because that

00:12:41.080 --> 00:12:43.015
<v Speaker 0>was a relatively easy fix. We got our

00:12:43.015 --> 00:12:45.095
<v Speaker 0>make fail. We added a target. We got

00:12:45.095 --> 00:12:45.975
<v Speaker 0>ours in.

00:12:46.535 --> 00:12:49.335
<v Speaker 0>Now we wanna handle common development tasks,

00:12:49.335 --> 00:12:50.935
<v Speaker 0>which is where our d shell environment comes

00:12:50.935 --> 00:12:52.135
<v Speaker 0>in. This here

00:12:53.415 --> 00:12:55.655
<v Speaker 0>is where we run all of the commands

00:12:55.655 --> 00:12:57.015
<v Speaker 0>that we would normally do if we were

00:12:57.015 --> 00:12:59.149
<v Speaker 0>building natively on the host. And in fact,

00:12:59.149 --> 00:13:01.709
<v Speaker 0>the setup that we have here works regardless

00:13:01.709 --> 00:13:03.069
<v Speaker 0>of a d shell. Right? If you can

00:13:03.069 --> 00:13:04.589
<v Speaker 0>use all of these make targets without ever

00:13:04.589 --> 00:13:06.509
<v Speaker 0>using the Docker setup. It's just there as

00:13:06.509 --> 00:13:07.470
<v Speaker 0>convenience

00:13:07.790 --> 00:13:08.589
<v Speaker 0>and

00:13:08.829 --> 00:13:10.430
<v Speaker 0>and for the parity thing, which I think

00:13:10.430 --> 00:13:11.949
<v Speaker 0>I rambled on a lot about the first

00:13:11.949 --> 00:13:13.069
<v Speaker 0>episode. So

00:13:16.285 --> 00:13:19.405
<v Speaker 0>I would suggest if we if okay. So

00:13:19.964 --> 00:13:23.005
<v Speaker 0>resident Laravel expert, that's his where you shine.

00:13:24.285 --> 00:13:25.725
<v Speaker 0>If I were if you were building a

00:13:25.725 --> 00:13:27.085
<v Speaker 0>Laravel application locally,

00:13:27.550 --> 00:13:30.190
<v Speaker 0>what would be your workflow for running the

00:13:30.190 --> 00:13:31.870
<v Speaker 0>migrations here? You

00:13:32.190 --> 00:13:34.110
<v Speaker 1>just run PHP arts and migrate.

00:13:34.670 --> 00:13:36.830
<v Speaker 2>Does that set up the table scheme as

00:13:36.830 --> 00:13:37.310
<v Speaker 2>well?

00:13:37.870 --> 00:13:39.150
<v Speaker 1>Yes. So the migrations

00:13:39.470 --> 00:13:41.710
<v Speaker 1>you have a database folder in the

00:13:42.755 --> 00:13:44.115
<v Speaker 1>I think the root folder

00:13:44.675 --> 00:13:48.115
<v Speaker 1>that will contain all of the migrations with,

00:13:48.115 --> 00:13:49.555
<v Speaker 1>a date prefix. It just runs on list

00:13:49.555 --> 00:13:51.955
<v Speaker 1>top down. In the database itself, there's a

00:13:51.955 --> 00:13:53.955
<v Speaker 1>migrations table that keeps track of

00:13:54.195 --> 00:13:57.310
<v Speaker 1>what migrations were run, rent, when, and handles

00:13:57.310 --> 00:13:58.190
<v Speaker 1>it all for you.

00:13:58.510 --> 00:14:01.310
<v Speaker 2>In in Laravel, creating a table is normally

00:14:01.310 --> 00:14:03.389
<v Speaker 2>a a mig it's always a migration. There

00:14:03.389 --> 00:14:05.709
<v Speaker 2>isn't a separate sort of create schema and

00:14:05.709 --> 00:14:05.870
<v Speaker 2>then

00:14:06.829 --> 00:14:08.190
<v Speaker 1>Not typically.

00:14:08.190 --> 00:14:11.225
<v Speaker 1>Although, you can make use of Doctrine's ORM,

00:14:11.225 --> 00:14:13.225
<v Speaker 1>which I believe is then driven based on

00:14:13.225 --> 00:14:15.225
<v Speaker 1>models or some I've never done that, but

00:14:15.225 --> 00:14:17.065
<v Speaker 1>you can make use of that with extra

00:14:17.065 --> 00:14:17.785
<v Speaker 1>packages.

00:14:18.904 --> 00:14:21.464
<v Speaker 0>Okay. So you're saying the workflow would just

00:14:21.464 --> 00:14:23.305
<v Speaker 0>be our design migrate?

00:14:24.230 --> 00:14:25.350
<v Speaker 1>Space migrate.

00:14:26.870 --> 00:14:29.430
<v Speaker 2>I'm assuming that creates the migration. Artisan

00:14:29.430 --> 00:14:30.630
<v Speaker 1>is about wrong as well.

00:14:34.070 --> 00:14:35.750
<v Speaker 0>Artisan

00:14:36.149 --> 00:14:36.870
<v Speaker 0>migrate.

00:14:37.110 --> 00:14:37.510
<v Speaker 1>Mhmm.

00:14:38.675 --> 00:14:41.074
<v Speaker 1>And now that's all your migrations done. You

00:14:41.074 --> 00:14:43.394
<v Speaker 1>should now be that's that's also in the

00:14:43.555 --> 00:14:45.154
<v Speaker 1>so you can run that again all the

00:14:45.154 --> 00:14:46.915
<v Speaker 1>time. And would there be CTA that I

00:14:46.915 --> 00:14:47.795
<v Speaker 0>need to load?

00:14:48.194 --> 00:14:50.115
<v Speaker 1>There can be. I assume this project probably

00:14:50.115 --> 00:14:52.050
<v Speaker 1>does. On the end of migrate, you can

00:14:52.050 --> 00:14:53.490
<v Speaker 1>do double dash seed.

00:14:53.570 --> 00:14:55.089
<v Speaker 1>I would do that locally, but never in

00:14:55.089 --> 00:14:56.529
<v Speaker 1>production. Or

00:14:57.329 --> 00:14:59.250
<v Speaker 1>you can do d b colon seed, which

00:14:59.250 --> 00:15:00.690
<v Speaker 1>is a separate command which does the same

00:15:00.690 --> 00:15:00.769
<v Speaker 1>thing.

00:15:02.745 --> 00:15:04.904
<v Speaker 2>So do we want that do you want

00:15:04.904 --> 00:15:07.065
<v Speaker 2>the migrations to run automatically when we enter

00:15:07.065 --> 00:15:07.945
<v Speaker 2>the d shell

00:15:08.825 --> 00:15:10.105
<v Speaker 2>or when we start the project?

00:15:15.400 --> 00:15:17.080
<v Speaker 0>I mean, it definitely could be we could

00:15:17.080 --> 00:15:18.680
<v Speaker 0>have some sort of make target called make

00:15:18.680 --> 00:15:21.640
<v Speaker 0>and it the handle then any bootstrapping commands.

00:15:21.640 --> 00:15:23.640
<v Speaker 0>And then, you know, again, we wanna replicate

00:15:23.640 --> 00:15:26.360
<v Speaker 0>native local development. I don't well, I I

00:15:26.360 --> 00:15:27.960
<v Speaker 0>have a lot of me every native command

00:15:27.960 --> 00:15:29.160
<v Speaker 0>I can with a make target.

00:15:30.315 --> 00:15:31.915
<v Speaker 0>This is just what people are used to

00:15:31.915 --> 00:15:34.635
<v Speaker 0>doing. I don't wanna remove that muscle memory,

00:15:34.635 --> 00:15:36.235
<v Speaker 0>that habit, all that stuff that they normally

00:15:36.235 --> 00:15:38.395
<v Speaker 0>do. Again, this is a I want them

00:15:38.395 --> 00:15:39.995
<v Speaker 0>to feel like this is just a local

00:15:39.995 --> 00:15:42.075
<v Speaker 0>machine only happens to be in a container.

00:15:42.155 --> 00:15:43.355
<v Speaker 0>Yeah. That's my goal here.

00:15:44.960 --> 00:15:46.800
<v Speaker 1>One one thing to note on that.

00:15:47.200 --> 00:15:49.280
<v Speaker 1>Quite often when I do development, I have

00:15:49.280 --> 00:15:52.240
<v Speaker 1>probably 10 tabs open. Oh, well, not necessarily

00:15:52.240 --> 00:15:53.840
<v Speaker 1>10, but a lot of tabs open of,

00:15:53.840 --> 00:15:56.240
<v Speaker 1>like, the same folder. What we'll have migrations

00:15:56.240 --> 00:15:57.760
<v Speaker 1>won't be tailing logs, all that sort of

00:15:57.760 --> 00:16:00.795
<v Speaker 1>stuff. If you just go into the d

00:16:00.795 --> 00:16:02.555
<v Speaker 1>shell, is that the same instance or are

00:16:02.555 --> 00:16:04.155
<v Speaker 1>they new instances each time you go into

00:16:04.155 --> 00:16:06.155
<v Speaker 1>it? You get a a new container every

00:16:06.155 --> 00:16:06.955
<v Speaker 0>single time.

00:16:07.515 --> 00:16:08.955
<v Speaker 0>But this it's gonna be pretty lightweight. I

00:16:08.955 --> 00:16:11.195
<v Speaker 0>would I I personally wouldn't be concerned about

00:16:11.195 --> 00:16:13.760
<v Speaker 0>that. But if we did think it was

00:16:13.760 --> 00:16:16.000
<v Speaker 0>gonna be a hassle, we could add a

00:16:16.399 --> 00:16:18.560
<v Speaker 0>t shell enter target which allowed you to

00:16:18.560 --> 00:16:20.639
<v Speaker 0>pop open more than one. You get, like,

00:16:20.639 --> 00:16:22.160
<v Speaker 0>a sudo t two I inside the same

00:16:22.160 --> 00:16:23.680
<v Speaker 0>container on a on a loop.

00:16:24.399 --> 00:16:27.235
<v Speaker 2>Yeah. The the overhead really of having loads

00:16:27.235 --> 00:16:29.795
<v Speaker 2>of containers running, especially on Linux, should be

00:16:29.795 --> 00:16:31.635
<v Speaker 2>the same as having loads of tabs open

00:16:32.915 --> 00:16:35.875
<v Speaker 0>Pretty close. Yeah. Yep. This is right. Because

00:16:35.875 --> 00:16:39.154
<v Speaker 0>there's no I think what's really important I

00:16:38.210 --> 00:16:40.050
<v Speaker 0>think Kieran's just kind of alluded to anyway,

00:16:40.050 --> 00:16:41.170
<v Speaker 0>but I'll I'll make it a little bit

00:16:41.170 --> 00:16:43.010
<v Speaker 0>more explicit. Is the opening a container without

00:16:43.010 --> 00:16:44.290
<v Speaker 0>a process running in it

00:16:45.010 --> 00:16:46.690
<v Speaker 0>doesn't have any overhead.

00:16:47.010 --> 00:16:48.690
<v Speaker 0>It's when I run the process, so that

00:16:48.690 --> 00:16:51.010
<v Speaker 0>process runs within the namespaces that we configure

00:16:51.010 --> 00:16:51.810
<v Speaker 0>in the host. So,

00:16:52.775 --> 00:16:54.855
<v Speaker 0>yeah, open it up. You're right. Running running

00:16:54.855 --> 00:16:56.855
<v Speaker 0>these containers is no different from really opening

00:16:56.855 --> 00:16:58.615
<v Speaker 0>up a new shell process on your your

00:16:58.615 --> 00:17:01.495
<v Speaker 0>local machine. Yeah. Because they enter your cache.

00:17:03.095 --> 00:17:05.015
<v Speaker 2>Although, might be an overhead on non Linux

00:17:05.015 --> 00:17:05.494
<v Speaker 2>platforms.

00:17:07.609 --> 00:17:09.369
<v Speaker 0>Normally, would say I don't support those, but

00:17:09.369 --> 00:17:11.049
<v Speaker 0>I know I found myself confined to a

00:17:11.049 --> 00:17:13.049
<v Speaker 0>Mac. So I'm having to support this use

00:17:13.049 --> 00:17:14.890
<v Speaker 0>case, but we'll see. We'll see how it

00:17:14.890 --> 00:17:16.490
<v Speaker 0>goes. But but let me show that working

00:17:16.490 --> 00:17:18.329
<v Speaker 0>then. Right? So if I just jump down

00:17:18.329 --> 00:17:20.089
<v Speaker 0>here and split this. Oh, how do I

00:17:20.089 --> 00:17:20.809
<v Speaker 0>do the other split?

00:17:21.825 --> 00:17:24.065
<v Speaker 0>I see. Okay. Because it is mixed up.

00:17:24.625 --> 00:17:25.904
<v Speaker 0>Make the shell.

00:17:28.065 --> 00:17:30.384
<v Speaker 0>Just ensure no dependencies are running.

00:17:30.945 --> 00:17:32.544
<v Speaker 0>Have I oh, there's no p s command

00:17:32.544 --> 00:17:34.465
<v Speaker 0>here. I'm gonna show you that there's nothing

00:17:34.465 --> 00:17:35.184
<v Speaker 0>else running.

00:17:38.720 --> 00:17:39.440
<v Speaker 0>Sure.

00:17:40.080 --> 00:17:42.239
<v Speaker 0>It's gonna be the same regardless, but

00:17:42.720 --> 00:17:44.639
<v Speaker 0>this is you just need to trust me.

00:17:44.639 --> 00:17:46.320
<v Speaker 0>This is this container. In fact, the IDs

00:17:46.320 --> 00:17:47.519
<v Speaker 0>are different. There we go.

00:17:48.159 --> 00:17:48.960
<v Speaker 0>EFB.

00:17:48.960 --> 00:17:50.240
<v Speaker 0>So these are different containers,

00:17:50.985 --> 00:17:52.345
<v Speaker 0>But I can still open as many as

00:17:52.345 --> 00:17:53.784
<v Speaker 0>I might want. It's pretty lightweight.

00:17:55.385 --> 00:17:57.225
<v Speaker 0>The seats the seats worked.

00:17:58.505 --> 00:18:00.264
<v Speaker 0>I have a login.

00:18:00.425 --> 00:18:02.825
<v Speaker 0>I've now got some sort of a way

00:18:02.825 --> 00:18:04.905
<v Speaker 0>to view the $500 page, the photo for

00:18:04.905 --> 00:18:05.705
<v Speaker 0>error page.

00:18:06.390 --> 00:18:09.350
<v Speaker 0>I've got my menus. This application well, besides

00:18:09.590 --> 00:18:11.670
<v Speaker 0>is that You left with the CSS, didn't

00:18:11.670 --> 00:18:13.510
<v Speaker 1>you, to test and watch?

00:18:13.830 --> 00:18:15.430
<v Speaker 2>What do you mean by If you're to

00:18:15.430 --> 00:18:16.870
<v Speaker 1>change back the default

00:18:17.350 --> 00:18:19.590
<v Speaker 1>tailwind config, you'd be able to see stuff,

00:18:19.590 --> 00:18:23.735
<v Speaker 1>I guess. Alright. Let's see. Get this.

00:18:24.535 --> 00:18:26.135
<v Speaker 0>At least I get status.

00:18:28.135 --> 00:18:30.135
<v Speaker 0>I don't see that. Oh, because I've pushed

00:18:30.135 --> 00:18:31.735
<v Speaker 0>it since so the code was available for

00:18:31.735 --> 00:18:32.055
<v Speaker 0>everyone.

00:18:33.179 --> 00:18:36.459
<v Speaker 0>Alright. Let's see. Where is the CSS again?

00:18:36.460 --> 00:18:39.419
<v Speaker 1>It is This is tailwind config file. Oh,

00:18:39.419 --> 00:18:41.259
<v Speaker 0>tailwind config. Nice.

00:18:43.419 --> 00:18:45.260
<v Speaker 0>Oh, yeah. Yeah. Those templates.

00:18:46.725 --> 00:18:48.005
<v Speaker 1>I can get the defaults if you want

00:18:48.005 --> 00:18:49.445
<v Speaker 1>and I can just replace them. So if

00:18:49.445 --> 00:18:50.725
<v Speaker 1>you need to rewrite those.

00:18:52.645 --> 00:18:54.405
<v Speaker 0>I was hoping it would give him a

00:18:54.405 --> 00:18:56.885
<v Speaker 0>hover with the diff, which normally quite nicely

00:18:56.885 --> 00:18:59.045
<v Speaker 0>does for me, but not today.

00:19:00.990 --> 00:19:02.590
<v Speaker 0>Yeah. I'll let you drop in some value.

00:19:02.590 --> 00:19:03.870
<v Speaker 0>I otherwise, I would have made them all

00:19:03.870 --> 00:19:06.110
<v Speaker 0>white or black or red or whatever just

00:19:06.110 --> 00:19:07.870
<v Speaker 0>to fix the menu.

00:19:09.870 --> 00:19:12.270
<v Speaker 0>So we just have one other problem last

00:19:12.270 --> 00:19:14.535
<v Speaker 0>time as well. Right? And the challenge was

00:19:14.535 --> 00:19:16.455
<v Speaker 0>I modified the view fail. This is why

00:19:16.455 --> 00:19:18.934
<v Speaker 0>I changed the tailwind fail. Right? Because we

00:19:18.934 --> 00:19:21.735
<v Speaker 0>modified the view thing, reloaded the page,

00:19:21.975 --> 00:19:24.374
<v Speaker 0>and I never actually seen the update.

00:19:25.335 --> 00:19:28.020
<v Speaker 0>But to confirm that it was the live

00:19:28.020 --> 00:19:30.180
<v Speaker 0>reloading was working, I modified the tail when

00:19:30.180 --> 00:19:31.059
<v Speaker 0>the configuration.

00:19:32.020 --> 00:19:32.900
<v Speaker 0>So I guess we should

00:19:33.940 --> 00:19:35.940
<v Speaker 0>once we revert these values back to the

00:19:35.940 --> 00:19:38.340
<v Speaker 0>proper colors, which Alex is doing right now,

00:19:38.340 --> 00:19:38.820
<v Speaker 0>perfect.

00:19:40.265 --> 00:19:42.505
<v Speaker 0>We should make another change to the view

00:19:42.505 --> 00:19:46.345
<v Speaker 0>and see if our new node runner has

00:19:46.345 --> 00:19:47.864
<v Speaker 0>fixed that configuration.

00:19:49.945 --> 00:19:52.720
<v Speaker 0>There. That's better. Yeah. So you were trying

00:19:52.720 --> 00:19:53.599
<v Speaker 2>to check that

00:19:54.159 --> 00:19:55.440
<v Speaker 2>text dashboard

00:19:56.159 --> 00:19:57.919
<v Speaker 2>dashboard file right now.

00:19:58.240 --> 00:20:01.519
<v Speaker 0>Yeah. So where was that? Was that

00:20:02.240 --> 00:20:03.519
<v Speaker 0>let's

00:20:03.519 --> 00:20:04.559
<v Speaker 0>go to

00:20:04.960 --> 00:20:05.600
<v Speaker 0>app.

00:20:06.685 --> 00:20:07.405
<v Speaker 0>Nope.

00:20:07.885 --> 00:20:09.165
<v Speaker 1>Was in resources.

00:20:09.725 --> 00:20:10.605
<v Speaker 0>Resources,

00:20:11.245 --> 00:20:12.125
<v Speaker 0>JavaScript,

00:20:12.205 --> 00:20:13.005
<v Speaker 0>pages,

00:20:14.285 --> 00:20:15.085
<v Speaker 0>dashboard.

00:20:15.165 --> 00:20:16.684
<v Speaker 0>Dashboard. Index. Yeah.

00:20:17.645 --> 00:20:19.405
<v Speaker 0>Alright. Okay. So my five is here.

00:20:21.800 --> 00:20:23.480
<v Speaker 0>I changed that in more yeah. Then the

00:20:23.480 --> 00:20:24.280
<v Speaker 0>bottom too.

00:20:25.000 --> 00:20:26.440
<v Speaker 0>And do we have the five? Yeah. We

00:20:26.440 --> 00:20:28.360
<v Speaker 0>do have the five there. So in theory,

00:20:28.360 --> 00:20:28.919
<v Speaker 0>I've

00:20:29.560 --> 00:20:30.440
<v Speaker 0>I should

00:20:33.065 --> 00:20:34.184
<v Speaker 0>It just works.

00:20:34.425 --> 00:20:35.065
<v Speaker 1>Yep.

00:20:35.865 --> 00:20:37.225
<v Speaker 0>Well, how this is gonna be the first

00:20:37.225 --> 00:20:40.024
<v Speaker 0>episode where everything just goes plain sailing.

00:20:40.105 --> 00:20:41.945
<v Speaker 0>Now that I've said that, it probably just

00:20:41.945 --> 00:20:43.384
<v Speaker 0>jinxed everything. But

00:20:44.184 --> 00:20:45.384
<v Speaker 2>With the question

00:20:46.105 --> 00:20:48.570
<v Speaker 2>about the migrations, Alex. Do people sort of

00:20:48.570 --> 00:20:50.729
<v Speaker 2>roll up the migrations on a big project?

00:20:51.770 --> 00:20:54.809
<v Speaker 1>So something came out new in Laravel eight,

00:20:54.809 --> 00:20:57.450
<v Speaker 1>which was released about a month ago Mhmm.

00:20:57.770 --> 00:20:59.609
<v Speaker 1>Which is where you can

00:21:00.169 --> 00:21:01.289
<v Speaker 1>combine previous

00:21:01.370 --> 00:21:04.705
<v Speaker 1>migrations into a schema file, and it will

00:21:04.705 --> 00:21:06.945
<v Speaker 1>handle all that stuff for you now. That

00:21:07.024 --> 00:21:08.705
<v Speaker 1>but that is a a recent feature. It's

00:21:08.705 --> 00:21:10.304
<v Speaker 1>not something that's been around for long.

00:21:11.024 --> 00:21:13.105
<v Speaker 2>Because I know those I know that MariaDB

00:21:13.105 --> 00:21:14.464
<v Speaker 2>container has a

00:21:15.105 --> 00:21:17.230
<v Speaker 2>feature where you can pass it a special

00:21:17.230 --> 00:21:19.390
<v Speaker 2>file location that will run dot SQL files

00:21:19.390 --> 00:21:20.350
<v Speaker 2>in that location.

00:21:20.990 --> 00:21:22.350
<v Speaker 1>Okay. Well, I

00:21:22.830 --> 00:21:24.669
<v Speaker 1>think you still need to make use of

00:21:24.669 --> 00:21:27.710
<v Speaker 1>the arson migrate command. It sort of like

00:21:27.630 --> 00:21:30.030
<v Speaker 1>it figures this out how to run that

00:21:30.030 --> 00:21:31.950
<v Speaker 1>alongside your current migrations and stuff.

00:21:32.270 --> 00:21:33.524
<v Speaker 1>I'm not sure whether it does anything clever

00:21:33.524 --> 00:21:35.284
<v Speaker 1>other than just, like, run that file first

00:21:35.284 --> 00:21:38.245
<v Speaker 1>and migrate afterwards. I don't know. What what

00:21:38.245 --> 00:21:39.445
<v Speaker 2>you can do I I don't I haven't

00:21:39.445 --> 00:21:40.725
<v Speaker 2>done it with Laravel, but you can sort

00:21:40.725 --> 00:21:42.725
<v Speaker 2>of dump your entire database into a dot

00:21:42.725 --> 00:21:43.365
<v Speaker 2>SQL file.

00:21:45.210 --> 00:21:47.289
<v Speaker 2>Run that, and that would include the migrations

00:21:47.289 --> 00:21:49.450
<v Speaker 2>table. So then Ah. And when you run

00:21:49.450 --> 00:21:51.850
<v Speaker 2>the does prefer. It's all the ones that

00:21:51.850 --> 00:21:54.250
<v Speaker 2>it's it's kind of done already that that

00:21:54.250 --> 00:21:55.369
<v Speaker 2>snapshot has.

00:21:56.409 --> 00:21:57.850
<v Speaker 1>I'm not sure because I don't think it

00:21:57.850 --> 00:22:00.685
<v Speaker 1>takes all of your data unless your migrations

00:22:00.685 --> 00:22:02.925
<v Speaker 1>themselves put data in. I'm not sure on

00:22:02.925 --> 00:22:04.445
<v Speaker 1>that, but I think it's

00:22:04.845 --> 00:22:06.605
<v Speaker 1>to some extent intelligent.

00:22:06.605 --> 00:22:07.405
<v Speaker 1>I'm not sure.

00:22:08.765 --> 00:22:11.165
<v Speaker 0>Right. Okay. We have a a question then.

00:22:11.165 --> 00:22:14.765
<v Speaker 0>So Robert is saying, does hot module reload

00:22:14.765 --> 00:22:16.270
<v Speaker 0>work or is this not part of the

00:22:16.270 --> 00:22:18.030
<v Speaker 0>Laravel basic package? So

00:22:18.750 --> 00:22:20.430
<v Speaker 0>I'm not really sure what the hot module

00:22:20.430 --> 00:22:21.150
<v Speaker 0>reload

00:22:21.710 --> 00:22:23.230
<v Speaker 0>we're talking about here. Is that something you're

00:22:23.230 --> 00:22:26.030
<v Speaker 0>familiar with, Alex? Yeah. So when you're making

00:22:26.030 --> 00:22:26.750
<v Speaker 1>changes

00:22:27.390 --> 00:22:30.805
<v Speaker 1>in JavaScript or CSS or whatever, if you're

00:22:30.805 --> 00:22:33.765
<v Speaker 1>changing, for example, a value and it requires

00:22:33.765 --> 00:22:35.765
<v Speaker 1>you to reload a page, that's not necessarily

00:22:35.765 --> 00:22:37.685
<v Speaker 1>ideal depending on the type of application you're

00:22:37.685 --> 00:22:39.765
<v Speaker 1>dealing with and where what is you're doing.

00:22:39.765 --> 00:22:41.685
<v Speaker 1>If it takes, like, 12, like, 12 pages

00:22:41.685 --> 00:22:43.205
<v Speaker 1>to get to the same point of, like,

00:22:43.205 --> 00:22:44.645
<v Speaker 1>filling in out a form or something, it's,

00:22:44.645 --> 00:22:46.030
<v Speaker 1>like, a single page application. You don't have

00:22:46.030 --> 00:22:46.750
<v Speaker 1>to do that.

00:22:47.150 --> 00:22:49.550
<v Speaker 1>So hot module reloading reloads just that one

00:22:49.550 --> 00:22:51.470
<v Speaker 1>section of CSS or that one section of

00:22:51.470 --> 00:22:52.830
<v Speaker 1>JavaScript or whatever.

00:22:53.150 --> 00:22:55.070
<v Speaker 1>Reloads the page, like, behind the scenes, fetching

00:22:55.070 --> 00:22:56.590
<v Speaker 1>in the new values so it's updated

00:22:57.070 --> 00:22:59.790
<v Speaker 1>without you having to, like, refresh the page.

00:23:00.685 --> 00:23:02.445
<v Speaker 0>Okay. So that change I made there should

00:23:02.445 --> 00:23:04.845
<v Speaker 0>have automatically just showing up. Yeah. That would

00:23:04.845 --> 00:23:06.045
<v Speaker 1>have just when you by time you got

00:23:06.045 --> 00:23:07.245
<v Speaker 1>back, it would have just, like, been there

00:23:07.245 --> 00:23:08.845
<v Speaker 1>as if you'd done a reload, but you

00:23:08.845 --> 00:23:09.485
<v Speaker 1>hadn't.

00:23:09.885 --> 00:23:12.605
<v Speaker 0>Okay. So that automatic I'm assuming that the

00:23:12.605 --> 00:23:14.765
<v Speaker 0>way that we work with NPM

00:23:14.765 --> 00:23:15.805
<v Speaker 0>run watch

00:23:16.020 --> 00:23:17.220
<v Speaker 0>is handling that?

00:23:17.460 --> 00:23:19.299
<v Speaker 1>I believe that Laravel Mix

00:23:19.460 --> 00:23:22.420
<v Speaker 1>has a different mode. Not because it has

00:23:22.500 --> 00:23:24.100
<v Speaker 1>it requires like a separate server running in

00:23:24.100 --> 00:23:27.220
<v Speaker 1>the background Yeah. To handle the reloads.

00:23:27.780 --> 00:23:29.540
<v Speaker 1>So this could this could get interesting, actually.

00:23:31.225 --> 00:23:34.504
<v Speaker 2>Similar, doesn't it? You have some extra JavaScript

00:23:34.504 --> 00:23:36.585
<v Speaker 2>gets injected into the page for the Yeah.

00:23:36.664 --> 00:23:37.704
<v Speaker 2>To get then

00:23:37.945 --> 00:23:40.345
<v Speaker 2>polls the back end server for updates. Yeah.

00:23:40.345 --> 00:23:42.264
<v Speaker 1>So if you do you do

00:23:43.705 --> 00:23:45.945
<v Speaker 0>MPM run hot. Yeah. MPM run hot.

00:23:48.290 --> 00:23:50.850
<v Speaker 0>Alright. Okay. So I there are some things

00:23:50.850 --> 00:23:53.330
<v Speaker 0>required here. We'll see if we need to

00:23:53.330 --> 00:23:54.610
<v Speaker 0>tweak the host in the port to work

00:23:54.610 --> 00:23:56.770
<v Speaker 0>in the Docker setup, but let's get the

00:23:56.770 --> 00:23:59.730
<v Speaker 0>run hot. Now does the run hot work

00:23:59.985 --> 00:24:02.945
<v Speaker 0>alongside run watch or does it replace

00:24:03.105 --> 00:24:05.664
<v Speaker 0>run watch? Instead of okay.

00:24:05.905 --> 00:24:08.145
<v Speaker 0>Might be Right. Let's

00:24:08.145 --> 00:24:09.745
<v Speaker 0>see if we get this working then. So

00:24:09.745 --> 00:24:12.305
<v Speaker 0>that means I wanna change or make target.

00:24:15.280 --> 00:24:17.519
<v Speaker 0>It should be the simple

00:24:18.320 --> 00:24:18.799
<v Speaker 0>alright.

00:24:22.240 --> 00:24:22.880
<v Speaker 0>So

00:24:23.120 --> 00:24:24.960
<v Speaker 0>we'll drop out this. We don't need to

00:24:24.960 --> 00:24:26.639
<v Speaker 0>log anymore. We know that works.

00:24:27.760 --> 00:24:29.280
<v Speaker 0>Pop open our detail again.

00:24:30.715 --> 00:24:32.634
<v Speaker 0>And then I look cute oh,

00:24:33.754 --> 00:24:35.835
<v Speaker 0>I've got key. See, I'm I'm still getting

00:24:35.835 --> 00:24:37.595
<v Speaker 0>this whole command and alt being in the

00:24:37.595 --> 00:24:40.394
<v Speaker 0>wrong way problem. But, I mean, that's okay.

00:24:40.394 --> 00:24:40.794
<v Speaker 0>So

00:24:42.710 --> 00:24:44.870
<v Speaker 0>this is our hot version of JavaScript running.

00:24:44.870 --> 00:24:46.630
<v Speaker 0>I'm assuming if I change a fail, I'll

00:24:46.630 --> 00:24:47.830
<v Speaker 0>see something here.

00:24:48.550 --> 00:24:51.110
<v Speaker 0>I'm also gonna pop this open. I'll get

00:24:51.110 --> 00:24:53.190
<v Speaker 0>my two back. So let's refresh that.

00:24:53.830 --> 00:24:55.270
<v Speaker 0>And let's try

00:24:55.750 --> 00:24:58.365
<v Speaker 2>And that probably loaded extra JavaScript in the

00:24:58.365 --> 00:25:00.044
<v Speaker 2>page. So it's good to have refreshed there.

00:25:00.044 --> 00:25:02.124
<v Speaker 0>I'll do a hard refresh just in case.

00:25:02.365 --> 00:25:03.085
<v Speaker 0>Right.

00:25:04.365 --> 00:25:06.365
<v Speaker 0>So now let's change that dashboard file again.

00:25:09.560 --> 00:25:10.600
<v Speaker 0>21.

00:25:10.680 --> 00:25:11.559
<v Speaker 0>Why not?

00:25:13.000 --> 00:25:14.120
<v Speaker 2>I'm not sure which one of these are

00:25:14.120 --> 00:25:15.159
<v Speaker 2>meant to be changing.

00:25:16.520 --> 00:25:17.880
<v Speaker 0>I didn't see anything particularly

00:25:18.280 --> 00:25:20.120
<v Speaker 2>Oh, the metal is the title tags, the

00:25:20.120 --> 00:25:21.800
<v Speaker 2>ones that the the guy says in the

00:25:21.800 --> 00:25:23.335
<v Speaker 2>comments. Alright.

00:25:24.695 --> 00:25:27.335
<v Speaker 0>I I I didn't see anything happen here,

00:25:28.135 --> 00:25:29.414
<v Speaker 0>but let's just

00:25:30.695 --> 00:25:32.455
<v Speaker 0>and that's what that's still visible.

00:25:35.240 --> 00:25:37.720
<v Speaker 0>But it's okay. So that the JavaScript bit

00:25:37.720 --> 00:25:38.839
<v Speaker 0>is definitely

00:25:39.480 --> 00:25:41.159
<v Speaker 0>getting a change, but we're getting a problem

00:25:41.159 --> 00:25:41.799
<v Speaker 0>here.

00:25:43.000 --> 00:25:45.240
<v Speaker 0>So it looks like we are gonna be

00:25:45.240 --> 00:25:47.480
<v Speaker 0>diving into this configuration.

00:25:48.025 --> 00:25:49.385
<v Speaker 2>A quick look in dev tools to see

00:25:49.385 --> 00:25:50.825
<v Speaker 2>what connections it's making.

00:25:51.145 --> 00:25:52.264
<v Speaker 0>That's a good idea.

00:25:54.585 --> 00:25:55.785
<v Speaker 2>See if it's getting a four zero four

00:25:55.785 --> 00:25:56.585
<v Speaker 2>to somewhere.

00:25:57.465 --> 00:26:00.265
<v Speaker 0>Let's try. Yep. Let's go for the network

00:26:00.265 --> 00:26:00.585
<v Speaker 0>one.

00:26:01.840 --> 00:26:04.000
<v Speaker 0>See if we got a WebSocket or something.

00:26:06.640 --> 00:26:07.920
<v Speaker 0>WebSocket.

00:26:12.160 --> 00:26:13.840
<v Speaker 0>Yeah. I don't see anything

00:26:14.625 --> 00:26:15.745
<v Speaker 0>obvious here.

00:26:17.025 --> 00:26:19.345
<v Speaker 0>Do we have any console letters? No.

00:26:23.025 --> 00:26:24.145
<v Speaker 2>This is the kind of problem where you

00:26:24.145 --> 00:26:25.985
<v Speaker 2>have to understand how it actually works

00:26:26.705 --> 00:26:28.465
<v Speaker 2>to to figure out what to fix.

00:26:30.389 --> 00:26:32.309
<v Speaker 2>So the hot the hot compiles a version

00:26:32.309 --> 00:26:35.029
<v Speaker 2>of the assets that we have served through

00:26:35.029 --> 00:26:37.589
<v Speaker 2>NGINX. Right? We're confident that's working.

00:26:38.630 --> 00:26:39.669
<v Speaker 2>It's the hot version.

00:26:41.345 --> 00:26:43.985
<v Speaker 1>Believe so. Otherwise, the compiled version the compiled

00:26:43.985 --> 00:26:45.505
<v Speaker 1>files, like well, you could test that by

00:26:45.505 --> 00:26:48.545
<v Speaker 1>removing the public folder, like CSS or something

00:26:48.545 --> 00:26:49.505
<v Speaker 1>like that and

00:26:49.745 --> 00:26:51.825
<v Speaker 1>run hard and just see if that continues

00:26:51.825 --> 00:26:52.865
<v Speaker 1>to work, I guess.

00:26:53.665 --> 00:26:54.945
<v Speaker 1>It should just

00:26:55.060 --> 00:26:56.100
<v Speaker 2>So that explains

00:26:56.340 --> 00:26:57.700
<v Speaker 1>why it should just work, though.

00:26:58.500 --> 00:26:59.540
<v Speaker 2>Yeah. But there's things like

00:27:01.620 --> 00:27:02.179
<v Speaker 2>on.

00:27:03.620 --> 00:27:05.220
<v Speaker 2>P r t answer. Have we meant to

00:27:05.220 --> 00:27:07.540
<v Speaker 2>be doing that? No. That's just instead of

00:27:07.540 --> 00:27:08.580
<v Speaker 1>doing

00:27:10.065 --> 00:27:10.865
<v Speaker 1>just like,

00:27:11.585 --> 00:27:13.505
<v Speaker 1>funding PHP and FPM and stuff. I'll send

00:27:13.505 --> 00:27:15.585
<v Speaker 1>serve just the same thing. But does it

00:27:15.585 --> 00:27:16.625
<v Speaker 2>do some,

00:27:17.345 --> 00:27:19.505
<v Speaker 2>like, stuff like Okay. So I think that

00:27:19.505 --> 00:27:22.225
<v Speaker 0>the challenge here is MPM run halt

00:27:22.625 --> 00:27:23.505
<v Speaker 0>opens a server.

00:27:26.190 --> 00:27:28.510
<v Speaker 0>So this actually runs something on port eighty

00:27:28.510 --> 00:27:30.510
<v Speaker 0>eighty for those connections.

00:27:30.510 --> 00:27:33.470
<v Speaker 2>Which we aren't exposing. Which we're not exposing.

00:27:34.430 --> 00:27:36.110
<v Speaker 0>So let's expose that

00:27:37.230 --> 00:27:39.390
<v Speaker 0>and see if that triggers something.

00:27:41.045 --> 00:27:42.565
<v Speaker 0>Although that port's the same as what we

00:27:42.565 --> 00:27:44.805
<v Speaker 0>are actually binding to us. So let's let's

00:27:44.805 --> 00:27:46.004
<v Speaker 0>change that first.

00:27:46.245 --> 00:27:49.445
<v Speaker 2>Do want any error messages like combine support?

00:27:50.485 --> 00:27:54.404
<v Speaker 0>Let's go with 8,000 here. We'll expose note

00:27:54.405 --> 00:27:55.205
<v Speaker 0>on

00:27:56.520 --> 00:28:00.040
<v Speaker 0>and also, I'm gonna assume that the assets

00:28:00.040 --> 00:28:03.000
<v Speaker 0>aren't compiled or transferred or whatever is happening

00:28:03.000 --> 00:28:05.080
<v Speaker 0>with the hot reload and it's maybe actually

00:28:05.080 --> 00:28:08.280
<v Speaker 0>serving them over that port that may trigger

00:28:08.280 --> 00:28:09.560
<v Speaker 0>injection of some code.

00:28:11.745 --> 00:28:13.185
<v Speaker 0>So we need to make sure we handle

00:28:13.185 --> 00:28:15.025
<v Speaker 0>that just in case.

00:28:15.425 --> 00:28:17.825
<v Speaker 0>Mhmm. Let's spin this all back up then.

00:28:19.105 --> 00:28:20.465
<v Speaker 0>But I'm just going

00:28:21.425 --> 00:28:23.265
<v Speaker 0>put it away. Spin it back up

00:28:23.745 --> 00:28:24.705
<v Speaker 0>by any chance.

00:28:32.279 --> 00:28:32.999
<v Speaker 0>Okay.

00:28:33.640 --> 00:28:34.679
<v Speaker 0>Now I'm gonna have to run these

00:28:35.880 --> 00:28:37.720
<v Speaker 0>MPM install is gonna take longer now. I

00:28:37.720 --> 00:28:38.679
<v Speaker 0>shouldn't have done the volumes.

00:28:41.014 --> 00:28:42.375
<v Speaker 2>If you if

00:28:42.375 --> 00:28:44.294
<v Speaker 2>you control c on

00:28:44.934 --> 00:28:47.815
<v Speaker 2>Docker Compose, is that the same as Docker

00:28:47.815 --> 00:28:48.774
<v Speaker 2>Compose one?

00:28:49.414 --> 00:28:51.255
<v Speaker 0>No. The actual c inside of a t

00:28:51.255 --> 00:28:53.014
<v Speaker 0>shell only shuts down that container.

00:28:54.630 --> 00:28:55.670
<v Speaker 2>No. Sorry. In the

00:28:59.350 --> 00:29:01.750
<v Speaker 2>when you run it, not in the background

00:29:01.750 --> 00:29:03.350
<v Speaker 2>without the dash d option.

00:29:03.670 --> 00:29:05.110
<v Speaker 2>If you can see, is that a stop

00:29:05.110 --> 00:29:05.670
<v Speaker 2>or a down?

00:29:06.405 --> 00:29:07.365
<v Speaker 0>A stop.

00:29:07.605 --> 00:29:08.325
<v Speaker 0>It

00:29:09.685 --> 00:29:11.445
<v Speaker 2>doesn't destroy everything as much.

00:29:13.525 --> 00:29:15.525
<v Speaker 0>Alright. So we just need to give

00:29:17.365 --> 00:29:19.685
<v Speaker 0>yeah. See, there's this WDS,

00:29:19.685 --> 00:29:21.445
<v Speaker 0>which I'm assuming is the

00:29:23.120 --> 00:29:23.919
<v Speaker 0>the

00:29:24.559 --> 00:29:26.400
<v Speaker 0>thing. So we're it it may be that

00:29:26.400 --> 00:29:29.039
<v Speaker 0>we actually need to remove NGINX if we

00:29:29.039 --> 00:29:31.359
<v Speaker 0>want the live reload to work.

00:29:32.559 --> 00:29:34.559
<v Speaker 1>Well, you can you can change the port

00:29:34.304 --> 00:29:36.864
<v Speaker 1>in the mix config if that's the issue.

00:29:37.184 --> 00:29:38.544
<v Speaker 0>No. So it's not the port. The problem

00:29:38.544 --> 00:29:39.824
<v Speaker 0>is is that our

00:29:41.264 --> 00:29:42.705
<v Speaker 0>as as we have it set up right

00:29:42.705 --> 00:29:45.904
<v Speaker 0>now, our NPM run hot is generating assets,

00:29:45.904 --> 00:29:47.904
<v Speaker 0>which will then be delivered over NGINX and

00:29:47.904 --> 00:29:49.184
<v Speaker 0>not via

00:29:49.590 --> 00:29:50.309
<v Speaker 0>this.

00:29:50.470 --> 00:29:51.750
<v Speaker 0>Although it could be that this is an

00:29:51.750 --> 00:29:52.950
<v Speaker 0>additional port.

00:29:54.549 --> 00:29:56.309
<v Speaker 0>So maybe that's webpack as an actual web

00:29:56.309 --> 00:29:58.470
<v Speaker 0>server server and assets, but it's just that

00:29:58.470 --> 00:30:00.630
<v Speaker 0>web socket connection. I'm not really sure. I

00:30:00.630 --> 00:30:02.710
<v Speaker 0>don't I think we're gonna have to kinda

00:30:02.710 --> 00:30:03.910
<v Speaker 0>poke it a little bit and see what

00:30:03.910 --> 00:30:05.894
<v Speaker 0>happens. Like, if I just browse to this,

00:30:05.894 --> 00:30:07.255
<v Speaker 0>what will I get? Do I get the

00:30:07.255 --> 00:30:08.934
<v Speaker 0>assets directory? Do I get

00:30:10.534 --> 00:30:11.815
<v Speaker 1>You won't be able to browse to that

00:30:11.815 --> 00:30:13.815
<v Speaker 1>because that's internal to the

00:30:14.135 --> 00:30:16.695
<v Speaker 1>container, isn't it? So local host is referring

00:30:16.695 --> 00:30:18.294
<v Speaker 1>to a different IP address. Oh, no. I

00:30:18.294 --> 00:30:20.530
<v Speaker 0>just exposed it with a port forward. This

00:30:20.530 --> 00:30:22.450
<v Speaker 0>connection was reset tells me I wanted an

00:30:22.450 --> 00:30:24.370
<v Speaker 0>upgrade to a WebSocket and it failed. So

00:30:24.370 --> 00:30:26.130
<v Speaker 0>I'm gonna assume it's not serving the assets

00:30:26.130 --> 00:30:29.490
<v Speaker 0>and all it's doing is serving WebSocket for

00:30:29.490 --> 00:30:31.970
<v Speaker 0>the reload. So this the existence of that

00:30:31.970 --> 00:30:34.370
<v Speaker 0>port as a WebSocket connection may mean that

00:30:34.370 --> 00:30:35.330
<v Speaker 0>something happens

00:30:35.674 --> 00:30:36.475
<v Speaker 0>here.

00:30:38.155 --> 00:30:38.874
<v Speaker 0>Maybe.

00:30:39.995 --> 00:30:41.835
<v Speaker 0>And so if we go to 8,000

00:30:41.995 --> 00:30:42.874
<v Speaker 2>It's crazy.

00:30:43.355 --> 00:30:45.195
<v Speaker 2>Trying to filter by web socket.

00:30:46.875 --> 00:30:49.480
<v Speaker 1>Migrations again? Yep. Let's get the migrations up

00:30:49.480 --> 00:30:51.160
<v Speaker 0>and running. So PHP

00:30:51.160 --> 00:30:52.840
<v Speaker 0>artisan migrate.

00:30:52.840 --> 00:30:53.799
<v Speaker 0>Let's see.

00:30:55.720 --> 00:30:57.240
<v Speaker 2>If this happens a third time, we're gonna

00:30:57.240 --> 00:30:59.240
<v Speaker 2>add the migrations to the d shell command.

00:31:03.005 --> 00:31:04.445
<v Speaker 0>Pop this back up.

00:31:07.005 --> 00:31:08.125
<v Speaker 1>And p m install?

00:31:08.605 --> 00:31:11.325
<v Speaker 0>That's still running. Yeah. You're you're right.

00:31:12.045 --> 00:31:14.429
<v Speaker 0>No. No. It's finished. Can

00:31:16.030 --> 00:31:17.389
<v Speaker 1>you look at the

00:31:18.030 --> 00:31:20.350
<v Speaker 1>console then? Because that might indicate that it's

00:31:20.350 --> 00:31:21.710
<v Speaker 1>not found any of the assets.

00:31:24.190 --> 00:31:24.590
<v Speaker 1>Yeah.

00:31:31.525 --> 00:31:32.485
<v Speaker 0>Alright.

00:31:32.805 --> 00:31:35.524
<v Speaker 0>So what's going on here?

00:31:37.605 --> 00:31:39.684
<v Speaker 0>Maybe a change between

00:31:39.925 --> 00:31:42.885
<v Speaker 0>NPM run hot and NPM run watch.

00:31:44.210 --> 00:31:45.650
<v Speaker 0>If we switch it back to a watch,

00:31:45.650 --> 00:31:46.610
<v Speaker 0>does it work?

00:31:48.050 --> 00:31:48.690
<v Speaker 0>Maybe

00:31:51.010 --> 00:31:53.090
<v Speaker 0>they're not something that you could directly swap

00:31:53.090 --> 00:31:54.530
<v Speaker 0>out. It's kind of my

00:31:55.410 --> 00:31:58.210
<v Speaker 0>my thought process. I wish thought you could.

00:31:58.635 --> 00:31:59.995
<v Speaker 1>That's why I make a file.

00:32:00.475 --> 00:32:01.914
<v Speaker 0>What was that? Sorry.

00:32:02.315 --> 00:32:03.835
<v Speaker 2>Missed something. Why was that looking at port

00:32:03.835 --> 00:32:05.595
<v Speaker 2>8,000?

00:32:06.235 --> 00:32:07.355
<v Speaker 0>Well, I moved

00:32:07.755 --> 00:32:09.515
<v Speaker 0>engine x support 8,000 so that I could

00:32:09.515 --> 00:32:11.355
<v Speaker 0>expose the WebSocket from node.

00:32:11.515 --> 00:32:11.995
<v Speaker 0>Okay.

00:32:13.400 --> 00:32:14.119
<v Speaker 0>Yeah.

00:32:14.440 --> 00:32:16.360
<v Speaker 0>Okay. So let's Oh, wait. Are the assets

00:32:16.360 --> 00:32:18.999
<v Speaker 1>they're looking for $80.80 or 80 80,000? Sorry.

00:32:19.320 --> 00:32:20.919
<v Speaker 0>They were looking for 8,000,

00:32:21.320 --> 00:32:22.600
<v Speaker 0>which is where they are. They should but

00:32:22.600 --> 00:32:24.200
<v Speaker 1>they should not be looking for eighty eighty,

00:32:24.200 --> 00:32:25.640
<v Speaker 1>should they know for the library loading stuff

00:32:25.640 --> 00:32:27.565
<v Speaker 1>to work? Or if that's just a WebSocket

00:32:27.565 --> 00:32:30.525
<v Speaker 0>connection? My assumption right now. It it depends.

00:32:30.525 --> 00:32:32.365
<v Speaker 2>So if yeah. If they get if they

00:32:32.365 --> 00:32:34.365
<v Speaker 2>get them initially from NGINX and then get

00:32:34.365 --> 00:32:35.484
<v Speaker 2>updates from

00:32:35.965 --> 00:32:37.244
<v Speaker 2>webpack, then

00:32:37.485 --> 00:32:39.590
<v Speaker 2>they should load them initially from NGINX. But

00:32:39.590 --> 00:32:41.110
<v Speaker 2>it should work anyway. Right?

00:32:42.150 --> 00:32:45.510
<v Speaker 1>My understanding on the documentation is that it's

00:32:46.790 --> 00:32:48.550
<v Speaker 1>that they should always now refer to eighty

00:32:48.550 --> 00:32:48.950
<v Speaker 1>eighty. Okay.

00:33:01.145 --> 00:33:02.024
<v Speaker 0>Excuse me.

00:33:02.505 --> 00:33:04.184
<v Speaker 0>Alright. Everything

00:33:04.505 --> 00:33:06.425
<v Speaker 0>oh, because I haven't restarted the note container

00:33:06.425 --> 00:33:07.465
<v Speaker 0>with a new command.

00:33:09.020 --> 00:33:11.259
<v Speaker 0>Once it let's just check the watch works

00:33:11.740 --> 00:33:13.900
<v Speaker 0>and and that all goes back to normal.

00:33:13.900 --> 00:33:14.940
<v Speaker 0>And then we've

00:33:15.340 --> 00:33:17.020
<v Speaker 0>we'll change it back to hot and we'll

00:33:17.020 --> 00:33:19.419
<v Speaker 0>start modifying the mix config to do

00:33:19.980 --> 00:33:21.500
<v Speaker 0>what I think we maybe need to make

00:33:21.500 --> 00:33:21.820
<v Speaker 0>it do.

00:33:22.654 --> 00:33:24.575
<v Speaker 1>What one third one thing worth looking at

00:33:24.575 --> 00:33:28.255
<v Speaker 1>is what changed to the mix manifest file

00:33:28.255 --> 00:33:30.414
<v Speaker 1>happens when you wouldn't get in the hot?

00:33:30.975 --> 00:33:32.335
<v Speaker 1>Because that tells it where all the assets

00:33:32.335 --> 00:33:34.815
<v Speaker 1>are held, like, where the assets are living.

00:33:35.375 --> 00:33:36.815
<v Speaker 1>And maybe those files aren't exposed.

00:33:38.570 --> 00:33:41.370
<v Speaker 0>Okay. Let's tackle this one

00:33:41.770 --> 00:33:44.250
<v Speaker 0>thing of it. Oh, time. So there was

00:33:44.250 --> 00:33:45.690
<v Speaker 0>a lot more output here

00:33:45.770 --> 00:33:47.450
<v Speaker 0>from the run watch than there was from

00:33:47.450 --> 00:33:48.890
<v Speaker 0>the run hot. The run hot did not

00:33:48.890 --> 00:33:49.770
<v Speaker 0>do any of

00:33:50.585 --> 00:33:51.304
<v Speaker 0>this.

00:33:51.785 --> 00:33:53.385
<v Speaker 2>Yeah. It's doing stuff like

00:33:53.945 --> 00:33:55.065
<v Speaker 2>versioning.

00:33:56.505 --> 00:33:58.105
<v Speaker 0>Alright. So we're we're back.

00:33:58.585 --> 00:34:01.065
<v Speaker 0>As far as web sockets go, we didn't

00:34:01.065 --> 00:34:03.544
<v Speaker 0>get any trying to open.

00:34:04.105 --> 00:34:06.770
<v Speaker 0>So let's copy this. I'll comment it out.

00:34:06.770 --> 00:34:08.930
<v Speaker 0>We're not gonna put it in directly.

00:34:09.489 --> 00:34:11.330
<v Speaker 2>So actually, this might completely

00:34:11.810 --> 00:34:14.770
<v Speaker 2>simplify the way we're doing the assets because

00:34:14.770 --> 00:34:16.210
<v Speaker 2>in dev, we maybe don't need to have

00:34:16.210 --> 00:34:17.489
<v Speaker 2>a shared volume at all.

00:34:17.969 --> 00:34:20.050
<v Speaker 2>If everything comes in on

00:34:20.050 --> 00:34:20.370
<v Speaker 2>server.

00:34:25.455 --> 00:34:26.655
<v Speaker 0>How do you mean? Sorry.

00:34:27.695 --> 00:34:29.614
<v Speaker 2>If the if the operating mode is that

00:34:29.614 --> 00:34:30.255
<v Speaker 2>in

00:34:30.415 --> 00:34:33.455
<v Speaker 2>in dev, we use hot module reload and

00:34:33.455 --> 00:34:35.375
<v Speaker 2>all of the assets are served from that

00:34:35.739 --> 00:34:37.020
<v Speaker 2>webpack server.

00:34:37.340 --> 00:34:38.780
<v Speaker 2>It means we don't have to serve anything

00:34:38.780 --> 00:34:40.540
<v Speaker 2>through any of the static assets through NGINX

00:34:40.540 --> 00:34:41.500
<v Speaker 2>and a lot of the stuff we did

00:34:41.500 --> 00:34:43.020
<v Speaker 2>last time we can chuck.

00:34:44.620 --> 00:34:45.660
<v Speaker 1>I

00:34:45.820 --> 00:34:49.820
<v Speaker 1>wouldn't necessarily say that hot module reloading is

00:34:50.364 --> 00:34:52.045
<v Speaker 1>the way that everybody does it. A lot

00:34:52.045 --> 00:34:53.885
<v Speaker 1>of people don't bother. It depends on the

00:34:53.885 --> 00:34:55.245
<v Speaker 1>type of application that you're dealing with because

00:34:55.245 --> 00:34:57.565
<v Speaker 1>some people who are doing single page applications

00:34:57.565 --> 00:34:59.085
<v Speaker 1>will find it more useful than people who

00:34:59.085 --> 00:35:00.845
<v Speaker 1>are doing a standard

00:35:01.965 --> 00:35:03.405
<v Speaker 1>service side rendered application.

00:35:04.100 --> 00:35:05.860
<v Speaker 2>Yeah. I guess if your page is reloading

00:35:05.860 --> 00:35:07.140
<v Speaker 2>every time you click something.

00:35:07.300 --> 00:35:09.300
<v Speaker 1>Yeah. It's not it. Yeah. It's it's not

00:35:09.300 --> 00:35:11.220
<v Speaker 1>an issue. Whereas if you're doing service side

00:35:11.380 --> 00:35:12.580
<v Speaker 1>a single site single

00:35:13.060 --> 00:35:14.820
<v Speaker 1>page applications, then it becomes more of an

00:35:14.820 --> 00:35:15.620
<v Speaker 1>issue because

00:35:15.940 --> 00:35:17.780
<v Speaker 1>where you are on the page matters more

00:35:17.780 --> 00:35:20.545
<v Speaker 1>in front end rendering as well. Mhmm.

00:35:21.265 --> 00:35:21.905
<v Speaker 0>Okay.

00:35:22.945 --> 00:35:23.505
<v Speaker 0>So

00:35:24.305 --> 00:35:26.225
<v Speaker 0>also what I've read here is that if

00:35:26.225 --> 00:35:28.545
<v Speaker 0>your application isn't using this syntax for the

00:35:28.545 --> 00:35:29.985
<v Speaker 0>assets, then it's not gonna be able to

00:35:29.985 --> 00:35:31.265
<v Speaker 0>do hot reloading.

00:35:31.265 --> 00:35:33.105
<v Speaker 0>And we haven't really confirmed that ping does

00:35:33.105 --> 00:35:34.545
<v Speaker 0>that. I'm just checking it now.

00:35:36.260 --> 00:35:38.180
<v Speaker 1>Alright. It does make use of that stuff

00:35:38.180 --> 00:35:40.260
<v Speaker 1>so it should be fine. Alright. So we're

00:35:40.260 --> 00:35:42.420
<v Speaker 0>gonna bring back and run hot. We're gonna

00:35:42.420 --> 00:35:44.180
<v Speaker 0>open up our mix file.

00:35:46.420 --> 00:35:48.100
<v Speaker 0>Webpack dot mix.

00:35:48.180 --> 00:35:48.420
<v Speaker 0>Yep.

00:35:51.185 --> 00:35:51.905
<v Speaker 0>And

00:35:52.385 --> 00:35:53.905
<v Speaker 0>this lane here,

00:35:54.305 --> 00:35:56.945
<v Speaker 0>which they're falling off my buffer.

00:36:02.465 --> 00:36:03.985
<v Speaker 2>See what that's with local host. Right?

00:36:05.360 --> 00:36:06.640
<v Speaker 0>Yeah.

00:36:07.600 --> 00:36:10.800
<v Speaker 0>So this turns on hot model reload. It's

00:36:10.800 --> 00:36:14.160
<v Speaker 0>kinda what I'm getting from it. HMR options,

00:36:14.240 --> 00:36:15.200
<v Speaker 0>blah blah blah.

00:36:17.280 --> 00:36:19.600
<v Speaker 0>So let's

00:36:21.965 --> 00:36:24.365
<v Speaker 0>what did I change? Restart

00:36:24.525 --> 00:36:25.165
<v Speaker 0>node.

00:36:25.325 --> 00:36:26.925
<v Speaker 0>So that should now switch to running an

00:36:26.925 --> 00:36:28.445
<v Speaker 0>MPM run hot again.

00:36:30.845 --> 00:36:32.365
<v Speaker 0>And then we jump back into a d

00:36:32.365 --> 00:36:33.005
<v Speaker 0>shell

00:36:33.245 --> 00:36:34.365
<v Speaker 0>and see what happens.

00:36:45.010 --> 00:36:45.650
<v Speaker 0>K.

00:36:45.810 --> 00:36:48.355
<v Speaker 0>Run like it said failure then. Yeah. That

00:36:48.355 --> 00:36:50.515
<v Speaker 0>was just because I killed and restarted the

00:36:50.515 --> 00:36:53.235
<v Speaker 0>container. Okay. Okay. So we now got serving

00:36:53.235 --> 00:36:56.035
<v Speaker 0>on eighty eighty, which we're exposing locally.

00:36:57.555 --> 00:36:58.595
<v Speaker 0>Let's just see what happens.

00:37:09.780 --> 00:37:11.220
<v Speaker 0>I mean, things working.

00:37:11.780 --> 00:37:13.940
<v Speaker 0>So I guess it's click into, like, organizations.

00:37:17.555 --> 00:37:19.954
<v Speaker 1>Okay. That seems okay. So if you make

00:37:19.954 --> 00:37:21.715
<v Speaker 1>a change to the

00:37:22.275 --> 00:37:25.235
<v Speaker 1>something now, I guess it should change.

00:37:25.474 --> 00:37:27.555
<v Speaker 2>Yeah. But I can't see a WebSocket open.

00:37:29.340 --> 00:37:30.780
<v Speaker 0>I changed the dashboard.

00:37:32.540 --> 00:37:34.700
<v Speaker 0>But that But well, none of this is

00:37:34.700 --> 00:37:36.220
<v Speaker 1>server side rendered. So that if you change

00:37:36.220 --> 00:37:37.740
<v Speaker 1>that to 23, that must be fine.

00:37:38.060 --> 00:37:39.580
<v Speaker 1>But I guess change it to 24 now

00:37:39.820 --> 00:37:40.700
<v Speaker 1>25.

00:37:45.285 --> 00:37:47.605
<v Speaker 1>No. It's not doing that, is it? Actually

00:37:48.005 --> 00:37:49.765
<v Speaker 2>That's you refreshing right there. Yeah. So that's

00:37:49.765 --> 00:37:52.005
<v Speaker 0>the hot not even yeah. That's so that's

00:37:52.005 --> 00:37:53.444
<v Speaker 0>just what I was worried about. That's the

00:37:53.444 --> 00:37:55.765
<v Speaker 0>MPM run hot isn't actually doing any compilation

00:37:55.765 --> 00:37:56.405
<v Speaker 0>of assets.

00:37:57.660 --> 00:37:58.460
<v Speaker 2>Isn't it?

00:37:58.780 --> 00:38:01.020
<v Speaker 0>Well, no. I just changed that template

00:38:01.260 --> 00:38:03.420
<v Speaker 0>refreshing the page manually, and I'm still not

00:38:03.420 --> 00:38:04.780
<v Speaker 0>seeing that update.

00:38:06.460 --> 00:38:08.540
<v Speaker 0>Although, we do see a compilation step here.

00:38:10.695 --> 00:38:12.855
<v Speaker 0>Okay. So what's I think it's doing that.

00:38:12.855 --> 00:38:15.335
<v Speaker 2>It's compiling it, and then it's pushing the

00:38:15.335 --> 00:38:16.855
<v Speaker 2>new compiled

00:38:16.855 --> 00:38:17.735
<v Speaker 2>asset

00:38:17.735 --> 00:38:19.255
<v Speaker 2>across the WebSocket

00:38:19.255 --> 00:38:21.255
<v Speaker 2>rather than and not probably not saving it

00:38:21.255 --> 00:38:21.655
<v Speaker 2>to disk.

00:38:22.170 --> 00:38:24.250
<v Speaker 0>Yeah. I think you're you're right, which means

00:38:24.250 --> 00:38:26.170
<v Speaker 0>NGINX is never gonna be able to serve

00:38:26.170 --> 00:38:26.810
<v Speaker 0>this.

00:38:27.050 --> 00:38:29.210
<v Speaker 0>So we probably if we want hot module

00:38:29.210 --> 00:38:30.090
<v Speaker 0>reloading,

00:38:30.329 --> 00:38:32.809
<v Speaker 0>we'd need to pull out NGINX and serve

00:38:32.809 --> 00:38:34.010
<v Speaker 0>the JavaScript over.

00:38:35.424 --> 00:38:37.825
<v Speaker 1>But it should be doing that automatically already.

00:38:37.825 --> 00:38:38.305
<v Speaker 1>The

00:38:39.105 --> 00:38:40.305
<v Speaker 1>the file

00:38:40.464 --> 00:38:41.585
<v Speaker 1>what do you call them? Like, the file

00:38:41.585 --> 00:38:44.545
<v Speaker 1>URL should be referencing port eighty eighty now

00:38:44.545 --> 00:38:46.625
<v Speaker 1>and not the other one. Do we need

00:38:46.625 --> 00:38:47.185
<v Speaker 2>to

00:38:47.664 --> 00:38:49.505
<v Speaker 2>control the assets once

00:38:50.910 --> 00:38:52.910
<v Speaker 2>the volume using

00:38:53.310 --> 00:38:54.670
<v Speaker 2>make assets

00:38:54.910 --> 00:38:57.710
<v Speaker 2>so that the compiled JavaScript knows it's using

00:38:57.710 --> 00:38:59.790
<v Speaker 2>mix? Because I think since we edited the

00:38:59.790 --> 00:39:02.510
<v Speaker 2>mix config, we haven't actually compiled the assets.

00:39:05.484 --> 00:39:07.325
<v Speaker 0>I'm happy to try it.

00:39:07.805 --> 00:39:09.725
<v Speaker 2>Just yeah. Try just running it once

00:39:10.205 --> 00:39:10.685
<v Speaker 2>and then

00:39:13.325 --> 00:39:14.765
<v Speaker 0>I'm I'm just

00:39:17.020 --> 00:39:18.780
<v Speaker 0>because I'm gonna request one of these assets

00:39:18.780 --> 00:39:21.260
<v Speaker 0>over that socket. And I just curiosity is

00:39:21.260 --> 00:39:23.100
<v Speaker 0>getting the better of me right now. So

00:39:23.740 --> 00:39:24.540
<v Speaker 0>and then

00:39:25.100 --> 00:39:27.340
<v Speaker 2>Yeah. Because what I think might have happened

00:39:27.340 --> 00:39:29.420
<v Speaker 0>is Yeah. See, this is coming over 8,000.

00:39:29.705 --> 00:39:31.785
<v Speaker 0>This isn't eighty eighty. I'm pretty sure that

00:39:31.785 --> 00:39:34.185
<v Speaker 1>should be eighty eighty. Yeah. But there's no

00:39:34.185 --> 00:39:35.705
<v Speaker 2>way for the browser to know that. Right?

00:39:35.705 --> 00:39:38.265
<v Speaker 2>Because the version we're serving on Port 8000

00:39:38.345 --> 00:39:39.865
<v Speaker 2>is the one we compiled

00:39:40.105 --> 00:39:41.945
<v Speaker 2>fifteen minutes ago before we changed anything.

00:39:42.800 --> 00:39:45.200
<v Speaker 2>So nothing to tell the web browser. You

00:39:45.200 --> 00:39:47.040
<v Speaker 2>should be looking at WebSocket.

00:39:48.560 --> 00:39:50.240
<v Speaker 0>That doesn't work.

00:39:50.480 --> 00:39:52.720
<v Speaker 2>I think we need to compile it with

00:39:53.119 --> 00:39:56.560
<v Speaker 2>yeah. Run the NPM whatever command we had,

00:39:56.560 --> 00:39:57.600
<v Speaker 2>the the non hot one.

00:39:58.665 --> 00:40:00.505
<v Speaker 2>Run that once and see if it changes.

00:40:01.865 --> 00:40:04.745
<v Speaker 0>Alright. So I will cheat and jump inside

00:40:04.745 --> 00:40:05.785
<v Speaker 0>of notes

00:40:07.145 --> 00:40:09.465
<v Speaker 0>and do NPM run dev.

00:40:15.340 --> 00:40:17.900
<v Speaker 0>I wonder if artisan serve has something baked

00:40:17.900 --> 00:40:19.260
<v Speaker 0>in to make this work.

00:40:19.500 --> 00:40:21.420
<v Speaker 1>I don't think so because I've done it

00:40:21.500 --> 00:40:23.100
<v Speaker 1>I'd never used artisan seven. I've had hot

00:40:23.100 --> 00:40:24.780
<v Speaker 1>hot module reloading work before.

00:40:26.655 --> 00:40:28.495
<v Speaker 2>So then so now I do a false

00:40:28.495 --> 00:40:30.095
<v Speaker 2>reload in your browser and see what see

00:40:30.095 --> 00:40:30.895
<v Speaker 2>what's what.

00:40:34.095 --> 00:40:36.495
<v Speaker 0>Everything's still served over 8,000.

00:40:36.575 --> 00:40:37.935
<v Speaker 1>If you do

00:40:38.255 --> 00:40:39.935
<v Speaker 1>run run hot again and then have a

00:40:39.935 --> 00:40:41.215
<v Speaker 1>look at the mix manifest file.

00:40:45.410 --> 00:40:46.210
<v Speaker 0>K. We'll restart.

00:40:57.795 --> 00:40:58.675
<v Speaker 0>Frogs.

00:40:59.075 --> 00:41:01.315
<v Speaker 0>So you want me that's just the old

00:41:01.315 --> 00:41:03.155
<v Speaker 0>one failing, so we'll give that a second.

00:41:04.195 --> 00:41:05.715
<v Speaker 0>Which manifest file do you want me to

00:41:05.715 --> 00:41:07.555
<v Speaker 1>look at? I think it's in public slash

00:41:07.555 --> 00:41:09.560
<v Speaker 1>mixed dot manifest. I think it's called a

00:41:09.560 --> 00:41:11.400
<v Speaker 1>mixed manifest dot JSON, something like that.

00:41:12.360 --> 00:41:13.240
<v Speaker 0>Indeed.

00:41:14.200 --> 00:41:16.520
<v Speaker 1>Right. After you do hot, does that change?

00:41:21.684 --> 00:41:23.765
<v Speaker 1>Or if you just run hot there? Yeah.

00:41:25.365 --> 00:41:27.205
<v Speaker 1>We're still giving output, is it?

00:41:27.525 --> 00:41:29.444
<v Speaker 0>Go away doc. There we go. That's what

00:41:29.444 --> 00:41:30.565
<v Speaker 2>we're looking at. Isn't the one that's in

00:41:30.565 --> 00:41:31.285
<v Speaker 2>the volume?

00:41:32.405 --> 00:41:33.765
<v Speaker 1>Yeah. The one in the volume is the

00:41:33.765 --> 00:41:35.925
<v Speaker 1>one that might matter. Well, won't matter.

00:41:38.069 --> 00:41:40.390
<v Speaker 0>Alright. So what we're seeing is we have

00:41:40.390 --> 00:41:42.950
<v Speaker 0>a public directory here with a mixed manifest.

00:41:44.470 --> 00:41:46.710
<v Speaker 1>Never mind. I was expecting that to say

00:41:46.710 --> 00:41:48.150
<v Speaker 1>maybe have the port numbers in it or

00:41:48.150 --> 00:41:48.390
<v Speaker 1>something.

00:41:52.835 --> 00:41:54.835
<v Speaker 0>And it has been modified right now,

00:41:55.715 --> 00:41:57.875
<v Speaker 0>and there's a hot directory.

00:41:57.875 --> 00:41:58.915
<v Speaker 1>Okay.

00:41:58.915 --> 00:41:59.555
<v Speaker 1>Okay.

00:42:00.835 --> 00:42:02.035
<v Speaker 0>Hot file.

00:42:02.995 --> 00:42:05.290
<v Speaker 1>Right. And that's got the so that needs

00:42:05.290 --> 00:42:08.650
<v Speaker 1>to be exposed to the PHP one because

00:42:08.650 --> 00:42:11.210
<v Speaker 1>Laravel mix has a PHP

00:42:11.290 --> 00:42:13.770
<v Speaker 1>mix function that's exposed to the Laravel, and

00:42:13.770 --> 00:42:15.210
<v Speaker 1>that will be checking if there's a hotfail

00:42:15.210 --> 00:42:16.010
<v Speaker 1>to get the

00:42:16.515 --> 00:42:18.915
<v Speaker 1>server from that rather than

00:42:20.994 --> 00:42:21.714
<v Speaker 1>for it to be

00:42:23.474 --> 00:42:24.914
<v Speaker 2>Right. It makes sense in my head. Don't

00:42:24.914 --> 00:42:26.515
<v Speaker 1>know how to explain it, but I think

00:42:26.515 --> 00:42:27.795
<v Speaker 1>that file needs to be exposed.

00:42:28.780 --> 00:42:30.140
<v Speaker 0>I should be able to have a port

00:42:30.140 --> 00:42:31.020
<v Speaker 0>8,000

00:42:31.020 --> 00:42:33.260
<v Speaker 0>hot. Right? That's why we we need that,

00:42:33.260 --> 00:42:35.100
<v Speaker 0>which it works, actually.

00:42:38.220 --> 00:42:40.060
<v Speaker 1>But is that exposed to

00:42:40.540 --> 00:42:42.220
<v Speaker 0>Yeah. We had this we had this on

00:42:42.220 --> 00:42:43.020
<v Speaker 0>the engine export.

00:42:46.085 --> 00:42:47.765
<v Speaker 2>But is that exposed to PHP was the

00:42:47.765 --> 00:42:48.325
<v Speaker 2>question.

00:42:48.645 --> 00:42:50.565
<v Speaker 2>So it would need to be able to

00:42:50.565 --> 00:42:52.725
<v Speaker 2>see that volume would be mapped into the

00:42:52.725 --> 00:42:53.765
<v Speaker 2>PHP container.

00:42:54.325 --> 00:42:56.565
<v Speaker 0>Why would the PHP container need that when

00:42:56.565 --> 00:42:59.260
<v Speaker 0>it's FPM that's running? It doesn't actually know

00:42:59.260 --> 00:43:01.340
<v Speaker 0>about hot reloading or this file.

00:43:02.140 --> 00:43:03.900
<v Speaker 0>And we're not using artisan serve. If we

00:43:03.900 --> 00:43:06.460
<v Speaker 0>were using artisan serve, I would understand. But

00:43:07.260 --> 00:43:09.260
<v Speaker 0>I'm assuming this hot I mean, we don't

00:43:09.260 --> 00:43:10.539
<v Speaker 0>even have a request to hot on the

00:43:10.539 --> 00:43:11.900
<v Speaker 0>PHP side here

00:43:11.980 --> 00:43:13.099
<v Speaker 0>on the network tab.

00:43:13.895 --> 00:43:14.695
<v Speaker 1>No.

00:43:14.695 --> 00:43:16.695
<v Speaker 1>Because it's looked it'll be like a floating

00:43:16.695 --> 00:43:17.975
<v Speaker 1>the file with PHP.

00:43:18.214 --> 00:43:20.135
<v Speaker 2>You don't see PHP request. They happen inside

00:43:20.135 --> 00:43:20.935
<v Speaker 2>of the app.

00:43:22.535 --> 00:43:23.015
<v Speaker 2>So

00:43:23.655 --> 00:43:24.535
<v Speaker 2>Yeah.

00:43:24.855 --> 00:43:26.369
<v Speaker 2>What if you like? Yeah. If you go

00:43:26.369 --> 00:43:27.650
<v Speaker 1>into the PHP

00:43:27.730 --> 00:43:30.530
<v Speaker 1>Docker container and paste that file there now

00:43:30.690 --> 00:43:32.849
<v Speaker 1>or well, then the file or something there,

00:43:32.849 --> 00:43:34.450
<v Speaker 1>does it start working?

00:43:34.930 --> 00:43:37.250
<v Speaker 2>So it's server side using hot and then

00:43:37.250 --> 00:43:38.690
<v Speaker 2>changes what it's sending to the

00:43:39.245 --> 00:43:41.885
<v Speaker 2>browser. K. So we don't have the hot

00:43:41.885 --> 00:43:44.285
<v Speaker 0>file there. And what we're saying is if

00:43:44.285 --> 00:43:45.405
<v Speaker 0>I echo

00:43:45.725 --> 00:43:46.605
<v Speaker 0>HTTP

00:43:46.605 --> 00:43:48.685
<v Speaker 0>one two seven zero zero one

00:43:49.325 --> 00:43:50.205
<v Speaker 0>hot

00:43:50.285 --> 00:43:51.885
<v Speaker 0>to this. I forget the port.

00:43:52.470 --> 00:43:55.030
<v Speaker 1>It wasn't hot on there. It was colon

00:43:55.030 --> 00:43:56.790
<v Speaker 1>eighty eighty. That's all I had, I think.

00:43:58.550 --> 00:43:59.270
<v Speaker 0>Okay.

00:43:59.430 --> 00:44:00.070
<v Speaker 0>So

00:44:00.790 --> 00:44:02.869
<v Speaker 2>it's just the base of URL. And I

00:44:02.869 --> 00:44:04.230
<v Speaker 1>think maybe a trailing slash.

00:44:06.674 --> 00:44:09.474
<v Speaker 0>Yeah. Yeah. But we can we can check.

00:44:09.474 --> 00:44:12.035
<v Speaker 0>Right? So Yeah. It's probably worth checking.

00:44:16.194 --> 00:44:18.434
<v Speaker 0>Okay. So This is exactly what we have

00:44:18.434 --> 00:44:18.755
<v Speaker 0>there.

00:44:20.790 --> 00:44:22.550
<v Speaker 2>It's a bit like the artisan file thing.

00:44:22.550 --> 00:44:24.310
<v Speaker 2>You've had you know, they're they're quite tightly

00:44:24.310 --> 00:44:26.470
<v Speaker 2>integrated with PHP and the JavaScript. And and

00:44:26.470 --> 00:44:28.470
<v Speaker 2>the way we're trying to way we've been

00:44:28.470 --> 00:44:30.230
<v Speaker 2>trying to approach it is this quite separate

00:44:30.230 --> 00:44:30.790
<v Speaker 2>pipelines.

00:44:31.475 --> 00:44:32.515
<v Speaker 2>Maybe they might.

00:44:32.995 --> 00:44:34.035
<v Speaker 0>Yeah.

00:44:34.035 --> 00:44:36.115
<v Speaker 0>So that has broken out, which is good.

00:44:36.115 --> 00:44:37.635
<v Speaker 0>I think it's now

00:44:38.275 --> 00:44:40.195
<v Speaker 0>yeah. We can see asset request from port

00:44:40.195 --> 00:44:40.995
<v Speaker 0>eighty eighty.

00:44:41.635 --> 00:44:42.675
<v Speaker 1>But that's

00:44:44.035 --> 00:44:45.750
<v Speaker 0>So that that's actually doing what we wanted

00:44:45.750 --> 00:44:47.350
<v Speaker 0>to do. It's just a shame the request

00:44:47.350 --> 00:44:48.950
<v Speaker 0>is failing. You

00:44:50.230 --> 00:44:51.910
<v Speaker 0>have got an extra slash in here which

00:44:51.910 --> 00:44:54.310
<v Speaker 0>probably isn't helping although

00:44:54.550 --> 00:44:56.390
<v Speaker 2>So it doesn't have a trading slash where

00:44:56.390 --> 00:44:58.150
<v Speaker 2>we added it. It shouldn't have a trading

00:44:58.150 --> 00:45:01.175
<v Speaker 2>slash. As though that's not serving the asset

00:45:01.335 --> 00:45:02.295
<v Speaker 0>anyway.

00:45:02.535 --> 00:45:04.855
<v Speaker 0>So what's going on with run hot?

00:45:10.535 --> 00:45:12.295
<v Speaker 0>Let's go back into the node container. I

00:45:12.295 --> 00:45:13.815
<v Speaker 0>think we're close. So

00:45:14.295 --> 00:45:15.900
<v Speaker 2>Can we can

00:45:15.900 --> 00:45:18.140
<v Speaker 2>we fix the hot file in the PHP

00:45:18.140 --> 00:45:18.780
<v Speaker 2>container?

00:45:20.220 --> 00:45:21.180
<v Speaker 0>Yes.

00:45:21.180 --> 00:45:22.140
<v Speaker 0>I will do that.

00:45:22.460 --> 00:45:24.540
<v Speaker 0>Just a moment. I wanna be able to

00:45:24.540 --> 00:45:25.660
<v Speaker 0>curl

00:45:28.505 --> 00:45:31.385
<v Speaker 0>eighty eighty j s zero dot j s.

00:45:31.385 --> 00:45:33.785
<v Speaker 0>And I can from a node container.

00:45:34.665 --> 00:45:35.625
<v Speaker 0>From here

00:45:37.065 --> 00:45:38.985
<v Speaker 1>Is 8080 definitely exposed properly?

00:45:40.790 --> 00:45:43.030
<v Speaker 0>I'm not gonna say definitely, but I'm pretty

00:45:43.030 --> 00:45:43.830
<v Speaker 0>confident.

00:45:45.830 --> 00:45:47.510
<v Speaker 0>Yeah. But it's not working there. It needs

00:45:47.510 --> 00:45:50.390
<v Speaker 1>to be exposed from the node container. Right?

00:45:52.950 --> 00:45:55.674
<v Speaker 0>Hold on. I bet you there's a problem.

00:45:55.674 --> 00:45:58.234
<v Speaker 0>So MPM run hot as an actually binding

00:45:58.234 --> 00:45:59.835
<v Speaker 0>on all the interfaces. We need to fix

00:45:59.835 --> 00:46:03.195
<v Speaker 0>that. Okay. Got it. I can fix this.

00:46:04.155 --> 00:46:05.994
<v Speaker 1>So that's good. Listening on local host not

00:46:05.994 --> 00:46:07.710
<v Speaker 1>on zero zero zero zero. Yeah. So this

00:46:07.710 --> 00:46:09.710
<v Speaker 0>is the port that we wanna bind, not

00:46:09.710 --> 00:46:11.870
<v Speaker 0>actually where we wanna be delivered.

00:46:12.750 --> 00:46:14.910
<v Speaker 0>We're gonna bind on all interfaces on port

00:46:14.910 --> 00:46:17.070
<v Speaker 0>eighty eighty. If we do this

00:46:17.869 --> 00:46:19.630
<v Speaker 0>and let's restart node there,

00:46:21.615 --> 00:46:23.535
<v Speaker 0>And our logs down here, we should see

00:46:23.535 --> 00:46:25.215
<v Speaker 0>this is running on 000

00:46:25.215 --> 00:46:26.815
<v Speaker 0>80 80, which means I can have that

00:46:26.815 --> 00:46:28.175
<v Speaker 0>from my browser.

00:46:28.495 --> 00:46:29.535
<v Speaker 0>That should work.

00:46:30.015 --> 00:46:31.055
<v Speaker 0>It should work.

00:46:33.055 --> 00:46:34.575
<v Speaker 0>Let's get the logs running again.

00:46:39.190 --> 00:46:41.589
<v Speaker 0>I'll just tackle a question right there. So

00:46:41.589 --> 00:46:44.150
<v Speaker 0>Robert's asked what's good practice for preserving the

00:46:44.150 --> 00:46:45.750
<v Speaker 0>DB in the dev environment.

00:46:46.549 --> 00:46:47.109
<v Speaker 0>So

00:46:47.430 --> 00:46:49.750
<v Speaker 0>we're already configured MariaDB to use a volume.

00:46:50.255 --> 00:46:52.095
<v Speaker 0>So you can count the containers and the

00:46:52.095 --> 00:46:53.535
<v Speaker 0>database as preserved.

00:46:53.935 --> 00:46:55.215
<v Speaker 0>The only reason it died for me and

00:46:55.215 --> 00:46:58.015
<v Speaker 0>I have to migrate again is because through

00:46:58.575 --> 00:46:59.775
<v Speaker 0>don't know if it's good or bad habit,

00:46:59.775 --> 00:47:01.295
<v Speaker 0>but this dash v on the Docker Compose

00:47:01.295 --> 00:47:03.295
<v Speaker 0>down will remove all the volumes as well.

00:47:03.295 --> 00:47:05.360
<v Speaker 0>So I actually explicitly told it not to

00:47:05.360 --> 00:47:07.680
<v Speaker 0>preserve the database state, which was the which

00:47:07.680 --> 00:47:08.880
<v Speaker 0>was the problem.

00:47:09.280 --> 00:47:11.360
<v Speaker 0>And then for prod, your database will be

00:47:11.360 --> 00:47:12.560
<v Speaker 0>handled completely differently.

00:47:13.360 --> 00:47:14.880
<v Speaker 0>We can talk about that a little bit

00:47:14.880 --> 00:47:15.440
<v Speaker 0>later.

00:47:15.840 --> 00:47:17.280
<v Speaker 0>Okay. This is better.

00:47:19.515 --> 00:47:21.434
<v Speaker 0>Which means if I hit refresh, we've got

00:47:21.434 --> 00:47:23.435
<v Speaker 0>assets on that port. Now

00:47:24.714 --> 00:47:26.475
<v Speaker 0>we can refresh this page.

00:47:27.115 --> 00:47:29.515
<v Speaker 0>What's not gonna work right now? Oh, no.

00:47:29.515 --> 00:47:31.355
<v Speaker 0>It's working. Oh, yeah. That PHP fails still

00:47:31.355 --> 00:47:32.875
<v Speaker 0>exist. So we have to automate that. We

00:47:32.875 --> 00:47:33.355
<v Speaker 0>can't forget.

00:47:34.190 --> 00:47:36.190
<v Speaker 0>But we should have reloading there.

00:47:36.750 --> 00:47:37.710
<v Speaker 0>Do we agree?

00:47:39.789 --> 00:47:42.589
<v Speaker 1>Yeah. But it won't work because you're loading

00:47:42.589 --> 00:47:44.750
<v Speaker 1>on pause you're loading IP 0000

00:47:44.750 --> 00:47:46.349
<v Speaker 1>from the front end, is wrong.

00:47:47.155 --> 00:47:48.515
<v Speaker 1>If you look in your requests

00:47:51.715 --> 00:47:53.955
<v Speaker 0>So there must must be something in this

00:47:53.955 --> 00:47:55.875
<v Speaker 0>configuration option then where I can say bind

00:47:55.875 --> 00:47:58.355
<v Speaker 0>on this IP, but really we are delivering

00:47:58.355 --> 00:47:59.555
<v Speaker 0>it over something else.

00:48:00.309 --> 00:48:01.349
<v Speaker 0>So

00:48:01.510 --> 00:48:02.790
<v Speaker 0>let's go to

00:48:03.109 --> 00:48:04.710
<v Speaker 0>is it Laravel Laravel?

00:48:06.549 --> 00:48:08.550
<v Speaker 1>What are looking for the mix stuff?

00:48:08.869 --> 00:48:10.470
<v Speaker 0>Yeah. I'm looking for the code.

00:48:11.109 --> 00:48:13.589
<v Speaker 1>No. It's Jeffrey Way slash Laravel dash mix.

00:48:16.075 --> 00:48:17.355
<v Speaker 0>Jeffrey Way.

00:48:19.915 --> 00:48:20.955
<v Speaker 0>Laravel

00:48:20.955 --> 00:48:21.675
<v Speaker 0>mix.

00:48:25.755 --> 00:48:26.715
<v Speaker 0>The search. Okay.

00:48:30.859 --> 00:48:31.660
<v Speaker 0>Okay.

00:48:31.660 --> 00:48:33.500
<v Speaker 0>I'll just search Laravel Laravel. Let's see if

00:48:33.500 --> 00:48:34.619
<v Speaker 0>I can find that option.

00:48:35.099 --> 00:48:35.819
<v Speaker 2>So it's

00:48:36.220 --> 00:48:38.220
<v Speaker 1>It's not part it's so it's only part

00:48:38.220 --> 00:48:39.420
<v Speaker 1>of Laravel mix.

00:48:39.500 --> 00:48:41.660
<v Speaker 0>Okay. That's our goal. Maybe just lying to

00:48:41.660 --> 00:48:41.900
<v Speaker 0>me.

00:48:42.875 --> 00:48:44.715
<v Speaker 1>I sent you an yeah.

00:48:45.355 --> 00:48:46.075
<v Speaker 1>Cool.

00:48:47.515 --> 00:48:49.035
<v Speaker 0>So we wanna understand

00:48:49.835 --> 00:48:51.275
<v Speaker 0>this configuration.

00:48:55.710 --> 00:48:57.630
<v Speaker 1>It only looks like you get the two

00:48:57.630 --> 00:48:58.670
<v Speaker 1>config options.

00:48:59.070 --> 00:49:00.910
<v Speaker 0>Yeah. Then that's not gonna work.

00:49:02.190 --> 00:49:03.310
<v Speaker 0>Yeah. Okay.

00:49:04.750 --> 00:49:05.630
<v Speaker 0>It's it's just

00:49:07.355 --> 00:49:09.595
<v Speaker 0>I was gonna say it's it's purely designed.

00:49:09.595 --> 00:49:12.395
<v Speaker 0>It's not intended for container sales. That's never

00:49:12.395 --> 00:49:14.635
<v Speaker 0>gonna work. I I can't listen on all

00:49:14.635 --> 00:49:15.994
<v Speaker 0>interfaces and

00:49:17.035 --> 00:49:18.075
<v Speaker 0>rewrite.

00:49:18.795 --> 00:49:18.954
<v Speaker 0>No.

00:49:21.039 --> 00:49:24.079
<v Speaker 0>Yes. What's

00:49:24.079 --> 00:49:25.440
<v Speaker 0>it you You can't you

00:49:26.319 --> 00:49:28.640
<v Speaker 1>could you not make it use a specific

00:49:29.279 --> 00:49:31.839
<v Speaker 1>IP and have the IP be, like,

00:49:32.559 --> 00:49:35.215
<v Speaker 1>a Docker network? Or is that not I

00:49:35.215 --> 00:49:37.295
<v Speaker 0>I wouldn't go down that route. It's too

00:49:37.295 --> 00:49:38.815
<v Speaker 0>cumbersome, too painful.

00:49:39.295 --> 00:49:41.935
<v Speaker 0>Instead, what I want is to just put

00:49:42.734 --> 00:49:45.615
<v Speaker 0>see, the the disconnect here is when we

00:49:45.615 --> 00:49:47.295
<v Speaker 0>run a server, we have the binding address

00:49:47.295 --> 00:49:47.935
<v Speaker 0>and then listen.

00:49:49.690 --> 00:49:51.370
<v Speaker 0>The binding address and where we wanna route

00:49:51.370 --> 00:49:53.450
<v Speaker 0>traffic is different in a container setup.

00:49:54.250 --> 00:49:55.450
<v Speaker 0>So all

00:49:55.850 --> 00:49:57.050
<v Speaker 0>I really wanna be able to do is

00:49:57.050 --> 00:49:59.290
<v Speaker 0>tell this webpack configuration to bind on all

00:49:59.290 --> 00:50:01.370
<v Speaker 0>ports, but still rewrite things to one two

00:50:01.370 --> 00:50:02.010
<v Speaker 0>seven.

00:50:02.250 --> 00:50:03.850
<v Speaker 2>There's a relevant question in the chat.

00:50:06.625 --> 00:50:07.905
<v Speaker 0>The service name,

00:50:08.944 --> 00:50:10.545
<v Speaker 0>it's a good idea, but it won't work

00:50:10.545 --> 00:50:11.345
<v Speaker 0>locally.

00:50:11.505 --> 00:50:13.905
<v Speaker 0>So, you know, browsing to

00:50:13.905 --> 00:50:14.945
<v Speaker 0>the node

00:50:15.025 --> 00:50:17.184
<v Speaker 0>DNS name on my local machine wouldn't work.

00:50:17.184 --> 00:50:18.704
<v Speaker 0>I've had I mean, we could force that

00:50:18.704 --> 00:50:19.345
<v Speaker 0>to work

00:50:20.480 --> 00:50:21.840
<v Speaker 0>and that I could

00:50:23.200 --> 00:50:25.119
<v Speaker 0>set something on my host files that satisfied

00:50:25.119 --> 00:50:27.599
<v Speaker 0>that. But again, I don't want that. I

00:50:27.599 --> 00:50:29.520
<v Speaker 0>want everything to be contained in in this

00:50:29.520 --> 00:50:30.320
<v Speaker 0>configuration.

00:50:30.480 --> 00:50:32.160
<v Speaker 1>Could you make it

00:50:32.559 --> 00:50:34.400
<v Speaker 1>inside of the actual

00:50:35.135 --> 00:50:35.935
<v Speaker 1>container

00:50:35.935 --> 00:50:38.895
<v Speaker 1>itself where local host wasn't one two seven,

00:50:38.895 --> 00:50:40.815
<v Speaker 1>but instead zero zero zero zero?

00:50:44.095 --> 00:50:45.935
<v Speaker 1>Because that's only based on the host file,

00:50:45.935 --> 00:50:46.895
<v Speaker 1>I believe, is it?

00:50:48.950 --> 00:50:50.390
<v Speaker 1>I mean, it's not exactly clean, but it

00:50:50.390 --> 00:50:51.510
<v Speaker 1>would do it, maybe.

00:50:51.829 --> 00:50:54.230
<v Speaker 2>Yes. A Rawkode engine host file.

00:50:54.630 --> 00:50:57.190
<v Speaker 0>Sounds like a dreadful idea. Is

00:50:58.150 --> 00:51:00.309
<v Speaker 2>there some host names in Docker Compose?

00:51:01.035 --> 00:51:03.915
<v Speaker 0>We can do some stuff with host names,

00:51:03.915 --> 00:51:06.155
<v Speaker 0>but, again, it's a territory usually

00:51:06.155 --> 00:51:07.755
<v Speaker 0>doing bad things.

00:51:10.555 --> 00:51:11.195
<v Speaker 0>Okay.

00:51:11.595 --> 00:51:13.755
<v Speaker 0>Do we know what is actually running this

00:51:13.755 --> 00:51:15.595
<v Speaker 0>web pack server that's serving the assets?

00:51:19.910 --> 00:51:22.070
<v Speaker 2>Is it yeah. Okay. So it's just webpack

00:51:22.070 --> 00:51:23.750
<v Speaker 0>dev server. Right? This is what we got

00:51:23.750 --> 00:51:24.710
<v Speaker 0>here. Yeah.

00:51:25.910 --> 00:51:27.830
<v Speaker 0>So let's go take a look at webpack

00:51:27.830 --> 00:51:28.710
<v Speaker 0>dev server.

00:51:39.745 --> 00:51:41.185
<v Speaker 2>Yeah. I'm thinking the

00:51:42.865 --> 00:51:45.105
<v Speaker 2>extra host setting in Docker Compose

00:51:46.220 --> 00:51:47.980
<v Speaker 2>to do what Alex was suggesting.

00:51:48.220 --> 00:51:50.940
<v Speaker 0>Okay. So dev server has an allowed hosts,

00:51:53.819 --> 00:51:56.220
<v Speaker 0>which tells me that it's not it's not

00:51:56.220 --> 00:51:58.940
<v Speaker 0>always gonna run on a one two seven

00:51:59.225 --> 00:52:00.105
<v Speaker 0>binding.

00:52:00.105 --> 00:52:01.385
<v Speaker 0>That's something

00:52:04.265 --> 00:52:05.385
<v Speaker 0>strange.

00:52:08.665 --> 00:52:10.905
<v Speaker 0>Yeah. It's

00:52:11.930 --> 00:52:12.810
<v Speaker 0>tricky.

00:52:19.610 --> 00:52:21.370
<v Speaker 0>I mean, this the 000

00:52:21.370 --> 00:52:22.970
<v Speaker 0>is working because I can have it from

00:52:22.970 --> 00:52:24.570
<v Speaker 0>my local machine. The problem is just to

00:52:24.570 --> 00:52:25.770
<v Speaker 0>rewrite inside now.

00:52:27.714 --> 00:52:30.195
<v Speaker 1>Well, an alternate option then is that you

00:52:30.915 --> 00:52:33.955
<v Speaker 1>after the compile stuff happens, instead of

00:52:34.435 --> 00:52:35.155
<v Speaker 1>letting

00:52:36.115 --> 00:52:38.435
<v Speaker 1>Laravel mix actually change your

00:52:38.675 --> 00:52:40.915
<v Speaker 1>hot file, you instead just force write it

00:52:40.915 --> 00:52:41.155
<v Speaker 1>yourself.

00:52:43.000 --> 00:52:44.760
<v Speaker 0>There's a good point, actually.

00:52:45.000 --> 00:52:46.600
<v Speaker 1>Because we don't actually care about We haven't

00:52:46.600 --> 00:52:47.480
<v Speaker 0>modified

00:52:47.720 --> 00:52:49.720
<v Speaker 0>the hot file. It still says one two

00:52:49.720 --> 00:52:50.280
<v Speaker 0>seven.

00:52:51.000 --> 00:52:53.160
<v Speaker 1>No. No. That would have been modified by

00:52:54.360 --> 00:52:57.015
<v Speaker 0>It can. No. The volume isn't shared between

00:52:57.015 --> 00:52:59.335
<v Speaker 2>those containers. HP containers only got the file

00:52:59.335 --> 00:53:00.295
<v Speaker 2>because they've

00:53:00.615 --> 00:53:02.295
<v Speaker 2>SSH didn't write it.

00:53:03.015 --> 00:53:05.095
<v Speaker 0>So the existence of this file is what

00:53:05.095 --> 00:53:07.335
<v Speaker 0>happens. It's not actually using the value to

00:53:07.335 --> 00:53:08.375
<v Speaker 0>rewrite the pass.

00:53:10.230 --> 00:53:11.910
<v Speaker 0>Is that something we can leverage?

00:53:12.630 --> 00:53:14.150
<v Speaker 1>I think it is using the value for

00:53:14.150 --> 00:53:15.990
<v Speaker 1>the initial page load, and then the rest

00:53:15.990 --> 00:53:18.150
<v Speaker 1>of it is done with the hot server.

00:53:18.390 --> 00:53:20.310
<v Speaker 1>So if you do a hard relash reload

00:53:20.310 --> 00:53:22.470
<v Speaker 1>on this page, is it using eighty eighty

00:53:22.470 --> 00:53:24.905
<v Speaker 1>to begin with? Oh, look. Yeah. And then

00:53:24.905 --> 00:53:27.385
<v Speaker 1>it's the and then it's the server itself,

00:53:27.385 --> 00:53:29.545
<v Speaker 1>the node web server, which is then returning

00:53:29.545 --> 00:53:31.385
<v Speaker 1>the new assets,

00:53:31.625 --> 00:53:32.585
<v Speaker 1>like endpoints.

00:53:33.145 --> 00:53:33.945
<v Speaker 0>That's annoying.

00:53:37.630 --> 00:53:39.310
<v Speaker 1>Which means that if you were to go

00:53:39.310 --> 00:53:42.190
<v Speaker 1>into the hot hot module server

00:53:42.350 --> 00:53:44.510
<v Speaker 1>and look at the hot file in that

00:53:44.510 --> 00:53:46.910
<v Speaker 1>one, that will have zero zero zero.

00:53:47.070 --> 00:53:48.270
<v Speaker 1>And then if you were to change that

00:53:48.270 --> 00:53:50.270
<v Speaker 1>to be eighty eighty or whatever at the

00:53:50.270 --> 00:53:52.195
<v Speaker 1>moment. Now if you change that one and

00:53:52.195 --> 00:53:54.035
<v Speaker 1>then reload the browser, it should

00:53:56.675 --> 00:53:57.475
<v Speaker 1>work.

00:53:57.955 --> 00:53:58.994
<v Speaker 1>But then as soon as you do a

00:53:58.994 --> 00:54:00.675
<v Speaker 1>hot recompile, it will break again.

00:54:07.460 --> 00:54:09.300
<v Speaker 1>So that's loaded everything. But now if if

00:54:09.300 --> 00:54:11.700
<v Speaker 1>you change an asset, that file will break.

00:54:11.860 --> 00:54:13.380
<v Speaker 0>Oh, it it it failed.

00:54:13.700 --> 00:54:14.340
<v Speaker 0>Oh.

00:54:15.060 --> 00:54:16.820
<v Speaker 0>Oh, no. That's that zero dot zero dot

00:54:16.820 --> 00:54:18.100
<v Speaker 0>zero dot zero is actually working.

00:54:19.255 --> 00:54:21.735
<v Speaker 0>That's a red heading. Yeah. Okay. So we

00:54:21.735 --> 00:54:22.375
<v Speaker 0>don't care.

00:54:23.255 --> 00:54:24.455
<v Speaker 1>How is that working?

00:54:25.095 --> 00:54:28.135
<v Speaker 0>I'm I'm not gonna argue. I'm assuming 0000

00:54:28.135 --> 00:54:30.055
<v Speaker 0>is just resolving in the browser to to

00:54:30.055 --> 00:54:35.810
<v Speaker 0>local host. 000080800.

00:54:36.930 --> 00:54:39.010
<v Speaker 1>I had no idea. That was a thing.

00:54:40.530 --> 00:54:41.970
<v Speaker 0>So we're trying to fix something that's not

00:54:41.970 --> 00:54:45.490
<v Speaker 0>a problem. Okay. Cool. So What what what

00:54:45.505 --> 00:54:47.905
<v Speaker 1>goes on to this? Because I've seen those

00:54:47.905 --> 00:54:50.465
<v Speaker 0>little red lines through it and got worried.

00:54:50.625 --> 00:54:52.625
<v Speaker 1>Okay. Right. Right. And I assumed it was

00:54:52.625 --> 00:54:54.785
<v Speaker 0>failing, but there's a 200 here. So

00:54:55.825 --> 00:54:57.984
<v Speaker 0>and we have a WebSocket connection. So okay.

00:54:58.650 --> 00:55:01.049
<v Speaker 0>We got completely sidetracked there for something that

00:55:01.049 --> 00:55:02.010
<v Speaker 0>wasn't a problem.

00:55:02.410 --> 00:55:03.290
<v Speaker 0>So let's

00:55:03.530 --> 00:55:04.730
<v Speaker 2>So the bit we

00:55:05.130 --> 00:55:06.410
<v Speaker 2>yeah. Check it works.

00:55:07.770 --> 00:55:09.609
<v Speaker 2>Amazing. So that made yeah. So that works

00:55:09.609 --> 00:55:10.890
<v Speaker 1>without a PHP refresh. Okay.

00:55:11.675 --> 00:55:13.835
<v Speaker 2>But we had to manually write that file

00:55:13.835 --> 00:55:15.915
<v Speaker 2>in the PHP container to make it work.

00:55:16.155 --> 00:55:17.835
<v Speaker 0>K. So let so let's fix that then.

00:55:17.835 --> 00:55:19.755
<v Speaker 0>Right? So what we need for the hot

00:55:19.755 --> 00:55:22.315
<v Speaker 0>reload scenario is

00:55:24.069 --> 00:55:25.670
<v Speaker 0>it failed to exist.

00:55:25.990 --> 00:55:27.190
<v Speaker 0>So if we take a look at how

00:55:27.190 --> 00:55:28.950
<v Speaker 0>our PHP is configured,

00:55:29.349 --> 00:55:30.230
<v Speaker 0>we mount

00:55:30.710 --> 00:55:31.830
<v Speaker 0>all of this.

00:55:32.230 --> 00:55:33.190
<v Speaker 0>So

00:55:36.005 --> 00:55:38.405
<v Speaker 0>I mean, it's probably as simple as just

00:55:38.405 --> 00:55:39.125
<v Speaker 0>saying

00:55:41.525 --> 00:55:42.485
<v Speaker 0>echo.

00:55:44.805 --> 00:55:46.645
<v Speaker 1>Only if you're running hot, though. If you're

00:55:46.645 --> 00:55:47.845
<v Speaker 1>not running hot, you don't want that file

00:55:47.845 --> 00:55:49.980
<v Speaker 1>there. Because that file will make everything break

00:55:49.980 --> 00:55:51.420
<v Speaker 1>because it will be expecting it to run

00:55:51.420 --> 00:55:53.020
<v Speaker 1>through hot one when it isn't.

00:55:53.580 --> 00:55:55.340
<v Speaker 2>But I guess we're deciding But but we

00:55:55.340 --> 00:55:56.940
<v Speaker 0>are deciding. We but right now, we've got

00:55:56.940 --> 00:55:58.940
<v Speaker 0>our node assets. It's always gonna run hot.

00:55:58.940 --> 00:55:59.100
<v Speaker 0>So

00:56:00.905 --> 00:56:01.865
<v Speaker 0>I'm comfortable.

00:56:02.025 --> 00:56:04.425
<v Speaker 2>And this being the node Come on. Well,

00:56:05.785 --> 00:56:07.225
<v Speaker 0>how else would we do it?

00:56:07.705 --> 00:56:09.705
<v Speaker 2>Yeah. Shouldn't this be in the node assets

00:56:09.705 --> 00:56:10.185
<v Speaker 2>target?

00:56:12.630 --> 00:56:15.670
<v Speaker 0>Which runs automatically anyway. I mean, I yeah.

00:56:15.670 --> 00:56:16.869
<v Speaker 0>I mean, I can do that. So at

00:56:16.869 --> 00:56:18.309
<v Speaker 0>least the code is script together, it makes

00:56:18.309 --> 00:56:20.630
<v Speaker 0>a bit more logical sense. But implementation

00:56:20.630 --> 00:56:22.070
<v Speaker 0>wise, it's the exact same.

00:56:22.390 --> 00:56:25.750
<v Speaker 0>Mhmm. Alright. So I'm not gonna destroy

00:56:25.750 --> 00:56:27.990
<v Speaker 0>my volumes, but I am gonna shut everything

00:56:27.990 --> 00:56:28.309
<v Speaker 0>down.

00:56:29.165 --> 00:56:31.005
<v Speaker 0>And that backup, then we should get live

00:56:31.005 --> 00:56:33.885
<v Speaker 0>roll live hot reloading by default

00:56:33.885 --> 00:56:35.725
<v Speaker 0>and everything work. If you don't destroy the

00:56:35.725 --> 00:56:38.125
<v Speaker 1>volumes, how will you know necessarily that the

00:56:38.125 --> 00:56:39.965
<v Speaker 1>hot file got written to the right place?

00:56:40.925 --> 00:56:43.005
<v Speaker 2>Because it's They're not in a volume. Yeah.

00:56:43.760 --> 00:56:45.680
<v Speaker 2>There's no volume. Okay. So

00:56:46.720 --> 00:56:48.480
<v Speaker 0>I'm just gonna run make b shell.

00:56:49.520 --> 00:56:52.000
<v Speaker 0>Our Rawkode is gonna handle everything for me.

00:56:52.640 --> 00:56:54.079
<v Speaker 0>We will need to just keep an eye

00:56:54.079 --> 00:56:56.160
<v Speaker 0>on our logs on the node site.

00:56:56.320 --> 00:56:58.079
<v Speaker 0>We can see the echo run. That's great.

00:56:59.335 --> 00:57:01.175
<v Speaker 0>Can see it's a cross end node. No.

00:57:01.175 --> 00:57:02.375
<v Speaker 1>We don't want it on the node server.

00:57:02.375 --> 00:57:03.895
<v Speaker 1>We want it on the PHPFPM one, don't

00:57:03.895 --> 00:57:06.535
<v Speaker 1>we? It is. It's just Kieran wanted to

00:57:06.535 --> 00:57:07.975
<v Speaker 0>bundle it with that automation, but it does

00:57:07.975 --> 00:57:09.335
<v Speaker 0>happen on the PHP side.

00:57:10.535 --> 00:57:12.215
<v Speaker 0>So this happens with

00:57:13.130 --> 00:57:14.730
<v Speaker 0>oh, no. That does run-in the

00:57:15.050 --> 00:57:16.890
<v Speaker 1>That one's on the note. Hold on.

00:57:17.450 --> 00:57:19.370
<v Speaker 0>Don't your key on. You're wrong.

00:57:23.770 --> 00:57:26.170
<v Speaker 0>Oh my god. D shell here is the

00:57:27.290 --> 00:57:29.965
<v Speaker 1>that's the PHP container. Yeah. That's our interactive

00:57:29.965 --> 00:57:32.205
<v Speaker 0>development environment and say oh, no. Yeah. And

00:57:32.205 --> 00:57:34.285
<v Speaker 0>saved. And actually, it's right in that file

00:57:34.285 --> 00:57:35.885
<v Speaker 0>locally on the disk, so it's gonna be

00:57:35.885 --> 00:57:36.845
<v Speaker 0>available here

00:57:39.085 --> 00:57:41.085
<v Speaker 0>for the container. But I'm I'm I'm okay

00:57:41.085 --> 00:57:42.365
<v Speaker 0>with this step. It's

00:57:43.220 --> 00:57:45.460
<v Speaker 0>assuming that fails and they get ignore. Yep.

00:57:45.460 --> 00:57:47.539
<v Speaker 0>It is. It's not it's not, you know,

00:57:47.539 --> 00:57:48.260
<v Speaker 0>wait,

00:57:48.900 --> 00:57:50.740
<v Speaker 0>which means we can

00:57:51.220 --> 00:57:52.260
<v Speaker 0>now monitor

00:57:52.900 --> 00:57:53.700
<v Speaker 0>node again.

00:57:56.605 --> 00:57:59.245
<v Speaker 0>Once that's happy, we should be able to

00:57:59.805 --> 00:58:01.085
<v Speaker 0>oh, where's my

00:58:02.045 --> 00:58:03.005
<v Speaker 2>Third time.

00:58:03.725 --> 00:58:05.085
<v Speaker 1>Why did that?

00:58:07.085 --> 00:58:07.885
<v Speaker 1>Awkward.

00:58:07.885 --> 00:58:10.365
<v Speaker 1>We kept in containers, We're

00:58:10.365 --> 00:58:11.885
<v Speaker 0>not using the volume. We're not using the

00:58:11.885 --> 00:58:11.965
<v Speaker 2>volume.

00:58:13.210 --> 00:58:16.250
<v Speaker 0>Okay. Let's just let's process the database. So

00:58:16.250 --> 00:58:17.850
<v Speaker 0>I'm sorry. I lied to everybody.

00:58:21.930 --> 00:58:23.130
<v Speaker 0>We will

00:58:23.290 --> 00:58:25.690
<v Speaker 0>make sure that we do persist this volume.

00:58:28.365 --> 00:58:31.005
<v Speaker 0>We're using the named volume and

00:58:31.005 --> 00:58:32.445
<v Speaker 0>bar lab

00:58:32.445 --> 00:58:33.885
<v Speaker 0>my s q l.

00:58:34.925 --> 00:58:35.485
<v Speaker 0>I

00:58:36.045 --> 00:58:37.965
<v Speaker 0>think that's right. The way that we would

00:58:37.965 --> 00:58:39.085
<v Speaker 0>confirm that

00:58:39.245 --> 00:58:41.805
<v Speaker 0>is to do a docker image

00:58:43.539 --> 00:58:45.140
<v Speaker 0>spec MariaDB.

00:58:45.299 --> 00:58:47.220
<v Speaker 0>What version? 10.

00:58:51.380 --> 00:58:52.180
<v Speaker 0>And

00:58:52.740 --> 00:58:53.460
<v Speaker 0>you

00:58:55.220 --> 00:58:57.460
<v Speaker 0>should see the volumes listed

00:58:58.875 --> 00:59:00.155
<v Speaker 0>by the MySQL.

00:59:00.955 --> 00:59:02.955
<v Speaker 0>So now we've got persistence there, which means

00:59:02.955 --> 00:59:05.355
<v Speaker 0>I do need to run migrations one more

00:59:05.355 --> 00:59:06.955
<v Speaker 0>time, but that will be it.

00:59:07.115 --> 00:59:07.835
<v Speaker 0>I promise.

00:59:13.070 --> 00:59:14.350
<v Speaker 0>Okay. So

00:59:14.910 --> 00:59:17.550
<v Speaker 0>we should get home module reloading

00:59:17.950 --> 00:59:20.110
<v Speaker 0>by default. There's our WebSocket. That's a really

00:59:20.110 --> 00:59:22.990
<v Speaker 0>good start. I'm gonna modify our template one

00:59:22.990 --> 00:59:23.470
<v Speaker 0>more time.

00:59:25.875 --> 00:59:27.475
<v Speaker 0>Resources,

00:59:27.475 --> 00:59:29.715
<v Speaker 0>JavaScript, pages, dashboard,

00:59:29.715 --> 00:59:30.355
<v Speaker 0>view.

00:59:31.555 --> 00:59:33.395
<v Speaker 0>I am live.

00:59:33.555 --> 00:59:34.115
<v Speaker 0>Reload.

00:59:37.350 --> 00:59:38.070
<v Speaker 0>Awesome.

00:59:38.150 --> 00:59:39.350
<v Speaker 0>That's pretty nice.

00:59:40.950 --> 00:59:41.910
<v Speaker 0>Alright.

00:59:41.910 --> 00:59:43.590
<v Speaker 0>We got a couple of comments. Let's see

00:59:43.590 --> 00:59:44.710
<v Speaker 0>what we have here.

00:59:44.950 --> 00:59:46.790
<v Speaker 0>Tony says first time viewer, where should I

00:59:46.790 --> 00:59:47.350
<v Speaker 0>start?

00:59:47.670 --> 00:59:49.510
<v Speaker 0>If you're interested in Laravel and PHP, start

00:59:50.214 --> 00:59:51.015
<v Speaker 0>with

00:59:51.015 --> 00:59:53.095
<v Speaker 0>part one of this. This is part three.

00:59:53.175 --> 00:59:55.335
<v Speaker 0>If you're really, really curious, there was a

00:59:55.335 --> 00:59:57.575
<v Speaker 0>non Laravel specific one where we covered a

00:59:57.575 --> 01:00:00.135
<v Speaker 0>lot of the groundwork with Docker. And if

01:00:00.135 --> 01:00:00.855
<v Speaker 0>you go to

01:00:01.815 --> 01:00:03.734
<v Speaker 0>let me do this live. Let's see how

01:00:03.734 --> 01:00:04.615
<v Speaker 0>fancy I can get.

01:00:06.150 --> 01:00:06.790
<v Speaker 0>With

01:00:08.710 --> 01:00:10.390
<v Speaker 0>the rockcode.live/PHP,

01:00:10.390 --> 01:00:12.710
<v Speaker 0>you will see all of my PHP videos.

01:00:13.829 --> 01:00:15.910
<v Speaker 0>Thank you for watching. Now

01:00:16.230 --> 01:00:18.310
<v Speaker 1>Is it worth having a Laravel

01:00:18.950 --> 01:00:20.710
<v Speaker 1>save playlist on on

01:00:20.934 --> 01:00:23.255
<v Speaker 0>YouTube. I am gonna add a Laravel tag.

01:00:23.255 --> 01:00:25.414
<v Speaker 0>In fact, does Laravel work? Was I was

01:00:25.414 --> 01:00:27.095
<v Speaker 0>I smart enough to go ahead and do

01:00:27.095 --> 01:00:27.575
<v Speaker 0>that?

01:00:30.535 --> 01:00:33.575
<v Speaker 0>It was. There you go. Rawkode.live/Laravel.

01:00:34.150 --> 01:00:35.830
<v Speaker 0>You'll see we're live right now with this

01:00:35.830 --> 01:00:36.390
<v Speaker 0>one.

01:00:36.950 --> 01:00:39.590
<v Speaker 0>There's the part ones and two Laravel edition

01:00:39.590 --> 01:00:41.430
<v Speaker 0>and Kieran and I also

01:00:42.070 --> 01:00:44.390
<v Speaker 0>is that only three weeks ago? Wow.

01:00:46.070 --> 01:00:48.405
<v Speaker 0>There's a deeper dive into the the general

01:00:48.405 --> 01:00:51.045
<v Speaker 0>PHP server Docker Compose here before I had

01:00:51.045 --> 01:00:53.285
<v Speaker 0>my my brand in setup. Anyway, thank you

01:00:53.285 --> 01:00:55.205
<v Speaker 0>for your question. Let's see. We've got

01:00:55.845 --> 01:00:57.285
<v Speaker 0>well, it's in. Hello. Nice to see this

01:00:57.285 --> 01:00:59.605
<v Speaker 0>live. Yeah. Very much live and very much

01:00:59.605 --> 01:01:01.205
<v Speaker 0>when things go wrong, know about it just

01:01:01.205 --> 01:01:02.790
<v Speaker 0>as well as we do. And I like

01:01:02.790 --> 01:01:04.630
<v Speaker 0>covered up Keaton's face. Sorry, mate.

01:01:05.270 --> 01:01:07.110
<v Speaker 0>And we got Robert's in

01:01:07.350 --> 01:01:08.950
<v Speaker 0>oh, yeah. He's answered my question for me.

01:01:08.950 --> 01:01:10.310
<v Speaker 0>Thank you very much, Robert's.

01:01:11.270 --> 01:01:11.910
<v Speaker 0>Okay.

01:01:12.070 --> 01:01:13.910
<v Speaker 0>I can't believe things are working. We almost

01:01:13.910 --> 01:01:15.190
<v Speaker 0>we almost went down a rabbit hole that

01:01:15.190 --> 01:01:16.630
<v Speaker 0>we didn't have to go down, but we

01:01:16.630 --> 01:01:17.670
<v Speaker 0>fixed it. So.

01:01:18.365 --> 01:01:19.805
<v Speaker 1>We know you got caught up by another

01:01:19.805 --> 01:01:21.805
<v Speaker 1>rogue file that exists somewhere.

01:01:21.885 --> 01:01:23.244
<v Speaker 1>It's supposed to work. So

01:01:23.885 --> 01:01:25.805
<v Speaker 1>Nice. Yeah. And who knows? We've learned to

01:01:25.805 --> 01:01:27.724
<v Speaker 0>do that. Browser to zero dot zero dot

01:01:27.724 --> 01:01:29.484
<v Speaker 0>zero dot zero results to local host, which

01:01:29.484 --> 01:01:32.204
<v Speaker 0>is really convenient. Otherwise, this reloading would probably

01:01:32.204 --> 01:01:34.050
<v Speaker 0>have been a lot problematic, and we'd have

01:01:34.050 --> 01:01:34.850
<v Speaker 0>to specify

01:01:35.090 --> 01:01:36.930
<v Speaker 0>the extra configuration. We'd have to contribute something

01:01:36.930 --> 01:01:38.850
<v Speaker 0>to mix to say, I wanna bang on

01:01:38.850 --> 01:01:40.850
<v Speaker 0>this, but lessing on this. Might be worth

01:01:40.850 --> 01:01:42.450
<v Speaker 1>doing that anyway because I don't know how

01:01:42.450 --> 01:01:44.130
<v Speaker 1>reliable it would be to rely on zero

01:01:44.130 --> 01:01:46.050
<v Speaker 1>zero zero zero actually going to one two

01:01:46.050 --> 01:01:47.410
<v Speaker 1>seven. That's

01:01:48.185 --> 01:01:49.145
<v Speaker 0>that's nice.

01:01:49.385 --> 01:01:50.985
<v Speaker 1>It might be worth improving

01:01:51.145 --> 01:01:52.905
<v Speaker 1>open source just in general. Whoever gets the

01:01:52.905 --> 01:01:54.105
<v Speaker 1>opportunity to do that might be worth doing

01:01:54.105 --> 01:01:56.105
<v Speaker 1>that just in general. Yeah. It probably depends

01:01:56.105 --> 01:01:57.945
<v Speaker 2>on what audio network adapters are in or

01:01:57.945 --> 01:01:58.425
<v Speaker 2>something.

01:02:00.105 --> 01:02:01.385
<v Speaker 0>Okay. So

01:02:02.540 --> 01:02:04.060
<v Speaker 0>how is this is this is this a

01:02:04.060 --> 01:02:06.700
<v Speaker 0>fully working Laravel local development environment?

01:02:07.100 --> 01:02:08.380
<v Speaker 1>No. No.

01:02:08.460 --> 01:02:09.660
<v Speaker 1>So

01:02:10.140 --> 01:02:12.220
<v Speaker 1>there's two there's two sections which I can

01:02:12.220 --> 01:02:13.660
<v Speaker 1>think of immediately off the top of my

01:02:13.660 --> 01:02:15.725
<v Speaker 1>head, would be useful.

01:02:16.045 --> 01:02:17.165
<v Speaker 1>That is the

01:02:18.205 --> 01:02:19.885
<v Speaker 1>there's something called the scheduler, which is just

01:02:19.885 --> 01:02:20.605
<v Speaker 1>cron,

01:02:20.845 --> 01:02:21.805
<v Speaker 1>and there's

01:02:22.445 --> 01:02:23.965
<v Speaker 1>the queue system as well.

01:02:24.445 --> 01:02:26.925
<v Speaker 1>Yeah. And then alongside that, there's a load

01:02:26.925 --> 01:02:29.310
<v Speaker 1>of separate things which are useful, like

01:02:30.270 --> 01:02:32.510
<v Speaker 1>search and things like that, which

01:02:32.829 --> 01:02:33.790
<v Speaker 1>are sort of

01:02:34.510 --> 01:02:36.589
<v Speaker 1>work based on things like classic search running

01:02:36.589 --> 01:02:37.390
<v Speaker 1>or

01:02:37.470 --> 01:02:40.829
<v Speaker 1>and there's also caching, which runs based on

01:02:39.795 --> 01:02:43.555
<v Speaker 1>Redis or m m caching as well. And

01:02:43.555 --> 01:02:46.275
<v Speaker 0>does Peng CRM have any of those components?

01:02:46.355 --> 01:02:49.715
<v Speaker 1>Probably not because it's only a demonstration of

01:02:50.835 --> 01:02:53.155
<v Speaker 1>the ping JS, like, library, which is

01:02:55.870 --> 01:02:57.630
<v Speaker 1>it's not a fully flesh level application. That

01:02:57.870 --> 01:03:00.030
<v Speaker 1>it is just a a demonstration of how

01:03:00.030 --> 01:03:02.990
<v Speaker 1>to use, like, ping how to use inertia.

01:03:02.990 --> 01:03:04.350
<v Speaker 0>Okay. So I think

01:03:05.230 --> 01:03:06.270
<v Speaker 0>the best

01:03:06.645 --> 01:03:08.965
<v Speaker 0>protocol here would be that we find a

01:03:08.965 --> 01:03:11.285
<v Speaker 0>more feature complete Laravel application for another episode

01:03:11.285 --> 01:03:14.005
<v Speaker 0>where we tackle scheduling cron and stuff and

01:03:14.005 --> 01:03:15.845
<v Speaker 0>focus on what we can do with this

01:03:15.845 --> 01:03:17.445
<v Speaker 0>example so that we can kinda call it

01:03:17.445 --> 01:03:19.980
<v Speaker 0>as complete as we're gonna get. Mhmm. The

01:03:19.980 --> 01:03:21.660
<v Speaker 0>only thing I think we're missing

01:03:22.220 --> 01:03:24.060
<v Speaker 0>right now is how do I run the

01:03:24.060 --> 01:03:25.500
<v Speaker 0>tests and how do I deploy it to

01:03:25.500 --> 01:03:26.460
<v Speaker 0>Kubernetes?

01:03:27.500 --> 01:03:28.700
<v Speaker 2>Let's do tests.

01:03:29.980 --> 01:03:30.620
<v Speaker 1>Test

01:03:30.780 --> 01:03:33.580
<v Speaker 1>test should be easy. Right? Yes. Makes tests.

01:03:33.580 --> 01:03:35.555
<v Speaker 1>Doesn't it? We we don't have to deploy

01:03:35.555 --> 01:03:37.795
<v Speaker 2>it without running the test. So Test test.

01:03:37.795 --> 01:03:39.795
<v Speaker 1>So test test is working.

01:03:39.954 --> 01:03:41.795
<v Speaker 1>Yeah. Oh, that that does remind me that

01:03:41.795 --> 01:03:42.675
<v Speaker 1>there is a

01:03:44.835 --> 01:03:46.835
<v Speaker 1>I I don't know again whether or not

01:03:47.690 --> 01:03:48.490
<v Speaker 1>PingCRM

01:03:48.490 --> 01:03:51.770
<v Speaker 1>covers this, but there's a browser based testing

01:03:52.089 --> 01:03:55.130
<v Speaker 1>in Laravel, a package called Laravel Dusk, which

01:03:55.130 --> 01:03:56.810
<v Speaker 1>makes use of Chrome WebDriver

01:03:57.930 --> 01:03:59.930
<v Speaker 1>to, you know, go through click buttons, all

01:03:59.930 --> 01:04:01.935
<v Speaker 1>that sort of stuff. Doing that in Docker

01:04:01.935 --> 01:04:03.135
<v Speaker 1>could be a fun topic.

01:04:03.535 --> 01:04:04.175
<v Speaker 2>Yeah.

01:04:05.375 --> 01:04:06.015
<v Speaker 2>Definitely.

01:04:06.735 --> 01:04:08.335
<v Speaker 1>Because when things go wrong, it gives you

01:04:08.335 --> 01:04:10.175
<v Speaker 1>screenshot outputs. It it does all that sort

01:04:10.175 --> 01:04:11.775
<v Speaker 1>of stuff. So you'll need to have, like,

01:04:11.775 --> 01:04:13.775
<v Speaker 1>yeah, probably some

01:04:14.095 --> 01:04:16.320
<v Speaker 1>heavy debugging in that one. So I have

01:04:16.320 --> 01:04:19.200
<v Speaker 0>run Puppeteer and containers before. That will be

01:04:19.200 --> 01:04:21.680
<v Speaker 0>fun. But not part of the Ping CRM

01:04:21.680 --> 01:04:23.440
<v Speaker 0>project. So I think the vibe I'm getting

01:04:23.440 --> 01:04:26.000
<v Speaker 0>right here is we need another application to

01:04:26.000 --> 01:04:27.120
<v Speaker 0>continue the CDs on.

01:04:28.405 --> 01:04:31.045
<v Speaker 0>But let's still continue with what we have

01:04:31.045 --> 01:04:33.365
<v Speaker 0>for Ping CRM. We still got, what's this,

01:04:33.365 --> 01:04:35.605
<v Speaker 0>another twenty minutes. Are you gonna contribute this

01:04:35.605 --> 01:04:36.725
<v Speaker 2>back at the end, though?

01:04:38.005 --> 01:04:40.085
<v Speaker 0>Sorry? Are you gonna contribute this to Ping

01:04:40.085 --> 01:04:40.565
<v Speaker 2>at the end?

01:04:42.950 --> 01:04:44.470
<v Speaker 0>If they want it, they can have it

01:04:44.470 --> 01:04:45.350
<v Speaker 0>for sure.

01:04:46.950 --> 01:04:47.670
<v Speaker 0>Okay.

01:04:48.069 --> 01:04:49.590
<v Speaker 0>Woah. What's going on here?

01:04:50.869 --> 01:04:53.030
<v Speaker 2>We had this last time. This is because

01:04:53.030 --> 01:04:53.910
<v Speaker 2>one of us,

01:04:54.150 --> 01:04:54.869
<v Speaker 2>maybe me,

01:04:55.545 --> 01:04:56.825
<v Speaker 2>has the file open.

01:05:00.984 --> 01:05:03.145
<v Speaker 2>It was a sharing issue last time. So

01:05:03.464 --> 01:05:05.224
<v Speaker 0>Yeah. I think it's just a weird quirk.

01:05:05.224 --> 01:05:05.865
<v Speaker 0>Okay.

01:05:06.744 --> 01:05:07.545
<v Speaker 0>Now

01:05:07.545 --> 01:05:09.760
<v Speaker 0>let's talk about this. We we we don't

01:05:09.760 --> 01:05:11.599
<v Speaker 0>have a Docker file right now for building

01:05:11.599 --> 01:05:13.359
<v Speaker 0>this and distributing it. Oh, we do. Okay.

01:05:13.359 --> 01:05:14.640
<v Speaker 0>So let's take a look at our Docker

01:05:14.640 --> 01:05:16.640
<v Speaker 0>file. How far do we get with this?

01:05:16.960 --> 01:05:17.839
<v Speaker 2>Could be

01:05:18.480 --> 01:05:21.119
<v Speaker 2>four. Alright. We have a base layer where

01:05:21.119 --> 01:05:23.200
<v Speaker 0>we add our dependencies. We've got the dev

01:05:23.200 --> 01:05:25.214
<v Speaker 0>layer, which is the one we target for

01:05:25.214 --> 01:05:26.335
<v Speaker 0>actually working.

01:05:26.575 --> 01:05:27.215
<v Speaker 0>And

01:05:27.615 --> 01:05:30.015
<v Speaker 0>then we build an FPM container to ship

01:05:30.015 --> 01:05:32.575
<v Speaker 0>to prod, which we kinda started on. Oh,

01:05:32.575 --> 01:05:34.815
<v Speaker 0>we have tests. So we have, you know,

01:05:34.815 --> 01:05:36.494
<v Speaker 0>that but that's really important as well that

01:05:36.494 --> 01:05:38.015
<v Speaker 0>we put this inside the Docker file. It

01:05:38.015 --> 01:05:39.869
<v Speaker 0>means when we do the Docker image build,

01:05:40.190 --> 01:05:42.589
<v Speaker 0>we're running the test that can run happily

01:05:42.589 --> 01:05:44.670
<v Speaker 0>inside the build process. And actually, we don't

01:05:44.670 --> 01:05:46.670
<v Speaker 0>build an image of those test fail. If

01:05:46.670 --> 01:05:48.510
<v Speaker 0>that step fails, there's no artifact. There's no

01:05:48.990 --> 01:05:50.349
<v Speaker 0>Make test target.

01:05:52.605 --> 01:05:54.525
<v Speaker 0>And we have a make test target.

01:05:56.845 --> 01:05:57.565
<v Speaker 2>Ta da.

01:05:58.605 --> 01:06:00.445
<v Speaker 2>Because it was only at one point. So

01:06:00.445 --> 01:06:01.085
<v Speaker 2>that's good.

01:06:01.405 --> 01:06:02.525
<v Speaker 0>Yeah. So

01:06:02.685 --> 01:06:04.525
<v Speaker 0>after test fail, I mean, we could always

01:06:04.525 --> 01:06:06.365
<v Speaker 0>artificially make a test fail if we want.

01:06:06.480 --> 01:06:08.240
<v Speaker 0>But when I do a Docker image build,

01:06:08.240 --> 01:06:09.840
<v Speaker 0>we we're never gonna get a container image

01:06:09.840 --> 01:06:11.840
<v Speaker 0>out of that because this fails, which is

01:06:11.840 --> 01:06:14.480
<v Speaker 0>which is good. What we the guarantee of

01:06:14.480 --> 01:06:15.040
<v Speaker 0>the

01:06:16.240 --> 01:06:18.240
<v Speaker 0>the process we're trying to encourage

01:06:18.320 --> 01:06:20.000
<v Speaker 0>or enforce here is that if a Docker

01:06:20.000 --> 01:06:21.840
<v Speaker 0>image build passes, that is an image I

01:06:21.840 --> 01:06:22.240
<v Speaker 0>can ship.

01:06:22.825 --> 01:06:25.225
<v Speaker 0>Assuming or I can also run other types

01:06:25.225 --> 01:06:26.905
<v Speaker 0>of tests against that which are also equally

01:06:26.905 --> 01:06:29.705
<v Speaker 0>important like the puppeteer test. When I run

01:06:29.705 --> 01:06:31.785
<v Speaker 0>integration or end to end test, the chances

01:06:31.785 --> 01:06:34.585
<v Speaker 0>are I want to use the artifact that

01:06:34.585 --> 01:06:35.945
<v Speaker 0>I'm gonna ship to prod and run the

01:06:35.945 --> 01:06:37.545
<v Speaker 0>test against the and then tear it back

01:06:37.545 --> 01:06:37.785
<v Speaker 0>down.

01:06:38.700 --> 01:06:39.820
<v Speaker 0>No. We're not gonna be able to do

01:06:39.820 --> 01:06:41.660
<v Speaker 0>that. I think we definitely need to try

01:06:41.660 --> 01:06:43.180
<v Speaker 0>and find a more feature could be application

01:06:43.180 --> 01:06:45.180
<v Speaker 0>that has all of these additional components.

01:06:46.540 --> 01:06:48.220
<v Speaker 0>But we can ship this to we can

01:06:48.220 --> 01:06:49.980
<v Speaker 0>ship this to our fake prod of Kubernetes.

01:06:51.115 --> 01:06:52.715
<v Speaker 2>So the test that passed by the time

01:06:52.715 --> 01:06:54.155
<v Speaker 2>you build the image will be sort of

01:06:54.155 --> 01:06:55.275
<v Speaker 2>internal tests,

01:06:55.435 --> 01:06:56.555
<v Speaker 2>the self tests?

01:06:57.035 --> 01:06:59.195
<v Speaker 0>Yeah. And if anything that doesn't have dependencies,

01:06:59.195 --> 01:07:00.475
<v Speaker 0>I would run-in the part of the Docker

01:07:00.475 --> 01:07:02.475
<v Speaker 0>image build process. Like, I don't want my

01:07:02.475 --> 01:07:05.080
<v Speaker 0>CI system to be complicated. My CI system

01:07:05.080 --> 01:07:07.640
<v Speaker 0>should be Docker image build and that's it.

01:07:08.680 --> 01:07:10.360
<v Speaker 0>All I want it to be. And I

01:07:10.360 --> 01:07:11.240
<v Speaker 0>target

01:07:12.440 --> 01:07:14.600
<v Speaker 0>build f p m, which is our

01:07:15.160 --> 01:07:16.040
<v Speaker 0>production

01:07:16.040 --> 01:07:18.040
<v Speaker 0>PHP image that we're building here.

01:07:20.335 --> 01:07:22.335
<v Speaker 0>But we never got the also order working,

01:07:22.335 --> 01:07:24.415
<v Speaker 0>I don't think. Why did we comment that?

01:07:27.215 --> 01:07:28.815
<v Speaker 1>That's just production optimization.

01:07:28.815 --> 01:07:30.815
<v Speaker 1>You don't want that in development. But that's

01:07:30.815 --> 01:07:32.335
<v Speaker 0>just the production image we're building with that

01:07:32.335 --> 01:07:34.600
<v Speaker 0>one. Yeah. So it's spelled FPM. I mean,

01:07:34.600 --> 01:07:37.080
<v Speaker 0>it's purely named, but it's spelled FPM for

01:07:37.080 --> 01:07:37.880
<v Speaker 0>production.

01:07:38.120 --> 01:07:39.640
<v Speaker 0>That's what we're supposed to take away from

01:07:39.640 --> 01:07:40.120
<v Speaker 0>that.

01:07:41.000 --> 01:07:42.680
<v Speaker 2>Yeah. I don't because

01:07:43.000 --> 01:07:44.760
<v Speaker 2>the I think we were hitting some more

01:07:44.760 --> 01:07:45.320
<v Speaker 2>than we

01:07:45.735 --> 01:07:46.935
<v Speaker 2>fix

01:07:46.935 --> 01:07:49.495
<v Speaker 2>it. The problem was we then we we

01:07:49.495 --> 01:07:51.895
<v Speaker 0>actually decided we didn't want composer available in

01:07:51.895 --> 01:07:53.495
<v Speaker 0>the production image. So we actually wanted to

01:07:53.495 --> 01:07:55.255
<v Speaker 0>extract the composer installed to dump out a

01:07:55.255 --> 01:07:56.775
<v Speaker 0>loader to its own step and then have

01:07:56.775 --> 01:07:58.295
<v Speaker 0>a production image that pulls down all of

01:07:58.295 --> 01:08:00.455
<v Speaker 0>the vendor directory and stuff when we just

01:08:00.455 --> 01:08:02.130
<v Speaker 0>never got around to it. This is annoying

01:08:02.130 --> 01:08:04.289
<v Speaker 2>thing with Composer is that you have to

01:08:04.289 --> 01:08:06.530
<v Speaker 2>have all of the files there to optimize

01:08:06.530 --> 01:08:08.609
<v Speaker 2>the auto loader because it scans all the

01:08:08.609 --> 01:08:09.170
<v Speaker 2>files.

01:08:10.530 --> 01:08:13.329
<v Speaker 2>So whereas you can do the vendor directory

01:08:13.329 --> 01:08:13.890
<v Speaker 2>generation

01:08:14.395 --> 01:08:16.155
<v Speaker 2>just with the composer JSON.

01:08:17.755 --> 01:08:19.274
<v Speaker 2>So so then so you could move the

01:08:19.274 --> 01:08:20.635
<v Speaker 2>composer install out,

01:08:20.875 --> 01:08:22.475
<v Speaker 2>but the dump auto loader has to happen

01:08:22.475 --> 01:08:23.835
<v Speaker 2>after you've copied everything.

01:08:23.995 --> 01:08:24.314
<v Speaker 0>Yep.

01:08:27.689 --> 01:08:31.050
<v Speaker 0>Okay. So we also have a question here.

01:08:31.050 --> 01:08:33.370
<v Speaker 0>Sorry. Sorry, Kieran. The way we've got it

01:08:33.370 --> 01:08:35.450
<v Speaker 2>there, we're copying the composer JSON, and then

01:08:35.450 --> 01:08:37.050
<v Speaker 2>immediately, we're copying the

01:08:37.290 --> 01:08:37.770
<v Speaker 2>everything

01:08:39.604 --> 01:08:41.045
<v Speaker 2>on sixteen and eighteen, which is a bit

01:08:41.045 --> 01:08:42.965
<v Speaker 2>messy. Yeah. I think we were just kinda

01:08:42.965 --> 01:08:44.484
<v Speaker 0>faffing around with it at that point. We

01:08:44.484 --> 01:08:47.045
<v Speaker 0>haven't really decided what our what our kinda

01:08:47.045 --> 01:08:48.725
<v Speaker 0>goal was. So

01:08:48.725 --> 01:08:50.244
<v Speaker 0>Leo has popped in

01:08:50.804 --> 01:08:52.804
<v Speaker 0>one day sorry, Kieran. I'll just keep covering

01:08:52.804 --> 01:08:54.399
<v Speaker 0>you up. One day say to put in

01:08:54.399 --> 01:08:56.000
<v Speaker 0>the test and so Docker fails, you can't

01:08:56.000 --> 01:08:57.520
<v Speaker 0>paralyze steps in CI.

01:08:57.920 --> 01:08:58.880
<v Speaker 0>That's

01:08:58.960 --> 01:09:01.520
<v Speaker 0>half true. There's some changes that do allow

01:09:01.520 --> 01:09:02.560
<v Speaker 0>you to do that. So I'll talk about

01:09:02.560 --> 01:09:03.359
<v Speaker 0>that in a second.

01:09:03.840 --> 01:09:06.240
<v Speaker 0>You followed that up with unit test. That's

01:09:06.240 --> 01:09:06.720
<v Speaker 0>not a problem.

01:09:07.595 --> 01:09:10.234
<v Speaker 0>Integration test can be slow. Okay. So

01:09:11.035 --> 01:09:12.715
<v Speaker 0>if you're using build kit,

01:09:13.595 --> 01:09:15.995
<v Speaker 0>you do get parallelism on the Docker image

01:09:15.995 --> 01:09:18.955
<v Speaker 0>build. So you can do Docker build kit

01:09:18.955 --> 01:09:20.955
<v Speaker 0>equals one Docker image

01:09:21.250 --> 01:09:25.330
<v Speaker 0>build dash t. Let's call it PHP prods

01:09:25.330 --> 01:09:28.130
<v Speaker 0>and I need a target of build

01:09:28.450 --> 01:09:29.969
<v Speaker 0>m dot.

01:09:30.770 --> 01:09:32.130
<v Speaker 0>And I run this. You'll see the output

01:09:32.130 --> 01:09:32.930
<v Speaker 0>is different

01:09:33.314 --> 01:09:35.795
<v Speaker 0>than what you would normally expect. And that's

01:09:35.795 --> 01:09:38.194
<v Speaker 0>as parallel. So what that means is it

01:09:38.194 --> 01:09:41.395
<v Speaker 0>creates a a bag, a graph of all

01:09:41.395 --> 01:09:43.234
<v Speaker 0>these steps. And if there are steps that

01:09:43.234 --> 01:09:45.074
<v Speaker 0>do not have any dependents on each other,

01:09:45.600 --> 01:09:47.359
<v Speaker 0>they all run on their own core

01:09:47.840 --> 01:09:48.800
<v Speaker 0>and parallel

01:09:49.279 --> 01:09:50.479
<v Speaker 0>as quite fast.

01:09:51.920 --> 01:09:53.439
<v Speaker 0>Once you build the image, this is why

01:09:53.439 --> 01:09:55.199
<v Speaker 0>the unit tests are okay here because we're

01:09:55.199 --> 01:09:56.639
<v Speaker 0>just running them to confirm that the image

01:09:56.639 --> 01:09:59.375
<v Speaker 0>that we're building, it's almost gonna work. You

01:09:59.375 --> 01:10:01.135
<v Speaker 0>know, we've done some testing on it. And

01:10:01.135 --> 01:10:03.295
<v Speaker 0>then you could parallelize integration tests however you

01:10:03.295 --> 01:10:03.855
<v Speaker 0>want.

01:10:04.255 --> 01:10:06.974
<v Speaker 0>Whether that be through multiple containers or

01:10:07.135 --> 01:10:09.215
<v Speaker 0>given a container access to multiple cores and

01:10:09.215 --> 01:10:11.455
<v Speaker 0>then that we have the internal workings of

01:10:11.455 --> 01:10:14.850
<v Speaker 0>it. Like, whatever that is, it's fine. It

01:10:15.490 --> 01:10:17.170
<v Speaker 2>depends what kind of integration tests we're talking

01:10:17.170 --> 01:10:18.610
<v Speaker 2>about as well. Because if you're talking about

01:10:18.610 --> 01:10:20.850
<v Speaker 2>integration tests that are testing a module inside

01:10:20.850 --> 01:10:22.210
<v Speaker 2>your PHP application,

01:10:22.290 --> 01:10:23.890
<v Speaker 2>you can still run them pretty quickly as

01:10:23.890 --> 01:10:24.930
<v Speaker 2>part of this build.

01:10:25.330 --> 01:10:27.170
<v Speaker 2>The ones that are normally slow are the

01:10:27.170 --> 01:10:28.690
<v Speaker 2>ones that are depending on IO,

01:10:30.355 --> 01:10:31.795
<v Speaker 2>and they're the ones that will need other

01:10:31.795 --> 01:10:33.635
<v Speaker 2>containers involved to to to run the test.

01:10:33.635 --> 01:10:35.155
<v Speaker 2>So they're the ones you'd be testing afterwards

01:10:35.155 --> 01:10:37.955
<v Speaker 2>after the build. You know, running any tests

01:10:37.955 --> 01:10:39.795
<v Speaker 2>that need a database because you have to

01:10:39.795 --> 01:10:42.114
<v Speaker 2>have your image and your and your database.

01:10:44.389 --> 01:10:45.030
<v Speaker 2>Exactly.

01:10:47.270 --> 01:10:49.590
<v Speaker 0>Alright. Let's fix this build step, deploy it

01:10:49.590 --> 01:10:52.469
<v Speaker 0>to Kubernetes, and we'll call Pang CRM finished.

01:10:53.110 --> 01:10:54.310
<v Speaker 0>We are done with ping.

01:10:54.945 --> 01:10:56.625
<v Speaker 2>David, is there any sensible way of running

01:10:56.625 --> 01:10:58.465
<v Speaker 2>build kit with Docker compose yet?

01:10:59.905 --> 01:11:03.344
<v Speaker 0>Yes. You just have to expose that environment

01:11:03.344 --> 01:11:05.505
<v Speaker 0>variable, which is actually what I've got. So

01:11:05.505 --> 01:11:07.585
<v Speaker 0>if I do a ENV

01:11:07.310 --> 01:11:08.030
<v Speaker 0>grab

01:11:08.270 --> 01:11:09.150
<v Speaker 0>build

01:11:09.150 --> 01:11:09.790
<v Speaker 0>kit.

01:11:10.590 --> 01:11:12.190
<v Speaker 0>If you just set this in your shell

01:11:12.190 --> 01:11:14.510
<v Speaker 0>environment, when you do a Docker compose build,

01:11:14.510 --> 01:11:16.190
<v Speaker 0>you actually do use build kit.

01:11:20.030 --> 01:11:20.750
<v Speaker 0>No?

01:11:21.070 --> 01:11:22.350
<v Speaker 2>It doesn't look like build kit.

01:11:24.185 --> 01:11:25.785
<v Speaker 2>I don't think you do. Oh, no. That

01:11:25.785 --> 01:11:26.824
<v Speaker 0>was the old step.

01:11:27.705 --> 01:11:29.305
<v Speaker 2>So I think in your CR, you might

01:11:29.305 --> 01:11:30.744
<v Speaker 2>not be using Docker Compose,

01:11:31.145 --> 01:11:33.304
<v Speaker 2>which is fine. And you'll get that password.

01:11:34.425 --> 01:11:35.225
<v Speaker 2>I we got it.

01:11:35.705 --> 01:11:37.465
<v Speaker 2>That's a nice way of running build kit.

01:11:40.000 --> 01:11:41.519
<v Speaker 0>Feel very disappointed.

01:11:41.600 --> 01:11:42.640
<v Speaker 2>You can manually do

01:11:45.040 --> 01:11:47.039
<v Speaker 0>oh, woah. Ah, there we go.

01:11:48.640 --> 01:11:51.280
<v Speaker 2>So oh, because Docker Compose doesn't depend on

01:11:51.280 --> 01:11:52.880
<v Speaker 2>Docker

01:11:52.364 --> 01:11:53.244
<v Speaker 2>CLI,

01:11:53.244 --> 01:11:54.044
<v Speaker 2>I don't think.

01:11:55.724 --> 01:11:56.604
<v Speaker 0>There you go.

01:11:57.724 --> 01:11:58.364
<v Speaker 2>Docker

01:11:58.525 --> 01:12:00.284
<v Speaker 2>Compose needs the daemon.

01:12:01.644 --> 01:12:03.164
<v Speaker 2>But I don't think it needs the Docker

01:12:03.164 --> 01:12:04.284
<v Speaker 2>CLI, and this

01:12:04.684 --> 01:12:06.525
<v Speaker 2>fails out and uses the Docker CLI.

01:12:08.860 --> 01:12:11.179
<v Speaker 0>Either that or docker post has a build

01:12:11.179 --> 01:12:12.699
<v Speaker 0>kit baked into it. But, I mean, build

01:12:12.699 --> 01:12:15.099
<v Speaker 0>kit is just a library that docker uses

01:12:15.340 --> 01:12:17.020
<v Speaker 0>when you do a docker image builds. Compose

01:12:17.020 --> 01:12:18.460
<v Speaker 0>is probably using the same library and it

01:12:18.460 --> 01:12:20.459
<v Speaker 0>it may not actually be using

01:12:20.860 --> 01:12:22.380
<v Speaker 2>The name of the docker daemon. I think

01:12:22.380 --> 01:12:24.125
<v Speaker 2>it's running the CI command.

01:12:25.565 --> 01:12:28.045
<v Speaker 0>Okay. So yeah. There you go. Compose. I

01:12:28.045 --> 01:12:30.525
<v Speaker 0>don't know that. That's cool. Compose Docker CLI.

01:12:30.525 --> 01:12:31.805
<v Speaker 0>I'm just gonna add that to my shell.

01:12:31.805 --> 01:12:33.485
<v Speaker 0>I always wanna use BuildKit now.

01:12:34.605 --> 01:12:37.165
<v Speaker 0>In fact, Leo already popped in. Hey.

01:12:41.980 --> 01:12:43.500
<v Speaker 0>Excuse me. Alright.

01:12:45.340 --> 01:12:47.500
<v Speaker 0>Let's separate this out.

01:12:49.260 --> 01:12:50.860
<v Speaker 0>What we're gonna do is

01:12:51.100 --> 01:12:53.874
<v Speaker 0>I know the naming here is terrible,

01:12:54.114 --> 01:12:55.394
<v Speaker 0>but I

01:12:57.955 --> 01:13:00.195
<v Speaker 0>mean, we we we've already worked out that

01:13:00.195 --> 01:13:02.435
<v Speaker 0>we need everything, right, to do the compose

01:13:02.435 --> 01:13:04.275
<v Speaker 0>or auto loader stuff. So

01:13:06.290 --> 01:13:08.449
<v Speaker 0>gonna do this in its own step.

01:13:11.650 --> 01:13:12.369
<v Speaker 0>Yeah.

01:13:13.650 --> 01:13:16.450
<v Speaker 0>Sorry. And oh, yep. Sorry. I made the

01:13:16.450 --> 01:13:16.850
<v Speaker 0>wrong one.

01:13:17.645 --> 01:13:19.805
<v Speaker 0>And then down here, we saw what that

01:13:19.805 --> 01:13:22.045
<v Speaker 0>worked there. We can do from

01:13:24.125 --> 01:13:25.005
<v Speaker 0>and

01:13:25.485 --> 01:13:26.045
<v Speaker 0>from

01:13:27.965 --> 01:13:32.125
<v Speaker 0>build FPM composer, and we're gonna copy everything

01:13:33.600 --> 01:13:35.040
<v Speaker 0>to the same location.

01:13:35.840 --> 01:13:37.280
<v Speaker 0>The only reason we're adding on this extra

01:13:37.280 --> 01:13:39.520
<v Speaker 0>step is just so that composer doesn't make

01:13:39.520 --> 01:13:41.040
<v Speaker 0>its way into this image when we ship

01:13:41.040 --> 01:13:43.360
<v Speaker 0>it to production. So just it removes an

01:13:43.360 --> 01:13:44.640
<v Speaker 0>attack vector, essentially.

01:13:45.840 --> 01:13:47.440
<v Speaker 0>Then our tests run.

01:13:49.095 --> 01:13:51.255
<v Speaker 0>In fact, our APM does this here.

01:13:53.175 --> 01:13:54.855
<v Speaker 0>We already have that step.

01:13:57.095 --> 01:13:59.415
<v Speaker 0>We've done here, but then we've got our

01:13:59.415 --> 01:14:00.135
<v Speaker 0>test here.

01:14:00.535 --> 01:14:01.735
<v Speaker 0>Getting so confused.

01:14:02.455 --> 01:14:04.135
<v Speaker 0>We don't need this step, so that can

01:14:04.135 --> 01:14:04.535
<v Speaker 0>go away.

01:14:05.869 --> 01:14:07.630
<v Speaker 0>And we ship our build FBM.

01:14:09.469 --> 01:14:10.989
<v Speaker 0>So we can build this and deploy that

01:14:10.989 --> 01:14:13.229
<v Speaker 0>to Kubernetes now. So let's just do that.

01:14:14.590 --> 01:14:16.270
<v Speaker 2>The slight annoyance is that it means that

01:14:16.270 --> 01:14:18.270
<v Speaker 2>it's gonna read the composer step's gonna rebuild

01:14:18.270 --> 01:14:19.469
<v Speaker 2>every time we touch a file.

01:14:21.105 --> 01:14:21.825
<v Speaker 2>Like,

01:14:22.145 --> 01:14:23.425
<v Speaker 2>it's nice to do it'd be nice to

01:14:23.425 --> 01:14:25.025
<v Speaker 2>do that two step thing if

01:14:25.265 --> 01:14:26.465
<v Speaker 2>you depend on

01:14:28.785 --> 01:14:30.865
<v Speaker 2>I guess as this is for prod,

01:14:30.945 --> 01:14:32.465
<v Speaker 2>we don't care as much. Is that right?

01:14:35.360 --> 01:14:37.120
<v Speaker 0>Maybe it's I I guess it would it's

01:14:37.120 --> 01:14:38.880
<v Speaker 0>still be nice to use the build cache.

01:14:38.880 --> 01:14:40.320
<v Speaker 0>I mean, there are you know, you can

01:14:40.320 --> 01:14:42.560
<v Speaker 0>do a cache from on a Docker CLI

01:14:42.560 --> 01:14:44.639
<v Speaker 0>to reuse a cache from a previous build.

01:14:44.800 --> 01:14:46.320
<v Speaker 0>So let's try and make that work. So

01:14:46.320 --> 01:14:48.400
<v Speaker 0>we can just say copy composer dot JSON.

01:14:49.425 --> 01:14:51.745
<v Speaker 0>It's closer dot JSON. We'll do the initial

01:14:51.745 --> 01:14:54.304
<v Speaker 0>composer install. Then we'll copy everything.

01:14:55.585 --> 01:14:56.545
<v Speaker 0>And then

01:14:58.865 --> 01:15:00.465
<v Speaker 0>we'll dump the auto loader. Let's see if

01:15:00.465 --> 01:15:01.505
<v Speaker 0>that works. So

01:15:02.310 --> 01:15:04.070
<v Speaker 0>and the thing that could go wrong here

01:15:04.070 --> 01:15:07.830
<v Speaker 0>is that this copies over our vendor directory.

01:15:08.630 --> 01:15:09.990
<v Speaker 0>But we might be okay because it should

01:15:09.990 --> 01:15:11.910
<v Speaker 0>do a merge in a Dockerfile copy rather

01:15:11.910 --> 01:15:12.949
<v Speaker 0>than a replace.

01:15:13.270 --> 01:15:13.590
<v Speaker 0>So

01:15:14.785 --> 01:15:18.225
<v Speaker 0>docker image build, we call this PHP prod

01:15:18.225 --> 01:15:20.704
<v Speaker 0>target or build FPM

01:15:20.945 --> 01:15:21.824
<v Speaker 0>angle.

01:15:22.465 --> 01:15:23.824
<v Speaker 0>Kinda where we are right now.

01:15:24.225 --> 01:15:25.665
<v Speaker 0>What we should see now the first time

01:15:25.665 --> 01:15:27.425
<v Speaker 0>is the docker compose install will take a

01:15:27.425 --> 01:15:28.065
<v Speaker 0>little bit of time.

01:15:28.980 --> 01:15:30.579
<v Speaker 0>If we rerun that again,

01:15:31.140 --> 01:15:32.340
<v Speaker 0>it should work.

01:15:34.260 --> 01:15:36.340
<v Speaker 0>Yep. And the with a very good comment

01:15:36.340 --> 01:15:36.980
<v Speaker 0>there.

01:15:38.100 --> 01:15:39.619
<v Speaker 0>Because I didn't change

01:15:39.700 --> 01:15:41.700
<v Speaker 0>I didn't change ownerships of the fail, and

01:15:41.700 --> 01:15:43.380
<v Speaker 0>I do have this all running as root.

01:15:43.515 --> 01:15:45.275
<v Speaker 0>So we'll we'll bring that in once we

01:15:45.275 --> 01:15:46.315
<v Speaker 0>confirm it works.

01:15:51.995 --> 01:15:54.635
<v Speaker 0>I should have maybe pulled in composer too.

01:15:56.475 --> 01:15:57.595
<v Speaker 0>Get the speed improvements.

01:15:58.290 --> 01:15:59.809
<v Speaker 2>There's a pull request on there at the

01:15:59.809 --> 01:16:03.249
<v Speaker 2>moment that offers another massive speed improvement.

01:16:03.650 --> 01:16:04.449
<v Speaker 0>Oh, really?

01:16:04.690 --> 01:16:06.690
<v Speaker 0>On addition to what they already optimized for

01:16:06.690 --> 01:16:09.170
<v Speaker 0>composer two? Yeah. It's not merged yet, but

01:16:09.170 --> 01:16:10.050
<v Speaker 2>it's

01:16:10.545 --> 01:16:12.545
<v Speaker 2>somehow in the solver eliminates

01:16:12.545 --> 01:16:14.704
<v Speaker 2>loads of the nonworking

01:16:16.225 --> 01:16:18.625
<v Speaker 2>root combinations to check. So they're seeing, like,

01:16:18.625 --> 01:16:21.025
<v Speaker 2>ten seconds going to four seconds. I

01:16:21.824 --> 01:16:23.344
<v Speaker 0>think Leo was trying to push my buttons

01:16:23.344 --> 01:16:23.745
<v Speaker 0>today.

01:16:25.780 --> 01:16:27.860
<v Speaker 0>Make sure you copy the composer dot lock

01:16:27.860 --> 01:16:28.820
<v Speaker 0>as well. Mhmm.

01:16:29.860 --> 01:16:30.420
<v Speaker 0>No.

01:16:31.540 --> 01:16:33.620
<v Speaker 0>I mean, I think I've ranted about this

01:16:33.620 --> 01:16:35.700
<v Speaker 0>in every episode so far in the series.

01:16:36.815 --> 01:16:39.534
<v Speaker 0>I we don't need a lock file. Docker

01:16:39.534 --> 01:16:42.175
<v Speaker 0>is our idempotency. Docker is our auditability. Everything

01:16:42.175 --> 01:16:43.934
<v Speaker 0>that we need to know is is there.

01:16:44.094 --> 01:16:44.494
<v Speaker 0>Lock

01:16:45.295 --> 01:16:47.135
<v Speaker 0>files, I would argue, should only be used

01:16:47.135 --> 01:16:49.054
<v Speaker 0>on a non container based deployment,

01:16:49.215 --> 01:16:50.570
<v Speaker 0>which means you also don't commit a lock

01:16:50.570 --> 01:16:51.530
<v Speaker 0>file into git.

01:16:51.929 --> 01:16:53.849
<v Speaker 0>I'm not gonna rant about it again, but

01:16:53.849 --> 01:16:56.329
<v Speaker 0>maybe we should maybe I'll organize

01:16:56.570 --> 01:16:58.170
<v Speaker 0>a bigger conversation

01:16:58.170 --> 01:17:00.969
<v Speaker 0>around lock files and container workloads in the

01:17:00.969 --> 01:17:01.530
<v Speaker 0>future.

01:17:02.329 --> 01:17:03.925
<v Speaker 2>I think what we said was if you

01:17:03.925 --> 01:17:06.165
<v Speaker 2>know that that exact version that's been tested

01:17:06.165 --> 01:17:07.605
<v Speaker 2>is going to production, you don't need to

01:17:07.605 --> 01:17:08.485
<v Speaker 2>connect the lock.

01:17:10.325 --> 01:17:11.765
<v Speaker 0>Well, the lock fail is giving you a

01:17:11.765 --> 01:17:13.525
<v Speaker 0>guarantee that if I do a composer install,

01:17:13.525 --> 01:17:15.285
<v Speaker 0>again, I get the same dependencies. When I

01:17:15.285 --> 01:17:17.045
<v Speaker 0>build on a container, I don't need that

01:17:17.045 --> 01:17:17.925
<v Speaker 0>semantic anymore.

01:17:19.020 --> 01:17:21.340
<v Speaker 0>So all you're really doing is restructuring your

01:17:21.980 --> 01:17:24.139
<v Speaker 0>you're making that very explicit operation to update

01:17:24.139 --> 01:17:26.300
<v Speaker 0>your dependencies. Whereas in a container based workflow

01:17:26.300 --> 01:17:28.379
<v Speaker 0>with good continuous integration and tests,

01:17:28.619 --> 01:17:30.699
<v Speaker 0>I always wanna opt in to those security

01:17:30.699 --> 01:17:32.780
<v Speaker 0>updates and updates to my packages in general.

01:17:32.780 --> 01:17:35.085
<v Speaker 0>So I would never, I personally never commit

01:17:35.085 --> 01:17:37.165
<v Speaker 0>a log file of container based development.

01:17:37.485 --> 01:17:39.885
<v Speaker 2>That's an argument for not putting the log

01:17:39.885 --> 01:17:43.085
<v Speaker 2>files the log files in your container.

01:17:43.965 --> 01:17:46.685
<v Speaker 0>And in git. That's not an argument for

01:17:47.940 --> 01:17:49.140
<v Speaker 2>omitting them in git.

01:17:49.380 --> 01:17:50.020
<v Speaker 2>Why?

01:17:50.820 --> 01:17:53.460
<v Speaker 2>Because putting them in git guarantees other things

01:17:53.460 --> 01:17:55.220
<v Speaker 2>that aren't to do with production. Things like

01:17:55.220 --> 01:17:56.740
<v Speaker 2>all the developers are working off the same

01:17:56.740 --> 01:17:57.700
<v Speaker 2>set of dependency.

01:17:58.420 --> 01:17:59.940
<v Speaker 0>But I want a developer to get those

01:17:59.940 --> 01:18:01.700
<v Speaker 0>updates just as quickly as my production image

01:18:01.700 --> 01:18:03.835
<v Speaker 0>so they can actually notice the errors locally

01:18:03.835 --> 01:18:05.675
<v Speaker 0>before it gets to production.

01:18:06.795 --> 01:18:08.474
<v Speaker 0>I mean, you should always be using the

01:18:08.474 --> 01:18:10.795
<v Speaker 0>latest and greatest versions within semantic reasoning, of

01:18:10.795 --> 01:18:12.235
<v Speaker 0>course. Like, you're not gonna go and upgrade

01:18:12.235 --> 01:18:14.395
<v Speaker 0>from three to four. But I always wanna

01:18:14.395 --> 01:18:15.355
<v Speaker 0>get patch updates

01:18:15.740 --> 01:18:17.660
<v Speaker 0>and minor updates in my in my code

01:18:17.660 --> 01:18:19.820
<v Speaker 0>as fast as possible. That way, it's not

01:18:19.820 --> 01:18:21.980
<v Speaker 0>this horrible ceremony. It's all we're gonna update

01:18:21.980 --> 01:18:23.660
<v Speaker 0>the packages. That's the first of the quarter

01:18:23.660 --> 01:18:25.660
<v Speaker 0>or whatever. And you have this whole thing

01:18:25.660 --> 01:18:27.340
<v Speaker 0>where we do it and then check for

01:18:27.500 --> 01:18:29.340
<v Speaker 0>run our tests and check for bugs and,

01:18:29.340 --> 01:18:31.345
<v Speaker 0>like, really, you just wanna do this often

01:18:31.345 --> 01:18:33.105
<v Speaker 0>as frequently as possible and get that feedback

01:18:33.105 --> 01:18:35.425
<v Speaker 0>loop as tight as you can. So does

01:18:35.425 --> 01:18:36.945
<v Speaker 2>that mean in your compose JSON and your

01:18:36.945 --> 01:18:39.345
<v Speaker 2>packages JSON, you've got just star as the

01:18:39.345 --> 01:18:40.065
<v Speaker 2>constraint?

01:18:40.225 --> 01:18:42.065
<v Speaker 0>No. I still use semantic version. I still

01:18:42.065 --> 01:18:44.080
<v Speaker 0>say get me two dot x. I just

01:18:44.240 --> 01:18:46.320
<v Speaker 0>I'm never gonna do a backwards compatibility major

01:18:46.320 --> 01:18:49.120
<v Speaker 0>update. I will do minors and patches automatically

01:18:49.120 --> 01:18:49.840
<v Speaker 0>though.

01:18:51.440 --> 01:18:54.800
<v Speaker 0>So our composer auto rules are failed because

01:18:55.200 --> 01:18:57.985
<v Speaker 0>there's nothing in the database seats.

01:19:01.185 --> 01:19:03.585
<v Speaker 0>Oh, okay. Now I remember. The the problem

01:19:03.585 --> 01:19:05.185
<v Speaker 0>was this is doing an auto loader by

01:19:05.185 --> 01:19:06.465
<v Speaker 0>default, wasn't it?

01:19:07.585 --> 01:19:08.945
<v Speaker 0>It was actually configured.

01:19:12.120 --> 01:19:13.479
<v Speaker 2>You're looking at one place.

01:19:16.840 --> 01:19:18.840
<v Speaker 2>Close it, Jason. Yeah.

01:19:23.000 --> 01:19:24.840
<v Speaker 0>And we changed it to false.

01:19:25.080 --> 01:19:26.199
<v Speaker 0>It was true.

01:19:28.285 --> 01:19:30.525
<v Speaker 2>That was failing for when we wanted we

01:19:30.525 --> 01:19:32.365
<v Speaker 2>were trying to build just the vendor folder

01:19:32.365 --> 01:19:33.085
<v Speaker 2>first.

01:19:34.605 --> 01:19:35.885
<v Speaker 2>Then then

01:19:36.365 --> 01:19:38.285
<v Speaker 2>oh, it's just annoying, isn't it? This is

01:19:38.285 --> 01:19:40.125
<v Speaker 2>when we were sort of using the container

01:19:40.125 --> 01:19:41.485
<v Speaker 2>for dev as well, was it?

01:19:45.900 --> 01:19:47.820
<v Speaker 0>Hold on. I can't remember what command. So

01:19:47.820 --> 01:19:49.740
<v Speaker 0>this is just running the install without the

01:19:49.740 --> 01:19:51.020
<v Speaker 0>dump bottle loader.

01:19:51.260 --> 01:19:51.980
<v Speaker 2>Mhmm.

01:19:53.180 --> 01:19:54.940
<v Speaker 0>And install needs

01:19:54.940 --> 01:19:55.820
<v Speaker 0>other things.

01:19:57.075 --> 01:19:59.075
<v Speaker 0>I I'm not gonna fight that because we're

01:19:59.075 --> 01:20:00.994
<v Speaker 0>almost at the end of our session. So

01:20:01.635 --> 01:20:04.195
<v Speaker 0>we will go back to copy the world.

01:20:07.315 --> 01:20:09.235
<v Speaker 0>And we should we can always do no

01:20:09.235 --> 01:20:11.395
<v Speaker 0>scripts. Right? Let's do no scripts. Let's make

01:20:11.395 --> 01:20:12.275
<v Speaker 0>this work properly.

01:20:12.740 --> 01:20:15.460
<v Speaker 2>It's because, like, some post install hooks, but

01:20:15.460 --> 01:20:17.300
<v Speaker 2>then expect us to be there.

01:20:18.020 --> 01:20:19.620
<v Speaker 0>I can't remember the flag. Is it just

01:20:19.620 --> 01:20:20.100
<v Speaker 0>that?

01:20:20.660 --> 01:20:21.860
<v Speaker 2>Yeah. Yeah.

01:20:22.420 --> 01:20:24.180
<v Speaker 0>K. But we want all we wanna do

01:20:24.180 --> 01:20:26.660
<v Speaker 0>is take the capabilities on, download our dependencies,

01:20:26.715 --> 01:20:28.474
<v Speaker 0>and don't do anything else. Everything else will

01:20:28.474 --> 01:20:29.835
<v Speaker 0>happen in the dump hot loader. Or do

01:20:29.835 --> 01:20:31.435
<v Speaker 0>I need to do another install to get

01:20:31.435 --> 01:20:32.635
<v Speaker 0>those scripts to run?

01:20:34.235 --> 01:20:35.435
<v Speaker 2>Oh, it's like for

01:20:38.155 --> 01:20:40.955
<v Speaker 0>Well, let's rebuild that again. The no scripts

01:20:40.955 --> 01:20:43.380
<v Speaker 0>should stop the

01:20:44.180 --> 01:20:46.820
<v Speaker 0>the database seed stuff from triggering. We will

01:20:46.820 --> 01:20:48.420
<v Speaker 0>want that to happen slightly. We want that

01:20:48.420 --> 01:20:49.620
<v Speaker 0>to happen when we bring in the rest

01:20:49.620 --> 01:20:51.140
<v Speaker 0>of the code so we can leverage to

01:20:51.140 --> 01:20:53.540
<v Speaker 0>build cache. So again, unfortunately, this will take

01:20:53.540 --> 01:20:54.580
<v Speaker 0>a few minutes.

01:20:54.900 --> 01:20:55.940
<v Speaker 0>But I should be able to run this

01:20:55.940 --> 01:20:58.255
<v Speaker 0>again when it is complete, and we should

01:20:58.255 --> 01:21:00.735
<v Speaker 0>see the cache used for the dependencies.

01:21:00.815 --> 01:21:02.095
<v Speaker 0>The nice thing about that is when I

01:21:02.095 --> 01:21:04.015
<v Speaker 0>ship a production image to a container registry

01:21:04.015 --> 01:21:06.655
<v Speaker 0>somewhere, I can use the previous build as

01:21:06.655 --> 01:21:07.695
<v Speaker 0>a cache from

01:21:07.935 --> 01:21:10.015
<v Speaker 0>that if the composite dot json hasn't changed,

01:21:10.640 --> 01:21:12.480
<v Speaker 0>that wouldn't rerun that step. Even if the

01:21:12.480 --> 01:21:14.000
<v Speaker 0>local build agent is not aware of that

01:21:14.000 --> 01:21:16.159
<v Speaker 0>cache, which is really nice. I like it.

01:21:18.000 --> 01:21:18.639
<v Speaker 0>Cool.

01:21:19.920 --> 01:21:21.920
<v Speaker 0>Now we just need to kill another minute

01:21:21.920 --> 01:21:23.360
<v Speaker 0>and a half while that runs.

01:21:23.840 --> 01:21:25.680
<v Speaker 2>What would speed up your

01:21:26.645 --> 01:21:27.684
<v Speaker 0>Sorry, Kevin?

01:21:27.925 --> 01:21:29.205
<v Speaker 2>What do you add the step that makes

01:21:29.205 --> 01:21:30.324
<v Speaker 2>it Composer two?

01:21:31.765 --> 01:21:34.724
<v Speaker 0>Is there a an image for Composer two?

01:21:34.725 --> 01:21:36.725
<v Speaker 2>It composes self update. Oh, there might be

01:21:36.725 --> 01:21:38.420
<v Speaker 2>an image by now. They want some sort

01:21:38.420 --> 01:21:39.140
<v Speaker 2>of alpha.

01:21:41.060 --> 01:21:42.660
<v Speaker 2>There's a self update command you can do

01:21:42.660 --> 01:21:45.700
<v Speaker 2>that pushes it. Oh, there is. Okay. Yeah.

01:21:45.700 --> 01:21:47.620
<v Speaker 0>We'll we'll use Composer two then

01:21:48.740 --> 01:21:50.500
<v Speaker 0>once I've shown that the cache works.

01:21:53.045 --> 01:21:55.044
<v Speaker 2>So cache form lets you cache

01:21:55.605 --> 01:21:57.445
<v Speaker 2>from a another remote

01:21:57.525 --> 01:21:58.084
<v Speaker 2>image?

01:21:58.485 --> 01:21:59.604
<v Speaker 2>How does it work?

01:22:01.125 --> 01:22:03.445
<v Speaker 0>Yes. So I will answer that. I will

01:22:03.445 --> 01:22:04.965
<v Speaker 0>also point out Leo's question.

01:22:05.860 --> 01:22:07.860
<v Speaker 0>You are right. We discovered that in the

01:22:07.860 --> 01:22:10.100
<v Speaker 0>last session that the no loader

01:22:10.340 --> 01:22:12.020
<v Speaker 0>is on by default, but we actually did

01:22:12.020 --> 01:22:14.420
<v Speaker 0>disable it in the composer dot JSON.

01:22:16.660 --> 01:22:17.460
<v Speaker 0>Tada.

01:22:17.780 --> 01:22:19.220
<v Speaker 0>Because it did it did annoy me. I

01:22:19.220 --> 01:22:19.940
<v Speaker 0>did get frustrated.

01:22:22.115 --> 01:22:24.195
<v Speaker 2>That that's to say it was optimization. It

01:22:24.195 --> 01:22:26.515
<v Speaker 2>might still dump auto loads dot PHP.

01:22:27.555 --> 01:22:29.155
<v Speaker 2>So it might still do some work to

01:22:29.155 --> 01:22:31.315
<v Speaker 2>make the auto load, and then we'll we're

01:22:31.315 --> 01:22:33.715
<v Speaker 2>gonna have interview and optimize the

01:22:35.599 --> 01:22:37.919
<v Speaker 2>We're upload PHP files. Right?

01:22:39.760 --> 01:22:41.040
<v Speaker 0>Okay.

01:22:41.040 --> 01:22:43.199
<v Speaker 0>I guess we're gonna find out in a

01:22:43.199 --> 01:22:43.760
<v Speaker 0>moment.

01:22:44.639 --> 01:22:46.480
<v Speaker 0>And if that is gonna fail, we're definitely

01:22:46.480 --> 01:22:48.239
<v Speaker 0>gonna want composer too. So

01:22:49.985 --> 01:22:51.585
<v Speaker 0>spring that in.

01:22:57.985 --> 01:23:00.145
<v Speaker 0>Yeah. It's generating a load fail.

01:23:00.385 --> 01:23:01.105
<v Speaker 0>Damn you.

01:23:03.780 --> 01:23:06.099
<v Speaker 0>Okay. So what we're actually saying here is

01:23:06.099 --> 01:23:08.739
<v Speaker 0>we we want no auto load. We'll do

01:23:08.739 --> 01:23:11.540
<v Speaker 0>it explicitly on our own step. There's no

01:23:11.540 --> 01:23:12.739
<v Speaker 2>auto loader.

01:23:14.500 --> 01:23:16.019
<v Speaker 0>Never. Whatever.

01:23:16.500 --> 01:23:18.659
<v Speaker 0>Last time. I'm not running this command again.

01:23:19.065 --> 01:23:20.425
<v Speaker 2>This should be quick.

01:23:22.905 --> 01:23:24.344
<v Speaker 1>Is it not colon two?

01:23:25.145 --> 01:23:26.824
<v Speaker 0>Yes. It is. Thank you.

01:23:28.505 --> 01:23:30.185
<v Speaker 1>Oh, well, it's That's the last time I'm

01:23:30.185 --> 01:23:31.625
<v Speaker 0>running it. I'm not running it again again.

01:23:32.090 --> 01:23:34.010
<v Speaker 1>Okay. Right. Cool. No worries. That's the cool

01:23:34.010 --> 01:23:36.090
<v Speaker 2>comparison. But we did it quick on the

01:23:36.090 --> 01:23:36.809
<v Speaker 2>install.

01:23:40.010 --> 01:23:42.090
<v Speaker 0>Oh, and the output's different too. The composer

01:23:42.090 --> 01:23:43.929
<v Speaker 0>too. I know we got some parallelism going

01:23:43.929 --> 01:23:44.329
<v Speaker 0>on there.

01:23:47.085 --> 01:23:50.125
<v Speaker 1>That is do you actually built into plugins

01:23:50.125 --> 01:23:52.365
<v Speaker 1>for composer to make it work parallel? Is

01:23:52.365 --> 01:23:54.045
<v Speaker 1>that built into composer too now then, I

01:23:54.045 --> 01:23:54.525
<v Speaker 1>guess?

01:23:55.085 --> 01:23:57.725
<v Speaker 2>It's got faster so solver in parallel downloads.

01:23:58.890 --> 01:24:01.770
<v Speaker 0>It's it's much faster. I think.

01:24:02.410 --> 01:24:04.810
<v Speaker 2>Yeah. Yeah. You're right. Just this one, whichever

01:24:04.810 --> 01:24:06.170
<v Speaker 2>one has in their Docker files.

01:24:06.650 --> 01:24:08.730
<v Speaker 0>Okay. So what's important here

01:24:09.050 --> 01:24:10.890
<v Speaker 0>is we got past the composer install.

01:24:11.435 --> 01:24:13.275
<v Speaker 0>We're now in step six of seven, which

01:24:13.275 --> 01:24:14.715
<v Speaker 0>failed because of a flag.

01:24:15.035 --> 01:24:16.795
<v Speaker 0>The good news is I should be able

01:24:16.795 --> 01:24:18.555
<v Speaker 0>to run that, and it should resume from

01:24:18.555 --> 01:24:19.835
<v Speaker 0>step seven of seven.

01:24:22.795 --> 01:24:23.755
<v Speaker 0>That's cached. Perfect.

01:24:24.320 --> 01:24:26.560
<v Speaker 0>See? I love it when stuff works.

01:24:27.280 --> 01:24:29.440
<v Speaker 0>I mean, I have a production Docker image.

01:24:29.600 --> 01:24:30.960
<v Speaker 1>And now if you were to change a

01:24:30.960 --> 01:24:33.360
<v Speaker 1>PHP but not a composite dependency, does it

01:24:33.360 --> 01:24:34.560
<v Speaker 1>use the same cache?

01:24:35.680 --> 01:24:38.000
<v Speaker 0>Yes. It will. So if I change

01:24:39.135 --> 01:24:41.855
<v Speaker 0>where's the where's the PHP code app? Right.

01:24:41.855 --> 01:24:43.375
<v Speaker 0>Let's

01:24:43.375 --> 01:24:45.054
<v Speaker 0>change kernel dot PHP.

01:24:45.775 --> 01:24:47.054
<v Speaker 0>I'll just say hello.

01:24:47.775 --> 01:24:50.095
<v Speaker 0>When we run this, our composer dot JSON

01:24:50.095 --> 01:24:51.775
<v Speaker 0>and composer installer should be cached.

01:24:54.090 --> 01:24:54.810
<v Speaker 0>Oh.

01:24:56.410 --> 01:24:58.250
<v Speaker 0>It's because you oh, why

01:24:58.490 --> 01:25:00.170
<v Speaker 0>is that copied? Oh, no. It it worked.

01:25:00.170 --> 01:25:00.650
<v Speaker 0>Yeah.

01:25:01.450 --> 01:25:02.890
<v Speaker 0>Yeah. That that was right.

01:25:03.290 --> 01:25:05.850
<v Speaker 1>But we want to do the composer install

01:25:05.850 --> 01:25:08.795
<v Speaker 1>stuff because nothing changed on composer's requirements. Yeah.

01:25:08.795 --> 01:25:11.994
<v Speaker 0>But it was cached. See? Composer composer install.

01:25:11.994 --> 01:25:14.235
<v Speaker 0>This is the second composer install that ran.

01:25:14.554 --> 01:25:15.435
<v Speaker 1>But do we want to

01:25:16.155 --> 01:25:17.675
<v Speaker 2>Well, we got a second one.

01:25:17.915 --> 01:25:20.554
<v Speaker 0>That's for the To trigger the To trigger

01:25:20.554 --> 01:25:21.034
<v Speaker 0>the scripts.

01:25:23.180 --> 01:25:25.500
<v Speaker 2>It was It did do its job. It

01:25:25.500 --> 01:25:26.699
<v Speaker 0>did use the cache.

01:25:26.860 --> 01:25:28.620
<v Speaker 2>But it did something. It did seven seconds

01:25:28.620 --> 01:25:29.420
<v Speaker 2>of stuff.

01:25:30.540 --> 01:25:32.219
<v Speaker 0>Oh, yeah. It still run the scripts.

01:25:33.900 --> 01:25:35.740
<v Speaker 0>It didn't it didn't fetch the dependencies.

01:25:36.705 --> 01:25:38.945
<v Speaker 2>Do do that again. There's a progress bar.

01:25:40.625 --> 01:25:44.145
<v Speaker 0>Hello too. Right? Well, the output format.

01:25:45.585 --> 01:25:47.105
<v Speaker 2>Oh, it's downloading stuff.

01:25:48.145 --> 01:25:49.825
<v Speaker 0>Alright. So how can I tell a composer

01:25:49.825 --> 01:25:50.705
<v Speaker 0>to run

01:25:51.260 --> 01:25:53.180
<v Speaker 0>oh, that's the dev dependencies? Why is it

01:25:53.180 --> 01:25:54.460
<v Speaker 0>download in PHP unit?

01:25:56.460 --> 01:25:57.980
<v Speaker 1>Because you have a dash node dev. You

01:25:57.980 --> 01:25:59.580
<v Speaker 1>want double dash node dev on there.

01:26:00.140 --> 01:26:01.100
<v Speaker 0>I thought I did.

01:26:01.900 --> 01:26:02.780
<v Speaker 1>On both?

01:26:03.260 --> 01:26:04.060
<v Speaker 1>Oh, yeah.

01:26:05.505 --> 01:26:07.425
<v Speaker 0>Can I just run composer scripts?

01:26:11.985 --> 01:26:13.505
<v Speaker 0>Is there a way that I can just

01:26:13.505 --> 01:26:15.744
<v Speaker 0>check out the scripts without the install?

01:26:15.985 --> 01:26:18.385
<v Speaker 2>You can close the help without

01:26:18.625 --> 01:26:19.185
<v Speaker 2>dash dash.

01:26:22.000 --> 01:26:24.719
<v Speaker 0>Excuse me. You've got that one so many

01:26:24.719 --> 01:26:25.360
<v Speaker 1>times.

01:26:27.920 --> 01:26:28.960
<v Speaker 2>Oh, because it

01:26:30.080 --> 01:26:31.199
<v Speaker 0>That is Yeah. Okay. This.

01:26:34.395 --> 01:26:36.394
<v Speaker 0>Why does it not list subcommands?

01:26:37.994 --> 01:26:39.354
<v Speaker 2>To compose a list.

01:26:40.074 --> 01:26:42.715
<v Speaker 2>It says in there somewhere. Compose a list.

01:26:43.755 --> 01:26:44.794
<v Speaker 0>Okay.

01:26:44.954 --> 01:26:49.290
<v Speaker 0>Run script. Run what? Run run. Okay. Composer

01:26:49.290 --> 01:26:52.010
<v Speaker 0>run is what we want. So let's remove

01:26:52.010 --> 01:26:52.650
<v Speaker 0>that.

01:26:53.290 --> 01:26:55.289
<v Speaker 0>I don't know why it's fetching those

01:26:56.090 --> 01:26:57.130
<v Speaker 0>dependencies.

01:26:58.650 --> 01:26:59.210
<v Speaker 2>I know.

01:27:01.065 --> 01:27:02.425
<v Speaker 2>It's because we're doing copies

01:27:04.105 --> 01:27:06.025
<v Speaker 2>it's because we're doing copies copy everything, and

01:27:06.025 --> 01:27:07.705
<v Speaker 2>we're maybe can copying the compose a lot

01:27:07.705 --> 01:27:08.585
<v Speaker 2>from the host.

01:27:08.905 --> 01:27:10.665
<v Speaker 0>Well, you have to specify a script. It

01:27:10.665 --> 01:27:11.545
<v Speaker 0>doesn't run all scripts.

01:27:14.530 --> 01:27:16.450
<v Speaker 0>That that's fine. Let's leave that as That's

01:27:16.450 --> 01:27:17.730
<v Speaker 1>what you care about.

01:27:19.890 --> 01:27:23.170
<v Speaker 2>So, David, in Docker ignore, is Composer locked

01:27:23.170 --> 01:27:23.489
<v Speaker 2>there?

01:27:25.155 --> 01:27:27.635
<v Speaker 2>If it's not, then what's happening is composer

01:27:27.635 --> 01:27:29.635
<v Speaker 2>lock's been copied from your host machine.

01:27:30.995 --> 01:27:32.915
<v Speaker 2>In those steps, and that's why it's in

01:27:32.915 --> 01:27:34.275
<v Speaker 2>a different state when we do the second

01:27:34.275 --> 01:27:35.074
<v Speaker 2>install.

01:27:35.635 --> 01:27:36.514
<v Speaker 0>Gotcha.

01:27:36.675 --> 01:27:38.595
<v Speaker 0>So if we run this once,

01:27:43.620 --> 01:27:46.100
<v Speaker 0>we should get complete cache. Yep. And then

01:27:46.100 --> 01:27:47.940
<v Speaker 0>if I modify PHP again

01:27:54.075 --> 01:27:57.515
<v Speaker 0>There we go. Okay. Cool. So we got

01:27:57.515 --> 01:27:59.835
<v Speaker 0>a cache even even

01:27:59.835 --> 01:28:01.835
<v Speaker 0>though we modified PHP, we did not have

01:28:01.835 --> 01:28:02.715
<v Speaker 0>to actually

01:28:03.675 --> 01:28:05.675
<v Speaker 0>technically do a composer install again

01:28:06.410 --> 01:28:07.930
<v Speaker 0>Except for the one where we're running the

01:28:07.930 --> 01:28:09.850
<v Speaker 0>scripts. JSON file, I assume this will then

01:28:09.850 --> 01:28:11.530
<v Speaker 1>start downloading stuff.

01:28:12.010 --> 01:28:14.010
<v Speaker 0>If we modify composer dot JSON, it will

01:28:14.010 --> 01:28:15.850
<v Speaker 0>invalidate the cache, and it will refresh all

01:28:15.850 --> 01:28:17.130
<v Speaker 0>of the dependencies.

01:28:17.690 --> 01:28:20.034
<v Speaker 2>Even if it's just How do you compose

01:28:20.034 --> 01:28:22.514
<v Speaker 1>a cache for dependencies that were already downloaded?

01:28:24.275 --> 01:28:26.114
<v Speaker 0>It uses the image cache if it is

01:28:26.114 --> 01:28:26.834
<v Speaker 0>available.

01:28:27.635 --> 01:28:30.434
<v Speaker 0>So yes. Now, of course, I've I I'm

01:28:30.594 --> 01:28:32.434
<v Speaker 0>it depends on my CI system, but there

01:28:32.434 --> 01:28:33.635
<v Speaker 0>may be a I may wish to run

01:28:33.635 --> 01:28:36.010
<v Speaker 0>this without a cache. It's really common for

01:28:36.010 --> 01:28:37.369
<v Speaker 0>production builds at least.

01:28:38.330 --> 01:28:39.050
<v Speaker 0>The

01:28:40.090 --> 01:28:42.890
<v Speaker 0>okay. And actually four, so I complete rebuild

01:28:42.890 --> 01:28:45.449
<v Speaker 0>of everything. But composer itself comes with its

01:28:45.449 --> 01:28:47.050
<v Speaker 1>own cache as well. So if you've got

01:28:47.050 --> 01:28:49.050
<v Speaker 1>10 packages, nine of them are the exact

01:28:49.050 --> 01:28:52.065
<v Speaker 1>same version down to the patch version and

01:28:52.065 --> 01:28:53.745
<v Speaker 1>one was changed. It would only load it

01:28:53.745 --> 01:28:55.265
<v Speaker 1>would load them in from cache and then

01:28:55.265 --> 01:28:56.625
<v Speaker 1>download the new one. Not in the Docker

01:28:56.625 --> 01:28:58.304
<v Speaker 0>image build, that cache won't exist.

01:28:58.785 --> 01:28:59.425
<v Speaker 1>Right.

01:28:59.745 --> 01:29:00.945
<v Speaker 0>And it'll be there.

01:29:01.345 --> 01:29:03.905
<v Speaker 2>But if you're caching from a previous image,

01:29:03.985 --> 01:29:06.000
<v Speaker 2>that might happen. If you cache from a

01:29:06.000 --> 01:29:08.160
<v Speaker 0>previous image, then yes. It will have access

01:29:08.160 --> 01:29:09.600
<v Speaker 0>to some compulsory cache.

01:29:10.000 --> 01:29:11.520
<v Speaker 1>And if you had a

01:29:11.760 --> 01:29:14.720
<v Speaker 1>a named volume with it, then potentially use

01:29:14.720 --> 01:29:16.880
<v Speaker 0>volumes with the Docker image build. So that's

01:29:16.800 --> 01:29:18.080
<v Speaker 0>it's not it's not an option.

01:29:18.804 --> 01:29:21.524
<v Speaker 2>Yeah. Running this run time after the images.

01:29:21.925 --> 01:29:23.124
<v Speaker 2>So Right. Okay.

01:29:23.605 --> 01:29:24.244
<v Speaker 2>Okay.

01:29:26.244 --> 01:29:28.405
<v Speaker 2>And to make build secrets because someone mentioned

01:29:28.405 --> 01:29:29.364
<v Speaker 2>it in the chat.

01:29:31.684 --> 01:29:33.204
<v Speaker 0>Was there a question on secrets?

01:29:35.340 --> 01:29:38.780
<v Speaker 2>Someone just mentioned the dash dash SSH

01:29:38.780 --> 01:29:40.139
<v Speaker 2>option in build.

01:29:45.420 --> 01:29:47.260
<v Speaker 2>Okay. Do we have time to convince the

01:29:47.260 --> 01:29:47.980
<v Speaker 0>secrets today?

01:29:49.335 --> 01:29:51.574
<v Speaker 2>The short version is if you want to

01:29:51.975 --> 01:29:53.495
<v Speaker 2>we can open it up from a private

01:29:53.495 --> 01:29:55.015
<v Speaker 2>repo, you have to do some extra stuff

01:29:55.015 --> 01:29:56.935
<v Speaker 2>using, I think, a build secret. So it's

01:29:56.935 --> 01:29:58.295
<v Speaker 2>got your SSH keys.

01:30:00.375 --> 01:30:03.800
<v Speaker 0>Relatively new. What? About twelve months old? Doesn't

01:30:03.800 --> 01:30:05.400
<v Speaker 2>work with Docker Compose yet.

01:30:07.320 --> 01:30:08.920
<v Speaker 2>Sorry. Let's not talk about it.

01:30:12.280 --> 01:30:13.320
<v Speaker 0>Here we go.

01:30:14.680 --> 01:30:16.360
<v Speaker 0>Yeah. So if if you do need access

01:30:16.360 --> 01:30:17.480
<v Speaker 0>to stuff like that, there is a way

01:30:17.480 --> 01:30:19.645
<v Speaker 0>to do it. I guess, when we tackle

01:30:19.645 --> 01:30:20.364
<v Speaker 0>the

01:30:22.285 --> 01:30:24.925
<v Speaker 0>the non ping CRM Laravel application and we

01:30:24.925 --> 01:30:27.725
<v Speaker 0>are doing a bet more with the images,

01:30:27.725 --> 01:30:30.045
<v Speaker 0>then we can we can handle that. I

01:30:30.045 --> 01:30:31.405
<v Speaker 0>guess, the main use case is,

01:30:33.130 --> 01:30:35.210
<v Speaker 0>you know, if you've got private composer.

01:30:35.770 --> 01:30:37.450
<v Speaker 0>Like, for your composer install, it won't work

01:30:37.450 --> 01:30:39.690
<v Speaker 0>without that secret and you don't want to

01:30:39.690 --> 01:30:41.770
<v Speaker 0>do you don't want that. You don't want

01:30:41.770 --> 01:30:43.770
<v Speaker 0>your token or your secret inside the image

01:30:43.930 --> 01:30:45.610
<v Speaker 0>which is available for people to kind of

01:30:45.610 --> 01:30:47.505
<v Speaker 0>hack or inspect and steal it. So you

01:30:47.505 --> 01:30:48.865
<v Speaker 0>would choose a build secret which is then

01:30:48.865 --> 01:30:51.105
<v Speaker 0>a a way to inject the femoral things

01:30:51.105 --> 01:30:52.545
<v Speaker 0>into the build process.

01:30:52.785 --> 01:30:53.185
<v Speaker 0>But

01:30:53.825 --> 01:30:55.745
<v Speaker 0>no requirement for that right now.

01:30:56.385 --> 01:30:57.665
<v Speaker 0>We won't tackle it.

01:31:00.065 --> 01:31:01.550
<v Speaker 0>And just with it being half two, we're

01:31:01.550 --> 01:31:02.670
<v Speaker 0>not even gonna be able to do the

01:31:02.670 --> 01:31:05.309
<v Speaker 0>Kubernetes deployment but now, but we're in a

01:31:05.309 --> 01:31:06.989
<v Speaker 0>pretty good shape. And I think we did

01:31:06.989 --> 01:31:08.829
<v Speaker 0>do a Kubernetes deployment on the first episode,

01:31:08.829 --> 01:31:11.070
<v Speaker 0>didn't we? Yeah. Okay. Cool. So that that's

01:31:11.070 --> 01:31:12.510
<v Speaker 0>still available to people if they wanna check

01:31:12.510 --> 01:31:14.835
<v Speaker 0>it out. I will push this code. We

01:31:14.835 --> 01:31:17.235
<v Speaker 0>will call ping CRM complete. We got everything

01:31:17.235 --> 01:31:18.675
<v Speaker 0>working that we wanted to work.

01:31:19.075 --> 01:31:21.635
<v Speaker 0>I will talk to Alex and Kiran afterwards.

01:31:21.635 --> 01:31:24.355
<v Speaker 0>We will find a more real world application

01:31:24.355 --> 01:31:26.435
<v Speaker 0>that has all these extra components so we

01:31:26.435 --> 01:31:28.515
<v Speaker 0>can tackle scheduling queues,

01:31:28.920 --> 01:31:31.880
<v Speaker 0>integration tests. I think it's really important. And

01:31:32.280 --> 01:31:34.520
<v Speaker 0>we will have an episode dedicated to actual

01:31:34.520 --> 01:31:36.200
<v Speaker 0>Kubernetes production stuff.

01:31:36.280 --> 01:31:36.920
<v Speaker 0>Yep.

01:31:37.320 --> 01:31:38.280
<v Speaker 0>Awesome.

01:31:38.520 --> 01:31:40.280
<v Speaker 0>Great. Thank you. Sorry?

01:31:41.395 --> 01:31:42.195
<v Speaker 2>Great.

01:31:42.594 --> 01:31:44.755
<v Speaker 0>Alright. Awesome. Cool. Well, thank you both for

01:31:44.755 --> 01:31:46.594
<v Speaker 0>joining me. This was another pleasure again. I

01:31:46.594 --> 01:31:48.034
<v Speaker 0>hope it was useful for the people at

01:31:48.034 --> 01:31:49.954
<v Speaker 0>home. We will continue this.

01:31:51.395 --> 01:31:52.915
<v Speaker 0>I don't know when, but we will tweet

01:31:52.915 --> 01:31:54.114
<v Speaker 0>out very soon.

01:31:54.514 --> 01:31:56.195
<v Speaker 0>Thanks again. Have a nice day everyone.

01:31:56.720 --> 01:31:57.600
<v Speaker 1>Bye.

01:31:57.600 --> 01:31:57.920
<v Speaker 1>Bye.
