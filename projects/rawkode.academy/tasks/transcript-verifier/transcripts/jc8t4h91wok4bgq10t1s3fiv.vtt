WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 463880b9-4eb6-4721-b31a-d96bdd8f7568
Created: 2025-04-29T13:16:34.710Z
Duration: 1283.2689
Channels: 1

00:00:00.399 --> 00:00:02.080
<v Speaker 0>Hi, and welcome to AlphaBits.

00:00:02.399 --> 00:00:04.960
<v Speaker 0>AlphaBits is an outlet for our inquisitive minds.

00:00:04.960 --> 00:00:07.520
<v Speaker 0>We can't stop experimenting with new technology, and

00:00:07.520 --> 00:00:09.280
<v Speaker 0>we wanna share what we're playing with with

00:00:09.280 --> 00:00:13.175
<v Speaker 0>you. We're your hosts, Brian and David. Hi.

00:00:13.175 --> 00:00:15.655
<v Speaker 1>I'm David, defender of the Rawkode Academy. I'm

00:00:15.655 --> 00:00:18.455
<v Speaker 1>a perpetual learner, always playing with new cool

00:00:18.455 --> 00:00:20.055
<v Speaker 1>tools that I'm gonna share with you as

00:00:20.055 --> 00:00:22.215
<v Speaker 1>part of this podcast. And I'm Brian. I'm

00:00:22.215 --> 00:00:24.614
<v Speaker 0>a developer advocate at Amazon,

00:00:24.775 --> 00:00:27.335
<v Speaker 0>and I love all the shiny new toys

00:00:27.335 --> 00:00:27.895
<v Speaker 0>in tech.

00:00:28.619 --> 00:00:30.779
<v Speaker 0>It's kind of my passion is is testing

00:00:30.779 --> 00:00:32.220
<v Speaker 0>out the new stuff and,

00:00:32.860 --> 00:00:35.420
<v Speaker 0>seeing what's cool. Alright. For anyone tuning in

00:00:35.420 --> 00:00:37.660
<v Speaker 1>on YouTube listening to this right now, there

00:00:37.660 --> 00:00:39.579
<v Speaker 1>was a podcast element you can check out

00:00:39.579 --> 00:00:42.220
<v Speaker 1>with all good podcast players. On that, Brian

00:00:42.220 --> 00:00:44.059
<v Speaker 1>told us why he is demoing

00:00:44.355 --> 00:00:46.995
<v Speaker 1>a new Linux operating system for us today.

00:00:46.995 --> 00:00:49.155
<v Speaker 1>So with that, Brian, take it away.

00:00:49.715 --> 00:00:53.075
<v Speaker 0>Alright. So what we are looking at here

00:00:53.315 --> 00:00:55.635
<v Speaker 0>is my daily driver desktop.

00:00:56.210 --> 00:01:00.370
<v Speaker 0>This is running a derivation of Fedora Silver

00:01:00.370 --> 00:01:01.010
<v Speaker 0>Blue.

00:01:01.410 --> 00:01:03.250
<v Speaker 0>And I gotta be honest. When I first

00:01:03.250 --> 00:01:05.090
<v Speaker 0>heard about this, the first thing I thought

00:01:05.090 --> 00:01:07.250
<v Speaker 0>was, Fedora? I'm

00:01:07.250 --> 00:01:09.250
<v Speaker 0>good. And I've been an Ubuntu guy forever

00:01:09.250 --> 00:01:09.970
<v Speaker 0>or PopOS.

00:01:10.605 --> 00:01:12.205
<v Speaker 0>I love the Debian

00:01:12.525 --> 00:01:14.125
<v Speaker 0>derivatives.

00:01:14.925 --> 00:01:15.645
<v Speaker 0>But

00:01:16.045 --> 00:01:17.565
<v Speaker 0>Silver Blue and,

00:01:17.565 --> 00:01:21.005
<v Speaker 0>specifically, Universal Blue have a draw that that's

00:01:21.005 --> 00:01:23.245
<v Speaker 0>really important and exciting for me. So I

00:01:23.245 --> 00:01:24.205
<v Speaker 0>wanna talk about

00:01:25.005 --> 00:01:27.600
<v Speaker 0>what what the foundation of this operating system

00:01:27.600 --> 00:01:30.960
<v Speaker 0>is. It's it's an operating system that's built

00:01:31.040 --> 00:01:32.880
<v Speaker 0>in the cloud native

00:01:33.360 --> 00:01:34.480
<v Speaker 0>methodology.

00:01:34.720 --> 00:01:36.880
<v Speaker 0>So if you go to the GitHub repository,

00:01:39.104 --> 00:01:41.265
<v Speaker 0>which is at uBlueOS,

00:01:42.545 --> 00:01:45.985
<v Speaker 0>you can see that, there's 46 repositories here,

00:01:46.625 --> 00:01:48.305
<v Speaker 0>and each of them defines

00:01:48.305 --> 00:01:49.744
<v Speaker 0>a container.

00:01:50.220 --> 00:01:52.140
<v Speaker 0>So the main, this is our base.

00:01:52.460 --> 00:01:53.660
<v Speaker 0>And this is,

00:01:53.900 --> 00:01:55.980
<v Speaker 0>the base container file that all of the

00:01:55.980 --> 00:01:57.020
<v Speaker 0>other images

00:01:57.260 --> 00:01:58.220
<v Speaker 0>inherit from.

00:01:58.780 --> 00:02:01.420
<v Speaker 0>So it starts off by adding a few

00:02:01.420 --> 00:02:03.980
<v Speaker 0>important things, packages that need to be installed

00:02:03.980 --> 00:02:05.260
<v Speaker 0>in the base operating system.

00:02:05.955 --> 00:02:07.395
<v Speaker 0>Each of the

00:02:07.715 --> 00:02:08.515
<v Speaker 0>derivatives

00:02:08.595 --> 00:02:10.195
<v Speaker 0>build off of that

00:02:10.595 --> 00:02:11.555
<v Speaker 0>main,

00:02:13.075 --> 00:02:15.075
<v Speaker 0>container file. And the one I'm running is

00:02:15.075 --> 00:02:17.875
<v Speaker 0>Bluefin, which is a an an Ubuntu like

00:02:17.875 --> 00:02:18.675
<v Speaker 0>experience

00:02:18.675 --> 00:02:19.875
<v Speaker 0>for Fedora.

00:02:19.875 --> 00:02:21.629
<v Speaker 0>And if you look at this container file,

00:02:21.629 --> 00:02:22.270
<v Speaker 0>let me

00:02:22.910 --> 00:02:24.830
<v Speaker 0>bump this up a bit, you could see

00:02:24.830 --> 00:02:26.590
<v Speaker 0>this it looks just like a Dockerfile because

00:02:26.590 --> 00:02:27.790
<v Speaker 0>it is a Dockerfile.

00:02:27.790 --> 00:02:29.390
<v Speaker 0>And the GitHub actions

00:02:29.390 --> 00:02:31.470
<v Speaker 0>for this repository

00:02:31.709 --> 00:02:33.709
<v Speaker 0>build the OCI container and push it up

00:02:33.709 --> 00:02:35.150
<v Speaker 0>to the GitHub container repository.

00:02:36.435 --> 00:02:38.035
<v Speaker 0>So let's look at

00:02:38.675 --> 00:02:40.435
<v Speaker 0>my system specifically.

00:02:40.834 --> 00:02:44.515
<v Speaker 0>Let's do an RPM OS three status.

00:02:45.394 --> 00:02:47.235
<v Speaker 0>And from here, you can see that my

00:02:47.235 --> 00:02:49.474
<v Speaker 0>system is booted off of a Docker image

00:02:50.590 --> 00:02:51.870
<v Speaker 0>called BluefinDX

00:02:51.870 --> 00:02:52.830
<v Speaker 0>NVIDIA,

00:02:54.109 --> 00:02:56.269
<v Speaker 0>and that comes from this repository that I

00:02:56.269 --> 00:02:57.470
<v Speaker 0>just showed you on GitHub.

00:02:57.950 --> 00:03:00.030
<v Speaker 0>I've got because it's RPM OS tree, I

00:03:00.030 --> 00:03:03.469
<v Speaker 0>get, my current and my last known good

00:03:03.815 --> 00:03:04.855
<v Speaker 0>configuration.

00:03:04.855 --> 00:03:06.295
<v Speaker 0>So if if I do something, I break

00:03:06.295 --> 00:03:07.735
<v Speaker 0>it. I can just roll it back.

00:03:09.175 --> 00:03:10.695
<v Speaker 0>But the exciting thing is is when we

00:03:10.695 --> 00:03:13.655
<v Speaker 0>make a change to the Bluefin repository,

00:03:13.655 --> 00:03:14.775
<v Speaker 0>GitHub actions

00:03:15.175 --> 00:03:16.855
<v Speaker 0>builds those images

00:03:17.390 --> 00:03:19.470
<v Speaker 0>and pushes them up to the GitHub container

00:03:19.470 --> 00:03:20.430
<v Speaker 0>repository.

00:03:20.910 --> 00:03:23.390
<v Speaker 0>And then I can just wait for my

00:03:23.390 --> 00:03:24.830
<v Speaker 0>computer to pull it. We've got a schedule

00:03:24.830 --> 00:03:25.470
<v Speaker 0>that pulls,

00:03:26.110 --> 00:03:27.550
<v Speaker 0>the next release

00:03:27.709 --> 00:03:29.550
<v Speaker 0>every afternoon. And if there's no release, it's

00:03:29.550 --> 00:03:31.215
<v Speaker 0>not a big deal. If there is, I

00:03:31.215 --> 00:03:32.895
<v Speaker 0>can just check this RPM o s three

00:03:32.895 --> 00:03:33.855
<v Speaker 0>status again.

00:03:34.015 --> 00:03:36.255
<v Speaker 0>And if I notice that there's an image

00:03:36.255 --> 00:03:38.815
<v Speaker 0>above this, the the live image, I can

00:03:38.815 --> 00:03:40.495
<v Speaker 0>just reboot to get that new image.

00:03:40.815 --> 00:03:43.215
<v Speaker 0>So it's everything you love about cloud native

00:03:43.215 --> 00:03:44.175
<v Speaker 0>and containers

00:03:44.175 --> 00:03:45.455
<v Speaker 0>but applied to a desktop.

00:03:46.550 --> 00:03:49.110
<v Speaker 0>That's really epic. We've got the whole operating

00:03:49.110 --> 00:03:51.510
<v Speaker 0>system scripted with a Just file. It's actually

00:03:51.510 --> 00:03:54.390
<v Speaker 0>three Just files. So if I type Just,

00:03:55.190 --> 00:03:57.190
<v Speaker 0>you can see all these things that are

00:03:57.190 --> 00:04:00.470
<v Speaker 0>kind of, friendly, helpful tools that let us

00:04:00.470 --> 00:04:01.350
<v Speaker 0>get going

00:04:01.910 --> 00:04:03.245
<v Speaker 0>in a way that we want to. So

00:04:03.245 --> 00:04:04.685
<v Speaker 0>some of them install,

00:04:05.165 --> 00:04:06.685
<v Speaker 0>Flatpaks for

00:04:06.685 --> 00:04:09.724
<v Speaker 0>the applications that we need. We've got DistroBox

00:04:09.724 --> 00:04:12.364
<v Speaker 0>built in. We've got NICs and DevBox built

00:04:12.364 --> 00:04:12.925
<v Speaker 0>in,

00:04:13.325 --> 00:04:14.605
<v Speaker 0>the t package manager.

00:04:15.159 --> 00:04:17.000
<v Speaker 0>We pretty much thought through everything you might

00:04:17.000 --> 00:04:18.920
<v Speaker 0>need as a cloud native developer,

00:04:19.399 --> 00:04:21.800
<v Speaker 0>and it's all just a a keystroke away.

00:04:22.440 --> 00:04:24.760
<v Speaker 0>So I I love this. It's it's been,

00:04:25.720 --> 00:04:26.600
<v Speaker 0>liberating

00:04:26.600 --> 00:04:28.040
<v Speaker 0>having a desktop

00:04:28.040 --> 00:04:29.960
<v Speaker 0>that I can't really break easily.

00:04:30.735 --> 00:04:32.414
<v Speaker 0>And if I do, I can just roll

00:04:32.414 --> 00:04:33.055
<v Speaker 0>it back,

00:04:33.375 --> 00:04:35.615
<v Speaker 0>with a container image. It's unbelievable.

00:04:35.935 --> 00:04:39.534
<v Speaker 1>So you're just running the standard bluefin image.

00:04:39.534 --> 00:04:41.134
<v Speaker 1>Or have you got your own version with

00:04:41.134 --> 00:04:43.215
<v Speaker 1>any tweaks to it? I I don't have

00:04:43.215 --> 00:04:44.414
<v Speaker 0>any personal tweaks,

00:04:44.735 --> 00:04:46.655
<v Speaker 0>but it it would be easy. I just

00:04:46.170 --> 00:04:48.890
<v Speaker 0>fork Bluefin and and inherit from it in

00:04:48.890 --> 00:04:49.930
<v Speaker 0>the container file.

00:04:50.410 --> 00:04:51.610
<v Speaker 0>But I really don't need to because all

00:04:51.610 --> 00:04:53.930
<v Speaker 0>the customizations I need, I can do either

00:04:53.930 --> 00:04:56.090
<v Speaker 0>with NICS or by adding my own GNOME

00:04:56.090 --> 00:04:56.890
<v Speaker 0>extensions.

00:04:57.290 --> 00:04:58.970
<v Speaker 0>So I've got access to everything. You can

00:04:58.970 --> 00:05:00.490
<v Speaker 0>see NICS is here.

00:05:01.785 --> 00:05:03.465
<v Speaker 0>We've got DistroBox.

00:05:04.185 --> 00:05:05.545
<v Speaker 0>So Podman,

00:05:05.865 --> 00:05:07.945
<v Speaker 0>don't have any containers running right now, but

00:05:07.945 --> 00:05:08.665
<v Speaker 0>I could.

00:05:10.345 --> 00:05:13.305
<v Speaker 0>See, previously, I did the CUDA test to

00:05:13.305 --> 00:05:15.385
<v Speaker 0>make sure that my NVIDIA card is able

00:05:15.385 --> 00:05:18.220
<v Speaker 0>to pass through to Podman. Works great.

00:05:18.860 --> 00:05:21.100
<v Speaker 0>I've got a distro box universal,

00:05:21.100 --> 00:05:23.260
<v Speaker 0>so I could do distro box enter

00:05:24.620 --> 00:05:25.420
<v Speaker 0>universal.

00:05:27.979 --> 00:05:29.260
<v Speaker 0>And now I'm in the,

00:05:29.979 --> 00:05:30.540
<v Speaker 0>Microsoft

00:05:31.745 --> 00:05:34.384
<v Speaker 0>dev container Universal dev container that they use

00:05:34.384 --> 00:05:35.505
<v Speaker 0>on Codespaces.

00:05:35.824 --> 00:05:37.824
<v Speaker 0>So I've got Go

00:05:38.705 --> 00:05:40.224
<v Speaker 0>in here already.

00:05:40.224 --> 00:05:41.985
<v Speaker 0>But if I exit back to the host,

00:05:41.985 --> 00:05:42.945
<v Speaker 0>there's no Go.

00:05:43.664 --> 00:05:44.865
<v Speaker 0>So it's it's pretty slick.

00:05:45.449 --> 00:05:47.530
<v Speaker 1>So what's the process if you did want

00:05:47.530 --> 00:05:49.610
<v Speaker 1>to add, like, a GNOME extension then?

00:05:50.090 --> 00:05:51.930
<v Speaker 0>Well, for for GNOME extension, I would just

00:05:51.930 --> 00:05:54.729
<v Speaker 0>open up the GNOME extension manager, which we

00:05:54.729 --> 00:05:55.770
<v Speaker 0>have here,

00:05:56.169 --> 00:05:57.610
<v Speaker 0>and that's on the wrong screen.

00:05:58.845 --> 00:06:01.805
<v Speaker 0>So you could just browse GNOME extensions and

00:06:01.965 --> 00:06:03.725
<v Speaker 0>install one that you like,

00:06:04.445 --> 00:06:05.885
<v Speaker 0>or you can remove some of the ones

00:06:05.885 --> 00:06:07.005
<v Speaker 0>that you have installed.

00:06:07.485 --> 00:06:09.005
<v Speaker 1>Okay. So you do have the ability to

00:06:09.005 --> 00:06:11.165
<v Speaker 1>write to parts of your operating system. It's

00:06:11.165 --> 00:06:12.765
<v Speaker 1>just the base Yes. It's like the core

00:06:12.765 --> 00:06:13.325
<v Speaker 1>OS. So

00:06:14.069 --> 00:06:16.310
<v Speaker 0>so the the home is obviously writable, and

00:06:16.310 --> 00:06:18.229
<v Speaker 0>Etsy is writable

00:06:18.310 --> 00:06:20.629
<v Speaker 0>as an overlay on top of the Etsy

00:06:20.629 --> 00:06:22.710
<v Speaker 0>that comes with the OS. So it does

00:06:22.710 --> 00:06:24.070
<v Speaker 0>use overlays

00:06:24.789 --> 00:06:25.990
<v Speaker 0>to persist

00:06:26.264 --> 00:06:28.185
<v Speaker 0>operating system level changes.

00:06:28.585 --> 00:06:31.065
<v Speaker 1>Okay. That's pretty cool. I mean, it makes

00:06:31.065 --> 00:06:31.865
<v Speaker 1>me kinda

00:06:32.345 --> 00:06:34.025
<v Speaker 1>you know, I run a Mac right now,

00:06:34.025 --> 00:06:36.505
<v Speaker 1>but, know, I keep trying. Every time I

00:06:36.505 --> 00:06:38.025
<v Speaker 1>go away from Linux, I've always got this

00:06:38.025 --> 00:06:39.225
<v Speaker 1>desire to go back to Linux.

00:06:39.790 --> 00:06:40.430
<v Speaker 0>Yeah.

00:06:40.750 --> 00:06:42.510
<v Speaker 0>And and that's kind of that that's where

00:06:42.510 --> 00:06:43.790
<v Speaker 0>I've lived too. You know, I I love

00:06:43.790 --> 00:06:45.070
<v Speaker 0>the Mac experience.

00:06:45.550 --> 00:06:48.350
<v Speaker 0>But for developing, for doing cloud native things,

00:06:48.590 --> 00:06:51.630
<v Speaker 0>Linux is kinda hand handy to have around.

00:06:51.630 --> 00:06:54.745
<v Speaker 0>I can run a Kubernetes setup because kind

00:06:54.745 --> 00:06:58.265
<v Speaker 0>is already installed, Scorpio's installed, Helm is installed.

00:06:58.265 --> 00:07:00.265
<v Speaker 0>All of the tools that I need are

00:07:00.265 --> 00:07:02.425
<v Speaker 0>already here, and they're guaranteed to be up

00:07:02.425 --> 00:07:04.665
<v Speaker 0>to date. So it it's it's really powerful.

00:07:05.259 --> 00:07:07.259
<v Speaker 1>Alright. There goes my weekend.

00:07:07.340 --> 00:07:08.300
<v Speaker 1>Thanks for that.

00:07:08.699 --> 00:07:10.539
<v Speaker 0>Yeah. Well, if you do give it a

00:07:10.539 --> 00:07:11.979
<v Speaker 0>shot, you know, throw it on an old

00:07:11.979 --> 00:07:13.659
<v Speaker 0>laptop or something and let us know what

00:07:13.659 --> 00:07:15.900
<v Speaker 0>you think because we're trying to make this

00:07:15.900 --> 00:07:17.900
<v Speaker 0>literally the best place for a developer to

00:07:17.900 --> 00:07:20.384
<v Speaker 0>live or a a DevOps engineer or any

00:07:20.384 --> 00:07:23.345
<v Speaker 0>cloud native people. You know, this it it's

00:07:23.345 --> 00:07:24.865
<v Speaker 0>got everything you need. We've we tried to

00:07:24.865 --> 00:07:26.544
<v Speaker 0>think of everything, but if there's something missing,

00:07:26.544 --> 00:07:28.224
<v Speaker 0>let us know. We'll add it. Are you

00:07:28.224 --> 00:07:29.585
<v Speaker 1>a contributor to?

00:07:29.745 --> 00:07:31.745
<v Speaker 0>I am. Yes. I'm a contributor to

00:07:32.310 --> 00:07:33.669
<v Speaker 0>Bluefin specifically,

00:07:33.669 --> 00:07:34.790
<v Speaker 0>but I also built,

00:07:35.430 --> 00:07:39.750
<v Speaker 0>Fleek, which is a home management platform for

00:07:39.750 --> 00:07:41.669
<v Speaker 0>Nick's OS or for Nick's.

00:07:41.750 --> 00:07:43.830
<v Speaker 0>So let's do get Fleek. So I built

00:07:43.830 --> 00:07:46.069
<v Speaker 0>this as part of the, uBlue

00:07:46.755 --> 00:07:47.475
<v Speaker 0>process

00:07:47.794 --> 00:07:48.995
<v Speaker 0>so that I can have

00:07:49.395 --> 00:07:51.955
<v Speaker 0>my dot files, my home configuration follow me

00:07:51.955 --> 00:07:54.355
<v Speaker 0>anywhere. So that's it. Get fleek dot dev.

00:07:54.435 --> 00:07:57.155
<v Speaker 1>Alright. Lots of things to check out. That's

00:07:57.155 --> 00:07:58.514
<v Speaker 1>very cool. Yeah. Good choice.

00:08:00.270 --> 00:08:02.509
<v Speaker 0>Alright. So I'll stop sharing. I wanna see

00:08:02.509 --> 00:08:04.909
<v Speaker 0>what you've got because I'm all about some

00:08:04.909 --> 00:08:05.630
<v Speaker 0>some

00:08:05.789 --> 00:08:07.470
<v Speaker 0>system configuration,

00:08:08.190 --> 00:08:09.070
<v Speaker 0>ClickOps

00:08:09.389 --> 00:08:10.750
<v Speaker 0>replacement stuff.

00:08:10.909 --> 00:08:13.229
<v Speaker 1>Well, yeah. I mean, unintended, but you've covered

00:08:13.425 --> 00:08:16.625
<v Speaker 1>desktop, and now I'm gonna cover cloud and

00:08:16.625 --> 00:08:19.425
<v Speaker 1>platform. So I have set a few things

00:08:19.425 --> 00:08:19.985
<v Speaker 1>up

00:08:20.305 --> 00:08:21.345
<v Speaker 1>just because

00:08:21.824 --> 00:08:22.785
<v Speaker 1>getting

00:08:23.025 --> 00:08:25.425
<v Speaker 1>SI, the System Initiative thing, up and running

00:08:25.425 --> 00:08:26.865
<v Speaker 1>does take a little bit of time. It

00:08:26.865 --> 00:08:28.944
<v Speaker 1>uses Dirt Enve, which has a Next Shell,

00:08:29.330 --> 00:08:31.330
<v Speaker 1>which takes like ten to fifteen minutes to

00:08:31.330 --> 00:08:33.090
<v Speaker 1>get everything bootstrapped. But only does it once

00:08:33.090 --> 00:08:34.690
<v Speaker 1>and then you're good. Okay. So this is

00:08:34.690 --> 00:08:37.330
<v Speaker 1>running until which spends up the entire SI

00:08:37.330 --> 00:08:39.650
<v Speaker 1>platform for you. You can see here, we've

00:08:39.650 --> 00:08:41.730
<v Speaker 1>got the back end which comprises of four

00:08:41.730 --> 00:08:44.795
<v Speaker 1>services, the front end, the platform itself,

00:08:44.795 --> 00:08:46.955
<v Speaker 1>and then the tilt file there. So everything

00:08:46.955 --> 00:08:49.275
<v Speaker 1>is up and running. Everything is healthy.

00:08:49.675 --> 00:08:51.915
<v Speaker 0>So can you explain what what tilt is

00:08:51.915 --> 00:08:55.115
<v Speaker 0>for us real quick? So tilt is you

00:08:55.115 --> 00:08:56.075
<v Speaker 1>write a tilt file,

00:08:56.600 --> 00:08:59.000
<v Speaker 1>and it basically just orchestrates containers. So you

00:08:59.000 --> 00:09:01.000
<v Speaker 1>say, I have these groups of containers go

00:09:01.000 --> 00:09:02.520
<v Speaker 1>back end. These groups of containers go front

00:09:02.520 --> 00:09:04.280
<v Speaker 1>end. They have dependencies. The front end can

00:09:04.280 --> 00:09:05.560
<v Speaker 1>only come online when the back end is

00:09:05.560 --> 00:09:07.080
<v Speaker 1>online. The back end consists of these four

00:09:07.080 --> 00:09:08.280
<v Speaker 1>container images,

00:09:08.440 --> 00:09:10.025
<v Speaker 1>and they expose these ports. And then it

00:09:10.025 --> 00:09:11.385
<v Speaker 1>does all of that for you. So it

00:09:11.385 --> 00:09:13.065
<v Speaker 1>just gives you, like, a really nice definite

00:09:13.065 --> 00:09:13.945
<v Speaker 1>experience. So

00:09:14.345 --> 00:09:16.425
<v Speaker 0>it's like a a better Docker Compose?

00:09:16.425 --> 00:09:18.425
<v Speaker 1>It definitely competes with Docker Compose.

00:09:19.225 --> 00:09:21.145
<v Speaker 1>Yeah. And it can even integrate web. So

00:09:21.145 --> 00:09:22.905
<v Speaker 1>if you do have a Docker Compose file,

00:09:22.905 --> 00:09:24.850
<v Speaker 1>but you just want this nice UI and

00:09:24.850 --> 00:09:26.850
<v Speaker 1>ability to kinda click in and, you know,

00:09:26.850 --> 00:09:28.689
<v Speaker 1>see the logs from all of the things,

00:09:28.689 --> 00:09:30.290
<v Speaker 1>then you can just have it wrapped Docker

00:09:30.290 --> 00:09:32.370
<v Speaker 1>Compose for you. But most of the value

00:09:32.370 --> 00:09:34.769
<v Speaker 1>comes from just just describing all your containers

00:09:34.769 --> 00:09:36.529
<v Speaker 1>and the dependencies properly,

00:09:37.089 --> 00:09:38.850
<v Speaker 1>whether in the type Tilt file.

00:09:39.865 --> 00:09:42.425
<v Speaker 1>And, also, you can kind of, like it

00:09:42.425 --> 00:09:44.584
<v Speaker 1>does performance enhancement things. So if you've got,

00:09:44.584 --> 00:09:46.105
<v Speaker 1>like, an interpreted language where you have to

00:09:46.105 --> 00:09:47.865
<v Speaker 1>mount the code into a container, it can

00:09:47.865 --> 00:09:49.785
<v Speaker 1>actually kind of do that in a way

00:09:49.785 --> 00:09:51.305
<v Speaker 1>that is a little bit more performant than

00:09:51.305 --> 00:09:54.185
<v Speaker 1>the standard Docker composements, volumements.

00:09:54.185 --> 00:09:56.570
<v Speaker 1>So, yeah, it's it's a nice tool. It

00:09:56.570 --> 00:09:58.490
<v Speaker 1>got bought by Docker about eighteen months ago,

00:09:58.490 --> 00:09:59.850
<v Speaker 1>maybe two years ago. I can't remember. It's

00:09:59.850 --> 00:10:00.810
<v Speaker 1>been a a while.

00:10:01.930 --> 00:10:03.770
<v Speaker 1>But it's still going strong. It's still a

00:10:03.770 --> 00:10:06.170
<v Speaker 1>really good tool for just saying, hey. My

00:10:06.170 --> 00:10:08.010
<v Speaker 1>development environment is not a single container with

00:10:08.010 --> 00:10:09.610
<v Speaker 1>a database. It's a bunch of things with

00:10:09.610 --> 00:10:10.170
<v Speaker 1>dependencies.

00:10:10.565 --> 00:10:12.885
<v Speaker 1>Let's make this easy for people. So yeah.

00:10:12.885 --> 00:10:13.685
<v Speaker 1>Very cool.

00:10:14.165 --> 00:10:15.685
<v Speaker 1>But that's not what we're looking at today.

00:10:15.685 --> 00:10:17.285
<v Speaker 1>So I'm gonna skip right past it. And

00:10:17.285 --> 00:10:19.365
<v Speaker 1>we're gonna now go over to here where

00:10:19.365 --> 00:10:22.165
<v Speaker 1>we have my SI workspace.

00:10:22.964 --> 00:10:26.770
<v Speaker 1>Right now, SI works with AWS with a

00:10:26.770 --> 00:10:29.010
<v Speaker 1>limited set of resources, but, you know, this

00:10:29.010 --> 00:10:31.490
<v Speaker 1>is a very, very early proof of concept

00:10:31.490 --> 00:10:33.490
<v Speaker 1>and demo from the SI team.

00:10:33.730 --> 00:10:36.130
<v Speaker 1>And so this is gonna, I imagine, support

00:10:36.130 --> 00:10:39.155
<v Speaker 1>more clouds and more resources over time. But

00:10:39.155 --> 00:10:41.155
<v Speaker 1>what it allows you to do is say,

00:10:41.155 --> 00:10:41.715
<v Speaker 1>well,

00:10:42.435 --> 00:10:43.395
<v Speaker 1>I want

00:10:44.515 --> 00:10:45.395
<v Speaker 1>AWS

00:10:45.635 --> 00:10:48.595
<v Speaker 1>region where I'm gonna deploy things to. So

00:10:48.595 --> 00:10:50.115
<v Speaker 1>we drag that onto the map, and we

00:10:50.115 --> 00:10:51.475
<v Speaker 1>can do all the little things you would

00:10:51.475 --> 00:10:54.540
<v Speaker 1>expect from, like, you know, a UI based

00:10:54.540 --> 00:10:56.860
<v Speaker 1>tool, resize, right click,

00:10:57.100 --> 00:11:00.220
<v Speaker 1>edit properties, and if you want. From here,

00:11:00.220 --> 00:11:02.220
<v Speaker 1>I can say, okay. Region do I want

00:11:02.220 --> 00:11:04.460
<v Speaker 1>to deploy to? And it loads all the

00:11:04.460 --> 00:11:05.100
<v Speaker 1>regions from

00:11:06.385 --> 00:11:07.985
<v Speaker 1>the API. So I can just say, hey.

00:11:07.985 --> 00:11:08.945
<v Speaker 1>I'm gonna deploy

00:11:09.105 --> 00:11:10.065
<v Speaker 1>to London.

00:11:10.785 --> 00:11:13.345
<v Speaker 1>And now test the model. So this is

00:11:13.345 --> 00:11:15.665
<v Speaker 1>a visual representation for the model, which is

00:11:15.665 --> 00:11:16.545
<v Speaker 1>all code.

00:11:17.185 --> 00:11:18.785
<v Speaker 1>And it makes sure that your model is

00:11:18.785 --> 00:11:20.640
<v Speaker 1>always valid at all points in time. If

00:11:20.640 --> 00:11:22.800
<v Speaker 1>your model is not valid, you will get

00:11:22.800 --> 00:11:24.880
<v Speaker 1>an error down here. But as you can

00:11:24.880 --> 00:11:27.680
<v Speaker 1>see, I have happy green text everywhere. Green

00:11:27.680 --> 00:11:30.640
<v Speaker 1>text are good. So we could say, well,

00:11:30.800 --> 00:11:34.080
<v Speaker 1>let's have an EC two instance.

00:11:35.125 --> 00:11:37.524
<v Speaker 1>Now this is not going to be green

00:11:37.524 --> 00:11:39.125
<v Speaker 1>because there are

00:11:39.524 --> 00:11:40.325
<v Speaker 1>inputs,

00:11:40.325 --> 00:11:43.204
<v Speaker 1>properties on this instance which are not going

00:11:43.204 --> 00:11:44.404
<v Speaker 1>to be satisfied.

00:11:44.805 --> 00:11:46.725
<v Speaker 1>So we'll let the model test and we'll

00:11:46.725 --> 00:11:49.730
<v Speaker 1>see that, okay, we have user data, security

00:11:49.730 --> 00:11:52.610
<v Speaker 1>group ID, key name, and an image ID.

00:11:52.850 --> 00:11:55.330
<v Speaker 1>The region name or the region is

00:11:56.050 --> 00:11:58.610
<v Speaker 1>grayed out because it's inferred

00:11:58.610 --> 00:11:59.410
<v Speaker 1>from In

00:11:59.810 --> 00:12:02.370
<v Speaker 0>the region. Okay. Exactly. And we actually you

00:12:02.370 --> 00:12:03.970
<v Speaker 1>know, we can't drag this out now. This

00:12:03.970 --> 00:12:05.615
<v Speaker 1>is no part of this. So

00:12:06.335 --> 00:12:08.175
<v Speaker 1>we pop this up and it will start

00:12:08.175 --> 00:12:09.695
<v Speaker 1>to tell us. You know, we can see

00:12:09.695 --> 00:12:11.535
<v Speaker 1>here the region is green, the region is

00:12:11.535 --> 00:12:13.055
<v Speaker 1>fine, but on this,

00:12:13.455 --> 00:12:15.695
<v Speaker 1>the instance type is required and that it

00:12:15.695 --> 00:12:17.295
<v Speaker 1>can't run the command because it's not in

00:12:17.295 --> 00:12:18.415
<v Speaker 1>a happy state.

00:12:18.895 --> 00:12:20.495
<v Speaker 1>So we could start to fill this out

00:12:20.630 --> 00:12:22.630
<v Speaker 1>where we drop in values to all these

00:12:22.630 --> 00:12:25.029
<v Speaker 1>things. But we can probably

00:12:25.830 --> 00:12:28.390
<v Speaker 1>let the inference handle most of this for

00:12:28.390 --> 00:12:30.310
<v Speaker 1>us. So we know that we need user

00:12:30.310 --> 00:12:32.550
<v Speaker 1>data. So for my user data, I'm gonna

00:12:32.550 --> 00:12:33.269
<v Speaker 1>use butane,

00:12:34.285 --> 00:12:35.405
<v Speaker 1>which is just

00:12:35.805 --> 00:12:37.405
<v Speaker 1>the core OS

00:12:37.485 --> 00:12:39.325
<v Speaker 1>and it system, I guess. So user data

00:12:39.325 --> 00:12:41.085
<v Speaker 1>provisioning system kinda like cloud in it. In

00:12:41.085 --> 00:12:42.845
<v Speaker 0>fact generator. Yeah. Yeah.

00:12:43.965 --> 00:12:46.045
<v Speaker 1>Which needs a container image and then has

00:12:46.045 --> 00:12:47.759
<v Speaker 1>an output of user So you can see

00:12:47.759 --> 00:12:49.279
<v Speaker 1>here the inputs are on the left, the

00:12:49.279 --> 00:12:50.800
<v Speaker 1>outputs are on the right. So we can

00:12:50.800 --> 00:12:52.560
<v Speaker 1>bring in and say, okay. Let's have a

00:12:52.560 --> 00:12:53.440
<v Speaker 1>docker image.

00:12:54.000 --> 00:12:56.320
<v Speaker 1>So we're just gonna start stitching this together

00:12:56.480 --> 00:12:58.640
<v Speaker 1>until we have a system we can deploy.

00:12:58.800 --> 00:12:59.440
<v Speaker 1>So

00:12:59.839 --> 00:13:00.800
<v Speaker 1>we can drag

00:13:01.759 --> 00:13:02.000
<v Speaker 1>this

00:13:03.265 --> 00:13:04.225
<v Speaker 1>to here.

00:13:04.705 --> 00:13:06.705
<v Speaker 1>So now this container image is gonna satisfy

00:13:06.705 --> 00:13:07.425
<v Speaker 1>this.

00:13:08.464 --> 00:13:10.305
<v Speaker 1>And we can change the image here to

00:13:10.305 --> 00:13:12.385
<v Speaker 1>be engine x.

00:13:13.505 --> 00:13:14.865
<v Speaker 1>Well, let's give that a second to test

00:13:14.865 --> 00:13:15.505
<v Speaker 1>the model again.

00:13:16.040 --> 00:13:17.800
<v Speaker 1>Testing does seem a little bit slow right

00:13:17.800 --> 00:13:20.920
<v Speaker 1>now, but this is extremely early software.

00:13:20.920 --> 00:13:23.640
<v Speaker 1>This is definitely putting the alpha into alphabets.

00:13:24.280 --> 00:13:25.800
<v Speaker 0>Yeah. It looks like it's doing a lot

00:13:25.800 --> 00:13:28.440
<v Speaker 0>though. So I I can appreciate that. Yeah.

00:13:28.440 --> 00:13:30.040
<v Speaker 1>So now it tells us our Docker image

00:13:30.040 --> 00:13:32.045
<v Speaker 1>is green. What I like about this is

00:13:32.045 --> 00:13:34.845
<v Speaker 1>if I say big image does not exist,

00:13:35.005 --> 00:13:36.605
<v Speaker 1>trying to type in enough characters so that

00:13:36.605 --> 00:13:38.524
<v Speaker 1>I don't accidentally get some random image.

00:13:38.925 --> 00:13:40.285
<v Speaker 1>It should actually go red and tell us

00:13:40.285 --> 00:13:41.964
<v Speaker 1>that this image can't be discovered.

00:13:42.125 --> 00:13:44.685
<v Speaker 1>And if that image name does exist, then

00:13:45.404 --> 00:13:46.764
<v Speaker 1>that's a there we go.

00:13:47.780 --> 00:13:49.060
<v Speaker 1>We got the cross.

00:13:49.620 --> 00:13:51.060
<v Speaker 1>So we could pop this up. We could

00:13:51.060 --> 00:13:53.700
<v Speaker 1>take a look. Okay. SI4117.

00:13:54.340 --> 00:13:57.060
<v Speaker 1>Image not real. So now, of course, we

00:13:57.060 --> 00:13:58.660
<v Speaker 1>can rename this. So we could just say,

00:13:58.660 --> 00:14:00.980
<v Speaker 1>you the resource name is NGINX. The image

00:14:00.980 --> 00:14:02.180
<v Speaker 1>that we want is NGINX.

00:14:02.565 --> 00:14:04.245
<v Speaker 1>And then we can just kinda quickly through

00:14:04.245 --> 00:14:05.605
<v Speaker 1>and tie up some of these dots. So

00:14:05.605 --> 00:14:06.965
<v Speaker 1>we need a key pair.

00:14:07.285 --> 00:14:09.205
<v Speaker 1>We need a security group. We need an

00:14:09.205 --> 00:14:10.325
<v Speaker 1>ingress rule.

00:14:11.285 --> 00:14:14.165
<v Speaker 1>We can drag our user data onto our

00:14:14.165 --> 00:14:15.765
<v Speaker 1>instance. I know my lines are not gonna

00:14:15.765 --> 00:14:18.005
<v Speaker 1>be particularly straight here, so let me just,

00:14:18.005 --> 00:14:18.165
<v Speaker 1>you know,

00:14:21.019 --> 00:14:21.900
<v Speaker 1>do this.

00:14:22.700 --> 00:14:24.860
<v Speaker 1>We can see their instance needs a security

00:14:24.860 --> 00:14:26.540
<v Speaker 1>group ID, so we can connect it on

00:14:26.540 --> 00:14:27.420
<v Speaker 1>that now.

00:14:29.580 --> 00:14:31.820
<v Speaker 0>Now is this logged in to an your

00:14:31.820 --> 00:14:34.425
<v Speaker 0>AWS account? So it it pulls your available

00:14:34.425 --> 00:14:37.305
<v Speaker 0>keys and It gives us ambient authentication. So

00:14:37.305 --> 00:14:40.825
<v Speaker 1>whatever my CLI is configured with. Okay. Perfect.

00:14:42.745 --> 00:14:44.265
<v Speaker 1>Let it test the model before I start

00:14:44.265 --> 00:14:46.025
<v Speaker 1>dragging more things and slowing it down.

00:14:46.610 --> 00:14:47.490
<v Speaker 1>Cool.

00:14:47.649 --> 00:14:49.889
<v Speaker 1>Now we can drag our key name. We

00:14:49.889 --> 00:14:52.130
<v Speaker 1>can drag our security group onto the security

00:14:52.130 --> 00:14:53.089
<v Speaker 1>group ID.

00:14:53.970 --> 00:14:56.690
<v Speaker 1>Our Docker container expose these ports. You can

00:14:56.690 --> 00:14:58.690
<v Speaker 1>see there's an output on this container image.

00:14:58.690 --> 00:15:00.764
<v Speaker 1>So we can click on this and we

00:15:00.764 --> 00:15:02.925
<v Speaker 1>can say, okay. Let's add

00:15:03.885 --> 00:15:05.404
<v Speaker 1>and let's expose this

00:15:06.125 --> 00:15:07.325
<v Speaker 1>AT on

00:15:07.404 --> 00:15:08.445
<v Speaker 1>TCP.

00:15:09.644 --> 00:15:11.805
<v Speaker 1>This now becomes something we can use over

00:15:11.805 --> 00:15:13.725
<v Speaker 1>here and part of our security group where

00:15:13.725 --> 00:15:15.710
<v Speaker 1>we can see that exposed reports or Docker

00:15:15.710 --> 00:15:17.070
<v Speaker 1>container uses.

00:15:17.870 --> 00:15:20.750
<v Speaker 1>So Oh, wow. It just kind of magically

00:15:20.750 --> 00:15:22.589
<v Speaker 1>builds all of this in the background to

00:15:22.589 --> 00:15:24.510
<v Speaker 1>the point where we get happy, and then

00:15:24.510 --> 00:15:26.830
<v Speaker 1>we merge this change set, and then we

00:15:26.830 --> 00:15:28.635
<v Speaker 1>can deploy it. So the last thing we

00:15:28.635 --> 00:15:30.075
<v Speaker 1>need is a

00:15:30.075 --> 00:15:31.355
<v Speaker 1>AMI ID,

00:15:31.355 --> 00:15:33.515
<v Speaker 1>which I need to grab from I'll just

00:15:33.515 --> 00:15:35.515
<v Speaker 1>grab one from the Fedora website

00:15:35.515 --> 00:15:36.795
<v Speaker 1>for my region,

00:15:38.075 --> 00:15:39.915
<v Speaker 1>which is here. So I'm gonna click on

00:15:39.915 --> 00:15:41.035
<v Speaker 1>our EC two instance.

00:15:42.160 --> 00:15:44.080
<v Speaker 1>And the image ID, I'm just gonna drop

00:15:44.080 --> 00:15:44.880
<v Speaker 1>that in.

00:15:45.120 --> 00:15:47.280
<v Speaker 1>And as this type, I'll just go with

00:15:47.280 --> 00:15:49.920
<v Speaker 1>a t through t three large. We'll keep

00:15:49.920 --> 00:15:51.040
<v Speaker 1>that nice and simple.

00:15:51.520 --> 00:15:51.920
<v Speaker 1>And

00:15:52.400 --> 00:15:53.280
<v Speaker 1>I think

00:15:53.920 --> 00:15:54.720
<v Speaker 1>that

00:15:55.585 --> 00:15:57.025
<v Speaker 1>should be enough.

00:15:57.905 --> 00:16:00.385
<v Speaker 0>So the AMI you chose for

00:16:00.705 --> 00:16:01.825
<v Speaker 0>core OS?

00:16:03.105 --> 00:16:05.025
<v Speaker 1>Yes. Yeah. And

00:16:05.425 --> 00:16:07.585
<v Speaker 1>the fedora core OS image because we're using

00:16:07.585 --> 00:16:08.305
<v Speaker 1>butane.

00:16:09.860 --> 00:16:11.699
<v Speaker 1>Oh, wait. Why did I copy this here?

00:16:11.699 --> 00:16:13.540
<v Speaker 1>What we want is an AMI.

00:16:15.139 --> 00:16:17.220
<v Speaker 1>And we add the image ID to this,

00:16:17.699 --> 00:16:19.300
<v Speaker 1>and then we connect the dots with our

00:16:19.300 --> 00:16:20.100
<v Speaker 1>instance.

00:16:20.660 --> 00:16:21.540
<v Speaker 1>There

00:16:21.540 --> 00:16:23.940
<v Speaker 1>we go. So that should put us in

00:16:24.785 --> 00:16:25.745
<v Speaker 1>the green.

00:16:25.985 --> 00:16:27.265
<v Speaker 1>So what do we have? We have a

00:16:27.265 --> 00:16:29.585
<v Speaker 1>region. We have an easy two instance.

00:16:30.065 --> 00:16:32.065
<v Speaker 1>The user data for the instance is generated

00:16:32.065 --> 00:16:34.705
<v Speaker 1>from the butane module, which knows and understands

00:16:34.705 --> 00:16:36.545
<v Speaker 1>the docker image that we want to run,

00:16:36.705 --> 00:16:38.785
<v Speaker 1>which also exposes ports, which goes as an

00:16:38.785 --> 00:16:41.390
<v Speaker 1>ingress rule, which automatically configured on our security

00:16:41.390 --> 00:16:43.950
<v Speaker 1>group. We have a key peer key pair

00:16:43.950 --> 00:16:45.950
<v Speaker 1>that is created for our instance and an

00:16:45.950 --> 00:16:47.070
<v Speaker 1>AMI configuration.

00:16:47.150 --> 00:16:50.030
<v Speaker 1>Still complaining, but I think we're okay. So

00:16:50.030 --> 00:16:51.150
<v Speaker 1>I'm gonna say merge,

00:16:51.905 --> 00:16:54.305
<v Speaker 1>and we merge this into

00:16:54.305 --> 00:16:55.825
<v Speaker 1>the state of the world. Now when you

00:16:55.825 --> 00:16:57.345
<v Speaker 1>merge the change set,

00:16:57.825 --> 00:17:00.145
<v Speaker 1>it gives you a plan, like a Terraform

00:17:00.145 --> 00:17:02.385
<v Speaker 1>plan of the actions that you need to

00:17:02.865 --> 00:17:05.425
<v Speaker 1>make in order to realize this configuration.

00:17:06.000 --> 00:17:07.280
<v Speaker 1>We can see here, we want to create

00:17:07.280 --> 00:17:09.440
<v Speaker 1>the key pair, security group, the instance, and

00:17:09.440 --> 00:17:11.760
<v Speaker 1>the ingress. So we can see select all

00:17:12.160 --> 00:17:13.200
<v Speaker 1>and apply.

00:17:13.760 --> 00:17:16.240
<v Speaker 1>And this will now spend the next thirty

00:17:16.240 --> 00:17:18.560
<v Speaker 1>to sixty seconds running through the system, creating

00:17:18.560 --> 00:17:20.079
<v Speaker 1>all of these resources

00:17:20.240 --> 00:17:20.799
<v Speaker 1>and

00:17:21.095 --> 00:17:25.095
<v Speaker 1>or maybe my STS access has now actually

00:17:25.494 --> 00:17:27.654
<v Speaker 1>disappeared. So let me reconfigure that.

00:17:28.295 --> 00:17:30.215
<v Speaker 1>So what tool is it using in the

00:17:30.215 --> 00:17:32.535
<v Speaker 1>background to apply these? Is it a CloudFormation?

00:17:32.535 --> 00:17:35.255
<v Speaker 1>Is it TerraForm? Is it Pulumi? Is it

00:17:35.255 --> 00:17:35.895
<v Speaker 1>something

00:17:36.140 --> 00:17:38.300
<v Speaker 1>some other thing? Or is it own its

00:17:38.300 --> 00:17:39.020
<v Speaker 1>own thing?

00:17:39.580 --> 00:17:41.660
<v Speaker 1>You know what? I'm not entirely sure. I

00:17:41.660 --> 00:17:43.340
<v Speaker 1>do think it's CloudFormation. I know it's using

00:17:43.340 --> 00:17:44.940
<v Speaker 1>the AWS CLI to do a lot of

00:17:44.940 --> 00:17:46.220
<v Speaker 1>this stuff. I don't know if it's actually

00:17:46.220 --> 00:17:47.740
<v Speaker 1>calling out and just using,

00:17:48.140 --> 00:17:49.260
<v Speaker 1>you know, AWS

00:17:50.025 --> 00:17:52.665
<v Speaker 1>compute key pair create. It it may very

00:17:52.665 --> 00:17:53.385
<v Speaker 1>well be.

00:17:54.905 --> 00:17:56.105
<v Speaker 1>So let's see if we can fix my

00:17:56.105 --> 00:17:57.465
<v Speaker 1>permissions real quick.

00:17:59.465 --> 00:18:02.105
<v Speaker 1>Any questions while we kinda wait for this

00:18:02.105 --> 00:18:03.545
<v Speaker 1>to catch up with me?

00:18:04.025 --> 00:18:05.145
<v Speaker 1>No. This is fascinating.

00:18:06.080 --> 00:18:07.360
<v Speaker 1>Hurry up and fail.

00:18:08.240 --> 00:18:09.200
<v Speaker 1>Infrastructure

00:18:09.200 --> 00:18:10.640
<v Speaker 1>is connect the dots.

00:18:12.160 --> 00:18:15.120
<v Speaker 1>Yes. Like I said in the earlier segment,

00:18:15.120 --> 00:18:16.720
<v Speaker 1>though, is that you still get the ability

00:18:16.720 --> 00:18:19.280
<v Speaker 1>to drop down and to code. So

00:18:19.815 --> 00:18:21.174
<v Speaker 1>we can take a look at that as

00:18:21.174 --> 00:18:21.654
<v Speaker 1>well

00:18:22.294 --> 00:18:23.575
<v Speaker 1>if we have enough time.

00:18:23.975 --> 00:18:25.255
<v Speaker 1>I think my what I might do is

00:18:25.255 --> 00:18:26.934
<v Speaker 1>just delete most of this and it will

00:18:26.934 --> 00:18:28.294
<v Speaker 1>just create a

00:18:28.455 --> 00:18:29.335
<v Speaker 1>key pair.

00:18:29.654 --> 00:18:31.654
<v Speaker 1>Well, maybe it'll catch up. And you said

00:18:31.654 --> 00:18:32.934
<v Speaker 1>this was multiplayer,

00:18:32.934 --> 00:18:34.695
<v Speaker 1>so you could invite someone to come in

00:18:34.695 --> 00:18:36.649
<v Speaker 1>and collaborate on this with you?

00:18:37.050 --> 00:18:38.730
<v Speaker 1>Yeah. So these workspaces,

00:18:38.730 --> 00:18:40.169
<v Speaker 1>can add more people to.

00:18:41.130 --> 00:18:42.570
<v Speaker 1>You can work on your chain sets at

00:18:42.570 --> 00:18:44.490
<v Speaker 1>the same time. You can go over architectures.

00:18:44.490 --> 00:18:46.169
<v Speaker 1>You can do whatever it is that you

00:18:46.330 --> 00:18:46.970
<v Speaker 1>need to do.

00:18:48.075 --> 00:18:49.914
<v Speaker 1>Okay. That thing that failed.

00:18:49.995 --> 00:18:52.075
<v Speaker 1>Alright. I actually see the key pair created.

00:18:52.075 --> 00:18:53.595
<v Speaker 1>That should be nice and quick. So we

00:18:53.595 --> 00:18:55.835
<v Speaker 1>can go over to the management console.

00:18:55.835 --> 00:18:58.234
<v Speaker 1>So we can go to easy two and

00:19:00.715 --> 00:19:01.515
<v Speaker 1>key pairs.

00:19:03.960 --> 00:19:09.320
<v Speaker 1>And those are SI2165SI2165.

00:19:09.720 --> 00:19:12.120
<v Speaker 1>That completes it. Yep.

00:19:12.920 --> 00:19:14.600
<v Speaker 1>You can see all the information here. So

00:19:14.600 --> 00:19:16.040
<v Speaker 1>if you do wanna grab this into your

00:19:16.040 --> 00:19:18.245
<v Speaker 1>local machine, you know, the private key is

00:19:18.245 --> 00:19:20.165
<v Speaker 1>there. You can save it locally. Of course,

00:19:20.165 --> 00:19:21.685
<v Speaker 1>you would have to add a new ingress

00:19:21.685 --> 00:19:24.485
<v Speaker 1>to expose the port 22 because obviously that's

00:19:24.485 --> 00:19:26.325
<v Speaker 1>not gonna be there by default. And even

00:19:26.325 --> 00:19:27.685
<v Speaker 1>with core west, I'm not sure how much

00:19:27.685 --> 00:19:29.045
<v Speaker 1>access you would get anyway.

00:19:29.605 --> 00:19:31.205
<v Speaker 1>We can see now our security group was

00:19:31.205 --> 00:19:31.605
<v Speaker 1>created.

00:19:32.299 --> 00:19:34.299
<v Speaker 1>We can come into our security group,

00:19:34.460 --> 00:19:36.380
<v Speaker 1>and we have our SI 2536.

00:19:36.380 --> 00:19:38.059
<v Speaker 1>So that's gonna create all of those resources

00:19:38.059 --> 00:19:40.220
<v Speaker 1>for us exposing NGINX

00:19:40.539 --> 00:19:41.100
<v Speaker 1>and

00:19:41.500 --> 00:19:42.539
<v Speaker 1>things are nice.

00:19:42.860 --> 00:19:44.460
<v Speaker 1>You have different views. So you can come

00:19:44.460 --> 00:19:46.380
<v Speaker 1>to the analyze view here where you can

00:19:46.380 --> 00:19:48.925
<v Speaker 1>click on, say, your key pair, instance,

00:19:48.925 --> 00:19:50.205
<v Speaker 1>and you can see the code that it

00:19:50.205 --> 00:19:51.245
<v Speaker 1>used to create it.

00:19:51.805 --> 00:19:53.805
<v Speaker 1>This looks like cloud formation to me, so

00:19:53.805 --> 00:19:55.405
<v Speaker 1>I suspect that it may be. But it

00:19:55.405 --> 00:19:57.805
<v Speaker 1>also could just be a JSON representation of

00:19:57.805 --> 00:20:00.125
<v Speaker 1>what gets passed to the AWS CLI. I'm

00:20:00.125 --> 00:20:01.085
<v Speaker 1>not that sure.

00:20:02.270 --> 00:20:04.830
<v Speaker 1>As things change, you can just reel refresh

00:20:04.830 --> 00:20:07.070
<v Speaker 1>the resource by clicking this button here.

00:20:07.230 --> 00:20:09.309
<v Speaker 1>If things change on the console, it will

00:20:09.309 --> 00:20:10.989
<v Speaker 1>actually pull those changes in.

00:20:12.429 --> 00:20:14.669
<v Speaker 1>And now when you're happy with your production,

00:20:14.669 --> 00:20:16.365
<v Speaker 1>you come and say, well, let's make a

00:20:16.365 --> 00:20:18.765
<v Speaker 1>new change set and say, we wanna deploy,

00:20:19.085 --> 00:20:20.684
<v Speaker 1>you know, bluefin,

00:20:20.845 --> 00:20:22.445
<v Speaker 1>which I know we can't really do.

00:20:22.765 --> 00:20:24.285
<v Speaker 1>But we could just make up our own

00:20:24.285 --> 00:20:26.365
<v Speaker 1>change set and start adding more resources to

00:20:26.365 --> 00:20:26.924
<v Speaker 1>our

00:20:27.165 --> 00:20:28.045
<v Speaker 1>entire workspace.

00:20:28.470 --> 00:20:30.309
<v Speaker 1>But it's a pretty select system. It's very

00:20:30.309 --> 00:20:31.990
<v Speaker 1>early. It's very cool. It's got a lot

00:20:31.990 --> 00:20:32.710
<v Speaker 1>of promise,

00:20:33.110 --> 00:20:34.789
<v Speaker 1>and I just can't wait for them to

00:20:34.789 --> 00:20:35.429
<v Speaker 1>support

00:20:35.590 --> 00:20:37.830
<v Speaker 1>more resources. Like, being able to provision a

00:20:37.830 --> 00:20:40.869
<v Speaker 1>Kubernetes cluster, an EKS cluster through this interface,

00:20:40.870 --> 00:20:42.150
<v Speaker 1>I think, would just be phenomenal.

00:20:43.135 --> 00:20:45.295
<v Speaker 1>And even to the point where it automatically

00:20:45.295 --> 00:20:47.855
<v Speaker 1>builds the provider for Kubernetes and lets me

00:20:47.855 --> 00:20:49.855
<v Speaker 1>just drag and drop on Kubernetes resources or

00:20:49.855 --> 00:20:51.215
<v Speaker 1>custom resources. Like,

00:20:51.535 --> 00:20:54.335
<v Speaker 1>I think the power and flexibility of this

00:20:54.335 --> 00:20:55.855
<v Speaker 1>platform could be a bit of a game

00:20:55.855 --> 00:20:58.169
<v Speaker 1>changer. Yeah. A lot of potential here. Yeah.

00:20:58.169 --> 00:20:58.809
<v Speaker 1>Definitely.

00:20:59.049 --> 00:20:59.769
<v Speaker 1>Alright.

00:20:59.929 --> 00:21:01.849
<v Speaker 1>Well, that's the first alphabets.

00:21:01.850 --> 00:21:02.649
<v Speaker 1>Hooray.

00:21:03.370 --> 00:21:05.690
<v Speaker 1>So we gotta do this again. Awesome. I

00:21:05.690 --> 00:21:07.610
<v Speaker 1>can't wait. There's enough software there that looks

00:21:07.610 --> 00:21:09.370
<v Speaker 1>like we're gonna run out of ideas anytime

00:21:09.370 --> 00:21:11.210
<v Speaker 1>soon. Not a chance. We'll run out of

00:21:11.210 --> 00:21:13.945
<v Speaker 1>trouble. We hope you enjoyed the demo of

00:21:13.945 --> 00:21:16.185
<v Speaker 1>both of these amazing tools. If you wanna

00:21:16.185 --> 00:21:17.785
<v Speaker 1>hear why we showed up for these tools,

00:21:17.785 --> 00:21:21.304
<v Speaker 1>check out the podcast available at alphabets.fm.

00:21:21.465 --> 00:21:23.065
<v Speaker 1>Until next week. See you soon.
