WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: d2791ed8-08b9-4f74-8c92-2a397811ecd1
Created: 2025-04-29T21:21:43.304Z
Duration: 5524.0107
Channels: 1

00:01:09.565 --> 00:01:12.925
<v Speaker 0>Hello and welcome to today's episode of Rawkode

00:01:12.925 --> 00:01:13.805
<v Speaker 0>live.

00:01:14.285 --> 00:01:16.845
<v Speaker 0>Before we get started, just wanna take ten

00:01:16.845 --> 00:01:18.685
<v Speaker 0>seconds to say thank you to my employer

00:01:18.685 --> 00:01:21.245
<v Speaker 0>Equinix Metal. Equinix Metal is a bare metal

00:01:21.245 --> 00:01:24.280
<v Speaker 0>cloud that you can try it for free.

00:01:24.440 --> 00:01:26.680
<v Speaker 0>Today, I am giving you Rawkode live as

00:01:26.680 --> 00:01:28.520
<v Speaker 0>a coupon code you can apply when you

00:01:28.520 --> 00:01:32.120
<v Speaker 0>register Equinix Medal, gives you $50 in credits.

00:01:32.440 --> 00:01:35.080
<v Speaker 0>That $50 allows you to spin up our

00:01:35.080 --> 00:01:38.395
<v Speaker 0>smallest instance for c three small for around

00:01:38.954 --> 00:01:41.435
<v Speaker 0>a hundred hours give or take depending on

00:01:41.435 --> 00:01:43.034
<v Speaker 0>what you do with it or you can

00:01:43.034 --> 00:01:44.875
<v Speaker 0>splurge that all really quickly and go over

00:01:44.875 --> 00:01:48.875
<v Speaker 0>into extra larges with a whopping 384

00:01:48.875 --> 00:01:49.835
<v Speaker 0>gig of ram.

00:01:51.260 --> 00:01:52.940
<v Speaker 0>If you are not watching live or even

00:01:52.940 --> 00:01:54.300
<v Speaker 0>if you are watching live and you want

00:01:54.300 --> 00:01:55.580
<v Speaker 0>to chat and ask questions, we do have

00:01:55.580 --> 00:01:57.500
<v Speaker 0>a discord but we do encourage comments on

00:01:57.500 --> 00:02:00.220
<v Speaker 0>the YouTube comment section too and please remember

00:02:00.220 --> 00:02:02.620
<v Speaker 0>to subscribe and thumb up this video. That

00:02:02.620 --> 00:02:03.900
<v Speaker 0>would be very much appreciated.

00:02:04.634 --> 00:02:06.314
<v Speaker 0>Today, I am gonna take a look at

00:02:06.314 --> 00:02:08.634
<v Speaker 0>Pulumi and I have the pleasure of being

00:02:08.634 --> 00:02:11.515
<v Speaker 0>joined by two engineers from Pulumi themselves.

00:02:13.595 --> 00:02:16.315
<v Speaker 0>Lee Briggs and Paul Stack. Hello. How are

00:02:16.315 --> 00:02:16.955
<v Speaker 0>you both doing?

00:02:17.880 --> 00:02:19.080
<v Speaker 1>Good. Thanks. You?

00:02:20.040 --> 00:02:23.960
<v Speaker 0>Yeah. I am doing very well. It's 5PM

00:02:23.960 --> 00:02:24.680
<v Speaker 0>in

00:02:25.080 --> 00:02:27.640
<v Speaker 0>very dark Glasgow, but not too bad.

00:02:28.280 --> 00:02:28.840
<v Speaker 0>How

00:02:29.160 --> 00:02:29.560
<v Speaker 0>about you?

00:02:30.474 --> 00:02:33.595
<v Speaker 1>The same. It's five 5PM in very dark

00:02:33.595 --> 00:02:36.474
<v Speaker 1>Northern Ireland, and it's miserable as always in

00:02:36.474 --> 00:02:37.275
<v Speaker 1>the winter.

00:02:37.915 --> 00:02:40.474
<v Speaker 2>Yeah. I'm sorry. Go ahead. No. It's good,

00:02:40.474 --> 00:02:41.275
<v Speaker 0>Esther. Yeah.

00:02:41.595 --> 00:02:44.555
<v Speaker 2>I'm in Seattle. Yeah. Despite the you you

00:02:44.555 --> 00:02:45.834
<v Speaker 2>probably hear that hybrid

00:02:46.420 --> 00:02:49.700
<v Speaker 2>northern British and American accent. So

00:02:49.940 --> 00:02:51.860
<v Speaker 2>I've been here three years now, and I

00:02:51.860 --> 00:02:52.580
<v Speaker 2>swapped

00:02:53.300 --> 00:02:54.100
<v Speaker 2>American

00:02:54.100 --> 00:02:56.980
<v Speaker 2>miserable weather for sorry. English miserable weather for

00:02:56.980 --> 00:02:59.155
<v Speaker 2>American miserable weather. Yeah. I was gonna say

00:02:59.155 --> 00:03:00.995
<v Speaker 0>between the three of us here and just

00:03:00.995 --> 00:03:04.035
<v Speaker 0>murky, dark, rainy places. Right? Absolutely.

00:03:04.035 --> 00:03:05.475
<v Speaker 2>Yeah. 100%.

00:03:06.515 --> 00:03:08.435
<v Speaker 0>Alright. Well, could you just both take thirty

00:03:08.435 --> 00:03:10.195
<v Speaker 0>seconds each, you know, introduce yourself, see what

00:03:10.195 --> 00:03:11.715
<v Speaker 0>you do, and then we'll get we cannot

00:03:11.715 --> 00:03:13.155
<v Speaker 0>talk about what we're gonna cover today and

00:03:13.155 --> 00:03:13.715
<v Speaker 0>take it from there.

00:03:15.230 --> 00:03:17.550
<v Speaker 0>Lee first. Why don't you go? Yeah. So

00:03:17.550 --> 00:03:19.790
<v Speaker 2>I'm a I've been at Pulumi, just gone

00:03:19.790 --> 00:03:20.670
<v Speaker 2>six months,

00:03:21.069 --> 00:03:23.230
<v Speaker 2>and I I guess my new my new

00:03:23.230 --> 00:03:24.510
<v Speaker 2>responsibility is

00:03:24.830 --> 00:03:26.350
<v Speaker 2>community engineer.

00:03:26.989 --> 00:03:27.870
<v Speaker 2>So I'm

00:03:28.165 --> 00:03:30.005
<v Speaker 2>kinda building out our content,

00:03:30.165 --> 00:03:31.365
<v Speaker 2>external content,

00:03:32.405 --> 00:03:33.925
<v Speaker 2>and our workshops

00:03:33.925 --> 00:03:37.045
<v Speaker 2>and how to use Pulumi and showing examples.

00:03:37.605 --> 00:03:40.325
<v Speaker 2>Before that, I was working with Paul on

00:03:40.325 --> 00:03:42.820
<v Speaker 2>the, what we call, the platform teams. That's

00:03:42.820 --> 00:03:44.580
<v Speaker 2>our open source CLI

00:03:44.660 --> 00:03:47.460
<v Speaker 2>and all the SDKs and and the providers

00:03:47.460 --> 00:03:49.860
<v Speaker 2>that we we we currently support.

00:03:51.700 --> 00:03:54.100
<v Speaker 1>And as Lee said, I'm Paul Stack. I'm

00:03:54.100 --> 00:03:56.100
<v Speaker 1>Stack seventy two on Twitter and pretty much

00:03:56.100 --> 00:03:57.060
<v Speaker 1>everywhere on the Internet.

00:03:57.564 --> 00:03:58.525
<v Speaker 1>I

00:03:58.525 --> 00:04:01.084
<v Speaker 1>predominantly work on the platform side, so I

00:04:01.084 --> 00:04:02.844
<v Speaker 1>have a lot to do with the providers

00:04:02.844 --> 00:04:04.685
<v Speaker 1>and the CLI, and I'm usually the one

00:04:04.685 --> 00:04:06.924
<v Speaker 1>that causes the bugs in in those parts

00:04:06.924 --> 00:04:07.805
<v Speaker 1>of the system.

00:04:08.844 --> 00:04:10.205
<v Speaker 0>Nice. Awesome.

00:04:10.444 --> 00:04:13.004
<v Speaker 0>So why don't we kind of

00:04:13.320 --> 00:04:14.200
<v Speaker 0>let's

00:04:14.200 --> 00:04:15.480
<v Speaker 0>let's go back to the basics. Right? Why

00:04:15.480 --> 00:04:17.560
<v Speaker 0>don't we give a patch about what Pulumi

00:04:17.560 --> 00:04:19.160
<v Speaker 0>is? Right? I've got the homepage here. It

00:04:19.160 --> 00:04:22.360
<v Speaker 0>says modern infrastructure as code. So what is

00:04:22.360 --> 00:04:23.880
<v Speaker 0>what is Pulumi doing? What's the problem in

00:04:23.880 --> 00:04:25.480
<v Speaker 0>solving? And what makes it different from other

00:04:25.480 --> 00:04:26.680
<v Speaker 0>tools in its its marketplace?

00:04:27.535 --> 00:04:29.695
<v Speaker 2>Yeah. I'll take this one. So

00:04:30.095 --> 00:04:32.414
<v Speaker 2>if if you're familiar with infrastructures code, you've

00:04:32.414 --> 00:04:34.815
<v Speaker 2>probably used some of our competing products.

00:04:35.694 --> 00:04:38.495
<v Speaker 2>And they generally either use a configuration language

00:04:38.495 --> 00:04:40.095
<v Speaker 2>or a DSL,

00:04:41.060 --> 00:04:41.860
<v Speaker 2>like a

00:04:42.260 --> 00:04:43.300
<v Speaker 2>wraparound

00:04:43.460 --> 00:04:45.620
<v Speaker 2>language that allows you to kind of do

00:04:45.620 --> 00:04:47.700
<v Speaker 2>declarative infrastructure as code.

00:04:48.340 --> 00:04:50.660
<v Speaker 2>And Pulumi does not take that approach. It

00:04:50.660 --> 00:04:52.740
<v Speaker 2>it uses imperative languages

00:04:52.740 --> 00:04:55.615
<v Speaker 2>or languages that you may be familiar with

00:04:55.615 --> 00:04:57.535
<v Speaker 2>in your software development life cycle.

00:04:58.414 --> 00:05:00.655
<v Speaker 2>And it does some magic in our engine

00:05:00.655 --> 00:05:04.095
<v Speaker 2>to turn that imperative code into declarative infrastructure.

00:05:05.055 --> 00:05:07.534
<v Speaker 2>And so it, you know, it dramatically

00:05:07.534 --> 00:05:08.335
<v Speaker 2>helps,

00:05:08.495 --> 00:05:11.100
<v Speaker 2>you know, people who are already familiar with

00:05:11.100 --> 00:05:14.140
<v Speaker 2>standard software development languages like Go,

00:05:14.460 --> 00:05:16.140
<v Speaker 2>the dot net ecosystem,

00:05:16.460 --> 00:05:17.820
<v Speaker 2>the Node. Js ecosystem,

00:05:17.980 --> 00:05:18.940
<v Speaker 2>and Python

00:05:19.580 --> 00:05:21.180
<v Speaker 2>that, you know, it allows you to kind

00:05:21.180 --> 00:05:24.380
<v Speaker 2>of really quickly iterate on on that infrastructure

00:05:23.535 --> 00:05:25.215
<v Speaker 2>'s code. I think we're hopefully gonna see

00:05:25.215 --> 00:05:25.935
<v Speaker 2>that today.

00:05:27.055 --> 00:05:29.215
<v Speaker 0>Nice. So what what is our goal today?

00:05:29.215 --> 00:05:30.415
<v Speaker 0>What are we what are what are we

00:05:30.415 --> 00:05:31.135
<v Speaker 0>gonna do?

00:05:31.935 --> 00:05:33.775
<v Speaker 2>As as I said on Twitter,

00:05:33.935 --> 00:05:35.855
<v Speaker 2>this is a very lofty and an an

00:05:35.855 --> 00:05:36.655
<v Speaker 2>ambitious goal.

00:05:37.789 --> 00:05:40.030
<v Speaker 2>But the the idea is we're going to

00:05:40.030 --> 00:05:42.270
<v Speaker 2>kind of use Pulumi's

00:05:42.509 --> 00:05:43.710
<v Speaker 2>brand new

00:05:44.190 --> 00:05:45.870
<v Speaker 2>automation API

00:05:46.190 --> 00:05:48.830
<v Speaker 2>to show how you can build a,

00:05:49.150 --> 00:05:52.265
<v Speaker 2>like, a reusable command line tool to kind

00:05:52.265 --> 00:05:54.745
<v Speaker 2>of create infrastructure. And this is a good

00:05:54.745 --> 00:05:56.665
<v Speaker 2>example of something you might build if you

00:05:56.665 --> 00:05:58.905
<v Speaker 2>are building a platform. So

00:05:59.545 --> 00:06:01.945
<v Speaker 2>something that the the the state of DevOps

00:06:01.945 --> 00:06:03.865
<v Speaker 2>report came out last week that Puppet does.

00:06:04.210 --> 00:06:06.210
<v Speaker 2>And I think it was a very high

00:06:06.210 --> 00:06:09.250
<v Speaker 2>number, like something in the 70% of organizations

00:06:09.409 --> 00:06:11.090
<v Speaker 2>are trying to build these platforms,

00:06:11.330 --> 00:06:15.169
<v Speaker 2>like user friendly ways of provisioning infrastructure.

00:06:15.970 --> 00:06:17.775
<v Speaker 2>And one of the great ways is the

00:06:17.855 --> 00:06:19.215
<v Speaker 2>one of great things about Pulumi is it

00:06:19.215 --> 00:06:20.575
<v Speaker 2>allows you to do this in languages you

00:06:20.575 --> 00:06:22.815
<v Speaker 2>feel familiar with, but also make them reusable

00:06:22.815 --> 00:06:25.375
<v Speaker 2>and share them between multiple people.

00:06:26.095 --> 00:06:27.855
<v Speaker 1>If you think of what, like, Forman used

00:06:27.855 --> 00:06:30.095
<v Speaker 1>to be in the VMware and the metal

00:06:30.095 --> 00:06:32.509
<v Speaker 1>sorta area, think of, like, being able to

00:06:32.509 --> 00:06:35.470
<v Speaker 1>build that type of abstraction, but specifically for

00:06:35.470 --> 00:06:36.110
<v Speaker 1>your

00:06:36.750 --> 00:06:38.510
<v Speaker 1>infrastructure and your company

00:06:38.910 --> 00:06:40.430
<v Speaker 1>and be able to, like, drive that using

00:06:40.430 --> 00:06:41.150
<v Speaker 1>Pulumi.

00:06:42.030 --> 00:06:44.349
<v Speaker 0>So, Paul, being on the the platform team

00:06:44.349 --> 00:06:47.069
<v Speaker 0>at Pulumi then, is this something that user

00:06:46.095 --> 00:06:48.895
<v Speaker 0>experiment with yourselves on your own platform as

00:06:48.895 --> 00:06:49.295
<v Speaker 0>well?

00:06:49.695 --> 00:06:50.735
<v Speaker 1>Yeah. So,

00:06:51.055 --> 00:06:53.455
<v Speaker 1>of course, like, this is something that's actually

00:06:53.455 --> 00:06:54.175
<v Speaker 1>gonna potentially

00:06:54.895 --> 00:06:56.575
<v Speaker 1>be used to replace some of our, like,

00:06:56.575 --> 00:06:59.135
<v Speaker 1>infrastructure testing and you know, because we've we've

00:06:59.135 --> 00:07:01.775
<v Speaker 1>built up this sophisticated, like, infrastructure testing suite

00:07:02.070 --> 00:07:03.750
<v Speaker 1>that runs via

00:07:04.230 --> 00:07:05.270
<v Speaker 1>Go test.

00:07:05.430 --> 00:07:07.270
<v Speaker 1>And we think that we can probably swap

00:07:07.270 --> 00:07:09.030
<v Speaker 1>that out in the future and be able

00:07:09.030 --> 00:07:10.790
<v Speaker 1>to use this runtime API to be able

00:07:10.790 --> 00:07:11.750
<v Speaker 1>to do it because

00:07:11.990 --> 00:07:14.310
<v Speaker 1>it actually gives you access to the the

00:07:14.310 --> 00:07:16.545
<v Speaker 1>Pulumi commands that we use and they're wrapped

00:07:16.545 --> 00:07:17.665
<v Speaker 1>in a way that makes them a lot

00:07:17.665 --> 00:07:20.545
<v Speaker 1>more usable and friendly rather than, like, format

00:07:20.545 --> 00:07:21.745
<v Speaker 1>dot sprint f,

00:07:21.985 --> 00:07:24.145
<v Speaker 1>Pulumi up, and so on.

00:07:25.505 --> 00:07:28.145
<v Speaker 0>Alright. So I if I I mean, my

00:07:28.145 --> 00:07:30.990
<v Speaker 0>naive understanding, which is hopefully gonna get better

00:07:30.990 --> 00:07:33.230
<v Speaker 0>as we go, but we're gonna build a

00:07:33.790 --> 00:07:35.070
<v Speaker 0>command line application

00:07:35.150 --> 00:07:37.470
<v Speaker 0>that has some of the Pulumi

00:07:37.470 --> 00:07:40.750
<v Speaker 0>API or runtime components baked into it, allowing

00:07:40.750 --> 00:07:41.710
<v Speaker 0>me to

00:07:42.350 --> 00:07:46.255
<v Speaker 0>modify my state of my Equinix metal hardware

00:07:46.255 --> 00:07:48.095
<v Speaker 0>and store that state somewhere and allow me

00:07:48.095 --> 00:07:50.415
<v Speaker 0>to make updates to it. Is that naive

00:07:50.415 --> 00:07:52.655
<v Speaker 0>guess roughly what we're doing? That's a pretty

00:07:52.655 --> 00:07:54.015
<v Speaker 2>app accurate representation.

00:07:54.015 --> 00:07:55.055
<v Speaker 2>And the the way

00:07:55.535 --> 00:07:56.895
<v Speaker 2>like, I I think I I as I

00:07:56.895 --> 00:07:58.735
<v Speaker 2>said on Twitter, like, I have intentionally

00:07:59.400 --> 00:08:02.760
<v Speaker 2>done very, very minimal research here, so this

00:08:02.760 --> 00:08:04.120
<v Speaker 2>may not be successful.

00:08:04.520 --> 00:08:05.720
<v Speaker 2>I think an hour and a half is

00:08:05.720 --> 00:08:07.960
<v Speaker 2>pretty optimistic, but we'll see. But the idea

00:08:07.960 --> 00:08:09.400
<v Speaker 2>here is to show how,

00:08:09.960 --> 00:08:12.120
<v Speaker 2>you know, you would go through this process

00:08:12.634 --> 00:08:14.075
<v Speaker 2>if you were going to,

00:08:14.555 --> 00:08:16.634
<v Speaker 2>you know, help. But let's say you're in

00:08:16.634 --> 00:08:17.515
<v Speaker 2>a development

00:08:17.595 --> 00:08:21.115
<v Speaker 2>organization and you wanna provide the capability for

00:08:21.275 --> 00:08:23.675
<v Speaker 2>people who aren't familiar with infrastructure's code to

00:08:23.675 --> 00:08:26.970
<v Speaker 2>just create testing environments or create,

00:08:27.290 --> 00:08:30.170
<v Speaker 2>you know, just even packet in sorry. Equinix

00:08:30.170 --> 00:08:31.210
<v Speaker 2>metal instances

00:08:31.450 --> 00:08:32.010
<v Speaker 2>to

00:08:32.330 --> 00:08:34.730
<v Speaker 2>to provision them nice and easily without having

00:08:34.730 --> 00:08:36.250
<v Speaker 2>to write a bunch of, like, a language

00:08:36.250 --> 00:08:37.370
<v Speaker 2>they don't understand.

00:08:38.490 --> 00:08:40.169
<v Speaker 2>You might go through the process that we're

00:08:40.169 --> 00:08:41.210
<v Speaker 2>gonna go through today, basically.

00:08:42.225 --> 00:08:43.024
<v Speaker 0>Awesome.

00:08:43.505 --> 00:08:45.584
<v Speaker 0>Let me get my screen on here then.

00:08:45.584 --> 00:08:47.745
<v Speaker 0>So it's it's great that you said, you

00:08:47.745 --> 00:08:49.665
<v Speaker 0>know, nothing is really done in advance and

00:08:49.665 --> 00:08:51.185
<v Speaker 0>we're pretty much weighing in this big time

00:08:51.185 --> 00:08:53.024
<v Speaker 0>here because at the start of most of

00:08:53.024 --> 00:08:54.464
<v Speaker 0>my effect, at the start of every episode,

00:08:54.464 --> 00:08:56.225
<v Speaker 0>say, hey, we don't really do anything upfront.

00:08:56.225 --> 00:08:58.279
<v Speaker 0>This is transparent. We try and take you

00:08:58.279 --> 00:09:00.040
<v Speaker 0>through every step you need to do yourself.

00:09:00.120 --> 00:09:01.879
<v Speaker 0>And what I normally do is say here

00:09:01.879 --> 00:09:03.560
<v Speaker 0>is what we actually did do in advance

00:09:03.560 --> 00:09:06.199
<v Speaker 0>but in this case, it's nothing.

00:09:06.680 --> 00:09:07.160
<v Speaker 0>So

00:09:07.560 --> 00:09:09.639
<v Speaker 0>I've got an empty go mod file. I've

00:09:09.639 --> 00:09:11.319
<v Speaker 0>got an empty read me file and an

00:09:11.319 --> 00:09:14.755
<v Speaker 0>empty CLI directory. So we are starting from

00:09:15.634 --> 00:09:18.115
<v Speaker 0>as we'd say in Glasgow, hee haw. Hee

00:09:18.115 --> 00:09:18.995
<v Speaker 2>haw indeed.

00:09:19.315 --> 00:09:21.875
<v Speaker 2>Yeah. So I think the first thing that

00:09:21.875 --> 00:09:24.514
<v Speaker 2>we're gonna wanna do here is instead of

00:09:24.514 --> 00:09:26.274
<v Speaker 2>kinda like diving straight in and building a

00:09:26.274 --> 00:09:28.020
<v Speaker 2>CLI, I think what we probably wanna do

00:09:28.020 --> 00:09:30.500
<v Speaker 2>first is build a functioning

00:09:30.500 --> 00:09:32.180
<v Speaker 2>Pulumi program

00:09:32.980 --> 00:09:34.340
<v Speaker 2>so that we can get all the debug

00:09:34.340 --> 00:09:36.580
<v Speaker 2>ability. I mean, you're not exactly gonna build

00:09:36.580 --> 00:09:38.660
<v Speaker 2>a CLI right away. So I think the

00:09:38.660 --> 00:09:40.020
<v Speaker 2>best thing to do is just create a

00:09:40.020 --> 00:09:42.965
<v Speaker 2>new empty directory directory called program or, yeah,

00:09:42.965 --> 00:09:44.005
<v Speaker 2>something like that.

00:09:46.725 --> 00:09:49.445
<v Speaker 2>I don't think that will work because you've

00:09:49.445 --> 00:09:51.205
<v Speaker 2>got things in this directory, so you'll need

00:09:51.205 --> 00:09:52.325
<v Speaker 2>an empty directory.

00:09:52.645 --> 00:09:54.565
<v Speaker 0>It is Now you can pass dash dash

00:09:54.565 --> 00:09:55.045
<v Speaker 1>force.

00:09:55.610 --> 00:09:57.370
<v Speaker 1>So, like, what the command that we should

00:09:57.370 --> 00:09:58.970
<v Speaker 1>run here will be Pulumi new, and then

00:09:58.970 --> 00:10:00.410
<v Speaker 1>we can say packet

00:10:00.490 --> 00:10:01.370
<v Speaker 1>dash

00:10:02.170 --> 00:10:04.250
<v Speaker 1>whatever the language we want to use, dash

00:10:04.250 --> 00:10:07.370
<v Speaker 1>dash force, and Pulumi will scaffold an application.

00:10:07.450 --> 00:10:09.210
<v Speaker 1>Now, David, you'll have to forgive us here.

00:10:09.210 --> 00:10:10.890
<v Speaker 1>I know we have to rename these templates

00:10:11.405 --> 00:10:12.685
<v Speaker 1>to Equinix,

00:10:13.005 --> 00:10:14.685
<v Speaker 1>but we'll get to that when we rename

00:10:14.685 --> 00:10:17.485
<v Speaker 1>the the provider for you. Don't worry. Our

00:10:17.485 --> 00:10:19.565
<v Speaker 0>our team is still doing that ourselves now,

00:10:19.565 --> 00:10:21.405
<v Speaker 0>and we've we've been Equinix medal for about

00:10:21.405 --> 00:10:22.925
<v Speaker 0>a month. So it's it's not an easy

00:10:22.925 --> 00:10:24.285
<v Speaker 0>process, but we're getting there.

00:10:25.230 --> 00:10:27.310
<v Speaker 0>So let's just call this new thing. I'm

00:10:27.310 --> 00:10:29.709
<v Speaker 0>not fussed about the project name. Yeah. Not

00:10:29.709 --> 00:10:31.470
<v Speaker 2>at all. DevStack.

00:10:31.470 --> 00:10:31.950
<v Speaker 2>Yeah.

00:10:35.630 --> 00:10:36.990
<v Speaker 1>Make it very secure.

00:10:39.149 --> 00:10:41.365
<v Speaker 0>Password a b c? Yep.

00:10:41.445 --> 00:10:42.565
<v Speaker 1>One two three.

00:10:42.885 --> 00:10:44.485
<v Speaker 1>Bang. It's usually mine

00:10:44.645 --> 00:10:47.365
<v Speaker 0>for demo. It looks like you're storing your

00:10:47.365 --> 00:10:50.005
<v Speaker 2>state in a bucket. Is that right?

00:10:50.404 --> 00:10:51.445
<v Speaker 0>Oh, shit.

00:10:51.605 --> 00:10:53.045
<v Speaker 0>No. It looks like Probably need to log

00:10:53.045 --> 00:10:54.485
<v Speaker 2>in. Probably need to log in.

00:10:57.570 --> 00:10:59.090
<v Speaker 0>Let's do it. There we go. We don't

00:10:59.090 --> 00:11:01.650
<v Speaker 0>wanna use my production bucket, manual bucket for

00:11:01.650 --> 00:11:02.370
<v Speaker 0>that. So

00:11:03.650 --> 00:11:05.650
<v Speaker 0>Yes. And all I need to do fine.

00:11:05.650 --> 00:11:07.330
<v Speaker 0>It's fine. Let's just pop this open. So

00:11:09.845 --> 00:11:11.845
<v Speaker 0>I'll

00:11:11.845 --> 00:11:13.365
<v Speaker 0>just rename that stack because I'm pretty sure

00:11:13.365 --> 00:11:15.125
<v Speaker 0>I probably already got a dev one and

00:11:15.125 --> 00:11:16.964
<v Speaker 0>we'll call this live. I won't have a

00:11:16.964 --> 00:11:18.805
<v Speaker 0>live stack, so we should be okay from

00:11:18.805 --> 00:11:21.125
<v Speaker 0>there. Encryption still won't need to change, will

00:11:21.125 --> 00:11:22.644
<v Speaker 0>it? That should be alright? Should be fine.

00:11:22.910 --> 00:11:25.310
<v Speaker 0>Okay. So we have an empty

00:11:25.550 --> 00:11:26.750
<v Speaker 0>Pulumi project

00:11:26.910 --> 00:11:27.870
<v Speaker 0>and go.

00:11:29.390 --> 00:11:29.950
<v Speaker 2>Yes.

00:11:30.430 --> 00:11:31.710
<v Speaker 0>You just want me

00:11:32.270 --> 00:11:34.030
<v Speaker 0>so you said what we're gonna do is,

00:11:34.030 --> 00:11:35.310
<v Speaker 0>you know, write this as if it is

00:11:35.375 --> 00:11:37.695
<v Speaker 0>provisional and infrastructures code web Pulumi, and then

00:11:37.695 --> 00:11:38.815
<v Speaker 0>we're gonna try and see a lot. So

00:11:38.815 --> 00:11:40.415
<v Speaker 0>should I just spend this up a fresh

00:11:40.415 --> 00:11:42.975
<v Speaker 0>device with some basic user base? Yeah. I

00:11:42.975 --> 00:11:44.735
<v Speaker 2>think the best thing to do is spin

00:11:44.735 --> 00:11:47.135
<v Speaker 2>spin up a fresh device. So you'll have

00:11:47.135 --> 00:11:48.415
<v Speaker 2>to obviously do your

00:11:48.894 --> 00:11:50.770
<v Speaker 2>if you wanna create a new project or

00:11:50.770 --> 00:11:51.890
<v Speaker 2>a new organization.

00:11:53.490 --> 00:11:55.090
<v Speaker 2>I I generally just

00:11:55.810 --> 00:11:57.410
<v Speaker 2>when I'm interfacing with back end, I do

00:11:57.410 --> 00:11:58.450
<v Speaker 2>a lookup project.

00:12:01.410 --> 00:12:02.770
<v Speaker 0>Oh, I normally just pass it in as

00:12:02.770 --> 00:12:04.530
<v Speaker 0>config. I'll just do that because it's what

00:12:04.530 --> 00:12:06.925
<v Speaker 0>I'm familiar with. Yeah. Just go down the

00:12:06.925 --> 00:12:09.165
<v Speaker 2>path that you're familiar with. And then

00:12:10.365 --> 00:12:12.925
<v Speaker 2>the the once the project's done, then just

00:12:12.925 --> 00:12:14.685
<v Speaker 2>just new device, I think, is probably a

00:12:14.685 --> 00:12:15.324
<v Speaker 2>good start.

00:12:15.725 --> 00:12:17.319
<v Speaker 0>This is great because now I get to

00:12:17.319 --> 00:12:19.079
<v Speaker 0>just do Pulumi how I do Pulumi, and

00:12:19.079 --> 00:12:20.680
<v Speaker 0>then you can fix all my broken bad

00:12:20.680 --> 00:12:22.199
<v Speaker 0>habits as well while we're here.

00:12:23.000 --> 00:12:24.920
<v Speaker 1>Or the alternative is that Lee and I

00:12:24.920 --> 00:12:27.160
<v Speaker 1>actually learned from how we're leader.

00:12:28.920 --> 00:12:31.399
<v Speaker 0>Alright. So normally, I would say project ID.

00:12:36.025 --> 00:12:36.904
<v Speaker 0>It's

00:12:36.904 --> 00:12:38.985
<v Speaker 0>there. Pulumi stack in I guess because I

00:12:39.225 --> 00:12:40.105
<v Speaker 0>broke that.

00:12:42.345 --> 00:12:44.345
<v Speaker 0>Give it my

00:12:45.160 --> 00:12:47.160
<v Speaker 0>Alright. Then we set my project ID in

00:12:47.160 --> 00:12:47.960
<v Speaker 0>a config.

00:12:48.280 --> 00:12:50.520
<v Speaker 0>I should update our Pulumi live file which

00:12:50.520 --> 00:12:53.240
<v Speaker 0>I'm happy with. Nice. Okay. So from here,

00:12:53.240 --> 00:12:54.760
<v Speaker 0>what I would normally do, and I normally

00:12:54.760 --> 00:12:56.280
<v Speaker 0>do this in typescript, so this will be

00:12:56.280 --> 00:12:58.200
<v Speaker 0>fun for me. But packet

00:12:58.200 --> 00:12:59.400
<v Speaker 0>dot config.

00:13:02.225 --> 00:13:04.625
<v Speaker 0>That's fine. And TypeScript, that would be Pulumi

00:13:04.704 --> 00:13:07.264
<v Speaker 0>oh, yeah. Pulumi dot config. Wrong object.

00:13:09.264 --> 00:13:11.345
<v Speaker 2>You need to assign it to a variable.

00:13:11.345 --> 00:13:14.144
<v Speaker 2>So Yeah. So the Go SDK is a

00:13:14.144 --> 00:13:15.264
<v Speaker 1>wee bit more

00:13:15.569 --> 00:13:17.810
<v Speaker 1>verbose than than the TypeScript

00:13:19.490 --> 00:13:20.209
<v Speaker 1>examples.

00:13:21.089 --> 00:13:23.730
<v Speaker 0>Alright. How'd I get the config in Go?

00:13:28.290 --> 00:13:29.755
<v Speaker 2>I yeah. Expecting me to know this stuff

00:13:29.755 --> 00:13:31.115
<v Speaker 2>off the top of my head. You

00:13:33.755 --> 00:13:35.755
<v Speaker 2>let me find this example right here.

00:13:38.475 --> 00:13:40.635
<v Speaker 0>I'll go ahead with the device. So we

00:13:40.635 --> 00:13:42.155
<v Speaker 1>should actually be able to just new up

00:13:42.315 --> 00:13:45.029
<v Speaker 1>so config dot new, pass in a context

00:13:45.430 --> 00:13:47.589
<v Speaker 1>and an empty string, and that gives you

00:13:47.589 --> 00:13:49.990
<v Speaker 1>access to everything that's inside what's going on

00:13:49.990 --> 00:13:51.829
<v Speaker 1>in here. And then you're able to pull

00:13:51.829 --> 00:13:54.389
<v Speaker 1>everything out of context of the the config

00:13:54.389 --> 00:13:55.110
<v Speaker 1>package.

00:13:56.790 --> 00:13:57.110
<v Speaker 1>So

00:13:57.670 --> 00:13:58.949
<v Speaker 0>I didn't see a config package.

00:14:02.955 --> 00:14:04.955
<v Speaker 2>Oh, you it's it's in a separate import

00:14:04.955 --> 00:14:06.635
<v Speaker 1>it. It's in a separate, so it'll be

00:14:06.795 --> 00:14:08.315
<v Speaker 1>yeah. Of

00:14:08.315 --> 00:14:10.475
<v Speaker 0>course. It's in go. So it you need

00:14:10.475 --> 00:14:12.315
<v Speaker 1>to import Pulumi slash config.

00:14:13.070 --> 00:14:14.110
<v Speaker 2>There we go.

00:14:14.830 --> 00:14:16.510
<v Speaker 1>There we go. So now you should have

00:14:16.510 --> 00:14:18.430
<v Speaker 1>con config dot new.

00:14:19.790 --> 00:14:22.190
<v Speaker 0>There we go. Right. Pass it in context

00:14:23.709 --> 00:14:26.110
<v Speaker 1>and an empty string so you actually access

00:14:26.110 --> 00:14:28.585
<v Speaker 1>the the top level namespace. There we go.

00:14:28.585 --> 00:14:30.505
<v Speaker 1>Now you can actually pull the config variables

00:14:30.505 --> 00:14:32.745
<v Speaker 1>out. And is this the same API, which

00:14:32.745 --> 00:14:34.825
<v Speaker 0>I imagine it is? Yep. Yep. The require

00:14:34.825 --> 00:14:35.705
<v Speaker 0>project

00:14:35.705 --> 00:14:38.505
<v Speaker 0>ID, which is Maybe capital r just because

00:14:38.505 --> 00:14:39.305
<v Speaker 1>it's Go.

00:14:39.865 --> 00:14:43.530
<v Speaker 1>And it'll probably return an error. Yep.

00:14:44.810 --> 00:14:46.730
<v Speaker 0>Oh, no. No. It doesn't require. It doesn't.

00:14:46.650 --> 00:14:49.530
<v Speaker 1>I apologize. It doesn't either. Alright. Nice. Okay.

00:14:49.530 --> 00:14:50.970
<v Speaker 0>So that's good.

00:14:51.450 --> 00:14:53.305
<v Speaker 0>Now I can create a device. We'll save

00:14:53.305 --> 00:14:54.985
<v Speaker 0>device, and I'm gonna assume this will give

00:14:54.985 --> 00:14:56.584
<v Speaker 0>me an error. That definitely just give you

00:14:56.584 --> 00:14:57.464
<v Speaker 2>an error. Yeah.

00:14:58.985 --> 00:15:00.105
<v Speaker 0>New device.

00:15:00.665 --> 00:15:03.305
<v Speaker 0>Yeah. I see. We're clicking there. Alright. Context.

00:15:04.105 --> 00:15:06.024
<v Speaker 0>Name. So we'll call this

00:15:07.389 --> 00:15:09.389
<v Speaker 0>what are we gonna avoid this? Does it

00:15:09.389 --> 00:15:11.630
<v Speaker 0>matter? Rawkode live. No. I think you could

00:15:11.630 --> 00:15:13.870
<v Speaker 2>just give it's just it's just any any

00:15:13.870 --> 00:15:15.550
<v Speaker 2>kind of yeah.

00:15:16.430 --> 00:15:19.310
<v Speaker 2>And then it will take a struct

00:15:20.750 --> 00:15:23.389
<v Speaker 1>A pointer to packet.deviceorgs.

00:15:23.415 --> 00:15:24.455
<v Speaker 2>There we go.

00:15:32.535 --> 00:15:34.855
<v Speaker 0>Alright. Let's see. Facilities.

00:15:35.255 --> 00:15:36.774
<v Speaker 0>A m six.

00:15:38.870 --> 00:15:40.390
<v Speaker 1>Is there any specific reason why you choose

00:15:40.390 --> 00:15:41.590
<v Speaker 1>AM six or is that just the one

00:15:41.590 --> 00:15:42.710
<v Speaker 1>that's closest to you?

00:15:43.350 --> 00:15:45.670
<v Speaker 0>Amsterdam's closest to me. That's all. Okay.

00:15:46.070 --> 00:15:49.830
<v Speaker 0>Plan, let's go C3MediumX86.

00:15:54.875 --> 00:15:57.035
<v Speaker 0>What else do I need? My project ID,

00:15:57.035 --> 00:15:58.155
<v Speaker 0>which we got here.

00:15:58.635 --> 00:16:00.955
<v Speaker 2>So we probably need to stop here because

00:16:00.955 --> 00:16:01.595
<v Speaker 2>the

00:16:02.075 --> 00:16:03.435
<v Speaker 2>the Go SDK

00:16:03.515 --> 00:16:05.115
<v Speaker 2>is got custom types.

00:16:06.000 --> 00:16:07.680
<v Speaker 2>So you'll see the facilities.

00:16:07.680 --> 00:16:09.440
<v Speaker 2>It's probably telling you that it doesn't take

00:16:09.440 --> 00:16:12.400
<v Speaker 2>a type of array. It takes a Pulumi

00:16:12.400 --> 00:16:13.440
<v Speaker 2>dot string array.

00:16:19.145 --> 00:16:22.105
<v Speaker 2>And then, yeah, and then you can do

00:16:22.985 --> 00:16:26.265
<v Speaker 2>a normal Pulumi dot string. If you're familiar

00:16:26.265 --> 00:16:29.865
<v Speaker 2>with the, AWS SDK, this is kind of

00:16:29.865 --> 00:16:31.385
<v Speaker 2>a similar kind of pattern.

00:16:33.190 --> 00:16:34.150
<v Speaker 2>There we go.

00:16:36.070 --> 00:16:39.510
<v Speaker 2>And then that's Just messing something. Right? That's

00:16:39.510 --> 00:16:40.950
<v Speaker 0>all I was complaining about. So the Well,

00:16:40.950 --> 00:16:42.470
<v Speaker 1>you need to wrap the strings in Pulumi

00:16:42.470 --> 00:16:43.589
<v Speaker 1>dot string as well.

00:16:44.550 --> 00:16:46.230
<v Speaker 2>So your plan will be a Pulumi dot

00:16:46.230 --> 00:16:47.589
<v Speaker 2>string. There we go.

00:16:48.605 --> 00:16:50.285
<v Speaker 0>Ah, you can tell I don't use this

00:16:50.285 --> 00:16:51.245
<v Speaker 0>API much.

00:16:51.805 --> 00:16:53.325
<v Speaker 2>You get used to it. I I kinda

00:16:53.325 --> 00:16:55.485
<v Speaker 2>like it. The the the strong typing is

00:16:55.485 --> 00:16:56.605
<v Speaker 2>really, really helpful.

00:16:57.405 --> 00:17:00.045
<v Speaker 2>I think project ID oh, no. It's the

00:17:00.125 --> 00:17:01.405
<v Speaker 2>you need a capital d there.

00:17:02.850 --> 00:17:03.810
<v Speaker 0>There we go.

00:17:04.130 --> 00:17:05.649
<v Speaker 0>What am I missing?

00:17:06.450 --> 00:17:08.049
<v Speaker 0>Oh, it's just not used. Okay. So that's

00:17:08.049 --> 00:17:08.690
<v Speaker 0>enough.

00:17:09.329 --> 00:17:11.170
<v Speaker 1>And then we need to pass that that

00:17:11.170 --> 00:17:13.410
<v Speaker 1>device as a as a pointer. Yeah. There

00:17:13.410 --> 00:17:14.210
<v Speaker 1>we go. There we go.

00:17:15.655 --> 00:17:18.375
<v Speaker 0>Okay. Let's just clean this up.

00:17:20.775 --> 00:17:22.775
<v Speaker 0>So we don't need to have this and

00:17:22.775 --> 00:17:25.015
<v Speaker 0>then okay. Let's keep that exports on how

00:17:25.015 --> 00:17:26.455
<v Speaker 0>to do that. Otherwise, I'll be looking out

00:17:26.455 --> 00:17:27.015
<v Speaker 0>too. So

00:17:28.250 --> 00:17:30.010
<v Speaker 0>this is go. So if we need to

00:17:30.010 --> 00:17:30.970
<v Speaker 0>do if

00:17:31.130 --> 00:17:31.850
<v Speaker 0>error

00:17:33.050 --> 00:17:33.610
<v Speaker 0>no.

00:17:34.490 --> 00:17:37.130
<v Speaker 0>Oh, no. Here we go. That's a Scottish

00:17:37.130 --> 00:17:37.690
<v Speaker 1>no.

00:17:37.930 --> 00:17:38.890
<v Speaker 1>Yeah.

00:17:39.930 --> 00:17:41.370
<v Speaker 2>And then you just need to return the

00:17:41.370 --> 00:17:41.690
<v Speaker 2>error.

00:17:43.475 --> 00:17:46.515
<v Speaker 2>So this Pulumi. Run just take just returns

00:17:46.515 --> 00:17:47.235
<v Speaker 2>an error.

00:17:47.955 --> 00:17:49.475
<v Speaker 2>So you should be able to return the

00:17:49.475 --> 00:17:50.595
<v Speaker 2>error there. Yeah.

00:17:51.235 --> 00:17:52.995
<v Speaker 0>Alright. There we go. And if we export

00:17:52.995 --> 00:17:56.035
<v Speaker 0>the device dot access

00:17:55.410 --> 00:17:56.210
<v Speaker 0>public

00:17:56.210 --> 00:17:57.410
<v Speaker 0>IP four,

00:17:57.810 --> 00:17:59.810
<v Speaker 0>we have a device. Right? Yeah. That should

00:17:59.810 --> 00:18:00.929
<v Speaker 2>work. Yeah. Absolutely.

00:18:02.450 --> 00:18:03.890
<v Speaker 0>You know what? I mean, haven't used the

00:18:03.890 --> 00:18:04.850
<v Speaker 0>Go API

00:18:05.010 --> 00:18:07.490
<v Speaker 0>SDK, whatever we call that much. But

00:18:08.375 --> 00:18:10.215
<v Speaker 0>it's got some nice qualities to it. I

00:18:10.215 --> 00:18:11.894
<v Speaker 0>mean, I'm familiar with Go. I just need

00:18:11.894 --> 00:18:13.094
<v Speaker 0>to learn these little

00:18:13.414 --> 00:18:16.054
<v Speaker 0>Pulumi We might be we might be missing

00:18:16.054 --> 00:18:17.094
<v Speaker 1>a couple extra

00:18:17.335 --> 00:18:19.335
<v Speaker 1>details. So we haven't passed in an operating

00:18:19.335 --> 00:18:19.735
<v Speaker 1>system.

00:18:21.230 --> 00:18:22.990
<v Speaker 0>Oh, I would expect the tape system to

00:18:22.990 --> 00:18:24.270
<v Speaker 0>monitor me for that, actually.

00:18:25.470 --> 00:18:27.230
<v Speaker 2>I think that's done. We have this new

00:18:27.230 --> 00:18:29.150
<v Speaker 2>enum stuff coming, which we should help with

00:18:29.150 --> 00:18:31.550
<v Speaker 2>this, but, I think that will probably happen

00:18:31.550 --> 00:18:32.270
<v Speaker 2>at

00:18:32.670 --> 00:18:34.670
<v Speaker 2>It's done at runtime. At runtime. Yeah.

00:18:35.355 --> 00:18:36.955
<v Speaker 1>Yeah. And then we also have to pass

00:18:36.955 --> 00:18:38.794
<v Speaker 1>in a billing cycle. Yeah.

00:18:40.635 --> 00:18:43.115
<v Speaker 0>Okay. Are there types for that out of

00:18:43.115 --> 00:18:45.915
<v Speaker 0>curiosity? Let's see. There are not currently as

00:18:45.915 --> 00:18:48.789
<v Speaker 1>of today, but very soon, there's work that's

00:18:48.789 --> 00:18:50.710
<v Speaker 1>actually undergoing at the minute that'll allow you

00:18:50.710 --> 00:18:52.549
<v Speaker 1>to do that. Oh, nice.

00:18:54.230 --> 00:18:55.909
<v Speaker 0>Alright. So hourly

00:18:56.149 --> 00:18:57.830
<v Speaker 0>do we wanna just pass in some user

00:18:57.830 --> 00:19:00.985
<v Speaker 0>data as well? Yeah. Last thing yeah. Go

00:19:00.985 --> 00:19:03.385
<v Speaker 1>on. Go I I would I would my

00:19:03.385 --> 00:19:05.625
<v Speaker 2>intent is to get very ambitious and spin

00:19:05.625 --> 00:19:07.225
<v Speaker 2>up a Kubernetes cluster. So

00:19:08.265 --> 00:19:10.424
<v Speaker 2>what I would do is declare a new

00:19:10.825 --> 00:19:12.664
<v Speaker 2>just have a new string that that defines

00:19:12.664 --> 00:19:13.784
<v Speaker 2>the user data above this.

00:19:15.670 --> 00:19:16.549
<v Speaker 2>And then,

00:19:18.230 --> 00:19:19.670
<v Speaker 2>and I would make it a string literal

00:19:19.670 --> 00:19:21.510
<v Speaker 2>so that you can do multilines.

00:19:22.790 --> 00:19:25.830
<v Speaker 2>But, yeah, like, you can just pass in

00:19:25.910 --> 00:19:27.190
<v Speaker 2>Pulumi dot string. Yeah.

00:19:28.885 --> 00:19:29.765
<v Speaker 0>Okay.

00:19:29.925 --> 00:19:31.445
<v Speaker 0>Session And then I think you need one

00:19:31.445 --> 00:19:33.205
<v Speaker 1>more thing according to the packet API, which

00:19:33.205 --> 00:19:34.164
<v Speaker 1>is host name.

00:19:36.405 --> 00:19:38.645
<v Speaker 2>I think it'll I think it auto generates.

00:19:38.965 --> 00:19:40.325
<v Speaker 0>It should be based on the name that

00:19:40.325 --> 00:19:42.325
<v Speaker 0>I provided, but we'll do that too.

00:19:44.049 --> 00:19:46.929
<v Speaker 0>Let's not test these things just now. Yeah.

00:19:47.330 --> 00:19:48.850
<v Speaker 2>So we can leave the user data empty

00:19:48.850 --> 00:19:50.209
<v Speaker 2>for now, and then we'll

00:19:51.090 --> 00:19:53.090
<v Speaker 2>install Docker on Ubuntu

00:19:53.090 --> 00:19:55.169
<v Speaker 2>shortly, I think. Well, let's just make sure

00:19:55.169 --> 00:19:57.174
<v Speaker 0>we don't break anything, I guess.

00:19:58.215 --> 00:20:00.294
<v Speaker 0>So Just make it a empty yeah.

00:20:00.455 --> 00:20:03.414
<v Speaker 2>In bash. Yeah. Empty shebang. Yeah. It's perfect.

00:20:05.575 --> 00:20:06.855
<v Speaker 0>I always like to be able to test

00:20:06.855 --> 00:20:09.174
<v Speaker 0>it without the export as well. So we'll

00:20:09.174 --> 00:20:10.615
<v Speaker 0>we'll just run NGINX.

00:20:13.080 --> 00:20:14.040
<v Speaker 0>Interactive

00:20:15.080 --> 00:20:17.080
<v Speaker 0>dash. Yes. Okay. So that should give us

00:20:17.160 --> 00:20:18.760
<v Speaker 0>once we run this Pulumi program, we'll get

00:20:18.760 --> 00:20:20.520
<v Speaker 0>an IP address as the export. We should

00:20:20.520 --> 00:20:21.480
<v Speaker 0>be able to hit that in the web

00:20:21.480 --> 00:20:22.760
<v Speaker 0>browser. Job done.

00:20:24.385 --> 00:20:25.904
<v Speaker 2>Here's the moment of truth.

00:20:27.025 --> 00:20:29.825
<v Speaker 0>Alright. So Pulumi API token. Let me get

00:20:29.825 --> 00:20:33.504
<v Speaker 0>that sorted first. So Pulumi config set secret

00:20:34.625 --> 00:20:37.105
<v Speaker 0>packet API key.

00:20:37.505 --> 00:20:38.785
<v Speaker 0>Let me grab that over here.

00:20:44.860 --> 00:20:46.540
<v Speaker 0>It's a packet API key or packet auth

00:20:46.540 --> 00:20:47.580
<v Speaker 0>token. I can never remember. I need to

00:20:47.580 --> 00:20:49.500
<v Speaker 0>look that up. Packet auth token, I believe.

00:20:49.500 --> 00:20:51.260
<v Speaker 0>Yeah. Packet auth token. Good. Okay.

00:20:53.935 --> 00:20:56.175
<v Speaker 0>Off token.

00:20:59.455 --> 00:21:01.695
<v Speaker 1>So an interesting question for you here, David.

00:21:01.855 --> 00:21:03.934
<v Speaker 1>Any specific reason why you're using

00:21:04.655 --> 00:21:07.330
<v Speaker 1>setting that specifically to your config file rather

00:21:07.330 --> 00:21:09.330
<v Speaker 1>than just letting Pulumi pick up your environment

00:21:09.330 --> 00:21:09.970
<v Speaker 1>variables?

00:21:10.530 --> 00:21:12.370
<v Speaker 0>I don't set environment variables.

00:21:12.690 --> 00:21:15.170
<v Speaker 1>Okay. And it needs to be packet colon

00:21:15.170 --> 00:21:16.289
<v Speaker 1>off token.

00:21:16.370 --> 00:21:17.650
<v Speaker 0>Oh, yeah. I was just gonna come in

00:21:17.650 --> 00:21:19.170
<v Speaker 0>and modify it here. Is that okay? Oh,

00:21:19.170 --> 00:21:21.595
<v Speaker 1>it's fine. Yeah. Yeah. It's perfect. Oh, because

00:21:21.595 --> 00:21:23.115
<v Speaker 0>it's secure, that should be yeah. It should

00:21:23.115 --> 00:21:24.554
<v Speaker 0>be alright, I think.

00:21:25.835 --> 00:21:28.235
<v Speaker 0>Let's see. Well, let's test it. Yeah. Let's

00:21:28.235 --> 00:21:29.754
<v Speaker 2>give it a try. Why not?

00:21:29.995 --> 00:21:32.235
<v Speaker 0>Yeah. I I generally don't use the environment

00:21:32.235 --> 00:21:33.994
<v Speaker 0>variables in generalistic and

00:21:34.155 --> 00:21:35.915
<v Speaker 0>plus it's encrypted so it's safe. Right?

00:21:36.980 --> 00:21:39.620
<v Speaker 1>Well, it is. So, like, it's it's actually

00:21:39.620 --> 00:21:40.420
<v Speaker 1>using

00:21:42.340 --> 00:21:44.580
<v Speaker 1>our secret agent built in by default. So

00:21:44.580 --> 00:21:45.860
<v Speaker 1>you can see every time you run Pulumi

00:21:45.860 --> 00:21:47.220
<v Speaker 1>up, it's actually gonna ask you for the

00:21:47.220 --> 00:21:48.820
<v Speaker 1>passphrase to make sure you have access to

00:21:48.820 --> 00:21:51.220
<v Speaker 1>to run Pulumi up. So it's

00:21:51.220 --> 00:21:51.540
<v Speaker 1>safe.

00:21:52.155 --> 00:21:54.715
<v Speaker 1>Safer, should I say. I'm just used to

00:21:54.715 --> 00:21:56.475
<v Speaker 2>using m chain and storing it all in

00:21:56.475 --> 00:21:57.835
<v Speaker 2>my key chain. So

00:21:59.115 --> 00:22:00.795
<v Speaker 0>I don't know that. So there's something I'm

00:22:00.795 --> 00:22:01.755
<v Speaker 0>gonna have to learn from you at some

00:22:01.755 --> 00:22:02.395
<v Speaker 0>point. Yeah.

00:22:04.350 --> 00:22:06.029
<v Speaker 1>Yeah. I have changed. Pretty cool.

00:22:06.590 --> 00:22:08.669
<v Speaker 2>So what you'll notice now this is taking

00:22:08.669 --> 00:22:09.389
<v Speaker 2>a second,

00:22:09.630 --> 00:22:11.869
<v Speaker 2>and it's because it's building a Go binary.

00:22:12.990 --> 00:22:15.869
<v Speaker 2>So it's it's basically doing a Go build

00:22:16.190 --> 00:22:18.350
<v Speaker 2>behind In fact, you can probably look at

00:22:18.590 --> 00:22:20.750
<v Speaker 1>top and have a look and oh, it's

00:22:20.145 --> 00:22:21.825
<v Speaker 1>too late. But you could've looked and seen

00:22:21.825 --> 00:22:23.424
<v Speaker 1>it actually doing the compilation.

00:22:24.545 --> 00:22:26.625
<v Speaker 0>Alright. So we're gonna say yes to create

00:22:26.625 --> 00:22:28.065
<v Speaker 0>a new stack and yes to create a

00:22:28.065 --> 00:22:28.945
<v Speaker 0>new device.

00:22:29.745 --> 00:22:31.425
<v Speaker 0>It's gonna go away into its thing. I

00:22:31.425 --> 00:22:33.665
<v Speaker 0>guess what I can do right now is

00:22:34.950 --> 00:22:36.870
<v Speaker 0>move this tab over here too.

00:22:37.830 --> 00:22:38.630
<v Speaker 0>Oh.

00:22:39.350 --> 00:22:41.269
<v Speaker 0>Unrecognized user data format.

00:22:43.110 --> 00:22:44.550
<v Speaker 0>Is that because I put a new line

00:22:44.550 --> 00:22:46.790
<v Speaker 0>in, isn't it? I knew that was ambitious.

00:22:48.034 --> 00:22:48.914
<v Speaker 1>Yeah.

00:22:50.515 --> 00:22:53.075
<v Speaker 0>That that's our API. It's very specific about

00:22:53.075 --> 00:22:54.674
<v Speaker 0>that first line and I just went I

00:22:54.835 --> 00:22:56.034
<v Speaker 0>when I typed it, was like, I wonder

00:22:56.034 --> 00:22:57.154
<v Speaker 0>if that'll work and I should have just

00:22:57.154 --> 00:22:59.154
<v Speaker 0>realized that was silly. Anyway, we don't work

00:22:59.154 --> 00:22:59.394
<v Speaker 0>now.

00:23:06.700 --> 00:23:08.700
<v Speaker 0>And what I will do is we have

00:23:08.700 --> 00:23:11.420
<v Speaker 0>a browser here and I've got my console.

00:23:15.845 --> 00:23:18.165
<v Speaker 0>That stuff we can ignore.

00:23:20.805 --> 00:23:21.925
<v Speaker 0>Let's hit yes.

00:23:24.965 --> 00:23:26.725
<v Speaker 1>So we should actually see a device actually

00:23:26.725 --> 00:23:28.005
<v Speaker 1>being created by.

00:23:35.970 --> 00:23:38.210
<v Speaker 0>There we go. There we go. Beautiful.

00:23:39.010 --> 00:23:40.529
<v Speaker 0>Easy.

00:23:40.850 --> 00:23:41.250
<v Speaker 0>Alright.

00:23:42.674 --> 00:23:44.355
<v Speaker 0>Don't get too confident yet. That's what I

00:23:44.355 --> 00:23:45.234
<v Speaker 0>should tell myself.

00:23:45.955 --> 00:23:47.794
<v Speaker 0>So that says creating here.

00:23:48.434 --> 00:23:50.034
<v Speaker 0>We can see this here.

00:23:51.315 --> 00:23:53.235
<v Speaker 0>Here's a question and something I've noticed is

00:23:53.395 --> 00:23:54.515
<v Speaker 0>I used to love me quite a lot

00:23:54.515 --> 00:23:56.260
<v Speaker 0>now and I always see this message trying

00:23:56.260 --> 00:23:58.020
<v Speaker 0>to leak through to me and never quite

00:23:58.020 --> 00:23:58.899
<v Speaker 0>see it.

00:23:59.299 --> 00:24:00.580
<v Speaker 0>How do I how do I get that

00:24:00.580 --> 00:24:01.139
<v Speaker 0>out?

00:24:04.020 --> 00:24:05.700
<v Speaker 0>Think this is my font is so big.

00:24:05.700 --> 00:24:07.780
<v Speaker 2>It should it should dump it after the

00:24:07.780 --> 00:24:09.139
<v Speaker 2>update is finished.

00:24:09.860 --> 00:24:10.340
<v Speaker 0>Okay.

00:24:11.395 --> 00:24:13.555
<v Speaker 2>So you should see that in the diagnostic

00:24:13.555 --> 00:24:16.755
<v Speaker 2>output. Yeah. Yeah. That's that's a debug

00:24:16.915 --> 00:24:19.395
<v Speaker 1>statement that's actually leaked through from the the

00:24:19.395 --> 00:24:21.395
<v Speaker 1>upstream provider that we use to build our

00:24:21.395 --> 00:24:22.115
<v Speaker 1>SDK from.

00:24:23.580 --> 00:24:24.700
<v Speaker 0>Alright. Okay.

00:24:25.179 --> 00:24:27.580
<v Speaker 1>So of course, we pick up the entire

00:24:27.660 --> 00:24:29.740
<v Speaker 1>scheme of the SDK and are able to

00:24:29.740 --> 00:24:31.260
<v Speaker 1>to use that, so it picks up the

00:24:31.260 --> 00:24:32.619
<v Speaker 1>debug statements as well.

00:24:33.660 --> 00:24:35.900
<v Speaker 0>Nice. Okay. At least I I understand why

00:24:35.900 --> 00:24:37.179
<v Speaker 0>it's there now, and I'll look for that

00:24:37.179 --> 00:24:39.375
<v Speaker 0>in the output afterwards. So so this is

00:24:39.375 --> 00:24:41.535
<v Speaker 0>gonna take we're using up into 20, so

00:24:41.535 --> 00:24:43.695
<v Speaker 0>probably less than ninety seconds.

00:24:43.935 --> 00:24:46.095
<v Speaker 0>So why don't we talk about what's next

00:24:46.095 --> 00:24:47.615
<v Speaker 0>then while that's spinning up?

00:24:48.015 --> 00:24:50.255
<v Speaker 2>So it depends how it depends how ambitious

00:24:50.255 --> 00:24:51.455
<v Speaker 2>we wanna get here.

00:24:51.855 --> 00:24:53.375
<v Speaker 2>So my

00:24:53.840 --> 00:24:57.120
<v Speaker 2>my intent was to show how you could

00:24:57.440 --> 00:25:00.640
<v Speaker 2>bootstrap a Kubernetes cluster with

00:25:00.640 --> 00:25:01.440
<v Speaker 2>RKE.

00:25:02.880 --> 00:25:04.800
<v Speaker 2>We could go down that path and create

00:25:04.800 --> 00:25:07.760
<v Speaker 2>three masters and then actually bootstrap the cluster

00:25:07.760 --> 00:25:08.880
<v Speaker 2>from this Pulumi program,

00:25:09.415 --> 00:25:12.295
<v Speaker 2>or we can go into building the CLI

00:25:12.295 --> 00:25:13.014
<v Speaker 2>right away.

00:25:13.655 --> 00:25:16.055
<v Speaker 2>And it's your it's your livestream, David, so

00:25:16.055 --> 00:25:17.975
<v Speaker 2>I'll let you let you decide on the

00:25:17.975 --> 00:25:19.174
<v Speaker 2>path you wanna go down.

00:25:20.935 --> 00:25:22.855
<v Speaker 0>Right. No pressure then. So

00:25:24.370 --> 00:25:25.970
<v Speaker 0>That feels like an art an old an

00:25:25.970 --> 00:25:28.130
<v Speaker 1>old style RPG where you choose your next

00:25:28.130 --> 00:25:29.890
<v Speaker 1>move. It's basically yeah. It's one of those

00:25:29.890 --> 00:25:31.970
<v Speaker 2>books that choose your own adventure books. Exactly.

00:25:32.210 --> 00:25:34.049
<v Speaker 0>So let me understand what's involved in the

00:25:34.049 --> 00:25:35.890
<v Speaker 0>r key r key e bit. Right? That

00:25:35.970 --> 00:25:38.210
<v Speaker 0>that's really just wrapping our device r x

00:25:38.210 --> 00:25:40.184
<v Speaker 0>m provisioning and a loop for one to

00:25:40.184 --> 00:25:42.505
<v Speaker 0>end times and updating our user data to

00:25:42.505 --> 00:25:43.544
<v Speaker 0>be installed

00:25:44.265 --> 00:25:46.985
<v Speaker 0>RKE. Right? So it will so there's a

00:25:46.985 --> 00:25:47.784
<v Speaker 2>there's a

00:25:48.105 --> 00:25:50.424
<v Speaker 2>there's a community provider that I built.

00:25:51.225 --> 00:25:54.184
<v Speaker 2>So, essentially, the user data will install Docker,

00:25:55.600 --> 00:25:57.440
<v Speaker 2>and then we'll do as you said, we'll

00:25:57.440 --> 00:25:59.440
<v Speaker 2>loop through all we'll do a loop. So

00:25:59.440 --> 00:26:02.000
<v Speaker 2>we'll do three because, obviously, Kubernetes needs three

00:26:02.000 --> 00:26:03.519
<v Speaker 2>masters. We'll do three

00:26:05.759 --> 00:26:07.039
<v Speaker 2>three devices,

00:26:07.039 --> 00:26:08.879
<v Speaker 2>and then we'll pass the output of those

00:26:08.879 --> 00:26:12.215
<v Speaker 2>devices to the second provider to bootstrap the

00:26:12.215 --> 00:26:12.934
<v Speaker 2>cluster.

00:26:14.055 --> 00:26:14.615
<v Speaker 2>And

00:26:14.935 --> 00:26:17.255
<v Speaker 2>it it it I mean, I I've I've

00:26:17.255 --> 00:26:19.095
<v Speaker 2>used this regularly

00:26:19.095 --> 00:26:21.495
<v Speaker 2>outside of Equinix Metal,

00:26:22.135 --> 00:26:24.215
<v Speaker 2>so I feel reasonably confident it will work.

00:26:24.990 --> 00:26:26.510
<v Speaker 2>But the other thing that we can do

00:26:26.510 --> 00:26:27.230
<v Speaker 2>is

00:26:27.790 --> 00:26:30.350
<v Speaker 2>we can start implementing the CLI

00:26:31.150 --> 00:26:33.950
<v Speaker 2>and do a create instance command just with

00:26:33.950 --> 00:26:35.710
<v Speaker 2>what we have here, which I think gives

00:26:35.710 --> 00:26:36.429
<v Speaker 2>the same

00:26:36.990 --> 00:26:39.710
<v Speaker 2>it gives the same kind of feel to

00:26:39.710 --> 00:26:40.190
<v Speaker 2>it, basically.

00:26:40.875 --> 00:26:42.875
<v Speaker 0>Yeah. I like that plan. Let's start with

00:26:42.875 --> 00:26:43.755
<v Speaker 0>the CLI

00:26:43.755 --> 00:26:45.835
<v Speaker 0>version of this, and then we can try

00:26:45.835 --> 00:26:47.355
<v Speaker 0>and make it a bit more cooler, bring

00:26:47.355 --> 00:26:49.435
<v Speaker 0>it in the other provider and other stuff.

00:26:49.435 --> 00:26:50.715
<v Speaker 0>I loved your cap out there. I've used

00:26:50.715 --> 00:26:52.875
<v Speaker 0>the outside of Equinix metal. I'm immediately saying,

00:26:52.875 --> 00:26:55.035
<v Speaker 0>it fails, it's your fault. Absolutely.

00:26:55.035 --> 00:26:55.195
<v Speaker 2>Yeah.

00:26:56.000 --> 00:26:57.600
<v Speaker 2>I was actually gonna say it worked on

00:26:57.600 --> 00:26:58.480
<v Speaker 2>my machine,

00:26:59.040 --> 00:27:01.040
<v Speaker 2>and then I was gonna blame your laptop.

00:27:01.840 --> 00:27:04.160
<v Speaker 2>But, yeah, I I think, we like, be

00:27:04.240 --> 00:27:06.240
<v Speaker 2>building a CLI, I think, is a pretty

00:27:06.240 --> 00:27:07.760
<v Speaker 2>good thing. Look at that. Easy.

00:27:08.160 --> 00:27:09.680
<v Speaker 2>Easy. Record time.

00:27:10.985 --> 00:27:13.465
<v Speaker 1>So it's important to say here, Lee, like,

00:27:13.465 --> 00:27:15.145
<v Speaker 1>we we haven't talked about anything around state

00:27:15.145 --> 00:27:15.865
<v Speaker 1>management

00:27:16.105 --> 00:27:18.185
<v Speaker 1>because, like, if there's anyone on the stream

00:27:18.185 --> 00:27:20.985
<v Speaker 1>who's who's new to state management, then by

00:27:20.985 --> 00:27:21.625
<v Speaker 1>default,

00:27:21.865 --> 00:27:24.345
<v Speaker 1>we're actually storing the state. Pulumi knows that

00:27:24.345 --> 00:27:27.010
<v Speaker 1>that you have built a packet device. And

00:27:27.010 --> 00:27:28.929
<v Speaker 1>if we went to or, excuse me, an

00:27:28.929 --> 00:27:30.450
<v Speaker 1>Equinox metal device,

00:27:30.530 --> 00:27:32.130
<v Speaker 1>and if we actually go to the portal

00:27:32.130 --> 00:27:33.409
<v Speaker 1>and we delete that

00:27:34.770 --> 00:27:37.170
<v Speaker 1>that device, then Pulumi will actually try you

00:27:37.170 --> 00:27:39.410
<v Speaker 1>know, if we refresh it, Pulumi will actually

00:27:39.410 --> 00:27:41.174
<v Speaker 1>try and recreate it. So, you know, there

00:27:41.174 --> 00:27:43.174
<v Speaker 1>there is state involved in the in the

00:27:43.174 --> 00:27:45.174
<v Speaker 1>infrastructure management tier, and I know that there

00:27:45.174 --> 00:27:47.494
<v Speaker 1>are some people who are not hugely

00:27:47.895 --> 00:27:50.135
<v Speaker 1>happy that state is involved and state is

00:27:50.135 --> 00:27:51.735
<v Speaker 1>kept because they believe that, you know, you

00:27:51.735 --> 00:27:53.575
<v Speaker 1>should be able to query against the specific

00:27:53.575 --> 00:27:56.360
<v Speaker 1>client or the specific metal provider. But there

00:27:56.360 --> 00:27:58.680
<v Speaker 1>is actually some state that's involved here.

00:27:59.240 --> 00:27:59.960
<v Speaker 0>Yeah.

00:28:00.120 --> 00:28:02.360
<v Speaker 0>So I ran a Pulumi up there, and

00:28:02.360 --> 00:28:04.360
<v Speaker 0>you can see nothing is nothing is changed.

00:28:04.360 --> 00:28:06.040
<v Speaker 0>There's nothing it wants to do there. So,

00:28:07.000 --> 00:28:08.680
<v Speaker 0>yeah, that's probably just to know for sure.

00:28:09.394 --> 00:28:12.115
<v Speaker 2>So I think you created a CLI directory

00:28:12.115 --> 00:28:12.834
<v Speaker 2>before.

00:28:13.794 --> 00:28:15.474
<v Speaker 2>Let's let's go ahead and

00:28:16.274 --> 00:28:19.235
<v Speaker 2>start bootstrapping a CLI, I think. I think

00:28:19.235 --> 00:28:21.475
<v Speaker 0>I just realized I'm using the the header

00:28:21.475 --> 00:28:23.520
<v Speaker 0>that doesn't give you access to type in.

00:28:23.520 --> 00:28:25.040
<v Speaker 2>Yeah. I was I was feeling a bit

00:28:25.040 --> 00:28:26.880
<v Speaker 2>shut out by this whole whole affair to

00:28:26.880 --> 00:28:28.880
<v Speaker 2>be honest. Let me close that other one.

00:28:28.880 --> 00:28:30.640
<v Speaker 0>That was my mistake.

00:28:31.600 --> 00:28:34.000
<v Speaker 0>I get tested not live share one. Okay.

00:28:34.000 --> 00:28:35.520
<v Speaker 0>So now you're you're back in the game.

00:28:35.520 --> 00:28:35.920
<v Speaker 0>Alright.

00:28:37.335 --> 00:28:39.335
<v Speaker 0>So what's the what's the step one to

00:28:39.335 --> 00:28:40.695
<v Speaker 0>make this a CLI then?

00:28:43.015 --> 00:28:45.014
<v Speaker 2>Inside your CLI directory directory,

00:28:45.015 --> 00:28:47.815
<v Speaker 2>I think you already added a go mod,

00:28:47.815 --> 00:28:48.775
<v Speaker 2>I believe. Yep.

00:28:50.690 --> 00:28:52.770
<v Speaker 2>So I think I I like to lay

00:28:52.770 --> 00:28:55.410
<v Speaker 2>out so I'm gonna use Cobra and Viper

00:28:55.410 --> 00:28:56.690
<v Speaker 2>to do this, and I like to lay

00:28:56.690 --> 00:28:59.650
<v Speaker 2>out these things in a specific way. If

00:28:59.650 --> 00:29:00.850
<v Speaker 2>you have if you've used it and you

00:29:00.850 --> 00:29:01.890
<v Speaker 2>like to lay it out in a specific

00:29:01.890 --> 00:29:03.394
<v Speaker 2>way, then go ahead.

00:29:04.115 --> 00:29:05.794
<v Speaker 2>But it's it's totally your call.

00:29:06.355 --> 00:29:08.275
<v Speaker 0>So No. Let let's let's learn your way.

00:29:08.275 --> 00:29:11.075
<v Speaker 0>Let's do it. So inside the CLI directory,

00:29:11.075 --> 00:29:13.154
<v Speaker 2>I would make a CMD

00:29:13.235 --> 00:29:14.275
<v Speaker 2>form directory.

00:29:16.790 --> 00:29:19.350
<v Speaker 2>And then in here is usually the name

00:29:19.350 --> 00:29:21.350
<v Speaker 2>of the CLI as a folder.

00:29:21.910 --> 00:29:22.470
<v Speaker 2>So

00:29:22.870 --> 00:29:24.870
<v Speaker 2>if we call it something hypothetical

00:29:25.110 --> 00:29:26.549
<v Speaker 2>like, we call it CLI right now. Maybe

00:29:26.549 --> 00:29:28.070
<v Speaker 2>we'll call it metal CTL,

00:29:30.615 --> 00:29:32.135
<v Speaker 2>which will mean you'll have to update the

00:29:32.135 --> 00:29:33.174
<v Speaker 2>Go module

00:29:33.415 --> 00:29:35.335
<v Speaker 2>path in a few minutes to

00:29:36.855 --> 00:29:38.534
<v Speaker 2>and then in here,

00:29:39.015 --> 00:29:40.695
<v Speaker 2>you have a main dot Go, which kinda

00:29:40.695 --> 00:29:41.975
<v Speaker 2>bootstraps your

00:29:43.095 --> 00:29:44.294
<v Speaker 2>your actual

00:29:44.295 --> 00:29:45.655
<v Speaker 2>COBRA

00:29:47.150 --> 00:29:48.030
<v Speaker 2>application.

00:29:48.350 --> 00:29:50.110
<v Speaker 2>So this is a package main.

00:29:51.950 --> 00:29:54.510
<v Speaker 2>And then you'll need to import COBRA,

00:29:54.510 --> 00:29:55.309
<v Speaker 2>which is

00:29:55.549 --> 00:30:01.735
<v Speaker 2>github.comspf13COBRA.

00:30:03.015 --> 00:30:03.735
<v Speaker 2>Yep.

00:30:04.375 --> 00:30:06.855
<v Speaker 2>And then you need a

00:30:07.575 --> 00:30:10.135
<v Speaker 2>configure CLI function, I believe, first.

00:30:13.440 --> 00:30:15.440
<v Speaker 2>I think CLI needs to I think it

00:30:15.440 --> 00:30:17.760
<v Speaker 2>has specific specific APIs. It needs to be

00:30:17.760 --> 00:30:19.120
<v Speaker 2>c and then capitals

00:30:19.280 --> 00:30:21.520
<v Speaker 2>capital l, capital I. I guess You wanna

00:30:21.520 --> 00:30:22.880
<v Speaker 0>take over the typing and get I could

00:30:22.880 --> 00:30:25.035
<v Speaker 2>just do that. It'll be easier. Yeah. I

00:30:25.035 --> 00:30:26.155
<v Speaker 2>thought we I thought we were doing this

00:30:26.155 --> 00:30:27.275
<v Speaker 2>together. I know it's just a

00:30:28.315 --> 00:30:30.235
<v Speaker 2>and then this returns

00:30:30.235 --> 00:30:31.915
<v Speaker 2>a here now.

00:30:33.595 --> 00:30:35.115
<v Speaker 2>Cobra dot command,

00:30:35.115 --> 00:30:35.675
<v Speaker 2>I think.

00:30:36.555 --> 00:30:39.435
<v Speaker 2>It isn't auto completing, I don't think. Because

00:30:39.435 --> 00:30:40.475
<v Speaker 0>we haven't

00:30:40.770 --> 00:30:43.330
<v Speaker 1>We haven't actually installed the Go mod. Yeah.

00:30:43.330 --> 00:30:45.330
<v Speaker 0>I'll run a Go mod download just now.

00:30:45.330 --> 00:30:46.290
<v Speaker 0>But if we try and see if that

00:30:46.290 --> 00:30:47.570
<v Speaker 0>Versus code is going to do, it's really

00:30:47.570 --> 00:30:49.090
<v Speaker 0>annoying thing when it tries to remove unused

00:30:49.090 --> 00:30:50.530
<v Speaker 0>imports as well. So

00:30:51.010 --> 00:30:51.730
<v Speaker 2>Of course.

00:30:53.145 --> 00:30:55.385
<v Speaker 2>And so then here, we're gonna create a

00:30:55.385 --> 00:30:56.745
<v Speaker 2>root command,

00:30:57.145 --> 00:30:59.785
<v Speaker 2>which again returns a Cobra command. I'm just

00:30:59.785 --> 00:31:02.985
<v Speaker 2>referencing a previous layout that I have, basically.

00:31:07.070 --> 00:31:08.830
<v Speaker 2>And then long

00:31:10.110 --> 00:31:11.230
<v Speaker 2>create things

00:31:11.230 --> 00:31:12.110
<v Speaker 2>in

00:31:13.150 --> 00:31:14.190
<v Speaker 2>Equinix

00:31:14.430 --> 00:31:15.230
<v Speaker 2>metal.

00:31:17.470 --> 00:31:18.430
<v Speaker 2>Okay.

00:31:19.070 --> 00:31:20.270
<v Speaker 2>And so

00:31:20.625 --> 00:31:23.345
<v Speaker 2>at this point, we just need to actually

00:31:23.345 --> 00:31:24.225
<v Speaker 2>return

00:31:24.625 --> 00:31:25.985
<v Speaker 2>a root command,

00:31:27.025 --> 00:31:30.145
<v Speaker 2>and that should be pretty

00:31:30.145 --> 00:31:32.385
<v Speaker 2>much it for the configure CLI command.

00:31:33.520 --> 00:31:36.240
<v Speaker 2>And then I think let me

00:31:37.040 --> 00:31:38.559
<v Speaker 2>root command

00:31:39.679 --> 00:31:41.600
<v Speaker 2>configure CLI.

00:31:45.120 --> 00:31:47.360
<v Speaker 1>I believe that GoMod needs to go at

00:31:47.360 --> 00:31:49.885
<v Speaker 1>the top level, David, not inside the

00:31:50.285 --> 00:31:51.565
<v Speaker 1>oh, no. No. I take that back. I

00:31:51.565 --> 00:31:53.805
<v Speaker 1>apologize. It's it's already at the at the

00:31:53.805 --> 00:31:55.965
<v Speaker 1>top level of the CLI directory.

00:31:56.125 --> 00:31:57.885
<v Speaker 0>Yeah. I think what if you save this

00:31:57.885 --> 00:31:59.725
<v Speaker 0>and just do a first build together to

00:31:59.725 --> 00:32:01.405
<v Speaker 0>pull that dependency down, and then we should

00:32:01.405 --> 00:32:02.765
<v Speaker 0>get our all complete, hopefully.

00:32:09.290 --> 00:32:11.690
<v Speaker 1>So for those not familiar to COBRA, Lee,

00:32:11.690 --> 00:32:13.370
<v Speaker 1>why would you use COBRA over something else

00:32:13.370 --> 00:32:14.330
<v Speaker 1>in Go?

00:32:15.050 --> 00:32:18.490
<v Speaker 2>I really like COBRA because it

00:32:17.615 --> 00:32:19.455
<v Speaker 2>allows you to build CLIs that kind of

00:32:19.455 --> 00:32:20.175
<v Speaker 2>follow,

00:32:20.575 --> 00:32:22.415
<v Speaker 2>like, a 12 factor app approach. So, like,

00:32:22.415 --> 00:32:24.655
<v Speaker 2>you can use do things like

00:32:24.815 --> 00:32:27.615
<v Speaker 2>have configuration files and bind things to environment

00:32:27.615 --> 00:32:30.415
<v Speaker 2>variables. Like, it might be overkill for a

00:32:30.415 --> 00:32:31.055
<v Speaker 2>lot of stuff

00:32:31.870 --> 00:32:33.870
<v Speaker 2>if you just want flags, basically.

00:32:35.309 --> 00:32:37.549
<v Speaker 2>But I I really like the actual

00:32:37.790 --> 00:32:40.909
<v Speaker 2>the ability to kind of have a nicely

00:32:41.070 --> 00:32:41.870
<v Speaker 2>laid out,

00:32:43.165 --> 00:32:45.885
<v Speaker 2>like, CLI structure that's kinda familiar. It's what

00:32:45.885 --> 00:32:47.804
<v Speaker 2>the cube the cube CTL

00:32:49.725 --> 00:32:50.845
<v Speaker 2>CLI uses.

00:32:51.165 --> 00:32:53.005
<v Speaker 2>So, you know, I I I just prefer

00:32:53.005 --> 00:32:54.605
<v Speaker 2>it quite honestly. There's there's other things that

00:32:54.605 --> 00:32:55.404
<v Speaker 2>I've used,

00:32:55.805 --> 00:32:57.645
<v Speaker 2>but this is this is familiar to me.

00:32:58.110 --> 00:32:59.630
<v Speaker 2>You probably wanna build that now, and it

00:32:59.630 --> 00:33:01.710
<v Speaker 2>should just give you a

00:33:01.950 --> 00:33:02.830
<v Speaker 2>standard

00:33:03.550 --> 00:33:04.350
<v Speaker 2>metal.

00:33:07.870 --> 00:33:08.509
<v Speaker 2>And

00:33:09.070 --> 00:33:10.830
<v Speaker 2>then you wanna see if we can run

00:33:10.830 --> 00:33:12.750
<v Speaker 2>it. It should just give you

00:33:13.045 --> 00:33:14.325
<v Speaker 2>and then run help.

00:33:17.765 --> 00:33:20.005
<v Speaker 1>Dash dash help. Dash does help. Yeah. Dash

00:33:20.005 --> 00:33:20.805
<v Speaker 2>dash help. Yeah.

00:33:25.460 --> 00:33:26.659
<v Speaker 0>Not quite.

00:33:28.260 --> 00:33:30.179
<v Speaker 2>I must have missed something here.

00:33:33.060 --> 00:33:34.260
<v Speaker 2>Oh, I don't think I have an init

00:33:34.260 --> 00:33:36.580
<v Speaker 2>function. That's why. That's probably not gonna help.

00:33:39.265 --> 00:33:45.905
<v Speaker 2>I'm

00:33:45.905 --> 00:33:46.705
<v Speaker 2>very new to this.

00:33:57.759 --> 00:33:59.279
<v Speaker 2>Actually, I don't think we can probably just

00:33:59.279 --> 00:34:00.960
<v Speaker 2>leave this empty now that I think about

00:34:00.960 --> 00:34:01.440
<v Speaker 2>it.

00:34:04.159 --> 00:34:05.279
<v Speaker 0>Alright. Let's try again.

00:34:11.215 --> 00:34:12.735
<v Speaker 0>Oh, I'm in the wrong directory.

00:34:20.015 --> 00:34:20.655
<v Speaker 2>Oh,

00:34:21.055 --> 00:34:21.535
<v Speaker 2>typo.

00:34:24.650 --> 00:34:25.930
<v Speaker 2>Oh, no. I need to save. There we

00:34:25.930 --> 00:34:27.530
<v Speaker 2>go. Try again.

00:34:33.050 --> 00:34:33.930
<v Speaker 2>There we go.

00:34:34.489 --> 00:34:36.730
<v Speaker 2>So now we actually have a

00:34:36.895 --> 00:34:39.695
<v Speaker 2>the the very much the beginning boilerplate of

00:34:39.695 --> 00:34:41.135
<v Speaker 2>a CLI. Right?

00:34:41.695 --> 00:34:44.495
<v Speaker 2>And so if we wanna actually run our

00:34:44.735 --> 00:34:45.615
<v Speaker 2>create

00:34:46.975 --> 00:34:48.415
<v Speaker 2>create device

00:34:48.495 --> 00:34:50.815
<v Speaker 2>thing inside the CLI, we could create a

00:34:50.815 --> 00:34:53.055
<v Speaker 2>directory underneath

00:34:53.560 --> 00:34:56.440
<v Speaker 2>underneath this this kind of parent directory. I

00:34:56.440 --> 00:34:58.520
<v Speaker 2>have access to create directories, so I'm gonna

00:34:58.520 --> 00:34:59.400
<v Speaker 2>let you do this.

00:35:00.040 --> 00:35:02.280
<v Speaker 2>So under metal CLI,

00:35:02.359 --> 00:35:04.440
<v Speaker 2>let's create a directory called

00:35:04.839 --> 00:35:05.240
<v Speaker 2>create.

00:35:07.895 --> 00:35:11.255
<v Speaker 2>And then under that, we'll go with device.

00:35:13.095 --> 00:35:14.455
<v Speaker 0>Directory or fail?

00:35:15.255 --> 00:35:17.415
<v Speaker 2>Another directory. So then we're gonna have, like,

00:35:17.415 --> 00:35:19.494
<v Speaker 2>nest and this it like, the the reason

00:35:19.494 --> 00:35:20.935
<v Speaker 2>that I kind of have this layout is

00:35:20.935 --> 00:35:21.895
<v Speaker 2>it allows you to create,

00:35:22.830 --> 00:35:25.870
<v Speaker 2>like like, create a more reusable CLI. So

00:35:25.870 --> 00:35:27.230
<v Speaker 2>then each one of those will have a

00:35:27.230 --> 00:35:28.510
<v Speaker 2>CLI dot go in them.

00:35:40.295 --> 00:35:41.095
<v Speaker 0>Alright.

00:35:41.895 --> 00:35:44.055
<v Speaker 2>Is it my turn again? I believe it

00:35:44.055 --> 00:35:44.615
<v Speaker 2>is. So

00:35:45.335 --> 00:35:47.655
<v Speaker 2>what we're gonna do here is create

00:35:48.460 --> 00:35:49.260
<v Speaker 2>a

00:35:49.260 --> 00:35:50.700
<v Speaker 2>standard command.

00:35:52.300 --> 00:35:53.980
<v Speaker 2>So, again, it's very similar to the pattern

00:35:53.980 --> 00:35:55.180
<v Speaker 2>we've already have.

00:36:01.180 --> 00:36:01.980
<v Speaker 2>Command

00:36:01.980 --> 00:36:03.260
<v Speaker 2>equals

00:36:04.194 --> 00:36:05.075
<v Speaker 2>dot

00:36:05.075 --> 00:36:05.955
<v Speaker 2>command.

00:36:07.714 --> 00:36:10.115
<v Speaker 2>Use is create

00:36:14.915 --> 00:36:16.595
<v Speaker 2>short

00:36:31.125 --> 00:36:32.645
<v Speaker 0>I think I need to change the format

00:36:32.645 --> 00:36:34.245
<v Speaker 0>of the show. It's much more fun watching

00:36:34.245 --> 00:36:35.365
<v Speaker 0>other people type.

00:36:37.685 --> 00:36:39.125
<v Speaker 1>And you can always blame them if it

00:36:39.125 --> 00:36:42.085
<v Speaker 1>goes wrong. Yeah. Absolutely. And

00:36:42.245 --> 00:36:43.845
<v Speaker 2>so this is the most important thing. This

00:36:43.845 --> 00:36:46.109
<v Speaker 2>runny function is basically gonna make a decision

00:36:46.109 --> 00:36:46.750
<v Speaker 2>about

00:36:47.309 --> 00:36:49.230
<v Speaker 2>what happens when you run this command.

00:36:49.790 --> 00:36:52.190
<v Speaker 2>And so that takes a

00:36:53.790 --> 00:36:55.550
<v Speaker 2>COBRA dot command

00:36:56.505 --> 00:36:58.664
<v Speaker 2>and then a bunch of arguments

00:36:58.664 --> 00:37:00.265
<v Speaker 2>as a string,

00:37:00.664 --> 00:37:01.785
<v Speaker 2>and it returns

00:37:01.785 --> 00:37:02.984
<v Speaker 2>an error.

00:37:03.305 --> 00:37:04.744
<v Speaker 2>And then here is where we're gonna put

00:37:04.744 --> 00:37:07.464
<v Speaker 2>our logic. And this is actually going to

00:37:08.105 --> 00:37:09.384
<v Speaker 2>really only have,

00:37:11.040 --> 00:37:14.400
<v Speaker 2>like, the the commands below it in it

00:37:14.400 --> 00:37:16.720
<v Speaker 2>because these these create

00:37:16.800 --> 00:37:17.920
<v Speaker 2>this create

00:37:18.720 --> 00:37:20.960
<v Speaker 2>thing itself doesn't actually do anything. It just

00:37:21.200 --> 00:37:23.280
<v Speaker 2>we just have sub commands in here. So

00:37:23.280 --> 00:37:25.955
<v Speaker 2>what we'll do is do command dot add

00:37:25.955 --> 00:37:26.755
<v Speaker 2>command,

00:37:28.515 --> 00:37:29.635
<v Speaker 2>and it'll be

00:37:30.595 --> 00:37:31.475
<v Speaker 2>create

00:37:34.195 --> 00:37:34.915
<v Speaker 2>instance

00:37:35.155 --> 00:37:35.955
<v Speaker 2>dot

00:37:36.435 --> 00:37:36.675
<v Speaker 2>command.

00:37:37.410 --> 00:37:39.490
<v Speaker 2>So then what we'll need to do here

00:37:39.490 --> 00:37:41.330
<v Speaker 2>is import

00:37:42.130 --> 00:37:43.650
<v Speaker 2>the directory

00:37:43.650 --> 00:37:44.690
<v Speaker 2>below it.

00:37:45.010 --> 00:37:47.010
<v Speaker 2>I don't actually know the full path of

00:37:47.010 --> 00:37:49.730
<v Speaker 2>the import path, but it'll be

00:37:51.905 --> 00:37:53.665
<v Speaker 2>do you wanna fill that out, David? Like,

00:37:53.665 --> 00:37:54.385
<v Speaker 2>the actual

00:37:54.705 --> 00:37:57.265
<v Speaker 2>it's from the main yeah. That. Yeah.

00:37:58.385 --> 00:38:00.305
<v Speaker 0>I'm in the wrong bit. And

00:38:01.665 --> 00:38:03.985
<v Speaker 2>then it's gonna be the subpackage. So,

00:38:05.265 --> 00:38:05.665
<v Speaker 2>create.

00:38:06.910 --> 00:38:09.070
<v Speaker 0>Metal c l first? Or Metal c t

00:38:09.070 --> 00:38:11.150
<v Speaker 2>l. Yeah. Sorry. Yeah. Create.

00:38:12.030 --> 00:38:12.670
<v Speaker 0>There?

00:38:13.310 --> 00:38:14.110
<v Speaker 2>Device.

00:38:14.430 --> 00:38:15.790
<v Speaker 2>And then instance.

00:38:16.510 --> 00:38:18.590
<v Speaker 2>Oh, it's yeah. It device. Yeah. Yeah. It

00:38:18.590 --> 00:38:20.350
<v Speaker 2>is device. Yeah. Good good point. So let

00:38:20.350 --> 00:38:20.910
<v Speaker 2>me change that.

00:38:23.625 --> 00:38:24.425
<v Speaker 2>Okay.

00:38:24.665 --> 00:38:26.505
<v Speaker 0>Just so I understand then. This means that

00:38:26.505 --> 00:38:28.105
<v Speaker 0>what we're doing here

00:38:29.385 --> 00:38:30.345
<v Speaker 0>is we're

00:38:32.825 --> 00:38:34.825
<v Speaker 0>is this supposed to be command and

00:38:35.065 --> 00:38:35.385
<v Speaker 0>full?

00:38:36.510 --> 00:38:38.030
<v Speaker 0>Or is that should this be this variable

00:38:38.030 --> 00:38:40.270
<v Speaker 0>here that we're adding it to? CMD?

00:38:41.150 --> 00:38:42.590
<v Speaker 1>It should be CMD?

00:38:42.750 --> 00:38:45.070
<v Speaker 2>Yes. It should be CMD. You're absolutely right.

00:38:45.070 --> 00:38:47.390
<v Speaker 0>Okay. So we're the context is passing a

00:38:47.390 --> 00:38:49.070
<v Speaker 0>root command and then we can add subcommands

00:38:49.070 --> 00:38:50.350
<v Speaker 0>to it and we're adding

00:38:51.470 --> 00:38:52.110
<v Speaker 0>our own.

00:38:53.925 --> 00:38:55.525
<v Speaker 2>Yes. Trying to I'm trying to remember the

00:38:55.525 --> 00:38:57.365
<v Speaker 2>path that I've gone through here. Yes. And

00:38:57.365 --> 00:38:58.645
<v Speaker 2>then we also need to actually, you know

00:38:58.645 --> 00:39:00.485
<v Speaker 2>what? I'm I'm I'm completely wrong here. We

00:39:00.485 --> 00:39:02.725
<v Speaker 2>don't actually need any of this. This

00:39:04.725 --> 00:39:06.645
<v Speaker 2>is this is why you do

00:39:06.770 --> 00:39:08.210
<v Speaker 2>this is why you do

00:39:08.609 --> 00:39:10.210
<v Speaker 2>because we don't need a runny for these

00:39:10.210 --> 00:39:12.050
<v Speaker 2>create commands at all because this isn't gonna

00:39:12.050 --> 00:39:12.770
<v Speaker 2>do anything.

00:39:15.010 --> 00:39:17.010
<v Speaker 1>It's just a registration with the top level

00:39:17.010 --> 00:39:17.730
<v Speaker 1>binary.

00:39:17.810 --> 00:39:18.450
<v Speaker 2>Right.

00:39:18.849 --> 00:39:20.369
<v Speaker 2>So then this goes here.

00:39:21.444 --> 00:39:22.405
<v Speaker 2>That goes

00:39:22.645 --> 00:39:23.285
<v Speaker 2>there.

00:39:24.645 --> 00:39:26.085
<v Speaker 2>So all we're doing it would this is

00:39:26.085 --> 00:39:26.724
<v Speaker 2>just a

00:39:27.444 --> 00:39:29.365
<v Speaker 2>we're just importing that. So package and running

00:39:29.365 --> 00:39:30.805
<v Speaker 2>it in the context of this.

00:39:31.765 --> 00:39:34.164
<v Speaker 2>And so then if we open the device

00:39:34.164 --> 00:39:35.845
<v Speaker 2>dot command, this is where all of our

00:39:35.845 --> 00:39:36.645
<v Speaker 2>logic will go.

00:39:37.660 --> 00:39:38.460
<v Speaker 1>So

00:39:39.740 --> 00:39:41.340
<v Speaker 1>this gives you the ability in the CLI

00:39:41.340 --> 00:39:43.740
<v Speaker 1>to be able to say mental CTL create

00:39:43.740 --> 00:39:45.740
<v Speaker 1>and then device as a sub command of

00:39:45.740 --> 00:39:46.060
<v Speaker 1>create.

00:39:51.835 --> 00:39:52.714
<v Speaker 0>Okay.

00:39:56.474 --> 00:39:57.994
<v Speaker 2>I promise you it'll work.

00:39:59.275 --> 00:39:59.914
<v Speaker 0>But to me

00:40:00.795 --> 00:40:03.115
<v Speaker 0>this is device. This file. Right? This is

00:40:03.115 --> 00:40:05.310
<v Speaker 0>the device slash c l I dot go,

00:40:05.310 --> 00:40:07.150
<v Speaker 0>and we're referencing ourselves.

00:40:07.630 --> 00:40:08.910
<v Speaker 2>Oh, I thought I was in the create

00:40:08.910 --> 00:40:10.750
<v Speaker 2>dot go. That's probably where we're that's probably

00:40:10.750 --> 00:40:12.670
<v Speaker 2>where the confusion is. That's where the confusion

00:40:12.670 --> 00:40:14.430
<v Speaker 2>is coming from. So all of this needs

00:40:14.430 --> 00:40:16.510
<v Speaker 2>to go into the create doc. So in

00:40:16.510 --> 00:40:17.390
<v Speaker 2>the create

00:40:17.710 --> 00:40:21.295
<v Speaker 2>directory, there needs to also be a cli.go.

00:40:21.535 --> 00:40:23.935
<v Speaker 2>For those people watching for those people watching,

00:40:23.935 --> 00:40:25.855
<v Speaker 2>I can actually see the file name. I

00:40:25.855 --> 00:40:28.575
<v Speaker 2>can only actually see where we are. So

00:40:28.575 --> 00:40:30.735
<v Speaker 2>all this needs to go into there.

00:40:32.079 --> 00:40:32.880
<v Speaker 2>Okay.

00:40:32.880 --> 00:40:35.360
<v Speaker 2>And the package needs to be create

00:40:36.000 --> 00:40:37.280
<v Speaker 2>at the top there.

00:40:37.920 --> 00:40:40.240
<v Speaker 0>Alright. Okay. So we come into device now.

00:40:40.240 --> 00:40:41.840
<v Speaker 0>This is package device.

00:40:41.920 --> 00:40:44.240
<v Speaker 2>Yeah. And then we probably do have a

00:40:44.240 --> 00:40:46.880
<v Speaker 0>run e here then. Right? Yes. That's right.

00:40:46.880 --> 00:40:48.275
<v Speaker 2>Yeah. Okay.

00:40:49.155 --> 00:40:51.475
<v Speaker 2>But let's before we actually start adding all

00:40:51.475 --> 00:40:53.395
<v Speaker 2>Pulumi logic in there, let's,

00:40:53.795 --> 00:40:55.635
<v Speaker 2>like, actually make sure this all builds.

00:40:56.755 --> 00:40:58.835
<v Speaker 1>So we need to change that. Yeah. We

00:40:58.835 --> 00:41:00.680
<v Speaker 1>need to change that to be device. This

00:41:00.680 --> 00:41:02.200
<v Speaker 1>needs to be like a a

00:41:02.440 --> 00:41:04.520
<v Speaker 1>proper scaffold of a COBRA command.

00:41:04.760 --> 00:41:05.400
<v Speaker 1>Yeah.

00:41:06.920 --> 00:41:08.680
<v Speaker 0>I think it still needs to runny. So

00:41:08.680 --> 00:41:10.200
<v Speaker 0>how do we just do a a function

00:41:10.200 --> 00:41:12.440
<v Speaker 0>or expression that says hello, world? What what

00:41:12.440 --> 00:41:14.600
<v Speaker 0>was the parameter for runny again? Func.

00:41:16.105 --> 00:41:18.585
<v Speaker 1>Which takes a command a c m d,

00:41:18.585 --> 00:41:20.345
<v Speaker 1>which is a pointer

00:41:20.345 --> 00:41:22.505
<v Speaker 1>to cobra dot command

00:41:23.705 --> 00:41:24.905
<v Speaker 1>and args,

00:41:24.905 --> 00:41:26.345
<v Speaker 1>which is an array of string.

00:41:30.025 --> 00:41:30.665
<v Speaker 0>Args.

00:41:33.950 --> 00:41:35.550
<v Speaker 1>And it returns an error.

00:41:36.990 --> 00:41:38.670
<v Speaker 1>It needs to be the other way around.

00:41:38.830 --> 00:41:40.990
<v Speaker 1>An array of string, not string array.

00:41:41.230 --> 00:41:41.790
<v Speaker 0>Yeah.

00:41:42.270 --> 00:41:44.190
<v Speaker 0>The typescript come they can Yeah.

00:41:44.670 --> 00:41:46.190
<v Speaker 0>Hello. Yeah. So that should just be hello

00:41:46.190 --> 00:41:48.725
<v Speaker 2>world. Yeah. Device create.

00:41:49.445 --> 00:41:50.085
<v Speaker 0>Nice.

00:41:50.485 --> 00:41:53.205
<v Speaker 1>Alright. Let's change the use to be from

00:41:53.205 --> 00:41:55.765
<v Speaker 1>create because we're inside the package of device.

00:41:55.765 --> 00:41:58.325
<v Speaker 1>Let's change the use to be device.

00:42:00.085 --> 00:42:00.405
<v Speaker 2>Yeah.

00:42:04.109 --> 00:42:04.830
<v Speaker 2>Yep.

00:42:06.750 --> 00:42:09.710
<v Speaker 0>Hey. Why are you mourning about Go? Missing

00:42:11.150 --> 00:42:12.030
<v Speaker 0>thing.

00:42:12.510 --> 00:42:14.030
<v Speaker 0>I don't have the import. I used to

00:42:14.030 --> 00:42:15.390
<v Speaker 0>do that automatically. Come on, Go.

00:42:16.685 --> 00:42:18.205
<v Speaker 0>Versus code, I guess.

00:42:22.205 --> 00:42:24.765
<v Speaker 0>Unused command. How do we do we just

00:42:24.765 --> 00:42:26.765
<v Speaker 0>not assign it? No. No. You have to

00:42:26.765 --> 00:42:29.085
<v Speaker 2>return it, I think. Return it. Yep. And

00:42:29.085 --> 00:42:29.965
<v Speaker 2>it needs to be down there.

00:42:31.730 --> 00:42:33.810
<v Speaker 1>There we go. That's what I'm thinking. Right.

00:42:33.810 --> 00:42:34.290
<v Speaker 0>Okay.

00:42:36.770 --> 00:42:38.770
<v Speaker 0>So let's go build.

00:42:39.329 --> 00:42:40.930
<v Speaker 1>I think we're gonna have an error one

00:42:40.930 --> 00:42:41.490
<v Speaker 1>level up.

00:42:44.694 --> 00:42:46.135
<v Speaker 2>Not a dire yeah. I think you need

00:42:46.135 --> 00:42:48.375
<v Speaker 2>to remove the CLI because that's not actually

00:42:48.454 --> 00:42:49.974
<v Speaker 2>that's just the directory. It's not in the

00:42:49.974 --> 00:42:50.855
<v Speaker 2>go path.

00:42:51.255 --> 00:42:52.455
<v Speaker 2>It could be wrong.

00:42:55.335 --> 00:42:56.934
<v Speaker 2>Oh, we need to return a command here

00:42:56.934 --> 00:42:57.335
<v Speaker 2>as well.

00:43:02.910 --> 00:43:04.750
<v Speaker 0>It's not I believe. Either.

00:43:05.950 --> 00:43:08.350
<v Speaker 0>Versus code let me down big time today.

00:43:11.950 --> 00:43:13.630
<v Speaker 1>So you're you're you're trying to take Lee

00:43:13.630 --> 00:43:14.830
<v Speaker 1>and I out of our comfort zone. We're

00:43:14.830 --> 00:43:17.215
<v Speaker 1>jet Yeah. My I'm missing my IntelliJ right

00:43:17.215 --> 00:43:18.815
<v Speaker 2>now. Big time.

00:43:19.775 --> 00:43:22.095
<v Speaker 0>Alright. Device create. So there's a problem with

00:43:22.095 --> 00:43:24.575
<v Speaker 0>this import here. So metal CTL

00:43:24.575 --> 00:43:25.535
<v Speaker 0>create

00:43:28.095 --> 00:43:30.255
<v Speaker 1>like It's because device

00:43:30.494 --> 00:43:32.970
<v Speaker 1>if you go back to command device yeah.

00:43:33.450 --> 00:43:34.810
<v Speaker 1>You've you've named it

00:43:35.210 --> 00:43:37.530
<v Speaker 1>create or you've named it device as the

00:43:37.530 --> 00:43:40.330
<v Speaker 1>as the actual package itself. So go inside,

00:43:40.330 --> 00:43:42.170
<v Speaker 1>yep, the CLI for device,

00:43:42.965 --> 00:43:45.045
<v Speaker 1>And you'll see in here, you've renamed it

00:43:45.045 --> 00:43:46.965
<v Speaker 1>device, and it doesn't it needs to be

00:43:46.965 --> 00:43:47.605
<v Speaker 1>command.

00:43:48.725 --> 00:43:50.485
<v Speaker 1>So line nine, as you look at it

00:43:50.485 --> 00:43:52.885
<v Speaker 1>now, it needs to be func command.

00:43:57.530 --> 00:43:59.690
<v Speaker 0>Right. Yeah. There we go.

00:44:02.490 --> 00:44:04.170
<v Speaker 2>And I think it's because this is in

00:44:04.170 --> 00:44:06.250
<v Speaker 2>the subdirectory CMD.

00:44:06.570 --> 00:44:09.050
<v Speaker 2>So if you go back to

00:44:09.825 --> 00:44:11.105
<v Speaker 2>import on

00:44:11.505 --> 00:44:12.865
<v Speaker 2>device CMD.

00:44:12.865 --> 00:44:14.145
<v Speaker 2>Right. Got it. Yeah. Okay.

00:44:15.185 --> 00:44:16.145
<v Speaker 2>Three

00:44:20.145 --> 00:44:22.625
<v Speaker 2>professional software engineers here having a great time.

00:44:24.020 --> 00:44:26.740
<v Speaker 2>Right. It's much harder without Stack Overflow.

00:44:27.700 --> 00:44:28.740
<v Speaker 2>So then you should have

00:44:29.380 --> 00:44:30.100
<v Speaker 0>Device.

00:44:31.380 --> 00:44:33.380
<v Speaker 2>Oh, we had need to import device into

00:44:33.380 --> 00:44:34.180
<v Speaker 2>the root

00:44:34.340 --> 00:44:35.700
<v Speaker 2>into the root command as well.

00:44:37.164 --> 00:44:39.965
<v Speaker 0>Of course. So so here, we're gonna need

00:44:40.045 --> 00:44:40.605
<v Speaker 0>to

00:44:41.484 --> 00:44:44.204
<v Speaker 0>add it. It's in the it will be

00:44:44.204 --> 00:44:47.005
<v Speaker 2>in the in it, I think, in the

00:44:47.005 --> 00:44:48.204
<v Speaker 2>configure CLI. Yeah.

00:44:49.410 --> 00:44:52.049
<v Speaker 2>So in here, you just need above return

00:44:52.049 --> 00:44:53.010
<v Speaker 2>root command.

00:44:53.410 --> 00:44:55.250
<v Speaker 1>Line 14 as you look at it now.

00:44:55.250 --> 00:44:57.490
<v Speaker 1>Yeah. So then do root command

00:44:58.609 --> 00:45:01.490
<v Speaker 1>Dot add command. Dot add command

00:45:02.505 --> 00:45:03.464
<v Speaker 2>device

00:45:04.424 --> 00:45:05.545
<v Speaker 2>dot command.

00:45:06.424 --> 00:45:08.105
<v Speaker 2>Sorry. Create dot command.

00:45:08.345 --> 00:45:09.385
<v Speaker 1>Yeah. Create.

00:45:10.025 --> 00:45:10.984
<v Speaker 2>Not device.

00:45:11.065 --> 00:45:12.984
<v Speaker 1>No. Create dot command,

00:45:13.144 --> 00:45:15.704
<v Speaker 1>not device dot command. There we go.

00:45:16.859 --> 00:45:18.460
<v Speaker 0>And now they are all complete, and then

00:45:18.460 --> 00:45:20.619
<v Speaker 0>all imports is working. Yeah.

00:45:21.180 --> 00:45:23.099
<v Speaker 2>So there we go. Now so now, hopefully,

00:45:23.099 --> 00:45:24.380
<v Speaker 2>you can see there we have

00:45:24.940 --> 00:45:26.539
<v Speaker 2>created this directory structure.

00:45:28.475 --> 00:45:30.795
<v Speaker 0>Not use create command type font COBRA as

00:45:30.795 --> 00:45:31.035
<v Speaker 0>co

00:45:31.915 --> 00:45:33.595
<v Speaker 0>argument to add command.

00:45:34.475 --> 00:45:35.195
<v Speaker 2>Interesting.

00:45:40.560 --> 00:45:42.480
<v Speaker 2>Can I take a look? Calling it. Right?

00:45:42.480 --> 00:45:43.840
<v Speaker 0>Oh, no. I need to call it. There

00:45:43.840 --> 00:45:45.440
<v Speaker 0>we go. There we go.

00:45:47.120 --> 00:45:47.840
<v Speaker 0>Okay.

00:45:54.400 --> 00:45:54.720
<v Speaker 0>Interesting.

00:45:56.115 --> 00:45:57.715
<v Speaker 0>What have I got wrong?

00:45:58.595 --> 00:46:00.435
<v Speaker 2>Oh, we're all in this together, David.

00:46:05.075 --> 00:46:07.075
<v Speaker 0>Do we have to add no. We add

00:46:07.075 --> 00:46:08.915
<v Speaker 0>create, which references device.

00:46:10.470 --> 00:46:11.190
<v Speaker 0>Yeah.

00:46:12.470 --> 00:46:14.390
<v Speaker 0>And their main reference is create.

00:46:18.710 --> 00:46:20.070
<v Speaker 0>Yeah. That looks good.

00:46:21.590 --> 00:46:23.430
<v Speaker 2>See, I'm usually copying and pasting this stuff.

00:46:23.430 --> 00:46:24.710
<v Speaker 2>So like I've added well, I had it

00:46:24.710 --> 00:46:25.430
<v Speaker 2>working once

00:46:25.974 --> 00:46:27.255
<v Speaker 2>and it was good enough.

00:46:28.455 --> 00:46:29.415
<v Speaker 2>Let me

00:46:39.369 --> 00:46:40.170
<v Speaker 0>Okay.

00:46:43.130 --> 00:46:44.570
<v Speaker 0>That looks good too.

00:46:46.330 --> 00:46:47.770
<v Speaker 0>That's a binary what we're doing.

00:46:54.635 --> 00:46:56.555
<v Speaker 0>Let me pull up the corporate app.

00:47:03.435 --> 00:47:05.675
<v Speaker 0>I'm sure it's something really simple.

00:47:17.520 --> 00:47:19.359
<v Speaker 2>Yeah. It's probably something very, very simple.

00:47:21.295 --> 00:47:23.295
<v Speaker 0>So it looks like the edit the edit

00:47:23.295 --> 00:47:25.535
<v Speaker 0>function should have the root add command.

00:47:26.735 --> 00:47:28.975
<v Speaker 2>Ah, yeah. You're probably right, actually.

00:47:29.615 --> 00:47:32.015
<v Speaker 2>Well, so this the way that this is

00:47:32.015 --> 00:47:33.615
<v Speaker 2>laid out is a little different to the

00:47:33.615 --> 00:47:35.210
<v Speaker 2>way that I usually lay them out. If

00:47:35.210 --> 00:47:36.570
<v Speaker 2>you wanna open

00:47:39.049 --> 00:47:40.330
<v Speaker 2>yeah. That could work.

00:47:41.769 --> 00:47:43.849
<v Speaker 0>What are you complaining about, Annette?

00:47:47.210 --> 00:47:48.490
<v Speaker 0>Back to

00:47:55.775 --> 00:47:57.215
<v Speaker 0>Let's just try and compare it. Maybe it

00:47:57.215 --> 00:47:57.935
<v Speaker 0>should be as good.

00:48:02.109 --> 00:48:04.750
<v Speaker 0>Nope. Not be as good. It's always me.

00:48:04.750 --> 00:48:05.710
<v Speaker 0>Never be as good.

00:48:06.670 --> 00:48:08.990
<v Speaker 0>Because I'm just not paying any attention. There

00:48:08.990 --> 00:48:10.110
<v Speaker 0>we go. Alright. So

00:48:10.990 --> 00:48:13.470
<v Speaker 0>we still probably wanna return the root command

00:48:13.470 --> 00:48:15.325
<v Speaker 0>here. Right? Yeah.

00:48:16.845 --> 00:48:19.485
<v Speaker 0>Which keeps that happy. This is now complaining.

00:48:19.485 --> 00:48:21.005
<v Speaker 0>The root command is undeclared,

00:48:21.005 --> 00:48:24.045
<v Speaker 0>and that's because here it is the same.

00:48:24.045 --> 00:48:26.365
<v Speaker 2>It needs to be that, I believe.

00:48:28.140 --> 00:48:30.300
<v Speaker 0>Nope. Have you got it? Oh, you're doing

00:48:30.300 --> 00:48:32.060
<v Speaker 0>it. Alright. Okay. No. I thought I thought

00:48:32.060 --> 00:48:34.220
<v Speaker 2>that was the answer, but I was, unfortunately,

00:48:34.300 --> 00:48:34.860
<v Speaker 2>wrong.

00:48:37.339 --> 00:48:39.420
<v Speaker 0>Oh, yeah. Okay. So they create the root

00:48:39.420 --> 00:48:41.900
<v Speaker 0>command in the global scope by the way

00:48:41.900 --> 00:48:43.765
<v Speaker 0>of bit, But whereas we're doing it in

00:48:43.765 --> 00:48:44.885
<v Speaker 0>configure CLI.

00:48:44.885 --> 00:48:46.805
<v Speaker 0>I don't let's just take Yeah. And it

00:48:46.805 --> 00:48:49.365
<v Speaker 1>actually fires before main, so that's trouble.

00:48:49.445 --> 00:48:52.005
<v Speaker 0>Yeah. I don't think we need that bit.

00:48:52.005 --> 00:48:52.325
<v Speaker 0>Right?

00:48:56.130 --> 00:48:57.569
<v Speaker 1>So we need to declare it as a

00:48:57.569 --> 00:48:58.130
<v Speaker 1>VAR.

00:49:05.089 --> 00:49:06.849
<v Speaker 1>It just needs to be equals,

00:49:06.849 --> 00:49:09.730
<v Speaker 1>not colon equals. The VAR. Yeah. Okay. Yeah.

00:49:09.730 --> 00:49:11.010
<v Speaker 0>And this is root command.

00:49:13.145 --> 00:49:14.985
<v Speaker 2>There we go. It's not complaining.

00:49:16.185 --> 00:49:17.545
<v Speaker 2>Yeah. That's better.

00:49:23.385 --> 00:49:24.905
<v Speaker 2>Well, does the create command. If you do

00:49:24.905 --> 00:49:26.900
<v Speaker 2>metal CTL create, it might just not be

00:49:26.900 --> 00:49:28.020
<v Speaker 2>showing in the help.

00:49:28.980 --> 00:49:30.820
<v Speaker 2>Yeah. And then the the device, if you

00:49:30.820 --> 00:49:32.020
<v Speaker 2>do create device.

00:49:37.940 --> 00:49:38.820
<v Speaker 1>It's not registering.

00:49:40.085 --> 00:49:42.244
<v Speaker 2>It's not registering the commands, but I

00:49:42.484 --> 00:49:43.845
<v Speaker 2>don't understand.

00:49:43.924 --> 00:49:45.605
<v Speaker 2>It's very hard to do this when you,

00:49:45.605 --> 00:49:48.085
<v Speaker 2>like, have a established pattern

00:49:48.085 --> 00:49:49.204
<v Speaker 2>that you follow.

00:49:50.244 --> 00:49:51.045
<v Speaker 0>Hold on.

00:49:53.390 --> 00:49:56.190
<v Speaker 0>I am a semi competent programmer. I can

00:49:56.190 --> 00:49:57.710
<v Speaker 0>work with it. So

00:49:59.710 --> 00:50:01.230
<v Speaker 0>look at this example.

00:50:01.710 --> 00:50:04.270
<v Speaker 0>Alright. We define our recommend,

00:50:05.535 --> 00:50:07.535
<v Speaker 0>add commands, which we're doing.

00:50:08.575 --> 00:50:10.975
<v Speaker 0>I mean, they don't even have a main.

00:50:11.055 --> 00:50:13.295
<v Speaker 0>Oh, they just call command execute here. Okay.

00:50:13.295 --> 00:50:15.055
<v Speaker 0>And the command is their module,

00:50:15.535 --> 00:50:16.815
<v Speaker 0>which exposes

00:50:16.895 --> 00:50:17.694
<v Speaker 0>an execute.

00:50:20.280 --> 00:50:22.520
<v Speaker 0>We've got root command equals

00:50:22.520 --> 00:50:24.040
<v Speaker 0>root command execute.

00:50:24.040 --> 00:50:26.280
<v Speaker 0>Looks good. So I'm assuming that it's not

00:50:26.280 --> 00:50:28.040
<v Speaker 0>being called, I'm gonna call

00:50:29.480 --> 00:50:29.960
<v Speaker 0>in it.

00:50:33.425 --> 00:50:34.705
<v Speaker 0>We can pay all that.

00:50:37.665 --> 00:50:39.265
<v Speaker 0>And that complains

00:50:39.665 --> 00:50:41.745
<v Speaker 0>because Yeah. And and it's not a function.

00:50:41.745 --> 00:50:44.145
<v Speaker 1>Yeah. I'm just gonna do that. Let's

00:50:44.145 --> 00:50:45.025
<v Speaker 0>let's just do that.

00:50:46.980 --> 00:50:48.900
<v Speaker 0>And then that's complaining because

00:50:49.380 --> 00:50:50.820
<v Speaker 1>The import is gone.

00:50:51.540 --> 00:50:53.860
<v Speaker 0>Alright. Okay. That is back now.

00:50:54.180 --> 00:50:54.900
<v Speaker 0>Yep.

00:50:56.260 --> 00:50:56.820
<v Speaker 0>Build.

00:50:58.415 --> 00:50:59.215
<v Speaker 0>Help.

00:51:05.535 --> 00:51:06.575
<v Speaker 0>Why does it hit me?

00:51:12.900 --> 00:51:14.420
<v Speaker 2>I wouldn't mind, but I have a working

00:51:14.420 --> 00:51:15.940
<v Speaker 2>version right in front of me as well.

00:51:15.940 --> 00:51:16.500
<v Speaker 2>So

00:51:17.460 --> 00:51:18.820
<v Speaker 0>Do you wanna swap over?

00:51:19.220 --> 00:51:20.980
<v Speaker 0>Do you think we'll spend another five minutes

00:51:20.980 --> 00:51:22.180
<v Speaker 0>and see if we can fix this? Yeah.

00:51:22.180 --> 00:51:23.460
<v Speaker 2>I think we I think I think everybody

00:51:23.460 --> 00:51:24.420
<v Speaker 2>wants to see us fix this.

00:51:26.375 --> 00:51:28.455
<v Speaker 0>And if you are watching and you're pointing

00:51:28.455 --> 00:51:30.055
<v Speaker 0>something out and you're on your monitor, feel

00:51:30.055 --> 00:51:31.734
<v Speaker 0>free to put it in the comments because,

00:51:31.734 --> 00:51:32.295
<v Speaker 0>you know,

00:51:32.775 --> 00:51:33.895
<v Speaker 0>that would be nice.

00:51:35.095 --> 00:51:37.415
<v Speaker 0>Okay. So we define a root command and

00:51:37.415 --> 00:51:40.020
<v Speaker 0>we add our subcommand here. Now we know

00:51:40.020 --> 00:51:41.940
<v Speaker 0>this is working because we're getting create things

00:51:41.940 --> 00:51:43.860
<v Speaker 0>in Equinix Mail thing. Right? It it does

00:51:43.860 --> 00:51:45.220
<v Speaker 0>see that. Yep.

00:51:46.100 --> 00:51:47.940
<v Speaker 0>Now the ads command

00:51:48.100 --> 00:51:49.300
<v Speaker 0>for create,

00:51:49.460 --> 00:51:50.740
<v Speaker 0>which is this one here,

00:51:53.275 --> 00:51:54.955
<v Speaker 0>has a func command,

00:51:55.595 --> 00:51:58.475
<v Speaker 0>returns itself, and adds a sub command here.

00:51:58.555 --> 00:52:00.395
<v Speaker 0>And then the sub command does the exact

00:52:00.395 --> 00:52:01.115
<v Speaker 0>same.

00:52:02.155 --> 00:52:04.235
<v Speaker 0>Only this one has a run expression, which

00:52:04.235 --> 00:52:05.515
<v Speaker 0>should work. So

00:52:08.270 --> 00:52:10.270
<v Speaker 0>I mean, that looks pretty faint.

00:52:11.390 --> 00:52:13.230
<v Speaker 0>I'm looking at these examples and I'm like,

00:52:13.230 --> 00:52:14.350
<v Speaker 0>yeah, it's it's good.

00:52:16.109 --> 00:52:18.270
<v Speaker 0>Wonder if it's am am I building it

00:52:18.270 --> 00:52:20.430
<v Speaker 0>wrong? Let's try go build.

00:52:22.555 --> 00:52:24.795
<v Speaker 2>So I usually just do go run. If

00:52:24.795 --> 00:52:26.075
<v Speaker 2>you do go run

00:52:29.035 --> 00:52:29.995
<v Speaker 2>CMD

00:52:33.275 --> 00:52:34.075
<v Speaker 2>CMD

00:52:34.075 --> 00:52:35.835
<v Speaker 2>metal CTL may not go.

00:52:38.970 --> 00:52:39.770
<v Speaker 2>Okay.

00:52:44.170 --> 00:52:45.610
<v Speaker 2>So then you do create.

00:52:48.970 --> 00:52:50.170
<v Speaker 0>Create device.

00:52:50.885 --> 00:52:53.845
<v Speaker 0>So it's just my Google build of everything

00:52:53.845 --> 00:52:55.285
<v Speaker 0>for some weird reason.

00:52:56.484 --> 00:52:59.045
<v Speaker 0>Who knows? Right. Anyway, we'll we'll move on.

00:52:59.045 --> 00:53:00.085
<v Speaker 2>Okay. So

00:53:02.005 --> 00:53:05.045
<v Speaker 2>now that we have this capability to kind

00:53:05.045 --> 00:53:05.605
<v Speaker 2>of create

00:53:06.860 --> 00:53:08.700
<v Speaker 2>things from within the CLI,

00:53:08.940 --> 00:53:09.820
<v Speaker 2>we can put

00:53:10.140 --> 00:53:13.580
<v Speaker 2>a Pulumi program in our create device,

00:53:15.180 --> 00:53:16.780
<v Speaker 2>like run e. So if we go back

00:53:16.780 --> 00:53:17.980
<v Speaker 2>to the editor

00:53:17.980 --> 00:53:19.580
<v Speaker 2>inside our run e

00:53:20.535 --> 00:53:22.214
<v Speaker 2>And this isn't like, the what we were

00:53:22.214 --> 00:53:23.655
<v Speaker 2>doing so far isn't even the hard part.

00:53:23.655 --> 00:53:24.215
<v Speaker 2>So

00:53:25.655 --> 00:53:27.815
<v Speaker 2>we were just building a very, very simple

00:53:27.974 --> 00:53:29.815
<v Speaker 2>very, very simple CLI.

00:53:30.214 --> 00:53:31.335
<v Speaker 2>But we can import

00:53:32.630 --> 00:53:36.310
<v Speaker 2>the Pulumi automation API as a go package

00:53:36.470 --> 00:53:39.110
<v Speaker 2>and actually execute it from within this function.

00:53:40.150 --> 00:53:41.030
<v Speaker 2>And

00:53:41.350 --> 00:53:42.550
<v Speaker 2>I believe

00:53:43.110 --> 00:53:43.830
<v Speaker 2>that

00:53:43.910 --> 00:53:46.070
<v Speaker 2>it is under it's

00:53:46.775 --> 00:53:47.975
<v Speaker 2>Pulumi,

00:53:49.255 --> 00:53:51.975
<v Speaker 2>github.comPulumi/Pulumi,

00:53:53.415 --> 00:53:55.015
<v Speaker 2>and then it's SDK

00:53:56.135 --> 00:53:57.255
<v Speaker 2>v two

00:53:59.495 --> 00:54:00.135
<v Speaker 2>go

00:54:01.095 --> 00:54:02.215
<v Speaker 2>x

00:54:03.150 --> 00:54:04.510
<v Speaker 2>for for

00:54:04.510 --> 00:54:05.790
<v Speaker 2>experimental

00:54:06.109 --> 00:54:07.870
<v Speaker 2>and then forward slash auto.

00:54:09.230 --> 00:54:11.310
<v Speaker 2>So this gives a bunch of Go

00:54:11.630 --> 00:54:13.950
<v Speaker 1>for it, Lee. Sorry. This is like, there's

00:54:13.950 --> 00:54:15.630
<v Speaker 2>a bunch of packages in here as well.

00:54:15.705 --> 00:54:17.865
<v Speaker 2>But, essentially, this is a bunch of packages

00:54:17.865 --> 00:54:19.785
<v Speaker 2>that kind of give you

00:54:20.265 --> 00:54:22.665
<v Speaker 2>everything that is available in the Pulumi open,

00:54:22.665 --> 00:54:23.945
<v Speaker 2>the Pulumi destroy,

00:54:25.225 --> 00:54:26.505
<v Speaker 2>like, commands,

00:54:26.745 --> 00:54:27.065
<v Speaker 2>essentially.

00:54:28.539 --> 00:54:29.180
<v Speaker 2>So

00:54:29.500 --> 00:54:31.900
<v Speaker 2>I think the best thing to do,

00:54:32.220 --> 00:54:34.140
<v Speaker 2>first of all, is to

00:54:35.339 --> 00:54:36.220
<v Speaker 2>create

00:54:36.220 --> 00:54:36.940
<v Speaker 2>a

00:54:37.980 --> 00:54:39.579
<v Speaker 2>there's a bunch of ways that you can

00:54:39.579 --> 00:54:41.900
<v Speaker 2>create the stacks that we were doing inside

00:54:41.900 --> 00:54:42.299
<v Speaker 2>the,

00:54:43.494 --> 00:54:45.575
<v Speaker 2>you know, with the previous thing. You can

00:54:45.575 --> 00:54:47.494
<v Speaker 2>either reference a git URL or you can

00:54:47.494 --> 00:54:50.535
<v Speaker 2>actually have the code in line inside your

00:54:50.695 --> 00:54:52.535
<v Speaker 2>inside your function. So

00:54:53.494 --> 00:54:55.975
<v Speaker 2>I think the best thing to do here

00:54:56.270 --> 00:54:58.750
<v Speaker 2>is to create a

00:54:59.310 --> 00:55:00.430
<v Speaker 2>stack first.

00:55:01.550 --> 00:55:03.950
<v Speaker 2>So we'll need to remove the format print

00:55:03.950 --> 00:55:04.590
<v Speaker 2>line.

00:55:08.589 --> 00:55:10.349
<v Speaker 2>New variable stack name. And I guess I

00:55:10.349 --> 00:55:11.470
<v Speaker 1>could do this if you really want me

00:55:11.470 --> 00:55:11.630
<v Speaker 2>to.

00:55:14.285 --> 00:55:16.285
<v Speaker 2>Let me see if I can take over.

00:55:16.365 --> 00:55:17.085
<v Speaker 2>Stack

00:55:18.845 --> 00:55:19.805
<v Speaker 2>name

00:55:20.285 --> 00:55:21.405
<v Speaker 2>equals

00:55:22.204 --> 00:55:23.245
<v Speaker 2>auto

00:55:24.204 --> 00:55:26.125
<v Speaker 2>dot fully

00:55:26.580 --> 00:55:28.580
<v Speaker 2>qualified.

00:55:29.380 --> 00:55:32.820
<v Speaker 1>So Pulumi Pulumi SDK isn't actually included in

00:55:32.820 --> 00:55:34.180
<v Speaker 1>the go model here, so you'll not get

00:55:34.180 --> 00:55:35.380
<v Speaker 1>auto complete yet.

00:55:35.620 --> 00:55:37.140
<v Speaker 0>Yeah. We need to do it. Just bear

00:55:37.140 --> 00:55:38.980
<v Speaker 0>minimal and save it, and then we'll get

00:55:38.980 --> 00:55:39.860
<v Speaker 0>it complete.

00:55:40.494 --> 00:55:41.375
<v Speaker 2>And

00:55:41.375 --> 00:55:43.775
<v Speaker 2>you aren't using the Pulumi SaaS back end,

00:55:43.775 --> 00:55:46.015
<v Speaker 2>so we can just probably call this

00:55:48.655 --> 00:55:50.015
<v Speaker 2>let's just call it foo for the time

00:55:50.015 --> 00:55:52.815
<v Speaker 2>being, you know, because everybody loves

00:55:54.339 --> 00:55:56.100
<v Speaker 2>everybody loves a good variable

00:55:56.339 --> 00:55:58.579
<v Speaker 2>in here. And I think, Paul, you implemented

00:55:58.579 --> 00:56:01.060
<v Speaker 2>this, right, for the local back ends? So

00:56:01.220 --> 00:56:02.580
<v Speaker 2>it doesn't need to be

00:56:03.140 --> 00:56:05.540
<v Speaker 2>slash namespace or anything like that. Right? No.

00:56:05.540 --> 00:56:07.955
<v Speaker 1>No. It shouldn't be. Okay. Excellent.

00:56:08.355 --> 00:56:09.075
<v Speaker 2>And then

00:56:09.635 --> 00:56:11.795
<v Speaker 2>we wanna to get all complete?

00:56:12.275 --> 00:56:14.195
<v Speaker 2>Yes. Let's do it. Go ahead. Yeah. So

00:56:14.195 --> 00:56:15.955
<v Speaker 1>just you'll have to just return null.

00:56:16.275 --> 00:56:16.915
<v Speaker 0>Yeah.

00:56:18.355 --> 00:56:20.995
<v Speaker 1>Actually, it oh, yeah. Return null and then

00:56:21.075 --> 00:56:21.635
<v Speaker 1>yeah. There you go.

00:56:23.369 --> 00:56:24.250
<v Speaker 2>And then

00:56:26.170 --> 00:56:28.490
<v Speaker 1>You can't declare to an underscore. Just remove

00:56:28.490 --> 00:56:30.730
<v Speaker 1>the colon. There we go. There we go.

00:56:31.049 --> 00:56:32.730
<v Speaker 0>Okay. So let's

00:56:35.210 --> 00:56:36.730
<v Speaker 0>let's get the go mod going.

00:56:40.475 --> 00:56:43.355
<v Speaker 0>There we go. All the Pulumi goodness coming.

00:56:48.075 --> 00:56:49.995
<v Speaker 0>And we can probably just ignore that, and

00:56:49.995 --> 00:56:51.755
<v Speaker 0>I'll put your stack in back.

00:56:52.155 --> 00:56:52.875
<v Speaker 2>Thank you.

00:56:54.069 --> 00:56:55.590
<v Speaker 0>And we should have auto complete.

00:56:55.829 --> 00:56:56.630
<v Speaker 2>Exactly.

00:56:56.630 --> 00:56:59.670
<v Speaker 2>And then we can create a Pulumi stack,

00:57:00.710 --> 00:57:02.870
<v Speaker 2>and it comes from

00:57:03.510 --> 00:57:04.950
<v Speaker 2>auto.op.

00:57:07.695 --> 00:57:09.775
<v Speaker 2>It didn't seem to get the autocomplete.

00:57:10.175 --> 00:57:11.455
<v Speaker 0>It's still downloading.

00:57:13.215 --> 00:57:13.775
<v Speaker 0>The view

00:57:14.335 --> 00:57:14.975
<v Speaker 0>oh.

00:57:17.775 --> 00:57:19.855
<v Speaker 0>Yeah. If I think if you just finish

00:57:19.855 --> 00:57:20.655
<v Speaker 0>that, that code.

00:57:22.730 --> 00:57:23.850
<v Speaker 2>Opposite.

00:57:27.849 --> 00:57:29.530
<v Speaker 2>I can probably figure it out.

00:57:30.890 --> 00:57:33.050
<v Speaker 2>So this takes a context. It takes the

00:57:33.050 --> 00:57:35.155
<v Speaker 2>stack name we just declared,

00:57:35.714 --> 00:57:37.635
<v Speaker 2>and then it takes a

00:57:37.795 --> 00:57:39.875
<v Speaker 2>project name. I was just gonna call this

00:57:40.035 --> 00:57:41.395
<v Speaker 2>Rawkode

00:57:41.875 --> 00:57:42.915
<v Speaker 2>Live

00:57:43.635 --> 00:57:45.875
<v Speaker 2>and then a program.

00:57:46.035 --> 00:57:47.075
<v Speaker 2>So in here,

00:57:47.875 --> 00:57:48.835
<v Speaker 2>this final

00:57:49.875 --> 00:57:51.450
<v Speaker 2>I don't actually know how to

00:57:52.170 --> 00:57:54.250
<v Speaker 2>do the peak in here. But this this

00:57:54.250 --> 00:57:56.970
<v Speaker 2>final thing in here where I'm specifying nil

00:57:56.970 --> 00:57:58.890
<v Speaker 2>is where we're actually going to specify a

00:57:58.890 --> 00:57:59.530
<v Speaker 2>stack.

00:57:59.690 --> 00:58:01.530
<v Speaker 2>If I didn't want clean code, I could

00:58:01.530 --> 00:58:03.610
<v Speaker 2>actually just literally inline

00:58:03.690 --> 00:58:05.050
<v Speaker 2>my Pulumi stack in here.

00:58:06.085 --> 00:58:08.165
<v Speaker 2>But what we probably wanna do

00:58:08.405 --> 00:58:09.285
<v Speaker 2>instead

00:58:09.685 --> 00:58:10.565
<v Speaker 2>is

00:58:10.805 --> 00:58:11.685
<v Speaker 2>do

00:58:12.645 --> 00:58:16.645
<v Speaker 2>if error is not equal now, return error.

00:58:16.965 --> 00:58:18.565
<v Speaker 2>Make sure we're doing alright.

00:58:19.445 --> 00:58:21.285
<v Speaker 2>And then equals

00:58:20.970 --> 00:58:22.010
<v Speaker 2>Pulumi.

00:58:22.010 --> 00:58:22.490
<v Speaker 2>Lee,

00:58:24.170 --> 00:58:27.849
<v Speaker 1>let's remove this, fully qualified stack name. We

00:58:27.849 --> 00:58:30.490
<v Speaker 1>should just declare it as foo rather than

00:58:30.490 --> 00:58:32.570
<v Speaker 1>anything else. So stack name equals foo.

00:58:33.770 --> 00:58:35.450
<v Speaker 2>Probably a good idea. Agreed.

00:58:44.135 --> 00:58:45.575
<v Speaker 2>Error equals

00:58:48.590 --> 00:58:50.190
<v Speaker 2>so now we create a stat. We also

00:58:50.190 --> 00:58:51.870
<v Speaker 2>need to create create what we call a

00:58:51.870 --> 00:58:52.670
<v Speaker 2>workspace,

00:58:52.990 --> 00:58:55.310
<v Speaker 2>and this is essentially like a a directory

00:58:55.310 --> 00:58:56.190
<v Speaker 2>that's gonna

00:58:56.510 --> 00:58:58.430
<v Speaker 2>hold all of our config.

00:58:59.310 --> 00:59:00.910
<v Speaker 2>So we workspace.

00:59:03.045 --> 00:59:04.805
<v Speaker 2>And then in that workspace,

00:59:04.805 --> 00:59:06.565
<v Speaker 2>we can do a bunch of plug in

00:59:06.565 --> 00:59:08.565
<v Speaker 2>installs, which we don't actually need to do

00:59:08.965 --> 00:59:11.205
<v Speaker 2>because you have them already locally. So then

00:59:11.205 --> 00:59:12.645
<v Speaker 2>we use workspace

00:59:13.045 --> 00:59:14.645
<v Speaker 2>dot set program,

00:59:16.290 --> 00:59:17.250
<v Speaker 2>and then

00:59:19.810 --> 00:59:20.850
<v Speaker 2>insert

00:59:21.330 --> 00:59:22.130
<v Speaker 2>program

00:59:22.610 --> 00:59:23.410
<v Speaker 2>here.

00:59:24.530 --> 00:59:27.490
<v Speaker 2>In this in this set program, it basically

00:59:27.490 --> 00:59:31.515
<v Speaker 2>takes just a standard function. So let's create

00:59:32.155 --> 00:59:33.115
<v Speaker 2>func

00:59:33.115 --> 00:59:33.915
<v Speaker 2>new

00:59:34.395 --> 00:59:35.355
<v Speaker 2>device.

00:59:36.235 --> 00:59:38.795
<v Speaker 2>And I'm gonna ask for your help here,

00:59:38.795 --> 00:59:40.395
<v Speaker 2>David. So the

00:59:40.795 --> 00:59:41.835
<v Speaker 2>Pulumi

00:59:42.960 --> 00:59:45.280
<v Speaker 2>program that we did before will need to

00:59:45.280 --> 00:59:47.119
<v Speaker 2>copy a bunch of that stuff from there

00:59:47.119 --> 00:59:49.040
<v Speaker 2>into this new device function,

00:59:50.160 --> 00:59:50.800
<v Speaker 2>essentially.

00:59:53.280 --> 00:59:55.359
<v Speaker 2>And I like to namespace these into packages,

00:59:56.785 --> 00:59:59.505
<v Speaker 2>but we can we can probably just do

00:59:59.505 --> 01:00:01.185
<v Speaker 2>that in line for the time being.

01:00:02.945 --> 01:00:03.745
<v Speaker 0>Okay.

01:00:04.465 --> 01:00:06.865
<v Speaker 0>Let me find where that

01:00:06.865 --> 01:00:07.265
<v Speaker 0>is.

01:00:11.130 --> 01:00:13.369
<v Speaker 0>So do you want the alright. Okay. Got

01:00:13.369 --> 01:00:13.930
<v Speaker 0>it. So

01:00:14.730 --> 01:00:16.569
<v Speaker 0>All of this, yeah, all of this goes

01:00:16.569 --> 01:00:18.330
<v Speaker 2>into that particular

01:00:19.210 --> 01:00:20.010
<v Speaker 2>thing. Yeah.

01:00:35.330 --> 01:00:38.370
<v Speaker 2>And then we should be able to do

01:00:40.530 --> 01:00:41.890
<v Speaker 2>new device

01:00:43.650 --> 01:00:44.530
<v Speaker 2>in here.

01:00:45.090 --> 01:00:46.130
<v Speaker 2>What's that

01:00:47.105 --> 01:00:48.385
<v Speaker 2>yelling at me for?

01:00:48.785 --> 01:00:50.225
<v Speaker 1>That's an extra. Yeah.

01:00:54.464 --> 01:00:57.425
<v Speaker 0>Alright. So it's not done our auto imports.

01:00:57.585 --> 01:00:58.865
<v Speaker 0>So let's

01:00:59.589 --> 01:01:01.190
<v Speaker 0>try and get a bit of help. Go

01:01:01.190 --> 01:01:02.710
<v Speaker 0>mod download.

01:01:02.710 --> 01:01:04.869
<v Speaker 0>Oh, c ah, c d c l I.

01:01:04.869 --> 01:01:05.830
<v Speaker 0>Go mod

01:01:07.030 --> 01:01:07.670
<v Speaker 0>download.

01:01:15.575 --> 01:01:18.055
<v Speaker 0>Okay. And then pop back over here.

01:01:20.535 --> 01:01:22.535
<v Speaker 2>We probably also need to import

01:01:22.775 --> 01:01:24.215
<v Speaker 0>Well, that's the wrong config.

01:01:25.240 --> 01:01:27.480
<v Speaker 1>And we also need the v three

01:01:27.640 --> 01:01:29.880
<v Speaker 1>SDK of packet, Pulumi packet.

01:01:30.440 --> 01:01:31.640
<v Speaker 1>It's pulled in.

01:01:33.080 --> 01:01:34.840
<v Speaker 1>Yeah. That's probably the best thing.

01:01:37.685 --> 01:01:40.805
<v Speaker 1>Online right below. There we go. Yep.

01:01:41.845 --> 01:01:43.205
<v Speaker 0>Let's save that.

01:01:45.525 --> 01:01:48.885
<v Speaker 0>Almost happy. So new Yeah. There's no context

01:01:48.885 --> 01:01:50.885
<v Speaker 1>being passed down into that file. Yeah. So

01:01:50.885 --> 01:01:52.325
<v Speaker 2>we need a Pulumi.

01:01:52.325 --> 01:01:54.060
<v Speaker 2>Context being passed into here,

01:01:54.780 --> 01:01:56.140
<v Speaker 2>which is Pulumi's

01:01:56.140 --> 01:01:56.860
<v Speaker 2>custom

01:01:57.100 --> 01:01:58.860
<v Speaker 2>or specified type.

01:02:00.300 --> 01:02:00.860
<v Speaker 1>Return

01:02:01.100 --> 01:02:03.100
<v Speaker 1>The function doesn't return anything.

01:02:03.420 --> 01:02:04.860
<v Speaker 1>Yeah. No? K.

01:02:05.595 --> 01:02:07.675
<v Speaker 0>Think that As in it needs to return

01:02:07.675 --> 01:02:09.115
<v Speaker 1>an error is what I mean. The signature

01:02:09.115 --> 01:02:11.275
<v Speaker 1>needs to return an error. Yeah. Alright.

01:02:11.355 --> 01:02:13.195
<v Speaker 0>It's happy. Unbelievable.

01:02:13.195 --> 01:02:14.635
<v Speaker 0>Oh, no. It's almost Oh, wait. No. It

01:02:14.635 --> 01:02:17.035
<v Speaker 2>isn't. Because you have to pass in context.

01:02:17.195 --> 01:02:17.915
<v Speaker 0>Yeah. Okay.

01:02:20.380 --> 01:02:23.740
<v Speaker 1>And that's not the correct context unfortunately because

01:02:23.740 --> 01:02:25.820
<v Speaker 1>we've just newed up a context dot background

01:02:25.820 --> 01:02:28.620
<v Speaker 1>and we actually specified a Pulumi dot context.

01:02:30.620 --> 01:02:31.660
<v Speaker 0>Okay.

01:02:31.660 --> 01:02:33.820
<v Speaker 0>So does that mean do we just initiate

01:02:33.820 --> 01:02:35.420
<v Speaker 0>a new Pulumi context?

01:02:38.195 --> 01:02:40.115
<v Speaker 0>Pulumi doc. I see a con a new

01:02:40.115 --> 01:02:41.475
<v Speaker 0>context API.

01:02:42.115 --> 01:02:44.355
<v Speaker 2>I think actually what might be easy here

01:02:44.675 --> 01:02:46.355
<v Speaker 2>is if we do

01:02:47.555 --> 01:02:48.595
<v Speaker 2>var

01:02:49.359 --> 01:02:50.240
<v Speaker 2>create

01:02:51.280 --> 01:02:52.320
<v Speaker 2>device

01:02:53.119 --> 01:02:54.000
<v Speaker 2>func

01:02:55.200 --> 01:02:58.240
<v Speaker 2>equal or create an anonymous function here, c

01:02:58.240 --> 01:02:59.440
<v Speaker 2>d x

01:03:01.625 --> 01:03:02.425
<v Speaker 2>Pulumi

01:03:02.425 --> 01:03:03.785
<v Speaker 2>dot context,

01:03:05.545 --> 01:03:06.825
<v Speaker 2>and then return

01:03:08.025 --> 01:03:09.225
<v Speaker 2>an error,

01:03:11.065 --> 01:03:12.825
<v Speaker 2>and then get rid of

01:03:13.065 --> 01:03:13.785
<v Speaker 2>this.

01:03:17.310 --> 01:03:18.830
<v Speaker 2>And then we can do

01:03:22.590 --> 01:03:23.310
<v Speaker 2>that.

01:03:24.190 --> 01:03:25.390
<v Speaker 2>I think

01:03:25.550 --> 01:03:27.070
<v Speaker 2>that should do it.

01:03:28.685 --> 01:03:29.485
<v Speaker 0>It's

01:03:29.485 --> 01:03:31.165
<v Speaker 0>not yelling at us.

01:03:31.405 --> 01:03:32.685
<v Speaker 0>So let's

01:03:33.165 --> 01:03:35.485
<v Speaker 0>let's go for it. Go run. What's the

01:03:35.485 --> 01:03:36.605
<v Speaker 2>worst that can happen?

01:03:37.565 --> 01:03:38.845
<v Speaker 0>A few more packages.

01:03:39.005 --> 01:03:41.485
<v Speaker 2>We could bring the whole of, Equinix meltdown,

01:03:41.485 --> 01:03:42.765
<v Speaker 2>I guess, in a in a really bad

01:03:42.765 --> 01:03:43.165
<v Speaker 2>situation.

01:03:45.110 --> 01:03:46.470
<v Speaker 1>Jesus, don't joke.

01:03:48.070 --> 01:03:49.990
<v Speaker 2>Pulumi stack dot workspace.

01:03:51.510 --> 01:03:52.390
<v Speaker 2>Okay.

01:03:54.630 --> 01:03:56.790
<v Speaker 0>So now it's morning about our imports.

01:03:58.075 --> 01:03:59.515
<v Speaker 0>We've not got Pulumi.

01:03:59.515 --> 01:04:00.795
<v Speaker 0>Pulumi's here.

01:04:09.435 --> 01:04:11.195
<v Speaker 2>Can you show me your imports again?

01:04:11.755 --> 01:04:12.315
<v Speaker 0>Yep.

01:04:23.270 --> 01:04:25.670
<v Speaker 2>I think the

01:04:31.665 --> 01:04:33.105
<v Speaker 2>can I see the error again?

01:04:35.665 --> 01:04:37.265
<v Speaker 0>Yes. Let's see.

01:04:38.225 --> 01:04:39.505
<v Speaker 0>So

01:04:40.450 --> 01:04:43.010
<v Speaker 0>Pulumi stack dot workspace

01:04:43.090 --> 01:04:44.210
<v Speaker 0>undefined.

01:04:45.170 --> 01:04:47.010
<v Speaker 0>Oh, wait. Is that workspace supposed to have

01:04:47.010 --> 01:04:48.130
<v Speaker 0>a capital s?

01:04:50.610 --> 01:04:52.370
<v Speaker 1>Probably need to declare a new workspace.

01:04:56.695 --> 01:04:58.375
<v Speaker 0>I'm not getting any out complete,

01:04:59.575 --> 01:05:01.255
<v Speaker 0>of course, because it's morning about

01:05:08.455 --> 01:05:10.220
<v Speaker 0>I mean, that's the

01:05:10.220 --> 01:05:11.980
<v Speaker 0>context isn't resolving.

01:05:13.180 --> 01:05:15.260
<v Speaker 0>There's multiple Pulumi resolves.

01:05:23.945 --> 01:05:25.705
<v Speaker 2>This is a very weird error.

01:05:27.865 --> 01:05:28.665
<v Speaker 0>Yeah. Looks

01:05:31.705 --> 01:05:33.545
<v Speaker 2>Has it has it pulled an old version

01:05:33.545 --> 01:05:35.465
<v Speaker 2>of the Pulumi SDK that doesn't have this

01:05:35.465 --> 01:05:39.225
<v Speaker 2>package in it? Let's check a

01:05:38.520 --> 01:05:39.480
<v Speaker 0>go mod.

01:05:41.240 --> 01:05:42.120
<v Speaker 0>So we're pulling

01:05:42.840 --> 01:05:44.680
<v Speaker 1>No. We're pulling two thirteen too, which is

01:05:44.680 --> 01:05:45.720
<v Speaker 1>correct. That's fine. Yeah.

01:05:53.065 --> 01:05:55.065
<v Speaker 1>I believe the issue is there's no function

01:05:55.065 --> 01:05:56.265
<v Speaker 1>called workspace.

01:05:56.665 --> 01:05:58.505
<v Speaker 1>It needs a new workspace. Right?

01:06:03.065 --> 01:06:04.665
<v Speaker 2>I don't think so. No. I'm looking at

01:06:04.665 --> 01:06:06.905
<v Speaker 2>my previous attempt at this, and it seems

01:06:06.905 --> 01:06:08.425
<v Speaker 2>to be

01:06:12.180 --> 01:06:13.300
<v Speaker 0>Well, I'm

01:06:14.019 --> 01:06:15.859
<v Speaker 0>gonna assume because the auto complete is not

01:06:15.859 --> 01:06:16.500
<v Speaker 0>working.

01:06:18.420 --> 01:06:18.900
<v Speaker 0>Something

01:06:19.220 --> 01:06:21.995
<v Speaker 0>is not right with the imports.

01:06:22.075 --> 01:06:23.595
<v Speaker 0>So what does it think a Pulumi stack

01:06:23.595 --> 01:06:24.235
<v Speaker 0>is?

01:06:27.835 --> 01:06:29.115
<v Speaker 0>It has no idea.

01:06:31.195 --> 01:06:34.850
<v Speaker 0>Invalid type. Right? So whatever this upsert stack

01:06:34.850 --> 01:06:37.250
<v Speaker 0>and lane, which it can't resolve either, and

01:06:37.250 --> 01:06:37.890
<v Speaker 0>it's

01:06:38.610 --> 01:06:41.090
<v Speaker 0>got auto going to SDK b two go

01:06:41.330 --> 01:06:43.010
<v Speaker 2>I I think this is because we removed

01:06:43.010 --> 01:06:45.410
<v Speaker 2>the fully qualified stack name, which is a

01:06:45.410 --> 01:06:46.450
<v Speaker 2>specific type,

01:06:46.850 --> 01:06:49.305
<v Speaker 2>and it just isn't taking a string. Yeah.

01:06:49.305 --> 01:06:51.305
<v Speaker 2>I think that's what it is. Okay. So

01:06:51.305 --> 01:06:52.585
<v Speaker 0>let's go try and go back to that

01:06:52.585 --> 01:06:53.945
<v Speaker 0>first and see if that gives us a

01:06:53.945 --> 01:06:56.665
<v Speaker 0>Pulumi stack. Still an invalid type, unfortunately.

01:06:57.545 --> 01:07:00.425
<v Speaker 0>And I can't get any tooltip on this

01:07:00.744 --> 01:07:02.905
<v Speaker 0>upstart stack and lane function

01:07:04.420 --> 01:07:06.820
<v Speaker 0>or on that. Yeah. So what's wrong with

01:07:06.820 --> 01:07:08.020
<v Speaker 0>the auto import?

01:07:09.780 --> 01:07:10.660
<v Speaker 0>Nothing.

01:07:13.060 --> 01:07:14.660
<v Speaker 0>Should it be Pulumi x auto?

01:07:16.525 --> 01:07:17.965
<v Speaker 2>I don't think so.

01:07:21.245 --> 01:07:23.005
<v Speaker 2>Certainly not looking at my

01:07:24.125 --> 01:07:26.845
<v Speaker 2>my working version of something similar to this.

01:07:26.845 --> 01:07:28.605
<v Speaker 2>Yeah. I am literally just copy and paste

01:07:28.605 --> 01:07:31.580
<v Speaker 2>it from so unless it's changed unless it's

01:07:31.580 --> 01:07:32.140
<v Speaker 2>changed

01:07:32.700 --> 01:07:34.540
<v Speaker 2>recently, which I doubt.

01:07:37.260 --> 01:07:39.580
<v Speaker 0>Okay. So auto knows is that.

01:07:40.460 --> 01:07:41.740
<v Speaker 0>And then it just

01:07:44.495 --> 01:07:46.655
<v Speaker 0>okay. So maybe this is just Versus code.

01:07:46.655 --> 01:07:48.335
<v Speaker 0>Right? And it's a little bit confused.

01:07:48.735 --> 01:07:51.215
<v Speaker 0>So let's assume that bringing the stack name

01:07:51.215 --> 01:07:52.895
<v Speaker 0>back and maybe fixed it, and then let's

01:07:52.895 --> 01:07:54.175
<v Speaker 0>run the compile again.

01:07:54.415 --> 01:07:56.690
<v Speaker 1>That's gonna give us a different error. Okay.

01:07:56.690 --> 01:07:58.609
<v Speaker 0>So now set program is undefined, but that's

01:07:58.609 --> 01:08:00.609
<v Speaker 0>at least progress. So Yes.

01:08:01.410 --> 01:08:03.890
<v Speaker 2>So Oh, that's because we that Pulumi stack

01:08:03.890 --> 01:08:04.690
<v Speaker 2>dot

01:08:05.329 --> 01:08:06.770
<v Speaker 2>workspace isn't

01:08:09.425 --> 01:08:11.425
<v Speaker 0>What was that supposed to be again?

01:08:11.825 --> 01:08:13.025
<v Speaker 2>It should be

01:08:14.305 --> 01:08:14.705
<v Speaker 2>set

01:08:16.864 --> 01:08:18.625
<v Speaker 2>let me look back at my previous example

01:08:18.625 --> 01:08:19.024
<v Speaker 2>here.

01:08:24.689 --> 01:08:27.090
<v Speaker 2>Should just be dot workspace. So that should

01:08:27.090 --> 01:08:29.170
<v Speaker 2>be right with a lowercase s.

01:08:29.649 --> 01:08:31.330
<v Speaker 0>Okay. So we did have an uppercase at

01:08:31.330 --> 01:08:33.250
<v Speaker 0>least. So maybe that was the problem.

01:08:34.450 --> 01:08:37.810
<v Speaker 0>Alright. And okay. So now the fully qualified

01:08:37.755 --> 01:08:39.514
<v Speaker 0>stack name one. So this is what I

01:08:39.514 --> 01:08:40.715
<v Speaker 2>think Paul was trying to get us away

01:08:40.715 --> 01:08:42.715
<v Speaker 2>from, so we should be able to remove.

01:08:43.514 --> 01:08:45.354
<v Speaker 2>So the fully qualified stack name is Tate

01:08:45.435 --> 01:08:47.915
<v Speaker 2>is expecting a so, yeah, we should be

01:08:47.915 --> 01:08:49.194
<v Speaker 2>able to put foo in there

01:08:49.835 --> 01:08:51.594
<v Speaker 2>and then remove the stack name.

01:08:52.230 --> 01:08:53.030
<v Speaker 0>Okay.

01:08:53.350 --> 01:08:54.790
<v Speaker 0>This is one

01:08:54.790 --> 01:08:55.990
<v Speaker 0>step at a time.

01:08:56.950 --> 01:08:58.870
<v Speaker 2>This is professional software development.

01:08:59.030 --> 01:09:00.069
<v Speaker 0>It's working.

01:09:00.230 --> 01:09:00.950
<v Speaker 0>Right.

01:09:02.470 --> 01:09:04.630
<v Speaker 2>Okay. So the only thing missing from our

01:09:04.630 --> 01:09:07.245
<v Speaker 2>example right now is that we have set

01:09:07.245 --> 01:09:08.765
<v Speaker 2>up a workspace and set a program, but

01:09:08.765 --> 01:09:10.364
<v Speaker 2>we don't actually have an op.

01:09:11.324 --> 01:09:12.844
<v Speaker 2>So we

01:09:13.165 --> 01:09:16.604
<v Speaker 2>probably need to actually add that because otherwise

01:09:16.604 --> 01:09:17.804
<v Speaker 2>nothing's gonna happen.

01:09:18.685 --> 01:09:20.844
<v Speaker 2>So let's do

01:09:21.760 --> 01:09:22.479
<v Speaker 2>error

01:09:23.120 --> 01:09:25.039
<v Speaker 2>equals Pulumi

01:09:25.520 --> 01:09:26.479
<v Speaker 2>stack

01:09:26.479 --> 01:09:27.359
<v Speaker 2>dot

01:09:27.359 --> 01:09:28.239
<v Speaker 2>up

01:09:30.159 --> 01:09:31.999
<v Speaker 2>c t x.

01:09:32.319 --> 01:09:34.399
<v Speaker 2>And then I can't this takes a,

01:09:36.345 --> 01:09:38.344
<v Speaker 2>so we're gonna need takes context,

01:09:38.505 --> 01:09:39.625
<v Speaker 1>and it takes,

01:09:40.505 --> 01:09:41.784
<v Speaker 1>a progress stream.

01:09:42.185 --> 01:09:43.465
<v Speaker 2>Yes. So

01:09:43.705 --> 01:09:46.345
<v Speaker 2>so we're gonna need a new import.

01:09:54.540 --> 01:09:57.980
<v Speaker 2>And then that will need to be

01:09:59.945 --> 01:10:00.744
<v Speaker 2>here.

01:10:00.985 --> 01:10:02.825
<v Speaker 2>I'm gonna just copy and paste it so

01:10:02.825 --> 01:10:04.265
<v Speaker 2>that we can save

01:10:04.265 --> 01:10:06.665
<v Speaker 2>ourselves all the time. And then we'll need

01:10:06.665 --> 01:10:07.385
<v Speaker 2>also

01:10:08.585 --> 01:10:09.625
<v Speaker 2>OS,

01:10:11.625 --> 01:10:13.145
<v Speaker 2>and that should be it. I think that

01:10:13.145 --> 01:10:13.705
<v Speaker 2>should be everything.

01:10:14.330 --> 01:10:16.170
<v Speaker 1>We just need to check the error response

01:10:16.170 --> 01:10:16.810
<v Speaker 1>here.

01:10:17.530 --> 01:10:18.409
<v Speaker 2>Oh, yeah.

01:10:24.490 --> 01:10:26.970
<v Speaker 1>And then lastly, Lee, we can actually grab

01:10:26.970 --> 01:10:28.490
<v Speaker 1>the value of the outputs

01:10:29.475 --> 01:10:30.995
<v Speaker 1>of the IP.

01:10:32.435 --> 01:10:33.155
<v Speaker 1>So

01:10:33.875 --> 01:10:35.555
<v Speaker 1>So let's call that res

01:10:35.715 --> 01:10:38.115
<v Speaker 1>or output. Yeah. Res is fine. Res is

01:10:38.115 --> 01:10:40.035
<v Speaker 1>better because it's a response.

01:10:40.115 --> 01:10:42.195
<v Speaker 1>And then we can say res dot output,

01:10:45.989 --> 01:10:47.670
<v Speaker 1>and we can grab

01:10:48.389 --> 01:10:51.190
<v Speaker 1>I think we called someone from it's we

01:10:51.190 --> 01:10:52.710
<v Speaker 1>actually have to call

01:10:52.710 --> 01:10:54.630
<v Speaker 1>into the index of outputs.

01:10:55.510 --> 01:10:56.870
<v Speaker 1>So it's an array of outputs.

01:10:59.435 --> 01:10:59.835
<v Speaker 1>We

01:11:00.475 --> 01:11:02.395
<v Speaker 1>well, you can actually call it directly out

01:11:02.395 --> 01:11:04.235
<v Speaker 1>by name, what we call the output further

01:11:04.235 --> 01:11:05.435
<v Speaker 1>down in our application.

01:11:05.915 --> 01:11:07.355
<v Speaker 1>So square brackets.

01:11:09.035 --> 01:11:09.995
<v Speaker 1>Device IP.

01:11:16.260 --> 01:11:18.260
<v Speaker 1>And then we can say dot value because

01:11:18.260 --> 01:11:19.460
<v Speaker 1>we need to grab the value out of

01:11:19.460 --> 01:11:21.460
<v Speaker 1>that. And the value comes out right now

01:11:21.460 --> 01:11:23.300
<v Speaker 1>as an interface, so we need to string

01:11:23.300 --> 01:11:24.340
<v Speaker 1>on the end.

01:11:25.460 --> 01:11:27.139
<v Speaker 1>So we need to cast it to string.

01:11:28.425 --> 01:11:29.624
<v Speaker 1>Not dot

01:11:29.625 --> 01:11:31.704
<v Speaker 1>and then end string. Yay. There

01:11:32.824 --> 01:11:35.304
<v Speaker 1>we go. No no two string. Just string.

01:11:35.304 --> 01:11:38.824
<v Speaker 1>Just lowercase string. Oh, yeah. Lowercase.

01:11:38.905 --> 01:11:40.744
<v Speaker 2>And we probably wanna print it. Right? So

01:11:40.744 --> 01:11:42.744
<v Speaker 2>let's do format a print line.

01:11:43.780 --> 01:11:44.820
<v Speaker 2>There we go.

01:11:46.660 --> 01:11:48.820
<v Speaker 0>Alright. Let's just ignore the errors from code.

01:11:48.820 --> 01:11:51.460
<v Speaker 0>I think it's definitely very confused.

01:11:51.460 --> 01:11:52.820
<v Speaker 0>No. We don't want this to cause a

01:11:52.820 --> 01:11:54.660
<v Speaker 0>duplicate device, so I'm just gonna modify the

01:11:54.660 --> 01:11:56.020
<v Speaker 0>host name here. Yeah.

01:11:58.185 --> 01:11:59.545
<v Speaker 1>And we can change that a little bit

01:11:59.545 --> 01:12:01.065
<v Speaker 1>to generate a random ID and pass it

01:12:01.065 --> 01:12:03.305
<v Speaker 1>in if we need to. I think it's

01:12:03.305 --> 01:12:04.745
<v Speaker 2>worth pointing out at this stage. Like, you

01:12:04.745 --> 01:12:06.345
<v Speaker 2>know, we're obviously just going through the process

01:12:06.345 --> 01:12:07.545
<v Speaker 2>here. But because

01:12:09.065 --> 01:12:11.145
<v Speaker 2>because we're building this into a CLI, like,

01:12:11.145 --> 01:12:13.270
<v Speaker 2>we can do things like add flags so

01:12:13.270 --> 01:12:14.790
<v Speaker 2>we can give it, like, a if we

01:12:14.790 --> 01:12:16.310
<v Speaker 2>wanted to, we could have dash dash device

01:12:16.310 --> 01:12:17.430
<v Speaker 2>name and then pass that all the way

01:12:17.430 --> 01:12:19.190
<v Speaker 2>through the stack. And, like, it gives you

01:12:19.190 --> 01:12:20.790
<v Speaker 2>that flexibility to kind of build it all

01:12:20.790 --> 01:12:23.030
<v Speaker 2>into your CLI. We're just kind of bootstrapping

01:12:23.030 --> 01:12:23.590
<v Speaker 2>it at the moment.

01:12:25.055 --> 01:12:26.815
<v Speaker 0>Alright. So we did have a

01:12:27.295 --> 01:12:27.775
<v Speaker 0>someone

01:12:29.295 --> 01:12:30.815
<v Speaker 0>watching our stream tell us they spotted a

01:12:30.815 --> 01:12:32.415
<v Speaker 0>table, which I've fixed. Thank you for that.

01:12:32.415 --> 01:12:33.935
<v Speaker 0>M van bus 40 three.

01:12:34.895 --> 01:12:36.975
<v Speaker 0>So we're gonna run this now. Right? We're

01:12:36.975 --> 01:12:38.495
<v Speaker 2>gonna try it. What's the worst that could

01:12:38.495 --> 01:12:38.815
<v Speaker 2>happen?

01:12:40.900 --> 01:12:43.699
<v Speaker 0>Imports because VSC is now confused.

01:12:43.860 --> 01:12:44.420
<v Speaker 0>Yeah.

01:12:44.820 --> 01:12:46.180
<v Speaker 0>Let's see. What do we need? Do we

01:12:46.180 --> 01:12:48.179
<v Speaker 0>need streamer opt up?

01:12:49.860 --> 01:12:51.060
<v Speaker 0>We have opt up.

01:12:56.855 --> 01:12:57.334
<v Speaker 0>Up.

01:13:00.775 --> 01:13:03.655
<v Speaker 1>We need to declare streamer rather than set

01:13:03.655 --> 01:13:06.454
<v Speaker 1>it. Oh, yeah. Call on equals.

01:13:06.614 --> 01:13:08.534
<v Speaker 1>We need the same on line four just

01:13:08.534 --> 01:13:11.390
<v Speaker 1>below it. So Pulumi stack up. So we

01:13:11.390 --> 01:13:13.150
<v Speaker 1>need to set. There we go. Yes. Because

01:13:13.150 --> 01:13:14.830
<v Speaker 2>we added it's because we added those variables.

01:13:14.830 --> 01:13:15.310
<v Speaker 2>Right?

01:13:15.790 --> 01:13:17.950
<v Speaker 0>I'll stop enabling my relative plain numbers and

01:13:17.950 --> 01:13:18.750
<v Speaker 0>confuse you.

01:13:20.430 --> 01:13:21.790
<v Speaker 1>It's fine. I have them.

01:13:24.735 --> 01:13:27.535
<v Speaker 0>Almost there. So now it's complaining about our

01:13:27.535 --> 01:13:28.975
<v Speaker 0>outputs lane.

01:13:31.455 --> 01:13:34.175
<v Speaker 0>Oh, actually progress streams is undefined.

01:13:34.655 --> 01:13:36.015
<v Speaker 0>Maybe that type wasn't a typo?

01:13:37.240 --> 01:13:39.000
<v Speaker 2>No. It definitely was a typo.

01:13:47.320 --> 01:13:49.240
<v Speaker 0>Alright. Well, let's fix the lane forty five

01:13:49.240 --> 01:13:51.000
<v Speaker 0>first, and then we'll see. So

01:13:52.145 --> 01:13:53.985
<v Speaker 0>it doesn't like this.

01:13:56.225 --> 01:13:57.585
<v Speaker 2>Well, I think we can probably just comment

01:13:57.585 --> 01:13:58.945
<v Speaker 2>that out for the time being and actually

01:13:58.945 --> 01:14:00.705
<v Speaker 2>get the thing launched and then figure out

01:14:00.705 --> 01:14:03.425
<v Speaker 2>how to export the the values from there.

01:14:03.425 --> 01:14:05.585
<v Speaker 0>Alright. There we go. We need streamer, though.

01:14:05.585 --> 01:14:07.340
<v Speaker 0>Right? Yeah. Okay.

01:14:10.139 --> 01:14:12.539
<v Speaker 0>Undefined opt up progress streams.

01:14:15.739 --> 01:14:17.260
<v Speaker 0>Let's just pull up the docs.

01:14:19.925 --> 01:14:21.685
<v Speaker 2>Did it pull the import? It's did it

01:14:21.685 --> 01:14:23.605
<v Speaker 2>pull It's definitely there. You might need to

01:14:23.605 --> 01:14:25.845
<v Speaker 1>re pull the import because you haven't run

01:14:25.845 --> 01:14:27.525
<v Speaker 1>GoMod since.

01:14:28.405 --> 01:14:28.885
<v Speaker 0>Is that the

01:14:33.420 --> 01:14:35.340
<v Speaker 0>Let's just add it to go mod manually

01:14:35.340 --> 01:14:36.059
<v Speaker 0>then.

01:14:36.860 --> 01:14:38.780
<v Speaker 0>I don't how did it get here? I

01:14:38.780 --> 01:14:40.460
<v Speaker 2>copied it in there. Oh,

01:14:43.340 --> 01:14:45.655
<v Speaker 1>it's it's included in the package, in the

01:14:45.655 --> 01:14:47.655
<v Speaker 1>SDK v two package. It's just that it

01:14:47.655 --> 01:14:49.334
<v Speaker 1>it wasn't actually grabbing it.

01:14:53.895 --> 01:14:55.094
<v Speaker 1>So we should be better now.

01:14:59.010 --> 01:14:59.730
<v Speaker 2>Nope.

01:15:02.530 --> 01:15:04.530
<v Speaker 2>We're so close. We've got fifteen minutes. We

01:15:04.530 --> 01:15:06.530
<v Speaker 2>can get this first thing created. I believe

01:15:06.530 --> 01:15:06.930
<v Speaker 2>in us.

01:15:10.395 --> 01:15:13.195
<v Speaker 0>So undefined auto progress streams.

01:15:19.514 --> 01:15:21.355
<v Speaker 0>And so it knows that package is there.

01:15:21.355 --> 01:15:23.514
<v Speaker 0>S t k v two x auto opt

01:15:23.514 --> 01:15:23.835
<v Speaker 0>up.

01:15:24.670 --> 01:15:26.349
<v Speaker 0>And then it just falls over.

01:15:31.710 --> 01:15:34.030
<v Speaker 1>It's a % there. I'm actually looking at

01:15:34.030 --> 01:15:34.909
<v Speaker 1>the package right now.

01:15:37.655 --> 01:15:38.935
<v Speaker 2>Can we just do a

01:15:39.575 --> 01:15:40.295
<v Speaker 2>yeah.

01:15:43.975 --> 01:15:45.575
<v Speaker 1>Is there a typo maybe?

01:15:47.335 --> 01:15:48.055
<v Speaker 0>Ah,

01:15:48.775 --> 01:15:51.415
<v Speaker 0>we're missing an r. So even though we

01:15:51.415 --> 01:15:51.895
<v Speaker 0>got corrected

01:15:52.620 --> 01:15:54.699
<v Speaker 2>We got corrected, and we didn't actually correct

01:15:54.699 --> 01:15:56.059
<v Speaker 2>it properly. Awesome.

01:15:58.060 --> 01:15:59.900
<v Speaker 2>Modern software development, guys.

01:16:01.100 --> 01:16:02.460
<v Speaker 1>That's

01:16:02.460 --> 01:16:04.620
<v Speaker 1>fine. Yeah. It's because we're yep. Res is

01:16:04.620 --> 01:16:06.860
<v Speaker 1>used. That's fine. Just make it under there

01:16:06.860 --> 01:16:07.340
<v Speaker 1>we go.

01:16:08.105 --> 01:16:10.025
<v Speaker 1>Now we might get one more error here.

01:16:10.025 --> 01:16:11.465
<v Speaker 0>Alright. Okay. So

01:16:12.265 --> 01:16:13.945
<v Speaker 0>yeah. I'll just underscore. Let's go back to

01:16:13.945 --> 01:16:14.985
<v Speaker 0>the input in a minute.

01:16:15.625 --> 01:16:16.824
<v Speaker 0>Let's get it working.

01:16:17.225 --> 01:16:18.505
<v Speaker 2>Oh, so you'll need to

01:16:18.905 --> 01:16:20.985
<v Speaker 2>that's you'll need to change that because it's

01:16:20.985 --> 01:16:22.025
<v Speaker 2>no new variable. Yeah.

01:16:22.699 --> 01:16:25.500
<v Speaker 0>So annoying. For real. Value isn't a func.

01:16:25.500 --> 01:16:27.340
<v Speaker 1>That's why on the output,

01:16:27.659 --> 01:16:30.219
<v Speaker 1>it's just a value dot value dot.

01:16:31.659 --> 01:16:33.979
<v Speaker 1>So it shouldn't actually be a function here.

01:16:35.340 --> 01:16:35.980
<v Speaker 1>That's it.

01:16:36.785 --> 01:16:38.065
<v Speaker 1>That looks better.

01:16:40.065 --> 01:16:40.945
<v Speaker 2>There we go.

01:16:42.625 --> 01:16:43.665
<v Speaker 2>Alright.

01:16:44.545 --> 01:16:46.545
<v Speaker 1>So we need to pass in create on

01:16:46.545 --> 01:16:47.425
<v Speaker 1>device

01:16:47.665 --> 01:16:48.545
<v Speaker 1>as

01:16:48.945 --> 01:16:49.185
<v Speaker 1>yep.

01:16:50.670 --> 01:16:52.830
<v Speaker 1>And now we should actually have an application

01:16:52.830 --> 01:16:54.190
<v Speaker 1>starting to spin up.

01:16:55.470 --> 01:16:56.350
<v Speaker 0>Okay.

01:16:56.990 --> 01:17:00.430
<v Speaker 0>This is the because that's password protected. No.

01:17:01.710 --> 01:17:03.790
<v Speaker 2>Yeah. It's because we we'll have to actually

01:17:03.870 --> 01:17:04.110
<v Speaker 2>like,

01:17:04.765 --> 01:17:07.005
<v Speaker 2>with we don't get the interactivity that you

01:17:07.005 --> 01:17:07.804
<v Speaker 2>usually get

01:17:08.845 --> 01:17:09.724
<v Speaker 2>with

01:17:10.525 --> 01:17:11.485
<v Speaker 2>yeah. With

01:17:14.685 --> 01:17:16.525
<v Speaker 1>Now we can actually see David's password.

01:17:17.420 --> 01:17:19.099
<v Speaker 0>Alright. It sees a new password. I don't

01:17:19.099 --> 01:17:20.619
<v Speaker 0>need the password from the last code, though.

01:17:20.619 --> 01:17:21.099
<v Speaker 0>Right?

01:17:23.340 --> 01:17:25.099
<v Speaker 0>Oh, now I'm gonna have to expose the

01:17:25.099 --> 01:17:26.619
<v Speaker 0>auth token. Right?

01:17:27.020 --> 01:17:27.820
<v Speaker 2>No.

01:17:30.540 --> 01:17:32.380
<v Speaker 0>Because right now, there's no API key in

01:17:32.380 --> 01:17:32.940
<v Speaker 0>my environment.

01:17:34.915 --> 01:17:37.315
<v Speaker 2>Yes. You probably will. Yes. Alright. Hold on.

01:17:37.315 --> 01:17:39.394
<v Speaker 0>Let me move this over here, sneaky.

01:17:40.035 --> 01:17:41.474
<v Speaker 1>So you can't see it.

01:17:44.915 --> 01:17:47.555
<v Speaker 0>And then I'll expose this on my environment.

01:17:48.300 --> 01:17:49.019
<v Speaker 0>Export

01:17:49.579 --> 01:17:50.379
<v Speaker 0>packet.

01:17:51.179 --> 01:17:52.699
<v Speaker 0>I can't remember if it's API gear also,

01:17:52.699 --> 01:17:54.300
<v Speaker 0>but I'm gonna do both. So

01:17:58.780 --> 01:18:00.860
<v Speaker 2>There is a set config function in there

01:18:00.860 --> 01:18:02.059
<v Speaker 2>as well. Like, we could set it in

01:18:02.059 --> 01:18:02.860
<v Speaker 2>the actual code.

01:18:04.355 --> 01:18:05.074
<v Speaker 2>But

01:18:05.395 --> 01:18:06.515
<v Speaker 0>Magically

01:18:06.515 --> 01:18:07.715
<v Speaker 0>pull this back.

01:18:09.475 --> 01:18:12.435
<v Speaker 1>Command k. Command k. Command k. I know.

01:18:12.435 --> 01:18:14.675
<v Speaker 0>I I always run PSE UX before it,

01:18:14.675 --> 01:18:16.755
<v Speaker 0>so there's loads of back buffer. That's okay.

01:18:16.755 --> 01:18:18.354
<v Speaker 2>It's not a bad idea, actually.

01:18:18.995 --> 01:18:19.955
<v Speaker 2>Livestream things.

01:18:21.030 --> 01:18:23.110
<v Speaker 0>Alright. So Pulumi

01:18:23.429 --> 01:18:25.989
<v Speaker 0>config pass throughs to create a vase. Hopefully,

01:18:25.989 --> 01:18:27.349
<v Speaker 0>it picks up my token.

01:18:27.510 --> 01:18:29.270
<v Speaker 1>There's still one more error that I think

01:18:29.270 --> 01:18:31.590
<v Speaker 1>we have to resolve here. We'll send to

01:18:31.590 --> 01:18:32.630
<v Speaker 1>you. Okay.

01:18:38.975 --> 01:18:40.895
<v Speaker 0>And error is

01:18:42.815 --> 01:18:46.015
<v Speaker 2>An unhandled error occurred. That doesn't sound good,

01:18:46.015 --> 01:18:46.255
<v Speaker 2>does it?

01:18:51.950 --> 01:18:54.110
<v Speaker 0>It feels like we're close, though. Oh, we

01:18:54.110 --> 01:18:55.870
<v Speaker 2>we have. I feel like we're close too.

01:18:55.870 --> 01:18:56.429
<v Speaker 2>Yeah.

01:18:58.750 --> 01:19:00.910
<v Speaker 0>Alright. So it just seems to be unhappy

01:19:00.910 --> 01:19:02.190
<v Speaker 0>with our online source.

01:19:04.725 --> 01:19:06.645
<v Speaker 0>Now we did There's function here.

01:19:07.525 --> 01:19:09.525
<v Speaker 0>Yeah. To this anonymous

01:19:09.525 --> 01:19:10.565
<v Speaker 0>function.

01:19:14.565 --> 01:19:16.485
<v Speaker 0>And it does require a project ID, which

01:19:16.485 --> 01:19:17.925
<v Speaker 0>doesn't exist right now. Should we hard code

01:19:17.925 --> 01:19:19.910
<v Speaker 0>this? Just hard code it. Yeah.

01:19:20.630 --> 01:19:22.790
<v Speaker 0>Because we don't have a config.

01:19:22.790 --> 01:19:24.550
<v Speaker 0>So And, again, you can do this within

01:19:24.550 --> 01:19:25.350
<v Speaker 2>the actual

01:19:27.430 --> 01:19:29.430
<v Speaker 1>The API itself? Yeah. You can do it

01:19:29.430 --> 01:19:31.670
<v Speaker 2>with Lizard. Lizard is a we probably won't

01:19:31.670 --> 01:19:33.030
<v Speaker 2>get time to do it, unfortunately. But there

01:19:33.030 --> 01:19:33.590
<v Speaker 2>is a

01:19:34.425 --> 01:19:35.705
<v Speaker 2>and then you probably just don't need the

01:19:35.705 --> 01:19:37.385
<v Speaker 2>config dot new at all at that point.

01:19:37.865 --> 01:19:39.545
<v Speaker 0>That still have to be a Pulumi string,

01:19:39.625 --> 01:19:40.585
<v Speaker 0>Yeah. Yep.

01:19:41.705 --> 01:19:43.305
<v Speaker 1>Well, you've actually set it as a Pulumi

01:19:43.305 --> 01:19:44.585
<v Speaker 1>string. Yeah. It doesn't need to be just

01:19:44.585 --> 01:19:45.145
<v Speaker 2>a standard string.

01:19:46.490 --> 01:19:48.250
<v Speaker 0>You can move config.

01:19:48.490 --> 01:19:50.170
<v Speaker 0>Not used anywhere else.

01:19:53.130 --> 01:19:54.650
<v Speaker 0>Alright. Let's see what happens.

01:19:58.485 --> 01:20:00.005
<v Speaker 1>I think the other error could be we're

01:20:00.005 --> 01:20:01.844
<v Speaker 1>still not using our Pulumi. Context.

01:20:03.844 --> 01:20:05.445
<v Speaker 2>Nope. There it is. There we go. There

01:20:05.445 --> 01:20:07.605
<v Speaker 1>we go. We have an API up and

01:20:07.605 --> 01:20:09.764
<v Speaker 1>running. And and now I see my debug

01:20:09.764 --> 01:20:11.844
<v Speaker 0>messages that I've never seen before. Yeah.

01:20:13.620 --> 01:20:16.100
<v Speaker 2>So this should be creating if we check

01:20:16.100 --> 01:20:17.539
<v Speaker 2>the the web,

01:20:17.620 --> 01:20:20.260
<v Speaker 2>it should be creating a new instance.

01:20:23.060 --> 01:20:23.860
<v Speaker 0>There we go.

01:20:24.945 --> 01:20:26.544
<v Speaker 2>I think well, I think that's

01:20:27.585 --> 01:20:29.425
<v Speaker 1>a success. That's quite why we're ahead.

01:20:31.425 --> 01:20:32.544
<v Speaker 0>So can we

01:20:32.945 --> 01:20:35.025
<v Speaker 0>take a few minutes to just go over

01:20:35.025 --> 01:20:37.985
<v Speaker 0>this code, what it's doing, and then

01:20:38.320 --> 01:20:40.160
<v Speaker 0>talk about what we no. Because I I

01:20:40.160 --> 01:20:42.560
<v Speaker 0>think I really do wanna explore this future

01:20:43.120 --> 01:20:44.960
<v Speaker 0>with my own code and my own tools

01:20:44.960 --> 01:20:46.400
<v Speaker 0>and stuff like that for Equinix. So if

01:20:46.400 --> 01:20:47.760
<v Speaker 0>we can just kinda cover what this is

01:20:47.760 --> 01:20:50.000
<v Speaker 0>and what the potential next steps are without

01:20:50.000 --> 01:20:51.520
<v Speaker 0>actually going into it, then that would be

01:20:51.520 --> 01:20:51.920
<v Speaker 0>really useful.

01:20:53.465 --> 01:20:54.425
<v Speaker 2>Yeah. So,

01:20:55.545 --> 01:20:57.785
<v Speaker 2>like, when I've done this before, we we've

01:20:57.785 --> 01:21:00.025
<v Speaker 2>taken a bunch of shortcuts here, essentially.

01:21:00.745 --> 01:21:02.585
<v Speaker 2>But, like, the the key thing really is

01:21:02.585 --> 01:21:05.545
<v Speaker 2>this auto to up upsert stack inline source.

01:21:05.545 --> 01:21:07.065
<v Speaker 2>And we've hard coded a bunch of values

01:21:07.065 --> 01:21:08.665
<v Speaker 2>here, like the project

01:21:09.600 --> 01:21:11.680
<v Speaker 2>and the stack name and all that kind

01:21:11.680 --> 01:21:12.320
<v Speaker 2>of stuff.

01:21:13.280 --> 01:21:15.360
<v Speaker 2>But you can make this all configurable via,

01:21:15.360 --> 01:21:16.080
<v Speaker 2>like,

01:21:16.240 --> 01:21:19.040
<v Speaker 2>standard COBRA flags and and arguments,

01:21:19.680 --> 01:21:22.000
<v Speaker 2>which allows you to kind of make repeatable

01:21:22.000 --> 01:21:22.720
<v Speaker 2>deployments.

01:21:23.575 --> 01:21:25.735
<v Speaker 2>So a pattern that I think is really

01:21:25.735 --> 01:21:26.855
<v Speaker 2>useful is

01:21:27.415 --> 01:21:28.295
<v Speaker 2>I always

01:21:28.535 --> 01:21:31.255
<v Speaker 2>use the same project name. So let's say

01:21:31.255 --> 01:21:33.094
<v Speaker 2>we call this metal CTL

01:21:34.215 --> 01:21:36.535
<v Speaker 2>as we have. Like Rawkode live, we could

01:21:36.535 --> 01:21:38.650
<v Speaker 2>change that to metal CTL and then have

01:21:38.650 --> 01:21:42.409
<v Speaker 2>multiple deployable instances within that same project. And

01:21:42.409 --> 01:21:43.209
<v Speaker 2>then, like,

01:21:44.170 --> 01:21:47.129
<v Speaker 2>magically generate a stack name for each one

01:21:47.130 --> 01:21:48.889
<v Speaker 2>that allows you to then do things like

01:21:48.889 --> 01:21:51.210
<v Speaker 2>you can list the existing stacks. You can

01:21:51.475 --> 01:21:53.474
<v Speaker 2>destroy the existing stacks.

01:21:54.355 --> 01:21:56.195
<v Speaker 2>It it allows you to create this really

01:21:56.195 --> 01:21:57.554
<v Speaker 2>repeatable pattern.

01:21:58.594 --> 01:22:00.594
<v Speaker 2>But essentially, that auto auto

01:22:00.835 --> 01:22:03.955
<v Speaker 2>dot upsert stack inline source allows you to

01:22:03.955 --> 01:22:05.955
<v Speaker 2>pass any Pulumi program to it.

01:22:06.930 --> 01:22:08.850
<v Speaker 2>And there's other mechanisms as well that you

01:22:08.850 --> 01:22:11.170
<v Speaker 2>can do auto dot I can't remember exactly

01:22:11.170 --> 01:22:13.010
<v Speaker 2>what it is, but you can grab you

01:22:13.010 --> 01:22:15.010
<v Speaker 2>can have your stack in a separate Git

01:22:15.010 --> 01:22:15.730
<v Speaker 2>repo

01:22:16.370 --> 01:22:17.330
<v Speaker 2>and have them be,

01:22:19.045 --> 01:22:20.405
<v Speaker 2>you know, versioned,

01:22:20.405 --> 01:22:22.005
<v Speaker 2>you know, separately

01:22:22.245 --> 01:22:24.165
<v Speaker 2>is is another pattern that that I think

01:22:24.165 --> 01:22:25.284
<v Speaker 2>we've seen used.

01:22:26.165 --> 01:22:27.764
<v Speaker 0>But essentially a questionnaire?

01:22:28.085 --> 01:22:29.205
<v Speaker 2>Sure. Go ahead. Alright.

01:22:29.765 --> 01:22:31.285
<v Speaker 0>So I just wanna make sure I understood

01:22:31.285 --> 01:22:33.765
<v Speaker 0>that right because that sounded like a pretty

01:22:32.820 --> 01:22:36.099
<v Speaker 0>awesome superpower. So we're using auto up search

01:22:36.099 --> 01:22:37.539
<v Speaker 0>stack online source,

01:22:38.739 --> 01:22:39.380
<v Speaker 0>but

01:22:40.020 --> 01:22:40.340
<v Speaker 0>I

01:22:40.900 --> 01:22:42.739
<v Speaker 0>the get thing I thought was really interesting.

01:22:42.739 --> 01:22:44.260
<v Speaker 0>So what well, how does that work? How

01:22:44.260 --> 01:22:46.065
<v Speaker 0>would what would that mean? So there's two

01:22:46.145 --> 01:22:47.985
<v Speaker 1>there's other there's other variants here. Right? So

01:22:47.985 --> 01:22:48.785
<v Speaker 1>you can have

01:22:49.265 --> 01:22:52.145
<v Speaker 1>remote source, local source, or inline source. So

01:22:52.145 --> 01:22:54.385
<v Speaker 1>it depends on where your Pulumi application that

01:22:54.385 --> 01:22:56.145
<v Speaker 1>you wanna execute is actually stored. So if

01:22:56.145 --> 01:22:58.785
<v Speaker 1>you think of creating your wrappers, storing them

01:22:58.785 --> 01:23:01.060
<v Speaker 1>in your GitHub org, then you can actually

01:23:01.060 --> 01:23:04.340
<v Speaker 1>reference the wrappers from within that upsert stack

01:23:04.340 --> 01:23:05.139
<v Speaker 1>command.

01:23:05.219 --> 01:23:07.699
<v Speaker 1>So rather than upsert stack in lands inline

01:23:07.699 --> 01:23:09.300
<v Speaker 1>source, there'll be another function where you can

01:23:09.300 --> 01:23:12.340
<v Speaker 1>actually pass in the the Git remote. Does

01:23:12.340 --> 01:23:15.365
<v Speaker 0>that mean I can pass Multiple Git repositories

01:23:15.365 --> 01:23:18.885
<v Speaker 0>all with templates of environments like RKE clusters,

01:23:18.885 --> 01:23:22.485
<v Speaker 0>Kubernetes clusters, SaltStack clusters, and I can just

01:23:22.485 --> 01:23:23.125
<v Speaker 0>tell

01:23:23.365 --> 01:23:25.045
<v Speaker 0>use some sort of COBRA flag and say

01:23:25.045 --> 01:23:28.180
<v Speaker 0>here, use this as a Exactly it. Exactly

01:23:28.180 --> 01:23:30.420
<v Speaker 1>it. Very, very clear. So it's like a

01:23:30.500 --> 01:23:32.020
<v Speaker 1>think of it as like a a central

01:23:32.020 --> 01:23:32.900
<v Speaker 1>orchestrator

01:23:32.900 --> 01:23:33.699
<v Speaker 1>across

01:23:34.020 --> 01:23:37.380
<v Speaker 1>many sort of parts of their your infrastructure

01:23:37.380 --> 01:23:38.739
<v Speaker 1>that you have to bring together,

01:23:39.220 --> 01:23:42.020
<v Speaker 1>specifically point into different resources

01:23:42.695 --> 01:23:44.294
<v Speaker 1>held either in GitHub,

01:23:44.295 --> 01:23:47.175
<v Speaker 1>locally, or as an embedded exactly in what

01:23:47.175 --> 01:23:48.135
<v Speaker 1>we've done today.

01:23:48.855 --> 01:23:49.734
<v Speaker 1>Sweet.

01:23:50.215 --> 01:23:52.054
<v Speaker 2>And it's it's also worth pointing out as

01:23:52.054 --> 01:23:52.695
<v Speaker 2>well, like,

01:23:53.175 --> 01:23:55.254
<v Speaker 2>we've kept all of the

01:23:55.574 --> 01:23:57.949
<v Speaker 2>we've used the Pulumi Go SDK and the

01:23:57.949 --> 01:24:00.430
<v Speaker 2>Cobra CLI because it makes sense to have

01:24:00.430 --> 01:24:02.510
<v Speaker 2>Go and Go. But the if you use

01:24:02.510 --> 01:24:03.789
<v Speaker 2>a remote stack

01:24:04.350 --> 01:24:06.350
<v Speaker 2>reference, you can write your Pulumi stacks in

01:24:06.350 --> 01:24:07.230
<v Speaker 2>whatever you want.

01:24:08.350 --> 01:24:10.455
<v Speaker 2>So, you know, if if you if you

01:24:10.455 --> 01:24:11.335
<v Speaker 2>want to

01:24:11.575 --> 01:24:14.455
<v Speaker 2>provide a super easy to distribute binary,

01:24:15.495 --> 01:24:17.255
<v Speaker 2>Go might be a good choice for creating

01:24:17.255 --> 01:24:18.215
<v Speaker 2>ECLI.

01:24:18.215 --> 01:24:20.295
<v Speaker 2>But then you can write the actual Pulumi

01:24:20.295 --> 01:24:21.975
<v Speaker 2>stacks in whatever language you feel comfortable with.

01:24:21.975 --> 01:24:23.655
<v Speaker 2>If you've written a bunch of TypeScript, put

01:24:23.655 --> 01:24:25.735
<v Speaker 2>them in a remote Git repo, run

01:24:26.160 --> 01:24:28.239
<v Speaker 2>metal CTL up, and, you know, you're pretty

01:24:28.239 --> 01:24:29.119
<v Speaker 2>much good to go.

01:24:30.000 --> 01:24:31.199
<v Speaker 2>So there's a lot of lot of stuff

01:24:31.199 --> 01:24:32.640
<v Speaker 2>there. Some of the stuff that we didn't

01:24:32.640 --> 01:24:34.159
<v Speaker 2>cover, for example,

01:24:34.960 --> 01:24:36.320
<v Speaker 2>in this workspace

01:24:36.719 --> 01:24:38.320
<v Speaker 2>thing. So if you go to on line

01:24:38.320 --> 01:24:38.800
<v Speaker 2>32,

01:24:39.195 --> 01:24:41.755
<v Speaker 2>we've got work state space equals Pulumi stack

01:24:41.755 --> 01:24:42.554
<v Speaker 2>dot workspace.

01:24:42.795 --> 01:24:44.795
<v Speaker 2>You can also automate the installation of plug

01:24:44.795 --> 01:24:46.395
<v Speaker 2>ins as well in the in the user's

01:24:46.395 --> 01:24:48.875
<v Speaker 2>environment. So, you know, David, I know you

01:24:48.875 --> 01:24:50.875
<v Speaker 2>have the plug ins installed already. But if

01:24:50.875 --> 01:24:52.875
<v Speaker 2>you would say distributing this to a

01:24:53.570 --> 01:24:55.810
<v Speaker 2>developer on your team or something like that,

01:24:55.810 --> 01:24:57.890
<v Speaker 2>you can actually automate for the local environment

01:24:57.890 --> 01:24:59.730
<v Speaker 2>the installation of the plugins they need as

01:24:59.730 --> 01:25:00.530
<v Speaker 2>well. So

01:25:00.930 --> 01:25:02.610
<v Speaker 2>that's all part of the the kind of

01:25:02.610 --> 01:25:04.290
<v Speaker 2>API that we provide,

01:25:04.770 --> 01:25:06.450
<v Speaker 2>which again, it it, you know, it gives

01:25:06.450 --> 01:25:07.330
<v Speaker 2>them the

01:25:07.890 --> 01:25:10.425
<v Speaker 2>that kind of, like, self-service

01:25:10.585 --> 01:25:11.624
<v Speaker 2>capability

01:25:12.264 --> 01:25:14.665
<v Speaker 2>to just, hey. I'd install this thing, and

01:25:14.665 --> 01:25:16.505
<v Speaker 2>you can install best practice

01:25:17.465 --> 01:25:18.824
<v Speaker 2>stuff really, really easily.

01:25:20.185 --> 01:25:22.025
<v Speaker 0>K. That's awesome.

01:25:22.025 --> 01:25:22.585
<v Speaker 0>So

01:25:22.980 --> 01:25:24.900
<v Speaker 0>let's talk about the state then that's going

01:25:24.900 --> 01:25:25.619
<v Speaker 0>on here.

01:25:25.940 --> 01:25:27.620
<v Speaker 0>Can this connect to all the same state

01:25:27.620 --> 01:25:30.420
<v Speaker 0>back ends that my regular Pulumi commands would

01:25:30.420 --> 01:25:31.219
<v Speaker 0>be using?

01:25:32.900 --> 01:25:34.980
<v Speaker 2>Yeah. So it it basically

01:25:35.380 --> 01:25:38.065
<v Speaker 2>follows the Pulumi login that you have at

01:25:38.065 --> 01:25:38.705
<v Speaker 2>the moment.

01:25:39.505 --> 01:25:41.265
<v Speaker 2>So the only way that we have to

01:25:41.265 --> 01:25:42.465
<v Speaker 2>interact with

01:25:42.945 --> 01:25:43.745
<v Speaker 2>Pulumi

01:25:43.745 --> 01:25:45.825
<v Speaker 2>is the Pulumi CLI needs to be installed

01:25:45.825 --> 01:25:46.705
<v Speaker 2>on your machine.

01:25:47.185 --> 01:25:48.945
<v Speaker 2>So, like, a good practice that I've recommended

01:25:48.945 --> 01:25:52.060
<v Speaker 2>is, let's say, I'm creating my metal CTL

01:25:52.060 --> 01:25:52.780
<v Speaker 2>command.

01:25:52.940 --> 01:25:54.540
<v Speaker 2>I would also want to

01:25:55.580 --> 01:25:57.260
<v Speaker 2>have, like, a homebrew tap, and I wanna

01:25:57.260 --> 01:25:59.660
<v Speaker 2>have a dependency on the Pulumi homebrew installation

01:25:59.660 --> 01:26:01.580
<v Speaker 2>as well. And then you have to do

01:26:01.580 --> 01:26:03.100
<v Speaker 2>a Pulumi login to get all your stack

01:26:03.100 --> 01:26:04.700
<v Speaker 2>stuff. So you did a Pulumi login local

01:26:04.700 --> 01:26:05.100
<v Speaker 2>earlier.

01:26:05.665 --> 01:26:07.025
<v Speaker 2>Anybody who wants to use your command will

01:26:07.025 --> 01:26:08.785
<v Speaker 2>have to do a Pulumi login to whichever

01:26:08.785 --> 01:26:10.065
<v Speaker 2>back end that you're using, like the s

01:26:10.065 --> 01:26:11.825
<v Speaker 2>three back end. And then after that, it's

01:26:11.825 --> 01:26:13.905
<v Speaker 2>pretty much, you know, open season.

01:26:14.625 --> 01:26:15.425
<v Speaker 0>I mean,

01:26:16.305 --> 01:26:17.745
<v Speaker 0>yeah, I I'm not gonna

01:26:18.170 --> 01:26:20.090
<v Speaker 0>I'm not gonna say you're wrong. Right? Everything

01:26:20.090 --> 01:26:22.170
<v Speaker 0>you said there is is right, but I've

01:26:22.170 --> 01:26:23.530
<v Speaker 0>got an idea in my head since that

01:26:23.530 --> 01:26:25.690
<v Speaker 0>this is just a corporate application. Right? There's

01:26:25.690 --> 01:26:27.290
<v Speaker 0>no reason I couldn't have another sub command

01:26:27.290 --> 01:26:29.530
<v Speaker 0>that could automate the stack log in and

01:26:29.530 --> 01:26:32.090
<v Speaker 0>the downloading of the gold binary before I

01:26:32.090 --> 01:26:34.865
<v Speaker 0>ever touched those Pulumi SDK component. It's like,

01:26:34.865 --> 01:26:37.025
<v Speaker 0>it's really do whatever I want to certainly

01:26:37.025 --> 01:26:38.145
<v Speaker 2>do. I mean, you could have a metal

01:26:38.145 --> 01:26:40.785
<v Speaker 2>CTL in it that basically like, again, like,

01:26:40.785 --> 01:26:42.065
<v Speaker 2>one of the great things I I I

01:26:42.065 --> 01:26:44.065
<v Speaker 2>mentioned it earlier, like, the the idea around,

01:26:44.065 --> 01:26:45.105
<v Speaker 2>like, platforms.

01:26:45.265 --> 01:26:47.025
<v Speaker 2>And ultimately, what we're really trying to build

01:26:47.025 --> 01:26:47.505
<v Speaker 2>here is,

01:26:48.920 --> 01:26:50.679
<v Speaker 2>you know, user friendly

01:26:51.000 --> 01:26:51.880
<v Speaker 2>applications.

01:26:51.880 --> 01:26:54.360
<v Speaker 2>Right? And for those three, like a CLI

01:26:54.360 --> 01:26:55.559
<v Speaker 2>is super user friendly.

01:26:56.040 --> 01:26:57.719
<v Speaker 2>But you you can follow whatever your business

01:26:57.719 --> 01:26:59.400
<v Speaker 2>logic needs. So you could do a Pulumi

01:26:59.480 --> 01:27:01.159
<v Speaker 2>sorry, a metal CTL in it

01:27:01.745 --> 01:27:04.225
<v Speaker 2>that sets your environment up, does your login,

01:27:04.225 --> 01:27:05.344
<v Speaker 2>all that kind of stuff,

01:27:05.745 --> 01:27:07.345
<v Speaker 2>and then you can use it, you know,

01:27:07.345 --> 01:27:09.745
<v Speaker 2>pretty straightforward. Like, it's it's all just you

01:27:09.745 --> 01:27:11.185
<v Speaker 2>know, I know this is this term is

01:27:11.185 --> 01:27:12.385
<v Speaker 2>thrown around a lot, but it's all just

01:27:12.385 --> 01:27:13.665
<v Speaker 2>code at the end of the day. Right?

01:27:13.665 --> 01:27:15.100
<v Speaker 2>Like, you you know, if you can write

01:27:15.100 --> 01:27:16.220
<v Speaker 2>it, you can do it. And I think

01:27:16.220 --> 01:27:18.620
<v Speaker 2>with a lot of the other kinda infrastructure

01:27:18.620 --> 01:27:20.460
<v Speaker 2>as code tools that are available, these kind

01:27:20.460 --> 01:27:22.220
<v Speaker 2>of work workflows

01:27:22.460 --> 01:27:24.700
<v Speaker 2>are either wrapped in thousands of lines of

01:27:24.700 --> 01:27:26.300
<v Speaker 2>bash or,

01:27:26.940 --> 01:27:29.100
<v Speaker 2>you know, they're they're they're not as as

01:27:29.100 --> 01:27:30.220
<v Speaker 2>user friendly, basically.

01:27:30.835 --> 01:27:32.514
<v Speaker 0>Oh, yeah. Like, we we actually have one

01:27:32.514 --> 01:27:34.514
<v Speaker 1>of our engineers at our current hack day.

01:27:34.514 --> 01:27:36.914
<v Speaker 1>He wrapped this up in an electron app

01:27:36.915 --> 01:27:39.554
<v Speaker 1>and actually had a very simple UI that

01:27:39.554 --> 01:27:41.795
<v Speaker 1>someone was able to launch and spin up

01:27:41.795 --> 01:27:42.594
<v Speaker 1>infrastructure.

01:27:42.915 --> 01:27:44.514
<v Speaker 1>And all it's doing in the background is

01:27:44.514 --> 01:27:47.290
<v Speaker 1>just making the API requests in exactly the

01:27:47.290 --> 01:27:48.410
<v Speaker 1>same way as we've done it from the

01:27:48.410 --> 01:27:49.130
<v Speaker 1>CLI.

01:27:50.170 --> 01:27:52.570
<v Speaker 0>Okay. That's pretty sweet as well. There's just

01:27:52.570 --> 01:27:53.210
<v Speaker 0>so much

01:27:54.330 --> 01:27:55.770
<v Speaker 0>what is it we call this? The automation

01:27:55.770 --> 01:27:57.530
<v Speaker 0>API? The Yeah. Yeah.

01:27:57.770 --> 01:27:59.449
<v Speaker 0>I mean, I can already think of a

01:27:59.449 --> 01:28:01.375
<v Speaker 0>billion things I wanna do with this API

01:28:01.375 --> 01:28:03.375
<v Speaker 0>and the workflows I could provide to to

01:28:03.375 --> 01:28:05.375
<v Speaker 0>not just end users, but at my own

01:28:05.375 --> 01:28:07.215
<v Speaker 0>team. Like, the amount of Yeah. Things we

01:28:07.215 --> 01:28:09.695
<v Speaker 0>could automate that were just painful otherwise. We're

01:28:09.695 --> 01:28:12.574
<v Speaker 1>very excited about this automation API. Like, I

01:28:12.575 --> 01:28:14.335
<v Speaker 1>think when it was launched, it was the

01:28:14.335 --> 01:28:17.110
<v Speaker 1>the the blog post was something called, like,

01:28:17.110 --> 01:28:19.110
<v Speaker 1>the the next quantum leap

01:28:19.350 --> 01:28:20.630
<v Speaker 1>in infrastructure

01:28:21.670 --> 01:28:23.510
<v Speaker 1>as code. And and, like, it it really

01:28:23.510 --> 01:28:25.510
<v Speaker 1>can be. You know, if you have this

01:28:25.510 --> 01:28:28.070
<v Speaker 1>real ability that you can launch anything from

01:28:28.070 --> 01:28:31.145
<v Speaker 1>anywhere, I using any type of of system

01:28:31.145 --> 01:28:34.265
<v Speaker 1>that that fulfills your environment and and and

01:28:34.265 --> 01:28:36.265
<v Speaker 1>how your users want to use it internally,

01:28:36.345 --> 01:28:38.345
<v Speaker 1>then that's really pretty cool. You know, you

01:28:38.345 --> 01:28:41.625
<v Speaker 1>can allow your designers who are not savvy

01:28:41.625 --> 01:28:44.105
<v Speaker 1>with APIs or CLIs

01:28:44.449 --> 01:28:46.929
<v Speaker 1>with a very simple UI, they can create

01:28:46.929 --> 01:28:48.130
<v Speaker 1>multi cloud

01:28:48.290 --> 01:28:50.690
<v Speaker 1>Kubernetes clusters or whatever they need to do.

01:28:51.250 --> 01:28:52.929
<v Speaker 2>Yeah. And it's it's you know, we've only

01:28:52.929 --> 01:28:55.489
<v Speaker 2>interacted with one provider here as in the

01:28:55.489 --> 01:28:58.405
<v Speaker 2>the packet slash metal, you know, Equinix metal

01:28:58.405 --> 01:29:00.885
<v Speaker 2>provider. Be one? No. They can only they

01:29:00.885 --> 01:29:02.165
<v Speaker 2>can be many. You can have as many

01:29:02.165 --> 01:29:04.405
<v Speaker 2>as you like. You know, like like, let

01:29:04.485 --> 01:29:06.725
<v Speaker 2>let's say you wanna create a CLI

01:29:06.805 --> 01:29:08.725
<v Speaker 2>that provisions your application

01:29:08.885 --> 01:29:11.440
<v Speaker 2>for your team and, you know, they need

01:29:11.520 --> 01:29:13.679
<v Speaker 2>they you know they need a Cloudflare

01:29:13.760 --> 01:29:15.919
<v Speaker 2>URL or something like that.

01:29:16.320 --> 01:29:18.159
<v Speaker 2>You know, we've got one resource. We could

01:29:18.159 --> 01:29:19.280
<v Speaker 2>do, like, the

01:29:19.679 --> 01:29:22.400
<v Speaker 2>BGP stuff all wrapped in here and and

01:29:22.400 --> 01:29:23.199
<v Speaker 2>all that kind of stuff.

01:29:24.055 --> 01:29:25.575
<v Speaker 0>Yeah. And, of course, this can this can

01:29:25.575 --> 01:29:26.614
<v Speaker 1>also be used to

01:29:27.495 --> 01:29:29.815
<v Speaker 1>trigger off your dynamic providers. If you've written

01:29:29.815 --> 01:29:32.215
<v Speaker 1>specific dynamic providers that you need to use

01:29:32.215 --> 01:29:34.135
<v Speaker 1>as part of your flow, you can embed

01:29:34.135 --> 01:29:35.815
<v Speaker 1>in the dynamic provider in here as well.

01:29:36.100 --> 01:29:37.460
<v Speaker 0>Right. You're

01:29:37.460 --> 01:29:38.900
<v Speaker 0>putting too many ideas in my head now.

01:29:38.900 --> 01:29:41.060
<v Speaker 0>That's what I just let's

01:29:41.699 --> 01:29:43.460
<v Speaker 0>I just pasted on that code that you

01:29:43.460 --> 01:29:45.060
<v Speaker 0>sent me, Paul, on on the chat. So

01:29:45.060 --> 01:29:47.460
<v Speaker 0>this is the example of using a the

01:29:47.460 --> 01:29:50.180
<v Speaker 0>Pulumi examples repository as a provider for those

01:29:50.255 --> 01:29:51.135
<v Speaker 0>stack

01:29:51.135 --> 01:29:53.614
<v Speaker 0>examples. Right? And then we just say stack

01:29:53.614 --> 01:29:55.775
<v Speaker 0>remote source. We tell it the repository and

01:29:55.775 --> 01:29:57.775
<v Speaker 0>then those become available as things I can

01:29:57.775 --> 01:29:59.855
<v Speaker 0>just been up. Right? Yeah. I understood that.

01:29:59.855 --> 01:30:00.894
<v Speaker 0>Right? Yeah. Okay. Cool.

01:30:01.695 --> 01:30:02.574
<v Speaker 0>Awesome.

01:30:02.574 --> 01:30:03.295
<v Speaker 0>That was

01:30:04.699 --> 01:30:07.179
<v Speaker 0>a very exciting. And I can see

01:30:07.739 --> 01:30:10.620
<v Speaker 0>so many different possibilities of things that can

01:30:10.620 --> 01:30:12.460
<v Speaker 0>be automated there. You know, I think it's

01:30:12.460 --> 01:30:13.820
<v Speaker 0>really cool that you mentioned that we can

01:30:13.820 --> 01:30:15.820
<v Speaker 0>use multiple providers there. You know, one of

01:30:15.820 --> 01:30:18.925
<v Speaker 0>Equinix's secret sauces, if you were, was interconnection

01:30:18.925 --> 01:30:20.685
<v Speaker 0>to all the cloud providers. Been able to

01:30:20.685 --> 01:30:21.325
<v Speaker 0>spin up

01:30:21.965 --> 01:30:24.605
<v Speaker 0>a JKE cluster, an EKS cluster, and one

01:30:24.605 --> 01:30:26.525
<v Speaker 0>on Equinix metal and have them connected by

01:30:26.525 --> 01:30:27.725
<v Speaker 0>a fiber backbone

01:30:27.805 --> 01:30:29.565
<v Speaker 0>is something that I'm now gonna make my

01:30:29.565 --> 01:30:30.685
<v Speaker 0>life's work or at least for the next

01:30:30.685 --> 01:30:31.165
<v Speaker 0>three

01:30:31.730 --> 01:30:33.810
<v Speaker 0>use new automation API. Yeah. And you can

01:30:33.810 --> 01:30:34.850
<v Speaker 2>do it all in a you know, you

01:30:34.850 --> 01:30:37.410
<v Speaker 2>can do call it super cluster. Exactly. And

01:30:37.489 --> 01:30:39.650
<v Speaker 2>yeah. And have a a magical super multi

01:30:39.650 --> 01:30:40.530
<v Speaker 2>cloud cluster.

01:30:41.010 --> 01:30:43.170
<v Speaker 2>I it's really a super cluster if you

01:30:43.170 --> 01:30:44.690
<v Speaker 1>don't have a Raspberry Pi cluster on your

01:30:44.690 --> 01:30:45.650
<v Speaker 1>desk? Well, yeah.

01:30:47.215 --> 01:30:48.735
<v Speaker 0>Well, maybe I'll try and work that better

01:30:48.735 --> 01:30:49.695
<v Speaker 0>as well then.

01:30:50.895 --> 01:30:52.655
<v Speaker 0>Alright. Well, we've been a little bit over,

01:30:52.655 --> 01:30:54.175
<v Speaker 0>but I think it was worth it. I'm

01:30:54.175 --> 01:30:55.455
<v Speaker 0>glad that we we got to them. We

01:30:55.455 --> 01:30:57.455
<v Speaker 0>got it working. I'm hoping that other people

01:30:57.455 --> 01:30:59.295
<v Speaker 0>now see this as, you know, a good

01:30:59.295 --> 01:31:02.175
<v Speaker 0>example and basis and starting point for them

01:31:01.410 --> 01:31:03.890
<v Speaker 0>to build their own really cool CLIs with

01:31:03.890 --> 01:31:05.890
<v Speaker 0>this. And as you said, not even just

01:31:05.890 --> 01:31:07.890
<v Speaker 0>CLIs, hooking up to electron or even web

01:31:07.890 --> 01:31:09.970
<v Speaker 0>applications that can call out and execute this

01:31:09.970 --> 01:31:12.610
<v Speaker 0>stuff. Very, very powerful. So as

01:31:12.610 --> 01:31:14.530
<v Speaker 0>always, I'm super impressed with the Pulumi stuff.

01:31:14.530 --> 01:31:16.050
<v Speaker 0>Thank you for doing what you're doing and

01:31:16.050 --> 01:31:18.574
<v Speaker 0>keep at it. Thanks thanks for having us.

01:31:18.815 --> 01:31:21.775
<v Speaker 0>No. My pleasure. Have an awesome evening, morning,

01:31:21.855 --> 01:31:24.255
<v Speaker 0>whatever time it is in Seattle right now.

01:31:24.335 --> 01:31:25.935
<v Speaker 0>Paul, you have a great time in London

01:31:25.935 --> 01:31:27.695
<v Speaker 0>and I'll speak to you both again soon.

01:31:27.695 --> 01:31:29.215
<v Speaker 0>Thank you for joining me. It's a pleasure.

01:31:29.215 --> 01:31:30.980
<v Speaker 1>Take care. Thanks. See you later. Bye.
