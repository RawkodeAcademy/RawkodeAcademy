WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: a831ced5-421b-4a0a-a7ec-810ae4d7d416
Created: 2025-04-29T12:05:05.356Z
Duration: 3067.8618
Channels: 1

00:00:00.000 --> 00:00:01.280
<v Speaker 0>Hey, GitLab Duo.

00:00:02.560 --> 00:00:04.160
<v Speaker 0>I need you to help me write a

00:00:04.160 --> 00:00:04.800
<v Speaker 0>script.

00:00:05.200 --> 00:00:07.359
<v Speaker 0>I want to process a video file, and

00:00:07.359 --> 00:00:09.519
<v Speaker 0>what I actually want is to save a

00:00:09.519 --> 00:00:13.360
<v Speaker 0>screenshot or image into a directory called frames

00:00:13.360 --> 00:00:16.325
<v Speaker 0>for every frame within the video file.

00:00:17.125 --> 00:00:18.725
<v Speaker 0>I don't know what language is best for

00:00:18.725 --> 00:00:20.725
<v Speaker 0>this, so you can choose. But I do

00:00:20.725 --> 00:00:22.405
<v Speaker 0>ask that you comment the code to help

00:00:22.405 --> 00:00:23.525
<v Speaker 0>me understand it.

00:00:23.925 --> 00:00:24.325
<v Speaker 0>Thank you.

00:00:35.300 --> 00:00:38.500
<v Speaker 0>Hello, and welcome back to the Rawkode Academy.

00:00:38.500 --> 00:00:41.380
<v Speaker 0>I'm your host, David Flanagan, although mostly known

00:00:41.380 --> 00:00:42.900
<v Speaker 0>across the Internet as Rawkode.

00:00:44.565 --> 00:00:46.725
<v Speaker 0>Today is a fun video.

00:00:47.285 --> 00:00:49.285
<v Speaker 0>I have the opportunity to play with and

00:00:49.285 --> 00:00:53.125
<v Speaker 0>explore GitLab Duo. This is GitLab's integrated AI

00:00:53.125 --> 00:00:55.364
<v Speaker 0>that allows you to write code faster.

00:00:56.860 --> 00:00:59.020
<v Speaker 0>I've decided that I want to do some

00:00:59.020 --> 00:01:01.740
<v Speaker 0>processing of my YouTube videos so that I

00:01:01.740 --> 00:01:04.380
<v Speaker 0>can use AI to generate thumbnails,

00:01:04.380 --> 00:01:05.980
<v Speaker 0>descriptions, summaries,

00:01:06.380 --> 00:01:08.860
<v Speaker 0>command extraction and a whole bunch more.

00:01:09.805 --> 00:01:10.845
<v Speaker 0>So I figured

00:01:11.165 --> 00:01:13.325
<v Speaker 0>let's put these two projects together

00:01:13.565 --> 00:01:15.325
<v Speaker 0>and see what we can come up with.

00:01:16.285 --> 00:01:19.085
<v Speaker 0>The first step was just to write some

00:01:19.085 --> 00:01:19.885
<v Speaker 0>script

00:01:20.125 --> 00:01:21.005
<v Speaker 0>that will generate

00:01:21.580 --> 00:01:24.060
<v Speaker 0>images from every frame in a video.

00:01:24.780 --> 00:01:26.540
<v Speaker 0>You've already seen the prompt.

00:01:26.780 --> 00:01:27.980
<v Speaker 0>Let's see the code.

00:01:28.780 --> 00:01:30.540
<v Speaker 0>Let's take a look. So just before we

00:01:30.540 --> 00:01:32.380
<v Speaker 0>go through this line by line, I want

00:01:32.380 --> 00:01:34.780
<v Speaker 0>to clarify that I am by no means

00:01:34.780 --> 00:01:35.900
<v Speaker 0>a Python developer.

00:01:36.395 --> 00:01:38.315
<v Speaker 0>I write Python a handful of times a

00:01:38.315 --> 00:01:40.315
<v Speaker 0>year and not very well.

00:01:41.355 --> 00:01:43.435
<v Speaker 0>I also wanna point out that none of

00:01:43.435 --> 00:01:45.035
<v Speaker 0>the tasks that we're gonna ask it to

00:01:45.035 --> 00:01:45.515
<v Speaker 0>do

00:01:45.995 --> 00:01:46.875
<v Speaker 0>are that

00:01:47.035 --> 00:01:48.875
<v Speaker 0>difficult to code yourself.

00:01:50.570 --> 00:01:52.730
<v Speaker 0>And I think that's where AI really excels

00:01:52.730 --> 00:01:55.050
<v Speaker 0>in the software development life cycle.

00:01:55.530 --> 00:01:58.010
<v Speaker 0>Saving your time from things that aren't hard

00:01:58.010 --> 00:01:59.930
<v Speaker 0>even if they are a little bit complicated,

00:01:59.930 --> 00:02:01.850
<v Speaker 0>allowing you to free up more time to

00:02:01.850 --> 00:02:04.890
<v Speaker 0>focus on novel solutions to more difficult

00:02:04.890 --> 00:02:05.450
<v Speaker 0>challenges.

00:02:07.345 --> 00:02:09.025
<v Speaker 0>With that being said, let's see what we

00:02:09.025 --> 00:02:09.585
<v Speaker 0>got.

00:02:10.705 --> 00:02:11.905
<v Speaker 0>So I asked

00:02:12.145 --> 00:02:14.465
<v Speaker 0>GitLab Duo to generate me some code. It

00:02:14.465 --> 00:02:17.345
<v Speaker 0>doesn't specify a language. It decided that Python

00:02:17.345 --> 00:02:18.465
<v Speaker 0>was a good decision

00:02:18.944 --> 00:02:20.864
<v Speaker 0>because of the OpenCV library.

00:02:21.830 --> 00:02:23.190
<v Speaker 0>And in retrospect,

00:02:23.269 --> 00:02:25.990
<v Speaker 0>I completely agree. It was a fantastic decision,

00:02:26.069 --> 00:02:26.870
<v Speaker 0>thank you.

00:02:27.510 --> 00:02:29.909
<v Speaker 0>I asked it to comment. Now the comments

00:02:29.909 --> 00:02:32.870
<v Speaker 0>aren't that useful, but then the code isn't

00:02:32.870 --> 00:02:34.310
<v Speaker 0>really that difficult to understand.

00:02:35.075 --> 00:02:36.675
<v Speaker 0>So I can kind of forgive it for

00:02:36.675 --> 00:02:37.155
<v Speaker 0>that.

00:02:37.635 --> 00:02:40.915
<v Speaker 0>As we give it more complicated tasks, hopefully,

00:02:40.915 --> 00:02:42.675
<v Speaker 0>it'll be able to elaborate on these comments

00:02:42.675 --> 00:02:43.795
<v Speaker 0>a little bit further.

00:02:44.515 --> 00:02:46.195
<v Speaker 0>However, we can see that it's kind of

00:02:46.195 --> 00:02:49.235
<v Speaker 0>divided our task up into three major steps.

00:02:49.780 --> 00:02:51.540
<v Speaker 0>One, a little bit of preparation.

00:02:51.860 --> 00:02:54.260
<v Speaker 0>First, you just configure where the video lives

00:02:54.580 --> 00:02:57.460
<v Speaker 0>and then create or ensure that a frames

00:02:57.460 --> 00:02:58.740
<v Speaker 0>directory exists.

00:02:59.860 --> 00:03:02.100
<v Speaker 0>And then opens the file and immediately starts

00:03:02.100 --> 00:03:04.660
<v Speaker 0>to loop through reading it frame by frame.

00:03:06.205 --> 00:03:08.125
<v Speaker 0>The last task is to save each of

00:03:08.125 --> 00:03:10.445
<v Speaker 0>those frames as a JPEG.

00:03:11.485 --> 00:03:13.885
<v Speaker 0>This is really easy with OpenCV,

00:03:14.365 --> 00:03:15.565
<v Speaker 0>but would I have been able to write

00:03:15.565 --> 00:03:17.405
<v Speaker 0>it as fast as GitLab Duo did?

00:03:18.045 --> 00:03:18.925
<v Speaker 0>No chance.

00:03:20.730 --> 00:03:22.730
<v Speaker 0>So let's make our first improvement.

00:03:23.450 --> 00:03:25.610
<v Speaker 0>This is nice but I don't like the

00:03:25.610 --> 00:03:28.090
<v Speaker 0>hardcoded video dot m p four even though

00:03:28.090 --> 00:03:29.930
<v Speaker 0>that is the name of our file.

00:03:30.250 --> 00:03:31.849
<v Speaker 0>Let's assume we're going to be able to

00:03:31.849 --> 00:03:34.489
<v Speaker 0>run this on any arbitrary file within my

00:03:34.489 --> 00:03:34.810
<v Speaker 0>machine.

00:03:36.035 --> 00:03:38.115
<v Speaker 0>Now again, I'm not a Python developer. I

00:03:38.115 --> 00:03:39.555
<v Speaker 0>don't know how to write a CLI with

00:03:39.555 --> 00:03:41.635
<v Speaker 0>Python. I don't even know how to process

00:03:41.635 --> 00:03:42.675
<v Speaker 0>argv.

00:03:43.235 --> 00:03:45.715
<v Speaker 0>I'm hoping GitLab Duo does.

00:03:46.515 --> 00:03:47.475
<v Speaker 0>So let's take a look.

00:03:48.810 --> 00:03:50.730
<v Speaker 0>Let's try and be

00:03:51.930 --> 00:03:52.570
<v Speaker 0>bold.

00:03:53.050 --> 00:03:54.890
<v Speaker 1>Let's select everything,

00:03:55.530 --> 00:03:57.610
<v Speaker 1>come over to our chatbot

00:03:58.650 --> 00:04:00.010
<v Speaker 1>and let's say

00:04:00.425 --> 00:04:02.105
<v Speaker 1>if I turn this

00:04:02.105 --> 00:04:03.465
<v Speaker 0>into a

00:04:03.944 --> 00:04:05.945
<v Speaker 0>man line application,

00:04:06.665 --> 00:04:10.025
<v Speaker 0>we want to ensure that the filename

00:04:10.265 --> 00:04:12.265
<v Speaker 0>can be passed in

00:04:12.584 --> 00:04:14.025
<v Speaker 0>by the

00:04:15.010 --> 00:04:15.730
<v Speaker 0>user.

00:04:25.970 --> 00:04:27.010
<v Speaker 0>Type in its code.

00:04:33.655 --> 00:04:36.055
<v Speaker 0>There we go. Let's copy this

00:04:37.014 --> 00:04:37.815
<v Speaker 0>and replace.

00:04:41.500 --> 00:04:44.140
<v Speaker 1>All this done is tell me or show

00:04:44.140 --> 00:04:47.100
<v Speaker 1>me, educate me that we can use sys.

00:04:47.100 --> 00:04:48.940
<v Speaker 1>Rv with a positional

00:04:48.940 --> 00:04:51.340
<v Speaker 1>indicator, in this case one, I'm assuming zero

00:04:51.340 --> 00:04:53.020
<v Speaker 0>is going to be the entire command line

00:04:53.604 --> 00:04:55.845
<v Speaker 1>and it's even telling me how to use

00:04:55.845 --> 00:04:58.645
<v Speaker 1>this which I think is a useful comment.

00:04:58.645 --> 00:04:59.285
<v Speaker 1>So

00:05:00.485 --> 00:05:01.685
<v Speaker 1>let's add this

00:05:04.724 --> 00:05:07.620
<v Speaker 1>to our code. Now we haven't actually run

00:05:07.620 --> 00:05:08.980
<v Speaker 1>this code yet

00:05:09.300 --> 00:05:11.380
<v Speaker 1>though maybe now is a good time to

00:05:11.380 --> 00:05:12.420
<v Speaker 1>test it out.

00:05:13.060 --> 00:05:14.820
<v Speaker 0>So here we are in the terminal.

00:05:16.020 --> 00:05:17.540
<v Speaker 0>We're going to run Python

00:05:18.115 --> 00:05:19.555
<v Speaker 0>frames dot py

00:05:19.794 --> 00:05:22.035
<v Speaker 0>followed by video dot m p four.

00:05:22.835 --> 00:05:23.475
<v Speaker 0>Now

00:05:23.955 --> 00:05:25.475
<v Speaker 0>now occurs to me

00:05:26.354 --> 00:05:28.675
<v Speaker 0>that we don't really have any print statements,

00:05:28.675 --> 00:05:31.475
<v Speaker 0>so there's a lot of assumptions about whether

00:05:31.475 --> 00:05:34.120
<v Speaker 1>this is actually running. So let's confirm that

00:05:34.120 --> 00:05:35.480
<v Speaker 1>by splitting our pane

00:05:36.040 --> 00:05:37.880
<v Speaker 1>and opening and finder.

00:05:38.280 --> 00:05:39.480
<v Speaker 1>And right away,

00:05:40.600 --> 00:05:41.560
<v Speaker 1>we can see

00:05:42.680 --> 00:05:44.040
<v Speaker 1>frames directory.

00:05:44.920 --> 00:05:47.400
<v Speaker 0>And if we just show this in preview

00:05:47.400 --> 00:05:47.800
<v Speaker 0>mode,

00:05:49.055 --> 00:05:51.375
<v Speaker 1>we can see the ticker scrolling along the

00:05:51.375 --> 00:05:53.855
<v Speaker 1>top as we run through hundreds

00:05:54.175 --> 00:05:55.775
<v Speaker 0>and I'm sure thousands

00:05:55.775 --> 00:05:56.895
<v Speaker 0>of frames.

00:05:57.455 --> 00:05:59.935
<v Speaker 0>Given that this video is probably about an

00:05:59.935 --> 00:06:01.775
<v Speaker 0>hour and a half long at a minimum

00:06:02.310 --> 00:06:04.230
<v Speaker 1>at 60 frames per second.

00:06:04.790 --> 00:06:06.470
<v Speaker 1>That is a lot of frame.

00:06:07.270 --> 00:06:09.830
<v Speaker 0>But we'll let the script get there.

00:06:11.830 --> 00:06:13.830
<v Speaker 0>And I won't bother going through it anymore.

00:06:13.830 --> 00:06:15.430
<v Speaker 0>So our script does work.

00:06:17.625 --> 00:06:19.865
<v Speaker 1>So let's use some movie magic and come

00:06:19.865 --> 00:06:22.104
<v Speaker 1>back in a moment when our frames are

00:06:22.104 --> 00:06:22.824
<v Speaker 1>rendered.

00:06:23.705 --> 00:06:25.705
<v Speaker 1>Okay, so that is now finished

00:06:26.104 --> 00:06:27.544
<v Speaker 0>and it did take a little bit of

00:06:27.544 --> 00:06:31.970
<v Speaker 0>time but we did get a 71,000

00:06:31.970 --> 00:06:32.930
<v Speaker 0>frames.

00:06:33.569 --> 00:06:36.129
<v Speaker 1>So that's 60 frames per second for a

00:06:36.129 --> 00:06:37.889
<v Speaker 1>little over a hundred minutes.

00:06:39.330 --> 00:06:40.930
<v Speaker 0>Now we don't want to spend a lot

00:06:40.930 --> 00:06:43.235
<v Speaker 0>of time during this video waiting on my

00:06:43.235 --> 00:06:45.795
<v Speaker 0>computer or cheating with movie magic.

00:06:46.115 --> 00:06:48.115
<v Speaker 0>Well, we're going to limit this to not

00:06:48.115 --> 00:06:49.795
<v Speaker 0>save every single frame.

00:06:50.835 --> 00:06:52.595
<v Speaker 0>And of course, we're not going to do

00:06:52.595 --> 00:06:53.475
<v Speaker 1>this manually.

00:06:53.795 --> 00:06:56.530
<v Speaker 1>We're gonna ask GitLab Duo.

00:06:59.330 --> 00:07:00.690
<v Speaker 0>So let's say

00:07:01.729 --> 00:07:02.530
<v Speaker 1>instead

00:07:02.690 --> 00:07:03.970
<v Speaker 1>of capturing

00:07:04.210 --> 00:07:05.330
<v Speaker 1>every frame,

00:07:06.289 --> 00:07:10.210
<v Speaker 1>let's capture one frame every ten seconds.

00:07:29.419 --> 00:07:31.660
<v Speaker 0>Alright. Now we have some updates to our

00:07:31.660 --> 00:07:33.660
<v Speaker 0>script. Now we're not gonna copy and paste

00:07:33.660 --> 00:07:34.860
<v Speaker 0>all of those and put it over the

00:07:34.860 --> 00:07:37.260
<v Speaker 0>top because we've been making modification.

00:07:37.605 --> 00:07:39.605
<v Speaker 0>We've got comments, we know how to run

00:07:39.605 --> 00:07:40.405
<v Speaker 0>the command,

00:07:40.805 --> 00:07:42.325
<v Speaker 0>and we can see here that it's right

00:07:42.325 --> 00:07:44.085
<v Speaker 0>back to hard coding our video dot m

00:07:44.085 --> 00:07:46.085
<v Speaker 0>p four. So we're just gonna select the

00:07:46.085 --> 00:07:47.285
<v Speaker 0>things that we need.

00:07:47.925 --> 00:07:49.925
<v Speaker 0>Now we can see that it imports math,

00:07:49.925 --> 00:07:51.205
<v Speaker 1>so let's bring that in

00:07:51.919 --> 00:07:53.600
<v Speaker 1>in alphabetical order

00:07:54.960 --> 00:07:57.039
<v Speaker 1>and we can see that it gets

00:07:58.800 --> 00:07:59.680
<v Speaker 0>frames

00:07:59.680 --> 00:08:00.720
<v Speaker 0>per second

00:08:01.759 --> 00:08:02.560
<v Speaker 0>after

00:08:02.639 --> 00:08:03.759
<v Speaker 0>the video capture.

00:08:05.275 --> 00:08:07.035
<v Speaker 0>So we're going to store that as FPS

00:08:07.035 --> 00:08:07.675
<v Speaker 0>two.

00:08:08.795 --> 00:08:10.715
<v Speaker 0>We then have a frame interval that we

00:08:10.715 --> 00:08:13.195
<v Speaker 0>wish to configure for us that is 10.

00:08:14.955 --> 00:08:16.555
<v Speaker 1>We want to skip

00:08:16.490 --> 00:08:19.450
<v Speaker 1>10 times the frames per second for one

00:08:19.450 --> 00:08:21.770
<v Speaker 1>image every ten seconds.

00:08:23.450 --> 00:08:25.690
<v Speaker 1>We're then just going to grab this if

00:08:25.690 --> 00:08:26.410
<v Speaker 0>statement

00:08:32.105 --> 00:08:33.304
<v Speaker 0>and indent

00:08:33.625 --> 00:08:36.745
<v Speaker 0>our code. This time, we only save the

00:08:36.745 --> 00:08:37.705
<v Speaker 0>JPEG

00:08:40.265 --> 00:08:44.105
<v Speaker 0>when we have a round ten

00:08:42.730 --> 00:08:43.610
<v Speaker 0>second

00:08:43.610 --> 00:08:44.490
<v Speaker 0>frame.

00:08:47.930 --> 00:08:49.770
<v Speaker 0>Let's go back to our terminal.

00:08:53.050 --> 00:08:55.370
<v Speaker 1>I'm going to remove our frames directory,

00:08:57.895 --> 00:09:00.215
<v Speaker 0>which on itself may take another while at

00:09:00.215 --> 00:09:01.335
<v Speaker 0>a 70,000

00:09:01.335 --> 00:09:02.055
<v Speaker 0>frames

00:09:02.695 --> 00:09:03.895
<v Speaker 0>and rerun

00:09:03.975 --> 00:09:05.015
<v Speaker 0>our script.

00:09:06.295 --> 00:09:08.375
<v Speaker 0>And hopefully for the last time we'll be

00:09:08.375 --> 00:09:09.415
<v Speaker 0>back in a moment.

00:09:12.480 --> 00:09:15.279
<v Speaker 0>Okay. Let's take a look inside of brems,

00:09:15.279 --> 00:09:18.000
<v Speaker 0>pipenet, wc and we can see that we

00:09:18.000 --> 00:09:20.959
<v Speaker 0>are now working with 572

00:09:20.959 --> 00:09:21.440
<v Speaker 0>file.

00:09:21.935 --> 00:09:25.055
<v Speaker 0>This is a lot less than a 70,000.

00:09:25.135 --> 00:09:26.815
<v Speaker 0>This is something we can work with on

00:09:26.815 --> 00:09:28.335
<v Speaker 0>a local machine.

00:09:30.255 --> 00:09:32.015
<v Speaker 0>So let's go back

00:09:32.334 --> 00:09:33.695
<v Speaker 0>to Versus Code.

00:09:35.910 --> 00:09:38.310
<v Speaker 0>Now my mission here is I want to

00:09:38.310 --> 00:09:41.190
<v Speaker 0>take the 600 frames and in fact let's

00:09:41.190 --> 00:09:43.430
<v Speaker 0>pop them open before we go back to

00:09:43.430 --> 00:09:44.870
<v Speaker 0>GitLab Duo

00:09:45.910 --> 00:09:48.135
<v Speaker 0>and take a look at our preview. Now

00:09:48.135 --> 00:09:50.055
<v Speaker 0>that's only 600, we should be able to

00:09:50.055 --> 00:09:52.695
<v Speaker 0>get an overview, at least a broad overview

00:09:52.855 --> 00:09:54.935
<v Speaker 0>of what happens on the stream.

00:09:57.095 --> 00:09:59.815
<v Speaker 0>We've got people, we've got Kubernetes commands, a

00:09:59.815 --> 00:10:00.775
<v Speaker 0>whole bunch of YAML,

00:10:01.580 --> 00:10:03.180
<v Speaker 0>Goes on and on and on. We've got

00:10:03.180 --> 00:10:04.700
<v Speaker 0>comments from the audience.

00:10:05.900 --> 00:10:08.460
<v Speaker 0>We've got lots of journal d, system d

00:10:08.460 --> 00:10:09.340
<v Speaker 0>commands.

00:10:11.180 --> 00:10:13.100
<v Speaker 0>I think we can have some fun with

00:10:13.100 --> 00:10:14.060
<v Speaker 0>this for sure.

00:10:15.255 --> 00:10:16.695
<v Speaker 0>Now wouldn't it be cool

00:10:17.175 --> 00:10:19.735
<v Speaker 0>if you were watching an episode of clustered,

00:10:21.495 --> 00:10:23.815
<v Speaker 0>and we could give you a list of

00:10:23.815 --> 00:10:24.855
<v Speaker 0>the commands

00:10:24.855 --> 00:10:27.334
<v Speaker 0>that were executed on the episode,

00:10:27.575 --> 00:10:29.255
<v Speaker 0>provided they were important or useful.

00:10:30.420 --> 00:10:31.940
<v Speaker 0>It would also be nice if we were

00:10:31.940 --> 00:10:34.740
<v Speaker 0>able to extract and highlight the error messages.

00:10:35.220 --> 00:10:36.660
<v Speaker 0>Now, of course, we could do this all

00:10:36.660 --> 00:10:37.860
<v Speaker 0>with manual work,

00:10:38.180 --> 00:10:40.260
<v Speaker 0>but we live in the age of AI.

00:10:41.620 --> 00:10:44.340
<v Speaker 0>We're using AI to write more AI.

00:10:44.925 --> 00:10:48.285
<v Speaker 0>Can GitLab Duo help me interact with other

00:10:48.685 --> 00:10:50.045
<v Speaker 0>AI models

00:10:50.525 --> 00:10:53.565
<v Speaker 0>to remove the laborious and tedious task of

00:10:53.565 --> 00:10:55.405
<v Speaker 0>watching every single episode

00:10:55.725 --> 00:10:56.765
<v Speaker 0>to describe

00:10:57.005 --> 00:10:59.725
<v Speaker 0>fine text and error messages, logs, and commands?

00:11:00.810 --> 00:11:02.810
<v Speaker 0>I sure hope so and we're about to

00:11:02.810 --> 00:11:03.530
<v Speaker 0>find out.

00:11:04.170 --> 00:11:06.650
<v Speaker 0>So I really have no idea what the

00:11:06.650 --> 00:11:08.410
<v Speaker 0>best approach here is.

00:11:09.530 --> 00:11:12.090
<v Speaker 0>We could continue using OpenCV,

00:11:12.090 --> 00:11:13.290
<v Speaker 0>which I do think has

00:11:13.735 --> 00:11:14.935
<v Speaker 0>text capabilities,

00:11:14.935 --> 00:11:15.895
<v Speaker 0>OCR,

00:11:16.215 --> 00:11:18.375
<v Speaker 0>or maybe we need to start shipping these

00:11:18.375 --> 00:11:20.615
<v Speaker 0>images to other AI models.

00:11:22.295 --> 00:11:23.735
<v Speaker 0>Let's ask GitLab Duo.

00:11:25.495 --> 00:11:27.015
<v Speaker 0>I want to extract

00:11:28.459 --> 00:11:31.500
<v Speaker 0>all the tech from the generated

00:11:33.740 --> 00:11:34.459
<v Speaker 0>images.

00:11:35.660 --> 00:11:37.180
<v Speaker 0>What is the best way

00:11:39.180 --> 00:11:39.899
<v Speaker 0>to do so?

00:11:52.810 --> 00:11:54.170
<v Speaker 0>Alright. So

00:11:55.050 --> 00:11:58.570
<v Speaker 0>it is suggesting we use PyTeseride,

00:11:59.610 --> 00:12:01.050
<v Speaker 0>which runs OCR

00:12:01.290 --> 00:12:02.570
<v Speaker 0>against the imaging.

00:12:04.250 --> 00:12:06.329
<v Speaker 0>Alright. And seems like a good first approach

00:12:06.329 --> 00:12:07.850
<v Speaker 0>and has given me some code.

00:12:08.595 --> 00:12:10.515
<v Speaker 0>We'll test that code in a moment, but

00:12:10.515 --> 00:12:12.355
<v Speaker 0>let's ask it a follow-up question.

00:12:13.714 --> 00:12:14.435
<v Speaker 0>Would

00:12:14.595 --> 00:12:16.595
<v Speaker 0>it be easier

00:12:16.995 --> 00:12:18.115
<v Speaker 0>or better,

00:12:18.595 --> 00:12:21.714
<v Speaker 0>better is a terrible word, or more accurate

00:12:22.550 --> 00:12:24.310
<v Speaker 0>to send these images

00:12:24.790 --> 00:12:26.390
<v Speaker 0>to an AI

00:12:26.470 --> 00:12:27.270
<v Speaker 0>model.

00:12:27.670 --> 00:12:28.950
<v Speaker 0>In fact, let's make it a bit more

00:12:28.950 --> 00:12:29.750
<v Speaker 0>specific

00:12:29.910 --> 00:12:32.070
<v Speaker 0>and let's just say to

00:12:32.790 --> 00:12:34.230
<v Speaker 0>OpenAI's

00:12:34.230 --> 00:12:34.870
<v Speaker 0>API.

00:12:45.995 --> 00:12:48.395
<v Speaker 0>And it says yeah. Okay.

00:12:50.589 --> 00:12:53.070
<v Speaker 0>Can I have code

00:12:53.070 --> 00:12:54.670
<v Speaker 0>to do that?

00:12:55.149 --> 00:12:55.870
<v Speaker 0>Please

00:12:56.029 --> 00:12:58.910
<v Speaker 0>remember to be nice to our AI overlords.

00:13:05.755 --> 00:13:08.075
<v Speaker 0>Oh, not enough details. Alright.

00:13:08.155 --> 00:13:08.635
<v Speaker 0>Let

00:13:10.155 --> 00:13:11.675
<v Speaker 0>ask our question again

00:13:12.155 --> 00:13:13.675
<v Speaker 0>and keep our contact.

00:13:13.995 --> 00:13:15.835
<v Speaker 0>Provide the code,

00:13:15.995 --> 00:13:16.155
<v Speaker 0>Duo.

00:13:17.740 --> 00:13:19.899
<v Speaker 0>No, please, because it made me ask twice.

00:13:23.420 --> 00:13:24.220
<v Speaker 0>Awesome.

00:13:24.620 --> 00:13:26.940
<v Speaker 0>And now we have code to interact with

00:13:26.940 --> 00:13:27.980
<v Speaker 0>OpenAI's

00:13:27.980 --> 00:13:29.660
<v Speaker 0>image to text API.

00:13:31.295 --> 00:13:33.055
<v Speaker 0>That is very

00:13:33.055 --> 00:13:33.855
<v Speaker 0>cool.

00:13:36.015 --> 00:13:38.255
<v Speaker 0>So let's try both approaches and see how

00:13:38.255 --> 00:13:39.055
<v Speaker 0>we get on.

00:13:39.935 --> 00:13:43.215
<v Speaker 0>Let's copy the code from the py tesseract

00:13:44.910 --> 00:13:46.830
<v Speaker 0>and call this local

00:13:47.389 --> 00:13:48.350
<v Speaker 0>image

00:13:49.709 --> 00:13:50.670
<v Speaker 0>to text

00:13:50.990 --> 00:13:52.350
<v Speaker 0>and paste it in.

00:13:54.670 --> 00:13:57.334
<v Speaker 0>This wants a single image. So right away

00:13:57.334 --> 00:13:59.254
<v Speaker 0>we need to make some modifications because we

00:13:59.254 --> 00:14:01.254
<v Speaker 0>are gonna have to loop over our directory.

00:14:01.254 --> 00:14:01.975
<v Speaker 0>However,

00:14:02.134 --> 00:14:04.535
<v Speaker 0>to test this maybe we will hard code

00:14:04.535 --> 00:14:06.935
<v Speaker 0>one image and see what the results look

00:14:06.935 --> 00:14:09.654
<v Speaker 0>like and we'll also do the same with

00:14:09.654 --> 00:14:11.095
<v Speaker 0>the OpenAI code.

00:14:11.880 --> 00:14:14.360
<v Speaker 0>So we'll call this remote image

00:14:15.480 --> 00:14:16.200
<v Speaker 0>to

00:14:16.360 --> 00:14:17.000
<v Speaker 0>tech.

00:14:17.800 --> 00:14:19.480
<v Speaker 0>And now we have two scripts that we

00:14:19.480 --> 00:14:21.080
<v Speaker 0>can work with, both of which want a

00:14:21.080 --> 00:14:21.960
<v Speaker 0>single image.

00:14:22.600 --> 00:14:24.120
<v Speaker 0>Then we'll ask it to change the code.

00:14:25.275 --> 00:14:27.595
<v Speaker 0>So let's find a suitable image.

00:14:29.595 --> 00:14:31.355
<v Speaker 0>If we go back to the terminal,

00:14:31.595 --> 00:14:33.515
<v Speaker 0>open frames and finder,

00:14:34.075 --> 00:14:34.475
<v Speaker 0>scroll

00:14:37.450 --> 00:14:40.330
<v Speaker 0>to the the the close my eyes here.

00:14:41.770 --> 00:14:43.690
<v Speaker 0>Dreadful. Although we at we do just want

00:14:43.690 --> 00:14:44.970
<v Speaker 0>to get text to be fair.

00:14:50.954 --> 00:14:53.435
<v Speaker 0>Alright. Okay. Here we have some good tech.

00:14:53.435 --> 00:14:55.595
<v Speaker 0>We have some pod output at the top.

00:14:56.235 --> 00:14:58.475
<v Speaker 0>We've got some hidden, but it's a crash

00:14:58.475 --> 00:15:00.235
<v Speaker 0>lit back off. You can't actually see a

00:15:00.235 --> 00:15:02.235
<v Speaker 0>complete version of that, except for maybe the

00:15:02.235 --> 00:15:05.060
<v Speaker 0>top array. I'm curious to see if the

00:15:05.060 --> 00:15:07.300
<v Speaker 0>remote model OpenAI would be able to inject

00:15:07.300 --> 00:15:09.380
<v Speaker 0>some knowledge into that. And we have a

00:15:09.380 --> 00:15:10.100
<v Speaker 0>command

00:15:10.420 --> 00:15:13.380
<v Speaker 0>and I have one error message about daemon

00:15:13.380 --> 00:15:15.700
<v Speaker 0>set cilium not found. I really want to

00:15:15.700 --> 00:15:17.380
<v Speaker 0>know if we can start to process this

00:15:17.985 --> 00:15:19.585
<v Speaker 0>with local OCR

00:15:19.585 --> 00:15:20.625
<v Speaker 0>at remote.

00:15:21.025 --> 00:15:22.225
<v Speaker 0>This image,

00:15:23.505 --> 00:15:25.505
<v Speaker 0>this frame here,

00:15:26.225 --> 00:15:28.545
<v Speaker 0>B4200.

00:15:28.545 --> 00:15:30.785
<v Speaker 0>And why can I not copy that image

00:15:30.785 --> 00:15:32.790
<v Speaker 0>name? I have no

00:15:32.949 --> 00:15:34.550
<v Speaker 0>eye dear.

00:15:37.350 --> 00:15:39.269
<v Speaker 0>Well, Mac just doesn't want me copying image

00:15:39.269 --> 00:15:40.470
<v Speaker 0>names. Alright.

00:15:42.870 --> 00:15:44.790
<v Speaker 0>V4200.

00:15:48.704 --> 00:15:51.425
<v Speaker 0>4 2 0 0. Alright. So

00:15:51.665 --> 00:15:52.865
<v Speaker 0>let's start

00:15:52.945 --> 00:15:55.024
<v Speaker 0>with low. I think that makes a lot

00:15:55.024 --> 00:15:55.745
<v Speaker 0>more sense.

00:15:56.225 --> 00:15:57.264
<v Speaker 0>Paste our comment,

00:15:59.220 --> 00:16:00.899
<v Speaker 0>to ls frame

00:16:02.180 --> 00:16:03.940
<v Speaker 0>and format is

00:16:04.019 --> 00:16:05.139
<v Speaker 0>frames

00:16:05.139 --> 00:16:06.100
<v Speaker 0>frame

00:16:07.220 --> 00:16:09.380
<v Speaker 0>three four two zero zero dot JPEG.

00:16:11.755 --> 00:16:12.555
<v Speaker 0>Easy.

00:16:13.355 --> 00:16:16.155
<v Speaker 0>We open it. We get the text, and

00:16:16.155 --> 00:16:17.355
<v Speaker 0>we're going to print it.

00:16:17.995 --> 00:16:19.835
<v Speaker 0>I guess there's only one thing to do,

00:16:20.155 --> 00:16:21.995
<v Speaker 0>run our local script.

00:16:25.769 --> 00:16:26.490
<v Speaker 0>That

00:16:28.250 --> 00:16:30.010
<v Speaker 0>was a face of pure joy.

00:16:31.850 --> 00:16:33.690
<v Speaker 0>That has done really, really well.

00:16:35.785 --> 00:16:36.585
<v Speaker 0>Awesome.

00:16:42.025 --> 00:16:43.705
<v Speaker 0>But generally just impressed that I haven't written

00:16:43.705 --> 00:16:46.025
<v Speaker 0>a single line of code myself and we're

00:16:46.025 --> 00:16:48.904
<v Speaker 0>doing OCR against frames generated from a video

00:16:48.904 --> 00:16:49.305
<v Speaker 0>file.

00:16:50.210 --> 00:16:52.130
<v Speaker 0>Such a great time to be a developer.

00:16:52.770 --> 00:16:54.290
<v Speaker 0>Okay, I'm so happy

00:16:55.330 --> 00:16:57.570
<v Speaker 0>with the local text and I know it's

00:16:57.570 --> 00:17:00.130
<v Speaker 0>gonna be a lot faster than using OpenAI

00:17:00.130 --> 00:17:02.210
<v Speaker 0>to process 600 images

00:17:03.055 --> 00:17:04.974
<v Speaker 0>that we're just gonna go with local.

00:17:05.214 --> 00:17:06.575
<v Speaker 0>So we're gonna update

00:17:07.454 --> 00:17:08.494
<v Speaker 0>scripts

00:17:09.054 --> 00:17:11.214
<v Speaker 0>to look over all the frames,

00:17:11.454 --> 00:17:13.535
<v Speaker 0>grab all the text and save it to

00:17:13.535 --> 00:17:15.135
<v Speaker 0>text file with the same name as the

00:17:15.135 --> 00:17:15.454
<v Speaker 0>frame.

00:17:16.500 --> 00:17:18.500
<v Speaker 0>Then we're gonna get GitLab Duo to send

00:17:18.500 --> 00:17:20.419
<v Speaker 0>that text to OpenAI

00:17:20.420 --> 00:17:22.740
<v Speaker 0>to try and help us understand all the

00:17:22.740 --> 00:17:24.179
<v Speaker 0>text that we've found.

00:17:26.180 --> 00:17:26.580
<v Speaker 0>Okay.

00:17:32.625 --> 00:17:34.544
<v Speaker 0>Update this code

00:17:35.184 --> 00:17:36.224
<v Speaker 0>to look

00:17:36.384 --> 00:17:38.544
<v Speaker 0>through every image

00:17:38.705 --> 00:17:40.865
<v Speaker 0>within the frames directory.

00:17:43.790 --> 00:17:44.590
<v Speaker 0>And

00:17:44.590 --> 00:17:45.390
<v Speaker 0>can

00:17:46.510 --> 00:17:47.070
<v Speaker 0>protect.

00:18:00.315 --> 00:18:01.115
<v Speaker 0>Alright.

00:18:01.115 --> 00:18:03.994
<v Speaker 0>So it's telling me that we can

00:18:05.115 --> 00:18:05.914
<v Speaker 0>use a clock.

00:18:11.360 --> 00:18:12.399
<v Speaker 0>So

00:18:12.720 --> 00:18:14.000
<v Speaker 0>we can remove this.

00:18:19.184 --> 00:18:20.544
<v Speaker 0>Then we open

00:18:22.145 --> 00:18:22.544
<v Speaker 0>the

00:18:26.625 --> 00:18:29.104
<v Speaker 0>I don't think anything else has to change,

00:18:29.345 --> 00:18:30.865
<v Speaker 0>but now we don't want to print the

00:18:30.865 --> 00:18:32.225
<v Speaker 0>text. But instead,

00:18:32.670 --> 00:18:33.790
<v Speaker 0>printing

00:18:35.550 --> 00:18:36.670
<v Speaker 0>the text.

00:18:37.230 --> 00:18:39.710
<v Speaker 0>Save it with the same

00:18:39.710 --> 00:18:42.270
<v Speaker 0>file name but with

00:18:43.950 --> 00:18:45.710
<v Speaker 0>a text extension.

00:18:56.275 --> 00:18:58.515
<v Speaker 0>Alright. So it's broken it down into tasks

00:18:58.515 --> 00:18:59.155
<v Speaker 0>for me.

00:19:01.650 --> 00:19:03.809
<v Speaker 0>Oh, we got this import statement that we're

00:19:03.809 --> 00:19:04.850
<v Speaker 0>going to need.

00:19:07.890 --> 00:19:09.249
<v Speaker 0>That's not changed.

00:19:09.250 --> 00:19:10.450
<v Speaker 0>This hasn't changed.

00:19:12.545 --> 00:19:14.945
<v Speaker 0>Now we're getting a base name.

00:19:19.345 --> 00:19:21.024
<v Speaker 0>And then we write.

00:19:23.505 --> 00:19:23.825
<v Speaker 0>Oh.

00:19:25.370 --> 00:19:26.249
<v Speaker 0>That it?

00:19:28.970 --> 00:19:31.529
<v Speaker 0>Oh, these imports are separate.

00:19:31.529 --> 00:19:34.010
<v Speaker 0>Check that. We got that one. Oh, we

00:19:34.010 --> 00:19:35.130
<v Speaker 0>got that one. Alright.

00:19:37.065 --> 00:19:38.985
<v Speaker 0>I like them in alphabetical order. Thank you

00:19:38.985 --> 00:19:39.624
<v Speaker 0>very much.

00:19:40.585 --> 00:19:41.225
<v Speaker 0>So

00:19:42.905 --> 00:19:44.904
<v Speaker 0>go up the frames directory,

00:19:45.945 --> 00:19:47.225
<v Speaker 0>get the base name,

00:19:47.784 --> 00:19:48.664
<v Speaker 0>do the OCR,

00:19:50.330 --> 00:19:51.690
<v Speaker 0>raise it to fail.

00:19:52.810 --> 00:19:54.730
<v Speaker 0>Could not be more simple.

00:19:56.650 --> 00:19:57.690
<v Speaker 0>Okay.

00:19:59.930 --> 00:20:01.370
<v Speaker 0>Before we run this,

00:20:02.795 --> 00:20:04.155
<v Speaker 0>which I'm sure we could do that would

00:20:04.155 --> 00:20:05.274
<v Speaker 0>work just fine,

00:20:05.675 --> 00:20:07.035
<v Speaker 0>let's take a look at some of the

00:20:07.035 --> 00:20:08.635
<v Speaker 0>quick actions provided

00:20:08.635 --> 00:20:09.915
<v Speaker 0>by GitLab

00:20:09.915 --> 00:20:10.794
<v Speaker 0>Duo.

00:20:13.035 --> 00:20:14.955
<v Speaker 0>Here we can ask GitLab Duo to refactor

00:20:14.955 --> 00:20:15.675
<v Speaker 0>our code.

00:20:21.320 --> 00:20:23.080
<v Speaker 0>Let's see what we get.

00:20:24.840 --> 00:20:27.080
<v Speaker 0>So here's one way to refactor the selected

00:20:27.080 --> 00:20:30.040
<v Speaker 0>code. It has now broken it down into

00:20:30.040 --> 00:20:31.400
<v Speaker 0>individual

00:20:31.880 --> 00:20:32.280
<v Speaker 0>tab,

00:20:34.625 --> 00:20:35.264
<v Speaker 0>which

00:20:35.985 --> 00:20:37.024
<v Speaker 0>will take.

00:20:40.945 --> 00:20:42.784
<v Speaker 0>Alright. So we have one function,

00:20:43.185 --> 00:20:45.745
<v Speaker 0>image detect, where we look over the globe.

00:20:45.745 --> 00:20:46.545
<v Speaker 0>Perfect. Alright.

00:20:47.230 --> 00:20:49.229
<v Speaker 0>I think we can refactor this further.

00:20:49.789 --> 00:20:50.909
<v Speaker 0>Let's see.

00:20:51.630 --> 00:20:55.549
<v Speaker 0>Image to text seems to do more than

00:20:55.549 --> 00:20:56.749
<v Speaker 0>one job.

00:20:56.830 --> 00:20:57.390
<v Speaker 0>And

00:21:00.924 --> 00:21:02.764
<v Speaker 0>and we refactor

00:21:03.245 --> 00:21:03.965
<v Speaker 0>further.

00:21:10.125 --> 00:21:11.804
<v Speaker 0>Yes, we can. Thank you.

00:21:14.760 --> 00:21:16.840
<v Speaker 0>Let's copy this code.

00:21:19.880 --> 00:21:21.800
<v Speaker 0>So now we've got our for loop of

00:21:21.800 --> 00:21:22.679
<v Speaker 0>our glob,

00:21:23.000 --> 00:21:25.000
<v Speaker 0>we got the base name, open the file,

00:21:25.000 --> 00:21:26.760
<v Speaker 0>we extract the text and we save the

00:21:26.760 --> 00:21:27.080
<v Speaker 0>text.

00:21:28.095 --> 00:21:28.735
<v Speaker 0>This

00:21:28.895 --> 00:21:30.495
<v Speaker 0>I'm quite happy with,

00:21:31.455 --> 00:21:33.294
<v Speaker 0>but let's see if we can run it.

00:21:33.855 --> 00:21:36.015
<v Speaker 0>So we run our local image to text

00:21:36.015 --> 00:21:38.015
<v Speaker 0>and if we look inside frames, all we

00:21:38.015 --> 00:21:39.375
<v Speaker 0>have are JPEGs right now.

00:21:40.350 --> 00:21:41.070
<v Speaker 0>So

00:21:41.870 --> 00:21:43.150
<v Speaker 0>local and

00:21:43.150 --> 00:21:44.429
<v Speaker 0>we'll split this.

00:21:49.070 --> 00:21:50.750
<v Speaker 0>Do we have any text files yet?

00:21:55.965 --> 00:21:56.684
<v Speaker 0>No.

00:21:58.845 --> 00:21:59.645
<v Speaker 0>Wow.

00:22:01.565 --> 00:22:02.525
<v Speaker 0>Alright.

00:22:02.525 --> 00:22:03.565
<v Speaker 0>Let's kill that.

00:22:04.840 --> 00:22:06.840
<v Speaker 0>And make sure we write it to the

00:22:06.840 --> 00:22:08.039
<v Speaker 0>same directory.

00:22:09.640 --> 00:22:11.399
<v Speaker 0>Oh, save tech.

00:22:11.720 --> 00:22:12.840
<v Speaker 0>Filename.

00:22:16.200 --> 00:22:19.240
<v Speaker 0>So we just need this

00:22:17.975 --> 00:22:20.135
<v Speaker 0>to use our frame there.

00:22:31.350 --> 00:22:33.590
<v Speaker 0>And we'll delete all dot text files.

00:22:34.710 --> 00:22:35.669
<v Speaker 0>Python

00:22:36.310 --> 00:22:37.110
<v Speaker 0>local

00:22:37.910 --> 00:22:38.950
<v Speaker 0>l l

00:22:39.030 --> 00:22:39.750
<v Speaker 0>print.

00:22:41.350 --> 00:22:43.030
<v Speaker 0>And let's just r g.

00:22:45.515 --> 00:22:48.315
<v Speaker 0>And now we're getting our text files.

00:22:48.955 --> 00:22:50.155
<v Speaker 0>So I'm not sure how long it's gonna

00:22:50.155 --> 00:22:52.554
<v Speaker 0>take to run the OCR and 600 files,

00:22:52.635 --> 00:22:55.755
<v Speaker 0>but let's just get by the bottom.

00:22:56.910 --> 00:22:58.590
<v Speaker 0>Alright. So that's now finished

00:22:59.790 --> 00:23:01.790
<v Speaker 0>and we have our 572

00:23:01.790 --> 00:23:02.830
<v Speaker 0>text files.

00:23:03.950 --> 00:23:06.590
<v Speaker 0>What we want to do is start to

00:23:06.590 --> 00:23:08.910
<v Speaker 0>send these to OpenAI

00:23:08.910 --> 00:23:10.830
<v Speaker 0>to do command extraction,

00:23:11.365 --> 00:23:13.044
<v Speaker 0>error message extraction,

00:23:13.524 --> 00:23:15.684
<v Speaker 0>and maybe we'll think of something else along

00:23:15.684 --> 00:23:16.325
<v Speaker 0>the way.

00:23:17.125 --> 00:23:20.404
<v Speaker 0>So let's start chatting to GitLab Duo.

00:23:20.644 --> 00:23:21.844
<v Speaker 0>We need a script.

00:23:23.605 --> 00:23:25.524
<v Speaker 0>Let's batch up

00:23:26.490 --> 00:23:30.169
<v Speaker 0>all the text files within the frames directory.

00:23:31.690 --> 00:23:35.210
<v Speaker 0>We need to ensure that each batch

00:23:35.370 --> 00:23:37.690
<v Speaker 0>does not surpass

00:23:38.250 --> 00:23:39.850
<v Speaker 0>the 28

00:23:39.850 --> 00:23:41.930
<v Speaker 0>token limit

00:23:41.465 --> 00:23:42.745
<v Speaker 0>of GPT

00:23:42.745 --> 00:23:44.265
<v Speaker 0>four turbo

00:23:44.345 --> 00:23:45.304
<v Speaker 0>preview.

00:23:48.025 --> 00:23:49.385
<v Speaker 0>Let's send

00:23:49.545 --> 00:23:50.825
<v Speaker 0>each batch

00:23:51.625 --> 00:23:53.145
<v Speaker 0>to OpenAI

00:23:54.320 --> 00:23:57.519
<v Speaker 0>and ask it to extract

00:23:59.840 --> 00:24:00.720
<v Speaker 0>command

00:24:01.120 --> 00:24:02.399
<v Speaker 0>and error

00:24:02.640 --> 00:24:03.360
<v Speaker 0>messages

00:24:04.480 --> 00:24:08.000
<v Speaker 0>and print them to the screen

00:24:07.845 --> 00:24:10.485
<v Speaker 0>with a discriminator.

00:24:18.085 --> 00:24:19.205
<v Speaker 0>Oh, we're getting the script.

00:24:28.910 --> 00:24:29.950
<v Speaker 0>Undo,

00:24:30.190 --> 00:24:31.549
<v Speaker 0>make me happy.

00:24:32.110 --> 00:24:32.990
<v Speaker 0>So we need

00:24:33.950 --> 00:24:35.309
<v Speaker 0>let's call this

00:24:35.390 --> 00:24:39.205
<v Speaker 0>OpenAItextdiscovery.py.

00:24:41.685 --> 00:24:45.365
<v Speaker 0>Alright. So we are importing OpenAI globin OS.

00:24:45.365 --> 00:24:47.205
<v Speaker 0>We still have a frames directory. We have

00:24:47.205 --> 00:24:49.685
<v Speaker 0>a max token limit. We know now that

00:24:49.685 --> 00:24:51.285
<v Speaker 0>we can do a gate NV

00:24:51.510 --> 00:24:53.029
<v Speaker 0>open AI token,

00:24:53.030 --> 00:24:54.710
<v Speaker 0>this is what it gave us before.

00:24:55.270 --> 00:24:57.110
<v Speaker 0>We've already imported away.

00:24:57.910 --> 00:25:00.710
<v Speaker 0>Now it's creating a creating batches,

00:25:00.710 --> 00:25:02.390
<v Speaker 0>which using the glob,

00:25:03.845 --> 00:25:07.525
<v Speaker 0>looping over, reading the bytes, concatenating the bytes

00:25:07.605 --> 00:25:09.605
<v Speaker 0>and oh yeah and we have a check

00:25:09.605 --> 00:25:11.365
<v Speaker 0>here to make sure that no batch goes

00:25:11.365 --> 00:25:12.164
<v Speaker 0>above

00:25:12.165 --> 00:25:13.525
<v Speaker 0>the token length.

00:25:14.405 --> 00:25:16.805
<v Speaker 0>When we have the batches, it's then enumerating

00:25:16.805 --> 00:25:17.445
<v Speaker 0>over them,

00:25:18.059 --> 00:25:19.739
<v Speaker 0>sending a completion

00:25:21.659 --> 00:25:23.500
<v Speaker 0>to da Vinci o three which will change

00:25:23.500 --> 00:25:24.299
<v Speaker 0>the model.

00:25:25.019 --> 00:25:27.419
<v Speaker 0>We have a prompt to extract commands or

00:25:27.419 --> 00:25:30.059
<v Speaker 0>error messages from the text

00:25:29.995 --> 00:25:32.315
<v Speaker 0>with a print statement at the end. So

00:25:32.315 --> 00:25:35.114
<v Speaker 0>it's not filled everything, asked for a discriminator,

00:25:36.154 --> 00:25:37.434
<v Speaker 0>that was maybe a bit of a long

00:25:37.434 --> 00:25:39.914
<v Speaker 0>shot but we'll tweak it to our needs.

00:25:40.635 --> 00:25:42.794
<v Speaker 0>We do however want to use GPT four

00:25:42.794 --> 00:25:43.754
<v Speaker 0>turbo

00:25:43.995 --> 00:25:44.475
<v Speaker 0>preview.

00:25:45.670 --> 00:25:49.110
<v Speaker 0>Now this is using the completion API.

00:25:49.190 --> 00:25:51.670
<v Speaker 0>I'm not that familiar with OpenAI stuff, but

00:25:51.670 --> 00:25:52.710
<v Speaker 0>I know there's

00:25:53.350 --> 00:25:54.309
<v Speaker 1>instructions,

00:25:54.310 --> 00:25:55.910
<v Speaker 1>completions, and chat.

00:25:56.310 --> 00:25:58.150
<v Speaker 0>I felt maybe we just chat, but I

00:25:58.150 --> 00:25:59.510
<v Speaker 0>guess if this is a one time thing,

00:26:00.045 --> 00:26:01.645
<v Speaker 0>not a big deal and I really just

00:26:01.645 --> 00:26:02.925
<v Speaker 0>want to run this and see if it

00:26:02.925 --> 00:26:03.565
<v Speaker 0>works.

00:26:04.285 --> 00:26:06.045
<v Speaker 0>So we've changed the model because we need

00:26:06.045 --> 00:26:08.045
<v Speaker 0>to context size with the large amount of

00:26:08.045 --> 00:26:08.925
<v Speaker 0>max tokens.

00:26:10.605 --> 00:26:12.845
<v Speaker 0>Max token response I guess we're only asking

00:26:12.845 --> 00:26:15.005
<v Speaker 0>for this I'm going to bump this up.

00:26:15.950 --> 00:26:18.190
<v Speaker 0>I don't know what the normal value is,

00:26:18.190 --> 00:26:20.029
<v Speaker 0>but let's just throw it up anyway

00:26:20.830 --> 00:26:22.750
<v Speaker 0>and we'll print the batch and we'll see

00:26:22.750 --> 00:26:24.429
<v Speaker 0>what we get back from API.

00:26:24.750 --> 00:26:26.910
<v Speaker 0>No idea right now if this is going

00:26:26.910 --> 00:26:27.470
<v Speaker 0>to work.

00:26:31.075 --> 00:26:33.315
<v Speaker 0>Oh, so that's the bit I broke.

00:26:38.435 --> 00:26:39.715
<v Speaker 0>We run it again.

00:26:40.195 --> 00:26:42.035
<v Speaker 0>Okay. So

00:26:41.740 --> 00:26:44.539
<v Speaker 0>OpenAI completion is no longer supported.

00:26:45.659 --> 00:26:48.700
<v Speaker 0>We either have to downgrade or fix this

00:26:48.700 --> 00:26:51.340
<v Speaker 0>to use the correct API.

00:26:51.900 --> 00:26:54.460
<v Speaker 0>Okay, so just in the interest of time

00:26:55.054 --> 00:26:56.655
<v Speaker 0>and I'm not sure how up to date

00:26:56.655 --> 00:26:59.215
<v Speaker 0>GitLab Duo's code samples are,

00:26:59.934 --> 00:27:02.815
<v Speaker 0>I did just from the OpenAI docs grab

00:27:03.054 --> 00:27:03.774
<v Speaker 0>this.

00:27:05.695 --> 00:27:06.815
<v Speaker 0>But I know I said I wasn't gonna

00:27:06.815 --> 00:27:08.015
<v Speaker 0>write a line of code

00:27:08.370 --> 00:27:10.050
<v Speaker 0>but I'm just gonna make my life easier

00:27:10.050 --> 00:27:11.490
<v Speaker 0>for the next few minutes.

00:27:12.050 --> 00:27:15.809
<v Speaker 0>And we're gonna do from OpenAI import OpenAI.

00:27:15.810 --> 00:27:17.730
<v Speaker 0>And it feels from what we've seen in

00:27:17.730 --> 00:27:19.650
<v Speaker 0>the error message and what I've seen as

00:27:19.650 --> 00:27:20.850
<v Speaker 0>a quick giggle there,

00:27:21.170 --> 00:27:23.250
<v Speaker 0>just that this API has changed drastically

00:27:23.804 --> 00:27:26.284
<v Speaker 0>for the one point zero release.

00:27:26.845 --> 00:27:28.365
<v Speaker 0>And I don't feel it makes it too

00:27:28.365 --> 00:27:29.964
<v Speaker 0>difficult to forget that too.

00:27:31.085 --> 00:27:32.764
<v Speaker 0>But now that we have

00:27:34.205 --> 00:27:35.644
<v Speaker 0>the right import,

00:27:36.044 --> 00:27:38.764
<v Speaker 0>we can create our client

00:27:39.330 --> 00:27:40.450
<v Speaker 0>like so.

00:27:43.570 --> 00:27:45.010
<v Speaker 0>And if I had called us the right

00:27:45.010 --> 00:27:46.929
<v Speaker 0>key, I wouldn't have to actually do this,

00:27:46.929 --> 00:27:49.169
<v Speaker 0>but it might just open AI token

00:27:49.650 --> 00:27:52.130
<v Speaker 0>and we can remove this. And then we

00:27:52.130 --> 00:27:54.130
<v Speaker 0>have our completion code here.

00:27:55.705 --> 00:27:57.705
<v Speaker 0>So how close were we?

00:27:59.544 --> 00:28:00.344
<v Speaker 0>Client

00:28:01.304 --> 00:28:02.264
<v Speaker 0>chat.

00:28:02.424 --> 00:28:03.864
<v Speaker 0>Completions create

00:28:05.465 --> 00:28:06.264
<v Speaker 0>messages.

00:28:06.585 --> 00:28:09.145
<v Speaker 0>Alright. That's format's different.

00:28:09.919 --> 00:28:10.879
<v Speaker 0>Role

00:28:14.000 --> 00:28:14.879
<v Speaker 0>user

00:28:17.039 --> 00:28:18.159
<v Speaker 0>content

00:28:19.039 --> 00:28:20.239
<v Speaker 0>f string

00:28:23.280 --> 00:28:23.840
<v Speaker 0>like so.

00:28:25.575 --> 00:28:27.415
<v Speaker 0>And the model, we're not using that one

00:28:27.415 --> 00:28:28.614
<v Speaker 0>so that's okay.

00:28:29.095 --> 00:28:30.855
<v Speaker 0>And if we don't need to set that

00:28:30.855 --> 00:28:32.534
<v Speaker 0>then let's not bother.

00:28:34.294 --> 00:28:34.934
<v Speaker 0>And

00:28:35.415 --> 00:28:37.095
<v Speaker 0>we're gonna add a break here so we

00:28:37.095 --> 00:28:38.934
<v Speaker 0>just do one batch and see the response.

00:28:42.250 --> 00:28:44.889
<v Speaker 0>Let's see if that helps things along.

00:28:52.409 --> 00:28:52.809
<v Speaker 0>Oh.

00:28:59.005 --> 00:29:00.924
<v Speaker 0>Oh, come on. Give me some commands and

00:29:00.924 --> 00:29:01.565
<v Speaker 0>enter messages.

00:29:07.430 --> 00:29:08.310
<v Speaker 0>Alright.

00:29:08.390 --> 00:29:10.390
<v Speaker 0>Okay. I think I know what this is.

00:29:10.550 --> 00:29:13.110
<v Speaker 0>Now because we changed this API here,

00:29:14.550 --> 00:29:15.590
<v Speaker 0>I wonder

00:29:18.310 --> 00:29:20.390
<v Speaker 0>what the response is actually going to be.

00:29:21.625 --> 00:29:23.225
<v Speaker 0>Let's do what

00:29:23.225 --> 00:29:25.145
<v Speaker 0>I do remember. The only thing I remember

00:29:25.145 --> 00:29:26.744
<v Speaker 0>from my Python days

00:29:27.225 --> 00:29:28.905
<v Speaker 0>is that we could do a PP print

00:29:28.905 --> 00:29:31.225
<v Speaker 0>PP print response.

00:29:32.184 --> 00:29:34.264
<v Speaker 0>We'll just comment this line out just now.

00:29:34.424 --> 00:29:35.865
<v Speaker 0>I just want to know

00:29:36.649 --> 00:29:38.009
<v Speaker 0>what we're gonna get.

00:29:42.330 --> 00:29:43.289
<v Speaker 0>Alright.

00:29:44.890 --> 00:29:46.169
<v Speaker 0>We have stuff and things.

00:29:50.535 --> 00:29:52.215
<v Speaker 0>I mean, we can't in our message saying

00:29:52.215 --> 00:29:53.335
<v Speaker 0>that can't do what I want it to

00:29:53.335 --> 00:29:53.894
<v Speaker 0>do,

00:29:55.655 --> 00:29:57.655
<v Speaker 0>but we're gonna tweak our prompt. So we

00:29:57.655 --> 00:29:59.014
<v Speaker 0>got a chat completion,

00:29:59.255 --> 00:29:59.895
<v Speaker 0>choices,

00:30:00.630 --> 00:30:01.510
<v Speaker 0>choice,

00:30:05.030 --> 00:30:05.750
<v Speaker 0>message

00:30:05.910 --> 00:30:06.630
<v Speaker 0>contents.

00:30:13.544 --> 00:30:14.584
<v Speaker 0>Alright.

00:30:16.184 --> 00:30:17.945
<v Speaker 0>It looks like it's this,

00:30:18.105 --> 00:30:20.105
<v Speaker 0>the little and it's not text.

00:30:28.320 --> 00:30:30.480
<v Speaker 0>It is message

00:30:34.160 --> 00:30:35.200
<v Speaker 0>content.

00:30:35.919 --> 00:30:38.239
<v Speaker 0>And I guess we can do that.

00:30:40.000 --> 00:30:40.400
<v Speaker 0>Maybe.

00:30:41.545 --> 00:30:44.505
<v Speaker 0>Again, my Python is abysmal.

00:30:46.985 --> 00:30:49.305
<v Speaker 0>Okay. And then let's tweak the prompt so

00:30:49.305 --> 00:30:50.905
<v Speaker 0>we try not to get an error message.

00:30:50.905 --> 00:30:53.545
<v Speaker 0>So let's try and tell it what we

00:30:53.545 --> 00:30:55.705
<v Speaker 0>wanted to do is extract

00:30:56.640 --> 00:30:57.600
<v Speaker 0>anything

00:30:57.920 --> 00:31:00.559
<v Speaker 0>that looks like a Linux

00:31:00.880 --> 00:31:01.679
<v Speaker 0>command

00:31:04.080 --> 00:31:05.840
<v Speaker 0>or error message

00:31:05.840 --> 00:31:06.880
<v Speaker 0>from this text.

00:31:16.295 --> 00:31:18.295
<v Speaker 0>And it's already slow, which is a good

00:31:18.295 --> 00:31:20.295
<v Speaker 0>thing we didn't use this for the image

00:31:20.295 --> 00:31:21.414
<v Speaker 0>to text. Right?

00:31:22.695 --> 00:31:25.174
<v Speaker 0>Alright. So we still got that choices message.

00:31:25.255 --> 00:31:26.535
<v Speaker 0>So I wonder if we could just paste

00:31:26.535 --> 00:31:27.095
<v Speaker 0>that in.

00:31:30.929 --> 00:31:31.889
<v Speaker 0>Help me out.

00:31:33.809 --> 00:31:36.529
<v Speaker 0>What does how do I fix this?

00:31:55.225 --> 00:31:58.345
<v Speaker 0>Alright. So it says that this is happening

00:31:59.950 --> 00:32:01.710
<v Speaker 0>because it is an object. Oh, yeah. Okay.

00:32:01.710 --> 00:32:02.269
<v Speaker 0>So

00:32:05.070 --> 00:32:07.150
<v Speaker 0>choice is zero. And I wonder if that's

00:32:07.150 --> 00:32:08.429
<v Speaker 0>gonna be the yeah.

00:32:08.830 --> 00:32:09.629
<v Speaker 0>Message

00:32:11.870 --> 00:32:12.350
<v Speaker 0>content.

00:32:14.275 --> 00:32:15.075
<v Speaker 0>I could do.

00:32:27.120 --> 00:32:29.039
<v Speaker 0>I'm sorry, but I cannot execute our parts.

00:32:29.039 --> 00:32:30.399
<v Speaker 0>Linux commands are directly.

00:32:30.559 --> 00:32:32.320
<v Speaker 0>If you have specific questions or needs about

00:32:32.320 --> 00:32:34.880
<v Speaker 0>Linux commands, Kubernetes concept, or error message, feel

00:32:34.880 --> 00:32:35.839
<v Speaker 0>free to ask.

00:32:36.240 --> 00:32:38.880
<v Speaker 0>Alright. So it seems to be struggling oh,

00:32:38.880 --> 00:32:39.759
<v Speaker 0>execute.

00:32:39.760 --> 00:32:42.455
<v Speaker 0>I don't say execute. Ah, okay. So I

00:32:42.455 --> 00:32:43.095
<v Speaker 0>think

00:32:43.815 --> 00:32:45.575
<v Speaker 0>we've had some sort of

00:32:46.935 --> 00:32:48.375
<v Speaker 0>safety filter

00:32:48.935 --> 00:32:51.335
<v Speaker 0>where it thinks I wanted to execute commands.

00:32:51.335 --> 00:32:52.695
<v Speaker 0>So we're gonna change our language.

00:32:53.669 --> 00:32:55.909
<v Speaker 0>We'll give it more context. This

00:32:56.389 --> 00:32:58.229
<v Speaker 0>is the output

00:32:58.309 --> 00:32:58.949
<v Speaker 0>from

00:32:59.110 --> 00:33:00.309
<v Speaker 0>my terminal

00:33:00.549 --> 00:33:02.389
<v Speaker 0>after executing

00:33:03.350 --> 00:33:04.950
<v Speaker 0>some Linux

00:33:05.895 --> 00:33:06.695
<v Speaker 0>commands.

00:33:09.255 --> 00:33:11.895
<v Speaker 0>What was good is it it said Kubernetes

00:33:11.895 --> 00:33:14.135
<v Speaker 0>and we hadn't mentioned Kubernetes yet. So it's

00:33:14.135 --> 00:33:15.655
<v Speaker 0>definitely understanding what's going on.

00:33:26.720 --> 00:33:30.960
<v Speaker 0>Can you tell me what command

00:33:32.435 --> 00:33:33.795
<v Speaker 0>I executed

00:33:33.795 --> 00:33:36.434
<v Speaker 0>and what error messages

00:33:36.435 --> 00:33:38.755
<v Speaker 0>I received?

00:33:49.649 --> 00:33:50.370
<v Speaker 0>Take 20.

00:34:25.219 --> 00:34:27.139
<v Speaker 0>Feeling pretty positive about this one.

00:34:42.339 --> 00:34:43.380
<v Speaker 0>Awesome.

00:34:45.139 --> 00:34:45.940
<v Speaker 0>So

00:34:49.940 --> 00:34:50.580
<v Speaker 0>awesome.

00:34:52.260 --> 00:34:54.339
<v Speaker 0>Okay. So it's definitely doing what we want

00:34:54.339 --> 00:34:57.940
<v Speaker 0>now. We bypass that filter about executing command

00:34:57.940 --> 00:34:59.715
<v Speaker 0>and we've got a ton of information.

00:35:00.355 --> 00:35:01.474
<v Speaker 0>Let's see if we can get this in

00:35:01.474 --> 00:35:02.515
<v Speaker 0>a structured format.

00:35:13.010 --> 00:35:13.810
<v Speaker 0>Return

00:35:13.890 --> 00:35:15.010
<v Speaker 0>your answer

00:35:15.170 --> 00:35:16.930
<v Speaker 0>in a structured

00:35:18.450 --> 00:35:19.330
<v Speaker 0>JSON

00:35:19.570 --> 00:35:20.130
<v Speaker 0>format.

00:36:28.300 --> 00:36:29.740
<v Speaker 0>Oh, cool. Alright.

00:36:29.980 --> 00:36:32.380
<v Speaker 0>We have JSON, we got all the executed

00:36:32.380 --> 00:36:35.340
<v Speaker 0>commands and the outputs, which we didn't even

00:36:35.340 --> 00:36:35.900
<v Speaker 0>ask for.

00:36:36.954 --> 00:36:39.035
<v Speaker 0>We can see p s, a u x,

00:36:39.035 --> 00:36:41.275
<v Speaker 0>scrap it for API. We got the response.

00:36:41.275 --> 00:36:43.994
<v Speaker 0>We got kubectl describe daemon set cilium. We

00:36:43.994 --> 00:36:45.115
<v Speaker 0>get the response.

00:36:45.994 --> 00:36:47.835
<v Speaker 0>We got some system controls, and then we

00:36:47.835 --> 00:36:49.515
<v Speaker 0>have a whole bunch of error messages down

00:36:49.515 --> 00:36:49.755
<v Speaker 0>there.

00:36:50.960 --> 00:36:52.960
<v Speaker 0>That is phenomenal.

00:36:53.359 --> 00:36:56.400
<v Speaker 0>Thank you so much. GitLab Duo and OpenAI.

00:36:58.319 --> 00:36:59.040
<v Speaker 0>Okay.

00:37:00.319 --> 00:37:01.840
<v Speaker 0>Let's go back to

00:37:01.920 --> 00:37:04.160
<v Speaker 0>GitLab Duo. I need some more help.

00:37:06.055 --> 00:37:06.855
<v Speaker 0>I

00:37:08.215 --> 00:37:09.895
<v Speaker 0>need a function

00:37:12.775 --> 00:37:14.295
<v Speaker 0>that creates

00:37:14.295 --> 00:37:16.295
<v Speaker 0>an in memory

00:37:16.455 --> 00:37:18.375
<v Speaker 0>equal light database connection.

00:37:32.655 --> 00:37:35.775
<v Speaker 0>Alright. Let's put our import to the top.

00:37:41.455 --> 00:37:44.255
<v Speaker 0>Now we have a create memory database.

00:37:44.415 --> 00:37:45.135
<v Speaker 0>I'll take it.

00:37:46.020 --> 00:37:48.260
<v Speaker 0>It's telling me how to use the database,

00:37:48.260 --> 00:37:50.340
<v Speaker 0>so let's put this into our main bit

00:37:50.340 --> 00:37:51.300
<v Speaker 0>of code.

00:37:52.740 --> 00:37:53.540
<v Speaker 0>Before

00:37:53.700 --> 00:37:55.300
<v Speaker 0>we start our batching,

00:37:55.380 --> 00:37:57.780
<v Speaker 0>let's get our connection to the database.

00:37:59.925 --> 00:38:00.645
<v Speaker 0>Now,

00:38:01.205 --> 00:38:03.365
<v Speaker 0>I need a schema

00:38:04.165 --> 00:38:05.525
<v Speaker 0>to store

00:38:07.045 --> 00:38:07.845
<v Speaker 0>command

00:38:07.845 --> 00:38:09.845
<v Speaker 0>and their output

00:38:10.660 --> 00:38:11.860
<v Speaker 0>associated

00:38:11.860 --> 00:38:13.300
<v Speaker 0>with a live

00:38:13.380 --> 00:38:14.180
<v Speaker 0>stream.

00:38:14.660 --> 00:38:15.780
<v Speaker 0>Let's see what we get.

00:38:23.195 --> 00:38:24.955
<v Speaker 0>Alright. It looks like we're not getting the

00:38:24.955 --> 00:38:26.635
<v Speaker 0>schema in SQL format,

00:38:26.635 --> 00:38:27.915
<v Speaker 0>so let's follow-up.

00:38:29.115 --> 00:38:31.755
<v Speaker 0>And I have this in SQL.

00:38:32.555 --> 00:38:33.435
<v Speaker 0>Please and thank you.

00:38:40.170 --> 00:38:41.609
<v Speaker 0>Let's copy that.

00:38:43.369 --> 00:38:46.410
<v Speaker 0>Let's just store this in main dot SQL.

00:38:47.835 --> 00:38:49.675
<v Speaker 0>Now it's already inserted and we don't need

00:38:49.675 --> 00:38:50.635
<v Speaker 0>an insert.

00:38:50.715 --> 00:38:52.715
<v Speaker 0>It's actually not give us any information about

00:38:52.715 --> 00:38:53.755
<v Speaker 0>a livestream.

00:38:54.555 --> 00:38:57.275
<v Speaker 0>I would like the command

00:38:59.115 --> 00:39:00.235
<v Speaker 0>associated

00:39:00.475 --> 00:39:02.315
<v Speaker 0>by foreign key

00:39:03.580 --> 00:39:04.619
<v Speaker 0>to livestream.

00:39:16.005 --> 00:39:18.405
<v Speaker 0>Alright. Let's grab our new version.

00:39:18.885 --> 00:39:20.565
<v Speaker 0>So now we have a livestream,

00:39:20.565 --> 00:39:22.724
<v Speaker 0>which has an ID, a name, a start

00:39:22.724 --> 00:39:24.405
<v Speaker 0>and end time. Perfect.

00:39:27.045 --> 00:39:28.885
<v Speaker 0>And we have command,

00:39:30.210 --> 00:39:33.250
<v Speaker 0>primary key, integers, date, title, etcetera. So now

00:39:33.250 --> 00:39:35.170
<v Speaker 0>we have a valid schema.

00:39:38.850 --> 00:39:40.210
<v Speaker 0>Let's write this

00:39:41.090 --> 00:39:43.010
<v Speaker 0>to our database connection.

00:39:44.385 --> 00:39:47.185
<v Speaker 0>How do I apply my

00:39:47.345 --> 00:39:48.305
<v Speaker 0>schema,

00:39:48.865 --> 00:39:49.985
<v Speaker 0>which I've

00:39:49.985 --> 00:39:50.785
<v Speaker 0>stored

00:39:50.785 --> 00:39:52.625
<v Speaker 0>in main dot SQL

00:39:52.865 --> 00:39:54.945
<v Speaker 0>to the in memory

00:39:55.105 --> 00:39:55.985
<v Speaker 0>SQLite

00:39:55.985 --> 00:39:56.785
<v Speaker 0>connection?

00:40:15.035 --> 00:40:17.915
<v Speaker 0>Alright. So the bit we need is command

00:40:18.154 --> 00:40:20.234
<v Speaker 0>execute web are open.

00:40:22.954 --> 00:40:23.835
<v Speaker 0>Like so.

00:40:24.075 --> 00:40:25.755
<v Speaker 0>So we open the file, we read it

00:40:25.755 --> 00:40:27.355
<v Speaker 0>in, and we do an execute.

00:40:28.920 --> 00:40:29.640
<v Speaker 0>Perfect.

00:40:31.960 --> 00:40:33.480
<v Speaker 0>Now what we want to do

00:40:35.400 --> 00:40:38.600
<v Speaker 0>is parse this response instead of printing it

00:40:38.920 --> 00:40:40.599
<v Speaker 0>and generate

00:40:41.105 --> 00:40:42.545
<v Speaker 0>inserts and text

00:40:43.025 --> 00:40:45.265
<v Speaker 0>to our database. How hard can that be?

00:40:46.224 --> 00:40:46.945
<v Speaker 0>Well,

00:40:47.265 --> 00:40:49.665
<v Speaker 0>when we printed out this, I noticed that

00:40:49.665 --> 00:40:53.345
<v Speaker 0>we got a markdown style wrapper on our

00:40:53.345 --> 00:40:53.825
<v Speaker 0>JSON.

00:40:54.450 --> 00:40:56.850
<v Speaker 0>We'll write a Python function

00:40:58.050 --> 00:40:59.490
<v Speaker 0>to remove

00:41:00.290 --> 00:41:02.690
<v Speaker 0>da da da code block

00:41:03.089 --> 00:41:07.170
<v Speaker 0>from a string. The code block

00:41:06.705 --> 00:41:07.505
<v Speaker 0>may

00:41:07.745 --> 00:41:08.785
<v Speaker 0>contain

00:41:09.105 --> 00:41:10.385
<v Speaker 0>a language

00:41:10.465 --> 00:41:12.065
<v Speaker 0>such as JSON.

00:41:12.945 --> 00:41:14.385
<v Speaker 0>This should be removed too.

00:41:53.690 --> 00:41:55.690
<v Speaker 0>Alright. So we got two Verition.

00:41:57.365 --> 00:41:59.845
<v Speaker 0>That's removing the entire block.

00:42:01.045 --> 00:42:02.645
<v Speaker 0>Yeah. We don't want to remove the entire

00:42:02.645 --> 00:42:03.525
<v Speaker 0>code block.

00:42:04.085 --> 00:42:05.365
<v Speaker 0>I want

00:42:05.525 --> 00:42:06.805
<v Speaker 0>the code,

00:42:07.845 --> 00:42:09.285
<v Speaker 0>but not the wrapper.

00:42:10.490 --> 00:42:12.490
<v Speaker 0>Please just remove

00:42:12.650 --> 00:42:14.170
<v Speaker 0>the the the JSON

00:42:14.490 --> 00:42:16.329
<v Speaker 0>and the the the from

00:42:16.329 --> 00:42:16.970
<v Speaker 0>the end.

00:42:29.595 --> 00:42:31.195
<v Speaker 0>I'll take it. Alright.

00:42:32.474 --> 00:42:34.315
<v Speaker 0>So let's put this new function

00:42:34.795 --> 00:42:37.035
<v Speaker 0>towards the top

00:42:36.410 --> 00:42:38.890
<v Speaker 0>and move our import further up.

00:42:40.090 --> 00:42:43.130
<v Speaker 0>I'm not entirely convinced this is correct, I

00:42:43.130 --> 00:42:45.130
<v Speaker 0>need this code to be tested.

00:42:45.530 --> 00:42:46.090
<v Speaker 0>So

00:42:46.970 --> 00:42:48.730
<v Speaker 0>let's select it

00:42:49.945 --> 00:42:51.545
<v Speaker 0>and say give me

00:42:52.265 --> 00:42:52.665
<v Speaker 0>test.

00:43:01.400 --> 00:43:03.080
<v Speaker 0>And it looks like we have a whole

00:43:03.080 --> 00:43:05.240
<v Speaker 0>bunch. Let's call this

00:43:06.200 --> 00:43:07.880
<v Speaker 0>code wrapper

00:43:08.520 --> 00:43:09.960
<v Speaker 0>test dot py.

00:43:12.040 --> 00:43:14.040
<v Speaker 0>Well, important to bet

00:43:14.424 --> 00:43:17.385
<v Speaker 0>is running a test against JSON

00:43:17.865 --> 00:43:18.984
<v Speaker 0>hello world.

00:43:21.944 --> 00:43:23.385
<v Speaker 0>Let's make sure it takes them off the

00:43:23.385 --> 00:43:24.345
<v Speaker 0>end too.

00:43:25.704 --> 00:43:27.464
<v Speaker 0>Or not, it's got test cases for that.

00:43:27.464 --> 00:43:29.145
<v Speaker 0>Okay. Remove opening tag.

00:43:29.619 --> 00:43:31.540
<v Speaker 0>That's pretty neat. The fact that we got

00:43:31.619 --> 00:43:33.380
<v Speaker 0>actually, it hasn't just written a bunch of

00:43:33.380 --> 00:43:35.540
<v Speaker 0>tests. It's written specific tests.

00:43:36.020 --> 00:43:38.020
<v Speaker 0>So we got opening tag,

00:43:38.260 --> 00:43:39.700
<v Speaker 0>closing tag,

00:43:40.980 --> 00:43:42.180
<v Speaker 0>both tag,

00:43:42.420 --> 00:43:43.220
<v Speaker 0>no tags.

00:43:46.035 --> 00:43:46.675
<v Speaker 0>Perfect.

00:43:46.995 --> 00:43:49.395
<v Speaker 0>Okay. So let's bring back our code and

00:43:49.395 --> 00:43:50.995
<v Speaker 0>now what we want to do

00:43:51.795 --> 00:43:52.595
<v Speaker 0>is

00:43:53.715 --> 00:43:55.475
<v Speaker 0>call remove code wrappers.

00:43:57.310 --> 00:43:58.670
<v Speaker 0>Our response

00:44:00.510 --> 00:44:02.190
<v Speaker 0>so that we get

00:44:02.670 --> 00:44:04.350
<v Speaker 0>some sort of JSON

00:44:06.270 --> 00:44:06.829
<v Speaker 0>like so.

00:44:08.895 --> 00:44:11.855
<v Speaker 0>How do I parse JSON

00:44:11.855 --> 00:44:12.975
<v Speaker 0>to a dict

00:44:13.295 --> 00:44:13.935
<v Speaker 0>in Python?

00:44:26.360 --> 00:44:28.520
<v Speaker 0>JSON Lloyd. Thank you very much.

00:44:29.960 --> 00:44:31.320
<v Speaker 0>So now

00:44:33.174 --> 00:44:35.255
<v Speaker 0>parses and we probably should call it JSON.

00:44:35.255 --> 00:44:37.335
<v Speaker 0>I'm sure there's an import JSON.

00:44:37.895 --> 00:44:38.615
<v Speaker 0>Yeah.

00:44:39.414 --> 00:44:40.775
<v Speaker 0>So let's import JSON.

00:44:45.830 --> 00:44:48.870
<v Speaker 0>And now we can print our deck data

00:44:48.950 --> 00:44:50.310
<v Speaker 0>which should have

00:44:51.510 --> 00:44:53.750
<v Speaker 0>you know what? Don't remember. Let's run.

00:44:55.590 --> 00:44:57.030
<v Speaker 0>Well, we don't want to run our TET.

00:44:58.455 --> 00:45:00.935
<v Speaker 0>Alright. So our output gives us a list

00:45:00.935 --> 00:45:02.855
<v Speaker 0>under executed command.

00:45:04.615 --> 00:45:05.255
<v Speaker 0>So

00:45:06.935 --> 00:45:08.295
<v Speaker 0>let's copy this structure.

00:45:12.150 --> 00:45:13.510
<v Speaker 0>Alright. Let's

00:45:13.670 --> 00:45:16.310
<v Speaker 0>get some help writing this to our SQLite.

00:45:19.350 --> 00:45:20.390
<v Speaker 0>Let's see.

00:45:20.790 --> 00:45:21.190
<v Speaker 0>Assuming

00:45:22.925 --> 00:45:24.765
<v Speaker 0>the following JSON

00:45:25.165 --> 00:45:26.125
<v Speaker 0>payload.

00:45:26.765 --> 00:45:29.005
<v Speaker 0>Right? A Python function

00:45:29.005 --> 00:45:30.845
<v Speaker 0>to look over

00:45:30.925 --> 00:45:31.965
<v Speaker 0>executed

00:45:32.445 --> 00:45:34.445
<v Speaker 0>command and insert

00:45:34.445 --> 00:45:35.565
<v Speaker 0>the command

00:45:35.565 --> 00:45:39.085
<v Speaker 0>into a SQL

00:45:37.329 --> 00:45:38.210
<v Speaker 0>ite

00:45:38.690 --> 00:45:39.490
<v Speaker 0>table.

00:45:41.490 --> 00:45:43.170
<v Speaker 0>Alright. What have we got?

00:45:46.369 --> 00:45:48.210
<v Speaker 0>Oh, we already have a connection.

00:45:58.244 --> 00:45:59.605
<v Speaker 0>Before command

00:46:00.165 --> 00:46:02.485
<v Speaker 0>and our deck data, execute a command.

00:46:03.120 --> 00:46:05.840
<v Speaker 0>Insert into commands command. Let's just check our

00:46:05.840 --> 00:46:06.720
<v Speaker 0>schema.

00:46:07.520 --> 00:46:09.520
<v Speaker 0>Commands command. Perfect.

00:46:10.240 --> 00:46:11.280
<v Speaker 0>Values

00:46:12.080 --> 00:46:12.960
<v Speaker 0>command.

00:46:13.680 --> 00:46:14.480
<v Speaker 0>Commit

00:46:15.120 --> 00:46:15.680
<v Speaker 0>and close.

00:46:16.865 --> 00:46:18.704
<v Speaker 0>Alright. Now we wanna be able to confirm

00:46:18.704 --> 00:46:20.305
<v Speaker 0>this, so we're gonna make one more change

00:46:20.305 --> 00:46:21.425
<v Speaker 0>to our script.

00:46:24.145 --> 00:46:26.145
<v Speaker 0>Change this connection

00:46:26.145 --> 00:46:27.425
<v Speaker 0>from memory

00:46:27.425 --> 00:46:28.545
<v Speaker 0>to local

00:46:28.545 --> 00:46:29.025
<v Speaker 0>file.

00:46:39.559 --> 00:46:41.160
<v Speaker 0>Let's see how far we get.

00:46:41.559 --> 00:46:42.520
<v Speaker 0>Python

00:46:43.095 --> 00:46:43.575
<v Speaker 0>open.

00:47:27.350 --> 00:47:28.230
<v Speaker 0>Don't.

00:47:29.910 --> 00:47:33.030
<v Speaker 0>What'd I get? What'd get? Oh, it's con.

00:47:33.430 --> 00:47:34.310
<v Speaker 0>Con. Con. Con.

00:47:39.255 --> 00:47:41.095
<v Speaker 0>Oh, no. It's because

00:47:41.175 --> 00:47:42.455
<v Speaker 0>this creates

00:47:43.895 --> 00:47:46.375
<v Speaker 0>cursor. And I didn't think that was important.

00:47:46.455 --> 00:47:47.815
<v Speaker 0>My fault, GitLab.

00:47:48.615 --> 00:47:49.495
<v Speaker 0>My apologies.

00:47:50.559 --> 00:47:51.440
<v Speaker 0>One last try.

00:49:00.545 --> 00:49:02.225
<v Speaker 0>Let's open Beekeeper Studio,

00:49:09.130 --> 00:49:11.130
<v Speaker 0>Or we can say SQLite.

00:49:12.490 --> 00:49:13.450
<v Speaker 0>Here's file.

00:49:20.635 --> 00:49:23.595
<v Speaker 0>Navigate my huge directory structure.

00:49:26.875 --> 00:49:28.715
<v Speaker 0>Video enrichment server.

00:49:30.955 --> 00:49:31.835
<v Speaker 0>RamesDB.

00:49:35.210 --> 00:49:36.330
<v Speaker 0>Open command,

00:49:37.930 --> 00:49:39.210
<v Speaker 0>and there we have it.

00:49:39.930 --> 00:49:40.810
<v Speaker 0>Awesome.

00:49:42.010 --> 00:49:43.450
<v Speaker 0>So that was a journey,

00:49:44.330 --> 00:49:47.265
<v Speaker 0>but I barely wrote a single line of

00:49:47.265 --> 00:49:47.905
<v Speaker 0>code.

00:49:49.185 --> 00:49:50.785
<v Speaker 0>Using GitLab Duo,

00:49:51.185 --> 00:49:53.265
<v Speaker 0>we were able to write a ton of

00:49:53.265 --> 00:49:54.225
<v Speaker 0>Python code.

00:49:54.945 --> 00:49:57.425
<v Speaker 0>First, processing a video file

00:49:57.780 --> 00:50:01.140
<v Speaker 0>and saving all the frames as JPEGs.

00:50:03.620 --> 00:50:06.180
<v Speaker 0>We then looked over all those JPEGs

00:50:06.180 --> 00:50:07.220
<v Speaker 0>extracting

00:50:07.300 --> 00:50:08.100
<v Speaker 0>the text.

00:50:09.795 --> 00:50:11.875
<v Speaker 0>We sent this text to OpenAI

00:50:11.875 --> 00:50:13.875
<v Speaker 0>where it classified commands

00:50:13.875 --> 00:50:16.675
<v Speaker 0>and error messages as well as the output

00:50:16.675 --> 00:50:18.035
<v Speaker 0>for the commands,

00:50:18.515 --> 00:50:20.035
<v Speaker 0>which we didn't even ask it to do.

00:50:21.570 --> 00:50:24.770
<v Speaker 0>GitLab Duo then wrote test cases for functions

00:50:24.770 --> 00:50:27.330
<v Speaker 0>that parsed and removed code block

00:50:27.730 --> 00:50:30.210
<v Speaker 0>and provided a database schema

00:50:31.090 --> 00:50:34.370
<v Speaker 0>and inserted our data into the database for

00:50:34.370 --> 00:50:34.690
<v Speaker 0>us.

00:50:37.335 --> 00:50:39.895
<v Speaker 0>Not bad for under a never's work.

00:50:40.215 --> 00:50:43.095
<v Speaker 0>That is a fairly chunky task made easy

00:50:43.175 --> 00:50:45.415
<v Speaker 0>by the power of AI

00:50:45.735 --> 00:50:46.935
<v Speaker 0>and GitLab Duo.

00:50:48.660 --> 00:50:49.780
<v Speaker 0>So go forth.

00:50:51.300 --> 00:50:53.780
<v Speaker 0>Get yourself some GitLab Duo and make your

00:50:53.780 --> 00:50:55.300
<v Speaker 0>life a whole lot easier.

00:50:55.780 --> 00:50:56.580
<v Speaker 0>Have a great day.
