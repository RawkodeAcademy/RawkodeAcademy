WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 4ae02122-7147-4976-87ec-a27a007585a1
Created: 2025-04-29T14:15:37.576Z
Duration: 1250.9352
Channels: 1

00:00:56.545 --> 00:00:57.265
<v Speaker 0>Hello.

00:00:57.905 --> 00:01:00.625
<v Speaker 0>Welcome to this video slash livestream depending on

00:01:00.625 --> 00:01:01.265
<v Speaker 0>when you're watching.

00:01:01.860 --> 00:01:03.300
<v Speaker 0>Where we are gonna take a look at

00:01:03.300 --> 00:01:07.140
<v Speaker 0>building our own WebAssembly cloud using the Fermion

00:01:07.140 --> 00:01:08.020
<v Speaker 0>platform.

00:01:09.460 --> 00:01:11.860
<v Speaker 0>So first, welcome back to the Rawkode Academy.

00:01:11.860 --> 00:01:14.020
<v Speaker 0>I'm your host, David Flanagan, although I go

00:01:14.020 --> 00:01:15.940
<v Speaker 0>by the handle Rawkode across the Internet.

00:01:16.805 --> 00:01:19.445
<v Speaker 0>This course is kindly sponsored by Fermion.

00:01:19.525 --> 00:01:21.925
<v Speaker 0>Spin is a really cool framework for writing

00:01:21.925 --> 00:01:22.725
<v Speaker 0>microservices

00:01:22.725 --> 00:01:25.605
<v Speaker 0>and fill application composed of microservices

00:01:25.605 --> 00:01:27.605
<v Speaker 0>using WebAssembly technologies.

00:01:27.605 --> 00:01:29.525
<v Speaker 0>And Fermion are at the forefront of that

00:01:29.525 --> 00:01:31.205
<v Speaker 0>and this is gonna be fun.

00:01:32.110 --> 00:01:34.430
<v Speaker 0>So in order to get started,

00:01:35.710 --> 00:01:37.710
<v Speaker 0>we'll pop up my screen share. And I

00:01:37.710 --> 00:01:39.310
<v Speaker 0>wanna set just a small

00:01:39.950 --> 00:01:41.630
<v Speaker 0>little bit of context

00:01:41.870 --> 00:01:42.750
<v Speaker 0>into

00:01:42.990 --> 00:01:44.350
<v Speaker 0>Fermion cloud.

00:01:45.150 --> 00:01:48.104
<v Speaker 0>And then we'll look at hosting our own.

00:01:49.305 --> 00:01:52.265
<v Speaker 0>So I've kind of prepared a very simple

00:01:53.145 --> 00:01:54.505
<v Speaker 0>spin application.

00:01:55.305 --> 00:01:57.704
<v Speaker 0>And in fact, when I say prepared, I

00:01:57.704 --> 00:02:00.299
<v Speaker 0>used spend new to generate the template that

00:02:00.299 --> 00:02:02.299
<v Speaker 0>gives us a hello world application.

00:02:03.020 --> 00:02:04.700
<v Speaker 0>Let me bump that font size up because

00:02:04.700 --> 00:02:07.020
<v Speaker 0>I was coding earlier, which is quite smaller,

00:02:08.300 --> 00:02:09.740
<v Speaker 0>which is print hello world.

00:02:10.940 --> 00:02:13.340
<v Speaker 0>I've already ran, spend build,

00:02:13.660 --> 00:02:14.940
<v Speaker 0>but we can do it one more time.

00:02:16.195 --> 00:02:17.955
<v Speaker 0>And we can use spend deploy

00:02:18.275 --> 00:02:21.075
<v Speaker 0>to push this to Fermion cloud, which for

00:02:21.075 --> 00:02:22.515
<v Speaker 0>now is free.

00:02:22.755 --> 00:02:24.435
<v Speaker 0>So you get to deploy up to five

00:02:24.435 --> 00:02:27.235
<v Speaker 0>applications on Fermion cloud, kick the tires on

00:02:27.235 --> 00:02:29.155
<v Speaker 0>it, doesn't cost you a single penny.

00:02:29.950 --> 00:02:32.030
<v Speaker 0>Now because this is already deployed,

00:02:32.030 --> 00:02:33.790
<v Speaker 0>we don't really need to wait for this.

00:02:34.270 --> 00:02:36.190
<v Speaker 0>Instead, I can just come back to here

00:02:36.830 --> 00:02:38.510
<v Speaker 0>and I can see that the app the

00:02:38.510 --> 00:02:40.270
<v Speaker 0>URL for this demo application

00:02:41.485 --> 00:02:43.885
<v Speaker 0>gives us an internal server,

00:02:44.444 --> 00:02:46.605
<v Speaker 0>which is probably because I just redeployed it.

00:02:47.405 --> 00:02:49.325
<v Speaker 0>But if we refresh it, we get hello

00:02:49.325 --> 00:02:50.285
<v Speaker 0>fermion.

00:02:50.925 --> 00:02:51.965
<v Speaker 0>And that's it.

00:02:52.765 --> 00:02:53.724
<v Speaker 0>Spend you

00:02:54.189 --> 00:02:56.750
<v Speaker 0>Rust code or JavaScript code, maybe some go

00:02:56.750 --> 00:02:58.590
<v Speaker 0>code, maybe some dot net, maybe some Python.

00:02:58.590 --> 00:03:00.670
<v Speaker 0>You know what? With web assembly, doesn't matter.

00:03:00.670 --> 00:03:02.590
<v Speaker 0>Right? In a language that you enjoy writing

00:03:02.590 --> 00:03:03.150
<v Speaker 0>in.

00:03:03.790 --> 00:03:06.109
<v Speaker 0>We build it, we deploy it, all good.

00:03:07.935 --> 00:03:09.135
<v Speaker 0>But what if we want to run it

00:03:09.135 --> 00:03:09.855
<v Speaker 0>ourselves?

00:03:10.174 --> 00:03:12.175
<v Speaker 0>And this is where I think fermion

00:03:12.415 --> 00:03:14.015
<v Speaker 0>gets really interesting.

00:03:14.974 --> 00:03:18.254
<v Speaker 0>Is that nothing fermion are doing is closed

00:03:18.254 --> 00:03:21.150
<v Speaker 0>source, Everything is available and they open.

00:03:21.310 --> 00:03:23.790
<v Speaker 0>And in fact, even Fermion Cloud is just

00:03:23.790 --> 00:03:26.270
<v Speaker 0>a collection of components, which are also open

00:03:26.270 --> 00:03:26.990
<v Speaker 0>source.

00:03:27.870 --> 00:03:31.710
<v Speaker 0>And you can go to github.com/fermion/installer,

00:03:32.355 --> 00:03:35.315
<v Speaker 0>where you will find Terraform automation to run

00:03:35.315 --> 00:03:38.435
<v Speaker 0>your own little fermion cloud on Amazon,

00:03:38.435 --> 00:03:39.235
<v Speaker 0>Azure,

00:03:39.394 --> 00:03:40.195
<v Speaker 0>Civo,

00:03:40.435 --> 00:03:42.115
<v Speaker 0>Digital Ocean, GCP,

00:03:42.754 --> 00:03:44.194
<v Speaker 0>and come in soon, and you'll see the

00:03:44.194 --> 00:03:45.235
<v Speaker 0>demo on Tuesday,

00:03:45.730 --> 00:03:46.850
<v Speaker 0>Equinix Medal.

00:03:47.090 --> 00:03:48.930
<v Speaker 0>Because well, I wanted to do some hacking

00:03:48.930 --> 00:03:50.290
<v Speaker 0>and I've got a cool demo for you

00:03:50.290 --> 00:03:51.010
<v Speaker 0>next week.

00:03:51.490 --> 00:03:53.090
<v Speaker 0>So we're

00:03:53.090 --> 00:03:55.490
<v Speaker 0>gonna take this automation and

00:03:55.490 --> 00:03:57.090
<v Speaker 0>I'm gonna use the newest one,

00:03:57.825 --> 00:03:59.585
<v Speaker 0>which I know is a bit risky, but,

00:03:59.585 --> 00:04:00.945
<v Speaker 0>you know, Siam who we all know in

00:04:00.945 --> 00:04:02.225
<v Speaker 0>the cloud data space,

00:04:02.545 --> 00:04:05.025
<v Speaker 0>who also works for SIVO, put together the

00:04:05.025 --> 00:04:08.625
<v Speaker 0>Terraform to deploy the Fermion platform to SIVO

00:04:08.625 --> 00:04:08.945
<v Speaker 0>Cloud.

00:04:11.280 --> 00:04:14.240
<v Speaker 0>So I have this cloned locally and you'll

00:04:14.240 --> 00:04:17.040
<v Speaker 0>see that I'm inside the civil directory which

00:04:17.040 --> 00:04:18.560
<v Speaker 0>has a read me

00:04:19.279 --> 00:04:21.360
<v Speaker 0>if you really want to read it. Or

00:04:21.360 --> 00:04:22.800
<v Speaker 0>you can just do what I like to

00:04:22.800 --> 00:04:25.075
<v Speaker 0>do, Which is go straight into the Terraform

00:04:25.075 --> 00:04:25.955
<v Speaker 0>directory

00:04:26.435 --> 00:04:28.035
<v Speaker 0>and run Terraform edit.

00:04:29.315 --> 00:04:31.635
<v Speaker 0>This will pull down all the Terraform plugins

00:04:31.635 --> 00:04:34.115
<v Speaker 0>that we need to do this deployment.

00:04:34.835 --> 00:04:37.715
<v Speaker 0>I have already exported my SIBO token

00:04:37.875 --> 00:04:38.915
<v Speaker 0>and to this environment

00:04:39.530 --> 00:04:40.330
<v Speaker 0>hopefully.

00:04:40.810 --> 00:04:42.810
<v Speaker 0>So I should be able to run terraform

00:04:42.810 --> 00:04:43.530
<v Speaker 0>apply,

00:04:44.010 --> 00:04:46.570
<v Speaker 0>which is going to spin up a instance.

00:04:46.570 --> 00:04:48.170
<v Speaker 0>We can just quickly run through some of

00:04:48.170 --> 00:04:48.650
<v Speaker 0>this.

00:04:49.610 --> 00:04:50.330
<v Speaker 0>Yep.

00:04:51.210 --> 00:04:53.530
<v Speaker 0>We shall spin up a firewall first

00:04:53.794 --> 00:04:55.875
<v Speaker 0>allowing some ports pretty

00:04:56.514 --> 00:04:58.915
<v Speaker 0>everything's pretty available. I don't look at it.

00:04:59.155 --> 00:05:01.555
<v Speaker 0>A stable instance, which we have some custom

00:05:01.555 --> 00:05:03.555
<v Speaker 0>user data, which we may or may not

00:05:03.555 --> 00:05:06.470
<v Speaker 0>go through. And then we have the IP

00:05:06.470 --> 00:05:09.510
<v Speaker 0>assignment, the network, the reserved IP and SSH

00:05:09.510 --> 00:05:11.030
<v Speaker 0>key pair around the password blah blah blah

00:05:11.030 --> 00:05:11.430
<v Speaker 0>blah.

00:05:12.230 --> 00:05:14.070
<v Speaker 0>Pretty much for a position where we just

00:05:14.070 --> 00:05:16.230
<v Speaker 0>wanna hit yes and say go.

00:05:17.190 --> 00:05:19.270
<v Speaker 0>So while this spends up because it will

00:05:19.270 --> 00:05:21.750
<v Speaker 0>take probably around one to two minutes,

00:05:22.735 --> 00:05:24.975
<v Speaker 0>We'll take a look at that automation.

00:05:28.175 --> 00:05:28.975
<v Speaker 0>Probably

00:05:29.295 --> 00:05:30.815
<v Speaker 0>should pop this open.

00:05:32.495 --> 00:05:33.855
<v Speaker 0>Watch approval. Thank you.

00:05:37.210 --> 00:05:40.330
<v Speaker 0>And actually, we need a few directories up.

00:05:40.970 --> 00:05:42.890
<v Speaker 0>So let's do a code.

00:05:43.690 --> 00:05:44.090
<v Speaker 0>Now

00:05:46.330 --> 00:05:48.810
<v Speaker 0>each of these implementations for AWS,

00:05:48.810 --> 00:05:52.085
<v Speaker 0>GCP, Digital Ocean, etcetera, really just handle the

00:05:52.085 --> 00:05:55.365
<v Speaker 0>provisioning of the the instance, the network, the

00:05:55.365 --> 00:05:57.765
<v Speaker 0>firewalls, and then also use the data

00:05:57.765 --> 00:06:00.485
<v Speaker 0>is provided at this top level directory

00:06:00.485 --> 00:06:02.405
<v Speaker 0>called share and then Terraform.

00:06:03.620 --> 00:06:05.940
<v Speaker 0>We have a VM assets folder, which the

00:06:05.940 --> 00:06:08.500
<v Speaker 0>file provisioner will actually just SCP onto the

00:06:08.500 --> 00:06:09.620
<v Speaker 0>machine for you,

00:06:10.100 --> 00:06:12.420
<v Speaker 0>which contains a bunch of nomad jobs.

00:06:13.060 --> 00:06:15.940
<v Speaker 0>But before it gets to that, it runs

00:06:16.100 --> 00:06:17.220
<v Speaker 0>the startup script.

00:06:19.275 --> 00:06:21.035
<v Speaker 0>No, I guess now is a good time

00:06:21.035 --> 00:06:23.755
<v Speaker 0>to understand which components make up the fermion

00:06:23.755 --> 00:06:25.435
<v Speaker 0>cloud or fermion platform.

00:06:26.074 --> 00:06:28.795
<v Speaker 0>One, there's HEPL from Dezlabs.

00:06:30.155 --> 00:06:31.195
<v Speaker 0>Dezlabs.

00:06:36.080 --> 00:06:37.040
<v Speaker 0>Thanks, Hugh.

00:06:37.520 --> 00:06:40.319
<v Speaker 0>This is a project for running web assembly.

00:06:40.319 --> 00:06:43.199
<v Speaker 0>It's open source. It's still actively maintained. It's

00:06:43.199 --> 00:06:46.159
<v Speaker 0>being worked on as experimental warning, but of

00:06:46.159 --> 00:06:48.319
<v Speaker 0>course all the best projects do. Right?

00:06:49.595 --> 00:06:51.435
<v Speaker 0>So you can run HEPL and

00:06:51.675 --> 00:06:54.475
<v Speaker 0>you can ask it to run WebAssembly binaries

00:06:54.475 --> 00:06:55.275
<v Speaker 0>for you.

00:06:56.155 --> 00:06:59.195
<v Speaker 0>Another part of the platform is Bundle also

00:06:59.195 --> 00:07:00.794
<v Speaker 0>by Daislabs.

00:07:01.580 --> 00:07:02.940
<v Speaker 0>And Bundle

00:07:02.940 --> 00:07:06.140
<v Speaker 0>is an object store for WebAssembly modules.

00:07:07.500 --> 00:07:10.540
<v Speaker 0>Now will we still be using Bundle in

00:07:10.860 --> 00:07:13.420
<v Speaker 0>three months, six months, nine months? I'm not

00:07:13.420 --> 00:07:14.220
<v Speaker 0>entirely sure.

00:07:14.925 --> 00:07:17.965
<v Speaker 0>Why? Well, go check out the Spin watch

00:07:17.965 --> 00:07:21.165
<v Speaker 0>new 0.8 video that I released last week.

00:07:22.525 --> 00:07:23.325
<v Speaker 0>Fermion

00:07:23.325 --> 00:07:27.325
<v Speaker 0>have added support for OCI registry for WebAssembly

00:07:27.325 --> 00:07:28.365
<v Speaker 0>and Spin applications.

00:07:29.550 --> 00:07:31.550
<v Speaker 0>So you can now just do a spin

00:07:31.550 --> 00:07:32.830
<v Speaker 0>OCI push

00:07:33.150 --> 00:07:35.790
<v Speaker 0>and your spin application will be available via

00:07:35.790 --> 00:07:38.430
<v Speaker 0>gapp container registry, docker registry,

00:07:38.430 --> 00:07:40.750
<v Speaker 0>Google container registry and so forth.

00:07:41.070 --> 00:07:43.145
<v Speaker 0>So where is Bendel in this? I'm not

00:07:43.145 --> 00:07:43.625
<v Speaker 0>sure.

00:07:44.025 --> 00:07:45.944
<v Speaker 0>It may be that it takes a backseat

00:07:45.944 --> 00:07:48.665
<v Speaker 0>for something that is more generic and

00:07:48.824 --> 00:07:50.905
<v Speaker 0>something that we're already using for our container

00:07:50.905 --> 00:07:51.785
<v Speaker 0>applications.

00:07:51.785 --> 00:07:54.425
<v Speaker 0>This opens up a really cool potential for

00:07:54.425 --> 00:07:57.785
<v Speaker 0>having our WASM and our container Linux based

00:07:57.785 --> 00:08:00.020
<v Speaker 0>applications running side by side.

00:08:02.020 --> 00:08:04.180
<v Speaker 0>The bundle and HEPL make up the main

00:08:04.180 --> 00:08:06.100
<v Speaker 0>chunk of what we need to build a

00:08:06.100 --> 00:08:07.620
<v Speaker 0>WebAssembly platform.

00:08:07.620 --> 00:08:10.340
<v Speaker 0>However, we still need to schedule these workloads.

00:08:11.220 --> 00:08:14.020
<v Speaker 0>Now there is some really cool work happening

00:08:14.235 --> 00:08:15.115
<v Speaker 0>to run

00:08:15.754 --> 00:08:18.315
<v Speaker 0>web assembly binaries on container D.

00:08:18.875 --> 00:08:20.155
<v Speaker 0>And I'm not gonna talk about it right

00:08:20.155 --> 00:08:21.835
<v Speaker 0>now or show you anything with regards to

00:08:21.835 --> 00:08:23.675
<v Speaker 0>that because it's early and it's not how

00:08:23.675 --> 00:08:26.155
<v Speaker 0>Fermion platform works right now or maybe ever

00:08:26.155 --> 00:08:27.754
<v Speaker 0>to be honest. I'm not entirely sure.

00:08:29.300 --> 00:08:31.300
<v Speaker 0>But it uses Nomad.

00:08:31.780 --> 00:08:34.100
<v Speaker 0>A Nomad is a HashiCorp project

00:08:34.339 --> 00:08:37.220
<v Speaker 0>that doesn't have this assumption about the workloads

00:08:37.220 --> 00:08:39.140
<v Speaker 0>that's going to schedule an orchestrate

00:08:39.140 --> 00:08:41.765
<v Speaker 0>that works really well for WebAssembly binaries and

00:08:41.765 --> 00:08:43.365
<v Speaker 0>in fact an interview I did with the

00:08:43.365 --> 00:08:45.765
<v Speaker 0>CTO of Fermion was talking about how they

00:08:45.765 --> 00:08:47.285
<v Speaker 0>were able to reduce

00:08:47.765 --> 00:08:48.405
<v Speaker 0>the

00:08:48.645 --> 00:08:50.805
<v Speaker 0>amount of code that they wrote to make

00:08:50.805 --> 00:08:53.285
<v Speaker 0>web assembly and Crestlet work within like the

00:08:53.285 --> 00:08:54.885
<v Speaker 0>hundreds of thousands of lines of code

00:08:55.380 --> 00:08:58.580
<v Speaker 0>but the web assembly support for Nomad was

00:08:58.580 --> 00:09:01.620
<v Speaker 0>dozens to hundreds of lanes of code.

00:09:02.260 --> 00:09:02.900
<v Speaker 0>Much

00:09:04.020 --> 00:09:06.100
<v Speaker 0>easier to reason about and work with.

00:09:07.875 --> 00:09:10.835
<v Speaker 0>It's not just Nomad that is console issues

00:09:10.835 --> 00:09:12.915
<v Speaker 0>for service discovery and

00:09:12.915 --> 00:09:14.995
<v Speaker 0>for making sure the URLs work to browse

00:09:14.995 --> 00:09:17.235
<v Speaker 0>to it because traffic sits in the front

00:09:17.235 --> 00:09:19.555
<v Speaker 0>as a proxy, speaks to console as a

00:09:19.555 --> 00:09:21.795
<v Speaker 0>discovery mechanism for all the web assembly applications

00:09:21.795 --> 00:09:22.435
<v Speaker 0>that are available,

00:09:22.940 --> 00:09:25.019
<v Speaker 0>sets up all the routing for you and

00:09:25.019 --> 00:09:27.580
<v Speaker 0>any secrets that are required come from vault.

00:09:27.980 --> 00:09:30.380
<v Speaker 0>So essentially this is a full hashi stack

00:09:30.380 --> 00:09:31.899
<v Speaker 0>with a little bit of glue on the

00:09:31.899 --> 00:09:34.060
<v Speaker 0>top to make it work for web assembly.

00:09:36.565 --> 00:09:37.205
<v Speaker 0>Okay.

00:09:37.525 --> 00:09:40.885
<v Speaker 0>Let's see where we are with our deployment.

00:09:41.365 --> 00:09:43.685
<v Speaker 0>If you have any questions,

00:09:44.165 --> 00:09:46.085
<v Speaker 0>feel free to drop them into the comment

00:09:46.085 --> 00:09:46.805
<v Speaker 0>section.

00:09:47.365 --> 00:09:48.805
<v Speaker 0>So I just realized I don't even have

00:09:48.805 --> 00:09:49.445
<v Speaker 0>open.

00:09:50.645 --> 00:09:51.525
<v Speaker 0>Where are my comments?

00:09:54.209 --> 00:09:55.810
<v Speaker 0>Let's turn off.

00:09:58.050 --> 00:09:59.649
<v Speaker 0>No. It's not hiding up there.

00:10:02.930 --> 00:10:04.610
<v Speaker 0>When was the last time I streamed?

00:10:10.245 --> 00:10:11.685
<v Speaker 0>Nope. No comment, man.

00:10:18.645 --> 00:10:19.285
<v Speaker 0>Where are you?

00:10:24.110 --> 00:10:25.390
<v Speaker 0>But he's behind here.

00:10:26.589 --> 00:10:28.269
<v Speaker 0>I'm not gonna look for any longer because

00:10:28.269 --> 00:10:29.950
<v Speaker 0>I'm just gonna look silly. I

00:10:30.990 --> 00:10:33.470
<v Speaker 0>have no idea where that went. Okay, let's

00:10:33.470 --> 00:10:34.190
<v Speaker 0>check where we are.

00:10:36.305 --> 00:10:39.425
<v Speaker 0>Okay. Cool. So the TerraForm has completed.

00:10:39.985 --> 00:10:41.505
<v Speaker 0>We know that because we have all of

00:10:41.505 --> 00:10:44.464
<v Speaker 0>the outputs. So we have the bundle address,

00:10:44.464 --> 00:10:46.225
<v Speaker 0>which we'll need in just a moment for

00:10:46.225 --> 00:10:48.545
<v Speaker 0>pushing our spin application to.

00:10:49.769 --> 00:10:52.730
<v Speaker 0>We have a generated SSH key, which will

00:10:52.730 --> 00:10:54.329
<v Speaker 0>allow us to get onto the machine.

00:10:57.690 --> 00:10:58.810
<v Speaker 0>We have

00:10:59.930 --> 00:11:02.009
<v Speaker 0>the DNS host. So by default,

00:11:02.345 --> 00:11:04.505
<v Speaker 0>if you don't provide a DNS name, it

00:11:04.505 --> 00:11:05.865
<v Speaker 0>uses a slip,

00:11:06.505 --> 00:11:08.665
<v Speaker 0>which is really just you put an IP

00:11:08.665 --> 00:11:11.065
<v Speaker 0>address on as a the prefix, the sub

00:11:11.065 --> 00:11:14.505
<v Speaker 0>the sub domains of the main domain and

00:11:14.505 --> 00:11:16.105
<v Speaker 0>it resolves for you. There are loads of

00:11:16.105 --> 00:11:18.400
<v Speaker 0>services like this these days. SLEP is just

00:11:18.400 --> 00:11:20.160
<v Speaker 0>the one that is used as part of

00:11:20.160 --> 00:11:21.120
<v Speaker 0>this automation.

00:11:22.240 --> 00:11:25.120
<v Speaker 0>We have a Hippo admin username and password

00:11:25.120 --> 00:11:26.800
<v Speaker 0>which we can use to actually browse the

00:11:26.800 --> 00:11:27.840
<v Speaker 0>Hippo instance.

00:11:28.400 --> 00:11:29.600
<v Speaker 0>Why don't we start there?

00:11:31.025 --> 00:11:32.545
<v Speaker 0>Why don't we copy this

00:11:33.105 --> 00:11:34.865
<v Speaker 0>and what should happen is when we open

00:11:34.865 --> 00:11:36.865
<v Speaker 0>this as we get our own little money

00:11:36.865 --> 00:11:37.905
<v Speaker 0>UI

00:11:38.145 --> 00:11:39.505
<v Speaker 0>for Fermion Cloud.

00:11:40.545 --> 00:11:42.785
<v Speaker 0>Isn't

00:11:42.785 --> 00:11:43.425
<v Speaker 0>that neat?

00:11:44.420 --> 00:11:46.579
<v Speaker 0>So we could put in that our password

00:11:46.579 --> 00:11:47.860
<v Speaker 0>is admin.

00:11:47.940 --> 00:11:50.180
<v Speaker 0>We could pop back over here and we

00:11:50.180 --> 00:11:51.459
<v Speaker 0>could do terraform

00:11:51.459 --> 00:11:52.420
<v Speaker 0>output

00:11:53.540 --> 00:11:54.420
<v Speaker 0>JSON

00:11:54.500 --> 00:11:56.500
<v Speaker 0>j q dot

00:11:57.615 --> 00:11:58.495
<v Speaker 0>hippo

00:11:59.215 --> 00:12:00.015
<v Speaker 0>admin

00:12:00.415 --> 00:12:01.295
<v Speaker 0>password

00:12:01.615 --> 00:12:02.575
<v Speaker 0>dot value.

00:12:03.455 --> 00:12:05.855
<v Speaker 0>And this gives us our password.

00:12:08.095 --> 00:12:09.055
<v Speaker 0>And now

00:12:10.020 --> 00:12:11.220
<v Speaker 0>we can log in.

00:12:12.020 --> 00:12:14.260
<v Speaker 0>We don't have any applications. We haven't deployed

00:12:14.260 --> 00:12:16.660
<v Speaker 0>anything yet, but you know, this is very

00:12:16.660 --> 00:12:18.740
<v Speaker 0>similar to just bare me on cloud.

00:12:20.580 --> 00:12:22.580
<v Speaker 0>Next, what do we need to do? Well,

00:12:22.935 --> 00:12:25.095
<v Speaker 0>we need to push the application.

00:12:25.895 --> 00:12:28.215
<v Speaker 0>So we can just spin login

00:12:28.215 --> 00:12:30.055
<v Speaker 0>with a URL parameter.

00:12:30.695 --> 00:12:32.775
<v Speaker 0>And this actually oh, that's still the password.

00:12:32.775 --> 00:12:34.935
<v Speaker 0>This takes the Hippo URL.

00:12:36.010 --> 00:12:43.290
<v Speaker 0>So we can do HEPL.212.24417slip.io.

00:12:44.250 --> 00:12:46.089
<v Speaker 0>From here we can see whether everyone to

00:12:46.089 --> 00:12:47.930
<v Speaker 0>log in with GitHub or whether username and

00:12:47.930 --> 00:12:51.985
<v Speaker 0>password. We do not have any configuration

00:12:51.985 --> 00:12:53.904
<v Speaker 0>clients set up for GitHub.

00:12:54.305 --> 00:12:56.144
<v Speaker 0>So we're just going to use the same

00:12:56.144 --> 00:12:58.865
<v Speaker 0>username and password that we use to get

00:12:58.865 --> 00:12:59.825
<v Speaker 0>into the UI.

00:13:00.704 --> 00:13:02.545
<v Speaker 0>And next we need to bundle URL,

00:13:03.240 --> 00:13:05.160
<v Speaker 0>which is the same as the HEPL URL

00:13:05.160 --> 00:13:07.480
<v Speaker 0>only with bundle instead of HEPL.

00:13:08.520 --> 00:13:10.680
<v Speaker 0>So we can just do a slip dot

00:13:10.680 --> 00:13:12.520
<v Speaker 0>IO and that's where we'll need a slash

00:13:12.520 --> 00:13:14.280
<v Speaker 0>v one on the end.

00:13:14.840 --> 00:13:18.360
<v Speaker 0>And bundle will be running publicly and unauthenticated.

00:13:18.965 --> 00:13:21.045
<v Speaker 0>So if you are going to play around

00:13:21.045 --> 00:13:23.365
<v Speaker 0>with running your own web assembly platform,

00:13:23.765 --> 00:13:26.165
<v Speaker 0>just remember that it's not secure by default

00:13:26.165 --> 00:13:26.725
<v Speaker 0>and

00:13:27.125 --> 00:13:29.605
<v Speaker 0>there are plenty of warnings and the read

00:13:29.605 --> 00:13:31.685
<v Speaker 0>me to say the same thing too.

00:13:33.730 --> 00:13:34.450
<v Speaker 0>Now

00:13:34.530 --> 00:13:37.730
<v Speaker 0>we can do is spin deploy.

00:13:38.210 --> 00:13:41.730
<v Speaker 0>And because we're authenticated against this new Hippo

00:13:41.730 --> 00:13:42.530
<v Speaker 0>server,

00:13:42.850 --> 00:13:44.610
<v Speaker 0>it's gonna push it to there.

00:13:47.855 --> 00:13:49.695
<v Speaker 0>I logged us in the wrong place.

00:13:51.775 --> 00:13:53.775
<v Speaker 0>So we could do a CD

00:13:55.535 --> 00:13:56.335
<v Speaker 0>demo

00:13:56.335 --> 00:13:57.295
<v Speaker 0>spin

00:13:57.535 --> 00:13:58.095
<v Speaker 0>deploy.

00:13:59.820 --> 00:14:01.500
<v Speaker 0>We could just give us a few seconds,

00:14:01.500 --> 00:14:02.700
<v Speaker 0>but what's gonna happen

00:14:03.100 --> 00:14:05.020
<v Speaker 0>is we'll be able to refresh this. In

00:14:05.020 --> 00:14:06.540
<v Speaker 0>fact, we can already see it here.

00:14:07.340 --> 00:14:09.580
<v Speaker 0>We see that we have our demo application

00:14:09.580 --> 00:14:10.140
<v Speaker 0>here.

00:14:11.260 --> 00:14:12.860
<v Speaker 0>Now we can get logs,

00:14:13.020 --> 00:14:14.540
<v Speaker 0>we can set environment variables,

00:14:15.015 --> 00:14:16.855
<v Speaker 0>We can tweak some settings although that aren't

00:14:16.855 --> 00:14:18.855
<v Speaker 0>really at this point in time and we

00:14:18.855 --> 00:14:20.775
<v Speaker 0>can see that it's still publishing. So it's

00:14:20.775 --> 00:14:22.455
<v Speaker 0>actually not going to be available on this

00:14:22.455 --> 00:14:24.055
<v Speaker 0>URL just yet.

00:14:25.255 --> 00:14:27.335
<v Speaker 0>We pop back to the CLI. Looks like

00:14:27.335 --> 00:14:29.015
<v Speaker 0>it's finished. We have a link. It's the

00:14:29.015 --> 00:14:30.910
<v Speaker 0>same one as here and I'll open this

00:14:30.910 --> 00:14:32.030
<v Speaker 0>in a split

00:14:33.150 --> 00:14:36.270
<v Speaker 0>and we can see we have hello fermion.

00:14:37.790 --> 00:14:40.590
<v Speaker 0>So most of that was just me waffle

00:14:40.590 --> 00:14:41.310
<v Speaker 0>chatting away,

00:14:42.204 --> 00:14:45.165
<v Speaker 0>terraform and terraform apply and we have a

00:14:45.165 --> 00:14:46.365
<v Speaker 0>web assembly client.

00:14:46.925 --> 00:14:48.445
<v Speaker 0>That's pretty much it.

00:14:50.685 --> 00:14:52.764
<v Speaker 0>Have our logs there's not really anything there

00:14:52.764 --> 00:14:54.524
<v Speaker 0>right now because we don't have any logging

00:14:54.524 --> 00:14:55.644
<v Speaker 0>in the default application.

00:14:56.640 --> 00:14:58.800
<v Speaker 0>If we want to add an environment variable,

00:14:58.800 --> 00:15:00.960
<v Speaker 0>we could say name equals David. We could

00:15:00.960 --> 00:15:01.920
<v Speaker 0>click save

00:15:02.080 --> 00:15:04.480
<v Speaker 0>and this becomes available to our application.

00:15:04.800 --> 00:15:06.560
<v Speaker 0>So you can kinda just do whatever you

00:15:06.560 --> 00:15:08.080
<v Speaker 0>want from this point forward.

00:15:08.480 --> 00:15:10.240
<v Speaker 0>I am just gonna point out one or

00:15:10.240 --> 00:15:12.240
<v Speaker 0>two more things before we wrap up the

00:15:12.240 --> 00:15:12.640
<v Speaker 0>session.

00:15:14.135 --> 00:15:16.375
<v Speaker 0>You already know the bundle is running on

00:15:16.375 --> 00:15:19.175
<v Speaker 0>this machine and it is available publicly,

00:15:19.334 --> 00:15:20.855
<v Speaker 0>but so is console.

00:15:21.175 --> 00:15:23.175
<v Speaker 0>Well, let's click on the link for that.

00:15:27.830 --> 00:15:29.110
<v Speaker 0>You know what? I think it's just available

00:15:29.110 --> 00:15:31.350
<v Speaker 0>on the IP address. So let's try.

00:15:33.750 --> 00:15:34.390
<v Speaker 0>No.

00:15:36.230 --> 00:15:37.030
<v Speaker 0>Alright.

00:15:37.350 --> 00:15:39.190
<v Speaker 0>Let's get on this machine.

00:15:40.765 --> 00:15:43.165
<v Speaker 0>So we need terraform

00:15:44.765 --> 00:15:45.725
<v Speaker 0>output

00:15:45.885 --> 00:15:47.005
<v Speaker 0>dash JSON

00:15:48.365 --> 00:15:50.685
<v Speaker 0>back at directory terraform

00:15:51.405 --> 00:15:52.525
<v Speaker 0>dash

00:15:52.525 --> 00:15:53.245
<v Speaker 0>JSON

00:15:53.940 --> 00:15:56.260
<v Speaker 0>and we want to grab

00:15:56.820 --> 00:15:58.580
<v Speaker 0>the private key,

00:15:59.700 --> 00:16:02.500
<v Speaker 0>which is civo private key.

00:16:04.020 --> 00:16:06.260
<v Speaker 0>We can j q this only this time

00:16:06.260 --> 00:16:08.180
<v Speaker 0>we want a raw value that just means

00:16:08.180 --> 00:16:08.980
<v Speaker 0>without quotes.

00:16:09.945 --> 00:16:11.625
<v Speaker 0>We want the value of this which is

00:16:11.625 --> 00:16:12.425
<v Speaker 0>our key

00:16:12.905 --> 00:16:14.665
<v Speaker 0>and we'll write this to

00:16:15.145 --> 00:16:15.865
<v Speaker 0>print.

00:16:16.985 --> 00:16:19.145
<v Speaker 0>Now because SSH can be a bit funny,

00:16:19.145 --> 00:16:20.825
<v Speaker 0>we'll check modus to be print.

00:16:21.650 --> 00:16:23.490
<v Speaker 0>I'm gonna do a BSH which is just

00:16:23.490 --> 00:16:25.890
<v Speaker 0>an alias that removes host key checking.

00:16:26.370 --> 00:16:29.170
<v Speaker 0>Really handy for ephemeral instances where you don't

00:16:29.170 --> 00:16:30.130
<v Speaker 0>actually care.

00:16:30.370 --> 00:16:33.010
<v Speaker 0>We wanna grab the IP address

00:16:34.285 --> 00:16:35.085
<v Speaker 0>here.

00:16:36.765 --> 00:16:39.245
<v Speaker 0>And lastly, we wanna specify

00:16:39.805 --> 00:16:41.165
<v Speaker 0>a private key.

00:16:45.405 --> 00:16:46.125
<v Speaker 0>And we're in.

00:16:47.300 --> 00:16:48.980
<v Speaker 0>We're now on the machine where the Fairmount

00:16:48.980 --> 00:16:50.339
<v Speaker 0>platform is deployed.

00:16:51.459 --> 00:16:53.940
<v Speaker 0>So we can run nomad status, which will

00:16:53.940 --> 00:16:56.180
<v Speaker 0>show us that we have our application that

00:16:56.180 --> 00:16:58.980
<v Speaker 0>we deployed. That's the UUID that's sitting there.

00:16:58.980 --> 00:17:00.740
<v Speaker 0>We have Bundle, we have Heppel and we

00:17:00.740 --> 00:17:01.220
<v Speaker 0>have traffic.

00:17:02.415 --> 00:17:04.415
<v Speaker 0>Now if you're not familiar with cloud computing

00:17:04.415 --> 00:17:06.815
<v Speaker 0>and cloud and how all this works is

00:17:06.815 --> 00:17:09.135
<v Speaker 0>when we push the user data to this

00:17:09.135 --> 00:17:09.855
<v Speaker 0>machine,

00:17:10.655 --> 00:17:12.895
<v Speaker 0>it's pretty standard that you're going to find

00:17:12.895 --> 00:17:13.775
<v Speaker 0>the logs

00:17:14.255 --> 00:17:17.055
<v Speaker 0>and bar log cloud in it output dot

00:17:17.055 --> 00:17:17.295
<v Speaker 0>log.

00:17:18.150 --> 00:17:19.030
<v Speaker 0>From here

00:17:19.430 --> 00:17:22.550
<v Speaker 0>you'll get to a public IP address

00:17:23.110 --> 00:17:25.030
<v Speaker 0>for the console,

00:17:25.350 --> 00:17:26.630
<v Speaker 0>the nomad,

00:17:27.510 --> 00:17:29.430
<v Speaker 0>the vault. So some of these are private

00:17:29.430 --> 00:17:31.350
<v Speaker 0>which means you probably need to set up

00:17:31.350 --> 00:17:32.550
<v Speaker 0>an SSH tunnel

00:17:33.065 --> 00:17:34.585
<v Speaker 0>but I'm gonna try the IP address on

00:17:34.585 --> 00:17:35.385
<v Speaker 0>8500

00:17:35.385 --> 00:17:36.985
<v Speaker 0>just to see if it works.

00:17:42.825 --> 00:17:45.385
<v Speaker 0>It does. Cool. I worked on my Equinix

00:17:45.385 --> 00:17:46.665
<v Speaker 0>mental test. I'm glad it worked on my

00:17:46.665 --> 00:17:49.100
<v Speaker 0>SQL test. Yeah. So this is public too.

00:17:49.100 --> 00:17:51.740
<v Speaker 0>So just caveat be aware. This could be

00:17:51.740 --> 00:17:53.979
<v Speaker 0>a bad thing. Hey, I sent my comments.

00:17:55.980 --> 00:17:56.940
<v Speaker 0>There we go.

00:17:57.740 --> 00:17:58.940
<v Speaker 0>Hey, Shupam.

00:17:59.100 --> 00:17:59.900
<v Speaker 0>Thanks for joining.

00:18:01.535 --> 00:18:03.774
<v Speaker 0>Hector JS. Thanks for joining.

00:18:04.415 --> 00:18:06.895
<v Speaker 0>So console is here and from here, you

00:18:06.895 --> 00:18:08.815
<v Speaker 0>can actually see all of the workloads that

00:18:08.815 --> 00:18:10.414
<v Speaker 0>are running too. So you can see

00:18:10.975 --> 00:18:14.290
<v Speaker 0>that we have console bundle, hippo, etcetera.

00:18:14.290 --> 00:18:16.290
<v Speaker 0>If you do need to debug this at

00:18:16.290 --> 00:18:17.090
<v Speaker 0>any point,

00:18:17.330 --> 00:18:18.770
<v Speaker 0>you can kind of get in and take

00:18:18.770 --> 00:18:21.090
<v Speaker 0>a look and see everything as you can.

00:18:21.730 --> 00:18:24.130
<v Speaker 0>But just a word of warning is public.

00:18:24.450 --> 00:18:27.330
<v Speaker 0>Please do not use the installer for any

00:18:27.330 --> 00:18:28.370
<v Speaker 0>production based stuff.

00:18:28.995 --> 00:18:31.235
<v Speaker 0>You're really gonna have to tie down those

00:18:31.235 --> 00:18:33.634
<v Speaker 0>firewall rules and make sure that nothing.

00:18:34.675 --> 00:18:36.755
<v Speaker 0>This is dangerous and it shouldn't be made

00:18:36.755 --> 00:18:37.475
<v Speaker 0>available.

00:18:38.755 --> 00:18:40.835
<v Speaker 0>And that's the that's our demo for today.

00:18:41.235 --> 00:18:42.915
<v Speaker 0>So we'll check out the Fairmount installer,

00:18:44.260 --> 00:18:46.500
<v Speaker 0>run your own web assembly platform on any

00:18:46.500 --> 00:18:49.059
<v Speaker 0>major cloud provider that is supported. If there's

00:18:49.059 --> 00:18:50.980
<v Speaker 0>a cloud provider that you want to support,

00:18:51.059 --> 00:18:53.220
<v Speaker 0>the repo is open source. Please feel free

00:18:53.220 --> 00:18:55.540
<v Speaker 0>to open a pull request. Just need to

00:18:55.540 --> 00:18:57.059
<v Speaker 0>write a little bit of Terraform.

00:18:57.220 --> 00:19:00.035
<v Speaker 0>The great part is all the user data

00:19:00.035 --> 00:19:00.674
<v Speaker 0>is

00:19:01.155 --> 00:19:02.995
<v Speaker 0>global. It works on all of these providers

00:19:02.995 --> 00:19:04.675
<v Speaker 0>provided to use the right version of the

00:19:04.675 --> 00:19:07.235
<v Speaker 0>Bintu. So as far as the Terraform contribution

00:19:07.235 --> 00:19:08.995
<v Speaker 0>goes, you only really need to spin up

00:19:08.995 --> 00:19:11.075
<v Speaker 0>an instance on the cloud with some firewall

00:19:11.075 --> 00:19:12.275
<v Speaker 0>rules and it just works.

00:19:13.070 --> 00:19:14.510
<v Speaker 0>So go check it out.

00:19:14.990 --> 00:19:17.230
<v Speaker 0>I'll be back on Tuesday. We'll be doing

00:19:17.230 --> 00:19:19.470
<v Speaker 0>that the Equinix metal demo which I've been

00:19:19.470 --> 00:19:20.990
<v Speaker 0>working on. This is going to be a

00:19:20.990 --> 00:19:23.309
<v Speaker 0>show us how we can run multiple

00:19:23.630 --> 00:19:25.070
<v Speaker 0>fermion platforms

00:19:25.070 --> 00:19:26.350
<v Speaker 0>and multiple locations

00:19:26.875 --> 00:19:29.195
<v Speaker 0>and use my favorite web technology or at

00:19:29.195 --> 00:19:30.634
<v Speaker 0>least networking technology

00:19:30.794 --> 00:19:31.755
<v Speaker 0>BGP

00:19:31.755 --> 00:19:33.914
<v Speaker 0>that is dynamic written based on where you

00:19:33.914 --> 00:19:36.154
<v Speaker 0>are in the world for super low latency

00:19:36.154 --> 00:19:38.075
<v Speaker 0>web assembly workloads.

00:19:38.715 --> 00:19:40.919
<v Speaker 0>So until then, thank you for joining me.

00:19:40.919 --> 00:19:42.440
<v Speaker 0>Have a wonderful day and we'll be back

00:19:42.440 --> 00:19:45.240
<v Speaker 0>again soon with more spin videos as part

00:19:45.240 --> 00:19:46.840
<v Speaker 0>of the complete spin,

00:19:46.840 --> 00:19:47.879
<v Speaker 0>the complete

00:19:48.039 --> 00:19:49.960
<v Speaker 0>guide to spin course.

00:19:50.360 --> 00:19:51.799
<v Speaker 0>Have a great weekend. I'll see you all

00:19:51.799 --> 00:19:52.039
<v Speaker 0>soon.
