WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 217f8b61-3c4f-4ffd-a48b-57bf5d039865
Created: 2025-04-29T15:17:12.584Z
Duration: 5556.031
Channels: 1

00:02:41.515 --> 00:02:42.315
<v Speaker 0>Hello,

00:02:42.395 --> 00:02:45.114
<v Speaker 0>and welcome back to the Rawkode Academy. I'm

00:02:45.114 --> 00:02:46.635
<v Speaker 0>your host, David Flanagan,

00:02:46.635 --> 00:02:48.795
<v Speaker 0>also known across the Internet as Rawkode.

00:02:49.580 --> 00:02:51.820
<v Speaker 0>Today, we are taking a look at a

00:02:51.820 --> 00:02:54.860
<v Speaker 0>piece of open source tools to help simplify

00:02:54.860 --> 00:02:57.260
<v Speaker 0>and flexify words I've just made up here

00:02:57.260 --> 00:02:58.700
<v Speaker 0>Kubernetes deployments.

00:02:59.180 --> 00:03:01.740
<v Speaker 0>Today, I'm joined by the creator and maintainer,

00:03:02.755 --> 00:03:03.715
<v Speaker 0>Alexander.

00:03:03.715 --> 00:03:04.995
<v Speaker 0>Hey, man. How's it going?

00:03:05.395 --> 00:03:07.315
<v Speaker 1>Hi. Thanks for having me. I'm good. How

00:03:07.315 --> 00:03:10.435
<v Speaker 1>are you? Yeah. I'm doing very well. I'm

00:03:10.435 --> 00:03:12.915
<v Speaker 0>always excited to see a new tool in

00:03:12.915 --> 00:03:15.235
<v Speaker 0>the Kubernetes space, especially when I'm not entirely

00:03:15.235 --> 00:03:17.450
<v Speaker 0>sure how to pronounce the name. But today,

00:03:17.450 --> 00:03:19.769
<v Speaker 0>we're taking a look at Clue Control, Clue

00:03:19.769 --> 00:03:22.330
<v Speaker 0>CTL, Clue Cuddle, Clue Cuddle.

00:03:22.810 --> 00:03:24.330
<v Speaker 0>Anything else you wanna add there?

00:03:25.530 --> 00:03:28.010
<v Speaker 1>I would say just late into the hands

00:03:28.010 --> 00:03:30.569
<v Speaker 1>of the community. Don't know. All this, so

00:03:30.785 --> 00:03:32.785
<v Speaker 1>Clue CDL is fine. Clue Catalog is fine.

00:03:32.785 --> 00:03:34.945
<v Speaker 1>Everything is fine. Clue Control. Let's go with

00:03:34.945 --> 00:03:37.825
<v Speaker 0>that one. Alright. Yeah. Great. Could you please

00:03:37.985 --> 00:03:39.665
<v Speaker 0>take a before we start talking about Clue

00:03:39.665 --> 00:03:41.105
<v Speaker 0>Control, just take a moment to tell us

00:03:41.105 --> 00:03:42.705
<v Speaker 0>a little bit about you and what you've

00:03:42.705 --> 00:03:43.265
<v Speaker 0>been up to, please.

00:03:44.710 --> 00:03:47.350
<v Speaker 1>Yeah. My name is Alexander Block. You can

00:03:47.350 --> 00:03:50.150
<v Speaker 1>also call me Alex or Coda Block when

00:03:50.150 --> 00:03:51.030
<v Speaker 1>I'm online.

00:03:51.350 --> 00:03:54.150
<v Speaker 1>So same handle used on Twitter and GitHub.

00:03:54.470 --> 00:03:55.910
<v Speaker 1>I'm a senior

00:03:55.990 --> 00:03:57.510
<v Speaker 1>DevOps engineer,

00:03:57.510 --> 00:03:58.470
<v Speaker 1>back end developer,

00:03:58.995 --> 00:04:00.355
<v Speaker 1>software developer.

00:04:00.834 --> 00:04:03.155
<v Speaker 1>I'm a consultant, freelancer,

00:04:03.955 --> 00:04:05.555
<v Speaker 1>and I'm very

00:04:06.435 --> 00:04:08.995
<v Speaker 1>excited about open source development. So I'm trying

00:04:08.995 --> 00:04:10.755
<v Speaker 1>to do that whenever possible.

00:04:10.834 --> 00:04:12.835
<v Speaker 1>I'm trying to contribute whenever possible.

00:04:13.474 --> 00:04:13.795
<v Speaker 1>And

00:04:14.510 --> 00:04:16.350
<v Speaker 1>Kluctl or Kluctl

00:04:16.509 --> 00:04:18.350
<v Speaker 1>Kluctl control. Yeah. We we we started to

00:04:18.350 --> 00:04:19.310
<v Speaker 1>call it Kluctl.

00:04:19.870 --> 00:04:22.110
<v Speaker 1>It's kind of the first big project that

00:04:22.110 --> 00:04:25.470
<v Speaker 1>I started from scratch and which is kind

00:04:25.470 --> 00:04:27.630
<v Speaker 1>of my my own baby right now.

00:04:29.645 --> 00:04:30.605
<v Speaker 1>So yeah.

00:04:31.165 --> 00:04:32.845
<v Speaker 1>Awesome. Thank you for sharing.

00:04:33.405 --> 00:04:36.045
<v Speaker 0>Maybe you'd like to give us the quick

00:04:36.045 --> 00:04:37.085
<v Speaker 0>TLDR

00:04:37.085 --> 00:04:38.605
<v Speaker 0>of what Kluctl Control is. Now I know

00:04:38.605 --> 00:04:40.045
<v Speaker 0>we're gonna have some slides, so just give

00:04:40.045 --> 00:04:41.405
<v Speaker 0>us, the thirty second

00:04:41.830 --> 00:04:44.229
<v Speaker 0>kind of pitch. Like, what is Kluctluctl? What's

00:04:44.229 --> 00:04:46.550
<v Speaker 0>the history? Why why did you start building

00:04:46.550 --> 00:04:47.750
<v Speaker 0>this thing? Yeah.

00:04:48.630 --> 00:04:51.430
<v Speaker 1>I'd I'd describe it as the missing glue.

00:04:51.430 --> 00:04:53.669
<v Speaker 1>So that's where the name comes from, by

00:04:53.669 --> 00:04:56.070
<v Speaker 1>the way, Kluctl with k instead of g

00:04:56.070 --> 00:04:57.110
<v Speaker 1>and without the e.

00:04:57.685 --> 00:04:59.525
<v Speaker 1>So Clue, Glue, whatever.

00:05:00.085 --> 00:05:02.805
<v Speaker 1>It's the missing glue between tools that already

00:05:02.805 --> 00:05:05.845
<v Speaker 1>exist, for example, Helm and Customize, and it's

00:05:05.845 --> 00:05:07.925
<v Speaker 1>kind of a front end to these. It

00:05:07.925 --> 00:05:11.045
<v Speaker 1>allows you to define multi environment, multi cluster

00:05:11.045 --> 00:05:11.685
<v Speaker 1>deployments,

00:05:12.410 --> 00:05:14.890
<v Speaker 1>and it has a CLI to control these,

00:05:14.890 --> 00:05:17.610
<v Speaker 1>actually to do the deployments, to diffs and

00:05:17.610 --> 00:05:19.130
<v Speaker 1>dry runs and so on.

00:05:20.090 --> 00:05:21.450
<v Speaker 1>So, yeah, that's Clue Studio.

00:05:22.170 --> 00:05:24.250
<v Speaker 1>And in these slides, I will try to

00:05:24.250 --> 00:05:24.970
<v Speaker 1>explain

00:05:26.090 --> 00:05:26.490
<v Speaker 1>how

00:05:27.164 --> 00:05:29.324
<v Speaker 1>it came to that tool and what's the

00:05:29.324 --> 00:05:31.245
<v Speaker 1>reasons reasoning behind that is.

00:05:31.724 --> 00:05:34.284
<v Speaker 0>Alright. Without further ado, let's hand over to

00:05:34.284 --> 00:05:35.724
<v Speaker 0>your slides then. If you wanna get them

00:05:35.724 --> 00:05:37.965
<v Speaker 0>ready, I'll pop the scene over. And as

00:05:37.965 --> 00:05:39.930
<v Speaker 0>always, there are people watching, Please feel free

00:05:39.930 --> 00:05:41.770
<v Speaker 0>to add any questions that you have throughout

00:05:41.770 --> 00:05:43.690
<v Speaker 0>the session and to the chat and comment

00:05:43.690 --> 00:05:45.610
<v Speaker 0>box, and we will do our best to

00:05:45.610 --> 00:05:46.410
<v Speaker 0>tackle them.

00:05:47.370 --> 00:05:49.610
<v Speaker 1>Great. Alexander, your slides are now live. Take

00:05:49.610 --> 00:05:50.170
<v Speaker 0>it away.

00:05:50.730 --> 00:05:52.650
<v Speaker 1>Great. So I assume you can see the

00:05:52.650 --> 00:05:54.730
<v Speaker 1>Kluctl scale logo? We can indeed.

00:05:55.505 --> 00:05:58.465
<v Speaker 1>Great. So let's start. So just a small

00:05:58.465 --> 00:06:01.185
<v Speaker 1>agenda for the slides. I'll try to make

00:06:01.185 --> 00:06:03.585
<v Speaker 1>it as short as possible, so not so

00:06:03.585 --> 00:06:06.065
<v Speaker 1>much slides. The hands on is the most

00:06:06.065 --> 00:06:08.680
<v Speaker 1>important stuff that comes later. So who am

00:06:08.680 --> 00:06:09.160
<v Speaker 1>I?

00:06:09.480 --> 00:06:12.440
<v Speaker 1>Just why another tool introducing ClueCDL and then

00:06:12.440 --> 00:06:13.800
<v Speaker 1>the actual hands on.

00:06:15.080 --> 00:06:17.160
<v Speaker 1>I already explained why I am, so I

00:06:17.160 --> 00:06:18.680
<v Speaker 1>think I can skip it.

00:06:19.880 --> 00:06:21.720
<v Speaker 1>Let's go to why another tool.

00:06:22.885 --> 00:06:25.605
<v Speaker 1>So I've been working on many, many deployment

00:06:25.605 --> 00:06:28.565
<v Speaker 1>projects in the past. It started with plain

00:06:28.565 --> 00:06:31.125
<v Speaker 1>Docker, then Docker Compose came and Docker Swarm

00:06:31.125 --> 00:06:32.485
<v Speaker 1>and later Kubernetes.

00:06:32.805 --> 00:06:34.805
<v Speaker 1>And it turned out that every

00:06:35.230 --> 00:06:36.910
<v Speaker 1>one of these projects

00:06:37.150 --> 00:06:39.870
<v Speaker 1>had the same requirements and same problems to

00:06:39.870 --> 00:06:40.670
<v Speaker 1>be solved.

00:06:42.350 --> 00:06:43.710
<v Speaker 1>On the next slides, I'll try to give

00:06:43.710 --> 00:06:46.030
<v Speaker 1>an overview of these and describe

00:06:46.670 --> 00:06:48.990
<v Speaker 1>why existing tools did not solve them.

00:06:50.194 --> 00:06:52.755
<v Speaker 1>It won't be the focus, but I'll try

00:06:52.755 --> 00:06:54.995
<v Speaker 1>to do it kind of in between.

00:06:55.715 --> 00:06:56.355
<v Speaker 1>So

00:06:56.835 --> 00:06:59.634
<v Speaker 1>of course, one of the most important requirements

00:06:59.634 --> 00:07:02.835
<v Speaker 1>is infrastructure as code. So everything 100% must

00:07:02.835 --> 00:07:05.490
<v Speaker 1>be as code, meaning it should be part

00:07:05.490 --> 00:07:06.690
<v Speaker 1>of version control

00:07:07.090 --> 00:07:07.889
<v Speaker 1>and

00:07:09.970 --> 00:07:10.850
<v Speaker 1>yeah, so

00:07:11.330 --> 00:07:13.250
<v Speaker 1>that you don't have to type in

00:07:13.569 --> 00:07:14.530
<v Speaker 1>kubectl

00:07:14.530 --> 00:07:16.849
<v Speaker 1>all the time and recreate everything by hand.

00:07:17.655 --> 00:07:18.215
<v Speaker 1>I

00:07:19.014 --> 00:07:19.815
<v Speaker 1>prefer

00:07:20.055 --> 00:07:22.215
<v Speaker 1>declarative code whenever possible,

00:07:22.534 --> 00:07:25.254
<v Speaker 1>but there are still situations where imperative parts

00:07:25.254 --> 00:07:27.175
<v Speaker 1>are still needed. As an example,

00:07:27.655 --> 00:07:30.375
<v Speaker 1>having declared everything is good, but in the

00:07:30.375 --> 00:07:32.294
<v Speaker 1>end, you still need to adhere to

00:07:35.000 --> 00:07:37.080
<v Speaker 1>deployment order, for example. As an example, you

00:07:37.080 --> 00:07:38.599
<v Speaker 1>have to deploy a namespace before you can

00:07:38.599 --> 00:07:39.320
<v Speaker 1>deploy

00:07:39.639 --> 00:07:41.720
<v Speaker 1>any other object onto the namespace.

00:07:41.800 --> 00:07:44.520
<v Speaker 1>So that is kind of a mix of

00:07:44.520 --> 00:07:45.800
<v Speaker 1>decorative and imperative.

00:07:46.805 --> 00:07:48.565
<v Speaker 1>It must be fully automatable

00:07:49.284 --> 00:07:50.564
<v Speaker 1>and reproducible,

00:07:50.564 --> 00:07:53.604
<v Speaker 1>and for me, it was always important to

00:07:53.764 --> 00:07:56.805
<v Speaker 1>at least allow the coexistence of GitOps and

00:07:56.805 --> 00:07:57.525
<v Speaker 1>DevOps

00:07:58.245 --> 00:08:00.724
<v Speaker 1>in a seamless way. I'll explain that later

00:08:00.724 --> 00:08:01.205
<v Speaker 1>a little bit.

00:08:02.690 --> 00:08:05.970
<v Speaker 1>Another requirement is I always needed to have

00:08:05.970 --> 00:08:08.530
<v Speaker 1>to support multiple environments, so it's not enough

00:08:08.530 --> 00:08:10.370
<v Speaker 1>to just have a bunch of YAML files

00:08:10.370 --> 00:08:10.930
<v Speaker 1>and

00:08:11.410 --> 00:08:13.650
<v Speaker 1>just deploy them to one cluster, and

00:08:14.395 --> 00:08:15.995
<v Speaker 1>that's it. That's not enough.

00:08:16.474 --> 00:08:18.715
<v Speaker 1>We always have multiple environments. We have tests.

00:08:18.715 --> 00:08:20.955
<v Speaker 1>We have dev. We have production

00:08:20.955 --> 00:08:22.074
<v Speaker 1>and so on.

00:08:23.194 --> 00:08:25.754
<v Speaker 1>These are not necessarily on the same cluster.

00:08:25.754 --> 00:08:27.754
<v Speaker 1>They are actually quite often on different clusters.

00:08:27.754 --> 00:08:28.955
<v Speaker 1>So you have a prop cluster, have a

00:08:28.955 --> 00:08:29.914
<v Speaker 1>test cluster and so on.

00:08:31.569 --> 00:08:32.049
<v Speaker 1>It's,

00:08:32.450 --> 00:08:33.890
<v Speaker 1>at least in my opinion, should always be

00:08:33.890 --> 00:08:35.890
<v Speaker 1>the target to have as much parity as

00:08:35.890 --> 00:08:38.929
<v Speaker 1>possible between environments, so they should look like

00:08:38.929 --> 00:08:40.610
<v Speaker 1>the same or at least have the same

00:08:40.610 --> 00:08:41.409
<v Speaker 1>source

00:08:41.570 --> 00:08:43.250
<v Speaker 1>and shouldn't have that much differences.

00:08:43.865 --> 00:08:46.584
<v Speaker 1>In practice, that's not always the case because,

00:08:46.584 --> 00:08:48.665
<v Speaker 1>for example, if you deploy something on your

00:08:48.665 --> 00:08:50.584
<v Speaker 1>local machine, you will probably not deploy all

00:08:50.584 --> 00:08:52.665
<v Speaker 1>the monitoring stuff while you would deploy that

00:08:52.665 --> 00:08:53.464
<v Speaker 1>to prod.

00:08:54.825 --> 00:08:56.264
<v Speaker 1>Next requirement is

00:08:56.850 --> 00:08:59.649
<v Speaker 1>it's always required to have proper secrets management.

00:08:59.730 --> 00:09:02.290
<v Speaker 1>I prefer version controlled

00:09:02.610 --> 00:09:03.889
<v Speaker 1>encrypted secrets

00:09:04.290 --> 00:09:05.970
<v Speaker 1>with public key

00:09:06.769 --> 00:09:07.730
<v Speaker 1>encryption,

00:09:08.690 --> 00:09:10.850
<v Speaker 1>and it always turns out that there are

00:09:10.850 --> 00:09:13.425
<v Speaker 1>nice tools to do that. But the hard

00:09:13.425 --> 00:09:16.225
<v Speaker 1>part, which is key management and

00:09:16.625 --> 00:09:19.825
<v Speaker 1>actually encrypting the correct secrets with the correct

00:09:19.825 --> 00:09:22.545
<v Speaker 1>public key for the correct cluster is actually

00:09:22.545 --> 00:09:23.584
<v Speaker 1>the hard part of that.

00:09:27.210 --> 00:09:28.810
<v Speaker 1>So next thing is

00:09:30.010 --> 00:09:30.730
<v Speaker 1>deploying

00:09:31.050 --> 00:09:33.690
<v Speaker 1>some environment, for example, dev to a prop

00:09:33.690 --> 00:09:35.290
<v Speaker 1>cluster, by accident

00:09:35.370 --> 00:09:37.370
<v Speaker 1>should be impossible by design.

00:09:37.690 --> 00:09:39.524
<v Speaker 1>What I mean with that is if I,

00:09:39.524 --> 00:09:42.005
<v Speaker 1>as a DevOps engineer, want to deploy something

00:09:42.005 --> 00:09:44.245
<v Speaker 1>to dev, I should not first

00:09:44.645 --> 00:09:46.404
<v Speaker 1>I shouldn't have to figure out what context

00:09:46.404 --> 00:09:48.005
<v Speaker 1>to use. I shouldn't have to figure out

00:09:48.005 --> 00:09:50.404
<v Speaker 1>what other credentials are required. I shouldn't have

00:09:50.404 --> 00:09:52.805
<v Speaker 1>to figure out what configuration I should choose

00:09:52.805 --> 00:09:54.165
<v Speaker 1>to deploy to dev.

00:09:55.180 --> 00:09:56.380
<v Speaker 1>My deployment

00:09:56.380 --> 00:09:59.339
<v Speaker 1>should self define what dev is, so what

00:09:59.339 --> 00:10:01.500
<v Speaker 1>the environment dev is, what it means, which

00:10:01.500 --> 00:10:04.140
<v Speaker 1>cluster it is, what configuration, and so on.

00:10:04.459 --> 00:10:07.579
<v Speaker 1>That means environments must be a first class

00:10:07.579 --> 00:10:09.635
<v Speaker 1>concept. That's a requirement that I had for

00:10:09.635 --> 00:10:10.835
<v Speaker 1>myself all the time.

00:10:12.435 --> 00:10:13.075
<v Speaker 1>Next.

00:10:13.795 --> 00:10:14.595
<v Speaker 1>By the way,

00:10:15.795 --> 00:10:18.115
<v Speaker 1>if you have questions in between, just stop

00:10:18.115 --> 00:10:21.154
<v Speaker 1>me and ask them whenever you want to

00:10:21.315 --> 00:10:22.274
<v Speaker 1>or comments or whatever.

00:10:23.890 --> 00:10:26.370
<v Speaker 1>Also, when comments arise or something like that.

00:10:27.330 --> 00:10:29.650
<v Speaker 1>So the next topic, configuration management.

00:10:30.050 --> 00:10:32.450
<v Speaker 1>To meet the previously described requirements,

00:10:33.089 --> 00:10:35.970
<v Speaker 1>some form of configuration management must be possible

00:10:36.975 --> 00:10:39.615
<v Speaker 1>because environments differ in all kinds of variations.

00:10:39.615 --> 00:10:41.455
<v Speaker 1>There are simple variations. For example,

00:10:41.935 --> 00:10:44.975
<v Speaker 1>prod needs another database than dev, and

00:10:46.175 --> 00:10:48.575
<v Speaker 1>it gets more complicated when, for example, your

00:10:48.575 --> 00:10:51.695
<v Speaker 1>local deployment doesn't even use an external database

00:10:51.695 --> 00:10:53.980
<v Speaker 1>but wants to deploy its own database because

00:10:53.980 --> 00:10:56.380
<v Speaker 1>it doesn't have one externally available.

00:11:00.940 --> 00:11:02.700
<v Speaker 1>Yeah, and then there are other examples. For

00:11:02.700 --> 00:11:03.340
<v Speaker 1>example,

00:11:03.820 --> 00:11:05.660
<v Speaker 1>if you have a test environment, it might

00:11:05.660 --> 00:11:06.460
<v Speaker 1>be useful to

00:11:07.375 --> 00:11:10.575
<v Speaker 1>deploy a mail interceptor, something like mailhack or

00:11:10.575 --> 00:11:12.735
<v Speaker 1>mailhawk, I don't know what it's called, while

00:11:12.735 --> 00:11:14.735
<v Speaker 1>you never would like to deploy that to

00:11:14.735 --> 00:11:15.375
<v Speaker 1>prod.

00:11:15.615 --> 00:11:17.855
<v Speaker 1>So that gets a little bit more complicated

00:11:17.855 --> 00:11:19.295
<v Speaker 1>in regards to configuration management.

00:11:20.790 --> 00:11:23.830
<v Speaker 1>So in my opinion, templating is a must,

00:11:24.149 --> 00:11:27.110
<v Speaker 1>and I believe that overlays are not enough

00:11:27.110 --> 00:11:29.750
<v Speaker 1>to solve that. You can solve most of

00:11:29.750 --> 00:11:32.550
<v Speaker 1>that with overlays, for example, with customized overlays,

00:11:33.305 --> 00:11:35.945
<v Speaker 1>but it will get hard and feel unnatural

00:11:35.945 --> 00:11:38.345
<v Speaker 1>if it gets too complicated. At least that's

00:11:38.345 --> 00:11:39.545
<v Speaker 1>my personal

00:11:39.545 --> 00:11:41.305
<v Speaker 1>experience and opinion.

00:11:42.265 --> 00:11:44.584
<v Speaker 1>Next requirement I always had is I want

00:11:44.584 --> 00:11:47.225
<v Speaker 1>to move fast. I'm a very impatient DevOps

00:11:47.225 --> 00:11:47.704
<v Speaker 1>engineer.

00:11:48.140 --> 00:11:50.140
<v Speaker 1>Stuff must happen immediately,

00:11:50.620 --> 00:11:52.620
<v Speaker 1>and I must be able to change stuff

00:11:52.940 --> 00:11:54.380
<v Speaker 1>as fast as possible

00:11:54.620 --> 00:11:55.980
<v Speaker 1>with the security

00:11:56.460 --> 00:11:58.860
<v Speaker 1>or the confidence that what I do actually

00:11:58.860 --> 00:12:00.220
<v Speaker 1>results in what I want to do.

00:12:02.175 --> 00:12:04.334
<v Speaker 1>For that, I need a proper logical project

00:12:04.334 --> 00:12:06.175
<v Speaker 1>structure that

00:12:06.175 --> 00:12:07.295
<v Speaker 1>feels natural.

00:12:08.015 --> 00:12:09.455
<v Speaker 1>What that means is

00:12:10.975 --> 00:12:14.175
<v Speaker 1>so if I open my project in two

00:12:14.175 --> 00:12:16.570
<v Speaker 1>weeks after I close it today, I must

00:12:16.570 --> 00:12:18.730
<v Speaker 1>be able to immediately understand it because it's

00:12:18.730 --> 00:12:20.810
<v Speaker 1>kind of natural to the way I

00:12:21.690 --> 00:12:23.930
<v Speaker 1>think and how I structure my stuff.

00:12:26.010 --> 00:12:28.890
<v Speaker 1>If, for example, something's based on customize and

00:12:28.890 --> 00:12:31.805
<v Speaker 1>overlays, I often got to the point where

00:12:31.805 --> 00:12:33.485
<v Speaker 1>it didn't feel natural anymore,

00:12:33.805 --> 00:12:35.805
<v Speaker 1>and understanding my own stuff was very hard

00:12:35.805 --> 00:12:36.925
<v Speaker 1>after some time

00:12:37.805 --> 00:12:39.725
<v Speaker 1>because that's not how I think.

00:12:41.565 --> 00:12:43.965
<v Speaker 1>Yeah. Boilerplate that doesn't add value should not

00:12:43.965 --> 00:12:46.269
<v Speaker 1>be present at all. At least that's what

00:12:46.269 --> 00:12:46.990
<v Speaker 1>I believe.

00:12:47.310 --> 00:12:49.550
<v Speaker 1>If I just want to add one YAML

00:12:49.550 --> 00:12:51.389
<v Speaker 1>file and just one resource

00:12:51.470 --> 00:12:53.630
<v Speaker 1>and that's all I want to do, it's

00:12:54.589 --> 00:12:56.750
<v Speaker 1>I don't like to add too much boilerplate

00:12:56.750 --> 00:12:58.350
<v Speaker 1>to just do that. For example, adding a

00:12:58.350 --> 00:12:59.790
<v Speaker 1>Helm chart just

00:12:59.870 --> 00:13:02.405
<v Speaker 1>to add a small module that adds one

00:13:02.405 --> 00:13:03.445
<v Speaker 1>YAML is

00:13:03.925 --> 00:13:06.165
<v Speaker 1>too much, at least in my opinion.

00:13:07.925 --> 00:13:11.525
<v Speaker 1>Without the requirements met from above, refactoring and

00:13:11.525 --> 00:13:13.525
<v Speaker 1>high risk changes are no fun,

00:13:14.589 --> 00:13:17.390
<v Speaker 1>which usually leads to not doing refactoring and

00:13:17.390 --> 00:13:19.550
<v Speaker 1>not doing high risk changes or at least

00:13:19.550 --> 00:13:21.150
<v Speaker 1>postponing them forever.

00:13:23.070 --> 00:13:25.550
<v Speaker 1>Then I'd like to avoid push and pray

00:13:25.550 --> 00:13:28.029
<v Speaker 1>workflows as much as possible. So when I

00:13:28.029 --> 00:13:29.950
<v Speaker 1>remember my first days as a DevOps engineer,

00:13:31.615 --> 00:13:34.015
<v Speaker 1>one thing that was the most,

00:13:35.055 --> 00:13:37.775
<v Speaker 1>yeah, not fun part was to do a

00:13:37.775 --> 00:13:40.735
<v Speaker 1>change, commit it, push it and wait for

00:13:40.735 --> 00:13:41.695
<v Speaker 1>Jenkins,

00:13:41.695 --> 00:13:44.095
<v Speaker 1>GitLab, whatever to finish a pipeline.

00:13:44.720 --> 00:13:46.240
<v Speaker 1>And just after

00:13:46.960 --> 00:13:49.120
<v Speaker 1>a few minutes knowing that my change was

00:13:49.120 --> 00:13:51.520
<v Speaker 1>actually broken and then redoing the same workflow

00:13:51.520 --> 00:13:52.960
<v Speaker 1>again and again and again.

00:13:53.600 --> 00:13:56.240
<v Speaker 1>So that means I want to develop locally

00:13:56.240 --> 00:13:57.760
<v Speaker 1>and I want to test locally,

00:13:58.904 --> 00:14:01.464
<v Speaker 1>And I mean everything. So I must be

00:14:01.464 --> 00:14:03.865
<v Speaker 1>able to completely verify locally that my deployment

00:14:03.865 --> 00:14:06.505
<v Speaker 1>will actually work no matter how simple it

00:14:06.505 --> 00:14:08.745
<v Speaker 1>is, no matter how complex it is, no

00:14:08.745 --> 00:14:11.305
<v Speaker 1>matter how small or large my change was.

00:14:14.710 --> 00:14:17.270
<v Speaker 1>Based on that, day two operations should be

00:14:17.270 --> 00:14:19.030
<v Speaker 1>supported in some way or at least made

00:14:19.030 --> 00:14:19.670
<v Speaker 1>easier.

00:14:19.910 --> 00:14:21.990
<v Speaker 1>That means I must always be able to

00:14:21.990 --> 00:14:24.230
<v Speaker 1>determine the current state of my deployments, so

00:14:24.230 --> 00:14:26.390
<v Speaker 1>not just look at Git, for example,

00:14:26.915 --> 00:14:29.555
<v Speaker 1>and see, okay, that's the state how it's

00:14:29.555 --> 00:14:31.475
<v Speaker 1>defined. I must also be able to verify

00:14:31.475 --> 00:14:33.155
<v Speaker 1>that this is really the state of the

00:14:33.155 --> 00:14:33.875
<v Speaker 1>cluster.

00:14:35.395 --> 00:14:38.355
<v Speaker 1>GitOps kind of allows that, but not in

00:14:38.355 --> 00:14:38.835
<v Speaker 1>all cases.

00:14:41.250 --> 00:14:43.010
<v Speaker 1>And if you want to mix DevOps with

00:14:43.010 --> 00:14:45.730
<v Speaker 1>GitOps, then you need other ways as well.

00:14:47.810 --> 00:14:49.330
<v Speaker 1>Next thing is I must always be able

00:14:49.330 --> 00:14:51.650
<v Speaker 1>to predict what consequences my changes will have.

00:14:51.650 --> 00:14:54.770
<v Speaker 1>That means if I change a helm value,

00:14:54.770 --> 00:14:55.250
<v Speaker 1>for example,

00:14:56.435 --> 00:14:59.955
<v Speaker 1>I must know what consequences that change has.

00:15:00.435 --> 00:15:02.435
<v Speaker 1>Just looking at the changes in git will

00:15:02.435 --> 00:15:04.115
<v Speaker 1>just tell me, for example, that one value

00:15:04.115 --> 00:15:04.995
<v Speaker 1>has changed.

00:15:05.235 --> 00:15:08.195
<v Speaker 1>But the templating behind helm might result in

00:15:08.195 --> 00:15:10.835
<v Speaker 1>very big structural changes of whatever I deploy,

00:15:11.110 --> 00:15:12.950
<v Speaker 1>And I must have a way to actually

00:15:12.950 --> 00:15:15.030
<v Speaker 1>see these changes, for example, by having a

00:15:15.030 --> 00:15:17.590
<v Speaker 1>dry run being applied and then seeing the

00:15:17.590 --> 00:15:19.910
<v Speaker 1>logical diff or the structural diff.

00:15:21.270 --> 00:15:23.350
<v Speaker 1>Then I must always be able to

00:15:23.750 --> 00:15:27.590
<v Speaker 1>determine what consequences my changes actually had. So

00:15:26.925 --> 00:15:28.045
<v Speaker 1>even if I

00:15:28.845 --> 00:15:30.685
<v Speaker 1>assume that this will happen, I must later

00:15:30.685 --> 00:15:32.365
<v Speaker 1>be able to verify that it happened.

00:15:33.084 --> 00:15:35.644
<v Speaker 1>That means I want this, this, this, and

00:15:35.644 --> 00:15:38.205
<v Speaker 1>much more this and not just keep this.

00:15:40.130 --> 00:15:42.529
<v Speaker 1>So basically, that means what I just explained.

00:15:42.529 --> 00:15:44.529
<v Speaker 1>A change in a HIM value does not

00:15:44.529 --> 00:15:46.690
<v Speaker 1>reflect what really will happen. I want to

00:15:46.690 --> 00:15:47.810
<v Speaker 1>have a full

00:15:48.370 --> 00:15:50.210
<v Speaker 1>diff of the state

00:15:50.690 --> 00:15:52.290
<v Speaker 1>before and after my change.

00:15:55.905 --> 00:15:57.585
<v Speaker 1>Yeah. If these requirements are met, I think

00:15:57.585 --> 00:15:59.425
<v Speaker 1>that DevOps or the daily business as a

00:15:59.425 --> 00:16:01.185
<v Speaker 1>DevOps engineer becomes a breeze

00:16:01.745 --> 00:16:04.145
<v Speaker 1>because you get into a point where

00:16:05.265 --> 00:16:06.305
<v Speaker 1>a change

00:16:06.545 --> 00:16:08.225
<v Speaker 1>doesn't

00:16:07.770 --> 00:16:08.650
<v Speaker 1>make you

00:16:10.570 --> 00:16:11.450
<v Speaker 1>paranoid

00:16:11.690 --> 00:16:13.850
<v Speaker 1>or cause fear and

00:16:14.330 --> 00:16:15.130
<v Speaker 1>kind of

00:16:17.130 --> 00:16:18.970
<v Speaker 1>make you avoid doing changes to plot or

00:16:18.970 --> 00:16:19.610
<v Speaker 1>something like that.

00:16:21.375 --> 00:16:23.215
<v Speaker 1>Yeah. Opening the gates to hell.

00:16:23.695 --> 00:16:26.015
<v Speaker 1>All the available tools on their own

00:16:26.495 --> 00:16:28.815
<v Speaker 1>were not able to solve all these requirements

00:16:28.815 --> 00:16:30.095
<v Speaker 1>in the last few years.

00:16:30.575 --> 00:16:32.495
<v Speaker 1>It was always required to do some kind

00:16:32.495 --> 00:16:34.015
<v Speaker 1>of deployment orchestration

00:16:34.280 --> 00:16:36.840
<v Speaker 1>or glue code, as I call it.

00:16:37.720 --> 00:16:40.040
<v Speaker 1>It and from my experience, it always starts

00:16:40.040 --> 00:16:42.200
<v Speaker 1>like, it's just a few lines of bash.

00:16:42.200 --> 00:16:44.200
<v Speaker 1>Let's start with the deploy.sh,

00:16:44.520 --> 00:16:45.560
<v Speaker 1>tell it which

00:16:46.200 --> 00:16:47.640
<v Speaker 1>environment to deploy it to, and then we

00:16:47.640 --> 00:16:47.960
<v Speaker 1>are happy.

00:16:49.825 --> 00:16:51.665
<v Speaker 1>I'd say a %,

00:16:51.745 --> 00:16:53.745
<v Speaker 1>you'll wake up in hell after some time.

00:16:53.985 --> 00:16:55.665
<v Speaker 1>So at least use Python

00:16:56.785 --> 00:16:58.865
<v Speaker 1>or maybe a dedicated tool that solves all

00:16:58.865 --> 00:16:59.185
<v Speaker 1>this.

00:17:01.840 --> 00:17:04.560
<v Speaker 1>Yeah. So next next one is actually introduce

00:17:04.560 --> 00:17:06.480
<v Speaker 1>you closely. Do you have any questions or

00:17:06.480 --> 00:17:07.520
<v Speaker 1>comments so far?

00:17:08.800 --> 00:17:10.960
<v Speaker 0>I would say that based on what you've

00:17:10.960 --> 00:17:11.760
<v Speaker 0>described,

00:17:12.880 --> 00:17:15.040
<v Speaker 0>clear control is promising a lot, and I'm

00:17:15.040 --> 00:17:16.934
<v Speaker 0>quite excited to what we're we're gonna see

00:17:16.934 --> 00:17:19.095
<v Speaker 0>in this definition. Like, you've touched on a

00:17:19.095 --> 00:17:21.335
<v Speaker 0>lot of really valid concerns,

00:17:21.335 --> 00:17:23.815
<v Speaker 0>like Yeah. You know, especially the helm one

00:17:23.815 --> 00:17:26.054
<v Speaker 0>resonates well with me. I've been in that

00:17:26.054 --> 00:17:28.054
<v Speaker 0>position before where you make what you think

00:17:28.054 --> 00:17:30.160
<v Speaker 0>of it as a professional change to the

00:17:30.160 --> 00:17:32.160
<v Speaker 0>values dot YAML, and then you end up

00:17:32.160 --> 00:17:34.800
<v Speaker 0>destroying the entire deployment in a production environment

00:17:34.800 --> 00:17:37.280
<v Speaker 0>or maybe even not production, but still an

00:17:37.280 --> 00:17:39.360
<v Speaker 0>important environment because prod isn't the only one

00:17:39.360 --> 00:17:41.279
<v Speaker 0>that important. Yeah.

00:17:42.000 --> 00:17:43.840
<v Speaker 1>In the end, every environment is important because

00:17:43.840 --> 00:17:46.265
<v Speaker 1>if it causes you extra work to fix

00:17:46.265 --> 00:17:47.384
<v Speaker 1>what you just broke,

00:17:48.345 --> 00:17:50.184
<v Speaker 1>I mean, you've you've lost time that you

00:17:50.184 --> 00:17:52.024
<v Speaker 1>could have spent in different ways. But I

00:17:52.024 --> 00:17:53.705
<v Speaker 0>don't QA. It could be staging. It could

00:17:53.705 --> 00:17:56.105
<v Speaker 0>be performance. It could be p prod. Like,

00:17:56.105 --> 00:17:58.505
<v Speaker 0>all of these environments need care and attention.

00:17:58.505 --> 00:18:00.024
<v Speaker 0>And, yeah, I don't like being the one

00:18:00.024 --> 00:18:02.020
<v Speaker 0>to break it. So and I've done it

00:18:02.020 --> 00:18:04.100
<v Speaker 0>before with a helm values thing. It's something,

00:18:04.100 --> 00:18:07.140
<v Speaker 0>again, trivial. I'll just change this one parameter,

00:18:07.140 --> 00:18:09.780
<v Speaker 0>but actually, the repercussions of that lie deep

00:18:09.780 --> 00:18:12.500
<v Speaker 0>and cascade down all the other deployments. So

00:18:12.675 --> 00:18:14.835
<v Speaker 0>Yeah. I'm excited to see what Kluctl control

00:18:14.835 --> 00:18:16.835
<v Speaker 0>is gonna bring to kinda bring that under

00:18:16.835 --> 00:18:17.555
<v Speaker 0>management.

00:18:18.035 --> 00:18:19.715
<v Speaker 1>Yeah. So no questions right now, but a

00:18:19.715 --> 00:18:20.595
<v Speaker 0>lot of excitement.

00:18:21.315 --> 00:18:23.395
<v Speaker 1>That sounds good. That's a good start. Maybe

00:18:24.035 --> 00:18:25.475
<v Speaker 1>to to get more to that point with

00:18:25.475 --> 00:18:26.035
<v Speaker 1>with Helm.

00:18:27.169 --> 00:18:29.010
<v Speaker 1>So when you have when you are using

00:18:29.010 --> 00:18:31.169
<v Speaker 1>Helm and, like, you're using a lot of

00:18:31.169 --> 00:18:34.610
<v Speaker 1>Helm charts, you, of course, have to maintain

00:18:34.610 --> 00:18:36.849
<v Speaker 1>the used Helm charts in the form of

00:18:37.330 --> 00:18:40.289
<v Speaker 1>doing updates and pulling in changes or new

00:18:40.289 --> 00:18:41.330
<v Speaker 1>versions and stuff like that.

00:18:42.225 --> 00:18:42.865
<v Speaker 1>And

00:18:44.145 --> 00:18:45.024
<v Speaker 1>so

00:18:45.825 --> 00:18:48.544
<v Speaker 1>without proper tooling, you are kind of blind.

00:18:48.945 --> 00:18:51.025
<v Speaker 1>You see, oh, there's a new Redis release.

00:18:51.025 --> 00:18:54.145
<v Speaker 1>Let's pull it and deploy it, and we

00:18:54.145 --> 00:18:56.289
<v Speaker 1>are happy. The problem is, Redis is good

00:18:56.289 --> 00:18:58.369
<v Speaker 1>example, at some point, they changed,

00:18:59.809 --> 00:19:03.169
<v Speaker 1>I think, slave to replicas in the

00:19:04.049 --> 00:19:05.169
<v Speaker 1>deployment mode,

00:19:06.450 --> 00:19:09.090
<v Speaker 1>which meant that your existing configuration

00:19:09.090 --> 00:19:10.129
<v Speaker 1>was invalid

00:19:11.145 --> 00:19:13.545
<v Speaker 1>because you are still you were still using

00:19:13.545 --> 00:19:16.345
<v Speaker 1>the old naming for the deployment mode,

00:19:16.665 --> 00:19:19.145
<v Speaker 1>which would completely break your deployment without you

00:19:19.145 --> 00:19:20.825
<v Speaker 1>having changed any of your configuration.

00:19:21.305 --> 00:19:23.225
<v Speaker 1>So what you actually need is

00:19:23.465 --> 00:19:24.825
<v Speaker 1>you need a way to

00:19:25.350 --> 00:19:28.149
<v Speaker 1>dry run or do a diff

00:19:29.910 --> 00:19:32.150
<v Speaker 1>for the changes that you just did or

00:19:32.150 --> 00:19:33.990
<v Speaker 1>if you do helm updates and stuff like

00:19:33.990 --> 00:19:35.749
<v Speaker 1>that. So I can say that

00:19:35.990 --> 00:19:38.230
<v Speaker 1>the projects where Kluctl is in use, we

00:19:38.230 --> 00:19:40.070
<v Speaker 1>have no problem with helm updates at all.

00:19:40.070 --> 00:19:42.465
<v Speaker 1>We do it once a week. We go

00:19:42.465 --> 00:19:43.745
<v Speaker 1>through all the projects

00:19:43.825 --> 00:19:44.385
<v Speaker 1>and

00:19:44.705 --> 00:19:47.905
<v Speaker 1>update dozens of helm charts every single week.

00:19:48.145 --> 00:19:50.225
<v Speaker 1>And we are completely confident that it will

00:19:50.225 --> 00:19:51.745
<v Speaker 1>not break stuff because

00:19:51.905 --> 00:19:53.745
<v Speaker 1>if it will break stuff, we will know

00:19:53.745 --> 00:19:55.665
<v Speaker 1>it before it breaks stuff because we just

00:19:55.665 --> 00:19:55.985
<v Speaker 1>see it.

00:19:57.480 --> 00:19:59.960
<v Speaker 0>Yeah. There's a cool it's a slight segue,

00:19:59.960 --> 00:20:01.720
<v Speaker 0>but just because we're talking about helm and

00:20:01.720 --> 00:20:04.040
<v Speaker 0>changes, it's like one of the challenges is

00:20:04.040 --> 00:20:06.360
<v Speaker 0>that when you pick up a new version

00:20:06.360 --> 00:20:07.880
<v Speaker 0>of a helm chart, you really don't know

00:20:07.880 --> 00:20:09.575
<v Speaker 0>what's changed, and you don't know what's changed

00:20:09.575 --> 00:20:10.935
<v Speaker 0>to the templating. You don't know what's changed

00:20:10.935 --> 00:20:12.855
<v Speaker 0>in the schema for the values fail. Although

00:20:12.855 --> 00:20:14.775
<v Speaker 0>they are Yep. Trying to make improvements there.

00:20:16.055 --> 00:20:17.735
<v Speaker 0>And something I think is really cool that

00:20:17.735 --> 00:20:19.575
<v Speaker 0>we should take away from the JavaScript ecosystem.

00:20:19.575 --> 00:20:21.415
<v Speaker 0>And maybe something that Kluctl does, and I'm

00:20:21.415 --> 00:20:23.095
<v Speaker 0>just I don't know. Maybe I'm heading on

00:20:23.095 --> 00:20:25.659
<v Speaker 0>it. But is the ability to do snapshot

00:20:25.659 --> 00:20:28.539
<v Speaker 0>style testing where you actually take the render

00:20:28.539 --> 00:20:32.059
<v Speaker 0>to YAML and then validate that on every

00:20:32.059 --> 00:20:34.779
<v Speaker 0>subsequent deploy? Because quite often when we do

00:20:34.779 --> 00:20:36.779
<v Speaker 0>upgrades, we don't really expect the template to

00:20:36.779 --> 00:20:38.380
<v Speaker 0>YAML to change much. And if we do,

00:20:38.380 --> 00:20:38.940
<v Speaker 0>we need to know.

00:20:39.424 --> 00:20:41.585
<v Speaker 0>So yeah. Maybe it may hopefully, that's something

00:20:41.585 --> 00:20:43.184
<v Speaker 0>that Kluctl's going to do. Yeah. It does

00:20:43.184 --> 00:20:44.784
<v Speaker 1>it does on multiple levels.

00:20:45.345 --> 00:20:47.905
<v Speaker 1>So one level is the Helm integration assumes

00:20:47.905 --> 00:20:49.504
<v Speaker 1>that you pre pull

00:20:50.065 --> 00:20:52.465
<v Speaker 1>Helm charts and actually put them into your

00:20:52.465 --> 00:20:55.000
<v Speaker 1>version control. This has different reasons, which I

00:20:55.000 --> 00:20:57.240
<v Speaker 1>will explain later in the hands on. But

00:20:57.240 --> 00:20:59.640
<v Speaker 1>one side effect of that is if you

00:20:59.640 --> 00:21:01.720
<v Speaker 1>do that, you see in the GitDiffs or

00:21:01.720 --> 00:21:03.800
<v Speaker 1>in the merge request that you later do

00:21:03.800 --> 00:21:06.040
<v Speaker 1>to actually merge in the upgrade what has

00:21:06.040 --> 00:21:06.280
<v Speaker 1>changed.

00:21:07.414 --> 00:21:09.654
<v Speaker 1>If you want to, you can then

00:21:09.895 --> 00:21:12.615
<v Speaker 1>go deep into the Helm changes and verify

00:21:12.615 --> 00:21:14.534
<v Speaker 1>that nothing strange is happening.

00:21:14.855 --> 00:21:17.015
<v Speaker 1>Or then the next level applies. If you

00:21:17.015 --> 00:21:19.654
<v Speaker 1>do the deployment, Closedale will always do a

00:21:19.654 --> 00:21:22.054
<v Speaker 1>dry run before it actually does the deployment.

00:21:22.054 --> 00:21:23.335
<v Speaker 1>So it will tell you

00:21:23.870 --> 00:21:24.990
<v Speaker 1>line by line

00:21:25.950 --> 00:21:27.550
<v Speaker 1>what has changed.

00:21:27.790 --> 00:21:29.310
<v Speaker 1>So if, for example, you have a Helm

00:21:29.310 --> 00:21:32.510
<v Speaker 1>chart that changes hundreds of lines of templates,

00:21:33.310 --> 00:21:35.950
<v Speaker 1>but it's just refactoring because it changed some

00:21:35.950 --> 00:21:38.430
<v Speaker 1>naming or something like that, looking into Git

00:21:38.430 --> 00:21:41.075
<v Speaker 1>would be not so fun because you would

00:21:41.075 --> 00:21:42.434
<v Speaker 1>see a lot of changes that actually have

00:21:42.434 --> 00:21:43.315
<v Speaker 1>no effect.

00:21:43.475 --> 00:21:45.154
<v Speaker 1>But when you later do the occlusal d

00:21:45.154 --> 00:21:46.914
<v Speaker 1>l diff or deploy, you will see that

00:21:46.914 --> 00:21:48.994
<v Speaker 1>nothing has changed and you can be confident

00:21:49.154 --> 00:21:52.195
<v Speaker 1>that deploying that to whatever environment you want

00:21:52.195 --> 00:21:53.315
<v Speaker 1>wouldn't do any harm.

00:21:54.480 --> 00:21:56.480
<v Speaker 1>So Right. I said multiple

00:21:56.480 --> 00:21:57.200
<v Speaker 1>levels.

00:21:59.200 --> 00:22:00.399
<v Speaker 1>Yeah. So

00:22:00.960 --> 00:22:03.519
<v Speaker 1>where I'm right now okay. Introducing.

00:22:04.320 --> 00:22:07.174
<v Speaker 1>So after multiple incarnations of such scripts, so

00:22:07.174 --> 00:22:09.735
<v Speaker 1>it always started like a deploy. Sh and

00:22:09.735 --> 00:22:12.054
<v Speaker 1>first parameter was the environment name, and then

00:22:12.054 --> 00:22:14.455
<v Speaker 1>internally, it knew what to do, which hand

00:22:14.455 --> 00:22:17.414
<v Speaker 1>charts to deploy and which environment needs to

00:22:17.895 --> 00:22:20.615
<v Speaker 1>do stuff differently, when to wait on stuff,

00:22:20.615 --> 00:22:21.815
<v Speaker 1>order, and so on.

00:22:23.600 --> 00:22:25.359
<v Speaker 1>After some time, I figured out

00:22:25.919 --> 00:22:28.559
<v Speaker 1>that the requirements are always the same, the

00:22:28.559 --> 00:22:30.159
<v Speaker 1>requirements that I just described,

00:22:30.399 --> 00:22:32.720
<v Speaker 1>and that at that point, maybe it's time

00:22:32.720 --> 00:22:35.279
<v Speaker 1>to have a unified solution, something that does

00:22:35.279 --> 00:22:36.159
<v Speaker 1>all this

00:22:36.320 --> 00:22:38.240
<v Speaker 1>in the way I would expect it.

00:22:39.015 --> 00:22:41.335
<v Speaker 1>I hope that it resonates with other people's

00:22:41.335 --> 00:22:42.775
<v Speaker 1>requirements and

00:22:43.255 --> 00:22:44.135
<v Speaker 1>feelings,

00:22:44.215 --> 00:22:46.535
<v Speaker 1>but, yeah, that's what we will discover after

00:22:46.535 --> 00:22:47.175
<v Speaker 1>some time.

00:22:47.895 --> 00:22:50.295
<v Speaker 1>First version was written in Python. Yeah. Actually,

00:22:50.295 --> 00:22:52.455
<v Speaker 1>the first version was Bash,

00:22:52.455 --> 00:22:53.975
<v Speaker 1>but then I turned to Python.

00:22:54.660 --> 00:22:57.300
<v Speaker 1>It was very specific to the projects that

00:22:57.300 --> 00:22:59.140
<v Speaker 1>I started to work on, that I worked

00:22:59.140 --> 00:23:00.100
<v Speaker 1>in the beginning,

00:23:01.620 --> 00:23:02.900
<v Speaker 1>mostly for my

00:23:03.700 --> 00:23:05.380
<v Speaker 1>customer and sponsor

00:23:05.540 --> 00:23:07.460
<v Speaker 1>this project. A big thanks to Helman, by

00:23:07.460 --> 00:23:08.660
<v Speaker 1>the way, if these people are listening.

00:23:11.755 --> 00:23:14.075
<v Speaker 1>And after some time, it got more generic

00:23:14.715 --> 00:23:16.795
<v Speaker 1>and was able to handle all kinds of

00:23:16.795 --> 00:23:17.595
<v Speaker 1>deployments.

00:23:17.835 --> 00:23:20.075
<v Speaker 1>It was not specific anymore to what they

00:23:20.075 --> 00:23:20.715
<v Speaker 1>did internally.

00:23:22.330 --> 00:23:24.890
<v Speaker 1>In the end, I decided to rewrite in

00:23:24.890 --> 00:23:26.730
<v Speaker 1>one so one

00:23:26.730 --> 00:23:28.250
<v Speaker 1>last time in Go

00:23:28.490 --> 00:23:30.010
<v Speaker 1>to actually have something

00:23:30.250 --> 00:23:31.450
<v Speaker 1>that integrates

00:23:31.610 --> 00:23:34.090
<v Speaker 1>very well into the Kubernetes ecosystem, which is

00:23:34.625 --> 00:23:36.545
<v Speaker 1>not so true with Python. I mean, it's

00:23:36.545 --> 00:23:38.065
<v Speaker 1>okay. You still have a lot of libraries

00:23:38.065 --> 00:23:40.705
<v Speaker 1>to work with the Kubernetes ecosystem, but it's

00:23:40.705 --> 00:23:41.825
<v Speaker 1>still better in Go.

00:23:42.065 --> 00:23:44.865
<v Speaker 1>Current status says version 2.15.

00:23:46.465 --> 00:23:48.705
<v Speaker 1>Next release is going to happen the next

00:23:48.705 --> 00:23:49.025
<v Speaker 1>days.

00:23:51.080 --> 00:23:52.200
<v Speaker 1>I personally

00:23:52.200 --> 00:23:54.360
<v Speaker 1>and my customers so far consider it stable

00:23:54.360 --> 00:23:56.600
<v Speaker 1>enough to be used in production.

00:23:58.360 --> 00:23:59.559
<v Speaker 1>So that's

00:23:59.560 --> 00:24:01.560
<v Speaker 1>about Are you going to do one more

00:24:01.560 --> 00:24:03.320
<v Speaker 0>last time rewrite and Rust?

00:24:05.144 --> 00:24:07.144
<v Speaker 1>Funny that that you say that. People have

00:24:07.144 --> 00:24:09.224
<v Speaker 1>actually tried to motivate me to do that.

00:24:10.345 --> 00:24:12.504
<v Speaker 1>I never looked into Rust. Not at all.

00:24:12.505 --> 00:24:14.184
<v Speaker 1>I'm pretty sure that it's

00:24:14.985 --> 00:24:17.945
<v Speaker 1>nice because that's what people tell me, but

00:24:18.750 --> 00:24:21.470
<v Speaker 1>let's put it this way. Rewriting it from

00:24:21.470 --> 00:24:23.630
<v Speaker 1>Python to Go was already a challenge,

00:24:23.790 --> 00:24:27.150
<v Speaker 1>and I'm happy with it right now. Awesome.

00:24:27.550 --> 00:24:29.470
<v Speaker 0>Sorry. I I won't distract you anymore. Carry

00:24:29.470 --> 00:24:31.950
<v Speaker 0>on, please. No. No. Do that. That's perfectly

00:24:31.950 --> 00:24:32.270
<v Speaker 1>fine.

00:24:34.395 --> 00:24:36.635
<v Speaker 1>So ClueScale tries to fulfill all the mentioned

00:24:36.635 --> 00:24:37.434
<v Speaker 1>requirements.

00:24:38.235 --> 00:24:39.515
<v Speaker 1>It does that by

00:24:39.915 --> 00:24:43.035
<v Speaker 1>have a natural and dynamic project structure. What

00:24:43.035 --> 00:24:43.674
<v Speaker 1>it means

00:24:44.075 --> 00:24:46.715
<v Speaker 1>will be I'll show it later when doing

00:24:46.715 --> 00:24:49.370
<v Speaker 1>the hands on. It's mostly decorative

00:24:49.370 --> 00:24:51.930
<v Speaker 1>but kind of imperative when needed. That means

00:24:51.930 --> 00:24:54.009
<v Speaker 1>we can still define the order.

00:24:54.250 --> 00:24:56.890
<v Speaker 1>We can deploy a namespace before actually deploying

00:24:56.890 --> 00:24:59.370
<v Speaker 1>objects into it. We can deploy CRDs before

00:24:59.370 --> 00:25:00.970
<v Speaker 1>actually deploying the CRs.

00:25:02.815 --> 00:25:04.895
<v Speaker 1>So many issues that I see with

00:25:05.215 --> 00:25:07.615
<v Speaker 1>customized or Helm or GitOps

00:25:08.015 --> 00:25:09.135
<v Speaker 1>can be solved

00:25:09.535 --> 00:25:11.935
<v Speaker 1>in that way by not being 100%

00:25:11.935 --> 00:25:12.895
<v Speaker 1>declarative.

00:25:13.855 --> 00:25:16.889
<v Speaker 1>It has native environments, so a first class

00:25:16.889 --> 00:25:19.609
<v Speaker 1>concept of environments. I call them targets

00:25:19.769 --> 00:25:21.929
<v Speaker 1>because after some time, I realized that

00:25:22.169 --> 00:25:24.649
<v Speaker 1>you don't only deploy

00:25:24.809 --> 00:25:25.929
<v Speaker 1>environments.

00:25:26.250 --> 00:25:28.730
<v Speaker 1>Sometimes you deploy stuff to a cluster, which

00:25:28.730 --> 00:25:31.715
<v Speaker 1>is, for example, base infrastructure stuff, and I

00:25:31.715 --> 00:25:34.275
<v Speaker 1>wouldn't call that an environment. It's the dev

00:25:34.275 --> 00:25:36.434
<v Speaker 1>cluster, but not the dev environment,

00:25:36.515 --> 00:25:39.554
<v Speaker 1>so I decided to call that concept targets.

00:25:40.675 --> 00:25:42.674
<v Speaker 1>Templating is possible everywhere,

00:25:42.755 --> 00:25:44.275
<v Speaker 1>absolutely everywhere.

00:25:44.835 --> 00:25:46.835
<v Speaker 1>There are one or two exceptions, but it's

00:25:46.835 --> 00:25:48.040
<v Speaker 1>really minimal.

00:25:48.600 --> 00:25:51.240
<v Speaker 1>This also includes helm values dot YAML, so

00:25:51.240 --> 00:25:52.520
<v Speaker 1>you don't have to write

00:25:52.680 --> 00:25:54.760
<v Speaker 1>five different helm values

00:25:55.320 --> 00:25:56.200
<v Speaker 1>files

00:25:56.200 --> 00:25:57.480
<v Speaker 1>for five different

00:25:58.840 --> 00:26:01.320
<v Speaker 1>environments. You can write one and use templating

00:26:01.320 --> 00:26:01.880
<v Speaker 1>to

00:26:02.135 --> 00:26:04.535
<v Speaker 1>actually do the one small change that is

00:26:04.535 --> 00:26:06.215
<v Speaker 1>required to make it work on prod and

00:26:06.215 --> 00:26:07.415
<v Speaker 1>test at the same time.

00:26:07.815 --> 00:26:09.735
<v Speaker 1>It offers a unified CLI.

00:26:10.695 --> 00:26:13.415
<v Speaker 1>That means whatever deployment you have at hand,

00:26:13.655 --> 00:26:15.415
<v Speaker 1>you always use it the same way. You

00:26:15.415 --> 00:26:18.100
<v Speaker 1>do a deploy for the target, so you

00:26:18.100 --> 00:26:19.379
<v Speaker 1>call Kluctl,

00:26:19.460 --> 00:26:20.739
<v Speaker 1>a Kluctl control,

00:26:21.460 --> 00:26:22.499
<v Speaker 1>deploy

00:26:22.820 --> 00:26:24.740
<v Speaker 1>-t and the target name. You do the

00:26:24.740 --> 00:26:25.859
<v Speaker 1>same with diff,

00:26:26.100 --> 00:26:28.179
<v Speaker 1>with delete, with prune and so on.

00:26:28.659 --> 00:26:30.659
<v Speaker 1>So that means if you know how to

00:26:30.659 --> 00:26:33.059
<v Speaker 1>use Kluctl, you know how to

00:26:33.515 --> 00:26:34.875
<v Speaker 1>deploy anything with that.

00:26:35.275 --> 00:26:36.395
<v Speaker 1>I reuse

00:26:36.635 --> 00:26:38.795
<v Speaker 1>Helm and customize as much as possible, and

00:26:38.795 --> 00:26:39.915
<v Speaker 1>they are actually customized

00:26:40.395 --> 00:26:42.075
<v Speaker 1>as the low level building block.

00:26:42.875 --> 00:26:45.995
<v Speaker 1>The most low level part is customized and

00:26:45.995 --> 00:26:47.275
<v Speaker 1>the resources

00:26:47.050 --> 00:26:48.810
<v Speaker 1>that customize customize

00:26:48.810 --> 00:26:50.169
<v Speaker 1>is customizing.

00:26:51.290 --> 00:26:54.169
<v Speaker 1>So let's stop with the presentation and actually

00:26:54.330 --> 00:26:56.730
<v Speaker 1>do the hands on. Let's do it.

00:26:57.370 --> 00:26:58.250
<v Speaker 1>Great.

00:26:58.250 --> 00:26:58.650
<v Speaker 1>Any

00:26:59.145 --> 00:27:01.225
<v Speaker 1>comments, questions before I start?

00:27:01.625 --> 00:27:04.505
<v Speaker 0>Nope. We just wanna see an action.

00:27:04.985 --> 00:27:06.665
<v Speaker 0>Sorry. Lost my voice there. Yeah. We just

00:27:06.665 --> 00:27:08.105
<v Speaker 0>wanna see an action then.

00:27:08.745 --> 00:27:09.625
<v Speaker 1>Great.

00:27:09.865 --> 00:27:10.585
<v Speaker 1>I have that.

00:27:11.640 --> 00:27:13.560
<v Speaker 1>Do you see that as well? I'm Presentation

00:27:13.560 --> 00:27:15.080
<v Speaker 0>mode just so that we can

00:27:15.960 --> 00:27:17.400
<v Speaker 1>Oh oh, yeah.

00:27:18.440 --> 00:27:20.840
<v Speaker 1>They need to move that thing away here.

00:27:22.520 --> 00:27:24.280
<v Speaker 1>So presentation mode.

00:27:24.680 --> 00:27:25.560
<v Speaker 0>Awesome. Thank you.

00:27:26.404 --> 00:27:27.924
<v Speaker 1>And I need to console.

00:27:28.325 --> 00:27:29.124
<v Speaker 1>Great.

00:27:30.164 --> 00:27:30.804
<v Speaker 1>So

00:27:31.445 --> 00:27:33.845
<v Speaker 1>first thing we, of course, need, as always,

00:27:33.845 --> 00:27:36.645
<v Speaker 1>with everything related to Kubernetes is Kubernetes cluster.

00:27:36.645 --> 00:27:37.845
<v Speaker 1>I decided to just use kind.

00:27:40.340 --> 00:27:42.580
<v Speaker 1>Let's start with a single kind cluster.

00:27:44.100 --> 00:27:44.900
<v Speaker 1>Theoretically,

00:27:44.900 --> 00:27:47.620
<v Speaker 1>I could create multiple kind clusters and then

00:27:47.620 --> 00:27:50.740
<v Speaker 1>show everything based on these two clusters. I'll

00:27:50.740 --> 00:27:53.140
<v Speaker 1>just use one for simplicity and instead,

00:27:53.875 --> 00:27:55.554
<v Speaker 1>let's say, deploy

00:27:55.554 --> 00:27:56.914
<v Speaker 1>multiple environments

00:27:57.315 --> 00:27:59.395
<v Speaker 1>just by changing namespaces.

00:27:59.395 --> 00:28:00.354
<v Speaker 1>I could also

00:28:01.794 --> 00:28:03.554
<v Speaker 1>do it with multiple clusters. Maybe we have

00:28:03.554 --> 00:28:05.315
<v Speaker 1>time later and we can actually show that.

00:28:20.715 --> 00:28:22.875
<v Speaker 1>So which targets can be deployed to. As

00:28:22.875 --> 00:28:23.674
<v Speaker 1>an example,

00:28:25.195 --> 00:28:28.075
<v Speaker 1>let's have one that we call dev.

00:28:31.835 --> 00:28:34.235
<v Speaker 1>I'll explain that in a second, and one

00:28:34.235 --> 00:28:36.230
<v Speaker 1>that is called prod.

00:28:37.670 --> 00:28:39.990
<v Speaker 1>If you have any wishes, just tell me.

00:28:42.070 --> 00:28:44.310
<v Speaker 1>Any additional targets or something like that?

00:28:45.750 --> 00:28:46.310
<v Speaker 1>So

00:28:47.190 --> 00:28:49.085
<v Speaker 1>I think name is obvious. It's the name

00:28:49.085 --> 00:28:51.245
<v Speaker 1>of the target. When I later call Kluctl

00:28:51.885 --> 00:28:53.485
<v Speaker 1>Kluctl control I

00:28:54.205 --> 00:28:55.965
<v Speaker 1>think I'll just say Kluctl from now on

00:28:55.965 --> 00:28:57.805
<v Speaker 1>because Yeah. Go first. It it seems to

00:28:57.805 --> 00:28:59.005
<v Speaker 1>be in my mind already.

00:29:00.525 --> 00:29:01.085
<v Speaker 1>So

00:29:01.590 --> 00:29:04.309
<v Speaker 1>whenever I call it, I'll give it the

00:29:04.309 --> 00:29:06.470
<v Speaker 1>name of the targets that I'm referring to,

00:29:06.470 --> 00:29:07.990
<v Speaker 1>which will be this one.

00:29:09.830 --> 00:29:11.590
<v Speaker 1>I'm But the context is just the kubectl

00:29:11.590 --> 00:29:13.030
<v Speaker 0>contact. Right? Exactly.

00:29:13.365 --> 00:29:15.845
<v Speaker 1>The idea is that the target itself is

00:29:15.845 --> 00:29:17.445
<v Speaker 1>bound to the context that you want to

00:29:17.445 --> 00:29:18.325
<v Speaker 1>deploy it to.

00:29:18.645 --> 00:29:20.485
<v Speaker 1>So you don't have to mess around with

00:29:20.485 --> 00:29:21.284
<v Speaker 1>your local

00:29:21.685 --> 00:29:23.365
<v Speaker 1>context. You don't have to set it before.

00:29:23.365 --> 00:29:24.805
<v Speaker 1>You don't have to ensure that you're in

00:29:24.805 --> 00:29:25.845
<v Speaker 1>the correct context.

00:29:26.165 --> 00:29:26.645
<v Speaker 1>The

00:29:27.289 --> 00:29:29.210
<v Speaker 1>target is bound to that one. You can

00:29:29.210 --> 00:29:32.330
<v Speaker 1>override it, but you normally wouldn't do that.

00:29:32.490 --> 00:29:34.970
<v Speaker 1>You can also work without the context here,

00:29:34.970 --> 00:29:36.809
<v Speaker 1>and then it will behave the same as

00:29:36.970 --> 00:29:40.570
<v Speaker 1>kubectl is, for example, working, just uses the

00:29:39.805 --> 00:29:41.085
<v Speaker 1>current active context.

00:29:41.725 --> 00:29:45.005
<v Speaker 1>I prefer to always explicitly set the context

00:29:45.005 --> 00:29:48.045
<v Speaker 1>because then it just it's just impossible to

00:29:48.045 --> 00:29:49.885
<v Speaker 1>deploy dev to prods by accident.

00:29:50.285 --> 00:29:53.245
<v Speaker 1>In this example, I'm using the same context

00:29:53.245 --> 00:29:55.800
<v Speaker 1>twice. We are deploying to the same cluster,

00:29:55.800 --> 00:29:58.200
<v Speaker 1>which is also fine because, I mean, there

00:29:58.200 --> 00:30:00.679
<v Speaker 1>might be a test cluster running two different

00:30:02.040 --> 00:30:04.840
<v Speaker 1>environments for testing purposes, or every developer has

00:30:04.840 --> 00:30:06.040
<v Speaker 1>its own environment and so on.

00:30:07.105 --> 00:30:09.505
<v Speaker 1>And in this case, just to showing it's

00:30:09.505 --> 00:30:11.104
<v Speaker 1>just using the same cluster.

00:30:13.345 --> 00:30:15.024
<v Speaker 1>So that's the targets.

00:30:15.265 --> 00:30:18.145
<v Speaker 0>I'm assuming you can enrich that with a

00:30:18.145 --> 00:30:19.825
<v Speaker 0>namespace somehow for prod?

00:30:21.440 --> 00:30:22.960
<v Speaker 1>Yeah. That's what I'm going to do in

00:30:22.960 --> 00:30:25.440
<v Speaker 1>the resources later through templating. Okay.

00:30:25.840 --> 00:30:27.760
<v Speaker 1>What I can do is let's do it

00:30:27.760 --> 00:30:30.080
<v Speaker 1>now. I can pass arguments

00:30:30.080 --> 00:30:31.200
<v Speaker 1>to targets.

00:30:31.520 --> 00:30:32.160
<v Speaker 1>For example,

00:30:34.205 --> 00:30:35.885
<v Speaker 1>let's call it arc one

00:30:39.485 --> 00:30:40.284
<v Speaker 1>and

00:30:40.925 --> 00:30:43.165
<v Speaker 1>give it this one. You could do whatever

00:30:43.165 --> 00:30:45.405
<v Speaker 1>you want here. Actually, this is plain YAML,

00:30:45.405 --> 00:30:47.404
<v Speaker 1>so I could also do

00:30:48.390 --> 00:30:50.150
<v Speaker 1>if it makes sense, I mean,

00:30:50.390 --> 00:30:51.030
<v Speaker 1>whatever.

00:30:53.110 --> 00:30:55.590
<v Speaker 1>At this point, you can do pass whatever

00:30:55.590 --> 00:30:57.430
<v Speaker 1>you want. I think those Rx can be

00:30:57.430 --> 00:30:59.270
<v Speaker 0>consumed in the template and language.

00:30:59.990 --> 00:31:03.024
<v Speaker 1>Sorry? I'm assuming those Rx can be used

00:31:03.024 --> 00:31:04.224
<v Speaker 0>within the templating.

00:31:04.865 --> 00:31:07.184
<v Speaker 1>Exactly. Okay. These Rx that you see that

00:31:07.184 --> 00:31:08.784
<v Speaker 1>you see see here are kind of the

00:31:08.784 --> 00:31:10.945
<v Speaker 1>entry point into the templating language.

00:31:11.265 --> 00:31:11.984
<v Speaker 1>It

00:31:12.225 --> 00:31:15.840
<v Speaker 1>is not supposed to, like, give this 10

00:31:15.840 --> 00:31:18.799
<v Speaker 1>pages of YAML here to configure your target.

00:31:19.040 --> 00:31:21.600
<v Speaker 1>Instead, you give it the actually, let's let's

00:31:21.600 --> 00:31:24.160
<v Speaker 1>do it different. Let's give an argument called

00:31:24.160 --> 00:31:25.919
<v Speaker 1>nth type and call it

00:31:26.559 --> 00:31:28.240
<v Speaker 1>non prod. I think that makes sense.

00:31:29.795 --> 00:31:30.355
<v Speaker 1>And one

00:31:30.995 --> 00:31:31.634
<v Speaker 1>so

00:31:34.115 --> 00:31:34.914
<v Speaker 1>we have

00:31:35.155 --> 00:31:37.715
<v Speaker 1>the argument end type, and we have two

00:31:37.715 --> 00:31:39.955
<v Speaker 1>flavors of it, non prod and prod. We

00:31:39.955 --> 00:31:41.395
<v Speaker 1>can give it whatever we want. It will

00:31:41.395 --> 00:31:42.195
<v Speaker 1>make sense later.

00:31:45.029 --> 00:31:46.950
<v Speaker 1>So the next thing that we need is

00:31:46.950 --> 00:31:48.149
<v Speaker 1>a deployment.

00:31:48.549 --> 00:31:49.429
<v Speaker 1>YAML.

00:31:50.070 --> 00:31:51.909
<v Speaker 1>This can get confusing. This is not a

00:31:51.909 --> 00:31:53.350
<v Speaker 1>Kubernetes deployment.

00:31:53.350 --> 00:31:55.429
<v Speaker 1>So it's not the kind deployment. It's a

00:31:55.429 --> 00:31:56.950
<v Speaker 1>Kluctl deployment.

00:31:57.110 --> 00:32:00.149
<v Speaker 1>And what it does is it defines

00:31:59.255 --> 00:32:00.695
<v Speaker 1>other deployments.

00:32:03.255 --> 00:32:05.255
<v Speaker 1>Let's start with a simple one,

00:32:06.135 --> 00:32:07.175
<v Speaker 1>namespaces.

00:32:11.575 --> 00:32:12.215
<v Speaker 1>So

00:32:12.535 --> 00:32:14.215
<v Speaker 1>this is a list of

00:32:14.680 --> 00:32:16.279
<v Speaker 1>deployment items.

00:32:16.760 --> 00:32:19.240
<v Speaker 1>An item can be or actually is always

00:32:19.240 --> 00:32:20.679
<v Speaker 1>a customized deployment.

00:32:22.520 --> 00:32:23.320
<v Speaker 1>So we

00:32:23.560 --> 00:32:25.880
<v Speaker 1>said we want to have namespaces.

00:32:26.360 --> 00:32:27.240
<v Speaker 1>This is,

00:32:27.640 --> 00:32:28.280
<v Speaker 1>as said,

00:32:29.215 --> 00:32:30.815
<v Speaker 1>customized.

00:32:34.254 --> 00:32:35.695
<v Speaker 1>Did I type it correctly?

00:32:36.495 --> 00:32:38.254
<v Speaker 0>I believe so. Yeah. This

00:32:39.534 --> 00:32:42.669
<v Speaker 1>is just customized. You can do always everything

00:32:42.669 --> 00:32:44.429
<v Speaker 1>that you can usually do in customize. You

00:32:44.429 --> 00:32:46.830
<v Speaker 1>can specify resources. You can use generators. You

00:32:46.830 --> 00:32:47.869
<v Speaker 1>can use patches,

00:32:48.190 --> 00:32:50.109
<v Speaker 1>whatever you need. Experience

00:32:50.269 --> 00:32:53.070
<v Speaker 1>shows that usually just resources is used.

00:32:53.390 --> 00:32:54.909
<v Speaker 1>Sometimes patches are used.

00:32:55.715 --> 00:32:58.195
<v Speaker 1>All the advanced features of customized, for example,

00:32:58.195 --> 00:33:00.755
<v Speaker 1>overlays and bases and so on,

00:33:01.155 --> 00:33:03.315
<v Speaker 1>you can use it, but at the point

00:33:03.315 --> 00:33:05.395
<v Speaker 1>where you start to use Kluctl,

00:33:05.635 --> 00:33:06.835
<v Speaker 1>you don't need it anymore.

00:33:07.600 --> 00:33:08.159
<v Speaker 1>So

00:33:08.639 --> 00:33:10.559
<v Speaker 1>you don't use it that often.

00:33:10.880 --> 00:33:11.440
<v Speaker 1>So

00:33:12.720 --> 00:33:14.559
<v Speaker 1>let's have a namespace YAML.

00:33:15.760 --> 00:33:18.000
<v Speaker 0>So why would you use a customization YAML

00:33:18.000 --> 00:33:21.055
<v Speaker 0>rather than just as a straight up Kubernetes

00:33:21.055 --> 00:33:23.695
<v Speaker 0>YAML? Like, if you're not using bases, you're

00:33:23.695 --> 00:33:25.855
<v Speaker 0>not using patches, would you not just have,

00:33:25.855 --> 00:33:27.855
<v Speaker 0>like, namespace dot YAML?

00:33:29.775 --> 00:33:31.135
<v Speaker 1>It's probably

00:33:31.455 --> 00:33:33.790
<v Speaker 1>just because of historical reasons. Because in the

00:33:33.790 --> 00:33:35.710
<v Speaker 1>beginning, this was just a wrap up for

00:33:35.710 --> 00:33:36.830
<v Speaker 1>for customize

00:33:37.150 --> 00:33:38.830
<v Speaker 1>Okay. And then got more and more and

00:33:38.830 --> 00:33:40.750
<v Speaker 1>more. I could implement that as an additional

00:33:40.750 --> 00:33:43.310
<v Speaker 1>feature to just not require the customization YAML.

00:33:43.310 --> 00:33:45.150
<v Speaker 1>Flux does something like that. If you specify

00:33:45.150 --> 00:33:46.110
<v Speaker 1>the customization

00:33:46.265 --> 00:33:48.585
<v Speaker 1>that does doesn't have a customization YAML, it

00:33:48.585 --> 00:33:49.705
<v Speaker 1>just treats all

00:33:49.945 --> 00:33:53.145
<v Speaker 1>YAMLs as customization resources by default.

00:33:53.865 --> 00:33:55.305
<v Speaker 1>I could do that as well.

00:33:55.945 --> 00:33:56.825
<v Speaker 1>Yeah. I

00:33:57.385 --> 00:33:59.945
<v Speaker 1>mean, one of my requirements was no boilerplate.

00:33:59.945 --> 00:34:02.210
<v Speaker 1>So, actually, I could apply that

00:34:02.450 --> 00:34:04.450
<v Speaker 1>same requirement here as well. Just

00:34:04.930 --> 00:34:06.770
<v Speaker 0>I'll open it, actually. Don't worry.

00:34:07.410 --> 00:34:09.570
<v Speaker 1>Perfect. That's what I want to see.

00:34:10.850 --> 00:34:12.610
<v Speaker 1>So we have namespace YAML.

00:34:14.645 --> 00:34:17.685
<v Speaker 1>Always struggle to remember simple stuff.

00:34:18.324 --> 00:34:19.685
<v Speaker 0>I think it's just Yep.

00:34:20.405 --> 00:34:22.085
<v Speaker 1>Kind namespace

00:34:22.964 --> 00:34:24.165
<v Speaker 1>metadata

00:34:24.645 --> 00:34:26.725
<v Speaker 1>names. Okay. Now it gets interesting.

00:34:26.885 --> 00:34:28.804
<v Speaker 1>So I could, of course, just have a

00:34:28.804 --> 00:34:29.764
<v Speaker 1>hard coded

00:34:30.060 --> 00:34:31.100
<v Speaker 1>name here,

00:34:31.500 --> 00:34:33.900
<v Speaker 1>but that's not fun. What we actually want

00:34:33.900 --> 00:34:34.860
<v Speaker 1>to do is,

00:34:35.980 --> 00:34:37.020
<v Speaker 1>let's say,

00:34:37.340 --> 00:34:38.860
<v Speaker 1>demo dash

00:34:38.860 --> 00:34:39.980
<v Speaker 1>and now

00:34:40.060 --> 00:34:41.180
<v Speaker 1>dot

00:34:43.180 --> 00:34:44.380
<v Speaker 1>oh, no. Actually,

00:34:44.860 --> 00:34:45.739
<v Speaker 1>dot name.

00:34:47.234 --> 00:34:47.875
<v Speaker 1>So

00:34:48.755 --> 00:34:50.994
<v Speaker 1>let me describe templating a little bit.

00:34:51.395 --> 00:34:53.714
<v Speaker 1>What you see here is Ginger templating. You

00:34:53.714 --> 00:34:55.395
<v Speaker 1>can use it everywhere.

00:34:55.554 --> 00:34:57.234
<v Speaker 1>There are one or two exceptions. I'm not

00:34:57.234 --> 00:34:58.515
<v Speaker 1>going to explain them.

00:34:58.994 --> 00:35:00.480
<v Speaker 1>But, usually,

00:35:00.880 --> 00:35:03.520
<v Speaker 1>whenever you see YAML, you can use gender

00:35:03.520 --> 00:35:04.320
<v Speaker 1>templating.

00:35:04.800 --> 00:35:07.120
<v Speaker 1>The templating context starts

00:35:07.280 --> 00:35:09.440
<v Speaker 1>with this as the entry point.

00:35:09.840 --> 00:35:12.240
<v Speaker 1>So you always have the target object.

00:35:12.480 --> 00:35:14.720
<v Speaker 1>The target has the name context.

00:35:16.155 --> 00:35:17.755
<v Speaker 1>This one is a little special. You can

00:35:17.755 --> 00:35:19.595
<v Speaker 1>just use args dot env type. You don't

00:35:19.595 --> 00:35:21.915
<v Speaker 1>have to type target dot args dot env

00:35:21.915 --> 00:35:22.475
<v Speaker 1>type.

00:35:23.195 --> 00:35:23.835
<v Speaker 1>So

00:35:25.835 --> 00:35:27.755
<v Speaker 1>as said, we have the target name, which

00:35:27.755 --> 00:35:29.355
<v Speaker 1>is set just by default, and we can

00:35:29.355 --> 00:35:30.980
<v Speaker 1>use it, for example, to have a dynamic

00:35:30.980 --> 00:35:32.020
<v Speaker 1>namespace name.

00:35:32.339 --> 00:35:33.140
<v Speaker 1>So everything

00:35:33.700 --> 00:35:34.180
<v Speaker 1>whatever

00:35:35.060 --> 00:35:36.660
<v Speaker 1>target we deploy, the name to this will

00:35:36.660 --> 00:35:37.940
<v Speaker 1>be named differently now.

00:35:38.579 --> 00:35:41.619
<v Speaker 1>And I think at this point, we are

00:35:41.619 --> 00:35:44.339
<v Speaker 1>done with the most basic deployment.

00:35:45.325 --> 00:35:46.685
<v Speaker 1>There's one thing

00:35:48.285 --> 00:35:50.685
<v Speaker 1>that I need to add. It's a requirement.

00:35:53.965 --> 00:35:55.245
<v Speaker 1>Let's go close it here.

00:35:56.045 --> 00:35:57.005
<v Speaker 1>IO slash,

00:36:00.119 --> 00:36:01.880
<v Speaker 1>I'll explain it in a second.

00:36:04.680 --> 00:36:05.960
<v Speaker 1>Just the requirements,

00:36:06.119 --> 00:36:08.599
<v Speaker 1>the the root deployment YAML. So we'll later

00:36:08.599 --> 00:36:10.520
<v Speaker 1>be more deployment YAML involved. The root deployment

00:36:10.520 --> 00:36:13.400
<v Speaker 1>YAML must list

00:36:12.225 --> 00:36:14.065
<v Speaker 1>a set of common labels,

00:36:14.385 --> 00:36:16.545
<v Speaker 1>which are applied to all Kubernetes resources. This

00:36:16.545 --> 00:36:19.265
<v Speaker 1>is later required to do deletion and pruning

00:36:19.265 --> 00:36:21.425
<v Speaker 1>of objects because Kluctl

00:36:21.425 --> 00:36:22.545
<v Speaker 1>must be able to

00:36:22.945 --> 00:36:25.745
<v Speaker 1>identify what belongs to the deployment so that

00:36:25.745 --> 00:36:27.830
<v Speaker 1>it can actually clean up and delete stuff.

00:36:27.830 --> 00:36:29.110
<v Speaker 0>So this is equivalent

00:36:29.350 --> 00:36:31.670
<v Speaker 0>or your alternative to having a state file

00:36:31.670 --> 00:36:34.630
<v Speaker 0>is to add labels to the resources. Exactly.

00:36:34.710 --> 00:36:36.470
<v Speaker 1>There is no state involved at all. So

00:36:36.470 --> 00:36:38.310
<v Speaker 1>I in the beginning, I was like, how

00:36:38.310 --> 00:36:39.910
<v Speaker 1>do I solve this? And I was thinking,

00:36:39.910 --> 00:36:42.150
<v Speaker 1>like, maybe I just write a conflict map

00:36:42.230 --> 00:36:43.555
<v Speaker 1>to to the cluster or something like that,

00:36:43.555 --> 00:36:45.795
<v Speaker 1>but then I decided just use labels

00:36:46.115 --> 00:36:48.035
<v Speaker 1>and force the user. And if I wouldn't

00:36:48.035 --> 00:36:51.155
<v Speaker 1>have specified that this, Kluctl would actually complain

00:36:51.155 --> 00:36:52.195
<v Speaker 1>that it's missing.

00:36:52.595 --> 00:36:53.235
<v Speaker 1>So

00:36:53.795 --> 00:36:55.235
<v Speaker 1>Could you not just do it by default?

00:36:56.980 --> 00:36:59.540
<v Speaker 1>I was considering that, but the problem is

00:36:59.540 --> 00:37:00.340
<v Speaker 1>sometimes

00:37:01.620 --> 00:37:03.620
<v Speaker 1>there it's possible to use in a to

00:37:03.620 --> 00:37:06.020
<v Speaker 1>use deployments without targets,

00:37:06.420 --> 00:37:08.340
<v Speaker 1>and then this would break if I add

00:37:08.340 --> 00:37:10.285
<v Speaker 1>some kind of default logic for that. I'm

00:37:10.285 --> 00:37:12.045
<v Speaker 1>still considering how to solve it.

00:37:12.605 --> 00:37:15.645
<v Speaker 1>Maybe I or someone comes up with with

00:37:15.645 --> 00:37:17.485
<v Speaker 1>a solution to that. But right now, it's

00:37:17.485 --> 00:37:18.285
<v Speaker 1>a requirement.

00:37:18.365 --> 00:37:19.965
<v Speaker 1>Okay. And I do complain complain to you

00:37:19.965 --> 00:37:20.685
<v Speaker 1>about that.

00:37:21.005 --> 00:37:23.005
<v Speaker 1>So we now have a basic deployment.

00:37:25.490 --> 00:37:28.290
<v Speaker 1>So let's do some Kluctl stuff.

00:37:29.010 --> 00:37:31.090
<v Speaker 1>First thing yeah. Let's just do a deployment.

00:37:31.170 --> 00:37:32.450
<v Speaker 1>Let's deploy that first.

00:37:36.695 --> 00:37:38.455
<v Speaker 1>So as I explained

00:37:39.895 --> 00:37:41.495
<v Speaker 1>I didn't really explain, but just I I

00:37:41.495 --> 00:37:43.175
<v Speaker 1>mentioned it. If you do a deployment, what

00:37:43.175 --> 00:37:44.935
<v Speaker 1>it will do is it will first do

00:37:44.935 --> 00:37:47.255
<v Speaker 1>a dry run and then print a diff.

00:37:48.860 --> 00:37:50.860
<v Speaker 1>Then it asks you if that's fine for

00:37:50.860 --> 00:37:52.860
<v Speaker 1>you. You say yes or no. If you

00:37:52.860 --> 00:37:54.700
<v Speaker 1>say yes, it will actually apply it.

00:37:55.500 --> 00:37:57.340
<v Speaker 1>If you say no, just nothing else.

00:37:57.500 --> 00:37:59.260
<v Speaker 1>In this case, it just tells you there's

00:37:59.260 --> 00:38:01.340
<v Speaker 1>a new object, and that's it. It's what

00:38:01.340 --> 00:38:03.355
<v Speaker 1>we would have expected. And that's it. We

00:38:03.355 --> 00:38:04.635
<v Speaker 1>have a

00:38:05.675 --> 00:38:07.355
<v Speaker 1>namespace deployed

00:38:07.355 --> 00:38:08.155
<v Speaker 1>right now.

00:38:09.515 --> 00:38:10.395
<v Speaker 1>Let me

00:38:11.595 --> 00:38:13.115
<v Speaker 1>figure out how to

00:38:13.355 --> 00:38:15.195
<v Speaker 1>actually prove that something has happened.

00:38:15.890 --> 00:38:18.770
<v Speaker 1>I hope everyone knows k nine s. Yeah.

00:38:18.770 --> 00:38:21.250
<v Speaker 0>Can you It's not increase the font size

00:38:21.250 --> 00:38:23.010
<v Speaker 0>quite a bit. It's very small.

00:38:23.810 --> 00:38:25.730
<v Speaker 1>You should tell me how to do that.

00:38:25.730 --> 00:38:26.610
<v Speaker 0>Command plus.

00:38:28.135 --> 00:38:30.695
<v Speaker 1>Command plus. Yep. That looks good.

00:38:31.415 --> 00:38:32.615
<v Speaker 0>Two more. Is that okay?

00:38:33.175 --> 00:38:34.135
<v Speaker 1>One more?

00:38:34.855 --> 00:38:36.615
<v Speaker 0>There we go. That'll do. Thank you. Okay.

00:38:36.615 --> 00:38:37.255
<v Speaker 0>Great.

00:38:37.495 --> 00:38:39.095
<v Speaker 1>So what you should see now is the

00:38:39.095 --> 00:38:39.895
<v Speaker 1>namespace.

00:38:40.375 --> 00:38:42.800
<v Speaker 1>Demo dev. Great. So we see the templating

00:38:42.800 --> 00:38:44.480
<v Speaker 1>value has been replaced. Great.

00:38:44.960 --> 00:38:47.120
<v Speaker 1>I think it's clear oops. This is not

00:38:47.120 --> 00:38:48.480
<v Speaker 1>what I wanted to do.

00:38:49.360 --> 00:38:51.840
<v Speaker 1>I think it's clear that I can now

00:38:51.840 --> 00:38:52.720
<v Speaker 1>also do

00:38:53.040 --> 00:38:54.240
<v Speaker 0>This is the wrong

00:38:54.495 --> 00:38:56.015
<v Speaker 1>Yes. Intelligence. This

00:38:56.175 --> 00:38:57.695
<v Speaker 1>is Kluctl itself.

00:38:58.895 --> 00:39:00.175
<v Speaker 1>I have too much stuff.

00:39:03.375 --> 00:39:05.055
<v Speaker 1>I think it's pretty clear. I can also

00:39:05.055 --> 00:39:06.975
<v Speaker 1>do a deployment to prod now, which is

00:39:06.975 --> 00:39:07.375
<v Speaker 1>the same

00:39:08.140 --> 00:39:09.980
<v Speaker 1>cluster but a different namespace,

00:39:09.980 --> 00:39:11.420
<v Speaker 1>and it's the same thing.

00:39:11.820 --> 00:39:13.340
<v Speaker 1>And we should now be able to see

00:39:13.420 --> 00:39:15.820
<v Speaker 1>yep. There it is. And new namespace.

00:39:15.820 --> 00:39:17.740
<v Speaker 0>Can I suggest some changes just because I

00:39:17.740 --> 00:39:19.100
<v Speaker 0>am curious now?

00:39:19.660 --> 00:39:20.460
<v Speaker 0>Can

00:39:20.460 --> 00:39:22.060
<v Speaker 0>I suggest the next step?

00:39:22.885 --> 00:39:23.605
<v Speaker 1>Sure.

00:39:24.965 --> 00:39:26.645
<v Speaker 1>I think the next step is to first

00:39:26.645 --> 00:39:28.405
<v Speaker 1>close first. Close that one.

00:39:28.885 --> 00:39:29.605
<v Speaker 1>Yeah.

00:39:30.485 --> 00:39:31.525
<v Speaker 1>Where's close? Just

00:39:32.165 --> 00:39:34.245
<v Speaker 1>Just The red button. Other. So I go

00:39:34.245 --> 00:39:35.125
<v Speaker 1>this one

00:39:35.930 --> 00:39:38.250
<v Speaker 1>and then file close

00:39:39.210 --> 00:39:41.850
<v Speaker 1>other projects. That's what I want. Okay. And

00:39:41.850 --> 00:39:43.450
<v Speaker 0>then namespace dot YAML.

00:39:44.970 --> 00:39:46.410
<v Speaker 1>Here as well? Or

00:39:46.810 --> 00:39:47.770
<v Speaker 0>Yeah. There.

00:39:48.170 --> 00:39:51.050
<v Speaker 1>Oh, yeah. Can we add

00:39:52.194 --> 00:39:52.995
<v Speaker 0>a label?

00:39:53.875 --> 00:39:54.915
<v Speaker 1>Sure.

00:39:55.555 --> 00:39:57.155
<v Speaker 0>I wanna see how

00:39:57.155 --> 00:39:59.635
<v Speaker 0>rich the deaf information gets. So just call

00:39:59.635 --> 00:40:01.795
<v Speaker 0>this name Rawkode. No. You can't call it

00:40:01.795 --> 00:40:04.355
<v Speaker 0>name. Just something Rawkode, a b c colon

00:40:04.355 --> 00:40:06.630
<v Speaker 0>Rawkode or something like that. And then do

00:40:06.630 --> 00:40:09.030
<v Speaker 0>the deploy to dev again. I'm curious.

00:40:09.190 --> 00:40:12.069
<v Speaker 0>We've seen new objects on the deploy, but

00:40:12.069 --> 00:40:13.910
<v Speaker 0>it does the dev give us more rich

00:40:13.910 --> 00:40:15.270
<v Speaker 0>information as well?

00:40:15.910 --> 00:40:16.710
<v Speaker 1>Yes.

00:40:18.789 --> 00:40:21.365
<v Speaker 1>It will give you a diff, and it

00:40:21.365 --> 00:40:23.445
<v Speaker 1>will not give you a unified diff.

00:40:23.525 --> 00:40:25.204
<v Speaker 1>Very at least for me, it's very important.

00:40:25.204 --> 00:40:26.805
<v Speaker 1>Unified diff is a nice thing if you

00:40:26.805 --> 00:40:27.925
<v Speaker 1>want to diff text.

00:40:29.285 --> 00:40:30.565
<v Speaker 1>If you are diffing

00:40:30.724 --> 00:40:33.525
<v Speaker 1>structured stuff, for example, YAML or JSON, you

00:40:33.525 --> 00:40:35.204
<v Speaker 1>really don't want to see unified diff.

00:40:36.050 --> 00:40:38.130
<v Speaker 1>What you want to see is what has

00:40:38.130 --> 00:40:41.090
<v Speaker 1>actually structurally or logically changed. So you want

00:40:41.090 --> 00:40:43.170
<v Speaker 1>to see the path and then the change

00:40:43.170 --> 00:40:45.730
<v Speaker 1>inside that. In this case, it's easy. We

00:40:45.730 --> 00:40:46.530
<v Speaker 1>edit.

00:40:47.330 --> 00:40:48.130
<v Speaker 1>It's this

00:40:48.450 --> 00:40:50.369
<v Speaker 1>it's a JSON path. We edit

00:40:50.715 --> 00:40:52.635
<v Speaker 1>the string. Okay. Can you apply that? And

00:40:52.635 --> 00:40:54.795
<v Speaker 0>then we'll make one more change just because

00:40:55.275 --> 00:40:57.035
<v Speaker 0>I I always need to kinda see what

00:40:57.035 --> 00:40:59.115
<v Speaker 0>happens. But let's change Rawkode to have two

00:40:59.115 --> 00:41:02.555
<v Speaker 0>hours, like, a simple table, you know, and

00:41:02.555 --> 00:41:03.275
<v Speaker 0>then run that again.

00:41:04.750 --> 00:41:05.230
<v Speaker 0>Awesome.

00:41:06.510 --> 00:41:07.630
<v Speaker 0>I like this. And

00:41:08.830 --> 00:41:10.510
<v Speaker 1>it will show you this table for every

00:41:10.510 --> 00:41:12.510
<v Speaker 1>object where it detects changes.

00:41:12.910 --> 00:41:14.670
<v Speaker 1>So in the end, let's even if you

00:41:14.670 --> 00:41:16.350
<v Speaker 1>have hundreds of objects, you are able to

00:41:16.350 --> 00:41:18.910
<v Speaker 1>scroll through it and at least do some

00:41:18.910 --> 00:41:21.255
<v Speaker 1>kind of pattern matching.

00:41:22.535 --> 00:41:24.535
<v Speaker 1>Or if it's just a few objects, really

00:41:24.535 --> 00:41:26.295
<v Speaker 1>go into detail and figure out what has

00:41:26.295 --> 00:41:26.855
<v Speaker 1>changed.

00:41:27.095 --> 00:41:28.535
<v Speaker 0>Yeah. This is something that I would find

00:41:28.535 --> 00:41:30.855
<v Speaker 0>important in the pull request process. Like, I

00:41:30.855 --> 00:41:32.295
<v Speaker 0>I I just wanna see this step as

00:41:32.295 --> 00:41:34.135
<v Speaker 0>a comment on my GitHub or something and

00:41:34.135 --> 00:41:36.934
<v Speaker 0>just say, hey. This is what's about to

00:41:36.030 --> 00:41:38.830
<v Speaker 0>go to your environment. So yeah. Thanks. This

00:41:38.830 --> 00:41:41.070
<v Speaker 1>is something I'm working on right now, actually,

00:41:41.070 --> 00:41:41.550
<v Speaker 1>to

00:41:41.950 --> 00:41:42.830
<v Speaker 1>have some

00:41:43.710 --> 00:41:44.990
<v Speaker 1>so maybe

00:41:45.390 --> 00:41:46.590
<v Speaker 1>another topic.

00:41:47.470 --> 00:41:47.950
<v Speaker 1>I'm

00:41:48.270 --> 00:41:49.550
<v Speaker 1>there's also a GitOps

00:41:49.885 --> 00:41:53.085
<v Speaker 1>based controller, the Flux Clue Cuddle controller,

00:41:53.805 --> 00:41:55.965
<v Speaker 1>which is doing GitOps style deployments

00:41:56.925 --> 00:41:59.005
<v Speaker 1>for all the stuff. And I'm also working

00:41:59.005 --> 00:42:01.325
<v Speaker 1>on another controller, which is not done yet.

00:42:01.325 --> 00:42:04.045
<v Speaker 1>So it's it's not completely public yet, which

00:42:04.045 --> 00:42:05.005
<v Speaker 1>will allow to

00:42:05.700 --> 00:42:07.780
<v Speaker 1>kind of connect your deployments

00:42:07.780 --> 00:42:09.380
<v Speaker 1>to pull requests

00:42:09.380 --> 00:42:11.859
<v Speaker 1>to whatever you like. And it will do

00:42:11.859 --> 00:42:13.940
<v Speaker 1>that. It will show you this. It will

00:42:13.940 --> 00:42:15.700
<v Speaker 1>tell you if stuff

00:42:15.700 --> 00:42:16.260
<v Speaker 1>is

00:42:16.579 --> 00:42:18.740
<v Speaker 1>actually running and ready and so on.

00:42:19.644 --> 00:42:21.884
<v Speaker 1>It will approve for you or unapproved and

00:42:21.884 --> 00:42:23.884
<v Speaker 1>so on. K. We have a a question

00:42:23.884 --> 00:42:26.204
<v Speaker 0>in the comments as well from Google who

00:42:26.204 --> 00:42:28.365
<v Speaker 0>wants to know whether we can now revert

00:42:28.365 --> 00:42:29.484
<v Speaker 0>this with

00:42:29.724 --> 00:42:30.525
<v Speaker 0>Kluctl.

00:42:30.684 --> 00:42:32.765
<v Speaker 0>So can we uninstall production?

00:42:34.820 --> 00:42:37.620
<v Speaker 1>Uninstall production. Yeah. Sure. We can delete it.

00:42:40.340 --> 00:42:42.420
<v Speaker 1>It will it's the same here. It will

00:42:42.420 --> 00:42:44.100
<v Speaker 1>first tell me what it's going to do.

00:42:44.340 --> 00:42:45.780
<v Speaker 1>It will delete this namespace.

00:42:46.734 --> 00:42:48.415
<v Speaker 1>And now we see wait. Did I do

00:42:48.415 --> 00:42:50.255
<v Speaker 1>prod? You said dev. Yeah.

00:42:50.575 --> 00:42:53.295
<v Speaker 1>You see? Luckily, we have a diff, and

00:42:53.295 --> 00:42:54.974
<v Speaker 1>luckily, we actually looked at it. So you

00:42:54.974 --> 00:42:56.175
<v Speaker 1>want to delete prod.

00:42:56.655 --> 00:42:58.255
<v Speaker 1>And then it tells you to delete demo

00:42:58.255 --> 00:43:00.650
<v Speaker 1>prod. And that's it. Thank you. There you

00:43:00.650 --> 00:43:03.770
<v Speaker 0>go, Hugo. You can easily revert with Kluctl.

00:43:05.690 --> 00:43:07.609
<v Speaker 0>I guess I I don't depending on what

00:43:07.609 --> 00:43:09.450
<v Speaker 0>Hugo was specifically asking,

00:43:10.329 --> 00:43:12.089
<v Speaker 0>I guess, the the change be could I

00:43:12.089 --> 00:43:13.930
<v Speaker 0>revert the previous change? Yeah. I mean, that

00:43:13.930 --> 00:43:15.425
<v Speaker 1>would be a asking about

00:43:15.665 --> 00:43:17.825
<v Speaker 1>that. That would be a git operation. Alright?

00:43:17.825 --> 00:43:19.825
<v Speaker 0>That would be a a git reset and

00:43:19.825 --> 00:43:20.305
<v Speaker 0>then

00:43:20.705 --> 00:43:22.305
<v Speaker 1>Yeah. If if you do if you do

00:43:22.305 --> 00:43:26.385
<v Speaker 1>GitOps and or any other type of continuous

00:43:26.545 --> 00:43:28.600
<v Speaker 1>deployment, then, yes, you would do it through

00:43:28.600 --> 00:43:30.600
<v Speaker 1>Git. Just revert the change and

00:43:31.640 --> 00:43:34.360
<v Speaker 1>let whatever needs to happen happen.

00:43:36.840 --> 00:43:38.680
<v Speaker 1>If you are just working from your local

00:43:38.680 --> 00:43:41.400
<v Speaker 1>machine, then you would just do the change

00:43:41.400 --> 00:43:43.865
<v Speaker 1>and deploy it and see in the diff

00:43:43.865 --> 00:43:45.865
<v Speaker 1>if it's what you actually want to do.

00:43:45.945 --> 00:43:48.185
<v Speaker 0>Yeah. I guess because this is a entirely

00:43:48.185 --> 00:43:49.625
<v Speaker 0>stateless application,

00:43:49.705 --> 00:43:51.865
<v Speaker 0>there there's no rollbacks like we would see

00:43:51.865 --> 00:43:54.025
<v Speaker 0>with Helm. Right? So you use the ability

00:43:54.185 --> 00:43:55.705
<v Speaker 0>to do that. Exactly.

00:43:56.105 --> 00:43:58.345
<v Speaker 1>Even the Helm integrations that I

00:43:58.680 --> 00:43:59.560
<v Speaker 1>implemented,

00:43:59.560 --> 00:44:01.080
<v Speaker 1>which I'm going to show later,

00:44:01.400 --> 00:44:02.360
<v Speaker 1>does not

00:44:04.280 --> 00:44:04.920
<v Speaker 1>use

00:44:05.319 --> 00:44:06.520
<v Speaker 1>full Helm

00:44:07.160 --> 00:44:08.040
<v Speaker 1>style

00:44:08.040 --> 00:44:09.000
<v Speaker 1>installations,

00:44:09.000 --> 00:44:11.415
<v Speaker 1>so you cannot roll them back because I'm

00:44:11.415 --> 00:44:11.895
<v Speaker 1>fully deep

00:44:13.415 --> 00:44:16.055
<v Speaker 1>fully relying on on Git at that point.

00:44:16.135 --> 00:44:18.295
<v Speaker 1>So if you want to revert something, revert

00:44:18.295 --> 00:44:20.215
<v Speaker 1>it in Git and do a fresh deployment.

00:44:20.935 --> 00:44:22.775
<v Speaker 0>Alright. That helps, Jacob. Thank you.

00:44:23.870 --> 00:44:24.670
<v Speaker 1>Cool.

00:44:25.870 --> 00:44:26.590
<v Speaker 1>Maybe

00:44:27.230 --> 00:44:29.390
<v Speaker 1>yeah. I'll I'll show that later. So we

00:44:29.390 --> 00:44:30.910
<v Speaker 1>have that one now. Let's

00:44:32.510 --> 00:44:34.990
<v Speaker 1>this is an an interesting point now.

00:44:36.225 --> 00:44:37.905
<v Speaker 1>We always had this problem,

00:44:38.225 --> 00:44:39.745
<v Speaker 1>and me as well, so

00:44:40.705 --> 00:44:43.025
<v Speaker 1>you did something. You deployed a lot of

00:44:43.025 --> 00:44:44.545
<v Speaker 1>stuff to devs, then you did something on

00:44:44.545 --> 00:44:46.945
<v Speaker 1>prod, and you switched around. And then you're

00:44:46.945 --> 00:44:49.265
<v Speaker 1>at the point like, oh, did I actually

00:44:49.850 --> 00:44:52.330
<v Speaker 1>deploy that already to

00:44:52.650 --> 00:44:54.730
<v Speaker 1>this environment? And I'm at that point right

00:44:54.730 --> 00:44:56.170
<v Speaker 1>now. I don't even I I completely forgot

00:44:56.170 --> 00:44:57.450
<v Speaker 1>what the state of dev is.

00:44:57.850 --> 00:44:59.930
<v Speaker 1>And I can just do a deploy, and

00:44:59.930 --> 00:45:01.690
<v Speaker 1>now I see, oh, it's actually fine. I

00:45:01.690 --> 00:45:03.290
<v Speaker 1>already deployed everything,

00:45:03.290 --> 00:45:06.365
<v Speaker 1>which is a good feeling to to trust

00:45:06.365 --> 00:45:08.845
<v Speaker 1>the tooling and the deployment itself.

00:45:10.445 --> 00:45:13.005
<v Speaker 1>I hope I made my point little Okay.

00:45:15.485 --> 00:45:16.445
<v Speaker 1>What to show next?

00:45:17.210 --> 00:45:18.650
<v Speaker 1>Now we're at the point where we actually

00:45:18.650 --> 00:45:20.650
<v Speaker 1>want to deploy something.

00:45:21.369 --> 00:45:24.170
<v Speaker 1>I'm completely open to what to deploy. Usually,

00:45:24.170 --> 00:45:26.170
<v Speaker 1>I just deploy pod info or something like

00:45:26.170 --> 00:45:28.410
<v Speaker 1>that. If you have any idea for something

00:45:28.410 --> 00:45:31.065
<v Speaker 1>that is not too complex, that doesn't need

00:45:31.065 --> 00:45:32.265
<v Speaker 1>too much configuration,

00:45:32.665 --> 00:45:34.345
<v Speaker 1>that would usually work with a simple helm

00:45:34.345 --> 00:45:35.145
<v Speaker 1>install,

00:45:35.865 --> 00:45:37.145
<v Speaker 1>just tell me, and we use it as

00:45:37.145 --> 00:45:37.865
<v Speaker 1>an example.

00:45:38.985 --> 00:45:40.345
<v Speaker 0>So you're looking for

00:45:40.825 --> 00:45:42.265
<v Speaker 0>a helm resource?

00:45:43.350 --> 00:45:45.270
<v Speaker 1>Yeah. We can we can start with a

00:45:45.270 --> 00:45:45.990
<v Speaker 1>Helm

00:45:47.350 --> 00:45:49.030
<v Speaker 1>or some plain

00:45:49.510 --> 00:45:50.470
<v Speaker 1>resources.

00:45:50.470 --> 00:45:53.270
<v Speaker 0>Okay. Let's just do a standard deployment that

00:45:53.270 --> 00:45:56.230
<v Speaker 0>deploys PodM for NGINX. Either or is fine.

00:45:56.855 --> 00:45:58.535
<v Speaker 1>Okay. It's through Helm or it's through plain

00:45:58.535 --> 00:46:01.015
<v Speaker 1>YAML? Plain YAML. I mean Okay. Is there

00:46:01.015 --> 00:46:02.295
<v Speaker 0>anything else you want to show in plain

00:46:02.295 --> 00:46:04.855
<v Speaker 0>YAML that's different from the namespace example? Yeah.

00:46:04.855 --> 00:46:07.174
<v Speaker 1>Maybe, yeah, maybe it's easier to just show

00:46:07.174 --> 00:46:08.775
<v Speaker 1>it based on that and later go into

00:46:08.775 --> 00:46:09.414
<v Speaker 1>to Helm.

00:46:10.350 --> 00:46:10.910
<v Speaker 1>So

00:46:11.390 --> 00:46:12.270
<v Speaker 1>let's do

00:46:12.590 --> 00:46:13.630
<v Speaker 1>pod info.

00:46:13.790 --> 00:46:14.910
<v Speaker 1>Create a folder.

00:46:15.070 --> 00:46:16.830
<v Speaker 1>We go to the root deployment again,

00:46:17.310 --> 00:46:19.150
<v Speaker 1>and we just add

00:46:20.510 --> 00:46:21.150
<v Speaker 1>in as

00:46:24.115 --> 00:46:27.235
<v Speaker 1>deployment here, so now what I explained in

00:46:27.235 --> 00:46:30.195
<v Speaker 1>regard to declarative and ordering and stuff like

00:46:30.195 --> 00:46:30.995
<v Speaker 1>that. So

00:46:31.715 --> 00:46:34.355
<v Speaker 1>by default, what Clue CDL does is everything

00:46:34.355 --> 00:46:37.235
<v Speaker 1>that is listed here is deployed in parallel,

00:46:37.235 --> 00:46:38.515
<v Speaker 1>so it doesn't care about ordering.

00:46:39.500 --> 00:46:40.940
<v Speaker 1>But if you realize

00:46:41.020 --> 00:46:43.740
<v Speaker 1>ordering is important, and in this case, it

00:46:43.740 --> 00:46:46.059
<v Speaker 1>definitely is important because you cannot deploy port

00:46:46.059 --> 00:46:48.700
<v Speaker 1>info into the namespace because namespace is available,

00:46:49.020 --> 00:46:50.540
<v Speaker 1>what you can do is you can

00:46:51.020 --> 00:46:52.380
<v Speaker 1>add a barrier

00:46:52.380 --> 00:46:53.340
<v Speaker 1>in between,

00:46:54.140 --> 00:46:56.485
<v Speaker 1>which means do everything that is before this

00:46:56.485 --> 00:46:57.845
<v Speaker 1>barrier in parallel,

00:46:58.005 --> 00:47:01.045
<v Speaker 1>then wait till it's finished. Finished means it's

00:47:01.045 --> 00:47:03.205
<v Speaker 1>applied. It doesn't mean it's ready. It just

00:47:03.205 --> 00:47:05.285
<v Speaker 1>means it's applied for a namespace that's enough.

00:47:05.365 --> 00:47:08.529
<v Speaker 1>And then continue with all the stuff following

00:47:08.529 --> 00:47:09.890
<v Speaker 1>in parallel again.

00:47:10.210 --> 00:47:11.490
<v Speaker 1>So it's super fast,

00:47:12.769 --> 00:47:13.250
<v Speaker 1>but

00:47:13.890 --> 00:47:16.369
<v Speaker 1>takes into account ordering whenever needed. That's what

00:47:16.369 --> 00:47:18.609
<v Speaker 1>I tried to explain with the declarative versus

00:47:18.609 --> 00:47:19.970
<v Speaker 1>imperative stuff.

00:47:22.615 --> 00:47:24.375
<v Speaker 1>It is the same with CRDs. So if,

00:47:24.375 --> 00:47:27.015
<v Speaker 1>for example, you're deploying the sealed secrets controller,

00:47:27.174 --> 00:47:29.255
<v Speaker 1>you know it's going to deploy CRDs,

00:47:29.255 --> 00:47:31.974
<v Speaker 1>and you cannot deploy sealed secrets before you

00:47:31.974 --> 00:47:34.340
<v Speaker 1>have deployed the sealed secrets controller. So it

00:47:34.660 --> 00:47:36.580
<v Speaker 1>you would add the sealed secrets controller here

00:47:36.580 --> 00:47:38.260
<v Speaker 1>at a barrier, and then you would deploy

00:47:38.260 --> 00:47:39.380
<v Speaker 1>the sealed secrets.

00:47:40.180 --> 00:47:40.820
<v Speaker 1>Okay.

00:47:41.380 --> 00:47:42.900
<v Speaker 1>So put info.

00:47:43.780 --> 00:47:45.140
<v Speaker 1>So we have a

00:47:45.700 --> 00:47:48.340
<v Speaker 1>I called k eight s deployment right now

00:47:48.340 --> 00:47:51.075
<v Speaker 1>because it might otherwise get confusing with c

00:47:51.075 --> 00:47:52.115
<v Speaker 1>deployment demos.

00:47:53.795 --> 00:47:54.515
<v Speaker 1>I

00:47:54.595 --> 00:47:55.955
<v Speaker 1>cannot remember

00:47:56.675 --> 00:47:59.075
<v Speaker 1>what deployment looks like. I always had to

00:47:59.075 --> 00:48:01.235
<v Speaker 1>copy paste. App slash v one.

00:48:02.440 --> 00:48:04.120
<v Speaker 1>No. I I really don't want to type

00:48:04.120 --> 00:48:05.800
<v Speaker 1>out the full d engine next deployment now

00:48:05.800 --> 00:48:07.400
<v Speaker 1>or put in for deployments.

00:48:08.760 --> 00:48:10.280
<v Speaker 0>I've got it all done by heart. Like,

00:48:10.280 --> 00:48:12.120
<v Speaker 0>that's how that's the only flex I've got.

00:48:15.155 --> 00:48:17.315
<v Speaker 1>Sorry. I didn't get it done. It's alright.

00:48:17.315 --> 00:48:19.875
<v Speaker 0>I've just been silly. Okay. Please feel free

00:48:19.875 --> 00:48:21.795
<v Speaker 0>to copy and paste the deployment.

00:48:22.515 --> 00:48:23.235
<v Speaker 1>Yeah.

00:48:24.355 --> 00:48:25.635
<v Speaker 1>Should have prepared one.

00:48:28.720 --> 00:48:29.840
<v Speaker 1>There is one.

00:48:30.240 --> 00:48:31.920
<v Speaker 0>The yes. In the comments, I was looking

00:48:31.920 --> 00:48:33.520
<v Speaker 0>forward to seeing the helm.

00:48:33.840 --> 00:48:35.360
<v Speaker 0>So we'll get to that in just a

00:48:35.360 --> 00:48:35.920
<v Speaker 0>minute.

00:48:36.400 --> 00:48:38.000
<v Speaker 1>Yeah. I'll I'll try to speed up with

00:48:38.000 --> 00:48:39.440
<v Speaker 1>this one. So

00:48:39.760 --> 00:48:42.000
<v Speaker 1>I found an engine x deployment that's

00:48:42.240 --> 00:48:43.040
<v Speaker 1>so

00:48:44.615 --> 00:48:46.535
<v Speaker 1>do you know if pod in pod in

00:48:46.535 --> 00:48:48.215
<v Speaker 1>was available as a hand chart. Right? So

00:48:48.215 --> 00:48:49.575
<v Speaker 1>maybe we do it the other way around.

00:48:49.575 --> 00:48:50.935
<v Speaker 1>We start with NGINX.

00:48:55.015 --> 00:48:57.069
<v Speaker 1>So just using this deployment. I'm not going

00:48:57.069 --> 00:48:58.589
<v Speaker 1>to add a service now. I'm not going

00:48:58.589 --> 00:49:00.190
<v Speaker 1>to add ingresses and stuff like that. We

00:49:00.349 --> 00:49:01.790
<v Speaker 1>we're just going to ignore that.

00:49:04.030 --> 00:49:05.869
<v Speaker 1>But we need to do a few things.

00:49:05.869 --> 00:49:07.390
<v Speaker 1>We, of course, have to deploy to to

00:49:07.390 --> 00:49:08.589
<v Speaker 1>the correct namespace

00:49:08.975 --> 00:49:10.975
<v Speaker 1>because otherwise, it would be default.

00:49:12.335 --> 00:49:14.815
<v Speaker 1>How did we call it? Demo dash

00:49:16.735 --> 00:49:19.455
<v Speaker 1>targets Target dot name. Yep. Yeah.

00:49:19.935 --> 00:49:22.335
<v Speaker 1>Let's start with one replica. Everything else should

00:49:22.335 --> 00:49:23.615
<v Speaker 1>be fine. I'm not going to do any

00:49:23.615 --> 00:49:25.990
<v Speaker 1>configuration or stuff like that. I don't even

00:49:25.990 --> 00:49:28.230
<v Speaker 1>know what it will show if nothing is

00:49:28.230 --> 00:49:30.630
<v Speaker 1>deployed, maybe some hello or something like that,

00:49:30.630 --> 00:49:31.670
<v Speaker 1>but that's fine.

00:49:32.790 --> 00:49:35.430
<v Speaker 1>So we need a customization again. Doing some

00:49:35.430 --> 00:49:36.390
<v Speaker 1>copy paste now.

00:49:40.365 --> 00:49:42.845
<v Speaker 1>And I think we are done.

00:49:43.085 --> 00:49:45.085
<v Speaker 1>This should be the basic

00:49:47.165 --> 00:49:49.725
<v Speaker 1>yeah. NGINX deployment. Let's deploy it,

00:49:51.099 --> 00:49:52.300
<v Speaker 1>and it's done.

00:49:53.099 --> 00:49:53.820
<v Speaker 1>And

00:49:54.060 --> 00:49:57.340
<v Speaker 1>in k nine s, we should see

00:49:57.900 --> 00:49:59.500
<v Speaker 1>it's starting up now.

00:50:00.940 --> 00:50:01.740
<v Speaker 1>Pulling image,

00:50:05.005 --> 00:50:06.845
<v Speaker 1>and it's running. So I said I'm not

00:50:06.845 --> 00:50:09.165
<v Speaker 1>going to deploy services ingresses,

00:50:09.165 --> 00:50:11.325
<v Speaker 1>nothing like that. I'm just using the port

00:50:11.325 --> 00:50:14.365
<v Speaker 1>forwarding feature of k nine s. I said,

00:50:14.365 --> 00:50:16.365
<v Speaker 1>doesn't know k nine s? Really, you have

00:50:16.365 --> 00:50:18.990
<v Speaker 1>to get to know it because it's just

00:50:18.990 --> 00:50:19.870
<v Speaker 1>great.

00:50:21.790 --> 00:50:23.710
<v Speaker 1>So we have local host.

00:50:25.870 --> 00:50:27.470
<v Speaker 1>Come on. Host.

00:50:28.110 --> 00:50:29.150
<v Speaker 1>Eighty eighty.

00:50:29.470 --> 00:50:31.310
<v Speaker 1>And we have NGINX running. That's great.

00:50:35.055 --> 00:50:37.375
<v Speaker 1>Okay. I think that one was quite easy.

00:50:37.535 --> 00:50:39.055
<v Speaker 1>Maybe before

00:50:39.055 --> 00:50:42.175
<v Speaker 1>I start with the Helm part, I do

00:50:42.175 --> 00:50:42.815
<v Speaker 1>some

00:50:43.295 --> 00:50:45.695
<v Speaker 1>some more in regard to

00:50:46.539 --> 00:50:47.579
<v Speaker 1>configuration

00:50:47.579 --> 00:50:48.780
<v Speaker 1>and templating.

00:50:49.339 --> 00:50:52.619
<v Speaker 1>The deployment YAML also defines which variables are

00:50:52.619 --> 00:50:55.020
<v Speaker 1>available inside the templating context.

00:50:55.579 --> 00:50:57.820
<v Speaker 1>It's done by the vars key,

00:50:58.700 --> 00:51:00.859
<v Speaker 1>and it's a list of vars sources.

00:51:02.005 --> 00:51:03.925
<v Speaker 1>One of them is the file,

00:51:04.165 --> 00:51:05.925
<v Speaker 1>and it's arbitrary what I put in here.

00:51:05.925 --> 00:51:07.685
<v Speaker 1>So it it the only requirement is that

00:51:07.685 --> 00:51:08.885
<v Speaker 1>it's part of the

00:51:09.205 --> 00:51:11.525
<v Speaker 1>project that I'm in right now. So

00:51:11.685 --> 00:51:12.725
<v Speaker 1>let's

00:51:13.525 --> 00:51:15.925
<v Speaker 1>say inside vast, we have

00:51:18.200 --> 00:51:19.960
<v Speaker 1>a common dot YAML.

00:51:21.559 --> 00:51:23.400
<v Speaker 1>So we actually need that folder.

00:51:23.480 --> 00:51:24.680
<v Speaker 1>Oops. Vars.

00:51:27.319 --> 00:51:28.600
<v Speaker 1>Common dot YAML.

00:51:30.280 --> 00:51:31.880
<v Speaker 1>Any ideas for for Vars?

00:51:33.775 --> 00:51:35.535
<v Speaker 0>Let's say replicas.

00:51:36.495 --> 00:51:37.775
<v Speaker 1>Yeah. Let's

00:51:37.775 --> 00:51:39.135
<v Speaker 1>let's do that later.

00:51:39.535 --> 00:51:41.775
<v Speaker 1>So let's make the end of next version

00:51:41.775 --> 00:51:42.495
<v Speaker 1>configurable.

00:51:45.170 --> 00:51:47.410
<v Speaker 1>Very important. This is plain

00:51:47.410 --> 00:51:51.010
<v Speaker 1>YAML. So I could actually do something like

00:51:51.010 --> 00:51:53.170
<v Speaker 1>that because maybe it's

00:51:53.410 --> 00:51:55.650
<v Speaker 1>easier to maintain later.

00:51:55.890 --> 00:51:58.370
<v Speaker 1>I can do whatever I want here. Lists,

00:51:58.370 --> 00:51:59.250
<v Speaker 1>dictionaries, everything.

00:52:00.375 --> 00:52:03.255
<v Speaker 1>And I think that's obvious as well now.

00:52:06.375 --> 00:52:07.575
<v Speaker 1>So that's it.

00:52:08.215 --> 00:52:10.535
<v Speaker 1>So to explain it again, inside the root

00:52:10.535 --> 00:52:13.255
<v Speaker 1>deployment YAML, we include the vast file common

00:52:13.255 --> 00:52:13.975
<v Speaker 1>YAML.

00:52:14.135 --> 00:52:15.815
<v Speaker 1>It defines NGINX

00:52:16.110 --> 00:52:16.830
<v Speaker 1>version,

00:52:16.990 --> 00:52:19.390
<v Speaker 1>and then we can use it everywhere

00:52:20.110 --> 00:52:22.590
<v Speaker 1>that is included from here. Do you really

00:52:22.590 --> 00:52:24.190
<v Speaker 0>consume it as NGINX.version

00:52:24.190 --> 00:52:26.510
<v Speaker 0>instead of vars.NGINX.version?

00:52:27.790 --> 00:52:29.470
<v Speaker 1>Yeah. It's really NGINX.version.

00:52:30.015 --> 00:52:32.575
<v Speaker 0>So what if I my common dot YAML

00:52:32.575 --> 00:52:34.975
<v Speaker 0>have target colon name?

00:52:37.694 --> 00:52:39.295
<v Speaker 1>I think you can actually do that, and

00:52:39.295 --> 00:52:41.454
<v Speaker 1>it will override your target name. If you

00:52:41.454 --> 00:52:41.855
<v Speaker 1>do that,

00:52:42.450 --> 00:52:45.010
<v Speaker 1>bad idea. I'm not sure if I wouldn't

00:52:45.250 --> 00:52:46.930
<v Speaker 1>if I if I would try to

00:52:47.250 --> 00:52:49.650
<v Speaker 1>to stop you from doing that. Ideas is

00:52:49.650 --> 00:52:51.730
<v Speaker 0>my middle name, I'm afraid. I always try

00:52:51.730 --> 00:52:53.410
<v Speaker 0>to think of how I could break something.

00:52:53.410 --> 00:52:53.650
<v Speaker 0>So

00:52:54.530 --> 00:52:56.530
<v Speaker 1>Yeah. I mean, it's your it's your right

00:52:56.530 --> 00:52:58.675
<v Speaker 1>to do that. I mean, I I think

00:52:58.675 --> 00:53:00.355
<v Speaker 1>I know what what what you're up to.

00:53:01.155 --> 00:53:02.835
<v Speaker 0>Yeah. I I expected there to be a

00:53:02.835 --> 00:53:05.315
<v Speaker 0>prefix, like target Yeah. And args and then

00:53:05.315 --> 00:53:07.875
<v Speaker 0>and then bars. But Yeah. Makes sense, actually.

00:53:07.875 --> 00:53:09.875
<v Speaker 1>Maybe that's also something I should consider.

00:53:11.470 --> 00:53:13.150
<v Speaker 1>Yeah. I'll I'll think about that. And you

00:53:13.150 --> 00:53:15.150
<v Speaker 1>can, of course, do a Got an issue.

00:53:15.710 --> 00:53:16.270
<v Speaker 1>Great.

00:53:16.910 --> 00:53:18.750
<v Speaker 1>There there's one thing where it is already

00:53:18.750 --> 00:53:20.830
<v Speaker 1>implemented this way. So everything that you pass

00:53:20.830 --> 00:53:22.910
<v Speaker 1>through arcs inside the

00:53:22.990 --> 00:53:24.190
<v Speaker 1>target definition

00:53:24.350 --> 00:53:26.430
<v Speaker 1>is available through arcs dot.

00:53:27.145 --> 00:53:28.985
<v Speaker 1>So for example, I could use n type

00:53:28.985 --> 00:53:30.745
<v Speaker 1>here. Doesn't make sense, of course, but just

00:53:30.745 --> 00:53:31.625
<v Speaker 1>to show it.

00:53:33.305 --> 00:53:35.705
<v Speaker 1>I'll show why the axe are so so

00:53:35.705 --> 00:53:37.705
<v Speaker 1>nice later a little bit.

00:53:38.105 --> 00:53:39.785
<v Speaker 1>So we have the engine x version here.

00:53:40.790 --> 00:53:42.869
<v Speaker 1>Let's do a deploy. Nothing should change because

00:53:42.869 --> 00:53:45.270
<v Speaker 1>we haven't actually changed anything. We just did

00:53:45.270 --> 00:53:46.790
<v Speaker 1>some refactoring right now.

00:53:47.030 --> 00:53:49.030
<v Speaker 1>That's also what I explained before.

00:53:49.990 --> 00:53:52.310
<v Speaker 1>I always want to know if my change

00:53:52.310 --> 00:53:53.109
<v Speaker 1>has the

00:53:53.565 --> 00:53:55.165
<v Speaker 1>expected consequences.

00:53:56.125 --> 00:53:58.685
<v Speaker 1>In this case, it shouldn't have any consequences,

00:53:58.685 --> 00:54:01.165
<v Speaker 1>and this verifies that it's the case.

00:54:02.525 --> 00:54:04.925
<v Speaker 1>Let's say if I change this to dot

00:54:04.925 --> 00:54:06.845
<v Speaker 1>one, I should see it in the diff.

00:54:06.900 --> 00:54:09.059
<v Speaker 1>So there we see it again. As said,

00:54:09.059 --> 00:54:11.940
<v Speaker 1>it shows here the JSON path to the

00:54:12.500 --> 00:54:14.260
<v Speaker 1>point where it's changed, and then it shows

00:54:14.260 --> 00:54:15.619
<v Speaker 1>this unified diff,

00:54:15.940 --> 00:54:17.859
<v Speaker 1>which is a very short one. Can you

00:54:17.859 --> 00:54:20.020
<v Speaker 0>open the case deployment dot YAML, please?

00:54:21.905 --> 00:54:22.865
<v Speaker 1>Yes.

00:54:22.865 --> 00:54:25.825
<v Speaker 0>Can you remove the namespace from the top?

00:54:27.105 --> 00:54:27.905
<v Speaker 1>Mhmm.

00:54:28.225 --> 00:54:29.345
<v Speaker 0>And then run

00:54:29.825 --> 00:54:31.025
<v Speaker 0>deploy again?

00:54:33.265 --> 00:54:34.385
<v Speaker 1>It's actually a good idea.

00:54:36.130 --> 00:54:37.890
<v Speaker 1>Let's do a little bit different thing. I'm

00:54:37.890 --> 00:54:39.970
<v Speaker 1>going to deploy that to prod now. Okay?

00:54:41.730 --> 00:54:44.690
<v Speaker 1>It doesn't make sense, but who cares? So

00:54:44.690 --> 00:54:46.610
<v Speaker 1>I think this is what what

00:54:46.770 --> 00:54:49.170
<v Speaker 1>you're retargeting, that it's going to the default

00:54:49.170 --> 00:54:51.505
<v Speaker 1>namespace right now. Let's assume we did that

00:54:51.505 --> 00:54:53.985
<v Speaker 1>by mistake. We completely forgot that we had

00:54:53.985 --> 00:54:56.465
<v Speaker 1>to actually set the namespace,

00:54:56.865 --> 00:54:58.465
<v Speaker 1>and we deployed it to prod.

00:54:59.185 --> 00:55:01.345
<v Speaker 1>Now we realize, oh, what

00:55:01.745 --> 00:55:03.425
<v Speaker 1>have we done? We deployed something to the

00:55:03.425 --> 00:55:04.145
<v Speaker 1>wrong namespace,

00:55:04.630 --> 00:55:07.030
<v Speaker 1>and we have to fix it. Now, the

00:55:07.030 --> 00:55:10.230
<v Speaker 1>naive solution is to just add the namespace

00:55:10.630 --> 00:55:13.190
<v Speaker 1>and assume that this has fixed it. But

00:55:13.190 --> 00:55:14.710
<v Speaker 1>if you deploy that,

00:55:15.030 --> 00:55:15.990
<v Speaker 1>it doesn't

00:55:16.470 --> 00:55:19.750
<v Speaker 1>just change the namespace. It actually means I'm

00:55:20.085 --> 00:55:22.325
<v Speaker 1>deploying a second version of that same deployment

00:55:22.325 --> 00:55:24.085
<v Speaker 1>to another namespace because the old one is

00:55:24.085 --> 00:55:24.805
<v Speaker 1>still there.

00:55:25.205 --> 00:55:26.965
<v Speaker 1>I think that's what you were Yeah. I

00:55:26.965 --> 00:55:28.724
<v Speaker 0>wanted to see how it how it identifies

00:55:28.724 --> 00:55:29.685
<v Speaker 0>the replace.

00:55:29.845 --> 00:55:30.485
<v Speaker 1>Yeah.

00:55:30.965 --> 00:55:32.965
<v Speaker 1>So what it will show you now

00:55:33.605 --> 00:55:36.470
<v Speaker 1>wait. This is something it's in my head

00:55:36.470 --> 00:55:37.910
<v Speaker 1>which needs to be changed.

00:55:39.910 --> 00:55:42.069
<v Speaker 1>So let's do diff. A diff will basically

00:55:42.069 --> 00:55:44.309
<v Speaker 1>just show show you that and show you

00:55:44.309 --> 00:55:45.830
<v Speaker 1>often object as well.

00:55:46.230 --> 00:55:48.309
<v Speaker 1>So it tells you what you actually do

00:55:48.309 --> 00:55:50.309
<v Speaker 1>right now is you create a new deployment,

00:55:50.415 --> 00:55:52.255
<v Speaker 1>and then there is an often object which

00:55:52.255 --> 00:55:54.335
<v Speaker 1>I don't recognize anymore, but it looks like

00:55:54.335 --> 00:55:56.015
<v Speaker 1>it was part of my deployment

00:55:56.415 --> 00:55:57.455
<v Speaker 1>in the past.

00:55:57.935 --> 00:56:00.415
<v Speaker 1>What you can do now is you can

00:56:00.415 --> 00:56:01.455
<v Speaker 1>deploy it first.

00:56:04.140 --> 00:56:06.059
<v Speaker 1>In this case, you just see new deployments.

00:56:06.059 --> 00:56:07.740
<v Speaker 1>It doesn't show you that they are also

00:56:07.740 --> 00:56:08.860
<v Speaker 1>orphan object.

00:56:09.180 --> 00:56:11.099
<v Speaker 1>After deployment, it would show you the orphan

00:56:11.099 --> 00:56:13.339
<v Speaker 1>objects. So this is something I need to

00:56:13.339 --> 00:56:15.820
<v Speaker 1>change to actually show that before as well.

00:56:16.220 --> 00:56:17.835
<v Speaker 1>So what we have now is we have

00:56:17.835 --> 00:56:20.715
<v Speaker 1>that same deployment two times, once in the

00:56:20.715 --> 00:56:23.515
<v Speaker 1>correct namespace, once in the wrong namespace.

00:56:24.555 --> 00:56:27.355
<v Speaker 1>If your tooling doesn't support you properly,

00:56:27.755 --> 00:56:29.755
<v Speaker 1>you might end up with garbage

00:56:30.450 --> 00:56:33.570
<v Speaker 1>all over your cluster because of such things

00:56:33.570 --> 00:56:34.290
<v Speaker 1>happening,

00:56:34.690 --> 00:56:36.050
<v Speaker 1>and you wouldn't realize it.

00:56:36.369 --> 00:56:37.490
<v Speaker 1>With GitOps,

00:56:38.210 --> 00:56:39.650
<v Speaker 1>you can do prune.

00:56:40.050 --> 00:56:42.050
<v Speaker 1>You can enable pruning for your deployments and

00:56:42.050 --> 00:56:44.050
<v Speaker 1>it will handle it. But if you're

00:56:45.305 --> 00:56:47.865
<v Speaker 1>not using it, you end up with completely

00:56:48.664 --> 00:56:50.424
<v Speaker 0>Okay. Before you prune that, can you go

00:56:50.424 --> 00:56:51.545
<v Speaker 0>back to k nines?

00:56:52.904 --> 00:56:55.224
<v Speaker 0>Something's odd. Right? Is that

00:56:56.680 --> 00:56:58.920
<v Speaker 0>replica set ID is the same on both.

00:56:58.920 --> 00:57:00.040
<v Speaker 0>How did that happen?

00:57:01.960 --> 00:57:04.040
<v Speaker 1>Replica is what? One?

00:57:05.000 --> 00:57:07.560
<v Speaker 0>No. The replica set. The can you run

00:57:08.360 --> 00:57:10.360
<v Speaker 0>look at replica sets and k nines across

00:57:10.360 --> 00:57:11.160
<v Speaker 0>all namespaces.

00:57:14.734 --> 00:57:17.375
<v Speaker 0>Seven five six five eight d four seven

00:57:17.375 --> 00:57:19.215
<v Speaker 0>seven seven and two namespaces.

00:57:19.454 --> 00:57:20.815
<v Speaker 0>That's pretty Oh,

00:57:21.135 --> 00:57:22.415
<v Speaker 1>this is really strange.

00:57:23.055 --> 00:57:24.575
<v Speaker 1>No. I know what you mean.

00:57:24.974 --> 00:57:26.895
<v Speaker 1>This is strange. It is strange.

00:57:31.110 --> 00:57:33.110
<v Speaker 1>Must be something that must be something to

00:57:33.110 --> 00:57:35.190
<v Speaker 0>do with the deterministic nature of the replicas

00:57:35.190 --> 00:57:36.790
<v Speaker 0>that Yeah. Are created across

00:57:37.030 --> 00:57:38.870
<v Speaker 0>that's I've I've never seen that before. I'm

00:57:38.870 --> 00:57:40.390
<v Speaker 0>gonna have to dig in. Yeah. I actually

00:57:40.390 --> 00:57:42.710
<v Speaker 1>never looked into at that point, but you're

00:57:42.710 --> 00:57:43.925
<v Speaker 1>right. It's interesting.

00:57:44.245 --> 00:57:46.725
<v Speaker 1>So there must be some deterministic way to

00:57:46.725 --> 00:57:48.645
<v Speaker 1>to figure out the names that it uses

00:57:48.645 --> 00:57:49.525
<v Speaker 1>internally.

00:57:50.085 --> 00:57:52.245
<v Speaker 0>Yeah. Based on maybe the revision ID, the

00:57:52.245 --> 00:57:52.965
<v Speaker 0>generation,

00:57:53.285 --> 00:57:55.685
<v Speaker 0>and the the hash of the object. Yes.

00:57:55.685 --> 00:57:57.045
<v Speaker 1>Which means you could probably do some

00:57:58.020 --> 00:57:59.540
<v Speaker 0>this is not And I sort of clustered,

00:57:59.540 --> 00:58:00.980
<v Speaker 0>but I'm never working out ways that I

00:58:00.980 --> 00:58:02.740
<v Speaker 0>can do collisions

00:58:02.740 --> 00:58:05.140
<v Speaker 0>across clusters. But that that's the Yeah. But

00:58:05.140 --> 00:58:07.140
<v Speaker 1>but I assume it's still fine at least

00:58:07.140 --> 00:58:09.220
<v Speaker 1>in inside the same cluster because it's still

00:58:09.220 --> 00:58:09.860
<v Speaker 1>namespace.

00:58:10.795 --> 00:58:12.635
<v Speaker 1>It's still in different namespace.

00:58:12.875 --> 00:58:15.675
<v Speaker 1>But, yeah, let's get back to

00:58:16.395 --> 00:58:18.395
<v Speaker 1>okay. So here we have c parts. So

00:58:18.875 --> 00:58:20.795
<v Speaker 1>you, of course, don't want to have that

00:58:20.795 --> 00:58:22.635
<v Speaker 1>garbage on your cluster, and you want to

00:58:22.635 --> 00:58:26.075
<v Speaker 1>clean up immediately when you realize that situation.

00:58:26.315 --> 00:58:28.290
<v Speaker 1>What you can do this Kluctl is just

00:58:28.290 --> 00:58:29.170
<v Speaker 1>to prune,

00:58:29.650 --> 00:58:31.490
<v Speaker 1>and it will delete the objects that it

00:58:31.490 --> 00:58:33.010
<v Speaker 1>determined as often.

00:58:33.650 --> 00:58:35.250
<v Speaker 0>Okay. So We have a

00:58:35.970 --> 00:58:38.210
<v Speaker 0>in the chat from Matthias. Mhmm.

00:58:38.610 --> 00:58:40.610
<v Speaker 0>And it's something I was thinking too, but

00:58:41.095 --> 00:58:43.255
<v Speaker 0>they were I'm assuming they maybe are familiar

00:58:43.255 --> 00:58:45.175
<v Speaker 0>with the tool, but they're asking if there's

00:58:45.175 --> 00:58:47.815
<v Speaker 0>an override namespace in the deployment dot YAML,

00:58:47.895 --> 00:58:49.735
<v Speaker 0>which is, I think, a good question because

00:58:49.735 --> 00:58:52.615
<v Speaker 0>I would probably forget to specify the namespace

00:58:52.615 --> 00:58:54.695
<v Speaker 0>and a resource at some point. So can

00:58:54.695 --> 00:58:56.375
<v Speaker 0>that I

00:58:55.850 --> 00:58:57.130
<v Speaker 1>Yeah. I I think

00:58:57.930 --> 00:58:59.370
<v Speaker 1>that's Matthias.

00:58:59.370 --> 00:59:01.850
<v Speaker 1>I I think I know him. And, yeah,

00:59:01.850 --> 00:59:04.090
<v Speaker 1>he's quite familiar with it. I think what

00:59:04.090 --> 00:59:05.530
<v Speaker 1>he wants to ask is

00:59:05.770 --> 00:59:08.570
<v Speaker 1>so as we're using customize, we could, of

00:59:08.570 --> 00:59:10.730
<v Speaker 1>course, also say that we

00:59:11.545 --> 00:59:13.385
<v Speaker 1>tell it to use this namespace at this

00:59:13.385 --> 00:59:16.265
<v Speaker 1>point. Mhmm. So this is one option to

00:59:17.225 --> 00:59:20.025
<v Speaker 1>avoid such situations, just using customize

00:59:20.425 --> 00:59:21.625
<v Speaker 1>to set the namespace.

00:59:23.230 --> 00:59:24.670
<v Speaker 1>I think it's clear what what I'm going

00:59:24.670 --> 00:59:25.390
<v Speaker 1>to do here.

00:59:25.710 --> 00:59:26.350
<v Speaker 1>Right?

00:59:26.510 --> 00:59:27.710
<v Speaker 1>Demo and so on.

00:59:28.510 --> 00:59:30.110
<v Speaker 1>I'm not going to do that now for

00:59:30.110 --> 00:59:31.550
<v Speaker 1>for the demo purposes.

00:59:31.710 --> 00:59:34.510
<v Speaker 1>Another option is inside the deployment YAML

00:59:34.990 --> 00:59:36.350
<v Speaker 1>to also say

00:59:36.590 --> 00:59:37.470
<v Speaker 1>override

00:59:38.030 --> 00:59:39.390
<v Speaker 1>namespace

00:59:39.045 --> 00:59:40.805
<v Speaker 1>and basically do the same.

00:59:41.684 --> 00:59:43.045
<v Speaker 1>So demo

00:59:44.325 --> 00:59:46.005
<v Speaker 1>target dot name. It would have the same

00:59:46.325 --> 00:59:48.725
<v Speaker 1>it and not not not exactly.

00:59:48.964 --> 00:59:52.244
<v Speaker 1>So what override namespace does is every customize

00:59:53.720 --> 00:59:56.440
<v Speaker 1>that it encounters that doesn't have a namespace

00:59:56.440 --> 00:59:58.760
<v Speaker 1>set will get that namespace.

00:59:59.079 --> 01:00:00.840
<v Speaker 1>So if a customization

01:00:01.079 --> 01:00:03.720
<v Speaker 1>still says I want to deploy it to

01:00:03.720 --> 01:00:04.520
<v Speaker 1>Bloop,

01:00:04.599 --> 01:00:06.359
<v Speaker 1>it will still be deployed to Bloop because

01:00:06.359 --> 01:00:07.960
<v Speaker 1>override is only happening

01:00:08.125 --> 01:00:09.485
<v Speaker 1>if it's not set.

01:00:11.485 --> 01:00:12.045
<v Speaker 1>But I'm not

01:00:13.085 --> 01:00:15.005
<v Speaker 1>I I'll not go into more detail in

01:00:15.005 --> 01:00:16.525
<v Speaker 1>in in that regard if that's fine for

01:00:16.525 --> 01:00:17.005
<v Speaker 1>you.

01:00:17.565 --> 01:00:18.205
<v Speaker 0>Okay.

01:00:19.885 --> 01:00:22.290
<v Speaker 1>Okay. Where did I stop? So

01:00:24.450 --> 01:00:26.130
<v Speaker 1>I think we were yeah. We we were

01:00:26.130 --> 01:00:26.850
<v Speaker 1>here with.

01:00:29.410 --> 01:00:32.450
<v Speaker 1>So I included a common YAML. That's not

01:00:32.450 --> 01:00:33.650
<v Speaker 1>very interesting.

01:00:33.810 --> 01:00:35.810
<v Speaker 1>It's nice, but it's

01:00:37.005 --> 01:00:38.925
<v Speaker 1>not the most important thing.

01:00:43.805 --> 01:00:45.405
<v Speaker 1>You

01:00:46.204 --> 01:00:48.125
<v Speaker 1>remember that I said that the arcs from

01:00:48.125 --> 01:00:50.765
<v Speaker 1>the target are more like an entry point

01:00:50.765 --> 01:00:51.724
<v Speaker 1>to the configuration.

01:00:52.650 --> 01:00:54.730
<v Speaker 1>Because if you would write down all the

01:00:54.730 --> 01:00:57.369
<v Speaker 1>configuration that is required for one environment, it's

01:00:57.369 --> 01:00:59.930
<v Speaker 1>easy to end up with pages of just

01:00:59.930 --> 01:01:01.930
<v Speaker 1>YAML inside this YAML,

01:01:02.490 --> 01:01:04.250
<v Speaker 1>which would make it hard to maintain.

01:01:04.650 --> 01:01:05.290
<v Speaker 1>So instead,

01:01:06.115 --> 01:01:07.795
<v Speaker 1>I tend to use it just as an

01:01:07.795 --> 01:01:10.435
<v Speaker 1>entry point. For example, env type, there's prod

01:01:10.435 --> 01:01:11.155
<v Speaker 1>and

01:01:11.235 --> 01:01:12.115
<v Speaker 1>non prod.

01:01:13.715 --> 01:01:16.115
<v Speaker 1>And what I can do inside the deployment

01:01:16.115 --> 01:01:18.355
<v Speaker 1>YAML then is, as I said, templating is

01:01:18.355 --> 01:01:19.555
<v Speaker 1>possible nearly everywhere.

01:01:20.040 --> 01:01:22.760
<v Speaker 1>I can use that to define which file

01:01:22.760 --> 01:01:23.640
<v Speaker 1>to include.

01:01:24.520 --> 01:01:26.280
<v Speaker 1>So what we can do now is

01:01:26.600 --> 01:01:28.280
<v Speaker 1>have a prod dot YAML

01:01:29.560 --> 01:01:32.760
<v Speaker 1>and have a non prod dot YAML.

01:01:34.505 --> 01:01:36.265
<v Speaker 1>What you can do now is

01:01:36.985 --> 01:01:39.385
<v Speaker 1>again, this is arbitrary YAML,

01:01:39.385 --> 01:01:40.905
<v Speaker 1>and what you can do now is

01:01:41.225 --> 01:01:42.745
<v Speaker 1>have the same stuff here.

01:01:43.625 --> 01:01:46.185
<v Speaker 1>And, for example, say, replicas

01:01:46.425 --> 01:01:48.185
<v Speaker 1>for non prod, let's have one.

01:01:50.170 --> 01:01:52.090
<v Speaker 1>For prod, let's have three.

01:01:54.890 --> 01:01:57.370
<v Speaker 1>Is it clear what this does? It is.

01:01:57.370 --> 01:01:57.850
<v Speaker 1>Yeah.

01:01:58.250 --> 01:01:59.130
<v Speaker 1>Great.

01:02:01.130 --> 01:02:03.565
<v Speaker 1>One thing that I should also mention is

01:02:03.805 --> 01:02:06.125
<v Speaker 1>this is layered on top.

01:02:06.445 --> 01:02:08.685
<v Speaker 1>This means first, this one is loaded,

01:02:09.725 --> 01:02:10.605
<v Speaker 1>then the

01:02:10.925 --> 01:02:12.925
<v Speaker 1>template context is enhanced,

01:02:12.925 --> 01:02:14.285
<v Speaker 1>then this one is loaded,

01:02:14.780 --> 01:02:15.900
<v Speaker 1>having this

01:02:16.540 --> 01:02:19.740
<v Speaker 1>included as well already. So I could theoretically

01:02:21.099 --> 01:02:21.900
<v Speaker 1>use

01:02:25.420 --> 01:02:27.339
<v Speaker 1>engine x dot version

01:02:27.339 --> 01:02:29.180
<v Speaker 1>here already. It doesn't make sense right now,

01:02:29.180 --> 01:02:32.060
<v Speaker 1>but I could do it. So I can

01:02:30.675 --> 01:02:31.475
<v Speaker 1>layer

01:02:31.475 --> 01:02:32.035
<v Speaker 1>one

01:02:32.515 --> 01:02:34.115
<v Speaker 1>on another and

01:02:34.755 --> 01:02:35.555
<v Speaker 1>kind of

01:02:36.035 --> 01:02:38.195
<v Speaker 1>do all kind of fancy stuff with that.

01:02:38.675 --> 01:02:40.435
<v Speaker 1>Then another thing is

01:02:40.755 --> 01:02:42.355
<v Speaker 1>if

01:02:43.089 --> 01:02:43.730
<v Speaker 1>one

01:02:44.930 --> 01:02:46.130
<v Speaker 1>vast file

01:02:46.930 --> 01:02:49.090
<v Speaker 1>has the same defined as

01:02:49.490 --> 01:02:52.450
<v Speaker 1>the one above, for example, we have

01:02:53.089 --> 01:02:54.450
<v Speaker 1>replicas here,

01:02:55.170 --> 01:02:57.250
<v Speaker 1>it will overwrite this one value.

01:02:58.555 --> 01:02:59.835
<v Speaker 1>So it does a,

01:03:00.955 --> 01:03:03.915
<v Speaker 1>yeah, a merge of of the YAML files.

01:03:04.555 --> 01:03:06.875
<v Speaker 1>So what you can also do is, let's

01:03:06.875 --> 01:03:07.355
<v Speaker 1>say,

01:03:07.675 --> 01:03:09.995
<v Speaker 1>we don't define anything for non prod.

01:03:10.715 --> 01:03:12.875
<v Speaker 1>So the default is to have replicas one.

01:03:13.250 --> 01:03:15.329
<v Speaker 1>But for prod, we have some special configuration

01:03:15.329 --> 01:03:18.210
<v Speaker 1>which say which says overwrite this value with

01:03:18.210 --> 01:03:18.850
<v Speaker 1>three.

01:03:20.049 --> 01:03:22.450
<v Speaker 1>Is that clear so far? It is.

01:03:23.569 --> 01:03:24.369
<v Speaker 1>Great.

01:03:24.369 --> 01:03:26.530
<v Speaker 1>And I think it's obvious. We just use

01:03:26.530 --> 01:03:27.329
<v Speaker 1>that value here.

01:03:29.325 --> 01:03:30.685
<v Speaker 1>And let's

01:03:30.685 --> 01:03:33.325
<v Speaker 1>do a dev deployment first because

01:03:35.085 --> 01:03:37.645
<v Speaker 1>nothing happens, which is expected because we didn't

01:03:37.645 --> 01:03:38.925
<v Speaker 1>change the replicas.

01:03:39.085 --> 01:03:41.485
<v Speaker 1>Right? Mhmm. But I completely forgot that it's

01:03:41.485 --> 01:03:42.925
<v Speaker 1>actually expected to nothing,

01:03:43.310 --> 01:03:46.030
<v Speaker 1>to to change nothing, but luckily, my tooling

01:03:46.030 --> 01:03:46.830
<v Speaker 1>is helping.

01:03:47.150 --> 01:03:48.830
<v Speaker 1>For prod, it should look different,

01:03:49.630 --> 01:03:51.310
<v Speaker 1>and something is wrong.

01:03:51.470 --> 01:03:53.070
<v Speaker 0>Because you did a print.

01:03:54.109 --> 01:03:55.230
<v Speaker 1>Oh, yeah.

01:03:55.550 --> 01:03:57.470
<v Speaker 1>That's what happens if you you see it's

01:03:57.470 --> 01:03:58.109
<v Speaker 1>really too much.

01:04:00.055 --> 01:04:01.495
<v Speaker 1>So and it

01:04:02.215 --> 01:04:03.895
<v Speaker 1>tells us that there is actually a change

01:04:03.895 --> 01:04:04.695
<v Speaker 1>for prod.

01:04:05.335 --> 01:04:06.775
<v Speaker 1>And we say yes,

01:04:07.015 --> 01:04:08.215
<v Speaker 1>and we see

01:04:08.775 --> 01:04:09.655
<v Speaker 1>more replicas,

01:04:11.280 --> 01:04:12.720
<v Speaker 1>which we expected. Great.

01:04:14.720 --> 01:04:17.920
<v Speaker 1>I assume that this feature we see is

01:04:20.960 --> 01:04:22.880
<v Speaker 1>I think it's clear. Right? It is.

01:04:23.925 --> 01:04:24.805
<v Speaker 1>Very important.

01:04:25.045 --> 01:04:27.125
<v Speaker 1>This is a list of vast sources. File

01:04:27.125 --> 01:04:29.205
<v Speaker 1>is just one type of vast source. There

01:04:29.205 --> 01:04:30.805
<v Speaker 1>are other types. For example,

01:04:31.365 --> 01:04:32.165
<v Speaker 1>HTTP.

01:04:32.165 --> 01:04:33.685
<v Speaker 1>You can do an HTTP request and load

01:04:33.685 --> 01:04:35.605
<v Speaker 1>some YAML from from the web.

01:04:36.320 --> 01:04:38.000
<v Speaker 1>You can load something

01:04:38.000 --> 01:04:38.720
<v Speaker 1>from

01:04:39.040 --> 01:04:39.840
<v Speaker 1>some

01:04:40.800 --> 01:04:42.240
<v Speaker 1>GitLab repo.

01:04:42.240 --> 01:04:44.560
<v Speaker 0>Does that work for deployments too instead of

01:04:44.560 --> 01:04:45.200
<v Speaker 0>path?

01:04:45.920 --> 01:04:46.560
<v Speaker 0>Yes.

01:04:46.960 --> 01:04:47.760
<v Speaker 0>Awesome.

01:04:47.760 --> 01:04:50.480
<v Speaker 1>Okay. Say git include, but I'm not going

01:04:50.480 --> 01:04:52.240
<v Speaker 1>to show that now because

01:04:53.255 --> 01:04:55.255
<v Speaker 1>that's what require gits to be set up

01:04:55.255 --> 01:04:56.935
<v Speaker 1>with and stuff like that.

01:04:59.335 --> 01:05:01.415
<v Speaker 1>So you then also give it the easy

01:05:01.415 --> 01:05:02.535
<v Speaker 1>path and so on.

01:05:03.175 --> 01:05:03.735
<v Speaker 1>What else?

01:05:04.310 --> 01:05:05.190
<v Speaker 1>Vault.

01:05:05.190 --> 01:05:06.710
<v Speaker 1>Vault is experimental.

01:05:07.270 --> 01:05:09.750
<v Speaker 1>We have HWS secrets manager.

01:05:10.790 --> 01:05:12.150
<v Speaker 1>And what else?

01:05:15.830 --> 01:05:16.790
<v Speaker 1>Cluster

01:05:16.950 --> 01:05:19.110
<v Speaker 1>config maps. This is also very interesting.

01:05:21.965 --> 01:05:23.885
<v Speaker 1>I think it's namespace,

01:05:25.245 --> 01:05:26.925
<v Speaker 1>name and key.

01:05:27.405 --> 01:05:29.645
<v Speaker 1>I don't remember exactly which ones need to

01:05:29.645 --> 01:05:30.925
<v Speaker 1>be specified, but what you can also do

01:05:30.925 --> 01:05:34.150
<v Speaker 1>is while you're deploying, it's loading something from

01:05:34.150 --> 01:05:36.630
<v Speaker 1>the cluster using that as variable source, and

01:05:36.630 --> 01:05:38.390
<v Speaker 1>then you can use it in the templating.

01:05:38.390 --> 01:05:40.550
<v Speaker 0>Yeah. That's just bit more interesting for me

01:05:40.550 --> 01:05:42.230
<v Speaker 0>in a personal level. I

01:05:42.710 --> 01:05:43.830
<v Speaker 0>I do a lot of

01:05:45.270 --> 01:05:47.345
<v Speaker 0>conference talks. And one of the ones I've

01:05:47.345 --> 01:05:48.625
<v Speaker 0>been given a lot over the last two

01:05:48.625 --> 01:05:50.464
<v Speaker 0>years is to talk about get ups and

01:05:50.464 --> 01:05:53.425
<v Speaker 0>how Mhmm. Actually, overlays are an anti pattern

01:05:53.425 --> 01:05:57.665
<v Speaker 0>because we encode environmental information into our application

01:05:58.545 --> 01:05:59.905
<v Speaker 0>deployment description

01:05:59.990 --> 01:06:02.150
<v Speaker 0>when really our application shouldn't actually know the

01:06:02.150 --> 01:06:04.470
<v Speaker 0>environment exists. The environment should provide everything that

01:06:04.470 --> 01:06:07.430
<v Speaker 0>needs. And with this cluster config map option,

01:06:07.750 --> 01:06:09.510
<v Speaker 0>we actually provide a way to say,

01:06:09.670 --> 01:06:12.630
<v Speaker 0>here's enough information to deploy and get everything

01:06:12.630 --> 01:06:15.075
<v Speaker 0>else from the cluster itself. Like, that to

01:06:15.075 --> 01:06:17.555
<v Speaker 0>me is a killer feature. Yep. It is.

01:06:17.875 --> 01:06:20.435
<v Speaker 1>We use it as an example to provide

01:06:20.675 --> 01:06:22.115
<v Speaker 1>so so what we do is we have

01:06:22.115 --> 01:06:24.355
<v Speaker 1>a kind of cluster based deployment,

01:06:25.010 --> 01:06:26.690
<v Speaker 1>which is a Kluctl

01:06:26.690 --> 01:06:27.410
<v Speaker 1>deployment,

01:06:27.490 --> 01:06:29.490
<v Speaker 1>which contains ingress controllers,

01:06:29.569 --> 01:06:30.530
<v Speaker 1>gatekeeper,

01:06:31.089 --> 01:06:33.730
<v Speaker 1>Selium is deployed in. Like, everything you need

01:06:33.730 --> 01:06:36.849
<v Speaker 1>to have a usable cluster. So you start

01:06:36.849 --> 01:06:38.849
<v Speaker 1>with a naked cluster and you provide it

01:06:38.849 --> 01:06:40.914
<v Speaker 1>with everything that you need. What we also

01:06:40.914 --> 01:06:43.234
<v Speaker 1>deploy as part of that is oh, no.

01:06:43.234 --> 01:06:45.154
<v Speaker 1>Actually, one step before when we create the

01:06:45.154 --> 01:06:48.435
<v Speaker 1>naked cluster through cluster RP, we also

01:06:48.595 --> 01:06:52.355
<v Speaker 1>deploy a config map containing information about the

01:06:53.590 --> 01:06:57.109
<v Speaker 1>low level infrastructure, for example, networking, which subnets

01:06:57.109 --> 01:06:59.510
<v Speaker 1>are used for the cluster and stuff like

01:06:59.510 --> 01:07:01.270
<v Speaker 1>that. So it's just a config map. Every

01:07:01.270 --> 01:07:02.390
<v Speaker 1>cluster has that.

01:07:02.790 --> 01:07:03.750
<v Speaker 1>In the end,

01:07:04.070 --> 01:07:07.190
<v Speaker 1>the base deployment can then use cluster config

01:07:07.190 --> 01:07:10.165
<v Speaker 1>map to load that config map, then get

01:07:10.165 --> 01:07:12.085
<v Speaker 1>information about the subnets,

01:07:12.485 --> 01:07:14.725
<v Speaker 1>which is usually a mess to get from

01:07:15.525 --> 01:07:17.045
<v Speaker 1>Terraform into

01:07:17.365 --> 01:07:19.285
<v Speaker 1>your deployments and stuff like that. So

01:07:19.859 --> 01:07:21.380
<v Speaker 1>in this way, it's it's

01:07:21.619 --> 01:07:23.859
<v Speaker 1>quite easy. And then we can use that

01:07:23.859 --> 01:07:26.740
<v Speaker 1>information to configure Cilium properly to use the

01:07:26.740 --> 01:07:28.020
<v Speaker 1>correct subnets

01:07:28.180 --> 01:07:29.779
<v Speaker 1>and so on. I I think you understand

01:07:29.779 --> 01:07:30.900
<v Speaker 1>this. You can

01:07:32.255 --> 01:07:33.855
<v Speaker 1>do a lot of stuff with that.

01:07:34.575 --> 01:07:36.735
<v Speaker 1>There's also the the cluster secret, which is

01:07:36.735 --> 01:07:38.815
<v Speaker 1>basically the same. Just just the secrets.

01:07:39.215 --> 01:07:39.855
<v Speaker 0>Okay.

01:07:40.815 --> 01:07:43.215
<v Speaker 0>We've got just over twenty minutes left, so

01:07:43.215 --> 01:07:44.735
<v Speaker 0>I think we should get onto the helm

01:07:44.735 --> 01:07:48.480
<v Speaker 0>stuff and show that. Oh, yeah. Okay. Then

01:07:48.640 --> 01:07:50.000
<v Speaker 1>so I think we

01:07:50.880 --> 01:07:53.520
<v Speaker 1>described everything related to that. Okay. So

01:07:54.800 --> 01:07:57.040
<v Speaker 1>let's do something different. This is very important.

01:07:57.120 --> 01:07:58.880
<v Speaker 1>I'm not going to directly include the Helm

01:07:58.880 --> 01:08:00.240
<v Speaker 1>file. I'm going to

01:08:01.865 --> 01:08:03.385
<v Speaker 1>add a sub deployment,

01:08:04.105 --> 01:08:05.545
<v Speaker 1>which just contains

01:08:05.545 --> 01:08:07.545
<v Speaker 1>a deployment dot YAML,

01:08:08.025 --> 01:08:09.865
<v Speaker 1>which is the same as this one from

01:08:09.865 --> 01:08:12.105
<v Speaker 1>the ID. And what you do here now

01:08:12.105 --> 01:08:14.825
<v Speaker 1>is instead of pass, we say include

01:08:16.569 --> 01:08:18.010
<v Speaker 1>third party,

01:08:20.250 --> 01:08:20.889
<v Speaker 1>and

01:08:22.649 --> 01:08:25.369
<v Speaker 1>this one starts with deployments again.

01:08:25.689 --> 01:08:28.489
<v Speaker 1>And here, we have, again, a customized deployment,

01:08:28.489 --> 01:08:30.345
<v Speaker 1>and we call it pod info. I know

01:08:30.345 --> 01:08:31.304
<v Speaker 1>it's Helm,

01:08:31.545 --> 01:08:32.505
<v Speaker 1>internally,

01:08:33.064 --> 01:08:36.824
<v Speaker 1>customize is used to actually deploy Helm.

01:08:37.385 --> 01:08:39.944
<v Speaker 1>It will get clearer in a few minutes.

01:08:40.745 --> 01:08:43.145
<v Speaker 1>So we have the pod info.

01:08:47.699 --> 01:08:48.819
<v Speaker 1>And now

01:08:50.819 --> 01:08:52.420
<v Speaker 1>we have the customization

01:08:52.420 --> 01:08:53.380
<v Speaker 1>YAML

01:08:54.739 --> 01:08:55.699
<v Speaker 1>resources.

01:09:00.755 --> 01:09:02.115
<v Speaker 1>Ignore that for now. I'm going to explain

01:09:02.115 --> 01:09:04.435
<v Speaker 1>it in a minute. So now the HAM

01:09:04.435 --> 01:09:06.835
<v Speaker 1>integration. Now it gets interesting. So for the

01:09:06.835 --> 01:09:08.594
<v Speaker 1>HAM integration, we first specify

01:09:08.835 --> 01:09:11.234
<v Speaker 1>which HAM chart we actually want to pull

01:09:11.234 --> 01:09:11.475
<v Speaker 1>in.

01:09:13.620 --> 01:09:15.219
<v Speaker 1>I keep forgetting

01:09:15.540 --> 01:09:16.739
<v Speaker 1>the format

01:09:16.739 --> 01:09:19.380
<v Speaker 1>of that. Let me do a copy paste.

01:09:22.420 --> 01:09:25.219
<v Speaker 1>So there's documentation at Kluctl.io.

01:09:25.219 --> 01:09:27.779
<v Speaker 1>I hope I have documented everything that is

01:09:27.779 --> 01:09:28.179
<v Speaker 1>needed.

01:09:28.725 --> 01:09:31.685
<v Speaker 1>If something is missing, just tell me, and

01:09:31.685 --> 01:09:33.284
<v Speaker 1>I'll provide it.

01:09:34.725 --> 01:09:35.844
<v Speaker 1>And I'm copying

01:09:36.005 --> 01:09:37.524
<v Speaker 1>from there right now. So

01:09:38.244 --> 01:09:40.005
<v Speaker 1>this is the basic structure of the Helm

01:09:40.005 --> 01:09:42.484
<v Speaker 1>chart. As you maybe already see, it's just

01:09:42.484 --> 01:09:45.100
<v Speaker 1>a representation of what you would usually give

01:09:45.100 --> 01:09:46.859
<v Speaker 1>Helm while you install something.

01:09:47.340 --> 01:09:48.939
<v Speaker 1>You give it to repo, chart name, chart

01:09:48.939 --> 01:09:50.139
<v Speaker 1>version, and so on.

01:09:52.060 --> 01:09:53.020
<v Speaker 1>Dot.

01:09:53.500 --> 01:09:54.219
<v Speaker 1>So

01:09:55.180 --> 01:09:56.860
<v Speaker 1>let me look for pod info.

01:09:58.465 --> 01:10:00.545
<v Speaker 1>There is the pod info chart. I know

01:10:00.545 --> 01:10:01.985
<v Speaker 1>you cannot see what I'm doing right now.

01:10:01.985 --> 01:10:03.425
<v Speaker 1>I'm on another screen.

01:10:04.305 --> 01:10:06.945
<v Speaker 1>Just doing some copy paste. So we specify

01:10:06.945 --> 01:10:08.305
<v Speaker 1>the repository.

01:10:08.945 --> 01:10:09.825
<v Speaker 1>We specify

01:10:11.170 --> 01:10:13.889
<v Speaker 1>the chart name, pod info, and we specify

01:10:13.889 --> 01:10:14.929
<v Speaker 1>the version,

01:10:15.170 --> 01:10:16.769
<v Speaker 1>six dot 2 dot one.

01:10:18.210 --> 01:10:19.969
<v Speaker 1>Just for demo purposes,

01:10:20.530 --> 01:10:22.610
<v Speaker 1>let's not use the latest one so that

01:10:22.610 --> 01:10:24.289
<v Speaker 1>we can later show how an update is

01:10:24.289 --> 01:10:26.855
<v Speaker 1>actually working. We don't want to skip updates.

01:10:26.855 --> 01:10:28.535
<v Speaker 1>We are happy with updates here.

01:10:28.695 --> 01:10:30.695
<v Speaker 1>Release name, it's the same as if you

01:10:30.695 --> 01:10:31.975
<v Speaker 1>would do a helm install.

01:10:32.215 --> 01:10:33.975
<v Speaker 1>Let's call it pod info

01:10:34.215 --> 01:10:35.175
<v Speaker 1>namespace.

01:10:36.935 --> 01:10:38.295
<v Speaker 1>Let's not forget it this time.

01:10:39.920 --> 01:10:42.639
<v Speaker 1>What was it? Target dot name demo dash

01:10:42.639 --> 01:10:43.840
<v Speaker 0>target dot name.

01:10:45.040 --> 01:10:46.559
<v Speaker 1>Just one output.

01:10:49.520 --> 01:10:50.159
<v Speaker 1>So

01:10:51.360 --> 01:10:54.075
<v Speaker 1>what it internally does is it renders the

01:10:54.075 --> 01:10:57.275
<v Speaker 1>Helm chart through the Helm template functionality.

01:10:59.195 --> 01:11:02.635
<v Speaker 1>And then it uses the resulting YAML

01:11:03.595 --> 01:11:06.715
<v Speaker 1>to write it into some internally temporary file

01:11:06.715 --> 01:11:07.755
<v Speaker 1>called deploy YAML,

01:11:08.100 --> 01:11:10.580
<v Speaker 1>and then use customize to actually load the

01:11:10.580 --> 01:11:11.619
<v Speaker 1>temporary file.

01:11:12.580 --> 01:11:14.580
<v Speaker 1>At that point, we can use customize, for

01:11:14.580 --> 01:11:17.139
<v Speaker 1>example, to even patch the HAM chart, which

01:11:17.139 --> 01:11:19.619
<v Speaker 1>is needed more often than I like,

01:11:19.940 --> 01:11:22.295
<v Speaker 1>for example, to add port security context and

01:11:22.295 --> 01:11:24.135
<v Speaker 1>stuff like that, which the HAM chart doesn't

01:11:24.135 --> 01:11:25.255
<v Speaker 1>support natively.

01:11:27.735 --> 01:11:28.454
<v Speaker 1>So

01:11:32.135 --> 01:11:33.975
<v Speaker 1>I think that's it for now.

01:11:35.100 --> 01:11:37.100
<v Speaker 1>I think I mentioned in the beginning that

01:11:37.100 --> 01:11:38.460
<v Speaker 1>for the Helm integration,

01:11:38.940 --> 01:11:40.460
<v Speaker 1>I do pre pulling.

01:11:41.020 --> 01:11:43.180
<v Speaker 1>That means before I can actually use that,

01:11:43.180 --> 01:11:45.500
<v Speaker 1>I have to pre pull that Helm chart

01:11:45.500 --> 01:11:47.420
<v Speaker 1>and put it into my version control.

01:11:48.975 --> 01:11:51.215
<v Speaker 1>I can do that by using Kluctl

01:11:51.775 --> 01:11:54.415
<v Speaker 1>helm pull. It will go through the project

01:11:54.415 --> 01:11:56.414
<v Speaker 1>and find all helm chart YAMLs

01:11:56.735 --> 01:11:59.775
<v Speaker 1>and pulling it and just putting it

01:12:00.830 --> 01:12:03.150
<v Speaker 1>near that hand chart YAML. This is really

01:12:03.150 --> 01:12:05.469
<v Speaker 1>just a copy of the chart itself.

01:12:06.670 --> 01:12:07.950
<v Speaker 1>It means I can also look into the

01:12:07.950 --> 01:12:09.710
<v Speaker 1>values YAML, for example, to figure out which

01:12:09.710 --> 01:12:11.070
<v Speaker 1>values are supported.

01:12:12.910 --> 01:12:14.270
<v Speaker 1>So I don't even have to go to

01:12:14.270 --> 01:12:17.144
<v Speaker 1>the to the website and read documentation.

01:12:18.985 --> 01:12:21.704
<v Speaker 1>The next step is we need helm values.

01:12:21.704 --> 01:12:22.985
<v Speaker 1>Not always, but

01:12:23.465 --> 01:12:25.784
<v Speaker 1>sometimes or actually in most cases,

01:12:26.744 --> 01:12:28.025
<v Speaker 1>which is the helm values.

01:12:30.619 --> 01:12:32.300
<v Speaker 1>And what you can do now, let let's

01:12:32.300 --> 01:12:33.739
<v Speaker 1>figure out what you can modify. We can

01:12:33.739 --> 01:12:36.219
<v Speaker 1>modify your replica count. That's interesting. So let's

01:12:36.219 --> 01:12:37.579
<v Speaker 1>say replica count.

01:12:38.940 --> 01:12:40.540
<v Speaker 1>As we are running out of time, I'm

01:12:40.540 --> 01:12:42.860
<v Speaker 1>just going to reuse the NGINX replicas now.

01:12:43.195 --> 01:12:44.955
<v Speaker 1>It's not correct. Of course, you wouldn't do

01:12:44.955 --> 01:12:47.275
<v Speaker 1>that in a real project, but for the

01:12:47.275 --> 01:12:49.114
<v Speaker 1>demo, it's good enough.

01:12:49.755 --> 01:12:51.755
<v Speaker 1>I think we are done.

01:12:52.155 --> 01:12:54.955
<v Speaker 1>We right now have a hand chart integrated,

01:12:55.355 --> 01:12:56.955
<v Speaker 1>and we should be able to

01:12:58.190 --> 01:12:59.070
<v Speaker 1>deploy it

01:12:59.870 --> 01:13:00.749
<v Speaker 1>right now.

01:13:00.989 --> 01:13:02.749
<v Speaker 1>Unknown shorthand. What?

01:13:03.310 --> 01:13:05.630
<v Speaker 0>You forgot dash t. Yeah.

01:13:06.909 --> 01:13:08.110
<v Speaker 1>And what you see is yeah.

01:13:09.150 --> 01:13:10.670
<v Speaker 1>Yeah. This is the change that I didn't

01:13:10.670 --> 01:13:10.989
<v Speaker 1>deploy.

01:13:11.574 --> 01:13:13.655
<v Speaker 1>And you see a list of new objects,

01:13:13.735 --> 01:13:16.215
<v Speaker 1>deployment pod info and service pod info.

01:13:16.534 --> 01:13:18.135
<v Speaker 1>Going to deploy that now.

01:13:19.175 --> 01:13:19.814
<v Speaker 1>And

01:13:20.934 --> 01:13:22.855
<v Speaker 1>k nine s. Yep. Looks good.

01:13:24.790 --> 01:13:25.590
<v Speaker 1>Thread.

01:13:26.070 --> 01:13:28.470
<v Speaker 1>We assume that's normal in the beginning. Yeah.

01:13:28.950 --> 01:13:31.989
<v Speaker 1>Logs look good. Let's do some port forwarding.

01:13:32.790 --> 01:13:33.990
<v Speaker 1>9898.

01:13:38.805 --> 01:13:40.645
<v Speaker 1>9 8 9 8.

01:13:41.205 --> 01:13:43.445
<v Speaker 1>And there we have bot info. You can

01:13:43.445 --> 01:13:44.965
<v Speaker 1>do stuff here. Nice.

01:13:46.005 --> 01:13:48.725
<v Speaker 1>So that's the basic HAM integration.

01:13:51.130 --> 01:13:54.170
<v Speaker 1>Any questions at that point? Any comments?

01:13:55.290 --> 01:13:58.410
<v Speaker 0>No. That makes that makes sense. Like, our

01:13:58.410 --> 01:14:00.970
<v Speaker 0>intermediate deploy dot YAML, I guess that's cleaned

01:14:00.970 --> 01:14:02.170
<v Speaker 0>up by Kluctl.

01:14:04.755 --> 01:14:07.155
<v Speaker 1>Cleaned up? Well, I don't see it.

01:14:07.955 --> 01:14:10.435
<v Speaker 1>Yeah. It's it's not not happening in this

01:14:10.435 --> 01:14:12.515
<v Speaker 1>folder because I'm

01:14:12.995 --> 01:14:15.955
<v Speaker 0>Okay. Too scared to destroy something important. What

01:14:15.955 --> 01:14:17.780
<v Speaker 1>I'm doing is I'm

01:14:17.940 --> 01:14:20.420
<v Speaker 1>creating a temporary folder, and then I'm rendering

01:14:20.420 --> 01:14:23.139
<v Speaker 1>the complete project into that temporary folder.

01:14:23.380 --> 01:14:25.300
<v Speaker 1>And as part of that rendering process, I

01:14:25.300 --> 01:14:27.860
<v Speaker 1>also create the templates from the hand charts

01:14:28.260 --> 01:14:31.220
<v Speaker 1>and put the temporary files into that temporary

01:14:31.220 --> 01:14:33.275
<v Speaker 1>folder so I do not mess with the

01:14:33.275 --> 01:14:34.395
<v Speaker 1>actual project,

01:14:35.915 --> 01:14:37.995
<v Speaker 1>which would be scary.

01:14:39.275 --> 01:14:40.715
<v Speaker 0>Cool. So

01:14:41.195 --> 01:14:42.875
<v Speaker 1>I think that's clear. And now

01:14:44.955 --> 01:14:45.835
<v Speaker 1>I did a

01:14:46.550 --> 01:14:49.190
<v Speaker 1>small mention in in the in the

01:14:50.950 --> 01:14:53.510
<v Speaker 1>the slides that even the helm values are

01:14:53.510 --> 01:14:55.590
<v Speaker 1>templatable now. That means

01:14:56.230 --> 01:14:59.030
<v Speaker 1>I can do stuff like, let's say, in

01:14:59.030 --> 01:15:00.470
<v Speaker 1>the VARs for prods.

01:15:01.575 --> 01:15:03.815
<v Speaker 1>Let's say in in non prod, we have

01:15:04.695 --> 01:15:05.895
<v Speaker 1>prod info,

01:15:06.295 --> 01:15:07.735
<v Speaker 1>change color,

01:15:08.455 --> 01:15:09.175
<v Speaker 1>true.

01:15:09.975 --> 01:15:11.735
<v Speaker 1>Oh, no. Let's say false.

01:15:12.455 --> 01:15:14.695
<v Speaker 1>And for prod, we say change color,

01:15:16.050 --> 01:15:16.850
<v Speaker 1>shoe.

01:15:16.930 --> 01:15:19.250
<v Speaker 1>As said, arbitrary YAML, I could do whatever

01:15:19.250 --> 01:15:20.610
<v Speaker 1>I want here. In this case, I'm having

01:15:20.610 --> 01:15:21.489
<v Speaker 1>a Boolean.

01:15:22.050 --> 01:15:23.410
<v Speaker 1>And what I can do now is in

01:15:23.410 --> 01:15:24.610
<v Speaker 1>the helm values,

01:15:25.090 --> 01:15:26.370
<v Speaker 1>ginger templating,

01:15:27.010 --> 01:15:29.570
<v Speaker 1>if how do you call it? Pod info

01:15:29.570 --> 01:15:31.650
<v Speaker 1>dot change

01:15:31.175 --> 01:15:31.975
<v Speaker 1>color.

01:15:35.735 --> 01:15:37.735
<v Speaker 1>I can do some conditional stuff here.

01:15:39.495 --> 01:15:42.135
<v Speaker 1>Yeah. Don't don't be confused about the errors

01:15:42.135 --> 01:15:45.015
<v Speaker 1>that it's showing because Ginger and YAML and

01:15:45.015 --> 01:15:45.815
<v Speaker 1>IDEs,

01:15:47.500 --> 01:15:48.699
<v Speaker 1>lots of good friends.

01:15:49.100 --> 01:15:51.740
<v Speaker 1>So inside the pod info, where you see

01:15:51.740 --> 01:15:54.380
<v Speaker 1>them, I've seen that you can specify color.

01:15:58.060 --> 01:15:58.700
<v Speaker 1>That's all.

01:16:04.125 --> 01:16:05.325
<v Speaker 1>Let's do

01:16:06.845 --> 01:16:09.485
<v Speaker 1>think it should support something like this. This

01:16:09.485 --> 01:16:10.364
<v Speaker 1>is well.

01:16:11.965 --> 01:16:13.885
<v Speaker 1>And

01:16:13.580 --> 01:16:14.300
<v Speaker 1>done.

01:16:14.780 --> 01:16:17.100
<v Speaker 1>So the interesting thing is we know that

01:16:17.100 --> 01:16:19.660
<v Speaker 1>we have changed some helm values, but in

01:16:19.660 --> 01:16:21.260
<v Speaker 1>the end, we have no idea what that

01:16:21.260 --> 01:16:22.139
<v Speaker 1>actually means.

01:16:22.700 --> 01:16:25.660
<v Speaker 1>Because depending on how the templates are implemented,

01:16:25.660 --> 01:16:26.940
<v Speaker 1>this could mean everything.

01:16:27.615 --> 01:16:30.975
<v Speaker 1>And we don't know before it's deployed usually.

01:16:31.215 --> 01:16:33.375
<v Speaker 1>But with ClusterityO, what we see now is

01:16:33.375 --> 01:16:35.615
<v Speaker 1>we see a full diff which says nothing

01:16:35.615 --> 01:16:36.495
<v Speaker 1>has changed

01:16:36.735 --> 01:16:39.295
<v Speaker 1>because for dev, change color is false.

01:16:40.300 --> 01:16:41.740
<v Speaker 1>This is a bad example now, as I

01:16:41.740 --> 01:16:44.460
<v Speaker 1>realized, because we wouldn't see a diff

01:16:44.700 --> 01:16:45.820
<v Speaker 1>on prods. Sorry?

01:16:47.740 --> 01:16:49.580
<v Speaker 0>Just swap prod and non prod around to

01:16:49.580 --> 01:16:51.820
<v Speaker 0>true and the false. Yeah. Yeah. That's Keep

01:16:52.380 --> 01:16:52.860
<v Speaker 0>it simple.

01:16:53.605 --> 01:16:54.564
<v Speaker 1>Exactly.

01:16:54.724 --> 01:16:55.445
<v Speaker 1>So

01:16:57.764 --> 01:16:59.764
<v Speaker 1>doing it again, we should see the detailed

01:16:59.764 --> 01:17:01.844
<v Speaker 1>diff about what actually happened. For example,

01:17:02.005 --> 01:17:05.125
<v Speaker 1>it didn't just change some value, it also

01:17:05.125 --> 01:17:07.605
<v Speaker 1>added something to the deployment, which wasn't there

01:17:07.605 --> 01:17:10.010
<v Speaker 1>before. And now I see that this actually

01:17:10.010 --> 01:17:11.449
<v Speaker 1>had that consequence.

01:17:11.930 --> 01:17:13.610
<v Speaker 1>And I can either say yes or no,

01:17:13.610 --> 01:17:15.450
<v Speaker 1>and I'm fine with that change. I don't

01:17:15.450 --> 01:17:17.290
<v Speaker 1>know if this green stuff really works, but

01:17:17.290 --> 01:17:18.570
<v Speaker 1>I assume yes.

01:17:19.290 --> 01:17:19.929
<v Speaker 1>So

01:17:20.330 --> 01:17:21.290
<v Speaker 1>after some time,

01:17:22.995 --> 01:17:25.315
<v Speaker 1>looks like it's already restarted.

01:17:29.075 --> 01:17:30.355
<v Speaker 1>The port forwarding

01:17:30.515 --> 01:17:31.795
<v Speaker 1>has to be reset.

01:17:33.635 --> 01:17:34.675
<v Speaker 1>And it's green.

01:17:35.075 --> 01:17:35.795
<v Speaker 1>Great.

01:17:35.955 --> 01:17:36.835
<v Speaker 1>But only on that.

01:17:38.840 --> 01:17:40.920
<v Speaker 0>So can we do the Helm upgrade to

01:17:40.920 --> 01:17:42.519
<v Speaker 0>six one one as well?

01:17:42.840 --> 01:17:43.559
<v Speaker 1>Yeah.

01:17:45.800 --> 01:17:48.040
<v Speaker 1>So, usually, you would have all this in

01:17:48.040 --> 01:17:48.599
<v Speaker 1>Git

01:17:48.920 --> 01:17:49.800
<v Speaker 1>because

01:17:50.195 --> 01:17:52.995
<v Speaker 1>everyone uses Git. So let's create a Git

01:17:52.995 --> 01:17:55.395
<v Speaker 1>project first. I wouldn't it's not really required.

01:17:55.395 --> 01:17:57.555
<v Speaker 1>I could show everything just without Git, but

01:17:57.555 --> 01:17:58.995
<v Speaker 1>I'd like to show the Git integration as

01:17:58.995 --> 01:18:00.595
<v Speaker 1>well when it comes to Helm upgrades.

01:18:01.075 --> 01:18:03.475
<v Speaker 1>I'm doing something that I really hate, and

01:18:03.475 --> 01:18:05.315
<v Speaker 1>if I ever see anyone doing that,

01:18:07.870 --> 01:18:09.310
<v Speaker 1>I'll scream at him.

01:18:11.710 --> 01:18:12.429
<v Speaker 1>What

01:18:12.910 --> 01:18:13.630
<v Speaker 1>is it?

01:18:14.270 --> 01:18:15.310
<v Speaker 1>Oh my god.

01:18:17.870 --> 01:18:19.310
<v Speaker 1>What is happening here?

01:18:21.025 --> 01:18:23.345
<v Speaker 0>It's get add dot and then get commit

01:18:23.345 --> 01:18:24.304
<v Speaker 0>dash m.

01:18:26.945 --> 01:18:29.345
<v Speaker 1>Okay. Get add dot. Yep. And then you

01:18:29.345 --> 01:18:30.705
<v Speaker 0>can do get commit with a message.

01:18:32.830 --> 01:18:33.870
<v Speaker 1>Yeah.

01:18:33.870 --> 01:18:35.310
<v Speaker 1>Well, what I'm trying to say is never

01:18:35.310 --> 01:18:38.110
<v Speaker 1>add everything and commit it just without verifying

01:18:38.110 --> 01:18:39.790
<v Speaker 1>what you actually committed, but that's a different

01:18:39.790 --> 01:18:40.349
<v Speaker 1>story.

01:18:40.670 --> 01:18:42.030
<v Speaker 1>So we have

01:18:43.710 --> 01:18:44.670
<v Speaker 1>a simple

01:18:45.375 --> 01:18:48.255
<v Speaker 1>git repository now with just one commit.

01:18:48.575 --> 01:18:49.855
<v Speaker 1>And what we want to do now is

01:18:49.855 --> 01:18:51.695
<v Speaker 1>we want to figure out for the dozens

01:18:51.695 --> 01:18:53.375
<v Speaker 1>of ham charts that we are using. We

01:18:53.375 --> 01:18:55.295
<v Speaker 1>probably already forgot which ones we are using

01:18:55.295 --> 01:18:56.735
<v Speaker 1>because it's just so many.

01:18:57.055 --> 01:18:59.615
<v Speaker 1>We want to just upgrade everyone. Actually, let's

01:18:59.615 --> 01:19:02.489
<v Speaker 1>just figure out which ones have upgrades.

01:19:06.170 --> 01:19:08.810
<v Speaker 1>I forgot to tell. Update or upgrade. Help

01:19:08.810 --> 01:19:09.449
<v Speaker 1>update.

01:19:10.010 --> 01:19:11.530
<v Speaker 1>And it tells me, oh, there's a ham

01:19:11.530 --> 01:19:12.810
<v Speaker 1>chart. It has a new version available,

01:19:13.595 --> 01:19:14.955
<v Speaker 1>and I could upgrade.

01:19:15.115 --> 01:19:17.035
<v Speaker 1>If I decide I actually want to upgrade,

01:19:17.035 --> 01:19:18.395
<v Speaker 1>what I can do is tell it to

01:19:18.395 --> 01:19:19.035
<v Speaker 1>upgrade.

01:19:19.595 --> 01:19:21.515
<v Speaker 1>This will do the upgrade and write the

01:19:21.515 --> 01:19:24.475
<v Speaker 1>changes to the local file files,

01:19:25.515 --> 01:19:27.195
<v Speaker 1>but that's not enough. I actually want to

01:19:27.195 --> 01:19:28.315
<v Speaker 1>have it committed as well.

01:19:29.420 --> 01:19:30.380
<v Speaker 1>So it

01:19:31.500 --> 01:19:34.700
<v Speaker 1>updated it, pulled it, committed it. So if

01:19:34.700 --> 01:19:36.140
<v Speaker 1>you look into the, oops,

01:19:36.540 --> 01:19:38.860
<v Speaker 1>into the logs, we see a commit

01:19:39.100 --> 01:19:40.380
<v Speaker 1>that has only

01:19:40.780 --> 01:19:44.405
<v Speaker 1>the specific changes related to that update included.

01:19:44.405 --> 01:19:46.565
<v Speaker 1>So even if I would have pending changes

01:19:46.565 --> 01:19:49.045
<v Speaker 1>anywhere else, this commit would be a clean

01:19:49.045 --> 01:19:51.125
<v Speaker 1>commit just containing the

01:19:52.565 --> 01:19:54.725
<v Speaker 1>the update. And do you get one that

01:19:54.725 --> 01:19:56.965
<v Speaker 0>per Helm chart, or is it all grouped

01:19:56.965 --> 01:19:59.270
<v Speaker 0>together? It's one per Helm chart. The idea

01:19:59.270 --> 01:20:00.870
<v Speaker 1>is that if you realize, okay,

01:20:01.350 --> 01:20:03.910
<v Speaker 1>it's nice to upgrade pod info, but upgrading

01:20:03.910 --> 01:20:05.270
<v Speaker 1>Selium is maybe

01:20:05.830 --> 01:20:07.750
<v Speaker 1>bad idea right now. You can

01:20:08.390 --> 01:20:10.310
<v Speaker 1>revert that one commit, for example,

01:20:10.945 --> 01:20:13.265
<v Speaker 1>or just rebase and remove that one commit

01:20:13.265 --> 01:20:14.625
<v Speaker 1>or whatever you want. So you can use

01:20:14.625 --> 01:20:15.905
<v Speaker 1>Git's features to

01:20:16.385 --> 01:20:18.705
<v Speaker 1>to manage your your Helm upgrades.

01:20:19.825 --> 01:20:20.385
<v Speaker 1>So

01:20:20.865 --> 01:20:22.705
<v Speaker 1>inside the diff of that one

01:20:23.185 --> 01:20:23.905
<v Speaker 1>k. What?

01:20:29.900 --> 01:20:31.980
<v Speaker 1>You can then see, oh, okay. The app

01:20:31.980 --> 01:20:33.019
<v Speaker 1>version has changed.

01:20:33.739 --> 01:20:35.019
<v Speaker 1>Usually, you would use

01:20:35.420 --> 01:20:37.179
<v Speaker 1>magic quest or something like that and have

01:20:37.179 --> 01:20:39.335
<v Speaker 1>a nice view of what we see here

01:20:39.335 --> 01:20:41.255
<v Speaker 1>right now. But as said, you can do

01:20:41.255 --> 01:20:42.775
<v Speaker 1>a source level

01:20:43.175 --> 01:20:43.975
<v Speaker 1>review

01:20:43.975 --> 01:20:47.015
<v Speaker 1>and verify that what happens is really what

01:20:47.015 --> 01:20:49.094
<v Speaker 1>you want to happen. And then the next

01:20:49.094 --> 01:20:51.255
<v Speaker 1>step is, of course, because as said,

01:20:51.735 --> 01:20:52.375
<v Speaker 1>in the end,

01:20:53.570 --> 01:20:55.650
<v Speaker 1>it might be that there are hundreds of

01:20:55.650 --> 01:20:57.890
<v Speaker 1>lines changed, but it's not affecting your deployment

01:20:57.890 --> 01:21:00.370
<v Speaker 1>at all or just changing the image version,

01:21:00.370 --> 01:21:00.850
<v Speaker 1>for example.

01:21:06.105 --> 01:21:08.585
<v Speaker 1>So the final step is to actually look

01:21:08.585 --> 01:21:10.905
<v Speaker 1>at the diff because this is the truth.

01:21:10.905 --> 01:21:13.705
<v Speaker 1>This is what's actually going to happen. What

01:21:13.705 --> 01:21:15.785
<v Speaker 1>you see here is now the label's being

01:21:15.785 --> 01:21:19.305
<v Speaker 1>changed. Makes sense. Version information. Version information. The

01:21:19.305 --> 01:21:20.505
<v Speaker 1>image has changed

01:21:21.320 --> 01:21:23.800
<v Speaker 1>and nothing else. That looks like a

01:21:24.840 --> 01:21:26.920
<v Speaker 1>easy upgrade that we just accept,

01:21:27.560 --> 01:21:28.599
<v Speaker 1>and we are done.

01:21:30.920 --> 01:21:33.640
<v Speaker 1>So that's the Helm integration. I've been quite

01:21:33.640 --> 01:21:35.960
<v Speaker 1>fast now. How does that work with Helm

01:21:35.960 --> 01:21:37.775
<v Speaker 0>hooks? Are those supported?

01:21:38.335 --> 01:21:39.535
<v Speaker 1>Yeah. Sure.

01:21:41.455 --> 01:21:43.775
<v Speaker 1>Is there an example of Helm Hooks?

01:21:45.215 --> 01:21:46.495
<v Speaker 1>Yeah. I'm I'm not sure if I'm able

01:21:46.495 --> 01:21:47.695
<v Speaker 1>to find that. I'm not sure if the

01:21:47.695 --> 01:21:49.535
<v Speaker 0>Hooks work with Helm template. So I'm assuming

01:21:49.535 --> 01:21:51.135
<v Speaker 0>maybe we lose access to them.

01:21:51.940 --> 01:21:54.500
<v Speaker 1>No. No. It's so Helm template just

01:21:54.900 --> 01:21:55.619
<v Speaker 1>just

01:21:56.020 --> 01:21:58.660
<v Speaker 1>writes out the same YAMLs. It doesn't care

01:21:58.660 --> 01:22:00.580
<v Speaker 1>about its if it's a hook or not.

01:22:00.820 --> 01:22:03.380
<v Speaker 1>Kluctl knows about Helm hooks, and it knows

01:22:03.380 --> 01:22:05.060
<v Speaker 1>how to handle them. It knows

01:22:06.054 --> 01:22:07.974
<v Speaker 1>when to deploy them, when to delete them,

01:22:07.974 --> 01:22:09.574
<v Speaker 1>it knows when to wait for them. It

01:22:09.574 --> 01:22:12.454
<v Speaker 1>kind of replicates the behavior that Helm does.

01:22:12.614 --> 01:22:15.175
<v Speaker 1>At the same time, it allows you to

01:22:17.094 --> 01:22:18.695
<v Speaker 1>have own hooks,

01:22:19.094 --> 01:22:20.534
<v Speaker 1>so you don't have to write Helm chart

01:22:20.534 --> 01:22:21.335
<v Speaker 1>just to have hooks.

01:22:22.090 --> 01:22:23.290
<v Speaker 1>If you need

01:22:23.450 --> 01:22:25.370
<v Speaker 1>to do something

01:22:25.610 --> 01:22:27.930
<v Speaker 1>I'm not able to come up with something

01:22:27.930 --> 01:22:29.450
<v Speaker 1>on the fly right now. No. That's okay.

01:22:29.450 --> 01:22:30.410
<v Speaker 1>You would just add

01:22:31.050 --> 01:22:32.250
<v Speaker 1>annotations.

01:22:32.570 --> 01:22:34.410
<v Speaker 1>Kluctl.io.

01:22:37.025 --> 01:22:37.745
<v Speaker 1>Hook.

01:22:45.265 --> 01:22:45.905
<v Speaker 1>So it's

01:22:47.185 --> 01:22:49.425
<v Speaker 1>so you have Kluctl specific hooks,

01:22:49.880 --> 01:22:52.199
<v Speaker 1>which are mostly like what you know from

01:22:52.199 --> 01:22:52.919
<v Speaker 1>Helm.

01:22:53.079 --> 01:22:54.599
<v Speaker 1>They are just named a little bit different

01:22:54.599 --> 01:22:55.559
<v Speaker 1>because in

01:22:56.280 --> 01:22:57.800
<v Speaker 1>in Kluctl,

01:22:57.800 --> 01:23:00.280
<v Speaker 1>we don't do installs. We do deploys. So

01:23:00.280 --> 01:23:01.000
<v Speaker 1>it's

01:23:01.835 --> 01:23:03.434
<v Speaker 1>all called a little bit differently.

01:23:03.675 --> 01:23:06.315
<v Speaker 1>But if it encounters

01:23:06.315 --> 01:23:07.434
<v Speaker 1>a Helm

01:23:08.155 --> 01:23:08.874
<v Speaker 1>hook,

01:23:09.915 --> 01:23:12.395
<v Speaker 1>it would just work as if it has

01:23:12.395 --> 01:23:14.715
<v Speaker 1>had been from a from a Helm Okay.

01:23:14.715 --> 01:23:15.675
<v Speaker 1>Chart. Nice.

01:23:16.950 --> 01:23:18.070
<v Speaker 1>So that's it.

01:23:18.550 --> 01:23:21.349
<v Speaker 1>And there are other annotations that change how

01:23:21.830 --> 01:23:23.110
<v Speaker 1>stuff is handled.

01:23:23.989 --> 01:23:26.790
<v Speaker 1>Example, conflict resolution is very important. There are

01:23:26.790 --> 01:23:28.469
<v Speaker 1>cases, for example, the Elastic

01:23:29.775 --> 01:23:31.934
<v Speaker 1>operator, the Elastic Cloud operator,

01:23:32.015 --> 01:23:34.975
<v Speaker 1>tends to take over ownership

01:23:34.975 --> 01:23:37.375
<v Speaker 1>of fields that it shouldn't touch.

01:23:37.695 --> 01:23:39.695
<v Speaker 1>For example, the node specs. And in the

01:23:39.695 --> 01:23:40.255
<v Speaker 1>end,

01:23:41.455 --> 01:23:42.175
<v Speaker 1>the

01:23:42.415 --> 01:23:43.614
<v Speaker 1>managed fields

01:23:43.840 --> 01:23:46.720
<v Speaker 1>tell you that you lost ownership of that.

01:23:47.040 --> 01:23:49.200
<v Speaker 1>And you can tell Kluctl to

01:23:50.160 --> 01:23:51.600
<v Speaker 1>kind of force apply

01:23:51.760 --> 01:23:53.040
<v Speaker 1>whenever that happens

01:23:53.440 --> 01:23:55.760
<v Speaker 1>and to take back ownership of something that

01:23:55.760 --> 01:23:57.680
<v Speaker 1>you know is yours and no one else

01:23:57.680 --> 01:23:58.240
<v Speaker 1>should touch it.

01:23:59.255 --> 01:24:01.655
<v Speaker 1>So you have stuff like Kluctlestar.io,

01:24:02.135 --> 01:24:04.615
<v Speaker 1>force, apply, and set it to true. Must

01:24:04.615 --> 01:24:06.215
<v Speaker 1>be string because it's an invitation.

01:24:06.935 --> 01:24:08.935
<v Speaker 1>And so there are many other things that

01:24:08.935 --> 01:24:10.135
<v Speaker 1>you can use to

01:24:11.989 --> 01:24:14.550
<v Speaker 1>control the behavior of your deployments.

01:24:14.710 --> 01:24:17.030
<v Speaker 1>You can even do stuff like Clue CDL

01:24:17.030 --> 01:24:18.710
<v Speaker 1>.I o delete

01:24:19.110 --> 01:24:19.670
<v Speaker 1>true.

01:24:19.910 --> 01:24:21.190
<v Speaker 1>It's funny because

01:24:21.270 --> 01:24:23.430
<v Speaker 1>you are deploying something, but you're actually deleting

01:24:23.430 --> 01:24:25.264
<v Speaker 1>something. So what it will do is it

01:24:25.264 --> 01:24:27.264
<v Speaker 1>will ignore everything. So it will ignore the

01:24:27.264 --> 01:24:28.144
<v Speaker 1>complete spec.

01:24:28.625 --> 01:24:31.185
<v Speaker 1>And whenever it encounters delete true, just delete

01:24:31.185 --> 01:24:31.985
<v Speaker 1>that object.

01:24:32.784 --> 01:24:33.664
<v Speaker 1>This is

01:24:34.145 --> 01:24:35.585
<v Speaker 1>sounds funny because

01:24:36.300 --> 01:24:38.860
<v Speaker 1>it's maybe hard to understand why that is

01:24:38.940 --> 01:24:39.659
<v Speaker 1>needed.

01:24:39.820 --> 01:24:42.300
<v Speaker 1>One example is if you deploy to a

01:24:42.300 --> 01:24:43.739
<v Speaker 1>fresh Kubernetes

01:24:43.980 --> 01:24:46.300
<v Speaker 1>EKS cluster from AWS,

01:24:46.860 --> 01:24:48.940
<v Speaker 1>you have a daemon set running there that

01:24:48.940 --> 01:24:51.100
<v Speaker 1>provides the AWS

01:24:51.100 --> 01:24:52.620
<v Speaker 1>any

01:24:52.065 --> 01:24:53.025
<v Speaker 1>CNI.

01:24:53.265 --> 01:24:57.025
<v Speaker 1>So the low level CNI that's HWS specific.

01:24:57.105 --> 01:24:58.865
<v Speaker 1>If you want to use Selium, you don't

01:24:58.865 --> 01:25:00.385
<v Speaker 1>want to have that daemon set running there.

01:25:00.385 --> 01:25:03.505
<v Speaker 1>It must be deleted, actually. And to avoid

01:25:03.505 --> 01:25:04.465
<v Speaker 1>having

01:25:06.170 --> 01:25:07.369
<v Speaker 1>manual steps

01:25:08.090 --> 01:25:10.730
<v Speaker 1>to deploy Selium, you can instead have a

01:25:10.730 --> 01:25:13.369
<v Speaker 1>dummy daemon set that has Kluctl delete set

01:25:13.369 --> 01:25:15.050
<v Speaker 1>to true, and then that object is going

01:25:15.050 --> 01:25:16.249
<v Speaker 1>to be deleted.

01:25:17.050 --> 01:25:18.570
<v Speaker 1>You can also do that as part of

01:25:18.570 --> 01:25:20.730
<v Speaker 1>the deployment YAML. So you can

01:25:23.485 --> 01:25:26.205
<v Speaker 1>and then it's forgot how to so you

01:25:26.205 --> 01:25:27.485
<v Speaker 1>specify

01:25:28.765 --> 01:25:31.645
<v Speaker 1>how to identify it and name, so it's

01:25:31.645 --> 01:25:33.405
<v Speaker 1>name, and so on. And so it knows

01:25:33.405 --> 01:25:34.925
<v Speaker 1>that at that point, it should just delete

01:25:34.925 --> 01:25:35.405
<v Speaker 1>that object.

01:25:36.380 --> 01:25:37.179
<v Speaker 0>Nice.

01:25:38.220 --> 01:25:38.860
<v Speaker 1>Okay.

01:25:40.300 --> 01:25:42.380
<v Speaker 1>Alright. We have five minutes left. That's our

01:25:42.380 --> 01:25:44.060
<v Speaker 0>Yeah. Issue you wanna cover, or should we

01:25:44.060 --> 01:25:45.820
<v Speaker 0>jump back to back face mode and just

01:25:45.820 --> 01:25:47.100
<v Speaker 0>chat for a few minute?

01:25:47.660 --> 01:25:50.140
<v Speaker 1>It depends. If you have any ideas, any

01:25:50.140 --> 01:25:52.745
<v Speaker 1>questions where you think it should be shown,

01:25:53.545 --> 01:25:54.105
<v Speaker 1>just

01:25:55.705 --> 01:25:57.625
<v Speaker 1>say it. If not, we can just go

01:25:57.625 --> 01:25:59.305
<v Speaker 1>to the face to face mode again.

01:25:59.465 --> 01:26:01.945
<v Speaker 0>Yeah. Let's jump back. Because we have you've

01:26:01.865 --> 01:26:04.219
<v Speaker 0>you you've covered a lot there.

01:26:05.020 --> 01:26:06.620
<v Speaker 1>I can cover a lot more if you

01:26:06.620 --> 01:26:07.179
<v Speaker 1>want.

01:26:08.219 --> 01:26:09.019
<v Speaker 1>It's

01:26:09.660 --> 01:26:10.940
<v Speaker 1>when deploying

01:26:10.940 --> 01:26:12.940
<v Speaker 1>to Kubernetes is a complex topic.

01:26:13.580 --> 01:26:15.739
<v Speaker 1>That's a fact. It is. What I what

01:26:15.739 --> 01:26:17.340
<v Speaker 0>I loved is every time I saw, oh,

01:26:17.340 --> 01:26:18.864
<v Speaker 0>how would I handle this use case or

01:26:18.864 --> 01:26:20.385
<v Speaker 0>how would I handle this? It's like there

01:26:20.385 --> 01:26:22.304
<v Speaker 0>was there was a way

01:26:22.545 --> 01:26:25.264
<v Speaker 0>to modify and change that behavior. Even down

01:26:25.264 --> 01:26:27.584
<v Speaker 0>to that last example there where we have

01:26:27.744 --> 01:26:29.505
<v Speaker 0>either the ability to apply

01:26:29.824 --> 01:26:33.219
<v Speaker 0>dummy resource with the the delete annotation, but

01:26:33.219 --> 01:26:34.980
<v Speaker 0>even in the deployment spec just to have

01:26:34.980 --> 01:26:37.540
<v Speaker 0>to delete objects Yeah. As well. So, like,

01:26:37.540 --> 01:26:38.260
<v Speaker 0>there's

01:26:39.060 --> 01:26:39.619
<v Speaker 0>yeah.

01:26:40.260 --> 01:26:42.659
<v Speaker 0>I'm pretty sure this could probably handle any

01:26:42.739 --> 01:26:45.060
<v Speaker 0>complex deployment that I was gonna throw at

01:26:45.060 --> 01:26:46.534
<v Speaker 0>it, which is quite exciting. So

01:26:47.255 --> 01:26:49.494
<v Speaker 1>Yeah. We have very complex deployments,

01:26:49.895 --> 01:26:51.574
<v Speaker 1>and we actually deploy

01:26:51.574 --> 01:26:53.574
<v Speaker 1>everything with it right now. One question in

01:26:53.574 --> 01:26:55.655
<v Speaker 1>between. Am I still sharing, or are we

01:26:55.655 --> 01:26:57.655
<v Speaker 1>in face to face mode? Still face mode.

01:26:58.135 --> 01:26:59.494
<v Speaker 1>K. Then let me open.

01:27:02.240 --> 01:27:03.200
<v Speaker 1>Where is it?

01:27:04.400 --> 01:27:05.760
<v Speaker 1>So that I can see you as well.

01:27:05.760 --> 01:27:07.040
<v Speaker 1>So no. Okay. I can see you as

01:27:07.040 --> 01:27:08.640
<v Speaker 1>well. Great. So

01:27:10.400 --> 01:27:12.240
<v Speaker 1>what was the question? Sorry.

01:27:13.025 --> 01:27:14.705
<v Speaker 0>I there there wasn't a question. I was

01:27:14.705 --> 01:27:16.625
<v Speaker 0>just really happy that, you know, I was

01:27:16.785 --> 01:27:18.385
<v Speaker 0>in my head as we were walking through,

01:27:18.385 --> 01:27:19.905
<v Speaker 0>you know, I wonder how I'd handle this

01:27:19.905 --> 01:27:21.745
<v Speaker 0>situation. You know, the EKS one is a

01:27:21.745 --> 01:27:23.665
<v Speaker 0>big one. Like, EKS ships with a bunch

01:27:23.665 --> 01:27:26.280
<v Speaker 0>of default resources by default. You either need

01:27:26.280 --> 01:27:28.520
<v Speaker 0>to modify or delete or replace and the

01:27:28.520 --> 01:27:29.880
<v Speaker 0>hooks are there to do that.

01:27:30.280 --> 01:27:32.040
<v Speaker 0>If you're working with Helm charts, you've got

01:27:32.040 --> 01:27:34.599
<v Speaker 0>the ability to template the YAML. The values

01:27:34.599 --> 01:27:36.679
<v Speaker 0>failed, but not even just that. It supports

01:27:36.679 --> 01:27:38.119
<v Speaker 0>all the hooks. And then,

01:27:38.440 --> 01:27:40.119
<v Speaker 0>Kluctl has its own hooks. So if I

01:27:40.119 --> 01:27:42.225
<v Speaker 0>need to do more things, then I have

01:27:42.225 --> 01:27:45.344
<v Speaker 0>access to that. Like, it's a really powerful

01:27:45.344 --> 01:27:46.065
<v Speaker 0>tool

01:27:46.304 --> 01:27:48.145
<v Speaker 0>and something I think I'm definitely gonna have

01:27:48.145 --> 01:27:50.385
<v Speaker 0>to experiment with. And, you know, I always

01:27:50.385 --> 01:27:52.385
<v Speaker 0>say my production, but it's like my production,

01:27:52.385 --> 01:27:53.745
<v Speaker 0>you know, it's my cluster that I do

01:27:53.745 --> 01:27:55.824
<v Speaker 0>on my YouTube automation on, you know, my

01:27:55.824 --> 01:27:57.185
<v Speaker 0>website automation

01:27:57.070 --> 01:27:57.710
<v Speaker 0>So,

01:27:58.350 --> 01:28:00.590
<v Speaker 0>yeah, this is a really, really cool tool.

01:28:00.910 --> 01:28:02.750
<v Speaker 0>And I can see from all of those

01:28:02.750 --> 01:28:04.190
<v Speaker 0>features that you've added to you must have

01:28:04.190 --> 01:28:06.030
<v Speaker 0>been working on this for quite a long

01:28:06.030 --> 01:28:06.510
<v Speaker 0>time.

01:28:07.630 --> 01:28:10.190
<v Speaker 1>Yes. As I said, it had multiple incarnations,

01:28:10.590 --> 01:28:13.374
<v Speaker 1>so it was not immediately in that state.

01:28:14.415 --> 01:28:16.815
<v Speaker 1>For me, it's very important to reduce the

01:28:16.815 --> 01:28:17.934
<v Speaker 1>set of features

01:28:18.255 --> 01:28:21.534
<v Speaker 1>to a minimum and not have specific features.

01:28:22.015 --> 01:28:23.614
<v Speaker 1>Like, in the past, there was a lot

01:28:23.614 --> 01:28:25.614
<v Speaker 1>of stuff to handle environments correctly, and then

01:28:25.614 --> 01:28:27.770
<v Speaker 1>I realized I can't do all this with

01:28:27.770 --> 01:28:28.650
<v Speaker 1>templating.

01:28:29.290 --> 01:28:31.290
<v Speaker 1>So I removed a lot of features and

01:28:31.290 --> 01:28:34.090
<v Speaker 1>just stick to the to the base features.

01:28:34.410 --> 01:28:36.250
<v Speaker 1>I mean, it's still a lot, but

01:28:37.050 --> 01:28:37.610
<v Speaker 1>yeah.

01:28:38.250 --> 01:28:41.050
<v Speaker 1>Trying to I think I personally I don't

01:28:41.050 --> 01:28:41.850
<v Speaker 0>think I would use.

01:28:42.475 --> 01:28:44.395
<v Speaker 0>I only have one target, and I would

01:28:44.395 --> 01:28:46.875
<v Speaker 0>use that config map from cluster

01:28:46.955 --> 01:28:49.355
<v Speaker 0>to do all the environment enrichment.

01:28:49.355 --> 01:28:51.275
<v Speaker 0>That's that's the thing that I'm most excited

01:28:51.275 --> 01:28:53.195
<v Speaker 0>to experiment with as I start to play

01:28:53.195 --> 01:28:55.610
<v Speaker 0>with quick control. So You can you can

01:28:55.610 --> 01:28:57.610
<v Speaker 1>mix that. For example, you could decide to

01:28:57.610 --> 01:28:58.570
<v Speaker 1>use targets

01:28:58.650 --> 01:29:00.969
<v Speaker 1>just for to targeting a cluster

01:29:01.449 --> 01:29:03.770
<v Speaker 1>and then hand over to the config map

01:29:03.770 --> 01:29:05.770
<v Speaker 1>to get in the actual configuration. So you

01:29:05.770 --> 01:29:06.969
<v Speaker 1>have But if I use it as a

01:29:06.969 --> 01:29:09.050
<v Speaker 0>get up style environment, I don't really need

01:29:09.505 --> 01:29:10.865
<v Speaker 0>the target. Right?

01:29:11.825 --> 01:29:15.105
<v Speaker 1>Yeah. And long term so and the I'm

01:29:15.105 --> 01:29:16.625
<v Speaker 1>working on that right now. The next release

01:29:16.625 --> 01:29:19.345
<v Speaker 1>c two dot 16 will actually improve sets

01:29:19.345 --> 01:29:21.665
<v Speaker 1>that you can do targetless

01:29:21.825 --> 01:29:22.225
<v Speaker 1>deployments,

01:29:23.020 --> 01:29:25.500
<v Speaker 1>which will then kind of behave like Kube

01:29:25.500 --> 01:29:28.139
<v Speaker 1>Kuttle would do, deploy those current

01:29:28.619 --> 01:29:29.500
<v Speaker 1>context.

01:29:29.500 --> 01:29:29.979
<v Speaker 1>And

01:29:31.100 --> 01:29:32.940
<v Speaker 0>Yeah. Yeah. To me, that that that's a

01:29:32.940 --> 01:29:36.300
<v Speaker 0>really interesting paradigm because it removes more boilerplate.

01:29:36.300 --> 01:29:38.380
<v Speaker 0>It moves more logic into the cluster,

01:29:38.895 --> 01:29:40.414
<v Speaker 0>and it simplifies

01:29:40.414 --> 01:29:41.695
<v Speaker 0>the deployment

01:29:41.695 --> 01:29:44.175
<v Speaker 0>manifest from the developer point of view. It's

01:29:44.175 --> 01:29:46.175
<v Speaker 0>like the environment will decide how many replicas

01:29:46.175 --> 01:29:48.335
<v Speaker 0>or how the HP should function or what

01:29:48.335 --> 01:29:50.655
<v Speaker 0>the angers domain names are. The developers

01:29:50.735 --> 01:29:52.815
<v Speaker 0>really shouldn't have any control over that because

01:29:52.815 --> 01:29:54.335
<v Speaker 0>they're not the ones responsible

01:29:54.630 --> 01:29:56.949
<v Speaker 0>for providing the environment in which the application

01:29:56.949 --> 01:29:57.590
<v Speaker 0>run.

01:29:57.909 --> 01:29:58.869
<v Speaker 0>And I think

01:29:59.270 --> 01:30:00.949
<v Speaker 0>Kluctl I mean, I've tried to do this

01:30:00.949 --> 01:30:02.870
<v Speaker 0>with Pulumi and CDK, but what I'm seeing

01:30:02.870 --> 01:30:04.550
<v Speaker 0>from Kluctl gives me

01:30:05.030 --> 01:30:08.344
<v Speaker 0>a simpler declaration and that I'm just working

01:30:08.344 --> 01:30:10.824
<v Speaker 0>with YAML, customizing helm tools that are almost

01:30:10.824 --> 01:30:12.745
<v Speaker 0>ubiquitous to this point, but I'm able to

01:30:12.745 --> 01:30:14.744
<v Speaker 0>enrich them with the behavior that I need

01:30:14.745 --> 01:30:16.745
<v Speaker 0>with the templating. And I think that's really

01:30:16.745 --> 01:30:19.385
<v Speaker 0>interesting. So I'm definitely gonna be kicking the

01:30:19.385 --> 01:30:20.905
<v Speaker 0>tires on it, so please expect a lot

01:30:20.905 --> 01:30:22.505
<v Speaker 0>of issues on the GitHub with that. Please.

01:30:22.590 --> 01:30:24.670
<v Speaker 1>Please. I've fumbled my way through it, and

01:30:24.670 --> 01:30:26.270
<v Speaker 0>maybe I'll just have to reach out, but

01:30:26.270 --> 01:30:27.550
<v Speaker 0>I need some help. And maybe we need

01:30:27.550 --> 01:30:29.630
<v Speaker 0>a second stream to cover all the other

01:30:29.630 --> 01:30:31.869
<v Speaker 0>features that we haven't even covered today. So

01:30:32.429 --> 01:30:33.550
<v Speaker 1>Yep. I can do that.

01:30:33.949 --> 01:30:36.085
<v Speaker 1>The good thing is, I mean, it the

01:30:36.085 --> 01:30:38.005
<v Speaker 1>project I'm working on it still

01:30:38.165 --> 01:30:40.804
<v Speaker 1>since quite some time, but I'm

01:30:41.205 --> 01:30:43.125
<v Speaker 1>I've not been publicly active

01:30:43.285 --> 01:30:44.965
<v Speaker 1>in the beginning. So that's what I started

01:30:44.965 --> 01:30:46.885
<v Speaker 1>the last few weeks or months.

01:30:47.205 --> 01:30:50.040
<v Speaker 1>That means user base is still, let's say,

01:30:50.040 --> 01:30:50.599
<v Speaker 1>growing.

01:30:51.239 --> 01:30:52.919
<v Speaker 1>The advantage of that is

01:30:53.079 --> 01:30:56.679
<v Speaker 1>that if you have feature requests or whatever,

01:30:56.679 --> 01:30:58.679
<v Speaker 1>it's right now, it's still easy to get

01:30:58.679 --> 01:30:59.239
<v Speaker 1>me

01:30:59.480 --> 01:31:00.439
<v Speaker 1>and to

01:31:01.320 --> 01:31:04.245
<v Speaker 1>to get me actually helping you immediately.

01:31:04.805 --> 01:31:06.645
<v Speaker 0>Well, yeah, there people can go to the

01:31:06.645 --> 01:31:08.725
<v Speaker 0>GitHub page where you can file issues.

01:31:09.045 --> 01:31:11.685
<v Speaker 0>You are also in the Rawkode Academy Discord.

01:31:11.685 --> 01:31:13.605
<v Speaker 0>So if people want more real time communication,

01:31:13.605 --> 01:31:15.205
<v Speaker 0>I'm sure you'd be okay. I hope I'm

01:31:15.205 --> 01:31:17.045
<v Speaker 0>just gonna assume you don't mind people tagging

01:31:17.045 --> 01:31:18.820
<v Speaker 0>me. And maybe we'll even create a channel

01:31:18.820 --> 01:31:20.420
<v Speaker 0>for quick control there just so that people

01:31:20.420 --> 01:31:22.260
<v Speaker 0>do wanna chat and I'm really seeing fashion.

01:31:22.260 --> 01:31:23.220
<v Speaker 0>It is available.

01:31:23.460 --> 01:31:25.460
<v Speaker 0>But I've been really impressed with what I've

01:31:25.460 --> 01:31:26.900
<v Speaker 0>seen. So I'll say thank you for for

01:31:26.900 --> 01:31:28.180
<v Speaker 0>working on this. I think it's a really

01:31:28.180 --> 01:31:28.980
<v Speaker 0>interesting project.

01:31:30.015 --> 01:31:32.015
<v Speaker 0>I'd like I said, definitely gonna try and

01:31:32.015 --> 01:31:33.455
<v Speaker 0>kick the tires on this for my production

01:31:33.455 --> 01:31:35.855
<v Speaker 0>infrastructure, and maybe I'll even submit a pull

01:31:35.855 --> 01:31:36.815
<v Speaker 0>request. We'll see.

01:31:37.375 --> 01:31:39.055
<v Speaker 1>Happy to hear that, and thanks for having

01:31:39.055 --> 01:31:41.615
<v Speaker 1>me. Alright. Well, it's been a pleasure, Alexander.

01:31:41.615 --> 01:31:43.135
<v Speaker 0>Thank you again. Thank you to the people

01:31:43.135 --> 01:31:45.520
<v Speaker 0>watching at home or watching after the fact

01:31:45.520 --> 01:31:47.200
<v Speaker 0>via the power of YouTube.

01:31:47.920 --> 01:31:49.680
<v Speaker 0>We'll keep you updated on my adoption of

01:31:49.680 --> 01:31:51.520
<v Speaker 0>Kluctl, and we'll be back again in the

01:31:51.520 --> 01:31:53.520
<v Speaker 0>future. Thanks a lot, and I'll see you

01:31:53.520 --> 01:31:55.440
<v Speaker 0>again soon. Bye bye.
