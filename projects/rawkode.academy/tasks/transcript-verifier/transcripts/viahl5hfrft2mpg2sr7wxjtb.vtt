WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 405c575a-e146-40cd-8a87-019420e68ca5
Created: 2025-04-29T13:55:26.615Z
Duration: 487.33533
Channels: 1

00:00:00.160 --> 00:00:02.480
<v Speaker 0>Hello. And welcome back to the complete guide

00:00:02.480 --> 00:00:04.880
<v Speaker 0>to Spin. Today, we're taking a look at

00:00:04.880 --> 00:00:07.520
<v Speaker 0>a new feature of Spin, which is key

00:00:07.520 --> 00:00:08.320
<v Speaker 0>value

00:00:08.400 --> 00:00:10.800
<v Speaker 0>storage. This is an awesome new feature that

00:00:10.800 --> 00:00:13.920
<v Speaker 0>opens up the ability to save and retrieve

00:00:13.920 --> 00:00:16.305
<v Speaker 0>state with a very simple API

00:00:16.465 --> 00:00:18.145
<v Speaker 0>and our WebAssembly context.

00:00:18.225 --> 00:00:20.865
<v Speaker 0>One of the classic examples out there online

00:00:20.865 --> 00:00:24.545
<v Speaker 0>for WebAssembly is writing your own URL shortener.

00:00:24.625 --> 00:00:27.985
<v Speaker 0>Why? Well, because WebAssembly has very fast startup

00:00:27.985 --> 00:00:29.985
<v Speaker 0>times, typically in microseconds.

00:00:30.140 --> 00:00:32.380
<v Speaker 0>So for URL shortener, this makes a lot

00:00:32.380 --> 00:00:34.780
<v Speaker 0>of sense. As requests come in, we can

00:00:34.780 --> 00:00:38.780
<v Speaker 0>actually send that redirect response faster than traditional

00:00:38.780 --> 00:00:40.300
<v Speaker 0>serverless workflows.

00:00:40.379 --> 00:00:43.260
<v Speaker 0>But what if we want to offer dynamic

00:00:43.260 --> 00:00:46.105
<v Speaker 0>charted URLs? And by dynamic I mean not

00:00:46.105 --> 00:00:48.345
<v Speaker 0>hard coded and the code itself like most

00:00:48.345 --> 00:00:50.665
<v Speaker 0>of the examples online show including

00:00:50.825 --> 00:00:52.825
<v Speaker 0>the one in the Fermian documentation.

00:00:52.985 --> 00:00:54.505
<v Speaker 0>Well we can use the spin key value

00:00:54.505 --> 00:00:56.505
<v Speaker 0>store using HTTP

00:00:56.505 --> 00:00:57.385
<v Speaker 0>verbs

00:00:57.385 --> 00:01:00.140
<v Speaker 0>such as put to store your short URLs.

00:01:00.140 --> 00:01:02.700
<v Speaker 0>Use the get verb, find and redirect where

00:01:02.700 --> 00:01:05.180
<v Speaker 0>possible and even support delete for when we

00:01:05.180 --> 00:01:07.580
<v Speaker 0>want to remove URLs that no longer should

00:01:07.580 --> 00:01:08.380
<v Speaker 0>be shortened.

00:01:08.460 --> 00:01:11.659
<v Speaker 0>This allows us to provide an HTTP API

00:01:11.660 --> 00:01:15.100
<v Speaker 0>to add, remove and fetch our URLs

00:01:15.435 --> 00:01:17.595
<v Speaker 0>which is pretty neat. Well, let's take a

00:01:17.595 --> 00:01:19.354
<v Speaker 0>look using Fermion

00:01:19.354 --> 00:01:22.795
<v Speaker 0>one point o, which launched just last week.

00:01:22.955 --> 00:01:24.395
<v Speaker 0>Let's have some fun. Okay.

00:01:24.635 --> 00:01:25.515
<v Speaker 0>What do we have?

00:01:26.075 --> 00:01:28.235
<v Speaker 0>Well, we're in another directory called spin dash

00:01:28.235 --> 00:01:30.229
<v Speaker 0>k v. In this directory, we have a

00:01:30.229 --> 00:01:32.470
<v Speaker 0>brand new spin project. Well, almost brand new.

00:01:32.470 --> 00:01:34.150
<v Speaker 0>I've written some code, which uses a rust

00:01:34.150 --> 00:01:36.470
<v Speaker 0>SDK. We can tell that because we have

00:01:36.470 --> 00:01:38.869
<v Speaker 0>a cargo dot toml. We also have a

00:01:38.869 --> 00:01:40.070
<v Speaker 0>spin.toml,

00:01:40.070 --> 00:01:42.710
<v Speaker 0>which we've seen a few of before. However,

00:01:42.790 --> 00:01:45.805
<v Speaker 0>this one has one unique change. If we

00:01:45.805 --> 00:01:47.725
<v Speaker 0>scroll down to here, you'll see that under

00:01:47.725 --> 00:01:49.645
<v Speaker 0>the component configuration block,

00:01:50.045 --> 00:01:52.845
<v Speaker 0>we have key value stores. And we have

00:01:52.845 --> 00:01:55.725
<v Speaker 0>a list of the value default.

00:01:55.805 --> 00:01:57.990
<v Speaker 0>At the time of recording this video and

00:01:57.990 --> 00:02:00.550
<v Speaker 0>for spin one point o, the only value

00:02:00.550 --> 00:02:03.190
<v Speaker 0>we can use in this list is the

00:02:03.190 --> 00:02:06.310
<v Speaker 0>default key value store. However, in the future,

00:02:06.470 --> 00:02:07.350
<v Speaker 0>more options

00:02:07.670 --> 00:02:09.190
<v Speaker 0>may become available.

00:02:09.350 --> 00:02:11.924
<v Speaker 0>Stay tuned. So we have this default value

00:02:11.924 --> 00:02:14.004
<v Speaker 0>for now and we have our spend project.

00:02:14.004 --> 00:02:16.004
<v Speaker 0>Now you may be wondering, where do all

00:02:16.004 --> 00:02:18.565
<v Speaker 0>the key values live when we run spend

00:02:18.565 --> 00:02:20.805
<v Speaker 0>locally on our machine? And that is a

00:02:20.805 --> 00:02:23.460
<v Speaker 0>great question. Thank you for asking. Inside the

00:02:23.460 --> 00:02:26.020
<v Speaker 0>dot spin directory, you will find a dot

00:02:26.020 --> 00:02:27.220
<v Speaker 0>DB file.

00:02:27.300 --> 00:02:28.820
<v Speaker 0>This is a SQLite

00:02:28.820 --> 00:02:29.700
<v Speaker 0>database,

00:02:29.940 --> 00:02:32.340
<v Speaker 0>which is used by Spin to store all

00:02:32.340 --> 00:02:33.620
<v Speaker 0>of your configuration

00:02:33.700 --> 00:02:35.140
<v Speaker 0>or at least whatever you decide to store

00:02:35.140 --> 00:02:36.980
<v Speaker 0>in the key value store. So let's pop

00:02:36.980 --> 00:02:40.055
<v Speaker 0>open lib dot r s. And here, you'll

00:02:40.055 --> 00:02:42.614
<v Speaker 0>see that we pull in the key value

00:02:42.614 --> 00:02:43.415
<v Speaker 0>create,

00:02:43.894 --> 00:02:46.855
<v Speaker 0>which has a store and an error type.

00:02:46.855 --> 00:02:49.175
<v Speaker 0>These are not that important right now and

00:02:49.175 --> 00:02:51.230
<v Speaker 0>we will come back to them shortly. If

00:02:51.230 --> 00:02:54.110
<v Speaker 0>we scroll down the line 13, you'll see

00:02:54.110 --> 00:02:56.030
<v Speaker 0>that we ask the store

00:02:56.190 --> 00:02:59.550
<v Speaker 0>to give us the default key value store.

00:02:59.550 --> 00:03:01.630
<v Speaker 0>This does have the potential to fail and

00:03:01.630 --> 00:03:03.310
<v Speaker 0>if you want to capture the error and

00:03:03.310 --> 00:03:04.110
<v Speaker 0>match on it yourself,

00:03:04.705 --> 00:03:06.065
<v Speaker 0>well, feel free.

00:03:06.465 --> 00:03:08.465
<v Speaker 0>For today's example, we're just going to use

00:03:08.465 --> 00:03:10.305
<v Speaker 0>the question mark and let it work it

00:03:10.305 --> 00:03:11.265
<v Speaker 0>out itself.

00:03:11.345 --> 00:03:13.265
<v Speaker 0>And because our handler expects

00:03:13.265 --> 00:03:15.345
<v Speaker 0>a result, it's okay for it just to

00:03:15.345 --> 00:03:17.584
<v Speaker 0>throw and propagate the error to the runtime.

00:03:17.870 --> 00:03:20.670
<v Speaker 0>Next, we grab the short URL

00:03:20.829 --> 00:03:22.670
<v Speaker 0>from the request URI,

00:03:22.750 --> 00:03:25.390
<v Speaker 0>where the short URI is just the path

00:03:25.390 --> 00:03:28.030
<v Speaker 0>that being slash hello slash a b c

00:03:28.030 --> 00:03:30.590
<v Speaker 0>slash hello a b c, whatever.

00:03:30.750 --> 00:03:32.909
<v Speaker 0>Next, we do a match on the method.

00:03:33.715 --> 00:03:36.594
<v Speaker 0>Now we're going to rely on HTTP verbs

00:03:36.594 --> 00:03:38.754
<v Speaker 0>for this very simple API.

00:03:38.754 --> 00:03:40.754
<v Speaker 0>That being when we get a GET request

00:03:40.754 --> 00:03:42.915
<v Speaker 0>on a path, we're going to look up

00:03:42.915 --> 00:03:43.475
<v Speaker 0>that

00:03:43.875 --> 00:03:45.954
<v Speaker 0>path and the key value store

00:03:46.510 --> 00:03:48.590
<v Speaker 0>for a redirect URL.

00:03:48.830 --> 00:03:51.550
<v Speaker 0>If it doesn't exist, we'll return a http

00:03:51.550 --> 00:03:54.270
<v Speaker 0>not found slash four zero four. And if

00:03:54.270 --> 00:03:56.750
<v Speaker 0>it is, we're gonna return a temporary redirect,

00:03:56.750 --> 00:03:59.070
<v Speaker 0>a three zero seven with the URL.

00:03:59.635 --> 00:04:02.515
<v Speaker 0>We also accept two more HTTP verbs as

00:04:02.515 --> 00:04:04.435
<v Speaker 0>part of this API. If we get a

00:04:04.435 --> 00:04:05.715
<v Speaker 0>put request,

00:04:05.795 --> 00:04:07.075
<v Speaker 0>then we'll actually attempt

00:04:07.075 --> 00:04:10.515
<v Speaker 0>to store the body, the redirect URL,

00:04:10.595 --> 00:04:12.670
<v Speaker 0>and the key value store. I'm not doing

00:04:12.670 --> 00:04:15.069
<v Speaker 0>a lot of validation or verification of that

00:04:15.069 --> 00:04:15.710
<v Speaker 0>value,

00:04:15.870 --> 00:04:18.350
<v Speaker 0>but we do check that it doesn't exist

00:04:18.350 --> 00:04:20.669
<v Speaker 0>in the key value store first. If there's

00:04:20.669 --> 00:04:22.669
<v Speaker 0>already a value, we'd not allow it to

00:04:22.669 --> 00:04:23.550
<v Speaker 0>be replaced.

00:04:23.789 --> 00:04:26.669
<v Speaker 0>It must be explicitly deleted first and then

00:04:26.669 --> 00:04:27.310
<v Speaker 0>recreated.

00:04:27.664 --> 00:04:29.985
<v Speaker 0>So where the value already exists or where

00:04:29.985 --> 00:04:32.225
<v Speaker 0>the key already exists in the store, we

00:04:32.225 --> 00:04:34.465
<v Speaker 0>return an HTTP conflict,

00:04:34.465 --> 00:04:36.225
<v Speaker 0>a four zero nine. Lastly,

00:04:36.544 --> 00:04:39.824
<v Speaker 0>HTTP delete and because delete doesn't really do

00:04:39.824 --> 00:04:41.824
<v Speaker 0>anything different if the key exists or doesn't,

00:04:41.824 --> 00:04:44.180
<v Speaker 0>we're just gonna return an HTTP okay.

00:04:44.500 --> 00:04:46.820
<v Speaker 0>Again, if you want to handle a this

00:04:46.820 --> 00:04:48.740
<v Speaker 0>key doesn't exist when you delete,

00:04:48.980 --> 00:04:51.300
<v Speaker 0>feel free to match instead of propagating that

00:04:51.300 --> 00:04:53.220
<v Speaker 0>error up the stack. Lastly

00:04:53.540 --> 00:04:56.315
<v Speaker 0>or very lastly, finally lastly, if we get

00:04:56.315 --> 00:04:58.315
<v Speaker 0>an issue to be verb that isn't supported

00:04:58.315 --> 00:05:01.195
<v Speaker 0>by our API, we return method not allowed.

00:05:01.195 --> 00:05:03.915
<v Speaker 0>Once we've handled that, we have access to

00:05:03.915 --> 00:05:05.675
<v Speaker 0>a issue to be status that we wish

00:05:05.675 --> 00:05:07.355
<v Speaker 0>to return to the requester.

00:05:07.750 --> 00:05:10.230
<v Speaker 0>And if we have a temporary redirect, we

00:05:10.230 --> 00:05:12.949
<v Speaker 0>will provide the location header. Otherwise, we pass

00:05:12.949 --> 00:05:14.949
<v Speaker 0>the status back with a body of none.

00:05:14.949 --> 00:05:16.550
<v Speaker 0>Nice and simple API.

00:05:16.949 --> 00:05:19.910
<v Speaker 0>Let's see it in action. So let's run

00:05:19.910 --> 00:05:23.395
<v Speaker 0>a spin build and a spin up. Now

00:05:23.395 --> 00:05:25.715
<v Speaker 0>we can open another terminal where we can

00:05:25.715 --> 00:05:28.355
<v Speaker 0>run some HTTP requests against our API.

00:05:28.514 --> 00:05:30.354
<v Speaker 0>As you can see, our application runs on

00:05:30.354 --> 00:05:32.035
<v Speaker 0>local host port 3,000.

00:05:32.035 --> 00:05:35.074
<v Speaker 0>Now I'm not going to execute arbitrary curl

00:05:35.074 --> 00:05:37.170
<v Speaker 0>commands because honestly,

00:05:37.250 --> 00:05:39.490
<v Speaker 0>it's twenty twenty three. Instead, we're gonna use

00:05:39.490 --> 00:05:41.650
<v Speaker 0>HARL and I have a test dot HARL

00:05:41.650 --> 00:05:44.050
<v Speaker 0>file. If you're not familiar with HARL, go

00:05:44.050 --> 00:05:46.210
<v Speaker 0>to hARL dot dev and you'll find a

00:05:46.210 --> 00:05:48.849
<v Speaker 0>very cool text based description

00:05:48.945 --> 00:05:51.905
<v Speaker 0>HTTP testing framework. It also has really cool

00:05:51.905 --> 00:05:55.025
<v Speaker 0>support for building assertions against the response too

00:05:55.025 --> 00:05:58.065
<v Speaker 0>and whether that be string matches, regex, status

00:05:58.065 --> 00:05:59.585
<v Speaker 0>codes, JSON,

00:05:59.585 --> 00:06:01.905
<v Speaker 0>whatever. Where we see that we're sending a

00:06:01.905 --> 00:06:03.985
<v Speaker 0>delete request or at least we're using the

00:06:03.985 --> 00:06:06.680
<v Speaker 0>delete verb to local host 3,000

00:06:06.680 --> 00:06:08.280
<v Speaker 0>on the hello world path.

00:06:08.680 --> 00:06:10.280
<v Speaker 0>The hello world path is going to be

00:06:10.280 --> 00:06:11.480
<v Speaker 0>our short URL,

00:06:11.720 --> 00:06:13.080
<v Speaker 0>which could potentially

00:06:13.400 --> 00:06:16.200
<v Speaker 0>return a longer URL with a redirect. The

00:06:16.200 --> 00:06:17.960
<v Speaker 0>delete as we've seen in the code always

00:06:17.960 --> 00:06:20.525
<v Speaker 0>returns a 200, so we just assert by

00:06:20.525 --> 00:06:22.525
<v Speaker 0>saying we expect an HTTP

00:06:22.525 --> 00:06:23.405
<v Speaker 0>200.

00:06:23.405 --> 00:06:25.965
<v Speaker 0>We then run a GET request against the

00:06:25.965 --> 00:06:28.044
<v Speaker 0>same path where we expect a four zero

00:06:28.044 --> 00:06:31.164
<v Speaker 0>four because we just deleted any redirect that

00:06:31.164 --> 00:06:32.125
<v Speaker 0>may already exist.

00:06:32.620 --> 00:06:34.540
<v Speaker 0>Next, we use a put verb

00:06:34.700 --> 00:06:35.740
<v Speaker 0>to store

00:06:36.220 --> 00:06:39.580
<v Speaker 0>a URL. Here, I'm using rockwoodishere.com.

00:06:39.660 --> 00:06:41.100
<v Speaker 0>Not a real URL,

00:06:41.100 --> 00:06:43.340
<v Speaker 0>but will suffice for today. We expect an

00:06:43.340 --> 00:06:45.580
<v Speaker 0>HTTP two zero one and if we try

00:06:45.580 --> 00:06:47.955
<v Speaker 0>the same request again, we have the same

00:06:47.955 --> 00:06:49.955
<v Speaker 0>value or a different value, it doesn't matter

00:06:50.035 --> 00:06:52.435
<v Speaker 0>because the path already exists within the key

00:06:52.435 --> 00:06:53.395
<v Speaker 0>value store.

00:06:53.635 --> 00:06:55.235
<v Speaker 0>We get a conflict and a four zero

00:06:55.235 --> 00:06:57.155
<v Speaker 0>nine. So what we expect when we run

00:06:57.155 --> 00:06:59.730
<v Speaker 0>a GET on Hello World is for us

00:06:59.730 --> 00:07:02.450
<v Speaker 0>to get an HTTP temporary redirect, a three

00:07:02.450 --> 00:07:03.250
<v Speaker 0>zero seven,

00:07:03.730 --> 00:07:05.730
<v Speaker 0>where we could build an assertion that we

00:07:05.730 --> 00:07:08.690
<v Speaker 0>have a location header that equals the value

00:07:08.690 --> 00:07:11.170
<v Speaker 0>restored with the PIP. Now we can run

00:07:11.170 --> 00:07:12.050
<v Speaker 0>Hurl

00:07:12.050 --> 00:07:13.010
<v Speaker 0>test

00:07:13.010 --> 00:07:15.765
<v Speaker 0>and point it to our test Hurl file.

00:07:16.405 --> 00:07:18.405
<v Speaker 0>And we can see that five requests were

00:07:18.405 --> 00:07:20.805
<v Speaker 0>executed and we have some debug output here

00:07:20.805 --> 00:07:22.725
<v Speaker 0>that shows we got a delete, a GET,

00:07:22.725 --> 00:07:24.405
<v Speaker 0>a put, a put and a GET.

00:07:24.725 --> 00:07:25.845
<v Speaker 0>And we can see

00:07:26.165 --> 00:07:28.165
<v Speaker 0>that all of our assertions passed.

00:07:29.510 --> 00:07:31.510
<v Speaker 0>If you want more information,

00:07:31.990 --> 00:07:34.310
<v Speaker 0>you can add a dash b for verbosity,

00:07:34.390 --> 00:07:36.150
<v Speaker 0>which will actually show you all of the

00:07:36.150 --> 00:07:38.870
<v Speaker 0>response and we can see our location header

00:07:38.870 --> 00:07:41.910
<v Speaker 0>is here. So this extension

00:07:41.675 --> 00:07:44.475
<v Speaker 0>of the URL shortener available on the fermion

00:07:44.475 --> 00:07:46.235
<v Speaker 0>blog as an example of how to do

00:07:46.235 --> 00:07:48.075
<v Speaker 0>it with their SDK

00:07:48.315 --> 00:07:50.475
<v Speaker 0>can now be enriched. It can now enable

00:07:50.475 --> 00:07:51.275
<v Speaker 0>dynamic

00:07:51.275 --> 00:07:53.355
<v Speaker 0>API driven URLs

00:07:53.580 --> 00:07:55.900
<v Speaker 0>that's stored in a key value store. So

00:07:55.900 --> 00:07:58.220
<v Speaker 0>go check it out. It's very cool, simple

00:07:58.220 --> 00:08:00.300
<v Speaker 0>interface that you can use in just one

00:08:00.300 --> 00:08:02.379
<v Speaker 0>or two lines of code. Enjoy.
