WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 285c2521-a74e-4ff3-afbd-5c6e68f38cc0
Created: 2025-04-29T23:06:43.997Z
Duration: 1228.3538
Channels: 1

00:00:02.399 --> 00:00:03.759
<v Speaker 0>Alrighty then.

00:00:03.919 --> 00:00:05.440
<v Speaker 0>Let's see what happens.

00:00:06.960 --> 00:00:08.719
<v Speaker 0>So for this stream today,

00:00:09.760 --> 00:00:12.240
<v Speaker 0>what I wanna try and show off is

00:00:12.240 --> 00:00:13.040
<v Speaker 0>Telegraf's

00:00:13.040 --> 00:00:13.840
<v Speaker 0>metric buffer.

00:00:14.985 --> 00:00:16.505
<v Speaker 0>So let's start with a little bit of

00:00:16.505 --> 00:00:18.744
<v Speaker 0>background, I guess. Telegraf

00:00:18.744 --> 00:00:19.785
<v Speaker 0>is a

00:00:20.825 --> 00:00:22.185
<v Speaker 0>metrics collector

00:00:22.904 --> 00:00:25.544
<v Speaker 0>that works with pretty much any time series

00:00:25.544 --> 00:00:26.904
<v Speaker 0>databases and

00:00:26.904 --> 00:00:28.825
<v Speaker 0>a few other non time series databases.

00:00:29.470 --> 00:00:31.869
<v Speaker 0>So it has the ability through plugins

00:00:32.030 --> 00:00:34.350
<v Speaker 0>to go and collect some sort of metrics,

00:00:35.150 --> 00:00:38.110
<v Speaker 0>perform aggregations or filtering on those metrics, and

00:00:38.110 --> 00:00:40.110
<v Speaker 0>then output them somewhere.

00:00:41.230 --> 00:00:45.629
<v Speaker 0>So let's start off then with a really

00:00:44.055 --> 00:00:46.215
<v Speaker 0>simple Telegraf configuration,

00:00:46.375 --> 00:00:48.935
<v Speaker 0>collecting some really simple metrics, and just writing

00:00:48.935 --> 00:00:50.295
<v Speaker 0>them to our console.

00:00:50.535 --> 00:00:52.855
<v Speaker 0>It's probably the easiest way to get started.

00:00:53.255 --> 00:00:53.655
<v Speaker 0>So

00:00:54.775 --> 00:00:57.079
<v Speaker 0>first, we need to generate a Telegraf configuration

00:00:57.079 --> 00:00:57.879
<v Speaker 0>file.

00:00:59.480 --> 00:01:01.719
<v Speaker 0>We can do that through a Telegraf config,

00:01:02.440 --> 00:01:04.040
<v Speaker 0>and I put that to a file.

00:01:07.000 --> 00:01:09.479
<v Speaker 0>Now we're gonna strip this right back to

00:01:09.479 --> 00:01:09.960
<v Speaker 0>the

00:01:10.335 --> 00:01:11.134
<v Speaker 0>complete

00:01:11.534 --> 00:01:12.814
<v Speaker 0>bare essentials.

00:01:13.615 --> 00:01:15.215
<v Speaker 0>So we're not even gonna have any global

00:01:15.215 --> 00:01:15.935
<v Speaker 0>tags.

00:01:16.575 --> 00:01:18.015
<v Speaker 0>We're gonna keep a few of the agent

00:01:18.015 --> 00:01:19.534
<v Speaker 0>configuration settings.

00:01:19.695 --> 00:01:21.935
<v Speaker 0>So right now, we're gonna have a collection

00:01:21.935 --> 00:01:24.000
<v Speaker 0>interval of ten seconds. That means for all

00:01:24.000 --> 00:01:26.240
<v Speaker 0>of the plug ins that I have configured,

00:01:26.800 --> 00:01:29.040
<v Speaker 0>reach out every ten seconds and grab the

00:01:29.040 --> 00:01:29.920
<v Speaker 0>new metric.

00:01:30.720 --> 00:01:32.880
<v Speaker 0>The round interval just means that it keeps

00:01:32.880 --> 00:01:34.480
<v Speaker 0>your numbers, like,

00:01:35.520 --> 00:01:37.840
<v Speaker 0>zero seconds past the minute, ten seconds past

00:01:37.840 --> 00:01:40.075
<v Speaker 0>the minute, twenty seconds past the minute, regardless

00:01:40.075 --> 00:01:41.755
<v Speaker 0>of when you start Telegraf.

00:01:42.075 --> 00:01:44.555
<v Speaker 0>There are reasons for doing that, mostly around

00:01:44.555 --> 00:01:47.034
<v Speaker 0>grouping and windowing when you query the data.

00:01:47.354 --> 00:01:49.115
<v Speaker 0>For now, we don't really care about that.

00:01:50.075 --> 00:01:51.835
<v Speaker 0>Now we are gonna play with the metric

00:01:51.835 --> 00:01:53.820
<v Speaker 0>buffer and batch size,

00:01:54.140 --> 00:01:55.979
<v Speaker 0>but first, we just wanna get Telegraf running,

00:01:55.979 --> 00:01:57.740
<v Speaker 0>so we're gonna keep them commented out.

00:01:58.140 --> 00:01:59.979
<v Speaker 0>And then I'm gonna jump down

00:02:01.820 --> 00:02:02.860
<v Speaker 0>to here.

00:02:03.340 --> 00:02:04.940
<v Speaker 0>And just because we're gonna get a feel

00:02:04.940 --> 00:02:07.675
<v Speaker 0>for Telegraf, I'm gonna leave debug setting

00:02:08.315 --> 00:02:09.355
<v Speaker 0>untrue.

00:02:12.395 --> 00:02:14.475
<v Speaker 0>Next, I'm gonna emit the host name

00:02:16.155 --> 00:02:18.155
<v Speaker 0>just because it's not important for the purposes

00:02:18.155 --> 00:02:19.915
<v Speaker 0>of this, but that's what allow you say

00:02:19.915 --> 00:02:22.560
<v Speaker 0>you're running Telegraf on every machine in your

00:02:22.560 --> 00:02:23.440
<v Speaker 0>infrastructure,

00:02:23.440 --> 00:02:25.360
<v Speaker 0>then a tag value would be added to

00:02:25.360 --> 00:02:27.520
<v Speaker 0>every metric with the host name the metric

00:02:27.520 --> 00:02:28.720
<v Speaker 0>was collected from.

00:02:29.520 --> 00:02:31.680
<v Speaker 0>A, this scenario is a single machine, and

00:02:31.680 --> 00:02:33.280
<v Speaker 0>b, I'll probably run out of a Docker

00:02:33.280 --> 00:02:35.120
<v Speaker 0>container, so the hosting isn't gonna give me

00:02:35.120 --> 00:02:36.160
<v Speaker 0>any value anyway.

00:02:37.845 --> 00:02:39.845
<v Speaker 0>Now I'm going to delete

00:02:39.845 --> 00:02:41.525
<v Speaker 0>everything else in this file.

00:02:43.285 --> 00:02:44.565
<v Speaker 0>It's quite large

00:02:45.925 --> 00:02:48.565
<v Speaker 0>because we have over 200

00:02:48.565 --> 00:02:50.165
<v Speaker 0>plug ins at the moment. So there are,

00:02:50.165 --> 00:02:52.840
<v Speaker 0>like, a 70 input plugins. There are 70

00:02:52.840 --> 00:02:54.040
<v Speaker 0>output plugins

00:02:54.040 --> 00:02:56.760
<v Speaker 0>plus all the processors, aggregators, etcetera.

00:02:56.840 --> 00:02:58.519
<v Speaker 0>So that's why there are everything in the

00:02:58.519 --> 00:03:00.360
<v Speaker 0>file that we generate is an example of

00:03:00.360 --> 00:03:03.000
<v Speaker 0>every plugin. So we're gonna start without that.

00:03:04.040 --> 00:03:05.965
<v Speaker 0>Now we need to collect some input first

00:03:05.965 --> 00:03:08.445
<v Speaker 0>before we can output it anywhere. So for

00:03:08.445 --> 00:03:10.525
<v Speaker 0>this, I'm gonna use the main plugin.

00:03:11.165 --> 00:03:12.685
<v Speaker 0>So I just pulled up the docs for

00:03:12.685 --> 00:03:14.685
<v Speaker 0>this for the GitHub repository.

00:03:15.245 --> 00:03:16.045
<v Speaker 0>Telegraf,

00:03:16.045 --> 00:03:17.720
<v Speaker 0>you go into the plugins directory.

00:03:17.720 --> 00:03:19.240
<v Speaker 0>We're gonna look at the inputs, and then

00:03:19.240 --> 00:03:20.360
<v Speaker 0>I've got the main.

00:03:21.400 --> 00:03:23.480
<v Speaker 0>The reason I'm using the the reason I'm

00:03:23.480 --> 00:03:25.720
<v Speaker 0>using this plugin is that there's no configuration.

00:03:25.800 --> 00:03:27.480
<v Speaker 0>We just enable it, and it does

00:03:28.040 --> 00:03:30.040
<v Speaker 0>it gives us some information about the memory

00:03:30.040 --> 00:03:33.720
<v Speaker 0>usage on our machine, and the output form

00:03:32.415 --> 00:03:34.814
<v Speaker 0>is relatively trivial as well. Let's see. Single

00:03:34.814 --> 00:03:36.655
<v Speaker 0>measurement with a bunch of fields.

00:03:39.135 --> 00:03:40.575
<v Speaker 0>Now we wanna be able to output that

00:03:40.575 --> 00:03:41.375
<v Speaker 0>somewhere.

00:03:41.614 --> 00:03:42.255
<v Speaker 0>So

00:03:43.935 --> 00:03:45.694
<v Speaker 0>I'm gonna output this to file,

00:03:47.670 --> 00:03:49.670
<v Speaker 0>and we're just gonna use standard out,

00:03:49.830 --> 00:03:51.350
<v Speaker 0>and we're gonna save this.

00:03:52.150 --> 00:03:53.430
<v Speaker 0>So in theory,

00:03:55.270 --> 00:03:57.270
<v Speaker 0>I run Telegraf config,

00:03:58.150 --> 00:03:59.510
<v Speaker 0>Telegraf.conf.

00:03:59.830 --> 00:04:01.894
<v Speaker 0>Every ten seconds, it should reach out, find

00:04:01.894 --> 00:04:03.495
<v Speaker 0>out what the memory consumption is on my

00:04:03.495 --> 00:04:05.894
<v Speaker 0>machine, and then output output that to standard

00:04:05.894 --> 00:04:06.455
<v Speaker 0>out.

00:04:07.254 --> 00:04:08.614
<v Speaker 0>And, of course, we have to wait ten

00:04:08.614 --> 00:04:11.015
<v Speaker 0>seconds, so, you know, start the awkward silence.

00:04:13.200 --> 00:04:16.959
<v Speaker 0>No.

00:04:22.400 --> 00:04:23.120
<v Speaker 0>So

00:04:23.919 --> 00:04:26.480
<v Speaker 0>we'll just quit that. Now what's important about

00:04:26.480 --> 00:04:26.800
<v Speaker 0>this?

00:04:29.165 --> 00:04:30.045
<v Speaker 0>So

00:04:30.045 --> 00:04:31.565
<v Speaker 0>for the uninitiated,

00:04:31.645 --> 00:04:33.885
<v Speaker 0>this is line protocol.

00:04:34.605 --> 00:04:36.525
<v Speaker 0>So at the start, we have the measurement

00:04:36.525 --> 00:04:37.245
<v Speaker 0>name,

00:04:37.565 --> 00:04:38.445
<v Speaker 0>which is MEM,

00:04:40.920 --> 00:04:43.560
<v Speaker 0>and then we have all of our values.

00:04:44.200 --> 00:04:45.800
<v Speaker 0>There could be tags here,

00:04:46.760 --> 00:04:48.120
<v Speaker 0>but it just appears that we don't have

00:04:48.120 --> 00:04:49.640
<v Speaker 0>any. That's okay.

00:04:49.960 --> 00:04:52.120
<v Speaker 0>But we have a lot of information about

00:04:52.625 --> 00:04:54.705
<v Speaker 0>the data we're collecting on the memory. And

00:04:54.705 --> 00:04:56.705
<v Speaker 0>then at the end, we have a nanosecond

00:04:56.705 --> 00:04:58.785
<v Speaker 0>resolution time stamp for when this metric was

00:04:58.785 --> 00:04:59.425
<v Speaker 0>collected.

00:04:59.905 --> 00:05:01.185
<v Speaker 0>We can see here

00:05:01.585 --> 00:05:04.545
<v Speaker 0>that we have two metrics being written very,

00:05:04.545 --> 00:05:07.185
<v Speaker 0>very quickly and eighty six microseconds,

00:05:07.789 --> 00:05:10.350
<v Speaker 0>and our buffer was flushed, and then I

00:05:10.350 --> 00:05:11.310
<v Speaker 0>killed it.

00:05:13.150 --> 00:05:14.190
<v Speaker 0>Nice and simple.

00:05:15.870 --> 00:05:17.389
<v Speaker 0>So now we

00:05:17.710 --> 00:05:19.470
<v Speaker 0>wanna be able to

00:05:20.030 --> 00:05:21.295
<v Speaker 0>store them somewhere.

00:05:22.655 --> 00:05:24.975
<v Speaker 0>And to do that, I'm going to just

00:05:24.975 --> 00:05:26.895
<v Speaker 0>bring on some Docker containers.

00:05:31.135 --> 00:05:33.960
<v Speaker 0>I always use version 2.4

00:05:35.400 --> 00:05:38.120
<v Speaker 0>because I don't like version three. It's focused

00:05:38.120 --> 00:05:41.080
<v Speaker 0>on cloud deployments and Kubernetes and Docker Swarm,

00:05:41.080 --> 00:05:43.160
<v Speaker 0>and you lose out some cool functionality. I'll

00:05:43.160 --> 00:05:45.000
<v Speaker 0>have another rant about that another day.

00:05:45.895 --> 00:05:47.815
<v Speaker 0>But for the time being, I'm gonna jump

00:05:47.815 --> 00:05:49.735
<v Speaker 0>over to another repository,

00:05:50.695 --> 00:05:52.775
<v Speaker 0>which is my influx DB examples.

00:05:54.775 --> 00:05:56.855
<v Speaker 0>And I'm actually just gonna copy

00:05:59.335 --> 00:06:00.055
<v Speaker 0>the setup.

00:06:01.180 --> 00:06:03.500
<v Speaker 0>That was the worst example to pick.

00:06:04.380 --> 00:06:05.580
<v Speaker 0>Let's try

00:06:05.980 --> 00:06:07.580
<v Speaker 0>yeah. This won't get quite a lot of

00:06:07.580 --> 00:06:08.140
<v Speaker 0>it.

00:06:12.300 --> 00:06:15.340
<v Speaker 0>So I'm just going to run and flex

00:06:15.340 --> 00:06:16.060
<v Speaker 0>DB one.

00:06:22.955 --> 00:06:25.915
<v Speaker 0>And we will actually run Telegraf here too.

00:06:26.955 --> 00:06:29.190
<v Speaker 0>So we will copy this even though we

00:06:29.190 --> 00:06:30.389
<v Speaker 0>don't need most of it.

00:06:32.310 --> 00:06:34.069
<v Speaker 0>And we'll just call this Telegraf. We're just

00:06:34.069 --> 00:06:35.670
<v Speaker 0>gonna use the official image.

00:06:38.550 --> 00:06:40.550
<v Speaker 0>We don't need any ports, and the only

00:06:40.550 --> 00:06:41.830
<v Speaker 0>thing we need to mount on is our

00:06:41.830 --> 00:06:42.870
<v Speaker 0>Telegraf configuration,

00:06:44.155 --> 00:06:46.955
<v Speaker 0>which is just Telegraf.com.

00:06:48.315 --> 00:06:51.275
<v Speaker 0>So now we should have InfluxDB running within

00:06:51.275 --> 00:06:54.315
<v Speaker 0>this Docker Compose network under InfluxDB.

00:06:54.315 --> 00:06:57.035
<v Speaker 0>InfluxDB runs on port eight zero eight six,

00:06:57.435 --> 00:06:58.155
<v Speaker 0>so

00:06:58.560 --> 00:07:00.160
<v Speaker 0>we just have to configure

00:07:01.439 --> 00:07:03.919
<v Speaker 0>Telegraf to write to that. Now, again, we

00:07:03.919 --> 00:07:05.440
<v Speaker 0>already have this configured

00:07:06.319 --> 00:07:07.520
<v Speaker 0>here.

00:07:08.400 --> 00:07:09.919
<v Speaker 0>So I'm just gonna copy and paste this.

00:07:12.065 --> 00:07:13.585
<v Speaker 0>The reason I'm using influx to be one

00:07:13.585 --> 00:07:15.665
<v Speaker 0>is there's no authentication, and it just saves

00:07:15.665 --> 00:07:18.385
<v Speaker 0>me five minutes faffing around with that.

00:07:18.785 --> 00:07:20.865
<v Speaker 0>So we're gonna write to influx to be

00:07:20.865 --> 00:07:23.585
<v Speaker 0>on the service name on the port.

00:07:24.385 --> 00:07:25.985
<v Speaker 0>Now we also wanna be able to visualize

00:07:25.985 --> 00:07:27.949
<v Speaker 0>these metrics. I could do that that through

00:07:27.949 --> 00:07:30.030
<v Speaker 0>the influx CLI, but we want something a

00:07:30.030 --> 00:07:32.830
<v Speaker 0>bit nicer. So I'm also gonna copy in

00:07:32.910 --> 00:07:34.750
<v Speaker 0>our Chrome graph configuration,

00:07:34.830 --> 00:07:35.870
<v Speaker 0>which is our UI.

00:07:41.384 --> 00:07:42.745
<v Speaker 0>Back over here.

00:07:48.664 --> 00:07:49.544
<v Speaker 0>Chronograph,

00:07:49.544 --> 00:07:51.224
<v Speaker 0>point it to influx DB, and we can

00:07:51.224 --> 00:07:52.505
<v Speaker 0>acknowledge passer.

00:07:52.585 --> 00:07:54.345
<v Speaker 0>We are gonna expose this port so that

00:07:54.345 --> 00:07:56.185
<v Speaker 0>we can actually browse to it. And this

00:07:56.185 --> 00:07:57.600
<v Speaker 0>is just one of the reason I like

00:07:57.600 --> 00:08:00.639
<v Speaker 0>the two point x syntax for Docker Compose

00:08:00.639 --> 00:08:02.960
<v Speaker 0>is we can actually have conditional based objects.

00:08:04.400 --> 00:08:05.040
<v Speaker 0>So

00:08:06.240 --> 00:08:08.400
<v Speaker 0>let's spend all of that up. We'll do

00:08:08.400 --> 00:08:09.120
<v Speaker 0>it in the background.

00:08:17.085 --> 00:08:18.765
<v Speaker 0>Most of the images won't take too long

00:08:18.765 --> 00:08:19.245
<v Speaker 0>to pull.

00:08:38.260 --> 00:08:39.220
<v Speaker 0>Anytime

00:08:39.220 --> 00:08:40.100
<v Speaker 0>you like.

00:08:41.700 --> 00:08:43.185
<v Speaker 0>Make sure they're comfy.

00:08:44.945 --> 00:08:47.585
<v Speaker 0>Alright. Let's see. All three services are up

00:08:47.585 --> 00:08:48.305
<v Speaker 0>and running.

00:08:48.865 --> 00:08:51.425
<v Speaker 0>Telegraf should be still right to standard out,

00:08:51.425 --> 00:08:53.745
<v Speaker 0>so we can do docker compose logs dash

00:08:53.745 --> 00:08:54.385
<v Speaker 0>f.

00:08:54.625 --> 00:08:55.345
<v Speaker 0>Follow it.

00:08:56.750 --> 00:08:59.870
<v Speaker 0>Yep. Good. All working well. And if we

00:08:59.870 --> 00:09:00.990
<v Speaker 0>scroll up here,

00:09:02.910 --> 00:09:05.390
<v Speaker 0>we can also see that we have output.

00:09:08.585 --> 00:09:10.905
<v Speaker 0>Bus creation failed. You can ignore that generally.

00:09:10.905 --> 00:09:13.225
<v Speaker 0>It happens again later, and we have no

00:09:13.225 --> 00:09:15.705
<v Speaker 0>errors when flushing the right metrics. So InfluxDB

00:09:15.705 --> 00:09:17.865
<v Speaker 0>should be receiving them. So we're saving these

00:09:17.865 --> 00:09:20.025
<v Speaker 0>metrics as well as the standard out.

00:09:20.505 --> 00:09:22.585
<v Speaker 0>So what we'll do is we'll browse

00:09:25.500 --> 00:09:26.700
<v Speaker 0>to Chronograph

00:09:29.340 --> 00:09:31.340
<v Speaker 0>and click on explore.

00:09:32.700 --> 00:09:35.260
<v Speaker 0>We'll delete all that. We've got our memory

00:09:35.260 --> 00:09:36.380
<v Speaker 0>measurement here.

00:09:36.860 --> 00:09:37.820
<v Speaker 0>We'll do it like that.

00:09:42.394 --> 00:09:43.355
<v Speaker 0>Okay. Cool.

00:09:43.755 --> 00:09:45.355
<v Speaker 0>There are no tags, so I can't filter

00:09:45.355 --> 00:09:47.834
<v Speaker 0>any further, but let's take a look at

00:09:47.834 --> 00:09:49.035
<v Speaker 0>our available

00:09:49.915 --> 00:09:51.834
<v Speaker 0>let's do the percentage stuff. So

00:09:54.280 --> 00:09:54.840
<v Speaker 0>used

00:09:57.400 --> 00:09:59.080
<v Speaker 0>and now we can see that our used

00:09:59.080 --> 00:10:00.920
<v Speaker 0>percentage of memory is 30, and we have

00:10:00.920 --> 00:10:03.400
<v Speaker 0>63% available of memory. So we're now claim

00:10:03.560 --> 00:10:05.080
<v Speaker 0>collecting metrics.

00:10:07.240 --> 00:10:09.160
<v Speaker 0>Now in order for me to explain

00:10:09.400 --> 00:10:11.295
<v Speaker 0>the metric buffer stuff,

00:10:12.175 --> 00:10:14.334
<v Speaker 0>we're gonna have to get some internal metrics

00:10:14.334 --> 00:10:16.015
<v Speaker 0>as well. So we're gonna enable

00:10:17.855 --> 00:10:20.015
<v Speaker 0>the internal plug in for Telegraf,

00:10:20.975 --> 00:10:22.654
<v Speaker 0>and if we just pull up the documentation

00:10:22.654 --> 00:10:23.214
<v Speaker 0>for that,

00:10:26.040 --> 00:10:27.960
<v Speaker 0>you can see the internal plug in collects

00:10:27.960 --> 00:10:31.080
<v Speaker 0>metrics with Telegraf agent itself, yada yada yada.

00:10:31.080 --> 00:10:33.000
<v Speaker 0>And we're gonna collect the memory stats. Not

00:10:33.000 --> 00:10:33.720
<v Speaker 0>important,

00:10:33.800 --> 00:10:35.960
<v Speaker 0>but, you know, configure and Telegraf plug out

00:10:35.960 --> 00:10:37.160
<v Speaker 0>is relatively easy

00:10:37.880 --> 00:10:40.085
<v Speaker 0>just like that. So now we need to

00:10:40.085 --> 00:10:42.964
<v Speaker 0>restart our Telegraf instance, and what we should

00:10:42.964 --> 00:10:44.005
<v Speaker 0>see here

00:10:44.565 --> 00:10:46.565
<v Speaker 0>is a new

00:10:46.645 --> 00:10:47.605
<v Speaker 0>measurement.

00:10:48.725 --> 00:10:52.885
<v Speaker 0>So let's do docker pause, restart Telegraf,

00:10:53.845 --> 00:10:55.180
<v Speaker 0>and that's just to bring in that new

00:10:55.180 --> 00:10:57.420
<v Speaker 0>configuration file. I could have exacted into the

00:10:57.420 --> 00:11:00.300
<v Speaker 0>container and done a reload, but the restart

00:11:00.300 --> 00:11:01.500
<v Speaker 0>is just as effective.

00:11:02.220 --> 00:11:03.820
<v Speaker 0>To make sure everything is still working, we're

00:11:03.820 --> 00:11:05.980
<v Speaker 0>gonna turn the logs once more. What we

00:11:05.980 --> 00:11:07.580
<v Speaker 0>should see at the

00:11:10.315 --> 00:11:13.355
<v Speaker 0>top, yep, as our internal input is now

00:11:13.355 --> 00:11:16.395
<v Speaker 0>enabled, and we're still writing batches of metrics.

00:11:16.555 --> 00:11:18.875
<v Speaker 0>So where we were writing two metrics before,

00:11:18.875 --> 00:11:21.035
<v Speaker 0>we're now writing seven metrics, and that's just

00:11:21.035 --> 00:11:23.435
<v Speaker 0>those internal ones we're doing. So if we

00:11:23.435 --> 00:11:25.355
<v Speaker 0>jump back over to our UI, give it

00:11:25.355 --> 00:11:26.449
<v Speaker 0>a quick refresh,

00:11:27.089 --> 00:11:28.449
<v Speaker 0>and then we have all of the internal

00:11:28.449 --> 00:11:30.050
<v Speaker 0>metrics for Telegraf.

00:11:30.290 --> 00:11:33.570
<v Speaker 0>The ones that I am particularly curious about

00:11:35.250 --> 00:11:37.010
<v Speaker 0>are going to be

00:11:38.165 --> 00:11:39.764
<v Speaker 0>that this is group by output. We have

00:11:39.764 --> 00:11:41.285
<v Speaker 0>two outputs, so there should be standard out

00:11:41.285 --> 00:11:42.404
<v Speaker 0>and fail fail

00:11:43.045 --> 00:11:45.925
<v Speaker 0>standard out slash influx DB. And we can

00:11:45.925 --> 00:11:48.324
<v Speaker 0>take a look at the metrics dropped, metrics

00:11:48.324 --> 00:11:48.725
<v Speaker 0>written.

00:11:52.639 --> 00:11:54.480
<v Speaker 0>So what have we got here?

00:11:56.160 --> 00:12:00.160
<v Speaker 0>We have our metrics written to fail, 21,

00:12:00.160 --> 00:12:02.320
<v Speaker 0>metrics written to mFlexDB 14,

00:12:02.399 --> 00:12:06.485
<v Speaker 0>metrics dropped, mFlexDB zero, metrics dropped, file zero.

00:12:06.885 --> 00:12:09.285
<v Speaker 0>So we're not dropping any metrics to either

00:12:09.285 --> 00:12:10.005
<v Speaker 0>output,

00:12:10.245 --> 00:12:12.165
<v Speaker 0>but we are writing metrics

00:12:12.165 --> 00:12:14.085
<v Speaker 0>to both of our outputs.

00:12:14.485 --> 00:12:15.125
<v Speaker 0>Good.

00:12:16.725 --> 00:12:18.370
<v Speaker 0>So what is the metric buffer?

00:12:19.010 --> 00:12:22.370
<v Speaker 0>So the metric buffer is a concept in

00:12:22.370 --> 00:12:24.610
<v Speaker 0>Telegraf that means if any of your inputs

00:12:24.610 --> 00:12:27.090
<v Speaker 0>are down for any period of time and

00:12:27.090 --> 00:12:29.355
<v Speaker 0>Telegraf is unable to write those metrics to

00:12:29.355 --> 00:12:30.875
<v Speaker 0>that output is that it will store them

00:12:30.875 --> 00:12:31.675
<v Speaker 0>in memory,

00:12:32.555 --> 00:12:34.395
<v Speaker 0>and it will store them in memory for

00:12:34.395 --> 00:12:36.635
<v Speaker 0>as much as you allow with the metric

00:12:36.635 --> 00:12:37.595
<v Speaker 0>buffer limit.

00:12:39.355 --> 00:12:42.315
<v Speaker 0>So based on what we've seen from the

00:12:42.555 --> 00:12:45.019
<v Speaker 0>console out standard out stuff, we were writing

00:12:45.019 --> 00:12:47.260
<v Speaker 0>seven metrics every ten seconds.

00:12:48.220 --> 00:12:48.940
<v Speaker 0>So

00:12:49.820 --> 00:12:51.100
<v Speaker 0>let's say

00:12:51.980 --> 00:12:54.380
<v Speaker 0>that we are going to shut down InfluxDB

00:12:54.380 --> 00:12:55.180
<v Speaker 0>for

00:12:56.274 --> 00:12:58.035
<v Speaker 0>thirty seconds, if I can find something to

00:12:58.035 --> 00:12:59.235
<v Speaker 0>talk about for that long.

00:12:59.955 --> 00:13:02.115
<v Speaker 0>Then we're gonna need a metric buffer of

00:13:02.115 --> 00:13:05.075
<v Speaker 0>at least seven times three because of three

00:13:05.075 --> 00:13:06.595
<v Speaker 0>intervals, which is 21.

00:13:06.995 --> 00:13:08.675
<v Speaker 0>But we actually wanna see some draw metrics

00:13:08.675 --> 00:13:10.529
<v Speaker 0>as well. So let's just say that we

00:13:10.529 --> 00:13:11.170
<v Speaker 0>do

00:13:12.210 --> 00:13:15.410
<v Speaker 0>15 pair output, and that's always important to

00:13:15.410 --> 00:13:17.730
<v Speaker 0>remember the comments here. This metric buffer is

00:13:17.730 --> 00:13:20.050
<v Speaker 0>pair output. And for whatever reason, you were

00:13:20.050 --> 00:13:21.650
<v Speaker 0>writing to five different databases,

00:13:22.465 --> 00:13:24.545
<v Speaker 0>and you had a very large metric buffer,

00:13:24.545 --> 00:13:27.585
<v Speaker 0>say, thousand or a hundred thousand, then that

00:13:27.585 --> 00:13:29.985
<v Speaker 0>would be a multiple of how many outputs

00:13:29.985 --> 00:13:31.745
<v Speaker 0>you have, which would mean you're actually storing

00:13:31.745 --> 00:13:35.265
<v Speaker 0>for 50,000 metrics. But for the metric buffer

00:13:34.560 --> 00:13:35.440
<v Speaker 0>50,005

00:13:35.440 --> 00:13:37.440
<v Speaker 0>outputs, that would be 250,000

00:13:37.440 --> 00:13:39.760
<v Speaker 0>metrics held in memory. And depending on the

00:13:39.760 --> 00:13:41.360
<v Speaker 0>size and shape of those metrics,

00:13:41.680 --> 00:13:43.440
<v Speaker 0>that could be quite a lot of RAM.

00:13:43.520 --> 00:13:45.279
<v Speaker 0>Look. Let's just mark the bar in mind.

00:13:46.655 --> 00:13:48.655
<v Speaker 0>So now we need to restart Telegraf again

00:13:48.655 --> 00:13:50.415
<v Speaker 0>over a new metric buffer limit, and we

00:13:50.415 --> 00:13:52.815
<v Speaker 0>shouldn't see any metrics being dropped still because

00:13:52.815 --> 00:13:54.975
<v Speaker 0>nothing is broken. Nothing is done.

00:13:58.735 --> 00:14:01.695
<v Speaker 0>Perfect. So let's just tell the logs, wait

00:14:01.695 --> 00:14:03.279
<v Speaker 0>till we see the flash, and then jump

00:14:03.279 --> 00:14:05.600
<v Speaker 0>back over to our chronograph.

00:14:12.720 --> 00:14:13.440
<v Speaker 0>Awesome.

00:14:15.519 --> 00:14:17.360
<v Speaker 0>So let's just

00:14:17.519 --> 00:14:19.575
<v Speaker 0>turn on auto refresh here.

00:14:19.815 --> 00:14:21.975
<v Speaker 0>Let's say every ten seconds just because that's

00:14:21.975 --> 00:14:23.735
<v Speaker 0>what our interval is. Although, I guess, we're

00:14:23.735 --> 00:14:24.615
<v Speaker 0>we're gonna do the

00:14:26.055 --> 00:14:27.655
<v Speaker 0>I'm gonna force it to drop metrics. I

00:14:27.655 --> 00:14:28.935
<v Speaker 0>mean, speed that up. So we'll we'll just

00:14:29.015 --> 00:14:30.135
<v Speaker 0>let's put it on five for now.

00:14:33.899 --> 00:14:34.540
<v Speaker 0>One,

00:14:34.860 --> 00:14:36.140
<v Speaker 0>two, three.

00:14:36.220 --> 00:14:36.940
<v Speaker 0>Okay.

00:14:37.820 --> 00:14:40.060
<v Speaker 0>So you can see we're still writing to

00:14:40.060 --> 00:14:42.380
<v Speaker 0>both of our outputs. This is gonna gradually

00:14:42.380 --> 00:14:45.180
<v Speaker 0>go up. Of course, our refreshes will slightly

00:14:45.180 --> 00:14:47.580
<v Speaker 0>faster. Well, twice as fast as our interval,

00:14:47.580 --> 00:14:49.405
<v Speaker 0>so the growth here is gonna be linear,

00:14:49.405 --> 00:14:50.125
<v Speaker 0>but almost.

00:14:50.525 --> 00:14:52.125
<v Speaker 0>And our metrics dropped as at zero. So

00:14:52.125 --> 00:14:53.645
<v Speaker 0>we're still not dropping any metrics, which is

00:14:53.645 --> 00:14:55.565
<v Speaker 0>fantastic. In fact, I should just match them

00:14:55.565 --> 00:14:56.845
<v Speaker 0>up so that we don't get those false

00:14:56.845 --> 00:14:58.285
<v Speaker 0>rerates anyway.

00:15:01.405 --> 00:15:03.645
<v Speaker 0>We'll do let's really jump over here.

00:15:04.820 --> 00:15:06.339
<v Speaker 0>And we'll actually just set this to five

00:15:06.339 --> 00:15:07.779
<v Speaker 0>seconds so we can speed this up a

00:15:07.779 --> 00:15:09.620
<v Speaker 0>little bit, and then we're not looking for

00:15:09.620 --> 00:15:10.900
<v Speaker 0>me as entertainment,

00:15:12.420 --> 00:15:14.660
<v Speaker 0>which means we'll double our buffer limit just

00:15:14.660 --> 00:15:16.180
<v Speaker 0>so that I can shut down our FoxDB

00:15:16.180 --> 00:15:18.420
<v Speaker 0>and then force the drop metrics, but not

00:15:18.420 --> 00:15:20.065
<v Speaker 0>too quickly that I can't talk about what's

00:15:20.065 --> 00:15:23.505
<v Speaker 0>actually going on as well. So let's restart

00:15:23.665 --> 00:15:24.144
<v Speaker 0>again.

00:15:31.920 --> 00:15:34.640
<v Speaker 0>We'll toggle logs. We'll wait for output.

00:15:36.560 --> 00:15:37.840
<v Speaker 0>I mean, I just had a thought. You

00:15:37.840 --> 00:15:39.760
<v Speaker 0>know, I haven't really tested the stream, so

00:15:39.760 --> 00:15:41.600
<v Speaker 0>I know the video is being captured. I'm

00:15:41.600 --> 00:15:42.880
<v Speaker 0>assuming people can hear me.

00:15:44.125 --> 00:15:46.445
<v Speaker 0>I guess we'll think that soon enough.

00:15:47.245 --> 00:15:49.084
<v Speaker 0>So let's jump back down to five seconds

00:15:49.084 --> 00:15:51.324
<v Speaker 0>here. We just do a manual refresh to

00:15:51.324 --> 00:15:52.204
<v Speaker 0>force it.

00:15:55.084 --> 00:15:55.565
<v Speaker 0>Hopefully,

00:15:59.580 --> 00:16:00.780
<v Speaker 0>see some metrics.

00:16:00.860 --> 00:16:01.740
<v Speaker 0>There we go.

00:16:03.340 --> 00:16:05.660
<v Speaker 0>And 21 metrics run to InfluxDB, and you

00:16:05.660 --> 00:16:07.660
<v Speaker 0>can see this number is resetting every time

00:16:07.660 --> 00:16:10.220
<v Speaker 0>we restart Telegraf because it's essentially a new

00:16:10.220 --> 00:16:12.375
<v Speaker 0>version of Telegraf, all the stat reset.

00:16:13.415 --> 00:16:16.295
<v Speaker 0>Remember at 36, 30 five, so forth, so

00:16:16.295 --> 00:16:18.375
<v Speaker 0>forth, so forth. So that's all good. Now

00:16:18.375 --> 00:16:19.495
<v Speaker 0>what happens

00:16:22.295 --> 00:16:24.375
<v Speaker 0>if I now this is gonna be difficult

00:16:24.375 --> 00:16:26.600
<v Speaker 0>to see. I probably should have run two

00:16:26.600 --> 00:16:28.280
<v Speaker 0>influx d b's side by side so that

00:16:28.280 --> 00:16:29.880
<v Speaker 0>I can show you them at the same

00:16:29.880 --> 00:16:32.360
<v Speaker 0>time. But what we're gonna do is stop

00:16:33.080 --> 00:16:34.280
<v Speaker 0>influx d b,

00:16:36.200 --> 00:16:38.040
<v Speaker 0>which means that Chronograph is no longer gonna

00:16:38.040 --> 00:16:39.240
<v Speaker 0>be able to fetch any metrics,

00:16:40.355 --> 00:16:41.475
<v Speaker 0>but that's okay.

00:16:42.355 --> 00:16:44.675
<v Speaker 0>So we wanna trigger the metric buffer

00:16:45.475 --> 00:16:47.154
<v Speaker 0>to go over. So let's just take a

00:16:47.154 --> 00:16:48.675
<v Speaker 0>look at logs, and we can follow this

00:16:48.675 --> 00:16:50.115
<v Speaker 0>along here.

00:16:51.075 --> 00:16:52.995
<v Speaker 0>But we can already see the buffer fullness

00:16:52.995 --> 00:16:54.515
<v Speaker 0>is 30 of 30 metrics.

00:16:54.930 --> 00:16:57.090
<v Speaker 0>We're unable to write to influx DB.

00:16:57.490 --> 00:16:58.770
<v Speaker 0>Now we were at the point where all

00:16:58.770 --> 00:17:00.370
<v Speaker 0>of our metrics that are being written our

00:17:00.370 --> 00:17:02.050
<v Speaker 0>our oldest metrics that are being written to

00:17:02.050 --> 00:17:03.890
<v Speaker 0>influx DB are now being lost,

00:17:04.050 --> 00:17:04.929
<v Speaker 0>that we pushed

00:17:05.410 --> 00:17:06.770
<v Speaker 0>out of the way in favor of the

00:17:06.770 --> 00:17:08.049
<v Speaker 0>more recent metrics.

00:17:08.290 --> 00:17:10.234
<v Speaker 0>At least I think that's how it works.

00:17:10.635 --> 00:17:11.994
<v Speaker 0>I should really know that.

00:17:18.315 --> 00:17:20.075
<v Speaker 0>Oh,

00:17:21.595 --> 00:17:23.010
<v Speaker 0>I do that every time.

00:17:33.650 --> 00:17:35.890
<v Speaker 0>So now that m plus d b should

00:17:35.385 --> 00:17:37.945
<v Speaker 0>almost be healthy again, we should start to

00:17:37.945 --> 00:17:39.545
<v Speaker 0>see all of the metrics we were in

00:17:39.545 --> 00:17:41.385
<v Speaker 0>to both standard out and m plus d

00:17:41.385 --> 00:17:42.184
<v Speaker 0>b again.

00:17:44.185 --> 00:17:45.544
<v Speaker 0>Yeah. Our buffer

00:17:46.425 --> 00:17:48.265
<v Speaker 0>looks good. Let's see one more.

00:17:53.080 --> 00:17:54.760
<v Speaker 0>Yeah. I think we're good. So we jump

00:17:54.760 --> 00:17:56.600
<v Speaker 0>back over here. Awesome.

00:17:58.520 --> 00:18:00.280
<v Speaker 0>So now we can see we have three

00:18:00.280 --> 00:18:03.080
<v Speaker 0>lanes, and that's because our metrics being dropped

00:18:03.080 --> 00:18:04.680
<v Speaker 0>was actually on the rise.

00:18:05.605 --> 00:18:07.445
<v Speaker 0>And in fact, if we add

00:18:08.245 --> 00:18:10.404
<v Speaker 0>a buffer size to this,

00:18:11.125 --> 00:18:12.885
<v Speaker 0>you can see that our buffer hits are

00:18:12.885 --> 00:18:13.684
<v Speaker 0>in here

00:18:14.325 --> 00:18:16.164
<v Speaker 0>and then drops back down as influx DB

00:18:16.164 --> 00:18:17.124
<v Speaker 0>comes back on,

00:18:17.605 --> 00:18:19.125
<v Speaker 0>and then everything goes back to normal.

00:18:20.230 --> 00:18:22.390
<v Speaker 0>So the metric buffer is a really simple

00:18:22.390 --> 00:18:24.230
<v Speaker 0>setting within Telegraf.

00:18:24.549 --> 00:18:27.510
<v Speaker 0>It just gives you that kinda extra resiliency

00:18:27.510 --> 00:18:29.350
<v Speaker 0>in case your influx DB

00:18:29.590 --> 00:18:31.990
<v Speaker 0>or your, you know, any other time series

00:18:31.990 --> 00:18:34.625
<v Speaker 0>database you're using goes down for any period

00:18:34.625 --> 00:18:35.424
<v Speaker 0>of time.

00:18:35.985 --> 00:18:38.225
<v Speaker 0>And so the larger you make the mesh

00:18:38.225 --> 00:18:40.465
<v Speaker 0>buffer, the more memory you're gonna consume. In

00:18:40.465 --> 00:18:41.024
<v Speaker 0>fact,

00:18:41.345 --> 00:18:43.104
<v Speaker 0>it's probably not worth showing it

00:18:44.625 --> 00:18:47.380
<v Speaker 0>just because we were only caching a very

00:18:47.380 --> 00:18:48.340
<v Speaker 0>small amount.

00:18:48.740 --> 00:18:49.940
<v Speaker 0>And if we take a look at the

00:18:49.940 --> 00:18:51.220
<v Speaker 0>available percent

00:18:52.500 --> 00:18:53.700
<v Speaker 0>and use

00:18:53.700 --> 00:18:54.500
<v Speaker 0>percent,

00:18:54.580 --> 00:18:56.260
<v Speaker 0>I don't think it's gonna make a blip.

00:18:56.260 --> 00:18:57.299
<v Speaker 0>Yeah. Barely.

00:18:59.940 --> 00:19:02.020
<v Speaker 0>So let's go drop. Nope. My thoughts are

00:19:02.020 --> 00:19:04.015
<v Speaker 0>dropped. Edit written

00:19:04.175 --> 00:19:04.975
<v Speaker 0>buffer.

00:19:05.055 --> 00:19:07.375
<v Speaker 0>Yeah. So the metric buffer just means that

00:19:07.375 --> 00:19:08.815
<v Speaker 0>we can catch all of those metrics and

00:19:08.815 --> 00:19:10.895
<v Speaker 0>memory in the event that we lose, like,

00:19:10.895 --> 00:19:13.615
<v Speaker 0>say that the network problem or database goes

00:19:13.615 --> 00:19:16.009
<v Speaker 0>down, anything that could happen within our infrastructure,

00:19:16.410 --> 00:19:18.650
<v Speaker 0>then Telegraf will capture them, hold on to

00:19:18.650 --> 00:19:20.570
<v Speaker 0>them, and then we try as often as

00:19:20.570 --> 00:19:22.330
<v Speaker 0>possible until it can write them back out

00:19:22.330 --> 00:19:24.249
<v Speaker 0>to your database of choice.

00:19:24.970 --> 00:19:26.889
<v Speaker 0>So it's a very powerful setting,

00:19:27.370 --> 00:19:29.955
<v Speaker 0>and it takes, like, three seconds to configure.

00:19:29.955 --> 00:19:30.995
<v Speaker 0>All you have to do is a little

00:19:30.995 --> 00:19:32.994
<v Speaker 0>bit of a little bit of math,

00:19:33.155 --> 00:19:35.315
<v Speaker 0>you know, understand how many metrics you're writing

00:19:35.315 --> 00:19:36.914
<v Speaker 0>per second. So, you know, you can just

00:19:36.914 --> 00:19:37.634
<v Speaker 0>take a look

00:19:38.355 --> 00:19:40.434
<v Speaker 0>at this here, and we can see that,

00:19:40.434 --> 00:19:41.794
<v Speaker 0>you know, we've got this linear in the

00:19:41.794 --> 00:19:43.730
<v Speaker 0>growth. We wanna work out what that is

00:19:43.730 --> 00:19:45.810
<v Speaker 0>every second or every minute depending on how

00:19:45.810 --> 00:19:47.890
<v Speaker 0>often you've got your interval configured.

00:19:48.370 --> 00:19:49.730
<v Speaker 0>And then, say, I wanna be able to

00:19:49.730 --> 00:19:52.210
<v Speaker 0>handle resiliency for up to fifteen minutes, maybe

00:19:52.210 --> 00:19:54.050
<v Speaker 0>even an hour or maybe six hours, whatever

00:19:54.050 --> 00:19:56.370
<v Speaker 0>your failure scenario that you're comfortable with is.

00:19:56.770 --> 00:19:59.425
<v Speaker 0>Multiply that by the number of outputs, and

00:19:59.425 --> 00:20:01.585
<v Speaker 0>then use that as your metric buffer limit.

00:20:02.145 --> 00:20:03.745
<v Speaker 0>And that'll give you resiliency

00:20:03.745 --> 00:20:05.745
<v Speaker 0>with all of your metric collections, and hopefully,

00:20:05.745 --> 00:20:07.745
<v Speaker 0>you never lose any more data again.

00:20:08.785 --> 00:20:10.945
<v Speaker 0>So this is just a short stream. I'm

00:20:10.945 --> 00:20:12.550
<v Speaker 0>just testing this out. I hope you found

00:20:12.550 --> 00:20:13.750
<v Speaker 0>it somewhat valuable.

00:20:14.630 --> 00:20:16.950
<v Speaker 0>If you watched, please let me know. Let

00:20:16.950 --> 00:20:19.110
<v Speaker 0>me know if starting from scratch like this

00:20:19.110 --> 00:20:21.430
<v Speaker 0>was useful. If you draw slightly more larger

00:20:21.430 --> 00:20:24.098
<v Speaker 0>examples or preview it first. I'll be happy

00:20:24.098 --> 00:20:26.338
<v Speaker 0>to try that out as well. But thank

00:20:26.338 --> 00:20:27.618
<v Speaker 0>you very much, and I will speak to

00:20:27.618 --> 00:20:28.018
<v Speaker 0>you all later.
