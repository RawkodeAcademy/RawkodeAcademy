WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: fc673331-90c8-44b8-a4e6-c533aa331e0e
Created: 2025-04-29T18:46:56.890Z
Duration: 3735.3542
Channels: 1

00:00:50.085 --> 00:00:52.725
<v Speaker 0>Hello, and welcome to today's episode of Rawkode

00:00:52.725 --> 00:00:55.350
<v Speaker 0>Live. Today, we are taking a look at

00:00:55.350 --> 00:00:56.469
<v Speaker 0>Firecracker,

00:00:56.469 --> 00:00:59.350
<v Speaker 0>a tool for micro VMs that is fast.

00:00:59.670 --> 00:01:01.589
<v Speaker 0>Now before we get started, we are just

00:01:01.589 --> 00:01:03.109
<v Speaker 0>gonna do some housekeeping.

00:01:03.670 --> 00:01:06.070
<v Speaker 0>First and foremost, please subscribe to the YouTube

00:01:06.070 --> 00:01:07.750
<v Speaker 0>channel and click the bell. This will get

00:01:07.750 --> 00:01:10.035
<v Speaker 0>you alerts all future episodes of Rawkode live

00:01:10.035 --> 00:01:11.875
<v Speaker 0>as we cover more and more cloud native

00:01:11.875 --> 00:01:12.755
<v Speaker 0>technologies.

00:01:13.315 --> 00:01:15.475
<v Speaker 0>Also, if you'd like to chat or you're

00:01:15.475 --> 00:01:17.315
<v Speaker 0>not watching this live and have questions, you

00:01:17.315 --> 00:01:19.315
<v Speaker 0>can join us in the Discord channel that

00:01:19.315 --> 00:01:21.555
<v Speaker 0>is available at Rawkode.chat.

00:01:22.470 --> 00:01:24.390
<v Speaker 0>Alright. Now, like I said, today we are

00:01:24.390 --> 00:01:26.310
<v Speaker 0>gonna take a look at Firecracker and to

00:01:26.310 --> 00:01:27.830
<v Speaker 0>do that, I am joined by Gabriel and

00:01:27.830 --> 00:01:30.390
<v Speaker 0>Rawkode from the Firecracker team. Hi there, Gabriel

00:01:30.390 --> 00:01:31.910
<v Speaker 0>and Rawkode. How are you both today?

00:01:35.685 --> 00:01:36.405
<v Speaker 1>Hello?

00:01:36.884 --> 00:01:38.005
<v Speaker 1>We're good?

00:01:38.564 --> 00:01:39.204
<v Speaker 0>Yeah.

00:01:39.604 --> 00:01:40.965
<v Speaker 0>I always do that. I really need to

00:01:40.965 --> 00:01:42.645
<v Speaker 0>get better. I I ask a question and

00:01:42.645 --> 00:01:44.085
<v Speaker 0>throw it to people and then have them

00:01:44.085 --> 00:01:46.485
<v Speaker 0>content to answer first. So, Gabriel, why don't

00:01:46.485 --> 00:01:48.085
<v Speaker 0>you introduce yourself? Tell us who you are,

00:01:48.085 --> 00:01:49.284
<v Speaker 0>and then we'll we'll hand it over to

00:01:49.284 --> 00:01:49.604
<v Speaker 0>Rado.

00:01:50.590 --> 00:01:51.310
<v Speaker 2>Sure.

00:01:51.470 --> 00:01:53.070
<v Speaker 2>So first of all, hi, everyone.

00:01:53.390 --> 00:01:54.750
<v Speaker 2>My name is Gabriel.

00:01:54.750 --> 00:01:57.710
<v Speaker 2>I work as an SD here at AWS,

00:01:57.790 --> 00:01:59.790
<v Speaker 2>and I focus

00:01:59.790 --> 00:02:01.470
<v Speaker 2>on developing Firecracker.

00:02:03.555 --> 00:02:06.035
<v Speaker 2>And, yeah, as David said, today, we're gonna

00:02:06.035 --> 00:02:09.315
<v Speaker 2>talk about Firecracker and look at the short

00:02:09.315 --> 00:02:11.315
<v Speaker 2>demo on how to use Firecracker at the

00:02:11.315 --> 00:02:12.355
<v Speaker 2>end of the stream.

00:02:13.955 --> 00:02:14.675
<v Speaker 0>Okay.

00:02:15.315 --> 00:02:18.435
<v Speaker 1>Okay. And I'm running on software dev manager.

00:02:19.450 --> 00:02:21.530
<v Speaker 1>I've been with Firecracker

00:02:21.530 --> 00:02:23.530
<v Speaker 1>since the start. I'm really excited about the

00:02:23.530 --> 00:02:26.090
<v Speaker 1>the entire project and even more so about

00:02:26.090 --> 00:02:27.770
<v Speaker 1>the the the kind of the space.

00:02:28.170 --> 00:02:30.010
<v Speaker 1>I generally view what we're doing as a

00:02:30.010 --> 00:02:33.930
<v Speaker 1>as a safe platform for for serverless containers

00:02:33.930 --> 00:02:34.650
<v Speaker 1>and functions.

00:02:35.905 --> 00:02:38.865
<v Speaker 1>That's just barely a space that's getting started.

00:02:38.865 --> 00:02:40.225
<v Speaker 1>So I think it's going to be very

00:02:40.225 --> 00:02:41.665
<v Speaker 1>exciting for many years to come.

00:02:42.465 --> 00:02:43.905
<v Speaker 0>Awesome. Thank you very much.

00:02:44.625 --> 00:02:46.865
<v Speaker 0>Okay. So why don't we start with just

00:02:46.865 --> 00:02:48.625
<v Speaker 0>a little bit about Firecracker?

00:02:48.625 --> 00:02:48.865
<v Speaker 0>Like,

00:02:49.460 --> 00:02:50.260
<v Speaker 0>what

00:02:50.260 --> 00:02:52.340
<v Speaker 0>is the the elevator pitch? What what is

00:02:52.340 --> 00:02:53.380
<v Speaker 0>Firecracker?

00:02:54.820 --> 00:02:57.540
<v Speaker 1>So the elevator pitch is that I assume

00:02:57.540 --> 00:02:59.460
<v Speaker 1>what we started with is that you can

00:02:59.460 --> 00:03:01.300
<v Speaker 1>do everything you can with containers, but you

00:03:01.300 --> 00:03:02.740
<v Speaker 1>can have multitenant isolation.

00:03:03.215 --> 00:03:05.295
<v Speaker 1>That's basically what we built it for. And

00:03:05.295 --> 00:03:06.575
<v Speaker 1>this is something that

00:03:07.455 --> 00:03:10.335
<v Speaker 1>that practically everyone that uses Firecracker

00:03:10.415 --> 00:03:11.695
<v Speaker 1>is enabled by.

00:03:12.575 --> 00:03:16.255
<v Speaker 1>Like, the classic example are Lambda functions AWS

00:03:16.255 --> 00:03:17.055
<v Speaker 1>Lambda functions.

00:03:18.040 --> 00:03:18.680
<v Speaker 1>And

00:03:19.159 --> 00:03:21.000
<v Speaker 1>the other thing that we're discovering now is

00:03:21.000 --> 00:03:22.840
<v Speaker 1>that by kind of having this abstraction layer

00:03:22.840 --> 00:03:24.760
<v Speaker 1>at the at the virtualization

00:03:25.159 --> 00:03:25.960
<v Speaker 1>level,

00:03:26.519 --> 00:03:29.959
<v Speaker 1>very interesting things like like snapshot restore and

00:03:29.959 --> 00:03:32.835
<v Speaker 1>and container cloning and things like that start

00:03:32.835 --> 00:03:34.195
<v Speaker 1>becoming a possibility.

00:03:34.195 --> 00:03:36.275
<v Speaker 1>And this Gabriel will kind of show a

00:03:36.275 --> 00:03:37.555
<v Speaker 1>bit of that in his demo.

00:03:37.955 --> 00:03:39.635
<v Speaker 1>So that's the

00:03:40.115 --> 00:03:42.755
<v Speaker 1>I'd say the elevator pitches that were today,

00:03:42.755 --> 00:03:44.995
<v Speaker 1>we're enabling multi multitenant

00:03:45.235 --> 00:03:45.635
<v Speaker 1>containers.

00:03:46.130 --> 00:03:48.130
<v Speaker 1>And then it looks like we can

00:03:49.170 --> 00:03:51.810
<v Speaker 1>facilitate a lot of a lot of dense

00:03:51.810 --> 00:03:52.930
<v Speaker 1>utilization

00:03:53.010 --> 00:03:53.730
<v Speaker 1>and

00:03:54.450 --> 00:03:56.930
<v Speaker 1>just very efficient use of hardware going forward.

00:03:57.890 --> 00:04:00.674
<v Speaker 0>Yeah. I think when people traditionally think of

00:04:00.674 --> 00:04:03.075
<v Speaker 0>of VMs, we we think of slow cumbersome

00:04:03.075 --> 00:04:03.875
<v Speaker 0>processes,

00:04:03.875 --> 00:04:05.795
<v Speaker 0>but that's not the case with Firecracker. Right?

00:04:05.795 --> 00:04:08.595
<v Speaker 0>It's it's fast, it's late. It's, like, taken

00:04:08.595 --> 00:04:09.955
<v Speaker 0>all of the boxes for things that we

00:04:09.955 --> 00:04:10.355
<v Speaker 0>need with.

00:04:11.569 --> 00:04:13.650
<v Speaker 0>Is it true virtualization

00:04:13.650 --> 00:04:15.250
<v Speaker 0>that has does each of the VMs have

00:04:15.250 --> 00:04:16.850
<v Speaker 0>its own kernel just like we would traditionally

00:04:16.850 --> 00:04:17.649
<v Speaker 0>think of?

00:04:18.130 --> 00:04:19.490
<v Speaker 0>So how do we manage to get it?

00:04:19.490 --> 00:04:21.410
<v Speaker 0>How did you manage to get it so

00:04:21.410 --> 00:04:21.729
<v Speaker 0>fast?

00:04:24.164 --> 00:04:27.205
<v Speaker 1>We so it's there's nothing magic about it.

00:04:27.205 --> 00:04:29.764
<v Speaker 1>So there's only two things to it. The

00:04:29.764 --> 00:04:31.365
<v Speaker 1>the first part is that we

00:04:31.925 --> 00:04:35.044
<v Speaker 1>just don't emulate much. And there's the of

00:04:35.044 --> 00:04:36.485
<v Speaker 1>the more heavy

00:04:36.485 --> 00:04:39.044
<v Speaker 1>devices, it's just network and and block device.

00:04:39.979 --> 00:04:42.620
<v Speaker 1>There's also VSOC for for kind of container

00:04:42.620 --> 00:04:43.660
<v Speaker 1>control cases.

00:04:44.940 --> 00:04:47.340
<v Speaker 1>So Firecracker itself is very small. We we

00:04:47.340 --> 00:04:49.740
<v Speaker 1>do rely on the Linux KVM, which does

00:04:49.740 --> 00:04:51.705
<v Speaker 1>a lot of things for us. And then

00:04:51.705 --> 00:04:54.025
<v Speaker 1>the other thing is that, obviously, there's nothing

00:04:54.025 --> 00:04:56.265
<v Speaker 1>stopping you from putting in a huge application

00:04:56.265 --> 00:04:58.185
<v Speaker 1>and a huge OS in the guest.

00:04:58.825 --> 00:05:01.385
<v Speaker 1>But but our for all our use cases,

00:05:01.385 --> 00:05:03.705
<v Speaker 1>our customers

00:05:03.270 --> 00:05:06.389
<v Speaker 1>just use very tiny guest kernels and kind

00:05:06.389 --> 00:05:07.190
<v Speaker 1>of guest

00:05:07.669 --> 00:05:09.190
<v Speaker 1>file systems and so on,

00:05:09.910 --> 00:05:11.590
<v Speaker 1>which you you need to do both to

00:05:11.590 --> 00:05:14.150
<v Speaker 1>to actually get the the fast and small

00:05:14.150 --> 00:05:14.790
<v Speaker 1>effect.

00:05:15.509 --> 00:05:18.695
<v Speaker 0>Yeah. So you mentioned that it's powering

00:05:19.175 --> 00:05:21.335
<v Speaker 0>land or or or you can power that

00:05:21.335 --> 00:05:23.255
<v Speaker 0>kind of use case. What other use cases

00:05:23.255 --> 00:05:25.415
<v Speaker 0>are you seeing adopted outside of AWS? Is

00:05:25.415 --> 00:05:27.175
<v Speaker 0>that something that people are sharing their stories

00:05:27.175 --> 00:05:27.815
<v Speaker 0>with you?

00:05:29.095 --> 00:05:30.775
<v Speaker 1>So there's some that we know about.

00:05:31.655 --> 00:05:32.935
<v Speaker 1>Yeah. The

00:05:33.530 --> 00:05:35.290
<v Speaker 1>there's a list on our website, so let

00:05:35.290 --> 00:05:36.730
<v Speaker 1>me just go ahead and reach from that.

00:05:37.290 --> 00:05:38.570
<v Speaker 0>Oh, I've got it here. You want me

00:05:38.570 --> 00:05:40.170
<v Speaker 0>just to share share my screen?

00:05:40.650 --> 00:05:42.250
<v Speaker 2>Yeah. You can share your screen. So it's,

00:05:42.250 --> 00:05:44.490
<v Speaker 1>like, right towards the top is the third

00:05:44.490 --> 00:05:45.370
<v Speaker 1>paragraph or so.

00:05:46.965 --> 00:05:47.605
<v Speaker 1>So

00:05:47.925 --> 00:05:49.925
<v Speaker 1>we've made the website open source so people

00:05:49.925 --> 00:05:51.685
<v Speaker 1>can add themselves to that list now, and

00:05:51.685 --> 00:05:54.565
<v Speaker 1>that's, like, the alphabetically sorted list of people

00:05:54.565 --> 00:05:55.845
<v Speaker 1>that use Firecracker.

00:05:56.245 --> 00:05:58.805
<v Speaker 1>Of these, some are so Firecracker container deep,

00:05:58.805 --> 00:06:00.485
<v Speaker 1>also an Amazon project. And then I think

00:06:00.485 --> 00:06:00.965
<v Speaker 1>AppFleet,

00:06:02.170 --> 00:06:03.210
<v Speaker 1>KoiWeb,

00:06:03.530 --> 00:06:04.570
<v Speaker 1>OpenNebula,

00:06:04.570 --> 00:06:05.930
<v Speaker 1>and and

00:06:06.250 --> 00:06:08.570
<v Speaker 1>all the Weaveworks stuff, Firecracker and Ignite, those

00:06:08.570 --> 00:06:09.290
<v Speaker 1>are actually,

00:06:09.930 --> 00:06:12.330
<v Speaker 1>you know, other teams, other organizations that are

00:06:12.330 --> 00:06:15.050
<v Speaker 1>using Firecracker to build their their software.

00:06:15.370 --> 00:06:16.330
<v Speaker 1>And then containers

00:06:17.665 --> 00:06:20.625
<v Speaker 1>and to some extent, also, Weave, Ignite, and

00:06:20.625 --> 00:06:23.025
<v Speaker 1>Unique. And those are those are building blocks

00:06:23.025 --> 00:06:25.745
<v Speaker 1>that, again, kind of feed into the ecosystem.

00:06:25.745 --> 00:06:27.345
<v Speaker 1>All of these things are the use case

00:06:27.345 --> 00:06:29.185
<v Speaker 1>that I mentioned at the start. So, basically,

00:06:30.305 --> 00:06:31.185
<v Speaker 1>multitenant

00:06:31.185 --> 00:06:32.465
<v Speaker 1>containers or functions

00:06:33.070 --> 00:06:34.990
<v Speaker 1>with very low resource overhead.

00:06:35.630 --> 00:06:38.430
<v Speaker 0>Alright. Awesome. Well, I'm very excited to be

00:06:38.430 --> 00:06:40.990
<v Speaker 0>playing with it today. So we're we're gonna

00:06:40.990 --> 00:06:44.110
<v Speaker 0>run through getting started with Firecracker.

00:06:44.350 --> 00:06:46.395
<v Speaker 0>In preparation for this, I have spun up

00:06:47.194 --> 00:06:49.435
<v Speaker 0>Ubuntu machine on Equinix Metals. This is the

00:06:49.435 --> 00:06:50.475
<v Speaker 0>bare metal

00:06:50.794 --> 00:06:51.915
<v Speaker 0>Linux machine,

00:06:52.315 --> 00:06:54.235
<v Speaker 0>and I can say hello here.

00:06:54.794 --> 00:06:56.715
<v Speaker 0>This is a unmodified

00:06:56.715 --> 00:07:00.070
<v Speaker 0>vanilla Ubuntu 20 o four machine.

00:07:00.070 --> 00:07:02.070
<v Speaker 0>So we'll walk through the entire process of

00:07:02.070 --> 00:07:04.150
<v Speaker 0>getting Firecracker working on this machine

00:07:04.390 --> 00:07:06.470
<v Speaker 0>and cover some of those use cases that

00:07:06.470 --> 00:07:07.830
<v Speaker 0>Raghu mentioned as well.

00:07:08.950 --> 00:07:11.670
<v Speaker 0>So we're gonna work through the getting started

00:07:11.670 --> 00:07:14.685
<v Speaker 0>guide from the GitHub repository, which people can

00:07:14.685 --> 00:07:17.005
<v Speaker 0>find at firecracker dash micro v m slash

00:07:17.005 --> 00:07:18.045
<v Speaker 0>firecracker.

00:07:18.765 --> 00:07:21.805
<v Speaker 0>You mentioned earlier, Raghu, there's kinda getting started

00:07:21.805 --> 00:07:23.165
<v Speaker 0>here in the read me and then there's

00:07:23.165 --> 00:07:24.605
<v Speaker 0>more within the documentation,

00:07:24.685 --> 00:07:26.925
<v Speaker 0>like, should we start? Will it be right

00:07:26.925 --> 00:07:27.645
<v Speaker 0>on this one here?

00:07:30.180 --> 00:07:31.220
<v Speaker 1>I think all

00:07:32.180 --> 00:07:34.979
<v Speaker 1>the Gabriel address studies got

00:07:34.979 --> 00:07:36.580
<v Speaker 1>a better grasp on it than I do.

00:07:39.620 --> 00:07:40.660
<v Speaker 2>Yes. So

00:07:40.900 --> 00:07:43.460
<v Speaker 2>the getting started section

00:07:43.185 --> 00:07:45.105
<v Speaker 2>is a good place to take a look

00:07:45.105 --> 00:07:46.945
<v Speaker 2>at how Firecracker works.

00:07:47.105 --> 00:07:50.545
<v Speaker 2>And if you look at the

00:07:51.105 --> 00:07:53.905
<v Speaker 2>that there's a sentence which starts with the

00:07:53.905 --> 00:07:55.185
<v Speaker 2>Firecracker binary,

00:07:55.425 --> 00:07:57.345
<v Speaker 2>there's also another link there which says you

00:07:57.345 --> 00:07:58.625
<v Speaker 2>can go to the quick start guide.

00:07:59.380 --> 00:08:02.419
<v Speaker 2>But do go over the getting started guide

00:08:02.419 --> 00:08:02.979
<v Speaker 2>first and

00:08:03.860 --> 00:08:05.060
<v Speaker 0>Okay. So you want me to go to

00:08:05.060 --> 00:08:06.260
<v Speaker 0>the quick start guide first?

00:08:07.780 --> 00:08:10.099
<v Speaker 2>No. Start with the getting started section, and

00:08:10.099 --> 00:08:11.460
<v Speaker 2>then we can go to the quick start

00:08:11.460 --> 00:08:14.675
<v Speaker 2>guide. Okay. So I'm assuming we probably

00:08:14.835 --> 00:08:16.275
<v Speaker 0>don't need to build it. We can just

00:08:16.275 --> 00:08:17.715
<v Speaker 0>grab the release batteries.

00:08:18.835 --> 00:08:20.354
<v Speaker 2>Yeah. Yeah. Okay.

00:08:23.715 --> 00:08:25.314
<v Speaker 0>And this is AMD

00:08:25.314 --> 00:08:26.194
<v Speaker 0>sixty four.

00:08:44.755 --> 00:08:45.715
<v Speaker 0>There we go.

00:08:46.035 --> 00:08:47.635
<v Speaker 0>I forgot how to curl for a second

00:08:47.635 --> 00:08:48.275
<v Speaker 0>there.

00:08:52.435 --> 00:08:55.875
<v Speaker 0>Okay. So we have two binary files here,

00:08:56.160 --> 00:08:58.560
<v Speaker 0>Firecracker zero twenty four and

00:08:58.800 --> 00:08:59.600
<v Speaker 0>JLR.

00:09:00.959 --> 00:09:02.959
<v Speaker 0>Can you give us a quick TLDR on

00:09:02.959 --> 00:09:04.399
<v Speaker 0>these on what these are?

00:09:06.079 --> 00:09:07.680
<v Speaker 2>Yep. So the

00:09:07.680 --> 00:09:08.560
<v Speaker 2>Firecracker

00:09:08.560 --> 00:09:10.905
<v Speaker 2>binary is Firecracker itself,

00:09:11.305 --> 00:09:13.705
<v Speaker 2>which is the VMM that launches

00:09:14.425 --> 00:09:15.545
<v Speaker 2>virtual machines.

00:09:15.945 --> 00:09:18.025
<v Speaker 2>And the jailer is

00:09:18.985 --> 00:09:20.585
<v Speaker 2>you can record it as a

00:09:21.465 --> 00:09:25.420
<v Speaker 2>safety feature, which we recommend to run together

00:09:25.420 --> 00:09:26.540
<v Speaker 2>with Firecracker.

00:09:27.260 --> 00:09:29.820
<v Speaker 2>It has the role of

00:09:31.100 --> 00:09:34.220
<v Speaker 2>locking Firecracker inside the network test spaces

00:09:34.700 --> 00:09:37.100
<v Speaker 2>so that you can have an extra isolation

00:09:37.100 --> 00:09:37.980
<v Speaker 2>boundary

00:09:38.220 --> 00:09:39.899
<v Speaker 2>whenever you're running multiple

00:09:40.165 --> 00:09:42.085
<v Speaker 2>micro VMs on one post.

00:09:42.805 --> 00:09:44.405
<v Speaker 2>The purpose of this

00:09:44.725 --> 00:09:45.605
<v Speaker 2>isolation

00:09:45.605 --> 00:09:49.285
<v Speaker 2>would be to, for example, mitigate the risks

00:09:49.285 --> 00:09:50.245
<v Speaker 2>whenever

00:09:51.365 --> 00:09:54.485
<v Speaker 2>sandboxes escape might happen from a micro VM,

00:09:54.485 --> 00:09:56.485
<v Speaker 2>and that

00:09:55.800 --> 00:09:57.480
<v Speaker 2>can be, for example,

00:09:58.120 --> 00:10:01.080
<v Speaker 2>try to bring down all the Firecracker processes.

00:10:01.880 --> 00:10:02.680
<v Speaker 0>Alright.

00:10:02.760 --> 00:10:05.240
<v Speaker 0>It's an interesting user and group ID. This

00:10:05.240 --> 00:10:06.839
<v Speaker 0>is downloaded with as well. I don't think

00:10:06.839 --> 00:10:08.040
<v Speaker 0>I've ever seen it that high before.

00:10:10.525 --> 00:10:12.205
<v Speaker 0>I'll just ignore that for now.

00:10:12.765 --> 00:10:14.765
<v Speaker 0>Okay. So we've got our binaries. Let's jump

00:10:14.765 --> 00:10:16.845
<v Speaker 0>back to our guest. Start to gauge.

00:10:17.645 --> 00:10:19.085
<v Speaker 0>We don't wanna build Sorry.

00:10:20.685 --> 00:10:22.365
<v Speaker 1>Can I have one thing? Yeah. Of course.

00:10:22.365 --> 00:10:22.525
<v Speaker 0>Go.

00:10:23.290 --> 00:10:24.730
<v Speaker 1>So so one thing to mention here is

00:10:24.730 --> 00:10:27.210
<v Speaker 1>that we definitely want we wanted to add

00:10:27.210 --> 00:10:29.530
<v Speaker 1>the virtualization layer as an isolation boundary, but

00:10:29.530 --> 00:10:31.370
<v Speaker 1>we wanted to keep everything that was already

00:10:31.370 --> 00:10:32.330
<v Speaker 1>kind of a

00:10:32.650 --> 00:10:34.730
<v Speaker 1>standard practice in the container world. So that's

00:10:34.730 --> 00:10:37.145
<v Speaker 1>why we also have this JLR, which applies

00:10:37.145 --> 00:10:39.865
<v Speaker 1>all the usual namespaces and c groups and

00:10:39.865 --> 00:10:41.545
<v Speaker 1>seccomp and things like that.

00:10:42.025 --> 00:10:43.865
<v Speaker 1>So we're we basically kinda wanted to add

00:10:43.865 --> 00:10:45.865
<v Speaker 1>a security layer, not replace

00:10:46.025 --> 00:10:47.945
<v Speaker 1>all the usual ones that Linux offers.

00:10:49.360 --> 00:10:50.960
<v Speaker 0>Okay. Awesome. Thanks.

00:10:51.760 --> 00:10:54.000
<v Speaker 0>Alright. Let's click on this quick start gate.

00:10:54.000 --> 00:10:56.160
<v Speaker 0>Think we grabbed the bang and erase, so

00:10:56.160 --> 00:10:58.240
<v Speaker 0>we can skip over that. We also need

00:10:58.240 --> 00:11:00.480
<v Speaker 0>to make sure that we have KVM available

00:11:00.480 --> 00:11:02.320
<v Speaker 0>on our kernel.

00:11:02.480 --> 00:11:02.960
<v Speaker 0>Alright.

00:11:05.285 --> 00:11:07.365
<v Speaker 0>Let's just run a quick update first.

00:11:13.125 --> 00:11:13.845
<v Speaker 0>Let's see.

00:11:21.570 --> 00:11:23.810
<v Speaker 0>Linux tools KVM.

00:11:26.370 --> 00:11:27.490
<v Speaker 0>There's some modules.

00:11:32.605 --> 00:11:34.685
<v Speaker 0>Yeah. Let's try the Linux Toast KVM. I

00:11:34.685 --> 00:11:36.125
<v Speaker 0>don't suppose either of you know if that's

00:11:36.125 --> 00:11:37.565
<v Speaker 0>correct before I start.

00:11:39.325 --> 00:11:40.845
<v Speaker 0>Yeah. I'm sure it'll be okay.

00:11:44.205 --> 00:11:46.125
<v Speaker 0>That was a nervous confidence in my voice,

00:11:46.125 --> 00:11:48.730
<v Speaker 0>but I'm sure it'll be it'll be fine.

00:11:52.010 --> 00:11:53.770
<v Speaker 0>It's added to service.

00:11:55.850 --> 00:11:58.649
<v Speaker 0>What's

00:11:58.649 --> 00:11:59.130
<v Speaker 0>it called?

00:11:59.655 --> 00:12:02.455
<v Speaker 0>Okay. I think you can just check for

00:12:02.455 --> 00:12:04.615
<v Speaker 2>the dev k, you know, file descriptor.

00:12:08.535 --> 00:12:09.095
<v Speaker 0>Yep.

00:12:09.575 --> 00:12:11.175
<v Speaker 0>So that's what that's what we need to

00:12:11.175 --> 00:12:11.655
<v Speaker 0>see. Right?

00:12:12.320 --> 00:12:13.040
<v Speaker 0>Yep.

00:12:13.200 --> 00:12:13.840
<v Speaker 0>Okay.

00:12:17.280 --> 00:12:18.720
<v Speaker 0>Yeah. Okay. Nice.

00:12:20.080 --> 00:12:21.360
<v Speaker 0>We've got the binary

00:12:21.520 --> 00:12:23.440
<v Speaker 0>and now we can

00:12:24.895 --> 00:12:27.855
<v Speaker 1>are the access access settings correct for for

00:12:27.855 --> 00:12:30.335
<v Speaker 1>the I think for the KPM?

00:12:30.495 --> 00:12:32.495
<v Speaker 1>I think there was a step to

00:12:33.935 --> 00:12:35.935
<v Speaker 2>David is running as a route. So Yeah.

00:12:35.935 --> 00:12:37.775
<v Speaker 0>I'm running as route. So I

00:12:38.654 --> 00:12:40.415
<v Speaker 0>just assumed I'd be able to

00:12:40.870 --> 00:12:41.829
<v Speaker 0>do anything.

00:12:42.069 --> 00:12:43.750
<v Speaker 0>Sure we'll find out pretty quickly.

00:12:44.470 --> 00:12:45.029
<v Speaker 0>Yeah.

00:12:45.990 --> 00:12:47.190
<v Speaker 0>Okay. So,

00:12:49.509 --> 00:12:51.110
<v Speaker 0>let me try and understand

00:12:52.775 --> 00:12:54.375
<v Speaker 0>what's going on here. So we have to

00:12:54.375 --> 00:12:57.095
<v Speaker 0>run. Is the Firecracker binary going to run

00:12:57.095 --> 00:12:58.775
<v Speaker 0>some sort of daemon process that runs on

00:12:58.775 --> 00:13:00.935
<v Speaker 0>the host? That's kinda what I'm guessing here

00:13:00.935 --> 00:13:03.255
<v Speaker 0>by the fact that it's gonna create a

00:13:03.255 --> 00:13:04.695
<v Speaker 0>socket for us to communicate with.

00:13:06.230 --> 00:13:08.390
<v Speaker 0>Yes. I see you nodding. Okay.

00:13:10.150 --> 00:13:11.270
<v Speaker 2>Yeah. Exactly.

00:13:12.550 --> 00:13:15.350
<v Speaker 2>Whenever you want to start a Firecracker

00:13:15.670 --> 00:13:18.935
<v Speaker 2>instance, you first need to run that

00:13:19.415 --> 00:13:22.455
<v Speaker 2>command line that that command there, which says

00:13:22.455 --> 00:13:24.775
<v Speaker 2>Firecracker dash dash API sock.

00:13:25.415 --> 00:13:28.135
<v Speaker 2>The point there is to create an UDS

00:13:28.135 --> 00:13:28.935
<v Speaker 2>socket,

00:13:29.175 --> 00:13:31.175
<v Speaker 2>which is used to

00:13:31.860 --> 00:13:34.500
<v Speaker 2>instruct that Firecracker instance to,

00:13:35.300 --> 00:13:36.260
<v Speaker 2>for example,

00:13:36.740 --> 00:13:38.500
<v Speaker 2>set the number of ECUs,

00:13:38.740 --> 00:13:40.980
<v Speaker 2>set the amount of memory for your micro

00:13:40.980 --> 00:13:43.860
<v Speaker 2>VM, and all the all the properties that

00:13:43.860 --> 00:13:45.620
<v Speaker 2>you may want to put into for that

00:13:45.620 --> 00:13:47.060
<v Speaker 2>micro VM to run.

00:13:49.015 --> 00:13:50.455
<v Speaker 2>So now there's

00:13:51.095 --> 00:13:52.615
<v Speaker 2>there's an extra step that you need to

00:13:52.615 --> 00:13:54.455
<v Speaker 2>do. You need to launch another terminal,

00:13:54.615 --> 00:13:58.055
<v Speaker 2>or perhaps you can launch this next TMX

00:13:58.055 --> 00:13:59.175
<v Speaker 2>session and

00:13:59.495 --> 00:14:00.214
<v Speaker 2>have

00:14:01.550 --> 00:14:03.149
<v Speaker 0>Yeah. I know those terminals. Okay. We'll just

00:14:03.149 --> 00:14:04.910
<v Speaker 0>leave that that process running.

00:14:05.630 --> 00:14:07.710
<v Speaker 0>Yeah. And we'll pop over here.

00:14:09.390 --> 00:14:12.190
<v Speaker 1>Something that may not be super obvious, the

00:14:12.190 --> 00:14:13.230
<v Speaker 1>the general

00:14:13.709 --> 00:14:15.630
<v Speaker 1>approach that we have is that there's one

00:14:15.630 --> 00:14:16.750
<v Speaker 1>Firecracker process

00:14:17.175 --> 00:14:20.215
<v Speaker 1>per VM. So there's not a single control

00:14:20.215 --> 00:14:21.735
<v Speaker 1>process for all of them.

00:14:22.215 --> 00:14:24.135
<v Speaker 1>Kind of part of the security architecture, there's

00:14:24.135 --> 00:14:26.375
<v Speaker 1>a one to one mapping. Oh, nice. And

00:14:26.375 --> 00:14:28.855
<v Speaker 1>all of all of the vCPU threads are

00:14:28.855 --> 00:14:29.255
<v Speaker 1>basically

00:14:29.760 --> 00:14:31.360
<v Speaker 1>threads within that process.

00:14:32.640 --> 00:14:35.520
<v Speaker 0>Okay. So does that mean that the API

00:14:35.520 --> 00:14:37.760
<v Speaker 0>sock that we've actually specified here is kind

00:14:37.760 --> 00:14:39.120
<v Speaker 0>of arbitrary, and I would just create a

00:14:39.120 --> 00:14:40.720
<v Speaker 0>new socket for each of the virtual machines.

00:14:40.720 --> 00:14:42.640
<v Speaker 0>Right? Got it. Yeah. Yeah. Yeah. Got it.

00:14:42.640 --> 00:14:43.120
<v Speaker 1>Like

00:14:43.520 --> 00:14:45.345
<v Speaker 1>a thousand VMs, you only you have a

00:14:45.345 --> 00:14:47.105
<v Speaker 1>thousand of these to talk to.

00:14:49.584 --> 00:14:51.904
<v Speaker 0>Cool. I don't I mean, if if we're

00:14:51.904 --> 00:14:53.185
<v Speaker 0>feeling brave, we can spin up a thousand

00:14:53.185 --> 00:14:55.105
<v Speaker 0>VMs on this. Well, sure. But maybe not

00:14:55.105 --> 00:14:57.520
<v Speaker 0>necessary just now. I think I did throw

00:14:57.520 --> 00:14:59.520
<v Speaker 0>some sizable hardware at it actually.

00:15:01.200 --> 00:15:04.400
<v Speaker 0>Yeah. We've got 64 cores and 300 250

00:15:04.400 --> 00:15:06.320
<v Speaker 0>gig of RAM. We can run a few.

00:15:07.840 --> 00:15:09.040
<v Speaker 0>Alright. So Actually

00:15:09.955 --> 00:15:12.915
<v Speaker 2>actually, it depends on what you run inside

00:15:12.915 --> 00:15:14.035
<v Speaker 2>of micro v m.

00:15:14.675 --> 00:15:17.154
<v Speaker 2>If you don't run a lot of user

00:15:17.154 --> 00:15:18.995
<v Speaker 2>space processes inside of micro v m, you

00:15:18.995 --> 00:15:21.875
<v Speaker 2>can launch a fairly large number of micro

00:15:21.875 --> 00:15:22.835
<v Speaker 2>v ms

00:15:23.540 --> 00:15:25.860
<v Speaker 2>Because the memory is not allocated

00:15:26.500 --> 00:15:27.860
<v Speaker 2>before startup,

00:15:28.660 --> 00:15:31.700
<v Speaker 2>each page fault allocates a small chunk of

00:15:31.700 --> 00:15:34.820
<v Speaker 2>memory, which is added for that Firecracker process.

00:15:35.460 --> 00:15:35.940
<v Speaker 0>Alright.

00:15:37.635 --> 00:15:40.035
<v Speaker 0>Okay. So we have our second shell.

00:15:41.075 --> 00:15:42.915
<v Speaker 0>Can I just copy and paste this? No.

00:15:44.835 --> 00:15:47.715
<v Speaker 2>You skipped a step which says that you

00:15:47.715 --> 00:15:51.555
<v Speaker 2>should download a kernel and root file system.

00:15:52.115 --> 00:15:53.235
<v Speaker 0>Yep. You're right.

00:15:54.540 --> 00:15:55.740
<v Speaker 0>Download these.

00:15:57.340 --> 00:15:59.980
<v Speaker 2>You're running a Next 86 machine. Right? You

00:15:59.980 --> 00:16:02.860
<v Speaker 2>should be clicking. Yep. Those two.

00:16:06.380 --> 00:16:08.060
<v Speaker 0>Okay. FSL.

00:16:09.515 --> 00:16:11.275
<v Speaker 0>This is our kernel

00:16:13.355 --> 00:16:16.235
<v Speaker 0>and we also need our Rufus.

00:16:19.675 --> 00:16:20.795
<v Speaker 0>So I'm assuming these

00:16:21.275 --> 00:16:23.115
<v Speaker 0>this this kernel and Rufus that I've got

00:16:23.115 --> 00:16:25.115
<v Speaker 0>here are really just for kind of

00:16:25.890 --> 00:16:27.490
<v Speaker 0>playing around purposes

00:16:28.530 --> 00:16:30.610
<v Speaker 0>rather than something I would

00:16:32.450 --> 00:16:34.930
<v Speaker 0>actually run. I think these are for,

00:16:35.650 --> 00:16:38.095
<v Speaker 1>yeah, the for our guy for the quick

00:16:38.095 --> 00:16:39.935
<v Speaker 1>start guide, and Yeah. They may be used

00:16:39.935 --> 00:16:41.695
<v Speaker 1>in some of the tests as well. This

00:16:41.695 --> 00:16:43.375
<v Speaker 1>is one area where we're working on now.

00:16:43.375 --> 00:16:45.615
<v Speaker 1>We need to get a a more kind

00:16:45.615 --> 00:16:47.135
<v Speaker 1>of a comprehensive

00:16:47.215 --> 00:16:49.215
<v Speaker 1>method of of posting

00:16:49.615 --> 00:16:50.575
<v Speaker 1>test resources

00:16:51.160 --> 00:16:53.320
<v Speaker 1>because they're starting to get more combinations of

00:16:53.320 --> 00:16:55.240
<v Speaker 1>test cases. But, yeah, I think right right

00:16:55.240 --> 00:16:57.720
<v Speaker 1>now, these these will do. Is there tooling

00:16:57.720 --> 00:17:00.200
<v Speaker 0>available for people that wanna build their own,

00:17:00.200 --> 00:17:02.440
<v Speaker 0>you know, kernel and root file systems?

00:17:03.320 --> 00:17:05.240
<v Speaker 0>Is that difficult for people to do or

00:17:05.240 --> 00:17:08.174
<v Speaker 0>is it just cumbersome but trivial?

00:17:11.855 --> 00:17:13.454
<v Speaker 2>For for kernels,

00:17:13.454 --> 00:17:15.454
<v Speaker 2>it's pretty straightforward

00:17:15.535 --> 00:17:19.055
<v Speaker 2>as long as you take a look at

00:17:18.030 --> 00:17:21.630
<v Speaker 2>our kernel config file that we we host

00:17:21.630 --> 00:17:23.549
<v Speaker 2>on the on the repository.

00:17:24.510 --> 00:17:26.830
<v Speaker 2>For the time system, it's a bit more

00:17:26.830 --> 00:17:27.630
<v Speaker 2>complicated.

00:17:27.710 --> 00:17:30.510
<v Speaker 2>We do point at the guide in our

00:17:30.910 --> 00:17:32.985
<v Speaker 2>in our quick start guide somewhere.

00:17:35.145 --> 00:17:35.945
<v Speaker 1>But

00:17:36.745 --> 00:17:37.625
<v Speaker 2>it's

00:17:37.625 --> 00:17:39.865
<v Speaker 2>it's it's not completely

00:17:41.465 --> 00:17:43.385
<v Speaker 2>it's it's not a nice root file system

00:17:43.385 --> 00:17:44.665
<v Speaker 2>that you can, for example,

00:17:47.130 --> 00:17:50.330
<v Speaker 2>use to store kernel modules. It's a simple

00:17:50.330 --> 00:17:52.169
<v Speaker 2>system that you

00:17:52.170 --> 00:17:55.130
<v Speaker 2>build based upon a container,

00:17:56.410 --> 00:17:57.930
<v Speaker 2>and then you can use it to start

00:17:57.930 --> 00:17:58.810
<v Speaker 2>up micro VMs.

00:17:59.475 --> 00:18:02.515
<v Speaker 2>So to answer your question, we as I

00:18:02.515 --> 00:18:04.274
<v Speaker 2>just said, we are working on this,

00:18:05.155 --> 00:18:07.475
<v Speaker 2>and I think that pretty soon we will

00:18:07.475 --> 00:18:08.835
<v Speaker 2>be providing

00:18:09.395 --> 00:18:12.195
<v Speaker 2>a nicer method of of building root file

00:18:12.195 --> 00:18:12.515
<v Speaker 2>systems.

00:18:13.180 --> 00:18:14.860
<v Speaker 0>I mean, would it be possible to use

00:18:14.860 --> 00:18:17.260
<v Speaker 0>container images as the root file system and

00:18:17.260 --> 00:18:18.700
<v Speaker 0>inject the kernel?

00:18:19.980 --> 00:18:21.980
<v Speaker 2>That's exactly what we do, actually. Alright.

00:18:23.580 --> 00:18:25.100
<v Speaker 2>So, for example,

00:18:25.260 --> 00:18:28.105
<v Speaker 2>you can spin up a an I find

00:18:28.105 --> 00:18:29.225
<v Speaker 2>container,

00:18:29.465 --> 00:18:31.784
<v Speaker 2>install all the packages that you want,

00:18:32.424 --> 00:18:35.144
<v Speaker 2>and then simply dump that that

00:18:35.545 --> 00:18:36.904
<v Speaker 2>request to a

00:18:38.265 --> 00:18:38.585
<v Speaker 2>Alright.

00:18:40.345 --> 00:18:41.705
<v Speaker 0>Alright. Well, let me

00:18:42.130 --> 00:18:43.649
<v Speaker 0>copy this.

00:18:43.809 --> 00:18:45.649
<v Speaker 0>It's gonna be an ISH

00:18:49.490 --> 00:18:52.129
<v Speaker 0>and a nice friendly bang.

00:18:52.850 --> 00:18:55.490
<v Speaker 0>And I called this kernel

00:18:57.414 --> 00:19:01.975
<v Speaker 0>and I called this riff.

00:19:01.975 --> 00:19:03.894
<v Speaker 0>And then we have a image

00:19:04.294 --> 00:19:05.894
<v Speaker 0>bucket URL

00:19:06.054 --> 00:19:07.654
<v Speaker 0>then does a detection

00:19:08.215 --> 00:19:09.014
<v Speaker 0>of

00:19:12.800 --> 00:19:15.040
<v Speaker 0>is this trying to download the root fail

00:19:15.040 --> 00:19:16.240
<v Speaker 0>system in kernel?

00:19:16.720 --> 00:19:18.799
<v Speaker 2>Yeah. It actually downloads them.

00:19:19.120 --> 00:19:20.559
<v Speaker 2>Yeah. Alright. Okay.

00:19:22.960 --> 00:19:25.039
<v Speaker 0>So we could just save this.

00:19:25.840 --> 00:19:27.295
<v Speaker 1>Yeah. I I don't think we need that.

00:19:27.295 --> 00:19:29.615
<v Speaker 1>Alright? We Yeah. We don't need that.

00:19:31.055 --> 00:19:33.695
<v Speaker 0>Alright. Okay. Because we download it manually, we

00:19:33.695 --> 00:19:35.295
<v Speaker 0>can okay. Got it. Yeah. The

00:19:35.695 --> 00:19:38.175
<v Speaker 2>second step actually uses them.

00:19:41.330 --> 00:19:43.570
<v Speaker 0>Okay. So that's it. Alright.

00:19:43.650 --> 00:19:45.010
<v Speaker 0>We'll go through this in a second. Let

00:19:45.010 --> 00:19:46.529
<v Speaker 0>me paste this in.

00:19:48.130 --> 00:19:49.730
<v Speaker 0>I've already got a main. I'm gonna be

00:19:49.730 --> 00:19:50.770
<v Speaker 0>horrible and call it main too.

00:19:55.975 --> 00:19:56.615
<v Speaker 0>Okay.

00:19:58.455 --> 00:20:00.375
<v Speaker 0>So what we have here is we're working

00:20:00.375 --> 00:20:01.815
<v Speaker 0>at the architecture again.

00:20:02.695 --> 00:20:04.855
<v Speaker 0>I need to replace this with

00:20:06.535 --> 00:20:07.655
<v Speaker 0>kernel

00:20:10.340 --> 00:20:11.139
<v Speaker 0>And

00:20:12.980 --> 00:20:14.899
<v Speaker 0>because we already know the architecture, can just

00:20:14.899 --> 00:20:16.259
<v Speaker 0>clean this up. Right? So it's a bit

00:20:16.259 --> 00:20:17.059
<v Speaker 0>easier.

00:20:18.100 --> 00:20:19.380
<v Speaker 0>Really should have used that.

00:20:22.375 --> 00:20:23.254
<v Speaker 0>There we go.

00:20:23.735 --> 00:20:25.735
<v Speaker 0>Okay. So this is curling

00:20:25.735 --> 00:20:28.695
<v Speaker 0>through Unix socket where we have our Firecracker

00:20:28.695 --> 00:20:29.975
<v Speaker 0>daemon process running.

00:20:31.095 --> 00:20:32.934
<v Speaker 0>It is using a put.

00:20:33.414 --> 00:20:35.815
<v Speaker 0>Okay. So the Firecracker daemon is exposing an

00:20:35.815 --> 00:20:36.775
<v Speaker 0>http

00:20:37.399 --> 00:20:38.759
<v Speaker 0>style API

00:20:39.000 --> 00:20:42.119
<v Speaker 0>where we can post the or put

00:20:42.440 --> 00:20:44.039
<v Speaker 0>the images into.

00:20:45.000 --> 00:20:46.120
<v Speaker 0>And then we specify

00:20:46.360 --> 00:20:48.679
<v Speaker 0>is this just a kernel bit parameters. Right?

00:20:49.240 --> 00:20:50.440
<v Speaker 2>Yep. Mhmm. Okay.

00:20:52.665 --> 00:20:54.264
<v Speaker 0>I understand some of this.

00:20:57.465 --> 00:20:58.985
<v Speaker 0>Can I just run main two?

00:21:00.105 --> 00:21:00.585
<v Speaker 2>Yep.

00:21:03.870 --> 00:21:05.789
<v Speaker 0>And we got two zero four, which is

00:21:05.790 --> 00:21:08.110
<v Speaker 0>success, no content, I believe. So

00:21:08.510 --> 00:21:09.549
<v Speaker 0>that worked?

00:21:10.270 --> 00:21:11.309
<v Speaker 2>Yes.

00:21:11.630 --> 00:21:14.110
<v Speaker 2>Now we should you should follow

00:21:14.110 --> 00:21:16.590
<v Speaker 2>the next step and set root file system.

00:21:19.145 --> 00:21:19.945
<v Speaker 0>Alright.

00:21:24.825 --> 00:21:27.784
<v Speaker 0>Fine. I started about pressing them anyway. So

00:21:28.505 --> 00:21:31.144
<v Speaker 0>we called this change to

00:21:31.225 --> 00:21:32.105
<v Speaker 0>root f s,

00:21:32.910 --> 00:21:34.910
<v Speaker 0>and we're just doing the exact same

00:21:35.310 --> 00:21:35.950
<v Speaker 0>again.

00:21:38.190 --> 00:21:40.669
<v Speaker 0>We got a two zero four, that's good.

00:21:42.430 --> 00:21:44.670
<v Speaker 0>And then this starts the machine, so there's

00:21:44.670 --> 00:21:46.830
<v Speaker 0>some sort of actions endpoint where we can

00:21:46.830 --> 00:21:48.644
<v Speaker 0>send commands to it.

00:21:50.804 --> 00:21:51.524
<v Speaker 0>Alright.

00:21:51.605 --> 00:21:53.605
<v Speaker 0>I'm not gonna bother saving this one to

00:21:53.605 --> 00:21:54.164
<v Speaker 0>the script.

00:21:54.485 --> 00:21:56.404
<v Speaker 0>This is no local fail.

00:21:56.485 --> 00:21:57.204
<v Speaker 0>Yep.

00:21:59.125 --> 00:22:00.804
<v Speaker 0>Done. They have a VM?

00:22:02.320 --> 00:22:02.959
<v Speaker 2>Yes.

00:22:04.320 --> 00:22:06.320
<v Speaker 2>But you need to switch back to the

00:22:06.320 --> 00:22:07.199
<v Speaker 2>other terminal.

00:22:09.919 --> 00:22:11.279
<v Speaker 0>Oh, look at that. So

00:22:12.879 --> 00:22:15.200
<v Speaker 2>the reason why you had to switch back

00:22:15.200 --> 00:22:16.559
<v Speaker 2>to the other terminal

00:22:16.559 --> 00:22:19.945
<v Speaker 2>was that because you launched the initial Firecracker

00:22:19.945 --> 00:22:21.865
<v Speaker 2>process in this terminal here,

00:22:22.105 --> 00:22:24.905
<v Speaker 2>the standard DNS, standard out handlers

00:22:24.905 --> 00:22:26.825
<v Speaker 2>are still kept by this

00:22:27.305 --> 00:22:28.505
<v Speaker 2>terminal instance.

00:22:30.265 --> 00:22:33.050
<v Speaker 0>Okay. So so this is the serial console

00:22:33.050 --> 00:22:35.370
<v Speaker 1>of that machine, basically. Yeah.

00:22:36.810 --> 00:22:38.490
<v Speaker 0>I'm assuming as there are flags I can

00:22:38.490 --> 00:22:40.890
<v Speaker 0>pass into that initial Firecracker call to just

00:22:40.890 --> 00:22:43.450
<v Speaker 0>have it run detached there in the background?

00:22:46.294 --> 00:22:48.455
<v Speaker 2>If you use the jailer, yes. You can

00:22:48.455 --> 00:22:49.974
<v Speaker 2>detach it and

00:22:50.455 --> 00:22:53.254
<v Speaker 2>output the serial console to death mode, for

00:22:53.254 --> 00:22:53.815
<v Speaker 2>example.

00:22:54.695 --> 00:22:57.975
<v Speaker 0>Okay. I'm assuming I can log in as

00:22:57.070 --> 00:22:58.750
<v Speaker 0>Rut. Is that the next step in the

00:22:58.750 --> 00:23:01.070
<v Speaker 0>docs? Should I pay attention?

00:23:01.470 --> 00:23:02.429
<v Speaker 0>No. Okay.

00:23:03.470 --> 00:23:05.630
<v Speaker 1>So what's worth mentioning is that, you know,

00:23:05.630 --> 00:23:06.910
<v Speaker 1>there's nothing

00:23:07.070 --> 00:23:09.710
<v Speaker 1>Firecracker is we're we try to make it

00:23:09.904 --> 00:23:11.745
<v Speaker 1>kind of just behave as a regular process

00:23:11.745 --> 00:23:13.584
<v Speaker 1>so you can do all the regular things.

00:23:13.825 --> 00:23:15.664
<v Speaker 1>And in this instance, you know, I think

00:23:15.664 --> 00:23:17.505
<v Speaker 1>the the dealer does more fancy things to

00:23:17.505 --> 00:23:19.024
<v Speaker 1>start it in the background. But

00:23:19.424 --> 00:23:21.585
<v Speaker 1>in this case, it's just using

00:23:21.585 --> 00:23:23.985
<v Speaker 1>share the input and output connected to the

00:23:23.985 --> 00:23:24.304
<v Speaker 1>terminal.

00:23:25.279 --> 00:23:26.559
<v Speaker 1>So that's it.

00:23:27.600 --> 00:23:29.440
<v Speaker 0>K. If I type password, will it log

00:23:29.440 --> 00:23:30.320
<v Speaker 0>me in, or is it

00:23:31.200 --> 00:23:34.960
<v Speaker 2>It's Root. Root. That that was guess too.

00:23:35.039 --> 00:23:35.679
<v Speaker 0>Okay.

00:23:37.279 --> 00:23:39.679
<v Speaker 0>And this is just Alpine Linux?

00:23:41.245 --> 00:23:41.884
<v Speaker 2>Yeah.

00:23:42.285 --> 00:23:45.565
<v Speaker 2>Yeah. Yeah. You you don't have a network

00:23:45.565 --> 00:23:48.525
<v Speaker 2>interface here set up. You need to follow

00:23:48.525 --> 00:23:49.965
<v Speaker 2>another guide if you want to have a

00:23:49.965 --> 00:23:51.485
<v Speaker 2>network interface set up.

00:23:52.765 --> 00:23:55.405
<v Speaker 0>Okay. But I do have a

00:23:55.850 --> 00:23:58.890
<v Speaker 0>full Alpine Linux virtual machine running on my

00:23:58.890 --> 00:23:59.850
<v Speaker 0>bare metal.

00:24:00.890 --> 00:24:02.409
<v Speaker 0>So that's pretty cool.

00:24:03.610 --> 00:24:04.490
<v Speaker 0>Awesome.

00:24:05.930 --> 00:24:08.490
<v Speaker 0>So out of the box then, Firecracker

00:24:09.655 --> 00:24:11.655
<v Speaker 0>doesn't ship with any networking, so I'd have

00:24:11.655 --> 00:24:12.855
<v Speaker 0>to configure this device to be able to

00:24:12.855 --> 00:24:13.975
<v Speaker 0>connect to the network.

00:24:14.295 --> 00:24:17.015
<v Speaker 0>Does Firecracker expose any hooks or extension points

00:24:17.015 --> 00:24:18.215
<v Speaker 0>for, like,

00:24:18.855 --> 00:24:20.615
<v Speaker 0>desks and storage or

00:24:21.095 --> 00:24:22.535
<v Speaker 0>local mounts or anything like that?

00:24:23.810 --> 00:24:25.490
<v Speaker 1>No. No. So so I I wanted to

00:24:25.490 --> 00:24:27.409
<v Speaker 1>call out two things. So first of all,

00:24:28.130 --> 00:24:30.130
<v Speaker 1>it's it it'll be worth looking at the

00:24:30.130 --> 00:24:32.370
<v Speaker 1>memory usage or the Firecracker process

00:24:33.330 --> 00:24:35.730
<v Speaker 1>now and maybe after after we do something

00:24:35.730 --> 00:24:37.795
<v Speaker 1>in this Alpine. And then the other one

00:24:37.795 --> 00:24:38.515
<v Speaker 1>is

00:24:39.715 --> 00:24:42.115
<v Speaker 1>by itself, Firecracker just kind of gives you

00:24:42.515 --> 00:24:44.595
<v Speaker 1>a a number of commands that you can

00:24:44.595 --> 00:24:47.155
<v Speaker 1>then use to create tap devices and

00:24:47.315 --> 00:24:49.630
<v Speaker 1>those connect those to a network and that

00:24:49.630 --> 00:24:52.270
<v Speaker 1>you can use to map block devices and

00:24:52.270 --> 00:24:54.190
<v Speaker 1>then mount those inside the guest.

00:24:54.590 --> 00:24:55.309
<v Speaker 1>So

00:24:56.350 --> 00:24:57.710
<v Speaker 1>we're we're basically

00:24:59.470 --> 00:25:01.550
<v Speaker 1>the the the whole idea is to have

00:25:01.550 --> 00:25:03.710
<v Speaker 1>a very low level I guess, in in

00:25:03.710 --> 00:25:06.055
<v Speaker 1>some term, low level API that that

00:25:06.455 --> 00:25:09.735
<v Speaker 1>just hands over all the all the, let's

00:25:09.735 --> 00:25:12.695
<v Speaker 1>say, the decisions to the local orchestrator on

00:25:12.695 --> 00:25:14.775
<v Speaker 1>the host. Now there are there are high

00:25:14.775 --> 00:25:16.855
<v Speaker 1>level libraries. There is a Go SDK,

00:25:17.690 --> 00:25:18.809
<v Speaker 1>and there's a

00:25:19.450 --> 00:25:21.450
<v Speaker 1>integration with Firecracker container d to kind of

00:25:21.450 --> 00:25:23.610
<v Speaker 1>move things up the stack. But at these

00:25:23.770 --> 00:25:25.530
<v Speaker 1>at this level, it's just connecting things to

00:25:25.530 --> 00:25:26.730
<v Speaker 1>the HTTP API,

00:25:26.970 --> 00:25:29.130
<v Speaker 1>and we'll have to create those resources separately.

00:25:29.130 --> 00:25:30.330
<v Speaker 1>So, like, if we want a network, we

00:25:30.330 --> 00:25:31.370
<v Speaker 1>need to create a tap device.

00:25:31.905 --> 00:25:33.665
<v Speaker 1>If we want a file system, need to

00:25:33.665 --> 00:25:35.825
<v Speaker 1>create a file and format it as a

00:25:35.825 --> 00:25:38.305
<v Speaker 1>file system and then and map it to

00:25:38.305 --> 00:25:40.865
<v Speaker 1>the to the Firecracker process.

00:25:42.065 --> 00:25:44.065
<v Speaker 0>K. Yeah. That makes a lot of sense.

00:25:44.330 --> 00:25:45.049
<v Speaker 0>Definitely.

00:25:46.010 --> 00:25:46.730
<v Speaker 0>Alright.

00:25:47.130 --> 00:25:48.890
<v Speaker 0>Let's should I go back to our our

00:25:48.890 --> 00:25:49.610
<v Speaker 0>docs?

00:25:55.130 --> 00:25:56.970
<v Speaker 0>What this is saying here?

00:25:58.765 --> 00:26:00.365
<v Speaker 0>Is that we have our TTY if I

00:26:00.365 --> 00:26:02.525
<v Speaker 0>take this login and password route and route.

00:26:03.005 --> 00:26:05.005
<v Speaker 0>When you're done issuing a reboot command and

00:26:05.005 --> 00:26:07.804
<v Speaker 0>say the guest will actually shut down Firecracker.

00:26:08.285 --> 00:26:08.925
<v Speaker 0>Okay.

00:26:11.020 --> 00:26:14.059
<v Speaker 0>And by default, our Firecracker VM gets one

00:26:14.059 --> 00:26:16.700
<v Speaker 0>virtualized CPU and a 28

00:26:16.700 --> 00:26:17.820
<v Speaker 0>meg of

00:26:18.059 --> 00:26:18.860
<v Speaker 0>RAM.

00:26:20.380 --> 00:26:20.940
<v Speaker 0>Cool.

00:26:22.059 --> 00:26:23.500
<v Speaker 0>And so what was it you said there,

00:26:23.500 --> 00:26:24.860
<v Speaker 0>Roger? You wanted us to look at the

00:26:24.860 --> 00:26:26.620
<v Speaker 0>memory consumption of the process?

00:26:30.355 --> 00:26:30.994
<v Speaker 0>Oh,

00:26:31.315 --> 00:26:33.234
<v Speaker 0>I think you've messaged yourself.

00:26:34.755 --> 00:26:36.434
<v Speaker 1>It should be around less than what's actually

00:26:36.434 --> 00:26:37.394
<v Speaker 1>configured

00:26:37.794 --> 00:26:40.210
<v Speaker 1>due to the mechanism that Gabriel mentioned below.

00:26:40.210 --> 00:26:42.450
<v Speaker 1>It basically only demand falls on the the

00:26:42.450 --> 00:26:43.489
<v Speaker 1>needed pages.

00:26:47.330 --> 00:26:48.049
<v Speaker 0>Okay.

00:26:49.570 --> 00:26:51.409
<v Speaker 0>So what's our next step here then? Do

00:26:51.409 --> 00:26:53.570
<v Speaker 0>we is there more I think

00:26:54.274 --> 00:26:56.835
<v Speaker 0>that's just the building Firecracker. Right? Okay.

00:26:57.794 --> 00:26:59.235
<v Speaker 0>So do we want to do anything with

00:26:59.235 --> 00:27:01.794
<v Speaker 0>this Alpine virtual machine? Should we move on

00:27:01.794 --> 00:27:02.594
<v Speaker 0>to a different

00:27:02.835 --> 00:27:03.794
<v Speaker 0>tutorial?

00:27:03.875 --> 00:27:04.995
<v Speaker 0>What do you think is best?

00:27:07.370 --> 00:27:09.450
<v Speaker 1>So there's kind of two ways we can

00:27:09.450 --> 00:27:11.530
<v Speaker 1>go. We can go through the network and

00:27:11.530 --> 00:27:13.450
<v Speaker 1>the block device tutorial to give it a

00:27:13.450 --> 00:27:14.970
<v Speaker 1>network and the block device and do things

00:27:14.970 --> 00:27:15.930
<v Speaker 1>with it. Mhmm.

00:27:16.250 --> 00:27:18.890
<v Speaker 1>Mhmm. We I guess we can also kind

00:27:18.890 --> 00:27:20.250
<v Speaker 1>of skip to

00:27:20.875 --> 00:27:24.155
<v Speaker 1>Gabriel's demo. He's using the the Go SDK,

00:27:24.155 --> 00:27:24.554
<v Speaker 1>right,

00:27:25.195 --> 00:27:27.914
<v Speaker 1>to to show a snapshot use case.

00:27:29.115 --> 00:27:29.754
<v Speaker 0>Okay.

00:27:30.075 --> 00:27:32.155
<v Speaker 0>So there's quite a lot in the documentation

00:27:32.155 --> 00:27:33.114
<v Speaker 0>page here.

00:27:33.595 --> 00:27:34.715
<v Speaker 0>So Yeah.

00:27:35.115 --> 00:27:37.090
<v Speaker 1>The maybe I can talk through a few

00:27:37.090 --> 00:27:40.210
<v Speaker 1>other things. So the the thing that's helpful,

00:27:40.210 --> 00:27:41.570
<v Speaker 1>just to kinda explain the

00:27:42.049 --> 00:27:42.529
<v Speaker 1>That

00:27:43.010 --> 00:27:44.049
<v Speaker 0>that would be great.

00:27:45.090 --> 00:27:45.730
<v Speaker 1>So the

00:27:46.450 --> 00:27:48.450
<v Speaker 1>as you mentioned with the network, the

00:27:49.975 --> 00:27:51.735
<v Speaker 1>we have kind of a tenant for for

00:27:51.735 --> 00:27:54.375
<v Speaker 1>being very minimal and only implementing the very

00:27:54.375 --> 00:27:56.695
<v Speaker 1>basic things we need. And for example, if

00:27:56.695 --> 00:27:59.414
<v Speaker 1>you look at most container workloads and most

00:27:59.495 --> 00:28:01.174
<v Speaker 1>things like function, like, function,

00:28:02.120 --> 00:28:04.040
<v Speaker 1>They just kind of have used the network

00:28:04.040 --> 00:28:06.600
<v Speaker 1>mostly, and sometimes they use the disk.

00:28:07.000 --> 00:28:09.640
<v Speaker 1>And so we only implemented those two devices.

00:28:09.640 --> 00:28:11.560
<v Speaker 1>And then we right now, there's very simple

00:28:11.560 --> 00:28:13.000
<v Speaker 1>back end. So for network,

00:28:13.320 --> 00:28:15.240
<v Speaker 1>it's just a Linux tap device, and you

00:28:15.240 --> 00:28:17.240
<v Speaker 1>need to precreate that tap interface

00:28:17.485 --> 00:28:19.325
<v Speaker 1>and wire it up, you know, as you

00:28:19.325 --> 00:28:20.604
<v Speaker 1>wish on your host.

00:28:22.524 --> 00:28:23.244
<v Speaker 1>And then

00:28:23.565 --> 00:28:24.524
<v Speaker 1>and then

00:28:25.565 --> 00:28:28.125
<v Speaker 1>you'll have that network interface into the guest.

00:28:28.125 --> 00:28:29.404
<v Speaker 1>You can have as many of these as

00:28:29.404 --> 00:28:31.880
<v Speaker 1>you want, and then you you can create

00:28:31.880 --> 00:28:34.600
<v Speaker 1>files and format them as as as file

00:28:34.600 --> 00:28:35.240
<v Speaker 1>systems.

00:28:35.640 --> 00:28:37.400
<v Speaker 1>And, again, you can map those as block

00:28:37.400 --> 00:28:39.879
<v Speaker 1>devices to to a Firecracker process,

00:28:40.040 --> 00:28:41.800
<v Speaker 1>and they'll show up as drives in the

00:28:41.800 --> 00:28:43.240
<v Speaker 1>in the guest that you must then mount.

00:28:44.615 --> 00:28:47.095
<v Speaker 1>Obviously, in, you know, in in real use

00:28:47.095 --> 00:28:48.455
<v Speaker 1>cases, all of these are

00:28:49.735 --> 00:28:52.214
<v Speaker 1>are done once and then, you know,

00:28:52.855 --> 00:28:54.614
<v Speaker 1>happen every time. Yep.

00:28:56.375 --> 00:28:57.975
<v Speaker 1>And then kind of you this is the

00:28:57.975 --> 00:29:00.730
<v Speaker 1>primitive you use to set up your

00:29:01.930 --> 00:29:03.690
<v Speaker 1>for example, if you wanna use a container

00:29:03.690 --> 00:29:04.570
<v Speaker 1>ecosystem,

00:29:05.050 --> 00:29:07.770
<v Speaker 1>this would somehow be equivalent to run c.

00:29:07.770 --> 00:29:09.210
<v Speaker 1>So it's, like, even under

00:29:09.450 --> 00:29:11.050
<v Speaker 1>the kind of container d layer.

00:29:11.615 --> 00:29:14.095
<v Speaker 1>And, hopefully, one of the things we're working

00:29:14.095 --> 00:29:16.255
<v Speaker 1>towards is to make this seamless. So, like,

00:29:16.255 --> 00:29:17.855
<v Speaker 1>if you wanna use it with containers,

00:29:17.935 --> 00:29:19.535
<v Speaker 1>you'll never be at this level where we're

00:29:19.535 --> 00:29:22.095
<v Speaker 1>at now. You'll you'll kind of operate from

00:29:22.095 --> 00:29:24.730
<v Speaker 1>from the container d level. There's also a

00:29:24.730 --> 00:29:26.169
<v Speaker 1>Firecracker tool

00:29:26.410 --> 00:29:27.690
<v Speaker 1>in the in the

00:29:28.650 --> 00:29:31.210
<v Speaker 1>in the Firecracker microvmorg,

00:29:31.210 --> 00:29:31.690
<v Speaker 1>and,

00:29:32.010 --> 00:29:34.490
<v Speaker 1>yeah, that's that's kind of the the perspective.

00:29:34.490 --> 00:29:35.210
<v Speaker 1>And so our

00:29:35.850 --> 00:29:38.650
<v Speaker 1>focus is just on getting the primitive capabilities

00:29:39.325 --> 00:29:41.005
<v Speaker 1>be really useful.

00:29:41.485 --> 00:29:43.245
<v Speaker 1>That's kind of kind of why we mentioned

00:29:43.245 --> 00:29:43.965
<v Speaker 1>memory.

00:29:44.365 --> 00:29:45.005
<v Speaker 1>The

00:29:45.485 --> 00:29:47.805
<v Speaker 1>desire is that you have basically memory over

00:29:47.805 --> 00:29:49.885
<v Speaker 1>subscription by default, which is what you have

00:29:49.885 --> 00:29:51.725
<v Speaker 1>with every every Linux process. You know, the

00:29:51.725 --> 00:29:54.410
<v Speaker 1>OS manages the memory for you. Right now,

00:29:54.410 --> 00:29:56.330
<v Speaker 1>this is half true. You we we only

00:29:56.330 --> 00:29:59.050
<v Speaker 1>demand full page memory in, but then we

00:29:59.050 --> 00:30:01.210
<v Speaker 1>never give the memory back by default.

00:30:01.450 --> 00:30:04.250
<v Speaker 1>There's a ballooning feature, which kind of

00:30:04.890 --> 00:30:07.865
<v Speaker 1>again, the the system users can use to

00:30:07.865 --> 00:30:09.625
<v Speaker 1>deflate the memory of the

00:30:10.505 --> 00:30:11.545
<v Speaker 1>of the

00:30:11.865 --> 00:30:13.385
<v Speaker 1>Firecracker VM.

00:30:13.785 --> 00:30:16.105
<v Speaker 1>And snapshotting also affects

00:30:16.105 --> 00:30:18.025
<v Speaker 1>memory utilization a lot, and we'll see that

00:30:18.025 --> 00:30:19.545
<v Speaker 1>in in Gabriel's demo.

00:30:20.980 --> 00:30:22.419
<v Speaker 1>And then the other thing is just to

00:30:22.419 --> 00:30:23.700
<v Speaker 1>to kind of get out of the way

00:30:23.700 --> 00:30:24.899
<v Speaker 1>and start very fast.

00:30:25.380 --> 00:30:26.259
<v Speaker 1>Right now,

00:30:26.580 --> 00:30:28.900
<v Speaker 1>of booting a simple OS takes a hundred

00:30:28.900 --> 00:30:30.580
<v Speaker 1>and a bit milliseconds with that kernel, and

00:30:30.580 --> 00:30:32.019
<v Speaker 1>then you're kind of in user space.

00:30:32.500 --> 00:30:34.020
<v Speaker 1>Then depending on what you do in user

00:30:34.020 --> 00:30:36.794
<v Speaker 1>space, it can take, you know, a second

00:30:36.794 --> 00:30:38.874
<v Speaker 1>or a hundred milliseconds or ten seconds.

00:30:39.115 --> 00:30:40.475
<v Speaker 0>Yep. And

00:30:41.195 --> 00:30:44.075
<v Speaker 1>snapshotting should also re resolve this by kind

00:30:44.075 --> 00:30:45.274
<v Speaker 1>of resuming

00:30:45.355 --> 00:30:47.674
<v Speaker 1>to the point where you snapshot before very

00:30:47.674 --> 00:30:47.835
<v Speaker 1>fast.

00:30:49.220 --> 00:30:50.660
<v Speaker 1>And those are kind of the two core

00:30:50.660 --> 00:30:53.780
<v Speaker 1>properties that that Firecracker is basically built to

00:30:53.780 --> 00:30:57.460
<v Speaker 1>resolve while keeping everything secure and then integrating

00:30:57.460 --> 00:30:58.900
<v Speaker 1>up the stack, which is definitely an area

00:30:58.900 --> 00:31:00.500
<v Speaker 1>we're still working with on.

00:31:02.375 --> 00:31:04.455
<v Speaker 0>Okay. I can I ask a couple can

00:31:04.455 --> 00:31:05.494
<v Speaker 0>I ask a couple?

00:31:05.735 --> 00:31:07.975
<v Speaker 0>Oh. I can hear myself. I can hear

00:31:07.975 --> 00:31:08.614
<v Speaker 0>myself.

00:31:10.855 --> 00:31:12.615
<v Speaker 0>It's weird. Oh, it's gone.

00:31:13.880 --> 00:31:15.080
<v Speaker 0>Okay.

00:31:15.880 --> 00:31:17.880
<v Speaker 0>So I'm gonna ask a couple of really

00:31:17.880 --> 00:31:21.640
<v Speaker 0>naive questions then. So if I were to

00:31:21.640 --> 00:31:22.440
<v Speaker 0>just

00:31:24.200 --> 00:31:26.040
<v Speaker 0>if I were to shut down this Firecracker

00:31:26.040 --> 00:31:28.440
<v Speaker 0>deeming that is exposing this socket here,

00:31:30.135 --> 00:31:33.015
<v Speaker 0>Everything goes away. There's there's no nothing saved.

00:31:33.015 --> 00:31:34.855
<v Speaker 0>It's completely ephemeral. It just goes away. I

00:31:34.855 --> 00:31:36.055
<v Speaker 0>spin up a new one. I get a

00:31:36.055 --> 00:31:37.815
<v Speaker 0>completely fresh Alpine Linux.

00:31:37.975 --> 00:31:38.535
<v Speaker 0>Okay.

00:31:39.335 --> 00:31:40.455
<v Speaker 0>I'm assuming

00:31:40.535 --> 00:31:43.130
<v Speaker 0>based on the kind of the socket and

00:31:43.130 --> 00:31:45.690
<v Speaker 0>HTTP API that you're showing to me that

00:31:45.690 --> 00:31:47.210
<v Speaker 0>if I just pull up the

00:31:50.169 --> 00:31:50.809
<v Speaker 0>no.

00:31:51.610 --> 00:31:54.250
<v Speaker 0>Maybe one of my weird brush main files

00:31:54.250 --> 00:31:54.570
<v Speaker 0>there.

00:31:55.325 --> 00:31:56.764
<v Speaker 0>Yeah. Here,

00:31:57.725 --> 00:31:59.805
<v Speaker 0>when we talk about the networking capabilities and

00:31:59.805 --> 00:32:01.645
<v Speaker 0>those, you know, creating desks that we can

00:32:01.645 --> 00:32:04.605
<v Speaker 0>pass in, are those just additional parameters here

00:32:04.684 --> 00:32:07.085
<v Speaker 0>on this or very similar to this?

00:32:08.740 --> 00:32:11.460
<v Speaker 1>There's a different API for every resource. There's

00:32:11.460 --> 00:32:13.700
<v Speaker 1>a file in in the docs that's kind

00:32:13.700 --> 00:32:16.419
<v Speaker 1>of generated from from our API server,

00:32:16.740 --> 00:32:18.179
<v Speaker 1>which has the full API.

00:32:18.660 --> 00:32:18.980
<v Speaker 0>Right.

00:32:20.255 --> 00:32:22.735
<v Speaker 1>I think it's it's in Swagger format, so

00:32:22.735 --> 00:32:24.575
<v Speaker 1>it should be ingestible by clients.

00:32:24.735 --> 00:32:26.575
<v Speaker 1>Some of the existing clients, I believe, are

00:32:26.575 --> 00:32:27.935
<v Speaker 1>generated from that.

00:32:30.095 --> 00:32:30.735
<v Speaker 2>Okay.

00:32:31.135 --> 00:32:33.935
<v Speaker 0>Yeah. That makes sense. Top. Sorry. Where was

00:32:33.935 --> 00:32:34.095
<v Speaker 0>it?

00:32:35.520 --> 00:32:36.480
<v Speaker 1>In the a

00:32:37.200 --> 00:32:38.480
<v Speaker 1>I might be wrong, but I think it's

00:32:38.480 --> 00:32:39.280
<v Speaker 1>there. Yeah. It's in

00:32:41.200 --> 00:32:43.920
<v Speaker 2>No. You're you're searching for the slider file.

00:32:43.920 --> 00:32:44.880
<v Speaker 2>You could just

00:32:45.760 --> 00:32:48.434
<v Speaker 2>use the GitHub feature, which says go to

00:32:48.434 --> 00:32:50.195
<v Speaker 2>file. There's a button

00:32:50.835 --> 00:32:52.195
<v Speaker 2>on your right.

00:32:54.115 --> 00:32:57.474
<v Speaker 0>Yep. Go to file. Yep. And type Swagger.

00:33:00.195 --> 00:33:01.315
<v Speaker 2>Yep. And that's the one.

00:33:02.910 --> 00:33:05.390
<v Speaker 0>Alright. So this is just a completely documented

00:33:05.470 --> 00:33:07.790
<v Speaker 0>API for that socket that has been available

00:33:07.790 --> 00:33:08.670
<v Speaker 0>to us.

00:33:10.430 --> 00:33:13.070
<v Speaker 1>Yeah. And there's a network resource there, which

00:33:13.070 --> 00:33:14.350
<v Speaker 1>has all the networking options.

00:33:15.415 --> 00:33:18.375
<v Speaker 0>Okay. You also mentioned there was a fire

00:33:18.375 --> 00:33:19.255
<v Speaker 0>CTL,

00:33:19.255 --> 00:33:21.335
<v Speaker 0>fire control, fire cuddle, like, all the different

00:33:21.335 --> 00:33:22.054
<v Speaker 0>variations.

00:33:22.215 --> 00:33:25.815
<v Speaker 0>Does that make working against that HTTP API

00:33:25.815 --> 00:33:28.455
<v Speaker 0>a lot simpler? Is that just mapping gets,

00:33:28.455 --> 00:33:31.750
<v Speaker 0>puts, deletes, etcetera, to make it feel more

00:33:31.750 --> 00:33:33.669
<v Speaker 0>like like, your control, for example?

00:33:37.030 --> 00:33:38.149
<v Speaker 2>It's

00:33:38.550 --> 00:33:41.750
<v Speaker 2>the kind of application that you would use

00:33:41.750 --> 00:33:42.950
<v Speaker 2>to

00:33:43.825 --> 00:33:47.745
<v Speaker 2>simply start the Firecracker instance by giving the

00:33:47.745 --> 00:33:50.465
<v Speaker 2>Firecracker binary a kernel and

00:33:50.705 --> 00:33:53.265
<v Speaker 2>root file system, and then everything will start

00:33:53.265 --> 00:33:54.065
<v Speaker 2>up for you.

00:33:54.625 --> 00:33:54.865
<v Speaker 2>So,

00:33:56.330 --> 00:33:56.970
<v Speaker 2>yes,

00:33:57.530 --> 00:33:59.450
<v Speaker 2>if if if you are wondering what it

00:33:59.450 --> 00:34:01.210
<v Speaker 2>does behind the scenes is that it wraps

00:34:01.210 --> 00:34:03.450
<v Speaker 2>all the API calls that you just did

00:34:03.450 --> 00:34:04.890
<v Speaker 2>using the terminal.

00:34:05.850 --> 00:34:07.130
<v Speaker 0>Okay. Awesome.

00:34:07.690 --> 00:34:10.195
<v Speaker 0>Well, why don't we move over to

00:34:11.074 --> 00:34:13.315
<v Speaker 0>Gabriel's machine and take a look at a

00:34:13.315 --> 00:34:14.435
<v Speaker 0>demo that is

00:34:16.114 --> 00:34:16.915
<v Speaker 0>hopefully

00:34:17.475 --> 00:34:19.795
<v Speaker 0>a bit more interesting than my airplane one

00:34:19.795 --> 00:34:21.875
<v Speaker 0>and But that was really cool. I love

00:34:21.875 --> 00:34:23.234
<v Speaker 0>just how fast it is

00:34:24.310 --> 00:34:26.069
<v Speaker 0>And I like the architecture with the daemon

00:34:26.069 --> 00:34:27.270
<v Speaker 0>and stuff like that. I think it was

00:34:27.270 --> 00:34:27.830
<v Speaker 0>just

00:34:28.389 --> 00:34:29.670
<v Speaker 0>such a cool project.

00:34:30.790 --> 00:34:34.230
<v Speaker 0>Okay. We can see your Versus code

00:34:34.469 --> 00:34:34.869
<v Speaker 0>now.

00:34:36.725 --> 00:34:37.365
<v Speaker 2>Yep.

00:34:38.965 --> 00:34:39.605
<v Speaker 2>So

00:34:40.005 --> 00:34:42.805
<v Speaker 2>in this demo, I'm going to show you

00:34:42.805 --> 00:34:45.525
<v Speaker 2>one of my favorite Firecracker features,

00:34:45.605 --> 00:34:46.885
<v Speaker 2>which is the feature.

00:34:48.600 --> 00:34:49.320
<v Speaker 2>So

00:34:49.400 --> 00:34:51.960
<v Speaker 2>to to to show the demo, I'm using

00:34:52.920 --> 00:34:54.360
<v Speaker 2>200 line

00:34:56.680 --> 00:34:59.320
<v Speaker 2>snippet of of written in Go.

00:34:59.560 --> 00:35:01.720
<v Speaker 0>Could you just drag that window a a

00:35:01.720 --> 00:35:03.160
<v Speaker 0>little bit bigger and

00:35:04.005 --> 00:35:05.765
<v Speaker 0>zoom in the font a wee bit, please?

00:35:06.565 --> 00:35:07.205
<v Speaker 0>Yep.

00:35:07.684 --> 00:35:09.365
<v Speaker 0>And actually the whole the whole window just

00:35:09.365 --> 00:35:11.204
<v Speaker 0>so it goes to the correct kinda aspect

00:35:11.204 --> 00:35:12.645
<v Speaker 0>ratio. I think I'll just make it a

00:35:12.645 --> 00:35:13.365
<v Speaker 0>bit easier.

00:35:14.565 --> 00:35:15.285
<v Speaker 2>One second.

00:35:16.720 --> 00:35:18.400
<v Speaker 0>Yeah. Perfect. That's the one.

00:35:19.040 --> 00:35:19.680
<v Speaker 0>Okay.

00:35:20.400 --> 00:35:21.120
<v Speaker 0>Thanks.

00:35:22.400 --> 00:35:23.680
<v Speaker 2>Alright. So

00:35:26.080 --> 00:35:29.520
<v Speaker 2>wrapping around the all the CRL request that

00:35:29.520 --> 00:35:32.685
<v Speaker 2>David did, I'm using Firecracker SDK.

00:35:34.444 --> 00:35:35.085
<v Speaker 2>This

00:35:35.404 --> 00:35:37.724
<v Speaker 2>component is one of the

00:35:38.125 --> 00:35:40.285
<v Speaker 2>open source projects which you can find in

00:35:40.285 --> 00:35:41.325
<v Speaker 2>the Firecracker

00:35:41.325 --> 00:35:41.724
<v Speaker 2>ecosystem.

00:35:44.520 --> 00:35:46.200
<v Speaker 2>So if you if you want to take

00:35:46.200 --> 00:35:48.120
<v Speaker 2>a look at it, you just simply go

00:35:48.120 --> 00:35:50.680
<v Speaker 2>to to the to its GitHub page

00:35:50.920 --> 00:35:52.360
<v Speaker 2>and take a look at it.

00:35:56.085 --> 00:35:58.244
<v Speaker 2>And, yeah, this is this is basically the

00:35:58.325 --> 00:35:59.765
<v Speaker 2>all all that I'm using

00:36:00.085 --> 00:36:02.805
<v Speaker 2>to to make the demo simpler.

00:36:04.805 --> 00:36:07.845
<v Speaker 2>For the micro that I'm launching, I'm gonna

00:36:07.845 --> 00:36:10.005
<v Speaker 2>use a few simplified assumptions,

00:36:10.005 --> 00:36:11.860
<v Speaker 2>and I'm not going to

00:36:12.660 --> 00:36:14.660
<v Speaker 2>customize the number of CPU or the or

00:36:14.660 --> 00:36:17.300
<v Speaker 2>the memory size. I'm using only two DCQs

00:36:17.300 --> 00:36:18.660
<v Speaker 2>for my micro

00:36:18.660 --> 00:36:20.900
<v Speaker 2>VMs, and I'm using

00:36:21.220 --> 00:36:22.340
<v Speaker 2>four gigabytes

00:36:22.420 --> 00:36:23.380
<v Speaker 2>micro VMs.

00:36:25.015 --> 00:36:26.695
<v Speaker 2>And for the current parameters,

00:36:26.695 --> 00:36:28.775
<v Speaker 2>I'm simply using what we

00:36:28.775 --> 00:36:30.775
<v Speaker 2>put in the quick start guide.

00:36:32.455 --> 00:36:36.135
<v Speaker 2>And these two files here are taken exactly

00:36:36.135 --> 00:36:38.055
<v Speaker 2>from the quick start guide, and they're the

00:36:38.055 --> 00:36:39.750
<v Speaker 2>same that they did use.

00:36:41.350 --> 00:36:43.670
<v Speaker 2>And then I also have the Firecracker banner,

00:36:43.670 --> 00:36:47.110
<v Speaker 2>which I'll beat myself from from the main

00:36:47.110 --> 00:36:47.990
<v Speaker 2>branch.

00:36:49.830 --> 00:36:52.755
<v Speaker 2>I'm going to skip over this code, and

00:36:52.755 --> 00:36:55.555
<v Speaker 2>I'm going to look at the flags that

00:36:55.555 --> 00:36:57.155
<v Speaker 2>I've added for the demo.

00:36:57.714 --> 00:36:58.515
<v Speaker 2>So

00:36:59.395 --> 00:37:00.435
<v Speaker 2>the first

00:37:01.234 --> 00:37:02.035
<v Speaker 2>flag

00:37:02.035 --> 00:37:02.835
<v Speaker 2>simply

00:37:03.395 --> 00:37:06.194
<v Speaker 2>the branches in microphone given a UDS packet.

00:37:06.579 --> 00:37:08.660
<v Speaker 2>That's what it does. You just,

00:37:09.140 --> 00:37:12.339
<v Speaker 2>like, test that socket and then a microgenomic

00:37:12.339 --> 00:37:13.060
<v Speaker 2>response.

00:37:14.099 --> 00:37:15.940
<v Speaker 2>And then as I was saying, we're going

00:37:15.940 --> 00:37:17.780
<v Speaker 2>to take a look at the snapshot feature.

00:37:18.180 --> 00:37:18.740
<v Speaker 2>So

00:37:19.525 --> 00:37:20.085
<v Speaker 2>one

00:37:20.565 --> 00:37:23.125
<v Speaker 2>the the the first snapshot related parameter is

00:37:23.125 --> 00:37:24.245
<v Speaker 2>two snapshots,

00:37:24.245 --> 00:37:26.885
<v Speaker 2>which saves the the the microgame state to

00:37:26.885 --> 00:37:28.085
<v Speaker 2>the snapshot file.

00:37:28.405 --> 00:37:29.685
<v Speaker 2>And then the second

00:37:30.165 --> 00:37:32.565
<v Speaker 2>will load the microgame from the snapshot file.

00:37:35.529 --> 00:37:36.410
<v Speaker 2>So yeah.

00:37:36.809 --> 00:37:38.730
<v Speaker 2>That's that's the demo.

00:37:40.569 --> 00:37:42.810
<v Speaker 2>One other thing that I wanted to add,

00:37:43.130 --> 00:37:45.530
<v Speaker 2>the Firecracker request, the

00:37:45.690 --> 00:37:47.130
<v Speaker 2>current version

00:37:47.289 --> 00:37:49.210
<v Speaker 2>of Firecracker request doesn't

00:37:49.210 --> 00:37:51.130
<v Speaker 2>support those notes

00:37:50.785 --> 00:37:51.505
<v Speaker 2>feature,

00:37:52.385 --> 00:37:53.985
<v Speaker 2>but I will add it as a PR

00:37:53.985 --> 00:37:55.185
<v Speaker 2>after this demo.

00:38:00.065 --> 00:38:00.705
<v Speaker 2>So

00:38:01.665 --> 00:38:04.225
<v Speaker 2>here we have the Firecracker binary and the

00:38:04.225 --> 00:38:05.745
<v Speaker 2>precompiled

00:38:06.020 --> 00:38:07.140
<v Speaker 2>launcher.

00:38:07.940 --> 00:38:09.300
<v Speaker 2>So that's just

00:38:11.619 --> 00:38:13.140
<v Speaker 2>well, that's just come.

00:38:13.940 --> 00:38:16.339
<v Speaker 2>So this is what I showed earlier.

00:38:19.795 --> 00:38:23.155
<v Speaker 2>So let's right now, we're launching MicroVM using

00:38:23.715 --> 00:38:26.675
<v Speaker 2>socket file called one dot sock.

00:38:28.115 --> 00:38:29.315
<v Speaker 2>Not very creative here.

00:38:33.810 --> 00:38:36.210
<v Speaker 2>And, yeah, this is the micro view. As

00:38:36.210 --> 00:38:38.850
<v Speaker 2>you saw, it launched pretty quick.

00:38:40.450 --> 00:38:44.210
<v Speaker 2>I didn't have any timing features here, but,

00:38:44.450 --> 00:38:49.250
<v Speaker 2>visually, it doesn't it didn't look like

00:38:48.805 --> 00:38:50.165
<v Speaker 2>any major

00:38:52.965 --> 00:38:55.845
<v Speaker 2>time or waste even the operations happened there.

00:38:58.565 --> 00:39:00.965
<v Speaker 2>So let's do something this micro VM so

00:39:00.965 --> 00:39:02.805
<v Speaker 2>that we can save its state.

00:39:05.160 --> 00:39:06.840
<v Speaker 2>One very simple

00:39:07.080 --> 00:39:09.720
<v Speaker 2>thing that we can do is to put

00:39:09.720 --> 00:39:11.800
<v Speaker 2>a message on the

00:39:12.280 --> 00:39:13.400
<v Speaker 2>the message

00:39:14.680 --> 00:39:15.160
<v Speaker 2>profile.

00:39:16.025 --> 00:39:18.265
<v Speaker 2>So let's just say echo

00:39:18.425 --> 00:39:19.545
<v Speaker 2>state one

00:39:21.705 --> 00:39:22.825
<v Speaker 2>to dev

00:39:23.705 --> 00:39:25.385
<v Speaker 2>key message.

00:39:26.265 --> 00:39:28.745
<v Speaker 2>And now if we look at the kernel

00:39:28.745 --> 00:39:31.305
<v Speaker 2>app, we can see the screen saved here.

00:39:35.359 --> 00:39:37.760
<v Speaker 2>So, yeah, right now, we can

00:39:38.799 --> 00:39:40.640
<v Speaker 2>save the micro VM state.

00:39:44.160 --> 00:39:45.680
<v Speaker 2>So what was the syntax?

00:39:47.385 --> 00:39:49.865
<v Speaker 2>So to save the micro VM state, I

00:39:49.865 --> 00:39:52.825
<v Speaker 2>first need to tell it what socket is

00:39:52.825 --> 00:39:55.465
<v Speaker 2>because all the HTTP

00:39:55.705 --> 00:39:57.545
<v Speaker 2>request will be sent to this socket.

00:39:59.705 --> 00:40:02.640
<v Speaker 2>And now I'm going to tell it to

00:40:03.839 --> 00:40:05.440
<v Speaker 2>save the snapshot file,

00:40:07.760 --> 00:40:10.079
<v Speaker 2>and let's just call that snapshot file state

00:40:10.079 --> 00:40:10.720
<v Speaker 2>one.

00:40:13.760 --> 00:40:14.800
<v Speaker 2>And so

00:40:15.040 --> 00:40:17.119
<v Speaker 2>for the for the two snapshots

00:40:17.495 --> 00:40:19.575
<v Speaker 2>operation, I've added the the

00:40:20.135 --> 00:40:21.335
<v Speaker 2>time measurement

00:40:22.375 --> 00:40:25.095
<v Speaker 2>line, which simply measures how long it took

00:40:25.095 --> 00:40:26.775
<v Speaker 2>to save the snapshot feature.

00:40:27.415 --> 00:40:29.415
<v Speaker 2>And for this operation,

00:40:29.415 --> 00:40:31.175
<v Speaker 2>it took two hundred and eighty milliseconds.

00:40:34.230 --> 00:40:35.030
<v Speaker 2>It's

00:40:35.030 --> 00:40:36.550
<v Speaker 2>not much, but

00:40:37.430 --> 00:40:39.030
<v Speaker 2>it's not less either.

00:40:39.350 --> 00:40:41.190
<v Speaker 2>We we will see that

00:40:41.510 --> 00:40:44.230
<v Speaker 2>if we do another snapshot, it will take

00:40:44.230 --> 00:40:46.470
<v Speaker 2>less. And I'm not going to explain

00:40:46.475 --> 00:40:48.315
<v Speaker 2>why that happens right now.

00:40:50.955 --> 00:40:53.595
<v Speaker 2>So we see again that it's one nineteen

00:40:53.595 --> 00:40:54.795
<v Speaker 2>milliseconds.

00:40:55.835 --> 00:40:56.715
<v Speaker 2>So

00:40:57.195 --> 00:40:59.275
<v Speaker 2>let's go a little bit what happened when

00:40:59.275 --> 00:41:00.395
<v Speaker 2>we created this snapshot.

00:41:01.539 --> 00:41:05.540
<v Speaker 2>So Firecracker has two ways of creating snapshot.

00:41:06.339 --> 00:41:08.660
<v Speaker 2>One way is a full snapshot, and another

00:41:08.660 --> 00:41:10.420
<v Speaker 2>way is a deep snapshot.

00:41:10.819 --> 00:41:13.780
<v Speaker 2>So a full snapshot simply saves everything

00:41:14.099 --> 00:41:17.115
<v Speaker 2>in the micro VM. So, for example, if

00:41:17.115 --> 00:41:18.875
<v Speaker 2>you run a full snapshot on a micro

00:41:18.875 --> 00:41:19.515
<v Speaker 2>VM,

00:41:19.755 --> 00:41:21.755
<v Speaker 2>all the memory contents will be saved to

00:41:21.755 --> 00:41:22.315
<v Speaker 2>disk.

00:41:24.315 --> 00:41:27.195
<v Speaker 2>What happens when we run a deep snapshot?

00:41:27.195 --> 00:41:28.875
<v Speaker 2>Well, a deep snapshot simply

00:41:30.440 --> 00:41:33.640
<v Speaker 2>saves the dirty pages that have been

00:41:35.400 --> 00:41:36.920
<v Speaker 2>used by the micro view,

00:41:37.400 --> 00:41:38.440
<v Speaker 2>which is why

00:41:39.559 --> 00:41:41.720
<v Speaker 2>the second snapshot took less.

00:41:42.119 --> 00:41:44.839
<v Speaker 2>So what's happened after the first snapshot

00:41:45.125 --> 00:41:46.165
<v Speaker 2>was that

00:41:47.605 --> 00:41:50.165
<v Speaker 2>we we created the file and all the

00:41:50.165 --> 00:41:52.085
<v Speaker 2>pages were marked as clean.

00:41:52.405 --> 00:41:55.845
<v Speaker 2>And then all subsequent pages that were detected

00:41:55.845 --> 00:41:58.724
<v Speaker 2>as dirty was safe were safe in state

00:41:58.724 --> 00:41:58.964
<v Speaker 2>two.

00:42:00.720 --> 00:42:01.520
<v Speaker 2>And I

00:42:04.080 --> 00:42:05.680
<v Speaker 1>guess we can look at the sizes of

00:42:05.680 --> 00:42:07.600
<v Speaker 1>the files. Right? Yes. Exactly.

00:42:08.240 --> 00:42:11.840
<v Speaker 2>And one side effect of saving less information

00:42:11.840 --> 00:42:15.255
<v Speaker 2>is that we save less we we write

00:42:15.255 --> 00:42:16.615
<v Speaker 2>less data to disk.

00:42:17.815 --> 00:42:19.734
<v Speaker 2>So if we take a look at the

00:42:19.734 --> 00:42:20.455
<v Speaker 2>two

00:42:20.695 --> 00:42:21.975
<v Speaker 2>memory files,

00:42:22.535 --> 00:42:25.415
<v Speaker 2>LS simply tells us that, okay, both files

00:42:25.415 --> 00:42:27.400
<v Speaker 2>are four gigabyte in size,

00:42:27.720 --> 00:42:29.720
<v Speaker 2>but they're actually not because these are sparse

00:42:29.720 --> 00:42:30.360
<v Speaker 2>files.

00:42:31.080 --> 00:42:33.800
<v Speaker 2>And if we take a look

00:42:34.200 --> 00:42:36.120
<v Speaker 2>at the files using the u,

00:42:37.480 --> 00:42:39.000
<v Speaker 2>we can see that

00:42:39.495 --> 00:42:41.495
<v Speaker 2>state one document has

00:42:41.495 --> 00:42:43.895
<v Speaker 2>one seventy one megabytes in size,

00:42:44.375 --> 00:42:48.215
<v Speaker 2>and state two document has only 348

00:42:48.215 --> 00:42:48.855
<v Speaker 2>k,

00:42:49.975 --> 00:42:51.095
<v Speaker 2>which is

00:42:51.495 --> 00:42:52.535
<v Speaker 2>magnitude

00:42:52.535 --> 00:42:55.095
<v Speaker 2>of

00:42:53.720 --> 00:42:55.880
<v Speaker 2>part of less than than the state one.

00:42:56.920 --> 00:42:57.720
<v Speaker 2>So

00:42:58.440 --> 00:42:59.240
<v Speaker 2>that's

00:42:59.240 --> 00:43:01.480
<v Speaker 2>that's the reason, you know, micro view from

00:43:01.480 --> 00:43:03.000
<v Speaker 2>the first snapshot.

00:43:14.855 --> 00:43:16.615
<v Speaker 2>So what we do we're doing right now

00:43:16.615 --> 00:43:18.935
<v Speaker 2>is that we are launching the second micro

00:43:18.935 --> 00:43:22.520
<v Speaker 2>PM. We could create a socket at a

00:43:22.600 --> 00:43:23.560
<v Speaker 2>file called

00:43:23.800 --> 00:43:24.920
<v Speaker 2>two dot sock.

00:43:25.480 --> 00:43:27.400
<v Speaker 2>And we will going to be using

00:43:28.440 --> 00:43:31.240
<v Speaker 2>state one on the for the first snapshot.

00:43:34.145 --> 00:43:35.105
<v Speaker 2>There's a

00:43:35.905 --> 00:43:37.105
<v Speaker 2>there's a a

00:43:37.585 --> 00:43:40.225
<v Speaker 2>short simplifying assumption that they took here,

00:43:41.185 --> 00:43:43.984
<v Speaker 2>which is the fact that we are dumping

00:43:43.984 --> 00:43:45.905
<v Speaker 2>two files here. One one is the memory

00:43:45.905 --> 00:43:48.305
<v Speaker 2>file, and the second one is the disk

00:43:48.900 --> 00:43:49.460
<v Speaker 2>content.

00:43:53.059 --> 00:43:56.180
<v Speaker 2>So we've launched the second microgame, and we've

00:43:56.180 --> 00:43:57.700
<v Speaker 2>restored it from a snapshot.

00:43:59.539 --> 00:44:00.819
<v Speaker 2>The performance

00:44:00.819 --> 00:44:02.980
<v Speaker 2>says that it took only fifteen milliseconds.

00:44:04.775 --> 00:44:06.935
<v Speaker 2>This is on my laptop, and it also

00:44:06.935 --> 00:44:09.415
<v Speaker 2>includes the overwork and that Firecracker for SDK

00:44:09.415 --> 00:44:10.375
<v Speaker 2>purposes.

00:44:11.495 --> 00:44:13.815
<v Speaker 2>Typically, in production environments,

00:44:13.815 --> 00:44:16.455
<v Speaker 2>we target about nine milliseconds,

00:44:16.455 --> 00:44:18.615
<v Speaker 2>and you can also see that in our

00:44:18.615 --> 00:44:19.335
<v Speaker 2>test.

00:44:20.369 --> 00:44:23.330
<v Speaker 2>I can show you the data.

00:44:24.849 --> 00:44:27.089
<v Speaker 2>So now let's check that

00:44:27.329 --> 00:44:29.490
<v Speaker 2>this micro VM on the right was actually

00:44:29.490 --> 00:44:32.210
<v Speaker 2>started from the snapshot that was created from

00:44:32.210 --> 00:44:33.089
<v Speaker 2>first micro VM.

00:44:34.445 --> 00:44:36.365
<v Speaker 2>And we can do that by looking at

00:44:36.365 --> 00:44:37.165
<v Speaker 2>the message,

00:44:37.885 --> 00:44:39.805
<v Speaker 2>and we can see the state file

00:44:40.205 --> 00:44:42.925
<v Speaker 2>the state one message here.

00:44:44.365 --> 00:44:47.085
<v Speaker 2>These these messages are are due to the

00:44:47.085 --> 00:44:48.685
<v Speaker 2>fact that we are using in front of

00:44:48.685 --> 00:44:50.080
<v Speaker 2>from and

00:44:51.359 --> 00:44:53.360
<v Speaker 2>timekeeping is not

00:44:54.240 --> 00:44:57.040
<v Speaker 2>in in in sync with the other micro

00:44:57.040 --> 00:44:57.359
<v Speaker 2>view.

00:45:02.355 --> 00:45:03.875
<v Speaker 2>Oh, yeah. This is it.

00:45:06.195 --> 00:45:08.595
<v Speaker 0>Nice. Thank you. Now I'm trying to stop

00:45:08.595 --> 00:45:10.835
<v Speaker 2>the micro again. Yeah. And it starts.

00:45:12.035 --> 00:45:14.995
<v Speaker 2>I can publish this and send you

00:45:15.710 --> 00:45:18.109
<v Speaker 2>links later if you guys want to take

00:45:18.109 --> 00:45:18.670
<v Speaker 2>a look.

00:45:20.349 --> 00:45:20.910
<v Speaker 0>Awesome.

00:45:21.710 --> 00:45:23.470
<v Speaker 0>That's very cool. I like seeing how that

00:45:23.470 --> 00:45:25.790
<v Speaker 0>snapshot all comes together and how

00:45:26.349 --> 00:45:28.349
<v Speaker 0>it's just how quick everything is. I think

00:45:28.349 --> 00:45:29.069
<v Speaker 0>that's a

00:45:29.605 --> 00:45:31.605
<v Speaker 0>really I think that just opens up so

00:45:31.605 --> 00:45:34.485
<v Speaker 0>much possibilities for the applications of Firecracker

00:45:34.485 --> 00:45:36.725
<v Speaker 0>for so many different domains that I hadn't

00:45:36.725 --> 00:45:38.405
<v Speaker 0>even thought of before we come into today's

00:45:38.405 --> 00:45:40.405
<v Speaker 0>session. Hold on. Let me pop this back

00:45:40.405 --> 00:45:40.885
<v Speaker 0>over to.

00:45:42.820 --> 00:45:45.700
<v Speaker 0>It's such a really cool technology.

00:45:45.780 --> 00:45:47.940
<v Speaker 0>I'm curious then as what we've seen today

00:45:47.940 --> 00:45:50.740
<v Speaker 0>is like Firecracker deeming as opposed to an

00:45:50.740 --> 00:45:53.300
<v Speaker 0>HTTP API. I can communicate with that HTTP

00:45:53.300 --> 00:45:54.180
<v Speaker 0>API

00:45:55.220 --> 00:45:57.575
<v Speaker 0>to do all of this cool stuff. So

00:45:58.615 --> 00:46:01.095
<v Speaker 0>this is quite low level and you kind

00:46:01.095 --> 00:46:02.775
<v Speaker 0>of touched on this earlier rather.

00:46:03.095 --> 00:46:05.575
<v Speaker 0>So now the plan that this technology exists

00:46:05.575 --> 00:46:07.414
<v Speaker 0>and that's already done all these cool things.

00:46:07.414 --> 00:46:09.174
<v Speaker 0>Let's just the build all of these abstractions

00:46:09.174 --> 00:46:10.135
<v Speaker 0>on top of it now.

00:46:11.330 --> 00:46:13.090
<v Speaker 0>Can people get involved?

00:46:13.090 --> 00:46:14.930
<v Speaker 0>Like, you know, you know, people watch this

00:46:14.930 --> 00:46:16.530
<v Speaker 0>because that's really cool. I wanna help. Like,

00:46:16.530 --> 00:46:17.570
<v Speaker 0>what's the best way for them to do

00:46:17.570 --> 00:46:18.050
<v Speaker 0>that?

00:46:19.010 --> 00:46:21.490
<v Speaker 1>Yeah. So there's there's already a few things

00:46:21.490 --> 00:46:24.370
<v Speaker 1>that are started. So the Go SDK and

00:46:24.290 --> 00:46:24.370
<v Speaker 1>the

00:46:25.365 --> 00:46:27.445
<v Speaker 1>right now, at least from from from what

00:46:27.445 --> 00:46:29.045
<v Speaker 1>we've seen, looking around

00:46:29.365 --> 00:46:31.925
<v Speaker 1>in an integration with container d is probably

00:46:31.925 --> 00:46:34.005
<v Speaker 1>a really good avenue to make this available

00:46:34.005 --> 00:46:34.885
<v Speaker 1>to more people.

00:46:35.205 --> 00:46:36.885
<v Speaker 1>And both of these things are project that's

00:46:36.965 --> 00:46:38.805
<v Speaker 1>that are already there, and people can contribute

00:46:38.805 --> 00:46:40.325
<v Speaker 1>to them. I think there's definitely

00:46:40.820 --> 00:46:42.580
<v Speaker 1>to dos. They're in the same kind of

00:46:42.580 --> 00:46:43.380
<v Speaker 1>organization

00:46:43.860 --> 00:46:46.340
<v Speaker 1>as Firecracker. So there's a Firecracker dash micro

00:46:46.340 --> 00:46:48.180
<v Speaker 1>v m. There's other

00:46:48.820 --> 00:46:51.780
<v Speaker 1>folks that have done other integrations, like Weaveworks

00:46:51.780 --> 00:46:52.420
<v Speaker 1>has

00:46:52.660 --> 00:46:53.540
<v Speaker 1>Weave Ignite.

00:46:54.065 --> 00:46:55.185
<v Speaker 1>So

00:46:55.185 --> 00:46:56.385
<v Speaker 1>I think that at this point, there is

00:46:56.385 --> 00:46:58.225
<v Speaker 1>actually more than one answer.

00:46:58.625 --> 00:47:00.145
<v Speaker 1>We're we're really

00:47:00.465 --> 00:47:02.625
<v Speaker 1>open to everything. We're trying to support all

00:47:02.625 --> 00:47:03.345
<v Speaker 1>of the

00:47:03.825 --> 00:47:05.345
<v Speaker 1>all of the integrations.

00:47:06.270 --> 00:47:08.030
<v Speaker 1>So, yeah, I think there's a there's a

00:47:08.030 --> 00:47:10.750
<v Speaker 1>variety of of projects to to pick from,

00:47:11.230 --> 00:47:12.670
<v Speaker 1>you know, on which to contribute.

00:47:12.910 --> 00:47:15.230
<v Speaker 1>We're definitely open to pull requests for Firecracker

00:47:15.230 --> 00:47:16.270
<v Speaker 1>itself, though

00:47:16.510 --> 00:47:17.070
<v Speaker 1>we

00:47:18.225 --> 00:47:20.625
<v Speaker 1>we tend to be, like, laser focused on

00:47:20.625 --> 00:47:22.705
<v Speaker 1>actually not having a lot of features.

00:47:23.265 --> 00:47:25.265
<v Speaker 1>So we're just kinda working backwards from our

00:47:25.265 --> 00:47:26.545
<v Speaker 1>use case all the time. And if we

00:47:26.545 --> 00:47:28.065
<v Speaker 1>don't need it, then we're we're not gonna

00:47:28.065 --> 00:47:28.465
<v Speaker 1>build it.

00:47:30.710 --> 00:47:32.150
<v Speaker 1>But, yeah, at the same time, you know,

00:47:32.150 --> 00:47:34.789
<v Speaker 1>people there's a there's a bunch of activity

00:47:34.789 --> 00:47:36.230
<v Speaker 1>now in the space of

00:47:36.710 --> 00:47:39.190
<v Speaker 1>of virtual machine managers. So there's a bunch

00:47:39.190 --> 00:47:41.190
<v Speaker 1>of other projects if if people kind of

00:47:41.190 --> 00:47:43.269
<v Speaker 1>like virtualization that they can that they can

00:47:43.269 --> 00:47:44.310
<v Speaker 1>get involved with.

00:47:44.789 --> 00:47:47.924
<v Speaker 0>Alright. Awesome. Alright. We do have one question

00:47:47.924 --> 00:47:50.164
<v Speaker 0>that is not in here from Michael who's

00:47:50.164 --> 00:47:50.805
<v Speaker 0>asking,

00:47:51.525 --> 00:47:53.045
<v Speaker 0>what are the ways to pass a desired

00:47:53.045 --> 00:47:54.405
<v Speaker 0>IP configuration

00:47:54.805 --> 00:47:56.244
<v Speaker 0>to the Firecracker VM?

00:48:00.190 --> 00:48:02.110
<v Speaker 0>I'll pass that to Gabriel, I think.

00:48:03.310 --> 00:48:04.750
<v Speaker 2>Yeah. Sure.

00:48:07.710 --> 00:48:08.350
<v Speaker 2>So

00:48:09.630 --> 00:48:11.950
<v Speaker 2>I I'm trying to understand

00:48:12.110 --> 00:48:13.550
<v Speaker 2>the the exact question.

00:48:14.065 --> 00:48:15.105
<v Speaker 0>Yeah. Can I do you mind if I

00:48:15.105 --> 00:48:17.265
<v Speaker 0>rephrase it? Michael, I'm gonna just make some

00:48:17.265 --> 00:48:19.825
<v Speaker 0>assumptions on what I think you're asking. But

00:48:19.825 --> 00:48:21.585
<v Speaker 0>I can imagine a situation where I wanna

00:48:21.585 --> 00:48:24.705
<v Speaker 0>run multiple Firecracker virtual machines and probably have

00:48:24.705 --> 00:48:26.865
<v Speaker 0>them communicate with one another. So, like, is

00:48:26.865 --> 00:48:28.785
<v Speaker 0>it possible for me to create a,

00:48:29.025 --> 00:48:30.740
<v Speaker 0>you know, some sort of bridge network device

00:48:30.740 --> 00:48:32.900
<v Speaker 0>and then have all of the Firecracker VMs

00:48:32.900 --> 00:48:35.380
<v Speaker 0>have an IP on a pre allocated CIDR

00:48:35.380 --> 00:48:37.060
<v Speaker 0>for that kind of network?

00:48:38.420 --> 00:48:39.540
<v Speaker 2>Right. So

00:48:40.100 --> 00:48:41.619
<v Speaker 2>first of all, you

00:48:42.465 --> 00:48:44.625
<v Speaker 2>don't have a way of

00:48:46.225 --> 00:48:48.065
<v Speaker 2>forcing the Firecracker

00:48:48.785 --> 00:48:51.185
<v Speaker 2>micro VM. Actually, the the the

00:48:51.345 --> 00:48:53.905
<v Speaker 2>user space inside the micro VM to have

00:48:53.905 --> 00:48:56.065
<v Speaker 2>an IP a certain IP interface.

00:48:56.490 --> 00:48:58.730
<v Speaker 2>You can only do that through configurations.

00:48:59.610 --> 00:49:02.730
<v Speaker 2>So stepping back a bit, yes, as you

00:49:05.290 --> 00:49:06.250
<v Speaker 2>you mentioned,

00:49:06.250 --> 00:49:09.369
<v Speaker 2>perhaps, to create 10 type interfaces

00:49:09.369 --> 00:49:12.125
<v Speaker 2>and connect each Firecracker instance to one type

00:49:12.125 --> 00:49:12.925
<v Speaker 2>interface.

00:49:14.125 --> 00:49:16.445
<v Speaker 2>And from this point on, after the start

00:49:16.445 --> 00:49:17.645
<v Speaker 2>of Firecracker,

00:49:18.285 --> 00:49:18.765
<v Speaker 2>you

00:49:19.805 --> 00:49:23.165
<v Speaker 2>have multiple options. You can, for example, have

00:49:23.165 --> 00:49:25.725
<v Speaker 2>a

00:49:24.519 --> 00:49:28.200
<v Speaker 2>running on that on that Linux bridge and

00:49:28.200 --> 00:49:32.839
<v Speaker 2>have the request issues at at startup time.

00:49:35.160 --> 00:49:35.720
<v Speaker 2>One

00:49:36.279 --> 00:49:37.640
<v Speaker 2>other

00:49:38.345 --> 00:49:41.145
<v Speaker 2>doing it is the MMDS feature.

00:49:41.545 --> 00:49:44.025
<v Speaker 2>The MMDS feature, I don't think I've mentioned

00:49:44.025 --> 00:49:45.625
<v Speaker 2>it so far.

00:49:45.944 --> 00:49:47.225
<v Speaker 2>It's like a

00:49:47.625 --> 00:49:49.704
<v Speaker 2>scaled down version of IMDS,

00:49:51.980 --> 00:49:55.099
<v Speaker 2>which is basically a way of putting metadata

00:49:55.099 --> 00:49:56.060
<v Speaker 2>inside

00:49:56.859 --> 00:49:59.740
<v Speaker 2>Hyper VM. And then when you issue

00:49:59.740 --> 00:50:02.380
<v Speaker 2>HTTP request to certain IP addresses, you will

00:50:02.380 --> 00:50:04.380
<v Speaker 2>get both of that metadata.

00:50:06.895 --> 00:50:07.535
<v Speaker 2>And

00:50:08.255 --> 00:50:10.815
<v Speaker 2>you can use this metadata, for example, to

00:50:10.815 --> 00:50:13.454
<v Speaker 2>create a maybe a system d service, which

00:50:13.454 --> 00:50:17.214
<v Speaker 2>starts at large time and get that information

00:50:17.214 --> 00:50:17.855
<v Speaker 2>from

00:50:18.575 --> 00:50:20.415
<v Speaker 2>from the storage.

00:50:21.920 --> 00:50:22.640
<v Speaker 0>Alright.

00:50:22.720 --> 00:50:24.880
<v Speaker 0>Yeah. I think that makes sense. You you

00:50:24.880 --> 00:50:26.160
<v Speaker 0>dropped it a little bit there, but I

00:50:26.160 --> 00:50:28.079
<v Speaker 0>think what you were suggesting is the first

00:50:28.079 --> 00:50:30.079
<v Speaker 0>option would be to have a a tap

00:50:30.079 --> 00:50:32.000
<v Speaker 0>device per VM and have it boot from

00:50:32.000 --> 00:50:34.385
<v Speaker 0>a DHCP server and allocate the IP that

00:50:34.385 --> 00:50:36.145
<v Speaker 0>way. And the alternative way would be to

00:50:36.145 --> 00:50:39.345
<v Speaker 0>run a process via system d that could

00:50:39.345 --> 00:50:41.425
<v Speaker 0>have a metadata API passing

00:50:41.505 --> 00:50:43.665
<v Speaker 0>some identification and then get back an IP

00:50:43.665 --> 00:50:45.185
<v Speaker 0>address and configure the device that way.

00:50:46.560 --> 00:50:49.280
<v Speaker 2>Yeah. So under under getting the actual IP

00:50:49.280 --> 00:50:51.520
<v Speaker 2>address, you can be as creative as possible.

00:50:51.520 --> 00:50:52.000
<v Speaker 2>You

00:50:53.280 --> 00:50:54.080
<v Speaker 2>have

00:50:54.080 --> 00:50:56.000
<v Speaker 2>lots of ways to do it, so

00:50:56.320 --> 00:50:58.640
<v Speaker 2>you're you're not bound to these two options.

00:50:58.925 --> 00:50:59.565
<v Speaker 0>Yeah.

00:50:59.965 --> 00:51:01.805
<v Speaker 0>Yeah. Just have an NTP server and hash

00:51:01.805 --> 00:51:03.244
<v Speaker 0>it, make up an IP address. That's what

00:51:03.244 --> 00:51:05.165
<v Speaker 0>I'm gonna do. Exactly. So so as an

00:51:05.165 --> 00:51:07.565
<v Speaker 1>example of something that's let's say, that we're

00:51:07.565 --> 00:51:09.885
<v Speaker 1>using our test, but it's not entirely crazy

00:51:09.885 --> 00:51:10.765
<v Speaker 1>if you wanna

00:51:11.260 --> 00:51:13.500
<v Speaker 1>kind of shave milliseconds off the start time.

00:51:13.500 --> 00:51:15.020
<v Speaker 1>You can you can basically

00:51:15.580 --> 00:51:17.820
<v Speaker 1>use the like, some segment of the MAC

00:51:17.820 --> 00:51:20.060
<v Speaker 1>address, which you can configure when you configure

00:51:20.060 --> 00:51:20.860
<v Speaker 1>the the tap

00:51:21.980 --> 00:51:25.100
<v Speaker 1>sorry. The network device where it via the

00:51:25.100 --> 00:51:26.620
<v Speaker 1>socket, you can give it a MAC address.

00:51:27.155 --> 00:51:29.714
<v Speaker 1>And then you can, by convention, between the

00:51:29.714 --> 00:51:30.915
<v Speaker 1>host and the guest,

00:51:31.155 --> 00:51:33.075
<v Speaker 1>have that have some bytes of the MAC

00:51:33.075 --> 00:51:34.515
<v Speaker 1>address or some hash of it with the

00:51:34.515 --> 00:51:35.075
<v Speaker 1>IP.

00:51:35.875 --> 00:51:37.875
<v Speaker 1>Only this in our test just because it

00:51:37.875 --> 00:51:39.075
<v Speaker 1>was simple, but

00:51:39.395 --> 00:51:41.315
<v Speaker 1>these I'm not saying this particular approach, but

00:51:41.315 --> 00:51:42.275
<v Speaker 1>these kind of approaches

00:51:42.840 --> 00:51:45.400
<v Speaker 1>will be often very useful if you wanna

00:51:45.400 --> 00:51:46.680
<v Speaker 1>start super fast.

00:51:47.240 --> 00:51:47.560
<v Speaker 1>The

00:51:48.200 --> 00:51:49.960
<v Speaker 1>vision is basically that

00:51:50.600 --> 00:51:52.920
<v Speaker 1>we get to the point where the fact

00:51:52.920 --> 00:51:55.960
<v Speaker 1>that you're getting VM isolation

00:51:56.315 --> 00:51:57.595
<v Speaker 1>just doesn't get it in the way of

00:51:57.595 --> 00:52:00.315
<v Speaker 1>your workload at all. So on on Gabriel's

00:52:00.315 --> 00:52:02.475
<v Speaker 1>laptop, it was fifty milliseconds to start from

00:52:02.475 --> 00:52:03.435
<v Speaker 1>a snapshot.

00:52:04.635 --> 00:52:06.395
<v Speaker 1>As you mentioned, it's kind of nine on

00:52:06.395 --> 00:52:08.955
<v Speaker 1>a on a on a server grade machine.

00:52:09.680 --> 00:52:10.320
<v Speaker 1>And

00:52:10.640 --> 00:52:11.200
<v Speaker 1>there's

00:52:11.600 --> 00:52:13.600
<v Speaker 1>like, on ARM, it's even faster. It's two

00:52:13.600 --> 00:52:14.800
<v Speaker 1>point five milliseconds.

00:52:14.960 --> 00:52:17.360
<v Speaker 0>Wow. And, you know, we've done some there's

00:52:17.360 --> 00:52:19.680
<v Speaker 1>some crazy optimizations that are nowhere near

00:52:19.840 --> 00:52:21.600
<v Speaker 1>production. But down the line, we see this

00:52:21.600 --> 00:52:22.960
<v Speaker 1>number going to one millisecond.

00:52:23.934 --> 00:52:25.615
<v Speaker 1>And at that point, you basically

00:52:26.255 --> 00:52:27.775
<v Speaker 1>this is just a VM. So, again, you

00:52:27.775 --> 00:52:29.615
<v Speaker 1>need to start the the things inside it

00:52:29.615 --> 00:52:31.855
<v Speaker 1>will resume exactly where they left off,

00:52:32.255 --> 00:52:33.295
<v Speaker 1>but we're actually

00:52:33.694 --> 00:52:34.415
<v Speaker 1>just

00:52:35.295 --> 00:52:36.895
<v Speaker 1>walking a few steps back. All of this

00:52:36.895 --> 00:52:39.535
<v Speaker 1>is in that preview, so don't use snapshotting

00:52:39.020 --> 00:52:39.820
<v Speaker 1>production.

00:52:40.380 --> 00:52:42.940
<v Speaker 1>We need to it actually it actually works

00:52:42.940 --> 00:52:44.700
<v Speaker 1>very well, like, as a technology, but we

00:52:44.700 --> 00:52:47.420
<v Speaker 1>need to address the security issue, which is

00:52:47.420 --> 00:52:49.660
<v Speaker 1>that that that the thing where that cable

00:52:49.660 --> 00:52:52.140
<v Speaker 1>did where he started a machine from a

00:52:52.140 --> 00:52:54.485
<v Speaker 1>state. You can do that a thousand times,

00:52:54.485 --> 00:52:55.845
<v Speaker 1>and not only can you do it, but

00:52:55.845 --> 00:52:58.005
<v Speaker 1>it's desirable to do it because you can

00:52:58.005 --> 00:53:01.045
<v Speaker 1>start, like, at a, like, pre warmed JVM

00:53:01.205 --> 00:53:02.325
<v Speaker 1>application state.

00:53:03.925 --> 00:53:06.325
<v Speaker 1>But right now, we don't have a easy

00:53:06.325 --> 00:53:07.125
<v Speaker 1>solution for

00:53:08.280 --> 00:53:10.440
<v Speaker 1>the security issues that would be introduced by

00:53:10.440 --> 00:53:12.200
<v Speaker 1>cloning all the random things

00:53:12.760 --> 00:53:15.160
<v Speaker 1>and just by actually, you know, having RNGs

00:53:15.160 --> 00:53:16.680
<v Speaker 1>in the same state and so on.

00:53:17.480 --> 00:53:19.720
<v Speaker 0>K. And we're we're working on that with

00:53:19.720 --> 00:53:21.855
<v Speaker 1>the we have some patches for the system

00:53:21.855 --> 00:53:22.575
<v Speaker 1>d,

00:53:22.655 --> 00:53:24.655
<v Speaker 1>team that will allow us to

00:53:25.055 --> 00:53:27.215
<v Speaker 1>then further down the stack or up the

00:53:27.215 --> 00:53:29.935
<v Speaker 1>stack, integrate with OpenSSL and the JVM and

00:53:29.935 --> 00:53:30.575
<v Speaker 1>so on,

00:53:30.895 --> 00:53:32.575
<v Speaker 1>for these systems to kind of figure out

00:53:32.575 --> 00:53:34.335
<v Speaker 1>that they've been restored from a snapshot and

00:53:34.335 --> 00:53:36.110
<v Speaker 1>do whatever it is they need to do

00:53:36.110 --> 00:53:37.470
<v Speaker 1>to become safe again,

00:53:37.870 --> 00:53:39.950
<v Speaker 1>but that's not there yet. So until that's

00:53:39.950 --> 00:53:42.830
<v Speaker 1>there, this is like a cool demo feature,

00:53:43.150 --> 00:53:45.470
<v Speaker 1>but nothing more. Don't don't use this in

00:53:45.470 --> 00:53:46.110
<v Speaker 1>production.

00:53:46.910 --> 00:53:48.830
<v Speaker 0>Okay. I mean, every time someone tells me

00:53:48.830 --> 00:53:50.430
<v Speaker 0>not to do something in production, I always

00:53:50.430 --> 00:53:52.815
<v Speaker 0>get an overwhelming urge to go and do

00:53:52.815 --> 00:53:54.335
<v Speaker 0>it. But I will I I promise I

00:53:54.335 --> 00:53:56.735
<v Speaker 0>will try not to. Okay. We for compelling.

00:53:56.735 --> 00:53:58.815
<v Speaker 1>So so you can, like, literally start thousands

00:53:58.815 --> 00:54:01.535
<v Speaker 1>of VMs in something like, you know, twenty,

00:54:01.535 --> 00:54:02.895
<v Speaker 1>thirty seconds, and they're all up and you

00:54:02.895 --> 00:54:05.049
<v Speaker 1>go SSH to all of them. And they

00:54:05.049 --> 00:54:06.970
<v Speaker 1>take, like, no memory because it only false

00:54:06.970 --> 00:54:08.890
<v Speaker 1>the pages that are being used at that

00:54:08.890 --> 00:54:11.210
<v Speaker 1>moment by the, like, thing running in them

00:54:11.210 --> 00:54:13.450
<v Speaker 1>at the moment. It every all the memory

00:54:13.450 --> 00:54:15.450
<v Speaker 1>that was dirty during view, boot, and setup

00:54:15.450 --> 00:54:17.770
<v Speaker 1>and everything is not brought back into physical

00:54:17.770 --> 00:54:20.250
<v Speaker 1>memory. It is it is very, very efficient.

00:54:20.835 --> 00:54:21.555
<v Speaker 0>Nice.

00:54:21.875 --> 00:54:22.595
<v Speaker 0>Okay.

00:54:23.635 --> 00:54:25.555
<v Speaker 0>What I I I really wanna experiment with

00:54:25.555 --> 00:54:28.035
<v Speaker 0>running FTD and a Firecracker with the snapshots

00:54:28.035 --> 00:54:29.795
<v Speaker 0>and and spending that backup. That to me

00:54:29.795 --> 00:54:31.475
<v Speaker 0>just seems like a really, really cool use

00:54:31.475 --> 00:54:33.315
<v Speaker 0>case. But we do have some more audience

00:54:33.315 --> 00:54:35.000
<v Speaker 0>questions, so we'll run through these, and then

00:54:35.000 --> 00:54:36.600
<v Speaker 0>I'll let you get back to your day.

00:54:36.839 --> 00:54:37.400
<v Speaker 0>So,

00:54:37.640 --> 00:54:39.640
<v Speaker 0>we have a couple more networking things, but

00:54:39.640 --> 00:54:41.640
<v Speaker 0>Nerd has asked, is there an option to

00:54:41.640 --> 00:54:43.880
<v Speaker 0>hook into IPAM utilities to provide IP addresses

00:54:43.880 --> 00:54:45.079
<v Speaker 0>without DHCP?

00:54:50.224 --> 00:54:52.385
<v Speaker 2>I guess that this depends on how you're

00:54:52.385 --> 00:54:53.825
<v Speaker 2>building your service.

00:54:54.704 --> 00:54:57.984
<v Speaker 2>I'm not exactly sure on how IPAM works.

00:54:59.585 --> 00:55:00.224
<v Speaker 2>But

00:55:01.089 --> 00:55:02.930
<v Speaker 2>if you build your service in such a

00:55:02.930 --> 00:55:04.690
<v Speaker 2>way that you can access it from the

00:55:04.690 --> 00:55:07.329
<v Speaker 2>micro VM, then I I suppose that you

00:55:07.329 --> 00:55:09.330
<v Speaker 2>you could hook it up.

00:55:11.089 --> 00:55:11.890
<v Speaker 0>Alright.

00:55:12.450 --> 00:55:14.365
<v Speaker 0>We'll come back to that. I I don't

00:55:14.365 --> 00:55:15.484
<v Speaker 0>know if there is a good answer to

00:55:15.484 --> 00:55:17.404
<v Speaker 0>that to be fair, so we'll move on

00:55:17.404 --> 00:55:19.244
<v Speaker 0>just now, but thanks for the question there.

00:55:19.565 --> 00:55:21.484
<v Speaker 0>Michael's back and asking if there were any

00:55:21.484 --> 00:55:23.325
<v Speaker 0>docs on option two. So do you have

00:55:23.325 --> 00:55:24.365
<v Speaker 0>any canonical

00:55:24.525 --> 00:55:27.085
<v Speaker 0>implementations of that, like, system d metadata

00:55:27.085 --> 00:55:28.940
<v Speaker 0>IP address thing? Is that something that you

00:55:28.940 --> 00:55:30.940
<v Speaker 0>do internally, or is it the documentation?

00:55:34.220 --> 00:55:35.820
<v Speaker 2>We don't have any

00:55:36.619 --> 00:55:37.420
<v Speaker 2>any

00:55:39.420 --> 00:55:43.180
<v Speaker 2>proof of concept that that uses it, but

00:55:44.145 --> 00:55:46.225
<v Speaker 2>I I think that we can provide some

00:55:46.225 --> 00:55:47.985
<v Speaker 2>information on how to do it.

00:55:48.465 --> 00:55:51.265
<v Speaker 2>If you take a look at the

00:55:51.825 --> 00:55:52.865
<v Speaker 2>MMTS

00:55:53.105 --> 00:55:55.905
<v Speaker 2>documentation inside the Firecracker repository,

00:55:55.905 --> 00:55:58.970
<v Speaker 2>it's pretty well explained on how to create

00:55:58.970 --> 00:55:59.930
<v Speaker 2>a request

00:56:00.570 --> 00:56:03.370
<v Speaker 2>and how to get the metadata from there.

00:56:03.930 --> 00:56:05.530
<v Speaker 2>And from that point on,

00:56:05.690 --> 00:56:09.210
<v Speaker 2>whether you're using system d or OpenRC or

00:56:09.210 --> 00:56:12.115
<v Speaker 2>any unit system that you like, you can

00:56:12.115 --> 00:56:14.355
<v Speaker 2>adapt it to to your environment.

00:56:15.635 --> 00:56:17.555
<v Speaker 0>Yeah. I mean, I guess

00:56:18.595 --> 00:56:20.195
<v Speaker 0>I I wanna make sure that my understanding

00:56:20.195 --> 00:56:21.955
<v Speaker 0>of it is not, you know, completely silly,

00:56:21.955 --> 00:56:23.395
<v Speaker 0>but it's it's really just a script that

00:56:23.395 --> 00:56:25.680
<v Speaker 0>runs on the VM. It has an HTTP

00:56:25.680 --> 00:56:27.280
<v Speaker 0>endpoint that says, I am this thing. Give

00:56:27.280 --> 00:56:29.119
<v Speaker 0>me some an IP address, and it's literally

00:56:29.119 --> 00:56:32.560
<v Speaker 0>just configuring it as, a standard Linux interface.

00:56:32.560 --> 00:56:35.680
<v Speaker 0>Yeah. Okay. Yeah. Yeah. So so so, actually,

00:56:35.840 --> 00:56:36.240
<v Speaker 1>other

00:56:37.585 --> 00:56:39.265
<v Speaker 1>the the the thing that we mostly do

00:56:39.265 --> 00:56:41.345
<v Speaker 1>is just try to create this very much

00:56:41.345 --> 00:56:43.665
<v Speaker 1>not in your way virtualization layer. And after

00:56:43.665 --> 00:56:45.025
<v Speaker 1>that, you have a Linux system, and you

00:56:45.025 --> 00:56:46.385
<v Speaker 1>do what you will what you need with

00:56:46.385 --> 00:56:48.625
<v Speaker 1>it. Yeah. And what this is, a conscious

00:56:48.625 --> 00:56:51.150
<v Speaker 1>decision. We were very supportive, and and some

00:56:51.150 --> 00:56:52.589
<v Speaker 1>of those other projects that I mentioned are

00:56:52.589 --> 00:56:54.589
<v Speaker 1>kind of developed by peer teams of ours.

00:56:54.589 --> 00:56:54.750
<v Speaker 1>But

00:56:56.190 --> 00:56:58.910
<v Speaker 1>and we'll definitely altogether invest in making it

00:56:58.910 --> 00:57:01.230
<v Speaker 1>easy to actually run, you know, containers or

00:57:01.230 --> 00:57:05.135
<v Speaker 1>entire Kubernetes pods with my MicroVim isolation. But

00:57:05.135 --> 00:57:07.855
<v Speaker 1>for Firecracker itself, it's just like a box

00:57:07.855 --> 00:57:09.855
<v Speaker 1>with strings, and then you can attach them

00:57:09.855 --> 00:57:11.855
<v Speaker 1>to what you need based on use case.

00:57:11.855 --> 00:57:13.855
<v Speaker 1>We're definitely gonna support any other

00:57:14.095 --> 00:57:16.974
<v Speaker 1>integrations that are not, you know, from from,

00:57:16.974 --> 00:57:19.135
<v Speaker 1>you know, from Firecracker container deal and all

00:57:19.135 --> 00:57:21.740
<v Speaker 1>of that. So I think that's actually a

00:57:21.980 --> 00:57:24.140
<v Speaker 1>positive that it's kinda more tedious to get

00:57:24.140 --> 00:57:26.700
<v Speaker 1>started at this level, for sure, but you

00:57:26.700 --> 00:57:29.420
<v Speaker 1>can do anything you want with it. And

00:57:29.500 --> 00:57:31.340
<v Speaker 1>I think there's integrations with Nomad and things

00:57:31.340 --> 00:57:32.460
<v Speaker 1>like that, which are not, you know, the

00:57:32.460 --> 00:57:33.260
<v Speaker 1>the regular

00:57:34.415 --> 00:57:35.215
<v Speaker 1>Kubernetes

00:57:35.215 --> 00:57:35.935
<v Speaker 1>path.

00:57:36.575 --> 00:57:38.815
<v Speaker 0>Okay. We'll just run through two more.

00:57:40.095 --> 00:57:42.095
<v Speaker 0>So we got a question here asking,

00:57:42.335 --> 00:57:42.975
<v Speaker 0>could

00:57:43.135 --> 00:57:46.255
<v Speaker 0>we use Firecracker and Kubernetes with Kubernetes networking?

00:57:46.255 --> 00:57:48.575
<v Speaker 0>Is this something that we've ignite does already?

00:57:50.310 --> 00:57:52.230
<v Speaker 1>Yeah. So I I don't have the full

00:57:52.550 --> 00:57:54.870
<v Speaker 1>answer, but it's there's two things that we

00:57:55.030 --> 00:57:57.030
<v Speaker 1>we've just done. There's Weave Ignite, which basically

00:57:57.030 --> 00:57:59.030
<v Speaker 1>kinda has a docker like interface

00:57:59.510 --> 00:58:00.870
<v Speaker 1>for Firecracker

00:58:01.045 --> 00:58:03.365
<v Speaker 1>VMs. And then there's Firecracker,

00:58:03.605 --> 00:58:06.085
<v Speaker 1>which I believe just does Kubernetes

00:58:06.085 --> 00:58:08.005
<v Speaker 1>pods with Firecracker isolation.

00:58:08.405 --> 00:58:10.405
<v Speaker 1>And then there's also Kata containers,

00:58:10.405 --> 00:58:12.565
<v Speaker 1>which runs Kubernetes

00:58:12.565 --> 00:58:14.165
<v Speaker 1>pods with VM isolation.

00:58:14.485 --> 00:58:16.220
<v Speaker 1>And I think they have an option for

00:58:16.380 --> 00:58:18.060
<v Speaker 1>Firecracker

00:58:18.700 --> 00:58:20.140
<v Speaker 1>or Cloud Hypervisor,

00:58:20.140 --> 00:58:22.460
<v Speaker 1>if I'm correct. I am I need I

00:58:22.460 --> 00:58:23.660
<v Speaker 1>need to check up on the full list,

00:58:23.660 --> 00:58:25.260
<v Speaker 1>but they have a number of VMs that

00:58:25.260 --> 00:58:26.619
<v Speaker 1>you can use, Firecracker included.

00:58:28.035 --> 00:58:30.115
<v Speaker 1>So those are the I think, like, the

00:58:30.115 --> 00:58:32.355
<v Speaker 1>strict Kubernetes integrations that I'm aware of. And

00:58:32.355 --> 00:58:33.955
<v Speaker 1>then there's also, as I mentioned,

00:58:34.435 --> 00:58:36.515
<v Speaker 1>Nomad, and I think OpenNebula is something in

00:58:36.515 --> 00:58:38.755
<v Speaker 1>this direction as well just to get your

00:58:38.755 --> 00:58:40.835
<v Speaker 1>workload running with VM isolation.

00:58:42.099 --> 00:58:42.740
<v Speaker 1>Alright.

00:58:43.300 --> 00:58:45.060
<v Speaker 1>I just wanna say that I I, you

00:58:45.060 --> 00:58:47.540
<v Speaker 1>know, I love this technology, but you only

00:58:47.540 --> 00:58:48.900
<v Speaker 1>need it if you actually

00:58:49.619 --> 00:58:51.780
<v Speaker 1>like, if you have a single kind of

00:58:51.780 --> 00:58:53.700
<v Speaker 1>single trust boundary in your application, then you

00:58:53.700 --> 00:58:56.020
<v Speaker 1>don't need to segregate like this. It's it's

00:58:56.020 --> 00:58:57.220
<v Speaker 1>more trouble than it's worth.

00:58:58.295 --> 00:59:00.055
<v Speaker 1>But if you have, like, a big machine

00:59:00.055 --> 00:59:02.375
<v Speaker 1>and, you know, you wanna run workloads from

00:59:02.375 --> 00:59:05.015
<v Speaker 1>10 customers or even, like, teams in your

00:59:05.015 --> 00:59:07.015
<v Speaker 1>in your own organization and you don't want

00:59:07.015 --> 00:59:09.575
<v Speaker 1>the their, you know, their binaries of knowing

00:59:09.575 --> 00:59:11.335
<v Speaker 1>about each other, then this is this is

00:59:11.335 --> 00:59:12.890
<v Speaker 1>basically what we're working towards. We wanna make

00:59:12.890 --> 00:59:15.050
<v Speaker 1>this easy and very, very secure.

00:59:16.330 --> 00:59:16.970
<v Speaker 0>Okay.

00:59:17.690 --> 00:59:20.090
<v Speaker 0>So we also got a question asking about

00:59:20.170 --> 00:59:21.050
<v Speaker 0>any

00:59:21.050 --> 00:59:23.690
<v Speaker 0>idea about snapshotting support in Kubernetes?

00:59:24.730 --> 00:59:26.730
<v Speaker 0>I'm not entirely sure what's been asked there,

00:59:26.730 --> 00:59:28.685
<v Speaker 0>but do you? Do you wanna throw an

00:59:28.685 --> 00:59:29.565
<v Speaker 0>answer at that?

00:59:30.605 --> 00:59:31.405
<v Speaker 1>Yeah.

00:59:31.405 --> 00:59:31.725
<v Speaker 1>I can

00:59:32.445 --> 00:59:34.445
<v Speaker 1>so I there the only thing that I'm

00:59:34.445 --> 00:59:36.125
<v Speaker 1>aware of is that there is a a

00:59:36.125 --> 00:59:38.445
<v Speaker 1>project called CRIU,

00:59:38.605 --> 00:59:41.085
<v Speaker 1>which is about kind of snapshotting the the

00:59:41.165 --> 00:59:44.590
<v Speaker 1>runtime of a container. Okay. And we've briefly

00:59:44.590 --> 00:59:46.270
<v Speaker 1>synced up with them on the Snapseed thing

00:59:46.270 --> 00:59:47.790
<v Speaker 1>to make sure that the approach works for

00:59:47.790 --> 00:59:48.270
<v Speaker 1>both.

00:59:48.750 --> 00:59:50.750
<v Speaker 1>But other than that, I I don't know

00:59:50.750 --> 00:59:52.270
<v Speaker 1>of of anything else. I think in the

00:59:52.270 --> 00:59:53.630
<v Speaker 1>long run, we definitely want

00:59:54.190 --> 00:59:56.765
<v Speaker 1>every that uses Firecracker to take advantage of

00:59:56.765 --> 00:59:59.325
<v Speaker 1>this. I'm hoping this will become the standard

00:59:59.325 --> 01:00:02.045
<v Speaker 1>because it is once we once we figure

01:00:02.045 --> 01:00:04.765
<v Speaker 1>out all the kind of security implications and

01:00:04.765 --> 01:00:06.285
<v Speaker 1>solve them and make them easy,

01:00:06.525 --> 01:00:08.045
<v Speaker 1>I think this is by far the best

01:00:08.045 --> 01:00:09.724
<v Speaker 1>way. You literally get

01:00:10.450 --> 01:00:11.810
<v Speaker 1>I think, you know, I think it's realistic

01:00:11.810 --> 01:00:13.810
<v Speaker 1>to just start entire pods in a few

01:00:13.810 --> 01:00:15.810
<v Speaker 1>milliseconds. You kind of warm them up once,

01:00:15.810 --> 01:00:18.130
<v Speaker 1>snapshot them, and then you just have almost

01:00:18.130 --> 01:00:19.890
<v Speaker 1>instant startup times everywhere.

01:00:20.050 --> 01:00:21.250
<v Speaker 1>But I think that's a couple of years

01:00:21.250 --> 01:00:23.425
<v Speaker 1>off at this point. K. Thank you for

01:00:23.425 --> 01:00:23.905
<v Speaker 0>that.

01:00:24.385 --> 01:00:26.305
<v Speaker 0>Nerd, I do see your other comments on

01:00:26.305 --> 01:00:27.265
<v Speaker 0>IPAM.

01:00:27.425 --> 01:00:29.984
<v Speaker 0>Hopefully, Gabriel can get to those after

01:00:29.984 --> 01:00:31.744
<v Speaker 0>the show for comments or whatever or anyone

01:00:31.744 --> 01:00:33.505
<v Speaker 0>else that's watching that has that knowledge. We'll

01:00:33.505 --> 01:00:35.665
<v Speaker 0>finish with question then, which is

01:00:36.099 --> 01:00:37.619
<v Speaker 0>well, then a simple one, but is there

01:00:37.619 --> 01:00:39.700
<v Speaker 0>any managed Firecracker

01:00:39.940 --> 01:00:40.579
<v Speaker 0>and

01:00:40.820 --> 01:00:42.900
<v Speaker 0>Deepak? Is that something that AWS offer,

01:00:43.460 --> 01:00:44.820
<v Speaker 0>or is that just Lambda?

01:00:45.140 --> 01:00:45.780
<v Speaker 1>Yeah.

01:00:46.420 --> 01:00:49.460
<v Speaker 1>Yeah. So there's no there's no, like, managed

01:00:49.460 --> 01:00:50.260
<v Speaker 1>Firecracker

01:00:50.260 --> 01:00:51.460
<v Speaker 1>instances or anything like that.

01:00:52.515 --> 01:00:54.915
<v Speaker 1>You'll be implicitly using fire you you'll be

01:00:54.915 --> 01:00:57.714
<v Speaker 1>running in a Firecracker micro VM if you're

01:00:57.714 --> 01:01:00.115
<v Speaker 1>on a Lambda function or for some types

01:01:00.115 --> 01:01:01.555
<v Speaker 1>of Fargate containers

01:01:01.795 --> 01:01:02.675
<v Speaker 1>today.

01:01:03.075 --> 01:01:03.635
<v Speaker 1>And, yeah,

01:01:04.660 --> 01:01:06.180
<v Speaker 1>there's as as I mentioned in the beginning,

01:01:06.180 --> 01:01:08.580
<v Speaker 1>there's a bunch of other integrations with open

01:01:08.580 --> 01:01:09.860
<v Speaker 1>source tools. You can take a look at

01:01:09.860 --> 01:01:10.260
<v Speaker 1>that.

01:01:10.820 --> 01:01:12.820
<v Speaker 0>Alright. Well, thank you, audience, for all of

01:01:12.820 --> 01:01:14.980
<v Speaker 0>those questions. We are gonna call that there,

01:01:14.980 --> 01:01:16.740
<v Speaker 0>though. Raider and Gabriel, thank you so much

01:01:16.740 --> 01:01:19.060
<v Speaker 0>for joining me today. That's a that snapshot

01:01:19.060 --> 01:01:20.180
<v Speaker 0>on demo was awesome.

01:01:20.875 --> 01:01:23.195
<v Speaker 0>Walking through that getting started was also great.

01:01:23.195 --> 01:01:25.035
<v Speaker 0>Just seeing how quick that was to do.

01:01:25.435 --> 01:01:27.675
<v Speaker 0>This is a really cool technology. Hopefully, people

01:01:27.675 --> 01:01:29.355
<v Speaker 0>will have their interest piqued and will check

01:01:29.355 --> 01:01:30.875
<v Speaker 0>it out. And please check out the GitHub

01:01:30.875 --> 01:01:33.515
<v Speaker 0>repository, contribute where you can. There's lots to

01:01:33.515 --> 01:01:33.755
<v Speaker 0>be done.

01:01:34.880 --> 01:01:37.280
<v Speaker 0>Thank you again. Have a wonderful afternoon, and

01:01:37.280 --> 01:01:38.560
<v Speaker 0>I'll speak to you, Boston.

01:01:39.440 --> 01:01:41.680
<v Speaker 1>Thank you as well. Bye. Thank

01:01:42.720 --> 01:01:42.880
<v Speaker 2>you.
