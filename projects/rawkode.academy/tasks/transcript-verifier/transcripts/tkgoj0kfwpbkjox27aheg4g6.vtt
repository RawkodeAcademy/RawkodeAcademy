WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 11a27ec3-c223-4464-bb41-145d6da7a15e
Created: 2025-04-29T22:45:42.292Z
Duration: 3058.0332
Channels: 1

00:06:47.775 --> 00:06:51.135
<v Speaker 0>Hello. Welcome. Welcome. Hi, Jennifer. How are you?

00:06:52.450 --> 00:06:55.250
<v Speaker 1>I'm good. And you? I'm very well. Thank

00:06:55.250 --> 00:06:57.730
<v Speaker 0>you. So we have just started streaming.

00:06:58.610 --> 00:06:59.410
<v Speaker 0>And

00:07:00.050 --> 00:07:01.490
<v Speaker 0>let's try and set a little bit of

00:07:01.490 --> 00:07:04.290
<v Speaker 0>background then on why we're meeting today and

00:07:04.290 --> 00:07:05.330
<v Speaker 0>what we wanna accomplish.

00:07:05.785 --> 00:07:08.745
<v Speaker 0>So we met up last week because you

00:07:08.745 --> 00:07:09.385
<v Speaker 0>had

00:07:09.705 --> 00:07:11.705
<v Speaker 0>a small problem that you wanted to try

00:07:11.705 --> 00:07:13.865
<v Speaker 0>and get over with TerraForm.

00:07:15.305 --> 00:07:17.145
<v Speaker 0>And I thought I could maybe help, but

00:07:17.145 --> 00:07:19.785
<v Speaker 0>we ran into a couple of challenges with

00:07:19.785 --> 00:07:21.120
<v Speaker 0>that. Do you wanna just add a little

00:07:21.120 --> 00:07:22.480
<v Speaker 0>bit of background on what you were trying

00:07:22.480 --> 00:07:23.280
<v Speaker 0>to accomplish?

00:07:24.000 --> 00:07:26.400
<v Speaker 1>Yeah. Sure. I mean, I have

00:07:26.800 --> 00:07:28.720
<v Speaker 1>and I contribute to a lot of different

00:07:28.720 --> 00:07:30.080
<v Speaker 1>projects and organization,

00:07:30.080 --> 00:07:32.480
<v Speaker 1>and usually, it's not that open when it

00:07:32.480 --> 00:07:36.465
<v Speaker 1>comes to managing the organization itself. So creating

00:07:36.465 --> 00:07:38.145
<v Speaker 1>a new repositories or

00:07:38.225 --> 00:07:39.905
<v Speaker 1>assigning new labels to

00:07:40.385 --> 00:07:41.345
<v Speaker 1>repositories

00:07:41.345 --> 00:07:44.465
<v Speaker 1>or adding new members and owners and teams.

00:07:44.465 --> 00:07:47.105
<v Speaker 1>It's something that you always have somebody to

00:07:47.190 --> 00:07:50.150
<v Speaker 1>to ping and ask because it's no.

00:07:50.470 --> 00:07:53.110
<v Speaker 1>That's how it works. But I realized that

00:07:53.110 --> 00:07:54.630
<v Speaker 1>there there is a a difference

00:07:54.950 --> 00:07:57.430
<v Speaker 1>a different way. There is a telephone data

00:07:57.430 --> 00:07:59.270
<v Speaker 1>provider that a few

00:08:00.070 --> 00:08:01.990
<v Speaker 1>organization use where you can,

00:08:02.605 --> 00:08:04.205
<v Speaker 1>yeah, programmatically

00:08:04.365 --> 00:08:07.325
<v Speaker 1>create a forecast and somebody can review it

00:08:07.325 --> 00:08:10.765
<v Speaker 1>and merge and the automation. Terraform itself will

00:08:10.765 --> 00:08:13.325
<v Speaker 1>make apply the change on the GitHub organization.

00:08:13.485 --> 00:08:15.005
<v Speaker 1>And I think it was it is a

00:08:15.005 --> 00:08:17.485
<v Speaker 1>good idea to be open in in that

00:08:17.485 --> 00:08:17.965
<v Speaker 1>as well.

00:08:19.220 --> 00:08:20.820
<v Speaker 1>And, yeah, that's why I asked you to

00:08:20.820 --> 00:08:22.740
<v Speaker 1>help me because I didn't know, like, Terraform

00:08:22.740 --> 00:08:25.139
<v Speaker 1>that well. And, yeah, it was a good

00:08:25.139 --> 00:08:25.940
<v Speaker 1>chance to

00:08:27.060 --> 00:08:28.820
<v Speaker 1>to learn something new.

00:08:29.780 --> 00:08:32.980
<v Speaker 0>Yeah. Exactly. Exactly. And we did manage to

00:08:32.980 --> 00:08:35.325
<v Speaker 0>get somewhat of the way. Right? So

00:08:35.645 --> 00:08:38.125
<v Speaker 0>using the the Terraform provider,

00:08:38.525 --> 00:08:42.045
<v Speaker 0>we were able to automate the creation of

00:08:42.045 --> 00:08:44.845
<v Speaker 0>our labels on a single repository.

00:08:45.899 --> 00:08:48.300
<v Speaker 0>We managed to use some of the new

00:08:48.300 --> 00:08:52.139
<v Speaker 0>features of HCL from Terraform 0.12 that allowed

00:08:52.139 --> 00:08:52.700
<v Speaker 0>us

00:08:52.940 --> 00:08:54.940
<v Speaker 0>not not to have to duplicate that resource

00:08:54.940 --> 00:08:57.100
<v Speaker 0>definition for each label we wanted as well.

00:08:57.100 --> 00:08:57.980
<v Speaker 0>So that was really cool.

00:08:58.755 --> 00:09:02.195
<v Speaker 0>But, unfortunately, the challenge came when you threw

00:09:02.195 --> 00:09:04.275
<v Speaker 0>that dreaded question at me of how

00:09:04.755 --> 00:09:06.835
<v Speaker 0>how can we create these labels on more

00:09:06.835 --> 00:09:08.915
<v Speaker 0>than one repository? And I was like, ah.

00:09:10.835 --> 00:09:12.755
<v Speaker 1>That's a challenge. You can you can nest

00:09:12.915 --> 00:09:16.410
<v Speaker 1>that you cannot nest for each, like, how

00:09:16.410 --> 00:09:18.890
<v Speaker 1>you do with code. So we we were

00:09:18.890 --> 00:09:20.010
<v Speaker 1>able to do a for each on the

00:09:20.010 --> 00:09:21.690
<v Speaker 1>labels, but we weren't able to do the

00:09:21.690 --> 00:09:23.850
<v Speaker 1>for each on labels and all the repository.

00:09:23.850 --> 00:09:26.649
<v Speaker 1>So that was, like yeah. That that's where

00:09:26.649 --> 00:09:27.130
<v Speaker 1>we stopped.

00:09:28.005 --> 00:09:31.205
<v Speaker 0>Exactly. Cool. Great. That's great great background there.

00:09:31.205 --> 00:09:33.525
<v Speaker 0>I think we covered everything. So what I

00:09:33.525 --> 00:09:34.805
<v Speaker 0>thought it would be cool for us to

00:09:34.805 --> 00:09:36.885
<v Speaker 0>do today is I'm also a big fan

00:09:36.885 --> 00:09:39.285
<v Speaker 0>of another infrastructure tool that shares a lot

00:09:39.285 --> 00:09:40.965
<v Speaker 0>of the same responsibilities

00:09:40.965 --> 00:09:42.965
<v Speaker 0>that Terraform does called Pulumi.

00:09:43.700 --> 00:09:45.620
<v Speaker 0>I know that you're a huge advocate based

00:09:45.620 --> 00:09:48.260
<v Speaker 0>on your talks of infrastructure as code. And

00:09:48.260 --> 00:09:50.020
<v Speaker 0>when you say that, you mean actual code.

00:09:50.020 --> 00:09:51.860
<v Speaker 0>So you you like to get your hands

00:09:51.860 --> 00:09:54.100
<v Speaker 0>and say go. Right? That's that's your children's

00:09:54.100 --> 00:09:56.740
<v Speaker 0>choice. So what I thought we would do

00:09:56.740 --> 00:09:57.940
<v Speaker 0>is is use Pulumi.

00:09:58.485 --> 00:10:00.325
<v Speaker 0>I'll try and explain the concepts as we

00:10:00.325 --> 00:10:01.925
<v Speaker 0>go for anyone that's not familiar with it

00:10:01.925 --> 00:10:03.525
<v Speaker 0>and why we're doing what we're doing. It

00:10:03.525 --> 00:10:05.765
<v Speaker 0>should feel very similar to Terraform.

00:10:05.925 --> 00:10:08.005
<v Speaker 0>The only the the major difference is is

00:10:08.005 --> 00:10:10.245
<v Speaker 0>that you use a real programming language to

00:10:10.245 --> 00:10:12.130
<v Speaker 0>do everything that we wanna do, which means

00:10:12.130 --> 00:10:14.610
<v Speaker 0>we have the ability to throw in loops

00:10:14.610 --> 00:10:17.650
<v Speaker 0>for whatever reason we want to duplicate the

00:10:17.650 --> 00:10:19.170
<v Speaker 0>creation of certain resources.

00:10:19.730 --> 00:10:22.850
<v Speaker 0>I'm gonna do this TypeScript because I'm most

00:10:22.850 --> 00:10:25.455
<v Speaker 0>familiar with that when working with Pulumi.

00:10:25.455 --> 00:10:27.855
<v Speaker 0>But assuming we get through this relatively quickly,

00:10:27.855 --> 00:10:29.615
<v Speaker 0>what I would like to do is then

00:10:30.015 --> 00:10:32.415
<v Speaker 0>just replicate one certain aspect of it in

00:10:32.415 --> 00:10:33.935
<v Speaker 0>Go so that you can see the comparison

00:10:33.935 --> 00:10:36.175
<v Speaker 0>of the code side by side and just

00:10:36.175 --> 00:10:38.160
<v Speaker 0>to show you that it works anyway. But

00:10:38.160 --> 00:10:40.000
<v Speaker 1>I don't I mean, I'm I'm a fan

00:10:40.000 --> 00:10:42.880
<v Speaker 1>of TypeScript because it's strictly typed, so I'm

00:10:42.880 --> 00:10:43.760
<v Speaker 1>good with that.

00:10:44.160 --> 00:10:45.520
<v Speaker 0>Excellent. Good.

00:10:46.560 --> 00:10:49.040
<v Speaker 0>Alright. So let's get started then. I'm gonna

00:10:49.040 --> 00:10:49.839
<v Speaker 0>share my screen.

00:10:51.615 --> 00:10:53.135
<v Speaker 0>Gonna pop over here,

00:10:53.535 --> 00:10:56.015
<v Speaker 0>and we should see that I have, at

00:10:56.015 --> 00:10:57.375
<v Speaker 0>this point in time,

00:10:57.855 --> 00:10:58.655
<v Speaker 0>a

00:10:58.735 --> 00:11:00.655
<v Speaker 0>almost empty repository.

00:11:01.135 --> 00:11:04.255
<v Speaker 0>So there is nothing inside of our TypeScript

00:11:04.255 --> 00:11:04.815
<v Speaker 0>directory.

00:11:05.579 --> 00:11:07.260
<v Speaker 0>So let's start there.

00:11:08.860 --> 00:11:11.259
<v Speaker 0>When I do this from the various scraps,

00:11:11.259 --> 00:11:13.019
<v Speaker 0>so, like, you know, nothing exists yet. So

00:11:13.019 --> 00:11:15.019
<v Speaker 0>we can see the entire flow as we

00:11:15.019 --> 00:11:17.259
<v Speaker 0>go from zero to everything with Pulumi.

00:11:18.035 --> 00:11:18.675
<v Speaker 0>So

00:11:18.995 --> 00:11:22.274
<v Speaker 0>Pulumi provides a wizard that allows us to

00:11:22.274 --> 00:11:24.595
<v Speaker 0>use a starting template to do a lot

00:11:24.595 --> 00:11:26.995
<v Speaker 0>of the boilerplate that is required to generate

00:11:26.995 --> 00:11:28.675
<v Speaker 0>whatever kind of infrastructure

00:11:28.675 --> 00:11:30.915
<v Speaker 0>that we want to provision.

00:11:31.889 --> 00:11:33.649
<v Speaker 0>So when I take Pulumi new

00:11:35.089 --> 00:11:36.850
<v Speaker 0>maybe I can make this bigger.

00:11:39.730 --> 00:11:42.370
<v Speaker 0>Oh, yeah. That's it. Okay. When I take

00:11:42.370 --> 00:11:43.089
<v Speaker 0>Pulumi new,

00:11:43.995 --> 00:11:45.515
<v Speaker 0>we can access to all the templates that

00:11:45.515 --> 00:11:47.195
<v Speaker 0>are available. So I don't want to do

00:11:47.195 --> 00:11:49.995
<v Speaker 0>anything with AWS or Azure or GCP. You

00:11:49.995 --> 00:11:52.635
<v Speaker 0>know, we're we're doing something slightly more unique

00:11:52.635 --> 00:11:54.315
<v Speaker 0>today. So I'm just gonna have to show

00:11:54.315 --> 00:11:55.355
<v Speaker 0>additional templates.

00:11:56.740 --> 00:11:58.100
<v Speaker 0>And that just gives you a list of

00:11:58.100 --> 00:11:59.540
<v Speaker 0>all of the templates and not just the

00:11:59.540 --> 00:12:01.380
<v Speaker 0>more popular ones. And what we can actually

00:12:01.380 --> 00:12:03.460
<v Speaker 0>see is that we do have access to

00:12:03.940 --> 00:12:06.260
<v Speaker 0>oh, okay. There we go. There's my arrow.

00:12:06.260 --> 00:12:08.660
<v Speaker 0>We also have access to packet templates, which

00:12:08.660 --> 00:12:10.805
<v Speaker 0>we'll play with another day. And so I'm

00:12:10.805 --> 00:12:12.165
<v Speaker 0>just gonna start with

00:12:12.805 --> 00:12:15.685
<v Speaker 0>a really basic TypeScript template where it has

00:12:15.685 --> 00:12:17.925
<v Speaker 0>no providers configured, and then we'll add on

00:12:17.925 --> 00:12:19.765
<v Speaker 0>the GitHub type provider

00:12:19.765 --> 00:12:20.645
<v Speaker 0>ourselves.

00:12:21.365 --> 00:12:23.925
<v Speaker 0>So we'll get this a name. We'll just

00:12:23.925 --> 00:12:25.605
<v Speaker 0>call this GitHub demo.

00:12:27.820 --> 00:12:30.779
<v Speaker 0>Description isn't important. The stack isn't important.

00:12:31.260 --> 00:12:33.260
<v Speaker 0>And this is the first thing which is

00:12:33.260 --> 00:12:33.980
<v Speaker 0>different

00:12:34.940 --> 00:12:36.220
<v Speaker 0>from Terraform.

00:12:36.220 --> 00:12:38.300
<v Speaker 0>So let me kinda cover this. Let's just

00:12:38.300 --> 00:12:38.940
<v Speaker 0>get it finished.

00:12:42.145 --> 00:12:42.945
<v Speaker 0>I

00:12:45.905 --> 00:12:46.545
<v Speaker 0>my

00:12:46.945 --> 00:12:49.185
<v Speaker 0>testing from earlier. Okay. So we'll start actually

00:12:49.185 --> 00:12:51.025
<v Speaker 0>from the scratch. I had some state saved

00:12:51.025 --> 00:12:53.825
<v Speaker 0>into my home directory with stacks that I

00:12:53.825 --> 00:12:55.665
<v Speaker 0>was testing the setup that I was working

00:12:55.665 --> 00:12:57.880
<v Speaker 0>on with. So I'm just gonna I just

00:12:57.880 --> 00:12:58.920
<v Speaker 0>blew that all away.

00:12:59.320 --> 00:13:01.560
<v Speaker 0>I'm gonna do a Pulumi login. Now the

00:13:01.560 --> 00:13:03.399
<v Speaker 0>Pulumi login is kinda like a back end

00:13:03.399 --> 00:13:05.480
<v Speaker 0>provider for Terraform. It's where do you want

00:13:05.480 --> 00:13:07.320
<v Speaker 0>to keep your state file? And I'm just

00:13:07.320 --> 00:13:08.120
<v Speaker 0>gonna use local.

00:13:08.525 --> 00:13:09.725
<v Speaker 0>That's all that means.

00:13:10.525 --> 00:13:12.845
<v Speaker 0>Then I will run new again,

00:13:13.485 --> 00:13:15.085
<v Speaker 0>but I don't have to run new again.

00:13:15.085 --> 00:13:16.925
<v Speaker 0>As you can see here, we actually have

00:13:16.925 --> 00:13:19.165
<v Speaker 0>the boilerplate there. It just failed to create

00:13:19.165 --> 00:13:19.965
<v Speaker 0>our stack.

00:13:20.365 --> 00:13:22.605
<v Speaker 0>So I'm gonna delete the stack file, which

00:13:22.605 --> 00:13:23.965
<v Speaker 0>is this Pulumi.dev,

00:13:24.060 --> 00:13:25.820
<v Speaker 0>and we'll create the stack.

00:13:27.260 --> 00:13:28.140
<v Speaker 0>And we

00:13:30.060 --> 00:13:31.980
<v Speaker 0>call it dev, and we've got to provide

00:13:31.980 --> 00:13:34.620
<v Speaker 0>a password. Now let's see. It's the second

00:13:34.620 --> 00:13:36.940
<v Speaker 0>major difference. The first major difference from Terraform

00:13:36.940 --> 00:13:37.580
<v Speaker 0>is

00:13:38.685 --> 00:13:40.365
<v Speaker 0>we're using a local provider, which I guess

00:13:40.365 --> 00:13:42.125
<v Speaker 0>you can do with Terraform. And the second

00:13:42.125 --> 00:13:44.685
<v Speaker 0>major difference is we're providing a pass phrase

00:13:44.685 --> 00:13:45.725
<v Speaker 0>or secret

00:13:46.125 --> 00:13:48.445
<v Speaker 0>to do secret encryption

00:13:48.524 --> 00:13:49.404
<v Speaker 0>locally

00:13:50.500 --> 00:13:53.060
<v Speaker 0>so we don't have to worry about providing

00:13:53.060 --> 00:13:55.700
<v Speaker 0>environment variables to pass in all of our

00:13:55.700 --> 00:13:56.740
<v Speaker 0>secret tokens.

00:13:57.220 --> 00:13:58.980
<v Speaker 0>Mhmm. I'll show you what that looks like

00:13:58.980 --> 00:14:00.660
<v Speaker 0>as we create our first one because we

00:14:00.660 --> 00:14:02.180
<v Speaker 0>we are gonna have to configure

00:14:02.845 --> 00:14:05.245
<v Speaker 0>the GitHub access token as well.

00:14:05.725 --> 00:14:07.645
<v Speaker 1>Okay. But let's see what we have just

00:14:07.645 --> 00:14:08.285
<v Speaker 0>now.

00:14:09.005 --> 00:14:09.805
<v Speaker 0>So

00:14:11.245 --> 00:14:14.525
<v Speaker 0>this is a TypeScript configuration which just sets

00:14:14.525 --> 00:14:16.525
<v Speaker 0>up some stuff for the TypeScript

00:14:16.525 --> 00:14:17.085
<v Speaker 0>compiler.

00:14:17.580 --> 00:14:19.500
<v Speaker 0>None of this is Pulumi centric if you've

00:14:19.500 --> 00:14:20.780
<v Speaker 0>worked with TypeScript before.

00:14:21.020 --> 00:14:22.460
<v Speaker 0>This file is just something that you write

00:14:22.460 --> 00:14:24.620
<v Speaker 0>once and hopefully forget about forever. So we're

00:14:24.620 --> 00:14:25.980
<v Speaker 0>not gonna cover that anymore.

00:14:26.700 --> 00:14:28.140
<v Speaker 0>We have a Pulumi.YAML,

00:14:28.140 --> 00:14:30.460
<v Speaker 0>which just has some metadata about our Pulumi

00:14:30.460 --> 00:14:32.105
<v Speaker 0>stack. So we just have the name and

00:14:32.105 --> 00:14:33.945
<v Speaker 0>the runtime that we're using. There are other

00:14:33.945 --> 00:14:34.825
<v Speaker 0>runtimes,

00:14:34.825 --> 00:14:36.585
<v Speaker 0>which is something that I really like about

00:14:36.585 --> 00:14:38.345
<v Speaker 0>Pulumi. And, hopefully, we do get to do

00:14:38.345 --> 00:14:39.865
<v Speaker 0>the Go stuff at the end. But,

00:14:40.265 --> 00:14:42.745
<v Speaker 0>although we can do Go and TypeScript, Pulumi

00:14:42.745 --> 00:14:44.745
<v Speaker 0>also offers us the ability to use the

00:14:44.745 --> 00:14:47.710
<v Speaker 0>dot net languages, which includes c sharp,

00:14:49.150 --> 00:14:50.190
<v Speaker 0>f sharp,

00:14:50.430 --> 00:14:51.630
<v Speaker 0>Visual Basic,

00:14:52.110 --> 00:14:53.550
<v Speaker 0>web I'm I'm sure there are other dot

00:14:53.550 --> 00:14:55.870
<v Speaker 0>net languages, which I'm forgetting. You also have

00:14:55.870 --> 00:14:57.790
<v Speaker 0>the ability to use Python and

00:15:00.315 --> 00:15:03.435
<v Speaker 0>something else. And so you you get a

00:15:03.435 --> 00:15:05.675
<v Speaker 0>good spectrum of languages, so you can hopefully

00:15:05.675 --> 00:15:08.475
<v Speaker 0>find one that you're comfortable writing. Mhmm. Then

00:15:08.475 --> 00:15:09.915
<v Speaker 0>we have our stack, and you can see

00:15:09.915 --> 00:15:12.475
<v Speaker 0>that because we're using the local login, which

00:15:12.475 --> 00:15:14.075
<v Speaker 0>means I've stored my state files on my

00:15:14.075 --> 00:15:14.635
<v Speaker 0>local machine,

00:15:15.200 --> 00:15:17.279
<v Speaker 0>It just does a little bit of configuration

00:15:17.279 --> 00:15:19.839
<v Speaker 0>around secrets and encryption so that anytime we

00:15:19.839 --> 00:15:21.279
<v Speaker 0>do add a secret to this file, it

00:15:21.279 --> 00:15:22.320
<v Speaker 0>will be encrypted,

00:15:22.480 --> 00:15:24.400
<v Speaker 0>and we will have to provide the decryption

00:15:24.400 --> 00:15:27.440
<v Speaker 0>password whenever we run a Pulumi command. This

00:15:27.440 --> 00:15:30.000
<v Speaker 0>just means we can actually really use Pulumi

00:15:30.000 --> 00:15:32.485
<v Speaker 0>as a GitOps tool because everything that we

00:15:32.485 --> 00:15:35.445
<v Speaker 0>need does actually live inside of the repository,

00:15:35.685 --> 00:15:37.845
<v Speaker 0>which makes this CI and CT integration stage

00:15:37.845 --> 00:15:38.805
<v Speaker 0>a lot simpler.

00:15:40.085 --> 00:15:42.645
<v Speaker 0>I see. So that's that's secure by default,

00:15:42.645 --> 00:15:44.725
<v Speaker 1>let's say. You can push that file and

00:15:45.125 --> 00:15:47.440
<v Speaker 1>that's it. Well, yeah. I mean, my password

00:15:47.440 --> 00:15:49.120
<v Speaker 0>is password one two three, so I'm not

00:15:49.120 --> 00:15:50.560
<v Speaker 0>going to push that because I say I

00:15:50.560 --> 00:15:52.240
<v Speaker 0>can anyone could brute force that in a

00:15:52.240 --> 00:15:53.200
<v Speaker 0>matter of seconds. But

00:15:54.640 --> 00:15:56.480
<v Speaker 0>if you were to provision or use a

00:15:56.480 --> 00:15:58.640
<v Speaker 0>really secure pass raise or something you had

00:15:58.640 --> 00:16:00.875
<v Speaker 0>stored in one password, yes, that repository would

00:16:00.875 --> 00:16:02.075
<v Speaker 0>be safe to store

00:16:02.475 --> 00:16:05.355
<v Speaker 0>and I see. A relatively public fashion.

00:16:05.915 --> 00:16:07.595
<v Speaker 0>That's not a challenge for any would be

00:16:07.595 --> 00:16:08.875
<v Speaker 0>hackers that are watching.

00:16:09.274 --> 00:16:09.995
<v Speaker 0>So

00:16:10.555 --> 00:16:13.420
<v Speaker 0>next up, we have our package dot JSON

00:16:13.420 --> 00:16:15.580
<v Speaker 0>because we are using Node. Js and TypeScript.

00:16:15.580 --> 00:16:17.980
<v Speaker 0>We just use the same ecosystem for distribute

00:16:17.980 --> 00:16:20.220
<v Speaker 0>in the SDKs that we need to consume.

00:16:20.779 --> 00:16:22.620
<v Speaker 0>So what I'm actually gonna do first is

00:16:22.620 --> 00:16:25.019
<v Speaker 0>just add our GitHub SDK so that we

00:16:25.019 --> 00:16:27.339
<v Speaker 0>can begin to provision GitHub resources.

00:16:28.355 --> 00:16:30.275
<v Speaker 0>If I check Pulumi,

00:16:30.915 --> 00:16:33.555
<v Speaker 0>GitHub, I should get complete. Yep.

00:16:34.355 --> 00:16:35.715
<v Speaker 0>And we can see that we're gonna use

00:16:35.715 --> 00:16:38.995
<v Speaker 0>the GitHub fader version one four two.

00:16:40.355 --> 00:16:42.275
<v Speaker 0>And we will just

00:16:42.660 --> 00:16:45.300
<v Speaker 0>well, we walk through the actual TypeScript code,

00:16:45.300 --> 00:16:47.220
<v Speaker 0>run a Yarn install.

00:16:49.620 --> 00:16:51.220
<v Speaker 0>So I was in the right directory. Yeah.

00:16:51.220 --> 00:16:52.580
<v Speaker 0>Good. Okay.

00:16:53.300 --> 00:16:56.579
<v Speaker 0>Next up, we have our TypeScript code itself.

00:16:56.715 --> 00:16:58.875
<v Speaker 0>So currently, the GARN install is running, which

00:16:58.875 --> 00:17:00.635
<v Speaker 0>is why we have the red squiggly.

00:17:02.795 --> 00:17:04.315
<v Speaker 0>But we're not actually doing

00:17:04.635 --> 00:17:06.554
<v Speaker 0>anything else yet.

00:17:06.875 --> 00:17:07.515
<v Speaker 0>So

00:17:08.234 --> 00:17:09.435
<v Speaker 0>let's import

00:17:09.435 --> 00:17:11.195
<v Speaker 0>our GitHub

00:17:11.929 --> 00:17:12.649
<v Speaker 0>provider.

00:17:16.089 --> 00:17:17.769
<v Speaker 0>And now we're in a position

00:17:18.010 --> 00:17:19.769
<v Speaker 0>where we can

00:17:20.170 --> 00:17:21.690
<v Speaker 0>create resources

00:17:22.809 --> 00:17:24.250
<v Speaker 0>in order to tell Pulumi to go and

00:17:24.250 --> 00:17:25.290
<v Speaker 0>do something for us.

00:17:26.284 --> 00:17:28.924
<v Speaker 0>Now that sounds a bit meta, so let's

00:17:28.924 --> 00:17:31.164
<v Speaker 0>just do this by example. So

00:17:31.725 --> 00:17:33.965
<v Speaker 0>anything that we assign to a variable in

00:17:33.965 --> 00:17:34.924
<v Speaker 0>Pulumi

00:17:35.404 --> 00:17:36.764
<v Speaker 0>will be created

00:17:36.765 --> 00:17:37.965
<v Speaker 0>as a resource.

00:17:38.910 --> 00:17:41.309
<v Speaker 0>So if I want to create a repository,

00:17:41.310 --> 00:17:42.510
<v Speaker 0>let's call this

00:17:43.470 --> 00:17:45.150
<v Speaker 0>demo repository.

00:17:46.190 --> 00:17:47.470
<v Speaker 0>We do a new

00:17:47.550 --> 00:17:50.030
<v Speaker 0>github.repository,

00:17:51.544 --> 00:17:54.504
<v Speaker 0>and we're gonna get this a resource name,

00:17:54.585 --> 00:17:56.745
<v Speaker 0>which is very similar to what Terraform has

00:17:56.745 --> 00:17:57.465
<v Speaker 0>as well.

00:17:57.865 --> 00:18:00.345
<v Speaker 0>So we'll call this demo

00:18:01.145 --> 00:18:02.024
<v Speaker 0>repository.

00:18:02.505 --> 00:18:04.825
<v Speaker 0>And I

00:18:04.039 --> 00:18:06.279
<v Speaker 0>I think I haven't used this guy operator

00:18:06.279 --> 00:18:08.919
<v Speaker 0>before, but all of the Pulumi

00:18:08.919 --> 00:18:11.960
<v Speaker 0>resources follow the very same pattern. Like and

00:18:11.960 --> 00:18:13.880
<v Speaker 0>Terraform does this too. It's that you have

00:18:13.880 --> 00:18:15.240
<v Speaker 0>a resource identifier,

00:18:15.240 --> 00:18:17.240
<v Speaker 0>and then you have an object which takes

00:18:17.240 --> 00:18:17.799
<v Speaker 0>parameters.

00:18:18.685 --> 00:18:21.165
<v Speaker 0>So inside of this object syntax here where

00:18:21.165 --> 00:18:22.605
<v Speaker 0>I have these curly braces,

00:18:22.685 --> 00:18:24.685
<v Speaker 0>we could just use the auto complete because

00:18:24.685 --> 00:18:26.445
<v Speaker 0>that's a TypeScript. We have all of this

00:18:26.445 --> 00:18:28.845
<v Speaker 0>information. That's nice. That's what I love,

00:18:29.485 --> 00:18:30.365
<v Speaker 1>having a Exactly.

00:18:31.020 --> 00:18:32.940
<v Speaker 0>Yeah. You you wanna be able to leverage

00:18:32.940 --> 00:18:34.700
<v Speaker 0>all that tooling we have in our IDEs

00:18:34.700 --> 00:18:36.540
<v Speaker 0>to make this as painless as possible. I

00:18:36.540 --> 00:18:37.820
<v Speaker 0>mean, like I said, I've not used this

00:18:37.820 --> 00:18:39.820
<v Speaker 0>provider before, and I I don't need to

00:18:39.820 --> 00:18:41.420
<v Speaker 0>know because my editor is gonna tell me

00:18:41.420 --> 00:18:43.660
<v Speaker 0>what I need to do. So That's great.

00:18:43.660 --> 00:18:43.900
<v Speaker 1>Yeah.

00:18:44.945 --> 00:18:46.385
<v Speaker 0>Let's give this a name.

00:18:46.785 --> 00:18:47.904
<v Speaker 0>We'll call this

00:18:48.385 --> 00:18:50.225
<v Speaker 0>demo repository.

00:18:51.905 --> 00:18:54.784
<v Speaker 0>Let's give it a dessert description.

00:18:54.865 --> 00:18:57.185
<v Speaker 0>Yep. So my demo

00:18:58.130 --> 00:18:59.170
<v Speaker 0>repository.

00:19:00.130 --> 00:19:02.530
<v Speaker 0>Here's my ID to clean that code up.

00:19:04.210 --> 00:19:05.650
<v Speaker 0>Let's just have a look and see. I

00:19:05.650 --> 00:19:07.250
<v Speaker 0>I don't wanna go through every variable. I

00:19:07.250 --> 00:19:09.010
<v Speaker 0>just wanna make sure there's nothing that is

00:19:09.730 --> 00:19:11.970
<v Speaker 1>Yeah. They also look similar to the telephone

00:19:11.970 --> 00:19:14.225
<v Speaker 1>provider as well because I see the auto

00:19:14.225 --> 00:19:17.105
<v Speaker 1>in it, the has issues, and all those

00:19:17.105 --> 00:19:17.664
<v Speaker 1>stuff.

00:19:18.304 --> 00:19:20.065
<v Speaker 1>So it looks familiar in the the term.

00:19:20.065 --> 00:19:22.304
<v Speaker 0>So it's really really funny that you mentioned

00:19:22.304 --> 00:19:25.664
<v Speaker 0>that. So this is the Terraform provider. What

00:19:25.664 --> 00:19:27.720
<v Speaker 0>Pulumi do is they actually actually build a

00:19:27.720 --> 00:19:30.520
<v Speaker 0>wrapper around it to analyze, like, the I

00:19:30.520 --> 00:19:32.200
<v Speaker 0>don't know if it's an actual ST,

00:19:32.280 --> 00:19:34.280
<v Speaker 0>but they analyze the guts of the Terraform

00:19:34.280 --> 00:19:36.440
<v Speaker 0>provider and then provide a Pulumi SDK on

00:19:36.440 --> 00:19:37.559
<v Speaker 0>the other side of it.

00:19:38.040 --> 00:19:40.905
<v Speaker 1>That's nice. Yeah. So

00:19:40.905 --> 00:19:42.825
<v Speaker 0>that's good. I mean, as people are like,

00:19:42.825 --> 00:19:44.424
<v Speaker 0>you can you can take advantage of the

00:19:44.424 --> 00:19:45.945
<v Speaker 0>fact that TerraForm has been around for so

00:19:45.945 --> 00:19:47.945
<v Speaker 0>many years and has loads of providers, and

00:19:47.945 --> 00:19:49.945
<v Speaker 0>people are always supporting it and using that

00:19:49.945 --> 00:19:52.664
<v Speaker 0>tool. So by adopting Pulumi, you you inherit

00:19:52.664 --> 00:19:54.265
<v Speaker 0>all of that as well, which is really

00:19:54.265 --> 00:19:54.424
<v Speaker 0>nice.

00:19:55.190 --> 00:19:56.389
<v Speaker 1>That's cool.

00:19:57.510 --> 00:19:58.950
<v Speaker 0>So I'm just gonna

00:19:59.670 --> 00:20:01.909
<v Speaker 0>we'll turn on has issues.

00:20:03.750 --> 00:20:04.710
<v Speaker 0>And that's it.

00:20:05.110 --> 00:20:06.549
<v Speaker 0>That's all I need to do to create

00:20:06.549 --> 00:20:07.350
<v Speaker 0>a repository.

00:20:08.975 --> 00:20:12.014
<v Speaker 0>Now because you do have some Terraform experience,

00:20:12.014 --> 00:20:13.695
<v Speaker 0>we'll just kinda cover one more thing, and

00:20:13.695 --> 00:20:15.054
<v Speaker 0>then we will test this.

00:20:16.255 --> 00:20:19.375
<v Speaker 0>The thing that we want to test is

00:20:20.490 --> 00:20:21.769
<v Speaker 0>exports.

00:20:23.130 --> 00:20:25.850
<v Speaker 0>So we'll say demo repository

00:20:28.570 --> 00:20:29.529
<v Speaker 0>equals

00:20:29.530 --> 00:20:30.890
<v Speaker 0>demo repository.

00:20:32.825 --> 00:20:35.145
<v Speaker 0>You're in there we go. So

00:20:35.465 --> 00:20:37.145
<v Speaker 0>what export style

00:20:37.545 --> 00:20:39.304
<v Speaker 0>why have I got a red squiggly?

00:20:39.785 --> 00:20:41.145
<v Speaker 0>Oh, no. Hold on.

00:20:41.545 --> 00:20:42.505
<v Speaker 0>Export

00:20:42.505 --> 00:20:46.185
<v Speaker 0>const

00:20:45.110 --> 00:20:46.470
<v Speaker 0>demo repository.

00:20:47.190 --> 00:20:50.230
<v Speaker 0>We'll get there. Alright. Okay. Cool. Squaddle's begun.

00:20:51.110 --> 00:20:54.630
<v Speaker 0>Whenever we export something from our TypeScript code,

00:20:55.190 --> 00:20:57.670
<v Speaker 0>are telling Pulumi that that is an output,

00:20:58.805 --> 00:21:01.365
<v Speaker 0>very similar to Terraform outputs. It basically means

00:21:01.365 --> 00:21:03.445
<v Speaker 0>I may wish to get this piece of

00:21:03.445 --> 00:21:06.325
<v Speaker 0>information from the state l relatively quickly

00:21:06.565 --> 00:21:07.924
<v Speaker 0>or or often.

00:21:08.245 --> 00:21:10.085
<v Speaker 0>So it just it's a little convenience around

00:21:10.085 --> 00:21:11.445
<v Speaker 0>that so you don't have to go through

00:21:11.445 --> 00:21:13.430
<v Speaker 0>too much. I'm just gonna pull out the

00:21:13.430 --> 00:21:16.549
<v Speaker 0>URN, which is the unique resource name.

00:21:17.670 --> 00:21:19.429
<v Speaker 0>Yeah. I think that's close enough,

00:21:19.830 --> 00:21:21.910
<v Speaker 0>which means that we can interact with that

00:21:21.910 --> 00:21:23.909
<v Speaker 0>outside of the stack if we want to.

00:21:24.390 --> 00:21:26.044
<v Speaker 1>I see. Okay.

00:21:27.405 --> 00:21:29.804
<v Speaker 0>Assuming I haven't done anything wrong,

00:21:31.405 --> 00:21:32.765
<v Speaker 0>we should be able to run up to

00:21:32.765 --> 00:21:35.005
<v Speaker 0>Pulumi app. Now we haven't configured the GitHub

00:21:35.005 --> 00:21:37.485
<v Speaker 0>authentication yet. I'm hoping it will complain and

00:21:37.485 --> 00:21:39.085
<v Speaker 0>yell at me and tell me what I

00:21:39.085 --> 00:21:40.605
<v Speaker 0>need to do for that to work.

00:21:41.780 --> 00:21:44.179
<v Speaker 0>So we'll enter our password.

00:21:48.580 --> 00:21:50.019
<v Speaker 0>Let's see. Yes.

00:21:52.179 --> 00:21:54.500
<v Speaker 0>Okay. So this resource requires to get up

00:21:54.500 --> 00:21:57.265
<v Speaker 0>organization to be set on the provider.

00:21:59.345 --> 00:22:00.225
<v Speaker 0>Alright.

00:22:00.225 --> 00:22:00.865
<v Speaker 0>So

00:22:01.025 --> 00:22:02.065
<v Speaker 0>let's see.

00:22:04.065 --> 00:22:06.465
<v Speaker 0>So there's a the concept of providers here.

00:22:06.465 --> 00:22:08.785
<v Speaker 0>I am hoping if we do GitHub

00:22:08.785 --> 00:22:09.745
<v Speaker 0>provider

00:22:09.745 --> 00:22:11.265
<v Speaker 0>equals new

00:22:12.030 --> 00:22:13.310
<v Speaker 0>get help provider.

00:22:15.550 --> 00:22:16.510
<v Speaker 0>What do we need?

00:22:24.745 --> 00:22:26.825
<v Speaker 0>Oh, that's not a thing. That's just auto

00:22:26.825 --> 00:22:28.345
<v Speaker 0>completing from my

00:22:30.665 --> 00:22:31.625
<v Speaker 0>there we go.

00:22:32.105 --> 00:22:34.025
<v Speaker 0>Okay. So we're gonna get this name. So

00:22:34.025 --> 00:22:36.265
<v Speaker 0>we'll call that Rawkode just because I'm using

00:22:36.265 --> 00:22:36.985
<v Speaker 0>my own account.

00:22:38.220 --> 00:22:40.860
<v Speaker 0>And we need a token

00:22:41.580 --> 00:22:43.419
<v Speaker 0>to cover in a second,

00:22:43.660 --> 00:22:44.779
<v Speaker 0>and and

00:22:44.780 --> 00:22:45.739
<v Speaker 0>organization

00:22:46.540 --> 00:22:49.020
<v Speaker 0>is optional. So we're just gonna skip over

00:22:49.020 --> 00:22:49.580
<v Speaker 0>that.

00:22:50.140 --> 00:22:51.740
<v Speaker 0>K. So now I have to inject my

00:22:51.740 --> 00:22:52.780
<v Speaker 0>token into this.

00:22:53.815 --> 00:22:54.855
<v Speaker 0>I have

00:22:56.935 --> 00:22:58.055
<v Speaker 0>not cheated,

00:22:58.215 --> 00:23:00.615
<v Speaker 0>but kept it hidden in a fail.

00:23:02.215 --> 00:23:04.055
<v Speaker 0>If I do get help talking p b

00:23:04.055 --> 00:23:04.775
<v Speaker 0>copy

00:23:05.495 --> 00:23:07.655
<v Speaker 0>and then go back into the directory,

00:23:08.340 --> 00:23:09.860
<v Speaker 0>What I want to do is now use

00:23:09.860 --> 00:23:10.980
<v Speaker 0>the Pulumi

00:23:11.780 --> 00:23:14.260
<v Speaker 0>secret mechanism and contact mechanism to set this

00:23:14.260 --> 00:23:16.499
<v Speaker 0>value. Provider config

00:23:16.580 --> 00:23:17.619
<v Speaker 0>set

00:23:18.020 --> 00:23:19.059
<v Speaker 0>secret

00:23:20.179 --> 00:23:20.820
<v Speaker 0>hub

00:23:20.980 --> 00:23:21.539
<v Speaker 0>token.

00:23:23.745 --> 00:23:25.745
<v Speaker 0>But, hopefully don't think it shows you this

00:23:25.745 --> 00:23:26.945
<v Speaker 0>when I paste it.

00:23:29.745 --> 00:23:31.105
<v Speaker 0>That would've been awkward.

00:23:31.505 --> 00:23:33.105
<v Speaker 1>Then you made a good job.

00:23:33.985 --> 00:23:36.545
<v Speaker 0>Okay. Now what I can oh, no. Maybe

00:23:36.545 --> 00:23:38.065
<v Speaker 0>I can't show you because I told everyone

00:23:38.065 --> 00:23:38.945
<v Speaker 0>my password is.

00:23:42.010 --> 00:23:44.169
<v Speaker 0>What we have here is just the secure

00:23:44.169 --> 00:23:46.330
<v Speaker 0>encrypted version of that string, which I'll take

00:23:46.330 --> 00:23:47.450
<v Speaker 0>away very quickly.

00:23:47.610 --> 00:23:48.970
<v Speaker 0>So I could commit this to get if

00:23:48.970 --> 00:23:50.809
<v Speaker 0>I was using the secure password. Okay.

00:23:51.455 --> 00:23:53.055
<v Speaker 0>And maybe we want to fill in this

00:23:53.055 --> 00:23:55.375
<v Speaker 0>token. I can't Pulumi makes this very simple

00:23:55.375 --> 00:23:57.774
<v Speaker 0>too. So we do config equals

00:23:58.255 --> 00:23:59.695
<v Speaker 0>new Pulumi

00:24:00.415 --> 00:24:01.294
<v Speaker 0>config.

00:24:03.855 --> 00:24:04.255
<v Speaker 0>Great.

00:24:06.190 --> 00:24:08.349
<v Speaker 0>Pulumi.

00:24:11.390 --> 00:24:13.070
<v Speaker 0>Oh, my auto complete is broken.

00:24:17.195 --> 00:24:20.394
<v Speaker 0>And config equals new Pulumi.

00:24:23.515 --> 00:24:25.835
<v Speaker 0>Oh, wait. Why is that a red squiggle?

00:24:33.430 --> 00:24:35.350
<v Speaker 0>And my provider is there.

00:24:39.430 --> 00:24:40.950
<v Speaker 0>Try deleting

00:24:40.950 --> 00:24:42.550
<v Speaker 0>and pulling it back in.

00:24:48.394 --> 00:24:49.354
<v Speaker 0>That's weird.

00:24:50.394 --> 00:24:52.154
<v Speaker 0>I'm sure that's the same piece of code.

00:24:52.154 --> 00:24:54.474
<v Speaker 1>Oh, it's a it's a typo, I think.

00:24:54.794 --> 00:24:55.914
<v Speaker 0>Oh, no. No.

00:24:57.195 --> 00:24:59.114
<v Speaker 0>So we could do config,

00:24:59.115 --> 00:25:01.115
<v Speaker 0>and then down here, what we'd say is

00:25:01.115 --> 00:25:02.315
<v Speaker 0>we require

00:25:02.315 --> 00:25:02.875
<v Speaker 0>secret.

00:25:04.010 --> 00:25:06.009
<v Speaker 0>And I called my secret

00:25:06.169 --> 00:25:07.210
<v Speaker 0>GitHub.

00:25:08.010 --> 00:25:10.010
<v Speaker 0>I think I called it GitHub token. Let's

00:25:10.010 --> 00:25:10.490
<v Speaker 0>just

00:25:12.409 --> 00:25:14.570
<v Speaker 0>yeah. GitHub underscore token. Perfect. Okay.

00:25:14.970 --> 00:25:17.450
<v Speaker 0>So we're pulling on the configuration,

00:25:17.450 --> 00:25:19.049
<v Speaker 0>which is a stack based configuration

00:25:19.615 --> 00:25:21.294
<v Speaker 0>from our dev stack.

00:25:21.775 --> 00:25:24.015
<v Speaker 0>We want to require the secret. If that

00:25:24.015 --> 00:25:25.855
<v Speaker 0>wasn't set, it would complain.

00:25:26.095 --> 00:25:26.735
<v Speaker 0>And, hopefully,

00:25:27.135 --> 00:25:28.815
<v Speaker 0>we now have enough

00:25:30.495 --> 00:25:31.295
<v Speaker 0>for this to work.

00:25:42.110 --> 00:25:44.590
<v Speaker 0>Okay. So I do need an organization.

00:25:47.070 --> 00:25:49.385
<v Speaker 1>So it's not that option? It's not that

00:25:49.385 --> 00:25:50.344
<v Speaker 0>option. Okay.

00:25:53.865 --> 00:25:55.544
<v Speaker 0>Can I be my own?

00:25:57.145 --> 00:25:59.945
<v Speaker 0>Assuming I can just create a repository on

00:25:59.945 --> 00:26:01.865
<v Speaker 0>my

00:26:09.400 --> 00:26:10.760
<v Speaker 0>oh, what's happened there?

00:26:20.775 --> 00:26:22.935
<v Speaker 0>I don't suppose you changed anything in a

00:26:22.935 --> 00:26:23.575
<v Speaker 0>dev file.

00:26:30.419 --> 00:26:32.419
<v Speaker 0>Okay. Let's just try

00:26:32.500 --> 00:26:33.460
<v Speaker 0>I'm set.

00:26:33.700 --> 00:26:34.820
<v Speaker 0>Pulumi.

00:26:40.580 --> 00:26:40.980
<v Speaker 1>Mhmm.

00:26:42.605 --> 00:26:44.525
<v Speaker 0>Right. I'll set it myself.

00:26:48.125 --> 00:26:49.245
<v Speaker 0>Equals

00:26:49.325 --> 00:26:50.445
<v Speaker 0>password.

00:26:54.525 --> 00:26:55.245
<v Speaker 0>Weird.

00:26:55.645 --> 00:26:57.325
<v Speaker 1>Right. Let's I got confused.

00:26:58.050 --> 00:26:59.170
<v Speaker 1>It's emotional.

00:26:59.650 --> 00:27:00.610
<v Speaker 1>Yeah. I

00:27:01.330 --> 00:27:02.530
<v Speaker 1>know how it works.

00:27:03.730 --> 00:27:04.770
<v Speaker 0>So

00:27:05.810 --> 00:27:08.130
<v Speaker 0>alright. Let's we're getting the same error again.

00:27:08.130 --> 00:27:09.810
<v Speaker 0>So this demo is not going very well.

00:27:09.810 --> 00:27:12.370
<v Speaker 0>This resource requires a GitHub organization to be

00:27:12.370 --> 00:27:15.025
<v Speaker 0>set on a provider. Now I believe I

00:27:15.025 --> 00:27:17.025
<v Speaker 0>set oh, no. Okay.

00:27:17.505 --> 00:27:18.945
<v Speaker 0>I do this all the time with the

00:27:18.945 --> 00:27:20.785
<v Speaker 0>Kubernetes provider as well. So

00:27:21.425 --> 00:27:24.145
<v Speaker 0>the problem is I created a provider and

00:27:24.145 --> 00:27:25.345
<v Speaker 0>didn't actually

00:27:26.470 --> 00:27:28.309
<v Speaker 0>use that Oh, you're be using it.

00:27:28.630 --> 00:27:30.710
<v Speaker 0>Exactly. So I wonder if I could probably

00:27:30.710 --> 00:27:32.149
<v Speaker 0>remove that organization,

00:27:32.149 --> 00:27:33.349
<v Speaker 0>and it would work.

00:27:33.590 --> 00:27:35.350
<v Speaker 0>We'll leave it on just now, we'll see

00:27:35.350 --> 00:27:36.549
<v Speaker 0>what happens. But

00:27:36.870 --> 00:27:38.789
<v Speaker 0>we have to tell it to use our

00:27:38.789 --> 00:27:39.350
<v Speaker 0>provider.

00:27:41.265 --> 00:27:42.785
<v Speaker 0>Yep. And then the R field.

00:27:43.185 --> 00:27:43.825
<v Speaker 0>Yeah.

00:27:44.145 --> 00:27:46.545
<v Speaker 0>So I could have protected all of this.

00:27:46.545 --> 00:27:48.785
<v Speaker 0>Right? Okay. Come on. We got this.

00:27:54.190 --> 00:27:55.470
<v Speaker 0>That's alright.

00:27:57.390 --> 00:27:58.830
<v Speaker 0>So how do we so

00:28:00.750 --> 00:28:03.230
<v Speaker 0>is there something I can provide?

00:28:03.470 --> 00:28:06.350
<v Speaker 0>So because this uses the Terraform provider, what

00:28:06.350 --> 00:28:08.110
<v Speaker 0>we can actually do

00:28:08.275 --> 00:28:10.754
<v Speaker 0>is just go check the TerraForm documentation

00:28:12.434 --> 00:28:15.475
<v Speaker 0>and see what requirements the repository

00:28:15.875 --> 00:28:16.355
<v Speaker 0>has.

00:28:23.580 --> 00:28:25.740
<v Speaker 0>So that needs an owner.

00:28:26.460 --> 00:28:28.700
<v Speaker 0>K. So let's set the owner.

00:28:31.180 --> 00:28:31.740
<v Speaker 0>Owner.

00:28:35.605 --> 00:28:37.605
<v Speaker 0>Weird formatting thing up.

00:28:40.565 --> 00:28:42.165
<v Speaker 0>I cannot set an owner.

00:28:54.370 --> 00:28:55.730
<v Speaker 0>Let's have a look at what this is

00:28:55.730 --> 00:28:56.769
<v Speaker 0>trying to do.

00:29:01.169 --> 00:29:02.529
<v Speaker 0>What about here?

00:29:05.305 --> 00:29:06.105
<v Speaker 0>Individual.

00:29:06.345 --> 00:29:07.304
<v Speaker 0>There we go.

00:29:08.585 --> 00:29:09.945
<v Speaker 0>And that's required.

00:29:10.345 --> 00:29:12.985
<v Speaker 0>Billion. So we're gonna say true

00:29:14.825 --> 00:29:16.585
<v Speaker 0>and not set the organization.

00:29:17.470 --> 00:29:19.230
<v Speaker 1>I think that's should be a

00:29:21.070 --> 00:29:23.469
<v Speaker 1>Logically, it looks enough. Let's see.

00:29:24.990 --> 00:29:27.709
<v Speaker 0>A smart person would have tested this previously.

00:29:27.789 --> 00:29:28.509
<v Speaker 0>Alright.

00:29:29.070 --> 00:29:30.669
<v Speaker 1>So That's why we do streaming.

00:29:31.875 --> 00:29:32.835
<v Speaker 0>The provider.

00:29:34.515 --> 00:29:36.755
<v Speaker 0>Yeah. We'll get there. I don't mind. I

00:29:36.755 --> 00:29:40.035
<v Speaker 0>don't mind looking silly. So provider config warning,

00:29:40.035 --> 00:29:43.795
<v Speaker 0>individual deprecated for versions later than 03/2000.

00:29:45.530 --> 00:29:48.570
<v Speaker 0>Absence of an organization already enables this.

00:29:50.170 --> 00:29:52.649
<v Speaker 1>It looks like forever race condition.

00:29:53.050 --> 00:29:54.970
<v Speaker 0>It does. It's not it's not gonna be

00:29:54.970 --> 00:29:56.410
<v Speaker 0>the best demo with the it may even

00:29:56.410 --> 00:29:58.795
<v Speaker 0>get past the first hurdle. Alright. I mean,

00:29:58.795 --> 00:30:00.395
<v Speaker 1>it's it's a it's a warning, so it

00:30:00.395 --> 00:30:03.435
<v Speaker 1>shouldn't fail for that. I presume it fails

00:30:03.435 --> 00:30:05.515
<v Speaker 1>from some some other reason. Oh, because the

00:30:05.515 --> 00:30:07.515
<v Speaker 1>GitHub organization is required.

00:30:07.675 --> 00:30:08.235
<v Speaker 1>Yeah.

00:30:09.675 --> 00:30:11.915
<v Speaker 0>Yeah. So it still says the GitHub organization

00:30:12.240 --> 00:30:14.080
<v Speaker 0>to be set on the provider. You know

00:30:14.080 --> 00:30:15.840
<v Speaker 0>what? I am very tempted

00:30:16.160 --> 00:30:18.960
<v Speaker 0>to just create a very quick organization to

00:30:18.960 --> 00:30:21.679
<v Speaker 0>get us past that problem, and then I

00:30:21.679 --> 00:30:23.360
<v Speaker 0>will work out how to make it work.

00:30:25.135 --> 00:30:27.375
<v Speaker 1>Yeah. I think you should do it.

00:30:29.375 --> 00:30:31.295
<v Speaker 0>And then we will file bug reports because

00:30:31.295 --> 00:30:33.215
<v Speaker 0>we are good open source citizens.

00:30:33.615 --> 00:30:35.455
<v Speaker 0>Alright. That's what we'll do at the end

00:30:35.455 --> 00:30:36.255
<v Speaker 1>of the stream.

00:30:37.700 --> 00:30:41.059
<v Speaker 0>Alright. So we call this Pulumidemoorg.

00:30:42.500 --> 00:30:44.260
<v Speaker 0>Let's put in my own email.

00:30:44.980 --> 00:30:45.860
<v Speaker 0>Personal.

00:30:47.220 --> 00:30:47.620
<v Speaker 0>Go.

00:30:51.105 --> 00:30:51.825
<v Speaker 0>Skip.

00:30:53.345 --> 00:30:56.865
<v Speaker 0>Alright. My organization is called Pulumi demo.

00:30:58.945 --> 00:31:01.185
<v Speaker 0>That organization will now live forever because I

00:31:01.185 --> 00:31:02.785
<v Speaker 0>will forget to delete it for the rest

00:31:02.785 --> 00:31:03.985
<v Speaker 0>of my days. So

00:31:05.860 --> 00:31:07.220
<v Speaker 0>I'm I'm assuming

00:31:07.220 --> 00:31:09.619
<v Speaker 0>we can maybe pass in a string here.

00:31:10.580 --> 00:31:11.460
<v Speaker 0>Yep.

00:31:11.540 --> 00:31:14.019
<v Speaker 0>Organization name to manage. Okay.

00:31:15.700 --> 00:31:20.035
<v Speaker 0>If individual is false, organization is required. Yeah.

00:31:20.035 --> 00:31:22.274
<v Speaker 0>That's annoying. Okay. Let's see what happens.

00:31:28.835 --> 00:31:30.915
<v Speaker 0>Ah, k. That's better.

00:31:34.009 --> 00:31:35.529
<v Speaker 0>Do we have a repository?

00:31:35.769 --> 00:31:36.570
<v Speaker 0>We do.

00:31:36.809 --> 00:31:40.090
<v Speaker 0>Nice. Okay. Nice. I mean, a bit more

00:31:40.090 --> 00:31:42.009
<v Speaker 0>complicated than I was hoping for for a

00:31:42.009 --> 00:31:43.850
<v Speaker 0>livestream, but we got there in the end.

00:31:43.850 --> 00:31:44.489
<v Speaker 0>Okay.

00:31:46.009 --> 00:31:46.809
<v Speaker 0>Let's

00:31:49.135 --> 00:31:51.135
<v Speaker 0>because this is okay. What I think what

00:31:51.135 --> 00:31:52.575
<v Speaker 0>is really cool. Like, I think we've got

00:31:52.575 --> 00:31:54.414
<v Speaker 0>a good idea of what Pulumi is doing.

00:31:54.575 --> 00:31:55.134
<v Speaker 0>So

00:31:55.375 --> 00:31:58.015
<v Speaker 0>rather than jumping straight to the labels, let's

00:31:58.015 --> 00:31:59.455
<v Speaker 0>show off one of the benefits of test

00:31:59.455 --> 00:32:00.975
<v Speaker 0>being in pure code. Right?

00:32:01.215 --> 00:32:01.855
<v Speaker 0>Because Mhmm.

00:32:03.490 --> 00:32:04.369
<v Speaker 0>We can

00:32:05.090 --> 00:32:07.250
<v Speaker 0>make this a function. This is my favorite

00:32:07.250 --> 00:32:09.489
<v Speaker 0>thing to do in Pulumi is

00:32:09.490 --> 00:32:11.409
<v Speaker 0>to take logic like this,

00:32:12.370 --> 00:32:13.249
<v Speaker 0>create

00:32:13.409 --> 00:32:14.450
<v Speaker 0>functions

00:32:14.450 --> 00:32:15.809
<v Speaker 0>which take parameters,

00:32:17.605 --> 00:32:18.404
<v Speaker 0>and

00:32:21.044 --> 00:32:22.085
<v Speaker 0>return

00:32:22.405 --> 00:32:23.924
<v Speaker 0>templated objects

00:32:24.005 --> 00:32:24.965
<v Speaker 0>like so.

00:32:25.285 --> 00:32:27.605
<v Speaker 0>So instead of passing in a hard coding

00:32:27.605 --> 00:32:28.404
<v Speaker 0>name,

00:32:28.485 --> 00:32:30.005
<v Speaker 0>we're gonna parameterize

00:32:30.005 --> 00:32:30.405
<v Speaker 0>this.

00:32:31.190 --> 00:32:33.110
<v Speaker 0>I'm not gonna bother with these for now.

00:32:33.110 --> 00:32:34.869
<v Speaker 0>We could template that course later.

00:32:35.429 --> 00:32:37.110
<v Speaker 0>And then just here

00:32:38.710 --> 00:32:39.830
<v Speaker 0>comes

00:32:41.750 --> 00:32:43.910
<v Speaker 0>create repo

00:32:44.635 --> 00:32:46.315
<v Speaker 0>demo repository.

00:32:48.235 --> 00:32:50.154
<v Speaker 0>And I can do that again.

00:32:53.595 --> 00:32:56.315
<v Speaker 0>We've got our output there. Remind me to

00:32:56.315 --> 00:32:58.155
<v Speaker 0>cover outputs before we wrap up.

00:32:58.850 --> 00:33:00.370
<v Speaker 0>But what should happen now is if I

00:33:00.370 --> 00:33:02.530
<v Speaker 0>run Pulumi up, we have managed to extract

00:33:02.530 --> 00:33:05.010
<v Speaker 0>core logic for both. We've managed to break

00:33:05.010 --> 00:33:05.809
<v Speaker 0>everything.

00:33:06.610 --> 00:33:09.090
<v Speaker 0>Yeah. I didn't I didn't give my that

00:33:09.330 --> 00:33:10.770
<v Speaker 0>I need to give it a title. There

00:33:10.770 --> 00:33:11.090
<v Speaker 0>we go.

00:33:12.135 --> 00:33:14.934
<v Speaker 0>Yeah. TypeScript keep me correct. So good.

00:33:16.455 --> 00:33:17.735
<v Speaker 0>Good job, TypeScript.

00:33:17.815 --> 00:33:18.695
<v Speaker 0>Yes.

00:33:18.695 --> 00:33:19.895
<v Speaker 0>Thank you, TypeScript.

00:33:20.775 --> 00:33:23.335
<v Speaker 0>Hopefully, what we see here is we're gonna

00:33:23.335 --> 00:33:26.320
<v Speaker 0>update one repository where we remove the description

00:33:26.320 --> 00:33:27.680
<v Speaker 0>and the

00:33:27.760 --> 00:33:29.200
<v Speaker 0>issues thing,

00:33:29.600 --> 00:33:30.960
<v Speaker 0>and we create another one.

00:33:32.080 --> 00:33:33.760
<v Speaker 0>So if we pop over here,

00:33:34.640 --> 00:33:36.480
<v Speaker 0>we have our two repositories

00:33:36.960 --> 00:33:39.440
<v Speaker 0>using the same block of code that we

00:33:39.680 --> 00:33:41.725
<v Speaker 0>you know, we extracted that logic and stored

00:33:41.725 --> 00:33:43.245
<v Speaker 0>it as a function, which I think is

00:33:43.245 --> 00:33:44.365
<v Speaker 0>really, really cool.

00:33:44.765 --> 00:33:46.845
<v Speaker 1>Yeah. And I think we it it's worth

00:33:46.845 --> 00:33:49.165
<v Speaker 1>to repeat the same, like, concept we made

00:33:49.165 --> 00:33:50.765
<v Speaker 1>for the last video that it's I think

00:33:50.765 --> 00:33:51.725
<v Speaker 1>it's important

00:33:51.965 --> 00:33:54.850
<v Speaker 1>to those kind of utility functions because they

00:33:54.850 --> 00:33:56.850
<v Speaker 1>had consist consistency

00:33:57.410 --> 00:33:59.570
<v Speaker 1>in terms of how our repository looks like

00:33:59.570 --> 00:34:02.450
<v Speaker 1>or when we will get to team creation

00:34:02.450 --> 00:34:04.370
<v Speaker 1>and, like, owners

00:34:04.695 --> 00:34:05.414
<v Speaker 1>and

00:34:05.495 --> 00:34:06.455
<v Speaker 1>maintainers,

00:34:06.455 --> 00:34:08.295
<v Speaker 1>you will have the same structure

00:34:08.935 --> 00:34:12.054
<v Speaker 1>no matter, like, who is opening up forecast.

00:34:12.054 --> 00:34:14.375
<v Speaker 1>I think that's that's very important as well.

00:34:14.455 --> 00:34:15.895
<v Speaker 0>Oh, yeah. Totally. Totally.

00:34:16.135 --> 00:34:16.855
<v Speaker 0>So

00:34:17.850 --> 00:34:20.330
<v Speaker 0>let's solve your problem from the last scenario,

00:34:20.330 --> 00:34:21.850
<v Speaker 0>and then we'll we'll Yeah. We'll wrap we'll

00:34:21.850 --> 00:34:24.250
<v Speaker 0>wrap this up. So let's say that we

00:34:24.250 --> 00:34:25.930
<v Speaker 0>want our create

00:34:26.730 --> 00:34:27.770
<v Speaker 0>labels,

00:34:27.770 --> 00:34:29.290
<v Speaker 0>and we're just gonna go straight into this

00:34:29.290 --> 00:34:31.450
<v Speaker 0>being a function where we have a name

00:34:31.450 --> 00:34:32.170
<v Speaker 0>and a color.

00:34:34.994 --> 00:34:37.234
<v Speaker 0>This is a function, and that's going to

00:34:37.234 --> 00:34:39.715
<v Speaker 0>return a new GitHub.

00:34:41.074 --> 00:34:42.435
<v Speaker 0>Oh, typing.

00:34:42.514 --> 00:34:43.554
<v Speaker 0>There we go.

00:34:44.275 --> 00:34:46.275
<v Speaker 0>And we want an issue label where the

00:34:46.275 --> 00:34:47.234
<v Speaker 0>name is name.

00:34:48.339 --> 00:34:50.339
<v Speaker 0>Oh, so because this is gonna be a

00:34:50.339 --> 00:34:52.579
<v Speaker 0>template resource, and we're gonna apply these labels

00:34:52.579 --> 00:34:54.179
<v Speaker 0>to multiple repositories,

00:34:54.179 --> 00:34:56.420
<v Speaker 0>that's with resolve and a name conflict on

00:34:56.420 --> 00:34:57.860
<v Speaker 0>the second repository.

00:34:58.500 --> 00:34:59.300
<v Speaker 0>So

00:34:59.380 --> 00:35:00.660
<v Speaker 0>we will come back to that in just

00:35:00.660 --> 00:35:00.980
<v Speaker 0>a moment.

00:35:01.905 --> 00:35:03.425
<v Speaker 0>But we'll give it a name, and then

00:35:03.425 --> 00:35:04.785
<v Speaker 0>we'll do color.

00:35:05.905 --> 00:35:08.625
<v Speaker 0>I will do name as name,

00:35:09.265 --> 00:35:09.905
<v Speaker 0>and

00:35:10.225 --> 00:35:12.945
<v Speaker 0>this is going to need a repository.

00:35:13.185 --> 00:35:14.945
<v Speaker 0>Okay. So that means we have a new

00:35:14.945 --> 00:35:15.345
<v Speaker 0>parameter.

00:35:15.950 --> 00:35:17.950
<v Speaker 0>So we're gonna create a label on a

00:35:17.950 --> 00:35:18.750
<v Speaker 0>repo,

00:35:20.990 --> 00:35:23.150
<v Speaker 0>and then we can use that template best

00:35:23.150 --> 00:35:24.910
<v Speaker 0>for guaranteed uniqueness.

00:35:26.750 --> 00:35:28.830
<v Speaker 0>So what we're actually gonna say is repo

00:35:28.830 --> 00:35:29.550
<v Speaker 0>dot name,

00:35:30.195 --> 00:35:30.835
<v Speaker 0>Repo

00:35:31.075 --> 00:35:32.915
<v Speaker 1>Oh, because that's the identifier

00:35:33.315 --> 00:35:36.195
<v Speaker 0>for that. So each repository would then be

00:35:36.195 --> 00:35:38.595
<v Speaker 0>a unique resource based on the repository and

00:35:38.595 --> 00:35:40.275
<v Speaker 0>the label name, which will Yeah. I see.

00:35:40.275 --> 00:35:42.995
<v Speaker 1>Because we see in the UI, we see,

00:35:43.750 --> 00:35:47.110
<v Speaker 1>like, labels with the same name across repositories,

00:35:47.110 --> 00:35:50.310
<v Speaker 1>but, technically, they are different, like, labels with

00:35:50.310 --> 00:35:51.350
<v Speaker 1>different IDs.

00:35:51.430 --> 00:35:53.830
<v Speaker 1>So that's why we need a different identifiers.

00:35:54.150 --> 00:35:56.630
<v Speaker 1>I see. Exactly. That has a lot of

00:35:56.630 --> 00:35:57.030
<v Speaker 1>sense.

00:35:58.205 --> 00:36:00.765
<v Speaker 0>So now we have a function called create

00:36:00.765 --> 00:36:01.885
<v Speaker 0>label

00:36:02.045 --> 00:36:04.365
<v Speaker 0>that takes a repository name and a color,

00:36:05.005 --> 00:36:07.725
<v Speaker 0>and we'll do exactly as we need. So

00:36:07.725 --> 00:36:09.485
<v Speaker 0>let's assume that we have

00:36:11.060 --> 00:36:13.860
<v Speaker 0>const labels equals an array

00:36:14.740 --> 00:36:15.620
<v Speaker 0>of

00:36:16.820 --> 00:36:17.780
<v Speaker 0>labels.

00:36:20.100 --> 00:36:21.860
<v Speaker 0>We'll

00:36:21.860 --> 00:36:24.180
<v Speaker 0>just do two. Let's not spend too much

00:36:24.180 --> 00:36:24.980
<v Speaker 0>time on this.

00:36:27.815 --> 00:36:28.775
<v Speaker 0>Color,

00:36:30.135 --> 00:36:32.535
<v Speaker 0>zero zero f f c zero. Alright.

00:36:33.015 --> 00:36:34.935
<v Speaker 0>But now we want to create these labels

00:36:34.935 --> 00:36:36.855
<v Speaker 0>on each of our repositories.

00:36:37.415 --> 00:36:39.335
<v Speaker 0>I could create another helper function that loops

00:36:39.335 --> 00:36:41.520
<v Speaker 0>over this, but that's just for the sake.

00:36:41.520 --> 00:36:43.040
<v Speaker 0>Yeah. That's that's all I have.

00:36:44.720 --> 00:36:46.560
<v Speaker 0>For the sake of quickness, which is the

00:36:46.560 --> 00:36:47.440
<v Speaker 0>label,

00:36:47.760 --> 00:36:50.560
<v Speaker 0>and this is going to do create

00:36:51.280 --> 00:36:52.160
<v Speaker 0>label.

00:36:52.160 --> 00:36:54.480
<v Speaker 0>And we pass in our demo repository.

00:36:55.095 --> 00:36:57.734
<v Speaker 0>We pass in our label dot name, and

00:36:57.734 --> 00:36:59.655
<v Speaker 0>we pass in our label dot color.

00:37:00.615 --> 00:37:02.615
<v Speaker 0>And then we can copy that entire

00:37:02.695 --> 00:37:03.575
<v Speaker 0>loop

00:37:04.055 --> 00:37:06.535
<v Speaker 0>because that's for demo repository too.

00:37:08.215 --> 00:37:08.775
<v Speaker 0>That's it.

00:37:10.839 --> 00:37:11.960
<v Speaker 1>That easy?

00:37:14.200 --> 00:37:15.800
<v Speaker 0>Okay.

00:37:15.800 --> 00:37:18.840
<v Speaker 0>So we do have a duplicate resource because

00:37:21.000 --> 00:37:22.280
<v Speaker 0>what did I mess up?

00:37:32.375 --> 00:37:33.575
<v Speaker 0>Repo name

00:37:33.655 --> 00:37:34.215
<v Speaker 0>name.

00:37:36.610 --> 00:37:38.690
<v Speaker 0>What have I got? Okay. Let's read this

00:37:38.690 --> 00:37:40.610
<v Speaker 0>properly instead of scamming. So

00:37:41.090 --> 00:37:44.130
<v Speaker 0>duplicate resource here and Pulumi app demo, issue

00:37:44.130 --> 00:37:45.250
<v Speaker 0>issue label,

00:37:46.290 --> 00:37:49.155
<v Speaker 0>call to string on an output.

00:37:49.155 --> 00:37:49.955
<v Speaker 0>Right.

00:37:49.955 --> 00:37:50.675
<v Speaker 0>Got it.

00:37:51.155 --> 00:37:52.435
<v Speaker 0>So there is a

00:37:54.675 --> 00:37:56.835
<v Speaker 0>that this this is really weird thing that

00:37:56.835 --> 00:37:58.595
<v Speaker 0>happens in Pulumi and that and when you

00:37:58.595 --> 00:38:00.515
<v Speaker 0>want to use an output, which in our

00:38:00.515 --> 00:38:02.355
<v Speaker 0>case, this repository is a promise.

00:38:03.650 --> 00:38:06.610
<v Speaker 0>So this value that create create repo returns

00:38:06.610 --> 00:38:09.250
<v Speaker 0>is a promise to a data structure that

00:38:09.250 --> 00:38:12.130
<v Speaker 0>represents a repo that doesn't actually exist

00:38:12.530 --> 00:38:13.250
<v Speaker 0>yet.

00:38:14.130 --> 00:38:16.370
<v Speaker 0>So when we pass this end,

00:38:17.035 --> 00:38:18.875
<v Speaker 0>what we actually need to do is build

00:38:18.875 --> 00:38:21.435
<v Speaker 0>in the ability to wait for that promise

00:38:21.435 --> 00:38:22.555
<v Speaker 0>to resolve.

00:38:23.835 --> 00:38:26.555
<v Speaker 0>And we can do that with coming down

00:38:26.555 --> 00:38:27.195
<v Speaker 0>to here,

00:38:30.089 --> 00:38:33.130
<v Speaker 0>what we can see is download repository

00:38:33.130 --> 00:38:33.529
<v Speaker 0>dot

00:38:33.930 --> 00:38:35.210
<v Speaker 0>I could apply.

00:38:37.450 --> 00:38:38.089
<v Speaker 1>Yeah.

00:38:38.250 --> 00:38:41.450
<v Speaker 1>That's where my JavaScript skills starts to

00:38:41.690 --> 00:38:42.569
<v Speaker 1>fade apart.

00:38:45.585 --> 00:38:47.425
<v Speaker 0>Yeah. That would be a that's a Pulumi

00:38:47.425 --> 00:38:48.385
<v Speaker 0>output. Right?

00:38:48.705 --> 00:38:50.225
<v Speaker 0>The gap repository.

00:38:53.585 --> 00:38:55.105
<v Speaker 0>Why is it not giving me the auto

00:38:55.105 --> 00:38:56.305
<v Speaker 0>complete, I would expect?

00:38:59.190 --> 00:39:00.710
<v Speaker 0>Oh, plus three.

00:39:01.590 --> 00:39:03.670
<v Speaker 0>Ah, yeah. Because we want the name dot

00:39:03.670 --> 00:39:06.230
<v Speaker 0>apply. Okay. And that's going to get me

00:39:06.230 --> 00:39:08.230
<v Speaker 0>a name, which can be used instead of

00:39:08.230 --> 00:39:09.670
<v Speaker 0>a function. And then

00:39:10.085 --> 00:39:12.724
<v Speaker 0>so that's just I know this is difficult

00:39:12.724 --> 00:39:13.684
<v Speaker 0>for

00:39:13.684 --> 00:39:16.005
<v Speaker 0>anyone coming across us. It's just not familiar

00:39:16.005 --> 00:39:18.805
<v Speaker 0>with how this works. But because this doesn't

00:39:18.805 --> 00:39:20.805
<v Speaker 0>exist yet, what we're saying is when this

00:39:20.805 --> 00:39:21.684
<v Speaker 0>name is available,

00:39:22.250 --> 00:39:24.809
<v Speaker 0>we want to then apply a function, and

00:39:24.809 --> 00:39:26.809
<v Speaker 0>then those functions will create the labels for

00:39:26.809 --> 00:39:27.369
<v Speaker 0>us.

00:39:27.849 --> 00:39:29.369
<v Speaker 0>And we can Back in the day back

00:39:29.369 --> 00:39:30.809
<v Speaker 1>in the day, I worked with in the

00:39:30.809 --> 00:39:33.609
<v Speaker 1>UI, land with Angular. So I I I

00:39:33.609 --> 00:39:37.655
<v Speaker 1>remember, like, promise, like, concept, but it's not

00:39:37.655 --> 00:39:40.295
<v Speaker 1>fluent with it anymore. So but, yeah, I

00:39:40.295 --> 00:39:42.375
<v Speaker 1>get what what we are doing. It's fine.

00:39:42.375 --> 00:39:44.535
<v Speaker 0>Alright. Cool. I I presume for people that

00:39:44.535 --> 00:39:46.455
<v Speaker 0>knows JavaScript work better than me, this is,

00:39:46.455 --> 00:39:48.295
<v Speaker 0>like, what they do all day. Almost like

00:39:48.295 --> 00:39:50.980
<v Speaker 1>I do with f. Like, if error equals,

00:39:50.980 --> 00:39:53.619
<v Speaker 1>like, nil, and I I error handling in

00:39:53.619 --> 00:39:55.859
<v Speaker 1>Go. So everyone Okay. Is something.

00:39:55.940 --> 00:39:57.700
<v Speaker 0>Yeah. For sure. In fact and, I mean,

00:39:57.700 --> 00:39:59.539
<v Speaker 0>if anyone is watching, that's going I still

00:39:59.539 --> 00:40:02.019
<v Speaker 0>don't get it. There is a great documentation

00:40:02.019 --> 00:40:03.619
<v Speaker 0>on the Pulumi programming model.

00:40:05.305 --> 00:40:07.625
<v Speaker 0>So you can just search Pulumi programming model.

00:40:07.625 --> 00:40:09.465
<v Speaker 0>If you click on inputs and outputs, it

00:40:09.465 --> 00:40:11.785
<v Speaker 0>talks about what is actually happening

00:40:11.865 --> 00:40:13.705
<v Speaker 0>under the hood there. Okay.

00:40:14.265 --> 00:40:16.425
<v Speaker 0>So if we run this again, we shouldn't

00:40:16.425 --> 00:40:19.220
<v Speaker 0>have been in a position where under no.

00:40:21.380 --> 00:40:23.940
<v Speaker 0>Come on, Pulumi. Be nice to me. So

00:40:23.940 --> 00:40:25.380
<v Speaker 0>what have I got wrong here?

00:40:39.875 --> 00:40:42.355
<v Speaker 0>Oh, because I'm not pass oh, silly me.

00:40:42.355 --> 00:40:44.355
<v Speaker 0>I'm passing and then the output instead of

00:40:44.355 --> 00:40:44.835
<v Speaker 0>the name.

00:40:47.290 --> 00:40:49.130
<v Speaker 0>Alright. Okay. So that just means I have

00:40:49.130 --> 00:40:51.050
<v Speaker 0>to change this function to no longer take

00:40:51.050 --> 00:40:53.530
<v Speaker 0>the report. I think you you have to

00:40:53.530 --> 00:40:56.570
<v Speaker 1>set the type of the name argument in

00:40:56.570 --> 00:40:57.849
<v Speaker 1>the apply function.

00:41:00.875 --> 00:41:04.315
<v Speaker 0>Maybe correct. Yes. So let's just quickly get

00:41:04.315 --> 00:41:06.155
<v Speaker 0>this function signature right.

00:41:06.715 --> 00:41:09.035
<v Speaker 0>So now we're no longer passing an output.

00:41:09.035 --> 00:41:10.875
<v Speaker 0>Although, that's another point. Another way I could

00:41:10.875 --> 00:41:12.875
<v Speaker 0>have done that. Well, let's talk about that

00:41:12.875 --> 00:41:13.275
<v Speaker 0>in a second.

00:41:14.650 --> 00:41:15.290
<v Speaker 0>So

00:41:17.290 --> 00:41:19.369
<v Speaker 0>because that's an anonymous function. I I don't

00:41:19.369 --> 00:41:20.650
<v Speaker 0>think it's gonna because it

00:41:21.130 --> 00:41:22.410
<v Speaker 0>and care too much about the type and

00:41:22.410 --> 00:41:24.250
<v Speaker 0>it inferred that from here. Okay.

00:41:24.490 --> 00:41:27.050
<v Speaker 0>If I if I did want English

00:41:27.369 --> 00:41:27.770
<v Speaker 0>failure.

00:41:28.655 --> 00:41:30.575
<v Speaker 0>If I did really want to pass in

00:41:30.575 --> 00:41:32.255
<v Speaker 0>the GitHub repository here

00:41:32.494 --> 00:41:34.015
<v Speaker 0>instead of handling

00:41:34.015 --> 00:41:36.494
<v Speaker 0>the promise further than than

00:41:36.494 --> 00:41:37.775
<v Speaker 0>the stack there,

00:41:38.015 --> 00:41:41.055
<v Speaker 0>I could have used Pulumi dot interpolate here

00:41:41.670 --> 00:41:44.550
<v Speaker 0>where I request the value, and that's a

00:41:44.550 --> 00:41:47.030
<v Speaker 0>magic function that would have resolved that promise

00:41:47.030 --> 00:41:49.510
<v Speaker 0>for me in lane. So I could've

00:41:50.150 --> 00:41:51.430
<v Speaker 0>I could've done that.

00:41:51.829 --> 00:41:53.349
<v Speaker 0>Which actually probably would have been a bit

00:41:53.349 --> 00:41:55.030
<v Speaker 0>nicer, but now that I've kind of committed

00:41:55.030 --> 00:41:56.470
<v Speaker 0>and done all the other code,

00:41:57.085 --> 00:41:58.685
<v Speaker 0>we'll stick with that. So

00:41:59.165 --> 00:42:00.525
<v Speaker 0>we're gonna ramp it up.

00:42:00.845 --> 00:42:03.245
<v Speaker 0>I wanna see a nice yep. Good. We're

00:42:03.245 --> 00:42:05.165
<v Speaker 0>now gonna create those are we're gonna create

00:42:05.165 --> 00:42:05.805
<v Speaker 0>some green.

00:42:06.525 --> 00:42:07.565
<v Speaker 0>That's red.

00:42:07.725 --> 00:42:09.165
<v Speaker 0>Oh, that's red. The provider.

00:42:10.160 --> 00:42:10.800
<v Speaker 0>So

00:42:11.840 --> 00:42:15.200
<v Speaker 0>let's quickly fix that. Provider.

00:42:15.680 --> 00:42:17.200
<v Speaker 0>It's a GitHub provider,

00:42:17.360 --> 00:42:19.680
<v Speaker 0>and I'm gonna copy this code. So you

00:42:19.680 --> 00:42:22.320
<v Speaker 0>can set the default provider programmatically.

00:42:23.840 --> 00:42:25.275
<v Speaker 0>I don't remember how to do that off

00:42:25.275 --> 00:42:26.714
<v Speaker 0>the top of my head. I'm not gonna

00:42:26.714 --> 00:42:27.595
<v Speaker 0>try

00:42:27.915 --> 00:42:29.755
<v Speaker 0>and guess it. So we will just set

00:42:29.755 --> 00:42:31.195
<v Speaker 0>it inside of that function.

00:42:31.835 --> 00:42:33.675
<v Speaker 0>We run yes. It's gonna give me all

00:42:33.675 --> 00:42:34.475
<v Speaker 0>my labels.

00:42:34.714 --> 00:42:35.355
<v Speaker 0>No.

00:42:35.835 --> 00:42:36.315
<v Speaker 0>No.

00:42:38.780 --> 00:42:39.580
<v Speaker 0>Okay.

00:42:40.140 --> 00:42:41.660
<v Speaker 0>Validation failed.

00:42:46.540 --> 00:42:47.820
<v Speaker 0>No. I'm not sure if I can fix

00:42:47.820 --> 00:42:50.060
<v Speaker 0>that. That looks like an actual API error.

00:42:51.195 --> 00:42:51.835
<v Speaker 1>Yeah.

00:42:53.195 --> 00:42:54.875
<v Speaker 0>I just get Oh, the barcode. I think

00:42:54.875 --> 00:42:56.635
<v Speaker 1>the no. I think it's the color

00:42:57.035 --> 00:42:59.435
<v Speaker 1>that is not well defined.

00:43:00.555 --> 00:43:02.235
<v Speaker 0>Do you think it wants that off?

00:43:04.090 --> 00:43:05.690
<v Speaker 1>I don't know. Let's let's take off the

00:43:05.690 --> 00:43:07.690
<v Speaker 0>hash. And if that fails, I'll try red.

00:43:10.890 --> 00:43:12.810
<v Speaker 0>Oh, I think Jannica got it.

00:43:13.210 --> 00:43:14.170
<v Speaker 0>Well done, Jannica.

00:43:15.474 --> 00:43:17.075
<v Speaker 1>Yoo hoo. That's why I'm here.

00:43:18.835 --> 00:43:20.755
<v Speaker 0>Alright. So let's

00:43:20.994 --> 00:43:23.155
<v Speaker 0>pull up our demo repository

00:43:23.955 --> 00:43:24.915
<v Speaker 0>and

00:43:26.275 --> 00:43:27.395
<v Speaker 0>So issues label.

00:43:28.619 --> 00:43:31.020
<v Speaker 0>Yeah. Let's enable You can look at the

00:43:31.339 --> 00:43:32.940
<v Speaker 1>issues from the forecast. You can look at

00:43:32.940 --> 00:43:35.260
<v Speaker 1>the issues from there. Just click in there,

00:43:35.260 --> 00:43:36.700
<v Speaker 1>and there is a label. Yeah.

00:43:37.819 --> 00:43:39.740
<v Speaker 0>Ta da. Oh, yeah.

00:43:40.220 --> 00:43:41.819
<v Speaker 1>Nice color. That works.

00:43:42.595 --> 00:43:44.755
<v Speaker 0>Yep. You can tell I'm not a designer.

00:43:44.835 --> 00:43:45.555
<v Speaker 0>Alright.

00:43:47.155 --> 00:43:49.635
<v Speaker 0>Okay. Final thing. So we temp we create

00:43:49.635 --> 00:43:50.355
<v Speaker 0>a function,

00:43:50.675 --> 00:43:52.755
<v Speaker 0>and we can duplicate whatever labels we want

00:43:52.755 --> 00:43:54.355
<v Speaker 0>across all of our different resources.

00:43:55.075 --> 00:43:57.475
<v Speaker 0>And we have our stack

00:43:58.170 --> 00:43:58.970
<v Speaker 0>output,

00:43:59.049 --> 00:44:01.130
<v Speaker 0>which is just like a Terraform output. Obviously,

00:44:01.130 --> 00:44:02.650
<v Speaker 0>with with the GitHub example,

00:44:03.530 --> 00:44:05.290
<v Speaker 0>there's not a lot of useful information that

00:44:05.290 --> 00:44:07.130
<v Speaker 0>we want to make available to other scripts,

00:44:07.130 --> 00:44:09.450
<v Speaker 0>etcetera, but, you know, the outputs do the

00:44:09.450 --> 00:44:11.210
<v Speaker 0>exporting does allow us to have access to

00:44:11.210 --> 00:44:11.849
<v Speaker 0>these outputs.

00:44:13.185 --> 00:44:14.625
<v Speaker 0>And we can get that through JSON as

00:44:14.625 --> 00:44:17.185
<v Speaker 0>well. I think the problem is JSON.

00:44:20.305 --> 00:44:22.945
<v Speaker 0>Perfect. Oh, I see. So we can pipe

00:44:23.185 --> 00:44:24.385
<v Speaker 1>technically, we can pipes,

00:44:24.800 --> 00:44:25.760
<v Speaker 1>like, stuff.

00:44:26.240 --> 00:44:28.880
<v Speaker 0>Oh, yeah. So I could do the demo.

00:44:29.680 --> 00:44:31.280
<v Speaker 0>And if that was creating a, like, a

00:44:31.280 --> 00:44:33.280
<v Speaker 0>GCS bucket or an s three bucket or

00:44:33.280 --> 00:44:35.760
<v Speaker 0>anything like that, then I could then, you

00:44:35.760 --> 00:44:38.115
<v Speaker 0>know, grab that resource and use that in

00:44:38.115 --> 00:44:40.195
<v Speaker 0>another script by using j q and a

00:44:40.195 --> 00:44:42.835
<v Speaker 0>bit of j JSON wrangling. So Yeah. That's

00:44:42.835 --> 00:44:45.075
<v Speaker 1>that's cool. And these outputs can be consumed

00:44:45.075 --> 00:44:47.315
<v Speaker 0>by other Pulumi modules in the same way

00:44:47.315 --> 00:44:49.155
<v Speaker 0>that Terraform modules can do that as well.

00:44:49.155 --> 00:44:50.995
<v Speaker 0>So if you write, like, a core infrastructure

00:44:51.549 --> 00:44:54.190
<v Speaker 0>repository that spends up a Kubernetes cluster on

00:44:54.190 --> 00:44:56.910
<v Speaker 0>JKE and exposes a cube config, you could

00:44:56.910 --> 00:44:59.470
<v Speaker 0>then use that cube config in other repositories

00:44:59.470 --> 00:45:00.670
<v Speaker 0>by consuming

00:45:00.670 --> 00:45:03.230
<v Speaker 0>that shared x output state as well.

00:45:05.875 --> 00:45:06.675
<v Speaker 0>Alright.

00:45:08.355 --> 00:45:10.994
<v Speaker 0>So that's Pulumi. Any thoughts? Let me jump

00:45:10.994 --> 00:45:12.275
<v Speaker 0>back over to Rawkode.

00:45:12.515 --> 00:45:14.914
<v Speaker 1>I I think it's one one of the

00:45:14.914 --> 00:45:17.234
<v Speaker 1>reason about why I never tried it is

00:45:17.234 --> 00:45:20.960
<v Speaker 1>because I really never never looked at the

00:45:21.280 --> 00:45:22.960
<v Speaker 1>an at the code for it.

00:45:23.680 --> 00:45:25.360
<v Speaker 1>And I thought it was, like,

00:45:25.920 --> 00:45:28.160
<v Speaker 1>you know, a lot of codes to

00:45:28.400 --> 00:45:30.000
<v Speaker 1>that had to be right. I didn't know

00:45:30.000 --> 00:45:32.480
<v Speaker 1>that it was reusing, like, Terraform providers,

00:45:32.480 --> 00:45:34.425
<v Speaker 1>or I presume it to reuse the s

00:45:34.425 --> 00:45:37.065
<v Speaker 1>h u the Amazon SDK when it comes

00:45:37.065 --> 00:45:37.545
<v Speaker 1>to,

00:45:38.665 --> 00:45:40.905
<v Speaker 1>you know, interact with a cloud provider. So

00:45:40.905 --> 00:45:43.145
<v Speaker 1>I think it's yeah. In in this sense,

00:45:43.145 --> 00:45:45.945
<v Speaker 1>I think the stability is, like, guaranteed by

00:45:45.945 --> 00:45:48.450
<v Speaker 1>the fact that it used, like, underlying components

00:45:48.450 --> 00:45:49.250
<v Speaker 1>that are

00:45:49.810 --> 00:45:52.450
<v Speaker 1>solid and used by, like, everybody in the

00:45:52.450 --> 00:45:53.330
<v Speaker 1>world. So

00:45:54.370 --> 00:45:57.490
<v Speaker 1>that's that's cool. And yeah. I mean, I'm

00:45:57.490 --> 00:45:59.650
<v Speaker 1>a fan of, like, using code. So I

00:45:59.650 --> 00:46:02.130
<v Speaker 1>think that brings me the joy of my

00:46:02.375 --> 00:46:06.295
<v Speaker 1>ID or my, like, VIM setup with infrastructure

00:46:06.295 --> 00:46:08.055
<v Speaker 1>as code that usually is a pain full

00:46:08.055 --> 00:46:09.895
<v Speaker 1>of YAML and JSON.

00:46:10.694 --> 00:46:12.215
<v Speaker 1>Yeah. I mean, I also like

00:46:13.174 --> 00:46:15.815
<v Speaker 1>I does it work as the like, has

00:46:15.960 --> 00:46:17.160
<v Speaker 1>has Terraform?

00:46:17.160 --> 00:46:19.880
<v Speaker 1>So there is no concept of reconciliation,

00:46:19.960 --> 00:46:23.400
<v Speaker 1>like, CloudFormation or other, like, tools we may

00:46:23.400 --> 00:46:23.880
<v Speaker 1>have.

00:46:24.200 --> 00:46:24.440
<v Speaker 1>Or

00:46:25.880 --> 00:46:28.119
<v Speaker 0>Yes. There I mean, there is. So it

00:46:28.119 --> 00:46:31.095
<v Speaker 0>uses the Terraform modules and to understand the

00:46:31.095 --> 00:46:33.335
<v Speaker 0>resources, the inputs, and outputs, but it handles

00:46:33.335 --> 00:46:35.255
<v Speaker 0>all of its own reconciliation,

00:46:35.255 --> 00:46:37.655
<v Speaker 0>state management, etcetera. So it will do its

00:46:37.655 --> 00:46:40.135
<v Speaker 0>best job scenario. In fact, when you run,

00:46:40.135 --> 00:46:41.175
<v Speaker 0>like, a Pulumi

00:46:41.335 --> 00:46:42.215
<v Speaker 0>preview,

00:46:42.860 --> 00:46:44.700
<v Speaker 0>that's actually only giving you its best guess

00:46:44.700 --> 00:46:46.140
<v Speaker 0>of what it thinks it has to do,

00:46:46.140 --> 00:46:47.580
<v Speaker 0>and then it does it looks up the

00:46:47.580 --> 00:46:49.420
<v Speaker 0>current state at applied time and then tries

00:46:49.420 --> 00:46:50.460
<v Speaker 0>to work at what it has to do.

00:46:50.460 --> 00:46:51.740
<v Speaker 0>So there's a whole bunch of other stuff

00:46:51.740 --> 00:46:54.540
<v Speaker 0>going on that I'm probably not knowledgeable

00:46:54.540 --> 00:46:55.740
<v Speaker 0>enough to actually talk about.

00:46:56.625 --> 00:46:58.545
<v Speaker 0>But it works really well for Kubernetes as

00:46:58.545 --> 00:47:01.425
<v Speaker 0>well. It does not use the Terraform Kubernetes

00:47:01.425 --> 00:47:03.825
<v Speaker 0>provider. They wrote their own provider for Kubernetes

00:47:03.825 --> 00:47:05.585
<v Speaker 0>to understand CRDs

00:47:05.985 --> 00:47:08.625
<v Speaker 0>and can actually do and flight

00:47:09.160 --> 00:47:12.040
<v Speaker 0>programming logic. Like, if you can imagine you

00:47:12.040 --> 00:47:15.080
<v Speaker 0>want to update a deployment on Kubernetes,

00:47:15.080 --> 00:47:16.760
<v Speaker 0>you can have Pulumi do it, monitor the

00:47:16.760 --> 00:47:18.920
<v Speaker 0>stats from influx DB or Prometheus, and then

00:47:18.920 --> 00:47:20.440
<v Speaker 0>roll back that deployment of it as it

00:47:20.440 --> 00:47:22.200
<v Speaker 0>going to the way you're working because we

00:47:22.200 --> 00:47:24.685
<v Speaker 0>have the ability to use actual code and

00:47:24.685 --> 00:47:26.685
<v Speaker 0>and play computation, which is really, really cool

00:47:26.685 --> 00:47:28.605
<v Speaker 0>as well. Maybe that's a session. We could

00:47:28.605 --> 00:47:30.525
<v Speaker 0>do another day again. Yeah. I mean, I

00:47:30.525 --> 00:47:32.125
<v Speaker 1>I have I have another question. I think

00:47:32.125 --> 00:47:33.805
<v Speaker 1>it's the last one. But how

00:47:34.605 --> 00:47:36.445
<v Speaker 1>how often we

00:47:36.590 --> 00:47:39.790
<v Speaker 1>like, you saw or, you know, people mixing,

00:47:39.790 --> 00:47:42.430
<v Speaker 1>like, proper like, code that is not Pulumi

00:47:42.430 --> 00:47:43.230
<v Speaker 1>related

00:47:43.230 --> 00:47:45.390
<v Speaker 1>with, like, Pulumi code?

00:47:46.830 --> 00:47:48.430
<v Speaker 1>Is it common to use, like, I don't

00:47:48.430 --> 00:47:50.670
<v Speaker 1>know, templates? Is it I'm speaking in the

00:47:50.670 --> 00:47:52.990
<v Speaker 1>in the go, like, land, but there is

00:47:52.305 --> 00:47:53.505
<v Speaker 1>the same in the

00:47:54.545 --> 00:47:57.585
<v Speaker 1>in the in TypeScript, I'm I'm sure. But

00:47:57.585 --> 00:47:58.944
<v Speaker 1>if you if I have to, you know

00:47:59.265 --> 00:48:01.825
<v Speaker 1>maybe I'm creating an issue, and I have

00:48:01.825 --> 00:48:04.385
<v Speaker 1>a user, like, a user data to inject

00:48:04.410 --> 00:48:06.569
<v Speaker 1>so I can template it and call it.

00:48:06.569 --> 00:48:08.970
<v Speaker 1>Then how far I can go when using,

00:48:08.970 --> 00:48:11.289
<v Speaker 1>like, traditional libraries

00:48:11.289 --> 00:48:12.730
<v Speaker 1>that are not Pulumi related?

00:48:13.049 --> 00:48:14.570
<v Speaker 0>Let me show you something.

00:48:15.609 --> 00:48:16.089
<v Speaker 0>So Please.

00:48:17.705 --> 00:48:20.105
<v Speaker 0>We are obviously short of time. Jen, look,

00:48:20.105 --> 00:48:21.945
<v Speaker 0>and I do have a call. But Yeah.

00:48:22.025 --> 00:48:23.865
<v Speaker 0>That question was unplanned,

00:48:23.865 --> 00:48:25.225
<v Speaker 0>and I feel like I have to show

00:48:25.225 --> 00:48:26.665
<v Speaker 0>him something there. So

00:48:28.665 --> 00:48:31.545
<v Speaker 0>where did I create this? So there.

00:48:32.790 --> 00:48:35.590
<v Speaker 0>Packet examples. Okay. So I've been working on

00:48:36.470 --> 00:48:37.990
<v Speaker 0>a packet example

00:48:38.390 --> 00:48:41.190
<v Speaker 0>to spin up servers with user data. Now

00:48:41.510 --> 00:48:43.430
<v Speaker 0>I am very appended to it with my

00:48:43.430 --> 00:48:45.990
<v Speaker 0>infrastructure's code as well. And as I have

00:48:45.990 --> 00:48:46.630
<v Speaker 0>user data,

00:48:47.165 --> 00:48:49.805
<v Speaker 0>like this Python script here or

00:48:50.925 --> 00:48:52.525
<v Speaker 0>this userdata.sh,

00:48:52.525 --> 00:48:53.724
<v Speaker 0>is I actually want them to live in

00:48:53.724 --> 00:48:55.484
<v Speaker 0>their own file. I do not want to

00:48:55.484 --> 00:48:58.445
<v Speaker 0>use template literals within Go or TypeScript because

00:48:58.445 --> 00:49:00.605
<v Speaker 0>I lose all of my formatting and my

00:49:00.605 --> 00:49:02.765
<v Speaker 0>my IDE features, like, complete. Right?

00:49:03.660 --> 00:49:06.940
<v Speaker 0>So because Pulumi is just TypeScript and and

00:49:06.940 --> 00:49:09.819
<v Speaker 0>Node. Js, we can actually leverage the entire

00:49:09.819 --> 00:49:10.940
<v Speaker 0>NPM ecosystem.

00:49:11.339 --> 00:49:13.099
<v Speaker 0>As you can see here, I'm actually pulling

00:49:13.099 --> 00:49:14.780
<v Speaker 0>in the mustache templating

00:49:14.955 --> 00:49:15.835
<v Speaker 0>tool,

00:49:16.475 --> 00:49:19.515
<v Speaker 0>where I load the dot s h bash

00:49:19.515 --> 00:49:22.075
<v Speaker 0>script and then interpolate it with the contents

00:49:22.075 --> 00:49:24.235
<v Speaker 0>of my Python scripts to inject into the

00:49:24.235 --> 00:49:25.515
<v Speaker 0>packet user data.

00:49:25.995 --> 00:49:27.515
<v Speaker 0>So you can see that we have this

00:49:27.515 --> 00:49:27.995
<v Speaker 0>Python,

00:49:28.690 --> 00:49:30.370
<v Speaker 0>We have the bash code,

00:49:30.610 --> 00:49:32.610
<v Speaker 0>and we actually just inject the Python code

00:49:32.610 --> 00:49:34.610
<v Speaker 0>into a cat statement to write it to

00:49:34.610 --> 00:49:36.850
<v Speaker 0>a fail on the disk at provisioning time.

00:49:37.330 --> 00:49:39.570
<v Speaker 0>And I still get all of my niceties.

00:49:39.570 --> 00:49:41.010
<v Speaker 0>I still get all my Python format or

00:49:41.010 --> 00:49:43.090
<v Speaker 0>my Python auto completion and stuff like that.

00:49:43.090 --> 00:49:43.170
<v Speaker 0>So

00:49:44.045 --> 00:49:46.845
<v Speaker 0>having access to NPM and to GoMod and

00:49:46.845 --> 00:49:48.845
<v Speaker 0>all these other things, I think, you know,

00:49:48.845 --> 00:49:50.925
<v Speaker 0>you can use as many of those tools

00:49:50.925 --> 00:49:52.445
<v Speaker 0>and libraries as you need to get the

00:49:52.445 --> 00:49:53.805
<v Speaker 0>job done in a way that works for

00:49:53.805 --> 00:49:55.245
<v Speaker 0>you, which I think is fantastic.

00:49:56.010 --> 00:49:58.330
<v Speaker 1>Yeah. That I think that's what I need.

00:49:58.410 --> 00:50:00.810
<v Speaker 1>So to to, you know, to be happy

00:50:00.810 --> 00:50:02.490
<v Speaker 1>again with my infrastructure as a code. But

00:50:02.490 --> 00:50:03.610
<v Speaker 1>I have to say in the last couple

00:50:03.610 --> 00:50:05.850
<v Speaker 1>of years, I really tried to avoid as,

00:50:05.850 --> 00:50:07.850
<v Speaker 1>like, as best as possible because I was

00:50:07.850 --> 00:50:10.355
<v Speaker 1>bored about that. But, yeah, I think that

00:50:10.355 --> 00:50:12.915
<v Speaker 1>this approach really comes to very close to

00:50:12.915 --> 00:50:14.115
<v Speaker 1>what I I

00:50:14.515 --> 00:50:17.474
<v Speaker 1>I was hoping to to see. So Awesome.

00:50:17.474 --> 00:50:18.275
<v Speaker 1>Thank you for that.

00:50:18.675 --> 00:50:19.795
<v Speaker 0>Well, we don't have time to do the

00:50:19.795 --> 00:50:20.275
<v Speaker 0>goal one.

00:50:21.339 --> 00:50:23.660
<v Speaker 0>So let's we'll set it to take time

00:50:23.660 --> 00:50:25.180
<v Speaker 0>next week or or the week after. We

00:50:25.180 --> 00:50:26.380
<v Speaker 0>can try and do this in Go for

00:50:26.380 --> 00:50:28.780
<v Speaker 0>the Tinker Bell repositories, automate all those label

00:50:28.780 --> 00:50:30.859
<v Speaker 0>creations, and then we'll try and write about

00:50:30.859 --> 00:50:32.460
<v Speaker 0>that as we go. Is that good? That's

00:50:32.460 --> 00:50:34.700
<v Speaker 1>great. Yeah. Definitely, we're gonna use this one

00:50:34.700 --> 00:50:36.300
<v Speaker 1>and not the the one we tried last

00:50:36.300 --> 00:50:38.825
<v Speaker 1>week because I'm more comfortable with this.

00:50:39.065 --> 00:50:40.984
<v Speaker 0>Alright. Awesome. Well, thank you very much for

00:50:40.984 --> 00:50:43.065
<v Speaker 0>your time. I hope the people that are

00:50:43.065 --> 00:50:44.425
<v Speaker 0>watching enjoyed that, and I'll see you all

00:50:44.425 --> 00:50:46.665
<v Speaker 0>soon. Yeah. See you soon. Bye bye.
