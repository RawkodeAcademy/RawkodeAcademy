WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 028d4a5c-9e91-430a-90a9-da71987b3a87
Created: 2025-04-29T13:31:09.230Z
Duration: 2326.1003
Channels: 1

00:00:00.480 --> 00:00:03.600
<v Speaker 0>Alright. Welcome to Cloud Native Compass. Thank you

00:00:03.600 --> 00:00:05.600
<v Speaker 0>for joining me, Mark. For the people who

00:00:05.600 --> 00:00:07.200
<v Speaker 0>are not familiar with you and your work,

00:00:07.200 --> 00:00:08.639
<v Speaker 0>can you please tell us who you are,

00:00:08.639 --> 00:00:10.480
<v Speaker 0>what you're up to, and and everything else

00:00:10.480 --> 00:00:12.080
<v Speaker 0>you wish to share? Yeah. Thanks, David, for

00:00:12.080 --> 00:00:13.920
<v Speaker 1>having me. So my name is Mark Borschin.

00:00:13.920 --> 00:00:15.519
<v Speaker 1>I'm the CTO of Tremolo Security.

00:00:16.485 --> 00:00:19.685
<v Speaker 1>We are a open source identity management company,

00:00:19.685 --> 00:00:22.245
<v Speaker 1>so we focus on all things authentication,

00:00:22.245 --> 00:00:23.205
<v Speaker 1>authorization,

00:00:23.205 --> 00:00:24.725
<v Speaker 1>identity, automation.

00:00:24.725 --> 00:00:27.205
<v Speaker 1>I've spent, you know, since 02/2015

00:00:27.205 --> 00:00:29.845
<v Speaker 1>working in the cloud native community on Kubernetes,

00:00:29.845 --> 00:00:31.680
<v Speaker 1>whether it's writing documentation,

00:00:31.760 --> 00:00:34.320
<v Speaker 1>helping folks out in the Slack channel, contributing

00:00:34.320 --> 00:00:35.920
<v Speaker 1>to open source projects.

00:00:36.000 --> 00:00:38.480
<v Speaker 1>So yeah. Awesome. Why don't you tell us

00:00:38.480 --> 00:00:40.559
<v Speaker 0>a little bit about terminal security and what

00:00:40.559 --> 00:00:43.600
<v Speaker 0>they do? So open source identity management. So

00:00:43.600 --> 00:00:44.800
<v Speaker 1>that means a lot of things to a

00:00:44.800 --> 00:00:46.995
<v Speaker 1>lot of people, especially in the cloud native

00:00:46.995 --> 00:00:49.475
<v Speaker 1>world. The first part that you'll probably run

00:00:49.475 --> 00:00:51.954
<v Speaker 1>into us is getting into your cluster via

00:00:51.954 --> 00:00:55.475
<v Speaker 1>authentication. So probably our most popular tool is

00:00:55.475 --> 00:00:58.640
<v Speaker 1>Open Unison. It lets you log in to

00:00:58.640 --> 00:01:01.600
<v Speaker 1>your Kubernetes clusters whether they're on prem or

00:01:01.600 --> 00:01:02.800
<v Speaker 1>up in the cloud,

00:01:03.280 --> 00:01:06.480
<v Speaker 1>with whatever authentication system you have. So, you

00:01:06.480 --> 00:01:09.120
<v Speaker 1>know, whether that's LDAP, AD, Okta,

00:01:09.520 --> 00:01:12.165
<v Speaker 1>you know, Azure AD, doesn't really matter, makes

00:01:12.165 --> 00:01:13.524
<v Speaker 1>it so that you can get access to

00:01:13.524 --> 00:01:15.204
<v Speaker 1>all of your cluster applications.

00:01:15.204 --> 00:01:17.924
<v Speaker 1>So, you know, there's there's koop control. Right?

00:01:17.924 --> 00:01:19.204
<v Speaker 1>But your cluster is made up of more

00:01:19.204 --> 00:01:20.244
<v Speaker 1>than koop control.

00:01:20.725 --> 00:01:22.405
<v Speaker 1>Out of the box, we'll do secure access

00:01:22.405 --> 00:01:24.860
<v Speaker 1>to the dashboard, which folks really enjoy. And

00:01:24.860 --> 00:01:26.380
<v Speaker 1>then, you know, what are your other cluster

00:01:26.380 --> 00:01:29.900
<v Speaker 1>management applications? You might have Prometheus and Argo.

00:01:29.900 --> 00:01:31.740
<v Speaker 1>And, you know, all these different apps have

00:01:31.740 --> 00:01:33.420
<v Speaker 1>their own SSO systems.

00:01:33.900 --> 00:01:35.980
<v Speaker 1>So we integrate that and integrate it into

00:01:35.980 --> 00:01:38.545
<v Speaker 1>your identity system. So that way, it all

00:01:38.545 --> 00:01:40.225
<v Speaker 1>just kinda works and users don't really have

00:01:40.225 --> 00:01:42.384
<v Speaker 1>to worry too much about it. Nice.

00:01:42.865 --> 00:01:44.945
<v Speaker 0>So that's cool. Open yours and opens our

00:01:44.945 --> 00:01:47.344
<v Speaker 0>project that does identity management for Kubernetes.

00:01:47.424 --> 00:01:49.024
<v Speaker 0>Now I don't wanna deviate too much from

00:01:49.024 --> 00:01:50.800
<v Speaker 0>the questions that we kinda shared ahead of

00:01:50.800 --> 00:01:52.880
<v Speaker 0>time, but I'm gonna dive straight into an

00:01:52.880 --> 00:01:55.120
<v Speaker 0>open using question because I think it's interesting.

00:01:55.360 --> 00:01:57.680
<v Speaker 0>Like, most people have the Kubernetes cluster. They

00:01:57.680 --> 00:01:59.840
<v Speaker 0>get given a KubeConfig that lasts for a

00:01:59.840 --> 00:02:00.720
<v Speaker 0>very long time.

00:02:01.120 --> 00:02:03.905
<v Speaker 0>Identity problem solved. Yes or no. Right? I

00:02:03.905 --> 00:02:06.545
<v Speaker 1>mean, it it depends on who else you

00:02:06.545 --> 00:02:08.705
<v Speaker 1>wanna have access to your cluster.

00:02:09.745 --> 00:02:11.665
<v Speaker 1>You know, the the trick with

00:02:12.145 --> 00:02:13.665
<v Speaker 1>that that kubectl

00:02:13.665 --> 00:02:14.545
<v Speaker 1>configuration

00:02:14.545 --> 00:02:17.670
<v Speaker 1>file is it's a certificate that Kubernetes doesn't

00:02:17.670 --> 00:02:20.470
<v Speaker 1>know how to revoke. So in the certificate

00:02:20.470 --> 00:02:21.110
<v Speaker 1>world,

00:02:21.270 --> 00:02:23.510
<v Speaker 1>if you wanna make sure that somebody doesn't

00:02:23.510 --> 00:02:24.790
<v Speaker 1>use a certificate

00:02:24.950 --> 00:02:27.510
<v Speaker 1>that has already expired or you've revoked for

00:02:27.510 --> 00:02:29.510
<v Speaker 1>some reason because, you know, maybe you emailed

00:02:29.510 --> 00:02:31.430
<v Speaker 1>it to the wrong person, you accidentally checked

00:02:31.430 --> 00:02:33.565
<v Speaker 1>it into a Git repo, There's a process

00:02:33.565 --> 00:02:35.885
<v Speaker 1>called certificate revocation. Kubernetes

00:02:35.885 --> 00:02:38.205
<v Speaker 1>doesn't know how to handle that. So and

00:02:38.205 --> 00:02:40.285
<v Speaker 1>that's actually one of the the big audit

00:02:40.285 --> 00:02:41.805
<v Speaker 1>findings every year,

00:02:42.364 --> 00:02:44.605
<v Speaker 1>when they do the security audit of Kubernetes

00:02:44.605 --> 00:02:46.910
<v Speaker 1>is Kubernetes doesn't know how to do certificate

00:02:46.910 --> 00:02:47.710
<v Speaker 1>revocation.

00:02:47.870 --> 00:02:49.870
<v Speaker 1>And it's probably never gonna know how to

00:02:49.870 --> 00:02:51.310
<v Speaker 1>do certificate revocation.

00:02:51.470 --> 00:02:52.750
<v Speaker 0>Can I just confirm

00:02:52.910 --> 00:02:54.590
<v Speaker 0>what you mean by that? Sorry to interrupt.

00:02:54.590 --> 00:02:55.550
<v Speaker 0>Do you mind if I just confirm what

00:02:55.550 --> 00:02:57.230
<v Speaker 0>you mean by that? Right? Like, what you're

00:02:57.230 --> 00:02:58.350
<v Speaker 0>saying is if

00:02:58.585 --> 00:03:00.745
<v Speaker 0>employee x works at our company, we give

00:03:00.745 --> 00:03:02.265
<v Speaker 0>them a kube config. They have access to

00:03:02.265 --> 00:03:04.905
<v Speaker 0>our production cluster by saying that Kubernetes doesn't

00:03:04.905 --> 00:03:08.105
<v Speaker 0>support revocation of certificates. If that person leaves,

00:03:08.185 --> 00:03:11.145
<v Speaker 0>their kube config is is valid forever. Right?

00:03:11.145 --> 00:03:12.879
<v Speaker 0>It's not like we say, well, turn it

00:03:12.879 --> 00:03:14.640
<v Speaker 0>over turn it over with your badge and

00:03:14.640 --> 00:03:16.159
<v Speaker 0>your your pass. Right? Like

00:03:16.959 --> 00:03:18.320
<v Speaker 1>It's not forever.

00:03:18.560 --> 00:03:21.360
<v Speaker 1>It's for however long that certificate is defined

00:03:21.360 --> 00:03:24.000
<v Speaker 1>for. So most certificates that Kubernetes

00:03:24.799 --> 00:03:27.725
<v Speaker 1>gives you are issued for a year. Well,

00:03:27.885 --> 00:03:30.445
<v Speaker 1>anything that changes within that year,

00:03:30.845 --> 00:03:32.525
<v Speaker 1>you know so let's say you're embedding groups

00:03:32.525 --> 00:03:33.885
<v Speaker 1>into the certificate,

00:03:33.965 --> 00:03:34.605
<v Speaker 1>whatever.

00:03:34.765 --> 00:03:36.125
<v Speaker 1>Like, Kubernetes,

00:03:36.125 --> 00:03:38.925
<v Speaker 1>you can't change that. That certificate is self

00:03:38.925 --> 00:03:39.485
<v Speaker 1>contained.

00:03:40.050 --> 00:03:42.370
<v Speaker 1>You know, certificate or Kubernetes doesn't have any

00:03:42.370 --> 00:03:44.930
<v Speaker 1>sense of users. It's not like most enterprise

00:03:44.930 --> 00:03:47.330
<v Speaker 1>systems where there's an object that you update

00:03:47.330 --> 00:03:48.930
<v Speaker 1>that says, this is what my user looks

00:03:48.930 --> 00:03:51.970
<v Speaker 1>like. Kubernetes doesn't do that. So everything comes

00:03:51.970 --> 00:03:54.370
<v Speaker 1>in through authentication. In this case, the certificate.

00:03:54.370 --> 00:03:56.455
<v Speaker 1>So who you are, how long you're valid

00:03:56.455 --> 00:03:58.375
<v Speaker 1>for, and what your groups are.

00:03:58.775 --> 00:03:59.655
<v Speaker 1>And so

00:03:59.895 --> 00:04:02.295
<v Speaker 1>when you get that certificate from Kubernetes, that's

00:04:02.295 --> 00:04:03.335
<v Speaker 1>good for a year.

00:04:03.575 --> 00:04:05.255
<v Speaker 1>If you get walked out the door or

00:04:05.255 --> 00:04:08.455
<v Speaker 1>you, you know, even more likely, you accidentally

00:04:08.455 --> 00:04:10.540
<v Speaker 1>leak it, you know, because we're humans.

00:04:10.780 --> 00:04:12.859
<v Speaker 1>So it goes into the wrong email. It

00:04:12.859 --> 00:04:15.180
<v Speaker 1>gets shared onto the wrong folder. It gets

00:04:15.180 --> 00:04:17.420
<v Speaker 1>accidentally checked into a Git repo.

00:04:17.820 --> 00:04:20.220
<v Speaker 1>There's nothing as a cluster operator you can

00:04:20.220 --> 00:04:22.940
<v Speaker 1>do to make sure that that certificate and

00:04:22.940 --> 00:04:25.315
<v Speaker 1>private key can't be used to access the

00:04:25.315 --> 00:04:27.875
<v Speaker 1>cluster until it either expires

00:04:28.195 --> 00:04:30.595
<v Speaker 1>or you rekey the entire cluster.

00:04:30.915 --> 00:04:34.035
<v Speaker 1>So that becomes where and I've got a,

00:04:34.035 --> 00:04:35.955
<v Speaker 1>you know, I've got a blog post that

00:04:35.955 --> 00:04:36.995
<v Speaker 1>gets into the details

00:04:37.560 --> 00:04:39.400
<v Speaker 1>on why you don't wanna use certificates for

00:04:39.400 --> 00:04:42.200
<v Speaker 1>anything besides break glass in case of emergency.

00:04:42.680 --> 00:04:45.080
<v Speaker 1>I did talk about it at Kubernetes security

00:04:45.080 --> 00:04:48.120
<v Speaker 1>days couple years ago or security con, whatever

00:04:48.120 --> 00:04:50.360
<v Speaker 1>they're calling it these days. But, yeah, certificates

00:04:50.360 --> 00:04:52.485
<v Speaker 1>like break glass in case of emergency. You

00:04:52.485 --> 00:04:54.085
<v Speaker 1>know, you get your cluster, you know, that

00:04:54.085 --> 00:04:55.525
<v Speaker 1>shiny new certificate.

00:04:55.764 --> 00:04:57.685
<v Speaker 1>You go put it in a vault somewhere

00:04:57.685 --> 00:05:01.365
<v Speaker 1>that nobody has access to unless everything's gone

00:05:01.365 --> 00:05:02.324
<v Speaker 1>haywire.

00:05:02.324 --> 00:05:03.125
<v Speaker 1>And then you use,

00:05:03.850 --> 00:05:06.650
<v Speaker 1>you know, I my preference is OpenID Connect

00:05:06.650 --> 00:05:09.770
<v Speaker 1>or impersonation to access your cluster. So that

00:05:09.770 --> 00:05:12.570
<v Speaker 1>way, you're letting your identity system drive

00:05:12.890 --> 00:05:16.010
<v Speaker 1>who has access rather than trying to own

00:05:16.010 --> 00:05:18.965
<v Speaker 1>that all yourself as a cluster operator. Nice.

00:05:19.125 --> 00:05:20.485
<v Speaker 0>I mean, I I could go into that,

00:05:20.485 --> 00:05:21.285
<v Speaker 0>but I don't know if I would not

00:05:21.285 --> 00:05:22.405
<v Speaker 0>to be the where we go in this

00:05:22.405 --> 00:05:23.925
<v Speaker 0>survey, but maybe I'll ask the questions. And

00:05:23.925 --> 00:05:25.125
<v Speaker 0>if we decide to strip it out later,

00:05:25.125 --> 00:05:27.365
<v Speaker 0>we could do that. Sure. It sounds like

00:05:27.365 --> 00:05:29.525
<v Speaker 0>there's definite there's maybe two trains of thought

00:05:29.525 --> 00:05:31.680
<v Speaker 0>here for what people could do. Where they

00:05:31.680 --> 00:05:33.919
<v Speaker 0>have this KubeConfig and someone leaves their company.

00:05:33.919 --> 00:05:35.199
<v Speaker 0>This this to me feels like a real

00:05:35.199 --> 00:05:37.600
<v Speaker 0>problem that we should probably strive. And there

00:05:37.600 --> 00:05:39.039
<v Speaker 0>are solutions, of course, you know, open use

00:05:39.039 --> 00:05:40.800
<v Speaker 0>and then other tools. But, you know, with

00:05:40.800 --> 00:05:44.400
<v Speaker 0>the straightforward KubeConfig thing, are there any admission

00:05:44.400 --> 00:05:47.425
<v Speaker 0>controllers out there that can start to block

00:05:47.425 --> 00:05:50.305
<v Speaker 0>access based on that authentication model because we

00:05:50.305 --> 00:05:51.905
<v Speaker 0>know that that person or that key has

00:05:51.905 --> 00:05:54.224
<v Speaker 0>left? Or maybe a second approach is, like,

00:05:54.224 --> 00:05:55.745
<v Speaker 0>can we change the default,

00:05:55.905 --> 00:05:58.625
<v Speaker 0>time to live on service account tokens issued

00:05:58.625 --> 00:05:59.745
<v Speaker 0>by the Kubernetes cluster?

00:06:01.220 --> 00:06:03.700
<v Speaker 1>I mean, you can change the time to

00:06:03.700 --> 00:06:05.940
<v Speaker 1>live on service account tokens.

00:06:06.980 --> 00:06:08.820
<v Speaker 1>Service account token

00:06:08.820 --> 00:06:10.900
<v Speaker 1>expiration is still pretty new.

00:06:11.300 --> 00:06:13.540
<v Speaker 1>It became the default in 01/2024,

00:06:13.540 --> 00:06:13.860
<v Speaker 1>but

00:06:14.345 --> 00:06:15.625
<v Speaker 1>if you give

00:06:15.865 --> 00:06:17.384
<v Speaker 1>so it it depends on the way the

00:06:17.384 --> 00:06:18.825
<v Speaker 1>service account is generated

00:06:18.985 --> 00:06:21.465
<v Speaker 1>or the token is generated. If the token

00:06:21.465 --> 00:06:24.185
<v Speaker 1>is generated using the token request API and

00:06:24.185 --> 00:06:25.625
<v Speaker 1>what's called projected

00:06:25.625 --> 00:06:28.389
<v Speaker 1>directly into your pod So that's the service

00:06:28.389 --> 00:06:30.150
<v Speaker 1>account when your pod fires up. You go

00:06:30.150 --> 00:06:32.470
<v Speaker 1>to, what, the far run Kubernetes secrets, I

00:06:32.470 --> 00:06:35.030
<v Speaker 1>think. That token now has an expiration date.

00:06:35.110 --> 00:06:37.110
<v Speaker 1>If you try to use

00:06:37.590 --> 00:06:40.710
<v Speaker 1>that token after the expiration date, you'll get

00:06:40.710 --> 00:06:43.105
<v Speaker 1>a warning. They'll still be accepted by default

00:06:43.105 --> 00:06:46.305
<v Speaker 1>unless the pod that it was projected into

00:06:46.465 --> 00:06:47.505
<v Speaker 1>was deleted.

00:06:47.665 --> 00:06:50.785
<v Speaker 1>So I think it's one hour

00:06:51.185 --> 00:06:53.905
<v Speaker 1>is the default right now for service account

00:06:53.905 --> 00:06:54.225
<v Speaker 1>tokens.

00:06:55.060 --> 00:06:57.460
<v Speaker 1>But let's say you instead had it for,

00:06:57.460 --> 00:06:59.300
<v Speaker 1>you know, I think ten minutes is the

00:06:59.300 --> 00:07:00.820
<v Speaker 1>minimum, which is actually what I like to

00:07:00.820 --> 00:07:02.500
<v Speaker 1>go with, to be honest. But I'm in

00:07:02.500 --> 00:07:03.860
<v Speaker 1>security, and I'm paranoid.

00:07:04.740 --> 00:07:06.420
<v Speaker 1>So let's say you have that ten minute

00:07:06.420 --> 00:07:09.275
<v Speaker 1>service account token and that gets leaked, but

00:07:09.275 --> 00:07:10.235
<v Speaker 1>the pod

00:07:10.235 --> 00:07:12.235
<v Speaker 1>is still running, you can still use that

00:07:12.235 --> 00:07:14.795
<v Speaker 1>service account token against the cluster by default.

00:07:14.875 --> 00:07:17.995
<v Speaker 1>Now that'll eventually change, but because

00:07:18.475 --> 00:07:19.355
<v Speaker 1>expiring

00:07:19.355 --> 00:07:21.035
<v Speaker 1>service account tokens

00:07:21.139 --> 00:07:23.139
<v Speaker 1>And mind you also point out, you should

00:07:23.139 --> 00:07:24.980
<v Speaker 1>never ever use a service account token when

00:07:24.980 --> 00:07:27.620
<v Speaker 1>talking to your clusters. It was never designed

00:07:27.620 --> 00:07:29.860
<v Speaker 1>that for that. It was always designed for

00:07:29.860 --> 00:07:31.060
<v Speaker 1>pod identities.

00:07:31.220 --> 00:07:32.980
<v Speaker 1>It was never designed

00:07:32.980 --> 00:07:34.820
<v Speaker 1>to be able to hand to an external

00:07:34.820 --> 00:07:37.335
<v Speaker 1>system the way you might a certificate. So

00:07:37.414 --> 00:07:39.815
<v Speaker 1>that's a that's another part of that. But,

00:07:39.815 --> 00:07:42.134
<v Speaker 1>you know, the the big issue with a

00:07:42.134 --> 00:07:43.095
<v Speaker 1>lot of

00:07:43.255 --> 00:07:44.775
<v Speaker 1>these questions around

00:07:45.255 --> 00:07:47.574
<v Speaker 1>in cluster are the things that we can

00:07:47.574 --> 00:07:49.655
<v Speaker 1>do or features that can be added to

00:07:49.655 --> 00:07:51.335
<v Speaker 1>Kubernetes in order to

00:07:51.880 --> 00:07:53.800
<v Speaker 1>get around a lot of these issues

00:07:54.200 --> 00:07:54.920
<v Speaker 1>are

00:07:55.080 --> 00:07:57.800
<v Speaker 1>the fact that that would require the type

00:07:57.800 --> 00:08:00.840
<v Speaker 1>of interaction and integration with things that you

00:08:00.840 --> 00:08:03.320
<v Speaker 1>don't really want Kubernetes to be in charge

00:08:03.320 --> 00:08:05.155
<v Speaker 1>of. So think about it from a standpoint

00:08:05.155 --> 00:08:08.195
<v Speaker 1>of, well, why doesn't Kubernetes just have users?

00:08:08.435 --> 00:08:10.115
<v Speaker 1>Right? And why can't we just attach a

00:08:10.115 --> 00:08:12.275
<v Speaker 1>password to it? Okay. How do you get

00:08:12.275 --> 00:08:14.355
<v Speaker 1>the password to the user securely? Are you

00:08:14.355 --> 00:08:15.875
<v Speaker 1>gonna email it to them? Like, are you

00:08:15.875 --> 00:08:17.315
<v Speaker 1>gonna have a human email it? Are you

00:08:17.315 --> 00:08:20.030
<v Speaker 1>gonna have an external system email it? Most

00:08:20.030 --> 00:08:23.070
<v Speaker 1>passwords required to be reset periodically.

00:08:23.150 --> 00:08:25.150
<v Speaker 1>And quite frankly, I don't want you using

00:08:25.150 --> 00:08:27.550
<v Speaker 1>password anyway. I want you using MFA.

00:08:27.870 --> 00:08:29.630
<v Speaker 1>So now is the how are you gonna

00:08:29.630 --> 00:08:31.630
<v Speaker 1>get that second token? You know, or you

00:08:31.630 --> 00:08:34.284
<v Speaker 1>can type it in. That's phishing

00:08:35.885 --> 00:08:38.765
<v Speaker 1>susceptible. You wanna use a hardware token. Okay.

00:08:38.765 --> 00:08:40.125
<v Speaker 1>Well, that means that that needs to be

00:08:40.125 --> 00:08:42.284
<v Speaker 1>built into Kube control. You know, we haven't

00:08:42.284 --> 00:08:43.485
<v Speaker 1>even gotten to the point. So

00:08:44.530 --> 00:08:46.930
<v Speaker 1>folks who are used to using, for instance,

00:08:46.930 --> 00:08:49.330
<v Speaker 1>smart cards to log in to infrastructure. So

00:08:49.330 --> 00:08:52.370
<v Speaker 1>US federal government mandates it. I imagine there

00:08:52.370 --> 00:08:54.770
<v Speaker 1>are probably more governments as well that mandate

00:08:54.770 --> 00:08:56.930
<v Speaker 1>it. But that's a a standard called p

00:08:56.930 --> 00:08:59.465
<v Speaker 1>k c s 11, being able to talk

00:08:59.465 --> 00:09:01.385
<v Speaker 1>to that smart card to use that. You

00:09:01.385 --> 00:09:02.745
<v Speaker 1>can't do that with Kubernetes,

00:09:02.905 --> 00:09:05.065
<v Speaker 1>and they won't implement it. Like, SIGAuth has

00:09:05.065 --> 00:09:06.665
<v Speaker 1>said, you know, there have been a couple

00:09:06.665 --> 00:09:08.585
<v Speaker 1>of caps open to do it, and it

00:09:08.585 --> 00:09:11.065
<v Speaker 1>just it's something that's not because the the

00:09:11.065 --> 00:09:12.665
<v Speaker 1>thing is that the CA

00:09:13.029 --> 00:09:16.390
<v Speaker 1>that your cluster uses isn't designed to generate

00:09:16.390 --> 00:09:19.670
<v Speaker 1>authentication certificates for users. It's meant to generate

00:09:19.670 --> 00:09:22.550
<v Speaker 1>authentication certificates for kubelets

00:09:22.870 --> 00:09:24.790
<v Speaker 1>and for other pieces of the infrastructure.

00:09:25.305 --> 00:09:27.865
<v Speaker 1>So we're we're trying to use this infrastructure

00:09:27.865 --> 00:09:30.425
<v Speaker 1>designed for machines with humans,

00:09:30.985 --> 00:09:34.025
<v Speaker 1>and that interaction is very, very different. And

00:09:34.025 --> 00:09:35.705
<v Speaker 1>you don't want Kubernetes to have to start

00:09:35.705 --> 00:09:37.945
<v Speaker 1>owning all those different integration points.

00:09:39.220 --> 00:09:41.380
<v Speaker 0>Okay. So I think it could be interesting

00:09:41.380 --> 00:09:42.980
<v Speaker 0>just to confirm a few things there for

00:09:42.980 --> 00:09:45.060
<v Speaker 0>the audience and actually for myself because I

00:09:45.060 --> 00:09:46.100
<v Speaker 0>made a bit of a full path there

00:09:46.100 --> 00:09:47.540
<v Speaker 0>that you kinda corrected me on, but very

00:09:47.540 --> 00:09:48.260
<v Speaker 0>politely,

00:09:48.500 --> 00:09:50.340
<v Speaker 0>is that I have a straight to service

00:09:50.340 --> 00:09:52.865
<v Speaker 0>account tokens. But, actually, if we're talking about

00:09:52.865 --> 00:09:55.665
<v Speaker 0>couplets and API servers and schedulers, they communicate

00:09:55.665 --> 00:09:57.745
<v Speaker 0>over the API server with x five zero

00:09:57.745 --> 00:10:00.065
<v Speaker 0>nine. Right. But I believe service account tokens

00:10:00.065 --> 00:10:02.625
<v Speaker 0>are are JWTs that are projected onto pods.

00:10:02.625 --> 00:10:04.225
<v Speaker 0>Yes. Okay. Perfect. So

00:10:05.905 --> 00:10:08.740
<v Speaker 0>yeah. It it's complicated. I mean, there there's

00:10:08.740 --> 00:10:11.140
<v Speaker 1>a lot of nuance in there that a

00:10:11.140 --> 00:10:14.260
<v Speaker 1>lot of people don't you know, even experts,

00:10:14.980 --> 00:10:17.860
<v Speaker 1>you know, don't always keep track of.

00:10:18.180 --> 00:10:20.340
<v Speaker 0>Yeah. I mean, we're in 2023 and, you

00:10:20.340 --> 00:10:21.940
<v Speaker 0>know, off end and off set are still

00:10:21.940 --> 00:10:24.715
<v Speaker 0>things that are are difficult for one.

00:10:25.595 --> 00:10:27.835
<v Speaker 0>And they're just I don't think they're ever

00:10:27.835 --> 00:10:29.355
<v Speaker 0>really gonna get easier because,

00:10:29.675 --> 00:10:31.275
<v Speaker 0>you know, hackers

00:10:31.275 --> 00:10:33.675
<v Speaker 0>exist. People are always gonna try to exploit

00:10:33.675 --> 00:10:35.515
<v Speaker 0>whatever system we put in place, which means

00:10:35.515 --> 00:10:37.595
<v Speaker 0>they're always gonna circumnavigate the protections we think

00:10:37.595 --> 00:10:39.860
<v Speaker 0>we we have in place. And our posture

00:10:39.860 --> 00:10:41.780
<v Speaker 0>is always gonna have to continue to evolve.

00:10:42.100 --> 00:10:44.660
<v Speaker 0>So, yeah, fun fun times always. Yeah. I

00:10:44.660 --> 00:10:47.060
<v Speaker 1>mean, the the key to me is making

00:10:47.060 --> 00:10:48.900
<v Speaker 1>it easy. Like, it it's just gotta be

00:10:48.900 --> 00:10:51.780
<v Speaker 1>easy. It's gotta be simple. Easy and safe?

00:10:51.780 --> 00:10:54.944
<v Speaker 1>Sure. Why not? I mean, I've I'll be

00:10:54.944 --> 00:10:56.704
<v Speaker 1>honest. I've got customers

00:10:56.944 --> 00:10:59.425
<v Speaker 1>that I'll securely log in to my Kubernetes

00:10:59.425 --> 00:11:02.225
<v Speaker 1>dashboard for them on this thing using a

00:11:02.225 --> 00:11:03.264
<v Speaker 1>strong token.

00:11:03.904 --> 00:11:05.584
<v Speaker 1>If I if I need to you know?

00:11:05.584 --> 00:11:08.065
<v Speaker 1>But, you know, I can have a

00:11:08.350 --> 00:11:11.470
<v Speaker 1>FIDO two hardware token on this,

00:11:12.110 --> 00:11:14.030
<v Speaker 1>even better, on my iPad.

00:11:14.430 --> 00:11:17.870
<v Speaker 1>You know? It's a hardware token. It's biometric.

00:11:18.110 --> 00:11:20.430
<v Speaker 1>So I've gotta use my my fingerprint to

00:11:20.430 --> 00:11:22.910
<v Speaker 1>log in. It's a combination of that and

00:11:22.910 --> 00:11:23.870
<v Speaker 1>a strong credential,

00:11:24.644 --> 00:11:26.404
<v Speaker 1>and I'm working on my dashboard. I don't

00:11:26.404 --> 00:11:28.805
<v Speaker 1>need coop control. I don't need you know?

00:11:28.805 --> 00:11:31.605
<v Speaker 1>Yeah. I'm not doing major deployment work,

00:11:31.764 --> 00:11:33.365
<v Speaker 1>but if I've gotta check the status of

00:11:33.365 --> 00:11:35.524
<v Speaker 1>some pods or I've gotta, you know, kick

00:11:35.524 --> 00:11:37.045
<v Speaker 1>off a cron job or something,

00:11:38.360 --> 00:11:40.920
<v Speaker 1>That's a really easy way to do that,

00:11:40.920 --> 00:11:41.960
<v Speaker 1>and it's secure.

00:11:42.200 --> 00:11:45.560
<v Speaker 1>The the the tokens are only good for

00:11:45.560 --> 00:11:47.880
<v Speaker 1>a minute. So if somebody gets a hold

00:11:47.880 --> 00:11:48.920
<v Speaker 1>of that token,

00:11:49.560 --> 00:11:51.240
<v Speaker 1>you know, it leaks in one of a

00:11:51.240 --> 00:11:53.704
<v Speaker 1>bazillion different ways. By the time they have

00:11:53.704 --> 00:11:55.865
<v Speaker 1>it, unless they're, like, sitting there waiting to

00:11:55.865 --> 00:11:57.785
<v Speaker 1>get it, by the time they have it,

00:11:57.785 --> 00:11:58.665
<v Speaker 1>it's useless.

00:11:59.305 --> 00:12:00.985
<v Speaker 1>So there there are a lot of things

00:12:00.985 --> 00:12:03.065
<v Speaker 1>we can do to make it a lot

00:12:03.384 --> 00:12:04.985
<v Speaker 1>easier. You know, easy,

00:12:05.430 --> 00:12:08.710
<v Speaker 1>that's relative. Right? But easier,

00:12:08.950 --> 00:12:10.550
<v Speaker 1>you know, if if I can make it

00:12:10.550 --> 00:12:14.390
<v Speaker 1>so that accessing clusters is second nature, which

00:12:14.390 --> 00:12:15.990
<v Speaker 1>from a security standpoint,

00:12:16.230 --> 00:12:17.750
<v Speaker 1>I I think that goes a long way

00:12:17.750 --> 00:12:20.070
<v Speaker 1>to be able to to make users more

00:12:20.070 --> 00:12:20.390
<v Speaker 1>secure.

00:12:21.065 --> 00:12:21.865
<v Speaker 1>Awesome.

00:12:22.265 --> 00:12:24.585
<v Speaker 0>Well, you know, we're fifty minutes into this

00:12:24.585 --> 00:12:26.345
<v Speaker 0>episode. We haven't covered any of the questions

00:12:26.345 --> 00:12:28.265
<v Speaker 0>that we we planned and prepared.

00:12:28.585 --> 00:12:30.745
<v Speaker 0>I think with Fidelity, it's a good taste

00:12:30.745 --> 00:12:32.505
<v Speaker 0>of what we're sort of getting. Typical day

00:12:32.505 --> 00:12:33.305
<v Speaker 1>at the bar.

00:12:33.865 --> 00:12:34.745
<v Speaker 0>Exact exactly.

00:12:35.940 --> 00:12:38.020
<v Speaker 0>Alright. I'm gonna jump around the questions a

00:12:38.020 --> 00:12:39.860
<v Speaker 0>little bit just because there there are a

00:12:39.860 --> 00:12:41.460
<v Speaker 0>few things I wanna cover and, you know,

00:12:41.460 --> 00:12:43.620
<v Speaker 0>we we know what those are, but we've

00:12:43.620 --> 00:12:46.500
<v Speaker 0>already talked about, you know, tokens, short lived

00:12:46.500 --> 00:12:48.020
<v Speaker 0>tokens. You're talking about authentication.

00:12:48.625 --> 00:12:50.545
<v Speaker 0>And this is a topic that I've seen

00:12:50.545 --> 00:12:52.945
<v Speaker 0>you speak about recently. Right? When you were

00:12:52.945 --> 00:12:55.985
<v Speaker 0>doing pipeline identity at QPuddle in Toronto just

00:12:55.985 --> 00:12:58.065
<v Speaker 0>last week. Wish we were both there. It

00:12:58.065 --> 00:12:59.665
<v Speaker 0>was great to kinda hang out in person.

00:12:59.665 --> 00:13:00.945
<v Speaker 0>So maybe you could talk about

00:13:01.730 --> 00:13:03.410
<v Speaker 0>what the this, you know, what's that talk

00:13:03.410 --> 00:13:05.569
<v Speaker 0>about? Why are we looking at tools like

00:13:05.569 --> 00:13:07.810
<v Speaker 0>OIDC? How do these improve our posture, and

00:13:07.810 --> 00:13:09.569
<v Speaker 0>why should people start taking this technology a

00:13:09.569 --> 00:13:11.570
<v Speaker 0>bit more seriously? Yeah. So

00:13:11.970 --> 00:13:14.209
<v Speaker 1>pretty typical use case in the Kubernetes world,

00:13:14.209 --> 00:13:16.129
<v Speaker 1>you say, well, I and this is one

00:13:16.129 --> 00:13:18.345
<v Speaker 1>I hear a lot. I don't want users

00:13:18.345 --> 00:13:20.345
<v Speaker 1>talking in my cluster. I want pipelines talking

00:13:20.345 --> 00:13:22.745
<v Speaker 1>in my cluster. Okay. Great. So how is

00:13:22.745 --> 00:13:25.305
<v Speaker 1>your pipeline authenticating to your cluster? Oh, I

00:13:25.305 --> 00:13:27.385
<v Speaker 1>give it a service account token. Service account

00:13:27.385 --> 00:13:28.905
<v Speaker 1>tokens don't expire by default.

00:13:29.480 --> 00:13:31.400
<v Speaker 1>So you're you're kind of back to that

00:13:31.400 --> 00:13:33.720
<v Speaker 1>certificate place. Like, you can delete a service

00:13:33.720 --> 00:13:34.280
<v Speaker 1>account

00:13:34.600 --> 00:13:37.320
<v Speaker 1>from the API server, but, you know, you

00:13:37.320 --> 00:13:38.680
<v Speaker 1>have to have that process in place. You

00:13:38.680 --> 00:13:40.600
<v Speaker 1>have to rotate. You have to get that.

00:13:40.600 --> 00:13:43.095
<v Speaker 1>Service accounts were never designed to work that

00:13:43.095 --> 00:13:44.695
<v Speaker 1>way. And so the point of the talk

00:13:44.695 --> 00:13:46.775
<v Speaker 1>was, alright. If that's the anti pattern,

00:13:47.095 --> 00:13:49.255
<v Speaker 1>how do I get my pipelines to talk

00:13:49.255 --> 00:13:50.215
<v Speaker 1>securely

00:13:50.535 --> 00:13:51.895
<v Speaker 1>to my clusters?

00:13:51.975 --> 00:13:53.575
<v Speaker 1>So we presented two approaches.

00:13:53.815 --> 00:13:56.135
<v Speaker 1>The first was let's pretend we're a user

00:13:56.135 --> 00:13:58.600
<v Speaker 1>and do it that way. So we demoed

00:13:58.600 --> 00:14:00.840
<v Speaker 1>a GitHub actions pipeline,

00:14:01.320 --> 00:14:05.480
<v Speaker 1>authenticating to an Okta identity provider using a

00:14:05.720 --> 00:14:07.240
<v Speaker 1>service account

00:14:07.399 --> 00:14:09.399
<v Speaker 1>for the folks not on YouTube. I'm using

00:14:09.399 --> 00:14:10.520
<v Speaker 1>my cody fingers.

00:14:11.480 --> 00:14:13.425
<v Speaker 1>You know, not a Kubernetes service account, but

00:14:13.425 --> 00:14:16.145
<v Speaker 1>just a generic service account inside of Okta.

00:14:16.305 --> 00:14:18.225
<v Speaker 1>I log in to open Unison. I get

00:14:18.225 --> 00:14:20.865
<v Speaker 1>my tokens, and I interact with my cluster

00:14:20.865 --> 00:14:22.385
<v Speaker 1>the way I would with,

00:14:22.705 --> 00:14:25.790
<v Speaker 1>like, any other user. And so the nice

00:14:25.790 --> 00:14:28.030
<v Speaker 1>thing about that approach is we're not using

00:14:28.030 --> 00:14:28.910
<v Speaker 1>certificates.

00:14:29.150 --> 00:14:32.430
<v Speaker 1>We're using short lived tokens for interacting with

00:14:32.430 --> 00:14:35.230
<v Speaker 1>the cluster. But the major downside is now

00:14:35.230 --> 00:14:36.830
<v Speaker 1>I'm building this custom automation

00:14:37.385 --> 00:14:38.985
<v Speaker 1>between OpenUnison

00:14:38.985 --> 00:14:40.345
<v Speaker 1>and Okta.

00:14:40.585 --> 00:14:42.745
<v Speaker 1>You know, it's 10 lines of Python, which,

00:14:42.745 --> 00:14:45.464
<v Speaker 1>you know, big deal, but Okta changes its

00:14:45.464 --> 00:14:46.585
<v Speaker 1>login process

00:14:46.585 --> 00:14:49.385
<v Speaker 1>now that Python's broken. And, of course, I

00:14:49.385 --> 00:14:52.105
<v Speaker 1>I mentioned MFA and how important MFA is

00:14:51.660 --> 00:14:54.220
<v Speaker 1>before. Right? I I said that. So, you

00:14:54.220 --> 00:14:56.300
<v Speaker 1>know, okay. Now I have a credential where

00:14:56.300 --> 00:14:57.740
<v Speaker 1>I've disabled MFA.

00:14:57.899 --> 00:14:59.500
<v Speaker 1>Like and there are ways you can still

00:14:59.500 --> 00:15:01.180
<v Speaker 1>automate MFA. You can do it with, like,

00:15:01.180 --> 00:15:02.300
<v Speaker 1>TOTP,

00:15:02.779 --> 00:15:04.699
<v Speaker 1>which is the venerable Google off, you know,

00:15:04.699 --> 00:15:07.575
<v Speaker 1>your six digit code. That's relatively easy to

00:15:07.575 --> 00:15:10.375
<v Speaker 1>automate, but still it's it's clunky.

00:15:10.375 --> 00:15:12.055
<v Speaker 1>So it's better but ain't great.

00:15:12.295 --> 00:15:14.295
<v Speaker 1>The font the what the last thing that

00:15:14.295 --> 00:15:17.335
<v Speaker 1>we demoed was this idea of using your

00:15:17.335 --> 00:15:20.500
<v Speaker 1>workflow identity. So just about every identity or

00:15:20.500 --> 00:15:23.380
<v Speaker 1>workflow system, GitHub, GitLab, they all have their

00:15:23.380 --> 00:15:24.660
<v Speaker 1>own sense of identity.

00:15:24.899 --> 00:15:26.740
<v Speaker 1>And so what that usually means is a

00:15:26.740 --> 00:15:29.620
<v Speaker 1>JWT that is injected into the workflow,

00:15:29.779 --> 00:15:32.019
<v Speaker 1>usually is an environment variable that you can

00:15:32.019 --> 00:15:32.740
<v Speaker 1>then use

00:15:33.825 --> 00:15:37.185
<v Speaker 1>to identify yourself to your workflow API, but

00:15:37.185 --> 00:15:39.025
<v Speaker 1>you can also use that to identify yourself

00:15:39.025 --> 00:15:42.385
<v Speaker 1>to external APIs like a Kubernetes cluster.

00:15:42.705 --> 00:15:44.465
<v Speaker 1>So what we did was we set up

00:15:44.465 --> 00:15:46.785
<v Speaker 1>a project that we built called CICD

00:15:46.785 --> 00:15:47.585
<v Speaker 1>proxy.

00:15:47.825 --> 00:15:49.425
<v Speaker 1>It's a

00:15:49.600 --> 00:15:52.400
<v Speaker 1>it's a deployment of the Kubo IDC proxy

00:15:52.560 --> 00:15:55.840
<v Speaker 1>with specialized Helm charts specifically for this use

00:15:55.840 --> 00:15:59.200
<v Speaker 1>case where it sets up an impersonating proxy.

00:15:59.200 --> 00:16:02.720
<v Speaker 1>So, in Kubernetes, what impersonation means is you

00:16:02.720 --> 00:16:05.135
<v Speaker 1>authenticate however you want on the front to

00:16:05.135 --> 00:16:07.215
<v Speaker 1>a reverse proxy like an NGINX or something

00:16:07.215 --> 00:16:09.855
<v Speaker 1>like that. And then you there are special

00:16:09.855 --> 00:16:10.655
<v Speaker 1>headers

00:16:10.815 --> 00:16:13.215
<v Speaker 1>that get added to the request going down

00:16:13.215 --> 00:16:13.855
<v Speaker 1>to,

00:16:14.575 --> 00:16:17.375
<v Speaker 1>the API server. And when the API server

00:16:17.375 --> 00:16:19.680
<v Speaker 1>sees it, it does it on behalf of

00:16:19.680 --> 00:16:21.360
<v Speaker 1>the impersonated user.

00:16:21.840 --> 00:16:22.320
<v Speaker 1>So

00:16:22.720 --> 00:16:25.360
<v Speaker 1>my workflow can be authorized

00:16:25.520 --> 00:16:26.960
<v Speaker 1>to very specifically

00:16:26.960 --> 00:16:30.160
<v Speaker 1>update the deployment as an example. And so

00:16:30.160 --> 00:16:32.880
<v Speaker 1>the nice thing about that is now

00:16:33.144 --> 00:16:36.825
<v Speaker 1>there is no shared secret. The CICD proxy

00:16:36.825 --> 00:16:39.785
<v Speaker 1>is pulling in what's called the OIDC discovery

00:16:39.785 --> 00:16:42.265
<v Speaker 1>document. So that says, you know, who's issuing

00:16:42.265 --> 00:16:45.144
<v Speaker 1>these tokens and what public keys do I

00:16:45.144 --> 00:16:48.250
<v Speaker 1>use to verify it. The token itself is

00:16:48.250 --> 00:16:50.649
<v Speaker 1>short lived. I think they're good for power

00:16:50.649 --> 00:16:53.209
<v Speaker 1>on GitHub by default, which as these things

00:16:53.209 --> 00:16:54.970
<v Speaker 1>go is pretty short lived. And there's no

00:16:54.970 --> 00:16:57.610
<v Speaker 1>shared secret. There's nothing to to to lose.

00:16:57.610 --> 00:16:58.730
<v Speaker 1>And if GitHub

00:16:58.889 --> 00:17:00.649
<v Speaker 1>decides to rotate its secrets,

00:17:01.485 --> 00:17:03.165
<v Speaker 1>we'll pick it up because we're just pulling

00:17:03.165 --> 00:17:05.164
<v Speaker 1>it out of an OIDC discovery document.

00:17:05.484 --> 00:17:07.565
<v Speaker 0>Yeah. I wanna make sure I understand how

00:17:07.565 --> 00:17:09.645
<v Speaker 0>this works. I mean and I have I've

00:17:09.645 --> 00:17:11.165
<v Speaker 0>configured this before, so I'm gonna try and

00:17:11.165 --> 00:17:12.924
<v Speaker 0>apply this as an example. Right? What we're

00:17:12.924 --> 00:17:14.444
<v Speaker 0>seeing here what you're seeing is

00:17:14.845 --> 00:17:17.740
<v Speaker 0>that we have GitHub who has this authentication

00:17:17.740 --> 00:17:19.900
<v Speaker 0>system. They understand identity. They know when you're

00:17:19.900 --> 00:17:21.900
<v Speaker 0>logged in because you've logged into their system,

00:17:21.900 --> 00:17:23.500
<v Speaker 0>hopefully, with MFA.

00:17:23.660 --> 00:17:25.500
<v Speaker 0>So there's a sense of trust there. Right?

00:17:25.580 --> 00:17:28.220
<v Speaker 0>Now GitHub published their public keys. And I

00:17:28.220 --> 00:17:30.060
<v Speaker 0>think what that means is what we're saying

00:17:30.365 --> 00:17:33.005
<v Speaker 0>is when we get that job from GitHub

00:17:33.005 --> 00:17:35.165
<v Speaker 0>actions, say, which is saying with the GitHub

00:17:35.165 --> 00:17:37.965
<v Speaker 0>key and is identifying as a user, it's

00:17:37.965 --> 00:17:39.725
<v Speaker 0>got a UID, a subject, whatever that is

00:17:39.725 --> 00:17:41.485
<v Speaker 0>in the job. When we get that and

00:17:41.485 --> 00:17:43.245
<v Speaker 0>verify it's saying with the public key that

00:17:43.245 --> 00:17:44.860
<v Speaker 0>we know to be GitHub, we can make

00:17:44.860 --> 00:17:47.499
<v Speaker 0>some assumptions that we trust as this user

00:17:47.500 --> 00:17:49.659
<v Speaker 0>Rawkode from GitHub.

00:17:49.980 --> 00:17:51.980
<v Speaker 0>And as such, we allow that user to

00:17:51.980 --> 00:17:55.100
<v Speaker 0>map or impersonate another role within the other

00:17:55.100 --> 00:17:56.299
<v Speaker 0>side of the wall.

00:17:57.020 --> 00:17:59.135
<v Speaker 1>It's a little simpler than that. You can

00:17:59.135 --> 00:18:02.014
<v Speaker 1>do it that way. But so every GitHub

00:18:02.014 --> 00:18:05.615
<v Speaker 1>action, every run has a a JWT that

00:18:05.615 --> 00:18:06.654
<v Speaker 1>identifies

00:18:06.654 --> 00:18:10.174
<v Speaker 1>the workflow. So your your username

00:18:10.174 --> 00:18:12.894
<v Speaker 1>in JWT Parlance, it's called the sub attribute

00:18:12.894 --> 00:18:14.014
<v Speaker 1>or the subclaim.

00:18:14.640 --> 00:18:16.960
<v Speaker 1>And it's I forget what it is off

00:18:16.960 --> 00:18:19.600
<v Speaker 1>top of my head, but it's like organization

00:18:19.600 --> 00:18:20.480
<v Speaker 1>slash

00:18:21.520 --> 00:18:23.840
<v Speaker 1>project slash repo

00:18:24.400 --> 00:18:25.280
<v Speaker 1>branch,

00:18:25.280 --> 00:18:27.200
<v Speaker 1>something like that. But it includes kind of

00:18:27.200 --> 00:18:30.945
<v Speaker 1>that critical information you would think makes a

00:18:30.945 --> 00:18:33.264
<v Speaker 1>a branch inside of a project unique.

00:18:33.985 --> 00:18:37.105
<v Speaker 1>And so that JWT says it was issued

00:18:37.105 --> 00:18:39.105
<v Speaker 1>by GitHub. It's audience

00:18:39.184 --> 00:18:39.345
<v Speaker 1>and

00:18:40.260 --> 00:18:43.460
<v Speaker 1>GitHub's unique in that or in that it

00:18:43.460 --> 00:18:46.980
<v Speaker 1>lets you actually generate a correct audience specific

00:18:46.980 --> 00:18:47.700
<v Speaker 1>for

00:18:48.020 --> 00:18:51.620
<v Speaker 1>external systems. So Alex Ellis had written some

00:18:51.620 --> 00:18:53.715
<v Speaker 1>code that showed how to do this where

00:18:53.715 --> 00:18:55.235
<v Speaker 1>you can get a custom audience. It wasn't

00:18:55.235 --> 00:18:56.434
<v Speaker 1>particularly complicated,

00:18:56.595 --> 00:18:56.995
<v Speaker 1>but,

00:18:57.715 --> 00:18:59.635
<v Speaker 1>I wanted it to be a GitHub action.

00:18:59.635 --> 00:19:01.794
<v Speaker 1>So I took what I learned from him

00:19:02.115 --> 00:19:02.674
<v Speaker 1>and

00:19:02.915 --> 00:19:05.155
<v Speaker 1>created a GitHub action that we published,

00:19:05.395 --> 00:19:07.315
<v Speaker 1>in the marketplace so that this is just

00:19:07.315 --> 00:19:08.929
<v Speaker 1>a one line call.

00:19:09.570 --> 00:19:10.930
<v Speaker 1>But that actions

00:19:10.930 --> 00:19:13.010
<v Speaker 1>generates a JWT that says,

00:19:13.890 --> 00:19:15.169
<v Speaker 1>signed by GitHub

00:19:15.650 --> 00:19:18.690
<v Speaker 1>for your cluster, whatever you said your cluster

00:19:18.690 --> 00:19:19.490
<v Speaker 1>is called.

00:19:19.970 --> 00:19:22.850
<v Speaker 1>It was generated at this time. It expires

00:19:22.850 --> 00:19:24.955
<v Speaker 1>at this time. And, also, don't use it

00:19:24.955 --> 00:19:26.955
<v Speaker 1>before this time because, you know, clock skews.

00:19:26.955 --> 00:19:29.355
<v Speaker 1>Right? And so now when I receive that

00:19:29.355 --> 00:19:30.075
<v Speaker 1>token,

00:19:30.715 --> 00:19:33.434
<v Speaker 1>the c the the Kubo IDC proxy says,

00:19:33.434 --> 00:19:33.914
<v Speaker 1>alright.

00:19:34.235 --> 00:19:36.235
<v Speaker 1>Was it signed by one of these keys

00:19:36.540 --> 00:19:39.420
<v Speaker 1>from the issuer? Yes. Good. Is it for

00:19:39.420 --> 00:19:41.180
<v Speaker 1>my audience? Is it for me? Because I

00:19:41.180 --> 00:19:43.180
<v Speaker 1>don't wanna accept in a token for somebody

00:19:43.180 --> 00:19:46.460
<v Speaker 1>else. Yes. Good. Has it expired?

00:19:46.940 --> 00:19:48.380
<v Speaker 1>No. Perfect.

00:19:48.620 --> 00:19:50.300
<v Speaker 1>So now I take those claims.

00:19:50.794 --> 00:19:52.875
<v Speaker 1>And for workflows, it's simply just the sub.

00:19:52.875 --> 00:19:55.354
<v Speaker 1>You don't generally get groups out of workflows.

00:19:55.755 --> 00:19:57.914
<v Speaker 1>And that's the user ID that I now

00:19:57.914 --> 00:20:00.794
<v Speaker 1>send to the API server. So

00:20:01.595 --> 00:20:05.355
<v Speaker 1>when I generate a deployment patch and I

00:20:05.355 --> 00:20:07.559
<v Speaker 1>send the request down,

00:20:07.720 --> 00:20:08.760
<v Speaker 1>that patch

00:20:09.000 --> 00:20:09.880
<v Speaker 1>HTTP

00:20:09.880 --> 00:20:12.919
<v Speaker 1>command contains an authorization header,

00:20:13.160 --> 00:20:14.120
<v Speaker 1>which includes

00:20:14.680 --> 00:20:16.440
<v Speaker 1>my reverse proxy's

00:20:16.440 --> 00:20:19.240
<v Speaker 1>identity because that's the thing doing the impersonation.

00:20:19.485 --> 00:20:21.565
<v Speaker 1>And then it also includes an header called

00:20:21.565 --> 00:20:23.404
<v Speaker 1>impersonate dash user

00:20:23.725 --> 00:20:24.445
<v Speaker 1>for

00:20:24.924 --> 00:20:28.924
<v Speaker 1>my workflow. So, yeah, Trello security slash

00:20:29.165 --> 00:20:30.684
<v Speaker 1>some workflow

00:20:30.684 --> 00:20:31.645
<v Speaker 1>ref main.

00:20:31.990 --> 00:20:34.149
<v Speaker 1>The API server takes that and looks for

00:20:34.149 --> 00:20:36.470
<v Speaker 1>RBAC rules that associate

00:20:36.470 --> 00:20:38.070
<v Speaker 1>with my

00:20:38.549 --> 00:20:39.989
<v Speaker 1>impersonated user

00:20:40.549 --> 00:20:42.230
<v Speaker 1>to make sure that I'm allowed to do

00:20:42.230 --> 00:20:44.870
<v Speaker 1>the things that I'm trying to do, authorizes

00:20:44.870 --> 00:20:47.325
<v Speaker 1>it, and then does the work. Then when

00:20:47.325 --> 00:20:49.644
<v Speaker 1>you look in your API server logs,

00:20:49.804 --> 00:20:52.284
<v Speaker 1>the event will have two identities.

00:20:52.445 --> 00:20:53.884
<v Speaker 1>They'll have the identity

00:20:54.125 --> 00:20:55.884
<v Speaker 1>of the reverse proxy,

00:20:56.125 --> 00:20:57.965
<v Speaker 1>and you'll have the identity of the impersonated

00:20:57.965 --> 00:20:58.684
<v Speaker 1>user.

00:20:58.765 --> 00:21:00.125
<v Speaker 1>So that way you can track

00:21:00.820 --> 00:21:03.780
<v Speaker 1>what work was done by who even though

00:21:03.860 --> 00:21:06.260
<v Speaker 1>it was done on behalf of the workflow.

00:21:06.260 --> 00:21:07.299
<v Speaker 1>It wasn't done

00:21:07.540 --> 00:21:10.820
<v Speaker 1>using the workflow's identity directly to the API

00:21:10.820 --> 00:21:12.179
<v Speaker 1>server. Nice.

00:21:12.340 --> 00:21:15.215
<v Speaker 1>There's a lot going on there. There is.

00:21:15.215 --> 00:21:17.215
<v Speaker 0>But you know what? It's understandable,

00:21:17.215 --> 00:21:19.054
<v Speaker 0>especially when you have someone like yourself that

00:21:19.054 --> 00:21:20.815
<v Speaker 0>can walk us through the process and how

00:21:20.815 --> 00:21:22.414
<v Speaker 0>it works. And I feel like I've already

00:21:22.414 --> 00:21:22.974
<v Speaker 0>learned

00:21:23.534 --> 00:21:25.534
<v Speaker 0>quite a lot in the first twenty minutes

00:21:25.534 --> 00:21:27.559
<v Speaker 0>of this episode. So awesome.

00:21:27.560 --> 00:21:28.200
<v Speaker 0>Alright.

00:21:28.520 --> 00:21:30.040
<v Speaker 0>Let's actually talk about what we were gonna

00:21:30.040 --> 00:21:32.120
<v Speaker 0>talk about now. So the last time we

00:21:32.120 --> 00:21:34.440
<v Speaker 0>spoke, you actually dropped on this little nugget

00:21:34.440 --> 00:21:36.120
<v Speaker 0>of knowledge that I didn't know before. And

00:21:36.120 --> 00:21:38.360
<v Speaker 0>it's that you wrote a book on Kubernetes

00:21:38.360 --> 00:21:39.559
<v Speaker 0>and the enterprise.

00:21:39.880 --> 00:21:41.720
<v Speaker 0>And what I'd love to know is how

00:21:41.720 --> 00:21:44.174
<v Speaker 0>you ended up writing a book.

00:21:44.575 --> 00:21:46.495
<v Speaker 0>It's not an easy commitment to take on.

00:21:46.495 --> 00:21:47.374
<v Speaker 0>Like, I've

00:21:47.535 --> 00:21:49.295
<v Speaker 0>I don't know who in the right mind

00:21:49.295 --> 00:21:51.054
<v Speaker 0>would go, yeah. Let's write a book. And

00:21:51.054 --> 00:21:52.335
<v Speaker 0>not only write a book, write a book

00:21:52.335 --> 00:21:53.455
<v Speaker 0>about Kubernetes.

00:21:53.695 --> 00:21:56.335
<v Speaker 0>There's, like, two strikes. And then third, I'm

00:21:55.789 --> 00:21:57.710
<v Speaker 0>gonna write a book about Kubernetes on enterprise.

00:21:57.710 --> 00:21:59.149
<v Speaker 0>Like, three strikes. Like, what the hell were

00:21:59.149 --> 00:21:59.789
<v Speaker 0>you thinking?

00:22:00.669 --> 00:22:02.269
<v Speaker 1>I'm a glutton for punishment.

00:22:02.429 --> 00:22:03.710
<v Speaker 1>So

00:22:03.789 --> 00:22:06.190
<v Speaker 1>how I got into the book was

00:22:07.309 --> 00:22:09.630
<v Speaker 1>my coauthor. So I coauthored the book with

00:22:09.630 --> 00:22:11.149
<v Speaker 1>a gentleman named Scott Zorovich,

00:22:12.255 --> 00:22:14.895
<v Speaker 1>and he is also a customer of mine.

00:22:14.895 --> 00:22:16.415
<v Speaker 1>So he's a customer of Trimble Securities,

00:22:17.135 --> 00:22:20.335
<v Speaker 1>and he was working on another book

00:22:20.575 --> 00:22:23.295
<v Speaker 1>that he was asked to do a

00:22:24.815 --> 00:22:25.375
<v Speaker 1>review of.

00:22:26.770 --> 00:22:29.010
<v Speaker 1>And so he was doing a review of

00:22:29.010 --> 00:22:31.170
<v Speaker 1>the book, and they really liked the feedback

00:22:31.170 --> 00:22:33.170
<v Speaker 1>he was giving. And they're like, you know,

00:22:33.170 --> 00:22:34.930
<v Speaker 1>you really know your stuff. Would you like

00:22:34.930 --> 00:22:35.889
<v Speaker 1>to write a book?

00:22:36.290 --> 00:22:36.929
<v Speaker 1>And

00:22:37.490 --> 00:22:39.890
<v Speaker 1>so he said, yeah. That sounds like fun.

00:22:40.565 --> 00:22:42.485
<v Speaker 1>And so he started looking at, you know,

00:22:42.485 --> 00:22:45.044
<v Speaker 1>what goes into enterprise Kubernetes.

00:22:45.684 --> 00:22:47.365
<v Speaker 1>You know, he works at a big bank,

00:22:47.605 --> 00:22:50.645
<v Speaker 1>and he wanted to you know, what are

00:22:50.645 --> 00:22:52.485
<v Speaker 1>the things that he cares about day to

00:22:52.485 --> 00:22:55.680
<v Speaker 1>day from running large scale Kubernetes clusters? Right.

00:22:55.680 --> 00:22:57.520
<v Speaker 1>Yeah. We all talk about things like, you

00:22:57.520 --> 00:22:58.880
<v Speaker 1>know, service mesh,

00:22:58.960 --> 00:23:01.919
<v Speaker 1>all these real sexy things, but, you know,

00:23:01.920 --> 00:23:04.159
<v Speaker 1>nobody's like, backups.

00:23:04.640 --> 00:23:05.360
<v Speaker 1>Oh,

00:23:05.440 --> 00:23:06.160
<v Speaker 1>I want that.

00:23:08.095 --> 00:23:10.175
<v Speaker 1>And so, you know, it was what are

00:23:10.175 --> 00:23:12.495
<v Speaker 1>those things that, you know, load balancers. Oh,

00:23:12.495 --> 00:23:14.175
<v Speaker 1>I really wanna see those.

00:23:15.055 --> 00:23:16.895
<v Speaker 1>And so he wanted to get into, you

00:23:16.895 --> 00:23:18.255
<v Speaker 1>know, some of that nitty gritty that, you

00:23:18.255 --> 00:23:19.935
<v Speaker 1>know, the enterprise world's just a little bit

00:23:19.935 --> 00:23:20.175
<v Speaker 1>different.

00:23:21.240 --> 00:23:21.880
<v Speaker 1>And

00:23:22.280 --> 00:23:24.200
<v Speaker 1>so we started chatting, and he's like, you

00:23:24.200 --> 00:23:25.720
<v Speaker 1>know, I wanna you know, what do you

00:23:25.720 --> 00:23:26.760
<v Speaker 1>think about this? What do you think about

00:23:26.760 --> 00:23:28.680
<v Speaker 1>that? And then after about an hour conversation,

00:23:28.680 --> 00:23:30.040
<v Speaker 1>he's like, oh, this is stupid. Do you

00:23:30.040 --> 00:23:31.480
<v Speaker 1>wanna co write it with it?

00:23:31.960 --> 00:23:33.880
<v Speaker 1>I was like, yeah. That actually sounds kinda

00:23:33.880 --> 00:23:35.725
<v Speaker 1>fun. And so that's how I actually got

00:23:35.725 --> 00:23:38.205
<v Speaker 1>signed on to coauthor the book. You know,

00:23:38.205 --> 00:23:40.365
<v Speaker 1>for any aspiring authors out there, I will

00:23:40.365 --> 00:23:42.044
<v Speaker 1>tell you you're not gonna make a lot

00:23:42.044 --> 00:23:44.764
<v Speaker 1>of money off of it. It basically fuels

00:23:44.764 --> 00:23:46.205
<v Speaker 1>my cone of coffee habit,

00:23:47.325 --> 00:23:49.190
<v Speaker 1>but that's about it. But, you know, it's

00:23:49.190 --> 00:23:50.870
<v Speaker 1>it's it's fun. It is a lot of

00:23:50.870 --> 00:23:52.789
<v Speaker 1>fun to do. And then,

00:23:53.510 --> 00:23:55.910
<v Speaker 1>you know, coming from an enterprise background, you

00:23:55.910 --> 00:23:57.830
<v Speaker 1>know, our customers are enterprises.

00:23:58.550 --> 00:24:00.470
<v Speaker 1>My customers, you know, even back in my

00:24:00.470 --> 00:24:02.710
<v Speaker 1>private consulting days were enterprises for the most

00:24:02.710 --> 00:24:05.424
<v Speaker 1>part. So, you know, we kinda looked around

00:24:05.424 --> 00:24:06.864
<v Speaker 1>and said, enterprises

00:24:07.105 --> 00:24:09.104
<v Speaker 1>are a little bit different. They're siloed.

00:24:09.345 --> 00:24:11.345
<v Speaker 1>Right? That that's a big thing. You've got

00:24:11.345 --> 00:24:12.945
<v Speaker 1>a service provider. You know, we always talk

00:24:12.945 --> 00:24:15.184
<v Speaker 1>about these hyperscales or these big service providers

00:24:15.184 --> 00:24:17.905
<v Speaker 1>like, you know, Uber and Spotify and Netflix

00:24:17.905 --> 00:24:21.390
<v Speaker 1>and where everything driven is to this one

00:24:21.390 --> 00:24:24.670
<v Speaker 1>thing. Right? It's delivering the video, delivering the

00:24:24.670 --> 00:24:27.710
<v Speaker 1>food, delivering the person, whatever. Right? But, like,

00:24:27.710 --> 00:24:28.669
<v Speaker 1>everything

00:24:28.830 --> 00:24:30.590
<v Speaker 1>drives into that one thing.

00:24:30.910 --> 00:24:31.950
<v Speaker 1>Whereas enterprises,

00:24:33.245 --> 00:24:34.205
<v Speaker 1>you have

00:24:34.605 --> 00:24:36.605
<v Speaker 1>thousands of silos

00:24:37.085 --> 00:24:39.405
<v Speaker 1>that can be anywhere from

00:24:39.805 --> 00:24:42.205
<v Speaker 1>a couple dozen users to a couple thousand

00:24:42.205 --> 00:24:43.005
<v Speaker 1>users.

00:24:43.485 --> 00:24:46.285
<v Speaker 1>And to the people in those silos,

00:24:46.285 --> 00:24:49.160
<v Speaker 1>what they're working on is the most important

00:24:49.160 --> 00:24:51.080
<v Speaker 1>thing and the most mission critical thing in

00:24:51.080 --> 00:24:52.360
<v Speaker 1>the world because that's what they get paid

00:24:52.360 --> 00:24:52.919
<v Speaker 1>for.

00:24:53.720 --> 00:24:54.679
<v Speaker 1>And so

00:24:56.280 --> 00:24:58.840
<v Speaker 1>when you deploy something like Kubernetes,

00:24:59.000 --> 00:25:00.760
<v Speaker 1>and I know the DevOps gods will strike

00:25:00.760 --> 00:25:02.520
<v Speaker 1>me down for saying silos are a good

00:25:02.520 --> 00:25:02.760
<v Speaker 1>thing,

00:25:03.925 --> 00:25:06.485
<v Speaker 1>but that that's just the reality of enterprises.

00:25:06.485 --> 00:25:08.965
<v Speaker 1>Everything's siloed because that's management structure

00:25:08.965 --> 00:25:12.165
<v Speaker 1>is a silo, silos of silos of silos.

00:25:13.205 --> 00:25:16.005
<v Speaker 1>And so we wanted to build a a

00:25:16.005 --> 00:25:18.165
<v Speaker 1>Kubernetes book that addressed

00:25:18.390 --> 00:25:21.190
<v Speaker 1>the technology from that perspective.

00:25:21.590 --> 00:25:22.070
<v Speaker 1>So,

00:25:22.710 --> 00:25:24.470
<v Speaker 1>it's not really a beginner's book.

00:25:24.790 --> 00:25:27.510
<v Speaker 1>I will give Scott really big props. He

00:25:27.510 --> 00:25:30.150
<v Speaker 1>wrote scripts to be able to use Kine,

00:25:30.310 --> 00:25:33.425
<v Speaker 1>Kubernetes and Docker for folks that aren't aware,

00:25:34.945 --> 00:25:36.625
<v Speaker 1>where we use Kine

00:25:36.945 --> 00:25:37.665
<v Speaker 1>for

00:25:38.625 --> 00:25:40.945
<v Speaker 1>almost all of the workshops and the demos

00:25:40.945 --> 00:25:42.785
<v Speaker 1>inside of the book and all the hands

00:25:42.785 --> 00:25:44.639
<v Speaker 1>on stuff. And, like, I use it every

00:25:44.639 --> 00:25:46.159
<v Speaker 1>day. Like, I'm like, okay. I need a

00:25:46.159 --> 00:25:47.840
<v Speaker 1>cluster. I'm gonna go run Scott's script and

00:25:47.840 --> 00:25:49.440
<v Speaker 1>boom. I have a kind cluster up and

00:25:49.440 --> 00:25:49.999
<v Speaker 1>running.

00:25:51.279 --> 00:25:54.720
<v Speaker 1>So load balancers, authentication, we get into using

00:25:54.720 --> 00:25:55.519
<v Speaker 1>OPA,

00:25:55.840 --> 00:25:56.799
<v Speaker 1>Gatekeeper.

00:25:57.279 --> 00:25:58.960
<v Speaker 1>We dive into GitOps,

00:25:59.545 --> 00:26:00.505
<v Speaker 1>backups,

00:26:00.905 --> 00:26:01.784
<v Speaker 1>Falco.

00:26:04.185 --> 00:26:05.625
<v Speaker 1>The last chapter,

00:26:06.185 --> 00:26:07.065
<v Speaker 1>we do,

00:26:07.465 --> 00:26:09.625
<v Speaker 1>we actually build out a namespace as a

00:26:09.625 --> 00:26:12.265
<v Speaker 1>service with GitOps. So Argo,

00:26:12.265 --> 00:26:13.385
<v Speaker 1>OpenUnison,

00:26:13.385 --> 00:26:14.424
<v Speaker 1>Tekton,

00:26:14.425 --> 00:26:16.640
<v Speaker 1>and GitLab, and building it out so that,

00:26:16.640 --> 00:26:18.880
<v Speaker 1>you know, you can log in, request act

00:26:19.040 --> 00:26:21.279
<v Speaker 1>you know, request the namespace get created.

00:26:21.520 --> 00:26:23.920
<v Speaker 1>It generates all the Git repos and everything.

00:26:23.920 --> 00:26:26.080
<v Speaker 1>So it really dives into

00:26:26.240 --> 00:26:28.559
<v Speaker 1>a lot of the nitty gritty, and and

00:26:28.640 --> 00:26:29.840
<v Speaker 1>it's more than a cookbook,

00:26:30.265 --> 00:26:32.585
<v Speaker 1>but it or it's more than a theory

00:26:32.585 --> 00:26:34.345
<v Speaker 1>book, but it's not quite a cookbook.

00:26:34.505 --> 00:26:36.345
<v Speaker 1>Like, we didn't wanna say here are specific

00:26:36.345 --> 00:26:37.705
<v Speaker 1>recipes to use.

00:26:38.184 --> 00:26:39.465
<v Speaker 1>We wanted to say,

00:26:39.625 --> 00:26:42.265
<v Speaker 1>here are common use cases and common things

00:26:42.265 --> 00:26:44.390
<v Speaker 1>that you see in an enterprise. Here's how

00:26:44.390 --> 00:26:45.909
<v Speaker 1>we're tackling them and why,

00:26:46.230 --> 00:26:47.909
<v Speaker 1>and here are the exercises that you can

00:26:47.909 --> 00:26:48.469
<v Speaker 1>use

00:26:48.789 --> 00:26:49.830
<v Speaker 1>to to

00:26:49.990 --> 00:26:52.549
<v Speaker 1>kinda get your cause sharp on it. Nice.

00:26:52.789 --> 00:26:54.070
<v Speaker 0>I mean, based on all the things that

00:26:54.070 --> 00:26:55.669
<v Speaker 0>you've just kind of listed there, but what's

00:26:55.669 --> 00:26:57.029
<v Speaker 0>covered in the book, the topics.

00:26:57.505 --> 00:26:58.705
<v Speaker 0>And, like, if we were to draw a

00:26:58.705 --> 00:27:00.945
<v Speaker 0>Venn diagram for, like, shut this important for

00:27:00.945 --> 00:27:03.025
<v Speaker 0>the enterprise Kubernetes customer and then shut this

00:27:03.025 --> 00:27:04.945
<v Speaker 0>important for your regular Kubernetes,

00:27:04.945 --> 00:27:06.465
<v Speaker 0>you know, technology company

00:27:06.625 --> 00:27:09.105
<v Speaker 0>Kubernetes customer. Like, there a lot of that

00:27:09.105 --> 00:27:10.465
<v Speaker 0>is right in the center. Like, it's still

00:27:10.465 --> 00:27:11.985
<v Speaker 0>applicable to people on both side.

00:27:12.520 --> 00:27:15.160
<v Speaker 0>You know, the obviously, the communication structures, the

00:27:15.160 --> 00:27:16.520
<v Speaker 0>legacy procedures,

00:27:16.520 --> 00:27:18.679
<v Speaker 0>backup and restore Doctor, it's gonna be slightly

00:27:18.679 --> 00:27:20.600
<v Speaker 0>different on the enterprise side. It sounds like

00:27:20.600 --> 00:27:22.040
<v Speaker 0>there's a lot of value for just anyone

00:27:22.040 --> 00:27:24.440
<v Speaker 0>who's in this Kubernetes space that that still

00:27:24.440 --> 00:27:26.200
<v Speaker 0>wants to handle get ups and backups and

00:27:26.200 --> 00:27:28.355
<v Speaker 0>load balancers and, you know, those are all

00:27:28.355 --> 00:27:29.954
<v Speaker 0>nice words to me. I like those words.

00:27:30.115 --> 00:27:32.914
<v Speaker 1>Yeah. I there is definitely a big center

00:27:32.914 --> 00:27:33.474
<v Speaker 1>area.

00:27:33.955 --> 00:27:35.234
<v Speaker 1>I think where

00:27:35.554 --> 00:27:37.074
<v Speaker 1>the change

00:27:37.315 --> 00:27:39.475
<v Speaker 1>where where the edges are, where where that

00:27:39.475 --> 00:27:40.595
<v Speaker 1>overlap isn't,

00:27:41.120 --> 00:27:43.360
<v Speaker 1>is a lot of it is around things

00:27:43.360 --> 00:27:44.559
<v Speaker 1>like policy,

00:27:44.720 --> 00:27:46.400
<v Speaker 1>you know, stuff that we, you know Yeah.

00:27:46.400 --> 00:27:48.400
<v Speaker 0>I don't like that word. Yeah. People don't

00:27:48.400 --> 00:27:50.560
<v Speaker 1>like that word. I'm a security guy, and

00:27:50.560 --> 00:27:51.680
<v Speaker 1>I don't like that word.

00:27:52.640 --> 00:27:53.840
<v Speaker 1>But policy,

00:27:54.320 --> 00:27:56.955
<v Speaker 1>you know, checking the box, it it you

00:27:56.955 --> 00:27:58.235
<v Speaker 1>know, we all joke about it, but we

00:27:58.235 --> 00:27:59.515
<v Speaker 1>have to do it. We have no choice.

00:27:59.515 --> 00:28:01.914
<v Speaker 1>Sometimes legally, we have to do it. And

00:28:02.155 --> 00:28:04.554
<v Speaker 1>making it so that there's a a

00:28:04.875 --> 00:28:07.355
<v Speaker 1>understanding control. So give me an example.

00:28:07.915 --> 00:28:09.275
<v Speaker 1>A lot of folks will say to me,

00:28:09.275 --> 00:28:11.909
<v Speaker 1>well, my cluster runs in pick your favorite

00:28:11.909 --> 00:28:12.549
<v Speaker 1>cloud,

00:28:12.789 --> 00:28:14.949
<v Speaker 1>and that cloud has its own IAM.

00:28:15.269 --> 00:28:17.830
<v Speaker 1>Why wouldn't I just use that cloud's IAM

00:28:17.830 --> 00:28:19.029
<v Speaker 1>for authentication?

00:28:19.909 --> 00:28:21.909
<v Speaker 1>And the reason is

00:28:22.389 --> 00:28:25.269
<v Speaker 1>or the question is, do you wanna be,

00:28:25.269 --> 00:28:27.029
<v Speaker 1>as the cloud team, responsible

00:28:27.405 --> 00:28:29.645
<v Speaker 1>for when something doesn't work that you don't

00:28:29.645 --> 00:28:31.885
<v Speaker 1>have control over? In this case, authentication and

00:28:31.885 --> 00:28:32.765
<v Speaker 1>authorization.

00:28:33.165 --> 00:28:34.605
<v Speaker 1>So if

00:28:34.925 --> 00:28:37.725
<v Speaker 1>I'm running an AWS cluster as an example,

00:28:37.885 --> 00:28:40.685
<v Speaker 1>EKS. Right? I get that little config map.

00:28:41.130 --> 00:28:43.290
<v Speaker 1>So so for folks that don't use EKS

00:28:43.290 --> 00:28:46.090
<v Speaker 1>or or aren't aware, EKS has a config

00:28:46.090 --> 00:28:49.770
<v Speaker 1>map that it uses for RBAC authorization.

00:28:49.770 --> 00:28:51.850
<v Speaker 1>So that that's where you define your IAM

00:28:51.850 --> 00:28:54.090
<v Speaker 1>roles that are authorized and you map it

00:28:54.090 --> 00:28:56.975
<v Speaker 1>to users and groups that then Kubernetes uses

00:28:56.975 --> 00:28:58.014
<v Speaker 1>for our back.

00:28:58.335 --> 00:29:00.735
<v Speaker 1>Well, do you wanna be do you, as

00:29:00.735 --> 00:29:02.815
<v Speaker 1>the cloud team, wanna be responsible

00:29:02.815 --> 00:29:03.534
<v Speaker 1>for that?

00:29:03.934 --> 00:29:06.415
<v Speaker 1>Sometimes the answer is yes because of the

00:29:06.415 --> 00:29:08.095
<v Speaker 1>way the organization is. And I find that

00:29:08.095 --> 00:29:09.855
<v Speaker 1>a lot of times in service providers,

00:29:10.470 --> 00:29:12.790
<v Speaker 1>that answer is yes because of the way

00:29:12.790 --> 00:29:14.789
<v Speaker 1>that silos have been streamlined.

00:29:15.190 --> 00:29:17.590
<v Speaker 1>But in enterprise world, do you wanna be

00:29:17.590 --> 00:29:19.270
<v Speaker 1>the one that gets called into a meeting

00:29:19.270 --> 00:29:21.110
<v Speaker 1>every time there's a problem even if it's

00:29:21.110 --> 00:29:23.110
<v Speaker 1>not your fault? But you still have to

00:29:23.110 --> 00:29:25.904
<v Speaker 1>defend your team and your situation.

00:29:26.065 --> 00:29:28.144
<v Speaker 1>So what I'll often find, and this is

00:29:28.144 --> 00:29:29.984
<v Speaker 1>true of any centralized service,

00:29:30.625 --> 00:29:33.505
<v Speaker 1>where the first implementation is this attempt to

00:29:33.505 --> 00:29:36.464
<v Speaker 1>build this really stringent

00:29:36.784 --> 00:29:39.570
<v Speaker 1>like, this is our vision. This is how

00:29:39.570 --> 00:29:42.770
<v Speaker 1>it's going to work. It's a product. Again,

00:29:42.770 --> 00:29:45.250
<v Speaker 1>folks listening at home using my coding fingers.

00:29:45.570 --> 00:29:47.090
<v Speaker 1>And then the problem becomes

00:29:47.170 --> 00:29:49.570
<v Speaker 1>all these little corner cases that come up,

00:29:50.294 --> 00:29:50.934
<v Speaker 1>and

00:29:51.095 --> 00:29:53.095
<v Speaker 1>you're not able to handle it. And now

00:29:53.095 --> 00:29:56.134
<v Speaker 1>you're going in front of the you know,

00:29:56.134 --> 00:29:58.854
<v Speaker 1>it might be the CIO, my director, whatever.

00:29:58.855 --> 00:30:00.375
<v Speaker 1>But they're saying, hey. This is your fault

00:30:00.375 --> 00:30:01.975
<v Speaker 1>because I don't have access to be able

00:30:01.975 --> 00:30:04.054
<v Speaker 1>to fix these things. And so you get

00:30:04.054 --> 00:30:05.495
<v Speaker 1>a pendulum swing where it says, you know

00:30:05.495 --> 00:30:06.910
<v Speaker 1>what? I don't want anything to do with

00:30:06.910 --> 00:30:08.750
<v Speaker 1>this. Everybody gets cluster admin.

00:30:08.830 --> 00:30:11.870
<v Speaker 1>Cluster admin for everybody. Right? And then security

00:30:11.870 --> 00:30:13.550
<v Speaker 1>is your problem. And so now you get

00:30:13.550 --> 00:30:16.030
<v Speaker 1>this big other swing where it's like, okay.

00:30:16.030 --> 00:30:18.430
<v Speaker 1>We're gonna leave everything completely open, and I'm

00:30:18.430 --> 00:30:20.190
<v Speaker 1>sure it'll be fine. What's the worst that

00:30:20.190 --> 00:30:22.895
<v Speaker 1>could happen? And so that's where, you know,

00:30:22.895 --> 00:30:23.695
<v Speaker 1>authentication

00:30:23.695 --> 00:30:24.975
<v Speaker 1>and being able to say, you know what?

00:30:24.975 --> 00:30:28.015
<v Speaker 1>I'm gonna delegate to something that you own

00:30:28.495 --> 00:30:30.735
<v Speaker 1>so that you can make your own authorization

00:30:30.735 --> 00:30:31.455
<v Speaker 1>decisions.

00:30:31.535 --> 00:30:33.855
<v Speaker 1>We'll still enforce the authorization decisions,

00:30:34.399 --> 00:30:36.880
<v Speaker 1>but you're gonna be responsible for making those

00:30:36.880 --> 00:30:37.519
<v Speaker 1>decisions.

00:30:37.759 --> 00:30:39.840
<v Speaker 1>And so that's how you then split that

00:30:39.840 --> 00:30:42.559
<v Speaker 1>particular baby in saying, I'm gonna continue to

00:30:42.559 --> 00:30:45.039
<v Speaker 1>manage and own the cluster operations,

00:30:45.440 --> 00:30:47.279
<v Speaker 1>but I'm gonna allow the people in charge

00:30:47.279 --> 00:30:51.335
<v Speaker 1>of my customer that's in charge, the users,

00:30:51.335 --> 00:30:52.855
<v Speaker 1>the the app admins,

00:30:52.935 --> 00:30:55.255
<v Speaker 1>to control who needs and has access and

00:30:55.255 --> 00:30:57.015
<v Speaker 1>when. And that that to me is the

00:30:57.015 --> 00:30:59.495
<v Speaker 1>big difference between an enterprise implementation

00:30:59.815 --> 00:31:00.455
<v Speaker 1>and

00:31:00.695 --> 00:31:03.495
<v Speaker 1>most service provider based implementations.

00:31:03.495 --> 00:31:06.650
<v Speaker 0>Awesome. So, you know, we're talking about identity

00:31:06.650 --> 00:31:09.290
<v Speaker 0>and security and all this fun stuff. Right?

00:31:09.370 --> 00:31:10.970
<v Speaker 0>This is I mean, I've seen a lot

00:31:10.970 --> 00:31:12.170
<v Speaker 0>of trends, and I'm sure you've seen them

00:31:12.170 --> 00:31:13.530
<v Speaker 0>too over the last six or seven years

00:31:13.530 --> 00:31:14.490
<v Speaker 0>with Kubernetes

00:31:14.570 --> 00:31:16.890
<v Speaker 0>with service mesh being huge and then get

00:31:16.890 --> 00:31:18.985
<v Speaker 0>ups being huge. And then there's a least

00:31:18.985 --> 00:31:20.825
<v Speaker 0>uptake in open policy,

00:31:20.905 --> 00:31:23.865
<v Speaker 0>but it kinda got railroaded by the security

00:31:23.865 --> 00:31:25.144
<v Speaker 0>and supply chain,

00:31:25.465 --> 00:31:28.665
<v Speaker 0>not movement, but huge rock rolling down the

00:31:28.665 --> 00:31:30.025
<v Speaker 0>hill in the energy on sale to the

00:31:30.025 --> 00:31:32.490
<v Speaker 0>entire Kubernetes community. You know, even at KubeCon,

00:31:32.490 --> 00:31:35.370
<v Speaker 0>you said, you spoke at the SecurityCon. It's

00:31:35.370 --> 00:31:36.570
<v Speaker 0>got its own day now, but not only

00:31:36.570 --> 00:31:38.250
<v Speaker 0>did it have its own day, it had

00:31:38.250 --> 00:31:40.090
<v Speaker 0>the security village, but it had even more

00:31:40.090 --> 00:31:41.530
<v Speaker 0>talks throughout the conference.

00:31:41.930 --> 00:31:43.450
<v Speaker 0>So it it's very hard to to get

00:31:43.450 --> 00:31:45.450
<v Speaker 0>away from what's happening with supply chain security

00:31:45.450 --> 00:31:47.705
<v Speaker 0>identity and policy. And I'm curious, you know,

00:31:47.705 --> 00:31:49.625
<v Speaker 0>you've you've been on this a long time.

00:31:49.625 --> 00:31:52.424
<v Speaker 0>You've seen everything progress and hopefully improve.

00:31:52.745 --> 00:31:55.465
<v Speaker 0>But how has the landscape evolved over the

00:31:55.465 --> 00:31:57.145
<v Speaker 0>last twelve months, and and what needs to

00:31:57.145 --> 00:31:59.065
<v Speaker 0>happen over the next twelve months to get

00:31:59.065 --> 00:32:01.465
<v Speaker 0>us in to quote, unquote, a good position?

00:32:02.130 --> 00:32:03.890
<v Speaker 0>Are we already in a good position?

00:32:04.370 --> 00:32:06.050
<v Speaker 0>How do you wanna tackle that? We're not

00:32:06.050 --> 00:32:08.370
<v Speaker 1>in a terrible position. We're probably

00:32:08.450 --> 00:32:10.130
<v Speaker 1>not in a worse position.

00:32:10.850 --> 00:32:12.610
<v Speaker 1>You know, automation's

00:32:12.610 --> 00:32:13.970
<v Speaker 1>always gonna be a double edged sword. Right?

00:32:13.970 --> 00:32:15.650
<v Speaker 1>Because it makes it much easier to do

00:32:15.650 --> 00:32:17.174
<v Speaker 1>things, which means it makes it easier to

00:32:17.174 --> 00:32:18.855
<v Speaker 1>do security, which you have to do the

00:32:18.855 --> 00:32:19.494
<v Speaker 1>security.

00:32:19.655 --> 00:32:22.215
<v Speaker 1>Right? You know, supply chain specifically,

00:32:23.414 --> 00:32:25.015
<v Speaker 1>you know, I I kinda look at supply

00:32:25.015 --> 00:32:27.495
<v Speaker 1>chain in two different aspects. Like, there's two

00:32:27.495 --> 00:32:29.655
<v Speaker 1>really important aspects of supply chain security.

00:32:30.460 --> 00:32:31.579
<v Speaker 1>There's the

00:32:31.820 --> 00:32:35.019
<v Speaker 1>security of the image. Right? How many CVEs?

00:32:35.019 --> 00:32:36.620
<v Speaker 1>How many known vulnerabilities

00:32:36.620 --> 00:32:38.380
<v Speaker 1>are in your images? Like, that's

00:32:39.019 --> 00:32:40.940
<v Speaker 1>you talk to any security expert. The first

00:32:40.940 --> 00:32:43.419
<v Speaker 1>thing they're gonna tell you is most breaches

00:32:43.419 --> 00:32:44.779
<v Speaker 1>are because of unpatched

00:32:45.145 --> 00:32:47.865
<v Speaker 1>known vulnerabilities. It's not some, you know, state

00:32:47.865 --> 00:32:49.865
<v Speaker 1>actor who, you know, figured out how to

00:32:49.865 --> 00:32:52.585
<v Speaker 1>break into your cluster because there's a team

00:32:52.585 --> 00:32:54.665
<v Speaker 1>of a thousand hackers figuring out it's you

00:32:54.665 --> 00:32:56.585
<v Speaker 1>know, they bought a vulnerability off of someone

00:32:56.585 --> 00:32:58.184
<v Speaker 1>that, you know, from three years ago that

00:32:58.184 --> 00:33:00.590
<v Speaker 1>never got patched, someone said, oh, I can

00:33:00.590 --> 00:33:01.470
<v Speaker 1>use this.

00:33:01.870 --> 00:33:04.110
<v Speaker 1>And so that's one that is

00:33:04.590 --> 00:33:06.750
<v Speaker 1>easy for most people to conceptualize.

00:33:06.750 --> 00:33:08.750
<v Speaker 1>Right? I have an image. I need to

00:33:08.750 --> 00:33:10.830
<v Speaker 1>keep it updated. How do I do that?

00:33:10.830 --> 00:33:12.350
<v Speaker 1>And there are lots of great tools for

00:33:12.350 --> 00:33:13.150
<v Speaker 1>for doing that.

00:33:13.755 --> 00:33:15.275
<v Speaker 1>But the other side of it is it

00:33:15.275 --> 00:33:17.515
<v Speaker 1>becomes an identity problem. So,

00:33:17.995 --> 00:33:18.795
<v Speaker 1>Sigstore

00:33:18.795 --> 00:33:20.955
<v Speaker 1>is a great example. This is a really

00:33:20.955 --> 00:33:23.755
<v Speaker 1>interesting technology to me. So what the folks

00:33:23.755 --> 00:33:25.275
<v Speaker 1>at Sigstore did,

00:33:25.835 --> 00:33:27.995
<v Speaker 1>ChenGuard, the name of the company, created this

00:33:27.995 --> 00:33:30.530
<v Speaker 1>project where they said, alright. We're gonna do

00:33:30.530 --> 00:33:33.250
<v Speaker 1>image signing. So that way, you know that

00:33:33.250 --> 00:33:34.850
<v Speaker 1>the image you're running was the one that

00:33:34.850 --> 00:33:35.570
<v Speaker 1>you built.

00:33:35.810 --> 00:33:36.769
<v Speaker 1>That's great.

00:33:37.010 --> 00:33:39.570
<v Speaker 1>Right? But what's really interesting about what they

00:33:39.570 --> 00:33:40.850
<v Speaker 1>did was they said, okay.

00:33:41.330 --> 00:33:43.810
<v Speaker 1>We're not gonna make it about keys anymore

00:33:43.395 --> 00:33:45.235
<v Speaker 1>in the you know, because we've doing artifact

00:33:45.235 --> 00:33:47.154
<v Speaker 1>signing for what? Thirty years?

00:33:47.955 --> 00:33:50.515
<v Speaker 1>But, you know, if the signature was invalid,

00:33:50.515 --> 00:33:52.515
<v Speaker 1>we just hit continue and kept going anyway.

00:33:52.515 --> 00:33:54.755
<v Speaker 1>Right? I mean, it it it had no

00:33:54.755 --> 00:33:56.515
<v Speaker 1>meaning. So what they did was they said,

00:33:56.515 --> 00:33:58.115
<v Speaker 1>okay. We're gonna make the certificates

00:33:58.810 --> 00:34:00.809
<v Speaker 1>just a mechanism,

00:34:01.370 --> 00:34:03.450
<v Speaker 1>but not the important part.

00:34:03.770 --> 00:34:06.970
<v Speaker 1>So when you sign an image using cosign,

00:34:06.970 --> 00:34:10.090
<v Speaker 1>you authenticate to the cosign server, the CA,

00:34:10.250 --> 00:34:13.065
<v Speaker 1>which gives you a temporary certificate, a short

00:34:13.065 --> 00:34:14.824
<v Speaker 1>lived or ephemeral, whatever you wanna call it.

00:34:14.824 --> 00:34:16.824
<v Speaker 1>Think it's good for ten minutes, key pair

00:34:16.824 --> 00:34:17.225
<v Speaker 1>that

00:34:17.625 --> 00:34:19.945
<v Speaker 1>you then use to sign your container.

00:34:20.105 --> 00:34:23.065
<v Speaker 1>You then also write that information into a

00:34:23.065 --> 00:34:26.250
<v Speaker 1>transparency law. So what you're validating from a

00:34:26.250 --> 00:34:29.290
<v Speaker 1>policy level and from a signature level, yes,

00:34:29.290 --> 00:34:31.370
<v Speaker 1>you do the cryptographic stuff,

00:34:31.450 --> 00:34:33.850
<v Speaker 1>but really what you're validating is the identity

00:34:33.850 --> 00:34:36.330
<v Speaker 1>of the signer. It's no longer about the

00:34:36.330 --> 00:34:36.970
<v Speaker 1>key.

00:34:37.290 --> 00:34:39.050
<v Speaker 1>The key is inconsequential.

00:34:39.515 --> 00:34:42.395
<v Speaker 1>It's the identity of the signer that becomes

00:34:42.395 --> 00:34:43.035
<v Speaker 1>important.

00:34:43.675 --> 00:34:45.594
<v Speaker 1>So if the identity of the signer is

00:34:45.594 --> 00:34:46.315
<v Speaker 1>important,

00:34:47.035 --> 00:34:49.195
<v Speaker 1>then you now have to go back through

00:34:49.195 --> 00:34:51.195
<v Speaker 1>your infrastructure and make sure

00:34:51.515 --> 00:34:53.915
<v Speaker 1>that that identity is not valid.

00:34:54.549 --> 00:34:56.389
<v Speaker 1>Right? So let's go back to the GitHub

00:34:56.389 --> 00:34:57.030
<v Speaker 1>action.

00:34:57.270 --> 00:34:59.830
<v Speaker 1>That GitHub action generates a JWT.

00:35:00.230 --> 00:35:00.950
<v Speaker 1>Great.

00:35:01.190 --> 00:35:03.109
<v Speaker 1>You can use that JWT

00:35:03.190 --> 00:35:05.830
<v Speaker 1>to get a certificate and sign your image.

00:35:06.230 --> 00:35:08.765
<v Speaker 1>Who kicked off that action? Was it kicked

00:35:08.765 --> 00:35:10.605
<v Speaker 1>off by a logged in user?

00:35:10.845 --> 00:35:13.645
<v Speaker 1>Did somebody commit some code that that was

00:35:13.645 --> 00:35:16.365
<v Speaker 1>a part of? Did that person have correct

00:35:16.365 --> 00:35:17.965
<v Speaker 1>access to that repo?

00:35:18.445 --> 00:35:20.445
<v Speaker 1>So that's an identity problem. That's not a

00:35:20.445 --> 00:35:22.930
<v Speaker 1>a key problem. Now let's get back to

00:35:22.930 --> 00:35:24.450
<v Speaker 1>the idea of, okay.

00:35:24.850 --> 00:35:27.410
<v Speaker 1>I've generated this this cert.

00:35:27.730 --> 00:35:29.570
<v Speaker 1>Think about it from a GitOps standpoint.

00:35:30.050 --> 00:35:32.530
<v Speaker 1>You're gonna have usually two repos. Right? You're

00:35:32.530 --> 00:35:34.290
<v Speaker 1>gonna have a code repo and a,

00:35:34.610 --> 00:35:35.650
<v Speaker 1>infrastructure repo.

00:35:36.875 --> 00:35:38.475
<v Speaker 1>Your code repo runs.

00:35:38.555 --> 00:35:41.434
<v Speaker 1>You want it to update your infrastructure repo

00:35:41.434 --> 00:35:43.595
<v Speaker 1>to say, okay. Here's the new version of

00:35:43.595 --> 00:35:44.395
<v Speaker 1>my image.

00:35:44.714 --> 00:35:46.555
<v Speaker 1>And then you've gotta get that infrastructure repo

00:35:46.555 --> 00:35:48.395
<v Speaker 1>into your cluster.

00:35:48.555 --> 00:35:51.599
<v Speaker 1>You're gonna use something like Argo or Flux.

00:35:51.599 --> 00:35:54.480
<v Speaker 1>Right? But how do you know that all

00:35:54.480 --> 00:35:56.400
<v Speaker 1>those things that are talking together are doing

00:35:56.400 --> 00:35:59.359
<v Speaker 1>it with a real identity, a unique identity,

00:35:59.359 --> 00:36:01.440
<v Speaker 1>and that identity that you can trust?

00:36:02.240 --> 00:36:05.119
<v Speaker 1>And so the supply chain problem

00:36:05.454 --> 00:36:07.535
<v Speaker 1>now becomes an identity

00:36:07.535 --> 00:36:09.775
<v Speaker 1>problem, not a key management problem,

00:36:10.494 --> 00:36:11.934
<v Speaker 1>to solve or at least a big part

00:36:11.934 --> 00:36:14.335
<v Speaker 1>of it. And then you're increasing the security

00:36:14.335 --> 00:36:17.454
<v Speaker 1>of your environment now because now everything's talking

00:36:17.454 --> 00:36:20.174
<v Speaker 1>with these short lived keys and specific identities.

00:36:20.870 --> 00:36:23.350
<v Speaker 1>And so everything else comes for the ride.

00:36:23.990 --> 00:36:26.150
<v Speaker 1>And so going back to the where we're

00:36:26.150 --> 00:36:29.350
<v Speaker 1>talking earlier about, you know, my service account

00:36:29.590 --> 00:36:31.190
<v Speaker 1>talks to my cluster.

00:36:31.270 --> 00:36:33.030
<v Speaker 1>If you're using that static service account from

00:36:33.030 --> 00:36:36.315
<v Speaker 1>outside the cluster, the identities that are generated

00:36:36.315 --> 00:36:38.555
<v Speaker 1>from anything that gets created by that static

00:36:38.555 --> 00:36:40.475
<v Speaker 1>service account are now in question because you

00:36:40.475 --> 00:36:42.875
<v Speaker 1>have it's much harder to verify.

00:36:43.675 --> 00:36:46.475
<v Speaker 1>So I'm actually gonna be out at Identiverse.

00:36:46.800 --> 00:36:49.120
<v Speaker 1>Well, it's next week now. I don't know

00:36:49.120 --> 00:36:51.680
<v Speaker 1>when this is gonna publish. It's it's the

00:36:51.680 --> 00:36:52.880
<v Speaker 1>June,

00:36:52.960 --> 00:36:55.360
<v Speaker 1>and that's actually an identity management focused conference

00:36:55.600 --> 00:36:58.880
<v Speaker 1>talking about this and showing a a

00:36:59.040 --> 00:37:02.135
<v Speaker 1>doing a lab of how do you securely

00:37:02.135 --> 00:37:04.295
<v Speaker 1>provision your environment to actually

00:37:04.535 --> 00:37:06.295
<v Speaker 1>get out of Sigstore

00:37:06.615 --> 00:37:09.015
<v Speaker 1>what you're hoping to get out of it.

00:37:09.575 --> 00:37:12.055
<v Speaker 1>It it's it's kinda like

00:37:12.775 --> 00:37:15.015
<v Speaker 1>I I like to explain it as it

00:37:15.015 --> 00:37:16.695
<v Speaker 1>wasn't the astronomers

00:37:17.150 --> 00:37:18.270
<v Speaker 1>that solved

00:37:18.510 --> 00:37:20.110
<v Speaker 1>cross Atlantic navigation.

00:37:20.590 --> 00:37:21.950
<v Speaker 1>It was the watchmakers.

00:37:22.110 --> 00:37:24.510
<v Speaker 1>It's not gonna be the cryptographers

00:37:24.510 --> 00:37:26.590
<v Speaker 1>that signed supply chain security.

00:37:26.750 --> 00:37:28.750
<v Speaker 1>It's gonna be the identity management experts

00:37:28.974 --> 00:37:32.095
<v Speaker 1>because it it it's that lower level problem

00:37:32.095 --> 00:37:34.495
<v Speaker 1>that then bubbles up to everything else.

00:37:34.815 --> 00:37:35.455
<v Speaker 0>Awesome.

00:37:35.615 --> 00:37:37.135
<v Speaker 0>I think that monologue is a pretty good

00:37:37.135 --> 00:37:38.895
<v Speaker 0>way to end the episode. That

00:37:40.494 --> 00:37:42.830
<v Speaker 0>was great. Thank you. Alright, Mark. It's been

00:37:42.830 --> 00:37:44.510
<v Speaker 0>an absolute pleasure. Thank you so much for

00:37:44.510 --> 00:37:46.110
<v Speaker 0>your time today and for sharing all of

00:37:46.110 --> 00:37:49.070
<v Speaker 0>this wonderful security information with me and with

00:37:49.070 --> 00:37:49.870
<v Speaker 0>the audience.

00:37:50.110 --> 00:37:51.790
<v Speaker 0>Please take a moment now to give us

00:37:51.790 --> 00:37:54.110
<v Speaker 0>more information on your company, your products, any

00:37:54.110 --> 00:37:56.495
<v Speaker 0>shameless plugs, anything at all that you want

00:37:56.495 --> 00:37:58.655
<v Speaker 0>to share before we finish up. Yeah. And

00:37:58.655 --> 00:38:00.175
<v Speaker 1>thanks for having me, David. I always have

00:38:00.175 --> 00:38:00.895
<v Speaker 1>a blast.

00:38:02.015 --> 00:38:04.415
<v Speaker 1>So you wanna learn how to, you know,

00:38:04.415 --> 00:38:08.495
<v Speaker 1>simplify access to your clusters? Go to openunison.github.io.

00:38:09.150 --> 00:38:11.790
<v Speaker 1>All our stuff is open source. Everything's documented

00:38:11.790 --> 00:38:14.589
<v Speaker 1>there. You can ask issues on GitHub. Happy

00:38:14.589 --> 00:38:17.310
<v Speaker 1>to handle there. And, of course, support contracts,

00:38:17.390 --> 00:38:18.350
<v Speaker 1>always available.

00:38:19.630 --> 00:38:21.950
<v Speaker 1>And then if you're interested in

00:38:22.190 --> 00:38:23.950
<v Speaker 1>using our CICD proxy

00:38:24.645 --> 00:38:27.605
<v Speaker 1>for for managing access for your clusters from

00:38:27.605 --> 00:38:31.765
<v Speaker 1>your workflows, that is cicdproxy.github.io.

00:38:31.765 --> 00:38:33.925
<v Speaker 1>Again, % open source

00:38:34.165 --> 00:38:34.565
<v Speaker 1>and,

00:38:35.505 --> 00:38:37.585
<v Speaker 1>yeah, helps you automate that as well. That'll

00:38:37.585 --> 00:38:40.625
<v Speaker 1>do your ingress controllers. That'll do your RBAC

00:38:40.625 --> 00:38:43.665
<v Speaker 1>rules that simplifies that entire deployment process for

00:38:43.665 --> 00:38:45.905
<v Speaker 1>you. Alright. Thank you very much.
