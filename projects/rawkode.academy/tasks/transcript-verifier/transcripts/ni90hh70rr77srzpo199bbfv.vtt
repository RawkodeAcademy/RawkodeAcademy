WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: e3ebe3e4-c634-4211-a6f6-90f08e950663
Created: 2025-04-29T22:29:00.391Z
Duration: 6270.0225
Channels: 1

00:01:02.955 --> 00:01:04.394
<v Speaker 0>Hello. Hello. Hello.

00:01:06.955 --> 00:01:09.835
<v Speaker 0>How are you, Caleb? I'm good. Thanks, mate.

00:01:10.475 --> 00:01:11.515
<v Speaker 1>Raring to go.

00:01:13.275 --> 00:01:14.075
<v Speaker 0>So

00:01:14.410 --> 00:01:15.290
<v Speaker 0>today,

00:01:15.610 --> 00:01:18.170
<v Speaker 0>you very kindly offered to join me,

00:01:18.890 --> 00:01:21.290
<v Speaker 0>and we are going to take a crack

00:01:21.290 --> 00:01:22.010
<v Speaker 0>at

00:01:23.690 --> 00:01:27.130
<v Speaker 0>modernizing PHP development using Docker, Docker Compose, and

00:01:27.130 --> 00:01:27.690
<v Speaker 0>Kubernetes.

00:01:28.955 --> 00:01:31.035
<v Speaker 1>Yeah. I'm excited because I've seen a few

00:01:31.035 --> 00:01:32.475
<v Speaker 1>different ways of doing it,

00:01:33.675 --> 00:01:36.075
<v Speaker 1>and I want to hear your way.

00:01:37.915 --> 00:01:38.555
<v Speaker 0>Well so,

00:01:39.755 --> 00:01:42.075
<v Speaker 0>I mean, the confession here is the last

00:01:42.075 --> 00:01:44.715
<v Speaker 0>time I wrote a line of PHP was

00:01:43.830 --> 00:01:45.510
<v Speaker 0>probably in 2016.

00:01:46.310 --> 00:01:46.870
<v Speaker 0>However

00:01:47.190 --> 00:01:48.630
<v Speaker 1>Still the same. I'm good on the Docker

00:01:48.630 --> 00:01:52.150
<v Speaker 0>stuff. Right? So Yeah. Like, between us, we

00:01:52.150 --> 00:01:55.030
<v Speaker 0>we we we got this. I'm sure. So

00:01:55.590 --> 00:01:57.110
<v Speaker 0>do you just wanted to do a quick

00:01:57.110 --> 00:01:59.275
<v Speaker 0>introduction? You happy to do that for thirty

00:01:59.275 --> 00:02:00.075
<v Speaker 0>seconds?

00:02:00.155 --> 00:02:03.115
<v Speaker 1>Hello, everyone. I'm Kieran. I'm primarily a software

00:02:03.115 --> 00:02:03.835
<v Speaker 1>developer,

00:02:04.075 --> 00:02:05.995
<v Speaker 1>so I'm less of an ops person.

00:02:06.635 --> 00:02:08.635
<v Speaker 1>I do a lot of consulting,

00:02:08.875 --> 00:02:11.115
<v Speaker 1>lot of TDD and BDD stuff, lot of

00:02:11.115 --> 00:02:11.755
<v Speaker 1>agile stuff.

00:02:13.130 --> 00:02:14.890
<v Speaker 1>And I've I've kind of avoided

00:02:15.690 --> 00:02:17.930
<v Speaker 1>caring too much about where stuff gets deployed

00:02:17.930 --> 00:02:19.290
<v Speaker 1>until the last few years.

00:02:20.010 --> 00:02:21.530
<v Speaker 1>And I think I've got a decent Docker

00:02:21.530 --> 00:02:22.090
<v Speaker 1>knowledge.

00:02:22.890 --> 00:02:24.810
<v Speaker 1>I'm terrible at orchestration.

00:02:25.145 --> 00:02:27.465
<v Speaker 1>So it may lose me towards the end,

00:02:27.465 --> 00:02:28.985
<v Speaker 1>but I can I'm sort of up on

00:02:28.985 --> 00:02:29.865
<v Speaker 1>containers,

00:02:30.505 --> 00:02:32.665
<v Speaker 1>and someone else takes care of that other

00:02:32.665 --> 00:02:33.225
<v Speaker 1>stuff

00:02:33.625 --> 00:02:34.825
<v Speaker 1>a lot of the time.

00:02:36.425 --> 00:02:38.105
<v Speaker 1>I guess that's right. One of the things

00:02:38.105 --> 00:02:40.105
<v Speaker 1>about Docker is that

00:02:41.580 --> 00:02:44.460
<v Speaker 1>even if you're just a software person,

00:02:44.540 --> 00:02:46.780
<v Speaker 1>right, you're having to understand how these things

00:02:46.780 --> 00:02:48.220
<v Speaker 1>work because it's maybe how you're running it

00:02:48.220 --> 00:02:49.100
<v Speaker 1>locally as well.

00:02:50.380 --> 00:02:53.340
<v Speaker 1>It's it's Yeah. And I I think that's

00:02:52.605 --> 00:02:54.525
<v Speaker 0>that's really important. I think that what we're

00:02:54.525 --> 00:02:55.965
<v Speaker 0>gonna look at today is is how do

00:02:55.965 --> 00:02:57.245
<v Speaker 0>we use these tools

00:02:57.405 --> 00:02:59.645
<v Speaker 0>to make this local development process

00:02:59.724 --> 00:03:00.525
<v Speaker 0>better.

00:03:00.845 --> 00:03:02.605
<v Speaker 0>But then, you know, get it that, you

00:03:02.605 --> 00:03:04.685
<v Speaker 0>know, the last mile as well and so

00:03:04.685 --> 00:03:06.845
<v Speaker 0>it's something like Kubernetes or any container based

00:03:06.845 --> 00:03:09.520
<v Speaker 0>deployment really. But we're we're focused on Kubernetes.

00:03:09.520 --> 00:03:10.080
<v Speaker 0>Yeah.

00:03:10.400 --> 00:03:12.800
<v Speaker 0>And I'm not too worried about my lack

00:03:12.800 --> 00:03:15.200
<v Speaker 0>of PHP knowledge because when see, when it

00:03:15.200 --> 00:03:17.280
<v Speaker 0>comes to container based development, there's only two

00:03:17.280 --> 00:03:20.000
<v Speaker 0>ways to go. There's dynamic and interpreted languages,

00:03:20.765 --> 00:03:22.445
<v Speaker 0>and then there's compiled languages.

00:03:22.765 --> 00:03:24.925
<v Speaker 0>Like, that's it. Like, there's only two workflows,

00:03:24.925 --> 00:03:27.885
<v Speaker 0>and I don't I've never seen a runtime

00:03:27.885 --> 00:03:29.485
<v Speaker 0>or a language or a framework where that

00:03:29.485 --> 00:03:32.605
<v Speaker 0>changes beyond those two dynamics. So Yeah. I'm

00:03:32.605 --> 00:03:34.910
<v Speaker 0>pretty confident. I think in a typical PHP

00:03:34.910 --> 00:03:37.470
<v Speaker 1>project, you also have to understand it's

00:03:37.550 --> 00:03:40.030
<v Speaker 1>likely to also be a JavaScript project.

00:03:40.750 --> 00:03:42.910
<v Speaker 1>So something that people find difficult is that

00:03:42.910 --> 00:03:44.990
<v Speaker 1>they're having to manage those two separate build

00:03:44.990 --> 00:03:45.870
<v Speaker 1>pipelines

00:03:46.670 --> 00:03:48.110
<v Speaker 1>and and, yeah, have the interrupt.

00:03:49.335 --> 00:03:50.775
<v Speaker 0>You know, I never

00:03:51.015 --> 00:03:53.015
<v Speaker 0>even gave that a moment's thought.

00:03:53.255 --> 00:03:53.975
<v Speaker 0>So

00:03:55.735 --> 00:03:57.415
<v Speaker 0>if that comes up, we'll tackle it one

00:03:57.415 --> 00:03:59.335
<v Speaker 0>step at a time. Yeah. That's just from

00:03:59.335 --> 00:04:00.935
<v Speaker 1>my experience of, you know, here's a nice

00:04:00.935 --> 00:04:03.255
<v Speaker 1>PHP deployment pipeline, and someone says, well, how

00:04:03.255 --> 00:04:05.560
<v Speaker 1>do I get my webpack stuff into that

00:04:05.560 --> 00:04:06.280
<v Speaker 1>as well?

00:04:07.319 --> 00:04:09.239
<v Speaker 1>Because I've got to transpile all this TypeScript

00:04:09.239 --> 00:04:11.160
<v Speaker 1>I've written, and you kind of

00:04:11.560 --> 00:04:14.120
<v Speaker 1>shrug your shoulders if you're a PHP person.

00:04:15.000 --> 00:04:16.680
<v Speaker 0>Yeah. We'll we'll we'll do our best to

00:04:16.680 --> 00:04:18.760
<v Speaker 0>tackle that too. Because that's more like a

00:04:18.760 --> 00:04:19.399
<v Speaker 1>compile

00:04:19.785 --> 00:04:21.625
<v Speaker 1>pipeline style. Right?

00:04:22.345 --> 00:04:24.265
<v Speaker 0>Well, yeah. It it has a belt step

00:04:24.265 --> 00:04:27.305
<v Speaker 0>to, you know, generate some assets that need

00:04:27.305 --> 00:04:29.785
<v Speaker 0>to be consumed from the actual web server

00:04:29.785 --> 00:04:30.745
<v Speaker 0>side of things.

00:04:30.985 --> 00:04:32.505
<v Speaker 0>I think, actually, it would be really cool

00:04:32.505 --> 00:04:33.865
<v Speaker 0>to cover that because one of the things

00:04:33.865 --> 00:04:35.620
<v Speaker 0>we're gonna focus on today is a split

00:04:35.620 --> 00:04:38.500
<v Speaker 0>between the PHP code being interpreted by PHP

00:04:38.500 --> 00:04:39.300
<v Speaker 0>FBM

00:04:39.460 --> 00:04:40.260
<v Speaker 0>and

00:04:40.500 --> 00:04:43.460
<v Speaker 0>engine x actually running as the web server.

00:04:43.620 --> 00:04:45.300
<v Speaker 0>So, you know, been able to deliver those

00:04:45.300 --> 00:04:47.220
<v Speaker 0>static access into the engine x server,

00:04:48.365 --> 00:04:50.605
<v Speaker 0>then just have the PHP code be delivered

00:04:50.605 --> 00:04:51.645
<v Speaker 0>from PHP.

00:04:51.965 --> 00:04:53.645
<v Speaker 0>Depending on how this works, like, kinda haven't

00:04:53.645 --> 00:04:55.645
<v Speaker 0>read PHP in a long time, but we

00:04:55.645 --> 00:04:57.005
<v Speaker 0>could do we could easily go the other

00:04:57.005 --> 00:04:58.925
<v Speaker 0>way and have PHP, FPM deliver those static

00:04:58.925 --> 00:05:01.880
<v Speaker 0>assets too. So I think where your wonderful

00:05:01.880 --> 00:05:03.560
<v Speaker 0>judgment is gonna have to keep me right

00:05:03.560 --> 00:05:06.280
<v Speaker 0>on what is best practice at PHP lab.

00:05:07.240 --> 00:05:09.480
<v Speaker 1>And so the question that comes up lots

00:05:09.480 --> 00:05:10.920
<v Speaker 1>and lots in

00:05:11.480 --> 00:05:13.960
<v Speaker 1>PHP in PHP land when you're doing Docker

00:05:13.960 --> 00:05:16.974
<v Speaker 1>is because PHP isn't a web server. FPM

00:05:16.974 --> 00:05:18.175
<v Speaker 1>isn't a web server.

00:05:19.134 --> 00:05:21.775
<v Speaker 1>Typically, people are using NGINX and FPM.

00:05:22.655 --> 00:05:24.175
<v Speaker 1>And so the obvious question

00:05:25.055 --> 00:05:27.694
<v Speaker 1>that every Slack and every IOC channel has

00:05:27.694 --> 00:05:29.294
<v Speaker 1>is, should I put them in the one

00:05:29.294 --> 00:05:29.694
<v Speaker 1>container,

00:05:30.150 --> 00:05:31.830
<v Speaker 1>or should I have two I

00:05:32.229 --> 00:05:33.510
<v Speaker 1>know you've got an opinion.

00:05:34.310 --> 00:05:35.510
<v Speaker 1>Last time I I do.

00:05:36.710 --> 00:05:40.070
<v Speaker 0>Do definitely have an opinion. So I'm gonna

00:05:40.070 --> 00:05:43.110
<v Speaker 0>share my screen right away because I

00:05:44.229 --> 00:05:46.475
<v Speaker 0>have tackled this question

00:05:46.794 --> 00:05:47.595
<v Speaker 0>before.

00:05:48.155 --> 00:05:50.634
<v Speaker 0>I give a talk in 2018. In fact,

00:05:50.634 --> 00:05:52.314
<v Speaker 0>I've given this talk many, many times. I'm

00:05:52.314 --> 00:05:52.794
<v Speaker 0>sure it

00:05:53.594 --> 00:05:54.875
<v Speaker 0>I think you've seen it on one on

00:05:54.875 --> 00:05:56.634
<v Speaker 0>one occasion, but it's my kick ass development

00:05:56.634 --> 00:05:57.835
<v Speaker 0>environments with Docker talk.

00:05:58.540 --> 00:06:00.860
<v Speaker 0>I gave this talk from 2016

00:06:00.860 --> 00:06:03.820
<v Speaker 0>to 2018. The one that's got the most

00:06:05.419 --> 00:06:07.820
<v Speaker 0>traction and questions is this one from LaraCon

00:06:07.820 --> 00:06:09.180
<v Speaker 0>to be in such a large event.

00:06:10.855 --> 00:06:12.775
<v Speaker 0>But and this talk, what I said to

00:06:12.775 --> 00:06:15.895
<v Speaker 0>people was, you know, always deploy them separately.

00:06:15.975 --> 00:06:18.535
<v Speaker 0>Always deploy NGINX and FPM separately.

00:06:18.775 --> 00:06:20.855
<v Speaker 0>Mhmm. And it's important to know that, well,

00:06:20.855 --> 00:06:22.295
<v Speaker 0>Kubernetes was definitely

00:06:22.789 --> 00:06:25.270
<v Speaker 0>probably still the default container orchestration tool in

00:06:25.270 --> 00:06:28.389
<v Speaker 0>production in 2018, this talk focused purely on

00:06:28.389 --> 00:06:31.190
<v Speaker 0>local development, nothing else. And what I suggest

00:06:31.190 --> 00:06:34.229
<v Speaker 0>that people do is to use a Docker

00:06:35.205 --> 00:06:37.365
<v Speaker 0>a Docker option which allows you to consume

00:06:37.365 --> 00:06:39.925
<v Speaker 0>the volumes from one container and another container,

00:06:40.725 --> 00:06:42.565
<v Speaker 0>which meant that you could have engine x

00:06:42.565 --> 00:06:43.445
<v Speaker 0>consume

00:06:43.525 --> 00:06:45.925
<v Speaker 0>all of the code volume from the APM

00:06:45.925 --> 00:06:46.805
<v Speaker 0>container,

00:06:47.045 --> 00:06:49.740
<v Speaker 0>and you didn't have to worry about the

00:06:49.740 --> 00:06:51.820
<v Speaker 0>fails not exist on the engine x container.

00:06:51.820 --> 00:06:53.660
<v Speaker 0>Because that's the biggest problem. Right? People say,

00:06:53.660 --> 00:06:55.420
<v Speaker 0>oh, I need things on engine x because

00:06:55.420 --> 00:06:57.340
<v Speaker 0>engine x has to know that fail exists.

00:06:58.940 --> 00:06:59.180
<v Speaker 0>You

00:07:00.955 --> 00:07:02.315
<v Speaker 1>does it need to know about the PHP

00:07:02.315 --> 00:07:02.875
<v Speaker 1>files?

00:07:03.195 --> 00:07:06.395
<v Speaker 0>It doesn't. No. So It's the other came

00:07:06.395 --> 00:07:07.515
<v Speaker 1>out. Right? It's the

00:07:08.074 --> 00:07:10.074
<v Speaker 0>So that's what I wanna show today exactly.

00:07:10.074 --> 00:07:11.995
<v Speaker 0>The engine access doesn't care if those files

00:07:11.995 --> 00:07:13.995
<v Speaker 0>exist or not. It can forward them without

00:07:13.995 --> 00:07:15.195
<v Speaker 0>doing any local checks.

00:07:15.950 --> 00:07:18.270
<v Speaker 0>So where the volume's from option and the

00:07:18.270 --> 00:07:19.950
<v Speaker 0>talk is is still very much valid and

00:07:19.950 --> 00:07:21.950
<v Speaker 0>you can use that local development, it falls

00:07:21.950 --> 00:07:24.350
<v Speaker 0>flat when you go to production. Very difficult

00:07:24.350 --> 00:07:26.190
<v Speaker 0>to have a volume with your code being

00:07:26.190 --> 00:07:28.750
<v Speaker 0>orchestrated on multiple nodes and are consumed for

00:07:28.750 --> 00:07:30.245
<v Speaker 0>token damage. So

00:07:30.485 --> 00:07:32.485
<v Speaker 0>we're we're just gonna promote the idea that

00:07:32.485 --> 00:07:34.485
<v Speaker 0>NGINX doesn't care and doesn't need to care

00:07:34.485 --> 00:07:38.085
<v Speaker 0>about that. And one of the questions I

00:07:38.085 --> 00:07:39.845
<v Speaker 0>get all the time or just at the

00:07:39.845 --> 00:07:40.885
<v Speaker 0>bottom of the thread are,

00:07:41.699 --> 00:07:42.979
<v Speaker 0>you have an example of how I do

00:07:42.979 --> 00:07:45.300
<v Speaker 0>this today? People who want to see this

00:07:45.380 --> 00:07:46.979
<v Speaker 0>they they want the quote. Right? They don't

00:07:46.979 --> 00:07:48.340
<v Speaker 0>wanna have to write this themselves.

00:07:48.580 --> 00:07:50.979
<v Speaker 0>And that's our plan. And we're gonna provide

00:07:50.979 --> 00:07:53.300
<v Speaker 0>a quote for people to do this without

00:07:53.300 --> 00:07:56.500
<v Speaker 0>having to constantly questions and comments on this

00:07:56.500 --> 00:07:56.819
<v Speaker 0>review.

00:07:58.895 --> 00:08:01.615
<v Speaker 0>With that in mind, I have gone ahead

00:08:01.615 --> 00:08:05.615
<v Speaker 0>and created a PHP examples repository

00:08:05.694 --> 00:08:08.974
<v Speaker 0>on get labs slash Rawkode slash PHP hyphen

00:08:08.974 --> 00:08:09.615
<v Speaker 0>examples.

00:08:10.430 --> 00:08:12.430
<v Speaker 0>I will synchronize it to GitHub later, but

00:08:12.430 --> 00:08:14.030
<v Speaker 0>for now, this is where it's gonna live.

00:08:14.190 --> 00:08:16.110
<v Speaker 0>Mhmm. And I haven't checked it locally, and

00:08:16.110 --> 00:08:17.950
<v Speaker 0>assuming our setup is

00:08:18.510 --> 00:08:19.630
<v Speaker 0>working nicely,

00:08:19.790 --> 00:08:21.630
<v Speaker 0>you should have the ability to take the

00:08:21.630 --> 00:08:23.710
<v Speaker 0>take the take the somewhere in the file.

00:08:28.485 --> 00:08:30.085
<v Speaker 1>It's it's loading. It's

00:08:30.165 --> 00:08:30.565
<v Speaker 1>Okay.

00:08:32.405 --> 00:08:34.725
<v Speaker 0>Well, it's not important. Might be saturating my

00:08:34.725 --> 00:08:35.125
<v Speaker 1>bandwidth.

00:08:41.490 --> 00:08:43.490
<v Speaker 0>But you can always see what I'm typing.

00:08:43.490 --> 00:08:45.329
<v Speaker 0>We can try and pair program program it

00:08:45.329 --> 00:08:46.769
<v Speaker 0>up, and if we really need to, we'll

00:08:46.769 --> 00:08:48.050
<v Speaker 0>refresh your staff.

00:08:48.610 --> 00:08:49.490
<v Speaker 0>Okay.

00:08:49.569 --> 00:08:50.690
<v Speaker 1>Yeah. It does work.

00:08:51.649 --> 00:08:53.089
<v Speaker 1>Okay. Let me try typing something.

00:08:53.865 --> 00:08:55.545
<v Speaker 0>Oh, there we go. You're there in my

00:08:55.545 --> 00:08:57.225
<v Speaker 0>file. Hello? Perfect.

00:08:59.865 --> 00:09:00.665
<v Speaker 0>So I'll

00:09:02.345 --> 00:09:04.505
<v Speaker 0>I kind of I've only added some readmeets

00:09:04.505 --> 00:09:05.625
<v Speaker 0>right now so that I could push this

00:09:05.625 --> 00:09:06.185
<v Speaker 0>repository.

00:09:06.770 --> 00:09:08.770
<v Speaker 0>Mhmm. So the plan being that we'll cover

00:09:08.770 --> 00:09:11.330
<v Speaker 0>using Docker Docker Compose for local development,

00:09:11.490 --> 00:09:13.970
<v Speaker 0>cover the last mile of getting into Kubernetes,

00:09:14.050 --> 00:09:16.210
<v Speaker 0>tackle any pain points and pitfalls as we

00:09:16.210 --> 00:09:16.690
<v Speaker 0>go.

00:09:17.330 --> 00:09:19.490
<v Speaker 0>You're gonna keep me right on everything that

00:09:19.490 --> 00:09:21.170
<v Speaker 0>you have inside of your head, and I

00:09:21.170 --> 00:09:22.130
<v Speaker 0>will do my best to

00:09:23.225 --> 00:09:25.305
<v Speaker 0>describe everything that I'm doing as we go.

00:09:25.305 --> 00:09:26.505
<v Speaker 0>Now my plan

00:09:27.785 --> 00:09:29.385
<v Speaker 0>sleep after that, won't worry.

00:09:29.625 --> 00:09:30.584
<v Speaker 0>So it's

00:09:30.904 --> 00:09:32.745
<v Speaker 0>to use Slim framework.

00:09:32.824 --> 00:09:36.105
<v Speaker 0>I'm now doubting that decision already because I

00:09:36.105 --> 00:09:38.024
<v Speaker 0>don't think that Slim

00:09:38.870 --> 00:09:40.070
<v Speaker 0>has that

00:09:40.310 --> 00:09:42.310
<v Speaker 0>node JS dependency

00:09:42.550 --> 00:09:45.110
<v Speaker 0>build step, and maybe it's better to do

00:09:45.110 --> 00:09:47.430
<v Speaker 0>something a bit more feature complete or at

00:09:47.430 --> 00:09:49.590
<v Speaker 0>least has all those steps for us to

00:09:49.590 --> 00:09:51.430
<v Speaker 0>to deal with. What are your thoughts?

00:09:55.245 --> 00:09:57.165
<v Speaker 1>I don't have a strong preference which framework.

00:09:57.165 --> 00:09:59.085
<v Speaker 1>I I'm not an expert in how to

00:09:59.085 --> 00:10:02.365
<v Speaker 1>build web assets. I'm regretting making it kind

00:10:02.365 --> 00:10:04.845
<v Speaker 1>of, but we could do something in slim

00:10:04.845 --> 00:10:07.805
<v Speaker 1>and just add a little

00:10:06.720 --> 00:10:08.399
<v Speaker 1>transpile step to something.

00:10:10.720 --> 00:10:12.320
<v Speaker 1>Or we could just talk about it.

00:10:13.199 --> 00:10:15.439
<v Speaker 0>No. Okay. We'll continue with the plan. We'll

00:10:15.439 --> 00:10:17.600
<v Speaker 0>just it's definitely easier if get a PHP

00:10:17.600 --> 00:10:20.315
<v Speaker 0>web framework going that I'm familiar with. We

00:10:20.315 --> 00:10:22.395
<v Speaker 0>can very easily add, like, a package dot

00:10:22.395 --> 00:10:23.115
<v Speaker 0>JSON,

00:10:23.435 --> 00:10:25.835
<v Speaker 0>fill in some random load dependency and have

00:10:25.835 --> 00:10:28.315
<v Speaker 0>it spell an asset. Right? And I'm okay

00:10:28.315 --> 00:10:29.675
<v Speaker 0>with that. Yeah.

00:10:30.235 --> 00:10:30.635
<v Speaker 0>Okay.

00:10:31.610 --> 00:10:33.770
<v Speaker 0>Which means that what we have to do

00:10:33.770 --> 00:10:37.610
<v Speaker 0>is create a new slim framework application.

00:10:39.610 --> 00:10:41.210
<v Speaker 0>So how do I do that?

00:10:47.014 --> 00:10:49.095
<v Speaker 1>Do you just install it with Composer

00:10:49.415 --> 00:10:51.415
<v Speaker 1>and make an index PHP?

00:10:51.415 --> 00:10:54.454
<v Speaker 1>Something along those lines? Yep. So according to

00:10:54.454 --> 00:10:57.095
<v Speaker 0>their documentation, we do Composer

00:10:56.750 --> 00:10:58.830
<v Speaker 0>space create type of project.

00:10:59.709 --> 00:11:02.990
<v Speaker 0>We then have slim, some skeleton, dev, master,

00:11:03.389 --> 00:11:06.029
<v Speaker 0>the final parameter of some app name.

00:11:08.190 --> 00:11:08.589
<v Speaker 1>Yeah.

00:11:09.485 --> 00:11:10.765
<v Speaker 0>I mean, I just wanna put it in

00:11:10.765 --> 00:11:12.765
<v Speaker 0>a local directory. Hopefully, it still does that.

00:11:12.765 --> 00:11:15.085
<v Speaker 0>But we were calling this Docker

00:11:17.165 --> 00:11:18.205
<v Speaker 0>Kubernetes.

00:11:18.685 --> 00:11:19.885
<v Speaker 1>Yeah. That should be fine. We

00:11:21.885 --> 00:11:24.205
<v Speaker 0>They're saying it's not empty, but that's okay.

00:11:25.620 --> 00:11:26.980
<v Speaker 0>Workforce.

00:11:32.500 --> 00:11:33.940
<v Speaker 0>I don't see a

00:11:34.180 --> 00:11:35.779
<v Speaker 0>I'm just gonna type force.

00:11:36.740 --> 00:11:39.060
<v Speaker 1>I think it won't install into an existing

00:11:39.060 --> 00:11:39.459
<v Speaker 1>folder.

00:11:41.255 --> 00:11:42.694
<v Speaker 0>Oh, it won't. Well

00:11:43.255 --> 00:11:45.095
<v Speaker 1>You just make another copy

00:11:45.095 --> 00:11:45.894
<v Speaker 1>of the README.

00:11:46.134 --> 00:11:47.415
<v Speaker 1>Yeah. Yeah. Oh,

00:11:47.735 --> 00:11:48.774
<v Speaker 0>oh, I just

00:11:50.694 --> 00:11:52.615
<v Speaker 0>I'm sure I just put my README over

00:11:52.615 --> 00:11:54.694
<v Speaker 0>the other README. Anyway, not bad.

00:11:55.930 --> 00:11:58.890
<v Speaker 0>So let's try that again. Create our projects.

00:12:03.449 --> 00:12:04.889
<v Speaker 0>Does it go Oh, I'm not in the

00:12:04.889 --> 00:12:06.250
<v Speaker 0>right directory. That's right.

00:12:08.425 --> 00:12:10.665
<v Speaker 0>Let's go and say Docker and Kubernetes, but

00:12:10.665 --> 00:12:13.065
<v Speaker 0>move root meaning itself, destroying it for r

00:12:13.065 --> 00:12:14.025
<v Speaker 0>dot n d.

00:12:14.345 --> 00:12:16.025
<v Speaker 0>I want the composure.

00:12:16.905 --> 00:12:17.625
<v Speaker 0>Mhmm.

00:12:17.785 --> 00:12:18.905
<v Speaker 0>Create project

00:12:19.065 --> 00:12:19.945
<v Speaker 0>Docker.

00:12:19.945 --> 00:12:20.825
<v Speaker 0>We'll get there.

00:12:22.089 --> 00:12:24.010
<v Speaker 0>It's better to have these challenges and model

00:12:24.010 --> 00:12:25.610
<v Speaker 0>slip ups at the start because then it

00:12:25.610 --> 00:12:27.050
<v Speaker 0>means nothing goes wrong there.

00:12:30.649 --> 00:12:31.770
<v Speaker 1>Are you on Composer two?

00:12:34.005 --> 00:12:37.125
<v Speaker 0>I have no idea. Composer doesn't even exist

00:12:37.125 --> 00:12:39.765
<v Speaker 0>on this machine until about ten minutes ago.

00:12:39.845 --> 00:12:40.725
<v Speaker 1>It's

00:12:41.365 --> 00:12:42.485
<v Speaker 1>a little bit faster.

00:12:43.205 --> 00:12:45.205
<v Speaker 1>Maybe if we use Composer in the build

00:12:45.205 --> 00:12:46.405
<v Speaker 1>step, we can use too

00:12:46.965 --> 00:12:47.605
<v Speaker 1>in the doc.

00:12:49.310 --> 00:12:51.310
<v Speaker 1>But it's I just did a brew install

00:12:51.310 --> 00:12:53.709
<v Speaker 0>composer. I'm assuming a composer too is is

00:12:53.709 --> 00:12:55.709
<v Speaker 0>released and not in an RC stage or

00:12:55.709 --> 00:12:57.870
<v Speaker 0>anything like that, then I would probably

00:12:58.350 --> 00:13:00.269
<v Speaker 0>It's a beta stage, but, you know,

00:13:02.015 --> 00:13:03.695
<v Speaker 1>it's not run time of code, so it's

00:13:03.695 --> 00:13:04.895
<v Speaker 1>okay to use a beta.

00:13:05.535 --> 00:13:06.415
<v Speaker 0>Always.

00:13:07.695 --> 00:13:09.775
<v Speaker 0>I see that as I'm running on Mac

00:13:09.775 --> 00:13:11.295
<v Speaker 0>OS Big beta.

00:13:14.210 --> 00:13:16.210
<v Speaker 1>So what do you think? Big Sur has

00:13:16.210 --> 00:13:19.090
<v Speaker 1>some sort of fancy new virtualization framework built

00:13:19.090 --> 00:13:20.530
<v Speaker 1>into the OS. Do you think that's gonna

00:13:20.530 --> 00:13:22.050
<v Speaker 1>make Docker run fast?

00:13:25.010 --> 00:13:27.890
<v Speaker 0>So it does have APIs

00:13:27.890 --> 00:13:28.290
<v Speaker 0>for,

00:13:29.425 --> 00:13:31.025
<v Speaker 0>you know, tools to talk up for Mac

00:13:31.025 --> 00:13:31.905
<v Speaker 0>and

00:13:34.065 --> 00:13:35.105
<v Speaker 0>other stuff.

00:13:35.345 --> 00:13:37.265
<v Speaker 0>Think we're APNs, vagrant.

00:13:38.225 --> 00:13:40.785
<v Speaker 0>It's not something that I've I've tried yet,

00:13:40.785 --> 00:13:42.625
<v Speaker 0>because I don't think anything that I've installed

00:13:42.625 --> 00:13:44.939
<v Speaker 0>works with it at the moment. I'm really

00:13:44.939 --> 00:13:48.540
<v Speaker 0>hoping though that whatever they've configured to to

00:13:49.180 --> 00:13:51.579
<v Speaker 0>file synchronization has to be an improvement on

00:13:51.579 --> 00:13:54.620
<v Speaker 0>what we have right now. Like, for dynamic

00:13:54.860 --> 00:13:57.339
<v Speaker 0>interpretive languages, the fail sync from that Docker

00:13:57.339 --> 00:13:59.019
<v Speaker 0>for Mac is is the killer. Mhmm.

00:13:59.955 --> 00:14:02.115
<v Speaker 0>Yeah. It's just makes developing

00:14:02.115 --> 00:14:04.915
<v Speaker 0>any sizable project very, very slow.

00:14:05.395 --> 00:14:06.035
<v Speaker 0>Yeah.

00:14:06.595 --> 00:14:07.715
<v Speaker 0>Okay. So

00:14:07.875 --> 00:14:09.635
<v Speaker 0>what's this prompt? Do I do I want

00:14:09.635 --> 00:14:10.915
<v Speaker 0>to remove the existing

00:14:11.875 --> 00:14:13.075
<v Speaker 0>get history?

00:14:13.315 --> 00:14:13.715
<v Speaker 0>No?

00:14:16.149 --> 00:14:18.630
<v Speaker 1>Okay. I've not seen that before. It's interesting.

00:14:18.630 --> 00:14:20.470
<v Speaker 0>I guess it's just because I have

00:14:21.350 --> 00:14:24.070
<v Speaker 0>stuff going on here. Not really sure.

00:14:24.709 --> 00:14:26.550
<v Speaker 0>So let's see. What have I got here?

00:14:28.070 --> 00:14:29.670
<v Speaker 0>Oh, well, it did create me a new

00:14:29.670 --> 00:14:30.149
<v Speaker 0>directory.

00:14:31.555 --> 00:14:33.155
<v Speaker 0>Let's just move on to that.

00:14:44.435 --> 00:14:45.315
<v Speaker 0>K. Perfect.

00:14:45.639 --> 00:14:46.360
<v Speaker 0>So

00:14:47.800 --> 00:14:51.320
<v Speaker 0>we have a computer a composer JSON file.

00:14:56.120 --> 00:14:57.240
<v Speaker 1>With a bunch of stuff.

00:14:58.265 --> 00:15:00.905
<v Speaker 0>Look at that. It gives us a Docker

00:15:00.905 --> 00:15:02.025
<v Speaker 0>Compose file.

00:15:02.825 --> 00:15:04.585
<v Speaker 1>That's a bit too fancy, isn't it?

00:15:05.305 --> 00:15:05.785
<v Speaker 1>That's a

00:15:07.305 --> 00:15:08.425
<v Speaker 1>so it's using Alpine.

00:15:10.200 --> 00:15:13.080
<v Speaker 0>It is. So it's a working directory,

00:15:13.960 --> 00:15:16.040
<v Speaker 0>mixing command and entry point together.

00:15:17.160 --> 00:15:20.520
<v Speaker 0>It's even using the Rawkode approved environment, so

00:15:20.520 --> 00:15:23.560
<v Speaker 0>it'll send text. I I I really hate

00:15:23.560 --> 00:15:26.685
<v Speaker 0>it when people use the the less syntax.

00:15:27.805 --> 00:15:29.565
<v Speaker 0>Do that. Like, it just

00:15:30.045 --> 00:15:31.885
<v Speaker 0>why would we do this to ourselves?

00:15:33.645 --> 00:15:35.965
<v Speaker 0>Have to run for another day. We it's

00:15:35.965 --> 00:15:37.485
<v Speaker 0>supposed to pour, and we have volumes. I

00:15:37.485 --> 00:15:37.645
<v Speaker 0>mean,

00:15:39.630 --> 00:15:41.470
<v Speaker 0>it's pretty sensible for me. I'm not we're

00:15:41.470 --> 00:15:43.870
<v Speaker 0>making too many changes. There are a few

00:15:43.870 --> 00:15:46.269
<v Speaker 0>things in the three point x spec or

00:15:46.269 --> 00:15:47.950
<v Speaker 0>in the Compose spec that I don't like.

00:15:47.950 --> 00:15:49.630
<v Speaker 0>We may drop that down to two for

00:15:49.630 --> 00:15:50.830
<v Speaker 0>very good reasons.

00:15:51.070 --> 00:15:53.705
<v Speaker 0>We'll touch on them if

00:15:54.105 --> 00:15:55.545
<v Speaker 0>we make an up for it.

00:15:55.945 --> 00:15:58.185
<v Speaker 0>So What? Let's just There you go. Just

00:15:58.185 --> 00:16:00.025
<v Speaker 0>explain one thing to me. What is that

00:16:00.025 --> 00:16:02.105
<v Speaker 1>a good practice to be running PHP as

00:16:02.105 --> 00:16:02.665
<v Speaker 1>the entry point?

00:16:05.480 --> 00:16:07.560
<v Speaker 0>So this is That's not a good web

00:16:07.560 --> 00:16:08.279
<v Speaker 1>server.

00:16:09.399 --> 00:16:11.800
<v Speaker 0>For local dev, I think it's it's it's

00:16:11.800 --> 00:16:12.520
<v Speaker 0>fine.

00:16:13.240 --> 00:16:16.600
<v Speaker 0>I don't really have any problems with it.

00:16:16.600 --> 00:16:19.079
<v Speaker 0>It does mean that our development environment doesn't

00:16:19.079 --> 00:16:21.775
<v Speaker 0>have any sort of parity with our production

00:16:21.775 --> 00:16:24.255
<v Speaker 0>environment. So, you know, there may be things

00:16:24.255 --> 00:16:26.415
<v Speaker 0>to that, like, you know, that's had an

00:16:26.415 --> 00:16:28.895
<v Speaker 0>HD access in this public folder. Like, that's

00:16:28.895 --> 00:16:30.575
<v Speaker 0>not gonna do anything on that and and

00:16:30.575 --> 00:16:32.655
<v Speaker 0>your next environment for Yeah. Yeah. For example.

00:16:33.135 --> 00:16:34.690
<v Speaker 0>So you may find that if you're using

00:16:34.690 --> 00:16:36.530
<v Speaker 0>the HD access for any sort of security

00:16:36.530 --> 00:16:38.050
<v Speaker 0>concerns or

00:16:38.610 --> 00:16:39.570
<v Speaker 0>redirects,

00:16:39.570 --> 00:16:42.530
<v Speaker 0>anything like that, that that discrepancy between production

00:16:42.530 --> 00:16:45.170
<v Speaker 0>and development, if it's just frustrating, I probably

00:16:45.170 --> 00:16:47.465
<v Speaker 0>would avoid it. But I can see why

00:16:47.465 --> 00:16:48.904
<v Speaker 0>they're doing it. They're just trying to avoid

00:16:48.904 --> 00:16:51.065
<v Speaker 0>any additional complexity.

00:16:51.465 --> 00:16:52.745
<v Speaker 1>I'm

00:16:52.745 --> 00:16:54.825
<v Speaker 1>actually surprised how much stuff there is considering

00:16:54.825 --> 00:16:57.145
<v Speaker 1>slim is haven't made a slim project in

00:16:57.145 --> 00:16:57.705
<v Speaker 1>a while.

00:16:58.265 --> 00:17:01.065
<v Speaker 1>Slim is high grade cut down framework.

00:17:02.240 --> 00:17:05.039
<v Speaker 1>They've got Travis setup and

00:17:05.760 --> 00:17:06.559
<v Speaker 1>all sorts.

00:17:07.040 --> 00:17:10.639
<v Speaker 0>Yeah. ADR directory style structures.

00:17:12.240 --> 00:17:13.040
<v Speaker 0>It's

00:17:13.040 --> 00:17:16.079
<v Speaker 0>not the slim framework I remember from 2015.

00:17:16.079 --> 00:17:16.720
<v Speaker 0>That's for sure.

00:17:17.825 --> 00:17:19.424
<v Speaker 0>Alright.

00:17:20.545 --> 00:17:21.505
<v Speaker 0>Let's just

00:17:22.945 --> 00:17:25.345
<v Speaker 0>test this works locally and get it working

00:17:25.345 --> 00:17:27.105
<v Speaker 0>in Docker. Does that sound

00:17:27.425 --> 00:17:29.345
<v Speaker 0>sensible to you? Would you

00:17:29.745 --> 00:17:31.825
<v Speaker 0>would you be more specific about the version

00:17:32.250 --> 00:17:33.450
<v Speaker 1>of PHP?

00:17:37.210 --> 00:17:39.130
<v Speaker 0>Okay. So you're talking about using seven dash

00:17:39.130 --> 00:17:42.090
<v Speaker 0>Alpine instead of seven dot one dash Alpine?

00:17:42.250 --> 00:17:43.850
<v Speaker 1>Or seven four maybe.

00:17:44.490 --> 00:17:45.690
<v Speaker 0>Or 73. Sorry.

00:17:46.815 --> 00:17:49.215
<v Speaker 0>I'm I'm trying my best here. Yeah. Yeah.

00:17:49.215 --> 00:17:49.774
<v Speaker 1>Exactly.

00:17:51.455 --> 00:17:54.574
<v Speaker 0>Would I would I specify a point version?

00:17:55.855 --> 00:17:57.534
<v Speaker 0>I think very possibly.

00:17:57.615 --> 00:17:59.134
<v Speaker 0>I mean, I don't pay a lot of

00:17:59.134 --> 00:18:02.060
<v Speaker 0>attention to the PHP RFCs anymore. But I

00:18:02.060 --> 00:18:03.980
<v Speaker 0>do believe they make a lot of changes.

00:18:05.260 --> 00:18:07.020
<v Speaker 1>Is Versus Code saying that you wrote that

00:18:07.020 --> 00:18:07.659
<v Speaker 1>line?

00:18:12.860 --> 00:18:14.460
<v Speaker 1>You know, you were surprised Did I add

00:18:14.460 --> 00:18:14.700
<v Speaker 1>this?

00:18:15.925 --> 00:18:17.205
<v Speaker 1>Four years ago. I did.

00:18:18.725 --> 00:18:21.445
<v Speaker 1>So all these criticisms are criticisms of you.

00:18:22.085 --> 00:18:23.845
<v Speaker 0>No. See, I I don't think I added

00:18:23.845 --> 00:18:26.805
<v Speaker 0>this. Hold on. Oh, hold on. Hold on.

00:18:28.960 --> 00:18:31.280
<v Speaker 1>Slamming this Docker Compose file, and it's your

00:18:31.280 --> 00:18:37.039
<v Speaker 1>work. I wasn't slamming it. Let's

00:18:37.039 --> 00:18:40.400
<v Speaker 0>see. Let's see. There must be a scan.

00:18:40.400 --> 00:18:40.640
<v Speaker 0>Perfect.

00:18:41.835 --> 00:18:43.355
<v Speaker 0>Well, we've got a couple of comments. So

00:18:43.355 --> 00:18:45.674
<v Speaker 0>let's just see what's going on. We've got

00:18:45.674 --> 00:18:46.955
<v Speaker 0>one here that says,

00:18:47.355 --> 00:18:49.755
<v Speaker 0>if we go with Laravel, then Laravel next

00:18:49.755 --> 00:18:52.154
<v Speaker 0>ships with some JavaScript stuff. So,

00:18:52.554 --> 00:18:55.355
<v Speaker 0>definitely, we I will provide a Laravel example

00:18:56.309 --> 00:18:58.389
<v Speaker 0>either in this session or just after this

00:18:58.389 --> 00:19:00.629
<v Speaker 0>session. We'll see how things go.

00:19:02.309 --> 00:19:04.950
<v Speaker 0>We got Glenn asking how late you are.

00:19:04.950 --> 00:19:06.630
<v Speaker 0>You're not late. We're just starting. We've not

00:19:06.630 --> 00:19:08.630
<v Speaker 0>done anything of use for anyone.

00:19:09.784 --> 00:19:12.904
<v Speaker 0>And we have our friend, Bastian, who's tuning

00:19:12.904 --> 00:19:14.664
<v Speaker 0>in. Nice to see you too.

00:19:15.465 --> 00:19:16.424
<v Speaker 0>Hi, Bastian.

00:19:17.145 --> 00:19:17.784
<v Speaker 0>So

00:19:18.424 --> 00:19:21.304
<v Speaker 0>let's get into you're a slim contributor.

00:19:24.345 --> 00:19:25.145
<v Speaker 0>Yeah. That's me.

00:19:28.690 --> 00:19:30.530
<v Speaker 0>How much am I so far?

00:19:30.850 --> 00:19:33.330
<v Speaker 0>Yeah. So someone modified this version. I'll have

00:19:33.330 --> 00:19:34.210
<v Speaker 0>worked with that.

00:19:34.690 --> 00:19:36.450
<v Speaker 0>That's that's not fair. This is just

00:19:37.090 --> 00:19:38.850
<v Speaker 0>let me cover the the version in more

00:19:38.850 --> 00:19:41.635
<v Speaker 0>detail before we get started then. So when

00:19:41.635 --> 00:19:44.755
<v Speaker 0>Docker promoted the Compose spec, the three point

00:19:44.755 --> 00:19:45.475
<v Speaker 0>x,

00:19:45.795 --> 00:19:48.435
<v Speaker 0>they really targeted people that wanted to then

00:19:48.435 --> 00:19:49.475
<v Speaker 0>go from

00:19:49.635 --> 00:19:51.154
<v Speaker 0>global development to production.

00:19:51.395 --> 00:19:53.875
<v Speaker 0>So they added all of these extra parameters

00:19:53.875 --> 00:19:56.610
<v Speaker 0>or pragmas, whatever you wanna call them, that

00:19:56.610 --> 00:19:58.450
<v Speaker 0>allowed you to then use the same Docker

00:19:58.450 --> 00:20:00.929
<v Speaker 0>Compose file to generate a Docker bundle, which

00:20:00.929 --> 00:20:02.529
<v Speaker 0>could be deployed on Docker Swan.

00:20:02.769 --> 00:20:03.409
<v Speaker 0>Yeah.

00:20:03.649 --> 00:20:05.970
<v Speaker 0>They eventually added Kubernetes stuff on top of

00:20:05.970 --> 00:20:08.289
<v Speaker 0>that. I can't remember the exact version, 3.4,

00:20:08.289 --> 00:20:10.445
<v Speaker 0>three point five, whatever it was, which means

00:20:10.445 --> 00:20:12.205
<v Speaker 0>you can now just deploy that Docker bundle

00:20:12.205 --> 00:20:14.205
<v Speaker 0>or the Compose file straight for Kubernetes.

00:20:14.525 --> 00:20:16.445
<v Speaker 0>The challenge is is that where we want

00:20:16.445 --> 00:20:19.725
<v Speaker 0>parity between Docker between development and production

00:20:20.605 --> 00:20:22.845
<v Speaker 0>is that there are some very key changes

00:20:22.845 --> 00:20:24.419
<v Speaker 0>in the way that you work from a

00:20:24.419 --> 00:20:27.460
<v Speaker 0>workflow perspective that just don't translate. Like, on

00:20:27.460 --> 00:20:29.860
<v Speaker 0>a a Kubernetes environment, I don't care about

00:20:29.860 --> 00:20:31.779
<v Speaker 0>the order of containers start and the container

00:20:31.779 --> 00:20:32.899
<v Speaker 0>may be deployed

00:20:33.299 --> 00:20:34.820
<v Speaker 0>at their own way with their own CI

00:20:34.820 --> 00:20:35.700
<v Speaker 0>and CD pipeline.

00:20:36.195 --> 00:20:38.515
<v Speaker 0>Local development, I very much care about the

00:20:38.515 --> 00:20:40.274
<v Speaker 0>order and the way the thing was started

00:20:40.274 --> 00:20:42.835
<v Speaker 0>because I may have the database migrations to

00:20:42.835 --> 00:20:44.434
<v Speaker 0>run. I need the database server to be

00:20:44.434 --> 00:20:46.355
<v Speaker 0>healthy. I've got web pack steps that are

00:20:46.355 --> 00:20:47.955
<v Speaker 0>really important. There's all of these things that

00:20:47.955 --> 00:20:48.914
<v Speaker 0>need to be coordinated.

00:20:49.870 --> 00:20:52.110
<v Speaker 0>Two point x specs makes that really easy

00:20:52.110 --> 00:20:54.590
<v Speaker 0>to do through very sophisticated health checks.

00:20:54.830 --> 00:20:56.669
<v Speaker 0>So we probably will drop that version down,

00:20:56.669 --> 00:20:58.750
<v Speaker 0>and that's why. And we can maybe show

00:20:58.750 --> 00:21:00.510
<v Speaker 0>why it's painful first, and then jump back

00:21:00.510 --> 00:21:01.870
<v Speaker 0>and say, that is why you should just

00:21:01.870 --> 00:21:03.965
<v Speaker 0>use two point o. And I've

00:21:03.965 --> 00:21:05.965
<v Speaker 1>heard the argument that the health checks

00:21:06.285 --> 00:21:07.885
<v Speaker 1>should be part of your

00:21:08.365 --> 00:21:09.565
<v Speaker 1>your application,

00:21:10.525 --> 00:21:11.805
<v Speaker 1>be part of your system,

00:21:13.085 --> 00:21:15.485
<v Speaker 1>and not the responsibility of the orchestration tool.

00:21:17.640 --> 00:21:18.520
<v Speaker 0>If

00:21:19.240 --> 00:21:20.680
<v Speaker 0>you if I'm writing a worker that's gonna

00:21:20.680 --> 00:21:22.200
<v Speaker 1>read for from a queue,

00:21:23.080 --> 00:21:24.760
<v Speaker 1>I've got two options, haven't I? Either I

00:21:24.760 --> 00:21:27.160
<v Speaker 1>can write my code assuming the queue's there

00:21:27.400 --> 00:21:29.720
<v Speaker 1>and kind of outsource that readiness.

00:21:30.725 --> 00:21:32.565
<v Speaker 1>Or I can write my application so it's

00:21:32.565 --> 00:21:34.325
<v Speaker 1>gonna have some sort of retry

00:21:35.605 --> 00:21:38.804
<v Speaker 1>as part of my code of my worker.

00:21:39.765 --> 00:21:41.284
<v Speaker 1>Where do you fall on that?

00:21:42.245 --> 00:21:44.405
<v Speaker 0>So I do agree that your application has

00:21:44.405 --> 00:21:47.390
<v Speaker 0>to be built with that resiliency factor in

00:21:47.390 --> 00:21:49.070
<v Speaker 0>mind, and that if things do go wrong,

00:21:49.070 --> 00:21:51.549
<v Speaker 0>it will retry it. Of course. That makes

00:21:51.549 --> 00:21:52.269
<v Speaker 0>sense to me.

00:21:53.150 --> 00:21:55.950
<v Speaker 0>But, again, spinning up something in local development

00:21:55.950 --> 00:21:58.830
<v Speaker 0>is just that bootstrapping phase is so unique

00:21:58.830 --> 00:22:00.670
<v Speaker 0>and so different that I just think it's

00:22:00.670 --> 00:22:03.155
<v Speaker 0>really important. Like, when I start my application,

00:22:03.155 --> 00:22:05.955
<v Speaker 0>I really want to build code that retries

00:22:05.955 --> 00:22:07.554
<v Speaker 0>my migration path

00:22:07.635 --> 00:22:10.674
<v Speaker 0>until it works. Yeah. I mean, no.

00:22:10.995 --> 00:22:12.355
<v Speaker 0>And when I go to production, I want

00:22:12.355 --> 00:22:14.355
<v Speaker 0>that if that migration step fails, I want

00:22:14.355 --> 00:22:15.955
<v Speaker 0>an error log, and I want something to

00:22:15.955 --> 00:22:17.715
<v Speaker 0>say, hey. This is this is not working.

00:22:18.299 --> 00:22:20.139
<v Speaker 0>I don't want it to just silently keep

00:22:20.139 --> 00:22:22.940
<v Speaker 0>me trying without giving me any indicators that

00:22:22.940 --> 00:22:24.459
<v Speaker 0>something's potentially wrong.

00:22:24.620 --> 00:22:25.580
<v Speaker 1>Yeah. So

00:22:25.980 --> 00:22:28.139
<v Speaker 1>And I guess on production, you're not doing

00:22:28.139 --> 00:22:30.220
<v Speaker 1>a cold start very often of all your

00:22:30.220 --> 00:22:31.019
<v Speaker 1>services together.

00:22:32.455 --> 00:22:34.615
<v Speaker 0>Yeah. Only once, but you spin up a

00:22:34.615 --> 00:22:37.255
<v Speaker 0>new cluster or something. So And on dev,

00:22:37.255 --> 00:22:39.255
<v Speaker 1>if one of your services falls over,

00:22:39.655 --> 00:22:41.415
<v Speaker 1>you probably stop everything and start it all

00:22:41.415 --> 00:22:41.975
<v Speaker 1>again.

00:22:43.335 --> 00:22:44.215
<v Speaker 0>I am

00:22:44.740 --> 00:22:47.779
<v Speaker 0>a serial destroyer and recreator of the world.

00:22:47.779 --> 00:22:49.220
<v Speaker 0>I like to do that frequently. I like

00:22:49.220 --> 00:22:50.419
<v Speaker 0>to do it often, and I like to

00:22:50.419 --> 00:22:52.899
<v Speaker 0>make sure that our mission works. Yep.

00:22:53.140 --> 00:22:53.940
<v Speaker 0>Definitely.

00:22:54.179 --> 00:22:56.419
<v Speaker 1>So is that tricky so this leads us

00:22:56.419 --> 00:22:57.460
<v Speaker 1>to using Docker Compose.

00:22:59.575 --> 00:23:00.775
<v Speaker 1>But there's a kind of

00:23:01.175 --> 00:23:02.855
<v Speaker 1>what what is what are the downsides of

00:23:02.855 --> 00:23:03.895
<v Speaker 1>that? It means you

00:23:04.215 --> 00:23:06.055
<v Speaker 1>don't quite know it's gonna work until you

00:23:06.055 --> 00:23:07.815
<v Speaker 1>deploy to some Kubernetes environment?

00:23:12.690 --> 00:23:14.210
<v Speaker 1>With most of the

00:23:14.210 --> 00:23:15.089
<v Speaker 1>control,

00:23:15.649 --> 00:23:17.250
<v Speaker 1>it's less you're not dog feeding it as

00:23:17.250 --> 00:23:17.729
<v Speaker 1>much.

00:23:18.289 --> 00:23:19.249
<v Speaker 0>I just

00:23:19.490 --> 00:23:21.730
<v Speaker 0>you get a very limited amount of the

00:23:21.730 --> 00:23:23.889
<v Speaker 0>features of Kubernetes available to you when you

00:23:23.889 --> 00:23:25.889
<v Speaker 0>go through the Compose file using that as

00:23:25.889 --> 00:23:28.845
<v Speaker 0>the the description of your Kubernetes deployment. The

00:23:28.845 --> 00:23:31.164
<v Speaker 0>department where I'd say, you're really just using

00:23:31.164 --> 00:23:32.684
<v Speaker 0>the wrong tool for the job.

00:23:32.924 --> 00:23:35.485
<v Speaker 0>And you should just be using a Kubernetes

00:23:35.485 --> 00:23:37.725
<v Speaker 0>manifest and getting familiar with working with that

00:23:37.725 --> 00:23:38.044
<v Speaker 0>because,

00:23:38.600 --> 00:23:40.280
<v Speaker 0>you know, even if your application is a

00:23:40.280 --> 00:23:43.160
<v Speaker 0>monolithic PHP application, there's still surrounding services that

00:23:43.160 --> 00:23:45.160
<v Speaker 0>you need to deploy. And I don't think

00:23:45.160 --> 00:23:47.800
<v Speaker 0>the Compose file is a good way to

00:23:47.800 --> 00:23:50.440
<v Speaker 0>describe that for all of the environments. Mhmm.

00:23:50.440 --> 00:23:52.760
<v Speaker 0>Especially, again, the database I'm gonna keep hammering

00:23:52.760 --> 00:23:54.825
<v Speaker 0>on about. But my production deployment of a

00:23:54.825 --> 00:23:56.825
<v Speaker 0>database does not look like my development deployment

00:23:56.825 --> 00:23:57.705
<v Speaker 0>of database.

00:23:58.345 --> 00:24:00.585
<v Speaker 0>And, yeah, there are Docker Compose overlays of

00:24:00.585 --> 00:24:03.865
<v Speaker 0>the ability to extend service definitions per environment.

00:24:03.945 --> 00:24:06.105
<v Speaker 0>But then we're just gonna answer this really

00:24:06.105 --> 00:24:08.580
<v Speaker 0>convoluted setup that I don't think is actually

00:24:08.580 --> 00:24:10.179
<v Speaker 0>going to save you any time in the

00:24:10.179 --> 00:24:12.020
<v Speaker 0>long run. That is probably just gonna slow

00:24:12.020 --> 00:24:13.380
<v Speaker 0>you down and cause a little bit of

00:24:13.380 --> 00:24:14.100
<v Speaker 0>chaos.

00:24:14.580 --> 00:24:16.419
<v Speaker 1>Yeah. And and looking forward, I think

00:24:17.380 --> 00:24:19.700
<v Speaker 1>the idea a lot of the supporting infrastructure

00:24:19.700 --> 00:24:22.285
<v Speaker 1>like databases and queues and things, the trend

00:24:22.285 --> 00:24:24.525
<v Speaker 1>seems to be away from running them yourself.

00:24:25.165 --> 00:24:27.405
<v Speaker 1>I don't know if that's your experience. So

00:24:27.645 --> 00:24:30.205
<v Speaker 0>No. You're completely right. My my Docker Compose

00:24:30.205 --> 00:24:32.525
<v Speaker 1>locally is gonna be running a MySQL instance

00:24:32.525 --> 00:24:33.565
<v Speaker 1>or or whatever.

00:24:34.600 --> 00:24:37.639
<v Speaker 1>But in prod, maybe I'm using Aurora serverless

00:24:37.639 --> 00:24:38.279
<v Speaker 1>or

00:24:38.759 --> 00:24:39.639
<v Speaker 1>some other

00:24:40.440 --> 00:24:42.120
<v Speaker 1>I know MySQL is not the best database,

00:24:42.120 --> 00:24:43.239
<v Speaker 1>but you know what I mean.

00:24:44.120 --> 00:24:45.080
<v Speaker 0>Exactly.

00:24:45.080 --> 00:24:49.000
<v Speaker 0>You know, when we're deploying things into Azure,

00:24:49.000 --> 00:24:52.095
<v Speaker 0>AWS, or even GCP, all those managed services

00:24:52.095 --> 00:24:54.255
<v Speaker 0>become really, really appealing and that we don't

00:24:54.255 --> 00:24:56.655
<v Speaker 0>have to handle the complicated state inside of

00:24:56.655 --> 00:24:58.015
<v Speaker 0>our applications anymore.

00:24:58.335 --> 00:24:59.535
<v Speaker 1>So maybe only

00:24:59.935 --> 00:25:03.055
<v Speaker 1>deploying the web the FPM service and Extremely

00:25:03.055 --> 00:25:04.015
<v Speaker 0>likely. Exactly.

00:25:06.789 --> 00:25:09.509
<v Speaker 0>Alright. Let's let's get started then. So

00:25:09.750 --> 00:25:12.629
<v Speaker 0>yes. That turns out I contributed this Compose

00:25:12.629 --> 00:25:14.309
<v Speaker 0>file. I have no idea.

00:25:14.629 --> 00:25:15.829
<v Speaker 0>But

00:25:16.149 --> 00:25:17.909
<v Speaker 0>that's not important. Good catch. I had never

00:25:17.909 --> 00:25:18.629
<v Speaker 0>noticed that.

00:25:20.845 --> 00:25:22.044
<v Speaker 1>So that looks like That

00:25:22.365 --> 00:25:24.045
<v Speaker 0>line has not even changed in four years.

00:25:24.045 --> 00:25:26.205
<v Speaker 0>That's still just PHP seven all time. Like

00:25:27.485 --> 00:25:29.565
<v Speaker 1>So can you recap what the Docker true

00:25:29.565 --> 00:25:31.164
<v Speaker 1>environment variable is for?

00:25:34.285 --> 00:25:34.605
<v Speaker 0>No.

00:25:36.000 --> 00:25:37.600
<v Speaker 0>I'm

00:25:37.600 --> 00:25:39.600
<v Speaker 0>not sure what this is for. So it's

00:25:39.600 --> 00:25:41.120
<v Speaker 0>been four years, Kevin.

00:25:41.520 --> 00:25:45.600
<v Speaker 0>Yeah. I'm assuming there's something in the configuration

00:25:45.600 --> 00:25:46.800
<v Speaker 0>of this application.

00:25:47.505 --> 00:25:48.145
<v Speaker 0>Alright.

00:25:50.065 --> 00:25:51.985
<v Speaker 0>Tap here. Found it right. There we go.

00:25:51.985 --> 00:25:52.945
<v Speaker 0>So and

00:25:55.025 --> 00:25:56.304
<v Speaker 0>yeah. Perfect.

00:25:57.025 --> 00:25:58.705
<v Speaker 0>I'm assuming I didn't add that too.

00:26:00.080 --> 00:26:02.080
<v Speaker 1>So if it's in the Docker environment,

00:26:02.720 --> 00:26:05.200
<v Speaker 0>it logs to logs to standard. Yeah.

00:26:07.920 --> 00:26:10.640
<v Speaker 1>Why does Compose file have a logs

00:26:10.960 --> 00:26:11.360
<v Speaker 1>volume?

00:26:19.284 --> 00:26:21.445
<v Speaker 0>Adverse here. It might not be being used

00:26:21.445 --> 00:26:22.084
<v Speaker 1>then

00:26:22.245 --> 00:26:23.284
<v Speaker 1>in Docker. Very

00:26:24.245 --> 00:26:25.844
<v Speaker 0>possibly. It could be

00:26:26.644 --> 00:26:27.044
<v Speaker 0>that.

00:26:28.380 --> 00:26:30.380
<v Speaker 0>Yeah. I don't know. Let's find out. Let's

00:26:30.380 --> 00:26:31.100
<v Speaker 0>get it working.

00:26:31.420 --> 00:26:32.140
<v Speaker 0>Let's get it working.

00:26:33.020 --> 00:26:33.740
<v Speaker 0>So

00:26:33.820 --> 00:26:35.660
<v Speaker 0>I'm surprised I have contributed to the rest

00:26:35.660 --> 00:26:37.500
<v Speaker 0>repository because there's no make fail.

00:26:40.780 --> 00:26:41.340
<v Speaker 1>The

00:26:41.914 --> 00:26:43.914
<v Speaker 1>big argument against that is Windows doesn't ship

00:26:43.914 --> 00:26:44.634
<v Speaker 1>with Make.

00:26:44.955 --> 00:26:47.595
<v Speaker 1>That's why Symphony ended up not using Make

00:26:47.595 --> 00:26:48.315
<v Speaker 1>after

00:26:49.034 --> 00:26:51.355
<v Speaker 1>very nearly adopting it as the recommended way

00:26:51.355 --> 00:26:52.154
<v Speaker 1>of doing things.

00:26:52.635 --> 00:26:53.995
<v Speaker 0>But sure, though, I mean,

00:26:54.730 --> 00:26:56.010
<v Speaker 0>that's the time to change it. I don't

00:26:56.010 --> 00:26:57.690
<v Speaker 0>wanna get into the whole WSL too and

00:26:57.690 --> 00:26:58.970
<v Speaker 0>when it was being a really good dev

00:26:58.970 --> 00:27:00.809
<v Speaker 0>machine now, but make us available.

00:27:00.970 --> 00:27:03.450
<v Speaker 0>It's not on your terminal. Anyway so

00:27:04.809 --> 00:27:07.450
<v Speaker 0>how do I run this? I do PHP

00:27:07.529 --> 00:27:08.169
<v Speaker 0>then

00:27:08.809 --> 00:27:11.289
<v Speaker 0>no. No. That's

00:27:10.305 --> 00:27:11.505
<v Speaker 0>a thing. Right?

00:27:11.985 --> 00:27:13.985
<v Speaker 0>For you do docker Well,

00:27:15.585 --> 00:27:17.905
<v Speaker 0>I just wanna run it locally first.

00:27:18.465 --> 00:27:19.905
<v Speaker 1>PHP dash s.

00:27:21.265 --> 00:27:21.905
<v Speaker 0>I'm assuming

00:27:22.650 --> 00:27:24.570
<v Speaker 0>Composer has tasks. Right?

00:27:25.370 --> 00:27:27.049
<v Speaker 0>Yeah. They're called scripts.

00:27:27.210 --> 00:27:29.610
<v Speaker 0>Scripts. So I can just click Composer star?

00:27:29.770 --> 00:27:31.290
<v Speaker 0>That work? Yep.

00:27:34.650 --> 00:27:36.890
<v Speaker 0>Alright. And if I go to here,

00:27:38.774 --> 00:27:39.894
<v Speaker 0>it it it.

00:27:41.174 --> 00:27:41.894
<v Speaker 0>Right.

00:27:42.294 --> 00:27:43.014
<v Speaker 0>It

00:27:43.335 --> 00:27:45.174
<v Speaker 0>works. It's a good site.

00:27:45.575 --> 00:27:47.174
<v Speaker 1>Where did it log to? Did you see

00:27:47.174 --> 00:27:49.174
<v Speaker 1>any logs? I was about to check. No.

00:27:49.495 --> 00:27:50.695
<v Speaker 0>So when you were there some in the

00:27:50.695 --> 00:27:51.335
<v Speaker 1>terminal?

00:27:51.575 --> 00:27:53.490
<v Speaker 1>Yeah. They were. Yeah.

00:27:55.170 --> 00:27:57.010
<v Speaker 1>That's the web service logs.

00:27:57.490 --> 00:28:00.050
<v Speaker 1>That's not the Oh, yeah. The Well, so

00:28:00.050 --> 00:28:01.890
<v Speaker 0>because it's the same thing. Right? Oh, no.

00:28:01.890 --> 00:28:03.490
<v Speaker 0>The application. Okay. Definitely. Because it's got us

00:28:03.490 --> 00:28:06.105
<v Speaker 0>on longer. Okay. Maybe it's not working.

00:28:06.905 --> 00:28:10.025
<v Speaker 0>So assuming I haven't made this the worst

00:28:10.025 --> 00:28:11.865
<v Speaker 0>Docker Compose file in the world four years

00:28:11.865 --> 00:28:12.345
<v Speaker 0>ago,

00:28:12.825 --> 00:28:13.705
<v Speaker 0>I should.

00:28:14.105 --> 00:28:14.665
<v Speaker 0>That

00:28:16.505 --> 00:28:17.145
<v Speaker 1>takes a while.

00:28:18.350 --> 00:28:21.230
<v Speaker 0>It just eats so much bath today that

00:28:21.230 --> 00:28:22.750
<v Speaker 0>you've gotta close it when you're not using

00:28:22.750 --> 00:28:24.030
<v Speaker 0>it right. Yeah.

00:28:25.950 --> 00:28:27.550
<v Speaker 1>I kinda want a script that

00:28:28.350 --> 00:28:29.710
<v Speaker 1>wraps Docker

00:28:30.215 --> 00:28:31.575
<v Speaker 1>and starts it.

00:28:32.375 --> 00:28:33.575
<v Speaker 1>If it's not started, if you see what

00:28:33.575 --> 00:28:34.215
<v Speaker 1>I mean.

00:28:34.775 --> 00:28:37.095
<v Speaker 0>I think that would be good. Starting on

00:28:37.095 --> 00:28:37.175
<v Speaker 0>the

00:28:38.375 --> 00:28:39.575
<v Speaker 0>I mean, I'm not gonna do it right

00:28:39.575 --> 00:28:40.855
<v Speaker 0>now, but I don't think it would be

00:28:42.135 --> 00:28:43.655
<v Speaker 1>How how much stuff is in the vendor

00:28:43.655 --> 00:28:46.780
<v Speaker 1>folder while while that's while that's pulling?

00:28:49.900 --> 00:28:51.660
<v Speaker 1>It's quite a lot of stuff, isn't it?

00:28:52.860 --> 00:28:53.500
<v Speaker 1>Yeah.

00:28:54.060 --> 00:28:55.980
<v Speaker 0>I'm not I'm not sure if that's a

00:28:55.980 --> 00:28:57.980
<v Speaker 0>lot. I mean, I've been working on some

00:28:57.980 --> 00:28:59.900
<v Speaker 0>node projects lately, so this is this looks

00:28:59.900 --> 00:29:00.380
<v Speaker 0>quite slim,

00:29:01.065 --> 00:29:03.705
<v Speaker 0>Kinda intended. That's what we mapped, isn't it?

00:29:05.304 --> 00:29:06.265
<v Speaker 0>Yeah.

00:29:06.265 --> 00:29:07.625
<v Speaker 0>So, you know, we could do a fail

00:29:07.625 --> 00:29:09.304
<v Speaker 0>account here and see how many fails we're

00:29:09.304 --> 00:29:11.465
<v Speaker 0>actually dealing with. I found that anything above

00:29:11.465 --> 00:29:13.145
<v Speaker 0>usually 4,000, but thanks to that.

00:29:15.490 --> 00:29:17.250
<v Speaker 0>Let's see. So this is running,

00:29:17.490 --> 00:29:19.169
<v Speaker 0>so we should be able to refresh.

00:29:20.450 --> 00:29:21.570
<v Speaker 0>We're still good.

00:29:22.450 --> 00:29:24.290
<v Speaker 1>What was the page load time? Just out

00:29:24.290 --> 00:29:25.010
<v Speaker 1>of interest.

00:29:25.250 --> 00:29:25.650
<v Speaker 0>Can you

00:29:26.690 --> 00:29:27.410
<v Speaker 0>Can

00:29:27.730 --> 00:29:29.650
<v Speaker 0>there. Or does it tell me that here?

00:29:31.445 --> 00:29:32.245
<v Speaker 0>Hello.

00:29:33.045 --> 00:29:35.365
<v Speaker 0>Go to network. And

00:29:38.005 --> 00:29:39.125
<v Speaker 0>we're at

00:29:40.005 --> 00:29:42.085
<v Speaker 0>three hundred and fifty milliseconds for Hello World.

00:29:42.085 --> 00:29:43.125
<v Speaker 0>That's pretty slow.

00:29:43.365 --> 00:29:44.245
<v Speaker 0>How about that faster?

00:29:44.760 --> 00:29:46.039
<v Speaker 1>It's it

00:29:46.200 --> 00:29:47.960
<v Speaker 1>is slow, but it's okay.

00:29:48.440 --> 00:29:49.960
<v Speaker 1>If you're if you're a developer looking at

00:29:49.960 --> 00:29:51.960
<v Speaker 1>a site in a browser, it's usable, isn't

00:29:51.960 --> 00:29:52.360
<v Speaker 1>it?

00:29:54.200 --> 00:29:55.480
<v Speaker 0>Okay. So

00:29:56.760 --> 00:29:59.304
<v Speaker 0>what we wanna do, first and foremost, is

00:29:59.304 --> 00:30:00.105
<v Speaker 0>remove

00:30:00.105 --> 00:30:02.424
<v Speaker 0>the PHP web server, and we wanna bring

00:30:02.424 --> 00:30:03.864
<v Speaker 0>in FPN

00:30:04.345 --> 00:30:05.784
<v Speaker 0>and NGINX.

00:30:07.065 --> 00:30:07.704
<v Speaker 1>Yeah.

00:30:07.865 --> 00:30:10.585
<v Speaker 1>That's two separate containers. Right? That's two separate

00:30:10.585 --> 00:30:12.640
<v Speaker 0>containers. That is that is the question that

00:30:12.640 --> 00:30:14.560
<v Speaker 0>we can ask for the example of. So

00:30:14.560 --> 00:30:16.480
<v Speaker 0>that will be the first thing we tackle.

00:30:16.560 --> 00:30:17.200
<v Speaker 0>So

00:30:19.040 --> 00:30:20.000
<v Speaker 0>It's

00:30:20.080 --> 00:30:21.920
<v Speaker 0>formatting. Oh, there's no header. I'm thinking this.

00:30:24.625 --> 00:30:26.465
<v Speaker 0>Slime is letting me down. So

00:30:27.985 --> 00:30:28.784
<v Speaker 0>Yeah.

00:30:31.184 --> 00:30:33.265
<v Speaker 0>I am a tab person, just for the

00:30:33.265 --> 00:30:35.424
<v Speaker 0>record, but I've got so fed up of

00:30:35.424 --> 00:30:36.544
<v Speaker 0>facing it.

00:30:36.785 --> 00:30:39.200
<v Speaker 0>It was just the world has gone. Space

00:30:39.200 --> 00:30:40.000
<v Speaker 0>is crazy.

00:30:40.640 --> 00:30:42.320
<v Speaker 1>Shouldn't you be setting the indent size just

00:30:42.320 --> 00:30:43.200
<v Speaker 1>for YAML?

00:30:43.520 --> 00:30:44.880
<v Speaker 1>Because everything else is full.

00:30:51.215 --> 00:30:53.775
<v Speaker 0>Yeah. No. I think that's the right thing.

00:30:56.735 --> 00:30:57.375
<v Speaker 0>K.

00:30:59.215 --> 00:31:02.015
<v Speaker 0>We just called this podcast. How to get

00:31:02.490 --> 00:31:05.450
<v Speaker 0>attracted by every trivial detail before without actually

00:31:05.450 --> 00:31:06.730
<v Speaker 0>doing any rework.

00:31:06.890 --> 00:31:08.889
<v Speaker 0>Sorry. No. That's not I

00:31:09.370 --> 00:31:11.690
<v Speaker 0>thought that would work. It didn't let's just

00:31:11.690 --> 00:31:13.690
<v Speaker 0>do yeah. I know this. We'll keep an

00:31:13.690 --> 00:31:15.770
<v Speaker 0>agent. I'll do it over there. There we

00:31:15.770 --> 00:31:15.929
<v Speaker 0>go.

00:31:18.955 --> 00:31:20.634
<v Speaker 0>We're adding NGINX.

00:31:21.275 --> 00:31:24.075
<v Speaker 0>It's an image. Why do we need NGINX?

00:31:24.075 --> 00:31:25.115
<v Speaker 1>It's because

00:31:25.915 --> 00:31:28.075
<v Speaker 1>FPM itself isn't gonna be able to respond

00:31:28.075 --> 00:31:29.035
<v Speaker 1>to web requests

00:31:30.590 --> 00:31:32.830
<v Speaker 1>because it doesn't have an HTTP interface.

00:31:34.030 --> 00:31:36.270
<v Speaker 0>Yeah. So to the best of my knowledge,

00:31:36.270 --> 00:31:37.070
<v Speaker 0>APM

00:31:37.070 --> 00:31:37.789
<v Speaker 0>is

00:31:38.590 --> 00:31:41.310
<v Speaker 0>just processes the PHP and it takes requests

00:31:41.310 --> 00:31:42.830
<v Speaker 0>in over a socket and sped something back

00:31:42.830 --> 00:31:45.310
<v Speaker 0>over a socket, but doesn't actually deliver any

00:31:45.310 --> 00:31:49.145
<v Speaker 0>web server functionality. Right? Yes. Even the fast

00:31:49.145 --> 00:31:50.105
<v Speaker 1>CGI

00:31:51.545 --> 00:31:53.385
<v Speaker 1>connection is how I understand it.

00:31:54.185 --> 00:31:55.705
<v Speaker 1>So it

00:31:55.705 --> 00:31:57.225
<v Speaker 1>doesn't have an HTTP

00:31:57.545 --> 00:31:58.585
<v Speaker 1>web server built in.

00:31:59.970 --> 00:32:02.129
<v Speaker 1>And that's maybe a historical

00:32:02.290 --> 00:32:03.489
<v Speaker 1>thing. Right? Because

00:32:04.690 --> 00:32:07.010
<v Speaker 1>because normally you'd have NGINX and FPM on

00:32:07.010 --> 00:32:07.970
<v Speaker 1>one box.

00:32:09.330 --> 00:32:10.929
<v Speaker 1>Or you'd have a Mod Apache in the

00:32:10.929 --> 00:32:11.330
<v Speaker 1>old days.

00:32:12.135 --> 00:32:14.055
<v Speaker 1>So it didn't feel wrong having these two

00:32:14.055 --> 00:32:16.215
<v Speaker 1>daemons running that are gonna just to do

00:32:16.215 --> 00:32:16.934
<v Speaker 1>one thing.

00:32:17.895 --> 00:32:19.255
<v Speaker 1>Maybe that's where the question comes up a

00:32:19.255 --> 00:32:20.695
<v Speaker 1>lot. When you go into Docker world, you've

00:32:20.695 --> 00:32:21.335
<v Speaker 1>got this

00:32:21.735 --> 00:32:22.695
<v Speaker 1>ideology

00:32:23.015 --> 00:32:24.855
<v Speaker 1>that you should just have one one process

00:32:24.855 --> 00:32:25.575
<v Speaker 1>per container.

00:32:26.790 --> 00:32:28.230
<v Speaker 1>But then you need two containers to do

00:32:28.230 --> 00:32:29.990
<v Speaker 1>one thing, which feels

00:32:32.070 --> 00:32:34.390
<v Speaker 0>wrong. That's that's yeah. So in a Docker

00:32:34.390 --> 00:32:35.190
<v Speaker 0>environment,

00:32:35.190 --> 00:32:36.150
<v Speaker 0>you do need

00:32:36.710 --> 00:32:38.470
<v Speaker 0>you you should always have one process per

00:32:38.470 --> 00:32:40.710
<v Speaker 0>container, and and you do need two containers

00:32:40.710 --> 00:32:41.990
<v Speaker 0>to run a PHP application.

00:32:42.505 --> 00:32:43.065
<v Speaker 0>That

00:32:43.945 --> 00:32:45.865
<v Speaker 0>when it moves to Kubernetes, though, it starts

00:32:45.865 --> 00:32:48.184
<v Speaker 0>to leverage something called the pod, which understands

00:32:48.184 --> 00:32:50.424
<v Speaker 0>that there should be multiple containers there. Right.

00:32:50.424 --> 00:32:51.544
<v Speaker 0>But it's a much it's a much better

00:32:51.544 --> 00:32:53.785
<v Speaker 0>fit in the Kubernetes kinda landscape. But, yeah,

00:32:53.785 --> 00:32:55.705
<v Speaker 0>for Docker, Docker Compose, it can feel a

00:32:55.705 --> 00:32:57.065
<v Speaker 0>little bit counterintuitive.

00:32:57.145 --> 00:32:57.304
<v Speaker 0>But,

00:32:58.159 --> 00:33:00.880
<v Speaker 0>again, talking about parity between development and production,

00:33:00.880 --> 00:33:02.399
<v Speaker 0>we we really do want to isolate these

00:33:02.399 --> 00:33:03.840
<v Speaker 0>things. And they they both have very different

00:33:03.840 --> 00:33:06.240
<v Speaker 0>properties. NGINX, we just want to deliver static

00:33:06.240 --> 00:33:08.320
<v Speaker 0>assets. FPM, we just want to run it

00:33:08.320 --> 00:33:08.799
<v Speaker 0>through.

00:33:09.120 --> 00:33:10.559
<v Speaker 0>And the challenge of running both of those

00:33:10.559 --> 00:33:11.919
<v Speaker 0>in the one container is

00:33:12.505 --> 00:33:13.785
<v Speaker 0>how would you rate a health check for

00:33:13.785 --> 00:33:15.304
<v Speaker 0>a container with multiple pool service?

00:33:15.785 --> 00:33:17.865
<v Speaker 0>If FPM dies and engine x is still

00:33:17.865 --> 00:33:19.465
<v Speaker 0>healthy, is that container good?

00:33:19.865 --> 00:33:21.625
<v Speaker 0>If engine x dies and FPM is still

00:33:21.625 --> 00:33:23.865
<v Speaker 0>running, is that container good? Like and you

00:33:23.865 --> 00:33:25.785
<v Speaker 0>don't want to start writing health checks or

00:33:25.260 --> 00:33:27.180
<v Speaker 0>checking for multiple sockets being open and checking

00:33:27.180 --> 00:33:29.580
<v Speaker 0>that they're both valid and it's Yeah. Very

00:33:29.660 --> 00:33:30.460
<v Speaker 0>much work.

00:33:30.860 --> 00:33:32.620
<v Speaker 0>I guess health checks are kind of second

00:33:32.620 --> 00:33:34.779
<v Speaker 1>line of defense, aren't they? The the first

00:33:35.020 --> 00:33:36.860
<v Speaker 1>health check for a container is is is

00:33:36.860 --> 00:33:37.420
<v Speaker 1>it still running?

00:33:38.935 --> 00:33:40.615
<v Speaker 1>Like and and if you can make it

00:33:40.615 --> 00:33:42.295
<v Speaker 1>so that the as long as the main

00:33:42.295 --> 00:33:44.295
<v Speaker 1>process is running, the container's fine.

00:33:44.695 --> 00:33:45.975
<v Speaker 1>You don't have to worry as much about

00:33:45.975 --> 00:33:46.855
<v Speaker 1>health checks.

00:33:48.535 --> 00:33:51.095
<v Speaker 0>Yep. I think we're good that. That's because

00:33:51.095 --> 00:33:51.655
<v Speaker 1>I know why

00:33:52.660 --> 00:33:54.899
<v Speaker 1>I've seen people running supervisor d

00:33:55.060 --> 00:33:56.899
<v Speaker 1>as their entry point

00:33:57.060 --> 00:33:59.139
<v Speaker 1>Yeah. Or running lots of workers

00:33:59.380 --> 00:34:01.059
<v Speaker 1>or, you know, system d.

00:34:02.500 --> 00:34:04.900
<v Speaker 0>If if you're running a supervisor in your

00:34:04.900 --> 00:34:06.580
<v Speaker 0>container, that is no. Actually,

00:34:07.525 --> 00:34:09.205
<v Speaker 0>see, this is where this this is little

00:34:09.205 --> 00:34:10.965
<v Speaker 0>tiny bit of nuance. It's like, there is

00:34:10.965 --> 00:34:12.885
<v Speaker 0>a very good use case for running a

00:34:12.885 --> 00:34:15.285
<v Speaker 0>supervisor. Usually, it's tiny inside the Docker Compose.

00:34:15.364 --> 00:34:16.804
<v Speaker 0>But we're gonna ignore that for now. If

00:34:16.804 --> 00:34:18.485
<v Speaker 0>you run a supervisor in the container, there's

00:34:18.485 --> 00:34:20.165
<v Speaker 0>too much going on. Just use a VM.

00:34:20.165 --> 00:34:22.889
<v Speaker 0>Use Vagrant. Yeah. Just go down that approach

00:34:22.889 --> 00:34:24.409
<v Speaker 0>and Mhmm. Yeah.

00:34:25.210 --> 00:34:26.409
<v Speaker 1>If you're if you're running an entry point

00:34:26.409 --> 00:34:28.250
<v Speaker 1>that you know is something designed never to

00:34:28.250 --> 00:34:28.810
<v Speaker 1>die,

00:34:29.369 --> 00:34:30.650
<v Speaker 1>it doesn't tell you about the health of

00:34:30.650 --> 00:34:31.290
<v Speaker 1>the system.

00:34:32.250 --> 00:34:32.650
<v Speaker 0>K.

00:34:33.995 --> 00:34:36.155
<v Speaker 0>Alright. So you check again. Let's let's let's

00:34:36.155 --> 00:34:39.275
<v Speaker 0>do this. Valuable information, I think. These are

00:34:39.435 --> 00:34:40.395
<v Speaker 0>good things.

00:34:40.635 --> 00:34:42.715
<v Speaker 0>So we okay. So what have I done?

00:34:42.715 --> 00:34:44.955
<v Speaker 0>I've added NGINX. I have used an NGINX

00:34:44.955 --> 00:34:46.554
<v Speaker 0>image. I'm not gonna involve a tag right

00:34:46.554 --> 00:34:48.315
<v Speaker 0>now. I'm not that flexible with bears, not

00:34:48.315 --> 00:34:50.920
<v Speaker 0>it. I'm exposing this on port eighty eighty

00:34:50.920 --> 00:34:52.760
<v Speaker 0>now, which means I need to remove eighty

00:34:52.760 --> 00:34:54.040
<v Speaker 0>eighty from FPM

00:34:54.120 --> 00:34:55.800
<v Speaker 0>even though it's not FPM yet.

00:34:56.120 --> 00:34:58.520
<v Speaker 0>And that's fine. We don't actually need FPM

00:34:58.520 --> 00:35:00.920
<v Speaker 0>to be exposed. We can remove an entire

00:35:00.920 --> 00:35:02.840
<v Speaker 0>attack vector here by not having the FPM

00:35:02.840 --> 00:35:06.265
<v Speaker 0>exposed to our customers or users.

00:35:06.825 --> 00:35:08.345
<v Speaker 0>So we need to move that way.

00:35:10.585 --> 00:35:12.345
<v Speaker 0>And I'm happy for that just to run

00:35:12.345 --> 00:35:15.545
<v Speaker 0>right now. Makes no difference to me. I'm

00:35:15.545 --> 00:35:16.985
<v Speaker 0>just gonna spin this back up, and what

00:35:16.985 --> 00:35:18.905
<v Speaker 0>we should see is we now have NGINX

00:35:19.070 --> 00:35:21.390
<v Speaker 0>PHP still running, but not serving any traffic

00:35:21.390 --> 00:35:22.030
<v Speaker 0>to it.

00:35:23.790 --> 00:35:24.430
<v Speaker 0>Yeah.

00:35:25.950 --> 00:35:28.030
<v Speaker 1>I can't remember what the default NGINX response

00:35:28.030 --> 00:35:29.550
<v Speaker 1>is. Is it page not found or something?

00:35:30.795 --> 00:35:31.515
<v Speaker 1>Probably.

00:35:31.674 --> 00:35:33.755
<v Speaker 0>Yeah. I think you get no. So the

00:35:33.755 --> 00:35:36.555
<v Speaker 0>NGINX container will deliver a high versus NGINX.

00:35:36.555 --> 00:35:38.315
<v Speaker 0>Oh, really? And yeah.

00:35:44.075 --> 00:35:46.315
<v Speaker 0>That should be relatively

00:35:45.910 --> 00:35:46.950
<v Speaker 0>smallish.

00:35:47.030 --> 00:35:47.750
<v Speaker 0>Yep.

00:35:48.630 --> 00:35:51.430
<v Speaker 0>So we do have slums are running,

00:35:51.590 --> 00:35:54.390
<v Speaker 0>and we have engine x. I refresh this

00:35:54.390 --> 00:35:55.110
<v Speaker 0>page.

00:35:56.070 --> 00:35:57.350
<v Speaker 0>Three milliseconds.

00:35:57.350 --> 00:35:58.630
<v Speaker 0>See, good numbers.

00:36:02.065 --> 00:36:02.785
<v Speaker 0>Alright.

00:36:03.105 --> 00:36:05.345
<v Speaker 0>Now we still want to deliver

00:36:05.744 --> 00:36:08.305
<v Speaker 0>our PHP application. So what I'm gonna do

00:36:08.305 --> 00:36:10.224
<v Speaker 0>is we're gonna move this over to FPM.

00:36:12.270 --> 00:36:13.070
<v Speaker 1>Is

00:36:13.070 --> 00:36:15.310
<v Speaker 1>there an FPM Alpine tag maybe?

00:36:17.710 --> 00:36:18.750
<v Speaker 1>Think there is

00:36:19.470 --> 00:36:20.910
<v Speaker 1>well, Alpine FPM.

00:36:22.270 --> 00:36:27.230
<v Speaker 0>Let's jump over to up docker.com/_/pt.

00:36:28.905 --> 00:36:31.385
<v Speaker 0>At the end. Okay.

00:36:31.385 --> 00:36:33.305
<v Speaker 0>Yeah. There does seem to be an update

00:36:33.305 --> 00:36:34.105
<v Speaker 0>variant.

00:36:37.065 --> 00:36:37.705
<v Speaker 0>How

00:36:40.825 --> 00:36:42.425
<v Speaker 0>does that run?

00:36:42.425 --> 00:36:43.945
<v Speaker 0>So let's just

00:36:43.960 --> 00:36:45.640
<v Speaker 0>grab the Docker file.

00:36:47.560 --> 00:36:48.920
<v Speaker 0>Unless you know it when you just wanna

00:36:48.920 --> 00:36:50.600
<v Speaker 0>tell me, but Has it for an entry

00:36:50.600 --> 00:36:51.240
<v Speaker 1>point

00:36:51.960 --> 00:36:52.760
<v Speaker 1>that

00:36:53.800 --> 00:36:55.720
<v Speaker 1>if you specify a command that's a PHP

00:36:55.720 --> 00:36:57.720
<v Speaker 1>command, it'll run it. Otherwise, it will start

00:36:57.720 --> 00:36:58.200
<v Speaker 1>FPM.

00:36:58.745 --> 00:37:00.025
<v Speaker 1>That's my understanding.

00:37:02.425 --> 00:37:04.425
<v Speaker 0>Alright. So this points off to

00:37:06.505 --> 00:37:07.545
<v Speaker 0>that should cost.

00:37:10.265 --> 00:37:12.745
<v Speaker 0>Right. So assuming we're doing four

00:37:12.905 --> 00:37:15.865
<v Speaker 0>Alpine

00:37:14.300 --> 00:37:15.580
<v Speaker 0>FPN.

00:37:16.700 --> 00:37:18.060
<v Speaker 1>Yeah. Runs that.

00:37:20.220 --> 00:37:22.380
<v Speaker 0>Well, it's not actually using the entry point

00:37:22.780 --> 00:37:24.060
<v Speaker 0>unless that's

00:37:24.300 --> 00:37:25.340
<v Speaker 0>I get it early.

00:37:29.895 --> 00:37:32.055
<v Speaker 0>So

00:37:35.095 --> 00:37:37.975
<v Speaker 0>f p m Fortnite thousand,

00:37:38.535 --> 00:37:41.015
<v Speaker 0>and what path is this expecting?

00:37:42.055 --> 00:37:43.975
<v Speaker 1>Think it's spelled w w w.

00:37:44.775 --> 00:37:46.559
<v Speaker 0>So I haven't worked there. Yeah. Part of

00:37:46.559 --> 00:37:48.319
<v Speaker 0>it, w h t m l. Okay. So

00:37:48.319 --> 00:37:50.240
<v Speaker 0>we're just gonna change this to match.

00:37:50.799 --> 00:37:52.960
<v Speaker 0>We don't need a command overwrite anymore. We're

00:37:52.960 --> 00:37:55.440
<v Speaker 0>happy with whatever's going on on the default.

00:37:57.440 --> 00:37:59.039
<v Speaker 0>As far as volumes go, we want our

00:37:59.039 --> 00:38:00.160
<v Speaker 0>code in the right location,

00:38:02.665 --> 00:38:04.745
<v Speaker 0>that has to be updated to

00:38:08.025 --> 00:38:08.745
<v Speaker 0>that.

00:38:10.265 --> 00:38:11.305
<v Speaker 0>That's okay?

00:38:11.625 --> 00:38:12.825
<v Speaker 1>Looks good to me.

00:38:13.464 --> 00:38:13.865
<v Speaker 0>Okay.

00:38:14.780 --> 00:38:15.580
<v Speaker 0>So

00:38:16.780 --> 00:38:18.859
<v Speaker 0>I'm gonna assume that's gonna work because if

00:38:18.859 --> 00:38:20.380
<v Speaker 0>I restart this, there's nothing for me to

00:38:20.380 --> 00:38:22.060
<v Speaker 0>verify that this works. What we need to

00:38:22.060 --> 00:38:24.700
<v Speaker 0>do now is tell NGINX how to proxy

00:38:25.020 --> 00:38:26.300
<v Speaker 0>the request to FPF.

00:38:26.934 --> 00:38:29.335
<v Speaker 0>And for this, we're gonna need a configuration

00:38:29.335 --> 00:38:32.455
<v Speaker 0>files, but I'm gonna create an opt directory.

00:38:33.974 --> 00:38:35.494
<v Speaker 0>NGINX inside of that,

00:38:36.454 --> 00:38:38.055
<v Speaker 0>my b host starts on.

00:38:40.420 --> 00:38:42.340
<v Speaker 0>Did you bring the engine x configuration with

00:38:42.340 --> 00:38:42.820
<v Speaker 0>you?

00:38:45.940 --> 00:38:46.980
<v Speaker 1>I've never

00:38:47.860 --> 00:38:50.100
<v Speaker 1>I've copy pasted it from project to project

00:38:51.395 --> 00:38:52.435
<v Speaker 0>and then got

00:38:52.835 --> 00:38:54.515
<v Speaker 1>someone to look at it for me. And

00:38:54.515 --> 00:38:55.954
<v Speaker 1>it kind of annoys me that I need

00:38:55.954 --> 00:38:56.755
<v Speaker 1>to do that.

00:38:58.115 --> 00:38:59.155
<v Speaker 1>So I think there's a gap in the

00:38:59.155 --> 00:39:00.675
<v Speaker 1>market for an

00:39:01.555 --> 00:39:03.395
<v Speaker 1>image that is just the NGINX

00:39:03.890 --> 00:39:06.050
<v Speaker 1>container with a sensible PHP

00:39:06.450 --> 00:39:07.330
<v Speaker 1>config?

00:39:07.810 --> 00:39:08.530
<v Speaker 0>Well,

00:39:09.330 --> 00:39:11.570
<v Speaker 0>after the Ladakhon talk, I had to push

00:39:11.570 --> 00:39:12.530
<v Speaker 0>this up.

00:39:13.010 --> 00:39:13.730
<v Speaker 1>Mhmm.

00:39:15.650 --> 00:39:16.130
<v Speaker 0>So

00:39:18.145 --> 00:39:19.025
<v Speaker 0>we're

00:39:19.185 --> 00:39:21.425
<v Speaker 0>just gonna grab this. This is what it

00:39:21.425 --> 00:39:24.385
<v Speaker 0>looks like. So we have the server definition

00:39:24.385 --> 00:39:26.065
<v Speaker 0>that runs on port 80.

00:39:26.785 --> 00:39:27.905
<v Speaker 0>This is using

00:39:28.705 --> 00:39:29.505
<v Speaker 0>app.

00:39:31.825 --> 00:39:33.665
<v Speaker 0>It's just naturally pass up

00:39:34.230 --> 00:39:35.590
<v Speaker 0>by any complication.

00:39:36.230 --> 00:39:36.950
<v Speaker 0>Yeah.

00:39:38.630 --> 00:39:40.710
<v Speaker 0>Our application is leveraged

00:39:40.870 --> 00:39:42.550
<v Speaker 0>from a public.

00:39:42.790 --> 00:39:43.430
<v Speaker 0>Yeah.

00:39:44.070 --> 00:39:45.750
<v Speaker 0>And this is the old way. So that

00:39:45.750 --> 00:39:47.775
<v Speaker 0>is the one where you would need to

00:39:47.775 --> 00:39:49.615
<v Speaker 0>share the volume. So I'm gonna leave that

00:39:49.615 --> 00:39:51.454
<v Speaker 0>and so that we can actually see that

00:39:51.454 --> 00:39:52.655
<v Speaker 0>there. Yep.

00:39:53.135 --> 00:39:53.775
<v Speaker 0>And then

00:39:55.055 --> 00:39:57.775
<v Speaker 0>yeah. Sorry. On you go? It comes from

00:39:59.055 --> 00:40:01.375
<v Speaker 1>the the model where your NGINX is also

00:40:01.375 --> 00:40:02.974
<v Speaker 1>gonna serve with your static assets. Right?

00:40:04.890 --> 00:40:05.290
<v Speaker 0>In the

00:40:06.490 --> 00:40:07.690
<v Speaker 0>because this is we

00:40:08.010 --> 00:40:09.290
<v Speaker 1>have to sort of see if the file

00:40:09.290 --> 00:40:12.170
<v Speaker 1>exists. Otherwise, we'll run it on PHP.

00:40:14.250 --> 00:40:16.410
<v Speaker 0>Yes. So what this is doing, it's saying,

00:40:16.410 --> 00:40:19.145
<v Speaker 0>if this URL doesn't exist, then pass it

00:40:19.145 --> 00:40:21.385
<v Speaker 0>as a parameter, I believe, through the PHP

00:40:21.385 --> 00:40:22.825
<v Speaker 0>so that we have this kind of single

00:40:22.825 --> 00:40:24.825
<v Speaker 0>entry point, and then the PHP application handles

00:40:24.825 --> 00:40:25.945
<v Speaker 0>the routing there.

00:40:26.105 --> 00:40:28.665
<v Speaker 0>We can change the configuration of that so

00:40:28.665 --> 00:40:30.345
<v Speaker 0>that it does the trial failed, but not

00:40:30.345 --> 00:40:32.825
<v Speaker 0>for PHP fails. And then for PHP fails,

00:40:33.270 --> 00:40:35.670
<v Speaker 0>regardless of exist about, just send it to

00:40:35.670 --> 00:40:38.230
<v Speaker 0>FPM and let it deal with it. Okay.

00:40:38.790 --> 00:40:40.550
<v Speaker 1>But I think I I don't even think

00:40:40.550 --> 00:40:41.910
<v Speaker 1>that's that sensible,

00:40:41.910 --> 00:40:42.310
<v Speaker 1>really.

00:40:42.790 --> 00:40:44.550
<v Speaker 1>Like, don't know if in production people do

00:40:44.550 --> 00:40:46.150
<v Speaker 1>scale their PHP NGINX.

00:40:46.875 --> 00:40:48.555
<v Speaker 1>Does the PHP NGINX have to be the

00:40:48.555 --> 00:40:50.635
<v Speaker 1>same as the static assets NGINX?

00:40:51.275 --> 00:40:53.115
<v Speaker 1>Maybe you'd want them to scale separately.

00:40:53.595 --> 00:40:55.195
<v Speaker 1>Or possibly, when you get to some point,

00:40:55.195 --> 00:40:56.875
<v Speaker 1>you're gonna use a CDN for your static

00:40:56.875 --> 00:40:58.955
<v Speaker 1>stuff, and this is only ever gonna serve

00:40:58.955 --> 00:40:59.435
<v Speaker 1>PHP.

00:41:00.410 --> 00:41:02.570
<v Speaker 0>Yeah. I think there's definitely a few caveats

00:41:02.570 --> 00:41:03.530
<v Speaker 0>there. I

00:41:03.850 --> 00:41:06.010
<v Speaker 0>probably wouldn't put down the route of having

00:41:06.010 --> 00:41:07.850
<v Speaker 0>my static assets to leverage from something that

00:41:07.850 --> 00:41:10.010
<v Speaker 0>wasn't delivering the PHP traffic because

00:41:10.090 --> 00:41:12.650
<v Speaker 0>from a customer perspective, they're heading the same

00:41:12.650 --> 00:41:13.050
<v Speaker 0>endpoint.

00:41:13.935 --> 00:41:15.695
<v Speaker 0>Well, it's a static asset or PHP file,

00:41:15.695 --> 00:41:16.735
<v Speaker 0>and I want that to be a one

00:41:16.735 --> 00:41:18.975
<v Speaker 0>single entry point and not do any complicated

00:41:18.975 --> 00:41:19.775
<v Speaker 0>routine there.

00:41:20.415 --> 00:41:22.335
<v Speaker 0>Also, just because I'm reading this,

00:41:22.575 --> 00:41:25.615
<v Speaker 0>this actually is set up to work. So

00:41:25.695 --> 00:41:26.575
<v Speaker 0>that's location.

00:41:27.680 --> 00:41:29.360
<v Speaker 0>But then we have this PHP filter which

00:41:29.360 --> 00:41:31.440
<v Speaker 0>passes at 10PM. So that's actually should work.

00:41:31.440 --> 00:41:33.520
<v Speaker 0>This this config is actually good.

00:41:34.480 --> 00:41:36.240
<v Speaker 0>So as expecting,

00:41:36.400 --> 00:41:38.640
<v Speaker 0>something could test on a DNS name of

00:41:38.640 --> 00:41:40.240
<v Speaker 0>PHP on port 9,000.

00:41:40.885 --> 00:41:42.165
<v Speaker 0>So if we just

00:41:43.925 --> 00:41:46.565
<v Speaker 0>change this from slim to PHP,

00:41:48.005 --> 00:41:50.725
<v Speaker 0>that should immediately work without me doing any

00:41:50.725 --> 00:41:51.845
<v Speaker 0>other changes.

00:41:52.085 --> 00:41:52.885
<v Speaker 0>Need On the other.

00:41:53.960 --> 00:41:55.880
<v Speaker 1>I to I can't even go. In the

00:41:55.880 --> 00:41:56.600
<v Speaker 1>right place.

00:41:58.440 --> 00:42:00.119
<v Speaker 0>Can you say that again, please? You need

00:42:00.119 --> 00:42:01.400
<v Speaker 1>to map the config file.

00:42:02.039 --> 00:42:03.480
<v Speaker 0>You are very correct.

00:42:04.359 --> 00:42:05.400
<v Speaker 0>Need a volumes,

00:42:06.725 --> 00:42:11.605
<v Speaker 0>and we need to take opsenginexbholes.com,

00:42:11.605 --> 00:42:14.005
<v Speaker 0>and we need to put this in

00:42:16.325 --> 00:42:17.525
<v Speaker 0>that may be right.

00:42:18.520 --> 00:42:21.080
<v Speaker 0>Let's double check that. So I I think

00:42:21.080 --> 00:42:23.080
<v Speaker 0>anything in conf d is okay.

00:42:23.560 --> 00:42:25.400
<v Speaker 0>Yeah. But there is a default virtual, and

00:42:25.400 --> 00:42:27.160
<v Speaker 0>I want to replace it to avoid that

00:42:27.160 --> 00:42:29.880
<v Speaker 0>configuration error. So if I do Docker container

00:42:29.880 --> 00:42:30.840
<v Speaker 0>l s,

00:42:32.040 --> 00:42:33.240
<v Speaker 0>definitely not bigger.

00:42:35.545 --> 00:42:36.185
<v Speaker 0>And

00:42:36.505 --> 00:42:37.865
<v Speaker 0>exec and stage,

00:42:38.025 --> 00:42:39.225
<v Speaker 0>I keep trying to

00:42:39.785 --> 00:42:40.665
<v Speaker 0>keep falling back in the

00:42:41.865 --> 00:42:43.065
<v Speaker 0>bad practice.

00:42:44.025 --> 00:42:44.745
<v Speaker 0>From bash,

00:42:45.670 --> 00:42:48.310
<v Speaker 0>Let's go take a look at comp.p.

00:42:49.510 --> 00:42:50.070
<v Speaker 0>So

00:42:50.390 --> 00:42:52.070
<v Speaker 0>we should be able to override that.

00:42:53.670 --> 00:42:55.110
<v Speaker 0>I I think

00:42:55.110 --> 00:42:56.790
<v Speaker 0>well, I wanna get to confident, but that

00:42:56.790 --> 00:42:57.670
<v Speaker 0>is enough.

00:42:59.670 --> 00:43:01.510
<v Speaker 0>But we're gonna stop everything

00:43:03.565 --> 00:43:04.605
<v Speaker 0>I'm patiently.

00:43:04.685 --> 00:43:05.965
<v Speaker 0>I'm just gonna back it.

00:43:13.165 --> 00:43:13.485
<v Speaker 0>Okay.

00:43:17.210 --> 00:43:19.130
<v Speaker 0>So if I pop back over here,

00:43:21.450 --> 00:43:24.490
<v Speaker 0>we have our PHP application. It's kinda getting

00:43:24.490 --> 00:43:26.890
<v Speaker 0>longer there. Five hundred and fifty eight milliseconds.

00:43:27.690 --> 00:43:29.530
<v Speaker 0>But it is being delivered

00:43:30.365 --> 00:43:33.405
<v Speaker 0>via engine x. Now we can confirm that

00:43:34.285 --> 00:43:35.325
<v Speaker 0>by doing

00:43:35.645 --> 00:43:35.964
<v Speaker 0>a.

00:43:44.940 --> 00:43:46.780
<v Speaker 0>That looks like a slim error.

00:43:47.020 --> 00:43:47.660
<v Speaker 0>Oh,

00:43:48.860 --> 00:43:51.020
<v Speaker 0>no. Okay. So that failed us. Okay. So

00:43:51.020 --> 00:43:53.020
<v Speaker 0>if we look at our virtual configuration,

00:43:53.100 --> 00:43:55.980
<v Speaker 0>and the failed does not exist. It goes

00:43:55.455 --> 00:43:57.135
<v Speaker 0>through index.PHP.

00:43:57.135 --> 00:43:57.935
<v Speaker 1>So

00:43:57.935 --> 00:43:59.055
<v Speaker 1>can we take that

00:43:59.695 --> 00:44:00.815
<v Speaker 1>hold it out?

00:44:04.255 --> 00:44:06.975
<v Speaker 0>That would mean that we would so we

00:44:06.975 --> 00:44:09.215
<v Speaker 0>could, definitely. It just means that our entry

00:44:09.215 --> 00:44:11.690
<v Speaker 0>point for this application would have to be

00:44:11.849 --> 00:44:12.490
<v Speaker 0>that.

00:44:13.450 --> 00:44:16.170
<v Speaker 0>What we can do is modify the Internet.

00:44:16.170 --> 00:44:17.770
<v Speaker 0>We we can drop something into that in

00:44:17.770 --> 00:44:19.370
<v Speaker 0>the next container. Right? So

00:44:20.410 --> 00:44:22.569
<v Speaker 0>just to show that it works, we don't

00:44:22.569 --> 00:44:23.609
<v Speaker 0>need to do anything else.

00:44:26.335 --> 00:44:28.335
<v Speaker 0>And so that would be six. Right?

00:44:30.494 --> 00:44:31.214
<v Speaker 0>Of course, it would be

00:44:32.734 --> 00:44:34.175
<v Speaker 0>that's the name.

00:44:35.775 --> 00:44:37.934
<v Speaker 0>We can go to w w w HTML.

00:44:44.760 --> 00:44:47.320
<v Speaker 0>That totally wasn't the path for the No.

00:44:47.320 --> 00:44:49.480
<v Speaker 1>That's that's correct. We didn't mount any of

00:44:49.480 --> 00:44:50.600
<v Speaker 1>the files into

00:44:51.560 --> 00:44:52.040
<v Speaker 1>NGINX.

00:44:53.585 --> 00:44:55.265
<v Speaker 0>So make it work for now.

00:44:55.585 --> 00:44:55.985
<v Speaker 0>You

00:44:57.105 --> 00:44:59.105
<v Speaker 0>can do a touch, even,

00:44:59.665 --> 00:45:00.545
<v Speaker 0>dot HTML.

00:45:07.320 --> 00:45:09.080
<v Speaker 0>And so Yeah. And

00:45:11.480 --> 00:45:12.600
<v Speaker 0>in theory,

00:45:13.240 --> 00:45:14.840
<v Speaker 0>we can now skip

00:45:15.640 --> 00:45:17.720
<v Speaker 0>this this could be a static asset, essentially.

00:45:17.720 --> 00:45:18.840
<v Speaker 0>And we can say

00:45:19.674 --> 00:45:20.395
<v Speaker 0>here.

00:45:21.275 --> 00:45:21.994
<v Speaker 1>Okay.

00:45:23.035 --> 00:45:24.155
<v Speaker 1>Few milliseconds.

00:45:24.954 --> 00:45:27.515
<v Speaker 0>Much faster. Mhmm. This is why p this

00:45:27.515 --> 00:45:29.275
<v Speaker 0>is why you don't want FPM delivering a

00:45:29.275 --> 00:45:30.875
<v Speaker 0>static asset. Mhmm.

00:45:34.070 --> 00:45:36.790
<v Speaker 0>Okay. Where is my code? So we're happy

00:45:36.790 --> 00:45:38.790
<v Speaker 0>with that. We're happy with that.

00:45:42.310 --> 00:45:43.030
<v Speaker 0>What's next?

00:45:48.915 --> 00:45:51.235
<v Speaker 1>Well, do wanna go into making a Docker

00:45:51.235 --> 00:45:51.875
<v Speaker 1>file?

00:45:52.915 --> 00:45:54.035
<v Speaker 1>Building the stuff?

00:45:54.995 --> 00:45:56.595
<v Speaker 1>Should we try and speed it up?

00:45:58.675 --> 00:46:00.435
<v Speaker 1>That's part of it. Build build the stuff

00:46:00.435 --> 00:46:02.115
<v Speaker 1>into the container so we're not don't have

00:46:02.115 --> 00:46:03.155
<v Speaker 1>to map as much stuff.

00:46:08.810 --> 00:46:09.850
<v Speaker 0>Yeah. So

00:46:10.010 --> 00:46:11.050
<v Speaker 0>the hypothesis

00:46:11.050 --> 00:46:12.250
<v Speaker 0>there is

00:46:12.490 --> 00:46:14.010
<v Speaker 0>changing your composer

00:46:14.010 --> 00:46:16.650
<v Speaker 0>dot JSON is a very rare activity. So

00:46:16.650 --> 00:46:19.130
<v Speaker 0>could we use Docker build caching

00:46:20.984 --> 00:46:22.185
<v Speaker 0>speed up that process?

00:46:23.224 --> 00:46:24.984
<v Speaker 0>Let's

00:46:24.984 --> 00:46:27.065
<v Speaker 0>tackle that when we do it. Yeah. We

00:46:27.065 --> 00:46:28.744
<v Speaker 0>so we are gonna add a Docker file,

00:46:29.464 --> 00:46:30.825
<v Speaker 0>and then we're gonna try and deploy that

00:46:30.825 --> 00:46:32.585
<v Speaker 0>to Kubernetes. I'm just wondering, is there any,

00:46:32.670 --> 00:46:34.349
<v Speaker 0>like, from a local dev point of view,

00:46:34.349 --> 00:46:36.270
<v Speaker 0>is there anything beyond this that you need?

00:46:36.589 --> 00:46:38.589
<v Speaker 0>Like, I can in fact, we haven't shown

00:46:38.589 --> 00:46:40.190
<v Speaker 0>one thing. Right? I can change the code

00:46:40.190 --> 00:46:41.550
<v Speaker 0>and then immediately I see

00:46:42.190 --> 00:46:43.869
<v Speaker 0>something happened. Right? So

00:46:44.589 --> 00:46:47.875
<v Speaker 0>I have no idea where that index page

00:46:47.875 --> 00:46:48.435
<v Speaker 0>is.

00:46:48.914 --> 00:46:51.234
<v Speaker 1>And you left the containers running, didn't you?

00:46:51.394 --> 00:46:52.275
<v Speaker 0>I did.

00:46:53.394 --> 00:46:55.315
<v Speaker 0>Is it action? User action? Is that the

00:46:55.315 --> 00:46:56.275
<v Speaker 0>default page?

00:46:59.634 --> 00:47:01.315
<v Speaker 1>Yeah. Maybe we should've used the framework one

00:47:01.315 --> 00:47:01.795
<v Speaker 1>of us knows.

00:47:04.330 --> 00:47:04.970
<v Speaker 0>Oh,

00:47:05.770 --> 00:47:08.810
<v Speaker 0>because I've created that directory with permissions,

00:47:08.890 --> 00:47:09.210
<v Speaker 0>haven't I?

00:47:18.724 --> 00:47:20.645
<v Speaker 0>I'm not sure what I've done there. Let's

00:47:20.645 --> 00:47:21.845
<v Speaker 0>fill up my logs.

00:47:22.085 --> 00:47:23.605
<v Speaker 1>I tried deleting the folder. That's all you

00:47:23.605 --> 00:47:25.205
<v Speaker 1>did, just touch that file.

00:47:26.404 --> 00:47:28.484
<v Speaker 0>Okay. So we're not getting an index now.

00:47:29.780 --> 00:47:30.500
<v Speaker 0>So

00:47:31.460 --> 00:47:33.540
<v Speaker 0>we don't actually want an index. What we

00:47:33.540 --> 00:47:34.580
<v Speaker 0>want is

00:47:36.580 --> 00:47:37.460
<v Speaker 0>go here.

00:47:45.425 --> 00:47:48.465
<v Speaker 0>Engine. Maybe try just taking the folder out

00:47:48.465 --> 00:47:50.705
<v Speaker 1>of the container the running container,

00:47:50.865 --> 00:47:52.785
<v Speaker 1>or kill the container and start it again.

00:47:53.505 --> 00:47:55.825
<v Speaker 0>That will definitely fix it. I'm just

00:47:57.345 --> 00:47:59.105
<v Speaker 0>alright. Okay. Yeah. We don't need to publish

00:47:59.105 --> 00:47:59.825
<v Speaker 0>the numbers.

00:48:00.225 --> 00:48:02.440
<v Speaker 0>You're right. We're all over.

00:48:11.960 --> 00:48:14.440
<v Speaker 0>Maybe we can. So that just says hello

00:48:14.440 --> 00:48:16.040
<v Speaker 0>world. So let's just search for that.

00:48:20.175 --> 00:48:21.615
<v Speaker 0>So it wasn't actually in any of those

00:48:21.615 --> 00:48:23.615
<v Speaker 0>things. It's in a roof tile. Okay.

00:48:24.335 --> 00:48:28.255
<v Speaker 0>So we should have real time development experience.

00:48:34.640 --> 00:48:36.480
<v Speaker 1>And, actually, I think with a project this

00:48:36.480 --> 00:48:38.000
<v Speaker 1>size, that is an acceptable

00:48:38.800 --> 00:48:40.240
<v Speaker 1>performance. You know, if you don't wanna get

00:48:40.240 --> 00:48:42.160
<v Speaker 1>too stuck into how Docker works and you

00:48:42.160 --> 00:48:42.960
<v Speaker 1>just want to

00:48:43.475 --> 00:48:46.435
<v Speaker 1>maybe run a really specific version of PHP

00:48:46.675 --> 00:48:49.395
<v Speaker 1>that you don't have you don't wanna install

00:48:49.395 --> 00:48:50.755
<v Speaker 1>locally, that's kind of

00:48:51.235 --> 00:48:52.195
<v Speaker 1>good enough.

00:48:53.395 --> 00:48:55.235
<v Speaker 0>Yeah. I'm not gonna get frustrated

00:48:55.500 --> 00:48:57.580
<v Speaker 0>making changes to that and and waiting for

00:48:57.580 --> 00:48:59.340
<v Speaker 0>it to reload. Yeah. Don't think I'm gonna

00:48:59.340 --> 00:49:01.180
<v Speaker 0>do it. That fast

00:49:02.060 --> 00:49:04.540
<v Speaker 1>when I'm developing. I'll make do some work

00:49:04.540 --> 00:49:06.140
<v Speaker 1>and then go over and check it sometimes

00:49:06.140 --> 00:49:07.180
<v Speaker 1>if I don't have a test.

00:49:09.605 --> 00:49:13.125
<v Speaker 1>I've seen devs on big Magento projects waiting

00:49:13.125 --> 00:49:15.045
<v Speaker 1>ten seconds for a page to load anyway.

00:49:17.204 --> 00:49:17.925
<v Speaker 1>Right.

00:49:20.325 --> 00:49:21.045
<v Speaker 0>Okay.

00:49:22.404 --> 00:49:24.805
<v Speaker 0>So local development, I think

00:49:25.470 --> 00:49:27.790
<v Speaker 0>we're okay on. The only thing we could

00:49:27.790 --> 00:49:30.190
<v Speaker 0>potentially modify now would be

00:49:31.630 --> 00:49:33.950
<v Speaker 0>ability to do you know what? That NGINX

00:49:33.950 --> 00:49:35.870
<v Speaker 0>thing is really bugging me. We're gonna make

00:49:35.870 --> 00:49:38.125
<v Speaker 0>that work. Okay. Because we're we're talking about

00:49:38.125 --> 00:49:40.204
<v Speaker 0>how we want NGINX to lower static assets.

00:49:40.204 --> 00:49:41.645
<v Speaker 0>And the minute I did that, I broke

00:49:41.645 --> 00:49:44.045
<v Speaker 0>it. You don't think we should fix that?

00:49:44.845 --> 00:49:45.565
<v Speaker 1>Sure.

00:49:45.645 --> 00:49:47.244
<v Speaker 1>The other thing I could look at is

00:49:47.645 --> 00:49:49.164
<v Speaker 1>how how would we use a database?

00:49:53.710 --> 00:49:54.510
<v Speaker 0>Yes.

00:49:54.510 --> 00:49:55.790
<v Speaker 1>I'm open to anything.

00:49:55.950 --> 00:49:57.869
<v Speaker 1>Do wanna what what was it that bothered

00:49:57.869 --> 00:49:59.710
<v Speaker 1>you about the NGINX? Is that when you

00:49:59.710 --> 00:50:00.750
<v Speaker 1>made the folder,

00:50:01.630 --> 00:50:02.990
<v Speaker 1>it no longer

00:50:03.390 --> 00:50:04.430
<v Speaker 1>looked at FPM?

00:50:06.625 --> 00:50:07.825
<v Speaker 0>Correct.

00:50:07.904 --> 00:50:08.625
<v Speaker 0>So

00:50:09.184 --> 00:50:11.984
<v Speaker 0>let's let's do let's do two things. First,

00:50:12.305 --> 00:50:13.744
<v Speaker 0>if you're watching and you want us to

00:50:13.744 --> 00:50:15.184
<v Speaker 0>cover any other thing that we've been talking

00:50:15.184 --> 00:50:16.865
<v Speaker 0>about, leave a comment, and we will make

00:50:16.865 --> 00:50:19.460
<v Speaker 0>sure that we tackle that. Right? What we'll

00:50:19.460 --> 00:50:21.059
<v Speaker 0>do for the next few minutes is we

00:50:21.059 --> 00:50:22.980
<v Speaker 0>will add that database component, and we will

00:50:22.980 --> 00:50:25.859
<v Speaker 0>revert Docker Compose down to version two, explaining

00:50:25.859 --> 00:50:27.620
<v Speaker 0>why that's important as we go.

00:50:28.260 --> 00:50:29.940
<v Speaker 0>Right? Because we we we do have a

00:50:29.940 --> 00:50:32.020
<v Speaker 0>migration step that we would want to run.

00:50:32.020 --> 00:50:32.260
<v Speaker 0>So

00:50:33.204 --> 00:50:34.645
<v Speaker 0>what's your favorite database?

00:50:36.165 --> 00:50:38.005
<v Speaker 1>Favorite or one I use the most?

00:50:38.325 --> 00:50:39.605
<v Speaker 0>Actually, the one you use the most, I

00:50:39.605 --> 00:50:41.285
<v Speaker 0>guess. MySQL.

00:50:41.285 --> 00:50:42.085
<v Speaker 0>Alright.

00:50:43.285 --> 00:50:45.125
<v Speaker 0>Yeah. I'm gonna use a Myriad DB version.

00:50:46.650 --> 00:50:48.650
<v Speaker 1>Oh, I don't know. Is Docker.

00:50:48.730 --> 00:50:51.290
<v Speaker 0>It's MySQL, but not one by by Oracle.

00:50:51.290 --> 00:50:52.730
<v Speaker 0>So Yeah. Yeah.

00:50:53.770 --> 00:50:54.410
<v Speaker 0>Oh,

00:50:57.450 --> 00:50:58.490
<v Speaker 0>we're kinda

00:50:58.914 --> 00:51:00.835
<v Speaker 0>weird flips there. Okay. So we're gonna run

00:51:00.835 --> 00:51:02.035
<v Speaker 0>MariaDB.

00:51:02.115 --> 00:51:04.435
<v Speaker 0>I think that it's starting as 10.

00:51:06.035 --> 00:51:08.914
<v Speaker 0>We've well explored this in my local machine.

00:51:08.914 --> 00:51:10.194
<v Speaker 0>I don't know why. But

00:51:11.400 --> 00:51:13.240
<v Speaker 1>Yeah. You want to run a MySQL client

00:51:13.240 --> 00:51:14.920
<v Speaker 1>in your ID or something at some point.

00:51:14.920 --> 00:51:15.320
<v Speaker 1>Right?

00:51:16.200 --> 00:51:17.000
<v Speaker 0>Yep.

00:51:17.480 --> 00:51:19.799
<v Speaker 0>And then we will set this down. Let's

00:51:19.799 --> 00:51:22.200
<v Speaker 0>spin this up. It'll kill the image. Nothing's

00:51:22.200 --> 00:51:24.280
<v Speaker 0>really changed, but it should just kinda make

00:51:24.280 --> 00:51:24.599
<v Speaker 0>work.

00:51:25.685 --> 00:51:28.565
<v Speaker 1>So sometimes I have two two Docker Compose

00:51:28.565 --> 00:51:30.165
<v Speaker 1>files. Right? One that adds

00:51:30.485 --> 00:51:33.285
<v Speaker 1>a load of exposed ports and extra

00:51:34.165 --> 00:51:36.405
<v Speaker 1>volumes and things that's explicitly dev.

00:51:37.845 --> 00:51:38.565
<v Speaker 0>Yes.

00:51:39.045 --> 00:51:39.445
<v Speaker 0>So,

00:51:40.640 --> 00:51:42.720
<v Speaker 0>yeah, I forgot for this. And we need

00:51:42.720 --> 00:51:45.280
<v Speaker 0>to tell the really be a a few

00:51:45.280 --> 00:51:47.440
<v Speaker 0>environment things. So we have to say,

00:51:48.480 --> 00:51:50.960
<v Speaker 0>my SQL password

00:51:52.480 --> 00:51:53.120
<v Speaker 0>password.

00:51:57.115 --> 00:51:58.875
<v Speaker 0>That should satisfy that.

00:52:00.395 --> 00:52:02.875
<v Speaker 0>We have a question from Glenn. He's just

00:52:02.875 --> 00:52:03.595
<v Speaker 0>curious

00:52:04.155 --> 00:52:07.115
<v Speaker 0>what does the Docker environment variable do. I

00:52:07.115 --> 00:52:08.910
<v Speaker 0>think Glenn, we're just a little bit late,

00:52:08.910 --> 00:52:10.110
<v Speaker 0>we'll cover that again.

00:52:10.830 --> 00:52:11.870
<v Speaker 0>This is

00:52:12.030 --> 00:52:14.670
<v Speaker 0>just a slam framework thing that tells it

00:52:14.670 --> 00:52:17.150
<v Speaker 0>to tweaks the logging to standard out. So

00:52:17.150 --> 00:52:18.990
<v Speaker 0>when you do container based development,

00:52:19.470 --> 00:52:22.164
<v Speaker 0>you always want the logs here, first and

00:52:22.164 --> 00:52:22.805
<v Speaker 0>foremost.

00:52:22.964 --> 00:52:24.724
<v Speaker 0>Even when you go to production, the logs

00:52:24.724 --> 00:52:26.085
<v Speaker 0>have to go to standard out because that's

00:52:26.085 --> 00:52:27.525
<v Speaker 0>how they're collected by

00:52:27.525 --> 00:52:30.645
<v Speaker 0>the d, the bit, any other logs dash

00:52:30.645 --> 00:52:31.445
<v Speaker 0>deal set.

00:52:31.845 --> 00:52:34.165
<v Speaker 0>And and instead of

00:52:34.244 --> 00:52:34.724
<v Speaker 0>settings,

00:52:35.980 --> 00:52:38.060
<v Speaker 0>it's just checking for that environment variable that

00:52:38.060 --> 00:52:38.860
<v Speaker 0>exists.

00:52:38.860 --> 00:52:41.100
<v Speaker 0>And if it does, it says, okay. We're

00:52:41.100 --> 00:52:43.820
<v Speaker 0>gonna log the standard out. Otherwise, it's gonna

00:52:43.820 --> 00:52:45.580
<v Speaker 0>log to the logs directory.

00:52:46.140 --> 00:52:48.060
<v Speaker 0>So it's just a slam framework thing.

00:52:48.665 --> 00:52:50.265
<v Speaker 0>I'm sure there's a way to configure that

00:52:50.265 --> 00:52:52.265
<v Speaker 0>for something in Largo too, but do examples

00:52:52.265 --> 00:52:54.425
<v Speaker 0>of that. Right? We're there tomorrow.

00:52:55.785 --> 00:52:57.705
<v Speaker 0>Now we should have

00:53:01.800 --> 00:53:05.160
<v Speaker 0>my sql MariaDB slash thingy working.

00:53:05.400 --> 00:53:06.120
<v Speaker 0>Yep.

00:53:06.920 --> 00:53:09.080
<v Speaker 0>Can you connect to And the challenge is

00:53:11.320 --> 00:53:13.880
<v Speaker 1>Have you got a local client you can

00:53:14.875 --> 00:53:16.155
<v Speaker 1>connect to it from?

00:53:17.755 --> 00:53:18.955
<v Speaker 1>Or command line? You

00:53:22.795 --> 00:53:24.315
<v Speaker 1>you trust your Internet connection?

00:53:26.760 --> 00:53:29.640
<v Speaker 0>It's pretty solid. I get about 500 meg.

00:53:30.200 --> 00:53:31.000
<v Speaker 1>What?

00:53:32.360 --> 00:53:34.840
<v Speaker 1>It's pretty good. Sorry. Not not megs because

00:53:34.840 --> 00:53:36.600
<v Speaker 0>we have the SI standards now.

00:53:36.760 --> 00:53:37.480
<v Speaker 0>Mebi bytes.

00:53:38.065 --> 00:53:39.185
<v Speaker 0>Mebi bytes.

00:53:39.345 --> 00:53:40.385
<v Speaker 0>Mebi bytes.

00:53:40.465 --> 00:53:44.865
<v Speaker 0>500 bytes. 500 Mebi bytes. It's

00:53:44.865 --> 00:53:45.825
<v Speaker 1>better than me.

00:53:48.385 --> 00:53:49.585
<v Speaker 0>I just have not gone green.

00:53:56.359 --> 00:53:58.040
<v Speaker 1>It's not according

00:53:58.040 --> 00:53:59.080
<v Speaker 1>to the message.

00:53:59.560 --> 00:54:00.440
<v Speaker 1>Alright.

00:54:01.000 --> 00:54:03.240
<v Speaker 1>It's only, which means it's not to user

00:54:03.240 --> 00:54:04.840
<v Speaker 1>local because it conflicts.

00:54:05.400 --> 00:54:06.440
<v Speaker 1>So you have to add it to the

00:54:06.440 --> 00:54:06.680
<v Speaker 1>path.

00:54:13.455 --> 00:54:14.815
<v Speaker 1>Okay. Camera's going crazy.

00:54:15.695 --> 00:54:21.855
<v Speaker 0>So we can do a post. Password.

00:54:24.210 --> 00:54:25.010
<v Speaker 1>Password.

00:54:25.170 --> 00:54:26.210
<v Speaker 1>Password. Okay.

00:54:27.250 --> 00:54:29.410
<v Speaker 1>But it's not a capital h for what's

00:54:29.410 --> 00:54:29.970
<v Speaker 0>done.

00:54:31.170 --> 00:54:32.370
<v Speaker 1>I like your

00:54:33.970 --> 00:54:34.610
<v Speaker 1>security

00:54:35.454 --> 00:54:36.494
<v Speaker 1>consciousness.

00:54:39.135 --> 00:54:42.415
<v Speaker 0>Do you you don't have MySQL installed locally,

00:54:44.415 --> 00:54:46.735
<v Speaker 1>do you? No. I do not.

00:54:47.055 --> 00:54:48.174
<v Speaker 0>What's lower h?

00:54:51.080 --> 00:54:53.640
<v Speaker 0>Let's do one two seven zero zero zero

00:54:53.640 --> 00:54:54.440
<v Speaker 0>one.

00:54:57.720 --> 00:54:58.280
<v Speaker 0>There.

00:54:58.920 --> 00:54:59.560
<v Speaker 0>User

00:55:02.200 --> 00:55:04.525
<v Speaker 0>I know. There we go. Nice.

00:55:06.845 --> 00:55:07.965
<v Speaker 0>Okay. So

00:55:08.685 --> 00:55:10.765
<v Speaker 0>that works. Now the the challenge with the

00:55:10.765 --> 00:55:13.805
<v Speaker 0>3.7 syntax now is that

00:55:15.165 --> 00:55:17.325
<v Speaker 0>we have very limited support

00:55:17.805 --> 00:55:19.325
<v Speaker 0>or depends on

00:55:22.300 --> 00:55:23.660
<v Speaker 0>All that's except

00:55:25.260 --> 00:55:27.580
<v Speaker 0>and the three point x spec is that.

00:55:29.180 --> 00:55:29.980
<v Speaker 0>What

00:55:29.980 --> 00:55:31.260
<v Speaker 0>that tells

00:55:31.260 --> 00:55:33.340
<v Speaker 0>our Docker engine

00:55:34.665 --> 00:55:35.465
<v Speaker 0>is

00:55:36.665 --> 00:55:40.185
<v Speaker 0>that it must start the MariaDB container first.

00:55:41.145 --> 00:55:42.825
<v Speaker 0>That's That is it. And that's so you

00:55:42.825 --> 00:55:45.945
<v Speaker 1>can do Docker up Docker Compose up PHP,

00:55:47.070 --> 00:55:49.230
<v Speaker 1>and it will also start the other guy.

00:55:49.230 --> 00:55:49.710
<v Speaker 1>Right?

00:55:50.110 --> 00:55:51.630
<v Speaker 1>Because so far, we've just been doing Docker

00:55:51.630 --> 00:55:52.190
<v Speaker 1>up.

00:55:52.910 --> 00:55:54.190
<v Speaker 0>Yeah. So it means when I run Docker

00:55:54.190 --> 00:55:56.190
<v Speaker 0>Compose up, that everyone will ensure that the

00:55:56.190 --> 00:55:58.750
<v Speaker 0>MariaDB container exists, but has not started or

00:55:58.750 --> 00:56:01.310
<v Speaker 0>health it exists and started, but not healthy

00:56:01.425 --> 00:56:03.265
<v Speaker 0>before it starts with PHP one. Now that's

00:56:03.265 --> 00:56:05.505
<v Speaker 0>important because the way that Docker Compose

00:56:05.505 --> 00:56:06.465
<v Speaker 0>handles

00:56:06.705 --> 00:56:09.025
<v Speaker 0>communication is generally through injecting stuff into the

00:56:09.025 --> 00:56:09.905
<v Speaker 0>host file,

00:56:10.225 --> 00:56:12.225
<v Speaker 0>and that name has to exist before that

00:56:12.225 --> 00:56:13.825
<v Speaker 0>container starts for it to work.

00:56:14.680 --> 00:56:15.400
<v Speaker 0>Mhmm.

00:56:15.800 --> 00:56:17.640
<v Speaker 1>So we could add NGINX there as well.

00:56:17.640 --> 00:56:18.120
<v Speaker 1>Right?

00:56:21.000 --> 00:56:21.720
<v Speaker 0>Yes.

00:56:21.800 --> 00:56:24.200
<v Speaker 0>Now the challenge is when my PHP entry

00:56:24.200 --> 00:56:26.680
<v Speaker 0>point is checking to the database to see

00:56:26.680 --> 00:56:27.960
<v Speaker 0>if it has to run a migration,

00:56:28.475 --> 00:56:30.475
<v Speaker 0>Is that MariaDB and most of our databases

00:56:30.475 --> 00:56:32.795
<v Speaker 0>do not start as quickly as FDM.

00:56:33.115 --> 00:56:36.075
<v Speaker 0>Databases generally take anywhere from two or three

00:56:36.075 --> 00:56:38.235
<v Speaker 0>seconds up to maybe a couple of minutes,

00:56:38.315 --> 00:56:39.355
<v Speaker 0>in worst case,

00:56:39.755 --> 00:56:42.315
<v Speaker 0>before they can actually start accepting queries or

00:56:42.315 --> 00:56:45.470
<v Speaker 0>rates to that system. Yeah. Which means that

00:56:45.550 --> 00:56:48.349
<v Speaker 0>we lose that wonderful ability of just typing

00:56:48.349 --> 00:56:50.190
<v Speaker 0>Docker Compose up and it working.

00:56:50.430 --> 00:56:52.109
<v Speaker 0>We then have to start adding make files

00:56:52.109 --> 00:56:54.190
<v Speaker 0>or batch scripts to do loads of checks.

00:56:54.830 --> 00:56:56.270
<v Speaker 0>And things get really complicated.

00:56:56.525 --> 00:56:58.605
<v Speaker 1>Some of the think when the database arrives

00:56:58.605 --> 00:57:00.205
<v Speaker 1>and then runs the migrations.

00:57:00.685 --> 00:57:02.925
<v Speaker 0>Yeah. When I see people time after time

00:57:03.005 --> 00:57:04.685
<v Speaker 0>I used to be a consultant, and every

00:57:04.685 --> 00:57:06.285
<v Speaker 0>company I would go to had this batch

00:57:06.285 --> 00:57:08.685
<v Speaker 0>scripts that tells the Docker log waiting for

00:57:08.685 --> 00:57:10.765
<v Speaker 0>some random arbitrary string that may or may

00:57:10.765 --> 00:57:13.430
<v Speaker 0>not change between versions of the database. That

00:57:13.430 --> 00:57:15.589
<v Speaker 0>somehow indicate that it is ready to receive

00:57:15.589 --> 00:57:16.230
<v Speaker 0>traffic.

00:57:17.589 --> 00:57:18.790
<v Speaker 0>Doing this is

00:57:19.109 --> 00:57:21.910
<v Speaker 0>okay. My equivalent is in the PHP.

00:57:22.230 --> 00:57:23.589
<v Speaker 1>Run the migrations,

00:57:24.390 --> 00:57:25.269
<v Speaker 1>catch the

00:57:25.835 --> 00:57:28.315
<v Speaker 1>MySQL connection isn't there yet, and then retry

00:57:28.315 --> 00:57:29.275
<v Speaker 1>it a few times.

00:57:29.755 --> 00:57:32.075
<v Speaker 1>So just try and run with migrations into

00:57:32.234 --> 00:57:34.635
<v Speaker 1>into the database until you get a success,

00:57:35.994 --> 00:57:36.875
<v Speaker 1>which is equal. Yeah.

00:57:37.994 --> 00:57:39.275
<v Speaker 0>Of course. I mean, you could do that

00:57:39.275 --> 00:57:41.680
<v Speaker 0>too with a restart policy of always and

00:57:41.680 --> 00:57:43.120
<v Speaker 0>just keep going and going and going and

00:57:43.120 --> 00:57:44.000
<v Speaker 0>going. But

00:57:44.640 --> 00:57:47.760
<v Speaker 0>and we then the restart become meaningless. Right?

00:57:47.760 --> 00:57:49.760
<v Speaker 0>We don't we wanna restart to me is

00:57:49.760 --> 00:57:52.240
<v Speaker 0>important. When a container exits, that means either

00:57:52.240 --> 00:57:54.240
<v Speaker 0>something needs fax, something crashed,

00:57:54.720 --> 00:57:57.265
<v Speaker 0>not that something wasn't available. And those to

00:57:57.265 --> 00:57:59.025
<v Speaker 0>me are very different finish scenarios that I'd

00:57:59.025 --> 00:58:01.665
<v Speaker 0>like to understand when I build an application.

00:58:06.065 --> 00:58:07.105
<v Speaker 1>In production,

00:58:08.465 --> 00:58:10.225
<v Speaker 1>you have things like Istio that

00:58:11.490 --> 00:58:14.450
<v Speaker 1>sort of hold your database connection until the

00:58:14.450 --> 00:58:15.970
<v Speaker 1>real database is there. And there's lot of

00:58:15.970 --> 00:58:18.050
<v Speaker 1>very sophisticated solutions around it.

00:58:18.610 --> 00:58:20.930
<v Speaker 0>But Yeah. So using a service mesh, which

00:58:20.930 --> 00:58:22.930
<v Speaker 0>is Istio in production, would allow you to

00:58:22.930 --> 00:58:25.465
<v Speaker 0>have automatic retries on that connection,

00:58:25.705 --> 00:58:27.945
<v Speaker 0>which means your application would just be and

00:58:27.945 --> 00:58:30.585
<v Speaker 0>it just looked like a really long request.

00:58:30.585 --> 00:58:32.265
<v Speaker 0>So then you're still susceptible to time outs

00:58:32.265 --> 00:58:34.265
<v Speaker 0>of the application or database takes longer than

00:58:34.265 --> 00:58:36.265
<v Speaker 0>that than full up. That's a good point.

00:58:36.265 --> 00:58:38.025
<v Speaker 0>And it's a really easy way. Like,

00:58:39.670 --> 00:58:41.910
<v Speaker 0>I mean, that's it. Like, we do that,

00:58:41.910 --> 00:58:44.150
<v Speaker 0>and then this would depend on syntax,

00:58:44.150 --> 00:58:46.150
<v Speaker 0>magically changing them to something that is actually

00:58:46.150 --> 00:58:46.790
<v Speaker 0>useful.

00:58:47.430 --> 00:58:48.310
<v Speaker 0>And so

00:58:48.630 --> 00:58:51.590
<v Speaker 1>version two is still supported. Right? It's still

00:58:51.590 --> 00:58:51.990
<v Speaker 1>current.

00:58:52.655 --> 00:58:55.535
<v Speaker 0>There's still Yeah. It's just they're just desperate.

00:58:56.575 --> 00:58:58.015
<v Speaker 0>I don't think there's been a new two

00:58:58.015 --> 00:58:59.615
<v Speaker 0>point x release in a while,

00:59:00.175 --> 00:59:02.015
<v Speaker 0>but with the open sourcing of the compose

00:59:02.175 --> 00:59:04.255
<v Speaker 0>let's cover a few details here.

00:59:04.655 --> 00:59:06.015
<v Speaker 0>Docker Compose.

00:59:06.015 --> 00:59:06.895
<v Speaker 0>Okay. It's back.

00:59:08.880 --> 00:59:10.880
<v Speaker 0>The best Compose spec website

00:59:11.040 --> 00:59:13.280
<v Speaker 0>only came out this year. And as Docker

00:59:13.280 --> 00:59:15.119
<v Speaker 0>is saying, right, we're we're gonna give up

00:59:15.119 --> 00:59:17.040
<v Speaker 0>control of the spec. I said, no no

00:59:17.040 --> 00:59:18.560
<v Speaker 0>longer something that we want to we want

00:59:18.560 --> 00:59:18.960
<v Speaker 0>to own.

00:59:19.535 --> 00:59:21.295
<v Speaker 0>It's not our IP. We make it available

00:59:21.295 --> 00:59:22.655
<v Speaker 0>to everyone. So now I

00:59:22.975 --> 00:59:24.495
<v Speaker 0>I do think that there

00:59:24.895 --> 00:59:26.815
<v Speaker 0>may be a new four point x that

00:59:26.815 --> 00:59:29.935
<v Speaker 0>is catered for dev and production and Right.

00:59:29.935 --> 00:59:32.095
<v Speaker 0>There may be changes that make this a

00:59:32.095 --> 00:59:32.895
<v Speaker 0>different situation.

00:59:33.300 --> 00:59:34.820
<v Speaker 0>But, unfortunately, for now,

00:59:35.460 --> 00:59:38.100
<v Speaker 0>is that Docker or Docker did still load

00:59:38.100 --> 00:59:40.420
<v Speaker 0>it. And what we've got here is 2.4

00:59:40.420 --> 00:59:43.140
<v Speaker 0>has been updated since, like, 2018,

00:59:43.380 --> 00:59:44.580
<v Speaker 0>not five, four.

00:59:47.305 --> 00:59:49.785
<v Speaker 0>And that's three point spec is continuing to

00:59:49.785 --> 00:59:51.465
<v Speaker 0>evolve, but it has all of that stuff

00:59:51.465 --> 00:59:52.905
<v Speaker 0>for production in it. So if we take

00:59:52.905 --> 00:59:53.785
<v Speaker 0>a look at

00:59:54.345 --> 00:59:55.785
<v Speaker 0>depends on

00:59:58.745 --> 01:00:01.145
<v Speaker 0>right. It's a very simple list where we

01:00:01.145 --> 01:00:02.345
<v Speaker 0>can specify the service.

01:00:03.380 --> 01:00:04.020
<v Speaker 0>However,

01:00:07.540 --> 01:00:08.980
<v Speaker 0>if we change

01:00:10.820 --> 01:00:12.900
<v Speaker 0>how do I get to it? Version two.

01:00:19.695 --> 01:00:21.695
<v Speaker 0>Then we can still have the list. Right?

01:00:21.695 --> 01:00:22.494
<v Speaker 0>So there's a there's

01:00:23.135 --> 01:00:25.375
<v Speaker 0>it works on both. But, however,

01:00:26.095 --> 01:00:28.430
<v Speaker 0>we have this more verbose syntax. Actually, it

01:00:28.430 --> 01:00:29.790
<v Speaker 0>allows us to say we're not just depending

01:00:29.790 --> 01:00:32.430
<v Speaker 0>on the service starting, but we actually want

01:00:32.430 --> 01:00:33.950
<v Speaker 0>to have a condition.

01:00:34.430 --> 01:00:36.030
<v Speaker 0>We will not start

01:00:36.350 --> 01:00:39.630
<v Speaker 0>a web application until a, our DB condition

01:00:39.630 --> 01:00:40.750
<v Speaker 0>is service healthy,

01:00:41.515 --> 01:00:44.555
<v Speaker 0>and Redis is condition service started.

01:00:45.355 --> 01:00:47.355
<v Speaker 0>And that's what we're gonna do here. So

01:00:49.195 --> 01:00:51.675
<v Speaker 1>What's the distinction with started and healthy? Started

01:00:51.675 --> 01:00:54.235
<v Speaker 1>just means it's been the boot started, but

01:00:54.235 --> 01:00:55.994
<v Speaker 1>it might not be ready, might not be

01:00:55.994 --> 01:00:56.395
<v Speaker 1>healthy.

01:00:57.640 --> 01:01:00.920
<v Speaker 0>Yes. So if we do NGINX conversion

01:01:01.720 --> 01:01:02.520
<v Speaker 0>service

01:01:02.520 --> 01:01:03.480
<v Speaker 0>started,

01:01:03.560 --> 01:01:05.880
<v Speaker 0>that's no different than doing that.

01:01:06.200 --> 01:01:07.960
<v Speaker 0>Those those are a problem.

01:01:08.520 --> 01:01:11.484
<v Speaker 1>So that's not gonna stop PHP in from

01:01:11.484 --> 01:01:14.285
<v Speaker 1>booting until NGINX has finished booting. It's just

01:01:14.285 --> 01:01:16.685
<v Speaker 1>gonna make sure NGINX starts up. Yeah. So

01:01:16.685 --> 01:01:18.925
<v Speaker 0>that's their primarily feature of the post naming

01:01:18.925 --> 01:01:19.805
<v Speaker 0>tests.

01:01:19.805 --> 01:01:22.205
<v Speaker 0>PHP will be able to resolve that somehow.

01:01:23.885 --> 01:01:24.365
<v Speaker 0>However,

01:01:25.350 --> 01:01:27.030
<v Speaker 0>for MariaDB,

01:01:28.070 --> 01:01:29.270
<v Speaker 0>that's not gonna hurt.

01:01:29.990 --> 01:01:32.230
<v Speaker 0>What we actually want is serve it,

01:01:32.710 --> 01:01:34.870
<v Speaker 0>help it. Yeah.

01:01:35.590 --> 01:01:36.390
<v Speaker 0>Unfortunately,

01:01:37.525 --> 01:01:39.925
<v Speaker 0>the last time I checked, MariaDB does not

01:01:39.925 --> 01:01:42.005
<v Speaker 0>ship with any health check instead of a

01:01:42.005 --> 01:01:42.885
<v Speaker 0>stock itself.

01:01:43.605 --> 01:01:45.445
<v Speaker 0>So we do excuse me.

01:01:46.085 --> 01:01:46.885
<v Speaker 0>We

01:01:47.525 --> 01:01:48.805
<v Speaker 0>do have to provide a health check,

01:01:49.760 --> 01:01:51.760
<v Speaker 0>and it's as simple as command,

01:01:51.920 --> 01:01:53.440
<v Speaker 0>and we can then

01:01:55.280 --> 01:01:57.520
<v Speaker 0>thank you for that. We can then use

01:01:57.520 --> 01:02:00.160
<v Speaker 0>any command within that container to establish whether

01:02:00.160 --> 01:02:02.125
<v Speaker 0>we think it's healthy or not. So if

01:02:02.125 --> 01:02:05.245
<v Speaker 0>we jump into our MySQL container,

01:02:11.565 --> 01:02:13.405
<v Speaker 0>anything we have available here can be a

01:02:13.405 --> 01:02:15.725
<v Speaker 0>help check on that. I am sure there's

01:02:15.725 --> 01:02:16.765
<v Speaker 0>probably

01:02:17.630 --> 01:02:19.870
<v Speaker 0>some MySQL thing we could use.

01:02:20.110 --> 01:02:21.870
<v Speaker 1>You could just try and connect.

01:02:21.870 --> 01:02:22.430
<v Speaker 1>Right?

01:02:23.870 --> 01:02:25.390
<v Speaker 1>Connect to the local host.

01:02:26.990 --> 01:02:27.950
<v Speaker 0>We could.

01:02:29.065 --> 01:02:30.905
<v Speaker 0>Don't wanna do it with the MyoScale command

01:02:30.905 --> 01:02:32.665
<v Speaker 0>because it will put me into some sort

01:02:32.665 --> 01:02:34.905
<v Speaker 0>of shell. So what we can do is

01:02:34.985 --> 01:02:37.145
<v Speaker 0>because this is batch, batch does some really

01:02:37.145 --> 01:02:39.785
<v Speaker 0>funky tricks around TCP

01:02:39.865 --> 01:02:42.425
<v Speaker 0>where we can actually do echo

01:02:47.970 --> 01:02:49.410
<v Speaker 0>Let's just say, hi,

01:02:49.650 --> 01:02:50.210
<v Speaker 0>dev.

01:02:50.690 --> 01:02:51.490
<v Speaker 0>Net.

01:02:51.730 --> 01:02:54.369
<v Speaker 0>I'm gonna get this wrong. 3306.

01:02:57.185 --> 01:02:58.625
<v Speaker 0>Yeah. It's gonna get it wrong.

01:03:02.145 --> 01:03:03.025
<v Speaker 0>Figure it.

01:03:03.665 --> 01:03:05.185
<v Speaker 1>That's good. That's good.

01:03:07.665 --> 01:03:09.825
<v Speaker 1>Actually had a problem once where

01:03:10.430 --> 01:03:12.190
<v Speaker 1>we the health check was trying to connect

01:03:12.190 --> 01:03:13.870
<v Speaker 1>internally in the MySQL

01:03:14.830 --> 01:03:15.630
<v Speaker 1>container,

01:03:15.630 --> 01:03:18.030
<v Speaker 1>and it was connecting, but it wasn't yet

01:03:18.030 --> 01:03:19.550
<v Speaker 1>accepting network

01:03:20.510 --> 01:03:21.310
<v Speaker 1>connections.

01:03:22.590 --> 01:03:24.830
<v Speaker 1>So it's it's accepting socket connections locally,

01:03:26.095 --> 01:03:27.535
<v Speaker 1>but it wasn't accepting

01:03:28.175 --> 01:03:30.655
<v Speaker 1>connections around through the through the ports. Ports

01:03:30.655 --> 01:03:31.935
<v Speaker 1>weren't exposed yet.

01:03:36.255 --> 01:03:37.695
<v Speaker 0>So it there we go.

01:03:39.260 --> 01:03:41.100
<v Speaker 0>So that's only works with bash. It doesn't

01:03:41.100 --> 01:03:42.780
<v Speaker 0>work with other shells,

01:03:44.140 --> 01:03:45.820
<v Speaker 0>which is okay if I'm really deep because

01:03:45.820 --> 01:03:47.100
<v Speaker 0>we have access to bash. But you can

01:03:47.100 --> 01:03:49.100
<v Speaker 0>see that if we try and echo anything,

01:03:49.500 --> 01:03:51.980
<v Speaker 0>they have TCP localhost and then the port

01:03:51.980 --> 01:03:54.060
<v Speaker 0>number as

01:03:53.335 --> 01:03:54.615
<v Speaker 0>batch will do a check to see if

01:03:54.615 --> 01:03:56.695
<v Speaker 0>that port is accepting any sort of traffic.

01:03:58.215 --> 01:03:59.895
<v Speaker 0>When we do three c o seven, a

01:03:59.895 --> 01:04:01.815
<v Speaker 0>port that we know doesn't exist, we get

01:04:01.815 --> 01:04:02.775
<v Speaker 0>this failure.

01:04:04.055 --> 01:04:05.975
<v Speaker 0>Because it's batch, we have an exit code

01:04:05.975 --> 01:04:07.575
<v Speaker 0>which is non veto, and we can use

01:04:07.575 --> 01:04:09.700
<v Speaker 0>that as a really rudimentary object.

01:04:09.940 --> 01:04:11.620
<v Speaker 0>Now we're doing that for quickness and kinda

01:04:11.620 --> 01:04:12.500
<v Speaker 0>speak right

01:04:12.900 --> 01:04:15.140
<v Speaker 0>now. But if we wanted to, we could

01:04:15.140 --> 01:04:17.700
<v Speaker 0>easily use something more sophisticated.

01:04:17.780 --> 01:04:19.780
<v Speaker 0>We probably could do a MySQL

01:04:19.780 --> 01:04:21.540
<v Speaker 0>port one

01:04:21.540 --> 01:04:22.340
<v Speaker 0>to seven.

01:04:23.495 --> 01:04:26.055
<v Speaker 0>That's root that password,

01:04:27.095 --> 01:04:29.015
<v Speaker 0>and then passing a query,

01:04:29.335 --> 01:04:29.975
<v Speaker 0>like,

01:04:30.295 --> 01:04:31.255
<v Speaker 0>databases.

01:04:31.495 --> 01:04:33.095
<v Speaker 0>Yeah. That would all be get on the

01:04:33.095 --> 01:04:35.015
<v Speaker 0>calendar that it was healthy. This is what

01:04:35.015 --> 01:04:37.640
<v Speaker 1>we're doing, but there's a problem with it.

01:04:37.640 --> 01:04:40.040
<v Speaker 1>It's like it'll

01:04:40.040 --> 01:04:41.640
<v Speaker 1>still use the local socket rather than the

01:04:41.640 --> 01:04:42.920
<v Speaker 1>network if it's present.

01:04:43.160 --> 01:04:44.680
<v Speaker 1>Something crazy like that.

01:04:45.000 --> 01:04:47.080
<v Speaker 1>So we found it unreliable, basically.

01:04:48.200 --> 01:04:48.520
<v Speaker 0>Yeah.

01:04:49.135 --> 01:04:52.335
<v Speaker 0>As my MariaDB and mySQL knowledge was just

01:04:52.335 --> 01:04:54.015
<v Speaker 0>a little bit better, I would go with

01:04:54.015 --> 01:04:55.855
<v Speaker 0>that approach because it gets me a more

01:04:55.855 --> 01:04:57.535
<v Speaker 0>holistic view of whether it's healthy or not

01:04:57.535 --> 01:04:59.055
<v Speaker 0>and not just a port being open.

01:04:59.455 --> 01:04:59.935
<v Speaker 0>But

01:05:00.830 --> 01:05:03.150
<v Speaker 0>it doesn't have to be perfect. So What

01:05:03.150 --> 01:05:06.030
<v Speaker 0>should happen with Meridian Meridian b should ship

01:05:06.030 --> 01:05:07.630
<v Speaker 1>ship with a health check. Right?

01:05:08.270 --> 01:05:09.470
<v Speaker 1>That would be the ideal solution.

01:05:13.115 --> 01:05:15.674
<v Speaker 0>The main thing I would want MariaDB to

01:05:15.674 --> 01:05:17.195
<v Speaker 0>ship with something that

01:05:17.755 --> 01:05:21.035
<v Speaker 0>allowed me to do my SQL test connection

01:05:21.275 --> 01:05:22.954
<v Speaker 0>like that. I know I I'm not a

01:05:22.954 --> 01:05:24.395
<v Speaker 0>big fan of health tech and system within

01:05:24.395 --> 01:05:25.275
<v Speaker 0>the Dockerfile.

01:05:25.275 --> 01:05:27.275
<v Speaker 0>I'm sorry. I do I do think we

01:05:27.275 --> 01:05:29.230
<v Speaker 0>should live as part of the Kubernetes manifest

01:05:29.230 --> 01:05:30.270
<v Speaker 0>or something else.

01:05:30.910 --> 01:05:32.589
<v Speaker 0>Or even in the Docker post file for

01:05:32.589 --> 01:05:34.430
<v Speaker 0>development because, again, my health checks in dev

01:05:34.430 --> 01:05:36.190
<v Speaker 0>and production are gonna be very different.

01:05:36.509 --> 01:05:37.070
<v Speaker 0>I

01:05:37.630 --> 01:05:39.869
<v Speaker 0>don't think they're always gonna be ubiquitous.

01:05:40.605 --> 01:05:42.605
<v Speaker 0>So we're MySQL just having some sort of

01:05:42.605 --> 01:05:45.405
<v Speaker 0>check, help, test command that ensures the database

01:05:45.405 --> 01:05:47.165
<v Speaker 0>is ready is ideally what I'd want to

01:05:47.165 --> 01:05:48.605
<v Speaker 0>see here. Yep.

01:05:49.005 --> 01:05:51.085
<v Speaker 0>Alright. For now, we're gonna do echo

01:05:55.630 --> 01:05:58.270
<v Speaker 0>f p two p, little so forth, p

01:05:58.270 --> 01:06:00.190
<v Speaker 0>p. And we're gonna make this fail to

01:06:00.190 --> 01:06:01.470
<v Speaker 0>show that it works.

01:06:02.110 --> 01:06:04.510
<v Speaker 0>But right now, this will never ever get

01:06:04.510 --> 01:06:04.830
<v Speaker 0>healthy.

01:06:08.145 --> 01:06:10.225
<v Speaker 0>Makes sense? Mhmm. Right.

01:06:11.345 --> 01:06:12.865
<v Speaker 0>Let's set an interval.

01:06:13.985 --> 01:06:15.585
<v Speaker 0>Run this every one second.

01:06:15.665 --> 01:06:16.305
<v Speaker 0>Boom.

01:06:16.625 --> 01:06:17.025
<v Speaker 0>Internal.

01:06:21.839 --> 01:06:24.079
<v Speaker 0>We're gonna spend all this time. Actually, I'm

01:06:24.079 --> 01:06:26.079
<v Speaker 0>just gonna destroy it. Everything

01:06:27.440 --> 01:06:30.160
<v Speaker 0>oh, no. It's not command. It is test.

01:06:32.640 --> 01:06:33.200
<v Speaker 0>Okay.

01:06:34.135 --> 01:06:36.215
<v Speaker 0>So we're gonna spin this up. Now what

01:06:36.215 --> 01:06:36.855
<v Speaker 0>should happen

01:06:37.975 --> 01:06:39.655
<v Speaker 0>I'm gonna spin this up in the background,

01:06:39.655 --> 01:06:41.575
<v Speaker 0>and then we're gonna run a Docker PS

01:06:41.575 --> 01:06:43.095
<v Speaker 0>and try and see if we can understand

01:06:43.095 --> 01:06:44.455
<v Speaker 0>what's going on. So

01:06:46.055 --> 01:06:47.815
<v Speaker 0>you can see it starts from really the

01:06:47.815 --> 01:06:49.415
<v Speaker 0>first, then into next,

01:06:50.490 --> 01:06:51.130
<v Speaker 0>and

01:06:51.930 --> 01:06:54.490
<v Speaker 0>our PHP container is not healthy.

01:06:56.250 --> 01:06:58.650
<v Speaker 1>I was just looking at the MariaDB documentation.

01:06:58.650 --> 01:06:59.530
<v Speaker 1>It says

01:07:02.325 --> 01:07:04.484
<v Speaker 1>it will not accept incoming connections until the

01:07:04.484 --> 01:07:06.885
<v Speaker 1>initialization completes. This may cause issues

01:07:07.205 --> 01:07:09.365
<v Speaker 1>when using tools like Docker Compose.

01:07:10.484 --> 01:07:11.285
<v Speaker 1>Great.

01:07:11.845 --> 01:07:13.605
<v Speaker 1>So they they're they're not shipping a health

01:07:13.605 --> 01:07:13.845
<v Speaker 1>check.

01:07:15.250 --> 01:07:16.930
<v Speaker 0>But that's good. The fact that they won't

01:07:16.930 --> 01:07:18.609
<v Speaker 0>accept that connection is how the database is

01:07:18.609 --> 01:07:20.369
<v Speaker 0>healthy means that our rudimentary

01:07:20.369 --> 01:07:22.690
<v Speaker 0>track on the port will actually be really

01:07:22.690 --> 01:07:24.609
<v Speaker 0>good. So Yeah. Yeah.

01:07:25.089 --> 01:07:26.529
<v Speaker 1>Good point. Now you can see I failed

01:07:26.529 --> 01:07:28.130
<v Speaker 0>to bring up the project. That's because

01:07:29.255 --> 01:07:30.375
<v Speaker 0>MariaDB

01:07:30.455 --> 01:07:31.975
<v Speaker 0>is still unhealthy,

01:07:34.055 --> 01:07:35.175
<v Speaker 0>and it cuts out.

01:07:37.095 --> 01:07:38.295
<v Speaker 0>If we change this,

01:07:42.470 --> 01:07:44.150
<v Speaker 0>Put everything back up.

01:07:47.750 --> 01:07:50.789
<v Speaker 0>It's waiting on MariaDB. Oh, maybe my one

01:07:50.789 --> 01:07:53.670
<v Speaker 0>second is maybe too quick. That's actually not

01:07:53.829 --> 01:07:55.109
<v Speaker 0>getting help in thing now.

01:07:56.405 --> 01:07:57.205
<v Speaker 1>Okay?

01:07:57.445 --> 01:07:59.765
<v Speaker 1>Oh, so it waits it waits initially for

01:07:59.765 --> 01:08:01.445
<v Speaker 1>that period before checking?

01:08:02.565 --> 01:08:04.805
<v Speaker 0>It will wait three of those, I believe.

01:08:05.045 --> 01:08:06.805
<v Speaker 0>Three. And so if we look at the

01:08:06.805 --> 01:08:07.605
<v Speaker 0>specs

01:08:10.240 --> 01:08:12.079
<v Speaker 0>So we have access to

01:08:16.080 --> 01:08:18.239
<v Speaker 0>oh, no. Here we go. So we got

01:08:18.239 --> 01:08:20.479
<v Speaker 0>test, we got interval,

01:08:21.040 --> 01:08:23.120
<v Speaker 0>and oh, yeah. We try. Okay.

01:08:26.064 --> 01:08:28.304
<v Speaker 0>I still can't bring up my projects.

01:08:32.865 --> 01:08:35.425
<v Speaker 0>Does MariaDB take more than fifteen seconds?

01:08:35.665 --> 01:08:37.185
<v Speaker 1>Do you need to give a parameter to

01:08:37.185 --> 01:08:37.585
<v Speaker 1>echo?

01:08:40.960 --> 01:08:42.639
<v Speaker 0>We shouldn't have to. No.

01:08:45.520 --> 01:08:47.359
<v Speaker 0>So it's still unhealthy. So that is actually

01:08:47.359 --> 01:08:49.279
<v Speaker 0>failing. Now I think the reason ah, yeah.

01:08:49.279 --> 01:08:50.080
<v Speaker 0>This will be Shell.

01:08:50.615 --> 01:08:52.854
<v Speaker 0>We can't specify that here. Okay.

01:08:54.535 --> 01:08:56.055
<v Speaker 0>We can copy this.

01:08:58.055 --> 01:09:01.175
<v Speaker 0>Oh, that's close. Actually, what we want is

01:09:01.175 --> 01:09:02.055
<v Speaker 0>test

01:09:03.255 --> 01:09:04.455
<v Speaker 0>and

01:09:05.920 --> 01:09:07.359
<v Speaker 0>we'll do bash

01:09:07.439 --> 01:09:08.559
<v Speaker 0>dot c

01:09:09.199 --> 01:09:11.760
<v Speaker 0>and then do echo dev piece of p

01:09:11.760 --> 01:09:12.800
<v Speaker 0>and report.

01:09:12.800 --> 01:09:13.840
<v Speaker 0>We'll do fix.

01:09:16.585 --> 01:09:19.064
<v Speaker 0>We're actually saying use batch because we have

01:09:19.064 --> 01:09:20.425
<v Speaker 0>to have a batch shell for for this

01:09:20.425 --> 01:09:22.585
<v Speaker 0>to work. I run a command, and then

01:09:22.585 --> 01:09:24.264
<v Speaker 0>that should give us the export that we

01:09:24.264 --> 01:09:24.824
<v Speaker 0>need.

01:09:25.704 --> 01:09:26.665
<v Speaker 0>Let's try that again.

01:09:41.250 --> 01:09:41.650
<v Speaker 0>Hey.

01:09:44.625 --> 01:09:46.784
<v Speaker 0>So we did see. I think it's a

01:09:46.784 --> 01:09:47.344
<v Speaker 0>question.

01:09:48.545 --> 01:09:50.465
<v Speaker 0>Our engine access failing. We'll fix that. I

01:09:50.465 --> 01:09:51.665
<v Speaker 0>don't know I don't know why that is.

01:09:51.665 --> 01:09:53.024
<v Speaker 1>So we didn't have the health check. They'd

01:09:53.024 --> 01:09:54.064
<v Speaker 1>have started in parallel. Right?

01:09:56.020 --> 01:09:57.940
<v Speaker 0>They would have started in parallel. Instead, we

01:09:57.940 --> 01:09:59.780
<v Speaker 0>were able to defer the start of the

01:09:59.780 --> 01:10:02.580
<v Speaker 0>p to p container and tell MariaDB was

01:10:02.580 --> 01:10:03.860
<v Speaker 0>actually out there.

01:10:04.580 --> 01:10:05.219
<v Speaker 0>Mhmm.

01:10:05.460 --> 01:10:08.340
<v Speaker 0>So NGINX failed because

01:10:13.955 --> 01:10:16.114
<v Speaker 0>that

01:10:17.555 --> 01:10:18.594
<v Speaker 0>was working.

01:10:19.555 --> 01:10:21.875
<v Speaker 0>Ah, so now so engine actually there we

01:10:21.875 --> 01:10:23.475
<v Speaker 0>go. There's the reason that we need the

01:10:23.475 --> 01:10:24.995
<v Speaker 0>the service starting.

01:10:26.000 --> 01:10:29.520
<v Speaker 0>Engine x cannot resolve upstream FPM connection PHP

01:10:29.520 --> 01:10:31.199
<v Speaker 0>because we got our dependencies a long way

01:10:31.199 --> 01:10:31.760
<v Speaker 0>around.

01:10:32.000 --> 01:10:32.639
<v Speaker 0>Yes.

01:10:34.960 --> 01:10:36.880
<v Speaker 1>What happens if you put them both

01:10:37.199 --> 01:10:37.679
<v Speaker 1>no.

01:10:38.160 --> 01:10:39.760
<v Speaker 0>It's like, like, dependency would fail.

01:10:40.965 --> 01:10:43.765
<v Speaker 0>But actually, what we're saying is PHP container

01:10:43.765 --> 01:10:45.765
<v Speaker 0>has to be started, which means the DNS

01:10:45.765 --> 01:10:48.485
<v Speaker 0>can be resolved before it interacts starts.

01:10:49.125 --> 01:10:51.445
<v Speaker 0>Now we'll get a completely healthy system.

01:10:56.210 --> 01:10:56.929
<v Speaker 0>Alright.

01:10:57.330 --> 01:10:58.449
<v Speaker 0>Happy with that.

01:10:59.410 --> 01:11:00.290
<v Speaker 0>Alright.

01:11:00.930 --> 01:11:02.369
<v Speaker 0>So I ship this to production.

01:11:03.330 --> 01:11:03.810
<v Speaker 1>Okay.

01:11:06.705 --> 01:11:08.945
<v Speaker 1>So So it's like Heroku

01:11:08.945 --> 01:11:09.905
<v Speaker 1>Go or something.

01:11:10.945 --> 01:11:13.825
<v Speaker 0>No. We're gonna add a Docker file. And

01:11:15.105 --> 01:11:16.945
<v Speaker 0>we're gonna leverage

01:11:17.185 --> 01:11:19.345
<v Speaker 0>the build cache to make sure that we

01:11:19.345 --> 01:11:19.985
<v Speaker 0>can

01:11:20.200 --> 01:11:22.520
<v Speaker 0>we only ever do the composer install once

01:11:23.400 --> 01:11:25.560
<v Speaker 0>until we change composer dot JSON.

01:11:25.720 --> 01:11:28.360
<v Speaker 0>We also we're gonna use multi layers. So

01:11:28.360 --> 01:11:31.560
<v Speaker 0>there's a really frustrating thing at the PHP

01:11:31.560 --> 01:11:32.760
<v Speaker 0>images first.

01:11:33.800 --> 01:11:34.840
<v Speaker 0>If we do seven,

01:11:35.775 --> 01:11:37.775
<v Speaker 0>I'll find FPM.

01:11:37.855 --> 01:11:40.735
<v Speaker 0>We copy our composer dot JSON.

01:11:46.495 --> 01:11:48.255
<v Speaker 0>And when it's that working there, it's slash

01:11:48.255 --> 01:11:51.040
<v Speaker 0>app. It copies this to slash app, and

01:11:51.040 --> 01:11:53.520
<v Speaker 0>then I say run, compiler install.

01:11:55.200 --> 01:11:56.480
<v Speaker 0>This will not work

01:11:57.040 --> 01:11:59.280
<v Speaker 0>because the PHP images do not ship for

01:11:59.280 --> 01:12:00.080
<v Speaker 0>Composer.

01:12:00.560 --> 01:12:02.320
<v Speaker 0>I find that just ridiculous.

01:12:02.795 --> 01:12:05.195
<v Speaker 0>Like, people do not develop PHP beside Composer

01:12:05.195 --> 01:12:08.635
<v Speaker 0>anymore. Right? People do. People don't.

01:12:08.795 --> 01:12:09.514
<v Speaker 0>I

01:12:09.994 --> 01:12:11.275
<v Speaker 0>can give you names.

01:12:11.675 --> 01:12:13.275
<v Speaker 0>No. I don't want names. Just agree with

01:12:13.275 --> 01:12:14.155
<v Speaker 0>me. So

01:12:15.830 --> 01:12:18.230
<v Speaker 1>It's also a different organization. Right? Compose is

01:12:18.230 --> 01:12:18.710
<v Speaker 1>a

01:12:19.830 --> 01:12:21.510
<v Speaker 1>separate group of people.

01:12:21.830 --> 01:12:23.590
<v Speaker 0>I do understand that. It's it's it's not

01:12:23.590 --> 01:12:25.350
<v Speaker 0>part of the core PHP group and all

01:12:25.350 --> 01:12:26.790
<v Speaker 0>that. And also, to be honest, I don't

01:12:26.790 --> 01:12:28.870
<v Speaker 0>want Compose on my production image. So there's

01:12:28.950 --> 01:12:30.390
<v Speaker 0>that that has a a good thing to

01:12:30.390 --> 01:12:31.590
<v Speaker 0>it too. But

01:12:31.965 --> 01:12:33.965
<v Speaker 0>it makes you know, from a new person

01:12:33.965 --> 01:12:36.525
<v Speaker 0>that adopting containers and that's gonna work for

01:12:36.525 --> 01:12:39.005
<v Speaker 0>not having that available, it's probably annoying.

01:12:39.165 --> 01:12:40.765
<v Speaker 0>So what we're gonna do is we're gonna

01:12:40.765 --> 01:12:43.725
<v Speaker 0>say, let's have a development or build image.

01:12:44.340 --> 01:12:45.139
<v Speaker 0>Mhmm.

01:12:45.699 --> 01:12:48.900
<v Speaker 0>And I'm gonna copy from the composer image.

01:12:50.020 --> 01:12:51.459
<v Speaker 1>You mean copy. Right?

01:12:52.980 --> 01:12:53.619
<v Speaker 1>Not from

01:12:54.980 --> 01:12:56.019
<v Speaker 0>Got it.

01:12:57.540 --> 01:13:00.185
<v Speaker 0>I'm gonna do that. Then I'm gonna do

01:13:00.185 --> 01:13:01.625
<v Speaker 0>my seven

01:13:04.105 --> 01:13:05.065
<v Speaker 0>Alpine.

01:13:08.665 --> 01:13:11.465
<v Speaker 0>We want our build image. So from build

01:13:11.465 --> 01:13:12.425
<v Speaker 0>as

01:13:13.800 --> 01:13:14.760
<v Speaker 0>we'll call this

01:13:16.840 --> 01:13:19.400
<v Speaker 0>okay. I'm super cute. Call the top one,

01:13:19.400 --> 01:13:20.280
<v Speaker 1>like, base.

01:13:20.679 --> 01:13:21.559
<v Speaker 0>Base.

01:13:21.560 --> 01:13:22.439
<v Speaker 0>Good call.

01:13:23.000 --> 01:13:24.519
<v Speaker 0>From base as build.

01:13:25.320 --> 01:13:26.760
<v Speaker 0>You you knew what I was trying to

01:13:26.760 --> 01:13:28.685
<v Speaker 0>do? That is why you're here. And you

01:13:28.685 --> 01:13:30.525
<v Speaker 0>want the copy to be after build in

01:13:30.525 --> 01:13:31.645
<v Speaker 1>the in the build?

01:13:33.805 --> 01:13:35.725
<v Speaker 0>So this base image is just something that

01:13:35.725 --> 01:13:37.005
<v Speaker 0>I can use as a base for the

01:13:37.005 --> 01:13:38.365
<v Speaker 0>tools that I need. So I'm just adding

01:13:38.365 --> 01:13:39.805
<v Speaker 0>Composer to PHP.

01:13:39.805 --> 01:13:41.965
<v Speaker 0>Then in the build, I'm gonna copy and

01:13:41.965 --> 01:13:44.190
<v Speaker 0>compose the JSON. We'll do the installation.

01:13:44.350 --> 01:13:44.990
<v Speaker 1>Okay.

01:13:46.590 --> 01:13:48.350
<v Speaker 0>Can you I just probably thought that's kind

01:13:48.350 --> 01:13:49.070
<v Speaker 0>of agile.

01:13:49.470 --> 01:13:52.030
<v Speaker 1>How tight would you be about the versions

01:13:52.030 --> 01:13:53.230
<v Speaker 1>of everything? I know we'd

01:13:54.990 --> 01:13:56.510
<v Speaker 1>in real life, would you be

01:13:57.385 --> 01:13:59.385
<v Speaker 1>specifying a point release of PHP?

01:13:59.465 --> 01:14:00.985
<v Speaker 0>Yeah. I probably would.

01:14:01.145 --> 01:14:03.785
<v Speaker 0>I would. So do that.

01:14:05.065 --> 01:14:05.864
<v Speaker 0>Point.

01:14:06.825 --> 01:14:08.745
<v Speaker 0>And what what I like about this approach

01:14:08.745 --> 01:14:10.505
<v Speaker 0>is I can now use this

01:14:12.099 --> 01:14:12.820
<v Speaker 0>here.

01:14:13.139 --> 01:14:14.900
<v Speaker 0>But I've only got this defined once. You

01:14:14.900 --> 01:14:16.980
<v Speaker 0>know, there's there could very easily be a

01:14:16.980 --> 01:14:18.260
<v Speaker 0>version of PIVENCYR,

01:14:18.579 --> 01:14:20.340
<v Speaker 0>and then I wouldn't know what I'm doing.

01:14:20.340 --> 01:14:21.860
<v Speaker 0>So I could say build

01:14:23.364 --> 01:14:25.605
<v Speaker 0>Docker file. We don't need to specify because

01:14:25.605 --> 01:14:27.205
<v Speaker 0>it's in a default location. We need a

01:14:27.205 --> 01:14:28.005
<v Speaker 0>context.

01:14:28.244 --> 01:14:30.324
<v Speaker 0>And because this is multilayer, we need a

01:14:30.324 --> 01:14:32.085
<v Speaker 0>target, and I could say use the base

01:14:32.085 --> 01:14:33.764
<v Speaker 0>image to run this in dev.

01:14:34.085 --> 01:14:36.244
<v Speaker 0>If I really want to add extra stuff

01:14:36.244 --> 01:14:37.125
<v Speaker 0>to the dev version,

01:14:37.820 --> 01:14:39.739
<v Speaker 0>I could then extend base here

01:14:41.260 --> 01:14:43.020
<v Speaker 0>with dev, and I could add my dev

01:14:43.020 --> 01:14:45.260
<v Speaker 0>tooling. So and it's really common to say,

01:14:45.260 --> 01:14:48.060
<v Speaker 0>let's have a k add update and say

01:14:48.060 --> 01:14:48.540
<v Speaker 0>I need.

01:14:50.155 --> 01:14:51.195
<v Speaker 0>XD book.

01:14:51.595 --> 01:14:53.515
<v Speaker 0>XD book. Okay. I don't think that's an

01:14:53.515 --> 01:14:55.195
<v Speaker 0>app. But I don't think it's an alpha

01:14:55.195 --> 01:14:57.115
<v Speaker 0>and repository. Yeah. That that would work. So

01:14:57.835 --> 01:15:00.795
<v Speaker 1>And often in different environment variables and thing

01:15:00.875 --> 01:15:02.235
<v Speaker 1>I know you do that in the Compose.

01:15:03.270 --> 01:15:04.870
<v Speaker 1>So I would put the compose a copy

01:15:04.870 --> 01:15:05.670
<v Speaker 1>inside

01:15:05.830 --> 01:15:07.350
<v Speaker 1>just the build image because I don't want

01:15:07.350 --> 01:15:08.310
<v Speaker 1>that in my base.

01:15:10.310 --> 01:15:12.310
<v Speaker 0>If I'm gonna use base for development,

01:15:12.710 --> 01:15:13.590
<v Speaker 0>I will.

01:15:14.630 --> 01:15:17.585
<v Speaker 1>I don't want compose with my dev container

01:15:17.585 --> 01:15:18.465
<v Speaker 1>necessarily.

01:15:18.465 --> 01:15:20.545
<v Speaker 1>You're be running Composer in your image?

01:15:21.185 --> 01:15:22.224
<v Speaker 1>In your container?

01:15:23.985 --> 01:15:25.744
<v Speaker 0>For a local developer? Yes.

01:15:26.065 --> 01:15:28.385
<v Speaker 1>You're gonna, like well, that's not the way

01:15:28.385 --> 01:15:29.425
<v Speaker 1>I do it, but you're gonna be doing

01:15:29.425 --> 01:15:31.344
<v Speaker 1>exec Composer install

01:15:32.600 --> 01:15:35.159
<v Speaker 1>on the dev on the running dev container?

01:15:35.560 --> 01:15:37.640
<v Speaker 0>Okay. So this is this is where the

01:15:37.640 --> 01:15:39.080
<v Speaker 0>way I work is a bit different to

01:15:39.080 --> 01:15:40.280
<v Speaker 0>most people. So

01:15:41.640 --> 01:15:43.560
<v Speaker 0>some people will run composer install on their

01:15:43.560 --> 01:15:45.640
<v Speaker 0>local machine. I'm very much against that because

01:15:45.640 --> 01:15:47.800
<v Speaker 0>what happens there is you have to do

01:15:49.204 --> 01:15:49.844
<v Speaker 0>no

01:15:51.605 --> 01:15:52.485
<v Speaker 0>prereq

01:15:52.485 --> 01:15:54.565
<v Speaker 0>check something. There's a flag that you can

01:15:54.565 --> 01:15:56.565
<v Speaker 0>pass it to say, don't check for prerequisites

01:15:56.565 --> 01:15:59.125
<v Speaker 0>on the whole, like, PHP extensions. Get a

01:15:59.125 --> 01:15:59.764
<v Speaker 0>really good example.

01:16:00.960 --> 01:16:01.840
<v Speaker 0>What

01:16:02.160 --> 01:16:03.760
<v Speaker 0>I generally do is provide a make file

01:16:03.760 --> 01:16:05.520
<v Speaker 0>with a target called b shell, and that

01:16:05.520 --> 01:16:07.200
<v Speaker 0>puts me inside of the container, and I

01:16:07.200 --> 01:16:09.520
<v Speaker 0>work locally that way. Right.

01:16:10.640 --> 01:16:11.360
<v Speaker 1>Because

01:16:11.920 --> 01:16:13.520
<v Speaker 1>it's quite rare like you said, it's quite

01:16:13.520 --> 01:16:15.200
<v Speaker 1>rare to edit Compose JSON

01:16:16.295 --> 01:16:17.815
<v Speaker 1>at at at a certain point in the

01:16:17.815 --> 01:16:19.415
<v Speaker 1>project. You're not you're not really editing it

01:16:19.415 --> 01:16:21.415
<v Speaker 1>very often. I would rebuild

01:16:21.975 --> 01:16:23.735
<v Speaker 1>when I edited it. I I just sort

01:16:23.735 --> 01:16:25.815
<v Speaker 1>of remember to rebuild or do a make

01:16:25.815 --> 01:16:27.015
<v Speaker 1>file that rebuilds it.

01:16:27.975 --> 01:16:28.855
<v Speaker 0>Okay.

01:16:30.079 --> 01:16:32.000
<v Speaker 0>I think let's finish off this Dockerfile, and

01:16:32.000 --> 01:16:33.599
<v Speaker 0>then we'll show how that that step works

01:16:33.599 --> 01:16:34.479
<v Speaker 0>then. So

01:16:35.920 --> 01:16:37.920
<v Speaker 1>Do you wanna build it now? Check it

01:16:37.920 --> 01:16:39.039
<v Speaker 1>works? Yeah. So

01:16:40.800 --> 01:16:42.079
<v Speaker 0>we have we had just have a couple

01:16:42.079 --> 01:16:43.965
<v Speaker 0>of comments based on that conversation there. So

01:16:43.965 --> 01:16:46.844
<v Speaker 0>we've got one saying someone at Mark,

01:16:47.645 --> 01:16:49.805
<v Speaker 0>who says, I would run Composer and the

01:16:49.805 --> 01:16:51.645
<v Speaker 0>container. You may have multiple projects for multiple

01:16:51.645 --> 01:16:52.685
<v Speaker 0>Compose. Mean,

01:16:52.925 --> 01:16:55.565
<v Speaker 0>I would definitely run that container too, and

01:16:55.725 --> 01:16:57.885
<v Speaker 0>we get power team CI. I think that's

01:16:57.885 --> 01:17:01.420
<v Speaker 0>so important. Like, me running make bells locally

01:17:01.420 --> 01:17:03.260
<v Speaker 0>should be the same as my my CI.

01:17:03.260 --> 01:17:05.180
<v Speaker 0>There should be no distinction between those two.

01:17:05.180 --> 01:17:05.580
<v Speaker 0>Yeah.

01:17:06.540 --> 01:17:09.260
<v Speaker 0>Okay. So we got front bell as prod.

01:17:10.540 --> 01:17:12.460
<v Speaker 0>And now we want to do our production

01:17:12.460 --> 01:17:14.060
<v Speaker 0>image is gonna be

01:17:15.744 --> 01:17:16.704
<v Speaker 1>Base?

01:17:19.344 --> 01:17:21.824
<v Speaker 0>We didn't finish the build. Copy

01:17:21.824 --> 01:17:22.704
<v Speaker 0>everything

01:17:24.945 --> 01:17:25.905
<v Speaker 0>to that.

01:17:26.784 --> 01:17:28.385
<v Speaker 0>That's the And then

01:17:29.200 --> 01:17:30.560
<v Speaker 0>have so

01:17:38.720 --> 01:17:39.760
<v Speaker 0>we want our base.

01:17:40.635 --> 01:17:42.635
<v Speaker 0>F is gonna have a composure.

01:17:42.795 --> 01:17:44.954
<v Speaker 0>We're gonna use a dev image as our

01:17:44.954 --> 01:17:46.074
<v Speaker 0>base for building,

01:17:47.195 --> 01:17:48.635
<v Speaker 0>and then we use a base image for

01:17:48.635 --> 01:17:49.434
<v Speaker 0>production.

01:17:51.514 --> 01:17:53.195
<v Speaker 0>And what we do here is we'd say

01:17:53.195 --> 01:17:55.434
<v Speaker 0>copy all of our build artifacts

01:17:55.434 --> 01:17:56.235
<v Speaker 0>from build

01:17:58.949 --> 01:18:00.070
<v Speaker 0>like that.

01:18:01.030 --> 01:18:01.749
<v Speaker 0>Okay.

01:18:03.670 --> 01:18:04.550
<v Speaker 0>We can

01:18:04.869 --> 01:18:07.270
<v Speaker 0>Yeah. That work towards here, so it only

01:18:07.270 --> 01:18:08.229
<v Speaker 0>happens once.

01:18:08.550 --> 01:18:10.630
<v Speaker 0>So we no longer we no longer have

01:18:10.630 --> 01:18:11.110
<v Speaker 1>the

01:18:11.575 --> 01:18:12.455
<v Speaker 1>Composer

01:18:13.095 --> 01:18:14.135
<v Speaker 1>installer

01:18:14.215 --> 01:18:16.055
<v Speaker 1>on prod, is where I thought we were

01:18:16.055 --> 01:18:16.614
<v Speaker 0>going.

01:18:17.015 --> 01:18:18.695
<v Speaker 0>Got it. We've taken the Composer install out

01:18:18.695 --> 01:18:20.054
<v Speaker 0>of our production image.

01:18:21.015 --> 01:18:23.095
<v Speaker 0>And as far as command goes, I can't

01:18:23.095 --> 01:18:25.175
<v Speaker 0>remember the FPM syntax.

01:18:25.415 --> 01:18:25.655
<v Speaker 0>Why

01:18:26.320 --> 01:18:27.760
<v Speaker 1>why are you specifying it?

01:18:29.440 --> 01:18:32.080
<v Speaker 1>Why are you overriding the base images? Is

01:18:32.080 --> 01:18:34.239
<v Speaker 1>that a best practice you think?

01:18:34.640 --> 01:18:36.160
<v Speaker 0>K. You're right. I can just take that

01:18:36.160 --> 01:18:36.480
<v Speaker 0>here.

01:18:38.835 --> 01:18:41.235
<v Speaker 0>That's what I expect by default. Yeah. Yeah.

01:18:41.235 --> 01:18:42.355
<v Speaker 0>Okay. Okay.

01:18:43.555 --> 01:18:44.675
<v Speaker 0>So what does this mean?

01:18:48.035 --> 01:18:49.235
<v Speaker 1>On the on

01:18:49.475 --> 01:18:50.915
<v Speaker 1>line 13, you want one of them to

01:18:50.915 --> 01:18:52.995
<v Speaker 1>say do you want to copy Compose a

01:18:52.995 --> 01:18:53.555
<v Speaker 1>lock as well?

01:18:56.250 --> 01:18:57.130
<v Speaker 0>No.

01:18:57.130 --> 01:18:59.050
<v Speaker 0>I don't commit my lock fails. I I

01:18:59.050 --> 01:19:01.210
<v Speaker 0>would consider that a full path.

01:19:03.370 --> 01:19:06.250
<v Speaker 0>Because, like, people can the only reason people

01:19:06.490 --> 01:19:08.730
<v Speaker 0>the only reason you should commit your lock

01:19:08.730 --> 01:19:10.715
<v Speaker 0>fail is if you need item for the

01:19:10.715 --> 01:19:11.435
<v Speaker 0>builds.

01:19:12.555 --> 01:19:14.315
<v Speaker 0>And I'm shipping as a Docker container. I

01:19:14.315 --> 01:19:15.195
<v Speaker 0>don't need that.

01:19:15.755 --> 01:19:17.755
<v Speaker 0>I have the cache. I have the container.

01:19:17.755 --> 01:19:19.835
<v Speaker 0>I can reuse that cache. So if I

01:19:19.835 --> 01:19:21.355
<v Speaker 0>need to have a specific build where I

01:19:21.355 --> 01:19:24.060
<v Speaker 0>change something, I can then reference that. Commit

01:19:24.060 --> 01:19:25.260
<v Speaker 0>in a log file means that I'm not

01:19:25.260 --> 01:19:27.419
<v Speaker 0>gonna get automatic security updates.

01:19:27.580 --> 01:19:29.020
<v Speaker 0>It just removes a lot of things that

01:19:29.020 --> 01:19:30.300
<v Speaker 0>we've made slightly uncomfortable.

01:19:30.619 --> 01:19:33.340
<v Speaker 1>So it's because you're gonna be running your

01:19:33.340 --> 01:19:35.020
<v Speaker 1>CLN smoke tests

01:19:35.555 --> 01:19:37.554
<v Speaker 1>after the image is built anyway,

01:19:38.275 --> 01:19:40.355
<v Speaker 1>you don't need the guarantee that the image

01:19:40.355 --> 01:19:41.955
<v Speaker 1>is being built with a specific set of

01:19:41.955 --> 01:19:42.755
<v Speaker 1>dependencies.

01:19:43.235 --> 01:19:44.915
<v Speaker 1>I think committing the lock file comes from

01:19:44.915 --> 01:19:47.475
<v Speaker 1>that workflow where you're you're running CI in

01:19:47.555 --> 01:19:48.995
<v Speaker 1>just in PHP,

01:19:49.395 --> 01:19:51.270
<v Speaker 1>and you want that lock file to reflect

01:19:51.270 --> 01:19:52.870
<v Speaker 1>the set of dependencies that are gonna be

01:19:52.870 --> 01:19:53.510
<v Speaker 1>deployed.

01:19:53.830 --> 01:19:54.870
<v Speaker 1>You get that with

01:19:55.750 --> 01:19:57.590
<v Speaker 1>Docker. Right? If if you Yeah. I have

01:19:57.590 --> 01:19:59.910
<v Speaker 0>I have an immutable image that cannot change.

01:19:59.910 --> 01:20:01.830
<v Speaker 0>So I I I wouldn't commit my log

01:20:01.830 --> 01:20:03.510
<v Speaker 0>file. I I don't commit my log file

01:20:03.510 --> 01:20:05.664
<v Speaker 0>for any any code, any language.

01:20:06.625 --> 01:20:08.465
<v Speaker 1>I I would commit so the the rule

01:20:08.465 --> 01:20:10.144
<v Speaker 1>is I would commit my log file

01:20:10.545 --> 01:20:12.465
<v Speaker 1>if I'm gonna be testing based on the

01:20:12.465 --> 01:20:14.625
<v Speaker 1>log file and then separately deploying based on

01:20:14.625 --> 01:20:15.505
<v Speaker 1>the same log file.

01:20:16.160 --> 01:20:17.680
<v Speaker 1>So then the lock file's giving me that

01:20:17.680 --> 01:20:19.280
<v Speaker 1>sync, but the thing I tested is the

01:20:19.280 --> 01:20:20.239
<v Speaker 1>thing I'm deploying.

01:20:20.480 --> 01:20:21.360
<v Speaker 1>With doc,

01:20:21.680 --> 01:20:23.760
<v Speaker 1>you're not doing that separation. You're testing one

01:20:23.760 --> 01:20:25.520
<v Speaker 1>thing, and then you're moving it into into

01:20:25.520 --> 01:20:26.159
<v Speaker 1>prod.

01:20:26.880 --> 01:20:29.280
<v Speaker 1>So you don't need that extra synchronization

01:20:29.895 --> 01:20:30.454
<v Speaker 1>point.

01:20:31.335 --> 01:20:32.534
<v Speaker 0>Yep. Good point.

01:20:33.655 --> 01:20:34.215
<v Speaker 0>You.

01:20:36.934 --> 01:20:38.934
<v Speaker 0>Let me regain my train of thought. Okay.

01:20:38.934 --> 01:20:40.135
<v Speaker 0>So we we we

01:20:40.454 --> 01:20:41.974
<v Speaker 0>wanna build this now, and we wanna show

01:20:41.974 --> 01:20:44.220
<v Speaker 0>how we're leveraging the build cache so that

01:20:44.220 --> 01:20:46.060
<v Speaker 0>we don't Compose install

01:20:46.300 --> 01:20:48.300
<v Speaker 0>wasn't particularly slow in this project, and it

01:20:48.300 --> 01:20:50.460
<v Speaker 0>can take many minutes. Right? So we we

01:20:50.460 --> 01:20:52.620
<v Speaker 0>don't wanna do that unless that fail changes,

01:20:52.780 --> 01:20:54.540
<v Speaker 0>which is why we're being very specific about

01:20:54.540 --> 01:20:56.060
<v Speaker 0>the order that we copy all of this

01:20:56.060 --> 01:20:56.300
<v Speaker 0>time.

01:20:57.065 --> 01:20:58.985
<v Speaker 0>So if I do a build and I

01:20:58.985 --> 01:20:59.864
<v Speaker 0>target

01:21:00.025 --> 01:21:00.905
<v Speaker 0>build,

01:21:02.105 --> 01:21:04.025
<v Speaker 0>and I call this p I'll call it

01:21:04.025 --> 01:21:06.025
<v Speaker 0>Rawkode build beside of a class with the

01:21:06.025 --> 01:21:08.185
<v Speaker 0>PHP images that I have. I pass on

01:21:08.185 --> 01:21:09.864
<v Speaker 0>the build front. It's what I'm saying.

01:21:10.585 --> 01:21:11.545
<v Speaker 0>Tag not target.

01:21:14.380 --> 01:21:14.940
<v Speaker 0>Target.

01:21:15.980 --> 01:21:16.780
<v Speaker 0>Tag.

01:21:16.780 --> 01:21:17.660
<v Speaker 0>So

01:21:17.660 --> 01:21:19.500
<v Speaker 0>I'm targeting my build layer,

01:21:19.980 --> 01:21:21.900
<v Speaker 0>tagging it Rawkode build, and I've had go.

01:21:26.675 --> 01:21:27.955
<v Speaker 0>That's 7.4.

01:21:27.955 --> 01:21:29.395
<v Speaker 0>Okay. Let's take out the point, guys, and

01:21:29.395 --> 01:21:30.675
<v Speaker 0>just find that. I don't wanna have to

01:21:30.675 --> 01:21:31.635
<v Speaker 0>look that up,

01:21:33.155 --> 01:21:34.994
<v Speaker 0>and that should be based. Anyway

01:21:37.155 --> 01:21:37.555
<v Speaker 0>alright.

01:21:39.079 --> 01:21:40.439
<v Speaker 0>So we run this.

01:21:44.039 --> 01:21:45.320
<v Speaker 0>I got that wrong.

01:21:45.559 --> 01:21:46.760
<v Speaker 0>PHP

01:21:46.760 --> 01:21:49.639
<v Speaker 0>seven dash the FP and R plane.

01:21:49.880 --> 01:21:50.999
<v Speaker 0>Yeah. Maybe.

01:21:51.880 --> 01:21:52.440
<v Speaker 0>There we go.

01:21:55.405 --> 01:21:58.045
<v Speaker 0>No. That's totally not take too long.

01:21:58.364 --> 01:22:00.445
<v Speaker 0>Edge running the compose and resolve because this

01:22:00.445 --> 01:22:01.885
<v Speaker 0>is the first time

01:22:02.205 --> 01:22:03.005
<v Speaker 0>we

01:22:03.325 --> 01:22:04.525
<v Speaker 0>a brand new step.

01:22:06.525 --> 01:22:07.805
<v Speaker 1>Is this using build kit?

01:22:09.300 --> 01:22:11.060
<v Speaker 0>This is using build kit. Yes.

01:22:12.260 --> 01:22:13.780
<v Speaker 0>That's why I have a template. Potentially,

01:22:14.660 --> 01:22:15.860
<v Speaker 1>they're building parallel.

01:22:18.500 --> 01:22:20.500
<v Speaker 0>If I had multiple layers

01:22:21.265 --> 01:22:23.585
<v Speaker 0>where steps could be run-in parallel, yes, they

01:22:23.585 --> 01:22:25.825
<v Speaker 0>would run-in parallel. So, you know, we we

01:22:25.825 --> 01:22:27.345
<v Speaker 0>could we could show that working. We could

01:22:27.345 --> 01:22:29.825
<v Speaker 0>add another layer that ran our unit tests,

01:22:29.985 --> 01:22:32.385
<v Speaker 0>and those would run-in parallel with, say, something

01:22:32.385 --> 01:22:34.625
<v Speaker 0>that was doing our completion of our JavaScript

01:22:34.625 --> 01:22:35.025
<v Speaker 0>asset.

01:22:35.690 --> 01:22:37.769
<v Speaker 0>But if those wouldn't conflict.

01:22:38.170 --> 01:22:39.449
<v Speaker 1>That was what I was thinking. We this

01:22:39.449 --> 01:22:41.290
<v Speaker 1>compose a step build step could be running

01:22:41.290 --> 01:22:43.210
<v Speaker 1>and the MPM build step be running, and

01:22:43.210 --> 01:22:44.889
<v Speaker 1>then dev depend on both of them.

01:22:45.370 --> 01:22:46.249
<v Speaker 0>K. Good. Mhmm.

01:22:47.449 --> 01:22:48.889
<v Speaker 0>Now if we run this again,

01:22:50.755 --> 01:22:52.755
<v Speaker 0>it takes no time at all. Nothing has

01:22:52.755 --> 01:22:55.474
<v Speaker 0>changed. Nothing has nothing has to happen. Now

01:22:55.474 --> 01:22:57.715
<v Speaker 0>if we change the target to production,

01:23:00.034 --> 01:23:01.875
<v Speaker 0>the only thing that should run

01:23:04.940 --> 01:23:05.820
<v Speaker 0>is this.

01:23:09.900 --> 01:23:12.620
<v Speaker 0>We've got cached, cached, cached, cached,

01:23:13.020 --> 01:23:14.620
<v Speaker 0>the production step runs.

01:23:15.020 --> 01:23:16.780
<v Speaker 1>No. Why don't you make an edit to

01:23:16.780 --> 01:23:18.140
<v Speaker 1>index PHP?

01:23:19.100 --> 01:23:19.900
<v Speaker 0>Great idea.

01:23:21.304 --> 01:23:22.264
<v Speaker 0>In public.

01:23:22.745 --> 01:23:23.465
<v Speaker 0>Yeah.

01:23:24.505 --> 01:23:25.224
<v Speaker 0>So

01:23:25.385 --> 01:23:27.864
<v Speaker 0>I see million dollar change,

01:23:31.625 --> 01:23:33.465
<v Speaker 0>and we want to rebuild our production package.

01:23:34.290 --> 01:23:36.210
<v Speaker 0>And what the important thing that I I

01:23:36.210 --> 01:23:38.290
<v Speaker 0>believe you're trying to have me demonstrate here

01:23:38.290 --> 01:23:38.929
<v Speaker 0>is

01:23:39.570 --> 01:23:41.250
<v Speaker 0>let me build our Docker file.

01:23:44.290 --> 01:23:45.489
<v Speaker 0>Is it the only

01:23:45.890 --> 01:23:47.570
<v Speaker 0>so the way the cache of validation works

01:23:47.570 --> 01:23:48.370
<v Speaker 0>in Docker

01:23:49.235 --> 01:23:50.515
<v Speaker 0>is it starts at the top of this

01:23:50.515 --> 01:23:52.515
<v Speaker 0>file and it says, has this has anything

01:23:52.515 --> 01:23:54.035
<v Speaker 0>in this layer changed that would cause a

01:23:54.035 --> 01:23:55.795
<v Speaker 0>rebuild? No. Has anything in this line changed

01:23:55.795 --> 01:23:57.795
<v Speaker 0>that would cause a rebuild? No. Done. Done.

01:23:57.795 --> 01:23:58.275
<v Speaker 0>Done.

01:23:59.155 --> 01:24:01.074
<v Speaker 0>Has composed of updates unchanged?

01:24:01.235 --> 01:24:03.315
<v Speaker 0>No. Which means we don't have to run

01:24:03.500 --> 01:24:06.860
<v Speaker 0>Compose install. This copy has changed. We've just

01:24:06.860 --> 01:24:09.260
<v Speaker 0>modified the index dot PHP where we're calling.

01:24:09.260 --> 01:24:11.739
<v Speaker 0>So our cache is invalidated here,

01:24:12.140 --> 01:24:14.380
<v Speaker 0>which means everything below that's in the file

01:24:14.380 --> 01:24:15.340
<v Speaker 0>has to be run again.

01:24:16.495 --> 01:24:18.415
<v Speaker 0>If you change that fail, which means when

01:24:18.415 --> 01:24:20.415
<v Speaker 0>I run this, the compose of JSON

01:24:20.575 --> 01:24:22.975
<v Speaker 0>and the compose are installed do not need

01:24:22.975 --> 01:24:23.614
<v Speaker 0>to run.

01:24:24.895 --> 01:24:25.614
<v Speaker 0>Cool.

01:24:28.095 --> 01:24:28.495
<v Speaker 0>Perfect.

01:24:29.160 --> 01:24:31.800
<v Speaker 0>You can see our composer install and our

01:24:31.800 --> 01:24:34.360
<v Speaker 0>cash composer JSON did not work. It's very

01:24:34.360 --> 01:24:36.199
<v Speaker 0>fast. It just changed our code,

01:24:36.440 --> 01:24:38.120
<v Speaker 0>produced the image, and that was it.

01:24:41.824 --> 01:24:44.224
<v Speaker 0>Now if we change the composer dot JSON,

01:24:44.465 --> 01:24:46.385
<v Speaker 0>the composer install would run again,

01:24:46.625 --> 01:24:49.025
<v Speaker 0>and then every step will load out. Don't

01:24:49.025 --> 01:24:51.025
<v Speaker 0>think we need to cover that. I think,

01:24:51.025 --> 01:24:53.710
<v Speaker 0>hopefully, we'll explain that well enough that people

01:24:53.710 --> 01:24:55.949
<v Speaker 0>understand the build cache and why that's really

01:24:55.949 --> 01:24:58.269
<v Speaker 0>important for both of these. Mean, that was

01:24:58.429 --> 01:24:59.310
<v Speaker 0>ridiculously

01:24:59.310 --> 01:25:01.070
<v Speaker 0>fast. That's what I want.

01:25:01.710 --> 01:25:03.469
<v Speaker 1>And that's a good reason to have separate

01:25:03.469 --> 01:25:04.270
<v Speaker 1>build

01:25:04.270 --> 01:25:05.310
<v Speaker 1>targets

01:25:05.310 --> 01:25:08.095
<v Speaker 1>for for the PHP compose we install and

01:25:08.095 --> 01:25:09.135
<v Speaker 1>the NPM is

01:25:09.775 --> 01:25:11.775
<v Speaker 1>that you'll only be invalidating one of them

01:25:11.775 --> 01:25:13.215
<v Speaker 1>if if something changes.

01:25:13.695 --> 01:25:16.495
<v Speaker 1>So having a kind of diamond shape to

01:25:16.495 --> 01:25:17.375
<v Speaker 1>your targets

01:25:18.095 --> 01:25:20.175
<v Speaker 1>where two extend this one and then something

01:25:20.175 --> 01:25:22.260
<v Speaker 1>depends on both of them can really help

01:25:22.260 --> 01:25:24.500
<v Speaker 1>with builds because you the cache, like you

01:25:24.500 --> 01:25:25.540
<v Speaker 1>say, is sequential

01:25:26.260 --> 01:25:28.260
<v Speaker 1>Yep. In terms of layers. So splitting things

01:25:28.260 --> 01:25:30.020
<v Speaker 1>out and then copying the finished assets into

01:25:30.020 --> 01:25:32.260
<v Speaker 1>the final image can be really helpful. Oh,

01:25:32.260 --> 01:25:33.219
<v Speaker 0>yeah. Definitely.

01:25:33.540 --> 01:25:35.835
<v Speaker 0>And I guess it's also worth pointing out.

01:25:35.835 --> 01:25:38.874
<v Speaker 0>This is not unique to Composer or PHP.

01:25:39.195 --> 01:25:42.074
<v Speaker 0>Any any language with a package manager will

01:25:42.074 --> 01:25:44.954
<v Speaker 0>have a file like Composer. For Rust, it

01:25:44.954 --> 01:25:47.849
<v Speaker 0>would be cargo dot tunnel. For NPM,

01:25:47.850 --> 01:25:50.329
<v Speaker 0>node based stuff is package dot JSON.

01:25:50.969 --> 01:25:53.130
<v Speaker 0>This exact pattern works for all of those

01:25:53.130 --> 01:25:56.250
<v Speaker 0>languages frameworks and run time. And is it

01:25:56.250 --> 01:25:58.489
<v Speaker 1>based on the hash of the files?

01:25:59.850 --> 01:26:01.850
<v Speaker 0>It is. Yes. Yeah.

01:26:02.535 --> 01:26:04.215
<v Speaker 0>So it's the collective hash of the file

01:26:04.215 --> 01:26:04.855
<v Speaker 0>system.

01:26:05.335 --> 01:26:05.974
<v Speaker 0>So

01:26:06.935 --> 01:26:09.175
<v Speaker 0>because the only thing changing at this layer

01:26:09.175 --> 01:26:10.855
<v Speaker 0>is that one file, they only have to

01:26:10.855 --> 01:26:12.855
<v Speaker 0>check the hash of that one file, where

01:26:12.855 --> 01:26:14.695
<v Speaker 0>it's a whole directory like that. It would

01:26:14.695 --> 01:26:16.455
<v Speaker 0>be a cache of everything together as a

01:26:16.455 --> 01:26:16.695
<v Speaker 0>song.

01:26:18.050 --> 01:26:18.690
<v Speaker 1>Yeah.

01:26:19.250 --> 01:26:21.170
<v Speaker 1>And that and so it's important to also

01:26:22.290 --> 01:26:24.450
<v Speaker 1>include things in Docker ignore because here where

01:26:24.450 --> 01:26:25.250
<v Speaker 1>we're copying

01:26:25.970 --> 01:26:27.489
<v Speaker 1>everything into the image,

01:26:27.970 --> 01:26:29.810
<v Speaker 1>it's important anything that's gonna be a transient

01:26:29.810 --> 01:26:32.050
<v Speaker 1>file or change over time should be

01:26:32.945 --> 01:26:34.464
<v Speaker 1>Docker ignored. Right?

01:26:35.264 --> 01:26:36.304
<v Speaker 0>Very true.

01:26:36.704 --> 01:26:38.945
<v Speaker 1>Which maybe it is, one. Yeah.

01:26:40.545 --> 01:26:41.824
<v Speaker 0>So there are a lot of things here

01:26:41.824 --> 01:26:44.385
<v Speaker 0>that we would not expect to trigger a

01:26:44.385 --> 01:26:44.945
<v Speaker 0>rebuild,

01:26:45.720 --> 01:26:47.240
<v Speaker 0>And and the best way to handle that

01:26:47.560 --> 01:26:48.280
<v Speaker 1>Yeah.

01:26:49.560 --> 01:26:52.360
<v Speaker 1>So if if you're refreshing the cache locally,

01:26:52.360 --> 01:26:54.040
<v Speaker 1>you don't want that invalidating your

01:26:54.840 --> 01:26:57.400
<v Speaker 1>builds. Yeah. Or even just a readme. Like,

01:26:57.400 --> 01:26:58.760
<v Speaker 0>do I want a readme to cause a

01:26:58.760 --> 01:26:59.880
<v Speaker 0>rebuild with this application?

01:27:01.065 --> 01:27:02.585
<v Speaker 1>Yeah. And it also stops it being in

01:27:02.585 --> 01:27:04.905
<v Speaker 1>the image as well. Right? It does. It

01:27:04.905 --> 01:27:07.065
<v Speaker 0>will so the way this works is it

01:27:07.065 --> 01:27:07.385
<v Speaker 0>won't

01:27:08.425 --> 01:27:10.265
<v Speaker 0>if we look at this command, on the

01:27:10.265 --> 01:27:11.545
<v Speaker 0>end, we have this doc.

01:27:12.105 --> 01:27:15.030
<v Speaker 0>That's called the build context, and, like, Docker,

01:27:15.030 --> 01:27:16.949
<v Speaker 0>as sophisticated as it is, this is not

01:27:16.949 --> 01:27:17.829
<v Speaker 0>sophisticated.

01:27:17.989 --> 01:27:20.389
<v Speaker 0>That dot means that the Docker engine will

01:27:20.389 --> 01:27:23.590
<v Speaker 0>actually charge that that entire context, that directory,

01:27:24.310 --> 01:27:25.590
<v Speaker 0>and send that to the engine.

01:27:26.195 --> 01:27:28.035
<v Speaker 0>And that context is what ends up in

01:27:28.035 --> 01:27:29.954
<v Speaker 0>your image if you copy these things in.

01:27:30.835 --> 01:27:32.515
<v Speaker 0>So that's what if we have a dot

01:27:32.515 --> 01:27:33.635
<v Speaker 0>Docker ignore,

01:27:33.875 --> 01:27:35.955
<v Speaker 0>those files are stripped at the context stage

01:27:35.955 --> 01:27:38.195
<v Speaker 0>and never actually touch the Docker engine ever.

01:27:39.475 --> 01:27:40.275
<v Speaker 0>Does that make sense?

01:27:41.090 --> 01:27:42.050
<v Speaker 1>Yeah. Really.

01:27:43.010 --> 01:27:44.770
<v Speaker 1>Alright. So it all gets zipped up or

01:27:44.770 --> 01:27:46.770
<v Speaker 1>something. Right? And then transferred or tarred up?

01:27:46.770 --> 01:27:47.249
<v Speaker 1>Yep.

01:27:47.650 --> 01:27:49.809
<v Speaker 0>Yeah. There's there's I mean, we

01:27:50.210 --> 01:27:52.690
<v Speaker 0>we we work mostly on local machine for

01:27:52.690 --> 01:27:54.885
<v Speaker 0>the Docker engine and the context are are

01:27:54.885 --> 01:27:56.965
<v Speaker 0>available locally, but that's not always a case.

01:27:56.965 --> 01:27:58.885
<v Speaker 0>In fact, Docker expects that Docker engine to

01:27:58.885 --> 01:28:00.645
<v Speaker 0>be remote. In fact, Docker for Mac is

01:28:00.645 --> 01:28:02.645
<v Speaker 0>at the engine is actually on a VM.

01:28:03.285 --> 01:28:05.685
<v Speaker 0>So it's it's it's all tied up together

01:28:05.685 --> 01:28:07.445
<v Speaker 0>and sent over the pay under the VM

01:28:07.445 --> 01:28:09.969
<v Speaker 0>where it's then analyzed, extracted, and

01:28:15.889 --> 01:28:16.929
<v Speaker 0>Is there

01:28:17.250 --> 01:28:19.090
<v Speaker 0>we've not got any more questions.

01:28:19.170 --> 01:28:20.929
<v Speaker 0>So how are you for time?

01:28:22.065 --> 01:28:23.665
<v Speaker 0>I need to go in about ten minutes.

01:28:23.825 --> 01:28:25.425
<v Speaker 1>But you I mean, you could continue without

01:28:25.425 --> 01:28:25.905
<v Speaker 1>me.

01:28:27.025 --> 01:28:28.945
<v Speaker 0>No. Let's finish up in ten then. So

01:28:28.945 --> 01:28:30.625
<v Speaker 0>if you are watching and you've got any

01:28:30.625 --> 01:28:32.545
<v Speaker 0>questions on anything we've covered or anything we've

01:28:32.545 --> 01:28:34.065
<v Speaker 0>not covered that you want to know

01:28:34.670 --> 01:28:37.150
<v Speaker 0>or want us to explain, there is your

01:28:37.150 --> 01:28:39.550
<v Speaker 0>chat. This is it. You got ten minutes.

01:28:40.030 --> 01:28:40.590
<v Speaker 0>So

01:28:40.989 --> 01:28:42.989
<v Speaker 0>that gives me ten minutes to then shift

01:28:42.989 --> 01:28:44.670
<v Speaker 0>this image to Kubernetes.

01:28:44.909 --> 01:28:45.389
<v Speaker 1>Perfect.

01:28:46.635 --> 01:28:48.635
<v Speaker 1>So would you would you do a similar

01:28:48.875 --> 01:28:50.555
<v Speaker 1>build step for the NGINX just to get

01:28:50.555 --> 01:28:52.315
<v Speaker 1>the config file in there? Or would you

01:28:53.835 --> 01:28:55.195
<v Speaker 1>leave that to later?

01:28:56.635 --> 01:28:58.475
<v Speaker 0>No. I I wouldn't.

01:28:59.190 --> 01:29:02.950
<v Speaker 0>I wouldn't use a proprietary image for engine

01:29:02.950 --> 01:29:04.310
<v Speaker 0>x and Kubernetes.

01:29:04.310 --> 01:29:06.790
<v Speaker 0>I would use the official upstream ones, but

01:29:06.790 --> 01:29:09.190
<v Speaker 0>provide a volume down of the config for

01:29:09.190 --> 01:29:09.989
<v Speaker 0>config map.

01:29:11.205 --> 01:29:12.965
<v Speaker 1>So if it's just the config,

01:29:12.965 --> 01:29:14.965
<v Speaker 1>you'd always use a volume for that?

01:29:16.885 --> 01:29:19.125
<v Speaker 0>Yeah. I would I wouldn't build an image

01:29:19.125 --> 01:29:19.765
<v Speaker 0>for that.

01:29:20.325 --> 01:29:21.685
<v Speaker 0>I just don't think there would be any

01:29:21.685 --> 01:29:24.530
<v Speaker 0>value add on on doing so. Because remember,

01:29:24.530 --> 01:29:26.130
<v Speaker 0>I I then got to store those images

01:29:26.130 --> 01:29:27.730
<v Speaker 0>on my own registry somewhere

01:29:28.290 --> 01:29:29.730
<v Speaker 0>Mhmm. Which means I'll I don't have to

01:29:29.730 --> 01:29:31.650
<v Speaker 0>handle regular maintenance.

01:29:31.650 --> 01:29:33.570
<v Speaker 0>I have to rebuild it regularly so I'm

01:29:33.570 --> 01:29:36.210
<v Speaker 0>getting security updates, patches. I have to I

01:29:36.210 --> 01:29:38.210
<v Speaker 0>just create analysis of it. All that stuff

01:29:38.210 --> 01:29:39.594
<v Speaker 0>that I really don't wanna have to worry

01:29:39.594 --> 01:29:41.514
<v Speaker 0>about, but all I'm doing is modifying one

01:29:41.514 --> 01:29:42.635
<v Speaker 0>piece of configuration.

01:29:43.034 --> 01:29:43.755
<v Speaker 0>Yeah.

01:29:46.074 --> 01:29:47.034
<v Speaker 0>Okay. So

01:29:47.435 --> 01:29:49.195
<v Speaker 0>I use my opt directory for stuff like

01:29:49.195 --> 01:29:50.635
<v Speaker 0>this. I'm gonna create a Kubernetes,

01:29:53.329 --> 01:29:56.130
<v Speaker 0>and I'm going to have our PHP,

01:29:56.130 --> 01:29:57.089
<v Speaker 0>FPN

01:29:57.090 --> 01:29:58.129
<v Speaker 0>deployment.

01:29:59.889 --> 01:30:00.929
<v Speaker 0>Yeah. No.

01:30:03.570 --> 01:30:05.010
<v Speaker 0>And I have a nice

01:30:06.465 --> 01:30:09.025
<v Speaker 0>extension, which just kind of templates it all

01:30:09.025 --> 01:30:09.905
<v Speaker 0>for me.

01:30:14.065 --> 01:30:14.945
<v Speaker 0>Oh, no.

01:30:15.585 --> 01:30:16.704
<v Speaker 0>Oh, that's it.

01:30:17.265 --> 01:30:19.000
<v Speaker 0>Oh, it's on the back. Come back to

01:30:19.000 --> 01:30:19.880
<v Speaker 0>the same. Yeah.

01:30:24.679 --> 01:30:25.079
<v Speaker 0>K.

01:30:26.440 --> 01:30:27.159
<v Speaker 0>Right.

01:30:28.040 --> 01:30:29.079
<v Speaker 0>The image

01:30:29.320 --> 01:30:32.645
<v Speaker 0>which I built was called Rawkode build. I'm

01:30:32.645 --> 01:30:34.405
<v Speaker 0>not gonna change that, so we could do

01:30:34.405 --> 01:30:35.045
<v Speaker 0>this.

01:30:35.685 --> 01:30:37.765
<v Speaker 0>I'm not gonna use any resource constraints for

01:30:37.765 --> 01:30:39.045
<v Speaker 0>the time being. I am gonna keep this

01:30:39.045 --> 01:30:40.645
<v Speaker 0>lame here because if I remove it, I

01:30:40.645 --> 01:30:41.845
<v Speaker 0>get a little bit squiggles.

01:30:43.285 --> 01:30:45.045
<v Speaker 0>And it's just telling me, hey. You probably

01:30:45.045 --> 01:30:47.205
<v Speaker 0>don't seem to deploy this into Kubernetes without

01:30:47.205 --> 01:30:48.325
<v Speaker 0>having resource constraints.

01:30:48.860 --> 01:30:49.739
<v Speaker 0>And

01:30:49.739 --> 01:30:52.380
<v Speaker 0>we're gonna say that our FTM runs on

01:30:52.380 --> 01:30:53.579
<v Speaker 0>port 9,000.

01:30:55.900 --> 01:30:58.300
<v Speaker 0>And that's it. It's good. Right?

01:30:58.780 --> 01:31:00.699
<v Speaker 0>Next, we need

01:31:02.385 --> 01:31:04.225
<v Speaker 0>our PPM. The next

01:31:05.185 --> 01:31:05.505
<v Speaker 0>private

01:31:06.465 --> 01:31:07.344
<v Speaker 1>So we'd

01:31:07.825 --> 01:31:09.345
<v Speaker 1>so you'd be building that image as part

01:31:09.345 --> 01:31:10.864
<v Speaker 1>of your CI pipeline.

01:31:11.985 --> 01:31:12.625
<v Speaker 0>The PHP

01:31:13.905 --> 01:31:16.225
<v Speaker 0>PHP, FPM, Apple, and the FPM.

01:31:18.250 --> 01:31:18.810
<v Speaker 1>Yeah.

01:31:19.130 --> 01:31:21.050
<v Speaker 1>So you wouldn't so is is that the

01:31:21.050 --> 01:31:22.650
<v Speaker 1>best practice? You don't build those things as

01:31:22.650 --> 01:31:23.930
<v Speaker 1>part of your Kubernetes

01:31:24.650 --> 01:31:26.010
<v Speaker 1>deployment process.

01:31:26.410 --> 01:31:27.050
<v Speaker 1>You

01:31:27.450 --> 01:31:28.730
<v Speaker 1>you develop things locally.

01:31:30.025 --> 01:31:32.664
<v Speaker 1>Something like CI then pushes an official image

01:31:32.664 --> 01:31:34.344
<v Speaker 1>somewhere after tests have passed,

01:31:34.744 --> 01:31:36.264
<v Speaker 1>and you're deploying off of that.

01:31:36.664 --> 01:31:38.905
<v Speaker 0>Yeah. I'd have something that then runs inside

01:31:38.905 --> 01:31:40.905
<v Speaker 0>of my Kubernetes cluster that would detect them

01:31:40.905 --> 01:31:42.824
<v Speaker 0>as a new image and do an automatic

01:31:43.144 --> 01:31:45.310
<v Speaker 0>roll out or deployment on it. Right. So

01:31:45.310 --> 01:31:47.309
<v Speaker 1>it's not pushing out to Kubernetes. It's

01:31:47.790 --> 01:31:49.949
<v Speaker 1>pushing through a registry and then Kubernetes

01:31:50.670 --> 01:31:53.230
<v Speaker 0>Yes. I would never have my CI pushed

01:31:53.230 --> 01:31:55.150
<v Speaker 0>to a Kubernetes cluster because then my CI

01:31:55.150 --> 01:31:57.150
<v Speaker 0>has to know that the cluster exists.

01:31:57.915 --> 01:31:59.514
<v Speaker 0>Yeah. It makes it really difficult to do

01:31:59.514 --> 01:32:01.355
<v Speaker 0>a femoral cluster. So if I wanna spin

01:32:01.355 --> 01:32:02.795
<v Speaker 0>up, like, a pre prod or a temporary

01:32:02.795 --> 01:32:05.355
<v Speaker 0>environment to do some testing Gotcha. I have

01:32:05.355 --> 01:32:06.795
<v Speaker 0>to build that into the CI step, and

01:32:06.795 --> 01:32:08.715
<v Speaker 0>I I always try to keep those

01:32:09.275 --> 01:32:11.594
<v Speaker 0>separate. So instead, what I'll have is

01:32:12.100 --> 01:32:14.340
<v Speaker 0>you push the image with a certain tagging

01:32:14.340 --> 01:32:16.500
<v Speaker 0>format that may say this is good for

01:32:16.500 --> 01:32:18.900
<v Speaker 0>production deployment, and then have many environments that

01:32:18.900 --> 01:32:20.900
<v Speaker 0>can pull that through. And and it's in

01:32:20.900 --> 01:32:23.540
<v Speaker 0>the test environment, which have a slightly different

01:32:24.145 --> 01:32:26.224
<v Speaker 0>tagging part. Right.

01:32:26.784 --> 01:32:27.905
<v Speaker 0>Okay. So

01:32:28.945 --> 01:32:30.465
<v Speaker 0>we're gonna call this

01:32:30.864 --> 01:32:32.144
<v Speaker 0>engine x.

01:32:33.585 --> 01:32:35.505
<v Speaker 0>We get default engine x image.

01:32:36.840 --> 01:32:38.119
<v Speaker 0>There we go. This

01:32:38.840 --> 01:32:40.599
<v Speaker 0>this is available on port 80.

01:32:42.119 --> 01:32:43.159
<v Speaker 0>Excuse

01:32:43.159 --> 01:32:43.639
<v Speaker 0>me.

01:32:43.960 --> 01:32:46.280
<v Speaker 0>Okay. Now we need to config that

01:32:50.535 --> 01:32:52.295
<v Speaker 0>For quickness,

01:32:53.655 --> 01:32:59.015
<v Speaker 0>I'm

01:32:59.015 --> 01:33:00.295
<v Speaker 0>just gonna copy this

01:33:01.735 --> 01:33:03.575
<v Speaker 0>from

01:33:02.810 --> 01:33:03.610
<v Speaker 0>here.

01:33:04.810 --> 01:33:06.570
<v Speaker 0>Normally, I wouldn't do that.

01:33:08.010 --> 01:33:09.610
<v Speaker 0>And I would have custom so there's a

01:33:09.610 --> 01:33:12.250
<v Speaker 0>tool called customized. It's a built in

01:33:12.489 --> 01:33:13.850
<v Speaker 0>the acute CPL.

01:33:16.824 --> 01:33:19.304
<v Speaker 0>And I can actually just create the conflict

01:33:19.304 --> 01:33:20.985
<v Speaker 0>map for you from a local file. So

01:33:20.985 --> 01:33:22.824
<v Speaker 0>that means I don't have a duplication. And

01:33:22.824 --> 01:33:24.425
<v Speaker 0>if you wanna read about that, it's on

01:33:24.425 --> 01:33:25.945
<v Speaker 0>customized.io.

01:33:26.185 --> 01:33:28.025
<v Speaker 0>You would go to docs

01:33:28.025 --> 01:33:29.545
<v Speaker 0>and

01:33:44.105 --> 01:33:46.185
<v Speaker 0>There's something there. You can tell to fill

01:33:46.185 --> 01:33:48.664
<v Speaker 0>in a file as a config.

01:33:49.785 --> 01:33:53.225
<v Speaker 0>It's definitely there, promise. So I think I

01:33:53.225 --> 01:33:54.505
<v Speaker 0>have to know one more.

01:33:55.304 --> 01:33:57.545
<v Speaker 0>Recall that's thedefault.com

01:33:57.545 --> 01:33:58.985
<v Speaker 0>because that's what the file is called.

01:34:00.400 --> 01:34:02.880
<v Speaker 0>Now that's changes. So we can either have

01:34:02.880 --> 01:34:04.880
<v Speaker 0>a service for PHP or I could do

01:34:04.880 --> 01:34:05.920
<v Speaker 0>something else.

01:34:06.800 --> 01:34:08.080
<v Speaker 0>Oh, in fact, I've got these as two

01:34:08.080 --> 01:34:10.880
<v Speaker 0>deployments, which I also wouldn't do. I guess

01:34:10.880 --> 01:34:12.560
<v Speaker 0>it doesn't matter for now. We could run

01:34:12.560 --> 01:34:15.875
<v Speaker 0>NGINX as a sidecar container in our APM.

01:34:15.875 --> 01:34:17.315
<v Speaker 0>What what do you wanna see? What's more

01:34:17.315 --> 01:34:18.275
<v Speaker 0>important to you?

01:34:18.995 --> 01:34:20.915
<v Speaker 1>Can you define sidecar container?

01:34:21.795 --> 01:34:24.435
<v Speaker 0>So in a pod in Kubernetes, a sidecar

01:34:24.435 --> 01:34:26.835
<v Speaker 0>container is generally what we would call any

01:34:26.835 --> 01:34:29.155
<v Speaker 0>container beyond the main container

01:34:29.250 --> 01:34:31.890
<v Speaker 0>that provides new functionality. So we could have

01:34:31.890 --> 01:34:34.370
<v Speaker 0>a deployment that runs at the end, and

01:34:34.370 --> 01:34:36.050
<v Speaker 0>then we could deploy a safeguard container. So

01:34:36.050 --> 01:34:38.130
<v Speaker 0>Nginx container next to it where they share

01:34:38.130 --> 01:34:39.489
<v Speaker 0>the same namespaces,

01:34:39.890 --> 01:34:42.370
<v Speaker 0>which means that they can communicate over local.

01:34:42.995 --> 01:34:44.755
<v Speaker 0>But let's let's do that because

01:34:45.635 --> 01:34:46.195
<v Speaker 0>yeah.

01:34:46.515 --> 01:34:47.955
<v Speaker 0>Let let's just do that. I think that

01:34:47.955 --> 01:34:49.315
<v Speaker 0>makes more sense. It's the that's how I

01:34:49.315 --> 01:34:50.675
<v Speaker 0>would do it in production. There's no point

01:34:50.675 --> 01:34:52.035
<v Speaker 0>of me changing from what I would normally

01:34:52.035 --> 01:34:52.835
<v Speaker 0>do. But

01:34:53.475 --> 01:34:54.195
<v Speaker 0>Do I have a

01:34:56.580 --> 01:34:58.500
<v Speaker 0>So we just add a new container. We

01:34:58.500 --> 01:35:01.219
<v Speaker 0>say we're gonna augment our PHP application with

01:35:01.219 --> 01:35:02.340
<v Speaker 0>engine x

01:35:03.219 --> 01:35:04.579
<v Speaker 0>Yeah. As a port.

01:35:05.860 --> 01:35:08.864
<v Speaker 0>And then in my configuration map here, I'm

01:35:08.864 --> 01:35:10.945
<v Speaker 0>actually just going to use Rawkode.

01:35:10.945 --> 01:35:12.545
<v Speaker 0>It's on port end side. They share the

01:35:12.545 --> 01:35:14.144
<v Speaker 0>same networking namespace.

01:35:14.144 --> 01:35:15.425
<v Speaker 0>That means I I don't even have a

01:35:15.425 --> 01:35:17.664
<v Speaker 0>network hop to go to get to it

01:35:17.664 --> 01:35:18.945
<v Speaker 0>either. But performing

01:35:19.505 --> 01:35:19.824
<v Speaker 0>cool.

01:35:21.739 --> 01:35:23.100
<v Speaker 0>The only thing I need to do now

01:35:23.100 --> 01:35:25.500
<v Speaker 0>is map this config map. Now this is

01:35:25.500 --> 01:35:27.500
<v Speaker 0>where I'm gonna forget the syntax, but let's

01:35:27.500 --> 01:35:29.180
<v Speaker 0>see what happens. We need to find a

01:35:29.180 --> 01:35:31.659
<v Speaker 0>volume called m g n a config,

01:35:32.300 --> 01:35:33.900
<v Speaker 0>which is that config map ref,

01:35:34.415 --> 01:35:35.695
<v Speaker 0>the name

01:35:35.695 --> 01:35:37.615
<v Speaker 0>of and I think I saw that I

01:35:37.615 --> 01:35:38.415
<v Speaker 0>did that. Yep.

01:35:39.615 --> 01:35:40.335
<v Speaker 0>Yeah.

01:35:40.735 --> 01:35:43.055
<v Speaker 0>So now it makes us available to me

01:35:43.215 --> 01:35:44.975
<v Speaker 0>and it can be consumed

01:35:46.015 --> 01:35:48.015
<v Speaker 0>here. That's volume mounts,

01:35:48.940 --> 01:35:50.860
<v Speaker 0>and we're gonna mount this to end of

01:35:50.860 --> 01:35:52.540
<v Speaker 0>x conflict d,

01:35:55.020 --> 01:35:57.100
<v Speaker 0>and we're going to mount

01:35:57.180 --> 01:35:58.060
<v Speaker 0>our

01:35:58.220 --> 01:35:59.659
<v Speaker 0>end of x

01:35:59.900 --> 01:36:00.699
<v Speaker 0>conflict.

01:36:00.860 --> 01:36:02.860
<v Speaker 0>Now I only want to mount a single

01:36:02.860 --> 01:36:03.260
<v Speaker 0>file.

01:36:04.995 --> 01:36:07.875
<v Speaker 1>Default. Yeah. I do that. Okay.

01:36:12.515 --> 01:36:14.035
<v Speaker 0>I think this may work.

01:36:14.515 --> 01:36:15.555
<v Speaker 1>It might work.

01:36:16.035 --> 01:36:18.200
<v Speaker 0>It may work. So what I'm gonna do

01:36:18.200 --> 01:36:19.480
<v Speaker 0>is that we're gonna shut down all the

01:36:19.480 --> 01:36:21.560
<v Speaker 0>Docker Compose stuff. My Docker Hub app is

01:36:21.560 --> 01:36:23.000
<v Speaker 0>already running Kubernetes.

01:36:24.680 --> 01:36:26.120
<v Speaker 1>Which is a tick box in there, isn't

01:36:26.120 --> 01:36:26.600
<v Speaker 1>it?

01:36:28.600 --> 01:36:30.920
<v Speaker 1>You just turn it on and it works.

01:36:31.240 --> 01:36:31.560
<v Speaker 0>Yeah.

01:36:32.575 --> 01:36:34.415
<v Speaker 0>You can see it's running, and it's just

01:36:34.415 --> 01:36:35.614
<v Speaker 0>under preferences.

01:36:37.775 --> 01:36:39.295
<v Speaker 0>Not the fastest application.

01:36:40.015 --> 01:36:42.415
<v Speaker 0>Yeah. Tick box. So I

01:36:43.455 --> 01:36:46.494
<v Speaker 0>can now do a quick control apply

01:36:46.655 --> 01:36:49.855
<v Speaker 0>dash

01:36:47.780 --> 01:36:49.460
<v Speaker 0>off Kubernetes.

01:36:50.900 --> 01:36:52.500
<v Speaker 0>And let's do the this one thing up

01:36:52.500 --> 01:36:52.820
<v Speaker 0>first.

01:37:09.095 --> 01:37:10.055
<v Speaker 0>Running.

01:37:11.895 --> 01:37:13.975
<v Speaker 0>So you can see we have two containers.

01:37:13.975 --> 01:37:16.295
<v Speaker 0>It's running. It's hopefully still running.

01:37:17.020 --> 01:37:19.019
<v Speaker 0>I'm gonna do it as port forward.

01:37:22.699 --> 01:37:24.139
<v Speaker 0>So this part

01:37:26.060 --> 01:37:28.060
<v Speaker 0>well, not import eighty eighty. But before I

01:37:28.060 --> 01:37:30.300
<v Speaker 0>do that, this will be broken.

01:37:35.105 --> 01:37:36.304
<v Speaker 0>And then

01:37:38.705 --> 01:37:39.344
<v Speaker 1>k.

01:37:39.745 --> 01:37:42.465
<v Speaker 0>We now have our two container pod

01:37:42.545 --> 01:37:43.665
<v Speaker 0>with NGINX

01:37:43.820 --> 01:37:45.900
<v Speaker 0>speaking to FPM

01:37:46.300 --> 01:37:48.700
<v Speaker 0>over local hosts and look at the response

01:37:48.700 --> 01:37:49.340
<v Speaker 0>time.

01:37:49.980 --> 01:37:52.460
<v Speaker 0>Drastically better than a PHP building web server.

01:37:52.460 --> 01:37:54.460
<v Speaker 0>And even better than the two container setup

01:37:54.460 --> 01:37:56.060
<v Speaker 0>locally as well. Drastically better.

01:37:57.045 --> 01:37:58.885
<v Speaker 1>Because of the lack of volume mapping. Right?

01:37:58.885 --> 01:38:00.965
<v Speaker 1>So all the files are inside the baked

01:38:00.965 --> 01:38:02.325
<v Speaker 1>container that you built?

01:38:03.205 --> 01:38:05.685
<v Speaker 0>Yeah. This is our node detection image. There's

01:38:05.685 --> 01:38:08.005
<v Speaker 0>no network traffic between NGINX and FPM, which

01:38:08.005 --> 01:38:09.445
<v Speaker 0>makes it a little bit faster. Even with

01:38:09.445 --> 01:38:11.205
<v Speaker 0>the two containers locally, they'd still be going

01:38:11.205 --> 01:38:13.410
<v Speaker 0>over a TCP connection. There would still be

01:38:13.410 --> 01:38:15.570
<v Speaker 0>a little bit of latency added there.

01:38:16.290 --> 01:38:18.130
<v Speaker 0>Right. But that's just really fast.

01:38:18.690 --> 01:38:19.490
<v Speaker 0>Awesome.

01:38:20.530 --> 01:38:22.450
<v Speaker 0>We had We've I have to leave at

01:38:22.450 --> 01:38:23.170
<v Speaker 1>this point.

01:38:24.290 --> 01:38:25.490
<v Speaker 1>It's been really good, David.

01:38:26.955 --> 01:38:28.395
<v Speaker 1>For I've I've learned a lot of things,

01:38:28.395 --> 01:38:29.675
<v Speaker 1>so thanks for inviting me.

01:38:30.155 --> 01:38:31.675
<v Speaker 0>No. You're thank you for joining me in.

01:38:31.675 --> 01:38:33.675
<v Speaker 0>Know, pleasure. Enjoy

01:38:33.675 --> 01:38:35.195
<v Speaker 0>the rest of your day. I'll do another

01:38:35.195 --> 01:38:36.955
<v Speaker 0>five minutes, and I'll finish up. And I'll

01:38:36.955 --> 01:38:37.915
<v Speaker 0>be I'll

01:38:37.915 --> 01:38:39.354
<v Speaker 1>watch the end when I get back.

01:38:40.474 --> 01:38:41.514
<v Speaker 0>Bye bye. See you later.

01:38:44.160 --> 01:38:45.920
<v Speaker 0>So we just had a a question that

01:38:45.920 --> 01:38:47.680
<v Speaker 0>I'll tackle there quickly is

01:38:48.000 --> 01:38:49.840
<v Speaker 0>does this mean I cannot scale engine x

01:38:49.840 --> 01:38:51.280
<v Speaker 0>and FBM independently?

01:38:51.760 --> 01:38:52.320
<v Speaker 0>So

01:38:52.800 --> 01:38:53.840
<v Speaker 0>that is correct.

01:38:55.655 --> 01:38:58.295
<v Speaker 0>When you're using multiple containers in a pod,

01:38:58.455 --> 01:39:00.135
<v Speaker 0>yeah, you scale them together.

01:39:00.775 --> 01:39:01.574
<v Speaker 0>If

01:39:01.735 --> 01:39:03.735
<v Speaker 0>for your own reasons, you don't want to

01:39:03.735 --> 01:39:04.775
<v Speaker 0>take that approach,

01:39:05.175 --> 01:39:07.175
<v Speaker 0>you would deploy them separately.

01:39:07.980 --> 01:39:09.660
<v Speaker 0>And and that would just mean,

01:39:09.980 --> 01:39:11.740
<v Speaker 0>you know, taking that out,

01:39:12.860 --> 01:39:16.460
<v Speaker 0>creating our FBM engine x deployment instead.

01:39:17.820 --> 01:39:19.020
<v Speaker 0>We call engine x.

01:39:20.685 --> 01:39:22.365
<v Speaker 0>We update the I mean, to that, I

01:39:22.365 --> 01:39:23.165
<v Speaker 0>can just

01:39:24.605 --> 01:39:25.245
<v Speaker 0>but

01:39:27.165 --> 01:39:29.485
<v Speaker 0>it does mean that my contact map has

01:39:29.485 --> 01:39:31.725
<v Speaker 0>to change because we are going over

01:39:32.445 --> 01:39:34.285
<v Speaker 0>the Kubernetes TCP stack now.

01:39:34.890 --> 01:39:36.890
<v Speaker 0>So instead, I'd be looking for something that

01:39:36.890 --> 01:39:38.650
<v Speaker 0>resolves to PHP,

01:39:39.530 --> 01:39:41.530
<v Speaker 0>which just means I have to expose

01:39:41.850 --> 01:39:44.010
<v Speaker 0>a service for our APM.

01:39:45.610 --> 01:39:47.929
<v Speaker 0>So I wanna call it PHP, and if

01:39:47.929 --> 01:39:50.170
<v Speaker 0>we look at the selector, I can see

01:39:50.845 --> 01:39:52.605
<v Speaker 0>that we have a label. It's all at

01:39:52.605 --> 01:39:54.284
<v Speaker 0>PHP FPN.

01:39:55.965 --> 01:39:58.445
<v Speaker 0>So I can do at PHP FPN,

01:39:58.445 --> 01:40:01.245
<v Speaker 0>and the service is going to map port

01:40:01.245 --> 01:40:04.050
<v Speaker 0>18,000.

01:40:05.330 --> 01:40:07.490
<v Speaker 0>And now our engine x, we can scale

01:40:07.490 --> 01:40:08.530
<v Speaker 0>that independently.

01:40:08.530 --> 01:40:09.890
<v Speaker 0>So we

01:40:09.890 --> 01:40:11.090
<v Speaker 0>can do a delete

01:40:11.250 --> 01:40:12.850
<v Speaker 0>deployment

01:40:12.850 --> 01:40:14.610
<v Speaker 0>PHP SPN.

01:40:15.090 --> 01:40:17.490
<v Speaker 0>I'm going to reapply all of our manifest.

01:40:22.025 --> 01:40:24.505
<v Speaker 0>Got something invalid in engine x.

01:40:25.945 --> 01:40:27.705
<v Speaker 0>Oh, yep. The volume, and I didn't stop

01:40:27.705 --> 01:40:28.265
<v Speaker 0>you across.

01:40:36.600 --> 01:40:38.840
<v Speaker 0>We apply all of those manifests,

01:40:39.000 --> 01:40:41.000
<v Speaker 0>and what we have now is that

01:40:42.920 --> 01:40:45.775
<v Speaker 0>we are PHP FPM is already running, engine

01:40:45.775 --> 01:40:48.494
<v Speaker 0>access to those can be scaled independently.

01:40:49.615 --> 01:40:51.775
<v Speaker 0>Fact, I could come into our

01:40:52.575 --> 01:40:54.014
<v Speaker 0>FPM

01:40:56.015 --> 01:40:58.175
<v Speaker 0>and modify the spec replicas.

01:40:58.175 --> 01:41:00.495
<v Speaker 0>I'll say two. And and, in fact, let's

01:41:00.495 --> 01:41:00.735
<v Speaker 0>say,

01:41:01.600 --> 01:41:02.960
<v Speaker 0>five. I don't know if these are all

01:41:02.960 --> 01:41:05.679
<v Speaker 0>scheduled based on my laptop constraints, but

01:41:06.080 --> 01:41:08.800
<v Speaker 0>we're maybe two NGINX and five FPM.

01:41:08.880 --> 01:41:10.560
<v Speaker 0>We run apply again.

01:41:14.655 --> 01:41:16.575
<v Speaker 0>And there we go. We've got five FPMs

01:41:16.575 --> 01:41:18.655
<v Speaker 0>to NZMX. Now what's different from the last

01:41:18.655 --> 01:41:20.655
<v Speaker 0>setup is that we now have a service

01:41:22.095 --> 01:41:23.455
<v Speaker 0>of PHP.

01:41:23.935 --> 01:41:25.535
<v Speaker 0>We can describe that service,

01:41:27.660 --> 01:41:29.500
<v Speaker 0>and we can see all the endpoints from

01:41:29.500 --> 01:41:30.699
<v Speaker 0>all of the bugs.

01:41:31.100 --> 01:41:32.860
<v Speaker 0>And if I port forward,

01:41:35.500 --> 01:41:36.619
<v Speaker 0>forward

01:41:38.060 --> 01:41:39.260
<v Speaker 0>engine x,

01:41:39.739 --> 01:41:40.780
<v Speaker 0>grab the first one,

01:41:43.995 --> 01:41:44.715
<v Speaker 0>Then

01:41:45.515 --> 01:41:46.395
<v Speaker 0>that works.

01:41:48.315 --> 01:41:50.475
<v Speaker 0>In fact, then going over the TCP stack

01:41:50.475 --> 01:41:52.475
<v Speaker 0>hasn't really modified

01:41:52.475 --> 01:41:53.435
<v Speaker 0>the time too much.

01:41:54.250 --> 01:41:55.530
<v Speaker 0>It's still really bad.

01:41:58.570 --> 01:42:00.730
<v Speaker 0>And that's it. So now you can choose

01:42:00.730 --> 01:42:02.490
<v Speaker 0>whatever fits your model. Because

01:42:08.025 --> 01:42:10.505
<v Speaker 0>I mean, the overhead of running NGINX is

01:42:10.825 --> 01:42:14.185
<v Speaker 0>relatively small. Running as a safeguard at APM,

01:42:14.185 --> 01:42:16.185
<v Speaker 0>I generally think it's okay. I'm not throwing

01:42:16.185 --> 01:42:18.345
<v Speaker 0>away too much resources. I'm gonna be consumed.

01:42:19.090 --> 01:42:21.489
<v Speaker 0>But if you do really want to deploy

01:42:21.489 --> 01:42:23.810
<v Speaker 0>and scale them separately, then that would be

01:42:23.810 --> 01:42:25.090
<v Speaker 0>how you do it.

01:42:26.050 --> 01:42:28.370
<v Speaker 0>Alright. I'm going to delete those resources.

01:42:31.425 --> 01:42:32.705
<v Speaker 0>They're all going away.

01:42:34.305 --> 01:42:35.905
<v Speaker 0>Next steps. So

01:42:37.745 --> 01:42:39.344
<v Speaker 0>I am going to

01:42:39.665 --> 01:42:42.625
<v Speaker 0>push this repository up. I've just forgotten where

01:42:42.625 --> 01:42:43.825
<v Speaker 0>that was or it just joined.

01:42:44.880 --> 01:42:48.639
<v Speaker 0>It is on getlab.com/rawkode/phpexamples.

01:42:48.880 --> 01:42:51.120
<v Speaker 0>The codes are from today will exist in

01:42:51.120 --> 01:42:53.119
<v Speaker 0>Kubernetes and Docker.

01:42:53.679 --> 01:42:55.840
<v Speaker 0>I do plan to do another session

01:42:57.045 --> 01:42:58.804
<v Speaker 0>either next week or the following week, where

01:42:58.804 --> 01:43:00.965
<v Speaker 0>we talk about using Kubernetes for local development

01:43:00.965 --> 01:43:03.045
<v Speaker 0>as well. We're just, you know, removing Docker

01:43:03.045 --> 01:43:03.844
<v Speaker 0>completely.

01:43:04.565 --> 01:43:05.124
<v Speaker 0>Because

01:43:05.844 --> 01:43:07.525
<v Speaker 0>it was kind of a couple of questions

01:43:07.525 --> 01:43:08.485
<v Speaker 0>early on,

01:43:08.645 --> 01:43:11.445
<v Speaker 0>I will also push a Laravel version of

01:43:11.445 --> 01:43:11.925
<v Speaker 0>this

01:43:13.040 --> 01:43:15.040
<v Speaker 0>some point today or tomorrow morning.

01:43:15.840 --> 01:43:18.000
<v Speaker 0>The only difference is gonna be between Laravel

01:43:18.000 --> 01:43:19.680
<v Speaker 0>and the slim framework stuff that we did

01:43:19.680 --> 01:43:21.760
<v Speaker 0>today. It's just that it will have a

01:43:21.760 --> 01:43:22.960
<v Speaker 0>little bit of extra

01:43:23.360 --> 01:43:25.840
<v Speaker 0>automation around handling that build step with the

01:43:25.840 --> 01:43:28.264
<v Speaker 0>Mode. Js stuff. The only thing that changes

01:43:28.264 --> 01:43:30.344
<v Speaker 0>is just the Docker file has another layer

01:43:30.344 --> 01:43:31.624
<v Speaker 0>that does the

01:43:32.185 --> 01:43:33.624
<v Speaker 0>the asset compilation,

01:43:34.425 --> 01:43:35.385
<v Speaker 0>and that's it.

01:43:36.344 --> 01:43:38.505
<v Speaker 0>There's not really a lot extra to add

01:43:38.505 --> 01:43:38.744
<v Speaker 0>there.

01:43:39.790 --> 01:43:41.710
<v Speaker 0>But I I wanna make sure that I

01:43:41.710 --> 01:43:43.870
<v Speaker 0>provide everything that's required. So

01:43:44.510 --> 01:43:45.390
<v Speaker 0>let's

01:43:45.790 --> 01:43:47.790
<v Speaker 0>do that. Thank you very much for joining

01:43:47.790 --> 01:43:49.470
<v Speaker 0>me. Hope that was useful, and feel free

01:43:49.470 --> 01:43:51.150
<v Speaker 0>to leave more comments. You can grab me

01:43:51.150 --> 01:43:52.910
<v Speaker 0>on Twitter if you want to ask any

01:43:52.910 --> 01:43:55.205
<v Speaker 0>questions afterwards. I'm always happy to help people

01:43:55.205 --> 01:43:56.885
<v Speaker 0>out. Feel free to get in touch, and

01:43:56.885 --> 01:43:58.565
<v Speaker 0>thank you for joining me. It's been good

01:43:58.565 --> 01:44:00.005
<v Speaker 0>fun. Have a nice day.
