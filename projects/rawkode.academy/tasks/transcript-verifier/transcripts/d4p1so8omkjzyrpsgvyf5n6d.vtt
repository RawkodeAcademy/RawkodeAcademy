WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 890ebcb5-7ec4-4a6e-bae5-4f85869a7874
Created: 2025-04-29T18:19:51.168Z
Duration: 7203.8813
Channels: 1

00:00:48.875 --> 00:00:51.835
<v Speaker 0>Hello, and welcome to Rawkode Live.

00:00:52.440 --> 00:00:54.840
<v Speaker 0>Today's episode, we are going to be hacking

00:00:54.840 --> 00:00:56.680
<v Speaker 0>and building a GraphQL

00:00:56.680 --> 00:00:59.879
<v Speaker 0>client and a WebAssembly with Rust.

00:01:00.199 --> 00:01:01.800
<v Speaker 0>Now before we get started on that, there

00:01:01.800 --> 00:01:03.479
<v Speaker 0>is just a little bit of housekeeping.

00:01:03.800 --> 00:01:05.880
<v Speaker 0>If you have not subscribed to the YouTube

00:01:05.880 --> 00:01:08.495
<v Speaker 0>channel, please do so now. You can click

00:01:08.495 --> 00:01:10.175
<v Speaker 0>subscribe, click the bell, and you will get

00:01:10.175 --> 00:01:12.655
<v Speaker 0>notifications for all new episodes of Rawkode live

00:01:12.815 --> 00:01:15.135
<v Speaker 0>where we'll be exploring the cloud native landscape

00:01:15.135 --> 00:01:17.055
<v Speaker 0>and providing learning materials for us all to

00:01:17.055 --> 00:01:18.095
<v Speaker 0>get through this mess together.

00:01:18.830 --> 00:01:20.590
<v Speaker 0>Also, if you wanna chat and like to

00:01:20.590 --> 00:01:22.750
<v Speaker 0>chat, there is a Discord channel available at

00:01:22.750 --> 00:01:24.030
<v Speaker 0>Rawkode.chat.

00:01:24.110 --> 00:01:25.630
<v Speaker 0>Come and join us and say hello. We

00:01:25.630 --> 00:01:27.950
<v Speaker 0>talk about cloud native Kubernetes and all things

00:01:27.950 --> 00:01:28.750
<v Speaker 0>in between.

00:01:29.710 --> 00:01:31.790
<v Speaker 0>That is it. Nice and easy. Now in

00:01:31.790 --> 00:01:33.630
<v Speaker 0>order to help us on our journey today,

00:01:33.630 --> 00:01:36.165
<v Speaker 0>I am joined by Connor and Francis. Hello,

00:01:36.165 --> 00:01:37.445
<v Speaker 0>both. How are you today?

00:01:38.725 --> 00:01:39.525
<v Speaker 1>Doing good.

00:01:40.564 --> 00:01:43.284
<v Speaker 0>Well, thank you for for joining me. Do

00:01:43.284 --> 00:01:44.485
<v Speaker 0>you want me to start with a little

00:01:44.485 --> 00:01:46.165
<v Speaker 0>bit of an introduction? We'll start with you,

00:01:46.165 --> 00:01:47.685
<v Speaker 0>Connor, just because you're next to me, and

00:01:47.685 --> 00:01:49.365
<v Speaker 0>then Francis, if you wanna take over and

00:01:49.365 --> 00:01:50.564
<v Speaker 0>tell us a little bit about yourself.

00:01:51.920 --> 00:01:54.880
<v Speaker 2>Yeah. I switched headphones last second there. Can

00:01:54.880 --> 00:01:56.720
<v Speaker 2>you still hear me alright? Yes. We can

00:01:56.720 --> 00:01:59.200
<v Speaker 0>hear you all good. Okay. Great. Yeah. So

00:01:59.200 --> 00:02:01.440
<v Speaker 2>my name is Connor. I I created the

00:02:01.440 --> 00:02:03.840
<v Speaker 2>Suborbital family of open source projects.

00:02:04.000 --> 00:02:06.505
<v Speaker 2>I I've been a Go developer for a

00:02:06.505 --> 00:02:08.505
<v Speaker 2>long time, but, for the last year and

00:02:08.505 --> 00:02:10.425
<v Speaker 2>a half or two years, I've been delving

00:02:10.425 --> 00:02:12.825
<v Speaker 2>into the world of WebAssembly, trying to build,

00:02:13.305 --> 00:02:15.305
<v Speaker 2>cloud native specifically

00:02:15.465 --> 00:02:16.825
<v Speaker 2>around WebAssembly.

00:02:16.825 --> 00:02:17.705
<v Speaker 2>And so

00:02:18.100 --> 00:02:19.460
<v Speaker 2>the Suborbital

00:02:19.620 --> 00:02:21.620
<v Speaker 2>family of projects is my way of, you

00:02:21.620 --> 00:02:24.420
<v Speaker 2>know, building the the ecosystem around WebAssembly that

00:02:24.420 --> 00:02:26.100
<v Speaker 2>I, you know, wanna use as a developer

00:02:26.100 --> 00:02:26.900
<v Speaker 2>myself.

00:02:29.460 --> 00:02:32.015
<v Speaker 1>My name is Francis. I've been a JavaScript

00:02:32.015 --> 00:02:34.894
<v Speaker 1>developer for, I don't know, ten some odd

00:02:34.894 --> 00:02:35.695
<v Speaker 1>years.

00:02:36.415 --> 00:02:37.455
<v Speaker 1>And I've been making

00:02:37.855 --> 00:02:39.614
<v Speaker 1>a lot of serverless

00:02:39.614 --> 00:02:42.575
<v Speaker 1>web apps for professionally for a while now.

00:02:43.660 --> 00:02:44.700
<v Speaker 1>And so

00:02:45.420 --> 00:02:46.380
<v Speaker 1>recently,

00:02:46.540 --> 00:02:50.300
<v Speaker 1>I joined Shopify to work on a WebAssembly

00:02:51.020 --> 00:02:51.900
<v Speaker 1>platform,

00:02:51.980 --> 00:02:54.140
<v Speaker 1>which is a lot of overlap with Suborbital,

00:02:54.140 --> 00:02:57.020
<v Speaker 1>and that's how I met Connor. And

00:02:56.475 --> 00:02:58.315
<v Speaker 1>I'm a big fan of GraphQL

00:02:58.315 --> 00:02:59.995
<v Speaker 1>in serverless environments.

00:03:01.195 --> 00:03:02.955
<v Speaker 0>Awesome. Thank you both for sharing.

00:03:03.195 --> 00:03:05.355
<v Speaker 0>Yeah. I've gotta say, I'm really excited too.

00:03:05.355 --> 00:03:06.555
<v Speaker 0>Like, I I'm gonna be honest. I have

00:03:06.555 --> 00:03:08.395
<v Speaker 0>no idea what we're doing today. But whenever

00:03:08.395 --> 00:03:09.755
<v Speaker 0>I hear WebAssembly,

00:03:09.755 --> 00:03:10.555
<v Speaker 0>GraphQL,

00:03:10.555 --> 00:03:13.070
<v Speaker 0>Rust, I'm immediately sold and just wanna start

00:03:13.070 --> 00:03:14.110
<v Speaker 0>having some fun.

00:03:14.430 --> 00:03:16.910
<v Speaker 0>So, Connor, you had this this idea. Do

00:03:16.910 --> 00:03:18.030
<v Speaker 0>you wanna give us a little bit of

00:03:18.030 --> 00:03:19.710
<v Speaker 0>a context on what we're gonna do?

00:03:21.070 --> 00:03:24.445
<v Speaker 2>Yeah. For sure. So with the, you know,

00:03:24.445 --> 00:03:25.405
<v Speaker 2>Suborbital

00:03:25.405 --> 00:03:27.965
<v Speaker 2>open source libraries, one of the things that

00:03:28.045 --> 00:03:31.005
<v Speaker 2>people have been requesting of me since the

00:03:31.005 --> 00:03:33.325
<v Speaker 2>projects have been out in public is the

00:03:33.325 --> 00:03:36.560
<v Speaker 2>ability to make calls from a WebAssembly module

00:03:36.560 --> 00:03:40.240
<v Speaker 2>running inside of reactor or Atmo, our two

00:03:40.240 --> 00:03:43.360
<v Speaker 2>main projects, out to a GraphQL endpoint to

00:03:43.360 --> 00:03:45.440
<v Speaker 2>be able to fetch data from an API,

00:03:45.600 --> 00:03:48.240
<v Speaker 2>like GitHub's API or Shopify's

00:03:48.240 --> 00:03:49.760
<v Speaker 2>API or or whatever. So

00:03:50.375 --> 00:03:51.255
<v Speaker 2>I thought,

00:03:51.575 --> 00:03:53.015
<v Speaker 2>you know what? I

00:03:53.334 --> 00:03:55.655
<v Speaker 2>I've done a little bit of GraphQL in

00:03:55.655 --> 00:03:57.575
<v Speaker 2>the past. I'm not the most, you know,

00:03:57.575 --> 00:03:59.495
<v Speaker 2>experienced person with it.

00:03:59.974 --> 00:04:02.534
<v Speaker 2>So why not, you know, go a little

00:04:02.534 --> 00:04:03.814
<v Speaker 2>out of my comfort zone and try to

00:04:03.814 --> 00:04:04.614
<v Speaker 2>build this thing

00:04:05.140 --> 00:04:07.220
<v Speaker 2>live on the air and and try to

00:04:07.220 --> 00:04:10.500
<v Speaker 2>get our WebAssembly modules talking to a GraphQL

00:04:10.740 --> 00:04:13.380
<v Speaker 2>back end and see what happens. Now for

00:04:13.380 --> 00:04:15.540
<v Speaker 1>people who may not be aware, why isn't

00:04:15.540 --> 00:04:17.700
<v Speaker 1>this as easy as just getting an HTTP

00:04:17.700 --> 00:04:19.380
<v Speaker 1>client and and using it?

00:04:20.894 --> 00:04:21.855
<v Speaker 2>Yeah. So

00:04:22.495 --> 00:04:24.495
<v Speaker 2>things get a little tricky

00:04:24.575 --> 00:04:27.055
<v Speaker 2>when trying to have a WebAssembly module that

00:04:27.055 --> 00:04:29.055
<v Speaker 2>communicates with the outside world because there's a

00:04:29.055 --> 00:04:32.575
<v Speaker 2>sandbox around that module that means that, you

00:04:32.575 --> 00:04:34.095
<v Speaker 2>know, the the module is not allowed to

00:04:34.095 --> 00:04:35.215
<v Speaker 2>just do whatever it wants.

00:04:35.889 --> 00:04:38.849
<v Speaker 2>The the host system has to actually grant

00:04:38.849 --> 00:04:41.410
<v Speaker 2>it, you know, the ability to

00:04:41.729 --> 00:04:45.169
<v Speaker 2>to do anything, really. So we have to

00:04:45.169 --> 00:04:45.570
<v Speaker 2>allow

00:04:45.970 --> 00:04:48.449
<v Speaker 2>these modules to access the outside world in

00:04:48.449 --> 00:04:49.169
<v Speaker 2>a safe way

00:04:49.705 --> 00:04:51.945
<v Speaker 2>by actually defining these capabilities

00:04:51.945 --> 00:04:54.185
<v Speaker 2>on the host side and then making them

00:04:54.185 --> 00:04:55.465
<v Speaker 2>available to the module.

00:04:57.625 --> 00:04:58.825
<v Speaker 0>It sounds tricky.

00:05:00.025 --> 00:05:00.665
<v Speaker 2>Yeah.

00:05:01.225 --> 00:05:03.065
<v Speaker 1>And it it sounds like maybe there's not

00:05:03.065 --> 00:05:05.340
<v Speaker 1>a standard there yet, which means, like, that

00:05:05.340 --> 00:05:07.259
<v Speaker 1>we can't, like, say, oh, yeah. Turn on

00:05:07.259 --> 00:05:09.979
<v Speaker 1>network, and then now they can now it

00:05:09.979 --> 00:05:11.580
<v Speaker 1>can make these GraphQL calls.

00:05:11.660 --> 00:05:12.940
<v Speaker 1>Or is that not the or or or

00:05:12.940 --> 00:05:14.060
<v Speaker 1>is there a reason why we don't wanna

00:05:14.060 --> 00:05:14.380
<v Speaker 1>do that?

00:05:15.675 --> 00:05:17.915
<v Speaker 2>So there is an up and coming standard

00:05:17.915 --> 00:05:19.755
<v Speaker 2>that's being adopted more and more in the

00:05:19.755 --> 00:05:22.315
<v Speaker 2>industry called WASI, which is the WebAssembly system

00:05:22.315 --> 00:05:23.035
<v Speaker 2>interface,

00:05:23.355 --> 00:05:25.835
<v Speaker 2>and more and more capabilities are being added

00:05:25.835 --> 00:05:27.275
<v Speaker 2>to that all the time. But,

00:05:28.080 --> 00:05:31.120
<v Speaker 2>you know, not everything's available just yet. It's

00:05:31.120 --> 00:05:32.560
<v Speaker 2>not fully comprehensive.

00:05:32.640 --> 00:05:33.680
<v Speaker 2>And so,

00:05:33.760 --> 00:05:34.720
<v Speaker 2>you know, we're

00:05:34.960 --> 00:05:37.520
<v Speaker 2>gonna try to build something that would maybe

00:05:37.520 --> 00:05:39.600
<v Speaker 2>end up in Wazee one day, this this

00:05:39.600 --> 00:05:41.845
<v Speaker 2>interface that we're gonna build today. Yeah. Though,

00:05:41.845 --> 00:05:43.525
<v Speaker 0>I think if I remember correctly, the last

00:05:43.525 --> 00:05:45.205
<v Speaker 0>time I looked at Wazi, they didn't actually

00:05:45.205 --> 00:05:47.365
<v Speaker 0>have BSD socket share. Right? There's there's no

00:05:47.365 --> 00:05:48.085
<v Speaker 0>networking.

00:05:49.125 --> 00:05:52.085
<v Speaker 2>Yeah. There's there's some proposals in flight that

00:05:52.085 --> 00:05:54.164
<v Speaker 2>are currently working on adding all of that

00:05:54.164 --> 00:05:55.125
<v Speaker 2>to Wazi,

00:05:55.125 --> 00:05:56.085
<v Speaker 2>but not quite yet.

00:05:58.240 --> 00:06:00.320
<v Speaker 0>You just like making things difficult for yourself.

00:06:00.320 --> 00:06:03.120
<v Speaker 0>Right? And, do we want a full network?

00:06:03.120 --> 00:06:04.400
<v Speaker 1>Like like like, is that is that what

00:06:04.400 --> 00:06:06.560
<v Speaker 1>we want to expose for this GraphQL project

00:06:06.560 --> 00:06:07.120
<v Speaker 1>today?

00:06:08.000 --> 00:06:10.720
<v Speaker 2>We don't. We want the host to be

00:06:10.720 --> 00:06:11.360
<v Speaker 2>able to have

00:06:11.974 --> 00:06:14.215
<v Speaker 2>full control over what these modules are allowed

00:06:14.215 --> 00:06:16.455
<v Speaker 2>to do. So the sandbox that I talked

00:06:16.455 --> 00:06:17.335
<v Speaker 2>about before,

00:06:17.495 --> 00:06:20.535
<v Speaker 2>it's designed to be denied by default. So,

00:06:20.615 --> 00:06:22.615
<v Speaker 2>you know, if you just instantiate a WebAssembly

00:06:22.615 --> 00:06:26.055
<v Speaker 2>module with absolutely no, you know, preconfigured capabilities,

00:06:26.509 --> 00:06:28.509
<v Speaker 2>it can do nothing. It can't, you know,

00:06:28.509 --> 00:06:30.350
<v Speaker 2>reach outside of itself in any way, shape,

00:06:30.350 --> 00:06:32.430
<v Speaker 2>or form. We want the host to be

00:06:32.430 --> 00:06:35.310
<v Speaker 2>able to say exactly what these modules are

00:06:35.310 --> 00:06:37.070
<v Speaker 2>allowed to do and

00:06:37.310 --> 00:06:39.229
<v Speaker 2>preferably be able to programmatically

00:06:39.229 --> 00:06:41.949
<v Speaker 2>configure that when we're running our application. So

00:06:42.045 --> 00:06:43.885
<v Speaker 2>we're gonna try to make all of that

00:06:43.885 --> 00:06:44.925
<v Speaker 2>happen today.

00:06:45.245 --> 00:06:46.605
<v Speaker 1>So for our client,

00:06:46.925 --> 00:06:49.565
<v Speaker 1>would it be, would it be an HTTP

00:06:49.565 --> 00:06:51.565
<v Speaker 1>client that we were making, or would we

00:06:51.565 --> 00:06:53.245
<v Speaker 1>wanna make something GraphQL specific?

00:06:54.850 --> 00:06:55.569
<v Speaker 2>So,

00:06:56.610 --> 00:07:00.130
<v Speaker 2>Reaktor already has a generic HTTP,

00:07:00.449 --> 00:07:01.170
<v Speaker 2>client.

00:07:01.250 --> 00:07:03.729
<v Speaker 2>I wanna create something that's very specific to

00:07:03.729 --> 00:07:04.770
<v Speaker 2>GraphQL.

00:07:05.410 --> 00:07:06.210
<v Speaker 1>Alright.

00:07:07.250 --> 00:07:07.569
<v Speaker 1>Yeah.

00:07:08.425 --> 00:07:11.465
<v Speaker 1>Okay. I I I think I understand what's

00:07:11.465 --> 00:07:13.865
<v Speaker 0>happening here. Right? But because the WebAssembly doesn't

00:07:13.865 --> 00:07:15.785
<v Speaker 0>have these parameters baked in, we're gonna be

00:07:15.785 --> 00:07:18.425
<v Speaker 0>adding this to the reactor project,

00:07:18.425 --> 00:07:20.345
<v Speaker 0>which is gonna expose hooks somehow to the

00:07:20.345 --> 00:07:22.025
<v Speaker 0>WebAssembly to be able to make these calls.

00:07:22.420 --> 00:07:23.060
<v Speaker 0>Okay.

00:07:23.380 --> 00:07:25.540
<v Speaker 0>And now That's right. For anyone that's not

00:07:25.540 --> 00:07:29.300
<v Speaker 0>familiar with Suborbital, Atmore, Reactor, etcetera, I'm gonna

00:07:29.300 --> 00:07:31.140
<v Speaker 0>show the website here, but can you give

00:07:31.140 --> 00:07:33.300
<v Speaker 0>us the the overview?

00:07:34.100 --> 00:07:35.060
<v Speaker 2>Absolutely.

00:07:35.380 --> 00:07:37.255
<v Speaker 2>So Suborbital

00:07:37.255 --> 00:07:40.455
<v Speaker 2>is a collection of open source projects, and,

00:07:41.175 --> 00:07:43.495
<v Speaker 2>there are three that I refer to as

00:07:43.495 --> 00:07:46.775
<v Speaker 2>the building blocks. So that includes Reaktor

00:07:46.775 --> 00:07:48.855
<v Speaker 2>as well as Vector and Grav.

00:07:49.340 --> 00:07:52.620
<v Speaker 2>Vector and Grav are networking libraries for Go,

00:07:52.780 --> 00:07:55.660
<v Speaker 2>for HTTP servers and async communication.

00:07:55.819 --> 00:07:57.260
<v Speaker 2>But Reaktor itself

00:07:57.340 --> 00:07:59.659
<v Speaker 2>is a job scheduler, so it's designed to

00:07:59.659 --> 00:08:03.085
<v Speaker 2>take tons of jobs as input, and then

00:08:03.085 --> 00:08:06.764
<v Speaker 2>it has it'll create workers internally to efficiently

00:08:06.764 --> 00:08:08.285
<v Speaker 2>handle all of that work.

00:08:08.764 --> 00:08:10.284
<v Speaker 2>And one of the ways that you can

00:08:10.284 --> 00:08:13.085
<v Speaker 2>create a reactor worker is with a WebAssembly

00:08:13.085 --> 00:08:15.004
<v Speaker 2>module. So that's how we're gonna go about

00:08:15.004 --> 00:08:15.725
<v Speaker 2>it today.

00:08:16.125 --> 00:08:18.660
<v Speaker 2>And then the you know, I call it

00:08:18.660 --> 00:08:20.100
<v Speaker 2>the batteries included

00:08:20.259 --> 00:08:20.900
<v Speaker 2>project

00:08:21.060 --> 00:08:23.780
<v Speaker 2>is called Atmo, and this builds on top

00:08:23.780 --> 00:08:26.020
<v Speaker 2>of those three building blocks to create a

00:08:26.020 --> 00:08:28.420
<v Speaker 2>more user friendly version

00:08:28.979 --> 00:08:31.780
<v Speaker 2>of, you know, WebAssembly as a cloud native

00:08:31.780 --> 00:08:33.779
<v Speaker 2>platform. So it allows you to define

00:08:34.155 --> 00:08:36.555
<v Speaker 2>full, you know, server API

00:08:36.555 --> 00:08:37.595
<v Speaker 2>applications

00:08:38.075 --> 00:08:39.515
<v Speaker 2>with a declarative

00:08:39.595 --> 00:08:41.915
<v Speaker 2>file called the directive, and then it uses

00:08:41.915 --> 00:08:44.715
<v Speaker 2>WebAssembly modules to actually handle the different things

00:08:44.715 --> 00:08:48.029
<v Speaker 2>that you described for that application. So we're

00:08:48.029 --> 00:08:49.550
<v Speaker 2>gonna be working at the reactor level. So

00:08:49.550 --> 00:08:51.870
<v Speaker 2>it's actually one level down from Atmo because

00:08:51.870 --> 00:08:54.110
<v Speaker 2>that's where all of the WebAssembly internals happen.

00:08:54.110 --> 00:08:56.270
<v Speaker 2>And then, hopefully, the the goal is that

00:08:56.270 --> 00:08:58.030
<v Speaker 2>I'll be able to, you know,

00:08:58.590 --> 00:09:01.630
<v Speaker 2>import all of that functionality functionality we build

00:09:01.630 --> 00:09:03.925
<v Speaker 2>today into Atmo so that you'll be able

00:09:03.925 --> 00:09:06.245
<v Speaker 2>to get the advantages of this GraphQL client

00:09:06.245 --> 00:09:08.324
<v Speaker 2>in in either one, whichever you prefer to

00:09:08.324 --> 00:09:08.805
<v Speaker 2>use.

00:09:12.245 --> 00:09:14.884
<v Speaker 2>That sounds very familiar to what we're building

00:09:14.884 --> 00:09:15.524
<v Speaker 1>at Shopify,

00:09:17.000 --> 00:09:18.360
<v Speaker 1>which is actually one of the reasons why

00:09:18.360 --> 00:09:19.240
<v Speaker 1>we know each other.

00:09:20.360 --> 00:09:22.040
<v Speaker 1>Yeah. So Do you wanna share a little

00:09:22.040 --> 00:09:23.240
<v Speaker 0>bit about that as well?

00:09:24.279 --> 00:09:24.839
<v Speaker 1>Yeah.

00:09:26.040 --> 00:09:28.680
<v Speaker 1>So we have the Scripps platform. We just

00:09:28.680 --> 00:09:29.879
<v Speaker 1>announced that at Unite

00:09:30.565 --> 00:09:32.485
<v Speaker 1>a few days ago, which is Shopify's big

00:09:32.485 --> 00:09:33.525
<v Speaker 1>developer conference.

00:09:34.005 --> 00:09:35.685
<v Speaker 1>All that stuff's up on YouTube somewhere. Yeah.

00:09:35.685 --> 00:09:37.605
<v Speaker 1>You'll be able to find it. Check this,

00:09:37.605 --> 00:09:40.084
<v Speaker 1>I think shop shopify.eng,

00:09:40.245 --> 00:09:41.125
<v Speaker 1>on Twitter.

00:09:42.005 --> 00:09:44.485
<v Speaker 1>And we have this problem

00:09:44.780 --> 00:09:45.420
<v Speaker 1>where,

00:09:46.060 --> 00:09:48.060
<v Speaker 1>our stores get a lot of traffic, and

00:09:48.060 --> 00:09:50.220
<v Speaker 1>we have third party apps. And they have

00:09:50.220 --> 00:09:51.500
<v Speaker 1>their web servers, and they run, and they

00:09:51.500 --> 00:09:53.260
<v Speaker 1>talk to our API. And that's great. Except

00:09:53.260 --> 00:09:55.100
<v Speaker 1>when you get a lot of traffic, they

00:09:55.100 --> 00:09:56.860
<v Speaker 1>can fall over if if they're in the

00:09:56.860 --> 00:09:58.060
<v Speaker 1>critical path. And so we have to keep

00:09:58.060 --> 00:09:59.420
<v Speaker 1>them out of the critical path of, like,

00:09:59.634 --> 00:10:00.995
<v Speaker 1>very performance things,

00:10:01.475 --> 00:10:02.435
<v Speaker 1>like checkout.

00:10:03.394 --> 00:10:05.634
<v Speaker 1>So we have this project, this this app

00:10:05.634 --> 00:10:06.755
<v Speaker 1>called Scripts.

00:10:07.394 --> 00:10:08.675
<v Speaker 1>You know, if you're a large merchant, you

00:10:08.675 --> 00:10:10.355
<v Speaker 1>get to use it to customize your checkout.

00:10:10.595 --> 00:10:12.194
<v Speaker 1>And it runs code on our servers

00:10:13.040 --> 00:10:15.279
<v Speaker 1>during checkout. And we're able to do that

00:10:15.279 --> 00:10:16.480
<v Speaker 1>by sandboxing

00:10:16.800 --> 00:10:19.440
<v Speaker 1>using much older technologies than WebAssembly.

00:10:19.760 --> 00:10:21.920
<v Speaker 1>Well, we have this new checkout, which we

00:10:21.920 --> 00:10:24.079
<v Speaker 1>which we're talking we talked about at at

00:10:24.079 --> 00:10:26.885
<v Speaker 1>Unite. It's significantly faster. We can do as

00:10:26.885 --> 00:10:28.565
<v Speaker 1>much traffic as we did on the entire

00:10:28.565 --> 00:10:31.445
<v Speaker 1>platform during Black Friday, Cyber Monday, like, in

00:10:31.445 --> 00:10:33.445
<v Speaker 1>one store, like, the on the new on

00:10:33.445 --> 00:10:34.645
<v Speaker 1>the new checkout platform.

00:10:35.205 --> 00:10:36.565
<v Speaker 1>And that's like

00:10:37.125 --> 00:10:39.365
<v Speaker 1>oh, how was it? Over 200,000

00:10:39.365 --> 00:10:41.045
<v Speaker 1>checkouts just a minute or something like that.

00:10:41.970 --> 00:10:44.450
<v Speaker 1>So we we want to make sure we

00:10:44.450 --> 00:10:45.330
<v Speaker 1>can scale

00:10:45.650 --> 00:10:48.770
<v Speaker 1>this customization part too and so enter WebAssembly.

00:10:49.010 --> 00:10:51.410
<v Speaker 1>And so we wanna take scripts

00:10:51.730 --> 00:10:54.930
<v Speaker 1>compiled into WebAssembly and execute those to customize

00:10:54.930 --> 00:10:57.225
<v Speaker 1>our platform, you know, for your stores, you

00:10:57.225 --> 00:10:59.065
<v Speaker 1>know, during checkout. And honestly,

00:10:59.384 --> 00:11:01.625
<v Speaker 1>I wanna see a world where you write

00:11:01.625 --> 00:11:02.425
<v Speaker 1>your app,

00:11:02.985 --> 00:11:05.545
<v Speaker 1>to run on Shopify's infrastructure,

00:11:05.704 --> 00:11:07.625
<v Speaker 1>you know. And it's not you know, it's

00:11:07.625 --> 00:11:09.910
<v Speaker 1>like our APIs are APIs, but, like like,

00:11:09.910 --> 00:11:12.310
<v Speaker 1>WebAssembly can run anywhere. And it can run,

00:11:12.310 --> 00:11:14.470
<v Speaker 1>as we've talked about, safely, you know, in

00:11:14.470 --> 00:11:16.790
<v Speaker 1>sandbox. So so anyway, this there's just a

00:11:16.790 --> 00:11:19.190
<v Speaker 1>lot of overlap here. And the the better

00:11:19.190 --> 00:11:20.950
<v Speaker 1>the better the ecosystem and the better the

00:11:20.950 --> 00:11:22.310
<v Speaker 1>tools we have, the better the tools we

00:11:22.310 --> 00:11:24.630
<v Speaker 1>can provide, you know, and and capabilities we

00:11:24.630 --> 00:11:26.445
<v Speaker 1>can add to our platform. So, anyway, that

00:11:26.445 --> 00:11:27.565
<v Speaker 1>just makes me very happy.

00:11:29.644 --> 00:11:31.644
<v Speaker 0>Awesome. Well, it sounds like you are both

00:11:31.644 --> 00:11:34.045
<v Speaker 0>extremely qualified for today's task at hand, so

00:11:34.045 --> 00:11:36.205
<v Speaker 0>I am gonna sit back and watch.

00:11:37.485 --> 00:11:38.925
<v Speaker 0>And I'll do my best to probe the

00:11:38.925 --> 00:11:40.125
<v Speaker 0>questions as we go.

00:11:42.020 --> 00:11:43.220
<v Speaker 0>Let's get started.

00:11:43.700 --> 00:11:45.860
<v Speaker 0>What's what's what's step one here, Connor?

00:11:47.060 --> 00:11:47.620
<v Speaker 2>So

00:11:48.100 --> 00:11:50.980
<v Speaker 2>we're gonna start in the reactor code base,

00:11:50.980 --> 00:11:53.220
<v Speaker 2>and there's actually three

00:11:53.540 --> 00:11:57.264
<v Speaker 2>layers that we will need to concern ourselves

00:11:57.264 --> 00:11:57.904
<v Speaker 2>with.

00:11:58.384 --> 00:11:59.185
<v Speaker 2>There's

00:11:59.185 --> 00:12:00.785
<v Speaker 2>the actual

00:12:01.024 --> 00:12:03.505
<v Speaker 2>code to make the GraphQL request.

00:12:03.505 --> 00:12:07.105
<v Speaker 2>That's step one. Step two is defining the

00:12:07.105 --> 00:12:07.745
<v Speaker 2>interface

00:12:08.330 --> 00:12:10.090
<v Speaker 2>that the host

00:12:10.730 --> 00:12:11.770
<v Speaker 2>exposes

00:12:12.090 --> 00:12:14.490
<v Speaker 2>to the module and making sure that the

00:12:14.490 --> 00:12:16.650
<v Speaker 2>module can provide all of the information that

00:12:16.650 --> 00:12:17.770
<v Speaker 2>it needs to provide.

00:12:18.250 --> 00:12:20.250
<v Speaker 2>And then the third step will be

00:12:20.570 --> 00:12:21.930
<v Speaker 2>actually

00:12:21.495 --> 00:12:23.895
<v Speaker 2>switching gears over into,

00:12:24.135 --> 00:12:24.935
<v Speaker 2>Rust

00:12:25.095 --> 00:12:28.775
<v Speaker 2>to actually consume that host API. So we're

00:12:28.775 --> 00:12:31.975
<v Speaker 2>gonna add, you know, some capabilities to the

00:12:31.975 --> 00:12:35.780
<v Speaker 2>Suborbital rust library that can actually call into

00:12:35.780 --> 00:12:38.820
<v Speaker 2>that host function and take advantage of of

00:12:38.820 --> 00:12:39.700
<v Speaker 2>what we've built.

00:12:42.340 --> 00:12:45.140
<v Speaker 1>My Go is not any good.

00:12:46.980 --> 00:12:48.020
<v Speaker 1>My Rust is okay.

00:12:49.045 --> 00:12:50.645
<v Speaker 1>It's definitely We're all here to learn from

00:12:50.645 --> 00:12:52.245
<v Speaker 1>each other. GraphQL APIs

00:12:52.805 --> 00:12:53.205
<v Speaker 1>APIs

00:12:53.605 --> 00:12:54.405
<v Speaker 1>for this.

00:12:54.805 --> 00:12:55.525
<v Speaker 2>Right.

00:12:56.965 --> 00:13:00.885
<v Speaker 2>Cool. So we're gonna start in the capabilities

00:13:00.885 --> 00:13:03.925
<v Speaker 2>dot go file inside of the RT package

00:13:04.709 --> 00:13:07.110
<v Speaker 2>if you wanna open your tree up there.

00:13:07.750 --> 00:13:09.029
<v Speaker 2>Or you can oh, are you able to

00:13:09.029 --> 00:13:11.990
<v Speaker 2>follow me? Oh, that's even better. Yes. It's

00:13:11.990 --> 00:13:14.230
<v Speaker 2>been a while since I've used this fancy

00:13:14.230 --> 00:13:17.190
<v Speaker 2>Versus Code plugin, so this is awesome. Alright.

00:13:17.675 --> 00:13:19.915
<v Speaker 2>So right here is

00:13:20.795 --> 00:13:23.915
<v Speaker 2>what we call the capability struct. So this

00:13:23.915 --> 00:13:25.515
<v Speaker 2>is a collection

00:13:25.834 --> 00:13:26.394
<v Speaker 2>of

00:13:26.875 --> 00:13:30.074
<v Speaker 2>things that WebAssembly modules are allowed to utilize

00:13:30.074 --> 00:13:32.394
<v Speaker 2>when they're running inside of Reactor. So as

00:13:32.394 --> 00:13:34.630
<v Speaker 2>you can see, we've got a couple here.

00:13:34.630 --> 00:13:37.030
<v Speaker 2>We've got a logger. We've got an HTTP

00:13:37.030 --> 00:13:39.990
<v Speaker 2>client. We've got a file source to access

00:13:40.230 --> 00:13:43.110
<v Speaker 2>host files, and then we've got a cache.

00:13:43.110 --> 00:13:43.590
<v Speaker 2>So

00:13:44.870 --> 00:13:47.350
<v Speaker 2>we're gonna be essentially adding to this list

00:13:47.350 --> 00:13:50.135
<v Speaker 2>here, and we're gonna be adding a GraphQL

00:13:50.375 --> 00:13:52.615
<v Speaker 2>provider to this set of capabilities.

00:13:53.015 --> 00:13:53.575
<v Speaker 2>So

00:13:53.975 --> 00:13:56.295
<v Speaker 2>we can maybe start by taking a look

00:13:56.295 --> 00:13:56.855
<v Speaker 2>at

00:13:57.175 --> 00:13:59.335
<v Speaker 2>the simplest one, which is the logger so

00:13:59.335 --> 00:14:01.415
<v Speaker 2>that we can you know? Actually, the logger

00:14:01.415 --> 00:14:03.015
<v Speaker 2>is not a good example. Let's look at

00:14:03.015 --> 00:14:03.895
<v Speaker 2>the HTTP client.

00:14:04.910 --> 00:14:07.310
<v Speaker 2>The the logger just provides a logger object.

00:14:07.310 --> 00:14:08.350
<v Speaker 2>That's not as fun.

00:14:09.710 --> 00:14:12.029
<v Speaker 2>So it's really quite straightforward.

00:14:12.029 --> 00:14:13.150
<v Speaker 2>The the

00:14:14.190 --> 00:14:16.910
<v Speaker 2>the interface is just exposing

00:14:17.150 --> 00:14:19.390
<v Speaker 2>one function, and that is, you know, take

00:14:19.390 --> 00:14:21.445
<v Speaker 2>in an HTTP request

00:14:21.605 --> 00:14:24.884
<v Speaker 2>and provide either an HTTP response or an

00:14:24.884 --> 00:14:25.445
<v Speaker 2>error.

00:14:25.685 --> 00:14:28.805
<v Speaker 2>And because Go has its entire, you know,

00:14:28.805 --> 00:14:32.084
<v Speaker 2>networking stack completely built in, that amounts to

00:14:32.084 --> 00:14:35.150
<v Speaker 2>one line, you know, to to call the

00:14:35.150 --> 00:14:37.710
<v Speaker 2>the HTTP built in clients. Right?

00:14:38.270 --> 00:14:38.910
<v Speaker 2>But,

00:14:39.950 --> 00:14:41.310
<v Speaker 2>you know, this

00:14:41.390 --> 00:14:43.070
<v Speaker 2>part is only,

00:14:43.310 --> 00:14:45.230
<v Speaker 2>you know, the it's actually the most boring

00:14:45.230 --> 00:14:46.510
<v Speaker 2>part of what we're gonna do today. You

00:14:46.510 --> 00:14:48.990
<v Speaker 2>know, making the GraphQL call from Go is

00:14:48.990 --> 00:14:51.305
<v Speaker 2>is not actually gonna be the hard part.

00:14:51.385 --> 00:14:52.985
<v Speaker 2>The hard part is going to be defining

00:14:52.985 --> 00:14:54.665
<v Speaker 2>that interface between

00:14:54.825 --> 00:14:58.505
<v Speaker 2>the host and the WebAssembly module. So,

00:14:59.225 --> 00:15:01.625
<v Speaker 2>you know, this is going to be somewhat

00:15:01.625 --> 00:15:03.305
<v Speaker 2>similar to what we build today to make

00:15:03.305 --> 00:15:04.505
<v Speaker 2>a GraphQL

00:15:04.665 --> 00:15:05.145
<v Speaker 2>call,

00:15:05.640 --> 00:15:07.800
<v Speaker 2>but let's take a look at the you

00:15:07.800 --> 00:15:09.640
<v Speaker 2>know, what that interface would look like so

00:15:09.640 --> 00:15:10.760
<v Speaker 2>that we can get an idea of what

00:15:10.760 --> 00:15:11.560
<v Speaker 2>we're in for.

00:15:11.960 --> 00:15:13.400
<v Speaker 2>So Can I talk a bit about what

00:15:13.400 --> 00:15:14.680
<v Speaker 1>GraphQL expects?

00:15:15.560 --> 00:15:16.120
<v Speaker 2>Yeah.

00:15:16.360 --> 00:15:17.240
<v Speaker 2>How do we do that? Or we wanna

00:15:17.240 --> 00:15:18.440
<v Speaker 1>talk at a lower level first?

00:15:19.455 --> 00:15:21.615
<v Speaker 2>Yeah. If you wanna give maybe an overview

00:15:21.615 --> 00:15:23.775
<v Speaker 2>of what GraphQL is is designed to be

00:15:23.775 --> 00:15:25.935
<v Speaker 2>used for and and how maybe it's structured,

00:15:25.935 --> 00:15:26.735
<v Speaker 2>that would be great.

00:15:27.535 --> 00:15:28.095
<v Speaker 1>So

00:15:30.335 --> 00:15:31.935
<v Speaker 1>people always get mad when I make this

00:15:31.935 --> 00:15:33.775
<v Speaker 1>comparison, but have you ever used SOAP?

00:15:37.110 --> 00:15:39.110
<v Speaker 1>You know, so if

00:15:40.070 --> 00:15:42.870
<v Speaker 1>you have, you'll you'll understand. But, basically, there

00:15:42.870 --> 00:15:45.670
<v Speaker 1>is an HTTP endpoint you can post to

00:15:45.670 --> 00:15:46.870
<v Speaker 1>it. Sometimes you can get to it.

00:15:48.235 --> 00:15:50.875
<v Speaker 1>GraphQL actually doesn't care how you get to

00:15:50.875 --> 00:15:53.274
<v Speaker 1>it. It wants a couple things. It wants

00:15:53.274 --> 00:15:54.715
<v Speaker 1>a string that is a query.

00:15:55.115 --> 00:15:56.154
<v Speaker 1>It wants

00:15:56.875 --> 00:15:59.595
<v Speaker 1>a a hash that is your variables for

00:15:59.595 --> 00:16:02.290
<v Speaker 1>that query, if any. It wants an operation

00:16:02.290 --> 00:16:04.770
<v Speaker 1>name because your query can define multiple operations.

00:16:06.050 --> 00:16:06.930
<v Speaker 1>And it's

00:16:07.250 --> 00:16:09.570
<v Speaker 1>I was actually just looking at some other

00:16:09.570 --> 00:16:12.690
<v Speaker 1>stuff. There are extensions. So some servers will

00:16:12.690 --> 00:16:14.770
<v Speaker 1>take other inputs as well. There's a whole

00:16:14.770 --> 00:16:17.305
<v Speaker 1>file upload extension, all sorts of things. But

00:16:17.305 --> 00:16:19.144
<v Speaker 1>at the end of the day, it is

00:16:19.945 --> 00:16:21.385
<v Speaker 1>a couple things in,

00:16:22.024 --> 00:16:24.425
<v Speaker 1>mainly query variables and operation name. And then

00:16:24.425 --> 00:16:27.384
<v Speaker 1>you get an object out. And they don't

00:16:27.384 --> 00:16:29.625
<v Speaker 1>even declare it has to be JSON.

00:16:29.625 --> 00:16:30.665
<v Speaker 1>99%

00:16:30.665 --> 00:16:32.900
<v Speaker 1>of these things are JSON. I've seen seen

00:16:32.900 --> 00:16:34.420
<v Speaker 1>message pack and other stuff.

00:16:36.420 --> 00:16:38.340
<v Speaker 1>But but that has

00:16:38.660 --> 00:16:41.140
<v Speaker 1>two keys, data and error. And so you

00:16:41.140 --> 00:16:44.500
<v Speaker 1>get query variables operation name in and data

00:16:44.500 --> 00:16:45.940
<v Speaker 1>and errors out.

00:16:46.180 --> 00:16:47.060
<v Speaker 1>And

00:16:47.975 --> 00:16:50.455
<v Speaker 1>and that is, like, the basic API. People

00:16:50.455 --> 00:16:52.615
<v Speaker 1>took take this, put it over WebSockets, made

00:16:52.615 --> 00:16:53.975
<v Speaker 1>GraphQL subscriptions.

00:16:54.135 --> 00:16:55.495
<v Speaker 1>They've also taken this, put it in a

00:16:55.495 --> 00:16:57.575
<v Speaker 1>GET request, and now you can have cacheable

00:16:57.575 --> 00:16:59.255
<v Speaker 1>kinda, you know, GET, you know, for query

00:16:59.255 --> 00:17:01.095
<v Speaker 1>only, you know, GET request kind of things.

00:17:01.095 --> 00:17:02.615
<v Speaker 1>And there's all there's a whole slew of

00:17:02.615 --> 00:17:05.730
<v Speaker 1>extensions from Apollo and and a dozen other

00:17:05.730 --> 00:17:07.330
<v Speaker 1>companies out there trying to trying to make

00:17:07.330 --> 00:17:08.369
<v Speaker 1>a big in GraphQL.

00:17:08.530 --> 00:17:09.089
<v Speaker 1>But

00:17:09.490 --> 00:17:11.250
<v Speaker 1>the very basics, which is probably where we

00:17:11.250 --> 00:17:13.170
<v Speaker 1>should start, are those are those three inputs

00:17:13.170 --> 00:17:14.289
<v Speaker 1>and two outputs.

00:17:15.170 --> 00:17:15.810
<v Speaker 2>Absolutely.

00:17:16.635 --> 00:17:19.675
<v Speaker 2>So we're probably gonna be doing something fairly

00:17:19.675 --> 00:17:21.275
<v Speaker 2>similar to this today, which is why I

00:17:21.275 --> 00:17:22.955
<v Speaker 2>wanna kind of use it as the example.

00:17:22.955 --> 00:17:24.875
<v Speaker 2>So this is a generic HTTP

00:17:24.875 --> 00:17:25.755
<v Speaker 2>interface.

00:17:26.075 --> 00:17:28.395
<v Speaker 2>So, you know, where we, you know, we

00:17:28.395 --> 00:17:30.730
<v Speaker 2>started with that HTTP

00:17:30.730 --> 00:17:32.889
<v Speaker 2>client, this is the actual Go

00:17:33.049 --> 00:17:33.929
<v Speaker 2>implementation

00:17:33.929 --> 00:17:36.170
<v Speaker 2>of the HTTP client, but then we need

00:17:36.170 --> 00:17:37.049
<v Speaker 2>to define

00:17:37.210 --> 00:17:37.929
<v Speaker 2>the

00:17:38.010 --> 00:17:40.490
<v Speaker 2>you know, how the WebAssembly module will tell

00:17:40.490 --> 00:17:42.010
<v Speaker 2>the host that it wants to make one

00:17:42.010 --> 00:17:42.970
<v Speaker 2>of these requests.

00:17:43.290 --> 00:17:43.770
<v Speaker 2>So

00:17:44.345 --> 00:17:46.025
<v Speaker 2>we'll take a look at,

00:17:46.185 --> 00:17:49.065
<v Speaker 2>you know, this portion of the reactor project.

00:17:49.065 --> 00:17:50.585
<v Speaker 2>This is where we define

00:17:50.745 --> 00:17:52.184
<v Speaker 2>that interface.

00:17:52.185 --> 00:17:55.465
<v Speaker 2>So one of the quirks of WebAssembly is

00:17:55.465 --> 00:17:58.585
<v Speaker 2>that you can't take a go variable

00:17:58.745 --> 00:18:02.560
<v Speaker 2>and pass it and expect that Rust understands

00:18:02.560 --> 00:18:03.919
<v Speaker 2>that go variable.

00:18:04.080 --> 00:18:05.679
<v Speaker 2>You need to serialize

00:18:05.680 --> 00:18:08.480
<v Speaker 2>any information that you wanna pass in between

00:18:08.560 --> 00:18:11.360
<v Speaker 2>the module and the host so that, you

00:18:11.360 --> 00:18:14.135
<v Speaker 2>know, they can understand each other. Now, again,

00:18:14.135 --> 00:18:15.494
<v Speaker 2>WebAssembly is,

00:18:15.895 --> 00:18:18.534
<v Speaker 2>is evolving, and so there are some standards

00:18:18.534 --> 00:18:19.974
<v Speaker 2>that are being put in place,

00:18:20.375 --> 00:18:23.014
<v Speaker 2>to be able to actually natively share

00:18:23.095 --> 00:18:23.894
<v Speaker 2>memory

00:18:23.975 --> 00:18:26.054
<v Speaker 2>in the way that would be, you know,

00:18:26.054 --> 00:18:27.575
<v Speaker 2>maybe a little bit more efficient and a

00:18:27.575 --> 00:18:30.030
<v Speaker 2>little bit, easier to understand. But as it

00:18:30.030 --> 00:18:32.590
<v Speaker 2>stands today, we're gonna be doing some serializing

00:18:32.590 --> 00:18:35.070
<v Speaker 2>in order to pass information between. So

00:18:35.870 --> 00:18:39.550
<v Speaker 2>in Reaktor, when you expose a host function

00:18:39.550 --> 00:18:41.230
<v Speaker 2>to the WebAssembly module,

00:18:41.310 --> 00:18:43.310
<v Speaker 2>we define it, and it looks something like

00:18:43.310 --> 00:18:47.085
<v Speaker 2>this here. So the fetch URL host call

00:18:47.085 --> 00:18:49.325
<v Speaker 2>takes in a whole list of parameters, and

00:18:49.325 --> 00:18:51.325
<v Speaker 2>I'll kind of go through them each. So

00:18:51.325 --> 00:18:53.565
<v Speaker 2>first, we ask, okay. What's the HTTP method

00:18:53.565 --> 00:18:55.804
<v Speaker 2>that we're gonna be doing? And that is

00:18:55.804 --> 00:18:57.725
<v Speaker 2>a set of constants. You know, we either

00:18:57.725 --> 00:18:59.490
<v Speaker 2>gonna do a a get or a post

00:18:59.490 --> 00:19:01.170
<v Speaker 2>or a patch or delete, and those map

00:19:01.170 --> 00:19:02.690
<v Speaker 2>to numbers one through four.

00:19:03.090 --> 00:19:05.970
<v Speaker 2>So that's number one. Why?

00:19:07.490 --> 00:19:07.890
<v Speaker 1>Why

00:19:08.930 --> 00:19:09.410
<v Speaker 1>Why do they have

00:19:11.265 --> 00:19:13.825
<v Speaker 1>Yeah. Because That'll take us right. Want to,

00:19:14.145 --> 00:19:17.105
<v Speaker 2>yeah, we wanna minimize the amount of serializing

00:19:17.105 --> 00:19:19.105
<v Speaker 2>and deserializing that we have to do there

00:19:19.105 --> 00:19:20.625
<v Speaker 2>to be a little bit more efficient. So

00:19:20.625 --> 00:19:22.545
<v Speaker 2>anything that we can map down to a

00:19:22.545 --> 00:19:25.505
<v Speaker 2>simpler data type is usually a good idea.

00:19:28.510 --> 00:19:31.150
<v Speaker 1>Okay. So there's no there's no restrictions on

00:19:31.150 --> 00:19:33.390
<v Speaker 1>on the kinds of data types, though. So

00:19:33.390 --> 00:19:35.230
<v Speaker 1>if we really needed a string, we could

00:19:35.230 --> 00:19:36.510
<v Speaker 1>we could get we could get that string,

00:19:36.510 --> 00:19:38.270
<v Speaker 1>and I'm assuming that's what the URL how

00:19:38.270 --> 00:19:39.310
<v Speaker 1>the URL pointer works.

00:19:40.745 --> 00:19:43.144
<v Speaker 2>Kind of. So WebAssembly

00:19:43.304 --> 00:19:44.344
<v Speaker 2>naturally

00:19:45.225 --> 00:19:48.265
<v Speaker 2>does not have a string type. You can't

00:19:48.265 --> 00:19:49.705
<v Speaker 2>define a string.

00:19:51.065 --> 00:19:54.265
<v Speaker 2>But individual programming languages do have a string

00:19:54.265 --> 00:19:56.760
<v Speaker 2>type. So what do we do there? How

00:19:56.760 --> 00:19:59.399
<v Speaker 2>do we get a string to kind of

00:19:59.399 --> 00:20:01.720
<v Speaker 2>traverse that boundary between the host and the

00:20:01.720 --> 00:20:04.279
<v Speaker 2>module? And what we in order to do

00:20:04.279 --> 00:20:06.360
<v Speaker 2>that, we write the string to a particular

00:20:06.360 --> 00:20:08.440
<v Speaker 2>piece of memory, and then we pass a

00:20:08.440 --> 00:20:09.399
<v Speaker 2>pointer to that memory,

00:20:10.315 --> 00:20:12.395
<v Speaker 2>you know, in either direction so that, you

00:20:12.395 --> 00:20:14.075
<v Speaker 2>know, you know where to find it. So

00:20:14.075 --> 00:20:16.715
<v Speaker 2>when the when the WebAssembly module asks the

00:20:16.715 --> 00:20:18.475
<v Speaker 2>host to fetch a URL,

00:20:19.035 --> 00:20:20.795
<v Speaker 2>it is going to include

00:20:21.435 --> 00:20:24.555
<v Speaker 2>a pointer to the string in memory

00:20:25.060 --> 00:20:27.460
<v Speaker 2>where it can find that information, and then

00:20:27.460 --> 00:20:29.380
<v Speaker 2>it's gonna tell us the size of that

00:20:29.380 --> 00:20:31.700
<v Speaker 2>memory as well so that when the host

00:20:31.700 --> 00:20:34.580
<v Speaker 2>receives this function call, I'll I'll cover in

00:20:34.580 --> 00:20:36.820
<v Speaker 2>a second how it can actually go and

00:20:36.820 --> 00:20:39.620
<v Speaker 2>ask the module, hey. Give me this memory

00:20:39.620 --> 00:20:40.660
<v Speaker 2>at this pointer

00:20:41.035 --> 00:20:43.115
<v Speaker 2>so that I can figure out what URL

00:20:43.115 --> 00:20:44.875
<v Speaker 2>you were trying to tell me about.

00:20:45.035 --> 00:20:46.715
<v Speaker 2>And then we do the same thing for

00:20:46.715 --> 00:20:48.154
<v Speaker 2>the HTTP body.

00:20:49.675 --> 00:20:51.914
<v Speaker 2>So it's it's these kind of pairs

00:20:51.915 --> 00:20:53.115
<v Speaker 2>of of

00:20:53.435 --> 00:20:55.195
<v Speaker 2>data types that we're gonna be passing in

00:20:55.195 --> 00:20:57.280
<v Speaker 2>order to to accomplish this. It's a little

00:20:57.280 --> 00:20:58.240
<v Speaker 2>bit kludgy,

00:20:58.400 --> 00:20:58.960
<v Speaker 2>but,

00:20:59.280 --> 00:21:01.120
<v Speaker 2>you know, the the

00:21:01.840 --> 00:21:04.080
<v Speaker 2>advancement of the WebAssembly standard is gonna mean

00:21:04.080 --> 00:21:06.160
<v Speaker 2>we don't necessarily have to do this anymore

00:21:06.160 --> 00:21:06.640
<v Speaker 2>once,

00:21:07.120 --> 00:21:09.440
<v Speaker 2>once things get a little bit more you

00:21:09.440 --> 00:21:10.800
<v Speaker 2>know, a little bit further along.

00:21:11.935 --> 00:21:14.015
<v Speaker 2>So Now can I guess this is completely

00:21:14.015 --> 00:21:16.575
<v Speaker 1>safe to point to arbitrary places in memory?

00:21:18.175 --> 00:21:18.975
<v Speaker 2>Not always.

00:21:19.295 --> 00:21:20.015
<v Speaker 2>So

00:21:20.335 --> 00:21:23.135
<v Speaker 2>WebAssembly defines linear memory.

00:21:23.375 --> 00:21:24.895
<v Speaker 2>So there is actually

00:21:25.295 --> 00:21:27.055
<v Speaker 2>globally

00:21:26.330 --> 00:21:28.570
<v Speaker 2>exported blocks of memory that the host is

00:21:28.570 --> 00:21:31.370
<v Speaker 2>allowed to dig into and and grab. So

00:21:31.450 --> 00:21:33.690
<v Speaker 2>we have to define a contract between the

00:21:33.690 --> 00:21:35.929
<v Speaker 2>module and the host to say, you know,

00:21:36.010 --> 00:21:37.930
<v Speaker 2>you you you should be looking at this

00:21:37.930 --> 00:21:40.575
<v Speaker 2>piece of memory in order to safely, you

00:21:40.575 --> 00:21:42.735
<v Speaker 2>know, communicate with me. You can't just go

00:21:42.735 --> 00:21:43.695
<v Speaker 2>arbitrarily,

00:21:43.775 --> 00:21:46.575
<v Speaker 2>you know, poking around in there. And so

00:21:47.135 --> 00:21:48.815
<v Speaker 2>part of what Reactor does for you is

00:21:48.815 --> 00:21:50.575
<v Speaker 2>kind of handles that all for you to

00:21:50.575 --> 00:21:52.575
<v Speaker 2>ensure that it's be being done safely, and

00:21:52.575 --> 00:21:54.760
<v Speaker 2>and you're not just arbitrarily

00:21:54.760 --> 00:21:56.920
<v Speaker 2>messing around in the in the memory of

00:21:56.920 --> 00:21:58.200
<v Speaker 2>the WebAssembly module.

00:21:58.920 --> 00:21:59.799
<v Speaker 1>Makes sense.

00:22:00.440 --> 00:22:01.080
<v Speaker 2>Yeah.

00:22:01.320 --> 00:22:03.160
<v Speaker 2>So in order to reconstruct

00:22:03.160 --> 00:22:05.560
<v Speaker 2>that memory into a string, we have a

00:22:05.560 --> 00:22:07.800
<v Speaker 2>couple of, you know, helper functions that are

00:22:07.425 --> 00:22:09.425
<v Speaker 2>inside of Reactor. So there's this read memory

00:22:09.425 --> 00:22:12.385
<v Speaker 2>helper function here that allows us to take

00:22:12.385 --> 00:22:13.345
<v Speaker 2>that pointer

00:22:13.425 --> 00:22:15.825
<v Speaker 2>and the, you know, the size variable and

00:22:15.825 --> 00:22:16.465
<v Speaker 2>actually

00:22:17.505 --> 00:22:19.585
<v Speaker 2>pull that information out of the WebAssembly module

00:22:19.585 --> 00:22:23.185
<v Speaker 2>as it's running. So the the WebAssembly module

00:22:24.020 --> 00:22:26.580
<v Speaker 2>exposes its global memory to us,

00:22:26.980 --> 00:22:30.020
<v Speaker 2>and we can use that you know, the

00:22:30.020 --> 00:22:33.220
<v Speaker 2>pointer to access the data at a particular

00:22:33.539 --> 00:22:34.179
<v Speaker 2>point,

00:22:34.340 --> 00:22:36.260
<v Speaker 2>and then we can read the data to

00:22:36.260 --> 00:22:36.980
<v Speaker 2>a certain

00:22:37.385 --> 00:22:38.345
<v Speaker 2>endpoint.

00:22:38.745 --> 00:22:41.385
<v Speaker 2>And then, you know, because of the interface

00:22:41.385 --> 00:22:44.585
<v Speaker 2>we've defined, we're interpreting it as a string.

00:22:45.385 --> 00:22:46.825
<v Speaker 2>So once we,

00:22:47.145 --> 00:22:49.385
<v Speaker 2>you know, once we have read that memory

00:22:49.385 --> 00:22:51.625
<v Speaker 2>out of the WebAssembly module, we convert it

00:22:51.625 --> 00:22:53.810
<v Speaker 2>to a string to so that we can

00:22:53.810 --> 00:22:55.330
<v Speaker 2>use it as a URL, which is the

00:22:55.330 --> 00:22:56.930
<v Speaker 2>the thing that, you know, this function is

00:22:56.930 --> 00:22:58.289
<v Speaker 2>actually attempting to do.

00:23:02.450 --> 00:23:03.250
<v Speaker 2>Cool.

00:23:03.650 --> 00:23:04.370
<v Speaker 2>Any

00:23:04.530 --> 00:23:07.250
<v Speaker 2>any thoughts or questions from anyone at this

00:23:07.250 --> 00:23:07.410
<v Speaker 2>point?

00:23:08.575 --> 00:23:10.815
<v Speaker 0>So I've learned a lot in the last

00:23:10.815 --> 00:23:11.855
<v Speaker 0>five years.

00:23:13.135 --> 00:23:15.055
<v Speaker 0>I think it's really cool. So if I

00:23:15.055 --> 00:23:17.455
<v Speaker 0>understand this correctly, we have to define a

00:23:17.455 --> 00:23:18.735
<v Speaker 0>Go interface

00:23:18.735 --> 00:23:19.855
<v Speaker 0>that kind of

00:23:20.095 --> 00:23:21.455
<v Speaker 0>prescribes how

00:23:21.750 --> 00:23:23.830
<v Speaker 0>the Wasm side of things knows how to

00:23:23.830 --> 00:23:25.510
<v Speaker 0>make this request by

00:23:25.670 --> 00:23:26.550
<v Speaker 0>enumerating

00:23:26.550 --> 00:23:28.870
<v Speaker 0>values. Like, maybe it's a GraphQL query as

00:23:28.870 --> 00:23:30.950
<v Speaker 0>a one, a GraphQL mutation as a two,

00:23:31.190 --> 00:23:32.950
<v Speaker 0>and then we have the ability to use

00:23:33.110 --> 00:23:36.164
<v Speaker 0>pointers and memory space to actually squeeze in

00:23:36.164 --> 00:23:37.204
<v Speaker 0>the query

00:23:37.445 --> 00:23:39.365
<v Speaker 0>and then execute it and then do the

00:23:39.365 --> 00:23:41.044
<v Speaker 0>same in reverse to get the result back.

00:23:41.044 --> 00:23:43.204
<v Speaker 0>It's kind of where I think we're headed.

00:23:44.005 --> 00:23:46.565
<v Speaker 2>That's exactly right. So you you kind of

00:23:46.804 --> 00:23:48.485
<v Speaker 2>you got to the end

00:23:48.930 --> 00:23:51.170
<v Speaker 2>pretty quickly there in that. What we're gonna

00:23:51.170 --> 00:23:53.970
<v Speaker 2>end up doing is we are going to

00:23:54.050 --> 00:23:54.850
<v Speaker 2>write

00:23:54.850 --> 00:23:55.410
<v Speaker 2>the

00:23:55.810 --> 00:24:00.130
<v Speaker 2>results back into the WebAssembly module's memory. Once

00:24:00.130 --> 00:24:01.730
<v Speaker 2>we've completed the GraphQL

00:24:01.730 --> 00:24:02.450
<v Speaker 2>request,

00:24:02.925 --> 00:24:05.885
<v Speaker 2>we're gonna use this helper function here, which

00:24:05.885 --> 00:24:07.245
<v Speaker 2>actually writes

00:24:07.245 --> 00:24:07.805
<v Speaker 2>the

00:24:08.765 --> 00:24:10.365
<v Speaker 2>the memory. And then

00:24:10.605 --> 00:24:11.725
<v Speaker 2>then the module

00:24:11.965 --> 00:24:14.365
<v Speaker 2>once the function call completes, the module will

00:24:14.365 --> 00:24:17.485
<v Speaker 2>then go and read that memory to reconstitute

00:24:17.485 --> 00:24:18.285
<v Speaker 2>the

00:24:18.610 --> 00:24:21.089
<v Speaker 2>the results on the other side. So,

00:24:21.330 --> 00:24:24.210
<v Speaker 2>you'll see this this, acronym FFI,

00:24:24.370 --> 00:24:25.729
<v Speaker 2>throughout the code base,

00:24:26.210 --> 00:24:29.249
<v Speaker 2>and FFI stands for foreign function interface. So

00:24:29.250 --> 00:24:31.409
<v Speaker 2>when we talk about crossing that boundary

00:24:31.865 --> 00:24:34.185
<v Speaker 2>between the host and the module, we call

00:24:34.185 --> 00:24:36.505
<v Speaker 2>that an FFI, a foreign function interface, so

00:24:36.505 --> 00:24:39.145
<v Speaker 2>that it it's basically the the idea of

00:24:39.145 --> 00:24:40.665
<v Speaker 2>how do we translate

00:24:40.905 --> 00:24:43.705
<v Speaker 2>the function call across that boundary and make

00:24:43.705 --> 00:24:45.785
<v Speaker 2>it so that it's a, you know, properly

00:24:45.785 --> 00:24:46.985
<v Speaker 2>defined

00:24:48.000 --> 00:24:49.279
<v Speaker 2>host call, essentially.

00:24:50.000 --> 00:24:51.760
<v Speaker 2>So when you see that f five terminology

00:24:51.840 --> 00:24:52.480
<v Speaker 1>host

00:24:53.440 --> 00:24:55.680
<v Speaker 1>and module. Yeah. So if I if I

00:24:55.680 --> 00:24:57.600
<v Speaker 1>had to take from context,

00:24:57.840 --> 00:24:58.720
<v Speaker 1>host is

00:25:00.424 --> 00:25:02.744
<v Speaker 1>the the the fully

00:25:03.065 --> 00:25:04.585
<v Speaker 1>you know, the process is running on an

00:25:04.585 --> 00:25:06.665
<v Speaker 1>operating system. It's the thing that executes the

00:25:06.665 --> 00:25:08.025
<v Speaker 1>Wasm module.

00:25:08.025 --> 00:25:09.465
<v Speaker 1>Is that is that correct?

00:25:10.345 --> 00:25:15.385
<v Speaker 2>Yes. That's right. So Reaktor,

00:25:12.990 --> 00:25:14.750
<v Speaker 2>you know, when you when you use the

00:25:14.750 --> 00:25:15.550
<v Speaker 2>Reaktor

00:25:15.550 --> 00:25:16.429
<v Speaker 2>library

00:25:16.510 --> 00:25:19.310
<v Speaker 2>and you run a Go program that uses

00:25:19.310 --> 00:25:20.350
<v Speaker 2>the Reaktor

00:25:20.430 --> 00:25:21.310
<v Speaker 2>library,

00:25:21.310 --> 00:25:22.429
<v Speaker 2>that process

00:25:22.830 --> 00:25:25.070
<v Speaker 2>is the host. And so because it's just

00:25:25.070 --> 00:25:27.225
<v Speaker 2>a Go program, it has access to the

00:25:27.225 --> 00:25:29.465
<v Speaker 2>whole wide world of anything, you know, network

00:25:29.465 --> 00:25:30.345
<v Speaker 2>files,

00:25:30.345 --> 00:25:31.544
<v Speaker 2>whatever it wants to do.

00:25:31.865 --> 00:25:34.665
<v Speaker 2>And then the module, which is the WebAssembly

00:25:34.665 --> 00:25:36.585
<v Speaker 2>program that we have compiled,

00:25:37.065 --> 00:25:39.865
<v Speaker 2>gets loaded into Reaktor as a child or

00:25:39.865 --> 00:25:40.745
<v Speaker 2>as a guest,

00:25:41.230 --> 00:25:44.350
<v Speaker 2>and then that guest module is allowed to

00:25:44.350 --> 00:25:47.869
<v Speaker 2>communicate with Reactor over this FFI

00:25:48.029 --> 00:25:51.950
<v Speaker 2>that we define here. So this fetch URL

00:25:52.029 --> 00:25:53.789
<v Speaker 2>function is just one of the

00:25:54.445 --> 00:25:55.405
<v Speaker 2>FFI

00:25:55.405 --> 00:25:57.804
<v Speaker 2>functions available to the guest module. And

00:25:59.165 --> 00:26:00.445
<v Speaker 1>you said something

00:26:00.845 --> 00:26:02.845
<v Speaker 1>that that, and it looks like, actually, we

00:26:02.845 --> 00:26:05.325
<v Speaker 1>have some questions in chat. But, but you

00:26:05.325 --> 00:26:07.645
<v Speaker 1>said something that maybe is important, maybe it's

00:26:07.645 --> 00:26:09.820
<v Speaker 1>not. You said when the request completes, we

00:26:09.820 --> 00:26:11.340
<v Speaker 1>tell Wasm.

00:26:11.580 --> 00:26:13.179
<v Speaker 1>Does this mean that there's some sort of

00:26:13.179 --> 00:26:14.059
<v Speaker 1>asynchronous

00:26:14.059 --> 00:26:16.700
<v Speaker 1>ex exposure to Wasm, like, from our Wasm

00:26:16.700 --> 00:26:17.259
<v Speaker 1>code?

00:26:18.700 --> 00:26:19.259
<v Speaker 2>So

00:26:19.500 --> 00:26:22.140
<v Speaker 2>everything in WebAssembly is synchronous.

00:26:22.140 --> 00:26:25.275
<v Speaker 2>There is not yet the concept of threads

00:26:25.275 --> 00:26:26.635
<v Speaker 2>or asynchronous

00:26:26.635 --> 00:26:29.034
<v Speaker 2>execution in WebAssembly. So this is all actually

00:26:29.034 --> 00:26:29.754
<v Speaker 2>happening

00:26:29.995 --> 00:26:33.674
<v Speaker 2>in sequence. So the the order in which

00:26:33.674 --> 00:26:35.354
<v Speaker 2>things happen is

00:26:35.595 --> 00:26:36.475
<v Speaker 2>reactor

00:26:36.554 --> 00:26:37.515
<v Speaker 2>loads the module

00:26:38.490 --> 00:26:42.010
<v Speaker 2>and starts to execute it, then the module

00:26:42.250 --> 00:26:45.050
<v Speaker 2>makes a function call to the host. The

00:26:45.050 --> 00:26:47.610
<v Speaker 2>host performs some kind of

00:26:48.410 --> 00:26:50.650
<v Speaker 2>some kind of action, like making an HTTP

00:26:50.650 --> 00:26:53.505
<v Speaker 2>call, And then the host relinquishes control back

00:26:53.505 --> 00:26:55.905
<v Speaker 2>to the the module where it can then

00:26:55.905 --> 00:26:58.144
<v Speaker 2>receive the results of that function.

00:26:58.945 --> 00:27:00.945
<v Speaker 1>And so our code in the module says,

00:27:00.945 --> 00:27:02.705
<v Speaker 1>hey. Get me this GraphQL API, and it's

00:27:02.705 --> 00:27:03.985
<v Speaker 1>like, oh, I got it. Thanks. You know,

00:27:03.985 --> 00:27:05.025
<v Speaker 1>it just gets it synchronously.

00:27:05.830 --> 00:27:08.070
<v Speaker 2>That's exactly right. And yeah.

00:27:08.550 --> 00:27:11.670
<v Speaker 2>And and because WebAssembly doesn't support any kind

00:27:11.670 --> 00:27:12.550
<v Speaker 2>of threading,

00:27:12.710 --> 00:27:13.670
<v Speaker 2>Reaktor

00:27:13.670 --> 00:27:16.070
<v Speaker 2>kind of helps you with that. Because Reaktor

00:27:16.070 --> 00:27:17.190
<v Speaker 2>is able to run

00:27:17.670 --> 00:27:20.310
<v Speaker 2>dozens or hundreds or thousands of WebAssembly modules

00:27:20.310 --> 00:27:22.894
<v Speaker 2>all at the same time, you can actually

00:27:23.135 --> 00:27:26.655
<v Speaker 2>almost achieve threading by just running many copies

00:27:26.655 --> 00:27:28.575
<v Speaker 2>of that WebAssembly module all at the same

00:27:28.575 --> 00:27:30.815
<v Speaker 2>time. So Reactor helps you do that by

00:27:30.815 --> 00:27:31.934
<v Speaker 2>creating pools

00:27:32.015 --> 00:27:33.615
<v Speaker 2>of workers to accomplish

00:27:34.570 --> 00:27:37.049
<v Speaker 2>different tasks in a multithreaded

00:27:37.049 --> 00:27:37.609
<v Speaker 2>way.

00:27:39.049 --> 00:27:41.529
<v Speaker 0>Alright. Can we tackle a couple of questions

00:27:41.529 --> 00:27:43.769
<v Speaker 0>from Reza, and then we can get into

00:27:43.769 --> 00:27:46.249
<v Speaker 0>some Do it. Coding here. So Reza asked,

00:27:46.490 --> 00:27:48.649
<v Speaker 0>are you using tiny Go or Go?

00:27:50.534 --> 00:27:51.174
<v Speaker 2>So

00:27:51.495 --> 00:27:54.294
<v Speaker 2>for the host, for Reaktor itself, that is

00:27:54.294 --> 00:27:56.134
<v Speaker 2>written in Go proper.

00:27:56.375 --> 00:27:58.934
<v Speaker 2>And if you wanted to run Go code

00:27:58.934 --> 00:28:01.095
<v Speaker 2>as one of the guest modules as an

00:28:01.095 --> 00:28:03.960
<v Speaker 2>actual WebAssembly module, that's when you would probably

00:28:03.960 --> 00:28:06.760
<v Speaker 2>reach for TinyGo because TinyGo has a really

00:28:06.760 --> 00:28:08.520
<v Speaker 2>good WebAssembly tool chain,

00:28:08.920 --> 00:28:11.880
<v Speaker 2>that is quite honestly better than the regular

00:28:11.880 --> 00:28:13.480
<v Speaker 2>Go tool chain in in a lot of

00:28:13.480 --> 00:28:14.039
<v Speaker 2>ways.

00:28:14.600 --> 00:28:17.235
<v Speaker 0>And there's a a follow-up that says, how

00:28:17.235 --> 00:28:19.395
<v Speaker 0>do you know which memory space needs to

00:28:19.395 --> 00:28:21.635
<v Speaker 0>be accessed? Are there any tools?

00:28:22.915 --> 00:28:23.955
<v Speaker 2>Yeah. So,

00:28:24.275 --> 00:28:27.155
<v Speaker 2>technically, WebAssembly modules can export

00:28:27.155 --> 00:28:27.955
<v Speaker 2>multiple

00:28:27.955 --> 00:28:28.755
<v Speaker 2>memories.

00:28:28.915 --> 00:28:30.675
<v Speaker 2>It's an interesting concept that

00:28:31.700 --> 00:28:34.260
<v Speaker 2>I haven't fully taken advantage of yet, honestly,

00:28:34.260 --> 00:28:37.700
<v Speaker 2>but there is kind of a main memory,

00:28:38.340 --> 00:28:38.820
<v Speaker 2>a

00:28:39.220 --> 00:28:42.340
<v Speaker 2>global memory that is exported by every WebAssembly

00:28:42.340 --> 00:28:45.300
<v Speaker 2>module. And so for Reaktor's case, at least,

00:28:45.300 --> 00:28:48.375
<v Speaker 2>we only use that main memory module. But

00:28:48.375 --> 00:28:50.295
<v Speaker 2>maybe in the future, I'll find some use

00:28:50.295 --> 00:28:53.655
<v Speaker 2>case for having multiple kind of individual memory

00:28:53.895 --> 00:28:54.695
<v Speaker 2>exports.

00:28:55.095 --> 00:28:57.655
<v Speaker 1>Does does this mean it can export its

00:28:57.655 --> 00:28:58.855
<v Speaker 1>memory safely?

00:28:58.935 --> 00:29:01.255
<v Speaker 1>As in, like, if it doesn't trust the

00:29:01.255 --> 00:29:01.895
<v Speaker 1>the host?

00:29:03.779 --> 00:29:05.859
<v Speaker 2>Yeah. So it's it's

00:29:05.940 --> 00:29:08.659
<v Speaker 2>usually, the the trust relationship is in the

00:29:08.659 --> 00:29:11.779
<v Speaker 2>other direction. So, usually, it's the host mistrusting

00:29:11.779 --> 00:29:12.579
<v Speaker 2>the module.

00:29:13.779 --> 00:29:16.740
<v Speaker 2>There is, you know, not it's not really

00:29:16.740 --> 00:29:19.125
<v Speaker 2>designed for a module to mist mistrust the

00:29:19.125 --> 00:29:19.765
<v Speaker 2>host.

00:29:20.405 --> 00:29:22.085
<v Speaker 2>I'm sure there's ways you could do that.

00:29:22.085 --> 00:29:24.005
<v Speaker 2>Smarter folks than myself would need to figure

00:29:24.005 --> 00:29:25.525
<v Speaker 2>out a way to do that properly.

00:29:28.165 --> 00:29:31.460
<v Speaker 0>Alright. Well, I think, Reza, you'll hopefully, as

00:29:31.460 --> 00:29:32.900
<v Speaker 0>we dive into this and write a little

00:29:32.900 --> 00:29:34.740
<v Speaker 0>bit of code that the pointers and size

00:29:34.740 --> 00:29:36.500
<v Speaker 0>will become a little bit more apparent to

00:29:36.500 --> 00:29:39.060
<v Speaker 0>you. So let's let's move forward and get

00:29:39.060 --> 00:29:40.260
<v Speaker 0>some code work. Yeah.

00:29:40.980 --> 00:29:42.900
<v Speaker 2>Alright. Actually, I think I got an answer

00:29:42.900 --> 00:29:43.460
<v Speaker 1>there.

00:29:44.180 --> 00:29:47.215
<v Speaker 1>I believe there's just a fixed pointer size

00:29:47.215 --> 00:29:48.895
<v Speaker 1>in in WASM. Is that right? There's a

00:29:48.895 --> 00:29:50.975
<v Speaker 1>fixed memory space and a fixed pointer size

00:29:51.294 --> 00:29:53.294
<v Speaker 1>that everybody needs use.

00:29:53.934 --> 00:29:56.174
<v Speaker 2>Yeah. So the the fun part about WebAssembly

00:29:56.174 --> 00:29:58.414
<v Speaker 2>is that so I mentioned that it's linear

00:29:58.414 --> 00:29:58.815
<v Speaker 2>memory.

00:29:59.240 --> 00:30:01.560
<v Speaker 2>So memory in a WebAssembly module is essentially

00:30:01.560 --> 00:30:03.080
<v Speaker 2>just a gigantic array,

00:30:03.160 --> 00:30:04.760
<v Speaker 2>and you can access that array at different

00:30:04.760 --> 00:30:07.080
<v Speaker 2>points. And so when you pass a pointer

00:30:07.160 --> 00:30:09.640
<v Speaker 2>from a WebAssembly module to the host, you're

00:30:09.640 --> 00:30:12.040
<v Speaker 2>basically just telling the host, hey. Access my

00:30:12.040 --> 00:30:15.254
<v Speaker 2>gigantic array at this particular index and read

00:30:15.254 --> 00:30:17.014
<v Speaker 2>it for this number of bytes.

00:30:17.254 --> 00:30:19.894
<v Speaker 2>And so it's it's actually pretty cool.

00:30:22.855 --> 00:30:24.214
<v Speaker 2>Great. Alright.

00:30:24.934 --> 00:30:26.455
<v Speaker 2>Oh, and I guess we should take a

00:30:26.455 --> 00:30:28.930
<v Speaker 2>quick look at the the host code first

00:30:28.930 --> 00:30:32.050
<v Speaker 2>before we move on. So I wanna show

00:30:32.050 --> 00:30:33.650
<v Speaker 2>kind of the matching

00:30:34.290 --> 00:30:36.130
<v Speaker 2>the matching WebAssembly

00:30:36.130 --> 00:30:37.090
<v Speaker 2>internal

00:30:37.250 --> 00:30:39.810
<v Speaker 2>call. So we looked at the, you know,

00:30:39.810 --> 00:30:42.290
<v Speaker 2>fetch URL call on the go side.

00:30:43.075 --> 00:30:45.795
<v Speaker 2>But if we switch over to the Rust

00:30:45.795 --> 00:30:46.915
<v Speaker 2>side of things,

00:30:47.155 --> 00:30:48.675
<v Speaker 2>this is going to be the code that

00:30:48.675 --> 00:30:51.235
<v Speaker 2>gets actually compiled and put inside of the

00:30:51.235 --> 00:30:54.755
<v Speaker 2>WebAssembly module. So in the Suborbital

00:30:54.915 --> 00:30:57.715
<v Speaker 2>Rust library, we define, you know, an HTTP

00:30:57.715 --> 00:31:01.570
<v Speaker 2>module. And inside of that module, we actually

00:31:01.730 --> 00:31:03.970
<v Speaker 2>define an external function

00:31:04.050 --> 00:31:05.490
<v Speaker 2>with the exact same

00:31:05.810 --> 00:31:08.930
<v Speaker 2>signature as the host function. So when we

00:31:08.930 --> 00:31:11.090
<v Speaker 2>are inside of the module,

00:31:11.524 --> 00:31:13.604
<v Speaker 2>we can call this function,

00:31:13.764 --> 00:31:15.684
<v Speaker 2>and it will directly map

00:31:15.684 --> 00:31:18.404
<v Speaker 2>to the host's version of this function. So

00:31:18.404 --> 00:31:19.204
<v Speaker 2>when

00:31:19.205 --> 00:31:20.404
<v Speaker 2>this code

00:31:20.565 --> 00:31:22.565
<v Speaker 2>calls fetch URL,

00:31:23.125 --> 00:31:27.284
<v Speaker 2>what it's really doing is asking the host

00:31:26.659 --> 00:31:27.619
<v Speaker 2>to run

00:31:27.860 --> 00:31:29.379
<v Speaker 2>this host

00:31:29.539 --> 00:31:31.059
<v Speaker 2>version of itself.

00:31:31.220 --> 00:31:33.460
<v Speaker 2>So that's how that communication

00:31:33.539 --> 00:31:34.339
<v Speaker 2>happens,

00:31:35.140 --> 00:31:37.460
<v Speaker 2>and we'll probably dive into that more in

00:31:37.460 --> 00:31:38.580
<v Speaker 2>a in a little while. But,

00:31:39.304 --> 00:31:41.304
<v Speaker 2>yeah, we can we can choose either Rust

00:31:41.304 --> 00:31:42.504
<v Speaker 2>or AssemblyScript.

00:31:42.664 --> 00:31:44.745
<v Speaker 2>Whichever we wanna go with today, I'm I'm

00:31:44.745 --> 00:31:45.945
<v Speaker 2>I'm cool with.

00:31:46.905 --> 00:31:49.225
<v Speaker 0>My voice actually Rust. Yeah.

00:31:50.905 --> 00:31:52.985
<v Speaker 2>I think that's the the more fun option

00:31:52.985 --> 00:31:53.385
<v Speaker 2>for sure.

00:31:55.049 --> 00:31:58.169
<v Speaker 2>Alright. So step one here to define the

00:31:58.169 --> 00:32:00.090
<v Speaker 0>host interface then?

00:32:01.049 --> 00:32:03.289
<v Speaker 2>Yeah. That's right. So we're gonna create one

00:32:03.289 --> 00:32:04.649
<v Speaker 2>of these capabilities

00:32:05.049 --> 00:32:07.610
<v Speaker 2>that is just Go code to make a

00:32:07.610 --> 00:32:11.664
<v Speaker 2>a GraphQL endpoint. So I'm gonna create a

00:32:11.664 --> 00:32:12.784
<v Speaker 2>GraphQL

00:32:12.784 --> 00:32:14.945
<v Speaker 2>dot go file,

00:32:15.505 --> 00:32:17.985
<v Speaker 2>and we're gonna start from scratch. We're doing

00:32:17.985 --> 00:32:18.464
<v Speaker 2>this

00:32:19.505 --> 00:32:21.985
<v Speaker 2>from nothing. We we have written no code

00:32:21.985 --> 00:32:22.225
<v Speaker 2>yet.

00:32:23.279 --> 00:32:25.120
<v Speaker 2>So this lives in a package called r

00:32:25.120 --> 00:32:27.839
<v Speaker 2>cap, which just stands for reactor capabilities,

00:32:28.240 --> 00:32:31.039
<v Speaker 2>and we have to get started here. So

00:32:31.519 --> 00:32:33.039
<v Speaker 2>we want to start

00:32:33.360 --> 00:32:35.600
<v Speaker 2>with this do one of you wanna to

00:32:35.600 --> 00:32:37.679
<v Speaker 2>to to to do this part? I'm happy

00:32:37.679 --> 00:32:39.465
<v Speaker 2>to let one of you type.

00:32:41.305 --> 00:32:42.985
<v Speaker 1>I think I think, like,

00:32:43.865 --> 00:32:46.025
<v Speaker 1>just to like, deciding the inputs and the

00:32:46.025 --> 00:32:46.664
<v Speaker 1>outputs

00:32:46.905 --> 00:32:48.665
<v Speaker 1>might be an interesting thing. Because I know

00:32:48.665 --> 00:32:49.784
<v Speaker 1>how we would do it,

00:32:50.185 --> 00:32:51.785
<v Speaker 1>like, from Rust. If I were to make

00:32:51.945 --> 00:32:53.145
<v Speaker 1>if I were to have a Rust function,

00:32:53.600 --> 00:32:57.360
<v Speaker 1>right, a method that that that, like, takes

00:32:57.360 --> 00:32:59.120
<v Speaker 1>GraphQL input and output,

00:32:59.200 --> 00:33:00.400
<v Speaker 1>you know, I I would

00:33:01.360 --> 00:33:02.560
<v Speaker 1>I know what that I want that to

00:33:02.560 --> 00:33:04.240
<v Speaker 1>look like, and I'm curious how to translate

00:33:04.240 --> 00:33:05.840
<v Speaker 1>that to our

00:33:06.355 --> 00:33:07.315
<v Speaker 1>host guest

00:33:07.715 --> 00:33:09.714
<v Speaker 1>you know, our host module interface.

00:33:10.914 --> 00:33:12.274
<v Speaker 2>Cool. So why why don't we sketch it

00:33:12.274 --> 00:33:13.955
<v Speaker 2>out in pseudocode here, and then we can

00:33:13.955 --> 00:33:16.274
<v Speaker 2>actually get to writing the proper Go code?

00:33:17.315 --> 00:33:18.994
<v Speaker 1>I'm wondering if

00:33:19.794 --> 00:33:20.835
<v Speaker 1>this is,

00:33:22.330 --> 00:33:23.610
<v Speaker 1>if you're seeing this. I got I got

00:33:23.610 --> 00:33:26.330
<v Speaker 1>Copilot running on my machine. No. You're not

00:33:26.330 --> 00:33:28.250
<v Speaker 1>seeing this, but it's really crazy. The stuff

00:33:28.250 --> 00:33:29.530
<v Speaker 1>they're trying to do for me.

00:33:30.810 --> 00:33:32.810
<v Speaker 1>Okay. So I I know where you have

00:33:32.810 --> 00:33:34.250
<v Speaker 1>a query. I know a query is a

00:33:34.250 --> 00:33:36.454
<v Speaker 1>string. Right? Yep. And

00:33:37.174 --> 00:33:39.094
<v Speaker 1>I know we're gonna have variables.

00:33:39.255 --> 00:33:40.534
<v Speaker 1>And I know variables

00:33:40.934 --> 00:33:42.774
<v Speaker 1>is going to be

00:33:46.134 --> 00:33:48.134
<v Speaker 1>it is gonna be a object, a hash.

00:33:48.710 --> 00:33:50.150
<v Speaker 1>So this is gonna be like a JSON

00:33:50.150 --> 00:33:51.029
<v Speaker 1>object.

00:33:51.190 --> 00:33:53.910
<v Speaker 1>Really though, like, everything altogether and and we

00:33:53.910 --> 00:33:56.230
<v Speaker 1>have an optional operation name,

00:33:56.470 --> 00:33:57.830
<v Speaker 1>which is also a string.

00:33:58.790 --> 00:34:00.965
<v Speaker 1>And I guess variables is also optional. So,

00:34:00.965 --> 00:34:03.605
<v Speaker 1>like, this is my TypeScript showing. But

00:34:07.765 --> 00:34:10.165
<v Speaker 1>the whole thing actually is gonna get to

00:34:10.165 --> 00:34:13.125
<v Speaker 1>JSON. And 99% of the GraphQL servers out

00:34:13.125 --> 00:34:15.765
<v Speaker 1>there. So so maybe our only input is

00:34:15.765 --> 00:34:16.245
<v Speaker 1>a string.

00:34:18.059 --> 00:34:19.659
<v Speaker 2>And I don't know. So I

00:34:20.460 --> 00:34:22.460
<v Speaker 2>think the only thing we're missing here is

00:34:22.460 --> 00:34:24.299
<v Speaker 2>the endpoint. I need to know where this

00:34:24.299 --> 00:34:25.659
<v Speaker 2>thing is going. Yeah.

00:34:26.139 --> 00:34:28.219
<v Speaker 2>Now one of the questions will be, do

00:34:28.219 --> 00:34:28.940
<v Speaker 2>we want

00:34:29.659 --> 00:34:30.940
<v Speaker 2>yeah. Yeah. You're right.

00:34:32.155 --> 00:34:32.795
<v Speaker 2>So

00:34:33.275 --> 00:34:33.915
<v Speaker 2>the

00:34:34.155 --> 00:34:36.234
<v Speaker 2>the question is, do we want to instantiate

00:34:36.234 --> 00:34:38.315
<v Speaker 2>the object with a predefined endpoint, or do

00:34:38.315 --> 00:34:40.395
<v Speaker 2>we want the module to be able to

00:34:40.635 --> 00:34:43.114
<v Speaker 2>pass it, you know, whichever endpoint it wants

00:34:43.114 --> 00:34:45.675
<v Speaker 2>when we make the the host call? We

00:34:45.755 --> 00:34:46.795
<v Speaker 2>don't have to decide now.

00:34:47.969 --> 00:34:48.610
<v Speaker 2>Cool.

00:34:49.010 --> 00:34:52.850
<v Speaker 2>So we're going to wanna create some a

00:34:52.850 --> 00:34:54.690
<v Speaker 2>Go struct to kind of help us along

00:34:54.690 --> 00:34:55.250
<v Speaker 2>here.

00:34:55.810 --> 00:34:57.730
<v Speaker 2>So we'll start with

00:34:58.210 --> 00:34:59.090
<v Speaker 2>GraphQL

00:34:59.090 --> 00:35:00.210
<v Speaker 2>client

00:35:02.775 --> 00:35:03.575
<v Speaker 2>stretch,

00:35:03.575 --> 00:35:05.494
<v Speaker 2>and we're gonna it's gonna wanna have an

00:35:05.494 --> 00:35:08.295
<v Speaker 2>HTTP client as, you know, one of its

00:35:08.295 --> 00:35:09.575
<v Speaker 2>internal fields.

00:35:10.055 --> 00:35:12.055
<v Speaker 2>But other than that, I mean, there's not

00:35:12.055 --> 00:35:13.415
<v Speaker 2>a whole lot that we need to add

00:35:13.415 --> 00:35:14.214
<v Speaker 2>here. So

00:35:14.630 --> 00:35:16.630
<v Speaker 2>we're gonna make sure we comment our code

00:35:16.630 --> 00:35:17.350
<v Speaker 2>well.

00:35:17.510 --> 00:35:18.310
<v Speaker 2>Is

00:35:18.390 --> 00:35:20.550
<v Speaker 2>a GraphQL

00:35:20.550 --> 00:35:21.830
<v Speaker 2>capability?

00:35:21.990 --> 00:35:23.350
<v Speaker 2>I can't type

00:35:24.070 --> 00:35:24.790
<v Speaker 2>for

00:35:24.870 --> 00:35:25.830
<v Speaker 2>reactor

00:35:25.830 --> 00:35:26.630
<v Speaker 2>modules.

00:35:28.345 --> 00:35:28.905
<v Speaker 2>Great.

00:35:29.545 --> 00:35:30.345
<v Speaker 2>So

00:35:30.985 --> 00:35:33.865
<v Speaker 2>we're gonna oh, yeah. That's right. So date

00:35:34.025 --> 00:35:36.105
<v Speaker 2>errors are as an array. Right? Okay. You're

00:35:36.105 --> 00:35:37.305
<v Speaker 2>way ahead of me. Yeah.

00:35:38.585 --> 00:35:39.705
<v Speaker 1>Awesome. Sorry.

00:35:41.465 --> 00:35:42.025
<v Speaker 2>So

00:35:42.500 --> 00:35:44.260
<v Speaker 2>I think the first thing that I would

00:35:44.260 --> 00:35:46.500
<v Speaker 2>do when I'm approaching this is I would,

00:35:46.579 --> 00:35:48.900
<v Speaker 2>you know, take you know, we we've defined

00:35:48.900 --> 00:35:50.740
<v Speaker 2>pretty well what our input is here, and

00:35:50.740 --> 00:35:52.980
<v Speaker 2>we should define what it is we're sending

00:35:53.140 --> 00:35:56.500
<v Speaker 2>to the the GraphQL server. So I usually

00:35:56.500 --> 00:35:59.465
<v Speaker 2>start with a, you know, a request type.

00:36:01.225 --> 00:36:04.025
<v Speaker 2>So if we define a GraphQL request,

00:36:04.585 --> 00:36:06.265
<v Speaker 2>type that includes

00:36:06.265 --> 00:36:07.865
<v Speaker 2>our query,

00:36:07.865 --> 00:36:09.065
<v Speaker 2>which is a string,

00:36:09.385 --> 00:36:11.145
<v Speaker 2>and that goes out to JSON of the

00:36:11.145 --> 00:36:11.465
<v Speaker 2>string.

00:36:12.290 --> 00:36:14.450
<v Speaker 2>And we include our variables,

00:36:14.930 --> 00:36:16.290
<v Speaker 2>which is a,

00:36:16.530 --> 00:36:18.530
<v Speaker 2>in in Go, it's called a map, so

00:36:18.530 --> 00:36:20.770
<v Speaker 2>a map of strings to strings,

00:36:21.810 --> 00:36:25.090
<v Speaker 2>and that will go into JSON as variables,

00:36:25.090 --> 00:36:26.849
<v Speaker 2>I believe, if I'm not mistaken.

00:36:28.145 --> 00:36:29.665
<v Speaker 2>And then that operation

00:36:29.665 --> 00:36:30.225
<v Speaker 2>name

00:36:31.665 --> 00:36:33.425
<v Speaker 2>operation

00:36:33.665 --> 00:36:34.465
<v Speaker 2>name

00:36:34.625 --> 00:36:37.105
<v Speaker 2>is a string, and that goes to JSON

00:36:37.105 --> 00:36:38.305
<v Speaker 2>as operation

00:36:38.305 --> 00:36:40.145
<v Speaker 2>name with that capitalization,

00:36:40.145 --> 00:36:40.465
<v Speaker 2>I think.

00:36:41.210 --> 00:36:44.170
<v Speaker 1>Yep. And since it's optional, we're gonna add

00:36:44.170 --> 00:36:45.690
<v Speaker 2>this omit empty

00:36:45.690 --> 00:36:46.570
<v Speaker 2>directive

00:36:46.890 --> 00:36:48.650
<v Speaker 2>here so that if we don't provide one,

00:36:48.650 --> 00:36:49.930
<v Speaker 2>it's just not gonna include it in that

00:36:49.930 --> 00:36:51.050
<v Speaker 2>JSON output.

00:36:51.369 --> 00:36:52.730
<v Speaker 1>Variables

00:36:52.890 --> 00:36:55.130
<v Speaker 1>to is you can omit empty.

00:36:56.085 --> 00:36:57.445
<v Speaker 2>Oh, yes. You're right.

00:37:00.085 --> 00:37:00.805
<v Speaker 2>So

00:37:00.885 --> 00:37:03.525
<v Speaker 2>keep our code nice and well commented.

00:37:04.325 --> 00:37:07.445
<v Speaker 2>Is a request to a GraphQL

00:37:07.445 --> 00:37:08.085
<v Speaker 2>endpoint.

00:37:08.720 --> 00:37:10.960
<v Speaker 2>Cool. So we've kind of defined now. We're

00:37:10.960 --> 00:37:13.359
<v Speaker 2>gonna be sending this to the server, and

00:37:13.359 --> 00:37:15.520
<v Speaker 2>now let's define what we're gonna get back.

00:37:15.520 --> 00:37:17.520
<v Speaker 2>So a GraphQL

00:37:17.520 --> 00:37:18.640
<v Speaker 2>response

00:37:19.760 --> 00:37:20.560
<v Speaker 2>is

00:37:20.625 --> 00:37:24.225
<v Speaker 2>looks something like this. So data is I'm

00:37:24.225 --> 00:37:25.985
<v Speaker 2>assuming that's gonna be bytes.

00:37:27.585 --> 00:37:29.985
<v Speaker 1>It's gonna be a JSON object

00:37:30.385 --> 00:37:32.465
<v Speaker 1>or a null or JSON null.

00:37:34.350 --> 00:37:36.190
<v Speaker 2>I see. Okay. So then I guess it

00:37:36.190 --> 00:37:38.190
<v Speaker 2>would probably be a map

00:37:38.430 --> 00:37:41.710
<v Speaker 2>string interface. That's usually how I define just

00:37:41.710 --> 00:37:44.510
<v Speaker 2>a some unknown JSON blob,

00:37:45.390 --> 00:37:47.230
<v Speaker 2>and that is an actual key

00:37:48.225 --> 00:37:49.745
<v Speaker 2>called data. Right?

00:37:50.465 --> 00:37:51.185
<v Speaker 2>Yeah.

00:37:51.665 --> 00:37:55.745
<v Speaker 2>And the response? Great. And then our errors

00:37:55.985 --> 00:37:58.225
<v Speaker 2>are an array of

00:38:01.109 --> 00:38:02.869
<v Speaker 2>the array of an object that looks like

00:38:02.869 --> 00:38:04.070
<v Speaker 2>this. Is that right?

00:38:04.950 --> 00:38:05.750
<v Speaker 2>Correct.

00:38:05.829 --> 00:38:08.549
<v Speaker 2>Message path and type? Cool. So we'll probably

00:38:08.549 --> 00:38:10.310
<v Speaker 2>wanna define that as its own,

00:38:10.950 --> 00:38:13.509
<v Speaker 2>its own structure here. So if we define

00:38:13.509 --> 00:38:15.349
<v Speaker 2>a GraphQL error

00:38:16.175 --> 00:38:16.815
<v Speaker 2>and

00:38:17.055 --> 00:38:20.015
<v Speaker 1>oops. I gotta tell you, it's not standard.

00:38:20.175 --> 00:38:22.335
<v Speaker 1>The the message in the path is standard.

00:38:22.335 --> 00:38:22.815
<v Speaker 1>Every

00:38:23.615 --> 00:38:25.695
<v Speaker 1>server gives a little extra.

00:38:26.975 --> 00:38:27.535
<v Speaker 2>Gotcha.

00:38:30.310 --> 00:38:32.869
<v Speaker 2>Cool. So we'll define what that GraphQL error

00:38:32.869 --> 00:38:34.950
<v Speaker 2>looks like, and we'll define,

00:38:35.349 --> 00:38:36.550
<v Speaker 2>the path

00:38:37.190 --> 00:38:38.710
<v Speaker 2>JSON path.

00:38:39.510 --> 00:38:41.270
<v Speaker 2>And then we'll say that the errors is

00:38:41.270 --> 00:38:43.589
<v Speaker 2>an array of GraphQL.

00:38:45.455 --> 00:38:47.775
<v Speaker 2>Man, I need Copilot to give me better

00:38:49.135 --> 00:38:50.815
<v Speaker 2>better suggestions

00:38:50.815 --> 00:38:51.455
<v Speaker 2>here.

00:38:51.855 --> 00:38:53.935
<v Speaker 1>You can thank Copilot for the definition of

00:38:53.935 --> 00:38:55.775
<v Speaker 1>errors there. You just did it.

00:38:57.789 --> 00:38:58.589
<v Speaker 2>Nice.

00:38:59.230 --> 00:39:00.190
<v Speaker 2>Alright.

00:39:01.950 --> 00:39:04.349
<v Speaker 2>Oh, there's no there's no colon there.

00:39:04.750 --> 00:39:05.470
<v Speaker 2>Okay.

00:39:05.789 --> 00:39:07.790
<v Speaker 2>How's that look? Am I missing anything?

00:39:08.510 --> 00:39:10.510
<v Speaker 0>No. The former architect then, so I can

00:39:10.510 --> 00:39:11.070
<v Speaker 0>get

00:39:11.745 --> 00:39:13.505
<v Speaker 0>That's what I know if my code works.

00:39:15.105 --> 00:39:16.945
<v Speaker 2>That's right. One of the for anybody who's

00:39:16.945 --> 00:39:18.945
<v Speaker 2>not familiar with writing Go, there's a tool

00:39:18.945 --> 00:39:21.265
<v Speaker 2>called GoFmt or Go FMT

00:39:21.265 --> 00:39:23.585
<v Speaker 2>that runs every time you save a file,

00:39:24.080 --> 00:39:26.880
<v Speaker 2>and it will apply a standard set of

00:39:26.880 --> 00:39:29.200
<v Speaker 2>formatting to your code. So, for example, all

00:39:29.200 --> 00:39:32.720
<v Speaker 2>the spacing here, lining up these these, you

00:39:32.720 --> 00:39:34.640
<v Speaker 2>know, back ticks so that they look pretty,

00:39:34.640 --> 00:39:36.905
<v Speaker 2>that's all done automatically for you. So it

00:39:36.905 --> 00:39:38.505
<v Speaker 2>makes you, you know, it makes your code

00:39:38.505 --> 00:39:39.625
<v Speaker 2>even prettier than

00:39:39.865 --> 00:39:41.625
<v Speaker 2>what you're what I'm usually,

00:39:41.865 --> 00:39:43.625
<v Speaker 2>willing to put effort in for.

00:39:45.865 --> 00:39:46.665
<v Speaker 2>Alright.

00:39:46.665 --> 00:39:47.625
<v Speaker 2>So I think

00:39:48.920 --> 00:39:51.320
<v Speaker 1>just I I'm not sure if data and

00:39:51.320 --> 00:39:53.880
<v Speaker 1>errors are both always there at all times.

00:39:54.040 --> 00:39:56.200
<v Speaker 1>I'm looking up the response format, like, spec

00:39:56.200 --> 00:39:59.160
<v Speaker 1>right now. But if that doesn't really matter

00:39:59.240 --> 00:40:00.680
<v Speaker 1>as much, we can figure that out later.

00:40:01.695 --> 00:40:03.375
<v Speaker 2>Yeah. It's it's never a bad idea to

00:40:03.375 --> 00:40:05.375
<v Speaker 2>include Omid empty. There is no, no harm

00:40:05.375 --> 00:40:06.575
<v Speaker 2>in in doing that.

00:40:07.695 --> 00:40:10.495
<v Speaker 2>Alright. Let's keep our code commented.

00:40:10.495 --> 00:40:12.735
<v Speaker 2>It's a GraphQL

00:40:12.735 --> 00:40:13.615
<v Speaker 2>response.

00:40:13.615 --> 00:40:14.175
<v Speaker 1>Yes.

00:40:14.495 --> 00:40:14.975
<v Speaker 1>Data should,

00:40:15.840 --> 00:40:17.760
<v Speaker 1>According to the spec data, it should always

00:40:17.760 --> 00:40:19.680
<v Speaker 1>be there, but sometimes it's null. If there

00:40:19.680 --> 00:40:21.040
<v Speaker 1>were errors, it'll be null.

00:40:21.840 --> 00:40:22.720
<v Speaker 2>Gotcha.

00:40:23.600 --> 00:40:25.760
<v Speaker 0>Alright. Got a comment from null saying we

00:40:25.760 --> 00:40:28.720
<v Speaker 0>have a typo and our message JSON definition.

00:40:31.125 --> 00:40:31.925
<v Speaker 2>Message

00:40:31.925 --> 00:40:34.965
<v Speaker 2>JSON. Ah, you are correct. Good catch. That

00:40:34.965 --> 00:40:37.605
<v Speaker 2>would've that would've been real annoying when

00:40:37.605 --> 00:40:40.085
<v Speaker 2>it goes to unmarshall the JSON, and we

00:40:40.085 --> 00:40:41.765
<v Speaker 2>find that our message is always empty.

00:40:42.165 --> 00:40:44.700
<v Speaker 2>Good catch. Good catch. Alright. So

00:40:45.740 --> 00:40:47.740
<v Speaker 2>those are inputs and outputs. So now we

00:40:47.740 --> 00:40:50.300
<v Speaker 2>need to actually, you know, define that function

00:40:50.300 --> 00:40:52.780
<v Speaker 2>that will do it for us. So we're

00:40:52.780 --> 00:40:56.060
<v Speaker 2>gonna create a function that operates on the

00:40:56.060 --> 00:40:57.660
<v Speaker 2>GraphQL client,

00:40:58.220 --> 00:40:58.780
<v Speaker 2>and

00:40:59.454 --> 00:41:01.694
<v Speaker 2>the HTTP client calls it do. So I'm

00:41:01.694 --> 00:41:04.095
<v Speaker 2>just gonna call it do as well. And

00:41:05.454 --> 00:41:07.615
<v Speaker 2>so this is where I'm

00:41:07.615 --> 00:41:09.935
<v Speaker 2>maybe gonna ask Francis what the best,

00:41:10.494 --> 00:41:12.734
<v Speaker 2>you know, the best practice is here. Do

00:41:12.734 --> 00:41:16.180
<v Speaker 2>we want to have query and mutation defined

00:41:16.180 --> 00:41:17.860
<v Speaker 2>as specific types,

00:41:18.180 --> 00:41:18.740
<v Speaker 2>or

00:41:19.780 --> 00:41:21.140
<v Speaker 2>what do you think is the best thing

00:41:21.140 --> 00:41:22.340
<v Speaker 2>to do there? No.

00:41:22.580 --> 00:41:25.380
<v Speaker 1>So your your query document can include mutations

00:41:25.380 --> 00:41:26.500
<v Speaker 1>and queries

00:41:26.580 --> 00:41:28.260
<v Speaker 1>and, you know, anything

00:41:28.660 --> 00:41:29.540
<v Speaker 1>else you wanna

00:41:30.075 --> 00:41:32.795
<v Speaker 1>your server might support. So so I think

00:41:32.795 --> 00:41:33.755
<v Speaker 1>the difference,

00:41:34.155 --> 00:41:36.795
<v Speaker 1>in the in the result is is nothing.

00:41:36.795 --> 00:41:39.435
<v Speaker 1>The difference in the input is nothing. So

00:41:39.435 --> 00:41:40.875
<v Speaker 1>I I don't see them as being different

00:41:40.875 --> 00:41:41.195
<v Speaker 1>method.

00:41:41.940 --> 00:41:44.339
<v Speaker 2>I see. So you actually you actually specify

00:41:44.339 --> 00:41:46.099
<v Speaker 2>that inside of your query string. Is that

00:41:46.099 --> 00:41:46.580
<v Speaker 2>right?

00:41:47.060 --> 00:41:48.340
<v Speaker 1>Exactly. Cool.

00:41:48.740 --> 00:41:50.660
<v Speaker 2>So then I guess we'll just start with

00:41:50.740 --> 00:41:50.980
<v Speaker 1>of

00:41:52.099 --> 00:41:53.700
<v Speaker 1>you'll find a lot of and I I

00:41:53.700 --> 00:41:55.625
<v Speaker 1>don't know if this translates for us. In,

00:41:55.625 --> 00:41:57.785
<v Speaker 1>like, the React world, all the hooks, you'll

00:41:57.785 --> 00:42:00.345
<v Speaker 1>find different, like, methods for query and mutation.

00:42:00.585 --> 00:42:03.305
<v Speaker 1>Only because queries you probably wanna execute right

00:42:03.305 --> 00:42:05.704
<v Speaker 1>away, where mutations you wanna choose to execute

00:42:05.704 --> 00:42:07.065
<v Speaker 1>later. Like, you wanna set them up and

00:42:07.065 --> 00:42:08.984
<v Speaker 1>then use them. And

00:42:09.590 --> 00:42:11.430
<v Speaker 1>that might be the only reason we wanna

00:42:11.430 --> 00:42:12.950
<v Speaker 1>do that, but I I don't I don't

00:42:12.950 --> 00:42:14.870
<v Speaker 1>see why this interface would would would include

00:42:14.870 --> 00:42:15.990
<v Speaker 1>that kind of concept.

00:42:16.630 --> 00:42:18.630
<v Speaker 0>I didn't know that. That's really useful. I

00:42:18.630 --> 00:42:20.150
<v Speaker 0>thought that you have to send queries over

00:42:20.150 --> 00:42:22.390
<v Speaker 0>a GET and, like, mutations over a post.

00:42:22.674 --> 00:42:24.755
<v Speaker 0>That's just what I've seen in other libraries,

00:42:24.755 --> 00:42:27.075
<v Speaker 0>but today I've learned seen different

00:42:27.635 --> 00:42:29.395
<v Speaker 2>things in different places.

00:42:30.755 --> 00:42:32.275
<v Speaker 1>Under the hood, mutations

00:42:32.755 --> 00:42:35.635
<v Speaker 1>are actually a mutation in the input and

00:42:35.635 --> 00:42:37.700
<v Speaker 1>then a query. And so it's actually, like

00:42:37.700 --> 00:42:39.059
<v Speaker 1>like, it's like, at the end of the

00:42:39.059 --> 00:42:40.579
<v Speaker 1>day, they're all the output is always a

00:42:40.579 --> 00:42:42.180
<v Speaker 1>query. You know? So it's the same kinda

00:42:42.500 --> 00:42:44.420
<v Speaker 1>same operation in GraphQL.

00:42:46.099 --> 00:42:48.420
<v Speaker 2>Oh, Reza pointed out another typo here. This

00:42:48.420 --> 00:42:50.154
<v Speaker 2>is not gonna be called string in the

00:42:50.154 --> 00:42:51.994
<v Speaker 2>JSON. This is gonna be called query.

00:42:53.275 --> 00:42:55.835
<v Speaker 0>Alright. The audience are confused. Right? My fingers

00:42:56.154 --> 00:42:58.635
<v Speaker 2>yeah. Sometimes my fingers work faster than my

00:42:58.635 --> 00:42:59.115
<v Speaker 2>brain.

00:42:59.755 --> 00:43:01.434
<v Speaker 1>We need the high and high level code.

00:43:03.369 --> 00:43:04.490
<v Speaker 2>Exactly.

00:43:05.050 --> 00:43:08.010
<v Speaker 2>Alright. So this function is gonna either return

00:43:08.010 --> 00:43:09.530
<v Speaker 2>a GraphQL,

00:43:10.010 --> 00:43:10.970
<v Speaker 2>response,

00:43:11.050 --> 00:43:13.930
<v Speaker 2>or it's going to return a GraphQL error.

00:43:13.930 --> 00:43:16.890
<v Speaker 2>Now in Golang, I usually don't like to

00:43:16.890 --> 00:43:18.734
<v Speaker 2>return a concrete

00:43:18.734 --> 00:43:21.055
<v Speaker 2>struct type as an error. So we're gonna

00:43:21.055 --> 00:43:23.135
<v Speaker 2>return the generic error type, and we're gonna

00:43:23.135 --> 00:43:26.174
<v Speaker 2>actually make GraphQL error conform to that type

00:43:26.174 --> 00:43:28.015
<v Speaker 2>by just giving it the one method that

00:43:28.015 --> 00:43:28.734
<v Speaker 2>it means. So

00:43:31.330 --> 00:43:33.330
<v Speaker 2>In which case the graph our graph will

00:43:33.330 --> 00:43:34.930
<v Speaker 1>response

00:43:34.930 --> 00:43:36.690
<v Speaker 1>doesn't need to include errors,

00:43:37.650 --> 00:43:38.610
<v Speaker 1>or does it?

00:43:40.450 --> 00:43:41.010
<v Speaker 1>Right?

00:43:41.890 --> 00:43:43.890
<v Speaker 2>Good point. I think it does. Actually returning

00:43:43.890 --> 00:43:45.515
<v Speaker 2>that directly. No. I think you're right. So

00:43:45.515 --> 00:43:46.875
<v Speaker 2>what what I would what I would tend

00:43:46.875 --> 00:43:49.355
<v Speaker 2>to do is that if this is populated

00:43:49.355 --> 00:43:51.675
<v Speaker 2>in the response, we would just, return an

00:43:51.675 --> 00:43:53.515
<v Speaker 2>error here and tell them to look inside

00:43:53.515 --> 00:43:55.755
<v Speaker 2>of the errors array. So you you make

00:43:55.755 --> 00:43:57.435
<v Speaker 2>a good point. We're not returning this directly.

00:43:57.800 --> 00:43:59.240
<v Speaker 2>We actually have an array of them inside

00:43:59.240 --> 00:44:00.760
<v Speaker 2>here. So, yeah, that's that's a good point.

00:44:00.760 --> 00:44:02.440
<v Speaker 1>I believe it's a choice

00:44:02.840 --> 00:44:05.320
<v Speaker 1>of the two sometimes, if there is an

00:44:05.320 --> 00:44:06.440
<v Speaker 1>error in execution,

00:44:06.680 --> 00:44:08.200
<v Speaker 1>to include partial data

00:44:08.440 --> 00:44:10.599
<v Speaker 1>as well. So a field can error, and

00:44:10.599 --> 00:44:12.200
<v Speaker 1>you still get the other fields. I see.

00:44:12.505 --> 00:44:14.665
<v Speaker 1>And so I see. So you can still

00:44:14.665 --> 00:44:18.345
<v Speaker 2>have, like, a usable response object. Okay. Cool.

00:44:19.065 --> 00:44:19.705
<v Speaker 2>So,

00:44:20.825 --> 00:44:23.625
<v Speaker 2>I guess, for now, let's include the endpoints,

00:44:24.025 --> 00:44:24.825
<v Speaker 2>in

00:44:24.825 --> 00:44:25.625
<v Speaker 2>the

00:44:26.450 --> 00:44:29.089
<v Speaker 2>in the actual function parameters. We may choose

00:44:29.089 --> 00:44:29.650
<v Speaker 2>to

00:44:29.970 --> 00:44:31.970
<v Speaker 2>pull this out and make it specific to

00:44:31.970 --> 00:44:34.289
<v Speaker 2>the client object later, but for now, let's

00:44:34.289 --> 00:44:36.770
<v Speaker 2>just let you pass both, in one go.

00:44:37.890 --> 00:44:38.369
<v Speaker 2>So

00:44:39.315 --> 00:44:42.195
<v Speaker 2>for those of you who are like myself

00:44:42.195 --> 00:44:44.515
<v Speaker 2>and are fairly new to GraphQL,

00:44:44.835 --> 00:44:47.395
<v Speaker 2>it's it's really nice that GraphQL

00:44:47.395 --> 00:44:50.035
<v Speaker 2>queries are really just HTTP requests. So we

00:44:50.035 --> 00:44:53.240
<v Speaker 2>can get away with, you know, using Go's

00:44:53.240 --> 00:44:55.960
<v Speaker 2>built in HTTP client to to accomplish a

00:44:55.960 --> 00:44:57.560
<v Speaker 2>lot of what we wanna do here today.

00:44:57.560 --> 00:44:58.040
<v Speaker 2>So

00:44:59.080 --> 00:45:00.520
<v Speaker 2>we're gonna build

00:45:00.760 --> 00:45:02.280
<v Speaker 2>an HTTP request.

00:45:02.440 --> 00:45:04.600
<v Speaker 2>We're going to send that HTTP request off

00:45:04.600 --> 00:45:06.535
<v Speaker 2>to the endpoint that's defined here, and then

00:45:06.535 --> 00:45:10.695
<v Speaker 2>we're gonna parse the the response. So to

00:45:10.695 --> 00:45:14.535
<v Speaker 2>start, we're going to create that request object

00:45:15.095 --> 00:45:16.855
<v Speaker 2>by using the HTTP

00:45:16.855 --> 00:45:17.575
<v Speaker 2>package,

00:45:17.895 --> 00:45:20.615
<v Speaker 2>and that has a new request method inside

00:45:20.615 --> 00:45:21.895
<v Speaker 2>of it. So

00:45:23.410 --> 00:45:26.690
<v Speaker 2>here is where that that spec ambiguity

00:45:26.690 --> 00:45:27.410
<v Speaker 2>can

00:45:27.570 --> 00:45:29.410
<v Speaker 2>maybe cause us a little bit of pain.

00:45:29.410 --> 00:45:31.970
<v Speaker 2>So we need to choose our HTTP method

00:45:31.970 --> 00:45:32.530
<v Speaker 2>here.

00:45:33.170 --> 00:45:34.850
<v Speaker 2>And so I'm gonna

00:45:35.985 --> 00:45:38.065
<v Speaker 1>Would it be simpler for us to assume

00:45:38.065 --> 00:45:39.985
<v Speaker 1>it's a post with no headers

00:45:40.305 --> 00:45:41.825
<v Speaker 1>just to get it going and then add

00:45:41.825 --> 00:45:42.705
<v Speaker 1>it in later?

00:45:43.265 --> 00:45:45.025
<v Speaker 2>I think that's the right call. So we

00:45:45.025 --> 00:45:47.905
<v Speaker 2>can start with, http dot method post here.

00:45:48.600 --> 00:45:50.680
<v Speaker 2>And, yeah, like you said, that's the simplest

00:45:50.680 --> 00:45:51.880
<v Speaker 2>way, and then maybe we can make it

00:45:51.880 --> 00:45:53.800
<v Speaker 2>fancier later if we have time.

00:45:54.600 --> 00:45:57.160
<v Speaker 2>So then we're gonna pass in that URL.

00:45:57.160 --> 00:45:59.240
<v Speaker 2>So this is going to be our endpoint,

00:46:00.120 --> 00:46:01.880
<v Speaker 2>and then we're gonna pass in our body.

00:46:01.880 --> 00:46:04.695
<v Speaker 2>So we need to actually construct that body.

00:46:04.934 --> 00:46:06.694
<v Speaker 2>In the in Go, we use this it

00:46:06.694 --> 00:46:09.175
<v Speaker 2>it it accepts this IO dot reader type,

00:46:09.335 --> 00:46:11.815
<v Speaker 2>which is an interface that just, you know,

00:46:11.815 --> 00:46:13.335
<v Speaker 2>expects you to be able to read data

00:46:13.335 --> 00:46:14.694
<v Speaker 2>from it. So we need to build something

00:46:14.694 --> 00:46:17.540
<v Speaker 2>that conforms to that interface. So in order

00:46:17.540 --> 00:46:19.140
<v Speaker 2>to do that, we need to

00:46:19.860 --> 00:46:22.180
<v Speaker 2>figure out what's gonna go in it. So,

00:46:22.740 --> 00:46:25.380
<v Speaker 2>we're taking in, you know, the query string,

00:46:25.380 --> 00:46:27.300
<v Speaker 2>which is going to be placed inside of

00:46:27.300 --> 00:46:29.540
<v Speaker 2>this field in the GraphQL request.

00:46:29.865 --> 00:46:32.744
<v Speaker 2>So we need to actually build this request

00:46:32.744 --> 00:46:35.465
<v Speaker 2>object before we can kind of continue. So,

00:46:37.225 --> 00:46:39.705
<v Speaker 2>let's create a request object that is of

00:46:39.705 --> 00:46:41.065
<v Speaker 2>type GraphQL

00:46:41.065 --> 00:46:41.705
<v Speaker 2>request,

00:46:42.220 --> 00:46:44.220
<v Speaker 2>and we're gonna stick some data into it.

00:46:44.220 --> 00:46:45.900
<v Speaker 2>So the query is going to be the

00:46:45.900 --> 00:46:48.140
<v Speaker 2>query that was passed into us here.

00:46:48.540 --> 00:46:49.260
<v Speaker 2>And then,

00:46:49.580 --> 00:46:51.580
<v Speaker 2>to start, I think our variables

00:46:51.580 --> 00:46:52.540
<v Speaker 2>can be,

00:46:52.780 --> 00:46:53.660
<v Speaker 2>empty.

00:46:53.740 --> 00:46:55.900
<v Speaker 2>So we'll just create a map string to

00:46:55.900 --> 00:46:58.925
<v Speaker 2>string that has no data. And then the

00:46:58.925 --> 00:46:59.965
<v Speaker 2>operation name,

00:47:00.205 --> 00:47:02.925
<v Speaker 2>I think it also optional. So, actually, we'll

00:47:02.925 --> 00:47:05.325
<v Speaker 2>we'll exclude that because it has that omit

00:47:05.325 --> 00:47:06.685
<v Speaker 2>empty operation

00:47:07.005 --> 00:47:09.245
<v Speaker 2>on it. Technically, we exclude both of these,

00:47:09.245 --> 00:47:10.685
<v Speaker 2>but, you know, just for illustration purposes.

00:47:11.280 --> 00:47:13.920
<v Speaker 2>So then in Go, when we wanna take

00:47:13.920 --> 00:47:16.160
<v Speaker 2>a a struct and create JSON from it,

00:47:16.160 --> 00:47:18.800
<v Speaker 2>we use the JSON package. So we're gonna

00:47:18.800 --> 00:47:19.440
<v Speaker 2>call

00:47:20.880 --> 00:47:21.600
<v Speaker 2>sorry.

00:47:21.760 --> 00:47:24.080
<v Speaker 2>We're gonna say that the request bytes

00:47:25.105 --> 00:47:26.545
<v Speaker 2>is JSON

00:47:26.625 --> 00:47:27.745
<v Speaker 2>dot Marshall,

00:47:27.745 --> 00:47:30.065
<v Speaker 2>which is the equivalent of JavaScript to JSON

00:47:30.065 --> 00:47:32.225
<v Speaker 2>or JSON dot stringify. I can't even remember

00:47:32.225 --> 00:47:33.585
<v Speaker 2>what it is at this point.

00:47:34.145 --> 00:47:36.865
<v Speaker 2>And we're gonna pass in that request object.

00:47:37.700 --> 00:47:38.339
<v Speaker 2>Yeah.

00:47:38.819 --> 00:47:40.980
<v Speaker 2>And then we're going to check our errors

00:47:40.980 --> 00:47:41.619
<v Speaker 2>here

00:47:43.539 --> 00:47:45.619
<v Speaker 2>so that if, you know, the JSON was

00:47:45.619 --> 00:47:47.859
<v Speaker 2>poorly formed, we could catch that before we

00:47:47.859 --> 00:47:48.900
<v Speaker 2>try to send to the server.

00:47:54.205 --> 00:47:57.005
<v Speaker 2>So this this errors dot wrap for anybody

00:47:57.005 --> 00:47:59.245
<v Speaker 2>who's never seen this before. This is this

00:47:59.245 --> 00:48:00.285
<v Speaker 2>is something pretty

00:48:00.525 --> 00:48:02.205
<v Speaker 2>unique to go, I think, where we wanna

00:48:02.205 --> 00:48:04.205
<v Speaker 2>make sure that we have some indication of

00:48:04.205 --> 00:48:05.325
<v Speaker 2>where this error originated.

00:48:05.600 --> 00:48:07.120
<v Speaker 2>So what we're doing is we're taking the

00:48:07.120 --> 00:48:09.840
<v Speaker 2>error that came out of this function call,

00:48:09.840 --> 00:48:11.840
<v Speaker 2>and we're wrapping it into in an in

00:48:11.840 --> 00:48:13.680
<v Speaker 2>a message saying where that,

00:48:14.080 --> 00:48:16.400
<v Speaker 2>kind of failure came from. It just is,

00:48:17.120 --> 00:48:18.800
<v Speaker 2>a habit that I've picked up. Whether or

00:48:18.800 --> 00:48:20.665
<v Speaker 2>not it's standard practice, I don't know, but

00:48:20.665 --> 00:48:22.665
<v Speaker 2>that's just, how I've always done things.

00:48:23.224 --> 00:48:24.905
<v Speaker 1>This is this is actually a feature that's

00:48:24.905 --> 00:48:27.065
<v Speaker 1>coming to JavaScript pretty soon too.

00:48:27.545 --> 00:48:30.505
<v Speaker 1>I think probably because of Go. But just,

00:48:30.505 --> 00:48:32.425
<v Speaker 1>like, adding that more context and keeping the

00:48:32.425 --> 00:48:34.345
<v Speaker 1>original error behind or having multiple errors that

00:48:34.345 --> 00:48:36.480
<v Speaker 1>you wanna send as one. Like like, it's

00:48:36.480 --> 00:48:38.640
<v Speaker 1>just a common pattern. And so I'm happy

00:48:38.640 --> 00:48:41.120
<v Speaker 1>it's happy it's got language support here.

00:48:41.840 --> 00:48:43.120
<v Speaker 2>Mhmm. For sure.

00:48:44.320 --> 00:48:47.520
<v Speaker 2>Cool. So now we've got bytes, a variable

00:48:47.520 --> 00:48:50.005
<v Speaker 2>containing bytes, which is our JSON. So we're

00:48:50.005 --> 00:48:52.085
<v Speaker 2>going to as that last parameter

00:48:52.244 --> 00:48:54.805
<v Speaker 2>in our, request builder, we're gonna use the,

00:48:54.965 --> 00:48:56.885
<v Speaker 2>bytes dot new buffer, which is

00:48:57.605 --> 00:48:59.365
<v Speaker 2>it takes those bytes and loads it into

00:48:59.365 --> 00:49:02.005
<v Speaker 2>that IO dot reader, interface we were looking

00:49:02.005 --> 00:49:04.390
<v Speaker 2>at before. So the rec bytes will go

00:49:04.390 --> 00:49:06.150
<v Speaker 2>in there, and now we have a request.

00:49:06.150 --> 00:49:07.510
<v Speaker 2>So we're gonna do the same thing.

00:49:07.910 --> 00:49:09.910
<v Speaker 2>We're gonna do a similar error checking for

00:49:09.910 --> 00:49:10.630
<v Speaker 2>this call,

00:49:11.030 --> 00:49:13.590
<v Speaker 2>but instead, we're gonna say fail to request.

00:49:14.470 --> 00:49:15.750
<v Speaker 2>Request.

00:49:16.835 --> 00:49:17.714
<v Speaker 2>And then,

00:49:17.954 --> 00:49:20.914
<v Speaker 2>we have a request object. So we can

00:49:20.914 --> 00:49:22.355
<v Speaker 2>take a quick look at what that looks

00:49:22.355 --> 00:49:24.595
<v Speaker 2>like for anybody who's unfamiliar with Go.

00:49:25.394 --> 00:49:26.835
<v Speaker 2>The HTTP

00:49:26.835 --> 00:49:29.315
<v Speaker 2>request in Go is just a method

00:49:29.474 --> 00:49:31.795
<v Speaker 2>and the URL that you're making that request

00:49:31.795 --> 00:49:34.280
<v Speaker 2>to, a bunch of stuff that I don't

00:49:34.280 --> 00:49:35.000
<v Speaker 2>care about,

00:49:35.800 --> 00:49:39.240
<v Speaker 2>some headers for the HTTP request, a body,

00:49:39.320 --> 00:49:41.000
<v Speaker 2>which will be the request body for our

00:49:41.000 --> 00:49:41.880
<v Speaker 2>post request,

00:49:42.040 --> 00:49:44.280
<v Speaker 2>and then, you know, some other metadata like

00:49:44.280 --> 00:49:46.040
<v Speaker 2>content length and some

00:49:46.415 --> 00:49:47.775
<v Speaker 2>you know, if you want and wanted to

00:49:47.775 --> 00:49:49.535
<v Speaker 2>use a a form request, you could do

00:49:49.535 --> 00:49:50.095
<v Speaker 2>that,

00:49:50.494 --> 00:49:51.375
<v Speaker 2>multipart,

00:49:51.375 --> 00:49:53.535
<v Speaker 2>etcetera. So lots of fun stuff in there

00:49:53.535 --> 00:49:54.815
<v Speaker 2>that you can take advantage of, but we're

00:49:54.815 --> 00:49:58.095
<v Speaker 2>doing pretty a pretty basic, requests today. So

00:49:58.095 --> 00:49:59.695
<v Speaker 2>we're really just gonna be including

00:49:59.775 --> 00:50:00.575
<v Speaker 2>a, buffer

00:50:01.220 --> 00:50:03.220
<v Speaker 2>that includes our request.

00:50:04.819 --> 00:50:07.299
<v Speaker 2>And then we're gonna want to add a

00:50:07.299 --> 00:50:08.580
<v Speaker 2>header. So

00:50:08.900 --> 00:50:10.980
<v Speaker 2>just just to specify the content type, I

00:50:10.980 --> 00:50:11.940
<v Speaker 2>believe that's

00:50:12.260 --> 00:50:14.180
<v Speaker 2>standard practice, if I'm not if I'm not

00:50:14.180 --> 00:50:15.299
<v Speaker 2>mistaken with GraphQL.

00:50:16.625 --> 00:50:19.265
<v Speaker 2>So for the Application JSON. Dot header.

00:50:19.905 --> 00:50:22.305
<v Speaker 2>Yeah. So we're gonna add a

00:50:22.865 --> 00:50:24.145
<v Speaker 2>content type.

00:50:25.105 --> 00:50:27.984
<v Speaker 2>Now I've seen conflicting reports. I've seen application

00:50:27.984 --> 00:50:30.460
<v Speaker 2>JSON, and I've seen application GraphQL. So do

00:50:30.460 --> 00:50:31.660
<v Speaker 2>you wanna set me straight on what I

00:50:31.660 --> 00:50:32.540
<v Speaker 2>should be using here?

00:50:33.340 --> 00:50:34.140
<v Speaker 1>I mean,

00:50:34.380 --> 00:50:36.300
<v Speaker 1>it's not in spec. It's whatever the server

00:50:36.300 --> 00:50:39.180
<v Speaker 1>wants. Application JSON will work everywhere as far

00:50:39.180 --> 00:50:40.620
<v Speaker 1>as I understand it, though.

00:50:41.260 --> 00:50:44.060
<v Speaker 2>Gotcha. Because, like, most most clients are setting

00:50:44.060 --> 00:50:45.420
<v Speaker 1>that because they're sending JSON.

00:50:46.595 --> 00:50:47.395
<v Speaker 2>Understood.

00:50:47.395 --> 00:50:50.115
<v Speaker 2>Understood. Alright. I think the application slash

00:50:50.115 --> 00:50:51.714
<v Speaker 0>GraphQL is if you want to send the

00:50:51.714 --> 00:50:54.515
<v Speaker 0>raw GraphQL video, right, without actually

00:50:55.075 --> 00:50:56.915
<v Speaker 0>Oh. Change that to JSON.

00:50:58.355 --> 00:51:00.595
<v Speaker 2>Just got Without wrapping it in in this

00:51:00.900 --> 00:51:02.099
<v Speaker 2>struct, you mean?

00:51:02.660 --> 00:51:04.339
<v Speaker 0>Well, yeah. Like, you know, so, like, a

00:51:04.339 --> 00:51:05.140
<v Speaker 0>GraphQL

00:51:05.299 --> 00:51:07.859
<v Speaker 0>GraphQL request would be, like, query

00:51:08.180 --> 00:51:10.260
<v Speaker 0>I can't remember the exact syntax, but all

00:51:10.260 --> 00:51:11.380
<v Speaker 0>post name.

00:51:11.700 --> 00:51:13.779
<v Speaker 0>Like, you can send it without JSON without

00:51:13.779 --> 00:51:16.734
<v Speaker 0>converting that to JSON as GraphQL, depending on

00:51:16.734 --> 00:51:17.855
<v Speaker 0>the server of ours.

00:51:18.734 --> 00:51:19.695
<v Speaker 0>Got it. But we don't need to worry

00:51:19.695 --> 00:51:21.855
<v Speaker 0>about that today. Let's just do JSON.

00:51:22.655 --> 00:51:24.655
<v Speaker 2>Yeah. Fair enough. Alright.

00:51:24.974 --> 00:51:27.055
<v Speaker 2>So then what we're gonna wanna do is

00:51:27.055 --> 00:51:29.055
<v Speaker 2>we're gonna actually wanna make that request. So

00:51:29.055 --> 00:51:30.095
<v Speaker 2>we're gonna do

00:51:31.220 --> 00:51:33.700
<v Speaker 2>we're gonna take the, HTTP

00:51:33.700 --> 00:51:36.819
<v Speaker 2>client that we added to our GraphQL client,

00:51:36.819 --> 00:51:37.859
<v Speaker 2>and we're gonna actually,

00:51:38.260 --> 00:51:41.220
<v Speaker 2>use it to make a an actual request.

00:51:41.220 --> 00:51:44.020
<v Speaker 2>So we're gonna do, g dot do.

00:51:44.420 --> 00:51:46.260
<v Speaker 2>Oh, that's gonna be confusing. We should actually

00:51:46.260 --> 00:51:48.955
<v Speaker 2>call this client to prevent

00:51:48.955 --> 00:51:50.635
<v Speaker 2>making any mistakes.

00:51:52.155 --> 00:51:54.635
<v Speaker 2>If we have a do request do function

00:51:54.635 --> 00:51:56.475
<v Speaker 2>on this and a do function on the

00:51:56.475 --> 00:51:58.875
<v Speaker 2>HTTP client, we could run into some issues

00:51:58.875 --> 00:52:01.130
<v Speaker 2>here. So we'll do g dot client dot

00:52:01.130 --> 00:52:02.890
<v Speaker 2>dude just to be very specific about what

00:52:02.890 --> 00:52:04.090
<v Speaker 2>we're what we're trying to do here, and

00:52:04.090 --> 00:52:06.170
<v Speaker 2>we're gonna pass in that HTTP request object

00:52:06.170 --> 00:52:07.530
<v Speaker 2>that we created up here.

00:52:08.490 --> 00:52:10.490
<v Speaker 2>So we'll do the same

00:52:11.610 --> 00:52:12.730
<v Speaker 2>error checking

00:52:13.285 --> 00:52:14.245
<v Speaker 2>right here.

00:52:14.565 --> 00:52:16.485
<v Speaker 2>We're going to return no

00:52:16.565 --> 00:52:17.365
<v Speaker 2>and

00:52:19.285 --> 00:52:20.805
<v Speaker 2>failed to do,

00:52:21.045 --> 00:52:23.205
<v Speaker 2>and then we're gonna do something with this

00:52:23.205 --> 00:52:24.805
<v Speaker 2>response. So that response

00:52:25.619 --> 00:52:26.339
<v Speaker 2>contains

00:52:26.500 --> 00:52:29.220
<v Speaker 2>hopefully, if everything goes correctly, that is gonna

00:52:29.220 --> 00:52:31.859
<v Speaker 2>retain something that looks like this.

00:52:32.180 --> 00:52:35.059
<v Speaker 2>So we want to actually take the raw

00:52:35.059 --> 00:52:35.859
<v Speaker 2>response,

00:52:35.859 --> 00:52:37.779
<v Speaker 2>and we wanna load that data

00:52:38.095 --> 00:52:40.975
<v Speaker 2>into that struct. So we're gonna create,

00:52:41.695 --> 00:52:43.775
<v Speaker 2>we'll call it GQL response,

00:52:43.775 --> 00:52:47.295
<v Speaker 2>and it is going to be a, GraphQL,

00:52:48.095 --> 00:52:48.895
<v Speaker 2>response

00:52:48.895 --> 00:52:49.775
<v Speaker 2>object.

00:52:49.855 --> 00:52:51.695
<v Speaker 2>And then we're going to use that same

00:52:51.695 --> 00:52:55.220
<v Speaker 2>JSON package as before, But instead of marshal,

00:52:55.220 --> 00:52:56.980
<v Speaker 2>which takes a struct and turns it into

00:52:56.980 --> 00:52:58.820
<v Speaker 2>JSON, we're gonna do the opposite. We're gonna

00:52:58.820 --> 00:53:01.300
<v Speaker 2>use unmarshal, which takes JSON and turns it

00:53:01.300 --> 00:53:02.900
<v Speaker 2>into a struct. So,

00:53:04.339 --> 00:53:06.020
<v Speaker 2>we're going to unmarshal

00:53:06.020 --> 00:53:06.500
<v Speaker 2>the,

00:53:06.900 --> 00:53:08.579
<v Speaker 2>response dot body

00:53:09.835 --> 00:53:10.875
<v Speaker 2>into

00:53:11.195 --> 00:53:13.355
<v Speaker 2>the GQL response.

00:53:13.435 --> 00:53:14.955
<v Speaker 2>And we're gonna be a good

00:53:15.355 --> 00:53:17.915
<v Speaker 2>good best practice for Go is we're going

00:53:17.915 --> 00:53:18.555
<v Speaker 2>to

00:53:19.195 --> 00:53:20.715
<v Speaker 2>we're going to close

00:53:20.715 --> 00:53:21.435
<v Speaker 2>that

00:53:22.075 --> 00:53:23.355
<v Speaker 2>that body

00:53:24.440 --> 00:53:26.119
<v Speaker 2>similarly to how you would wanna close a

00:53:26.119 --> 00:53:28.119
<v Speaker 2>file. We're gonna close that body,

00:53:28.359 --> 00:53:29.640
<v Speaker 2>when we're done with it.

00:53:31.240 --> 00:53:32.680
<v Speaker 2>And we're gonna check the error on that

00:53:32.680 --> 00:53:33.400
<v Speaker 2>as well.

00:53:33.720 --> 00:53:34.279
<v Speaker 0>Of course.

00:53:36.855 --> 00:53:38.855
<v Speaker 2>There's a lot of this this this this

00:53:38.855 --> 00:53:41.095
<v Speaker 2>stanza. It repeats itself a lot in Go

00:53:41.095 --> 00:53:41.655
<v Speaker 2>code.

00:53:42.135 --> 00:53:43.575
<v Speaker 0>I've gotta say, I'm really impressed that you

00:53:43.575 --> 00:53:45.495
<v Speaker 0>haven't like, whenever I write Go code these

00:53:45.495 --> 00:53:47.815
<v Speaker 0>days, there's 50% go and 50% rust, and

00:53:47.815 --> 00:53:49.015
<v Speaker 0>I always have to go back and fix

00:53:49.015 --> 00:53:49.175
<v Speaker 0>it.

00:53:49.950 --> 00:53:51.869
<v Speaker 0>You've not typed f m once or

00:53:53.710 --> 00:53:55.550
<v Speaker 2>That's me when I'm writing Rust code. I

00:53:55.550 --> 00:53:58.030
<v Speaker 2>will very often accidentally write Go code while

00:53:58.030 --> 00:53:59.790
<v Speaker 2>I'm writing Rust. Yeah. I was writing I

00:53:59.790 --> 00:54:01.950
<v Speaker 2>just realized stop print or print l n

00:54:01.950 --> 00:54:03.550
<v Speaker 0>in the wrong language all the time. It's

00:54:03.550 --> 00:54:06.235
<v Speaker 0>so annoying. Yeah. I just realized we we

00:54:06.235 --> 00:54:07.995
<v Speaker 2>missed a step. We need to we need

00:54:07.995 --> 00:54:09.195
<v Speaker 2>to do response.

00:54:09.515 --> 00:54:10.555
<v Speaker 2>We need to do

00:54:10.955 --> 00:54:12.635
<v Speaker 2>response JSON

00:54:13.835 --> 00:54:16.475
<v Speaker 2>is IU tilde read all

00:54:16.955 --> 00:54:19.720
<v Speaker 2>response dot body. We need to actually extract

00:54:19.720 --> 00:54:21.400
<v Speaker 2>the raw bytes out of that

00:54:21.800 --> 00:54:22.680
<v Speaker 2>first.

00:54:25.480 --> 00:54:27.240
<v Speaker 2>I should really put this error not nil

00:54:27.240 --> 00:54:29.800
<v Speaker 2>into a into some kind of snippet.

00:54:30.040 --> 00:54:30.440
<v Speaker 2>Yeah.

00:54:31.955 --> 00:54:33.635
<v Speaker 2>I've become co pilot.

00:54:36.115 --> 00:54:38.115
<v Speaker 1>Use snippets. Use snippets.

00:54:38.435 --> 00:54:40.355
<v Speaker 1>You're gonna have some copyrighted

00:54:40.355 --> 00:54:41.075
<v Speaker 1>code in there.

00:54:45.210 --> 00:54:46.490
<v Speaker 2>Alright. So

00:54:46.810 --> 00:54:49.610
<v Speaker 2>now we have we've made the request.

00:54:49.850 --> 00:54:53.050
<v Speaker 2>We have read the response out of out

00:54:53.050 --> 00:54:55.130
<v Speaker 2>of here, and we're gonna actually do the

00:54:55.130 --> 00:54:57.685
<v Speaker 2>right thing here. So we've we've read the

00:54:57.685 --> 00:54:59.285
<v Speaker 2>we've read the raw bytes out of that

00:54:59.285 --> 00:55:01.765
<v Speaker 2>response, and then we're taking the JSON package

00:55:01.765 --> 00:55:04.005
<v Speaker 2>to actually convert that JSON

00:55:04.085 --> 00:55:05.605
<v Speaker 2>into the GraphQL

00:55:05.605 --> 00:55:08.325
<v Speaker 2>response type. So if we've gotten this far

00:55:08.325 --> 00:55:09.845
<v Speaker 2>and nothing go has gone wrong,

00:55:10.930 --> 00:55:12.770
<v Speaker 2>a, I'll be shocked if it works on

00:55:12.770 --> 00:55:14.690
<v Speaker 2>the first try, and b, it means that

00:55:14.690 --> 00:55:16.850
<v Speaker 2>we're done. So we can actually return

00:55:16.850 --> 00:55:19.330
<v Speaker 2>that GQL response and a nil error to

00:55:19.330 --> 00:55:20.930
<v Speaker 2>say that we are done.

00:55:24.775 --> 00:55:27.495
<v Speaker 2>So, yeah, Reza pointed out that

00:55:27.895 --> 00:55:29.815
<v Speaker 2>h ttp dot new request is not available

00:55:29.815 --> 00:55:32.135
<v Speaker 2>in TinyGo, and that's exactly correct. So because

00:55:32.135 --> 00:55:34.615
<v Speaker 2>when we talked about earlier that WebAssembly doesn't

00:55:34.615 --> 00:55:36.860
<v Speaker 2>have a native networking stack at all, Pretty

00:55:36.860 --> 00:55:38.220
<v Speaker 2>much the native

00:55:38.460 --> 00:55:41.180
<v Speaker 2>the native network library for any programming language

00:55:41.180 --> 00:55:43.260
<v Speaker 2>won't just work out of the box inside

00:55:43.260 --> 00:55:45.580
<v Speaker 2>of WebAssembly. So that's why we're creating,

00:55:45.980 --> 00:55:48.300
<v Speaker 2>you know, these interfaces so that we can

00:55:48.300 --> 00:55:51.175
<v Speaker 2>basically ask the host to do these complicated

00:55:51.175 --> 00:55:53.734
<v Speaker 2>networking tasks on behalf of the WebAssembly module

00:55:53.734 --> 00:55:55.815
<v Speaker 2>instead of trying to do it from within

00:55:55.815 --> 00:55:56.935
<v Speaker 2>the module itself.

00:56:02.214 --> 00:56:04.055
<v Speaker 2>Alright. What is this complaining about?

00:56:04.710 --> 00:56:07.030
<v Speaker 2>No custom. Oh, that's right. In order to

00:56:07.030 --> 00:56:09.190
<v Speaker 2>in order to do proper JSON marshaling, we

00:56:09.190 --> 00:56:11.670
<v Speaker 2>need to export all of these fields.

00:56:13.589 --> 00:56:15.670
<v Speaker 2>That's something that I always forget.

00:56:15.830 --> 00:56:18.550
<v Speaker 0>That was a a comment earlier from which

00:56:18.550 --> 00:56:20.230
<v Speaker 0>I didn't understand, and now I do.

00:56:21.315 --> 00:56:23.635
<v Speaker 0>They told us our struct fields aren't exported.

00:56:24.275 --> 00:56:26.435
<v Speaker 2>Yes. That's that's probably why it had the

00:56:26.435 --> 00:56:27.875
<v Speaker 2>yellow squigglies before.

00:56:29.315 --> 00:56:29.875
<v Speaker 1>Alright. Cool.

00:56:32.400 --> 00:56:35.760
<v Speaker 2>So I think, we have got a

00:56:36.160 --> 00:56:37.200
<v Speaker 2>very basic,

00:56:37.440 --> 00:56:39.520
<v Speaker 2>GraphQL client here. So

00:56:40.240 --> 00:56:41.680
<v Speaker 2>do we wanna try it out and see

00:56:41.680 --> 00:56:43.920
<v Speaker 2>if it actually works? No. That's good. Let's

00:56:43.920 --> 00:56:44.160
<v Speaker 0>finish.

00:56:46.235 --> 00:56:48.395
<v Speaker 1>Alright. Well, it's really nice hanging out, though.

00:56:51.035 --> 00:56:52.555
<v Speaker 2>Like, are you sure? You want him to

00:56:52.555 --> 00:56:53.435
<v Speaker 2>stay in here?

00:56:53.915 --> 00:56:55.435
<v Speaker 0>Let's let's do it. Let's let's see if

00:56:55.435 --> 00:56:57.835
<v Speaker 0>this works. Well, do we have a GraphQL

00:56:57.835 --> 00:56:59.995
<v Speaker 1>API out there that will take an unauthenticated

00:56:59.995 --> 00:57:01.660
<v Speaker 1>post and give us some data?

00:57:02.940 --> 00:57:05.500
<v Speaker 0>I do. I think David. I think David

00:57:05.500 --> 00:57:07.980
<v Speaker 2>might have something. Yeah. Cool.

00:57:09.020 --> 00:57:11.740
<v Speaker 2>So I'm gonna quickly create a

00:57:12.954 --> 00:57:15.515
<v Speaker 2>QL client. I'm gonna quickly create a constructor

00:57:15.515 --> 00:57:16.475
<v Speaker 2>for us here,

00:57:17.035 --> 00:57:19.355
<v Speaker 2>and then we can get to it. So

00:57:19.355 --> 00:57:21.674
<v Speaker 2>we're gonna create that GraphQL

00:57:21.674 --> 00:57:23.595
<v Speaker 2>client. We're gonna call,

00:57:24.155 --> 00:57:26.395
<v Speaker 2>h t t dot default client, and then

00:57:26.395 --> 00:57:29.260
<v Speaker 2>we're gonna return g, and that is going

00:57:29.260 --> 00:57:30.060
<v Speaker 2>to be

00:57:30.220 --> 00:57:31.500
<v Speaker 2>the

00:57:32.059 --> 00:57:33.180
<v Speaker 2>GraphQL

00:57:33.660 --> 00:57:35.420
<v Speaker 2>client we're looking for. So now we've got

00:57:35.420 --> 00:57:37.580
<v Speaker 2>a constructor to actually create this client,

00:57:37.980 --> 00:57:40.060
<v Speaker 2>and we can actually try to use it

00:57:40.140 --> 00:57:40.940
<v Speaker 2>in

00:57:41.980 --> 00:57:42.460
<v Speaker 2>graph.

00:57:42.875 --> 00:57:44.155
<v Speaker 2>Why is GraphQL

00:57:44.155 --> 00:57:46.075
<v Speaker 2>client so hard for me to type?

00:57:47.674 --> 00:57:49.755
<v Speaker 2>I'm not quite sure. Okay. So did one

00:57:49.755 --> 00:57:51.115
<v Speaker 2>of you wanna try

00:57:51.115 --> 00:57:53.275
<v Speaker 2>try actually using

00:57:53.275 --> 00:57:53.835
<v Speaker 2>this thing?

00:57:57.610 --> 00:57:58.410
<v Speaker 2>I like

00:57:58.810 --> 00:58:00.490
<v Speaker 1>I like to create start?

00:58:01.050 --> 00:58:03.850
<v Speaker 2>I like to create a tester file here

00:58:03.850 --> 00:58:05.370
<v Speaker 2>with a main dot go,

00:58:05.770 --> 00:58:06.490
<v Speaker 2>and

00:58:06.970 --> 00:58:08.730
<v Speaker 2>I will I will create your

00:58:09.255 --> 00:58:10.934
<v Speaker 2>I'll create your main function for you, and

00:58:10.934 --> 00:58:12.535
<v Speaker 2>then I'm gonna let one of you two,

00:58:12.855 --> 00:58:15.015
<v Speaker 2>go crazy and and It's gonna have to

00:58:15.015 --> 00:58:16.855
<v Speaker 1>be you. I don't know. Go.

00:58:18.535 --> 00:58:19.734
<v Speaker 2>David, I think you need to take a

00:58:19.734 --> 00:58:20.295
<v Speaker 2>stab at this.

00:58:21.940 --> 00:58:23.620
<v Speaker 0>I wish I was paying more attention, but

00:58:23.620 --> 00:58:24.260
<v Speaker 0>sure.

00:58:25.860 --> 00:58:27.940
<v Speaker 1>Let's go out there. Pokemon test servers are

00:58:27.940 --> 00:58:28.660
<v Speaker 1>the best.

00:58:29.380 --> 00:58:30.500
<v Speaker 1>Thank you, Rizzo.

00:58:32.500 --> 00:58:34.420
<v Speaker 0>Alright. So we wanna be able to consume

00:58:34.420 --> 00:58:36.260
<v Speaker 0>this new GraphQL client. Right?

00:58:37.205 --> 00:58:38.805
<v Speaker 2>Mhmm. That's right.

00:58:39.205 --> 00:58:39.925
<v Speaker 2>So

00:58:40.485 --> 00:58:42.165
<v Speaker 2>we should be able to

00:58:42.725 --> 00:58:43.605
<v Speaker 2>import

00:58:43.765 --> 00:58:45.765
<v Speaker 2>from the r cap package that

00:58:46.805 --> 00:58:49.045
<v Speaker 2>so it'll be r cap dot new GraphQL

00:58:49.045 --> 00:58:49.845
<v Speaker 2>client.

00:58:51.045 --> 00:58:51.445
<v Speaker 2>Mhmm.

00:58:56.359 --> 00:58:58.599
<v Speaker 2>So for Go, we're gonna need the fully

00:58:58.599 --> 00:59:00.360
<v Speaker 2>qualified import path.

00:59:00.599 --> 00:59:01.480
<v Speaker 0>Oh, yeah.

00:59:03.880 --> 00:59:06.520
<v Speaker 2>Alright. Cap. Just like that. So that should

00:59:06.520 --> 00:59:07.400
<v Speaker 2>be cool.

00:59:07.800 --> 00:59:09.515
<v Speaker 0>And it doesn't return the matter. Yep. It

00:59:09.515 --> 00:59:11.115
<v Speaker 0>just returns the thing. So now I can

00:59:11.115 --> 00:59:12.954
<v Speaker 0>do Yeah. Find dot

00:59:13.115 --> 00:59:13.835
<v Speaker 0>do.

00:59:14.795 --> 00:59:17.835
<v Speaker 0>Yeah. And I can call my endpoint.

00:59:19.595 --> 00:59:19.994
<v Speaker 0>Yeah.

00:59:20.940 --> 00:59:23.100
<v Speaker 0>And I can pass in my

00:59:23.339 --> 00:59:24.220
<v Speaker 0>query,

00:59:25.180 --> 00:59:26.859
<v Speaker 0>which I'm gonna jump over here and get

00:59:26.859 --> 00:59:27.420
<v Speaker 0>one.

00:59:27.900 --> 00:59:29.740
<v Speaker 0>But this is it. This is an API

00:59:29.740 --> 00:59:30.540
<v Speaker 0>that

00:59:30.540 --> 00:59:32.140
<v Speaker 0>I've been I'm I'm trying to move all

00:59:32.140 --> 00:59:33.820
<v Speaker 0>of the episode data and stuff like that

00:59:33.820 --> 00:59:36.365
<v Speaker 0>to get hub and then publish this API

00:59:36.365 --> 00:59:38.125
<v Speaker 0>so that it can be consumed by anyone.

00:59:38.365 --> 00:59:39.645
<v Speaker 0>So there's not a lot in it, but

00:59:39.645 --> 00:59:41.405
<v Speaker 0>there's enough to get it started. And then

00:59:41.405 --> 00:59:43.005
<v Speaker 0>as we've got in the comments, there is

00:59:43.005 --> 00:59:44.605
<v Speaker 0>Pokemon APIs we can use to

00:59:45.405 --> 00:59:47.085
<v Speaker 2>Yeah. Yeah. If we wanna get into the

00:59:47.085 --> 00:59:50.410
<v Speaker 2>Pokemon APIs, I'm definitely interested in that. Alright.

00:59:50.410 --> 00:59:53.450
<v Speaker 0>So why don't we just pull down profiles

00:59:54.650 --> 00:59:56.330
<v Speaker 0>and then we'll grab my name.

00:59:56.890 --> 00:59:58.490
<v Speaker 0>Make sure it come down. Pokemon APIs are

00:59:58.490 --> 01:00:00.410
<v Speaker 1>the best hello world of GraphQL.

01:00:00.810 --> 01:00:02.330
<v Speaker 0>Not to do apps? I thought it was

01:00:02.330 --> 01:00:03.610
<v Speaker 0>all about the to do app. No?

01:00:05.415 --> 01:00:08.135
<v Speaker 1>No. They're better. So much cooler data.

01:00:09.815 --> 01:00:11.815
<v Speaker 2>Yeah. So is this correct?

01:00:13.095 --> 01:00:15.335
<v Speaker 2>That looks about right to me. So that

01:00:15.335 --> 01:00:17.255
<v Speaker 2>do function is gonna return

01:00:18.030 --> 01:00:19.630
<v Speaker 2>either a response or an error, so you

01:00:19.630 --> 01:00:20.590
<v Speaker 2>gotta assign

01:00:20.590 --> 01:00:21.950
<v Speaker 2>something to it.

01:00:22.430 --> 01:00:23.230
<v Speaker 2>Exactly.

01:00:23.230 --> 01:00:24.110
<v Speaker 2>That's right.

01:00:24.350 --> 01:00:26.910
<v Speaker 2>So then we can do the good old

01:00:26.910 --> 01:00:29.550
<v Speaker 2>error check, and we can see if this

01:00:29.550 --> 01:00:31.070
<v Speaker 2>thing if this thing works.

01:00:31.635 --> 01:00:33.955
<v Speaker 2>That's

01:00:33.955 --> 01:00:36.115
<v Speaker 2>the right that's exactly right. So then

01:00:36.595 --> 01:00:37.795
<v Speaker 2>if it is

01:00:39.235 --> 01:00:40.995
<v Speaker 2>if it is successful,

01:00:41.235 --> 01:00:43.155
<v Speaker 2>then we should be able to maybe just

01:00:43.155 --> 01:00:45.475
<v Speaker 2>print response dot data or something like that.

01:00:47.760 --> 01:00:49.440
<v Speaker 2>Let's see what happens.

01:00:50.080 --> 01:00:52.720
<v Speaker 2>Data. Data would have yeah. There you go.

01:00:53.440 --> 01:00:54.160
<v Speaker 2>Okay.

01:00:54.640 --> 01:00:56.640
<v Speaker 2>That's not complaining on my end, so why

01:00:56.640 --> 01:00:58.880
<v Speaker 2>don't we give it a try? Print

01:00:59.200 --> 01:01:01.040
<v Speaker 1>in the error. Print the error.

01:01:02.285 --> 01:01:03.805
<v Speaker 2>Oh, yeah. We should print the error. That's

01:01:03.805 --> 01:01:05.805
<v Speaker 2>right on on run 21 there.

01:01:09.565 --> 01:01:11.485
<v Speaker 0>Oh. Actually, you know, we can we can

01:01:11.485 --> 01:01:13.325
<v Speaker 2>do an alternative to OS dot exit. We

01:01:13.325 --> 01:01:15.725
<v Speaker 2>can do log dot fatal. Fatal allows you

01:01:15.725 --> 01:01:18.460
<v Speaker 2>to actually pass in the error as a

01:01:18.460 --> 01:01:19.420
<v Speaker 2>as a

01:01:20.059 --> 01:01:21.980
<v Speaker 2>as a parameter. Alright.

01:01:22.220 --> 01:01:23.740
<v Speaker 2>Shall we try to run this?

01:01:24.859 --> 01:01:26.700
<v Speaker 1>Let's do it. Yeah. Let's

01:01:26.940 --> 01:01:28.779
<v Speaker 2>you do you a share terminal? Go tool

01:01:28.779 --> 01:01:29.099
<v Speaker 2>chain?

01:01:29.655 --> 01:01:31.335
<v Speaker 2>I don't know. I haven't I haven't used

01:01:31.335 --> 01:01:33.255
<v Speaker 2>this share thing in a long time. Do

01:01:33.255 --> 01:01:35.015
<v Speaker 2>you wanna try to pop one up? Yeah.

01:01:35.415 --> 01:01:37.335
<v Speaker 2>There you go. Do you have the Go

01:01:37.335 --> 01:01:39.495
<v Speaker 2>tool chain installed? Yeah. You only think of

01:01:39.495 --> 01:01:41.575
<v Speaker 0>us It's running on your machine.

01:01:42.055 --> 01:01:43.415
<v Speaker 0>Yeah. You should be able to run it

01:01:43.415 --> 01:01:44.055
<v Speaker 0>here, and

01:01:45.470 --> 01:01:47.710
<v Speaker 0>and we should be check. Show you?

01:01:48.029 --> 01:01:49.630
<v Speaker 0>If you use the same terminal, we have

01:01:49.630 --> 01:01:51.309
<v Speaker 0>two right now. So don't type in your

01:01:51.309 --> 01:01:53.230
<v Speaker 0>first one. I guess I could just click

01:01:53.230 --> 01:01:54.990
<v Speaker 0>it. Oh. No. Wait. That's my terminal. Yeah.

01:01:54.990 --> 01:01:56.349
<v Speaker 0>If you click in the shared terminal.

01:01:57.684 --> 01:01:59.205
<v Speaker 2>Okay.

01:02:00.325 --> 01:02:02.164
<v Speaker 2>I don't even see that. Let me find

01:02:02.164 --> 01:02:03.845
<v Speaker 2>it here. Oh, there it is.

01:02:05.045 --> 01:02:06.325
<v Speaker 2>Shared terminal.

01:02:06.645 --> 01:02:07.525
<v Speaker 2>Is that

01:02:07.845 --> 01:02:09.845
<v Speaker 0>Yeah. There we go. Oh. ASPS. There we

01:02:09.845 --> 01:02:11.125
<v Speaker 2>go. Alright. Cool.

01:02:11.880 --> 01:02:13.799
<v Speaker 2>This is awesome. I love this live share

01:02:13.799 --> 01:02:15.640
<v Speaker 2>thing. Alright. So we're going to

01:02:16.039 --> 01:02:17.640
<v Speaker 2>we're gonna go run this thing. So we're

01:02:17.640 --> 01:02:20.279
<v Speaker 2>gonna do our cap slash tester slash main

01:02:20.279 --> 01:02:21.240
<v Speaker 2>dot go,

01:02:21.960 --> 01:02:24.119
<v Speaker 2>and we're gonna see if this works.

01:02:26.185 --> 01:02:28.425
<v Speaker 2>Hey. Look at that. Fast.

01:02:28.665 --> 01:02:31.065
<v Speaker 0>It worked. We're getting some data. Even

01:02:31.785 --> 01:02:33.545
<v Speaker 0>though you had me tape it. Oh, that's

01:02:36.185 --> 01:02:38.025
<v Speaker 2>That just goes to show that the library

01:02:38.025 --> 01:02:38.984
<v Speaker 2>is really solid.

01:02:40.299 --> 01:02:41.580
<v Speaker 0>I didn't ship it.

01:02:41.980 --> 01:02:43.579
<v Speaker 1>Can we do this again? Let's make a

01:02:43.660 --> 01:02:45.019
<v Speaker 1>let's make an error. I wanna see what

01:02:45.019 --> 01:02:46.299
<v Speaker 1>the errors look like. So if I do

01:02:46.299 --> 01:02:47.180
<v Speaker 1>all profiles

01:02:47.819 --> 01:02:50.380
<v Speaker 1>z z z z z, I save that.

01:02:50.380 --> 01:02:50.940
<v Speaker 2>Yeah.

01:02:51.180 --> 01:02:53.339
<v Speaker 1>And then I And then I'll I'll

01:02:53.339 --> 01:02:54.059
<v Speaker 1>extend it again.

01:02:57.075 --> 01:02:57.795
<v Speaker 2>Oh,

01:02:58.355 --> 01:02:59.955
<v Speaker 2>it looks like it didn't,

01:03:00.275 --> 01:03:02.835
<v Speaker 2>it didn't detect the errors, so we that

01:03:02.835 --> 01:03:05.875
<v Speaker 2>that seems like a bug in our,

01:03:06.115 --> 01:03:07.155
<v Speaker 2>in our end.

01:03:07.395 --> 01:03:08.915
<v Speaker 2>Well, why don't we check out what's going

01:03:08.915 --> 01:03:11.819
<v Speaker 2>on there? I'm curious. We wanna follow-up. We

01:03:11.819 --> 01:03:14.460
<v Speaker 1>may get one of several errors here. We

01:03:14.460 --> 01:03:16.859
<v Speaker 1>might get a 200 response with an with

01:03:16.859 --> 01:03:17.660
<v Speaker 1>the errors,

01:03:17.900 --> 01:03:20.380
<v Speaker 1>array. We might get a 400 response with

01:03:20.380 --> 01:03:22.539
<v Speaker 1>the errors array. We might get a 500

01:03:22.539 --> 01:03:23.020
<v Speaker 1>response

01:03:23.575 --> 01:03:25.015
<v Speaker 1>with the errors array,

01:03:25.015 --> 01:03:27.335
<v Speaker 1>or or we may get nothing. You know?

01:03:27.575 --> 01:03:29.655
<v Speaker 2>Right. Alright. Well, we can we can account

01:03:29.655 --> 01:03:30.775
<v Speaker 2>for all those. Do you wanna follow my

01:03:30.775 --> 01:03:32.535
<v Speaker 2>cursor again, David? We can try to add

01:03:32.535 --> 01:03:34.055
<v Speaker 2>a little bit of robustness to this thing.

01:03:35.640 --> 01:03:36.520
<v Speaker 0>Following?

01:03:37.559 --> 01:03:40.200
<v Speaker 2>Yeah. There we go. So what we'll do

01:03:40.200 --> 01:03:42.680
<v Speaker 2>is once we've gotten this response back and

01:03:42.680 --> 01:03:45.480
<v Speaker 2>we've kind of read the the data out

01:03:45.480 --> 01:03:47.079
<v Speaker 2>of it, we can actually go and add

01:03:47.079 --> 01:03:48.440
<v Speaker 2>some extra checking here.

01:03:49.475 --> 01:03:51.795
<v Speaker 2>Do you wanna deselect that text maybe?

01:03:52.515 --> 01:03:53.315
<v Speaker 2>There we go.

01:03:53.715 --> 01:03:55.155
<v Speaker 2>So what we can do is we can

01:03:55.155 --> 01:03:57.155
<v Speaker 2>say if the response

01:03:57.155 --> 01:03:58.915
<v Speaker 2>dot status code

01:03:58.995 --> 01:04:00.835
<v Speaker 2>is not a 200

01:04:01.299 --> 01:04:03.779
<v Speaker 2>or we can say is greater than 299,

01:04:03.779 --> 01:04:05.300
<v Speaker 2>that's what I usually like to do,

01:04:06.740 --> 01:04:07.380
<v Speaker 2>then,

01:04:07.700 --> 01:04:09.220
<v Speaker 2>we can return,

01:04:09.940 --> 01:04:10.580
<v Speaker 2>the

01:04:10.819 --> 01:04:12.339
<v Speaker 2>oh, actually, we wanna do this after we've

01:04:12.339 --> 01:04:14.980
<v Speaker 2>parsed the, the JSON. Okay. So the problem

01:04:14.980 --> 01:04:17.275
<v Speaker 0>we never got the error there was because

01:04:17.275 --> 01:04:19.995
<v Speaker 0>the GraphQL server is actually saying 200 okay

01:04:19.995 --> 01:04:21.915
<v Speaker 0>and the errors and the response,

01:04:21.915 --> 01:04:23.515
<v Speaker 0>which is why we never got the error

01:04:23.515 --> 01:04:26.955
<v Speaker 0>handling. Got it. Exactly. And so If if

01:04:26.955 --> 01:04:29.849
<v Speaker 1>errors is not null or undefined or whatever,

01:04:29.849 --> 01:04:31.530
<v Speaker 1>that's when we know we have a GraphQL

01:04:31.530 --> 01:04:33.609
<v Speaker 1>error. There still might be GraphQL data, but

01:04:33.609 --> 01:04:35.289
<v Speaker 1>that's that's when we know something bad one

01:04:35.289 --> 01:04:38.410
<v Speaker 1>happened, like, hands down across every server.

01:04:39.530 --> 01:04:41.210
<v Speaker 2>So what we'll do here is we'll say

01:04:41.210 --> 01:04:41.930
<v Speaker 2>else

01:04:42.535 --> 01:04:46.215
<v Speaker 2>if the GQL response dot errors

01:04:47.015 --> 01:04:48.855
<v Speaker 2>were in fact did we make that Omid

01:04:48.855 --> 01:04:50.615
<v Speaker 2>empty? I can't remember. We did. It's empty.

01:04:50.615 --> 01:04:51.575
<v Speaker 2>So we'll say

01:04:51.895 --> 01:04:54.535
<v Speaker 2>we'll say if it's not nil and

01:04:54.535 --> 01:04:56.055
<v Speaker 2>the length of it

01:04:56.760 --> 01:04:57.560
<v Speaker 2>is

01:04:57.960 --> 01:04:59.320
<v Speaker 2>greater than zero,

01:04:59.880 --> 01:05:00.680
<v Speaker 2>we will

01:05:01.000 --> 01:05:04.520
<v Speaker 2>return the response and an error

01:05:05.400 --> 01:05:07.560
<v Speaker 2>saying that the

01:05:07.720 --> 01:05:09.640
<v Speaker 2>graph

01:05:08.885 --> 01:05:12.005
<v Speaker 2>QL I cannot type those words in that

01:05:12.005 --> 01:05:13.925
<v Speaker 2>particular order for some reason.

01:05:14.325 --> 01:05:15.684
<v Speaker 2>GraphQL

01:05:15.684 --> 01:05:16.565
<v Speaker 2>returned

01:05:16.565 --> 01:05:17.605
<v Speaker 2>errors,

01:05:17.605 --> 01:05:18.964
<v Speaker 2>something like that. So that Would you really

01:05:18.964 --> 01:05:20.645
<v Speaker 0>make that an else if, or would it

01:05:20.645 --> 01:05:21.605
<v Speaker 0>just be two ifs?

01:05:23.339 --> 01:05:25.019
<v Speaker 2>I guess it could be both. Yeah. You're

01:05:25.019 --> 01:05:25.500
<v Speaker 2>right.

01:05:26.859 --> 01:05:29.099
<v Speaker 2>So Yeah. Yeah. So this way, we'll still

01:05:29.099 --> 01:05:30.859
<v Speaker 2>return the response so you can actually see

01:05:30.859 --> 01:05:32.539
<v Speaker 2>what's inside of those error objects, but we're

01:05:32.539 --> 01:05:34.925
<v Speaker 2>also returning a non null error object so

01:05:34.925 --> 01:05:36.125
<v Speaker 2>that when you're

01:05:36.365 --> 01:05:38.205
<v Speaker 2>in main dot go, when you check to

01:05:38.205 --> 01:05:39.484
<v Speaker 2>see if the error is not null, we

01:05:39.484 --> 01:05:41.725
<v Speaker 2>will actually catch this log that fails. So

01:05:41.725 --> 01:05:43.165
<v Speaker 2>now, theoretically,

01:05:43.325 --> 01:05:44.925
<v Speaker 2>if I did if I did that right,

01:05:44.925 --> 01:05:46.445
<v Speaker 2>we should be able to run this again,

01:05:46.765 --> 01:05:49.740
<v Speaker 2>and we should get an actual error. Tada.

01:05:49.740 --> 01:05:51.420
<v Speaker 0>I'm only logging in. Ah.

01:05:52.060 --> 01:05:54.460
<v Speaker 2>Can we Okay. So Can we always log

01:05:54.460 --> 01:05:56.380
<v Speaker 1>the whole request instead of just the data?

01:05:57.020 --> 01:05:58.700
<v Speaker 2>Sure. So we can

01:05:59.580 --> 01:06:00.540
<v Speaker 2>do a

01:06:01.020 --> 01:06:03.555
<v Speaker 1>A response. Sorry. Println response.

01:06:03.555 --> 01:06:05.315
<v Speaker 2>Yes. Just so that we can see exactly

01:06:05.315 --> 01:06:06.755
<v Speaker 2>what it's complaining about.

01:06:09.075 --> 01:06:09.795
<v Speaker 2>Okay.

01:06:10.035 --> 01:06:11.155
<v Speaker 2>Nice. So

01:06:12.035 --> 01:06:14.115
<v Speaker 2>nice. Yeah. It it looks like it it

01:06:14.115 --> 01:06:16.990
<v Speaker 2>returned it returned that, and it's actually gave

01:06:16.990 --> 01:06:18.030
<v Speaker 2>us a suggestion.

01:06:18.430 --> 01:06:18.990
<v Speaker 0>Yeah.

01:06:19.710 --> 01:06:22.670
<v Speaker 0>Something Francis said earlier caught my attention was

01:06:22.670 --> 01:06:24.590
<v Speaker 0>that they can get partial returns. So I

01:06:24.590 --> 01:06:26.270
<v Speaker 0>was curious of, like, can can we actually

01:06:26.270 --> 01:06:26.830
<v Speaker 0>do,

01:06:27.070 --> 01:06:29.390
<v Speaker 0>like, one valid and one not valid and

01:06:29.390 --> 01:06:31.150
<v Speaker 0>then run it? With is that correct? Yeah.

01:06:32.625 --> 01:06:33.665
<v Speaker 2>Oh, okay.

01:06:33.905 --> 01:06:36.545
<v Speaker 1>That that would absolutely work. Yeah.

01:06:37.265 --> 01:06:39.105
<v Speaker 0>K. Okay. Let's try it.

01:06:39.985 --> 01:06:41.425
<v Speaker 2>Yeah. I'll run that and let's see if

01:06:41.585 --> 01:06:42.385
<v Speaker 1>no,

01:06:42.785 --> 01:06:45.185
<v Speaker 1>I think. Actually, it might be that query

01:06:45.185 --> 01:06:47.400
<v Speaker 1>is no on this case because query had

01:06:47.400 --> 01:06:48.920
<v Speaker 1>returned an error. But let's find out what

01:06:48.920 --> 01:06:49.960
<v Speaker 1>your server does.

01:06:50.520 --> 01:06:52.119
<v Speaker 2>Yeah. Let's see what it does. We could

01:06:52.119 --> 01:06:53.400
<v Speaker 1>always make surname,

01:06:54.119 --> 01:06:54.840
<v Speaker 1>you know,

01:06:55.960 --> 01:06:57.240
<v Speaker 1>have a z at the end.

01:06:58.280 --> 01:06:59.800
<v Speaker 2>I see. So you know what happened here

01:06:59.800 --> 01:07:01.080
<v Speaker 2>is because we

01:07:01.640 --> 01:07:02.520
<v Speaker 2>we

01:07:02.975 --> 01:07:04.735
<v Speaker 2>oh, yeah. So it does look like it

01:07:04.735 --> 01:07:06.655
<v Speaker 2>worked. So we got nothing

01:07:07.135 --> 01:07:08.415
<v Speaker 2>for the data,

01:07:08.575 --> 01:07:10.415
<v Speaker 2>and then we got an error. So it

01:07:10.415 --> 01:07:12.415
<v Speaker 2>does look like it fails

01:07:12.495 --> 01:07:14.095
<v Speaker 2>on that part of it and did not

01:07:14.095 --> 01:07:15.215
<v Speaker 2>give us partial data back.

01:07:15.849 --> 01:07:18.490
<v Speaker 1>So I think let's try this because

01:07:19.369 --> 01:07:20.810
<v Speaker 1>this should give us

01:07:21.770 --> 01:07:23.050
<v Speaker 1>yeah. I think this would give us what

01:07:23.050 --> 01:07:23.770
<v Speaker 1>we want.

01:07:24.810 --> 01:07:25.530
<v Speaker 1>Okay.

01:07:27.369 --> 01:07:29.290
<v Speaker 2>Should I run that? Yeah. Let's try it.

01:07:30.405 --> 01:07:31.205
<v Speaker 2>Alright.

01:07:33.205 --> 01:07:34.085
<v Speaker 2>Not

01:07:34.085 --> 01:07:34.725
<v Speaker 2>quite.

01:07:34.885 --> 01:07:36.885
<v Speaker 0>So this is fast holding. I should also

01:07:36.885 --> 01:07:38.405
<v Speaker 0>caveat that this is

01:07:38.725 --> 01:07:40.245
<v Speaker 0>a GraphQL server

01:07:40.405 --> 01:07:43.300
<v Speaker 0>that generates it based on JSON data with

01:07:43.300 --> 01:07:44.579
<v Speaker 0>no types and stuff like that. So it's

01:07:44.579 --> 01:07:46.980
<v Speaker 0>not like a fully fledged Apollo GraphQL server.

01:07:46.980 --> 01:07:48.819
<v Speaker 0>Probably doesn't have all these bells and whistles.

01:07:48.819 --> 01:07:50.099
<v Speaker 0>So maybe this is probably as good as

01:07:50.099 --> 01:07:51.300
<v Speaker 0>it's gonna get. You know why it's not

01:07:51.300 --> 01:07:53.620
<v Speaker 1>executing? Because it's not a valid query.

01:07:54.099 --> 01:07:56.660
<v Speaker 1>There's a query validation step that runs first

01:07:56.505 --> 01:07:58.425
<v Speaker 1>to make sure it matches the schema.

01:07:58.505 --> 01:08:00.744
<v Speaker 1>Because this doesn't match the schema, it's not.

01:08:00.744 --> 01:08:02.505
<v Speaker 1>If you made one of the resolvers throw

01:08:02.505 --> 01:08:04.424
<v Speaker 1>an error or say you have a connection

01:08:04.424 --> 01:08:06.345
<v Speaker 1>and you can put in some invalid range

01:08:06.345 --> 01:08:08.265
<v Speaker 1>or something that will throw an error, that's

01:08:08.265 --> 01:08:10.210
<v Speaker 1>when we'll get partial data back. But this

01:08:10.210 --> 01:08:12.690
<v Speaker 1>isn't this isn't even executing at all. Your

01:08:12.690 --> 01:08:14.690
<v Speaker 1>server's going, you're giving me bad input.

01:08:14.850 --> 01:08:16.689
<v Speaker 1>I'll shut you down before I start using

01:08:16.689 --> 01:08:17.810
<v Speaker 1>any of my resources.

01:08:18.050 --> 01:08:19.489
<v Speaker 0>Okay. That makes sense.

01:08:20.370 --> 01:08:21.410
<v Speaker 2>That makes perfect sense.

01:08:22.175 --> 01:08:22.895
<v Speaker 2>Alright.

01:08:23.455 --> 01:08:24.095
<v Speaker 2>So

01:08:24.255 --> 01:08:26.655
<v Speaker 2>if we reformat that to be correct, then

01:08:26.655 --> 01:08:27.935
<v Speaker 2>we should be able to run this and

01:08:27.935 --> 01:08:30.575
<v Speaker 2>get a good response back. There it is.

01:08:31.055 --> 01:08:31.854
<v Speaker 2>Alright.

01:08:32.335 --> 01:08:33.375
<v Speaker 2>Very cool.

01:08:34.095 --> 01:08:36.415
<v Speaker 2>Alright. So we're gonna oh, I should probably

01:08:36.415 --> 01:08:37.215
<v Speaker 2>have a branch for this.

01:08:38.740 --> 01:08:40.500
<v Speaker 0>That would be a nice idea. Yeah.

01:08:41.220 --> 01:08:42.740
<v Speaker 2>I'm I'm gonna name it Connor. I'm gonna

01:08:42.740 --> 01:08:44.020
<v Speaker 2>get name it Rawkode

01:08:44.100 --> 01:08:47.060
<v Speaker 2>GraphQL because You need dash b. For Stella.

01:08:47.060 --> 01:08:48.899
<v Speaker 2>Oh, yeah. I do need dash b. You're

01:08:48.899 --> 01:08:49.460
<v Speaker 2>right.

01:08:50.260 --> 01:08:51.380
<v Speaker 2>Nope. That's not a dash.

01:08:52.965 --> 01:08:55.045
<v Speaker 2>My typing skills go to hell whenever I'm

01:08:55.045 --> 01:08:57.285
<v Speaker 2>on a whenever I'm Francis and I are

01:08:57.285 --> 01:08:58.885
<v Speaker 0>getting cooperates

01:08:58.885 --> 01:09:00.725
<v Speaker 0>on SPR too, by the way. Just

01:09:01.365 --> 01:09:02.085
<v Speaker 2>Uh-huh.

01:09:03.125 --> 01:09:05.364
<v Speaker 2>So we'll say basic working

01:09:05.445 --> 01:09:06.325
<v Speaker 2>GQL

01:09:06.325 --> 01:09:07.685
<v Speaker 2>client with

01:09:08.090 --> 01:09:09.529
<v Speaker 2>Rawkode

01:09:10.010 --> 01:09:11.849
<v Speaker 2>and Reconbot.

01:09:12.969 --> 01:09:14.809
<v Speaker 2>There you go. Nice. Oh, I gotta add

01:09:14.809 --> 01:09:15.849
<v Speaker 2>stuff first, though.

01:09:18.170 --> 01:09:18.569
<v Speaker 2>Alright.

01:09:20.635 --> 01:09:22.314
<v Speaker 2>Hopefully, you won't be able to see my

01:09:22.314 --> 01:09:24.395
<v Speaker 2>my password manager pop up with oh, you

01:09:24.475 --> 01:09:25.835
<v Speaker 2>we're not even sharing my screen, so we're

01:09:25.835 --> 01:09:28.555
<v Speaker 2>good. Nope. I agree. I'm worried about the

01:09:28.555 --> 01:09:29.354
<v Speaker 0>terminal.

01:09:29.835 --> 01:09:30.955
<v Speaker 0>It seems okay.

01:09:31.675 --> 01:09:33.515
<v Speaker 2>Yeah. No. It's it hides it hides it

01:09:33.515 --> 01:09:33.675
<v Speaker 2>there.

01:09:34.689 --> 01:09:37.569
<v Speaker 2>Cool. Alright. So we have got

01:09:38.130 --> 01:09:40.770
<v Speaker 2>the basic one working. So now we'll move

01:09:40.770 --> 01:09:42.290
<v Speaker 2>on to the next step, and we wanna

01:09:42.290 --> 01:09:45.330
<v Speaker 2>take this Go client that we've created here,

01:09:45.490 --> 01:09:48.465
<v Speaker 2>and we wanna expose it as a host

01:09:48.465 --> 01:09:50.304
<v Speaker 2>function that can be called

01:09:50.625 --> 01:09:51.665
<v Speaker 2>by a,

01:09:52.145 --> 01:09:54.784
<v Speaker 2>by a a WebAssembly module. So we're gonna

01:09:54.784 --> 01:09:56.545
<v Speaker 2>quickly go back to that capabilities,

01:09:56.784 --> 01:09:58.784
<v Speaker 2>struct, and we're gonna add this as one

01:09:58.784 --> 01:09:59.505
<v Speaker 2>of the,

01:09:59.985 --> 01:10:00.784
<v Speaker 2>available,

01:10:01.665 --> 01:10:02.304
<v Speaker 2>capabilities.

01:10:04.350 --> 01:10:06.830
<v Speaker 1>Still cannot take that. Forgot about all this.

01:10:07.950 --> 01:10:09.390
<v Speaker 2>I was like, hey. We were we made

01:10:09.390 --> 01:10:10.190
<v Speaker 1>the client.

01:10:11.790 --> 01:10:12.510
<v Speaker 1>Yeah.

01:10:14.030 --> 01:10:16.430
<v Speaker 2>So we're gonna set it for the so

01:10:16.430 --> 01:10:18.675
<v Speaker 2>there's a function here for default capabilities. So

01:10:18.675 --> 01:10:20.355
<v Speaker 2>we're just gonna fill that in in as

01:10:20.355 --> 01:10:23.155
<v Speaker 2>well so that, you know, by default, modules

01:10:23.235 --> 01:10:24.755
<v Speaker 2>can have that

01:10:25.155 --> 01:10:27.715
<v Speaker 2>that GraphQL client available to them.

01:10:28.035 --> 01:10:29.795
<v Speaker 2>The nice thing about Reactor is that if

01:10:29.795 --> 01:10:31.555
<v Speaker 2>you wanna pass in a custom version of

01:10:31.555 --> 01:10:32.275
<v Speaker 2>this struct

01:10:33.120 --> 01:10:35.600
<v Speaker 2>to a particular module, you can change it

01:10:35.600 --> 01:10:38.240
<v Speaker 2>per module, and that's how you define

01:10:38.240 --> 01:10:41.120
<v Speaker 2>which module is able to access which capabilities.

01:10:41.120 --> 01:10:42.560
<v Speaker 2>So that's kind of a a neat a

01:10:42.560 --> 01:10:44.400
<v Speaker 2>neat part of this. What is Why is

01:10:44.400 --> 01:10:45.600
<v Speaker 2>it mad at us? It's

01:10:46.185 --> 01:10:48.745
<v Speaker 2>it's mad at us. Oh, because we need

01:10:48.745 --> 01:10:51.705
<v Speaker 2>to make this a pointer.

01:10:52.825 --> 01:10:54.265
<v Speaker 2>I will I will come back and clean

01:10:54.265 --> 01:10:55.465
<v Speaker 2>some of this up later.

01:10:57.145 --> 01:10:59.385
<v Speaker 2>Cool. So now we've got this capabilities object

01:10:59.385 --> 01:11:02.000
<v Speaker 2>that contains our GraphQL client, and we're gonna

01:11:02.000 --> 01:11:05.280
<v Speaker 2>go ahead and expose it to the WebAssembly

01:11:05.280 --> 01:11:08.640
<v Speaker 2>modules via a host function. So we're gonna

01:11:08.640 --> 01:11:11.040
<v Speaker 2>pop over to the r wasm package, which

01:11:11.040 --> 01:11:14.320
<v Speaker 2>contains all of our different host functions.

01:11:14.480 --> 01:11:16.095
<v Speaker 2>And I'm gonna create a new file called

01:11:16.095 --> 01:11:18.175
<v Speaker 2>API GraphQL,

01:11:19.055 --> 01:11:21.295
<v Speaker 2>and that's where we're going to meet. There

01:11:21.295 --> 01:11:22.255
<v Speaker 2>we go. So

01:11:23.055 --> 01:11:26.415
<v Speaker 2>our wasm is the reactor wasm package,

01:11:27.060 --> 01:11:29.219
<v Speaker 2>and we're gonna need to define one of

01:11:29.219 --> 01:11:31.939
<v Speaker 2>these functions. So I personally

01:11:32.099 --> 01:11:35.300
<v Speaker 2>am just gonna start by copying this one

01:11:35.300 --> 01:11:37.540
<v Speaker 2>because it's gonna be somewhat similar.

01:11:40.125 --> 01:11:43.005
<v Speaker 2>So we're gonna have this one instead of

01:11:43.005 --> 01:11:44.205
<v Speaker 2>fetch URL.

01:11:44.765 --> 01:11:45.965
<v Speaker 2>What should we call it?

01:11:46.285 --> 01:11:47.165
<v Speaker 2>Query

01:11:47.485 --> 01:11:48.364
<v Speaker 2>just query,

01:11:48.845 --> 01:11:52.045
<v Speaker 0>I guess. Yeah. GraphQL query? Yeah. GraphQL query.

01:11:52.845 --> 01:11:53.165
<v Speaker 2>Yeah.

01:11:54.060 --> 01:11:57.260
<v Speaker 2>Alright. GraphQL query. So in Go, you usually

01:11:57.260 --> 01:11:59.500
<v Speaker 2>don't use a snake case or kebab case

01:11:59.500 --> 01:12:01.340
<v Speaker 2>or whatever you call that. But in the

01:12:01.340 --> 01:12:02.940
<v Speaker 2>reactor code base, I like to use the

01:12:02.940 --> 01:12:04.780
<v Speaker 2>underscore to define that this is a host

01:12:04.780 --> 01:12:07.100
<v Speaker 2>function so that we don't accidentally get confused

01:12:07.260 --> 01:12:09.115
<v Speaker 2>later down the line because I know I've

01:12:09.115 --> 01:12:10.315
<v Speaker 2>done that a couple of times.

01:12:11.755 --> 01:12:13.675
<v Speaker 2>Alright. So for this particular host call, we're

01:12:13.675 --> 01:12:15.195
<v Speaker 2>not gonna need a method, so we're gonna

01:12:15.195 --> 01:12:17.115
<v Speaker 2>get rid of that one. And but we

01:12:17.115 --> 01:12:19.435
<v Speaker 2>are gonna need a URL. But I'm we

01:12:19.595 --> 01:12:21.115
<v Speaker 2>in our GraphQL client, we called it an

01:12:21.115 --> 01:12:22.875
<v Speaker 2>endpoint, so I'm gonna rename it to endpoint

01:12:22.875 --> 01:12:23.435
<v Speaker 2>pointer

01:12:23.770 --> 01:12:25.849
<v Speaker 2>and endpoint size.

01:12:26.170 --> 01:12:28.170
<v Speaker 2>And then we're gonna wanna be able to

01:12:28.170 --> 01:12:31.130
<v Speaker 2>pass that query. So instead of body pointer,

01:12:31.130 --> 01:12:32.969
<v Speaker 2>I'm gonna call it query pointer

01:12:33.050 --> 01:12:36.010
<v Speaker 2>and query size. So as we talked about

01:12:36.010 --> 01:12:39.765
<v Speaker 2>before, this will be the location of the

01:12:39.765 --> 01:12:42.485
<v Speaker 2>query in the WebAssembly module's memory, and then

01:12:42.485 --> 01:12:45.045
<v Speaker 2>this will be basically the length of that,

01:12:45.445 --> 01:12:48.005
<v Speaker 2>memory so that the host can find it.

01:12:48.005 --> 01:12:48.565
<v Speaker 1>Now

01:12:48.965 --> 01:12:50.645
<v Speaker 1>this identifier is a string.

01:12:51.910 --> 01:12:53.350
<v Speaker 2>Yes. It will be a code in a

01:12:53.350 --> 01:12:54.870
<v Speaker 1>string. Yeah. Go on. Go on. You're gonna

01:12:54.870 --> 01:12:55.590
<v Speaker 1>get to it.

01:12:56.070 --> 01:12:58.950
<v Speaker 2>Yeah. So this identifier is something specific to

01:12:58.950 --> 01:13:01.590
<v Speaker 2>Reaktor, and this is how we how we

01:13:01.590 --> 01:13:03.830
<v Speaker 2>are able to run many, many, many, many

01:13:03.830 --> 01:13:06.485
<v Speaker 2>WebAssembly modules all at once is each each

01:13:06.485 --> 01:13:08.645
<v Speaker 2>time you execute a WebAssembly module, it's given

01:13:08.645 --> 01:13:09.844
<v Speaker 2>an identifier

01:13:09.845 --> 01:13:11.284
<v Speaker 2>just so that we know,

01:13:11.525 --> 01:13:13.925
<v Speaker 2>you know, which module's memory to go look

01:13:13.925 --> 01:13:16.165
<v Speaker 2>at when we're pulling that string out of

01:13:16.165 --> 01:13:17.285
<v Speaker 2>the, out of memory.

01:13:19.540 --> 01:13:20.340
<v Speaker 2>Alright.

01:13:20.580 --> 01:13:21.619
<v Speaker 2>So,

01:13:22.420 --> 01:13:24.739
<v Speaker 2>we're going to I guess we didn't implement

01:13:24.739 --> 01:13:26.739
<v Speaker 1>it, but how would we do,

01:13:26.980 --> 01:13:27.860
<v Speaker 1>variables

01:13:28.100 --> 01:13:29.619
<v Speaker 1>with that call signature?

01:13:30.260 --> 01:13:32.260
<v Speaker 2>Yeah. You're right. So for,

01:13:32.885 --> 01:13:34.725
<v Speaker 2>the this is actually a tricky thing, and

01:13:34.725 --> 01:13:36.965
<v Speaker 2>I actually don't particularly love the way I've

01:13:36.965 --> 01:13:40.245
<v Speaker 2>implemented this. But in in the HTTP

01:13:40.245 --> 01:13:43.285
<v Speaker 2>call, for example, we actually encode

01:13:43.765 --> 01:13:46.485
<v Speaker 2>we encode headers for HTTP calls

01:13:47.020 --> 01:13:49.340
<v Speaker 2>by, you know, sticking them on the end

01:13:49.340 --> 01:13:51.340
<v Speaker 2>of the URL with, like, a custom encoding

01:13:51.340 --> 01:13:52.380
<v Speaker 2>that I really

01:13:52.700 --> 01:13:54.940
<v Speaker 2>don't like the way that it currently works.

01:13:54.940 --> 01:13:57.500
<v Speaker 2>So I'm we're not maybe we won't replicate

01:13:57.500 --> 01:14:00.415
<v Speaker 2>that here because I don't wanna continue propagating,

01:14:00.415 --> 01:14:02.575
<v Speaker 2>you know, bad practices. It's something that I've

01:14:02.575 --> 01:14:04.815
<v Speaker 2>been meaning to improve, and this code is

01:14:05.215 --> 01:14:05.695
<v Speaker 2>and

01:14:06.575 --> 01:14:09.615
<v Speaker 2>yeah. In in the at Shopify, we've handled

01:14:09.615 --> 01:14:11.615
<v Speaker 1>this with message pack. And so

01:14:12.540 --> 01:14:14.700
<v Speaker 1>we we just write message pack in and

01:14:14.700 --> 01:14:16.540
<v Speaker 1>out. And so you all you're doing is

01:14:16.540 --> 01:14:17.980
<v Speaker 1>passing this pointer around

01:14:18.220 --> 01:14:19.900
<v Speaker 1>for the string of the input and the

01:14:19.900 --> 01:14:20.540
<v Speaker 1>output.

01:14:20.700 --> 01:14:23.100
<v Speaker 1>There are limitations there too. And then we

01:14:23.100 --> 01:14:24.380
<v Speaker 1>also we started

01:14:26.255 --> 01:14:27.775
<v Speaker 1>I don't know if I could talk about

01:14:27.775 --> 01:14:29.615
<v Speaker 1>it, but there's a world in which we

01:14:29.615 --> 01:14:31.935
<v Speaker 1>might like JSON. And because JSON could parse

01:14:31.935 --> 01:14:34.495
<v Speaker 1>real fast in certain locations, and so we're

01:14:34.495 --> 01:14:36.415
<v Speaker 1>like, okay. So, you know, maybe it's just

01:14:36.415 --> 01:14:37.375
<v Speaker 1>JSON in and out.

01:14:38.540 --> 01:14:40.220
<v Speaker 1>Yeah. But that I think there will be

01:14:40.220 --> 01:14:42.940
<v Speaker 2>a future version that's based on JSON. The,

01:14:43.260 --> 01:14:44.860
<v Speaker 2>the reason I didn't go with JSON in

01:14:44.860 --> 01:14:46.460
<v Speaker 2>the first place was that Swift

01:14:46.620 --> 01:14:48.540
<v Speaker 2>is one of the languages supported,

01:14:48.700 --> 01:14:49.820
<v Speaker 2>by Reaktor,

01:14:49.820 --> 01:14:52.715
<v Speaker 2>and working with JSON in Swift in WebAssembly

01:14:52.715 --> 01:14:54.875
<v Speaker 2>is actually kinda broken, or at least it

01:14:54.875 --> 01:14:56.554
<v Speaker 2>was when I first implemented this. So I

01:14:56.554 --> 01:14:57.354
<v Speaker 2>went with a,

01:14:57.994 --> 01:14:59.275
<v Speaker 2>less nice but,

01:14:59.675 --> 01:15:02.554
<v Speaker 2>worked version than, you know, the the ideal

01:15:02.554 --> 01:15:02.875
<v Speaker 2>version.

01:15:04.590 --> 01:15:05.790
<v Speaker 2>Cool. So

01:15:06.430 --> 01:15:08.990
<v Speaker 2>we're going to gonna come around about eventually,

01:15:08.990 --> 01:15:12.670
<v Speaker 1>you think? Hopefully. Hopefully. I'm I'm hoping that,

01:15:13.070 --> 01:15:15.470
<v Speaker 2>you know, there will be some kind of

01:15:15.470 --> 01:15:16.270
<v Speaker 2>wazzy

01:15:16.665 --> 01:15:18.985
<v Speaker 2>proposal that comes out soon that I may

01:15:18.985 --> 01:15:21.145
<v Speaker 2>or may not be working on related to

01:15:21.145 --> 01:15:22.264
<v Speaker 2>some of these things,

01:15:22.905 --> 01:15:24.744
<v Speaker 2>but that's all I'll say for now.

01:15:25.224 --> 01:15:25.784
<v Speaker 2>Okay.

01:15:26.585 --> 01:15:28.344
<v Speaker 2>Cool. So we're gonna add this little piece

01:15:28.344 --> 01:15:30.025
<v Speaker 2>of boilerplate here. So this

01:15:30.590 --> 01:15:33.389
<v Speaker 2>this takes the identifier that I just talked

01:15:33.389 --> 01:15:35.550
<v Speaker 2>about, and it actually gives us the WebAssembly

01:15:35.550 --> 01:15:36.349
<v Speaker 2>instance,

01:15:36.829 --> 01:15:39.389
<v Speaker 2>that is associated with that identifier, and it

01:15:39.389 --> 01:15:40.989
<v Speaker 2>allows us to actually go in and read

01:15:40.989 --> 01:15:41.869
<v Speaker 2>that memory. So

01:15:43.715 --> 01:15:46.195
<v Speaker 2>when this host function gets called, we're gonna

01:15:46.195 --> 01:15:48.994
<v Speaker 2>find the WebAssembly module associated with the identifier,

01:15:48.994 --> 01:15:50.594
<v Speaker 2>and then we're gonna read the memory out

01:15:50.594 --> 01:15:52.514
<v Speaker 2>of that instance. So we're gonna do instance

01:15:52.514 --> 01:15:53.714
<v Speaker 2>dot read memory,

01:15:53.875 --> 01:15:56.755
<v Speaker 2>and we're gonna pass in the endpoint pointer

01:15:56.755 --> 01:15:57.954
<v Speaker 2>and the endpoint size,

01:15:58.410 --> 01:16:00.570
<v Speaker 2>and that's gonna result in some bytes. So

01:16:00.570 --> 01:16:02.730
<v Speaker 2>we're gonna say the endpoint

01:16:02.890 --> 01:16:03.770
<v Speaker 2>bytes

01:16:03.850 --> 01:16:06.010
<v Speaker 2>is here, and then the endpoint

01:16:06.410 --> 01:16:08.730
<v Speaker 2>is the those bytes

01:16:09.610 --> 01:16:12.475
<v Speaker 2>converted into a string. So we've taken the

01:16:12.475 --> 01:16:14.955
<v Speaker 2>raw WebAssembly memory, and we're gonna convert it

01:16:14.955 --> 01:16:16.635
<v Speaker 2>into something that we can actually use with

01:16:16.635 --> 01:16:18.155
<v Speaker 2>our GraphQL client.

01:16:18.475 --> 01:16:20.075
<v Speaker 2>This can basically

01:16:21.675 --> 01:16:24.235
<v Speaker 2>so, theoretically, yes, it can fail, but the

01:16:24.235 --> 01:16:27.190
<v Speaker 2>read memory internally has some checks to ensure

01:16:27.190 --> 01:16:29.110
<v Speaker 2>that nothing really bad happens.

01:16:31.190 --> 01:16:31.829
<v Speaker 1>Cool.

01:16:32.150 --> 01:16:33.189
<v Speaker 2>Yeah.

01:16:33.750 --> 01:16:35.989
<v Speaker 2>So we're going to do essentially the same

01:16:35.989 --> 01:16:36.550
<v Speaker 2>thing

01:16:36.790 --> 01:16:37.909
<v Speaker 2>for the query,

01:16:42.514 --> 01:16:44.675
<v Speaker 2>and this is going to be with the

01:16:44.755 --> 01:16:47.635
<v Speaker 2>query pointer and the query size.

01:16:47.955 --> 01:16:50.514
<v Speaker 2>So no. Query size

01:16:50.994 --> 01:16:53.395
<v Speaker 2>and then the query bytes. So now we

01:16:53.395 --> 01:16:55.955
<v Speaker 2>have basically the two things that our GraphQL

01:16:55.955 --> 01:16:57.074
<v Speaker 2>client needs

01:16:57.290 --> 01:17:00.489
<v Speaker 2>in order to actually do this properly. Oh,

01:17:00.489 --> 01:17:01.130
<v Speaker 2>we

01:17:01.930 --> 01:17:04.650
<v Speaker 2>are right. The, let me just import that.

01:17:04.650 --> 01:17:06.010
<v Speaker 2>That's why this is complaining.

01:17:06.489 --> 01:17:08.650
<v Speaker 1>Hey, Gabriel. We're using, live share.

01:17:11.555 --> 01:17:14.114
<v Speaker 2>Yeah. Something that I've never really used a

01:17:14.114 --> 01:17:15.715
<v Speaker 2>lot before, and it's really, really cool. It

01:17:15.715 --> 01:17:18.435
<v Speaker 2>basically turns Versus Code into Google Docs. It's

01:17:18.435 --> 01:17:19.235
<v Speaker 2>really awesome.

01:17:20.515 --> 01:17:20.915
<v Speaker 1>It's working.

01:17:22.099 --> 01:17:23.780
<v Speaker 2>Yeah. So now,

01:17:24.020 --> 01:17:25.860
<v Speaker 2>now that we have the two inputs that

01:17:25.860 --> 01:17:27.460
<v Speaker 2>we need, if we go back to our

01:17:27.460 --> 01:17:29.780
<v Speaker 2>GraphQL client, we'll remember that we need the

01:17:29.780 --> 01:17:32.420
<v Speaker 2>endpoint and the query as the input to

01:17:32.420 --> 01:17:34.815
<v Speaker 2>our code that we wrote earlier. So we're

01:17:34.815 --> 01:17:36.495
<v Speaker 2>gonna take you know, now that we've read

01:17:36.495 --> 01:17:38.655
<v Speaker 2>the endpoint out of the WebAssembly memory and

01:17:38.655 --> 01:17:40.975
<v Speaker 2>we've read the query out of the WebAssembly

01:17:40.975 --> 01:17:43.135
<v Speaker 2>memory, we're gonna actually make that call. So

01:17:43.135 --> 01:17:46.415
<v Speaker 2>we're gonna we're gonna grab the instance. It

01:17:46.415 --> 01:17:48.175
<v Speaker 2>has what's called a a CTX or a

01:17:48.175 --> 01:17:50.210
<v Speaker 2>context, and this contains

01:17:50.449 --> 01:17:53.170
<v Speaker 2>that GraphQL client that we added before. So

01:17:53.170 --> 01:17:55.250
<v Speaker 2>this is how capabilities

01:17:55.250 --> 01:17:58.449
<v Speaker 2>are passed to the WebAssembly modules. That capabilities

01:17:58.449 --> 01:17:59.329
<v Speaker 2>object

01:17:59.410 --> 01:18:03.094
<v Speaker 2>gets given to the WebAssembly instance when it's

01:18:03.094 --> 01:18:05.255
<v Speaker 2>executed so that we can use those capabilities

01:18:05.255 --> 01:18:07.895
<v Speaker 2>in a fun way. So we're gonna call

01:18:07.895 --> 01:18:10.455
<v Speaker 2>that do method on it, and we're gonna

01:18:10.455 --> 01:18:13.175
<v Speaker 2>pass in our endpoint and our query. Yeah.

01:18:14.215 --> 01:18:15.655
<v Speaker 2>This is where the magic starts to happen.

01:18:15.960 --> 01:18:18.360
<v Speaker 2>So we're gonna get our response and our

01:18:18.360 --> 01:18:20.760
<v Speaker 2>error from that, and I don't wanna call

01:18:20.760 --> 01:18:23.400
<v Speaker 2>it error because that would be the type,

01:18:23.400 --> 01:18:25.239
<v Speaker 2>not the actual variable name.

01:18:26.200 --> 01:18:26.840
<v Speaker 2>And

01:18:27.320 --> 01:18:30.120
<v Speaker 2>now another part where WebAssembly is a little

01:18:30.120 --> 01:18:32.155
<v Speaker 2>bit challenging and where I think the reactor

01:18:32.155 --> 01:18:35.114
<v Speaker 2>code base needs some work done is that

01:18:35.114 --> 01:18:38.635
<v Speaker 2>passing those error messages back to the WebAssembly

01:18:38.635 --> 01:18:41.995
<v Speaker 2>module is not yet currently possible. So as

01:18:41.995 --> 01:18:43.994
<v Speaker 2>kind of an interim solution,

01:18:44.155 --> 01:18:47.355
<v Speaker 2>we're gonna use this this logger

01:18:46.830 --> 01:18:48.510
<v Speaker 2>object that is available,

01:18:48.750 --> 01:18:51.709
<v Speaker 2>to just print the error message,

01:18:52.190 --> 01:18:53.630
<v Speaker 2>if if one occurs.

01:18:54.750 --> 01:18:56.429
<v Speaker 1>So we can Instead of

01:18:58.270 --> 01:18:58.670
<v Speaker 2>yep.

01:18:59.575 --> 01:19:01.815
<v Speaker 1>No. So so instead of writing, like, into

01:19:01.815 --> 01:19:03.415
<v Speaker 1>a area of memory

01:19:03.655 --> 01:19:06.455
<v Speaker 1>that that they've reserved for a response,

01:19:07.095 --> 01:19:08.614
<v Speaker 1>something like that? So

01:19:09.015 --> 01:19:11.175
<v Speaker 2>yeah. So, eventually, that is the plan.

01:19:11.895 --> 01:19:13.415
<v Speaker 2>Reactor just doesn't support that yet.

01:19:14.220 --> 01:19:16.620
<v Speaker 2>Okay. But it does support passing back just

01:19:16.620 --> 01:19:17.980
<v Speaker 2>the successful response.

01:19:19.340 --> 01:19:20.060
<v Speaker 2>So

01:19:21.260 --> 01:19:23.340
<v Speaker 2>now we've kind of gotten to the point

01:19:23.340 --> 01:19:25.500
<v Speaker 2>where, oh, we're gonna, return,

01:19:26.935 --> 01:19:30.215
<v Speaker 2>return a negative one if this happens. So,

01:19:31.095 --> 01:19:34.055
<v Speaker 2>because of WebAssembly's limited, you know, ability to

01:19:34.055 --> 01:19:37.175
<v Speaker 2>have really complex types, the thing we're returning

01:19:37.175 --> 01:19:38.455
<v Speaker 2>here is an int 32.

01:19:38.989 --> 01:19:39.469
<v Speaker 2>And,

01:19:40.110 --> 01:19:42.910
<v Speaker 2>when an error happens in reactor, we return

01:19:42.910 --> 01:19:44.750
<v Speaker 2>a negative number to indicate that it's kind

01:19:44.750 --> 01:19:46.989
<v Speaker 2>of similar to bash or or a shell.

01:19:47.230 --> 01:19:49.230
<v Speaker 2>When something bad happens, you return, you know,

01:19:49.230 --> 01:19:49.869
<v Speaker 2>something,

01:19:50.190 --> 01:19:52.429
<v Speaker 2>you know, a nonzero or a negative number

01:19:52.429 --> 01:19:53.790
<v Speaker 2>to indicate that something failed.

01:19:55.055 --> 01:19:57.055
<v Speaker 2>But if a successful

01:19:57.215 --> 01:19:58.415
<v Speaker 2>call happens,

01:19:58.575 --> 01:20:00.335
<v Speaker 2>the return value is actually the size of

01:20:00.335 --> 01:20:01.775
<v Speaker 2>that response. So it's a bit of a

01:20:01.775 --> 01:20:04.415
<v Speaker 2>it's a bit of a tricky little interface

01:20:04.975 --> 01:20:07.775
<v Speaker 2>that hopefully, you know, the WebAssembly spec will

01:20:07.775 --> 01:20:09.775
<v Speaker 2>make a little bit less complicated over time.

01:20:10.510 --> 01:20:12.510
<v Speaker 1>This is like old it's like my c

01:20:12.510 --> 01:20:13.070
<v Speaker 1>code.

01:20:13.950 --> 01:20:15.469
<v Speaker 2>Yeah. Exactly.

01:20:15.710 --> 01:20:16.510
<v Speaker 2>So,

01:20:16.510 --> 01:20:18.590
<v Speaker 2>you know, web and that's one of the

01:20:18.750 --> 01:20:20.670
<v Speaker 2>one this is basically the reason why I

01:20:20.670 --> 01:20:22.670
<v Speaker 2>built reactor was so that it could hide

01:20:22.670 --> 01:20:24.765
<v Speaker 2>all of this complexity from you, you could

01:20:24.765 --> 01:20:26.285
<v Speaker 2>kind of just use it as a normal

01:20:26.285 --> 01:20:28.045
<v Speaker 2>library and not have to worry too much

01:20:28.045 --> 01:20:28.685
<v Speaker 2>about it.

01:20:29.965 --> 01:20:32.845
<v Speaker 2>Alright. So we're going to continue

01:20:33.165 --> 01:20:36.605
<v Speaker 2>copying some of the code from the HTTP

01:20:36.605 --> 01:20:38.285
<v Speaker 2>version of this just to speed things along

01:20:38.285 --> 01:20:40.830
<v Speaker 2>a little bit, and we're gonna do essentially

01:20:40.910 --> 01:20:42.990
<v Speaker 2>this. So what we're gonna do is we're

01:20:42.990 --> 01:20:43.870
<v Speaker 2>going to the

01:20:44.990 --> 01:20:48.190
<v Speaker 2>response is currently a struct, but we're going

01:20:48.270 --> 01:20:49.950
<v Speaker 2>we need to serialize that

01:20:50.350 --> 01:20:52.670
<v Speaker 2>into something that can be written into WebAssembly

01:20:52.535 --> 01:20:54.935
<v Speaker 2>memory. So we're gonna actually convert that to

01:20:54.935 --> 01:20:55.815
<v Speaker 2>JSON

01:20:56.455 --> 01:20:57.335
<v Speaker 2>and

01:20:58.375 --> 01:21:01.255
<v Speaker 2>write that into the the WebAssembly module. So

01:21:01.255 --> 01:21:02.375
<v Speaker 2>we're gonna use that

01:21:03.975 --> 01:21:06.469
<v Speaker 2>the response, We'll call it response bytes to

01:21:06.469 --> 01:21:07.429
<v Speaker 2>be consistent,

01:21:07.989 --> 01:21:11.030
<v Speaker 2>is JSON dot Marshall. Again, we've seen this

01:21:11.030 --> 01:21:11.590
<v Speaker 2>before.

01:21:12.150 --> 01:21:14.869
<v Speaker 2>And then if the error is not null,

01:21:14.870 --> 01:21:17.190
<v Speaker 2>we're going to, do the same thing as

01:21:17.190 --> 01:21:17.910
<v Speaker 2>we did up here.

01:21:19.005 --> 01:21:20.445
<v Speaker 1>Out of curiosity,

01:21:20.445 --> 01:21:23.164
<v Speaker 1>since would it always make sense to

01:21:23.405 --> 01:21:25.565
<v Speaker 1>to to write these bytes because

01:21:26.284 --> 01:21:28.284
<v Speaker 1>the response is useful on air?

01:21:29.324 --> 01:21:31.085
<v Speaker 1>Or is that is that supported return?

01:21:32.370 --> 01:21:35.010
<v Speaker 2>So, yeah, that that would Reactor would need

01:21:35.010 --> 01:21:36.690
<v Speaker 2>to learn how to do that because, the

01:21:36.690 --> 01:21:39.090
<v Speaker 2>negative their negative response code means that we

01:21:39.090 --> 01:21:42.530
<v Speaker 2>can't tell it how big that, response is.

01:21:42.850 --> 01:21:45.969
<v Speaker 1>Ah, I gotcha. Yes. So, we're what we're

01:21:45.969 --> 01:21:47.815
<v Speaker 2>doing is we're converting it to bytes. We're

01:21:47.815 --> 01:21:50.295
<v Speaker 2>we're using the set FFI result function to

01:21:50.295 --> 01:21:52.375
<v Speaker 2>write those bytes into the module, and then

01:21:52.375 --> 01:21:54.855
<v Speaker 2>we're returning the size of those bytes so

01:21:54.855 --> 01:21:56.615
<v Speaker 2>that the module can then go and find

01:21:56.615 --> 01:21:58.455
<v Speaker 2>it in memory and reconstitute it.

01:22:00.580 --> 01:22:01.219
<v Speaker 2>Cool.

01:22:02.100 --> 01:22:04.739
<v Speaker 2>Cool. So we have our,

01:22:05.940 --> 01:22:08.260
<v Speaker 2>this is our host call, basically. We we've

01:22:08.260 --> 01:22:10.019
<v Speaker 2>now defined an interface,

01:22:10.580 --> 01:22:14.020
<v Speaker 2>that the WebAssembly module can use to ask

01:22:14.020 --> 01:22:15.940
<v Speaker 2>the host to make a GraphQL

01:22:16.185 --> 01:22:18.745
<v Speaker 2>query on its behalf. So, we do need

01:22:18.745 --> 01:22:21.225
<v Speaker 2>to do one little extra step, which I'm

01:22:21.225 --> 01:22:23.145
<v Speaker 2>just gonna, again, copy and paste.

01:22:23.785 --> 01:22:26.105
<v Speaker 2>We need to create a wrapper around this

01:22:26.105 --> 01:22:28.425
<v Speaker 2>host function to pass to the Go object

01:22:28.425 --> 01:22:29.385
<v Speaker 2>of the

01:22:29.785 --> 01:22:30.665
<v Speaker 2>of the

01:22:31.280 --> 01:22:32.960
<v Speaker 2>WebAssembly instance. So,

01:22:33.440 --> 01:22:35.280
<v Speaker 2>this is just boilerplate code.

01:22:36.080 --> 01:22:36.960
<v Speaker 2>GraphQL

01:22:36.960 --> 01:22:38.719
<v Speaker 2>query, we'll call it, and we have to

01:22:38.719 --> 01:22:39.920
<v Speaker 2>tell WebAssembly

01:22:39.920 --> 01:22:42.800
<v Speaker 2>the the shape of this function. So,

01:22:43.200 --> 01:22:44.719
<v Speaker 2>we have to tell it that, you know,

01:22:44.719 --> 01:22:47.475
<v Speaker 2>the what exactly the different arguments are,

01:22:47.875 --> 01:22:49.635
<v Speaker 1>so that we can URL.

01:22:50.995 --> 01:22:52.435
<v Speaker 2>Yes. You are correct.

01:22:52.755 --> 01:22:54.755
<v Speaker 2>So this is endpoints

01:22:54.755 --> 01:22:55.635
<v Speaker 2>pointer.

01:22:55.635 --> 01:22:57.875
<v Speaker 1>Gabriel, this is gonna run-in Suborbital,

01:22:57.875 --> 01:23:00.989
<v Speaker 1>which is a server side framework for executing

01:23:00.989 --> 01:23:02.750
<v Speaker 1>Wasm. So it's not gonna run-in a browser.

01:23:02.750 --> 01:23:04.510
<v Speaker 1>It's gonna run it's running as

01:23:04.750 --> 01:23:06.909
<v Speaker 1>sort of the stateless runnables

01:23:08.030 --> 01:23:11.150
<v Speaker 1>in the Suborbital project. Is it suborbital.dev?

01:23:11.355 --> 01:23:13.755
<v Speaker 1>Is that the It is. Yeah. Suborbital.dev

01:23:13.755 --> 01:23:15.275
<v Speaker 2>is the website. Yeah. So this is the

01:23:15.275 --> 01:23:16.954
<v Speaker 2>reactor project, which is

01:23:17.515 --> 01:23:19.995
<v Speaker 2>the inside of Suborbital, that is the core

01:23:19.995 --> 01:23:21.114
<v Speaker 2>WebAssembly

01:23:21.755 --> 01:23:22.555
<v Speaker 2>execution

01:23:22.555 --> 01:23:24.715
<v Speaker 2>engine that that Suborbital is built on.

01:23:26.800 --> 01:23:29.600
<v Speaker 2>Okay. So we are just creating a tiny

01:23:29.600 --> 01:23:31.760
<v Speaker 2>little wrapper here that should

01:23:32.960 --> 01:23:35.280
<v Speaker 2>just be two more seconds,

01:23:36.000 --> 01:23:38.560
<v Speaker 2>and then we will do the query pointer

01:23:38.560 --> 01:23:40.240
<v Speaker 2>and the query size.

01:23:40.485 --> 01:23:42.725
<v Speaker 2>So this this wrapper, all it's really doing

01:23:42.965 --> 01:23:44.725
<v Speaker 2>yeah. Go ahead. Can I teach you a

01:23:44.725 --> 01:23:45.204
<v Speaker 1>trick?

01:23:46.005 --> 01:23:47.525
<v Speaker 2>Yeah. By all means. Yeah. You can hit

01:23:47.764 --> 01:23:49.364
<v Speaker 1>if you click on a variable and you

01:23:49.364 --> 01:23:51.764
<v Speaker 1>hit f two, you get a little rename,

01:23:52.005 --> 01:23:54.645
<v Speaker 1>and you can it'll go and rename everywhere.

01:23:55.680 --> 01:23:57.199
<v Speaker 2>There you go. That is the fancy stuff

01:23:57.199 --> 01:23:58.560
<v Speaker 2>that I come on these streams to learn

01:23:58.560 --> 01:23:59.119
<v Speaker 2>about.

01:24:01.840 --> 01:24:04.239
<v Speaker 2>Cool. Yeah. So this this, this wrapper is

01:24:04.239 --> 01:24:05.120
<v Speaker 2>essentially just,

01:24:05.840 --> 01:24:09.435
<v Speaker 2>taking this host code that we've defined and

01:24:09.435 --> 01:24:11.915
<v Speaker 2>telling the WebAssembly instance

01:24:11.915 --> 01:24:14.074
<v Speaker 2>about it and giving it information.

01:24:14.075 --> 01:24:14.635
<v Speaker 2>So,

01:24:15.275 --> 01:24:17.035
<v Speaker 2>now that we have these,

01:24:17.515 --> 01:24:19.275
<v Speaker 2>and we've passed I just wanna double check

01:24:19.275 --> 01:24:21.275
<v Speaker 2>to make sure we've passed the right

01:24:21.515 --> 01:24:23.355
<v Speaker 2>things. Is that the real capabilities?

01:24:25.030 --> 01:24:28.150
<v Speaker 1>Right? Because, like like, the other capabilities, that's

01:24:28.150 --> 01:24:29.910
<v Speaker 1>in Go. But it but, like, it's not

01:24:30.070 --> 01:24:31.510
<v Speaker 1>but this one here is the one that

01:24:31.510 --> 01:24:33.510
<v Speaker 1>actually gives it to the to the the

01:24:33.510 --> 01:24:35.989
<v Speaker 1>host module, right, or the guest module. Yes.

01:24:35.989 --> 01:24:37.830
<v Speaker 1>So yeah. So this is given to the

01:24:37.830 --> 01:24:38.390
<v Speaker 2>guest module.

01:24:39.045 --> 01:24:42.325
<v Speaker 2>This calls our GraphQL query function,

01:24:42.405 --> 01:24:44.565
<v Speaker 2>and then the GraphQL query function

01:24:44.725 --> 01:24:48.165
<v Speaker 2>grabs our capability to actually perform the the

01:24:48.165 --> 01:24:49.845
<v Speaker 2>action. So there's a there's a bit of

01:24:49.845 --> 01:24:51.605
<v Speaker 2>a rigmarole that you have to go through,

01:24:51.605 --> 01:24:53.285
<v Speaker 2>but that, you know, is what's needed to

01:24:53.285 --> 01:24:54.725
<v Speaker 2>make it as flexible as it is.

01:24:55.739 --> 01:24:57.020
<v Speaker 2>Cool.

01:24:57.020 --> 01:24:58.780
<v Speaker 2>So the last thing we're gonna do is

01:24:58.780 --> 01:25:01.739
<v Speaker 2>we're just going to find the random point

01:25:01.739 --> 01:25:03.420
<v Speaker 2>in the code where this is all added

01:25:03.420 --> 01:25:05.579
<v Speaker 2>to the module. So we're gonna take that

01:25:06.059 --> 01:25:07.980
<v Speaker 2>that GraphQL query

01:25:09.125 --> 01:25:10.805
<v Speaker 2>wrapper function that we just wrote, and we're

01:25:10.805 --> 01:25:13.045
<v Speaker 2>gonna include it in the host functions that

01:25:13.045 --> 01:25:15.445
<v Speaker 2>are given to the module. And we should

01:25:15.445 --> 01:25:17.844
<v Speaker 2>be pretty much ready to to switch over

01:25:17.844 --> 01:25:19.605
<v Speaker 2>to to WebAssembly. So

01:25:20.645 --> 01:25:23.490
<v Speaker 2>do we have any any, maybe, comments or

01:25:23.490 --> 01:25:25.650
<v Speaker 2>questions we wanna address before we move on?

01:25:26.050 --> 01:25:27.010
<v Speaker 0>So

01:25:27.330 --> 01:25:29.170
<v Speaker 0>Gabriel did ask if this is gonna run

01:25:29.170 --> 01:25:30.690
<v Speaker 0>on a browser, but there was a kind

01:25:30.690 --> 01:25:32.050
<v Speaker 0>of a second part of that, which is

01:25:32.050 --> 01:25:34.130
<v Speaker 0>why would we use Wasm on the host?

01:25:34.545 --> 01:25:36.305
<v Speaker 0>If you got a Yeah. That's that's

01:25:37.025 --> 01:25:38.385
<v Speaker 2>a great question. So,

01:25:39.185 --> 01:25:41.985
<v Speaker 2>one of the great things about WebAssembly and

01:25:41.985 --> 01:25:43.905
<v Speaker 2>and the one of the reasons why I

01:25:43.905 --> 01:25:46.625
<v Speaker 2>chose WebAssembly as the technology to power Suborbital

01:25:46.625 --> 01:25:47.905
<v Speaker 2>is that you can have

01:25:48.510 --> 01:25:49.389
<v Speaker 2>multiple

01:25:49.470 --> 01:25:52.830
<v Speaker 2>different languages coexisting inside of the same application.

01:25:52.830 --> 01:25:55.869
<v Speaker 2>So the, you know, people who use

01:25:56.270 --> 01:25:58.510
<v Speaker 2>Suborbital, they often have different teams within their

01:25:58.510 --> 01:26:00.815
<v Speaker 2>company that are comfortable with different languages. So

01:26:00.815 --> 01:26:02.975
<v Speaker 2>maybe they'll have, you know, a mobile team

01:26:02.975 --> 01:26:05.135
<v Speaker 2>that is used to writing Swift, or they'll

01:26:05.135 --> 01:26:07.215
<v Speaker 2>have, you know, a a web team that's

01:26:07.215 --> 01:26:08.415
<v Speaker 2>used to writing TypeScript.

01:26:08.495 --> 01:26:10.255
<v Speaker 2>And so they can actually write code in

01:26:10.255 --> 01:26:12.495
<v Speaker 2>those different languages, and they can all coexist

01:26:12.700 --> 01:26:15.580
<v Speaker 2>inside the same server architecture without you needing

01:26:15.580 --> 01:26:17.900
<v Speaker 2>to do anything crazy to to make them

01:26:17.900 --> 01:26:19.179
<v Speaker 2>communicate with each other.

01:26:20.540 --> 01:26:23.340
<v Speaker 0>Okay. We also have a question from YMO,

01:26:23.340 --> 01:26:25.100
<v Speaker 0>but I also point out that Noel has

01:26:25.100 --> 01:26:27.285
<v Speaker 0>pointed a bug in our code where we

01:26:27.285 --> 01:26:29.204
<v Speaker 0>are returning fetch URL

01:26:30.485 --> 01:26:32.804
<v Speaker 0>instead of GraphQL query.

01:26:35.125 --> 01:26:36.244
<v Speaker 0>Where is that?

01:26:38.005 --> 01:26:39.525
<v Speaker 2>Oh, I see. There we go.

01:26:40.890 --> 01:26:42.890
<v Speaker 0>Okay. So why am I always asking about

01:26:42.890 --> 01:26:44.010
<v Speaker 0>garbage collection?

01:26:44.409 --> 01:26:45.130
<v Speaker 0>Specifically,

01:26:45.690 --> 01:26:47.929
<v Speaker 0>go and wasm looking at lane 17 to

01:26:47.929 --> 01:26:50.489
<v Speaker 0>20, which I think are now 34 onwards.

01:26:51.449 --> 01:26:54.925
<v Speaker 0>I'm curious about garbage collecting. Yes. Yeah. That's

01:26:54.925 --> 01:26:56.204
<v Speaker 2>right. So

01:26:56.605 --> 01:26:59.565
<v Speaker 2>when we flip over to the Suborbital Rust

01:26:59.565 --> 01:27:02.125
<v Speaker 2>library, you'll see some of this. But so

01:27:02.125 --> 01:27:04.765
<v Speaker 2>WebAssembly itself does not yet have a built

01:27:04.765 --> 01:27:07.725
<v Speaker 2>in garbage collecting paradigm. That's, again, one of

01:27:07.725 --> 01:27:09.565
<v Speaker 2>this one of the proposals that is currently

01:27:09.565 --> 01:27:09.965
<v Speaker 2>being

01:27:10.510 --> 01:27:13.150
<v Speaker 2>put through the standards body is a garbage

01:27:13.150 --> 01:27:14.269
<v Speaker 2>collecting proposal.

01:27:14.989 --> 01:27:15.550
<v Speaker 2>But

01:27:15.790 --> 01:27:16.510
<v Speaker 2>the

01:27:17.150 --> 01:27:17.789
<v Speaker 2>you know,

01:27:18.190 --> 01:27:20.349
<v Speaker 2>currently, the the suborbital

01:27:21.150 --> 01:27:23.869
<v Speaker 2>hosts and guest code collaborate together to kind

01:27:23.869 --> 01:27:25.309
<v Speaker 2>of do garbage collection.

01:27:25.790 --> 01:27:27.495
<v Speaker 2>I don't wanna use the word manually, but

01:27:27.495 --> 01:27:29.735
<v Speaker 2>it is kind of manual where, know, the

01:27:29.735 --> 01:27:31.494
<v Speaker 2>reactor is telling,

01:27:31.815 --> 01:27:34.375
<v Speaker 2>the guest module to clean up memory at

01:27:34.375 --> 01:27:36.855
<v Speaker 2>the appropriate time, and then, like, the guests

01:27:37.015 --> 01:27:38.054
<v Speaker 2>the guest code

01:27:38.535 --> 01:27:39.975
<v Speaker 2>complies and actually does it.

01:27:41.320 --> 01:27:43.640
<v Speaker 0>Okay. I just wanna check with you both.

01:27:43.640 --> 01:27:45.960
<v Speaker 0>Like, we're at the hour now where we

01:27:45.960 --> 01:27:47.720
<v Speaker 0>said we would finish. Do you wanna go

01:27:47.720 --> 01:27:49.160
<v Speaker 0>on for another ten to fifteen minutes and

01:27:49.160 --> 01:27:50.760
<v Speaker 0>get this working, and is that okay for

01:27:50.760 --> 01:27:53.720
<v Speaker 0>both of you? Yeah. I'm cool. Let's go

01:27:53.720 --> 01:27:56.745
<v Speaker 0>for it. Yeah. I'm excited. Alright. Awesome. We'll

01:27:56.745 --> 01:27:58.665
<v Speaker 2>try to power through the end here. So

01:27:59.225 --> 01:28:00.825
<v Speaker 2>yeah. So we're gonna switch over to Rust

01:28:00.825 --> 01:28:02.825
<v Speaker 2>now, and we're going to I'll pretend like

01:28:02.825 --> 01:28:05.065
<v Speaker 1>I understand everything from here on out.

01:28:05.945 --> 01:28:07.705
<v Speaker 2>Hey. I think of the three of us,

01:28:07.705 --> 01:28:08.985
<v Speaker 2>David is the Rust guru.

01:28:09.390 --> 01:28:11.229
<v Speaker 2>So Oh, no. I'm totally Alright.

01:28:14.350 --> 01:28:14.909
<v Speaker 2>So,

01:28:15.469 --> 01:28:17.310
<v Speaker 2>you know, once again, we're gonna we're gonna

01:28:17.310 --> 01:28:18.909
<v Speaker 2>do some copying and pasting just to make

01:28:18.909 --> 01:28:20.829
<v Speaker 2>this go quickly. So we're gonna define

01:28:21.070 --> 01:28:22.510
<v Speaker 2>a a GraphQL.

01:28:23.185 --> 01:28:26.065
<v Speaker 2>Again, cannot type that word. We're gonna define

01:28:26.065 --> 01:28:27.425
<v Speaker 2>the GraphQL

01:28:29.025 --> 01:28:30.385
<v Speaker 2>the GraphQL

01:28:30.385 --> 01:28:33.425
<v Speaker 2>module within the Suborbital library, and we're going

01:28:33.425 --> 01:28:34.545
<v Speaker 2>to define

01:28:34.864 --> 01:28:35.585
<v Speaker 2>that

01:28:36.065 --> 01:28:37.265
<v Speaker 2>that host function

01:28:37.810 --> 01:28:40.770
<v Speaker 2>as something available to it. So we're basically

01:28:40.770 --> 01:28:42.530
<v Speaker 2>doing the mirrored,

01:28:43.010 --> 01:28:45.570
<v Speaker 2>the mirror to the last,

01:28:47.810 --> 01:28:50.625
<v Speaker 2>the host call where we're gonna just expose

01:28:50.625 --> 01:28:53.185
<v Speaker 2>it here inside of

01:28:54.305 --> 01:28:55.105
<v Speaker 2>the

01:28:55.185 --> 01:28:57.585
<v Speaker 2>inside of the module. So I think that

01:28:57.585 --> 01:28:59.825
<v Speaker 2>should be good. We've got our endpoint pointer,

01:28:59.825 --> 01:29:03.025
<v Speaker 2>endpoint size, query pointer, query size ident. Perfect.

01:29:03.105 --> 01:29:04.785
<v Speaker 2>Alright. So now we need to

01:29:05.420 --> 01:29:06.699
<v Speaker 2>create a

01:29:08.139 --> 01:29:10.780
<v Speaker 2>a an actual, you know, usable function that

01:29:10.780 --> 01:29:13.500
<v Speaker 2>somebody can go ahead and call. So we're

01:29:13.500 --> 01:29:16.139
<v Speaker 2>gonna define a pub f n

01:29:16.619 --> 01:29:18.380
<v Speaker 2>f n, and we're gonna just call it

01:29:18.380 --> 01:29:21.045
<v Speaker 2>query to keep things simple. And we're going

01:29:21.045 --> 01:29:23.205
<v Speaker 2>to take in an endpoint,

01:29:23.445 --> 01:29:25.445
<v Speaker 2>which is an STR,

01:29:26.005 --> 01:29:28.085
<v Speaker 2>str string. I don't know how people pronounce

01:29:28.085 --> 01:29:29.204
<v Speaker 2>that in real life.

01:29:29.605 --> 01:29:31.764
<v Speaker 2>And we're gonna take in a query,

01:29:31.925 --> 01:29:33.685
<v Speaker 2>which is also an STR,

01:29:34.040 --> 01:29:36.039
<v Speaker 2>and we are going to return

01:29:37.000 --> 01:29:38.840
<v Speaker 2>probably a result,

01:29:38.840 --> 01:29:39.880
<v Speaker 2>I would assume,

01:29:40.280 --> 01:29:41.079
<v Speaker 2>of

01:29:41.560 --> 01:29:42.520
<v Speaker 2>bytes

01:29:43.560 --> 01:29:45.639
<v Speaker 2>of VecU eight

01:29:46.200 --> 01:29:47.079
<v Speaker 2>comma

01:29:47.480 --> 01:29:49.640
<v Speaker 2>run error, which is a

01:29:50.304 --> 01:29:53.024
<v Speaker 2>a suborbital defined type. So

01:29:53.505 --> 01:29:55.824
<v Speaker 1>Why wouldn't they wanna JSON parse here?

01:29:57.264 --> 01:29:58.465
<v Speaker 2>So we

01:29:58.465 --> 01:30:00.625
<v Speaker 2>will to keep things simple, I think the

01:30:00.625 --> 01:30:02.704
<v Speaker 2>caller is going to JSON parse

01:30:03.050 --> 01:30:04.409
<v Speaker 2>because my

01:30:04.570 --> 01:30:07.449
<v Speaker 2>Rust skills of being able to pass in

01:30:07.690 --> 01:30:09.850
<v Speaker 2>a struct, parse it, and then all that

01:30:09.850 --> 01:30:11.210
<v Speaker 2>stuff, I don't think I'm able to do

01:30:11.210 --> 01:30:12.650
<v Speaker 2>that in the next fifteen minutes, so we're

01:30:12.650 --> 01:30:13.930
<v Speaker 2>just gonna keep it simple.

01:30:15.785 --> 01:30:17.785
<v Speaker 2>Alright. So oh, we need to

01:30:18.505 --> 01:30:20.105
<v Speaker 2>I don't know why it's complain oh, right.

01:30:20.105 --> 01:30:22.265
<v Speaker 2>We need to actually use the full path

01:30:22.265 --> 01:30:24.185
<v Speaker 2>for this. There we go. I think that

01:30:24.185 --> 01:30:25.225
<v Speaker 2>should be good.

01:30:25.705 --> 01:30:27.625
<v Speaker 2>Yes. Alright. So it's just complaining that we're

01:30:27.625 --> 01:30:29.145
<v Speaker 2>not returning at this point. So

01:30:30.180 --> 01:30:32.179
<v Speaker 2>we should be able to

01:30:32.739 --> 01:30:35.380
<v Speaker 2>do something fairly similar to

01:30:35.620 --> 01:30:36.260
<v Speaker 2>this

01:30:37.940 --> 01:30:39.139
<v Speaker 2>where we

01:30:39.700 --> 01:30:41.219
<v Speaker 2>so we wanna take the

01:30:42.635 --> 01:30:43.435
<v Speaker 2>the

01:30:43.595 --> 01:30:46.235
<v Speaker 2>endpoint and the query, and we wanna convert

01:30:46.235 --> 01:30:49.115
<v Speaker 2>that into memory that can be transmitted to

01:30:49.115 --> 01:30:49.915
<v Speaker 2>the host.

01:30:50.315 --> 01:30:51.915
<v Speaker 2>So we're gonna try to do this in

01:30:51.915 --> 01:30:54.235
<v Speaker 2>a fairly quick fashion. So there's a couple

01:30:54.235 --> 01:30:55.515
<v Speaker 2>of helper functions

01:30:55.840 --> 01:30:58.720
<v Speaker 2>inside of this library that will make it

01:30:58.720 --> 01:31:01.360
<v Speaker 2>a little bit easier for us, and I

01:31:01.360 --> 01:31:02.800
<v Speaker 2>just need to find them.

01:31:03.120 --> 01:31:04.960
<v Speaker 2>Right. So we're gonna be doing

01:31:05.600 --> 01:31:08.480
<v Speaker 2>as slice and as pointer, I believe.

01:31:08.880 --> 01:31:10.080
<v Speaker 2>Yeah. Let's just do that.

01:31:12.235 --> 01:31:12.955
<v Speaker 2>So

01:31:13.115 --> 01:31:15.835
<v Speaker 2>we're going to say that our

01:31:19.195 --> 01:31:20.795
<v Speaker 2>our endpoint

01:31:22.235 --> 01:31:23.115
<v Speaker 2>slice

01:31:24.075 --> 01:31:25.515
<v Speaker 2>is the

01:31:25.515 --> 01:31:26.395
<v Speaker 2>endpoint

01:31:26.395 --> 01:31:27.275
<v Speaker 2>as a slice.

01:31:28.810 --> 01:31:30.890
<v Speaker 2>Of course, that's going to complain.

01:31:31.610 --> 01:31:33.210
<v Speaker 2>This is where David might need to help

01:31:33.210 --> 01:31:33.930
<v Speaker 2>me here.

01:31:35.610 --> 01:31:37.530
<v Speaker 2>Oh,

01:31:37.850 --> 01:31:40.010
<v Speaker 2>right. We need to It's already a slice,

01:31:40.010 --> 01:31:40.330
<v Speaker 1>isn't it?

01:31:42.005 --> 01:31:42.965
<v Speaker 2>You'd think.

01:31:44.244 --> 01:31:45.604
<v Speaker 2>The body

01:31:46.804 --> 01:31:47.445
<v Speaker 2>is

01:31:48.085 --> 01:31:49.925
<v Speaker 0>oh, here's vector.

01:31:50.005 --> 01:31:51.764
<v Speaker 0>It's a vector of bytes. Yeah.

01:31:52.324 --> 01:31:54.084
<v Speaker 0>So you can So we need to

01:31:54.370 --> 01:31:55.969
<v Speaker 0>Sorry. Go. We just need to do

01:31:56.930 --> 01:31:58.930
<v Speaker 2>how do you convert a str to a

01:31:58.930 --> 01:32:00.610
<v Speaker 2>vec a asvec, I think?

01:32:01.250 --> 01:32:01.810
<v Speaker 2>Is that

01:32:02.690 --> 01:32:03.889
<v Speaker 2>no. We don't

01:32:04.530 --> 01:32:05.570
<v Speaker 0>we don't need that. Right?

01:32:08.605 --> 01:32:11.085
<v Speaker 2>Oh. Oh. You you go ahead and take

01:32:11.085 --> 01:32:11.724
<v Speaker 2>over.

01:32:13.645 --> 01:32:15.565
<v Speaker 0>Why? Oh, there we go. And so we

01:32:15.565 --> 01:32:18.045
<v Speaker 0>can get as base, which is gonna be

01:32:19.290 --> 01:32:20.810
<v Speaker 0>yeah. You don't want yeah. You don't actually

01:32:20.810 --> 01:32:22.650
<v Speaker 0>want a vector. Right? You want the so

01:32:22.650 --> 01:32:24.330
<v Speaker 0>just as base We do want a vector.

01:32:24.330 --> 01:32:25.610
<v Speaker 2>We do want a vector.

01:32:26.330 --> 01:32:28.170
<v Speaker 0>You do you do want a vector?

01:32:28.570 --> 01:32:30.890
<v Speaker 2>Yeah. Because the vectors will write into WebAssembly

01:32:30.890 --> 01:32:31.370
<v Speaker 2>module.

01:32:35.585 --> 01:32:37.344
<v Speaker 2>Yeah. Slice would work.

01:32:40.625 --> 01:32:42.225
<v Speaker 0>Okay. And what are we doing with the

01:32:42.225 --> 01:32:42.864
<v Speaker 0>pointer?

01:32:43.745 --> 01:32:45.585
<v Speaker 2>So that pointer

01:32:45.745 --> 01:32:46.865
<v Speaker 2>right. Exactly.

01:32:47.440 --> 01:32:49.119
<v Speaker 2>And then we wanna take

01:32:49.679 --> 01:32:50.639
<v Speaker 2>query.

01:32:53.599 --> 01:32:56.800
<v Speaker 2>That would be the endpoint pointer.

01:32:58.159 --> 01:32:59.280
<v Speaker 0>Oh, yeah. Oops.

01:33:00.335 --> 01:33:01.855
<v Speaker 2>We're gonna do this twice. Once for the

01:33:01.855 --> 01:33:03.295
<v Speaker 2>endpoint, once for the query.

01:33:04.015 --> 01:33:05.455
<v Speaker 2>There we go. Alright.

01:33:06.335 --> 01:33:08.015
<v Speaker 2>Okay. This is why David this is why

01:33:08.015 --> 01:33:09.375
<v Speaker 2>I wanted to do this on the stream.

01:33:18.040 --> 01:33:19.880
<v Speaker 0>No. I can't type. There we go.

01:33:20.520 --> 01:33:22.440
<v Speaker 2>There we go. Alright. You got it. So

01:33:22.440 --> 01:33:25.000
<v Speaker 2>what's the we are yeah. No. So now

01:33:25.000 --> 01:33:27.560
<v Speaker 2>we're gonna actually make that host call. So

01:33:27.560 --> 01:33:30.935
<v Speaker 2>now we're going to say that the results

01:33:31.335 --> 01:33:32.614
<v Speaker 2>we're gonna let

01:33:33.255 --> 01:33:34.054
<v Speaker 2>results

01:33:34.135 --> 01:33:34.935
<v Speaker 2>size

01:33:35.015 --> 01:33:35.895
<v Speaker 2>equal

01:33:35.895 --> 01:33:36.614
<v Speaker 2>the

01:33:37.335 --> 01:33:38.775
<v Speaker 2>so we're we have to do we have

01:33:38.775 --> 01:33:41.015
<v Speaker 2>to use the unsafe directive here because we're

01:33:41.015 --> 01:33:42.135
<v Speaker 2>actually calling

01:33:42.700 --> 01:33:44.620
<v Speaker 2>something that is being given to us at

01:33:44.620 --> 01:33:46.940
<v Speaker 2>runtime, which is, you know, in Rust terms,

01:33:46.940 --> 01:33:48.219
<v Speaker 2>something unsafe.

01:33:48.540 --> 01:33:50.940
<v Speaker 2>So we're gonna say we're gonna call that

01:33:50.940 --> 01:33:51.820
<v Speaker 2>GraphQL

01:33:51.820 --> 01:33:53.100
<v Speaker 2>query function.

01:33:53.340 --> 01:33:55.740
<v Speaker 2>We are going to pass the endpoint pointer,

01:33:56.245 --> 01:33:57.605
<v Speaker 2>and then we're going to do

01:33:59.844 --> 01:34:01.445
<v Speaker 2>this would be endpoint

01:34:02.005 --> 01:34:06.725
<v Speaker 2>slice dot len, I think. Slice dot len.

01:34:06.725 --> 01:34:08.085
<v Speaker 2>Is that yeah. That's valid.

01:34:09.450 --> 01:34:11.530
<v Speaker 2>And then query

01:34:11.530 --> 01:34:12.410
<v Speaker 2>pointer

01:34:12.410 --> 01:34:14.010
<v Speaker 2>and then query

01:34:14.250 --> 01:34:15.770
<v Speaker 2>slice dot len.

01:34:16.410 --> 01:34:18.330
<v Speaker 2>For some reason, I keep typing zed instead

01:34:18.330 --> 01:34:19.130
<v Speaker 2>of c.

01:34:19.610 --> 01:34:21.530
<v Speaker 2>And then we're gonna pass in that ident

01:34:21.530 --> 01:34:22.250
<v Speaker 2>as

01:34:22.410 --> 01:34:23.930
<v Speaker 2>the last parameter,

01:34:24.545 --> 01:34:26.144
<v Speaker 2>and that should

01:34:27.025 --> 01:34:29.744
<v Speaker 2>cannot find GraphQL query in this scope. Why

01:34:29.744 --> 01:34:30.304
<v Speaker 2>not?

01:34:34.945 --> 01:34:36.945
<v Speaker 2>Did I misspell it? It looks like it

01:34:36.945 --> 01:34:39.585
<v Speaker 0>it does say there's a different

01:34:41.420 --> 01:34:43.420
<v Speaker 0>it's hard to do when I'm Sorry, honey.

01:34:44.219 --> 01:34:47.100
<v Speaker 2>I'm I'm scrolling around. It's my fault.

01:34:53.415 --> 01:34:55.495
<v Speaker 0>Okay. You just kinda spell. Oh,

01:34:56.215 --> 01:34:58.215
<v Speaker 2>well, that that would explain a lot. Alright.

01:34:58.215 --> 01:34:58.775
<v Speaker 2>Cool.

01:34:59.655 --> 01:35:01.495
<v Speaker 2>So alright. We need to convert these to

01:35:01.495 --> 01:35:03.014
<v Speaker 2>as I 32

01:35:03.495 --> 01:35:04.295
<v Speaker 2>and

01:35:04.455 --> 01:35:06.215
<v Speaker 2>as I 32,

01:35:06.615 --> 01:35:08.135
<v Speaker 2>and this

01:35:08.560 --> 01:35:11.040
<v Speaker 2>cannot find ident in scope. Oh, that's right.

01:35:11.040 --> 01:35:12.880
<v Speaker 2>We need to do super

01:35:13.120 --> 01:35:14.560
<v Speaker 2>it's a super call.

01:35:16.800 --> 01:35:18.880
<v Speaker 2>Super state ident. That's what it is.

01:35:19.600 --> 01:35:21.440
<v Speaker 2>Apologies for the copy and paste. I wanted

01:35:21.440 --> 01:35:22.560
<v Speaker 2>to do a lot more of this live,

01:35:22.560 --> 01:35:23.600
<v Speaker 2>but we are running out of time.

01:35:24.855 --> 01:35:26.455
<v Speaker 2>Alright. So we're gonna

01:35:27.575 --> 01:35:29.335
<v Speaker 2>think I know this. Semicolon will go at

01:35:29.335 --> 01:35:30.135
<v Speaker 2>the end. Okay.

01:35:30.535 --> 01:35:33.335
<v Speaker 2>There we go. So now we've called the

01:35:33.335 --> 01:35:34.455
<v Speaker 2>host function,

01:35:34.775 --> 01:35:37.655
<v Speaker 2>passing it the pointer and length for each

01:35:37.655 --> 01:35:38.935
<v Speaker 2>of our two parameters,

01:35:39.480 --> 01:35:42.760
<v Speaker 2>and then we're going to take that information,

01:35:42.760 --> 01:35:44.360
<v Speaker 2>and we're gonna actually do something fun with

01:35:44.360 --> 01:35:45.880
<v Speaker 2>it. So we're gonna use this

01:35:46.200 --> 01:35:48.680
<v Speaker 2>this helper function that's included in this library

01:35:48.680 --> 01:35:51.080
<v Speaker 2>to accomplish that in a way that's not

01:35:51.080 --> 01:35:51.960
<v Speaker 2>super gross.

01:35:52.280 --> 01:35:53.400
<v Speaker 2>So we're going to

01:35:54.225 --> 01:35:54.864
<v Speaker 2>basically,

01:35:55.585 --> 01:35:56.945
<v Speaker 2>read the memory

01:35:57.344 --> 01:35:59.425
<v Speaker 2>from the the, you know, that the host

01:35:59.425 --> 01:36:01.585
<v Speaker 2>has given back to us and passing that

01:36:01.585 --> 01:36:03.584
<v Speaker 2>size as the parameter,

01:36:03.665 --> 01:36:05.425
<v Speaker 2>and this is going to give us

01:36:06.520 --> 01:36:09.480
<v Speaker 2>either the the bytes or an error. And

01:36:09.480 --> 01:36:12.280
<v Speaker 2>so because the return type of this function

01:36:12.280 --> 01:36:14.280
<v Speaker 2>is either bytes or error,

01:36:14.360 --> 01:36:17.400
<v Speaker 2>this kinda just satisfies it. So I believe

01:36:17.400 --> 01:36:19.160
<v Speaker 2>at this point, we have everything that we

01:36:19.160 --> 01:36:22.280
<v Speaker 2>need in the in the library. So should

01:36:21.455 --> 01:36:22.655
<v Speaker 2>we try to actually

01:36:22.975 --> 01:36:24.014
<v Speaker 2>use this thing?

01:36:24.575 --> 01:36:25.695
<v Speaker 0>Definitely.

01:36:26.655 --> 01:36:28.495
<v Speaker 2>Alright. Hopefully, we can do this in in

01:36:28.495 --> 01:36:30.494
<v Speaker 2>a quick five minutes and be done for

01:36:30.575 --> 01:36:32.335
<v Speaker 2>the day. Alright. Alright.

01:36:33.390 --> 01:36:36.750
<v Speaker 2>So we're gonna create in we're gonna go

01:36:36.750 --> 01:36:39.310
<v Speaker 2>inside of this in this test data function

01:36:39.310 --> 01:36:41.230
<v Speaker 2>package because that's where I keep all of

01:36:41.230 --> 01:36:43.710
<v Speaker 2>my all of my testing stuff. So we're

01:36:43.710 --> 01:36:45.070
<v Speaker 2>going to use the

01:36:45.470 --> 01:36:47.470
<v Speaker 2>the Suborbital CLI to

01:36:48.285 --> 01:36:50.605
<v Speaker 2>create a runnable called,

01:36:51.325 --> 01:36:54.205
<v Speaker 2>let's say, r s ref

01:36:54.525 --> 01:36:55.325
<v Speaker 2>q l.

01:36:55.965 --> 01:36:58.605
<v Speaker 2>Still cannot take that word, and we're gonna

01:36:58.605 --> 01:37:01.485
<v Speaker 2>put it inside of our wasm

01:37:03.130 --> 01:37:04.570
<v Speaker 2>our wasm

01:37:05.050 --> 01:37:05.849
<v Speaker 2>slash

01:37:06.650 --> 01:37:07.610
<v Speaker 2>test

01:37:07.610 --> 01:37:08.489
<v Speaker 2>data.

01:37:08.570 --> 01:37:09.369
<v Speaker 2>I think

01:37:09.690 --> 01:37:11.130
<v Speaker 2>that should do it.

01:37:11.610 --> 01:37:13.369
<v Speaker 2>Alright. So now we have a new

01:37:13.930 --> 01:37:15.290
<v Speaker 2>this is a reactor runnable

01:37:15.825 --> 01:37:18.704
<v Speaker 2>that is written in the Rust language,

01:37:19.105 --> 01:37:20.625
<v Speaker 2>and we should now be able to take

01:37:20.625 --> 01:37:23.344
<v Speaker 2>advantage of that GraphQL function we just wrote

01:37:23.344 --> 01:37:25.105
<v Speaker 2>within here. So we need to do a

01:37:25.105 --> 01:37:26.545
<v Speaker 2>quick little

01:37:27.025 --> 01:37:29.185
<v Speaker 2>trick just to make sure it's importing the

01:37:29.185 --> 01:37:29.745
<v Speaker 2>right

01:37:30.490 --> 01:37:33.210
<v Speaker 2>version of the library because we wanna use

01:37:33.210 --> 01:37:35.050
<v Speaker 2>the local version instead of a version from

01:37:35.050 --> 01:37:37.450
<v Speaker 2>the cargo package manager. So we're just gonna

01:37:37.450 --> 01:37:39.930
<v Speaker 2>edit cargo dot toml real quick to trick

01:37:39.930 --> 01:37:41.210
<v Speaker 2>it into using the local version,

01:37:42.285 --> 01:37:44.925
<v Speaker 2>and then we're gonna get to work. So,

01:37:45.485 --> 01:37:47.724
<v Speaker 2>hopefully, if it accepts

01:37:48.125 --> 01:37:49.164
<v Speaker 2>all of this,

01:37:49.965 --> 01:37:51.005
<v Speaker 2>we should

01:37:51.645 --> 01:37:53.485
<v Speaker 2>be able to use it.

01:37:54.925 --> 01:37:55.324
<v Speaker 2>Hopefully,

01:37:56.630 --> 01:37:58.229
<v Speaker 2>cargo dot toml.

01:38:00.389 --> 01:38:01.110
<v Speaker 2>Hopefully.

01:38:02.469 --> 01:38:05.349
<v Speaker 2>Sometimes I need to restart my my Rust

01:38:05.590 --> 01:38:07.030
<v Speaker 2>server in order for it to like that

01:38:07.030 --> 01:38:08.469
<v Speaker 2>after I do that import.

01:38:08.790 --> 01:38:10.389
<v Speaker 2>External location does not exist.

01:38:13.344 --> 01:38:15.425
<v Speaker 2>It seems to like it, but for some

01:38:15.425 --> 01:38:16.465
<v Speaker 2>reason, it doesn't.

01:38:17.185 --> 01:38:19.745
<v Speaker 2>Well, we're gonna just try it anyway. So,

01:38:20.065 --> 01:38:21.585
<v Speaker 2>we are going to,

01:38:22.385 --> 01:38:22.945
<v Speaker 2>call.

01:38:23.750 --> 01:38:25.430
<v Speaker 2>We're gonna import the

01:38:26.390 --> 01:38:27.430
<v Speaker 2>Suborbital

01:38:28.870 --> 01:38:29.990
<v Speaker 2>GraphQL.

01:38:30.550 --> 01:38:32.710
<v Speaker 2>It knows it's there, so it's obviously just

01:38:32.710 --> 01:38:34.230
<v Speaker 2>complaining for no reason.

01:38:35.430 --> 01:38:37.590
<v Speaker 2>Let's put something on there. I don't know

01:38:37.590 --> 01:38:38.710
<v Speaker 2>why it doesn't like that one, but it

01:38:38.710 --> 01:38:39.350
<v Speaker 2>likes this one.

01:38:40.045 --> 01:38:40.764
<v Speaker 2>Anyhoo,

01:38:41.005 --> 01:38:42.284
<v Speaker 2>so we're gonna call,

01:38:43.005 --> 01:38:45.484
<v Speaker 2>query, which is from, like, GraphQL,

01:38:46.684 --> 01:38:48.204
<v Speaker 2>one there. Do you wanna fill in the

01:38:48.204 --> 01:38:48.925
<v Speaker 2>endpoint

01:38:49.485 --> 01:38:51.085
<v Speaker 2>and the query there for me, David, like

01:38:51.085 --> 01:38:52.605
<v Speaker 2>you did in the other example, or should

01:38:52.605 --> 01:38:53.324
<v Speaker 2>I just copy it?

01:38:54.550 --> 01:38:55.350
<v Speaker 0>That's alright.

01:39:08.985 --> 01:39:10.104
<v Speaker 0>I think that's right.

01:39:12.585 --> 01:39:14.985
<v Speaker 2>Shouldn't I probably have an HTTPS on the

01:39:14.985 --> 01:39:15.945
<v Speaker 2>front of that,

01:39:16.264 --> 01:39:17.065
<v Speaker 1>I think.

01:39:18.905 --> 01:39:20.025
<v Speaker 0>Fussy pants.

01:39:22.450 --> 01:39:24.770
<v Speaker 0>And do we need a response? Yeah.

01:39:25.490 --> 01:39:27.250
<v Speaker 2>So we need to put that in something.

01:39:27.890 --> 01:39:29.330
<v Speaker 2>So that is going to be a result

01:39:29.330 --> 01:39:31.330
<v Speaker 2>type. Oh. And so we're probably gonna wanna

01:39:31.330 --> 01:39:32.290
<v Speaker 2>match on it.

01:39:35.935 --> 01:39:36.655
<v Speaker 2>Yeah.

01:39:39.375 --> 01:39:40.974
<v Speaker 2>Time for a speed round.

01:39:43.615 --> 01:39:45.455
<v Speaker 0>Don't know where this goes yet. So

01:39:46.255 --> 01:39:47.375
<v Speaker 1>It's a response. Right?

01:39:48.750 --> 01:39:51.150
<v Speaker 0>What what alright. Okay. Yeah. Response.

01:39:51.710 --> 01:39:52.429
<v Speaker 0>Blah.

01:39:52.830 --> 01:39:54.110
<v Speaker 1>Yeah.

01:39:54.110 --> 01:39:55.550
<v Speaker 1>Definitely print it.

01:39:56.350 --> 01:39:57.469
<v Speaker 1>Do we have a logger?

01:39:58.430 --> 01:40:00.670
<v Speaker 2>We do have a logger. Yes. We do.

01:40:00.910 --> 01:40:02.590
<v Speaker 1>Does print l n work here?

01:40:03.614 --> 01:40:05.374
<v Speaker 2>I have no idea. Okay.

01:40:06.494 --> 01:40:07.934
<v Speaker 2>Oh, it's okay. I'll I'll fill it in

01:40:07.934 --> 01:40:09.695
<v Speaker 2>after that. There you go. So we will

01:40:09.695 --> 01:40:13.054
<v Speaker 2>we will we'll use a suborbital log for

01:40:13.054 --> 01:40:13.614
<v Speaker 2>this,

01:40:14.494 --> 01:40:17.454
<v Speaker 2>which will give us some actual

01:40:18.610 --> 01:40:19.650
<v Speaker 2>we're going to,

01:40:20.130 --> 01:40:23.490
<v Speaker 2>log in as info, I think, not into

01:40:23.490 --> 01:40:24.370
<v Speaker 2>info.

01:40:24.850 --> 01:40:25.650
<v Speaker 2>No.

01:40:26.770 --> 01:40:28.930
<v Speaker 2>It'd just be info. Yeah. Lowercase.

01:40:29.250 --> 01:40:31.730
<v Speaker 2>So we'll just log that help me.

01:40:32.505 --> 01:40:34.745
<v Speaker 2>I guess we actually wanna log the the

01:40:34.745 --> 01:40:37.385
<v Speaker 2>string version of that response, don't we? So

01:40:38.105 --> 01:40:39.545
<v Speaker 2>we'll want to do

01:40:40.505 --> 01:40:41.624
<v Speaker 2>response

01:40:41.945 --> 01:40:43.624
<v Speaker 2>oh, we want string

01:40:44.264 --> 01:40:45.065
<v Speaker 2>from

01:40:45.784 --> 01:40:47.705
<v Speaker 2>is that right? Mhmm. Yep.

01:40:48.210 --> 01:40:50.050
<v Speaker 0>Well, it depends what response is. It's just

01:40:50.050 --> 01:40:51.890
<v Speaker 0>page. Right? So it should be okay. S

01:40:51.890 --> 01:40:55.010
<v Speaker 2>j r. Yeah. I think that should work.

01:40:55.410 --> 01:40:57.090
<v Speaker 2>It's it's not yelling at me, so that's

01:40:57.090 --> 01:40:57.810
<v Speaker 2>that's

01:40:57.970 --> 01:41:00.130
<v Speaker 2>that's decent. And then we will log

01:41:00.610 --> 01:41:02.450
<v Speaker 2>if we get an error here, we will

01:41:02.450 --> 01:41:03.090
<v Speaker 2>log

01:41:04.005 --> 01:41:06.645
<v Speaker 2>that ee

01:41:06.645 --> 01:41:07.445
<v Speaker 2>dot

01:41:07.845 --> 01:41:09.045
<v Speaker 2>e should have a

01:41:09.925 --> 01:41:10.645
<v Speaker 2>message,

01:41:11.685 --> 01:41:12.565
<v Speaker 2>I think,

01:41:13.525 --> 01:41:14.965
<v Speaker 2>if I remember correctly.

01:41:15.045 --> 01:41:17.870
<v Speaker 0>Dot message spelled properly, I believe. And an

01:41:17.870 --> 01:41:19.389
<v Speaker 0>and an error type. Right?

01:41:20.030 --> 01:41:21.630
<v Speaker 0>Or is this your message? Sorry.

01:41:23.230 --> 01:41:24.030
<v Speaker 2>This should be

01:41:24.590 --> 01:41:26.670
<v Speaker 2>this will be a generic error message because,

01:41:26.830 --> 01:41:28.670
<v Speaker 2>yeah, there's not much we can do there.

01:41:28.910 --> 01:41:29.710
<v Speaker 2>Alright.

01:41:30.910 --> 01:41:31.150
<v Speaker 2>So

01:41:32.255 --> 01:41:34.415
<v Speaker 2>it it's only yelling at me up here,

01:41:34.415 --> 01:41:35.695
<v Speaker 2>but I feel like that's a fake error

01:41:35.695 --> 01:41:38.415
<v Speaker 2>because There's a restart complaining about anything else.

01:41:38.415 --> 01:41:40.095
<v Speaker 0>If you pull up your command, you can

01:41:40.095 --> 01:41:40.575
<v Speaker 0>restart

01:41:42.575 --> 01:41:44.175
<v Speaker 2>Yeah. Okay. What's it called?

01:41:44.575 --> 01:41:46.575
<v Speaker 2>Definitely had to do Language server? R l

01:41:46.575 --> 01:41:47.695
<v Speaker 2>s. Yeah. Yeah.

01:41:48.390 --> 01:41:50.070
<v Speaker 2>Oh, it could be that the that it's

01:41:50.310 --> 01:41:52.870
<v Speaker 2>that the that the library has an error

01:41:52.870 --> 01:41:54.550
<v Speaker 2>because it seems like it does.

01:41:58.070 --> 01:42:00.710
<v Speaker 2>Why doesn't it like us here? Do I

01:42:00.710 --> 01:42:01.830
<v Speaker 2>have to return here?

01:42:04.315 --> 01:42:06.635
<v Speaker 0>No? No. Because there's no semicolon, so we

01:42:06.635 --> 01:42:08.315
<v Speaker 0>don't have to return. Although, I was telling

01:42:08.315 --> 01:42:09.755
<v Speaker 0>this that we're not returning.

01:42:10.155 --> 01:42:11.675
<v Speaker 0>Oh, no. But Right.

01:42:14.315 --> 01:42:15.755
<v Speaker 2>It's complaining about a

01:42:16.540 --> 01:42:18.059
<v Speaker 2>bunch of different stuff here.

01:42:18.940 --> 01:42:21.659
<v Speaker 0>Well, it's complaining that we got the user

01:42:21.659 --> 01:42:23.099
<v Speaker 0>size I 32.

01:42:24.300 --> 01:42:25.579
<v Speaker 1>We're so close.

01:42:26.460 --> 01:42:28.219
<v Speaker 2>We are so close. Yeah. Let me let

01:42:28.219 --> 01:42:30.300
<v Speaker 2>me compare it to the other one because

01:42:30.300 --> 01:42:32.265
<v Speaker 2>that's how I usually that's how I usually

01:42:32.265 --> 01:42:33.785
<v Speaker 2>write code. It's just compared to something that

01:42:33.785 --> 01:42:35.385
<v Speaker 2>I've done in the past that worked.

01:42:37.385 --> 01:42:40.264
<v Speaker 2>Let's see. It doesn't seem to complain here

01:42:41.625 --> 01:42:44.105
<v Speaker 2>about that. We're doing the same thing here.

01:42:47.520 --> 01:42:49.040
<v Speaker 2>So I wonder why

01:42:52.320 --> 01:42:54.160
<v Speaker 2>this one would be complaining about it.

01:43:00.795 --> 01:43:02.554
<v Speaker 2>Does that have a comma? Yeah. There's supposed

01:43:02.554 --> 01:43:03.594
<v Speaker 2>to be a comma there.

01:43:05.995 --> 01:43:06.954
<v Speaker 0>You restart

01:43:07.035 --> 01:43:08.954
<v Speaker 0>the server the language server?

01:43:09.835 --> 01:43:12.635
<v Speaker 2>Yeah. Yeah. I just did that. Doesn't seem

01:43:12.635 --> 01:43:14.715
<v Speaker 2>to have Let's let's try and just

01:43:15.070 --> 01:43:17.070
<v Speaker 0>let's pretend that it returns that.

01:43:21.710 --> 01:43:23.470
<v Speaker 0>And then it's complaining about this.

01:43:34.485 --> 01:43:36.245
<v Speaker 0>Oh, yeah. If we can just ignore that

01:43:36.245 --> 01:43:36.885
<v Speaker 0>now.

01:43:38.885 --> 01:43:39.284
<v Speaker 2>Hopefully.

01:43:39.700 --> 01:43:41.780
<v Speaker 0>Okay. So now he's only complaining about our

01:43:41.780 --> 01:43:43.619
<v Speaker 0>use size and I 32.

01:43:44.740 --> 01:43:45.460
<v Speaker 2>Yeah.

01:43:49.300 --> 01:43:50.260
<v Speaker 1>Just trying anything.

01:43:54.094 --> 01:43:56.974
<v Speaker 0>We do have the I 32. Yeah.

01:43:58.255 --> 01:43:59.935
<v Speaker 2>Yeah. I'm not sure why it wouldn't like

01:43:59.935 --> 01:44:00.494
<v Speaker 2>that.

01:44:01.135 --> 01:44:03.935
<v Speaker 1>It says you can only convert it by

01:44:03.935 --> 01:44:06.015
<v Speaker 1>doing trying to an unwrapping because that might

01:44:06.094 --> 01:44:08.139
<v Speaker 1>view size might be larger than an I

01:44:08.139 --> 01:44:09.820
<v Speaker 1>32, so it might panic.

01:44:12.460 --> 01:44:14.539
<v Speaker 2>That's strange. What do I do down here?

01:44:16.860 --> 01:44:18.619
<v Speaker 2>Yeah. Dot line as I 32. That's what

01:44:18.619 --> 01:44:19.420
<v Speaker 2>we do down here.

01:44:29.155 --> 01:44:30.114
<v Speaker 1>Did I get that right?

01:44:35.560 --> 01:44:38.040
<v Speaker 1>Nothing that found on you said. Okay. Thanks.

01:44:42.520 --> 01:44:43.800
<v Speaker 2>Gotta love it when you're right at the

01:44:43.800 --> 01:44:45.560
<v Speaker 2>finish line and it doesn't like it.

01:44:45.880 --> 01:44:46.520
<v Speaker 1>Yeah.

01:44:47.000 --> 01:44:48.040
<v Speaker 1>Well, do we define

01:44:48.495 --> 01:44:51.215
<v Speaker 1>the inputs of GraphQL query different than we

01:44:51.215 --> 01:44:51.775
<v Speaker 1>do

01:44:52.175 --> 01:44:53.295
<v Speaker 1>for the other thing?

01:44:55.215 --> 01:44:58.175
<v Speaker 2>So, yeah, our endpoint pointer is a constituent,

01:44:58.175 --> 01:45:00.575
<v Speaker 2>and our size is nine thirty two

01:45:01.020 --> 01:45:03.980
<v Speaker 2>for each of them. So endpoint pointer is

01:45:03.980 --> 01:45:04.619
<v Speaker 2>a

01:45:05.659 --> 01:45:06.859
<v Speaker 2>constituent,

01:45:07.659 --> 01:45:09.420
<v Speaker 2>which is why it doesn't mind that. But

01:45:09.420 --> 01:45:10.699
<v Speaker 2>then for some reason

01:45:12.380 --> 01:45:13.420
<v Speaker 0>Okay. Let's try

01:45:14.625 --> 01:45:16.385
<v Speaker 0>you said it was potentially a VEX, so

01:45:16.385 --> 01:45:17.585
<v Speaker 0>I'm gonna force it.

01:45:19.105 --> 01:45:21.025
<v Speaker 0>Mhmm. And what was it a VEXR?

01:45:21.585 --> 01:45:22.224
<v Speaker 0>Right?

01:45:22.865 --> 01:45:23.265
<v Speaker 2>Yeah.

01:45:29.120 --> 01:45:29.840
<v Speaker 0>Enter.

01:45:31.680 --> 01:45:32.800
<v Speaker 0>Does that help?

01:45:33.520 --> 01:45:34.960
<v Speaker 2>Oh, sorry. I'm scrolling around.

01:45:40.614 --> 01:45:41.894
<v Speaker 2>Yeah. Let's see.

01:45:43.094 --> 01:45:44.215
<v Speaker 2>When we take

01:45:44.455 --> 01:45:47.014
<v Speaker 2>this URL and we convert it, what do

01:45:47.014 --> 01:45:47.814
<v Speaker 2>we do here?

01:45:48.614 --> 01:45:49.574
<v Speaker 2>We do

01:45:50.855 --> 01:45:53.670
<v Speaker 2>URL string as str dot pointer and then

01:45:53.670 --> 01:45:55.190
<v Speaker 2>URL string dot link. Why don't we try

01:45:55.190 --> 01:45:56.309
<v Speaker 2>just copying

01:45:56.950 --> 01:45:59.750
<v Speaker 2>this? Oh, you're you're using uppercase

01:45:59.750 --> 01:46:00.790
<v Speaker 0>strings. Right?

01:46:02.630 --> 01:46:03.829
<v Speaker 2>Nope. These are

01:46:04.150 --> 01:46:06.790
<v Speaker 2>ampersand str. And no. But then the bottom,

01:46:06.790 --> 01:46:07.750
<v Speaker 0>you have

01:46:08.225 --> 01:46:10.705
<v Speaker 0>this follow thing is I'm gonna turn you

01:46:10.705 --> 01:46:11.425
<v Speaker 0>off now.

01:46:11.985 --> 01:46:13.744
<v Speaker 2>Yeah. That's still that's okay.

01:46:14.705 --> 01:46:15.905
<v Speaker 2>So we'll take

01:46:16.465 --> 01:46:18.305
<v Speaker 0>Yeah. You're using format here. Right?

01:46:21.190 --> 01:46:23.590
<v Speaker 0>And string from. So these are uppercase strings

01:46:23.590 --> 01:46:25.989
<v Speaker 0>that you're using length on and slice.

01:46:27.670 --> 01:46:29.750
<v Speaker 2>I see. Okay. Could always do a

01:46:33.110 --> 01:46:34.070
<v Speaker 0>string

01:46:34.310 --> 01:46:35.110
<v Speaker 0>from

01:46:35.190 --> 01:46:37.190
<v Speaker 0>endpoint

01:46:37.005 --> 01:46:38.445
<v Speaker 0>and then as

01:46:38.685 --> 01:46:39.485
<v Speaker 0>slice.

01:46:44.445 --> 01:46:46.205
<v Speaker 0>Why is it complaining about that?

01:46:46.685 --> 01:46:49.245
<v Speaker 1>As slice is not a thing. Is that

01:46:49.245 --> 01:46:50.605
<v Speaker 0>not what we just done here? Might be.

01:46:50.605 --> 01:46:51.645
<v Speaker 2>It might be as back.

01:46:53.270 --> 01:46:54.710
<v Speaker 0>URL string.

01:46:56.150 --> 01:46:57.830
<v Speaker 0>Oh, no. You're just you're you're just using

01:46:57.830 --> 01:47:00.230
<v Speaker 0>a string. Right? Okay. Sorry. Yeah.

01:47:00.710 --> 01:47:03.110
<v Speaker 0>And then that has a length as an

01:47:03.110 --> 01:47:03.830
<v Speaker 0>I 32.

01:47:06.525 --> 01:47:08.685
<v Speaker 0>This is well, that should be endpoint slash.

01:47:08.685 --> 01:47:09.245
<v Speaker 0>Right?

01:47:15.005 --> 01:47:16.765
<v Speaker 0>Why do computers hate us?

01:47:19.725 --> 01:47:21.165
<v Speaker 2>Very, very good question.

01:47:27.280 --> 01:47:28.800
<v Speaker 0>So we are trying to pass a pointer

01:47:28.800 --> 01:47:31.120
<v Speaker 0>and a length of the endpoint here. Right?

01:47:31.120 --> 01:47:33.520
<v Speaker 0>That's that's our mission. Okay. So we've got

01:47:33.520 --> 01:47:35.520
<v Speaker 0>the as pointer, which is fine. So I'm

01:47:35.520 --> 01:47:38.295
<v Speaker 0>not really sure if we actually need these.

01:47:40.135 --> 01:47:42.215
<v Speaker 2>Yeah. Maybe not. If we just do endpoint

01:47:42.215 --> 01:47:43.815
<v Speaker 2>dot len. Yeah.

01:47:46.215 --> 01:47:48.295
<v Speaker 2>You probably still need an access to the

01:47:52.360 --> 01:47:54.519
<v Speaker 0>And I thought it's a new type.

01:47:54.920 --> 01:47:57.639
<v Speaker 0>But But it's not it's it's it's it's

01:47:57.639 --> 01:48:00.440
<v Speaker 2>still complaining about the new size even though

01:48:00.440 --> 01:48:01.320
<v Speaker 2>we casted it.

01:48:08.145 --> 01:48:10.224
<v Speaker 0>Okay. So endpoint

01:48:10.385 --> 01:48:11.264
<v Speaker 0>size

01:48:11.265 --> 01:48:14.864
<v Speaker 0>equals endpoint dot l n. I mean, does

01:48:14.864 --> 01:48:15.265
<v Speaker 0>that work?

01:48:17.239 --> 01:48:18.599
<v Speaker 2>Let's find out.

01:48:19.239 --> 01:48:20.360
<v Speaker 2>Endpoint

01:48:20.680 --> 01:48:21.400
<v Speaker 2>size.

01:48:22.040 --> 01:48:23.880
<v Speaker 2>Yeah. For some reason, it likes that, but

01:48:23.880 --> 01:48:26.040
<v Speaker 2>not the other way around. Alright. So let's

01:48:26.040 --> 01:48:27.079
<v Speaker 2>do query

01:48:27.320 --> 01:48:28.360
<v Speaker 2>dot as

01:48:28.600 --> 01:48:31.114
<v Speaker 2>pointer here, and then we can can you

01:48:31.114 --> 01:48:32.875
<v Speaker 2>add the same thing for query there?

01:48:43.620 --> 01:48:44.340
<v Speaker 2>Alright.

01:48:44.900 --> 01:48:45.619
<v Speaker 0>Oh.

01:48:46.659 --> 01:48:48.900
<v Speaker 0>What's it complaining about? Semicolon.

01:48:51.540 --> 01:48:53.059
<v Speaker 0>Expect expected that.

01:48:54.739 --> 01:48:57.075
<v Speaker 2>Something with my with my I think it's

01:48:57.075 --> 01:49:00.195
<v Speaker 0>your language server thing. Right? Yeah. I've restarted

01:49:00.195 --> 01:49:02.034
<v Speaker 2>it about four times already.

01:49:03.955 --> 01:49:06.195
<v Speaker 0>Can we just compile it? Unfortunately. Yeah. I

01:49:06.195 --> 01:49:07.795
<v Speaker 2>think we might be able to. Yeah. That's

01:49:07.795 --> 01:49:09.955
<v Speaker 2>that's that's basically what I'm coming to at

01:49:09.955 --> 01:49:13.460
<v Speaker 2>this point. So if we try to build

01:49:14.260 --> 01:49:16.420
<v Speaker 2>we wanna build our Wasm

01:49:16.500 --> 01:49:18.500
<v Speaker 2>slash test data,

01:49:18.500 --> 01:49:19.700
<v Speaker 2>right, slash

01:49:20.100 --> 01:49:21.460
<v Speaker 2>what is this called?

01:49:22.260 --> 01:49:23.700
<v Speaker 2>R s GraphQL

01:49:25.125 --> 01:49:27.284
<v Speaker 2>r s GraphQL,

01:49:27.365 --> 01:49:29.125
<v Speaker 2>and then we use the native tool chain.

01:49:29.125 --> 01:49:30.405
<v Speaker 2>Let's see if it's

01:49:31.285 --> 01:49:32.405
<v Speaker 2>complaints.

01:49:35.445 --> 01:49:36.165
<v Speaker 2>Why? Oh.

01:49:37.490 --> 01:49:40.850
<v Speaker 0>No such failed test data GraphQL.

01:49:43.410 --> 01:49:44.530
<v Speaker 2>R wasm

01:49:45.810 --> 01:49:48.050
<v Speaker 2>test data r s GraphQL.

01:49:48.050 --> 01:49:49.330
<v Speaker 2>Did I misspell that?

01:49:57.905 --> 01:49:58.625
<v Speaker 2>K.

01:49:59.105 --> 01:50:01.665
<v Speaker 2>Why don't we here. We we can just

01:50:01.665 --> 01:50:02.385
<v Speaker 2>build them all.

01:50:05.539 --> 01:50:07.619
<v Speaker 2>Easier than trying to do it with an

01:50:07.619 --> 01:50:08.659
<v Speaker 2>individual one.

01:50:09.139 --> 01:50:11.619
<v Speaker 2>So this is this is just Subor is

01:50:11.619 --> 01:50:14.099
<v Speaker 2>gonna go through and build every single piece

01:50:14.099 --> 01:50:16.019
<v Speaker 2>of test data, which should only take ten

01:50:16.019 --> 01:50:18.340
<v Speaker 2>seconds or so. Yeah. You still can't spell

01:50:18.340 --> 01:50:19.460
<v Speaker 0>GraphQL. That's why.

01:50:20.635 --> 01:50:22.474
<v Speaker 0>Probably. Yeah. GraphQL

01:50:22.554 --> 01:50:23.594
<v Speaker 0>and the path.

01:50:25.355 --> 01:50:28.474
<v Speaker 2>My alright. Well, that makes sense.

01:50:29.114 --> 01:50:31.114
<v Speaker 2>That is gonna be my legacy from this

01:50:31.114 --> 01:50:33.114
<v Speaker 2>stream. It's just my inability to spell the

01:50:33.114 --> 01:50:33.994
<v Speaker 2>words GraphQL.

01:50:36.310 --> 01:50:37.030
<v Speaker 2>Alright.

01:50:37.190 --> 01:50:39.670
<v Speaker 2>Should be just about done here.

01:50:40.630 --> 01:50:43.430
<v Speaker 1>I can't wait. I'm just waiting for it.

01:50:43.910 --> 01:50:45.910
<v Speaker 2>Oh, yeah. There it is. So now it's

01:50:45.910 --> 01:50:46.390
<v Speaker 2>complaining.

01:50:51.315 --> 01:50:52.355
<v Speaker 1>Three errors.

01:50:54.755 --> 01:50:57.395
<v Speaker 2>Oh, we I know what we did. Oh,

01:50:57.395 --> 01:50:59.955
<v Speaker 0>yeah. We're just tostring instead of asstring.

01:51:08.660 --> 01:51:09.940
<v Speaker 0>And you've called an

01:51:10.580 --> 01:51:12.260
<v Speaker 0>error function in libris.

01:51:12.260 --> 01:51:13.620
<v Speaker 0>I'm gonna follow you again.

01:51:18.645 --> 01:51:20.085
<v Speaker 2>Oh, I see.

01:51:20.485 --> 01:51:21.925
<v Speaker 2>I see. Okay.

01:51:22.005 --> 01:51:23.765
<v Speaker 2>Right. We can't use that.

01:51:25.605 --> 01:51:28.325
<v Speaker 2>We are going to instead.

01:51:29.530 --> 01:51:30.650
<v Speaker 2>Oh, we are

01:51:31.530 --> 01:51:33.530
<v Speaker 2>yeah. That's right. We're going to do

01:51:34.650 --> 01:51:37.130
<v Speaker 2>we want the error function from the logging

01:51:37.130 --> 01:51:38.489
<v Speaker 2>package instead of

01:51:39.929 --> 01:51:42.810
<v Speaker 2>the error macro from the yeah. That makes

01:51:42.810 --> 01:51:45.035
<v Speaker 2>sense. Okay. So now that I know that

01:51:45.035 --> 01:51:47.035
<v Speaker 2>I've misspelled that, let's try to rebuild,

01:51:47.355 --> 01:51:50.315
<v Speaker 2>just that one in particular. So if we

01:51:50.315 --> 01:51:51.035
<v Speaker 2>build,

01:51:51.195 --> 01:51:52.715
<v Speaker 2>our wasm

01:51:52.795 --> 01:51:56.955
<v Speaker 2>slash test data slash r s dash g

01:51:56.955 --> 01:51:57.915
<v Speaker 2>r a

01:51:58.280 --> 01:52:01.800
<v Speaker 2>q h q l because, apparently, that is

01:52:02.040 --> 01:52:03.000
<v Speaker 2>that is

01:52:03.480 --> 01:52:04.920
<v Speaker 2>how I've done it.

01:52:06.120 --> 01:52:08.440
<v Speaker 2>Alright. So it's complaining. Oh, I just passed.

01:52:10.805 --> 01:52:14.405
<v Speaker 2>It's just complaining about our inputs there. So

01:52:15.045 --> 01:52:16.085
<v Speaker 2>if we

01:52:17.125 --> 01:52:19.445
<v Speaker 2>instead of toString, it should be has str,

01:52:19.445 --> 01:52:21.445
<v Speaker 2>apparently. And then No. I think it's complaining

01:52:21.445 --> 01:52:23.285
<v Speaker 0>about we've got

01:52:29.560 --> 01:52:31.560
<v Speaker 2>because response is back, so we're converting it

01:52:31.560 --> 01:52:33.000
<v Speaker 2>to a capital string, and then we are

01:52:33.000 --> 01:52:35.000
<v Speaker 2>converting that to a str. So

01:52:35.560 --> 01:52:36.760
<v Speaker 2>I think

01:52:39.005 --> 01:52:40.685
<v Speaker 2>I think that's what it wants.

01:52:42.525 --> 01:52:43.725
<v Speaker 0>Okay. Let's try.

01:52:44.765 --> 01:52:46.205
<v Speaker 0>Yeah. We'll see.

01:52:47.565 --> 01:52:48.045
<v Speaker 0>No.

01:52:51.760 --> 01:52:53.280
<v Speaker 2>Oh, that's right. We can't,

01:52:54.160 --> 01:52:55.840
<v Speaker 2>I think there's a I have a util

01:52:55.840 --> 01:52:57.840
<v Speaker 2>that will help us here.

01:53:01.040 --> 01:53:02.079
<v Speaker 2>We can do

01:53:02.640 --> 01:53:03.360
<v Speaker 2>util.

01:53:05.764 --> 01:53:07.445
<v Speaker 1>It's because we don't know what encoding the

01:53:07.445 --> 01:53:08.244
<v Speaker 1>vec is.

01:53:09.284 --> 01:53:11.445
<v Speaker 2>Right. We want to string,

01:53:11.605 --> 01:53:13.284
<v Speaker 2>and that will be response.

01:53:13.605 --> 01:53:16.485
<v Speaker 2>And then we'll do a str from there.

01:53:17.205 --> 01:53:18.405
<v Speaker 2>And then message

01:53:20.350 --> 01:53:22.110
<v Speaker 2>is apparently something unknown.

01:53:26.510 --> 01:53:29.070
<v Speaker 2>E dot message. That should be the one

01:53:29.070 --> 01:53:31.470
<v Speaker 1>error. Yeah. That's that's that one should be

01:53:31.470 --> 01:53:31.710
<v Speaker 2>okay.

01:53:32.375 --> 01:53:34.455
<v Speaker 0>What type is e? Because I'm not I'm

01:53:34.455 --> 01:53:35.575
<v Speaker 0>not getting any

01:53:36.535 --> 01:53:37.975
<v Speaker 2>e should be a run error.

01:53:38.295 --> 01:53:38.855
<v Speaker 2>Okay.

01:53:39.895 --> 01:53:40.615
<v Speaker 2>Yeah.

01:53:41.815 --> 01:53:44.775
<v Speaker 2>Assuming we've done our yeah. Run error. And

01:53:44.775 --> 01:53:47.015
<v Speaker 1>run error's message is an uppercase s string.

01:53:47.015 --> 01:53:47.255
<v Speaker 1>So

01:53:48.050 --> 01:53:49.650
<v Speaker 2>Right. So that's why, yeah, that should do

01:53:49.650 --> 01:53:51.010
<v Speaker 2>it. Okay. Try that.

01:53:51.970 --> 01:53:53.970
<v Speaker 2>Hey. There we go. It built. Alright. Hey.

01:53:53.970 --> 01:53:54.370
<v Speaker 1>So

01:53:55.410 --> 01:53:57.330
<v Speaker 2>now Run it. We should be able to

01:53:57.330 --> 01:53:58.930
<v Speaker 2>we should be able to run this module

01:53:58.930 --> 01:54:02.065
<v Speaker 2>and actually get something usable. So now we're

01:54:02.065 --> 01:54:03.264
<v Speaker 2>gonna switch over

01:54:03.585 --> 01:54:05.264
<v Speaker 2>to our the fastest way to get this

01:54:05.264 --> 01:54:07.344
<v Speaker 2>running is to just use a Go test.

01:54:07.665 --> 01:54:08.224
<v Speaker 2>So

01:54:08.545 --> 01:54:09.664
<v Speaker 2>we will

01:54:10.065 --> 01:54:12.385
<v Speaker 2>let's find one that's doing this properly. We

01:54:12.385 --> 01:54:14.064
<v Speaker 2>will copy this one here,

01:54:14.465 --> 01:54:16.304
<v Speaker 2>and we'll create a brand new test

01:54:16.940 --> 01:54:17.820
<v Speaker 2>called

01:54:18.460 --> 01:54:19.099
<v Speaker 2>oh,

01:54:19.500 --> 01:54:21.179
<v Speaker 2>I barely didn't like that. What did I

01:54:21.179 --> 01:54:22.300
<v Speaker 2>copy around here?

01:54:24.300 --> 01:54:26.300
<v Speaker 2>I wanna copy this whole thing,

01:54:27.340 --> 01:54:30.139
<v Speaker 2>and we're gonna create a new test called

01:54:30.575 --> 01:54:31.455
<v Speaker 2>tests,

01:54:31.535 --> 01:54:33.135
<v Speaker 2>let's say, GraphQL

01:54:34.815 --> 01:54:36.655
<v Speaker 2>QL runner with

01:54:37.135 --> 01:54:38.094
<v Speaker 2>alright.

01:54:38.815 --> 01:54:40.815
<v Speaker 2>So we're going to import the

01:54:42.780 --> 01:54:45.020
<v Speaker 2>r s dash g r a.

01:54:45.420 --> 01:54:47.500
<v Speaker 2>Make sure I make sure I spell my

01:54:47.500 --> 01:54:48.699
<v Speaker 2>typo correctly.

01:54:49.100 --> 01:54:50.219
<v Speaker 2>G r a

01:54:51.180 --> 01:54:52.300
<v Speaker 2>q h

01:54:52.700 --> 01:54:53.580
<v Speaker 2>q l

01:54:54.300 --> 01:54:55.660
<v Speaker 2>slash

01:54:58.645 --> 01:55:01.285
<v Speaker 2>q h q l dot Wasm. Alright. So

01:55:01.285 --> 01:55:03.605
<v Speaker 2>now we're going to pass in

01:55:04.725 --> 01:55:07.205
<v Speaker 2>well, it's already running the query the way

01:55:07.205 --> 01:55:08.325
<v Speaker 2>that we want. Right? So we don't need

01:55:08.325 --> 01:55:10.530
<v Speaker 2>to pass anything into it. We can just

01:55:10.530 --> 01:55:12.770
<v Speaker 2>pass in, an empty string there.

01:55:13.250 --> 01:55:17.170
<v Speaker 2>And then assuming everything goes correctly,

01:55:17.890 --> 01:55:21.570
<v Speaker 2>we should be able to say

01:55:22.844 --> 01:55:24.124
<v Speaker 2>print l n,

01:55:24.684 --> 01:55:25.405
<v Speaker 2>the

01:55:25.565 --> 01:55:26.844
<v Speaker 2>response,

01:55:27.804 --> 01:55:30.125
<v Speaker 2>which is an interface type, and we wanna

01:55:30.125 --> 01:55:32.684
<v Speaker 2>convert that to bytes.

01:55:34.364 --> 01:55:35.164
<v Speaker 1>Would this be the logs?

01:55:37.100 --> 01:55:39.020
<v Speaker 2>This would be what it returns. Oh, you

01:55:39.020 --> 01:55:40.380
<v Speaker 2>know what? You're right. It's logging, so we

01:55:40.380 --> 01:55:42.460
<v Speaker 2>don't really need to actually do anything here.

01:55:42.460 --> 01:55:44.220
<v Speaker 1>Okay. Because I don't think we returned. Yeah.

01:55:44.220 --> 01:55:45.260
<v Speaker 2>We just returned

01:55:45.740 --> 01:55:46.940
<v Speaker 2>hello Hello.

01:55:47.180 --> 01:55:49.180
<v Speaker 2>In in the module there. So

01:55:50.094 --> 01:55:52.175
<v Speaker 2>we can just do nothing here

01:55:52.655 --> 01:55:54.655
<v Speaker 2>and and see

01:55:55.054 --> 01:55:56.815
<v Speaker 2>what happens. We're not even gonna use the

01:55:56.815 --> 01:55:57.534
<v Speaker 2>response.

01:55:58.335 --> 01:56:00.735
<v Speaker 2>Okay. Moment of truth. We're gonna run this.

01:56:00.974 --> 01:56:02.494
<v Speaker 1>Cross your fingers. See

01:56:02.895 --> 01:56:03.854
<v Speaker 2>what happens.

01:56:04.494 --> 01:56:06.129
<v Speaker 2>Will you be able to see that output?

01:56:07.329 --> 01:56:08.929
<v Speaker 2>No. Oh, I don't think you can you

01:56:08.929 --> 01:56:10.530
<v Speaker 2>you can't see my output. Okay. I'll I'll

01:56:10.530 --> 01:56:12.449
<v Speaker 2>run the I'll run the test command manually,

01:56:12.449 --> 01:56:13.329
<v Speaker 2>and then you should be able to see

01:56:13.329 --> 01:56:14.530
<v Speaker 2>it. So if I switch over to that

01:56:14.530 --> 01:56:16.530
<v Speaker 2>terminal, you can see that. Right? Yeah. Okay.

01:56:16.530 --> 01:56:19.455
<v Speaker 0>Yeah. Yeah. Cool. So let me just format

01:56:19.455 --> 01:56:21.935
<v Speaker 2>this correctly. We're gonna make it verbose, and

01:56:21.935 --> 01:56:23.775
<v Speaker 2>we're gonna run the local version.

01:56:24.415 --> 01:56:25.054
<v Speaker 2>And

01:56:26.175 --> 01:56:26.974
<v Speaker 2>There

01:56:26.975 --> 01:56:28.655
<v Speaker 2>it is. Our data.

01:56:29.534 --> 01:56:30.655
<v Speaker 1>Hi.

01:56:30.895 --> 01:56:32.600
<v Speaker 1>I recognize that name.

01:56:33.320 --> 01:56:34.520
<v Speaker 2>Alright.

01:56:34.920 --> 01:56:37.560
<v Speaker 2>We did. That was a very long walk,

01:56:40.520 --> 01:56:42.280
<v Speaker 2>but we got there in the end.

01:56:42.760 --> 01:56:44.679
<v Speaker 0>Awesome. Oh, that's fantastic.

01:56:45.560 --> 01:56:45.880
<v Speaker 2>Yeah.

01:56:46.515 --> 01:56:49.075
<v Speaker 2>So we're using, yeah, we're using reactor

01:56:49.155 --> 01:56:52.195
<v Speaker 2>to load this WebAssembly module that we built,

01:56:52.195 --> 01:56:54.114
<v Speaker 2>and then we are calling it,

01:56:54.515 --> 01:56:57.075
<v Speaker 2>and that WebAssembly module is making a query

01:56:57.235 --> 01:56:58.755
<v Speaker 2>to David's

01:56:58.755 --> 01:57:02.340
<v Speaker 2>GraphQL endpoint. That is passing the query to

01:57:02.340 --> 01:57:04.180
<v Speaker 2>the host. The host is doing the request,

01:57:04.180 --> 01:57:06.340
<v Speaker 2>passing the response back to the module, and

01:57:06.340 --> 01:57:08.260
<v Speaker 2>then that is getting logged

01:57:08.580 --> 01:57:11.219
<v Speaker 2>by the module. So that was a very

01:57:11.219 --> 01:57:12.580
<v Speaker 2>long walk, but we got there in the

01:57:12.580 --> 01:57:14.180
<v Speaker 2>end. That's

01:57:14.180 --> 01:57:14.900
<v Speaker 1>a beautiful thing.

01:57:16.284 --> 01:57:19.564
<v Speaker 0>Yeah. That So so that was super file.

01:57:19.724 --> 01:57:22.284
<v Speaker 1>We can, like, delete the Rust, keep that

01:57:22.284 --> 01:57:24.684
<v Speaker 1>RUSM file, email it to a friend, and

01:57:24.684 --> 01:57:26.204
<v Speaker 1>they can run it. And it would go

01:57:26.204 --> 01:57:28.524
<v Speaker 1>and hit API dot Rawkode.dev.

01:57:28.525 --> 01:57:31.005
<v Speaker 1>And as long it has the right

01:57:31.710 --> 01:57:32.750
<v Speaker 1>capability

01:57:32.750 --> 01:57:33.470
<v Speaker 1>functions,

01:57:33.790 --> 01:57:35.470
<v Speaker 1>then it would be able to log, do

01:57:35.470 --> 01:57:36.350
<v Speaker 1>the GraphQL,

01:57:36.670 --> 01:57:38.430
<v Speaker 1>and give us give and give us that

01:57:38.430 --> 01:57:39.070
<v Speaker 1>output.

01:57:39.550 --> 01:57:41.790
<v Speaker 2>That's alright. Exactly right. So, you

01:57:42.190 --> 01:57:43.630
<v Speaker 2>know, when you at the top of the

01:57:43.630 --> 01:57:45.465
<v Speaker 2>Rust file, you saw we were importing the

01:57:45.465 --> 01:57:47.625
<v Speaker 2>different modules from the Suborbital library, and that

01:57:47.625 --> 01:57:49.785
<v Speaker 2>was basically importing those capabilities that we had

01:57:49.785 --> 01:57:52.345
<v Speaker 2>written earlier in the stream. So it all

01:57:52.345 --> 01:57:54.345
<v Speaker 2>comes together, and and we were we were

01:57:54.345 --> 01:57:56.345
<v Speaker 2>able to to conquer the dragon.

01:57:57.800 --> 01:58:00.040
<v Speaker 1>It's a beautiful thing. Oh my goodness.

01:58:00.520 --> 01:58:03.400
<v Speaker 0>Alright. Well, that was very, very cool. I

01:58:03.400 --> 01:58:06.280
<v Speaker 0>really enjoyed that. I learned an absolute ton.

01:58:06.360 --> 01:58:08.360
<v Speaker 0>So I'm gonna say thank you, Connor. Thank

01:58:08.360 --> 01:58:10.760
<v Speaker 0>you, Francis. It was a pleasure to sit

01:58:10.760 --> 01:58:13.465
<v Speaker 0>and work through that with you both. Any

01:58:13.625 --> 01:58:14.425
<v Speaker 0>last words?

01:58:15.465 --> 01:58:18.025
<v Speaker 2>Yeah. I don't think so. It's a lot

01:58:18.025 --> 01:58:19.945
<v Speaker 2>of fun. I'm gonna drop a link for

01:58:19.945 --> 01:58:22.105
<v Speaker 1>Gabriel into the Discord chat

01:58:22.985 --> 01:58:25.945
<v Speaker 1>about some other capabilities we're doing with Wasm

01:58:25.945 --> 01:58:27.785
<v Speaker 1>or people out there are doing with Wasm

01:58:28.030 --> 01:58:31.070
<v Speaker 1>where, like, because of the nature of it,

01:58:31.150 --> 01:58:33.070
<v Speaker 1>you can, like, boot a program and then

01:58:33.070 --> 01:58:34.910
<v Speaker 1>pause it and then and then use it

01:58:34.910 --> 01:58:37.150
<v Speaker 1>to execute, you know, input from there. There

01:58:37.310 --> 01:58:39.630
<v Speaker 1>there's, like, all these it because it's because

01:58:39.630 --> 01:58:41.790
<v Speaker 1>of that isolation, there's this entire world of

01:58:41.790 --> 01:58:44.315
<v Speaker 1>things you can do for very fast computing.

01:58:44.554 --> 01:58:46.074
<v Speaker 1>And and, you know, and I'm just, like,

01:58:46.074 --> 01:58:47.275
<v Speaker 1>like, waiting for a game to install the

01:58:47.275 --> 01:58:48.315
<v Speaker 1>other day. And I'm like, if this was

01:58:48.315 --> 01:58:51.195
<v Speaker 1>WASM, we could, like, stream it, you know?

01:58:51.195 --> 01:58:53.275
<v Speaker 1>Like like like like, I could just start

01:58:53.275 --> 01:58:54.715
<v Speaker 1>playing it because it just start reading the

01:58:54.715 --> 01:58:57.114
<v Speaker 1>memory from the beginning. Right? You know? Yeah.

01:58:57.114 --> 01:58:58.570
<v Speaker 1>We're not in that world yet. And

01:58:59.210 --> 01:59:01.050
<v Speaker 2>yeah. And and the portability of it is

01:59:01.050 --> 01:59:02.969
<v Speaker 2>awesome. Like, if if a browser were to

01:59:02.969 --> 01:59:05.930
<v Speaker 2>expose that same GraphQL query host function, you

01:59:05.930 --> 01:59:08.489
<v Speaker 2>could take this exact same Wasm module, run

01:59:08.489 --> 01:59:10.250
<v Speaker 2>it in Reactor, and then also run it

01:59:10.250 --> 01:59:12.090
<v Speaker 2>in the browser. And that's the portability that

01:59:12.090 --> 01:59:14.395
<v Speaker 2>you don't get with any other technology. It's

01:59:14.395 --> 01:59:15.275
<v Speaker 2>really quite cool.

01:59:15.995 --> 01:59:16.635
<v Speaker 1>Yeah.

01:59:17.275 --> 01:59:19.275
<v Speaker 0>Alright. We will leave it there, but we

01:59:19.275 --> 01:59:21.435
<v Speaker 0>will fill up the description with more links

01:59:21.435 --> 01:59:24.235
<v Speaker 0>to more awesome stuff on Suborbital and others.

01:59:24.235 --> 01:59:26.475
<v Speaker 0>Thank you both again. Yeah. Have a wonderful

01:59:26.475 --> 01:59:28.315
<v Speaker 0>evening, and hopefully, I'll see you both again

01:59:28.315 --> 01:59:31.100
<v Speaker 0>soon. Thanks. Yeah. Cheers. Thanks everyone.

01:59:31.420 --> 01:59:32.620
<v Speaker 2>Bye. Have a good day.
