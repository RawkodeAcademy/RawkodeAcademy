WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: ef7be553-8a38-4061-b848-27e898650503
Created: 2025-04-29T21:48:41.141Z
Duration: 4575.0254
Channels: 1

00:01:31.245 --> 00:01:32.125
<v Speaker 0>Hello,

00:01:32.205 --> 00:01:34.205
<v Speaker 0>and welcome to today's episode.

00:01:34.285 --> 00:01:36.365
<v Speaker 0>Today, we are taking a look at GetOps

00:01:36.365 --> 00:01:37.965
<v Speaker 0>and the GetOps toolkit.

00:01:38.205 --> 00:01:40.765
<v Speaker 0>And who better to join me than Stefan?

00:01:40.765 --> 00:01:42.205
<v Speaker 0>Hey, Stefan. How are you?

00:01:46.119 --> 00:01:47.159
<v Speaker 0>I

00:01:49.080 --> 00:01:50.280
<v Speaker 0>can't hear you.

00:01:51.799 --> 00:01:53.000
<v Speaker 1>Okay. Sorry.

00:01:55.960 --> 00:01:57.880
<v Speaker 0>Peter, there. I was like, oh, shit. What's

00:01:57.880 --> 00:01:58.119
<v Speaker 0>happened?

00:01:59.015 --> 00:02:00.295
<v Speaker 0>There we can hear you. How are you,

00:02:00.295 --> 00:02:00.854
<v Speaker 0>Stefan?

00:02:01.655 --> 00:02:02.454
<v Speaker 1>Great.

00:02:03.174 --> 00:02:05.094
<v Speaker 1>Very happy to be here and

00:02:05.095 --> 00:02:05.975
<v Speaker 1>share the

00:02:06.774 --> 00:02:08.775
<v Speaker 1>work we've been doing on the GitOps toolkit

00:02:08.775 --> 00:02:10.854
<v Speaker 1>and the road to FluxCDO.

00:02:11.860 --> 00:02:12.660
<v Speaker 0>Awesome.

00:02:12.660 --> 00:02:14.500
<v Speaker 0>Well, I think the the best thing for

00:02:14.500 --> 00:02:16.740
<v Speaker 0>us to do would best be to quickly

00:02:16.740 --> 00:02:20.100
<v Speaker 0>give an overview of what GitOps is.

00:02:21.860 --> 00:02:22.580
<v Speaker 1>Right.

00:02:22.740 --> 00:02:23.380
<v Speaker 1>So

00:02:23.700 --> 00:02:26.740
<v Speaker 1>GitOps is a way of doing operations

00:02:27.814 --> 00:02:29.335
<v Speaker 1>through a Git repo.

00:02:30.375 --> 00:02:32.855
<v Speaker 1>You define your state there, and it's happening

00:02:32.855 --> 00:02:35.735
<v Speaker 1>by magic on your Kubernetes clusters.

00:02:37.095 --> 00:02:37.974
<v Speaker 1>That's the key.

00:02:39.510 --> 00:02:42.390
<v Speaker 0>So we store our declarative state and then

00:02:42.390 --> 00:02:43.430
<v Speaker 0>get repository

00:02:43.670 --> 00:02:46.549
<v Speaker 0>and it is magically applied to our customers

00:02:46.549 --> 00:02:48.709
<v Speaker 0>for us. And to do that, we need

00:02:48.709 --> 00:02:50.790
<v Speaker 0>tooling. And you've got quite a lot of

00:02:50.790 --> 00:02:53.430
<v Speaker 0>experience in providing the tooling that actually makes

00:02:53.430 --> 00:02:54.230
<v Speaker 0>us work. So

00:02:56.114 --> 00:02:56.995
<v Speaker 0>I guess the sorry.

00:02:57.795 --> 00:03:00.355
<v Speaker 0>On you go. Yeah. We we started, I

00:03:00.355 --> 00:03:02.515
<v Speaker 1>think, three years, four years ago

00:03:02.754 --> 00:03:03.635
<v Speaker 1>with

00:03:03.954 --> 00:03:04.835
<v Speaker 1>Flux

00:03:05.635 --> 00:03:08.675
<v Speaker 1>as a way to run a daemon

00:03:08.754 --> 00:03:09.954
<v Speaker 1>on on the cluster

00:03:11.230 --> 00:03:12.910
<v Speaker 1>that can be configured.

00:03:13.070 --> 00:03:15.470
<v Speaker 1>You tell the daemon, hey. There is my

00:03:15.470 --> 00:03:18.270
<v Speaker 1>Qt repo. Here is the authentication for it.

00:03:18.270 --> 00:03:19.950
<v Speaker 1>Whatever you find in there,

00:03:20.270 --> 00:03:22.990
<v Speaker 1>try and reconcile that particular state on the

00:03:22.990 --> 00:03:23.630
<v Speaker 1>cluster

00:03:24.270 --> 00:03:24.750
<v Speaker 1>and

00:03:25.495 --> 00:03:26.295
<v Speaker 1>follow,

00:03:27.335 --> 00:03:28.695
<v Speaker 1>any other change

00:03:28.935 --> 00:03:29.815
<v Speaker 1>and also,

00:03:30.055 --> 00:03:33.255
<v Speaker 1>do garbage collection. If someone deletes something from

00:03:33.255 --> 00:03:35.015
<v Speaker 1>from Git, you also delete it from the

00:03:35.015 --> 00:03:36.695
<v Speaker 1>cluster. So it's more about

00:03:37.015 --> 00:03:40.055
<v Speaker 1>it's like a proxy between your, Git changes

00:03:40.055 --> 00:03:43.750
<v Speaker 1>and what's happening, inside the cluster without you

00:03:43.750 --> 00:03:46.390
<v Speaker 1>having to directly connect to the cluster and

00:03:46.390 --> 00:03:49.990
<v Speaker 1>perform those changes manually from your laptop.

00:03:51.110 --> 00:03:52.470
<v Speaker 0>Excellent. So

00:03:52.630 --> 00:03:54.230
<v Speaker 0>like you said, you you've been working on

00:03:54.230 --> 00:03:56.465
<v Speaker 0>Flux for a number of years now. And

00:03:56.465 --> 00:03:58.385
<v Speaker 0>and we're now at a stage where there's

00:03:58.385 --> 00:04:02.145
<v Speaker 0>the GetOps toolkit and conversations around Fluxv two.

00:04:02.145 --> 00:04:03.745
<v Speaker 0>Can you maybe just explain

00:04:04.545 --> 00:04:07.105
<v Speaker 0>what the GetOps toolkit is and where Fluxv

00:04:07.105 --> 00:04:08.705
<v Speaker 0>two kind of commence to the picture as

00:04:08.705 --> 00:04:08.865
<v Speaker 0>well?

00:04:10.280 --> 00:04:12.920
<v Speaker 1>Yeah. So the the toolkit, like like the

00:04:12.920 --> 00:04:15.000
<v Speaker 1>name implies, is a collection of tools.

00:04:16.279 --> 00:04:19.639
<v Speaker 1>Flux version one was this monolith that you

00:04:19.639 --> 00:04:21.800
<v Speaker 1>deploy and does a bunch of things for

00:04:21.800 --> 00:04:21.959
<v Speaker 1>you.

00:04:22.935 --> 00:04:25.095
<v Speaker 1>So we took Flux apart. We break it

00:04:25.095 --> 00:04:27.175
<v Speaker 1>down into microservices,

00:04:27.735 --> 00:04:29.015
<v Speaker 1>and we

00:04:29.415 --> 00:04:32.615
<v Speaker 1>then we'll be assembling back Flux from this

00:04:32.615 --> 00:04:33.495
<v Speaker 1>microservice.

00:04:33.495 --> 00:04:37.815
<v Speaker 1>And these are these microservices are Kubernetes controllers

00:04:37.909 --> 00:04:39.990
<v Speaker 1>built with Kube Builder,

00:04:40.550 --> 00:04:43.830
<v Speaker 1>and the configuration part of your whole GitOps

00:04:43.830 --> 00:04:47.750
<v Speaker 1>pipeline is made through Kubernetes custom resources

00:04:48.069 --> 00:04:50.389
<v Speaker 1>unlike Flux v one, which would you would

00:04:50.389 --> 00:04:51.669
<v Speaker 1>configure it with

00:04:52.395 --> 00:04:55.595
<v Speaker 1>in your deployment spec with common flags for

00:04:55.595 --> 00:04:56.315
<v Speaker 1>Flux.

00:04:56.795 --> 00:04:59.435
<v Speaker 1>So it gives you more, you know, freedom

00:04:59.435 --> 00:05:01.115
<v Speaker 1>to do a bunch of stuff.

00:05:02.075 --> 00:05:02.715
<v Speaker 0>Okay.

00:05:03.035 --> 00:05:06.250
<v Speaker 0>What is the the status of GetOp's toolkit?

00:05:06.250 --> 00:05:08.170
<v Speaker 0>I think there's been a fair number of

00:05:08.170 --> 00:05:10.490
<v Speaker 0>releases over the last week. The last time

00:05:10.490 --> 00:05:12.810
<v Speaker 0>we spoke, you mentioned the API was stabilizing.

00:05:12.810 --> 00:05:14.250
<v Speaker 0>I mean, is it in a position where

00:05:14.250 --> 00:05:16.810
<v Speaker 0>people should now start to to pack GetOp's

00:05:16.810 --> 00:05:19.130
<v Speaker 0>toolkit over Flux v one, or should they

00:05:19.130 --> 00:05:19.930
<v Speaker 0>wait a little bit longer?

00:05:20.735 --> 00:05:21.615
<v Speaker 1>So we

00:05:21.935 --> 00:05:25.775
<v Speaker 1>we've started with with the toolkit experimental

00:05:25.775 --> 00:05:26.655
<v Speaker 1>things

00:05:27.215 --> 00:05:29.695
<v Speaker 1>around six or seven months ago,

00:05:32.014 --> 00:05:34.335
<v Speaker 1>and we we've published a road map on

00:05:34.335 --> 00:05:34.815
<v Speaker 1>the website.

00:05:35.700 --> 00:05:36.420
<v Speaker 1>We

00:05:37.140 --> 00:05:40.020
<v Speaker 1>broke the road map into three milestones. One

00:05:40.020 --> 00:05:43.220
<v Speaker 1>milestone is get on future parity with Helm

00:05:43.220 --> 00:05:45.940
<v Speaker 1>operator. Helm operator is the component that deals

00:05:45.940 --> 00:05:47.540
<v Speaker 1>with Helm in a creative way.

00:05:48.305 --> 00:05:49.745
<v Speaker 1>And for

00:05:50.145 --> 00:05:53.505
<v Speaker 1>for the Helm features, we are at 100%

00:05:53.505 --> 00:05:55.585
<v Speaker 1>feature parity, the GitOps Toolkit.

00:05:55.745 --> 00:05:57.905
<v Speaker 1>So for people that are using today Helm

00:05:57.905 --> 00:05:59.185
<v Speaker 1>operator, they could

00:05:59.905 --> 00:06:01.585
<v Speaker 1>switch to the Toolkit and

00:06:02.659 --> 00:06:05.460
<v Speaker 1>have the same the same features there and

00:06:05.460 --> 00:06:06.820
<v Speaker 1>many other features

00:06:07.220 --> 00:06:08.419
<v Speaker 1>on top of that.

00:06:09.139 --> 00:06:12.259
<v Speaker 1>Regarding to Flux, we with with split Flux

00:06:12.259 --> 00:06:15.060
<v Speaker 1>into two milestones. One is Fluxing read only

00:06:15.060 --> 00:06:17.555
<v Speaker 1>mode. What that means is

00:06:17.875 --> 00:06:20.675
<v Speaker 1>where Flux connects to a git repo with

00:06:20.675 --> 00:06:23.715
<v Speaker 1>a read only deploy key, so it will

00:06:23.715 --> 00:06:26.435
<v Speaker 1>not commit back, do not write anything to

00:06:26.435 --> 00:06:28.275
<v Speaker 1>it. It looks at it and applies it.

00:06:28.820 --> 00:06:29.380
<v Speaker 1>And

00:06:29.860 --> 00:06:31.620
<v Speaker 1>for this milestone, we are

00:06:32.900 --> 00:06:35.060
<v Speaker 1>with in future parity in the tool kit

00:06:35.060 --> 00:06:37.060
<v Speaker 1>so you can use it today to synchronize

00:06:37.060 --> 00:06:38.180
<v Speaker 1>your Git reports.

00:06:38.500 --> 00:06:40.980
<v Speaker 1>And Flux has a has a feature

00:06:40.980 --> 00:06:43.380
<v Speaker 1>where it can scan container registries,

00:06:44.104 --> 00:06:46.665
<v Speaker 1>find a new image tags that you've pushed

00:06:46.665 --> 00:06:49.865
<v Speaker 1>there, and write those back to to your

00:06:49.865 --> 00:06:52.025
<v Speaker 1>Git repo based on some policies. For example,

00:06:52.025 --> 00:06:54.905
<v Speaker 0>I don't sample range or or Git Shine

00:06:54.905 --> 00:06:55.625
<v Speaker 1>zone.

00:06:55.945 --> 00:06:58.970
<v Speaker 1>And that particular feature is still under development.

00:06:58.970 --> 00:07:01.210
<v Speaker 1>So if you are using Flux today and

00:07:01.210 --> 00:07:03.770
<v Speaker 1>you are relying on the write back mechanism,

00:07:03.770 --> 00:07:06.010
<v Speaker 1>the image update mechanism, you'll you'll have to

00:07:06.010 --> 00:07:08.330
<v Speaker 1>wait more, probably till the end of the

00:07:08.330 --> 00:07:10.730
<v Speaker 1>year when we get that out.

00:07:11.605 --> 00:07:12.565
<v Speaker 1>For

00:07:12.565 --> 00:07:14.645
<v Speaker 1>for the helm operations and

00:07:15.445 --> 00:07:16.805
<v Speaker 1>git synchronization,

00:07:17.605 --> 00:07:21.044
<v Speaker 1>the current toolkit API is is no longer

00:07:21.044 --> 00:07:21.845
<v Speaker 1>alpha.

00:07:21.925 --> 00:07:25.285
<v Speaker 1>We we've published the v one, beta one

00:07:25.604 --> 00:07:26.645
<v Speaker 1>release last week.

00:07:28.060 --> 00:07:30.620
<v Speaker 1>And, yeah, I'm thinking it's it's ready to

00:07:30.620 --> 00:07:31.180
<v Speaker 1>go

00:07:31.820 --> 00:07:32.700
<v Speaker 1>for sure.

00:07:33.260 --> 00:07:36.460
<v Speaker 0>Excellent. Well, I'm very excited for today.

00:07:36.700 --> 00:07:38.460
<v Speaker 0>I'm also not the only one. We have

00:07:38.460 --> 00:07:40.540
<v Speaker 0>a comment from Ilya who says he's very

00:07:40.540 --> 00:07:42.300
<v Speaker 0>excited about Flux v two and the GitOps

00:07:42.300 --> 00:07:43.525
<v Speaker 0>toolkit. So

00:07:43.845 --> 00:07:46.645
<v Speaker 0>we're all we're all we're all really happy.

00:07:46.645 --> 00:07:47.925
<v Speaker 0>We're looking to see this. We all wanna

00:07:47.925 --> 00:07:50.485
<v Speaker 0>start using it. So let's let's just share

00:07:50.485 --> 00:07:52.565
<v Speaker 0>my screen and walk through the process of

00:07:52.565 --> 00:07:54.245
<v Speaker 0>how people can start to use the GetOp

00:07:54.245 --> 00:07:54.965
<v Speaker 0>tool kit today.

00:07:55.800 --> 00:07:56.440
<v Speaker 0>Cool.

00:07:56.600 --> 00:07:59.000
<v Speaker 0>Alright. So but there we go.

00:07:59.560 --> 00:08:02.360
<v Speaker 0>So I've gone ahead and configured as little

00:08:02.360 --> 00:08:04.040
<v Speaker 0>as possible upfront.

00:08:04.040 --> 00:08:06.520
<v Speaker 0>Of course, we need a Kubernetes cluster. So

00:08:06.520 --> 00:08:08.600
<v Speaker 0>I spun up one using the cluster API

00:08:08.600 --> 00:08:10.919
<v Speaker 0>on Equinix metal and it is good to

00:08:10.919 --> 00:08:11.160
<v Speaker 0>go.

00:08:12.255 --> 00:08:14.495
<v Speaker 0>Let's run get nodes to make sure I

00:08:14.495 --> 00:08:16.895
<v Speaker 0>haven't broken anything in the last five minutes.

00:08:17.935 --> 00:08:18.735
<v Speaker 0>Excellent.

00:08:19.535 --> 00:08:21.295
<v Speaker 0>Now we have a couple of resources. You

00:08:21.295 --> 00:08:23.935
<v Speaker 0>have very kindly provided this guest, which I

00:08:23.935 --> 00:08:26.590
<v Speaker 0>will share on the YouTube show notes when

00:08:26.590 --> 00:08:27.870
<v Speaker 0>the episode is finished.

00:08:28.110 --> 00:08:30.110
<v Speaker 0>This is a rough kind of playbook of

00:08:30.110 --> 00:08:32.110
<v Speaker 0>the things we're gonna cover today.

00:08:32.669 --> 00:08:35.870
<v Speaker 0>And at your recommendation, I have also configured

00:08:35.870 --> 00:08:37.630
<v Speaker 0>a GitHub organization

00:08:37.710 --> 00:08:40.270
<v Speaker 0>that we're gonna try and use for today's

00:08:40.270 --> 00:08:40.669
<v Speaker 0>examples.

00:08:41.924 --> 00:08:43.045
<v Speaker 0>So do you wanna

00:08:43.924 --> 00:08:45.925
<v Speaker 0>just explain? I the first thing I see

00:08:45.925 --> 00:08:47.205
<v Speaker 0>here is the first command we have to

00:08:47.205 --> 00:08:49.765
<v Speaker 0>do is g o t k bootstrap and

00:08:49.765 --> 00:08:51.205
<v Speaker 0>then a whole bunch of parameters.

00:08:51.845 --> 00:08:54.245
<v Speaker 0>What is this command going to do to

00:08:54.245 --> 00:08:55.205
<v Speaker 0>my cluster?

00:08:57.110 --> 00:08:59.670
<v Speaker 1>So the toolkit is composed out of a

00:08:59.670 --> 00:09:00.630
<v Speaker 1>CLI

00:09:01.590 --> 00:09:03.670
<v Speaker 1>that you can use to install, to bootstrap,

00:09:03.670 --> 00:09:06.150
<v Speaker 1>to configure, to debug what's happening on your

00:09:06.150 --> 00:09:06.790
<v Speaker 1>cluster,

00:09:07.510 --> 00:09:08.070
<v Speaker 1>and

00:09:08.550 --> 00:09:09.910
<v Speaker 1>and a bunch of controllers,

00:09:10.175 --> 00:09:11.535
<v Speaker 1>each with its own,

00:09:13.454 --> 00:09:15.615
<v Speaker 1>you know, scope. For example, we have a

00:09:15.615 --> 00:09:19.214
<v Speaker 1>controller that deals with sources like Git repositories

00:09:19.214 --> 00:09:21.695
<v Speaker 1>or Helm repositories or even s three buckets.

00:09:21.695 --> 00:09:23.774
<v Speaker 1>So you can add sources, remove sources, and

00:09:23.774 --> 00:09:24.095
<v Speaker 1>so on.

00:09:25.210 --> 00:09:27.850
<v Speaker 1>And there are other controllers as well. The

00:09:27.850 --> 00:09:31.210
<v Speaker 1>bootstrap command, what it does, it takes

00:09:32.890 --> 00:09:35.770
<v Speaker 1>an owner, let's say, a GitHub organization. You

00:09:35.770 --> 00:09:38.250
<v Speaker 1>pass it to GitHub organization and a repository

00:09:38.250 --> 00:09:40.935
<v Speaker 1>name, and it creates that repository for you.

00:09:41.894 --> 00:09:44.935
<v Speaker 1>If you have, let's say, teams inside your

00:09:44.935 --> 00:09:47.415
<v Speaker 1>your GitHub org, you can also tell it

00:09:47.415 --> 00:09:49.975
<v Speaker 1>which team teams should have access to this

00:09:49.975 --> 00:09:52.774
<v Speaker 1>repo. The repo is created by default private.

00:09:52.774 --> 00:09:56.020
<v Speaker 1>You can also create the repo public.

00:09:56.340 --> 00:09:58.820
<v Speaker 1>And what what's happening there,

00:09:59.540 --> 00:10:02.500
<v Speaker 1>the CLI will create the repo, will will

00:10:02.500 --> 00:10:05.220
<v Speaker 1>push to the repo the the toolkit

00:10:05.380 --> 00:10:06.260
<v Speaker 1>definition,

00:10:06.260 --> 00:10:09.385
<v Speaker 1>like the deployments, the customer resource definitions, and

00:10:09.385 --> 00:10:10.025
<v Speaker 1>so on,

00:10:10.585 --> 00:10:12.825
<v Speaker 1>applies them on the cluster, then it configures

00:10:12.825 --> 00:10:14.665
<v Speaker 1>that this particular repository

00:10:14.665 --> 00:10:16.825
<v Speaker 1>to be the source of truth for your

00:10:16.825 --> 00:10:17.545
<v Speaker 1>cluster.

00:10:17.945 --> 00:10:18.505
<v Speaker 1>And

00:10:18.825 --> 00:10:21.705
<v Speaker 1>what that means, it creates a deploy key.

00:10:21.705 --> 00:10:23.910
<v Speaker 1>It sets up the deploy key in your

00:10:24.390 --> 00:10:26.870
<v Speaker 1>GitHub repo, and then it's it starts to

00:10:26.870 --> 00:10:30.310
<v Speaker 1>listen to whatever is happening on your main

00:10:30.310 --> 00:10:32.390
<v Speaker 1>branch. So every time you do a commit

00:10:32.390 --> 00:10:35.510
<v Speaker 1>there, you change something even even the toolkit

00:10:35.510 --> 00:10:38.365
<v Speaker 1>definitions itself. So if you, let's say, run

00:10:38.365 --> 00:10:40.685
<v Speaker 1>the bootstrap command once, then in a couple

00:10:40.685 --> 00:10:42.045
<v Speaker 1>of weeks, you run it again,

00:10:42.365 --> 00:10:44.524
<v Speaker 1>it will not create a new repo. It

00:10:44.524 --> 00:10:46.285
<v Speaker 1>will see, okay, the repo is there, but

00:10:46.285 --> 00:10:48.285
<v Speaker 1>maybe the toolkit components

00:10:48.925 --> 00:10:50.685
<v Speaker 1>have advanced. When you version, it will do

00:10:50.685 --> 00:10:52.590
<v Speaker 1>an upgrade. And how it does the upgrade,

00:10:52.590 --> 00:10:54.910
<v Speaker 1>it just modifies the YAML inside your repo

00:10:54.910 --> 00:10:57.950
<v Speaker 1>and the toolkit itself upgrades it. It it

00:10:57.950 --> 00:11:00.030
<v Speaker 1>upgrades itself on the cluster.

00:11:00.430 --> 00:11:02.270
<v Speaker 0>Ah, very cool. That's about it.

00:11:02.670 --> 00:11:04.030
<v Speaker 0>Alright. So let's

00:11:04.415 --> 00:11:06.655
<v Speaker 0>let's just grab this command then.

00:11:08.095 --> 00:11:08.895
<v Speaker 0>And

00:11:10.015 --> 00:11:12.415
<v Speaker 0>I just need to make a few changes.

00:11:12.415 --> 00:11:13.935
<v Speaker 0>So my organization

00:11:15.055 --> 00:11:16.415
<v Speaker 0>is Rawkode

00:11:16.415 --> 00:11:17.695
<v Speaker 0>does get ops.

00:11:20.100 --> 00:11:21.700
<v Speaker 0>And I can just get this

00:11:22.900 --> 00:11:24.500
<v Speaker 0>any name, and this is gonna be created

00:11:24.500 --> 00:11:26.260
<v Speaker 0>for me. Right? That's Yeah.

00:11:26.740 --> 00:11:28.660
<v Speaker 0>I that go ahead and create a team

00:11:28.660 --> 00:11:30.580
<v Speaker 0>dev. So maybe we can talk about that

00:11:30.580 --> 00:11:32.660
<v Speaker 0>feature in a moment. And then the path

00:11:32.660 --> 00:11:34.020
<v Speaker 0>I'm assuming is

00:11:35.275 --> 00:11:37.115
<v Speaker 0>where it's gonna store a manifest in the

00:11:37.115 --> 00:11:37.915
<v Speaker 0>repository?

00:11:38.555 --> 00:11:41.275
<v Speaker 1>Yeah. So the the repository

00:11:41.675 --> 00:11:44.475
<v Speaker 1>created by Bootstrap is meant to be used

00:11:44.635 --> 00:11:47.195
<v Speaker 1>for your whole feed of clusters, not not

00:11:47.195 --> 00:11:49.275
<v Speaker 1>just one. So you can,

00:11:50.760 --> 00:11:53.399
<v Speaker 1>using the path, you'll say, hey. This particular

00:11:53.399 --> 00:11:55.800
<v Speaker 1>instance is for that path, and you can

00:11:55.800 --> 00:11:58.680
<v Speaker 1>use the cluster name for it. One one

00:11:58.680 --> 00:12:00.600
<v Speaker 1>use case for that is you may want

00:12:00.600 --> 00:12:03.495
<v Speaker 1>to test the toolkit upgrade on your staging

00:12:03.495 --> 00:12:06.135
<v Speaker 1>cluster before upgrading your production cluster and so

00:12:06.135 --> 00:12:09.175
<v Speaker 1>on. So the definitions are stored for each

00:12:09.175 --> 00:12:09.895
<v Speaker 1>cluster

00:12:10.135 --> 00:12:11.095
<v Speaker 1>separately.

00:12:12.615 --> 00:12:14.775
<v Speaker 0>Okay. Well, I like to live life on

00:12:14.775 --> 00:12:16.615
<v Speaker 0>the edge, so we'll call this my production

00:12:16.615 --> 00:12:17.015
<v Speaker 0>cluster.

00:12:17.800 --> 00:12:18.760
<v Speaker 0>And

00:12:21.160 --> 00:12:21.960
<v Speaker 0>return.

00:12:23.560 --> 00:12:25.880
<v Speaker 0>Oh, I got bad credentials already.

00:12:28.200 --> 00:12:29.080
<v Speaker 1>Bad credentials.

00:12:30.295 --> 00:12:31.815
<v Speaker 1>You need the

00:12:32.215 --> 00:12:34.135
<v Speaker 1>github underscore token

00:12:34.615 --> 00:12:35.495
<v Speaker 1>environment

00:12:35.815 --> 00:12:37.095
<v Speaker 1>variable set

00:12:37.175 --> 00:12:39.095
<v Speaker 1>before you I will quickly move that off

00:12:39.095 --> 00:12:40.135
<v Speaker 0>screen and check.

00:12:44.130 --> 00:12:46.209
<v Speaker 0>I have underscore token. Right?

00:12:46.690 --> 00:12:47.490
<v Speaker 1>Yep.

00:12:48.130 --> 00:12:49.970
<v Speaker 0>It's got a space in it.

00:12:53.490 --> 00:12:54.769
<v Speaker 0>Alright. Let's fix that.

00:12:55.505 --> 00:12:56.785
<v Speaker 0>Well, I wouldn't have thought that would have

00:12:56.785 --> 00:12:57.904
<v Speaker 0>caused the problem.

00:13:02.225 --> 00:13:03.904
<v Speaker 0>Put loads of text on my screen so

00:13:03.904 --> 00:13:05.265
<v Speaker 0>that when I move it back

00:13:06.065 --> 00:13:08.464
<v Speaker 0>yep. We don't reveal my token. Alright. I'm

00:13:08.464 --> 00:13:09.505
<v Speaker 0>gonna try that again.

00:13:15.740 --> 00:13:16.779
<v Speaker 0>There we go.

00:13:20.540 --> 00:13:23.100
<v Speaker 0>So We've got repository created.

00:13:23.500 --> 00:13:23.819
<v Speaker 0>It

00:13:24.380 --> 00:13:26.615
<v Speaker 0>oh, it's a wave of the world now.

00:13:26.615 --> 00:13:28.855
<v Speaker 0>Okay. It's created oh, no. It's at grant

00:13:28.935 --> 00:13:29.895
<v Speaker 0>anti granted

00:13:30.215 --> 00:13:31.975
<v Speaker 0>access to the dev team,

00:13:32.215 --> 00:13:33.735
<v Speaker 0>clone the repository,

00:13:33.975 --> 00:13:37.895
<v Speaker 0>generating some manifest, and then provisioning itself within

00:13:37.895 --> 00:13:38.455
<v Speaker 0>the cluster.

00:13:41.950 --> 00:13:43.550
<v Speaker 0>It's doing a lot for me. I don't

00:13:43.550 --> 00:13:45.070
<v Speaker 0>really need to do anything. Right? It just

00:13:46.590 --> 00:13:48.990
<v Speaker 1>Yeah. We with Flux, we've we've seen people

00:13:48.990 --> 00:13:51.710
<v Speaker 1>struggling with with the configuration.

00:13:52.030 --> 00:13:55.235
<v Speaker 1>So we said, okay. Let's use the GitHub

00:13:55.235 --> 00:13:58.675
<v Speaker 1>and GitLab APIs so we can streamline the

00:13:58.675 --> 00:14:00.995
<v Speaker 1>whole process with a with a single command.

00:14:01.475 --> 00:14:03.795
<v Speaker 1>We are looking at, I don't

00:14:04.355 --> 00:14:07.155
<v Speaker 1>people that have experience with Bitbucket. If you

00:14:07.155 --> 00:14:09.155
<v Speaker 1>know Bitbucket, if you are using it and

00:14:09.155 --> 00:14:12.020
<v Speaker 1>you are familiar with with Go,

00:14:12.900 --> 00:14:14.580
<v Speaker 1>yeah, we are looking for someone to help

00:14:14.580 --> 00:14:15.140
<v Speaker 1>us

00:14:15.940 --> 00:14:17.300
<v Speaker 1>add Bitbucket

00:14:17.300 --> 00:14:19.300
<v Speaker 1>implementation to the bootstrap command.

00:14:19.540 --> 00:14:20.180
<v Speaker 1>Now

00:14:20.580 --> 00:14:22.580
<v Speaker 1>maybe you are not running on any of

00:14:22.580 --> 00:14:23.765
<v Speaker 1>those SaaS

00:14:24.005 --> 00:14:26.645
<v Speaker 1>Git providers. So we we also have

00:14:26.965 --> 00:14:29.205
<v Speaker 1>instructions on how you can do the whole

00:14:29.205 --> 00:14:30.325
<v Speaker 1>thing manually.

00:14:30.805 --> 00:14:33.285
<v Speaker 1>You create the Git repo on your own,

00:14:33.285 --> 00:14:35.525
<v Speaker 1>then you generate the manifest, you push them,

00:14:35.525 --> 00:14:36.725
<v Speaker 1>and you set up the deploy key.

00:14:38.810 --> 00:14:40.970
<v Speaker 1>But, yeah, the boost rep command also

00:14:41.529 --> 00:14:42.410
<v Speaker 1>does a

00:14:43.290 --> 00:14:46.410
<v Speaker 1>sanity check of what's installed. So it it

00:14:46.410 --> 00:14:48.170
<v Speaker 1>checked all the controllers.

00:14:48.170 --> 00:14:50.810
<v Speaker 1>If you do, for example, kubectl

00:14:51.235 --> 00:14:52.515
<v Speaker 1>minus n

00:14:53.235 --> 00:14:54.755
<v Speaker 1>g o t k system,

00:14:56.115 --> 00:14:57.315
<v Speaker 1>get pods,

00:15:00.515 --> 00:15:02.035
<v Speaker 1>we'll see we have

00:15:02.595 --> 00:15:04.435
<v Speaker 1>four controllers here.

00:15:04.515 --> 00:15:05.235
<v Speaker 1>So

00:15:05.870 --> 00:15:08.510
<v Speaker 1>the source controller is the one that pulls

00:15:08.510 --> 00:15:11.230
<v Speaker 1>data from Git, Helm repositories,

00:15:11.230 --> 00:15:12.910
<v Speaker 1>s three buckets, and so on.

00:15:13.870 --> 00:15:16.190
<v Speaker 1>The notification controller is

00:15:16.670 --> 00:15:18.430
<v Speaker 1>a daemon that can listen

00:15:18.675 --> 00:15:20.755
<v Speaker 1>can listen to webhooks from

00:15:21.154 --> 00:15:24.755
<v Speaker 1>GitHub or GitLab or Jenkins or whatever.

00:15:25.075 --> 00:15:26.355
<v Speaker 1>So it can trigger

00:15:26.515 --> 00:15:29.235
<v Speaker 1>instant reconciliation inside your cluster.

00:15:29.475 --> 00:15:30.355
<v Speaker 1>It also

00:15:30.595 --> 00:15:32.035
<v Speaker 1>pushes notifications

00:15:32.630 --> 00:15:35.430
<v Speaker 1>from your cluster to, let's say, Slack, Microsoft

00:15:35.430 --> 00:15:38.550
<v Speaker 1>Teams, Rocket, and and other chat systems.

00:15:39.670 --> 00:15:40.870
<v Speaker 1>The customized

00:15:40.870 --> 00:15:41.750
<v Speaker 1>controller,

00:15:42.470 --> 00:15:46.390
<v Speaker 1>it's a controller that can work with customizations

00:15:46.390 --> 00:15:49.055
<v Speaker 1>or with plain YAML. So it applies that

00:15:49.055 --> 00:15:51.615
<v Speaker 1>on your cluster, does garbage collection for you,

00:15:51.855 --> 00:15:54.415
<v Speaker 1>health checking, and all sorts of things. And

00:15:54.415 --> 00:15:56.975
<v Speaker 1>health controller does the same stuff but for

00:15:56.975 --> 00:15:58.015
<v Speaker 1>health charts.

00:15:58.815 --> 00:15:59.775
<v Speaker 1>And that's

00:16:00.575 --> 00:16:01.775
<v Speaker 1>that's the toolkit.

00:16:02.655 --> 00:16:03.055
<v Speaker 0>Awesome.

00:16:03.639 --> 00:16:05.399
<v Speaker 0>So we got four controllers.

00:16:06.199 --> 00:16:08.040
<v Speaker 0>The notification controller,

00:16:08.199 --> 00:16:10.680
<v Speaker 0>immediately, is kind of interesting to me. So

00:16:10.680 --> 00:16:12.519
<v Speaker 0>it could push notifications to say that it's

00:16:12.519 --> 00:16:14.600
<v Speaker 0>updated something within the cluster. That was one

00:16:14.600 --> 00:16:16.360
<v Speaker 0>aspect of it. So that part was

00:16:16.904 --> 00:16:19.625
<v Speaker 0>it can lessen for web hooks coming from

00:16:19.625 --> 00:16:20.584
<v Speaker 0>GitHub,

00:16:20.584 --> 00:16:23.225
<v Speaker 0>GitLab, etcetera. So does it configure any of

00:16:23.225 --> 00:16:25.225
<v Speaker 0>those web hooks for me to push to

00:16:25.225 --> 00:16:26.985
<v Speaker 0>my cluster? Is that something that I need

00:16:26.985 --> 00:16:28.425
<v Speaker 0>to go ahead and and manually set up?

00:16:29.399 --> 00:16:32.680
<v Speaker 1>So there are a couple of custom resources,

00:16:33.399 --> 00:16:34.360
<v Speaker 1>which you

00:16:34.520 --> 00:16:36.040
<v Speaker 1>can use to configure,

00:16:36.200 --> 00:16:39.240
<v Speaker 1>things. One custom resource is called the receiver.

00:16:39.399 --> 00:16:41.399
<v Speaker 1>So it can create a receiver of type

00:16:41.399 --> 00:16:42.040
<v Speaker 1>GitHub,

00:16:42.774 --> 00:16:45.575
<v Speaker 1>and need to generate a unique URL that

00:16:45.575 --> 00:16:48.215
<v Speaker 1>you can use in your GitHub webhooks.

00:16:48.375 --> 00:16:51.095
<v Speaker 1>And it also gives you a secret

00:16:51.654 --> 00:16:52.935
<v Speaker 1>to check that

00:16:53.334 --> 00:16:57.015
<v Speaker 1>GitHub is really sending all those notifications

00:16:57.560 --> 00:16:58.279
<v Speaker 1>for

00:16:58.440 --> 00:17:00.200
<v Speaker 1>GitLab the same and so on.

00:17:01.160 --> 00:17:03.320
<v Speaker 1>So that's the receiver part when you can

00:17:03.320 --> 00:17:05.640
<v Speaker 1>define these kind of receivers and, you know,

00:17:05.640 --> 00:17:07.799
<v Speaker 1>you can suspend them, you can delete them,

00:17:07.799 --> 00:17:09.960
<v Speaker 1>and so on. And you can also create

00:17:09.960 --> 00:17:10.760
<v Speaker 1>alerts

00:17:11.265 --> 00:17:14.224
<v Speaker 1>for different providers. You can add, for example,

00:17:14.224 --> 00:17:15.424
<v Speaker 1>your Slack

00:17:16.224 --> 00:17:19.345
<v Speaker 1>channel there with API token, then you create

00:17:19.345 --> 00:17:21.424
<v Speaker 1>an alert and say, hey. If my,

00:17:21.585 --> 00:17:22.304
<v Speaker 1>I don't know,

00:17:22.705 --> 00:17:24.305
<v Speaker 1>my ContourHem

00:17:24.305 --> 00:17:25.345
<v Speaker 1>release is failing,

00:17:26.210 --> 00:17:29.409
<v Speaker 1>post the error message to this Slack channel

00:17:29.730 --> 00:17:31.650
<v Speaker 1>and so on. So there are custom resources

00:17:31.650 --> 00:17:34.529
<v Speaker 1>which you can define receivers and alerts.

00:17:35.170 --> 00:17:36.210
<v Speaker 0>Okay. Perfect.

00:17:37.570 --> 00:17:39.970
<v Speaker 0>So if we take a look at

00:17:40.875 --> 00:17:44.635
<v Speaker 0>my organization here, I'm curious about what's happened

00:17:44.635 --> 00:17:46.395
<v Speaker 0>on the GitHub side of this API then.

00:17:46.395 --> 00:17:48.635
<v Speaker 0>So we have this new repository here.

00:17:50.715 --> 00:17:53.595
<v Speaker 0>Okay. So it's created a directory with

00:17:53.755 --> 00:17:55.035
<v Speaker 0>the path that we provided.

00:17:57.460 --> 00:17:59.460
<v Speaker 0>And this is the YAML

00:17:59.460 --> 00:18:01.220
<v Speaker 0>for deploying itself.

00:18:01.620 --> 00:18:02.259
<v Speaker 1>Yeah.

00:18:02.900 --> 00:18:03.539
<v Speaker 0>Okay.

00:18:03.779 --> 00:18:07.220
<v Speaker 1>So if we look at the toolkit source.YAML

00:18:08.260 --> 00:18:08.740
<v Speaker 0>Yep.

00:18:09.235 --> 00:18:10.835
<v Speaker 1>Can you make that bigger?

00:18:11.075 --> 00:18:11.955
<v Speaker 1>I can.

00:18:12.434 --> 00:18:13.394
<v Speaker 0>There we go.

00:18:14.115 --> 00:18:15.154
<v Speaker 1>Yeah. So

00:18:15.395 --> 00:18:16.434
<v Speaker 1>this is how

00:18:17.235 --> 00:18:18.754
<v Speaker 1>a source gets

00:18:18.835 --> 00:18:20.354
<v Speaker 1>added on the cluster.

00:18:20.595 --> 00:18:22.755
<v Speaker 1>You give it the URL. In this case,

00:18:22.755 --> 00:18:25.440
<v Speaker 1>it's it's an SSH. It created already a

00:18:25.440 --> 00:18:29.440
<v Speaker 1>secret that contains the SSH public and private

00:18:29.440 --> 00:18:31.200
<v Speaker 1>and known host keys.

00:18:31.760 --> 00:18:34.800
<v Speaker 1>And using that particular secret, it now it

00:18:34.800 --> 00:18:38.000
<v Speaker 1>monitors the main branch of that URL.

00:18:39.185 --> 00:18:39.985
<v Speaker 0>Okay.

00:18:41.505 --> 00:18:43.585
<v Speaker 0>So every one minute, it's gonna check for

00:18:43.585 --> 00:18:45.825
<v Speaker 0>changes to that repository and then just apply

00:18:45.825 --> 00:18:46.945
<v Speaker 0>them to my cluster?

00:18:47.825 --> 00:18:50.544
<v Speaker 1>This particular object only pulls the

00:18:50.945 --> 00:18:53.185
<v Speaker 0>Oh, okay. Repo on the cluster. There is

00:18:53.185 --> 00:18:54.625
<v Speaker 1>a different object

00:18:55.450 --> 00:18:56.409
<v Speaker 1>customization.

00:18:58.169 --> 00:19:01.210
<v Speaker 1>And the customization object says, hey. From this

00:19:01.210 --> 00:19:01.929
<v Speaker 1>source,

00:19:02.490 --> 00:19:02.889
<v Speaker 1>name,

00:19:03.529 --> 00:19:04.889
<v Speaker 1>geo t k system,

00:19:05.529 --> 00:19:08.090
<v Speaker 1>apply the production path on the cluster.

00:19:08.915 --> 00:19:12.434
<v Speaker 1>And prune true means if you delete something

00:19:12.434 --> 00:19:15.315
<v Speaker 1>from inside the production directory, it will also

00:19:15.315 --> 00:19:17.715
<v Speaker 1>be deleted from from the cluster. So this

00:19:17.715 --> 00:19:20.835
<v Speaker 1>enable this this enables garbage collection, and this

00:19:20.835 --> 00:19:23.155
<v Speaker 1>is applied every ten sec ten minutes.

00:19:25.730 --> 00:19:26.530
<v Speaker 0>Okay.

00:19:26.530 --> 00:19:29.090
<v Speaker 0>So let me clarify those two intervals then.

00:19:29.090 --> 00:19:32.050
<v Speaker 0>Our get repository CRD is pulling changes every

00:19:32.050 --> 00:19:32.929
<v Speaker 0>one minute,

00:19:33.250 --> 00:19:35.970
<v Speaker 0>but the actual application of those changes is

00:19:35.970 --> 00:19:38.205
<v Speaker 0>on a ten minute schedule. Does that just

00:19:38.205 --> 00:19:40.205
<v Speaker 0>mean that if I push something to the

00:19:40.205 --> 00:19:43.085
<v Speaker 0>cluster multiple times before the ten minute starts,

00:19:43.085 --> 00:19:45.164
<v Speaker 0>the those all gonna apply to once?

00:19:46.684 --> 00:19:47.965
<v Speaker 0>No. No.

00:19:49.485 --> 00:19:50.205
<v Speaker 1>So

00:19:51.400 --> 00:19:54.120
<v Speaker 1>this interval here for the customization ten minutes,

00:19:54.120 --> 00:19:56.039
<v Speaker 1>what it does, it it applies

00:19:56.120 --> 00:19:58.440
<v Speaker 1>what what is found in the in the

00:19:58.440 --> 00:20:01.000
<v Speaker 1>repo at that particular path every ten minutes.

00:20:01.000 --> 00:20:03.720
<v Speaker 1>What that means is, let's say, goes into

00:20:03.720 --> 00:20:04.280
<v Speaker 1>the cluster,

00:20:05.585 --> 00:20:08.065
<v Speaker 1>has access to the cluster, modify something.

00:20:08.465 --> 00:20:10.865
<v Speaker 1>In a maximum of ten minutes, that modification

00:20:10.865 --> 00:20:12.625
<v Speaker 1>will be undone.

00:20:13.665 --> 00:20:15.825
<v Speaker 1>If it modify something in a toolkit itself,

00:20:15.825 --> 00:20:17.745
<v Speaker 1>let's say, it it configures,

00:20:17.745 --> 00:20:19.505
<v Speaker 1>it changes, I don't the limits,

00:20:19.990 --> 00:20:22.549
<v Speaker 1>those kind of changes will be unknown.

00:20:22.630 --> 00:20:24.950
<v Speaker 1>But if you push something to the repo,

00:20:25.350 --> 00:20:27.269
<v Speaker 1>in one minute, the source control will detect

00:20:27.269 --> 00:20:29.510
<v Speaker 1>that there is a change. And through Kubernetes

00:20:29.510 --> 00:20:32.390
<v Speaker 1>events, it notifies the customized control, hey. There

00:20:32.390 --> 00:20:34.149
<v Speaker 1>is a change. Don't wait ten minutes to

00:20:34.149 --> 00:20:35.190
<v Speaker 1>apply. Apply it now.

00:20:35.985 --> 00:20:37.905
<v Speaker 1>And if you are using a webhook, then

00:20:37.905 --> 00:20:39.825
<v Speaker 1>you don't even have to wait that one

00:20:39.825 --> 00:20:42.865
<v Speaker 1>minute because the webhook will issue Kubernetes event

00:20:42.865 --> 00:20:45.505
<v Speaker 1>source controller and say, hey. This webhook is

00:20:45.505 --> 00:20:47.345
<v Speaker 1>telling me there is a new there is

00:20:47.345 --> 00:20:48.705
<v Speaker 1>a new commit on the Git. Let me

00:20:48.705 --> 00:20:51.039
<v Speaker 1>pull it. If there is a change, then

00:20:51.039 --> 00:20:53.200
<v Speaker 1>it notifies the other controller, the other controller

00:20:53.200 --> 00:20:54.719
<v Speaker 1>will do the reconciliation.

00:20:55.440 --> 00:20:58.559
<v Speaker 1>So Okay. The difference between Flux and a

00:20:58.559 --> 00:21:00.159
<v Speaker 1>toolkit, the toolkit is is

00:21:00.639 --> 00:21:01.440
<v Speaker 1>reacts

00:21:01.440 --> 00:21:04.000
<v Speaker 1>to Kubernetes events. So it's also a reactive

00:21:03.705 --> 00:21:06.664
<v Speaker 1>system, not only a pool based system where

00:21:07.304 --> 00:21:10.984
<v Speaker 1>it does things only at a strict interval.

00:21:12.585 --> 00:21:15.385
<v Speaker 0>Got it. Okay. So the get repository interval

00:21:15.900 --> 00:21:17.500
<v Speaker 0>applies all the changes

00:21:17.580 --> 00:21:20.060
<v Speaker 0>on that schedule, and then this interval on

00:21:20.060 --> 00:21:22.620
<v Speaker 0>the customization is just really about fixing stuff

00:21:22.620 --> 00:21:25.500
<v Speaker 0>that people modify it manually. So I'm assuming

00:21:25.500 --> 00:21:26.140
<v Speaker 0>if

00:21:26.300 --> 00:21:28.780
<v Speaker 0>something extremely bad happened to my cluster and

00:21:28.780 --> 00:21:30.780
<v Speaker 0>I was making changes, I'd probably wanna change

00:21:30.780 --> 00:21:32.955
<v Speaker 0>that interval to be a bit more forgiving,

00:21:32.955 --> 00:21:33.515
<v Speaker 0>I guess.

00:21:35.675 --> 00:21:36.315
<v Speaker 1>No.

00:21:37.115 --> 00:21:39.595
<v Speaker 1>If you are dealing with an incident, you

00:21:39.595 --> 00:21:40.955
<v Speaker 1>probably want

00:21:42.155 --> 00:21:44.955
<v Speaker 1>to suspend this particular customization.

00:21:45.115 --> 00:21:47.995
<v Speaker 1>And there is a command for that. It's

00:21:47.010 --> 00:21:49.970
<v Speaker 1>GOTK suspend customization and name of the customization.

00:21:49.970 --> 00:21:52.370
<v Speaker 1>And what it does like a Kubernetes cron

00:21:52.370 --> 00:21:55.570
<v Speaker 1>job, it will never reconcile from that moment

00:21:55.570 --> 00:21:57.170
<v Speaker 1>on. So you can do whatever you want

00:21:57.170 --> 00:21:59.890
<v Speaker 1>on the cluster, fix it, then move your

00:21:59.890 --> 00:22:01.890
<v Speaker 1>changes into Git, commit those changes,

00:22:02.415 --> 00:22:05.615
<v Speaker 1>then resume the customization, and everything will be,

00:22:06.095 --> 00:22:07.215
<v Speaker 1>back to normal.

00:22:07.455 --> 00:22:08.495
<v Speaker 1>But in

00:22:08.575 --> 00:22:11.135
<v Speaker 1>the past, what people were doing were,

00:22:11.535 --> 00:22:13.295
<v Speaker 1>scaling to zero Flux.

00:22:13.775 --> 00:22:15.055
<v Speaker 1>We do not fight with you.

00:22:16.150 --> 00:22:17.429
<v Speaker 1>The the

00:22:18.390 --> 00:22:20.149
<v Speaker 1>thing that we've improved here,

00:22:20.790 --> 00:22:23.429
<v Speaker 1>maybe you have different things reconciling on your

00:22:23.429 --> 00:22:25.830
<v Speaker 1>cluster. Maybe you have optimization for your apps

00:22:25.830 --> 00:22:27.990
<v Speaker 1>and another optimization for your databases.

00:22:28.684 --> 00:22:31.325
<v Speaker 1>But if the incident is only affecting the

00:22:31.325 --> 00:22:32.924
<v Speaker 1>apps deployments,

00:22:33.165 --> 00:22:36.205
<v Speaker 1>then you shouldn't be stopping everything. Your whole

00:22:36.205 --> 00:22:38.525
<v Speaker 1>GitOps pipelines on on the cluster. Maybe you

00:22:38.525 --> 00:22:41.485
<v Speaker 1>want to stop that particular thing where where

00:22:41.485 --> 00:22:43.325
<v Speaker 1>the incident is happening. So

00:22:43.730 --> 00:22:46.130
<v Speaker 1>that's we don't have to scale to zero

00:22:46.130 --> 00:22:47.169
<v Speaker 1>anymore or anything.

00:22:48.130 --> 00:22:50.530
<v Speaker 0>Okay. So can we just type that command

00:22:50.530 --> 00:22:52.290
<v Speaker 0>here? Like, if I run g o t

00:22:52.290 --> 00:22:54.610
<v Speaker 0>k suspend

00:22:56.065 --> 00:22:57.345
<v Speaker 0>customization.

00:22:57.585 --> 00:22:59.585
<v Speaker 0>I'm just gonna keep following the docs assuming

00:22:59.585 --> 00:23:02.225
<v Speaker 0>I know what I'm doing here. And the

00:23:02.225 --> 00:23:03.825
<v Speaker 0>name of the resources

00:23:06.065 --> 00:23:07.905
<v Speaker 1>GOTK system is the name of them.

00:23:09.960 --> 00:23:12.279
<v Speaker 0>But that's no longer gonna get any updates.

00:23:12.760 --> 00:23:15.640
<v Speaker 0>That's it. That's nice. Okay. And

00:23:15.640 --> 00:23:17.559
<v Speaker 0>I can just I'm assuming change this to

00:23:17.559 --> 00:23:18.120
<v Speaker 0>resume.

00:23:24.304 --> 00:23:25.184
<v Speaker 0>Awesome.

00:23:25.825 --> 00:23:28.145
<v Speaker 0>Cool. I was I was if they tell

00:23:28.145 --> 00:23:29.184
<v Speaker 1>you what

00:23:29.905 --> 00:23:32.225
<v Speaker 1>revision it has applied. So it's the main

00:23:32.225 --> 00:23:34.304
<v Speaker 1>branch and that particular commit.

00:23:35.985 --> 00:23:38.144
<v Speaker 0>Okay. So I feel like then

00:23:38.304 --> 00:23:40.065
<v Speaker 0>we should deploy something

00:23:40.840 --> 00:23:42.200
<v Speaker 0>to our system.

00:23:42.440 --> 00:23:44.200
<v Speaker 1>Yeah. Good to hear.

00:23:45.080 --> 00:23:46.519
<v Speaker 0>So let's see.

00:23:47.240 --> 00:23:49.719
<v Speaker 0>Now what do you recommend?

00:23:52.120 --> 00:23:54.840
<v Speaker 0>So I'm sure I've seen that it cloned

00:23:54.225 --> 00:23:56.304
<v Speaker 0>something earlier or did I clone it and

00:23:56.304 --> 00:23:58.465
<v Speaker 0>the cluster size? I need to clone my

00:23:59.025 --> 00:24:00.145
<v Speaker 0>best repository.

00:24:00.145 --> 00:24:01.424
<v Speaker 0>Okay. Got it. Yeah.

00:24:14.600 --> 00:24:16.920
<v Speaker 0>Get ops, and let's open this up.

00:24:22.455 --> 00:24:23.255
<v Speaker 0>So

00:24:24.615 --> 00:24:26.934
<v Speaker 0>would I add a new directory here?

00:24:27.815 --> 00:24:28.855
<v Speaker 1>Yep. You can

00:24:29.975 --> 00:24:32.295
<v Speaker 1>from this moment on, you can organize however

00:24:32.295 --> 00:24:33.655
<v Speaker 1>you want your repo.

00:24:33.975 --> 00:24:36.460
<v Speaker 1>The toolkit is not in any way how

00:24:36.460 --> 00:24:37.259
<v Speaker 1>you want to

00:24:38.059 --> 00:24:38.940
<v Speaker 1>configure it.

00:24:39.660 --> 00:24:41.419
<v Speaker 1>The idea is if you want to target

00:24:41.419 --> 00:24:43.659
<v Speaker 1>your production cluster in this case,

00:24:44.059 --> 00:24:46.700
<v Speaker 1>all the definitions should be in in that

00:24:46.860 --> 00:24:49.100
<v Speaker 1>inside that directory. And you can use customized

00:24:49.100 --> 00:24:51.685
<v Speaker 1>overlays, hand releases, whatever you want.

00:24:53.205 --> 00:24:56.005
<v Speaker 0>Okay. Let's start nice and simple then.

00:24:58.245 --> 00:24:59.365
<v Speaker 0>And let's do

00:25:00.805 --> 00:25:01.765
<v Speaker 0>NGINX

00:25:06.600 --> 00:25:07.399
<v Speaker 0>Port.

00:25:08.120 --> 00:25:10.040
<v Speaker 0>Itty. Now I'm not gonna add a service

00:25:10.040 --> 00:25:12.440
<v Speaker 0>or anything. Let's just I just wanna apply

00:25:12.440 --> 00:25:13.960
<v Speaker 0>this as it is, and then we'll see

00:25:13.960 --> 00:25:15.880
<v Speaker 0>that relate to the cluster and then maybe

00:25:15.880 --> 00:25:18.040
<v Speaker 0>make a small revision or something. So

00:25:21.115 --> 00:25:23.195
<v Speaker 0>I would just they get add

00:25:25.355 --> 00:25:27.195
<v Speaker 0>million dollar application,

00:25:29.755 --> 00:25:32.075
<v Speaker 0>and then I just push this up to

00:25:32.075 --> 00:25:33.675
<v Speaker 0>my cluster up to GitHub,

00:25:35.220 --> 00:25:37.059
<v Speaker 0>and we wait

00:25:37.460 --> 00:25:38.419
<v Speaker 0>one minute.

00:25:38.820 --> 00:25:41.620
<v Speaker 1>Yeah. So we either wait one minute or

00:25:41.620 --> 00:25:42.820
<v Speaker 1>we can say,

00:25:43.299 --> 00:25:45.779
<v Speaker 1>g o t k source git

00:25:46.340 --> 00:25:48.580
<v Speaker 1>g o t k reconcile source git

00:25:51.895 --> 00:25:55.095
<v Speaker 1>source Git, and that's GOTK minus system.

00:26:02.510 --> 00:26:03.789
<v Speaker 0>I need to do it from this directory

00:26:03.789 --> 00:26:05.709
<v Speaker 0>because that's where my Kube config is.

00:26:06.110 --> 00:26:08.029
<v Speaker 0>Oh, do think it reconcile

00:26:08.590 --> 00:26:12.029
<v Speaker 0>source get POT? Reconcile.

00:26:12.909 --> 00:26:14.830
<v Speaker 1>Yeah. Type in is not my strong suit,

00:26:14.830 --> 00:26:16.909
<v Speaker 0>especially when I'm being watched. There we go.

00:26:18.645 --> 00:26:20.085
<v Speaker 0>So this is now

00:26:22.405 --> 00:26:23.125
<v Speaker 0>updated

00:26:23.365 --> 00:26:25.205
<v Speaker 0>everything inside of the cluster.

00:26:25.525 --> 00:26:27.845
<v Speaker 0>So if I run get pods

00:26:30.340 --> 00:26:31.220
<v Speaker 0>there we go.

00:26:31.540 --> 00:26:33.460
<v Speaker 0>That's easy. Now

00:26:33.460 --> 00:26:35.940
<v Speaker 1>you can also do geo t k get

00:26:35.940 --> 00:26:36.820
<v Speaker 1>customizations,

00:26:44.495 --> 00:26:46.734
<v Speaker 1>And it will show you the same

00:26:47.375 --> 00:26:49.294
<v Speaker 1>revision as the source.

00:26:49.375 --> 00:26:50.014
<v Speaker 1>So

00:26:50.414 --> 00:26:51.854
<v Speaker 1>it may happen that

00:26:52.255 --> 00:26:53.614
<v Speaker 1>you push a change,

00:26:53.855 --> 00:26:56.095
<v Speaker 1>that change gets pulled into the cluster, but

00:26:56.095 --> 00:26:58.654
<v Speaker 1>it doesn't get applied. Maybe there is an

00:26:58.654 --> 00:26:59.669
<v Speaker 1>error or

00:26:59.909 --> 00:27:01.989
<v Speaker 1>some new configuration, and

00:27:02.230 --> 00:27:04.070
<v Speaker 1>there will be a drift between

00:27:04.309 --> 00:27:06.389
<v Speaker 1>what it's supposed to be on the cluster

00:27:06.389 --> 00:27:08.709
<v Speaker 1>and what's really running on the cluster.

00:27:10.389 --> 00:27:11.509
<v Speaker 0>Right. Okay.

00:27:12.630 --> 00:27:13.750
<v Speaker 0>So

00:27:16.375 --> 00:27:18.295
<v Speaker 0>okay. Right. I get it. I get it.

00:27:18.855 --> 00:27:20.935
<v Speaker 0>Just thinking a load here.

00:27:21.975 --> 00:27:22.535
<v Speaker 0>What is

00:27:23.735 --> 00:27:25.015
<v Speaker 0>so I guess this is this is gonna

00:27:25.015 --> 00:27:26.775
<v Speaker 0>come down to where your experience is really

00:27:26.775 --> 00:27:27.735
<v Speaker 0>important here. Like,

00:27:28.660 --> 00:27:30.500
<v Speaker 0>what is the best way for this director

00:27:30.500 --> 00:27:31.860
<v Speaker 0>to be set up? Like, I what I

00:27:31.860 --> 00:27:33.700
<v Speaker 0>feel now is that I've made a a

00:27:33.700 --> 00:27:37.140
<v Speaker 0>mistake, storing my deployment NGINX inside of this

00:27:37.140 --> 00:27:39.140
<v Speaker 0>production folder. I feel like

00:27:39.620 --> 00:27:42.335
<v Speaker 0>would you start immediately with customize so that

00:27:42.335 --> 00:27:44.735
<v Speaker 0>you have bases and the ability to overlay

00:27:44.735 --> 00:27:45.934
<v Speaker 0>into environments?

00:27:46.015 --> 00:27:46.495
<v Speaker 0>Or,

00:27:46.815 --> 00:27:48.575
<v Speaker 0>you know, is this perfectly normal and it

00:27:48.575 --> 00:27:50.414
<v Speaker 0>get ups it get ups slow?

00:27:52.095 --> 00:27:52.735
<v Speaker 1>Well,

00:27:52.975 --> 00:27:53.774
<v Speaker 1>nobody

00:27:54.335 --> 00:27:56.895
<v Speaker 1>I cannot say, like, use customize. Maybe you

00:27:56.895 --> 00:27:58.649
<v Speaker 1>don't like it. Maybe you want to do

00:27:58.649 --> 00:28:01.690
<v Speaker 1>hand releases or other other things. Maybe you

00:28:01.690 --> 00:28:03.450
<v Speaker 1>want to, I don't know, generate all your

00:28:03.450 --> 00:28:04.649
<v Speaker 1>YAMLs with

00:28:04.970 --> 00:28:08.090
<v Speaker 1>JavaScript or, I don't queue or whatever and

00:28:08.090 --> 00:28:11.210
<v Speaker 1>commit commit the final YAMLs to to some

00:28:11.210 --> 00:28:13.554
<v Speaker 1>other repo. But I think for

00:28:14.274 --> 00:28:17.235
<v Speaker 1>for most people, customize should work really great

00:28:17.235 --> 00:28:20.274
<v Speaker 1>if you just want to do small changes

00:28:20.274 --> 00:28:22.595
<v Speaker 1>of your deployments across your fleet.

00:28:24.510 --> 00:28:27.150
<v Speaker 1>Customize has a downside in terms that you

00:28:27.150 --> 00:28:29.710
<v Speaker 1>cannot just, you know, use variables.

00:28:30.110 --> 00:28:32.669
<v Speaker 1>It doesn't do that. Right? So if you

00:28:32.670 --> 00:28:34.350
<v Speaker 1>want to set, for example,

00:28:34.990 --> 00:28:36.670
<v Speaker 1>the region name, and the region name will

00:28:36.670 --> 00:28:37.390
<v Speaker 1>be different

00:28:38.205 --> 00:28:40.605
<v Speaker 1>between clusters. And that region name is, I

00:28:40.605 --> 00:28:43.404
<v Speaker 1>don't know, somewhere in a config file or,

00:28:45.245 --> 00:28:47.405
<v Speaker 1>I don't back down below. Then you have

00:28:47.405 --> 00:28:49.645
<v Speaker 1>to, you know, teach customers how to patch

00:28:49.645 --> 00:28:51.325
<v Speaker 1>your things and so on. Maybe for that

00:28:51.325 --> 00:28:53.120
<v Speaker 1>use case, it's better to use a a

00:28:53.120 --> 00:28:55.600
<v Speaker 1>health chart and so on. But I

00:28:56.080 --> 00:28:57.600
<v Speaker 1>I like customize.

00:28:57.840 --> 00:29:00.640
<v Speaker 1>Okay. Yeah. Use it if you if you

00:29:00.640 --> 00:29:03.360
<v Speaker 1>can, but there are so many other options.

00:29:04.240 --> 00:29:06.895
<v Speaker 0>Okay. Do you see a a future for

00:29:06.895 --> 00:29:09.455
<v Speaker 0>Flux two or GetUp Toolkit where there's, like,

00:29:09.455 --> 00:29:11.294
<v Speaker 0>a controller for JSON,

00:29:11.455 --> 00:29:14.255
<v Speaker 0>controller for, you know, like, Carvel maybe, all

00:29:14.255 --> 00:29:16.175
<v Speaker 0>these other tools that do the same templating

00:29:16.175 --> 00:29:17.055
<v Speaker 0>responsibilities

00:29:17.055 --> 00:29:19.695
<v Speaker 0>as customized, but giving people a bit more

00:29:19.695 --> 00:29:21.215
<v Speaker 0>flexibility or choice, etcetera?

00:29:21.980 --> 00:29:25.100
<v Speaker 1>No. I don't think any of those tools

00:29:25.100 --> 00:29:25.820
<v Speaker 1>are

00:29:27.180 --> 00:29:29.500
<v Speaker 1>are meant to be reconcilers.

00:29:30.060 --> 00:29:32.860
<v Speaker 1>Those tools are meant to create YAML. So

00:29:33.020 --> 00:29:34.940
<v Speaker 1>you should if you want to use, let's

00:29:34.940 --> 00:29:37.794
<v Speaker 1>say, q or j or whatever, you can

00:29:37.875 --> 00:29:41.075
<v Speaker 1>you you can compile the final YAMLs in

00:29:41.075 --> 00:29:44.195
<v Speaker 1>your CI, validate them with something like Qvalve,

00:29:44.195 --> 00:29:45.634
<v Speaker 1>apply policies

00:29:45.794 --> 00:29:48.195
<v Speaker 1>with verify them with the

00:29:48.995 --> 00:29:50.754
<v Speaker 1>conf test, for example.

00:29:51.154 --> 00:29:51.634
<v Speaker 1>And

00:29:52.140 --> 00:29:54.940
<v Speaker 1>after all these things are okay, then you

00:29:54.940 --> 00:29:57.900
<v Speaker 1>should push the final YAML to a branch

00:29:57.900 --> 00:30:00.620
<v Speaker 1>and let the toolkit reconcile that branch.

00:30:02.220 --> 00:30:04.700
<v Speaker 1>I think the the faster you see the

00:30:04.700 --> 00:30:06.460
<v Speaker 1>YAML in Git, so you can do

00:30:06.780 --> 00:30:07.900
<v Speaker 1>diffs

00:30:07.645 --> 00:30:09.164
<v Speaker 1>and you can run this,

00:30:09.405 --> 00:30:11.085
<v Speaker 1>let's say, offline

00:30:11.325 --> 00:30:12.284
<v Speaker 1>validation,

00:30:12.684 --> 00:30:15.485
<v Speaker 1>is better than running all these tools inside

00:30:15.485 --> 00:30:17.644
<v Speaker 1>the cluster. And if the tool fails,

00:30:17.965 --> 00:30:20.125
<v Speaker 1>then you have to crawl logs and so

00:30:20.125 --> 00:30:21.980
<v Speaker 1>on. I think it's it's better to get

00:30:21.980 --> 00:30:24.379
<v Speaker 1>the final YAML earlier in your pipeline.

00:30:25.100 --> 00:30:27.419
<v Speaker 0>But that's not what customize is doing. Right?

00:30:27.419 --> 00:30:29.179
<v Speaker 0>I mean, we are running customized

00:30:29.340 --> 00:30:31.659
<v Speaker 0>and the cluster to produce the final YAML.

00:30:31.659 --> 00:30:33.500
<v Speaker 0>I mean, not in this example here, but

00:30:33.715 --> 00:30:36.115
<v Speaker 0>that's what this controller does. Or have I

00:30:36.115 --> 00:30:38.435
<v Speaker 0>completely missed the point here? So no. No.

00:30:38.435 --> 00:30:38.915
<v Speaker 1>No.

00:30:39.555 --> 00:30:42.115
<v Speaker 1>A customized controller uses customized

00:30:42.195 --> 00:30:43.395
<v Speaker 1>as a library

00:30:43.795 --> 00:30:47.020
<v Speaker 1>for many other things than just building a

00:30:47.020 --> 00:30:49.820
<v Speaker 1>customization. For example, it does an ordering using

00:30:49.820 --> 00:30:53.179
<v Speaker 1>customized. For example, custom resource definitions before

00:30:53.660 --> 00:30:57.420
<v Speaker 1>custom resources, namespaces before deployments and and stuff

00:30:57.420 --> 00:30:59.580
<v Speaker 1>like that. It also underneath

00:30:59.580 --> 00:31:03.355
<v Speaker 1>uses customized to label all your objects inside

00:31:03.355 --> 00:31:05.274
<v Speaker 1>the cluster. So if you want to say,

00:31:05.675 --> 00:31:08.315
<v Speaker 1>hey. For this particular customization, what kind of

00:31:08.315 --> 00:31:10.235
<v Speaker 1>objects have been created on the cluster? We

00:31:10.235 --> 00:31:12.475
<v Speaker 1>can use a label with the customization name,

00:31:12.475 --> 00:31:14.235
<v Speaker 1>and you'll you'll get a list of all

00:31:14.235 --> 00:31:15.115
<v Speaker 1>your things.

00:31:15.435 --> 00:31:17.850
<v Speaker 1>So, in a way, the the the customized

00:31:17.850 --> 00:31:20.809
<v Speaker 1>controller is using customized as

00:31:21.770 --> 00:31:23.770
<v Speaker 1>a library inside of it to to deal

00:31:23.770 --> 00:31:25.130
<v Speaker 1>with the reconciliation.

00:31:25.450 --> 00:31:27.050
<v Speaker 1>Maybe the name is not good is not

00:31:27.050 --> 00:31:29.050
<v Speaker 1>good. Maybe it should be, like, sync controller

00:31:29.050 --> 00:31:29.690
<v Speaker 1>or whatever.

00:31:32.415 --> 00:31:34.335
<v Speaker 1>But, yeah, I don't think you should create

00:31:34.335 --> 00:31:36.255
<v Speaker 1>a controller for any

00:31:36.655 --> 00:31:37.615
<v Speaker 1>templating

00:31:38.175 --> 00:31:39.695
<v Speaker 1>solution you have out there.

00:31:40.335 --> 00:31:41.055
<v Speaker 0>Okay.

00:31:41.295 --> 00:31:43.615
<v Speaker 0>Well, let's quickly bring in a couple of

00:31:43.615 --> 00:31:45.775
<v Speaker 0>questions then just I think that relate to

00:31:45.775 --> 00:31:47.775
<v Speaker 0>this. And I think you've potentially answered a

00:31:47.775 --> 00:31:49.270
<v Speaker 0>couple of them, but I'll I'll pop them

00:31:49.270 --> 00:31:50.549
<v Speaker 0>in anyway. So,

00:31:51.270 --> 00:31:53.030
<v Speaker 0>Elliot, I do see your first question. I'll

00:31:53.030 --> 00:31:54.390
<v Speaker 0>keep that one till the end because I

00:31:54.390 --> 00:31:55.590
<v Speaker 0>think that's interesting.

00:31:55.750 --> 00:31:57.910
<v Speaker 0>But I will pop in this one. Elliot

00:31:57.910 --> 00:31:59.750
<v Speaker 0>says, as a matter of personal preference, can

00:31:59.750 --> 00:32:02.070
<v Speaker 0>I not can I use it without customize?

00:32:02.070 --> 00:32:03.990
<v Speaker 0>And I think the answer there is

00:32:04.525 --> 00:32:05.725
<v Speaker 1>Yes. For sure.

00:32:06.285 --> 00:32:09.085
<v Speaker 1>The controller can can synchronize

00:32:09.885 --> 00:32:11.725
<v Speaker 1>plain YAMLs. It has

00:32:12.125 --> 00:32:13.965
<v Speaker 1>it's not operating that way. It doesn't need

00:32:13.965 --> 00:32:14.925
<v Speaker 1>the customization

00:32:14.925 --> 00:32:16.845
<v Speaker 1>dot YAML in your Git repo. It creates

00:32:16.845 --> 00:32:18.605
<v Speaker 1>one on the fly and adds labels and

00:32:18.605 --> 00:32:19.950
<v Speaker 1>all the things that it needs to do

00:32:19.950 --> 00:32:22.830
<v Speaker 1>to enable garbage collection, ordering, and all this

00:32:22.830 --> 00:32:23.389
<v Speaker 1>stuff.

00:32:24.190 --> 00:32:26.909
<v Speaker 0>Okay. And then he follows on with,

00:32:27.309 --> 00:32:29.789
<v Speaker 0>could one build their own custom

00:32:29.790 --> 00:32:30.989
<v Speaker 0>reconciler?

00:32:31.070 --> 00:32:31.549
<v Speaker 1>Of course.

00:32:33.195 --> 00:32:35.674
<v Speaker 1>We we intended for the toolkit to also

00:32:35.674 --> 00:32:36.794
<v Speaker 1>be an SDK

00:32:37.034 --> 00:32:39.275
<v Speaker 1>so you can build your own controllers on

00:32:39.275 --> 00:32:41.755
<v Speaker 1>top of the current API. And there is

00:32:41.755 --> 00:32:42.474
<v Speaker 1>a

00:32:42.794 --> 00:32:44.475
<v Speaker 1>development guide

00:32:44.809 --> 00:32:46.970
<v Speaker 1>that we've published on the docs website on

00:32:46.970 --> 00:32:49.450
<v Speaker 1>how you can build a controller with cube

00:32:49.450 --> 00:32:52.809
<v Speaker 1>builder that listens to a source controller events.

00:32:52.809 --> 00:32:54.970
<v Speaker 1>Fetch is the source that source controller has

00:32:54.970 --> 00:32:57.850
<v Speaker 1>pulled from all the sources, and then it's

00:32:57.850 --> 00:32:59.210
<v Speaker 1>up to you what you want to do

00:32:59.210 --> 00:33:01.725
<v Speaker 1>with that those manifests. Can be whatever.

00:33:02.365 --> 00:33:04.445
<v Speaker 1>I've seen people trying to to use source

00:33:04.445 --> 00:33:07.725
<v Speaker 1>control in CI systems where source control pulls

00:33:07.725 --> 00:33:09.725
<v Speaker 1>the source code from it.

00:33:09.965 --> 00:33:12.285
<v Speaker 1>Then there is a different controller that actually

00:33:12.285 --> 00:33:14.765
<v Speaker 1>does the build of that particular source and,

00:33:14.765 --> 00:33:17.645
<v Speaker 1>I don't pushes the

00:33:16.930 --> 00:33:19.650
<v Speaker 1>container image to to a registry. So

00:33:21.010 --> 00:33:23.650
<v Speaker 1>notification control and source control are not tied

00:33:23.650 --> 00:33:26.690
<v Speaker 1>in any way to the GitOps idea, like

00:33:26.690 --> 00:33:29.010
<v Speaker 1>like, continuous deployment. You can do a bunch

00:33:29.010 --> 00:33:31.010
<v Speaker 1>of other things with them if you want

00:33:31.010 --> 00:33:31.170
<v Speaker 1>to.

00:33:32.525 --> 00:33:35.085
<v Speaker 0>Excellent. One more question, and then we'll move

00:33:35.085 --> 00:33:36.764
<v Speaker 0>on with the the demo.

00:33:37.325 --> 00:33:39.245
<v Speaker 0>So we have a question saying, can I

00:33:39.245 --> 00:33:41.644
<v Speaker 0>use GetOp tool kit with subversion?

00:33:43.565 --> 00:33:44.765
<v Speaker 1>Not right now, but,

00:33:45.450 --> 00:33:46.889
<v Speaker 1>yeah, we've implemented

00:33:47.370 --> 00:33:50.169
<v Speaker 1>s three buckets part and the s v

00:33:50.570 --> 00:33:53.529
<v Speaker 1>SDN shouldn't be that hard if someone wants

00:33:53.529 --> 00:33:54.330
<v Speaker 1>to do it.

00:33:55.529 --> 00:33:57.770
<v Speaker 0>I guess with the get repository being as

00:33:57.770 --> 00:34:00.570
<v Speaker 0>one CRD, adding support for other

00:34:01.445 --> 00:34:04.405
<v Speaker 0>quote places locations, whether it be, you know,

00:34:04.405 --> 00:34:06.565
<v Speaker 0>Mercurial or subversion would just be a case

00:34:06.565 --> 00:34:08.165
<v Speaker 0>of adding on the CRD and the controller

00:34:08.165 --> 00:34:10.645
<v Speaker 0>to do the sync aspect of it. Yeah.

00:34:10.645 --> 00:34:13.125
<v Speaker 1>In our case, it's a you would add

00:34:13.125 --> 00:34:16.120
<v Speaker 1>a custom resource definition to the source control

00:34:16.120 --> 00:34:18.280
<v Speaker 1>API. Let's call it SVN

00:34:18.280 --> 00:34:19.240
<v Speaker 1>repository.

00:34:19.800 --> 00:34:22.520
<v Speaker 1>And then you'll be adding a controller to

00:34:23.400 --> 00:34:26.520
<v Speaker 1>a controller loop, source controller that deals with

00:34:26.520 --> 00:34:28.280
<v Speaker 1>that particular custom resource.

00:34:29.135 --> 00:34:29.855
<v Speaker 0>Excellent.

00:34:30.655 --> 00:34:33.135
<v Speaker 0>Cool. Let's jump back over to our demo

00:34:33.135 --> 00:34:35.614
<v Speaker 0>then. So what do you feel like the

00:34:35.614 --> 00:34:38.175
<v Speaker 0>next step is here? Should we add a

00:34:38.175 --> 00:34:39.215
<v Speaker 0>customized

00:34:39.534 --> 00:34:40.415
<v Speaker 0>basis

00:34:40.574 --> 00:34:41.454
<v Speaker 0>YAML,

00:34:41.454 --> 00:34:43.375
<v Speaker 0>or should we jump straight into Helm?

00:34:44.460 --> 00:34:47.020
<v Speaker 1>No. I would say let's let's show how

00:34:47.020 --> 00:34:47.820
<v Speaker 1>you can

00:34:48.139 --> 00:34:50.060
<v Speaker 1>add a different repository

00:34:50.060 --> 00:34:52.699
<v Speaker 1>to your cluster. Like, here in in this

00:34:52.699 --> 00:34:55.739
<v Speaker 1>example, we've added the deployment YAML directly to

00:34:55.739 --> 00:34:56.859
<v Speaker 1>our free triple.

00:34:57.385 --> 00:35:00.105
<v Speaker 1>But in normal cases, you you don't want

00:35:00.105 --> 00:35:01.545
<v Speaker 1>to do that. You want

00:35:01.705 --> 00:35:04.265
<v Speaker 1>let's say, if you are developing an application,

00:35:04.345 --> 00:35:05.225
<v Speaker 1>probably

00:35:05.465 --> 00:35:07.625
<v Speaker 1>somewhere in your app repo, there is a

00:35:07.625 --> 00:35:10.265
<v Speaker 1>deployment director or customized director or something like

00:35:10.265 --> 00:35:12.585
<v Speaker 1>that where you specify how your app

00:35:13.140 --> 00:35:14.340
<v Speaker 1>should be deployed.

00:35:15.059 --> 00:35:15.619
<v Speaker 1>And

00:35:17.059 --> 00:35:18.579
<v Speaker 1>the tool kit, what it tries to do

00:35:18.579 --> 00:35:21.059
<v Speaker 1>it it with with this custom resources, it

00:35:21.059 --> 00:35:24.099
<v Speaker 1>let you add let you add register

00:35:24.099 --> 00:35:26.660
<v Speaker 1>other sources inside the cluster and decide how

00:35:26.660 --> 00:35:28.585
<v Speaker 1>they are reconciled. So let's add

00:35:29.145 --> 00:35:30.665
<v Speaker 1>a different repository.

00:35:34.985 --> 00:35:37.705
<v Speaker 0>K. So I I can copy

00:35:39.145 --> 00:35:41.705
<v Speaker 0>this source and say I want to deploy

00:35:41.705 --> 00:35:42.745
<v Speaker 0>my other app.

00:35:46.079 --> 00:35:47.680
<v Speaker 0>And I

00:35:47.680 --> 00:35:50.160
<v Speaker 0>do have a previous one

00:35:52.400 --> 00:35:54.720
<v Speaker 0>here. So this is I was messing around

00:35:54.720 --> 00:35:55.360
<v Speaker 0>with

00:35:56.079 --> 00:35:58.265
<v Speaker 0>the get ups and I created some YAMLs

00:35:58.265 --> 00:36:01.224
<v Speaker 0>rendered from Helm that provisions on FluxCDB and

00:36:01.224 --> 00:36:02.984
<v Speaker 0>telegraph dot telegraph

00:36:02.984 --> 00:36:04.505
<v Speaker 0>daemon set. Okay.

00:36:05.065 --> 00:36:06.345
<v Speaker 0>I can the URL.

00:36:06.904 --> 00:36:07.545
<v Speaker 0>Yep.

00:36:09.224 --> 00:36:10.184
<v Speaker 0>And then

00:36:10.890 --> 00:36:13.369
<v Speaker 0>can I just use the public URL? Will

00:36:13.369 --> 00:36:14.490
<v Speaker 0>that work just fine?

00:36:14.730 --> 00:36:16.650
<v Speaker 1>Yep. So the git

00:36:16.650 --> 00:36:19.690
<v Speaker 1>repositories can can have an SSH URL. And

00:36:19.690 --> 00:36:21.609
<v Speaker 1>when you specify an SSH URL,

00:36:21.930 --> 00:36:24.330
<v Speaker 1>you are obliged to define the

00:36:24.490 --> 00:36:26.615
<v Speaker 1>SSH key for it.

00:36:27.335 --> 00:36:29.575
<v Speaker 1>If you use an HTTP address,

00:36:29.734 --> 00:36:32.375
<v Speaker 1>if that particular repo is public, you don't

00:36:32.375 --> 00:36:33.175
<v Speaker 1>have to,

00:36:33.494 --> 00:36:35.735
<v Speaker 1>configure any kind of authentication.

00:36:36.055 --> 00:36:36.615
<v Speaker 1>So

00:36:37.335 --> 00:36:39.734
<v Speaker 1>in this way, we let you add to

00:36:39.734 --> 00:36:42.750
<v Speaker 1>your cluster things from open source, like, I

00:36:42.750 --> 00:36:44.830
<v Speaker 1>don't know, if I'm having my own

00:36:45.230 --> 00:36:46.510
<v Speaker 1>open source project,

00:36:46.670 --> 00:36:49.470
<v Speaker 1>you can reconcile that particular

00:36:49.710 --> 00:36:51.790
<v Speaker 1>thing without having to clone it or anything

00:36:51.790 --> 00:36:53.390
<v Speaker 1>like that. If you trust me that I

00:36:53.390 --> 00:36:55.945
<v Speaker 1>will do, I don't know, sample releases and

00:36:55.945 --> 00:36:58.744
<v Speaker 1>groundbreaking changes, then you can actually add the

00:36:58.744 --> 00:37:00.585
<v Speaker 1>upstream to your cluster directly.

00:37:01.145 --> 00:37:03.785
<v Speaker 1>So, yeah, you can delete the secret ref.

00:37:04.585 --> 00:37:05.305
<v Speaker 0>So is

00:37:07.240 --> 00:37:09.240
<v Speaker 0>I think I just I'd like to clarify

00:37:09.240 --> 00:37:11.000
<v Speaker 0>something there then. So if I use a

00:37:11.000 --> 00:37:12.360
<v Speaker 0>public repository

00:37:12.760 --> 00:37:14.360
<v Speaker 0>in fact, no. If I use a private

00:37:14.360 --> 00:37:17.160
<v Speaker 0>repository and specify a secret ref,

00:37:18.120 --> 00:37:20.120
<v Speaker 0>I remember coming across something in the documentation

00:37:20.120 --> 00:37:22.545
<v Speaker 0>that talks about read only modes. So does

00:37:22.545 --> 00:37:24.785
<v Speaker 0>that mean there's a rate mode where the

00:37:24.785 --> 00:37:26.385
<v Speaker 0>GitOps toolkit modifies

00:37:26.385 --> 00:37:27.585
<v Speaker 0>my GET repository?

00:37:28.625 --> 00:37:29.985
<v Speaker 1>Yeah. In the future,

00:37:30.704 --> 00:37:33.665
<v Speaker 1>the GitOps toolkit will contain two more controllers.

00:37:33.825 --> 00:37:36.545
<v Speaker 1>One will scan container registries

00:37:36.710 --> 00:37:39.029
<v Speaker 1>and the other one, based on some policy

00:37:39.029 --> 00:37:40.470
<v Speaker 1>that you define,

00:37:40.789 --> 00:37:43.030
<v Speaker 1>will write back to your Git repo

00:37:43.990 --> 00:37:45.510
<v Speaker 1>when you push new

00:37:45.670 --> 00:37:47.589
<v Speaker 1>container images. Let's say

00:37:48.390 --> 00:37:49.829
<v Speaker 1>you have your own app

00:37:50.755 --> 00:37:53.715
<v Speaker 1>and you you push Sendware releases to your

00:37:53.715 --> 00:37:56.995
<v Speaker 1>registry instead of going every time and changing

00:37:56.995 --> 00:37:59.795
<v Speaker 1>the the new version inside your YAMLs. You

00:37:59.795 --> 00:38:02.035
<v Speaker 1>you could configure the toolkit and say, every

00:38:02.035 --> 00:38:03.955
<v Speaker 1>time there is a new Sendware release in

00:38:03.955 --> 00:38:05.155
<v Speaker 1>this particular range

00:38:06.290 --> 00:38:09.490
<v Speaker 1>on on Docker Hub, for example, get that

00:38:10.210 --> 00:38:12.609
<v Speaker 1>tag, write it back to Git, and some

00:38:12.609 --> 00:38:14.770
<v Speaker 1>other part of the system, the optimization control,

00:38:14.770 --> 00:38:16.690
<v Speaker 1>for example, will will apply.

00:38:17.650 --> 00:38:18.690
<v Speaker 0>Okay. Got it.

00:38:19.425 --> 00:38:21.345
<v Speaker 0>That makes sense. And I guess in read

00:38:21.345 --> 00:38:24.065
<v Speaker 0>only mode, does it would that as semantic

00:38:24.065 --> 00:38:25.985
<v Speaker 0>version and rules still be something that people

00:38:25.985 --> 00:38:28.145
<v Speaker 0>can consume? Does it use state within our

00:38:28.145 --> 00:38:30.865
<v Speaker 0>cluster to monitor those tags, or is that

00:38:30.865 --> 00:38:33.420
<v Speaker 0>still something that's to be determined right now?

00:38:34.140 --> 00:38:36.700
<v Speaker 1>So in in video in video only mode,

00:38:36.700 --> 00:38:38.540
<v Speaker 1>you can you

00:38:38.540 --> 00:38:42.140
<v Speaker 1>can tell the toolkit to follow similar releases

00:38:42.140 --> 00:38:43.580
<v Speaker 1>for a whole repository.

00:38:43.660 --> 00:38:47.474
<v Speaker 1>It doesn't look at container registry. So if

00:38:47.474 --> 00:38:49.714
<v Speaker 1>you version your YAML and you do SEMWARE

00:38:49.714 --> 00:38:50.515
<v Speaker 1>releases,

00:38:51.474 --> 00:38:53.795
<v Speaker 1>then the toolkit will be able to detect,

00:38:53.795 --> 00:38:56.195
<v Speaker 1>oh, there is a new release for on

00:38:56.195 --> 00:38:58.595
<v Speaker 1>that particular repository and you'll apply that release.

00:38:58.595 --> 00:39:01.330
<v Speaker 1>But with the container registry, it's more about

00:39:01.330 --> 00:39:02.370
<v Speaker 1>writing back

00:39:02.610 --> 00:39:04.050
<v Speaker 1>for each particular

00:39:04.370 --> 00:39:05.250
<v Speaker 1>container.

00:39:06.450 --> 00:39:07.730
<v Speaker 0>K. Got it.

00:39:08.370 --> 00:39:10.370
<v Speaker 0>Right. So I am assuming I do not

00:39:10.370 --> 00:39:11.330
<v Speaker 0>want to override

00:39:12.535 --> 00:39:14.855
<v Speaker 0>that. So we'll call this custom repo in

00:39:14.855 --> 00:39:16.375
<v Speaker 0>line with the directory.

00:39:16.615 --> 00:39:19.015
<v Speaker 0>With regards to interval, I mean, one minute

00:39:19.015 --> 00:39:20.855
<v Speaker 0>seems like quite a sensible option.

00:39:21.415 --> 00:39:23.095
<v Speaker 0>If I were to do one second, I

00:39:23.095 --> 00:39:24.535
<v Speaker 0>mean, is that likely to cause problems?

00:39:26.310 --> 00:39:27.910
<v Speaker 1>Could be. I I don't think it will

00:39:27.910 --> 00:39:31.270
<v Speaker 1>actually work. I think it will not work.

00:39:31.270 --> 00:39:33.990
<v Speaker 1>It will set something like ten seconds or

00:39:34.390 --> 00:39:35.990
<v Speaker 0>We can go for a minute and do

00:39:35.990 --> 00:39:38.390
<v Speaker 0>that manual reconciles step. Okay.

00:39:38.950 --> 00:39:40.390
<v Speaker 0>So if I save this.

00:39:42.215 --> 00:39:43.975
<v Speaker 1>No. No. No. No. No. Wait.

00:39:44.215 --> 00:39:45.015
<v Speaker 1>Alright.

00:39:46.855 --> 00:39:49.815
<v Speaker 0>Let let's let's see above if there is

00:39:49.815 --> 00:39:51.415
<v Speaker 0>something else in this file.

00:39:53.175 --> 00:39:55.655
<v Speaker 1>Oh, no. It's only this. Okay. That should

00:39:55.655 --> 00:39:55.895
<v Speaker 1>work.

00:39:56.500 --> 00:39:57.860
<v Speaker 1>K. Can can

00:39:58.020 --> 00:39:59.300
<v Speaker 1>commit this one.

00:40:00.100 --> 00:40:04.100
<v Speaker 0>Alright. So we're adding a second repository.

00:40:07.700 --> 00:40:08.500
<v Speaker 0>Push this.

00:40:14.565 --> 00:40:16.325
<v Speaker 0>And then we can do

00:40:16.724 --> 00:40:19.285
<v Speaker 0>reconcile here just to speed it up.

00:40:20.724 --> 00:40:23.204
<v Speaker 0>So I guess I'm gonna assume if I

00:40:23.204 --> 00:40:27.520
<v Speaker 0>do geo case system get get repositories.

00:40:29.920 --> 00:40:32.160
<v Speaker 0>I like it when things are just intuitive.

00:40:33.839 --> 00:40:34.720
<v Speaker 0>So

00:40:35.839 --> 00:40:37.120
<v Speaker 0>master main

00:40:37.440 --> 00:40:38.960
<v Speaker 0>error here, I'm assuming.

00:40:40.205 --> 00:40:42.605
<v Speaker 0>Yeah. This one has been updated.

00:40:43.885 --> 00:40:44.525
<v Speaker 0>So

00:40:50.925 --> 00:40:52.765
<v Speaker 0>it's

00:40:52.765 --> 00:40:53.645
<v Speaker 0>it's correct

00:40:53.725 --> 00:40:54.285
<v Speaker 0>branch.

00:41:02.910 --> 00:41:04.510
<v Speaker 0>Reconcile one more time

00:41:04.830 --> 00:41:06.750
<v Speaker 0>and

00:41:09.345 --> 00:41:10.305
<v Speaker 0>there we go.

00:41:11.744 --> 00:41:13.745
<v Speaker 0>That's now fetching

00:41:15.185 --> 00:41:16.865
<v Speaker 0>the other get repository,

00:41:16.945 --> 00:41:18.625
<v Speaker 0>applying that to the cluster

00:41:19.105 --> 00:41:21.825
<v Speaker 0>so I can run get

00:41:22.385 --> 00:41:23.105
<v Speaker 0>pods.

00:41:28.620 --> 00:41:30.460
<v Speaker 0>Don't see anything.

00:41:31.020 --> 00:41:34.540
<v Speaker 1>Yeah. You just declared the source. Now what

00:41:34.700 --> 00:41:36.300
<v Speaker 1>you should be doing is that source.

00:41:38.154 --> 00:41:39.195
<v Speaker 0>That's correct.

00:41:39.595 --> 00:41:41.595
<v Speaker 0>See? I'm glad you're here.

00:41:41.914 --> 00:41:42.954
<v Speaker 0>So I

00:41:43.434 --> 00:41:44.474
<v Speaker 0>need to

00:41:45.194 --> 00:41:47.115
<v Speaker 0>and tell her to apply it.

00:41:47.914 --> 00:41:49.115
<v Speaker 0>So that's

00:41:50.795 --> 00:41:52.714
<v Speaker 0>Yeah. You can start in the same. Yeah.

00:41:52.714 --> 00:41:53.115
<v Speaker 1>Oh, yeah.

00:41:56.130 --> 00:41:56.770
<v Speaker 0>K.

00:41:56.930 --> 00:41:59.010
<v Speaker 0>So we want custom

00:41:59.010 --> 00:41:59.970
<v Speaker 0>repo.

00:42:01.730 --> 00:42:05.010
<v Speaker 1>No. There you should say what you are

00:42:05.010 --> 00:42:05.410
<v Speaker 1>actually

00:42:06.365 --> 00:42:07.805
<v Speaker 1>trying to do here.

00:42:08.285 --> 00:42:09.565
<v Speaker 1>In FluxCDB.

00:42:10.285 --> 00:42:13.165
<v Speaker 1>Maybe it's a better name because you are

00:42:13.484 --> 00:42:15.005
<v Speaker 1>applying in FluxCDB.

00:42:16.125 --> 00:42:17.964
<v Speaker 1>K. Then the

00:42:18.700 --> 00:42:21.500
<v Speaker 1>source rep should be your custom repo.

00:42:21.740 --> 00:42:23.580
<v Speaker 0>I wish I had named that better now,

00:42:23.580 --> 00:42:25.260
<v Speaker 0>but I'm stuck with it. So

00:42:25.580 --> 00:42:28.300
<v Speaker 1>So I've seen you had, like, two directories.

00:42:28.300 --> 00:42:30.940
<v Speaker 1>Are those independent things, or they have to

00:42:30.940 --> 00:42:31.820
<v Speaker 1>be applied?

00:42:32.860 --> 00:42:33.820
<v Speaker 0>Yes. So there,

00:42:34.595 --> 00:42:36.835
<v Speaker 0>I guess, what you're suggesting there is I

00:42:36.835 --> 00:42:38.515
<v Speaker 0>could have a customization to apply each of

00:42:38.515 --> 00:42:39.795
<v Speaker 0>these individually,

00:42:39.875 --> 00:42:41.395
<v Speaker 0>or I could just do a dot apply

00:42:41.395 --> 00:42:42.755
<v Speaker 0>everything recursively.

00:42:42.755 --> 00:42:44.675
<v Speaker 0>That can well, both of those work?

00:42:45.154 --> 00:42:45.795
<v Speaker 1>Yeah.

00:42:45.954 --> 00:42:46.515
<v Speaker 1>And

00:42:47.000 --> 00:42:48.600
<v Speaker 1>you can also do

00:42:48.920 --> 00:42:52.360
<v Speaker 1>dependency management for let's say, for example,

00:42:53.319 --> 00:42:56.359
<v Speaker 1>you don't want to install in FluxCDB if

00:42:56.359 --> 00:42:57.800
<v Speaker 1>Telegraph is not there

00:42:58.760 --> 00:43:00.040
<v Speaker 1>or the other way around.

00:43:01.045 --> 00:43:04.165
<v Speaker 1>So you can, for example, define two customizations

00:43:04.165 --> 00:43:06.965
<v Speaker 1>for each directory and say for the Telegraph

00:43:06.965 --> 00:43:09.685
<v Speaker 1>one that depends on the influx DB one.

00:43:09.765 --> 00:43:12.325
<v Speaker 1>And what the customized control do will will

00:43:12.325 --> 00:43:15.760
<v Speaker 1>build the dependency graph before it does the

00:43:15.760 --> 00:43:18.319
<v Speaker 1>apply of your Git repo and applies the

00:43:18.319 --> 00:43:21.440
<v Speaker 1>things in a particular order based on the

00:43:22.079 --> 00:43:23.440
<v Speaker 1>dependency relationship

00:43:23.440 --> 00:43:24.560
<v Speaker 1>between those.

00:43:25.440 --> 00:43:26.720
<v Speaker 0>K. That's that's where it go.

00:43:27.725 --> 00:43:31.325
<v Speaker 1>Yeah. Why why we implemented that particular feature

00:43:31.325 --> 00:43:32.605
<v Speaker 1>is because of

00:43:33.565 --> 00:43:35.805
<v Speaker 1>admission webhooks and service matches.

00:43:36.125 --> 00:43:37.885
<v Speaker 1>Like, I'll give you an example. If you

00:43:37.885 --> 00:43:39.565
<v Speaker 1>if you install

00:43:39.565 --> 00:43:40.365
<v Speaker 1>a service match,

00:43:40.950 --> 00:43:43.109
<v Speaker 1>then you install your apps. Everything is good.

00:43:43.109 --> 00:43:44.630
<v Speaker 1>When your app will be installed, if the

00:43:44.630 --> 00:43:46.630
<v Speaker 1>service mesh is already there, it will get

00:43:46.630 --> 00:43:49.190
<v Speaker 1>injected with the sidecar and it will function

00:43:49.190 --> 00:43:49.990
<v Speaker 1>great.

00:43:50.390 --> 00:43:52.950
<v Speaker 1>But GitOps is meant to to work

00:43:53.510 --> 00:43:56.555
<v Speaker 1>when you, let's say, bootstrap cluster from scrap

00:43:56.635 --> 00:43:58.635
<v Speaker 1>a cluster from scratch. Let's say you lost

00:43:58.635 --> 00:44:01.194
<v Speaker 1>your cluster or you want to build an

00:44:01.194 --> 00:44:02.395
<v Speaker 1>identical cluster.

00:44:02.795 --> 00:44:05.035
<v Speaker 1>Now if you apply all the things in

00:44:05.035 --> 00:44:06.075
<v Speaker 1>your Git repo

00:44:06.315 --> 00:44:07.675
<v Speaker 1>in in the same

00:44:07.915 --> 00:44:10.155
<v Speaker 1>operation like Flux version one does,

00:44:10.960 --> 00:44:13.360
<v Speaker 1>there is a great chance that your app

00:44:13.360 --> 00:44:16.240
<v Speaker 1>port will start before, let's say, the linker,

00:44:16.240 --> 00:44:18.240
<v Speaker 1>the injector or the yeast injector.

00:44:18.400 --> 00:44:20.480
<v Speaker 1>Right? And your app will start, will have

00:44:20.480 --> 00:44:21.520
<v Speaker 1>no sidecar,

00:44:21.680 --> 00:44:22.240
<v Speaker 1>and

00:44:23.295 --> 00:44:26.015
<v Speaker 1>many problems from there because, well, it's not

00:44:26.015 --> 00:44:28.015
<v Speaker 1>meshed and it's meant to be meshed.

00:44:28.655 --> 00:44:30.415
<v Speaker 1>With the toolkit, you can say,

00:44:30.655 --> 00:44:32.655
<v Speaker 1>all my apps depend on this

00:44:33.855 --> 00:44:34.974
<v Speaker 1>infrastructure

00:44:34.974 --> 00:44:38.860
<v Speaker 1>customization that can contain InstaLink or the gatekeeper,

00:44:38.860 --> 00:44:41.420
<v Speaker 1>OPA, or any other stuff that needs to

00:44:41.420 --> 00:44:42.540
<v Speaker 1>be there before

00:44:42.940 --> 00:44:43.740
<v Speaker 1>applications

00:44:43.740 --> 00:44:44.540
<v Speaker 1>get

00:44:44.540 --> 00:44:46.380
<v Speaker 1>get provisioned. And in

00:44:46.540 --> 00:44:50.140
<v Speaker 1>using the dependency tree, you can reliably,

00:44:50.140 --> 00:44:53.075
<v Speaker 1>you know, clone clusters, create identical clusters, and

00:44:53.075 --> 00:44:55.235
<v Speaker 1>it'll happen in that particular order.

00:44:56.835 --> 00:44:58.435
<v Speaker 0>Okay. That makes sense.

00:44:59.635 --> 00:45:01.714
<v Speaker 0>So just to make sure I understood that

00:45:01.714 --> 00:45:02.435
<v Speaker 0>correctly,

00:45:02.915 --> 00:45:04.355
<v Speaker 0>to use the dependencies,

00:45:04.355 --> 00:45:06.515
<v Speaker 0>I need to define each of these separately.

00:45:06.515 --> 00:45:07.990
<v Speaker 0>Right? Yeah.

00:45:08.150 --> 00:45:09.030
<v Speaker 0>And

00:45:10.950 --> 00:45:13.990
<v Speaker 0>then I'm configuring the path here and changing

00:45:13.990 --> 00:45:14.710
<v Speaker 0>the name.

00:45:16.070 --> 00:45:18.470
<v Speaker 1>Yes. And now inside this Yep.

00:45:19.110 --> 00:45:21.645
<v Speaker 0>Sorry. On you go. Inside the spec, now

00:45:21.645 --> 00:45:23.165
<v Speaker 1>you can add the

00:45:23.805 --> 00:45:24.925
<v Speaker 1>depends on

00:45:25.085 --> 00:45:25.965
<v Speaker 1>entry

00:45:28.285 --> 00:45:32.205
<v Speaker 1>with oh, k. Depends on, and now it's

00:45:32.205 --> 00:45:33.565
<v Speaker 1>name to point

00:45:35.510 --> 00:45:38.070
<v Speaker 1>name. The list of objects? Yeah. Okay.

00:45:38.390 --> 00:45:40.950
<v Speaker 1>Yes. And it should be in FluxCD.

00:45:41.990 --> 00:45:43.830
<v Speaker 0>That's it? That's it?

00:45:45.190 --> 00:45:47.030
<v Speaker 0>I like it when things are this simple.

00:45:47.030 --> 00:45:47.350
<v Speaker 0>Okay.

00:45:47.915 --> 00:45:50.875
<v Speaker 0>So that looks okay to me. I'm sure

00:45:50.875 --> 00:45:53.035
<v Speaker 0>there's probably a mistake, but

00:45:53.435 --> 00:45:55.835
<v Speaker 0>What's yeah. It should tell us

00:45:56.075 --> 00:45:58.875
<v Speaker 1>it should tell us everything is going wrong.

00:45:59.035 --> 00:46:02.170
<v Speaker 0>Okay. So we're now going to apply

00:46:02.170 --> 00:46:05.610
<v Speaker 0>influx DB and telegraph with dependencies.

00:46:14.170 --> 00:46:15.450
<v Speaker 0>We can reconcile.

00:46:17.045 --> 00:46:19.045
<v Speaker 0>And I'm assuming

00:46:19.205 --> 00:46:21.205
<v Speaker 0>I can run get customizations

00:46:21.205 --> 00:46:22.645
<v Speaker 0>like we did earlier.

00:46:22.885 --> 00:46:24.565
<v Speaker 0>Oh, we're in the correct namespace.

00:46:31.370 --> 00:46:33.130
<v Speaker 0>We gotta oh, so it's not ready yet.

00:46:33.130 --> 00:46:34.730
<v Speaker 0>So we can see right away that it's

00:46:34.730 --> 00:46:36.890
<v Speaker 0>not deployed to Telegraph daemon set because it's

00:46:36.890 --> 00:46:40.170
<v Speaker 0>waiting on our influx DB containers to become

00:46:40.170 --> 00:46:40.890
<v Speaker 0>healthy.

00:46:44.330 --> 00:46:46.170
<v Speaker 0>It's currently pending.

00:46:54.515 --> 00:46:55.555
<v Speaker 0>And there's Telegraph.

00:46:59.510 --> 00:47:00.070
<v Speaker 1>Yeah.

00:47:00.950 --> 00:47:03.190
<v Speaker 1>One thing we should have done was to

00:47:03.190 --> 00:47:06.150
<v Speaker 1>create a health check on InfluxCD. Like, what

00:47:06.150 --> 00:47:08.310
<v Speaker 1>what we've done right now is that we

00:47:08.310 --> 00:47:10.630
<v Speaker 1>are configuring the tool kit to apply first

00:47:10.630 --> 00:47:11.589
<v Speaker 1>InfluxCD

00:47:11.765 --> 00:47:14.885
<v Speaker 1>then that. But that doesn't mean that in

00:47:14.885 --> 00:47:17.925
<v Speaker 1>FluxCDB is actually running. Right? You apply it,

00:47:17.925 --> 00:47:20.405
<v Speaker 1>then it can take forever

00:47:20.565 --> 00:47:22.005
<v Speaker 1>to spin up the pods.

00:47:22.245 --> 00:47:24.965
<v Speaker 1>What what we can do is add

00:47:25.770 --> 00:47:28.170
<v Speaker 1>a health check entry to the customization and

00:47:28.170 --> 00:47:31.610
<v Speaker 1>specify, hey. Look for the deployment named or

00:47:31.610 --> 00:47:34.330
<v Speaker 1>in this case is a stateful set.

00:47:34.650 --> 00:47:37.130
<v Speaker 1>Look for the stateful set, InfluenceDB,

00:47:37.130 --> 00:47:37.450
<v Speaker 1>and

00:47:38.154 --> 00:47:40.555
<v Speaker 1>check it if that is healthy. And only

00:47:40.555 --> 00:47:41.195
<v Speaker 1>then

00:47:41.994 --> 00:47:43.835
<v Speaker 1>allow all the other

00:47:44.555 --> 00:47:46.555
<v Speaker 1>depends on relation to go to go for

00:47:46.555 --> 00:47:47.755
<v Speaker 1>a reconcile.

00:47:48.075 --> 00:47:49.355
<v Speaker 1>Going back to the

00:47:50.474 --> 00:47:52.315
<v Speaker 1>to the service mesh example,

00:47:52.634 --> 00:47:55.400
<v Speaker 1>you can apply link ID, but that doesn't

00:47:55.400 --> 00:47:57.720
<v Speaker 1>mean that the injection webhook is up and

00:47:57.720 --> 00:48:00.359
<v Speaker 1>healthy for your pods to be injected. So

00:48:00.440 --> 00:48:01.400
<v Speaker 1>you can

00:48:02.519 --> 00:48:04.680
<v Speaker 1>we you can use health checks in in

00:48:04.680 --> 00:48:06.839
<v Speaker 1>this particular way to make sure that everything

00:48:06.839 --> 00:48:08.359
<v Speaker 1>is running before

00:48:08.865 --> 00:48:09.905
<v Speaker 1>nothing else. So

00:48:11.985 --> 00:48:13.265
<v Speaker 0>Okay. So

00:48:14.145 --> 00:48:15.744
<v Speaker 0>I do have an error, but that's my

00:48:15.744 --> 00:48:17.105
<v Speaker 0>mistake because

00:48:17.105 --> 00:48:18.385
<v Speaker 0>I haven't configured

00:48:18.465 --> 00:48:19.185
<v Speaker 0>actually

00:48:19.665 --> 00:48:22.150
<v Speaker 0>any PVC options on this cluster. So I'm

00:48:22.150 --> 00:48:23.990
<v Speaker 0>just gonna ignore influx DB for now. But

00:48:23.990 --> 00:48:26.550
<v Speaker 0>to confirm what you were seeing there, if

00:48:28.630 --> 00:48:29.830
<v Speaker 0>if my

00:48:30.310 --> 00:48:31.670
<v Speaker 0>state will set here

00:48:32.630 --> 00:48:34.710
<v Speaker 0>had a oh, no. It does have health

00:48:34.710 --> 00:48:36.630
<v Speaker 0>hit. So how do I connect that up

00:48:36.630 --> 00:48:36.950
<v Speaker 0>then?

00:48:38.415 --> 00:48:40.735
<v Speaker 1>So there is in in the customization of

00:48:40.735 --> 00:48:42.015
<v Speaker 1>the influx DB,

00:48:42.655 --> 00:48:45.295
<v Speaker 1>you can add your health check entry.

00:48:51.460 --> 00:48:53.380
<v Speaker 0>I can pull up the docs. It's

00:48:56.740 --> 00:48:58.180
<v Speaker 0>ops tool kit.

00:49:03.875 --> 00:49:06.755
<v Speaker 1>K. If you go to toolkit components,

00:49:10.035 --> 00:49:11.795
<v Speaker 1>customize controller,

00:49:13.075 --> 00:49:13.875
<v Speaker 1>customization,

00:49:13.875 --> 00:49:15.155
<v Speaker 1>custom resource definition,

00:49:15.890 --> 00:49:19.490
<v Speaker 1>and health health assessment is on your right.

00:49:19.890 --> 00:49:21.490
<v Speaker 0>Yep.

00:49:22.770 --> 00:49:24.130
<v Speaker 1>Can you see there?

00:49:25.650 --> 00:49:27.570
<v Speaker 0>Cool. Oh, yeah. So we tell the object

00:49:27.570 --> 00:49:29.330
<v Speaker 0>that we are looking for to be healthy,

00:49:29.330 --> 00:49:31.010
<v Speaker 0>the namespace, the name. Alright. Got it.

00:49:32.214 --> 00:49:32.935
<v Speaker 0>So

00:49:35.655 --> 00:49:36.615
<v Speaker 0>okay. So let's

00:49:39.175 --> 00:49:40.855
<v Speaker 0>I want to remove this. We have prune

00:49:40.855 --> 00:49:44.130
<v Speaker 0>enabled. So I'm assuming if I just comment

00:49:44.130 --> 00:49:46.050
<v Speaker 0>all of this out and push this up,

00:49:46.210 --> 00:49:47.730
<v Speaker 0>it will prune them away.

00:49:48.369 --> 00:49:49.890
<v Speaker 0>So I'm gonna do that first.

00:49:51.329 --> 00:49:52.770
<v Speaker 0>I like it when things go wrong because

00:49:52.770 --> 00:49:54.609
<v Speaker 0>then I learn how to fix it. So

00:49:54.609 --> 00:49:56.690
<v Speaker 0>remove influx DB and telegraph.

00:50:00.755 --> 00:50:01.875
<v Speaker 0>That'll get add.

00:50:02.355 --> 00:50:03.234
<v Speaker 0>There you go.

00:50:03.795 --> 00:50:04.595
<v Speaker 0>And

00:50:04.595 --> 00:50:06.515
<v Speaker 0>because we have prune on,

00:50:06.835 --> 00:50:08.994
<v Speaker 0>when I run the reconcile, it's gonna remove

00:50:08.994 --> 00:50:10.115
<v Speaker 0>those from

00:50:12.840 --> 00:50:15.160
<v Speaker 0>in the by Rawkode pods.

00:50:20.600 --> 00:50:22.600
<v Speaker 0>There we go. Terminating and unboxed d p

00:50:22.600 --> 00:50:23.480
<v Speaker 0>is already gone.

00:50:24.535 --> 00:50:26.695
<v Speaker 1>You should also remove

00:50:26.695 --> 00:50:29.015
<v Speaker 1>the oh, this is in the default namespace.

00:50:29.015 --> 00:50:31.815
<v Speaker 1>Yeah. If you'd have had the namespace definition

00:50:31.815 --> 00:50:34.615
<v Speaker 1>inside your, let's say, in FluxCDB manifest,

00:50:34.615 --> 00:50:36.855
<v Speaker 1>it will first, what it does, it goes

00:50:36.855 --> 00:50:38.615
<v Speaker 1>through all the namespace

00:50:38.615 --> 00:50:39.095
<v Speaker 1>objects.

00:50:39.800 --> 00:50:42.359
<v Speaker 1>So it will remove deployments, custom resources, and

00:50:42.359 --> 00:50:44.359
<v Speaker 1>so on. After all of all of those

00:50:44.359 --> 00:50:46.360
<v Speaker 1>are gone, then it will remove

00:50:47.400 --> 00:50:49.720
<v Speaker 1>cluster level objects, like namespaces,

00:50:49.720 --> 00:50:52.155
<v Speaker 1>like cluster or bindings, and so on. Why

00:50:52.155 --> 00:50:52.795
<v Speaker 1>we

00:50:52.955 --> 00:50:55.755
<v Speaker 1>do this kind of garbage collection is for

00:50:56.075 --> 00:50:58.315
<v Speaker 1>custom resources to be finalized.

00:50:58.635 --> 00:50:59.515
<v Speaker 1>Otherwise,

00:50:59.515 --> 00:51:02.235
<v Speaker 1>you could get into a stuck state where

00:51:02.795 --> 00:51:04.795
<v Speaker 1>you delete a custom resource. It needs to

00:51:04.795 --> 00:51:06.955
<v Speaker 1>be finalized by something, but you already deleted

00:51:06.955 --> 00:51:09.490
<v Speaker 1>that something. So your main pages and everything

00:51:09.490 --> 00:51:11.250
<v Speaker 1>else will be stuck. So we we try

00:51:11.250 --> 00:51:11.730
<v Speaker 1>to

00:51:12.130 --> 00:51:13.570
<v Speaker 1>to play nice with

00:51:14.770 --> 00:51:16.770
<v Speaker 1>with other controllers and

00:51:16.930 --> 00:51:18.770
<v Speaker 1>do the deletion in

00:51:19.010 --> 00:51:20.130
<v Speaker 1>different steps.

00:51:21.010 --> 00:51:21.650
<v Speaker 0>Okay.

00:51:22.049 --> 00:51:22.450
<v Speaker 0>Excellent.

00:51:23.744 --> 00:51:24.545
<v Speaker 0>So

00:51:26.785 --> 00:51:28.224
<v Speaker 0>what's the best way for me to use

00:51:28.224 --> 00:51:30.144
<v Speaker 0>those health checks? I'm gonna bring Telegraph back

00:51:30.144 --> 00:51:30.945
<v Speaker 0>in,

00:51:31.744 --> 00:51:34.224
<v Speaker 0>but we don't have a satisfied dependency here.

00:51:34.785 --> 00:51:36.625
<v Speaker 1>Yeah. Can remove it, and you can add

00:51:36.625 --> 00:51:38.944
<v Speaker 1>the health check for for Telegraph itself.

00:51:45.240 --> 00:51:47.480
<v Speaker 0>How okay. So we're removing the dependency.

00:51:49.480 --> 00:51:51.080
<v Speaker 0>And you want me to apply this as

00:51:51.080 --> 00:51:51.480
<v Speaker 0>is?

00:51:53.335 --> 00:51:55.815
<v Speaker 0>Sorry. I don't understand what you were suggesting.

00:51:56.135 --> 00:51:58.055
<v Speaker 1>I was suggesting to add the health check

00:51:58.055 --> 00:52:00.135
<v Speaker 1>for the telegraph demo set,

00:52:00.935 --> 00:52:02.775
<v Speaker 1>if you want to do that. Oh, in

00:52:02.775 --> 00:52:03.975
<v Speaker 0>fact, together okay. There's

00:52:04.615 --> 00:52:06.455
<v Speaker 0>let's let's let's change this a little bit.

00:52:06.455 --> 00:52:08.135
<v Speaker 0>So we already have this engine x deployment

00:52:08.135 --> 00:52:08.775
<v Speaker 0>here.

00:52:08.935 --> 00:52:10.510
<v Speaker 0>So if I just add a health check

00:52:10.510 --> 00:52:12.829
<v Speaker 0>to the to aliveness probe or readiness probe

00:52:12.829 --> 00:52:13.710
<v Speaker 0>to this,

00:52:14.510 --> 00:52:16.430
<v Speaker 0>if I just copy them from here,

00:52:17.869 --> 00:52:20.030
<v Speaker 0>then we can have telegraphs only will only

00:52:20.030 --> 00:52:21.869
<v Speaker 0>get deployed if that is healthy.

00:52:23.965 --> 00:52:25.485
<v Speaker 0>So let me add this.

00:52:27.405 --> 00:52:30.125
<v Speaker 0>And we'll just do it there because engine

00:52:30.125 --> 00:52:31.805
<v Speaker 0>x will respond it's gonna respond by a

00:52:32.925 --> 00:52:34.045
<v Speaker 0>oh, okay. Okay.

00:52:35.645 --> 00:52:37.165
<v Speaker 0>This is fine. I shouldn't make this stuff

00:52:37.165 --> 00:52:40.010
<v Speaker 0>up. Okay. Let's go into GitOps.

00:52:40.970 --> 00:52:42.810
<v Speaker 0>What I'm gonna do is add

00:52:43.450 --> 00:52:46.810
<v Speaker 0>our production engine x and deploy that first.

00:52:48.330 --> 00:52:50.490
<v Speaker 0>Add probes to engine x.

00:52:56.985 --> 00:52:58.825
<v Speaker 0>Let me do a reconcile,

00:52:59.145 --> 00:53:01.065
<v Speaker 0>and then if I run on this,

00:53:04.185 --> 00:53:07.545
<v Speaker 0>we have our new engine x spinning up

00:53:06.000 --> 00:53:08.240
<v Speaker 0>and it should become healthy. I'll wait till

00:53:08.240 --> 00:53:09.360
<v Speaker 0>I see one zero one.

00:53:21.975 --> 00:53:24.295
<v Speaker 0>Yes. I didn't add those probes correctly.

00:53:29.655 --> 00:53:31.575
<v Speaker 0>See if I can quickly fix this or

00:53:31.575 --> 00:53:32.455
<v Speaker 0>just move on.

00:53:34.080 --> 00:53:37.680
<v Speaker 0>Oh, okay. No. It's not a named port.

00:53:40.400 --> 00:53:41.360
<v Speaker 0>My bad.

00:53:45.440 --> 00:53:47.920
<v Speaker 0>So let's add that one more time.

00:53:49.785 --> 00:53:51.944
<v Speaker 0>We use my commit message, which I I

00:53:51.944 --> 00:53:53.625
<v Speaker 0>know I shouldn't do, but

00:53:54.905 --> 00:53:56.265
<v Speaker 0>I'll do it for now.

00:53:59.785 --> 00:54:01.065
<v Speaker 0>And let's get

00:54:01.385 --> 00:54:02.184
<v Speaker 0>get part.

00:54:06.290 --> 00:54:09.410
<v Speaker 0>It's it's now got a probe on it.

00:54:09.570 --> 00:54:10.850
<v Speaker 0>So

00:54:10.850 --> 00:54:13.090
<v Speaker 0>in order to demonstrate the health checks, let's

00:54:13.090 --> 00:54:15.250
<v Speaker 0>come back to here, bring back our telegraph

00:54:15.250 --> 00:54:16.210
<v Speaker 0>d s,

00:54:16.930 --> 00:54:18.850
<v Speaker 0>and add our depends

00:54:18.930 --> 00:54:19.970
<v Speaker 0>on

00:54:21.215 --> 00:54:22.015
<v Speaker 0>name,

00:54:22.095 --> 00:54:24.495
<v Speaker 0>and this is the customization

00:54:25.055 --> 00:54:26.575
<v Speaker 1>Geotrigo system.

00:54:26.655 --> 00:54:28.095
<v Speaker 0>Geotrigo. Thank you.

00:54:28.655 --> 00:54:30.895
<v Speaker 0>We're also gonna add a health

00:54:31.135 --> 00:54:32.975
<v Speaker 0>check. I'll I'll just copy this from the

00:54:32.975 --> 00:54:33.295
<v Speaker 0>docs.

00:54:33.789 --> 00:54:34.510
<v Speaker 1>No.

00:54:34.990 --> 00:54:37.790
<v Speaker 1>So let's think about it. You want to

00:54:39.150 --> 00:54:40.349
<v Speaker 1>make the

00:54:41.150 --> 00:54:42.190
<v Speaker 1>deployment

00:54:43.710 --> 00:54:45.150
<v Speaker 1>depend on another

00:54:45.630 --> 00:54:48.349
<v Speaker 1>object, right, another thing in your infrastructure.

00:54:48.675 --> 00:54:51.075
<v Speaker 1>So you'll be creating the health check

00:54:51.395 --> 00:54:54.675
<v Speaker 1>on the customization that creates NGINX.

00:54:55.555 --> 00:54:56.915
<v Speaker 1>Right? Yes.

00:54:57.795 --> 00:55:00.515
<v Speaker 1>Then you'll say, hey. All the things that

00:55:00.515 --> 00:55:02.435
<v Speaker 1>I'm trying to add afterwards

00:55:02.810 --> 00:55:03.770
<v Speaker 1>have to

00:55:04.490 --> 00:55:06.810
<v Speaker 1>be reconciled only if that

00:55:07.450 --> 00:55:09.770
<v Speaker 1>the GitOps GeoTK system

00:55:09.930 --> 00:55:12.570
<v Speaker 1>customization actually works. Right? So the health check

00:55:12.570 --> 00:55:15.770
<v Speaker 1>will go on the GeoTK system customization file.

00:55:16.615 --> 00:55:18.855
<v Speaker 0>Okay. So the health checks cannot

00:55:19.815 --> 00:55:22.215
<v Speaker 0>they don't they have to reference resources created

00:55:22.215 --> 00:55:24.215
<v Speaker 0>within its own customization?

00:55:24.775 --> 00:55:25.415
<v Speaker 0>No.

00:55:25.575 --> 00:55:27.255
<v Speaker 0>No. But

00:55:28.660 --> 00:55:30.020
<v Speaker 1>you should. Right?

00:55:33.060 --> 00:55:35.780
<v Speaker 0>Okay. So You can you can define health

00:55:35.780 --> 00:55:38.740
<v Speaker 1>checks in optimization that reference whatever in your

00:55:38.740 --> 00:55:40.980
<v Speaker 1>infrastructure even if it it doesn't come from

00:55:40.980 --> 00:55:43.214
<v Speaker 1>a Git repo. But the idea of a

00:55:43.214 --> 00:55:47.135
<v Speaker 1>dependency is that you define all these checks

00:55:47.535 --> 00:55:50.414
<v Speaker 1>on object that creates them, and then all

00:55:50.414 --> 00:55:52.015
<v Speaker 1>the other things will wait for that.

00:55:54.170 --> 00:55:56.410
<v Speaker 1>If you define the health check on your,

00:55:58.170 --> 00:55:59.450
<v Speaker 1>demand set there,

00:56:00.490 --> 00:56:02.330
<v Speaker 1>what what the customer has control will do,

00:56:02.330 --> 00:56:03.130
<v Speaker 1>we'll apply

00:56:03.610 --> 00:56:06.490
<v Speaker 1>the thing, and then we'll check if it's

00:56:06.490 --> 00:56:08.595
<v Speaker 1>healthy. What you want to do is do

00:56:08.595 --> 00:56:10.275
<v Speaker 1>not apply the thing if

00:56:11.235 --> 00:56:13.555
<v Speaker 1>if, I don't know, the the health check

00:56:13.555 --> 00:56:15.955
<v Speaker 1>is failing for another personalization. Makes sense?

00:56:16.915 --> 00:56:19.155
<v Speaker 0>Ah, okay. So I got that completely wrong

00:56:19.155 --> 00:56:20.755
<v Speaker 0>then. I thought

00:56:21.710 --> 00:56:24.190
<v Speaker 0>okay, I thought the health check here

00:56:24.510 --> 00:56:27.150
<v Speaker 0>was gonna say don't deploy this customization

00:56:27.150 --> 00:56:30.030
<v Speaker 0>unless this resource is healthy.

00:56:30.670 --> 00:56:32.510
<v Speaker 0>But that's not what it's doing at all.

00:56:33.069 --> 00:56:33.790
<v Speaker 0>No.

00:56:34.029 --> 00:56:37.605
<v Speaker 0>Right. Sorry. I completely misunderstood that. Got it.

00:56:37.605 --> 00:56:39.045
<v Speaker 0>That make okay. That makes much more sense

00:56:39.045 --> 00:56:39.845
<v Speaker 0>to me now.

00:56:40.245 --> 00:56:40.965
<v Speaker 0>Whoops.

00:56:41.205 --> 00:56:42.965
<v Speaker 0>Okay. So let's not bother with the health

00:56:42.965 --> 00:56:43.845
<v Speaker 0>check on this.

00:56:44.245 --> 00:56:46.165
<v Speaker 0>Well, yeah, we're doing a health check but

00:56:46.165 --> 00:56:47.845
<v Speaker 0>for Telegraph. Well, there are no probes on

00:56:47.845 --> 00:56:48.645
<v Speaker 0>it. So

00:56:49.525 --> 00:56:51.525
<v Speaker 0>let's just take it out. Okay.

00:56:54.040 --> 00:56:56.440
<v Speaker 0>So let's let's

00:56:56.440 --> 00:56:58.119
<v Speaker 0>just apply this and then we can move

00:56:58.119 --> 00:56:58.840
<v Speaker 0>on.

00:57:02.839 --> 00:57:03.560
<v Speaker 0>So

00:57:03.960 --> 00:57:04.600
<v Speaker 0>add

00:57:04.760 --> 00:57:05.880
<v Speaker 0>telegraph

00:57:06.280 --> 00:57:06.680
<v Speaker 0>then.

00:57:10.405 --> 00:57:12.085
<v Speaker 0>Shall we take a look at the helm

00:57:12.085 --> 00:57:12.885
<v Speaker 0>controller,

00:57:12.885 --> 00:57:14.484
<v Speaker 0>or is there anything that I've maybe missed

00:57:14.484 --> 00:57:16.005
<v Speaker 0>here that you'd like to cover?

00:57:17.605 --> 00:57:20.165
<v Speaker 0>Other than me, just not understanding anything so

00:57:20.165 --> 00:57:21.125
<v Speaker 0>far, but that's okay.

00:57:21.690 --> 00:57:22.410
<v Speaker 1>Mhmm.

00:57:22.490 --> 00:57:24.250
<v Speaker 1>No. It's okay. It's a

00:57:25.690 --> 00:57:27.849
<v Speaker 1>it's a learning process because we we added

00:57:27.849 --> 00:57:28.650
<v Speaker 1>all these

00:57:28.890 --> 00:57:30.810
<v Speaker 1>things that you can do and yeah. I

00:57:30.810 --> 00:57:32.570
<v Speaker 1>I can understand how health check can be

00:57:32.570 --> 00:57:34.010
<v Speaker 1>confusing. There are

00:57:34.810 --> 00:57:36.170
<v Speaker 1>two roles to health checks.

00:57:37.235 --> 00:57:40.275
<v Speaker 1>The role on the customization itself is you

00:57:40.275 --> 00:57:42.355
<v Speaker 1>apply something and then you want to be

00:57:42.355 --> 00:57:45.555
<v Speaker 1>notified if that particular something worked or not.

00:57:45.875 --> 00:57:46.515
<v Speaker 1>That's

00:57:46.755 --> 00:57:48.115
<v Speaker 1>one use case. Right?

00:57:48.835 --> 00:57:49.555
<v Speaker 1>Then

00:57:49.635 --> 00:57:52.650
<v Speaker 1>when you create a dependency tree, all the

00:57:52.650 --> 00:57:53.530
<v Speaker 1>dependents

00:57:53.849 --> 00:57:56.090
<v Speaker 1>if you have defined health checks

00:57:57.049 --> 00:57:59.049
<v Speaker 1>on your customization, all the dependents will be

00:57:59.049 --> 00:58:01.770
<v Speaker 1>blocked on those particular health checks. So, for

00:58:01.770 --> 00:58:04.090
<v Speaker 1>example, you will not be deploying your app

00:58:04.250 --> 00:58:07.770
<v Speaker 1>if the linker, the injector is failing because

00:58:08.184 --> 00:58:10.664
<v Speaker 1>app will not be injected. That's one example.

00:58:10.664 --> 00:58:13.944
<v Speaker 1>Another example is don't apply any YAML if

00:58:13.944 --> 00:58:15.625
<v Speaker 1>the gatekeeper,

00:58:16.265 --> 00:58:19.464
<v Speaker 1>deployment is failing because you want to ensure

00:58:19.464 --> 00:58:20.025
<v Speaker 1>that

00:58:20.480 --> 00:58:21.520
<v Speaker 1>everything that,

00:58:22.079 --> 00:58:24.000
<v Speaker 1>gets changed on your cluster

00:58:24.079 --> 00:58:26.160
<v Speaker 1>is approved by your OPA,

00:58:26.400 --> 00:58:28.960
<v Speaker 1>policy agent. Right? And for that to work,

00:58:28.960 --> 00:58:31.040
<v Speaker 1>the policy agent has to run.

00:58:31.279 --> 00:58:31.920
<v Speaker 1>So

00:58:32.640 --> 00:58:32.880
<v Speaker 1>yeah.

00:58:33.725 --> 00:58:35.725
<v Speaker 0>Okay. So, I mean, I guess the the

00:58:35.725 --> 00:58:37.485
<v Speaker 0>only mistake I was really making there was

00:58:37.485 --> 00:58:41.085
<v Speaker 0>is this depends on is gonna is is

00:58:41.085 --> 00:58:43.485
<v Speaker 0>gonna wait until this engine actually source exists.

00:58:43.485 --> 00:58:44.765
<v Speaker 0>And then I was gonna add a health

00:58:44.765 --> 00:58:46.445
<v Speaker 0>check here to check the health of this.

00:58:46.445 --> 00:58:49.300
<v Speaker 0>But, really, what you've just said there is

00:58:49.380 --> 00:58:51.220
<v Speaker 0>what I should have done is add the

00:58:51.220 --> 00:58:52.100
<v Speaker 0>health check

00:58:52.580 --> 00:58:53.380
<v Speaker 1>Yep. Here.

00:58:53.940 --> 00:58:56.020
<v Speaker 0>Ah, okay. So I've I've actually I had

00:58:56.020 --> 00:58:57.700
<v Speaker 0>that wrong in my head twice.

00:58:58.740 --> 00:59:00.980
<v Speaker 0>So really, if I had just added that

00:59:00.980 --> 00:59:03.275
<v Speaker 0>we have a deployment called engine x and

00:59:03.275 --> 00:59:04.875
<v Speaker 0>the default namespace,

00:59:07.835 --> 00:59:08.555
<v Speaker 0>and

00:59:08.795 --> 00:59:09.515
<v Speaker 0>my

00:59:10.315 --> 00:59:12.795
<v Speaker 0>telegraph wouldn't have been deployed until

00:59:12.795 --> 00:59:14.555
<v Speaker 0>this was actually healthy.

00:59:14.795 --> 00:59:16.180
<v Speaker 1>Yeah. Okay.

00:59:16.500 --> 00:59:18.740
<v Speaker 0>Makes sense. Got it. Finally.

00:59:18.980 --> 00:59:21.540
<v Speaker 0>Okay. Let's take a look at the the

00:59:21.540 --> 00:59:24.340
<v Speaker 0>helm integration then. So right now, we have

00:59:24.820 --> 00:59:27.620
<v Speaker 0>a GetOps pipeline that has two repositories. One

00:59:27.620 --> 00:59:30.745
<v Speaker 0>managing the GetOps toolkit system, one managing our

00:59:30.745 --> 00:59:33.545
<v Speaker 0>million dollar application, which is nice and trivial.

00:59:33.545 --> 00:59:34.905
<v Speaker 0>It's just some telegraph stuff.

00:59:35.065 --> 00:59:37.065
<v Speaker 0>If I then want to add something from

00:59:37.065 --> 00:59:37.865
<v Speaker 0>Helm,

00:59:38.025 --> 00:59:38.425
<v Speaker 0>like,

00:59:39.145 --> 00:59:40.025
<v Speaker 0>MariaDB,

00:59:40.025 --> 00:59:42.505
<v Speaker 0>MongoDB, some sort of database to

00:59:43.140 --> 00:59:44.819
<v Speaker 0>How much the best way to deploy that?

00:59:44.819 --> 00:59:47.060
<v Speaker 0>What are my first steps to doing that?

00:59:47.380 --> 00:59:48.100
<v Speaker 1>So

00:59:48.660 --> 00:59:50.900
<v Speaker 1>first step, you have to define

00:59:51.140 --> 00:59:53.380
<v Speaker 1>where is your chart,

00:59:53.700 --> 00:59:56.020
<v Speaker 1>where is that particular HEM repository.

00:59:56.795 --> 00:59:57.995
<v Speaker 1>Right? And

00:59:59.995 --> 01:00:02.155
<v Speaker 1>the same way you define a Git repo,

01:00:02.155 --> 01:00:03.915
<v Speaker 1>you can define a Helm repo.

01:00:04.315 --> 01:00:06.875
<v Speaker 1>And if you scroll down here,

01:00:10.250 --> 01:00:12.810
<v Speaker 1>for example, here, we add the Bitnami

01:00:12.810 --> 01:00:13.610
<v Speaker 1>repository.

01:00:15.609 --> 01:00:17.450
<v Speaker 0>Okay. So we are using g o t

01:00:17.450 --> 01:00:19.690
<v Speaker 0>k create source. We're telling it as Helm

01:00:19.690 --> 01:00:22.010
<v Speaker 0>and not GET, and then we just specify

01:00:22.010 --> 01:00:23.369
<v Speaker 0>the Bitnami

01:00:23.369 --> 01:00:23.930
<v Speaker 0>repository.

01:00:24.805 --> 01:00:26.645
<v Speaker 1>Yeah. Which is public. If you have a

01:00:26.645 --> 01:00:28.165
<v Speaker 1>Henry poetry that's

01:00:28.165 --> 01:00:30.645
<v Speaker 1>private, you can also give here in the

01:00:30.645 --> 01:00:31.765
<v Speaker 1>command the

01:00:32.165 --> 01:00:35.125
<v Speaker 1>username and password or token of your

01:00:35.685 --> 01:00:36.805
<v Speaker 1>register repository.

01:00:38.700 --> 01:00:40.300
<v Speaker 0>Okay. So if I go into my get

01:00:40.300 --> 01:00:41.500
<v Speaker 0>up director here,

01:00:44.619 --> 01:00:45.740
<v Speaker 0>we were feeling

01:00:45.900 --> 01:00:46.540
<v Speaker 0>brave. So

01:00:47.180 --> 01:00:48.060
<v Speaker 0>production.

01:00:48.380 --> 01:00:50.619
<v Speaker 0>We were I was feeling brave. This is

01:00:50.619 --> 01:00:51.180
<v Speaker 0>my production.

01:00:51.645 --> 01:00:53.245
<v Speaker 0>And then we deploy

01:00:53.325 --> 01:00:54.125
<v Speaker 0>this.

01:00:55.165 --> 01:00:56.925
<v Speaker 0>That's gonna create oops.

01:01:01.085 --> 01:01:02.125
<v Speaker 0>But, Naomi,

01:01:02.765 --> 01:01:05.165
<v Speaker 0>we've got our kind Helm repository

01:01:05.405 --> 01:01:07.245
<v Speaker 0>called, Naomi, with this chart.

01:01:08.339 --> 01:01:09.380
<v Speaker 0>And then

01:01:13.140 --> 01:01:15.700
<v Speaker 0>we okay. So this is just generating the

01:01:15.700 --> 01:01:17.540
<v Speaker 0>YAML to create a namespace.

01:01:17.940 --> 01:01:20.420
<v Speaker 1>Yeah. So one one particularity

01:01:20.420 --> 01:01:21.940
<v Speaker 1>of our Helm controller

01:01:22.155 --> 01:01:25.275
<v Speaker 1>is the fact that helm controller only installs

01:01:25.595 --> 01:01:27.915
<v Speaker 1>charts. It doesn't create anything

01:01:29.355 --> 01:01:31.355
<v Speaker 1>beside what's in the

01:01:31.755 --> 01:01:33.115
<v Speaker 1>helm chart

01:01:33.355 --> 01:01:33.915
<v Speaker 1>package.

01:01:34.569 --> 01:01:37.369
<v Speaker 1>And you shouldn't be placing namespaces,

01:01:37.369 --> 01:01:38.970
<v Speaker 1>for example, in your charts.

01:01:39.290 --> 01:01:39.770
<v Speaker 1>So

01:01:40.250 --> 01:01:43.369
<v Speaker 1>this is where helm controller, customized control work

01:01:43.369 --> 01:01:46.089
<v Speaker 1>great together with with the customized control. The

01:01:46.089 --> 01:01:49.035
<v Speaker 1>customized control will create namespace definitions, which should

01:01:49.035 --> 01:01:50.955
<v Speaker 1>be in your fleet repo or your cluster

01:01:50.955 --> 01:01:51.595
<v Speaker 1>repo.

01:01:51.835 --> 01:01:54.315
<v Speaker 1>And then we'll apply helm release

01:01:54.475 --> 01:01:56.075
<v Speaker 1>manifests and those

01:01:56.315 --> 01:01:57.994
<v Speaker 1>you can tell those, hey. I want this

01:01:57.994 --> 01:01:59.835
<v Speaker 1>particular helm chart to be installed in that

01:01:59.835 --> 01:02:00.715
<v Speaker 1>particular namespace.

01:02:02.570 --> 01:02:03.210
<v Speaker 0>Okay.

01:02:03.450 --> 01:02:04.650
<v Speaker 0>So let's

01:02:04.810 --> 01:02:07.690
<v Speaker 0>grab this and then generate this. And then

01:02:07.690 --> 01:02:09.130
<v Speaker 0>in fact, what I'll do is just next

01:02:09.130 --> 01:02:09.850
<v Speaker 0>to this,

01:02:12.570 --> 01:02:13.770
<v Speaker 0>v one

01:02:15.474 --> 01:02:16.915
<v Speaker 0>kind namespace

01:02:16.915 --> 01:02:18.915
<v Speaker 0>rather than just doing the command

01:02:21.714 --> 01:02:22.755
<v Speaker 0>on tour.

01:02:23.875 --> 01:02:24.915
<v Speaker 0>And then

01:02:27.714 --> 01:02:29.155
<v Speaker 0>exit

01:02:31.349 --> 01:02:33.750
<v Speaker 0>Action. So we're using semantic version in here

01:02:33.750 --> 01:02:34.710
<v Speaker 0>to deploy

01:02:35.109 --> 01:02:36.230
<v Speaker 0>a version two verse

01:02:36.869 --> 01:02:38.630
<v Speaker 0>v two contour.

01:02:39.589 --> 01:02:42.470
<v Speaker 0>You tell it the helm repository name, which

01:02:42.470 --> 01:02:44.150
<v Speaker 0>we just created. We give it a release

01:02:44.150 --> 01:02:46.045
<v Speaker 0>name, the target name space, which I just

01:02:46.045 --> 01:02:47.245
<v Speaker 0>added to the YAML.

01:02:47.645 --> 01:02:50.445
<v Speaker 1>And the and after export, you should be

01:02:50.445 --> 01:02:53.565
<v Speaker 1>creating the contour YAML log by the thing.

01:02:54.125 --> 01:02:54.845
<v Speaker 1>Yep.

01:02:55.245 --> 01:02:55.565
<v Speaker 1>So

01:02:56.205 --> 01:02:57.885
<v Speaker 0>So we should have this here.

01:03:00.869 --> 01:03:01.590
<v Speaker 0>Perfect.

01:03:05.430 --> 01:03:08.710
<v Speaker 0>So my my first question here is

01:03:09.349 --> 01:03:12.390
<v Speaker 0>how do I customize the chart with values?

01:03:13.585 --> 01:03:16.225
<v Speaker 1>So here you can type values.

01:03:17.105 --> 01:03:19.345
<v Speaker 0>As part of the spec? Yes.

01:03:21.265 --> 01:03:23.425
<v Speaker 1>That's the chart spec. No. Part of the

01:03:23.425 --> 01:03:24.465
<v Speaker 1>header link spec.

01:03:31.089 --> 01:03:33.089
<v Speaker 0>This is just an an object where I

01:03:33.089 --> 01:03:34.290
<v Speaker 0>could see my

01:03:35.410 --> 01:03:35.890
<v Speaker 0>one,

01:03:36.289 --> 01:03:37.410
<v Speaker 0>two, three, four. Yep.

01:03:39.905 --> 01:03:41.425
<v Speaker 1>So these are

01:03:41.665 --> 01:03:44.865
<v Speaker 1>those values specify here will override

01:03:44.865 --> 01:03:45.505
<v Speaker 1>the

01:03:45.665 --> 01:03:48.385
<v Speaker 1>values dot YAML from your help chart and

01:03:48.785 --> 01:03:52.385
<v Speaker 1>can do other things like I want

01:03:52.625 --> 01:03:55.025
<v Speaker 1>values to be fetched from a Kubernetes secret.

01:03:55.160 --> 01:03:56.680
<v Speaker 1>Let's say some charts,

01:03:57.160 --> 01:03:58.840
<v Speaker 1>yeah, I have to pass in, I don't

01:03:58.840 --> 01:04:01.720
<v Speaker 1>know, username, passwords, tokens, and so on. You

01:04:01.720 --> 01:04:03.240
<v Speaker 1>don't want to place your

01:04:03.880 --> 01:04:04.440
<v Speaker 1>tokens

01:04:04.920 --> 01:04:07.415
<v Speaker 1>your secrets here in plain text in your

01:04:07.415 --> 01:04:08.295
<v Speaker 1>Git repo.

01:04:08.455 --> 01:04:10.935
<v Speaker 1>So you can use something like Mozilla SOAPs

01:04:10.935 --> 01:04:13.415
<v Speaker 1>or seal secrets to manage Kubernetes secrets in

01:04:13.415 --> 01:04:15.735
<v Speaker 1>a GitOps way. And then here,

01:04:16.215 --> 01:04:18.855
<v Speaker 1>in in values, instead of saying value token

01:04:18.855 --> 01:04:20.695
<v Speaker 1>something, you'll say values from

01:04:21.260 --> 01:04:22.780
<v Speaker 1>this particular secret.

01:04:22.859 --> 01:04:25.339
<v Speaker 1>And what helm controller will do will take

01:04:25.339 --> 01:04:27.900
<v Speaker 1>the secret from your that lives inside your

01:04:27.900 --> 01:04:30.220
<v Speaker 1>cluster and merge the values in your secret

01:04:30.220 --> 01:04:33.420
<v Speaker 1>with the values you specify here. So here,

01:04:33.420 --> 01:04:35.819
<v Speaker 1>you should only set values that are not

01:04:35.819 --> 01:04:38.605
<v Speaker 1>secrets. Alright? Not secrets. Okay.

01:04:39.005 --> 01:04:40.765
<v Speaker 0>That I definitely understand.

01:04:41.645 --> 01:04:44.205
<v Speaker 0>But to find the values is quite easy.

01:04:44.365 --> 01:04:46.765
<v Speaker 0>So I can just add

01:04:48.609 --> 01:04:49.810
<v Speaker 0>all of this

01:04:51.010 --> 01:04:51.810
<v Speaker 0>and

01:04:54.369 --> 01:04:56.369
<v Speaker 0>add it contour

01:04:56.369 --> 01:04:57.650
<v Speaker 0>via helm

01:04:59.890 --> 01:05:00.530
<v Speaker 0>and push.

01:05:05.635 --> 01:05:07.955
<v Speaker 0>And if we run our reconcile one more

01:05:07.955 --> 01:05:08.355
<v Speaker 0>time,

01:05:19.450 --> 01:05:20.250
<v Speaker 0>See.

01:05:20.810 --> 01:05:22.810
<v Speaker 0>Oh, there. Our names our namespace is ten

01:05:22.810 --> 01:05:24.569
<v Speaker 0>seconds old, so maybe I was just a

01:05:24.569 --> 01:05:25.370
<v Speaker 0>bit quick.

01:05:26.650 --> 01:05:28.890
<v Speaker 0>There you go. We now have Contour running

01:05:28.890 --> 01:05:30.329
<v Speaker 0>deployed via Helm

01:05:30.765 --> 01:05:33.244
<v Speaker 0>via the CRD and get ups to look

01:05:33.244 --> 01:05:35.404
<v Speaker 0>at It will create many other ports. Right

01:05:35.404 --> 01:05:38.125
<v Speaker 1>now, it it's just a it spins up

01:05:38.125 --> 01:05:40.285
<v Speaker 1>the third generation, and then it'll spin up

01:05:40.285 --> 01:05:42.845
<v Speaker 1>an Envoy, a demand set, and the Contour

01:05:42.845 --> 01:05:45.480
<v Speaker 1>ports, which are the control plane of of

01:05:45.480 --> 01:05:46.680
<v Speaker 1>the ingress controller.

01:05:47.000 --> 01:05:48.520
<v Speaker 1>But yeah. And

01:05:50.040 --> 01:05:52.680
<v Speaker 1>with with Helm, you can do several things.

01:05:52.680 --> 01:05:55.640
<v Speaker 1>For example, here, what what we are doing

01:05:55.640 --> 01:05:57.400
<v Speaker 1>is using delegation.

01:05:57.400 --> 01:05:59.000
<v Speaker 1>If you go back, for example, to the

01:05:59.000 --> 01:06:00.440
<v Speaker 1>the Helm release definition,

01:06:00.924 --> 01:06:03.565
<v Speaker 1>you'll see that there is a target namespace

01:06:03.565 --> 01:06:04.125
<v Speaker 1>there.

01:06:04.365 --> 01:06:06.444
<v Speaker 1>So what I'm doing here, I'm placing the

01:06:06.444 --> 01:06:09.964
<v Speaker 1>helm release definition in my system namespace, JLTK

01:06:09.964 --> 01:06:12.444
<v Speaker 1>system. Let's say no one has access except

01:06:12.444 --> 01:06:14.765
<v Speaker 1>for cluster admins to that particular namespace.

01:06:15.099 --> 01:06:18.540
<v Speaker 1>And I want to provision some infrastructure

01:06:18.540 --> 01:06:20.619
<v Speaker 1>for a particular team. And I can use

01:06:20.619 --> 01:06:21.740
<v Speaker 1>target namespace

01:06:21.740 --> 01:06:23.820
<v Speaker 1>to say, hey. I'm declaring the hand release

01:06:23.820 --> 01:06:25.900
<v Speaker 1>here because I don't want anyone

01:06:26.140 --> 01:06:28.460
<v Speaker 1>else to be able to modify what cluster

01:06:28.460 --> 01:06:31.025
<v Speaker 1>admins. I don't want installed

01:06:31.184 --> 01:06:33.345
<v Speaker 1>in the same namespace where the hand release

01:06:33.345 --> 01:06:35.105
<v Speaker 1>is defined. I want to install it in

01:06:35.105 --> 01:06:36.465
<v Speaker 1>that particular namespace.

01:06:36.545 --> 01:06:38.545
<v Speaker 1>And this gives cluster

01:06:38.545 --> 01:06:41.505
<v Speaker 1>admins the power provision things in in other

01:06:41.990 --> 01:06:43.910
<v Speaker 1>teams' namespaces or tenants'

01:06:43.990 --> 01:06:44.710
<v Speaker 1>namespaces.

01:06:44.950 --> 01:06:45.670
<v Speaker 1>And,

01:06:46.549 --> 01:06:47.190
<v Speaker 1>yeah,

01:06:47.750 --> 01:06:50.390
<v Speaker 1>no one can modify that original object.

01:06:51.510 --> 01:06:52.790
<v Speaker 0>Alright. Excellent.

01:06:54.230 --> 01:06:55.670
<v Speaker 0>Let's jump back over here.

01:06:56.994 --> 01:06:57.795
<v Speaker 0>So

01:06:58.275 --> 01:06:59.955
<v Speaker 0>we've covered Helm,

01:07:02.275 --> 01:07:03.715
<v Speaker 0>and this was just another

01:07:04.355 --> 01:07:05.475
<v Speaker 0>good example.

01:07:06.595 --> 01:07:07.315
<v Speaker 1>We

01:07:07.635 --> 01:07:09.955
<v Speaker 1>we have an add on for for the

01:07:09.955 --> 01:07:11.635
<v Speaker 1>GitHub toolkit that's

01:07:11.875 --> 01:07:14.570
<v Speaker 1>composed of Prometheus and Grafana.

01:07:15.130 --> 01:07:18.170
<v Speaker 1>And we have instrumented the controllers, so have

01:07:18.170 --> 01:07:20.810
<v Speaker 1>an overview of what's happening on the cluster,

01:07:20.810 --> 01:07:22.330
<v Speaker 1>and here is how you can deploy the

01:07:22.330 --> 01:07:23.450
<v Speaker 1>monitoring stack.

01:07:23.770 --> 01:07:25.610
<v Speaker 1>We are currently

01:07:26.330 --> 01:07:28.330
<v Speaker 1>developing more

01:07:30.615 --> 01:07:33.495
<v Speaker 1>adding more metrics to to our controller. So

01:07:33.495 --> 01:07:35.975
<v Speaker 1>in the next release, you'll be able to

01:07:35.975 --> 01:07:38.135
<v Speaker 1>set up, for example, other manager,

01:07:38.215 --> 01:07:41.335
<v Speaker 1>say, hey. When a reconciliation fails, send me

01:07:41.335 --> 01:07:43.415
<v Speaker 1>an alert based on some metric that

01:07:43.930 --> 01:07:46.250
<v Speaker 1>I don't customized control is failing to reconcile

01:07:46.250 --> 01:07:48.810
<v Speaker 1>influx DB in the last half hour or

01:07:48.810 --> 01:07:49.770
<v Speaker 1>something like that.

01:07:50.170 --> 01:07:53.530
<v Speaker 1>We we have the notification controller, which files

01:07:53.530 --> 01:07:54.490
<v Speaker 1>all these

01:07:54.890 --> 01:07:56.250
<v Speaker 1>alerts to

01:07:56.475 --> 01:08:00.155
<v Speaker 1>Slack, Microsoft Teams, so on. But other manager

01:08:00.155 --> 01:08:01.515
<v Speaker 1>has so many

01:08:02.955 --> 01:08:04.795
<v Speaker 1>back ends that knows how to deal with

01:08:04.795 --> 01:08:06.795
<v Speaker 1>them. Don't PagerDuty and

01:08:08.075 --> 01:08:10.715
<v Speaker 1>the lots of it. And we we don't

01:08:10.715 --> 01:08:13.870
<v Speaker 1>think notification control is the only answer to

01:08:13.870 --> 01:08:15.950
<v Speaker 1>other things, so that's why we've

01:08:16.510 --> 01:08:19.310
<v Speaker 1>we we are going to add metrics.

01:08:19.310 --> 01:08:21.310
<v Speaker 1>So you can use Prometheus and other manager

01:08:21.310 --> 01:08:22.270
<v Speaker 1>to do

01:08:23.310 --> 01:08:26.055
<v Speaker 1>things like that and also build nice dashboards

01:08:26.055 --> 01:08:28.135
<v Speaker 1>so you can see all the customization with

01:08:28.135 --> 01:08:29.094
<v Speaker 1>their status,

01:08:29.734 --> 01:08:31.734
<v Speaker 1>how long does it take to do a

01:08:31.734 --> 01:08:32.535
<v Speaker 1>reconciliation,

01:08:32.535 --> 01:08:33.975
<v Speaker 1>and if it failed or not, and so

01:08:33.975 --> 01:08:34.454
<v Speaker 1>on.

01:08:35.495 --> 01:08:36.934
<v Speaker 1>This is, let's say,

01:08:37.335 --> 01:08:37.734
<v Speaker 1>our

01:08:38.720 --> 01:08:41.760
<v Speaker 1>graph on our dashboard collection that will be

01:08:41.760 --> 01:08:42.640
<v Speaker 1>shipping.

01:08:42.640 --> 01:08:45.359
<v Speaker 1>And maybe in the future, we'll have a

01:08:45.760 --> 01:08:47.600
<v Speaker 1>full blown user interface.

01:08:48.240 --> 01:08:50.240
<v Speaker 1>But for now, we'll try we try to

01:08:50.240 --> 01:08:52.399
<v Speaker 1>have, like, top touch graph on our dashboards

01:08:52.399 --> 01:08:54.320
<v Speaker 1>so we can see what's going on.

01:08:55.255 --> 01:08:56.375
<v Speaker 0>Oh, very cool.

01:08:57.015 --> 01:08:59.015
<v Speaker 0>Well, I will add this. I think I

01:08:59.015 --> 01:09:01.015
<v Speaker 0>think these steps here are fantastic for kinda

01:09:01.015 --> 01:09:03.335
<v Speaker 0>covering everything that we've already been through today.

01:09:03.335 --> 01:09:05.175
<v Speaker 0>So people can follow along with us in

01:09:05.175 --> 01:09:07.095
<v Speaker 0>their own time and deploy their own get

01:09:07.095 --> 01:09:07.975
<v Speaker 0>ups toolkit.

01:09:08.855 --> 01:09:11.270
<v Speaker 0>What I will do is I'm sorry. Sorry.

01:09:11.270 --> 01:09:12.310
<v Speaker 0>I have an else you want to demo

01:09:12.310 --> 01:09:14.070
<v Speaker 0>before I stop sharing my screen, or do

01:09:14.070 --> 01:09:16.070
<v Speaker 0>you think we've we've covered most of the

01:09:16.070 --> 01:09:17.510
<v Speaker 0>things that you want to take over? Yeah.

01:09:17.510 --> 01:09:19.510
<v Speaker 1>I I think we we've covered the basics.

01:09:19.510 --> 01:09:21.670
<v Speaker 1>The idea is that with with the toolkit

01:09:21.670 --> 01:09:23.830
<v Speaker 1>compared to FluxCD one, we let you

01:09:24.354 --> 01:09:27.875
<v Speaker 1>define your cluster state from multiple sources, and

01:09:27.875 --> 01:09:30.114
<v Speaker 1>then you decide how those sources

01:09:30.595 --> 01:09:32.115
<v Speaker 1>are going to be reconciled.

01:09:32.115 --> 01:09:33.795
<v Speaker 1>If you want to add health checks, if

01:09:33.795 --> 01:09:36.115
<v Speaker 1>you want to add garbage collection, if you

01:09:36.115 --> 01:09:37.719
<v Speaker 1>want to spend or resume them,

01:09:38.040 --> 01:09:40.119
<v Speaker 1>depending on if you have an incident or

01:09:40.119 --> 01:09:40.679
<v Speaker 1>not.

01:09:41.639 --> 01:09:44.920
<v Speaker 1>All these things come from future requests and,

01:09:46.040 --> 01:09:48.199
<v Speaker 1>things that we've seen for FluxCD one, what

01:09:48.685 --> 01:09:50.124
<v Speaker 1>our users

01:09:50.205 --> 01:09:54.125
<v Speaker 1>wanted more more stuff, and, yeah, we we

01:09:54.125 --> 01:09:55.644
<v Speaker 1>added them to the toolkit.

01:09:57.165 --> 01:09:59.405
<v Speaker 0>Yeah. I I think it's a very powerful

01:09:59.405 --> 01:10:01.245
<v Speaker 0>set of tools. I'm really impressed with just

01:10:01.245 --> 01:10:03.165
<v Speaker 0>how quickly and easy it was for us,

01:10:03.165 --> 01:10:05.670
<v Speaker 0>you know, to bootstrap the system, start adding

01:10:05.670 --> 01:10:07.190
<v Speaker 0>our own get sources,

01:10:07.190 --> 01:10:08.630
<v Speaker 0>and then applying it to the cluster. And

01:10:08.630 --> 01:10:10.470
<v Speaker 0>the Helm integration there was

01:10:10.710 --> 01:10:11.750
<v Speaker 0>so trivial.

01:10:12.470 --> 01:10:15.510
<v Speaker 0>Really, really impressive. Just the ergonomics of of

01:10:15.510 --> 01:10:17.270
<v Speaker 0>working with GetOps is nice. I really like

01:10:17.270 --> 01:10:17.510
<v Speaker 0>it.

01:10:19.215 --> 01:10:21.855
<v Speaker 1>Yeah. For for Helm, we have many other

01:10:21.855 --> 01:10:24.095
<v Speaker 1>things that you can configure in that particular

01:10:24.095 --> 01:10:25.855
<v Speaker 1>Helm Helm release. For example,

01:10:26.175 --> 01:10:26.655
<v Speaker 1>we

01:10:27.615 --> 01:10:29.935
<v Speaker 1>you can trigger Helm tests

01:10:30.095 --> 01:10:30.975
<v Speaker 1>after

01:10:31.935 --> 01:10:34.510
<v Speaker 1>a chart is installed or upgraded. And based

01:10:34.510 --> 01:10:36.430
<v Speaker 1>on the result of the test, you can

01:10:36.430 --> 01:10:39.470
<v Speaker 1>roll back to the previous version. Let's say

01:10:39.470 --> 01:10:41.870
<v Speaker 1>you are running on 100.

01:10:43.310 --> 01:10:45.630
<v Speaker 1>You bump it to 200. It fails. The

01:10:45.630 --> 01:10:47.390
<v Speaker 1>help test failed. Or the

01:10:47.710 --> 01:10:49.150
<v Speaker 1>native help

01:10:49.755 --> 01:10:52.395
<v Speaker 1>help check fails, like the deployment is stuck

01:10:52.395 --> 01:10:54.315
<v Speaker 1>or a stateful set is stuck. You can

01:10:54.315 --> 01:10:57.275
<v Speaker 1>tell help controller, if that one fails, roll

01:10:57.275 --> 01:10:58.635
<v Speaker 1>it back and let me know.

01:10:58.955 --> 01:11:01.355
<v Speaker 1>So you end up with with the previous

01:11:01.355 --> 01:11:01.835
<v Speaker 1>state

01:11:02.329 --> 01:11:04.409
<v Speaker 1>that should be fine, and you get a

01:11:04.409 --> 01:11:07.129
<v Speaker 1>notification. Hey. Your help test failed. This is

01:11:07.690 --> 01:11:09.610
<v Speaker 1>why it failed, and we we roll it

01:11:09.610 --> 01:11:10.649
<v Speaker 1>back for you.

01:11:11.050 --> 01:11:14.170
<v Speaker 1>And that's that's one feature of of help

01:11:14.170 --> 01:11:16.170
<v Speaker 1>control that we've added recently.

01:11:17.325 --> 01:11:18.605
<v Speaker 0>Oh, very cool.

01:11:19.485 --> 01:11:22.045
<v Speaker 0>So we have one more question

01:11:22.445 --> 01:11:24.205
<v Speaker 0>that we skipped over earlier, but I think

01:11:24.205 --> 01:11:25.245
<v Speaker 0>now would be a good time to cover

01:11:25.245 --> 01:11:26.605
<v Speaker 0>it. And then we can maybe talk about

01:11:26.605 --> 01:11:28.605
<v Speaker 0>what's coming down the line, and then I'll

01:11:28.605 --> 01:11:29.805
<v Speaker 0>let you get back to your day.

01:11:30.690 --> 01:11:32.690
<v Speaker 0>But earlier left a question earlier, and he

01:11:32.690 --> 01:11:33.570
<v Speaker 0>was asking

01:11:33.969 --> 01:11:36.770
<v Speaker 0>about Rancher's new product called Fleet and how

01:11:36.770 --> 01:11:39.010
<v Speaker 0>that really compares to GetUp Toolkit.

01:11:39.570 --> 01:11:41.890
<v Speaker 0>His specific question is Fleet seems to be

01:11:41.890 --> 01:11:43.090
<v Speaker 0>designed for scale,

01:11:43.570 --> 01:11:46.105
<v Speaker 0>and how does that compare to what GetOp's

01:11:46.105 --> 01:11:48.025
<v Speaker 0>Toolkit is doing as it meant for a

01:11:48.025 --> 01:11:49.385
<v Speaker 0>very specific use case?

01:11:51.065 --> 01:11:54.185
<v Speaker 1>We are working on integrating the the toolkit

01:11:54.185 --> 01:11:54.985
<v Speaker 1>with

01:11:55.145 --> 01:11:56.185
<v Speaker 1>cluster API.

01:11:57.300 --> 01:11:59.540
<v Speaker 1>So our our approach is a little bit

01:11:59.540 --> 01:12:02.739
<v Speaker 1>different from what Rancher and OpenShift

01:12:02.739 --> 01:12:06.579
<v Speaker 1>and others are doing. Instead of managing everything

01:12:06.579 --> 01:12:09.460
<v Speaker 1>for from the management cluster and

01:12:10.385 --> 01:12:12.785
<v Speaker 1>make that management cluster a single point of

01:12:12.785 --> 01:12:13.425
<v Speaker 1>failure.

01:12:13.745 --> 01:12:15.905
<v Speaker 1>What we are trying to do is

01:12:16.385 --> 01:12:20.545
<v Speaker 1>when you bootstrap clusters, you'll be adding cluster

01:12:20.625 --> 01:12:22.304
<v Speaker 1>definitions in your git.

01:12:22.545 --> 01:12:24.785
<v Speaker 1>You install the GitOps toolkit on your management

01:12:24.785 --> 01:12:25.185
<v Speaker 1>cluster.

01:12:26.520 --> 01:12:27.159
<v Speaker 1>Then

01:12:27.480 --> 01:12:30.280
<v Speaker 1>the toolkit will will discover that, okay, a

01:12:30.280 --> 01:12:32.280
<v Speaker 1>new cluster has been created. Toolkit will be

01:12:32.280 --> 01:12:35.080
<v Speaker 1>able to provision itself on that particular cluster

01:12:35.080 --> 01:12:37.400
<v Speaker 1>with the repo that you you assigned to

01:12:37.400 --> 01:12:37.880
<v Speaker 1>it.

01:12:38.200 --> 01:12:40.600
<v Speaker 1>And then even if the management cluster goes

01:12:40.600 --> 01:12:43.755
<v Speaker 1>down, I don't know, runs into trouble,

01:12:44.075 --> 01:12:46.955
<v Speaker 1>all these, clusters will be able to keep,

01:12:47.355 --> 01:12:49.755
<v Speaker 1>keep working, keep synchronizing with their own Git

01:12:49.755 --> 01:12:50.475
<v Speaker 1>repos.

01:12:50.955 --> 01:12:51.515
<v Speaker 1>And

01:12:51.995 --> 01:12:54.715
<v Speaker 1>in a way, the the our GitOps approach

01:12:54.715 --> 01:12:57.739
<v Speaker 1>is more distributed than, you know, having everything

01:12:57.739 --> 01:12:59.900
<v Speaker 1>on a management cluster and drive all the

01:12:59.900 --> 01:13:01.500
<v Speaker 1>operations from a single point.

01:13:01.900 --> 01:13:04.380
<v Speaker 1>But you'll be you'll also be able to

01:13:04.380 --> 01:13:05.739
<v Speaker 1>do that with the toolkit if you want

01:13:05.739 --> 01:13:06.219
<v Speaker 1>to.

01:13:06.780 --> 01:13:09.420
<v Speaker 1>Customized controller has a feature where it can

01:13:09.420 --> 01:13:11.020
<v Speaker 1>mount an existing

01:13:11.180 --> 01:13:12.460
<v Speaker 1>KubeConfig from a secret.

01:13:13.155 --> 01:13:15.314
<v Speaker 1>So for example, many

01:13:15.395 --> 01:13:16.675
<v Speaker 1>copy providers

01:13:16.915 --> 01:13:19.554
<v Speaker 1>will create a KubeConfig for each cluster they

01:13:19.554 --> 01:13:20.434
<v Speaker 1>have created.

01:13:20.835 --> 01:13:23.635
<v Speaker 1>And you can tell a customize, hey. Reconcile

01:13:23.635 --> 01:13:24.514
<v Speaker 1>this source,

01:13:24.920 --> 01:13:26.280
<v Speaker 1>but not locally

01:13:26.280 --> 01:13:28.680
<v Speaker 1>use this particular to config. And it will

01:13:28.680 --> 01:13:30.440
<v Speaker 1>connect to that cluster and and do its

01:13:30.440 --> 01:13:32.920
<v Speaker 1>job. So we we are trying to cover

01:13:32.920 --> 01:13:34.040
<v Speaker 1>cover both,

01:13:34.520 --> 01:13:37.480
<v Speaker 1>things where from the management cluster, you apply

01:13:37.480 --> 01:13:40.195
<v Speaker 1>everything. Or from the management cluster, you you

01:13:40.195 --> 01:13:42.195
<v Speaker 1>boost up your clusters, and then they can

01:13:42.195 --> 01:13:44.835
<v Speaker 1>run on their own with no single point

01:13:44.835 --> 01:13:45.555
<v Speaker 1>of failure.

01:13:45.875 --> 01:13:48.195
<v Speaker 1>So, yeah, I think our approach is very

01:13:48.195 --> 01:13:49.715
<v Speaker 1>different from what Rancher is doing.

01:13:50.970 --> 01:13:53.210
<v Speaker 0>Yeah. And very exciting to me. I I'm

01:13:53.210 --> 01:13:55.290
<v Speaker 0>really enjoying my exploration with the cluster API

01:13:55.290 --> 01:13:56.970
<v Speaker 0>right now and with GetOp Toolkit. And now

01:13:56.970 --> 01:13:58.890
<v Speaker 0>you're pushing both of these together and giving

01:13:58.890 --> 01:14:00.890
<v Speaker 0>me this workflow that will allow me to

01:14:00.890 --> 01:14:02.570
<v Speaker 0>have GetOp Toolkit on my management cluster,

01:14:03.075 --> 01:14:05.475
<v Speaker 0>bootstrap itself, and then go into its own

01:14:05.475 --> 01:14:08.114
<v Speaker 0>reconciliation loop, which is really exciting. I'm looking

01:14:08.114 --> 01:14:09.635
<v Speaker 0>forward to playing with that in the future.

01:14:10.515 --> 01:14:12.114
<v Speaker 1>Yeah. I think another

01:14:12.114 --> 01:14:13.635
<v Speaker 1>use case is for

01:14:14.275 --> 01:14:15.920
<v Speaker 1>adding, installing

01:14:15.920 --> 01:14:18.480
<v Speaker 1>the cluster add ons after you bootstrap a

01:14:18.480 --> 01:14:21.920
<v Speaker 1>cluster. So it can you have can have,

01:14:21.920 --> 01:14:24.480
<v Speaker 1>like, a generic Git repo with all your

01:14:24.480 --> 01:14:26.960
<v Speaker 1>cluster add ons there. Right? And you can

01:14:26.960 --> 01:14:29.360
<v Speaker 1>tell the toolkit, hey. When after we could

01:14:29.360 --> 01:14:30.400
<v Speaker 1>create a cluster

01:14:30.765 --> 01:14:32.925
<v Speaker 1>and you you see that the QConfig was

01:14:32.925 --> 01:14:35.725
<v Speaker 1>created, it works, can connect it, install these

01:14:35.725 --> 01:14:37.965
<v Speaker 1>add ons from this repo

01:14:38.445 --> 01:14:40.204
<v Speaker 1>at this particular revision.

01:14:40.364 --> 01:14:42.364
<v Speaker 1>And you can send where your

01:14:42.810 --> 01:14:45.050
<v Speaker 1>cluster add ons, make releases out of it,

01:14:45.050 --> 01:14:47.130
<v Speaker 1>and and the tool kit will will keep

01:14:47.130 --> 01:14:49.050
<v Speaker 1>updating your fleet based on that.

01:14:49.450 --> 01:14:52.010
<v Speaker 1>So the idea of a multi repository gives

01:14:52.010 --> 01:14:54.730
<v Speaker 1>you this freedom of saying, want dedicated repo

01:14:54.730 --> 01:14:57.505
<v Speaker 1>with only cluster add ons and and maybe

01:14:57.505 --> 01:14:59.745
<v Speaker 1>other repos with, I don't know, other things

01:14:59.745 --> 01:15:00.385
<v Speaker 1>like

01:15:00.705 --> 01:15:03.105
<v Speaker 1>user applications and stuff like that.

01:15:03.905 --> 01:15:06.305
<v Speaker 0>Awesome. I look forward to that update coming

01:15:06.305 --> 01:15:07.185
<v Speaker 0>down the line.

01:15:07.745 --> 01:15:09.825
<v Speaker 0>So I just wanna say thank you for

01:15:09.825 --> 01:15:12.700
<v Speaker 0>spending the last hour and fifteen minutes walking

01:15:12.700 --> 01:15:14.219
<v Speaker 0>us through GetOps toolkit.

01:15:14.540 --> 01:15:16.540
<v Speaker 0>And like I said, I it's just really

01:15:16.540 --> 01:15:18.460
<v Speaker 0>impressive how easy it was to get started

01:15:18.460 --> 01:15:20.460
<v Speaker 0>and start deploying things to your cluster. So

01:15:20.460 --> 01:15:22.140
<v Speaker 0>thank you for your continued work on this.

01:15:22.140 --> 01:15:24.220
<v Speaker 0>It's really cool to see it. Thank you

01:15:24.220 --> 01:15:26.780
<v Speaker 1>very much, David, for for inviting me. And

01:15:27.115 --> 01:15:28.315
<v Speaker 1>yeah. I hope by

01:15:29.355 --> 01:15:31.755
<v Speaker 1>next next year, we'll do another round, and

01:15:31.755 --> 01:15:32.875
<v Speaker 1>it'll be, like,

01:15:33.435 --> 01:15:35.275
<v Speaker 1>full blown KP support. Next

01:15:36.795 --> 01:15:38.475
<v Speaker 0>year, I'm gonna schedule you on every month

01:15:38.475 --> 01:15:39.915
<v Speaker 0>to follow the updates, I think. I'll just

01:15:39.915 --> 01:15:41.810
<v Speaker 0>keep harassing your calendar till you finally get

01:15:41.810 --> 01:15:43.170
<v Speaker 0>in and see. Yes. But

01:15:44.130 --> 01:15:45.810
<v Speaker 0>alright. Well, thank you again for joining me.

01:15:45.810 --> 01:15:47.410
<v Speaker 0>It's been a pleasure. A video will be

01:15:47.410 --> 01:15:49.010
<v Speaker 0>available online. All of the show notes will

01:15:49.010 --> 01:15:51.410
<v Speaker 0>be available in roughly an hour. And thanks

01:15:51.410 --> 01:15:52.770
<v Speaker 0>again, and I'll speak to you all soon.

01:15:52.770 --> 01:15:54.290
<v Speaker 0>Have a good day, Stefan. Bye.
