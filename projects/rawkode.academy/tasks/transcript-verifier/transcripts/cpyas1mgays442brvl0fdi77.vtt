WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: eec5f1ab-4471-46d7-8579-a54df1d9a441
Created: 2025-04-29T13:05:52.654Z
Duration: 1344.4651
Channels: 1

00:00:00.399 --> 00:00:02.080
<v Speaker 0>Hi, and welcome to AlphaBits.

00:00:02.399 --> 00:00:04.960
<v Speaker 0>AlphaBits is an outlet for our inquisitive minds.

00:00:04.960 --> 00:00:07.520
<v Speaker 0>We can't stop experimenting with new technology, and

00:00:07.520 --> 00:00:09.280
<v Speaker 0>we wanna share what we're playing with with

00:00:09.280 --> 00:00:13.175
<v Speaker 0>you. We're your hosts, Brian and David. Hi.

00:00:13.175 --> 00:00:15.655
<v Speaker 1>I'm David, defender of the Rawkode Academy. I'm

00:00:15.655 --> 00:00:18.455
<v Speaker 1>a perpetual learner, always playing with new cool

00:00:18.455 --> 00:00:20.055
<v Speaker 1>tools that I'm gonna share with you as

00:00:20.055 --> 00:00:22.215
<v Speaker 1>part of this podcast. And I'm Brian. I'm

00:00:22.215 --> 00:00:24.614
<v Speaker 0>a developer advocate at Amazon,

00:00:24.775 --> 00:00:27.335
<v Speaker 0>and I love all the shiny new toys

00:00:27.335 --> 00:00:27.895
<v Speaker 0>in tech.

00:00:28.619 --> 00:00:30.779
<v Speaker 0>It's kind of my passion is is testing

00:00:30.779 --> 00:00:32.220
<v Speaker 0>out the new stuff and,

00:00:32.860 --> 00:00:36.059
<v Speaker 0>seeing what's cool. So I will start the

00:00:36.220 --> 00:00:37.340
<v Speaker 0>demo joy

00:00:37.660 --> 00:00:39.660
<v Speaker 0>by sharing my terminal.

00:00:40.059 --> 00:00:41.020
<v Speaker 0>So this is,

00:00:42.125 --> 00:00:43.965
<v Speaker 0>and there's no graphical interface to this. It

00:00:44.045 --> 00:00:45.645
<v Speaker 0>it's only a login shell

00:00:45.725 --> 00:00:47.325
<v Speaker 0>on my laptop.

00:00:47.645 --> 00:00:49.325
<v Speaker 0>And if I do something like l s

00:00:49.325 --> 00:00:50.285
<v Speaker 0>v l k,

00:00:50.605 --> 00:00:53.245
<v Speaker 0>you can see the USB key that it's

00:00:53.245 --> 00:00:54.285
<v Speaker 0>booted off of,

00:00:54.925 --> 00:00:57.245
<v Speaker 0>and then the physical disk

00:00:57.700 --> 00:00:59.860
<v Speaker 0>that have been claimed as,

00:01:00.420 --> 00:01:01.379
<v Speaker 0>persistence

00:01:01.700 --> 00:01:03.460
<v Speaker 0>data spots for,

00:01:04.420 --> 00:01:05.300
<v Speaker 0>Lightwhale's

00:01:05.300 --> 00:01:07.460
<v Speaker 0>Docker container. So it it keeps,

00:01:07.780 --> 00:01:11.300
<v Speaker 0>Docker images on one partition and persistent

00:01:11.300 --> 00:01:14.175
<v Speaker 0>data on another. And so when I reboot,

00:01:14.175 --> 00:01:16.255
<v Speaker 0>it will still boot off of the USB

00:01:16.255 --> 00:01:19.215
<v Speaker 0>key, but all of my Docker container stuff

00:01:19.215 --> 00:01:19.935
<v Speaker 0>is

00:01:20.175 --> 00:01:22.655
<v Speaker 0>in it's on the physical disk. It's a

00:01:22.655 --> 00:01:25.055
<v Speaker 0>really neat way to do things. So let's

00:01:25.055 --> 00:01:25.535
<v Speaker 0>just look.

00:01:26.730 --> 00:01:29.210
<v Speaker 0>Again, this is BusyBox, so there aren't a

00:01:29.210 --> 00:01:31.530
<v Speaker 0>ton of things on the host when the

00:01:31.530 --> 00:01:34.410
<v Speaker 0>the operating system itself is tiny. And I

00:01:34.410 --> 00:01:36.490
<v Speaker 0>have a Docker Compose directory here.

00:01:39.604 --> 00:01:42.005
<v Speaker 0>And inside that are all of the things

00:01:42.005 --> 00:01:44.645
<v Speaker 0>that I run internally for my my own

00:01:44.645 --> 00:01:47.365
<v Speaker 0>bits. I've got Caddy as my reverse proxy.

00:01:47.365 --> 00:01:49.685
<v Speaker 0>I've got Coder for coding

00:01:49.685 --> 00:01:53.760
<v Speaker 0>environments, Paperless NGX for document storage,

00:01:53.760 --> 00:01:57.280
<v Speaker 0>syncing, and vault warden for pass password sharing.

00:01:57.360 --> 00:01:58.880
<v Speaker 0>So if I c d into one of

00:01:58.880 --> 00:02:00.080
<v Speaker 0>those, like, caddy

00:02:01.360 --> 00:02:02.800
<v Speaker 0>and show the

00:02:03.520 --> 00:02:04.880
<v Speaker 0>Docker Compose file,

00:02:06.925 --> 00:02:08.365
<v Speaker 0>you can see that

00:02:09.165 --> 00:02:10.205
<v Speaker 0>we've got

00:02:10.685 --> 00:02:14.765
<v Speaker 0>my Docker storage set to home op persist.

00:02:15.245 --> 00:02:17.725
<v Speaker 0>So any data that is in the container

00:02:17.725 --> 00:02:19.725
<v Speaker 0>will be in a completely different directory on

00:02:19.725 --> 00:02:21.530
<v Speaker 0>the host, which I can just back up,

00:02:21.530 --> 00:02:23.130
<v Speaker 0>which I do just back up.

00:02:23.769 --> 00:02:26.090
<v Speaker 0>And I can just do doctor compose stuff

00:02:26.090 --> 00:02:27.050
<v Speaker 0>like normal.

00:02:30.010 --> 00:02:32.170
<v Speaker 0>And you can see the logs for caddy.

00:02:32.170 --> 00:02:34.185
<v Speaker 0>You know, nothing exciting is going on there.

00:02:34.185 --> 00:02:36.345
<v Speaker 0>So this is actually really exciting because it's

00:02:36.345 --> 00:02:38.504
<v Speaker 0>it's the lowest footprint you can get for

00:02:38.504 --> 00:02:39.225
<v Speaker 0>a

00:02:39.305 --> 00:02:42.025
<v Speaker 0>hosting environment. I mean, there's really nothing

00:02:42.345 --> 00:02:44.345
<v Speaker 0>nothing you could do that's smaller than this

00:02:44.345 --> 00:02:45.480
<v Speaker 0>operating system.

00:02:45.959 --> 00:02:47.959
<v Speaker 0>And the the point is that you don't

00:02:47.959 --> 00:02:50.599
<v Speaker 0>really have any system updates to do because

00:02:50.599 --> 00:02:52.200
<v Speaker 0>you've got a stable kernel. You've got a

00:02:52.200 --> 00:02:53.560
<v Speaker 0>stable version of Docker.

00:02:53.799 --> 00:02:55.480
<v Speaker 0>And so the only maintenance you need to

00:02:55.480 --> 00:02:57.959
<v Speaker 0>worry about is keeping your containers backed up

00:02:57.959 --> 00:02:58.680
<v Speaker 0>properly.

00:02:58.760 --> 00:02:59.799
<v Speaker 0>So it's super exciting.

00:03:01.055 --> 00:03:02.974
<v Speaker 0>And I've been using it for about a

00:03:02.974 --> 00:03:04.575
<v Speaker 0>month now. I worked with,

00:03:04.974 --> 00:03:06.015
<v Speaker 0>the developer

00:03:06.095 --> 00:03:09.295
<v Speaker 0>to, get NVMe support because the scripts originally

00:03:09.295 --> 00:03:11.135
<v Speaker 0>didn't support NVMe disks.

00:03:11.375 --> 00:03:14.015
<v Speaker 0>So I submitted an issue, and and he

00:03:14.015 --> 00:03:15.135
<v Speaker 0>got that fixed up

00:03:15.710 --> 00:03:17.950
<v Speaker 0>later. So this is, it's called Lightwell. And

00:03:17.950 --> 00:03:20.190
<v Speaker 0>if you just Google search for Lightwell,

00:03:20.430 --> 00:03:23.150
<v Speaker 0>you can find it. Super awesome. So that's

00:03:23.150 --> 00:03:26.350
<v Speaker 0>demo one. Let's go to demo two.

00:03:26.990 --> 00:03:28.270
<v Speaker 0>So this is,

00:03:28.510 --> 00:03:30.830
<v Speaker 0>I'm testing this in a virtual machine on

00:03:30.830 --> 00:03:32.935
<v Speaker 0>my host. So this is just a a

00:03:32.935 --> 00:03:34.455
<v Speaker 0>KBM virtual machine

00:03:34.775 --> 00:03:37.175
<v Speaker 0>with another instance of

00:03:37.255 --> 00:03:38.135
<v Speaker 0>Bluefin.

00:03:39.095 --> 00:03:40.775
<v Speaker 0>So let's log in as me,

00:03:43.575 --> 00:03:45.975
<v Speaker 0>and let's show off the interesting bits here.

00:03:47.129 --> 00:03:50.330
<v Speaker 0>So if we cat let's see. Password.

00:03:52.010 --> 00:03:53.530
<v Speaker 0>You can see that I've got

00:03:53.849 --> 00:03:56.090
<v Speaker 0>three extra users created here.

00:03:56.250 --> 00:03:58.569
<v Speaker 0>Locked user, confined user, and full user. And

00:03:58.569 --> 00:04:00.010
<v Speaker 0>those are demo users

00:04:00.090 --> 00:04:01.769
<v Speaker 0>to show the different

00:04:02.534 --> 00:04:04.454
<v Speaker 0>levels of isolation that you can get per

00:04:04.454 --> 00:04:07.415
<v Speaker 0>container. So locked user doesn't have any access

00:04:07.415 --> 00:04:09.894
<v Speaker 0>to the local disk. The only thing that

00:04:09.894 --> 00:04:12.534
<v Speaker 0>that user can do is touch the storage

00:04:12.534 --> 00:04:14.775
<v Speaker 0>in the Docker volume that's assigned the container

00:04:14.775 --> 00:04:15.950
<v Speaker 0>volume that's assigned.

00:04:16.190 --> 00:04:19.149
<v Speaker 0>Confined user has access to their own directory,

00:04:19.149 --> 00:04:20.269
<v Speaker 0>their home directory,

00:04:20.990 --> 00:04:24.190
<v Speaker 0>but can't do, anything else much at all.

00:04:24.190 --> 00:04:26.030
<v Speaker 0>And then full user has access

00:04:26.430 --> 00:04:28.270
<v Speaker 0>to, becoming sudo

00:04:28.544 --> 00:04:30.385
<v Speaker 0>and doing root things

00:04:30.785 --> 00:04:34.785
<v Speaker 0>and also has persistent disk storage. So if

00:04:34.785 --> 00:04:36.785
<v Speaker 0>I change to root here

00:04:42.479 --> 00:04:44.400
<v Speaker 0>Let's go to Var Home.

00:04:46.639 --> 00:04:48.720
<v Speaker 0>You can see the three users, the full

00:04:48.720 --> 00:04:49.360
<v Speaker 0>year,

00:04:50.160 --> 00:04:51.599
<v Speaker 0>and I'll show you how we set this

00:04:51.599 --> 00:04:53.440
<v Speaker 0>up. So if we go into config

00:04:53.759 --> 00:04:54.880
<v Speaker 0>containers

00:04:54.880 --> 00:04:55.759
<v Speaker 0>system d,

00:04:57.105 --> 00:04:59.825
<v Speaker 0>there is a container definition file. This is

00:04:59.825 --> 00:05:02.385
<v Speaker 0>a quad lit definition. This is a Hat

00:05:02.385 --> 00:05:03.185
<v Speaker 0>labeled,

00:05:03.905 --> 00:05:05.105
<v Speaker 0>docker compose,

00:05:05.665 --> 00:05:07.185
<v Speaker 0>layered on system d.

00:05:07.585 --> 00:05:08.705
<v Speaker 0>So let's PI that.

00:05:10.460 --> 00:05:12.060
<v Speaker 0>And what we could see is

00:05:12.540 --> 00:05:14.780
<v Speaker 0>it's a standard system d unit. Before it

00:05:14.780 --> 00:05:16.700
<v Speaker 0>starts, it's going to make

00:05:16.860 --> 00:05:19.260
<v Speaker 0>the user's data persistence directory.

00:05:19.660 --> 00:05:21.660
<v Speaker 0>It's gonna run the image container image for

00:05:21.660 --> 00:05:22.380
<v Speaker 0>the word toolbox,

00:05:23.354 --> 00:05:25.035
<v Speaker 0>name it podman s h,

00:05:25.275 --> 00:05:27.835
<v Speaker 0>and this is important. Remap users inside and

00:05:27.835 --> 00:05:30.235
<v Speaker 0>outside the container because podman's rootless.

00:05:30.315 --> 00:05:31.435
<v Speaker 0>So this is using

00:05:32.474 --> 00:05:33.835
<v Speaker 0>c groups to

00:05:33.914 --> 00:05:34.715
<v Speaker 0>maintain

00:05:34.715 --> 00:05:35.435
<v Speaker 0>the

00:05:35.780 --> 00:05:38.820
<v Speaker 0>user ID and group inside the container.

00:05:39.699 --> 00:05:40.580
<v Speaker 0>I have

00:05:40.900 --> 00:05:42.020
<v Speaker 0>SC Linux

00:05:42.500 --> 00:05:43.460
<v Speaker 0>disabled

00:05:43.460 --> 00:05:45.860
<v Speaker 0>because I don't have it working yet, I

00:05:45.860 --> 00:05:48.340
<v Speaker 0>don't know how. So that's a study issue

00:05:48.340 --> 00:05:48.740
<v Speaker 0>for me.

00:05:49.824 --> 00:05:52.465
<v Speaker 0>Running it means it's gonna run-in system d,

00:05:53.104 --> 00:05:56.145
<v Speaker 0>and we're gonna keep the data directory

00:05:56.224 --> 00:05:57.505
<v Speaker 0>at the home,

00:05:58.145 --> 00:06:00.384
<v Speaker 0>and the capital z is a SE Linux

00:06:00.384 --> 00:06:01.264
<v Speaker 0>labeling

00:06:01.905 --> 00:06:02.544
<v Speaker 0>attribute.

00:06:03.320 --> 00:06:04.920
<v Speaker 0>Workdir's home directory,

00:06:05.080 --> 00:06:07.000
<v Speaker 0>and what it's gonna do is exec sleep

00:06:07.000 --> 00:06:09.480
<v Speaker 0>infinity. So as soon as this person

00:06:09.480 --> 00:06:10.360
<v Speaker 0>logs in,

00:06:10.600 --> 00:06:12.840
<v Speaker 0>this the container will start,

00:06:13.400 --> 00:06:15.880
<v Speaker 0>and the this will just keep the container

00:06:15.880 --> 00:06:18.285
<v Speaker 0>running while the person's logged in. I also

00:06:18.285 --> 00:06:19.965
<v Speaker 0>set the network level to host so I

00:06:19.965 --> 00:06:20.685
<v Speaker 0>don't have

00:06:21.245 --> 00:06:23.725
<v Speaker 0>NAT and contained networking.

00:06:24.285 --> 00:06:26.285
<v Speaker 0>So that's all I have to do for

00:06:26.285 --> 00:06:27.805
<v Speaker 0>this user. And then

00:06:28.125 --> 00:06:30.685
<v Speaker 0>if you look at the key password,

00:06:33.290 --> 00:06:36.010
<v Speaker 0>you can see that the user's login shell

00:06:36.010 --> 00:06:37.690
<v Speaker 0>is set to user bin,

00:06:38.090 --> 00:06:39.370
<v Speaker 0>podman s h.

00:06:39.690 --> 00:06:42.650
<v Speaker 0>So that's it. We we defined a container

00:06:42.650 --> 00:06:45.050
<v Speaker 0>that's gonna be this this user's login shell,

00:06:45.530 --> 00:06:45.850
<v Speaker 0>and

00:06:46.735 --> 00:06:49.294
<v Speaker 0>I can do So how do you configure

00:06:49.294 --> 00:06:51.535
<v Speaker 1>the difference between the full user and the

00:06:51.535 --> 00:06:54.655
<v Speaker 1>contained user? Like, where is that configured? So

00:06:54.655 --> 00:06:57.055
<v Speaker 0>that is that's actually all in the container

00:06:57.055 --> 00:06:58.335
<v Speaker 0>file we just looked at.

00:06:59.134 --> 00:07:00.815
<v Speaker 0>So the podman

00:07:00.815 --> 00:07:03.820
<v Speaker 0>arcs and the volume, you would change those

00:07:03.820 --> 00:07:04.460
<v Speaker 0>to,

00:07:05.820 --> 00:07:08.460
<v Speaker 0>to different levels. Like, we look at,

00:07:10.300 --> 00:07:11.580
<v Speaker 0>go to the docs,

00:07:12.620 --> 00:07:13.340
<v Speaker 0>documentation,

00:07:14.540 --> 00:07:16.300
<v Speaker 0>search for podman s h.

00:07:18.805 --> 00:07:21.045
<v Speaker 0>But this one page, by the way, is

00:07:21.045 --> 00:07:23.605
<v Speaker 0>all of the documentation that exists, one man

00:07:23.605 --> 00:07:26.965
<v Speaker 0>page. So, they've got some examples on here

00:07:27.045 --> 00:07:30.645
<v Speaker 0>that show the various levels of lockdown. So

00:07:30.645 --> 00:07:32.405
<v Speaker 0>the first one, the locked u,

00:07:33.100 --> 00:07:35.900
<v Speaker 0>has absolutely no access to the host OS,

00:07:35.900 --> 00:07:38.940
<v Speaker 0>and it drops all capabilities, no new privileges.

00:07:39.100 --> 00:07:40.940
<v Speaker 0>You know, this is a completely locked down

00:07:40.940 --> 00:07:42.940
<v Speaker 0>and secure user environment,

00:07:43.100 --> 00:07:45.100
<v Speaker 0>which is, you know, good and bad. You're

00:07:45.100 --> 00:07:46.300
<v Speaker 0>not gonna get a lot done in there,

00:07:46.824 --> 00:07:47.305
<v Speaker 0>but,

00:07:47.625 --> 00:07:48.905
<v Speaker 0>you're not gonna get a lot done in

00:07:48.905 --> 00:07:51.625
<v Speaker 0>there. So that's good. Then the confined user

00:07:52.104 --> 00:07:52.985
<v Speaker 0>uses,

00:07:53.305 --> 00:07:56.505
<v Speaker 0>remap users. So it keeps the user ID,

00:07:56.664 --> 00:07:57.944
<v Speaker 0>and it has access,

00:07:58.425 --> 00:08:00.264
<v Speaker 0>same as you would on the host. So

00:08:00.264 --> 00:08:03.550
<v Speaker 0>you can have data stored in local disk

00:08:03.550 --> 00:08:06.190
<v Speaker 0>that appears as your home directory there. And

00:08:06.190 --> 00:08:07.389
<v Speaker 0>then the final one,

00:08:07.710 --> 00:08:09.230
<v Speaker 0>and this is the example

00:08:09.470 --> 00:08:11.630
<v Speaker 0>that I'm roughly based on, but I can't

00:08:11.630 --> 00:08:13.949
<v Speaker 0>get all of this SELinux stuff to work

00:08:14.515 --> 00:08:15.795
<v Speaker 0>because SELinux

00:08:15.795 --> 00:08:17.315
<v Speaker 0>is a mystery

00:08:17.315 --> 00:08:18.275
<v Speaker 0>to everyone.

00:08:18.755 --> 00:08:20.515
<v Speaker 0>So this one is

00:08:20.515 --> 00:08:22.915
<v Speaker 0>also running in a container, but it has,

00:08:23.075 --> 00:08:24.275
<v Speaker 0>the ability to

00:08:24.675 --> 00:08:26.275
<v Speaker 0>escalate to root,

00:08:26.600 --> 00:08:28.760
<v Speaker 0>and it can run containers

00:08:28.760 --> 00:08:30.920
<v Speaker 0>inside the container. So it can

00:08:31.400 --> 00:08:33.240
<v Speaker 0>it can run nested containers,

00:08:33.320 --> 00:08:35.320
<v Speaker 0>which I haven't got working yet either.

00:08:36.039 --> 00:08:37.640
<v Speaker 0>So let's let's try

00:08:38.039 --> 00:08:39.159
<v Speaker 0>to

00:08:41.615 --> 00:08:42.654
<v Speaker 0>SSH

00:08:42.894 --> 00:08:45.935
<v Speaker 0>as that user. So we'll SSH

00:08:46.654 --> 00:08:49.855
<v Speaker 0>full view at localhost.

00:08:53.454 --> 00:08:54.735
<v Speaker 0>Set the key,

00:08:55.055 --> 00:08:56.255
<v Speaker 0>type in a password,

00:08:57.950 --> 00:09:00.670
<v Speaker 0>and it blows up. It broke.

00:09:01.070 --> 00:09:02.110
<v Speaker 0>Don't know why.

00:09:02.750 --> 00:09:03.870
<v Speaker 0>Let's find out.

00:09:09.310 --> 00:09:09.630
<v Speaker 0>Why?

00:09:13.755 --> 00:09:15.035
<v Speaker 1>Maybe try a different user.

00:09:23.510 --> 00:09:26.149
<v Speaker 1>Oh, there you go. Oh, there we go.

00:09:26.149 --> 00:09:28.310
<v Speaker 0>I got one that time. So who am

00:09:28.310 --> 00:09:28.790
<v Speaker 0>I?

00:09:29.510 --> 00:09:30.870
<v Speaker 0>I'm full u.

00:09:31.270 --> 00:09:34.310
<v Speaker 0>And if I c v to my home,

00:09:35.110 --> 00:09:37.590
<v Speaker 0>I'm at var home full u. Let's

00:09:38.149 --> 00:09:40.345
<v Speaker 0>l s. So there's a file called some

00:09:40.345 --> 00:09:41.305
<v Speaker 0>file. Let's

00:09:42.745 --> 00:09:44.745
<v Speaker 0>I don't even know if the I exists.

00:09:55.209 --> 00:09:56.970
<v Speaker 0>Alright. So now if I s u,

00:10:06.165 --> 00:10:07.605
<v Speaker 0>You can see that,

00:10:07.925 --> 00:10:10.085
<v Speaker 0>some file is not here.

00:10:10.325 --> 00:10:12.245
<v Speaker 0>It's actually in the data directory.

00:10:15.125 --> 00:10:18.325
<v Speaker 0>So when I am inside the container environment,

00:10:18.899 --> 00:10:21.860
<v Speaker 0>my home is this data directory

00:10:22.500 --> 00:10:24.180
<v Speaker 0>because that's where we set it up in

00:10:24.180 --> 00:10:24.500
<v Speaker 0>the,

00:10:25.060 --> 00:10:27.380
<v Speaker 0>the container quadlet definition.

00:10:27.620 --> 00:10:28.740
<v Speaker 0>So I can do,

00:10:30.180 --> 00:10:31.620
<v Speaker 0>some pretty cool stuff,

00:10:32.980 --> 00:10:33.300
<v Speaker 0>like

00:10:35.505 --> 00:10:36.865
<v Speaker 0>change the

00:10:37.505 --> 00:10:38.865
<v Speaker 0>container.

00:10:40.545 --> 00:10:41.265
<v Speaker 0>Oops.

00:10:42.144 --> 00:10:44.065
<v Speaker 0>Too fast. I don't have the keyboard here.

00:10:44.065 --> 00:10:46.625
<v Speaker 0>So right now, it's running Fedora toolbox, but

00:10:46.625 --> 00:10:48.945
<v Speaker 0>what if I wanted to run a completely

00:10:48.945 --> 00:10:50.920
<v Speaker 0>different container? I don't know if there is

00:10:50.920 --> 00:10:53.960
<v Speaker 0>an Ubuntu toolbox in that registry. Let's

00:10:54.680 --> 00:10:57.000
<v Speaker 0>let's look at my host

00:11:02.280 --> 00:11:04.440
<v Speaker 0>and get a good example. So

00:11:04.875 --> 00:11:07.675
<v Speaker 0>there's an Ubuntu example we can use. Well,

00:11:07.675 --> 00:11:08.475
<v Speaker 0>let me.

00:11:12.715 --> 00:11:14.715
<v Speaker 0>Alright. So we'll change this from a

00:11:15.275 --> 00:11:16.155
<v Speaker 0>Fedora

00:11:16.155 --> 00:11:16.875
<v Speaker 0>to Ubuntu.

00:11:18.030 --> 00:11:20.190
<v Speaker 0>And now if I log out,

00:11:21.790 --> 00:11:23.230
<v Speaker 0>log back in.

00:11:27.070 --> 00:11:28.590
<v Speaker 1>So do you not need to restart the

00:11:28.590 --> 00:11:32.685
<v Speaker 1>system d service? Nope. Because it's it's really

00:11:32.685 --> 00:11:34.125
<v Speaker 0>a a

00:11:34.685 --> 00:11:37.165
<v Speaker 0>daemon it's a login shell. So it it

00:11:37.404 --> 00:11:39.805
<v Speaker 0>container stops running when you log out and

00:11:39.805 --> 00:11:41.964
<v Speaker 0>starts running when you log back in. Okay.

00:11:41.964 --> 00:11:43.725
<v Speaker 0>So now I could cat

00:11:46.060 --> 00:11:47.339
<v Speaker 0>OS release.

00:11:48.620 --> 00:11:50.220
<v Speaker 1>Oh, yeah. And you can see I'm running

00:11:50.220 --> 00:11:52.380
<v Speaker 0>Ubuntu now instead of Fedora.

00:11:52.380 --> 00:11:54.940
<v Speaker 1>Neat. So if if I had it set

00:11:54.940 --> 00:11:57.100
<v Speaker 0>up, I could do apt update, apt install

00:11:57.100 --> 00:11:57.500
<v Speaker 0>things.

00:11:58.685 --> 00:12:00.605
<v Speaker 0>That's one of the sticky parts right now

00:12:00.605 --> 00:12:01.485
<v Speaker 0>is that

00:12:01.885 --> 00:12:04.285
<v Speaker 0>the user management is on the host operating

00:12:04.285 --> 00:12:05.005
<v Speaker 0>system,

00:12:05.565 --> 00:12:08.125
<v Speaker 0>and it doesn't doesn't copy in like this

00:12:08.125 --> 00:12:09.245
<v Speaker 0>Etsy shadow.

00:12:09.485 --> 00:12:11.725
<v Speaker 0>So I have to reset my username and

00:12:11.885 --> 00:12:13.085
<v Speaker 0>or my user password

00:12:13.430 --> 00:12:17.110
<v Speaker 0>in order to get root access. And I

00:12:17.110 --> 00:12:19.190
<v Speaker 0>have scripts to do that right now. I'm

00:12:19.190 --> 00:12:20.709
<v Speaker 0>hoping there's some way I can change the

00:12:20.709 --> 00:12:22.870
<v Speaker 0>init system to do that automatically,

00:12:23.029 --> 00:12:24.550
<v Speaker 0>and then this will become a pretty neat

00:12:24.550 --> 00:12:24.790
<v Speaker 0>tool.

00:12:26.395 --> 00:12:29.275
<v Speaker 0>So that is my demo. Completely

00:12:29.275 --> 00:12:31.995
<v Speaker 0>contained user environments in containers.

00:12:32.235 --> 00:12:34.715
<v Speaker 0>And the last bit to show you is,

00:12:35.675 --> 00:12:36.395
<v Speaker 0>oops,

00:12:36.795 --> 00:12:38.955
<v Speaker 0>is that this is not just at the

00:12:38.955 --> 00:12:40.395
<v Speaker 0>level of terminals.

00:12:41.350 --> 00:12:43.110
<v Speaker 0>If I log out,

00:12:43.350 --> 00:12:45.590
<v Speaker 0>I can log in as that user

00:12:47.830 --> 00:12:49.830
<v Speaker 0>and get a desktop environment

00:12:50.870 --> 00:12:52.470
<v Speaker 0>where everything is still contained.

00:12:53.764 --> 00:12:55.125
<v Speaker 0>So the terminal

00:12:55.605 --> 00:12:56.325
<v Speaker 0>and

00:13:01.764 --> 00:13:04.404
<v Speaker 0>and I've got my Oh. Ubuntu environment,

00:13:04.990 --> 00:13:08.430
<v Speaker 0>but I'm clearly in my Fedora Gnome

00:13:08.670 --> 00:13:11.950
<v Speaker 0>window here. So pretty slick. I'm I'm excited

00:13:11.950 --> 00:13:14.030
<v Speaker 0>to see where I can take this.

00:13:14.430 --> 00:13:16.990
<v Speaker 0>I'm sure I can abuse it a lot.

00:13:17.230 --> 00:13:20.190
<v Speaker 0>Question is, will it be practical and useful

00:13:20.190 --> 00:13:21.765
<v Speaker 0>to do so? So that's my demo for

00:13:21.765 --> 00:13:22.325
<v Speaker 0>today.

00:13:22.725 --> 00:13:24.565
<v Speaker 1>Very cool. Alright. So you should be able

00:13:24.565 --> 00:13:27.045
<v Speaker 1>to see my web browser. This is Infisical

00:13:27.045 --> 00:13:27.845
<v Speaker 1>Cloud.

00:13:29.765 --> 00:13:32.005
<v Speaker 1>So everything is open source to remember, but

00:13:32.005 --> 00:13:33.285
<v Speaker 1>I have set a few things up just

00:13:33.285 --> 00:13:35.610
<v Speaker 1>for the demo today. So I have an

00:13:35.610 --> 00:13:38.090
<v Speaker 1>organization called Rawkode Academy where I could invite

00:13:38.090 --> 00:13:38.650
<v Speaker 1>people.

00:13:39.610 --> 00:13:42.170
<v Speaker 1>I have a project called Rawkode Cloud. And

00:13:42.170 --> 00:13:44.090
<v Speaker 1>if we explore that, we can see the

00:13:44.090 --> 00:13:46.810
<v Speaker 1>different environments that have been configured. Now these

00:13:46.810 --> 00:13:48.890
<v Speaker 1>are arbitrary. They don't need to be dev

00:13:48.890 --> 00:13:52.055
<v Speaker 1>staging and prod, but, you know, that's what

00:13:52.055 --> 00:13:53.654
<v Speaker 1>they are out of the box. You're welcome

00:13:53.654 --> 00:13:55.735
<v Speaker 1>to tweak it. What's nice is that we

00:13:55.735 --> 00:13:58.615
<v Speaker 1>have these two properties, cloud dev name and

00:13:58.615 --> 00:14:00.535
<v Speaker 1>password. We can see that they're set in

00:14:00.535 --> 00:14:02.214
<v Speaker 1>dev, but not in the staging and production.

00:14:02.829 --> 00:14:04.670
<v Speaker 1>So, you know, we could go into here

00:14:04.670 --> 00:14:06.910
<v Speaker 1>and start to provide those values that we

00:14:06.910 --> 00:14:07.550
<v Speaker 1>wanted,

00:14:07.790 --> 00:14:09.709
<v Speaker 1>or we could just explore dev and we

00:14:09.709 --> 00:14:11.310
<v Speaker 1>can just click and see what the values

00:14:11.310 --> 00:14:15.149
<v Speaker 1>are. So from a perspective of managing secrets,

00:14:15.495 --> 00:14:16.455
<v Speaker 1>you just

00:14:17.255 --> 00:14:20.214
<v Speaker 1>add stuff in the web UI. One, three,

00:14:20.214 --> 00:14:21.495
<v Speaker 1>a, b, c,

00:14:22.214 --> 00:14:23.655
<v Speaker 1>and then click save.

00:14:24.455 --> 00:14:28.055
<v Speaker 1>These are all very much like get and

00:14:28.055 --> 00:14:30.310
<v Speaker 1>that you can well, I guess on the

00:14:30.310 --> 00:14:32.070
<v Speaker 1>cloud version, we'd need to host it ourselves.

00:14:32.070 --> 00:14:33.990
<v Speaker 1>But you can see the differences

00:14:34.310 --> 00:14:36.630
<v Speaker 1>there's a complete log of the changes.

00:14:37.029 --> 00:14:39.910
<v Speaker 1>We got the other log over here. So

00:14:40.870 --> 00:14:42.630
<v Speaker 1>now one of the things I like about

00:14:42.630 --> 00:14:43.750
<v Speaker 1>the cloud version

00:14:44.495 --> 00:14:46.575
<v Speaker 1>is that it has all of these integrations.

00:14:46.575 --> 00:14:48.815
<v Speaker 1>So one of my pet peeves just so

00:14:48.815 --> 00:14:50.654
<v Speaker 1>you know, it's nice to keep secrets in

00:14:50.654 --> 00:14:52.975
<v Speaker 1>one location, but you always need them and

00:14:52.975 --> 00:14:55.855
<v Speaker 1>third party services like GitHub actions. Right? We

00:14:55.855 --> 00:14:57.870
<v Speaker 1>wanna be able to get our secrets in

00:14:57.870 --> 00:14:59.470
<v Speaker 1>one place over there without having to do,

00:14:59.470 --> 00:15:00.910
<v Speaker 1>like, a dual commit and update them in

00:15:00.910 --> 00:15:01.870
<v Speaker 1>multiple places.

00:15:02.030 --> 00:15:03.710
<v Speaker 1>With this, you can just click integrate with

00:15:03.710 --> 00:15:04.430
<v Speaker 1>GitHub.

00:15:04.750 --> 00:15:06.510
<v Speaker 1>It'll actually still approve the app, and you

00:15:06.510 --> 00:15:09.310
<v Speaker 1>can tell it to sync this project to

00:15:09.310 --> 00:15:11.470
<v Speaker 1>a repository secrets in GitHub.

00:15:11.825 --> 00:15:14.545
<v Speaker 1>And then whenever anything changes here, it automatically

00:15:14.545 --> 00:15:16.464
<v Speaker 1>updates GitHub for you and they get the

00:15:16.464 --> 00:15:17.425
<v Speaker 1>new credential,

00:15:17.665 --> 00:15:19.105
<v Speaker 1>which is also a nice touch.

00:15:21.025 --> 00:15:23.505
<v Speaker 1>So let's drop down to my CLI

00:15:24.320 --> 00:15:27.760
<v Speaker 1>where we can run-in Physical run,

00:15:28.160 --> 00:15:30.320
<v Speaker 1>and I could run a print end where

00:15:30.320 --> 00:15:32.720
<v Speaker 1>we have one environment variable called cloud dev

00:15:32.720 --> 00:15:33.440
<v Speaker 1>name.

00:15:34.320 --> 00:15:36.800
<v Speaker 1>And this will automatically be injected, and then

00:15:36.800 --> 00:15:39.355
<v Speaker 1>it prints out here. We can also do

00:15:39.355 --> 00:15:40.875
<v Speaker 1>the same for password.

00:15:42.875 --> 00:15:45.195
<v Speaker 1>So the idea being our workflow

00:15:45.595 --> 00:15:46.635
<v Speaker 1>becomes,

00:15:47.595 --> 00:15:48.795
<v Speaker 1>you know, NPM

00:15:48.795 --> 00:15:51.274
<v Speaker 1>run dev or whatever the command is or,

00:15:51.274 --> 00:15:53.115
<v Speaker 1>you know, for the Go developers, go run

00:15:53.115 --> 00:15:54.180
<v Speaker 1>main.go,

00:15:54.180 --> 00:15:54.900
<v Speaker 1>etcetera.

00:15:54.980 --> 00:15:56.500
<v Speaker 1>And all you need to do is prefix

00:15:56.500 --> 00:15:58.420
<v Speaker 1>it with this Infisical run,

00:15:58.580 --> 00:16:01.380
<v Speaker 1>and your environment is automatically injected for you,

00:16:02.100 --> 00:16:03.540
<v Speaker 1>which is pretty cool.

00:16:03.940 --> 00:16:06.500
<v Speaker 1>There are a couple more things that you

00:16:06.500 --> 00:16:08.820
<v Speaker 1>can do. So if we do Infisical help,

00:16:09.695 --> 00:16:11.855
<v Speaker 1>they have a scan command, which will actually

00:16:11.855 --> 00:16:15.055
<v Speaker 1>scan your get history and any files in

00:16:15.055 --> 00:16:16.575
<v Speaker 1>the local directory to see if any of

00:16:16.575 --> 00:16:18.655
<v Speaker 1>your secrets have been committed now or even

00:16:18.655 --> 00:16:20.895
<v Speaker 1>in the past and give you a way

00:16:20.895 --> 00:16:21.375
<v Speaker 1>to kind of,

00:16:22.529 --> 00:16:23.650
<v Speaker 1>you know, you just have to know that

00:16:23.650 --> 00:16:25.330
<v Speaker 1>it's been committed to kinda clean up and

00:16:25.330 --> 00:16:26.850
<v Speaker 1>rebase and get rid of all the bad

00:16:26.850 --> 00:16:28.370
<v Speaker 1>stuff at some point. So the

00:16:28.850 --> 00:16:29.890
<v Speaker 1>way that this works,

00:16:30.370 --> 00:16:32.930
<v Speaker 1>I ran Infisical run without specifying, like, the

00:16:32.930 --> 00:16:35.090
<v Speaker 1>project or the environment or anything, but everything

00:16:35.090 --> 00:16:37.685
<v Speaker 1>is just inside the JSON file. Okay. So

00:16:37.685 --> 00:16:40.005
<v Speaker 1>this workspace ID is actually my Rawkode cloud

00:16:40.005 --> 00:16:40.645
<v Speaker 1>project,

00:16:41.045 --> 00:16:42.725
<v Speaker 1>and I've set the default environment to be

00:16:42.725 --> 00:16:43.605
<v Speaker 1>staging.

00:16:44.485 --> 00:16:46.485
<v Speaker 1>And you can tweak that to your parts

00:16:46.485 --> 00:16:48.965
<v Speaker 1>content. Oh, nice. And you can change environment

00:16:48.900 --> 00:16:50.180
<v Speaker 0>by changing

00:16:50.500 --> 00:16:53.060
<v Speaker 0>to a different Git branch too. That's like

00:16:54.020 --> 00:16:55.620
<v Speaker 1>Yeah. So you can have it. Like, if

00:16:55.620 --> 00:16:57.940
<v Speaker 1>you're on the main branch, then, you know,

00:16:58.180 --> 00:17:00.260
<v Speaker 1>it's probably gonna use your production environment if

00:17:00.260 --> 00:17:01.300
<v Speaker 1>you wanted it to. And if you're on

00:17:01.300 --> 00:17:03.380
<v Speaker 1>the dev branch or non main branch, then

00:17:03.380 --> 00:17:05.214
<v Speaker 1>it can use another environment. So there are

00:17:05.214 --> 00:17:06.414
<v Speaker 1>lots of little things you can set up

00:17:06.414 --> 00:17:07.134
<v Speaker 1>like that.

00:17:07.534 --> 00:17:08.174
<v Speaker 1>The

00:17:08.734 --> 00:17:11.134
<v Speaker 1>the whole web interface, it's quite nice. You

00:17:11.134 --> 00:17:12.654
<v Speaker 1>know, it's got things that I haven't seen

00:17:12.654 --> 00:17:15.214
<v Speaker 1>in similar solutions like this folder

00:17:15.214 --> 00:17:17.930
<v Speaker 1>approach. So, like, from here, you can actually

00:17:17.930 --> 00:17:19.130
<v Speaker 1>say that you want to create a new

00:17:19.130 --> 00:17:21.529
<v Speaker 1>folder and these work like a

00:17:22.730 --> 00:17:25.769
<v Speaker 1>let's call this sub project. Like a namespace?

00:17:26.730 --> 00:17:28.650
<v Speaker 1>Yeah. So we can now come into the

00:17:28.650 --> 00:17:29.370
<v Speaker 1>sub project.

00:17:30.215 --> 00:17:31.095
<v Speaker 1>There

00:17:32.215 --> 00:17:33.895
<v Speaker 1>we go. And we can now add more

00:17:33.895 --> 00:17:36.375
<v Speaker 1>secrets at a different level. So we get

00:17:36.375 --> 00:17:39.575
<v Speaker 1>a password, b b c one two three,

00:17:39.575 --> 00:17:40.135
<v Speaker 1>and save.

00:17:42.200 --> 00:17:43.960
<v Speaker 1>So you can give people access. So it's

00:17:43.960 --> 00:17:45.559
<v Speaker 1>kinda like a security boundary. I could say

00:17:45.559 --> 00:17:47.480
<v Speaker 1>that you only have access to the subproject

00:17:47.480 --> 00:17:49.640
<v Speaker 1>secrets, whereas I would have access to all

00:17:49.640 --> 00:17:50.120
<v Speaker 1>of the So

00:17:51.400 --> 00:17:52.760
<v Speaker 1>it you know, if you got a model

00:17:52.760 --> 00:17:54.440
<v Speaker 1>repository, for instance, this would be a good

00:17:54.440 --> 00:17:55.875
<v Speaker 1>way to do it. Or if you just

00:17:55.875 --> 00:17:58.195
<v Speaker 1>want to separate concerns, maybe you've got, like,

00:17:58.195 --> 00:18:01.475
<v Speaker 1>AWS secrets, Cloudflare secrets, and you wanna just

00:18:01.475 --> 00:18:03.155
<v Speaker 1>contain them all slightly separately,

00:18:03.235 --> 00:18:04.675
<v Speaker 1>then the folders are are quite a nice

00:18:04.675 --> 00:18:05.635
<v Speaker 1>way of doing that.

00:18:05.955 --> 00:18:07.715
<v Speaker 1>And they also implement one of my favorite

00:18:07.715 --> 00:18:07.955
<v Speaker 1>features

00:18:09.140 --> 00:18:11.619
<v Speaker 1>from Doppler, which is secrets referencing.

00:18:12.980 --> 00:18:15.379
<v Speaker 1>So if we come into the subproject,

00:18:16.659 --> 00:18:17.859
<v Speaker 1>we could say

00:18:20.100 --> 00:18:21.595
<v Speaker 1>root secret,

00:18:21.595 --> 00:18:23.995
<v Speaker 1>and then that can actually be a reference.

00:18:23.995 --> 00:18:25.434
<v Speaker 1>I'm not gonna be able to remember how

00:18:25.434 --> 00:18:26.475
<v Speaker 1>to do this now.

00:18:26.635 --> 00:18:27.595
<v Speaker 1>Let's see.

00:18:28.635 --> 00:18:29.595
<v Speaker 1>It's

00:18:29.595 --> 00:18:30.794
<v Speaker 1>something like

00:18:31.914 --> 00:18:34.155
<v Speaker 1>secret, and it takes a full path

00:18:34.360 --> 00:18:36.840
<v Speaker 1>within this project. So we could say something

00:18:36.840 --> 00:18:37.479
<v Speaker 1>like that.

00:18:37.880 --> 00:18:40.120
<v Speaker 1>So you can reference up and down the

00:18:40.120 --> 00:18:42.919
<v Speaker 1>stack. You cannot reference across project, which is

00:18:42.919 --> 00:18:44.679
<v Speaker 1>something that Doppler does quite well.

00:18:45.480 --> 00:18:47.640
<v Speaker 1>But I think I kinda prefer the approach

00:18:47.640 --> 00:18:49.159
<v Speaker 1>that Infisical have taken with it.

00:18:50.265 --> 00:18:50.825
<v Speaker 1>So

00:18:51.385 --> 00:18:53.065
<v Speaker 1>I just think it's a cool project.

00:18:53.225 --> 00:18:55.865
<v Speaker 1>You know, full disclosure, it's not something that

00:18:55.865 --> 00:18:56.665
<v Speaker 1>I'm running

00:18:57.225 --> 00:18:58.825
<v Speaker 1>for any real project

00:18:59.145 --> 00:18:59.865
<v Speaker 1>yet,

00:19:00.425 --> 00:19:01.705
<v Speaker 1>but I just think it's something that I

00:19:01.705 --> 00:19:03.945
<v Speaker 1>may use for secrets management moving forward.

00:19:04.530 --> 00:19:06.370
<v Speaker 1>So I'm still fully in the one password

00:19:06.370 --> 00:19:07.650
<v Speaker 1>camp right now, and I use the one

00:19:07.650 --> 00:19:09.970
<v Speaker 1>password still live in a very similar fashion.

00:19:10.370 --> 00:19:12.930
<v Speaker 1>But I do like the integrations that they

00:19:12.930 --> 00:19:15.730
<v Speaker 1>offer to sync to GitHub, to Cloudflare.

00:19:15.810 --> 00:19:17.330
<v Speaker 1>In fact, if we look at the integrations,

00:19:17.330 --> 00:19:19.585
<v Speaker 1>it's pretty vast. Right? So you can go

00:19:19.585 --> 00:19:22.544
<v Speaker 1>to AWS secrets manager, CircleCI,

00:19:22.865 --> 00:19:24.705
<v Speaker 1>GitHub, fly dot I o, which I'm starting

00:19:24.705 --> 00:19:27.105
<v Speaker 1>to use a bit more. Cloudflare pages, I

00:19:27.105 --> 00:19:27.664
<v Speaker 1>use

00:19:28.784 --> 00:19:30.224
<v Speaker 1>I use an awful lot.

00:19:30.865 --> 00:19:32.945
<v Speaker 1>And then, obviously, Terraform cloud and stuff. So

00:19:32.945 --> 00:19:33.985
<v Speaker 1>it's just it's just new. And

00:19:34.760 --> 00:19:35.960
<v Speaker 1>the last thing I'll say,

00:19:36.360 --> 00:19:38.760
<v Speaker 1>these framework integrations are fantastic too. So, like,

00:19:38.760 --> 00:19:40.600
<v Speaker 1>even if you don't want to run Infisical

00:19:40.600 --> 00:19:42.760
<v Speaker 1>run on your CLI, you can actually just

00:19:42.760 --> 00:19:45.240
<v Speaker 1>have the JavaScript SDK pull secret out within

00:19:45.240 --> 00:19:46.520
<v Speaker 1>the code if you're Oh, wow.

00:19:46.920 --> 00:19:48.645
<v Speaker 1>And as long as you have a service

00:19:48.645 --> 00:19:51.525
<v Speaker 1>account token to speak to Infisical,

00:19:51.765 --> 00:19:54.005
<v Speaker 1>then it will just work. So that's another

00:19:54.005 --> 00:19:55.445
<v Speaker 1>pretty neat way of doing it as well.

00:19:55.445 --> 00:19:57.365
<v Speaker 1>I wonder if there's a quick code sample

00:19:57.365 --> 00:19:59.605
<v Speaker 1>I could show here. Where's

00:19:59.605 --> 00:20:00.885
<v Speaker 1>and React should be enough.

00:20:03.750 --> 00:20:04.549
<v Speaker 1>Nope.

00:20:06.870 --> 00:20:08.470
<v Speaker 1>Framework integration.

00:20:08.789 --> 00:20:10.309
<v Speaker 1>I'll go next. Nope.

00:20:11.750 --> 00:20:13.110
<v Speaker 1>Nodeto.net.

00:20:13.110 --> 00:20:14.630
<v Speaker 1>Am I not seeing something here?

00:20:18.585 --> 00:20:19.784
<v Speaker 1>Where's the code?

00:20:20.184 --> 00:20:22.905
<v Speaker 1>Never mind. There is a complete SDK. That's

00:20:22.905 --> 00:20:25.304
<v Speaker 1>awesome. I just put the Cal node there.

00:20:26.424 --> 00:20:27.625
<v Speaker 1>I feel like I have to find it

00:20:27.625 --> 00:20:29.270
<v Speaker 1>there. There we go. I was on it

00:20:29.270 --> 00:20:29.989
<v Speaker 1>recently.

00:20:30.630 --> 00:20:31.190
<v Speaker 1>So

00:20:31.510 --> 00:20:33.590
<v Speaker 1>yeah. So you can just create your client,

00:20:33.590 --> 00:20:35.190
<v Speaker 1>and they have service account tokens so you

00:20:35.190 --> 00:20:37.269
<v Speaker 1>don't have to pretend to be a person.

00:20:37.510 --> 00:20:38.950
<v Speaker 1>And then you just say, hey. Get my

00:20:38.950 --> 00:20:41.030
<v Speaker 1>secret, and then it's available in your application.

00:20:41.030 --> 00:20:43.274
<v Speaker 1>So, yeah, really cool project. And then

00:20:43.674 --> 00:20:45.915
<v Speaker 1>hopefully, get more stuff or get some stuff

00:20:45.915 --> 00:20:47.755
<v Speaker 1>moved on to it at some point. I

00:20:47.755 --> 00:20:50.475
<v Speaker 0>love it. I'm 100% gonna self host some

00:20:50.475 --> 00:20:53.035
<v Speaker 0>of this. Yeah. I believe the requirements are

00:20:53.035 --> 00:20:55.820
<v Speaker 1>just it's a Node JS TypeScript application.

00:20:55.980 --> 00:20:58.379
<v Speaker 1>It requires a database, which is MongoDB.

00:20:58.380 --> 00:20:59.899
<v Speaker 1>And as long as you satisfy both of

00:20:59.899 --> 00:21:01.979
<v Speaker 1>those, then you have a fully

00:21:02.220 --> 00:21:05.499
<v Speaker 1>managed secrets environment that you can run anywhere.

00:21:05.659 --> 00:21:08.140
<v Speaker 1>They actually have a starter thing.

00:21:08.674 --> 00:21:10.515
<v Speaker 1>So if you come to Infisical

00:21:10.515 --> 00:21:12.995
<v Speaker 1>on GitHub, they have like a one click

00:21:12.995 --> 00:21:14.995
<v Speaker 1>deploy to EC two and Digital Ocean as

00:21:14.995 --> 00:21:17.634
<v Speaker 1>well. Wow. Very cool. Nice.

00:21:17.875 --> 00:21:20.355
<v Speaker 0>And they can self host with Docker Compose,

00:21:20.355 --> 00:21:21.554
<v Speaker 0>so I'm gonna go put it on my

00:21:21.554 --> 00:21:22.275
<v Speaker 0>Lightwhale box.

00:21:24.080 --> 00:21:26.560
<v Speaker 1>Yeah. I was I was considering doing a

00:21:26.560 --> 00:21:28.160
<v Speaker 1>Docker Compose up as part of the demo

00:21:28.160 --> 00:21:30.000
<v Speaker 1>and I thought, no, that's not important. Just

00:21:30.000 --> 00:21:32.640
<v Speaker 1>show the product. So there we go. Very

00:21:32.640 --> 00:21:34.400
<v Speaker 0>sweet. Good demos today.

00:21:34.640 --> 00:21:36.160
<v Speaker 1>Yeah. I think I'm gonna have to go

00:21:36.160 --> 00:21:37.675
<v Speaker 1>a bit more alpha for the next one

00:21:37.675 --> 00:21:40.075
<v Speaker 1>considering you showed two things that have barely

00:21:40.075 --> 00:21:41.195
<v Speaker 1>any documentation.

00:21:41.355 --> 00:21:43.995
<v Speaker 0>You've got things with docs and, you know,

00:21:43.995 --> 00:21:47.515
<v Speaker 0>Docker Compose files and, you know, that way

00:21:47.755 --> 00:21:48.875
<v Speaker 0>too beta for me.

00:21:49.559 --> 00:21:51.399
<v Speaker 0>Let's get get a little deeper here.

00:21:51.880 --> 00:21:53.880
<v Speaker 1>It's still a 0.9

00:21:53.880 --> 00:21:56.360
<v Speaker 1>release. So, you know, it's it's still very

00:21:56.360 --> 00:21:58.759
<v Speaker 1>early but the you know, I think that

00:21:58.759 --> 00:22:01.159
<v Speaker 1>project's been around about five months now

00:22:02.345 --> 00:22:04.585
<v Speaker 1>And I think they're funded. I think it

00:22:04.585 --> 00:22:06.345
<v Speaker 1>took off when people seen it and as

00:22:06.345 --> 00:22:07.785
<v Speaker 1>they're now trying to build a business around

00:22:07.785 --> 00:22:09.145
<v Speaker 1>it. So best of luck to them. Yeah.

00:22:09.145 --> 00:22:11.465
<v Speaker 0>I love this. This is great. Gonna make

00:22:11.465 --> 00:22:13.785
<v Speaker 0>some. Alright. Awesome. Good week. Well, that's I

00:22:13.785 --> 00:22:15.065
<v Speaker 0>like this one. Yeah.

00:22:15.385 --> 00:22:17.400
<v Speaker 1>See you next week. Cheers. If you wanna

00:22:17.400 --> 00:22:19.160
<v Speaker 1>hear why we showed off these tools, check

00:22:19.160 --> 00:22:22.520
<v Speaker 1>out the podcast available at alphabets.fm.

00:22:22.680 --> 00:22:24.280
<v Speaker 1>Until next week, see you soon.
