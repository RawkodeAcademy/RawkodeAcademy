WEBVTT

NOTE
Transcription provided by Deepgram
Request Id: 779f213a-9b64-42b9-8b63-9964ee07d3af
Created: 2025-04-29T17:33:35.232Z
Duration: 5435.926
Channels: 1

00:00:53.880 --> 00:00:55.800
<v Speaker 0>Hello and welcome

00:00:55.880 --> 00:00:58.600
<v Speaker 0>to the Rawkode Academy and today's episode of

00:00:58.600 --> 00:01:01.079
<v Speaker 0>Rawkode live. Today, we are taking a look

00:01:01.079 --> 00:01:03.800
<v Speaker 0>at Docker's BuildKit and BuildX.

00:01:04.120 --> 00:01:05.800
<v Speaker 0>Now before we do that, there's a little

00:01:05.800 --> 00:01:08.675
<v Speaker 0>bit of housekeeping. First and foremost, please subscribe

00:01:08.675 --> 00:01:09.715
<v Speaker 0>to the channel,

00:01:09.875 --> 00:01:11.955
<v Speaker 0>tick that bell and you will get notifications

00:01:11.955 --> 00:01:14.035
<v Speaker 0>for all new episodes of Rawkode Live and

00:01:14.035 --> 00:01:16.195
<v Speaker 0>Clustered and everything else in between.

00:01:16.915 --> 00:01:18.835
<v Speaker 0>Also check out the membership options if you

00:01:18.835 --> 00:01:20.595
<v Speaker 0>wanna take advantage of some of the courses

00:01:20.595 --> 00:01:22.275
<v Speaker 0>that we have coming out on the academy.

00:01:22.440 --> 00:01:24.760
<v Speaker 0>Currently, are working through the complete guide to

00:01:24.760 --> 00:01:25.560
<v Speaker 0>InfluxDB

00:01:25.560 --> 00:01:26.200
<v Speaker 0>two.

00:01:26.760 --> 00:01:28.840
<v Speaker 0>Also, we have a very active Discord server

00:01:28.840 --> 00:01:30.760
<v Speaker 0>available at Rawkode.chat.

00:01:30.840 --> 00:01:32.680
<v Speaker 0>There's over 500 of us in there talking

00:01:32.680 --> 00:01:35.560
<v Speaker 0>Docker, Cloud Native, Kubernetes and everything in between.

00:01:36.075 --> 00:01:37.835
<v Speaker 0>So come on, say hello, and I look

00:01:37.835 --> 00:01:38.955
<v Speaker 0>forward to meeting you.

00:01:39.915 --> 00:01:42.955
<v Speaker 0>Okay. Today's session, BuildKit and Buildx.

00:01:42.955 --> 00:01:45.195
<v Speaker 0>I am joined by Thomas Tighe, a maintainer

00:01:45.195 --> 00:01:47.835
<v Speaker 0>of BuildKit and an engineer at Docker. Hi

00:01:47.835 --> 00:01:50.330
<v Speaker 0>there, Thomas. How are you? Hi, David. How

00:01:50.330 --> 00:01:50.890
<v Speaker 1>are you?

00:01:51.210 --> 00:01:54.010
<v Speaker 0>I'm doing alright. Thank you. Can you just

00:01:54.010 --> 00:01:56.010
<v Speaker 0>for anyone who is not familiar with you,

00:01:56.010 --> 00:01:57.530
<v Speaker 0>although I'm sure they have all seen your

00:01:57.530 --> 00:02:00.090
<v Speaker 0>GitHub avatar on every repository in the Docker

00:02:00.090 --> 00:02:00.970
<v Speaker 0>ecosystem.

00:02:01.050 --> 00:02:02.890
<v Speaker 0>But just tell us who

00:02:02.890 --> 00:02:04.250
<v Speaker 0>you are and a little bit about you,

00:02:04.250 --> 00:02:04.330
<v Speaker 0>please.

00:02:05.265 --> 00:02:08.065
<v Speaker 1>Yeah. So I work at Docker. I'm a

00:02:08.225 --> 00:02:10.384
<v Speaker 1>I've been, like, a Docker maintainer for quite

00:02:10.384 --> 00:02:11.825
<v Speaker 1>some long time.

00:02:12.785 --> 00:02:15.585
<v Speaker 1>Think bunch of different stuff there in the

00:02:15.585 --> 00:02:16.705
<v Speaker 1>early days, like

00:02:17.410 --> 00:02:19.330
<v Speaker 1>like some some storage

00:02:19.330 --> 00:02:20.370
<v Speaker 1>stuff and

00:02:21.570 --> 00:02:23.570
<v Speaker 1>and d and the ones working integrations.

00:02:23.570 --> 00:02:25.810
<v Speaker 1>And and the last years, I've been,

00:02:26.290 --> 00:02:28.130
<v Speaker 1>like, more looking at the build side.

00:02:28.930 --> 00:02:30.930
<v Speaker 1>So I started with

00:02:31.485 --> 00:02:33.965
<v Speaker 1>with the multistage builds that's

00:02:33.965 --> 00:02:36.445
<v Speaker 1>happened, like, a couple of years ago already.

00:02:36.845 --> 00:02:37.725
<v Speaker 1>And then

00:02:38.045 --> 00:02:40.685
<v Speaker 1>and then, like, kind of, like, boost up

00:02:40.685 --> 00:02:43.245
<v Speaker 1>the BuildKit project and later on, like, BuildKit

00:02:43.245 --> 00:02:44.285
<v Speaker 1>project as well for

00:02:44.820 --> 00:02:45.700
<v Speaker 1>And

00:02:46.660 --> 00:02:49.060
<v Speaker 1>yeah. I got I guess that that that's

00:02:49.060 --> 00:02:51.300
<v Speaker 1>where if if you've seen my amateur, then

00:02:51.300 --> 00:02:53.700
<v Speaker 1>then these are probably probably the repositories there.

00:02:54.180 --> 00:02:56.100
<v Speaker 0>Awesome. Well, thank you for that.

00:02:56.500 --> 00:03:00.175
<v Speaker 0>So, yeah, multistage builds were just awesome. I

00:03:00.175 --> 00:03:02.175
<v Speaker 0>think everybody makes so excited with that. And

00:03:02.175 --> 00:03:04.335
<v Speaker 0>then the BuildKit projects just seems to be

00:03:04.335 --> 00:03:06.175
<v Speaker 0>bringing more and more functionality

00:03:06.175 --> 00:03:07.855
<v Speaker 0>to to what we need to build our

00:03:07.855 --> 00:03:10.095
<v Speaker 0>images in an efficient and, you know, super

00:03:10.095 --> 00:03:10.735
<v Speaker 0>cashed way.

00:03:11.700 --> 00:03:13.540
<v Speaker 0>But for anyone who's not sorry. Let me

00:03:13.540 --> 00:03:14.020
<v Speaker 0>go.

00:03:14.580 --> 00:03:15.140
<v Speaker 1>Yeah.

00:03:16.340 --> 00:03:18.740
<v Speaker 1>Hope they're going in in in the same

00:03:18.740 --> 00:03:21.060
<v Speaker 1>direction. Like, it's it's a it's just like

00:03:21.380 --> 00:03:22.820
<v Speaker 1>I guess it takes a little bit time

00:03:22.820 --> 00:03:25.345
<v Speaker 1>for for, like, the main mainstream

00:03:25.585 --> 00:03:27.505
<v Speaker 1>places to catch up. So we are, like

00:03:27.745 --> 00:03:29.905
<v Speaker 1>at the moment, like, very loud. If I

00:03:29.905 --> 00:03:31.825
<v Speaker 1>if I look at the, like, the

00:03:32.225 --> 00:03:34.145
<v Speaker 1>Dockerfile talks or something like this, then, like,

00:03:34.145 --> 00:03:36.625
<v Speaker 1>every every talk is, like, multistage builds. So

00:03:36.625 --> 00:03:39.739
<v Speaker 1>it's like but, like, actually, it's, like, happened,

00:03:39.739 --> 00:03:41.819
<v Speaker 1>like, already, like, a three years ago. So,

00:03:41.819 --> 00:03:43.500
<v Speaker 1>hopefully, like like

00:03:43.980 --> 00:03:45.500
<v Speaker 1>like, in in a year or or two,

00:03:45.500 --> 00:03:47.739
<v Speaker 1>we will see, like or 50 to have,

00:03:47.739 --> 00:03:49.180
<v Speaker 1>like, a synchronous session.

00:03:50.140 --> 00:03:50.860
<v Speaker 0>Nice.

00:03:51.180 --> 00:03:52.459
<v Speaker 0>Okay. So let's

00:03:52.745 --> 00:03:54.584
<v Speaker 0>break down the two different components we're we're

00:03:54.584 --> 00:03:56.105
<v Speaker 0>looking at today. We're gonna be looking at

00:03:56.105 --> 00:03:59.225
<v Speaker 0>something called BuildKit and something called BuildX.

00:03:59.385 --> 00:04:01.305
<v Speaker 0>Can we just explain what both of those

00:04:01.305 --> 00:04:02.585
<v Speaker 0>are to the audience?

00:04:03.385 --> 00:04:05.224
<v Speaker 1>Sure. Sure. So

00:04:06.300 --> 00:04:07.020
<v Speaker 1>so,

00:04:07.340 --> 00:04:09.900
<v Speaker 1>of course, like, Docker itself has always had,

00:04:09.900 --> 00:04:11.980
<v Speaker 1>like, a mount well, sorry, like, a build

00:04:11.980 --> 00:04:14.700
<v Speaker 1>endpoint. Right? So the there's Docker Docker build

00:04:14.700 --> 00:04:16.779
<v Speaker 1>command. Everyone knows about it. It has been

00:04:16.779 --> 00:04:17.900
<v Speaker 1>there for the beginning.

00:04:18.220 --> 00:04:20.940
<v Speaker 1>So what BuildKit is is basically, like, rethinking

00:04:20.940 --> 00:04:24.185
<v Speaker 1>the the background component of this from break,

00:04:24.185 --> 00:04:25.625
<v Speaker 1>like, ground up, and it's done in a

00:04:25.625 --> 00:04:28.665
<v Speaker 1>separate project so that so that not only

00:04:28.665 --> 00:04:30.265
<v Speaker 1>Docker can use it and

00:04:30.505 --> 00:04:31.305
<v Speaker 1>and

00:04:31.544 --> 00:04:32.585
<v Speaker 1>and we can, like,

00:04:33.890 --> 00:04:35.810
<v Speaker 1>basically, like, rethink, like, what it what it

00:04:35.810 --> 00:04:37.810
<v Speaker 1>means to have, like, a cool builder in,

00:04:37.810 --> 00:04:40.050
<v Speaker 1>like, a modern container ages.

00:04:40.370 --> 00:04:41.330
<v Speaker 1>And and

00:04:42.210 --> 00:04:44.530
<v Speaker 1>one thing for maybe or not about BuildKit

00:04:44.530 --> 00:04:46.290
<v Speaker 1>is that might be a little bit confusing

00:04:46.290 --> 00:04:48.530
<v Speaker 1>is that if you're just, like, building images,

00:04:49.634 --> 00:04:51.555
<v Speaker 1>you don't necessarily need to care about BuildKit

00:04:51.555 --> 00:04:53.395
<v Speaker 1>itself that much. Like, it's more like an

00:04:53.395 --> 00:04:55.475
<v Speaker 1>internal tool. It's more like builder.

00:04:55.794 --> 00:04:58.034
<v Speaker 1>But if you're, like, building your own builders,

00:04:58.034 --> 00:04:59.955
<v Speaker 1>if you're, like, developing a language and want

00:04:59.955 --> 00:05:02.354
<v Speaker 1>to make sure that it builds fine in

00:05:01.580 --> 00:05:03.740
<v Speaker 1>in containers. If you want to, like, contribute

00:05:03.740 --> 00:05:06.060
<v Speaker 1>to BuildKit and things like that, then you

00:05:06.060 --> 00:05:08.460
<v Speaker 1>then you would look at BuildKit.

00:05:08.460 --> 00:05:09.820
<v Speaker 1>If you're just building images,

00:05:10.060 --> 00:05:12.060
<v Speaker 1>you're probably just using a tool that's using

00:05:12.060 --> 00:05:14.535
<v Speaker 1>BuildKit under the hood like like Docker or

00:05:14.535 --> 00:05:16.535
<v Speaker 1>or or, like, there there's tons of other

00:05:16.535 --> 00:05:19.015
<v Speaker 1>other ones as well. So

00:05:20.375 --> 00:05:23.175
<v Speaker 1>although although, like, sometimes we, like, use BuildKit

00:05:23.175 --> 00:05:25.255
<v Speaker 1>also as, like, an umbrella term to just,

00:05:25.255 --> 00:05:27.175
<v Speaker 1>like, talk about, like, the it's like a

00:05:27.175 --> 00:05:30.280
<v Speaker 1>modern stack or something like this. But but

00:05:30.919 --> 00:05:33.000
<v Speaker 1>but yeah. Mostly, it's like a back end

00:05:33.000 --> 00:05:35.479
<v Speaker 1>back end component. It's very important for making

00:05:35.479 --> 00:05:37.560
<v Speaker 1>all the builds efficient and all those things.

00:05:37.639 --> 00:05:39.880
<v Speaker 1>Not necessarily something that, like, a user actually

00:05:39.880 --> 00:05:40.600
<v Speaker 1>needs to care about.

00:05:41.705 --> 00:05:44.265
<v Speaker 0>Alright. Awesome. And can we tell people what

00:05:44.265 --> 00:05:45.865
<v Speaker 0>BuildKit is then?

00:05:46.105 --> 00:05:48.665
<v Speaker 1>So, yeah, the BuildKit is more like a

00:05:48.665 --> 00:05:50.185
<v Speaker 1>Docker side of

00:05:50.505 --> 00:05:51.705
<v Speaker 1>of a

00:05:52.505 --> 00:05:54.105
<v Speaker 1>component where we

00:05:54.300 --> 00:05:54.940
<v Speaker 1>we like

00:05:56.300 --> 00:05:58.379
<v Speaker 1>where we develop our, like, Docker UI for

00:05:58.379 --> 00:05:59.900
<v Speaker 1>for the build. So these were, like, the

00:05:59.900 --> 00:06:02.380
<v Speaker 1>Docker Docker user experiences.

00:06:02.539 --> 00:06:04.699
<v Speaker 1>Like, on BuildKit side, we're, like, very generic.

00:06:04.699 --> 00:06:06.940
<v Speaker 1>We just we don't want to be opinionated

00:06:06.940 --> 00:06:08.634
<v Speaker 1>or anything like this. We just want to

00:06:08.634 --> 00:06:10.155
<v Speaker 1>provide the back end that that works for

00:06:10.155 --> 00:06:12.955
<v Speaker 1>everyone, for for every use case. In build

00:06:13.115 --> 00:06:16.395
<v Speaker 1>BuildKit side, we're taking, like, the Docker user

00:06:16.395 --> 00:06:17.675
<v Speaker 1>experience that

00:06:18.474 --> 00:06:21.115
<v Speaker 1>the the users know and just tries to,

00:06:21.115 --> 00:06:21.275
<v Speaker 1>like,

00:06:22.210 --> 00:06:23.729
<v Speaker 1>add add new stuff when it build on

00:06:23.729 --> 00:06:24.449
<v Speaker 1>top of it.

00:06:24.930 --> 00:06:27.569
<v Speaker 1>BuildKit itself is like a CLI plug in

00:06:27.569 --> 00:06:30.129
<v Speaker 1>for Docker. So it comes with Docker. It's

00:06:30.129 --> 00:06:31.810
<v Speaker 1>like a Docker command, but it's actually, like,

00:06:31.810 --> 00:06:33.250
<v Speaker 1>a stand alone binary.

00:06:33.889 --> 00:06:36.815
<v Speaker 1>So we can develop it separately and and

00:06:36.815 --> 00:06:38.095
<v Speaker 1>in addition to

00:06:38.574 --> 00:06:40.415
<v Speaker 1>to, like, just like a build command, there's

00:06:40.415 --> 00:06:42.415
<v Speaker 1>also, like, a ton of other command required.

00:06:42.415 --> 00:06:44.014
<v Speaker 1>I'm sure we we get into there, but

00:06:44.014 --> 00:06:46.574
<v Speaker 1>what what what's in there, but, like, build

00:06:46.574 --> 00:06:48.735
<v Speaker 1>exit. But when the old build command is

00:06:48.735 --> 00:06:51.490
<v Speaker 1>just, one build command, Then build exit, like,

00:06:51.490 --> 00:06:53.250
<v Speaker 1>10 commands or something like that. So it

00:06:53.250 --> 00:06:55.570
<v Speaker 1>it, like, it provides a lot lots of

00:06:55.570 --> 00:06:58.210
<v Speaker 1>other use cases that that weren't there initially.

00:06:58.530 --> 00:07:00.610
<v Speaker 0>Nice. Well, we will be playing with both

00:07:00.610 --> 00:07:02.050
<v Speaker 0>of these in just a minute so people

00:07:02.050 --> 00:07:04.530
<v Speaker 0>will get to to see them hands on,

00:07:04.530 --> 00:07:06.485
<v Speaker 0>which would be awesome. I think there's just

00:07:06.485 --> 00:07:08.165
<v Speaker 0>one more thing I'd like to kinda talk

00:07:08.165 --> 00:07:09.925
<v Speaker 0>about before we move into the hands on

00:07:09.925 --> 00:07:10.645
<v Speaker 0>component.

00:07:10.725 --> 00:07:12.405
<v Speaker 0>And before I say that, if anyone has

00:07:12.405 --> 00:07:14.405
<v Speaker 0>questions in the audience, please drop them into

00:07:14.405 --> 00:07:15.685
<v Speaker 0>the chat. We'll keep an eye on it,

00:07:15.685 --> 00:07:16.725
<v Speaker 0>and we'll do our best to answer them

00:07:16.725 --> 00:07:17.525
<v Speaker 0>as we go.

00:07:18.325 --> 00:07:20.165
<v Speaker 0>Okay. So my final question.

00:07:20.485 --> 00:07:21.205
<v Speaker 0>BuildKit.

00:07:21.660 --> 00:07:23.580
<v Speaker 0>Like, it just I don't I don't know

00:07:23.580 --> 00:07:25.500
<v Speaker 0>if it's just me. I wonder if you

00:07:25.500 --> 00:07:27.420
<v Speaker 0>feel the same from your side, but the

00:07:27.420 --> 00:07:30.540
<v Speaker 0>adoption of BuildKit across other tooling seems to

00:07:30.540 --> 00:07:32.940
<v Speaker 0>be the velocity of that just seems to

00:07:32.940 --> 00:07:35.020
<v Speaker 0>be going really fast. Like, I see BuildKit

00:07:35.020 --> 00:07:37.035
<v Speaker 0>being used as like a a cache or

00:07:37.035 --> 00:07:38.715
<v Speaker 0>a build layer for so many different projects

00:07:38.715 --> 00:07:40.635
<v Speaker 0>from, like, Dagger to Airfleet.

00:07:40.715 --> 00:07:42.395
<v Speaker 0>Is that something that you're seeing a lot

00:07:42.395 --> 00:07:43.755
<v Speaker 0>of uptake on as well?

00:07:46.315 --> 00:07:47.595
<v Speaker 1>Sure. And, well, like,

00:07:49.480 --> 00:07:51.240
<v Speaker 1>from my side, I'm I'm glad that it's

00:07:51.240 --> 00:07:52.920
<v Speaker 1>happened because, well, that that's what it was

00:07:52.920 --> 00:07:55.320
<v Speaker 1>meant for. Like, it's it's it's kind of

00:07:55.320 --> 00:07:55.880
<v Speaker 1>like

00:07:58.440 --> 00:07:59.720
<v Speaker 1>the standard, like,

00:08:00.200 --> 00:08:01.240
<v Speaker 1>when when we're, like,

00:08:02.335 --> 00:08:04.254
<v Speaker 1>doing any kind of build flows and, like,

00:08:04.254 --> 00:08:05.294
<v Speaker 1>including

00:08:05.294 --> 00:08:08.254
<v Speaker 1>containers in there, there's definitely, like, this shared

00:08:08.254 --> 00:08:10.895
<v Speaker 1>part, that's common part that's, like that's actually

00:08:10.895 --> 00:08:12.495
<v Speaker 1>very hard to develop, very hard to get

00:08:12.495 --> 00:08:15.055
<v Speaker 1>right. And, like and it doesn't make sense

00:08:15.055 --> 00:08:16.655
<v Speaker 1>for, like, every tool out there to try

00:08:16.655 --> 00:08:18.560
<v Speaker 1>to invent their own. Like, that that's how,

00:08:18.560 --> 00:08:18.960
<v Speaker 1>like,

00:08:19.680 --> 00:08:20.319
<v Speaker 1>the, like

00:08:21.199 --> 00:08:23.520
<v Speaker 1>even, like, the old Docker build, like, it

00:08:23.520 --> 00:08:26.879
<v Speaker 1>did something, like, just for for their use

00:08:26.879 --> 00:08:29.680
<v Speaker 1>case. So, like, didn't quite think of it

00:08:29.680 --> 00:08:31.685
<v Speaker 1>maybe true in the in the first first

00:08:31.685 --> 00:08:35.125
<v Speaker 1>version and, like, ended up something that's, like

00:08:35.684 --> 00:08:38.405
<v Speaker 1>some some cases work for Docker, didn't really,

00:08:38.405 --> 00:08:41.205
<v Speaker 1>like, allow further development, didn't in fact for

00:08:41.205 --> 00:08:43.445
<v Speaker 1>everyone anyone else. So, like,

00:08:45.560 --> 00:08:47.640
<v Speaker 1>so, yeah, that that's what BuildKit is for.

00:08:47.640 --> 00:08:48.600
<v Speaker 1>Like, like,

00:08:48.840 --> 00:08:49.960
<v Speaker 1>anytime you use

00:08:50.360 --> 00:08:52.840
<v Speaker 1>some kind of, like, a container as build

00:08:52.840 --> 00:08:54.520
<v Speaker 1>flow and you need caching support, you need

00:08:54.520 --> 00:08:57.160
<v Speaker 1>to need to be fast. Like like like,

00:08:57.160 --> 00:08:59.000
<v Speaker 1>that that's what you should be using.

00:08:59.765 --> 00:09:02.645
<v Speaker 0>Okay. Thank you. Alright. Well, let's get my

00:09:02.645 --> 00:09:05.205
<v Speaker 0>screen shared and try and work out what

00:09:05.205 --> 00:09:07.125
<v Speaker 0>we're going to do today.

00:09:07.365 --> 00:09:10.405
<v Speaker 0>So I've got the BuildKit repository here,

00:09:10.885 --> 00:09:12.325
<v Speaker 0>the BuildX repository here.

00:09:13.270 --> 00:09:16.310
<v Speaker 0>I have a local directory with two projects

00:09:16.310 --> 00:09:17.990
<v Speaker 0>that I'm familiar with, one in Go and

00:09:17.990 --> 00:09:18.950
<v Speaker 0>one in Rust,

00:09:19.430 --> 00:09:21.670
<v Speaker 0>and we have a shared Versus Code live

00:09:21.670 --> 00:09:23.510
<v Speaker 0>session so that we can both type as

00:09:23.510 --> 00:09:25.350
<v Speaker 0>we try to explore this.

00:09:26.070 --> 00:09:27.555
<v Speaker 0>So I believe what we're gonna do is

00:09:27.555 --> 00:09:30.115
<v Speaker 0>maybe start with a goal project, the blocks,

00:09:31.235 --> 00:09:32.834
<v Speaker 0>and try and take a look at some

00:09:32.834 --> 00:09:35.395
<v Speaker 0>of the new features that BuildKit exposes to

00:09:35.395 --> 00:09:37.795
<v Speaker 0>make our build system cache efficient

00:09:38.530 --> 00:09:40.770
<v Speaker 0>using multi stages and other things. I just

00:09:40.770 --> 00:09:42.290
<v Speaker 0>tried to explore some of these features that

00:09:42.290 --> 00:09:43.730
<v Speaker 0>BuildKit brings to the table.

00:09:44.290 --> 00:09:45.250
<v Speaker 0>This thing good?

00:09:45.570 --> 00:09:48.610
<v Speaker 1>Sure. Sure. Let's start with that one. Alright.

00:09:49.490 --> 00:09:52.210
<v Speaker 0>So here's the fun bit. Oh, well, thing.

00:09:53.075 --> 00:09:56.115
<v Speaker 0>And currently blocks doesn't build inside of a

00:09:56.115 --> 00:09:57.315
<v Speaker 0>Docker file. We

00:09:57.714 --> 00:10:00.195
<v Speaker 0>use GoReleaser and let's change that. So we're

00:10:00.195 --> 00:10:03.395
<v Speaker 0>gonna attempt to build our Go application and

00:10:03.395 --> 00:10:05.555
<v Speaker 0>a Docker file using a multistage builds

00:10:05.960 --> 00:10:07.960
<v Speaker 0>and take advantage of as much caching stuff

00:10:07.960 --> 00:10:09.240
<v Speaker 0>as we can as possible.

00:10:09.960 --> 00:10:11.560
<v Speaker 0>And I've heard a rumor as I've not

00:10:11.560 --> 00:10:12.600
<v Speaker 0>been able to try it yet that we

00:10:12.600 --> 00:10:14.440
<v Speaker 0>have the ability to build binaries out and

00:10:14.440 --> 00:10:15.720
<v Speaker 0>put them on the local machine and stuff.

00:10:15.720 --> 00:10:17.000
<v Speaker 0>So we're we're gonna try and explore this

00:10:17.000 --> 00:10:19.400
<v Speaker 0>and and get your knowledge and experience along

00:10:19.400 --> 00:10:20.360
<v Speaker 0>the way as we go to.

00:10:21.575 --> 00:10:24.135
<v Speaker 1>Sure. Sounds sounds good. Yeah. Yeah. Like, this

00:10:24.135 --> 00:10:25.975
<v Speaker 1>kind of Docker file definitely feels like that.

00:10:25.975 --> 00:10:27.575
<v Speaker 1>The biggest thing we can do in in

00:10:27.575 --> 00:10:30.135
<v Speaker 1>Docker files, like like like, if if if,

00:10:30.135 --> 00:10:32.455
<v Speaker 1>like, anyone watching this learns one thing, then,

00:10:32.455 --> 00:10:35.250
<v Speaker 1>like, don't don't, like, put binary or, like,

00:10:35.250 --> 00:10:37.250
<v Speaker 1>copy binary in in some type of time.

00:10:37.970 --> 00:10:40.449
<v Speaker 0>Yeah. We could we could definitely improve this.

00:10:40.449 --> 00:10:43.329
<v Speaker 0>So but Yeah. So so, yeah, like, I

00:10:43.329 --> 00:10:44.769
<v Speaker 1>assume, like, this one, you

00:10:45.305 --> 00:10:46.105
<v Speaker 1>you

00:10:46.904 --> 00:10:48.904
<v Speaker 1>you call it from, like, a make file.

00:10:48.904 --> 00:10:51.785
<v Speaker 1>Right? And and you you do, like, a

00:10:51.785 --> 00:10:54.425
<v Speaker 1>local go build and and then and then

00:10:54.425 --> 00:10:56.425
<v Speaker 1>you call Docker build after that there. Like,

00:10:56.425 --> 00:10:57.704
<v Speaker 1>if you look at

00:10:58.190 --> 00:10:59.470
<v Speaker 0>Yeah. We've got

00:11:00.830 --> 00:11:03.950
<v Speaker 0>go build here. So yeah. Not not perfect.

00:11:03.950 --> 00:11:05.470
<v Speaker 0>Right? We we let's get this into a

00:11:05.470 --> 00:11:08.750
<v Speaker 0>container. So Yeah. And and what what's the

00:11:08.750 --> 00:11:10.750
<v Speaker 1>other one? The the other one was generating

00:11:10.750 --> 00:11:11.790
<v Speaker 1>talks or something like that.

00:11:13.345 --> 00:11:15.265
<v Speaker 0>Yeah. We have a command that generates the

00:11:15.265 --> 00:11:16.465
<v Speaker 0>documentation. Yeah.

00:11:18.785 --> 00:11:20.945
<v Speaker 1>Well, we'll see where where we get to.

00:11:21.425 --> 00:11:22.945
<v Speaker 1>But we we can we

00:11:23.185 --> 00:11:24.785
<v Speaker 1>can maybe do something for this one as

00:11:24.785 --> 00:11:28.070
<v Speaker 1>well. Yeah. Alright. Awesome. We got some love

00:11:28.070 --> 00:11:30.870
<v Speaker 0>for BuildKit speak in the chat. So

00:11:31.110 --> 00:11:32.630
<v Speaker 0>we'll take a look at that as we

00:11:32.630 --> 00:11:33.750
<v Speaker 0>go, I'm sure.

00:11:34.870 --> 00:11:36.790
<v Speaker 0>And we have a couple of questions already.

00:11:36.790 --> 00:11:37.910
<v Speaker 0>I don't know if you wanna tackle them

00:11:37.910 --> 00:11:39.815
<v Speaker 0>now or not, but let's I'll let's mention

00:11:39.815 --> 00:11:41.014
<v Speaker 0>them and then you can decide if we

00:11:41.014 --> 00:11:42.774
<v Speaker 0>tackle them now or you bring them in

00:11:42.774 --> 00:11:45.495
<v Speaker 0>later. So Russell is asking, I'm hoping we

00:11:45.495 --> 00:11:47.415
<v Speaker 0>can find out some juicy details. I've never

00:11:47.415 --> 00:11:49.815
<v Speaker 0>heard juicy and Docker used together, but I

00:11:49.815 --> 00:11:52.230
<v Speaker 0>like it, Russell. And something like cache being

00:11:52.230 --> 00:11:54.790
<v Speaker 0>unprotected and a good target for injecting extras

00:11:54.790 --> 00:11:57.350
<v Speaker 0>into images. I'm

00:11:57.350 --> 00:11:59.750
<v Speaker 1>not sure I understand that question, Russell. Do

00:11:59.750 --> 00:11:59.910
<v Speaker 0>you?

00:12:02.795 --> 00:12:04.715
<v Speaker 1>The last part, maybe maybe not.

00:12:05.435 --> 00:12:06.955
<v Speaker 1>I think we'll get to, like, yeah, like,

00:12:06.955 --> 00:12:09.195
<v Speaker 1>the remote caching. Like, we we can we

00:12:09.195 --> 00:12:11.115
<v Speaker 1>we we'll probably cover that as one as

00:12:11.115 --> 00:12:12.475
<v Speaker 1>well. But first, I think we need to

00:12:12.475 --> 00:12:15.755
<v Speaker 1>fix up this Docker file. Alright. Okay. I'll

00:12:16.235 --> 00:12:17.755
<v Speaker 0>let's just do that first. You're right. We

00:12:17.755 --> 00:12:17.915
<v Speaker 0>should.

00:12:18.580 --> 00:12:21.380
<v Speaker 0>So let's pull up our why can't I

00:12:21.380 --> 00:12:22.260
<v Speaker 0>see? There we go.

00:12:23.940 --> 00:12:25.780
<v Speaker 0>So I'm assuming we're gonna use a

00:12:26.020 --> 00:12:29.300
<v Speaker 0>multistage build here and maybe start with, like,

00:12:29.300 --> 00:12:30.740
<v Speaker 0>a a goal based image.

00:12:32.295 --> 00:12:34.055
<v Speaker 1>Yeah. I think we can, like,

00:12:35.894 --> 00:12:37.495
<v Speaker 1>just put, like, a goal and something in

00:12:37.495 --> 00:12:38.214
<v Speaker 1>here. Right?

00:12:40.055 --> 00:12:41.735
<v Speaker 0>Yeah. We're we can we can first do,

00:12:41.735 --> 00:12:44.214
<v Speaker 1>like, a very simple one. So, like,

00:12:47.290 --> 00:12:48.730
<v Speaker 1>that that's also

00:12:48.890 --> 00:12:51.130
<v Speaker 1>not good, but, like, show

00:12:51.210 --> 00:12:53.290
<v Speaker 1>that, like like, it's not that hard.

00:12:56.090 --> 00:12:58.490
<v Speaker 1>And basically do the same same whatever build

00:12:58.490 --> 00:12:59.450
<v Speaker 1>you had in here. Right?

00:13:02.945 --> 00:13:04.705
<v Speaker 1>I don't know. Or it's something like this,

00:13:04.705 --> 00:13:05.265
<v Speaker 1>sir.

00:13:06.625 --> 00:13:08.145
<v Speaker 0>Yeah. And let me just I think that

00:13:08.145 --> 00:13:11.025
<v Speaker 0>was pretty much spot on for the command.

00:13:12.065 --> 00:13:13.904
<v Speaker 0>I don't know if we do a Google

00:13:13.904 --> 00:13:16.145
<v Speaker 0>build command box, but I'll double check.

00:13:17.780 --> 00:13:19.860
<v Speaker 0>Yeah. I'll just copy this.

00:13:20.740 --> 00:13:24.580
<v Speaker 1>I see MD. Okay. Yeah. So we'll

00:13:24.580 --> 00:13:25.220
<v Speaker 0>need

00:13:29.780 --> 00:13:30.420
<v Speaker 0>okay.

00:13:30.900 --> 00:13:32.100
<v Speaker 0>So in theory,

00:13:33.475 --> 00:13:35.395
<v Speaker 0>this should actually give us the exact same

00:13:35.395 --> 00:13:37.475
<v Speaker 0>thing, but without a local build step.

00:13:39.395 --> 00:13:42.035
<v Speaker 1>Yes. Well, like, you have Ubuntu in here.

00:13:42.035 --> 00:13:44.835
<v Speaker 1>Like, I I just put Alpine because, like,

00:13:45.450 --> 00:13:48.650
<v Speaker 1>I I promote my stuff. But but,

00:13:48.650 --> 00:13:50.330
<v Speaker 1>yeah, like, that doesn't matter. Like, it could

00:13:50.330 --> 00:13:51.610
<v Speaker 1>be it could be Ubuntu in here as

00:13:51.610 --> 00:13:52.090
<v Speaker 1>well.

00:13:53.370 --> 00:13:55.210
<v Speaker 1>And yeah. And and, of course, like, the

00:13:55.210 --> 00:13:57.210
<v Speaker 1>benefit of this one is that

00:13:58.135 --> 00:13:59.095
<v Speaker 1>is that

00:14:00.455 --> 00:14:03.815
<v Speaker 1>whenever someone, like, check checks out your repository,

00:14:04.535 --> 00:14:06.214
<v Speaker 1>they don't need to have exact setup as

00:14:06.214 --> 00:14:07.895
<v Speaker 1>as you have. Right? Like,

00:14:09.175 --> 00:14:11.495
<v Speaker 1>don't need to do this part of the

00:14:11.495 --> 00:14:14.140
<v Speaker 1>build on the on the host and part

00:14:14.140 --> 00:14:15.980
<v Speaker 1>of it in the container. Like, everything is

00:14:15.980 --> 00:14:18.540
<v Speaker 1>in a container. Like, everything is defined by

00:14:18.540 --> 00:14:20.540
<v Speaker 1>by you as a project owner. You always

00:14:20.540 --> 00:14:23.019
<v Speaker 1>get the get the same same versions everywhere

00:14:23.019 --> 00:14:25.019
<v Speaker 1>and and things like that. Like, you can

00:14:25.019 --> 00:14:25.420
<v Speaker 1>even, like,

00:14:26.805 --> 00:14:29.125
<v Speaker 1>just be nice in here and definitely configure

00:14:29.125 --> 00:14:30.644
<v Speaker 1>about this. I

00:14:31.605 --> 00:14:32.884
<v Speaker 1>don't know if you use code to one

00:14:32.884 --> 00:14:34.084
<v Speaker 1>seventeen at there.

00:14:34.805 --> 00:14:36.964
<v Speaker 0>Oh, yeah. Well, it's, one sixteen minimum because

00:14:36.964 --> 00:14:38.884
<v Speaker 0>we do use go embed on this project.

00:14:38.884 --> 00:14:40.245
<v Speaker 0>So one seventeen, that'll be alright.

00:14:41.899 --> 00:14:44.139
<v Speaker 1>Okay. Yeah. I keep them even, like

00:14:44.620 --> 00:14:46.540
<v Speaker 1>again, if you want to, you could make

00:14:46.540 --> 00:14:48.779
<v Speaker 1>data, like, a best matrix, make this

00:14:49.100 --> 00:14:51.500
<v Speaker 1>changeable and and things like that. Right? So

00:14:51.740 --> 00:14:52.540
<v Speaker 1>but, of course, like,

00:14:53.795 --> 00:14:55.555
<v Speaker 1>what's what's bad about this one,

00:14:56.035 --> 00:14:58.274
<v Speaker 1>right, is that your source code is still

00:14:58.274 --> 00:14:58.915
<v Speaker 1>in here.

00:14:59.235 --> 00:15:01.154
<v Speaker 1>You have the whole cover on time in

00:15:01.154 --> 00:15:03.394
<v Speaker 1>here, things like that. Like, you don't you

00:15:03.394 --> 00:15:04.595
<v Speaker 1>don't want those. Right?

00:15:05.555 --> 00:15:07.950
<v Speaker 1>So so, yeah, let's let's make it on

00:15:07.950 --> 00:15:10.430
<v Speaker 1>this stage right away as well. Yeah. So

00:15:11.150 --> 00:15:11.710
<v Speaker 1>Alright.

00:15:22.455 --> 00:15:25.655
<v Speaker 1>It's a bit stupid then. Point point. Yeah.

00:15:29.095 --> 00:15:32.055
<v Speaker 1>And I I think that should be

00:15:32.480 --> 00:15:34.560
<v Speaker 1>enough for the first run. Right? Do we

00:15:34.560 --> 00:15:36.959
<v Speaker 1>want to try to build this on? Yeah.

00:15:37.360 --> 00:15:38.959
<v Speaker 0>Be rude if it's not to try it.

00:15:38.959 --> 00:15:39.519
<v Speaker 0>So

00:15:40.800 --> 00:15:42.399
<v Speaker 0>okay. I'm just gonna go sorry?

00:15:45.040 --> 00:15:46.639
<v Speaker 1>Yeah. We

00:15:47.199 --> 00:15:47.839
<v Speaker 1>can just click.

00:15:48.425 --> 00:15:50.024
<v Speaker 1>Maybe try BuildKit.

00:15:50.105 --> 00:15:52.425
<v Speaker 1>So Docker BuildKit build or, like, let us

00:15:52.425 --> 00:15:53.785
<v Speaker 1>foresee what what you do you have in

00:15:53.785 --> 00:15:54.345
<v Speaker 1>stock

00:15:54.985 --> 00:15:57.144
<v Speaker 1>in here in the in the system. Yeah.

00:15:57.144 --> 00:15:59.625
<v Speaker 0>Normally, I would just do Docker build. I'll

00:15:59.625 --> 00:16:01.065
<v Speaker 0>give it a fake tag for now and

00:16:01.065 --> 00:16:03.190
<v Speaker 0>then pass in my context as dot. Like,

00:16:03.190 --> 00:16:05.350
<v Speaker 0>you're telling me that we should evolve this

00:16:05.350 --> 00:16:05.910
<v Speaker 0>now?

00:16:06.790 --> 00:16:09.190
<v Speaker 1>Well, we we can let's let's let's let's

00:16:09.190 --> 00:16:11.269
<v Speaker 1>try and see what it does. Okay. This

00:16:11.269 --> 00:16:12.949
<v Speaker 1>one is a little bit messed up for

00:16:12.949 --> 00:16:13.350
<v Speaker 1>some reason.

00:16:15.834 --> 00:16:18.154
<v Speaker 1>For oh, it's just messed up for me.

00:16:18.154 --> 00:16:19.515
<v Speaker 1>I can see that the other stream is

00:16:19.515 --> 00:16:21.915
<v Speaker 1>correct. The in the in the in

00:16:22.394 --> 00:16:23.834
<v Speaker 1>the live share, it's it's a little bit

00:16:23.834 --> 00:16:26.075
<v Speaker 1>messed up. So, yeah, like, you can already

00:16:26.075 --> 00:16:27.115
<v Speaker 1>see, like, the

00:16:27.515 --> 00:16:28.475
<v Speaker 1>the

00:16:29.100 --> 00:16:31.100
<v Speaker 1>the BuildKit UI, like, that's a little bit

00:16:31.100 --> 00:16:33.899
<v Speaker 1>different than than what you had before.

00:16:36.300 --> 00:16:39.339
<v Speaker 1>Something is wrong because we copied to that

00:16:39.339 --> 00:16:40.300
<v Speaker 1>root in here.

00:16:41.965 --> 00:16:43.965
<v Speaker 0>We actually we got a a comment about

00:16:43.965 --> 00:16:45.485
<v Speaker 0>that just a second ago from Chris in

00:16:45.485 --> 00:16:47.565
<v Speaker 0>the chat. Good day, Chris.

00:16:50.525 --> 00:16:53.325
<v Speaker 1>And still not right. What what did we

00:16:53.325 --> 00:16:54.125
<v Speaker 1>do wrong?

00:16:55.725 --> 00:16:56.845
<v Speaker 1>You don't need

00:17:00.310 --> 00:17:01.030
<v Speaker 1>yeah.

00:17:07.990 --> 00:17:09.349
<v Speaker 0>That seems up here. There you go.

00:17:09.934 --> 00:17:10.654
<v Speaker 1>Okay.

00:17:11.454 --> 00:17:12.415
<v Speaker 1>Yeah. And and

00:17:15.855 --> 00:17:18.415
<v Speaker 1>yeah. So this should give you me, like,

00:17:18.415 --> 00:17:18.894
<v Speaker 1>a

00:17:19.454 --> 00:17:20.815
<v Speaker 1>quite smaller

00:17:20.895 --> 00:17:22.895
<v Speaker 1>image, and you already see, like, the BuildKit

00:17:22.895 --> 00:17:23.855
<v Speaker 1>UI in

00:17:24.255 --> 00:17:24.494
<v Speaker 1>here.

00:17:25.510 --> 00:17:27.349
<v Speaker 1>Let's let's cancel this one, and let's look

00:17:27.349 --> 00:17:29.190
<v Speaker 1>look at BuildKit right away. Otherwise, we're going

00:17:29.190 --> 00:17:31.350
<v Speaker 1>to, like, switch around a little bit. So

00:17:31.350 --> 00:17:32.630
<v Speaker 1>what I can do

00:17:33.350 --> 00:17:35.030
<v Speaker 1>in here, it's alright that there's a Docker

00:17:35.030 --> 00:17:38.150
<v Speaker 1>BuildKit command, hopefully, in your in your machine.

00:17:38.150 --> 00:17:39.350
<v Speaker 1>Yes. And that it is.

00:17:40.275 --> 00:17:41.955
<v Speaker 1>See what version this is.

00:17:43.635 --> 00:17:45.475
<v Speaker 1>Okay. This is, a little bit older version,

00:17:45.475 --> 00:17:45.955
<v Speaker 1>but

00:17:46.835 --> 00:17:48.115
<v Speaker 1>I I guess

00:17:49.155 --> 00:17:51.315
<v Speaker 1>I don't care. Or or or do we

00:17:51.315 --> 00:17:52.675
<v Speaker 1>want to update this? I can do it.

00:17:52.675 --> 00:17:54.035
<v Speaker 0>I I did tell it to download update

00:17:54.035 --> 00:17:55.955
<v Speaker 0>earlier today, but I guess it doesn't restart

00:17:55.955 --> 00:17:57.050
<v Speaker 0>it. So what I do

00:17:58.170 --> 00:17:59.930
<v Speaker 1>You want me to Actually, like, I'm not

00:17:59.930 --> 00:18:02.170
<v Speaker 1>sure if that's actually even even the like,

00:18:02.170 --> 00:18:03.370
<v Speaker 1>if you want to update, though, we can

00:18:03.370 --> 00:18:05.210
<v Speaker 1>we can get it just from GitHub, but

00:18:05.210 --> 00:18:05.929
<v Speaker 1>but I

00:18:06.490 --> 00:18:08.490
<v Speaker 1>I don't know it. Like, we probably won't

00:18:08.490 --> 00:18:10.170
<v Speaker 1>need anything anything from the new version.

00:18:12.185 --> 00:18:14.425
<v Speaker 0>Okay. I'm up to you. I don't know.

00:18:14.425 --> 00:18:16.425
<v Speaker 0>Well, let let's see. Let's

00:18:16.425 --> 00:18:17.785
<v Speaker 0>just continue. And then if we had a

00:18:17.785 --> 00:18:19.545
<v Speaker 0>wall with something because there's a a feature

00:18:19.545 --> 00:18:20.985
<v Speaker 0>that we're missing, we can talk about it,

00:18:20.985 --> 00:18:22.345
<v Speaker 0>and then we'll do the upgrade. The only

00:18:22.345 --> 00:18:23.865
<v Speaker 1>only thing that I can think of is

00:18:23.865 --> 00:18:25.940
<v Speaker 1>that maybe we if you get more error

00:18:25.940 --> 00:18:27.780
<v Speaker 1>messages then, like, the newer version has my

00:18:27.780 --> 00:18:28.820
<v Speaker 1>error messages.

00:18:29.140 --> 00:18:30.100
<v Speaker 1>But but

00:18:30.980 --> 00:18:33.140
<v Speaker 1>so what I want to show is in

00:18:33.140 --> 00:18:34.980
<v Speaker 1>here as well that there's

00:18:34.980 --> 00:18:37.540
<v Speaker 1>lots of command in here. Right? So there's

00:18:37.540 --> 00:18:38.180
<v Speaker 1>a build command.

00:18:41.325 --> 00:18:43.485
<v Speaker 1>Yeah. When I'm highlighting, of course, in my

00:18:43.485 --> 00:18:46.125
<v Speaker 1>screen, it doesn't show. But but, yeah, there's

00:18:46.125 --> 00:18:48.044
<v Speaker 1>there's a build command that's

00:18:48.205 --> 00:18:50.205
<v Speaker 1>pretty much the same command that that you

00:18:50.205 --> 00:18:52.925
<v Speaker 1>had there that was the old Docker build

00:18:52.925 --> 00:18:53.245
<v Speaker 1>command,

00:18:54.820 --> 00:18:57.380
<v Speaker 1>but there's bunch of other stuff in there.

00:18:57.380 --> 00:18:59.059
<v Speaker 1>Some people were asking about bake. Like, you

00:18:59.059 --> 00:19:00.339
<v Speaker 1>can see bake is in here.

00:19:01.059 --> 00:19:03.299
<v Speaker 1>There's there are options to create new builders

00:19:03.299 --> 00:19:04.419
<v Speaker 1>in here that

00:19:04.659 --> 00:19:06.500
<v Speaker 1>we would we'll probably get to if we

00:19:06.500 --> 00:19:08.260
<v Speaker 1>get to the multiplatform things

00:19:08.935 --> 00:19:11.655
<v Speaker 1>and and to manage those builders, manage build

00:19:11.655 --> 00:19:13.015
<v Speaker 1>cache with with

00:19:13.255 --> 00:19:15.495
<v Speaker 1>the disk usage and and things like that.

00:19:16.455 --> 00:19:18.615
<v Speaker 1>Maybe first thing we can do is just

00:19:18.615 --> 00:19:19.895
<v Speaker 1>look at the

00:19:20.055 --> 00:19:21.335
<v Speaker 1>Docker build x inspect.

00:19:24.520 --> 00:19:26.520
<v Speaker 1>That would just, like, show you what what's

00:19:26.520 --> 00:19:29.640
<v Speaker 1>the current, like, the builder that BuildKit is

00:19:29.880 --> 00:19:32.600
<v Speaker 1>or, like, the BuildKit is configured to use.

00:19:33.000 --> 00:19:34.680
<v Speaker 1>So you can see that it's using the

00:19:34.680 --> 00:19:36.600
<v Speaker 1>Docker drivers. So, basically, it's just using Docker

00:19:36.600 --> 00:19:38.755
<v Speaker 1>like a regular, like, or a Docker daemon

00:19:38.755 --> 00:19:40.355
<v Speaker 1>at the moment to do the builds.

00:19:41.155 --> 00:19:43.875
<v Speaker 1>We have the platform support because, like, those

00:19:44.115 --> 00:19:44.914
<v Speaker 1>those

00:19:46.115 --> 00:19:47.635
<v Speaker 1>come with Docker desktop.

00:19:47.795 --> 00:19:50.595
<v Speaker 1>So, potentially, we can, like, target all those

00:19:50.595 --> 00:19:51.475
<v Speaker 1>all those platforms.

00:19:52.700 --> 00:19:54.460
<v Speaker 1>Then we can basically we can do the

00:19:54.460 --> 00:19:55.020
<v Speaker 1>same

00:19:55.420 --> 00:19:57.580
<v Speaker 1>command that you did before. What what did

00:19:57.580 --> 00:19:59.900
<v Speaker 1>you name it? I just called it local.

00:19:59.900 --> 00:20:01.820
<v Speaker 0>Yeah. A terrible name, but I'll do.

00:20:05.965 --> 00:20:09.325
<v Speaker 1>So what's what's different between my build command

00:20:09.325 --> 00:20:10.764
<v Speaker 0>and this BuildKit build?

00:20:11.245 --> 00:20:11.965
<v Speaker 1>So

00:20:12.205 --> 00:20:12.924
<v Speaker 1>what's

00:20:13.645 --> 00:20:15.164
<v Speaker 1>what's different in here

00:20:15.405 --> 00:20:17.005
<v Speaker 1>is is

00:20:17.130 --> 00:20:19.530
<v Speaker 1>is is not very much because, like, by

00:20:19.530 --> 00:20:22.170
<v Speaker 1>default, like, build BuildKit will try to give

00:20:22.170 --> 00:20:24.250
<v Speaker 1>you, like, the exact same experience

00:20:24.650 --> 00:20:26.570
<v Speaker 1>as as you had before. So it was

00:20:26.570 --> 00:20:29.690
<v Speaker 1>still, like, building with Docker daemon so that

00:20:29.690 --> 00:20:31.450
<v Speaker 1>everything you build will be in your Docker

00:20:31.450 --> 00:20:32.490
<v Speaker 1>images and things like that.

00:20:33.375 --> 00:20:34.015
<v Speaker 1>But

00:20:34.255 --> 00:20:36.015
<v Speaker 1>what you get is these extra commands. So,

00:20:36.015 --> 00:20:37.775
<v Speaker 1>like, once we once we develop, then then

00:20:37.775 --> 00:20:39.615
<v Speaker 1>there's there's going to be a point where,

00:20:39.695 --> 00:20:41.935
<v Speaker 1>like, we have an option in here or

00:20:41.935 --> 00:20:44.175
<v Speaker 1>we have a we have a command that's

00:20:44.175 --> 00:20:46.095
<v Speaker 1>only in BuildKit, and you and you can't

00:20:46.095 --> 00:20:48.510
<v Speaker 1>use the same one in the in the

00:20:48.990 --> 00:20:50.270
<v Speaker 1>in the old command.

00:20:50.590 --> 00:20:51.230
<v Speaker 1>So,

00:20:51.550 --> 00:20:52.750
<v Speaker 1>basically, just

00:20:53.390 --> 00:20:55.230
<v Speaker 1>like, if you if you stick stick to

00:20:55.230 --> 00:20:56.030
<v Speaker 1>this flow,

00:20:56.350 --> 00:20:58.670
<v Speaker 1>then then you will go go much further.

00:20:59.550 --> 00:21:01.934
<v Speaker 0>Okay. You got a from

00:21:01.935 --> 00:21:03.455
<v Speaker 0>Crazy Max. I don't know if you know

00:21:03.455 --> 00:21:05.455
<v Speaker 0>anyone called Crazy Max, but there you go.

00:21:05.535 --> 00:21:07.054
<v Speaker 1>Yes. Indeed. Know.

00:21:08.095 --> 00:21:08.735
<v Speaker 1>And

00:21:10.735 --> 00:21:12.015
<v Speaker 1>just

00:21:13.200 --> 00:21:14.719
<v Speaker 1>to look at those commands.

00:21:15.520 --> 00:21:15.999
<v Speaker 1>One

00:21:17.520 --> 00:21:20.799
<v Speaker 1>more extra comment about this, like, BuildKit versus

00:21:21.200 --> 00:21:23.200
<v Speaker 1>or just Docker build is that if you

00:21:23.200 --> 00:21:25.039
<v Speaker 1>would run, like, this command, Docker build install,

00:21:26.935 --> 00:21:29.655
<v Speaker 1>then it will basically just, like, switch out

00:21:29.655 --> 00:21:31.255
<v Speaker 1>your Docker build command.

00:21:31.655 --> 00:21:33.415
<v Speaker 1>And and it like, you can you can

00:21:33.415 --> 00:21:35.415
<v Speaker 1>just try Docker build, and it will come

00:21:35.415 --> 00:21:36.855
<v Speaker 1>come come to BuildX.

00:21:37.255 --> 00:21:39.590
<v Speaker 1>I don't know if you're if you're ready

00:21:39.590 --> 00:21:40.950
<v Speaker 1>to do this or not, but we we

00:21:40.950 --> 00:21:42.950
<v Speaker 1>can we can skip this for now. Like,

00:21:42.950 --> 00:21:44.710
<v Speaker 1>you can you can make your decision later.

00:21:44.790 --> 00:21:46.550
<v Speaker 0>Yeah. I mean, is the is the goal

00:21:46.550 --> 00:21:49.270
<v Speaker 0>for BuildKit to replace build eventually?

00:21:49.750 --> 00:21:52.870
<v Speaker 1>Sure. Yeah. Sure. Okay. It's it's

00:21:54.945 --> 00:21:56.625
<v Speaker 1>I think it makes makes sense for the

00:21:56.625 --> 00:21:58.945
<v Speaker 1>user standpoint. Right? Like, sometimes you need to

00:21:59.105 --> 00:22:00.225
<v Speaker 1>sometimes you're using

00:22:01.664 --> 00:22:05.505
<v Speaker 1>you're building with Docker. Sometimes BuildKit also supports,

00:22:05.505 --> 00:22:07.904
<v Speaker 1>like, building, like, in Kubernetes or inside a

00:22:07.904 --> 00:22:09.105
<v Speaker 1>container and things like that.

00:22:09.910 --> 00:22:12.150
<v Speaker 1>Makes sense for the maintenance wise as well.

00:22:12.150 --> 00:22:15.030
<v Speaker 1>Like like, we we can develop build features

00:22:15.030 --> 00:22:17.670
<v Speaker 1>without, like, waiting for, like, a whole Docker

00:22:17.670 --> 00:22:19.350
<v Speaker 1>engine release and stuff like that.

00:22:19.750 --> 00:22:22.150
<v Speaker 0>Okay. Got it. So but but yeah. Like,

00:22:22.150 --> 00:22:23.590
<v Speaker 1>your image was built. Like,

00:22:25.375 --> 00:22:26.015
<v Speaker 1>if we're

00:22:31.695 --> 00:22:34.095
<v Speaker 1>yeah. I guess that's that's your command. Right?

00:22:35.135 --> 00:22:37.775
<v Speaker 0>Yes. That is indeed the blocks command there.

00:22:37.775 --> 00:22:38.255
<v Speaker 0>There you go.

00:22:39.390 --> 00:22:40.110
<v Speaker 0>Perfect.

00:22:44.030 --> 00:22:44.910
<v Speaker 1>So

00:22:48.030 --> 00:22:50.190
<v Speaker 1>how much time did it take? Do do

00:22:50.030 --> 00:22:50.510
<v Speaker 1>remember?

00:22:51.790 --> 00:22:52.270
<v Speaker 1>Like,

00:22:54.095 --> 00:22:54.815
<v Speaker 1>almost

00:22:55.295 --> 00:22:57.215
<v Speaker 1>almost a minute or something like that or,

00:22:57.215 --> 00:22:59.135
<v Speaker 1>like, even maybe maybe more. So

00:22:59.455 --> 00:23:02.095
<v Speaker 0>It took fifty two seconds. It's it's yeah.

00:23:02.095 --> 00:23:04.015
<v Speaker 1>Let's try to make it faster, probably.

00:23:06.415 --> 00:23:08.270
<v Speaker 1>One thing you can don't know if you

00:23:08.270 --> 00:23:10.429
<v Speaker 1>noticed if you're if you're on this command

00:23:10.590 --> 00:23:12.669
<v Speaker 1>or, like, maybe we could just make make

00:23:12.669 --> 00:23:14.990
<v Speaker 1>a simple change in here and just run

00:23:14.990 --> 00:23:15.710
<v Speaker 1>it again

00:23:26.745 --> 00:23:27.705
<v Speaker 1>is that

00:23:28.105 --> 00:23:31.544
<v Speaker 1>it installed your your dependencies in here. Right?

00:23:32.025 --> 00:23:32.745
<v Speaker 0>Yes.

00:23:33.385 --> 00:23:35.225
<v Speaker 1>Right. Because you don't have a vendor directory.

00:23:37.340 --> 00:23:37.980
<v Speaker 0>Correct.

00:23:38.220 --> 00:23:39.260
<v Speaker 1>So

00:23:39.660 --> 00:23:41.660
<v Speaker 1>yeah. Like, I'm I'm in the vendor camp,

00:23:41.660 --> 00:23:42.060
<v Speaker 1>but, like

00:23:43.180 --> 00:23:43.740
<v Speaker 1>well,

00:23:44.140 --> 00:23:45.820
<v Speaker 1>for sure, like, it it doesn't make sense,

00:23:45.820 --> 00:23:47.740
<v Speaker 1>for example, that when you when you were

00:23:47.740 --> 00:23:50.380
<v Speaker 1>building your your process in in a host,

00:23:50.380 --> 00:23:51.900
<v Speaker 1>right, then you get your audio caches and

00:23:51.900 --> 00:23:53.955
<v Speaker 1>stuff like that. Like, if you're if you're

00:23:53.955 --> 00:23:55.395
<v Speaker 1>on, for example, make a code change like

00:23:55.395 --> 00:23:57.715
<v Speaker 1>I did now and rebuild it, it doesn't

00:23:57.715 --> 00:23:59.715
<v Speaker 1>take you a minute anymore. Right? It only

00:23:59.715 --> 00:24:01.315
<v Speaker 1>takes you a minute on the first time.

00:24:03.395 --> 00:24:04.034
<v Speaker 1>So

00:24:04.355 --> 00:24:06.275
<v Speaker 1>I think we're gonna first figure out the

00:24:06.275 --> 00:24:07.795
<v Speaker 1>the dependencies thing

00:24:08.170 --> 00:24:10.250
<v Speaker 1>just to make this, like, just to clarify

00:24:10.250 --> 00:24:11.289
<v Speaker 1>a little bit better.

00:24:11.850 --> 00:24:12.409
<v Speaker 0>Right.

00:24:12.650 --> 00:24:14.170
<v Speaker 0>You mean, like, we could copy on the

00:24:14.170 --> 00:24:16.490
<v Speaker 0>GoMod and the GoSum first, run a GoMod

00:24:16.490 --> 00:24:18.170
<v Speaker 0>download, and then bring in the rest of

00:24:18.170 --> 00:24:18.970
<v Speaker 0>the source?

00:24:19.290 --> 00:24:21.130
<v Speaker 1>Exactly. That's what that's what I was what

00:24:21.130 --> 00:24:22.330
<v Speaker 1>I was thinking exactly.

00:24:23.215 --> 00:24:25.295
<v Speaker 1>So we can just put the go mod

00:24:25.295 --> 00:24:26.175
<v Speaker 1>in here

00:24:26.655 --> 00:24:28.815
<v Speaker 1>and then run, like, whatever it is. Go

00:24:28.815 --> 00:24:31.135
<v Speaker 1>mod download there. Yeah. Go mod download, I

00:24:31.135 --> 00:24:31.855
<v Speaker 0>believe, should be.

00:24:36.040 --> 00:24:38.600
<v Speaker 1>So so benefit of this one, right, is

00:24:38.600 --> 00:24:39.240
<v Speaker 1>that

00:24:42.200 --> 00:24:44.040
<v Speaker 1>we only download the dependency on the first

00:24:44.040 --> 00:24:46.200
<v Speaker 1>time. As long as you don't modify your

00:24:46.200 --> 00:24:46.920
<v Speaker 1>GoMod file,

00:24:47.865 --> 00:24:50.184
<v Speaker 1>then this step will always be cached,

00:24:50.505 --> 00:24:51.945
<v Speaker 1>and it will and

00:24:52.345 --> 00:24:54.265
<v Speaker 1>next time you make a Go change, only

00:24:54.265 --> 00:24:56.265
<v Speaker 1>only this one will run. It will already

00:24:56.265 --> 00:24:58.585
<v Speaker 1>have dependencies. It will not start to pull

00:24:58.585 --> 00:24:59.065
<v Speaker 1>them again.

00:25:00.550 --> 00:25:01.270
<v Speaker 1>Right.

00:25:01.750 --> 00:25:03.670
<v Speaker 0>Okay. So let's let's build that and get

00:25:03.670 --> 00:25:05.350
<v Speaker 0>the cache in place, and then we should

00:25:05.350 --> 00:25:07.029
<v Speaker 0>be able to confirm that that worked.

00:25:09.590 --> 00:25:10.310
<v Speaker 1>Sure.

00:25:20.825 --> 00:25:22.585
<v Speaker 1>Do I need to start this? Or

00:25:24.105 --> 00:25:25.465
<v Speaker 0>Yeah. I wasn't sure if we were still

00:25:25.465 --> 00:25:27.864
<v Speaker 0>modifying the Docker file or not there. Okay.

00:25:28.024 --> 00:25:28.424
<v Speaker 1>Yeah.

00:25:30.200 --> 00:25:32.200
<v Speaker 0>Alright. So let's do the download.

00:25:38.120 --> 00:25:38.919
<v Speaker 1>So

00:25:39.320 --> 00:25:41.560
<v Speaker 1>I guess in the meanwhile, can we already

00:25:41.560 --> 00:25:43.640
<v Speaker 1>start for the next steps? Or

00:25:44.675 --> 00:25:45.794
<v Speaker 1>it's like a

00:25:46.835 --> 00:25:48.595
<v Speaker 0>Yeah. I have a a question gonna be

00:25:48.595 --> 00:25:50.515
<v Speaker 1>able yeah. Go ahead. I have a question

00:25:50.515 --> 00:25:53.475
<v Speaker 0>that came in on on Twitter from Kieran.

00:25:53.475 --> 00:25:56.515
<v Speaker 0>Kieran asked, can I please ask Thomas about

00:25:56.515 --> 00:25:58.910
<v Speaker 0>how cache from and to are best used

00:25:58.910 --> 00:26:01.630
<v Speaker 0>in a CI environment where different branches are

00:26:01.630 --> 00:26:02.669
<v Speaker 0>all being built?

00:26:03.950 --> 00:26:05.630
<v Speaker 0>With the so I think the question there

00:26:05.630 --> 00:26:06.350
<v Speaker 0>is like,

00:26:06.670 --> 00:26:08.830
<v Speaker 0>are the different bells from the different branches

00:26:08.830 --> 00:26:10.910
<v Speaker 0>all using the same cash tag

00:26:11.185 --> 00:26:12.865
<v Speaker 0>or should you do something else?

00:26:14.225 --> 00:26:15.345
<v Speaker 1>Yeah. So

00:26:18.145 --> 00:26:19.905
<v Speaker 1>yeah. I'm not sure, like, if other people

00:26:19.905 --> 00:26:21.745
<v Speaker 1>will follow this question right away. It's very

00:26:21.745 --> 00:26:23.105
<v Speaker 1>specific. But

00:26:23.345 --> 00:26:24.865
<v Speaker 1>but yeah. Like, my

00:26:25.410 --> 00:26:25.970
<v Speaker 1>my

00:26:26.210 --> 00:26:28.290
<v Speaker 1>recommendation at the moment is to use the

00:26:28.290 --> 00:26:30.450
<v Speaker 1>different test tags for for

00:26:30.770 --> 00:26:33.250
<v Speaker 1>for, like, give different tags for for different

00:26:33.250 --> 00:26:33.970
<v Speaker 1>branches

00:26:34.050 --> 00:26:36.130
<v Speaker 1>so that they won't override each other.

00:26:36.850 --> 00:26:38.290
<v Speaker 1>If you get to that platform, like, there

00:26:38.370 --> 00:26:38.770
<v Speaker 1>there's, like,

00:26:39.685 --> 00:26:41.845
<v Speaker 1>many different ways how you can how you

00:26:41.845 --> 00:26:42.885
<v Speaker 1>can actually, like,

00:26:43.365 --> 00:26:45.205
<v Speaker 1>include the remote cache in our CI.

00:26:45.525 --> 00:26:46.165
<v Speaker 1>Like,

00:26:46.805 --> 00:26:48.565
<v Speaker 1>in some cases, for example, if you're using,

00:26:48.565 --> 00:26:50.965
<v Speaker 1>like, GitHub actions, I don't think, like, the

00:26:50.965 --> 00:26:52.805
<v Speaker 1>image cache is, you know, like, the best

00:26:52.805 --> 00:26:55.090
<v Speaker 1>option. Like, I I think, like, the there's,

00:26:55.090 --> 00:26:57.490
<v Speaker 1>like, a local caches, and and we have

00:26:57.490 --> 00:26:59.889
<v Speaker 1>some new GitHub caches there as well. Like,

00:27:00.130 --> 00:27:02.290
<v Speaker 1>that might might be even, like, a better

00:27:02.290 --> 00:27:03.730
<v Speaker 1>option there and

00:27:03.890 --> 00:27:04.370
<v Speaker 1>might, like,

00:27:05.585 --> 00:27:08.225
<v Speaker 1>solve this problem more elegantly. For example, like,

00:27:08.225 --> 00:27:10.545
<v Speaker 1>the GitHub caching, GitHub already provides you a

00:27:10.545 --> 00:27:12.785
<v Speaker 1>scoping for different branches, so you don't even

00:27:12.785 --> 00:27:14.705
<v Speaker 1>need to worry about this aspect at all.

00:27:16.225 --> 00:27:18.145
<v Speaker 1>So, yeah, like, this this one is now,

00:27:19.270 --> 00:27:21.110
<v Speaker 1>like yeah. It's it's fully cashed, but, like,

00:27:21.110 --> 00:27:22.470
<v Speaker 1>I can even make a change in here.

00:27:22.470 --> 00:27:22.950
<v Speaker 1>Right?

00:27:23.830 --> 00:27:24.549
<v Speaker 1>In

00:27:25.190 --> 00:27:26.710
<v Speaker 1>the in the Docker file.

00:27:27.110 --> 00:27:28.789
<v Speaker 1>And if I build it again,

00:27:29.670 --> 00:27:30.230
<v Speaker 1>then

00:27:31.105 --> 00:27:31.825
<v Speaker 1>the

00:27:32.144 --> 00:27:33.985
<v Speaker 1>the half of the build was was cached.

00:27:33.985 --> 00:27:36.945
<v Speaker 1>Right? So only, like, the binary is is

00:27:36.945 --> 00:27:37.664
<v Speaker 1>needed.

00:27:38.065 --> 00:27:40.065
<v Speaker 1>Let's cancel this. Yeah. But the but, of

00:27:40.065 --> 00:27:41.664
<v Speaker 1>course, like, the binary is still, like

00:27:42.705 --> 00:27:44.385
<v Speaker 1>binary stuff, they it takes too long time,

00:27:44.385 --> 00:27:46.980
<v Speaker 1>right, compared to your local one because, like,

00:27:46.980 --> 00:27:47.460
<v Speaker 1>the

00:27:47.860 --> 00:27:50.020
<v Speaker 1>Go added some kind of, like,

00:27:51.060 --> 00:27:53.380
<v Speaker 1>cool caching capability in the Google compiler. Right?

00:27:53.380 --> 00:27:55.300
<v Speaker 1>Like, when when you're running the Google compiler,

00:27:55.300 --> 00:27:57.540
<v Speaker 1>it will put some files in the in

00:27:57.540 --> 00:27:58.100
<v Speaker 1>the

00:27:59.164 --> 00:28:01.725
<v Speaker 1>in some directory, in your cache directory, and

00:28:01.725 --> 00:28:03.725
<v Speaker 1>that's why your next builds are faster. So

00:28:03.725 --> 00:28:05.404
<v Speaker 1>we can actually take leverage of this one

00:28:05.404 --> 00:28:06.764
<v Speaker 1>in Dockerfile as well.

00:28:07.245 --> 00:28:09.965
<v Speaker 1>So for that one so this is

00:28:10.365 --> 00:28:12.765
<v Speaker 1>not the multistage anymore. So this is only

00:28:12.765 --> 00:28:14.284
<v Speaker 1>in build

00:28:14.780 --> 00:28:15.980
<v Speaker 1>BuildKit now,

00:28:16.380 --> 00:28:18.940
<v Speaker 1>but it's, like, every version of BuildKit. So

00:28:18.940 --> 00:28:21.340
<v Speaker 1>run now allows some more track and

00:28:26.155 --> 00:28:26.875
<v Speaker 0>Oh,

00:28:32.155 --> 00:28:33.515
<v Speaker 0>I guess Thomas

00:28:34.875 --> 00:28:35.595
<v Speaker 0>dropped.

00:28:35.675 --> 00:28:36.475
<v Speaker 0>Oh, you're back.

00:28:37.530 --> 00:28:39.370
<v Speaker 1>Did I drop out there? Yeah. I'm not

00:28:39.370 --> 00:28:40.890
<v Speaker 0>sure what happened there. You just got it

00:28:40.890 --> 00:28:41.929
<v Speaker 0>it disappeared.

00:28:41.930 --> 00:28:43.850
<v Speaker 1>Yeah. My my my whole, like, tab crashed

00:28:43.850 --> 00:28:45.690
<v Speaker 1>for some reason. But

00:28:45.770 --> 00:28:46.730
<v Speaker 0>yeah. Alright.

00:28:48.330 --> 00:28:48.970
<v Speaker 1>Okay.

00:28:49.530 --> 00:28:50.250
<v Speaker 1>So

00:28:50.404 --> 00:28:52.325
<v Speaker 0>So in BuildKit, you're saying we can use

00:28:52.325 --> 00:28:54.404
<v Speaker 0>the dash dash mount tag, and then that's

00:28:54.404 --> 00:28:56.965
<v Speaker 0>kinda where you dropped off. Yeah. Okay. So

00:28:56.965 --> 00:28:58.325
<v Speaker 1>may maybe it's actually

00:28:58.965 --> 00:29:01.205
<v Speaker 1>makes sense to look at the documentation first.

00:29:01.205 --> 00:29:01.764
<v Speaker 1>Yeah.

00:29:02.085 --> 00:29:04.140
<v Speaker 1>So so that so that

00:29:04.540 --> 00:29:07.020
<v Speaker 1>we see something that we point

00:29:08.620 --> 00:29:09.740
<v Speaker 1>to a particular link.

00:29:20.715 --> 00:29:23.115
<v Speaker 1>Should have a link now. Yep. Got it.

00:29:27.355 --> 00:29:28.955
<v Speaker 1>So this one for

00:29:29.435 --> 00:29:30.475
<v Speaker 1>this document

00:29:30.635 --> 00:29:32.795
<v Speaker 1>list, like, some, like, additional things we've added

00:29:32.795 --> 00:29:35.559
<v Speaker 1>to. Like, there's there's some

00:29:36.600 --> 00:29:38.200
<v Speaker 1>cool things in here, like how you can

00:29:38.200 --> 00:29:38.759
<v Speaker 1>do

00:29:39.240 --> 00:29:40.840
<v Speaker 1>how you can do mounts, how you can

00:29:40.840 --> 00:29:42.839
<v Speaker 1>do, like, secrets

00:29:43.720 --> 00:29:46.200
<v Speaker 1>when you're cloning, like, private repositories,

00:29:46.200 --> 00:29:47.720
<v Speaker 1>how to, like, forward your

00:29:48.645 --> 00:29:51.205
<v Speaker 1>Recent version, we added here docs. So it's

00:29:51.205 --> 00:29:53.365
<v Speaker 1>just like a document where where you will

00:29:53.365 --> 00:29:55.285
<v Speaker 1>find, like, all all those described

00:29:55.525 --> 00:29:59.205
<v Speaker 1>that are, like, the new Dockerfile additions.

00:29:59.525 --> 00:30:01.285
<v Speaker 1>And one thing in here is that

00:30:01.925 --> 00:30:02.405
<v Speaker 1>basically

00:30:03.540 --> 00:30:05.620
<v Speaker 1>allows you to create mount points that are

00:30:05.620 --> 00:30:06.820
<v Speaker 1>available when your

00:30:07.060 --> 00:30:09.540
<v Speaker 1>when your process runs. So for example, like

00:30:09.540 --> 00:30:11.860
<v Speaker 1>a point, you can use just to, like,

00:30:11.940 --> 00:30:14.660
<v Speaker 1>point, basically, your build context to your to

00:30:14.660 --> 00:30:16.100
<v Speaker 1>your process

00:30:16.425 --> 00:30:18.265
<v Speaker 1>instead of making, like, a copy of it.

00:30:18.265 --> 00:30:20.345
<v Speaker 1>Like, the process can just directly see the

00:30:20.345 --> 00:30:20.985
<v Speaker 1>files.

00:30:21.225 --> 00:30:23.545
<v Speaker 1>In this case, like, a interesting one is

00:30:23.545 --> 00:30:24.425
<v Speaker 1>the cache one.

00:30:24.985 --> 00:30:26.825
<v Speaker 1>So this one just makes, like you can

00:30:26.825 --> 00:30:28.185
<v Speaker 1>think of it as a as a volume,

00:30:28.185 --> 00:30:28.425
<v Speaker 1>basically.

00:30:29.070 --> 00:30:29.710
<v Speaker 1>It's

00:30:31.549 --> 00:30:33.309
<v Speaker 1>it gives you a directory. You can write

00:30:33.309 --> 00:30:34.669
<v Speaker 1>into that directory.

00:30:35.309 --> 00:30:35.869
<v Speaker 1>The

00:30:36.350 --> 00:30:37.950
<v Speaker 1>if you run the build again

00:30:38.269 --> 00:30:39.869
<v Speaker 1>with the same cache mount,

00:30:40.190 --> 00:30:42.110
<v Speaker 1>the the files from a previous build will

00:30:42.110 --> 00:30:44.575
<v Speaker 1>basically be there. Uh-huh. So so you can

00:30:44.575 --> 00:30:46.335
<v Speaker 1>use this as, a persistent

00:30:46.495 --> 00:30:47.774
<v Speaker 1>anonymous storage

00:30:48.015 --> 00:30:50.575
<v Speaker 1>where you can, like that you can use

00:30:51.934 --> 00:30:54.495
<v Speaker 1>for for storing stuff for the for the

00:30:54.495 --> 00:30:57.040
<v Speaker 1>cache purposes. Of course, like like, this thing

00:30:57.040 --> 00:30:59.440
<v Speaker 1>is, like, excluded from your instruction cash, so

00:30:59.440 --> 00:31:00.880
<v Speaker 1>you need to be, like, careful about it

00:31:00.880 --> 00:31:02.480
<v Speaker 1>just to put things in there

00:31:02.880 --> 00:31:05.840
<v Speaker 1>that your process can actually handle. Like, basically,

00:31:05.840 --> 00:31:07.679
<v Speaker 1>like, you can put you

00:31:07.920 --> 00:31:09.680
<v Speaker 1>can put anything in there as long as

00:31:09.680 --> 00:31:11.920
<v Speaker 1>your process still works with basically any content

00:31:11.945 --> 00:31:14.825
<v Speaker 1>Because, like, like, cache cache volumes can can

00:31:14.825 --> 00:31:17.225
<v Speaker 1>be deleted in arbitrary times and, like, at

00:31:17.225 --> 00:31:19.225
<v Speaker 1>some other like, let's say you're you have

00:31:19.225 --> 00:31:20.985
<v Speaker 1>another build and it writes the same cache

00:31:20.985 --> 00:31:22.105
<v Speaker 1>volume, like like

00:31:23.145 --> 00:31:25.065
<v Speaker 1>so you can only use it for certain

00:31:25.065 --> 00:31:26.425
<v Speaker 1>things, but you can use it for the

00:31:26.425 --> 00:31:28.690
<v Speaker 1>things, for example, when when your compiler provides

00:31:28.690 --> 00:31:30.690
<v Speaker 1>a cache directory, then you can just, like,

00:31:30.690 --> 00:31:32.209
<v Speaker 1>use use this as a location.

00:31:32.450 --> 00:31:34.370
<v Speaker 1>And then your compiler will write there. You're

00:31:34.370 --> 00:31:36.130
<v Speaker 1>on the builder next time, and it will

00:31:36.130 --> 00:31:37.649
<v Speaker 1>get the files there as well.

00:31:39.649 --> 00:31:40.049
<v Speaker 0>Okay.

00:31:40.785 --> 00:31:42.785
<v Speaker 0>That makes a lot of sense. And I

00:31:42.785 --> 00:31:43.985
<v Speaker 0>can see there's there's a whole bunch of

00:31:44.145 --> 00:31:46.065
<v Speaker 0>there's also a a temp files system. There's

00:31:46.065 --> 00:31:47.585
<v Speaker 0>the the secret stores.

00:31:48.225 --> 00:31:50.145
<v Speaker 1>I got it. Like, for for the secret

00:31:50.145 --> 00:31:51.905
<v Speaker 1>one, for example, you can mount in secret

00:31:51.905 --> 00:31:54.385
<v Speaker 1>files. So we make sure that they're, like,

00:31:54.385 --> 00:31:56.065
<v Speaker 1>never stored in your image and and stuff

00:31:56.065 --> 00:31:59.390
<v Speaker 1>like that. And, like, on on as well.

00:31:59.390 --> 00:31:59.790
<v Speaker 1>And

00:32:01.390 --> 00:32:03.790
<v Speaker 1>and you can the other one is you

00:32:03.790 --> 00:32:05.309
<v Speaker 1>can mount the SSH

00:32:05.390 --> 00:32:07.870
<v Speaker 1>sockets in there. It's basically to to, like,

00:32:07.870 --> 00:32:10.430
<v Speaker 1>forward your forward your SSH agents.

00:32:11.345 --> 00:32:11.985
<v Speaker 0>Awesome.

00:32:12.705 --> 00:32:14.545
<v Speaker 1>So I had to correlate that back to

00:32:14.545 --> 00:32:15.905
<v Speaker 0>kind of what we're doing then with this

00:32:15.905 --> 00:32:17.905
<v Speaker 0>this go build here is that

00:32:19.345 --> 00:32:21.905
<v Speaker 0>we're doing a copy of the GoMod to

00:32:21.905 --> 00:32:24.770
<v Speaker 0>go some the GoMod download. That's that's just

00:32:24.770 --> 00:32:27.090
<v Speaker 0>basic image caching. Right? That's not using any

00:32:27.090 --> 00:32:28.690
<v Speaker 0>mounts or local

00:32:28.929 --> 00:32:30.369
<v Speaker 0>caching thingy.

00:32:31.409 --> 00:32:34.049
<v Speaker 0>Yes. Now is is that okay there? Or

00:32:34.049 --> 00:32:35.570
<v Speaker 0>is that something when you would probably just

00:32:35.570 --> 00:32:35.970
<v Speaker 0>encourage,

00:32:36.664 --> 00:32:38.505
<v Speaker 0>you know, to remove these two lanes and

00:32:38.505 --> 00:32:40.664
<v Speaker 0>then use a main type cache

00:32:41.145 --> 00:32:43.624
<v Speaker 0>and pull in the the gold cache?

00:32:44.105 --> 00:32:46.024
<v Speaker 0>Or does it not matter? Well, are

00:32:46.825 --> 00:32:48.184
<v Speaker 1>you saying that, like, if we have a

00:32:48.184 --> 00:32:50.480
<v Speaker 1>cache directory as well, then it doesn't really,

00:32:50.480 --> 00:32:52.720
<v Speaker 1>like, give us anything to to pull the

00:32:52.720 --> 00:32:53.920
<v Speaker 1>dependencies before?

00:32:55.280 --> 00:32:56.960
<v Speaker 1>But it actually it still it still does

00:32:56.960 --> 00:32:59.200
<v Speaker 1>because, actually, like, dependencies are not in in

00:32:59.200 --> 00:33:01.200
<v Speaker 1>the in the same location.

00:33:01.440 --> 00:33:03.120
<v Speaker 1>So what we can actually do is we

00:33:03.120 --> 00:33:05.565
<v Speaker 1>can do we can put another cache mount

00:33:05.565 --> 00:33:06.284
<v Speaker 1>in here.

00:33:07.725 --> 00:33:10.044
<v Speaker 1>Think it's co p k g. Right?

00:33:12.525 --> 00:33:14.765
<v Speaker 1>So so for example, like, next time this

00:33:14.765 --> 00:33:15.485
<v Speaker 1>command runs,

00:33:16.460 --> 00:33:17.179
<v Speaker 1>then

00:33:17.820 --> 00:33:20.460
<v Speaker 1>then it will pull the dependencies, but it

00:33:20.460 --> 00:33:21.980
<v Speaker 1>will pull it on the cache mount.

00:33:22.700 --> 00:33:24.140
<v Speaker 0>Yes. So do we even need to worry

00:33:24.140 --> 00:33:25.740
<v Speaker 0>about the copy of the go mod and

00:33:25.740 --> 00:33:27.420
<v Speaker 0>go to some anymore? Like, is that actually

00:33:27.420 --> 00:33:29.260
<v Speaker 0>bringing us any value, is that just,

00:33:30.625 --> 00:33:32.384
<v Speaker 0>like, the older way of doing things?

00:33:32.945 --> 00:33:33.585
<v Speaker 1>I

00:33:33.825 --> 00:33:34.864
<v Speaker 1>I guess

00:33:36.544 --> 00:33:39.424
<v Speaker 1>well, no. It's it's still like in certain

00:33:39.424 --> 00:33:42.065
<v Speaker 1>cases, it definitely brings us value because, like

00:33:42.784 --> 00:33:43.105
<v Speaker 1>like,

00:33:45.299 --> 00:33:46.019
<v Speaker 1>the

00:33:46.500 --> 00:33:48.259
<v Speaker 1>difference in here is that if your go

00:33:48.259 --> 00:33:51.139
<v Speaker 1>mode and go some have not changed, then

00:33:51.139 --> 00:33:52.980
<v Speaker 1>the builder will just keep over this command

00:33:52.980 --> 00:33:53.779
<v Speaker 1>completely.

00:33:54.259 --> 00:33:55.459
<v Speaker 1>Like, otherwise,

00:33:55.700 --> 00:33:58.179
<v Speaker 1>it will it will still run this command

00:33:58.179 --> 00:34:00.565
<v Speaker 1>and the goal itself will detect that. It

00:34:00.565 --> 00:34:02.325
<v Speaker 1>will need to compute some hashes of the

00:34:02.325 --> 00:34:04.245
<v Speaker 1>files, and then eventually, it will figure out

00:34:04.245 --> 00:34:06.085
<v Speaker 1>that, hey. I already have those dependencies and

00:34:06.085 --> 00:34:08.085
<v Speaker 1>stuff like that. Okay. Got it. So so,

00:34:08.085 --> 00:34:09.844
<v Speaker 1>like, it will be it will be faster,

00:34:09.844 --> 00:34:11.285
<v Speaker 1>but it won't won't be zero.

00:34:11.605 --> 00:34:11.925
<v Speaker 1>Right?

00:34:12.609 --> 00:34:14.050
<v Speaker 1>So so it it

00:34:14.369 --> 00:34:16.530
<v Speaker 1>still makes sense to have them in in

00:34:16.530 --> 00:34:17.170
<v Speaker 1>two.

00:34:18.050 --> 00:34:20.530
<v Speaker 1>This case, though, like, I guess, theoretically,

00:34:21.250 --> 00:34:22.370
<v Speaker 1>like, these lines

00:34:22.849 --> 00:34:25.329
<v Speaker 1>in here don't buy us anything because, like,

00:34:25.329 --> 00:34:26.609
<v Speaker 1>this go build will also

00:34:27.355 --> 00:34:29.435
<v Speaker 1>write everything in the in the code because

00:34:29.435 --> 00:34:31.594
<v Speaker 1>g one is doing this first slow build.

00:34:31.594 --> 00:34:32.395
<v Speaker 1>Right? Yeah.

00:34:32.635 --> 00:34:35.355
<v Speaker 1>So so, yeah, like, I'm I'm not sure,

00:34:35.355 --> 00:34:36.875
<v Speaker 1>like, if you want to keep this or

00:34:36.875 --> 00:34:38.875
<v Speaker 1>not. I think it It's It's I like

00:34:38.875 --> 00:34:39.675
<v Speaker 0>it. Questionable.

00:34:41.030 --> 00:34:43.670
<v Speaker 1>Yeah. One thing it might come back is

00:34:43.670 --> 00:34:44.469
<v Speaker 1>when

00:34:44.469 --> 00:34:45.030
<v Speaker 1>we

00:34:45.349 --> 00:34:47.750
<v Speaker 1>if we get to the multiplatform things,

00:34:48.949 --> 00:34:50.150
<v Speaker 1>then then

00:34:50.869 --> 00:34:53.109
<v Speaker 1>for example, let's say if we ever turn

00:34:53.109 --> 00:34:53.829
<v Speaker 1>this into

00:34:54.275 --> 00:34:56.435
<v Speaker 1>start to, like, cross compile or anything like

00:34:56.435 --> 00:34:57.875
<v Speaker 1>this to multiple platforms,

00:34:58.195 --> 00:35:01.635
<v Speaker 1>then this step in here that's pulling dependencies,

00:35:01.955 --> 00:35:04.275
<v Speaker 1>that is the same for for all the

00:35:04.275 --> 00:35:04.995
<v Speaker 1>platforms.

00:35:05.795 --> 00:35:08.035
<v Speaker 1>Like, if you're if you're if you're if

00:35:08.035 --> 00:35:10.410
<v Speaker 1>you're, for example, building for three platforms, this

00:35:10.410 --> 00:35:12.970
<v Speaker 1>command theoretically can run once while the compiler

00:35:12.970 --> 00:35:14.170
<v Speaker 1>needs to run three times.

00:35:14.569 --> 00:35:16.650
<v Speaker 1>So it might be like it might become

00:35:16.650 --> 00:35:18.730
<v Speaker 1>useful there. Yeah. Good catch.

00:35:18.970 --> 00:35:21.050
<v Speaker 0>Okay. So let's let's validate what you've just

00:35:21.050 --> 00:35:22.970
<v Speaker 0>changed here. So we're now mounting in our

00:35:22.970 --> 00:35:25.845
<v Speaker 0>our cache here for the dependencies and the

00:35:25.845 --> 00:35:28.405
<v Speaker 0>actual Google build cache. So what

00:35:28.725 --> 00:35:30.325
<v Speaker 0>what you're saying here is if we run

00:35:30.325 --> 00:35:30.885
<v Speaker 0>this,

00:35:31.125 --> 00:35:32.885
<v Speaker 0>we get a 52 build and then run

00:35:32.885 --> 00:35:34.725
<v Speaker 0>it again as even the Google build step

00:35:34.725 --> 00:35:35.845
<v Speaker 0>should be near

00:35:36.085 --> 00:35:37.125
<v Speaker 0>instant. Right?

00:35:38.490 --> 00:35:40.650
<v Speaker 1>Yeah. Or at least fast. It will it

00:35:40.650 --> 00:35:43.290
<v Speaker 1>be instant. It should be, like, pretty

00:35:43.530 --> 00:35:45.210
<v Speaker 1>much the same that you get on host

00:35:45.210 --> 00:35:47.210
<v Speaker 1>when you're when you're when you have all

00:35:47.210 --> 00:35:49.930
<v Speaker 1>your, like, specific Go setup setup in in

00:35:49.930 --> 00:35:51.850
<v Speaker 1>your host, like, everything is set up correctly,

00:35:51.850 --> 00:35:53.455
<v Speaker 1>and you're and you're, like,

00:35:53.935 --> 00:35:55.055
<v Speaker 1>have those persistent

00:35:55.135 --> 00:35:57.695
<v Speaker 1>folders in those. One thing here, we can

00:35:57.695 --> 00:35:59.135
<v Speaker 1>do an extra thing.

00:36:00.175 --> 00:36:02.175
<v Speaker 1>I'm not sure. Like, this copy probably was

00:36:02.175 --> 00:36:03.695
<v Speaker 1>super fast in here. So, again, it

00:36:04.550 --> 00:36:06.470
<v Speaker 1>yeah. I can see that it took, like,

00:36:06.630 --> 00:36:08.790
<v Speaker 1>zero point two seconds. So, like, I guess

00:36:08.790 --> 00:36:11.430
<v Speaker 1>it doesn't quite much make sense to optimize

00:36:11.430 --> 00:36:13.590
<v Speaker 1>it. But, you saw, there was a pipe

00:36:13.830 --> 00:36:16.790
<v Speaker 1>mount pipe bind there as well. Yeah. So,

00:36:16.790 --> 00:36:19.865
<v Speaker 1>basically, we could also do just, like, mounting

00:36:19.865 --> 00:36:20.585
<v Speaker 1>here,

00:36:22.025 --> 00:36:23.705
<v Speaker 1>bind is the default

00:36:23.705 --> 00:36:24.905
<v Speaker 1>to type. So

00:36:25.385 --> 00:36:27.545
<v Speaker 1>if do this, then you don't actually need

00:36:27.625 --> 00:36:28.745
<v Speaker 1>you may need a copy.

00:36:29.545 --> 00:36:32.025
<v Speaker 1>So then it would just mount our contact

00:36:31.980 --> 00:36:33.340
<v Speaker 1>into this

00:36:33.500 --> 00:36:35.660
<v Speaker 1>into this working directory.

00:36:36.540 --> 00:36:37.260
<v Speaker 1>And,

00:36:37.660 --> 00:36:39.500
<v Speaker 1>yeah, like, we will we will we will

00:36:39.500 --> 00:36:41.180
<v Speaker 1>not need to duplicate the data.

00:36:41.660 --> 00:36:42.780
<v Speaker 1>We'll like,

00:36:43.100 --> 00:36:45.500
<v Speaker 1>by default, it's it's read only as well

00:36:45.500 --> 00:36:47.465
<v Speaker 1>that might be issue. In some cases, I

00:36:47.465 --> 00:36:49.625
<v Speaker 1>don't think it's issuing here. But, basically, that

00:36:49.625 --> 00:36:50.905
<v Speaker 1>allows us to just,

00:36:51.385 --> 00:36:52.025
<v Speaker 1>like,

00:36:52.825 --> 00:36:54.505
<v Speaker 1>directly access those files.

00:36:54.985 --> 00:36:56.665
<v Speaker 0>So does that mean on on the whole

00:36:56.665 --> 00:36:57.225
<v Speaker 1>test.

00:36:57.945 --> 00:36:58.665
<v Speaker 0>So

00:36:58.825 --> 00:37:00.345
<v Speaker 0>I may sense early here, but I'm gonna

00:37:00.345 --> 00:37:02.500
<v Speaker 0>go on some of my things that I

00:37:02.500 --> 00:37:04.180
<v Speaker 0>think I know about Docker. Right? So when

00:37:04.180 --> 00:37:05.780
<v Speaker 0>we do the the build, we pass in

00:37:05.780 --> 00:37:07.460
<v Speaker 0>the build context, which is a dot. And

00:37:07.460 --> 00:37:08.660
<v Speaker 0>as far as I believe in the I

00:37:08.660 --> 00:37:10.740
<v Speaker 0>remember, this is literally a tars up of

00:37:10.740 --> 00:37:13.380
<v Speaker 0>the entire context to the BuildKit daemon.

00:37:14.175 --> 00:37:15.855
<v Speaker 0>Can that actually be a meted now if

00:37:15.855 --> 00:37:18.335
<v Speaker 0>we're using the type mount targets, or is

00:37:18.335 --> 00:37:20.495
<v Speaker 0>that relative still to the build context?

00:37:21.535 --> 00:37:24.015
<v Speaker 1>So it's still relative to build context.

00:37:24.015 --> 00:37:24.815
<v Speaker 1>But

00:37:24.895 --> 00:37:27.295
<v Speaker 1>but

00:37:27.830 --> 00:37:28.630
<v Speaker 1>so

00:37:28.950 --> 00:37:31.190
<v Speaker 1>what you said was, like, half correct.

00:37:31.590 --> 00:37:32.150
<v Speaker 1>So

00:37:33.110 --> 00:37:34.950
<v Speaker 1>BuildKit does to,

00:37:35.430 --> 00:37:38.470
<v Speaker 1>like, lots of optimizations. For example, like like,

00:37:38.470 --> 00:37:40.224
<v Speaker 1>if we if we just, like, had a

00:37:40.224 --> 00:37:42.305
<v Speaker 1>copy go mode in here and we didn't

00:37:42.305 --> 00:37:44.224
<v Speaker 1>copy anything in our build,

00:37:44.224 --> 00:37:46.464
<v Speaker 1>then BuildKit is smart enough. It doesn't it

00:37:46.464 --> 00:37:49.425
<v Speaker 1>doesn't, like, tar everything up into giant turbo

00:37:49.425 --> 00:37:50.785
<v Speaker 1>like the old builder did.

00:37:51.185 --> 00:37:53.585
<v Speaker 1>It it actually, like it pulls the files

00:37:53.585 --> 00:37:56.030
<v Speaker 1>when you need them. So the the builder

00:37:56.030 --> 00:37:57.630
<v Speaker 1>side will tell you that, hey. I only

00:37:57.630 --> 00:37:59.550
<v Speaker 1>need to go mod, and it will basically

00:37:59.550 --> 00:38:01.230
<v Speaker 1>adjust, like, fetch to go mod.

00:38:01.710 --> 00:38:04.350
<v Speaker 1>Uh-huh. Nice. So so so and and the

00:38:04.350 --> 00:38:06.510
<v Speaker 1>same thing works with the updates as well.

00:38:06.510 --> 00:38:08.030
<v Speaker 1>Like, basically, like, when you're doing the second

00:38:08.030 --> 00:38:09.150
<v Speaker 1>build, the reason

00:38:09.735 --> 00:38:11.735
<v Speaker 1>why, like, some of this this is fast

00:38:11.735 --> 00:38:13.895
<v Speaker 1>on the second time already is that we

00:38:13.895 --> 00:38:16.615
<v Speaker 1>can already BuildKit can already see that that

00:38:16.615 --> 00:38:19.175
<v Speaker 1>you uploaded the context one time. And the

00:38:19.175 --> 00:38:21.175
<v Speaker 1>next time, it just, like, does, like, a

00:38:21.175 --> 00:38:23.255
<v Speaker 1>com comparison and see what files are are

00:38:23.255 --> 00:38:25.175
<v Speaker 1>changed and only copies the files that are

00:38:25.175 --> 00:38:25.415
<v Speaker 1>changed.

00:38:26.200 --> 00:38:26.760
<v Speaker 1>But

00:38:27.000 --> 00:38:29.960
<v Speaker 1>it isn't directly, like, looking at your client

00:38:29.960 --> 00:38:31.720
<v Speaker 1>desktop. Like, we need to make a snapshot

00:38:31.720 --> 00:38:33.960
<v Speaker 1>of the file. So so so, like, when

00:38:33.960 --> 00:38:35.480
<v Speaker 1>it's asking that, for example, like, give me

00:38:35.480 --> 00:38:37.800
<v Speaker 1>go mod, then we actually make a publication

00:38:37.800 --> 00:38:39.560
<v Speaker 1>on the daemon side of of the file.

00:38:39.560 --> 00:38:42.175
<v Speaker 1>Because, like, an otherwise, like, if we

00:38:42.494 --> 00:38:44.575
<v Speaker 1>like, patching things would happen if you would

00:38:44.575 --> 00:38:46.255
<v Speaker 1>allow this file to be mutable.

00:38:46.415 --> 00:38:47.535
<v Speaker 1>So we need we need to make a

00:38:47.535 --> 00:38:49.214
<v Speaker 1>snapshot of it. That that's the that's the

00:38:49.214 --> 00:38:51.775
<v Speaker 1>only caveat. Like, otherwise, it's it's quite smart.

00:38:51.775 --> 00:38:52.175
<v Speaker 1>Yeah.

00:38:52.575 --> 00:38:54.335
<v Speaker 1>So what what did we get? What's what's

00:38:54.335 --> 00:38:56.095
<v Speaker 1>the time of this one? 30 nine seconds

00:38:56.095 --> 00:38:56.895
<v Speaker 0>for the build.

00:38:57.830 --> 00:39:00.230
<v Speaker 1>So so it's thirty nine for the download

00:39:00.230 --> 00:39:02.390
<v Speaker 1>and thirty nine for the

00:39:02.710 --> 00:39:04.790
<v Speaker 1>or thirty thirty Thirty point eight for the

00:39:04.790 --> 00:39:06.630
<v Speaker 0>download and thirty nine point four for the

00:39:06.630 --> 00:39:09.190
<v Speaker 0>build. Yeah. Okay. So so the next one,

00:39:09.270 --> 00:39:10.550
<v Speaker 1>like, if you would just want to build

00:39:10.550 --> 00:39:12.710
<v Speaker 1>it again, it should be, like, instantaneous.

00:39:12.710 --> 00:39:14.805
<v Speaker 1>Right? Because, like, nothing has changed. You can

00:39:14.805 --> 00:39:16.245
<v Speaker 1>try this one for a second.

00:39:16.805 --> 00:39:18.645
<v Speaker 0>Alright. Let's do it. So we can just

00:39:18.645 --> 00:39:19.845
<v Speaker 0>push up and run it. Yeah.

00:39:25.380 --> 00:39:28.099
<v Speaker 0>Alright. Nice. It was was pretty fast. And

00:39:28.099 --> 00:39:29.140
<v Speaker 1>all the all those

00:39:29.460 --> 00:39:31.220
<v Speaker 1>like, it just needed to, like, validate that

00:39:31.220 --> 00:39:33.220
<v Speaker 1>some tags are still valid.

00:39:33.220 --> 00:39:35.140
<v Speaker 1>Right? That your, like, Alpine has not updated

00:39:35.140 --> 00:39:36.579
<v Speaker 1>and and things like that.

00:39:36.900 --> 00:39:38.980
<v Speaker 1>Your build context was uploaded in a hundred

00:39:38.980 --> 00:39:41.085
<v Speaker 1>milliseconds, but all the all the steps were

00:39:41.085 --> 00:39:43.245
<v Speaker 1>cached. Right? So now if you make some

00:39:43.245 --> 00:39:44.445
<v Speaker 1>kind of a change

00:39:45.085 --> 00:39:46.685
<v Speaker 1>Yeah. For example, yeah, I have to adjust

00:39:46.685 --> 00:39:48.125
<v Speaker 1>it. Whatever.

00:39:48.365 --> 00:39:50.925
<v Speaker 0>Okay. So let's let's run this locally first

00:39:50.925 --> 00:39:52.205
<v Speaker 0>and see how long it takes, and then

00:39:52.205 --> 00:39:54.205
<v Speaker 0>we'll do the the container build.

00:39:54.740 --> 00:39:55.619
<v Speaker 0>Sure. Sure.

00:39:57.940 --> 00:39:58.500
<v Speaker 0>And

00:40:04.020 --> 00:40:04.500
<v Speaker 0>time.

00:40:08.355 --> 00:40:10.835
<v Speaker 0>That that running the local and then the

00:40:10.835 --> 00:40:12.355
<v Speaker 0>container was just like a question that we

00:40:12.355 --> 00:40:13.795
<v Speaker 0>had from Russell. He wanted to see if

00:40:13.795 --> 00:40:16.035
<v Speaker 0>we could compare the speeds. I expect them

00:40:16.035 --> 00:40:16.755
<v Speaker 0>to be

00:40:17.955 --> 00:40:18.515
<v Speaker 0>pretty close.

00:40:21.840 --> 00:40:23.840
<v Speaker 0>Maybe not as close as I Well,

00:40:24.080 --> 00:40:26.320
<v Speaker 1>okay. In here, of course, it depends on

00:40:26.320 --> 00:40:28.480
<v Speaker 1>what, like, what your, like like like, your

00:40:28.480 --> 00:40:30.160
<v Speaker 1>state was before.

00:40:30.320 --> 00:40:32.080
<v Speaker 1>And and also,

00:40:32.240 --> 00:40:32.480
<v Speaker 1>like

00:40:33.695 --> 00:40:36.255
<v Speaker 1>like, it depends on things like like how

00:40:36.255 --> 00:40:38.335
<v Speaker 1>many CPU cores you have enabled in Docker

00:40:38.335 --> 00:40:39.695
<v Speaker 1>for Mac and stuff like that as well.

00:40:39.695 --> 00:40:42.095
<v Speaker 1>But then that Yeah. There there Like, I

00:40:42.095 --> 00:40:43.615
<v Speaker 1>I don't I don't know if if I

00:40:43.615 --> 00:40:45.615
<v Speaker 1>I think by default, we don't enable, like

00:40:45.615 --> 00:40:46.095
<v Speaker 1>like,

00:40:46.760 --> 00:40:48.760
<v Speaker 1>your own machine or something like that. But

00:40:49.640 --> 00:40:51.079
<v Speaker 1>but the other guy like that. Yeah. This

00:40:51.240 --> 00:40:53.640
<v Speaker 0>I can't remember what my configuration is. It

00:40:53.640 --> 00:40:55.240
<v Speaker 1>it should be it should be similar.

00:40:55.800 --> 00:40:56.440
<v Speaker 1>So

00:41:00.795 --> 00:41:02.955
<v Speaker 0>that was fast. Almost as fast as the

00:41:02.955 --> 00:41:03.835
<v Speaker 0>host. Yeah.

00:41:05.115 --> 00:41:07.355
<v Speaker 0>So yeah. You're right. That's awesome. And then

00:41:07.675 --> 00:41:09.595
<v Speaker 1>I I think it's yeah. Like like

00:41:09.595 --> 00:41:10.155
<v Speaker 1>yeah.

00:41:11.355 --> 00:41:13.835
<v Speaker 1>Yeah. It it it it's it's it's similar.

00:41:14.600 --> 00:41:15.400
<v Speaker 1>It's,

00:41:16.680 --> 00:41:17.960
<v Speaker 1>like yeah. It is

00:41:18.520 --> 00:41:19.960
<v Speaker 1>like, I I would have hoped it would

00:41:19.960 --> 00:41:21.240
<v Speaker 1>be, like, a little bit closer. Like, I

00:41:21.240 --> 00:41:22.760
<v Speaker 1>don't know if it's, the CPU settings or

00:41:22.760 --> 00:41:24.760
<v Speaker 1>or something like that or or, like like,

00:41:24.760 --> 00:41:27.080
<v Speaker 1>it's yeah. It I like the default settings.

00:41:27.240 --> 00:41:28.840
<v Speaker 1>Maybe it's an Apple magic a little bit,

00:41:28.840 --> 00:41:30.595
<v Speaker 1>but, yeah, like it. Yeah. I should get

00:41:30.595 --> 00:41:31.715
<v Speaker 0>an m one, but I'm sure that will

00:41:31.715 --> 00:41:33.955
<v Speaker 0>help. But Yeah. Yeah. For sure. For sure.

00:41:33.955 --> 00:41:36.675
<v Speaker 1>Yeah. We went from seventy four seconds then

00:41:36.675 --> 00:41:38.595
<v Speaker 0>to two point six, and then we were

00:41:38.595 --> 00:41:40.515
<v Speaker 0>only five point seven seconds here. But you're

00:41:40.515 --> 00:41:42.350
<v Speaker 0>right that, like, my Docker for Mac does

00:41:42.350 --> 00:41:43.630
<v Speaker 0>not have access to all my cores. It

00:41:43.630 --> 00:41:45.310
<v Speaker 0>doesn't have access to all my memory. It's

00:41:45.310 --> 00:41:48.670
<v Speaker 0>constrained. So, you know, that's really close considering

00:41:48.670 --> 00:41:50.830
<v Speaker 0>there are those constraints in place. So that's

00:41:50.830 --> 00:41:52.670
<v Speaker 0>awesome. I really like The point the point

00:41:52.670 --> 00:41:53.790
<v Speaker 1>is that yeah.

00:41:55.045 --> 00:41:57.525
<v Speaker 1>Like, theoretically, there shouldn't be much overhead. Like,

00:41:57.525 --> 00:41:59.925
<v Speaker 1>if if, like like, like, at least, like,

00:41:59.925 --> 00:42:02.245
<v Speaker 1>there shouldn't be overhead from, like, from

00:42:03.125 --> 00:42:04.565
<v Speaker 1>the standpoint of,

00:42:05.765 --> 00:42:07.765
<v Speaker 1>like, that that doing

00:42:07.845 --> 00:42:09.285
<v Speaker 1>getting container is

00:42:09.540 --> 00:42:11.540
<v Speaker 1>is less efficient because it can't access some

00:42:11.540 --> 00:42:13.380
<v Speaker 1>files or or or or something like that

00:42:13.380 --> 00:42:14.900
<v Speaker 1>that the host can access.

00:42:15.300 --> 00:42:16.660
<v Speaker 1>So so

00:42:17.140 --> 00:42:19.300
<v Speaker 1>the process itself should be should be very

00:42:19.300 --> 00:42:20.260
<v Speaker 1>similar

00:42:20.340 --> 00:42:21.460
<v Speaker 1>except, of course, like,

00:42:22.155 --> 00:42:24.795
<v Speaker 1>everyone gets this like, you just need Docker

00:42:24.795 --> 00:42:26.155
<v Speaker 1>to get the same flow all the time

00:42:26.155 --> 00:42:27.675
<v Speaker 1>and you don't need any, like, whole setup

00:42:27.675 --> 00:42:28.795
<v Speaker 1>or anything like that.

00:42:29.195 --> 00:42:32.075
<v Speaker 0>Alright. Awesome. We have a question from Noel

00:42:32.155 --> 00:42:34.555
<v Speaker 0>in the chat. He says, with BuildKit, it

00:42:34.555 --> 00:42:36.315
<v Speaker 0>doesn't copy over the whole context.

00:42:37.070 --> 00:42:38.430
<v Speaker 0>Only thing it needs

00:42:39.150 --> 00:42:40.910
<v Speaker 0>only thing that needs to be copied. Does

00:42:40.910 --> 00:42:42.670
<v Speaker 0>this mean that the Docker ignore is not

00:42:42.670 --> 00:42:44.590
<v Speaker 0>needed when using BuildKit?

00:42:45.869 --> 00:42:49.230
<v Speaker 1>Pretty much yet. Like like unless you're doing,

00:42:49.230 --> 00:42:51.070
<v Speaker 1>like, copy dot, of course, like, that you

00:42:51.070 --> 00:42:51.950
<v Speaker 1>shouldn't be doing.

00:42:52.515 --> 00:42:53.395
<v Speaker 1>But, like,

00:42:53.714 --> 00:42:56.595
<v Speaker 1>if you're if you're just copying, like, the

00:42:56.595 --> 00:42:58.515
<v Speaker 1>specific files that you that you need in

00:42:58.515 --> 00:42:59.635
<v Speaker 1>Dockerfile anyway,

00:42:59.875 --> 00:43:02.595
<v Speaker 1>then it already works out like a reverse

00:43:02.595 --> 00:43:03.315
<v Speaker 1>Docker ignore.

00:43:04.720 --> 00:43:06.400
<v Speaker 1>And, also, like like,

00:43:06.480 --> 00:43:08.640
<v Speaker 1>you should never use Docker ignore for filtering

00:43:08.640 --> 00:43:11.360
<v Speaker 1>your files anyway. Like, you should Docker ignore

00:43:11.360 --> 00:43:13.280
<v Speaker 1>is same as ignore. Like, you you

00:43:13.840 --> 00:43:15.920
<v Speaker 1>just put files there that are, like, that

00:43:16.785 --> 00:43:18.545
<v Speaker 1>that are, like, true or false that you

00:43:18.545 --> 00:43:19.984
<v Speaker 1>that you never want to be as part

00:43:19.984 --> 00:43:21.825
<v Speaker 1>of your project. Like, if you want to,

00:43:21.825 --> 00:43:24.225
<v Speaker 1>like, actually filter, like, some files

00:43:24.464 --> 00:43:26.065
<v Speaker 1>from your project, then you use the copy

00:43:26.065 --> 00:43:26.945
<v Speaker 1>rules for that.

00:43:28.065 --> 00:43:28.944
<v Speaker 0>Alright. Awesome.

00:43:30.270 --> 00:43:30.830
<v Speaker 0>So

00:43:31.230 --> 00:43:33.070
<v Speaker 0>there was another feature that we kinda spoke

00:43:33.070 --> 00:43:35.390
<v Speaker 0>about briefly. I mentioned briefly at the start,

00:43:35.390 --> 00:43:36.830
<v Speaker 0>which was the ability to get a binary

00:43:36.830 --> 00:43:38.750
<v Speaker 0>out of this so that I can you

00:43:38.750 --> 00:43:40.270
<v Speaker 0>access it and run it locally on my

00:43:40.270 --> 00:43:42.030
<v Speaker 0>machine. Could we maybe walk through the process

00:43:42.030 --> 00:43:42.590
<v Speaker 0>of doing that?

00:43:43.485 --> 00:43:46.045
<v Speaker 1>Sure. And it's it's very simple.

00:43:47.005 --> 00:43:48.845
<v Speaker 1>I again, like, if you

00:43:49.885 --> 00:43:51.805
<v Speaker 1>maybe let let's look at the docs first.

00:43:51.885 --> 00:43:52.525
<v Speaker 0>Yeah.

00:43:52.765 --> 00:43:53.405
<v Speaker 1>Like,

00:43:54.125 --> 00:43:55.885
<v Speaker 1>should go to the BuildKit docs.

00:43:57.140 --> 00:43:59.380
<v Speaker 1>So to be the BuildKit tab,

00:44:01.300 --> 00:44:03.140
<v Speaker 1>just scroll down a little bit for the

00:44:03.140 --> 00:44:04.020
<v Speaker 1>documentation.

00:44:04.260 --> 00:44:05.540
<v Speaker 1>You can just, like, write it from the

00:44:05.540 --> 00:44:07.380
<v Speaker 1>read me as well. Yeah. So go to

00:44:07.380 --> 00:44:08.980
<v Speaker 1>the build command in here. BuildKit build,

00:44:10.715 --> 00:44:12.315
<v Speaker 1>and it should be the outputs.

00:44:12.715 --> 00:44:14.315
<v Speaker 1>So that's just output.

00:44:14.715 --> 00:44:15.995
<v Speaker 1>Yeah. That show.

00:44:17.035 --> 00:44:19.115
<v Speaker 1>So so this is just click on the

00:44:19.115 --> 00:44:20.555
<v Speaker 1>link for the for the flag.

00:44:22.109 --> 00:44:23.070
<v Speaker 1>Yeah. So

00:44:24.510 --> 00:44:26.349
<v Speaker 1>so the difference in in

00:44:26.829 --> 00:44:27.869
<v Speaker 1>as like a

00:44:28.829 --> 00:44:31.309
<v Speaker 1>the the conceptual difference between the BuildKit builder

00:44:31.309 --> 00:44:33.549
<v Speaker 1>and BuildKit is that the BuildKit are always

00:44:33.549 --> 00:44:36.185
<v Speaker 1>built to Docker images. You always run when

00:44:36.185 --> 00:44:38.105
<v Speaker 1>you run Docker build, it will give you

00:44:38.105 --> 00:44:39.225
<v Speaker 1>an image back.

00:44:40.585 --> 00:44:42.665
<v Speaker 1>BuildKit does not do that. BuildKit just builds

00:44:42.665 --> 00:44:44.585
<v Speaker 1>it, and it's left to in your build

00:44:44.585 --> 00:44:46.745
<v Speaker 1>cache. Like, the user basically configures

00:44:47.465 --> 00:44:47.945
<v Speaker 1>what to

00:44:49.430 --> 00:44:50.630
<v Speaker 1>do they want to do with the build

00:44:50.630 --> 00:44:51.750
<v Speaker 1>result afterwards.

00:44:52.070 --> 00:44:53.590
<v Speaker 1>So it might be that the build result

00:44:53.590 --> 00:44:55.750
<v Speaker 1>is is just testing the build cache, might

00:44:55.750 --> 00:44:57.350
<v Speaker 1>be the it's turning to an image, might

00:44:57.350 --> 00:44:58.710
<v Speaker 1>be that maybe you want to get a

00:44:58.710 --> 00:44:59.750
<v Speaker 1>binary back,

00:45:00.630 --> 00:45:03.030
<v Speaker 1>wanna get a back. There's, like, different options

00:45:03.030 --> 00:45:05.155
<v Speaker 1>in here. So what you wanted is local

00:45:05.155 --> 00:45:07.395
<v Speaker 1>binary, so it's the it's the local option

00:45:07.395 --> 00:45:08.035
<v Speaker 1>in here.

00:45:08.994 --> 00:45:10.674
<v Speaker 1>And but, yeah, you can see that there's

00:45:10.674 --> 00:45:13.075
<v Speaker 1>other ones that probably can get the and

00:45:13.075 --> 00:45:14.595
<v Speaker 1>and and things like that.

00:45:14.994 --> 00:45:16.195
<v Speaker 1>Yeah. In your case,

00:45:16.515 --> 00:45:18.994
<v Speaker 1>you you just want the local one. So,

00:45:18.970 --> 00:45:20.570
<v Speaker 1>basically, you just want to do, like, dash

00:45:20.570 --> 00:45:22.810
<v Speaker 1>show and the directory where you want to

00:45:22.810 --> 00:45:23.450
<v Speaker 1>write it.

00:45:24.010 --> 00:45:26.490
<v Speaker 1>Like like, I'll take the first example, basically.

00:45:26.490 --> 00:45:28.570
<v Speaker 1>Or, like, you probably want to write it

00:45:28.570 --> 00:45:30.490
<v Speaker 1>to a Bing directory or something like that.

00:45:30.730 --> 00:45:31.930
<v Speaker 0>Okay. So

00:45:32.465 --> 00:45:33.025
<v Speaker 1>So

00:45:33.345 --> 00:45:34.865
<v Speaker 1>Yeah. I'll do it from the Write write

00:45:35.105 --> 00:45:37.665
<v Speaker 1>it, but don't present there yet because I'll

00:45:37.665 --> 00:45:39.345
<v Speaker 1>I'll explain it why it's like a little

00:45:39.345 --> 00:45:40.065
<v Speaker 1>bit wrong.

00:45:40.545 --> 00:45:42.785
<v Speaker 0>Okay. Because I I think what a lot

00:45:42.785 --> 00:45:43.985
<v Speaker 0>of people do over the years, and I

00:45:43.985 --> 00:45:45.665
<v Speaker 0>see this in Stack Overflow a lot, people

00:45:45.665 --> 00:45:48.305
<v Speaker 0>asking questions is that they use Docker

00:45:48.520 --> 00:45:51.560
<v Speaker 0>to build their go application, their rest application.

00:45:51.640 --> 00:45:53.640
<v Speaker 0>And then normally they run a container and

00:45:53.640 --> 00:45:55.400
<v Speaker 0>copy the binary back onto those. This this

00:45:55.400 --> 00:45:58.280
<v Speaker 0>removes that whole little hoop jump. Right? So

00:45:58.600 --> 00:46:01.320
<v Speaker 1>Abs absolutely. Like like the if you go

00:46:01.320 --> 00:46:02.360
<v Speaker 1>back to the

00:46:02.835 --> 00:46:03.875
<v Speaker 1>to the,

00:46:04.435 --> 00:46:06.435
<v Speaker 1>like, the first Docker file you had where

00:46:06.435 --> 00:46:09.955
<v Speaker 1>you copied the the binary. Right? Mhmm. Then,

00:46:09.955 --> 00:46:11.795
<v Speaker 1>like, in a very old days where there

00:46:11.795 --> 00:46:13.235
<v Speaker 1>was no multistage builds,

00:46:13.714 --> 00:46:16.115
<v Speaker 1>then, like, how I built all my all

00:46:16.115 --> 00:46:17.799
<v Speaker 1>my stuff, for example, was that I I

00:46:17.799 --> 00:46:19.400
<v Speaker 1>needed to have two photographers.

00:46:19.640 --> 00:46:21.400
<v Speaker 1>One was like this real

00:46:21.400 --> 00:46:23.240
<v Speaker 1>one, and the other one was one that

00:46:23.240 --> 00:46:24.599
<v Speaker 1>copied the binary, and then I needed to

00:46:24.599 --> 00:46:24.920
<v Speaker 1>do, like

00:46:25.640 --> 00:46:26.359
<v Speaker 1>actually,

00:46:26.680 --> 00:46:28.279
<v Speaker 1>you couldn't copy out from an image. You

00:46:28.279 --> 00:46:30.119
<v Speaker 1>need to create a container from an image

00:46:30.045 --> 00:46:31.805
<v Speaker 1>and then copy the binary out from the

00:46:31.805 --> 00:46:33.325
<v Speaker 1>container, and then you could use it in

00:46:33.325 --> 00:46:35.645
<v Speaker 1>a second build. So, like like, that that's

00:46:35.645 --> 00:46:38.125
<v Speaker 1>all gone with multisage builds, that's and and

00:46:38.125 --> 00:46:39.325
<v Speaker 1>in this case, where you want to get

00:46:39.325 --> 00:46:40.765
<v Speaker 1>just the builder in your host because you

00:46:40.765 --> 00:46:43.085
<v Speaker 1>want to run it, like, that will that's

00:46:43.085 --> 00:46:43.964
<v Speaker 1>also, like,

00:46:44.700 --> 00:46:46.619
<v Speaker 1>that that's fixed by the the show. So

00:46:46.619 --> 00:46:48.460
<v Speaker 1>you don't need blocks in here. It's just

00:46:48.460 --> 00:46:48.700
<v Speaker 1>like

00:46:49.660 --> 00:46:51.420
<v Speaker 1>I guess you you want, like, local being

00:46:51.420 --> 00:46:52.700
<v Speaker 1>direct for the first.

00:46:53.579 --> 00:46:54.220
<v Speaker 1>And

00:46:54.780 --> 00:46:56.859
<v Speaker 1>but the the problem with this one now

00:46:56.859 --> 00:46:57.900
<v Speaker 1>would be that

00:46:58.220 --> 00:46:59.099
<v Speaker 1>it will

00:47:00.125 --> 00:47:02.125
<v Speaker 1>copy out this whole stage, so it will

00:47:02.125 --> 00:47:03.565
<v Speaker 1>copy out Alpine as well.

00:47:04.444 --> 00:47:06.684
<v Speaker 0>Can we can we copy a single binary,

00:47:06.684 --> 00:47:07.645
<v Speaker 0>or is it just

00:47:08.125 --> 00:47:10.365
<v Speaker 1>Yeah. Yeah. Of course, you can. So what

00:47:10.365 --> 00:47:12.444
<v Speaker 1>you probably want to do in here is

00:47:12.444 --> 00:47:14.045
<v Speaker 1>that you want to go from scratch.

00:47:15.080 --> 00:47:16.280
<v Speaker 1>Scratch.

00:47:16.760 --> 00:47:19.240
<v Speaker 1>So scratch is, a new object in Dockerfile.

00:47:19.240 --> 00:47:22.200
<v Speaker 1>Right? Mhmm. So it like, zero layers, nothing.

00:47:22.200 --> 00:47:23.400
<v Speaker 1>It's just just new.

00:47:25.080 --> 00:47:26.440
<v Speaker 1>We can do

00:47:27.825 --> 00:47:30.065
<v Speaker 1>we can do the we can just put

00:47:30.065 --> 00:47:32.545
<v Speaker 1>the binary on on the scratch sheet. We

00:47:32.545 --> 00:47:33.505
<v Speaker 1>can even, like

00:47:34.385 --> 00:47:35.984
<v Speaker 1>or maybe I could better to do this

00:47:35.984 --> 00:47:36.785
<v Speaker 1>is to

00:47:37.665 --> 00:47:39.905
<v Speaker 1>paint this this stage binary,

00:47:39.905 --> 00:47:40.705
<v Speaker 1>and then

00:47:41.589 --> 00:47:43.430
<v Speaker 1>if if we just do it by default,

00:47:43.430 --> 00:47:44.870
<v Speaker 1>we want to build

00:47:45.109 --> 00:47:47.349
<v Speaker 1>Alpine or, like, image based on Alpine, so

00:47:47.349 --> 00:47:48.790
<v Speaker 1>we have, like, shell and stuff like that

00:47:48.790 --> 00:47:50.630
<v Speaker 1>as well, then

00:47:51.190 --> 00:47:52.790
<v Speaker 1>we can do from

00:47:52.790 --> 00:47:54.310
<v Speaker 1>binary in here

00:47:54.765 --> 00:47:55.885
<v Speaker 1>and in here.

00:47:56.525 --> 00:47:58.605
<v Speaker 1>But so so, like, we have a stage

00:47:58.605 --> 00:48:00.525
<v Speaker 1>that is from scratch that only contains the

00:48:00.525 --> 00:48:01.165
<v Speaker 1>binary.

00:48:01.325 --> 00:48:03.085
<v Speaker 1>And then at the last stage, we we

00:48:03.085 --> 00:48:05.644
<v Speaker 1>copy all all the binaries that's copied from

00:48:05.644 --> 00:48:06.045
<v Speaker 1>from bin.

00:48:07.480 --> 00:48:08.040
<v Speaker 1>So

00:48:08.360 --> 00:48:10.440
<v Speaker 1>the benefit of maybe this pattern is that,

00:48:10.440 --> 00:48:11.880
<v Speaker 1>let's say, you have a second binary as

00:48:11.880 --> 00:48:12.360
<v Speaker 1>well,

00:48:13.160 --> 00:48:14.600
<v Speaker 1>like, in in

00:48:14.760 --> 00:48:17.160
<v Speaker 1>well, whatever. Like, you're you're building three binaries

00:48:17.160 --> 00:48:18.680
<v Speaker 1>or something like that. So you can put

00:48:18.680 --> 00:48:20.565
<v Speaker 1>them all in here, and then we don't

00:48:20.565 --> 00:48:22.805
<v Speaker 1>need to copy paste all the copy steps

00:48:22.805 --> 00:48:23.765
<v Speaker 1>in here for,

00:48:24.244 --> 00:48:26.165
<v Speaker 1>like, all the three copy steps for every

00:48:26.165 --> 00:48:28.005
<v Speaker 1>binary. You can just copy, like, all the

00:48:28.005 --> 00:48:29.285
<v Speaker 1>binaries targets.

00:48:30.005 --> 00:48:32.085
<v Speaker 0>Okay. Does that mean for our build x

00:48:32.160 --> 00:48:34.400
<v Speaker 0>command with the output flag that we've got

00:48:34.400 --> 00:48:36.720
<v Speaker 0>pending, do we have to target the the

00:48:36.720 --> 00:48:37.440
<v Speaker 0>binary?

00:48:37.839 --> 00:48:39.200
<v Speaker 1>Yes. Okay.

00:48:41.359 --> 00:48:42.880
<v Speaker 1>I mean, it's just that it depends on

00:48:42.880 --> 00:48:45.039
<v Speaker 1>what we choose as default target. Right? Of

00:48:45.039 --> 00:48:46.895
<v Speaker 1>course. Like, if if you if I would,

00:48:46.895 --> 00:48:47.375
<v Speaker 1>like,

00:48:47.695 --> 00:48:50.015
<v Speaker 1>put the binary stage as a last stage

00:48:50.015 --> 00:48:52.015
<v Speaker 1>or or, like, just put, like, from binary

00:48:52.015 --> 00:48:53.855
<v Speaker 1>in here, then you wouldn't need to do

00:48:53.855 --> 00:48:55.535
<v Speaker 1>that. It just depends on you as a

00:48:55.535 --> 00:48:57.215
<v Speaker 1>project developer, like, what do you want the,

00:48:57.549 --> 00:49:00.030
<v Speaker 1>like, the default Docker build command to do.

00:49:00.190 --> 00:49:01.549
<v Speaker 0>Oh, yeah. I think I dropped this and

00:49:01.549 --> 00:49:04.269
<v Speaker 0>then make target anyway. Right? So but, really,

00:49:04.269 --> 00:49:05.549
<v Speaker 0>I just wanna be able to build that

00:49:05.549 --> 00:49:07.630
<v Speaker 0>layer with the scratch and the bin and

00:49:07.630 --> 00:49:09.470
<v Speaker 0>then pull that down to here. So does

00:49:09.470 --> 00:49:11.950
<v Speaker 0>that command look okay to you? Yeah. Sure.

00:49:11.950 --> 00:49:12.269
<v Speaker 1>Press.

00:49:13.585 --> 00:49:16.065
<v Speaker 0>Said with such confidence. Let's see. Alright.

00:49:20.865 --> 00:49:22.465
<v Speaker 1>Okay. We were a little bit past it

00:49:22.465 --> 00:49:23.425
<v Speaker 1>now. Like,

00:49:23.985 --> 00:49:24.705
<v Speaker 1>3.8.

00:49:25.560 --> 00:49:26.760
<v Speaker 0>So so now

00:49:27.640 --> 00:49:30.360
<v Speaker 1>so and that yeah. Now you have the

00:49:33.000 --> 00:49:35.880
<v Speaker 1>you have the binary. Right? I built it

00:49:35.880 --> 00:49:37.240
<v Speaker 0>for Linux, and now I'm trying to run

00:49:37.240 --> 00:49:38.520
<v Speaker 0>it on a Mac. Yeah. There we go.

00:49:38.520 --> 00:49:39.320
<v Speaker 1>Exactly.

00:49:40.815 --> 00:49:43.055
<v Speaker 1>We'll we'll get to that as well. Right?

00:49:44.095 --> 00:49:44.735
<v Speaker 0>Okay.

00:49:45.695 --> 00:49:47.775
<v Speaker 0>I like that. But so so but yeah.

00:49:47.775 --> 00:49:48.895
<v Speaker 1>Like, this gave you

00:49:49.935 --> 00:49:52.015
<v Speaker 1>maybe the final error rate so that you

00:49:52.015 --> 00:49:52.655
<v Speaker 1>can

00:49:53.680 --> 00:49:54.000
<v Speaker 1>add

00:49:55.600 --> 00:49:57.920
<v Speaker 1>so one thing is, of course, like,

00:49:58.480 --> 00:50:00.000
<v Speaker 1>if you want to, like, copy those binaries

00:50:00.000 --> 00:50:00.720
<v Speaker 1>around,

00:50:01.520 --> 00:50:03.520
<v Speaker 1>probably don't want it to be dynamic.

00:50:04.560 --> 00:50:06.560
<v Speaker 0>Yeah. You find it on a static binary.

00:50:09.025 --> 00:50:09.825
<v Speaker 1>The the

00:50:10.305 --> 00:50:11.825
<v Speaker 1>actually, like, the recommendation

00:50:11.825 --> 00:50:13.665
<v Speaker 1>I have for, like, all

00:50:13.825 --> 00:50:17.185
<v Speaker 1>all time to build go is to just,

00:50:17.185 --> 00:50:20.225
<v Speaker 1>like not not to always dis disable seago,

00:50:20.225 --> 00:50:22.625
<v Speaker 1>but but to always define what do you

00:50:22.625 --> 00:50:23.985
<v Speaker 1>expect the seago value to be.

00:50:24.920 --> 00:50:27.160
<v Speaker 1>Because, like especially if you get to, like,

00:50:27.160 --> 00:50:29.320
<v Speaker 1>building multi platform targets,

00:50:29.800 --> 00:50:31.240
<v Speaker 1>then Go has this

00:50:31.560 --> 00:50:34.280
<v Speaker 1>weird logic that, like, your native target is

00:50:34.280 --> 00:50:35.800
<v Speaker 1>using seagull by default,

00:50:36.440 --> 00:50:38.835
<v Speaker 1>and your other targets are not or other

00:50:38.835 --> 00:50:41.075
<v Speaker 1>platforms are not using Sego by default. So

00:50:41.075 --> 00:50:44.035
<v Speaker 1>you get, like, a completely different, like, dependencies

00:50:44.035 --> 00:50:44.835
<v Speaker 1>depending

00:50:44.835 --> 00:50:47.075
<v Speaker 1>on what platform you're building. So I would

00:50:47.075 --> 00:50:49.395
<v Speaker 1>just, like, always recommend you to just think

00:50:49.395 --> 00:50:51.315
<v Speaker 1>about if your project is using Sego or

00:50:51.315 --> 00:50:52.994
<v Speaker 1>not. I I'm not sure if you're project

00:50:52.994 --> 00:50:54.370
<v Speaker 1>using using Seagull.

00:50:54.690 --> 00:50:56.290
<v Speaker 0>No. I think it should be okay without

00:50:56.290 --> 00:50:59.090
<v Speaker 0>Seagull. Yeah. Okay. Then then then this is

00:50:59.090 --> 00:51:00.690
<v Speaker 1>the sim simple thing to do.

00:51:01.970 --> 00:51:03.730
<v Speaker 1>That that that should take care of this

00:51:03.730 --> 00:51:04.290
<v Speaker 1>one as well.

00:51:05.934 --> 00:51:08.095
<v Speaker 0>Okay. So shall we move on to will

00:51:08.095 --> 00:51:09.855
<v Speaker 0>we try and do multi platform?

00:51:11.375 --> 00:51:12.095
<v Speaker 1>Sure.

00:51:13.694 --> 00:51:15.214
<v Speaker 0>Will I be able to build a Mac

00:51:15.214 --> 00:51:16.335
<v Speaker 0>version and

00:51:16.974 --> 00:51:17.454
<v Speaker 0>BuildKit?

00:51:18.630 --> 00:51:20.070
<v Speaker 1>We'll see. We'll see. Alright.

00:51:22.390 --> 00:51:23.910
<v Speaker 1>If you don't run out of time, then

00:51:23.910 --> 00:51:24.630
<v Speaker 1>then yes.

00:51:25.829 --> 00:51:27.829
<v Speaker 0>So oh, yeah. That because the SQL enabled

00:51:27.829 --> 00:51:30.950
<v Speaker 0>is invalidated or build cache. So But yeah.

00:51:30.950 --> 00:51:32.714
<v Speaker 1>That. I'm not sure even sure, like, what

00:51:32.714 --> 00:51:34.635
<v Speaker 1>what does it do. Like, if it just

00:51:34.635 --> 00:51:36.795
<v Speaker 1>invalidates all build cache or it it's just,

00:51:36.795 --> 00:51:39.355
<v Speaker 1>like, because the positive packages has changed. But,

00:51:39.355 --> 00:51:39.914
<v Speaker 1>yeah, like, now.

00:51:43.370 --> 00:51:45.690
<v Speaker 1>It's It's static. Yeah.

00:51:45.690 --> 00:51:48.410
<v Speaker 1>Now now you can copy it to anyone.

00:51:49.130 --> 00:51:49.690
<v Speaker 1>So

00:51:50.890 --> 00:51:53.610
<v Speaker 1>if we think about multi platform now,

00:51:54.170 --> 00:51:54.890
<v Speaker 1>then,

00:51:55.130 --> 00:51:56.490
<v Speaker 1>actually, it's like

00:51:57.465 --> 00:51:59.385
<v Speaker 1>by default, it's it's very easy.

00:51:59.785 --> 00:52:01.785
<v Speaker 1>So you have this command in here. Right?

00:52:02.585 --> 00:52:04.585
<v Speaker 1>Mhmm. And I'm not making any changes to

00:52:04.585 --> 00:52:05.945
<v Speaker 1>the Docker file at all.

00:52:06.585 --> 00:52:08.265
<v Speaker 1>Let me just look at help for a

00:52:08.265 --> 00:52:08.425
<v Speaker 1>second.

00:52:09.940 --> 00:52:12.740
<v Speaker 1>So there's a platforms flag in here. Right?

00:52:12.740 --> 00:52:13.540
<v Speaker 0>Yep.

00:52:14.340 --> 00:52:14.900
<v Speaker 1>And

00:52:15.140 --> 00:52:17.220
<v Speaker 1>and you can just put, like, the

00:52:17.860 --> 00:52:18.420
<v Speaker 1>the

00:52:20.580 --> 00:52:22.580
<v Speaker 1>basically, the value of what platform you you

00:52:22.580 --> 00:52:22.820
<v Speaker 1>want.

00:52:24.715 --> 00:52:25.755
<v Speaker 1>The value is

00:52:26.315 --> 00:52:28.075
<v Speaker 1>the format of the value is,

00:52:28.715 --> 00:52:29.995
<v Speaker 1>like, OS

00:52:30.875 --> 00:52:31.595
<v Speaker 1>arch

00:52:31.755 --> 00:52:33.755
<v Speaker 1>and, like, optionally, a variant thing here.

00:52:37.720 --> 00:52:40.280
<v Speaker 0>Okay. And and the and the values are

00:52:40.360 --> 00:52:42.760
<v Speaker 1>are easy if you come from Go. Otherwise,

00:52:42.760 --> 00:52:43.400
<v Speaker 1>like,

00:52:43.560 --> 00:52:46.120
<v Speaker 1>every every component in the world defines their

00:52:46.120 --> 00:52:47.880
<v Speaker 1>own OS and arch values. So, like, you

00:52:47.880 --> 00:52:49.320
<v Speaker 1>just need to look look up what the

00:52:49.320 --> 00:52:50.120
<v Speaker 1>what the values are.

00:52:51.734 --> 00:52:53.015
<v Speaker 1>And theoretically,

00:52:53.335 --> 00:52:54.855
<v Speaker 1>you want what you just

00:52:55.494 --> 00:52:55.975
<v Speaker 1>to

00:52:56.454 --> 00:52:59.174
<v Speaker 1>do is just put, like, platform in here,

00:52:59.174 --> 00:53:01.335
<v Speaker 1>and let's say you will need around 64.

00:53:02.900 --> 00:53:05.620
<v Speaker 1>And, basically, you're done. And this actually worked

00:53:05.620 --> 00:53:07.620
<v Speaker 1>here and without BuildKit. And and but with

00:53:07.620 --> 00:53:08.500
<v Speaker 1>BuildKit,

00:53:09.220 --> 00:53:10.900
<v Speaker 1>what you can also do is

00:53:13.460 --> 00:53:14.980
<v Speaker 1>okay. My my

00:53:15.855 --> 00:53:17.935
<v Speaker 1>screen share doesn't handle this anymore because it

00:53:17.935 --> 00:53:19.855
<v Speaker 1>went over some column limit.

00:53:20.095 --> 00:53:20.895
<v Speaker 1>So,

00:53:21.135 --> 00:53:22.495
<v Speaker 1>basically, you can do, like,

00:53:23.295 --> 00:53:25.295
<v Speaker 1>yeah, like, you can share yeah. AMD sixty

00:53:25.295 --> 00:53:26.415
<v Speaker 1>four in there as well.

00:53:29.079 --> 00:53:30.920
<v Speaker 1>And, like, how do we want to do

00:53:30.920 --> 00:53:33.880
<v Speaker 1>this? Can we do Darwin AMD 64?

00:53:35.000 --> 00:53:37.080
<v Speaker 1>Not yet because, like, remember

00:53:38.280 --> 00:53:39.160
<v Speaker 1>when you

00:53:39.720 --> 00:53:42.119
<v Speaker 1>when you we looked at the Docker BuildKit

00:53:42.119 --> 00:53:45.005
<v Speaker 1>inspect? Oh, yeah. It had the the platforms,

00:53:45.005 --> 00:53:46.765
<v Speaker 0>isn't it? It it had it had, like,

00:53:46.765 --> 00:53:47.805
<v Speaker 1>bunch of platforms.

00:53:48.285 --> 00:53:50.845
<v Speaker 1>Doesn't have doesn't have Darwin in here because,

00:53:51.165 --> 00:53:53.485
<v Speaker 1>like like so these are the, like, the

00:53:53.725 --> 00:53:56.045
<v Speaker 1>emulation support that comes with or, like,

00:53:56.890 --> 00:53:59.690
<v Speaker 1>that that comes with the Docker desktop.

00:53:59.930 --> 00:54:02.890
<v Speaker 1>So we have there's a machine, of course,

00:54:02.890 --> 00:54:04.490
<v Speaker 1>supports one native architecture.

00:54:05.210 --> 00:54:05.770
<v Speaker 1>But

00:54:06.010 --> 00:54:06.890
<v Speaker 1>for other

00:54:07.369 --> 00:54:09.290
<v Speaker 1>the binaries, we can just run them through

00:54:09.290 --> 00:54:09.850
<v Speaker 1>an emulator,

00:54:10.415 --> 00:54:12.095
<v Speaker 1>but with a performance penalty.

00:54:12.175 --> 00:54:14.335
<v Speaker 1>So what maybe what we can do in

00:54:14.335 --> 00:54:15.135
<v Speaker 1>here is

00:54:15.535 --> 00:54:16.974
<v Speaker 1>just try to run this. You will get

00:54:16.974 --> 00:54:18.655
<v Speaker 1>an error, and then I will explain the

00:54:18.655 --> 00:54:19.215
<v Speaker 1>error.

00:54:21.455 --> 00:54:22.495
<v Speaker 1>Exactly. So

00:54:23.135 --> 00:54:24.494
<v Speaker 1>so

00:54:25.920 --> 00:54:28.080
<v Speaker 1>it would have worked if you just specified

00:54:28.080 --> 00:54:29.040
<v Speaker 1>one platform.

00:54:30.160 --> 00:54:30.800
<v Speaker 1>But

00:54:31.520 --> 00:54:33.680
<v Speaker 1>but because you specified multiple,

00:54:33.839 --> 00:54:36.320
<v Speaker 1>then we can't use the Docker driver anymore

00:54:36.640 --> 00:54:38.560
<v Speaker 1>because, like, the the whole like, the Docker

00:54:38.560 --> 00:54:41.525
<v Speaker 1>image store only handles images for a local

00:54:41.525 --> 00:54:43.765
<v Speaker 1>platform. It doesn't handle multiple images,

00:54:43.845 --> 00:54:44.724
<v Speaker 1>like, locally.

00:54:44.885 --> 00:54:46.964
<v Speaker 1>So what you basically need to do is

00:54:46.964 --> 00:54:47.685
<v Speaker 1>run

00:54:48.164 --> 00:54:49.045
<v Speaker 1>run

00:54:49.285 --> 00:54:51.765
<v Speaker 1>BuildKit so that BuildKit runs in a different

00:54:51.765 --> 00:54:52.325
<v Speaker 1>back end

00:54:52.880 --> 00:54:55.840
<v Speaker 1>and and either, like, in Kubernetes or Docker

00:54:55.840 --> 00:54:56.640
<v Speaker 1>container.

00:54:57.360 --> 00:54:58.000
<v Speaker 1>So,

00:54:59.440 --> 00:55:00.480
<v Speaker 1>again, like,

00:55:00.960 --> 00:55:02.320
<v Speaker 1>if you want to maybe look at the

00:55:02.320 --> 00:55:04.160
<v Speaker 1>docs first or or yeah. Like, basically, you

00:55:04.160 --> 00:55:05.680
<v Speaker 1>just do Docker BuildKit's great to use.

00:55:08.174 --> 00:55:09.934
<v Speaker 1>So you can you can look at the

00:55:09.934 --> 00:55:11.615
<v Speaker 1>go go one step back and look at

00:55:11.615 --> 00:55:12.655
<v Speaker 1>the create command.

00:55:15.934 --> 00:55:17.615
<v Speaker 0>Alright. So

00:55:17.615 --> 00:55:20.255
<v Speaker 1>back from the build build command. Oh, yeah.

00:55:20.255 --> 00:55:21.214
<v Speaker 1>That's right. Yeah.

00:55:28.470 --> 00:55:30.230
<v Speaker 1>So, yeah, I can grab the driver, for

00:55:30.230 --> 00:55:32.550
<v Speaker 1>example. Like, this one explains a little bit

00:55:32.710 --> 00:55:33.510
<v Speaker 1>about

00:55:33.670 --> 00:55:33.910
<v Speaker 1>the

00:55:36.255 --> 00:55:37.135
<v Speaker 1>like, what what

00:55:40.095 --> 00:55:42.335
<v Speaker 1>okay. So I'll explain it here. Oh oh,

00:55:42.575 --> 00:55:44.494
<v Speaker 1>well, I did may maybe, like, a little

00:55:44.494 --> 00:55:46.015
<v Speaker 1>bit down. So,

00:55:46.095 --> 00:55:48.015
<v Speaker 1>basically, it's a it's a three types of

00:55:48.015 --> 00:55:49.694
<v Speaker 1>drivers that we support at the moment. There

00:55:49.694 --> 00:55:50.575
<v Speaker 1>was a Docker container,

00:55:51.214 --> 00:55:51.855
<v Speaker 1>Kubernetes,

00:55:52.630 --> 00:55:54.869
<v Speaker 1>and and the default that's just using your

00:55:54.869 --> 00:55:55.830
<v Speaker 1>Docker daemon.

00:55:56.150 --> 00:55:58.390
<v Speaker 1>So for the things like multi platform images

00:55:58.390 --> 00:55:59.110
<v Speaker 1>and

00:55:59.350 --> 00:56:02.070
<v Speaker 1>and actually for, like, some types of remote

00:56:02.070 --> 00:56:02.790
<v Speaker 1>caching,

00:56:03.430 --> 00:56:05.190
<v Speaker 1>like local remote cache and and things like

00:56:05.190 --> 00:56:07.075
<v Speaker 1>that, you want to use the back end

00:56:07.075 --> 00:56:10.195
<v Speaker 1>that's either container or or Docker one. So

00:56:10.355 --> 00:56:11.715
<v Speaker 1>but, otherwise, it's like

00:56:12.275 --> 00:56:13.555
<v Speaker 1>you can just run the command, and I

00:56:13.555 --> 00:56:15.395
<v Speaker 1>will I will, like, show you what what

00:56:15.395 --> 00:56:17.475
<v Speaker 1>it what it did in in the back

00:56:17.475 --> 00:56:17.715
<v Speaker 1>end.

00:56:19.180 --> 00:56:22.220
<v Speaker 1>So you can that that's it. The so

00:56:22.220 --> 00:56:24.460
<v Speaker 1>you can use the Docker build XLS now.

00:56:25.660 --> 00:56:27.340
<v Speaker 1>You don't have anything there yet.

00:56:28.860 --> 00:56:30.540
<v Speaker 1>So now you will see that there's a

00:56:30.540 --> 00:56:32.700
<v Speaker 1>there's a new new builder in here. It's

00:56:32.700 --> 00:56:33.740
<v Speaker 1>in status inactive.

00:56:35.875 --> 00:56:38.674
<v Speaker 1>The the previously, we're using the default builder

00:56:38.674 --> 00:56:41.154
<v Speaker 1>with, like, a Docker driver. Now we're using

00:56:41.154 --> 00:56:43.394
<v Speaker 1>the Docker container driver. So what you can

00:56:43.394 --> 00:56:45.395
<v Speaker 1>do is Docker build, like, inspect

00:56:45.635 --> 00:56:47.394
<v Speaker 1>and just put that's just bootstrap in there.

00:56:47.394 --> 00:56:49.109
<v Speaker 1>That's that's you don't actually need to run

00:56:49.109 --> 00:56:50.470
<v Speaker 1>this command to build stuff. You could just

00:56:50.470 --> 00:56:52.309
<v Speaker 1>run build at the moment, but let me

00:56:52.470 --> 00:56:53.750
<v Speaker 1>let's just show you what it what it

00:56:54.069 --> 00:56:55.910
<v Speaker 1>how it comes up. So we would that's

00:56:55.910 --> 00:56:56.869
<v Speaker 1>just bootstrap.

00:56:59.670 --> 00:56:59.990
<v Speaker 1>Yeah.

00:57:00.885 --> 00:57:03.045
<v Speaker 1>So now we're just, like, telling to build

00:57:03.045 --> 00:57:04.885
<v Speaker 1>that. Just just put it so don't build

00:57:04.885 --> 00:57:06.965
<v Speaker 1>anything. Just just put itself.

00:57:07.445 --> 00:57:09.285
<v Speaker 0>Okay. Whenever we use

00:57:09.685 --> 00:57:11.205
<v Speaker 0>the Docker container

00:57:11.205 --> 00:57:14.805
<v Speaker 0>driver, we get a different container with BuildKit

00:57:14.670 --> 00:57:16.589
<v Speaker 0>for the architecture that you want to build

00:57:16.589 --> 00:57:17.150
<v Speaker 0>for.

00:57:17.549 --> 00:57:19.069
<v Speaker 1>Not not for the architecture you want to

00:57:19.069 --> 00:57:21.230
<v Speaker 1>build in. Just just one container that

00:57:21.390 --> 00:57:24.030
<v Speaker 1>but that that build that container now contains

00:57:24.030 --> 00:57:26.270
<v Speaker 1>full BuildKit, so it has the full capabilities,

00:57:26.270 --> 00:57:28.295
<v Speaker 1>for example, for the multi platform stuff. So

00:57:28.295 --> 00:57:29.815
<v Speaker 1>this this one can can manage the multi

00:57:29.815 --> 00:57:31.655
<v Speaker 1>platform images and things like that. So, yeah,

00:57:31.655 --> 00:57:33.255
<v Speaker 1>now you can see that it's running. You

00:57:33.255 --> 00:57:34.615
<v Speaker 1>can run the LS again,

00:57:35.015 --> 00:57:35.895
<v Speaker 1>for example.

00:57:36.695 --> 00:57:38.375
<v Speaker 1>You can see that it still supports your

00:57:38.375 --> 00:57:39.415
<v Speaker 1>platforms. Right?

00:57:40.135 --> 00:57:40.695
<v Speaker 1>And

00:57:41.095 --> 00:57:41.815
<v Speaker 1>and

00:57:41.975 --> 00:57:44.055
<v Speaker 1>if you do that container LS

00:57:44.910 --> 00:57:46.190
<v Speaker 1>or Docker PS,

00:57:46.430 --> 00:57:49.070
<v Speaker 1>then you should see the the the container

00:57:49.070 --> 00:57:50.670
<v Speaker 1>as well. Like, yeah, like, this is where

00:57:50.670 --> 00:57:52.830
<v Speaker 1>the actual, like, the container is running.

00:57:53.150 --> 00:57:54.750
<v Speaker 1>BuildKit is inside that

00:57:55.390 --> 00:57:56.670
<v Speaker 1>inside that container.

00:57:57.435 --> 00:58:00.075
<v Speaker 1>And and now when you run new builds,

00:58:00.075 --> 00:58:01.995
<v Speaker 1>this is actually where your builds will happen.

00:58:02.635 --> 00:58:04.315
<v Speaker 1>Okay. So now we can We can run

00:58:04.555 --> 00:58:06.395
<v Speaker 1>run that on the same build build again

00:58:06.395 --> 00:58:07.435
<v Speaker 1>with the two platforms.

00:58:10.930 --> 00:58:13.730
<v Speaker 0>Okay. So, you know, you're Yeah. You do

00:58:13.730 --> 00:58:15.250
<v Speaker 0>a lot of Go development. Right?

00:58:16.130 --> 00:58:19.010
<v Speaker 0>So, like, would you lean on BuildKit and

00:58:19.010 --> 00:58:21.410
<v Speaker 0>multi platform, or would you lean on Go's

00:58:21.924 --> 00:58:24.885
<v Speaker 0>kind of cross platform build? Like, is there

00:58:24.885 --> 00:58:26.885
<v Speaker 0>a difference there? Is there a preference?

00:58:30.885 --> 00:58:32.404
<v Speaker 1>What what do you mean? Do you ask

00:58:32.404 --> 00:58:33.765
<v Speaker 1>for, like, a with with a with a

00:58:33.765 --> 00:58:36.630
<v Speaker 1>lean on, like, the course cross compiling? Yeah.

00:58:36.630 --> 00:58:39.349
<v Speaker 0>Would you use go build with cross compilation

00:58:39.349 --> 00:58:41.270
<v Speaker 0>to different architectures, or do know do you

00:58:41.270 --> 00:58:41.990
<v Speaker 0>think the build can

00:58:43.029 --> 00:58:45.430
<v Speaker 1>Abs absolutely. Like, all our project use the

00:58:45.430 --> 00:58:47.830
<v Speaker 1>cross compilation, and and

00:58:48.069 --> 00:58:49.829
<v Speaker 1>I would show you, like, how how to

00:58:49.829 --> 00:58:52.454
<v Speaker 1>do this as well. But I just want

00:58:52.454 --> 00:58:53.415
<v Speaker 1>to, like,

00:58:54.055 --> 00:58:56.135
<v Speaker 1>show, like this is, the this is, like,

00:58:56.135 --> 00:58:57.015
<v Speaker 1>the first way

00:58:57.335 --> 00:58:59.974
<v Speaker 0>Okay. That basically to do this. Like like,

00:58:59.974 --> 00:59:00.775
<v Speaker 1>remember,

00:59:00.775 --> 00:59:02.375
<v Speaker 1>like, we didn't make any changes to a

00:59:02.375 --> 00:59:03.255
<v Speaker 1>Docker file. Right?

00:59:04.240 --> 00:59:06.880
<v Speaker 1>Like, the like, the Dockerfile was just, like,

00:59:06.880 --> 00:59:08.320
<v Speaker 1>built for a single platform.

00:59:09.440 --> 00:59:12.080
<v Speaker 1>And and we only thing we basically say

00:59:12.080 --> 00:59:14.320
<v Speaker 1>is, like, yeah, like, okay. Like, now give

00:59:14.320 --> 00:59:16.160
<v Speaker 1>me give me an image for a different

00:59:16.160 --> 00:59:17.840
<v Speaker 1>platform or give me a multi platform image,

00:59:17.840 --> 00:59:19.200
<v Speaker 1>and it does work out of the box.

00:59:21.535 --> 00:59:21.855
<v Speaker 1>What

00:59:22.415 --> 00:59:23.855
<v Speaker 1>so at the moment, you can see, for

00:59:23.855 --> 00:59:26.975
<v Speaker 1>example, that, yeah, it's it's running the, like,

00:59:27.615 --> 00:59:29.215
<v Speaker 1>it's running the go build command at the

00:59:29.215 --> 00:59:29.695
<v Speaker 1>moment,

00:59:30.015 --> 00:59:31.535
<v Speaker 1>and you can see that it's actually running

00:59:31.535 --> 00:59:33.750
<v Speaker 1>two times. Right? Yep. So one one one

00:59:33.750 --> 00:59:36.710
<v Speaker 1>is running natively like you did before. You

00:59:36.710 --> 00:59:38.550
<v Speaker 1>don't get previous cache at the moment for

00:59:38.550 --> 00:59:40.630
<v Speaker 1>this build because you're in a container now.

00:59:40.630 --> 00:59:42.870
<v Speaker 1>So you will get the co cache again

00:59:42.870 --> 00:59:44.964
<v Speaker 1>for the for the next one because you

00:59:44.964 --> 00:59:46.565
<v Speaker 1>because you switched the back end, then then

00:59:46.565 --> 00:59:48.325
<v Speaker 1>you lost that cache. Yeah. That makes sense.

00:59:48.325 --> 00:59:49.125
<v Speaker 1>So

00:59:49.765 --> 00:59:50.645
<v Speaker 1>so this is

00:59:51.845 --> 00:59:52.965
<v Speaker 1>so this variant

00:59:53.045 --> 00:59:55.685
<v Speaker 1>is super simple. Right? No no changes.

00:59:56.244 --> 00:59:57.845
<v Speaker 1>Obviously, like, one of them is running in

00:59:57.845 --> 01:00:00.680
<v Speaker 1>an emulator, so it has a performance penalty.

01:00:01.640 --> 01:00:02.280
<v Speaker 1>And

01:00:02.839 --> 01:00:05.000
<v Speaker 1>I was saying ARM 64 one's gonna take

01:00:05.000 --> 01:00:06.599
<v Speaker 0>a little bit longer than the AMD sixty

01:00:06.599 --> 01:00:08.120
<v Speaker 0>four. Yes. Yes.

01:00:11.240 --> 01:00:13.800
<v Speaker 1>Like, I would maybe expecting here may maybe,

01:00:13.800 --> 01:00:15.665
<v Speaker 1>like, three, four times longer.

01:00:15.825 --> 01:00:16.785
<v Speaker 0>Alright. So so

01:00:17.425 --> 01:00:18.065
<v Speaker 1>so

01:00:18.545 --> 01:00:19.105
<v Speaker 1>especially,

01:00:20.785 --> 01:00:22.945
<v Speaker 1>like, it depends on what your Docker file

01:00:22.945 --> 01:00:23.745
<v Speaker 1>is doing.

01:00:24.465 --> 01:00:26.865
<v Speaker 1>So if you're, like, installing packages,

01:00:27.460 --> 01:00:29.380
<v Speaker 1>like, for example, you are from Alpine installing

01:00:29.380 --> 01:00:30.180
<v Speaker 1>packages,

01:00:30.500 --> 01:00:32.820
<v Speaker 1>absolutely no problem to run this in emulator.

01:00:32.980 --> 01:00:35.140
<v Speaker 1>It will take, like, hundred milliseconds natively, and

01:00:35.140 --> 01:00:37.060
<v Speaker 1>it will take, like, hundred and fifty in

01:00:37.060 --> 01:00:37.860
<v Speaker 1>emulator.

01:00:37.860 --> 01:00:40.660
<v Speaker 1>Like, if there's no there's no CPU intensive

01:00:40.660 --> 01:00:41.460
<v Speaker 1>things in there,

01:00:43.255 --> 01:00:45.255
<v Speaker 1>Like, it's absolutely fine to run this in

01:00:45.255 --> 01:00:45.975
<v Speaker 1>an emulator.

01:00:46.855 --> 01:00:47.975
<v Speaker 1>Like, if

01:00:48.215 --> 01:00:50.455
<v Speaker 1>you're doing compilation of of, like, big code

01:00:50.455 --> 01:00:51.175
<v Speaker 1>bases,

01:00:51.575 --> 01:00:53.895
<v Speaker 1>then you will really see, like, where this

01:00:53.895 --> 01:00:56.375
<v Speaker 1>emulator thing will will start to, like, hurt

01:00:56.375 --> 01:00:58.900
<v Speaker 1>you. And and but we'll see, like,

01:00:59.620 --> 01:01:02.340
<v Speaker 1>given that it didn't require any any

01:01:02.420 --> 01:01:04.260
<v Speaker 1>changes in the Docker file,

01:01:04.580 --> 01:01:05.220
<v Speaker 1>like,

01:01:05.700 --> 01:01:07.620
<v Speaker 1>you will not build this, like, every time

01:01:07.620 --> 01:01:09.585
<v Speaker 1>you make a code change. Right? Every time

01:01:09.585 --> 01:01:11.025
<v Speaker 1>you make a code change, you will you

01:01:11.025 --> 01:01:13.744
<v Speaker 1>will build that previous one that that that

01:01:13.744 --> 01:01:15.585
<v Speaker 1>we had, like, running back in three seconds

01:01:15.585 --> 01:01:17.345
<v Speaker 1>or something like that. Mhmm. Like, if this

01:01:17.345 --> 01:01:19.425
<v Speaker 1>runs, like, one time in your CI, like,

01:01:19.825 --> 01:01:21.905
<v Speaker 1>maybe it's even fine. Like, I I I

01:01:21.905 --> 01:01:23.740
<v Speaker 1>would say, like, like, we don't use this

01:01:23.740 --> 01:01:25.740
<v Speaker 1>one. I would I will next show you,

01:01:25.740 --> 01:01:26.780
<v Speaker 1>like, what we use.

01:01:27.260 --> 01:01:28.300
<v Speaker 1>But I

01:01:28.300 --> 01:01:30.540
<v Speaker 1>think most people who use BuildKit today use

01:01:30.540 --> 01:01:33.100
<v Speaker 1>this one because, like like,

01:01:33.740 --> 01:01:36.060
<v Speaker 1>the the

01:01:34.795 --> 01:01:37.595
<v Speaker 1>like, multiple platform build, the transient CI, yeah,

01:01:37.595 --> 01:01:40.475
<v Speaker 1>it takes, like, three times longer. Like like,

01:01:40.475 --> 01:01:41.515
<v Speaker 1>we like,

01:01:41.995 --> 01:01:44.235
<v Speaker 1>the the it it doesn't slow them down

01:01:44.235 --> 01:01:46.795
<v Speaker 1>down as well. Like like, the those builds

01:01:46.795 --> 01:01:47.675
<v Speaker 1>don't happen that often.

01:01:48.450 --> 01:01:49.090
<v Speaker 1>Okay.

01:01:50.849 --> 01:01:52.849
<v Speaker 0>I guess we've got about another minute before

01:01:52.849 --> 01:01:55.730
<v Speaker 0>this one. I hope this finishes.

01:01:55.730 --> 01:01:57.410
<v Speaker 1>Look. May maybe if you go to back

01:01:57.410 --> 01:01:58.370
<v Speaker 1>to the browser,

01:01:58.930 --> 01:02:00.530
<v Speaker 1>I can talk a little bit about

01:02:01.865 --> 01:02:04.025
<v Speaker 1>so you got this for free because you're

01:02:04.025 --> 01:02:06.425
<v Speaker 1>using Docker Desktop. Right? Yes.

01:02:07.145 --> 01:02:07.785
<v Speaker 1>So

01:02:08.585 --> 01:02:09.785
<v Speaker 1>so what

01:02:10.025 --> 01:02:11.545
<v Speaker 1>that means is that

01:02:11.865 --> 01:02:12.585
<v Speaker 1>when

01:02:12.905 --> 01:02:15.385
<v Speaker 1>in your Docker Desktop VM, you already have

01:02:15.385 --> 01:02:16.265
<v Speaker 1>the

01:02:16.550 --> 01:02:19.910
<v Speaker 1>the emulators installed in the kernel, basically, of

01:02:19.910 --> 01:02:21.670
<v Speaker 1>the of the of the VM.

01:02:21.910 --> 01:02:23.590
<v Speaker 1>So every time we we make that

01:02:24.630 --> 01:02:26.470
<v Speaker 1>we make a builder, it's just like you

01:02:26.470 --> 01:02:28.885
<v Speaker 1>can see that they support six platforms. Why

01:02:28.885 --> 01:02:31.525
<v Speaker 1>it supports six platforms is because they're already

01:02:31.685 --> 01:02:33.365
<v Speaker 1>like, the emulators are loading in in a

01:02:33.365 --> 01:02:33.925
<v Speaker 1>kernel.

01:02:34.165 --> 01:02:35.525
<v Speaker 1>If you're not

01:02:36.325 --> 01:02:38.405
<v Speaker 1>in the in the same system,

01:02:38.485 --> 01:02:40.885
<v Speaker 1>then you actually need to to one more

01:02:40.885 --> 01:02:41.525
<v Speaker 1>step.

01:02:41.925 --> 01:02:43.365
<v Speaker 1>I'm copying to the link.

01:02:46.690 --> 01:02:49.090
<v Speaker 1>You need to actually load the emulators.

01:02:51.010 --> 01:02:52.690
<v Speaker 1>So if you go to that link,

01:02:53.890 --> 01:02:56.530
<v Speaker 1>you can you can actually see, like, how

01:02:56.530 --> 01:02:57.570
<v Speaker 1>you would

01:02:59.635 --> 01:03:01.555
<v Speaker 1>how you would set up those emulators if

01:03:01.555 --> 01:03:02.915
<v Speaker 1>you don't have them in the system. And

01:03:02.915 --> 01:03:04.835
<v Speaker 1>it's very simple. It's just a Docker image.

01:03:04.835 --> 01:03:06.515
<v Speaker 1>So if you scroll down a bit,

01:03:08.435 --> 01:03:09.555
<v Speaker 1>like like,

01:03:09.555 --> 01:03:10.355
<v Speaker 1>basically,

01:03:10.435 --> 01:03:13.589
<v Speaker 1>you just run the run the install command

01:03:13.589 --> 01:03:14.869
<v Speaker 1>in there, and you can just say that's

01:03:14.869 --> 01:03:15.910
<v Speaker 1>just install all.

01:03:16.390 --> 01:03:17.910
<v Speaker 1>And then and

01:03:18.390 --> 01:03:21.190
<v Speaker 1>then it will it will load all those

01:03:21.190 --> 01:03:22.150
<v Speaker 1>emulators

01:03:23.109 --> 01:03:25.270
<v Speaker 1>from this image to your kernel, and you

01:03:25.270 --> 01:03:27.435
<v Speaker 1>have the same experience every time. So for

01:03:27.435 --> 01:03:28.395
<v Speaker 1>example, like,

01:03:28.955 --> 01:03:30.635
<v Speaker 1>in the CI system or something like this,

01:03:30.635 --> 01:03:32.475
<v Speaker 1>may maybe you want to run this beforehand

01:03:32.555 --> 01:03:33.675
<v Speaker 1>to make sure that you're

01:03:34.235 --> 01:03:34.875
<v Speaker 1>that

01:03:36.235 --> 01:03:38.235
<v Speaker 1>that you have have those on. And then

01:03:38.235 --> 01:03:39.915
<v Speaker 1>it will show you what what's all supported

01:03:39.915 --> 01:03:41.755
<v Speaker 1>for your biosystem and what what the model

01:03:41.755 --> 01:03:42.555
<v Speaker 1>does she have installed.

01:03:43.630 --> 01:03:44.590
<v Speaker 0>Okay. So,

01:03:45.550 --> 01:03:48.990
<v Speaker 0>basically, she just uses QMU then, and you

01:03:48.990 --> 01:03:51.150
<v Speaker 0>can just install your own platforms if required

01:03:51.150 --> 01:03:53.550
<v Speaker 0>into the BuildKit container using

01:03:54.750 --> 01:03:56.590
<v Speaker 0>this tool. And and, doc, this is the

01:03:56.590 --> 01:03:57.070
<v Speaker 1>QMU.

01:03:57.535 --> 01:04:00.015
<v Speaker 1>So so this is, like, the the QMU

01:04:00.015 --> 01:04:01.215
<v Speaker 1>needs to be in kernel,

01:04:01.775 --> 01:04:03.935
<v Speaker 1>then BuildKit can use it. Right. Okay.

01:04:04.335 --> 01:04:07.135
<v Speaker 1>So so, basically, like, once you install use

01:04:07.135 --> 01:04:08.015
<v Speaker 1>this command,

01:04:08.975 --> 01:04:11.790
<v Speaker 1>it will install the emulate. It will enable

01:04:11.790 --> 01:04:14.190
<v Speaker 1>QMU basically in your kernel. And then when

01:04:14.190 --> 01:04:15.870
<v Speaker 1>you do, like, build x inspector, build x

01:04:15.870 --> 01:04:17.710
<v Speaker 1>l s, you will see that BuildKit finds

01:04:17.710 --> 01:04:19.390
<v Speaker 1>all all those emulators for you.

01:04:19.790 --> 01:04:22.110
<v Speaker 0>Right. Right. Okay. That makes sense.

01:04:22.750 --> 01:04:25.565
<v Speaker 0>Nice. Okay. Did our build figure it out

01:04:25.565 --> 01:04:26.285
<v Speaker 1>or not?

01:04:27.565 --> 01:04:29.645
<v Speaker 0>It's still not. It's still thinking. But

01:04:30.204 --> 01:04:31.085
<v Speaker 0>why don't we

01:04:32.125 --> 01:04:34.045
<v Speaker 0>I mean, there were a few sub commands

01:04:34.045 --> 01:04:35.725
<v Speaker 0>here. Right? And we've not covered

01:04:36.125 --> 01:04:38.230
<v Speaker 0>all of them. Maybe we could what what

01:04:38.230 --> 01:04:40.070
<v Speaker 0>does the bake subcommand do?

01:04:41.110 --> 01:04:42.470
<v Speaker 1>So so bake

01:04:42.870 --> 01:04:45.510
<v Speaker 1>well, bake task is basically, like, for example,

01:04:45.510 --> 01:04:47.590
<v Speaker 1>like, when you the command you're running at

01:04:47.590 --> 01:04:50.230
<v Speaker 1>the moment. Right? Like, the the binary

01:04:50.390 --> 01:04:50.790
<v Speaker 1>like,

01:04:52.925 --> 01:04:55.484
<v Speaker 1>you you're running a command that's doing a

01:04:55.484 --> 01:04:57.725
<v Speaker 1>build. It sets a target to binary.

01:04:57.805 --> 01:04:59.645
<v Speaker 1>It sets the output to local.

01:04:59.805 --> 01:05:01.965
<v Speaker 1>It sets the platforms to do platforms.

01:05:02.205 --> 01:05:02.765
<v Speaker 1>Right?

01:05:03.085 --> 01:05:05.085
<v Speaker 1>And you need to you need to remember

01:05:05.085 --> 01:05:07.085
<v Speaker 1>it somewhere. Like, you need to, like, put

01:05:07.085 --> 01:05:08.445
<v Speaker 1>it in a make file or something like

01:05:08.445 --> 01:05:08.605
<v Speaker 1>that.

01:05:09.510 --> 01:05:11.750
<v Speaker 1>So what bake is that

01:05:12.070 --> 01:05:13.830
<v Speaker 1>it allows you to create this high level

01:05:13.830 --> 01:05:18.070
<v Speaker 1>targets that already, like, contain your your specific

01:05:18.070 --> 01:05:18.950
<v Speaker 1>configuration.

01:05:19.190 --> 01:05:21.590
<v Speaker 1>Like, for for example, like, you can you

01:05:21.590 --> 01:05:24.070
<v Speaker 1>can say that binary target for my project

01:05:24.070 --> 01:05:27.345
<v Speaker 1>means that I'm I'm building a binary target.

01:05:27.345 --> 01:05:29.265
<v Speaker 1>I'm putting in a test and pip inform

01:05:29.505 --> 01:05:32.465
<v Speaker 1>format. I'm building it for two platforms.

01:05:32.545 --> 01:05:33.905
<v Speaker 1>You can write this all in a big

01:05:33.905 --> 01:05:36.385
<v Speaker 1>file, and then you can can run Docker

01:05:36.385 --> 01:05:37.985
<v Speaker 1>build ex big binary,

01:05:38.225 --> 01:05:39.665
<v Speaker 1>and it will be all taken care of.

01:05:39.840 --> 01:05:41.280
<v Speaker 1>It's like it feels like a little bit

01:05:41.280 --> 01:05:43.040
<v Speaker 1>like Make. Right? Yeah. Like, that's where the

01:05:43.040 --> 01:05:45.920
<v Speaker 1>where the name comes from. Right? But

01:05:46.240 --> 01:05:48.160
<v Speaker 1>it can do, like, things that Make can't

01:05:48.160 --> 01:05:50.240
<v Speaker 1>do. Right? Because, like like, in Make, you

01:05:50.240 --> 01:05:50.800
<v Speaker 1>would

01:05:51.360 --> 01:05:52.960
<v Speaker 1>you would need to if you're building, like,

01:05:52.960 --> 01:05:54.320
<v Speaker 1>front multiple targets, for example,

01:05:54.984 --> 01:05:57.785
<v Speaker 1>like, make and figure out that those targets

01:05:57.785 --> 01:05:59.464
<v Speaker 1>can actually build in parallel and stuff like

01:05:59.464 --> 01:06:00.025
<v Speaker 1>that

01:06:00.345 --> 01:06:02.425
<v Speaker 1>that that BuildKit can figure out. If you

01:06:02.425 --> 01:06:04.345
<v Speaker 1>just go back to the bin format project,

01:06:06.345 --> 01:06:09.945
<v Speaker 1>I believe bin format project uses uses

01:06:09.620 --> 01:06:11.860
<v Speaker 1>bake Yeah. There was a And and

01:06:13.300 --> 01:06:15.460
<v Speaker 1>bake like, this is HCL. Like, it doesn't

01:06:15.460 --> 01:06:16.980
<v Speaker 1>need to be HCL. Like, it can be

01:06:16.980 --> 01:06:19.620
<v Speaker 1>just a composed file or, like or even,

01:06:19.620 --> 01:06:20.980
<v Speaker 1>like, the language is a little bit, like

01:06:21.984 --> 01:06:22.785
<v Speaker 1>like,

01:06:23.984 --> 01:06:26.705
<v Speaker 1>not not not that important in here. But,

01:06:26.705 --> 01:06:28.625
<v Speaker 1>yeah, you can see, like, we we have

01:06:28.625 --> 01:06:31.905
<v Speaker 1>some, like, nice yeah. Exactly. Like, the the

01:06:31.905 --> 01:06:34.865
<v Speaker 1>binaries thing is exactly like like like

01:06:35.425 --> 01:06:36.625
<v Speaker 1>explained

01:06:36.625 --> 01:06:39.210
<v Speaker 1>here in here. So so in in this

01:06:39.210 --> 01:06:42.170
<v Speaker 1>project, you could basically just do big binaries,

01:06:42.330 --> 01:06:44.010
<v Speaker 1>and it will figure out what what to

01:06:44.010 --> 01:06:44.490
<v Speaker 1>do.

01:06:44.890 --> 01:06:46.890
<v Speaker 1>And we have some, like, weird targets in

01:06:46.890 --> 01:06:49.450
<v Speaker 1>here. Like like, some on my projects have,

01:06:49.450 --> 01:06:51.050
<v Speaker 1>like, the linters and, like, for example, you

01:06:51.050 --> 01:06:53.184
<v Speaker 1>have the tox generation and the, like, the

01:06:53.184 --> 01:06:54.145
<v Speaker 1>vendor generation.

01:06:54.385 --> 01:06:55.905
<v Speaker 1>Like, they can all be, like, defined as

01:06:55.905 --> 01:06:58.065
<v Speaker 1>as, like, a big targets. Then in the

01:06:58.065 --> 01:06:59.265
<v Speaker 1>end, you can have, like, a group that

01:06:59.265 --> 01:07:01.425
<v Speaker 1>just say, like, pre commit or something like

01:07:01.425 --> 01:07:03.825
<v Speaker 1>that. And that that just, like, runs all

01:07:03.825 --> 01:07:06.150
<v Speaker 1>all of them in parallel, all the all

01:07:06.150 --> 01:07:08.390
<v Speaker 1>the validation logic in in parallel. This one

01:07:08.390 --> 01:07:10.230
<v Speaker 1>is a little bit complicated because, like, there's,

01:07:10.230 --> 01:07:10.630
<v Speaker 1>like,

01:07:11.589 --> 01:07:14.390
<v Speaker 1>variants of it and and, like so there's,

01:07:15.190 --> 01:07:17.109
<v Speaker 1>we have, like, a bunch of configuration options

01:07:17.109 --> 01:07:19.235
<v Speaker 1>that go, like, build different versions of those

01:07:19.235 --> 01:07:21.635
<v Speaker 1>emulators and stuff like that. So but that

01:07:21.715 --> 01:07:22.755
<v Speaker 1>that's basically it.

01:07:23.315 --> 01:07:25.875
<v Speaker 1>So finally, four hundred and fifty seconds.

01:07:26.435 --> 01:07:27.075
<v Speaker 0>Yes.

01:07:27.475 --> 01:07:28.915
<v Speaker 0>So take a bit of time, but we

01:07:28.915 --> 01:07:29.635
<v Speaker 0>got there.

01:07:30.435 --> 01:07:32.115
<v Speaker 1>To prove the point that

01:07:32.360 --> 01:07:35.160
<v Speaker 1>that if you're running your peak compilation step,

01:07:35.160 --> 01:07:37.000
<v Speaker 1>then maybe emulators is not the way to

01:07:37.000 --> 01:07:39.480
<v Speaker 1>go. Unless you're running like that, build once

01:07:39.480 --> 01:07:41.720
<v Speaker 1>a day, like, then whatever. But are they

01:07:41.800 --> 01:07:43.400
<v Speaker 0>are those both cached now?

01:07:43.960 --> 01:07:46.200
<v Speaker 1>Yes. Okay. So so first of all, like,

01:07:46.200 --> 01:07:48.200
<v Speaker 1>you can look at their bin directory now

01:07:47.835 --> 01:07:49.995
<v Speaker 1>and you you have multiple binaries there.

01:07:50.875 --> 01:07:51.755
<v Speaker 0>Oh, yeah.

01:07:52.075 --> 01:07:53.195
<v Speaker 0>Look at that. So

01:07:53.435 --> 01:07:55.515
<v Speaker 1>yeah. So you you should have the ARM

01:07:55.515 --> 01:07:57.835
<v Speaker 1>64 binary. You can just, like, test it

01:07:57.835 --> 01:07:59.755
<v Speaker 1>in the file. Just show

01:08:00.770 --> 01:08:01.890
<v Speaker 1>that it's there.

01:08:02.210 --> 01:08:04.290
<v Speaker 0>Typing. But, yeah, we'll get there.

01:08:06.050 --> 01:08:08.290
<v Speaker 1>Yeah. So r two q four.

01:08:09.329 --> 01:08:10.130
<v Speaker 0>Very cool.

01:08:10.609 --> 01:08:11.250
<v Speaker 0>So

01:08:11.410 --> 01:08:13.994
<v Speaker 0>I we we can I could just copy

01:08:13.994 --> 01:08:15.914
<v Speaker 0>that target like I did there and create

01:08:15.914 --> 01:08:17.435
<v Speaker 0>a Docker dash bake.htl

01:08:17.435 --> 01:08:19.994
<v Speaker 0>and then just run Docker bake

01:08:20.154 --> 01:08:21.034
<v Speaker 0>target

01:08:21.035 --> 01:08:22.955
<v Speaker 0>and that should still all be cached and

01:08:22.955 --> 01:08:24.795
<v Speaker 0>just does the exact same command that we

01:08:24.795 --> 01:08:26.074
<v Speaker 0>ran? Absolutely. Absolutely.

01:08:26.710 --> 01:08:29.029
<v Speaker 0>Alright. I just I wanna see it.

01:08:29.510 --> 01:08:31.989
<v Speaker 1>Okay. You said there were multiple formats. So

01:08:31.989 --> 01:08:34.869
<v Speaker 0>h e HCL is one format, and there's

01:08:35.189 --> 01:08:37.429
<v Speaker 0>Docker Well, I want there's we can just

01:08:37.429 --> 01:08:38.790
<v Speaker 1>do we can if you have it just

01:08:38.790 --> 01:08:40.869
<v Speaker 1>like a composed file, you can just do,

01:08:40.869 --> 01:08:41.750
<v Speaker 1>like, a, like,

01:08:42.524 --> 01:08:44.524
<v Speaker 1>with a compose target as well.

01:08:45.404 --> 01:08:46.045
<v Speaker 1>Okay.

01:08:47.005 --> 01:08:48.524
<v Speaker 0>Let me replicate this.

01:08:59.219 --> 01:09:00.099
<v Speaker 0>Copilot's

01:09:00.099 --> 01:09:00.899
<v Speaker 0>ticket.

01:09:00.899 --> 01:09:01.779
<v Speaker 0>There we go.

01:09:02.420 --> 01:09:04.739
<v Speaker 0>And we want to target the binary target

01:09:04.739 --> 01:09:06.019
<v Speaker 0>and our container

01:09:06.019 --> 01:09:08.340
<v Speaker 0>and open as Ben. So I think that's

01:09:08.340 --> 01:09:10.260
<v Speaker 0>the same defined in HCL as we have

01:09:10.260 --> 01:09:11.380
<v Speaker 0>in the command line. Is that?

01:09:12.345 --> 01:09:14.425
<v Speaker 1>Yeah. It's pretty much it. So you you

01:09:14.505 --> 01:09:16.585
<v Speaker 1>can you also do I'm not oh, the

01:09:16.585 --> 01:09:18.585
<v Speaker 0>target no. Wait. That's the tag is local

01:09:18.585 --> 01:09:20.745
<v Speaker 0>target. Yeah. Okay. That's the same, I think.

01:09:20.745 --> 01:09:22.024
<v Speaker 1>You can also do

01:09:23.865 --> 01:09:24.665
<v Speaker 1>group default.

01:09:27.790 --> 01:09:29.710
<v Speaker 0>Yeah. I've seen that in in your files.

01:09:29.710 --> 01:09:31.149
<v Speaker 0>Why don't I just Yeah.

01:09:31.389 --> 01:09:33.309
<v Speaker 1>Yeah. Yeah. Exactly. Yeah. So

01:09:35.630 --> 01:09:37.469
<v Speaker 0>And then just match this.

01:09:38.189 --> 01:09:40.109
<v Speaker 0>So with this, instead of that big long

01:09:40.109 --> 01:09:42.715
<v Speaker 0>Docker build x, we can do build x

01:09:42.715 --> 01:09:44.075
<v Speaker 0>base. First of all, you you can do

01:09:44.075 --> 01:09:45.675
<v Speaker 1>it like a big just to touch the

01:09:45.675 --> 01:09:47.755
<v Speaker 1>print, for example, for for just like a

01:09:47.755 --> 01:09:48.314
<v Speaker 1>test.

01:09:48.795 --> 01:09:51.115
<v Speaker 1>That's this will show you, like, what what

01:09:51.115 --> 01:09:53.435
<v Speaker 1>is going to be built. Sorry. That's that's

01:09:53.435 --> 01:09:56.780
<v Speaker 0>test? Print. Print. Print. Sorry. Yeah.

01:10:01.660 --> 01:10:02.780
<v Speaker 1>What's wrong?

01:10:06.060 --> 01:10:08.060
<v Speaker 1>What's the name of the file?

01:10:08.875 --> 01:10:11.115
<v Speaker 0>Docker dash bit. But it's Oh, okay. Oh,

01:10:11.115 --> 01:10:12.635
<v Speaker 0>no. I've it in the wrong Oh, you

01:10:12.635 --> 01:10:13.995
<v Speaker 1>got it in the wrong directory, I think.

01:10:13.995 --> 01:10:14.395
<v Speaker 1>There

01:10:16.395 --> 01:10:18.715
<v Speaker 0>we go. So so, yeah, now now it

01:10:18.715 --> 01:10:20.155
<v Speaker 1>will show you exactly what it's going to

01:10:20.155 --> 01:10:20.795
<v Speaker 1>build.

01:10:21.195 --> 01:10:22.875
<v Speaker 1>And, yeah, like, if you remove print, then

01:10:22.875 --> 01:10:24.820
<v Speaker 1>it will just run on the on the

01:10:24.820 --> 01:10:26.980
<v Speaker 1>build for you. And you can of course,

01:10:26.980 --> 01:10:29.380
<v Speaker 1>like, the the command line takes the targets

01:10:29.380 --> 01:10:31.300
<v Speaker 1>as as arguments. So you can do, like,

01:10:31.300 --> 01:10:32.099
<v Speaker 1>binary,

01:10:32.340 --> 01:10:34.980
<v Speaker 1>full bar, and, like, every everything. Like, you

01:10:34.980 --> 01:10:37.140
<v Speaker 1>can do, like, like, million targets together as

01:10:37.140 --> 01:10:37.380
<v Speaker 1>well.

01:10:41.105 --> 01:10:42.465
<v Speaker 0>Okay. So it used

01:10:43.025 --> 01:10:45.585
<v Speaker 0>the build cache on our AMD sixty four.

01:10:45.585 --> 01:10:46.224
<v Speaker 0>Hopefully,

01:10:46.625 --> 01:10:48.545
<v Speaker 0>ARM 64 is just gonna be about thirty

01:10:48.545 --> 01:10:49.264
<v Speaker 1>seconds.

01:10:50.145 --> 01:10:52.225
<v Speaker 1>And it should still have cache. Like like

01:10:52.225 --> 01:10:54.660
<v Speaker 1>like, GoCache should still do that. Like, you

01:10:54.900 --> 01:10:56.340
<v Speaker 0>There we go. Okay. Okay.

01:10:56.740 --> 01:10:57.780
<v Speaker 1>Didn't take that one.

01:10:58.180 --> 01:11:00.660
<v Speaker 1>So it did Alright. Three times as long

01:11:00.660 --> 01:11:02.420
<v Speaker 1>as as the as the making one.

01:11:02.900 --> 01:11:04.820
<v Speaker 0>K. I like that big fail and just

01:11:04.820 --> 01:11:07.045
<v Speaker 0>making all declarative and getting that. Like, yeah,

01:11:07.045 --> 01:11:08.565
<v Speaker 0>I could write a make target, but maybe

01:11:08.565 --> 01:11:10.165
<v Speaker 0>just use it. You can do, like

01:11:10.725 --> 01:11:12.885
<v Speaker 1>in the HCL syntax, you can do, like,

01:11:13.445 --> 01:11:14.325
<v Speaker 1>weirdnesses,

01:11:14.325 --> 01:11:17.925
<v Speaker 1>like like, define variables and, like, functions and,

01:11:17.925 --> 01:11:20.110
<v Speaker 1>like, we can, like little bit, like, have,

01:11:20.110 --> 01:11:21.550
<v Speaker 1>like, a macro style in there to have

01:11:21.550 --> 01:11:24.110
<v Speaker 1>it, like, more configurable as well. Like like,

01:11:24.110 --> 01:11:25.070
<v Speaker 1>this is, a

01:11:26.590 --> 01:11:28.350
<v Speaker 1>a project level logic. It would maybe put

01:11:28.350 --> 01:11:30.590
<v Speaker 1>in a big file that, like, defines, like,

01:11:30.590 --> 01:11:32.350
<v Speaker 1>this is, like, a different configurations of how

01:11:32.350 --> 01:11:33.950
<v Speaker 1>your project is supposed to be built and

01:11:33.950 --> 01:11:36.195
<v Speaker 1>stuff like that. In in Dockerfile, maybe you

01:11:36.195 --> 01:11:38.035
<v Speaker 1>have, like, more generic things like co version

01:11:38.035 --> 01:11:40.035
<v Speaker 1>and stuff like that that are, like, that

01:11:40.275 --> 01:11:41.155
<v Speaker 1>are, like,

01:11:41.875 --> 01:11:43.555
<v Speaker 1>universal for all the projects.

01:11:43.875 --> 01:11:45.715
<v Speaker 0>Yeah. We got a comment from Crazy Max

01:11:45.715 --> 01:11:47.875
<v Speaker 0>talking about some of the things that they're

01:11:47.875 --> 01:11:50.909
<v Speaker 0>doing with big, so building boundaries, multi platform

01:11:50.909 --> 01:11:53.869
<v Speaker 0>image, generate docs, lens, update, validate vendors, generate

01:11:53.869 --> 01:11:56.190
<v Speaker 0>progress and test the app all in a

01:11:56.190 --> 01:11:57.149
<v Speaker 0>big definition.

01:11:57.389 --> 01:11:59.070
<v Speaker 0>So that's pretty cool. If you've got a

01:11:59.070 --> 01:12:00.590
<v Speaker 0>link Crazy Max to one of your projects

01:12:00.590 --> 01:12:01.869
<v Speaker 0>that does that, I'd love to see the

01:12:01.869 --> 01:12:04.864
<v Speaker 0>HCL at some point. So please share.

01:12:05.425 --> 01:12:08.145
<v Speaker 0>And no other comments saying that they love

01:12:08.145 --> 01:12:09.744
<v Speaker 0>conditionals and bake.

01:12:09.825 --> 01:12:11.905
<v Speaker 0>So cool. Lots of options there.

01:12:12.465 --> 01:12:12.864
<v Speaker 0>Alright.

01:12:13.344 --> 01:12:16.145
<v Speaker 0>We've we've covered an awful lot here. Is

01:12:16.145 --> 01:12:17.745
<v Speaker 0>there anything that we've missed before we finish

01:12:17.745 --> 01:12:18.864
<v Speaker 0>up? Do you think would be really cool

01:12:18.864 --> 01:12:19.960
<v Speaker 0>to share with people?

01:12:23.640 --> 01:12:24.840
<v Speaker 0>Mean Put you on the spot. Like, what

01:12:24.840 --> 01:12:25.960
<v Speaker 0>what have we forgotten?

01:12:26.840 --> 01:12:28.760
<v Speaker 1>I mean, what what we've forgotten is is

01:12:28.760 --> 01:12:30.840
<v Speaker 1>the, like, the cross compilation. I'm not sure

01:12:30.840 --> 01:12:32.600
<v Speaker 1>if it if you can push through it

01:12:32.600 --> 01:12:34.745
<v Speaker 1>with ten minutes or or not. Like like,

01:12:34.745 --> 01:12:36.665
<v Speaker 1>that that's that's what was for your question

01:12:36.665 --> 01:12:39.225
<v Speaker 1>of, like, what's the alternative for QMU and

01:12:39.225 --> 01:12:40.105
<v Speaker 1>what's the

01:12:42.185 --> 01:12:43.385
<v Speaker 1>and what's the

01:12:44.265 --> 01:12:46.825
<v Speaker 1>like, how you can get a Darwin target?

01:12:46.825 --> 01:12:48.345
<v Speaker 1>Like, we can try to answer that if

01:12:48.345 --> 01:12:50.300
<v Speaker 1>you if you if you can push through

01:12:50.300 --> 01:12:51.980
<v Speaker 1>it. Well, yeah, why don't we make a

01:12:51.980 --> 01:12:53.420
<v Speaker 0>start on it? If we feel that we're

01:12:53.420 --> 01:12:55.020
<v Speaker 0>not gonna get through it in time, we'll,

01:12:55.020 --> 01:12:57.019
<v Speaker 0>you know we can we can leave it.

01:12:57.099 --> 01:12:58.860
<v Speaker 0>If we're almost there, we can always run

01:12:58.860 --> 01:13:00.619
<v Speaker 0>a little bit over. We we can see

01:13:00.619 --> 01:13:01.820
<v Speaker 0>it. Or if you want, we can leave

01:13:01.820 --> 01:13:03.739
<v Speaker 0>it for another day. I'll I'll leave the

01:13:03.739 --> 01:13:05.545
<v Speaker 0>decision in your hands, Todus.

01:13:06.105 --> 01:13:09.305
<v Speaker 1>Okay. Let let's try it. Okay. So That's

01:13:09.305 --> 01:13:09.784
<v Speaker 0>good.

01:13:14.105 --> 01:13:16.425
<v Speaker 1>What we basically, what we want to do

01:13:16.425 --> 01:13:17.545
<v Speaker 1>in gross computation

01:13:17.705 --> 01:13:19.385
<v Speaker 1>is if you look at this article file

01:13:19.385 --> 01:13:19.705
<v Speaker 1>again,

01:13:24.240 --> 01:13:26.640
<v Speaker 1>Yeah. Post your link just

01:13:26.800 --> 01:13:27.360
<v Speaker 1>yeah.

01:13:29.520 --> 01:13:31.120
<v Speaker 1>The link I posted to you is how

01:13:31.120 --> 01:13:33.120
<v Speaker 1>I do gross compilation and how, like, Docker

01:13:33.120 --> 01:13:34.400
<v Speaker 1>projects do the gross compilation.

01:13:34.845 --> 01:13:36.365
<v Speaker 1>So that that one is, like, a little

01:13:36.365 --> 01:13:38.605
<v Speaker 1>bit advanced. We will probably not go go

01:13:38.605 --> 01:13:40.765
<v Speaker 1>to this one. But this one has, like

01:13:40.845 --> 01:13:42.525
<v Speaker 1>a first section is is has, like, a

01:13:42.525 --> 01:13:44.445
<v Speaker 1>introduction to cross compilation.

01:13:46.445 --> 01:13:49.165
<v Speaker 1>So, yeah, like like this cross compilation primary.

01:13:50.080 --> 01:13:50.720
<v Speaker 1>So,

01:13:51.280 --> 01:13:53.760
<v Speaker 1>basically, what the best way to do this

01:13:54.080 --> 01:13:56.240
<v Speaker 1>is that we have this certain

01:13:58.400 --> 01:14:01.040
<v Speaker 1>automatic arguments in Docker files that we just

01:14:01.040 --> 01:14:03.145
<v Speaker 1>provide from the builder. Like, you can even

01:14:03.145 --> 01:14:05.225
<v Speaker 1>click on the link to automatic platform arcs

01:14:05.225 --> 01:14:06.265
<v Speaker 1>in GlobalScope.

01:14:08.745 --> 01:14:10.745
<v Speaker 1>Yeah. So this is the Docker documentation. So,

01:14:10.745 --> 01:14:12.425
<v Speaker 1>basically, all those arguments

01:14:12.425 --> 01:14:13.545
<v Speaker 1>are available

01:14:13.705 --> 01:14:14.345
<v Speaker 1>to you

01:14:14.910 --> 01:14:17.470
<v Speaker 1>automatically inside a Dockerfile. We just define the

01:14:17.470 --> 01:14:19.230
<v Speaker 1>arc, and we will figure out what the

01:14:19.230 --> 01:14:20.270
<v Speaker 1>correct value is.

01:14:20.990 --> 01:14:22.910
<v Speaker 1>So, basically, if you're building for, like, an

01:14:23.150 --> 01:14:25.550
<v Speaker 1>like, a PowerPC, for example, we will put

01:14:25.550 --> 01:14:29.710
<v Speaker 1>target platform equals PowerPC target OS equals Linux,

01:14:29.710 --> 01:14:30.670
<v Speaker 1>Arch equals PowerPC.

01:14:31.364 --> 01:14:33.764
<v Speaker 0>Okay. And and then you can use this

01:14:33.764 --> 01:14:34.885
<v Speaker 1>one in to

01:14:36.005 --> 01:14:38.885
<v Speaker 1>to have, like, some stages be native to

01:14:38.885 --> 01:14:40.084
<v Speaker 1>your current platform,

01:14:40.324 --> 01:14:41.764
<v Speaker 1>some stages to be

01:14:43.764 --> 01:14:45.525
<v Speaker 1>individual for your target platform. Right?

01:14:46.410 --> 01:14:48.410
<v Speaker 1>So if you go back then now then

01:14:51.530 --> 01:14:53.450
<v Speaker 1>so the easiest way to do this in

01:14:53.450 --> 01:14:55.850
<v Speaker 1>a cross compilation thing is that in this

01:14:55.850 --> 01:14:58.010
<v Speaker 1>first stage, we we say

01:14:58.010 --> 01:14:58.330
<v Speaker 1>that,

01:14:59.614 --> 01:15:01.614
<v Speaker 1>oh, there's a there's a massive mistake in

01:15:01.614 --> 01:15:03.935
<v Speaker 1>this example. It's not supposed to be from

01:15:03.935 --> 01:15:06.094
<v Speaker 1>Dash's from. It's supposed to be from Dash's

01:15:06.094 --> 01:15:06.735
<v Speaker 1>platform.

01:15:07.935 --> 01:15:08.974
<v Speaker 0>Ah, okay.

01:15:09.375 --> 01:15:11.374
<v Speaker 1>So so Her request welcome.

01:15:11.855 --> 01:15:12.494
<v Speaker 1>Yeah.

01:15:12.895 --> 01:15:14.255
<v Speaker 1>So so it's, like,

01:15:16.070 --> 01:15:16.390
<v Speaker 1>from

01:15:16.950 --> 01:15:19.430
<v Speaker 1>and you say that this this stage is

01:15:19.430 --> 01:15:21.110
<v Speaker 1>always for the build platform. So you say

01:15:21.110 --> 01:15:22.710
<v Speaker 1>platform equals build platform,

01:15:23.190 --> 01:15:25.270
<v Speaker 1>and then this stage will always be the

01:15:25.270 --> 01:15:27.270
<v Speaker 1>same. Even if you if you build for

01:15:27.270 --> 01:15:29.110
<v Speaker 1>ARM and and you build for AMD, it

01:15:29.110 --> 01:15:31.385
<v Speaker 1>will always be AMD in your case because

01:15:31.385 --> 01:15:31.705
<v Speaker 1>you're

01:15:32.265 --> 01:15:34.185
<v Speaker 1>I believe you were an x 86 machine.

01:15:34.185 --> 01:15:34.665
<v Speaker 1>Right?

01:15:35.465 --> 01:15:37.625
<v Speaker 0>Mhmm. Yep. So so it will always be

01:15:37.625 --> 01:15:39.065
<v Speaker 1>the same. It will always be the same

01:15:39.065 --> 01:15:41.385
<v Speaker 1>command. And then when you define a target

01:15:41.385 --> 01:15:43.785
<v Speaker 1>platform, now the compile step is different

01:15:44.110 --> 01:15:44.990
<v Speaker 1>because it

01:15:46.110 --> 01:15:49.070
<v Speaker 1>the target platform value is different. So the

01:15:49.390 --> 01:15:51.710
<v Speaker 1>so the Alpine image was built one time

01:15:52.030 --> 01:15:53.710
<v Speaker 1>and then compiles

01:15:53.710 --> 01:15:55.790
<v Speaker 1>command run two run two times with a

01:15:55.790 --> 01:15:57.390
<v Speaker 1>different argument to the dashes target.

01:15:58.525 --> 01:16:00.685
<v Speaker 1>And so now we have two binaries, and

01:16:00.685 --> 01:16:03.245
<v Speaker 1>now we have the second stage, Alpine, that

01:16:03.245 --> 01:16:05.324
<v Speaker 1>doesn't have any dashes platform flag.

01:16:05.565 --> 01:16:07.965
<v Speaker 1>So now this this stage is is separate

01:16:07.965 --> 01:16:10.764
<v Speaker 1>again for for every platform,

01:16:11.005 --> 01:16:12.845
<v Speaker 1>and we're just copying the binary to that

01:16:12.845 --> 01:16:13.085
<v Speaker 1>stage.

01:16:14.850 --> 01:16:16.530
<v Speaker 0>Okay. Make a bit sense.

01:16:17.250 --> 01:16:19.170
<v Speaker 0>Yeah. I think that makes sense. Yeah.

01:16:19.810 --> 01:16:22.210
<v Speaker 1>So, basically, in your case, like, I'm I'm

01:16:22.290 --> 01:16:23.890
<v Speaker 1>I switch back to code now.

01:16:26.290 --> 01:16:28.530
<v Speaker 0>Okay. So you're adding the from platform

01:16:28.955 --> 01:16:30.635
<v Speaker 0>to our first part.

01:16:31.275 --> 01:16:33.195
<v Speaker 1>Yeah. So, basically, like, in here, you could

01:16:33.355 --> 01:16:34.795
<v Speaker 1>like, if you're stupid, then you can write

01:16:34.795 --> 01:16:37.595
<v Speaker 1>something like this. Like but but, like, let's

01:16:37.595 --> 01:16:38.635
<v Speaker 1>not do that. Right?

01:16:39.195 --> 01:16:40.875
<v Speaker 1>It will it will be the same value,

01:16:40.875 --> 01:16:41.435
<v Speaker 1>but

01:16:42.320 --> 01:16:43.120
<v Speaker 1>but,

01:16:44.080 --> 01:16:44.880
<v Speaker 1>like,

01:16:44.960 --> 01:16:46.720
<v Speaker 1>this one, then you can use you can

01:16:46.720 --> 01:16:48.720
<v Speaker 1>cross compile from from ARM as well.

01:16:49.520 --> 01:16:52.720
<v Speaker 1>So and in this case, like like, dependencies,

01:16:53.200 --> 01:16:54.880
<v Speaker 1>we can only pull one time as well.

01:16:54.880 --> 01:16:56.480
<v Speaker 1>Like, we don't care about pulling them twice.

01:16:56.480 --> 01:16:57.200
<v Speaker 1>Right? Mhmm.

01:16:57.735 --> 01:16:59.815
<v Speaker 1>And now in here, we can just do

01:16:59.815 --> 01:17:00.934
<v Speaker 1>target

01:17:01.895 --> 01:17:02.775
<v Speaker 1>OS,

01:17:02.775 --> 01:17:04.454
<v Speaker 1>target arch.

01:17:05.335 --> 01:17:07.574
<v Speaker 1>So just to define those arguments so that

01:17:07.574 --> 01:17:08.614
<v Speaker 1>they're now available.

01:17:10.460 --> 01:17:12.780
<v Speaker 1>Of course, the code supports cross completion super

01:17:12.780 --> 01:17:13.499
<v Speaker 1>easily.

01:17:13.739 --> 01:17:15.820
<v Speaker 1>Yeah. We can just do a target OS

01:17:15.820 --> 01:17:16.619
<v Speaker 1>in here.

01:17:17.420 --> 01:17:18.459
<v Speaker 1>The large

01:17:19.659 --> 01:17:20.619
<v Speaker 1>equals

01:17:21.260 --> 01:17:21.979
<v Speaker 1>target

01:17:22.300 --> 01:17:22.620
<v Speaker 1>arch,

01:17:24.115 --> 01:17:25.554
<v Speaker 1>And I think that's it.

01:17:28.355 --> 01:17:29.715
<v Speaker 0>Okay. Let's try.

01:17:32.195 --> 01:17:34.275
<v Speaker 0>Alright. So So you can you can just

01:17:34.275 --> 01:17:35.955
<v Speaker 1>run the run the same pay pay command

01:17:35.955 --> 01:17:39.075
<v Speaker 1>again. Yeah. Just nothing changes. That's it. Alright.

01:17:41.180 --> 01:17:43.100
<v Speaker 1>Now now you can already see, like, the

01:17:43.100 --> 01:17:45.820
<v Speaker 1>the go image only one time in here.

01:17:45.820 --> 01:17:47.739
<v Speaker 1>Previously, it was it was

01:17:47.980 --> 01:17:49.020
<v Speaker 1>multiple times.

01:17:50.700 --> 01:17:53.260
<v Speaker 1>And now

01:17:52.715 --> 01:17:55.995
<v Speaker 1>now you understand why the one one miscached.

01:17:55.995 --> 01:17:58.475
<v Speaker 1>Right? The other the other one isn't because,

01:17:58.475 --> 01:18:00.155
<v Speaker 1>like, the the

01:18:00.475 --> 01:18:01.275
<v Speaker 1>your

01:18:01.675 --> 01:18:03.835
<v Speaker 1>any of the 64 notes did not have

01:18:03.835 --> 01:18:04.875
<v Speaker 1>the RNCache yet.

01:18:07.520 --> 01:18:08.320
<v Speaker 0>Okay.

01:18:08.880 --> 01:18:09.600
<v Speaker 0>Right.

01:18:10.000 --> 01:18:12.480
<v Speaker 1>Okay. It it make a little bit sense.

01:18:12.960 --> 01:18:14.480
<v Speaker 1>But but now, like like, if you if

01:18:14.480 --> 01:18:16.320
<v Speaker 1>you run this if you make make a

01:18:16.320 --> 01:18:18.240
<v Speaker 1>code change now and you run it run

01:18:18.240 --> 01:18:18.720
<v Speaker 1>this again,

01:18:33.650 --> 01:18:34.610
<v Speaker 0>Okay. So

01:18:35.730 --> 01:18:38.929
<v Speaker 1>Okay. So so six seconds in total. Like,

01:18:38.929 --> 01:18:40.770
<v Speaker 1>that's okay. Three for each pointer.

01:18:44.525 --> 01:18:46.684
<v Speaker 1>So so now you have a

01:18:47.324 --> 01:18:49.324
<v Speaker 1>you're building for multiple platforms

01:18:49.324 --> 01:18:51.485
<v Speaker 1>with with the same speed that you had

01:18:51.485 --> 01:18:52.044
<v Speaker 1>before.

01:18:52.764 --> 01:18:55.085
<v Speaker 0>Yeah. So there there there was a change

01:18:55.085 --> 01:18:57.324
<v Speaker 0>there. It only happened in the Dockerfile, and

01:18:57.324 --> 01:18:58.685
<v Speaker 0>I I wanna make sure I understand this

01:18:58.685 --> 01:19:01.490
<v Speaker 0>correctly. Sure. Right? As previously, before we added

01:19:01.490 --> 01:19:04.130
<v Speaker 0>the platform to the from here and the

01:19:04.370 --> 01:19:05.889
<v Speaker 0>ARC for the target OS,

01:19:06.530 --> 01:19:09.330
<v Speaker 0>we were using different container images with QEM

01:19:09.330 --> 01:19:11.970
<v Speaker 0>emulation to compile the things within the different

01:19:11.970 --> 01:19:12.530
<v Speaker 0>containers.

01:19:13.255 --> 01:19:14.855
<v Speaker 0>But Docker

01:19:14.855 --> 01:19:17.015
<v Speaker 0>or BuildKit seems to be smart enough to

01:19:17.015 --> 01:19:18.695
<v Speaker 0>work out that if I have a platform

01:19:18.695 --> 01:19:21.335
<v Speaker 0>from with these args things here that it

01:19:21.335 --> 01:19:23.335
<v Speaker 0>can do that same compilation

01:19:23.575 --> 01:19:26.135
<v Speaker 0>compilation in the same container.

01:19:27.130 --> 01:19:29.690
<v Speaker 1>So But it's no longer using the the

01:19:29.690 --> 01:19:30.409
<v Speaker 0>second

01:19:30.970 --> 01:19:32.010
<v Speaker 0>QMU

01:19:32.170 --> 01:19:33.290
<v Speaker 0>and the BuildKit.

01:19:33.370 --> 01:19:35.530
<v Speaker 0>Is that right? So so the so the

01:19:35.530 --> 01:19:37.130
<v Speaker 1>first thing to understand in here is that

01:19:37.130 --> 01:19:39.930
<v Speaker 1>the whole, like, like, the BuildKit design is

01:19:39.930 --> 01:19:42.385
<v Speaker 1>like deep application. Right? So you're building, like,

01:19:42.385 --> 01:19:44.864
<v Speaker 1>two targets in parallel. They share some parts.

01:19:44.945 --> 01:19:47.505
<v Speaker 1>Like, BuildKit, we just, like, optimize them together.

01:19:47.824 --> 01:19:50.065
<v Speaker 1>Like, it's it's like it's one of the,

01:19:50.065 --> 01:19:52.304
<v Speaker 1>like, the key key principles of the design.

01:19:52.625 --> 01:19:54.784
<v Speaker 1>So so, like, to

01:19:54.784 --> 01:19:55.585
<v Speaker 1>to be efficient,

01:19:56.090 --> 01:19:57.610
<v Speaker 1>the first step is to not run the

01:19:57.610 --> 01:19:59.929
<v Speaker 1>code that's useless. Right? So it will always

01:19:59.929 --> 01:20:01.530
<v Speaker 1>detect those things that

01:20:01.610 --> 01:20:03.610
<v Speaker 1>if if your two builds share some some

01:20:03.610 --> 01:20:04.329
<v Speaker 1>components,

01:20:04.650 --> 01:20:06.730
<v Speaker 1>then it will combine them together. Now in

01:20:06.730 --> 01:20:08.010
<v Speaker 1>this case, for example,

01:20:08.250 --> 01:20:10.010
<v Speaker 1>let's say you're building for the

01:20:10.485 --> 01:20:11.844
<v Speaker 1>for the ARM target.

01:20:12.485 --> 01:20:14.804
<v Speaker 1>I this stage started before there was the

01:20:14.804 --> 01:20:17.445
<v Speaker 1>Dashes platform flag in here. Mhmm. Though those

01:20:17.445 --> 01:20:19.364
<v Speaker 1>commands would have been different. One of those

01:20:19.364 --> 01:20:21.445
<v Speaker 1>commands would have been get me a colon

01:20:21.445 --> 01:20:23.364
<v Speaker 1>image for AMD sixty four, and the other

01:20:23.364 --> 01:20:24.885
<v Speaker 1>one would have been get me colon image

01:20:24.885 --> 01:20:27.950
<v Speaker 1>for ARM sixty four. Yeah. Now because because

01:20:27.950 --> 01:20:29.790
<v Speaker 1>they're all both fixed to the build platform,

01:20:29.790 --> 01:20:31.790
<v Speaker 1>now they're both saying, give me a colon

01:20:31.790 --> 01:20:34.270
<v Speaker 1>image for AMD sixty four. And BuildKit will

01:20:34.270 --> 01:20:36.510
<v Speaker 1>instantly, like, notice that, like, hey. Like, those

01:20:36.510 --> 01:20:38.430
<v Speaker 1>two builds are they're using the same image,

01:20:38.430 --> 01:20:39.390
<v Speaker 1>so they're the same command.

01:20:40.135 --> 01:20:42.695
<v Speaker 1>And and and then it's just like, for

01:20:42.695 --> 01:20:45.415
<v Speaker 1>example, once they go more download in here,

01:20:45.415 --> 01:20:48.535
<v Speaker 1>it still understands that those those two

01:20:48.695 --> 01:20:50.535
<v Speaker 1>commands are the same command that runs on

01:20:50.535 --> 01:20:52.695
<v Speaker 1>top of same image, so they're the same.

01:20:53.670 --> 01:20:56.630
<v Speaker 0>Yes. It it's like that. Step but the

01:20:56.630 --> 01:20:58.950
<v Speaker 1>compilation step is not is not same. Right?

01:20:59.350 --> 01:21:02.150
<v Speaker 1>Because the compilation step has those two different

01:21:02.150 --> 01:21:03.350
<v Speaker 1>environment variables,

01:21:03.670 --> 01:21:05.430
<v Speaker 1>so that command is not equal anymore.

01:21:06.135 --> 01:21:07.895
<v Speaker 0>Okay. So I'm just gonna make this special

01:21:07.895 --> 01:21:09.414
<v Speaker 0>for other people in case because it it

01:21:09.414 --> 01:21:11.335
<v Speaker 0>took a little bit moment for me. But

01:21:11.335 --> 01:21:13.574
<v Speaker 0>when these were a metered, what we actually

01:21:13.574 --> 01:21:15.655
<v Speaker 0>had were multiple steps

01:21:16.215 --> 01:21:16.855
<v Speaker 0>like this.

01:21:19.190 --> 01:21:21.510
<v Speaker 0>However, when we or when you made that

01:21:21.510 --> 01:21:24.230
<v Speaker 0>change to say use the build platform,

01:21:24.469 --> 01:21:25.910
<v Speaker 0>we actually reduced

01:21:25.910 --> 01:21:27.590
<v Speaker 0>the instructions that that was sent to BuildKit,

01:21:27.590 --> 01:21:29.590
<v Speaker 0>which is why it can do those jobs

01:21:29.590 --> 01:21:31.295
<v Speaker 0>as it did. Okay. That makes a lot

01:21:31.295 --> 01:21:33.054
<v Speaker 0>of sense now. I got it. So so,

01:21:33.054 --> 01:21:34.735
<v Speaker 1>yeah, like, let's say that if you were

01:21:34.735 --> 01:21:37.135
<v Speaker 1>building this Alpine target in here, like, in

01:21:37.135 --> 01:21:38.574
<v Speaker 1>line 17 still,

01:21:39.215 --> 01:21:40.014
<v Speaker 1>like, then

01:21:40.815 --> 01:21:42.574
<v Speaker 1>then previously,

01:21:42.574 --> 01:21:44.815
<v Speaker 1>we would have pulled two Golang images and

01:21:44.815 --> 01:21:45.695
<v Speaker 1>two Alpine images.

01:21:46.360 --> 01:21:49.400
<v Speaker 0>Mhmm. Right? With now with this change, we're

01:21:49.400 --> 01:21:51.480
<v Speaker 1>pulling one Golang image only.

01:21:52.520 --> 01:21:54.680
<v Speaker 1>We run the compiler always on one Golang

01:21:54.680 --> 01:21:56.360
<v Speaker 1>image, and then but we still have two

01:21:56.360 --> 01:21:58.760
<v Speaker 1>Golang images. Right? Because in the end, like,

01:21:58.760 --> 01:22:00.120
<v Speaker 1>we want to push the

01:22:00.945 --> 01:22:02.865
<v Speaker 1>e v 64 image based on e v

01:22:02.865 --> 01:22:05.105
<v Speaker 1>64 Alpine and and, like, the busy box

01:22:05.105 --> 01:22:07.025
<v Speaker 1>in that image will be will will come

01:22:07.025 --> 01:22:08.225
<v Speaker 1>from different images.

01:22:08.865 --> 01:22:09.745
<v Speaker 0>Got it.

01:22:10.465 --> 01:22:11.824
<v Speaker 0>Very nice. I like that.

01:22:12.225 --> 01:22:14.570
<v Speaker 0>And we did it at time. Right?

01:22:14.730 --> 01:22:15.849
<v Speaker 1>Yeah. So

01:22:16.170 --> 01:22:18.490
<v Speaker 1>one one thing that was different thing well,

01:22:18.490 --> 01:22:20.490
<v Speaker 1>first of all, let's check your Darmin.

01:22:20.490 --> 01:22:21.929
<v Speaker 1>So just just

01:22:22.170 --> 01:22:24.570
<v Speaker 1>put the run the same command, but put

01:22:24.570 --> 01:22:27.690
<v Speaker 1>your that's just platform, put Darmin in 64

01:22:27.690 --> 01:22:27.930
<v Speaker 1>there.

01:22:28.945 --> 01:22:30.705
<v Speaker 1>Because now there's no reason for the Darwin

01:22:30.705 --> 01:22:31.585
<v Speaker 1>not to work.

01:22:33.425 --> 01:22:34.705
<v Speaker 0>Sorry. Can you say that again? I missed

01:22:34.705 --> 01:22:35.184
<v Speaker 0>it.

01:22:36.065 --> 01:22:38.304
<v Speaker 1>That's in the in the Dutch platform.

01:22:38.545 --> 01:22:39.985
<v Speaker 1>You can So an HTML.

01:22:40.790 --> 01:22:41.430
<v Speaker 1>Yeah.

01:22:41.590 --> 01:22:44.150
<v Speaker 1>In here You want to add the Darwin?

01:22:44.630 --> 01:22:45.270
<v Speaker 1>Yeah.

01:22:48.390 --> 01:22:50.150
<v Speaker 1>Yeah. You can even, like, remove the other

01:22:50.150 --> 01:22:52.070
<v Speaker 1>ones because, like, I guess for the default,

01:22:52.070 --> 01:22:54.070
<v Speaker 1>like, you just want your local one. Right?

01:22:57.065 --> 01:22:59.145
<v Speaker 1>Yeah. You can just try this one. Oh,

01:22:59.145 --> 01:22:59.545
<v Speaker 0>okay.

01:23:07.480 --> 01:23:09.320
<v Speaker 0>Okay. So this okay.

01:23:09.320 --> 01:23:11.480
<v Speaker 0>Yeah. This works because of the build platform

01:23:11.480 --> 01:23:13.800
<v Speaker 0>on the frontline, which always builds the AMD

01:23:13.800 --> 01:23:15.640
<v Speaker 0>sixty four or whatever my build platform is,

01:23:15.640 --> 01:23:17.480
<v Speaker 0>and then relies on the Google cross compilation

01:23:17.480 --> 01:23:19.560
<v Speaker 0>by setting the target OS and the target

01:23:19.560 --> 01:23:22.054
<v Speaker 0>arch, which is why Exactly. I got it.

01:23:22.054 --> 01:23:23.415
<v Speaker 1>I I I do but you want you

01:23:23.415 --> 01:23:25.815
<v Speaker 1>understand why it didn't work before. Right? Yes.

01:23:25.815 --> 01:23:28.054
<v Speaker 1>Because, a first step, like, it didn't even

01:23:28.054 --> 01:23:30.534
<v Speaker 1>doesn't even reach to QMU. It's like

01:23:30.935 --> 01:23:32.375
<v Speaker 1>the pillar would say, like, give me a

01:23:32.375 --> 01:23:34.989
<v Speaker 1>Darwin in the 64 image for Golang. And,

01:23:34.989 --> 01:23:36.670
<v Speaker 1>of course, there's no such thing. Like, there's

01:23:36.670 --> 01:23:38.750
<v Speaker 1>no Darwin Darwin image there. Like, that that

01:23:38.830 --> 01:23:40.749
<v Speaker 1>that's why it doesn't work.

01:23:41.469 --> 01:23:44.750
<v Speaker 0>Finally. Yeah. I'm I'm obviously just picking this

01:23:44.750 --> 01:23:46.270
<v Speaker 0>up a little bit slow, but I got

01:23:46.270 --> 01:23:48.795
<v Speaker 0>it. That's awesome. So now for languages like

01:23:48.795 --> 01:23:51.515
<v Speaker 0>go and rust where cross compilation is available

01:23:51.515 --> 01:23:54.315
<v Speaker 0>with the compiler tool chain, you can really

01:23:54.315 --> 01:23:56.075
<v Speaker 0>build some pretty nice

01:23:56.075 --> 01:23:59.595
<v Speaker 0>build pipelines with bake and HCL and BuildKit.

01:23:59.595 --> 01:24:00.795
<v Speaker 0>I think that works really well.

01:24:03.310 --> 01:24:06.110
<v Speaker 0>Cool. Yeah. And and and and so

01:24:06.670 --> 01:24:08.590
<v Speaker 1>now you can try to run this one.

01:24:08.590 --> 01:24:11.070
<v Speaker 1>Like, this one, just bin blocks

01:24:11.150 --> 01:24:13.070
<v Speaker 1>should should run-in our machine. Right?

01:24:14.430 --> 01:24:15.790
<v Speaker 1>Well Yeah. The same command.

01:24:18.534 --> 01:24:21.255
<v Speaker 0>Oh, sorry. Your It's not gone. Yeah.

01:24:21.255 --> 01:24:23.574
<v Speaker 1>Yeah. It's it's this one because you only

01:24:23.574 --> 01:24:26.215
<v Speaker 1>built a single platform. It it's configurable, actually,

01:24:26.215 --> 01:24:27.574
<v Speaker 1>like, if you if you don't want it.

01:24:27.574 --> 01:24:28.375
<v Speaker 1>Yeah. It works.

01:24:29.550 --> 01:24:30.590
<v Speaker 1>And the

01:24:31.310 --> 01:24:32.110
<v Speaker 1>last thing

01:24:32.510 --> 01:24:33.870
<v Speaker 0>Yeah. What

01:24:34.030 --> 01:24:36.270
<v Speaker 1>was the like, if you remember in in

01:24:36.270 --> 01:24:38.270
<v Speaker 1>my project, there wasn't already named six four

01:24:38.270 --> 01:24:40.350
<v Speaker 1>in there. There was just local. So local

01:24:40.350 --> 01:24:41.630
<v Speaker 1>is just like a hack thing

01:24:42.525 --> 01:24:44.205
<v Speaker 1>in the in the in the in the

01:24:44.205 --> 01:24:45.804
<v Speaker 1>in in format projects when you where you

01:24:45.804 --> 01:24:47.005
<v Speaker 1>copy the big file.

01:24:47.324 --> 01:24:50.045
<v Speaker 1>Yeah. That one. Like, I I had local

01:24:50.045 --> 01:24:51.885
<v Speaker 1>in here. Ah, so anyone that wants to

01:24:51.885 --> 01:24:53.324
<v Speaker 0>build the binary, they can just use that

01:24:53.324 --> 01:24:55.485
<v Speaker 0>local. So local is just like a magic

01:24:55.485 --> 01:24:58.640
<v Speaker 1>platform value that is, like, if I'm copying

01:24:58.800 --> 01:25:00.560
<v Speaker 1>if I'm running your big file,

01:25:00.880 --> 01:25:02.800
<v Speaker 1>I'm on ARM, then it will mean tarry

01:25:02.800 --> 01:25:04.960
<v Speaker 1>in ARM 64 for me. If, like, Linux

01:25:04.960 --> 01:25:07.840
<v Speaker 1>person is is running big on their machine,

01:25:07.840 --> 01:25:09.440
<v Speaker 1>it will it will mean whatever,

01:25:09.760 --> 01:25:12.025
<v Speaker 1>like, their system is. So if you want

01:25:12.025 --> 01:25:13.545
<v Speaker 1>to just local binary, then you would use

01:25:13.545 --> 01:25:15.784
<v Speaker 1>this one instead of instead of hard coding

01:25:15.784 --> 01:25:16.664
<v Speaker 1>in

01:25:16.664 --> 01:25:17.704
<v Speaker 1>the 64.

01:25:18.025 --> 01:25:19.945
<v Speaker 1>It will be exactly the same binary in

01:25:19.945 --> 01:25:22.264
<v Speaker 1>the end. Okay. So I can just

01:25:23.304 --> 01:25:23.545
<v Speaker 0>Local.

01:25:24.610 --> 01:25:25.650
<v Speaker 1>Yeah. It's okay.

01:25:26.050 --> 01:25:27.970
<v Speaker 0>I guess that's all

01:25:28.210 --> 01:25:29.250
<v Speaker 0>I'll go back,

01:25:29.730 --> 01:25:31.810
<v Speaker 0>and that should be pretty instant. Right? So

01:25:35.250 --> 01:25:36.690
<v Speaker 1>And yeah. And if you want to get,

01:25:36.690 --> 01:25:39.595
<v Speaker 1>like, further into this, then this project, this

01:25:39.595 --> 01:25:40.715
<v Speaker 1>XX project

01:25:41.195 --> 01:25:43.915
<v Speaker 1>is, like, what I use, like, for more

01:25:43.915 --> 01:25:44.795
<v Speaker 1>complicated

01:25:45.435 --> 01:25:47.995
<v Speaker 1>cross compilation flows. Like, for example, you can

01:25:47.995 --> 01:25:50.075
<v Speaker 1>imagine, like, at the moment, we have the

01:25:50.075 --> 01:25:52.315
<v Speaker 1>SQL enabled SQL zero in your in your

01:25:52.315 --> 01:25:54.580
<v Speaker 1>build. Right? Like, let's say, we you need

01:25:54.580 --> 01:25:56.260
<v Speaker 1>c go enabled equals one,

01:25:57.140 --> 01:25:59.300
<v Speaker 1>then it's not so simple to do cross

01:25:59.300 --> 01:26:00.740
<v Speaker 1>compilation anymore. Right?

01:26:01.540 --> 01:26:01.860
<v Speaker 1>So

01:26:02.340 --> 01:26:04.340
<v Speaker 1>like, the c cross compilation tool chain is

01:26:04.340 --> 01:26:06.580
<v Speaker 1>way harder than than

01:26:06.740 --> 01:26:08.580
<v Speaker 1>than go cross compilation tool chain.

01:26:09.275 --> 01:26:09.834
<v Speaker 1>And

01:26:10.235 --> 01:26:12.395
<v Speaker 1>this this project basically makes it easy. So,

01:26:12.395 --> 01:26:14.235
<v Speaker 1>like, any anyone interested, like, can can look

01:26:14.235 --> 01:26:15.994
<v Speaker 1>at just follow the examples in here. Like,

01:26:15.994 --> 01:26:17.755
<v Speaker 1>there's examples in here how to how to

01:26:17.755 --> 01:26:19.755
<v Speaker 1>build c and, like and once you set

01:26:19.755 --> 01:26:21.755
<v Speaker 1>up c, then then

01:26:22.470 --> 01:26:24.870
<v Speaker 1>then you'll automatically have c go and and

01:26:24.870 --> 01:26:25.670
<v Speaker 1>things like that.

01:26:26.790 --> 01:26:28.230
<v Speaker 0>What was that? And, like, how how to

01:26:28.230 --> 01:26:30.150
<v Speaker 1>install packages and, like, you you can, like,

01:26:30.150 --> 01:26:31.030
<v Speaker 1>basically, like

01:26:31.910 --> 01:26:32.310
<v Speaker 1>like

01:26:33.270 --> 01:26:35.670
<v Speaker 1>I hope, like, for for most, like, c

01:26:35.670 --> 01:26:36.710
<v Speaker 1>c and

01:26:36.950 --> 01:26:37.910
<v Speaker 1>co project, like,

01:26:38.475 --> 01:26:40.475
<v Speaker 1>they should this basically is like a almost

01:26:40.475 --> 01:26:42.235
<v Speaker 1>like a drop in. So we just, like,

01:26:42.235 --> 01:26:44.475
<v Speaker 1>drop drop this into your into your build

01:26:44.475 --> 01:26:47.435
<v Speaker 1>stage and and basically the same simple things

01:26:47.435 --> 01:26:49.114
<v Speaker 1>that you had in Go. Like, this works

01:26:49.114 --> 01:26:50.395
<v Speaker 1>for the different languages as well.

01:26:54.530 --> 01:26:56.530
<v Speaker 0>Awesome. Alright. I'll include a link to this.

01:26:56.530 --> 01:26:58.450
<v Speaker 0>I think people should check it out. Just

01:26:58.450 --> 01:26:59.890
<v Speaker 0>see some of this. So there's the the

01:26:59.890 --> 01:27:01.730
<v Speaker 0>Go example there. So Yeah.

01:27:02.210 --> 01:27:03.010
<v Speaker 1>Alright. Cool.

01:27:05.185 --> 01:27:07.585
<v Speaker 1>So this is what we actually use in

01:27:07.585 --> 01:27:10.705
<v Speaker 1>all our projects. We just, like, drop this

01:27:10.705 --> 01:27:14.545
<v Speaker 1>into our Docker file, and and then we

01:27:14.545 --> 01:27:15.345
<v Speaker 1>have those

01:27:16.065 --> 01:27:18.705
<v Speaker 1>those million exported targets. Like, if you look

01:27:18.705 --> 01:27:21.270
<v Speaker 1>at, like like, BuildKit itself, like, it's all

01:27:21.270 --> 01:27:22.550
<v Speaker 1>built from Dockerfile.

01:27:22.790 --> 01:27:24.550
<v Speaker 1>It's built into, like, I don't know, 10

01:27:24.550 --> 01:27:26.150
<v Speaker 1>platforms or something like that,

01:27:26.469 --> 01:27:28.789
<v Speaker 1>and it's and it's all through this.

01:27:29.590 --> 01:27:31.269
<v Speaker 0>Nice. Very, very cool.

01:27:32.230 --> 01:27:32.790
<v Speaker 0>Alright.

01:27:34.955 --> 01:27:37.034
<v Speaker 0>Anything else? Are you happy with that?

01:27:37.435 --> 01:27:41.115
<v Speaker 0>Like Sure. Good question. Pig supports Compose. It

01:27:41.275 --> 01:27:43.994
<v Speaker 1>like, yes. It does support support Compose.

01:27:43.995 --> 01:27:46.235
<v Speaker 1>Okay. Yeah. So question,

01:27:46.235 --> 01:27:47.995
<v Speaker 0>it would because of Pig could support Compose

01:27:47.995 --> 01:27:48.395
<v Speaker 0>spec.

01:27:48.840 --> 01:27:51.479
<v Speaker 0>YAML, is that different from Docker Compose?

01:27:52.679 --> 01:27:53.479
<v Speaker 1>No.

01:27:53.800 --> 01:27:55.320
<v Speaker 1>It's just like like

01:27:55.560 --> 01:27:57.959
<v Speaker 1>you can you can use

01:27:59.159 --> 01:28:00.760
<v Speaker 1>like, if you have a composed file,

01:28:00.920 --> 01:28:02.599
<v Speaker 1>you can you can, of course, build it

01:28:02.599 --> 01:28:04.765
<v Speaker 1>with the compose itself as well. You can

01:28:04.765 --> 01:28:06.685
<v Speaker 1>also just directly build it with BuildKit.

01:28:07.005 --> 01:28:08.525
<v Speaker 1>Can just do basically that. If you do

01:28:08.525 --> 01:28:10.365
<v Speaker 1>BuildKit, you have a Compose file in the

01:28:10.365 --> 01:28:13.965
<v Speaker 1>directory. It will just build all your Compose

01:28:13.965 --> 01:28:16.765
<v Speaker 1>services with bake in parallel and everything. All

01:28:16.765 --> 01:28:19.485
<v Speaker 1>all the goodness with that one. Or you

01:28:19.485 --> 01:28:22.110
<v Speaker 1>can, like, choose a a composed service

01:28:22.190 --> 01:28:24.510
<v Speaker 1>from your composed file same as your you

01:28:24.510 --> 01:28:26.430
<v Speaker 1>had your binary target in here.

01:28:27.070 --> 01:28:28.670
<v Speaker 0>Right. And we got a question from Noel

01:28:28.670 --> 01:28:31.710
<v Speaker 0>asking, does XX use BIN format magic?

01:28:32.765 --> 01:28:34.045
<v Speaker 1>So no.

01:28:34.285 --> 01:28:37.645
<v Speaker 1>It so bin format is the QEM emulation.

01:28:37.645 --> 01:28:40.525
<v Speaker 1>Right? Bin format is actually like the like

01:28:40.525 --> 01:28:43.085
<v Speaker 1>the bin format misc is like the kernel

01:28:43.085 --> 01:28:45.725
<v Speaker 1>feature that allows loading emulators. That's why it's

01:28:45.725 --> 01:28:47.690
<v Speaker 1>called bin format. So bin format is the

01:28:47.690 --> 01:28:49.770
<v Speaker 1>emulation side if you want to if you

01:28:49.770 --> 01:28:51.290
<v Speaker 1>want to add emulation, if you take the

01:28:51.290 --> 01:28:54.010
<v Speaker 1>performance penalty, but what no changes in your

01:28:54.010 --> 01:28:57.130
<v Speaker 1>Docker file, excess excess cross compilation.

01:28:57.370 --> 01:28:58.890
<v Speaker 1>So that's

01:28:59.290 --> 01:29:01.930
<v Speaker 1>that's that's for defining the

01:29:02.135 --> 01:29:03.575
<v Speaker 1>if if you're if you're going through the

01:29:03.575 --> 01:29:05.495
<v Speaker 1>cross compilation route, then XX makes it easy

01:29:05.495 --> 01:29:07.415
<v Speaker 1>to build c projects and CMake and and

01:29:07.415 --> 01:29:08.375
<v Speaker 1>all those things.

01:29:09.415 --> 01:29:11.815
<v Speaker 0>Alright. Awesome. I don't think we have any

01:29:11.815 --> 01:29:12.615
<v Speaker 0>more questions.

01:29:13.015 --> 01:29:15.890
<v Speaker 0>I have learned an absolute metric ton today

01:29:15.890 --> 01:29:18.850
<v Speaker 0>looking at BuildKit and BuildX. So thank

01:29:18.850 --> 01:29:21.409
<v Speaker 0>you for walking us through this, Thomas.

01:29:22.050 --> 01:29:24.210
<v Speaker 0>Really, really cool projects. I'm looking forward to

01:29:24.210 --> 01:29:25.090
<v Speaker 0>adopting

01:29:25.410 --> 01:29:27.650
<v Speaker 0>more Docker files aren't just copying them a

01:29:27.650 --> 01:29:29.765
<v Speaker 0>binary. Think we've cleaned up Thank

01:29:30.405 --> 01:29:32.485
<v Speaker 0>I think we've cleaned up my the QBox

01:29:32.485 --> 01:29:34.325
<v Speaker 0>project really nicely. I'm looking forward to sending

01:29:34.325 --> 01:29:35.925
<v Speaker 0>that PR to Brian and getting him to

01:29:35.925 --> 01:29:36.965
<v Speaker 0>take a look at it.

01:29:37.605 --> 01:29:39.445
<v Speaker 0>So very, very cool. Yeah.

01:29:40.750 --> 01:29:42.270
<v Speaker 0>A couple of thanks coming in the chat,

01:29:42.270 --> 01:29:43.869
<v Speaker 0>I'll throw them up in the intro. Thomas,

01:29:43.869 --> 01:29:46.590
<v Speaker 0>thank you so much. That was fantastic.

01:29:46.590 --> 01:29:48.429
<v Speaker 0>So thank you for spending there your afternoon

01:29:48.429 --> 01:29:49.150
<v Speaker 0>with us.

01:29:49.630 --> 01:29:51.550
<v Speaker 1>Thank you. Alright. Have a great day. Bye

01:29:51.550 --> 01:29:51.790
<v Speaker 0>all.
